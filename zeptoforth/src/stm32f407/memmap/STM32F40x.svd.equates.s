@ arm-none-eabi-as equates file for STM32F40x
@ SVD2GAS Equates Generator, Copyright Terry Porter 2017 "terry@tjporter.com.au" for arm-none-eabi-as 
@ Matthias Koch Complimentary Edition 2017
@ Takes a CMSIS-SVD file plus a hand edited config.xml file as input 
@ Licensed under the GPL, see http://www.gnu.org/licenses/


@=========================== RNG ===========================@
.equ RNG_BASE, 0x50060800 @ (Random number generator) 
    .equ RNG_CR, RNG_BASE + 0x0 @ (control register) 
        .equ RNG_CR_IE, 1 << 3   @ bitWidth 1 (Interrupt enable)  
        .equ RNG_CR_RNGEN, 1 << 2   @ bitWidth 1 (Random number generator  enable)  
 
    .equ RNG_SR, RNG_BASE + 0x4 @ (status register) 
        .equ RNG_SR_SEIS, 1 << 6   @ bitWidth 1 (Seed error interrupt  status)  
        .equ RNG_SR_CEIS, 1 << 5   @ bitWidth 1 (Clock error interrupt  status)  
        .equ RNG_SR_SECS, 1 << 2   @ bitWidth 1 (Seed error current status)  
        .equ RNG_SR_CECS, 1 << 1   @ bitWidth 1 (Clock error current status)  
        .equ RNG_SR_DRDY, 1 << 0   @ bitWidth 1 (Data ready)  
 
    .equ RNG_DR, RNG_BASE + 0x8 @ (data register) 
        .equ RNG_DR_RNDATA_Shift, 0   @ bitWidth 32 (Random data)  
 

@=========================== DCMI ===========================@
.equ DCMI_BASE, 0x50050000 @ (Digital camera interface) 
    .equ DCMI_CR, DCMI_BASE + 0x0 @ (control register 1) 
        .equ DCMI_CR_ENABLE, 1 << 14   @ bitWidth 1 (DCMI enable)  
        .equ DCMI_CR_EDM_Shift, 10   @ bitWidth 2 (Extended data mode)  
        .equ DCMI_CR_FCRC_Shift, 8   @ bitWidth 2 (Frame capture rate control)  
        .equ DCMI_CR_VSPOL, 1 << 7   @ bitWidth 1 (Vertical synchronization  polarity)  
        .equ DCMI_CR_HSPOL, 1 << 6   @ bitWidth 1 (Horizontal synchronization  polarity)  
        .equ DCMI_CR_PCKPOL, 1 << 5   @ bitWidth 1 (Pixel clock polarity)  
        .equ DCMI_CR_ESS, 1 << 4   @ bitWidth 1 (Embedded synchronization  select)  
        .equ DCMI_CR_JPEG, 1 << 3   @ bitWidth 1 (JPEG format)  
        .equ DCMI_CR_CROP, 1 << 2   @ bitWidth 1 (Crop feature)  
        .equ DCMI_CR_CM, 1 << 1   @ bitWidth 1 (Capture mode)  
        .equ DCMI_CR_CAPTURE, 1 << 0   @ bitWidth 1 (Capture enable)  
 
    .equ DCMI_SR, DCMI_BASE + 0x4 @ (status register) 
        .equ DCMI_SR_FNE, 1 << 2   @ bitWidth 1 (FIFO not empty)  
        .equ DCMI_SR_VSYNC, 1 << 1   @ bitWidth 1 (VSYNC)  
        .equ DCMI_SR_HSYNC, 1 << 0   @ bitWidth 1 (HSYNC)  
 
    .equ DCMI_RIS, DCMI_BASE + 0x8 @ (raw interrupt status register) 
        .equ DCMI_RIS_LINE_RIS, 1 << 4   @ bitWidth 1 (Line raw interrupt status)  
        .equ DCMI_RIS_VSYNC_RIS, 1 << 3   @ bitWidth 1 (VSYNC raw interrupt status)  
        .equ DCMI_RIS_ERR_RIS, 1 << 2   @ bitWidth 1 (Synchronization error raw interrupt  status)  
        .equ DCMI_RIS_OVR_RIS, 1 << 1   @ bitWidth 1 (Overrun raw interrupt  status)  
        .equ DCMI_RIS_FRAME_RIS, 1 << 0   @ bitWidth 1 (Capture complete raw interrupt  status)  
 
    .equ DCMI_IER, DCMI_BASE + 0xC @ (interrupt enable register) 
        .equ DCMI_IER_LINE_IE, 1 << 4   @ bitWidth 1 (Line interrupt enable)  
        .equ DCMI_IER_VSYNC_IE, 1 << 3   @ bitWidth 1 (VSYNC interrupt enable)  
        .equ DCMI_IER_ERR_IE, 1 << 2   @ bitWidth 1 (Synchronization error interrupt  enable)  
        .equ DCMI_IER_OVR_IE, 1 << 1   @ bitWidth 1 (Overrun interrupt enable)  
        .equ DCMI_IER_FRAME_IE, 1 << 0   @ bitWidth 1 (Capture complete interrupt  enable)  
 
    .equ DCMI_MIS, DCMI_BASE + 0x10 @ (masked interrupt status  register) 
        .equ DCMI_MIS_LINE_MIS, 1 << 4   @ bitWidth 1 (Line masked interrupt  status)  
        .equ DCMI_MIS_VSYNC_MIS, 1 << 3   @ bitWidth 1 (VSYNC masked interrupt  status)  
        .equ DCMI_MIS_ERR_MIS, 1 << 2   @ bitWidth 1 (Synchronization error masked interrupt  status)  
        .equ DCMI_MIS_OVR_MIS, 1 << 1   @ bitWidth 1 (Overrun masked interrupt  status)  
        .equ DCMI_MIS_FRAME_MIS, 1 << 0   @ bitWidth 1 (Capture complete masked interrupt  status)  
 
    .equ DCMI_ICR, DCMI_BASE + 0x14 @ (interrupt clear register) 
        .equ DCMI_ICR_LINE_ISC, 1 << 4   @ bitWidth 1 (line interrupt status  clear)  
        .equ DCMI_ICR_VSYNC_ISC, 1 << 3   @ bitWidth 1 (Vertical synch interrupt status  clear)  
        .equ DCMI_ICR_ERR_ISC, 1 << 2   @ bitWidth 1 (Synchronization error interrupt status  clear)  
        .equ DCMI_ICR_OVR_ISC, 1 << 1   @ bitWidth 1 (Overrun interrupt status  clear)  
        .equ DCMI_ICR_FRAME_ISC, 1 << 0   @ bitWidth 1 (Capture complete interrupt status  clear)  
 
    .equ DCMI_ESCR, DCMI_BASE + 0x18 @ (embedded synchronization code  register) 
        .equ DCMI_ESCR_FEC_Shift, 24   @ bitWidth 8 (Frame end delimiter code)  
        .equ DCMI_ESCR_LEC_Shift, 16   @ bitWidth 8 (Line end delimiter code)  
        .equ DCMI_ESCR_LSC_Shift, 8   @ bitWidth 8 (Line start delimiter code)  
        .equ DCMI_ESCR_FSC_Shift, 0   @ bitWidth 8 (Frame start delimiter code)  
 
    .equ DCMI_ESUR, DCMI_BASE + 0x1C @ (embedded synchronization unmask  register) 
        .equ DCMI_ESUR_FEU_Shift, 24   @ bitWidth 8 (Frame end delimiter unmask)  
        .equ DCMI_ESUR_LEU_Shift, 16   @ bitWidth 8 (Line end delimiter unmask)  
        .equ DCMI_ESUR_LSU_Shift, 8   @ bitWidth 8 (Line start delimiter  unmask)  
        .equ DCMI_ESUR_FSU_Shift, 0   @ bitWidth 8 (Frame start delimiter  unmask)  
 
    .equ DCMI_CWSTRT, DCMI_BASE + 0x20 @ (crop window start) 
        .equ DCMI_CWSTRT_VST_Shift, 16   @ bitWidth 13 (Vertical start line count)  
        .equ DCMI_CWSTRT_HOFFCNT_Shift, 0   @ bitWidth 14 (Horizontal offset count)  
 
    .equ DCMI_CWSIZE, DCMI_BASE + 0x24 @ (crop window size) 
        .equ DCMI_CWSIZE_VLINE_Shift, 16   @ bitWidth 14 (Vertical line count)  
        .equ DCMI_CWSIZE_CAPCNT_Shift, 0   @ bitWidth 14 (Capture count)  
 
    .equ DCMI_DR, DCMI_BASE + 0x28 @ (data register) 
        .equ DCMI_DR_Byte3_Shift, 24   @ bitWidth 8 (Data byte 3)  
        .equ DCMI_DR_Byte2_Shift, 16   @ bitWidth 8 (Data byte 2)  
        .equ DCMI_DR_Byte1_Shift, 8   @ bitWidth 8 (Data byte 1)  
        .equ DCMI_DR_Byte0_Shift, 0   @ bitWidth 8 (Data byte 0)  
 

@=========================== FSMC ===========================@
.equ FSMC_BASE, 0xA0000000 @ (Flexible static memory controller) 
    .equ FSMC_BCR1, FSMC_BASE + 0x0 @ (SRAM/NOR-Flash chip-select control register  1) 
        .equ FSMC_BCR1_CBURSTRW, 1 << 19   @ bitWidth 1 (CBURSTRW)  
        .equ FSMC_BCR1_ASYNCWAIT, 1 << 15   @ bitWidth 1 (ASYNCWAIT)  
        .equ FSMC_BCR1_EXTMOD, 1 << 14   @ bitWidth 1 (EXTMOD)  
        .equ FSMC_BCR1_WAITEN, 1 << 13   @ bitWidth 1 (WAITEN)  
        .equ FSMC_BCR1_WREN, 1 << 12   @ bitWidth 1 (WREN)  
        .equ FSMC_BCR1_WAITCFG, 1 << 11   @ bitWidth 1 (WAITCFG)  
        .equ FSMC_BCR1_WAITPOL, 1 << 9   @ bitWidth 1 (WAITPOL)  
        .equ FSMC_BCR1_BURSTEN, 1 << 8   @ bitWidth 1 (BURSTEN)  
        .equ FSMC_BCR1_FACCEN, 1 << 6   @ bitWidth 1 (FACCEN)  
        .equ FSMC_BCR1_MWID_Shift, 4   @ bitWidth 2 (MWID)  
        .equ FSMC_BCR1_MTYP_Shift, 2   @ bitWidth 2 (MTYP)  
        .equ FSMC_BCR1_MUXEN, 1 << 1   @ bitWidth 1 (MUXEN)  
        .equ FSMC_BCR1_MBKEN, 1 << 0   @ bitWidth 1 (MBKEN)  
 
    .equ FSMC_BTR1, FSMC_BASE + 0x4 @ (SRAM/NOR-Flash chip-select timing register  1) 
        .equ FSMC_BTR1_ACCMOD_Shift, 28   @ bitWidth 2 (ACCMOD)  
        .equ FSMC_BTR1_DATLAT_Shift, 24   @ bitWidth 4 (DATLAT)  
        .equ FSMC_BTR1_CLKDIV_Shift, 20   @ bitWidth 4 (CLKDIV)  
        .equ FSMC_BTR1_BUSTURN_Shift, 16   @ bitWidth 4 (BUSTURN)  
        .equ FSMC_BTR1_DATAST_Shift, 8   @ bitWidth 8 (DATAST)  
        .equ FSMC_BTR1_ADDHLD_Shift, 4   @ bitWidth 4 (ADDHLD)  
        .equ FSMC_BTR1_ADDSET_Shift, 0   @ bitWidth 4 (ADDSET)  
 
    .equ FSMC_BCR2, FSMC_BASE + 0x8 @ (SRAM/NOR-Flash chip-select control register  2) 
        .equ FSMC_BCR2_CBURSTRW, 1 << 19   @ bitWidth 1 (CBURSTRW)  
        .equ FSMC_BCR2_ASYNCWAIT, 1 << 15   @ bitWidth 1 (ASYNCWAIT)  
        .equ FSMC_BCR2_EXTMOD, 1 << 14   @ bitWidth 1 (EXTMOD)  
        .equ FSMC_BCR2_WAITEN, 1 << 13   @ bitWidth 1 (WAITEN)  
        .equ FSMC_BCR2_WREN, 1 << 12   @ bitWidth 1 (WREN)  
        .equ FSMC_BCR2_WAITCFG, 1 << 11   @ bitWidth 1 (WAITCFG)  
        .equ FSMC_BCR2_WRAPMOD, 1 << 10   @ bitWidth 1 (WRAPMOD)  
        .equ FSMC_BCR2_WAITPOL, 1 << 9   @ bitWidth 1 (WAITPOL)  
        .equ FSMC_BCR2_BURSTEN, 1 << 8   @ bitWidth 1 (BURSTEN)  
        .equ FSMC_BCR2_FACCEN, 1 << 6   @ bitWidth 1 (FACCEN)  
        .equ FSMC_BCR2_MWID_Shift, 4   @ bitWidth 2 (MWID)  
        .equ FSMC_BCR2_MTYP_Shift, 2   @ bitWidth 2 (MTYP)  
        .equ FSMC_BCR2_MUXEN, 1 << 1   @ bitWidth 1 (MUXEN)  
        .equ FSMC_BCR2_MBKEN, 1 << 0   @ bitWidth 1 (MBKEN)  
 
    .equ FSMC_BTR2, FSMC_BASE + 0xC @ (SRAM/NOR-Flash chip-select timing register  2) 
        .equ FSMC_BTR2_ACCMOD_Shift, 28   @ bitWidth 2 (ACCMOD)  
        .equ FSMC_BTR2_DATLAT_Shift, 24   @ bitWidth 4 (DATLAT)  
        .equ FSMC_BTR2_CLKDIV_Shift, 20   @ bitWidth 4 (CLKDIV)  
        .equ FSMC_BTR2_BUSTURN_Shift, 16   @ bitWidth 4 (BUSTURN)  
        .equ FSMC_BTR2_DATAST_Shift, 8   @ bitWidth 8 (DATAST)  
        .equ FSMC_BTR2_ADDHLD_Shift, 4   @ bitWidth 4 (ADDHLD)  
        .equ FSMC_BTR2_ADDSET_Shift, 0   @ bitWidth 4 (ADDSET)  
 
    .equ FSMC_BCR3, FSMC_BASE + 0x10 @ (SRAM/NOR-Flash chip-select control register  3) 
        .equ FSMC_BCR3_CBURSTRW, 1 << 19   @ bitWidth 1 (CBURSTRW)  
        .equ FSMC_BCR3_ASYNCWAIT, 1 << 15   @ bitWidth 1 (ASYNCWAIT)  
        .equ FSMC_BCR3_EXTMOD, 1 << 14   @ bitWidth 1 (EXTMOD)  
        .equ FSMC_BCR3_WAITEN, 1 << 13   @ bitWidth 1 (WAITEN)  
        .equ FSMC_BCR3_WREN, 1 << 12   @ bitWidth 1 (WREN)  
        .equ FSMC_BCR3_WAITCFG, 1 << 11   @ bitWidth 1 (WAITCFG)  
        .equ FSMC_BCR3_WRAPMOD, 1 << 10   @ bitWidth 1 (WRAPMOD)  
        .equ FSMC_BCR3_WAITPOL, 1 << 9   @ bitWidth 1 (WAITPOL)  
        .equ FSMC_BCR3_BURSTEN, 1 << 8   @ bitWidth 1 (BURSTEN)  
        .equ FSMC_BCR3_FACCEN, 1 << 6   @ bitWidth 1 (FACCEN)  
        .equ FSMC_BCR3_MWID_Shift, 4   @ bitWidth 2 (MWID)  
        .equ FSMC_BCR3_MTYP_Shift, 2   @ bitWidth 2 (MTYP)  
        .equ FSMC_BCR3_MUXEN, 1 << 1   @ bitWidth 1 (MUXEN)  
        .equ FSMC_BCR3_MBKEN, 1 << 0   @ bitWidth 1 (MBKEN)  
 
    .equ FSMC_BTR3, FSMC_BASE + 0x14 @ (SRAM/NOR-Flash chip-select timing register  3) 
        .equ FSMC_BTR3_ACCMOD_Shift, 28   @ bitWidth 2 (ACCMOD)  
        .equ FSMC_BTR3_DATLAT_Shift, 24   @ bitWidth 4 (DATLAT)  
        .equ FSMC_BTR3_CLKDIV_Shift, 20   @ bitWidth 4 (CLKDIV)  
        .equ FSMC_BTR3_BUSTURN_Shift, 16   @ bitWidth 4 (BUSTURN)  
        .equ FSMC_BTR3_DATAST_Shift, 8   @ bitWidth 8 (DATAST)  
        .equ FSMC_BTR3_ADDHLD_Shift, 4   @ bitWidth 4 (ADDHLD)  
        .equ FSMC_BTR3_ADDSET_Shift, 0   @ bitWidth 4 (ADDSET)  
 
    .equ FSMC_BCR4, FSMC_BASE + 0x18 @ (SRAM/NOR-Flash chip-select control register  4) 
        .equ FSMC_BCR4_CBURSTRW, 1 << 19   @ bitWidth 1 (CBURSTRW)  
        .equ FSMC_BCR4_ASYNCWAIT, 1 << 15   @ bitWidth 1 (ASYNCWAIT)  
        .equ FSMC_BCR4_EXTMOD, 1 << 14   @ bitWidth 1 (EXTMOD)  
        .equ FSMC_BCR4_WAITEN, 1 << 13   @ bitWidth 1 (WAITEN)  
        .equ FSMC_BCR4_WREN, 1 << 12   @ bitWidth 1 (WREN)  
        .equ FSMC_BCR4_WAITCFG, 1 << 11   @ bitWidth 1 (WAITCFG)  
        .equ FSMC_BCR4_WRAPMOD, 1 << 10   @ bitWidth 1 (WRAPMOD)  
        .equ FSMC_BCR4_WAITPOL, 1 << 9   @ bitWidth 1 (WAITPOL)  
        .equ FSMC_BCR4_BURSTEN, 1 << 8   @ bitWidth 1 (BURSTEN)  
        .equ FSMC_BCR4_FACCEN, 1 << 6   @ bitWidth 1 (FACCEN)  
        .equ FSMC_BCR4_MWID_Shift, 4   @ bitWidth 2 (MWID)  
        .equ FSMC_BCR4_MTYP_Shift, 2   @ bitWidth 2 (MTYP)  
        .equ FSMC_BCR4_MUXEN, 1 << 1   @ bitWidth 1 (MUXEN)  
        .equ FSMC_BCR4_MBKEN, 1 << 0   @ bitWidth 1 (MBKEN)  
 
    .equ FSMC_BTR4, FSMC_BASE + 0x1C @ (SRAM/NOR-Flash chip-select timing register  4) 
        .equ FSMC_BTR4_ACCMOD_Shift, 28   @ bitWidth 2 (ACCMOD)  
        .equ FSMC_BTR4_DATLAT_Shift, 24   @ bitWidth 4 (DATLAT)  
        .equ FSMC_BTR4_CLKDIV_Shift, 20   @ bitWidth 4 (CLKDIV)  
        .equ FSMC_BTR4_BUSTURN_Shift, 16   @ bitWidth 4 (BUSTURN)  
        .equ FSMC_BTR4_DATAST_Shift, 8   @ bitWidth 8 (DATAST)  
        .equ FSMC_BTR4_ADDHLD_Shift, 4   @ bitWidth 4 (ADDHLD)  
        .equ FSMC_BTR4_ADDSET_Shift, 0   @ bitWidth 4 (ADDSET)  
 
    .equ FSMC_PCR2, FSMC_BASE + 0x60 @ (PC Card/NAND Flash control register  2) 
        .equ FSMC_PCR2_ECCPS_Shift, 17   @ bitWidth 3 (ECCPS)  
        .equ FSMC_PCR2_TAR_Shift, 13   @ bitWidth 4 (TAR)  
        .equ FSMC_PCR2_TCLR_Shift, 9   @ bitWidth 4 (TCLR)  
        .equ FSMC_PCR2_ECCEN, 1 << 6   @ bitWidth 1 (ECCEN)  
        .equ FSMC_PCR2_PWID_Shift, 4   @ bitWidth 2 (PWID)  
        .equ FSMC_PCR2_PTYP, 1 << 3   @ bitWidth 1 (PTYP)  
        .equ FSMC_PCR2_PBKEN, 1 << 2   @ bitWidth 1 (PBKEN)  
        .equ FSMC_PCR2_PWAITEN, 1 << 1   @ bitWidth 1 (PWAITEN)  
 
    .equ FSMC_SR2, FSMC_BASE + 0x64 @ (FIFO status and interrupt register  2) 
        .equ FSMC_SR2_FEMPT, 1 << 6   @ bitWidth 1 (FEMPT)  
        .equ FSMC_SR2_IFEN, 1 << 5   @ bitWidth 1 (IFEN)  
        .equ FSMC_SR2_ILEN, 1 << 4   @ bitWidth 1 (ILEN)  
        .equ FSMC_SR2_IREN, 1 << 3   @ bitWidth 1 (IREN)  
        .equ FSMC_SR2_IFS, 1 << 2   @ bitWidth 1 (IFS)  
        .equ FSMC_SR2_ILS, 1 << 1   @ bitWidth 1 (ILS)  
        .equ FSMC_SR2_IRS, 1 << 0   @ bitWidth 1 (IRS)  
 
    .equ FSMC_PMEM2, FSMC_BASE + 0x68 @ (Common memory space timing register  2) 
        .equ FSMC_PMEM2_MEMHIZx_Shift, 24   @ bitWidth 8 (MEMHIZx)  
        .equ FSMC_PMEM2_MEMHOLDx_Shift, 16   @ bitWidth 8 (MEMHOLDx)  
        .equ FSMC_PMEM2_MEMWAITx_Shift, 8   @ bitWidth 8 (MEMWAITx)  
        .equ FSMC_PMEM2_MEMSETx_Shift, 0   @ bitWidth 8 (MEMSETx)  
 
    .equ FSMC_PATT2, FSMC_BASE + 0x6C @ (Attribute memory space timing register  2) 
        .equ FSMC_PATT2_ATTHIZx_Shift, 24   @ bitWidth 8 (ATTHIZx)  
        .equ FSMC_PATT2_ATTHOLDx_Shift, 16   @ bitWidth 8 (ATTHOLDx)  
        .equ FSMC_PATT2_ATTWAITx_Shift, 8   @ bitWidth 8 (ATTWAITx)  
        .equ FSMC_PATT2_ATTSETx_Shift, 0   @ bitWidth 8 (ATTSETx)  
 
    .equ FSMC_ECCR2, FSMC_BASE + 0x74 @ (ECC result register 2) 
        .equ FSMC_ECCR2_ECCx_Shift, 0   @ bitWidth 32 (ECCx)  
 
    .equ FSMC_PCR3, FSMC_BASE + 0x80 @ (PC Card/NAND Flash control register  3) 
        .equ FSMC_PCR3_ECCPS_Shift, 17   @ bitWidth 3 (ECCPS)  
        .equ FSMC_PCR3_TAR_Shift, 13   @ bitWidth 4 (TAR)  
        .equ FSMC_PCR3_TCLR_Shift, 9   @ bitWidth 4 (TCLR)  
        .equ FSMC_PCR3_ECCEN, 1 << 6   @ bitWidth 1 (ECCEN)  
        .equ FSMC_PCR3_PWID_Shift, 4   @ bitWidth 2 (PWID)  
        .equ FSMC_PCR3_PTYP, 1 << 3   @ bitWidth 1 (PTYP)  
        .equ FSMC_PCR3_PBKEN, 1 << 2   @ bitWidth 1 (PBKEN)  
        .equ FSMC_PCR3_PWAITEN, 1 << 1   @ bitWidth 1 (PWAITEN)  
 
    .equ FSMC_SR3, FSMC_BASE + 0x84 @ (FIFO status and interrupt register  3) 
        .equ FSMC_SR3_FEMPT, 1 << 6   @ bitWidth 1 (FEMPT)  
        .equ FSMC_SR3_IFEN, 1 << 5   @ bitWidth 1 (IFEN)  
        .equ FSMC_SR3_ILEN, 1 << 4   @ bitWidth 1 (ILEN)  
        .equ FSMC_SR3_IREN, 1 << 3   @ bitWidth 1 (IREN)  
        .equ FSMC_SR3_IFS, 1 << 2   @ bitWidth 1 (IFS)  
        .equ FSMC_SR3_ILS, 1 << 1   @ bitWidth 1 (ILS)  
        .equ FSMC_SR3_IRS, 1 << 0   @ bitWidth 1 (IRS)  
 
    .equ FSMC_PMEM3, FSMC_BASE + 0x88 @ (Common memory space timing register  3) 
        .equ FSMC_PMEM3_MEMHIZx_Shift, 24   @ bitWidth 8 (MEMHIZx)  
        .equ FSMC_PMEM3_MEMHOLDx_Shift, 16   @ bitWidth 8 (MEMHOLDx)  
        .equ FSMC_PMEM3_MEMWAITx_Shift, 8   @ bitWidth 8 (MEMWAITx)  
        .equ FSMC_PMEM3_MEMSETx_Shift, 0   @ bitWidth 8 (MEMSETx)  
 
    .equ FSMC_PATT3, FSMC_BASE + 0x8C @ (Attribute memory space timing register  3) 
        .equ FSMC_PATT3_ATTHIZx_Shift, 24   @ bitWidth 8 (ATTHIZx)  
        .equ FSMC_PATT3_ATTHOLDx_Shift, 16   @ bitWidth 8 (ATTHOLDx)  
        .equ FSMC_PATT3_ATTWAITx_Shift, 8   @ bitWidth 8 (ATTWAITx)  
        .equ FSMC_PATT3_ATTSETx_Shift, 0   @ bitWidth 8 (ATTSETx)  
 
    .equ FSMC_ECCR3, FSMC_BASE + 0x94 @ (ECC result register 3) 
        .equ FSMC_ECCR3_ECCx_Shift, 0   @ bitWidth 32 (ECCx)  
 
    .equ FSMC_PCR4, FSMC_BASE + 0xA0 @ (PC Card/NAND Flash control register  4) 
        .equ FSMC_PCR4_ECCPS_Shift, 17   @ bitWidth 3 (ECCPS)  
        .equ FSMC_PCR4_TAR_Shift, 13   @ bitWidth 4 (TAR)  
        .equ FSMC_PCR4_TCLR_Shift, 9   @ bitWidth 4 (TCLR)  
        .equ FSMC_PCR4_ECCEN, 1 << 6   @ bitWidth 1 (ECCEN)  
        .equ FSMC_PCR4_PWID_Shift, 4   @ bitWidth 2 (PWID)  
        .equ FSMC_PCR4_PTYP, 1 << 3   @ bitWidth 1 (PTYP)  
        .equ FSMC_PCR4_PBKEN, 1 << 2   @ bitWidth 1 (PBKEN)  
        .equ FSMC_PCR4_PWAITEN, 1 << 1   @ bitWidth 1 (PWAITEN)  
 
    .equ FSMC_SR4, FSMC_BASE + 0xA4 @ (FIFO status and interrupt register  4) 
        .equ FSMC_SR4_FEMPT, 1 << 6   @ bitWidth 1 (FEMPT)  
        .equ FSMC_SR4_IFEN, 1 << 5   @ bitWidth 1 (IFEN)  
        .equ FSMC_SR4_ILEN, 1 << 4   @ bitWidth 1 (ILEN)  
        .equ FSMC_SR4_IREN, 1 << 3   @ bitWidth 1 (IREN)  
        .equ FSMC_SR4_IFS, 1 << 2   @ bitWidth 1 (IFS)  
        .equ FSMC_SR4_ILS, 1 << 1   @ bitWidth 1 (ILS)  
        .equ FSMC_SR4_IRS, 1 << 0   @ bitWidth 1 (IRS)  
 
    .equ FSMC_PMEM4, FSMC_BASE + 0xA8 @ (Common memory space timing register  4) 
        .equ FSMC_PMEM4_MEMHIZx_Shift, 24   @ bitWidth 8 (MEMHIZx)  
        .equ FSMC_PMEM4_MEMHOLDx_Shift, 16   @ bitWidth 8 (MEMHOLDx)  
        .equ FSMC_PMEM4_MEMWAITx_Shift, 8   @ bitWidth 8 (MEMWAITx)  
        .equ FSMC_PMEM4_MEMSETx_Shift, 0   @ bitWidth 8 (MEMSETx)  
 
    .equ FSMC_PATT4, FSMC_BASE + 0xAC @ (Attribute memory space timing register  4) 
        .equ FSMC_PATT4_ATTHIZx_Shift, 24   @ bitWidth 8 (ATTHIZx)  
        .equ FSMC_PATT4_ATTHOLDx_Shift, 16   @ bitWidth 8 (ATTHOLDx)  
        .equ FSMC_PATT4_ATTWAITx_Shift, 8   @ bitWidth 8 (ATTWAITx)  
        .equ FSMC_PATT4_ATTSETx_Shift, 0   @ bitWidth 8 (ATTSETx)  
 
    .equ FSMC_PIO4, FSMC_BASE + 0xB0 @ (I/O space timing register 4) 
        .equ FSMC_PIO4_IOHIZx_Shift, 24   @ bitWidth 8 (IOHIZx)  
        .equ FSMC_PIO4_IOHOLDx_Shift, 16   @ bitWidth 8 (IOHOLDx)  
        .equ FSMC_PIO4_IOWAITx_Shift, 8   @ bitWidth 8 (IOWAITx)  
        .equ FSMC_PIO4_IOSETx_Shift, 0   @ bitWidth 8 (IOSETx)  
 
    .equ FSMC_BWTR1, FSMC_BASE + 0x104 @ (SRAM/NOR-Flash write timing registers  1) 
        .equ FSMC_BWTR1_ACCMOD_Shift, 28   @ bitWidth 2 (ACCMOD)  
        .equ FSMC_BWTR1_DATLAT_Shift, 24   @ bitWidth 4 (DATLAT)  
        .equ FSMC_BWTR1_CLKDIV_Shift, 20   @ bitWidth 4 (CLKDIV)  
        .equ FSMC_BWTR1_DATAST_Shift, 8   @ bitWidth 8 (DATAST)  
        .equ FSMC_BWTR1_ADDHLD_Shift, 4   @ bitWidth 4 (ADDHLD)  
        .equ FSMC_BWTR1_ADDSET_Shift, 0   @ bitWidth 4 (ADDSET)  
 
    .equ FSMC_BWTR2, FSMC_BASE + 0x10C @ (SRAM/NOR-Flash write timing registers  2) 
        .equ FSMC_BWTR2_ACCMOD_Shift, 28   @ bitWidth 2 (ACCMOD)  
        .equ FSMC_BWTR2_DATLAT_Shift, 24   @ bitWidth 4 (DATLAT)  
        .equ FSMC_BWTR2_CLKDIV_Shift, 20   @ bitWidth 4 (CLKDIV)  
        .equ FSMC_BWTR2_DATAST_Shift, 8   @ bitWidth 8 (DATAST)  
        .equ FSMC_BWTR2_ADDHLD_Shift, 4   @ bitWidth 4 (ADDHLD)  
        .equ FSMC_BWTR2_ADDSET_Shift, 0   @ bitWidth 4 (ADDSET)  
 
    .equ FSMC_BWTR3, FSMC_BASE + 0x114 @ (SRAM/NOR-Flash write timing registers  3) 
        .equ FSMC_BWTR3_ACCMOD_Shift, 28   @ bitWidth 2 (ACCMOD)  
        .equ FSMC_BWTR3_DATLAT_Shift, 24   @ bitWidth 4 (DATLAT)  
        .equ FSMC_BWTR3_CLKDIV_Shift, 20   @ bitWidth 4 (CLKDIV)  
        .equ FSMC_BWTR3_DATAST_Shift, 8   @ bitWidth 8 (DATAST)  
        .equ FSMC_BWTR3_ADDHLD_Shift, 4   @ bitWidth 4 (ADDHLD)  
        .equ FSMC_BWTR3_ADDSET_Shift, 0   @ bitWidth 4 (ADDSET)  
 
    .equ FSMC_BWTR4, FSMC_BASE + 0x11C @ (SRAM/NOR-Flash write timing registers  4) 
        .equ FSMC_BWTR4_ACCMOD_Shift, 28   @ bitWidth 2 (ACCMOD)  
        .equ FSMC_BWTR4_DATLAT_Shift, 24   @ bitWidth 4 (DATLAT)  
        .equ FSMC_BWTR4_CLKDIV_Shift, 20   @ bitWidth 4 (CLKDIV)  
        .equ FSMC_BWTR4_DATAST_Shift, 8   @ bitWidth 8 (DATAST)  
        .equ FSMC_BWTR4_ADDHLD_Shift, 4   @ bitWidth 4 (ADDHLD)  
        .equ FSMC_BWTR4_ADDSET_Shift, 0   @ bitWidth 4 (ADDSET)  
 

@=========================== DBG ===========================@
.equ DBG_BASE, 0xE0042000 @ (Debug support) 
    .equ DBG_DBGMCU_IDCODE, DBG_BASE + 0x0 @ (IDCODE) 
        .equ DBG_DBGMCU_IDCODE_DEV_ID_Shift, 0   @ bitWidth 12 (DEV_ID)  
        .equ DBG_DBGMCU_IDCODE_REV_ID_Shift, 16   @ bitWidth 16 (REV_ID)  
 
    .equ DBG_DBGMCU_CR, DBG_BASE + 0x4 @ (Control Register) 
        .equ DBG_DBGMCU_CR_DBG_SLEEP, 1 << 0   @ bitWidth 1 (DBG_SLEEP)  
        .equ DBG_DBGMCU_CR_DBG_STOP, 1 << 1   @ bitWidth 1 (DBG_STOP)  
        .equ DBG_DBGMCU_CR_DBG_STANDBY, 1 << 2   @ bitWidth 1 (DBG_STANDBY)  
        .equ DBG_DBGMCU_CR_TRACE_IOEN, 1 << 5   @ bitWidth 1 (TRACE_IOEN)  
        .equ DBG_DBGMCU_CR_TRACE_MODE_Shift, 6   @ bitWidth 2 (TRACE_MODE)  
        .equ DBG_DBGMCU_CR_DBG_I2C2_SMBUS_TIMEOUT, 1 << 16   @ bitWidth 1 (DBG_I2C2_SMBUS_TIMEOUT)  
        .equ DBG_DBGMCU_CR_DBG_TIM8_STOP, 1 << 17   @ bitWidth 1 (DBG_TIM8_STOP)  
        .equ DBG_DBGMCU_CR_DBG_TIM5_STOP, 1 << 18   @ bitWidth 1 (DBG_TIM5_STOP)  
        .equ DBG_DBGMCU_CR_DBG_TIM6_STOP, 1 << 19   @ bitWidth 1 (DBG_TIM6_STOP)  
        .equ DBG_DBGMCU_CR_DBG_TIM7_STOP, 1 << 20   @ bitWidth 1 (DBG_TIM7_STOP)  
 
    .equ DBG_DBGMCU_APB1_FZ, DBG_BASE + 0x8 @ (Debug MCU APB1 Freeze registe) 
        .equ DBG_DBGMCU_APB1_FZ_DBG_TIM2_STOP, 1 << 0   @ bitWidth 1 (DBG_TIM2_STOP)  
        .equ DBG_DBGMCU_APB1_FZ_DBG_TIM3_STOP, 1 << 1   @ bitWidth 1 (DBG_TIM3 _STOP)  
        .equ DBG_DBGMCU_APB1_FZ_DBG_TIM4_STOP, 1 << 2   @ bitWidth 1 (DBG_TIM4_STOP)  
        .equ DBG_DBGMCU_APB1_FZ_DBG_TIM5_STOP, 1 << 3   @ bitWidth 1 (DBG_TIM5_STOP)  
        .equ DBG_DBGMCU_APB1_FZ_DBG_TIM6_STOP, 1 << 4   @ bitWidth 1 (DBG_TIM6_STOP)  
        .equ DBG_DBGMCU_APB1_FZ_DBG_TIM7_STOP, 1 << 5   @ bitWidth 1 (DBG_TIM7_STOP)  
        .equ DBG_DBGMCU_APB1_FZ_DBG_TIM12_STOP, 1 << 6   @ bitWidth 1 (DBG_TIM12_STOP)  
        .equ DBG_DBGMCU_APB1_FZ_DBG_TIM13_STOP, 1 << 7   @ bitWidth 1 (DBG_TIM13_STOP)  
        .equ DBG_DBGMCU_APB1_FZ_DBG_TIM14_STOP, 1 << 8   @ bitWidth 1 (DBG_TIM14_STOP)  
        .equ DBG_DBGMCU_APB1_FZ_DBG_WWDG_STOP, 1 << 11   @ bitWidth 1 (DBG_WWDG_STOP)  
        .equ DBG_DBGMCU_APB1_FZ_DBG_IWDEG_STOP, 1 << 12   @ bitWidth 1 (DBG_IWDEG_STOP)  
        .equ DBG_DBGMCU_APB1_FZ_DBG_J2C1_SMBUS_TIMEOUT, 1 << 21   @ bitWidth 1 (DBG_J2C1_SMBUS_TIMEOUT)  
        .equ DBG_DBGMCU_APB1_FZ_DBG_J2C2_SMBUS_TIMEOUT, 1 << 22   @ bitWidth 1 (DBG_J2C2_SMBUS_TIMEOUT)  
        .equ DBG_DBGMCU_APB1_FZ_DBG_J2C3SMBUS_TIMEOUT, 1 << 23   @ bitWidth 1 (DBG_J2C3SMBUS_TIMEOUT)  
        .equ DBG_DBGMCU_APB1_FZ_DBG_CAN1_STOP, 1 << 25   @ bitWidth 1 (DBG_CAN1_STOP)  
        .equ DBG_DBGMCU_APB1_FZ_DBG_CAN2_STOP, 1 << 26   @ bitWidth 1 (DBG_CAN2_STOP)  
 
    .equ DBG_DBGMCU_APB2_FZ, DBG_BASE + 0xC @ (Debug MCU APB2 Freeze registe) 
        .equ DBG_DBGMCU_APB2_FZ_DBG_TIM1_STOP, 1 << 0   @ bitWidth 1 (TIM1 counter stopped when core is  halted)  
        .equ DBG_DBGMCU_APB2_FZ_DBG_TIM8_STOP, 1 << 1   @ bitWidth 1 (TIM8 counter stopped when core is  halted)  
        .equ DBG_DBGMCU_APB2_FZ_DBG_TIM9_STOP, 1 << 16   @ bitWidth 1 (TIM9 counter stopped when core is  halted)  
        .equ DBG_DBGMCU_APB2_FZ_DBG_TIM10_STOP, 1 << 17   @ bitWidth 1 (TIM10 counter stopped when core is  halted)  
        .equ DBG_DBGMCU_APB2_FZ_DBG_TIM11_STOP, 1 << 18   @ bitWidth 1 (TIM11 counter stopped when core is  halted)  
 

@=========================== DMA2 ===========================@
.equ DMA2_BASE, 0x40026400 @ (DMA controller) 
    .equ DMA2_LISR, DMA2_BASE + 0x0 @ (low interrupt status register) 
        .equ DMA2_LISR_TCIF3, 1 << 27   @ bitWidth 1 (Stream x transfer complete interrupt  flag x = 3..0)  
        .equ DMA2_LISR_HTIF3, 1 << 26   @ bitWidth 1 (Stream x half transfer interrupt flag  x=3..0)  
        .equ DMA2_LISR_TEIF3, 1 << 25   @ bitWidth 1 (Stream x transfer error interrupt flag  x=3..0)  
        .equ DMA2_LISR_DMEIF3, 1 << 24   @ bitWidth 1 (Stream x direct mode error interrupt  flag x=3..0)  
        .equ DMA2_LISR_FEIF3, 1 << 22   @ bitWidth 1 (Stream x FIFO error interrupt flag  x=3..0)  
        .equ DMA2_LISR_TCIF2, 1 << 21   @ bitWidth 1 (Stream x transfer complete interrupt  flag x = 3..0)  
        .equ DMA2_LISR_HTIF2, 1 << 20   @ bitWidth 1 (Stream x half transfer interrupt flag  x=3..0)  
        .equ DMA2_LISR_TEIF2, 1 << 19   @ bitWidth 1 (Stream x transfer error interrupt flag  x=3..0)  
        .equ DMA2_LISR_DMEIF2, 1 << 18   @ bitWidth 1 (Stream x direct mode error interrupt  flag x=3..0)  
        .equ DMA2_LISR_FEIF2, 1 << 16   @ bitWidth 1 (Stream x FIFO error interrupt flag  x=3..0)  
        .equ DMA2_LISR_TCIF1, 1 << 11   @ bitWidth 1 (Stream x transfer complete interrupt  flag x = 3..0)  
        .equ DMA2_LISR_HTIF1, 1 << 10   @ bitWidth 1 (Stream x half transfer interrupt flag  x=3..0)  
        .equ DMA2_LISR_TEIF1, 1 << 9   @ bitWidth 1 (Stream x transfer error interrupt flag  x=3..0)  
        .equ DMA2_LISR_DMEIF1, 1 << 8   @ bitWidth 1 (Stream x direct mode error interrupt  flag x=3..0)  
        .equ DMA2_LISR_FEIF1, 1 << 6   @ bitWidth 1 (Stream x FIFO error interrupt flag  x=3..0)  
        .equ DMA2_LISR_TCIF0, 1 << 5   @ bitWidth 1 (Stream x transfer complete interrupt  flag x = 3..0)  
        .equ DMA2_LISR_HTIF0, 1 << 4   @ bitWidth 1 (Stream x half transfer interrupt flag  x=3..0)  
        .equ DMA2_LISR_TEIF0, 1 << 3   @ bitWidth 1 (Stream x transfer error interrupt flag  x=3..0)  
        .equ DMA2_LISR_DMEIF0, 1 << 2   @ bitWidth 1 (Stream x direct mode error interrupt  flag x=3..0)  
        .equ DMA2_LISR_FEIF0, 1 << 0   @ bitWidth 1 (Stream x FIFO error interrupt flag  x=3..0)  
 
    .equ DMA2_HISR, DMA2_BASE + 0x4 @ (high interrupt status register) 
        .equ DMA2_HISR_TCIF7, 1 << 27   @ bitWidth 1 (Stream x transfer complete interrupt  flag x=7..4)  
        .equ DMA2_HISR_HTIF7, 1 << 26   @ bitWidth 1 (Stream x half transfer interrupt flag  x=7..4)  
        .equ DMA2_HISR_TEIF7, 1 << 25   @ bitWidth 1 (Stream x transfer error interrupt flag  x=7..4)  
        .equ DMA2_HISR_DMEIF7, 1 << 24   @ bitWidth 1 (Stream x direct mode error interrupt  flag x=7..4)  
        .equ DMA2_HISR_FEIF7, 1 << 22   @ bitWidth 1 (Stream x FIFO error interrupt flag  x=7..4)  
        .equ DMA2_HISR_TCIF6, 1 << 21   @ bitWidth 1 (Stream x transfer complete interrupt  flag x=7..4)  
        .equ DMA2_HISR_HTIF6, 1 << 20   @ bitWidth 1 (Stream x half transfer interrupt flag  x=7..4)  
        .equ DMA2_HISR_TEIF6, 1 << 19   @ bitWidth 1 (Stream x transfer error interrupt flag  x=7..4)  
        .equ DMA2_HISR_DMEIF6, 1 << 18   @ bitWidth 1 (Stream x direct mode error interrupt  flag x=7..4)  
        .equ DMA2_HISR_FEIF6, 1 << 16   @ bitWidth 1 (Stream x FIFO error interrupt flag  x=7..4)  
        .equ DMA2_HISR_TCIF5, 1 << 11   @ bitWidth 1 (Stream x transfer complete interrupt  flag x=7..4)  
        .equ DMA2_HISR_HTIF5, 1 << 10   @ bitWidth 1 (Stream x half transfer interrupt flag  x=7..4)  
        .equ DMA2_HISR_TEIF5, 1 << 9   @ bitWidth 1 (Stream x transfer error interrupt flag  x=7..4)  
        .equ DMA2_HISR_DMEIF5, 1 << 8   @ bitWidth 1 (Stream x direct mode error interrupt  flag x=7..4)  
        .equ DMA2_HISR_FEIF5, 1 << 6   @ bitWidth 1 (Stream x FIFO error interrupt flag  x=7..4)  
        .equ DMA2_HISR_TCIF4, 1 << 5   @ bitWidth 1 (Stream x transfer complete interrupt  flag x=7..4)  
        .equ DMA2_HISR_HTIF4, 1 << 4   @ bitWidth 1 (Stream x half transfer interrupt flag  x=7..4)  
        .equ DMA2_HISR_TEIF4, 1 << 3   @ bitWidth 1 (Stream x transfer error interrupt flag  x=7..4)  
        .equ DMA2_HISR_DMEIF4, 1 << 2   @ bitWidth 1 (Stream x direct mode error interrupt  flag x=7..4)  
        .equ DMA2_HISR_FEIF4, 1 << 0   @ bitWidth 1 (Stream x FIFO error interrupt flag  x=7..4)  
 
    .equ DMA2_LIFCR, DMA2_BASE + 0x8 @ (low interrupt flag clear  register) 
        .equ DMA2_LIFCR_CTCIF3, 1 << 27   @ bitWidth 1 (Stream x clear transfer complete  interrupt flag x = 3..0)  
        .equ DMA2_LIFCR_CHTIF3, 1 << 26   @ bitWidth 1 (Stream x clear half transfer interrupt  flag x = 3..0)  
        .equ DMA2_LIFCR_CTEIF3, 1 << 25   @ bitWidth 1 (Stream x clear transfer error interrupt  flag x = 3..0)  
        .equ DMA2_LIFCR_CDMEIF3, 1 << 24   @ bitWidth 1 (Stream x clear direct mode error  interrupt flag x = 3..0)  
        .equ DMA2_LIFCR_CFEIF3, 1 << 22   @ bitWidth 1 (Stream x clear FIFO error interrupt flag  x = 3..0)  
        .equ DMA2_LIFCR_CTCIF2, 1 << 21   @ bitWidth 1 (Stream x clear transfer complete  interrupt flag x = 3..0)  
        .equ DMA2_LIFCR_CHTIF2, 1 << 20   @ bitWidth 1 (Stream x clear half transfer interrupt  flag x = 3..0)  
        .equ DMA2_LIFCR_CTEIF2, 1 << 19   @ bitWidth 1 (Stream x clear transfer error interrupt  flag x = 3..0)  
        .equ DMA2_LIFCR_CDMEIF2, 1 << 18   @ bitWidth 1 (Stream x clear direct mode error  interrupt flag x = 3..0)  
        .equ DMA2_LIFCR_CFEIF2, 1 << 16   @ bitWidth 1 (Stream x clear FIFO error interrupt flag  x = 3..0)  
        .equ DMA2_LIFCR_CTCIF1, 1 << 11   @ bitWidth 1 (Stream x clear transfer complete  interrupt flag x = 3..0)  
        .equ DMA2_LIFCR_CHTIF1, 1 << 10   @ bitWidth 1 (Stream x clear half transfer interrupt  flag x = 3..0)  
        .equ DMA2_LIFCR_CTEIF1, 1 << 9   @ bitWidth 1 (Stream x clear transfer error interrupt  flag x = 3..0)  
        .equ DMA2_LIFCR_CDMEIF1, 1 << 8   @ bitWidth 1 (Stream x clear direct mode error  interrupt flag x = 3..0)  
        .equ DMA2_LIFCR_CFEIF1, 1 << 6   @ bitWidth 1 (Stream x clear FIFO error interrupt flag  x = 3..0)  
        .equ DMA2_LIFCR_CTCIF0, 1 << 5   @ bitWidth 1 (Stream x clear transfer complete  interrupt flag x = 3..0)  
        .equ DMA2_LIFCR_CHTIF0, 1 << 4   @ bitWidth 1 (Stream x clear half transfer interrupt  flag x = 3..0)  
        .equ DMA2_LIFCR_CTEIF0, 1 << 3   @ bitWidth 1 (Stream x clear transfer error interrupt  flag x = 3..0)  
        .equ DMA2_LIFCR_CDMEIF0, 1 << 2   @ bitWidth 1 (Stream x clear direct mode error  interrupt flag x = 3..0)  
        .equ DMA2_LIFCR_CFEIF0, 1 << 0   @ bitWidth 1 (Stream x clear FIFO error interrupt flag  x = 3..0)  
 
    .equ DMA2_HIFCR, DMA2_BASE + 0xC @ (high interrupt flag clear  register) 
        .equ DMA2_HIFCR_CTCIF7, 1 << 27   @ bitWidth 1 (Stream x clear transfer complete  interrupt flag x = 7..4)  
        .equ DMA2_HIFCR_CHTIF7, 1 << 26   @ bitWidth 1 (Stream x clear half transfer interrupt  flag x = 7..4)  
        .equ DMA2_HIFCR_CTEIF7, 1 << 25   @ bitWidth 1 (Stream x clear transfer error interrupt  flag x = 7..4)  
        .equ DMA2_HIFCR_CDMEIF7, 1 << 24   @ bitWidth 1 (Stream x clear direct mode error  interrupt flag x = 7..4)  
        .equ DMA2_HIFCR_CFEIF7, 1 << 22   @ bitWidth 1 (Stream x clear FIFO error interrupt flag  x = 7..4)  
        .equ DMA2_HIFCR_CTCIF6, 1 << 21   @ bitWidth 1 (Stream x clear transfer complete  interrupt flag x = 7..4)  
        .equ DMA2_HIFCR_CHTIF6, 1 << 20   @ bitWidth 1 (Stream x clear half transfer interrupt  flag x = 7..4)  
        .equ DMA2_HIFCR_CTEIF6, 1 << 19   @ bitWidth 1 (Stream x clear transfer error interrupt  flag x = 7..4)  
        .equ DMA2_HIFCR_CDMEIF6, 1 << 18   @ bitWidth 1 (Stream x clear direct mode error  interrupt flag x = 7..4)  
        .equ DMA2_HIFCR_CFEIF6, 1 << 16   @ bitWidth 1 (Stream x clear FIFO error interrupt flag  x = 7..4)  
        .equ DMA2_HIFCR_CTCIF5, 1 << 11   @ bitWidth 1 (Stream x clear transfer complete  interrupt flag x = 7..4)  
        .equ DMA2_HIFCR_CHTIF5, 1 << 10   @ bitWidth 1 (Stream x clear half transfer interrupt  flag x = 7..4)  
        .equ DMA2_HIFCR_CTEIF5, 1 << 9   @ bitWidth 1 (Stream x clear transfer error interrupt  flag x = 7..4)  
        .equ DMA2_HIFCR_CDMEIF5, 1 << 8   @ bitWidth 1 (Stream x clear direct mode error  interrupt flag x = 7..4)  
        .equ DMA2_HIFCR_CFEIF5, 1 << 6   @ bitWidth 1 (Stream x clear FIFO error interrupt flag  x = 7..4)  
        .equ DMA2_HIFCR_CTCIF4, 1 << 5   @ bitWidth 1 (Stream x clear transfer complete  interrupt flag x = 7..4)  
        .equ DMA2_HIFCR_CHTIF4, 1 << 4   @ bitWidth 1 (Stream x clear half transfer interrupt  flag x = 7..4)  
        .equ DMA2_HIFCR_CTEIF4, 1 << 3   @ bitWidth 1 (Stream x clear transfer error interrupt  flag x = 7..4)  
        .equ DMA2_HIFCR_CDMEIF4, 1 << 2   @ bitWidth 1 (Stream x clear direct mode error  interrupt flag x = 7..4)  
        .equ DMA2_HIFCR_CFEIF4, 1 << 0   @ bitWidth 1 (Stream x clear FIFO error interrupt flag  x = 7..4)  
 
    .equ DMA2_S0CR, DMA2_BASE + 0x10 @ (stream x configuration  register) 
        .equ DMA2_S0CR_CHSEL_Shift, 25   @ bitWidth 3 (Channel selection)  
        .equ DMA2_S0CR_MBURST_Shift, 23   @ bitWidth 2 (Memory burst transfer  configuration)  
        .equ DMA2_S0CR_PBURST_Shift, 21   @ bitWidth 2 (Peripheral burst transfer  configuration)  
        .equ DMA2_S0CR_CT, 1 << 19   @ bitWidth 1 (Current target only in double buffer  mode)  
        .equ DMA2_S0CR_DBM, 1 << 18   @ bitWidth 1 (Double buffer mode)  
        .equ DMA2_S0CR_PL_Shift, 16   @ bitWidth 2 (Priority level)  
        .equ DMA2_S0CR_PINCOS, 1 << 15   @ bitWidth 1 (Peripheral increment offset  size)  
        .equ DMA2_S0CR_MSIZE_Shift, 13   @ bitWidth 2 (Memory data size)  
        .equ DMA2_S0CR_PSIZE_Shift, 11   @ bitWidth 2 (Peripheral data size)  
        .equ DMA2_S0CR_MINC, 1 << 10   @ bitWidth 1 (Memory increment mode)  
        .equ DMA2_S0CR_PINC, 1 << 9   @ bitWidth 1 (Peripheral increment mode)  
        .equ DMA2_S0CR_CIRC, 1 << 8   @ bitWidth 1 (Circular mode)  
        .equ DMA2_S0CR_DIR_Shift, 6   @ bitWidth 2 (Data transfer direction)  
        .equ DMA2_S0CR_PFCTRL, 1 << 5   @ bitWidth 1 (Peripheral flow controller)  
        .equ DMA2_S0CR_TCIE, 1 << 4   @ bitWidth 1 (Transfer complete interrupt  enable)  
        .equ DMA2_S0CR_HTIE, 1 << 3   @ bitWidth 1 (Half transfer interrupt  enable)  
        .equ DMA2_S0CR_TEIE, 1 << 2   @ bitWidth 1 (Transfer error interrupt  enable)  
        .equ DMA2_S0CR_DMEIE, 1 << 1   @ bitWidth 1 (Direct mode error interrupt  enable)  
        .equ DMA2_S0CR_EN, 1 << 0   @ bitWidth 1 (Stream enable / flag stream ready when  read low)  
 
    .equ DMA2_S0NDTR, DMA2_BASE + 0x14 @ (stream x number of data  register) 
        .equ DMA2_S0NDTR_NDT_Shift, 0   @ bitWidth 16 (Number of data items to  transfer)  
 
    .equ DMA2_S0PAR, DMA2_BASE + 0x18 @ (stream x peripheral address  register) 
        .equ DMA2_S0PAR_PA_Shift, 0   @ bitWidth 32 (Peripheral address)  
 
    .equ DMA2_S0M0AR, DMA2_BASE + 0x1C @ (stream x memory 0 address  register) 
        .equ DMA2_S0M0AR_M0A_Shift, 0   @ bitWidth 32 (Memory 0 address)  
 
    .equ DMA2_S0M1AR, DMA2_BASE + 0x20 @ (stream x memory 1 address  register) 
        .equ DMA2_S0M1AR_M1A_Shift, 0   @ bitWidth 32 (Memory 1 address used in case of Double  buffer mode)  
 
    .equ DMA2_S0FCR, DMA2_BASE + 0x24 @ (stream x FIFO control register) 
        .equ DMA2_S0FCR_FEIE, 1 << 7   @ bitWidth 1 (FIFO error interrupt  enable)  
        .equ DMA2_S0FCR_FS_Shift, 3   @ bitWidth 3 (FIFO status)  
        .equ DMA2_S0FCR_DMDIS, 1 << 2   @ bitWidth 1 (Direct mode disable)  
        .equ DMA2_S0FCR_FTH_Shift, 0   @ bitWidth 2 (FIFO threshold selection)  
 
    .equ DMA2_S1CR, DMA2_BASE + 0x28 @ (stream x configuration  register) 
        .equ DMA2_S1CR_CHSEL_Shift, 25   @ bitWidth 3 (Channel selection)  
        .equ DMA2_S1CR_MBURST_Shift, 23   @ bitWidth 2 (Memory burst transfer  configuration)  
        .equ DMA2_S1CR_PBURST_Shift, 21   @ bitWidth 2 (Peripheral burst transfer  configuration)  
        .equ DMA2_S1CR_ACK, 1 << 20   @ bitWidth 1 (ACK)  
        .equ DMA2_S1CR_CT, 1 << 19   @ bitWidth 1 (Current target only in double buffer  mode)  
        .equ DMA2_S1CR_DBM, 1 << 18   @ bitWidth 1 (Double buffer mode)  
        .equ DMA2_S1CR_PL_Shift, 16   @ bitWidth 2 (Priority level)  
        .equ DMA2_S1CR_PINCOS, 1 << 15   @ bitWidth 1 (Peripheral increment offset  size)  
        .equ DMA2_S1CR_MSIZE_Shift, 13   @ bitWidth 2 (Memory data size)  
        .equ DMA2_S1CR_PSIZE_Shift, 11   @ bitWidth 2 (Peripheral data size)  
        .equ DMA2_S1CR_MINC, 1 << 10   @ bitWidth 1 (Memory increment mode)  
        .equ DMA2_S1CR_PINC, 1 << 9   @ bitWidth 1 (Peripheral increment mode)  
        .equ DMA2_S1CR_CIRC, 1 << 8   @ bitWidth 1 (Circular mode)  
        .equ DMA2_S1CR_DIR_Shift, 6   @ bitWidth 2 (Data transfer direction)  
        .equ DMA2_S1CR_PFCTRL, 1 << 5   @ bitWidth 1 (Peripheral flow controller)  
        .equ DMA2_S1CR_TCIE, 1 << 4   @ bitWidth 1 (Transfer complete interrupt  enable)  
        .equ DMA2_S1CR_HTIE, 1 << 3   @ bitWidth 1 (Half transfer interrupt  enable)  
        .equ DMA2_S1CR_TEIE, 1 << 2   @ bitWidth 1 (Transfer error interrupt  enable)  
        .equ DMA2_S1CR_DMEIE, 1 << 1   @ bitWidth 1 (Direct mode error interrupt  enable)  
        .equ DMA2_S1CR_EN, 1 << 0   @ bitWidth 1 (Stream enable / flag stream ready when  read low)  
 
    .equ DMA2_S1NDTR, DMA2_BASE + 0x2C @ (stream x number of data  register) 
        .equ DMA2_S1NDTR_NDT_Shift, 0   @ bitWidth 16 (Number of data items to  transfer)  
 
    .equ DMA2_S1PAR, DMA2_BASE + 0x30 @ (stream x peripheral address  register) 
        .equ DMA2_S1PAR_PA_Shift, 0   @ bitWidth 32 (Peripheral address)  
 
    .equ DMA2_S1M0AR, DMA2_BASE + 0x34 @ (stream x memory 0 address  register) 
        .equ DMA2_S1M0AR_M0A_Shift, 0   @ bitWidth 32 (Memory 0 address)  
 
    .equ DMA2_S1M1AR, DMA2_BASE + 0x38 @ (stream x memory 1 address  register) 
        .equ DMA2_S1M1AR_M1A_Shift, 0   @ bitWidth 32 (Memory 1 address used in case of Double  buffer mode)  
 
    .equ DMA2_S1FCR, DMA2_BASE + 0x3C @ (stream x FIFO control register) 
        .equ DMA2_S1FCR_FEIE, 1 << 7   @ bitWidth 1 (FIFO error interrupt  enable)  
        .equ DMA2_S1FCR_FS_Shift, 3   @ bitWidth 3 (FIFO status)  
        .equ DMA2_S1FCR_DMDIS, 1 << 2   @ bitWidth 1 (Direct mode disable)  
        .equ DMA2_S1FCR_FTH_Shift, 0   @ bitWidth 2 (FIFO threshold selection)  
 
    .equ DMA2_S2CR, DMA2_BASE + 0x40 @ (stream x configuration  register) 
        .equ DMA2_S2CR_CHSEL_Shift, 25   @ bitWidth 3 (Channel selection)  
        .equ DMA2_S2CR_MBURST_Shift, 23   @ bitWidth 2 (Memory burst transfer  configuration)  
        .equ DMA2_S2CR_PBURST_Shift, 21   @ bitWidth 2 (Peripheral burst transfer  configuration)  
        .equ DMA2_S2CR_ACK, 1 << 20   @ bitWidth 1 (ACK)  
        .equ DMA2_S2CR_CT, 1 << 19   @ bitWidth 1 (Current target only in double buffer  mode)  
        .equ DMA2_S2CR_DBM, 1 << 18   @ bitWidth 1 (Double buffer mode)  
        .equ DMA2_S2CR_PL_Shift, 16   @ bitWidth 2 (Priority level)  
        .equ DMA2_S2CR_PINCOS, 1 << 15   @ bitWidth 1 (Peripheral increment offset  size)  
        .equ DMA2_S2CR_MSIZE_Shift, 13   @ bitWidth 2 (Memory data size)  
        .equ DMA2_S2CR_PSIZE_Shift, 11   @ bitWidth 2 (Peripheral data size)  
        .equ DMA2_S2CR_MINC, 1 << 10   @ bitWidth 1 (Memory increment mode)  
        .equ DMA2_S2CR_PINC, 1 << 9   @ bitWidth 1 (Peripheral increment mode)  
        .equ DMA2_S2CR_CIRC, 1 << 8   @ bitWidth 1 (Circular mode)  
        .equ DMA2_S2CR_DIR_Shift, 6   @ bitWidth 2 (Data transfer direction)  
        .equ DMA2_S2CR_PFCTRL, 1 << 5   @ bitWidth 1 (Peripheral flow controller)  
        .equ DMA2_S2CR_TCIE, 1 << 4   @ bitWidth 1 (Transfer complete interrupt  enable)  
        .equ DMA2_S2CR_HTIE, 1 << 3   @ bitWidth 1 (Half transfer interrupt  enable)  
        .equ DMA2_S2CR_TEIE, 1 << 2   @ bitWidth 1 (Transfer error interrupt  enable)  
        .equ DMA2_S2CR_DMEIE, 1 << 1   @ bitWidth 1 (Direct mode error interrupt  enable)  
        .equ DMA2_S2CR_EN, 1 << 0   @ bitWidth 1 (Stream enable / flag stream ready when  read low)  
 
    .equ DMA2_S2NDTR, DMA2_BASE + 0x44 @ (stream x number of data  register) 
        .equ DMA2_S2NDTR_NDT_Shift, 0   @ bitWidth 16 (Number of data items to  transfer)  
 
    .equ DMA2_S2PAR, DMA2_BASE + 0x48 @ (stream x peripheral address  register) 
        .equ DMA2_S2PAR_PA_Shift, 0   @ bitWidth 32 (Peripheral address)  
 
    .equ DMA2_S2M0AR, DMA2_BASE + 0x4C @ (stream x memory 0 address  register) 
        .equ DMA2_S2M0AR_M0A_Shift, 0   @ bitWidth 32 (Memory 0 address)  
 
    .equ DMA2_S2M1AR, DMA2_BASE + 0x50 @ (stream x memory 1 address  register) 
        .equ DMA2_S2M1AR_M1A_Shift, 0   @ bitWidth 32 (Memory 1 address used in case of Double  buffer mode)  
 
    .equ DMA2_S2FCR, DMA2_BASE + 0x54 @ (stream x FIFO control register) 
        .equ DMA2_S2FCR_FEIE, 1 << 7   @ bitWidth 1 (FIFO error interrupt  enable)  
        .equ DMA2_S2FCR_FS_Shift, 3   @ bitWidth 3 (FIFO status)  
        .equ DMA2_S2FCR_DMDIS, 1 << 2   @ bitWidth 1 (Direct mode disable)  
        .equ DMA2_S2FCR_FTH_Shift, 0   @ bitWidth 2 (FIFO threshold selection)  
 
    .equ DMA2_S3CR, DMA2_BASE + 0x58 @ (stream x configuration  register) 
        .equ DMA2_S3CR_CHSEL_Shift, 25   @ bitWidth 3 (Channel selection)  
        .equ DMA2_S3CR_MBURST_Shift, 23   @ bitWidth 2 (Memory burst transfer  configuration)  
        .equ DMA2_S3CR_PBURST_Shift, 21   @ bitWidth 2 (Peripheral burst transfer  configuration)  
        .equ DMA2_S3CR_ACK, 1 << 20   @ bitWidth 1 (ACK)  
        .equ DMA2_S3CR_CT, 1 << 19   @ bitWidth 1 (Current target only in double buffer  mode)  
        .equ DMA2_S3CR_DBM, 1 << 18   @ bitWidth 1 (Double buffer mode)  
        .equ DMA2_S3CR_PL_Shift, 16   @ bitWidth 2 (Priority level)  
        .equ DMA2_S3CR_PINCOS, 1 << 15   @ bitWidth 1 (Peripheral increment offset  size)  
        .equ DMA2_S3CR_MSIZE_Shift, 13   @ bitWidth 2 (Memory data size)  
        .equ DMA2_S3CR_PSIZE_Shift, 11   @ bitWidth 2 (Peripheral data size)  
        .equ DMA2_S3CR_MINC, 1 << 10   @ bitWidth 1 (Memory increment mode)  
        .equ DMA2_S3CR_PINC, 1 << 9   @ bitWidth 1 (Peripheral increment mode)  
        .equ DMA2_S3CR_CIRC, 1 << 8   @ bitWidth 1 (Circular mode)  
        .equ DMA2_S3CR_DIR_Shift, 6   @ bitWidth 2 (Data transfer direction)  
        .equ DMA2_S3CR_PFCTRL, 1 << 5   @ bitWidth 1 (Peripheral flow controller)  
        .equ DMA2_S3CR_TCIE, 1 << 4   @ bitWidth 1 (Transfer complete interrupt  enable)  
        .equ DMA2_S3CR_HTIE, 1 << 3   @ bitWidth 1 (Half transfer interrupt  enable)  
        .equ DMA2_S3CR_TEIE, 1 << 2   @ bitWidth 1 (Transfer error interrupt  enable)  
        .equ DMA2_S3CR_DMEIE, 1 << 1   @ bitWidth 1 (Direct mode error interrupt  enable)  
        .equ DMA2_S3CR_EN, 1 << 0   @ bitWidth 1 (Stream enable / flag stream ready when  read low)  
 
    .equ DMA2_S3NDTR, DMA2_BASE + 0x5C @ (stream x number of data  register) 
        .equ DMA2_S3NDTR_NDT_Shift, 0   @ bitWidth 16 (Number of data items to  transfer)  
 
    .equ DMA2_S3PAR, DMA2_BASE + 0x60 @ (stream x peripheral address  register) 
        .equ DMA2_S3PAR_PA_Shift, 0   @ bitWidth 32 (Peripheral address)  
 
    .equ DMA2_S3M0AR, DMA2_BASE + 0x64 @ (stream x memory 0 address  register) 
        .equ DMA2_S3M0AR_M0A_Shift, 0   @ bitWidth 32 (Memory 0 address)  
 
    .equ DMA2_S3M1AR, DMA2_BASE + 0x68 @ (stream x memory 1 address  register) 
        .equ DMA2_S3M1AR_M1A_Shift, 0   @ bitWidth 32 (Memory 1 address used in case of Double  buffer mode)  
 
    .equ DMA2_S3FCR, DMA2_BASE + 0x6C @ (stream x FIFO control register) 
        .equ DMA2_S3FCR_FEIE, 1 << 7   @ bitWidth 1 (FIFO error interrupt  enable)  
        .equ DMA2_S3FCR_FS_Shift, 3   @ bitWidth 3 (FIFO status)  
        .equ DMA2_S3FCR_DMDIS, 1 << 2   @ bitWidth 1 (Direct mode disable)  
        .equ DMA2_S3FCR_FTH_Shift, 0   @ bitWidth 2 (FIFO threshold selection)  
 
    .equ DMA2_S4CR, DMA2_BASE + 0x70 @ (stream x configuration  register) 
        .equ DMA2_S4CR_CHSEL_Shift, 25   @ bitWidth 3 (Channel selection)  
        .equ DMA2_S4CR_MBURST_Shift, 23   @ bitWidth 2 (Memory burst transfer  configuration)  
        .equ DMA2_S4CR_PBURST_Shift, 21   @ bitWidth 2 (Peripheral burst transfer  configuration)  
        .equ DMA2_S4CR_ACK, 1 << 20   @ bitWidth 1 (ACK)  
        .equ DMA2_S4CR_CT, 1 << 19   @ bitWidth 1 (Current target only in double buffer  mode)  
        .equ DMA2_S4CR_DBM, 1 << 18   @ bitWidth 1 (Double buffer mode)  
        .equ DMA2_S4CR_PL_Shift, 16   @ bitWidth 2 (Priority level)  
        .equ DMA2_S4CR_PINCOS, 1 << 15   @ bitWidth 1 (Peripheral increment offset  size)  
        .equ DMA2_S4CR_MSIZE_Shift, 13   @ bitWidth 2 (Memory data size)  
        .equ DMA2_S4CR_PSIZE_Shift, 11   @ bitWidth 2 (Peripheral data size)  
        .equ DMA2_S4CR_MINC, 1 << 10   @ bitWidth 1 (Memory increment mode)  
        .equ DMA2_S4CR_PINC, 1 << 9   @ bitWidth 1 (Peripheral increment mode)  
        .equ DMA2_S4CR_CIRC, 1 << 8   @ bitWidth 1 (Circular mode)  
        .equ DMA2_S4CR_DIR_Shift, 6   @ bitWidth 2 (Data transfer direction)  
        .equ DMA2_S4CR_PFCTRL, 1 << 5   @ bitWidth 1 (Peripheral flow controller)  
        .equ DMA2_S4CR_TCIE, 1 << 4   @ bitWidth 1 (Transfer complete interrupt  enable)  
        .equ DMA2_S4CR_HTIE, 1 << 3   @ bitWidth 1 (Half transfer interrupt  enable)  
        .equ DMA2_S4CR_TEIE, 1 << 2   @ bitWidth 1 (Transfer error interrupt  enable)  
        .equ DMA2_S4CR_DMEIE, 1 << 1   @ bitWidth 1 (Direct mode error interrupt  enable)  
        .equ DMA2_S4CR_EN, 1 << 0   @ bitWidth 1 (Stream enable / flag stream ready when  read low)  
 
    .equ DMA2_S4NDTR, DMA2_BASE + 0x74 @ (stream x number of data  register) 
        .equ DMA2_S4NDTR_NDT_Shift, 0   @ bitWidth 16 (Number of data items to  transfer)  
 
    .equ DMA2_S4PAR, DMA2_BASE + 0x78 @ (stream x peripheral address  register) 
        .equ DMA2_S4PAR_PA_Shift, 0   @ bitWidth 32 (Peripheral address)  
 
    .equ DMA2_S4M0AR, DMA2_BASE + 0x7C @ (stream x memory 0 address  register) 
        .equ DMA2_S4M0AR_M0A_Shift, 0   @ bitWidth 32 (Memory 0 address)  
 
    .equ DMA2_S4M1AR, DMA2_BASE + 0x80 @ (stream x memory 1 address  register) 
        .equ DMA2_S4M1AR_M1A_Shift, 0   @ bitWidth 32 (Memory 1 address used in case of Double  buffer mode)  
 
    .equ DMA2_S4FCR, DMA2_BASE + 0x84 @ (stream x FIFO control register) 
        .equ DMA2_S4FCR_FEIE, 1 << 7   @ bitWidth 1 (FIFO error interrupt  enable)  
        .equ DMA2_S4FCR_FS_Shift, 3   @ bitWidth 3 (FIFO status)  
        .equ DMA2_S4FCR_DMDIS, 1 << 2   @ bitWidth 1 (Direct mode disable)  
        .equ DMA2_S4FCR_FTH_Shift, 0   @ bitWidth 2 (FIFO threshold selection)  
 
    .equ DMA2_S5CR, DMA2_BASE + 0x88 @ (stream x configuration  register) 
        .equ DMA2_S5CR_CHSEL_Shift, 25   @ bitWidth 3 (Channel selection)  
        .equ DMA2_S5CR_MBURST_Shift, 23   @ bitWidth 2 (Memory burst transfer  configuration)  
        .equ DMA2_S5CR_PBURST_Shift, 21   @ bitWidth 2 (Peripheral burst transfer  configuration)  
        .equ DMA2_S5CR_ACK, 1 << 20   @ bitWidth 1 (ACK)  
        .equ DMA2_S5CR_CT, 1 << 19   @ bitWidth 1 (Current target only in double buffer  mode)  
        .equ DMA2_S5CR_DBM, 1 << 18   @ bitWidth 1 (Double buffer mode)  
        .equ DMA2_S5CR_PL_Shift, 16   @ bitWidth 2 (Priority level)  
        .equ DMA2_S5CR_PINCOS, 1 << 15   @ bitWidth 1 (Peripheral increment offset  size)  
        .equ DMA2_S5CR_MSIZE_Shift, 13   @ bitWidth 2 (Memory data size)  
        .equ DMA2_S5CR_PSIZE_Shift, 11   @ bitWidth 2 (Peripheral data size)  
        .equ DMA2_S5CR_MINC, 1 << 10   @ bitWidth 1 (Memory increment mode)  
        .equ DMA2_S5CR_PINC, 1 << 9   @ bitWidth 1 (Peripheral increment mode)  
        .equ DMA2_S5CR_CIRC, 1 << 8   @ bitWidth 1 (Circular mode)  
        .equ DMA2_S5CR_DIR_Shift, 6   @ bitWidth 2 (Data transfer direction)  
        .equ DMA2_S5CR_PFCTRL, 1 << 5   @ bitWidth 1 (Peripheral flow controller)  
        .equ DMA2_S5CR_TCIE, 1 << 4   @ bitWidth 1 (Transfer complete interrupt  enable)  
        .equ DMA2_S5CR_HTIE, 1 << 3   @ bitWidth 1 (Half transfer interrupt  enable)  
        .equ DMA2_S5CR_TEIE, 1 << 2   @ bitWidth 1 (Transfer error interrupt  enable)  
        .equ DMA2_S5CR_DMEIE, 1 << 1   @ bitWidth 1 (Direct mode error interrupt  enable)  
        .equ DMA2_S5CR_EN, 1 << 0   @ bitWidth 1 (Stream enable / flag stream ready when  read low)  
 
    .equ DMA2_S5NDTR, DMA2_BASE + 0x8C @ (stream x number of data  register) 
        .equ DMA2_S5NDTR_NDT_Shift, 0   @ bitWidth 16 (Number of data items to  transfer)  
 
    .equ DMA2_S5PAR, DMA2_BASE + 0x90 @ (stream x peripheral address  register) 
        .equ DMA2_S5PAR_PA_Shift, 0   @ bitWidth 32 (Peripheral address)  
 
    .equ DMA2_S5M0AR, DMA2_BASE + 0x94 @ (stream x memory 0 address  register) 
        .equ DMA2_S5M0AR_M0A_Shift, 0   @ bitWidth 32 (Memory 0 address)  
 
    .equ DMA2_S5M1AR, DMA2_BASE + 0x98 @ (stream x memory 1 address  register) 
        .equ DMA2_S5M1AR_M1A_Shift, 0   @ bitWidth 32 (Memory 1 address used in case of Double  buffer mode)  
 
    .equ DMA2_S5FCR, DMA2_BASE + 0x9C @ (stream x FIFO control register) 
        .equ DMA2_S5FCR_FEIE, 1 << 7   @ bitWidth 1 (FIFO error interrupt  enable)  
        .equ DMA2_S5FCR_FS_Shift, 3   @ bitWidth 3 (FIFO status)  
        .equ DMA2_S5FCR_DMDIS, 1 << 2   @ bitWidth 1 (Direct mode disable)  
        .equ DMA2_S5FCR_FTH_Shift, 0   @ bitWidth 2 (FIFO threshold selection)  
 
    .equ DMA2_S6CR, DMA2_BASE + 0xA0 @ (stream x configuration  register) 
        .equ DMA2_S6CR_CHSEL_Shift, 25   @ bitWidth 3 (Channel selection)  
        .equ DMA2_S6CR_MBURST_Shift, 23   @ bitWidth 2 (Memory burst transfer  configuration)  
        .equ DMA2_S6CR_PBURST_Shift, 21   @ bitWidth 2 (Peripheral burst transfer  configuration)  
        .equ DMA2_S6CR_ACK, 1 << 20   @ bitWidth 1 (ACK)  
        .equ DMA2_S6CR_CT, 1 << 19   @ bitWidth 1 (Current target only in double buffer  mode)  
        .equ DMA2_S6CR_DBM, 1 << 18   @ bitWidth 1 (Double buffer mode)  
        .equ DMA2_S6CR_PL_Shift, 16   @ bitWidth 2 (Priority level)  
        .equ DMA2_S6CR_PINCOS, 1 << 15   @ bitWidth 1 (Peripheral increment offset  size)  
        .equ DMA2_S6CR_MSIZE_Shift, 13   @ bitWidth 2 (Memory data size)  
        .equ DMA2_S6CR_PSIZE_Shift, 11   @ bitWidth 2 (Peripheral data size)  
        .equ DMA2_S6CR_MINC, 1 << 10   @ bitWidth 1 (Memory increment mode)  
        .equ DMA2_S6CR_PINC, 1 << 9   @ bitWidth 1 (Peripheral increment mode)  
        .equ DMA2_S6CR_CIRC, 1 << 8   @ bitWidth 1 (Circular mode)  
        .equ DMA2_S6CR_DIR_Shift, 6   @ bitWidth 2 (Data transfer direction)  
        .equ DMA2_S6CR_PFCTRL, 1 << 5   @ bitWidth 1 (Peripheral flow controller)  
        .equ DMA2_S6CR_TCIE, 1 << 4   @ bitWidth 1 (Transfer complete interrupt  enable)  
        .equ DMA2_S6CR_HTIE, 1 << 3   @ bitWidth 1 (Half transfer interrupt  enable)  
        .equ DMA2_S6CR_TEIE, 1 << 2   @ bitWidth 1 (Transfer error interrupt  enable)  
        .equ DMA2_S6CR_DMEIE, 1 << 1   @ bitWidth 1 (Direct mode error interrupt  enable)  
        .equ DMA2_S6CR_EN, 1 << 0   @ bitWidth 1 (Stream enable / flag stream ready when  read low)  
 
    .equ DMA2_S6NDTR, DMA2_BASE + 0xA4 @ (stream x number of data  register) 
        .equ DMA2_S6NDTR_NDT_Shift, 0   @ bitWidth 16 (Number of data items to  transfer)  
 
    .equ DMA2_S6PAR, DMA2_BASE + 0xA8 @ (stream x peripheral address  register) 
        .equ DMA2_S6PAR_PA_Shift, 0   @ bitWidth 32 (Peripheral address)  
 
    .equ DMA2_S6M0AR, DMA2_BASE + 0xAC @ (stream x memory 0 address  register) 
        .equ DMA2_S6M0AR_M0A_Shift, 0   @ bitWidth 32 (Memory 0 address)  
 
    .equ DMA2_S6M1AR, DMA2_BASE + 0xB0 @ (stream x memory 1 address  register) 
        .equ DMA2_S6M1AR_M1A_Shift, 0   @ bitWidth 32 (Memory 1 address used in case of Double  buffer mode)  
 
    .equ DMA2_S6FCR, DMA2_BASE + 0xB4 @ (stream x FIFO control register) 
        .equ DMA2_S6FCR_FEIE, 1 << 7   @ bitWidth 1 (FIFO error interrupt  enable)  
        .equ DMA2_S6FCR_FS_Shift, 3   @ bitWidth 3 (FIFO status)  
        .equ DMA2_S6FCR_DMDIS, 1 << 2   @ bitWidth 1 (Direct mode disable)  
        .equ DMA2_S6FCR_FTH_Shift, 0   @ bitWidth 2 (FIFO threshold selection)  
 
    .equ DMA2_S7CR, DMA2_BASE + 0xB8 @ (stream x configuration  register) 
        .equ DMA2_S7CR_CHSEL_Shift, 25   @ bitWidth 3 (Channel selection)  
        .equ DMA2_S7CR_MBURST_Shift, 23   @ bitWidth 2 (Memory burst transfer  configuration)  
        .equ DMA2_S7CR_PBURST_Shift, 21   @ bitWidth 2 (Peripheral burst transfer  configuration)  
        .equ DMA2_S7CR_ACK, 1 << 20   @ bitWidth 1 (ACK)  
        .equ DMA2_S7CR_CT, 1 << 19   @ bitWidth 1 (Current target only in double buffer  mode)  
        .equ DMA2_S7CR_DBM, 1 << 18   @ bitWidth 1 (Double buffer mode)  
        .equ DMA2_S7CR_PL_Shift, 16   @ bitWidth 2 (Priority level)  
        .equ DMA2_S7CR_PINCOS, 1 << 15   @ bitWidth 1 (Peripheral increment offset  size)  
        .equ DMA2_S7CR_MSIZE_Shift, 13   @ bitWidth 2 (Memory data size)  
        .equ DMA2_S7CR_PSIZE_Shift, 11   @ bitWidth 2 (Peripheral data size)  
        .equ DMA2_S7CR_MINC, 1 << 10   @ bitWidth 1 (Memory increment mode)  
        .equ DMA2_S7CR_PINC, 1 << 9   @ bitWidth 1 (Peripheral increment mode)  
        .equ DMA2_S7CR_CIRC, 1 << 8   @ bitWidth 1 (Circular mode)  
        .equ DMA2_S7CR_DIR_Shift, 6   @ bitWidth 2 (Data transfer direction)  
        .equ DMA2_S7CR_PFCTRL, 1 << 5   @ bitWidth 1 (Peripheral flow controller)  
        .equ DMA2_S7CR_TCIE, 1 << 4   @ bitWidth 1 (Transfer complete interrupt  enable)  
        .equ DMA2_S7CR_HTIE, 1 << 3   @ bitWidth 1 (Half transfer interrupt  enable)  
        .equ DMA2_S7CR_TEIE, 1 << 2   @ bitWidth 1 (Transfer error interrupt  enable)  
        .equ DMA2_S7CR_DMEIE, 1 << 1   @ bitWidth 1 (Direct mode error interrupt  enable)  
        .equ DMA2_S7CR_EN, 1 << 0   @ bitWidth 1 (Stream enable / flag stream ready when  read low)  
 
    .equ DMA2_S7NDTR, DMA2_BASE + 0xBC @ (stream x number of data  register) 
        .equ DMA2_S7NDTR_NDT_Shift, 0   @ bitWidth 16 (Number of data items to  transfer)  
 
    .equ DMA2_S7PAR, DMA2_BASE + 0xC0 @ (stream x peripheral address  register) 
        .equ DMA2_S7PAR_PA_Shift, 0   @ bitWidth 32 (Peripheral address)  
 
    .equ DMA2_S7M0AR, DMA2_BASE + 0xC4 @ (stream x memory 0 address  register) 
        .equ DMA2_S7M0AR_M0A_Shift, 0   @ bitWidth 32 (Memory 0 address)  
 
    .equ DMA2_S7M1AR, DMA2_BASE + 0xC8 @ (stream x memory 1 address  register) 
        .equ DMA2_S7M1AR_M1A_Shift, 0   @ bitWidth 32 (Memory 1 address used in case of Double  buffer mode)  
 
    .equ DMA2_S7FCR, DMA2_BASE + 0xCC @ (stream x FIFO control register) 
        .equ DMA2_S7FCR_FEIE, 1 << 7   @ bitWidth 1 (FIFO error interrupt  enable)  
        .equ DMA2_S7FCR_FS_Shift, 3   @ bitWidth 3 (FIFO status)  
        .equ DMA2_S7FCR_DMDIS, 1 << 2   @ bitWidth 1 (Direct mode disable)  
        .equ DMA2_S7FCR_FTH_Shift, 0   @ bitWidth 2 (FIFO threshold selection)  
 

@=========================== DMA1 ===========================@
.equ DMA1_BASE, 0x40026000 @ (DMA controller) 
    .equ DMA1_LISR, DMA1_BASE + 0x0 @ (low interrupt status register) 
        .equ DMA1_LISR_TCIF3, 1 << 27   @ bitWidth 1 (Stream x transfer complete interrupt  flag x = 3..0)  
        .equ DMA1_LISR_HTIF3, 1 << 26   @ bitWidth 1 (Stream x half transfer interrupt flag  x=3..0)  
        .equ DMA1_LISR_TEIF3, 1 << 25   @ bitWidth 1 (Stream x transfer error interrupt flag  x=3..0)  
        .equ DMA1_LISR_DMEIF3, 1 << 24   @ bitWidth 1 (Stream x direct mode error interrupt  flag x=3..0)  
        .equ DMA1_LISR_FEIF3, 1 << 22   @ bitWidth 1 (Stream x FIFO error interrupt flag  x=3..0)  
        .equ DMA1_LISR_TCIF2, 1 << 21   @ bitWidth 1 (Stream x transfer complete interrupt  flag x = 3..0)  
        .equ DMA1_LISR_HTIF2, 1 << 20   @ bitWidth 1 (Stream x half transfer interrupt flag  x=3..0)  
        .equ DMA1_LISR_TEIF2, 1 << 19   @ bitWidth 1 (Stream x transfer error interrupt flag  x=3..0)  
        .equ DMA1_LISR_DMEIF2, 1 << 18   @ bitWidth 1 (Stream x direct mode error interrupt  flag x=3..0)  
        .equ DMA1_LISR_FEIF2, 1 << 16   @ bitWidth 1 (Stream x FIFO error interrupt flag  x=3..0)  
        .equ DMA1_LISR_TCIF1, 1 << 11   @ bitWidth 1 (Stream x transfer complete interrupt  flag x = 3..0)  
        .equ DMA1_LISR_HTIF1, 1 << 10   @ bitWidth 1 (Stream x half transfer interrupt flag  x=3..0)  
        .equ DMA1_LISR_TEIF1, 1 << 9   @ bitWidth 1 (Stream x transfer error interrupt flag  x=3..0)  
        .equ DMA1_LISR_DMEIF1, 1 << 8   @ bitWidth 1 (Stream x direct mode error interrupt  flag x=3..0)  
        .equ DMA1_LISR_FEIF1, 1 << 6   @ bitWidth 1 (Stream x FIFO error interrupt flag  x=3..0)  
        .equ DMA1_LISR_TCIF0, 1 << 5   @ bitWidth 1 (Stream x transfer complete interrupt  flag x = 3..0)  
        .equ DMA1_LISR_HTIF0, 1 << 4   @ bitWidth 1 (Stream x half transfer interrupt flag  x=3..0)  
        .equ DMA1_LISR_TEIF0, 1 << 3   @ bitWidth 1 (Stream x transfer error interrupt flag  x=3..0)  
        .equ DMA1_LISR_DMEIF0, 1 << 2   @ bitWidth 1 (Stream x direct mode error interrupt  flag x=3..0)  
        .equ DMA1_LISR_FEIF0, 1 << 0   @ bitWidth 1 (Stream x FIFO error interrupt flag  x=3..0)  
 
    .equ DMA1_HISR, DMA1_BASE + 0x4 @ (high interrupt status register) 
        .equ DMA1_HISR_TCIF7, 1 << 27   @ bitWidth 1 (Stream x transfer complete interrupt  flag x=7..4)  
        .equ DMA1_HISR_HTIF7, 1 << 26   @ bitWidth 1 (Stream x half transfer interrupt flag  x=7..4)  
        .equ DMA1_HISR_TEIF7, 1 << 25   @ bitWidth 1 (Stream x transfer error interrupt flag  x=7..4)  
        .equ DMA1_HISR_DMEIF7, 1 << 24   @ bitWidth 1 (Stream x direct mode error interrupt  flag x=7..4)  
        .equ DMA1_HISR_FEIF7, 1 << 22   @ bitWidth 1 (Stream x FIFO error interrupt flag  x=7..4)  
        .equ DMA1_HISR_TCIF6, 1 << 21   @ bitWidth 1 (Stream x transfer complete interrupt  flag x=7..4)  
        .equ DMA1_HISR_HTIF6, 1 << 20   @ bitWidth 1 (Stream x half transfer interrupt flag  x=7..4)  
        .equ DMA1_HISR_TEIF6, 1 << 19   @ bitWidth 1 (Stream x transfer error interrupt flag  x=7..4)  
        .equ DMA1_HISR_DMEIF6, 1 << 18   @ bitWidth 1 (Stream x direct mode error interrupt  flag x=7..4)  
        .equ DMA1_HISR_FEIF6, 1 << 16   @ bitWidth 1 (Stream x FIFO error interrupt flag  x=7..4)  
        .equ DMA1_HISR_TCIF5, 1 << 11   @ bitWidth 1 (Stream x transfer complete interrupt  flag x=7..4)  
        .equ DMA1_HISR_HTIF5, 1 << 10   @ bitWidth 1 (Stream x half transfer interrupt flag  x=7..4)  
        .equ DMA1_HISR_TEIF5, 1 << 9   @ bitWidth 1 (Stream x transfer error interrupt flag  x=7..4)  
        .equ DMA1_HISR_DMEIF5, 1 << 8   @ bitWidth 1 (Stream x direct mode error interrupt  flag x=7..4)  
        .equ DMA1_HISR_FEIF5, 1 << 6   @ bitWidth 1 (Stream x FIFO error interrupt flag  x=7..4)  
        .equ DMA1_HISR_TCIF4, 1 << 5   @ bitWidth 1 (Stream x transfer complete interrupt  flag x=7..4)  
        .equ DMA1_HISR_HTIF4, 1 << 4   @ bitWidth 1 (Stream x half transfer interrupt flag  x=7..4)  
        .equ DMA1_HISR_TEIF4, 1 << 3   @ bitWidth 1 (Stream x transfer error interrupt flag  x=7..4)  
        .equ DMA1_HISR_DMEIF4, 1 << 2   @ bitWidth 1 (Stream x direct mode error interrupt  flag x=7..4)  
        .equ DMA1_HISR_FEIF4, 1 << 0   @ bitWidth 1 (Stream x FIFO error interrupt flag  x=7..4)  
 
    .equ DMA1_LIFCR, DMA1_BASE + 0x8 @ (low interrupt flag clear  register) 
        .equ DMA1_LIFCR_CTCIF3, 1 << 27   @ bitWidth 1 (Stream x clear transfer complete  interrupt flag x = 3..0)  
        .equ DMA1_LIFCR_CHTIF3, 1 << 26   @ bitWidth 1 (Stream x clear half transfer interrupt  flag x = 3..0)  
        .equ DMA1_LIFCR_CTEIF3, 1 << 25   @ bitWidth 1 (Stream x clear transfer error interrupt  flag x = 3..0)  
        .equ DMA1_LIFCR_CDMEIF3, 1 << 24   @ bitWidth 1 (Stream x clear direct mode error  interrupt flag x = 3..0)  
        .equ DMA1_LIFCR_CFEIF3, 1 << 22   @ bitWidth 1 (Stream x clear FIFO error interrupt flag  x = 3..0)  
        .equ DMA1_LIFCR_CTCIF2, 1 << 21   @ bitWidth 1 (Stream x clear transfer complete  interrupt flag x = 3..0)  
        .equ DMA1_LIFCR_CHTIF2, 1 << 20   @ bitWidth 1 (Stream x clear half transfer interrupt  flag x = 3..0)  
        .equ DMA1_LIFCR_CTEIF2, 1 << 19   @ bitWidth 1 (Stream x clear transfer error interrupt  flag x = 3..0)  
        .equ DMA1_LIFCR_CDMEIF2, 1 << 18   @ bitWidth 1 (Stream x clear direct mode error  interrupt flag x = 3..0)  
        .equ DMA1_LIFCR_CFEIF2, 1 << 16   @ bitWidth 1 (Stream x clear FIFO error interrupt flag  x = 3..0)  
        .equ DMA1_LIFCR_CTCIF1, 1 << 11   @ bitWidth 1 (Stream x clear transfer complete  interrupt flag x = 3..0)  
        .equ DMA1_LIFCR_CHTIF1, 1 << 10   @ bitWidth 1 (Stream x clear half transfer interrupt  flag x = 3..0)  
        .equ DMA1_LIFCR_CTEIF1, 1 << 9   @ bitWidth 1 (Stream x clear transfer error interrupt  flag x = 3..0)  
        .equ DMA1_LIFCR_CDMEIF1, 1 << 8   @ bitWidth 1 (Stream x clear direct mode error  interrupt flag x = 3..0)  
        .equ DMA1_LIFCR_CFEIF1, 1 << 6   @ bitWidth 1 (Stream x clear FIFO error interrupt flag  x = 3..0)  
        .equ DMA1_LIFCR_CTCIF0, 1 << 5   @ bitWidth 1 (Stream x clear transfer complete  interrupt flag x = 3..0)  
        .equ DMA1_LIFCR_CHTIF0, 1 << 4   @ bitWidth 1 (Stream x clear half transfer interrupt  flag x = 3..0)  
        .equ DMA1_LIFCR_CTEIF0, 1 << 3   @ bitWidth 1 (Stream x clear transfer error interrupt  flag x = 3..0)  
        .equ DMA1_LIFCR_CDMEIF0, 1 << 2   @ bitWidth 1 (Stream x clear direct mode error  interrupt flag x = 3..0)  
        .equ DMA1_LIFCR_CFEIF0, 1 << 0   @ bitWidth 1 (Stream x clear FIFO error interrupt flag  x = 3..0)  
 
    .equ DMA1_HIFCR, DMA1_BASE + 0xC @ (high interrupt flag clear  register) 
        .equ DMA1_HIFCR_CTCIF7, 1 << 27   @ bitWidth 1 (Stream x clear transfer complete  interrupt flag x = 7..4)  
        .equ DMA1_HIFCR_CHTIF7, 1 << 26   @ bitWidth 1 (Stream x clear half transfer interrupt  flag x = 7..4)  
        .equ DMA1_HIFCR_CTEIF7, 1 << 25   @ bitWidth 1 (Stream x clear transfer error interrupt  flag x = 7..4)  
        .equ DMA1_HIFCR_CDMEIF7, 1 << 24   @ bitWidth 1 (Stream x clear direct mode error  interrupt flag x = 7..4)  
        .equ DMA1_HIFCR_CFEIF7, 1 << 22   @ bitWidth 1 (Stream x clear FIFO error interrupt flag  x = 7..4)  
        .equ DMA1_HIFCR_CTCIF6, 1 << 21   @ bitWidth 1 (Stream x clear transfer complete  interrupt flag x = 7..4)  
        .equ DMA1_HIFCR_CHTIF6, 1 << 20   @ bitWidth 1 (Stream x clear half transfer interrupt  flag x = 7..4)  
        .equ DMA1_HIFCR_CTEIF6, 1 << 19   @ bitWidth 1 (Stream x clear transfer error interrupt  flag x = 7..4)  
        .equ DMA1_HIFCR_CDMEIF6, 1 << 18   @ bitWidth 1 (Stream x clear direct mode error  interrupt flag x = 7..4)  
        .equ DMA1_HIFCR_CFEIF6, 1 << 16   @ bitWidth 1 (Stream x clear FIFO error interrupt flag  x = 7..4)  
        .equ DMA1_HIFCR_CTCIF5, 1 << 11   @ bitWidth 1 (Stream x clear transfer complete  interrupt flag x = 7..4)  
        .equ DMA1_HIFCR_CHTIF5, 1 << 10   @ bitWidth 1 (Stream x clear half transfer interrupt  flag x = 7..4)  
        .equ DMA1_HIFCR_CTEIF5, 1 << 9   @ bitWidth 1 (Stream x clear transfer error interrupt  flag x = 7..4)  
        .equ DMA1_HIFCR_CDMEIF5, 1 << 8   @ bitWidth 1 (Stream x clear direct mode error  interrupt flag x = 7..4)  
        .equ DMA1_HIFCR_CFEIF5, 1 << 6   @ bitWidth 1 (Stream x clear FIFO error interrupt flag  x = 7..4)  
        .equ DMA1_HIFCR_CTCIF4, 1 << 5   @ bitWidth 1 (Stream x clear transfer complete  interrupt flag x = 7..4)  
        .equ DMA1_HIFCR_CHTIF4, 1 << 4   @ bitWidth 1 (Stream x clear half transfer interrupt  flag x = 7..4)  
        .equ DMA1_HIFCR_CTEIF4, 1 << 3   @ bitWidth 1 (Stream x clear transfer error interrupt  flag x = 7..4)  
        .equ DMA1_HIFCR_CDMEIF4, 1 << 2   @ bitWidth 1 (Stream x clear direct mode error  interrupt flag x = 7..4)  
        .equ DMA1_HIFCR_CFEIF4, 1 << 0   @ bitWidth 1 (Stream x clear FIFO error interrupt flag  x = 7..4)  
 
    .equ DMA1_S0CR, DMA1_BASE + 0x10 @ (stream x configuration  register) 
        .equ DMA1_S0CR_CHSEL_Shift, 25   @ bitWidth 3 (Channel selection)  
        .equ DMA1_S0CR_MBURST_Shift, 23   @ bitWidth 2 (Memory burst transfer  configuration)  
        .equ DMA1_S0CR_PBURST_Shift, 21   @ bitWidth 2 (Peripheral burst transfer  configuration)  
        .equ DMA1_S0CR_CT, 1 << 19   @ bitWidth 1 (Current target only in double buffer  mode)  
        .equ DMA1_S0CR_DBM, 1 << 18   @ bitWidth 1 (Double buffer mode)  
        .equ DMA1_S0CR_PL_Shift, 16   @ bitWidth 2 (Priority level)  
        .equ DMA1_S0CR_PINCOS, 1 << 15   @ bitWidth 1 (Peripheral increment offset  size)  
        .equ DMA1_S0CR_MSIZE_Shift, 13   @ bitWidth 2 (Memory data size)  
        .equ DMA1_S0CR_PSIZE_Shift, 11   @ bitWidth 2 (Peripheral data size)  
        .equ DMA1_S0CR_MINC, 1 << 10   @ bitWidth 1 (Memory increment mode)  
        .equ DMA1_S0CR_PINC, 1 << 9   @ bitWidth 1 (Peripheral increment mode)  
        .equ DMA1_S0CR_CIRC, 1 << 8   @ bitWidth 1 (Circular mode)  
        .equ DMA1_S0CR_DIR_Shift, 6   @ bitWidth 2 (Data transfer direction)  
        .equ DMA1_S0CR_PFCTRL, 1 << 5   @ bitWidth 1 (Peripheral flow controller)  
        .equ DMA1_S0CR_TCIE, 1 << 4   @ bitWidth 1 (Transfer complete interrupt  enable)  
        .equ DMA1_S0CR_HTIE, 1 << 3   @ bitWidth 1 (Half transfer interrupt  enable)  
        .equ DMA1_S0CR_TEIE, 1 << 2   @ bitWidth 1 (Transfer error interrupt  enable)  
        .equ DMA1_S0CR_DMEIE, 1 << 1   @ bitWidth 1 (Direct mode error interrupt  enable)  
        .equ DMA1_S0CR_EN, 1 << 0   @ bitWidth 1 (Stream enable / flag stream ready when  read low)  
 
    .equ DMA1_S0NDTR, DMA1_BASE + 0x14 @ (stream x number of data  register) 
        .equ DMA1_S0NDTR_NDT_Shift, 0   @ bitWidth 16 (Number of data items to  transfer)  
 
    .equ DMA1_S0PAR, DMA1_BASE + 0x18 @ (stream x peripheral address  register) 
        .equ DMA1_S0PAR_PA_Shift, 0   @ bitWidth 32 (Peripheral address)  
 
    .equ DMA1_S0M0AR, DMA1_BASE + 0x1C @ (stream x memory 0 address  register) 
        .equ DMA1_S0M0AR_M0A_Shift, 0   @ bitWidth 32 (Memory 0 address)  
 
    .equ DMA1_S0M1AR, DMA1_BASE + 0x20 @ (stream x memory 1 address  register) 
        .equ DMA1_S0M1AR_M1A_Shift, 0   @ bitWidth 32 (Memory 1 address used in case of Double  buffer mode)  
 
    .equ DMA1_S0FCR, DMA1_BASE + 0x24 @ (stream x FIFO control register) 
        .equ DMA1_S0FCR_FEIE, 1 << 7   @ bitWidth 1 (FIFO error interrupt  enable)  
        .equ DMA1_S0FCR_FS_Shift, 3   @ bitWidth 3 (FIFO status)  
        .equ DMA1_S0FCR_DMDIS, 1 << 2   @ bitWidth 1 (Direct mode disable)  
        .equ DMA1_S0FCR_FTH_Shift, 0   @ bitWidth 2 (FIFO threshold selection)  
 
    .equ DMA1_S1CR, DMA1_BASE + 0x28 @ (stream x configuration  register) 
        .equ DMA1_S1CR_CHSEL_Shift, 25   @ bitWidth 3 (Channel selection)  
        .equ DMA1_S1CR_MBURST_Shift, 23   @ bitWidth 2 (Memory burst transfer  configuration)  
        .equ DMA1_S1CR_PBURST_Shift, 21   @ bitWidth 2 (Peripheral burst transfer  configuration)  
        .equ DMA1_S1CR_ACK, 1 << 20   @ bitWidth 1 (ACK)  
        .equ DMA1_S1CR_CT, 1 << 19   @ bitWidth 1 (Current target only in double buffer  mode)  
        .equ DMA1_S1CR_DBM, 1 << 18   @ bitWidth 1 (Double buffer mode)  
        .equ DMA1_S1CR_PL_Shift, 16   @ bitWidth 2 (Priority level)  
        .equ DMA1_S1CR_PINCOS, 1 << 15   @ bitWidth 1 (Peripheral increment offset  size)  
        .equ DMA1_S1CR_MSIZE_Shift, 13   @ bitWidth 2 (Memory data size)  
        .equ DMA1_S1CR_PSIZE_Shift, 11   @ bitWidth 2 (Peripheral data size)  
        .equ DMA1_S1CR_MINC, 1 << 10   @ bitWidth 1 (Memory increment mode)  
        .equ DMA1_S1CR_PINC, 1 << 9   @ bitWidth 1 (Peripheral increment mode)  
        .equ DMA1_S1CR_CIRC, 1 << 8   @ bitWidth 1 (Circular mode)  
        .equ DMA1_S1CR_DIR_Shift, 6   @ bitWidth 2 (Data transfer direction)  
        .equ DMA1_S1CR_PFCTRL, 1 << 5   @ bitWidth 1 (Peripheral flow controller)  
        .equ DMA1_S1CR_TCIE, 1 << 4   @ bitWidth 1 (Transfer complete interrupt  enable)  
        .equ DMA1_S1CR_HTIE, 1 << 3   @ bitWidth 1 (Half transfer interrupt  enable)  
        .equ DMA1_S1CR_TEIE, 1 << 2   @ bitWidth 1 (Transfer error interrupt  enable)  
        .equ DMA1_S1CR_DMEIE, 1 << 1   @ bitWidth 1 (Direct mode error interrupt  enable)  
        .equ DMA1_S1CR_EN, 1 << 0   @ bitWidth 1 (Stream enable / flag stream ready when  read low)  
 
    .equ DMA1_S1NDTR, DMA1_BASE + 0x2C @ (stream x number of data  register) 
        .equ DMA1_S1NDTR_NDT_Shift, 0   @ bitWidth 16 (Number of data items to  transfer)  
 
    .equ DMA1_S1PAR, DMA1_BASE + 0x30 @ (stream x peripheral address  register) 
        .equ DMA1_S1PAR_PA_Shift, 0   @ bitWidth 32 (Peripheral address)  
 
    .equ DMA1_S1M0AR, DMA1_BASE + 0x34 @ (stream x memory 0 address  register) 
        .equ DMA1_S1M0AR_M0A_Shift, 0   @ bitWidth 32 (Memory 0 address)  
 
    .equ DMA1_S1M1AR, DMA1_BASE + 0x38 @ (stream x memory 1 address  register) 
        .equ DMA1_S1M1AR_M1A_Shift, 0   @ bitWidth 32 (Memory 1 address used in case of Double  buffer mode)  
 
    .equ DMA1_S1FCR, DMA1_BASE + 0x3C @ (stream x FIFO control register) 
        .equ DMA1_S1FCR_FEIE, 1 << 7   @ bitWidth 1 (FIFO error interrupt  enable)  
        .equ DMA1_S1FCR_FS_Shift, 3   @ bitWidth 3 (FIFO status)  
        .equ DMA1_S1FCR_DMDIS, 1 << 2   @ bitWidth 1 (Direct mode disable)  
        .equ DMA1_S1FCR_FTH_Shift, 0   @ bitWidth 2 (FIFO threshold selection)  
 
    .equ DMA1_S2CR, DMA1_BASE + 0x40 @ (stream x configuration  register) 
        .equ DMA1_S2CR_CHSEL_Shift, 25   @ bitWidth 3 (Channel selection)  
        .equ DMA1_S2CR_MBURST_Shift, 23   @ bitWidth 2 (Memory burst transfer  configuration)  
        .equ DMA1_S2CR_PBURST_Shift, 21   @ bitWidth 2 (Peripheral burst transfer  configuration)  
        .equ DMA1_S2CR_ACK, 1 << 20   @ bitWidth 1 (ACK)  
        .equ DMA1_S2CR_CT, 1 << 19   @ bitWidth 1 (Current target only in double buffer  mode)  
        .equ DMA1_S2CR_DBM, 1 << 18   @ bitWidth 1 (Double buffer mode)  
        .equ DMA1_S2CR_PL_Shift, 16   @ bitWidth 2 (Priority level)  
        .equ DMA1_S2CR_PINCOS, 1 << 15   @ bitWidth 1 (Peripheral increment offset  size)  
        .equ DMA1_S2CR_MSIZE_Shift, 13   @ bitWidth 2 (Memory data size)  
        .equ DMA1_S2CR_PSIZE_Shift, 11   @ bitWidth 2 (Peripheral data size)  
        .equ DMA1_S2CR_MINC, 1 << 10   @ bitWidth 1 (Memory increment mode)  
        .equ DMA1_S2CR_PINC, 1 << 9   @ bitWidth 1 (Peripheral increment mode)  
        .equ DMA1_S2CR_CIRC, 1 << 8   @ bitWidth 1 (Circular mode)  
        .equ DMA1_S2CR_DIR_Shift, 6   @ bitWidth 2 (Data transfer direction)  
        .equ DMA1_S2CR_PFCTRL, 1 << 5   @ bitWidth 1 (Peripheral flow controller)  
        .equ DMA1_S2CR_TCIE, 1 << 4   @ bitWidth 1 (Transfer complete interrupt  enable)  
        .equ DMA1_S2CR_HTIE, 1 << 3   @ bitWidth 1 (Half transfer interrupt  enable)  
        .equ DMA1_S2CR_TEIE, 1 << 2   @ bitWidth 1 (Transfer error interrupt  enable)  
        .equ DMA1_S2CR_DMEIE, 1 << 1   @ bitWidth 1 (Direct mode error interrupt  enable)  
        .equ DMA1_S2CR_EN, 1 << 0   @ bitWidth 1 (Stream enable / flag stream ready when  read low)  
 
    .equ DMA1_S2NDTR, DMA1_BASE + 0x44 @ (stream x number of data  register) 
        .equ DMA1_S2NDTR_NDT_Shift, 0   @ bitWidth 16 (Number of data items to  transfer)  
 
    .equ DMA1_S2PAR, DMA1_BASE + 0x48 @ (stream x peripheral address  register) 
        .equ DMA1_S2PAR_PA_Shift, 0   @ bitWidth 32 (Peripheral address)  
 
    .equ DMA1_S2M0AR, DMA1_BASE + 0x4C @ (stream x memory 0 address  register) 
        .equ DMA1_S2M0AR_M0A_Shift, 0   @ bitWidth 32 (Memory 0 address)  
 
    .equ DMA1_S2M1AR, DMA1_BASE + 0x50 @ (stream x memory 1 address  register) 
        .equ DMA1_S2M1AR_M1A_Shift, 0   @ bitWidth 32 (Memory 1 address used in case of Double  buffer mode)  
 
    .equ DMA1_S2FCR, DMA1_BASE + 0x54 @ (stream x FIFO control register) 
        .equ DMA1_S2FCR_FEIE, 1 << 7   @ bitWidth 1 (FIFO error interrupt  enable)  
        .equ DMA1_S2FCR_FS_Shift, 3   @ bitWidth 3 (FIFO status)  
        .equ DMA1_S2FCR_DMDIS, 1 << 2   @ bitWidth 1 (Direct mode disable)  
        .equ DMA1_S2FCR_FTH_Shift, 0   @ bitWidth 2 (FIFO threshold selection)  
 
    .equ DMA1_S3CR, DMA1_BASE + 0x58 @ (stream x configuration  register) 
        .equ DMA1_S3CR_CHSEL_Shift, 25   @ bitWidth 3 (Channel selection)  
        .equ DMA1_S3CR_MBURST_Shift, 23   @ bitWidth 2 (Memory burst transfer  configuration)  
        .equ DMA1_S3CR_PBURST_Shift, 21   @ bitWidth 2 (Peripheral burst transfer  configuration)  
        .equ DMA1_S3CR_ACK, 1 << 20   @ bitWidth 1 (ACK)  
        .equ DMA1_S3CR_CT, 1 << 19   @ bitWidth 1 (Current target only in double buffer  mode)  
        .equ DMA1_S3CR_DBM, 1 << 18   @ bitWidth 1 (Double buffer mode)  
        .equ DMA1_S3CR_PL_Shift, 16   @ bitWidth 2 (Priority level)  
        .equ DMA1_S3CR_PINCOS, 1 << 15   @ bitWidth 1 (Peripheral increment offset  size)  
        .equ DMA1_S3CR_MSIZE_Shift, 13   @ bitWidth 2 (Memory data size)  
        .equ DMA1_S3CR_PSIZE_Shift, 11   @ bitWidth 2 (Peripheral data size)  
        .equ DMA1_S3CR_MINC, 1 << 10   @ bitWidth 1 (Memory increment mode)  
        .equ DMA1_S3CR_PINC, 1 << 9   @ bitWidth 1 (Peripheral increment mode)  
        .equ DMA1_S3CR_CIRC, 1 << 8   @ bitWidth 1 (Circular mode)  
        .equ DMA1_S3CR_DIR_Shift, 6   @ bitWidth 2 (Data transfer direction)  
        .equ DMA1_S3CR_PFCTRL, 1 << 5   @ bitWidth 1 (Peripheral flow controller)  
        .equ DMA1_S3CR_TCIE, 1 << 4   @ bitWidth 1 (Transfer complete interrupt  enable)  
        .equ DMA1_S3CR_HTIE, 1 << 3   @ bitWidth 1 (Half transfer interrupt  enable)  
        .equ DMA1_S3CR_TEIE, 1 << 2   @ bitWidth 1 (Transfer error interrupt  enable)  
        .equ DMA1_S3CR_DMEIE, 1 << 1   @ bitWidth 1 (Direct mode error interrupt  enable)  
        .equ DMA1_S3CR_EN, 1 << 0   @ bitWidth 1 (Stream enable / flag stream ready when  read low)  
 
    .equ DMA1_S3NDTR, DMA1_BASE + 0x5C @ (stream x number of data  register) 
        .equ DMA1_S3NDTR_NDT_Shift, 0   @ bitWidth 16 (Number of data items to  transfer)  
 
    .equ DMA1_S3PAR, DMA1_BASE + 0x60 @ (stream x peripheral address  register) 
        .equ DMA1_S3PAR_PA_Shift, 0   @ bitWidth 32 (Peripheral address)  
 
    .equ DMA1_S3M0AR, DMA1_BASE + 0x64 @ (stream x memory 0 address  register) 
        .equ DMA1_S3M0AR_M0A_Shift, 0   @ bitWidth 32 (Memory 0 address)  
 
    .equ DMA1_S3M1AR, DMA1_BASE + 0x68 @ (stream x memory 1 address  register) 
        .equ DMA1_S3M1AR_M1A_Shift, 0   @ bitWidth 32 (Memory 1 address used in case of Double  buffer mode)  
 
    .equ DMA1_S3FCR, DMA1_BASE + 0x6C @ (stream x FIFO control register) 
        .equ DMA1_S3FCR_FEIE, 1 << 7   @ bitWidth 1 (FIFO error interrupt  enable)  
        .equ DMA1_S3FCR_FS_Shift, 3   @ bitWidth 3 (FIFO status)  
        .equ DMA1_S3FCR_DMDIS, 1 << 2   @ bitWidth 1 (Direct mode disable)  
        .equ DMA1_S3FCR_FTH_Shift, 0   @ bitWidth 2 (FIFO threshold selection)  
 
    .equ DMA1_S4CR, DMA1_BASE + 0x70 @ (stream x configuration  register) 
        .equ DMA1_S4CR_CHSEL_Shift, 25   @ bitWidth 3 (Channel selection)  
        .equ DMA1_S4CR_MBURST_Shift, 23   @ bitWidth 2 (Memory burst transfer  configuration)  
        .equ DMA1_S4CR_PBURST_Shift, 21   @ bitWidth 2 (Peripheral burst transfer  configuration)  
        .equ DMA1_S4CR_ACK, 1 << 20   @ bitWidth 1 (ACK)  
        .equ DMA1_S4CR_CT, 1 << 19   @ bitWidth 1 (Current target only in double buffer  mode)  
        .equ DMA1_S4CR_DBM, 1 << 18   @ bitWidth 1 (Double buffer mode)  
        .equ DMA1_S4CR_PL_Shift, 16   @ bitWidth 2 (Priority level)  
        .equ DMA1_S4CR_PINCOS, 1 << 15   @ bitWidth 1 (Peripheral increment offset  size)  
        .equ DMA1_S4CR_MSIZE_Shift, 13   @ bitWidth 2 (Memory data size)  
        .equ DMA1_S4CR_PSIZE_Shift, 11   @ bitWidth 2 (Peripheral data size)  
        .equ DMA1_S4CR_MINC, 1 << 10   @ bitWidth 1 (Memory increment mode)  
        .equ DMA1_S4CR_PINC, 1 << 9   @ bitWidth 1 (Peripheral increment mode)  
        .equ DMA1_S4CR_CIRC, 1 << 8   @ bitWidth 1 (Circular mode)  
        .equ DMA1_S4CR_DIR_Shift, 6   @ bitWidth 2 (Data transfer direction)  
        .equ DMA1_S4CR_PFCTRL, 1 << 5   @ bitWidth 1 (Peripheral flow controller)  
        .equ DMA1_S4CR_TCIE, 1 << 4   @ bitWidth 1 (Transfer complete interrupt  enable)  
        .equ DMA1_S4CR_HTIE, 1 << 3   @ bitWidth 1 (Half transfer interrupt  enable)  
        .equ DMA1_S4CR_TEIE, 1 << 2   @ bitWidth 1 (Transfer error interrupt  enable)  
        .equ DMA1_S4CR_DMEIE, 1 << 1   @ bitWidth 1 (Direct mode error interrupt  enable)  
        .equ DMA1_S4CR_EN, 1 << 0   @ bitWidth 1 (Stream enable / flag stream ready when  read low)  
 
    .equ DMA1_S4NDTR, DMA1_BASE + 0x74 @ (stream x number of data  register) 
        .equ DMA1_S4NDTR_NDT_Shift, 0   @ bitWidth 16 (Number of data items to  transfer)  
 
    .equ DMA1_S4PAR, DMA1_BASE + 0x78 @ (stream x peripheral address  register) 
        .equ DMA1_S4PAR_PA_Shift, 0   @ bitWidth 32 (Peripheral address)  
 
    .equ DMA1_S4M0AR, DMA1_BASE + 0x7C @ (stream x memory 0 address  register) 
        .equ DMA1_S4M0AR_M0A_Shift, 0   @ bitWidth 32 (Memory 0 address)  
 
    .equ DMA1_S4M1AR, DMA1_BASE + 0x80 @ (stream x memory 1 address  register) 
        .equ DMA1_S4M1AR_M1A_Shift, 0   @ bitWidth 32 (Memory 1 address used in case of Double  buffer mode)  
 
    .equ DMA1_S4FCR, DMA1_BASE + 0x84 @ (stream x FIFO control register) 
        .equ DMA1_S4FCR_FEIE, 1 << 7   @ bitWidth 1 (FIFO error interrupt  enable)  
        .equ DMA1_S4FCR_FS_Shift, 3   @ bitWidth 3 (FIFO status)  
        .equ DMA1_S4FCR_DMDIS, 1 << 2   @ bitWidth 1 (Direct mode disable)  
        .equ DMA1_S4FCR_FTH_Shift, 0   @ bitWidth 2 (FIFO threshold selection)  
 
    .equ DMA1_S5CR, DMA1_BASE + 0x88 @ (stream x configuration  register) 
        .equ DMA1_S5CR_CHSEL_Shift, 25   @ bitWidth 3 (Channel selection)  
        .equ DMA1_S5CR_MBURST_Shift, 23   @ bitWidth 2 (Memory burst transfer  configuration)  
        .equ DMA1_S5CR_PBURST_Shift, 21   @ bitWidth 2 (Peripheral burst transfer  configuration)  
        .equ DMA1_S5CR_ACK, 1 << 20   @ bitWidth 1 (ACK)  
        .equ DMA1_S5CR_CT, 1 << 19   @ bitWidth 1 (Current target only in double buffer  mode)  
        .equ DMA1_S5CR_DBM, 1 << 18   @ bitWidth 1 (Double buffer mode)  
        .equ DMA1_S5CR_PL_Shift, 16   @ bitWidth 2 (Priority level)  
        .equ DMA1_S5CR_PINCOS, 1 << 15   @ bitWidth 1 (Peripheral increment offset  size)  
        .equ DMA1_S5CR_MSIZE_Shift, 13   @ bitWidth 2 (Memory data size)  
        .equ DMA1_S5CR_PSIZE_Shift, 11   @ bitWidth 2 (Peripheral data size)  
        .equ DMA1_S5CR_MINC, 1 << 10   @ bitWidth 1 (Memory increment mode)  
        .equ DMA1_S5CR_PINC, 1 << 9   @ bitWidth 1 (Peripheral increment mode)  
        .equ DMA1_S5CR_CIRC, 1 << 8   @ bitWidth 1 (Circular mode)  
        .equ DMA1_S5CR_DIR_Shift, 6   @ bitWidth 2 (Data transfer direction)  
        .equ DMA1_S5CR_PFCTRL, 1 << 5   @ bitWidth 1 (Peripheral flow controller)  
        .equ DMA1_S5CR_TCIE, 1 << 4   @ bitWidth 1 (Transfer complete interrupt  enable)  
        .equ DMA1_S5CR_HTIE, 1 << 3   @ bitWidth 1 (Half transfer interrupt  enable)  
        .equ DMA1_S5CR_TEIE, 1 << 2   @ bitWidth 1 (Transfer error interrupt  enable)  
        .equ DMA1_S5CR_DMEIE, 1 << 1   @ bitWidth 1 (Direct mode error interrupt  enable)  
        .equ DMA1_S5CR_EN, 1 << 0   @ bitWidth 1 (Stream enable / flag stream ready when  read low)  
 
    .equ DMA1_S5NDTR, DMA1_BASE + 0x8C @ (stream x number of data  register) 
        .equ DMA1_S5NDTR_NDT_Shift, 0   @ bitWidth 16 (Number of data items to  transfer)  
 
    .equ DMA1_S5PAR, DMA1_BASE + 0x90 @ (stream x peripheral address  register) 
        .equ DMA1_S5PAR_PA_Shift, 0   @ bitWidth 32 (Peripheral address)  
 
    .equ DMA1_S5M0AR, DMA1_BASE + 0x94 @ (stream x memory 0 address  register) 
        .equ DMA1_S5M0AR_M0A_Shift, 0   @ bitWidth 32 (Memory 0 address)  
 
    .equ DMA1_S5M1AR, DMA1_BASE + 0x98 @ (stream x memory 1 address  register) 
        .equ DMA1_S5M1AR_M1A_Shift, 0   @ bitWidth 32 (Memory 1 address used in case of Double  buffer mode)  
 
    .equ DMA1_S5FCR, DMA1_BASE + 0x9C @ (stream x FIFO control register) 
        .equ DMA1_S5FCR_FEIE, 1 << 7   @ bitWidth 1 (FIFO error interrupt  enable)  
        .equ DMA1_S5FCR_FS_Shift, 3   @ bitWidth 3 (FIFO status)  
        .equ DMA1_S5FCR_DMDIS, 1 << 2   @ bitWidth 1 (Direct mode disable)  
        .equ DMA1_S5FCR_FTH_Shift, 0   @ bitWidth 2 (FIFO threshold selection)  
 
    .equ DMA1_S6CR, DMA1_BASE + 0xA0 @ (stream x configuration  register) 
        .equ DMA1_S6CR_CHSEL_Shift, 25   @ bitWidth 3 (Channel selection)  
        .equ DMA1_S6CR_MBURST_Shift, 23   @ bitWidth 2 (Memory burst transfer  configuration)  
        .equ DMA1_S6CR_PBURST_Shift, 21   @ bitWidth 2 (Peripheral burst transfer  configuration)  
        .equ DMA1_S6CR_ACK, 1 << 20   @ bitWidth 1 (ACK)  
        .equ DMA1_S6CR_CT, 1 << 19   @ bitWidth 1 (Current target only in double buffer  mode)  
        .equ DMA1_S6CR_DBM, 1 << 18   @ bitWidth 1 (Double buffer mode)  
        .equ DMA1_S6CR_PL_Shift, 16   @ bitWidth 2 (Priority level)  
        .equ DMA1_S6CR_PINCOS, 1 << 15   @ bitWidth 1 (Peripheral increment offset  size)  
        .equ DMA1_S6CR_MSIZE_Shift, 13   @ bitWidth 2 (Memory data size)  
        .equ DMA1_S6CR_PSIZE_Shift, 11   @ bitWidth 2 (Peripheral data size)  
        .equ DMA1_S6CR_MINC, 1 << 10   @ bitWidth 1 (Memory increment mode)  
        .equ DMA1_S6CR_PINC, 1 << 9   @ bitWidth 1 (Peripheral increment mode)  
        .equ DMA1_S6CR_CIRC, 1 << 8   @ bitWidth 1 (Circular mode)  
        .equ DMA1_S6CR_DIR_Shift, 6   @ bitWidth 2 (Data transfer direction)  
        .equ DMA1_S6CR_PFCTRL, 1 << 5   @ bitWidth 1 (Peripheral flow controller)  
        .equ DMA1_S6CR_TCIE, 1 << 4   @ bitWidth 1 (Transfer complete interrupt  enable)  
        .equ DMA1_S6CR_HTIE, 1 << 3   @ bitWidth 1 (Half transfer interrupt  enable)  
        .equ DMA1_S6CR_TEIE, 1 << 2   @ bitWidth 1 (Transfer error interrupt  enable)  
        .equ DMA1_S6CR_DMEIE, 1 << 1   @ bitWidth 1 (Direct mode error interrupt  enable)  
        .equ DMA1_S6CR_EN, 1 << 0   @ bitWidth 1 (Stream enable / flag stream ready when  read low)  
 
    .equ DMA1_S6NDTR, DMA1_BASE + 0xA4 @ (stream x number of data  register) 
        .equ DMA1_S6NDTR_NDT_Shift, 0   @ bitWidth 16 (Number of data items to  transfer)  
 
    .equ DMA1_S6PAR, DMA1_BASE + 0xA8 @ (stream x peripheral address  register) 
        .equ DMA1_S6PAR_PA_Shift, 0   @ bitWidth 32 (Peripheral address)  
 
    .equ DMA1_S6M0AR, DMA1_BASE + 0xAC @ (stream x memory 0 address  register) 
        .equ DMA1_S6M0AR_M0A_Shift, 0   @ bitWidth 32 (Memory 0 address)  
 
    .equ DMA1_S6M1AR, DMA1_BASE + 0xB0 @ (stream x memory 1 address  register) 
        .equ DMA1_S6M1AR_M1A_Shift, 0   @ bitWidth 32 (Memory 1 address used in case of Double  buffer mode)  
 
    .equ DMA1_S6FCR, DMA1_BASE + 0xB4 @ (stream x FIFO control register) 
        .equ DMA1_S6FCR_FEIE, 1 << 7   @ bitWidth 1 (FIFO error interrupt  enable)  
        .equ DMA1_S6FCR_FS_Shift, 3   @ bitWidth 3 (FIFO status)  
        .equ DMA1_S6FCR_DMDIS, 1 << 2   @ bitWidth 1 (Direct mode disable)  
        .equ DMA1_S6FCR_FTH_Shift, 0   @ bitWidth 2 (FIFO threshold selection)  
 
    .equ DMA1_S7CR, DMA1_BASE + 0xB8 @ (stream x configuration  register) 
        .equ DMA1_S7CR_CHSEL_Shift, 25   @ bitWidth 3 (Channel selection)  
        .equ DMA1_S7CR_MBURST_Shift, 23   @ bitWidth 2 (Memory burst transfer  configuration)  
        .equ DMA1_S7CR_PBURST_Shift, 21   @ bitWidth 2 (Peripheral burst transfer  configuration)  
        .equ DMA1_S7CR_ACK, 1 << 20   @ bitWidth 1 (ACK)  
        .equ DMA1_S7CR_CT, 1 << 19   @ bitWidth 1 (Current target only in double buffer  mode)  
        .equ DMA1_S7CR_DBM, 1 << 18   @ bitWidth 1 (Double buffer mode)  
        .equ DMA1_S7CR_PL_Shift, 16   @ bitWidth 2 (Priority level)  
        .equ DMA1_S7CR_PINCOS, 1 << 15   @ bitWidth 1 (Peripheral increment offset  size)  
        .equ DMA1_S7CR_MSIZE_Shift, 13   @ bitWidth 2 (Memory data size)  
        .equ DMA1_S7CR_PSIZE_Shift, 11   @ bitWidth 2 (Peripheral data size)  
        .equ DMA1_S7CR_MINC, 1 << 10   @ bitWidth 1 (Memory increment mode)  
        .equ DMA1_S7CR_PINC, 1 << 9   @ bitWidth 1 (Peripheral increment mode)  
        .equ DMA1_S7CR_CIRC, 1 << 8   @ bitWidth 1 (Circular mode)  
        .equ DMA1_S7CR_DIR_Shift, 6   @ bitWidth 2 (Data transfer direction)  
        .equ DMA1_S7CR_PFCTRL, 1 << 5   @ bitWidth 1 (Peripheral flow controller)  
        .equ DMA1_S7CR_TCIE, 1 << 4   @ bitWidth 1 (Transfer complete interrupt  enable)  
        .equ DMA1_S7CR_HTIE, 1 << 3   @ bitWidth 1 (Half transfer interrupt  enable)  
        .equ DMA1_S7CR_TEIE, 1 << 2   @ bitWidth 1 (Transfer error interrupt  enable)  
        .equ DMA1_S7CR_DMEIE, 1 << 1   @ bitWidth 1 (Direct mode error interrupt  enable)  
        .equ DMA1_S7CR_EN, 1 << 0   @ bitWidth 1 (Stream enable / flag stream ready when  read low)  
 
    .equ DMA1_S7NDTR, DMA1_BASE + 0xBC @ (stream x number of data  register) 
        .equ DMA1_S7NDTR_NDT_Shift, 0   @ bitWidth 16 (Number of data items to  transfer)  
 
    .equ DMA1_S7PAR, DMA1_BASE + 0xC0 @ (stream x peripheral address  register) 
        .equ DMA1_S7PAR_PA_Shift, 0   @ bitWidth 32 (Peripheral address)  
 
    .equ DMA1_S7M0AR, DMA1_BASE + 0xC4 @ (stream x memory 0 address  register) 
        .equ DMA1_S7M0AR_M0A_Shift, 0   @ bitWidth 32 (Memory 0 address)  
 
    .equ DMA1_S7M1AR, DMA1_BASE + 0xC8 @ (stream x memory 1 address  register) 
        .equ DMA1_S7M1AR_M1A_Shift, 0   @ bitWidth 32 (Memory 1 address used in case of Double  buffer mode)  
 
    .equ DMA1_S7FCR, DMA1_BASE + 0xCC @ (stream x FIFO control register) 
        .equ DMA1_S7FCR_FEIE, 1 << 7   @ bitWidth 1 (FIFO error interrupt  enable)  
        .equ DMA1_S7FCR_FS_Shift, 3   @ bitWidth 3 (FIFO status)  
        .equ DMA1_S7FCR_DMDIS, 1 << 2   @ bitWidth 1 (Direct mode disable)  
        .equ DMA1_S7FCR_FTH_Shift, 0   @ bitWidth 2 (FIFO threshold selection)  
 

@=========================== RCC ===========================@
.equ RCC_BASE, 0x40023800 @ (Reset and clock control) 
    .equ RCC_CR, RCC_BASE + 0x0 @ (clock control register) 
        .equ RCC_CR_PLLI2SRDY, 1 << 27   @ bitWidth 1 (PLLI2S clock ready flag)  
        .equ RCC_CR_PLLI2SON, 1 << 26   @ bitWidth 1 (PLLI2S enable)  
        .equ RCC_CR_PLLRDY, 1 << 25   @ bitWidth 1 (Main PLL PLL clock ready  flag)  
        .equ RCC_CR_PLLON, 1 << 24   @ bitWidth 1 (Main PLL PLL enable)  
        .equ RCC_CR_CSSON, 1 << 19   @ bitWidth 1 (Clock security system  enable)  
        .equ RCC_CR_HSEBYP, 1 << 18   @ bitWidth 1 (HSE clock bypass)  
        .equ RCC_CR_HSERDY, 1 << 17   @ bitWidth 1 (HSE clock ready flag)  
        .equ RCC_CR_HSEON, 1 << 16   @ bitWidth 1 (HSE clock enable)  
        .equ RCC_CR_HSICAL_Shift, 8   @ bitWidth 8 (Internal high-speed clock  calibration)  
        .equ RCC_CR_HSITRIM_Shift, 3   @ bitWidth 5 (Internal high-speed clock  trimming)  
        .equ RCC_CR_HSIRDY, 1 << 1   @ bitWidth 1 (Internal high-speed clock ready  flag)  
        .equ RCC_CR_HSION, 1 << 0   @ bitWidth 1 (Internal high-speed clock  enable)  
 
    .equ RCC_PLLCFGR, RCC_BASE + 0x4 @ (PLL configuration register) 
        .equ RCC_PLLCFGR_PLLQ3, 1 << 27   @ bitWidth 1 (Main PLL PLL division factor for USB  OTG FS, SDIO and random number generator  clocks)  
        .equ RCC_PLLCFGR_PLLQ2, 1 << 26   @ bitWidth 1 (Main PLL PLL division factor for USB  OTG FS, SDIO and random number generator  clocks)  
        .equ RCC_PLLCFGR_PLLQ1, 1 << 25   @ bitWidth 1 (Main PLL PLL division factor for USB  OTG FS, SDIO and random number generator  clocks)  
        .equ RCC_PLLCFGR_PLLQ0, 1 << 24   @ bitWidth 1 (Main PLL PLL division factor for USB  OTG FS, SDIO and random number generator  clocks)  
        .equ RCC_PLLCFGR_PLLSRC, 1 << 22   @ bitWidth 1 (Main PLLPLL and audio PLL PLLI2S  entry clock source)  
        .equ RCC_PLLCFGR_PLLP1, 1 << 17   @ bitWidth 1 (Main PLL PLL division factor for main  system clock)  
        .equ RCC_PLLCFGR_PLLP0, 1 << 16   @ bitWidth 1 (Main PLL PLL division factor for main  system clock)  
        .equ RCC_PLLCFGR_PLLN8, 1 << 14   @ bitWidth 1 (Main PLL PLL multiplication factor for  VCO)  
        .equ RCC_PLLCFGR_PLLN7, 1 << 13   @ bitWidth 1 (Main PLL PLL multiplication factor for  VCO)  
        .equ RCC_PLLCFGR_PLLN6, 1 << 12   @ bitWidth 1 (Main PLL PLL multiplication factor for  VCO)  
        .equ RCC_PLLCFGR_PLLN5, 1 << 11   @ bitWidth 1 (Main PLL PLL multiplication factor for  VCO)  
        .equ RCC_PLLCFGR_PLLN4, 1 << 10   @ bitWidth 1 (Main PLL PLL multiplication factor for  VCO)  
        .equ RCC_PLLCFGR_PLLN3, 1 << 9   @ bitWidth 1 (Main PLL PLL multiplication factor for  VCO)  
        .equ RCC_PLLCFGR_PLLN2, 1 << 8   @ bitWidth 1 (Main PLL PLL multiplication factor for  VCO)  
        .equ RCC_PLLCFGR_PLLN1, 1 << 7   @ bitWidth 1 (Main PLL PLL multiplication factor for  VCO)  
        .equ RCC_PLLCFGR_PLLN0, 1 << 6   @ bitWidth 1 (Main PLL PLL multiplication factor for  VCO)  
        .equ RCC_PLLCFGR_PLLM5, 1 << 5   @ bitWidth 1 (Division factor for the main PLL PLL  and audio PLL PLLI2S input clock)  
        .equ RCC_PLLCFGR_PLLM4, 1 << 4   @ bitWidth 1 (Division factor for the main PLL PLL  and audio PLL PLLI2S input clock)  
        .equ RCC_PLLCFGR_PLLM3, 1 << 3   @ bitWidth 1 (Division factor for the main PLL PLL  and audio PLL PLLI2S input clock)  
        .equ RCC_PLLCFGR_PLLM2, 1 << 2   @ bitWidth 1 (Division factor for the main PLL PLL  and audio PLL PLLI2S input clock)  
        .equ RCC_PLLCFGR_PLLM1, 1 << 1   @ bitWidth 1 (Division factor for the main PLL PLL  and audio PLL PLLI2S input clock)  
        .equ RCC_PLLCFGR_PLLM0, 1 << 0   @ bitWidth 1 (Division factor for the main PLL PLL  and audio PLL PLLI2S input clock)  
 
    .equ RCC_CFGR, RCC_BASE + 0x8 @ (clock configuration register) 
        .equ RCC_CFGR_MCO2_Shift, 30   @ bitWidth 2 (Microcontroller clock output  2)  
        .equ RCC_CFGR_MCO2PRE_Shift, 27   @ bitWidth 3 (MCO2 prescaler)  
        .equ RCC_CFGR_MCO1PRE_Shift, 24   @ bitWidth 3 (MCO1 prescaler)  
        .equ RCC_CFGR_I2SSRC, 1 << 23   @ bitWidth 1 (I2S clock selection)  
        .equ RCC_CFGR_MCO1_Shift, 21   @ bitWidth 2 (Microcontroller clock output  1)  
        .equ RCC_CFGR_RTCPRE_Shift, 16   @ bitWidth 5 (HSE division factor for RTC  clock)  
        .equ RCC_CFGR_PPRE2_Shift, 13   @ bitWidth 3 (APB high-speed prescaler  APB2)  
        .equ RCC_CFGR_PPRE1_Shift, 10   @ bitWidth 3 (APB Low speed prescaler  APB1)  
        .equ RCC_CFGR_HPRE_Shift, 4   @ bitWidth 4 (AHB prescaler)  
        .equ RCC_CFGR_SWS1, 1 << 3   @ bitWidth 1 (System clock switch status)  
        .equ RCC_CFGR_SWS0, 1 << 2   @ bitWidth 1 (System clock switch status)  
        .equ RCC_CFGR_SW1, 1 << 1   @ bitWidth 1 (System clock switch)  
        .equ RCC_CFGR_SW0, 1 << 0   @ bitWidth 1 (System clock switch)  
 
    .equ RCC_CIR, RCC_BASE + 0xC @ (clock interrupt register) 
        .equ RCC_CIR_CSSC, 1 << 23   @ bitWidth 1 (Clock security system interrupt  clear)  
        .equ RCC_CIR_PLLI2SRDYC, 1 << 21   @ bitWidth 1 (PLLI2S ready interrupt  clear)  
        .equ RCC_CIR_PLLRDYC, 1 << 20   @ bitWidth 1 (Main PLLPLL ready interrupt  clear)  
        .equ RCC_CIR_HSERDYC, 1 << 19   @ bitWidth 1 (HSE ready interrupt clear)  
        .equ RCC_CIR_HSIRDYC, 1 << 18   @ bitWidth 1 (HSI ready interrupt clear)  
        .equ RCC_CIR_LSERDYC, 1 << 17   @ bitWidth 1 (LSE ready interrupt clear)  
        .equ RCC_CIR_LSIRDYC, 1 << 16   @ bitWidth 1 (LSI ready interrupt clear)  
        .equ RCC_CIR_PLLI2SRDYIE, 1 << 13   @ bitWidth 1 (PLLI2S ready interrupt  enable)  
        .equ RCC_CIR_PLLRDYIE, 1 << 12   @ bitWidth 1 (Main PLL PLL ready interrupt  enable)  
        .equ RCC_CIR_HSERDYIE, 1 << 11   @ bitWidth 1 (HSE ready interrupt enable)  
        .equ RCC_CIR_HSIRDYIE, 1 << 10   @ bitWidth 1 (HSI ready interrupt enable)  
        .equ RCC_CIR_LSERDYIE, 1 << 9   @ bitWidth 1 (LSE ready interrupt enable)  
        .equ RCC_CIR_LSIRDYIE, 1 << 8   @ bitWidth 1 (LSI ready interrupt enable)  
        .equ RCC_CIR_CSSF, 1 << 7   @ bitWidth 1 (Clock security system interrupt  flag)  
        .equ RCC_CIR_PLLI2SRDYF, 1 << 5   @ bitWidth 1 (PLLI2S ready interrupt  flag)  
        .equ RCC_CIR_PLLRDYF, 1 << 4   @ bitWidth 1 (Main PLL PLL ready interrupt  flag)  
        .equ RCC_CIR_HSERDYF, 1 << 3   @ bitWidth 1 (HSE ready interrupt flag)  
        .equ RCC_CIR_HSIRDYF, 1 << 2   @ bitWidth 1 (HSI ready interrupt flag)  
        .equ RCC_CIR_LSERDYF, 1 << 1   @ bitWidth 1 (LSE ready interrupt flag)  
        .equ RCC_CIR_LSIRDYF, 1 << 0   @ bitWidth 1 (LSI ready interrupt flag)  
 
    .equ RCC_AHB1RSTR, RCC_BASE + 0x10 @ (AHB1 peripheral reset register) 
        .equ RCC_AHB1RSTR_OTGHSRST, 1 << 29   @ bitWidth 1 (USB OTG HS module reset)  
        .equ RCC_AHB1RSTR_ETHMACRST, 1 << 25   @ bitWidth 1 (Ethernet MAC reset)  
        .equ RCC_AHB1RSTR_DMA2RST, 1 << 22   @ bitWidth 1 (DMA2 reset)  
        .equ RCC_AHB1RSTR_DMA1RST, 1 << 21   @ bitWidth 1 (DMA2 reset)  
        .equ RCC_AHB1RSTR_CRCRST, 1 << 12   @ bitWidth 1 (CRC reset)  
        .equ RCC_AHB1RSTR_GPIOIRST, 1 << 8   @ bitWidth 1 (IO port I reset)  
        .equ RCC_AHB1RSTR_GPIOHRST, 1 << 7   @ bitWidth 1 (IO port H reset)  
        .equ RCC_AHB1RSTR_GPIOGRST, 1 << 6   @ bitWidth 1 (IO port G reset)  
        .equ RCC_AHB1RSTR_GPIOFRST, 1 << 5   @ bitWidth 1 (IO port F reset)  
        .equ RCC_AHB1RSTR_GPIOERST, 1 << 4   @ bitWidth 1 (IO port E reset)  
        .equ RCC_AHB1RSTR_GPIODRST, 1 << 3   @ bitWidth 1 (IO port D reset)  
        .equ RCC_AHB1RSTR_GPIOCRST, 1 << 2   @ bitWidth 1 (IO port C reset)  
        .equ RCC_AHB1RSTR_GPIOBRST, 1 << 1   @ bitWidth 1 (IO port B reset)  
        .equ RCC_AHB1RSTR_GPIOARST, 1 << 0   @ bitWidth 1 (IO port A reset)  
 
    .equ RCC_AHB2RSTR, RCC_BASE + 0x14 @ (AHB2 peripheral reset register) 
        .equ RCC_AHB2RSTR_OTGFSRST, 1 << 7   @ bitWidth 1 (USB OTG FS module reset)  
        .equ RCC_AHB2RSTR_RNGRST, 1 << 6   @ bitWidth 1 (Random number generator module  reset)  
        .equ RCC_AHB2RSTR_DCMIRST, 1 << 0   @ bitWidth 1 (Camera interface reset)  
 
    .equ RCC_AHB3RSTR, RCC_BASE + 0x18 @ (AHB3 peripheral reset register) 
        .equ RCC_AHB3RSTR_FSMCRST, 1 << 0   @ bitWidth 1 (Flexible static memory controller module  reset)  
 
    .equ RCC_APB1RSTR, RCC_BASE + 0x20 @ (APB1 peripheral reset register) 
        .equ RCC_APB1RSTR_DACRST, 1 << 29   @ bitWidth 1 (DAC reset)  
        .equ RCC_APB1RSTR_PWRRST, 1 << 28   @ bitWidth 1 (Power interface reset)  
        .equ RCC_APB1RSTR_CAN2RST, 1 << 26   @ bitWidth 1 (CAN2 reset)  
        .equ RCC_APB1RSTR_CAN1RST, 1 << 25   @ bitWidth 1 (CAN1 reset)  
        .equ RCC_APB1RSTR_I2C3RST, 1 << 23   @ bitWidth 1 (I2C3 reset)  
        .equ RCC_APB1RSTR_I2C2RST, 1 << 22   @ bitWidth 1 (I2C 2 reset)  
        .equ RCC_APB1RSTR_I2C1RST, 1 << 21   @ bitWidth 1 (I2C 1 reset)  
        .equ RCC_APB1RSTR_UART5RST, 1 << 20   @ bitWidth 1 (USART 5 reset)  
        .equ RCC_APB1RSTR_UART4RST, 1 << 19   @ bitWidth 1 (USART 4 reset)  
        .equ RCC_APB1RSTR_UART3RST, 1 << 18   @ bitWidth 1 (USART 3 reset)  
        .equ RCC_APB1RSTR_UART2RST, 1 << 17   @ bitWidth 1 (USART 2 reset)  
        .equ RCC_APB1RSTR_SPI3RST, 1 << 15   @ bitWidth 1 (SPI 3 reset)  
        .equ RCC_APB1RSTR_SPI2RST, 1 << 14   @ bitWidth 1 (SPI 2 reset)  
        .equ RCC_APB1RSTR_WWDGRST, 1 << 11   @ bitWidth 1 (Window watchdog reset)  
        .equ RCC_APB1RSTR_TIM14RST, 1 << 8   @ bitWidth 1 (TIM14 reset)  
        .equ RCC_APB1RSTR_TIM13RST, 1 << 7   @ bitWidth 1 (TIM13 reset)  
        .equ RCC_APB1RSTR_TIM12RST, 1 << 6   @ bitWidth 1 (TIM12 reset)  
        .equ RCC_APB1RSTR_TIM7RST, 1 << 5   @ bitWidth 1 (TIM7 reset)  
        .equ RCC_APB1RSTR_TIM6RST, 1 << 4   @ bitWidth 1 (TIM6 reset)  
        .equ RCC_APB1RSTR_TIM5RST, 1 << 3   @ bitWidth 1 (TIM5 reset)  
        .equ RCC_APB1RSTR_TIM4RST, 1 << 2   @ bitWidth 1 (TIM4 reset)  
        .equ RCC_APB1RSTR_TIM3RST, 1 << 1   @ bitWidth 1 (TIM3 reset)  
        .equ RCC_APB1RSTR_TIM2RST, 1 << 0   @ bitWidth 1 (TIM2 reset)  
 
    .equ RCC_APB2RSTR, RCC_BASE + 0x24 @ (APB2 peripheral reset register) 
        .equ RCC_APB2RSTR_TIM11RST, 1 << 18   @ bitWidth 1 (TIM11 reset)  
        .equ RCC_APB2RSTR_TIM10RST, 1 << 17   @ bitWidth 1 (TIM10 reset)  
        .equ RCC_APB2RSTR_TIM9RST, 1 << 16   @ bitWidth 1 (TIM9 reset)  
        .equ RCC_APB2RSTR_SYSCFGRST, 1 << 14   @ bitWidth 1 (System configuration controller  reset)  
        .equ RCC_APB2RSTR_SPI1RST, 1 << 12   @ bitWidth 1 (SPI 1 reset)  
        .equ RCC_APB2RSTR_SDIORST, 1 << 11   @ bitWidth 1 (SDIO reset)  
        .equ RCC_APB2RSTR_ADCRST, 1 << 8   @ bitWidth 1 (ADC interface reset common to all  ADCs)  
        .equ RCC_APB2RSTR_USART6RST, 1 << 5   @ bitWidth 1 (USART6 reset)  
        .equ RCC_APB2RSTR_USART1RST, 1 << 4   @ bitWidth 1 (USART1 reset)  
        .equ RCC_APB2RSTR_TIM8RST, 1 << 1   @ bitWidth 1 (TIM8 reset)  
        .equ RCC_APB2RSTR_TIM1RST, 1 << 0   @ bitWidth 1 (TIM1 reset)  
 
    .equ RCC_AHB1ENR, RCC_BASE + 0x30 @ (AHB1 peripheral clock register) 
        .equ RCC_AHB1ENR_OTGHSULPIEN, 1 << 30   @ bitWidth 1 (USB OTG HSULPI clock  enable)  
        .equ RCC_AHB1ENR_OTGHSEN, 1 << 29   @ bitWidth 1 (USB OTG HS clock enable)  
        .equ RCC_AHB1ENR_ETHMACPTPEN, 1 << 28   @ bitWidth 1 (Ethernet PTP clock enable)  
        .equ RCC_AHB1ENR_ETHMACRXEN, 1 << 27   @ bitWidth 1 (Ethernet Reception clock  enable)  
        .equ RCC_AHB1ENR_ETHMACTXEN, 1 << 26   @ bitWidth 1 (Ethernet Transmission clock  enable)  
        .equ RCC_AHB1ENR_ETHMACEN, 1 << 25   @ bitWidth 1 (Ethernet MAC clock enable)  
        .equ RCC_AHB1ENR_DMA2EN, 1 << 22   @ bitWidth 1 (DMA2 clock enable)  
        .equ RCC_AHB1ENR_DMA1EN, 1 << 21   @ bitWidth 1 (DMA1 clock enable)  
        .equ RCC_AHB1ENR_BKPSRAMEN, 1 << 18   @ bitWidth 1 (Backup SRAM interface clock  enable)  
        .equ RCC_AHB1ENR_CRCEN, 1 << 12   @ bitWidth 1 (CRC clock enable)  
        .equ RCC_AHB1ENR_GPIOIEN, 1 << 8   @ bitWidth 1 (IO port I clock enable)  
        .equ RCC_AHB1ENR_GPIOHEN, 1 << 7   @ bitWidth 1 (IO port H clock enable)  
        .equ RCC_AHB1ENR_GPIOGEN, 1 << 6   @ bitWidth 1 (IO port G clock enable)  
        .equ RCC_AHB1ENR_GPIOFEN, 1 << 5   @ bitWidth 1 (IO port F clock enable)  
        .equ RCC_AHB1ENR_GPIOEEN, 1 << 4   @ bitWidth 1 (IO port E clock enable)  
        .equ RCC_AHB1ENR_GPIODEN, 1 << 3   @ bitWidth 1 (IO port D clock enable)  
        .equ RCC_AHB1ENR_GPIOCEN, 1 << 2   @ bitWidth 1 (IO port C clock enable)  
        .equ RCC_AHB1ENR_GPIOBEN, 1 << 1   @ bitWidth 1 (IO port B clock enable)  
        .equ RCC_AHB1ENR_GPIOAEN, 1 << 0   @ bitWidth 1 (IO port A clock enable)  
 
    .equ RCC_AHB2ENR, RCC_BASE + 0x34 @ (AHB2 peripheral clock enable  register) 
        .equ RCC_AHB2ENR_OTGFSEN, 1 << 7   @ bitWidth 1 (USB OTG FS clock enable)  
        .equ RCC_AHB2ENR_RNGEN, 1 << 6   @ bitWidth 1 (Random number generator clock  enable)  
        .equ RCC_AHB2ENR_DCMIEN, 1 << 0   @ bitWidth 1 (Camera interface enable)  
 
    .equ RCC_AHB3ENR, RCC_BASE + 0x38 @ (AHB3 peripheral clock enable  register) 
        .equ RCC_AHB3ENR_FSMCEN, 1 << 0   @ bitWidth 1 (Flexible static memory controller module  clock enable)  
 
    .equ RCC_APB1ENR, RCC_BASE + 0x40 @ (APB1 peripheral clock enable  register) 
        .equ RCC_APB1ENR_DACEN, 1 << 29   @ bitWidth 1 (DAC interface clock enable)  
        .equ RCC_APB1ENR_PWREN, 1 << 28   @ bitWidth 1 (Power interface clock  enable)  
        .equ RCC_APB1ENR_CAN2EN, 1 << 26   @ bitWidth 1 (CAN 2 clock enable)  
        .equ RCC_APB1ENR_CAN1EN, 1 << 25   @ bitWidth 1 (CAN 1 clock enable)  
        .equ RCC_APB1ENR_I2C3EN, 1 << 23   @ bitWidth 1 (I2C3 clock enable)  
        .equ RCC_APB1ENR_I2C2EN, 1 << 22   @ bitWidth 1 (I2C2 clock enable)  
        .equ RCC_APB1ENR_I2C1EN, 1 << 21   @ bitWidth 1 (I2C1 clock enable)  
        .equ RCC_APB1ENR_UART5EN, 1 << 20   @ bitWidth 1 (UART5 clock enable)  
        .equ RCC_APB1ENR_UART4EN, 1 << 19   @ bitWidth 1 (UART4 clock enable)  
        .equ RCC_APB1ENR_USART3EN, 1 << 18   @ bitWidth 1 (USART3 clock enable)  
        .equ RCC_APB1ENR_USART2EN, 1 << 17   @ bitWidth 1 (USART 2 clock enable)  
        .equ RCC_APB1ENR_SPI3EN, 1 << 15   @ bitWidth 1 (SPI3 clock enable)  
        .equ RCC_APB1ENR_SPI2EN, 1 << 14   @ bitWidth 1 (SPI2 clock enable)  
        .equ RCC_APB1ENR_WWDGEN, 1 << 11   @ bitWidth 1 (Window watchdog clock  enable)  
        .equ RCC_APB1ENR_TIM14EN, 1 << 8   @ bitWidth 1 (TIM14 clock enable)  
        .equ RCC_APB1ENR_TIM13EN, 1 << 7   @ bitWidth 1 (TIM13 clock enable)  
        .equ RCC_APB1ENR_TIM12EN, 1 << 6   @ bitWidth 1 (TIM12 clock enable)  
        .equ RCC_APB1ENR_TIM7EN, 1 << 5   @ bitWidth 1 (TIM7 clock enable)  
        .equ RCC_APB1ENR_TIM6EN, 1 << 4   @ bitWidth 1 (TIM6 clock enable)  
        .equ RCC_APB1ENR_TIM5EN, 1 << 3   @ bitWidth 1 (TIM5 clock enable)  
        .equ RCC_APB1ENR_TIM4EN, 1 << 2   @ bitWidth 1 (TIM4 clock enable)  
        .equ RCC_APB1ENR_TIM3EN, 1 << 1   @ bitWidth 1 (TIM3 clock enable)  
        .equ RCC_APB1ENR_TIM2EN, 1 << 0   @ bitWidth 1 (TIM2 clock enable)  
 
    .equ RCC_APB2ENR, RCC_BASE + 0x44 @ (APB2 peripheral clock enable  register) 
        .equ RCC_APB2ENR_TIM11EN, 1 << 18   @ bitWidth 1 (TIM11 clock enable)  
        .equ RCC_APB2ENR_TIM10EN, 1 << 17   @ bitWidth 1 (TIM10 clock enable)  
        .equ RCC_APB2ENR_TIM9EN, 1 << 16   @ bitWidth 1 (TIM9 clock enable)  
        .equ RCC_APB2ENR_SYSCFGEN, 1 << 14   @ bitWidth 1 (System configuration controller clock  enable)  
        .equ RCC_APB2ENR_SPI1EN, 1 << 12   @ bitWidth 1 (SPI1 clock enable)  
        .equ RCC_APB2ENR_SDIOEN, 1 << 11   @ bitWidth 1 (SDIO clock enable)  
        .equ RCC_APB2ENR_ADC3EN, 1 << 10   @ bitWidth 1 (ADC3 clock enable)  
        .equ RCC_APB2ENR_ADC2EN, 1 << 9   @ bitWidth 1 (ADC2 clock enable)  
        .equ RCC_APB2ENR_ADC1EN, 1 << 8   @ bitWidth 1 (ADC1 clock enable)  
        .equ RCC_APB2ENR_USART6EN, 1 << 5   @ bitWidth 1 (USART6 clock enable)  
        .equ RCC_APB2ENR_USART1EN, 1 << 4   @ bitWidth 1 (USART1 clock enable)  
        .equ RCC_APB2ENR_TIM8EN, 1 << 1   @ bitWidth 1 (TIM8 clock enable)  
        .equ RCC_APB2ENR_TIM1EN, 1 << 0   @ bitWidth 1 (TIM1 clock enable)  
 
    .equ RCC_AHB1LPENR, RCC_BASE + 0x50 @ (AHB1 peripheral clock enable in low power  mode register) 
        .equ RCC_AHB1LPENR_OTGHSULPILPEN, 1 << 30   @ bitWidth 1 (USB OTG HS ULPI clock enable during  Sleep mode)  
        .equ RCC_AHB1LPENR_OTGHSLPEN, 1 << 29   @ bitWidth 1 (USB OTG HS clock enable during Sleep  mode)  
        .equ RCC_AHB1LPENR_ETHMACPTPLPEN, 1 << 28   @ bitWidth 1 (Ethernet PTP clock enable during Sleep  mode)  
        .equ RCC_AHB1LPENR_ETHMACRXLPEN, 1 << 27   @ bitWidth 1 (Ethernet reception clock enable during  Sleep mode)  
        .equ RCC_AHB1LPENR_ETHMACTXLPEN, 1 << 26   @ bitWidth 1 (Ethernet transmission clock enable  during Sleep mode)  
        .equ RCC_AHB1LPENR_ETHMACLPEN, 1 << 25   @ bitWidth 1 (Ethernet MAC clock enable during Sleep  mode)  
        .equ RCC_AHB1LPENR_DMA2LPEN, 1 << 22   @ bitWidth 1 (DMA2 clock enable during Sleep  mode)  
        .equ RCC_AHB1LPENR_DMA1LPEN, 1 << 21   @ bitWidth 1 (DMA1 clock enable during Sleep  mode)  
        .equ RCC_AHB1LPENR_BKPSRAMLPEN, 1 << 18   @ bitWidth 1 (Backup SRAM interface clock enable  during Sleep mode)  
        .equ RCC_AHB1LPENR_SRAM2LPEN, 1 << 17   @ bitWidth 1 (SRAM 2 interface clock enable during  Sleep mode)  
        .equ RCC_AHB1LPENR_SRAM1LPEN, 1 << 16   @ bitWidth 1 (SRAM 1interface clock enable during  Sleep mode)  
        .equ RCC_AHB1LPENR_FLITFLPEN, 1 << 15   @ bitWidth 1 (Flash interface clock enable during  Sleep mode)  
        .equ RCC_AHB1LPENR_CRCLPEN, 1 << 12   @ bitWidth 1 (CRC clock enable during Sleep  mode)  
        .equ RCC_AHB1LPENR_GPIOILPEN, 1 << 8   @ bitWidth 1 (IO port I clock enable during Sleep  mode)  
        .equ RCC_AHB1LPENR_GPIOHLPEN, 1 << 7   @ bitWidth 1 (IO port H clock enable during Sleep  mode)  
        .equ RCC_AHB1LPENR_GPIOGLPEN, 1 << 6   @ bitWidth 1 (IO port G clock enable during Sleep  mode)  
        .equ RCC_AHB1LPENR_GPIOFLPEN, 1 << 5   @ bitWidth 1 (IO port F clock enable during Sleep  mode)  
        .equ RCC_AHB1LPENR_GPIOELPEN, 1 << 4   @ bitWidth 1 (IO port E clock enable during Sleep  mode)  
        .equ RCC_AHB1LPENR_GPIODLPEN, 1 << 3   @ bitWidth 1 (IO port D clock enable during Sleep  mode)  
        .equ RCC_AHB1LPENR_GPIOCLPEN, 1 << 2   @ bitWidth 1 (IO port C clock enable during Sleep  mode)  
        .equ RCC_AHB1LPENR_GPIOBLPEN, 1 << 1   @ bitWidth 1 (IO port B clock enable during Sleep  mode)  
        .equ RCC_AHB1LPENR_GPIOALPEN, 1 << 0   @ bitWidth 1 (IO port A clock enable during sleep  mode)  
 
    .equ RCC_AHB2LPENR, RCC_BASE + 0x54 @ (AHB2 peripheral clock enable in low power  mode register) 
        .equ RCC_AHB2LPENR_OTGFSLPEN, 1 << 7   @ bitWidth 1 (USB OTG FS clock enable during Sleep  mode)  
        .equ RCC_AHB2LPENR_RNGLPEN, 1 << 6   @ bitWidth 1 (Random number generator clock enable  during Sleep mode)  
        .equ RCC_AHB2LPENR_DCMILPEN, 1 << 0   @ bitWidth 1 (Camera interface enable during Sleep  mode)  
 
    .equ RCC_AHB3LPENR, RCC_BASE + 0x58 @ (AHB3 peripheral clock enable in low power  mode register) 
        .equ RCC_AHB3LPENR_FSMCLPEN, 1 << 0   @ bitWidth 1 (Flexible static memory controller module  clock enable during Sleep mode)  
 
    .equ RCC_APB1LPENR, RCC_BASE + 0x60 @ (APB1 peripheral clock enable in low power  mode register) 
        .equ RCC_APB1LPENR_DACLPEN, 1 << 29   @ bitWidth 1 (DAC interface clock enable during Sleep  mode)  
        .equ RCC_APB1LPENR_PWRLPEN, 1 << 28   @ bitWidth 1 (Power interface clock enable during  Sleep mode)  
        .equ RCC_APB1LPENR_CAN2LPEN, 1 << 26   @ bitWidth 1 (CAN 2 clock enable during Sleep  mode)  
        .equ RCC_APB1LPENR_CAN1LPEN, 1 << 25   @ bitWidth 1 (CAN 1 clock enable during Sleep  mode)  
        .equ RCC_APB1LPENR_I2C3LPEN, 1 << 23   @ bitWidth 1 (I2C3 clock enable during Sleep  mode)  
        .equ RCC_APB1LPENR_I2C2LPEN, 1 << 22   @ bitWidth 1 (I2C2 clock enable during Sleep  mode)  
        .equ RCC_APB1LPENR_I2C1LPEN, 1 << 21   @ bitWidth 1 (I2C1 clock enable during Sleep  mode)  
        .equ RCC_APB1LPENR_UART5LPEN, 1 << 20   @ bitWidth 1 (UART5 clock enable during Sleep  mode)  
        .equ RCC_APB1LPENR_UART4LPEN, 1 << 19   @ bitWidth 1 (UART4 clock enable during Sleep  mode)  
        .equ RCC_APB1LPENR_USART3LPEN, 1 << 18   @ bitWidth 1 (USART3 clock enable during Sleep  mode)  
        .equ RCC_APB1LPENR_USART2LPEN, 1 << 17   @ bitWidth 1 (USART2 clock enable during Sleep  mode)  
        .equ RCC_APB1LPENR_SPI3LPEN, 1 << 15   @ bitWidth 1 (SPI3 clock enable during Sleep  mode)  
        .equ RCC_APB1LPENR_SPI2LPEN, 1 << 14   @ bitWidth 1 (SPI2 clock enable during Sleep  mode)  
        .equ RCC_APB1LPENR_WWDGLPEN, 1 << 11   @ bitWidth 1 (Window watchdog clock enable during  Sleep mode)  
        .equ RCC_APB1LPENR_TIM14LPEN, 1 << 8   @ bitWidth 1 (TIM14 clock enable during Sleep  mode)  
        .equ RCC_APB1LPENR_TIM13LPEN, 1 << 7   @ bitWidth 1 (TIM13 clock enable during Sleep  mode)  
        .equ RCC_APB1LPENR_TIM12LPEN, 1 << 6   @ bitWidth 1 (TIM12 clock enable during Sleep  mode)  
        .equ RCC_APB1LPENR_TIM7LPEN, 1 << 5   @ bitWidth 1 (TIM7 clock enable during Sleep  mode)  
        .equ RCC_APB1LPENR_TIM6LPEN, 1 << 4   @ bitWidth 1 (TIM6 clock enable during Sleep  mode)  
        .equ RCC_APB1LPENR_TIM5LPEN, 1 << 3   @ bitWidth 1 (TIM5 clock enable during Sleep  mode)  
        .equ RCC_APB1LPENR_TIM4LPEN, 1 << 2   @ bitWidth 1 (TIM4 clock enable during Sleep  mode)  
        .equ RCC_APB1LPENR_TIM3LPEN, 1 << 1   @ bitWidth 1 (TIM3 clock enable during Sleep  mode)  
        .equ RCC_APB1LPENR_TIM2LPEN, 1 << 0   @ bitWidth 1 (TIM2 clock enable during Sleep  mode)  
 
    .equ RCC_APB2LPENR, RCC_BASE + 0x64 @ (APB2 peripheral clock enabled in low power  mode register) 
        .equ RCC_APB2LPENR_TIM11LPEN, 1 << 18   @ bitWidth 1 (TIM11 clock enable during Sleep  mode)  
        .equ RCC_APB2LPENR_TIM10LPEN, 1 << 17   @ bitWidth 1 (TIM10 clock enable during Sleep  mode)  
        .equ RCC_APB2LPENR_TIM9LPEN, 1 << 16   @ bitWidth 1 (TIM9 clock enable during sleep  mode)  
        .equ RCC_APB2LPENR_SYSCFGLPEN, 1 << 14   @ bitWidth 1 (System configuration controller clock  enable during Sleep mode)  
        .equ RCC_APB2LPENR_SPI1LPEN, 1 << 12   @ bitWidth 1 (SPI 1 clock enable during Sleep  mode)  
        .equ RCC_APB2LPENR_SDIOLPEN, 1 << 11   @ bitWidth 1 (SDIO clock enable during Sleep  mode)  
        .equ RCC_APB2LPENR_ADC3LPEN, 1 << 10   @ bitWidth 1 (ADC 3 clock enable during Sleep  mode)  
        .equ RCC_APB2LPENR_ADC2LPEN, 1 << 9   @ bitWidth 1 (ADC2 clock enable during Sleep  mode)  
        .equ RCC_APB2LPENR_ADC1LPEN, 1 << 8   @ bitWidth 1 (ADC1 clock enable during Sleep  mode)  
        .equ RCC_APB2LPENR_USART6LPEN, 1 << 5   @ bitWidth 1 (USART6 clock enable during Sleep  mode)  
        .equ RCC_APB2LPENR_USART1LPEN, 1 << 4   @ bitWidth 1 (USART1 clock enable during Sleep  mode)  
        .equ RCC_APB2LPENR_TIM8LPEN, 1 << 1   @ bitWidth 1 (TIM8 clock enable during Sleep  mode)  
        .equ RCC_APB2LPENR_TIM1LPEN, 1 << 0   @ bitWidth 1 (TIM1 clock enable during Sleep  mode)  
 
    .equ RCC_BDCR, RCC_BASE + 0x70 @ (Backup domain control register) 
        .equ RCC_BDCR_BDRST, 1 << 16   @ bitWidth 1 (Backup domain software  reset)  
        .equ RCC_BDCR_RTCEN, 1 << 15   @ bitWidth 1 (RTC clock enable)  
        .equ RCC_BDCR_RTCSEL1, 1 << 9   @ bitWidth 1 (RTC clock source selection)  
        .equ RCC_BDCR_RTCSEL0, 1 << 8   @ bitWidth 1 (RTC clock source selection)  
        .equ RCC_BDCR_LSEBYP, 1 << 2   @ bitWidth 1 (External low-speed oscillator  bypass)  
        .equ RCC_BDCR_LSERDY, 1 << 1   @ bitWidth 1 (External low-speed oscillator  ready)  
        .equ RCC_BDCR_LSEON, 1 << 0   @ bitWidth 1 (External low-speed oscillator  enable)  
 
    .equ RCC_CSR, RCC_BASE + 0x74 @ (clock control & status  register) 
        .equ RCC_CSR_LPWRRSTF, 1 << 31   @ bitWidth 1 (Low-power reset flag)  
        .equ RCC_CSR_WWDGRSTF, 1 << 30   @ bitWidth 1 (Window watchdog reset flag)  
        .equ RCC_CSR_WDGRSTF, 1 << 29   @ bitWidth 1 (Independent watchdog reset  flag)  
        .equ RCC_CSR_SFTRSTF, 1 << 28   @ bitWidth 1 (Software reset flag)  
        .equ RCC_CSR_PORRSTF, 1 << 27   @ bitWidth 1 (POR/PDR reset flag)  
        .equ RCC_CSR_PADRSTF, 1 << 26   @ bitWidth 1 (PIN reset flag)  
        .equ RCC_CSR_BORRSTF, 1 << 25   @ bitWidth 1 (BOR reset flag)  
        .equ RCC_CSR_RMVF, 1 << 24   @ bitWidth 1 (Remove reset flag)  
        .equ RCC_CSR_LSIRDY, 1 << 1   @ bitWidth 1 (Internal low-speed oscillator  ready)  
        .equ RCC_CSR_LSION, 1 << 0   @ bitWidth 1 (Internal low-speed oscillator  enable)  
 
    .equ RCC_SSCGR, RCC_BASE + 0x80 @ (spread spectrum clock generation  register) 
        .equ RCC_SSCGR_SSCGEN, 1 << 31   @ bitWidth 1 (Spread spectrum modulation  enable)  
        .equ RCC_SSCGR_SPREADSEL, 1 << 30   @ bitWidth 1 (Spread Select)  
        .equ RCC_SSCGR_INCSTEP_Shift, 13   @ bitWidth 15 (Incrementation step)  
        .equ RCC_SSCGR_MODPER_Shift, 0   @ bitWidth 13 (Modulation period)  
 
    .equ RCC_PLLI2SCFGR, RCC_BASE + 0x84 @ (PLLI2S configuration register) 
        .equ RCC_PLLI2SCFGR_PLLI2SRx_Shift, 28   @ bitWidth 3 (PLLI2S division factor for I2S  clocks)  
        .equ RCC_PLLI2SCFGR_PLLI2SNx_Shift, 6   @ bitWidth 9 (PLLI2S multiplication factor for  VCO)  
 

@=========================== GPIOI ===========================@
.equ GPIOI_BASE, 0x40022000 @ (General-purpose I/Os) 
    .equ GPIOI_MODER, GPIOI_BASE + 0x0 @ (GPIO port mode register) 
        .equ GPIOI_MODER_MODER15_Shift, 30   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOI_MODER_MODER14_Shift, 28   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOI_MODER_MODER13_Shift, 26   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOI_MODER_MODER12_Shift, 24   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOI_MODER_MODER11_Shift, 22   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOI_MODER_MODER10_Shift, 20   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOI_MODER_MODER9_Shift, 18   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOI_MODER_MODER8_Shift, 16   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOI_MODER_MODER7_Shift, 14   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOI_MODER_MODER6_Shift, 12   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOI_MODER_MODER5_Shift, 10   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOI_MODER_MODER4_Shift, 8   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOI_MODER_MODER3_Shift, 6   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOI_MODER_MODER2_Shift, 4   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOI_MODER_MODER1_Shift, 2   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOI_MODER_MODER0_Shift, 0   @ bitWidth 2 (Port x configuration bits y =  0..15)  
 
    .equ GPIOI_OTYPER, GPIOI_BASE + 0x4 @ (GPIO port output type register) 
        .equ GPIOI_OTYPER_OT15, 1 << 15   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOI_OTYPER_OT14, 1 << 14   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOI_OTYPER_OT13, 1 << 13   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOI_OTYPER_OT12, 1 << 12   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOI_OTYPER_OT11, 1 << 11   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOI_OTYPER_OT10, 1 << 10   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOI_OTYPER_OT9, 1 << 9   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOI_OTYPER_OT8, 1 << 8   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOI_OTYPER_OT7, 1 << 7   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOI_OTYPER_OT6, 1 << 6   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOI_OTYPER_OT5, 1 << 5   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOI_OTYPER_OT4, 1 << 4   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOI_OTYPER_OT3, 1 << 3   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOI_OTYPER_OT2, 1 << 2   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOI_OTYPER_OT1, 1 << 1   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOI_OTYPER_OT0, 1 << 0   @ bitWidth 1 (Port x configuration bits y =  0..15)  
 
    .equ GPIOI_OSPEEDR, GPIOI_BASE + 0x8 @ (GPIO port output speed  register) 
        .equ GPIOI_OSPEEDR_OSPEEDR15_Shift, 30   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOI_OSPEEDR_OSPEEDR14_Shift, 28   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOI_OSPEEDR_OSPEEDR13_Shift, 26   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOI_OSPEEDR_OSPEEDR12_Shift, 24   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOI_OSPEEDR_OSPEEDR11_Shift, 22   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOI_OSPEEDR_OSPEEDR10_Shift, 20   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOI_OSPEEDR_OSPEEDR9_Shift, 18   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOI_OSPEEDR_OSPEEDR8_Shift, 16   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOI_OSPEEDR_OSPEEDR7_Shift, 14   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOI_OSPEEDR_OSPEEDR6_Shift, 12   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOI_OSPEEDR_OSPEEDR5_Shift, 10   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOI_OSPEEDR_OSPEEDR4_Shift, 8   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOI_OSPEEDR_OSPEEDR3_Shift, 6   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOI_OSPEEDR_OSPEEDR2_Shift, 4   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOI_OSPEEDR_OSPEEDR1_Shift, 2   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOI_OSPEEDR_OSPEEDR0_Shift, 0   @ bitWidth 2 (Port x configuration bits y =  0..15)  
 
    .equ GPIOI_PUPDR, GPIOI_BASE + 0xC @ (GPIO port pull-up/pull-down  register) 
        .equ GPIOI_PUPDR_PUPDR15_Shift, 30   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOI_PUPDR_PUPDR14_Shift, 28   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOI_PUPDR_PUPDR13_Shift, 26   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOI_PUPDR_PUPDR12_Shift, 24   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOI_PUPDR_PUPDR11_Shift, 22   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOI_PUPDR_PUPDR10_Shift, 20   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOI_PUPDR_PUPDR9_Shift, 18   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOI_PUPDR_PUPDR8_Shift, 16   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOI_PUPDR_PUPDR7_Shift, 14   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOI_PUPDR_PUPDR6_Shift, 12   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOI_PUPDR_PUPDR5_Shift, 10   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOI_PUPDR_PUPDR4_Shift, 8   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOI_PUPDR_PUPDR3_Shift, 6   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOI_PUPDR_PUPDR2_Shift, 4   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOI_PUPDR_PUPDR1_Shift, 2   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOI_PUPDR_PUPDR0_Shift, 0   @ bitWidth 2 (Port x configuration bits y =  0..15)  
 
    .equ GPIOI_IDR, GPIOI_BASE + 0x10 @ (GPIO port input data register) 
        .equ GPIOI_IDR_IDR15, 1 << 15   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOI_IDR_IDR14, 1 << 14   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOI_IDR_IDR13, 1 << 13   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOI_IDR_IDR12, 1 << 12   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOI_IDR_IDR11, 1 << 11   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOI_IDR_IDR10, 1 << 10   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOI_IDR_IDR9, 1 << 9   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOI_IDR_IDR8, 1 << 8   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOI_IDR_IDR7, 1 << 7   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOI_IDR_IDR6, 1 << 6   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOI_IDR_IDR5, 1 << 5   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOI_IDR_IDR4, 1 << 4   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOI_IDR_IDR3, 1 << 3   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOI_IDR_IDR2, 1 << 2   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOI_IDR_IDR1, 1 << 1   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOI_IDR_IDR0, 1 << 0   @ bitWidth 1 (Port input data y =  0..15)  
 
    .equ GPIOI_ODR, GPIOI_BASE + 0x14 @ (GPIO port output data register) 
        .equ GPIOI_ODR_ODR15, 1 << 15   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOI_ODR_ODR14, 1 << 14   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOI_ODR_ODR13, 1 << 13   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOI_ODR_ODR12, 1 << 12   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOI_ODR_ODR11, 1 << 11   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOI_ODR_ODR10, 1 << 10   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOI_ODR_ODR9, 1 << 9   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOI_ODR_ODR8, 1 << 8   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOI_ODR_ODR7, 1 << 7   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOI_ODR_ODR6, 1 << 6   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOI_ODR_ODR5, 1 << 5   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOI_ODR_ODR4, 1 << 4   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOI_ODR_ODR3, 1 << 3   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOI_ODR_ODR2, 1 << 2   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOI_ODR_ODR1, 1 << 1   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOI_ODR_ODR0, 1 << 0   @ bitWidth 1 (Port output data y =  0..15)  
 
    .equ GPIOI_BSRR, GPIOI_BASE + 0x18 @ (GPIO port bit set/reset  register) 
        .equ GPIOI_BSRR_BR15, 1 << 31   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOI_BSRR_BR14, 1 << 30   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOI_BSRR_BR13, 1 << 29   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOI_BSRR_BR12, 1 << 28   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOI_BSRR_BR11, 1 << 27   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOI_BSRR_BR10, 1 << 26   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOI_BSRR_BR9, 1 << 25   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOI_BSRR_BR8, 1 << 24   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOI_BSRR_BR7, 1 << 23   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOI_BSRR_BR6, 1 << 22   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOI_BSRR_BR5, 1 << 21   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOI_BSRR_BR4, 1 << 20   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOI_BSRR_BR3, 1 << 19   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOI_BSRR_BR2, 1 << 18   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOI_BSRR_BR1, 1 << 17   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOI_BSRR_BR0, 1 << 16   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOI_BSRR_BS15, 1 << 15   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOI_BSRR_BS14, 1 << 14   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOI_BSRR_BS13, 1 << 13   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOI_BSRR_BS12, 1 << 12   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOI_BSRR_BS11, 1 << 11   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOI_BSRR_BS10, 1 << 10   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOI_BSRR_BS9, 1 << 9   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOI_BSRR_BS8, 1 << 8   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOI_BSRR_BS7, 1 << 7   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOI_BSRR_BS6, 1 << 6   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOI_BSRR_BS5, 1 << 5   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOI_BSRR_BS4, 1 << 4   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOI_BSRR_BS3, 1 << 3   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOI_BSRR_BS2, 1 << 2   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOI_BSRR_BS1, 1 << 1   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOI_BSRR_BS0, 1 << 0   @ bitWidth 1 (Port x set bit y y=  0..15)  
 
    .equ GPIOI_LCKR, GPIOI_BASE + 0x1C @ (GPIO port configuration lock  register) 
        .equ GPIOI_LCKR_LCKK, 1 << 16   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOI_LCKR_LCK15, 1 << 15   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOI_LCKR_LCK14, 1 << 14   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOI_LCKR_LCK13, 1 << 13   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOI_LCKR_LCK12, 1 << 12   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOI_LCKR_LCK11, 1 << 11   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOI_LCKR_LCK10, 1 << 10   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOI_LCKR_LCK9, 1 << 9   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOI_LCKR_LCK8, 1 << 8   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOI_LCKR_LCK7, 1 << 7   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOI_LCKR_LCK6, 1 << 6   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOI_LCKR_LCK5, 1 << 5   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOI_LCKR_LCK4, 1 << 4   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOI_LCKR_LCK3, 1 << 3   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOI_LCKR_LCK2, 1 << 2   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOI_LCKR_LCK1, 1 << 1   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOI_LCKR_LCK0, 1 << 0   @ bitWidth 1 (Port x lock bit y y=  0..15)  
 
    .equ GPIOI_AFRL, GPIOI_BASE + 0x20 @ (GPIO alternate function low  register) 
        .equ GPIOI_AFRL_AFRL7_Shift, 28   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOI_AFRL_AFRL6_Shift, 24   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOI_AFRL_AFRL5_Shift, 20   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOI_AFRL_AFRL4_Shift, 16   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOI_AFRL_AFRL3_Shift, 12   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOI_AFRL_AFRL2_Shift, 8   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOI_AFRL_AFRL1_Shift, 4   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOI_AFRL_AFRL0_Shift, 0   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
 
    .equ GPIOI_AFRH, GPIOI_BASE + 0x24 @ (GPIO alternate function high  register) 
        .equ GPIOI_AFRH_AFRH15_Shift, 28   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOI_AFRH_AFRH14_Shift, 24   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOI_AFRH_AFRH13_Shift, 20   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOI_AFRH_AFRH12_Shift, 16   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOI_AFRH_AFRH11_Shift, 12   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOI_AFRH_AFRH10_Shift, 8   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOI_AFRH_AFRH9_Shift, 4   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOI_AFRH_AFRH8_Shift, 0   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
 

@=========================== GPIOH ===========================@
.equ GPIOH_BASE, 0x40021C00 @ (General-purpose I/Os) 
    .equ GPIOH_MODER, GPIOH_BASE + 0x0 @ (GPIO port mode register) 
        .equ GPIOH_MODER_MODER15_Shift, 30   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOH_MODER_MODER14_Shift, 28   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOH_MODER_MODER13_Shift, 26   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOH_MODER_MODER12_Shift, 24   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOH_MODER_MODER11_Shift, 22   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOH_MODER_MODER10_Shift, 20   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOH_MODER_MODER9_Shift, 18   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOH_MODER_MODER8_Shift, 16   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOH_MODER_MODER7_Shift, 14   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOH_MODER_MODER6_Shift, 12   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOH_MODER_MODER5_Shift, 10   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOH_MODER_MODER4_Shift, 8   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOH_MODER_MODER3_Shift, 6   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOH_MODER_MODER2_Shift, 4   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOH_MODER_MODER1_Shift, 2   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOH_MODER_MODER0_Shift, 0   @ bitWidth 2 (Port x configuration bits y =  0..15)  
 
    .equ GPIOH_OTYPER, GPIOH_BASE + 0x4 @ (GPIO port output type register) 
        .equ GPIOH_OTYPER_OT15, 1 << 15   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOH_OTYPER_OT14, 1 << 14   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOH_OTYPER_OT13, 1 << 13   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOH_OTYPER_OT12, 1 << 12   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOH_OTYPER_OT11, 1 << 11   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOH_OTYPER_OT10, 1 << 10   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOH_OTYPER_OT9, 1 << 9   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOH_OTYPER_OT8, 1 << 8   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOH_OTYPER_OT7, 1 << 7   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOH_OTYPER_OT6, 1 << 6   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOH_OTYPER_OT5, 1 << 5   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOH_OTYPER_OT4, 1 << 4   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOH_OTYPER_OT3, 1 << 3   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOH_OTYPER_OT2, 1 << 2   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOH_OTYPER_OT1, 1 << 1   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOH_OTYPER_OT0, 1 << 0   @ bitWidth 1 (Port x configuration bits y =  0..15)  
 
    .equ GPIOH_OSPEEDR, GPIOH_BASE + 0x8 @ (GPIO port output speed  register) 
        .equ GPIOH_OSPEEDR_OSPEEDR15_Shift, 30   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOH_OSPEEDR_OSPEEDR14_Shift, 28   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOH_OSPEEDR_OSPEEDR13_Shift, 26   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOH_OSPEEDR_OSPEEDR12_Shift, 24   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOH_OSPEEDR_OSPEEDR11_Shift, 22   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOH_OSPEEDR_OSPEEDR10_Shift, 20   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOH_OSPEEDR_OSPEEDR9_Shift, 18   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOH_OSPEEDR_OSPEEDR8_Shift, 16   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOH_OSPEEDR_OSPEEDR7_Shift, 14   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOH_OSPEEDR_OSPEEDR6_Shift, 12   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOH_OSPEEDR_OSPEEDR5_Shift, 10   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOH_OSPEEDR_OSPEEDR4_Shift, 8   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOH_OSPEEDR_OSPEEDR3_Shift, 6   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOH_OSPEEDR_OSPEEDR2_Shift, 4   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOH_OSPEEDR_OSPEEDR1_Shift, 2   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOH_OSPEEDR_OSPEEDR0_Shift, 0   @ bitWidth 2 (Port x configuration bits y =  0..15)  
 
    .equ GPIOH_PUPDR, GPIOH_BASE + 0xC @ (GPIO port pull-up/pull-down  register) 
        .equ GPIOH_PUPDR_PUPDR15_Shift, 30   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOH_PUPDR_PUPDR14_Shift, 28   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOH_PUPDR_PUPDR13_Shift, 26   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOH_PUPDR_PUPDR12_Shift, 24   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOH_PUPDR_PUPDR11_Shift, 22   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOH_PUPDR_PUPDR10_Shift, 20   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOH_PUPDR_PUPDR9_Shift, 18   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOH_PUPDR_PUPDR8_Shift, 16   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOH_PUPDR_PUPDR7_Shift, 14   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOH_PUPDR_PUPDR6_Shift, 12   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOH_PUPDR_PUPDR5_Shift, 10   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOH_PUPDR_PUPDR4_Shift, 8   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOH_PUPDR_PUPDR3_Shift, 6   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOH_PUPDR_PUPDR2_Shift, 4   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOH_PUPDR_PUPDR1_Shift, 2   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOH_PUPDR_PUPDR0_Shift, 0   @ bitWidth 2 (Port x configuration bits y =  0..15)  
 
    .equ GPIOH_IDR, GPIOH_BASE + 0x10 @ (GPIO port input data register) 
        .equ GPIOH_IDR_IDR15, 1 << 15   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOH_IDR_IDR14, 1 << 14   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOH_IDR_IDR13, 1 << 13   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOH_IDR_IDR12, 1 << 12   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOH_IDR_IDR11, 1 << 11   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOH_IDR_IDR10, 1 << 10   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOH_IDR_IDR9, 1 << 9   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOH_IDR_IDR8, 1 << 8   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOH_IDR_IDR7, 1 << 7   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOH_IDR_IDR6, 1 << 6   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOH_IDR_IDR5, 1 << 5   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOH_IDR_IDR4, 1 << 4   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOH_IDR_IDR3, 1 << 3   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOH_IDR_IDR2, 1 << 2   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOH_IDR_IDR1, 1 << 1   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOH_IDR_IDR0, 1 << 0   @ bitWidth 1 (Port input data y =  0..15)  
 
    .equ GPIOH_ODR, GPIOH_BASE + 0x14 @ (GPIO port output data register) 
        .equ GPIOH_ODR_ODR15, 1 << 15   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOH_ODR_ODR14, 1 << 14   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOH_ODR_ODR13, 1 << 13   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOH_ODR_ODR12, 1 << 12   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOH_ODR_ODR11, 1 << 11   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOH_ODR_ODR10, 1 << 10   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOH_ODR_ODR9, 1 << 9   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOH_ODR_ODR8, 1 << 8   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOH_ODR_ODR7, 1 << 7   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOH_ODR_ODR6, 1 << 6   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOH_ODR_ODR5, 1 << 5   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOH_ODR_ODR4, 1 << 4   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOH_ODR_ODR3, 1 << 3   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOH_ODR_ODR2, 1 << 2   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOH_ODR_ODR1, 1 << 1   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOH_ODR_ODR0, 1 << 0   @ bitWidth 1 (Port output data y =  0..15)  
 
    .equ GPIOH_BSRR, GPIOH_BASE + 0x18 @ (GPIO port bit set/reset  register) 
        .equ GPIOH_BSRR_BR15, 1 << 31   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOH_BSRR_BR14, 1 << 30   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOH_BSRR_BR13, 1 << 29   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOH_BSRR_BR12, 1 << 28   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOH_BSRR_BR11, 1 << 27   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOH_BSRR_BR10, 1 << 26   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOH_BSRR_BR9, 1 << 25   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOH_BSRR_BR8, 1 << 24   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOH_BSRR_BR7, 1 << 23   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOH_BSRR_BR6, 1 << 22   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOH_BSRR_BR5, 1 << 21   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOH_BSRR_BR4, 1 << 20   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOH_BSRR_BR3, 1 << 19   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOH_BSRR_BR2, 1 << 18   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOH_BSRR_BR1, 1 << 17   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOH_BSRR_BR0, 1 << 16   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOH_BSRR_BS15, 1 << 15   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOH_BSRR_BS14, 1 << 14   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOH_BSRR_BS13, 1 << 13   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOH_BSRR_BS12, 1 << 12   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOH_BSRR_BS11, 1 << 11   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOH_BSRR_BS10, 1 << 10   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOH_BSRR_BS9, 1 << 9   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOH_BSRR_BS8, 1 << 8   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOH_BSRR_BS7, 1 << 7   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOH_BSRR_BS6, 1 << 6   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOH_BSRR_BS5, 1 << 5   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOH_BSRR_BS4, 1 << 4   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOH_BSRR_BS3, 1 << 3   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOH_BSRR_BS2, 1 << 2   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOH_BSRR_BS1, 1 << 1   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOH_BSRR_BS0, 1 << 0   @ bitWidth 1 (Port x set bit y y=  0..15)  
 
    .equ GPIOH_LCKR, GPIOH_BASE + 0x1C @ (GPIO port configuration lock  register) 
        .equ GPIOH_LCKR_LCKK, 1 << 16   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOH_LCKR_LCK15, 1 << 15   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOH_LCKR_LCK14, 1 << 14   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOH_LCKR_LCK13, 1 << 13   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOH_LCKR_LCK12, 1 << 12   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOH_LCKR_LCK11, 1 << 11   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOH_LCKR_LCK10, 1 << 10   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOH_LCKR_LCK9, 1 << 9   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOH_LCKR_LCK8, 1 << 8   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOH_LCKR_LCK7, 1 << 7   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOH_LCKR_LCK6, 1 << 6   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOH_LCKR_LCK5, 1 << 5   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOH_LCKR_LCK4, 1 << 4   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOH_LCKR_LCK3, 1 << 3   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOH_LCKR_LCK2, 1 << 2   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOH_LCKR_LCK1, 1 << 1   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOH_LCKR_LCK0, 1 << 0   @ bitWidth 1 (Port x lock bit y y=  0..15)  
 
    .equ GPIOH_AFRL, GPIOH_BASE + 0x20 @ (GPIO alternate function low  register) 
        .equ GPIOH_AFRL_AFRL7_Shift, 28   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOH_AFRL_AFRL6_Shift, 24   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOH_AFRL_AFRL5_Shift, 20   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOH_AFRL_AFRL4_Shift, 16   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOH_AFRL_AFRL3_Shift, 12   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOH_AFRL_AFRL2_Shift, 8   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOH_AFRL_AFRL1_Shift, 4   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOH_AFRL_AFRL0_Shift, 0   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
 
    .equ GPIOH_AFRH, GPIOH_BASE + 0x24 @ (GPIO alternate function high  register) 
        .equ GPIOH_AFRH_AFRH15_Shift, 28   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOH_AFRH_AFRH14_Shift, 24   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOH_AFRH_AFRH13_Shift, 20   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOH_AFRH_AFRH12_Shift, 16   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOH_AFRH_AFRH11_Shift, 12   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOH_AFRH_AFRH10_Shift, 8   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOH_AFRH_AFRH9_Shift, 4   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOH_AFRH_AFRH8_Shift, 0   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
 

@=========================== GPIOG ===========================@
.equ GPIOG_BASE, 0x40021800 @ (General-purpose I/Os) 
    .equ GPIOG_MODER, GPIOG_BASE + 0x0 @ (GPIO port mode register) 
        .equ GPIOG_MODER_MODER15_Shift, 30   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOG_MODER_MODER14_Shift, 28   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOG_MODER_MODER13_Shift, 26   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOG_MODER_MODER12_Shift, 24   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOG_MODER_MODER11_Shift, 22   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOG_MODER_MODER10_Shift, 20   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOG_MODER_MODER9_Shift, 18   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOG_MODER_MODER8_Shift, 16   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOG_MODER_MODER7_Shift, 14   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOG_MODER_MODER6_Shift, 12   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOG_MODER_MODER5_Shift, 10   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOG_MODER_MODER4_Shift, 8   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOG_MODER_MODER3_Shift, 6   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOG_MODER_MODER2_Shift, 4   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOG_MODER_MODER1_Shift, 2   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOG_MODER_MODER0_Shift, 0   @ bitWidth 2 (Port x configuration bits y =  0..15)  
 
    .equ GPIOG_OTYPER, GPIOG_BASE + 0x4 @ (GPIO port output type register) 
        .equ GPIOG_OTYPER_OT15, 1 << 15   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOG_OTYPER_OT14, 1 << 14   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOG_OTYPER_OT13, 1 << 13   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOG_OTYPER_OT12, 1 << 12   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOG_OTYPER_OT11, 1 << 11   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOG_OTYPER_OT10, 1 << 10   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOG_OTYPER_OT9, 1 << 9   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOG_OTYPER_OT8, 1 << 8   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOG_OTYPER_OT7, 1 << 7   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOG_OTYPER_OT6, 1 << 6   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOG_OTYPER_OT5, 1 << 5   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOG_OTYPER_OT4, 1 << 4   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOG_OTYPER_OT3, 1 << 3   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOG_OTYPER_OT2, 1 << 2   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOG_OTYPER_OT1, 1 << 1   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOG_OTYPER_OT0, 1 << 0   @ bitWidth 1 (Port x configuration bits y =  0..15)  
 
    .equ GPIOG_OSPEEDR, GPIOG_BASE + 0x8 @ (GPIO port output speed  register) 
        .equ GPIOG_OSPEEDR_OSPEEDR15_Shift, 30   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOG_OSPEEDR_OSPEEDR14_Shift, 28   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOG_OSPEEDR_OSPEEDR13_Shift, 26   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOG_OSPEEDR_OSPEEDR12_Shift, 24   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOG_OSPEEDR_OSPEEDR11_Shift, 22   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOG_OSPEEDR_OSPEEDR10_Shift, 20   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOG_OSPEEDR_OSPEEDR9_Shift, 18   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOG_OSPEEDR_OSPEEDR8_Shift, 16   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOG_OSPEEDR_OSPEEDR7_Shift, 14   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOG_OSPEEDR_OSPEEDR6_Shift, 12   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOG_OSPEEDR_OSPEEDR5_Shift, 10   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOG_OSPEEDR_OSPEEDR4_Shift, 8   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOG_OSPEEDR_OSPEEDR3_Shift, 6   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOG_OSPEEDR_OSPEEDR2_Shift, 4   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOG_OSPEEDR_OSPEEDR1_Shift, 2   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOG_OSPEEDR_OSPEEDR0_Shift, 0   @ bitWidth 2 (Port x configuration bits y =  0..15)  
 
    .equ GPIOG_PUPDR, GPIOG_BASE + 0xC @ (GPIO port pull-up/pull-down  register) 
        .equ GPIOG_PUPDR_PUPDR15_Shift, 30   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOG_PUPDR_PUPDR14_Shift, 28   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOG_PUPDR_PUPDR13_Shift, 26   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOG_PUPDR_PUPDR12_Shift, 24   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOG_PUPDR_PUPDR11_Shift, 22   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOG_PUPDR_PUPDR10_Shift, 20   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOG_PUPDR_PUPDR9_Shift, 18   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOG_PUPDR_PUPDR8_Shift, 16   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOG_PUPDR_PUPDR7_Shift, 14   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOG_PUPDR_PUPDR6_Shift, 12   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOG_PUPDR_PUPDR5_Shift, 10   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOG_PUPDR_PUPDR4_Shift, 8   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOG_PUPDR_PUPDR3_Shift, 6   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOG_PUPDR_PUPDR2_Shift, 4   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOG_PUPDR_PUPDR1_Shift, 2   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOG_PUPDR_PUPDR0_Shift, 0   @ bitWidth 2 (Port x configuration bits y =  0..15)  
 
    .equ GPIOG_IDR, GPIOG_BASE + 0x10 @ (GPIO port input data register) 
        .equ GPIOG_IDR_IDR15, 1 << 15   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOG_IDR_IDR14, 1 << 14   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOG_IDR_IDR13, 1 << 13   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOG_IDR_IDR12, 1 << 12   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOG_IDR_IDR11, 1 << 11   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOG_IDR_IDR10, 1 << 10   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOG_IDR_IDR9, 1 << 9   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOG_IDR_IDR8, 1 << 8   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOG_IDR_IDR7, 1 << 7   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOG_IDR_IDR6, 1 << 6   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOG_IDR_IDR5, 1 << 5   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOG_IDR_IDR4, 1 << 4   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOG_IDR_IDR3, 1 << 3   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOG_IDR_IDR2, 1 << 2   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOG_IDR_IDR1, 1 << 1   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOG_IDR_IDR0, 1 << 0   @ bitWidth 1 (Port input data y =  0..15)  
 
    .equ GPIOG_ODR, GPIOG_BASE + 0x14 @ (GPIO port output data register) 
        .equ GPIOG_ODR_ODR15, 1 << 15   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOG_ODR_ODR14, 1 << 14   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOG_ODR_ODR13, 1 << 13   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOG_ODR_ODR12, 1 << 12   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOG_ODR_ODR11, 1 << 11   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOG_ODR_ODR10, 1 << 10   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOG_ODR_ODR9, 1 << 9   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOG_ODR_ODR8, 1 << 8   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOG_ODR_ODR7, 1 << 7   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOG_ODR_ODR6, 1 << 6   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOG_ODR_ODR5, 1 << 5   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOG_ODR_ODR4, 1 << 4   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOG_ODR_ODR3, 1 << 3   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOG_ODR_ODR2, 1 << 2   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOG_ODR_ODR1, 1 << 1   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOG_ODR_ODR0, 1 << 0   @ bitWidth 1 (Port output data y =  0..15)  
 
    .equ GPIOG_BSRR, GPIOG_BASE + 0x18 @ (GPIO port bit set/reset  register) 
        .equ GPIOG_BSRR_BR15, 1 << 31   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOG_BSRR_BR14, 1 << 30   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOG_BSRR_BR13, 1 << 29   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOG_BSRR_BR12, 1 << 28   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOG_BSRR_BR11, 1 << 27   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOG_BSRR_BR10, 1 << 26   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOG_BSRR_BR9, 1 << 25   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOG_BSRR_BR8, 1 << 24   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOG_BSRR_BR7, 1 << 23   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOG_BSRR_BR6, 1 << 22   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOG_BSRR_BR5, 1 << 21   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOG_BSRR_BR4, 1 << 20   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOG_BSRR_BR3, 1 << 19   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOG_BSRR_BR2, 1 << 18   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOG_BSRR_BR1, 1 << 17   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOG_BSRR_BR0, 1 << 16   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOG_BSRR_BS15, 1 << 15   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOG_BSRR_BS14, 1 << 14   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOG_BSRR_BS13, 1 << 13   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOG_BSRR_BS12, 1 << 12   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOG_BSRR_BS11, 1 << 11   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOG_BSRR_BS10, 1 << 10   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOG_BSRR_BS9, 1 << 9   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOG_BSRR_BS8, 1 << 8   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOG_BSRR_BS7, 1 << 7   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOG_BSRR_BS6, 1 << 6   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOG_BSRR_BS5, 1 << 5   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOG_BSRR_BS4, 1 << 4   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOG_BSRR_BS3, 1 << 3   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOG_BSRR_BS2, 1 << 2   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOG_BSRR_BS1, 1 << 1   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOG_BSRR_BS0, 1 << 0   @ bitWidth 1 (Port x set bit y y=  0..15)  
 
    .equ GPIOG_LCKR, GPIOG_BASE + 0x1C @ (GPIO port configuration lock  register) 
        .equ GPIOG_LCKR_LCKK, 1 << 16   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOG_LCKR_LCK15, 1 << 15   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOG_LCKR_LCK14, 1 << 14   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOG_LCKR_LCK13, 1 << 13   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOG_LCKR_LCK12, 1 << 12   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOG_LCKR_LCK11, 1 << 11   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOG_LCKR_LCK10, 1 << 10   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOG_LCKR_LCK9, 1 << 9   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOG_LCKR_LCK8, 1 << 8   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOG_LCKR_LCK7, 1 << 7   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOG_LCKR_LCK6, 1 << 6   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOG_LCKR_LCK5, 1 << 5   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOG_LCKR_LCK4, 1 << 4   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOG_LCKR_LCK3, 1 << 3   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOG_LCKR_LCK2, 1 << 2   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOG_LCKR_LCK1, 1 << 1   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOG_LCKR_LCK0, 1 << 0   @ bitWidth 1 (Port x lock bit y y=  0..15)  
 
    .equ GPIOG_AFRL, GPIOG_BASE + 0x20 @ (GPIO alternate function low  register) 
        .equ GPIOG_AFRL_AFRL7_Shift, 28   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOG_AFRL_AFRL6_Shift, 24   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOG_AFRL_AFRL5_Shift, 20   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOG_AFRL_AFRL4_Shift, 16   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOG_AFRL_AFRL3_Shift, 12   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOG_AFRL_AFRL2_Shift, 8   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOG_AFRL_AFRL1_Shift, 4   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOG_AFRL_AFRL0_Shift, 0   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
 
    .equ GPIOG_AFRH, GPIOG_BASE + 0x24 @ (GPIO alternate function high  register) 
        .equ GPIOG_AFRH_AFRH15_Shift, 28   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOG_AFRH_AFRH14_Shift, 24   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOG_AFRH_AFRH13_Shift, 20   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOG_AFRH_AFRH12_Shift, 16   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOG_AFRH_AFRH11_Shift, 12   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOG_AFRH_AFRH10_Shift, 8   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOG_AFRH_AFRH9_Shift, 4   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOG_AFRH_AFRH8_Shift, 0   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
 

@=========================== GPIOF ===========================@
.equ GPIOF_BASE, 0x40021400 @ (General-purpose I/Os) 
    .equ GPIOF_MODER, GPIOF_BASE + 0x0 @ (GPIO port mode register) 
        .equ GPIOF_MODER_MODER15_Shift, 30   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_MODER_MODER14_Shift, 28   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_MODER_MODER13_Shift, 26   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_MODER_MODER12_Shift, 24   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_MODER_MODER11_Shift, 22   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_MODER_MODER10_Shift, 20   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_MODER_MODER9_Shift, 18   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_MODER_MODER8_Shift, 16   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_MODER_MODER7_Shift, 14   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_MODER_MODER6_Shift, 12   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_MODER_MODER5_Shift, 10   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_MODER_MODER4_Shift, 8   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_MODER_MODER3_Shift, 6   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_MODER_MODER2_Shift, 4   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_MODER_MODER1_Shift, 2   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_MODER_MODER0_Shift, 0   @ bitWidth 2 (Port x configuration bits y =  0..15)  
 
    .equ GPIOF_OTYPER, GPIOF_BASE + 0x4 @ (GPIO port output type register) 
        .equ GPIOF_OTYPER_OT15, 1 << 15   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOF_OTYPER_OT14, 1 << 14   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOF_OTYPER_OT13, 1 << 13   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOF_OTYPER_OT12, 1 << 12   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOF_OTYPER_OT11, 1 << 11   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOF_OTYPER_OT10, 1 << 10   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOF_OTYPER_OT9, 1 << 9   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOF_OTYPER_OT8, 1 << 8   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOF_OTYPER_OT7, 1 << 7   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOF_OTYPER_OT6, 1 << 6   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOF_OTYPER_OT5, 1 << 5   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOF_OTYPER_OT4, 1 << 4   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOF_OTYPER_OT3, 1 << 3   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOF_OTYPER_OT2, 1 << 2   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOF_OTYPER_OT1, 1 << 1   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOF_OTYPER_OT0, 1 << 0   @ bitWidth 1 (Port x configuration bits y =  0..15)  
 
    .equ GPIOF_OSPEEDR, GPIOF_BASE + 0x8 @ (GPIO port output speed  register) 
        .equ GPIOF_OSPEEDR_OSPEEDR15_Shift, 30   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_OSPEEDR_OSPEEDR14_Shift, 28   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_OSPEEDR_OSPEEDR13_Shift, 26   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_OSPEEDR_OSPEEDR12_Shift, 24   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_OSPEEDR_OSPEEDR11_Shift, 22   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_OSPEEDR_OSPEEDR10_Shift, 20   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_OSPEEDR_OSPEEDR9_Shift, 18   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_OSPEEDR_OSPEEDR8_Shift, 16   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_OSPEEDR_OSPEEDR7_Shift, 14   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_OSPEEDR_OSPEEDR6_Shift, 12   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_OSPEEDR_OSPEEDR5_Shift, 10   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_OSPEEDR_OSPEEDR4_Shift, 8   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_OSPEEDR_OSPEEDR3_Shift, 6   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_OSPEEDR_OSPEEDR2_Shift, 4   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_OSPEEDR_OSPEEDR1_Shift, 2   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_OSPEEDR_OSPEEDR0_Shift, 0   @ bitWidth 2 (Port x configuration bits y =  0..15)  
 
    .equ GPIOF_PUPDR, GPIOF_BASE + 0xC @ (GPIO port pull-up/pull-down  register) 
        .equ GPIOF_PUPDR_PUPDR15_Shift, 30   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_PUPDR_PUPDR14_Shift, 28   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_PUPDR_PUPDR13_Shift, 26   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_PUPDR_PUPDR12_Shift, 24   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_PUPDR_PUPDR11_Shift, 22   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_PUPDR_PUPDR10_Shift, 20   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_PUPDR_PUPDR9_Shift, 18   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_PUPDR_PUPDR8_Shift, 16   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_PUPDR_PUPDR7_Shift, 14   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_PUPDR_PUPDR6_Shift, 12   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_PUPDR_PUPDR5_Shift, 10   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_PUPDR_PUPDR4_Shift, 8   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_PUPDR_PUPDR3_Shift, 6   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_PUPDR_PUPDR2_Shift, 4   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_PUPDR_PUPDR1_Shift, 2   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_PUPDR_PUPDR0_Shift, 0   @ bitWidth 2 (Port x configuration bits y =  0..15)  
 
    .equ GPIOF_IDR, GPIOF_BASE + 0x10 @ (GPIO port input data register) 
        .equ GPIOF_IDR_IDR15, 1 << 15   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOF_IDR_IDR14, 1 << 14   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOF_IDR_IDR13, 1 << 13   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOF_IDR_IDR12, 1 << 12   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOF_IDR_IDR11, 1 << 11   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOF_IDR_IDR10, 1 << 10   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOF_IDR_IDR9, 1 << 9   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOF_IDR_IDR8, 1 << 8   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOF_IDR_IDR7, 1 << 7   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOF_IDR_IDR6, 1 << 6   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOF_IDR_IDR5, 1 << 5   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOF_IDR_IDR4, 1 << 4   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOF_IDR_IDR3, 1 << 3   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOF_IDR_IDR2, 1 << 2   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOF_IDR_IDR1, 1 << 1   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOF_IDR_IDR0, 1 << 0   @ bitWidth 1 (Port input data y =  0..15)  
 
    .equ GPIOF_ODR, GPIOF_BASE + 0x14 @ (GPIO port output data register) 
        .equ GPIOF_ODR_ODR15, 1 << 15   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOF_ODR_ODR14, 1 << 14   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOF_ODR_ODR13, 1 << 13   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOF_ODR_ODR12, 1 << 12   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOF_ODR_ODR11, 1 << 11   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOF_ODR_ODR10, 1 << 10   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOF_ODR_ODR9, 1 << 9   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOF_ODR_ODR8, 1 << 8   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOF_ODR_ODR7, 1 << 7   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOF_ODR_ODR6, 1 << 6   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOF_ODR_ODR5, 1 << 5   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOF_ODR_ODR4, 1 << 4   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOF_ODR_ODR3, 1 << 3   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOF_ODR_ODR2, 1 << 2   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOF_ODR_ODR1, 1 << 1   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOF_ODR_ODR0, 1 << 0   @ bitWidth 1 (Port output data y =  0..15)  
 
    .equ GPIOF_BSRR, GPIOF_BASE + 0x18 @ (GPIO port bit set/reset  register) 
        .equ GPIOF_BSRR_BR15, 1 << 31   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOF_BSRR_BR14, 1 << 30   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOF_BSRR_BR13, 1 << 29   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOF_BSRR_BR12, 1 << 28   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOF_BSRR_BR11, 1 << 27   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOF_BSRR_BR10, 1 << 26   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOF_BSRR_BR9, 1 << 25   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOF_BSRR_BR8, 1 << 24   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOF_BSRR_BR7, 1 << 23   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOF_BSRR_BR6, 1 << 22   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOF_BSRR_BR5, 1 << 21   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOF_BSRR_BR4, 1 << 20   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOF_BSRR_BR3, 1 << 19   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOF_BSRR_BR2, 1 << 18   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOF_BSRR_BR1, 1 << 17   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOF_BSRR_BR0, 1 << 16   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOF_BSRR_BS15, 1 << 15   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOF_BSRR_BS14, 1 << 14   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOF_BSRR_BS13, 1 << 13   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOF_BSRR_BS12, 1 << 12   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOF_BSRR_BS11, 1 << 11   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOF_BSRR_BS10, 1 << 10   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOF_BSRR_BS9, 1 << 9   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOF_BSRR_BS8, 1 << 8   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOF_BSRR_BS7, 1 << 7   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOF_BSRR_BS6, 1 << 6   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOF_BSRR_BS5, 1 << 5   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOF_BSRR_BS4, 1 << 4   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOF_BSRR_BS3, 1 << 3   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOF_BSRR_BS2, 1 << 2   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOF_BSRR_BS1, 1 << 1   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOF_BSRR_BS0, 1 << 0   @ bitWidth 1 (Port x set bit y y=  0..15)  
 
    .equ GPIOF_LCKR, GPIOF_BASE + 0x1C @ (GPIO port configuration lock  register) 
        .equ GPIOF_LCKR_LCKK, 1 << 16   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOF_LCKR_LCK15, 1 << 15   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOF_LCKR_LCK14, 1 << 14   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOF_LCKR_LCK13, 1 << 13   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOF_LCKR_LCK12, 1 << 12   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOF_LCKR_LCK11, 1 << 11   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOF_LCKR_LCK10, 1 << 10   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOF_LCKR_LCK9, 1 << 9   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOF_LCKR_LCK8, 1 << 8   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOF_LCKR_LCK7, 1 << 7   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOF_LCKR_LCK6, 1 << 6   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOF_LCKR_LCK5, 1 << 5   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOF_LCKR_LCK4, 1 << 4   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOF_LCKR_LCK3, 1 << 3   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOF_LCKR_LCK2, 1 << 2   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOF_LCKR_LCK1, 1 << 1   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOF_LCKR_LCK0, 1 << 0   @ bitWidth 1 (Port x lock bit y y=  0..15)  
 
    .equ GPIOF_AFRL, GPIOF_BASE + 0x20 @ (GPIO alternate function low  register) 
        .equ GPIOF_AFRL_AFRL7_Shift, 28   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOF_AFRL_AFRL6_Shift, 24   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOF_AFRL_AFRL5_Shift, 20   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOF_AFRL_AFRL4_Shift, 16   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOF_AFRL_AFRL3_Shift, 12   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOF_AFRL_AFRL2_Shift, 8   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOF_AFRL_AFRL1_Shift, 4   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOF_AFRL_AFRL0_Shift, 0   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
 
    .equ GPIOF_AFRH, GPIOF_BASE + 0x24 @ (GPIO alternate function high  register) 
        .equ GPIOF_AFRH_AFRH15_Shift, 28   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOF_AFRH_AFRH14_Shift, 24   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOF_AFRH_AFRH13_Shift, 20   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOF_AFRH_AFRH12_Shift, 16   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOF_AFRH_AFRH11_Shift, 12   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOF_AFRH_AFRH10_Shift, 8   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOF_AFRH_AFRH9_Shift, 4   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOF_AFRH_AFRH8_Shift, 0   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
 

@=========================== GPIOE ===========================@
.equ GPIOE_BASE, 0x40021000 @ (General-purpose I/Os) 
    .equ GPIOE_MODER, GPIOE_BASE + 0x0 @ (GPIO port mode register) 
        .equ GPIOE_MODER_MODER15_Shift, 30   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOE_MODER_MODER14_Shift, 28   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOE_MODER_MODER13_Shift, 26   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOE_MODER_MODER12_Shift, 24   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOE_MODER_MODER11_Shift, 22   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOE_MODER_MODER10_Shift, 20   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOE_MODER_MODER9_Shift, 18   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOE_MODER_MODER8_Shift, 16   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOE_MODER_MODER7_Shift, 14   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOE_MODER_MODER6_Shift, 12   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOE_MODER_MODER5_Shift, 10   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOE_MODER_MODER4_Shift, 8   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOE_MODER_MODER3_Shift, 6   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOE_MODER_MODER2_Shift, 4   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOE_MODER_MODER1_Shift, 2   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOE_MODER_MODER0_Shift, 0   @ bitWidth 2 (Port x configuration bits y =  0..15)  
 
    .equ GPIOE_OTYPER, GPIOE_BASE + 0x4 @ (GPIO port output type register) 
        .equ GPIOE_OTYPER_OT15, 1 << 15   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOE_OTYPER_OT14, 1 << 14   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOE_OTYPER_OT13, 1 << 13   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOE_OTYPER_OT12, 1 << 12   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOE_OTYPER_OT11, 1 << 11   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOE_OTYPER_OT10, 1 << 10   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOE_OTYPER_OT9, 1 << 9   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOE_OTYPER_OT8, 1 << 8   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOE_OTYPER_OT7, 1 << 7   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOE_OTYPER_OT6, 1 << 6   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOE_OTYPER_OT5, 1 << 5   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOE_OTYPER_OT4, 1 << 4   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOE_OTYPER_OT3, 1 << 3   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOE_OTYPER_OT2, 1 << 2   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOE_OTYPER_OT1, 1 << 1   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOE_OTYPER_OT0, 1 << 0   @ bitWidth 1 (Port x configuration bits y =  0..15)  
 
    .equ GPIOE_OSPEEDR, GPIOE_BASE + 0x8 @ (GPIO port output speed  register) 
        .equ GPIOE_OSPEEDR_OSPEEDR15_Shift, 30   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOE_OSPEEDR_OSPEEDR14_Shift, 28   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOE_OSPEEDR_OSPEEDR13_Shift, 26   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOE_OSPEEDR_OSPEEDR12_Shift, 24   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOE_OSPEEDR_OSPEEDR11_Shift, 22   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOE_OSPEEDR_OSPEEDR10_Shift, 20   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOE_OSPEEDR_OSPEEDR9_Shift, 18   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOE_OSPEEDR_OSPEEDR8_Shift, 16   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOE_OSPEEDR_OSPEEDR7_Shift, 14   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOE_OSPEEDR_OSPEEDR6_Shift, 12   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOE_OSPEEDR_OSPEEDR5_Shift, 10   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOE_OSPEEDR_OSPEEDR4_Shift, 8   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOE_OSPEEDR_OSPEEDR3_Shift, 6   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOE_OSPEEDR_OSPEEDR2_Shift, 4   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOE_OSPEEDR_OSPEEDR1_Shift, 2   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOE_OSPEEDR_OSPEEDR0_Shift, 0   @ bitWidth 2 (Port x configuration bits y =  0..15)  
 
    .equ GPIOE_PUPDR, GPIOE_BASE + 0xC @ (GPIO port pull-up/pull-down  register) 
        .equ GPIOE_PUPDR_PUPDR15_Shift, 30   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOE_PUPDR_PUPDR14_Shift, 28   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOE_PUPDR_PUPDR13_Shift, 26   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOE_PUPDR_PUPDR12_Shift, 24   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOE_PUPDR_PUPDR11_Shift, 22   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOE_PUPDR_PUPDR10_Shift, 20   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOE_PUPDR_PUPDR9_Shift, 18   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOE_PUPDR_PUPDR8_Shift, 16   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOE_PUPDR_PUPDR7_Shift, 14   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOE_PUPDR_PUPDR6_Shift, 12   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOE_PUPDR_PUPDR5_Shift, 10   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOE_PUPDR_PUPDR4_Shift, 8   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOE_PUPDR_PUPDR3_Shift, 6   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOE_PUPDR_PUPDR2_Shift, 4   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOE_PUPDR_PUPDR1_Shift, 2   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOE_PUPDR_PUPDR0_Shift, 0   @ bitWidth 2 (Port x configuration bits y =  0..15)  
 
    .equ GPIOE_IDR, GPIOE_BASE + 0x10 @ (GPIO port input data register) 
        .equ GPIOE_IDR_IDR15, 1 << 15   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOE_IDR_IDR14, 1 << 14   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOE_IDR_IDR13, 1 << 13   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOE_IDR_IDR12, 1 << 12   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOE_IDR_IDR11, 1 << 11   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOE_IDR_IDR10, 1 << 10   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOE_IDR_IDR9, 1 << 9   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOE_IDR_IDR8, 1 << 8   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOE_IDR_IDR7, 1 << 7   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOE_IDR_IDR6, 1 << 6   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOE_IDR_IDR5, 1 << 5   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOE_IDR_IDR4, 1 << 4   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOE_IDR_IDR3, 1 << 3   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOE_IDR_IDR2, 1 << 2   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOE_IDR_IDR1, 1 << 1   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOE_IDR_IDR0, 1 << 0   @ bitWidth 1 (Port input data y =  0..15)  
 
    .equ GPIOE_ODR, GPIOE_BASE + 0x14 @ (GPIO port output data register) 
        .equ GPIOE_ODR_ODR15, 1 << 15   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOE_ODR_ODR14, 1 << 14   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOE_ODR_ODR13, 1 << 13   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOE_ODR_ODR12, 1 << 12   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOE_ODR_ODR11, 1 << 11   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOE_ODR_ODR10, 1 << 10   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOE_ODR_ODR9, 1 << 9   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOE_ODR_ODR8, 1 << 8   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOE_ODR_ODR7, 1 << 7   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOE_ODR_ODR6, 1 << 6   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOE_ODR_ODR5, 1 << 5   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOE_ODR_ODR4, 1 << 4   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOE_ODR_ODR3, 1 << 3   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOE_ODR_ODR2, 1 << 2   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOE_ODR_ODR1, 1 << 1   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOE_ODR_ODR0, 1 << 0   @ bitWidth 1 (Port output data y =  0..15)  
 
    .equ GPIOE_BSRR, GPIOE_BASE + 0x18 @ (GPIO port bit set/reset  register) 
        .equ GPIOE_BSRR_BR15, 1 << 31   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOE_BSRR_BR14, 1 << 30   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOE_BSRR_BR13, 1 << 29   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOE_BSRR_BR12, 1 << 28   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOE_BSRR_BR11, 1 << 27   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOE_BSRR_BR10, 1 << 26   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOE_BSRR_BR9, 1 << 25   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOE_BSRR_BR8, 1 << 24   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOE_BSRR_BR7, 1 << 23   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOE_BSRR_BR6, 1 << 22   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOE_BSRR_BR5, 1 << 21   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOE_BSRR_BR4, 1 << 20   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOE_BSRR_BR3, 1 << 19   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOE_BSRR_BR2, 1 << 18   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOE_BSRR_BR1, 1 << 17   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOE_BSRR_BR0, 1 << 16   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOE_BSRR_BS15, 1 << 15   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOE_BSRR_BS14, 1 << 14   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOE_BSRR_BS13, 1 << 13   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOE_BSRR_BS12, 1 << 12   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOE_BSRR_BS11, 1 << 11   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOE_BSRR_BS10, 1 << 10   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOE_BSRR_BS9, 1 << 9   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOE_BSRR_BS8, 1 << 8   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOE_BSRR_BS7, 1 << 7   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOE_BSRR_BS6, 1 << 6   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOE_BSRR_BS5, 1 << 5   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOE_BSRR_BS4, 1 << 4   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOE_BSRR_BS3, 1 << 3   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOE_BSRR_BS2, 1 << 2   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOE_BSRR_BS1, 1 << 1   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOE_BSRR_BS0, 1 << 0   @ bitWidth 1 (Port x set bit y y=  0..15)  
 
    .equ GPIOE_LCKR, GPIOE_BASE + 0x1C @ (GPIO port configuration lock  register) 
        .equ GPIOE_LCKR_LCKK, 1 << 16   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOE_LCKR_LCK15, 1 << 15   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOE_LCKR_LCK14, 1 << 14   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOE_LCKR_LCK13, 1 << 13   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOE_LCKR_LCK12, 1 << 12   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOE_LCKR_LCK11, 1 << 11   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOE_LCKR_LCK10, 1 << 10   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOE_LCKR_LCK9, 1 << 9   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOE_LCKR_LCK8, 1 << 8   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOE_LCKR_LCK7, 1 << 7   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOE_LCKR_LCK6, 1 << 6   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOE_LCKR_LCK5, 1 << 5   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOE_LCKR_LCK4, 1 << 4   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOE_LCKR_LCK3, 1 << 3   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOE_LCKR_LCK2, 1 << 2   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOE_LCKR_LCK1, 1 << 1   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOE_LCKR_LCK0, 1 << 0   @ bitWidth 1 (Port x lock bit y y=  0..15)  
 
    .equ GPIOE_AFRL, GPIOE_BASE + 0x20 @ (GPIO alternate function low  register) 
        .equ GPIOE_AFRL_AFRL7_Shift, 28   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOE_AFRL_AFRL6_Shift, 24   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOE_AFRL_AFRL5_Shift, 20   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOE_AFRL_AFRL4_Shift, 16   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOE_AFRL_AFRL3_Shift, 12   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOE_AFRL_AFRL2_Shift, 8   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOE_AFRL_AFRL1_Shift, 4   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOE_AFRL_AFRL0_Shift, 0   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
 
    .equ GPIOE_AFRH, GPIOE_BASE + 0x24 @ (GPIO alternate function high  register) 
        .equ GPIOE_AFRH_AFRH15_Shift, 28   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOE_AFRH_AFRH14_Shift, 24   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOE_AFRH_AFRH13_Shift, 20   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOE_AFRH_AFRH12_Shift, 16   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOE_AFRH_AFRH11_Shift, 12   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOE_AFRH_AFRH10_Shift, 8   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOE_AFRH_AFRH9_Shift, 4   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOE_AFRH_AFRH8_Shift, 0   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
 

@=========================== GPIOD ===========================@
.equ GPIOD_BASE, 0X40020C00 @ (General-purpose I/Os) 
    .equ GPIOD_MODER, GPIOD_BASE + 0x0 @ (GPIO port mode register) 
        .equ GPIOD_MODER_MODER15_Shift, 30   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_MODER_MODER14_Shift, 28   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_MODER_MODER13_Shift, 26   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_MODER_MODER12_Shift, 24   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_MODER_MODER11_Shift, 22   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_MODER_MODER10_Shift, 20   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_MODER_MODER9_Shift, 18   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_MODER_MODER8_Shift, 16   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_MODER_MODER7_Shift, 14   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_MODER_MODER6_Shift, 12   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_MODER_MODER5_Shift, 10   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_MODER_MODER4_Shift, 8   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_MODER_MODER3_Shift, 6   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_MODER_MODER2_Shift, 4   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_MODER_MODER1_Shift, 2   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_MODER_MODER0_Shift, 0   @ bitWidth 2 (Port x configuration bits y =  0..15)  
 
    .equ GPIOD_OTYPER, GPIOD_BASE + 0x4 @ (GPIO port output type register) 
        .equ GPIOD_OTYPER_OT15, 1 << 15   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOD_OTYPER_OT14, 1 << 14   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOD_OTYPER_OT13, 1 << 13   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOD_OTYPER_OT12, 1 << 12   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOD_OTYPER_OT11, 1 << 11   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOD_OTYPER_OT10, 1 << 10   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOD_OTYPER_OT9, 1 << 9   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOD_OTYPER_OT8, 1 << 8   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOD_OTYPER_OT7, 1 << 7   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOD_OTYPER_OT6, 1 << 6   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOD_OTYPER_OT5, 1 << 5   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOD_OTYPER_OT4, 1 << 4   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOD_OTYPER_OT3, 1 << 3   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOD_OTYPER_OT2, 1 << 2   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOD_OTYPER_OT1, 1 << 1   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOD_OTYPER_OT0, 1 << 0   @ bitWidth 1 (Port x configuration bits y =  0..15)  
 
    .equ GPIOD_OSPEEDR, GPIOD_BASE + 0x8 @ (GPIO port output speed  register) 
        .equ GPIOD_OSPEEDR_OSPEEDR15_Shift, 30   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_OSPEEDR_OSPEEDR14_Shift, 28   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_OSPEEDR_OSPEEDR13_Shift, 26   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_OSPEEDR_OSPEEDR12_Shift, 24   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_OSPEEDR_OSPEEDR11_Shift, 22   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_OSPEEDR_OSPEEDR10_Shift, 20   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_OSPEEDR_OSPEEDR9_Shift, 18   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_OSPEEDR_OSPEEDR8_Shift, 16   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_OSPEEDR_OSPEEDR7_Shift, 14   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_OSPEEDR_OSPEEDR6_Shift, 12   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_OSPEEDR_OSPEEDR5_Shift, 10   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_OSPEEDR_OSPEEDR4_Shift, 8   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_OSPEEDR_OSPEEDR3_Shift, 6   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_OSPEEDR_OSPEEDR2_Shift, 4   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_OSPEEDR_OSPEEDR1_Shift, 2   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_OSPEEDR_OSPEEDR0_Shift, 0   @ bitWidth 2 (Port x configuration bits y =  0..15)  
 
    .equ GPIOD_PUPDR, GPIOD_BASE + 0xC @ (GPIO port pull-up/pull-down  register) 
        .equ GPIOD_PUPDR_PUPDR15_Shift, 30   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_PUPDR_PUPDR14_Shift, 28   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_PUPDR_PUPDR13_Shift, 26   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_PUPDR_PUPDR12_Shift, 24   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_PUPDR_PUPDR11_Shift, 22   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_PUPDR_PUPDR10_Shift, 20   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_PUPDR_PUPDR9_Shift, 18   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_PUPDR_PUPDR8_Shift, 16   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_PUPDR_PUPDR7_Shift, 14   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_PUPDR_PUPDR6_Shift, 12   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_PUPDR_PUPDR5_Shift, 10   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_PUPDR_PUPDR4_Shift, 8   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_PUPDR_PUPDR3_Shift, 6   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_PUPDR_PUPDR2_Shift, 4   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_PUPDR_PUPDR1_Shift, 2   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_PUPDR_PUPDR0_Shift, 0   @ bitWidth 2 (Port x configuration bits y =  0..15)  
 
    .equ GPIOD_IDR, GPIOD_BASE + 0x10 @ (GPIO port input data register) 
        .equ GPIOD_IDR_IDR15, 1 << 15   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOD_IDR_IDR14, 1 << 14   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOD_IDR_IDR13, 1 << 13   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOD_IDR_IDR12, 1 << 12   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOD_IDR_IDR11, 1 << 11   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOD_IDR_IDR10, 1 << 10   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOD_IDR_IDR9, 1 << 9   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOD_IDR_IDR8, 1 << 8   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOD_IDR_IDR7, 1 << 7   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOD_IDR_IDR6, 1 << 6   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOD_IDR_IDR5, 1 << 5   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOD_IDR_IDR4, 1 << 4   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOD_IDR_IDR3, 1 << 3   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOD_IDR_IDR2, 1 << 2   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOD_IDR_IDR1, 1 << 1   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOD_IDR_IDR0, 1 << 0   @ bitWidth 1 (Port input data y =  0..15)  
 
    .equ GPIOD_ODR, GPIOD_BASE + 0x14 @ (GPIO port output data register) 
        .equ GPIOD_ODR_ODR15, 1 << 15   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOD_ODR_ODR14, 1 << 14   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOD_ODR_ODR13, 1 << 13   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOD_ODR_ODR12, 1 << 12   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOD_ODR_ODR11, 1 << 11   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOD_ODR_ODR10, 1 << 10   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOD_ODR_ODR9, 1 << 9   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOD_ODR_ODR8, 1 << 8   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOD_ODR_ODR7, 1 << 7   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOD_ODR_ODR6, 1 << 6   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOD_ODR_ODR5, 1 << 5   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOD_ODR_ODR4, 1 << 4   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOD_ODR_ODR3, 1 << 3   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOD_ODR_ODR2, 1 << 2   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOD_ODR_ODR1, 1 << 1   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOD_ODR_ODR0, 1 << 0   @ bitWidth 1 (Port output data y =  0..15)  
 
    .equ GPIOD_BSRR, GPIOD_BASE + 0x18 @ (GPIO port bit set/reset  register) 
        .equ GPIOD_BSRR_BR15, 1 << 31   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOD_BSRR_BR14, 1 << 30   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOD_BSRR_BR13, 1 << 29   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOD_BSRR_BR12, 1 << 28   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOD_BSRR_BR11, 1 << 27   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOD_BSRR_BR10, 1 << 26   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOD_BSRR_BR9, 1 << 25   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOD_BSRR_BR8, 1 << 24   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOD_BSRR_BR7, 1 << 23   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOD_BSRR_BR6, 1 << 22   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOD_BSRR_BR5, 1 << 21   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOD_BSRR_BR4, 1 << 20   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOD_BSRR_BR3, 1 << 19   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOD_BSRR_BR2, 1 << 18   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOD_BSRR_BR1, 1 << 17   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOD_BSRR_BR0, 1 << 16   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOD_BSRR_BS15, 1 << 15   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOD_BSRR_BS14, 1 << 14   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOD_BSRR_BS13, 1 << 13   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOD_BSRR_BS12, 1 << 12   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOD_BSRR_BS11, 1 << 11   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOD_BSRR_BS10, 1 << 10   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOD_BSRR_BS9, 1 << 9   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOD_BSRR_BS8, 1 << 8   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOD_BSRR_BS7, 1 << 7   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOD_BSRR_BS6, 1 << 6   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOD_BSRR_BS5, 1 << 5   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOD_BSRR_BS4, 1 << 4   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOD_BSRR_BS3, 1 << 3   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOD_BSRR_BS2, 1 << 2   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOD_BSRR_BS1, 1 << 1   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOD_BSRR_BS0, 1 << 0   @ bitWidth 1 (Port x set bit y y=  0..15)  
 
    .equ GPIOD_LCKR, GPIOD_BASE + 0x1C @ (GPIO port configuration lock  register) 
        .equ GPIOD_LCKR_LCKK, 1 << 16   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOD_LCKR_LCK15, 1 << 15   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOD_LCKR_LCK14, 1 << 14   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOD_LCKR_LCK13, 1 << 13   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOD_LCKR_LCK12, 1 << 12   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOD_LCKR_LCK11, 1 << 11   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOD_LCKR_LCK10, 1 << 10   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOD_LCKR_LCK9, 1 << 9   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOD_LCKR_LCK8, 1 << 8   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOD_LCKR_LCK7, 1 << 7   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOD_LCKR_LCK6, 1 << 6   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOD_LCKR_LCK5, 1 << 5   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOD_LCKR_LCK4, 1 << 4   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOD_LCKR_LCK3, 1 << 3   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOD_LCKR_LCK2, 1 << 2   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOD_LCKR_LCK1, 1 << 1   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOD_LCKR_LCK0, 1 << 0   @ bitWidth 1 (Port x lock bit y y=  0..15)  
 
    .equ GPIOD_AFRL, GPIOD_BASE + 0x20 @ (GPIO alternate function low  register) 
        .equ GPIOD_AFRL_AFRL7_Shift, 28   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOD_AFRL_AFRL6_Shift, 24   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOD_AFRL_AFRL5_Shift, 20   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOD_AFRL_AFRL4_Shift, 16   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOD_AFRL_AFRL3_Shift, 12   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOD_AFRL_AFRL2_Shift, 8   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOD_AFRL_AFRL1_Shift, 4   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOD_AFRL_AFRL0_Shift, 0   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
 
    .equ GPIOD_AFRH, GPIOD_BASE + 0x24 @ (GPIO alternate function high  register) 
        .equ GPIOD_AFRH_AFRH15_Shift, 28   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOD_AFRH_AFRH14_Shift, 24   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOD_AFRH_AFRH13_Shift, 20   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOD_AFRH_AFRH12_Shift, 16   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOD_AFRH_AFRH11_Shift, 12   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOD_AFRH_AFRH10_Shift, 8   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOD_AFRH_AFRH9_Shift, 4   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOD_AFRH_AFRH8_Shift, 0   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
 

@=========================== GPIOC ===========================@
.equ GPIOC_BASE, 0x40020800 @ (General-purpose I/Os) 
    .equ GPIOC_MODER, GPIOC_BASE + 0x0 @ (GPIO port mode register) 
        .equ GPIOC_MODER_MODER15_Shift, 30   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_MODER_MODER14_Shift, 28   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_MODER_MODER13_Shift, 26   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_MODER_MODER12_Shift, 24   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_MODER_MODER11_Shift, 22   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_MODER_MODER10_Shift, 20   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_MODER_MODER9_Shift, 18   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_MODER_MODER8_Shift, 16   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_MODER_MODER7_Shift, 14   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_MODER_MODER6_Shift, 12   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_MODER_MODER5_Shift, 10   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_MODER_MODER4_Shift, 8   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_MODER_MODER3_Shift, 6   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_MODER_MODER2_Shift, 4   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_MODER_MODER1_Shift, 2   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_MODER_MODER0_Shift, 0   @ bitWidth 2 (Port x configuration bits y =  0..15)  
 
    .equ GPIOC_OTYPER, GPIOC_BASE + 0x4 @ (GPIO port output type register) 
        .equ GPIOC_OTYPER_OT15, 1 << 15   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOC_OTYPER_OT14, 1 << 14   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOC_OTYPER_OT13, 1 << 13   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOC_OTYPER_OT12, 1 << 12   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOC_OTYPER_OT11, 1 << 11   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOC_OTYPER_OT10, 1 << 10   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOC_OTYPER_OT9, 1 << 9   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOC_OTYPER_OT8, 1 << 8   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOC_OTYPER_OT7, 1 << 7   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOC_OTYPER_OT6, 1 << 6   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOC_OTYPER_OT5, 1 << 5   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOC_OTYPER_OT4, 1 << 4   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOC_OTYPER_OT3, 1 << 3   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOC_OTYPER_OT2, 1 << 2   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOC_OTYPER_OT1, 1 << 1   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOC_OTYPER_OT0, 1 << 0   @ bitWidth 1 (Port x configuration bits y =  0..15)  
 
    .equ GPIOC_OSPEEDR, GPIOC_BASE + 0x8 @ (GPIO port output speed  register) 
        .equ GPIOC_OSPEEDR_OSPEEDR15_Shift, 30   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_OSPEEDR_OSPEEDR14_Shift, 28   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_OSPEEDR_OSPEEDR13_Shift, 26   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_OSPEEDR_OSPEEDR12_Shift, 24   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_OSPEEDR_OSPEEDR11_Shift, 22   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_OSPEEDR_OSPEEDR10_Shift, 20   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_OSPEEDR_OSPEEDR9_Shift, 18   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_OSPEEDR_OSPEEDR8_Shift, 16   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_OSPEEDR_OSPEEDR7_Shift, 14   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_OSPEEDR_OSPEEDR6_Shift, 12   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_OSPEEDR_OSPEEDR5_Shift, 10   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_OSPEEDR_OSPEEDR4_Shift, 8   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_OSPEEDR_OSPEEDR3_Shift, 6   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_OSPEEDR_OSPEEDR2_Shift, 4   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_OSPEEDR_OSPEEDR1_Shift, 2   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_OSPEEDR_OSPEEDR0_Shift, 0   @ bitWidth 2 (Port x configuration bits y =  0..15)  
 
    .equ GPIOC_PUPDR, GPIOC_BASE + 0xC @ (GPIO port pull-up/pull-down  register) 
        .equ GPIOC_PUPDR_PUPDR15_Shift, 30   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_PUPDR_PUPDR14_Shift, 28   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_PUPDR_PUPDR13_Shift, 26   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_PUPDR_PUPDR12_Shift, 24   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_PUPDR_PUPDR11_Shift, 22   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_PUPDR_PUPDR10_Shift, 20   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_PUPDR_PUPDR9_Shift, 18   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_PUPDR_PUPDR8_Shift, 16   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_PUPDR_PUPDR7_Shift, 14   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_PUPDR_PUPDR6_Shift, 12   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_PUPDR_PUPDR5_Shift, 10   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_PUPDR_PUPDR4_Shift, 8   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_PUPDR_PUPDR3_Shift, 6   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_PUPDR_PUPDR2_Shift, 4   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_PUPDR_PUPDR1_Shift, 2   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_PUPDR_PUPDR0_Shift, 0   @ bitWidth 2 (Port x configuration bits y =  0..15)  
 
    .equ GPIOC_IDR, GPIOC_BASE + 0x10 @ (GPIO port input data register) 
        .equ GPIOC_IDR_IDR15, 1 << 15   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOC_IDR_IDR14, 1 << 14   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOC_IDR_IDR13, 1 << 13   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOC_IDR_IDR12, 1 << 12   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOC_IDR_IDR11, 1 << 11   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOC_IDR_IDR10, 1 << 10   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOC_IDR_IDR9, 1 << 9   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOC_IDR_IDR8, 1 << 8   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOC_IDR_IDR7, 1 << 7   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOC_IDR_IDR6, 1 << 6   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOC_IDR_IDR5, 1 << 5   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOC_IDR_IDR4, 1 << 4   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOC_IDR_IDR3, 1 << 3   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOC_IDR_IDR2, 1 << 2   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOC_IDR_IDR1, 1 << 1   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOC_IDR_IDR0, 1 << 0   @ bitWidth 1 (Port input data y =  0..15)  
 
    .equ GPIOC_ODR, GPIOC_BASE + 0x14 @ (GPIO port output data register) 
        .equ GPIOC_ODR_ODR15, 1 << 15   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOC_ODR_ODR14, 1 << 14   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOC_ODR_ODR13, 1 << 13   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOC_ODR_ODR12, 1 << 12   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOC_ODR_ODR11, 1 << 11   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOC_ODR_ODR10, 1 << 10   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOC_ODR_ODR9, 1 << 9   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOC_ODR_ODR8, 1 << 8   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOC_ODR_ODR7, 1 << 7   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOC_ODR_ODR6, 1 << 6   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOC_ODR_ODR5, 1 << 5   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOC_ODR_ODR4, 1 << 4   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOC_ODR_ODR3, 1 << 3   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOC_ODR_ODR2, 1 << 2   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOC_ODR_ODR1, 1 << 1   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOC_ODR_ODR0, 1 << 0   @ bitWidth 1 (Port output data y =  0..15)  
 
    .equ GPIOC_BSRR, GPIOC_BASE + 0x18 @ (GPIO port bit set/reset  register) 
        .equ GPIOC_BSRR_BR15, 1 << 31   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOC_BSRR_BR14, 1 << 30   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOC_BSRR_BR13, 1 << 29   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOC_BSRR_BR12, 1 << 28   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOC_BSRR_BR11, 1 << 27   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOC_BSRR_BR10, 1 << 26   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOC_BSRR_BR9, 1 << 25   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOC_BSRR_BR8, 1 << 24   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOC_BSRR_BR7, 1 << 23   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOC_BSRR_BR6, 1 << 22   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOC_BSRR_BR5, 1 << 21   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOC_BSRR_BR4, 1 << 20   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOC_BSRR_BR3, 1 << 19   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOC_BSRR_BR2, 1 << 18   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOC_BSRR_BR1, 1 << 17   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOC_BSRR_BR0, 1 << 16   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOC_BSRR_BS15, 1 << 15   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOC_BSRR_BS14, 1 << 14   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOC_BSRR_BS13, 1 << 13   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOC_BSRR_BS12, 1 << 12   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOC_BSRR_BS11, 1 << 11   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOC_BSRR_BS10, 1 << 10   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOC_BSRR_BS9, 1 << 9   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOC_BSRR_BS8, 1 << 8   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOC_BSRR_BS7, 1 << 7   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOC_BSRR_BS6, 1 << 6   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOC_BSRR_BS5, 1 << 5   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOC_BSRR_BS4, 1 << 4   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOC_BSRR_BS3, 1 << 3   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOC_BSRR_BS2, 1 << 2   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOC_BSRR_BS1, 1 << 1   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOC_BSRR_BS0, 1 << 0   @ bitWidth 1 (Port x set bit y y=  0..15)  
 
    .equ GPIOC_LCKR, GPIOC_BASE + 0x1C @ (GPIO port configuration lock  register) 
        .equ GPIOC_LCKR_LCKK, 1 << 16   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOC_LCKR_LCK15, 1 << 15   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOC_LCKR_LCK14, 1 << 14   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOC_LCKR_LCK13, 1 << 13   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOC_LCKR_LCK12, 1 << 12   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOC_LCKR_LCK11, 1 << 11   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOC_LCKR_LCK10, 1 << 10   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOC_LCKR_LCK9, 1 << 9   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOC_LCKR_LCK8, 1 << 8   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOC_LCKR_LCK7, 1 << 7   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOC_LCKR_LCK6, 1 << 6   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOC_LCKR_LCK5, 1 << 5   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOC_LCKR_LCK4, 1 << 4   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOC_LCKR_LCK3, 1 << 3   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOC_LCKR_LCK2, 1 << 2   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOC_LCKR_LCK1, 1 << 1   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOC_LCKR_LCK0, 1 << 0   @ bitWidth 1 (Port x lock bit y y=  0..15)  
 
    .equ GPIOC_AFRL, GPIOC_BASE + 0x20 @ (GPIO alternate function low  register) 
        .equ GPIOC_AFRL_AFRL7_Shift, 28   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOC_AFRL_AFRL6_Shift, 24   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOC_AFRL_AFRL5_Shift, 20   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOC_AFRL_AFRL4_Shift, 16   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOC_AFRL_AFRL3_Shift, 12   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOC_AFRL_AFRL2_Shift, 8   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOC_AFRL_AFRL1_Shift, 4   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOC_AFRL_AFRL0_Shift, 0   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
 
    .equ GPIOC_AFRH, GPIOC_BASE + 0x24 @ (GPIO alternate function high  register) 
        .equ GPIOC_AFRH_AFRH15_Shift, 28   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOC_AFRH_AFRH14_Shift, 24   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOC_AFRH_AFRH13_Shift, 20   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOC_AFRH_AFRH12_Shift, 16   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOC_AFRH_AFRH11_Shift, 12   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOC_AFRH_AFRH10_Shift, 8   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOC_AFRH_AFRH9_Shift, 4   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOC_AFRH_AFRH8_Shift, 0   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
 

@=========================== GPIOB ===========================@
.equ GPIOB_BASE, 0x40020400 @ (General-purpose I/Os) 
    .equ GPIOB_MODER, GPIOB_BASE + 0x0 @ (GPIO port mode register) 
        .equ GPIOB_MODER_MODER15_Shift, 30   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_MODER_MODER14_Shift, 28   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_MODER_MODER13_Shift, 26   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_MODER_MODER12_Shift, 24   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_MODER_MODER11_Shift, 22   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_MODER_MODER10_Shift, 20   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_MODER_MODER9_Shift, 18   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_MODER_MODER8_Shift, 16   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_MODER_MODER7_Shift, 14   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_MODER_MODER6_Shift, 12   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_MODER_MODER5_Shift, 10   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_MODER_MODER4_Shift, 8   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_MODER_MODER3_Shift, 6   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_MODER_MODER2_Shift, 4   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_MODER_MODER1_Shift, 2   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_MODER_MODER0_Shift, 0   @ bitWidth 2 (Port x configuration bits y =  0..15)  
 
    .equ GPIOB_OTYPER, GPIOB_BASE + 0x4 @ (GPIO port output type register) 
        .equ GPIOB_OTYPER_OT15, 1 << 15   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOB_OTYPER_OT14, 1 << 14   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOB_OTYPER_OT13, 1 << 13   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOB_OTYPER_OT12, 1 << 12   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOB_OTYPER_OT11, 1 << 11   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOB_OTYPER_OT10, 1 << 10   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOB_OTYPER_OT9, 1 << 9   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOB_OTYPER_OT8, 1 << 8   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOB_OTYPER_OT7, 1 << 7   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOB_OTYPER_OT6, 1 << 6   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOB_OTYPER_OT5, 1 << 5   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOB_OTYPER_OT4, 1 << 4   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOB_OTYPER_OT3, 1 << 3   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOB_OTYPER_OT2, 1 << 2   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOB_OTYPER_OT1, 1 << 1   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOB_OTYPER_OT0, 1 << 0   @ bitWidth 1 (Port x configuration bits y =  0..15)  
 
    .equ GPIOB_OSPEEDR, GPIOB_BASE + 0x8 @ (GPIO port output speed  register) 
        .equ GPIOB_OSPEEDR_OSPEEDR15_Shift, 30   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_OSPEEDR_OSPEEDR14_Shift, 28   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_OSPEEDR_OSPEEDR13_Shift, 26   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_OSPEEDR_OSPEEDR12_Shift, 24   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_OSPEEDR_OSPEEDR11_Shift, 22   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_OSPEEDR_OSPEEDR10_Shift, 20   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_OSPEEDR_OSPEEDR9_Shift, 18   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_OSPEEDR_OSPEEDR8_Shift, 16   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_OSPEEDR_OSPEEDR7_Shift, 14   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_OSPEEDR_OSPEEDR6_Shift, 12   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_OSPEEDR_OSPEEDR5_Shift, 10   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_OSPEEDR_OSPEEDR4_Shift, 8   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_OSPEEDR_OSPEEDR3_Shift, 6   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_OSPEEDR_OSPEEDR2_Shift, 4   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_OSPEEDR_OSPEEDR1_Shift, 2   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_OSPEEDR_OSPEEDR0_Shift, 0   @ bitWidth 2 (Port x configuration bits y =  0..15)  
 
    .equ GPIOB_PUPDR, GPIOB_BASE + 0xC @ (GPIO port pull-up/pull-down  register) 
        .equ GPIOB_PUPDR_PUPDR15_Shift, 30   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_PUPDR_PUPDR14_Shift, 28   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_PUPDR_PUPDR13_Shift, 26   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_PUPDR_PUPDR12_Shift, 24   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_PUPDR_PUPDR11_Shift, 22   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_PUPDR_PUPDR10_Shift, 20   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_PUPDR_PUPDR9_Shift, 18   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_PUPDR_PUPDR8_Shift, 16   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_PUPDR_PUPDR7_Shift, 14   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_PUPDR_PUPDR6_Shift, 12   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_PUPDR_PUPDR5_Shift, 10   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_PUPDR_PUPDR4_Shift, 8   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_PUPDR_PUPDR3_Shift, 6   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_PUPDR_PUPDR2_Shift, 4   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_PUPDR_PUPDR1_Shift, 2   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_PUPDR_PUPDR0_Shift, 0   @ bitWidth 2 (Port x configuration bits y =  0..15)  
 
    .equ GPIOB_IDR, GPIOB_BASE + 0x10 @ (GPIO port input data register) 
        .equ GPIOB_IDR_IDR15, 1 << 15   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOB_IDR_IDR14, 1 << 14   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOB_IDR_IDR13, 1 << 13   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOB_IDR_IDR12, 1 << 12   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOB_IDR_IDR11, 1 << 11   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOB_IDR_IDR10, 1 << 10   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOB_IDR_IDR9, 1 << 9   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOB_IDR_IDR8, 1 << 8   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOB_IDR_IDR7, 1 << 7   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOB_IDR_IDR6, 1 << 6   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOB_IDR_IDR5, 1 << 5   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOB_IDR_IDR4, 1 << 4   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOB_IDR_IDR3, 1 << 3   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOB_IDR_IDR2, 1 << 2   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOB_IDR_IDR1, 1 << 1   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOB_IDR_IDR0, 1 << 0   @ bitWidth 1 (Port input data y =  0..15)  
 
    .equ GPIOB_ODR, GPIOB_BASE + 0x14 @ (GPIO port output data register) 
        .equ GPIOB_ODR_ODR15, 1 << 15   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOB_ODR_ODR14, 1 << 14   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOB_ODR_ODR13, 1 << 13   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOB_ODR_ODR12, 1 << 12   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOB_ODR_ODR11, 1 << 11   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOB_ODR_ODR10, 1 << 10   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOB_ODR_ODR9, 1 << 9   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOB_ODR_ODR8, 1 << 8   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOB_ODR_ODR7, 1 << 7   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOB_ODR_ODR6, 1 << 6   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOB_ODR_ODR5, 1 << 5   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOB_ODR_ODR4, 1 << 4   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOB_ODR_ODR3, 1 << 3   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOB_ODR_ODR2, 1 << 2   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOB_ODR_ODR1, 1 << 1   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOB_ODR_ODR0, 1 << 0   @ bitWidth 1 (Port output data y =  0..15)  
 
    .equ GPIOB_BSRR, GPIOB_BASE + 0x18 @ (GPIO port bit set/reset  register) 
        .equ GPIOB_BSRR_BR15, 1 << 31   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOB_BSRR_BR14, 1 << 30   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOB_BSRR_BR13, 1 << 29   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOB_BSRR_BR12, 1 << 28   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOB_BSRR_BR11, 1 << 27   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOB_BSRR_BR10, 1 << 26   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOB_BSRR_BR9, 1 << 25   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOB_BSRR_BR8, 1 << 24   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOB_BSRR_BR7, 1 << 23   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOB_BSRR_BR6, 1 << 22   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOB_BSRR_BR5, 1 << 21   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOB_BSRR_BR4, 1 << 20   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOB_BSRR_BR3, 1 << 19   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOB_BSRR_BR2, 1 << 18   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOB_BSRR_BR1, 1 << 17   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOB_BSRR_BR0, 1 << 16   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOB_BSRR_BS15, 1 << 15   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOB_BSRR_BS14, 1 << 14   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOB_BSRR_BS13, 1 << 13   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOB_BSRR_BS12, 1 << 12   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOB_BSRR_BS11, 1 << 11   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOB_BSRR_BS10, 1 << 10   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOB_BSRR_BS9, 1 << 9   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOB_BSRR_BS8, 1 << 8   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOB_BSRR_BS7, 1 << 7   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOB_BSRR_BS6, 1 << 6   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOB_BSRR_BS5, 1 << 5   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOB_BSRR_BS4, 1 << 4   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOB_BSRR_BS3, 1 << 3   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOB_BSRR_BS2, 1 << 2   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOB_BSRR_BS1, 1 << 1   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOB_BSRR_BS0, 1 << 0   @ bitWidth 1 (Port x set bit y y=  0..15)  
 
    .equ GPIOB_LCKR, GPIOB_BASE + 0x1C @ (GPIO port configuration lock  register) 
        .equ GPIOB_LCKR_LCKK, 1 << 16   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOB_LCKR_LCK15, 1 << 15   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOB_LCKR_LCK14, 1 << 14   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOB_LCKR_LCK13, 1 << 13   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOB_LCKR_LCK12, 1 << 12   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOB_LCKR_LCK11, 1 << 11   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOB_LCKR_LCK10, 1 << 10   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOB_LCKR_LCK9, 1 << 9   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOB_LCKR_LCK8, 1 << 8   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOB_LCKR_LCK7, 1 << 7   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOB_LCKR_LCK6, 1 << 6   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOB_LCKR_LCK5, 1 << 5   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOB_LCKR_LCK4, 1 << 4   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOB_LCKR_LCK3, 1 << 3   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOB_LCKR_LCK2, 1 << 2   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOB_LCKR_LCK1, 1 << 1   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOB_LCKR_LCK0, 1 << 0   @ bitWidth 1 (Port x lock bit y y=  0..15)  
 
    .equ GPIOB_AFRL, GPIOB_BASE + 0x20 @ (GPIO alternate function low  register) 
        .equ GPIOB_AFRL_AFRL7_Shift, 28   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOB_AFRL_AFRL6_Shift, 24   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOB_AFRL_AFRL5_Shift, 20   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOB_AFRL_AFRL4_Shift, 16   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOB_AFRL_AFRL3_Shift, 12   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOB_AFRL_AFRL2_Shift, 8   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOB_AFRL_AFRL1_Shift, 4   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOB_AFRL_AFRL0_Shift, 0   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
 
    .equ GPIOB_AFRH, GPIOB_BASE + 0x24 @ (GPIO alternate function high  register) 
        .equ GPIOB_AFRH_AFRH15_Shift, 28   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOB_AFRH_AFRH14_Shift, 24   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOB_AFRH_AFRH13_Shift, 20   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOB_AFRH_AFRH12_Shift, 16   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOB_AFRH_AFRH11_Shift, 12   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOB_AFRH_AFRH10_Shift, 8   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOB_AFRH_AFRH9_Shift, 4   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOB_AFRH_AFRH8_Shift, 0   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
 

@=========================== GPIOA ===========================@
.equ GPIOA_BASE, 0x40020000 @ (General-purpose I/Os) 
    .equ GPIOA_MODER, GPIOA_BASE + 0x0 @ (GPIO port mode register) 
        .equ GPIOA_MODER_MODER15_Shift, 30   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_MODER_MODER14_Shift, 28   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_MODER_MODER13_Shift, 26   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_MODER_MODER12_Shift, 24   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_MODER_MODER11_Shift, 22   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_MODER_MODER10_Shift, 20   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_MODER_MODER9_Shift, 18   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_MODER_MODER8_Shift, 16   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_MODER_MODER7_Shift, 14   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_MODER_MODER6_Shift, 12   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_MODER_MODER5_Shift, 10   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_MODER_MODER4_Shift, 8   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_MODER_MODER3_Shift, 6   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_MODER_MODER2_Shift, 4   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_MODER_MODER1_Shift, 2   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_MODER_MODER0_Shift, 0   @ bitWidth 2 (Port x configuration bits y =  0..15)  
 
    .equ GPIOA_OTYPER, GPIOA_BASE + 0x4 @ (GPIO port output type register) 
        .equ GPIOA_OTYPER_OT15, 1 << 15   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOA_OTYPER_OT14, 1 << 14   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOA_OTYPER_OT13, 1 << 13   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOA_OTYPER_OT12, 1 << 12   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOA_OTYPER_OT11, 1 << 11   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOA_OTYPER_OT10, 1 << 10   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOA_OTYPER_OT9, 1 << 9   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOA_OTYPER_OT8, 1 << 8   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOA_OTYPER_OT7, 1 << 7   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOA_OTYPER_OT6, 1 << 6   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOA_OTYPER_OT5, 1 << 5   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOA_OTYPER_OT4, 1 << 4   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOA_OTYPER_OT3, 1 << 3   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOA_OTYPER_OT2, 1 << 2   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOA_OTYPER_OT1, 1 << 1   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOA_OTYPER_OT0, 1 << 0   @ bitWidth 1 (Port x configuration bits y =  0..15)  
 
    .equ GPIOA_OSPEEDR, GPIOA_BASE + 0x8 @ (GPIO port output speed  register) 
        .equ GPIOA_OSPEEDR_OSPEEDR15_Shift, 30   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_OSPEEDR_OSPEEDR14_Shift, 28   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_OSPEEDR_OSPEEDR13_Shift, 26   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_OSPEEDR_OSPEEDR12_Shift, 24   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_OSPEEDR_OSPEEDR11_Shift, 22   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_OSPEEDR_OSPEEDR10_Shift, 20   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_OSPEEDR_OSPEEDR9_Shift, 18   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_OSPEEDR_OSPEEDR8_Shift, 16   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_OSPEEDR_OSPEEDR7_Shift, 14   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_OSPEEDR_OSPEEDR6_Shift, 12   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_OSPEEDR_OSPEEDR5_Shift, 10   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_OSPEEDR_OSPEEDR4_Shift, 8   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_OSPEEDR_OSPEEDR3_Shift, 6   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_OSPEEDR_OSPEEDR2_Shift, 4   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_OSPEEDR_OSPEEDR1_Shift, 2   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_OSPEEDR_OSPEEDR0_Shift, 0   @ bitWidth 2 (Port x configuration bits y =  0..15)  
 
    .equ GPIOA_PUPDR, GPIOA_BASE + 0xC @ (GPIO port pull-up/pull-down  register) 
        .equ GPIOA_PUPDR_PUPDR15_Shift, 30   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_PUPDR_PUPDR14_Shift, 28   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_PUPDR_PUPDR13_Shift, 26   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_PUPDR_PUPDR12_Shift, 24   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_PUPDR_PUPDR11_Shift, 22   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_PUPDR_PUPDR10_Shift, 20   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_PUPDR_PUPDR9_Shift, 18   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_PUPDR_PUPDR8_Shift, 16   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_PUPDR_PUPDR7_Shift, 14   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_PUPDR_PUPDR6_Shift, 12   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_PUPDR_PUPDR5_Shift, 10   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_PUPDR_PUPDR4_Shift, 8   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_PUPDR_PUPDR3_Shift, 6   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_PUPDR_PUPDR2_Shift, 4   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_PUPDR_PUPDR1_Shift, 2   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_PUPDR_PUPDR0_Shift, 0   @ bitWidth 2 (Port x configuration bits y =  0..15)  
 
    .equ GPIOA_IDR, GPIOA_BASE + 0x10 @ (GPIO port input data register) 
        .equ GPIOA_IDR_IDR15, 1 << 15   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOA_IDR_IDR14, 1 << 14   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOA_IDR_IDR13, 1 << 13   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOA_IDR_IDR12, 1 << 12   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOA_IDR_IDR11, 1 << 11   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOA_IDR_IDR10, 1 << 10   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOA_IDR_IDR9, 1 << 9   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOA_IDR_IDR8, 1 << 8   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOA_IDR_IDR7, 1 << 7   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOA_IDR_IDR6, 1 << 6   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOA_IDR_IDR5, 1 << 5   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOA_IDR_IDR4, 1 << 4   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOA_IDR_IDR3, 1 << 3   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOA_IDR_IDR2, 1 << 2   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOA_IDR_IDR1, 1 << 1   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOA_IDR_IDR0, 1 << 0   @ bitWidth 1 (Port input data y =  0..15)  
 
    .equ GPIOA_ODR, GPIOA_BASE + 0x14 @ (GPIO port output data register) 
        .equ GPIOA_ODR_ODR15, 1 << 15   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOA_ODR_ODR14, 1 << 14   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOA_ODR_ODR13, 1 << 13   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOA_ODR_ODR12, 1 << 12   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOA_ODR_ODR11, 1 << 11   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOA_ODR_ODR10, 1 << 10   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOA_ODR_ODR9, 1 << 9   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOA_ODR_ODR8, 1 << 8   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOA_ODR_ODR7, 1 << 7   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOA_ODR_ODR6, 1 << 6   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOA_ODR_ODR5, 1 << 5   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOA_ODR_ODR4, 1 << 4   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOA_ODR_ODR3, 1 << 3   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOA_ODR_ODR2, 1 << 2   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOA_ODR_ODR1, 1 << 1   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOA_ODR_ODR0, 1 << 0   @ bitWidth 1 (Port output data y =  0..15)  
 
    .equ GPIOA_BSRR, GPIOA_BASE + 0x18 @ (GPIO port bit set/reset  register) 
        .equ GPIOA_BSRR_BR15, 1 << 31   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOA_BSRR_BR14, 1 << 30   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOA_BSRR_BR13, 1 << 29   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOA_BSRR_BR12, 1 << 28   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOA_BSRR_BR11, 1 << 27   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOA_BSRR_BR10, 1 << 26   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOA_BSRR_BR9, 1 << 25   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOA_BSRR_BR8, 1 << 24   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOA_BSRR_BR7, 1 << 23   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOA_BSRR_BR6, 1 << 22   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOA_BSRR_BR5, 1 << 21   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOA_BSRR_BR4, 1 << 20   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOA_BSRR_BR3, 1 << 19   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOA_BSRR_BR2, 1 << 18   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOA_BSRR_BR1, 1 << 17   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOA_BSRR_BR0, 1 << 16   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOA_BSRR_BS15, 1 << 15   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOA_BSRR_BS14, 1 << 14   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOA_BSRR_BS13, 1 << 13   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOA_BSRR_BS12, 1 << 12   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOA_BSRR_BS11, 1 << 11   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOA_BSRR_BS10, 1 << 10   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOA_BSRR_BS9, 1 << 9   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOA_BSRR_BS8, 1 << 8   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOA_BSRR_BS7, 1 << 7   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOA_BSRR_BS6, 1 << 6   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOA_BSRR_BS5, 1 << 5   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOA_BSRR_BS4, 1 << 4   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOA_BSRR_BS3, 1 << 3   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOA_BSRR_BS2, 1 << 2   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOA_BSRR_BS1, 1 << 1   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOA_BSRR_BS0, 1 << 0   @ bitWidth 1 (Port x set bit y y=  0..15)  
 
    .equ GPIOA_LCKR, GPIOA_BASE + 0x1C @ (GPIO port configuration lock  register) 
        .equ GPIOA_LCKR_LCKK, 1 << 16   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOA_LCKR_LCK15, 1 << 15   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOA_LCKR_LCK14, 1 << 14   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOA_LCKR_LCK13, 1 << 13   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOA_LCKR_LCK12, 1 << 12   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOA_LCKR_LCK11, 1 << 11   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOA_LCKR_LCK10, 1 << 10   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOA_LCKR_LCK9, 1 << 9   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOA_LCKR_LCK8, 1 << 8   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOA_LCKR_LCK7, 1 << 7   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOA_LCKR_LCK6, 1 << 6   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOA_LCKR_LCK5, 1 << 5   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOA_LCKR_LCK4, 1 << 4   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOA_LCKR_LCK3, 1 << 3   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOA_LCKR_LCK2, 1 << 2   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOA_LCKR_LCK1, 1 << 1   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOA_LCKR_LCK0, 1 << 0   @ bitWidth 1 (Port x lock bit y y=  0..15)  
 
    .equ GPIOA_AFRL, GPIOA_BASE + 0x20 @ (GPIO alternate function low  register) 
        .equ GPIOA_AFRL_AFRL7_Shift, 28   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOA_AFRL_AFRL6_Shift, 24   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOA_AFRL_AFRL5_Shift, 20   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOA_AFRL_AFRL4_Shift, 16   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOA_AFRL_AFRL3_Shift, 12   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOA_AFRL_AFRL2_Shift, 8   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOA_AFRL_AFRL1_Shift, 4   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOA_AFRL_AFRL0_Shift, 0   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
 
    .equ GPIOA_AFRH, GPIOA_BASE + 0x24 @ (GPIO alternate function high  register) 
        .equ GPIOA_AFRH_AFRH15_Shift, 28   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOA_AFRH_AFRH14_Shift, 24   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOA_AFRH_AFRH13_Shift, 20   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOA_AFRH_AFRH12_Shift, 16   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOA_AFRH_AFRH11_Shift, 12   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOA_AFRH_AFRH10_Shift, 8   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOA_AFRH_AFRH9_Shift, 4   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOA_AFRH_AFRH8_Shift, 0   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
 

@=========================== SYSCFG ===========================@
.equ SYSCFG_BASE, 0x40013800 @ (System configuration controller) 
    .equ SYSCFG_MEMRM, SYSCFG_BASE + 0x0 @ (memory remap register) 
        .equ SYSCFG_MEMRM_MEM_MODE_Shift, 0   @ bitWidth 2 (MEM_MODE)  
 
    .equ SYSCFG_PMC, SYSCFG_BASE + 0x4 @ (peripheral mode configuration  register) 
        .equ SYSCFG_PMC_MII_RMII_SEL, 1 << 23   @ bitWidth 1 (Ethernet PHY interface  selection)  
 
    .equ SYSCFG_EXTICR1, SYSCFG_BASE + 0x8 @ (external interrupt configuration register  1) 
        .equ SYSCFG_EXTICR1_EXTI3_Shift, 12   @ bitWidth 4 (EXTI x configuration x = 0 to  3)  
        .equ SYSCFG_EXTICR1_EXTI2_Shift, 8   @ bitWidth 4 (EXTI x configuration x = 0 to  3)  
        .equ SYSCFG_EXTICR1_EXTI1_Shift, 4   @ bitWidth 4 (EXTI x configuration x = 0 to  3)  
        .equ SYSCFG_EXTICR1_EXTI0_Shift, 0   @ bitWidth 4 (EXTI x configuration x = 0 to  3)  
 
    .equ SYSCFG_EXTICR2, SYSCFG_BASE + 0xC @ (external interrupt configuration register  2) 
        .equ SYSCFG_EXTICR2_EXTI7_Shift, 12   @ bitWidth 4 (EXTI x configuration x = 4 to  7)  
        .equ SYSCFG_EXTICR2_EXTI6_Shift, 8   @ bitWidth 4 (EXTI x configuration x = 4 to  7)  
        .equ SYSCFG_EXTICR2_EXTI5_Shift, 4   @ bitWidth 4 (EXTI x configuration x = 4 to  7)  
        .equ SYSCFG_EXTICR2_EXTI4_Shift, 0   @ bitWidth 4 (EXTI x configuration x = 4 to  7)  
 
    .equ SYSCFG_EXTICR3, SYSCFG_BASE + 0x10 @ (external interrupt configuration register  3) 
        .equ SYSCFG_EXTICR3_EXTI11_Shift, 12   @ bitWidth 4 (EXTI x configuration x = 8 to  11)  
        .equ SYSCFG_EXTICR3_EXTI10_Shift, 8   @ bitWidth 4 (EXTI10)  
        .equ SYSCFG_EXTICR3_EXTI9_Shift, 4   @ bitWidth 4 (EXTI x configuration x = 8 to  11)  
        .equ SYSCFG_EXTICR3_EXTI8_Shift, 0   @ bitWidth 4 (EXTI x configuration x = 8 to  11)  
 
    .equ SYSCFG_EXTICR4, SYSCFG_BASE + 0x14 @ (external interrupt configuration register  4) 
        .equ SYSCFG_EXTICR4_EXTI15_Shift, 12   @ bitWidth 4 (EXTI x configuration x = 12 to  15)  
        .equ SYSCFG_EXTICR4_EXTI14_Shift, 8   @ bitWidth 4 (EXTI x configuration x = 12 to  15)  
        .equ SYSCFG_EXTICR4_EXTI13_Shift, 4   @ bitWidth 4 (EXTI x configuration x = 12 to  15)  
        .equ SYSCFG_EXTICR4_EXTI12_Shift, 0   @ bitWidth 4 (EXTI x configuration x = 12 to  15)  
 
    .equ SYSCFG_CMPCR, SYSCFG_BASE + 0x20 @ (Compensation cell control  register) 
        .equ SYSCFG_CMPCR_READY, 1 << 8   @ bitWidth 1 (READY)  
        .equ SYSCFG_CMPCR_CMP_PD, 1 << 0   @ bitWidth 1 (Compensation cell  power-down)  
 

@=========================== SPI1 ===========================@
.equ SPI1_BASE, 0x40013000 @ (Serial peripheral interface) 
    .equ SPI1_CR1, SPI1_BASE + 0x0 @ (control register 1) 
        .equ SPI1_CR1_BIDIMODE, 1 << 15   @ bitWidth 1 (Bidirectional data mode  enable)  
        .equ SPI1_CR1_BIDIOE, 1 << 14   @ bitWidth 1 (Output enable in bidirectional  mode)  
        .equ SPI1_CR1_CRCEN, 1 << 13   @ bitWidth 1 (Hardware CRC calculation  enable)  
        .equ SPI1_CR1_CRCNEXT, 1 << 12   @ bitWidth 1 (CRC transfer next)  
        .equ SPI1_CR1_DFF, 1 << 11   @ bitWidth 1 (Data frame format)  
        .equ SPI1_CR1_RXONLY, 1 << 10   @ bitWidth 1 (Receive only)  
        .equ SPI1_CR1_SSM, 1 << 9   @ bitWidth 1 (Software slave management)  
        .equ SPI1_CR1_SSI, 1 << 8   @ bitWidth 1 (Internal slave select)  
        .equ SPI1_CR1_LSBFIRST, 1 << 7   @ bitWidth 1 (Frame format)  
        .equ SPI1_CR1_SPE, 1 << 6   @ bitWidth 1 (SPI enable)  
        .equ SPI1_CR1_BR_Shift, 3   @ bitWidth 3 (Baud rate control)  
        .equ SPI1_CR1_MSTR, 1 << 2   @ bitWidth 1 (Master selection)  
        .equ SPI1_CR1_CPOL, 1 << 1   @ bitWidth 1 (Clock polarity)  
        .equ SPI1_CR1_CPHA, 1 << 0   @ bitWidth 1 (Clock phase)  
 
    .equ SPI1_CR2, SPI1_BASE + 0x4 @ (control register 2) 
        .equ SPI1_CR2_TXEIE, 1 << 7   @ bitWidth 1 (Tx buffer empty interrupt  enable)  
        .equ SPI1_CR2_RXNEIE, 1 << 6   @ bitWidth 1 (RX buffer not empty interrupt  enable)  
        .equ SPI1_CR2_ERRIE, 1 << 5   @ bitWidth 1 (Error interrupt enable)  
        .equ SPI1_CR2_FRF, 1 << 4   @ bitWidth 1 (Frame format)  
        .equ SPI1_CR2_SSOE, 1 << 2   @ bitWidth 1 (SS output enable)  
        .equ SPI1_CR2_TXDMAEN, 1 << 1   @ bitWidth 1 (Tx buffer DMA enable)  
        .equ SPI1_CR2_RXDMAEN, 1 << 0   @ bitWidth 1 (Rx buffer DMA enable)  
 
    .equ SPI1_SR, SPI1_BASE + 0x8 @ (status register) 
        .equ SPI1_SR_TIFRFE, 1 << 8   @ bitWidth 1 (TI frame format error)  
        .equ SPI1_SR_BSY, 1 << 7   @ bitWidth 1 (Busy flag)  
        .equ SPI1_SR_OVR, 1 << 6   @ bitWidth 1 (Overrun flag)  
        .equ SPI1_SR_MODF, 1 << 5   @ bitWidth 1 (Mode fault)  
        .equ SPI1_SR_CRCERR, 1 << 4   @ bitWidth 1 (CRC error flag)  
        .equ SPI1_SR_UDR, 1 << 3   @ bitWidth 1 (Underrun flag)  
        .equ SPI1_SR_CHSIDE, 1 << 2   @ bitWidth 1 (Channel side)  
        .equ SPI1_SR_TXE, 1 << 1   @ bitWidth 1 (Transmit buffer empty)  
        .equ SPI1_SR_RXNE, 1 << 0   @ bitWidth 1 (Receive buffer not empty)  
 
    .equ SPI1_DR, SPI1_BASE + 0xC @ (data register) 
        .equ SPI1_DR_DR_Shift, 0   @ bitWidth 16 (Data register)  
 
    .equ SPI1_CRCPR, SPI1_BASE + 0x10 @ (CRC polynomial register) 
        .equ SPI1_CRCPR_CRCPOLY_Shift, 0   @ bitWidth 16 (CRC polynomial register)  
 
    .equ SPI1_RXCRCR, SPI1_BASE + 0x14 @ (RX CRC register) 
        .equ SPI1_RXCRCR_RxCRC_Shift, 0   @ bitWidth 16 (Rx CRC register)  
 
    .equ SPI1_TXCRCR, SPI1_BASE + 0x18 @ (TX CRC register) 
        .equ SPI1_TXCRCR_TxCRC_Shift, 0   @ bitWidth 16 (Tx CRC register)  
 
    .equ SPI1_I2SCFGR, SPI1_BASE + 0x1C @ (I2S configuration register) 
        .equ SPI1_I2SCFGR_I2SMOD, 1 << 11   @ bitWidth 1 (I2S mode selection)  
        .equ SPI1_I2SCFGR_I2SE, 1 << 10   @ bitWidth 1 (I2S Enable)  
        .equ SPI1_I2SCFGR_I2SCFG_Shift, 8   @ bitWidth 2 (I2S configuration mode)  
        .equ SPI1_I2SCFGR_PCMSYNC, 1 << 7   @ bitWidth 1 (PCM frame synchronization)  
        .equ SPI1_I2SCFGR_I2SSTD_Shift, 4   @ bitWidth 2 (I2S standard selection)  
        .equ SPI1_I2SCFGR_CKPOL, 1 << 3   @ bitWidth 1 (Steady state clock  polarity)  
        .equ SPI1_I2SCFGR_DATLEN_Shift, 1   @ bitWidth 2 (Data length to be  transferred)  
        .equ SPI1_I2SCFGR_CHLEN, 1 << 0   @ bitWidth 1 (Channel length number of bits per audio  channel)  
 
    .equ SPI1_I2SPR, SPI1_BASE + 0x20 @ (I2S prescaler register) 
        .equ SPI1_I2SPR_MCKOE, 1 << 9   @ bitWidth 1 (Master clock output enable)  
        .equ SPI1_I2SPR_ODD, 1 << 8   @ bitWidth 1 (Odd factor for the  prescaler)  
        .equ SPI1_I2SPR_I2SDIV_Shift, 0   @ bitWidth 8 (I2S Linear prescaler)  
 

@=========================== SPI2 ===========================@
.equ SPI2_BASE, 0x40003800 @ (Serial peripheral interface) 
    .equ SPI2_CR1, SPI2_BASE + 0x0 @ (control register 1) 
        .equ SPI2_CR1_BIDIMODE, 1 << 15   @ bitWidth 1 (Bidirectional data mode  enable)  
        .equ SPI2_CR1_BIDIOE, 1 << 14   @ bitWidth 1 (Output enable in bidirectional  mode)  
        .equ SPI2_CR1_CRCEN, 1 << 13   @ bitWidth 1 (Hardware CRC calculation  enable)  
        .equ SPI2_CR1_CRCNEXT, 1 << 12   @ bitWidth 1 (CRC transfer next)  
        .equ SPI2_CR1_DFF, 1 << 11   @ bitWidth 1 (Data frame format)  
        .equ SPI2_CR1_RXONLY, 1 << 10   @ bitWidth 1 (Receive only)  
        .equ SPI2_CR1_SSM, 1 << 9   @ bitWidth 1 (Software slave management)  
        .equ SPI2_CR1_SSI, 1 << 8   @ bitWidth 1 (Internal slave select)  
        .equ SPI2_CR1_LSBFIRST, 1 << 7   @ bitWidth 1 (Frame format)  
        .equ SPI2_CR1_SPE, 1 << 6   @ bitWidth 1 (SPI enable)  
        .equ SPI2_CR1_BR_Shift, 3   @ bitWidth 3 (Baud rate control)  
        .equ SPI2_CR1_MSTR, 1 << 2   @ bitWidth 1 (Master selection)  
        .equ SPI2_CR1_CPOL, 1 << 1   @ bitWidth 1 (Clock polarity)  
        .equ SPI2_CR1_CPHA, 1 << 0   @ bitWidth 1 (Clock phase)  
 
    .equ SPI2_CR2, SPI2_BASE + 0x4 @ (control register 2) 
        .equ SPI2_CR2_TXEIE, 1 << 7   @ bitWidth 1 (Tx buffer empty interrupt  enable)  
        .equ SPI2_CR2_RXNEIE, 1 << 6   @ bitWidth 1 (RX buffer not empty interrupt  enable)  
        .equ SPI2_CR2_ERRIE, 1 << 5   @ bitWidth 1 (Error interrupt enable)  
        .equ SPI2_CR2_FRF, 1 << 4   @ bitWidth 1 (Frame format)  
        .equ SPI2_CR2_SSOE, 1 << 2   @ bitWidth 1 (SS output enable)  
        .equ SPI2_CR2_TXDMAEN, 1 << 1   @ bitWidth 1 (Tx buffer DMA enable)  
        .equ SPI2_CR2_RXDMAEN, 1 << 0   @ bitWidth 1 (Rx buffer DMA enable)  
 
    .equ SPI2_SR, SPI2_BASE + 0x8 @ (status register) 
        .equ SPI2_SR_TIFRFE, 1 << 8   @ bitWidth 1 (TI frame format error)  
        .equ SPI2_SR_BSY, 1 << 7   @ bitWidth 1 (Busy flag)  
        .equ SPI2_SR_OVR, 1 << 6   @ bitWidth 1 (Overrun flag)  
        .equ SPI2_SR_MODF, 1 << 5   @ bitWidth 1 (Mode fault)  
        .equ SPI2_SR_CRCERR, 1 << 4   @ bitWidth 1 (CRC error flag)  
        .equ SPI2_SR_UDR, 1 << 3   @ bitWidth 1 (Underrun flag)  
        .equ SPI2_SR_CHSIDE, 1 << 2   @ bitWidth 1 (Channel side)  
        .equ SPI2_SR_TXE, 1 << 1   @ bitWidth 1 (Transmit buffer empty)  
        .equ SPI2_SR_RXNE, 1 << 0   @ bitWidth 1 (Receive buffer not empty)  
 
    .equ SPI2_DR, SPI2_BASE + 0xC @ (data register) 
        .equ SPI2_DR_DR_Shift, 0   @ bitWidth 16 (Data register)  
 
    .equ SPI2_CRCPR, SPI2_BASE + 0x10 @ (CRC polynomial register) 
        .equ SPI2_CRCPR_CRCPOLY_Shift, 0   @ bitWidth 16 (CRC polynomial register)  
 
    .equ SPI2_RXCRCR, SPI2_BASE + 0x14 @ (RX CRC register) 
        .equ SPI2_RXCRCR_RxCRC_Shift, 0   @ bitWidth 16 (Rx CRC register)  
 
    .equ SPI2_TXCRCR, SPI2_BASE + 0x18 @ (TX CRC register) 
        .equ SPI2_TXCRCR_TxCRC_Shift, 0   @ bitWidth 16 (Tx CRC register)  
 
    .equ SPI2_I2SCFGR, SPI2_BASE + 0x1C @ (I2S configuration register) 
        .equ SPI2_I2SCFGR_I2SMOD, 1 << 11   @ bitWidth 1 (I2S mode selection)  
        .equ SPI2_I2SCFGR_I2SE, 1 << 10   @ bitWidth 1 (I2S Enable)  
        .equ SPI2_I2SCFGR_I2SCFG_Shift, 8   @ bitWidth 2 (I2S configuration mode)  
        .equ SPI2_I2SCFGR_PCMSYNC, 1 << 7   @ bitWidth 1 (PCM frame synchronization)  
        .equ SPI2_I2SCFGR_I2SSTD_Shift, 4   @ bitWidth 2 (I2S standard selection)  
        .equ SPI2_I2SCFGR_CKPOL, 1 << 3   @ bitWidth 1 (Steady state clock  polarity)  
        .equ SPI2_I2SCFGR_DATLEN_Shift, 1   @ bitWidth 2 (Data length to be  transferred)  
        .equ SPI2_I2SCFGR_CHLEN, 1 << 0   @ bitWidth 1 (Channel length number of bits per audio  channel)  
 
    .equ SPI2_I2SPR, SPI2_BASE + 0x20 @ (I2S prescaler register) 
        .equ SPI2_I2SPR_MCKOE, 1 << 9   @ bitWidth 1 (Master clock output enable)  
        .equ SPI2_I2SPR_ODD, 1 << 8   @ bitWidth 1 (Odd factor for the  prescaler)  
        .equ SPI2_I2SPR_I2SDIV_Shift, 0   @ bitWidth 8 (I2S Linear prescaler)  
 

@=========================== SPI3 ===========================@
.equ SPI3_BASE, 0x40003C00 @ (Serial peripheral interface) 
    .equ SPI3_CR1, SPI3_BASE + 0x0 @ (control register 1) 
        .equ SPI3_CR1_BIDIMODE, 1 << 15   @ bitWidth 1 (Bidirectional data mode  enable)  
        .equ SPI3_CR1_BIDIOE, 1 << 14   @ bitWidth 1 (Output enable in bidirectional  mode)  
        .equ SPI3_CR1_CRCEN, 1 << 13   @ bitWidth 1 (Hardware CRC calculation  enable)  
        .equ SPI3_CR1_CRCNEXT, 1 << 12   @ bitWidth 1 (CRC transfer next)  
        .equ SPI3_CR1_DFF, 1 << 11   @ bitWidth 1 (Data frame format)  
        .equ SPI3_CR1_RXONLY, 1 << 10   @ bitWidth 1 (Receive only)  
        .equ SPI3_CR1_SSM, 1 << 9   @ bitWidth 1 (Software slave management)  
        .equ SPI3_CR1_SSI, 1 << 8   @ bitWidth 1 (Internal slave select)  
        .equ SPI3_CR1_LSBFIRST, 1 << 7   @ bitWidth 1 (Frame format)  
        .equ SPI3_CR1_SPE, 1 << 6   @ bitWidth 1 (SPI enable)  
        .equ SPI3_CR1_BR_Shift, 3   @ bitWidth 3 (Baud rate control)  
        .equ SPI3_CR1_MSTR, 1 << 2   @ bitWidth 1 (Master selection)  
        .equ SPI3_CR1_CPOL, 1 << 1   @ bitWidth 1 (Clock polarity)  
        .equ SPI3_CR1_CPHA, 1 << 0   @ bitWidth 1 (Clock phase)  
 
    .equ SPI3_CR2, SPI3_BASE + 0x4 @ (control register 2) 
        .equ SPI3_CR2_TXEIE, 1 << 7   @ bitWidth 1 (Tx buffer empty interrupt  enable)  
        .equ SPI3_CR2_RXNEIE, 1 << 6   @ bitWidth 1 (RX buffer not empty interrupt  enable)  
        .equ SPI3_CR2_ERRIE, 1 << 5   @ bitWidth 1 (Error interrupt enable)  
        .equ SPI3_CR2_FRF, 1 << 4   @ bitWidth 1 (Frame format)  
        .equ SPI3_CR2_SSOE, 1 << 2   @ bitWidth 1 (SS output enable)  
        .equ SPI3_CR2_TXDMAEN, 1 << 1   @ bitWidth 1 (Tx buffer DMA enable)  
        .equ SPI3_CR2_RXDMAEN, 1 << 0   @ bitWidth 1 (Rx buffer DMA enable)  
 
    .equ SPI3_SR, SPI3_BASE + 0x8 @ (status register) 
        .equ SPI3_SR_TIFRFE, 1 << 8   @ bitWidth 1 (TI frame format error)  
        .equ SPI3_SR_BSY, 1 << 7   @ bitWidth 1 (Busy flag)  
        .equ SPI3_SR_OVR, 1 << 6   @ bitWidth 1 (Overrun flag)  
        .equ SPI3_SR_MODF, 1 << 5   @ bitWidth 1 (Mode fault)  
        .equ SPI3_SR_CRCERR, 1 << 4   @ bitWidth 1 (CRC error flag)  
        .equ SPI3_SR_UDR, 1 << 3   @ bitWidth 1 (Underrun flag)  
        .equ SPI3_SR_CHSIDE, 1 << 2   @ bitWidth 1 (Channel side)  
        .equ SPI3_SR_TXE, 1 << 1   @ bitWidth 1 (Transmit buffer empty)  
        .equ SPI3_SR_RXNE, 1 << 0   @ bitWidth 1 (Receive buffer not empty)  
 
    .equ SPI3_DR, SPI3_BASE + 0xC @ (data register) 
        .equ SPI3_DR_DR_Shift, 0   @ bitWidth 16 (Data register)  
 
    .equ SPI3_CRCPR, SPI3_BASE + 0x10 @ (CRC polynomial register) 
        .equ SPI3_CRCPR_CRCPOLY_Shift, 0   @ bitWidth 16 (CRC polynomial register)  
 
    .equ SPI3_RXCRCR, SPI3_BASE + 0x14 @ (RX CRC register) 
        .equ SPI3_RXCRCR_RxCRC_Shift, 0   @ bitWidth 16 (Rx CRC register)  
 
    .equ SPI3_TXCRCR, SPI3_BASE + 0x18 @ (TX CRC register) 
        .equ SPI3_TXCRCR_TxCRC_Shift, 0   @ bitWidth 16 (Tx CRC register)  
 
    .equ SPI3_I2SCFGR, SPI3_BASE + 0x1C @ (I2S configuration register) 
        .equ SPI3_I2SCFGR_I2SMOD, 1 << 11   @ bitWidth 1 (I2S mode selection)  
        .equ SPI3_I2SCFGR_I2SE, 1 << 10   @ bitWidth 1 (I2S Enable)  
        .equ SPI3_I2SCFGR_I2SCFG_Shift, 8   @ bitWidth 2 (I2S configuration mode)  
        .equ SPI3_I2SCFGR_PCMSYNC, 1 << 7   @ bitWidth 1 (PCM frame synchronization)  
        .equ SPI3_I2SCFGR_I2SSTD_Shift, 4   @ bitWidth 2 (I2S standard selection)  
        .equ SPI3_I2SCFGR_CKPOL, 1 << 3   @ bitWidth 1 (Steady state clock  polarity)  
        .equ SPI3_I2SCFGR_DATLEN_Shift, 1   @ bitWidth 2 (Data length to be  transferred)  
        .equ SPI3_I2SCFGR_CHLEN, 1 << 0   @ bitWidth 1 (Channel length number of bits per audio  channel)  
 
    .equ SPI3_I2SPR, SPI3_BASE + 0x20 @ (I2S prescaler register) 
        .equ SPI3_I2SPR_MCKOE, 1 << 9   @ bitWidth 1 (Master clock output enable)  
        .equ SPI3_I2SPR_ODD, 1 << 8   @ bitWidth 1 (Odd factor for the  prescaler)  
        .equ SPI3_I2SPR_I2SDIV_Shift, 0   @ bitWidth 8 (I2S Linear prescaler)  
 

@=========================== I2S2ext ===========================@
.equ I2S2ext_BASE, 0x40003400 @ (Serial peripheral interface) 
    .equ I2S2ext_CR1, I2S2ext_BASE + 0x0 @ (control register 1) 
        .equ I2S2ext_CR1_BIDIMODE, 1 << 15   @ bitWidth 1 (Bidirectional data mode  enable)  
        .equ I2S2ext_CR1_BIDIOE, 1 << 14   @ bitWidth 1 (Output enable in bidirectional  mode)  
        .equ I2S2ext_CR1_CRCEN, 1 << 13   @ bitWidth 1 (Hardware CRC calculation  enable)  
        .equ I2S2ext_CR1_CRCNEXT, 1 << 12   @ bitWidth 1 (CRC transfer next)  
        .equ I2S2ext_CR1_DFF, 1 << 11   @ bitWidth 1 (Data frame format)  
        .equ I2S2ext_CR1_RXONLY, 1 << 10   @ bitWidth 1 (Receive only)  
        .equ I2S2ext_CR1_SSM, 1 << 9   @ bitWidth 1 (Software slave management)  
        .equ I2S2ext_CR1_SSI, 1 << 8   @ bitWidth 1 (Internal slave select)  
        .equ I2S2ext_CR1_LSBFIRST, 1 << 7   @ bitWidth 1 (Frame format)  
        .equ I2S2ext_CR1_SPE, 1 << 6   @ bitWidth 1 (SPI enable)  
        .equ I2S2ext_CR1_BR_Shift, 3   @ bitWidth 3 (Baud rate control)  
        .equ I2S2ext_CR1_MSTR, 1 << 2   @ bitWidth 1 (Master selection)  
        .equ I2S2ext_CR1_CPOL, 1 << 1   @ bitWidth 1 (Clock polarity)  
        .equ I2S2ext_CR1_CPHA, 1 << 0   @ bitWidth 1 (Clock phase)  
 
    .equ I2S2ext_CR2, I2S2ext_BASE + 0x4 @ (control register 2) 
        .equ I2S2ext_CR2_TXEIE, 1 << 7   @ bitWidth 1 (Tx buffer empty interrupt  enable)  
        .equ I2S2ext_CR2_RXNEIE, 1 << 6   @ bitWidth 1 (RX buffer not empty interrupt  enable)  
        .equ I2S2ext_CR2_ERRIE, 1 << 5   @ bitWidth 1 (Error interrupt enable)  
        .equ I2S2ext_CR2_FRF, 1 << 4   @ bitWidth 1 (Frame format)  
        .equ I2S2ext_CR2_SSOE, 1 << 2   @ bitWidth 1 (SS output enable)  
        .equ I2S2ext_CR2_TXDMAEN, 1 << 1   @ bitWidth 1 (Tx buffer DMA enable)  
        .equ I2S2ext_CR2_RXDMAEN, 1 << 0   @ bitWidth 1 (Rx buffer DMA enable)  
 
    .equ I2S2ext_SR, I2S2ext_BASE + 0x8 @ (status register) 
        .equ I2S2ext_SR_TIFRFE, 1 << 8   @ bitWidth 1 (TI frame format error)  
        .equ I2S2ext_SR_BSY, 1 << 7   @ bitWidth 1 (Busy flag)  
        .equ I2S2ext_SR_OVR, 1 << 6   @ bitWidth 1 (Overrun flag)  
        .equ I2S2ext_SR_MODF, 1 << 5   @ bitWidth 1 (Mode fault)  
        .equ I2S2ext_SR_CRCERR, 1 << 4   @ bitWidth 1 (CRC error flag)  
        .equ I2S2ext_SR_UDR, 1 << 3   @ bitWidth 1 (Underrun flag)  
        .equ I2S2ext_SR_CHSIDE, 1 << 2   @ bitWidth 1 (Channel side)  
        .equ I2S2ext_SR_TXE, 1 << 1   @ bitWidth 1 (Transmit buffer empty)  
        .equ I2S2ext_SR_RXNE, 1 << 0   @ bitWidth 1 (Receive buffer not empty)  
 
    .equ I2S2ext_DR, I2S2ext_BASE + 0xC @ (data register) 
        .equ I2S2ext_DR_DR_Shift, 0   @ bitWidth 16 (Data register)  
 
    .equ I2S2ext_CRCPR, I2S2ext_BASE + 0x10 @ (CRC polynomial register) 
        .equ I2S2ext_CRCPR_CRCPOLY_Shift, 0   @ bitWidth 16 (CRC polynomial register)  
 
    .equ I2S2ext_RXCRCR, I2S2ext_BASE + 0x14 @ (RX CRC register) 
        .equ I2S2ext_RXCRCR_RxCRC_Shift, 0   @ bitWidth 16 (Rx CRC register)  
 
    .equ I2S2ext_TXCRCR, I2S2ext_BASE + 0x18 @ (TX CRC register) 
        .equ I2S2ext_TXCRCR_TxCRC_Shift, 0   @ bitWidth 16 (Tx CRC register)  
 
    .equ I2S2ext_I2SCFGR, I2S2ext_BASE + 0x1C @ (I2S configuration register) 
        .equ I2S2ext_I2SCFGR_I2SMOD, 1 << 11   @ bitWidth 1 (I2S mode selection)  
        .equ I2S2ext_I2SCFGR_I2SE, 1 << 10   @ bitWidth 1 (I2S Enable)  
        .equ I2S2ext_I2SCFGR_I2SCFG_Shift, 8   @ bitWidth 2 (I2S configuration mode)  
        .equ I2S2ext_I2SCFGR_PCMSYNC, 1 << 7   @ bitWidth 1 (PCM frame synchronization)  
        .equ I2S2ext_I2SCFGR_I2SSTD_Shift, 4   @ bitWidth 2 (I2S standard selection)  
        .equ I2S2ext_I2SCFGR_CKPOL, 1 << 3   @ bitWidth 1 (Steady state clock  polarity)  
        .equ I2S2ext_I2SCFGR_DATLEN_Shift, 1   @ bitWidth 2 (Data length to be  transferred)  
        .equ I2S2ext_I2SCFGR_CHLEN, 1 << 0   @ bitWidth 1 (Channel length number of bits per audio  channel)  
 
    .equ I2S2ext_I2SPR, I2S2ext_BASE + 0x20 @ (I2S prescaler register) 
        .equ I2S2ext_I2SPR_MCKOE, 1 << 9   @ bitWidth 1 (Master clock output enable)  
        .equ I2S2ext_I2SPR_ODD, 1 << 8   @ bitWidth 1 (Odd factor for the  prescaler)  
        .equ I2S2ext_I2SPR_I2SDIV_Shift, 0   @ bitWidth 8 (I2S Linear prescaler)  
 

@=========================== I2S3ext ===========================@
.equ I2S3ext_BASE, 0x40004000 @ (Serial peripheral interface) 
    .equ I2S3ext_CR1, I2S3ext_BASE + 0x0 @ (control register 1) 
        .equ I2S3ext_CR1_BIDIMODE, 1 << 15   @ bitWidth 1 (Bidirectional data mode  enable)  
        .equ I2S3ext_CR1_BIDIOE, 1 << 14   @ bitWidth 1 (Output enable in bidirectional  mode)  
        .equ I2S3ext_CR1_CRCEN, 1 << 13   @ bitWidth 1 (Hardware CRC calculation  enable)  
        .equ I2S3ext_CR1_CRCNEXT, 1 << 12   @ bitWidth 1 (CRC transfer next)  
        .equ I2S3ext_CR1_DFF, 1 << 11   @ bitWidth 1 (Data frame format)  
        .equ I2S3ext_CR1_RXONLY, 1 << 10   @ bitWidth 1 (Receive only)  
        .equ I2S3ext_CR1_SSM, 1 << 9   @ bitWidth 1 (Software slave management)  
        .equ I2S3ext_CR1_SSI, 1 << 8   @ bitWidth 1 (Internal slave select)  
        .equ I2S3ext_CR1_LSBFIRST, 1 << 7   @ bitWidth 1 (Frame format)  
        .equ I2S3ext_CR1_SPE, 1 << 6   @ bitWidth 1 (SPI enable)  
        .equ I2S3ext_CR1_BR_Shift, 3   @ bitWidth 3 (Baud rate control)  
        .equ I2S3ext_CR1_MSTR, 1 << 2   @ bitWidth 1 (Master selection)  
        .equ I2S3ext_CR1_CPOL, 1 << 1   @ bitWidth 1 (Clock polarity)  
        .equ I2S3ext_CR1_CPHA, 1 << 0   @ bitWidth 1 (Clock phase)  
 
    .equ I2S3ext_CR2, I2S3ext_BASE + 0x4 @ (control register 2) 
        .equ I2S3ext_CR2_TXEIE, 1 << 7   @ bitWidth 1 (Tx buffer empty interrupt  enable)  
        .equ I2S3ext_CR2_RXNEIE, 1 << 6   @ bitWidth 1 (RX buffer not empty interrupt  enable)  
        .equ I2S3ext_CR2_ERRIE, 1 << 5   @ bitWidth 1 (Error interrupt enable)  
        .equ I2S3ext_CR2_FRF, 1 << 4   @ bitWidth 1 (Frame format)  
        .equ I2S3ext_CR2_SSOE, 1 << 2   @ bitWidth 1 (SS output enable)  
        .equ I2S3ext_CR2_TXDMAEN, 1 << 1   @ bitWidth 1 (Tx buffer DMA enable)  
        .equ I2S3ext_CR2_RXDMAEN, 1 << 0   @ bitWidth 1 (Rx buffer DMA enable)  
 
    .equ I2S3ext_SR, I2S3ext_BASE + 0x8 @ (status register) 
        .equ I2S3ext_SR_TIFRFE, 1 << 8   @ bitWidth 1 (TI frame format error)  
        .equ I2S3ext_SR_BSY, 1 << 7   @ bitWidth 1 (Busy flag)  
        .equ I2S3ext_SR_OVR, 1 << 6   @ bitWidth 1 (Overrun flag)  
        .equ I2S3ext_SR_MODF, 1 << 5   @ bitWidth 1 (Mode fault)  
        .equ I2S3ext_SR_CRCERR, 1 << 4   @ bitWidth 1 (CRC error flag)  
        .equ I2S3ext_SR_UDR, 1 << 3   @ bitWidth 1 (Underrun flag)  
        .equ I2S3ext_SR_CHSIDE, 1 << 2   @ bitWidth 1 (Channel side)  
        .equ I2S3ext_SR_TXE, 1 << 1   @ bitWidth 1 (Transmit buffer empty)  
        .equ I2S3ext_SR_RXNE, 1 << 0   @ bitWidth 1 (Receive buffer not empty)  
 
    .equ I2S3ext_DR, I2S3ext_BASE + 0xC @ (data register) 
        .equ I2S3ext_DR_DR_Shift, 0   @ bitWidth 16 (Data register)  
 
    .equ I2S3ext_CRCPR, I2S3ext_BASE + 0x10 @ (CRC polynomial register) 
        .equ I2S3ext_CRCPR_CRCPOLY_Shift, 0   @ bitWidth 16 (CRC polynomial register)  
 
    .equ I2S3ext_RXCRCR, I2S3ext_BASE + 0x14 @ (RX CRC register) 
        .equ I2S3ext_RXCRCR_RxCRC_Shift, 0   @ bitWidth 16 (Rx CRC register)  
 
    .equ I2S3ext_TXCRCR, I2S3ext_BASE + 0x18 @ (TX CRC register) 
        .equ I2S3ext_TXCRCR_TxCRC_Shift, 0   @ bitWidth 16 (Tx CRC register)  
 
    .equ I2S3ext_I2SCFGR, I2S3ext_BASE + 0x1C @ (I2S configuration register) 
        .equ I2S3ext_I2SCFGR_I2SMOD, 1 << 11   @ bitWidth 1 (I2S mode selection)  
        .equ I2S3ext_I2SCFGR_I2SE, 1 << 10   @ bitWidth 1 (I2S Enable)  
        .equ I2S3ext_I2SCFGR_I2SCFG_Shift, 8   @ bitWidth 2 (I2S configuration mode)  
        .equ I2S3ext_I2SCFGR_PCMSYNC, 1 << 7   @ bitWidth 1 (PCM frame synchronization)  
        .equ I2S3ext_I2SCFGR_I2SSTD_Shift, 4   @ bitWidth 2 (I2S standard selection)  
        .equ I2S3ext_I2SCFGR_CKPOL, 1 << 3   @ bitWidth 1 (Steady state clock  polarity)  
        .equ I2S3ext_I2SCFGR_DATLEN_Shift, 1   @ bitWidth 2 (Data length to be  transferred)  
        .equ I2S3ext_I2SCFGR_CHLEN, 1 << 0   @ bitWidth 1 (Channel length number of bits per audio  channel)  
 
    .equ I2S3ext_I2SPR, I2S3ext_BASE + 0x20 @ (I2S prescaler register) 
        .equ I2S3ext_I2SPR_MCKOE, 1 << 9   @ bitWidth 1 (Master clock output enable)  
        .equ I2S3ext_I2SPR_ODD, 1 << 8   @ bitWidth 1 (Odd factor for the  prescaler)  
        .equ I2S3ext_I2SPR_I2SDIV_Shift, 0   @ bitWidth 8 (I2S Linear prescaler)  
 

@=========================== SDIO ===========================@
.equ SDIO_BASE, 0x40012C00 @ (Secure digital input/output  interface) 
    .equ SDIO_POWER, SDIO_BASE + 0x0 @ (power control register) 
        .equ SDIO_POWER_PWRCTRL_Shift, 0   @ bitWidth 2 (PWRCTRL)  
 
    .equ SDIO_CLKCR, SDIO_BASE + 0x4 @ (SDI clock control register) 
        .equ SDIO_CLKCR_HWFC_EN, 1 << 14   @ bitWidth 1 (HW Flow Control enable)  
        .equ SDIO_CLKCR_NEGEDGE, 1 << 13   @ bitWidth 1 (SDIO_CK dephasing selection  bit)  
        .equ SDIO_CLKCR_WIDBUS_Shift, 11   @ bitWidth 2 (Wide bus mode enable bit)  
        .equ SDIO_CLKCR_BYPASS, 1 << 10   @ bitWidth 1 (Clock divider bypass enable  bit)  
        .equ SDIO_CLKCR_PWRSAV, 1 << 9   @ bitWidth 1 (Power saving configuration  bit)  
        .equ SDIO_CLKCR_CLKEN, 1 << 8   @ bitWidth 1 (Clock enable bit)  
        .equ SDIO_CLKCR_CLKDIV_Shift, 0   @ bitWidth 8 (Clock divide factor)  
 
    .equ SDIO_ARG, SDIO_BASE + 0x8 @ (argument register) 
        .equ SDIO_ARG_CMDARG_Shift, 0   @ bitWidth 32 (Command argument)  
 
    .equ SDIO_CMD, SDIO_BASE + 0xC @ (command register) 
        .equ SDIO_CMD_CE_ATACMD, 1 << 14   @ bitWidth 1 (CE-ATA command)  
        .equ SDIO_CMD_nIEN, 1 << 13   @ bitWidth 1 (not Interrupt Enable)  
        .equ SDIO_CMD_ENCMDcompl, 1 << 12   @ bitWidth 1 (Enable CMD completion)  
        .equ SDIO_CMD_SDIOSuspend, 1 << 11   @ bitWidth 1 (SD I/O suspend command)  
        .equ SDIO_CMD_CPSMEN, 1 << 10   @ bitWidth 1 (Command path state machine CPSM Enable  bit)  
        .equ SDIO_CMD_WAITPEND, 1 << 9   @ bitWidth 1 (CPSM Waits for ends of data transfer  CmdPend internal signal.)  
        .equ SDIO_CMD_WAITINT, 1 << 8   @ bitWidth 1 (CPSM waits for interrupt  request)  
        .equ SDIO_CMD_WAITRESP_Shift, 6   @ bitWidth 2 (Wait for response bits)  
        .equ SDIO_CMD_CMDINDEX_Shift, 0   @ bitWidth 6 (Command index)  
 
    .equ SDIO_RESPCMD, SDIO_BASE + 0x10 @ (command response register) 
        .equ SDIO_RESPCMD_RESPCMD_Shift, 0   @ bitWidth 6 (Response command index)  
 
    .equ SDIO_RESP1, SDIO_BASE + 0x14 @ (response 1..4 register) 
        .equ SDIO_RESP1_CARDSTATUS1_Shift, 0   @ bitWidth 32 (see Table 132.)  
 
    .equ SDIO_RESP2, SDIO_BASE + 0x18 @ (response 1..4 register) 
        .equ SDIO_RESP2_CARDSTATUS2_Shift, 0   @ bitWidth 32 (see Table 132.)  
 
    .equ SDIO_RESP3, SDIO_BASE + 0x1C @ (response 1..4 register) 
        .equ SDIO_RESP3_CARDSTATUS3_Shift, 0   @ bitWidth 32 (see Table 132.)  
 
    .equ SDIO_RESP4, SDIO_BASE + 0x20 @ (response 1..4 register) 
        .equ SDIO_RESP4_CARDSTATUS4_Shift, 0   @ bitWidth 32 (see Table 132.)  
 
    .equ SDIO_DTIMER, SDIO_BASE + 0x24 @ (data timer register) 
        .equ SDIO_DTIMER_DATATIME_Shift, 0   @ bitWidth 32 (Data timeout period)  
 
    .equ SDIO_DLEN, SDIO_BASE + 0x28 @ (data length register) 
        .equ SDIO_DLEN_DATALENGTH_Shift, 0   @ bitWidth 25 (Data length value)  
 
    .equ SDIO_DCTRL, SDIO_BASE + 0x2C @ (data control register) 
        .equ SDIO_DCTRL_SDIOEN, 1 << 11   @ bitWidth 1 (SD I/O enable functions)  
        .equ SDIO_DCTRL_RWMOD, 1 << 10   @ bitWidth 1 (Read wait mode)  
        .equ SDIO_DCTRL_RWSTOP, 1 << 9   @ bitWidth 1 (Read wait stop)  
        .equ SDIO_DCTRL_RWSTART, 1 << 8   @ bitWidth 1 (Read wait start)  
        .equ SDIO_DCTRL_DBLOCKSIZE_Shift, 4   @ bitWidth 4 (Data block size)  
        .equ SDIO_DCTRL_DMAEN, 1 << 3   @ bitWidth 1 (DMA enable bit)  
        .equ SDIO_DCTRL_DTMODE, 1 << 2   @ bitWidth 1 (Data transfer mode selection 1: Stream  or SDIO multibyte data transfer.)  
        .equ SDIO_DCTRL_DTDIR, 1 << 1   @ bitWidth 1 (Data transfer direction  selection)  
        .equ SDIO_DCTRL_DTEN, 1 << 0   @ bitWidth 1 (DTEN)  
 
    .equ SDIO_DCOUNT, SDIO_BASE + 0x30 @ (data counter register) 
        .equ SDIO_DCOUNT_DATACOUNT_Shift, 0   @ bitWidth 25 (Data count value)  
 
    .equ SDIO_STA, SDIO_BASE + 0x34 @ (status register) 
        .equ SDIO_STA_CEATAEND, 1 << 23   @ bitWidth 1 (CE-ATA command completion signal  received for CMD61)  
        .equ SDIO_STA_SDIOIT, 1 << 22   @ bitWidth 1 (SDIO interrupt received)  
        .equ SDIO_STA_RXDAVL, 1 << 21   @ bitWidth 1 (Data available in receive  FIFO)  
        .equ SDIO_STA_TXDAVL, 1 << 20   @ bitWidth 1 (Data available in transmit  FIFO)  
        .equ SDIO_STA_RXFIFOE, 1 << 19   @ bitWidth 1 (Receive FIFO empty)  
        .equ SDIO_STA_TXFIFOE, 1 << 18   @ bitWidth 1 (Transmit FIFO empty)  
        .equ SDIO_STA_RXFIFOF, 1 << 17   @ bitWidth 1 (Receive FIFO full)  
        .equ SDIO_STA_TXFIFOF, 1 << 16   @ bitWidth 1 (Transmit FIFO full)  
        .equ SDIO_STA_RXFIFOHF, 1 << 15   @ bitWidth 1 (Receive FIFO half full: there are at  least 8 words in the FIFO)  
        .equ SDIO_STA_TXFIFOHE, 1 << 14   @ bitWidth 1 (Transmit FIFO half empty: at least 8  words can be written into the FIFO)  
        .equ SDIO_STA_RXACT, 1 << 13   @ bitWidth 1 (Data receive in progress)  
        .equ SDIO_STA_TXACT, 1 << 12   @ bitWidth 1 (Data transmit in progress)  
        .equ SDIO_STA_CMDACT, 1 << 11   @ bitWidth 1 (Command transfer in  progress)  
        .equ SDIO_STA_DBCKEND, 1 << 10   @ bitWidth 1 (Data block sent/received CRC check  passed)  
        .equ SDIO_STA_STBITERR, 1 << 9   @ bitWidth 1 (Start bit not detected on all data  signals in wide bus mode)  
        .equ SDIO_STA_DATAEND, 1 << 8   @ bitWidth 1 (Data end data counter, SDIDCOUNT, is  zero)  
        .equ SDIO_STA_CMDSENT, 1 << 7   @ bitWidth 1 (Command sent no response  required)  
        .equ SDIO_STA_CMDREND, 1 << 6   @ bitWidth 1 (Command response received CRC check  passed)  
        .equ SDIO_STA_RXOVERR, 1 << 5   @ bitWidth 1 (Received FIFO overrun  error)  
        .equ SDIO_STA_TXUNDERR, 1 << 4   @ bitWidth 1 (Transmit FIFO underrun  error)  
        .equ SDIO_STA_DTIMEOUT, 1 << 3   @ bitWidth 1 (Data timeout)  
        .equ SDIO_STA_CTIMEOUT, 1 << 2   @ bitWidth 1 (Command response timeout)  
        .equ SDIO_STA_DCRCFAIL, 1 << 1   @ bitWidth 1 (Data block sent/received CRC check  failed)  
        .equ SDIO_STA_CCRCFAIL, 1 << 0   @ bitWidth 1 (Command response received CRC check  failed)  
 
    .equ SDIO_ICR, SDIO_BASE + 0x38 @ (interrupt clear register) 
        .equ SDIO_ICR_CEATAENDC, 1 << 23   @ bitWidth 1 (CEATAEND flag clear bit)  
        .equ SDIO_ICR_SDIOITC, 1 << 22   @ bitWidth 1 (SDIOIT flag clear bit)  
        .equ SDIO_ICR_DBCKENDC, 1 << 10   @ bitWidth 1 (DBCKEND flag clear bit)  
        .equ SDIO_ICR_STBITERRC, 1 << 9   @ bitWidth 1 (STBITERR flag clear bit)  
        .equ SDIO_ICR_DATAENDC, 1 << 8   @ bitWidth 1 (DATAEND flag clear bit)  
        .equ SDIO_ICR_CMDSENTC, 1 << 7   @ bitWidth 1 (CMDSENT flag clear bit)  
        .equ SDIO_ICR_CMDRENDC, 1 << 6   @ bitWidth 1 (CMDREND flag clear bit)  
        .equ SDIO_ICR_RXOVERRC, 1 << 5   @ bitWidth 1 (RXOVERR flag clear bit)  
        .equ SDIO_ICR_TXUNDERRC, 1 << 4   @ bitWidth 1 (TXUNDERR flag clear bit)  
        .equ SDIO_ICR_DTIMEOUTC, 1 << 3   @ bitWidth 1 (DTIMEOUT flag clear bit)  
        .equ SDIO_ICR_CTIMEOUTC, 1 << 2   @ bitWidth 1 (CTIMEOUT flag clear bit)  
        .equ SDIO_ICR_DCRCFAILC, 1 << 1   @ bitWidth 1 (DCRCFAIL flag clear bit)  
        .equ SDIO_ICR_CCRCFAILC, 1 << 0   @ bitWidth 1 (CCRCFAIL flag clear bit)  
 
    .equ SDIO_MASK, SDIO_BASE + 0x3C @ (mask register) 
        .equ SDIO_MASK_CEATAENDIE, 1 << 23   @ bitWidth 1 (CE-ATA command completion signal  received interrupt enable)  
        .equ SDIO_MASK_SDIOITIE, 1 << 22   @ bitWidth 1 (SDIO mode interrupt received interrupt  enable)  
        .equ SDIO_MASK_RXDAVLIE, 1 << 21   @ bitWidth 1 (Data available in Rx FIFO interrupt  enable)  
        .equ SDIO_MASK_TXDAVLIE, 1 << 20   @ bitWidth 1 (Data available in Tx FIFO interrupt  enable)  
        .equ SDIO_MASK_RXFIFOEIE, 1 << 19   @ bitWidth 1 (Rx FIFO empty interrupt  enable)  
        .equ SDIO_MASK_TXFIFOEIE, 1 << 18   @ bitWidth 1 (Tx FIFO empty interrupt  enable)  
        .equ SDIO_MASK_RXFIFOFIE, 1 << 17   @ bitWidth 1 (Rx FIFO full interrupt  enable)  
        .equ SDIO_MASK_TXFIFOFIE, 1 << 16   @ bitWidth 1 (Tx FIFO full interrupt  enable)  
        .equ SDIO_MASK_RXFIFOHFIE, 1 << 15   @ bitWidth 1 (Rx FIFO half full interrupt  enable)  
        .equ SDIO_MASK_TXFIFOHEIE, 1 << 14   @ bitWidth 1 (Tx FIFO half empty interrupt  enable)  
        .equ SDIO_MASK_RXACTIE, 1 << 13   @ bitWidth 1 (Data receive acting interrupt  enable)  
        .equ SDIO_MASK_TXACTIE, 1 << 12   @ bitWidth 1 (Data transmit acting interrupt  enable)  
        .equ SDIO_MASK_CMDACTIE, 1 << 11   @ bitWidth 1 (Command acting interrupt  enable)  
        .equ SDIO_MASK_DBCKENDIE, 1 << 10   @ bitWidth 1 (Data block end interrupt  enable)  
        .equ SDIO_MASK_STBITERRIE, 1 << 9   @ bitWidth 1 (Start bit error interrupt  enable)  
        .equ SDIO_MASK_DATAENDIE, 1 << 8   @ bitWidth 1 (Data end interrupt enable)  
        .equ SDIO_MASK_CMDSENTIE, 1 << 7   @ bitWidth 1 (Command sent interrupt  enable)  
        .equ SDIO_MASK_CMDRENDIE, 1 << 6   @ bitWidth 1 (Command response received interrupt  enable)  
        .equ SDIO_MASK_RXOVERRIE, 1 << 5   @ bitWidth 1 (Rx FIFO overrun error interrupt  enable)  
        .equ SDIO_MASK_TXUNDERRIE, 1 << 4   @ bitWidth 1 (Tx FIFO underrun error interrupt  enable)  
        .equ SDIO_MASK_DTIMEOUTIE, 1 << 3   @ bitWidth 1 (Data timeout interrupt  enable)  
        .equ SDIO_MASK_CTIMEOUTIE, 1 << 2   @ bitWidth 1 (Command timeout interrupt  enable)  
        .equ SDIO_MASK_DCRCFAILIE, 1 << 1   @ bitWidth 1 (Data CRC fail interrupt  enable)  
        .equ SDIO_MASK_CCRCFAILIE, 1 << 0   @ bitWidth 1 (Command CRC fail interrupt  enable)  
 
    .equ SDIO_FIFOCNT, SDIO_BASE + 0x48 @ (FIFO counter register) 
        .equ SDIO_FIFOCNT_FIFOCOUNT_Shift, 0   @ bitWidth 24 (Remaining number of words to be written  to or read from the FIFO.)  
 
    .equ SDIO_FIFO, SDIO_BASE + 0x80 @ (data FIFO register) 
        .equ SDIO_FIFO_FIFOData_Shift, 0   @ bitWidth 32 (Receive and transmit FIFO  data)  
 

@=========================== ADC1 ===========================@
.equ ADC1_BASE, 0x40012000 @ (Analog-to-digital converter) 
    .equ ADC1_SR, ADC1_BASE + 0x0 @ (status register) 
        .equ ADC1_SR_OVR, 1 << 5   @ bitWidth 1 (Overrun)  
        .equ ADC1_SR_STRT, 1 << 4   @ bitWidth 1 (Regular channel start flag)  
        .equ ADC1_SR_JSTRT, 1 << 3   @ bitWidth 1 (Injected channel start  flag)  
        .equ ADC1_SR_JEOC, 1 << 2   @ bitWidth 1 (Injected channel end of  conversion)  
        .equ ADC1_SR_EOC, 1 << 1   @ bitWidth 1 (Regular channel end of  conversion)  
        .equ ADC1_SR_AWD, 1 << 0   @ bitWidth 1 (Analog watchdog flag)  
 
    .equ ADC1_CR1, ADC1_BASE + 0x4 @ (control register 1) 
        .equ ADC1_CR1_OVRIE, 1 << 26   @ bitWidth 1 (Overrun interrupt enable)  
        .equ ADC1_CR1_RES_Shift, 24   @ bitWidth 2 (Resolution)  
        .equ ADC1_CR1_AWDEN, 1 << 23   @ bitWidth 1 (Analog watchdog enable on regular  channels)  
        .equ ADC1_CR1_JAWDEN, 1 << 22   @ bitWidth 1 (Analog watchdog enable on injected  channels)  
        .equ ADC1_CR1_DISCNUM_Shift, 13   @ bitWidth 3 (Discontinuous mode channel  count)  
        .equ ADC1_CR1_JDISCEN, 1 << 12   @ bitWidth 1 (Discontinuous mode on injected  channels)  
        .equ ADC1_CR1_DISCEN, 1 << 11   @ bitWidth 1 (Discontinuous mode on regular  channels)  
        .equ ADC1_CR1_JAUTO, 1 << 10   @ bitWidth 1 (Automatic injected group  conversion)  
        .equ ADC1_CR1_AWDSGL, 1 << 9   @ bitWidth 1 (Enable the watchdog on a single channel  in scan mode)  
        .equ ADC1_CR1_SCAN, 1 << 8   @ bitWidth 1 (Scan mode)  
        .equ ADC1_CR1_JEOCIE, 1 << 7   @ bitWidth 1 (Interrupt enable for injected  channels)  
        .equ ADC1_CR1_AWDIE, 1 << 6   @ bitWidth 1 (Analog watchdog interrupt  enable)  
        .equ ADC1_CR1_EOCIE, 1 << 5   @ bitWidth 1 (Interrupt enable for EOC)  
        .equ ADC1_CR1_AWDCH_Shift, 0   @ bitWidth 5 (Analog watchdog channel select  bits)  
 
    .equ ADC1_CR2, ADC1_BASE + 0x8 @ (control register 2) 
        .equ ADC1_CR2_SWSTART, 1 << 30   @ bitWidth 1 (Start conversion of regular  channels)  
        .equ ADC1_CR2_EXTEN_Shift, 28   @ bitWidth 2 (External trigger enable for regular  channels)  
        .equ ADC1_CR2_EXTSEL_Shift, 24   @ bitWidth 4 (External event select for regular  group)  
        .equ ADC1_CR2_JSWSTART, 1 << 22   @ bitWidth 1 (Start conversion of injected  channels)  
        .equ ADC1_CR2_JEXTEN_Shift, 20   @ bitWidth 2 (External trigger enable for injected  channels)  
        .equ ADC1_CR2_JEXTSEL_Shift, 16   @ bitWidth 4 (External event select for injected  group)  
        .equ ADC1_CR2_ALIGN, 1 << 11   @ bitWidth 1 (Data alignment)  
        .equ ADC1_CR2_EOCS, 1 << 10   @ bitWidth 1 (End of conversion  selection)  
        .equ ADC1_CR2_DDS, 1 << 9   @ bitWidth 1 (DMA disable selection for single ADC  mode)  
        .equ ADC1_CR2_DMA, 1 << 8   @ bitWidth 1 (Direct memory access mode for single  ADC mode)  
        .equ ADC1_CR2_CONT, 1 << 1   @ bitWidth 1 (Continuous conversion)  
        .equ ADC1_CR2_ADON, 1 << 0   @ bitWidth 1 (A/D Converter ON / OFF)  
 
    .equ ADC1_SMPR1, ADC1_BASE + 0xC @ (sample time register 1) 
        .equ ADC1_SMPR1_SMPx_x_Shift, 0   @ bitWidth 32 (Sample time bits)  
 
    .equ ADC1_SMPR2, ADC1_BASE + 0x10 @ (sample time register 2) 
        .equ ADC1_SMPR2_SMPx_x_Shift, 0   @ bitWidth 32 (Sample time bits)  
 
    .equ ADC1_JOFR1, ADC1_BASE + 0x14 @ (injected channel data offset register  x) 
        .equ ADC1_JOFR1_JOFFSET1_Shift, 0   @ bitWidth 12 (Data offset for injected channel  x)  
 
    .equ ADC1_JOFR2, ADC1_BASE + 0x18 @ (injected channel data offset register  x) 
        .equ ADC1_JOFR2_JOFFSET2_Shift, 0   @ bitWidth 12 (Data offset for injected channel  x)  
 
    .equ ADC1_JOFR3, ADC1_BASE + 0x1C @ (injected channel data offset register  x) 
        .equ ADC1_JOFR3_JOFFSET3_Shift, 0   @ bitWidth 12 (Data offset for injected channel  x)  
 
    .equ ADC1_JOFR4, ADC1_BASE + 0x20 @ (injected channel data offset register  x) 
        .equ ADC1_JOFR4_JOFFSET4_Shift, 0   @ bitWidth 12 (Data offset for injected channel  x)  
 
    .equ ADC1_HTR, ADC1_BASE + 0x24 @ (watchdog higher threshold  register) 
        .equ ADC1_HTR_HT_Shift, 0   @ bitWidth 12 (Analog watchdog higher  threshold)  
 
    .equ ADC1_LTR, ADC1_BASE + 0x28 @ (watchdog lower threshold  register) 
        .equ ADC1_LTR_LT_Shift, 0   @ bitWidth 12 (Analog watchdog lower  threshold)  
 
    .equ ADC1_SQR1, ADC1_BASE + 0x2C @ (regular sequence register 1) 
        .equ ADC1_SQR1_L_Shift, 20   @ bitWidth 4 (Regular channel sequence  length)  
        .equ ADC1_SQR1_SQ16_Shift, 15   @ bitWidth 5 (16th conversion in regular  sequence)  
        .equ ADC1_SQR1_SQ15_Shift, 10   @ bitWidth 5 (15th conversion in regular  sequence)  
        .equ ADC1_SQR1_SQ14_Shift, 5   @ bitWidth 5 (14th conversion in regular  sequence)  
        .equ ADC1_SQR1_SQ13_Shift, 0   @ bitWidth 5 (13th conversion in regular  sequence)  
 
    .equ ADC1_SQR2, ADC1_BASE + 0x30 @ (regular sequence register 2) 
        .equ ADC1_SQR2_SQ12_Shift, 25   @ bitWidth 5 (12th conversion in regular  sequence)  
        .equ ADC1_SQR2_SQ11_Shift, 20   @ bitWidth 5 (11th conversion in regular  sequence)  
        .equ ADC1_SQR2_SQ10_Shift, 15   @ bitWidth 5 (10th conversion in regular  sequence)  
        .equ ADC1_SQR2_SQ9_Shift, 10   @ bitWidth 5 (9th conversion in regular  sequence)  
        .equ ADC1_SQR2_SQ8_Shift, 5   @ bitWidth 5 (8th conversion in regular  sequence)  
        .equ ADC1_SQR2_SQ7_Shift, 0   @ bitWidth 5 (7th conversion in regular  sequence)  
 
    .equ ADC1_SQR3, ADC1_BASE + 0x34 @ (regular sequence register 3) 
        .equ ADC1_SQR3_SQ6_Shift, 25   @ bitWidth 5 (6th conversion in regular  sequence)  
        .equ ADC1_SQR3_SQ5_Shift, 20   @ bitWidth 5 (5th conversion in regular  sequence)  
        .equ ADC1_SQR3_SQ4_Shift, 15   @ bitWidth 5 (4th conversion in regular  sequence)  
        .equ ADC1_SQR3_SQ3_Shift, 10   @ bitWidth 5 (3rd conversion in regular  sequence)  
        .equ ADC1_SQR3_SQ2_Shift, 5   @ bitWidth 5 (2nd conversion in regular  sequence)  
        .equ ADC1_SQR3_SQ1_Shift, 0   @ bitWidth 5 (1st conversion in regular  sequence)  
 
    .equ ADC1_JSQR, ADC1_BASE + 0x38 @ (injected sequence register) 
        .equ ADC1_JSQR_JL_Shift, 20   @ bitWidth 2 (Injected sequence length)  
        .equ ADC1_JSQR_JSQ4_Shift, 15   @ bitWidth 5 (4th conversion in injected  sequence)  
        .equ ADC1_JSQR_JSQ3_Shift, 10   @ bitWidth 5 (3rd conversion in injected  sequence)  
        .equ ADC1_JSQR_JSQ2_Shift, 5   @ bitWidth 5 (2nd conversion in injected  sequence)  
        .equ ADC1_JSQR_JSQ1_Shift, 0   @ bitWidth 5 (1st conversion in injected  sequence)  
 
    .equ ADC1_JDR1, ADC1_BASE + 0x3C @ (injected data register x) 
        .equ ADC1_JDR1_JDATA_Shift, 0   @ bitWidth 16 (Injected data)  
 
    .equ ADC1_JDR2, ADC1_BASE + 0x40 @ (injected data register x) 
        .equ ADC1_JDR2_JDATA_Shift, 0   @ bitWidth 16 (Injected data)  
 
    .equ ADC1_JDR3, ADC1_BASE + 0x44 @ (injected data register x) 
        .equ ADC1_JDR3_JDATA_Shift, 0   @ bitWidth 16 (Injected data)  
 
    .equ ADC1_JDR4, ADC1_BASE + 0x48 @ (injected data register x) 
        .equ ADC1_JDR4_JDATA_Shift, 0   @ bitWidth 16 (Injected data)  
 
    .equ ADC1_DR, ADC1_BASE + 0x4C @ (regular data register) 
        .equ ADC1_DR_DATA_Shift, 0   @ bitWidth 16 (Regular data)  
 

@=========================== ADC2 ===========================@
.equ ADC2_BASE, 0x40012100 @ (Analog-to-digital converter) 
    .equ ADC2_SR, ADC2_BASE + 0x0 @ (status register) 
        .equ ADC2_SR_OVR, 1 << 5   @ bitWidth 1 (Overrun)  
        .equ ADC2_SR_STRT, 1 << 4   @ bitWidth 1 (Regular channel start flag)  
        .equ ADC2_SR_JSTRT, 1 << 3   @ bitWidth 1 (Injected channel start  flag)  
        .equ ADC2_SR_JEOC, 1 << 2   @ bitWidth 1 (Injected channel end of  conversion)  
        .equ ADC2_SR_EOC, 1 << 1   @ bitWidth 1 (Regular channel end of  conversion)  
        .equ ADC2_SR_AWD, 1 << 0   @ bitWidth 1 (Analog watchdog flag)  
 
    .equ ADC2_CR1, ADC2_BASE + 0x4 @ (control register 1) 
        .equ ADC2_CR1_OVRIE, 1 << 26   @ bitWidth 1 (Overrun interrupt enable)  
        .equ ADC2_CR1_RES_Shift, 24   @ bitWidth 2 (Resolution)  
        .equ ADC2_CR1_AWDEN, 1 << 23   @ bitWidth 1 (Analog watchdog enable on regular  channels)  
        .equ ADC2_CR1_JAWDEN, 1 << 22   @ bitWidth 1 (Analog watchdog enable on injected  channels)  
        .equ ADC2_CR1_DISCNUM_Shift, 13   @ bitWidth 3 (Discontinuous mode channel  count)  
        .equ ADC2_CR1_JDISCEN, 1 << 12   @ bitWidth 1 (Discontinuous mode on injected  channels)  
        .equ ADC2_CR1_DISCEN, 1 << 11   @ bitWidth 1 (Discontinuous mode on regular  channels)  
        .equ ADC2_CR1_JAUTO, 1 << 10   @ bitWidth 1 (Automatic injected group  conversion)  
        .equ ADC2_CR1_AWDSGL, 1 << 9   @ bitWidth 1 (Enable the watchdog on a single channel  in scan mode)  
        .equ ADC2_CR1_SCAN, 1 << 8   @ bitWidth 1 (Scan mode)  
        .equ ADC2_CR1_JEOCIE, 1 << 7   @ bitWidth 1 (Interrupt enable for injected  channels)  
        .equ ADC2_CR1_AWDIE, 1 << 6   @ bitWidth 1 (Analog watchdog interrupt  enable)  
        .equ ADC2_CR1_EOCIE, 1 << 5   @ bitWidth 1 (Interrupt enable for EOC)  
        .equ ADC2_CR1_AWDCH_Shift, 0   @ bitWidth 5 (Analog watchdog channel select  bits)  
 
    .equ ADC2_CR2, ADC2_BASE + 0x8 @ (control register 2) 
        .equ ADC2_CR2_SWSTART, 1 << 30   @ bitWidth 1 (Start conversion of regular  channels)  
        .equ ADC2_CR2_EXTEN_Shift, 28   @ bitWidth 2 (External trigger enable for regular  channels)  
        .equ ADC2_CR2_EXTSEL_Shift, 24   @ bitWidth 4 (External event select for regular  group)  
        .equ ADC2_CR2_JSWSTART, 1 << 22   @ bitWidth 1 (Start conversion of injected  channels)  
        .equ ADC2_CR2_JEXTEN_Shift, 20   @ bitWidth 2 (External trigger enable for injected  channels)  
        .equ ADC2_CR2_JEXTSEL_Shift, 16   @ bitWidth 4 (External event select for injected  group)  
        .equ ADC2_CR2_ALIGN, 1 << 11   @ bitWidth 1 (Data alignment)  
        .equ ADC2_CR2_EOCS, 1 << 10   @ bitWidth 1 (End of conversion  selection)  
        .equ ADC2_CR2_DDS, 1 << 9   @ bitWidth 1 (DMA disable selection for single ADC  mode)  
        .equ ADC2_CR2_DMA, 1 << 8   @ bitWidth 1 (Direct memory access mode for single  ADC mode)  
        .equ ADC2_CR2_CONT, 1 << 1   @ bitWidth 1 (Continuous conversion)  
        .equ ADC2_CR2_ADON, 1 << 0   @ bitWidth 1 (A/D Converter ON / OFF)  
 
    .equ ADC2_SMPR1, ADC2_BASE + 0xC @ (sample time register 1) 
        .equ ADC2_SMPR1_SMPx_x_Shift, 0   @ bitWidth 32 (Sample time bits)  
 
    .equ ADC2_SMPR2, ADC2_BASE + 0x10 @ (sample time register 2) 
        .equ ADC2_SMPR2_SMPx_x_Shift, 0   @ bitWidth 32 (Sample time bits)  
 
    .equ ADC2_JOFR1, ADC2_BASE + 0x14 @ (injected channel data offset register  x) 
        .equ ADC2_JOFR1_JOFFSET1_Shift, 0   @ bitWidth 12 (Data offset for injected channel  x)  
 
    .equ ADC2_JOFR2, ADC2_BASE + 0x18 @ (injected channel data offset register  x) 
        .equ ADC2_JOFR2_JOFFSET2_Shift, 0   @ bitWidth 12 (Data offset for injected channel  x)  
 
    .equ ADC2_JOFR3, ADC2_BASE + 0x1C @ (injected channel data offset register  x) 
        .equ ADC2_JOFR3_JOFFSET3_Shift, 0   @ bitWidth 12 (Data offset for injected channel  x)  
 
    .equ ADC2_JOFR4, ADC2_BASE + 0x20 @ (injected channel data offset register  x) 
        .equ ADC2_JOFR4_JOFFSET4_Shift, 0   @ bitWidth 12 (Data offset for injected channel  x)  
 
    .equ ADC2_HTR, ADC2_BASE + 0x24 @ (watchdog higher threshold  register) 
        .equ ADC2_HTR_HT_Shift, 0   @ bitWidth 12 (Analog watchdog higher  threshold)  
 
    .equ ADC2_LTR, ADC2_BASE + 0x28 @ (watchdog lower threshold  register) 
        .equ ADC2_LTR_LT_Shift, 0   @ bitWidth 12 (Analog watchdog lower  threshold)  
 
    .equ ADC2_SQR1, ADC2_BASE + 0x2C @ (regular sequence register 1) 
        .equ ADC2_SQR1_L_Shift, 20   @ bitWidth 4 (Regular channel sequence  length)  
        .equ ADC2_SQR1_SQ16_Shift, 15   @ bitWidth 5 (16th conversion in regular  sequence)  
        .equ ADC2_SQR1_SQ15_Shift, 10   @ bitWidth 5 (15th conversion in regular  sequence)  
        .equ ADC2_SQR1_SQ14_Shift, 5   @ bitWidth 5 (14th conversion in regular  sequence)  
        .equ ADC2_SQR1_SQ13_Shift, 0   @ bitWidth 5 (13th conversion in regular  sequence)  
 
    .equ ADC2_SQR2, ADC2_BASE + 0x30 @ (regular sequence register 2) 
        .equ ADC2_SQR2_SQ12_Shift, 25   @ bitWidth 5 (12th conversion in regular  sequence)  
        .equ ADC2_SQR2_SQ11_Shift, 20   @ bitWidth 5 (11th conversion in regular  sequence)  
        .equ ADC2_SQR2_SQ10_Shift, 15   @ bitWidth 5 (10th conversion in regular  sequence)  
        .equ ADC2_SQR2_SQ9_Shift, 10   @ bitWidth 5 (9th conversion in regular  sequence)  
        .equ ADC2_SQR2_SQ8_Shift, 5   @ bitWidth 5 (8th conversion in regular  sequence)  
        .equ ADC2_SQR2_SQ7_Shift, 0   @ bitWidth 5 (7th conversion in regular  sequence)  
 
    .equ ADC2_SQR3, ADC2_BASE + 0x34 @ (regular sequence register 3) 
        .equ ADC2_SQR3_SQ6_Shift, 25   @ bitWidth 5 (6th conversion in regular  sequence)  
        .equ ADC2_SQR3_SQ5_Shift, 20   @ bitWidth 5 (5th conversion in regular  sequence)  
        .equ ADC2_SQR3_SQ4_Shift, 15   @ bitWidth 5 (4th conversion in regular  sequence)  
        .equ ADC2_SQR3_SQ3_Shift, 10   @ bitWidth 5 (3rd conversion in regular  sequence)  
        .equ ADC2_SQR3_SQ2_Shift, 5   @ bitWidth 5 (2nd conversion in regular  sequence)  
        .equ ADC2_SQR3_SQ1_Shift, 0   @ bitWidth 5 (1st conversion in regular  sequence)  
 
    .equ ADC2_JSQR, ADC2_BASE + 0x38 @ (injected sequence register) 
        .equ ADC2_JSQR_JL_Shift, 20   @ bitWidth 2 (Injected sequence length)  
        .equ ADC2_JSQR_JSQ4_Shift, 15   @ bitWidth 5 (4th conversion in injected  sequence)  
        .equ ADC2_JSQR_JSQ3_Shift, 10   @ bitWidth 5 (3rd conversion in injected  sequence)  
        .equ ADC2_JSQR_JSQ2_Shift, 5   @ bitWidth 5 (2nd conversion in injected  sequence)  
        .equ ADC2_JSQR_JSQ1_Shift, 0   @ bitWidth 5 (1st conversion in injected  sequence)  
 
    .equ ADC2_JDR1, ADC2_BASE + 0x3C @ (injected data register x) 
        .equ ADC2_JDR1_JDATA_Shift, 0   @ bitWidth 16 (Injected data)  
 
    .equ ADC2_JDR2, ADC2_BASE + 0x40 @ (injected data register x) 
        .equ ADC2_JDR2_JDATA_Shift, 0   @ bitWidth 16 (Injected data)  
 
    .equ ADC2_JDR3, ADC2_BASE + 0x44 @ (injected data register x) 
        .equ ADC2_JDR3_JDATA_Shift, 0   @ bitWidth 16 (Injected data)  
 
    .equ ADC2_JDR4, ADC2_BASE + 0x48 @ (injected data register x) 
        .equ ADC2_JDR4_JDATA_Shift, 0   @ bitWidth 16 (Injected data)  
 
    .equ ADC2_DR, ADC2_BASE + 0x4C @ (regular data register) 
        .equ ADC2_DR_DATA_Shift, 0   @ bitWidth 16 (Regular data)  
 

@=========================== ADC3 ===========================@
.equ ADC3_BASE, 0x40012200 @ (Analog-to-digital converter) 
    .equ ADC3_SR, ADC3_BASE + 0x0 @ (status register) 
        .equ ADC3_SR_OVR, 1 << 5   @ bitWidth 1 (Overrun)  
        .equ ADC3_SR_STRT, 1 << 4   @ bitWidth 1 (Regular channel start flag)  
        .equ ADC3_SR_JSTRT, 1 << 3   @ bitWidth 1 (Injected channel start  flag)  
        .equ ADC3_SR_JEOC, 1 << 2   @ bitWidth 1 (Injected channel end of  conversion)  
        .equ ADC3_SR_EOC, 1 << 1   @ bitWidth 1 (Regular channel end of  conversion)  
        .equ ADC3_SR_AWD, 1 << 0   @ bitWidth 1 (Analog watchdog flag)  
 
    .equ ADC3_CR1, ADC3_BASE + 0x4 @ (control register 1) 
        .equ ADC3_CR1_OVRIE, 1 << 26   @ bitWidth 1 (Overrun interrupt enable)  
        .equ ADC3_CR1_RES_Shift, 24   @ bitWidth 2 (Resolution)  
        .equ ADC3_CR1_AWDEN, 1 << 23   @ bitWidth 1 (Analog watchdog enable on regular  channels)  
        .equ ADC3_CR1_JAWDEN, 1 << 22   @ bitWidth 1 (Analog watchdog enable on injected  channels)  
        .equ ADC3_CR1_DISCNUM_Shift, 13   @ bitWidth 3 (Discontinuous mode channel  count)  
        .equ ADC3_CR1_JDISCEN, 1 << 12   @ bitWidth 1 (Discontinuous mode on injected  channels)  
        .equ ADC3_CR1_DISCEN, 1 << 11   @ bitWidth 1 (Discontinuous mode on regular  channels)  
        .equ ADC3_CR1_JAUTO, 1 << 10   @ bitWidth 1 (Automatic injected group  conversion)  
        .equ ADC3_CR1_AWDSGL, 1 << 9   @ bitWidth 1 (Enable the watchdog on a single channel  in scan mode)  
        .equ ADC3_CR1_SCAN, 1 << 8   @ bitWidth 1 (Scan mode)  
        .equ ADC3_CR1_JEOCIE, 1 << 7   @ bitWidth 1 (Interrupt enable for injected  channels)  
        .equ ADC3_CR1_AWDIE, 1 << 6   @ bitWidth 1 (Analog watchdog interrupt  enable)  
        .equ ADC3_CR1_EOCIE, 1 << 5   @ bitWidth 1 (Interrupt enable for EOC)  
        .equ ADC3_CR1_AWDCH_Shift, 0   @ bitWidth 5 (Analog watchdog channel select  bits)  
 
    .equ ADC3_CR2, ADC3_BASE + 0x8 @ (control register 2) 
        .equ ADC3_CR2_SWSTART, 1 << 30   @ bitWidth 1 (Start conversion of regular  channels)  
        .equ ADC3_CR2_EXTEN_Shift, 28   @ bitWidth 2 (External trigger enable for regular  channels)  
        .equ ADC3_CR2_EXTSEL_Shift, 24   @ bitWidth 4 (External event select for regular  group)  
        .equ ADC3_CR2_JSWSTART, 1 << 22   @ bitWidth 1 (Start conversion of injected  channels)  
        .equ ADC3_CR2_JEXTEN_Shift, 20   @ bitWidth 2 (External trigger enable for injected  channels)  
        .equ ADC3_CR2_JEXTSEL_Shift, 16   @ bitWidth 4 (External event select for injected  group)  
        .equ ADC3_CR2_ALIGN, 1 << 11   @ bitWidth 1 (Data alignment)  
        .equ ADC3_CR2_EOCS, 1 << 10   @ bitWidth 1 (End of conversion  selection)  
        .equ ADC3_CR2_DDS, 1 << 9   @ bitWidth 1 (DMA disable selection for single ADC  mode)  
        .equ ADC3_CR2_DMA, 1 << 8   @ bitWidth 1 (Direct memory access mode for single  ADC mode)  
        .equ ADC3_CR2_CONT, 1 << 1   @ bitWidth 1 (Continuous conversion)  
        .equ ADC3_CR2_ADON, 1 << 0   @ bitWidth 1 (A/D Converter ON / OFF)  
 
    .equ ADC3_SMPR1, ADC3_BASE + 0xC @ (sample time register 1) 
        .equ ADC3_SMPR1_SMPx_x_Shift, 0   @ bitWidth 32 (Sample time bits)  
 
    .equ ADC3_SMPR2, ADC3_BASE + 0x10 @ (sample time register 2) 
        .equ ADC3_SMPR2_SMPx_x_Shift, 0   @ bitWidth 32 (Sample time bits)  
 
    .equ ADC3_JOFR1, ADC3_BASE + 0x14 @ (injected channel data offset register  x) 
        .equ ADC3_JOFR1_JOFFSET1_Shift, 0   @ bitWidth 12 (Data offset for injected channel  x)  
 
    .equ ADC3_JOFR2, ADC3_BASE + 0x18 @ (injected channel data offset register  x) 
        .equ ADC3_JOFR2_JOFFSET2_Shift, 0   @ bitWidth 12 (Data offset for injected channel  x)  
 
    .equ ADC3_JOFR3, ADC3_BASE + 0x1C @ (injected channel data offset register  x) 
        .equ ADC3_JOFR3_JOFFSET3_Shift, 0   @ bitWidth 12 (Data offset for injected channel  x)  
 
    .equ ADC3_JOFR4, ADC3_BASE + 0x20 @ (injected channel data offset register  x) 
        .equ ADC3_JOFR4_JOFFSET4_Shift, 0   @ bitWidth 12 (Data offset for injected channel  x)  
 
    .equ ADC3_HTR, ADC3_BASE + 0x24 @ (watchdog higher threshold  register) 
        .equ ADC3_HTR_HT_Shift, 0   @ bitWidth 12 (Analog watchdog higher  threshold)  
 
    .equ ADC3_LTR, ADC3_BASE + 0x28 @ (watchdog lower threshold  register) 
        .equ ADC3_LTR_LT_Shift, 0   @ bitWidth 12 (Analog watchdog lower  threshold)  
 
    .equ ADC3_SQR1, ADC3_BASE + 0x2C @ (regular sequence register 1) 
        .equ ADC3_SQR1_L_Shift, 20   @ bitWidth 4 (Regular channel sequence  length)  
        .equ ADC3_SQR1_SQ16_Shift, 15   @ bitWidth 5 (16th conversion in regular  sequence)  
        .equ ADC3_SQR1_SQ15_Shift, 10   @ bitWidth 5 (15th conversion in regular  sequence)  
        .equ ADC3_SQR1_SQ14_Shift, 5   @ bitWidth 5 (14th conversion in regular  sequence)  
        .equ ADC3_SQR1_SQ13_Shift, 0   @ bitWidth 5 (13th conversion in regular  sequence)  
 
    .equ ADC3_SQR2, ADC3_BASE + 0x30 @ (regular sequence register 2) 
        .equ ADC3_SQR2_SQ12_Shift, 25   @ bitWidth 5 (12th conversion in regular  sequence)  
        .equ ADC3_SQR2_SQ11_Shift, 20   @ bitWidth 5 (11th conversion in regular  sequence)  
        .equ ADC3_SQR2_SQ10_Shift, 15   @ bitWidth 5 (10th conversion in regular  sequence)  
        .equ ADC3_SQR2_SQ9_Shift, 10   @ bitWidth 5 (9th conversion in regular  sequence)  
        .equ ADC3_SQR2_SQ8_Shift, 5   @ bitWidth 5 (8th conversion in regular  sequence)  
        .equ ADC3_SQR2_SQ7_Shift, 0   @ bitWidth 5 (7th conversion in regular  sequence)  
 
    .equ ADC3_SQR3, ADC3_BASE + 0x34 @ (regular sequence register 3) 
        .equ ADC3_SQR3_SQ6_Shift, 25   @ bitWidth 5 (6th conversion in regular  sequence)  
        .equ ADC3_SQR3_SQ5_Shift, 20   @ bitWidth 5 (5th conversion in regular  sequence)  
        .equ ADC3_SQR3_SQ4_Shift, 15   @ bitWidth 5 (4th conversion in regular  sequence)  
        .equ ADC3_SQR3_SQ3_Shift, 10   @ bitWidth 5 (3rd conversion in regular  sequence)  
        .equ ADC3_SQR3_SQ2_Shift, 5   @ bitWidth 5 (2nd conversion in regular  sequence)  
        .equ ADC3_SQR3_SQ1_Shift, 0   @ bitWidth 5 (1st conversion in regular  sequence)  
 
    .equ ADC3_JSQR, ADC3_BASE + 0x38 @ (injected sequence register) 
        .equ ADC3_JSQR_JL_Shift, 20   @ bitWidth 2 (Injected sequence length)  
        .equ ADC3_JSQR_JSQ4_Shift, 15   @ bitWidth 5 (4th conversion in injected  sequence)  
        .equ ADC3_JSQR_JSQ3_Shift, 10   @ bitWidth 5 (3rd conversion in injected  sequence)  
        .equ ADC3_JSQR_JSQ2_Shift, 5   @ bitWidth 5 (2nd conversion in injected  sequence)  
        .equ ADC3_JSQR_JSQ1_Shift, 0   @ bitWidth 5 (1st conversion in injected  sequence)  
 
    .equ ADC3_JDR1, ADC3_BASE + 0x3C @ (injected data register x) 
        .equ ADC3_JDR1_JDATA_Shift, 0   @ bitWidth 16 (Injected data)  
 
    .equ ADC3_JDR2, ADC3_BASE + 0x40 @ (injected data register x) 
        .equ ADC3_JDR2_JDATA_Shift, 0   @ bitWidth 16 (Injected data)  
 
    .equ ADC3_JDR3, ADC3_BASE + 0x44 @ (injected data register x) 
        .equ ADC3_JDR3_JDATA_Shift, 0   @ bitWidth 16 (Injected data)  
 
    .equ ADC3_JDR4, ADC3_BASE + 0x48 @ (injected data register x) 
        .equ ADC3_JDR4_JDATA_Shift, 0   @ bitWidth 16 (Injected data)  
 
    .equ ADC3_DR, ADC3_BASE + 0x4C @ (regular data register) 
        .equ ADC3_DR_DATA_Shift, 0   @ bitWidth 16 (Regular data)  
 

@=========================== USART6 ===========================@
.equ USART6_BASE, 0x40011400 @ (Universal synchronous asynchronous receiver  transmitter) 
    .equ USART6_SR, USART6_BASE + 0x0 @ (Status register) 
        .equ USART6_SR_CTS, 1 << 9   @ bitWidth 1 (CTS flag)  
        .equ USART6_SR_LBD, 1 << 8   @ bitWidth 1 (LIN break detection flag)  
        .equ USART6_SR_TXE, 1 << 7   @ bitWidth 1 (Transmit data register  empty)  
        .equ USART6_SR_TC, 1 << 6   @ bitWidth 1 (Transmission complete)  
        .equ USART6_SR_RXNE, 1 << 5   @ bitWidth 1 (Read data register not  empty)  
        .equ USART6_SR_IDLE, 1 << 4   @ bitWidth 1 (IDLE line detected)  
        .equ USART6_SR_ORE, 1 << 3   @ bitWidth 1 (Overrun error)  
        .equ USART6_SR_NF, 1 << 2   @ bitWidth 1 (Noise detected flag)  
        .equ USART6_SR_FE, 1 << 1   @ bitWidth 1 (Framing error)  
        .equ USART6_SR_PE, 1 << 0   @ bitWidth 1 (Parity error)  
 
    .equ USART6_DR, USART6_BASE + 0x4 @ (Data register) 
        .equ USART6_DR_DR_Shift, 0   @ bitWidth 9 (Data value)  
 
    .equ USART6_BRR, USART6_BASE + 0x8 @ (Baud rate register) 
        .equ USART6_BRR_DIV_Mantissa_Shift, 4   @ bitWidth 12 (mantissa of USARTDIV)  
        .equ USART6_BRR_DIV_Fraction_Shift, 0   @ bitWidth 4 (fraction of USARTDIV)  
 
    .equ USART6_CR1, USART6_BASE + 0xC @ (Control register 1) 
        .equ USART6_CR1_OVER8, 1 << 15   @ bitWidth 1 (Oversampling mode)  
        .equ USART6_CR1_UE, 1 << 13   @ bitWidth 1 (USART enable)  
        .equ USART6_CR1_M, 1 << 12   @ bitWidth 1 (Word length)  
        .equ USART6_CR1_WAKE, 1 << 11   @ bitWidth 1 (Wakeup method)  
        .equ USART6_CR1_PCE, 1 << 10   @ bitWidth 1 (Parity control enable)  
        .equ USART6_CR1_PS, 1 << 9   @ bitWidth 1 (Parity selection)  
        .equ USART6_CR1_PEIE, 1 << 8   @ bitWidth 1 (PE interrupt enable)  
        .equ USART6_CR1_TXEIE, 1 << 7   @ bitWidth 1 (TXE interrupt enable)  
        .equ USART6_CR1_TCIE, 1 << 6   @ bitWidth 1 (Transmission complete interrupt  enable)  
        .equ USART6_CR1_RXNEIE, 1 << 5   @ bitWidth 1 (RXNE interrupt enable)  
        .equ USART6_CR1_IDLEIE, 1 << 4   @ bitWidth 1 (IDLE interrupt enable)  
        .equ USART6_CR1_TE, 1 << 3   @ bitWidth 1 (Transmitter enable)  
        .equ USART6_CR1_RE, 1 << 2   @ bitWidth 1 (Receiver enable)  
        .equ USART6_CR1_RWU, 1 << 1   @ bitWidth 1 (Receiver wakeup)  
        .equ USART6_CR1_SBK, 1 << 0   @ bitWidth 1 (Send break)  
 
    .equ USART6_CR2, USART6_BASE + 0x10 @ (Control register 2) 
        .equ USART6_CR2_LINEN, 1 << 14   @ bitWidth 1 (LIN mode enable)  
        .equ USART6_CR2_STOP_Shift, 12   @ bitWidth 2 (STOP bits)  
        .equ USART6_CR2_CLKEN, 1 << 11   @ bitWidth 1 (Clock enable)  
        .equ USART6_CR2_CPOL, 1 << 10   @ bitWidth 1 (Clock polarity)  
        .equ USART6_CR2_CPHA, 1 << 9   @ bitWidth 1 (Clock phase)  
        .equ USART6_CR2_LBCL, 1 << 8   @ bitWidth 1 (Last bit clock pulse)  
        .equ USART6_CR2_LBDIE, 1 << 6   @ bitWidth 1 (LIN break detection interrupt  enable)  
        .equ USART6_CR2_LBDL, 1 << 5   @ bitWidth 1 (lin break detection length)  
        .equ USART6_CR2_ADD_Shift, 0   @ bitWidth 4 (Address of the USART node)  
 
    .equ USART6_CR3, USART6_BASE + 0x14 @ (Control register 3) 
        .equ USART6_CR3_ONEBIT, 1 << 11   @ bitWidth 1 (One sample bit method  enable)  
        .equ USART6_CR3_CTSIE, 1 << 10   @ bitWidth 1 (CTS interrupt enable)  
        .equ USART6_CR3_CTSE, 1 << 9   @ bitWidth 1 (CTS enable)  
        .equ USART6_CR3_RTSE, 1 << 8   @ bitWidth 1 (RTS enable)  
        .equ USART6_CR3_DMAT, 1 << 7   @ bitWidth 1 (DMA enable transmitter)  
        .equ USART6_CR3_DMAR, 1 << 6   @ bitWidth 1 (DMA enable receiver)  
        .equ USART6_CR3_SCEN, 1 << 5   @ bitWidth 1 (Smartcard mode enable)  
        .equ USART6_CR3_NACK, 1 << 4   @ bitWidth 1 (Smartcard NACK enable)  
        .equ USART6_CR3_HDSEL, 1 << 3   @ bitWidth 1 (Half-duplex selection)  
        .equ USART6_CR3_IRLP, 1 << 2   @ bitWidth 1 (IrDA low-power)  
        .equ USART6_CR3_IREN, 1 << 1   @ bitWidth 1 (IrDA mode enable)  
        .equ USART6_CR3_EIE, 1 << 0   @ bitWidth 1 (Error interrupt enable)  
 
    .equ USART6_GTPR, USART6_BASE + 0x18 @ (Guard time and prescaler  register) 
        .equ USART6_GTPR_GT_Shift, 8   @ bitWidth 8 (Guard time value)  
        .equ USART6_GTPR_PSC_Shift, 0   @ bitWidth 8 (Prescaler value)  
 

@=========================== USART1 ===========================@
.equ USART1_BASE, 0x40011000 @ (Universal synchronous asynchronous receiver  transmitter) 
    .equ USART1_SR, USART1_BASE + 0x0 @ (Status register) 
        .equ USART1_SR_CTS, 1 << 9   @ bitWidth 1 (CTS flag)  
        .equ USART1_SR_LBD, 1 << 8   @ bitWidth 1 (LIN break detection flag)  
        .equ USART1_SR_TXE, 1 << 7   @ bitWidth 1 (Transmit data register  empty)  
        .equ USART1_SR_TC, 1 << 6   @ bitWidth 1 (Transmission complete)  
        .equ USART1_SR_RXNE, 1 << 5   @ bitWidth 1 (Read data register not  empty)  
        .equ USART1_SR_IDLE, 1 << 4   @ bitWidth 1 (IDLE line detected)  
        .equ USART1_SR_ORE, 1 << 3   @ bitWidth 1 (Overrun error)  
        .equ USART1_SR_NF, 1 << 2   @ bitWidth 1 (Noise detected flag)  
        .equ USART1_SR_FE, 1 << 1   @ bitWidth 1 (Framing error)  
        .equ USART1_SR_PE, 1 << 0   @ bitWidth 1 (Parity error)  
 
    .equ USART1_DR, USART1_BASE + 0x4 @ (Data register) 
        .equ USART1_DR_DR_Shift, 0   @ bitWidth 9 (Data value)  
 
    .equ USART1_BRR, USART1_BASE + 0x8 @ (Baud rate register) 
        .equ USART1_BRR_DIV_Mantissa_Shift, 4   @ bitWidth 12 (mantissa of USARTDIV)  
        .equ USART1_BRR_DIV_Fraction_Shift, 0   @ bitWidth 4 (fraction of USARTDIV)  
 
    .equ USART1_CR1, USART1_BASE + 0xC @ (Control register 1) 
        .equ USART1_CR1_OVER8, 1 << 15   @ bitWidth 1 (Oversampling mode)  
        .equ USART1_CR1_UE, 1 << 13   @ bitWidth 1 (USART enable)  
        .equ USART1_CR1_M, 1 << 12   @ bitWidth 1 (Word length)  
        .equ USART1_CR1_WAKE, 1 << 11   @ bitWidth 1 (Wakeup method)  
        .equ USART1_CR1_PCE, 1 << 10   @ bitWidth 1 (Parity control enable)  
        .equ USART1_CR1_PS, 1 << 9   @ bitWidth 1 (Parity selection)  
        .equ USART1_CR1_PEIE, 1 << 8   @ bitWidth 1 (PE interrupt enable)  
        .equ USART1_CR1_TXEIE, 1 << 7   @ bitWidth 1 (TXE interrupt enable)  
        .equ USART1_CR1_TCIE, 1 << 6   @ bitWidth 1 (Transmission complete interrupt  enable)  
        .equ USART1_CR1_RXNEIE, 1 << 5   @ bitWidth 1 (RXNE interrupt enable)  
        .equ USART1_CR1_IDLEIE, 1 << 4   @ bitWidth 1 (IDLE interrupt enable)  
        .equ USART1_CR1_TE, 1 << 3   @ bitWidth 1 (Transmitter enable)  
        .equ USART1_CR1_RE, 1 << 2   @ bitWidth 1 (Receiver enable)  
        .equ USART1_CR1_RWU, 1 << 1   @ bitWidth 1 (Receiver wakeup)  
        .equ USART1_CR1_SBK, 1 << 0   @ bitWidth 1 (Send break)  
 
    .equ USART1_CR2, USART1_BASE + 0x10 @ (Control register 2) 
        .equ USART1_CR2_LINEN, 1 << 14   @ bitWidth 1 (LIN mode enable)  
        .equ USART1_CR2_STOP_Shift, 12   @ bitWidth 2 (STOP bits)  
        .equ USART1_CR2_CLKEN, 1 << 11   @ bitWidth 1 (Clock enable)  
        .equ USART1_CR2_CPOL, 1 << 10   @ bitWidth 1 (Clock polarity)  
        .equ USART1_CR2_CPHA, 1 << 9   @ bitWidth 1 (Clock phase)  
        .equ USART1_CR2_LBCL, 1 << 8   @ bitWidth 1 (Last bit clock pulse)  
        .equ USART1_CR2_LBDIE, 1 << 6   @ bitWidth 1 (LIN break detection interrupt  enable)  
        .equ USART1_CR2_LBDL, 1 << 5   @ bitWidth 1 (lin break detection length)  
        .equ USART1_CR2_ADD_Shift, 0   @ bitWidth 4 (Address of the USART node)  
 
    .equ USART1_CR3, USART1_BASE + 0x14 @ (Control register 3) 
        .equ USART1_CR3_ONEBIT, 1 << 11   @ bitWidth 1 (One sample bit method  enable)  
        .equ USART1_CR3_CTSIE, 1 << 10   @ bitWidth 1 (CTS interrupt enable)  
        .equ USART1_CR3_CTSE, 1 << 9   @ bitWidth 1 (CTS enable)  
        .equ USART1_CR3_RTSE, 1 << 8   @ bitWidth 1 (RTS enable)  
        .equ USART1_CR3_DMAT, 1 << 7   @ bitWidth 1 (DMA enable transmitter)  
        .equ USART1_CR3_DMAR, 1 << 6   @ bitWidth 1 (DMA enable receiver)  
        .equ USART1_CR3_SCEN, 1 << 5   @ bitWidth 1 (Smartcard mode enable)  
        .equ USART1_CR3_NACK, 1 << 4   @ bitWidth 1 (Smartcard NACK enable)  
        .equ USART1_CR3_HDSEL, 1 << 3   @ bitWidth 1 (Half-duplex selection)  
        .equ USART1_CR3_IRLP, 1 << 2   @ bitWidth 1 (IrDA low-power)  
        .equ USART1_CR3_IREN, 1 << 1   @ bitWidth 1 (IrDA mode enable)  
        .equ USART1_CR3_EIE, 1 << 0   @ bitWidth 1 (Error interrupt enable)  
 
    .equ USART1_GTPR, USART1_BASE + 0x18 @ (Guard time and prescaler  register) 
        .equ USART1_GTPR_GT_Shift, 8   @ bitWidth 8 (Guard time value)  
        .equ USART1_GTPR_PSC_Shift, 0   @ bitWidth 8 (Prescaler value)  
 

@=========================== USART2 ===========================@
.equ USART2_BASE, 0x40004400 @ (Universal synchronous asynchronous receiver  transmitter) 
    .equ USART2_SR, USART2_BASE + 0x0 @ (Status register) 
        .equ USART2_SR_CTS, 1 << 9   @ bitWidth 1 (CTS flag)  
        .equ USART2_SR_LBD, 1 << 8   @ bitWidth 1 (LIN break detection flag)  
        .equ USART2_SR_TXE, 1 << 7   @ bitWidth 1 (Transmit data register  empty)  
        .equ USART2_SR_TC, 1 << 6   @ bitWidth 1 (Transmission complete)  
        .equ USART2_SR_RXNE, 1 << 5   @ bitWidth 1 (Read data register not  empty)  
        .equ USART2_SR_IDLE, 1 << 4   @ bitWidth 1 (IDLE line detected)  
        .equ USART2_SR_ORE, 1 << 3   @ bitWidth 1 (Overrun error)  
        .equ USART2_SR_NF, 1 << 2   @ bitWidth 1 (Noise detected flag)  
        .equ USART2_SR_FE, 1 << 1   @ bitWidth 1 (Framing error)  
        .equ USART2_SR_PE, 1 << 0   @ bitWidth 1 (Parity error)  
 
    .equ USART2_DR, USART2_BASE + 0x4 @ (Data register) 
        .equ USART2_DR_DR_Shift, 0   @ bitWidth 9 (Data value)  
 
    .equ USART2_BRR, USART2_BASE + 0x8 @ (Baud rate register) 
        .equ USART2_BRR_DIV_Mantissa_Shift, 4   @ bitWidth 12 (mantissa of USARTDIV)  
        .equ USART2_BRR_DIV_Fraction_Shift, 0   @ bitWidth 4 (fraction of USARTDIV)  
 
    .equ USART2_CR1, USART2_BASE + 0xC @ (Control register 1) 
        .equ USART2_CR1_OVER8, 1 << 15   @ bitWidth 1 (Oversampling mode)  
        .equ USART2_CR1_UE, 1 << 13   @ bitWidth 1 (USART enable)  
        .equ USART2_CR1_M, 1 << 12   @ bitWidth 1 (Word length)  
        .equ USART2_CR1_WAKE, 1 << 11   @ bitWidth 1 (Wakeup method)  
        .equ USART2_CR1_PCE, 1 << 10   @ bitWidth 1 (Parity control enable)  
        .equ USART2_CR1_PS, 1 << 9   @ bitWidth 1 (Parity selection)  
        .equ USART2_CR1_PEIE, 1 << 8   @ bitWidth 1 (PE interrupt enable)  
        .equ USART2_CR1_TXEIE, 1 << 7   @ bitWidth 1 (TXE interrupt enable)  
        .equ USART2_CR1_TCIE, 1 << 6   @ bitWidth 1 (Transmission complete interrupt  enable)  
        .equ USART2_CR1_RXNEIE, 1 << 5   @ bitWidth 1 (RXNE interrupt enable)  
        .equ USART2_CR1_IDLEIE, 1 << 4   @ bitWidth 1 (IDLE interrupt enable)  
        .equ USART2_CR1_TE, 1 << 3   @ bitWidth 1 (Transmitter enable)  
        .equ USART2_CR1_RE, 1 << 2   @ bitWidth 1 (Receiver enable)  
        .equ USART2_CR1_RWU, 1 << 1   @ bitWidth 1 (Receiver wakeup)  
        .equ USART2_CR1_SBK, 1 << 0   @ bitWidth 1 (Send break)  
 
    .equ USART2_CR2, USART2_BASE + 0x10 @ (Control register 2) 
        .equ USART2_CR2_LINEN, 1 << 14   @ bitWidth 1 (LIN mode enable)  
        .equ USART2_CR2_STOP_Shift, 12   @ bitWidth 2 (STOP bits)  
        .equ USART2_CR2_CLKEN, 1 << 11   @ bitWidth 1 (Clock enable)  
        .equ USART2_CR2_CPOL, 1 << 10   @ bitWidth 1 (Clock polarity)  
        .equ USART2_CR2_CPHA, 1 << 9   @ bitWidth 1 (Clock phase)  
        .equ USART2_CR2_LBCL, 1 << 8   @ bitWidth 1 (Last bit clock pulse)  
        .equ USART2_CR2_LBDIE, 1 << 6   @ bitWidth 1 (LIN break detection interrupt  enable)  
        .equ USART2_CR2_LBDL, 1 << 5   @ bitWidth 1 (lin break detection length)  
        .equ USART2_CR2_ADD_Shift, 0   @ bitWidth 4 (Address of the USART node)  
 
    .equ USART2_CR3, USART2_BASE + 0x14 @ (Control register 3) 
        .equ USART2_CR3_ONEBIT, 1 << 11   @ bitWidth 1 (One sample bit method  enable)  
        .equ USART2_CR3_CTSIE, 1 << 10   @ bitWidth 1 (CTS interrupt enable)  
        .equ USART2_CR3_CTSE, 1 << 9   @ bitWidth 1 (CTS enable)  
        .equ USART2_CR3_RTSE, 1 << 8   @ bitWidth 1 (RTS enable)  
        .equ USART2_CR3_DMAT, 1 << 7   @ bitWidth 1 (DMA enable transmitter)  
        .equ USART2_CR3_DMAR, 1 << 6   @ bitWidth 1 (DMA enable receiver)  
        .equ USART2_CR3_SCEN, 1 << 5   @ bitWidth 1 (Smartcard mode enable)  
        .equ USART2_CR3_NACK, 1 << 4   @ bitWidth 1 (Smartcard NACK enable)  
        .equ USART2_CR3_HDSEL, 1 << 3   @ bitWidth 1 (Half-duplex selection)  
        .equ USART2_CR3_IRLP, 1 << 2   @ bitWidth 1 (IrDA low-power)  
        .equ USART2_CR3_IREN, 1 << 1   @ bitWidth 1 (IrDA mode enable)  
        .equ USART2_CR3_EIE, 1 << 0   @ bitWidth 1 (Error interrupt enable)  
 
    .equ USART2_GTPR, USART2_BASE + 0x18 @ (Guard time and prescaler  register) 
        .equ USART2_GTPR_GT_Shift, 8   @ bitWidth 8 (Guard time value)  
        .equ USART2_GTPR_PSC_Shift, 0   @ bitWidth 8 (Prescaler value)  
 

@=========================== USART3 ===========================@
.equ USART3_BASE, 0x40004800 @ (Universal synchronous asynchronous receiver  transmitter) 
    .equ USART3_SR, USART3_BASE + 0x0 @ (Status register) 
        .equ USART3_SR_CTS, 1 << 9   @ bitWidth 1 (CTS flag)  
        .equ USART3_SR_LBD, 1 << 8   @ bitWidth 1 (LIN break detection flag)  
        .equ USART3_SR_TXE, 1 << 7   @ bitWidth 1 (Transmit data register  empty)  
        .equ USART3_SR_TC, 1 << 6   @ bitWidth 1 (Transmission complete)  
        .equ USART3_SR_RXNE, 1 << 5   @ bitWidth 1 (Read data register not  empty)  
        .equ USART3_SR_IDLE, 1 << 4   @ bitWidth 1 (IDLE line detected)  
        .equ USART3_SR_ORE, 1 << 3   @ bitWidth 1 (Overrun error)  
        .equ USART3_SR_NF, 1 << 2   @ bitWidth 1 (Noise detected flag)  
        .equ USART3_SR_FE, 1 << 1   @ bitWidth 1 (Framing error)  
        .equ USART3_SR_PE, 1 << 0   @ bitWidth 1 (Parity error)  
 
    .equ USART3_DR, USART3_BASE + 0x4 @ (Data register) 
        .equ USART3_DR_DR_Shift, 0   @ bitWidth 9 (Data value)  
 
    .equ USART3_BRR, USART3_BASE + 0x8 @ (Baud rate register) 
        .equ USART3_BRR_DIV_Mantissa_Shift, 4   @ bitWidth 12 (mantissa of USARTDIV)  
        .equ USART3_BRR_DIV_Fraction_Shift, 0   @ bitWidth 4 (fraction of USARTDIV)  
 
    .equ USART3_CR1, USART3_BASE + 0xC @ (Control register 1) 
        .equ USART3_CR1_OVER8, 1 << 15   @ bitWidth 1 (Oversampling mode)  
        .equ USART3_CR1_UE, 1 << 13   @ bitWidth 1 (USART enable)  
        .equ USART3_CR1_M, 1 << 12   @ bitWidth 1 (Word length)  
        .equ USART3_CR1_WAKE, 1 << 11   @ bitWidth 1 (Wakeup method)  
        .equ USART3_CR1_PCE, 1 << 10   @ bitWidth 1 (Parity control enable)  
        .equ USART3_CR1_PS, 1 << 9   @ bitWidth 1 (Parity selection)  
        .equ USART3_CR1_PEIE, 1 << 8   @ bitWidth 1 (PE interrupt enable)  
        .equ USART3_CR1_TXEIE, 1 << 7   @ bitWidth 1 (TXE interrupt enable)  
        .equ USART3_CR1_TCIE, 1 << 6   @ bitWidth 1 (Transmission complete interrupt  enable)  
        .equ USART3_CR1_RXNEIE, 1 << 5   @ bitWidth 1 (RXNE interrupt enable)  
        .equ USART3_CR1_IDLEIE, 1 << 4   @ bitWidth 1 (IDLE interrupt enable)  
        .equ USART3_CR1_TE, 1 << 3   @ bitWidth 1 (Transmitter enable)  
        .equ USART3_CR1_RE, 1 << 2   @ bitWidth 1 (Receiver enable)  
        .equ USART3_CR1_RWU, 1 << 1   @ bitWidth 1 (Receiver wakeup)  
        .equ USART3_CR1_SBK, 1 << 0   @ bitWidth 1 (Send break)  
 
    .equ USART3_CR2, USART3_BASE + 0x10 @ (Control register 2) 
        .equ USART3_CR2_LINEN, 1 << 14   @ bitWidth 1 (LIN mode enable)  
        .equ USART3_CR2_STOP_Shift, 12   @ bitWidth 2 (STOP bits)  
        .equ USART3_CR2_CLKEN, 1 << 11   @ bitWidth 1 (Clock enable)  
        .equ USART3_CR2_CPOL, 1 << 10   @ bitWidth 1 (Clock polarity)  
        .equ USART3_CR2_CPHA, 1 << 9   @ bitWidth 1 (Clock phase)  
        .equ USART3_CR2_LBCL, 1 << 8   @ bitWidth 1 (Last bit clock pulse)  
        .equ USART3_CR2_LBDIE, 1 << 6   @ bitWidth 1 (LIN break detection interrupt  enable)  
        .equ USART3_CR2_LBDL, 1 << 5   @ bitWidth 1 (lin break detection length)  
        .equ USART3_CR2_ADD_Shift, 0   @ bitWidth 4 (Address of the USART node)  
 
    .equ USART3_CR3, USART3_BASE + 0x14 @ (Control register 3) 
        .equ USART3_CR3_ONEBIT, 1 << 11   @ bitWidth 1 (One sample bit method  enable)  
        .equ USART3_CR3_CTSIE, 1 << 10   @ bitWidth 1 (CTS interrupt enable)  
        .equ USART3_CR3_CTSE, 1 << 9   @ bitWidth 1 (CTS enable)  
        .equ USART3_CR3_RTSE, 1 << 8   @ bitWidth 1 (RTS enable)  
        .equ USART3_CR3_DMAT, 1 << 7   @ bitWidth 1 (DMA enable transmitter)  
        .equ USART3_CR3_DMAR, 1 << 6   @ bitWidth 1 (DMA enable receiver)  
        .equ USART3_CR3_SCEN, 1 << 5   @ bitWidth 1 (Smartcard mode enable)  
        .equ USART3_CR3_NACK, 1 << 4   @ bitWidth 1 (Smartcard NACK enable)  
        .equ USART3_CR3_HDSEL, 1 << 3   @ bitWidth 1 (Half-duplex selection)  
        .equ USART3_CR3_IRLP, 1 << 2   @ bitWidth 1 (IrDA low-power)  
        .equ USART3_CR3_IREN, 1 << 1   @ bitWidth 1 (IrDA mode enable)  
        .equ USART3_CR3_EIE, 1 << 0   @ bitWidth 1 (Error interrupt enable)  
 
    .equ USART3_GTPR, USART3_BASE + 0x18 @ (Guard time and prescaler  register) 
        .equ USART3_GTPR_GT_Shift, 8   @ bitWidth 8 (Guard time value)  
        .equ USART3_GTPR_PSC_Shift, 0   @ bitWidth 8 (Prescaler value)  
 

@=========================== DAC ===========================@
.equ DAC_BASE, 0x40007400 @ (Digital-to-analog converter) 
    .equ DAC_CR, DAC_BASE + 0x0 @ (control register) 
        .equ DAC_CR_DMAUDRIE2, 1 << 29   @ bitWidth 1 (DAC channel2 DMA underrun interrupt  enable)  
        .equ DAC_CR_DMAEN2, 1 << 28   @ bitWidth 1 (DAC channel2 DMA enable)  
        .equ DAC_CR_MAMP2_Shift, 24   @ bitWidth 4 (DAC channel2 mask/amplitude  selector)  
        .equ DAC_CR_WAVE2_Shift, 22   @ bitWidth 2 (DAC channel2 noise/triangle wave  generation enable)  
        .equ DAC_CR_TSEL2_Shift, 19   @ bitWidth 3 (DAC channel2 trigger  selection)  
        .equ DAC_CR_TEN2, 1 << 18   @ bitWidth 1 (DAC channel2 trigger  enable)  
        .equ DAC_CR_BOFF2, 1 << 17   @ bitWidth 1 (DAC channel2 output buffer  disable)  
        .equ DAC_CR_EN2, 1 << 16   @ bitWidth 1 (DAC channel2 enable)  
        .equ DAC_CR_DMAUDRIE1, 1 << 13   @ bitWidth 1 (DAC channel1 DMA Underrun Interrupt  enable)  
        .equ DAC_CR_DMAEN1, 1 << 12   @ bitWidth 1 (DAC channel1 DMA enable)  
        .equ DAC_CR_MAMP1_Shift, 8   @ bitWidth 4 (DAC channel1 mask/amplitude  selector)  
        .equ DAC_CR_WAVE1_Shift, 6   @ bitWidth 2 (DAC channel1 noise/triangle wave  generation enable)  
        .equ DAC_CR_TSEL1_Shift, 3   @ bitWidth 3 (DAC channel1 trigger  selection)  
        .equ DAC_CR_TEN1, 1 << 2   @ bitWidth 1 (DAC channel1 trigger  enable)  
        .equ DAC_CR_BOFF1, 1 << 1   @ bitWidth 1 (DAC channel1 output buffer  disable)  
        .equ DAC_CR_EN1, 1 << 0   @ bitWidth 1 (DAC channel1 enable)  
 
    .equ DAC_SWTRIGR, DAC_BASE + 0x4 @ (software trigger register) 
        .equ DAC_SWTRIGR_SWTRIG2, 1 << 1   @ bitWidth 1 (DAC channel2 software  trigger)  
        .equ DAC_SWTRIGR_SWTRIG1, 1 << 0   @ bitWidth 1 (DAC channel1 software  trigger)  
 
    .equ DAC_DHR12R1, DAC_BASE + 0x8 @ (channel1 12-bit right-aligned data holding  register) 
        .equ DAC_DHR12R1_DACC1DHR_Shift, 0   @ bitWidth 12 (DAC channel1 12-bit right-aligned  data)  
 
    .equ DAC_DHR12L1, DAC_BASE + 0xC @ (channel1 12-bit left aligned data holding  register) 
        .equ DAC_DHR12L1_DACC1DHR_Shift, 4   @ bitWidth 12 (DAC channel1 12-bit left-aligned  data)  
 
    .equ DAC_DHR8R1, DAC_BASE + 0x10 @ (channel1 8-bit right aligned data holding  register) 
        .equ DAC_DHR8R1_DACC1DHR_Shift, 0   @ bitWidth 8 (DAC channel1 8-bit right-aligned  data)  
 
    .equ DAC_DHR12R2, DAC_BASE + 0x14 @ (channel2 12-bit right aligned data holding  register) 
        .equ DAC_DHR12R2_DACC2DHR_Shift, 0   @ bitWidth 12 (DAC channel2 12-bit right-aligned  data)  
 
    .equ DAC_DHR12L2, DAC_BASE + 0x18 @ (channel2 12-bit left aligned data holding  register) 
        .equ DAC_DHR12L2_DACC2DHR_Shift, 4   @ bitWidth 12 (DAC channel2 12-bit left-aligned  data)  
 
    .equ DAC_DHR8R2, DAC_BASE + 0x1C @ (channel2 8-bit right-aligned data holding  register) 
        .equ DAC_DHR8R2_DACC2DHR_Shift, 0   @ bitWidth 8 (DAC channel2 8-bit right-aligned  data)  
 
    .equ DAC_DHR12RD, DAC_BASE + 0x20 @ (Dual DAC 12-bit right-aligned data holding  register) 
        .equ DAC_DHR12RD_DACC2DHR_Shift, 16   @ bitWidth 12 (DAC channel2 12-bit right-aligned  data)  
        .equ DAC_DHR12RD_DACC1DHR_Shift, 0   @ bitWidth 12 (DAC channel1 12-bit right-aligned  data)  
 
    .equ DAC_DHR12LD, DAC_BASE + 0x24 @ (DUAL DAC 12-bit left aligned data holding  register) 
        .equ DAC_DHR12LD_DACC2DHR_Shift, 20   @ bitWidth 12 (DAC channel2 12-bit left-aligned  data)  
        .equ DAC_DHR12LD_DACC1DHR_Shift, 4   @ bitWidth 12 (DAC channel1 12-bit left-aligned  data)  
 
    .equ DAC_DHR8RD, DAC_BASE + 0x28 @ (DUAL DAC 8-bit right aligned data holding  register) 
        .equ DAC_DHR8RD_DACC2DHR_Shift, 8   @ bitWidth 8 (DAC channel2 8-bit right-aligned  data)  
        .equ DAC_DHR8RD_DACC1DHR_Shift, 0   @ bitWidth 8 (DAC channel1 8-bit right-aligned  data)  
 
    .equ DAC_DOR1, DAC_BASE + 0x2C @ (channel1 data output register) 
        .equ DAC_DOR1_DACC1DOR_Shift, 0   @ bitWidth 12 (DAC channel1 data output)  
 
    .equ DAC_DOR2, DAC_BASE + 0x30 @ (channel2 data output register) 
        .equ DAC_DOR2_DACC2DOR_Shift, 0   @ bitWidth 12 (DAC channel2 data output)  
 
    .equ DAC_SR, DAC_BASE + 0x34 @ (status register) 
        .equ DAC_SR_DMAUDR2, 1 << 29   @ bitWidth 1 (DAC channel2 DMA underrun  flag)  
        .equ DAC_SR_DMAUDR1, 1 << 13   @ bitWidth 1 (DAC channel1 DMA underrun  flag)  
 

@=========================== PWR ===========================@
.equ PWR_BASE, 0x40007000 @ (Power control) 
    .equ PWR_CR, PWR_BASE + 0x0 @ (power control register) 
        .equ PWR_CR_FPDS, 1 << 9   @ bitWidth 1 (Flash power down in Stop  mode)  
        .equ PWR_CR_DBP, 1 << 8   @ bitWidth 1 (Disable backup domain write  protection)  
        .equ PWR_CR_PLS_Shift, 5   @ bitWidth 3 (PVD level selection)  
        .equ PWR_CR_PVDE, 1 << 4   @ bitWidth 1 (Power voltage detector  enable)  
        .equ PWR_CR_CSBF, 1 << 3   @ bitWidth 1 (Clear standby flag)  
        .equ PWR_CR_CWUF, 1 << 2   @ bitWidth 1 (Clear wakeup flag)  
        .equ PWR_CR_PDDS, 1 << 1   @ bitWidth 1 (Power down deepsleep)  
        .equ PWR_CR_LPDS, 1 << 0   @ bitWidth 1 (Low-power deep sleep)  
 
    .equ PWR_CSR, PWR_BASE + 0x4 @ (power control/status register) 
        .equ PWR_CSR_WUF, 1 << 0   @ bitWidth 1 (Wakeup flag)  
        .equ PWR_CSR_SBF, 1 << 1   @ bitWidth 1 (Standby flag)  
        .equ PWR_CSR_PVDO, 1 << 2   @ bitWidth 1 (PVD output)  
        .equ PWR_CSR_BRR, 1 << 3   @ bitWidth 1 (Backup regulator ready)  
        .equ PWR_CSR_EWUP, 1 << 8   @ bitWidth 1 (Enable WKUP pin)  
        .equ PWR_CSR_BRE, 1 << 9   @ bitWidth 1 (Backup regulator enable)  
        .equ PWR_CSR_VOSRDY, 1 << 14   @ bitWidth 1 (Regulator voltage scaling output  selection ready bit)  
 

@=========================== I2C3 ===========================@
.equ I2C3_BASE, 0x40005C00 @ (Inter-integrated circuit) 
    .equ I2C3_CR1, I2C3_BASE + 0x0 @ (Control register 1) 
        .equ I2C3_CR1_SWRST, 1 << 15   @ bitWidth 1 (Software reset)  
        .equ I2C3_CR1_ALERT, 1 << 13   @ bitWidth 1 (SMBus alert)  
        .equ I2C3_CR1_PEC, 1 << 12   @ bitWidth 1 (Packet error checking)  
        .equ I2C3_CR1_POS, 1 << 11   @ bitWidth 1 (Acknowledge/PEC Position for data  reception)  
        .equ I2C3_CR1_ACK, 1 << 10   @ bitWidth 1 (Acknowledge enable)  
        .equ I2C3_CR1_STOP, 1 << 9   @ bitWidth 1 (Stop generation)  
        .equ I2C3_CR1_START, 1 << 8   @ bitWidth 1 (Start generation)  
        .equ I2C3_CR1_NOSTRETCH, 1 << 7   @ bitWidth 1 (Clock stretching disable Slave  mode)  
        .equ I2C3_CR1_ENGC, 1 << 6   @ bitWidth 1 (General call enable)  
        .equ I2C3_CR1_ENPEC, 1 << 5   @ bitWidth 1 (PEC enable)  
        .equ I2C3_CR1_ENARP, 1 << 4   @ bitWidth 1 (ARP enable)  
        .equ I2C3_CR1_SMBTYPE, 1 << 3   @ bitWidth 1 (SMBus type)  
        .equ I2C3_CR1_SMBUS, 1 << 1   @ bitWidth 1 (SMBus mode)  
        .equ I2C3_CR1_PE, 1 << 0   @ bitWidth 1 (Peripheral enable)  
 
    .equ I2C3_CR2, I2C3_BASE + 0x4 @ (Control register 2) 
        .equ I2C3_CR2_LAST, 1 << 12   @ bitWidth 1 (DMA last transfer)  
        .equ I2C3_CR2_DMAEN, 1 << 11   @ bitWidth 1 (DMA requests enable)  
        .equ I2C3_CR2_ITBUFEN, 1 << 10   @ bitWidth 1 (Buffer interrupt enable)  
        .equ I2C3_CR2_ITEVTEN, 1 << 9   @ bitWidth 1 (Event interrupt enable)  
        .equ I2C3_CR2_ITERREN, 1 << 8   @ bitWidth 1 (Error interrupt enable)  
        .equ I2C3_CR2_FREQ_Shift, 0   @ bitWidth 6 (Peripheral clock frequency)  
 
    .equ I2C3_OAR1, I2C3_BASE + 0x8 @ (Own address register 1) 
        .equ I2C3_OAR1_ADDMODE, 1 << 15   @ bitWidth 1 (Addressing mode slave  mode)  
        .equ I2C3_OAR1_ADD10_Shift, 8   @ bitWidth 2 (Interface address)  
        .equ I2C3_OAR1_ADD7_Shift, 1   @ bitWidth 7 (Interface address)  
        .equ I2C3_OAR1_ADD0, 1 << 0   @ bitWidth 1 (Interface address)  
 
    .equ I2C3_OAR2, I2C3_BASE + 0xC @ (Own address register 2) 
        .equ I2C3_OAR2_ADD2_Shift, 1   @ bitWidth 7 (Interface address)  
        .equ I2C3_OAR2_ENDUAL, 1 << 0   @ bitWidth 1 (Dual addressing mode  enable)  
 
    .equ I2C3_DR, I2C3_BASE + 0x10 @ (Data register) 
        .equ I2C3_DR_DR_Shift, 0   @ bitWidth 8 (8-bit data register)  
 
    .equ I2C3_SR1, I2C3_BASE + 0x14 @ (Status register 1) 
        .equ I2C3_SR1_SMBALERT, 1 << 15   @ bitWidth 1 (SMBus alert)  
        .equ I2C3_SR1_TIMEOUT, 1 << 14   @ bitWidth 1 (Timeout or Tlow error)  
        .equ I2C3_SR1_PECERR, 1 << 12   @ bitWidth 1 (PEC Error in reception)  
        .equ I2C3_SR1_OVR, 1 << 11   @ bitWidth 1 (Overrun/Underrun)  
        .equ I2C3_SR1_AF, 1 << 10   @ bitWidth 1 (Acknowledge failure)  
        .equ I2C3_SR1_ARLO, 1 << 9   @ bitWidth 1 (Arbitration lost master  mode)  
        .equ I2C3_SR1_BERR, 1 << 8   @ bitWidth 1 (Bus error)  
        .equ I2C3_SR1_TxE, 1 << 7   @ bitWidth 1 (Data register empty  transmitters)  
        .equ I2C3_SR1_RxNE, 1 << 6   @ bitWidth 1 (Data register not empty  receivers)  
        .equ I2C3_SR1_STOPF, 1 << 4   @ bitWidth 1 (Stop detection slave  mode)  
        .equ I2C3_SR1_ADD10, 1 << 3   @ bitWidth 1 (10-bit header sent Master  mode)  
        .equ I2C3_SR1_BTF, 1 << 2   @ bitWidth 1 (Byte transfer finished)  
        .equ I2C3_SR1_ADDR, 1 << 1   @ bitWidth 1 (Address sent master mode/matched  slave mode)  
        .equ I2C3_SR1_SB, 1 << 0   @ bitWidth 1 (Start bit Master mode)  
 
    .equ I2C3_SR2, I2C3_BASE + 0x18 @ (Status register 2) 
        .equ I2C3_SR2_PEC_Shift, 8   @ bitWidth 8 (acket error checking  register)  
        .equ I2C3_SR2_DUALF, 1 << 7   @ bitWidth 1 (Dual flag Slave mode)  
        .equ I2C3_SR2_SMBHOST, 1 << 6   @ bitWidth 1 (SMBus host header Slave  mode)  
        .equ I2C3_SR2_SMBDEFAULT, 1 << 5   @ bitWidth 1 (SMBus device default address Slave  mode)  
        .equ I2C3_SR2_GENCALL, 1 << 4   @ bitWidth 1 (General call address Slave  mode)  
        .equ I2C3_SR2_TRA, 1 << 2   @ bitWidth 1 (Transmitter/receiver)  
        .equ I2C3_SR2_BUSY, 1 << 1   @ bitWidth 1 (Bus busy)  
        .equ I2C3_SR2_MSL, 1 << 0   @ bitWidth 1 (Master/slave)  
 
    .equ I2C3_CCR, I2C3_BASE + 0x1C @ (Clock control register) 
        .equ I2C3_CCR_F_S, 1 << 15   @ bitWidth 1 (I2C master mode selection)  
        .equ I2C3_CCR_DUTY, 1 << 14   @ bitWidth 1 (Fast mode duty cycle)  
        .equ I2C3_CCR_CCR_Shift, 0   @ bitWidth 12 (Clock control register in Fast/Standard  mode Master mode)  
 
    .equ I2C3_TRISE, I2C3_BASE + 0x20 @ (TRISE register) 
        .equ I2C3_TRISE_TRISE_Shift, 0   @ bitWidth 6 (Maximum rise time in Fast/Standard mode  Master mode)  
 

@=========================== I2C2 ===========================@
.equ I2C2_BASE, 0x40005800 @ (Inter-integrated circuit) 
    .equ I2C2_CR1, I2C2_BASE + 0x0 @ (Control register 1) 
        .equ I2C2_CR1_SWRST, 1 << 15   @ bitWidth 1 (Software reset)  
        .equ I2C2_CR1_ALERT, 1 << 13   @ bitWidth 1 (SMBus alert)  
        .equ I2C2_CR1_PEC, 1 << 12   @ bitWidth 1 (Packet error checking)  
        .equ I2C2_CR1_POS, 1 << 11   @ bitWidth 1 (Acknowledge/PEC Position for data  reception)  
        .equ I2C2_CR1_ACK, 1 << 10   @ bitWidth 1 (Acknowledge enable)  
        .equ I2C2_CR1_STOP, 1 << 9   @ bitWidth 1 (Stop generation)  
        .equ I2C2_CR1_START, 1 << 8   @ bitWidth 1 (Start generation)  
        .equ I2C2_CR1_NOSTRETCH, 1 << 7   @ bitWidth 1 (Clock stretching disable Slave  mode)  
        .equ I2C2_CR1_ENGC, 1 << 6   @ bitWidth 1 (General call enable)  
        .equ I2C2_CR1_ENPEC, 1 << 5   @ bitWidth 1 (PEC enable)  
        .equ I2C2_CR1_ENARP, 1 << 4   @ bitWidth 1 (ARP enable)  
        .equ I2C2_CR1_SMBTYPE, 1 << 3   @ bitWidth 1 (SMBus type)  
        .equ I2C2_CR1_SMBUS, 1 << 1   @ bitWidth 1 (SMBus mode)  
        .equ I2C2_CR1_PE, 1 << 0   @ bitWidth 1 (Peripheral enable)  
 
    .equ I2C2_CR2, I2C2_BASE + 0x4 @ (Control register 2) 
        .equ I2C2_CR2_LAST, 1 << 12   @ bitWidth 1 (DMA last transfer)  
        .equ I2C2_CR2_DMAEN, 1 << 11   @ bitWidth 1 (DMA requests enable)  
        .equ I2C2_CR2_ITBUFEN, 1 << 10   @ bitWidth 1 (Buffer interrupt enable)  
        .equ I2C2_CR2_ITEVTEN, 1 << 9   @ bitWidth 1 (Event interrupt enable)  
        .equ I2C2_CR2_ITERREN, 1 << 8   @ bitWidth 1 (Error interrupt enable)  
        .equ I2C2_CR2_FREQ_Shift, 0   @ bitWidth 6 (Peripheral clock frequency)  
 
    .equ I2C2_OAR1, I2C2_BASE + 0x8 @ (Own address register 1) 
        .equ I2C2_OAR1_ADDMODE, 1 << 15   @ bitWidth 1 (Addressing mode slave  mode)  
        .equ I2C2_OAR1_ADD10_Shift, 8   @ bitWidth 2 (Interface address)  
        .equ I2C2_OAR1_ADD7_Shift, 1   @ bitWidth 7 (Interface address)  
        .equ I2C2_OAR1_ADD0, 1 << 0   @ bitWidth 1 (Interface address)  
 
    .equ I2C2_OAR2, I2C2_BASE + 0xC @ (Own address register 2) 
        .equ I2C2_OAR2_ADD2_Shift, 1   @ bitWidth 7 (Interface address)  
        .equ I2C2_OAR2_ENDUAL, 1 << 0   @ bitWidth 1 (Dual addressing mode  enable)  
 
    .equ I2C2_DR, I2C2_BASE + 0x10 @ (Data register) 
        .equ I2C2_DR_DR_Shift, 0   @ bitWidth 8 (8-bit data register)  
 
    .equ I2C2_SR1, I2C2_BASE + 0x14 @ (Status register 1) 
        .equ I2C2_SR1_SMBALERT, 1 << 15   @ bitWidth 1 (SMBus alert)  
        .equ I2C2_SR1_TIMEOUT, 1 << 14   @ bitWidth 1 (Timeout or Tlow error)  
        .equ I2C2_SR1_PECERR, 1 << 12   @ bitWidth 1 (PEC Error in reception)  
        .equ I2C2_SR1_OVR, 1 << 11   @ bitWidth 1 (Overrun/Underrun)  
        .equ I2C2_SR1_AF, 1 << 10   @ bitWidth 1 (Acknowledge failure)  
        .equ I2C2_SR1_ARLO, 1 << 9   @ bitWidth 1 (Arbitration lost master  mode)  
        .equ I2C2_SR1_BERR, 1 << 8   @ bitWidth 1 (Bus error)  
        .equ I2C2_SR1_TxE, 1 << 7   @ bitWidth 1 (Data register empty  transmitters)  
        .equ I2C2_SR1_RxNE, 1 << 6   @ bitWidth 1 (Data register not empty  receivers)  
        .equ I2C2_SR1_STOPF, 1 << 4   @ bitWidth 1 (Stop detection slave  mode)  
        .equ I2C2_SR1_ADD10, 1 << 3   @ bitWidth 1 (10-bit header sent Master  mode)  
        .equ I2C2_SR1_BTF, 1 << 2   @ bitWidth 1 (Byte transfer finished)  
        .equ I2C2_SR1_ADDR, 1 << 1   @ bitWidth 1 (Address sent master mode/matched  slave mode)  
        .equ I2C2_SR1_SB, 1 << 0   @ bitWidth 1 (Start bit Master mode)  
 
    .equ I2C2_SR2, I2C2_BASE + 0x18 @ (Status register 2) 
        .equ I2C2_SR2_PEC_Shift, 8   @ bitWidth 8 (acket error checking  register)  
        .equ I2C2_SR2_DUALF, 1 << 7   @ bitWidth 1 (Dual flag Slave mode)  
        .equ I2C2_SR2_SMBHOST, 1 << 6   @ bitWidth 1 (SMBus host header Slave  mode)  
        .equ I2C2_SR2_SMBDEFAULT, 1 << 5   @ bitWidth 1 (SMBus device default address Slave  mode)  
        .equ I2C2_SR2_GENCALL, 1 << 4   @ bitWidth 1 (General call address Slave  mode)  
        .equ I2C2_SR2_TRA, 1 << 2   @ bitWidth 1 (Transmitter/receiver)  
        .equ I2C2_SR2_BUSY, 1 << 1   @ bitWidth 1 (Bus busy)  
        .equ I2C2_SR2_MSL, 1 << 0   @ bitWidth 1 (Master/slave)  
 
    .equ I2C2_CCR, I2C2_BASE + 0x1C @ (Clock control register) 
        .equ I2C2_CCR_F_S, 1 << 15   @ bitWidth 1 (I2C master mode selection)  
        .equ I2C2_CCR_DUTY, 1 << 14   @ bitWidth 1 (Fast mode duty cycle)  
        .equ I2C2_CCR_CCR_Shift, 0   @ bitWidth 12 (Clock control register in Fast/Standard  mode Master mode)  
 
    .equ I2C2_TRISE, I2C2_BASE + 0x20 @ (TRISE register) 
        .equ I2C2_TRISE_TRISE_Shift, 0   @ bitWidth 6 (Maximum rise time in Fast/Standard mode  Master mode)  
 

@=========================== I2C1 ===========================@
.equ I2C1_BASE, 0x40005400 @ (Inter-integrated circuit) 
    .equ I2C1_CR1, I2C1_BASE + 0x0 @ (Control register 1) 
        .equ I2C1_CR1_SWRST, 1 << 15   @ bitWidth 1 (Software reset)  
        .equ I2C1_CR1_ALERT, 1 << 13   @ bitWidth 1 (SMBus alert)  
        .equ I2C1_CR1_PEC, 1 << 12   @ bitWidth 1 (Packet error checking)  
        .equ I2C1_CR1_POS, 1 << 11   @ bitWidth 1 (Acknowledge/PEC Position for data  reception)  
        .equ I2C1_CR1_ACK, 1 << 10   @ bitWidth 1 (Acknowledge enable)  
        .equ I2C1_CR1_STOP, 1 << 9   @ bitWidth 1 (Stop generation)  
        .equ I2C1_CR1_START, 1 << 8   @ bitWidth 1 (Start generation)  
        .equ I2C1_CR1_NOSTRETCH, 1 << 7   @ bitWidth 1 (Clock stretching disable Slave  mode)  
        .equ I2C1_CR1_ENGC, 1 << 6   @ bitWidth 1 (General call enable)  
        .equ I2C1_CR1_ENPEC, 1 << 5   @ bitWidth 1 (PEC enable)  
        .equ I2C1_CR1_ENARP, 1 << 4   @ bitWidth 1 (ARP enable)  
        .equ I2C1_CR1_SMBTYPE, 1 << 3   @ bitWidth 1 (SMBus type)  
        .equ I2C1_CR1_SMBUS, 1 << 1   @ bitWidth 1 (SMBus mode)  
        .equ I2C1_CR1_PE, 1 << 0   @ bitWidth 1 (Peripheral enable)  
 
    .equ I2C1_CR2, I2C1_BASE + 0x4 @ (Control register 2) 
        .equ I2C1_CR2_LAST, 1 << 12   @ bitWidth 1 (DMA last transfer)  
        .equ I2C1_CR2_DMAEN, 1 << 11   @ bitWidth 1 (DMA requests enable)  
        .equ I2C1_CR2_ITBUFEN, 1 << 10   @ bitWidth 1 (Buffer interrupt enable)  
        .equ I2C1_CR2_ITEVTEN, 1 << 9   @ bitWidth 1 (Event interrupt enable)  
        .equ I2C1_CR2_ITERREN, 1 << 8   @ bitWidth 1 (Error interrupt enable)  
        .equ I2C1_CR2_FREQ_Shift, 0   @ bitWidth 6 (Peripheral clock frequency)  
 
    .equ I2C1_OAR1, I2C1_BASE + 0x8 @ (Own address register 1) 
        .equ I2C1_OAR1_ADDMODE, 1 << 15   @ bitWidth 1 (Addressing mode slave  mode)  
        .equ I2C1_OAR1_ADD10_Shift, 8   @ bitWidth 2 (Interface address)  
        .equ I2C1_OAR1_ADD7_Shift, 1   @ bitWidth 7 (Interface address)  
        .equ I2C1_OAR1_ADD0, 1 << 0   @ bitWidth 1 (Interface address)  
 
    .equ I2C1_OAR2, I2C1_BASE + 0xC @ (Own address register 2) 
        .equ I2C1_OAR2_ADD2_Shift, 1   @ bitWidth 7 (Interface address)  
        .equ I2C1_OAR2_ENDUAL, 1 << 0   @ bitWidth 1 (Dual addressing mode  enable)  
 
    .equ I2C1_DR, I2C1_BASE + 0x10 @ (Data register) 
        .equ I2C1_DR_DR_Shift, 0   @ bitWidth 8 (8-bit data register)  
 
    .equ I2C1_SR1, I2C1_BASE + 0x14 @ (Status register 1) 
        .equ I2C1_SR1_SMBALERT, 1 << 15   @ bitWidth 1 (SMBus alert)  
        .equ I2C1_SR1_TIMEOUT, 1 << 14   @ bitWidth 1 (Timeout or Tlow error)  
        .equ I2C1_SR1_PECERR, 1 << 12   @ bitWidth 1 (PEC Error in reception)  
        .equ I2C1_SR1_OVR, 1 << 11   @ bitWidth 1 (Overrun/Underrun)  
        .equ I2C1_SR1_AF, 1 << 10   @ bitWidth 1 (Acknowledge failure)  
        .equ I2C1_SR1_ARLO, 1 << 9   @ bitWidth 1 (Arbitration lost master  mode)  
        .equ I2C1_SR1_BERR, 1 << 8   @ bitWidth 1 (Bus error)  
        .equ I2C1_SR1_TxE, 1 << 7   @ bitWidth 1 (Data register empty  transmitters)  
        .equ I2C1_SR1_RxNE, 1 << 6   @ bitWidth 1 (Data register not empty  receivers)  
        .equ I2C1_SR1_STOPF, 1 << 4   @ bitWidth 1 (Stop detection slave  mode)  
        .equ I2C1_SR1_ADD10, 1 << 3   @ bitWidth 1 (10-bit header sent Master  mode)  
        .equ I2C1_SR1_BTF, 1 << 2   @ bitWidth 1 (Byte transfer finished)  
        .equ I2C1_SR1_ADDR, 1 << 1   @ bitWidth 1 (Address sent master mode/matched  slave mode)  
        .equ I2C1_SR1_SB, 1 << 0   @ bitWidth 1 (Start bit Master mode)  
 
    .equ I2C1_SR2, I2C1_BASE + 0x18 @ (Status register 2) 
        .equ I2C1_SR2_PEC_Shift, 8   @ bitWidth 8 (acket error checking  register)  
        .equ I2C1_SR2_DUALF, 1 << 7   @ bitWidth 1 (Dual flag Slave mode)  
        .equ I2C1_SR2_SMBHOST, 1 << 6   @ bitWidth 1 (SMBus host header Slave  mode)  
        .equ I2C1_SR2_SMBDEFAULT, 1 << 5   @ bitWidth 1 (SMBus device default address Slave  mode)  
        .equ I2C1_SR2_GENCALL, 1 << 4   @ bitWidth 1 (General call address Slave  mode)  
        .equ I2C1_SR2_TRA, 1 << 2   @ bitWidth 1 (Transmitter/receiver)  
        .equ I2C1_SR2_BUSY, 1 << 1   @ bitWidth 1 (Bus busy)  
        .equ I2C1_SR2_MSL, 1 << 0   @ bitWidth 1 (Master/slave)  
 
    .equ I2C1_CCR, I2C1_BASE + 0x1C @ (Clock control register) 
        .equ I2C1_CCR_F_S, 1 << 15   @ bitWidth 1 (I2C master mode selection)  
        .equ I2C1_CCR_DUTY, 1 << 14   @ bitWidth 1 (Fast mode duty cycle)  
        .equ I2C1_CCR_CCR_Shift, 0   @ bitWidth 12 (Clock control register in Fast/Standard  mode Master mode)  
 
    .equ I2C1_TRISE, I2C1_BASE + 0x20 @ (TRISE register) 
        .equ I2C1_TRISE_TRISE_Shift, 0   @ bitWidth 6 (Maximum rise time in Fast/Standard mode  Master mode)  
 

@=========================== IWDG ===========================@
.equ IWDG_BASE, 0x40003000 @ (Independent watchdog) 
    .equ IWDG_KR, IWDG_BASE + 0x0 @ (Key register) 
        .equ IWDG_KR_KEY_Shift, 0   @ bitWidth 16 (Key value write only, read  0000h)  
 
    .equ IWDG_PR, IWDG_BASE + 0x4 @ (Prescaler register) 
        .equ IWDG_PR_PR_Shift, 0   @ bitWidth 3 (Prescaler divider)  
 
    .equ IWDG_RLR, IWDG_BASE + 0x8 @ (Reload register) 
        .equ IWDG_RLR_RL_Shift, 0   @ bitWidth 12 (Watchdog counter reload  value)  
 
    .equ IWDG_SR, IWDG_BASE + 0xC @ (Status register) 
        .equ IWDG_SR_RVU, 1 << 1   @ bitWidth 1 (Watchdog counter reload value  update)  
        .equ IWDG_SR_PVU, 1 << 0   @ bitWidth 1 (Watchdog prescaler value  update)  
 

@=========================== WWDG ===========================@
.equ WWDG_BASE, 0x40002C00 @ (Window watchdog) 
    .equ WWDG_CR, WWDG_BASE + 0x0 @ (Control register) 
        .equ WWDG_CR_WDGA, 1 << 7   @ bitWidth 1 (Activation bit)  
        .equ WWDG_CR_T_Shift, 0   @ bitWidth 7 (7-bit counter MSB to LSB)  
 
    .equ WWDG_CFR, WWDG_BASE + 0x4 @ (Configuration register) 
        .equ WWDG_CFR_EWI, 1 << 9   @ bitWidth 1 (Early wakeup interrupt)  
        .equ WWDG_CFR_WDGTB1, 1 << 8   @ bitWidth 1 (Timer base)  
        .equ WWDG_CFR_WDGTB0, 1 << 7   @ bitWidth 1 (Timer base)  
        .equ WWDG_CFR_W_Shift, 0   @ bitWidth 7 (7-bit window value)  
 
    .equ WWDG_SR, WWDG_BASE + 0x8 @ (Status register) 
        .equ WWDG_SR_EWIF, 1 << 0   @ bitWidth 1 (Early wakeup interrupt  flag)  
 

@=========================== RTC ===========================@
.equ RTC_BASE, 0x40002800 @ (Real-time clock) 
    .equ RTC_TR, RTC_BASE + 0x0 @ (time register) 
        .equ RTC_TR_PM, 1 << 22   @ bitWidth 1 (AM/PM notation)  
        .equ RTC_TR_HT_Shift, 20   @ bitWidth 2 (Hour tens in BCD format)  
        .equ RTC_TR_HU_Shift, 16   @ bitWidth 4 (Hour units in BCD format)  
        .equ RTC_TR_MNT_Shift, 12   @ bitWidth 3 (Minute tens in BCD format)  
        .equ RTC_TR_MNU_Shift, 8   @ bitWidth 4 (Minute units in BCD format)  
        .equ RTC_TR_ST_Shift, 4   @ bitWidth 3 (Second tens in BCD format)  
        .equ RTC_TR_SU_Shift, 0   @ bitWidth 4 (Second units in BCD format)  
 
    .equ RTC_DR, RTC_BASE + 0x4 @ (date register) 
        .equ RTC_DR_YT_Shift, 20   @ bitWidth 4 (Year tens in BCD format)  
        .equ RTC_DR_YU_Shift, 16   @ bitWidth 4 (Year units in BCD format)  
        .equ RTC_DR_WDU_Shift, 13   @ bitWidth 3 (Week day units)  
        .equ RTC_DR_MT, 1 << 12   @ bitWidth 1 (Month tens in BCD format)  
        .equ RTC_DR_MU_Shift, 8   @ bitWidth 4 (Month units in BCD format)  
        .equ RTC_DR_DT_Shift, 4   @ bitWidth 2 (Date tens in BCD format)  
        .equ RTC_DR_DU_Shift, 0   @ bitWidth 4 (Date units in BCD format)  
 
    .equ RTC_CR, RTC_BASE + 0x8 @ (control register) 
        .equ RTC_CR_COE, 1 << 23   @ bitWidth 1 (Calibration output enable)  
        .equ RTC_CR_OSEL_Shift, 21   @ bitWidth 2 (Output selection)  
        .equ RTC_CR_POL, 1 << 20   @ bitWidth 1 (Output polarity)  
        .equ RTC_CR_BKP, 1 << 18   @ bitWidth 1 (Backup)  
        .equ RTC_CR_SUB1H, 1 << 17   @ bitWidth 1 (Subtract 1 hour winter time  change)  
        .equ RTC_CR_ADD1H, 1 << 16   @ bitWidth 1 (Add 1 hour summer time  change)  
        .equ RTC_CR_TSIE, 1 << 15   @ bitWidth 1 (Time-stamp interrupt  enable)  
        .equ RTC_CR_WUTIE, 1 << 14   @ bitWidth 1 (Wakeup timer interrupt  enable)  
        .equ RTC_CR_ALRBIE, 1 << 13   @ bitWidth 1 (Alarm B interrupt enable)  
        .equ RTC_CR_ALRAIE, 1 << 12   @ bitWidth 1 (Alarm A interrupt enable)  
        .equ RTC_CR_TSE, 1 << 11   @ bitWidth 1 (Time stamp enable)  
        .equ RTC_CR_WUTE, 1 << 10   @ bitWidth 1 (Wakeup timer enable)  
        .equ RTC_CR_ALRBE, 1 << 9   @ bitWidth 1 (Alarm B enable)  
        .equ RTC_CR_ALRAE, 1 << 8   @ bitWidth 1 (Alarm A enable)  
        .equ RTC_CR_DCE, 1 << 7   @ bitWidth 1 (Coarse digital calibration  enable)  
        .equ RTC_CR_FMT, 1 << 6   @ bitWidth 1 (Hour format)  
        .equ RTC_CR_REFCKON, 1 << 4   @ bitWidth 1 (Reference clock detection enable 50 or  60 Hz)  
        .equ RTC_CR_TSEDGE, 1 << 3   @ bitWidth 1 (Time-stamp event active  edge)  
        .equ RTC_CR_WCKSEL_Shift, 0   @ bitWidth 3 (Wakeup clock selection)  
 
    .equ RTC_ISR, RTC_BASE + 0xC @ (initialization and status  register) 
        .equ RTC_ISR_ALRAWF, 1 << 0   @ bitWidth 1 (Alarm A write flag)  
        .equ RTC_ISR_ALRBWF, 1 << 1   @ bitWidth 1 (Alarm B write flag)  
        .equ RTC_ISR_WUTWF, 1 << 2   @ bitWidth 1 (Wakeup timer write flag)  
        .equ RTC_ISR_SHPF, 1 << 3   @ bitWidth 1 (Shift operation pending)  
        .equ RTC_ISR_INITS, 1 << 4   @ bitWidth 1 (Initialization status flag)  
        .equ RTC_ISR_RSF, 1 << 5   @ bitWidth 1 (Registers synchronization  flag)  
        .equ RTC_ISR_INITF, 1 << 6   @ bitWidth 1 (Initialization flag)  
        .equ RTC_ISR_INIT, 1 << 7   @ bitWidth 1 (Initialization mode)  
        .equ RTC_ISR_ALRAF, 1 << 8   @ bitWidth 1 (Alarm A flag)  
        .equ RTC_ISR_ALRBF, 1 << 9   @ bitWidth 1 (Alarm B flag)  
        .equ RTC_ISR_WUTF, 1 << 10   @ bitWidth 1 (Wakeup timer flag)  
        .equ RTC_ISR_TSF, 1 << 11   @ bitWidth 1 (Time-stamp flag)  
        .equ RTC_ISR_TSOVF, 1 << 12   @ bitWidth 1 (Time-stamp overflow flag)  
        .equ RTC_ISR_TAMP1F, 1 << 13   @ bitWidth 1 (Tamper detection flag)  
        .equ RTC_ISR_TAMP2F, 1 << 14   @ bitWidth 1 (TAMPER2 detection flag)  
        .equ RTC_ISR_RECALPF, 1 << 16   @ bitWidth 1 (Recalibration pending Flag)  
 
    .equ RTC_PRER, RTC_BASE + 0x10 @ (prescaler register) 
        .equ RTC_PRER_PREDIV_A_Shift, 16   @ bitWidth 7 (Asynchronous prescaler  factor)  
        .equ RTC_PRER_PREDIV_S_Shift, 0   @ bitWidth 15 (Synchronous prescaler  factor)  
 
    .equ RTC_WUTR, RTC_BASE + 0x14 @ (wakeup timer register) 
        .equ RTC_WUTR_WUT_Shift, 0   @ bitWidth 16 (Wakeup auto-reload value  bits)  
 
    .equ RTC_CALIBR, RTC_BASE + 0x18 @ (calibration register) 
        .equ RTC_CALIBR_DCS, 1 << 7   @ bitWidth 1 (Digital calibration sign)  
        .equ RTC_CALIBR_DC_Shift, 0   @ bitWidth 5 (Digital calibration)  
 
    .equ RTC_ALRMAR, RTC_BASE + 0x1C @ (alarm A register) 
        .equ RTC_ALRMAR_MSK4, 1 << 31   @ bitWidth 1 (Alarm A date mask)  
        .equ RTC_ALRMAR_WDSEL, 1 << 30   @ bitWidth 1 (Week day selection)  
        .equ RTC_ALRMAR_DT_Shift, 28   @ bitWidth 2 (Date tens in BCD format)  
        .equ RTC_ALRMAR_DU_Shift, 24   @ bitWidth 4 (Date units or day in BCD  format)  
        .equ RTC_ALRMAR_MSK3, 1 << 23   @ bitWidth 1 (Alarm A hours mask)  
        .equ RTC_ALRMAR_PM, 1 << 22   @ bitWidth 1 (AM/PM notation)  
        .equ RTC_ALRMAR_HT_Shift, 20   @ bitWidth 2 (Hour tens in BCD format)  
        .equ RTC_ALRMAR_HU_Shift, 16   @ bitWidth 4 (Hour units in BCD format)  
        .equ RTC_ALRMAR_MSK2, 1 << 15   @ bitWidth 1 (Alarm A minutes mask)  
        .equ RTC_ALRMAR_MNT_Shift, 12   @ bitWidth 3 (Minute tens in BCD format)  
        .equ RTC_ALRMAR_MNU_Shift, 8   @ bitWidth 4 (Minute units in BCD format)  
        .equ RTC_ALRMAR_MSK1, 1 << 7   @ bitWidth 1 (Alarm A seconds mask)  
        .equ RTC_ALRMAR_ST_Shift, 4   @ bitWidth 3 (Second tens in BCD format)  
        .equ RTC_ALRMAR_SU_Shift, 0   @ bitWidth 4 (Second units in BCD format)  
 
    .equ RTC_ALRMBR, RTC_BASE + 0x20 @ (alarm B register) 
        .equ RTC_ALRMBR_MSK4, 1 << 31   @ bitWidth 1 (Alarm B date mask)  
        .equ RTC_ALRMBR_WDSEL, 1 << 30   @ bitWidth 1 (Week day selection)  
        .equ RTC_ALRMBR_DT_Shift, 28   @ bitWidth 2 (Date tens in BCD format)  
        .equ RTC_ALRMBR_DU_Shift, 24   @ bitWidth 4 (Date units or day in BCD  format)  
        .equ RTC_ALRMBR_MSK3, 1 << 23   @ bitWidth 1 (Alarm B hours mask)  
        .equ RTC_ALRMBR_PM, 1 << 22   @ bitWidth 1 (AM/PM notation)  
        .equ RTC_ALRMBR_HT_Shift, 20   @ bitWidth 2 (Hour tens in BCD format)  
        .equ RTC_ALRMBR_HU_Shift, 16   @ bitWidth 4 (Hour units in BCD format)  
        .equ RTC_ALRMBR_MSK2, 1 << 15   @ bitWidth 1 (Alarm B minutes mask)  
        .equ RTC_ALRMBR_MNT_Shift, 12   @ bitWidth 3 (Minute tens in BCD format)  
        .equ RTC_ALRMBR_MNU_Shift, 8   @ bitWidth 4 (Minute units in BCD format)  
        .equ RTC_ALRMBR_MSK1, 1 << 7   @ bitWidth 1 (Alarm B seconds mask)  
        .equ RTC_ALRMBR_ST_Shift, 4   @ bitWidth 3 (Second tens in BCD format)  
        .equ RTC_ALRMBR_SU_Shift, 0   @ bitWidth 4 (Second units in BCD format)  
 
    .equ RTC_WPR, RTC_BASE + 0x24 @ (write protection register) 
        .equ RTC_WPR_KEY_Shift, 0   @ bitWidth 8 (Write protection key)  
 
    .equ RTC_SSR, RTC_BASE + 0x28 @ (sub second register) 
        .equ RTC_SSR_SS_Shift, 0   @ bitWidth 16 (Sub second value)  
 
    .equ RTC_SHIFTR, RTC_BASE + 0x2C @ (shift control register) 
        .equ RTC_SHIFTR_ADD1S, 1 << 31   @ bitWidth 1 (Add one second)  
        .equ RTC_SHIFTR_SUBFS_Shift, 0   @ bitWidth 15 (Subtract a fraction of a  second)  
 
    .equ RTC_TSTR, RTC_BASE + 0x30 @ (time stamp time register) 
        .equ RTC_TSTR_ALARMOUTTYPE, 1 << 18   @ bitWidth 1 (AFO_ALARM output type)  
        .equ RTC_TSTR_TSINSEL, 1 << 17   @ bitWidth 1 (TIMESTAMP mapping)  
        .equ RTC_TSTR_TAMP1INSEL, 1 << 16   @ bitWidth 1 (TAMPER1 mapping)  
        .equ RTC_TSTR_TAMPIE, 1 << 2   @ bitWidth 1 (Tamper interrupt enable)  
        .equ RTC_TSTR_TAMP1TRG, 1 << 1   @ bitWidth 1 (Active level for tamper 1)  
        .equ RTC_TSTR_TAMP1E, 1 << 0   @ bitWidth 1 (Tamper 1 detection enable)  
 
    .equ RTC_TSDR, RTC_BASE + 0x34 @ (time stamp date register) 
        .equ RTC_TSDR_WDU_Shift, 13   @ bitWidth 3 (Week day units)  
        .equ RTC_TSDR_MT, 1 << 12   @ bitWidth 1 (Month tens in BCD format)  
        .equ RTC_TSDR_MU_Shift, 8   @ bitWidth 4 (Month units in BCD format)  
        .equ RTC_TSDR_DT_Shift, 4   @ bitWidth 2 (Date tens in BCD format)  
        .equ RTC_TSDR_DU_Shift, 0   @ bitWidth 4 (Date units in BCD format)  
 
    .equ RTC_TSSSR, RTC_BASE + 0x38 @ (timestamp sub second register) 
        .equ RTC_TSSSR_SS_Shift, 0   @ bitWidth 16 (Sub second value)  
 
    .equ RTC_CALR, RTC_BASE + 0x3C @ (calibration register) 
        .equ RTC_CALR_CALP, 1 << 15   @ bitWidth 1 (Increase frequency of RTC by 488.5  ppm)  
        .equ RTC_CALR_CALW8, 1 << 14   @ bitWidth 1 (Use an 8-second calibration cycle  period)  
        .equ RTC_CALR_CALW16, 1 << 13   @ bitWidth 1 (Use a 16-second calibration cycle  period)  
        .equ RTC_CALR_CALM_Shift, 0   @ bitWidth 9 (Calibration minus)  
 
    .equ RTC_TAFCR, RTC_BASE + 0x40 @ (tamper and alternate function configuration  register) 
        .equ RTC_TAFCR_ALARMOUTTYPE, 1 << 18   @ bitWidth 1 (AFO_ALARM output type)  
        .equ RTC_TAFCR_TSINSEL, 1 << 17   @ bitWidth 1 (TIMESTAMP mapping)  
        .equ RTC_TAFCR_TAMP1INSEL, 1 << 16   @ bitWidth 1 (TAMPER1 mapping)  
        .equ RTC_TAFCR_TAMPPUDIS, 1 << 15   @ bitWidth 1 (TAMPER pull-up disable)  
        .equ RTC_TAFCR_TAMPPRCH_Shift, 13   @ bitWidth 2 (Tamper precharge duration)  
        .equ RTC_TAFCR_TAMPFLT_Shift, 11   @ bitWidth 2 (Tamper filter count)  
        .equ RTC_TAFCR_TAMPFREQ_Shift, 8   @ bitWidth 3 (Tamper sampling frequency)  
        .equ RTC_TAFCR_TAMPTS, 1 << 7   @ bitWidth 1 (Activate timestamp on tamper detection  event)  
        .equ RTC_TAFCR_TAMP2TRG, 1 << 4   @ bitWidth 1 (Active level for tamper 2)  
        .equ RTC_TAFCR_TAMP2E, 1 << 3   @ bitWidth 1 (Tamper 2 detection enable)  
        .equ RTC_TAFCR_TAMPIE, 1 << 2   @ bitWidth 1 (Tamper interrupt enable)  
        .equ RTC_TAFCR_TAMP1TRG, 1 << 1   @ bitWidth 1 (Active level for tamper 1)  
        .equ RTC_TAFCR_TAMP1E, 1 << 0   @ bitWidth 1 (Tamper 1 detection enable)  
 
    .equ RTC_ALRMASSR, RTC_BASE + 0x44 @ (alarm A sub second register) 
        .equ RTC_ALRMASSR_MASKSS_Shift, 24   @ bitWidth 4 (Mask the most-significant bits starting  at this bit)  
        .equ RTC_ALRMASSR_SS_Shift, 0   @ bitWidth 15 (Sub seconds value)  
 
    .equ RTC_ALRMBSSR, RTC_BASE + 0x48 @ (alarm B sub second register) 
        .equ RTC_ALRMBSSR_MASKSS_Shift, 24   @ bitWidth 4 (Mask the most-significant bits starting  at this bit)  
        .equ RTC_ALRMBSSR_SS_Shift, 0   @ bitWidth 15 (Sub seconds value)  
 
    .equ RTC_BKP0R, RTC_BASE + 0x50 @ (backup register) 
        .equ RTC_BKP0R_BKP_Shift, 0   @ bitWidth 32 (BKP)  
 
    .equ RTC_BKP1R, RTC_BASE + 0x54 @ (backup register) 
        .equ RTC_BKP1R_BKP_Shift, 0   @ bitWidth 32 (BKP)  
 
    .equ RTC_BKP2R, RTC_BASE + 0x58 @ (backup register) 
        .equ RTC_BKP2R_BKP_Shift, 0   @ bitWidth 32 (BKP)  
 
    .equ RTC_BKP3R, RTC_BASE + 0x5C @ (backup register) 
        .equ RTC_BKP3R_BKP_Shift, 0   @ bitWidth 32 (BKP)  
 
    .equ RTC_BKP4R, RTC_BASE + 0x60 @ (backup register) 
        .equ RTC_BKP4R_BKP_Shift, 0   @ bitWidth 32 (BKP)  
 
    .equ RTC_BKP5R, RTC_BASE + 0x64 @ (backup register) 
        .equ RTC_BKP5R_BKP_Shift, 0   @ bitWidth 32 (BKP)  
 
    .equ RTC_BKP6R, RTC_BASE + 0x68 @ (backup register) 
        .equ RTC_BKP6R_BKP_Shift, 0   @ bitWidth 32 (BKP)  
 
    .equ RTC_BKP7R, RTC_BASE + 0x6C @ (backup register) 
        .equ RTC_BKP7R_BKP_Shift, 0   @ bitWidth 32 (BKP)  
 
    .equ RTC_BKP8R, RTC_BASE + 0x70 @ (backup register) 
        .equ RTC_BKP8R_BKP_Shift, 0   @ bitWidth 32 (BKP)  
 
    .equ RTC_BKP9R, RTC_BASE + 0x74 @ (backup register) 
        .equ RTC_BKP9R_BKP_Shift, 0   @ bitWidth 32 (BKP)  
 
    .equ RTC_BKP10R, RTC_BASE + 0x78 @ (backup register) 
        .equ RTC_BKP10R_BKP_Shift, 0   @ bitWidth 32 (BKP)  
 
    .equ RTC_BKP11R, RTC_BASE + 0x7C @ (backup register) 
        .equ RTC_BKP11R_BKP_Shift, 0   @ bitWidth 32 (BKP)  
 
    .equ RTC_BKP12R, RTC_BASE + 0x80 @ (backup register) 
        .equ RTC_BKP12R_BKP_Shift, 0   @ bitWidth 32 (BKP)  
 
    .equ RTC_BKP13R, RTC_BASE + 0x84 @ (backup register) 
        .equ RTC_BKP13R_BKP_Shift, 0   @ bitWidth 32 (BKP)  
 
    .equ RTC_BKP14R, RTC_BASE + 0x88 @ (backup register) 
        .equ RTC_BKP14R_BKP_Shift, 0   @ bitWidth 32 (BKP)  
 
    .equ RTC_BKP15R, RTC_BASE + 0x8C @ (backup register) 
        .equ RTC_BKP15R_BKP_Shift, 0   @ bitWidth 32 (BKP)  
 
    .equ RTC_BKP16R, RTC_BASE + 0x90 @ (backup register) 
        .equ RTC_BKP16R_BKP_Shift, 0   @ bitWidth 32 (BKP)  
 
    .equ RTC_BKP17R, RTC_BASE + 0x94 @ (backup register) 
        .equ RTC_BKP17R_BKP_Shift, 0   @ bitWidth 32 (BKP)  
 
    .equ RTC_BKP18R, RTC_BASE + 0x98 @ (backup register) 
        .equ RTC_BKP18R_BKP_Shift, 0   @ bitWidth 32 (BKP)  
 
    .equ RTC_BKP19R, RTC_BASE + 0x9C @ (backup register) 
        .equ RTC_BKP19R_BKP_Shift, 0   @ bitWidth 32 (BKP)  
 

@=========================== UART4 ===========================@
.equ UART4_BASE, 0x40004C00 @ (Universal synchronous asynchronous receiver  transmitter) 
    .equ UART4_SR, UART4_BASE + 0x0 @ (Status register) 
        .equ UART4_SR_LBD, 1 << 8   @ bitWidth 1 (LIN break detection flag)  
        .equ UART4_SR_TXE, 1 << 7   @ bitWidth 1 (Transmit data register  empty)  
        .equ UART4_SR_TC, 1 << 6   @ bitWidth 1 (Transmission complete)  
        .equ UART4_SR_RXNE, 1 << 5   @ bitWidth 1 (Read data register not  empty)  
        .equ UART4_SR_IDLE, 1 << 4   @ bitWidth 1 (IDLE line detected)  
        .equ UART4_SR_ORE, 1 << 3   @ bitWidth 1 (Overrun error)  
        .equ UART4_SR_NF, 1 << 2   @ bitWidth 1 (Noise detected flag)  
        .equ UART4_SR_FE, 1 << 1   @ bitWidth 1 (Framing error)  
        .equ UART4_SR_PE, 1 << 0   @ bitWidth 1 (Parity error)  
 
    .equ UART4_DR, UART4_BASE + 0x4 @ (Data register) 
        .equ UART4_DR_DR_Shift, 0   @ bitWidth 9 (Data value)  
 
    .equ UART4_BRR, UART4_BASE + 0x8 @ (Baud rate register) 
        .equ UART4_BRR_DIV_Mantissa_Shift, 4   @ bitWidth 12 (mantissa of USARTDIV)  
        .equ UART4_BRR_DIV_Fraction_Shift, 0   @ bitWidth 4 (fraction of USARTDIV)  
 
    .equ UART4_CR1, UART4_BASE + 0xC @ (Control register 1) 
        .equ UART4_CR1_OVER8, 1 << 15   @ bitWidth 1 (Oversampling mode)  
        .equ UART4_CR1_UE, 1 << 13   @ bitWidth 1 (USART enable)  
        .equ UART4_CR1_M, 1 << 12   @ bitWidth 1 (Word length)  
        .equ UART4_CR1_WAKE, 1 << 11   @ bitWidth 1 (Wakeup method)  
        .equ UART4_CR1_PCE, 1 << 10   @ bitWidth 1 (Parity control enable)  
        .equ UART4_CR1_PS, 1 << 9   @ bitWidth 1 (Parity selection)  
        .equ UART4_CR1_PEIE, 1 << 8   @ bitWidth 1 (PE interrupt enable)  
        .equ UART4_CR1_TXEIE, 1 << 7   @ bitWidth 1 (TXE interrupt enable)  
        .equ UART4_CR1_TCIE, 1 << 6   @ bitWidth 1 (Transmission complete interrupt  enable)  
        .equ UART4_CR1_RXNEIE, 1 << 5   @ bitWidth 1 (RXNE interrupt enable)  
        .equ UART4_CR1_IDLEIE, 1 << 4   @ bitWidth 1 (IDLE interrupt enable)  
        .equ UART4_CR1_TE, 1 << 3   @ bitWidth 1 (Transmitter enable)  
        .equ UART4_CR1_RE, 1 << 2   @ bitWidth 1 (Receiver enable)  
        .equ UART4_CR1_RWU, 1 << 1   @ bitWidth 1 (Receiver wakeup)  
        .equ UART4_CR1_SBK, 1 << 0   @ bitWidth 1 (Send break)  
 
    .equ UART4_CR2, UART4_BASE + 0x10 @ (Control register 2) 
        .equ UART4_CR2_LINEN, 1 << 14   @ bitWidth 1 (LIN mode enable)  
        .equ UART4_CR2_STOP_Shift, 12   @ bitWidth 2 (STOP bits)  
        .equ UART4_CR2_LBDIE, 1 << 6   @ bitWidth 1 (LIN break detection interrupt  enable)  
        .equ UART4_CR2_LBDL, 1 << 5   @ bitWidth 1 (lin break detection length)  
        .equ UART4_CR2_ADD_Shift, 0   @ bitWidth 4 (Address of the USART node)  
 
    .equ UART4_CR3, UART4_BASE + 0x14 @ (Control register 3) 
        .equ UART4_CR3_ONEBIT, 1 << 11   @ bitWidth 1 (One sample bit method  enable)  
        .equ UART4_CR3_DMAT, 1 << 7   @ bitWidth 1 (DMA enable transmitter)  
        .equ UART4_CR3_DMAR, 1 << 6   @ bitWidth 1 (DMA enable receiver)  
        .equ UART4_CR3_HDSEL, 1 << 3   @ bitWidth 1 (Half-duplex selection)  
        .equ UART4_CR3_IRLP, 1 << 2   @ bitWidth 1 (IrDA low-power)  
        .equ UART4_CR3_IREN, 1 << 1   @ bitWidth 1 (IrDA mode enable)  
        .equ UART4_CR3_EIE, 1 << 0   @ bitWidth 1 (Error interrupt enable)  
 

@=========================== UART5 ===========================@
.equ UART5_BASE, 0x40005000 @ (Universal synchronous asynchronous receiver  transmitter) 
    .equ UART5_SR, UART5_BASE + 0x0 @ (Status register) 
        .equ UART5_SR_LBD, 1 << 8   @ bitWidth 1 (LIN break detection flag)  
        .equ UART5_SR_TXE, 1 << 7   @ bitWidth 1 (Transmit data register  empty)  
        .equ UART5_SR_TC, 1 << 6   @ bitWidth 1 (Transmission complete)  
        .equ UART5_SR_RXNE, 1 << 5   @ bitWidth 1 (Read data register not  empty)  
        .equ UART5_SR_IDLE, 1 << 4   @ bitWidth 1 (IDLE line detected)  
        .equ UART5_SR_ORE, 1 << 3   @ bitWidth 1 (Overrun error)  
        .equ UART5_SR_NF, 1 << 2   @ bitWidth 1 (Noise detected flag)  
        .equ UART5_SR_FE, 1 << 1   @ bitWidth 1 (Framing error)  
        .equ UART5_SR_PE, 1 << 0   @ bitWidth 1 (Parity error)  
 
    .equ UART5_DR, UART5_BASE + 0x4 @ (Data register) 
        .equ UART5_DR_DR_Shift, 0   @ bitWidth 9 (Data value)  
 
    .equ UART5_BRR, UART5_BASE + 0x8 @ (Baud rate register) 
        .equ UART5_BRR_DIV_Mantissa_Shift, 4   @ bitWidth 12 (mantissa of USARTDIV)  
        .equ UART5_BRR_DIV_Fraction_Shift, 0   @ bitWidth 4 (fraction of USARTDIV)  
 
    .equ UART5_CR1, UART5_BASE + 0xC @ (Control register 1) 
        .equ UART5_CR1_OVER8, 1 << 15   @ bitWidth 1 (Oversampling mode)  
        .equ UART5_CR1_UE, 1 << 13   @ bitWidth 1 (USART enable)  
        .equ UART5_CR1_M, 1 << 12   @ bitWidth 1 (Word length)  
        .equ UART5_CR1_WAKE, 1 << 11   @ bitWidth 1 (Wakeup method)  
        .equ UART5_CR1_PCE, 1 << 10   @ bitWidth 1 (Parity control enable)  
        .equ UART5_CR1_PS, 1 << 9   @ bitWidth 1 (Parity selection)  
        .equ UART5_CR1_PEIE, 1 << 8   @ bitWidth 1 (PE interrupt enable)  
        .equ UART5_CR1_TXEIE, 1 << 7   @ bitWidth 1 (TXE interrupt enable)  
        .equ UART5_CR1_TCIE, 1 << 6   @ bitWidth 1 (Transmission complete interrupt  enable)  
        .equ UART5_CR1_RXNEIE, 1 << 5   @ bitWidth 1 (RXNE interrupt enable)  
        .equ UART5_CR1_IDLEIE, 1 << 4   @ bitWidth 1 (IDLE interrupt enable)  
        .equ UART5_CR1_TE, 1 << 3   @ bitWidth 1 (Transmitter enable)  
        .equ UART5_CR1_RE, 1 << 2   @ bitWidth 1 (Receiver enable)  
        .equ UART5_CR1_RWU, 1 << 1   @ bitWidth 1 (Receiver wakeup)  
        .equ UART5_CR1_SBK, 1 << 0   @ bitWidth 1 (Send break)  
 
    .equ UART5_CR2, UART5_BASE + 0x10 @ (Control register 2) 
        .equ UART5_CR2_LINEN, 1 << 14   @ bitWidth 1 (LIN mode enable)  
        .equ UART5_CR2_STOP_Shift, 12   @ bitWidth 2 (STOP bits)  
        .equ UART5_CR2_LBDIE, 1 << 6   @ bitWidth 1 (LIN break detection interrupt  enable)  
        .equ UART5_CR2_LBDL, 1 << 5   @ bitWidth 1 (lin break detection length)  
        .equ UART5_CR2_ADD_Shift, 0   @ bitWidth 4 (Address of the USART node)  
 
    .equ UART5_CR3, UART5_BASE + 0x14 @ (Control register 3) 
        .equ UART5_CR3_ONEBIT, 1 << 11   @ bitWidth 1 (One sample bit method  enable)  
        .equ UART5_CR3_DMAT, 1 << 7   @ bitWidth 1 (DMA enable transmitter)  
        .equ UART5_CR3_DMAR, 1 << 6   @ bitWidth 1 (DMA enable receiver)  
        .equ UART5_CR3_HDSEL, 1 << 3   @ bitWidth 1 (Half-duplex selection)  
        .equ UART5_CR3_IRLP, 1 << 2   @ bitWidth 1 (IrDA low-power)  
        .equ UART5_CR3_IREN, 1 << 1   @ bitWidth 1 (IrDA mode enable)  
        .equ UART5_CR3_EIE, 1 << 0   @ bitWidth 1 (Error interrupt enable)  
 

@=========================== C_ADC ===========================@
.equ C_ADC_BASE, 0x40012300 @ (Common ADC registers) 
    .equ C_ADC_CSR, C_ADC_BASE + 0x0 @ (ADC Common status register) 
        .equ C_ADC_CSR_OVR3, 1 << 21   @ bitWidth 1 (Overrun flag of ADC3)  
        .equ C_ADC_CSR_STRT3, 1 << 20   @ bitWidth 1 (Regular channel Start flag of ADC  3)  
        .equ C_ADC_CSR_JSTRT3, 1 << 19   @ bitWidth 1 (Injected channel Start flag of ADC  3)  
        .equ C_ADC_CSR_JEOC3, 1 << 18   @ bitWidth 1 (Injected channel end of conversion of  ADC 3)  
        .equ C_ADC_CSR_EOC3, 1 << 17   @ bitWidth 1 (End of conversion of ADC 3)  
        .equ C_ADC_CSR_AWD3, 1 << 16   @ bitWidth 1 (Analog watchdog flag of ADC  3)  
        .equ C_ADC_CSR_OVR2, 1 << 13   @ bitWidth 1 (Overrun flag of ADC 2)  
        .equ C_ADC_CSR_STRT2, 1 << 12   @ bitWidth 1 (Regular channel Start flag of ADC  2)  
        .equ C_ADC_CSR_JSTRT2, 1 << 11   @ bitWidth 1 (Injected channel Start flag of ADC  2)  
        .equ C_ADC_CSR_JEOC2, 1 << 10   @ bitWidth 1 (Injected channel end of conversion of  ADC 2)  
        .equ C_ADC_CSR_EOC2, 1 << 9   @ bitWidth 1 (End of conversion of ADC 2)  
        .equ C_ADC_CSR_AWD2, 1 << 8   @ bitWidth 1 (Analog watchdog flag of ADC  2)  
        .equ C_ADC_CSR_OVR1, 1 << 5   @ bitWidth 1 (Overrun flag of ADC 1)  
        .equ C_ADC_CSR_STRT1, 1 << 4   @ bitWidth 1 (Regular channel Start flag of ADC  1)  
        .equ C_ADC_CSR_JSTRT1, 1 << 3   @ bitWidth 1 (Injected channel Start flag of ADC  1)  
        .equ C_ADC_CSR_JEOC1, 1 << 2   @ bitWidth 1 (Injected channel end of conversion of  ADC 1)  
        .equ C_ADC_CSR_EOC1, 1 << 1   @ bitWidth 1 (End of conversion of ADC 1)  
        .equ C_ADC_CSR_AWD1, 1 << 0   @ bitWidth 1 (Analog watchdog flag of ADC  1)  
 
    .equ C_ADC_CCR, C_ADC_BASE + 0x4 @ (ADC common control register) 
        .equ C_ADC_CCR_TSVREFE, 1 << 23   @ bitWidth 1 (Temperature sensor and VREFINT  enable)  
        .equ C_ADC_CCR_VBATE, 1 << 22   @ bitWidth 1 (VBAT enable)  
        .equ C_ADC_CCR_ADCPRE_Shift, 16   @ bitWidth 2 (ADC prescaler)  
        .equ C_ADC_CCR_DMA_Shift, 14   @ bitWidth 2 (Direct memory access mode for multi ADC  mode)  
        .equ C_ADC_CCR_DDS, 1 << 13   @ bitWidth 1 (DMA disable selection for multi-ADC  mode)  
        .equ C_ADC_CCR_DELAY_Shift, 8   @ bitWidth 4 (Delay between 2 sampling  phases)  
        .equ C_ADC_CCR_MULT_Shift, 0   @ bitWidth 5 (Multi ADC mode selection)  
 
    .equ C_ADC_CDR, C_ADC_BASE + 0x8 @ (ADC common regular data register for dual  and triple modes) 
        .equ C_ADC_CDR_DATA2_Shift, 16   @ bitWidth 16 (2nd data item of a pair of regular  conversions)  
        .equ C_ADC_CDR_DATA1_Shift, 0   @ bitWidth 16 (1st data item of a pair of regular  conversions)  
 

@=========================== TIM1 ===========================@
.equ TIM1_BASE, 0x40010000 @ (Advanced-timers) 
    .equ TIM1_CR1, TIM1_BASE + 0x0 @ (control register 1) 
        .equ TIM1_CR1_CKD_Shift, 8   @ bitWidth 2 (Clock division)  
        .equ TIM1_CR1_ARPE, 1 << 7   @ bitWidth 1 (Auto-reload preload enable)  
        .equ TIM1_CR1_CMS_Shift, 5   @ bitWidth 2 (Center-aligned mode  selection)  
        .equ TIM1_CR1_DIR, 1 << 4   @ bitWidth 1 (Direction)  
        .equ TIM1_CR1_OPM, 1 << 3   @ bitWidth 1 (One-pulse mode)  
        .equ TIM1_CR1_URS, 1 << 2   @ bitWidth 1 (Update request source)  
        .equ TIM1_CR1_UDIS, 1 << 1   @ bitWidth 1 (Update disable)  
        .equ TIM1_CR1_CEN, 1 << 0   @ bitWidth 1 (Counter enable)  
 
    .equ TIM1_CR2, TIM1_BASE + 0x4 @ (control register 2) 
        .equ TIM1_CR2_OIS4, 1 << 14   @ bitWidth 1 (Output Idle state 4)  
        .equ TIM1_CR2_OIS3N, 1 << 13   @ bitWidth 1 (Output Idle state 3)  
        .equ TIM1_CR2_OIS3, 1 << 12   @ bitWidth 1 (Output Idle state 3)  
        .equ TIM1_CR2_OIS2N, 1 << 11   @ bitWidth 1 (Output Idle state 2)  
        .equ TIM1_CR2_OIS2, 1 << 10   @ bitWidth 1 (Output Idle state 2)  
        .equ TIM1_CR2_OIS1N, 1 << 9   @ bitWidth 1 (Output Idle state 1)  
        .equ TIM1_CR2_OIS1, 1 << 8   @ bitWidth 1 (Output Idle state 1)  
        .equ TIM1_CR2_TI1S, 1 << 7   @ bitWidth 1 (TI1 selection)  
        .equ TIM1_CR2_MMS_Shift, 4   @ bitWidth 3 (Master mode selection)  
        .equ TIM1_CR2_CCDS, 1 << 3   @ bitWidth 1 (Capture/compare DMA  selection)  
        .equ TIM1_CR2_CCUS, 1 << 2   @ bitWidth 1 (Capture/compare control update  selection)  
        .equ TIM1_CR2_CCPC, 1 << 0   @ bitWidth 1 (Capture/compare preloaded  control)  
 
    .equ TIM1_SMCR, TIM1_BASE + 0x8 @ (slave mode control register) 
        .equ TIM1_SMCR_ETP, 1 << 15   @ bitWidth 1 (External trigger polarity)  
        .equ TIM1_SMCR_ECE, 1 << 14   @ bitWidth 1 (External clock enable)  
        .equ TIM1_SMCR_ETPS_Shift, 12   @ bitWidth 2 (External trigger prescaler)  
        .equ TIM1_SMCR_ETF_Shift, 8   @ bitWidth 4 (External trigger filter)  
        .equ TIM1_SMCR_MSM, 1 << 7   @ bitWidth 1 (Master/Slave mode)  
        .equ TIM1_SMCR_TS_Shift, 4   @ bitWidth 3 (Trigger selection)  
        .equ TIM1_SMCR_SMS_Shift, 0   @ bitWidth 3 (Slave mode selection)  
 
    .equ TIM1_DIER, TIM1_BASE + 0xC @ (DMA/Interrupt enable register) 
        .equ TIM1_DIER_TDE, 1 << 14   @ bitWidth 1 (Trigger DMA request enable)  
        .equ TIM1_DIER_COMDE, 1 << 13   @ bitWidth 1 (COM DMA request enable)  
        .equ TIM1_DIER_CC4DE, 1 << 12   @ bitWidth 1 (Capture/Compare 4 DMA request  enable)  
        .equ TIM1_DIER_CC3DE, 1 << 11   @ bitWidth 1 (Capture/Compare 3 DMA request  enable)  
        .equ TIM1_DIER_CC2DE, 1 << 10   @ bitWidth 1 (Capture/Compare 2 DMA request  enable)  
        .equ TIM1_DIER_CC1DE, 1 << 9   @ bitWidth 1 (Capture/Compare 1 DMA request  enable)  
        .equ TIM1_DIER_UDE, 1 << 8   @ bitWidth 1 (Update DMA request enable)  
        .equ TIM1_DIER_TIE, 1 << 6   @ bitWidth 1 (Trigger interrupt enable)  
        .equ TIM1_DIER_CC4IE, 1 << 4   @ bitWidth 1 (Capture/Compare 4 interrupt  enable)  
        .equ TIM1_DIER_CC3IE, 1 << 3   @ bitWidth 1 (Capture/Compare 3 interrupt  enable)  
        .equ TIM1_DIER_CC2IE, 1 << 2   @ bitWidth 1 (Capture/Compare 2 interrupt  enable)  
        .equ TIM1_DIER_CC1IE, 1 << 1   @ bitWidth 1 (Capture/Compare 1 interrupt  enable)  
        .equ TIM1_DIER_UIE, 1 << 0   @ bitWidth 1 (Update interrupt enable)  
        .equ TIM1_DIER_BIE, 1 << 7   @ bitWidth 1 (Break interrupt enable)  
        .equ TIM1_DIER_COMIE, 1 << 5   @ bitWidth 1 (COM interrupt enable)  
 
    .equ TIM1_SR, TIM1_BASE + 0x10 @ (status register) 
        .equ TIM1_SR_CC4OF, 1 << 12   @ bitWidth 1 (Capture/Compare 4 overcapture  flag)  
        .equ TIM1_SR_CC3OF, 1 << 11   @ bitWidth 1 (Capture/Compare 3 overcapture  flag)  
        .equ TIM1_SR_CC2OF, 1 << 10   @ bitWidth 1 (Capture/compare 2 overcapture  flag)  
        .equ TIM1_SR_CC1OF, 1 << 9   @ bitWidth 1 (Capture/Compare 1 overcapture  flag)  
        .equ TIM1_SR_BIF, 1 << 7   @ bitWidth 1 (Break interrupt flag)  
        .equ TIM1_SR_TIF, 1 << 6   @ bitWidth 1 (Trigger interrupt flag)  
        .equ TIM1_SR_COMIF, 1 << 5   @ bitWidth 1 (COM interrupt flag)  
        .equ TIM1_SR_CC4IF, 1 << 4   @ bitWidth 1 (Capture/Compare 4 interrupt  flag)  
        .equ TIM1_SR_CC3IF, 1 << 3   @ bitWidth 1 (Capture/Compare 3 interrupt  flag)  
        .equ TIM1_SR_CC2IF, 1 << 2   @ bitWidth 1 (Capture/Compare 2 interrupt  flag)  
        .equ TIM1_SR_CC1IF, 1 << 1   @ bitWidth 1 (Capture/compare 1 interrupt  flag)  
        .equ TIM1_SR_UIF, 1 << 0   @ bitWidth 1 (Update interrupt flag)  
 
    .equ TIM1_EGR, TIM1_BASE + 0x14 @ (event generation register) 
        .equ TIM1_EGR_BG, 1 << 7   @ bitWidth 1 (Break generation)  
        .equ TIM1_EGR_TG, 1 << 6   @ bitWidth 1 (Trigger generation)  
        .equ TIM1_EGR_COMG, 1 << 5   @ bitWidth 1 (Capture/Compare control update  generation)  
        .equ TIM1_EGR_CC4G, 1 << 4   @ bitWidth 1 (Capture/compare 4  generation)  
        .equ TIM1_EGR_CC3G, 1 << 3   @ bitWidth 1 (Capture/compare 3  generation)  
        .equ TIM1_EGR_CC2G, 1 << 2   @ bitWidth 1 (Capture/compare 2  generation)  
        .equ TIM1_EGR_CC1G, 1 << 1   @ bitWidth 1 (Capture/compare 1  generation)  
        .equ TIM1_EGR_UG, 1 << 0   @ bitWidth 1 (Update generation)  
 
    .equ TIM1_CCMR1_Output, TIM1_BASE + 0x18 @ (capture/compare mode register 1 output  mode) 
        .equ TIM1_CCMR1_Output_OC2CE, 1 << 15   @ bitWidth 1 (Output Compare 2 clear  enable)  
        .equ TIM1_CCMR1_Output_OC2M_Shift, 12   @ bitWidth 3 (Output Compare 2 mode)  
        .equ TIM1_CCMR1_Output_OC2PE, 1 << 11   @ bitWidth 1 (Output Compare 2 preload  enable)  
        .equ TIM1_CCMR1_Output_OC2FE, 1 << 10   @ bitWidth 1 (Output Compare 2 fast  enable)  
        .equ TIM1_CCMR1_Output_CC2S_Shift, 8   @ bitWidth 2 (Capture/Compare 2  selection)  
        .equ TIM1_CCMR1_Output_OC1CE, 1 << 7   @ bitWidth 1 (Output Compare 1 clear  enable)  
        .equ TIM1_CCMR1_Output_OC1M_Shift, 4   @ bitWidth 3 (Output Compare 1 mode)  
        .equ TIM1_CCMR1_Output_OC1PE, 1 << 3   @ bitWidth 1 (Output Compare 1 preload  enable)  
        .equ TIM1_CCMR1_Output_OC1FE, 1 << 2   @ bitWidth 1 (Output Compare 1 fast  enable)  
        .equ TIM1_CCMR1_Output_CC1S_Shift, 0   @ bitWidth 2 (Capture/Compare 1  selection)  
 
    .equ TIM1_CCMR1_Input, TIM1_BASE + 0x18 @ (capture/compare mode register 1 input  mode) 
        .equ TIM1_CCMR1_Input_IC2F_Shift, 12   @ bitWidth 4 (Input capture 2 filter)  
        .equ TIM1_CCMR1_Input_IC2PCS_Shift, 10   @ bitWidth 2 (Input capture 2 prescaler)  
        .equ TIM1_CCMR1_Input_CC2S_Shift, 8   @ bitWidth 2 (Capture/Compare 2  selection)  
        .equ TIM1_CCMR1_Input_IC1F_Shift, 4   @ bitWidth 4 (Input capture 1 filter)  
        .equ TIM1_CCMR1_Input_ICPCS_Shift, 2   @ bitWidth 2 (Input capture 1 prescaler)  
        .equ TIM1_CCMR1_Input_CC1S_Shift, 0   @ bitWidth 2 (Capture/Compare 1  selection)  
 
    .equ TIM1_CCMR2_Output, TIM1_BASE + 0x1C @ (capture/compare mode register 2 output  mode) 
        .equ TIM1_CCMR2_Output_OC4CE, 1 << 15   @ bitWidth 1 (Output compare 4 clear  enable)  
        .equ TIM1_CCMR2_Output_OC4M_Shift, 12   @ bitWidth 3 (Output compare 4 mode)  
        .equ TIM1_CCMR2_Output_OC4PE, 1 << 11   @ bitWidth 1 (Output compare 4 preload  enable)  
        .equ TIM1_CCMR2_Output_OC4FE, 1 << 10   @ bitWidth 1 (Output compare 4 fast  enable)  
        .equ TIM1_CCMR2_Output_CC4S_Shift, 8   @ bitWidth 2 (Capture/Compare 4  selection)  
        .equ TIM1_CCMR2_Output_OC3CE, 1 << 7   @ bitWidth 1 (Output compare 3 clear  enable)  
        .equ TIM1_CCMR2_Output_OC3M_Shift, 4   @ bitWidth 3 (Output compare 3 mode)  
        .equ TIM1_CCMR2_Output_OC3PE, 1 << 3   @ bitWidth 1 (Output compare 3 preload  enable)  
        .equ TIM1_CCMR2_Output_OC3FE, 1 << 2   @ bitWidth 1 (Output compare 3 fast  enable)  
        .equ TIM1_CCMR2_Output_CC3S_Shift, 0   @ bitWidth 2 (Capture/Compare 3  selection)  
 
    .equ TIM1_CCMR2_Input, TIM1_BASE + 0x1C @ (capture/compare mode register 2 input  mode) 
        .equ TIM1_CCMR2_Input_IC4F_Shift, 12   @ bitWidth 4 (Input capture 4 filter)  
        .equ TIM1_CCMR2_Input_IC4PSC_Shift, 10   @ bitWidth 2 (Input capture 4 prescaler)  
        .equ TIM1_CCMR2_Input_CC4S_Shift, 8   @ bitWidth 2 (Capture/Compare 4  selection)  
        .equ TIM1_CCMR2_Input_IC3F_Shift, 4   @ bitWidth 4 (Input capture 3 filter)  
        .equ TIM1_CCMR2_Input_IC3PSC_Shift, 2   @ bitWidth 2 (Input capture 3 prescaler)  
        .equ TIM1_CCMR2_Input_CC3S_Shift, 0   @ bitWidth 2 (Capture/compare 3  selection)  
 
    .equ TIM1_CCER, TIM1_BASE + 0x20 @ (capture/compare enable  register) 
        .equ TIM1_CCER_CC4P, 1 << 13   @ bitWidth 1 (Capture/Compare 3 output  Polarity)  
        .equ TIM1_CCER_CC4E, 1 << 12   @ bitWidth 1 (Capture/Compare 4 output  enable)  
        .equ TIM1_CCER_CC3NP, 1 << 11   @ bitWidth 1 (Capture/Compare 3 output  Polarity)  
        .equ TIM1_CCER_CC3NE, 1 << 10   @ bitWidth 1 (Capture/Compare 3 complementary output  enable)  
        .equ TIM1_CCER_CC3P, 1 << 9   @ bitWidth 1 (Capture/Compare 3 output  Polarity)  
        .equ TIM1_CCER_CC3E, 1 << 8   @ bitWidth 1 (Capture/Compare 3 output  enable)  
        .equ TIM1_CCER_CC2NP, 1 << 7   @ bitWidth 1 (Capture/Compare 2 output  Polarity)  
        .equ TIM1_CCER_CC2NE, 1 << 6   @ bitWidth 1 (Capture/Compare 2 complementary output  enable)  
        .equ TIM1_CCER_CC2P, 1 << 5   @ bitWidth 1 (Capture/Compare 2 output  Polarity)  
        .equ TIM1_CCER_CC2E, 1 << 4   @ bitWidth 1 (Capture/Compare 2 output  enable)  
        .equ TIM1_CCER_CC1NP, 1 << 3   @ bitWidth 1 (Capture/Compare 1 output  Polarity)  
        .equ TIM1_CCER_CC1NE, 1 << 2   @ bitWidth 1 (Capture/Compare 1 complementary output  enable)  
        .equ TIM1_CCER_CC1P, 1 << 1   @ bitWidth 1 (Capture/Compare 1 output  Polarity)  
        .equ TIM1_CCER_CC1E, 1 << 0   @ bitWidth 1 (Capture/Compare 1 output  enable)  
 
    .equ TIM1_CNT, TIM1_BASE + 0x24 @ (counter) 
        .equ TIM1_CNT_CNT_Shift, 0   @ bitWidth 16 (counter value)  
 
    .equ TIM1_PSC, TIM1_BASE + 0x28 @ (prescaler) 
        .equ TIM1_PSC_PSC_Shift, 0   @ bitWidth 16 (Prescaler value)  
 
    .equ TIM1_ARR, TIM1_BASE + 0x2C @ (auto-reload register) 
        .equ TIM1_ARR_ARR_Shift, 0   @ bitWidth 16 (Auto-reload value)  
 
    .equ TIM1_CCR1, TIM1_BASE + 0x34 @ (capture/compare register 1) 
        .equ TIM1_CCR1_CCR1_Shift, 0   @ bitWidth 16 (Capture/Compare 1 value)  
 
    .equ TIM1_CCR2, TIM1_BASE + 0x38 @ (capture/compare register 2) 
        .equ TIM1_CCR2_CCR2_Shift, 0   @ bitWidth 16 (Capture/Compare 2 value)  
 
    .equ TIM1_CCR3, TIM1_BASE + 0x3C @ (capture/compare register 3) 
        .equ TIM1_CCR3_CCR3_Shift, 0   @ bitWidth 16 (Capture/Compare value)  
 
    .equ TIM1_CCR4, TIM1_BASE + 0x40 @ (capture/compare register 4) 
        .equ TIM1_CCR4_CCR4_Shift, 0   @ bitWidth 16 (Capture/Compare value)  
 
    .equ TIM1_DCR, TIM1_BASE + 0x48 @ (DMA control register) 
        .equ TIM1_DCR_DBL_Shift, 8   @ bitWidth 5 (DMA burst length)  
        .equ TIM1_DCR_DBA_Shift, 0   @ bitWidth 5 (DMA base address)  
 
    .equ TIM1_DMAR, TIM1_BASE + 0x4C @ (DMA address for full transfer) 
        .equ TIM1_DMAR_DMAB_Shift, 0   @ bitWidth 16 (DMA register for burst  accesses)  
 
    .equ TIM1_RCR, TIM1_BASE + 0x30 @ (repetition counter register) 
        .equ TIM1_RCR_REP_Shift, 0   @ bitWidth 8 (Repetition counter value)  
 
    .equ TIM1_BDTR, TIM1_BASE + 0x44 @ (break and dead-time register) 
        .equ TIM1_BDTR_MOE, 1 << 15   @ bitWidth 1 (Main output enable)  
        .equ TIM1_BDTR_AOE, 1 << 14   @ bitWidth 1 (Automatic output enable)  
        .equ TIM1_BDTR_BKP, 1 << 13   @ bitWidth 1 (Break polarity)  
        .equ TIM1_BDTR_BKE, 1 << 12   @ bitWidth 1 (Break enable)  
        .equ TIM1_BDTR_OSSR, 1 << 11   @ bitWidth 1 (Off-state selection for Run  mode)  
        .equ TIM1_BDTR_OSSI, 1 << 10   @ bitWidth 1 (Off-state selection for Idle  mode)  
        .equ TIM1_BDTR_LOCK_Shift, 8   @ bitWidth 2 (Lock configuration)  
        .equ TIM1_BDTR_DTG_Shift, 0   @ bitWidth 8 (Dead-time generator setup)  
 

@=========================== TIM8 ===========================@
.equ TIM8_BASE, 0x40010400 @ (Advanced-timers) 
    .equ TIM8_CR1, TIM8_BASE + 0x0 @ (control register 1) 
        .equ TIM8_CR1_CKD_Shift, 8   @ bitWidth 2 (Clock division)  
        .equ TIM8_CR1_ARPE, 1 << 7   @ bitWidth 1 (Auto-reload preload enable)  
        .equ TIM8_CR1_CMS_Shift, 5   @ bitWidth 2 (Center-aligned mode  selection)  
        .equ TIM8_CR1_DIR, 1 << 4   @ bitWidth 1 (Direction)  
        .equ TIM8_CR1_OPM, 1 << 3   @ bitWidth 1 (One-pulse mode)  
        .equ TIM8_CR1_URS, 1 << 2   @ bitWidth 1 (Update request source)  
        .equ TIM8_CR1_UDIS, 1 << 1   @ bitWidth 1 (Update disable)  
        .equ TIM8_CR1_CEN, 1 << 0   @ bitWidth 1 (Counter enable)  
 
    .equ TIM8_CR2, TIM8_BASE + 0x4 @ (control register 2) 
        .equ TIM8_CR2_OIS4, 1 << 14   @ bitWidth 1 (Output Idle state 4)  
        .equ TIM8_CR2_OIS3N, 1 << 13   @ bitWidth 1 (Output Idle state 3)  
        .equ TIM8_CR2_OIS3, 1 << 12   @ bitWidth 1 (Output Idle state 3)  
        .equ TIM8_CR2_OIS2N, 1 << 11   @ bitWidth 1 (Output Idle state 2)  
        .equ TIM8_CR2_OIS2, 1 << 10   @ bitWidth 1 (Output Idle state 2)  
        .equ TIM8_CR2_OIS1N, 1 << 9   @ bitWidth 1 (Output Idle state 1)  
        .equ TIM8_CR2_OIS1, 1 << 8   @ bitWidth 1 (Output Idle state 1)  
        .equ TIM8_CR2_TI1S, 1 << 7   @ bitWidth 1 (TI1 selection)  
        .equ TIM8_CR2_MMS_Shift, 4   @ bitWidth 3 (Master mode selection)  
        .equ TIM8_CR2_CCDS, 1 << 3   @ bitWidth 1 (Capture/compare DMA  selection)  
        .equ TIM8_CR2_CCUS, 1 << 2   @ bitWidth 1 (Capture/compare control update  selection)  
        .equ TIM8_CR2_CCPC, 1 << 0   @ bitWidth 1 (Capture/compare preloaded  control)  
 
    .equ TIM8_SMCR, TIM8_BASE + 0x8 @ (slave mode control register) 
        .equ TIM8_SMCR_ETP, 1 << 15   @ bitWidth 1 (External trigger polarity)  
        .equ TIM8_SMCR_ECE, 1 << 14   @ bitWidth 1 (External clock enable)  
        .equ TIM8_SMCR_ETPS_Shift, 12   @ bitWidth 2 (External trigger prescaler)  
        .equ TIM8_SMCR_ETF_Shift, 8   @ bitWidth 4 (External trigger filter)  
        .equ TIM8_SMCR_MSM, 1 << 7   @ bitWidth 1 (Master/Slave mode)  
        .equ TIM8_SMCR_TS_Shift, 4   @ bitWidth 3 (Trigger selection)  
        .equ TIM8_SMCR_SMS_Shift, 0   @ bitWidth 3 (Slave mode selection)  
 
    .equ TIM8_DIER, TIM8_BASE + 0xC @ (DMA/Interrupt enable register) 
        .equ TIM8_DIER_TDE, 1 << 14   @ bitWidth 1 (Trigger DMA request enable)  
        .equ TIM8_DIER_COMDE, 1 << 13   @ bitWidth 1 (COM DMA request enable)  
        .equ TIM8_DIER_CC4DE, 1 << 12   @ bitWidth 1 (Capture/Compare 4 DMA request  enable)  
        .equ TIM8_DIER_CC3DE, 1 << 11   @ bitWidth 1 (Capture/Compare 3 DMA request  enable)  
        .equ TIM8_DIER_CC2DE, 1 << 10   @ bitWidth 1 (Capture/Compare 2 DMA request  enable)  
        .equ TIM8_DIER_CC1DE, 1 << 9   @ bitWidth 1 (Capture/Compare 1 DMA request  enable)  
        .equ TIM8_DIER_UDE, 1 << 8   @ bitWidth 1 (Update DMA request enable)  
        .equ TIM8_DIER_TIE, 1 << 6   @ bitWidth 1 (Trigger interrupt enable)  
        .equ TIM8_DIER_CC4IE, 1 << 4   @ bitWidth 1 (Capture/Compare 4 interrupt  enable)  
        .equ TIM8_DIER_CC3IE, 1 << 3   @ bitWidth 1 (Capture/Compare 3 interrupt  enable)  
        .equ TIM8_DIER_CC2IE, 1 << 2   @ bitWidth 1 (Capture/Compare 2 interrupt  enable)  
        .equ TIM8_DIER_CC1IE, 1 << 1   @ bitWidth 1 (Capture/Compare 1 interrupt  enable)  
        .equ TIM8_DIER_UIE, 1 << 0   @ bitWidth 1 (Update interrupt enable)  
        .equ TIM8_DIER_BIE, 1 << 7   @ bitWidth 1 (Break interrupt enable)  
        .equ TIM8_DIER_COMIE, 1 << 5   @ bitWidth 1 (COM interrupt enable)  
 
    .equ TIM8_SR, TIM8_BASE + 0x10 @ (status register) 
        .equ TIM8_SR_CC4OF, 1 << 12   @ bitWidth 1 (Capture/Compare 4 overcapture  flag)  
        .equ TIM8_SR_CC3OF, 1 << 11   @ bitWidth 1 (Capture/Compare 3 overcapture  flag)  
        .equ TIM8_SR_CC2OF, 1 << 10   @ bitWidth 1 (Capture/compare 2 overcapture  flag)  
        .equ TIM8_SR_CC1OF, 1 << 9   @ bitWidth 1 (Capture/Compare 1 overcapture  flag)  
        .equ TIM8_SR_BIF, 1 << 7   @ bitWidth 1 (Break interrupt flag)  
        .equ TIM8_SR_TIF, 1 << 6   @ bitWidth 1 (Trigger interrupt flag)  
        .equ TIM8_SR_COMIF, 1 << 5   @ bitWidth 1 (COM interrupt flag)  
        .equ TIM8_SR_CC4IF, 1 << 4   @ bitWidth 1 (Capture/Compare 4 interrupt  flag)  
        .equ TIM8_SR_CC3IF, 1 << 3   @ bitWidth 1 (Capture/Compare 3 interrupt  flag)  
        .equ TIM8_SR_CC2IF, 1 << 2   @ bitWidth 1 (Capture/Compare 2 interrupt  flag)  
        .equ TIM8_SR_CC1IF, 1 << 1   @ bitWidth 1 (Capture/compare 1 interrupt  flag)  
        .equ TIM8_SR_UIF, 1 << 0   @ bitWidth 1 (Update interrupt flag)  
 
    .equ TIM8_EGR, TIM8_BASE + 0x14 @ (event generation register) 
        .equ TIM8_EGR_BG, 1 << 7   @ bitWidth 1 (Break generation)  
        .equ TIM8_EGR_TG, 1 << 6   @ bitWidth 1 (Trigger generation)  
        .equ TIM8_EGR_COMG, 1 << 5   @ bitWidth 1 (Capture/Compare control update  generation)  
        .equ TIM8_EGR_CC4G, 1 << 4   @ bitWidth 1 (Capture/compare 4  generation)  
        .equ TIM8_EGR_CC3G, 1 << 3   @ bitWidth 1 (Capture/compare 3  generation)  
        .equ TIM8_EGR_CC2G, 1 << 2   @ bitWidth 1 (Capture/compare 2  generation)  
        .equ TIM8_EGR_CC1G, 1 << 1   @ bitWidth 1 (Capture/compare 1  generation)  
        .equ TIM8_EGR_UG, 1 << 0   @ bitWidth 1 (Update generation)  
 
    .equ TIM8_CCMR1_Output, TIM8_BASE + 0x18 @ (capture/compare mode register 1 output  mode) 
        .equ TIM8_CCMR1_Output_OC2CE, 1 << 15   @ bitWidth 1 (Output Compare 2 clear  enable)  
        .equ TIM8_CCMR1_Output_OC2M_Shift, 12   @ bitWidth 3 (Output Compare 2 mode)  
        .equ TIM8_CCMR1_Output_OC2PE, 1 << 11   @ bitWidth 1 (Output Compare 2 preload  enable)  
        .equ TIM8_CCMR1_Output_OC2FE, 1 << 10   @ bitWidth 1 (Output Compare 2 fast  enable)  
        .equ TIM8_CCMR1_Output_CC2S_Shift, 8   @ bitWidth 2 (Capture/Compare 2  selection)  
        .equ TIM8_CCMR1_Output_OC1CE, 1 << 7   @ bitWidth 1 (Output Compare 1 clear  enable)  
        .equ TIM8_CCMR1_Output_OC1M_Shift, 4   @ bitWidth 3 (Output Compare 1 mode)  
        .equ TIM8_CCMR1_Output_OC1PE, 1 << 3   @ bitWidth 1 (Output Compare 1 preload  enable)  
        .equ TIM8_CCMR1_Output_OC1FE, 1 << 2   @ bitWidth 1 (Output Compare 1 fast  enable)  
        .equ TIM8_CCMR1_Output_CC1S_Shift, 0   @ bitWidth 2 (Capture/Compare 1  selection)  
 
    .equ TIM8_CCMR1_Input, TIM8_BASE + 0x18 @ (capture/compare mode register 1 input  mode) 
        .equ TIM8_CCMR1_Input_IC2F_Shift, 12   @ bitWidth 4 (Input capture 2 filter)  
        .equ TIM8_CCMR1_Input_IC2PCS_Shift, 10   @ bitWidth 2 (Input capture 2 prescaler)  
        .equ TIM8_CCMR1_Input_CC2S_Shift, 8   @ bitWidth 2 (Capture/Compare 2  selection)  
        .equ TIM8_CCMR1_Input_IC1F_Shift, 4   @ bitWidth 4 (Input capture 1 filter)  
        .equ TIM8_CCMR1_Input_ICPCS_Shift, 2   @ bitWidth 2 (Input capture 1 prescaler)  
        .equ TIM8_CCMR1_Input_CC1S_Shift, 0   @ bitWidth 2 (Capture/Compare 1  selection)  
 
    .equ TIM8_CCMR2_Output, TIM8_BASE + 0x1C @ (capture/compare mode register 2 output  mode) 
        .equ TIM8_CCMR2_Output_OC4CE, 1 << 15   @ bitWidth 1 (Output compare 4 clear  enable)  
        .equ TIM8_CCMR2_Output_OC4M_Shift, 12   @ bitWidth 3 (Output compare 4 mode)  
        .equ TIM8_CCMR2_Output_OC4PE, 1 << 11   @ bitWidth 1 (Output compare 4 preload  enable)  
        .equ TIM8_CCMR2_Output_OC4FE, 1 << 10   @ bitWidth 1 (Output compare 4 fast  enable)  
        .equ TIM8_CCMR2_Output_CC4S_Shift, 8   @ bitWidth 2 (Capture/Compare 4  selection)  
        .equ TIM8_CCMR2_Output_OC3CE, 1 << 7   @ bitWidth 1 (Output compare 3 clear  enable)  
        .equ TIM8_CCMR2_Output_OC3M_Shift, 4   @ bitWidth 3 (Output compare 3 mode)  
        .equ TIM8_CCMR2_Output_OC3PE, 1 << 3   @ bitWidth 1 (Output compare 3 preload  enable)  
        .equ TIM8_CCMR2_Output_OC3FE, 1 << 2   @ bitWidth 1 (Output compare 3 fast  enable)  
        .equ TIM8_CCMR2_Output_CC3S_Shift, 0   @ bitWidth 2 (Capture/Compare 3  selection)  
 
    .equ TIM8_CCMR2_Input, TIM8_BASE + 0x1C @ (capture/compare mode register 2 input  mode) 
        .equ TIM8_CCMR2_Input_IC4F_Shift, 12   @ bitWidth 4 (Input capture 4 filter)  
        .equ TIM8_CCMR2_Input_IC4PSC_Shift, 10   @ bitWidth 2 (Input capture 4 prescaler)  
        .equ TIM8_CCMR2_Input_CC4S_Shift, 8   @ bitWidth 2 (Capture/Compare 4  selection)  
        .equ TIM8_CCMR2_Input_IC3F_Shift, 4   @ bitWidth 4 (Input capture 3 filter)  
        .equ TIM8_CCMR2_Input_IC3PSC_Shift, 2   @ bitWidth 2 (Input capture 3 prescaler)  
        .equ TIM8_CCMR2_Input_CC3S_Shift, 0   @ bitWidth 2 (Capture/compare 3  selection)  
 
    .equ TIM8_CCER, TIM8_BASE + 0x20 @ (capture/compare enable  register) 
        .equ TIM8_CCER_CC4P, 1 << 13   @ bitWidth 1 (Capture/Compare 3 output  Polarity)  
        .equ TIM8_CCER_CC4E, 1 << 12   @ bitWidth 1 (Capture/Compare 4 output  enable)  
        .equ TIM8_CCER_CC3NP, 1 << 11   @ bitWidth 1 (Capture/Compare 3 output  Polarity)  
        .equ TIM8_CCER_CC3NE, 1 << 10   @ bitWidth 1 (Capture/Compare 3 complementary output  enable)  
        .equ TIM8_CCER_CC3P, 1 << 9   @ bitWidth 1 (Capture/Compare 3 output  Polarity)  
        .equ TIM8_CCER_CC3E, 1 << 8   @ bitWidth 1 (Capture/Compare 3 output  enable)  
        .equ TIM8_CCER_CC2NP, 1 << 7   @ bitWidth 1 (Capture/Compare 2 output  Polarity)  
        .equ TIM8_CCER_CC2NE, 1 << 6   @ bitWidth 1 (Capture/Compare 2 complementary output  enable)  
        .equ TIM8_CCER_CC2P, 1 << 5   @ bitWidth 1 (Capture/Compare 2 output  Polarity)  
        .equ TIM8_CCER_CC2E, 1 << 4   @ bitWidth 1 (Capture/Compare 2 output  enable)  
        .equ TIM8_CCER_CC1NP, 1 << 3   @ bitWidth 1 (Capture/Compare 1 output  Polarity)  
        .equ TIM8_CCER_CC1NE, 1 << 2   @ bitWidth 1 (Capture/Compare 1 complementary output  enable)  
        .equ TIM8_CCER_CC1P, 1 << 1   @ bitWidth 1 (Capture/Compare 1 output  Polarity)  
        .equ TIM8_CCER_CC1E, 1 << 0   @ bitWidth 1 (Capture/Compare 1 output  enable)  
 
    .equ TIM8_CNT, TIM8_BASE + 0x24 @ (counter) 
        .equ TIM8_CNT_CNT_Shift, 0   @ bitWidth 16 (counter value)  
 
    .equ TIM8_PSC, TIM8_BASE + 0x28 @ (prescaler) 
        .equ TIM8_PSC_PSC_Shift, 0   @ bitWidth 16 (Prescaler value)  
 
    .equ TIM8_ARR, TIM8_BASE + 0x2C @ (auto-reload register) 
        .equ TIM8_ARR_ARR_Shift, 0   @ bitWidth 16 (Auto-reload value)  
 
    .equ TIM8_CCR1, TIM8_BASE + 0x34 @ (capture/compare register 1) 
        .equ TIM8_CCR1_CCR1_Shift, 0   @ bitWidth 16 (Capture/Compare 1 value)  
 
    .equ TIM8_CCR2, TIM8_BASE + 0x38 @ (capture/compare register 2) 
        .equ TIM8_CCR2_CCR2_Shift, 0   @ bitWidth 16 (Capture/Compare 2 value)  
 
    .equ TIM8_CCR3, TIM8_BASE + 0x3C @ (capture/compare register 3) 
        .equ TIM8_CCR3_CCR3_Shift, 0   @ bitWidth 16 (Capture/Compare value)  
 
    .equ TIM8_CCR4, TIM8_BASE + 0x40 @ (capture/compare register 4) 
        .equ TIM8_CCR4_CCR4_Shift, 0   @ bitWidth 16 (Capture/Compare value)  
 
    .equ TIM8_DCR, TIM8_BASE + 0x48 @ (DMA control register) 
        .equ TIM8_DCR_DBL_Shift, 8   @ bitWidth 5 (DMA burst length)  
        .equ TIM8_DCR_DBA_Shift, 0   @ bitWidth 5 (DMA base address)  
 
    .equ TIM8_DMAR, TIM8_BASE + 0x4C @ (DMA address for full transfer) 
        .equ TIM8_DMAR_DMAB_Shift, 0   @ bitWidth 16 (DMA register for burst  accesses)  
 
    .equ TIM8_RCR, TIM8_BASE + 0x30 @ (repetition counter register) 
        .equ TIM8_RCR_REP_Shift, 0   @ bitWidth 8 (Repetition counter value)  
 
    .equ TIM8_BDTR, TIM8_BASE + 0x44 @ (break and dead-time register) 
        .equ TIM8_BDTR_MOE, 1 << 15   @ bitWidth 1 (Main output enable)  
        .equ TIM8_BDTR_AOE, 1 << 14   @ bitWidth 1 (Automatic output enable)  
        .equ TIM8_BDTR_BKP, 1 << 13   @ bitWidth 1 (Break polarity)  
        .equ TIM8_BDTR_BKE, 1 << 12   @ bitWidth 1 (Break enable)  
        .equ TIM8_BDTR_OSSR, 1 << 11   @ bitWidth 1 (Off-state selection for Run  mode)  
        .equ TIM8_BDTR_OSSI, 1 << 10   @ bitWidth 1 (Off-state selection for Idle  mode)  
        .equ TIM8_BDTR_LOCK_Shift, 8   @ bitWidth 2 (Lock configuration)  
        .equ TIM8_BDTR_DTG_Shift, 0   @ bitWidth 8 (Dead-time generator setup)  
 

@=========================== TIM2 ===========================@
.equ TIM2_BASE, 0x40000000 @ (General purpose timers) 
    .equ TIM2_CR1, TIM2_BASE + 0x0 @ (control register 1) 
        .equ TIM2_CR1_CKD_Shift, 8   @ bitWidth 2 (Clock division)  
        .equ TIM2_CR1_ARPE, 1 << 7   @ bitWidth 1 (Auto-reload preload enable)  
        .equ TIM2_CR1_CMS_Shift, 5   @ bitWidth 2 (Center-aligned mode  selection)  
        .equ TIM2_CR1_DIR, 1 << 4   @ bitWidth 1 (Direction)  
        .equ TIM2_CR1_OPM, 1 << 3   @ bitWidth 1 (One-pulse mode)  
        .equ TIM2_CR1_URS, 1 << 2   @ bitWidth 1 (Update request source)  
        .equ TIM2_CR1_UDIS, 1 << 1   @ bitWidth 1 (Update disable)  
        .equ TIM2_CR1_CEN, 1 << 0   @ bitWidth 1 (Counter enable)  
 
    .equ TIM2_CR2, TIM2_BASE + 0x4 @ (control register 2) 
        .equ TIM2_CR2_TI1S, 1 << 7   @ bitWidth 1 (TI1 selection)  
        .equ TIM2_CR2_MMS_Shift, 4   @ bitWidth 3 (Master mode selection)  
        .equ TIM2_CR2_CCDS, 1 << 3   @ bitWidth 1 (Capture/compare DMA  selection)  
 
    .equ TIM2_SMCR, TIM2_BASE + 0x8 @ (slave mode control register) 
        .equ TIM2_SMCR_ETP, 1 << 15   @ bitWidth 1 (External trigger polarity)  
        .equ TIM2_SMCR_ECE, 1 << 14   @ bitWidth 1 (External clock enable)  
        .equ TIM2_SMCR_ETPS_Shift, 12   @ bitWidth 2 (External trigger prescaler)  
        .equ TIM2_SMCR_ETF_Shift, 8   @ bitWidth 4 (External trigger filter)  
        .equ TIM2_SMCR_MSM, 1 << 7   @ bitWidth 1 (Master/Slave mode)  
        .equ TIM2_SMCR_TS_Shift, 4   @ bitWidth 3 (Trigger selection)  
        .equ TIM2_SMCR_SMS_Shift, 0   @ bitWidth 3 (Slave mode selection)  
 
    .equ TIM2_DIER, TIM2_BASE + 0xC @ (DMA/Interrupt enable register) 
        .equ TIM2_DIER_TDE, 1 << 14   @ bitWidth 1 (Trigger DMA request enable)  
        .equ TIM2_DIER_CC4DE, 1 << 12   @ bitWidth 1 (Capture/Compare 4 DMA request  enable)  
        .equ TIM2_DIER_CC3DE, 1 << 11   @ bitWidth 1 (Capture/Compare 3 DMA request  enable)  
        .equ TIM2_DIER_CC2DE, 1 << 10   @ bitWidth 1 (Capture/Compare 2 DMA request  enable)  
        .equ TIM2_DIER_CC1DE, 1 << 9   @ bitWidth 1 (Capture/Compare 1 DMA request  enable)  
        .equ TIM2_DIER_UDE, 1 << 8   @ bitWidth 1 (Update DMA request enable)  
        .equ TIM2_DIER_TIE, 1 << 6   @ bitWidth 1 (Trigger interrupt enable)  
        .equ TIM2_DIER_CC4IE, 1 << 4   @ bitWidth 1 (Capture/Compare 4 interrupt  enable)  
        .equ TIM2_DIER_CC3IE, 1 << 3   @ bitWidth 1 (Capture/Compare 3 interrupt  enable)  
        .equ TIM2_DIER_CC2IE, 1 << 2   @ bitWidth 1 (Capture/Compare 2 interrupt  enable)  
        .equ TIM2_DIER_CC1IE, 1 << 1   @ bitWidth 1 (Capture/Compare 1 interrupt  enable)  
        .equ TIM2_DIER_UIE, 1 << 0   @ bitWidth 1 (Update interrupt enable)  
 
    .equ TIM2_SR, TIM2_BASE + 0x10 @ (status register) 
        .equ TIM2_SR_CC4OF, 1 << 12   @ bitWidth 1 (Capture/Compare 4 overcapture  flag)  
        .equ TIM2_SR_CC3OF, 1 << 11   @ bitWidth 1 (Capture/Compare 3 overcapture  flag)  
        .equ TIM2_SR_CC2OF, 1 << 10   @ bitWidth 1 (Capture/compare 2 overcapture  flag)  
        .equ TIM2_SR_CC1OF, 1 << 9   @ bitWidth 1 (Capture/Compare 1 overcapture  flag)  
        .equ TIM2_SR_TIF, 1 << 6   @ bitWidth 1 (Trigger interrupt flag)  
        .equ TIM2_SR_CC4IF, 1 << 4   @ bitWidth 1 (Capture/Compare 4 interrupt  flag)  
        .equ TIM2_SR_CC3IF, 1 << 3   @ bitWidth 1 (Capture/Compare 3 interrupt  flag)  
        .equ TIM2_SR_CC2IF, 1 << 2   @ bitWidth 1 (Capture/Compare 2 interrupt  flag)  
        .equ TIM2_SR_CC1IF, 1 << 1   @ bitWidth 1 (Capture/compare 1 interrupt  flag)  
        .equ TIM2_SR_UIF, 1 << 0   @ bitWidth 1 (Update interrupt flag)  
 
    .equ TIM2_EGR, TIM2_BASE + 0x14 @ (event generation register) 
        .equ TIM2_EGR_TG, 1 << 6   @ bitWidth 1 (Trigger generation)  
        .equ TIM2_EGR_CC4G, 1 << 4   @ bitWidth 1 (Capture/compare 4  generation)  
        .equ TIM2_EGR_CC3G, 1 << 3   @ bitWidth 1 (Capture/compare 3  generation)  
        .equ TIM2_EGR_CC2G, 1 << 2   @ bitWidth 1 (Capture/compare 2  generation)  
        .equ TIM2_EGR_CC1G, 1 << 1   @ bitWidth 1 (Capture/compare 1  generation)  
        .equ TIM2_EGR_UG, 1 << 0   @ bitWidth 1 (Update generation)  
 
    .equ TIM2_CCMR1_Output, TIM2_BASE + 0x18 @ (capture/compare mode register 1 output  mode) 
        .equ TIM2_CCMR1_Output_OC2CE, 1 << 15   @ bitWidth 1 (OC2CE)  
        .equ TIM2_CCMR1_Output_OC2M_Shift, 12   @ bitWidth 3 (OC2M)  
        .equ TIM2_CCMR1_Output_OC2PE, 1 << 11   @ bitWidth 1 (OC2PE)  
        .equ TIM2_CCMR1_Output_OC2FE, 1 << 10   @ bitWidth 1 (OC2FE)  
        .equ TIM2_CCMR1_Output_CC2S_Shift, 8   @ bitWidth 2 (CC2S)  
        .equ TIM2_CCMR1_Output_OC1CE, 1 << 7   @ bitWidth 1 (OC1CE)  
        .equ TIM2_CCMR1_Output_OC1M_Shift, 4   @ bitWidth 3 (OC1M)  
        .equ TIM2_CCMR1_Output_OC1PE, 1 << 3   @ bitWidth 1 (OC1PE)  
        .equ TIM2_CCMR1_Output_OC1FE, 1 << 2   @ bitWidth 1 (OC1FE)  
        .equ TIM2_CCMR1_Output_CC1S_Shift, 0   @ bitWidth 2 (CC1S)  
 
    .equ TIM2_CCMR1_Input, TIM2_BASE + 0x18 @ (capture/compare mode register 1 input  mode) 
        .equ TIM2_CCMR1_Input_IC2F_Shift, 12   @ bitWidth 4 (Input capture 2 filter)  
        .equ TIM2_CCMR1_Input_IC2PCS_Shift, 10   @ bitWidth 2 (Input capture 2 prescaler)  
        .equ TIM2_CCMR1_Input_CC2S_Shift, 8   @ bitWidth 2 (Capture/Compare 2  selection)  
        .equ TIM2_CCMR1_Input_IC1F_Shift, 4   @ bitWidth 4 (Input capture 1 filter)  
        .equ TIM2_CCMR1_Input_ICPCS_Shift, 2   @ bitWidth 2 (Input capture 1 prescaler)  
        .equ TIM2_CCMR1_Input_CC1S_Shift, 0   @ bitWidth 2 (Capture/Compare 1  selection)  
 
    .equ TIM2_CCMR2_Output, TIM2_BASE + 0x1C @ (capture/compare mode register 2 output  mode) 
        .equ TIM2_CCMR2_Output_O24CE, 1 << 15   @ bitWidth 1 (O24CE)  
        .equ TIM2_CCMR2_Output_OC4M_Shift, 12   @ bitWidth 3 (OC4M)  
        .equ TIM2_CCMR2_Output_OC4PE, 1 << 11   @ bitWidth 1 (OC4PE)  
        .equ TIM2_CCMR2_Output_OC4FE, 1 << 10   @ bitWidth 1 (OC4FE)  
        .equ TIM2_CCMR2_Output_CC4S_Shift, 8   @ bitWidth 2 (CC4S)  
        .equ TIM2_CCMR2_Output_OC3CE, 1 << 7   @ bitWidth 1 (OC3CE)  
        .equ TIM2_CCMR2_Output_OC3M_Shift, 4   @ bitWidth 3 (OC3M)  
        .equ TIM2_CCMR2_Output_OC3PE, 1 << 3   @ bitWidth 1 (OC3PE)  
        .equ TIM2_CCMR2_Output_OC3FE, 1 << 2   @ bitWidth 1 (OC3FE)  
        .equ TIM2_CCMR2_Output_CC3S_Shift, 0   @ bitWidth 2 (CC3S)  
 
    .equ TIM2_CCMR2_Input, TIM2_BASE + 0x1C @ (capture/compare mode register 2 input  mode) 
        .equ TIM2_CCMR2_Input_IC4F_Shift, 12   @ bitWidth 4 (Input capture 4 filter)  
        .equ TIM2_CCMR2_Input_IC4PSC_Shift, 10   @ bitWidth 2 (Input capture 4 prescaler)  
        .equ TIM2_CCMR2_Input_CC4S_Shift, 8   @ bitWidth 2 (Capture/Compare 4  selection)  
        .equ TIM2_CCMR2_Input_IC3F_Shift, 4   @ bitWidth 4 (Input capture 3 filter)  
        .equ TIM2_CCMR2_Input_IC3PSC_Shift, 2   @ bitWidth 2 (Input capture 3 prescaler)  
        .equ TIM2_CCMR2_Input_CC3S_Shift, 0   @ bitWidth 2 (Capture/compare 3  selection)  
 
    .equ TIM2_CCER, TIM2_BASE + 0x20 @ (capture/compare enable  register) 
        .equ TIM2_CCER_CC4NP, 1 << 15   @ bitWidth 1 (Capture/Compare 4 output  Polarity)  
        .equ TIM2_CCER_CC4P, 1 << 13   @ bitWidth 1 (Capture/Compare 3 output  Polarity)  
        .equ TIM2_CCER_CC4E, 1 << 12   @ bitWidth 1 (Capture/Compare 4 output  enable)  
        .equ TIM2_CCER_CC3NP, 1 << 11   @ bitWidth 1 (Capture/Compare 3 output  Polarity)  
        .equ TIM2_CCER_CC3P, 1 << 9   @ bitWidth 1 (Capture/Compare 3 output  Polarity)  
        .equ TIM2_CCER_CC3E, 1 << 8   @ bitWidth 1 (Capture/Compare 3 output  enable)  
        .equ TIM2_CCER_CC2NP, 1 << 7   @ bitWidth 1 (Capture/Compare 2 output  Polarity)  
        .equ TIM2_CCER_CC2P, 1 << 5   @ bitWidth 1 (Capture/Compare 2 output  Polarity)  
        .equ TIM2_CCER_CC2E, 1 << 4   @ bitWidth 1 (Capture/Compare 2 output  enable)  
        .equ TIM2_CCER_CC1NP, 1 << 3   @ bitWidth 1 (Capture/Compare 1 output  Polarity)  
        .equ TIM2_CCER_CC1P, 1 << 1   @ bitWidth 1 (Capture/Compare 1 output  Polarity)  
        .equ TIM2_CCER_CC1E, 1 << 0   @ bitWidth 1 (Capture/Compare 1 output  enable)  
 
    .equ TIM2_CNT, TIM2_BASE + 0x24 @ (counter) 
        .equ TIM2_CNT_CNT_H_Shift, 16   @ bitWidth 16 (High counter value)  
        .equ TIM2_CNT_CNT_L_Shift, 0   @ bitWidth 16 (Low counter value)  
 
    .equ TIM2_PSC, TIM2_BASE + 0x28 @ (prescaler) 
        .equ TIM2_PSC_PSC_Shift, 0   @ bitWidth 16 (Prescaler value)  
 
    .equ TIM2_ARR, TIM2_BASE + 0x2C @ (auto-reload register) 
        .equ TIM2_ARR_ARR_H_Shift, 16   @ bitWidth 16 (High Auto-reload value)  
        .equ TIM2_ARR_ARR_L_Shift, 0   @ bitWidth 16 (Low Auto-reload value)  
 
    .equ TIM2_CCR1, TIM2_BASE + 0x34 @ (capture/compare register 1) 
        .equ TIM2_CCR1_CCR1_H_Shift, 16   @ bitWidth 16 (High Capture/Compare 1  value)  
        .equ TIM2_CCR1_CCR1_L_Shift, 0   @ bitWidth 16 (Low Capture/Compare 1  value)  
 
    .equ TIM2_CCR2, TIM2_BASE + 0x38 @ (capture/compare register 2) 
        .equ TIM2_CCR2_CCR2_H_Shift, 16   @ bitWidth 16 (High Capture/Compare 2  value)  
        .equ TIM2_CCR2_CCR2_L_Shift, 0   @ bitWidth 16 (Low Capture/Compare 2  value)  
 
    .equ TIM2_CCR3, TIM2_BASE + 0x3C @ (capture/compare register 3) 
        .equ TIM2_CCR3_CCR3_H_Shift, 16   @ bitWidth 16 (High Capture/Compare value)  
        .equ TIM2_CCR3_CCR3_L_Shift, 0   @ bitWidth 16 (Low Capture/Compare value)  
 
    .equ TIM2_CCR4, TIM2_BASE + 0x40 @ (capture/compare register 4) 
        .equ TIM2_CCR4_CCR4_H_Shift, 16   @ bitWidth 16 (High Capture/Compare value)  
        .equ TIM2_CCR4_CCR4_L_Shift, 0   @ bitWidth 16 (Low Capture/Compare value)  
 
    .equ TIM2_DCR, TIM2_BASE + 0x48 @ (DMA control register) 
        .equ TIM2_DCR_DBL_Shift, 8   @ bitWidth 5 (DMA burst length)  
        .equ TIM2_DCR_DBA_Shift, 0   @ bitWidth 5 (DMA base address)  
 
    .equ TIM2_DMAR, TIM2_BASE + 0x4C @ (DMA address for full transfer) 
        .equ TIM2_DMAR_DMAB_Shift, 0   @ bitWidth 16 (DMA register for burst  accesses)  
 
    .equ TIM2_OR, TIM2_BASE + 0x50 @ (TIM5 option register) 
        .equ TIM2_OR_ITR1_RMP_Shift, 10   @ bitWidth 2 (Timer Input 4 remap)  
 

@=========================== TIM3 ===========================@
.equ TIM3_BASE, 0x40000400 @ (General purpose timers) 
    .equ TIM3_CR1, TIM3_BASE + 0x0 @ (control register 1) 
        .equ TIM3_CR1_CKD_Shift, 8   @ bitWidth 2 (Clock division)  
        .equ TIM3_CR1_ARPE, 1 << 7   @ bitWidth 1 (Auto-reload preload enable)  
        .equ TIM3_CR1_CMS_Shift, 5   @ bitWidth 2 (Center-aligned mode  selection)  
        .equ TIM3_CR1_DIR, 1 << 4   @ bitWidth 1 (Direction)  
        .equ TIM3_CR1_OPM, 1 << 3   @ bitWidth 1 (One-pulse mode)  
        .equ TIM3_CR1_URS, 1 << 2   @ bitWidth 1 (Update request source)  
        .equ TIM3_CR1_UDIS, 1 << 1   @ bitWidth 1 (Update disable)  
        .equ TIM3_CR1_CEN, 1 << 0   @ bitWidth 1 (Counter enable)  
 
    .equ TIM3_CR2, TIM3_BASE + 0x4 @ (control register 2) 
        .equ TIM3_CR2_TI1S, 1 << 7   @ bitWidth 1 (TI1 selection)  
        .equ TIM3_CR2_MMS_Shift, 4   @ bitWidth 3 (Master mode selection)  
        .equ TIM3_CR2_CCDS, 1 << 3   @ bitWidth 1 (Capture/compare DMA  selection)  
 
    .equ TIM3_SMCR, TIM3_BASE + 0x8 @ (slave mode control register) 
        .equ TIM3_SMCR_ETP, 1 << 15   @ bitWidth 1 (External trigger polarity)  
        .equ TIM3_SMCR_ECE, 1 << 14   @ bitWidth 1 (External clock enable)  
        .equ TIM3_SMCR_ETPS_Shift, 12   @ bitWidth 2 (External trigger prescaler)  
        .equ TIM3_SMCR_ETF_Shift, 8   @ bitWidth 4 (External trigger filter)  
        .equ TIM3_SMCR_MSM, 1 << 7   @ bitWidth 1 (Master/Slave mode)  
        .equ TIM3_SMCR_TS_Shift, 4   @ bitWidth 3 (Trigger selection)  
        .equ TIM3_SMCR_SMS_Shift, 0   @ bitWidth 3 (Slave mode selection)  
 
    .equ TIM3_DIER, TIM3_BASE + 0xC @ (DMA/Interrupt enable register) 
        .equ TIM3_DIER_TDE, 1 << 14   @ bitWidth 1 (Trigger DMA request enable)  
        .equ TIM3_DIER_CC4DE, 1 << 12   @ bitWidth 1 (Capture/Compare 4 DMA request  enable)  
        .equ TIM3_DIER_CC3DE, 1 << 11   @ bitWidth 1 (Capture/Compare 3 DMA request  enable)  
        .equ TIM3_DIER_CC2DE, 1 << 10   @ bitWidth 1 (Capture/Compare 2 DMA request  enable)  
        .equ TIM3_DIER_CC1DE, 1 << 9   @ bitWidth 1 (Capture/Compare 1 DMA request  enable)  
        .equ TIM3_DIER_UDE, 1 << 8   @ bitWidth 1 (Update DMA request enable)  
        .equ TIM3_DIER_TIE, 1 << 6   @ bitWidth 1 (Trigger interrupt enable)  
        .equ TIM3_DIER_CC4IE, 1 << 4   @ bitWidth 1 (Capture/Compare 4 interrupt  enable)  
        .equ TIM3_DIER_CC3IE, 1 << 3   @ bitWidth 1 (Capture/Compare 3 interrupt  enable)  
        .equ TIM3_DIER_CC2IE, 1 << 2   @ bitWidth 1 (Capture/Compare 2 interrupt  enable)  
        .equ TIM3_DIER_CC1IE, 1 << 1   @ bitWidth 1 (Capture/Compare 1 interrupt  enable)  
        .equ TIM3_DIER_UIE, 1 << 0   @ bitWidth 1 (Update interrupt enable)  
 
    .equ TIM3_SR, TIM3_BASE + 0x10 @ (status register) 
        .equ TIM3_SR_CC4OF, 1 << 12   @ bitWidth 1 (Capture/Compare 4 overcapture  flag)  
        .equ TIM3_SR_CC3OF, 1 << 11   @ bitWidth 1 (Capture/Compare 3 overcapture  flag)  
        .equ TIM3_SR_CC2OF, 1 << 10   @ bitWidth 1 (Capture/compare 2 overcapture  flag)  
        .equ TIM3_SR_CC1OF, 1 << 9   @ bitWidth 1 (Capture/Compare 1 overcapture  flag)  
        .equ TIM3_SR_TIF, 1 << 6   @ bitWidth 1 (Trigger interrupt flag)  
        .equ TIM3_SR_CC4IF, 1 << 4   @ bitWidth 1 (Capture/Compare 4 interrupt  flag)  
        .equ TIM3_SR_CC3IF, 1 << 3   @ bitWidth 1 (Capture/Compare 3 interrupt  flag)  
        .equ TIM3_SR_CC2IF, 1 << 2   @ bitWidth 1 (Capture/Compare 2 interrupt  flag)  
        .equ TIM3_SR_CC1IF, 1 << 1   @ bitWidth 1 (Capture/compare 1 interrupt  flag)  
        .equ TIM3_SR_UIF, 1 << 0   @ bitWidth 1 (Update interrupt flag)  
 
    .equ TIM3_EGR, TIM3_BASE + 0x14 @ (event generation register) 
        .equ TIM3_EGR_TG, 1 << 6   @ bitWidth 1 (Trigger generation)  
        .equ TIM3_EGR_CC4G, 1 << 4   @ bitWidth 1 (Capture/compare 4  generation)  
        .equ TIM3_EGR_CC3G, 1 << 3   @ bitWidth 1 (Capture/compare 3  generation)  
        .equ TIM3_EGR_CC2G, 1 << 2   @ bitWidth 1 (Capture/compare 2  generation)  
        .equ TIM3_EGR_CC1G, 1 << 1   @ bitWidth 1 (Capture/compare 1  generation)  
        .equ TIM3_EGR_UG, 1 << 0   @ bitWidth 1 (Update generation)  
 
    .equ TIM3_CCMR1_Output, TIM3_BASE + 0x18 @ (capture/compare mode register 1 output  mode) 
        .equ TIM3_CCMR1_Output_OC2CE, 1 << 15   @ bitWidth 1 (OC2CE)  
        .equ TIM3_CCMR1_Output_OC2M_Shift, 12   @ bitWidth 3 (OC2M)  
        .equ TIM3_CCMR1_Output_OC2PE, 1 << 11   @ bitWidth 1 (OC2PE)  
        .equ TIM3_CCMR1_Output_OC2FE, 1 << 10   @ bitWidth 1 (OC2FE)  
        .equ TIM3_CCMR1_Output_CC2S_Shift, 8   @ bitWidth 2 (CC2S)  
        .equ TIM3_CCMR1_Output_OC1CE, 1 << 7   @ bitWidth 1 (OC1CE)  
        .equ TIM3_CCMR1_Output_OC1M_Shift, 4   @ bitWidth 3 (OC1M)  
        .equ TIM3_CCMR1_Output_OC1PE, 1 << 3   @ bitWidth 1 (OC1PE)  
        .equ TIM3_CCMR1_Output_OC1FE, 1 << 2   @ bitWidth 1 (OC1FE)  
        .equ TIM3_CCMR1_Output_CC1S_Shift, 0   @ bitWidth 2 (CC1S)  
 
    .equ TIM3_CCMR1_Input, TIM3_BASE + 0x18 @ (capture/compare mode register 1 input  mode) 
        .equ TIM3_CCMR1_Input_IC2F_Shift, 12   @ bitWidth 4 (Input capture 2 filter)  
        .equ TIM3_CCMR1_Input_IC2PCS_Shift, 10   @ bitWidth 2 (Input capture 2 prescaler)  
        .equ TIM3_CCMR1_Input_CC2S_Shift, 8   @ bitWidth 2 (Capture/Compare 2  selection)  
        .equ TIM3_CCMR1_Input_IC1F_Shift, 4   @ bitWidth 4 (Input capture 1 filter)  
        .equ TIM3_CCMR1_Input_ICPCS_Shift, 2   @ bitWidth 2 (Input capture 1 prescaler)  
        .equ TIM3_CCMR1_Input_CC1S_Shift, 0   @ bitWidth 2 (Capture/Compare 1  selection)  
 
    .equ TIM3_CCMR2_Output, TIM3_BASE + 0x1C @ (capture/compare mode register 2 output  mode) 
        .equ TIM3_CCMR2_Output_O24CE, 1 << 15   @ bitWidth 1 (O24CE)  
        .equ TIM3_CCMR2_Output_OC4M_Shift, 12   @ bitWidth 3 (OC4M)  
        .equ TIM3_CCMR2_Output_OC4PE, 1 << 11   @ bitWidth 1 (OC4PE)  
        .equ TIM3_CCMR2_Output_OC4FE, 1 << 10   @ bitWidth 1 (OC4FE)  
        .equ TIM3_CCMR2_Output_CC4S_Shift, 8   @ bitWidth 2 (CC4S)  
        .equ TIM3_CCMR2_Output_OC3CE, 1 << 7   @ bitWidth 1 (OC3CE)  
        .equ TIM3_CCMR2_Output_OC3M_Shift, 4   @ bitWidth 3 (OC3M)  
        .equ TIM3_CCMR2_Output_OC3PE, 1 << 3   @ bitWidth 1 (OC3PE)  
        .equ TIM3_CCMR2_Output_OC3FE, 1 << 2   @ bitWidth 1 (OC3FE)  
        .equ TIM3_CCMR2_Output_CC3S_Shift, 0   @ bitWidth 2 (CC3S)  
 
    .equ TIM3_CCMR2_Input, TIM3_BASE + 0x1C @ (capture/compare mode register 2 input  mode) 
        .equ TIM3_CCMR2_Input_IC4F_Shift, 12   @ bitWidth 4 (Input capture 4 filter)  
        .equ TIM3_CCMR2_Input_IC4PSC_Shift, 10   @ bitWidth 2 (Input capture 4 prescaler)  
        .equ TIM3_CCMR2_Input_CC4S_Shift, 8   @ bitWidth 2 (Capture/Compare 4  selection)  
        .equ TIM3_CCMR2_Input_IC3F_Shift, 4   @ bitWidth 4 (Input capture 3 filter)  
        .equ TIM3_CCMR2_Input_IC3PSC_Shift, 2   @ bitWidth 2 (Input capture 3 prescaler)  
        .equ TIM3_CCMR2_Input_CC3S_Shift, 0   @ bitWidth 2 (Capture/compare 3  selection)  
 
    .equ TIM3_CCER, TIM3_BASE + 0x20 @ (capture/compare enable  register) 
        .equ TIM3_CCER_CC4NP, 1 << 15   @ bitWidth 1 (Capture/Compare 4 output  Polarity)  
        .equ TIM3_CCER_CC4P, 1 << 13   @ bitWidth 1 (Capture/Compare 3 output  Polarity)  
        .equ TIM3_CCER_CC4E, 1 << 12   @ bitWidth 1 (Capture/Compare 4 output  enable)  
        .equ TIM3_CCER_CC3NP, 1 << 11   @ bitWidth 1 (Capture/Compare 3 output  Polarity)  
        .equ TIM3_CCER_CC3P, 1 << 9   @ bitWidth 1 (Capture/Compare 3 output  Polarity)  
        .equ TIM3_CCER_CC3E, 1 << 8   @ bitWidth 1 (Capture/Compare 3 output  enable)  
        .equ TIM3_CCER_CC2NP, 1 << 7   @ bitWidth 1 (Capture/Compare 2 output  Polarity)  
        .equ TIM3_CCER_CC2P, 1 << 5   @ bitWidth 1 (Capture/Compare 2 output  Polarity)  
        .equ TIM3_CCER_CC2E, 1 << 4   @ bitWidth 1 (Capture/Compare 2 output  enable)  
        .equ TIM3_CCER_CC1NP, 1 << 3   @ bitWidth 1 (Capture/Compare 1 output  Polarity)  
        .equ TIM3_CCER_CC1P, 1 << 1   @ bitWidth 1 (Capture/Compare 1 output  Polarity)  
        .equ TIM3_CCER_CC1E, 1 << 0   @ bitWidth 1 (Capture/Compare 1 output  enable)  
 
    .equ TIM3_CNT, TIM3_BASE + 0x24 @ (counter) 
        .equ TIM3_CNT_CNT_H_Shift, 16   @ bitWidth 16 (High counter value)  
        .equ TIM3_CNT_CNT_L_Shift, 0   @ bitWidth 16 (Low counter value)  
 
    .equ TIM3_PSC, TIM3_BASE + 0x28 @ (prescaler) 
        .equ TIM3_PSC_PSC_Shift, 0   @ bitWidth 16 (Prescaler value)  
 
    .equ TIM3_ARR, TIM3_BASE + 0x2C @ (auto-reload register) 
        .equ TIM3_ARR_ARR_H_Shift, 16   @ bitWidth 16 (High Auto-reload value)  
        .equ TIM3_ARR_ARR_L_Shift, 0   @ bitWidth 16 (Low Auto-reload value)  
 
    .equ TIM3_CCR1, TIM3_BASE + 0x34 @ (capture/compare register 1) 
        .equ TIM3_CCR1_CCR1_H_Shift, 16   @ bitWidth 16 (High Capture/Compare 1  value)  
        .equ TIM3_CCR1_CCR1_L_Shift, 0   @ bitWidth 16 (Low Capture/Compare 1  value)  
 
    .equ TIM3_CCR2, TIM3_BASE + 0x38 @ (capture/compare register 2) 
        .equ TIM3_CCR2_CCR2_H_Shift, 16   @ bitWidth 16 (High Capture/Compare 2  value)  
        .equ TIM3_CCR2_CCR2_L_Shift, 0   @ bitWidth 16 (Low Capture/Compare 2  value)  
 
    .equ TIM3_CCR3, TIM3_BASE + 0x3C @ (capture/compare register 3) 
        .equ TIM3_CCR3_CCR3_H_Shift, 16   @ bitWidth 16 (High Capture/Compare value)  
        .equ TIM3_CCR3_CCR3_L_Shift, 0   @ bitWidth 16 (Low Capture/Compare value)  
 
    .equ TIM3_CCR4, TIM3_BASE + 0x40 @ (capture/compare register 4) 
        .equ TIM3_CCR4_CCR4_H_Shift, 16   @ bitWidth 16 (High Capture/Compare value)  
        .equ TIM3_CCR4_CCR4_L_Shift, 0   @ bitWidth 16 (Low Capture/Compare value)  
 
    .equ TIM3_DCR, TIM3_BASE + 0x48 @ (DMA control register) 
        .equ TIM3_DCR_DBL_Shift, 8   @ bitWidth 5 (DMA burst length)  
        .equ TIM3_DCR_DBA_Shift, 0   @ bitWidth 5 (DMA base address)  
 
    .equ TIM3_DMAR, TIM3_BASE + 0x4C @ (DMA address for full transfer) 
        .equ TIM3_DMAR_DMAB_Shift, 0   @ bitWidth 16 (DMA register for burst  accesses)  
 

@=========================== TIM4 ===========================@
.equ TIM4_BASE, 0x40000800 @ (General purpose timers) 
    .equ TIM4_CR1, TIM4_BASE + 0x0 @ (control register 1) 
        .equ TIM4_CR1_CKD_Shift, 8   @ bitWidth 2 (Clock division)  
        .equ TIM4_CR1_ARPE, 1 << 7   @ bitWidth 1 (Auto-reload preload enable)  
        .equ TIM4_CR1_CMS_Shift, 5   @ bitWidth 2 (Center-aligned mode  selection)  
        .equ TIM4_CR1_DIR, 1 << 4   @ bitWidth 1 (Direction)  
        .equ TIM4_CR1_OPM, 1 << 3   @ bitWidth 1 (One-pulse mode)  
        .equ TIM4_CR1_URS, 1 << 2   @ bitWidth 1 (Update request source)  
        .equ TIM4_CR1_UDIS, 1 << 1   @ bitWidth 1 (Update disable)  
        .equ TIM4_CR1_CEN, 1 << 0   @ bitWidth 1 (Counter enable)  
 
    .equ TIM4_CR2, TIM4_BASE + 0x4 @ (control register 2) 
        .equ TIM4_CR2_TI1S, 1 << 7   @ bitWidth 1 (TI1 selection)  
        .equ TIM4_CR2_MMS_Shift, 4   @ bitWidth 3 (Master mode selection)  
        .equ TIM4_CR2_CCDS, 1 << 3   @ bitWidth 1 (Capture/compare DMA  selection)  
 
    .equ TIM4_SMCR, TIM4_BASE + 0x8 @ (slave mode control register) 
        .equ TIM4_SMCR_ETP, 1 << 15   @ bitWidth 1 (External trigger polarity)  
        .equ TIM4_SMCR_ECE, 1 << 14   @ bitWidth 1 (External clock enable)  
        .equ TIM4_SMCR_ETPS_Shift, 12   @ bitWidth 2 (External trigger prescaler)  
        .equ TIM4_SMCR_ETF_Shift, 8   @ bitWidth 4 (External trigger filter)  
        .equ TIM4_SMCR_MSM, 1 << 7   @ bitWidth 1 (Master/Slave mode)  
        .equ TIM4_SMCR_TS_Shift, 4   @ bitWidth 3 (Trigger selection)  
        .equ TIM4_SMCR_SMS_Shift, 0   @ bitWidth 3 (Slave mode selection)  
 
    .equ TIM4_DIER, TIM4_BASE + 0xC @ (DMA/Interrupt enable register) 
        .equ TIM4_DIER_TDE, 1 << 14   @ bitWidth 1 (Trigger DMA request enable)  
        .equ TIM4_DIER_CC4DE, 1 << 12   @ bitWidth 1 (Capture/Compare 4 DMA request  enable)  
        .equ TIM4_DIER_CC3DE, 1 << 11   @ bitWidth 1 (Capture/Compare 3 DMA request  enable)  
        .equ TIM4_DIER_CC2DE, 1 << 10   @ bitWidth 1 (Capture/Compare 2 DMA request  enable)  
        .equ TIM4_DIER_CC1DE, 1 << 9   @ bitWidth 1 (Capture/Compare 1 DMA request  enable)  
        .equ TIM4_DIER_UDE, 1 << 8   @ bitWidth 1 (Update DMA request enable)  
        .equ TIM4_DIER_TIE, 1 << 6   @ bitWidth 1 (Trigger interrupt enable)  
        .equ TIM4_DIER_CC4IE, 1 << 4   @ bitWidth 1 (Capture/Compare 4 interrupt  enable)  
        .equ TIM4_DIER_CC3IE, 1 << 3   @ bitWidth 1 (Capture/Compare 3 interrupt  enable)  
        .equ TIM4_DIER_CC2IE, 1 << 2   @ bitWidth 1 (Capture/Compare 2 interrupt  enable)  
        .equ TIM4_DIER_CC1IE, 1 << 1   @ bitWidth 1 (Capture/Compare 1 interrupt  enable)  
        .equ TIM4_DIER_UIE, 1 << 0   @ bitWidth 1 (Update interrupt enable)  
 
    .equ TIM4_SR, TIM4_BASE + 0x10 @ (status register) 
        .equ TIM4_SR_CC4OF, 1 << 12   @ bitWidth 1 (Capture/Compare 4 overcapture  flag)  
        .equ TIM4_SR_CC3OF, 1 << 11   @ bitWidth 1 (Capture/Compare 3 overcapture  flag)  
        .equ TIM4_SR_CC2OF, 1 << 10   @ bitWidth 1 (Capture/compare 2 overcapture  flag)  
        .equ TIM4_SR_CC1OF, 1 << 9   @ bitWidth 1 (Capture/Compare 1 overcapture  flag)  
        .equ TIM4_SR_TIF, 1 << 6   @ bitWidth 1 (Trigger interrupt flag)  
        .equ TIM4_SR_CC4IF, 1 << 4   @ bitWidth 1 (Capture/Compare 4 interrupt  flag)  
        .equ TIM4_SR_CC3IF, 1 << 3   @ bitWidth 1 (Capture/Compare 3 interrupt  flag)  
        .equ TIM4_SR_CC2IF, 1 << 2   @ bitWidth 1 (Capture/Compare 2 interrupt  flag)  
        .equ TIM4_SR_CC1IF, 1 << 1   @ bitWidth 1 (Capture/compare 1 interrupt  flag)  
        .equ TIM4_SR_UIF, 1 << 0   @ bitWidth 1 (Update interrupt flag)  
 
    .equ TIM4_EGR, TIM4_BASE + 0x14 @ (event generation register) 
        .equ TIM4_EGR_TG, 1 << 6   @ bitWidth 1 (Trigger generation)  
        .equ TIM4_EGR_CC4G, 1 << 4   @ bitWidth 1 (Capture/compare 4  generation)  
        .equ TIM4_EGR_CC3G, 1 << 3   @ bitWidth 1 (Capture/compare 3  generation)  
        .equ TIM4_EGR_CC2G, 1 << 2   @ bitWidth 1 (Capture/compare 2  generation)  
        .equ TIM4_EGR_CC1G, 1 << 1   @ bitWidth 1 (Capture/compare 1  generation)  
        .equ TIM4_EGR_UG, 1 << 0   @ bitWidth 1 (Update generation)  
 
    .equ TIM4_CCMR1_Output, TIM4_BASE + 0x18 @ (capture/compare mode register 1 output  mode) 
        .equ TIM4_CCMR1_Output_OC2CE, 1 << 15   @ bitWidth 1 (OC2CE)  
        .equ TIM4_CCMR1_Output_OC2M_Shift, 12   @ bitWidth 3 (OC2M)  
        .equ TIM4_CCMR1_Output_OC2PE, 1 << 11   @ bitWidth 1 (OC2PE)  
        .equ TIM4_CCMR1_Output_OC2FE, 1 << 10   @ bitWidth 1 (OC2FE)  
        .equ TIM4_CCMR1_Output_CC2S_Shift, 8   @ bitWidth 2 (CC2S)  
        .equ TIM4_CCMR1_Output_OC1CE, 1 << 7   @ bitWidth 1 (OC1CE)  
        .equ TIM4_CCMR1_Output_OC1M_Shift, 4   @ bitWidth 3 (OC1M)  
        .equ TIM4_CCMR1_Output_OC1PE, 1 << 3   @ bitWidth 1 (OC1PE)  
        .equ TIM4_CCMR1_Output_OC1FE, 1 << 2   @ bitWidth 1 (OC1FE)  
        .equ TIM4_CCMR1_Output_CC1S_Shift, 0   @ bitWidth 2 (CC1S)  
 
    .equ TIM4_CCMR1_Input, TIM4_BASE + 0x18 @ (capture/compare mode register 1 input  mode) 
        .equ TIM4_CCMR1_Input_IC2F_Shift, 12   @ bitWidth 4 (Input capture 2 filter)  
        .equ TIM4_CCMR1_Input_IC2PCS_Shift, 10   @ bitWidth 2 (Input capture 2 prescaler)  
        .equ TIM4_CCMR1_Input_CC2S_Shift, 8   @ bitWidth 2 (Capture/Compare 2  selection)  
        .equ TIM4_CCMR1_Input_IC1F_Shift, 4   @ bitWidth 4 (Input capture 1 filter)  
        .equ TIM4_CCMR1_Input_ICPCS_Shift, 2   @ bitWidth 2 (Input capture 1 prescaler)  
        .equ TIM4_CCMR1_Input_CC1S_Shift, 0   @ bitWidth 2 (Capture/Compare 1  selection)  
 
    .equ TIM4_CCMR2_Output, TIM4_BASE + 0x1C @ (capture/compare mode register 2 output  mode) 
        .equ TIM4_CCMR2_Output_O24CE, 1 << 15   @ bitWidth 1 (O24CE)  
        .equ TIM4_CCMR2_Output_OC4M_Shift, 12   @ bitWidth 3 (OC4M)  
        .equ TIM4_CCMR2_Output_OC4PE, 1 << 11   @ bitWidth 1 (OC4PE)  
        .equ TIM4_CCMR2_Output_OC4FE, 1 << 10   @ bitWidth 1 (OC4FE)  
        .equ TIM4_CCMR2_Output_CC4S_Shift, 8   @ bitWidth 2 (CC4S)  
        .equ TIM4_CCMR2_Output_OC3CE, 1 << 7   @ bitWidth 1 (OC3CE)  
        .equ TIM4_CCMR2_Output_OC3M_Shift, 4   @ bitWidth 3 (OC3M)  
        .equ TIM4_CCMR2_Output_OC3PE, 1 << 3   @ bitWidth 1 (OC3PE)  
        .equ TIM4_CCMR2_Output_OC3FE, 1 << 2   @ bitWidth 1 (OC3FE)  
        .equ TIM4_CCMR2_Output_CC3S_Shift, 0   @ bitWidth 2 (CC3S)  
 
    .equ TIM4_CCMR2_Input, TIM4_BASE + 0x1C @ (capture/compare mode register 2 input  mode) 
        .equ TIM4_CCMR2_Input_IC4F_Shift, 12   @ bitWidth 4 (Input capture 4 filter)  
        .equ TIM4_CCMR2_Input_IC4PSC_Shift, 10   @ bitWidth 2 (Input capture 4 prescaler)  
        .equ TIM4_CCMR2_Input_CC4S_Shift, 8   @ bitWidth 2 (Capture/Compare 4  selection)  
        .equ TIM4_CCMR2_Input_IC3F_Shift, 4   @ bitWidth 4 (Input capture 3 filter)  
        .equ TIM4_CCMR2_Input_IC3PSC_Shift, 2   @ bitWidth 2 (Input capture 3 prescaler)  
        .equ TIM4_CCMR2_Input_CC3S_Shift, 0   @ bitWidth 2 (Capture/compare 3  selection)  
 
    .equ TIM4_CCER, TIM4_BASE + 0x20 @ (capture/compare enable  register) 
        .equ TIM4_CCER_CC4NP, 1 << 15   @ bitWidth 1 (Capture/Compare 4 output  Polarity)  
        .equ TIM4_CCER_CC4P, 1 << 13   @ bitWidth 1 (Capture/Compare 3 output  Polarity)  
        .equ TIM4_CCER_CC4E, 1 << 12   @ bitWidth 1 (Capture/Compare 4 output  enable)  
        .equ TIM4_CCER_CC3NP, 1 << 11   @ bitWidth 1 (Capture/Compare 3 output  Polarity)  
        .equ TIM4_CCER_CC3P, 1 << 9   @ bitWidth 1 (Capture/Compare 3 output  Polarity)  
        .equ TIM4_CCER_CC3E, 1 << 8   @ bitWidth 1 (Capture/Compare 3 output  enable)  
        .equ TIM4_CCER_CC2NP, 1 << 7   @ bitWidth 1 (Capture/Compare 2 output  Polarity)  
        .equ TIM4_CCER_CC2P, 1 << 5   @ bitWidth 1 (Capture/Compare 2 output  Polarity)  
        .equ TIM4_CCER_CC2E, 1 << 4   @ bitWidth 1 (Capture/Compare 2 output  enable)  
        .equ TIM4_CCER_CC1NP, 1 << 3   @ bitWidth 1 (Capture/Compare 1 output  Polarity)  
        .equ TIM4_CCER_CC1P, 1 << 1   @ bitWidth 1 (Capture/Compare 1 output  Polarity)  
        .equ TIM4_CCER_CC1E, 1 << 0   @ bitWidth 1 (Capture/Compare 1 output  enable)  
 
    .equ TIM4_CNT, TIM4_BASE + 0x24 @ (counter) 
        .equ TIM4_CNT_CNT_H_Shift, 16   @ bitWidth 16 (High counter value)  
        .equ TIM4_CNT_CNT_L_Shift, 0   @ bitWidth 16 (Low counter value)  
 
    .equ TIM4_PSC, TIM4_BASE + 0x28 @ (prescaler) 
        .equ TIM4_PSC_PSC_Shift, 0   @ bitWidth 16 (Prescaler value)  
 
    .equ TIM4_ARR, TIM4_BASE + 0x2C @ (auto-reload register) 
        .equ TIM4_ARR_ARR_H_Shift, 16   @ bitWidth 16 (High Auto-reload value)  
        .equ TIM4_ARR_ARR_L_Shift, 0   @ bitWidth 16 (Low Auto-reload value)  
 
    .equ TIM4_CCR1, TIM4_BASE + 0x34 @ (capture/compare register 1) 
        .equ TIM4_CCR1_CCR1_H_Shift, 16   @ bitWidth 16 (High Capture/Compare 1  value)  
        .equ TIM4_CCR1_CCR1_L_Shift, 0   @ bitWidth 16 (Low Capture/Compare 1  value)  
 
    .equ TIM4_CCR2, TIM4_BASE + 0x38 @ (capture/compare register 2) 
        .equ TIM4_CCR2_CCR2_H_Shift, 16   @ bitWidth 16 (High Capture/Compare 2  value)  
        .equ TIM4_CCR2_CCR2_L_Shift, 0   @ bitWidth 16 (Low Capture/Compare 2  value)  
 
    .equ TIM4_CCR3, TIM4_BASE + 0x3C @ (capture/compare register 3) 
        .equ TIM4_CCR3_CCR3_H_Shift, 16   @ bitWidth 16 (High Capture/Compare value)  
        .equ TIM4_CCR3_CCR3_L_Shift, 0   @ bitWidth 16 (Low Capture/Compare value)  
 
    .equ TIM4_CCR4, TIM4_BASE + 0x40 @ (capture/compare register 4) 
        .equ TIM4_CCR4_CCR4_H_Shift, 16   @ bitWidth 16 (High Capture/Compare value)  
        .equ TIM4_CCR4_CCR4_L_Shift, 0   @ bitWidth 16 (Low Capture/Compare value)  
 
    .equ TIM4_DCR, TIM4_BASE + 0x48 @ (DMA control register) 
        .equ TIM4_DCR_DBL_Shift, 8   @ bitWidth 5 (DMA burst length)  
        .equ TIM4_DCR_DBA_Shift, 0   @ bitWidth 5 (DMA base address)  
 
    .equ TIM4_DMAR, TIM4_BASE + 0x4C @ (DMA address for full transfer) 
        .equ TIM4_DMAR_DMAB_Shift, 0   @ bitWidth 16 (DMA register for burst  accesses)  
 

@=========================== TIM5 ===========================@
.equ TIM5_BASE, 0x40000C00 @ (General-purpose-timers) 
    .equ TIM5_CR1, TIM5_BASE + 0x0 @ (control register 1) 
        .equ TIM5_CR1_CKD_Shift, 8   @ bitWidth 2 (Clock division)  
        .equ TIM5_CR1_ARPE, 1 << 7   @ bitWidth 1 (Auto-reload preload enable)  
        .equ TIM5_CR1_CMS_Shift, 5   @ bitWidth 2 (Center-aligned mode  selection)  
        .equ TIM5_CR1_DIR, 1 << 4   @ bitWidth 1 (Direction)  
        .equ TIM5_CR1_OPM, 1 << 3   @ bitWidth 1 (One-pulse mode)  
        .equ TIM5_CR1_URS, 1 << 2   @ bitWidth 1 (Update request source)  
        .equ TIM5_CR1_UDIS, 1 << 1   @ bitWidth 1 (Update disable)  
        .equ TIM5_CR1_CEN, 1 << 0   @ bitWidth 1 (Counter enable)  
 
    .equ TIM5_CR2, TIM5_BASE + 0x4 @ (control register 2) 
        .equ TIM5_CR2_TI1S, 1 << 7   @ bitWidth 1 (TI1 selection)  
        .equ TIM5_CR2_MMS_Shift, 4   @ bitWidth 3 (Master mode selection)  
        .equ TIM5_CR2_CCDS, 1 << 3   @ bitWidth 1 (Capture/compare DMA  selection)  
 
    .equ TIM5_SMCR, TIM5_BASE + 0x8 @ (slave mode control register) 
        .equ TIM5_SMCR_ETP, 1 << 15   @ bitWidth 1 (External trigger polarity)  
        .equ TIM5_SMCR_ECE, 1 << 14   @ bitWidth 1 (External clock enable)  
        .equ TIM5_SMCR_ETPS_Shift, 12   @ bitWidth 2 (External trigger prescaler)  
        .equ TIM5_SMCR_ETF_Shift, 8   @ bitWidth 4 (External trigger filter)  
        .equ TIM5_SMCR_MSM, 1 << 7   @ bitWidth 1 (Master/Slave mode)  
        .equ TIM5_SMCR_TS_Shift, 4   @ bitWidth 3 (Trigger selection)  
        .equ TIM5_SMCR_SMS_Shift, 0   @ bitWidth 3 (Slave mode selection)  
 
    .equ TIM5_DIER, TIM5_BASE + 0xC @ (DMA/Interrupt enable register) 
        .equ TIM5_DIER_TDE, 1 << 14   @ bitWidth 1 (Trigger DMA request enable)  
        .equ TIM5_DIER_CC4DE, 1 << 12   @ bitWidth 1 (Capture/Compare 4 DMA request  enable)  
        .equ TIM5_DIER_CC3DE, 1 << 11   @ bitWidth 1 (Capture/Compare 3 DMA request  enable)  
        .equ TIM5_DIER_CC2DE, 1 << 10   @ bitWidth 1 (Capture/Compare 2 DMA request  enable)  
        .equ TIM5_DIER_CC1DE, 1 << 9   @ bitWidth 1 (Capture/Compare 1 DMA request  enable)  
        .equ TIM5_DIER_UDE, 1 << 8   @ bitWidth 1 (Update DMA request enable)  
        .equ TIM5_DIER_TIE, 1 << 6   @ bitWidth 1 (Trigger interrupt enable)  
        .equ TIM5_DIER_CC4IE, 1 << 4   @ bitWidth 1 (Capture/Compare 4 interrupt  enable)  
        .equ TIM5_DIER_CC3IE, 1 << 3   @ bitWidth 1 (Capture/Compare 3 interrupt  enable)  
        .equ TIM5_DIER_CC2IE, 1 << 2   @ bitWidth 1 (Capture/Compare 2 interrupt  enable)  
        .equ TIM5_DIER_CC1IE, 1 << 1   @ bitWidth 1 (Capture/Compare 1 interrupt  enable)  
        .equ TIM5_DIER_UIE, 1 << 0   @ bitWidth 1 (Update interrupt enable)  
 
    .equ TIM5_SR, TIM5_BASE + 0x10 @ (status register) 
        .equ TIM5_SR_CC4OF, 1 << 12   @ bitWidth 1 (Capture/Compare 4 overcapture  flag)  
        .equ TIM5_SR_CC3OF, 1 << 11   @ bitWidth 1 (Capture/Compare 3 overcapture  flag)  
        .equ TIM5_SR_CC2OF, 1 << 10   @ bitWidth 1 (Capture/compare 2 overcapture  flag)  
        .equ TIM5_SR_CC1OF, 1 << 9   @ bitWidth 1 (Capture/Compare 1 overcapture  flag)  
        .equ TIM5_SR_TIF, 1 << 6   @ bitWidth 1 (Trigger interrupt flag)  
        .equ TIM5_SR_CC4IF, 1 << 4   @ bitWidth 1 (Capture/Compare 4 interrupt  flag)  
        .equ TIM5_SR_CC3IF, 1 << 3   @ bitWidth 1 (Capture/Compare 3 interrupt  flag)  
        .equ TIM5_SR_CC2IF, 1 << 2   @ bitWidth 1 (Capture/Compare 2 interrupt  flag)  
        .equ TIM5_SR_CC1IF, 1 << 1   @ bitWidth 1 (Capture/compare 1 interrupt  flag)  
        .equ TIM5_SR_UIF, 1 << 0   @ bitWidth 1 (Update interrupt flag)  
 
    .equ TIM5_EGR, TIM5_BASE + 0x14 @ (event generation register) 
        .equ TIM5_EGR_TG, 1 << 6   @ bitWidth 1 (Trigger generation)  
        .equ TIM5_EGR_CC4G, 1 << 4   @ bitWidth 1 (Capture/compare 4  generation)  
        .equ TIM5_EGR_CC3G, 1 << 3   @ bitWidth 1 (Capture/compare 3  generation)  
        .equ TIM5_EGR_CC2G, 1 << 2   @ bitWidth 1 (Capture/compare 2  generation)  
        .equ TIM5_EGR_CC1G, 1 << 1   @ bitWidth 1 (Capture/compare 1  generation)  
        .equ TIM5_EGR_UG, 1 << 0   @ bitWidth 1 (Update generation)  
 
    .equ TIM5_CCMR1_Output, TIM5_BASE + 0x18 @ (capture/compare mode register 1 output  mode) 
        .equ TIM5_CCMR1_Output_OC2CE, 1 << 15   @ bitWidth 1 (OC2CE)  
        .equ TIM5_CCMR1_Output_OC2M_Shift, 12   @ bitWidth 3 (OC2M)  
        .equ TIM5_CCMR1_Output_OC2PE, 1 << 11   @ bitWidth 1 (OC2PE)  
        .equ TIM5_CCMR1_Output_OC2FE, 1 << 10   @ bitWidth 1 (OC2FE)  
        .equ TIM5_CCMR1_Output_CC2S_Shift, 8   @ bitWidth 2 (CC2S)  
        .equ TIM5_CCMR1_Output_OC1CE, 1 << 7   @ bitWidth 1 (OC1CE)  
        .equ TIM5_CCMR1_Output_OC1M_Shift, 4   @ bitWidth 3 (OC1M)  
        .equ TIM5_CCMR1_Output_OC1PE, 1 << 3   @ bitWidth 1 (OC1PE)  
        .equ TIM5_CCMR1_Output_OC1FE, 1 << 2   @ bitWidth 1 (OC1FE)  
        .equ TIM5_CCMR1_Output_CC1S_Shift, 0   @ bitWidth 2 (CC1S)  
 
    .equ TIM5_CCMR1_Input, TIM5_BASE + 0x18 @ (capture/compare mode register 1 input  mode) 
        .equ TIM5_CCMR1_Input_IC2F_Shift, 12   @ bitWidth 4 (Input capture 2 filter)  
        .equ TIM5_CCMR1_Input_IC2PCS_Shift, 10   @ bitWidth 2 (Input capture 2 prescaler)  
        .equ TIM5_CCMR1_Input_CC2S_Shift, 8   @ bitWidth 2 (Capture/Compare 2  selection)  
        .equ TIM5_CCMR1_Input_IC1F_Shift, 4   @ bitWidth 4 (Input capture 1 filter)  
        .equ TIM5_CCMR1_Input_ICPCS_Shift, 2   @ bitWidth 2 (Input capture 1 prescaler)  
        .equ TIM5_CCMR1_Input_CC1S_Shift, 0   @ bitWidth 2 (Capture/Compare 1  selection)  
 
    .equ TIM5_CCMR2_Output, TIM5_BASE + 0x1C @ (capture/compare mode register 2 output  mode) 
        .equ TIM5_CCMR2_Output_O24CE, 1 << 15   @ bitWidth 1 (O24CE)  
        .equ TIM5_CCMR2_Output_OC4M_Shift, 12   @ bitWidth 3 (OC4M)  
        .equ TIM5_CCMR2_Output_OC4PE, 1 << 11   @ bitWidth 1 (OC4PE)  
        .equ TIM5_CCMR2_Output_OC4FE, 1 << 10   @ bitWidth 1 (OC4FE)  
        .equ TIM5_CCMR2_Output_CC4S_Shift, 8   @ bitWidth 2 (CC4S)  
        .equ TIM5_CCMR2_Output_OC3CE, 1 << 7   @ bitWidth 1 (OC3CE)  
        .equ TIM5_CCMR2_Output_OC3M_Shift, 4   @ bitWidth 3 (OC3M)  
        .equ TIM5_CCMR2_Output_OC3PE, 1 << 3   @ bitWidth 1 (OC3PE)  
        .equ TIM5_CCMR2_Output_OC3FE, 1 << 2   @ bitWidth 1 (OC3FE)  
        .equ TIM5_CCMR2_Output_CC3S_Shift, 0   @ bitWidth 2 (CC3S)  
 
    .equ TIM5_CCMR2_Input, TIM5_BASE + 0x1C @ (capture/compare mode register 2 input  mode) 
        .equ TIM5_CCMR2_Input_IC4F_Shift, 12   @ bitWidth 4 (Input capture 4 filter)  
        .equ TIM5_CCMR2_Input_IC4PSC_Shift, 10   @ bitWidth 2 (Input capture 4 prescaler)  
        .equ TIM5_CCMR2_Input_CC4S_Shift, 8   @ bitWidth 2 (Capture/Compare 4  selection)  
        .equ TIM5_CCMR2_Input_IC3F_Shift, 4   @ bitWidth 4 (Input capture 3 filter)  
        .equ TIM5_CCMR2_Input_IC3PSC_Shift, 2   @ bitWidth 2 (Input capture 3 prescaler)  
        .equ TIM5_CCMR2_Input_CC3S_Shift, 0   @ bitWidth 2 (Capture/compare 3  selection)  
 
    .equ TIM5_CCER, TIM5_BASE + 0x20 @ (capture/compare enable  register) 
        .equ TIM5_CCER_CC4NP, 1 << 15   @ bitWidth 1 (Capture/Compare 4 output  Polarity)  
        .equ TIM5_CCER_CC4P, 1 << 13   @ bitWidth 1 (Capture/Compare 3 output  Polarity)  
        .equ TIM5_CCER_CC4E, 1 << 12   @ bitWidth 1 (Capture/Compare 4 output  enable)  
        .equ TIM5_CCER_CC3NP, 1 << 11   @ bitWidth 1 (Capture/Compare 3 output  Polarity)  
        .equ TIM5_CCER_CC3P, 1 << 9   @ bitWidth 1 (Capture/Compare 3 output  Polarity)  
        .equ TIM5_CCER_CC3E, 1 << 8   @ bitWidth 1 (Capture/Compare 3 output  enable)  
        .equ TIM5_CCER_CC2NP, 1 << 7   @ bitWidth 1 (Capture/Compare 2 output  Polarity)  
        .equ TIM5_CCER_CC2P, 1 << 5   @ bitWidth 1 (Capture/Compare 2 output  Polarity)  
        .equ TIM5_CCER_CC2E, 1 << 4   @ bitWidth 1 (Capture/Compare 2 output  enable)  
        .equ TIM5_CCER_CC1NP, 1 << 3   @ bitWidth 1 (Capture/Compare 1 output  Polarity)  
        .equ TIM5_CCER_CC1P, 1 << 1   @ bitWidth 1 (Capture/Compare 1 output  Polarity)  
        .equ TIM5_CCER_CC1E, 1 << 0   @ bitWidth 1 (Capture/Compare 1 output  enable)  
 
    .equ TIM5_CNT, TIM5_BASE + 0x24 @ (counter) 
        .equ TIM5_CNT_CNT_H_Shift, 16   @ bitWidth 16 (High counter value)  
        .equ TIM5_CNT_CNT_L_Shift, 0   @ bitWidth 16 (Low counter value)  
 
    .equ TIM5_PSC, TIM5_BASE + 0x28 @ (prescaler) 
        .equ TIM5_PSC_PSC_Shift, 0   @ bitWidth 16 (Prescaler value)  
 
    .equ TIM5_ARR, TIM5_BASE + 0x2C @ (auto-reload register) 
        .equ TIM5_ARR_ARR_H_Shift, 16   @ bitWidth 16 (High Auto-reload value)  
        .equ TIM5_ARR_ARR_L_Shift, 0   @ bitWidth 16 (Low Auto-reload value)  
 
    .equ TIM5_CCR1, TIM5_BASE + 0x34 @ (capture/compare register 1) 
        .equ TIM5_CCR1_CCR1_H_Shift, 16   @ bitWidth 16 (High Capture/Compare 1  value)  
        .equ TIM5_CCR1_CCR1_L_Shift, 0   @ bitWidth 16 (Low Capture/Compare 1  value)  
 
    .equ TIM5_CCR2, TIM5_BASE + 0x38 @ (capture/compare register 2) 
        .equ TIM5_CCR2_CCR2_H_Shift, 16   @ bitWidth 16 (High Capture/Compare 2  value)  
        .equ TIM5_CCR2_CCR2_L_Shift, 0   @ bitWidth 16 (Low Capture/Compare 2  value)  
 
    .equ TIM5_CCR3, TIM5_BASE + 0x3C @ (capture/compare register 3) 
        .equ TIM5_CCR3_CCR3_H_Shift, 16   @ bitWidth 16 (High Capture/Compare value)  
        .equ TIM5_CCR3_CCR3_L_Shift, 0   @ bitWidth 16 (Low Capture/Compare value)  
 
    .equ TIM5_CCR4, TIM5_BASE + 0x40 @ (capture/compare register 4) 
        .equ TIM5_CCR4_CCR4_H_Shift, 16   @ bitWidth 16 (High Capture/Compare value)  
        .equ TIM5_CCR4_CCR4_L_Shift, 0   @ bitWidth 16 (Low Capture/Compare value)  
 
    .equ TIM5_DCR, TIM5_BASE + 0x48 @ (DMA control register) 
        .equ TIM5_DCR_DBL_Shift, 8   @ bitWidth 5 (DMA burst length)  
        .equ TIM5_DCR_DBA_Shift, 0   @ bitWidth 5 (DMA base address)  
 
    .equ TIM5_DMAR, TIM5_BASE + 0x4C @ (DMA address for full transfer) 
        .equ TIM5_DMAR_DMAB_Shift, 0   @ bitWidth 16 (DMA register for burst  accesses)  
 
    .equ TIM5_OR, TIM5_BASE + 0x50 @ (TIM5 option register) 
        .equ TIM5_OR_IT4_RMP_Shift, 6   @ bitWidth 2 (Timer Input 4 remap)  
 

@=========================== TIM9 ===========================@
.equ TIM9_BASE, 0x40014000 @ (General purpose timers) 
    .equ TIM9_CR1, TIM9_BASE + 0x0 @ (control register 1) 
        .equ TIM9_CR1_CKD_Shift, 8   @ bitWidth 2 (Clock division)  
        .equ TIM9_CR1_ARPE, 1 << 7   @ bitWidth 1 (Auto-reload preload enable)  
        .equ TIM9_CR1_OPM, 1 << 3   @ bitWidth 1 (One-pulse mode)  
        .equ TIM9_CR1_URS, 1 << 2   @ bitWidth 1 (Update request source)  
        .equ TIM9_CR1_UDIS, 1 << 1   @ bitWidth 1 (Update disable)  
        .equ TIM9_CR1_CEN, 1 << 0   @ bitWidth 1 (Counter enable)  
 
    .equ TIM9_CR2, TIM9_BASE + 0x4 @ (control register 2) 
        .equ TIM9_CR2_MMS_Shift, 4   @ bitWidth 3 (Master mode selection)  
 
    .equ TIM9_SMCR, TIM9_BASE + 0x8 @ (slave mode control register) 
        .equ TIM9_SMCR_MSM, 1 << 7   @ bitWidth 1 (Master/Slave mode)  
        .equ TIM9_SMCR_TS_Shift, 4   @ bitWidth 3 (Trigger selection)  
        .equ TIM9_SMCR_SMS_Shift, 0   @ bitWidth 3 (Slave mode selection)  
 
    .equ TIM9_DIER, TIM9_BASE + 0xC @ (DMA/Interrupt enable register) 
        .equ TIM9_DIER_TIE, 1 << 6   @ bitWidth 1 (Trigger interrupt enable)  
        .equ TIM9_DIER_CC2IE, 1 << 2   @ bitWidth 1 (Capture/Compare 2 interrupt  enable)  
        .equ TIM9_DIER_CC1IE, 1 << 1   @ bitWidth 1 (Capture/Compare 1 interrupt  enable)  
        .equ TIM9_DIER_UIE, 1 << 0   @ bitWidth 1 (Update interrupt enable)  
 
    .equ TIM9_SR, TIM9_BASE + 0x10 @ (status register) 
        .equ TIM9_SR_CC2OF, 1 << 10   @ bitWidth 1 (Capture/compare 2 overcapture  flag)  
        .equ TIM9_SR_CC1OF, 1 << 9   @ bitWidth 1 (Capture/Compare 1 overcapture  flag)  
        .equ TIM9_SR_TIF, 1 << 6   @ bitWidth 1 (Trigger interrupt flag)  
        .equ TIM9_SR_CC2IF, 1 << 2   @ bitWidth 1 (Capture/Compare 2 interrupt  flag)  
        .equ TIM9_SR_CC1IF, 1 << 1   @ bitWidth 1 (Capture/compare 1 interrupt  flag)  
        .equ TIM9_SR_UIF, 1 << 0   @ bitWidth 1 (Update interrupt flag)  
 
    .equ TIM9_EGR, TIM9_BASE + 0x14 @ (event generation register) 
        .equ TIM9_EGR_TG, 1 << 6   @ bitWidth 1 (Trigger generation)  
        .equ TIM9_EGR_CC2G, 1 << 2   @ bitWidth 1 (Capture/compare 2  generation)  
        .equ TIM9_EGR_CC1G, 1 << 1   @ bitWidth 1 (Capture/compare 1  generation)  
        .equ TIM9_EGR_UG, 1 << 0   @ bitWidth 1 (Update generation)  
 
    .equ TIM9_CCMR1_Output, TIM9_BASE + 0x18 @ (capture/compare mode register 1 output  mode) 
        .equ TIM9_CCMR1_Output_OC2M_Shift, 12   @ bitWidth 3 (Output Compare 2 mode)  
        .equ TIM9_CCMR1_Output_OC2PE, 1 << 11   @ bitWidth 1 (Output Compare 2 preload  enable)  
        .equ TIM9_CCMR1_Output_OC2FE, 1 << 10   @ bitWidth 1 (Output Compare 2 fast  enable)  
        .equ TIM9_CCMR1_Output_CC2S_Shift, 8   @ bitWidth 2 (Capture/Compare 2  selection)  
        .equ TIM9_CCMR1_Output_OC1M_Shift, 4   @ bitWidth 3 (Output Compare 1 mode)  
        .equ TIM9_CCMR1_Output_OC1PE, 1 << 3   @ bitWidth 1 (Output Compare 1 preload  enable)  
        .equ TIM9_CCMR1_Output_OC1FE, 1 << 2   @ bitWidth 1 (Output Compare 1 fast  enable)  
        .equ TIM9_CCMR1_Output_CC1S_Shift, 0   @ bitWidth 2 (Capture/Compare 1  selection)  
 
    .equ TIM9_CCMR1_Input, TIM9_BASE + 0x18 @ (capture/compare mode register 1 input  mode) 
        .equ TIM9_CCMR1_Input_IC2F_Shift, 12   @ bitWidth 3 (Input capture 2 filter)  
        .equ TIM9_CCMR1_Input_IC2PCS_Shift, 10   @ bitWidth 2 (Input capture 2 prescaler)  
        .equ TIM9_CCMR1_Input_CC2S_Shift, 8   @ bitWidth 2 (Capture/Compare 2  selection)  
        .equ TIM9_CCMR1_Input_IC1F_Shift, 4   @ bitWidth 3 (Input capture 1 filter)  
        .equ TIM9_CCMR1_Input_ICPCS_Shift, 2   @ bitWidth 2 (Input capture 1 prescaler)  
        .equ TIM9_CCMR1_Input_CC1S_Shift, 0   @ bitWidth 2 (Capture/Compare 1  selection)  
 
    .equ TIM9_CCER, TIM9_BASE + 0x20 @ (capture/compare enable  register) 
        .equ TIM9_CCER_CC2NP, 1 << 7   @ bitWidth 1 (Capture/Compare 2 output  Polarity)  
        .equ TIM9_CCER_CC2P, 1 << 5   @ bitWidth 1 (Capture/Compare 2 output  Polarity)  
        .equ TIM9_CCER_CC2E, 1 << 4   @ bitWidth 1 (Capture/Compare 2 output  enable)  
        .equ TIM9_CCER_CC1NP, 1 << 3   @ bitWidth 1 (Capture/Compare 1 output  Polarity)  
        .equ TIM9_CCER_CC1P, 1 << 1   @ bitWidth 1 (Capture/Compare 1 output  Polarity)  
        .equ TIM9_CCER_CC1E, 1 << 0   @ bitWidth 1 (Capture/Compare 1 output  enable)  
 
    .equ TIM9_CNT, TIM9_BASE + 0x24 @ (counter) 
        .equ TIM9_CNT_CNT_Shift, 0   @ bitWidth 16 (counter value)  
 
    .equ TIM9_PSC, TIM9_BASE + 0x28 @ (prescaler) 
        .equ TIM9_PSC_PSC_Shift, 0   @ bitWidth 16 (Prescaler value)  
 
    .equ TIM9_ARR, TIM9_BASE + 0x2C @ (auto-reload register) 
        .equ TIM9_ARR_ARR_Shift, 0   @ bitWidth 16 (Auto-reload value)  
 
    .equ TIM9_CCR1, TIM9_BASE + 0x34 @ (capture/compare register 1) 
        .equ TIM9_CCR1_CCR1_Shift, 0   @ bitWidth 16 (Capture/Compare 1 value)  
 
    .equ TIM9_CCR2, TIM9_BASE + 0x38 @ (capture/compare register 2) 
        .equ TIM9_CCR2_CCR2_Shift, 0   @ bitWidth 16 (Capture/Compare 2 value)  
 

@=========================== TIM12 ===========================@
.equ TIM12_BASE, 0x40001800 @ (General purpose timers) 
    .equ TIM12_CR1, TIM12_BASE + 0x0 @ (control register 1) 
        .equ TIM12_CR1_CKD_Shift, 8   @ bitWidth 2 (Clock division)  
        .equ TIM12_CR1_ARPE, 1 << 7   @ bitWidth 1 (Auto-reload preload enable)  
        .equ TIM12_CR1_OPM, 1 << 3   @ bitWidth 1 (One-pulse mode)  
        .equ TIM12_CR1_URS, 1 << 2   @ bitWidth 1 (Update request source)  
        .equ TIM12_CR1_UDIS, 1 << 1   @ bitWidth 1 (Update disable)  
        .equ TIM12_CR1_CEN, 1 << 0   @ bitWidth 1 (Counter enable)  
 
    .equ TIM12_CR2, TIM12_BASE + 0x4 @ (control register 2) 
        .equ TIM12_CR2_MMS_Shift, 4   @ bitWidth 3 (Master mode selection)  
 
    .equ TIM12_SMCR, TIM12_BASE + 0x8 @ (slave mode control register) 
        .equ TIM12_SMCR_MSM, 1 << 7   @ bitWidth 1 (Master/Slave mode)  
        .equ TIM12_SMCR_TS_Shift, 4   @ bitWidth 3 (Trigger selection)  
        .equ TIM12_SMCR_SMS_Shift, 0   @ bitWidth 3 (Slave mode selection)  
 
    .equ TIM12_DIER, TIM12_BASE + 0xC @ (DMA/Interrupt enable register) 
        .equ TIM12_DIER_TIE, 1 << 6   @ bitWidth 1 (Trigger interrupt enable)  
        .equ TIM12_DIER_CC2IE, 1 << 2   @ bitWidth 1 (Capture/Compare 2 interrupt  enable)  
        .equ TIM12_DIER_CC1IE, 1 << 1   @ bitWidth 1 (Capture/Compare 1 interrupt  enable)  
        .equ TIM12_DIER_UIE, 1 << 0   @ bitWidth 1 (Update interrupt enable)  
 
    .equ TIM12_SR, TIM12_BASE + 0x10 @ (status register) 
        .equ TIM12_SR_CC2OF, 1 << 10   @ bitWidth 1 (Capture/compare 2 overcapture  flag)  
        .equ TIM12_SR_CC1OF, 1 << 9   @ bitWidth 1 (Capture/Compare 1 overcapture  flag)  
        .equ TIM12_SR_TIF, 1 << 6   @ bitWidth 1 (Trigger interrupt flag)  
        .equ TIM12_SR_CC2IF, 1 << 2   @ bitWidth 1 (Capture/Compare 2 interrupt  flag)  
        .equ TIM12_SR_CC1IF, 1 << 1   @ bitWidth 1 (Capture/compare 1 interrupt  flag)  
        .equ TIM12_SR_UIF, 1 << 0   @ bitWidth 1 (Update interrupt flag)  
 
    .equ TIM12_EGR, TIM12_BASE + 0x14 @ (event generation register) 
        .equ TIM12_EGR_TG, 1 << 6   @ bitWidth 1 (Trigger generation)  
        .equ TIM12_EGR_CC2G, 1 << 2   @ bitWidth 1 (Capture/compare 2  generation)  
        .equ TIM12_EGR_CC1G, 1 << 1   @ bitWidth 1 (Capture/compare 1  generation)  
        .equ TIM12_EGR_UG, 1 << 0   @ bitWidth 1 (Update generation)  
 
    .equ TIM12_CCMR1_Output, TIM12_BASE + 0x18 @ (capture/compare mode register 1 output  mode) 
        .equ TIM12_CCMR1_Output_OC2M_Shift, 12   @ bitWidth 3 (Output Compare 2 mode)  
        .equ TIM12_CCMR1_Output_OC2PE, 1 << 11   @ bitWidth 1 (Output Compare 2 preload  enable)  
        .equ TIM12_CCMR1_Output_OC2FE, 1 << 10   @ bitWidth 1 (Output Compare 2 fast  enable)  
        .equ TIM12_CCMR1_Output_CC2S_Shift, 8   @ bitWidth 2 (Capture/Compare 2  selection)  
        .equ TIM12_CCMR1_Output_OC1M_Shift, 4   @ bitWidth 3 (Output Compare 1 mode)  
        .equ TIM12_CCMR1_Output_OC1PE, 1 << 3   @ bitWidth 1 (Output Compare 1 preload  enable)  
        .equ TIM12_CCMR1_Output_OC1FE, 1 << 2   @ bitWidth 1 (Output Compare 1 fast  enable)  
        .equ TIM12_CCMR1_Output_CC1S_Shift, 0   @ bitWidth 2 (Capture/Compare 1  selection)  
 
    .equ TIM12_CCMR1_Input, TIM12_BASE + 0x18 @ (capture/compare mode register 1 input  mode) 
        .equ TIM12_CCMR1_Input_IC2F_Shift, 12   @ bitWidth 3 (Input capture 2 filter)  
        .equ TIM12_CCMR1_Input_IC2PCS_Shift, 10   @ bitWidth 2 (Input capture 2 prescaler)  
        .equ TIM12_CCMR1_Input_CC2S_Shift, 8   @ bitWidth 2 (Capture/Compare 2  selection)  
        .equ TIM12_CCMR1_Input_IC1F_Shift, 4   @ bitWidth 3 (Input capture 1 filter)  
        .equ TIM12_CCMR1_Input_ICPCS_Shift, 2   @ bitWidth 2 (Input capture 1 prescaler)  
        .equ TIM12_CCMR1_Input_CC1S_Shift, 0   @ bitWidth 2 (Capture/Compare 1  selection)  
 
    .equ TIM12_CCER, TIM12_BASE + 0x20 @ (capture/compare enable  register) 
        .equ TIM12_CCER_CC2NP, 1 << 7   @ bitWidth 1 (Capture/Compare 2 output  Polarity)  
        .equ TIM12_CCER_CC2P, 1 << 5   @ bitWidth 1 (Capture/Compare 2 output  Polarity)  
        .equ TIM12_CCER_CC2E, 1 << 4   @ bitWidth 1 (Capture/Compare 2 output  enable)  
        .equ TIM12_CCER_CC1NP, 1 << 3   @ bitWidth 1 (Capture/Compare 1 output  Polarity)  
        .equ TIM12_CCER_CC1P, 1 << 1   @ bitWidth 1 (Capture/Compare 1 output  Polarity)  
        .equ TIM12_CCER_CC1E, 1 << 0   @ bitWidth 1 (Capture/Compare 1 output  enable)  
 
    .equ TIM12_CNT, TIM12_BASE + 0x24 @ (counter) 
        .equ TIM12_CNT_CNT_Shift, 0   @ bitWidth 16 (counter value)  
 
    .equ TIM12_PSC, TIM12_BASE + 0x28 @ (prescaler) 
        .equ TIM12_PSC_PSC_Shift, 0   @ bitWidth 16 (Prescaler value)  
 
    .equ TIM12_ARR, TIM12_BASE + 0x2C @ (auto-reload register) 
        .equ TIM12_ARR_ARR_Shift, 0   @ bitWidth 16 (Auto-reload value)  
 
    .equ TIM12_CCR1, TIM12_BASE + 0x34 @ (capture/compare register 1) 
        .equ TIM12_CCR1_CCR1_Shift, 0   @ bitWidth 16 (Capture/Compare 1 value)  
 
    .equ TIM12_CCR2, TIM12_BASE + 0x38 @ (capture/compare register 2) 
        .equ TIM12_CCR2_CCR2_Shift, 0   @ bitWidth 16 (Capture/Compare 2 value)  
 

@=========================== TIM10 ===========================@
.equ TIM10_BASE, 0x40014400 @ (General-purpose-timers) 
    .equ TIM10_CR1, TIM10_BASE + 0x0 @ (control register 1) 
        .equ TIM10_CR1_CKD_Shift, 8   @ bitWidth 2 (Clock division)  
        .equ TIM10_CR1_ARPE, 1 << 7   @ bitWidth 1 (Auto-reload preload enable)  
        .equ TIM10_CR1_URS, 1 << 2   @ bitWidth 1 (Update request source)  
        .equ TIM10_CR1_UDIS, 1 << 1   @ bitWidth 1 (Update disable)  
        .equ TIM10_CR1_CEN, 1 << 0   @ bitWidth 1 (Counter enable)  
 
    .equ TIM10_DIER, TIM10_BASE + 0xC @ (DMA/Interrupt enable register) 
        .equ TIM10_DIER_CC1IE, 1 << 1   @ bitWidth 1 (Capture/Compare 1 interrupt  enable)  
        .equ TIM10_DIER_UIE, 1 << 0   @ bitWidth 1 (Update interrupt enable)  
 
    .equ TIM10_SR, TIM10_BASE + 0x10 @ (status register) 
        .equ TIM10_SR_CC1OF, 1 << 9   @ bitWidth 1 (Capture/Compare 1 overcapture  flag)  
        .equ TIM10_SR_CC1IF, 1 << 1   @ bitWidth 1 (Capture/compare 1 interrupt  flag)  
        .equ TIM10_SR_UIF, 1 << 0   @ bitWidth 1 (Update interrupt flag)  
 
    .equ TIM10_EGR, TIM10_BASE + 0x14 @ (event generation register) 
        .equ TIM10_EGR_CC1G, 1 << 1   @ bitWidth 1 (Capture/compare 1  generation)  
        .equ TIM10_EGR_UG, 1 << 0   @ bitWidth 1 (Update generation)  
 
    .equ TIM10_CCMR1_Output, TIM10_BASE + 0x18 @ (capture/compare mode register 1 output  mode) 
        .equ TIM10_CCMR1_Output_OC1M_Shift, 4   @ bitWidth 3 (Output Compare 1 mode)  
        .equ TIM10_CCMR1_Output_OC1PE, 1 << 3   @ bitWidth 1 (Output Compare 1 preload  enable)  
        .equ TIM10_CCMR1_Output_OC1FE, 1 << 2   @ bitWidth 1 (Output Compare 1 fast  enable)  
        .equ TIM10_CCMR1_Output_CC1S_Shift, 0   @ bitWidth 2 (Capture/Compare 1  selection)  
 
    .equ TIM10_CCMR1_Input, TIM10_BASE + 0x18 @ (capture/compare mode register 1 input  mode) 
        .equ TIM10_CCMR1_Input_IC1F_Shift, 4   @ bitWidth 4 (Input capture 1 filter)  
        .equ TIM10_CCMR1_Input_ICPCS_Shift, 2   @ bitWidth 2 (Input capture 1 prescaler)  
        .equ TIM10_CCMR1_Input_CC1S_Shift, 0   @ bitWidth 2 (Capture/Compare 1  selection)  
 
    .equ TIM10_CCER, TIM10_BASE + 0x20 @ (capture/compare enable  register) 
        .equ TIM10_CCER_CC1NP, 1 << 3   @ bitWidth 1 (Capture/Compare 1 output  Polarity)  
        .equ TIM10_CCER_CC1P, 1 << 1   @ bitWidth 1 (Capture/Compare 1 output  Polarity)  
        .equ TIM10_CCER_CC1E, 1 << 0   @ bitWidth 1 (Capture/Compare 1 output  enable)  
 
    .equ TIM10_CNT, TIM10_BASE + 0x24 @ (counter) 
        .equ TIM10_CNT_CNT_Shift, 0   @ bitWidth 16 (counter value)  
 
    .equ TIM10_PSC, TIM10_BASE + 0x28 @ (prescaler) 
        .equ TIM10_PSC_PSC_Shift, 0   @ bitWidth 16 (Prescaler value)  
 
    .equ TIM10_ARR, TIM10_BASE + 0x2C @ (auto-reload register) 
        .equ TIM10_ARR_ARR_Shift, 0   @ bitWidth 16 (Auto-reload value)  
 
    .equ TIM10_CCR1, TIM10_BASE + 0x34 @ (capture/compare register 1) 
        .equ TIM10_CCR1_CCR1_Shift, 0   @ bitWidth 16 (Capture/Compare 1 value)  
 

@=========================== TIM13 ===========================@
.equ TIM13_BASE, 0x40001C00 @ (General-purpose-timers) 
    .equ TIM13_CR1, TIM13_BASE + 0x0 @ (control register 1) 
        .equ TIM13_CR1_CKD_Shift, 8   @ bitWidth 2 (Clock division)  
        .equ TIM13_CR1_ARPE, 1 << 7   @ bitWidth 1 (Auto-reload preload enable)  
        .equ TIM13_CR1_URS, 1 << 2   @ bitWidth 1 (Update request source)  
        .equ TIM13_CR1_UDIS, 1 << 1   @ bitWidth 1 (Update disable)  
        .equ TIM13_CR1_CEN, 1 << 0   @ bitWidth 1 (Counter enable)  
 
    .equ TIM13_DIER, TIM13_BASE + 0xC @ (DMA/Interrupt enable register) 
        .equ TIM13_DIER_CC1IE, 1 << 1   @ bitWidth 1 (Capture/Compare 1 interrupt  enable)  
        .equ TIM13_DIER_UIE, 1 << 0   @ bitWidth 1 (Update interrupt enable)  
 
    .equ TIM13_SR, TIM13_BASE + 0x10 @ (status register) 
        .equ TIM13_SR_CC1OF, 1 << 9   @ bitWidth 1 (Capture/Compare 1 overcapture  flag)  
        .equ TIM13_SR_CC1IF, 1 << 1   @ bitWidth 1 (Capture/compare 1 interrupt  flag)  
        .equ TIM13_SR_UIF, 1 << 0   @ bitWidth 1 (Update interrupt flag)  
 
    .equ TIM13_EGR, TIM13_BASE + 0x14 @ (event generation register) 
        .equ TIM13_EGR_CC1G, 1 << 1   @ bitWidth 1 (Capture/compare 1  generation)  
        .equ TIM13_EGR_UG, 1 << 0   @ bitWidth 1 (Update generation)  
 
    .equ TIM13_CCMR1_Output, TIM13_BASE + 0x18 @ (capture/compare mode register 1 output  mode) 
        .equ TIM13_CCMR1_Output_OC1M_Shift, 4   @ bitWidth 3 (Output Compare 1 mode)  
        .equ TIM13_CCMR1_Output_OC1PE, 1 << 3   @ bitWidth 1 (Output Compare 1 preload  enable)  
        .equ TIM13_CCMR1_Output_OC1FE, 1 << 2   @ bitWidth 1 (Output Compare 1 fast  enable)  
        .equ TIM13_CCMR1_Output_CC1S_Shift, 0   @ bitWidth 2 (Capture/Compare 1  selection)  
 
    .equ TIM13_CCMR1_Input, TIM13_BASE + 0x18 @ (capture/compare mode register 1 input  mode) 
        .equ TIM13_CCMR1_Input_IC1F_Shift, 4   @ bitWidth 4 (Input capture 1 filter)  
        .equ TIM13_CCMR1_Input_ICPCS_Shift, 2   @ bitWidth 2 (Input capture 1 prescaler)  
        .equ TIM13_CCMR1_Input_CC1S_Shift, 0   @ bitWidth 2 (Capture/Compare 1  selection)  
 
    .equ TIM13_CCER, TIM13_BASE + 0x20 @ (capture/compare enable  register) 
        .equ TIM13_CCER_CC1NP, 1 << 3   @ bitWidth 1 (Capture/Compare 1 output  Polarity)  
        .equ TIM13_CCER_CC1P, 1 << 1   @ bitWidth 1 (Capture/Compare 1 output  Polarity)  
        .equ TIM13_CCER_CC1E, 1 << 0   @ bitWidth 1 (Capture/Compare 1 output  enable)  
 
    .equ TIM13_CNT, TIM13_BASE + 0x24 @ (counter) 
        .equ TIM13_CNT_CNT_Shift, 0   @ bitWidth 16 (counter value)  
 
    .equ TIM13_PSC, TIM13_BASE + 0x28 @ (prescaler) 
        .equ TIM13_PSC_PSC_Shift, 0   @ bitWidth 16 (Prescaler value)  
 
    .equ TIM13_ARR, TIM13_BASE + 0x2C @ (auto-reload register) 
        .equ TIM13_ARR_ARR_Shift, 0   @ bitWidth 16 (Auto-reload value)  
 
    .equ TIM13_CCR1, TIM13_BASE + 0x34 @ (capture/compare register 1) 
        .equ TIM13_CCR1_CCR1_Shift, 0   @ bitWidth 16 (Capture/Compare 1 value)  
 

@=========================== TIM14 ===========================@
.equ TIM14_BASE, 0x40002000 @ (General-purpose-timers) 
    .equ TIM14_CR1, TIM14_BASE + 0x0 @ (control register 1) 
        .equ TIM14_CR1_CKD_Shift, 8   @ bitWidth 2 (Clock division)  
        .equ TIM14_CR1_ARPE, 1 << 7   @ bitWidth 1 (Auto-reload preload enable)  
        .equ TIM14_CR1_URS, 1 << 2   @ bitWidth 1 (Update request source)  
        .equ TIM14_CR1_UDIS, 1 << 1   @ bitWidth 1 (Update disable)  
        .equ TIM14_CR1_CEN, 1 << 0   @ bitWidth 1 (Counter enable)  
 
    .equ TIM14_DIER, TIM14_BASE + 0xC @ (DMA/Interrupt enable register) 
        .equ TIM14_DIER_CC1IE, 1 << 1   @ bitWidth 1 (Capture/Compare 1 interrupt  enable)  
        .equ TIM14_DIER_UIE, 1 << 0   @ bitWidth 1 (Update interrupt enable)  
 
    .equ TIM14_SR, TIM14_BASE + 0x10 @ (status register) 
        .equ TIM14_SR_CC1OF, 1 << 9   @ bitWidth 1 (Capture/Compare 1 overcapture  flag)  
        .equ TIM14_SR_CC1IF, 1 << 1   @ bitWidth 1 (Capture/compare 1 interrupt  flag)  
        .equ TIM14_SR_UIF, 1 << 0   @ bitWidth 1 (Update interrupt flag)  
 
    .equ TIM14_EGR, TIM14_BASE + 0x14 @ (event generation register) 
        .equ TIM14_EGR_CC1G, 1 << 1   @ bitWidth 1 (Capture/compare 1  generation)  
        .equ TIM14_EGR_UG, 1 << 0   @ bitWidth 1 (Update generation)  
 
    .equ TIM14_CCMR1_Output, TIM14_BASE + 0x18 @ (capture/compare mode register 1 output  mode) 
        .equ TIM14_CCMR1_Output_OC1M_Shift, 4   @ bitWidth 3 (Output Compare 1 mode)  
        .equ TIM14_CCMR1_Output_OC1PE, 1 << 3   @ bitWidth 1 (Output Compare 1 preload  enable)  
        .equ TIM14_CCMR1_Output_OC1FE, 1 << 2   @ bitWidth 1 (Output Compare 1 fast  enable)  
        .equ TIM14_CCMR1_Output_CC1S_Shift, 0   @ bitWidth 2 (Capture/Compare 1  selection)  
 
    .equ TIM14_CCMR1_Input, TIM14_BASE + 0x18 @ (capture/compare mode register 1 input  mode) 
        .equ TIM14_CCMR1_Input_IC1F_Shift, 4   @ bitWidth 4 (Input capture 1 filter)  
        .equ TIM14_CCMR1_Input_ICPCS_Shift, 2   @ bitWidth 2 (Input capture 1 prescaler)  
        .equ TIM14_CCMR1_Input_CC1S_Shift, 0   @ bitWidth 2 (Capture/Compare 1  selection)  
 
    .equ TIM14_CCER, TIM14_BASE + 0x20 @ (capture/compare enable  register) 
        .equ TIM14_CCER_CC1NP, 1 << 3   @ bitWidth 1 (Capture/Compare 1 output  Polarity)  
        .equ TIM14_CCER_CC1P, 1 << 1   @ bitWidth 1 (Capture/Compare 1 output  Polarity)  
        .equ TIM14_CCER_CC1E, 1 << 0   @ bitWidth 1 (Capture/Compare 1 output  enable)  
 
    .equ TIM14_CNT, TIM14_BASE + 0x24 @ (counter) 
        .equ TIM14_CNT_CNT_Shift, 0   @ bitWidth 16 (counter value)  
 
    .equ TIM14_PSC, TIM14_BASE + 0x28 @ (prescaler) 
        .equ TIM14_PSC_PSC_Shift, 0   @ bitWidth 16 (Prescaler value)  
 
    .equ TIM14_ARR, TIM14_BASE + 0x2C @ (auto-reload register) 
        .equ TIM14_ARR_ARR_Shift, 0   @ bitWidth 16 (Auto-reload value)  
 
    .equ TIM14_CCR1, TIM14_BASE + 0x34 @ (capture/compare register 1) 
        .equ TIM14_CCR1_CCR1_Shift, 0   @ bitWidth 16 (Capture/Compare 1 value)  
 

@=========================== TIM11 ===========================@
.equ TIM11_BASE, 0x40014800 @ (General-purpose-timers) 
    .equ TIM11_CR1, TIM11_BASE + 0x0 @ (control register 1) 
        .equ TIM11_CR1_CKD_Shift, 8   @ bitWidth 2 (Clock division)  
        .equ TIM11_CR1_ARPE, 1 << 7   @ bitWidth 1 (Auto-reload preload enable)  
        .equ TIM11_CR1_URS, 1 << 2   @ bitWidth 1 (Update request source)  
        .equ TIM11_CR1_UDIS, 1 << 1   @ bitWidth 1 (Update disable)  
        .equ TIM11_CR1_CEN, 1 << 0   @ bitWidth 1 (Counter enable)  
 
    .equ TIM11_DIER, TIM11_BASE + 0xC @ (DMA/Interrupt enable register) 
        .equ TIM11_DIER_CC1IE, 1 << 1   @ bitWidth 1 (Capture/Compare 1 interrupt  enable)  
        .equ TIM11_DIER_UIE, 1 << 0   @ bitWidth 1 (Update interrupt enable)  
 
    .equ TIM11_SR, TIM11_BASE + 0x10 @ (status register) 
        .equ TIM11_SR_CC1OF, 1 << 9   @ bitWidth 1 (Capture/Compare 1 overcapture  flag)  
        .equ TIM11_SR_CC1IF, 1 << 1   @ bitWidth 1 (Capture/compare 1 interrupt  flag)  
        .equ TIM11_SR_UIF, 1 << 0   @ bitWidth 1 (Update interrupt flag)  
 
    .equ TIM11_EGR, TIM11_BASE + 0x14 @ (event generation register) 
        .equ TIM11_EGR_CC1G, 1 << 1   @ bitWidth 1 (Capture/compare 1  generation)  
        .equ TIM11_EGR_UG, 1 << 0   @ bitWidth 1 (Update generation)  
 
    .equ TIM11_CCMR1_Output, TIM11_BASE + 0x18 @ (capture/compare mode register 1 output  mode) 
        .equ TIM11_CCMR1_Output_OC1M_Shift, 4   @ bitWidth 3 (Output Compare 1 mode)  
        .equ TIM11_CCMR1_Output_OC1PE, 1 << 3   @ bitWidth 1 (Output Compare 1 preload  enable)  
        .equ TIM11_CCMR1_Output_OC1FE, 1 << 2   @ bitWidth 1 (Output Compare 1 fast  enable)  
        .equ TIM11_CCMR1_Output_CC1S_Shift, 0   @ bitWidth 2 (Capture/Compare 1  selection)  
 
    .equ TIM11_CCMR1_Input, TIM11_BASE + 0x18 @ (capture/compare mode register 1 input  mode) 
        .equ TIM11_CCMR1_Input_IC1F_Shift, 4   @ bitWidth 4 (Input capture 1 filter)  
        .equ TIM11_CCMR1_Input_ICPCS_Shift, 2   @ bitWidth 2 (Input capture 1 prescaler)  
        .equ TIM11_CCMR1_Input_CC1S_Shift, 0   @ bitWidth 2 (Capture/Compare 1  selection)  
 
    .equ TIM11_CCER, TIM11_BASE + 0x20 @ (capture/compare enable  register) 
        .equ TIM11_CCER_CC1NP, 1 << 3   @ bitWidth 1 (Capture/Compare 1 output  Polarity)  
        .equ TIM11_CCER_CC1P, 1 << 1   @ bitWidth 1 (Capture/Compare 1 output  Polarity)  
        .equ TIM11_CCER_CC1E, 1 << 0   @ bitWidth 1 (Capture/Compare 1 output  enable)  
 
    .equ TIM11_CNT, TIM11_BASE + 0x24 @ (counter) 
        .equ TIM11_CNT_CNT_Shift, 0   @ bitWidth 16 (counter value)  
 
    .equ TIM11_PSC, TIM11_BASE + 0x28 @ (prescaler) 
        .equ TIM11_PSC_PSC_Shift, 0   @ bitWidth 16 (Prescaler value)  
 
    .equ TIM11_ARR, TIM11_BASE + 0x2C @ (auto-reload register) 
        .equ TIM11_ARR_ARR_Shift, 0   @ bitWidth 16 (Auto-reload value)  
 
    .equ TIM11_CCR1, TIM11_BASE + 0x34 @ (capture/compare register 1) 
        .equ TIM11_CCR1_CCR1_Shift, 0   @ bitWidth 16 (Capture/Compare 1 value)  
 
    .equ TIM11_OR, TIM11_BASE + 0x50 @ (option register) 
        .equ TIM11_OR_RMP_Shift, 0   @ bitWidth 2 (Input 1 remapping  capability)  
 

@=========================== TIM6 ===========================@
.equ TIM6_BASE, 0x40001000 @ (Basic timers) 
    .equ TIM6_CR1, TIM6_BASE + 0x0 @ (control register 1) 
        .equ TIM6_CR1_ARPE, 1 << 7   @ bitWidth 1 (Auto-reload preload enable)  
        .equ TIM6_CR1_OPM, 1 << 3   @ bitWidth 1 (One-pulse mode)  
        .equ TIM6_CR1_URS, 1 << 2   @ bitWidth 1 (Update request source)  
        .equ TIM6_CR1_UDIS, 1 << 1   @ bitWidth 1 (Update disable)  
        .equ TIM6_CR1_CEN, 1 << 0   @ bitWidth 1 (Counter enable)  
 
    .equ TIM6_CR2, TIM6_BASE + 0x4 @ (control register 2) 
        .equ TIM6_CR2_MMS_Shift, 4   @ bitWidth 3 (Master mode selection)  
 
    .equ TIM6_DIER, TIM6_BASE + 0xC @ (DMA/Interrupt enable register) 
        .equ TIM6_DIER_UDE, 1 << 8   @ bitWidth 1 (Update DMA request enable)  
        .equ TIM6_DIER_UIE, 1 << 0   @ bitWidth 1 (Update interrupt enable)  
 
    .equ TIM6_SR, TIM6_BASE + 0x10 @ (status register) 
        .equ TIM6_SR_UIF, 1 << 0   @ bitWidth 1 (Update interrupt flag)  
 
    .equ TIM6_EGR, TIM6_BASE + 0x14 @ (event generation register) 
        .equ TIM6_EGR_UG, 1 << 0   @ bitWidth 1 (Update generation)  
 
    .equ TIM6_CNT, TIM6_BASE + 0x24 @ (counter) 
        .equ TIM6_CNT_CNT_Shift, 0   @ bitWidth 16 (Low counter value)  
 
    .equ TIM6_PSC, TIM6_BASE + 0x28 @ (prescaler) 
        .equ TIM6_PSC_PSC_Shift, 0   @ bitWidth 16 (Prescaler value)  
 
    .equ TIM6_ARR, TIM6_BASE + 0x2C @ (auto-reload register) 
        .equ TIM6_ARR_ARR_Shift, 0   @ bitWidth 16 (Low Auto-reload value)  
 

@=========================== TIM7 ===========================@
.equ TIM7_BASE, 0x40001400 @ (Basic timers) 
    .equ TIM7_CR1, TIM7_BASE + 0x0 @ (control register 1) 
        .equ TIM7_CR1_ARPE, 1 << 7   @ bitWidth 1 (Auto-reload preload enable)  
        .equ TIM7_CR1_OPM, 1 << 3   @ bitWidth 1 (One-pulse mode)  
        .equ TIM7_CR1_URS, 1 << 2   @ bitWidth 1 (Update request source)  
        .equ TIM7_CR1_UDIS, 1 << 1   @ bitWidth 1 (Update disable)  
        .equ TIM7_CR1_CEN, 1 << 0   @ bitWidth 1 (Counter enable)  
 
    .equ TIM7_CR2, TIM7_BASE + 0x4 @ (control register 2) 
        .equ TIM7_CR2_MMS_Shift, 4   @ bitWidth 3 (Master mode selection)  
 
    .equ TIM7_DIER, TIM7_BASE + 0xC @ (DMA/Interrupt enable register) 
        .equ TIM7_DIER_UDE, 1 << 8   @ bitWidth 1 (Update DMA request enable)  
        .equ TIM7_DIER_UIE, 1 << 0   @ bitWidth 1 (Update interrupt enable)  
 
    .equ TIM7_SR, TIM7_BASE + 0x10 @ (status register) 
        .equ TIM7_SR_UIF, 1 << 0   @ bitWidth 1 (Update interrupt flag)  
 
    .equ TIM7_EGR, TIM7_BASE + 0x14 @ (event generation register) 
        .equ TIM7_EGR_UG, 1 << 0   @ bitWidth 1 (Update generation)  
 
    .equ TIM7_CNT, TIM7_BASE + 0x24 @ (counter) 
        .equ TIM7_CNT_CNT_Shift, 0   @ bitWidth 16 (Low counter value)  
 
    .equ TIM7_PSC, TIM7_BASE + 0x28 @ (prescaler) 
        .equ TIM7_PSC_PSC_Shift, 0   @ bitWidth 16 (Prescaler value)  
 
    .equ TIM7_ARR, TIM7_BASE + 0x2C @ (auto-reload register) 
        .equ TIM7_ARR_ARR_Shift, 0   @ bitWidth 16 (Low Auto-reload value)  
 

@=========================== Ethernet_MAC ===========================@
.equ Ethernet_MAC_BASE, 0x40028000 @ (Ethernet: media access control  MAC) 
    .equ Ethernet_MAC_MACCR, Ethernet_MAC_BASE + 0x0 @ (Ethernet MAC configuration  register) 
        .equ Ethernet_MAC_MACCR_RE, 1 << 2   @ bitWidth 1 (RE)  
        .equ Ethernet_MAC_MACCR_TE, 1 << 3   @ bitWidth 1 (TE)  
        .equ Ethernet_MAC_MACCR_DC, 1 << 4   @ bitWidth 1 (DC)  
        .equ Ethernet_MAC_MACCR_BL_Shift, 5   @ bitWidth 2 (BL)  
        .equ Ethernet_MAC_MACCR_APCS, 1 << 7   @ bitWidth 1 (APCS)  
        .equ Ethernet_MAC_MACCR_RD, 1 << 9   @ bitWidth 1 (RD)  
        .equ Ethernet_MAC_MACCR_IPCO, 1 << 10   @ bitWidth 1 (IPCO)  
        .equ Ethernet_MAC_MACCR_DM, 1 << 11   @ bitWidth 1 (DM)  
        .equ Ethernet_MAC_MACCR_LM, 1 << 12   @ bitWidth 1 (LM)  
        .equ Ethernet_MAC_MACCR_ROD, 1 << 13   @ bitWidth 1 (ROD)  
        .equ Ethernet_MAC_MACCR_FES, 1 << 14   @ bitWidth 1 (FES)  
        .equ Ethernet_MAC_MACCR_CSD, 1 << 16   @ bitWidth 1 (CSD)  
        .equ Ethernet_MAC_MACCR_IFG_Shift, 17   @ bitWidth 3 (IFG)  
        .equ Ethernet_MAC_MACCR_JD, 1 << 22   @ bitWidth 1 (JD)  
        .equ Ethernet_MAC_MACCR_WD, 1 << 23   @ bitWidth 1 (WD)  
        .equ Ethernet_MAC_MACCR_CSTF, 1 << 25   @ bitWidth 1 (CSTF)  
 
    .equ Ethernet_MAC_MACFFR, Ethernet_MAC_BASE + 0x4 @ (Ethernet MAC frame filter  register) 
        .equ Ethernet_MAC_MACFFR_PM, 1 << 0   @ bitWidth 1 (no description available)  
        .equ Ethernet_MAC_MACFFR_HU, 1 << 1   @ bitWidth 1 (no description available)  
        .equ Ethernet_MAC_MACFFR_HM, 1 << 2   @ bitWidth 1 (no description available)  
        .equ Ethernet_MAC_MACFFR_DAIF, 1 << 3   @ bitWidth 1 (no description available)  
        .equ Ethernet_MAC_MACFFR_RAM, 1 << 4   @ bitWidth 1 (no description available)  
        .equ Ethernet_MAC_MACFFR_BFD, 1 << 5   @ bitWidth 1 (no description available)  
        .equ Ethernet_MAC_MACFFR_PCF, 1 << 6   @ bitWidth 1 (no description available)  
        .equ Ethernet_MAC_MACFFR_SAIF, 1 << 7   @ bitWidth 1 (no description available)  
        .equ Ethernet_MAC_MACFFR_SAF, 1 << 8   @ bitWidth 1 (no description available)  
        .equ Ethernet_MAC_MACFFR_HPF, 1 << 9   @ bitWidth 1 (no description available)  
        .equ Ethernet_MAC_MACFFR_RA, 1 << 31   @ bitWidth 1 (no description available)  
 
    .equ Ethernet_MAC_MACHTHR, Ethernet_MAC_BASE + 0x8 @ (Ethernet MAC hash table high  register) 
        .equ Ethernet_MAC_MACHTHR_HTH_Shift, 0   @ bitWidth 32 (no description available)  
 
    .equ Ethernet_MAC_MACHTLR, Ethernet_MAC_BASE + 0xC @ (Ethernet MAC hash table low  register) 
        .equ Ethernet_MAC_MACHTLR_HTL_Shift, 0   @ bitWidth 32 (no description available)  
 
    .equ Ethernet_MAC_MACMIIAR, Ethernet_MAC_BASE + 0x10 @ (Ethernet MAC MII address  register) 
        .equ Ethernet_MAC_MACMIIAR_MB, 1 << 0   @ bitWidth 1 (no description available)  
        .equ Ethernet_MAC_MACMIIAR_MW, 1 << 1   @ bitWidth 1 (no description available)  
        .equ Ethernet_MAC_MACMIIAR_CR_Shift, 2   @ bitWidth 3 (no description available)  
        .equ Ethernet_MAC_MACMIIAR_MR_Shift, 6   @ bitWidth 5 (no description available)  
        .equ Ethernet_MAC_MACMIIAR_PA_Shift, 11   @ bitWidth 5 (no description available)  
 
    .equ Ethernet_MAC_MACMIIDR, Ethernet_MAC_BASE + 0x14 @ (Ethernet MAC MII data register) 
        .equ Ethernet_MAC_MACMIIDR_TD_Shift, 0   @ bitWidth 16 (no description available)  
 
    .equ Ethernet_MAC_MACFCR, Ethernet_MAC_BASE + 0x18 @ (Ethernet MAC flow control  register) 
        .equ Ethernet_MAC_MACFCR_FCB, 1 << 0   @ bitWidth 1 (no description available)  
        .equ Ethernet_MAC_MACFCR_TFCE, 1 << 1   @ bitWidth 1 (no description available)  
        .equ Ethernet_MAC_MACFCR_RFCE, 1 << 2   @ bitWidth 1 (no description available)  
        .equ Ethernet_MAC_MACFCR_UPFD, 1 << 3   @ bitWidth 1 (no description available)  
        .equ Ethernet_MAC_MACFCR_PLT_Shift, 4   @ bitWidth 2 (no description available)  
        .equ Ethernet_MAC_MACFCR_ZQPD, 1 << 7   @ bitWidth 1 (no description available)  
        .equ Ethernet_MAC_MACFCR_PT_Shift, 16   @ bitWidth 16 (no description available)  
 
    .equ Ethernet_MAC_MACVLANTR, Ethernet_MAC_BASE + 0x1C @ (Ethernet MAC VLAN tag register) 
        .equ Ethernet_MAC_MACVLANTR_VLANTI_Shift, 0   @ bitWidth 16 (no description available)  
        .equ Ethernet_MAC_MACVLANTR_VLANTC, 1 << 16   @ bitWidth 1 (no description available)  
 
    .equ Ethernet_MAC_MACPMTCSR, Ethernet_MAC_BASE + 0x2C @ (Ethernet MAC PMT control and status  register) 
        .equ Ethernet_MAC_MACPMTCSR_PD, 1 << 0   @ bitWidth 1 (no description available)  
        .equ Ethernet_MAC_MACPMTCSR_MPE, 1 << 1   @ bitWidth 1 (no description available)  
        .equ Ethernet_MAC_MACPMTCSR_WFE, 1 << 2   @ bitWidth 1 (no description available)  
        .equ Ethernet_MAC_MACPMTCSR_MPR, 1 << 5   @ bitWidth 1 (no description available)  
        .equ Ethernet_MAC_MACPMTCSR_WFR, 1 << 6   @ bitWidth 1 (no description available)  
        .equ Ethernet_MAC_MACPMTCSR_GU, 1 << 9   @ bitWidth 1 (no description available)  
        .equ Ethernet_MAC_MACPMTCSR_WFFRPR, 1 << 31   @ bitWidth 1 (no description available)  
 
    .equ Ethernet_MAC_MACDBGR, Ethernet_MAC_BASE + 0x34 @ (Ethernet MAC debug register) 
        .equ Ethernet_MAC_MACDBGR_CR, 1 << 0   @ bitWidth 1 (CR)  
        .equ Ethernet_MAC_MACDBGR_CSR, 1 << 1   @ bitWidth 1 (CSR)  
        .equ Ethernet_MAC_MACDBGR_ROR, 1 << 2   @ bitWidth 1 (ROR)  
        .equ Ethernet_MAC_MACDBGR_MCF, 1 << 3   @ bitWidth 1 (MCF)  
        .equ Ethernet_MAC_MACDBGR_MCP, 1 << 4   @ bitWidth 1 (MCP)  
        .equ Ethernet_MAC_MACDBGR_MCFHP, 1 << 5   @ bitWidth 1 (MCFHP)  
 
    .equ Ethernet_MAC_MACSR, Ethernet_MAC_BASE + 0x38 @ (Ethernet MAC interrupt status  register) 
        .equ Ethernet_MAC_MACSR_PMTS, 1 << 3   @ bitWidth 1 (no description available)  
        .equ Ethernet_MAC_MACSR_MMCS, 1 << 4   @ bitWidth 1 (no description available)  
        .equ Ethernet_MAC_MACSR_MMCRS, 1 << 5   @ bitWidth 1 (no description available)  
        .equ Ethernet_MAC_MACSR_MMCTS, 1 << 6   @ bitWidth 1 (no description available)  
        .equ Ethernet_MAC_MACSR_TSTS, 1 << 9   @ bitWidth 1 (no description available)  
 
    .equ Ethernet_MAC_MACIMR, Ethernet_MAC_BASE + 0x3C @ (Ethernet MAC interrupt mask  register) 
        .equ Ethernet_MAC_MACIMR_PMTIM, 1 << 3   @ bitWidth 1 (no description available)  
        .equ Ethernet_MAC_MACIMR_TSTIM, 1 << 9   @ bitWidth 1 (no description available)  
 
    .equ Ethernet_MAC_MACA0HR, Ethernet_MAC_BASE + 0x40 @ (Ethernet MAC address 0 high  register) 
        .equ Ethernet_MAC_MACA0HR_MACA0H_Shift, 0   @ bitWidth 16 (MAC address0 high)  
        .equ Ethernet_MAC_MACA0HR_MO, 1 << 31   @ bitWidth 1 (Always 1)  
 
    .equ Ethernet_MAC_MACA0LR, Ethernet_MAC_BASE + 0x44 @ (Ethernet MAC address 0 low  register) 
        .equ Ethernet_MAC_MACA0LR_MACA0L_Shift, 0   @ bitWidth 32 (0)  
 
    .equ Ethernet_MAC_MACA1HR, Ethernet_MAC_BASE + 0x48 @ (Ethernet MAC address 1 high  register) 
        .equ Ethernet_MAC_MACA1HR_MACA1H_Shift, 0   @ bitWidth 16 (no description available)  
        .equ Ethernet_MAC_MACA1HR_MBC_Shift, 24   @ bitWidth 6 (no description available)  
        .equ Ethernet_MAC_MACA1HR_SA, 1 << 30   @ bitWidth 1 (no description available)  
        .equ Ethernet_MAC_MACA1HR_AE, 1 << 31   @ bitWidth 1 (no description available)  
 
    .equ Ethernet_MAC_MACA1LR, Ethernet_MAC_BASE + 0x4C @ (Ethernet MAC address1 low  register) 
        .equ Ethernet_MAC_MACA1LR_MACA1LR_Shift, 0   @ bitWidth 32 (no description available)  
 
    .equ Ethernet_MAC_MACA2HR, Ethernet_MAC_BASE + 0x50 @ (Ethernet MAC address 2 high  register) 
        .equ Ethernet_MAC_MACA2HR_MAC2AH_Shift, 0   @ bitWidth 16 (no description available)  
        .equ Ethernet_MAC_MACA2HR_MBC_Shift, 24   @ bitWidth 6 (no description available)  
        .equ Ethernet_MAC_MACA2HR_SA, 1 << 30   @ bitWidth 1 (no description available)  
        .equ Ethernet_MAC_MACA2HR_AE, 1 << 31   @ bitWidth 1 (no description available)  
 
    .equ Ethernet_MAC_MACA2LR, Ethernet_MAC_BASE + 0x54 @ (Ethernet MAC address 2 low  register) 
        .equ Ethernet_MAC_MACA2LR_MACA2L_Shift, 0   @ bitWidth 31 (no description available)  
 
    .equ Ethernet_MAC_MACA3HR, Ethernet_MAC_BASE + 0x58 @ (Ethernet MAC address 3 high  register) 
        .equ Ethernet_MAC_MACA3HR_MACA3H_Shift, 0   @ bitWidth 16 (no description available)  
        .equ Ethernet_MAC_MACA3HR_MBC_Shift, 24   @ bitWidth 6 (no description available)  
        .equ Ethernet_MAC_MACA3HR_SA, 1 << 30   @ bitWidth 1 (no description available)  
        .equ Ethernet_MAC_MACA3HR_AE, 1 << 31   @ bitWidth 1 (no description available)  
 
    .equ Ethernet_MAC_MACA3LR, Ethernet_MAC_BASE + 0x5C @ (Ethernet MAC address 3 low  register) 
        .equ Ethernet_MAC_MACA3LR_MBCA3L_Shift, 0   @ bitWidth 32 (no description available)  
 

@=========================== Ethernet_MMC ===========================@
.equ Ethernet_MMC_BASE, 0x40028100 @ (Ethernet: MAC management counters) 
    .equ Ethernet_MMC_MMCCR, Ethernet_MMC_BASE + 0x0 @ (Ethernet MMC control register) 
        .equ Ethernet_MMC_MMCCR_CR, 1 << 0   @ bitWidth 1 (no description available)  
        .equ Ethernet_MMC_MMCCR_CSR, 1 << 1   @ bitWidth 1 (no description available)  
        .equ Ethernet_MMC_MMCCR_ROR, 1 << 2   @ bitWidth 1 (no description available)  
        .equ Ethernet_MMC_MMCCR_MCF, 1 << 3   @ bitWidth 1 (no description available)  
        .equ Ethernet_MMC_MMCCR_MCP, 1 << 4   @ bitWidth 1 (no description available)  
        .equ Ethernet_MMC_MMCCR_MCFHP, 1 << 5   @ bitWidth 1 (no description available)  
 
    .equ Ethernet_MMC_MMCRIR, Ethernet_MMC_BASE + 0x4 @ (Ethernet MMC receive interrupt  register) 
        .equ Ethernet_MMC_MMCRIR_RFCES, 1 << 5   @ bitWidth 1 (no description available)  
        .equ Ethernet_MMC_MMCRIR_RFAES, 1 << 6   @ bitWidth 1 (no description available)  
        .equ Ethernet_MMC_MMCRIR_RGUFS, 1 << 17   @ bitWidth 1 (no description available)  
 
    .equ Ethernet_MMC_MMCTIR, Ethernet_MMC_BASE + 0x8 @ (Ethernet MMC transmit interrupt  register) 
        .equ Ethernet_MMC_MMCTIR_TGFSCS, 1 << 14   @ bitWidth 1 (no description available)  
        .equ Ethernet_MMC_MMCTIR_TGFMSCS, 1 << 15   @ bitWidth 1 (no description available)  
        .equ Ethernet_MMC_MMCTIR_TGFS, 1 << 21   @ bitWidth 1 (no description available)  
 
    .equ Ethernet_MMC_MMCRIMR, Ethernet_MMC_BASE + 0xC @ (Ethernet MMC receive interrupt mask  register) 
        .equ Ethernet_MMC_MMCRIMR_RFCEM, 1 << 5   @ bitWidth 1 (no description available)  
        .equ Ethernet_MMC_MMCRIMR_RFAEM, 1 << 6   @ bitWidth 1 (no description available)  
        .equ Ethernet_MMC_MMCRIMR_RGUFM, 1 << 17   @ bitWidth 1 (no description available)  
 
    .equ Ethernet_MMC_MMCTIMR, Ethernet_MMC_BASE + 0x10 @ (Ethernet MMC transmit interrupt mask  register) 
        .equ Ethernet_MMC_MMCTIMR_TGFSCM, 1 << 14   @ bitWidth 1 (no description available)  
        .equ Ethernet_MMC_MMCTIMR_TGFMSCM, 1 << 15   @ bitWidth 1 (no description available)  
        .equ Ethernet_MMC_MMCTIMR_TGFM, 1 << 16   @ bitWidth 1 (no description available)  
 
    .equ Ethernet_MMC_MMCTGFSCCR, Ethernet_MMC_BASE + 0x4C @ (Ethernet MMC transmitted good frames after a  single collision counter) 
        .equ Ethernet_MMC_MMCTGFSCCR_TGFSCC_Shift, 0   @ bitWidth 32 (no description available)  
 
    .equ Ethernet_MMC_MMCTGFMSCCR, Ethernet_MMC_BASE + 0x50 @ (Ethernet MMC transmitted good frames after  more than a single collision) 
        .equ Ethernet_MMC_MMCTGFMSCCR_TGFMSCC_Shift, 0   @ bitWidth 32 (no description available)  
 
    .equ Ethernet_MMC_MMCTGFCR, Ethernet_MMC_BASE + 0x68 @ (Ethernet MMC transmitted good frames counter  register) 
        .equ Ethernet_MMC_MMCTGFCR_TGFC_Shift, 0   @ bitWidth 32 (HTL)  
 
    .equ Ethernet_MMC_MMCRFCECR, Ethernet_MMC_BASE + 0x94 @ (Ethernet MMC received frames with CRC error  counter register) 
        .equ Ethernet_MMC_MMCRFCECR_RFCFC_Shift, 0   @ bitWidth 32 (no description available)  
 
    .equ Ethernet_MMC_MMCRFAECR, Ethernet_MMC_BASE + 0x98 @ (Ethernet MMC received frames with alignment  error counter register) 
        .equ Ethernet_MMC_MMCRFAECR_RFAEC_Shift, 0   @ bitWidth 32 (no description available)  
 
    .equ Ethernet_MMC_MMCRGUFCR, Ethernet_MMC_BASE + 0xC4 @ (MMC received good unicast frames counter  register) 
        .equ Ethernet_MMC_MMCRGUFCR_RGUFC_Shift, 0   @ bitWidth 32 (no description available)  
 

@=========================== Ethernet_PTP ===========================@
.equ Ethernet_PTP_BASE, 0x40028700 @ (Ethernet: Precision time protocol) 
    .equ Ethernet_PTP_PTPTSCR, Ethernet_PTP_BASE + 0x0 @ (Ethernet PTP time stamp control  register) 
        .equ Ethernet_PTP_PTPTSCR_TSE, 1 << 0   @ bitWidth 1 (no description available)  
        .equ Ethernet_PTP_PTPTSCR_TSFCU, 1 << 1   @ bitWidth 1 (no description available)  
        .equ Ethernet_PTP_PTPTSCR_TSPTPPSV2E, 1 << 10   @ bitWidth 1 (no description available)  
        .equ Ethernet_PTP_PTPTSCR_TSSPTPOEFE, 1 << 11   @ bitWidth 1 (no description available)  
        .equ Ethernet_PTP_PTPTSCR_TSSIPV6FE, 1 << 12   @ bitWidth 1 (no description available)  
        .equ Ethernet_PTP_PTPTSCR_TSSIPV4FE, 1 << 13   @ bitWidth 1 (no description available)  
        .equ Ethernet_PTP_PTPTSCR_TSSEME, 1 << 14   @ bitWidth 1 (no description available)  
        .equ Ethernet_PTP_PTPTSCR_TSSMRME, 1 << 15   @ bitWidth 1 (no description available)  
        .equ Ethernet_PTP_PTPTSCR_TSCNT_Shift, 16   @ bitWidth 2 (no description available)  
        .equ Ethernet_PTP_PTPTSCR_TSPFFMAE, 1 << 18   @ bitWidth 1 (no description available)  
        .equ Ethernet_PTP_PTPTSCR_TSSTI, 1 << 2   @ bitWidth 1 (no description available)  
        .equ Ethernet_PTP_PTPTSCR_TSSTU, 1 << 3   @ bitWidth 1 (no description available)  
        .equ Ethernet_PTP_PTPTSCR_TSITE, 1 << 4   @ bitWidth 1 (no description available)  
        .equ Ethernet_PTP_PTPTSCR_TTSARU, 1 << 5   @ bitWidth 1 (no description available)  
        .equ Ethernet_PTP_PTPTSCR_TSSARFE, 1 << 8   @ bitWidth 1 (no description available)  
        .equ Ethernet_PTP_PTPTSCR_TSSSR, 1 << 9   @ bitWidth 1 (no description available)  
 
    .equ Ethernet_PTP_PTPSSIR, Ethernet_PTP_BASE + 0x4 @ (Ethernet PTP subsecond increment  register) 
        .equ Ethernet_PTP_PTPSSIR_STSSI_Shift, 0   @ bitWidth 8 (no description available)  
 
    .equ Ethernet_PTP_PTPTSHR, Ethernet_PTP_BASE + 0x8 @ (Ethernet PTP time stamp high  register) 
        .equ Ethernet_PTP_PTPTSHR_STS_Shift, 0   @ bitWidth 32 (no description available)  
 
    .equ Ethernet_PTP_PTPTSLR, Ethernet_PTP_BASE + 0xC @ (Ethernet PTP time stamp low  register) 
        .equ Ethernet_PTP_PTPTSLR_STSS_Shift, 0   @ bitWidth 31 (no description available)  
        .equ Ethernet_PTP_PTPTSLR_STPNS, 1 << 31   @ bitWidth 1 (no description available)  
 
    .equ Ethernet_PTP_PTPTSHUR, Ethernet_PTP_BASE + 0x10 @ (Ethernet PTP time stamp high update  register) 
        .equ Ethernet_PTP_PTPTSHUR_TSUS_Shift, 0   @ bitWidth 32 (no description available)  
 
    .equ Ethernet_PTP_PTPTSLUR, Ethernet_PTP_BASE + 0x14 @ (Ethernet PTP time stamp low update  register) 
        .equ Ethernet_PTP_PTPTSLUR_TSUSS_Shift, 0   @ bitWidth 31 (no description available)  
        .equ Ethernet_PTP_PTPTSLUR_TSUPNS, 1 << 31   @ bitWidth 1 (no description available)  
 
    .equ Ethernet_PTP_PTPTSAR, Ethernet_PTP_BASE + 0x18 @ (Ethernet PTP time stamp addend  register) 
        .equ Ethernet_PTP_PTPTSAR_TSA_Shift, 0   @ bitWidth 32 (no description available)  
 
    .equ Ethernet_PTP_PTPTTHR, Ethernet_PTP_BASE + 0x1C @ (Ethernet PTP target time high  register) 
        .equ Ethernet_PTP_PTPTTHR_TTSH_Shift, 0   @ bitWidth 32 (0)  
 
    .equ Ethernet_PTP_PTPTTLR, Ethernet_PTP_BASE + 0x20 @ (Ethernet PTP target time low  register) 
        .equ Ethernet_PTP_PTPTTLR_TTSL_Shift, 0   @ bitWidth 32 (no description available)  
 
    .equ Ethernet_PTP_PTPTSSR, Ethernet_PTP_BASE + 0x28 @ (Ethernet PTP time stamp status  register) 
        .equ Ethernet_PTP_PTPTSSR_TSSO, 1 << 0   @ bitWidth 1 (no description available)  
        .equ Ethernet_PTP_PTPTSSR_TSTTR, 1 << 1   @ bitWidth 1 (no description available)  
 
    .equ Ethernet_PTP_PTPPPSCR, Ethernet_PTP_BASE + 0x2C @ (Ethernet PTP PPS control  register) 
        .equ Ethernet_PTP_PTPPPSCR_TSSO, 1 << 0   @ bitWidth 1 (TSSO)  
        .equ Ethernet_PTP_PTPPPSCR_TSTTR, 1 << 1   @ bitWidth 1 (TSTTR)  
 

@=========================== Ethernet_DMA ===========================@
.equ Ethernet_DMA_BASE, 0x40029000 @ (Ethernet: DMA controller operation) 
    .equ Ethernet_DMA_DMABMR, Ethernet_DMA_BASE + 0x0 @ (Ethernet DMA bus mode register) 
        .equ Ethernet_DMA_DMABMR_SR, 1 << 0   @ bitWidth 1 (no description available)  
        .equ Ethernet_DMA_DMABMR_DA, 1 << 1   @ bitWidth 1 (no description available)  
        .equ Ethernet_DMA_DMABMR_DSL_Shift, 2   @ bitWidth 5 (no description available)  
        .equ Ethernet_DMA_DMABMR_EDFE, 1 << 7   @ bitWidth 1 (no description available)  
        .equ Ethernet_DMA_DMABMR_PBL_Shift, 8   @ bitWidth 6 (no description available)  
        .equ Ethernet_DMA_DMABMR_RTPR_Shift, 14   @ bitWidth 2 (no description available)  
        .equ Ethernet_DMA_DMABMR_FB, 1 << 16   @ bitWidth 1 (no description available)  
        .equ Ethernet_DMA_DMABMR_RDP_Shift, 17   @ bitWidth 6 (no description available)  
        .equ Ethernet_DMA_DMABMR_USP, 1 << 23   @ bitWidth 1 (no description available)  
        .equ Ethernet_DMA_DMABMR_FPM, 1 << 24   @ bitWidth 1 (no description available)  
        .equ Ethernet_DMA_DMABMR_AAB, 1 << 25   @ bitWidth 1 (no description available)  
        .equ Ethernet_DMA_DMABMR_MB, 1 << 26   @ bitWidth 1 (no description available)  
 
    .equ Ethernet_DMA_DMATPDR, Ethernet_DMA_BASE + 0x4 @ (Ethernet DMA transmit poll demand  register) 
        .equ Ethernet_DMA_DMATPDR_TPD_Shift, 0   @ bitWidth 32 (no description available)  
 
    .equ Ethernet_DMA_DMARPDR, Ethernet_DMA_BASE + 0x8 @ (EHERNET DMA receive poll demand  register) 
        .equ Ethernet_DMA_DMARPDR_RPD_Shift, 0   @ bitWidth 32 (RPD)  
 
    .equ Ethernet_DMA_DMARDLAR, Ethernet_DMA_BASE + 0xC @ (Ethernet DMA receive descriptor list address  register) 
        .equ Ethernet_DMA_DMARDLAR_SRL_Shift, 0   @ bitWidth 32 (no description available)  
 
    .equ Ethernet_DMA_DMATDLAR, Ethernet_DMA_BASE + 0x10 @ (Ethernet DMA transmit descriptor list  address register) 
        .equ Ethernet_DMA_DMATDLAR_STL_Shift, 0   @ bitWidth 32 (no description available)  
 
    .equ Ethernet_DMA_DMASR, Ethernet_DMA_BASE + 0x14 @ (Ethernet DMA status register) 
        .equ Ethernet_DMA_DMASR_TS, 1 << 0   @ bitWidth 1 (no description available)  
        .equ Ethernet_DMA_DMASR_TPSS, 1 << 1   @ bitWidth 1 (no description available)  
        .equ Ethernet_DMA_DMASR_TBUS, 1 << 2   @ bitWidth 1 (no description available)  
        .equ Ethernet_DMA_DMASR_TJTS, 1 << 3   @ bitWidth 1 (no description available)  
        .equ Ethernet_DMA_DMASR_ROS, 1 << 4   @ bitWidth 1 (no description available)  
        .equ Ethernet_DMA_DMASR_TUS, 1 << 5   @ bitWidth 1 (no description available)  
        .equ Ethernet_DMA_DMASR_RS, 1 << 6   @ bitWidth 1 (no description available)  
        .equ Ethernet_DMA_DMASR_RBUS, 1 << 7   @ bitWidth 1 (no description available)  
        .equ Ethernet_DMA_DMASR_RPSS, 1 << 8   @ bitWidth 1 (no description available)  
        .equ Ethernet_DMA_DMASR_PWTS, 1 << 9   @ bitWidth 1 (no description available)  
        .equ Ethernet_DMA_DMASR_ETS, 1 << 10   @ bitWidth 1 (no description available)  
        .equ Ethernet_DMA_DMASR_FBES, 1 << 13   @ bitWidth 1 (no description available)  
        .equ Ethernet_DMA_DMASR_ERS, 1 << 14   @ bitWidth 1 (no description available)  
        .equ Ethernet_DMA_DMASR_AIS, 1 << 15   @ bitWidth 1 (no description available)  
        .equ Ethernet_DMA_DMASR_NIS, 1 << 16   @ bitWidth 1 (no description available)  
        .equ Ethernet_DMA_DMASR_RPS_Shift, 17   @ bitWidth 3 (no description available)  
        .equ Ethernet_DMA_DMASR_TPS_Shift, 20   @ bitWidth 3 (no description available)  
        .equ Ethernet_DMA_DMASR_EBS_Shift, 23   @ bitWidth 3 (no description available)  
        .equ Ethernet_DMA_DMASR_MMCS, 1 << 27   @ bitWidth 1 (no description available)  
        .equ Ethernet_DMA_DMASR_PMTS, 1 << 28   @ bitWidth 1 (no description available)  
        .equ Ethernet_DMA_DMASR_TSTS, 1 << 29   @ bitWidth 1 (no description available)  
 
    .equ Ethernet_DMA_DMAOMR, Ethernet_DMA_BASE + 0x18 @ (Ethernet DMA operation mode  register) 
        .equ Ethernet_DMA_DMAOMR_SR, 1 << 1   @ bitWidth 1 (SR)  
        .equ Ethernet_DMA_DMAOMR_OSF, 1 << 2   @ bitWidth 1 (OSF)  
        .equ Ethernet_DMA_DMAOMR_RTC_Shift, 3   @ bitWidth 2 (RTC)  
        .equ Ethernet_DMA_DMAOMR_FUGF, 1 << 6   @ bitWidth 1 (FUGF)  
        .equ Ethernet_DMA_DMAOMR_FEF, 1 << 7   @ bitWidth 1 (FEF)  
        .equ Ethernet_DMA_DMAOMR_ST, 1 << 13   @ bitWidth 1 (ST)  
        .equ Ethernet_DMA_DMAOMR_TTC_Shift, 14   @ bitWidth 3 (TTC)  
        .equ Ethernet_DMA_DMAOMR_FTF, 1 << 20   @ bitWidth 1 (FTF)  
        .equ Ethernet_DMA_DMAOMR_TSF, 1 << 21   @ bitWidth 1 (TSF)  
        .equ Ethernet_DMA_DMAOMR_DFRF, 1 << 24   @ bitWidth 1 (DFRF)  
        .equ Ethernet_DMA_DMAOMR_RSF, 1 << 25   @ bitWidth 1 (RSF)  
        .equ Ethernet_DMA_DMAOMR_DTCEFD, 1 << 26   @ bitWidth 1 (DTCEFD)  
 
    .equ Ethernet_DMA_DMAIER, Ethernet_DMA_BASE + 0x1C @ (Ethernet DMA interrupt enable  register) 
        .equ Ethernet_DMA_DMAIER_TIE, 1 << 0   @ bitWidth 1 (no description available)  
        .equ Ethernet_DMA_DMAIER_TPSIE, 1 << 1   @ bitWidth 1 (no description available)  
        .equ Ethernet_DMA_DMAIER_TBUIE, 1 << 2   @ bitWidth 1 (no description available)  
        .equ Ethernet_DMA_DMAIER_TJTIE, 1 << 3   @ bitWidth 1 (no description available)  
        .equ Ethernet_DMA_DMAIER_ROIE, 1 << 4   @ bitWidth 1 (no description available)  
        .equ Ethernet_DMA_DMAIER_TUIE, 1 << 5   @ bitWidth 1 (no description available)  
        .equ Ethernet_DMA_DMAIER_RIE, 1 << 6   @ bitWidth 1 (no description available)  
        .equ Ethernet_DMA_DMAIER_RBUIE, 1 << 7   @ bitWidth 1 (no description available)  
        .equ Ethernet_DMA_DMAIER_RPSIE, 1 << 8   @ bitWidth 1 (no description available)  
        .equ Ethernet_DMA_DMAIER_RWTIE, 1 << 9   @ bitWidth 1 (no description available)  
        .equ Ethernet_DMA_DMAIER_ETIE, 1 << 10   @ bitWidth 1 (no description available)  
        .equ Ethernet_DMA_DMAIER_FBEIE, 1 << 13   @ bitWidth 1 (no description available)  
        .equ Ethernet_DMA_DMAIER_ERIE, 1 << 14   @ bitWidth 1 (no description available)  
        .equ Ethernet_DMA_DMAIER_AISE, 1 << 15   @ bitWidth 1 (no description available)  
        .equ Ethernet_DMA_DMAIER_NISE, 1 << 16   @ bitWidth 1 (no description available)  
 
    .equ Ethernet_DMA_DMAMFBOCR, Ethernet_DMA_BASE + 0x20 @ (Ethernet DMA missed frame and buffer  overflow counter register) 
        .equ Ethernet_DMA_DMAMFBOCR_MFC_Shift, 0   @ bitWidth 16 (no description available)  
        .equ Ethernet_DMA_DMAMFBOCR_OMFC, 1 << 16   @ bitWidth 1 (no description available)  
        .equ Ethernet_DMA_DMAMFBOCR_MFA_Shift, 17   @ bitWidth 11 (no description available)  
        .equ Ethernet_DMA_DMAMFBOCR_OFOC, 1 << 28   @ bitWidth 1 (no description available)  
 
    .equ Ethernet_DMA_DMARSWTR, Ethernet_DMA_BASE + 0x24 @ (Ethernet DMA receive status watchdog timer  register) 
        .equ Ethernet_DMA_DMARSWTR_RSWTC_Shift, 0   @ bitWidth 8 (RSWTC)  
 
    .equ Ethernet_DMA_DMACHTDR, Ethernet_DMA_BASE + 0x48 @ (Ethernet DMA current host transmit  descriptor register) 
        .equ Ethernet_DMA_DMACHTDR_HTDAP_Shift, 0   @ bitWidth 32 (HTDAP)  
 
    .equ Ethernet_DMA_DMACHRDR, Ethernet_DMA_BASE + 0x4C @ (Ethernet DMA current host receive descriptor  register) 
        .equ Ethernet_DMA_DMACHRDR_HRDAP_Shift, 0   @ bitWidth 32 (HRDAP)  
 
    .equ Ethernet_DMA_DMACHTBAR, Ethernet_DMA_BASE + 0x50 @ (Ethernet DMA current host transmit buffer  address register) 
        .equ Ethernet_DMA_DMACHTBAR_HTBAP_Shift, 0   @ bitWidth 32 (no description available)  
 
    .equ Ethernet_DMA_DMACHRBAR, Ethernet_DMA_BASE + 0x54 @ (Ethernet DMA current host receive buffer  address register) 
        .equ Ethernet_DMA_DMACHRBAR_HRBAP_Shift, 0   @ bitWidth 32 (no description available)  
 

@=========================== CRC ===========================@
.equ CRC_BASE, 0x40023000 @ (Cryptographic processor) 
    .equ CRC_DR, CRC_BASE + 0x0 @ (Data register) 
        .equ CRC_DR_DR_Shift, 0   @ bitWidth 32 (Data Register)  
 
    .equ CRC_IDR, CRC_BASE + 0x4 @ (Independent Data register) 
        .equ CRC_IDR_IDR_Shift, 0   @ bitWidth 8 (Independent Data register)  
 
    .equ CRC_CR, CRC_BASE + 0x8 @ (Control register) 
        .equ CRC_CR_CR, 1 << 0   @ bitWidth 1 (Control regidter)  
 

@=========================== OTG_FS_GLOBAL ===========================@
.equ OTG_FS_GLOBAL_BASE, 0x50000000 @ (USB on the go full speed) 
    .equ OTG_FS_GLOBAL_FS_GOTGCTL, OTG_FS_GLOBAL_BASE + 0x0 @ (OTG_FS control and status register  OTG_FS_GOTGCTL) 
        .equ OTG_FS_GLOBAL_FS_GOTGCTL_SRQSCS, 1 << 0   @ bitWidth 1 (Session request success)  
        .equ OTG_FS_GLOBAL_FS_GOTGCTL_SRQ, 1 << 1   @ bitWidth 1 (Session request)  
        .equ OTG_FS_GLOBAL_FS_GOTGCTL_HNGSCS, 1 << 8   @ bitWidth 1 (Host negotiation success)  
        .equ OTG_FS_GLOBAL_FS_GOTGCTL_HNPRQ, 1 << 9   @ bitWidth 1 (HNP request)  
        .equ OTG_FS_GLOBAL_FS_GOTGCTL_HSHNPEN, 1 << 10   @ bitWidth 1 (Host set HNP enable)  
        .equ OTG_FS_GLOBAL_FS_GOTGCTL_DHNPEN, 1 << 11   @ bitWidth 1 (Device HNP enabled)  
        .equ OTG_FS_GLOBAL_FS_GOTGCTL_CIDSTS, 1 << 16   @ bitWidth 1 (Connector ID status)  
        .equ OTG_FS_GLOBAL_FS_GOTGCTL_DBCT, 1 << 17   @ bitWidth 1 (Long/short debounce time)  
        .equ OTG_FS_GLOBAL_FS_GOTGCTL_ASVLD, 1 << 18   @ bitWidth 1 (A-session valid)  
        .equ OTG_FS_GLOBAL_FS_GOTGCTL_BSVLD, 1 << 19   @ bitWidth 1 (B-session valid)  
 
    .equ OTG_FS_GLOBAL_FS_GOTGINT, OTG_FS_GLOBAL_BASE + 0x4 @ (OTG_FS interrupt register  OTG_FS_GOTGINT) 
        .equ OTG_FS_GLOBAL_FS_GOTGINT_SEDET, 1 << 2   @ bitWidth 1 (Session end detected)  
        .equ OTG_FS_GLOBAL_FS_GOTGINT_SRSSCHG, 1 << 8   @ bitWidth 1 (Session request success status  change)  
        .equ OTG_FS_GLOBAL_FS_GOTGINT_HNSSCHG, 1 << 9   @ bitWidth 1 (Host negotiation success status  change)  
        .equ OTG_FS_GLOBAL_FS_GOTGINT_HNGDET, 1 << 17   @ bitWidth 1 (Host negotiation detected)  
        .equ OTG_FS_GLOBAL_FS_GOTGINT_ADTOCHG, 1 << 18   @ bitWidth 1 (A-device timeout change)  
        .equ OTG_FS_GLOBAL_FS_GOTGINT_DBCDNE, 1 << 19   @ bitWidth 1 (Debounce done)  
 
    .equ OTG_FS_GLOBAL_FS_GAHBCFG, OTG_FS_GLOBAL_BASE + 0x8 @ (OTG_FS AHB configuration register  OTG_FS_GAHBCFG) 
        .equ OTG_FS_GLOBAL_FS_GAHBCFG_GINT, 1 << 0   @ bitWidth 1 (Global interrupt mask)  
        .equ OTG_FS_GLOBAL_FS_GAHBCFG_TXFELVL, 1 << 7   @ bitWidth 1 (TxFIFO empty level)  
        .equ OTG_FS_GLOBAL_FS_GAHBCFG_PTXFELVL, 1 << 8   @ bitWidth 1 (Periodic TxFIFO empty  level)  
 
    .equ OTG_FS_GLOBAL_FS_GUSBCFG, OTG_FS_GLOBAL_BASE + 0xC @ (OTG_FS USB configuration register  OTG_FS_GUSBCFG) 
        .equ OTG_FS_GLOBAL_FS_GUSBCFG_TOCAL_Shift, 0   @ bitWidth 3 (FS timeout calibration)  
        .equ OTG_FS_GLOBAL_FS_GUSBCFG_PHYSEL, 1 << 6   @ bitWidth 1 (Full Speed serial transceiver  select)  
        .equ OTG_FS_GLOBAL_FS_GUSBCFG_SRPCAP, 1 << 8   @ bitWidth 1 (SRP-capable)  
        .equ OTG_FS_GLOBAL_FS_GUSBCFG_HNPCAP, 1 << 9   @ bitWidth 1 (HNP-capable)  
        .equ OTG_FS_GLOBAL_FS_GUSBCFG_TRDT_Shift, 10   @ bitWidth 4 (USB turnaround time)  
        .equ OTG_FS_GLOBAL_FS_GUSBCFG_FHMOD, 1 << 29   @ bitWidth 1 (Force host mode)  
        .equ OTG_FS_GLOBAL_FS_GUSBCFG_FDMOD, 1 << 30   @ bitWidth 1 (Force device mode)  
        .equ OTG_FS_GLOBAL_FS_GUSBCFG_CTXPKT, 1 << 31   @ bitWidth 1 (Corrupt Tx packet)  
 
    .equ OTG_FS_GLOBAL_FS_GRSTCTL, OTG_FS_GLOBAL_BASE + 0x10 @ (OTG_FS reset register  OTG_FS_GRSTCTL) 
        .equ OTG_FS_GLOBAL_FS_GRSTCTL_CSRST, 1 << 0   @ bitWidth 1 (Core soft reset)  
        .equ OTG_FS_GLOBAL_FS_GRSTCTL_HSRST, 1 << 1   @ bitWidth 1 (HCLK soft reset)  
        .equ OTG_FS_GLOBAL_FS_GRSTCTL_FCRST, 1 << 2   @ bitWidth 1 (Host frame counter reset)  
        .equ OTG_FS_GLOBAL_FS_GRSTCTL_RXFFLSH, 1 << 4   @ bitWidth 1 (RxFIFO flush)  
        .equ OTG_FS_GLOBAL_FS_GRSTCTL_TXFFLSH, 1 << 5   @ bitWidth 1 (TxFIFO flush)  
        .equ OTG_FS_GLOBAL_FS_GRSTCTL_TXFNUM_Shift, 6   @ bitWidth 5 (TxFIFO number)  
        .equ OTG_FS_GLOBAL_FS_GRSTCTL_AHBIDL, 1 << 31   @ bitWidth 1 (AHB master idle)  
 
    .equ OTG_FS_GLOBAL_FS_GINTSTS, OTG_FS_GLOBAL_BASE + 0x14 @ (OTG_FS core interrupt register  OTG_FS_GINTSTS) 
        .equ OTG_FS_GLOBAL_FS_GINTSTS_CMOD, 1 << 0   @ bitWidth 1 (Current mode of operation)  
        .equ OTG_FS_GLOBAL_FS_GINTSTS_MMIS, 1 << 1   @ bitWidth 1 (Mode mismatch interrupt)  
        .equ OTG_FS_GLOBAL_FS_GINTSTS_OTGINT, 1 << 2   @ bitWidth 1 (OTG interrupt)  
        .equ OTG_FS_GLOBAL_FS_GINTSTS_SOF, 1 << 3   @ bitWidth 1 (Start of frame)  
        .equ OTG_FS_GLOBAL_FS_GINTSTS_RXFLVL, 1 << 4   @ bitWidth 1 (RxFIFO non-empty)  
        .equ OTG_FS_GLOBAL_FS_GINTSTS_NPTXFE, 1 << 5   @ bitWidth 1 (Non-periodic TxFIFO empty)  
        .equ OTG_FS_GLOBAL_FS_GINTSTS_GINAKEFF, 1 << 6   @ bitWidth 1 (Global IN non-periodic NAK  effective)  
        .equ OTG_FS_GLOBAL_FS_GINTSTS_GOUTNAKEFF, 1 << 7   @ bitWidth 1 (Global OUT NAK effective)  
        .equ OTG_FS_GLOBAL_FS_GINTSTS_ESUSP, 1 << 10   @ bitWidth 1 (Early suspend)  
        .equ OTG_FS_GLOBAL_FS_GINTSTS_USBSUSP, 1 << 11   @ bitWidth 1 (USB suspend)  
        .equ OTG_FS_GLOBAL_FS_GINTSTS_USBRST, 1 << 12   @ bitWidth 1 (USB reset)  
        .equ OTG_FS_GLOBAL_FS_GINTSTS_ENUMDNE, 1 << 13   @ bitWidth 1 (Enumeration done)  
        .equ OTG_FS_GLOBAL_FS_GINTSTS_ISOODRP, 1 << 14   @ bitWidth 1 (Isochronous OUT packet dropped  interrupt)  
        .equ OTG_FS_GLOBAL_FS_GINTSTS_EOPF, 1 << 15   @ bitWidth 1 (End of periodic frame  interrupt)  
        .equ OTG_FS_GLOBAL_FS_GINTSTS_IEPINT, 1 << 18   @ bitWidth 1 (IN endpoint interrupt)  
        .equ OTG_FS_GLOBAL_FS_GINTSTS_OEPINT, 1 << 19   @ bitWidth 1 (OUT endpoint interrupt)  
        .equ OTG_FS_GLOBAL_FS_GINTSTS_IISOIXFR, 1 << 20   @ bitWidth 1 (Incomplete isochronous IN  transfer)  
        .equ OTG_FS_GLOBAL_FS_GINTSTS_IPXFR_INCOMPISOOUT, 1 << 21   @ bitWidth 1 (Incomplete periodic transferHost  mode/Incomplete isochronous OUT transferDevice  mode)  
        .equ OTG_FS_GLOBAL_FS_GINTSTS_HPRTINT, 1 << 24   @ bitWidth 1 (Host port interrupt)  
        .equ OTG_FS_GLOBAL_FS_GINTSTS_HCINT, 1 << 25   @ bitWidth 1 (Host channels interrupt)  
        .equ OTG_FS_GLOBAL_FS_GINTSTS_PTXFE, 1 << 26   @ bitWidth 1 (Periodic TxFIFO empty)  
        .equ OTG_FS_GLOBAL_FS_GINTSTS_CIDSCHG, 1 << 28   @ bitWidth 1 (Connector ID status change)  
        .equ OTG_FS_GLOBAL_FS_GINTSTS_DISCINT, 1 << 29   @ bitWidth 1 (Disconnect detected  interrupt)  
        .equ OTG_FS_GLOBAL_FS_GINTSTS_SRQINT, 1 << 30   @ bitWidth 1 (Session request/new session detected  interrupt)  
        .equ OTG_FS_GLOBAL_FS_GINTSTS_WKUPINT, 1 << 31   @ bitWidth 1 (Resume/remote wakeup detected  interrupt)  
 
    .equ OTG_FS_GLOBAL_FS_GINTMSK, OTG_FS_GLOBAL_BASE + 0x18 @ (OTG_FS interrupt mask register  OTG_FS_GINTMSK) 
        .equ OTG_FS_GLOBAL_FS_GINTMSK_MMISM, 1 << 1   @ bitWidth 1 (Mode mismatch interrupt  mask)  
        .equ OTG_FS_GLOBAL_FS_GINTMSK_OTGINT, 1 << 2   @ bitWidth 1 (OTG interrupt mask)  
        .equ OTG_FS_GLOBAL_FS_GINTMSK_SOFM, 1 << 3   @ bitWidth 1 (Start of frame mask)  
        .equ OTG_FS_GLOBAL_FS_GINTMSK_RXFLVLM, 1 << 4   @ bitWidth 1 (Receive FIFO non-empty  mask)  
        .equ OTG_FS_GLOBAL_FS_GINTMSK_NPTXFEM, 1 << 5   @ bitWidth 1 (Non-periodic TxFIFO empty  mask)  
        .equ OTG_FS_GLOBAL_FS_GINTMSK_GINAKEFFM, 1 << 6   @ bitWidth 1 (Global non-periodic IN NAK effective  mask)  
        .equ OTG_FS_GLOBAL_FS_GINTMSK_GONAKEFFM, 1 << 7   @ bitWidth 1 (Global OUT NAK effective  mask)  
        .equ OTG_FS_GLOBAL_FS_GINTMSK_ESUSPM, 1 << 10   @ bitWidth 1 (Early suspend mask)  
        .equ OTG_FS_GLOBAL_FS_GINTMSK_USBSUSPM, 1 << 11   @ bitWidth 1 (USB suspend mask)  
        .equ OTG_FS_GLOBAL_FS_GINTMSK_USBRST, 1 << 12   @ bitWidth 1 (USB reset mask)  
        .equ OTG_FS_GLOBAL_FS_GINTMSK_ENUMDNEM, 1 << 13   @ bitWidth 1 (Enumeration done mask)  
        .equ OTG_FS_GLOBAL_FS_GINTMSK_ISOODRPM, 1 << 14   @ bitWidth 1 (Isochronous OUT packet dropped interrupt  mask)  
        .equ OTG_FS_GLOBAL_FS_GINTMSK_EOPFM, 1 << 15   @ bitWidth 1 (End of periodic frame interrupt  mask)  
        .equ OTG_FS_GLOBAL_FS_GINTMSK_EPMISM, 1 << 17   @ bitWidth 1 (Endpoint mismatch interrupt  mask)  
        .equ OTG_FS_GLOBAL_FS_GINTMSK_IEPINT, 1 << 18   @ bitWidth 1 (IN endpoints interrupt  mask)  
        .equ OTG_FS_GLOBAL_FS_GINTMSK_OEPINT, 1 << 19   @ bitWidth 1 (OUT endpoints interrupt  mask)  
        .equ OTG_FS_GLOBAL_FS_GINTMSK_IISOIXFRM, 1 << 20   @ bitWidth 1 (Incomplete isochronous IN transfer  mask)  
        .equ OTG_FS_GLOBAL_FS_GINTMSK_IPXFRM_IISOOXFRM, 1 << 21   @ bitWidth 1 (Incomplete periodic transfer maskHost  mode/Incomplete isochronous OUT transfer maskDevice  mode)  
        .equ OTG_FS_GLOBAL_FS_GINTMSK_PRTIM, 1 << 24   @ bitWidth 1 (Host port interrupt mask)  
        .equ OTG_FS_GLOBAL_FS_GINTMSK_HCIM, 1 << 25   @ bitWidth 1 (Host channels interrupt  mask)  
        .equ OTG_FS_GLOBAL_FS_GINTMSK_PTXFEM, 1 << 26   @ bitWidth 1 (Periodic TxFIFO empty mask)  
        .equ OTG_FS_GLOBAL_FS_GINTMSK_CIDSCHGM, 1 << 28   @ bitWidth 1 (Connector ID status change  mask)  
        .equ OTG_FS_GLOBAL_FS_GINTMSK_DISCINT, 1 << 29   @ bitWidth 1 (Disconnect detected interrupt  mask)  
        .equ OTG_FS_GLOBAL_FS_GINTMSK_SRQIM, 1 << 30   @ bitWidth 1 (Session request/new session detected  interrupt mask)  
        .equ OTG_FS_GLOBAL_FS_GINTMSK_WUIM, 1 << 31   @ bitWidth 1 (Resume/remote wakeup detected interrupt  mask)  
 
    .equ OTG_FS_GLOBAL_FS_GRXSTSR_Device, OTG_FS_GLOBAL_BASE + 0x1C @ (OTG_FS Receive status debug readDevice  mode) 
        .equ OTG_FS_GLOBAL_FS_GRXSTSR_Device_EPNUM_Shift, 0   @ bitWidth 4 (Endpoint number)  
        .equ OTG_FS_GLOBAL_FS_GRXSTSR_Device_BCNT_Shift, 4   @ bitWidth 11 (Byte count)  
        .equ OTG_FS_GLOBAL_FS_GRXSTSR_Device_DPID_Shift, 15   @ bitWidth 2 (Data PID)  
        .equ OTG_FS_GLOBAL_FS_GRXSTSR_Device_PKTSTS_Shift, 17   @ bitWidth 4 (Packet status)  
        .equ OTG_FS_GLOBAL_FS_GRXSTSR_Device_FRMNUM_Shift, 21   @ bitWidth 4 (Frame number)  
 
    .equ OTG_FS_GLOBAL_FS_GRXSTSR_Host, OTG_FS_GLOBAL_BASE + 0x1C @ (OTG_FS Receive status debug readHost  mode) 
        .equ OTG_FS_GLOBAL_FS_GRXSTSR_Host_EPNUM_Shift, 0   @ bitWidth 4 (Endpoint number)  
        .equ OTG_FS_GLOBAL_FS_GRXSTSR_Host_BCNT_Shift, 4   @ bitWidth 11 (Byte count)  
        .equ OTG_FS_GLOBAL_FS_GRXSTSR_Host_DPID_Shift, 15   @ bitWidth 2 (Data PID)  
        .equ OTG_FS_GLOBAL_FS_GRXSTSR_Host_PKTSTS_Shift, 17   @ bitWidth 4 (Packet status)  
        .equ OTG_FS_GLOBAL_FS_GRXSTSR_Host_FRMNUM_Shift, 21   @ bitWidth 4 (Frame number)  
 
    .equ OTG_FS_GLOBAL_FS_GRXFSIZ, OTG_FS_GLOBAL_BASE + 0x24 @ (OTG_FS Receive FIFO size register  OTG_FS_GRXFSIZ) 
        .equ OTG_FS_GLOBAL_FS_GRXFSIZ_RXFD_Shift, 0   @ bitWidth 16 (RxFIFO depth)  
 
    .equ OTG_FS_GLOBAL_FS_GNPTXFSIZ_Device, OTG_FS_GLOBAL_BASE + 0x28 @ (OTG_FS non-periodic transmit FIFO size  register Device mode) 
        .equ OTG_FS_GLOBAL_FS_GNPTXFSIZ_Device_TX0FSA_Shift, 0   @ bitWidth 16 (Endpoint 0 transmit RAM start  address)  
        .equ OTG_FS_GLOBAL_FS_GNPTXFSIZ_Device_TX0FD_Shift, 16   @ bitWidth 16 (Endpoint 0 TxFIFO depth)  
 
    .equ OTG_FS_GLOBAL_FS_GNPTXFSIZ_Host, OTG_FS_GLOBAL_BASE + 0x28 @ (OTG_FS non-periodic transmit FIFO size  register Host mode) 
        .equ OTG_FS_GLOBAL_FS_GNPTXFSIZ_Host_NPTXFSA_Shift, 0   @ bitWidth 16 (Non-periodic transmit RAM start  address)  
        .equ OTG_FS_GLOBAL_FS_GNPTXFSIZ_Host_NPTXFD_Shift, 16   @ bitWidth 16 (Non-periodic TxFIFO depth)  
 
    .equ OTG_FS_GLOBAL_FS_GNPTXSTS, OTG_FS_GLOBAL_BASE + 0x2C @ (OTG_FS non-periodic transmit FIFO/queue  status register OTG_FS_GNPTXSTS) 
        .equ OTG_FS_GLOBAL_FS_GNPTXSTS_NPTXFSAV_Shift, 0   @ bitWidth 16 (Non-periodic TxFIFO space  available)  
        .equ OTG_FS_GLOBAL_FS_GNPTXSTS_NPTQXSAV_Shift, 16   @ bitWidth 8 (Non-periodic transmit request queue  space available)  
        .equ OTG_FS_GLOBAL_FS_GNPTXSTS_NPTXQTOP_Shift, 24   @ bitWidth 7 (Top of the non-periodic transmit request  queue)  
 
    .equ OTG_FS_GLOBAL_FS_GCCFG, OTG_FS_GLOBAL_BASE + 0x38 @ (OTG_FS general core configuration register  OTG_FS_GCCFG) 
        .equ OTG_FS_GLOBAL_FS_GCCFG_PWRDWN, 1 << 16   @ bitWidth 1 (Power down)  
        .equ OTG_FS_GLOBAL_FS_GCCFG_VBUSASEN, 1 << 18   @ bitWidth 1 (Enable the VBUS sensing  device)  
        .equ OTG_FS_GLOBAL_FS_GCCFG_VBUSBSEN, 1 << 19   @ bitWidth 1 (Enable the VBUS sensing  device)  
        .equ OTG_FS_GLOBAL_FS_GCCFG_SOFOUTEN, 1 << 20   @ bitWidth 1 (SOF output enable)  
 
    .equ OTG_FS_GLOBAL_FS_CID, OTG_FS_GLOBAL_BASE + 0x3C @ (core ID register) 
        .equ OTG_FS_GLOBAL_FS_CID_PRODUCT_ID_Shift, 0   @ bitWidth 32 (Product ID field)  
 
    .equ OTG_FS_GLOBAL_FS_HPTXFSIZ, OTG_FS_GLOBAL_BASE + 0x100 @ (OTG_FS Host periodic transmit FIFO size  register OTG_FS_HPTXFSIZ) 
        .equ OTG_FS_GLOBAL_FS_HPTXFSIZ_PTXSA_Shift, 0   @ bitWidth 16 (Host periodic TxFIFO start  address)  
        .equ OTG_FS_GLOBAL_FS_HPTXFSIZ_PTXFSIZ_Shift, 16   @ bitWidth 16 (Host periodic TxFIFO depth)  
 
    .equ OTG_FS_GLOBAL_FS_DIEPTXF1, OTG_FS_GLOBAL_BASE + 0x104 @ (OTG_FS device IN endpoint transmit FIFO size  register OTG_FS_DIEPTXF2) 
        .equ OTG_FS_GLOBAL_FS_DIEPTXF1_INEPTXSA_Shift, 0   @ bitWidth 16 (IN endpoint FIFO2 transmit RAM start  address)  
        .equ OTG_FS_GLOBAL_FS_DIEPTXF1_INEPTXFD_Shift, 16   @ bitWidth 16 (IN endpoint TxFIFO depth)  
 
    .equ OTG_FS_GLOBAL_FS_DIEPTXF2, OTG_FS_GLOBAL_BASE + 0x108 @ (OTG_FS device IN endpoint transmit FIFO size  register OTG_FS_DIEPTXF3) 
        .equ OTG_FS_GLOBAL_FS_DIEPTXF2_INEPTXSA_Shift, 0   @ bitWidth 16 (IN endpoint FIFO3 transmit RAM start  address)  
        .equ OTG_FS_GLOBAL_FS_DIEPTXF2_INEPTXFD_Shift, 16   @ bitWidth 16 (IN endpoint TxFIFO depth)  
 
    .equ OTG_FS_GLOBAL_FS_DIEPTXF3, OTG_FS_GLOBAL_BASE + 0x10C @ (OTG_FS device IN endpoint transmit FIFO size  register OTG_FS_DIEPTXF4) 
        .equ OTG_FS_GLOBAL_FS_DIEPTXF3_INEPTXSA_Shift, 0   @ bitWidth 16 (IN endpoint FIFO4 transmit RAM start  address)  
        .equ OTG_FS_GLOBAL_FS_DIEPTXF3_INEPTXFD_Shift, 16   @ bitWidth 16 (IN endpoint TxFIFO depth)  
 

@=========================== OTG_FS_HOST ===========================@
.equ OTG_FS_HOST_BASE, 0x50000400 @ (USB on the go full speed) 
    .equ OTG_FS_HOST_FS_HCFG, OTG_FS_HOST_BASE + 0x0 @ (OTG_FS host configuration register  OTG_FS_HCFG) 
        .equ OTG_FS_HOST_FS_HCFG_FSLSPCS_Shift, 0   @ bitWidth 2 (FS/LS PHY clock select)  
        .equ OTG_FS_HOST_FS_HCFG_FSLSS, 1 << 2   @ bitWidth 1 (FS- and LS-only support)  
 
    .equ OTG_FS_HOST_HFIR, OTG_FS_HOST_BASE + 0x4 @ (OTG_FS Host frame interval  register) 
        .equ OTG_FS_HOST_HFIR_FRIVL_Shift, 0   @ bitWidth 16 (Frame interval)  
 
    .equ OTG_FS_HOST_FS_HFNUM, OTG_FS_HOST_BASE + 0x8 @ (OTG_FS host frame number/frame time  remaining register OTG_FS_HFNUM) 
        .equ OTG_FS_HOST_FS_HFNUM_FRNUM_Shift, 0   @ bitWidth 16 (Frame number)  
        .equ OTG_FS_HOST_FS_HFNUM_FTREM_Shift, 16   @ bitWidth 16 (Frame time remaining)  
 
    .equ OTG_FS_HOST_FS_HPTXSTS, OTG_FS_HOST_BASE + 0x10 @ (OTG_FS_Host periodic transmit FIFO/queue  status register OTG_FS_HPTXSTS) 
        .equ OTG_FS_HOST_FS_HPTXSTS_PTXFSAVL_Shift, 0   @ bitWidth 16 (Periodic transmit data FIFO space  available)  
        .equ OTG_FS_HOST_FS_HPTXSTS_PTXQSAV_Shift, 16   @ bitWidth 8 (Periodic transmit request queue space  available)  
        .equ OTG_FS_HOST_FS_HPTXSTS_PTXQTOP_Shift, 24   @ bitWidth 8 (Top of the periodic transmit request  queue)  
 
    .equ OTG_FS_HOST_HAINT, OTG_FS_HOST_BASE + 0x14 @ (OTG_FS Host all channels interrupt  register) 
        .equ OTG_FS_HOST_HAINT_HAINT_Shift, 0   @ bitWidth 16 (Channel interrupts)  
 
    .equ OTG_FS_HOST_HAINTMSK, OTG_FS_HOST_BASE + 0x18 @ (OTG_FS host all channels interrupt mask  register) 
        .equ OTG_FS_HOST_HAINTMSK_HAINTM_Shift, 0   @ bitWidth 16 (Channel interrupt mask)  
 
    .equ OTG_FS_HOST_FS_HPRT, OTG_FS_HOST_BASE + 0x40 @ (OTG_FS host port control and status register  OTG_FS_HPRT) 
        .equ OTG_FS_HOST_FS_HPRT_PCSTS, 1 << 0   @ bitWidth 1 (Port connect status)  
        .equ OTG_FS_HOST_FS_HPRT_PCDET, 1 << 1   @ bitWidth 1 (Port connect detected)  
        .equ OTG_FS_HOST_FS_HPRT_PENA, 1 << 2   @ bitWidth 1 (Port enable)  
        .equ OTG_FS_HOST_FS_HPRT_PENCHNG, 1 << 3   @ bitWidth 1 (Port enable/disable change)  
        .equ OTG_FS_HOST_FS_HPRT_POCA, 1 << 4   @ bitWidth 1 (Port overcurrent active)  
        .equ OTG_FS_HOST_FS_HPRT_POCCHNG, 1 << 5   @ bitWidth 1 (Port overcurrent change)  
        .equ OTG_FS_HOST_FS_HPRT_PRES, 1 << 6   @ bitWidth 1 (Port resume)  
        .equ OTG_FS_HOST_FS_HPRT_PSUSP, 1 << 7   @ bitWidth 1 (Port suspend)  
        .equ OTG_FS_HOST_FS_HPRT_PRST, 1 << 8   @ bitWidth 1 (Port reset)  
        .equ OTG_FS_HOST_FS_HPRT_PLSTS_Shift, 10   @ bitWidth 2 (Port line status)  
        .equ OTG_FS_HOST_FS_HPRT_PPWR, 1 << 12   @ bitWidth 1 (Port power)  
        .equ OTG_FS_HOST_FS_HPRT_PTCTL_Shift, 13   @ bitWidth 4 (Port test control)  
        .equ OTG_FS_HOST_FS_HPRT_PSPD_Shift, 17   @ bitWidth 2 (Port speed)  
 
    .equ OTG_FS_HOST_FS_HCCHAR0, OTG_FS_HOST_BASE + 0x100 @ (OTG_FS host channel-0 characteristics  register OTG_FS_HCCHAR0) 
        .equ OTG_FS_HOST_FS_HCCHAR0_MPSIZ_Shift, 0   @ bitWidth 11 (Maximum packet size)  
        .equ OTG_FS_HOST_FS_HCCHAR0_EPNUM_Shift, 11   @ bitWidth 4 (Endpoint number)  
        .equ OTG_FS_HOST_FS_HCCHAR0_EPDIR, 1 << 15   @ bitWidth 1 (Endpoint direction)  
        .equ OTG_FS_HOST_FS_HCCHAR0_LSDEV, 1 << 17   @ bitWidth 1 (Low-speed device)  
        .equ OTG_FS_HOST_FS_HCCHAR0_EPTYP_Shift, 18   @ bitWidth 2 (Endpoint type)  
        .equ OTG_FS_HOST_FS_HCCHAR0_MCNT_Shift, 20   @ bitWidth 2 (Multicount)  
        .equ OTG_FS_HOST_FS_HCCHAR0_DAD_Shift, 22   @ bitWidth 7 (Device address)  
        .equ OTG_FS_HOST_FS_HCCHAR0_ODDFRM, 1 << 29   @ bitWidth 1 (Odd frame)  
        .equ OTG_FS_HOST_FS_HCCHAR0_CHDIS, 1 << 30   @ bitWidth 1 (Channel disable)  
        .equ OTG_FS_HOST_FS_HCCHAR0_CHENA, 1 << 31   @ bitWidth 1 (Channel enable)  
 
    .equ OTG_FS_HOST_FS_HCCHAR1, OTG_FS_HOST_BASE + 0x120 @ (OTG_FS host channel-1 characteristics  register OTG_FS_HCCHAR1) 
        .equ OTG_FS_HOST_FS_HCCHAR1_MPSIZ_Shift, 0   @ bitWidth 11 (Maximum packet size)  
        .equ OTG_FS_HOST_FS_HCCHAR1_EPNUM_Shift, 11   @ bitWidth 4 (Endpoint number)  
        .equ OTG_FS_HOST_FS_HCCHAR1_EPDIR, 1 << 15   @ bitWidth 1 (Endpoint direction)  
        .equ OTG_FS_HOST_FS_HCCHAR1_LSDEV, 1 << 17   @ bitWidth 1 (Low-speed device)  
        .equ OTG_FS_HOST_FS_HCCHAR1_EPTYP_Shift, 18   @ bitWidth 2 (Endpoint type)  
        .equ OTG_FS_HOST_FS_HCCHAR1_MCNT_Shift, 20   @ bitWidth 2 (Multicount)  
        .equ OTG_FS_HOST_FS_HCCHAR1_DAD_Shift, 22   @ bitWidth 7 (Device address)  
        .equ OTG_FS_HOST_FS_HCCHAR1_ODDFRM, 1 << 29   @ bitWidth 1 (Odd frame)  
        .equ OTG_FS_HOST_FS_HCCHAR1_CHDIS, 1 << 30   @ bitWidth 1 (Channel disable)  
        .equ OTG_FS_HOST_FS_HCCHAR1_CHENA, 1 << 31   @ bitWidth 1 (Channel enable)  
 
    .equ OTG_FS_HOST_FS_HCCHAR2, OTG_FS_HOST_BASE + 0x140 @ (OTG_FS host channel-2 characteristics  register OTG_FS_HCCHAR2) 
        .equ OTG_FS_HOST_FS_HCCHAR2_MPSIZ_Shift, 0   @ bitWidth 11 (Maximum packet size)  
        .equ OTG_FS_HOST_FS_HCCHAR2_EPNUM_Shift, 11   @ bitWidth 4 (Endpoint number)  
        .equ OTG_FS_HOST_FS_HCCHAR2_EPDIR, 1 << 15   @ bitWidth 1 (Endpoint direction)  
        .equ OTG_FS_HOST_FS_HCCHAR2_LSDEV, 1 << 17   @ bitWidth 1 (Low-speed device)  
        .equ OTG_FS_HOST_FS_HCCHAR2_EPTYP_Shift, 18   @ bitWidth 2 (Endpoint type)  
        .equ OTG_FS_HOST_FS_HCCHAR2_MCNT_Shift, 20   @ bitWidth 2 (Multicount)  
        .equ OTG_FS_HOST_FS_HCCHAR2_DAD_Shift, 22   @ bitWidth 7 (Device address)  
        .equ OTG_FS_HOST_FS_HCCHAR2_ODDFRM, 1 << 29   @ bitWidth 1 (Odd frame)  
        .equ OTG_FS_HOST_FS_HCCHAR2_CHDIS, 1 << 30   @ bitWidth 1 (Channel disable)  
        .equ OTG_FS_HOST_FS_HCCHAR2_CHENA, 1 << 31   @ bitWidth 1 (Channel enable)  
 
    .equ OTG_FS_HOST_FS_HCCHAR3, OTG_FS_HOST_BASE + 0x160 @ (OTG_FS host channel-3 characteristics  register OTG_FS_HCCHAR3) 
        .equ OTG_FS_HOST_FS_HCCHAR3_MPSIZ_Shift, 0   @ bitWidth 11 (Maximum packet size)  
        .equ OTG_FS_HOST_FS_HCCHAR3_EPNUM_Shift, 11   @ bitWidth 4 (Endpoint number)  
        .equ OTG_FS_HOST_FS_HCCHAR3_EPDIR, 1 << 15   @ bitWidth 1 (Endpoint direction)  
        .equ OTG_FS_HOST_FS_HCCHAR3_LSDEV, 1 << 17   @ bitWidth 1 (Low-speed device)  
        .equ OTG_FS_HOST_FS_HCCHAR3_EPTYP_Shift, 18   @ bitWidth 2 (Endpoint type)  
        .equ OTG_FS_HOST_FS_HCCHAR3_MCNT_Shift, 20   @ bitWidth 2 (Multicount)  
        .equ OTG_FS_HOST_FS_HCCHAR3_DAD_Shift, 22   @ bitWidth 7 (Device address)  
        .equ OTG_FS_HOST_FS_HCCHAR3_ODDFRM, 1 << 29   @ bitWidth 1 (Odd frame)  
        .equ OTG_FS_HOST_FS_HCCHAR3_CHDIS, 1 << 30   @ bitWidth 1 (Channel disable)  
        .equ OTG_FS_HOST_FS_HCCHAR3_CHENA, 1 << 31   @ bitWidth 1 (Channel enable)  
 
    .equ OTG_FS_HOST_FS_HCCHAR4, OTG_FS_HOST_BASE + 0x180 @ (OTG_FS host channel-4 characteristics  register OTG_FS_HCCHAR4) 
        .equ OTG_FS_HOST_FS_HCCHAR4_MPSIZ_Shift, 0   @ bitWidth 11 (Maximum packet size)  
        .equ OTG_FS_HOST_FS_HCCHAR4_EPNUM_Shift, 11   @ bitWidth 4 (Endpoint number)  
        .equ OTG_FS_HOST_FS_HCCHAR4_EPDIR, 1 << 15   @ bitWidth 1 (Endpoint direction)  
        .equ OTG_FS_HOST_FS_HCCHAR4_LSDEV, 1 << 17   @ bitWidth 1 (Low-speed device)  
        .equ OTG_FS_HOST_FS_HCCHAR4_EPTYP_Shift, 18   @ bitWidth 2 (Endpoint type)  
        .equ OTG_FS_HOST_FS_HCCHAR4_MCNT_Shift, 20   @ bitWidth 2 (Multicount)  
        .equ OTG_FS_HOST_FS_HCCHAR4_DAD_Shift, 22   @ bitWidth 7 (Device address)  
        .equ OTG_FS_HOST_FS_HCCHAR4_ODDFRM, 1 << 29   @ bitWidth 1 (Odd frame)  
        .equ OTG_FS_HOST_FS_HCCHAR4_CHDIS, 1 << 30   @ bitWidth 1 (Channel disable)  
        .equ OTG_FS_HOST_FS_HCCHAR4_CHENA, 1 << 31   @ bitWidth 1 (Channel enable)  
 
    .equ OTG_FS_HOST_FS_HCCHAR5, OTG_FS_HOST_BASE + 0x1A0 @ (OTG_FS host channel-5 characteristics  register OTG_FS_HCCHAR5) 
        .equ OTG_FS_HOST_FS_HCCHAR5_MPSIZ_Shift, 0   @ bitWidth 11 (Maximum packet size)  
        .equ OTG_FS_HOST_FS_HCCHAR5_EPNUM_Shift, 11   @ bitWidth 4 (Endpoint number)  
        .equ OTG_FS_HOST_FS_HCCHAR5_EPDIR, 1 << 15   @ bitWidth 1 (Endpoint direction)  
        .equ OTG_FS_HOST_FS_HCCHAR5_LSDEV, 1 << 17   @ bitWidth 1 (Low-speed device)  
        .equ OTG_FS_HOST_FS_HCCHAR5_EPTYP_Shift, 18   @ bitWidth 2 (Endpoint type)  
        .equ OTG_FS_HOST_FS_HCCHAR5_MCNT_Shift, 20   @ bitWidth 2 (Multicount)  
        .equ OTG_FS_HOST_FS_HCCHAR5_DAD_Shift, 22   @ bitWidth 7 (Device address)  
        .equ OTG_FS_HOST_FS_HCCHAR5_ODDFRM, 1 << 29   @ bitWidth 1 (Odd frame)  
        .equ OTG_FS_HOST_FS_HCCHAR5_CHDIS, 1 << 30   @ bitWidth 1 (Channel disable)  
        .equ OTG_FS_HOST_FS_HCCHAR5_CHENA, 1 << 31   @ bitWidth 1 (Channel enable)  
 
    .equ OTG_FS_HOST_FS_HCCHAR6, OTG_FS_HOST_BASE + 0x1C0 @ (OTG_FS host channel-6 characteristics  register OTG_FS_HCCHAR6) 
        .equ OTG_FS_HOST_FS_HCCHAR6_MPSIZ_Shift, 0   @ bitWidth 11 (Maximum packet size)  
        .equ OTG_FS_HOST_FS_HCCHAR6_EPNUM_Shift, 11   @ bitWidth 4 (Endpoint number)  
        .equ OTG_FS_HOST_FS_HCCHAR6_EPDIR, 1 << 15   @ bitWidth 1 (Endpoint direction)  
        .equ OTG_FS_HOST_FS_HCCHAR6_LSDEV, 1 << 17   @ bitWidth 1 (Low-speed device)  
        .equ OTG_FS_HOST_FS_HCCHAR6_EPTYP_Shift, 18   @ bitWidth 2 (Endpoint type)  
        .equ OTG_FS_HOST_FS_HCCHAR6_MCNT_Shift, 20   @ bitWidth 2 (Multicount)  
        .equ OTG_FS_HOST_FS_HCCHAR6_DAD_Shift, 22   @ bitWidth 7 (Device address)  
        .equ OTG_FS_HOST_FS_HCCHAR6_ODDFRM, 1 << 29   @ bitWidth 1 (Odd frame)  
        .equ OTG_FS_HOST_FS_HCCHAR6_CHDIS, 1 << 30   @ bitWidth 1 (Channel disable)  
        .equ OTG_FS_HOST_FS_HCCHAR6_CHENA, 1 << 31   @ bitWidth 1 (Channel enable)  
 
    .equ OTG_FS_HOST_FS_HCCHAR7, OTG_FS_HOST_BASE + 0x1E0 @ (OTG_FS host channel-7 characteristics  register OTG_FS_HCCHAR7) 
        .equ OTG_FS_HOST_FS_HCCHAR7_MPSIZ_Shift, 0   @ bitWidth 11 (Maximum packet size)  
        .equ OTG_FS_HOST_FS_HCCHAR7_EPNUM_Shift, 11   @ bitWidth 4 (Endpoint number)  
        .equ OTG_FS_HOST_FS_HCCHAR7_EPDIR, 1 << 15   @ bitWidth 1 (Endpoint direction)  
        .equ OTG_FS_HOST_FS_HCCHAR7_LSDEV, 1 << 17   @ bitWidth 1 (Low-speed device)  
        .equ OTG_FS_HOST_FS_HCCHAR7_EPTYP_Shift, 18   @ bitWidth 2 (Endpoint type)  
        .equ OTG_FS_HOST_FS_HCCHAR7_MCNT_Shift, 20   @ bitWidth 2 (Multicount)  
        .equ OTG_FS_HOST_FS_HCCHAR7_DAD_Shift, 22   @ bitWidth 7 (Device address)  
        .equ OTG_FS_HOST_FS_HCCHAR7_ODDFRM, 1 << 29   @ bitWidth 1 (Odd frame)  
        .equ OTG_FS_HOST_FS_HCCHAR7_CHDIS, 1 << 30   @ bitWidth 1 (Channel disable)  
        .equ OTG_FS_HOST_FS_HCCHAR7_CHENA, 1 << 31   @ bitWidth 1 (Channel enable)  
 
    .equ OTG_FS_HOST_FS_HCINT0, OTG_FS_HOST_BASE + 0x108 @ (OTG_FS host channel-0 interrupt register  OTG_FS_HCINT0) 
        .equ OTG_FS_HOST_FS_HCINT0_XFRC, 1 << 0   @ bitWidth 1 (Transfer completed)  
        .equ OTG_FS_HOST_FS_HCINT0_CHH, 1 << 1   @ bitWidth 1 (Channel halted)  
        .equ OTG_FS_HOST_FS_HCINT0_STALL, 1 << 3   @ bitWidth 1 (STALL response received  interrupt)  
        .equ OTG_FS_HOST_FS_HCINT0_NAK, 1 << 4   @ bitWidth 1 (NAK response received  interrupt)  
        .equ OTG_FS_HOST_FS_HCINT0_ACK, 1 << 5   @ bitWidth 1 (ACK response received/transmitted  interrupt)  
        .equ OTG_FS_HOST_FS_HCINT0_TXERR, 1 << 7   @ bitWidth 1 (Transaction error)  
        .equ OTG_FS_HOST_FS_HCINT0_BBERR, 1 << 8   @ bitWidth 1 (Babble error)  
        .equ OTG_FS_HOST_FS_HCINT0_FRMOR, 1 << 9   @ bitWidth 1 (Frame overrun)  
        .equ OTG_FS_HOST_FS_HCINT0_DTERR, 1 << 10   @ bitWidth 1 (Data toggle error)  
 
    .equ OTG_FS_HOST_FS_HCINT1, OTG_FS_HOST_BASE + 0x128 @ (OTG_FS host channel-1 interrupt register  OTG_FS_HCINT1) 
        .equ OTG_FS_HOST_FS_HCINT1_XFRC, 1 << 0   @ bitWidth 1 (Transfer completed)  
        .equ OTG_FS_HOST_FS_HCINT1_CHH, 1 << 1   @ bitWidth 1 (Channel halted)  
        .equ OTG_FS_HOST_FS_HCINT1_STALL, 1 << 3   @ bitWidth 1 (STALL response received  interrupt)  
        .equ OTG_FS_HOST_FS_HCINT1_NAK, 1 << 4   @ bitWidth 1 (NAK response received  interrupt)  
        .equ OTG_FS_HOST_FS_HCINT1_ACK, 1 << 5   @ bitWidth 1 (ACK response received/transmitted  interrupt)  
        .equ OTG_FS_HOST_FS_HCINT1_TXERR, 1 << 7   @ bitWidth 1 (Transaction error)  
        .equ OTG_FS_HOST_FS_HCINT1_BBERR, 1 << 8   @ bitWidth 1 (Babble error)  
        .equ OTG_FS_HOST_FS_HCINT1_FRMOR, 1 << 9   @ bitWidth 1 (Frame overrun)  
        .equ OTG_FS_HOST_FS_HCINT1_DTERR, 1 << 10   @ bitWidth 1 (Data toggle error)  
 
    .equ OTG_FS_HOST_FS_HCINT2, OTG_FS_HOST_BASE + 0x148 @ (OTG_FS host channel-2 interrupt register  OTG_FS_HCINT2) 
        .equ OTG_FS_HOST_FS_HCINT2_XFRC, 1 << 0   @ bitWidth 1 (Transfer completed)  
        .equ OTG_FS_HOST_FS_HCINT2_CHH, 1 << 1   @ bitWidth 1 (Channel halted)  
        .equ OTG_FS_HOST_FS_HCINT2_STALL, 1 << 3   @ bitWidth 1 (STALL response received  interrupt)  
        .equ OTG_FS_HOST_FS_HCINT2_NAK, 1 << 4   @ bitWidth 1 (NAK response received  interrupt)  
        .equ OTG_FS_HOST_FS_HCINT2_ACK, 1 << 5   @ bitWidth 1 (ACK response received/transmitted  interrupt)  
        .equ OTG_FS_HOST_FS_HCINT2_TXERR, 1 << 7   @ bitWidth 1 (Transaction error)  
        .equ OTG_FS_HOST_FS_HCINT2_BBERR, 1 << 8   @ bitWidth 1 (Babble error)  
        .equ OTG_FS_HOST_FS_HCINT2_FRMOR, 1 << 9   @ bitWidth 1 (Frame overrun)  
        .equ OTG_FS_HOST_FS_HCINT2_DTERR, 1 << 10   @ bitWidth 1 (Data toggle error)  
 
    .equ OTG_FS_HOST_FS_HCINT3, OTG_FS_HOST_BASE + 0x168 @ (OTG_FS host channel-3 interrupt register  OTG_FS_HCINT3) 
        .equ OTG_FS_HOST_FS_HCINT3_XFRC, 1 << 0   @ bitWidth 1 (Transfer completed)  
        .equ OTG_FS_HOST_FS_HCINT3_CHH, 1 << 1   @ bitWidth 1 (Channel halted)  
        .equ OTG_FS_HOST_FS_HCINT3_STALL, 1 << 3   @ bitWidth 1 (STALL response received  interrupt)  
        .equ OTG_FS_HOST_FS_HCINT3_NAK, 1 << 4   @ bitWidth 1 (NAK response received  interrupt)  
        .equ OTG_FS_HOST_FS_HCINT3_ACK, 1 << 5   @ bitWidth 1 (ACK response received/transmitted  interrupt)  
        .equ OTG_FS_HOST_FS_HCINT3_TXERR, 1 << 7   @ bitWidth 1 (Transaction error)  
        .equ OTG_FS_HOST_FS_HCINT3_BBERR, 1 << 8   @ bitWidth 1 (Babble error)  
        .equ OTG_FS_HOST_FS_HCINT3_FRMOR, 1 << 9   @ bitWidth 1 (Frame overrun)  
        .equ OTG_FS_HOST_FS_HCINT3_DTERR, 1 << 10   @ bitWidth 1 (Data toggle error)  
 
    .equ OTG_FS_HOST_FS_HCINT4, OTG_FS_HOST_BASE + 0x188 @ (OTG_FS host channel-4 interrupt register  OTG_FS_HCINT4) 
        .equ OTG_FS_HOST_FS_HCINT4_XFRC, 1 << 0   @ bitWidth 1 (Transfer completed)  
        .equ OTG_FS_HOST_FS_HCINT4_CHH, 1 << 1   @ bitWidth 1 (Channel halted)  
        .equ OTG_FS_HOST_FS_HCINT4_STALL, 1 << 3   @ bitWidth 1 (STALL response received  interrupt)  
        .equ OTG_FS_HOST_FS_HCINT4_NAK, 1 << 4   @ bitWidth 1 (NAK response received  interrupt)  
        .equ OTG_FS_HOST_FS_HCINT4_ACK, 1 << 5   @ bitWidth 1 (ACK response received/transmitted  interrupt)  
        .equ OTG_FS_HOST_FS_HCINT4_TXERR, 1 << 7   @ bitWidth 1 (Transaction error)  
        .equ OTG_FS_HOST_FS_HCINT4_BBERR, 1 << 8   @ bitWidth 1 (Babble error)  
        .equ OTG_FS_HOST_FS_HCINT4_FRMOR, 1 << 9   @ bitWidth 1 (Frame overrun)  
        .equ OTG_FS_HOST_FS_HCINT4_DTERR, 1 << 10   @ bitWidth 1 (Data toggle error)  
 
    .equ OTG_FS_HOST_FS_HCINT5, OTG_FS_HOST_BASE + 0x1A8 @ (OTG_FS host channel-5 interrupt register  OTG_FS_HCINT5) 
        .equ OTG_FS_HOST_FS_HCINT5_XFRC, 1 << 0   @ bitWidth 1 (Transfer completed)  
        .equ OTG_FS_HOST_FS_HCINT5_CHH, 1 << 1   @ bitWidth 1 (Channel halted)  
        .equ OTG_FS_HOST_FS_HCINT5_STALL, 1 << 3   @ bitWidth 1 (STALL response received  interrupt)  
        .equ OTG_FS_HOST_FS_HCINT5_NAK, 1 << 4   @ bitWidth 1 (NAK response received  interrupt)  
        .equ OTG_FS_HOST_FS_HCINT5_ACK, 1 << 5   @ bitWidth 1 (ACK response received/transmitted  interrupt)  
        .equ OTG_FS_HOST_FS_HCINT5_TXERR, 1 << 7   @ bitWidth 1 (Transaction error)  
        .equ OTG_FS_HOST_FS_HCINT5_BBERR, 1 << 8   @ bitWidth 1 (Babble error)  
        .equ OTG_FS_HOST_FS_HCINT5_FRMOR, 1 << 9   @ bitWidth 1 (Frame overrun)  
        .equ OTG_FS_HOST_FS_HCINT5_DTERR, 1 << 10   @ bitWidth 1 (Data toggle error)  
 
    .equ OTG_FS_HOST_FS_HCINT6, OTG_FS_HOST_BASE + 0x1C8 @ (OTG_FS host channel-6 interrupt register  OTG_FS_HCINT6) 
        .equ OTG_FS_HOST_FS_HCINT6_XFRC, 1 << 0   @ bitWidth 1 (Transfer completed)  
        .equ OTG_FS_HOST_FS_HCINT6_CHH, 1 << 1   @ bitWidth 1 (Channel halted)  
        .equ OTG_FS_HOST_FS_HCINT6_STALL, 1 << 3   @ bitWidth 1 (STALL response received  interrupt)  
        .equ OTG_FS_HOST_FS_HCINT6_NAK, 1 << 4   @ bitWidth 1 (NAK response received  interrupt)  
        .equ OTG_FS_HOST_FS_HCINT6_ACK, 1 << 5   @ bitWidth 1 (ACK response received/transmitted  interrupt)  
        .equ OTG_FS_HOST_FS_HCINT6_TXERR, 1 << 7   @ bitWidth 1 (Transaction error)  
        .equ OTG_FS_HOST_FS_HCINT6_BBERR, 1 << 8   @ bitWidth 1 (Babble error)  
        .equ OTG_FS_HOST_FS_HCINT6_FRMOR, 1 << 9   @ bitWidth 1 (Frame overrun)  
        .equ OTG_FS_HOST_FS_HCINT6_DTERR, 1 << 10   @ bitWidth 1 (Data toggle error)  
 
    .equ OTG_FS_HOST_FS_HCINT7, OTG_FS_HOST_BASE + 0x1E8 @ (OTG_FS host channel-7 interrupt register  OTG_FS_HCINT7) 
        .equ OTG_FS_HOST_FS_HCINT7_XFRC, 1 << 0   @ bitWidth 1 (Transfer completed)  
        .equ OTG_FS_HOST_FS_HCINT7_CHH, 1 << 1   @ bitWidth 1 (Channel halted)  
        .equ OTG_FS_HOST_FS_HCINT7_STALL, 1 << 3   @ bitWidth 1 (STALL response received  interrupt)  
        .equ OTG_FS_HOST_FS_HCINT7_NAK, 1 << 4   @ bitWidth 1 (NAK response received  interrupt)  
        .equ OTG_FS_HOST_FS_HCINT7_ACK, 1 << 5   @ bitWidth 1 (ACK response received/transmitted  interrupt)  
        .equ OTG_FS_HOST_FS_HCINT7_TXERR, 1 << 7   @ bitWidth 1 (Transaction error)  
        .equ OTG_FS_HOST_FS_HCINT7_BBERR, 1 << 8   @ bitWidth 1 (Babble error)  
        .equ OTG_FS_HOST_FS_HCINT7_FRMOR, 1 << 9   @ bitWidth 1 (Frame overrun)  
        .equ OTG_FS_HOST_FS_HCINT7_DTERR, 1 << 10   @ bitWidth 1 (Data toggle error)  
 
    .equ OTG_FS_HOST_FS_HCINTMSK0, OTG_FS_HOST_BASE + 0x10C @ (OTG_FS host channel-0 mask register  OTG_FS_HCINTMSK0) 
        .equ OTG_FS_HOST_FS_HCINTMSK0_XFRCM, 1 << 0   @ bitWidth 1 (Transfer completed mask)  
        .equ OTG_FS_HOST_FS_HCINTMSK0_CHHM, 1 << 1   @ bitWidth 1 (Channel halted mask)  
        .equ OTG_FS_HOST_FS_HCINTMSK0_STALLM, 1 << 3   @ bitWidth 1 (STALL response received interrupt  mask)  
        .equ OTG_FS_HOST_FS_HCINTMSK0_NAKM, 1 << 4   @ bitWidth 1 (NAK response received interrupt  mask)  
        .equ OTG_FS_HOST_FS_HCINTMSK0_ACKM, 1 << 5   @ bitWidth 1 (ACK response received/transmitted  interrupt mask)  
        .equ OTG_FS_HOST_FS_HCINTMSK0_NYET, 1 << 6   @ bitWidth 1 (response received interrupt  mask)  
        .equ OTG_FS_HOST_FS_HCINTMSK0_TXERRM, 1 << 7   @ bitWidth 1 (Transaction error mask)  
        .equ OTG_FS_HOST_FS_HCINTMSK0_BBERRM, 1 << 8   @ bitWidth 1 (Babble error mask)  
        .equ OTG_FS_HOST_FS_HCINTMSK0_FRMORM, 1 << 9   @ bitWidth 1 (Frame overrun mask)  
        .equ OTG_FS_HOST_FS_HCINTMSK0_DTERRM, 1 << 10   @ bitWidth 1 (Data toggle error mask)  
 
    .equ OTG_FS_HOST_FS_HCINTMSK1, OTG_FS_HOST_BASE + 0x12C @ (OTG_FS host channel-1 mask register  OTG_FS_HCINTMSK1) 
        .equ OTG_FS_HOST_FS_HCINTMSK1_XFRCM, 1 << 0   @ bitWidth 1 (Transfer completed mask)  
        .equ OTG_FS_HOST_FS_HCINTMSK1_CHHM, 1 << 1   @ bitWidth 1 (Channel halted mask)  
        .equ OTG_FS_HOST_FS_HCINTMSK1_STALLM, 1 << 3   @ bitWidth 1 (STALL response received interrupt  mask)  
        .equ OTG_FS_HOST_FS_HCINTMSK1_NAKM, 1 << 4   @ bitWidth 1 (NAK response received interrupt  mask)  
        .equ OTG_FS_HOST_FS_HCINTMSK1_ACKM, 1 << 5   @ bitWidth 1 (ACK response received/transmitted  interrupt mask)  
        .equ OTG_FS_HOST_FS_HCINTMSK1_NYET, 1 << 6   @ bitWidth 1 (response received interrupt  mask)  
        .equ OTG_FS_HOST_FS_HCINTMSK1_TXERRM, 1 << 7   @ bitWidth 1 (Transaction error mask)  
        .equ OTG_FS_HOST_FS_HCINTMSK1_BBERRM, 1 << 8   @ bitWidth 1 (Babble error mask)  
        .equ OTG_FS_HOST_FS_HCINTMSK1_FRMORM, 1 << 9   @ bitWidth 1 (Frame overrun mask)  
        .equ OTG_FS_HOST_FS_HCINTMSK1_DTERRM, 1 << 10   @ bitWidth 1 (Data toggle error mask)  
 
    .equ OTG_FS_HOST_FS_HCINTMSK2, OTG_FS_HOST_BASE + 0x14C @ (OTG_FS host channel-2 mask register  OTG_FS_HCINTMSK2) 
        .equ OTG_FS_HOST_FS_HCINTMSK2_XFRCM, 1 << 0   @ bitWidth 1 (Transfer completed mask)  
        .equ OTG_FS_HOST_FS_HCINTMSK2_CHHM, 1 << 1   @ bitWidth 1 (Channel halted mask)  
        .equ OTG_FS_HOST_FS_HCINTMSK2_STALLM, 1 << 3   @ bitWidth 1 (STALL response received interrupt  mask)  
        .equ OTG_FS_HOST_FS_HCINTMSK2_NAKM, 1 << 4   @ bitWidth 1 (NAK response received interrupt  mask)  
        .equ OTG_FS_HOST_FS_HCINTMSK2_ACKM, 1 << 5   @ bitWidth 1 (ACK response received/transmitted  interrupt mask)  
        .equ OTG_FS_HOST_FS_HCINTMSK2_NYET, 1 << 6   @ bitWidth 1 (response received interrupt  mask)  
        .equ OTG_FS_HOST_FS_HCINTMSK2_TXERRM, 1 << 7   @ bitWidth 1 (Transaction error mask)  
        .equ OTG_FS_HOST_FS_HCINTMSK2_BBERRM, 1 << 8   @ bitWidth 1 (Babble error mask)  
        .equ OTG_FS_HOST_FS_HCINTMSK2_FRMORM, 1 << 9   @ bitWidth 1 (Frame overrun mask)  
        .equ OTG_FS_HOST_FS_HCINTMSK2_DTERRM, 1 << 10   @ bitWidth 1 (Data toggle error mask)  
 
    .equ OTG_FS_HOST_FS_HCINTMSK3, OTG_FS_HOST_BASE + 0x16C @ (OTG_FS host channel-3 mask register  OTG_FS_HCINTMSK3) 
        .equ OTG_FS_HOST_FS_HCINTMSK3_XFRCM, 1 << 0   @ bitWidth 1 (Transfer completed mask)  
        .equ OTG_FS_HOST_FS_HCINTMSK3_CHHM, 1 << 1   @ bitWidth 1 (Channel halted mask)  
        .equ OTG_FS_HOST_FS_HCINTMSK3_STALLM, 1 << 3   @ bitWidth 1 (STALL response received interrupt  mask)  
        .equ OTG_FS_HOST_FS_HCINTMSK3_NAKM, 1 << 4   @ bitWidth 1 (NAK response received interrupt  mask)  
        .equ OTG_FS_HOST_FS_HCINTMSK3_ACKM, 1 << 5   @ bitWidth 1 (ACK response received/transmitted  interrupt mask)  
        .equ OTG_FS_HOST_FS_HCINTMSK3_NYET, 1 << 6   @ bitWidth 1 (response received interrupt  mask)  
        .equ OTG_FS_HOST_FS_HCINTMSK3_TXERRM, 1 << 7   @ bitWidth 1 (Transaction error mask)  
        .equ OTG_FS_HOST_FS_HCINTMSK3_BBERRM, 1 << 8   @ bitWidth 1 (Babble error mask)  
        .equ OTG_FS_HOST_FS_HCINTMSK3_FRMORM, 1 << 9   @ bitWidth 1 (Frame overrun mask)  
        .equ OTG_FS_HOST_FS_HCINTMSK3_DTERRM, 1 << 10   @ bitWidth 1 (Data toggle error mask)  
 
    .equ OTG_FS_HOST_FS_HCINTMSK4, OTG_FS_HOST_BASE + 0x18C @ (OTG_FS host channel-4 mask register  OTG_FS_HCINTMSK4) 
        .equ OTG_FS_HOST_FS_HCINTMSK4_XFRCM, 1 << 0   @ bitWidth 1 (Transfer completed mask)  
        .equ OTG_FS_HOST_FS_HCINTMSK4_CHHM, 1 << 1   @ bitWidth 1 (Channel halted mask)  
        .equ OTG_FS_HOST_FS_HCINTMSK4_STALLM, 1 << 3   @ bitWidth 1 (STALL response received interrupt  mask)  
        .equ OTG_FS_HOST_FS_HCINTMSK4_NAKM, 1 << 4   @ bitWidth 1 (NAK response received interrupt  mask)  
        .equ OTG_FS_HOST_FS_HCINTMSK4_ACKM, 1 << 5   @ bitWidth 1 (ACK response received/transmitted  interrupt mask)  
        .equ OTG_FS_HOST_FS_HCINTMSK4_NYET, 1 << 6   @ bitWidth 1 (response received interrupt  mask)  
        .equ OTG_FS_HOST_FS_HCINTMSK4_TXERRM, 1 << 7   @ bitWidth 1 (Transaction error mask)  
        .equ OTG_FS_HOST_FS_HCINTMSK4_BBERRM, 1 << 8   @ bitWidth 1 (Babble error mask)  
        .equ OTG_FS_HOST_FS_HCINTMSK4_FRMORM, 1 << 9   @ bitWidth 1 (Frame overrun mask)  
        .equ OTG_FS_HOST_FS_HCINTMSK4_DTERRM, 1 << 10   @ bitWidth 1 (Data toggle error mask)  
 
    .equ OTG_FS_HOST_FS_HCINTMSK5, OTG_FS_HOST_BASE + 0x1AC @ (OTG_FS host channel-5 mask register  OTG_FS_HCINTMSK5) 
        .equ OTG_FS_HOST_FS_HCINTMSK5_XFRCM, 1 << 0   @ bitWidth 1 (Transfer completed mask)  
        .equ OTG_FS_HOST_FS_HCINTMSK5_CHHM, 1 << 1   @ bitWidth 1 (Channel halted mask)  
        .equ OTG_FS_HOST_FS_HCINTMSK5_STALLM, 1 << 3   @ bitWidth 1 (STALL response received interrupt  mask)  
        .equ OTG_FS_HOST_FS_HCINTMSK5_NAKM, 1 << 4   @ bitWidth 1 (NAK response received interrupt  mask)  
        .equ OTG_FS_HOST_FS_HCINTMSK5_ACKM, 1 << 5   @ bitWidth 1 (ACK response received/transmitted  interrupt mask)  
        .equ OTG_FS_HOST_FS_HCINTMSK5_NYET, 1 << 6   @ bitWidth 1 (response received interrupt  mask)  
        .equ OTG_FS_HOST_FS_HCINTMSK5_TXERRM, 1 << 7   @ bitWidth 1 (Transaction error mask)  
        .equ OTG_FS_HOST_FS_HCINTMSK5_BBERRM, 1 << 8   @ bitWidth 1 (Babble error mask)  
        .equ OTG_FS_HOST_FS_HCINTMSK5_FRMORM, 1 << 9   @ bitWidth 1 (Frame overrun mask)  
        .equ OTG_FS_HOST_FS_HCINTMSK5_DTERRM, 1 << 10   @ bitWidth 1 (Data toggle error mask)  
 
    .equ OTG_FS_HOST_FS_HCINTMSK6, OTG_FS_HOST_BASE + 0x1CC @ (OTG_FS host channel-6 mask register  OTG_FS_HCINTMSK6) 
        .equ OTG_FS_HOST_FS_HCINTMSK6_XFRCM, 1 << 0   @ bitWidth 1 (Transfer completed mask)  
        .equ OTG_FS_HOST_FS_HCINTMSK6_CHHM, 1 << 1   @ bitWidth 1 (Channel halted mask)  
        .equ OTG_FS_HOST_FS_HCINTMSK6_STALLM, 1 << 3   @ bitWidth 1 (STALL response received interrupt  mask)  
        .equ OTG_FS_HOST_FS_HCINTMSK6_NAKM, 1 << 4   @ bitWidth 1 (NAK response received interrupt  mask)  
        .equ OTG_FS_HOST_FS_HCINTMSK6_ACKM, 1 << 5   @ bitWidth 1 (ACK response received/transmitted  interrupt mask)  
        .equ OTG_FS_HOST_FS_HCINTMSK6_NYET, 1 << 6   @ bitWidth 1 (response received interrupt  mask)  
        .equ OTG_FS_HOST_FS_HCINTMSK6_TXERRM, 1 << 7   @ bitWidth 1 (Transaction error mask)  
        .equ OTG_FS_HOST_FS_HCINTMSK6_BBERRM, 1 << 8   @ bitWidth 1 (Babble error mask)  
        .equ OTG_FS_HOST_FS_HCINTMSK6_FRMORM, 1 << 9   @ bitWidth 1 (Frame overrun mask)  
        .equ OTG_FS_HOST_FS_HCINTMSK6_DTERRM, 1 << 10   @ bitWidth 1 (Data toggle error mask)  
 
    .equ OTG_FS_HOST_FS_HCINTMSK7, OTG_FS_HOST_BASE + 0x1EC @ (OTG_FS host channel-7 mask register  OTG_FS_HCINTMSK7) 
        .equ OTG_FS_HOST_FS_HCINTMSK7_XFRCM, 1 << 0   @ bitWidth 1 (Transfer completed mask)  
        .equ OTG_FS_HOST_FS_HCINTMSK7_CHHM, 1 << 1   @ bitWidth 1 (Channel halted mask)  
        .equ OTG_FS_HOST_FS_HCINTMSK7_STALLM, 1 << 3   @ bitWidth 1 (STALL response received interrupt  mask)  
        .equ OTG_FS_HOST_FS_HCINTMSK7_NAKM, 1 << 4   @ bitWidth 1 (NAK response received interrupt  mask)  
        .equ OTG_FS_HOST_FS_HCINTMSK7_ACKM, 1 << 5   @ bitWidth 1 (ACK response received/transmitted  interrupt mask)  
        .equ OTG_FS_HOST_FS_HCINTMSK7_NYET, 1 << 6   @ bitWidth 1 (response received interrupt  mask)  
        .equ OTG_FS_HOST_FS_HCINTMSK7_TXERRM, 1 << 7   @ bitWidth 1 (Transaction error mask)  
        .equ OTG_FS_HOST_FS_HCINTMSK7_BBERRM, 1 << 8   @ bitWidth 1 (Babble error mask)  
        .equ OTG_FS_HOST_FS_HCINTMSK7_FRMORM, 1 << 9   @ bitWidth 1 (Frame overrun mask)  
        .equ OTG_FS_HOST_FS_HCINTMSK7_DTERRM, 1 << 10   @ bitWidth 1 (Data toggle error mask)  
 
    .equ OTG_FS_HOST_FS_HCTSIZ0, OTG_FS_HOST_BASE + 0x110 @ (OTG_FS host channel-0 transfer size  register) 
        .equ OTG_FS_HOST_FS_HCTSIZ0_XFRSIZ_Shift, 0   @ bitWidth 19 (Transfer size)  
        .equ OTG_FS_HOST_FS_HCTSIZ0_PKTCNT_Shift, 19   @ bitWidth 10 (Packet count)  
        .equ OTG_FS_HOST_FS_HCTSIZ0_DPID_Shift, 29   @ bitWidth 2 (Data PID)  
 
    .equ OTG_FS_HOST_FS_HCTSIZ1, OTG_FS_HOST_BASE + 0x130 @ (OTG_FS host channel-1 transfer size  register) 
        .equ OTG_FS_HOST_FS_HCTSIZ1_XFRSIZ_Shift, 0   @ bitWidth 19 (Transfer size)  
        .equ OTG_FS_HOST_FS_HCTSIZ1_PKTCNT_Shift, 19   @ bitWidth 10 (Packet count)  
        .equ OTG_FS_HOST_FS_HCTSIZ1_DPID_Shift, 29   @ bitWidth 2 (Data PID)  
 
    .equ OTG_FS_HOST_FS_HCTSIZ2, OTG_FS_HOST_BASE + 0x150 @ (OTG_FS host channel-2 transfer size  register) 
        .equ OTG_FS_HOST_FS_HCTSIZ2_XFRSIZ_Shift, 0   @ bitWidth 19 (Transfer size)  
        .equ OTG_FS_HOST_FS_HCTSIZ2_PKTCNT_Shift, 19   @ bitWidth 10 (Packet count)  
        .equ OTG_FS_HOST_FS_HCTSIZ2_DPID_Shift, 29   @ bitWidth 2 (Data PID)  
 
    .equ OTG_FS_HOST_FS_HCTSIZ3, OTG_FS_HOST_BASE + 0x170 @ (OTG_FS host channel-3 transfer size  register) 
        .equ OTG_FS_HOST_FS_HCTSIZ3_XFRSIZ_Shift, 0   @ bitWidth 19 (Transfer size)  
        .equ OTG_FS_HOST_FS_HCTSIZ3_PKTCNT_Shift, 19   @ bitWidth 10 (Packet count)  
        .equ OTG_FS_HOST_FS_HCTSIZ3_DPID_Shift, 29   @ bitWidth 2 (Data PID)  
 
    .equ OTG_FS_HOST_FS_HCTSIZ4, OTG_FS_HOST_BASE + 0x190 @ (OTG_FS host channel-x transfer size  register) 
        .equ OTG_FS_HOST_FS_HCTSIZ4_XFRSIZ_Shift, 0   @ bitWidth 19 (Transfer size)  
        .equ OTG_FS_HOST_FS_HCTSIZ4_PKTCNT_Shift, 19   @ bitWidth 10 (Packet count)  
        .equ OTG_FS_HOST_FS_HCTSIZ4_DPID_Shift, 29   @ bitWidth 2 (Data PID)  
 
    .equ OTG_FS_HOST_FS_HCTSIZ5, OTG_FS_HOST_BASE + 0x1B0 @ (OTG_FS host channel-5 transfer size  register) 
        .equ OTG_FS_HOST_FS_HCTSIZ5_XFRSIZ_Shift, 0   @ bitWidth 19 (Transfer size)  
        .equ OTG_FS_HOST_FS_HCTSIZ5_PKTCNT_Shift, 19   @ bitWidth 10 (Packet count)  
        .equ OTG_FS_HOST_FS_HCTSIZ5_DPID_Shift, 29   @ bitWidth 2 (Data PID)  
 
    .equ OTG_FS_HOST_FS_HCTSIZ6, OTG_FS_HOST_BASE + 0x1D0 @ (OTG_FS host channel-6 transfer size  register) 
        .equ OTG_FS_HOST_FS_HCTSIZ6_XFRSIZ_Shift, 0   @ bitWidth 19 (Transfer size)  
        .equ OTG_FS_HOST_FS_HCTSIZ6_PKTCNT_Shift, 19   @ bitWidth 10 (Packet count)  
        .equ OTG_FS_HOST_FS_HCTSIZ6_DPID_Shift, 29   @ bitWidth 2 (Data PID)  
 
    .equ OTG_FS_HOST_FS_HCTSIZ7, OTG_FS_HOST_BASE + 0x1F0 @ (OTG_FS host channel-7 transfer size  register) 
        .equ OTG_FS_HOST_FS_HCTSIZ7_XFRSIZ_Shift, 0   @ bitWidth 19 (Transfer size)  
        .equ OTG_FS_HOST_FS_HCTSIZ7_PKTCNT_Shift, 19   @ bitWidth 10 (Packet count)  
        .equ OTG_FS_HOST_FS_HCTSIZ7_DPID_Shift, 29   @ bitWidth 2 (Data PID)  
 

@=========================== OTG_FS_DEVICE ===========================@
.equ OTG_FS_DEVICE_BASE, 0x50000800 @ (USB on the go full speed) 
    .equ OTG_FS_DEVICE_FS_DCFG, OTG_FS_DEVICE_BASE + 0x0 @ (OTG_FS device configuration register  OTG_FS_DCFG) 
        .equ OTG_FS_DEVICE_FS_DCFG_DSPD_Shift, 0   @ bitWidth 2 (Device speed)  
        .equ OTG_FS_DEVICE_FS_DCFG_NZLSOHSK, 1 << 2   @ bitWidth 1 (Non-zero-length status OUT  handshake)  
        .equ OTG_FS_DEVICE_FS_DCFG_DAD_Shift, 4   @ bitWidth 7 (Device address)  
        .equ OTG_FS_DEVICE_FS_DCFG_PFIVL_Shift, 11   @ bitWidth 2 (Periodic frame interval)  
 
    .equ OTG_FS_DEVICE_FS_DCTL, OTG_FS_DEVICE_BASE + 0x4 @ (OTG_FS device control register  OTG_FS_DCTL) 
        .equ OTG_FS_DEVICE_FS_DCTL_RWUSIG, 1 << 0   @ bitWidth 1 (Remote wakeup signaling)  
        .equ OTG_FS_DEVICE_FS_DCTL_SDIS, 1 << 1   @ bitWidth 1 (Soft disconnect)  
        .equ OTG_FS_DEVICE_FS_DCTL_GINSTS, 1 << 2   @ bitWidth 1 (Global IN NAK status)  
        .equ OTG_FS_DEVICE_FS_DCTL_GONSTS, 1 << 3   @ bitWidth 1 (Global OUT NAK status)  
        .equ OTG_FS_DEVICE_FS_DCTL_TCTL_Shift, 4   @ bitWidth 3 (Test control)  
        .equ OTG_FS_DEVICE_FS_DCTL_SGINAK, 1 << 7   @ bitWidth 1 (Set global IN NAK)  
        .equ OTG_FS_DEVICE_FS_DCTL_CGINAK, 1 << 8   @ bitWidth 1 (Clear global IN NAK)  
        .equ OTG_FS_DEVICE_FS_DCTL_SGONAK, 1 << 9   @ bitWidth 1 (Set global OUT NAK)  
        .equ OTG_FS_DEVICE_FS_DCTL_CGONAK, 1 << 10   @ bitWidth 1 (Clear global OUT NAK)  
        .equ OTG_FS_DEVICE_FS_DCTL_POPRGDNE, 1 << 11   @ bitWidth 1 (Power-on programming done)  
 
    .equ OTG_FS_DEVICE_FS_DSTS, OTG_FS_DEVICE_BASE + 0x8 @ (OTG_FS device status register  OTG_FS_DSTS) 
        .equ OTG_FS_DEVICE_FS_DSTS_SUSPSTS, 1 << 0   @ bitWidth 1 (Suspend status)  
        .equ OTG_FS_DEVICE_FS_DSTS_ENUMSPD_Shift, 1   @ bitWidth 2 (Enumerated speed)  
        .equ OTG_FS_DEVICE_FS_DSTS_EERR, 1 << 3   @ bitWidth 1 (Erratic error)  
        .equ OTG_FS_DEVICE_FS_DSTS_FNSOF_Shift, 8   @ bitWidth 14 (Frame number of the received  SOF)  
 
    .equ OTG_FS_DEVICE_FS_DIEPMSK, OTG_FS_DEVICE_BASE + 0x10 @ (OTG_FS device IN endpoint common interrupt  mask register OTG_FS_DIEPMSK) 
        .equ OTG_FS_DEVICE_FS_DIEPMSK_XFRCM, 1 << 0   @ bitWidth 1 (Transfer completed interrupt  mask)  
        .equ OTG_FS_DEVICE_FS_DIEPMSK_EPDM, 1 << 1   @ bitWidth 1 (Endpoint disabled interrupt  mask)  
        .equ OTG_FS_DEVICE_FS_DIEPMSK_TOM, 1 << 3   @ bitWidth 1 (Timeout condition mask Non-isochronous  endpoints)  
        .equ OTG_FS_DEVICE_FS_DIEPMSK_ITTXFEMSK, 1 << 4   @ bitWidth 1 (IN token received when TxFIFO empty  mask)  
        .equ OTG_FS_DEVICE_FS_DIEPMSK_INEPNMM, 1 << 5   @ bitWidth 1 (IN token received with EP mismatch  mask)  
        .equ OTG_FS_DEVICE_FS_DIEPMSK_INEPNEM, 1 << 6   @ bitWidth 1 (IN endpoint NAK effective  mask)  
 
    .equ OTG_FS_DEVICE_FS_DOEPMSK, OTG_FS_DEVICE_BASE + 0x14 @ (OTG_FS device OUT endpoint common interrupt  mask register OTG_FS_DOEPMSK) 
        .equ OTG_FS_DEVICE_FS_DOEPMSK_XFRCM, 1 << 0   @ bitWidth 1 (Transfer completed interrupt  mask)  
        .equ OTG_FS_DEVICE_FS_DOEPMSK_EPDM, 1 << 1   @ bitWidth 1 (Endpoint disabled interrupt  mask)  
        .equ OTG_FS_DEVICE_FS_DOEPMSK_STUPM, 1 << 3   @ bitWidth 1 (SETUP phase done mask)  
        .equ OTG_FS_DEVICE_FS_DOEPMSK_OTEPDM, 1 << 4   @ bitWidth 1 (OUT token received when endpoint  disabled mask)  
 
    .equ OTG_FS_DEVICE_FS_DAINT, OTG_FS_DEVICE_BASE + 0x18 @ (OTG_FS device all endpoints interrupt  register OTG_FS_DAINT) 
        .equ OTG_FS_DEVICE_FS_DAINT_IEPINT_Shift, 0   @ bitWidth 16 (IN endpoint interrupt bits)  
        .equ OTG_FS_DEVICE_FS_DAINT_OEPINT_Shift, 16   @ bitWidth 16 (OUT endpoint interrupt  bits)  
 
    .equ OTG_FS_DEVICE_FS_DAINTMSK, OTG_FS_DEVICE_BASE + 0x1C @ (OTG_FS all endpoints interrupt mask register  OTG_FS_DAINTMSK) 
        .equ OTG_FS_DEVICE_FS_DAINTMSK_IEPM_Shift, 0   @ bitWidth 16 (IN EP interrupt mask bits)  
        .equ OTG_FS_DEVICE_FS_DAINTMSK_OEPINT_Shift, 16   @ bitWidth 16 (OUT endpoint interrupt  bits)  
 
    .equ OTG_FS_DEVICE_DVBUSDIS, OTG_FS_DEVICE_BASE + 0x28 @ (OTG_FS device VBUS discharge time  register) 
        .equ OTG_FS_DEVICE_DVBUSDIS_VBUSDT_Shift, 0   @ bitWidth 16 (Device VBUS discharge time)  
 
    .equ OTG_FS_DEVICE_DVBUSPULSE, OTG_FS_DEVICE_BASE + 0x2C @ (OTG_FS device VBUS pulsing time  register) 
        .equ OTG_FS_DEVICE_DVBUSPULSE_DVBUSP_Shift, 0   @ bitWidth 12 (Device VBUS pulsing time)  
 
    .equ OTG_FS_DEVICE_DIEPEMPMSK, OTG_FS_DEVICE_BASE + 0x34 @ (OTG_FS device IN endpoint FIFO empty  interrupt mask register) 
        .equ OTG_FS_DEVICE_DIEPEMPMSK_INEPTXFEM_Shift, 0   @ bitWidth 16 (IN EP Tx FIFO empty interrupt mask  bits)  
 
    .equ OTG_FS_DEVICE_FS_DIEPCTL0, OTG_FS_DEVICE_BASE + 0x100 @ (OTG_FS device control IN endpoint 0 control  register OTG_FS_DIEPCTL0) 
        .equ OTG_FS_DEVICE_FS_DIEPCTL0_MPSIZ_Shift, 0   @ bitWidth 2 (Maximum packet size)  
        .equ OTG_FS_DEVICE_FS_DIEPCTL0_USBAEP, 1 << 15   @ bitWidth 1 (USB active endpoint)  
        .equ OTG_FS_DEVICE_FS_DIEPCTL0_NAKSTS, 1 << 17   @ bitWidth 1 (NAK status)  
        .equ OTG_FS_DEVICE_FS_DIEPCTL0_EPTYP_Shift, 18   @ bitWidth 2 (Endpoint type)  
        .equ OTG_FS_DEVICE_FS_DIEPCTL0_STALL, 1 << 21   @ bitWidth 1 (STALL handshake)  
        .equ OTG_FS_DEVICE_FS_DIEPCTL0_TXFNUM_Shift, 22   @ bitWidth 4 (TxFIFO number)  
        .equ OTG_FS_DEVICE_FS_DIEPCTL0_CNAK, 1 << 26   @ bitWidth 1 (Clear NAK)  
        .equ OTG_FS_DEVICE_FS_DIEPCTL0_SNAK, 1 << 27   @ bitWidth 1 (Set NAK)  
        .equ OTG_FS_DEVICE_FS_DIEPCTL0_EPDIS, 1 << 30   @ bitWidth 1 (Endpoint disable)  
        .equ OTG_FS_DEVICE_FS_DIEPCTL0_EPENA, 1 << 31   @ bitWidth 1 (Endpoint enable)  
 
    .equ OTG_FS_DEVICE_DIEPCTL1, OTG_FS_DEVICE_BASE + 0x120 @ (OTG device endpoint-1 control  register) 
        .equ OTG_FS_DEVICE_DIEPCTL1_EPENA, 1 << 31   @ bitWidth 1 (EPENA)  
        .equ OTG_FS_DEVICE_DIEPCTL1_EPDIS, 1 << 30   @ bitWidth 1 (EPDIS)  
        .equ OTG_FS_DEVICE_DIEPCTL1_SODDFRM_SD1PID, 1 << 29   @ bitWidth 1 (SODDFRM/SD1PID)  
        .equ OTG_FS_DEVICE_DIEPCTL1_SD0PID_SEVNFRM, 1 << 28   @ bitWidth 1 (SD0PID/SEVNFRM)  
        .equ OTG_FS_DEVICE_DIEPCTL1_SNAK, 1 << 27   @ bitWidth 1 (SNAK)  
        .equ OTG_FS_DEVICE_DIEPCTL1_CNAK, 1 << 26   @ bitWidth 1 (CNAK)  
        .equ OTG_FS_DEVICE_DIEPCTL1_TXFNUM_Shift, 22   @ bitWidth 4 (TXFNUM)  
        .equ OTG_FS_DEVICE_DIEPCTL1_Stall, 1 << 21   @ bitWidth 1 (Stall)  
        .equ OTG_FS_DEVICE_DIEPCTL1_EPTYP_Shift, 18   @ bitWidth 2 (EPTYP)  
        .equ OTG_FS_DEVICE_DIEPCTL1_NAKSTS, 1 << 17   @ bitWidth 1 (NAKSTS)  
        .equ OTG_FS_DEVICE_DIEPCTL1_EONUM_DPID, 1 << 16   @ bitWidth 1 (EONUM/DPID)  
        .equ OTG_FS_DEVICE_DIEPCTL1_USBAEP, 1 << 15   @ bitWidth 1 (USBAEP)  
        .equ OTG_FS_DEVICE_DIEPCTL1_MPSIZ_Shift, 0   @ bitWidth 11 (MPSIZ)  
 
    .equ OTG_FS_DEVICE_DIEPCTL2, OTG_FS_DEVICE_BASE + 0x140 @ (OTG device endpoint-2 control  register) 
        .equ OTG_FS_DEVICE_DIEPCTL2_EPENA, 1 << 31   @ bitWidth 1 (EPENA)  
        .equ OTG_FS_DEVICE_DIEPCTL2_EPDIS, 1 << 30   @ bitWidth 1 (EPDIS)  
        .equ OTG_FS_DEVICE_DIEPCTL2_SODDFRM, 1 << 29   @ bitWidth 1 (SODDFRM)  
        .equ OTG_FS_DEVICE_DIEPCTL2_SD0PID_SEVNFRM, 1 << 28   @ bitWidth 1 (SD0PID/SEVNFRM)  
        .equ OTG_FS_DEVICE_DIEPCTL2_SNAK, 1 << 27   @ bitWidth 1 (SNAK)  
        .equ OTG_FS_DEVICE_DIEPCTL2_CNAK, 1 << 26   @ bitWidth 1 (CNAK)  
        .equ OTG_FS_DEVICE_DIEPCTL2_TXFNUM_Shift, 22   @ bitWidth 4 (TXFNUM)  
        .equ OTG_FS_DEVICE_DIEPCTL2_Stall, 1 << 21   @ bitWidth 1 (Stall)  
        .equ OTG_FS_DEVICE_DIEPCTL2_EPTYP_Shift, 18   @ bitWidth 2 (EPTYP)  
        .equ OTG_FS_DEVICE_DIEPCTL2_NAKSTS, 1 << 17   @ bitWidth 1 (NAKSTS)  
        .equ OTG_FS_DEVICE_DIEPCTL2_EONUM_DPID, 1 << 16   @ bitWidth 1 (EONUM/DPID)  
        .equ OTG_FS_DEVICE_DIEPCTL2_USBAEP, 1 << 15   @ bitWidth 1 (USBAEP)  
        .equ OTG_FS_DEVICE_DIEPCTL2_MPSIZ_Shift, 0   @ bitWidth 11 (MPSIZ)  
 
    .equ OTG_FS_DEVICE_DIEPCTL3, OTG_FS_DEVICE_BASE + 0x160 @ (OTG device endpoint-3 control  register) 
        .equ OTG_FS_DEVICE_DIEPCTL3_EPENA, 1 << 31   @ bitWidth 1 (EPENA)  
        .equ OTG_FS_DEVICE_DIEPCTL3_EPDIS, 1 << 30   @ bitWidth 1 (EPDIS)  
        .equ OTG_FS_DEVICE_DIEPCTL3_SODDFRM, 1 << 29   @ bitWidth 1 (SODDFRM)  
        .equ OTG_FS_DEVICE_DIEPCTL3_SD0PID_SEVNFRM, 1 << 28   @ bitWidth 1 (SD0PID/SEVNFRM)  
        .equ OTG_FS_DEVICE_DIEPCTL3_SNAK, 1 << 27   @ bitWidth 1 (SNAK)  
        .equ OTG_FS_DEVICE_DIEPCTL3_CNAK, 1 << 26   @ bitWidth 1 (CNAK)  
        .equ OTG_FS_DEVICE_DIEPCTL3_TXFNUM_Shift, 22   @ bitWidth 4 (TXFNUM)  
        .equ OTG_FS_DEVICE_DIEPCTL3_Stall, 1 << 21   @ bitWidth 1 (Stall)  
        .equ OTG_FS_DEVICE_DIEPCTL3_EPTYP_Shift, 18   @ bitWidth 2 (EPTYP)  
        .equ OTG_FS_DEVICE_DIEPCTL3_NAKSTS, 1 << 17   @ bitWidth 1 (NAKSTS)  
        .equ OTG_FS_DEVICE_DIEPCTL3_EONUM_DPID, 1 << 16   @ bitWidth 1 (EONUM/DPID)  
        .equ OTG_FS_DEVICE_DIEPCTL3_USBAEP, 1 << 15   @ bitWidth 1 (USBAEP)  
        .equ OTG_FS_DEVICE_DIEPCTL3_MPSIZ_Shift, 0   @ bitWidth 11 (MPSIZ)  
 
    .equ OTG_FS_DEVICE_DOEPCTL0, OTG_FS_DEVICE_BASE + 0x300 @ (device endpoint-0 control  register) 
        .equ OTG_FS_DEVICE_DOEPCTL0_EPENA, 1 << 31   @ bitWidth 1 (EPENA)  
        .equ OTG_FS_DEVICE_DOEPCTL0_EPDIS, 1 << 30   @ bitWidth 1 (EPDIS)  
        .equ OTG_FS_DEVICE_DOEPCTL0_SNAK, 1 << 27   @ bitWidth 1 (SNAK)  
        .equ OTG_FS_DEVICE_DOEPCTL0_CNAK, 1 << 26   @ bitWidth 1 (CNAK)  
        .equ OTG_FS_DEVICE_DOEPCTL0_Stall, 1 << 21   @ bitWidth 1 (Stall)  
        .equ OTG_FS_DEVICE_DOEPCTL0_SNPM, 1 << 20   @ bitWidth 1 (SNPM)  
        .equ OTG_FS_DEVICE_DOEPCTL0_EPTYP_Shift, 18   @ bitWidth 2 (EPTYP)  
        .equ OTG_FS_DEVICE_DOEPCTL0_NAKSTS, 1 << 17   @ bitWidth 1 (NAKSTS)  
        .equ OTG_FS_DEVICE_DOEPCTL0_USBAEP, 1 << 15   @ bitWidth 1 (USBAEP)  
        .equ OTG_FS_DEVICE_DOEPCTL0_MPSIZ_Shift, 0   @ bitWidth 2 (MPSIZ)  
 
    .equ OTG_FS_DEVICE_DOEPCTL1, OTG_FS_DEVICE_BASE + 0x320 @ (device endpoint-1 control  register) 
        .equ OTG_FS_DEVICE_DOEPCTL1_EPENA, 1 << 31   @ bitWidth 1 (EPENA)  
        .equ OTG_FS_DEVICE_DOEPCTL1_EPDIS, 1 << 30   @ bitWidth 1 (EPDIS)  
        .equ OTG_FS_DEVICE_DOEPCTL1_SODDFRM, 1 << 29   @ bitWidth 1 (SODDFRM)  
        .equ OTG_FS_DEVICE_DOEPCTL1_SD0PID_SEVNFRM, 1 << 28   @ bitWidth 1 (SD0PID/SEVNFRM)  
        .equ OTG_FS_DEVICE_DOEPCTL1_SNAK, 1 << 27   @ bitWidth 1 (SNAK)  
        .equ OTG_FS_DEVICE_DOEPCTL1_CNAK, 1 << 26   @ bitWidth 1 (CNAK)  
        .equ OTG_FS_DEVICE_DOEPCTL1_Stall, 1 << 21   @ bitWidth 1 (Stall)  
        .equ OTG_FS_DEVICE_DOEPCTL1_SNPM, 1 << 20   @ bitWidth 1 (SNPM)  
        .equ OTG_FS_DEVICE_DOEPCTL1_EPTYP_Shift, 18   @ bitWidth 2 (EPTYP)  
        .equ OTG_FS_DEVICE_DOEPCTL1_NAKSTS, 1 << 17   @ bitWidth 1 (NAKSTS)  
        .equ OTG_FS_DEVICE_DOEPCTL1_EONUM_DPID, 1 << 16   @ bitWidth 1 (EONUM/DPID)  
        .equ OTG_FS_DEVICE_DOEPCTL1_USBAEP, 1 << 15   @ bitWidth 1 (USBAEP)  
        .equ OTG_FS_DEVICE_DOEPCTL1_MPSIZ_Shift, 0   @ bitWidth 11 (MPSIZ)  
 
    .equ OTG_FS_DEVICE_DOEPCTL2, OTG_FS_DEVICE_BASE + 0x340 @ (device endpoint-2 control  register) 
        .equ OTG_FS_DEVICE_DOEPCTL2_EPENA, 1 << 31   @ bitWidth 1 (EPENA)  
        .equ OTG_FS_DEVICE_DOEPCTL2_EPDIS, 1 << 30   @ bitWidth 1 (EPDIS)  
        .equ OTG_FS_DEVICE_DOEPCTL2_SODDFRM, 1 << 29   @ bitWidth 1 (SODDFRM)  
        .equ OTG_FS_DEVICE_DOEPCTL2_SD0PID_SEVNFRM, 1 << 28   @ bitWidth 1 (SD0PID/SEVNFRM)  
        .equ OTG_FS_DEVICE_DOEPCTL2_SNAK, 1 << 27   @ bitWidth 1 (SNAK)  
        .equ OTG_FS_DEVICE_DOEPCTL2_CNAK, 1 << 26   @ bitWidth 1 (CNAK)  
        .equ OTG_FS_DEVICE_DOEPCTL2_Stall, 1 << 21   @ bitWidth 1 (Stall)  
        .equ OTG_FS_DEVICE_DOEPCTL2_SNPM, 1 << 20   @ bitWidth 1 (SNPM)  
        .equ OTG_FS_DEVICE_DOEPCTL2_EPTYP_Shift, 18   @ bitWidth 2 (EPTYP)  
        .equ OTG_FS_DEVICE_DOEPCTL2_NAKSTS, 1 << 17   @ bitWidth 1 (NAKSTS)  
        .equ OTG_FS_DEVICE_DOEPCTL2_EONUM_DPID, 1 << 16   @ bitWidth 1 (EONUM/DPID)  
        .equ OTG_FS_DEVICE_DOEPCTL2_USBAEP, 1 << 15   @ bitWidth 1 (USBAEP)  
        .equ OTG_FS_DEVICE_DOEPCTL2_MPSIZ_Shift, 0   @ bitWidth 11 (MPSIZ)  
 
    .equ OTG_FS_DEVICE_DOEPCTL3, OTG_FS_DEVICE_BASE + 0x360 @ (device endpoint-3 control  register) 
        .equ OTG_FS_DEVICE_DOEPCTL3_EPENA, 1 << 31   @ bitWidth 1 (EPENA)  
        .equ OTG_FS_DEVICE_DOEPCTL3_EPDIS, 1 << 30   @ bitWidth 1 (EPDIS)  
        .equ OTG_FS_DEVICE_DOEPCTL3_SODDFRM, 1 << 29   @ bitWidth 1 (SODDFRM)  
        .equ OTG_FS_DEVICE_DOEPCTL3_SD0PID_SEVNFRM, 1 << 28   @ bitWidth 1 (SD0PID/SEVNFRM)  
        .equ OTG_FS_DEVICE_DOEPCTL3_SNAK, 1 << 27   @ bitWidth 1 (SNAK)  
        .equ OTG_FS_DEVICE_DOEPCTL3_CNAK, 1 << 26   @ bitWidth 1 (CNAK)  
        .equ OTG_FS_DEVICE_DOEPCTL3_Stall, 1 << 21   @ bitWidth 1 (Stall)  
        .equ OTG_FS_DEVICE_DOEPCTL3_SNPM, 1 << 20   @ bitWidth 1 (SNPM)  
        .equ OTG_FS_DEVICE_DOEPCTL3_EPTYP_Shift, 18   @ bitWidth 2 (EPTYP)  
        .equ OTG_FS_DEVICE_DOEPCTL3_NAKSTS, 1 << 17   @ bitWidth 1 (NAKSTS)  
        .equ OTG_FS_DEVICE_DOEPCTL3_EONUM_DPID, 1 << 16   @ bitWidth 1 (EONUM/DPID)  
        .equ OTG_FS_DEVICE_DOEPCTL3_USBAEP, 1 << 15   @ bitWidth 1 (USBAEP)  
        .equ OTG_FS_DEVICE_DOEPCTL3_MPSIZ_Shift, 0   @ bitWidth 11 (MPSIZ)  
 
    .equ OTG_FS_DEVICE_DIEPINT0, OTG_FS_DEVICE_BASE + 0x108 @ (device endpoint-x interrupt  register) 
        .equ OTG_FS_DEVICE_DIEPINT0_TXFE, 1 << 7   @ bitWidth 1 (TXFE)  
        .equ OTG_FS_DEVICE_DIEPINT0_INEPNE, 1 << 6   @ bitWidth 1 (INEPNE)  
        .equ OTG_FS_DEVICE_DIEPINT0_ITTXFE, 1 << 4   @ bitWidth 1 (ITTXFE)  
        .equ OTG_FS_DEVICE_DIEPINT0_TOC, 1 << 3   @ bitWidth 1 (TOC)  
        .equ OTG_FS_DEVICE_DIEPINT0_EPDISD, 1 << 1   @ bitWidth 1 (EPDISD)  
        .equ OTG_FS_DEVICE_DIEPINT0_XFRC, 1 << 0   @ bitWidth 1 (XFRC)  
 
    .equ OTG_FS_DEVICE_DIEPINT1, OTG_FS_DEVICE_BASE + 0x128 @ (device endpoint-1 interrupt  register) 
        .equ OTG_FS_DEVICE_DIEPINT1_TXFE, 1 << 7   @ bitWidth 1 (TXFE)  
        .equ OTG_FS_DEVICE_DIEPINT1_INEPNE, 1 << 6   @ bitWidth 1 (INEPNE)  
        .equ OTG_FS_DEVICE_DIEPINT1_ITTXFE, 1 << 4   @ bitWidth 1 (ITTXFE)  
        .equ OTG_FS_DEVICE_DIEPINT1_TOC, 1 << 3   @ bitWidth 1 (TOC)  
        .equ OTG_FS_DEVICE_DIEPINT1_EPDISD, 1 << 1   @ bitWidth 1 (EPDISD)  
        .equ OTG_FS_DEVICE_DIEPINT1_XFRC, 1 << 0   @ bitWidth 1 (XFRC)  
 
    .equ OTG_FS_DEVICE_DIEPINT2, OTG_FS_DEVICE_BASE + 0x148 @ (device endpoint-2 interrupt  register) 
        .equ OTG_FS_DEVICE_DIEPINT2_TXFE, 1 << 7   @ bitWidth 1 (TXFE)  
        .equ OTG_FS_DEVICE_DIEPINT2_INEPNE, 1 << 6   @ bitWidth 1 (INEPNE)  
        .equ OTG_FS_DEVICE_DIEPINT2_ITTXFE, 1 << 4   @ bitWidth 1 (ITTXFE)  
        .equ OTG_FS_DEVICE_DIEPINT2_TOC, 1 << 3   @ bitWidth 1 (TOC)  
        .equ OTG_FS_DEVICE_DIEPINT2_EPDISD, 1 << 1   @ bitWidth 1 (EPDISD)  
        .equ OTG_FS_DEVICE_DIEPINT2_XFRC, 1 << 0   @ bitWidth 1 (XFRC)  
 
    .equ OTG_FS_DEVICE_DIEPINT3, OTG_FS_DEVICE_BASE + 0x168 @ (device endpoint-3 interrupt  register) 
        .equ OTG_FS_DEVICE_DIEPINT3_TXFE, 1 << 7   @ bitWidth 1 (TXFE)  
        .equ OTG_FS_DEVICE_DIEPINT3_INEPNE, 1 << 6   @ bitWidth 1 (INEPNE)  
        .equ OTG_FS_DEVICE_DIEPINT3_ITTXFE, 1 << 4   @ bitWidth 1 (ITTXFE)  
        .equ OTG_FS_DEVICE_DIEPINT3_TOC, 1 << 3   @ bitWidth 1 (TOC)  
        .equ OTG_FS_DEVICE_DIEPINT3_EPDISD, 1 << 1   @ bitWidth 1 (EPDISD)  
        .equ OTG_FS_DEVICE_DIEPINT3_XFRC, 1 << 0   @ bitWidth 1 (XFRC)  
 
    .equ OTG_FS_DEVICE_DOEPINT0, OTG_FS_DEVICE_BASE + 0x308 @ (device endpoint-0 interrupt  register) 
        .equ OTG_FS_DEVICE_DOEPINT0_B2BSTUP, 1 << 6   @ bitWidth 1 (B2BSTUP)  
        .equ OTG_FS_DEVICE_DOEPINT0_OTEPDIS, 1 << 4   @ bitWidth 1 (OTEPDIS)  
        .equ OTG_FS_DEVICE_DOEPINT0_STUP, 1 << 3   @ bitWidth 1 (STUP)  
        .equ OTG_FS_DEVICE_DOEPINT0_EPDISD, 1 << 1   @ bitWidth 1 (EPDISD)  
        .equ OTG_FS_DEVICE_DOEPINT0_XFRC, 1 << 0   @ bitWidth 1 (XFRC)  
 
    .equ OTG_FS_DEVICE_DOEPINT1, OTG_FS_DEVICE_BASE + 0x328 @ (device endpoint-1 interrupt  register) 
        .equ OTG_FS_DEVICE_DOEPINT1_B2BSTUP, 1 << 6   @ bitWidth 1 (B2BSTUP)  
        .equ OTG_FS_DEVICE_DOEPINT1_OTEPDIS, 1 << 4   @ bitWidth 1 (OTEPDIS)  
        .equ OTG_FS_DEVICE_DOEPINT1_STUP, 1 << 3   @ bitWidth 1 (STUP)  
        .equ OTG_FS_DEVICE_DOEPINT1_EPDISD, 1 << 1   @ bitWidth 1 (EPDISD)  
        .equ OTG_FS_DEVICE_DOEPINT1_XFRC, 1 << 0   @ bitWidth 1 (XFRC)  
 
    .equ OTG_FS_DEVICE_DOEPINT2, OTG_FS_DEVICE_BASE + 0x348 @ (device endpoint-2 interrupt  register) 
        .equ OTG_FS_DEVICE_DOEPINT2_B2BSTUP, 1 << 6   @ bitWidth 1 (B2BSTUP)  
        .equ OTG_FS_DEVICE_DOEPINT2_OTEPDIS, 1 << 4   @ bitWidth 1 (OTEPDIS)  
        .equ OTG_FS_DEVICE_DOEPINT2_STUP, 1 << 3   @ bitWidth 1 (STUP)  
        .equ OTG_FS_DEVICE_DOEPINT2_EPDISD, 1 << 1   @ bitWidth 1 (EPDISD)  
        .equ OTG_FS_DEVICE_DOEPINT2_XFRC, 1 << 0   @ bitWidth 1 (XFRC)  
 
    .equ OTG_FS_DEVICE_DOEPINT3, OTG_FS_DEVICE_BASE + 0x368 @ (device endpoint-3 interrupt  register) 
        .equ OTG_FS_DEVICE_DOEPINT3_B2BSTUP, 1 << 6   @ bitWidth 1 (B2BSTUP)  
        .equ OTG_FS_DEVICE_DOEPINT3_OTEPDIS, 1 << 4   @ bitWidth 1 (OTEPDIS)  
        .equ OTG_FS_DEVICE_DOEPINT3_STUP, 1 << 3   @ bitWidth 1 (STUP)  
        .equ OTG_FS_DEVICE_DOEPINT3_EPDISD, 1 << 1   @ bitWidth 1 (EPDISD)  
        .equ OTG_FS_DEVICE_DOEPINT3_XFRC, 1 << 0   @ bitWidth 1 (XFRC)  
 
    .equ OTG_FS_DEVICE_DIEPTSIZ0, OTG_FS_DEVICE_BASE + 0x110 @ (device endpoint-0 transfer size  register) 
        .equ OTG_FS_DEVICE_DIEPTSIZ0_PKTCNT_Shift, 19   @ bitWidth 2 (Packet count)  
        .equ OTG_FS_DEVICE_DIEPTSIZ0_XFRSIZ_Shift, 0   @ bitWidth 7 (Transfer size)  
 
    .equ OTG_FS_DEVICE_DOEPTSIZ0, OTG_FS_DEVICE_BASE + 0x310 @ (device OUT endpoint-0 transfer size  register) 
        .equ OTG_FS_DEVICE_DOEPTSIZ0_STUPCNT_Shift, 29   @ bitWidth 2 (SETUP packet count)  
        .equ OTG_FS_DEVICE_DOEPTSIZ0_PKTCNT, 1 << 19   @ bitWidth 1 (Packet count)  
        .equ OTG_FS_DEVICE_DOEPTSIZ0_XFRSIZ_Shift, 0   @ bitWidth 7 (Transfer size)  
 
    .equ OTG_FS_DEVICE_DIEPTSIZ1, OTG_FS_DEVICE_BASE + 0x130 @ (device endpoint-1 transfer size  register) 
        .equ OTG_FS_DEVICE_DIEPTSIZ1_MCNT_Shift, 29   @ bitWidth 2 (Multi count)  
        .equ OTG_FS_DEVICE_DIEPTSIZ1_PKTCNT_Shift, 19   @ bitWidth 10 (Packet count)  
        .equ OTG_FS_DEVICE_DIEPTSIZ1_XFRSIZ_Shift, 0   @ bitWidth 19 (Transfer size)  
 
    .equ OTG_FS_DEVICE_DIEPTSIZ2, OTG_FS_DEVICE_BASE + 0x150 @ (device endpoint-2 transfer size  register) 
        .equ OTG_FS_DEVICE_DIEPTSIZ2_MCNT_Shift, 29   @ bitWidth 2 (Multi count)  
        .equ OTG_FS_DEVICE_DIEPTSIZ2_PKTCNT_Shift, 19   @ bitWidth 10 (Packet count)  
        .equ OTG_FS_DEVICE_DIEPTSIZ2_XFRSIZ_Shift, 0   @ bitWidth 19 (Transfer size)  
 
    .equ OTG_FS_DEVICE_DIEPTSIZ3, OTG_FS_DEVICE_BASE + 0x170 @ (device endpoint-3 transfer size  register) 
        .equ OTG_FS_DEVICE_DIEPTSIZ3_MCNT_Shift, 29   @ bitWidth 2 (Multi count)  
        .equ OTG_FS_DEVICE_DIEPTSIZ3_PKTCNT_Shift, 19   @ bitWidth 10 (Packet count)  
        .equ OTG_FS_DEVICE_DIEPTSIZ3_XFRSIZ_Shift, 0   @ bitWidth 19 (Transfer size)  
 
    .equ OTG_FS_DEVICE_DTXFSTS0, OTG_FS_DEVICE_BASE + 0x118 @ (OTG_FS device IN endpoint transmit FIFO  status register) 
        .equ OTG_FS_DEVICE_DTXFSTS0_INEPTFSAV_Shift, 0   @ bitWidth 16 (IN endpoint TxFIFO space  available)  
 
    .equ OTG_FS_DEVICE_DTXFSTS1, OTG_FS_DEVICE_BASE + 0x138 @ (OTG_FS device IN endpoint transmit FIFO  status register) 
        .equ OTG_FS_DEVICE_DTXFSTS1_INEPTFSAV_Shift, 0   @ bitWidth 16 (IN endpoint TxFIFO space  available)  
 
    .equ OTG_FS_DEVICE_DTXFSTS2, OTG_FS_DEVICE_BASE + 0x158 @ (OTG_FS device IN endpoint transmit FIFO  status register) 
        .equ OTG_FS_DEVICE_DTXFSTS2_INEPTFSAV_Shift, 0   @ bitWidth 16 (IN endpoint TxFIFO space  available)  
 
    .equ OTG_FS_DEVICE_DTXFSTS3, OTG_FS_DEVICE_BASE + 0x178 @ (OTG_FS device IN endpoint transmit FIFO  status register) 
        .equ OTG_FS_DEVICE_DTXFSTS3_INEPTFSAV_Shift, 0   @ bitWidth 16 (IN endpoint TxFIFO space  available)  
 
    .equ OTG_FS_DEVICE_DOEPTSIZ1, OTG_FS_DEVICE_BASE + 0x330 @ (device OUT endpoint-1 transfer size  register) 
        .equ OTG_FS_DEVICE_DOEPTSIZ1_RXDPID_STUPCNT_Shift, 29   @ bitWidth 2 (Received data PID/SETUP packet  count)  
        .equ OTG_FS_DEVICE_DOEPTSIZ1_PKTCNT_Shift, 19   @ bitWidth 10 (Packet count)  
        .equ OTG_FS_DEVICE_DOEPTSIZ1_XFRSIZ_Shift, 0   @ bitWidth 19 (Transfer size)  
 
    .equ OTG_FS_DEVICE_DOEPTSIZ2, OTG_FS_DEVICE_BASE + 0x350 @ (device OUT endpoint-2 transfer size  register) 
        .equ OTG_FS_DEVICE_DOEPTSIZ2_RXDPID_STUPCNT_Shift, 29   @ bitWidth 2 (Received data PID/SETUP packet  count)  
        .equ OTG_FS_DEVICE_DOEPTSIZ2_PKTCNT_Shift, 19   @ bitWidth 10 (Packet count)  
        .equ OTG_FS_DEVICE_DOEPTSIZ2_XFRSIZ_Shift, 0   @ bitWidth 19 (Transfer size)  
 
    .equ OTG_FS_DEVICE_DOEPTSIZ3, OTG_FS_DEVICE_BASE + 0x370 @ (device OUT endpoint-3 transfer size  register) 
        .equ OTG_FS_DEVICE_DOEPTSIZ3_RXDPID_STUPCNT_Shift, 29   @ bitWidth 2 (Received data PID/SETUP packet  count)  
        .equ OTG_FS_DEVICE_DOEPTSIZ3_PKTCNT_Shift, 19   @ bitWidth 10 (Packet count)  
        .equ OTG_FS_DEVICE_DOEPTSIZ3_XFRSIZ_Shift, 0   @ bitWidth 19 (Transfer size)  
 

@=========================== OTG_FS_PWRCLK ===========================@
.equ OTG_FS_PWRCLK_BASE, 0x50000E00 @ (USB on the go full speed) 
    .equ OTG_FS_PWRCLK_FS_PCGCCTL, OTG_FS_PWRCLK_BASE + 0x0 @ (OTG_FS power and clock gating control  register) 
        .equ OTG_FS_PWRCLK_FS_PCGCCTL_STPPCLK, 1 << 0   @ bitWidth 1 (Stop PHY clock)  
        .equ OTG_FS_PWRCLK_FS_PCGCCTL_GATEHCLK, 1 << 1   @ bitWidth 1 (Gate HCLK)  
        .equ OTG_FS_PWRCLK_FS_PCGCCTL_PHYSUSP, 1 << 4   @ bitWidth 1 (PHY Suspended)  
 

@=========================== CAN1 ===========================@
.equ CAN1_BASE, 0x40006400 @ (Controller area network) 
    .equ CAN1_MCR, CAN1_BASE + 0x0 @ (master control register) 
        .equ CAN1_MCR_DBF, 1 << 16   @ bitWidth 1 (DBF)  
        .equ CAN1_MCR_RESET, 1 << 15   @ bitWidth 1 (RESET)  
        .equ CAN1_MCR_TTCM, 1 << 7   @ bitWidth 1 (TTCM)  
        .equ CAN1_MCR_ABOM, 1 << 6   @ bitWidth 1 (ABOM)  
        .equ CAN1_MCR_AWUM, 1 << 5   @ bitWidth 1 (AWUM)  
        .equ CAN1_MCR_NART, 1 << 4   @ bitWidth 1 (NART)  
        .equ CAN1_MCR_RFLM, 1 << 3   @ bitWidth 1 (RFLM)  
        .equ CAN1_MCR_TXFP, 1 << 2   @ bitWidth 1 (TXFP)  
        .equ CAN1_MCR_SLEEP, 1 << 1   @ bitWidth 1 (SLEEP)  
        .equ CAN1_MCR_INRQ, 1 << 0   @ bitWidth 1 (INRQ)  
 
    .equ CAN1_MSR, CAN1_BASE + 0x4 @ (master status register) 
        .equ CAN1_MSR_RX, 1 << 11   @ bitWidth 1 (RX)  
        .equ CAN1_MSR_SAMP, 1 << 10   @ bitWidth 1 (SAMP)  
        .equ CAN1_MSR_RXM, 1 << 9   @ bitWidth 1 (RXM)  
        .equ CAN1_MSR_TXM, 1 << 8   @ bitWidth 1 (TXM)  
        .equ CAN1_MSR_SLAKI, 1 << 4   @ bitWidth 1 (SLAKI)  
        .equ CAN1_MSR_WKUI, 1 << 3   @ bitWidth 1 (WKUI)  
        .equ CAN1_MSR_ERRI, 1 << 2   @ bitWidth 1 (ERRI)  
        .equ CAN1_MSR_SLAK, 1 << 1   @ bitWidth 1 (SLAK)  
        .equ CAN1_MSR_INAK, 1 << 0   @ bitWidth 1 (INAK)  
 
    .equ CAN1_TSR, CAN1_BASE + 0x8 @ (transmit status register) 
        .equ CAN1_TSR_LOW2, 1 << 31   @ bitWidth 1 (Lowest priority flag for mailbox  2)  
        .equ CAN1_TSR_LOW1, 1 << 30   @ bitWidth 1 (Lowest priority flag for mailbox  1)  
        .equ CAN1_TSR_LOW0, 1 << 29   @ bitWidth 1 (Lowest priority flag for mailbox  0)  
        .equ CAN1_TSR_TME2, 1 << 28   @ bitWidth 1 (Lowest priority flag for mailbox  2)  
        .equ CAN1_TSR_TME1, 1 << 27   @ bitWidth 1 (Lowest priority flag for mailbox  1)  
        .equ CAN1_TSR_TME0, 1 << 26   @ bitWidth 1 (Lowest priority flag for mailbox  0)  
        .equ CAN1_TSR_CODE_Shift, 24   @ bitWidth 2 (CODE)  
        .equ CAN1_TSR_ABRQ2, 1 << 23   @ bitWidth 1 (ABRQ2)  
        .equ CAN1_TSR_TERR2, 1 << 19   @ bitWidth 1 (TERR2)  
        .equ CAN1_TSR_ALST2, 1 << 18   @ bitWidth 1 (ALST2)  
        .equ CAN1_TSR_TXOK2, 1 << 17   @ bitWidth 1 (TXOK2)  
        .equ CAN1_TSR_RQCP2, 1 << 16   @ bitWidth 1 (RQCP2)  
        .equ CAN1_TSR_ABRQ1, 1 << 15   @ bitWidth 1 (ABRQ1)  
        .equ CAN1_TSR_TERR1, 1 << 11   @ bitWidth 1 (TERR1)  
        .equ CAN1_TSR_ALST1, 1 << 10   @ bitWidth 1 (ALST1)  
        .equ CAN1_TSR_TXOK1, 1 << 9   @ bitWidth 1 (TXOK1)  
        .equ CAN1_TSR_RQCP1, 1 << 8   @ bitWidth 1 (RQCP1)  
        .equ CAN1_TSR_ABRQ0, 1 << 7   @ bitWidth 1 (ABRQ0)  
        .equ CAN1_TSR_TERR0, 1 << 3   @ bitWidth 1 (TERR0)  
        .equ CAN1_TSR_ALST0, 1 << 2   @ bitWidth 1 (ALST0)  
        .equ CAN1_TSR_TXOK0, 1 << 1   @ bitWidth 1 (TXOK0)  
        .equ CAN1_TSR_RQCP0, 1 << 0   @ bitWidth 1 (RQCP0)  
 
    .equ CAN1_RF0R, CAN1_BASE + 0xC @ (receive FIFO 0 register) 
        .equ CAN1_RF0R_RFOM0, 1 << 5   @ bitWidth 1 (RFOM0)  
        .equ CAN1_RF0R_FOVR0, 1 << 4   @ bitWidth 1 (FOVR0)  
        .equ CAN1_RF0R_FULL0, 1 << 3   @ bitWidth 1 (FULL0)  
        .equ CAN1_RF0R_FMP0_Shift, 0   @ bitWidth 2 (FMP0)  
 
    .equ CAN1_RF1R, CAN1_BASE + 0x10 @ (receive FIFO 1 register) 
        .equ CAN1_RF1R_RFOM1, 1 << 5   @ bitWidth 1 (RFOM1)  
        .equ CAN1_RF1R_FOVR1, 1 << 4   @ bitWidth 1 (FOVR1)  
        .equ CAN1_RF1R_FULL1, 1 << 3   @ bitWidth 1 (FULL1)  
        .equ CAN1_RF1R_FMP1_Shift, 0   @ bitWidth 2 (FMP1)  
 
    .equ CAN1_IER, CAN1_BASE + 0x14 @ (interrupt enable register) 
        .equ CAN1_IER_SLKIE, 1 << 17   @ bitWidth 1 (SLKIE)  
        .equ CAN1_IER_WKUIE, 1 << 16   @ bitWidth 1 (WKUIE)  
        .equ CAN1_IER_ERRIE, 1 << 15   @ bitWidth 1 (ERRIE)  
        .equ CAN1_IER_LECIE, 1 << 11   @ bitWidth 1 (LECIE)  
        .equ CAN1_IER_BOFIE, 1 << 10   @ bitWidth 1 (BOFIE)  
        .equ CAN1_IER_EPVIE, 1 << 9   @ bitWidth 1 (EPVIE)  
        .equ CAN1_IER_EWGIE, 1 << 8   @ bitWidth 1 (EWGIE)  
        .equ CAN1_IER_FOVIE1, 1 << 6   @ bitWidth 1 (FOVIE1)  
        .equ CAN1_IER_FFIE1, 1 << 5   @ bitWidth 1 (FFIE1)  
        .equ CAN1_IER_FMPIE1, 1 << 4   @ bitWidth 1 (FMPIE1)  
        .equ CAN1_IER_FOVIE0, 1 << 3   @ bitWidth 1 (FOVIE0)  
        .equ CAN1_IER_FFIE0, 1 << 2   @ bitWidth 1 (FFIE0)  
        .equ CAN1_IER_FMPIE0, 1 << 1   @ bitWidth 1 (FMPIE0)  
        .equ CAN1_IER_TMEIE, 1 << 0   @ bitWidth 1 (TMEIE)  
 
    .equ CAN1_ESR, CAN1_BASE + 0x18 @ (interrupt enable register) 
        .equ CAN1_ESR_REC_Shift, 24   @ bitWidth 8 (REC)  
        .equ CAN1_ESR_TEC_Shift, 16   @ bitWidth 8 (TEC)  
        .equ CAN1_ESR_LEC_Shift, 4   @ bitWidth 3 (LEC)  
        .equ CAN1_ESR_BOFF, 1 << 2   @ bitWidth 1 (BOFF)  
        .equ CAN1_ESR_EPVF, 1 << 1   @ bitWidth 1 (EPVF)  
        .equ CAN1_ESR_EWGF, 1 << 0   @ bitWidth 1 (EWGF)  
 
    .equ CAN1_BTR, CAN1_BASE + 0x1C @ (bit timing register) 
        .equ CAN1_BTR_SILM, 1 << 31   @ bitWidth 1 (SILM)  
        .equ CAN1_BTR_LBKM, 1 << 30   @ bitWidth 1 (LBKM)  
        .equ CAN1_BTR_SJW_Shift, 24   @ bitWidth 2 (SJW)  
        .equ CAN1_BTR_TS2_Shift, 20   @ bitWidth 3 (TS2)  
        .equ CAN1_BTR_TS1_Shift, 16   @ bitWidth 4 (TS1)  
        .equ CAN1_BTR_BRP_Shift, 0   @ bitWidth 10 (BRP)  
 
    .equ CAN1_TI0R, CAN1_BASE + 0x180 @ (TX mailbox identifier register) 
        .equ CAN1_TI0R_STID_Shift, 21   @ bitWidth 11 (STID)  
        .equ CAN1_TI0R_EXID_Shift, 3   @ bitWidth 18 (EXID)  
        .equ CAN1_TI0R_IDE, 1 << 2   @ bitWidth 1 (IDE)  
        .equ CAN1_TI0R_RTR, 1 << 1   @ bitWidth 1 (RTR)  
        .equ CAN1_TI0R_TXRQ, 1 << 0   @ bitWidth 1 (TXRQ)  
 
    .equ CAN1_TDT0R, CAN1_BASE + 0x184 @ (mailbox data length control and time stamp  register) 
        .equ CAN1_TDT0R_TIME_Shift, 16   @ bitWidth 16 (TIME)  
        .equ CAN1_TDT0R_TGT, 1 << 8   @ bitWidth 1 (TGT)  
        .equ CAN1_TDT0R_DLC_Shift, 0   @ bitWidth 4 (DLC)  
 
    .equ CAN1_TDL0R, CAN1_BASE + 0x188 @ (mailbox data low register) 
        .equ CAN1_TDL0R_DATA3_Shift, 24   @ bitWidth 8 (DATA3)  
        .equ CAN1_TDL0R_DATA2_Shift, 16   @ bitWidth 8 (DATA2)  
        .equ CAN1_TDL0R_DATA1_Shift, 8   @ bitWidth 8 (DATA1)  
        .equ CAN1_TDL0R_DATA0_Shift, 0   @ bitWidth 8 (DATA0)  
 
    .equ CAN1_TDH0R, CAN1_BASE + 0x18C @ (mailbox data high register) 
        .equ CAN1_TDH0R_DATA7_Shift, 24   @ bitWidth 8 (DATA7)  
        .equ CAN1_TDH0R_DATA6_Shift, 16   @ bitWidth 8 (DATA6)  
        .equ CAN1_TDH0R_DATA5_Shift, 8   @ bitWidth 8 (DATA5)  
        .equ CAN1_TDH0R_DATA4_Shift, 0   @ bitWidth 8 (DATA4)  
 
    .equ CAN1_TI1R, CAN1_BASE + 0x190 @ (mailbox identifier register) 
        .equ CAN1_TI1R_STID_Shift, 21   @ bitWidth 11 (STID)  
        .equ CAN1_TI1R_EXID_Shift, 3   @ bitWidth 18 (EXID)  
        .equ CAN1_TI1R_IDE, 1 << 2   @ bitWidth 1 (IDE)  
        .equ CAN1_TI1R_RTR, 1 << 1   @ bitWidth 1 (RTR)  
        .equ CAN1_TI1R_TXRQ, 1 << 0   @ bitWidth 1 (TXRQ)  
 
    .equ CAN1_TDT1R, CAN1_BASE + 0x194 @ (mailbox data length control and time stamp  register) 
        .equ CAN1_TDT1R_TIME_Shift, 16   @ bitWidth 16 (TIME)  
        .equ CAN1_TDT1R_TGT, 1 << 8   @ bitWidth 1 (TGT)  
        .equ CAN1_TDT1R_DLC_Shift, 0   @ bitWidth 4 (DLC)  
 
    .equ CAN1_TDL1R, CAN1_BASE + 0x198 @ (mailbox data low register) 
        .equ CAN1_TDL1R_DATA3_Shift, 24   @ bitWidth 8 (DATA3)  
        .equ CAN1_TDL1R_DATA2_Shift, 16   @ bitWidth 8 (DATA2)  
        .equ CAN1_TDL1R_DATA1_Shift, 8   @ bitWidth 8 (DATA1)  
        .equ CAN1_TDL1R_DATA0_Shift, 0   @ bitWidth 8 (DATA0)  
 
    .equ CAN1_TDH1R, CAN1_BASE + 0x19C @ (mailbox data high register) 
        .equ CAN1_TDH1R_DATA7_Shift, 24   @ bitWidth 8 (DATA7)  
        .equ CAN1_TDH1R_DATA6_Shift, 16   @ bitWidth 8 (DATA6)  
        .equ CAN1_TDH1R_DATA5_Shift, 8   @ bitWidth 8 (DATA5)  
        .equ CAN1_TDH1R_DATA4_Shift, 0   @ bitWidth 8 (DATA4)  
 
    .equ CAN1_TI2R, CAN1_BASE + 0x1A0 @ (mailbox identifier register) 
        .equ CAN1_TI2R_STID_Shift, 21   @ bitWidth 11 (STID)  
        .equ CAN1_TI2R_EXID_Shift, 3   @ bitWidth 18 (EXID)  
        .equ CAN1_TI2R_IDE, 1 << 2   @ bitWidth 1 (IDE)  
        .equ CAN1_TI2R_RTR, 1 << 1   @ bitWidth 1 (RTR)  
        .equ CAN1_TI2R_TXRQ, 1 << 0   @ bitWidth 1 (TXRQ)  
 
    .equ CAN1_TDT2R, CAN1_BASE + 0x1A4 @ (mailbox data length control and time stamp  register) 
        .equ CAN1_TDT2R_TIME_Shift, 16   @ bitWidth 16 (TIME)  
        .equ CAN1_TDT2R_TGT, 1 << 8   @ bitWidth 1 (TGT)  
        .equ CAN1_TDT2R_DLC_Shift, 0   @ bitWidth 4 (DLC)  
 
    .equ CAN1_TDL2R, CAN1_BASE + 0x1A8 @ (mailbox data low register) 
        .equ CAN1_TDL2R_DATA3_Shift, 24   @ bitWidth 8 (DATA3)  
        .equ CAN1_TDL2R_DATA2_Shift, 16   @ bitWidth 8 (DATA2)  
        .equ CAN1_TDL2R_DATA1_Shift, 8   @ bitWidth 8 (DATA1)  
        .equ CAN1_TDL2R_DATA0_Shift, 0   @ bitWidth 8 (DATA0)  
 
    .equ CAN1_TDH2R, CAN1_BASE + 0x1AC @ (mailbox data high register) 
        .equ CAN1_TDH2R_DATA7_Shift, 24   @ bitWidth 8 (DATA7)  
        .equ CAN1_TDH2R_DATA6_Shift, 16   @ bitWidth 8 (DATA6)  
        .equ CAN1_TDH2R_DATA5_Shift, 8   @ bitWidth 8 (DATA5)  
        .equ CAN1_TDH2R_DATA4_Shift, 0   @ bitWidth 8 (DATA4)  
 
    .equ CAN1_RI0R, CAN1_BASE + 0x1B0 @ (receive FIFO mailbox identifier  register) 
        .equ CAN1_RI0R_STID_Shift, 21   @ bitWidth 11 (STID)  
        .equ CAN1_RI0R_EXID_Shift, 3   @ bitWidth 18 (EXID)  
        .equ CAN1_RI0R_IDE, 1 << 2   @ bitWidth 1 (IDE)  
        .equ CAN1_RI0R_RTR, 1 << 1   @ bitWidth 1 (RTR)  
 
    .equ CAN1_RDT0R, CAN1_BASE + 0x1B4 @ (mailbox data high register) 
        .equ CAN1_RDT0R_TIME_Shift, 16   @ bitWidth 16 (TIME)  
        .equ CAN1_RDT0R_FMI_Shift, 8   @ bitWidth 8 (FMI)  
        .equ CAN1_RDT0R_DLC_Shift, 0   @ bitWidth 4 (DLC)  
 
    .equ CAN1_RDL0R, CAN1_BASE + 0x1B8 @ (mailbox data high register) 
        .equ CAN1_RDL0R_DATA3_Shift, 24   @ bitWidth 8 (DATA3)  
        .equ CAN1_RDL0R_DATA2_Shift, 16   @ bitWidth 8 (DATA2)  
        .equ CAN1_RDL0R_DATA1_Shift, 8   @ bitWidth 8 (DATA1)  
        .equ CAN1_RDL0R_DATA0_Shift, 0   @ bitWidth 8 (DATA0)  
 
    .equ CAN1_RDH0R, CAN1_BASE + 0x1BC @ (receive FIFO mailbox data high  register) 
        .equ CAN1_RDH0R_DATA7_Shift, 24   @ bitWidth 8 (DATA7)  
        .equ CAN1_RDH0R_DATA6_Shift, 16   @ bitWidth 8 (DATA6)  
        .equ CAN1_RDH0R_DATA5_Shift, 8   @ bitWidth 8 (DATA5)  
        .equ CAN1_RDH0R_DATA4_Shift, 0   @ bitWidth 8 (DATA4)  
 
    .equ CAN1_RI1R, CAN1_BASE + 0x1C0 @ (mailbox data high register) 
        .equ CAN1_RI1R_STID_Shift, 21   @ bitWidth 11 (STID)  
        .equ CAN1_RI1R_EXID_Shift, 3   @ bitWidth 18 (EXID)  
        .equ CAN1_RI1R_IDE, 1 << 2   @ bitWidth 1 (IDE)  
        .equ CAN1_RI1R_RTR, 1 << 1   @ bitWidth 1 (RTR)  
 
    .equ CAN1_RDT1R, CAN1_BASE + 0x1C4 @ (mailbox data high register) 
        .equ CAN1_RDT1R_TIME_Shift, 16   @ bitWidth 16 (TIME)  
        .equ CAN1_RDT1R_FMI_Shift, 8   @ bitWidth 8 (FMI)  
        .equ CAN1_RDT1R_DLC_Shift, 0   @ bitWidth 4 (DLC)  
 
    .equ CAN1_RDL1R, CAN1_BASE + 0x1C8 @ (mailbox data high register) 
        .equ CAN1_RDL1R_DATA3_Shift, 24   @ bitWidth 8 (DATA3)  
        .equ CAN1_RDL1R_DATA2_Shift, 16   @ bitWidth 8 (DATA2)  
        .equ CAN1_RDL1R_DATA1_Shift, 8   @ bitWidth 8 (DATA1)  
        .equ CAN1_RDL1R_DATA0_Shift, 0   @ bitWidth 8 (DATA0)  
 
    .equ CAN1_RDH1R, CAN1_BASE + 0x1CC @ (mailbox data high register) 
        .equ CAN1_RDH1R_DATA7_Shift, 24   @ bitWidth 8 (DATA7)  
        .equ CAN1_RDH1R_DATA6_Shift, 16   @ bitWidth 8 (DATA6)  
        .equ CAN1_RDH1R_DATA5_Shift, 8   @ bitWidth 8 (DATA5)  
        .equ CAN1_RDH1R_DATA4_Shift, 0   @ bitWidth 8 (DATA4)  
 
    .equ CAN1_FMR, CAN1_BASE + 0x200 @ (filter master register) 
        .equ CAN1_FMR_CAN2SB_Shift, 8   @ bitWidth 6 (CAN2SB)  
        .equ CAN1_FMR_FINIT, 1 << 0   @ bitWidth 1 (FINIT)  
 
    .equ CAN1_FM1R, CAN1_BASE + 0x204 @ (filter mode register) 
        .equ CAN1_FM1R_FBM0, 1 << 0   @ bitWidth 1 (Filter mode)  
        .equ CAN1_FM1R_FBM1, 1 << 1   @ bitWidth 1 (Filter mode)  
        .equ CAN1_FM1R_FBM2, 1 << 2   @ bitWidth 1 (Filter mode)  
        .equ CAN1_FM1R_FBM3, 1 << 3   @ bitWidth 1 (Filter mode)  
        .equ CAN1_FM1R_FBM4, 1 << 4   @ bitWidth 1 (Filter mode)  
        .equ CAN1_FM1R_FBM5, 1 << 5   @ bitWidth 1 (Filter mode)  
        .equ CAN1_FM1R_FBM6, 1 << 6   @ bitWidth 1 (Filter mode)  
        .equ CAN1_FM1R_FBM7, 1 << 7   @ bitWidth 1 (Filter mode)  
        .equ CAN1_FM1R_FBM8, 1 << 8   @ bitWidth 1 (Filter mode)  
        .equ CAN1_FM1R_FBM9, 1 << 9   @ bitWidth 1 (Filter mode)  
        .equ CAN1_FM1R_FBM10, 1 << 10   @ bitWidth 1 (Filter mode)  
        .equ CAN1_FM1R_FBM11, 1 << 11   @ bitWidth 1 (Filter mode)  
        .equ CAN1_FM1R_FBM12, 1 << 12   @ bitWidth 1 (Filter mode)  
        .equ CAN1_FM1R_FBM13, 1 << 13   @ bitWidth 1 (Filter mode)  
        .equ CAN1_FM1R_FBM14, 1 << 14   @ bitWidth 1 (Filter mode)  
        .equ CAN1_FM1R_FBM15, 1 << 15   @ bitWidth 1 (Filter mode)  
        .equ CAN1_FM1R_FBM16, 1 << 16   @ bitWidth 1 (Filter mode)  
        .equ CAN1_FM1R_FBM17, 1 << 17   @ bitWidth 1 (Filter mode)  
        .equ CAN1_FM1R_FBM18, 1 << 18   @ bitWidth 1 (Filter mode)  
        .equ CAN1_FM1R_FBM19, 1 << 19   @ bitWidth 1 (Filter mode)  
        .equ CAN1_FM1R_FBM20, 1 << 20   @ bitWidth 1 (Filter mode)  
        .equ CAN1_FM1R_FBM21, 1 << 21   @ bitWidth 1 (Filter mode)  
        .equ CAN1_FM1R_FBM22, 1 << 22   @ bitWidth 1 (Filter mode)  
        .equ CAN1_FM1R_FBM23, 1 << 23   @ bitWidth 1 (Filter mode)  
        .equ CAN1_FM1R_FBM24, 1 << 24   @ bitWidth 1 (Filter mode)  
        .equ CAN1_FM1R_FBM25, 1 << 25   @ bitWidth 1 (Filter mode)  
        .equ CAN1_FM1R_FBM26, 1 << 26   @ bitWidth 1 (Filter mode)  
        .equ CAN1_FM1R_FBM27, 1 << 27   @ bitWidth 1 (Filter mode)  
 
    .equ CAN1_FS1R, CAN1_BASE + 0x20C @ (filter scale register) 
        .equ CAN1_FS1R_FSC0, 1 << 0   @ bitWidth 1 (Filter scale configuration)  
        .equ CAN1_FS1R_FSC1, 1 << 1   @ bitWidth 1 (Filter scale configuration)  
        .equ CAN1_FS1R_FSC2, 1 << 2   @ bitWidth 1 (Filter scale configuration)  
        .equ CAN1_FS1R_FSC3, 1 << 3   @ bitWidth 1 (Filter scale configuration)  
        .equ CAN1_FS1R_FSC4, 1 << 4   @ bitWidth 1 (Filter scale configuration)  
        .equ CAN1_FS1R_FSC5, 1 << 5   @ bitWidth 1 (Filter scale configuration)  
        .equ CAN1_FS1R_FSC6, 1 << 6   @ bitWidth 1 (Filter scale configuration)  
        .equ CAN1_FS1R_FSC7, 1 << 7   @ bitWidth 1 (Filter scale configuration)  
        .equ CAN1_FS1R_FSC8, 1 << 8   @ bitWidth 1 (Filter scale configuration)  
        .equ CAN1_FS1R_FSC9, 1 << 9   @ bitWidth 1 (Filter scale configuration)  
        .equ CAN1_FS1R_FSC10, 1 << 10   @ bitWidth 1 (Filter scale configuration)  
        .equ CAN1_FS1R_FSC11, 1 << 11   @ bitWidth 1 (Filter scale configuration)  
        .equ CAN1_FS1R_FSC12, 1 << 12   @ bitWidth 1 (Filter scale configuration)  
        .equ CAN1_FS1R_FSC13, 1 << 13   @ bitWidth 1 (Filter scale configuration)  
        .equ CAN1_FS1R_FSC14, 1 << 14   @ bitWidth 1 (Filter scale configuration)  
        .equ CAN1_FS1R_FSC15, 1 << 15   @ bitWidth 1 (Filter scale configuration)  
        .equ CAN1_FS1R_FSC16, 1 << 16   @ bitWidth 1 (Filter scale configuration)  
        .equ CAN1_FS1R_FSC17, 1 << 17   @ bitWidth 1 (Filter scale configuration)  
        .equ CAN1_FS1R_FSC18, 1 << 18   @ bitWidth 1 (Filter scale configuration)  
        .equ CAN1_FS1R_FSC19, 1 << 19   @ bitWidth 1 (Filter scale configuration)  
        .equ CAN1_FS1R_FSC20, 1 << 20   @ bitWidth 1 (Filter scale configuration)  
        .equ CAN1_FS1R_FSC21, 1 << 21   @ bitWidth 1 (Filter scale configuration)  
        .equ CAN1_FS1R_FSC22, 1 << 22   @ bitWidth 1 (Filter scale configuration)  
        .equ CAN1_FS1R_FSC23, 1 << 23   @ bitWidth 1 (Filter scale configuration)  
        .equ CAN1_FS1R_FSC24, 1 << 24   @ bitWidth 1 (Filter scale configuration)  
        .equ CAN1_FS1R_FSC25, 1 << 25   @ bitWidth 1 (Filter scale configuration)  
        .equ CAN1_FS1R_FSC26, 1 << 26   @ bitWidth 1 (Filter scale configuration)  
        .equ CAN1_FS1R_FSC27, 1 << 27   @ bitWidth 1 (Filter scale configuration)  
 
    .equ CAN1_FFA1R, CAN1_BASE + 0x214 @ (filter FIFO assignment  register) 
        .equ CAN1_FFA1R_FFA0, 1 << 0   @ bitWidth 1 (Filter FIFO assignment for filter  0)  
        .equ CAN1_FFA1R_FFA1, 1 << 1   @ bitWidth 1 (Filter FIFO assignment for filter  1)  
        .equ CAN1_FFA1R_FFA2, 1 << 2   @ bitWidth 1 (Filter FIFO assignment for filter  2)  
        .equ CAN1_FFA1R_FFA3, 1 << 3   @ bitWidth 1 (Filter FIFO assignment for filter  3)  
        .equ CAN1_FFA1R_FFA4, 1 << 4   @ bitWidth 1 (Filter FIFO assignment for filter  4)  
        .equ CAN1_FFA1R_FFA5, 1 << 5   @ bitWidth 1 (Filter FIFO assignment for filter  5)  
        .equ CAN1_FFA1R_FFA6, 1 << 6   @ bitWidth 1 (Filter FIFO assignment for filter  6)  
        .equ CAN1_FFA1R_FFA7, 1 << 7   @ bitWidth 1 (Filter FIFO assignment for filter  7)  
        .equ CAN1_FFA1R_FFA8, 1 << 8   @ bitWidth 1 (Filter FIFO assignment for filter  8)  
        .equ CAN1_FFA1R_FFA9, 1 << 9   @ bitWidth 1 (Filter FIFO assignment for filter  9)  
        .equ CAN1_FFA1R_FFA10, 1 << 10   @ bitWidth 1 (Filter FIFO assignment for filter  10)  
        .equ CAN1_FFA1R_FFA11, 1 << 11   @ bitWidth 1 (Filter FIFO assignment for filter  11)  
        .equ CAN1_FFA1R_FFA12, 1 << 12   @ bitWidth 1 (Filter FIFO assignment for filter  12)  
        .equ CAN1_FFA1R_FFA13, 1 << 13   @ bitWidth 1 (Filter FIFO assignment for filter  13)  
        .equ CAN1_FFA1R_FFA14, 1 << 14   @ bitWidth 1 (Filter FIFO assignment for filter  14)  
        .equ CAN1_FFA1R_FFA15, 1 << 15   @ bitWidth 1 (Filter FIFO assignment for filter  15)  
        .equ CAN1_FFA1R_FFA16, 1 << 16   @ bitWidth 1 (Filter FIFO assignment for filter  16)  
        .equ CAN1_FFA1R_FFA17, 1 << 17   @ bitWidth 1 (Filter FIFO assignment for filter  17)  
        .equ CAN1_FFA1R_FFA18, 1 << 18   @ bitWidth 1 (Filter FIFO assignment for filter  18)  
        .equ CAN1_FFA1R_FFA19, 1 << 19   @ bitWidth 1 (Filter FIFO assignment for filter  19)  
        .equ CAN1_FFA1R_FFA20, 1 << 20   @ bitWidth 1 (Filter FIFO assignment for filter  20)  
        .equ CAN1_FFA1R_FFA21, 1 << 21   @ bitWidth 1 (Filter FIFO assignment for filter  21)  
        .equ CAN1_FFA1R_FFA22, 1 << 22   @ bitWidth 1 (Filter FIFO assignment for filter  22)  
        .equ CAN1_FFA1R_FFA23, 1 << 23   @ bitWidth 1 (Filter FIFO assignment for filter  23)  
        .equ CAN1_FFA1R_FFA24, 1 << 24   @ bitWidth 1 (Filter FIFO assignment for filter  24)  
        .equ CAN1_FFA1R_FFA25, 1 << 25   @ bitWidth 1 (Filter FIFO assignment for filter  25)  
        .equ CAN1_FFA1R_FFA26, 1 << 26   @ bitWidth 1 (Filter FIFO assignment for filter  26)  
        .equ CAN1_FFA1R_FFA27, 1 << 27   @ bitWidth 1 (Filter FIFO assignment for filter  27)  
 
    .equ CAN1_FA1R, CAN1_BASE + 0x21C @ (filter activation register) 
        .equ CAN1_FA1R_FACT0, 1 << 0   @ bitWidth 1 (Filter active)  
        .equ CAN1_FA1R_FACT1, 1 << 1   @ bitWidth 1 (Filter active)  
        .equ CAN1_FA1R_FACT2, 1 << 2   @ bitWidth 1 (Filter active)  
        .equ CAN1_FA1R_FACT3, 1 << 3   @ bitWidth 1 (Filter active)  
        .equ CAN1_FA1R_FACT4, 1 << 4   @ bitWidth 1 (Filter active)  
        .equ CAN1_FA1R_FACT5, 1 << 5   @ bitWidth 1 (Filter active)  
        .equ CAN1_FA1R_FACT6, 1 << 6   @ bitWidth 1 (Filter active)  
        .equ CAN1_FA1R_FACT7, 1 << 7   @ bitWidth 1 (Filter active)  
        .equ CAN1_FA1R_FACT8, 1 << 8   @ bitWidth 1 (Filter active)  
        .equ CAN1_FA1R_FACT9, 1 << 9   @ bitWidth 1 (Filter active)  
        .equ CAN1_FA1R_FACT10, 1 << 10   @ bitWidth 1 (Filter active)  
        .equ CAN1_FA1R_FACT11, 1 << 11   @ bitWidth 1 (Filter active)  
        .equ CAN1_FA1R_FACT12, 1 << 12   @ bitWidth 1 (Filter active)  
        .equ CAN1_FA1R_FACT13, 1 << 13   @ bitWidth 1 (Filter active)  
        .equ CAN1_FA1R_FACT14, 1 << 14   @ bitWidth 1 (Filter active)  
        .equ CAN1_FA1R_FACT15, 1 << 15   @ bitWidth 1 (Filter active)  
        .equ CAN1_FA1R_FACT16, 1 << 16   @ bitWidth 1 (Filter active)  
        .equ CAN1_FA1R_FACT17, 1 << 17   @ bitWidth 1 (Filter active)  
        .equ CAN1_FA1R_FACT18, 1 << 18   @ bitWidth 1 (Filter active)  
        .equ CAN1_FA1R_FACT19, 1 << 19   @ bitWidth 1 (Filter active)  
        .equ CAN1_FA1R_FACT20, 1 << 20   @ bitWidth 1 (Filter active)  
        .equ CAN1_FA1R_FACT21, 1 << 21   @ bitWidth 1 (Filter active)  
        .equ CAN1_FA1R_FACT22, 1 << 22   @ bitWidth 1 (Filter active)  
        .equ CAN1_FA1R_FACT23, 1 << 23   @ bitWidth 1 (Filter active)  
        .equ CAN1_FA1R_FACT24, 1 << 24   @ bitWidth 1 (Filter active)  
        .equ CAN1_FA1R_FACT25, 1 << 25   @ bitWidth 1 (Filter active)  
        .equ CAN1_FA1R_FACT26, 1 << 26   @ bitWidth 1 (Filter active)  
        .equ CAN1_FA1R_FACT27, 1 << 27   @ bitWidth 1 (Filter active)  
 
    .equ CAN1_F0R1, CAN1_BASE + 0x240 @ (Filter bank 0 register 1) 
        .equ CAN1_F0R1_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F0R1_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F0R1_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F0R1_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F0R1_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F0R1_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F0R1_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F0R1_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F0R1_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F0R1_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F0R1_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F0R1_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F0R1_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F0R1_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F0R1_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F0R1_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F0R1_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F0R1_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F0R1_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F0R1_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F0R1_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F0R1_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F0R1_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F0R1_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F0R1_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F0R1_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F0R1_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F0R1_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F0R1_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F0R1_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F0R1_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F0R1_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN1_F0R2, CAN1_BASE + 0x244 @ (Filter bank 0 register 2) 
        .equ CAN1_F0R2_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F0R2_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F0R2_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F0R2_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F0R2_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F0R2_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F0R2_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F0R2_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F0R2_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F0R2_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F0R2_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F0R2_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F0R2_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F0R2_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F0R2_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F0R2_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F0R2_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F0R2_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F0R2_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F0R2_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F0R2_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F0R2_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F0R2_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F0R2_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F0R2_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F0R2_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F0R2_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F0R2_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F0R2_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F0R2_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F0R2_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F0R2_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN1_F1R1, CAN1_BASE + 0x248 @ (Filter bank 1 register 1) 
        .equ CAN1_F1R1_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F1R1_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F1R1_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F1R1_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F1R1_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F1R1_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F1R1_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F1R1_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F1R1_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F1R1_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F1R1_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F1R1_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F1R1_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F1R1_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F1R1_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F1R1_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F1R1_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F1R1_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F1R1_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F1R1_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F1R1_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F1R1_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F1R1_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F1R1_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F1R1_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F1R1_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F1R1_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F1R1_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F1R1_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F1R1_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F1R1_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F1R1_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN1_F1R2, CAN1_BASE + 0x24C @ (Filter bank 1 register 2) 
        .equ CAN1_F1R2_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F1R2_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F1R2_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F1R2_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F1R2_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F1R2_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F1R2_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F1R2_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F1R2_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F1R2_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F1R2_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F1R2_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F1R2_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F1R2_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F1R2_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F1R2_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F1R2_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F1R2_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F1R2_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F1R2_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F1R2_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F1R2_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F1R2_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F1R2_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F1R2_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F1R2_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F1R2_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F1R2_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F1R2_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F1R2_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F1R2_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F1R2_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN1_F2R1, CAN1_BASE + 0x250 @ (Filter bank 2 register 1) 
        .equ CAN1_F2R1_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F2R1_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F2R1_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F2R1_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F2R1_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F2R1_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F2R1_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F2R1_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F2R1_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F2R1_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F2R1_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F2R1_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F2R1_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F2R1_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F2R1_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F2R1_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F2R1_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F2R1_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F2R1_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F2R1_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F2R1_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F2R1_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F2R1_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F2R1_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F2R1_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F2R1_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F2R1_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F2R1_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F2R1_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F2R1_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F2R1_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F2R1_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN1_F2R2, CAN1_BASE + 0x254 @ (Filter bank 2 register 2) 
        .equ CAN1_F2R2_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F2R2_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F2R2_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F2R2_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F2R2_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F2R2_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F2R2_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F2R2_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F2R2_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F2R2_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F2R2_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F2R2_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F2R2_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F2R2_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F2R2_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F2R2_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F2R2_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F2R2_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F2R2_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F2R2_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F2R2_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F2R2_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F2R2_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F2R2_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F2R2_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F2R2_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F2R2_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F2R2_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F2R2_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F2R2_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F2R2_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F2R2_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN1_F3R1, CAN1_BASE + 0x258 @ (Filter bank 3 register 1) 
        .equ CAN1_F3R1_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F3R1_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F3R1_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F3R1_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F3R1_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F3R1_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F3R1_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F3R1_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F3R1_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F3R1_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F3R1_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F3R1_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F3R1_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F3R1_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F3R1_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F3R1_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F3R1_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F3R1_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F3R1_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F3R1_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F3R1_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F3R1_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F3R1_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F3R1_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F3R1_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F3R1_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F3R1_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F3R1_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F3R1_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F3R1_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F3R1_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F3R1_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN1_F3R2, CAN1_BASE + 0x25C @ (Filter bank 3 register 2) 
        .equ CAN1_F3R2_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F3R2_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F3R2_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F3R2_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F3R2_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F3R2_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F3R2_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F3R2_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F3R2_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F3R2_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F3R2_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F3R2_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F3R2_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F3R2_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F3R2_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F3R2_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F3R2_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F3R2_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F3R2_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F3R2_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F3R2_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F3R2_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F3R2_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F3R2_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F3R2_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F3R2_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F3R2_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F3R2_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F3R2_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F3R2_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F3R2_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F3R2_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN1_F4R1, CAN1_BASE + 0x260 @ (Filter bank 4 register 1) 
        .equ CAN1_F4R1_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F4R1_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F4R1_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F4R1_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F4R1_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F4R1_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F4R1_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F4R1_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F4R1_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F4R1_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F4R1_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F4R1_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F4R1_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F4R1_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F4R1_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F4R1_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F4R1_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F4R1_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F4R1_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F4R1_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F4R1_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F4R1_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F4R1_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F4R1_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F4R1_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F4R1_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F4R1_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F4R1_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F4R1_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F4R1_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F4R1_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F4R1_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN1_F4R2, CAN1_BASE + 0x264 @ (Filter bank 4 register 2) 
        .equ CAN1_F4R2_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F4R2_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F4R2_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F4R2_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F4R2_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F4R2_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F4R2_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F4R2_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F4R2_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F4R2_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F4R2_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F4R2_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F4R2_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F4R2_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F4R2_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F4R2_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F4R2_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F4R2_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F4R2_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F4R2_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F4R2_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F4R2_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F4R2_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F4R2_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F4R2_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F4R2_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F4R2_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F4R2_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F4R2_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F4R2_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F4R2_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F4R2_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN1_F5R1, CAN1_BASE + 0x268 @ (Filter bank 5 register 1) 
        .equ CAN1_F5R1_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F5R1_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F5R1_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F5R1_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F5R1_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F5R1_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F5R1_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F5R1_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F5R1_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F5R1_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F5R1_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F5R1_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F5R1_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F5R1_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F5R1_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F5R1_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F5R1_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F5R1_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F5R1_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F5R1_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F5R1_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F5R1_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F5R1_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F5R1_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F5R1_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F5R1_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F5R1_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F5R1_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F5R1_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F5R1_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F5R1_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F5R1_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN1_F5R2, CAN1_BASE + 0x26C @ (Filter bank 5 register 2) 
        .equ CAN1_F5R2_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F5R2_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F5R2_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F5R2_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F5R2_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F5R2_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F5R2_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F5R2_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F5R2_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F5R2_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F5R2_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F5R2_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F5R2_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F5R2_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F5R2_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F5R2_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F5R2_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F5R2_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F5R2_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F5R2_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F5R2_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F5R2_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F5R2_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F5R2_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F5R2_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F5R2_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F5R2_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F5R2_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F5R2_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F5R2_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F5R2_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F5R2_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN1_F6R1, CAN1_BASE + 0x270 @ (Filter bank 6 register 1) 
        .equ CAN1_F6R1_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F6R1_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F6R1_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F6R1_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F6R1_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F6R1_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F6R1_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F6R1_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F6R1_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F6R1_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F6R1_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F6R1_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F6R1_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F6R1_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F6R1_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F6R1_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F6R1_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F6R1_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F6R1_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F6R1_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F6R1_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F6R1_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F6R1_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F6R1_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F6R1_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F6R1_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F6R1_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F6R1_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F6R1_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F6R1_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F6R1_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F6R1_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN1_F6R2, CAN1_BASE + 0x274 @ (Filter bank 6 register 2) 
        .equ CAN1_F6R2_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F6R2_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F6R2_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F6R2_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F6R2_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F6R2_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F6R2_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F6R2_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F6R2_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F6R2_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F6R2_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F6R2_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F6R2_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F6R2_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F6R2_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F6R2_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F6R2_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F6R2_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F6R2_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F6R2_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F6R2_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F6R2_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F6R2_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F6R2_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F6R2_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F6R2_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F6R2_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F6R2_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F6R2_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F6R2_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F6R2_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F6R2_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN1_F7R1, CAN1_BASE + 0x278 @ (Filter bank 7 register 1) 
        .equ CAN1_F7R1_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F7R1_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F7R1_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F7R1_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F7R1_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F7R1_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F7R1_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F7R1_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F7R1_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F7R1_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F7R1_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F7R1_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F7R1_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F7R1_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F7R1_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F7R1_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F7R1_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F7R1_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F7R1_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F7R1_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F7R1_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F7R1_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F7R1_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F7R1_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F7R1_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F7R1_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F7R1_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F7R1_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F7R1_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F7R1_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F7R1_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F7R1_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN1_F7R2, CAN1_BASE + 0x27C @ (Filter bank 7 register 2) 
        .equ CAN1_F7R2_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F7R2_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F7R2_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F7R2_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F7R2_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F7R2_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F7R2_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F7R2_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F7R2_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F7R2_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F7R2_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F7R2_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F7R2_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F7R2_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F7R2_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F7R2_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F7R2_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F7R2_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F7R2_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F7R2_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F7R2_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F7R2_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F7R2_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F7R2_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F7R2_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F7R2_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F7R2_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F7R2_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F7R2_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F7R2_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F7R2_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F7R2_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN1_F8R1, CAN1_BASE + 0x280 @ (Filter bank 8 register 1) 
        .equ CAN1_F8R1_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F8R1_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F8R1_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F8R1_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F8R1_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F8R1_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F8R1_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F8R1_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F8R1_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F8R1_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F8R1_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F8R1_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F8R1_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F8R1_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F8R1_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F8R1_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F8R1_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F8R1_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F8R1_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F8R1_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F8R1_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F8R1_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F8R1_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F8R1_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F8R1_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F8R1_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F8R1_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F8R1_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F8R1_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F8R1_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F8R1_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F8R1_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN1_F8R2, CAN1_BASE + 0x284 @ (Filter bank 8 register 2) 
        .equ CAN1_F8R2_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F8R2_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F8R2_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F8R2_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F8R2_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F8R2_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F8R2_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F8R2_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F8R2_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F8R2_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F8R2_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F8R2_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F8R2_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F8R2_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F8R2_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F8R2_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F8R2_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F8R2_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F8R2_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F8R2_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F8R2_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F8R2_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F8R2_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F8R2_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F8R2_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F8R2_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F8R2_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F8R2_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F8R2_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F8R2_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F8R2_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F8R2_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN1_F9R1, CAN1_BASE + 0x288 @ (Filter bank 9 register 1) 
        .equ CAN1_F9R1_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F9R1_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F9R1_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F9R1_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F9R1_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F9R1_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F9R1_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F9R1_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F9R1_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F9R1_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F9R1_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F9R1_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F9R1_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F9R1_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F9R1_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F9R1_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F9R1_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F9R1_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F9R1_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F9R1_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F9R1_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F9R1_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F9R1_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F9R1_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F9R1_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F9R1_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F9R1_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F9R1_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F9R1_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F9R1_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F9R1_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F9R1_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN1_F9R2, CAN1_BASE + 0x28C @ (Filter bank 9 register 2) 
        .equ CAN1_F9R2_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F9R2_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F9R2_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F9R2_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F9R2_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F9R2_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F9R2_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F9R2_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F9R2_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F9R2_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F9R2_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F9R2_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F9R2_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F9R2_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F9R2_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F9R2_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F9R2_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F9R2_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F9R2_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F9R2_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F9R2_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F9R2_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F9R2_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F9R2_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F9R2_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F9R2_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F9R2_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F9R2_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F9R2_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F9R2_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F9R2_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F9R2_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN1_F10R1, CAN1_BASE + 0x290 @ (Filter bank 10 register 1) 
        .equ CAN1_F10R1_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F10R1_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F10R1_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F10R1_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F10R1_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F10R1_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F10R1_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F10R1_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F10R1_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F10R1_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F10R1_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F10R1_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F10R1_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F10R1_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F10R1_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F10R1_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F10R1_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F10R1_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F10R1_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F10R1_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F10R1_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F10R1_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F10R1_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F10R1_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F10R1_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F10R1_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F10R1_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F10R1_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F10R1_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F10R1_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F10R1_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F10R1_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN1_F10R2, CAN1_BASE + 0x294 @ (Filter bank 10 register 2) 
        .equ CAN1_F10R2_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F10R2_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F10R2_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F10R2_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F10R2_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F10R2_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F10R2_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F10R2_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F10R2_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F10R2_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F10R2_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F10R2_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F10R2_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F10R2_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F10R2_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F10R2_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F10R2_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F10R2_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F10R2_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F10R2_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F10R2_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F10R2_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F10R2_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F10R2_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F10R2_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F10R2_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F10R2_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F10R2_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F10R2_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F10R2_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F10R2_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F10R2_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN1_F11R1, CAN1_BASE + 0x298 @ (Filter bank 11 register 1) 
        .equ CAN1_F11R1_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F11R1_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F11R1_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F11R1_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F11R1_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F11R1_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F11R1_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F11R1_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F11R1_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F11R1_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F11R1_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F11R1_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F11R1_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F11R1_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F11R1_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F11R1_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F11R1_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F11R1_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F11R1_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F11R1_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F11R1_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F11R1_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F11R1_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F11R1_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F11R1_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F11R1_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F11R1_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F11R1_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F11R1_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F11R1_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F11R1_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F11R1_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN1_F11R2, CAN1_BASE + 0x29C @ (Filter bank 11 register 2) 
        .equ CAN1_F11R2_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F11R2_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F11R2_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F11R2_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F11R2_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F11R2_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F11R2_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F11R2_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F11R2_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F11R2_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F11R2_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F11R2_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F11R2_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F11R2_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F11R2_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F11R2_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F11R2_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F11R2_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F11R2_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F11R2_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F11R2_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F11R2_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F11R2_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F11R2_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F11R2_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F11R2_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F11R2_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F11R2_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F11R2_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F11R2_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F11R2_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F11R2_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN1_F12R1, CAN1_BASE + 0x2A0 @ (Filter bank 4 register 1) 
        .equ CAN1_F12R1_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F12R1_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F12R1_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F12R1_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F12R1_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F12R1_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F12R1_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F12R1_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F12R1_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F12R1_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F12R1_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F12R1_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F12R1_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F12R1_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F12R1_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F12R1_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F12R1_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F12R1_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F12R1_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F12R1_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F12R1_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F12R1_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F12R1_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F12R1_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F12R1_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F12R1_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F12R1_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F12R1_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F12R1_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F12R1_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F12R1_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F12R1_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN1_F12R2, CAN1_BASE + 0x2A4 @ (Filter bank 12 register 2) 
        .equ CAN1_F12R2_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F12R2_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F12R2_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F12R2_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F12R2_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F12R2_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F12R2_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F12R2_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F12R2_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F12R2_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F12R2_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F12R2_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F12R2_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F12R2_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F12R2_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F12R2_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F12R2_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F12R2_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F12R2_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F12R2_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F12R2_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F12R2_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F12R2_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F12R2_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F12R2_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F12R2_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F12R2_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F12R2_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F12R2_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F12R2_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F12R2_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F12R2_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN1_F13R1, CAN1_BASE + 0x2A8 @ (Filter bank 13 register 1) 
        .equ CAN1_F13R1_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F13R1_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F13R1_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F13R1_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F13R1_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F13R1_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F13R1_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F13R1_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F13R1_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F13R1_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F13R1_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F13R1_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F13R1_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F13R1_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F13R1_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F13R1_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F13R1_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F13R1_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F13R1_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F13R1_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F13R1_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F13R1_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F13R1_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F13R1_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F13R1_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F13R1_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F13R1_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F13R1_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F13R1_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F13R1_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F13R1_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F13R1_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN1_F13R2, CAN1_BASE + 0x2AC @ (Filter bank 13 register 2) 
        .equ CAN1_F13R2_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F13R2_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F13R2_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F13R2_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F13R2_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F13R2_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F13R2_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F13R2_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F13R2_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F13R2_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F13R2_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F13R2_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F13R2_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F13R2_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F13R2_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F13R2_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F13R2_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F13R2_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F13R2_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F13R2_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F13R2_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F13R2_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F13R2_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F13R2_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F13R2_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F13R2_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F13R2_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F13R2_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F13R2_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F13R2_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F13R2_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F13R2_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN1_F14R1, CAN1_BASE + 0x2B0 @ (Filter bank 14 register 1) 
        .equ CAN1_F14R1_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F14R1_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F14R1_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F14R1_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F14R1_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F14R1_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F14R1_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F14R1_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F14R1_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F14R1_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F14R1_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F14R1_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F14R1_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F14R1_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F14R1_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F14R1_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F14R1_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F14R1_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F14R1_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F14R1_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F14R1_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F14R1_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F14R1_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F14R1_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F14R1_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F14R1_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F14R1_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F14R1_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F14R1_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F14R1_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F14R1_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F14R1_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN1_F14R2, CAN1_BASE + 0x2B4 @ (Filter bank 14 register 2) 
        .equ CAN1_F14R2_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F14R2_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F14R2_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F14R2_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F14R2_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F14R2_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F14R2_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F14R2_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F14R2_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F14R2_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F14R2_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F14R2_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F14R2_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F14R2_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F14R2_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F14R2_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F14R2_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F14R2_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F14R2_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F14R2_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F14R2_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F14R2_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F14R2_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F14R2_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F14R2_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F14R2_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F14R2_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F14R2_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F14R2_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F14R2_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F14R2_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F14R2_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN1_F15R1, CAN1_BASE + 0x2B8 @ (Filter bank 15 register 1) 
        .equ CAN1_F15R1_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F15R1_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F15R1_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F15R1_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F15R1_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F15R1_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F15R1_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F15R1_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F15R1_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F15R1_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F15R1_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F15R1_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F15R1_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F15R1_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F15R1_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F15R1_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F15R1_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F15R1_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F15R1_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F15R1_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F15R1_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F15R1_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F15R1_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F15R1_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F15R1_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F15R1_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F15R1_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F15R1_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F15R1_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F15R1_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F15R1_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F15R1_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN1_F15R2, CAN1_BASE + 0x2BC @ (Filter bank 15 register 2) 
        .equ CAN1_F15R2_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F15R2_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F15R2_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F15R2_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F15R2_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F15R2_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F15R2_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F15R2_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F15R2_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F15R2_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F15R2_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F15R2_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F15R2_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F15R2_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F15R2_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F15R2_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F15R2_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F15R2_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F15R2_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F15R2_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F15R2_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F15R2_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F15R2_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F15R2_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F15R2_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F15R2_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F15R2_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F15R2_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F15R2_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F15R2_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F15R2_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F15R2_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN1_F16R1, CAN1_BASE + 0x2C0 @ (Filter bank 16 register 1) 
        .equ CAN1_F16R1_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F16R1_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F16R1_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F16R1_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F16R1_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F16R1_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F16R1_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F16R1_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F16R1_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F16R1_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F16R1_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F16R1_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F16R1_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F16R1_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F16R1_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F16R1_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F16R1_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F16R1_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F16R1_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F16R1_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F16R1_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F16R1_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F16R1_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F16R1_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F16R1_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F16R1_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F16R1_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F16R1_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F16R1_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F16R1_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F16R1_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F16R1_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN1_F16R2, CAN1_BASE + 0x2C4 @ (Filter bank 16 register 2) 
        .equ CAN1_F16R2_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F16R2_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F16R2_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F16R2_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F16R2_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F16R2_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F16R2_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F16R2_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F16R2_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F16R2_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F16R2_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F16R2_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F16R2_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F16R2_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F16R2_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F16R2_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F16R2_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F16R2_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F16R2_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F16R2_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F16R2_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F16R2_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F16R2_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F16R2_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F16R2_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F16R2_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F16R2_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F16R2_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F16R2_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F16R2_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F16R2_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F16R2_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN1_F17R1, CAN1_BASE + 0x2C8 @ (Filter bank 17 register 1) 
        .equ CAN1_F17R1_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F17R1_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F17R1_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F17R1_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F17R1_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F17R1_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F17R1_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F17R1_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F17R1_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F17R1_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F17R1_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F17R1_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F17R1_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F17R1_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F17R1_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F17R1_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F17R1_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F17R1_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F17R1_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F17R1_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F17R1_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F17R1_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F17R1_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F17R1_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F17R1_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F17R1_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F17R1_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F17R1_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F17R1_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F17R1_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F17R1_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F17R1_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN1_F17R2, CAN1_BASE + 0x2CC @ (Filter bank 17 register 2) 
        .equ CAN1_F17R2_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F17R2_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F17R2_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F17R2_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F17R2_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F17R2_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F17R2_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F17R2_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F17R2_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F17R2_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F17R2_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F17R2_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F17R2_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F17R2_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F17R2_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F17R2_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F17R2_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F17R2_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F17R2_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F17R2_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F17R2_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F17R2_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F17R2_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F17R2_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F17R2_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F17R2_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F17R2_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F17R2_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F17R2_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F17R2_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F17R2_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F17R2_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN1_F18R1, CAN1_BASE + 0x2D0 @ (Filter bank 18 register 1) 
        .equ CAN1_F18R1_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F18R1_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F18R1_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F18R1_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F18R1_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F18R1_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F18R1_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F18R1_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F18R1_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F18R1_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F18R1_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F18R1_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F18R1_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F18R1_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F18R1_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F18R1_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F18R1_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F18R1_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F18R1_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F18R1_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F18R1_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F18R1_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F18R1_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F18R1_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F18R1_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F18R1_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F18R1_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F18R1_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F18R1_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F18R1_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F18R1_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F18R1_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN1_F18R2, CAN1_BASE + 0x2D4 @ (Filter bank 18 register 2) 
        .equ CAN1_F18R2_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F18R2_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F18R2_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F18R2_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F18R2_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F18R2_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F18R2_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F18R2_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F18R2_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F18R2_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F18R2_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F18R2_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F18R2_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F18R2_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F18R2_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F18R2_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F18R2_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F18R2_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F18R2_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F18R2_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F18R2_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F18R2_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F18R2_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F18R2_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F18R2_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F18R2_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F18R2_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F18R2_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F18R2_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F18R2_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F18R2_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F18R2_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN1_F19R1, CAN1_BASE + 0x2D8 @ (Filter bank 19 register 1) 
        .equ CAN1_F19R1_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F19R1_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F19R1_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F19R1_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F19R1_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F19R1_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F19R1_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F19R1_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F19R1_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F19R1_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F19R1_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F19R1_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F19R1_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F19R1_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F19R1_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F19R1_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F19R1_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F19R1_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F19R1_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F19R1_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F19R1_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F19R1_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F19R1_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F19R1_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F19R1_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F19R1_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F19R1_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F19R1_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F19R1_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F19R1_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F19R1_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F19R1_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN1_F19R2, CAN1_BASE + 0x2DC @ (Filter bank 19 register 2) 
        .equ CAN1_F19R2_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F19R2_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F19R2_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F19R2_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F19R2_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F19R2_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F19R2_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F19R2_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F19R2_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F19R2_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F19R2_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F19R2_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F19R2_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F19R2_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F19R2_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F19R2_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F19R2_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F19R2_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F19R2_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F19R2_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F19R2_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F19R2_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F19R2_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F19R2_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F19R2_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F19R2_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F19R2_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F19R2_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F19R2_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F19R2_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F19R2_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F19R2_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN1_F20R1, CAN1_BASE + 0x2E0 @ (Filter bank 20 register 1) 
        .equ CAN1_F20R1_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F20R1_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F20R1_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F20R1_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F20R1_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F20R1_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F20R1_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F20R1_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F20R1_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F20R1_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F20R1_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F20R1_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F20R1_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F20R1_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F20R1_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F20R1_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F20R1_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F20R1_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F20R1_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F20R1_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F20R1_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F20R1_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F20R1_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F20R1_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F20R1_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F20R1_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F20R1_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F20R1_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F20R1_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F20R1_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F20R1_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F20R1_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN1_F20R2, CAN1_BASE + 0x2E4 @ (Filter bank 20 register 2) 
        .equ CAN1_F20R2_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F20R2_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F20R2_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F20R2_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F20R2_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F20R2_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F20R2_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F20R2_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F20R2_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F20R2_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F20R2_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F20R2_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F20R2_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F20R2_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F20R2_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F20R2_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F20R2_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F20R2_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F20R2_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F20R2_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F20R2_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F20R2_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F20R2_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F20R2_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F20R2_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F20R2_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F20R2_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F20R2_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F20R2_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F20R2_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F20R2_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F20R2_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN1_F21R1, CAN1_BASE + 0x2E8 @ (Filter bank 21 register 1) 
        .equ CAN1_F21R1_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F21R1_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F21R1_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F21R1_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F21R1_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F21R1_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F21R1_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F21R1_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F21R1_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F21R1_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F21R1_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F21R1_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F21R1_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F21R1_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F21R1_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F21R1_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F21R1_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F21R1_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F21R1_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F21R1_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F21R1_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F21R1_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F21R1_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F21R1_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F21R1_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F21R1_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F21R1_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F21R1_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F21R1_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F21R1_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F21R1_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F21R1_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN1_F21R2, CAN1_BASE + 0x2EC @ (Filter bank 21 register 2) 
        .equ CAN1_F21R2_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F21R2_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F21R2_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F21R2_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F21R2_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F21R2_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F21R2_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F21R2_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F21R2_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F21R2_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F21R2_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F21R2_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F21R2_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F21R2_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F21R2_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F21R2_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F21R2_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F21R2_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F21R2_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F21R2_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F21R2_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F21R2_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F21R2_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F21R2_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F21R2_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F21R2_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F21R2_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F21R2_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F21R2_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F21R2_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F21R2_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F21R2_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN1_F22R1, CAN1_BASE + 0x2F0 @ (Filter bank 22 register 1) 
        .equ CAN1_F22R1_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F22R1_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F22R1_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F22R1_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F22R1_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F22R1_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F22R1_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F22R1_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F22R1_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F22R1_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F22R1_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F22R1_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F22R1_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F22R1_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F22R1_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F22R1_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F22R1_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F22R1_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F22R1_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F22R1_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F22R1_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F22R1_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F22R1_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F22R1_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F22R1_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F22R1_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F22R1_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F22R1_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F22R1_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F22R1_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F22R1_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F22R1_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN1_F22R2, CAN1_BASE + 0x2F4 @ (Filter bank 22 register 2) 
        .equ CAN1_F22R2_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F22R2_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F22R2_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F22R2_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F22R2_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F22R2_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F22R2_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F22R2_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F22R2_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F22R2_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F22R2_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F22R2_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F22R2_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F22R2_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F22R2_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F22R2_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F22R2_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F22R2_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F22R2_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F22R2_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F22R2_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F22R2_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F22R2_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F22R2_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F22R2_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F22R2_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F22R2_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F22R2_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F22R2_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F22R2_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F22R2_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F22R2_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN1_F23R1, CAN1_BASE + 0x2F8 @ (Filter bank 23 register 1) 
        .equ CAN1_F23R1_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F23R1_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F23R1_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F23R1_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F23R1_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F23R1_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F23R1_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F23R1_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F23R1_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F23R1_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F23R1_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F23R1_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F23R1_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F23R1_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F23R1_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F23R1_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F23R1_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F23R1_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F23R1_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F23R1_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F23R1_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F23R1_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F23R1_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F23R1_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F23R1_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F23R1_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F23R1_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F23R1_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F23R1_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F23R1_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F23R1_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F23R1_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN1_F23R2, CAN1_BASE + 0x2FC @ (Filter bank 23 register 2) 
        .equ CAN1_F23R2_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F23R2_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F23R2_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F23R2_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F23R2_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F23R2_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F23R2_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F23R2_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F23R2_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F23R2_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F23R2_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F23R2_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F23R2_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F23R2_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F23R2_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F23R2_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F23R2_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F23R2_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F23R2_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F23R2_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F23R2_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F23R2_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F23R2_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F23R2_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F23R2_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F23R2_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F23R2_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F23R2_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F23R2_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F23R2_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F23R2_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F23R2_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN1_F24R1, CAN1_BASE + 0x300 @ (Filter bank 24 register 1) 
        .equ CAN1_F24R1_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F24R1_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F24R1_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F24R1_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F24R1_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F24R1_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F24R1_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F24R1_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F24R1_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F24R1_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F24R1_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F24R1_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F24R1_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F24R1_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F24R1_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F24R1_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F24R1_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F24R1_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F24R1_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F24R1_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F24R1_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F24R1_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F24R1_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F24R1_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F24R1_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F24R1_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F24R1_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F24R1_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F24R1_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F24R1_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F24R1_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F24R1_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN1_F24R2, CAN1_BASE + 0x304 @ (Filter bank 24 register 2) 
        .equ CAN1_F24R2_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F24R2_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F24R2_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F24R2_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F24R2_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F24R2_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F24R2_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F24R2_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F24R2_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F24R2_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F24R2_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F24R2_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F24R2_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F24R2_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F24R2_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F24R2_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F24R2_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F24R2_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F24R2_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F24R2_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F24R2_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F24R2_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F24R2_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F24R2_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F24R2_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F24R2_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F24R2_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F24R2_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F24R2_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F24R2_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F24R2_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F24R2_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN1_F25R1, CAN1_BASE + 0x308 @ (Filter bank 25 register 1) 
        .equ CAN1_F25R1_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F25R1_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F25R1_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F25R1_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F25R1_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F25R1_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F25R1_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F25R1_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F25R1_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F25R1_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F25R1_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F25R1_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F25R1_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F25R1_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F25R1_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F25R1_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F25R1_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F25R1_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F25R1_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F25R1_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F25R1_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F25R1_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F25R1_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F25R1_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F25R1_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F25R1_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F25R1_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F25R1_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F25R1_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F25R1_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F25R1_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F25R1_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN1_F25R2, CAN1_BASE + 0x30C @ (Filter bank 25 register 2) 
        .equ CAN1_F25R2_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F25R2_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F25R2_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F25R2_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F25R2_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F25R2_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F25R2_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F25R2_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F25R2_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F25R2_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F25R2_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F25R2_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F25R2_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F25R2_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F25R2_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F25R2_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F25R2_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F25R2_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F25R2_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F25R2_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F25R2_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F25R2_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F25R2_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F25R2_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F25R2_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F25R2_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F25R2_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F25R2_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F25R2_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F25R2_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F25R2_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F25R2_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN1_F26R1, CAN1_BASE + 0x310 @ (Filter bank 26 register 1) 
        .equ CAN1_F26R1_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F26R1_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F26R1_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F26R1_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F26R1_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F26R1_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F26R1_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F26R1_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F26R1_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F26R1_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F26R1_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F26R1_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F26R1_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F26R1_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F26R1_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F26R1_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F26R1_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F26R1_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F26R1_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F26R1_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F26R1_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F26R1_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F26R1_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F26R1_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F26R1_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F26R1_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F26R1_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F26R1_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F26R1_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F26R1_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F26R1_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F26R1_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN1_F26R2, CAN1_BASE + 0x314 @ (Filter bank 26 register 2) 
        .equ CAN1_F26R2_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F26R2_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F26R2_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F26R2_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F26R2_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F26R2_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F26R2_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F26R2_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F26R2_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F26R2_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F26R2_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F26R2_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F26R2_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F26R2_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F26R2_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F26R2_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F26R2_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F26R2_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F26R2_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F26R2_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F26R2_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F26R2_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F26R2_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F26R2_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F26R2_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F26R2_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F26R2_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F26R2_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F26R2_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F26R2_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F26R2_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F26R2_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN1_F27R1, CAN1_BASE + 0x318 @ (Filter bank 27 register 1) 
        .equ CAN1_F27R1_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F27R1_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F27R1_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F27R1_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F27R1_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F27R1_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F27R1_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F27R1_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F27R1_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F27R1_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F27R1_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F27R1_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F27R1_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F27R1_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F27R1_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F27R1_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F27R1_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F27R1_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F27R1_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F27R1_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F27R1_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F27R1_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F27R1_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F27R1_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F27R1_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F27R1_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F27R1_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F27R1_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F27R1_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F27R1_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F27R1_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F27R1_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN1_F27R2, CAN1_BASE + 0x31C @ (Filter bank 27 register 2) 
        .equ CAN1_F27R2_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F27R2_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F27R2_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F27R2_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F27R2_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F27R2_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F27R2_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F27R2_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F27R2_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F27R2_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F27R2_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F27R2_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F27R2_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F27R2_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F27R2_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F27R2_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F27R2_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F27R2_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F27R2_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F27R2_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F27R2_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F27R2_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F27R2_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F27R2_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F27R2_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F27R2_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F27R2_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F27R2_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F27R2_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F27R2_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F27R2_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN1_F27R2_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 

@=========================== CAN2 ===========================@
.equ CAN2_BASE, 0x40006800 @ (Controller area network) 
    .equ CAN2_MCR, CAN2_BASE + 0x0 @ (master control register) 
        .equ CAN2_MCR_DBF, 1 << 16   @ bitWidth 1 (DBF)  
        .equ CAN2_MCR_RESET, 1 << 15   @ bitWidth 1 (RESET)  
        .equ CAN2_MCR_TTCM, 1 << 7   @ bitWidth 1 (TTCM)  
        .equ CAN2_MCR_ABOM, 1 << 6   @ bitWidth 1 (ABOM)  
        .equ CAN2_MCR_AWUM, 1 << 5   @ bitWidth 1 (AWUM)  
        .equ CAN2_MCR_NART, 1 << 4   @ bitWidth 1 (NART)  
        .equ CAN2_MCR_RFLM, 1 << 3   @ bitWidth 1 (RFLM)  
        .equ CAN2_MCR_TXFP, 1 << 2   @ bitWidth 1 (TXFP)  
        .equ CAN2_MCR_SLEEP, 1 << 1   @ bitWidth 1 (SLEEP)  
        .equ CAN2_MCR_INRQ, 1 << 0   @ bitWidth 1 (INRQ)  
 
    .equ CAN2_MSR, CAN2_BASE + 0x4 @ (master status register) 
        .equ CAN2_MSR_RX, 1 << 11   @ bitWidth 1 (RX)  
        .equ CAN2_MSR_SAMP, 1 << 10   @ bitWidth 1 (SAMP)  
        .equ CAN2_MSR_RXM, 1 << 9   @ bitWidth 1 (RXM)  
        .equ CAN2_MSR_TXM, 1 << 8   @ bitWidth 1 (TXM)  
        .equ CAN2_MSR_SLAKI, 1 << 4   @ bitWidth 1 (SLAKI)  
        .equ CAN2_MSR_WKUI, 1 << 3   @ bitWidth 1 (WKUI)  
        .equ CAN2_MSR_ERRI, 1 << 2   @ bitWidth 1 (ERRI)  
        .equ CAN2_MSR_SLAK, 1 << 1   @ bitWidth 1 (SLAK)  
        .equ CAN2_MSR_INAK, 1 << 0   @ bitWidth 1 (INAK)  
 
    .equ CAN2_TSR, CAN2_BASE + 0x8 @ (transmit status register) 
        .equ CAN2_TSR_LOW2, 1 << 31   @ bitWidth 1 (Lowest priority flag for mailbox  2)  
        .equ CAN2_TSR_LOW1, 1 << 30   @ bitWidth 1 (Lowest priority flag for mailbox  1)  
        .equ CAN2_TSR_LOW0, 1 << 29   @ bitWidth 1 (Lowest priority flag for mailbox  0)  
        .equ CAN2_TSR_TME2, 1 << 28   @ bitWidth 1 (Lowest priority flag for mailbox  2)  
        .equ CAN2_TSR_TME1, 1 << 27   @ bitWidth 1 (Lowest priority flag for mailbox  1)  
        .equ CAN2_TSR_TME0, 1 << 26   @ bitWidth 1 (Lowest priority flag for mailbox  0)  
        .equ CAN2_TSR_CODE_Shift, 24   @ bitWidth 2 (CODE)  
        .equ CAN2_TSR_ABRQ2, 1 << 23   @ bitWidth 1 (ABRQ2)  
        .equ CAN2_TSR_TERR2, 1 << 19   @ bitWidth 1 (TERR2)  
        .equ CAN2_TSR_ALST2, 1 << 18   @ bitWidth 1 (ALST2)  
        .equ CAN2_TSR_TXOK2, 1 << 17   @ bitWidth 1 (TXOK2)  
        .equ CAN2_TSR_RQCP2, 1 << 16   @ bitWidth 1 (RQCP2)  
        .equ CAN2_TSR_ABRQ1, 1 << 15   @ bitWidth 1 (ABRQ1)  
        .equ CAN2_TSR_TERR1, 1 << 11   @ bitWidth 1 (TERR1)  
        .equ CAN2_TSR_ALST1, 1 << 10   @ bitWidth 1 (ALST1)  
        .equ CAN2_TSR_TXOK1, 1 << 9   @ bitWidth 1 (TXOK1)  
        .equ CAN2_TSR_RQCP1, 1 << 8   @ bitWidth 1 (RQCP1)  
        .equ CAN2_TSR_ABRQ0, 1 << 7   @ bitWidth 1 (ABRQ0)  
        .equ CAN2_TSR_TERR0, 1 << 3   @ bitWidth 1 (TERR0)  
        .equ CAN2_TSR_ALST0, 1 << 2   @ bitWidth 1 (ALST0)  
        .equ CAN2_TSR_TXOK0, 1 << 1   @ bitWidth 1 (TXOK0)  
        .equ CAN2_TSR_RQCP0, 1 << 0   @ bitWidth 1 (RQCP0)  
 
    .equ CAN2_RF0R, CAN2_BASE + 0xC @ (receive FIFO 0 register) 
        .equ CAN2_RF0R_RFOM0, 1 << 5   @ bitWidth 1 (RFOM0)  
        .equ CAN2_RF0R_FOVR0, 1 << 4   @ bitWidth 1 (FOVR0)  
        .equ CAN2_RF0R_FULL0, 1 << 3   @ bitWidth 1 (FULL0)  
        .equ CAN2_RF0R_FMP0_Shift, 0   @ bitWidth 2 (FMP0)  
 
    .equ CAN2_RF1R, CAN2_BASE + 0x10 @ (receive FIFO 1 register) 
        .equ CAN2_RF1R_RFOM1, 1 << 5   @ bitWidth 1 (RFOM1)  
        .equ CAN2_RF1R_FOVR1, 1 << 4   @ bitWidth 1 (FOVR1)  
        .equ CAN2_RF1R_FULL1, 1 << 3   @ bitWidth 1 (FULL1)  
        .equ CAN2_RF1R_FMP1_Shift, 0   @ bitWidth 2 (FMP1)  
 
    .equ CAN2_IER, CAN2_BASE + 0x14 @ (interrupt enable register) 
        .equ CAN2_IER_SLKIE, 1 << 17   @ bitWidth 1 (SLKIE)  
        .equ CAN2_IER_WKUIE, 1 << 16   @ bitWidth 1 (WKUIE)  
        .equ CAN2_IER_ERRIE, 1 << 15   @ bitWidth 1 (ERRIE)  
        .equ CAN2_IER_LECIE, 1 << 11   @ bitWidth 1 (LECIE)  
        .equ CAN2_IER_BOFIE, 1 << 10   @ bitWidth 1 (BOFIE)  
        .equ CAN2_IER_EPVIE, 1 << 9   @ bitWidth 1 (EPVIE)  
        .equ CAN2_IER_EWGIE, 1 << 8   @ bitWidth 1 (EWGIE)  
        .equ CAN2_IER_FOVIE1, 1 << 6   @ bitWidth 1 (FOVIE1)  
        .equ CAN2_IER_FFIE1, 1 << 5   @ bitWidth 1 (FFIE1)  
        .equ CAN2_IER_FMPIE1, 1 << 4   @ bitWidth 1 (FMPIE1)  
        .equ CAN2_IER_FOVIE0, 1 << 3   @ bitWidth 1 (FOVIE0)  
        .equ CAN2_IER_FFIE0, 1 << 2   @ bitWidth 1 (FFIE0)  
        .equ CAN2_IER_FMPIE0, 1 << 1   @ bitWidth 1 (FMPIE0)  
        .equ CAN2_IER_TMEIE, 1 << 0   @ bitWidth 1 (TMEIE)  
 
    .equ CAN2_ESR, CAN2_BASE + 0x18 @ (interrupt enable register) 
        .equ CAN2_ESR_REC_Shift, 24   @ bitWidth 8 (REC)  
        .equ CAN2_ESR_TEC_Shift, 16   @ bitWidth 8 (TEC)  
        .equ CAN2_ESR_LEC_Shift, 4   @ bitWidth 3 (LEC)  
        .equ CAN2_ESR_BOFF, 1 << 2   @ bitWidth 1 (BOFF)  
        .equ CAN2_ESR_EPVF, 1 << 1   @ bitWidth 1 (EPVF)  
        .equ CAN2_ESR_EWGF, 1 << 0   @ bitWidth 1 (EWGF)  
 
    .equ CAN2_BTR, CAN2_BASE + 0x1C @ (bit timing register) 
        .equ CAN2_BTR_SILM, 1 << 31   @ bitWidth 1 (SILM)  
        .equ CAN2_BTR_LBKM, 1 << 30   @ bitWidth 1 (LBKM)  
        .equ CAN2_BTR_SJW_Shift, 24   @ bitWidth 2 (SJW)  
        .equ CAN2_BTR_TS2_Shift, 20   @ bitWidth 3 (TS2)  
        .equ CAN2_BTR_TS1_Shift, 16   @ bitWidth 4 (TS1)  
        .equ CAN2_BTR_BRP_Shift, 0   @ bitWidth 10 (BRP)  
 
    .equ CAN2_TI0R, CAN2_BASE + 0x180 @ (TX mailbox identifier register) 
        .equ CAN2_TI0R_STID_Shift, 21   @ bitWidth 11 (STID)  
        .equ CAN2_TI0R_EXID_Shift, 3   @ bitWidth 18 (EXID)  
        .equ CAN2_TI0R_IDE, 1 << 2   @ bitWidth 1 (IDE)  
        .equ CAN2_TI0R_RTR, 1 << 1   @ bitWidth 1 (RTR)  
        .equ CAN2_TI0R_TXRQ, 1 << 0   @ bitWidth 1 (TXRQ)  
 
    .equ CAN2_TDT0R, CAN2_BASE + 0x184 @ (mailbox data length control and time stamp  register) 
        .equ CAN2_TDT0R_TIME_Shift, 16   @ bitWidth 16 (TIME)  
        .equ CAN2_TDT0R_TGT, 1 << 8   @ bitWidth 1 (TGT)  
        .equ CAN2_TDT0R_DLC_Shift, 0   @ bitWidth 4 (DLC)  
 
    .equ CAN2_TDL0R, CAN2_BASE + 0x188 @ (mailbox data low register) 
        .equ CAN2_TDL0R_DATA3_Shift, 24   @ bitWidth 8 (DATA3)  
        .equ CAN2_TDL0R_DATA2_Shift, 16   @ bitWidth 8 (DATA2)  
        .equ CAN2_TDL0R_DATA1_Shift, 8   @ bitWidth 8 (DATA1)  
        .equ CAN2_TDL0R_DATA0_Shift, 0   @ bitWidth 8 (DATA0)  
 
    .equ CAN2_TDH0R, CAN2_BASE + 0x18C @ (mailbox data high register) 
        .equ CAN2_TDH0R_DATA7_Shift, 24   @ bitWidth 8 (DATA7)  
        .equ CAN2_TDH0R_DATA6_Shift, 16   @ bitWidth 8 (DATA6)  
        .equ CAN2_TDH0R_DATA5_Shift, 8   @ bitWidth 8 (DATA5)  
        .equ CAN2_TDH0R_DATA4_Shift, 0   @ bitWidth 8 (DATA4)  
 
    .equ CAN2_TI1R, CAN2_BASE + 0x190 @ (mailbox identifier register) 
        .equ CAN2_TI1R_STID_Shift, 21   @ bitWidth 11 (STID)  
        .equ CAN2_TI1R_EXID_Shift, 3   @ bitWidth 18 (EXID)  
        .equ CAN2_TI1R_IDE, 1 << 2   @ bitWidth 1 (IDE)  
        .equ CAN2_TI1R_RTR, 1 << 1   @ bitWidth 1 (RTR)  
        .equ CAN2_TI1R_TXRQ, 1 << 0   @ bitWidth 1 (TXRQ)  
 
    .equ CAN2_TDT1R, CAN2_BASE + 0x194 @ (mailbox data length control and time stamp  register) 
        .equ CAN2_TDT1R_TIME_Shift, 16   @ bitWidth 16 (TIME)  
        .equ CAN2_TDT1R_TGT, 1 << 8   @ bitWidth 1 (TGT)  
        .equ CAN2_TDT1R_DLC_Shift, 0   @ bitWidth 4 (DLC)  
 
    .equ CAN2_TDL1R, CAN2_BASE + 0x198 @ (mailbox data low register) 
        .equ CAN2_TDL1R_DATA3_Shift, 24   @ bitWidth 8 (DATA3)  
        .equ CAN2_TDL1R_DATA2_Shift, 16   @ bitWidth 8 (DATA2)  
        .equ CAN2_TDL1R_DATA1_Shift, 8   @ bitWidth 8 (DATA1)  
        .equ CAN2_TDL1R_DATA0_Shift, 0   @ bitWidth 8 (DATA0)  
 
    .equ CAN2_TDH1R, CAN2_BASE + 0x19C @ (mailbox data high register) 
        .equ CAN2_TDH1R_DATA7_Shift, 24   @ bitWidth 8 (DATA7)  
        .equ CAN2_TDH1R_DATA6_Shift, 16   @ bitWidth 8 (DATA6)  
        .equ CAN2_TDH1R_DATA5_Shift, 8   @ bitWidth 8 (DATA5)  
        .equ CAN2_TDH1R_DATA4_Shift, 0   @ bitWidth 8 (DATA4)  
 
    .equ CAN2_TI2R, CAN2_BASE + 0x1A0 @ (mailbox identifier register) 
        .equ CAN2_TI2R_STID_Shift, 21   @ bitWidth 11 (STID)  
        .equ CAN2_TI2R_EXID_Shift, 3   @ bitWidth 18 (EXID)  
        .equ CAN2_TI2R_IDE, 1 << 2   @ bitWidth 1 (IDE)  
        .equ CAN2_TI2R_RTR, 1 << 1   @ bitWidth 1 (RTR)  
        .equ CAN2_TI2R_TXRQ, 1 << 0   @ bitWidth 1 (TXRQ)  
 
    .equ CAN2_TDT2R, CAN2_BASE + 0x1A4 @ (mailbox data length control and time stamp  register) 
        .equ CAN2_TDT2R_TIME_Shift, 16   @ bitWidth 16 (TIME)  
        .equ CAN2_TDT2R_TGT, 1 << 8   @ bitWidth 1 (TGT)  
        .equ CAN2_TDT2R_DLC_Shift, 0   @ bitWidth 4 (DLC)  
 
    .equ CAN2_TDL2R, CAN2_BASE + 0x1A8 @ (mailbox data low register) 
        .equ CAN2_TDL2R_DATA3_Shift, 24   @ bitWidth 8 (DATA3)  
        .equ CAN2_TDL2R_DATA2_Shift, 16   @ bitWidth 8 (DATA2)  
        .equ CAN2_TDL2R_DATA1_Shift, 8   @ bitWidth 8 (DATA1)  
        .equ CAN2_TDL2R_DATA0_Shift, 0   @ bitWidth 8 (DATA0)  
 
    .equ CAN2_TDH2R, CAN2_BASE + 0x1AC @ (mailbox data high register) 
        .equ CAN2_TDH2R_DATA7_Shift, 24   @ bitWidth 8 (DATA7)  
        .equ CAN2_TDH2R_DATA6_Shift, 16   @ bitWidth 8 (DATA6)  
        .equ CAN2_TDH2R_DATA5_Shift, 8   @ bitWidth 8 (DATA5)  
        .equ CAN2_TDH2R_DATA4_Shift, 0   @ bitWidth 8 (DATA4)  
 
    .equ CAN2_RI0R, CAN2_BASE + 0x1B0 @ (receive FIFO mailbox identifier  register) 
        .equ CAN2_RI0R_STID_Shift, 21   @ bitWidth 11 (STID)  
        .equ CAN2_RI0R_EXID_Shift, 3   @ bitWidth 18 (EXID)  
        .equ CAN2_RI0R_IDE, 1 << 2   @ bitWidth 1 (IDE)  
        .equ CAN2_RI0R_RTR, 1 << 1   @ bitWidth 1 (RTR)  
 
    .equ CAN2_RDT0R, CAN2_BASE + 0x1B4 @ (mailbox data high register) 
        .equ CAN2_RDT0R_TIME_Shift, 16   @ bitWidth 16 (TIME)  
        .equ CAN2_RDT0R_FMI_Shift, 8   @ bitWidth 8 (FMI)  
        .equ CAN2_RDT0R_DLC_Shift, 0   @ bitWidth 4 (DLC)  
 
    .equ CAN2_RDL0R, CAN2_BASE + 0x1B8 @ (mailbox data high register) 
        .equ CAN2_RDL0R_DATA3_Shift, 24   @ bitWidth 8 (DATA3)  
        .equ CAN2_RDL0R_DATA2_Shift, 16   @ bitWidth 8 (DATA2)  
        .equ CAN2_RDL0R_DATA1_Shift, 8   @ bitWidth 8 (DATA1)  
        .equ CAN2_RDL0R_DATA0_Shift, 0   @ bitWidth 8 (DATA0)  
 
    .equ CAN2_RDH0R, CAN2_BASE + 0x1BC @ (receive FIFO mailbox data high  register) 
        .equ CAN2_RDH0R_DATA7_Shift, 24   @ bitWidth 8 (DATA7)  
        .equ CAN2_RDH0R_DATA6_Shift, 16   @ bitWidth 8 (DATA6)  
        .equ CAN2_RDH0R_DATA5_Shift, 8   @ bitWidth 8 (DATA5)  
        .equ CAN2_RDH0R_DATA4_Shift, 0   @ bitWidth 8 (DATA4)  
 
    .equ CAN2_RI1R, CAN2_BASE + 0x1C0 @ (mailbox data high register) 
        .equ CAN2_RI1R_STID_Shift, 21   @ bitWidth 11 (STID)  
        .equ CAN2_RI1R_EXID_Shift, 3   @ bitWidth 18 (EXID)  
        .equ CAN2_RI1R_IDE, 1 << 2   @ bitWidth 1 (IDE)  
        .equ CAN2_RI1R_RTR, 1 << 1   @ bitWidth 1 (RTR)  
 
    .equ CAN2_RDT1R, CAN2_BASE + 0x1C4 @ (mailbox data high register) 
        .equ CAN2_RDT1R_TIME_Shift, 16   @ bitWidth 16 (TIME)  
        .equ CAN2_RDT1R_FMI_Shift, 8   @ bitWidth 8 (FMI)  
        .equ CAN2_RDT1R_DLC_Shift, 0   @ bitWidth 4 (DLC)  
 
    .equ CAN2_RDL1R, CAN2_BASE + 0x1C8 @ (mailbox data high register) 
        .equ CAN2_RDL1R_DATA3_Shift, 24   @ bitWidth 8 (DATA3)  
        .equ CAN2_RDL1R_DATA2_Shift, 16   @ bitWidth 8 (DATA2)  
        .equ CAN2_RDL1R_DATA1_Shift, 8   @ bitWidth 8 (DATA1)  
        .equ CAN2_RDL1R_DATA0_Shift, 0   @ bitWidth 8 (DATA0)  
 
    .equ CAN2_RDH1R, CAN2_BASE + 0x1CC @ (mailbox data high register) 
        .equ CAN2_RDH1R_DATA7_Shift, 24   @ bitWidth 8 (DATA7)  
        .equ CAN2_RDH1R_DATA6_Shift, 16   @ bitWidth 8 (DATA6)  
        .equ CAN2_RDH1R_DATA5_Shift, 8   @ bitWidth 8 (DATA5)  
        .equ CAN2_RDH1R_DATA4_Shift, 0   @ bitWidth 8 (DATA4)  
 
    .equ CAN2_FMR, CAN2_BASE + 0x200 @ (filter master register) 
        .equ CAN2_FMR_CAN2SB_Shift, 8   @ bitWidth 6 (CAN2SB)  
        .equ CAN2_FMR_FINIT, 1 << 0   @ bitWidth 1 (FINIT)  
 
    .equ CAN2_FM1R, CAN2_BASE + 0x204 @ (filter mode register) 
        .equ CAN2_FM1R_FBM0, 1 << 0   @ bitWidth 1 (Filter mode)  
        .equ CAN2_FM1R_FBM1, 1 << 1   @ bitWidth 1 (Filter mode)  
        .equ CAN2_FM1R_FBM2, 1 << 2   @ bitWidth 1 (Filter mode)  
        .equ CAN2_FM1R_FBM3, 1 << 3   @ bitWidth 1 (Filter mode)  
        .equ CAN2_FM1R_FBM4, 1 << 4   @ bitWidth 1 (Filter mode)  
        .equ CAN2_FM1R_FBM5, 1 << 5   @ bitWidth 1 (Filter mode)  
        .equ CAN2_FM1R_FBM6, 1 << 6   @ bitWidth 1 (Filter mode)  
        .equ CAN2_FM1R_FBM7, 1 << 7   @ bitWidth 1 (Filter mode)  
        .equ CAN2_FM1R_FBM8, 1 << 8   @ bitWidth 1 (Filter mode)  
        .equ CAN2_FM1R_FBM9, 1 << 9   @ bitWidth 1 (Filter mode)  
        .equ CAN2_FM1R_FBM10, 1 << 10   @ bitWidth 1 (Filter mode)  
        .equ CAN2_FM1R_FBM11, 1 << 11   @ bitWidth 1 (Filter mode)  
        .equ CAN2_FM1R_FBM12, 1 << 12   @ bitWidth 1 (Filter mode)  
        .equ CAN2_FM1R_FBM13, 1 << 13   @ bitWidth 1 (Filter mode)  
        .equ CAN2_FM1R_FBM14, 1 << 14   @ bitWidth 1 (Filter mode)  
        .equ CAN2_FM1R_FBM15, 1 << 15   @ bitWidth 1 (Filter mode)  
        .equ CAN2_FM1R_FBM16, 1 << 16   @ bitWidth 1 (Filter mode)  
        .equ CAN2_FM1R_FBM17, 1 << 17   @ bitWidth 1 (Filter mode)  
        .equ CAN2_FM1R_FBM18, 1 << 18   @ bitWidth 1 (Filter mode)  
        .equ CAN2_FM1R_FBM19, 1 << 19   @ bitWidth 1 (Filter mode)  
        .equ CAN2_FM1R_FBM20, 1 << 20   @ bitWidth 1 (Filter mode)  
        .equ CAN2_FM1R_FBM21, 1 << 21   @ bitWidth 1 (Filter mode)  
        .equ CAN2_FM1R_FBM22, 1 << 22   @ bitWidth 1 (Filter mode)  
        .equ CAN2_FM1R_FBM23, 1 << 23   @ bitWidth 1 (Filter mode)  
        .equ CAN2_FM1R_FBM24, 1 << 24   @ bitWidth 1 (Filter mode)  
        .equ CAN2_FM1R_FBM25, 1 << 25   @ bitWidth 1 (Filter mode)  
        .equ CAN2_FM1R_FBM26, 1 << 26   @ bitWidth 1 (Filter mode)  
        .equ CAN2_FM1R_FBM27, 1 << 27   @ bitWidth 1 (Filter mode)  
 
    .equ CAN2_FS1R, CAN2_BASE + 0x20C @ (filter scale register) 
        .equ CAN2_FS1R_FSC0, 1 << 0   @ bitWidth 1 (Filter scale configuration)  
        .equ CAN2_FS1R_FSC1, 1 << 1   @ bitWidth 1 (Filter scale configuration)  
        .equ CAN2_FS1R_FSC2, 1 << 2   @ bitWidth 1 (Filter scale configuration)  
        .equ CAN2_FS1R_FSC3, 1 << 3   @ bitWidth 1 (Filter scale configuration)  
        .equ CAN2_FS1R_FSC4, 1 << 4   @ bitWidth 1 (Filter scale configuration)  
        .equ CAN2_FS1R_FSC5, 1 << 5   @ bitWidth 1 (Filter scale configuration)  
        .equ CAN2_FS1R_FSC6, 1 << 6   @ bitWidth 1 (Filter scale configuration)  
        .equ CAN2_FS1R_FSC7, 1 << 7   @ bitWidth 1 (Filter scale configuration)  
        .equ CAN2_FS1R_FSC8, 1 << 8   @ bitWidth 1 (Filter scale configuration)  
        .equ CAN2_FS1R_FSC9, 1 << 9   @ bitWidth 1 (Filter scale configuration)  
        .equ CAN2_FS1R_FSC10, 1 << 10   @ bitWidth 1 (Filter scale configuration)  
        .equ CAN2_FS1R_FSC11, 1 << 11   @ bitWidth 1 (Filter scale configuration)  
        .equ CAN2_FS1R_FSC12, 1 << 12   @ bitWidth 1 (Filter scale configuration)  
        .equ CAN2_FS1R_FSC13, 1 << 13   @ bitWidth 1 (Filter scale configuration)  
        .equ CAN2_FS1R_FSC14, 1 << 14   @ bitWidth 1 (Filter scale configuration)  
        .equ CAN2_FS1R_FSC15, 1 << 15   @ bitWidth 1 (Filter scale configuration)  
        .equ CAN2_FS1R_FSC16, 1 << 16   @ bitWidth 1 (Filter scale configuration)  
        .equ CAN2_FS1R_FSC17, 1 << 17   @ bitWidth 1 (Filter scale configuration)  
        .equ CAN2_FS1R_FSC18, 1 << 18   @ bitWidth 1 (Filter scale configuration)  
        .equ CAN2_FS1R_FSC19, 1 << 19   @ bitWidth 1 (Filter scale configuration)  
        .equ CAN2_FS1R_FSC20, 1 << 20   @ bitWidth 1 (Filter scale configuration)  
        .equ CAN2_FS1R_FSC21, 1 << 21   @ bitWidth 1 (Filter scale configuration)  
        .equ CAN2_FS1R_FSC22, 1 << 22   @ bitWidth 1 (Filter scale configuration)  
        .equ CAN2_FS1R_FSC23, 1 << 23   @ bitWidth 1 (Filter scale configuration)  
        .equ CAN2_FS1R_FSC24, 1 << 24   @ bitWidth 1 (Filter scale configuration)  
        .equ CAN2_FS1R_FSC25, 1 << 25   @ bitWidth 1 (Filter scale configuration)  
        .equ CAN2_FS1R_FSC26, 1 << 26   @ bitWidth 1 (Filter scale configuration)  
        .equ CAN2_FS1R_FSC27, 1 << 27   @ bitWidth 1 (Filter scale configuration)  
 
    .equ CAN2_FFA1R, CAN2_BASE + 0x214 @ (filter FIFO assignment  register) 
        .equ CAN2_FFA1R_FFA0, 1 << 0   @ bitWidth 1 (Filter FIFO assignment for filter  0)  
        .equ CAN2_FFA1R_FFA1, 1 << 1   @ bitWidth 1 (Filter FIFO assignment for filter  1)  
        .equ CAN2_FFA1R_FFA2, 1 << 2   @ bitWidth 1 (Filter FIFO assignment for filter  2)  
        .equ CAN2_FFA1R_FFA3, 1 << 3   @ bitWidth 1 (Filter FIFO assignment for filter  3)  
        .equ CAN2_FFA1R_FFA4, 1 << 4   @ bitWidth 1 (Filter FIFO assignment for filter  4)  
        .equ CAN2_FFA1R_FFA5, 1 << 5   @ bitWidth 1 (Filter FIFO assignment for filter  5)  
        .equ CAN2_FFA1R_FFA6, 1 << 6   @ bitWidth 1 (Filter FIFO assignment for filter  6)  
        .equ CAN2_FFA1R_FFA7, 1 << 7   @ bitWidth 1 (Filter FIFO assignment for filter  7)  
        .equ CAN2_FFA1R_FFA8, 1 << 8   @ bitWidth 1 (Filter FIFO assignment for filter  8)  
        .equ CAN2_FFA1R_FFA9, 1 << 9   @ bitWidth 1 (Filter FIFO assignment for filter  9)  
        .equ CAN2_FFA1R_FFA10, 1 << 10   @ bitWidth 1 (Filter FIFO assignment for filter  10)  
        .equ CAN2_FFA1R_FFA11, 1 << 11   @ bitWidth 1 (Filter FIFO assignment for filter  11)  
        .equ CAN2_FFA1R_FFA12, 1 << 12   @ bitWidth 1 (Filter FIFO assignment for filter  12)  
        .equ CAN2_FFA1R_FFA13, 1 << 13   @ bitWidth 1 (Filter FIFO assignment for filter  13)  
        .equ CAN2_FFA1R_FFA14, 1 << 14   @ bitWidth 1 (Filter FIFO assignment for filter  14)  
        .equ CAN2_FFA1R_FFA15, 1 << 15   @ bitWidth 1 (Filter FIFO assignment for filter  15)  
        .equ CAN2_FFA1R_FFA16, 1 << 16   @ bitWidth 1 (Filter FIFO assignment for filter  16)  
        .equ CAN2_FFA1R_FFA17, 1 << 17   @ bitWidth 1 (Filter FIFO assignment for filter  17)  
        .equ CAN2_FFA1R_FFA18, 1 << 18   @ bitWidth 1 (Filter FIFO assignment for filter  18)  
        .equ CAN2_FFA1R_FFA19, 1 << 19   @ bitWidth 1 (Filter FIFO assignment for filter  19)  
        .equ CAN2_FFA1R_FFA20, 1 << 20   @ bitWidth 1 (Filter FIFO assignment for filter  20)  
        .equ CAN2_FFA1R_FFA21, 1 << 21   @ bitWidth 1 (Filter FIFO assignment for filter  21)  
        .equ CAN2_FFA1R_FFA22, 1 << 22   @ bitWidth 1 (Filter FIFO assignment for filter  22)  
        .equ CAN2_FFA1R_FFA23, 1 << 23   @ bitWidth 1 (Filter FIFO assignment for filter  23)  
        .equ CAN2_FFA1R_FFA24, 1 << 24   @ bitWidth 1 (Filter FIFO assignment for filter  24)  
        .equ CAN2_FFA1R_FFA25, 1 << 25   @ bitWidth 1 (Filter FIFO assignment for filter  25)  
        .equ CAN2_FFA1R_FFA26, 1 << 26   @ bitWidth 1 (Filter FIFO assignment for filter  26)  
        .equ CAN2_FFA1R_FFA27, 1 << 27   @ bitWidth 1 (Filter FIFO assignment for filter  27)  
 
    .equ CAN2_FA1R, CAN2_BASE + 0x21C @ (filter activation register) 
        .equ CAN2_FA1R_FACT0, 1 << 0   @ bitWidth 1 (Filter active)  
        .equ CAN2_FA1R_FACT1, 1 << 1   @ bitWidth 1 (Filter active)  
        .equ CAN2_FA1R_FACT2, 1 << 2   @ bitWidth 1 (Filter active)  
        .equ CAN2_FA1R_FACT3, 1 << 3   @ bitWidth 1 (Filter active)  
        .equ CAN2_FA1R_FACT4, 1 << 4   @ bitWidth 1 (Filter active)  
        .equ CAN2_FA1R_FACT5, 1 << 5   @ bitWidth 1 (Filter active)  
        .equ CAN2_FA1R_FACT6, 1 << 6   @ bitWidth 1 (Filter active)  
        .equ CAN2_FA1R_FACT7, 1 << 7   @ bitWidth 1 (Filter active)  
        .equ CAN2_FA1R_FACT8, 1 << 8   @ bitWidth 1 (Filter active)  
        .equ CAN2_FA1R_FACT9, 1 << 9   @ bitWidth 1 (Filter active)  
        .equ CAN2_FA1R_FACT10, 1 << 10   @ bitWidth 1 (Filter active)  
        .equ CAN2_FA1R_FACT11, 1 << 11   @ bitWidth 1 (Filter active)  
        .equ CAN2_FA1R_FACT12, 1 << 12   @ bitWidth 1 (Filter active)  
        .equ CAN2_FA1R_FACT13, 1 << 13   @ bitWidth 1 (Filter active)  
        .equ CAN2_FA1R_FACT14, 1 << 14   @ bitWidth 1 (Filter active)  
        .equ CAN2_FA1R_FACT15, 1 << 15   @ bitWidth 1 (Filter active)  
        .equ CAN2_FA1R_FACT16, 1 << 16   @ bitWidth 1 (Filter active)  
        .equ CAN2_FA1R_FACT17, 1 << 17   @ bitWidth 1 (Filter active)  
        .equ CAN2_FA1R_FACT18, 1 << 18   @ bitWidth 1 (Filter active)  
        .equ CAN2_FA1R_FACT19, 1 << 19   @ bitWidth 1 (Filter active)  
        .equ CAN2_FA1R_FACT20, 1 << 20   @ bitWidth 1 (Filter active)  
        .equ CAN2_FA1R_FACT21, 1 << 21   @ bitWidth 1 (Filter active)  
        .equ CAN2_FA1R_FACT22, 1 << 22   @ bitWidth 1 (Filter active)  
        .equ CAN2_FA1R_FACT23, 1 << 23   @ bitWidth 1 (Filter active)  
        .equ CAN2_FA1R_FACT24, 1 << 24   @ bitWidth 1 (Filter active)  
        .equ CAN2_FA1R_FACT25, 1 << 25   @ bitWidth 1 (Filter active)  
        .equ CAN2_FA1R_FACT26, 1 << 26   @ bitWidth 1 (Filter active)  
        .equ CAN2_FA1R_FACT27, 1 << 27   @ bitWidth 1 (Filter active)  
 
    .equ CAN2_F0R1, CAN2_BASE + 0x240 @ (Filter bank 0 register 1) 
        .equ CAN2_F0R1_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F0R1_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F0R1_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F0R1_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F0R1_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F0R1_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F0R1_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F0R1_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F0R1_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F0R1_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F0R1_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F0R1_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F0R1_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F0R1_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F0R1_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F0R1_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F0R1_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F0R1_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F0R1_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F0R1_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F0R1_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F0R1_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F0R1_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F0R1_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F0R1_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F0R1_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F0R1_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F0R1_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F0R1_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F0R1_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F0R1_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F0R1_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN2_F0R2, CAN2_BASE + 0x244 @ (Filter bank 0 register 2) 
        .equ CAN2_F0R2_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F0R2_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F0R2_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F0R2_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F0R2_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F0R2_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F0R2_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F0R2_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F0R2_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F0R2_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F0R2_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F0R2_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F0R2_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F0R2_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F0R2_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F0R2_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F0R2_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F0R2_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F0R2_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F0R2_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F0R2_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F0R2_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F0R2_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F0R2_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F0R2_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F0R2_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F0R2_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F0R2_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F0R2_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F0R2_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F0R2_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F0R2_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN2_F1R1, CAN2_BASE + 0x248 @ (Filter bank 1 register 1) 
        .equ CAN2_F1R1_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F1R1_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F1R1_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F1R1_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F1R1_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F1R1_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F1R1_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F1R1_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F1R1_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F1R1_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F1R1_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F1R1_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F1R1_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F1R1_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F1R1_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F1R1_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F1R1_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F1R1_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F1R1_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F1R1_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F1R1_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F1R1_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F1R1_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F1R1_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F1R1_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F1R1_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F1R1_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F1R1_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F1R1_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F1R1_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F1R1_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F1R1_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN2_F1R2, CAN2_BASE + 0x24C @ (Filter bank 1 register 2) 
        .equ CAN2_F1R2_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F1R2_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F1R2_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F1R2_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F1R2_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F1R2_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F1R2_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F1R2_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F1R2_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F1R2_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F1R2_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F1R2_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F1R2_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F1R2_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F1R2_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F1R2_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F1R2_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F1R2_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F1R2_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F1R2_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F1R2_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F1R2_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F1R2_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F1R2_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F1R2_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F1R2_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F1R2_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F1R2_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F1R2_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F1R2_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F1R2_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F1R2_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN2_F2R1, CAN2_BASE + 0x250 @ (Filter bank 2 register 1) 
        .equ CAN2_F2R1_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F2R1_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F2R1_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F2R1_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F2R1_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F2R1_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F2R1_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F2R1_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F2R1_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F2R1_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F2R1_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F2R1_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F2R1_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F2R1_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F2R1_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F2R1_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F2R1_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F2R1_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F2R1_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F2R1_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F2R1_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F2R1_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F2R1_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F2R1_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F2R1_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F2R1_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F2R1_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F2R1_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F2R1_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F2R1_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F2R1_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F2R1_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN2_F2R2, CAN2_BASE + 0x254 @ (Filter bank 2 register 2) 
        .equ CAN2_F2R2_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F2R2_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F2R2_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F2R2_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F2R2_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F2R2_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F2R2_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F2R2_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F2R2_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F2R2_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F2R2_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F2R2_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F2R2_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F2R2_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F2R2_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F2R2_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F2R2_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F2R2_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F2R2_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F2R2_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F2R2_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F2R2_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F2R2_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F2R2_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F2R2_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F2R2_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F2R2_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F2R2_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F2R2_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F2R2_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F2R2_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F2R2_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN2_F3R1, CAN2_BASE + 0x258 @ (Filter bank 3 register 1) 
        .equ CAN2_F3R1_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F3R1_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F3R1_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F3R1_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F3R1_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F3R1_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F3R1_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F3R1_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F3R1_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F3R1_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F3R1_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F3R1_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F3R1_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F3R1_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F3R1_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F3R1_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F3R1_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F3R1_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F3R1_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F3R1_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F3R1_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F3R1_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F3R1_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F3R1_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F3R1_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F3R1_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F3R1_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F3R1_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F3R1_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F3R1_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F3R1_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F3R1_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN2_F3R2, CAN2_BASE + 0x25C @ (Filter bank 3 register 2) 
        .equ CAN2_F3R2_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F3R2_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F3R2_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F3R2_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F3R2_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F3R2_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F3R2_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F3R2_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F3R2_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F3R2_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F3R2_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F3R2_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F3R2_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F3R2_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F3R2_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F3R2_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F3R2_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F3R2_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F3R2_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F3R2_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F3R2_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F3R2_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F3R2_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F3R2_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F3R2_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F3R2_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F3R2_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F3R2_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F3R2_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F3R2_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F3R2_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F3R2_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN2_F4R1, CAN2_BASE + 0x260 @ (Filter bank 4 register 1) 
        .equ CAN2_F4R1_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F4R1_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F4R1_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F4R1_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F4R1_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F4R1_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F4R1_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F4R1_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F4R1_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F4R1_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F4R1_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F4R1_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F4R1_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F4R1_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F4R1_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F4R1_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F4R1_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F4R1_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F4R1_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F4R1_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F4R1_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F4R1_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F4R1_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F4R1_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F4R1_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F4R1_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F4R1_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F4R1_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F4R1_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F4R1_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F4R1_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F4R1_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN2_F4R2, CAN2_BASE + 0x264 @ (Filter bank 4 register 2) 
        .equ CAN2_F4R2_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F4R2_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F4R2_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F4R2_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F4R2_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F4R2_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F4R2_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F4R2_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F4R2_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F4R2_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F4R2_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F4R2_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F4R2_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F4R2_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F4R2_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F4R2_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F4R2_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F4R2_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F4R2_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F4R2_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F4R2_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F4R2_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F4R2_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F4R2_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F4R2_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F4R2_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F4R2_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F4R2_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F4R2_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F4R2_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F4R2_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F4R2_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN2_F5R1, CAN2_BASE + 0x268 @ (Filter bank 5 register 1) 
        .equ CAN2_F5R1_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F5R1_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F5R1_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F5R1_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F5R1_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F5R1_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F5R1_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F5R1_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F5R1_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F5R1_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F5R1_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F5R1_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F5R1_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F5R1_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F5R1_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F5R1_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F5R1_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F5R1_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F5R1_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F5R1_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F5R1_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F5R1_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F5R1_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F5R1_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F5R1_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F5R1_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F5R1_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F5R1_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F5R1_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F5R1_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F5R1_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F5R1_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN2_F5R2, CAN2_BASE + 0x26C @ (Filter bank 5 register 2) 
        .equ CAN2_F5R2_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F5R2_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F5R2_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F5R2_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F5R2_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F5R2_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F5R2_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F5R2_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F5R2_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F5R2_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F5R2_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F5R2_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F5R2_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F5R2_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F5R2_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F5R2_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F5R2_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F5R2_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F5R2_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F5R2_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F5R2_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F5R2_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F5R2_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F5R2_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F5R2_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F5R2_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F5R2_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F5R2_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F5R2_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F5R2_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F5R2_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F5R2_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN2_F6R1, CAN2_BASE + 0x270 @ (Filter bank 6 register 1) 
        .equ CAN2_F6R1_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F6R1_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F6R1_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F6R1_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F6R1_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F6R1_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F6R1_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F6R1_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F6R1_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F6R1_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F6R1_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F6R1_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F6R1_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F6R1_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F6R1_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F6R1_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F6R1_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F6R1_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F6R1_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F6R1_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F6R1_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F6R1_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F6R1_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F6R1_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F6R1_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F6R1_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F6R1_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F6R1_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F6R1_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F6R1_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F6R1_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F6R1_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN2_F6R2, CAN2_BASE + 0x274 @ (Filter bank 6 register 2) 
        .equ CAN2_F6R2_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F6R2_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F6R2_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F6R2_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F6R2_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F6R2_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F6R2_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F6R2_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F6R2_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F6R2_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F6R2_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F6R2_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F6R2_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F6R2_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F6R2_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F6R2_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F6R2_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F6R2_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F6R2_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F6R2_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F6R2_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F6R2_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F6R2_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F6R2_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F6R2_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F6R2_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F6R2_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F6R2_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F6R2_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F6R2_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F6R2_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F6R2_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN2_F7R1, CAN2_BASE + 0x278 @ (Filter bank 7 register 1) 
        .equ CAN2_F7R1_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F7R1_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F7R1_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F7R1_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F7R1_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F7R1_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F7R1_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F7R1_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F7R1_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F7R1_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F7R1_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F7R1_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F7R1_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F7R1_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F7R1_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F7R1_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F7R1_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F7R1_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F7R1_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F7R1_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F7R1_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F7R1_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F7R1_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F7R1_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F7R1_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F7R1_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F7R1_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F7R1_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F7R1_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F7R1_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F7R1_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F7R1_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN2_F7R2, CAN2_BASE + 0x27C @ (Filter bank 7 register 2) 
        .equ CAN2_F7R2_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F7R2_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F7R2_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F7R2_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F7R2_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F7R2_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F7R2_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F7R2_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F7R2_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F7R2_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F7R2_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F7R2_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F7R2_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F7R2_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F7R2_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F7R2_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F7R2_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F7R2_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F7R2_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F7R2_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F7R2_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F7R2_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F7R2_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F7R2_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F7R2_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F7R2_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F7R2_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F7R2_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F7R2_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F7R2_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F7R2_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F7R2_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN2_F8R1, CAN2_BASE + 0x280 @ (Filter bank 8 register 1) 
        .equ CAN2_F8R1_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F8R1_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F8R1_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F8R1_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F8R1_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F8R1_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F8R1_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F8R1_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F8R1_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F8R1_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F8R1_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F8R1_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F8R1_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F8R1_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F8R1_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F8R1_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F8R1_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F8R1_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F8R1_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F8R1_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F8R1_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F8R1_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F8R1_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F8R1_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F8R1_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F8R1_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F8R1_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F8R1_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F8R1_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F8R1_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F8R1_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F8R1_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN2_F8R2, CAN2_BASE + 0x284 @ (Filter bank 8 register 2) 
        .equ CAN2_F8R2_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F8R2_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F8R2_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F8R2_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F8R2_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F8R2_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F8R2_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F8R2_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F8R2_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F8R2_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F8R2_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F8R2_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F8R2_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F8R2_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F8R2_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F8R2_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F8R2_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F8R2_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F8R2_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F8R2_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F8R2_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F8R2_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F8R2_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F8R2_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F8R2_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F8R2_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F8R2_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F8R2_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F8R2_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F8R2_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F8R2_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F8R2_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN2_F9R1, CAN2_BASE + 0x288 @ (Filter bank 9 register 1) 
        .equ CAN2_F9R1_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F9R1_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F9R1_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F9R1_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F9R1_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F9R1_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F9R1_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F9R1_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F9R1_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F9R1_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F9R1_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F9R1_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F9R1_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F9R1_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F9R1_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F9R1_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F9R1_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F9R1_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F9R1_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F9R1_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F9R1_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F9R1_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F9R1_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F9R1_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F9R1_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F9R1_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F9R1_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F9R1_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F9R1_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F9R1_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F9R1_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F9R1_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN2_F9R2, CAN2_BASE + 0x28C @ (Filter bank 9 register 2) 
        .equ CAN2_F9R2_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F9R2_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F9R2_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F9R2_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F9R2_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F9R2_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F9R2_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F9R2_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F9R2_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F9R2_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F9R2_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F9R2_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F9R2_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F9R2_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F9R2_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F9R2_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F9R2_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F9R2_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F9R2_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F9R2_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F9R2_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F9R2_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F9R2_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F9R2_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F9R2_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F9R2_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F9R2_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F9R2_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F9R2_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F9R2_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F9R2_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F9R2_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN2_F10R1, CAN2_BASE + 0x290 @ (Filter bank 10 register 1) 
        .equ CAN2_F10R1_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F10R1_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F10R1_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F10R1_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F10R1_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F10R1_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F10R1_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F10R1_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F10R1_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F10R1_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F10R1_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F10R1_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F10R1_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F10R1_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F10R1_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F10R1_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F10R1_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F10R1_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F10R1_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F10R1_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F10R1_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F10R1_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F10R1_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F10R1_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F10R1_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F10R1_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F10R1_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F10R1_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F10R1_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F10R1_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F10R1_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F10R1_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN2_F10R2, CAN2_BASE + 0x294 @ (Filter bank 10 register 2) 
        .equ CAN2_F10R2_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F10R2_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F10R2_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F10R2_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F10R2_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F10R2_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F10R2_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F10R2_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F10R2_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F10R2_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F10R2_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F10R2_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F10R2_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F10R2_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F10R2_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F10R2_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F10R2_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F10R2_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F10R2_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F10R2_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F10R2_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F10R2_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F10R2_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F10R2_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F10R2_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F10R2_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F10R2_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F10R2_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F10R2_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F10R2_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F10R2_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F10R2_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN2_F11R1, CAN2_BASE + 0x298 @ (Filter bank 11 register 1) 
        .equ CAN2_F11R1_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F11R1_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F11R1_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F11R1_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F11R1_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F11R1_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F11R1_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F11R1_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F11R1_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F11R1_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F11R1_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F11R1_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F11R1_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F11R1_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F11R1_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F11R1_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F11R1_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F11R1_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F11R1_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F11R1_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F11R1_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F11R1_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F11R1_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F11R1_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F11R1_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F11R1_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F11R1_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F11R1_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F11R1_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F11R1_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F11R1_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F11R1_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN2_F11R2, CAN2_BASE + 0x29C @ (Filter bank 11 register 2) 
        .equ CAN2_F11R2_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F11R2_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F11R2_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F11R2_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F11R2_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F11R2_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F11R2_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F11R2_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F11R2_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F11R2_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F11R2_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F11R2_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F11R2_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F11R2_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F11R2_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F11R2_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F11R2_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F11R2_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F11R2_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F11R2_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F11R2_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F11R2_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F11R2_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F11R2_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F11R2_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F11R2_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F11R2_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F11R2_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F11R2_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F11R2_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F11R2_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F11R2_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN2_F12R1, CAN2_BASE + 0x2A0 @ (Filter bank 4 register 1) 
        .equ CAN2_F12R1_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F12R1_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F12R1_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F12R1_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F12R1_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F12R1_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F12R1_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F12R1_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F12R1_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F12R1_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F12R1_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F12R1_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F12R1_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F12R1_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F12R1_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F12R1_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F12R1_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F12R1_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F12R1_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F12R1_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F12R1_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F12R1_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F12R1_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F12R1_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F12R1_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F12R1_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F12R1_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F12R1_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F12R1_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F12R1_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F12R1_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F12R1_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN2_F12R2, CAN2_BASE + 0x2A4 @ (Filter bank 12 register 2) 
        .equ CAN2_F12R2_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F12R2_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F12R2_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F12R2_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F12R2_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F12R2_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F12R2_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F12R2_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F12R2_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F12R2_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F12R2_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F12R2_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F12R2_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F12R2_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F12R2_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F12R2_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F12R2_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F12R2_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F12R2_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F12R2_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F12R2_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F12R2_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F12R2_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F12R2_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F12R2_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F12R2_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F12R2_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F12R2_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F12R2_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F12R2_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F12R2_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F12R2_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN2_F13R1, CAN2_BASE + 0x2A8 @ (Filter bank 13 register 1) 
        .equ CAN2_F13R1_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F13R1_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F13R1_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F13R1_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F13R1_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F13R1_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F13R1_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F13R1_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F13R1_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F13R1_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F13R1_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F13R1_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F13R1_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F13R1_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F13R1_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F13R1_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F13R1_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F13R1_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F13R1_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F13R1_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F13R1_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F13R1_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F13R1_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F13R1_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F13R1_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F13R1_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F13R1_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F13R1_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F13R1_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F13R1_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F13R1_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F13R1_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN2_F13R2, CAN2_BASE + 0x2AC @ (Filter bank 13 register 2) 
        .equ CAN2_F13R2_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F13R2_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F13R2_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F13R2_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F13R2_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F13R2_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F13R2_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F13R2_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F13R2_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F13R2_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F13R2_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F13R2_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F13R2_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F13R2_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F13R2_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F13R2_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F13R2_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F13R2_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F13R2_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F13R2_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F13R2_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F13R2_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F13R2_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F13R2_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F13R2_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F13R2_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F13R2_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F13R2_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F13R2_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F13R2_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F13R2_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F13R2_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN2_F14R1, CAN2_BASE + 0x2B0 @ (Filter bank 14 register 1) 
        .equ CAN2_F14R1_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F14R1_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F14R1_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F14R1_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F14R1_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F14R1_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F14R1_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F14R1_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F14R1_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F14R1_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F14R1_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F14R1_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F14R1_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F14R1_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F14R1_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F14R1_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F14R1_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F14R1_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F14R1_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F14R1_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F14R1_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F14R1_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F14R1_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F14R1_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F14R1_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F14R1_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F14R1_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F14R1_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F14R1_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F14R1_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F14R1_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F14R1_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN2_F14R2, CAN2_BASE + 0x2B4 @ (Filter bank 14 register 2) 
        .equ CAN2_F14R2_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F14R2_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F14R2_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F14R2_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F14R2_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F14R2_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F14R2_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F14R2_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F14R2_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F14R2_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F14R2_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F14R2_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F14R2_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F14R2_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F14R2_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F14R2_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F14R2_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F14R2_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F14R2_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F14R2_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F14R2_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F14R2_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F14R2_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F14R2_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F14R2_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F14R2_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F14R2_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F14R2_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F14R2_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F14R2_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F14R2_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F14R2_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN2_F15R1, CAN2_BASE + 0x2B8 @ (Filter bank 15 register 1) 
        .equ CAN2_F15R1_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F15R1_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F15R1_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F15R1_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F15R1_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F15R1_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F15R1_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F15R1_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F15R1_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F15R1_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F15R1_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F15R1_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F15R1_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F15R1_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F15R1_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F15R1_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F15R1_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F15R1_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F15R1_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F15R1_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F15R1_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F15R1_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F15R1_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F15R1_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F15R1_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F15R1_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F15R1_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F15R1_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F15R1_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F15R1_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F15R1_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F15R1_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN2_F15R2, CAN2_BASE + 0x2BC @ (Filter bank 15 register 2) 
        .equ CAN2_F15R2_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F15R2_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F15R2_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F15R2_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F15R2_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F15R2_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F15R2_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F15R2_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F15R2_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F15R2_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F15R2_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F15R2_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F15R2_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F15R2_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F15R2_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F15R2_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F15R2_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F15R2_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F15R2_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F15R2_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F15R2_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F15R2_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F15R2_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F15R2_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F15R2_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F15R2_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F15R2_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F15R2_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F15R2_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F15R2_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F15R2_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F15R2_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN2_F16R1, CAN2_BASE + 0x2C0 @ (Filter bank 16 register 1) 
        .equ CAN2_F16R1_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F16R1_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F16R1_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F16R1_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F16R1_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F16R1_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F16R1_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F16R1_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F16R1_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F16R1_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F16R1_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F16R1_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F16R1_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F16R1_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F16R1_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F16R1_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F16R1_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F16R1_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F16R1_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F16R1_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F16R1_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F16R1_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F16R1_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F16R1_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F16R1_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F16R1_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F16R1_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F16R1_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F16R1_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F16R1_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F16R1_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F16R1_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN2_F16R2, CAN2_BASE + 0x2C4 @ (Filter bank 16 register 2) 
        .equ CAN2_F16R2_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F16R2_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F16R2_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F16R2_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F16R2_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F16R2_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F16R2_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F16R2_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F16R2_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F16R2_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F16R2_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F16R2_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F16R2_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F16R2_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F16R2_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F16R2_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F16R2_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F16R2_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F16R2_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F16R2_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F16R2_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F16R2_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F16R2_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F16R2_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F16R2_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F16R2_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F16R2_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F16R2_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F16R2_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F16R2_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F16R2_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F16R2_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN2_F17R1, CAN2_BASE + 0x2C8 @ (Filter bank 17 register 1) 
        .equ CAN2_F17R1_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F17R1_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F17R1_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F17R1_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F17R1_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F17R1_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F17R1_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F17R1_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F17R1_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F17R1_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F17R1_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F17R1_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F17R1_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F17R1_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F17R1_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F17R1_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F17R1_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F17R1_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F17R1_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F17R1_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F17R1_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F17R1_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F17R1_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F17R1_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F17R1_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F17R1_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F17R1_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F17R1_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F17R1_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F17R1_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F17R1_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F17R1_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN2_F17R2, CAN2_BASE + 0x2CC @ (Filter bank 17 register 2) 
        .equ CAN2_F17R2_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F17R2_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F17R2_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F17R2_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F17R2_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F17R2_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F17R2_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F17R2_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F17R2_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F17R2_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F17R2_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F17R2_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F17R2_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F17R2_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F17R2_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F17R2_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F17R2_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F17R2_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F17R2_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F17R2_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F17R2_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F17R2_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F17R2_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F17R2_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F17R2_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F17R2_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F17R2_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F17R2_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F17R2_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F17R2_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F17R2_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F17R2_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN2_F18R1, CAN2_BASE + 0x2D0 @ (Filter bank 18 register 1) 
        .equ CAN2_F18R1_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F18R1_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F18R1_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F18R1_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F18R1_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F18R1_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F18R1_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F18R1_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F18R1_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F18R1_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F18R1_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F18R1_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F18R1_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F18R1_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F18R1_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F18R1_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F18R1_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F18R1_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F18R1_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F18R1_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F18R1_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F18R1_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F18R1_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F18R1_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F18R1_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F18R1_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F18R1_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F18R1_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F18R1_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F18R1_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F18R1_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F18R1_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN2_F18R2, CAN2_BASE + 0x2D4 @ (Filter bank 18 register 2) 
        .equ CAN2_F18R2_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F18R2_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F18R2_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F18R2_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F18R2_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F18R2_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F18R2_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F18R2_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F18R2_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F18R2_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F18R2_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F18R2_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F18R2_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F18R2_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F18R2_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F18R2_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F18R2_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F18R2_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F18R2_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F18R2_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F18R2_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F18R2_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F18R2_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F18R2_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F18R2_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F18R2_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F18R2_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F18R2_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F18R2_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F18R2_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F18R2_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F18R2_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN2_F19R1, CAN2_BASE + 0x2D8 @ (Filter bank 19 register 1) 
        .equ CAN2_F19R1_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F19R1_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F19R1_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F19R1_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F19R1_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F19R1_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F19R1_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F19R1_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F19R1_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F19R1_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F19R1_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F19R1_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F19R1_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F19R1_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F19R1_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F19R1_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F19R1_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F19R1_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F19R1_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F19R1_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F19R1_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F19R1_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F19R1_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F19R1_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F19R1_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F19R1_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F19R1_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F19R1_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F19R1_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F19R1_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F19R1_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F19R1_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN2_F19R2, CAN2_BASE + 0x2DC @ (Filter bank 19 register 2) 
        .equ CAN2_F19R2_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F19R2_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F19R2_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F19R2_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F19R2_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F19R2_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F19R2_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F19R2_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F19R2_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F19R2_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F19R2_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F19R2_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F19R2_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F19R2_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F19R2_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F19R2_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F19R2_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F19R2_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F19R2_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F19R2_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F19R2_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F19R2_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F19R2_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F19R2_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F19R2_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F19R2_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F19R2_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F19R2_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F19R2_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F19R2_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F19R2_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F19R2_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN2_F20R1, CAN2_BASE + 0x2E0 @ (Filter bank 20 register 1) 
        .equ CAN2_F20R1_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F20R1_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F20R1_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F20R1_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F20R1_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F20R1_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F20R1_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F20R1_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F20R1_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F20R1_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F20R1_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F20R1_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F20R1_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F20R1_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F20R1_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F20R1_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F20R1_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F20R1_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F20R1_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F20R1_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F20R1_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F20R1_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F20R1_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F20R1_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F20R1_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F20R1_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F20R1_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F20R1_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F20R1_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F20R1_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F20R1_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F20R1_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN2_F20R2, CAN2_BASE + 0x2E4 @ (Filter bank 20 register 2) 
        .equ CAN2_F20R2_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F20R2_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F20R2_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F20R2_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F20R2_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F20R2_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F20R2_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F20R2_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F20R2_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F20R2_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F20R2_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F20R2_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F20R2_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F20R2_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F20R2_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F20R2_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F20R2_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F20R2_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F20R2_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F20R2_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F20R2_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F20R2_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F20R2_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F20R2_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F20R2_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F20R2_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F20R2_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F20R2_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F20R2_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F20R2_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F20R2_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F20R2_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN2_F21R1, CAN2_BASE + 0x2E8 @ (Filter bank 21 register 1) 
        .equ CAN2_F21R1_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F21R1_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F21R1_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F21R1_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F21R1_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F21R1_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F21R1_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F21R1_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F21R1_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F21R1_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F21R1_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F21R1_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F21R1_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F21R1_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F21R1_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F21R1_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F21R1_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F21R1_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F21R1_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F21R1_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F21R1_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F21R1_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F21R1_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F21R1_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F21R1_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F21R1_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F21R1_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F21R1_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F21R1_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F21R1_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F21R1_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F21R1_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN2_F21R2, CAN2_BASE + 0x2EC @ (Filter bank 21 register 2) 
        .equ CAN2_F21R2_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F21R2_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F21R2_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F21R2_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F21R2_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F21R2_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F21R2_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F21R2_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F21R2_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F21R2_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F21R2_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F21R2_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F21R2_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F21R2_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F21R2_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F21R2_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F21R2_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F21R2_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F21R2_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F21R2_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F21R2_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F21R2_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F21R2_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F21R2_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F21R2_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F21R2_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F21R2_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F21R2_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F21R2_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F21R2_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F21R2_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F21R2_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN2_F22R1, CAN2_BASE + 0x2F0 @ (Filter bank 22 register 1) 
        .equ CAN2_F22R1_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F22R1_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F22R1_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F22R1_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F22R1_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F22R1_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F22R1_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F22R1_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F22R1_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F22R1_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F22R1_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F22R1_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F22R1_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F22R1_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F22R1_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F22R1_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F22R1_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F22R1_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F22R1_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F22R1_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F22R1_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F22R1_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F22R1_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F22R1_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F22R1_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F22R1_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F22R1_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F22R1_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F22R1_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F22R1_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F22R1_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F22R1_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN2_F22R2, CAN2_BASE + 0x2F4 @ (Filter bank 22 register 2) 
        .equ CAN2_F22R2_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F22R2_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F22R2_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F22R2_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F22R2_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F22R2_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F22R2_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F22R2_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F22R2_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F22R2_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F22R2_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F22R2_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F22R2_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F22R2_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F22R2_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F22R2_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F22R2_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F22R2_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F22R2_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F22R2_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F22R2_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F22R2_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F22R2_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F22R2_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F22R2_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F22R2_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F22R2_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F22R2_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F22R2_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F22R2_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F22R2_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F22R2_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN2_F23R1, CAN2_BASE + 0x2F8 @ (Filter bank 23 register 1) 
        .equ CAN2_F23R1_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F23R1_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F23R1_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F23R1_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F23R1_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F23R1_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F23R1_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F23R1_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F23R1_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F23R1_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F23R1_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F23R1_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F23R1_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F23R1_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F23R1_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F23R1_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F23R1_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F23R1_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F23R1_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F23R1_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F23R1_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F23R1_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F23R1_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F23R1_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F23R1_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F23R1_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F23R1_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F23R1_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F23R1_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F23R1_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F23R1_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F23R1_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN2_F23R2, CAN2_BASE + 0x2FC @ (Filter bank 23 register 2) 
        .equ CAN2_F23R2_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F23R2_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F23R2_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F23R2_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F23R2_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F23R2_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F23R2_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F23R2_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F23R2_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F23R2_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F23R2_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F23R2_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F23R2_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F23R2_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F23R2_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F23R2_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F23R2_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F23R2_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F23R2_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F23R2_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F23R2_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F23R2_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F23R2_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F23R2_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F23R2_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F23R2_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F23R2_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F23R2_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F23R2_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F23R2_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F23R2_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F23R2_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN2_F24R1, CAN2_BASE + 0x300 @ (Filter bank 24 register 1) 
        .equ CAN2_F24R1_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F24R1_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F24R1_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F24R1_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F24R1_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F24R1_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F24R1_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F24R1_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F24R1_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F24R1_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F24R1_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F24R1_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F24R1_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F24R1_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F24R1_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F24R1_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F24R1_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F24R1_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F24R1_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F24R1_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F24R1_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F24R1_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F24R1_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F24R1_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F24R1_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F24R1_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F24R1_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F24R1_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F24R1_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F24R1_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F24R1_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F24R1_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN2_F24R2, CAN2_BASE + 0x304 @ (Filter bank 24 register 2) 
        .equ CAN2_F24R2_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F24R2_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F24R2_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F24R2_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F24R2_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F24R2_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F24R2_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F24R2_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F24R2_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F24R2_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F24R2_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F24R2_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F24R2_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F24R2_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F24R2_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F24R2_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F24R2_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F24R2_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F24R2_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F24R2_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F24R2_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F24R2_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F24R2_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F24R2_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F24R2_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F24R2_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F24R2_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F24R2_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F24R2_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F24R2_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F24R2_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F24R2_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN2_F25R1, CAN2_BASE + 0x308 @ (Filter bank 25 register 1) 
        .equ CAN2_F25R1_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F25R1_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F25R1_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F25R1_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F25R1_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F25R1_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F25R1_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F25R1_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F25R1_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F25R1_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F25R1_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F25R1_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F25R1_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F25R1_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F25R1_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F25R1_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F25R1_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F25R1_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F25R1_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F25R1_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F25R1_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F25R1_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F25R1_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F25R1_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F25R1_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F25R1_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F25R1_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F25R1_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F25R1_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F25R1_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F25R1_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F25R1_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN2_F25R2, CAN2_BASE + 0x30C @ (Filter bank 25 register 2) 
        .equ CAN2_F25R2_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F25R2_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F25R2_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F25R2_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F25R2_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F25R2_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F25R2_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F25R2_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F25R2_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F25R2_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F25R2_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F25R2_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F25R2_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F25R2_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F25R2_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F25R2_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F25R2_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F25R2_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F25R2_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F25R2_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F25R2_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F25R2_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F25R2_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F25R2_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F25R2_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F25R2_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F25R2_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F25R2_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F25R2_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F25R2_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F25R2_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F25R2_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN2_F26R1, CAN2_BASE + 0x310 @ (Filter bank 26 register 1) 
        .equ CAN2_F26R1_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F26R1_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F26R1_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F26R1_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F26R1_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F26R1_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F26R1_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F26R1_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F26R1_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F26R1_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F26R1_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F26R1_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F26R1_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F26R1_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F26R1_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F26R1_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F26R1_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F26R1_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F26R1_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F26R1_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F26R1_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F26R1_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F26R1_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F26R1_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F26R1_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F26R1_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F26R1_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F26R1_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F26R1_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F26R1_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F26R1_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F26R1_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN2_F26R2, CAN2_BASE + 0x314 @ (Filter bank 26 register 2) 
        .equ CAN2_F26R2_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F26R2_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F26R2_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F26R2_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F26R2_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F26R2_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F26R2_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F26R2_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F26R2_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F26R2_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F26R2_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F26R2_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F26R2_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F26R2_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F26R2_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F26R2_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F26R2_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F26R2_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F26R2_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F26R2_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F26R2_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F26R2_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F26R2_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F26R2_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F26R2_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F26R2_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F26R2_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F26R2_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F26R2_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F26R2_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F26R2_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F26R2_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN2_F27R1, CAN2_BASE + 0x318 @ (Filter bank 27 register 1) 
        .equ CAN2_F27R1_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F27R1_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F27R1_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F27R1_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F27R1_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F27R1_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F27R1_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F27R1_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F27R1_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F27R1_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F27R1_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F27R1_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F27R1_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F27R1_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F27R1_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F27R1_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F27R1_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F27R1_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F27R1_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F27R1_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F27R1_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F27R1_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F27R1_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F27R1_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F27R1_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F27R1_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F27R1_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F27R1_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F27R1_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F27R1_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F27R1_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F27R1_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 
    .equ CAN2_F27R2, CAN2_BASE + 0x31C @ (Filter bank 27 register 2) 
        .equ CAN2_F27R2_FB0, 1 << 0   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F27R2_FB1, 1 << 1   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F27R2_FB2, 1 << 2   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F27R2_FB3, 1 << 3   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F27R2_FB4, 1 << 4   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F27R2_FB5, 1 << 5   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F27R2_FB6, 1 << 6   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F27R2_FB7, 1 << 7   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F27R2_FB8, 1 << 8   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F27R2_FB9, 1 << 9   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F27R2_FB10, 1 << 10   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F27R2_FB11, 1 << 11   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F27R2_FB12, 1 << 12   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F27R2_FB13, 1 << 13   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F27R2_FB14, 1 << 14   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F27R2_FB15, 1 << 15   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F27R2_FB16, 1 << 16   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F27R2_FB17, 1 << 17   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F27R2_FB18, 1 << 18   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F27R2_FB19, 1 << 19   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F27R2_FB20, 1 << 20   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F27R2_FB21, 1 << 21   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F27R2_FB22, 1 << 22   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F27R2_FB23, 1 << 23   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F27R2_FB24, 1 << 24   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F27R2_FB25, 1 << 25   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F27R2_FB26, 1 << 26   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F27R2_FB27, 1 << 27   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F27R2_FB28, 1 << 28   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F27R2_FB29, 1 << 29   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F27R2_FB30, 1 << 30   @ bitWidth 1 (Filter bits)  
        .equ CAN2_F27R2_FB31, 1 << 31   @ bitWidth 1 (Filter bits)  
 

@=========================== FLASH ===========================@
.equ FLASH_BASE, 0x40023C00 @ (FLASH) 
    .equ FLASH_ACR, FLASH_BASE + 0x0 @ (Flash access control register) 
        .equ FLASH_ACR_LATENCY_Shift, 0   @ bitWidth 3 (Latency)  
        .equ FLASH_ACR_PRFTEN, 1 << 8   @ bitWidth 1 (Prefetch enable)  
        .equ FLASH_ACR_ICEN, 1 << 9   @ bitWidth 1 (Instruction cache enable)  
        .equ FLASH_ACR_DCEN, 1 << 10   @ bitWidth 1 (Data cache enable)  
        .equ FLASH_ACR_ICRST, 1 << 11   @ bitWidth 1 (Instruction cache reset)  
        .equ FLASH_ACR_DCRST, 1 << 12   @ bitWidth 1 (Data cache reset)  
 
    .equ FLASH_KEYR, FLASH_BASE + 0x4 @ (Flash key register) 
        .equ FLASH_KEYR_KEY_Shift, 0   @ bitWidth 32 (FPEC key)  
 
    .equ FLASH_OPTKEYR, FLASH_BASE + 0x8 @ (Flash option key register) 
        .equ FLASH_OPTKEYR_OPTKEY_Shift, 0   @ bitWidth 32 (Option byte key)  
 
    .equ FLASH_SR, FLASH_BASE + 0xC @ (Status register) 
        .equ FLASH_SR_EOP, 1 << 0   @ bitWidth 1 (End of operation)  
        .equ FLASH_SR_OPERR, 1 << 1   @ bitWidth 1 (Operation error)  
        .equ FLASH_SR_WRPERR, 1 << 4   @ bitWidth 1 (Write protection error)  
        .equ FLASH_SR_PGAERR, 1 << 5   @ bitWidth 1 (Programming alignment  error)  
        .equ FLASH_SR_PGPERR, 1 << 6   @ bitWidth 1 (Programming parallelism  error)  
        .equ FLASH_SR_PGSERR, 1 << 7   @ bitWidth 1 (Programming sequence error)  
        .equ FLASH_SR_BSY, 1 << 16   @ bitWidth 1 (Busy)  
 
    .equ FLASH_CR, FLASH_BASE + 0x10 @ (Control register) 
        .equ FLASH_CR_PG, 1 << 0   @ bitWidth 1 (Programming)  
        .equ FLASH_CR_SER, 1 << 1   @ bitWidth 1 (Sector Erase)  
        .equ FLASH_CR_MER, 1 << 2   @ bitWidth 1 (Mass Erase)  
        .equ FLASH_CR_SNB_Shift, 3   @ bitWidth 4 (Sector number)  
        .equ FLASH_CR_PSIZE_Shift, 8   @ bitWidth 2 (Program size)  
        .equ FLASH_CR_STRT, 1 << 16   @ bitWidth 1 (Start)  
        .equ FLASH_CR_EOPIE, 1 << 24   @ bitWidth 1 (End of operation interrupt  enable)  
        .equ FLASH_CR_ERRIE, 1 << 25   @ bitWidth 1 (Error interrupt enable)  
        .equ FLASH_CR_LOCK, 1 << 31   @ bitWidth 1 (Lock)  
 
    .equ FLASH_OPTCR, FLASH_BASE + 0x14 @ (Flash option control register) 
        .equ FLASH_OPTCR_OPTLOCK, 1 << 0   @ bitWidth 1 (Option lock)  
        .equ FLASH_OPTCR_OPTSTRT, 1 << 1   @ bitWidth 1 (Option start)  
        .equ FLASH_OPTCR_BOR_LEV_Shift, 2   @ bitWidth 2 (BOR reset Level)  
        .equ FLASH_OPTCR_WDG_SW, 1 << 5   @ bitWidth 1 (WDG_SW User option bytes)  
        .equ FLASH_OPTCR_nRST_STOP, 1 << 6   @ bitWidth 1 (nRST_STOP User option  bytes)  
        .equ FLASH_OPTCR_nRST_STDBY, 1 << 7   @ bitWidth 1 (nRST_STDBY User option  bytes)  
        .equ FLASH_OPTCR_RDP_Shift, 8   @ bitWidth 8 (Read protect)  
        .equ FLASH_OPTCR_nWRP_Shift, 16   @ bitWidth 12 (Not write protect)  
 

@=========================== EXTI ===========================@
.equ EXTI_BASE, 0x40013C00 @ (External interrupt/event  controller) 
    .equ EXTI_IMR, EXTI_BASE + 0x0 @ (Interrupt mask register  EXTI_IMR) 
        .equ EXTI_IMR_MR0, 1 << 0   @ bitWidth 1 (Interrupt Mask on line 0)  
        .equ EXTI_IMR_MR1, 1 << 1   @ bitWidth 1 (Interrupt Mask on line 1)  
        .equ EXTI_IMR_MR2, 1 << 2   @ bitWidth 1 (Interrupt Mask on line 2)  
        .equ EXTI_IMR_MR3, 1 << 3   @ bitWidth 1 (Interrupt Mask on line 3)  
        .equ EXTI_IMR_MR4, 1 << 4   @ bitWidth 1 (Interrupt Mask on line 4)  
        .equ EXTI_IMR_MR5, 1 << 5   @ bitWidth 1 (Interrupt Mask on line 5)  
        .equ EXTI_IMR_MR6, 1 << 6   @ bitWidth 1 (Interrupt Mask on line 6)  
        .equ EXTI_IMR_MR7, 1 << 7   @ bitWidth 1 (Interrupt Mask on line 7)  
        .equ EXTI_IMR_MR8, 1 << 8   @ bitWidth 1 (Interrupt Mask on line 8)  
        .equ EXTI_IMR_MR9, 1 << 9   @ bitWidth 1 (Interrupt Mask on line 9)  
        .equ EXTI_IMR_MR10, 1 << 10   @ bitWidth 1 (Interrupt Mask on line 10)  
        .equ EXTI_IMR_MR11, 1 << 11   @ bitWidth 1 (Interrupt Mask on line 11)  
        .equ EXTI_IMR_MR12, 1 << 12   @ bitWidth 1 (Interrupt Mask on line 12)  
        .equ EXTI_IMR_MR13, 1 << 13   @ bitWidth 1 (Interrupt Mask on line 13)  
        .equ EXTI_IMR_MR14, 1 << 14   @ bitWidth 1 (Interrupt Mask on line 14)  
        .equ EXTI_IMR_MR15, 1 << 15   @ bitWidth 1 (Interrupt Mask on line 15)  
        .equ EXTI_IMR_MR16, 1 << 16   @ bitWidth 1 (Interrupt Mask on line 16)  
        .equ EXTI_IMR_MR17, 1 << 17   @ bitWidth 1 (Interrupt Mask on line 17)  
        .equ EXTI_IMR_MR18, 1 << 18   @ bitWidth 1 (Interrupt Mask on line 18)  
        .equ EXTI_IMR_MR19, 1 << 19   @ bitWidth 1 (Interrupt Mask on line 19)  
        .equ EXTI_IMR_MR20, 1 << 20   @ bitWidth 1 (Interrupt Mask on line 20)  
        .equ EXTI_IMR_MR21, 1 << 21   @ bitWidth 1 (Interrupt Mask on line 21)  
        .equ EXTI_IMR_MR22, 1 << 22   @ bitWidth 1 (Interrupt Mask on line 22)  
 
    .equ EXTI_EMR, EXTI_BASE + 0x4 @ (Event mask register EXTI_EMR) 
        .equ EXTI_EMR_MR0, 1 << 0   @ bitWidth 1 (Event Mask on line 0)  
        .equ EXTI_EMR_MR1, 1 << 1   @ bitWidth 1 (Event Mask on line 1)  
        .equ EXTI_EMR_MR2, 1 << 2   @ bitWidth 1 (Event Mask on line 2)  
        .equ EXTI_EMR_MR3, 1 << 3   @ bitWidth 1 (Event Mask on line 3)  
        .equ EXTI_EMR_MR4, 1 << 4   @ bitWidth 1 (Event Mask on line 4)  
        .equ EXTI_EMR_MR5, 1 << 5   @ bitWidth 1 (Event Mask on line 5)  
        .equ EXTI_EMR_MR6, 1 << 6   @ bitWidth 1 (Event Mask on line 6)  
        .equ EXTI_EMR_MR7, 1 << 7   @ bitWidth 1 (Event Mask on line 7)  
        .equ EXTI_EMR_MR8, 1 << 8   @ bitWidth 1 (Event Mask on line 8)  
        .equ EXTI_EMR_MR9, 1 << 9   @ bitWidth 1 (Event Mask on line 9)  
        .equ EXTI_EMR_MR10, 1 << 10   @ bitWidth 1 (Event Mask on line 10)  
        .equ EXTI_EMR_MR11, 1 << 11   @ bitWidth 1 (Event Mask on line 11)  
        .equ EXTI_EMR_MR12, 1 << 12   @ bitWidth 1 (Event Mask on line 12)  
        .equ EXTI_EMR_MR13, 1 << 13   @ bitWidth 1 (Event Mask on line 13)  
        .equ EXTI_EMR_MR14, 1 << 14   @ bitWidth 1 (Event Mask on line 14)  
        .equ EXTI_EMR_MR15, 1 << 15   @ bitWidth 1 (Event Mask on line 15)  
        .equ EXTI_EMR_MR16, 1 << 16   @ bitWidth 1 (Event Mask on line 16)  
        .equ EXTI_EMR_MR17, 1 << 17   @ bitWidth 1 (Event Mask on line 17)  
        .equ EXTI_EMR_MR18, 1 << 18   @ bitWidth 1 (Event Mask on line 18)  
        .equ EXTI_EMR_MR19, 1 << 19   @ bitWidth 1 (Event Mask on line 19)  
        .equ EXTI_EMR_MR20, 1 << 20   @ bitWidth 1 (Event Mask on line 20)  
        .equ EXTI_EMR_MR21, 1 << 21   @ bitWidth 1 (Event Mask on line 21)  
        .equ EXTI_EMR_MR22, 1 << 22   @ bitWidth 1 (Event Mask on line 22)  
 
    .equ EXTI_RTSR, EXTI_BASE + 0x8 @ (Rising Trigger selection register  EXTI_RTSR) 
        .equ EXTI_RTSR_TR0, 1 << 0   @ bitWidth 1 (Rising trigger event configuration of  line 0)  
        .equ EXTI_RTSR_TR1, 1 << 1   @ bitWidth 1 (Rising trigger event configuration of  line 1)  
        .equ EXTI_RTSR_TR2, 1 << 2   @ bitWidth 1 (Rising trigger event configuration of  line 2)  
        .equ EXTI_RTSR_TR3, 1 << 3   @ bitWidth 1 (Rising trigger event configuration of  line 3)  
        .equ EXTI_RTSR_TR4, 1 << 4   @ bitWidth 1 (Rising trigger event configuration of  line 4)  
        .equ EXTI_RTSR_TR5, 1 << 5   @ bitWidth 1 (Rising trigger event configuration of  line 5)  
        .equ EXTI_RTSR_TR6, 1 << 6   @ bitWidth 1 (Rising trigger event configuration of  line 6)  
        .equ EXTI_RTSR_TR7, 1 << 7   @ bitWidth 1 (Rising trigger event configuration of  line 7)  
        .equ EXTI_RTSR_TR8, 1 << 8   @ bitWidth 1 (Rising trigger event configuration of  line 8)  
        .equ EXTI_RTSR_TR9, 1 << 9   @ bitWidth 1 (Rising trigger event configuration of  line 9)  
        .equ EXTI_RTSR_TR10, 1 << 10   @ bitWidth 1 (Rising trigger event configuration of  line 10)  
        .equ EXTI_RTSR_TR11, 1 << 11   @ bitWidth 1 (Rising trigger event configuration of  line 11)  
        .equ EXTI_RTSR_TR12, 1 << 12   @ bitWidth 1 (Rising trigger event configuration of  line 12)  
        .equ EXTI_RTSR_TR13, 1 << 13   @ bitWidth 1 (Rising trigger event configuration of  line 13)  
        .equ EXTI_RTSR_TR14, 1 << 14   @ bitWidth 1 (Rising trigger event configuration of  line 14)  
        .equ EXTI_RTSR_TR15, 1 << 15   @ bitWidth 1 (Rising trigger event configuration of  line 15)  
        .equ EXTI_RTSR_TR16, 1 << 16   @ bitWidth 1 (Rising trigger event configuration of  line 16)  
        .equ EXTI_RTSR_TR17, 1 << 17   @ bitWidth 1 (Rising trigger event configuration of  line 17)  
        .equ EXTI_RTSR_TR18, 1 << 18   @ bitWidth 1 (Rising trigger event configuration of  line 18)  
        .equ EXTI_RTSR_TR19, 1 << 19   @ bitWidth 1 (Rising trigger event configuration of  line 19)  
        .equ EXTI_RTSR_TR20, 1 << 20   @ bitWidth 1 (Rising trigger event configuration of  line 20)  
        .equ EXTI_RTSR_TR21, 1 << 21   @ bitWidth 1 (Rising trigger event configuration of  line 21)  
        .equ EXTI_RTSR_TR22, 1 << 22   @ bitWidth 1 (Rising trigger event configuration of  line 22)  
 
    .equ EXTI_FTSR, EXTI_BASE + 0xC @ (Falling Trigger selection register  EXTI_FTSR) 
        .equ EXTI_FTSR_TR0, 1 << 0   @ bitWidth 1 (Falling trigger event configuration of  line 0)  
        .equ EXTI_FTSR_TR1, 1 << 1   @ bitWidth 1 (Falling trigger event configuration of  line 1)  
        .equ EXTI_FTSR_TR2, 1 << 2   @ bitWidth 1 (Falling trigger event configuration of  line 2)  
        .equ EXTI_FTSR_TR3, 1 << 3   @ bitWidth 1 (Falling trigger event configuration of  line 3)  
        .equ EXTI_FTSR_TR4, 1 << 4   @ bitWidth 1 (Falling trigger event configuration of  line 4)  
        .equ EXTI_FTSR_TR5, 1 << 5   @ bitWidth 1 (Falling trigger event configuration of  line 5)  
        .equ EXTI_FTSR_TR6, 1 << 6   @ bitWidth 1 (Falling trigger event configuration of  line 6)  
        .equ EXTI_FTSR_TR7, 1 << 7   @ bitWidth 1 (Falling trigger event configuration of  line 7)  
        .equ EXTI_FTSR_TR8, 1 << 8   @ bitWidth 1 (Falling trigger event configuration of  line 8)  
        .equ EXTI_FTSR_TR9, 1 << 9   @ bitWidth 1 (Falling trigger event configuration of  line 9)  
        .equ EXTI_FTSR_TR10, 1 << 10   @ bitWidth 1 (Falling trigger event configuration of  line 10)  
        .equ EXTI_FTSR_TR11, 1 << 11   @ bitWidth 1 (Falling trigger event configuration of  line 11)  
        .equ EXTI_FTSR_TR12, 1 << 12   @ bitWidth 1 (Falling trigger event configuration of  line 12)  
        .equ EXTI_FTSR_TR13, 1 << 13   @ bitWidth 1 (Falling trigger event configuration of  line 13)  
        .equ EXTI_FTSR_TR14, 1 << 14   @ bitWidth 1 (Falling trigger event configuration of  line 14)  
        .equ EXTI_FTSR_TR15, 1 << 15   @ bitWidth 1 (Falling trigger event configuration of  line 15)  
        .equ EXTI_FTSR_TR16, 1 << 16   @ bitWidth 1 (Falling trigger event configuration of  line 16)  
        .equ EXTI_FTSR_TR17, 1 << 17   @ bitWidth 1 (Falling trigger event configuration of  line 17)  
        .equ EXTI_FTSR_TR18, 1 << 18   @ bitWidth 1 (Falling trigger event configuration of  line 18)  
        .equ EXTI_FTSR_TR19, 1 << 19   @ bitWidth 1 (Falling trigger event configuration of  line 19)  
        .equ EXTI_FTSR_TR20, 1 << 20   @ bitWidth 1 (Falling trigger event configuration of  line 20)  
        .equ EXTI_FTSR_TR21, 1 << 21   @ bitWidth 1 (Falling trigger event configuration of  line 21)  
        .equ EXTI_FTSR_TR22, 1 << 22   @ bitWidth 1 (Falling trigger event configuration of  line 22)  
 
    .equ EXTI_SWIER, EXTI_BASE + 0x10 @ (Software interrupt event register  EXTI_SWIER) 
        .equ EXTI_SWIER_SWIER0, 1 << 0   @ bitWidth 1 (Software Interrupt on line  0)  
        .equ EXTI_SWIER_SWIER1, 1 << 1   @ bitWidth 1 (Software Interrupt on line  1)  
        .equ EXTI_SWIER_SWIER2, 1 << 2   @ bitWidth 1 (Software Interrupt on line  2)  
        .equ EXTI_SWIER_SWIER3, 1 << 3   @ bitWidth 1 (Software Interrupt on line  3)  
        .equ EXTI_SWIER_SWIER4, 1 << 4   @ bitWidth 1 (Software Interrupt on line  4)  
        .equ EXTI_SWIER_SWIER5, 1 << 5   @ bitWidth 1 (Software Interrupt on line  5)  
        .equ EXTI_SWIER_SWIER6, 1 << 6   @ bitWidth 1 (Software Interrupt on line  6)  
        .equ EXTI_SWIER_SWIER7, 1 << 7   @ bitWidth 1 (Software Interrupt on line  7)  
        .equ EXTI_SWIER_SWIER8, 1 << 8   @ bitWidth 1 (Software Interrupt on line  8)  
        .equ EXTI_SWIER_SWIER9, 1 << 9   @ bitWidth 1 (Software Interrupt on line  9)  
        .equ EXTI_SWIER_SWIER10, 1 << 10   @ bitWidth 1 (Software Interrupt on line  10)  
        .equ EXTI_SWIER_SWIER11, 1 << 11   @ bitWidth 1 (Software Interrupt on line  11)  
        .equ EXTI_SWIER_SWIER12, 1 << 12   @ bitWidth 1 (Software Interrupt on line  12)  
        .equ EXTI_SWIER_SWIER13, 1 << 13   @ bitWidth 1 (Software Interrupt on line  13)  
        .equ EXTI_SWIER_SWIER14, 1 << 14   @ bitWidth 1 (Software Interrupt on line  14)  
        .equ EXTI_SWIER_SWIER15, 1 << 15   @ bitWidth 1 (Software Interrupt on line  15)  
        .equ EXTI_SWIER_SWIER16, 1 << 16   @ bitWidth 1 (Software Interrupt on line  16)  
        .equ EXTI_SWIER_SWIER17, 1 << 17   @ bitWidth 1 (Software Interrupt on line  17)  
        .equ EXTI_SWIER_SWIER18, 1 << 18   @ bitWidth 1 (Software Interrupt on line  18)  
        .equ EXTI_SWIER_SWIER19, 1 << 19   @ bitWidth 1 (Software Interrupt on line  19)  
        .equ EXTI_SWIER_SWIER20, 1 << 20   @ bitWidth 1 (Software Interrupt on line  20)  
        .equ EXTI_SWIER_SWIER21, 1 << 21   @ bitWidth 1 (Software Interrupt on line  21)  
        .equ EXTI_SWIER_SWIER22, 1 << 22   @ bitWidth 1 (Software Interrupt on line  22)  
 
    .equ EXTI_PR, EXTI_BASE + 0x14 @ (Pending register EXTI_PR) 
        .equ EXTI_PR_PR0, 1 << 0   @ bitWidth 1 (Pending bit 0)  
        .equ EXTI_PR_PR1, 1 << 1   @ bitWidth 1 (Pending bit 1)  
        .equ EXTI_PR_PR2, 1 << 2   @ bitWidth 1 (Pending bit 2)  
        .equ EXTI_PR_PR3, 1 << 3   @ bitWidth 1 (Pending bit 3)  
        .equ EXTI_PR_PR4, 1 << 4   @ bitWidth 1 (Pending bit 4)  
        .equ EXTI_PR_PR5, 1 << 5   @ bitWidth 1 (Pending bit 5)  
        .equ EXTI_PR_PR6, 1 << 6   @ bitWidth 1 (Pending bit 6)  
        .equ EXTI_PR_PR7, 1 << 7   @ bitWidth 1 (Pending bit 7)  
        .equ EXTI_PR_PR8, 1 << 8   @ bitWidth 1 (Pending bit 8)  
        .equ EXTI_PR_PR9, 1 << 9   @ bitWidth 1 (Pending bit 9)  
        .equ EXTI_PR_PR10, 1 << 10   @ bitWidth 1 (Pending bit 10)  
        .equ EXTI_PR_PR11, 1 << 11   @ bitWidth 1 (Pending bit 11)  
        .equ EXTI_PR_PR12, 1 << 12   @ bitWidth 1 (Pending bit 12)  
        .equ EXTI_PR_PR13, 1 << 13   @ bitWidth 1 (Pending bit 13)  
        .equ EXTI_PR_PR14, 1 << 14   @ bitWidth 1 (Pending bit 14)  
        .equ EXTI_PR_PR15, 1 << 15   @ bitWidth 1 (Pending bit 15)  
        .equ EXTI_PR_PR16, 1 << 16   @ bitWidth 1 (Pending bit 16)  
        .equ EXTI_PR_PR17, 1 << 17   @ bitWidth 1 (Pending bit 17)  
        .equ EXTI_PR_PR18, 1 << 18   @ bitWidth 1 (Pending bit 18)  
        .equ EXTI_PR_PR19, 1 << 19   @ bitWidth 1 (Pending bit 19)  
        .equ EXTI_PR_PR20, 1 << 20   @ bitWidth 1 (Pending bit 20)  
        .equ EXTI_PR_PR21, 1 << 21   @ bitWidth 1 (Pending bit 21)  
        .equ EXTI_PR_PR22, 1 << 22   @ bitWidth 1 (Pending bit 22)  
 

@=========================== OTG_HS_GLOBAL ===========================@
.equ OTG_HS_GLOBAL_BASE, 0x40040000 @ (USB on the go high speed) 
    .equ OTG_HS_GLOBAL_OTG_HS_GOTGCTL, OTG_HS_GLOBAL_BASE + 0x0 @ (OTG_HS control and status  register) 
        .equ OTG_HS_GLOBAL_OTG_HS_GOTGCTL_SRQSCS, 1 << 0   @ bitWidth 1 (Session request success)  
        .equ OTG_HS_GLOBAL_OTG_HS_GOTGCTL_SRQ, 1 << 1   @ bitWidth 1 (Session request)  
        .equ OTG_HS_GLOBAL_OTG_HS_GOTGCTL_HNGSCS, 1 << 8   @ bitWidth 1 (Host negotiation success)  
        .equ OTG_HS_GLOBAL_OTG_HS_GOTGCTL_HNPRQ, 1 << 9   @ bitWidth 1 (HNP request)  
        .equ OTG_HS_GLOBAL_OTG_HS_GOTGCTL_HSHNPEN, 1 << 10   @ bitWidth 1 (Host set HNP enable)  
        .equ OTG_HS_GLOBAL_OTG_HS_GOTGCTL_DHNPEN, 1 << 11   @ bitWidth 1 (Device HNP enabled)  
        .equ OTG_HS_GLOBAL_OTG_HS_GOTGCTL_CIDSTS, 1 << 16   @ bitWidth 1 (Connector ID status)  
        .equ OTG_HS_GLOBAL_OTG_HS_GOTGCTL_DBCT, 1 << 17   @ bitWidth 1 (Long/short debounce time)  
        .equ OTG_HS_GLOBAL_OTG_HS_GOTGCTL_ASVLD, 1 << 18   @ bitWidth 1 (A-session valid)  
        .equ OTG_HS_GLOBAL_OTG_HS_GOTGCTL_BSVLD, 1 << 19   @ bitWidth 1 (B-session valid)  
 
    .equ OTG_HS_GLOBAL_OTG_HS_GOTGINT, OTG_HS_GLOBAL_BASE + 0x4 @ (OTG_HS interrupt register) 
        .equ OTG_HS_GLOBAL_OTG_HS_GOTGINT_SEDET, 1 << 2   @ bitWidth 1 (Session end detected)  
        .equ OTG_HS_GLOBAL_OTG_HS_GOTGINT_SRSSCHG, 1 << 8   @ bitWidth 1 (Session request success status  change)  
        .equ OTG_HS_GLOBAL_OTG_HS_GOTGINT_HNSSCHG, 1 << 9   @ bitWidth 1 (Host negotiation success status  change)  
        .equ OTG_HS_GLOBAL_OTG_HS_GOTGINT_HNGDET, 1 << 17   @ bitWidth 1 (Host negotiation detected)  
        .equ OTG_HS_GLOBAL_OTG_HS_GOTGINT_ADTOCHG, 1 << 18   @ bitWidth 1 (A-device timeout change)  
        .equ OTG_HS_GLOBAL_OTG_HS_GOTGINT_DBCDNE, 1 << 19   @ bitWidth 1 (Debounce done)  
 
    .equ OTG_HS_GLOBAL_OTG_HS_GAHBCFG, OTG_HS_GLOBAL_BASE + 0x8 @ (OTG_HS AHB configuration  register) 
        .equ OTG_HS_GLOBAL_OTG_HS_GAHBCFG_GINT, 1 << 0   @ bitWidth 1 (Global interrupt mask)  
        .equ OTG_HS_GLOBAL_OTG_HS_GAHBCFG_HBSTLEN_Shift, 1   @ bitWidth 4 (Burst length/type)  
        .equ OTG_HS_GLOBAL_OTG_HS_GAHBCFG_DMAEN, 1 << 5   @ bitWidth 1 (DMA enable)  
        .equ OTG_HS_GLOBAL_OTG_HS_GAHBCFG_TXFELVL, 1 << 7   @ bitWidth 1 (TxFIFO empty level)  
        .equ OTG_HS_GLOBAL_OTG_HS_GAHBCFG_PTXFELVL, 1 << 8   @ bitWidth 1 (Periodic TxFIFO empty  level)  
 
    .equ OTG_HS_GLOBAL_OTG_HS_GUSBCFG, OTG_HS_GLOBAL_BASE + 0xC @ (OTG_HS USB configuration  register) 
        .equ OTG_HS_GLOBAL_OTG_HS_GUSBCFG_TOCAL_Shift, 0   @ bitWidth 3 (FS timeout calibration)  
        .equ OTG_HS_GLOBAL_OTG_HS_GUSBCFG_PHYSEL, 1 << 6   @ bitWidth 1 (USB 2.0 high-speed ULPI PHY or USB 1.1  full-speed serial transceiver select)  
        .equ OTG_HS_GLOBAL_OTG_HS_GUSBCFG_SRPCAP, 1 << 8   @ bitWidth 1 (SRP-capable)  
        .equ OTG_HS_GLOBAL_OTG_HS_GUSBCFG_HNPCAP, 1 << 9   @ bitWidth 1 (HNP-capable)  
        .equ OTG_HS_GLOBAL_OTG_HS_GUSBCFG_TRDT_Shift, 10   @ bitWidth 4 (USB turnaround time)  
        .equ OTG_HS_GLOBAL_OTG_HS_GUSBCFG_PHYLPCS, 1 << 15   @ bitWidth 1 (PHY Low-power clock select)  
        .equ OTG_HS_GLOBAL_OTG_HS_GUSBCFG_ULPIFSLS, 1 << 17   @ bitWidth 1 (ULPI FS/LS select)  
        .equ OTG_HS_GLOBAL_OTG_HS_GUSBCFG_ULPIAR, 1 << 18   @ bitWidth 1 (ULPI Auto-resume)  
        .equ OTG_HS_GLOBAL_OTG_HS_GUSBCFG_ULPICSM, 1 << 19   @ bitWidth 1 (ULPI Clock SuspendM)  
        .equ OTG_HS_GLOBAL_OTG_HS_GUSBCFG_ULPIEVBUSD, 1 << 20   @ bitWidth 1 (ULPI External VBUS Drive)  
        .equ OTG_HS_GLOBAL_OTG_HS_GUSBCFG_ULPIEVBUSI, 1 << 21   @ bitWidth 1 (ULPI external VBUS  indicator)  
        .equ OTG_HS_GLOBAL_OTG_HS_GUSBCFG_TSDPS, 1 << 22   @ bitWidth 1 (TermSel DLine pulsing  selection)  
        .equ OTG_HS_GLOBAL_OTG_HS_GUSBCFG_PCCI, 1 << 23   @ bitWidth 1 (Indicator complement)  
        .equ OTG_HS_GLOBAL_OTG_HS_GUSBCFG_PTCI, 1 << 24   @ bitWidth 1 (Indicator pass through)  
        .equ OTG_HS_GLOBAL_OTG_HS_GUSBCFG_ULPIIPD, 1 << 25   @ bitWidth 1 (ULPI interface protect  disable)  
        .equ OTG_HS_GLOBAL_OTG_HS_GUSBCFG_FHMOD, 1 << 29   @ bitWidth 1 (Forced host mode)  
        .equ OTG_HS_GLOBAL_OTG_HS_GUSBCFG_FDMOD, 1 << 30   @ bitWidth 1 (Forced peripheral mode)  
        .equ OTG_HS_GLOBAL_OTG_HS_GUSBCFG_CTXPKT, 1 << 31   @ bitWidth 1 (Corrupt Tx packet)  
 
    .equ OTG_HS_GLOBAL_OTG_HS_GRSTCTL, OTG_HS_GLOBAL_BASE + 0x10 @ (OTG_HS reset register) 
        .equ OTG_HS_GLOBAL_OTG_HS_GRSTCTL_CSRST, 1 << 0   @ bitWidth 1 (Core soft reset)  
        .equ OTG_HS_GLOBAL_OTG_HS_GRSTCTL_HSRST, 1 << 1   @ bitWidth 1 (HCLK soft reset)  
        .equ OTG_HS_GLOBAL_OTG_HS_GRSTCTL_FCRST, 1 << 2   @ bitWidth 1 (Host frame counter reset)  
        .equ OTG_HS_GLOBAL_OTG_HS_GRSTCTL_RXFFLSH, 1 << 4   @ bitWidth 1 (RxFIFO flush)  
        .equ OTG_HS_GLOBAL_OTG_HS_GRSTCTL_TXFFLSH, 1 << 5   @ bitWidth 1 (TxFIFO flush)  
        .equ OTG_HS_GLOBAL_OTG_HS_GRSTCTL_TXFNUM_Shift, 6   @ bitWidth 5 (TxFIFO number)  
        .equ OTG_HS_GLOBAL_OTG_HS_GRSTCTL_DMAREQ, 1 << 30   @ bitWidth 1 (DMA request signal)  
        .equ OTG_HS_GLOBAL_OTG_HS_GRSTCTL_AHBIDL, 1 << 31   @ bitWidth 1 (AHB master idle)  
 
    .equ OTG_HS_GLOBAL_OTG_HS_GINTSTS, OTG_HS_GLOBAL_BASE + 0x14 @ (OTG_HS core interrupt register) 
        .equ OTG_HS_GLOBAL_OTG_HS_GINTSTS_CMOD, 1 << 0   @ bitWidth 1 (Current mode of operation)  
        .equ OTG_HS_GLOBAL_OTG_HS_GINTSTS_MMIS, 1 << 1   @ bitWidth 1 (Mode mismatch interrupt)  
        .equ OTG_HS_GLOBAL_OTG_HS_GINTSTS_OTGINT, 1 << 2   @ bitWidth 1 (OTG interrupt)  
        .equ OTG_HS_GLOBAL_OTG_HS_GINTSTS_SOF, 1 << 3   @ bitWidth 1 (Start of frame)  
        .equ OTG_HS_GLOBAL_OTG_HS_GINTSTS_RXFLVL, 1 << 4   @ bitWidth 1 (RxFIFO nonempty)  
        .equ OTG_HS_GLOBAL_OTG_HS_GINTSTS_NPTXFE, 1 << 5   @ bitWidth 1 (Nonperiodic TxFIFO empty)  
        .equ OTG_HS_GLOBAL_OTG_HS_GINTSTS_GINAKEFF, 1 << 6   @ bitWidth 1 (Global IN nonperiodic NAK  effective)  
        .equ OTG_HS_GLOBAL_OTG_HS_GINTSTS_BOUTNAKEFF, 1 << 7   @ bitWidth 1 (Global OUT NAK effective)  
        .equ OTG_HS_GLOBAL_OTG_HS_GINTSTS_ESUSP, 1 << 10   @ bitWidth 1 (Early suspend)  
        .equ OTG_HS_GLOBAL_OTG_HS_GINTSTS_USBSUSP, 1 << 11   @ bitWidth 1 (USB suspend)  
        .equ OTG_HS_GLOBAL_OTG_HS_GINTSTS_USBRST, 1 << 12   @ bitWidth 1 (USB reset)  
        .equ OTG_HS_GLOBAL_OTG_HS_GINTSTS_ENUMDNE, 1 << 13   @ bitWidth 1 (Enumeration done)  
        .equ OTG_HS_GLOBAL_OTG_HS_GINTSTS_ISOODRP, 1 << 14   @ bitWidth 1 (Isochronous OUT packet dropped  interrupt)  
        .equ OTG_HS_GLOBAL_OTG_HS_GINTSTS_EOPF, 1 << 15   @ bitWidth 1 (End of periodic frame  interrupt)  
        .equ OTG_HS_GLOBAL_OTG_HS_GINTSTS_IEPINT, 1 << 18   @ bitWidth 1 (IN endpoint interrupt)  
        .equ OTG_HS_GLOBAL_OTG_HS_GINTSTS_OEPINT, 1 << 19   @ bitWidth 1 (OUT endpoint interrupt)  
        .equ OTG_HS_GLOBAL_OTG_HS_GINTSTS_IISOIXFR, 1 << 20   @ bitWidth 1 (Incomplete isochronous IN  transfer)  
        .equ OTG_HS_GLOBAL_OTG_HS_GINTSTS_PXFR_INCOMPISOOUT, 1 << 21   @ bitWidth 1 (Incomplete periodic  transfer)  
        .equ OTG_HS_GLOBAL_OTG_HS_GINTSTS_DATAFSUSP, 1 << 22   @ bitWidth 1 (Data fetch suspended)  
        .equ OTG_HS_GLOBAL_OTG_HS_GINTSTS_HPRTINT, 1 << 24   @ bitWidth 1 (Host port interrupt)  
        .equ OTG_HS_GLOBAL_OTG_HS_GINTSTS_HCINT, 1 << 25   @ bitWidth 1 (Host channels interrupt)  
        .equ OTG_HS_GLOBAL_OTG_HS_GINTSTS_PTXFE, 1 << 26   @ bitWidth 1 (Periodic TxFIFO empty)  
        .equ OTG_HS_GLOBAL_OTG_HS_GINTSTS_CIDSCHG, 1 << 28   @ bitWidth 1 (Connector ID status change)  
        .equ OTG_HS_GLOBAL_OTG_HS_GINTSTS_DISCINT, 1 << 29   @ bitWidth 1 (Disconnect detected  interrupt)  
        .equ OTG_HS_GLOBAL_OTG_HS_GINTSTS_SRQINT, 1 << 30   @ bitWidth 1 (Session request/new session detected  interrupt)  
        .equ OTG_HS_GLOBAL_OTG_HS_GINTSTS_WKUINT, 1 << 31   @ bitWidth 1 (Resume/remote wakeup detected  interrupt)  
 
    .equ OTG_HS_GLOBAL_OTG_HS_GINTMSK, OTG_HS_GLOBAL_BASE + 0x18 @ (OTG_HS interrupt mask register) 
        .equ OTG_HS_GLOBAL_OTG_HS_GINTMSK_MMISM, 1 << 1   @ bitWidth 1 (Mode mismatch interrupt  mask)  
        .equ OTG_HS_GLOBAL_OTG_HS_GINTMSK_OTGINT, 1 << 2   @ bitWidth 1 (OTG interrupt mask)  
        .equ OTG_HS_GLOBAL_OTG_HS_GINTMSK_SOFM, 1 << 3   @ bitWidth 1 (Start of frame mask)  
        .equ OTG_HS_GLOBAL_OTG_HS_GINTMSK_RXFLVLM, 1 << 4   @ bitWidth 1 (Receive FIFO nonempty mask)  
        .equ OTG_HS_GLOBAL_OTG_HS_GINTMSK_NPTXFEM, 1 << 5   @ bitWidth 1 (Nonperiodic TxFIFO empty  mask)  
        .equ OTG_HS_GLOBAL_OTG_HS_GINTMSK_GINAKEFFM, 1 << 6   @ bitWidth 1 (Global nonperiodic IN NAK effective  mask)  
        .equ OTG_HS_GLOBAL_OTG_HS_GINTMSK_GONAKEFFM, 1 << 7   @ bitWidth 1 (Global OUT NAK effective  mask)  
        .equ OTG_HS_GLOBAL_OTG_HS_GINTMSK_ESUSPM, 1 << 10   @ bitWidth 1 (Early suspend mask)  
        .equ OTG_HS_GLOBAL_OTG_HS_GINTMSK_USBSUSPM, 1 << 11   @ bitWidth 1 (USB suspend mask)  
        .equ OTG_HS_GLOBAL_OTG_HS_GINTMSK_USBRST, 1 << 12   @ bitWidth 1 (USB reset mask)  
        .equ OTG_HS_GLOBAL_OTG_HS_GINTMSK_ENUMDNEM, 1 << 13   @ bitWidth 1 (Enumeration done mask)  
        .equ OTG_HS_GLOBAL_OTG_HS_GINTMSK_ISOODRPM, 1 << 14   @ bitWidth 1 (Isochronous OUT packet dropped interrupt  mask)  
        .equ OTG_HS_GLOBAL_OTG_HS_GINTMSK_EOPFM, 1 << 15   @ bitWidth 1 (End of periodic frame interrupt  mask)  
        .equ OTG_HS_GLOBAL_OTG_HS_GINTMSK_EPMISM, 1 << 17   @ bitWidth 1 (Endpoint mismatch interrupt  mask)  
        .equ OTG_HS_GLOBAL_OTG_HS_GINTMSK_IEPINT, 1 << 18   @ bitWidth 1 (IN endpoints interrupt  mask)  
        .equ OTG_HS_GLOBAL_OTG_HS_GINTMSK_OEPINT, 1 << 19   @ bitWidth 1 (OUT endpoints interrupt  mask)  
        .equ OTG_HS_GLOBAL_OTG_HS_GINTMSK_IISOIXFRM, 1 << 20   @ bitWidth 1 (Incomplete isochronous IN transfer  mask)  
        .equ OTG_HS_GLOBAL_OTG_HS_GINTMSK_PXFRM_IISOOXFRM, 1 << 21   @ bitWidth 1 (Incomplete periodic transfer  mask)  
        .equ OTG_HS_GLOBAL_OTG_HS_GINTMSK_FSUSPM, 1 << 22   @ bitWidth 1 (Data fetch suspended mask)  
        .equ OTG_HS_GLOBAL_OTG_HS_GINTMSK_PRTIM, 1 << 24   @ bitWidth 1 (Host port interrupt mask)  
        .equ OTG_HS_GLOBAL_OTG_HS_GINTMSK_HCIM, 1 << 25   @ bitWidth 1 (Host channels interrupt  mask)  
        .equ OTG_HS_GLOBAL_OTG_HS_GINTMSK_PTXFEM, 1 << 26   @ bitWidth 1 (Periodic TxFIFO empty mask)  
        .equ OTG_HS_GLOBAL_OTG_HS_GINTMSK_CIDSCHGM, 1 << 28   @ bitWidth 1 (Connector ID status change  mask)  
        .equ OTG_HS_GLOBAL_OTG_HS_GINTMSK_DISCINT, 1 << 29   @ bitWidth 1 (Disconnect detected interrupt  mask)  
        .equ OTG_HS_GLOBAL_OTG_HS_GINTMSK_SRQIM, 1 << 30   @ bitWidth 1 (Session request/new session detected  interrupt mask)  
        .equ OTG_HS_GLOBAL_OTG_HS_GINTMSK_WUIM, 1 << 31   @ bitWidth 1 (Resume/remote wakeup detected interrupt  mask)  
 
    .equ OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Host, OTG_HS_GLOBAL_BASE + 0x1C @ (OTG_HS Receive status debug read register  host mode) 
        .equ OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Host_CHNUM_Shift, 0   @ bitWidth 4 (Channel number)  
        .equ OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Host_BCNT_Shift, 4   @ bitWidth 11 (Byte count)  
        .equ OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Host_DPID_Shift, 15   @ bitWidth 2 (Data PID)  
        .equ OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Host_PKTSTS_Shift, 17   @ bitWidth 4 (Packet status)  
 
    .equ OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Host, OTG_HS_GLOBAL_BASE + 0x20 @ (OTG_HS status read and pop register host  mode) 
        .equ OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Host_CHNUM_Shift, 0   @ bitWidth 4 (Channel number)  
        .equ OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Host_BCNT_Shift, 4   @ bitWidth 11 (Byte count)  
        .equ OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Host_DPID_Shift, 15   @ bitWidth 2 (Data PID)  
        .equ OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Host_PKTSTS_Shift, 17   @ bitWidth 4 (Packet status)  
 
    .equ OTG_HS_GLOBAL_OTG_HS_GRXFSIZ, OTG_HS_GLOBAL_BASE + 0x24 @ (OTG_HS Receive FIFO size  register) 
        .equ OTG_HS_GLOBAL_OTG_HS_GRXFSIZ_RXFD_Shift, 0   @ bitWidth 16 (RxFIFO depth)  
 
    .equ OTG_HS_GLOBAL_OTG_HS_GNPTXFSIZ_Host, OTG_HS_GLOBAL_BASE + 0x28 @ (OTG_HS nonperiodic transmit FIFO size  register host mode) 
        .equ OTG_HS_GLOBAL_OTG_HS_GNPTXFSIZ_Host_NPTXFSA_Shift, 0   @ bitWidth 16 (Nonperiodic transmit RAM start  address)  
        .equ OTG_HS_GLOBAL_OTG_HS_GNPTXFSIZ_Host_NPTXFD_Shift, 16   @ bitWidth 16 (Nonperiodic TxFIFO depth)  
 
    .equ OTG_HS_GLOBAL_OTG_HS_TX0FSIZ_Peripheral, OTG_HS_GLOBAL_BASE + 0x28 @ (Endpoint 0 transmit FIFO size peripheral  mode) 
        .equ OTG_HS_GLOBAL_OTG_HS_TX0FSIZ_Peripheral_TX0FSA_Shift, 0   @ bitWidth 16 (Endpoint 0 transmit RAM start  address)  
        .equ OTG_HS_GLOBAL_OTG_HS_TX0FSIZ_Peripheral_TX0FD_Shift, 16   @ bitWidth 16 (Endpoint 0 TxFIFO depth)  
 
    .equ OTG_HS_GLOBAL_OTG_HS_GNPTXSTS, OTG_HS_GLOBAL_BASE + 0x2C @ (OTG_HS nonperiodic transmit FIFO/queue  status register) 
        .equ OTG_HS_GLOBAL_OTG_HS_GNPTXSTS_NPTXFSAV_Shift, 0   @ bitWidth 16 (Nonperiodic TxFIFO space  available)  
        .equ OTG_HS_GLOBAL_OTG_HS_GNPTXSTS_NPTQXSAV_Shift, 16   @ bitWidth 8 (Nonperiodic transmit request queue space  available)  
        .equ OTG_HS_GLOBAL_OTG_HS_GNPTXSTS_NPTXQTOP_Shift, 24   @ bitWidth 7 (Top of the nonperiodic transmit request  queue)  
 
    .equ OTG_HS_GLOBAL_OTG_HS_GCCFG, OTG_HS_GLOBAL_BASE + 0x38 @ (OTG_HS general core configuration  register) 
        .equ OTG_HS_GLOBAL_OTG_HS_GCCFG_PWRDWN, 1 << 16   @ bitWidth 1 (Power down)  
        .equ OTG_HS_GLOBAL_OTG_HS_GCCFG_I2CPADEN, 1 << 17   @ bitWidth 1 (Enable I2C bus connection for the  external I2C PHY interface)  
        .equ OTG_HS_GLOBAL_OTG_HS_GCCFG_VBUSASEN, 1 << 18   @ bitWidth 1 (Enable the VBUS sensing  device)  
        .equ OTG_HS_GLOBAL_OTG_HS_GCCFG_VBUSBSEN, 1 << 19   @ bitWidth 1 (Enable the VBUS sensing device)  
        .equ OTG_HS_GLOBAL_OTG_HS_GCCFG_SOFOUTEN, 1 << 20   @ bitWidth 1 (SOF output enable)  
        .equ OTG_HS_GLOBAL_OTG_HS_GCCFG_NOVBUSSENS, 1 << 21   @ bitWidth 1 (VBUS sensing disable  option)  
 
    .equ OTG_HS_GLOBAL_OTG_HS_CID, OTG_HS_GLOBAL_BASE + 0x3C @ (OTG_HS core ID register) 
        .equ OTG_HS_GLOBAL_OTG_HS_CID_PRODUCT_ID_Shift, 0   @ bitWidth 32 (Product ID field)  
 
    .equ OTG_HS_GLOBAL_OTG_HS_HPTXFSIZ, OTG_HS_GLOBAL_BASE + 0x100 @ (OTG_HS Host periodic transmit FIFO size  register) 
        .equ OTG_HS_GLOBAL_OTG_HS_HPTXFSIZ_PTXSA_Shift, 0   @ bitWidth 16 (Host periodic TxFIFO start  address)  
        .equ OTG_HS_GLOBAL_OTG_HS_HPTXFSIZ_PTXFD_Shift, 16   @ bitWidth 16 (Host periodic TxFIFO depth)  
 
    .equ OTG_HS_GLOBAL_OTG_HS_DIEPTXF1, OTG_HS_GLOBAL_BASE + 0x104 @ (OTG_HS device IN endpoint transmit FIFO size  register) 
        .equ OTG_HS_GLOBAL_OTG_HS_DIEPTXF1_INEPTXSA_Shift, 0   @ bitWidth 16 (IN endpoint FIFOx transmit RAM start  address)  
        .equ OTG_HS_GLOBAL_OTG_HS_DIEPTXF1_INEPTXFD_Shift, 16   @ bitWidth 16 (IN endpoint TxFIFO depth)  
 
    .equ OTG_HS_GLOBAL_OTG_HS_DIEPTXF2, OTG_HS_GLOBAL_BASE + 0x108 @ (OTG_HS device IN endpoint transmit FIFO size  register) 
        .equ OTG_HS_GLOBAL_OTG_HS_DIEPTXF2_INEPTXSA_Shift, 0   @ bitWidth 16 (IN endpoint FIFOx transmit RAM start  address)  
        .equ OTG_HS_GLOBAL_OTG_HS_DIEPTXF2_INEPTXFD_Shift, 16   @ bitWidth 16 (IN endpoint TxFIFO depth)  
 
    .equ OTG_HS_GLOBAL_OTG_HS_DIEPTXF3, OTG_HS_GLOBAL_BASE + 0x11C @ (OTG_HS device IN endpoint transmit FIFO size  register) 
        .equ OTG_HS_GLOBAL_OTG_HS_DIEPTXF3_INEPTXSA_Shift, 0   @ bitWidth 16 (IN endpoint FIFOx transmit RAM start  address)  
        .equ OTG_HS_GLOBAL_OTG_HS_DIEPTXF3_INEPTXFD_Shift, 16   @ bitWidth 16 (IN endpoint TxFIFO depth)  
 
    .equ OTG_HS_GLOBAL_OTG_HS_DIEPTXF4, OTG_HS_GLOBAL_BASE + 0x120 @ (OTG_HS device IN endpoint transmit FIFO size  register) 
        .equ OTG_HS_GLOBAL_OTG_HS_DIEPTXF4_INEPTXSA_Shift, 0   @ bitWidth 16 (IN endpoint FIFOx transmit RAM start  address)  
        .equ OTG_HS_GLOBAL_OTG_HS_DIEPTXF4_INEPTXFD_Shift, 16   @ bitWidth 16 (IN endpoint TxFIFO depth)  
 
    .equ OTG_HS_GLOBAL_OTG_HS_DIEPTXF5, OTG_HS_GLOBAL_BASE + 0x124 @ (OTG_HS device IN endpoint transmit FIFO size  register) 
        .equ OTG_HS_GLOBAL_OTG_HS_DIEPTXF5_INEPTXSA_Shift, 0   @ bitWidth 16 (IN endpoint FIFOx transmit RAM start  address)  
        .equ OTG_HS_GLOBAL_OTG_HS_DIEPTXF5_INEPTXFD_Shift, 16   @ bitWidth 16 (IN endpoint TxFIFO depth)  
 
    .equ OTG_HS_GLOBAL_OTG_HS_DIEPTXF6, OTG_HS_GLOBAL_BASE + 0x128 @ (OTG_HS device IN endpoint transmit FIFO size  register) 
        .equ OTG_HS_GLOBAL_OTG_HS_DIEPTXF6_INEPTXSA_Shift, 0   @ bitWidth 16 (IN endpoint FIFOx transmit RAM start  address)  
        .equ OTG_HS_GLOBAL_OTG_HS_DIEPTXF6_INEPTXFD_Shift, 16   @ bitWidth 16 (IN endpoint TxFIFO depth)  
 
    .equ OTG_HS_GLOBAL_OTG_HS_DIEPTXF7, OTG_HS_GLOBAL_BASE + 0x12C @ (OTG_HS device IN endpoint transmit FIFO size  register) 
        .equ OTG_HS_GLOBAL_OTG_HS_DIEPTXF7_INEPTXSA_Shift, 0   @ bitWidth 16 (IN endpoint FIFOx transmit RAM start  address)  
        .equ OTG_HS_GLOBAL_OTG_HS_DIEPTXF7_INEPTXFD_Shift, 16   @ bitWidth 16 (IN endpoint TxFIFO depth)  
 
    .equ OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Peripheral, OTG_HS_GLOBAL_BASE + 0x1C @ (OTG_HS Receive status debug read register  peripheral mode mode) 
        .equ OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Peripheral_EPNUM_Shift, 0   @ bitWidth 4 (Endpoint number)  
        .equ OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Peripheral_BCNT_Shift, 4   @ bitWidth 11 (Byte count)  
        .equ OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Peripheral_DPID_Shift, 15   @ bitWidth 2 (Data PID)  
        .equ OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Peripheral_PKTSTS_Shift, 17   @ bitWidth 4 (Packet status)  
        .equ OTG_HS_GLOBAL_OTG_HS_GRXSTSR_Peripheral_FRMNUM_Shift, 21   @ bitWidth 4 (Frame number)  
 
    .equ OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Peripheral, OTG_HS_GLOBAL_BASE + 0x20 @ (OTG_HS status read and pop register  peripheral mode) 
        .equ OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Peripheral_EPNUM_Shift, 0   @ bitWidth 4 (Endpoint number)  
        .equ OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Peripheral_BCNT_Shift, 4   @ bitWidth 11 (Byte count)  
        .equ OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Peripheral_DPID_Shift, 15   @ bitWidth 2 (Data PID)  
        .equ OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Peripheral_PKTSTS_Shift, 17   @ bitWidth 4 (Packet status)  
        .equ OTG_HS_GLOBAL_OTG_HS_GRXSTSP_Peripheral_FRMNUM_Shift, 21   @ bitWidth 4 (Frame number)  
 

@=========================== OTG_HS_HOST ===========================@
.equ OTG_HS_HOST_BASE, 0x40040400 @ (USB on the go high speed) 
    .equ OTG_HS_HOST_OTG_HS_HCFG, OTG_HS_HOST_BASE + 0x0 @ (OTG_HS host configuration  register) 
        .equ OTG_HS_HOST_OTG_HS_HCFG_FSLSPCS_Shift, 0   @ bitWidth 2 (FS/LS PHY clock select)  
        .equ OTG_HS_HOST_OTG_HS_HCFG_FSLSS, 1 << 2   @ bitWidth 1 (FS- and LS-only support)  
 
    .equ OTG_HS_HOST_OTG_HS_HFIR, OTG_HS_HOST_BASE + 0x4 @ (OTG_HS Host frame interval  register) 
        .equ OTG_HS_HOST_OTG_HS_HFIR_FRIVL_Shift, 0   @ bitWidth 16 (Frame interval)  
 
    .equ OTG_HS_HOST_OTG_HS_HFNUM, OTG_HS_HOST_BASE + 0x8 @ (OTG_HS host frame number/frame time  remaining register) 
        .equ OTG_HS_HOST_OTG_HS_HFNUM_FRNUM_Shift, 0   @ bitWidth 16 (Frame number)  
        .equ OTG_HS_HOST_OTG_HS_HFNUM_FTREM_Shift, 16   @ bitWidth 16 (Frame time remaining)  
 
    .equ OTG_HS_HOST_OTG_HS_HPTXSTS, OTG_HS_HOST_BASE + 0x10 @ (OTG_HS_Host periodic transmit FIFO/queue  status register) 
        .equ OTG_HS_HOST_OTG_HS_HPTXSTS_PTXFSAVL_Shift, 0   @ bitWidth 16 (Periodic transmit data FIFO space  available)  
        .equ OTG_HS_HOST_OTG_HS_HPTXSTS_PTXQSAV_Shift, 16   @ bitWidth 8 (Periodic transmit request queue space  available)  
        .equ OTG_HS_HOST_OTG_HS_HPTXSTS_PTXQTOP_Shift, 24   @ bitWidth 8 (Top of the periodic transmit request  queue)  
 
    .equ OTG_HS_HOST_OTG_HS_HAINT, OTG_HS_HOST_BASE + 0x14 @ (OTG_HS Host all channels interrupt  register) 
        .equ OTG_HS_HOST_OTG_HS_HAINT_HAINT_Shift, 0   @ bitWidth 16 (Channel interrupts)  
 
    .equ OTG_HS_HOST_OTG_HS_HAINTMSK, OTG_HS_HOST_BASE + 0x18 @ (OTG_HS host all channels interrupt mask  register) 
        .equ OTG_HS_HOST_OTG_HS_HAINTMSK_HAINTM_Shift, 0   @ bitWidth 16 (Channel interrupt mask)  
 
    .equ OTG_HS_HOST_OTG_HS_HPRT, OTG_HS_HOST_BASE + 0x40 @ (OTG_HS host port control and status  register) 
        .equ OTG_HS_HOST_OTG_HS_HPRT_PCSTS, 1 << 0   @ bitWidth 1 (Port connect status)  
        .equ OTG_HS_HOST_OTG_HS_HPRT_PCDET, 1 << 1   @ bitWidth 1 (Port connect detected)  
        .equ OTG_HS_HOST_OTG_HS_HPRT_PENA, 1 << 2   @ bitWidth 1 (Port enable)  
        .equ OTG_HS_HOST_OTG_HS_HPRT_PENCHNG, 1 << 3   @ bitWidth 1 (Port enable/disable change)  
        .equ OTG_HS_HOST_OTG_HS_HPRT_POCA, 1 << 4   @ bitWidth 1 (Port overcurrent active)  
        .equ OTG_HS_HOST_OTG_HS_HPRT_POCCHNG, 1 << 5   @ bitWidth 1 (Port overcurrent change)  
        .equ OTG_HS_HOST_OTG_HS_HPRT_PRES, 1 << 6   @ bitWidth 1 (Port resume)  
        .equ OTG_HS_HOST_OTG_HS_HPRT_PSUSP, 1 << 7   @ bitWidth 1 (Port suspend)  
        .equ OTG_HS_HOST_OTG_HS_HPRT_PRST, 1 << 8   @ bitWidth 1 (Port reset)  
        .equ OTG_HS_HOST_OTG_HS_HPRT_PLSTS_Shift, 10   @ bitWidth 2 (Port line status)  
        .equ OTG_HS_HOST_OTG_HS_HPRT_PPWR, 1 << 12   @ bitWidth 1 (Port power)  
        .equ OTG_HS_HOST_OTG_HS_HPRT_PTCTL_Shift, 13   @ bitWidth 4 (Port test control)  
        .equ OTG_HS_HOST_OTG_HS_HPRT_PSPD_Shift, 17   @ bitWidth 2 (Port speed)  
 
    .equ OTG_HS_HOST_OTG_HS_HCCHAR0, OTG_HS_HOST_BASE + 0x100 @ (OTG_HS host channel-0 characteristics  register) 
        .equ OTG_HS_HOST_OTG_HS_HCCHAR0_MPSIZ_Shift, 0   @ bitWidth 11 (Maximum packet size)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR0_EPNUM_Shift, 11   @ bitWidth 4 (Endpoint number)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR0_EPDIR, 1 << 15   @ bitWidth 1 (Endpoint direction)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR0_LSDEV, 1 << 17   @ bitWidth 1 (Low-speed device)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR0_EPTYP_Shift, 18   @ bitWidth 2 (Endpoint type)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR0_MC_Shift, 20   @ bitWidth 2 (Multi Count MC / Error Count  EC)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR0_DAD_Shift, 22   @ bitWidth 7 (Device address)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR0_ODDFRM, 1 << 29   @ bitWidth 1 (Odd frame)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR0_CHDIS, 1 << 30   @ bitWidth 1 (Channel disable)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR0_CHENA, 1 << 31   @ bitWidth 1 (Channel enable)  
 
    .equ OTG_HS_HOST_OTG_HS_HCCHAR1, OTG_HS_HOST_BASE + 0x120 @ (OTG_HS host channel-1 characteristics  register) 
        .equ OTG_HS_HOST_OTG_HS_HCCHAR1_MPSIZ_Shift, 0   @ bitWidth 11 (Maximum packet size)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR1_EPNUM_Shift, 11   @ bitWidth 4 (Endpoint number)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR1_EPDIR, 1 << 15   @ bitWidth 1 (Endpoint direction)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR1_LSDEV, 1 << 17   @ bitWidth 1 (Low-speed device)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR1_EPTYP_Shift, 18   @ bitWidth 2 (Endpoint type)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR1_MC_Shift, 20   @ bitWidth 2 (Multi Count MC / Error Count  EC)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR1_DAD_Shift, 22   @ bitWidth 7 (Device address)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR1_ODDFRM, 1 << 29   @ bitWidth 1 (Odd frame)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR1_CHDIS, 1 << 30   @ bitWidth 1 (Channel disable)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR1_CHENA, 1 << 31   @ bitWidth 1 (Channel enable)  
 
    .equ OTG_HS_HOST_OTG_HS_HCCHAR2, OTG_HS_HOST_BASE + 0x140 @ (OTG_HS host channel-2 characteristics  register) 
        .equ OTG_HS_HOST_OTG_HS_HCCHAR2_MPSIZ_Shift, 0   @ bitWidth 11 (Maximum packet size)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR2_EPNUM_Shift, 11   @ bitWidth 4 (Endpoint number)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR2_EPDIR, 1 << 15   @ bitWidth 1 (Endpoint direction)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR2_LSDEV, 1 << 17   @ bitWidth 1 (Low-speed device)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR2_EPTYP_Shift, 18   @ bitWidth 2 (Endpoint type)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR2_MC_Shift, 20   @ bitWidth 2 (Multi Count MC / Error Count  EC)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR2_DAD_Shift, 22   @ bitWidth 7 (Device address)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR2_ODDFRM, 1 << 29   @ bitWidth 1 (Odd frame)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR2_CHDIS, 1 << 30   @ bitWidth 1 (Channel disable)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR2_CHENA, 1 << 31   @ bitWidth 1 (Channel enable)  
 
    .equ OTG_HS_HOST_OTG_HS_HCCHAR3, OTG_HS_HOST_BASE + 0x160 @ (OTG_HS host channel-3 characteristics  register) 
        .equ OTG_HS_HOST_OTG_HS_HCCHAR3_MPSIZ_Shift, 0   @ bitWidth 11 (Maximum packet size)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR3_EPNUM_Shift, 11   @ bitWidth 4 (Endpoint number)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR3_EPDIR, 1 << 15   @ bitWidth 1 (Endpoint direction)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR3_LSDEV, 1 << 17   @ bitWidth 1 (Low-speed device)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR3_EPTYP_Shift, 18   @ bitWidth 2 (Endpoint type)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR3_MC_Shift, 20   @ bitWidth 2 (Multi Count MC / Error Count  EC)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR3_DAD_Shift, 22   @ bitWidth 7 (Device address)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR3_ODDFRM, 1 << 29   @ bitWidth 1 (Odd frame)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR3_CHDIS, 1 << 30   @ bitWidth 1 (Channel disable)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR3_CHENA, 1 << 31   @ bitWidth 1 (Channel enable)  
 
    .equ OTG_HS_HOST_OTG_HS_HCCHAR4, OTG_HS_HOST_BASE + 0x180 @ (OTG_HS host channel-4 characteristics  register) 
        .equ OTG_HS_HOST_OTG_HS_HCCHAR4_MPSIZ_Shift, 0   @ bitWidth 11 (Maximum packet size)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR4_EPNUM_Shift, 11   @ bitWidth 4 (Endpoint number)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR4_EPDIR, 1 << 15   @ bitWidth 1 (Endpoint direction)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR4_LSDEV, 1 << 17   @ bitWidth 1 (Low-speed device)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR4_EPTYP_Shift, 18   @ bitWidth 2 (Endpoint type)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR4_MC_Shift, 20   @ bitWidth 2 (Multi Count MC / Error Count  EC)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR4_DAD_Shift, 22   @ bitWidth 7 (Device address)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR4_ODDFRM, 1 << 29   @ bitWidth 1 (Odd frame)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR4_CHDIS, 1 << 30   @ bitWidth 1 (Channel disable)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR4_CHENA, 1 << 31   @ bitWidth 1 (Channel enable)  
 
    .equ OTG_HS_HOST_OTG_HS_HCCHAR5, OTG_HS_HOST_BASE + 0x1A0 @ (OTG_HS host channel-5 characteristics  register) 
        .equ OTG_HS_HOST_OTG_HS_HCCHAR5_MPSIZ_Shift, 0   @ bitWidth 11 (Maximum packet size)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR5_EPNUM_Shift, 11   @ bitWidth 4 (Endpoint number)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR5_EPDIR, 1 << 15   @ bitWidth 1 (Endpoint direction)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR5_LSDEV, 1 << 17   @ bitWidth 1 (Low-speed device)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR5_EPTYP_Shift, 18   @ bitWidth 2 (Endpoint type)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR5_MC_Shift, 20   @ bitWidth 2 (Multi Count MC / Error Count  EC)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR5_DAD_Shift, 22   @ bitWidth 7 (Device address)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR5_ODDFRM, 1 << 29   @ bitWidth 1 (Odd frame)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR5_CHDIS, 1 << 30   @ bitWidth 1 (Channel disable)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR5_CHENA, 1 << 31   @ bitWidth 1 (Channel enable)  
 
    .equ OTG_HS_HOST_OTG_HS_HCCHAR6, OTG_HS_HOST_BASE + 0x1C0 @ (OTG_HS host channel-6 characteristics  register) 
        .equ OTG_HS_HOST_OTG_HS_HCCHAR6_MPSIZ_Shift, 0   @ bitWidth 11 (Maximum packet size)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR6_EPNUM_Shift, 11   @ bitWidth 4 (Endpoint number)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR6_EPDIR, 1 << 15   @ bitWidth 1 (Endpoint direction)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR6_LSDEV, 1 << 17   @ bitWidth 1 (Low-speed device)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR6_EPTYP_Shift, 18   @ bitWidth 2 (Endpoint type)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR6_MC_Shift, 20   @ bitWidth 2 (Multi Count MC / Error Count  EC)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR6_DAD_Shift, 22   @ bitWidth 7 (Device address)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR6_ODDFRM, 1 << 29   @ bitWidth 1 (Odd frame)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR6_CHDIS, 1 << 30   @ bitWidth 1 (Channel disable)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR6_CHENA, 1 << 31   @ bitWidth 1 (Channel enable)  
 
    .equ OTG_HS_HOST_OTG_HS_HCCHAR7, OTG_HS_HOST_BASE + 0x1E0 @ (OTG_HS host channel-7 characteristics  register) 
        .equ OTG_HS_HOST_OTG_HS_HCCHAR7_MPSIZ_Shift, 0   @ bitWidth 11 (Maximum packet size)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR7_EPNUM_Shift, 11   @ bitWidth 4 (Endpoint number)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR7_EPDIR, 1 << 15   @ bitWidth 1 (Endpoint direction)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR7_LSDEV, 1 << 17   @ bitWidth 1 (Low-speed device)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR7_EPTYP_Shift, 18   @ bitWidth 2 (Endpoint type)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR7_MC_Shift, 20   @ bitWidth 2 (Multi Count MC / Error Count  EC)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR7_DAD_Shift, 22   @ bitWidth 7 (Device address)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR7_ODDFRM, 1 << 29   @ bitWidth 1 (Odd frame)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR7_CHDIS, 1 << 30   @ bitWidth 1 (Channel disable)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR7_CHENA, 1 << 31   @ bitWidth 1 (Channel enable)  
 
    .equ OTG_HS_HOST_OTG_HS_HCCHAR8, OTG_HS_HOST_BASE + 0x200 @ (OTG_HS host channel-8 characteristics  register) 
        .equ OTG_HS_HOST_OTG_HS_HCCHAR8_MPSIZ_Shift, 0   @ bitWidth 11 (Maximum packet size)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR8_EPNUM_Shift, 11   @ bitWidth 4 (Endpoint number)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR8_EPDIR, 1 << 15   @ bitWidth 1 (Endpoint direction)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR8_LSDEV, 1 << 17   @ bitWidth 1 (Low-speed device)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR8_EPTYP_Shift, 18   @ bitWidth 2 (Endpoint type)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR8_MC_Shift, 20   @ bitWidth 2 (Multi Count MC / Error Count  EC)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR8_DAD_Shift, 22   @ bitWidth 7 (Device address)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR8_ODDFRM, 1 << 29   @ bitWidth 1 (Odd frame)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR8_CHDIS, 1 << 30   @ bitWidth 1 (Channel disable)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR8_CHENA, 1 << 31   @ bitWidth 1 (Channel enable)  
 
    .equ OTG_HS_HOST_OTG_HS_HCCHAR9, OTG_HS_HOST_BASE + 0x220 @ (OTG_HS host channel-9 characteristics  register) 
        .equ OTG_HS_HOST_OTG_HS_HCCHAR9_MPSIZ_Shift, 0   @ bitWidth 11 (Maximum packet size)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR9_EPNUM_Shift, 11   @ bitWidth 4 (Endpoint number)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR9_EPDIR, 1 << 15   @ bitWidth 1 (Endpoint direction)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR9_LSDEV, 1 << 17   @ bitWidth 1 (Low-speed device)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR9_EPTYP_Shift, 18   @ bitWidth 2 (Endpoint type)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR9_MC_Shift, 20   @ bitWidth 2 (Multi Count MC / Error Count  EC)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR9_DAD_Shift, 22   @ bitWidth 7 (Device address)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR9_ODDFRM, 1 << 29   @ bitWidth 1 (Odd frame)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR9_CHDIS, 1 << 30   @ bitWidth 1 (Channel disable)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR9_CHENA, 1 << 31   @ bitWidth 1 (Channel enable)  
 
    .equ OTG_HS_HOST_OTG_HS_HCCHAR10, OTG_HS_HOST_BASE + 0x240 @ (OTG_HS host channel-10 characteristics  register) 
        .equ OTG_HS_HOST_OTG_HS_HCCHAR10_MPSIZ_Shift, 0   @ bitWidth 11 (Maximum packet size)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR10_EPNUM_Shift, 11   @ bitWidth 4 (Endpoint number)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR10_EPDIR, 1 << 15   @ bitWidth 1 (Endpoint direction)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR10_LSDEV, 1 << 17   @ bitWidth 1 (Low-speed device)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR10_EPTYP_Shift, 18   @ bitWidth 2 (Endpoint type)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR10_MC_Shift, 20   @ bitWidth 2 (Multi Count MC / Error Count  EC)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR10_DAD_Shift, 22   @ bitWidth 7 (Device address)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR10_ODDFRM, 1 << 29   @ bitWidth 1 (Odd frame)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR10_CHDIS, 1 << 30   @ bitWidth 1 (Channel disable)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR10_CHENA, 1 << 31   @ bitWidth 1 (Channel enable)  
 
    .equ OTG_HS_HOST_OTG_HS_HCCHAR11, OTG_HS_HOST_BASE + 0x260 @ (OTG_HS host channel-11 characteristics  register) 
        .equ OTG_HS_HOST_OTG_HS_HCCHAR11_MPSIZ_Shift, 0   @ bitWidth 11 (Maximum packet size)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR11_EPNUM_Shift, 11   @ bitWidth 4 (Endpoint number)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR11_EPDIR, 1 << 15   @ bitWidth 1 (Endpoint direction)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR11_LSDEV, 1 << 17   @ bitWidth 1 (Low-speed device)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR11_EPTYP_Shift, 18   @ bitWidth 2 (Endpoint type)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR11_MC_Shift, 20   @ bitWidth 2 (Multi Count MC / Error Count  EC)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR11_DAD_Shift, 22   @ bitWidth 7 (Device address)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR11_ODDFRM, 1 << 29   @ bitWidth 1 (Odd frame)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR11_CHDIS, 1 << 30   @ bitWidth 1 (Channel disable)  
        .equ OTG_HS_HOST_OTG_HS_HCCHAR11_CHENA, 1 << 31   @ bitWidth 1 (Channel enable)  
 
    .equ OTG_HS_HOST_OTG_HS_HCSPLT0, OTG_HS_HOST_BASE + 0x104 @ (OTG_HS host channel-0 split control  register) 
        .equ OTG_HS_HOST_OTG_HS_HCSPLT0_PRTADDR_Shift, 0   @ bitWidth 7 (Port address)  
        .equ OTG_HS_HOST_OTG_HS_HCSPLT0_HUBADDR_Shift, 7   @ bitWidth 7 (Hub address)  
        .equ OTG_HS_HOST_OTG_HS_HCSPLT0_XACTPOS_Shift, 14   @ bitWidth 2 (XACTPOS)  
        .equ OTG_HS_HOST_OTG_HS_HCSPLT0_COMPLSPLT, 1 << 16   @ bitWidth 1 (Do complete split)  
        .equ OTG_HS_HOST_OTG_HS_HCSPLT0_SPLITEN, 1 << 31   @ bitWidth 1 (Split enable)  
 
    .equ OTG_HS_HOST_OTG_HS_HCSPLT1, OTG_HS_HOST_BASE + 0x124 @ (OTG_HS host channel-1 split control  register) 
        .equ OTG_HS_HOST_OTG_HS_HCSPLT1_PRTADDR_Shift, 0   @ bitWidth 7 (Port address)  
        .equ OTG_HS_HOST_OTG_HS_HCSPLT1_HUBADDR_Shift, 7   @ bitWidth 7 (Hub address)  
        .equ OTG_HS_HOST_OTG_HS_HCSPLT1_XACTPOS_Shift, 14   @ bitWidth 2 (XACTPOS)  
        .equ OTG_HS_HOST_OTG_HS_HCSPLT1_COMPLSPLT, 1 << 16   @ bitWidth 1 (Do complete split)  
        .equ OTG_HS_HOST_OTG_HS_HCSPLT1_SPLITEN, 1 << 31   @ bitWidth 1 (Split enable)  
 
    .equ OTG_HS_HOST_OTG_HS_HCSPLT2, OTG_HS_HOST_BASE + 0x144 @ (OTG_HS host channel-2 split control  register) 
        .equ OTG_HS_HOST_OTG_HS_HCSPLT2_PRTADDR_Shift, 0   @ bitWidth 7 (Port address)  
        .equ OTG_HS_HOST_OTG_HS_HCSPLT2_HUBADDR_Shift, 7   @ bitWidth 7 (Hub address)  
        .equ OTG_HS_HOST_OTG_HS_HCSPLT2_XACTPOS_Shift, 14   @ bitWidth 2 (XACTPOS)  
        .equ OTG_HS_HOST_OTG_HS_HCSPLT2_COMPLSPLT, 1 << 16   @ bitWidth 1 (Do complete split)  
        .equ OTG_HS_HOST_OTG_HS_HCSPLT2_SPLITEN, 1 << 31   @ bitWidth 1 (Split enable)  
 
    .equ OTG_HS_HOST_OTG_HS_HCSPLT3, OTG_HS_HOST_BASE + 0x164 @ (OTG_HS host channel-3 split control  register) 
        .equ OTG_HS_HOST_OTG_HS_HCSPLT3_PRTADDR_Shift, 0   @ bitWidth 7 (Port address)  
        .equ OTG_HS_HOST_OTG_HS_HCSPLT3_HUBADDR_Shift, 7   @ bitWidth 7 (Hub address)  
        .equ OTG_HS_HOST_OTG_HS_HCSPLT3_XACTPOS_Shift, 14   @ bitWidth 2 (XACTPOS)  
        .equ OTG_HS_HOST_OTG_HS_HCSPLT3_COMPLSPLT, 1 << 16   @ bitWidth 1 (Do complete split)  
        .equ OTG_HS_HOST_OTG_HS_HCSPLT3_SPLITEN, 1 << 31   @ bitWidth 1 (Split enable)  
 
    .equ OTG_HS_HOST_OTG_HS_HCSPLT4, OTG_HS_HOST_BASE + 0x184 @ (OTG_HS host channel-4 split control  register) 
        .equ OTG_HS_HOST_OTG_HS_HCSPLT4_PRTADDR_Shift, 0   @ bitWidth 7 (Port address)  
        .equ OTG_HS_HOST_OTG_HS_HCSPLT4_HUBADDR_Shift, 7   @ bitWidth 7 (Hub address)  
        .equ OTG_HS_HOST_OTG_HS_HCSPLT4_XACTPOS_Shift, 14   @ bitWidth 2 (XACTPOS)  
        .equ OTG_HS_HOST_OTG_HS_HCSPLT4_COMPLSPLT, 1 << 16   @ bitWidth 1 (Do complete split)  
        .equ OTG_HS_HOST_OTG_HS_HCSPLT4_SPLITEN, 1 << 31   @ bitWidth 1 (Split enable)  
 
    .equ OTG_HS_HOST_OTG_HS_HCSPLT5, OTG_HS_HOST_BASE + 0x1A4 @ (OTG_HS host channel-5 split control  register) 
        .equ OTG_HS_HOST_OTG_HS_HCSPLT5_PRTADDR_Shift, 0   @ bitWidth 7 (Port address)  
        .equ OTG_HS_HOST_OTG_HS_HCSPLT5_HUBADDR_Shift, 7   @ bitWidth 7 (Hub address)  
        .equ OTG_HS_HOST_OTG_HS_HCSPLT5_XACTPOS_Shift, 14   @ bitWidth 2 (XACTPOS)  
        .equ OTG_HS_HOST_OTG_HS_HCSPLT5_COMPLSPLT, 1 << 16   @ bitWidth 1 (Do complete split)  
        .equ OTG_HS_HOST_OTG_HS_HCSPLT5_SPLITEN, 1 << 31   @ bitWidth 1 (Split enable)  
 
    .equ OTG_HS_HOST_OTG_HS_HCSPLT6, OTG_HS_HOST_BASE + 0x1C4 @ (OTG_HS host channel-6 split control  register) 
        .equ OTG_HS_HOST_OTG_HS_HCSPLT6_PRTADDR_Shift, 0   @ bitWidth 7 (Port address)  
        .equ OTG_HS_HOST_OTG_HS_HCSPLT6_HUBADDR_Shift, 7   @ bitWidth 7 (Hub address)  
        .equ OTG_HS_HOST_OTG_HS_HCSPLT6_XACTPOS_Shift, 14   @ bitWidth 2 (XACTPOS)  
        .equ OTG_HS_HOST_OTG_HS_HCSPLT6_COMPLSPLT, 1 << 16   @ bitWidth 1 (Do complete split)  
        .equ OTG_HS_HOST_OTG_HS_HCSPLT6_SPLITEN, 1 << 31   @ bitWidth 1 (Split enable)  
 
    .equ OTG_HS_HOST_OTG_HS_HCSPLT7, OTG_HS_HOST_BASE + 0x1E4 @ (OTG_HS host channel-7 split control  register) 
        .equ OTG_HS_HOST_OTG_HS_HCSPLT7_PRTADDR_Shift, 0   @ bitWidth 7 (Port address)  
        .equ OTG_HS_HOST_OTG_HS_HCSPLT7_HUBADDR_Shift, 7   @ bitWidth 7 (Hub address)  
        .equ OTG_HS_HOST_OTG_HS_HCSPLT7_XACTPOS_Shift, 14   @ bitWidth 2 (XACTPOS)  
        .equ OTG_HS_HOST_OTG_HS_HCSPLT7_COMPLSPLT, 1 << 16   @ bitWidth 1 (Do complete split)  
        .equ OTG_HS_HOST_OTG_HS_HCSPLT7_SPLITEN, 1 << 31   @ bitWidth 1 (Split enable)  
 
    .equ OTG_HS_HOST_OTG_HS_HCSPLT8, OTG_HS_HOST_BASE + 0x204 @ (OTG_HS host channel-8 split control  register) 
        .equ OTG_HS_HOST_OTG_HS_HCSPLT8_PRTADDR_Shift, 0   @ bitWidth 7 (Port address)  
        .equ OTG_HS_HOST_OTG_HS_HCSPLT8_HUBADDR_Shift, 7   @ bitWidth 7 (Hub address)  
        .equ OTG_HS_HOST_OTG_HS_HCSPLT8_XACTPOS_Shift, 14   @ bitWidth 2 (XACTPOS)  
        .equ OTG_HS_HOST_OTG_HS_HCSPLT8_COMPLSPLT, 1 << 16   @ bitWidth 1 (Do complete split)  
        .equ OTG_HS_HOST_OTG_HS_HCSPLT8_SPLITEN, 1 << 31   @ bitWidth 1 (Split enable)  
 
    .equ OTG_HS_HOST_OTG_HS_HCSPLT9, OTG_HS_HOST_BASE + 0x224 @ (OTG_HS host channel-9 split control  register) 
        .equ OTG_HS_HOST_OTG_HS_HCSPLT9_PRTADDR_Shift, 0   @ bitWidth 7 (Port address)  
        .equ OTG_HS_HOST_OTG_HS_HCSPLT9_HUBADDR_Shift, 7   @ bitWidth 7 (Hub address)  
        .equ OTG_HS_HOST_OTG_HS_HCSPLT9_XACTPOS_Shift, 14   @ bitWidth 2 (XACTPOS)  
        .equ OTG_HS_HOST_OTG_HS_HCSPLT9_COMPLSPLT, 1 << 16   @ bitWidth 1 (Do complete split)  
        .equ OTG_HS_HOST_OTG_HS_HCSPLT9_SPLITEN, 1 << 31   @ bitWidth 1 (Split enable)  
 
    .equ OTG_HS_HOST_OTG_HS_HCSPLT10, OTG_HS_HOST_BASE + 0x244 @ (OTG_HS host channel-10 split control  register) 
        .equ OTG_HS_HOST_OTG_HS_HCSPLT10_PRTADDR_Shift, 0   @ bitWidth 7 (Port address)  
        .equ OTG_HS_HOST_OTG_HS_HCSPLT10_HUBADDR_Shift, 7   @ bitWidth 7 (Hub address)  
        .equ OTG_HS_HOST_OTG_HS_HCSPLT10_XACTPOS_Shift, 14   @ bitWidth 2 (XACTPOS)  
        .equ OTG_HS_HOST_OTG_HS_HCSPLT10_COMPLSPLT, 1 << 16   @ bitWidth 1 (Do complete split)  
        .equ OTG_HS_HOST_OTG_HS_HCSPLT10_SPLITEN, 1 << 31   @ bitWidth 1 (Split enable)  
 
    .equ OTG_HS_HOST_OTG_HS_HCSPLT11, OTG_HS_HOST_BASE + 0x264 @ (OTG_HS host channel-11 split control  register) 
        .equ OTG_HS_HOST_OTG_HS_HCSPLT11_PRTADDR_Shift, 0   @ bitWidth 7 (Port address)  
        .equ OTG_HS_HOST_OTG_HS_HCSPLT11_HUBADDR_Shift, 7   @ bitWidth 7 (Hub address)  
        .equ OTG_HS_HOST_OTG_HS_HCSPLT11_XACTPOS_Shift, 14   @ bitWidth 2 (XACTPOS)  
        .equ OTG_HS_HOST_OTG_HS_HCSPLT11_COMPLSPLT, 1 << 16   @ bitWidth 1 (Do complete split)  
        .equ OTG_HS_HOST_OTG_HS_HCSPLT11_SPLITEN, 1 << 31   @ bitWidth 1 (Split enable)  
 
    .equ OTG_HS_HOST_OTG_HS_HCINT0, OTG_HS_HOST_BASE + 0x108 @ (OTG_HS host channel-11 interrupt  register) 
        .equ OTG_HS_HOST_OTG_HS_HCINT0_XFRC, 1 << 0   @ bitWidth 1 (Transfer completed)  
        .equ OTG_HS_HOST_OTG_HS_HCINT0_CHH, 1 << 1   @ bitWidth 1 (Channel halted)  
        .equ OTG_HS_HOST_OTG_HS_HCINT0_AHBERR, 1 << 2   @ bitWidth 1 (AHB error)  
        .equ OTG_HS_HOST_OTG_HS_HCINT0_STALL, 1 << 3   @ bitWidth 1 (STALL response received  interrupt)  
        .equ OTG_HS_HOST_OTG_HS_HCINT0_NAK, 1 << 4   @ bitWidth 1 (NAK response received  interrupt)  
        .equ OTG_HS_HOST_OTG_HS_HCINT0_ACK, 1 << 5   @ bitWidth 1 (ACK response received/transmitted  interrupt)  
        .equ OTG_HS_HOST_OTG_HS_HCINT0_NYET, 1 << 6   @ bitWidth 1 (Response received  interrupt)  
        .equ OTG_HS_HOST_OTG_HS_HCINT0_TXERR, 1 << 7   @ bitWidth 1 (Transaction error)  
        .equ OTG_HS_HOST_OTG_HS_HCINT0_BBERR, 1 << 8   @ bitWidth 1 (Babble error)  
        .equ OTG_HS_HOST_OTG_HS_HCINT0_FRMOR, 1 << 9   @ bitWidth 1 (Frame overrun)  
        .equ OTG_HS_HOST_OTG_HS_HCINT0_DTERR, 1 << 10   @ bitWidth 1 (Data toggle error)  
 
    .equ OTG_HS_HOST_OTG_HS_HCINT1, OTG_HS_HOST_BASE + 0x128 @ (OTG_HS host channel-1 interrupt  register) 
        .equ OTG_HS_HOST_OTG_HS_HCINT1_XFRC, 1 << 0   @ bitWidth 1 (Transfer completed)  
        .equ OTG_HS_HOST_OTG_HS_HCINT1_CHH, 1 << 1   @ bitWidth 1 (Channel halted)  
        .equ OTG_HS_HOST_OTG_HS_HCINT1_AHBERR, 1 << 2   @ bitWidth 1 (AHB error)  
        .equ OTG_HS_HOST_OTG_HS_HCINT1_STALL, 1 << 3   @ bitWidth 1 (STALL response received  interrupt)  
        .equ OTG_HS_HOST_OTG_HS_HCINT1_NAK, 1 << 4   @ bitWidth 1 (NAK response received  interrupt)  
        .equ OTG_HS_HOST_OTG_HS_HCINT1_ACK, 1 << 5   @ bitWidth 1 (ACK response received/transmitted  interrupt)  
        .equ OTG_HS_HOST_OTG_HS_HCINT1_NYET, 1 << 6   @ bitWidth 1 (Response received  interrupt)  
        .equ OTG_HS_HOST_OTG_HS_HCINT1_TXERR, 1 << 7   @ bitWidth 1 (Transaction error)  
        .equ OTG_HS_HOST_OTG_HS_HCINT1_BBERR, 1 << 8   @ bitWidth 1 (Babble error)  
        .equ OTG_HS_HOST_OTG_HS_HCINT1_FRMOR, 1 << 9   @ bitWidth 1 (Frame overrun)  
        .equ OTG_HS_HOST_OTG_HS_HCINT1_DTERR, 1 << 10   @ bitWidth 1 (Data toggle error)  
 
    .equ OTG_HS_HOST_OTG_HS_HCINT2, OTG_HS_HOST_BASE + 0x148 @ (OTG_HS host channel-2 interrupt  register) 
        .equ OTG_HS_HOST_OTG_HS_HCINT2_XFRC, 1 << 0   @ bitWidth 1 (Transfer completed)  
        .equ OTG_HS_HOST_OTG_HS_HCINT2_CHH, 1 << 1   @ bitWidth 1 (Channel halted)  
        .equ OTG_HS_HOST_OTG_HS_HCINT2_AHBERR, 1 << 2   @ bitWidth 1 (AHB error)  
        .equ OTG_HS_HOST_OTG_HS_HCINT2_STALL, 1 << 3   @ bitWidth 1 (STALL response received  interrupt)  
        .equ OTG_HS_HOST_OTG_HS_HCINT2_NAK, 1 << 4   @ bitWidth 1 (NAK response received  interrupt)  
        .equ OTG_HS_HOST_OTG_HS_HCINT2_ACK, 1 << 5   @ bitWidth 1 (ACK response received/transmitted  interrupt)  
        .equ OTG_HS_HOST_OTG_HS_HCINT2_NYET, 1 << 6   @ bitWidth 1 (Response received  interrupt)  
        .equ OTG_HS_HOST_OTG_HS_HCINT2_TXERR, 1 << 7   @ bitWidth 1 (Transaction error)  
        .equ OTG_HS_HOST_OTG_HS_HCINT2_BBERR, 1 << 8   @ bitWidth 1 (Babble error)  
        .equ OTG_HS_HOST_OTG_HS_HCINT2_FRMOR, 1 << 9   @ bitWidth 1 (Frame overrun)  
        .equ OTG_HS_HOST_OTG_HS_HCINT2_DTERR, 1 << 10   @ bitWidth 1 (Data toggle error)  
 
    .equ OTG_HS_HOST_OTG_HS_HCINT3, OTG_HS_HOST_BASE + 0x168 @ (OTG_HS host channel-3 interrupt  register) 
        .equ OTG_HS_HOST_OTG_HS_HCINT3_XFRC, 1 << 0   @ bitWidth 1 (Transfer completed)  
        .equ OTG_HS_HOST_OTG_HS_HCINT3_CHH, 1 << 1   @ bitWidth 1 (Channel halted)  
        .equ OTG_HS_HOST_OTG_HS_HCINT3_AHBERR, 1 << 2   @ bitWidth 1 (AHB error)  
        .equ OTG_HS_HOST_OTG_HS_HCINT3_STALL, 1 << 3   @ bitWidth 1 (STALL response received  interrupt)  
        .equ OTG_HS_HOST_OTG_HS_HCINT3_NAK, 1 << 4   @ bitWidth 1 (NAK response received  interrupt)  
        .equ OTG_HS_HOST_OTG_HS_HCINT3_ACK, 1 << 5   @ bitWidth 1 (ACK response received/transmitted  interrupt)  
        .equ OTG_HS_HOST_OTG_HS_HCINT3_NYET, 1 << 6   @ bitWidth 1 (Response received  interrupt)  
        .equ OTG_HS_HOST_OTG_HS_HCINT3_TXERR, 1 << 7   @ bitWidth 1 (Transaction error)  
        .equ OTG_HS_HOST_OTG_HS_HCINT3_BBERR, 1 << 8   @ bitWidth 1 (Babble error)  
        .equ OTG_HS_HOST_OTG_HS_HCINT3_FRMOR, 1 << 9   @ bitWidth 1 (Frame overrun)  
        .equ OTG_HS_HOST_OTG_HS_HCINT3_DTERR, 1 << 10   @ bitWidth 1 (Data toggle error)  
 
    .equ OTG_HS_HOST_OTG_HS_HCINT4, OTG_HS_HOST_BASE + 0x188 @ (OTG_HS host channel-4 interrupt  register) 
        .equ OTG_HS_HOST_OTG_HS_HCINT4_XFRC, 1 << 0   @ bitWidth 1 (Transfer completed)  
        .equ OTG_HS_HOST_OTG_HS_HCINT4_CHH, 1 << 1   @ bitWidth 1 (Channel halted)  
        .equ OTG_HS_HOST_OTG_HS_HCINT4_AHBERR, 1 << 2   @ bitWidth 1 (AHB error)  
        .equ OTG_HS_HOST_OTG_HS_HCINT4_STALL, 1 << 3   @ bitWidth 1 (STALL response received  interrupt)  
        .equ OTG_HS_HOST_OTG_HS_HCINT4_NAK, 1 << 4   @ bitWidth 1 (NAK response received  interrupt)  
        .equ OTG_HS_HOST_OTG_HS_HCINT4_ACK, 1 << 5   @ bitWidth 1 (ACK response received/transmitted  interrupt)  
        .equ OTG_HS_HOST_OTG_HS_HCINT4_NYET, 1 << 6   @ bitWidth 1 (Response received  interrupt)  
        .equ OTG_HS_HOST_OTG_HS_HCINT4_TXERR, 1 << 7   @ bitWidth 1 (Transaction error)  
        .equ OTG_HS_HOST_OTG_HS_HCINT4_BBERR, 1 << 8   @ bitWidth 1 (Babble error)  
        .equ OTG_HS_HOST_OTG_HS_HCINT4_FRMOR, 1 << 9   @ bitWidth 1 (Frame overrun)  
        .equ OTG_HS_HOST_OTG_HS_HCINT4_DTERR, 1 << 10   @ bitWidth 1 (Data toggle error)  
 
    .equ OTG_HS_HOST_OTG_HS_HCINT5, OTG_HS_HOST_BASE + 0x1A8 @ (OTG_HS host channel-5 interrupt  register) 
        .equ OTG_HS_HOST_OTG_HS_HCINT5_XFRC, 1 << 0   @ bitWidth 1 (Transfer completed)  
        .equ OTG_HS_HOST_OTG_HS_HCINT5_CHH, 1 << 1   @ bitWidth 1 (Channel halted)  
        .equ OTG_HS_HOST_OTG_HS_HCINT5_AHBERR, 1 << 2   @ bitWidth 1 (AHB error)  
        .equ OTG_HS_HOST_OTG_HS_HCINT5_STALL, 1 << 3   @ bitWidth 1 (STALL response received  interrupt)  
        .equ OTG_HS_HOST_OTG_HS_HCINT5_NAK, 1 << 4   @ bitWidth 1 (NAK response received  interrupt)  
        .equ OTG_HS_HOST_OTG_HS_HCINT5_ACK, 1 << 5   @ bitWidth 1 (ACK response received/transmitted  interrupt)  
        .equ OTG_HS_HOST_OTG_HS_HCINT5_NYET, 1 << 6   @ bitWidth 1 (Response received  interrupt)  
        .equ OTG_HS_HOST_OTG_HS_HCINT5_TXERR, 1 << 7   @ bitWidth 1 (Transaction error)  
        .equ OTG_HS_HOST_OTG_HS_HCINT5_BBERR, 1 << 8   @ bitWidth 1 (Babble error)  
        .equ OTG_HS_HOST_OTG_HS_HCINT5_FRMOR, 1 << 9   @ bitWidth 1 (Frame overrun)  
        .equ OTG_HS_HOST_OTG_HS_HCINT5_DTERR, 1 << 10   @ bitWidth 1 (Data toggle error)  
 
    .equ OTG_HS_HOST_OTG_HS_HCINT6, OTG_HS_HOST_BASE + 0x1C8 @ (OTG_HS host channel-6 interrupt  register) 
        .equ OTG_HS_HOST_OTG_HS_HCINT6_XFRC, 1 << 0   @ bitWidth 1 (Transfer completed)  
        .equ OTG_HS_HOST_OTG_HS_HCINT6_CHH, 1 << 1   @ bitWidth 1 (Channel halted)  
        .equ OTG_HS_HOST_OTG_HS_HCINT6_AHBERR, 1 << 2   @ bitWidth 1 (AHB error)  
        .equ OTG_HS_HOST_OTG_HS_HCINT6_STALL, 1 << 3   @ bitWidth 1 (STALL response received  interrupt)  
        .equ OTG_HS_HOST_OTG_HS_HCINT6_NAK, 1 << 4   @ bitWidth 1 (NAK response received  interrupt)  
        .equ OTG_HS_HOST_OTG_HS_HCINT6_ACK, 1 << 5   @ bitWidth 1 (ACK response received/transmitted  interrupt)  
        .equ OTG_HS_HOST_OTG_HS_HCINT6_NYET, 1 << 6   @ bitWidth 1 (Response received  interrupt)  
        .equ OTG_HS_HOST_OTG_HS_HCINT6_TXERR, 1 << 7   @ bitWidth 1 (Transaction error)  
        .equ OTG_HS_HOST_OTG_HS_HCINT6_BBERR, 1 << 8   @ bitWidth 1 (Babble error)  
        .equ OTG_HS_HOST_OTG_HS_HCINT6_FRMOR, 1 << 9   @ bitWidth 1 (Frame overrun)  
        .equ OTG_HS_HOST_OTG_HS_HCINT6_DTERR, 1 << 10   @ bitWidth 1 (Data toggle error)  
 
    .equ OTG_HS_HOST_OTG_HS_HCINT7, OTG_HS_HOST_BASE + 0x1E8 @ (OTG_HS host channel-7 interrupt  register) 
        .equ OTG_HS_HOST_OTG_HS_HCINT7_XFRC, 1 << 0   @ bitWidth 1 (Transfer completed)  
        .equ OTG_HS_HOST_OTG_HS_HCINT7_CHH, 1 << 1   @ bitWidth 1 (Channel halted)  
        .equ OTG_HS_HOST_OTG_HS_HCINT7_AHBERR, 1 << 2   @ bitWidth 1 (AHB error)  
        .equ OTG_HS_HOST_OTG_HS_HCINT7_STALL, 1 << 3   @ bitWidth 1 (STALL response received  interrupt)  
        .equ OTG_HS_HOST_OTG_HS_HCINT7_NAK, 1 << 4   @ bitWidth 1 (NAK response received  interrupt)  
        .equ OTG_HS_HOST_OTG_HS_HCINT7_ACK, 1 << 5   @ bitWidth 1 (ACK response received/transmitted  interrupt)  
        .equ OTG_HS_HOST_OTG_HS_HCINT7_NYET, 1 << 6   @ bitWidth 1 (Response received  interrupt)  
        .equ OTG_HS_HOST_OTG_HS_HCINT7_TXERR, 1 << 7   @ bitWidth 1 (Transaction error)  
        .equ OTG_HS_HOST_OTG_HS_HCINT7_BBERR, 1 << 8   @ bitWidth 1 (Babble error)  
        .equ OTG_HS_HOST_OTG_HS_HCINT7_FRMOR, 1 << 9   @ bitWidth 1 (Frame overrun)  
        .equ OTG_HS_HOST_OTG_HS_HCINT7_DTERR, 1 << 10   @ bitWidth 1 (Data toggle error)  
 
    .equ OTG_HS_HOST_OTG_HS_HCINT8, OTG_HS_HOST_BASE + 0x208 @ (OTG_HS host channel-8 interrupt  register) 
        .equ OTG_HS_HOST_OTG_HS_HCINT8_XFRC, 1 << 0   @ bitWidth 1 (Transfer completed)  
        .equ OTG_HS_HOST_OTG_HS_HCINT8_CHH, 1 << 1   @ bitWidth 1 (Channel halted)  
        .equ OTG_HS_HOST_OTG_HS_HCINT8_AHBERR, 1 << 2   @ bitWidth 1 (AHB error)  
        .equ OTG_HS_HOST_OTG_HS_HCINT8_STALL, 1 << 3   @ bitWidth 1 (STALL response received  interrupt)  
        .equ OTG_HS_HOST_OTG_HS_HCINT8_NAK, 1 << 4   @ bitWidth 1 (NAK response received  interrupt)  
        .equ OTG_HS_HOST_OTG_HS_HCINT8_ACK, 1 << 5   @ bitWidth 1 (ACK response received/transmitted  interrupt)  
        .equ OTG_HS_HOST_OTG_HS_HCINT8_NYET, 1 << 6   @ bitWidth 1 (Response received  interrupt)  
        .equ OTG_HS_HOST_OTG_HS_HCINT8_TXERR, 1 << 7   @ bitWidth 1 (Transaction error)  
        .equ OTG_HS_HOST_OTG_HS_HCINT8_BBERR, 1 << 8   @ bitWidth 1 (Babble error)  
        .equ OTG_HS_HOST_OTG_HS_HCINT8_FRMOR, 1 << 9   @ bitWidth 1 (Frame overrun)  
        .equ OTG_HS_HOST_OTG_HS_HCINT8_DTERR, 1 << 10   @ bitWidth 1 (Data toggle error)  
 
    .equ OTG_HS_HOST_OTG_HS_HCINT9, OTG_HS_HOST_BASE + 0x228 @ (OTG_HS host channel-9 interrupt  register) 
        .equ OTG_HS_HOST_OTG_HS_HCINT9_XFRC, 1 << 0   @ bitWidth 1 (Transfer completed)  
        .equ OTG_HS_HOST_OTG_HS_HCINT9_CHH, 1 << 1   @ bitWidth 1 (Channel halted)  
        .equ OTG_HS_HOST_OTG_HS_HCINT9_AHBERR, 1 << 2   @ bitWidth 1 (AHB error)  
        .equ OTG_HS_HOST_OTG_HS_HCINT9_STALL, 1 << 3   @ bitWidth 1 (STALL response received  interrupt)  
        .equ OTG_HS_HOST_OTG_HS_HCINT9_NAK, 1 << 4   @ bitWidth 1 (NAK response received  interrupt)  
        .equ OTG_HS_HOST_OTG_HS_HCINT9_ACK, 1 << 5   @ bitWidth 1 (ACK response received/transmitted  interrupt)  
        .equ OTG_HS_HOST_OTG_HS_HCINT9_NYET, 1 << 6   @ bitWidth 1 (Response received  interrupt)  
        .equ OTG_HS_HOST_OTG_HS_HCINT9_TXERR, 1 << 7   @ bitWidth 1 (Transaction error)  
        .equ OTG_HS_HOST_OTG_HS_HCINT9_BBERR, 1 << 8   @ bitWidth 1 (Babble error)  
        .equ OTG_HS_HOST_OTG_HS_HCINT9_FRMOR, 1 << 9   @ bitWidth 1 (Frame overrun)  
        .equ OTG_HS_HOST_OTG_HS_HCINT9_DTERR, 1 << 10   @ bitWidth 1 (Data toggle error)  
 
    .equ OTG_HS_HOST_OTG_HS_HCINT10, OTG_HS_HOST_BASE + 0x248 @ (OTG_HS host channel-10 interrupt  register) 
        .equ OTG_HS_HOST_OTG_HS_HCINT10_XFRC, 1 << 0   @ bitWidth 1 (Transfer completed)  
        .equ OTG_HS_HOST_OTG_HS_HCINT10_CHH, 1 << 1   @ bitWidth 1 (Channel halted)  
        .equ OTG_HS_HOST_OTG_HS_HCINT10_AHBERR, 1 << 2   @ bitWidth 1 (AHB error)  
        .equ OTG_HS_HOST_OTG_HS_HCINT10_STALL, 1 << 3   @ bitWidth 1 (STALL response received  interrupt)  
        .equ OTG_HS_HOST_OTG_HS_HCINT10_NAK, 1 << 4   @ bitWidth 1 (NAK response received  interrupt)  
        .equ OTG_HS_HOST_OTG_HS_HCINT10_ACK, 1 << 5   @ bitWidth 1 (ACK response received/transmitted  interrupt)  
        .equ OTG_HS_HOST_OTG_HS_HCINT10_NYET, 1 << 6   @ bitWidth 1 (Response received  interrupt)  
        .equ OTG_HS_HOST_OTG_HS_HCINT10_TXERR, 1 << 7   @ bitWidth 1 (Transaction error)  
        .equ OTG_HS_HOST_OTG_HS_HCINT10_BBERR, 1 << 8   @ bitWidth 1 (Babble error)  
        .equ OTG_HS_HOST_OTG_HS_HCINT10_FRMOR, 1 << 9   @ bitWidth 1 (Frame overrun)  
        .equ OTG_HS_HOST_OTG_HS_HCINT10_DTERR, 1 << 10   @ bitWidth 1 (Data toggle error)  
 
    .equ OTG_HS_HOST_OTG_HS_HCINT11, OTG_HS_HOST_BASE + 0x268 @ (OTG_HS host channel-11 interrupt  register) 
        .equ OTG_HS_HOST_OTG_HS_HCINT11_XFRC, 1 << 0   @ bitWidth 1 (Transfer completed)  
        .equ OTG_HS_HOST_OTG_HS_HCINT11_CHH, 1 << 1   @ bitWidth 1 (Channel halted)  
        .equ OTG_HS_HOST_OTG_HS_HCINT11_AHBERR, 1 << 2   @ bitWidth 1 (AHB error)  
        .equ OTG_HS_HOST_OTG_HS_HCINT11_STALL, 1 << 3   @ bitWidth 1 (STALL response received  interrupt)  
        .equ OTG_HS_HOST_OTG_HS_HCINT11_NAK, 1 << 4   @ bitWidth 1 (NAK response received  interrupt)  
        .equ OTG_HS_HOST_OTG_HS_HCINT11_ACK, 1 << 5   @ bitWidth 1 (ACK response received/transmitted  interrupt)  
        .equ OTG_HS_HOST_OTG_HS_HCINT11_NYET, 1 << 6   @ bitWidth 1 (Response received  interrupt)  
        .equ OTG_HS_HOST_OTG_HS_HCINT11_TXERR, 1 << 7   @ bitWidth 1 (Transaction error)  
        .equ OTG_HS_HOST_OTG_HS_HCINT11_BBERR, 1 << 8   @ bitWidth 1 (Babble error)  
        .equ OTG_HS_HOST_OTG_HS_HCINT11_FRMOR, 1 << 9   @ bitWidth 1 (Frame overrun)  
        .equ OTG_HS_HOST_OTG_HS_HCINT11_DTERR, 1 << 10   @ bitWidth 1 (Data toggle error)  
 
    .equ OTG_HS_HOST_OTG_HS_HCINTMSK0, OTG_HS_HOST_BASE + 0x10C @ (OTG_HS host channel-11 interrupt mask  register) 
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK0_XFRCM, 1 << 0   @ bitWidth 1 (Transfer completed mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK0_CHHM, 1 << 1   @ bitWidth 1 (Channel halted mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK0_AHBERR, 1 << 2   @ bitWidth 1 (AHB error)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK0_STALLM, 1 << 3   @ bitWidth 1 (STALL response received interrupt  mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK0_NAKM, 1 << 4   @ bitWidth 1 (NAK response received interrupt  mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK0_ACKM, 1 << 5   @ bitWidth 1 (ACK response received/transmitted  interrupt mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK0_NYET, 1 << 6   @ bitWidth 1 (response received interrupt  mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK0_TXERRM, 1 << 7   @ bitWidth 1 (Transaction error mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK0_BBERRM, 1 << 8   @ bitWidth 1 (Babble error mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK0_FRMORM, 1 << 9   @ bitWidth 1 (Frame overrun mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK0_DTERRM, 1 << 10   @ bitWidth 1 (Data toggle error mask)  
 
    .equ OTG_HS_HOST_OTG_HS_HCINTMSK1, OTG_HS_HOST_BASE + 0x12C @ (OTG_HS host channel-1 interrupt mask  register) 
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK1_XFRCM, 1 << 0   @ bitWidth 1 (Transfer completed mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK1_CHHM, 1 << 1   @ bitWidth 1 (Channel halted mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK1_AHBERR, 1 << 2   @ bitWidth 1 (AHB error)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK1_STALLM, 1 << 3   @ bitWidth 1 (STALL response received interrupt  mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK1_NAKM, 1 << 4   @ bitWidth 1 (NAK response received interrupt  mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK1_ACKM, 1 << 5   @ bitWidth 1 (ACK response received/transmitted  interrupt mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK1_NYET, 1 << 6   @ bitWidth 1 (response received interrupt  mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK1_TXERRM, 1 << 7   @ bitWidth 1 (Transaction error mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK1_BBERRM, 1 << 8   @ bitWidth 1 (Babble error mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK1_FRMORM, 1 << 9   @ bitWidth 1 (Frame overrun mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK1_DTERRM, 1 << 10   @ bitWidth 1 (Data toggle error mask)  
 
    .equ OTG_HS_HOST_OTG_HS_HCINTMSK2, OTG_HS_HOST_BASE + 0x14C @ (OTG_HS host channel-2 interrupt mask  register) 
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK2_XFRCM, 1 << 0   @ bitWidth 1 (Transfer completed mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK2_CHHM, 1 << 1   @ bitWidth 1 (Channel halted mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK2_AHBERR, 1 << 2   @ bitWidth 1 (AHB error)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK2_STALLM, 1 << 3   @ bitWidth 1 (STALL response received interrupt  mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK2_NAKM, 1 << 4   @ bitWidth 1 (NAK response received interrupt  mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK2_ACKM, 1 << 5   @ bitWidth 1 (ACK response received/transmitted  interrupt mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK2_NYET, 1 << 6   @ bitWidth 1 (response received interrupt  mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK2_TXERRM, 1 << 7   @ bitWidth 1 (Transaction error mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK2_BBERRM, 1 << 8   @ bitWidth 1 (Babble error mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK2_FRMORM, 1 << 9   @ bitWidth 1 (Frame overrun mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK2_DTERRM, 1 << 10   @ bitWidth 1 (Data toggle error mask)  
 
    .equ OTG_HS_HOST_OTG_HS_HCINTMSK3, OTG_HS_HOST_BASE + 0x16C @ (OTG_HS host channel-3 interrupt mask  register) 
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK3_XFRCM, 1 << 0   @ bitWidth 1 (Transfer completed mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK3_CHHM, 1 << 1   @ bitWidth 1 (Channel halted mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK3_AHBERR, 1 << 2   @ bitWidth 1 (AHB error)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK3_STALLM, 1 << 3   @ bitWidth 1 (STALL response received interrupt  mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK3_NAKM, 1 << 4   @ bitWidth 1 (NAK response received interrupt  mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK3_ACKM, 1 << 5   @ bitWidth 1 (ACK response received/transmitted  interrupt mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK3_NYET, 1 << 6   @ bitWidth 1 (response received interrupt  mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK3_TXERRM, 1 << 7   @ bitWidth 1 (Transaction error mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK3_BBERRM, 1 << 8   @ bitWidth 1 (Babble error mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK3_FRMORM, 1 << 9   @ bitWidth 1 (Frame overrun mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK3_DTERRM, 1 << 10   @ bitWidth 1 (Data toggle error mask)  
 
    .equ OTG_HS_HOST_OTG_HS_HCINTMSK4, OTG_HS_HOST_BASE + 0x18C @ (OTG_HS host channel-4 interrupt mask  register) 
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK4_XFRCM, 1 << 0   @ bitWidth 1 (Transfer completed mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK4_CHHM, 1 << 1   @ bitWidth 1 (Channel halted mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK4_AHBERR, 1 << 2   @ bitWidth 1 (AHB error)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK4_STALLM, 1 << 3   @ bitWidth 1 (STALL response received interrupt  mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK4_NAKM, 1 << 4   @ bitWidth 1 (NAK response received interrupt  mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK4_ACKM, 1 << 5   @ bitWidth 1 (ACK response received/transmitted  interrupt mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK4_NYET, 1 << 6   @ bitWidth 1 (response received interrupt  mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK4_TXERRM, 1 << 7   @ bitWidth 1 (Transaction error mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK4_BBERRM, 1 << 8   @ bitWidth 1 (Babble error mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK4_FRMORM, 1 << 9   @ bitWidth 1 (Frame overrun mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK4_DTERRM, 1 << 10   @ bitWidth 1 (Data toggle error mask)  
 
    .equ OTG_HS_HOST_OTG_HS_HCINTMSK5, OTG_HS_HOST_BASE + 0x1AC @ (OTG_HS host channel-5 interrupt mask  register) 
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK5_XFRCM, 1 << 0   @ bitWidth 1 (Transfer completed mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK5_CHHM, 1 << 1   @ bitWidth 1 (Channel halted mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK5_AHBERR, 1 << 2   @ bitWidth 1 (AHB error)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK5_STALLM, 1 << 3   @ bitWidth 1 (STALL response received interrupt  mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK5_NAKM, 1 << 4   @ bitWidth 1 (NAK response received interrupt  mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK5_ACKM, 1 << 5   @ bitWidth 1 (ACK response received/transmitted  interrupt mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK5_NYET, 1 << 6   @ bitWidth 1 (response received interrupt  mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK5_TXERRM, 1 << 7   @ bitWidth 1 (Transaction error mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK5_BBERRM, 1 << 8   @ bitWidth 1 (Babble error mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK5_FRMORM, 1 << 9   @ bitWidth 1 (Frame overrun mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK5_DTERRM, 1 << 10   @ bitWidth 1 (Data toggle error mask)  
 
    .equ OTG_HS_HOST_OTG_HS_HCINTMSK6, OTG_HS_HOST_BASE + 0x1CC @ (OTG_HS host channel-6 interrupt mask  register) 
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK6_XFRCM, 1 << 0   @ bitWidth 1 (Transfer completed mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK6_CHHM, 1 << 1   @ bitWidth 1 (Channel halted mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK6_AHBERR, 1 << 2   @ bitWidth 1 (AHB error)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK6_STALLM, 1 << 3   @ bitWidth 1 (STALL response received interrupt  mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK6_NAKM, 1 << 4   @ bitWidth 1 (NAK response received interrupt  mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK6_ACKM, 1 << 5   @ bitWidth 1 (ACK response received/transmitted  interrupt mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK6_NYET, 1 << 6   @ bitWidth 1 (response received interrupt  mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK6_TXERRM, 1 << 7   @ bitWidth 1 (Transaction error mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK6_BBERRM, 1 << 8   @ bitWidth 1 (Babble error mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK6_FRMORM, 1 << 9   @ bitWidth 1 (Frame overrun mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK6_DTERRM, 1 << 10   @ bitWidth 1 (Data toggle error mask)  
 
    .equ OTG_HS_HOST_OTG_HS_HCINTMSK7, OTG_HS_HOST_BASE + 0x1EC @ (OTG_HS host channel-7 interrupt mask  register) 
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK7_XFRCM, 1 << 0   @ bitWidth 1 (Transfer completed mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK7_CHHM, 1 << 1   @ bitWidth 1 (Channel halted mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK7_AHBERR, 1 << 2   @ bitWidth 1 (AHB error)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK7_STALLM, 1 << 3   @ bitWidth 1 (STALL response received interrupt  mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK7_NAKM, 1 << 4   @ bitWidth 1 (NAK response received interrupt  mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK7_ACKM, 1 << 5   @ bitWidth 1 (ACK response received/transmitted  interrupt mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK7_NYET, 1 << 6   @ bitWidth 1 (response received interrupt  mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK7_TXERRM, 1 << 7   @ bitWidth 1 (Transaction error mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK7_BBERRM, 1 << 8   @ bitWidth 1 (Babble error mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK7_FRMORM, 1 << 9   @ bitWidth 1 (Frame overrun mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK7_DTERRM, 1 << 10   @ bitWidth 1 (Data toggle error mask)  
 
    .equ OTG_HS_HOST_OTG_HS_HCINTMSK8, OTG_HS_HOST_BASE + 0x20C @ (OTG_HS host channel-8 interrupt mask  register) 
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK8_XFRCM, 1 << 0   @ bitWidth 1 (Transfer completed mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK8_CHHM, 1 << 1   @ bitWidth 1 (Channel halted mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK8_AHBERR, 1 << 2   @ bitWidth 1 (AHB error)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK8_STALLM, 1 << 3   @ bitWidth 1 (STALL response received interrupt  mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK8_NAKM, 1 << 4   @ bitWidth 1 (NAK response received interrupt  mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK8_ACKM, 1 << 5   @ bitWidth 1 (ACK response received/transmitted  interrupt mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK8_NYET, 1 << 6   @ bitWidth 1 (response received interrupt  mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK8_TXERRM, 1 << 7   @ bitWidth 1 (Transaction error mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK8_BBERRM, 1 << 8   @ bitWidth 1 (Babble error mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK8_FRMORM, 1 << 9   @ bitWidth 1 (Frame overrun mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK8_DTERRM, 1 << 10   @ bitWidth 1 (Data toggle error mask)  
 
    .equ OTG_HS_HOST_OTG_HS_HCINTMSK9, OTG_HS_HOST_BASE + 0x22C @ (OTG_HS host channel-9 interrupt mask  register) 
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK9_XFRCM, 1 << 0   @ bitWidth 1 (Transfer completed mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK9_CHHM, 1 << 1   @ bitWidth 1 (Channel halted mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK9_AHBERR, 1 << 2   @ bitWidth 1 (AHB error)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK9_STALLM, 1 << 3   @ bitWidth 1 (STALL response received interrupt  mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK9_NAKM, 1 << 4   @ bitWidth 1 (NAK response received interrupt  mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK9_ACKM, 1 << 5   @ bitWidth 1 (ACK response received/transmitted  interrupt mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK9_NYET, 1 << 6   @ bitWidth 1 (response received interrupt  mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK9_TXERRM, 1 << 7   @ bitWidth 1 (Transaction error mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK9_BBERRM, 1 << 8   @ bitWidth 1 (Babble error mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK9_FRMORM, 1 << 9   @ bitWidth 1 (Frame overrun mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK9_DTERRM, 1 << 10   @ bitWidth 1 (Data toggle error mask)  
 
    .equ OTG_HS_HOST_OTG_HS_HCINTMSK10, OTG_HS_HOST_BASE + 0x24C @ (OTG_HS host channel-10 interrupt mask  register) 
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK10_XFRCM, 1 << 0   @ bitWidth 1 (Transfer completed mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK10_CHHM, 1 << 1   @ bitWidth 1 (Channel halted mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK10_AHBERR, 1 << 2   @ bitWidth 1 (AHB error)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK10_STALLM, 1 << 3   @ bitWidth 1 (STALL response received interrupt  mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK10_NAKM, 1 << 4   @ bitWidth 1 (NAK response received interrupt  mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK10_ACKM, 1 << 5   @ bitWidth 1 (ACK response received/transmitted  interrupt mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK10_NYET, 1 << 6   @ bitWidth 1 (response received interrupt  mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK10_TXERRM, 1 << 7   @ bitWidth 1 (Transaction error mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK10_BBERRM, 1 << 8   @ bitWidth 1 (Babble error mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK10_FRMORM, 1 << 9   @ bitWidth 1 (Frame overrun mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK10_DTERRM, 1 << 10   @ bitWidth 1 (Data toggle error mask)  
 
    .equ OTG_HS_HOST_OTG_HS_HCINTMSK11, OTG_HS_HOST_BASE + 0x26C @ (OTG_HS host channel-11 interrupt mask  register) 
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK11_XFRCM, 1 << 0   @ bitWidth 1 (Transfer completed mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK11_CHHM, 1 << 1   @ bitWidth 1 (Channel halted mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK11_AHBERR, 1 << 2   @ bitWidth 1 (AHB error)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK11_STALLM, 1 << 3   @ bitWidth 1 (STALL response received interrupt  mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK11_NAKM, 1 << 4   @ bitWidth 1 (NAK response received interrupt  mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK11_ACKM, 1 << 5   @ bitWidth 1 (ACK response received/transmitted  interrupt mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK11_NYET, 1 << 6   @ bitWidth 1 (response received interrupt  mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK11_TXERRM, 1 << 7   @ bitWidth 1 (Transaction error mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK11_BBERRM, 1 << 8   @ bitWidth 1 (Babble error mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK11_FRMORM, 1 << 9   @ bitWidth 1 (Frame overrun mask)  
        .equ OTG_HS_HOST_OTG_HS_HCINTMSK11_DTERRM, 1 << 10   @ bitWidth 1 (Data toggle error mask)  
 
    .equ OTG_HS_HOST_OTG_HS_HCTSIZ0, OTG_HS_HOST_BASE + 0x110 @ (OTG_HS host channel-11 transfer size  register) 
        .equ OTG_HS_HOST_OTG_HS_HCTSIZ0_XFRSIZ_Shift, 0   @ bitWidth 19 (Transfer size)  
        .equ OTG_HS_HOST_OTG_HS_HCTSIZ0_PKTCNT_Shift, 19   @ bitWidth 10 (Packet count)  
        .equ OTG_HS_HOST_OTG_HS_HCTSIZ0_DPID_Shift, 29   @ bitWidth 2 (Data PID)  
 
    .equ OTG_HS_HOST_OTG_HS_HCTSIZ1, OTG_HS_HOST_BASE + 0x130 @ (OTG_HS host channel-1 transfer size  register) 
        .equ OTG_HS_HOST_OTG_HS_HCTSIZ1_XFRSIZ_Shift, 0   @ bitWidth 19 (Transfer size)  
        .equ OTG_HS_HOST_OTG_HS_HCTSIZ1_PKTCNT_Shift, 19   @ bitWidth 10 (Packet count)  
        .equ OTG_HS_HOST_OTG_HS_HCTSIZ1_DPID_Shift, 29   @ bitWidth 2 (Data PID)  
 
    .equ OTG_HS_HOST_OTG_HS_HCTSIZ2, OTG_HS_HOST_BASE + 0x150 @ (OTG_HS host channel-2 transfer size  register) 
        .equ OTG_HS_HOST_OTG_HS_HCTSIZ2_XFRSIZ_Shift, 0   @ bitWidth 19 (Transfer size)  
        .equ OTG_HS_HOST_OTG_HS_HCTSIZ2_PKTCNT_Shift, 19   @ bitWidth 10 (Packet count)  
        .equ OTG_HS_HOST_OTG_HS_HCTSIZ2_DPID_Shift, 29   @ bitWidth 2 (Data PID)  
 
    .equ OTG_HS_HOST_OTG_HS_HCTSIZ3, OTG_HS_HOST_BASE + 0x170 @ (OTG_HS host channel-3 transfer size  register) 
        .equ OTG_HS_HOST_OTG_HS_HCTSIZ3_XFRSIZ_Shift, 0   @ bitWidth 19 (Transfer size)  
        .equ OTG_HS_HOST_OTG_HS_HCTSIZ3_PKTCNT_Shift, 19   @ bitWidth 10 (Packet count)  
        .equ OTG_HS_HOST_OTG_HS_HCTSIZ3_DPID_Shift, 29   @ bitWidth 2 (Data PID)  
 
    .equ OTG_HS_HOST_OTG_HS_HCTSIZ4, OTG_HS_HOST_BASE + 0x190 @ (OTG_HS host channel-4 transfer size  register) 
        .equ OTG_HS_HOST_OTG_HS_HCTSIZ4_XFRSIZ_Shift, 0   @ bitWidth 19 (Transfer size)  
        .equ OTG_HS_HOST_OTG_HS_HCTSIZ4_PKTCNT_Shift, 19   @ bitWidth 10 (Packet count)  
        .equ OTG_HS_HOST_OTG_HS_HCTSIZ4_DPID_Shift, 29   @ bitWidth 2 (Data PID)  
 
    .equ OTG_HS_HOST_OTG_HS_HCTSIZ5, OTG_HS_HOST_BASE + 0x1B0 @ (OTG_HS host channel-5 transfer size  register) 
        .equ OTG_HS_HOST_OTG_HS_HCTSIZ5_XFRSIZ_Shift, 0   @ bitWidth 19 (Transfer size)  
        .equ OTG_HS_HOST_OTG_HS_HCTSIZ5_PKTCNT_Shift, 19   @ bitWidth 10 (Packet count)  
        .equ OTG_HS_HOST_OTG_HS_HCTSIZ5_DPID_Shift, 29   @ bitWidth 2 (Data PID)  
 
    .equ OTG_HS_HOST_OTG_HS_HCTSIZ6, OTG_HS_HOST_BASE + 0x1D0 @ (OTG_HS host channel-6 transfer size  register) 
        .equ OTG_HS_HOST_OTG_HS_HCTSIZ6_XFRSIZ_Shift, 0   @ bitWidth 19 (Transfer size)  
        .equ OTG_HS_HOST_OTG_HS_HCTSIZ6_PKTCNT_Shift, 19   @ bitWidth 10 (Packet count)  
        .equ OTG_HS_HOST_OTG_HS_HCTSIZ6_DPID_Shift, 29   @ bitWidth 2 (Data PID)  
 
    .equ OTG_HS_HOST_OTG_HS_HCTSIZ7, OTG_HS_HOST_BASE + 0x1F0 @ (OTG_HS host channel-7 transfer size  register) 
        .equ OTG_HS_HOST_OTG_HS_HCTSIZ7_XFRSIZ_Shift, 0   @ bitWidth 19 (Transfer size)  
        .equ OTG_HS_HOST_OTG_HS_HCTSIZ7_PKTCNT_Shift, 19   @ bitWidth 10 (Packet count)  
        .equ OTG_HS_HOST_OTG_HS_HCTSIZ7_DPID_Shift, 29   @ bitWidth 2 (Data PID)  
 
    .equ OTG_HS_HOST_OTG_HS_HCTSIZ8, OTG_HS_HOST_BASE + 0x210 @ (OTG_HS host channel-8 transfer size  register) 
        .equ OTG_HS_HOST_OTG_HS_HCTSIZ8_XFRSIZ_Shift, 0   @ bitWidth 19 (Transfer size)  
        .equ OTG_HS_HOST_OTG_HS_HCTSIZ8_PKTCNT_Shift, 19   @ bitWidth 10 (Packet count)  
        .equ OTG_HS_HOST_OTG_HS_HCTSIZ8_DPID_Shift, 29   @ bitWidth 2 (Data PID)  
 
    .equ OTG_HS_HOST_OTG_HS_HCTSIZ9, OTG_HS_HOST_BASE + 0x230 @ (OTG_HS host channel-9 transfer size  register) 
        .equ OTG_HS_HOST_OTG_HS_HCTSIZ9_XFRSIZ_Shift, 0   @ bitWidth 19 (Transfer size)  
        .equ OTG_HS_HOST_OTG_HS_HCTSIZ9_PKTCNT_Shift, 19   @ bitWidth 10 (Packet count)  
        .equ OTG_HS_HOST_OTG_HS_HCTSIZ9_DPID_Shift, 29   @ bitWidth 2 (Data PID)  
 
    .equ OTG_HS_HOST_OTG_HS_HCTSIZ10, OTG_HS_HOST_BASE + 0x250 @ (OTG_HS host channel-10 transfer size  register) 
        .equ OTG_HS_HOST_OTG_HS_HCTSIZ10_XFRSIZ_Shift, 0   @ bitWidth 19 (Transfer size)  
        .equ OTG_HS_HOST_OTG_HS_HCTSIZ10_PKTCNT_Shift, 19   @ bitWidth 10 (Packet count)  
        .equ OTG_HS_HOST_OTG_HS_HCTSIZ10_DPID_Shift, 29   @ bitWidth 2 (Data PID)  
 
    .equ OTG_HS_HOST_OTG_HS_HCTSIZ11, OTG_HS_HOST_BASE + 0x270 @ (OTG_HS host channel-11 transfer size  register) 
        .equ OTG_HS_HOST_OTG_HS_HCTSIZ11_XFRSIZ_Shift, 0   @ bitWidth 19 (Transfer size)  
        .equ OTG_HS_HOST_OTG_HS_HCTSIZ11_PKTCNT_Shift, 19   @ bitWidth 10 (Packet count)  
        .equ OTG_HS_HOST_OTG_HS_HCTSIZ11_DPID_Shift, 29   @ bitWidth 2 (Data PID)  
 
    .equ OTG_HS_HOST_OTG_HS_HCDMA0, OTG_HS_HOST_BASE + 0x114 @ (OTG_HS host channel-0 DMA address  register) 
        .equ OTG_HS_HOST_OTG_HS_HCDMA0_DMAADDR_Shift, 0   @ bitWidth 32 (DMA address)  
 
    .equ OTG_HS_HOST_OTG_HS_HCDMA1, OTG_HS_HOST_BASE + 0x134 @ (OTG_HS host channel-1 DMA address  register) 
        .equ OTG_HS_HOST_OTG_HS_HCDMA1_DMAADDR_Shift, 0   @ bitWidth 32 (DMA address)  
 
    .equ OTG_HS_HOST_OTG_HS_HCDMA2, OTG_HS_HOST_BASE + 0x154 @ (OTG_HS host channel-2 DMA address  register) 
        .equ OTG_HS_HOST_OTG_HS_HCDMA2_DMAADDR_Shift, 0   @ bitWidth 32 (DMA address)  
 
    .equ OTG_HS_HOST_OTG_HS_HCDMA3, OTG_HS_HOST_BASE + 0x174 @ (OTG_HS host channel-3 DMA address  register) 
        .equ OTG_HS_HOST_OTG_HS_HCDMA3_DMAADDR_Shift, 0   @ bitWidth 32 (DMA address)  
 
    .equ OTG_HS_HOST_OTG_HS_HCDMA4, OTG_HS_HOST_BASE + 0x194 @ (OTG_HS host channel-4 DMA address  register) 
        .equ OTG_HS_HOST_OTG_HS_HCDMA4_DMAADDR_Shift, 0   @ bitWidth 32 (DMA address)  
 
    .equ OTG_HS_HOST_OTG_HS_HCDMA5, OTG_HS_HOST_BASE + 0x1B4 @ (OTG_HS host channel-5 DMA address  register) 
        .equ OTG_HS_HOST_OTG_HS_HCDMA5_DMAADDR_Shift, 0   @ bitWidth 32 (DMA address)  
 
    .equ OTG_HS_HOST_OTG_HS_HCDMA6, OTG_HS_HOST_BASE + 0x1D4 @ (OTG_HS host channel-6 DMA address  register) 
        .equ OTG_HS_HOST_OTG_HS_HCDMA6_DMAADDR_Shift, 0   @ bitWidth 32 (DMA address)  
 
    .equ OTG_HS_HOST_OTG_HS_HCDMA7, OTG_HS_HOST_BASE + 0x1F4 @ (OTG_HS host channel-7 DMA address  register) 
        .equ OTG_HS_HOST_OTG_HS_HCDMA7_DMAADDR_Shift, 0   @ bitWidth 32 (DMA address)  
 
    .equ OTG_HS_HOST_OTG_HS_HCDMA8, OTG_HS_HOST_BASE + 0x214 @ (OTG_HS host channel-8 DMA address  register) 
        .equ OTG_HS_HOST_OTG_HS_HCDMA8_DMAADDR_Shift, 0   @ bitWidth 32 (DMA address)  
 
    .equ OTG_HS_HOST_OTG_HS_HCDMA9, OTG_HS_HOST_BASE + 0x234 @ (OTG_HS host channel-9 DMA address  register) 
        .equ OTG_HS_HOST_OTG_HS_HCDMA9_DMAADDR_Shift, 0   @ bitWidth 32 (DMA address)  
 
    .equ OTG_HS_HOST_OTG_HS_HCDMA10, OTG_HS_HOST_BASE + 0x254 @ (OTG_HS host channel-10 DMA address  register) 
        .equ OTG_HS_HOST_OTG_HS_HCDMA10_DMAADDR_Shift, 0   @ bitWidth 32 (DMA address)  
 
    .equ OTG_HS_HOST_OTG_HS_HCDMA11, OTG_HS_HOST_BASE + 0x274 @ (OTG_HS host channel-11 DMA address  register) 
        .equ OTG_HS_HOST_OTG_HS_HCDMA11_DMAADDR_Shift, 0   @ bitWidth 32 (DMA address)  
 

@=========================== OTG_HS_DEVICE ===========================@
.equ OTG_HS_DEVICE_BASE, 0x40040800 @ (USB on the go high speed) 
    .equ OTG_HS_DEVICE_OTG_HS_DCFG, OTG_HS_DEVICE_BASE + 0x0 @ (OTG_HS device configuration  register) 
        .equ OTG_HS_DEVICE_OTG_HS_DCFG_DSPD_Shift, 0   @ bitWidth 2 (Device speed)  
        .equ OTG_HS_DEVICE_OTG_HS_DCFG_NZLSOHSK, 1 << 2   @ bitWidth 1 (Nonzero-length status OUT  handshake)  
        .equ OTG_HS_DEVICE_OTG_HS_DCFG_DAD_Shift, 4   @ bitWidth 7 (Device address)  
        .equ OTG_HS_DEVICE_OTG_HS_DCFG_PFIVL_Shift, 11   @ bitWidth 2 (Periodic microframe  interval)  
        .equ OTG_HS_DEVICE_OTG_HS_DCFG_PERSCHIVL_Shift, 24   @ bitWidth 2 (Periodic scheduling  interval)  
 
    .equ OTG_HS_DEVICE_OTG_HS_DCTL, OTG_HS_DEVICE_BASE + 0x4 @ (OTG_HS device control register) 
        .equ OTG_HS_DEVICE_OTG_HS_DCTL_RWUSIG, 1 << 0   @ bitWidth 1 (Remote wakeup signaling)  
        .equ OTG_HS_DEVICE_OTG_HS_DCTL_SDIS, 1 << 1   @ bitWidth 1 (Soft disconnect)  
        .equ OTG_HS_DEVICE_OTG_HS_DCTL_GINSTS, 1 << 2   @ bitWidth 1 (Global IN NAK status)  
        .equ OTG_HS_DEVICE_OTG_HS_DCTL_GONSTS, 1 << 3   @ bitWidth 1 (Global OUT NAK status)  
        .equ OTG_HS_DEVICE_OTG_HS_DCTL_TCTL_Shift, 4   @ bitWidth 3 (Test control)  
        .equ OTG_HS_DEVICE_OTG_HS_DCTL_SGINAK, 1 << 7   @ bitWidth 1 (Set global IN NAK)  
        .equ OTG_HS_DEVICE_OTG_HS_DCTL_CGINAK, 1 << 8   @ bitWidth 1 (Clear global IN NAK)  
        .equ OTG_HS_DEVICE_OTG_HS_DCTL_SGONAK, 1 << 9   @ bitWidth 1 (Set global OUT NAK)  
        .equ OTG_HS_DEVICE_OTG_HS_DCTL_CGONAK, 1 << 10   @ bitWidth 1 (Clear global OUT NAK)  
        .equ OTG_HS_DEVICE_OTG_HS_DCTL_POPRGDNE, 1 << 11   @ bitWidth 1 (Power-on programming done)  
 
    .equ OTG_HS_DEVICE_OTG_HS_DSTS, OTG_HS_DEVICE_BASE + 0x8 @ (OTG_HS device status register) 
        .equ OTG_HS_DEVICE_OTG_HS_DSTS_SUSPSTS, 1 << 0   @ bitWidth 1 (Suspend status)  
        .equ OTG_HS_DEVICE_OTG_HS_DSTS_ENUMSPD_Shift, 1   @ bitWidth 2 (Enumerated speed)  
        .equ OTG_HS_DEVICE_OTG_HS_DSTS_EERR, 1 << 3   @ bitWidth 1 (Erratic error)  
        .equ OTG_HS_DEVICE_OTG_HS_DSTS_FNSOF_Shift, 8   @ bitWidth 14 (Frame number of the received  SOF)  
 
    .equ OTG_HS_DEVICE_OTG_HS_DIEPMSK, OTG_HS_DEVICE_BASE + 0x10 @ (OTG_HS device IN endpoint common interrupt  mask register) 
        .equ OTG_HS_DEVICE_OTG_HS_DIEPMSK_XFRCM, 1 << 0   @ bitWidth 1 (Transfer completed interrupt  mask)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPMSK_EPDM, 1 << 1   @ bitWidth 1 (Endpoint disabled interrupt  mask)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPMSK_TOM, 1 << 3   @ bitWidth 1 (Timeout condition mask nonisochronous  endpoints)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPMSK_ITTXFEMSK, 1 << 4   @ bitWidth 1 (IN token received when TxFIFO empty  mask)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPMSK_INEPNMM, 1 << 5   @ bitWidth 1 (IN token received with EP mismatch  mask)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPMSK_INEPNEM, 1 << 6   @ bitWidth 1 (IN endpoint NAK effective  mask)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPMSK_TXFURM, 1 << 8   @ bitWidth 1 (FIFO underrun mask)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPMSK_BIM, 1 << 9   @ bitWidth 1 (BNA interrupt mask)  
 
    .equ OTG_HS_DEVICE_OTG_HS_DOEPMSK, OTG_HS_DEVICE_BASE + 0x14 @ (OTG_HS device OUT endpoint common interrupt  mask register) 
        .equ OTG_HS_DEVICE_OTG_HS_DOEPMSK_XFRCM, 1 << 0   @ bitWidth 1 (Transfer completed interrupt  mask)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPMSK_EPDM, 1 << 1   @ bitWidth 1 (Endpoint disabled interrupt  mask)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPMSK_STUPM, 1 << 3   @ bitWidth 1 (SETUP phase done mask)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPMSK_OTEPDM, 1 << 4   @ bitWidth 1 (OUT token received when endpoint  disabled mask)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPMSK_B2BSTUP, 1 << 6   @ bitWidth 1 (Back-to-back SETUP packets received  mask)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPMSK_OPEM, 1 << 8   @ bitWidth 1 (OUT packet error mask)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPMSK_BOIM, 1 << 9   @ bitWidth 1 (BNA interrupt mask)  
 
    .equ OTG_HS_DEVICE_OTG_HS_DAINT, OTG_HS_DEVICE_BASE + 0x18 @ (OTG_HS device all endpoints interrupt  register) 
        .equ OTG_HS_DEVICE_OTG_HS_DAINT_IEPINT_Shift, 0   @ bitWidth 16 (IN endpoint interrupt bits)  
        .equ OTG_HS_DEVICE_OTG_HS_DAINT_OEPINT_Shift, 16   @ bitWidth 16 (OUT endpoint interrupt  bits)  
 
    .equ OTG_HS_DEVICE_OTG_HS_DAINTMSK, OTG_HS_DEVICE_BASE + 0x1C @ (OTG_HS all endpoints interrupt mask  register) 
        .equ OTG_HS_DEVICE_OTG_HS_DAINTMSK_IEPM_Shift, 0   @ bitWidth 16 (IN EP interrupt mask bits)  
        .equ OTG_HS_DEVICE_OTG_HS_DAINTMSK_OEPM_Shift, 16   @ bitWidth 16 (OUT EP interrupt mask bits)  
 
    .equ OTG_HS_DEVICE_OTG_HS_DVBUSDIS, OTG_HS_DEVICE_BASE + 0x28 @ (OTG_HS device VBUS discharge time  register) 
        .equ OTG_HS_DEVICE_OTG_HS_DVBUSDIS_VBUSDT_Shift, 0   @ bitWidth 16 (Device VBUS discharge time)  
 
    .equ OTG_HS_DEVICE_OTG_HS_DVBUSPULSE, OTG_HS_DEVICE_BASE + 0x2C @ (OTG_HS device VBUS pulsing time  register) 
        .equ OTG_HS_DEVICE_OTG_HS_DVBUSPULSE_DVBUSP_Shift, 0   @ bitWidth 12 (Device VBUS pulsing time)  
 
    .equ OTG_HS_DEVICE_OTG_HS_DTHRCTL, OTG_HS_DEVICE_BASE + 0x30 @ (OTG_HS Device threshold control  register) 
        .equ OTG_HS_DEVICE_OTG_HS_DTHRCTL_NONISOTHREN, 1 << 0   @ bitWidth 1 (Nonisochronous IN endpoints threshold  enable)  
        .equ OTG_HS_DEVICE_OTG_HS_DTHRCTL_ISOTHREN, 1 << 1   @ bitWidth 1 (ISO IN endpoint threshold  enable)  
        .equ OTG_HS_DEVICE_OTG_HS_DTHRCTL_TXTHRLEN_Shift, 2   @ bitWidth 9 (Transmit threshold length)  
        .equ OTG_HS_DEVICE_OTG_HS_DTHRCTL_RXTHREN, 1 << 16   @ bitWidth 1 (Receive threshold enable)  
        .equ OTG_HS_DEVICE_OTG_HS_DTHRCTL_RXTHRLEN_Shift, 17   @ bitWidth 9 (Receive threshold length)  
        .equ OTG_HS_DEVICE_OTG_HS_DTHRCTL_ARPEN, 1 << 27   @ bitWidth 1 (Arbiter parking enable)  
 
    .equ OTG_HS_DEVICE_OTG_HS_DIEPEMPMSK, OTG_HS_DEVICE_BASE + 0x34 @ (OTG_HS device IN endpoint FIFO empty  interrupt mask register) 
        .equ OTG_HS_DEVICE_OTG_HS_DIEPEMPMSK_INEPTXFEM_Shift, 0   @ bitWidth 16 (IN EP Tx FIFO empty interrupt mask  bits)  
 
    .equ OTG_HS_DEVICE_OTG_HS_DEACHINT, OTG_HS_DEVICE_BASE + 0x38 @ (OTG_HS device each endpoint interrupt  register) 
        .equ OTG_HS_DEVICE_OTG_HS_DEACHINT_IEP1INT, 1 << 1   @ bitWidth 1 (IN endpoint 1interrupt bit)  
        .equ OTG_HS_DEVICE_OTG_HS_DEACHINT_OEP1INT, 1 << 17   @ bitWidth 1 (OUT endpoint 1 interrupt  bit)  
 
    .equ OTG_HS_DEVICE_OTG_HS_DEACHINTMSK, OTG_HS_DEVICE_BASE + 0x3C @ (OTG_HS device each endpoint interrupt  register mask) 
        .equ OTG_HS_DEVICE_OTG_HS_DEACHINTMSK_IEP1INTM, 1 << 1   @ bitWidth 1 (IN Endpoint 1 interrupt mask  bit)  
        .equ OTG_HS_DEVICE_OTG_HS_DEACHINTMSK_OEP1INTM, 1 << 17   @ bitWidth 1 (OUT Endpoint 1 interrupt mask  bit)  
 
    .equ OTG_HS_DEVICE_OTG_HS_DIEPEACHMSK1, OTG_HS_DEVICE_BASE + 0x40 @ (OTG_HS device each in endpoint-1 interrupt  register) 
        .equ OTG_HS_DEVICE_OTG_HS_DIEPEACHMSK1_XFRCM, 1 << 0   @ bitWidth 1 (Transfer completed interrupt  mask)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPEACHMSK1_EPDM, 1 << 1   @ bitWidth 1 (Endpoint disabled interrupt  mask)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPEACHMSK1_TOM, 1 << 3   @ bitWidth 1 (Timeout condition mask nonisochronous  endpoints)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPEACHMSK1_ITTXFEMSK, 1 << 4   @ bitWidth 1 (IN token received when TxFIFO empty  mask)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPEACHMSK1_INEPNMM, 1 << 5   @ bitWidth 1 (IN token received with EP mismatch  mask)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPEACHMSK1_INEPNEM, 1 << 6   @ bitWidth 1 (IN endpoint NAK effective  mask)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPEACHMSK1_TXFURM, 1 << 8   @ bitWidth 1 (FIFO underrun mask)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPEACHMSK1_BIM, 1 << 9   @ bitWidth 1 (BNA interrupt mask)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPEACHMSK1_NAKM, 1 << 13   @ bitWidth 1 (NAK interrupt mask)  
 
    .equ OTG_HS_DEVICE_OTG_HS_DOEPEACHMSK1, OTG_HS_DEVICE_BASE + 0x80 @ (OTG_HS device each OUT endpoint-1 interrupt  register) 
        .equ OTG_HS_DEVICE_OTG_HS_DOEPEACHMSK1_XFRCM, 1 << 0   @ bitWidth 1 (Transfer completed interrupt  mask)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPEACHMSK1_EPDM, 1 << 1   @ bitWidth 1 (Endpoint disabled interrupt  mask)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPEACHMSK1_TOM, 1 << 3   @ bitWidth 1 (Timeout condition mask)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPEACHMSK1_ITTXFEMSK, 1 << 4   @ bitWidth 1 (IN token received when TxFIFO empty  mask)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPEACHMSK1_INEPNMM, 1 << 5   @ bitWidth 1 (IN token received with EP mismatch  mask)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPEACHMSK1_INEPNEM, 1 << 6   @ bitWidth 1 (IN endpoint NAK effective  mask)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPEACHMSK1_TXFURM, 1 << 8   @ bitWidth 1 (OUT packet error mask)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPEACHMSK1_BIM, 1 << 9   @ bitWidth 1 (BNA interrupt mask)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPEACHMSK1_BERRM, 1 << 12   @ bitWidth 1 (Bubble error interrupt  mask)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPEACHMSK1_NAKM, 1 << 13   @ bitWidth 1 (NAK interrupt mask)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPEACHMSK1_NYETM, 1 << 14   @ bitWidth 1 (NYET interrupt mask)  
 
    .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL0, OTG_HS_DEVICE_BASE + 0x100 @ (OTG device endpoint-0 control  register) 
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL0_MPSIZ_Shift, 0   @ bitWidth 11 (Maximum packet size)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL0_USBAEP, 1 << 15   @ bitWidth 1 (USB active endpoint)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL0_EONUM_DPID, 1 << 16   @ bitWidth 1 (Even/odd frame)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL0_NAKSTS, 1 << 17   @ bitWidth 1 (NAK status)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL0_EPTYP_Shift, 18   @ bitWidth 2 (Endpoint type)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL0_Stall, 1 << 21   @ bitWidth 1 (STALL handshake)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL0_TXFNUM_Shift, 22   @ bitWidth 4 (TxFIFO number)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL0_CNAK, 1 << 26   @ bitWidth 1 (Clear NAK)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL0_SNAK, 1 << 27   @ bitWidth 1 (Set NAK)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL0_SD0PID_SEVNFRM, 1 << 28   @ bitWidth 1 (Set DATA0 PID)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL0_SODDFRM, 1 << 29   @ bitWidth 1 (Set odd frame)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL0_EPDIS, 1 << 30   @ bitWidth 1 (Endpoint disable)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL0_EPENA, 1 << 31   @ bitWidth 1 (Endpoint enable)  
 
    .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL1, OTG_HS_DEVICE_BASE + 0x120 @ (OTG device endpoint-1 control  register) 
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL1_MPSIZ_Shift, 0   @ bitWidth 11 (Maximum packet size)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL1_USBAEP, 1 << 15   @ bitWidth 1 (USB active endpoint)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL1_EONUM_DPID, 1 << 16   @ bitWidth 1 (Even/odd frame)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL1_NAKSTS, 1 << 17   @ bitWidth 1 (NAK status)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL1_EPTYP_Shift, 18   @ bitWidth 2 (Endpoint type)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL1_Stall, 1 << 21   @ bitWidth 1 (STALL handshake)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL1_TXFNUM_Shift, 22   @ bitWidth 4 (TxFIFO number)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL1_CNAK, 1 << 26   @ bitWidth 1 (Clear NAK)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL1_SNAK, 1 << 27   @ bitWidth 1 (Set NAK)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL1_SD0PID_SEVNFRM, 1 << 28   @ bitWidth 1 (Set DATA0 PID)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL1_SODDFRM, 1 << 29   @ bitWidth 1 (Set odd frame)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL1_EPDIS, 1 << 30   @ bitWidth 1 (Endpoint disable)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL1_EPENA, 1 << 31   @ bitWidth 1 (Endpoint enable)  
 
    .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL2, OTG_HS_DEVICE_BASE + 0x140 @ (OTG device endpoint-2 control  register) 
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL2_MPSIZ_Shift, 0   @ bitWidth 11 (Maximum packet size)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL2_USBAEP, 1 << 15   @ bitWidth 1 (USB active endpoint)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL2_EONUM_DPID, 1 << 16   @ bitWidth 1 (Even/odd frame)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL2_NAKSTS, 1 << 17   @ bitWidth 1 (NAK status)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL2_EPTYP_Shift, 18   @ bitWidth 2 (Endpoint type)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL2_Stall, 1 << 21   @ bitWidth 1 (STALL handshake)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL2_TXFNUM_Shift, 22   @ bitWidth 4 (TxFIFO number)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL2_CNAK, 1 << 26   @ bitWidth 1 (Clear NAK)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL2_SNAK, 1 << 27   @ bitWidth 1 (Set NAK)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL2_SD0PID_SEVNFRM, 1 << 28   @ bitWidth 1 (Set DATA0 PID)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL2_SODDFRM, 1 << 29   @ bitWidth 1 (Set odd frame)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL2_EPDIS, 1 << 30   @ bitWidth 1 (Endpoint disable)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL2_EPENA, 1 << 31   @ bitWidth 1 (Endpoint enable)  
 
    .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL3, OTG_HS_DEVICE_BASE + 0x160 @ (OTG device endpoint-3 control  register) 
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL3_MPSIZ_Shift, 0   @ bitWidth 11 (Maximum packet size)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL3_USBAEP, 1 << 15   @ bitWidth 1 (USB active endpoint)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL3_EONUM_DPID, 1 << 16   @ bitWidth 1 (Even/odd frame)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL3_NAKSTS, 1 << 17   @ bitWidth 1 (NAK status)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL3_EPTYP_Shift, 18   @ bitWidth 2 (Endpoint type)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL3_Stall, 1 << 21   @ bitWidth 1 (STALL handshake)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL3_TXFNUM_Shift, 22   @ bitWidth 4 (TxFIFO number)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL3_CNAK, 1 << 26   @ bitWidth 1 (Clear NAK)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL3_SNAK, 1 << 27   @ bitWidth 1 (Set NAK)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL3_SD0PID_SEVNFRM, 1 << 28   @ bitWidth 1 (Set DATA0 PID)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL3_SODDFRM, 1 << 29   @ bitWidth 1 (Set odd frame)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL3_EPDIS, 1 << 30   @ bitWidth 1 (Endpoint disable)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL3_EPENA, 1 << 31   @ bitWidth 1 (Endpoint enable)  
 
    .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL4, OTG_HS_DEVICE_BASE + 0x180 @ (OTG device endpoint-4 control  register) 
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL4_MPSIZ_Shift, 0   @ bitWidth 11 (Maximum packet size)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL4_USBAEP, 1 << 15   @ bitWidth 1 (USB active endpoint)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL4_EONUM_DPID, 1 << 16   @ bitWidth 1 (Even/odd frame)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL4_NAKSTS, 1 << 17   @ bitWidth 1 (NAK status)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL4_EPTYP_Shift, 18   @ bitWidth 2 (Endpoint type)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL4_Stall, 1 << 21   @ bitWidth 1 (STALL handshake)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL4_TXFNUM_Shift, 22   @ bitWidth 4 (TxFIFO number)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL4_CNAK, 1 << 26   @ bitWidth 1 (Clear NAK)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL4_SNAK, 1 << 27   @ bitWidth 1 (Set NAK)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL4_SD0PID_SEVNFRM, 1 << 28   @ bitWidth 1 (Set DATA0 PID)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL4_SODDFRM, 1 << 29   @ bitWidth 1 (Set odd frame)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL4_EPDIS, 1 << 30   @ bitWidth 1 (Endpoint disable)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL4_EPENA, 1 << 31   @ bitWidth 1 (Endpoint enable)  
 
    .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL5, OTG_HS_DEVICE_BASE + 0x1A0 @ (OTG device endpoint-5 control  register) 
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL5_MPSIZ_Shift, 0   @ bitWidth 11 (Maximum packet size)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL5_USBAEP, 1 << 15   @ bitWidth 1 (USB active endpoint)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL5_EONUM_DPID, 1 << 16   @ bitWidth 1 (Even/odd frame)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL5_NAKSTS, 1 << 17   @ bitWidth 1 (NAK status)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL5_EPTYP_Shift, 18   @ bitWidth 2 (Endpoint type)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL5_Stall, 1 << 21   @ bitWidth 1 (STALL handshake)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL5_TXFNUM_Shift, 22   @ bitWidth 4 (TxFIFO number)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL5_CNAK, 1 << 26   @ bitWidth 1 (Clear NAK)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL5_SNAK, 1 << 27   @ bitWidth 1 (Set NAK)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL5_SD0PID_SEVNFRM, 1 << 28   @ bitWidth 1 (Set DATA0 PID)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL5_SODDFRM, 1 << 29   @ bitWidth 1 (Set odd frame)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL5_EPDIS, 1 << 30   @ bitWidth 1 (Endpoint disable)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL5_EPENA, 1 << 31   @ bitWidth 1 (Endpoint enable)  
 
    .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL6, OTG_HS_DEVICE_BASE + 0x1C0 @ (OTG device endpoint-6 control  register) 
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL6_MPSIZ_Shift, 0   @ bitWidth 11 (Maximum packet size)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL6_USBAEP, 1 << 15   @ bitWidth 1 (USB active endpoint)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL6_EONUM_DPID, 1 << 16   @ bitWidth 1 (Even/odd frame)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL6_NAKSTS, 1 << 17   @ bitWidth 1 (NAK status)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL6_EPTYP_Shift, 18   @ bitWidth 2 (Endpoint type)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL6_Stall, 1 << 21   @ bitWidth 1 (STALL handshake)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL6_TXFNUM_Shift, 22   @ bitWidth 4 (TxFIFO number)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL6_CNAK, 1 << 26   @ bitWidth 1 (Clear NAK)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL6_SNAK, 1 << 27   @ bitWidth 1 (Set NAK)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL6_SD0PID_SEVNFRM, 1 << 28   @ bitWidth 1 (Set DATA0 PID)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL6_SODDFRM, 1 << 29   @ bitWidth 1 (Set odd frame)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL6_EPDIS, 1 << 30   @ bitWidth 1 (Endpoint disable)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL6_EPENA, 1 << 31   @ bitWidth 1 (Endpoint enable)  
 
    .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL7, OTG_HS_DEVICE_BASE + 0x1E0 @ (OTG device endpoint-7 control  register) 
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL7_MPSIZ_Shift, 0   @ bitWidth 11 (Maximum packet size)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL7_USBAEP, 1 << 15   @ bitWidth 1 (USB active endpoint)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL7_EONUM_DPID, 1 << 16   @ bitWidth 1 (Even/odd frame)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL7_NAKSTS, 1 << 17   @ bitWidth 1 (NAK status)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL7_EPTYP_Shift, 18   @ bitWidth 2 (Endpoint type)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL7_Stall, 1 << 21   @ bitWidth 1 (STALL handshake)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL7_TXFNUM_Shift, 22   @ bitWidth 4 (TxFIFO number)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL7_CNAK, 1 << 26   @ bitWidth 1 (Clear NAK)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL7_SNAK, 1 << 27   @ bitWidth 1 (Set NAK)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL7_SD0PID_SEVNFRM, 1 << 28   @ bitWidth 1 (Set DATA0 PID)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL7_SODDFRM, 1 << 29   @ bitWidth 1 (Set odd frame)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL7_EPDIS, 1 << 30   @ bitWidth 1 (Endpoint disable)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPCTL7_EPENA, 1 << 31   @ bitWidth 1 (Endpoint enable)  
 
    .equ OTG_HS_DEVICE_OTG_HS_DIEPINT0, OTG_HS_DEVICE_BASE + 0x108 @ (OTG device endpoint-0 interrupt  register) 
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT0_XFRC, 1 << 0   @ bitWidth 1 (Transfer completed  interrupt)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT0_EPDISD, 1 << 1   @ bitWidth 1 (Endpoint disabled  interrupt)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT0_TOC, 1 << 3   @ bitWidth 1 (Timeout condition)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT0_ITTXFE, 1 << 4   @ bitWidth 1 (IN token received when TxFIFO is  empty)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT0_INEPNE, 1 << 6   @ bitWidth 1 (IN endpoint NAK effective)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT0_TXFE, 1 << 7   @ bitWidth 1 (Transmit FIFO empty)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT0_TXFIFOUDRN, 1 << 8   @ bitWidth 1 (Transmit Fifo Underrun)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT0_BNA, 1 << 9   @ bitWidth 1 (Buffer not available  interrupt)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT0_PKTDRPSTS, 1 << 11   @ bitWidth 1 (Packet dropped status)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT0_BERR, 1 << 12   @ bitWidth 1 (Babble error interrupt)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT0_NAK, 1 << 13   @ bitWidth 1 (NAK interrupt)  
 
    .equ OTG_HS_DEVICE_OTG_HS_DIEPINT1, OTG_HS_DEVICE_BASE + 0x128 @ (OTG device endpoint-1 interrupt  register) 
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT1_XFRC, 1 << 0   @ bitWidth 1 (Transfer completed  interrupt)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT1_EPDISD, 1 << 1   @ bitWidth 1 (Endpoint disabled  interrupt)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT1_TOC, 1 << 3   @ bitWidth 1 (Timeout condition)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT1_ITTXFE, 1 << 4   @ bitWidth 1 (IN token received when TxFIFO is  empty)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT1_INEPNE, 1 << 6   @ bitWidth 1 (IN endpoint NAK effective)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT1_TXFE, 1 << 7   @ bitWidth 1 (Transmit FIFO empty)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT1_TXFIFOUDRN, 1 << 8   @ bitWidth 1 (Transmit Fifo Underrun)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT1_BNA, 1 << 9   @ bitWidth 1 (Buffer not available  interrupt)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT1_PKTDRPSTS, 1 << 11   @ bitWidth 1 (Packet dropped status)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT1_BERR, 1 << 12   @ bitWidth 1 (Babble error interrupt)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT1_NAK, 1 << 13   @ bitWidth 1 (NAK interrupt)  
 
    .equ OTG_HS_DEVICE_OTG_HS_DIEPINT2, OTG_HS_DEVICE_BASE + 0x148 @ (OTG device endpoint-2 interrupt  register) 
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT2_XFRC, 1 << 0   @ bitWidth 1 (Transfer completed  interrupt)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT2_EPDISD, 1 << 1   @ bitWidth 1 (Endpoint disabled  interrupt)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT2_TOC, 1 << 3   @ bitWidth 1 (Timeout condition)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT2_ITTXFE, 1 << 4   @ bitWidth 1 (IN token received when TxFIFO is  empty)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT2_INEPNE, 1 << 6   @ bitWidth 1 (IN endpoint NAK effective)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT2_TXFE, 1 << 7   @ bitWidth 1 (Transmit FIFO empty)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT2_TXFIFOUDRN, 1 << 8   @ bitWidth 1 (Transmit Fifo Underrun)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT2_BNA, 1 << 9   @ bitWidth 1 (Buffer not available  interrupt)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT2_PKTDRPSTS, 1 << 11   @ bitWidth 1 (Packet dropped status)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT2_BERR, 1 << 12   @ bitWidth 1 (Babble error interrupt)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT2_NAK, 1 << 13   @ bitWidth 1 (NAK interrupt)  
 
    .equ OTG_HS_DEVICE_OTG_HS_DIEPINT3, OTG_HS_DEVICE_BASE + 0x168 @ (OTG device endpoint-3 interrupt  register) 
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT3_XFRC, 1 << 0   @ bitWidth 1 (Transfer completed  interrupt)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT3_EPDISD, 1 << 1   @ bitWidth 1 (Endpoint disabled  interrupt)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT3_TOC, 1 << 3   @ bitWidth 1 (Timeout condition)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT3_ITTXFE, 1 << 4   @ bitWidth 1 (IN token received when TxFIFO is  empty)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT3_INEPNE, 1 << 6   @ bitWidth 1 (IN endpoint NAK effective)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT3_TXFE, 1 << 7   @ bitWidth 1 (Transmit FIFO empty)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT3_TXFIFOUDRN, 1 << 8   @ bitWidth 1 (Transmit Fifo Underrun)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT3_BNA, 1 << 9   @ bitWidth 1 (Buffer not available  interrupt)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT3_PKTDRPSTS, 1 << 11   @ bitWidth 1 (Packet dropped status)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT3_BERR, 1 << 12   @ bitWidth 1 (Babble error interrupt)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT3_NAK, 1 << 13   @ bitWidth 1 (NAK interrupt)  
 
    .equ OTG_HS_DEVICE_OTG_HS_DIEPINT4, OTG_HS_DEVICE_BASE + 0x188 @ (OTG device endpoint-4 interrupt  register) 
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT4_XFRC, 1 << 0   @ bitWidth 1 (Transfer completed  interrupt)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT4_EPDISD, 1 << 1   @ bitWidth 1 (Endpoint disabled  interrupt)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT4_TOC, 1 << 3   @ bitWidth 1 (Timeout condition)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT4_ITTXFE, 1 << 4   @ bitWidth 1 (IN token received when TxFIFO is  empty)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT4_INEPNE, 1 << 6   @ bitWidth 1 (IN endpoint NAK effective)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT4_TXFE, 1 << 7   @ bitWidth 1 (Transmit FIFO empty)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT4_TXFIFOUDRN, 1 << 8   @ bitWidth 1 (Transmit Fifo Underrun)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT4_BNA, 1 << 9   @ bitWidth 1 (Buffer not available  interrupt)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT4_PKTDRPSTS, 1 << 11   @ bitWidth 1 (Packet dropped status)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT4_BERR, 1 << 12   @ bitWidth 1 (Babble error interrupt)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT4_NAK, 1 << 13   @ bitWidth 1 (NAK interrupt)  
 
    .equ OTG_HS_DEVICE_OTG_HS_DIEPINT5, OTG_HS_DEVICE_BASE + 0x1A8 @ (OTG device endpoint-5 interrupt  register) 
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT5_XFRC, 1 << 0   @ bitWidth 1 (Transfer completed  interrupt)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT5_EPDISD, 1 << 1   @ bitWidth 1 (Endpoint disabled  interrupt)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT5_TOC, 1 << 3   @ bitWidth 1 (Timeout condition)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT5_ITTXFE, 1 << 4   @ bitWidth 1 (IN token received when TxFIFO is  empty)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT5_INEPNE, 1 << 6   @ bitWidth 1 (IN endpoint NAK effective)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT5_TXFE, 1 << 7   @ bitWidth 1 (Transmit FIFO empty)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT5_TXFIFOUDRN, 1 << 8   @ bitWidth 1 (Transmit Fifo Underrun)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT5_BNA, 1 << 9   @ bitWidth 1 (Buffer not available  interrupt)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT5_PKTDRPSTS, 1 << 11   @ bitWidth 1 (Packet dropped status)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT5_BERR, 1 << 12   @ bitWidth 1 (Babble error interrupt)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT5_NAK, 1 << 13   @ bitWidth 1 (NAK interrupt)  
 
    .equ OTG_HS_DEVICE_OTG_HS_DIEPINT6, OTG_HS_DEVICE_BASE + 0x1C8 @ (OTG device endpoint-6 interrupt  register) 
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT6_XFRC, 1 << 0   @ bitWidth 1 (Transfer completed  interrupt)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT6_EPDISD, 1 << 1   @ bitWidth 1 (Endpoint disabled  interrupt)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT6_TOC, 1 << 3   @ bitWidth 1 (Timeout condition)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT6_ITTXFE, 1 << 4   @ bitWidth 1 (IN token received when TxFIFO is  empty)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT6_INEPNE, 1 << 6   @ bitWidth 1 (IN endpoint NAK effective)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT6_TXFE, 1 << 7   @ bitWidth 1 (Transmit FIFO empty)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT6_TXFIFOUDRN, 1 << 8   @ bitWidth 1 (Transmit Fifo Underrun)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT6_BNA, 1 << 9   @ bitWidth 1 (Buffer not available  interrupt)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT6_PKTDRPSTS, 1 << 11   @ bitWidth 1 (Packet dropped status)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT6_BERR, 1 << 12   @ bitWidth 1 (Babble error interrupt)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT6_NAK, 1 << 13   @ bitWidth 1 (NAK interrupt)  
 
    .equ OTG_HS_DEVICE_OTG_HS_DIEPINT7, OTG_HS_DEVICE_BASE + 0x1E8 @ (OTG device endpoint-7 interrupt  register) 
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT7_XFRC, 1 << 0   @ bitWidth 1 (Transfer completed  interrupt)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT7_EPDISD, 1 << 1   @ bitWidth 1 (Endpoint disabled  interrupt)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT7_TOC, 1 << 3   @ bitWidth 1 (Timeout condition)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT7_ITTXFE, 1 << 4   @ bitWidth 1 (IN token received when TxFIFO is  empty)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT7_INEPNE, 1 << 6   @ bitWidth 1 (IN endpoint NAK effective)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT7_TXFE, 1 << 7   @ bitWidth 1 (Transmit FIFO empty)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT7_TXFIFOUDRN, 1 << 8   @ bitWidth 1 (Transmit Fifo Underrun)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT7_BNA, 1 << 9   @ bitWidth 1 (Buffer not available  interrupt)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT7_PKTDRPSTS, 1 << 11   @ bitWidth 1 (Packet dropped status)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT7_BERR, 1 << 12   @ bitWidth 1 (Babble error interrupt)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPINT7_NAK, 1 << 13   @ bitWidth 1 (NAK interrupt)  
 
    .equ OTG_HS_DEVICE_OTG_HS_DIEPTSIZ0, OTG_HS_DEVICE_BASE + 0x110 @ (OTG_HS device IN endpoint 0 transfer size  register) 
        .equ OTG_HS_DEVICE_OTG_HS_DIEPTSIZ0_XFRSIZ_Shift, 0   @ bitWidth 7 (Transfer size)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPTSIZ0_PKTCNT_Shift, 19   @ bitWidth 2 (Packet count)  
 
    .equ OTG_HS_DEVICE_OTG_HS_DIEPDMA1, OTG_HS_DEVICE_BASE + 0x114 @ (OTG_HS device endpoint-1 DMA address  register) 
        .equ OTG_HS_DEVICE_OTG_HS_DIEPDMA1_DMAADDR_Shift, 0   @ bitWidth 32 (DMA address)  
 
    .equ OTG_HS_DEVICE_OTG_HS_DIEPDMA2, OTG_HS_DEVICE_BASE + 0x134 @ (OTG_HS device endpoint-2 DMA address  register) 
        .equ OTG_HS_DEVICE_OTG_HS_DIEPDMA2_DMAADDR_Shift, 0   @ bitWidth 32 (DMA address)  
 
    .equ OTG_HS_DEVICE_OTG_HS_DIEPDMA3, OTG_HS_DEVICE_BASE + 0x154 @ (OTG_HS device endpoint-3 DMA address  register) 
        .equ OTG_HS_DEVICE_OTG_HS_DIEPDMA3_DMAADDR_Shift, 0   @ bitWidth 32 (DMA address)  
 
    .equ OTG_HS_DEVICE_OTG_HS_DIEPDMA4, OTG_HS_DEVICE_BASE + 0x174 @ (OTG_HS device endpoint-4 DMA address  register) 
        .equ OTG_HS_DEVICE_OTG_HS_DIEPDMA4_DMAADDR_Shift, 0   @ bitWidth 32 (DMA address)  
 
    .equ OTG_HS_DEVICE_OTG_HS_DIEPDMA5, OTG_HS_DEVICE_BASE + 0x194 @ (OTG_HS device endpoint-5 DMA address  register) 
        .equ OTG_HS_DEVICE_OTG_HS_DIEPDMA5_DMAADDR_Shift, 0   @ bitWidth 32 (DMA address)  
 
    .equ OTG_HS_DEVICE_OTG_HS_DTXFSTS0, OTG_HS_DEVICE_BASE + 0x118 @ (OTG_HS device IN endpoint transmit FIFO  status register) 
        .equ OTG_HS_DEVICE_OTG_HS_DTXFSTS0_INEPTFSAV_Shift, 0   @ bitWidth 16 (IN endpoint TxFIFO space  avail)  
 
    .equ OTG_HS_DEVICE_OTG_HS_DTXFSTS1, OTG_HS_DEVICE_BASE + 0x138 @ (OTG_HS device IN endpoint transmit FIFO  status register) 
        .equ OTG_HS_DEVICE_OTG_HS_DTXFSTS1_INEPTFSAV_Shift, 0   @ bitWidth 16 (IN endpoint TxFIFO space  avail)  
 
    .equ OTG_HS_DEVICE_OTG_HS_DTXFSTS2, OTG_HS_DEVICE_BASE + 0x158 @ (OTG_HS device IN endpoint transmit FIFO  status register) 
        .equ OTG_HS_DEVICE_OTG_HS_DTXFSTS2_INEPTFSAV_Shift, 0   @ bitWidth 16 (IN endpoint TxFIFO space  avail)  
 
    .equ OTG_HS_DEVICE_OTG_HS_DTXFSTS3, OTG_HS_DEVICE_BASE + 0x178 @ (OTG_HS device IN endpoint transmit FIFO  status register) 
        .equ OTG_HS_DEVICE_OTG_HS_DTXFSTS3_INEPTFSAV_Shift, 0   @ bitWidth 16 (IN endpoint TxFIFO space  avail)  
 
    .equ OTG_HS_DEVICE_OTG_HS_DTXFSTS4, OTG_HS_DEVICE_BASE + 0x198 @ (OTG_HS device IN endpoint transmit FIFO  status register) 
        .equ OTG_HS_DEVICE_OTG_HS_DTXFSTS4_INEPTFSAV_Shift, 0   @ bitWidth 16 (IN endpoint TxFIFO space  avail)  
 
    .equ OTG_HS_DEVICE_OTG_HS_DTXFSTS5, OTG_HS_DEVICE_BASE + 0x1B8 @ (OTG_HS device IN endpoint transmit FIFO  status register) 
        .equ OTG_HS_DEVICE_OTG_HS_DTXFSTS5_INEPTFSAV_Shift, 0   @ bitWidth 16 (IN endpoint TxFIFO space  avail)  
 
    .equ OTG_HS_DEVICE_OTG_HS_DIEPTSIZ1, OTG_HS_DEVICE_BASE + 0x130 @ (OTG_HS device endpoint transfer size  register) 
        .equ OTG_HS_DEVICE_OTG_HS_DIEPTSIZ1_XFRSIZ_Shift, 0   @ bitWidth 19 (Transfer size)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPTSIZ1_PKTCNT_Shift, 19   @ bitWidth 10 (Packet count)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPTSIZ1_MCNT_Shift, 29   @ bitWidth 2 (Multi count)  
 
    .equ OTG_HS_DEVICE_OTG_HS_DIEPTSIZ2, OTG_HS_DEVICE_BASE + 0x150 @ (OTG_HS device endpoint transfer size  register) 
        .equ OTG_HS_DEVICE_OTG_HS_DIEPTSIZ2_XFRSIZ_Shift, 0   @ bitWidth 19 (Transfer size)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPTSIZ2_PKTCNT_Shift, 19   @ bitWidth 10 (Packet count)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPTSIZ2_MCNT_Shift, 29   @ bitWidth 2 (Multi count)  
 
    .equ OTG_HS_DEVICE_OTG_HS_DIEPTSIZ3, OTG_HS_DEVICE_BASE + 0x170 @ (OTG_HS device endpoint transfer size  register) 
        .equ OTG_HS_DEVICE_OTG_HS_DIEPTSIZ3_XFRSIZ_Shift, 0   @ bitWidth 19 (Transfer size)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPTSIZ3_PKTCNT_Shift, 19   @ bitWidth 10 (Packet count)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPTSIZ3_MCNT_Shift, 29   @ bitWidth 2 (Multi count)  
 
    .equ OTG_HS_DEVICE_OTG_HS_DIEPTSIZ4, OTG_HS_DEVICE_BASE + 0x190 @ (OTG_HS device endpoint transfer size  register) 
        .equ OTG_HS_DEVICE_OTG_HS_DIEPTSIZ4_XFRSIZ_Shift, 0   @ bitWidth 19 (Transfer size)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPTSIZ4_PKTCNT_Shift, 19   @ bitWidth 10 (Packet count)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPTSIZ4_MCNT_Shift, 29   @ bitWidth 2 (Multi count)  
 
    .equ OTG_HS_DEVICE_OTG_HS_DIEPTSIZ5, OTG_HS_DEVICE_BASE + 0x1B0 @ (OTG_HS device endpoint transfer size  register) 
        .equ OTG_HS_DEVICE_OTG_HS_DIEPTSIZ5_XFRSIZ_Shift, 0   @ bitWidth 19 (Transfer size)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPTSIZ5_PKTCNT_Shift, 19   @ bitWidth 10 (Packet count)  
        .equ OTG_HS_DEVICE_OTG_HS_DIEPTSIZ5_MCNT_Shift, 29   @ bitWidth 2 (Multi count)  
 
    .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL0, OTG_HS_DEVICE_BASE + 0x300 @ (OTG_HS device control OUT endpoint 0 control  register) 
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL0_MPSIZ_Shift, 0   @ bitWidth 2 (Maximum packet size)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL0_USBAEP, 1 << 15   @ bitWidth 1 (USB active endpoint)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL0_NAKSTS, 1 << 17   @ bitWidth 1 (NAK status)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL0_EPTYP_Shift, 18   @ bitWidth 2 (Endpoint type)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL0_SNPM, 1 << 20   @ bitWidth 1 (Snoop mode)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL0_Stall, 1 << 21   @ bitWidth 1 (STALL handshake)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL0_CNAK, 1 << 26   @ bitWidth 1 (Clear NAK)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL0_SNAK, 1 << 27   @ bitWidth 1 (Set NAK)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL0_EPDIS, 1 << 30   @ bitWidth 1 (Endpoint disable)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL0_EPENA, 1 << 31   @ bitWidth 1 (Endpoint enable)  
 
    .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL1, OTG_HS_DEVICE_BASE + 0x320 @ (OTG device endpoint-1 control  register) 
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL1_MPSIZ_Shift, 0   @ bitWidth 11 (Maximum packet size)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL1_USBAEP, 1 << 15   @ bitWidth 1 (USB active endpoint)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL1_EONUM_DPID, 1 << 16   @ bitWidth 1 (Even odd frame/Endpoint data  PID)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL1_NAKSTS, 1 << 17   @ bitWidth 1 (NAK status)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL1_EPTYP_Shift, 18   @ bitWidth 2 (Endpoint type)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL1_SNPM, 1 << 20   @ bitWidth 1 (Snoop mode)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL1_Stall, 1 << 21   @ bitWidth 1 (STALL handshake)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL1_CNAK, 1 << 26   @ bitWidth 1 (Clear NAK)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL1_SNAK, 1 << 27   @ bitWidth 1 (Set NAK)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL1_SD0PID_SEVNFRM, 1 << 28   @ bitWidth 1 (Set DATA0 PID/Set even  frame)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL1_SODDFRM, 1 << 29   @ bitWidth 1 (Set odd frame)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL1_EPDIS, 1 << 30   @ bitWidth 1 (Endpoint disable)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL1_EPENA, 1 << 31   @ bitWidth 1 (Endpoint enable)  
 
    .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL2, OTG_HS_DEVICE_BASE + 0x340 @ (OTG device endpoint-2 control  register) 
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL2_MPSIZ_Shift, 0   @ bitWidth 11 (Maximum packet size)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL2_USBAEP, 1 << 15   @ bitWidth 1 (USB active endpoint)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL2_EONUM_DPID, 1 << 16   @ bitWidth 1 (Even odd frame/Endpoint data  PID)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL2_NAKSTS, 1 << 17   @ bitWidth 1 (NAK status)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL2_EPTYP_Shift, 18   @ bitWidth 2 (Endpoint type)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL2_SNPM, 1 << 20   @ bitWidth 1 (Snoop mode)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL2_Stall, 1 << 21   @ bitWidth 1 (STALL handshake)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL2_CNAK, 1 << 26   @ bitWidth 1 (Clear NAK)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL2_SNAK, 1 << 27   @ bitWidth 1 (Set NAK)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL2_SD0PID_SEVNFRM, 1 << 28   @ bitWidth 1 (Set DATA0 PID/Set even  frame)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL2_SODDFRM, 1 << 29   @ bitWidth 1 (Set odd frame)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL2_EPDIS, 1 << 30   @ bitWidth 1 (Endpoint disable)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL2_EPENA, 1 << 31   @ bitWidth 1 (Endpoint enable)  
 
    .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL3, OTG_HS_DEVICE_BASE + 0x360 @ (OTG device endpoint-3 control  register) 
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL3_MPSIZ_Shift, 0   @ bitWidth 11 (Maximum packet size)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL3_USBAEP, 1 << 15   @ bitWidth 1 (USB active endpoint)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL3_EONUM_DPID, 1 << 16   @ bitWidth 1 (Even odd frame/Endpoint data  PID)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL3_NAKSTS, 1 << 17   @ bitWidth 1 (NAK status)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL3_EPTYP_Shift, 18   @ bitWidth 2 (Endpoint type)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL3_SNPM, 1 << 20   @ bitWidth 1 (Snoop mode)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL3_Stall, 1 << 21   @ bitWidth 1 (STALL handshake)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL3_CNAK, 1 << 26   @ bitWidth 1 (Clear NAK)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL3_SNAK, 1 << 27   @ bitWidth 1 (Set NAK)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL3_SD0PID_SEVNFRM, 1 << 28   @ bitWidth 1 (Set DATA0 PID/Set even  frame)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL3_SODDFRM, 1 << 29   @ bitWidth 1 (Set odd frame)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL3_EPDIS, 1 << 30   @ bitWidth 1 (Endpoint disable)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPCTL3_EPENA, 1 << 31   @ bitWidth 1 (Endpoint enable)  
 
    .equ OTG_HS_DEVICE_OTG_HS_DOEPINT0, OTG_HS_DEVICE_BASE + 0x308 @ (OTG_HS device endpoint-0 interrupt  register) 
        .equ OTG_HS_DEVICE_OTG_HS_DOEPINT0_XFRC, 1 << 0   @ bitWidth 1 (Transfer completed  interrupt)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPINT0_EPDISD, 1 << 1   @ bitWidth 1 (Endpoint disabled  interrupt)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPINT0_STUP, 1 << 3   @ bitWidth 1 (SETUP phase done)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPINT0_OTEPDIS, 1 << 4   @ bitWidth 1 (OUT token received when endpoint  disabled)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPINT0_B2BSTUP, 1 << 6   @ bitWidth 1 (Back-to-back SETUP packets  received)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPINT0_NYET, 1 << 14   @ bitWidth 1 (NYET interrupt)  
 
    .equ OTG_HS_DEVICE_OTG_HS_DOEPINT1, OTG_HS_DEVICE_BASE + 0x328 @ (OTG_HS device endpoint-1 interrupt  register) 
        .equ OTG_HS_DEVICE_OTG_HS_DOEPINT1_XFRC, 1 << 0   @ bitWidth 1 (Transfer completed  interrupt)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPINT1_EPDISD, 1 << 1   @ bitWidth 1 (Endpoint disabled  interrupt)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPINT1_STUP, 1 << 3   @ bitWidth 1 (SETUP phase done)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPINT1_OTEPDIS, 1 << 4   @ bitWidth 1 (OUT token received when endpoint  disabled)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPINT1_B2BSTUP, 1 << 6   @ bitWidth 1 (Back-to-back SETUP packets  received)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPINT1_NYET, 1 << 14   @ bitWidth 1 (NYET interrupt)  
 
    .equ OTG_HS_DEVICE_OTG_HS_DOEPINT2, OTG_HS_DEVICE_BASE + 0x348 @ (OTG_HS device endpoint-2 interrupt  register) 
        .equ OTG_HS_DEVICE_OTG_HS_DOEPINT2_XFRC, 1 << 0   @ bitWidth 1 (Transfer completed  interrupt)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPINT2_EPDISD, 1 << 1   @ bitWidth 1 (Endpoint disabled  interrupt)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPINT2_STUP, 1 << 3   @ bitWidth 1 (SETUP phase done)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPINT2_OTEPDIS, 1 << 4   @ bitWidth 1 (OUT token received when endpoint  disabled)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPINT2_B2BSTUP, 1 << 6   @ bitWidth 1 (Back-to-back SETUP packets  received)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPINT2_NYET, 1 << 14   @ bitWidth 1 (NYET interrupt)  
 
    .equ OTG_HS_DEVICE_OTG_HS_DOEPINT3, OTG_HS_DEVICE_BASE + 0x368 @ (OTG_HS device endpoint-3 interrupt  register) 
        .equ OTG_HS_DEVICE_OTG_HS_DOEPINT3_XFRC, 1 << 0   @ bitWidth 1 (Transfer completed  interrupt)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPINT3_EPDISD, 1 << 1   @ bitWidth 1 (Endpoint disabled  interrupt)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPINT3_STUP, 1 << 3   @ bitWidth 1 (SETUP phase done)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPINT3_OTEPDIS, 1 << 4   @ bitWidth 1 (OUT token received when endpoint  disabled)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPINT3_B2BSTUP, 1 << 6   @ bitWidth 1 (Back-to-back SETUP packets  received)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPINT3_NYET, 1 << 14   @ bitWidth 1 (NYET interrupt)  
 
    .equ OTG_HS_DEVICE_OTG_HS_DOEPINT4, OTG_HS_DEVICE_BASE + 0x388 @ (OTG_HS device endpoint-4 interrupt  register) 
        .equ OTG_HS_DEVICE_OTG_HS_DOEPINT4_XFRC, 1 << 0   @ bitWidth 1 (Transfer completed  interrupt)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPINT4_EPDISD, 1 << 1   @ bitWidth 1 (Endpoint disabled  interrupt)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPINT4_STUP, 1 << 3   @ bitWidth 1 (SETUP phase done)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPINT4_OTEPDIS, 1 << 4   @ bitWidth 1 (OUT token received when endpoint  disabled)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPINT4_B2BSTUP, 1 << 6   @ bitWidth 1 (Back-to-back SETUP packets  received)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPINT4_NYET, 1 << 14   @ bitWidth 1 (NYET interrupt)  
 
    .equ OTG_HS_DEVICE_OTG_HS_DOEPINT5, OTG_HS_DEVICE_BASE + 0x3A8 @ (OTG_HS device endpoint-5 interrupt  register) 
        .equ OTG_HS_DEVICE_OTG_HS_DOEPINT5_XFRC, 1 << 0   @ bitWidth 1 (Transfer completed  interrupt)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPINT5_EPDISD, 1 << 1   @ bitWidth 1 (Endpoint disabled  interrupt)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPINT5_STUP, 1 << 3   @ bitWidth 1 (SETUP phase done)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPINT5_OTEPDIS, 1 << 4   @ bitWidth 1 (OUT token received when endpoint  disabled)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPINT5_B2BSTUP, 1 << 6   @ bitWidth 1 (Back-to-back SETUP packets  received)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPINT5_NYET, 1 << 14   @ bitWidth 1 (NYET interrupt)  
 
    .equ OTG_HS_DEVICE_OTG_HS_DOEPINT6, OTG_HS_DEVICE_BASE + 0x3C8 @ (OTG_HS device endpoint-6 interrupt  register) 
        .equ OTG_HS_DEVICE_OTG_HS_DOEPINT6_XFRC, 1 << 0   @ bitWidth 1 (Transfer completed  interrupt)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPINT6_EPDISD, 1 << 1   @ bitWidth 1 (Endpoint disabled  interrupt)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPINT6_STUP, 1 << 3   @ bitWidth 1 (SETUP phase done)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPINT6_OTEPDIS, 1 << 4   @ bitWidth 1 (OUT token received when endpoint  disabled)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPINT6_B2BSTUP, 1 << 6   @ bitWidth 1 (Back-to-back SETUP packets  received)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPINT6_NYET, 1 << 14   @ bitWidth 1 (NYET interrupt)  
 
    .equ OTG_HS_DEVICE_OTG_HS_DOEPINT7, OTG_HS_DEVICE_BASE + 0x3E8 @ (OTG_HS device endpoint-7 interrupt  register) 
        .equ OTG_HS_DEVICE_OTG_HS_DOEPINT7_XFRC, 1 << 0   @ bitWidth 1 (Transfer completed  interrupt)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPINT7_EPDISD, 1 << 1   @ bitWidth 1 (Endpoint disabled  interrupt)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPINT7_STUP, 1 << 3   @ bitWidth 1 (SETUP phase done)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPINT7_OTEPDIS, 1 << 4   @ bitWidth 1 (OUT token received when endpoint  disabled)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPINT7_B2BSTUP, 1 << 6   @ bitWidth 1 (Back-to-back SETUP packets  received)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPINT7_NYET, 1 << 14   @ bitWidth 1 (NYET interrupt)  
 
    .equ OTG_HS_DEVICE_OTG_HS_DOEPTSIZ0, OTG_HS_DEVICE_BASE + 0x310 @ (OTG_HS device endpoint-1 transfer size  register) 
        .equ OTG_HS_DEVICE_OTG_HS_DOEPTSIZ0_XFRSIZ_Shift, 0   @ bitWidth 7 (Transfer size)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPTSIZ0_PKTCNT, 1 << 19   @ bitWidth 1 (Packet count)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPTSIZ0_STUPCNT_Shift, 29   @ bitWidth 2 (SETUP packet count)  
 
    .equ OTG_HS_DEVICE_OTG_HS_DOEPTSIZ1, OTG_HS_DEVICE_BASE + 0x330 @ (OTG_HS device endpoint-2 transfer size  register) 
        .equ OTG_HS_DEVICE_OTG_HS_DOEPTSIZ1_XFRSIZ_Shift, 0   @ bitWidth 19 (Transfer size)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPTSIZ1_PKTCNT_Shift, 19   @ bitWidth 10 (Packet count)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPTSIZ1_RXDPID_STUPCNT_Shift, 29   @ bitWidth 2 (Received data PID/SETUP packet  count)  
 
    .equ OTG_HS_DEVICE_OTG_HS_DOEPTSIZ2, OTG_HS_DEVICE_BASE + 0x350 @ (OTG_HS device endpoint-3 transfer size  register) 
        .equ OTG_HS_DEVICE_OTG_HS_DOEPTSIZ2_XFRSIZ_Shift, 0   @ bitWidth 19 (Transfer size)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPTSIZ2_PKTCNT_Shift, 19   @ bitWidth 10 (Packet count)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPTSIZ2_RXDPID_STUPCNT_Shift, 29   @ bitWidth 2 (Received data PID/SETUP packet  count)  
 
    .equ OTG_HS_DEVICE_OTG_HS_DOEPTSIZ3, OTG_HS_DEVICE_BASE + 0x370 @ (OTG_HS device endpoint-4 transfer size  register) 
        .equ OTG_HS_DEVICE_OTG_HS_DOEPTSIZ3_XFRSIZ_Shift, 0   @ bitWidth 19 (Transfer size)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPTSIZ3_PKTCNT_Shift, 19   @ bitWidth 10 (Packet count)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPTSIZ3_RXDPID_STUPCNT_Shift, 29   @ bitWidth 2 (Received data PID/SETUP packet  count)  
 
    .equ OTG_HS_DEVICE_OTG_HS_DOEPTSIZ4, OTG_HS_DEVICE_BASE + 0x390 @ (OTG_HS device endpoint-5 transfer size  register) 
        .equ OTG_HS_DEVICE_OTG_HS_DOEPTSIZ4_XFRSIZ_Shift, 0   @ bitWidth 19 (Transfer size)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPTSIZ4_PKTCNT_Shift, 19   @ bitWidth 10 (Packet count)  
        .equ OTG_HS_DEVICE_OTG_HS_DOEPTSIZ4_RXDPID_STUPCNT_Shift, 29   @ bitWidth 2 (Received data PID/SETUP packet  count)  
 

@=========================== OTG_HS_PWRCLK ===========================@
.equ OTG_HS_PWRCLK_BASE, 0x40040E00 @ (USB on the go high speed) 
    .equ OTG_HS_PWRCLK_OTG_HS_PCGCR, OTG_HS_PWRCLK_BASE + 0x0 @ (Power and clock gating control  register) 
        .equ OTG_HS_PWRCLK_OTG_HS_PCGCR_STPPCLK, 1 << 0   @ bitWidth 1 (Stop PHY clock)  
        .equ OTG_HS_PWRCLK_OTG_HS_PCGCR_GATEHCLK, 1 << 1   @ bitWidth 1 (Gate HCLK)  
        .equ OTG_HS_PWRCLK_OTG_HS_PCGCR_PHYSUSP, 1 << 4   @ bitWidth 1 (PHY suspended)  
 

@=========================== NVIC ===========================@
.equ NVIC_BASE, 0xE000E000 @ (Nested Vectored Interrupt  Controller) 
    .equ NVIC_ICTR, NVIC_BASE + 0x4 @ (Interrupt Controller Type  Register) 
        .equ NVIC_ICTR_INTLINESNUM_Shift, 0   @ bitWidth 4 (Total number of interrupt lines in  groups)  
 
    .equ NVIC_STIR, NVIC_BASE + 0xF00 @ (Software Triggered Interrupt  Register) 
        .equ NVIC_STIR_INTID_Shift, 0   @ bitWidth 9 (interrupt to be triggered)  
 
    .equ NVIC_ISER0, NVIC_BASE + 0x100 @ (Interrupt Set-Enable Register) 
        .equ NVIC_ISER0_SETENA_Shift, 0   @ bitWidth 32 (SETENA)  
 
    .equ NVIC_ISER1, NVIC_BASE + 0x104 @ (Interrupt Set-Enable Register) 
        .equ NVIC_ISER1_SETENA_Shift, 0   @ bitWidth 32 (SETENA)  
 
    .equ NVIC_ISER2, NVIC_BASE + 0x108 @ (Interrupt Set-Enable Register) 
        .equ NVIC_ISER2_SETENA_Shift, 0   @ bitWidth 32 (SETENA)  
 
    .equ NVIC_ICER0, NVIC_BASE + 0x180 @ (Interrupt Clear-Enable  Register) 
        .equ NVIC_ICER0_CLRENA_Shift, 0   @ bitWidth 32 (CLRENA)  
 
    .equ NVIC_ICER1, NVIC_BASE + 0x184 @ (Interrupt Clear-Enable  Register) 
        .equ NVIC_ICER1_CLRENA_Shift, 0   @ bitWidth 32 (CLRENA)  
 
    .equ NVIC_ICER2, NVIC_BASE + 0x188 @ (Interrupt Clear-Enable  Register) 
        .equ NVIC_ICER2_CLRENA_Shift, 0   @ bitWidth 32 (CLRENA)  
 
    .equ NVIC_ISPR0, NVIC_BASE + 0x200 @ (Interrupt Set-Pending Register) 
        .equ NVIC_ISPR0_SETPEND_Shift, 0   @ bitWidth 32 (SETPEND)  
 
    .equ NVIC_ISPR1, NVIC_BASE + 0x204 @ (Interrupt Set-Pending Register) 
        .equ NVIC_ISPR1_SETPEND_Shift, 0   @ bitWidth 32 (SETPEND)  
 
    .equ NVIC_ISPR2, NVIC_BASE + 0x208 @ (Interrupt Set-Pending Register) 
        .equ NVIC_ISPR2_SETPEND_Shift, 0   @ bitWidth 32 (SETPEND)  
 
    .equ NVIC_ICPR0, NVIC_BASE + 0x280 @ (Interrupt Clear-Pending  Register) 
        .equ NVIC_ICPR0_CLRPEND_Shift, 0   @ bitWidth 32 (CLRPEND)  
 
    .equ NVIC_ICPR1, NVIC_BASE + 0x284 @ (Interrupt Clear-Pending  Register) 
        .equ NVIC_ICPR1_CLRPEND_Shift, 0   @ bitWidth 32 (CLRPEND)  
 
    .equ NVIC_ICPR2, NVIC_BASE + 0x288 @ (Interrupt Clear-Pending  Register) 
        .equ NVIC_ICPR2_CLRPEND_Shift, 0   @ bitWidth 32 (CLRPEND)  
 
    .equ NVIC_IABR0, NVIC_BASE + 0x300 @ (Interrupt Active Bit Register) 
        .equ NVIC_IABR0_ACTIVE_Shift, 0   @ bitWidth 32 (ACTIVE)  
 
    .equ NVIC_IABR1, NVIC_BASE + 0x304 @ (Interrupt Active Bit Register) 
        .equ NVIC_IABR1_ACTIVE_Shift, 0   @ bitWidth 32 (ACTIVE)  
 
    .equ NVIC_IABR2, NVIC_BASE + 0x308 @ (Interrupt Active Bit Register) 
        .equ NVIC_IABR2_ACTIVE_Shift, 0   @ bitWidth 32 (ACTIVE)  
 
    .equ NVIC_IPR0, NVIC_BASE + 0x400 @ (Interrupt Priority Register) 
        .equ NVIC_IPR0_IPR_N0_Shift, 0   @ bitWidth 8 (IPR_N0)  
        .equ NVIC_IPR0_IPR_N1_Shift, 8   @ bitWidth 8 (IPR_N1)  
        .equ NVIC_IPR0_IPR_N2_Shift, 16   @ bitWidth 8 (IPR_N2)  
        .equ NVIC_IPR0_IPR_N3_Shift, 24   @ bitWidth 8 (IPR_N3)  
 
    .equ NVIC_IPR1, NVIC_BASE + 0x404 @ (Interrupt Priority Register) 
        .equ NVIC_IPR1_IPR_N0_Shift, 0   @ bitWidth 8 (IPR_N0)  
        .equ NVIC_IPR1_IPR_N1_Shift, 8   @ bitWidth 8 (IPR_N1)  
        .equ NVIC_IPR1_IPR_N2_Shift, 16   @ bitWidth 8 (IPR_N2)  
        .equ NVIC_IPR1_IPR_N3_Shift, 24   @ bitWidth 8 (IPR_N3)  
 
    .equ NVIC_IPR2, NVIC_BASE + 0x408 @ (Interrupt Priority Register) 
        .equ NVIC_IPR2_IPR_N0_Shift, 0   @ bitWidth 8 (IPR_N0)  
        .equ NVIC_IPR2_IPR_N1_Shift, 8   @ bitWidth 8 (IPR_N1)  
        .equ NVIC_IPR2_IPR_N2_Shift, 16   @ bitWidth 8 (IPR_N2)  
        .equ NVIC_IPR2_IPR_N3_Shift, 24   @ bitWidth 8 (IPR_N3)  
 
    .equ NVIC_IPR3, NVIC_BASE + 0x40C @ (Interrupt Priority Register) 
        .equ NVIC_IPR3_IPR_N0_Shift, 0   @ bitWidth 8 (IPR_N0)  
        .equ NVIC_IPR3_IPR_N1_Shift, 8   @ bitWidth 8 (IPR_N1)  
        .equ NVIC_IPR3_IPR_N2_Shift, 16   @ bitWidth 8 (IPR_N2)  
        .equ NVIC_IPR3_IPR_N3_Shift, 24   @ bitWidth 8 (IPR_N3)  
 
    .equ NVIC_IPR4, NVIC_BASE + 0x410 @ (Interrupt Priority Register) 
        .equ NVIC_IPR4_IPR_N0_Shift, 0   @ bitWidth 8 (IPR_N0)  
        .equ NVIC_IPR4_IPR_N1_Shift, 8   @ bitWidth 8 (IPR_N1)  
        .equ NVIC_IPR4_IPR_N2_Shift, 16   @ bitWidth 8 (IPR_N2)  
        .equ NVIC_IPR4_IPR_N3_Shift, 24   @ bitWidth 8 (IPR_N3)  
 
    .equ NVIC_IPR5, NVIC_BASE + 0x414 @ (Interrupt Priority Register) 
        .equ NVIC_IPR5_IPR_N0_Shift, 0   @ bitWidth 8 (IPR_N0)  
        .equ NVIC_IPR5_IPR_N1_Shift, 8   @ bitWidth 8 (IPR_N1)  
        .equ NVIC_IPR5_IPR_N2_Shift, 16   @ bitWidth 8 (IPR_N2)  
        .equ NVIC_IPR5_IPR_N3_Shift, 24   @ bitWidth 8 (IPR_N3)  
 
    .equ NVIC_IPR6, NVIC_BASE + 0x418 @ (Interrupt Priority Register) 
        .equ NVIC_IPR6_IPR_N0_Shift, 0   @ bitWidth 8 (IPR_N0)  
        .equ NVIC_IPR6_IPR_N1_Shift, 8   @ bitWidth 8 (IPR_N1)  
        .equ NVIC_IPR6_IPR_N2_Shift, 16   @ bitWidth 8 (IPR_N2)  
        .equ NVIC_IPR6_IPR_N3_Shift, 24   @ bitWidth 8 (IPR_N3)  
 
    .equ NVIC_IPR7, NVIC_BASE + 0x41C @ (Interrupt Priority Register) 
        .equ NVIC_IPR7_IPR_N0_Shift, 0   @ bitWidth 8 (IPR_N0)  
        .equ NVIC_IPR7_IPR_N1_Shift, 8   @ bitWidth 8 (IPR_N1)  
        .equ NVIC_IPR7_IPR_N2_Shift, 16   @ bitWidth 8 (IPR_N2)  
        .equ NVIC_IPR7_IPR_N3_Shift, 24   @ bitWidth 8 (IPR_N3)  
 
    .equ NVIC_IPR8, NVIC_BASE + 0x420 @ (Interrupt Priority Register) 
        .equ NVIC_IPR8_IPR_N0_Shift, 0   @ bitWidth 8 (IPR_N0)  
        .equ NVIC_IPR8_IPR_N1_Shift, 8   @ bitWidth 8 (IPR_N1)  
        .equ NVIC_IPR8_IPR_N2_Shift, 16   @ bitWidth 8 (IPR_N2)  
        .equ NVIC_IPR8_IPR_N3_Shift, 24   @ bitWidth 8 (IPR_N3)  
 
    .equ NVIC_IPR9, NVIC_BASE + 0x424 @ (Interrupt Priority Register) 
        .equ NVIC_IPR9_IPR_N0_Shift, 0   @ bitWidth 8 (IPR_N0)  
        .equ NVIC_IPR9_IPR_N1_Shift, 8   @ bitWidth 8 (IPR_N1)  
        .equ NVIC_IPR9_IPR_N2_Shift, 16   @ bitWidth 8 (IPR_N2)  
        .equ NVIC_IPR9_IPR_N3_Shift, 24   @ bitWidth 8 (IPR_N3)  
 
    .equ NVIC_IPR10, NVIC_BASE + 0x428 @ (Interrupt Priority Register) 
        .equ NVIC_IPR10_IPR_N0_Shift, 0   @ bitWidth 8 (IPR_N0)  
        .equ NVIC_IPR10_IPR_N1_Shift, 8   @ bitWidth 8 (IPR_N1)  
        .equ NVIC_IPR10_IPR_N2_Shift, 16   @ bitWidth 8 (IPR_N2)  
        .equ NVIC_IPR10_IPR_N3_Shift, 24   @ bitWidth 8 (IPR_N3)  
 
    .equ NVIC_IPR11, NVIC_BASE + 0x42C @ (Interrupt Priority Register) 
        .equ NVIC_IPR11_IPR_N0_Shift, 0   @ bitWidth 8 (IPR_N0)  
        .equ NVIC_IPR11_IPR_N1_Shift, 8   @ bitWidth 8 (IPR_N1)  
        .equ NVIC_IPR11_IPR_N2_Shift, 16   @ bitWidth 8 (IPR_N2)  
        .equ NVIC_IPR11_IPR_N3_Shift, 24   @ bitWidth 8 (IPR_N3)  
 
    .equ NVIC_IPR12, NVIC_BASE + 0x430 @ (Interrupt Priority Register) 
        .equ NVIC_IPR12_IPR_N0_Shift, 0   @ bitWidth 8 (IPR_N0)  
        .equ NVIC_IPR12_IPR_N1_Shift, 8   @ bitWidth 8 (IPR_N1)  
        .equ NVIC_IPR12_IPR_N2_Shift, 16   @ bitWidth 8 (IPR_N2)  
        .equ NVIC_IPR12_IPR_N3_Shift, 24   @ bitWidth 8 (IPR_N3)  
 
    .equ NVIC_IPR13, NVIC_BASE + 0x434 @ (Interrupt Priority Register) 
        .equ NVIC_IPR13_IPR_N0_Shift, 0   @ bitWidth 8 (IPR_N0)  
        .equ NVIC_IPR13_IPR_N1_Shift, 8   @ bitWidth 8 (IPR_N1)  
        .equ NVIC_IPR13_IPR_N2_Shift, 16   @ bitWidth 8 (IPR_N2)  
        .equ NVIC_IPR13_IPR_N3_Shift, 24   @ bitWidth 8 (IPR_N3)  
 
    .equ NVIC_IPR14, NVIC_BASE + 0x438 @ (Interrupt Priority Register) 
        .equ NVIC_IPR14_IPR_N0_Shift, 0   @ bitWidth 8 (IPR_N0)  
        .equ NVIC_IPR14_IPR_N1_Shift, 8   @ bitWidth 8 (IPR_N1)  
        .equ NVIC_IPR14_IPR_N2_Shift, 16   @ bitWidth 8 (IPR_N2)  
        .equ NVIC_IPR14_IPR_N3_Shift, 24   @ bitWidth 8 (IPR_N3)  
 
    .equ NVIC_IPR15, NVIC_BASE + 0x43C @ (Interrupt Priority Register) 
        .equ NVIC_IPR15_IPR_N0_Shift, 0   @ bitWidth 8 (IPR_N0)  
        .equ NVIC_IPR15_IPR_N1_Shift, 8   @ bitWidth 8 (IPR_N1)  
        .equ NVIC_IPR15_IPR_N2_Shift, 16   @ bitWidth 8 (IPR_N2)  
        .equ NVIC_IPR15_IPR_N3_Shift, 24   @ bitWidth 8 (IPR_N3)  
 
    .equ NVIC_IPR16, NVIC_BASE + 0x440 @ (Interrupt Priority Register) 
        .equ NVIC_IPR16_IPR_N0_Shift, 0   @ bitWidth 8 (IPR_N0)  
        .equ NVIC_IPR16_IPR_N1_Shift, 8   @ bitWidth 8 (IPR_N1)  
        .equ NVIC_IPR16_IPR_N2_Shift, 16   @ bitWidth 8 (IPR_N2)  
        .equ NVIC_IPR16_IPR_N3_Shift, 24   @ bitWidth 8 (IPR_N3)  
 
    .equ NVIC_IPR17, NVIC_BASE + 0x444 @ (Interrupt Priority Register) 
        .equ NVIC_IPR17_IPR_N0_Shift, 0   @ bitWidth 8 (IPR_N0)  
        .equ NVIC_IPR17_IPR_N1_Shift, 8   @ bitWidth 8 (IPR_N1)  
        .equ NVIC_IPR17_IPR_N2_Shift, 16   @ bitWidth 8 (IPR_N2)  
        .equ NVIC_IPR17_IPR_N3_Shift, 24   @ bitWidth 8 (IPR_N3)  
 
    .equ NVIC_IPR18, NVIC_BASE + 0x448 @ (Interrupt Priority Register) 
        .equ NVIC_IPR18_IPR_N0_Shift, 0   @ bitWidth 8 (IPR_N0)  
        .equ NVIC_IPR18_IPR_N1_Shift, 8   @ bitWidth 8 (IPR_N1)  
        .equ NVIC_IPR18_IPR_N2_Shift, 16   @ bitWidth 8 (IPR_N2)  
        .equ NVIC_IPR18_IPR_N3_Shift, 24   @ bitWidth 8 (IPR_N3)  
 
    .equ NVIC_IPR19, NVIC_BASE + 0x44C @ (Interrupt Priority Register) 
        .equ NVIC_IPR19_IPR_N0_Shift, 0   @ bitWidth 8 (IPR_N0)  
        .equ NVIC_IPR19_IPR_N1_Shift, 8   @ bitWidth 8 (IPR_N1)  
        .equ NVIC_IPR19_IPR_N2_Shift, 16   @ bitWidth 8 (IPR_N2)  
        .equ NVIC_IPR19_IPR_N3_Shift, 24   @ bitWidth 8 (IPR_N3)  
 
