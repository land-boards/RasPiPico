@ arm-none-eabi-as equates file for STM32L4x6
@ SVD2GAS Equates Generator, Copyright Terry Porter 2017 "terry@tjporter.com.au" for arm-none-eabi-as 
@ Matthias Koch Complimentary Edition 2017
@ Takes a CMSIS-SVD file plus a hand edited config.xml file as input 
@ Licensed under the GPL, see http://www.gnu.org/licenses/


@=========================== DAC ===========================@
.equ DAC_BASE, 0x40007400 @ (Digital-to-analog converter) 
    .equ DAC_CR, DAC_BASE + 0x0 @ (control register) 
        .equ DAC_CR_EN1, 1 << 0   @ bitWidth 1 (DAC channel1 enable)  
        .equ DAC_CR_TEN1, 1 << 2   @ bitWidth 1 (DAC channel1 trigger  enable)  
        .equ DAC_CR_TSEL1_Shift, 3   @ bitWidth 3 (DAC channel1 trigger  selection)  
        .equ DAC_CR_WAVE1_Shift, 6   @ bitWidth 2 (DAC channel1 noise/triangle wave  generation enable)  
        .equ DAC_CR_MAMP1_Shift, 8   @ bitWidth 4 (DAC channel1 mask/amplitude  selector)  
        .equ DAC_CR_DMAEN1, 1 << 12   @ bitWidth 1 (DAC channel1 DMA enable)  
        .equ DAC_CR_DMAUDRIE1, 1 << 13   @ bitWidth 1 (DAC channel1 DMA Underrun Interrupt  enable)  
        .equ DAC_CR_CEN1, 1 << 14   @ bitWidth 1 (DAC Channel 1 calibration  enable)  
        .equ DAC_CR_EN2, 1 << 16   @ bitWidth 1 (DAC channel2 enable)  
        .equ DAC_CR_TEN2, 1 << 18   @ bitWidth 1 (DAC channel2 trigger  enable)  
        .equ DAC_CR_TSEL2_Shift, 19   @ bitWidth 3 (DAC channel2 trigger  selection)  
        .equ DAC_CR_WAVE2_Shift, 22   @ bitWidth 2 (DAC channel2 noise/triangle wave  generation enable)  
        .equ DAC_CR_MAMP2_Shift, 24   @ bitWidth 4 (DAC channel2 mask/amplitude  selector)  
        .equ DAC_CR_DMAEN2, 1 << 28   @ bitWidth 1 (DAC channel2 DMA enable)  
        .equ DAC_CR_DMAUDRIE2, 1 << 29   @ bitWidth 1 (DAC channel2 DMA underrun interrupt  enable)  
        .equ DAC_CR_CEN2, 1 << 30   @ bitWidth 1 (DAC Channel 2 calibration  enable)  
 
    .equ DAC_SWTRIGR, DAC_BASE + 0x4 @ (software trigger register) 
        .equ DAC_SWTRIGR_SWTRIG1, 1 << 0   @ bitWidth 1 (DAC channel1 software  trigger)  
        .equ DAC_SWTRIGR_SWTRIG2, 1 << 1   @ bitWidth 1 (DAC channel2 software  trigger)  
 
    .equ DAC_DHR12R1, DAC_BASE + 0x8 @ (channel1 12-bit right-aligned data holding  register) 
        .equ DAC_DHR12R1_DACC1DHR_Shift, 0   @ bitWidth 12 (DAC channel1 12-bit right-aligned  data)  
 
    .equ DAC_DHR12L1, DAC_BASE + 0xC @ (channel1 12-bit left-aligned data holding  register) 
        .equ DAC_DHR12L1_DACC1DHR_Shift, 4   @ bitWidth 12 (DAC channel1 12-bit left-aligned  data)  
 
    .equ DAC_DHR8R1, DAC_BASE + 0x10 @ (channel1 8-bit right-aligned data holding  register) 
        .equ DAC_DHR8R1_DACC1DHR_Shift, 0   @ bitWidth 8 (DAC channel1 8-bit right-aligned  data)  
 
    .equ DAC_DHR12R2, DAC_BASE + 0x14 @ (channel2 12-bit right aligned data holding  register) 
        .equ DAC_DHR12R2_DACC2DHR_Shift, 0   @ bitWidth 12 (DAC channel2 12-bit right-aligned  data)  
 
    .equ DAC_DHR12L2, DAC_BASE + 0x18 @ (channel2 12-bit left aligned data holding  register) 
        .equ DAC_DHR12L2_DACC2DHR_Shift, 4   @ bitWidth 12 (DAC channel2 12-bit left-aligned  data)  
 
    .equ DAC_DHR8R2, DAC_BASE + 0x1C @ (channel2 8-bit right-aligned data holding  register) 
        .equ DAC_DHR8R2_DACC2DHR_Shift, 0   @ bitWidth 8 (DAC channel2 8-bit right-aligned  data)  
 
    .equ DAC_DHR12RD, DAC_BASE + 0x20 @ (Dual DAC 12-bit right-aligned data holding  register) 
        .equ DAC_DHR12RD_DACC1DHR_Shift, 0   @ bitWidth 12 (DAC channel1 12-bit right-aligned  data)  
        .equ DAC_DHR12RD_DACC2DHR_Shift, 16   @ bitWidth 12 (DAC channel2 12-bit right-aligned  data)  
 
    .equ DAC_DHR12LD, DAC_BASE + 0x24 @ (DUAL DAC 12-bit left aligned data holding  register) 
        .equ DAC_DHR12LD_DACC1DHR_Shift, 4   @ bitWidth 12 (DAC channel1 12-bit left-aligned  data)  
        .equ DAC_DHR12LD_DACC2DHR_Shift, 20   @ bitWidth 12 (DAC channel2 12-bit left-aligned  data)  
 
    .equ DAC_DHR8RD, DAC_BASE + 0x28 @ (DUAL DAC 8-bit right aligned data holding  register) 
        .equ DAC_DHR8RD_DACC1DHR_Shift, 0   @ bitWidth 8 (DAC channel1 8-bit right-aligned  data)  
        .equ DAC_DHR8RD_DACC2DHR_Shift, 8   @ bitWidth 8 (DAC channel2 8-bit right-aligned  data)  
 
    .equ DAC_DOR1, DAC_BASE + 0x2C @ (channel1 data output register) 
        .equ DAC_DOR1_DACC1DOR_Shift, 0   @ bitWidth 12 (DAC channel1 data output)  
 
    .equ DAC_DOR2, DAC_BASE + 0x30 @ (channel2 data output register) 
        .equ DAC_DOR2_DACC2DOR_Shift, 0   @ bitWidth 12 (DAC channel2 data output)  
 
    .equ DAC_SR, DAC_BASE + 0x34 @ (status register) 
        .equ DAC_SR_DMAUDR1, 1 << 13   @ bitWidth 1 (DAC channel1 DMA underrun  flag)  
        .equ DAC_SR_CAL_FLAG1, 1 << 14   @ bitWidth 1 (DAC Channel 1 calibration offset  status)  
        .equ DAC_SR_BWST1, 1 << 15   @ bitWidth 1 (DAC Channel 1 busy writing sample time  flag)  
        .equ DAC_SR_DMAUDR2, 1 << 29   @ bitWidth 1 (DAC channel2 DMA underrun  flag)  
        .equ DAC_SR_CAL_FLAG2, 1 << 30   @ bitWidth 1 (DAC Channel 2 calibration offset  status)  
        .equ DAC_SR_BWST2, 1 << 31   @ bitWidth 1 (DAC Channel 2 busy writing sample time  flag)  
 
    .equ DAC_CCR, DAC_BASE + 0x38 @ (calibration control register) 
        .equ DAC_CCR_OTRIM1_Shift, 0   @ bitWidth 5 (DAC Channel 1 offset trimming  value)  
        .equ DAC_CCR_OTRIM2_Shift, 16   @ bitWidth 5 (DAC Channel 2 offset trimming  value)  
 
    .equ DAC_MCR, DAC_BASE + 0x3C @ (mode control register) 
        .equ DAC_MCR_MODE1_Shift, 0   @ bitWidth 3 (DAC Channel 1 mode)  
        .equ DAC_MCR_MODE2_Shift, 16   @ bitWidth 3 (DAC Channel 2 mode)  
 
    .equ DAC_SHSR1, DAC_BASE + 0x40 @ (Sample and Hold sample time register  1) 
        .equ DAC_SHSR1_TSAMPLE1_Shift, 0   @ bitWidth 10 (DAC Channel 1 sample Time)  
 
    .equ DAC_SHSR2, DAC_BASE + 0x44 @ (Sample and Hold sample time register  2) 
        .equ DAC_SHSR2_TSAMPLE2_Shift, 0   @ bitWidth 10 (DAC Channel 2 sample Time)  
 
    .equ DAC_SHHR, DAC_BASE + 0x48 @ (Sample and Hold hold time  register) 
        .equ DAC_SHHR_THOLD1_Shift, 0   @ bitWidth 10 (DAC Channel 1 hold Time)  
        .equ DAC_SHHR_THOLD2_Shift, 16   @ bitWidth 10 (DAC Channel 2 hold time)  
 
    .equ DAC_SHRR, DAC_BASE + 0x4C @ (Sample and Hold refresh time  register) 
        .equ DAC_SHRR_TREFRESH1_Shift, 0   @ bitWidth 8 (DAC Channel 1 refresh Time)  
        .equ DAC_SHRR_TREFRESH2_Shift, 16   @ bitWidth 8 (DAC Channel 2 refresh Time)  
 

@=========================== DMA1 ===========================@
.equ DMA1_BASE, 0x40020000 @ (Direct memory access controller) 
    .equ DMA1_ISR, DMA1_BASE + 0x0 @ (interrupt status register) 
        .equ DMA1_ISR_TEIF7, 1 << 27   @ bitWidth 1 (Channel x transfer error flag x = 1  ..7)  
        .equ DMA1_ISR_HTIF7, 1 << 26   @ bitWidth 1 (Channel x half transfer flag x = 1  ..7)  
        .equ DMA1_ISR_TCIF7, 1 << 25   @ bitWidth 1 (Channel x transfer complete flag x = 1  ..7)  
        .equ DMA1_ISR_GIF7, 1 << 24   @ bitWidth 1 (Channel x global interrupt flag x = 1  ..7)  
        .equ DMA1_ISR_TEIF6, 1 << 23   @ bitWidth 1 (Channel x transfer error flag x = 1  ..7)  
        .equ DMA1_ISR_HTIF6, 1 << 22   @ bitWidth 1 (Channel x half transfer flag x = 1  ..7)  
        .equ DMA1_ISR_TCIF6, 1 << 21   @ bitWidth 1 (Channel x transfer complete flag x = 1  ..7)  
        .equ DMA1_ISR_GIF6, 1 << 20   @ bitWidth 1 (Channel x global interrupt flag x = 1  ..7)  
        .equ DMA1_ISR_TEIF5, 1 << 19   @ bitWidth 1 (Channel x transfer error flag x = 1  ..7)  
        .equ DMA1_ISR_HTIF5, 1 << 18   @ bitWidth 1 (Channel x half transfer flag x = 1  ..7)  
        .equ DMA1_ISR_TCIF5, 1 << 17   @ bitWidth 1 (Channel x transfer complete flag x = 1  ..7)  
        .equ DMA1_ISR_GIF5, 1 << 16   @ bitWidth 1 (Channel x global interrupt flag x = 1  ..7)  
        .equ DMA1_ISR_TEIF4, 1 << 15   @ bitWidth 1 (Channel x transfer error flag x = 1  ..7)  
        .equ DMA1_ISR_HTIF4, 1 << 14   @ bitWidth 1 (Channel x half transfer flag x = 1  ..7)  
        .equ DMA1_ISR_TCIF4, 1 << 13   @ bitWidth 1 (Channel x transfer complete flag x = 1  ..7)  
        .equ DMA1_ISR_GIF4, 1 << 12   @ bitWidth 1 (Channel x global interrupt flag x = 1  ..7)  
        .equ DMA1_ISR_TEIF3, 1 << 11   @ bitWidth 1 (Channel x transfer error flag x = 1  ..7)  
        .equ DMA1_ISR_HTIF3, 1 << 10   @ bitWidth 1 (Channel x half transfer flag x = 1  ..7)  
        .equ DMA1_ISR_TCIF3, 1 << 9   @ bitWidth 1 (Channel x transfer complete flag x = 1  ..7)  
        .equ DMA1_ISR_GIF3, 1 << 8   @ bitWidth 1 (Channel x global interrupt flag x = 1  ..7)  
        .equ DMA1_ISR_TEIF2, 1 << 7   @ bitWidth 1 (Channel x transfer error flag x = 1  ..7)  
        .equ DMA1_ISR_HTIF2, 1 << 6   @ bitWidth 1 (Channel x half transfer flag x = 1  ..7)  
        .equ DMA1_ISR_TCIF2, 1 << 5   @ bitWidth 1 (Channel x transfer complete flag x = 1  ..7)  
        .equ DMA1_ISR_GIF2, 1 << 4   @ bitWidth 1 (Channel x global interrupt flag x = 1  ..7)  
        .equ DMA1_ISR_TEIF1, 1 << 3   @ bitWidth 1 (Channel x transfer error flag x = 1  ..7)  
        .equ DMA1_ISR_HTIF1, 1 << 2   @ bitWidth 1 (Channel x half transfer flag x = 1  ..7)  
        .equ DMA1_ISR_TCIF1, 1 << 1   @ bitWidth 1 (Channel x transfer complete flag x = 1  ..7)  
        .equ DMA1_ISR_GIF1, 1 << 0   @ bitWidth 1 (Channel x global interrupt flag x = 1  ..7)  
 
    .equ DMA1_IFCR, DMA1_BASE + 0x4 @ (interrupt flag clear register) 
        .equ DMA1_IFCR_CTEIF7, 1 << 27   @ bitWidth 1 (Channel x transfer error clear x = 1  ..7)  
        .equ DMA1_IFCR_CHTIF7, 1 << 26   @ bitWidth 1 (Channel x half transfer clear x = 1  ..7)  
        .equ DMA1_IFCR_CTCIF7, 1 << 25   @ bitWidth 1 (Channel x transfer complete clear x = 1  ..7)  
        .equ DMA1_IFCR_CGIF7, 1 << 24   @ bitWidth 1 (Channel x global interrupt clear x = 1  ..7)  
        .equ DMA1_IFCR_CTEIF6, 1 << 23   @ bitWidth 1 (Channel x transfer error clear x = 1  ..7)  
        .equ DMA1_IFCR_CHTIF6, 1 << 22   @ bitWidth 1 (Channel x half transfer clear x = 1  ..7)  
        .equ DMA1_IFCR_CTCIF6, 1 << 21   @ bitWidth 1 (Channel x transfer complete clear x = 1  ..7)  
        .equ DMA1_IFCR_CGIF6, 1 << 20   @ bitWidth 1 (Channel x global interrupt clear x = 1  ..7)  
        .equ DMA1_IFCR_CTEIF5, 1 << 19   @ bitWidth 1 (Channel x transfer error clear x = 1  ..7)  
        .equ DMA1_IFCR_CHTIF5, 1 << 18   @ bitWidth 1 (Channel x half transfer clear x = 1  ..7)  
        .equ DMA1_IFCR_CTCIF5, 1 << 17   @ bitWidth 1 (Channel x transfer complete clear x = 1  ..7)  
        .equ DMA1_IFCR_CGIF5, 1 << 16   @ bitWidth 1 (Channel x global interrupt clear x = 1  ..7)  
        .equ DMA1_IFCR_CTEIF4, 1 << 15   @ bitWidth 1 (Channel x transfer error clear x = 1  ..7)  
        .equ DMA1_IFCR_CHTIF4, 1 << 14   @ bitWidth 1 (Channel x half transfer clear x = 1  ..7)  
        .equ DMA1_IFCR_CTCIF4, 1 << 13   @ bitWidth 1 (Channel x transfer complete clear x = 1  ..7)  
        .equ DMA1_IFCR_CGIF4, 1 << 12   @ bitWidth 1 (Channel x global interrupt clear x = 1  ..7)  
        .equ DMA1_IFCR_CTEIF3, 1 << 11   @ bitWidth 1 (Channel x transfer error clear x = 1  ..7)  
        .equ DMA1_IFCR_CHTIF3, 1 << 10   @ bitWidth 1 (Channel x half transfer clear x = 1  ..7)  
        .equ DMA1_IFCR_CTCIF3, 1 << 9   @ bitWidth 1 (Channel x transfer complete clear x = 1  ..7)  
        .equ DMA1_IFCR_CGIF3, 1 << 8   @ bitWidth 1 (Channel x global interrupt clear x = 1  ..7)  
        .equ DMA1_IFCR_CTEIF2, 1 << 7   @ bitWidth 1 (Channel x transfer error clear x = 1  ..7)  
        .equ DMA1_IFCR_CHTIF2, 1 << 6   @ bitWidth 1 (Channel x half transfer clear x = 1  ..7)  
        .equ DMA1_IFCR_CTCIF2, 1 << 5   @ bitWidth 1 (Channel x transfer complete clear x = 1  ..7)  
        .equ DMA1_IFCR_CGIF2, 1 << 4   @ bitWidth 1 (Channel x global interrupt clear x = 1  ..7)  
        .equ DMA1_IFCR_CTEIF1, 1 << 3   @ bitWidth 1 (Channel x transfer error clear x = 1  ..7)  
        .equ DMA1_IFCR_CHTIF1, 1 << 2   @ bitWidth 1 (Channel x half transfer clear x = 1  ..7)  
        .equ DMA1_IFCR_CTCIF1, 1 << 1   @ bitWidth 1 (Channel x transfer complete clear x = 1  ..7)  
        .equ DMA1_IFCR_CGIF1, 1 << 0   @ bitWidth 1 (Channel x global interrupt clear x = 1  ..7)  
 
    .equ DMA1_CCR1, DMA1_BASE + 0x8 @ (channel x configuration  register) 
        .equ DMA1_CCR1_MEM2MEM, 1 << 14   @ bitWidth 1 (Memory to memory mode)  
        .equ DMA1_CCR1_PL_Shift, 12   @ bitWidth 2 (Channel priority level)  
        .equ DMA1_CCR1_MSIZE_Shift, 10   @ bitWidth 2 (Memory size)  
        .equ DMA1_CCR1_PSIZE_Shift, 8   @ bitWidth 2 (Peripheral size)  
        .equ DMA1_CCR1_MINC, 1 << 7   @ bitWidth 1 (Memory increment mode)  
        .equ DMA1_CCR1_PINC, 1 << 6   @ bitWidth 1 (Peripheral increment mode)  
        .equ DMA1_CCR1_CIRC, 1 << 5   @ bitWidth 1 (Circular mode)  
        .equ DMA1_CCR1_DIR, 1 << 4   @ bitWidth 1 (Data transfer direction)  
        .equ DMA1_CCR1_TEIE, 1 << 3   @ bitWidth 1 (Transfer error interrupt  enable)  
        .equ DMA1_CCR1_HTIE, 1 << 2   @ bitWidth 1 (Half transfer interrupt  enable)  
        .equ DMA1_CCR1_TCIE, 1 << 1   @ bitWidth 1 (Transfer complete interrupt  enable)  
        .equ DMA1_CCR1_EN, 1 << 0   @ bitWidth 1 (Channel enable)  
 
    .equ DMA1_CNDTR1, DMA1_BASE + 0xC @ (channel x number of data  register) 
        .equ DMA1_CNDTR1_NDT_Shift, 0   @ bitWidth 16 (Number of data to transfer)  
 
    .equ DMA1_CPAR1, DMA1_BASE + 0x10 @ (channel x peripheral address  register) 
        .equ DMA1_CPAR1_PA_Shift, 0   @ bitWidth 32 (Peripheral address)  
 
    .equ DMA1_CMAR1, DMA1_BASE + 0x14 @ (channel x memory address  register) 
        .equ DMA1_CMAR1_MA_Shift, 0   @ bitWidth 32 (Memory address)  
 
    .equ DMA1_CCR2, DMA1_BASE + 0x1C @ (channel x configuration  register) 
        .equ DMA1_CCR2_MEM2MEM, 1 << 14   @ bitWidth 1 (Memory to memory mode)  
        .equ DMA1_CCR2_PL_Shift, 12   @ bitWidth 2 (Channel priority level)  
        .equ DMA1_CCR2_MSIZE_Shift, 10   @ bitWidth 2 (Memory size)  
        .equ DMA1_CCR2_PSIZE_Shift, 8   @ bitWidth 2 (Peripheral size)  
        .equ DMA1_CCR2_MINC, 1 << 7   @ bitWidth 1 (Memory increment mode)  
        .equ DMA1_CCR2_PINC, 1 << 6   @ bitWidth 1 (Peripheral increment mode)  
        .equ DMA1_CCR2_CIRC, 1 << 5   @ bitWidth 1 (Circular mode)  
        .equ DMA1_CCR2_DIR, 1 << 4   @ bitWidth 1 (Data transfer direction)  
        .equ DMA1_CCR2_TEIE, 1 << 3   @ bitWidth 1 (Transfer error interrupt  enable)  
        .equ DMA1_CCR2_HTIE, 1 << 2   @ bitWidth 1 (Half transfer interrupt  enable)  
        .equ DMA1_CCR2_TCIE, 1 << 1   @ bitWidth 1 (Transfer complete interrupt  enable)  
        .equ DMA1_CCR2_EN, 1 << 0   @ bitWidth 1 (Channel enable)  
 
    .equ DMA1_CNDTR2, DMA1_BASE + 0x20 @ (channel x number of data  register) 
        .equ DMA1_CNDTR2_NDT_Shift, 0   @ bitWidth 16 (Number of data to transfer)  
 
    .equ DMA1_CPAR2, DMA1_BASE + 0x24 @ (channel x peripheral address  register) 
        .equ DMA1_CPAR2_PA_Shift, 0   @ bitWidth 32 (Peripheral address)  
 
    .equ DMA1_CMAR2, DMA1_BASE + 0x28 @ (channel x memory address  register) 
        .equ DMA1_CMAR2_MA_Shift, 0   @ bitWidth 32 (Memory address)  
 
    .equ DMA1_CCR3, DMA1_BASE + 0x30 @ (channel x configuration  register) 
        .equ DMA1_CCR3_MEM2MEM, 1 << 14   @ bitWidth 1 (Memory to memory mode)  
        .equ DMA1_CCR3_PL_Shift, 12   @ bitWidth 2 (Channel priority level)  
        .equ DMA1_CCR3_MSIZE_Shift, 10   @ bitWidth 2 (Memory size)  
        .equ DMA1_CCR3_PSIZE_Shift, 8   @ bitWidth 2 (Peripheral size)  
        .equ DMA1_CCR3_MINC, 1 << 7   @ bitWidth 1 (Memory increment mode)  
        .equ DMA1_CCR3_PINC, 1 << 6   @ bitWidth 1 (Peripheral increment mode)  
        .equ DMA1_CCR3_CIRC, 1 << 5   @ bitWidth 1 (Circular mode)  
        .equ DMA1_CCR3_DIR, 1 << 4   @ bitWidth 1 (Data transfer direction)  
        .equ DMA1_CCR3_TEIE, 1 << 3   @ bitWidth 1 (Transfer error interrupt  enable)  
        .equ DMA1_CCR3_HTIE, 1 << 2   @ bitWidth 1 (Half transfer interrupt  enable)  
        .equ DMA1_CCR3_TCIE, 1 << 1   @ bitWidth 1 (Transfer complete interrupt  enable)  
        .equ DMA1_CCR3_EN, 1 << 0   @ bitWidth 1 (Channel enable)  
 
    .equ DMA1_CNDTR3, DMA1_BASE + 0x34 @ (channel x number of data  register) 
        .equ DMA1_CNDTR3_NDT_Shift, 0   @ bitWidth 16 (Number of data to transfer)  
 
    .equ DMA1_CPAR3, DMA1_BASE + 0x38 @ (channel x peripheral address  register) 
        .equ DMA1_CPAR3_PA_Shift, 0   @ bitWidth 32 (Peripheral address)  
 
    .equ DMA1_CMAR3, DMA1_BASE + 0x3C @ (channel x memory address  register) 
        .equ DMA1_CMAR3_MA_Shift, 0   @ bitWidth 32 (Memory address)  
 
    .equ DMA1_CCR4, DMA1_BASE + 0x44 @ (channel x configuration  register) 
        .equ DMA1_CCR4_MEM2MEM, 1 << 14   @ bitWidth 1 (Memory to memory mode)  
        .equ DMA1_CCR4_PL_Shift, 12   @ bitWidth 2 (Channel priority level)  
        .equ DMA1_CCR4_MSIZE_Shift, 10   @ bitWidth 2 (Memory size)  
        .equ DMA1_CCR4_PSIZE_Shift, 8   @ bitWidth 2 (Peripheral size)  
        .equ DMA1_CCR4_MINC, 1 << 7   @ bitWidth 1 (Memory increment mode)  
        .equ DMA1_CCR4_PINC, 1 << 6   @ bitWidth 1 (Peripheral increment mode)  
        .equ DMA1_CCR4_CIRC, 1 << 5   @ bitWidth 1 (Circular mode)  
        .equ DMA1_CCR4_DIR, 1 << 4   @ bitWidth 1 (Data transfer direction)  
        .equ DMA1_CCR4_TEIE, 1 << 3   @ bitWidth 1 (Transfer error interrupt  enable)  
        .equ DMA1_CCR4_HTIE, 1 << 2   @ bitWidth 1 (Half transfer interrupt  enable)  
        .equ DMA1_CCR4_TCIE, 1 << 1   @ bitWidth 1 (Transfer complete interrupt  enable)  
        .equ DMA1_CCR4_EN, 1 << 0   @ bitWidth 1 (Channel enable)  
 
    .equ DMA1_CNDTR4, DMA1_BASE + 0x48 @ (channel x number of data  register) 
        .equ DMA1_CNDTR4_NDT_Shift, 0   @ bitWidth 16 (Number of data to transfer)  
 
    .equ DMA1_CPAR4, DMA1_BASE + 0x4C @ (channel x peripheral address  register) 
        .equ DMA1_CPAR4_PA_Shift, 0   @ bitWidth 32 (Peripheral address)  
 
    .equ DMA1_CMAR4, DMA1_BASE + 0x50 @ (channel x memory address  register) 
        .equ DMA1_CMAR4_MA_Shift, 0   @ bitWidth 32 (Memory address)  
 
    .equ DMA1_CCR5, DMA1_BASE + 0x58 @ (channel x configuration  register) 
        .equ DMA1_CCR5_MEM2MEM, 1 << 14   @ bitWidth 1 (Memory to memory mode)  
        .equ DMA1_CCR5_PL_Shift, 12   @ bitWidth 2 (Channel priority level)  
        .equ DMA1_CCR5_MSIZE_Shift, 10   @ bitWidth 2 (Memory size)  
        .equ DMA1_CCR5_PSIZE_Shift, 8   @ bitWidth 2 (Peripheral size)  
        .equ DMA1_CCR5_MINC, 1 << 7   @ bitWidth 1 (Memory increment mode)  
        .equ DMA1_CCR5_PINC, 1 << 6   @ bitWidth 1 (Peripheral increment mode)  
        .equ DMA1_CCR5_CIRC, 1 << 5   @ bitWidth 1 (Circular mode)  
        .equ DMA1_CCR5_DIR, 1 << 4   @ bitWidth 1 (Data transfer direction)  
        .equ DMA1_CCR5_TEIE, 1 << 3   @ bitWidth 1 (Transfer error interrupt  enable)  
        .equ DMA1_CCR5_HTIE, 1 << 2   @ bitWidth 1 (Half transfer interrupt  enable)  
        .equ DMA1_CCR5_TCIE, 1 << 1   @ bitWidth 1 (Transfer complete interrupt  enable)  
        .equ DMA1_CCR5_EN, 1 << 0   @ bitWidth 1 (Channel enable)  
 
    .equ DMA1_CNDTR5, DMA1_BASE + 0x5C @ (channel x number of data  register) 
        .equ DMA1_CNDTR5_NDT_Shift, 0   @ bitWidth 16 (Number of data to transfer)  
 
    .equ DMA1_CPAR5, DMA1_BASE + 0x60 @ (channel x peripheral address  register) 
        .equ DMA1_CPAR5_PA_Shift, 0   @ bitWidth 32 (Peripheral address)  
 
    .equ DMA1_CMAR5, DMA1_BASE + 0x64 @ (channel x memory address  register) 
        .equ DMA1_CMAR5_MA_Shift, 0   @ bitWidth 32 (Memory address)  
 
    .equ DMA1_CCR6, DMA1_BASE + 0x6C @ (channel x configuration  register) 
        .equ DMA1_CCR6_MEM2MEM, 1 << 14   @ bitWidth 1 (Memory to memory mode)  
        .equ DMA1_CCR6_PL_Shift, 12   @ bitWidth 2 (Channel priority level)  
        .equ DMA1_CCR6_MSIZE_Shift, 10   @ bitWidth 2 (Memory size)  
        .equ DMA1_CCR6_PSIZE_Shift, 8   @ bitWidth 2 (Peripheral size)  
        .equ DMA1_CCR6_MINC, 1 << 7   @ bitWidth 1 (Memory increment mode)  
        .equ DMA1_CCR6_PINC, 1 << 6   @ bitWidth 1 (Peripheral increment mode)  
        .equ DMA1_CCR6_CIRC, 1 << 5   @ bitWidth 1 (Circular mode)  
        .equ DMA1_CCR6_DIR, 1 << 4   @ bitWidth 1 (Data transfer direction)  
        .equ DMA1_CCR6_TEIE, 1 << 3   @ bitWidth 1 (Transfer error interrupt  enable)  
        .equ DMA1_CCR6_HTIE, 1 << 2   @ bitWidth 1 (Half transfer interrupt  enable)  
        .equ DMA1_CCR6_TCIE, 1 << 1   @ bitWidth 1 (Transfer complete interrupt  enable)  
        .equ DMA1_CCR6_EN, 1 << 0   @ bitWidth 1 (Channel enable)  
 
    .equ DMA1_CNDTR6, DMA1_BASE + 0x70 @ (channel x number of data  register) 
        .equ DMA1_CNDTR6_NDT_Shift, 0   @ bitWidth 16 (Number of data to transfer)  
 
    .equ DMA1_CPAR6, DMA1_BASE + 0x74 @ (channel x peripheral address  register) 
        .equ DMA1_CPAR6_PA_Shift, 0   @ bitWidth 32 (Peripheral address)  
 
    .equ DMA1_CMAR6, DMA1_BASE + 0x78 @ (channel x memory address  register) 
        .equ DMA1_CMAR6_MA_Shift, 0   @ bitWidth 32 (Memory address)  
 
    .equ DMA1_CCR7, DMA1_BASE + 0x80 @ (channel x configuration  register) 
        .equ DMA1_CCR7_MEM2MEM, 1 << 14   @ bitWidth 1 (Memory to memory mode)  
        .equ DMA1_CCR7_PL_Shift, 12   @ bitWidth 2 (Channel priority level)  
        .equ DMA1_CCR7_MSIZE_Shift, 10   @ bitWidth 2 (Memory size)  
        .equ DMA1_CCR7_PSIZE_Shift, 8   @ bitWidth 2 (Peripheral size)  
        .equ DMA1_CCR7_MINC, 1 << 7   @ bitWidth 1 (Memory increment mode)  
        .equ DMA1_CCR7_PINC, 1 << 6   @ bitWidth 1 (Peripheral increment mode)  
        .equ DMA1_CCR7_CIRC, 1 << 5   @ bitWidth 1 (Circular mode)  
        .equ DMA1_CCR7_DIR, 1 << 4   @ bitWidth 1 (Data transfer direction)  
        .equ DMA1_CCR7_TEIE, 1 << 3   @ bitWidth 1 (Transfer error interrupt  enable)  
        .equ DMA1_CCR7_HTIE, 1 << 2   @ bitWidth 1 (Half transfer interrupt  enable)  
        .equ DMA1_CCR7_TCIE, 1 << 1   @ bitWidth 1 (Transfer complete interrupt  enable)  
        .equ DMA1_CCR7_EN, 1 << 0   @ bitWidth 1 (Channel enable)  
 
    .equ DMA1_CNDTR7, DMA1_BASE + 0x84 @ (channel x number of data  register) 
        .equ DMA1_CNDTR7_NDT_Shift, 0   @ bitWidth 16 (Number of data to transfer)  
 
    .equ DMA1_CPAR7, DMA1_BASE + 0x88 @ (channel x peripheral address  register) 
        .equ DMA1_CPAR7_PA_Shift, 0   @ bitWidth 32 (Peripheral address)  
 
    .equ DMA1_CMAR7, DMA1_BASE + 0x8C @ (channel x memory address  register) 
        .equ DMA1_CMAR7_MA_Shift, 0   @ bitWidth 32 (Memory address)  
 
    .equ DMA1_CSELR, DMA1_BASE + 0xA8 @ (channel selection register) 
        .equ DMA1_CSELR_C7S_Shift, 24   @ bitWidth 4 (DMA channel 7 selection)  
        .equ DMA1_CSELR_C6S_Shift, 20   @ bitWidth 4 (DMA channel 6 selection)  
        .equ DMA1_CSELR_C5S_Shift, 16   @ bitWidth 4 (DMA channel 5 selection)  
        .equ DMA1_CSELR_C4S_Shift, 12   @ bitWidth 4 (DMA channel 4 selection)  
        .equ DMA1_CSELR_C3S_Shift, 8   @ bitWidth 4 (DMA channel 3 selection)  
        .equ DMA1_CSELR_C2S_Shift, 4   @ bitWidth 4 (DMA channel 2 selection)  
        .equ DMA1_CSELR_C1S_Shift, 0   @ bitWidth 4 (DMA channel 1 selection)  
 

@=========================== DMA2 ===========================@
.equ DMA2_BASE, 0x40020400 @ (Direct memory access controller) 
    .equ DMA2_ISR, DMA2_BASE + 0x0 @ (interrupt status register) 
        .equ DMA2_ISR_TEIF7, 1 << 27   @ bitWidth 1 (Channel x transfer error flag x = 1  ..7)  
        .equ DMA2_ISR_HTIF7, 1 << 26   @ bitWidth 1 (Channel x half transfer flag x = 1  ..7)  
        .equ DMA2_ISR_TCIF7, 1 << 25   @ bitWidth 1 (Channel x transfer complete flag x = 1  ..7)  
        .equ DMA2_ISR_GIF7, 1 << 24   @ bitWidth 1 (Channel x global interrupt flag x = 1  ..7)  
        .equ DMA2_ISR_TEIF6, 1 << 23   @ bitWidth 1 (Channel x transfer error flag x = 1  ..7)  
        .equ DMA2_ISR_HTIF6, 1 << 22   @ bitWidth 1 (Channel x half transfer flag x = 1  ..7)  
        .equ DMA2_ISR_TCIF6, 1 << 21   @ bitWidth 1 (Channel x transfer complete flag x = 1  ..7)  
        .equ DMA2_ISR_GIF6, 1 << 20   @ bitWidth 1 (Channel x global interrupt flag x = 1  ..7)  
        .equ DMA2_ISR_TEIF5, 1 << 19   @ bitWidth 1 (Channel x transfer error flag x = 1  ..7)  
        .equ DMA2_ISR_HTIF5, 1 << 18   @ bitWidth 1 (Channel x half transfer flag x = 1  ..7)  
        .equ DMA2_ISR_TCIF5, 1 << 17   @ bitWidth 1 (Channel x transfer complete flag x = 1  ..7)  
        .equ DMA2_ISR_GIF5, 1 << 16   @ bitWidth 1 (Channel x global interrupt flag x = 1  ..7)  
        .equ DMA2_ISR_TEIF4, 1 << 15   @ bitWidth 1 (Channel x transfer error flag x = 1  ..7)  
        .equ DMA2_ISR_HTIF4, 1 << 14   @ bitWidth 1 (Channel x half transfer flag x = 1  ..7)  
        .equ DMA2_ISR_TCIF4, 1 << 13   @ bitWidth 1 (Channel x transfer complete flag x = 1  ..7)  
        .equ DMA2_ISR_GIF4, 1 << 12   @ bitWidth 1 (Channel x global interrupt flag x = 1  ..7)  
        .equ DMA2_ISR_TEIF3, 1 << 11   @ bitWidth 1 (Channel x transfer error flag x = 1  ..7)  
        .equ DMA2_ISR_HTIF3, 1 << 10   @ bitWidth 1 (Channel x half transfer flag x = 1  ..7)  
        .equ DMA2_ISR_TCIF3, 1 << 9   @ bitWidth 1 (Channel x transfer complete flag x = 1  ..7)  
        .equ DMA2_ISR_GIF3, 1 << 8   @ bitWidth 1 (Channel x global interrupt flag x = 1  ..7)  
        .equ DMA2_ISR_TEIF2, 1 << 7   @ bitWidth 1 (Channel x transfer error flag x = 1  ..7)  
        .equ DMA2_ISR_HTIF2, 1 << 6   @ bitWidth 1 (Channel x half transfer flag x = 1  ..7)  
        .equ DMA2_ISR_TCIF2, 1 << 5   @ bitWidth 1 (Channel x transfer complete flag x = 1  ..7)  
        .equ DMA2_ISR_GIF2, 1 << 4   @ bitWidth 1 (Channel x global interrupt flag x = 1  ..7)  
        .equ DMA2_ISR_TEIF1, 1 << 3   @ bitWidth 1 (Channel x transfer error flag x = 1  ..7)  
        .equ DMA2_ISR_HTIF1, 1 << 2   @ bitWidth 1 (Channel x half transfer flag x = 1  ..7)  
        .equ DMA2_ISR_TCIF1, 1 << 1   @ bitWidth 1 (Channel x transfer complete flag x = 1  ..7)  
        .equ DMA2_ISR_GIF1, 1 << 0   @ bitWidth 1 (Channel x global interrupt flag x = 1  ..7)  
 
    .equ DMA2_IFCR, DMA2_BASE + 0x4 @ (interrupt flag clear register) 
        .equ DMA2_IFCR_CTEIF7, 1 << 27   @ bitWidth 1 (Channel x transfer error clear x = 1  ..7)  
        .equ DMA2_IFCR_CHTIF7, 1 << 26   @ bitWidth 1 (Channel x half transfer clear x = 1  ..7)  
        .equ DMA2_IFCR_CTCIF7, 1 << 25   @ bitWidth 1 (Channel x transfer complete clear x = 1  ..7)  
        .equ DMA2_IFCR_CGIF7, 1 << 24   @ bitWidth 1 (Channel x global interrupt clear x = 1  ..7)  
        .equ DMA2_IFCR_CTEIF6, 1 << 23   @ bitWidth 1 (Channel x transfer error clear x = 1  ..7)  
        .equ DMA2_IFCR_CHTIF6, 1 << 22   @ bitWidth 1 (Channel x half transfer clear x = 1  ..7)  
        .equ DMA2_IFCR_CTCIF6, 1 << 21   @ bitWidth 1 (Channel x transfer complete clear x = 1  ..7)  
        .equ DMA2_IFCR_CGIF6, 1 << 20   @ bitWidth 1 (Channel x global interrupt clear x = 1  ..7)  
        .equ DMA2_IFCR_CTEIF5, 1 << 19   @ bitWidth 1 (Channel x transfer error clear x = 1  ..7)  
        .equ DMA2_IFCR_CHTIF5, 1 << 18   @ bitWidth 1 (Channel x half transfer clear x = 1  ..7)  
        .equ DMA2_IFCR_CTCIF5, 1 << 17   @ bitWidth 1 (Channel x transfer complete clear x = 1  ..7)  
        .equ DMA2_IFCR_CGIF5, 1 << 16   @ bitWidth 1 (Channel x global interrupt clear x = 1  ..7)  
        .equ DMA2_IFCR_CTEIF4, 1 << 15   @ bitWidth 1 (Channel x transfer error clear x = 1  ..7)  
        .equ DMA2_IFCR_CHTIF4, 1 << 14   @ bitWidth 1 (Channel x half transfer clear x = 1  ..7)  
        .equ DMA2_IFCR_CTCIF4, 1 << 13   @ bitWidth 1 (Channel x transfer complete clear x = 1  ..7)  
        .equ DMA2_IFCR_CGIF4, 1 << 12   @ bitWidth 1 (Channel x global interrupt clear x = 1  ..7)  
        .equ DMA2_IFCR_CTEIF3, 1 << 11   @ bitWidth 1 (Channel x transfer error clear x = 1  ..7)  
        .equ DMA2_IFCR_CHTIF3, 1 << 10   @ bitWidth 1 (Channel x half transfer clear x = 1  ..7)  
        .equ DMA2_IFCR_CTCIF3, 1 << 9   @ bitWidth 1 (Channel x transfer complete clear x = 1  ..7)  
        .equ DMA2_IFCR_CGIF3, 1 << 8   @ bitWidth 1 (Channel x global interrupt clear x = 1  ..7)  
        .equ DMA2_IFCR_CTEIF2, 1 << 7   @ bitWidth 1 (Channel x transfer error clear x = 1  ..7)  
        .equ DMA2_IFCR_CHTIF2, 1 << 6   @ bitWidth 1 (Channel x half transfer clear x = 1  ..7)  
        .equ DMA2_IFCR_CTCIF2, 1 << 5   @ bitWidth 1 (Channel x transfer complete clear x = 1  ..7)  
        .equ DMA2_IFCR_CGIF2, 1 << 4   @ bitWidth 1 (Channel x global interrupt clear x = 1  ..7)  
        .equ DMA2_IFCR_CTEIF1, 1 << 3   @ bitWidth 1 (Channel x transfer error clear x = 1  ..7)  
        .equ DMA2_IFCR_CHTIF1, 1 << 2   @ bitWidth 1 (Channel x half transfer clear x = 1  ..7)  
        .equ DMA2_IFCR_CTCIF1, 1 << 1   @ bitWidth 1 (Channel x transfer complete clear x = 1  ..7)  
        .equ DMA2_IFCR_CGIF1, 1 << 0   @ bitWidth 1 (Channel x global interrupt clear x = 1  ..7)  
 
    .equ DMA2_CCR1, DMA2_BASE + 0x8 @ (channel x configuration  register) 
        .equ DMA2_CCR1_MEM2MEM, 1 << 14   @ bitWidth 1 (Memory to memory mode)  
        .equ DMA2_CCR1_PL_Shift, 12   @ bitWidth 2 (Channel priority level)  
        .equ DMA2_CCR1_MSIZE_Shift, 10   @ bitWidth 2 (Memory size)  
        .equ DMA2_CCR1_PSIZE_Shift, 8   @ bitWidth 2 (Peripheral size)  
        .equ DMA2_CCR1_MINC, 1 << 7   @ bitWidth 1 (Memory increment mode)  
        .equ DMA2_CCR1_PINC, 1 << 6   @ bitWidth 1 (Peripheral increment mode)  
        .equ DMA2_CCR1_CIRC, 1 << 5   @ bitWidth 1 (Circular mode)  
        .equ DMA2_CCR1_DIR, 1 << 4   @ bitWidth 1 (Data transfer direction)  
        .equ DMA2_CCR1_TEIE, 1 << 3   @ bitWidth 1 (Transfer error interrupt  enable)  
        .equ DMA2_CCR1_HTIE, 1 << 2   @ bitWidth 1 (Half transfer interrupt  enable)  
        .equ DMA2_CCR1_TCIE, 1 << 1   @ bitWidth 1 (Transfer complete interrupt  enable)  
        .equ DMA2_CCR1_EN, 1 << 0   @ bitWidth 1 (Channel enable)  
 
    .equ DMA2_CNDTR1, DMA2_BASE + 0xC @ (channel x number of data  register) 
        .equ DMA2_CNDTR1_NDT_Shift, 0   @ bitWidth 16 (Number of data to transfer)  
 
    .equ DMA2_CPAR1, DMA2_BASE + 0x10 @ (channel x peripheral address  register) 
        .equ DMA2_CPAR1_PA_Shift, 0   @ bitWidth 32 (Peripheral address)  
 
    .equ DMA2_CMAR1, DMA2_BASE + 0x14 @ (channel x memory address  register) 
        .equ DMA2_CMAR1_MA_Shift, 0   @ bitWidth 32 (Memory address)  
 
    .equ DMA2_CCR2, DMA2_BASE + 0x1C @ (channel x configuration  register) 
        .equ DMA2_CCR2_MEM2MEM, 1 << 14   @ bitWidth 1 (Memory to memory mode)  
        .equ DMA2_CCR2_PL_Shift, 12   @ bitWidth 2 (Channel priority level)  
        .equ DMA2_CCR2_MSIZE_Shift, 10   @ bitWidth 2 (Memory size)  
        .equ DMA2_CCR2_PSIZE_Shift, 8   @ bitWidth 2 (Peripheral size)  
        .equ DMA2_CCR2_MINC, 1 << 7   @ bitWidth 1 (Memory increment mode)  
        .equ DMA2_CCR2_PINC, 1 << 6   @ bitWidth 1 (Peripheral increment mode)  
        .equ DMA2_CCR2_CIRC, 1 << 5   @ bitWidth 1 (Circular mode)  
        .equ DMA2_CCR2_DIR, 1 << 4   @ bitWidth 1 (Data transfer direction)  
        .equ DMA2_CCR2_TEIE, 1 << 3   @ bitWidth 1 (Transfer error interrupt  enable)  
        .equ DMA2_CCR2_HTIE, 1 << 2   @ bitWidth 1 (Half transfer interrupt  enable)  
        .equ DMA2_CCR2_TCIE, 1 << 1   @ bitWidth 1 (Transfer complete interrupt  enable)  
        .equ DMA2_CCR2_EN, 1 << 0   @ bitWidth 1 (Channel enable)  
 
    .equ DMA2_CNDTR2, DMA2_BASE + 0x20 @ (channel x number of data  register) 
        .equ DMA2_CNDTR2_NDT_Shift, 0   @ bitWidth 16 (Number of data to transfer)  
 
    .equ DMA2_CPAR2, DMA2_BASE + 0x24 @ (channel x peripheral address  register) 
        .equ DMA2_CPAR2_PA_Shift, 0   @ bitWidth 32 (Peripheral address)  
 
    .equ DMA2_CMAR2, DMA2_BASE + 0x28 @ (channel x memory address  register) 
        .equ DMA2_CMAR2_MA_Shift, 0   @ bitWidth 32 (Memory address)  
 
    .equ DMA2_CCR3, DMA2_BASE + 0x30 @ (channel x configuration  register) 
        .equ DMA2_CCR3_MEM2MEM, 1 << 14   @ bitWidth 1 (Memory to memory mode)  
        .equ DMA2_CCR3_PL_Shift, 12   @ bitWidth 2 (Channel priority level)  
        .equ DMA2_CCR3_MSIZE_Shift, 10   @ bitWidth 2 (Memory size)  
        .equ DMA2_CCR3_PSIZE_Shift, 8   @ bitWidth 2 (Peripheral size)  
        .equ DMA2_CCR3_MINC, 1 << 7   @ bitWidth 1 (Memory increment mode)  
        .equ DMA2_CCR3_PINC, 1 << 6   @ bitWidth 1 (Peripheral increment mode)  
        .equ DMA2_CCR3_CIRC, 1 << 5   @ bitWidth 1 (Circular mode)  
        .equ DMA2_CCR3_DIR, 1 << 4   @ bitWidth 1 (Data transfer direction)  
        .equ DMA2_CCR3_TEIE, 1 << 3   @ bitWidth 1 (Transfer error interrupt  enable)  
        .equ DMA2_CCR3_HTIE, 1 << 2   @ bitWidth 1 (Half transfer interrupt  enable)  
        .equ DMA2_CCR3_TCIE, 1 << 1   @ bitWidth 1 (Transfer complete interrupt  enable)  
        .equ DMA2_CCR3_EN, 1 << 0   @ bitWidth 1 (Channel enable)  
 
    .equ DMA2_CNDTR3, DMA2_BASE + 0x34 @ (channel x number of data  register) 
        .equ DMA2_CNDTR3_NDT_Shift, 0   @ bitWidth 16 (Number of data to transfer)  
 
    .equ DMA2_CPAR3, DMA2_BASE + 0x38 @ (channel x peripheral address  register) 
        .equ DMA2_CPAR3_PA_Shift, 0   @ bitWidth 32 (Peripheral address)  
 
    .equ DMA2_CMAR3, DMA2_BASE + 0x3C @ (channel x memory address  register) 
        .equ DMA2_CMAR3_MA_Shift, 0   @ bitWidth 32 (Memory address)  
 
    .equ DMA2_CCR4, DMA2_BASE + 0x44 @ (channel x configuration  register) 
        .equ DMA2_CCR4_MEM2MEM, 1 << 14   @ bitWidth 1 (Memory to memory mode)  
        .equ DMA2_CCR4_PL_Shift, 12   @ bitWidth 2 (Channel priority level)  
        .equ DMA2_CCR4_MSIZE_Shift, 10   @ bitWidth 2 (Memory size)  
        .equ DMA2_CCR4_PSIZE_Shift, 8   @ bitWidth 2 (Peripheral size)  
        .equ DMA2_CCR4_MINC, 1 << 7   @ bitWidth 1 (Memory increment mode)  
        .equ DMA2_CCR4_PINC, 1 << 6   @ bitWidth 1 (Peripheral increment mode)  
        .equ DMA2_CCR4_CIRC, 1 << 5   @ bitWidth 1 (Circular mode)  
        .equ DMA2_CCR4_DIR, 1 << 4   @ bitWidth 1 (Data transfer direction)  
        .equ DMA2_CCR4_TEIE, 1 << 3   @ bitWidth 1 (Transfer error interrupt  enable)  
        .equ DMA2_CCR4_HTIE, 1 << 2   @ bitWidth 1 (Half transfer interrupt  enable)  
        .equ DMA2_CCR4_TCIE, 1 << 1   @ bitWidth 1 (Transfer complete interrupt  enable)  
        .equ DMA2_CCR4_EN, 1 << 0   @ bitWidth 1 (Channel enable)  
 
    .equ DMA2_CNDTR4, DMA2_BASE + 0x48 @ (channel x number of data  register) 
        .equ DMA2_CNDTR4_NDT_Shift, 0   @ bitWidth 16 (Number of data to transfer)  
 
    .equ DMA2_CPAR4, DMA2_BASE + 0x4C @ (channel x peripheral address  register) 
        .equ DMA2_CPAR4_PA_Shift, 0   @ bitWidth 32 (Peripheral address)  
 
    .equ DMA2_CMAR4, DMA2_BASE + 0x50 @ (channel x memory address  register) 
        .equ DMA2_CMAR4_MA_Shift, 0   @ bitWidth 32 (Memory address)  
 
    .equ DMA2_CCR5, DMA2_BASE + 0x58 @ (channel x configuration  register) 
        .equ DMA2_CCR5_MEM2MEM, 1 << 14   @ bitWidth 1 (Memory to memory mode)  
        .equ DMA2_CCR5_PL_Shift, 12   @ bitWidth 2 (Channel priority level)  
        .equ DMA2_CCR5_MSIZE_Shift, 10   @ bitWidth 2 (Memory size)  
        .equ DMA2_CCR5_PSIZE_Shift, 8   @ bitWidth 2 (Peripheral size)  
        .equ DMA2_CCR5_MINC, 1 << 7   @ bitWidth 1 (Memory increment mode)  
        .equ DMA2_CCR5_PINC, 1 << 6   @ bitWidth 1 (Peripheral increment mode)  
        .equ DMA2_CCR5_CIRC, 1 << 5   @ bitWidth 1 (Circular mode)  
        .equ DMA2_CCR5_DIR, 1 << 4   @ bitWidth 1 (Data transfer direction)  
        .equ DMA2_CCR5_TEIE, 1 << 3   @ bitWidth 1 (Transfer error interrupt  enable)  
        .equ DMA2_CCR5_HTIE, 1 << 2   @ bitWidth 1 (Half transfer interrupt  enable)  
        .equ DMA2_CCR5_TCIE, 1 << 1   @ bitWidth 1 (Transfer complete interrupt  enable)  
        .equ DMA2_CCR5_EN, 1 << 0   @ bitWidth 1 (Channel enable)  
 
    .equ DMA2_CNDTR5, DMA2_BASE + 0x5C @ (channel x number of data  register) 
        .equ DMA2_CNDTR5_NDT_Shift, 0   @ bitWidth 16 (Number of data to transfer)  
 
    .equ DMA2_CPAR5, DMA2_BASE + 0x60 @ (channel x peripheral address  register) 
        .equ DMA2_CPAR5_PA_Shift, 0   @ bitWidth 32 (Peripheral address)  
 
    .equ DMA2_CMAR5, DMA2_BASE + 0x64 @ (channel x memory address  register) 
        .equ DMA2_CMAR5_MA_Shift, 0   @ bitWidth 32 (Memory address)  
 
    .equ DMA2_CCR6, DMA2_BASE + 0x6C @ (channel x configuration  register) 
        .equ DMA2_CCR6_MEM2MEM, 1 << 14   @ bitWidth 1 (Memory to memory mode)  
        .equ DMA2_CCR6_PL_Shift, 12   @ bitWidth 2 (Channel priority level)  
        .equ DMA2_CCR6_MSIZE_Shift, 10   @ bitWidth 2 (Memory size)  
        .equ DMA2_CCR6_PSIZE_Shift, 8   @ bitWidth 2 (Peripheral size)  
        .equ DMA2_CCR6_MINC, 1 << 7   @ bitWidth 1 (Memory increment mode)  
        .equ DMA2_CCR6_PINC, 1 << 6   @ bitWidth 1 (Peripheral increment mode)  
        .equ DMA2_CCR6_CIRC, 1 << 5   @ bitWidth 1 (Circular mode)  
        .equ DMA2_CCR6_DIR, 1 << 4   @ bitWidth 1 (Data transfer direction)  
        .equ DMA2_CCR6_TEIE, 1 << 3   @ bitWidth 1 (Transfer error interrupt  enable)  
        .equ DMA2_CCR6_HTIE, 1 << 2   @ bitWidth 1 (Half transfer interrupt  enable)  
        .equ DMA2_CCR6_TCIE, 1 << 1   @ bitWidth 1 (Transfer complete interrupt  enable)  
        .equ DMA2_CCR6_EN, 1 << 0   @ bitWidth 1 (Channel enable)  
 
    .equ DMA2_CNDTR6, DMA2_BASE + 0x70 @ (channel x number of data  register) 
        .equ DMA2_CNDTR6_NDT_Shift, 0   @ bitWidth 16 (Number of data to transfer)  
 
    .equ DMA2_CPAR6, DMA2_BASE + 0x74 @ (channel x peripheral address  register) 
        .equ DMA2_CPAR6_PA_Shift, 0   @ bitWidth 32 (Peripheral address)  
 
    .equ DMA2_CMAR6, DMA2_BASE + 0x78 @ (channel x memory address  register) 
        .equ DMA2_CMAR6_MA_Shift, 0   @ bitWidth 32 (Memory address)  
 
    .equ DMA2_CCR7, DMA2_BASE + 0x80 @ (channel x configuration  register) 
        .equ DMA2_CCR7_MEM2MEM, 1 << 14   @ bitWidth 1 (Memory to memory mode)  
        .equ DMA2_CCR7_PL_Shift, 12   @ bitWidth 2 (Channel priority level)  
        .equ DMA2_CCR7_MSIZE_Shift, 10   @ bitWidth 2 (Memory size)  
        .equ DMA2_CCR7_PSIZE_Shift, 8   @ bitWidth 2 (Peripheral size)  
        .equ DMA2_CCR7_MINC, 1 << 7   @ bitWidth 1 (Memory increment mode)  
        .equ DMA2_CCR7_PINC, 1 << 6   @ bitWidth 1 (Peripheral increment mode)  
        .equ DMA2_CCR7_CIRC, 1 << 5   @ bitWidth 1 (Circular mode)  
        .equ DMA2_CCR7_DIR, 1 << 4   @ bitWidth 1 (Data transfer direction)  
        .equ DMA2_CCR7_TEIE, 1 << 3   @ bitWidth 1 (Transfer error interrupt  enable)  
        .equ DMA2_CCR7_HTIE, 1 << 2   @ bitWidth 1 (Half transfer interrupt  enable)  
        .equ DMA2_CCR7_TCIE, 1 << 1   @ bitWidth 1 (Transfer complete interrupt  enable)  
        .equ DMA2_CCR7_EN, 1 << 0   @ bitWidth 1 (Channel enable)  
 
    .equ DMA2_CNDTR7, DMA2_BASE + 0x84 @ (channel x number of data  register) 
        .equ DMA2_CNDTR7_NDT_Shift, 0   @ bitWidth 16 (Number of data to transfer)  
 
    .equ DMA2_CPAR7, DMA2_BASE + 0x88 @ (channel x peripheral address  register) 
        .equ DMA2_CPAR7_PA_Shift, 0   @ bitWidth 32 (Peripheral address)  
 
    .equ DMA2_CMAR7, DMA2_BASE + 0x8C @ (channel x memory address  register) 
        .equ DMA2_CMAR7_MA_Shift, 0   @ bitWidth 32 (Memory address)  
 
    .equ DMA2_CSELR, DMA2_BASE + 0xA8 @ (channel selection register) 
        .equ DMA2_CSELR_C7S_Shift, 24   @ bitWidth 4 (DMA channel 7 selection)  
        .equ DMA2_CSELR_C6S_Shift, 20   @ bitWidth 4 (DMA channel 6 selection)  
        .equ DMA2_CSELR_C5S_Shift, 16   @ bitWidth 4 (DMA channel 5 selection)  
        .equ DMA2_CSELR_C4S_Shift, 12   @ bitWidth 4 (DMA channel 4 selection)  
        .equ DMA2_CSELR_C3S_Shift, 8   @ bitWidth 4 (DMA channel 3 selection)  
        .equ DMA2_CSELR_C2S_Shift, 4   @ bitWidth 4 (DMA channel 2 selection)  
        .equ DMA2_CSELR_C1S_Shift, 0   @ bitWidth 4 (DMA channel 1 selection)  
 

@=========================== CRC ===========================@
.equ CRC_BASE, 0x40023000 @ (Cyclic redundancy check calculation  unit) 
    .equ CRC_DR, CRC_BASE + 0x0 @ (Data register) 
        .equ CRC_DR_DR_Shift, 0   @ bitWidth 32 (Data register bits)  
 
    .equ CRC_IDR, CRC_BASE + 0x4 @ (Independent data register) 
        .equ CRC_IDR_IDR_Shift, 0   @ bitWidth 8 (General-purpose 8-bit data register  bits)  
 
    .equ CRC_CR, CRC_BASE + 0x8 @ (Control register) 
        .equ CRC_CR_REV_OUT, 1 << 7   @ bitWidth 1 (Reverse output data)  
        .equ CRC_CR_REV_IN_Shift, 5   @ bitWidth 2 (Reverse input data)  
        .equ CRC_CR_POLYSIZE_Shift, 3   @ bitWidth 2 (Polynomial size)  
        .equ CRC_CR_RESET, 1 << 0   @ bitWidth 1 (RESET bit)  
 
    .equ CRC_INIT, CRC_BASE + 0x10 @ (Initial CRC value) 
        .equ CRC_INIT_CRC_INIT_Shift, 0   @ bitWidth 32 (Programmable initial CRC  value)  
 
    .equ CRC_POL, CRC_BASE + 0x14 @ (polynomial) 
        .equ CRC_POL_Polynomialcoefficients_Shift, 0   @ bitWidth 32 (Programmable polynomial)  
 

@=========================== IWDG ===========================@
.equ IWDG_BASE, 0x40003000 @ (Independent watchdog) 
    .equ IWDG_KR, IWDG_BASE + 0x0 @ (Key register) 
        .equ IWDG_KR_KEY_Shift, 0   @ bitWidth 16 (Key value write only, read  0x0000)  
 
    .equ IWDG_PR, IWDG_BASE + 0x4 @ (Prescaler register) 
        .equ IWDG_PR_PR_Shift, 0   @ bitWidth 3 (Prescaler divider)  
 
    .equ IWDG_RLR, IWDG_BASE + 0x8 @ (Reload register) 
        .equ IWDG_RLR_RL_Shift, 0   @ bitWidth 12 (Watchdog counter reload  value)  
 
    .equ IWDG_SR, IWDG_BASE + 0xC @ (Status register) 
        .equ IWDG_SR_WVU, 1 << 2   @ bitWidth 1 (Watchdog counter window value  update)  
        .equ IWDG_SR_RVU, 1 << 1   @ bitWidth 1 (Watchdog counter reload value  update)  
        .equ IWDG_SR_PVU, 1 << 0   @ bitWidth 1 (Watchdog prescaler value  update)  
 
    .equ IWDG_WINR, IWDG_BASE + 0x10 @ (Window register) 
        .equ IWDG_WINR_WIN_Shift, 0   @ bitWidth 12 (Watchdog counter window  value)  
 

@=========================== WWDG ===========================@
.equ WWDG_BASE, 0x40002C00 @ (System window watchdog) 
    .equ WWDG_CR, WWDG_BASE + 0x0 @ (Control register) 
        .equ WWDG_CR_WDGA, 1 << 7   @ bitWidth 1 (Activation bit)  
        .equ WWDG_CR_T_Shift, 0   @ bitWidth 7 (7-bit counter MSB to LSB)  
 
    .equ WWDG_CFR, WWDG_BASE + 0x4 @ (Configuration register) 
        .equ WWDG_CFR_EWI, 1 << 9   @ bitWidth 1 (Early wakeup interrupt)  
        .equ WWDG_CFR_WDGTB_Shift, 7   @ bitWidth 2 (Timer base)  
        .equ WWDG_CFR_W_Shift, 0   @ bitWidth 7 (7-bit window value)  
 
    .equ WWDG_SR, WWDG_BASE + 0x8 @ (Status register) 
        .equ WWDG_SR_EWIF, 1 << 0   @ bitWidth 1 (Early wakeup interrupt  flag)  
 

@=========================== I2C1 ===========================@
.equ I2C1_BASE, 0x40005400 @ (Inter-integrated circuit) 
    .equ I2C1_CR1, I2C1_BASE + 0x0 @ (Control register 1) 
        .equ I2C1_CR1_PE, 1 << 0   @ bitWidth 1 (Peripheral enable)  
        .equ I2C1_CR1_TXIE, 1 << 1   @ bitWidth 1 (TX Interrupt enable)  
        .equ I2C1_CR1_RXIE, 1 << 2   @ bitWidth 1 (RX Interrupt enable)  
        .equ I2C1_CR1_ADDRIE, 1 << 3   @ bitWidth 1 (Address match interrupt enable slave  only)  
        .equ I2C1_CR1_NACKIE, 1 << 4   @ bitWidth 1 (Not acknowledge received interrupt  enable)  
        .equ I2C1_CR1_STOPIE, 1 << 5   @ bitWidth 1 (STOP detection Interrupt  enable)  
        .equ I2C1_CR1_TCIE, 1 << 6   @ bitWidth 1 (Transfer Complete interrupt  enable)  
        .equ I2C1_CR1_ERRIE, 1 << 7   @ bitWidth 1 (Error interrupts enable)  
        .equ I2C1_CR1_DNF_Shift, 8   @ bitWidth 4 (Digital noise filter)  
        .equ I2C1_CR1_ANFOFF, 1 << 12   @ bitWidth 1 (Analog noise filter OFF)  
        .equ I2C1_CR1_TXDMAEN, 1 << 14   @ bitWidth 1 (DMA transmission requests  enable)  
        .equ I2C1_CR1_RXDMAEN, 1 << 15   @ bitWidth 1 (DMA reception requests  enable)  
        .equ I2C1_CR1_SBC, 1 << 16   @ bitWidth 1 (Slave byte control)  
        .equ I2C1_CR1_NOSTRETCH, 1 << 17   @ bitWidth 1 (Clock stretching disable)  
        .equ I2C1_CR1_WUPEN, 1 << 18   @ bitWidth 1 (Wakeup from STOP enable)  
        .equ I2C1_CR1_GCEN, 1 << 19   @ bitWidth 1 (General call enable)  
        .equ I2C1_CR1_SMBHEN, 1 << 20   @ bitWidth 1 (SMBus Host address enable)  
        .equ I2C1_CR1_SMBDEN, 1 << 21   @ bitWidth 1 (SMBus Device Default address  enable)  
        .equ I2C1_CR1_ALERTEN, 1 << 22   @ bitWidth 1 (SMBUS alert enable)  
        .equ I2C1_CR1_PECEN, 1 << 23   @ bitWidth 1 (PEC enable)  
 
    .equ I2C1_CR2, I2C1_BASE + 0x4 @ (Control register 2) 
        .equ I2C1_CR2_PECBYTE, 1 << 26   @ bitWidth 1 (Packet error checking byte)  
        .equ I2C1_CR2_AUTOEND, 1 << 25   @ bitWidth 1 (Automatic end mode master  mode)  
        .equ I2C1_CR2_RELOAD, 1 << 24   @ bitWidth 1 (NBYTES reload mode)  
        .equ I2C1_CR2_NBYTES_Shift, 16   @ bitWidth 8 (Number of bytes)  
        .equ I2C1_CR2_NACK, 1 << 15   @ bitWidth 1 (NACK generation slave  mode)  
        .equ I2C1_CR2_STOP, 1 << 14   @ bitWidth 1 (Stop generation master  mode)  
        .equ I2C1_CR2_START, 1 << 13   @ bitWidth 1 (Start generation)  
        .equ I2C1_CR2_HEAD10R, 1 << 12   @ bitWidth 1 (10-bit address header only read  direction master receiver mode)  
        .equ I2C1_CR2_ADD10, 1 << 11   @ bitWidth 1 (10-bit addressing mode master  mode)  
        .equ I2C1_CR2_RD_WRN, 1 << 10   @ bitWidth 1 (Transfer direction master  mode)  
        .equ I2C1_CR2_SADD_Shift, 0   @ bitWidth 10 (Slave address bit master  mode)  
 
    .equ I2C1_OAR1, I2C1_BASE + 0x8 @ (Own address register 1) 
        .equ I2C1_OAR1_OA1_Shift, 0   @ bitWidth 10 (Interface address)  
        .equ I2C1_OAR1_OA1MODE, 1 << 10   @ bitWidth 1 (Own Address 1 10-bit mode)  
        .equ I2C1_OAR1_OA1EN, 1 << 15   @ bitWidth 1 (Own Address 1 enable)  
 
    .equ I2C1_OAR2, I2C1_BASE + 0xC @ (Own address register 2) 
        .equ I2C1_OAR2_OA2_Shift, 1   @ bitWidth 7 (Interface address)  
        .equ I2C1_OAR2_OA2MSK_Shift, 8   @ bitWidth 3 (Own Address 2 masks)  
        .equ I2C1_OAR2_OA2EN, 1 << 15   @ bitWidth 1 (Own Address 2 enable)  
 
    .equ I2C1_TIMINGR, I2C1_BASE + 0x10 @ (Timing register) 
        .equ I2C1_TIMINGR_SCLL_Shift, 0   @ bitWidth 8 (SCL low period master  mode)  
        .equ I2C1_TIMINGR_SCLH_Shift, 8   @ bitWidth 8 (SCL high period master  mode)  
        .equ I2C1_TIMINGR_SDADEL_Shift, 16   @ bitWidth 4 (Data hold time)  
        .equ I2C1_TIMINGR_SCLDEL_Shift, 20   @ bitWidth 4 (Data setup time)  
        .equ I2C1_TIMINGR_PRESC_Shift, 28   @ bitWidth 4 (Timing prescaler)  
 
    .equ I2C1_TIMEOUTR, I2C1_BASE + 0x14 @ (Status register 1) 
        .equ I2C1_TIMEOUTR_TIMEOUTA_Shift, 0   @ bitWidth 12 (Bus timeout A)  
        .equ I2C1_TIMEOUTR_TIDLE, 1 << 12   @ bitWidth 1 (Idle clock timeout  detection)  
        .equ I2C1_TIMEOUTR_TIMOUTEN, 1 << 15   @ bitWidth 1 (Clock timeout enable)  
        .equ I2C1_TIMEOUTR_TIMEOUTB_Shift, 16   @ bitWidth 12 (Bus timeout B)  
        .equ I2C1_TIMEOUTR_TEXTEN, 1 << 31   @ bitWidth 1 (Extended clock timeout  enable)  
 
    .equ I2C1_ISR, I2C1_BASE + 0x18 @ (Interrupt and Status register) 
        .equ I2C1_ISR_ADDCODE_Shift, 17   @ bitWidth 7 (Address match code Slave  mode)  
        .equ I2C1_ISR_DIR, 1 << 16   @ bitWidth 1 (Transfer direction Slave  mode)  
        .equ I2C1_ISR_BUSY, 1 << 15   @ bitWidth 1 (Bus busy)  
        .equ I2C1_ISR_ALERT, 1 << 13   @ bitWidth 1 (SMBus alert)  
        .equ I2C1_ISR_TIMEOUT, 1 << 12   @ bitWidth 1 (Timeout or t_low detection  flag)  
        .equ I2C1_ISR_PECERR, 1 << 11   @ bitWidth 1 (PEC Error in reception)  
        .equ I2C1_ISR_OVR, 1 << 10   @ bitWidth 1 (Overrun/Underrun slave  mode)  
        .equ I2C1_ISR_ARLO, 1 << 9   @ bitWidth 1 (Arbitration lost)  
        .equ I2C1_ISR_BERR, 1 << 8   @ bitWidth 1 (Bus error)  
        .equ I2C1_ISR_TCR, 1 << 7   @ bitWidth 1 (Transfer Complete Reload)  
        .equ I2C1_ISR_TC, 1 << 6   @ bitWidth 1 (Transfer Complete master  mode)  
        .equ I2C1_ISR_STOPF, 1 << 5   @ bitWidth 1 (Stop detection flag)  
        .equ I2C1_ISR_NACKF, 1 << 4   @ bitWidth 1 (Not acknowledge received  flag)  
        .equ I2C1_ISR_ADDR, 1 << 3   @ bitWidth 1 (Address matched slave  mode)  
        .equ I2C1_ISR_RXNE, 1 << 2   @ bitWidth 1 (Receive data register not empty  receivers)  
        .equ I2C1_ISR_TXIS, 1 << 1   @ bitWidth 1 (Transmit interrupt status  transmitters)  
        .equ I2C1_ISR_TXE, 1 << 0   @ bitWidth 1 (Transmit data register empty  transmitters)  
 
    .equ I2C1_ICR, I2C1_BASE + 0x1C @ (Interrupt clear register) 
        .equ I2C1_ICR_ALERTCF, 1 << 13   @ bitWidth 1 (Alert flag clear)  
        .equ I2C1_ICR_TIMOUTCF, 1 << 12   @ bitWidth 1 (Timeout detection flag  clear)  
        .equ I2C1_ICR_PECCF, 1 << 11   @ bitWidth 1 (PEC Error flag clear)  
        .equ I2C1_ICR_OVRCF, 1 << 10   @ bitWidth 1 (Overrun/Underrun flag  clear)  
        .equ I2C1_ICR_ARLOCF, 1 << 9   @ bitWidth 1 (Arbitration lost flag  clear)  
        .equ I2C1_ICR_BERRCF, 1 << 8   @ bitWidth 1 (Bus error flag clear)  
        .equ I2C1_ICR_STOPCF, 1 << 5   @ bitWidth 1 (Stop detection flag clear)  
        .equ I2C1_ICR_NACKCF, 1 << 4   @ bitWidth 1 (Not Acknowledge flag clear)  
        .equ I2C1_ICR_ADDRCF, 1 << 3   @ bitWidth 1 (Address Matched flag clear)  
 
    .equ I2C1_PECR, I2C1_BASE + 0x20 @ (PEC register) 
        .equ I2C1_PECR_PEC_Shift, 0   @ bitWidth 8 (Packet error checking  register)  
 
    .equ I2C1_RXDR, I2C1_BASE + 0x24 @ (Receive data register) 
        .equ I2C1_RXDR_RXDATA_Shift, 0   @ bitWidth 8 (8-bit receive data)  
 
    .equ I2C1_TXDR, I2C1_BASE + 0x28 @ (Transmit data register) 
        .equ I2C1_TXDR_TXDATA_Shift, 0   @ bitWidth 8 (8-bit transmit data)  
 

@=========================== I2C2 ===========================@
.equ I2C2_BASE, 0x40005800 @ (Inter-integrated circuit) 
    .equ I2C2_CR1, I2C2_BASE + 0x0 @ (Control register 1) 
        .equ I2C2_CR1_PE, 1 << 0   @ bitWidth 1 (Peripheral enable)  
        .equ I2C2_CR1_TXIE, 1 << 1   @ bitWidth 1 (TX Interrupt enable)  
        .equ I2C2_CR1_RXIE, 1 << 2   @ bitWidth 1 (RX Interrupt enable)  
        .equ I2C2_CR1_ADDRIE, 1 << 3   @ bitWidth 1 (Address match interrupt enable slave  only)  
        .equ I2C2_CR1_NACKIE, 1 << 4   @ bitWidth 1 (Not acknowledge received interrupt  enable)  
        .equ I2C2_CR1_STOPIE, 1 << 5   @ bitWidth 1 (STOP detection Interrupt  enable)  
        .equ I2C2_CR1_TCIE, 1 << 6   @ bitWidth 1 (Transfer Complete interrupt  enable)  
        .equ I2C2_CR1_ERRIE, 1 << 7   @ bitWidth 1 (Error interrupts enable)  
        .equ I2C2_CR1_DNF_Shift, 8   @ bitWidth 4 (Digital noise filter)  
        .equ I2C2_CR1_ANFOFF, 1 << 12   @ bitWidth 1 (Analog noise filter OFF)  
        .equ I2C2_CR1_TXDMAEN, 1 << 14   @ bitWidth 1 (DMA transmission requests  enable)  
        .equ I2C2_CR1_RXDMAEN, 1 << 15   @ bitWidth 1 (DMA reception requests  enable)  
        .equ I2C2_CR1_SBC, 1 << 16   @ bitWidth 1 (Slave byte control)  
        .equ I2C2_CR1_NOSTRETCH, 1 << 17   @ bitWidth 1 (Clock stretching disable)  
        .equ I2C2_CR1_WUPEN, 1 << 18   @ bitWidth 1 (Wakeup from STOP enable)  
        .equ I2C2_CR1_GCEN, 1 << 19   @ bitWidth 1 (General call enable)  
        .equ I2C2_CR1_SMBHEN, 1 << 20   @ bitWidth 1 (SMBus Host address enable)  
        .equ I2C2_CR1_SMBDEN, 1 << 21   @ bitWidth 1 (SMBus Device Default address  enable)  
        .equ I2C2_CR1_ALERTEN, 1 << 22   @ bitWidth 1 (SMBUS alert enable)  
        .equ I2C2_CR1_PECEN, 1 << 23   @ bitWidth 1 (PEC enable)  
 
    .equ I2C2_CR2, I2C2_BASE + 0x4 @ (Control register 2) 
        .equ I2C2_CR2_PECBYTE, 1 << 26   @ bitWidth 1 (Packet error checking byte)  
        .equ I2C2_CR2_AUTOEND, 1 << 25   @ bitWidth 1 (Automatic end mode master  mode)  
        .equ I2C2_CR2_RELOAD, 1 << 24   @ bitWidth 1 (NBYTES reload mode)  
        .equ I2C2_CR2_NBYTES_Shift, 16   @ bitWidth 8 (Number of bytes)  
        .equ I2C2_CR2_NACK, 1 << 15   @ bitWidth 1 (NACK generation slave  mode)  
        .equ I2C2_CR2_STOP, 1 << 14   @ bitWidth 1 (Stop generation master  mode)  
        .equ I2C2_CR2_START, 1 << 13   @ bitWidth 1 (Start generation)  
        .equ I2C2_CR2_HEAD10R, 1 << 12   @ bitWidth 1 (10-bit address header only read  direction master receiver mode)  
        .equ I2C2_CR2_ADD10, 1 << 11   @ bitWidth 1 (10-bit addressing mode master  mode)  
        .equ I2C2_CR2_RD_WRN, 1 << 10   @ bitWidth 1 (Transfer direction master  mode)  
        .equ I2C2_CR2_SADD_Shift, 0   @ bitWidth 10 (Slave address bit master  mode)  
 
    .equ I2C2_OAR1, I2C2_BASE + 0x8 @ (Own address register 1) 
        .equ I2C2_OAR1_OA1_Shift, 0   @ bitWidth 10 (Interface address)  
        .equ I2C2_OAR1_OA1MODE, 1 << 10   @ bitWidth 1 (Own Address 1 10-bit mode)  
        .equ I2C2_OAR1_OA1EN, 1 << 15   @ bitWidth 1 (Own Address 1 enable)  
 
    .equ I2C2_OAR2, I2C2_BASE + 0xC @ (Own address register 2) 
        .equ I2C2_OAR2_OA2_Shift, 1   @ bitWidth 7 (Interface address)  
        .equ I2C2_OAR2_OA2MSK_Shift, 8   @ bitWidth 3 (Own Address 2 masks)  
        .equ I2C2_OAR2_OA2EN, 1 << 15   @ bitWidth 1 (Own Address 2 enable)  
 
    .equ I2C2_TIMINGR, I2C2_BASE + 0x10 @ (Timing register) 
        .equ I2C2_TIMINGR_SCLL_Shift, 0   @ bitWidth 8 (SCL low period master  mode)  
        .equ I2C2_TIMINGR_SCLH_Shift, 8   @ bitWidth 8 (SCL high period master  mode)  
        .equ I2C2_TIMINGR_SDADEL_Shift, 16   @ bitWidth 4 (Data hold time)  
        .equ I2C2_TIMINGR_SCLDEL_Shift, 20   @ bitWidth 4 (Data setup time)  
        .equ I2C2_TIMINGR_PRESC_Shift, 28   @ bitWidth 4 (Timing prescaler)  
 
    .equ I2C2_TIMEOUTR, I2C2_BASE + 0x14 @ (Status register 1) 
        .equ I2C2_TIMEOUTR_TIMEOUTA_Shift, 0   @ bitWidth 12 (Bus timeout A)  
        .equ I2C2_TIMEOUTR_TIDLE, 1 << 12   @ bitWidth 1 (Idle clock timeout  detection)  
        .equ I2C2_TIMEOUTR_TIMOUTEN, 1 << 15   @ bitWidth 1 (Clock timeout enable)  
        .equ I2C2_TIMEOUTR_TIMEOUTB_Shift, 16   @ bitWidth 12 (Bus timeout B)  
        .equ I2C2_TIMEOUTR_TEXTEN, 1 << 31   @ bitWidth 1 (Extended clock timeout  enable)  
 
    .equ I2C2_ISR, I2C2_BASE + 0x18 @ (Interrupt and Status register) 
        .equ I2C2_ISR_ADDCODE_Shift, 17   @ bitWidth 7 (Address match code Slave  mode)  
        .equ I2C2_ISR_DIR, 1 << 16   @ bitWidth 1 (Transfer direction Slave  mode)  
        .equ I2C2_ISR_BUSY, 1 << 15   @ bitWidth 1 (Bus busy)  
        .equ I2C2_ISR_ALERT, 1 << 13   @ bitWidth 1 (SMBus alert)  
        .equ I2C2_ISR_TIMEOUT, 1 << 12   @ bitWidth 1 (Timeout or t_low detection  flag)  
        .equ I2C2_ISR_PECERR, 1 << 11   @ bitWidth 1 (PEC Error in reception)  
        .equ I2C2_ISR_OVR, 1 << 10   @ bitWidth 1 (Overrun/Underrun slave  mode)  
        .equ I2C2_ISR_ARLO, 1 << 9   @ bitWidth 1 (Arbitration lost)  
        .equ I2C2_ISR_BERR, 1 << 8   @ bitWidth 1 (Bus error)  
        .equ I2C2_ISR_TCR, 1 << 7   @ bitWidth 1 (Transfer Complete Reload)  
        .equ I2C2_ISR_TC, 1 << 6   @ bitWidth 1 (Transfer Complete master  mode)  
        .equ I2C2_ISR_STOPF, 1 << 5   @ bitWidth 1 (Stop detection flag)  
        .equ I2C2_ISR_NACKF, 1 << 4   @ bitWidth 1 (Not acknowledge received  flag)  
        .equ I2C2_ISR_ADDR, 1 << 3   @ bitWidth 1 (Address matched slave  mode)  
        .equ I2C2_ISR_RXNE, 1 << 2   @ bitWidth 1 (Receive data register not empty  receivers)  
        .equ I2C2_ISR_TXIS, 1 << 1   @ bitWidth 1 (Transmit interrupt status  transmitters)  
        .equ I2C2_ISR_TXE, 1 << 0   @ bitWidth 1 (Transmit data register empty  transmitters)  
 
    .equ I2C2_ICR, I2C2_BASE + 0x1C @ (Interrupt clear register) 
        .equ I2C2_ICR_ALERTCF, 1 << 13   @ bitWidth 1 (Alert flag clear)  
        .equ I2C2_ICR_TIMOUTCF, 1 << 12   @ bitWidth 1 (Timeout detection flag  clear)  
        .equ I2C2_ICR_PECCF, 1 << 11   @ bitWidth 1 (PEC Error flag clear)  
        .equ I2C2_ICR_OVRCF, 1 << 10   @ bitWidth 1 (Overrun/Underrun flag  clear)  
        .equ I2C2_ICR_ARLOCF, 1 << 9   @ bitWidth 1 (Arbitration lost flag  clear)  
        .equ I2C2_ICR_BERRCF, 1 << 8   @ bitWidth 1 (Bus error flag clear)  
        .equ I2C2_ICR_STOPCF, 1 << 5   @ bitWidth 1 (Stop detection flag clear)  
        .equ I2C2_ICR_NACKCF, 1 << 4   @ bitWidth 1 (Not Acknowledge flag clear)  
        .equ I2C2_ICR_ADDRCF, 1 << 3   @ bitWidth 1 (Address Matched flag clear)  
 
    .equ I2C2_PECR, I2C2_BASE + 0x20 @ (PEC register) 
        .equ I2C2_PECR_PEC_Shift, 0   @ bitWidth 8 (Packet error checking  register)  
 
    .equ I2C2_RXDR, I2C2_BASE + 0x24 @ (Receive data register) 
        .equ I2C2_RXDR_RXDATA_Shift, 0   @ bitWidth 8 (8-bit receive data)  
 
    .equ I2C2_TXDR, I2C2_BASE + 0x28 @ (Transmit data register) 
        .equ I2C2_TXDR_TXDATA_Shift, 0   @ bitWidth 8 (8-bit transmit data)  
 

@=========================== I2C3 ===========================@
.equ I2C3_BASE, 0x40005C00 @ (Inter-integrated circuit) 
    .equ I2C3_CR1, I2C3_BASE + 0x0 @ (Control register 1) 
        .equ I2C3_CR1_PE, 1 << 0   @ bitWidth 1 (Peripheral enable)  
        .equ I2C3_CR1_TXIE, 1 << 1   @ bitWidth 1 (TX Interrupt enable)  
        .equ I2C3_CR1_RXIE, 1 << 2   @ bitWidth 1 (RX Interrupt enable)  
        .equ I2C3_CR1_ADDRIE, 1 << 3   @ bitWidth 1 (Address match interrupt enable slave  only)  
        .equ I2C3_CR1_NACKIE, 1 << 4   @ bitWidth 1 (Not acknowledge received interrupt  enable)  
        .equ I2C3_CR1_STOPIE, 1 << 5   @ bitWidth 1 (STOP detection Interrupt  enable)  
        .equ I2C3_CR1_TCIE, 1 << 6   @ bitWidth 1 (Transfer Complete interrupt  enable)  
        .equ I2C3_CR1_ERRIE, 1 << 7   @ bitWidth 1 (Error interrupts enable)  
        .equ I2C3_CR1_DNF_Shift, 8   @ bitWidth 4 (Digital noise filter)  
        .equ I2C3_CR1_ANFOFF, 1 << 12   @ bitWidth 1 (Analog noise filter OFF)  
        .equ I2C3_CR1_TXDMAEN, 1 << 14   @ bitWidth 1 (DMA transmission requests  enable)  
        .equ I2C3_CR1_RXDMAEN, 1 << 15   @ bitWidth 1 (DMA reception requests  enable)  
        .equ I2C3_CR1_SBC, 1 << 16   @ bitWidth 1 (Slave byte control)  
        .equ I2C3_CR1_NOSTRETCH, 1 << 17   @ bitWidth 1 (Clock stretching disable)  
        .equ I2C3_CR1_WUPEN, 1 << 18   @ bitWidth 1 (Wakeup from STOP enable)  
        .equ I2C3_CR1_GCEN, 1 << 19   @ bitWidth 1 (General call enable)  
        .equ I2C3_CR1_SMBHEN, 1 << 20   @ bitWidth 1 (SMBus Host address enable)  
        .equ I2C3_CR1_SMBDEN, 1 << 21   @ bitWidth 1 (SMBus Device Default address  enable)  
        .equ I2C3_CR1_ALERTEN, 1 << 22   @ bitWidth 1 (SMBUS alert enable)  
        .equ I2C3_CR1_PECEN, 1 << 23   @ bitWidth 1 (PEC enable)  
 
    .equ I2C3_CR2, I2C3_BASE + 0x4 @ (Control register 2) 
        .equ I2C3_CR2_PECBYTE, 1 << 26   @ bitWidth 1 (Packet error checking byte)  
        .equ I2C3_CR2_AUTOEND, 1 << 25   @ bitWidth 1 (Automatic end mode master  mode)  
        .equ I2C3_CR2_RELOAD, 1 << 24   @ bitWidth 1 (NBYTES reload mode)  
        .equ I2C3_CR2_NBYTES_Shift, 16   @ bitWidth 8 (Number of bytes)  
        .equ I2C3_CR2_NACK, 1 << 15   @ bitWidth 1 (NACK generation slave  mode)  
        .equ I2C3_CR2_STOP, 1 << 14   @ bitWidth 1 (Stop generation master  mode)  
        .equ I2C3_CR2_START, 1 << 13   @ bitWidth 1 (Start generation)  
        .equ I2C3_CR2_HEAD10R, 1 << 12   @ bitWidth 1 (10-bit address header only read  direction master receiver mode)  
        .equ I2C3_CR2_ADD10, 1 << 11   @ bitWidth 1 (10-bit addressing mode master  mode)  
        .equ I2C3_CR2_RD_WRN, 1 << 10   @ bitWidth 1 (Transfer direction master  mode)  
        .equ I2C3_CR2_SADD_Shift, 0   @ bitWidth 10 (Slave address bit master  mode)  
 
    .equ I2C3_OAR1, I2C3_BASE + 0x8 @ (Own address register 1) 
        .equ I2C3_OAR1_OA1_Shift, 0   @ bitWidth 10 (Interface address)  
        .equ I2C3_OAR1_OA1MODE, 1 << 10   @ bitWidth 1 (Own Address 1 10-bit mode)  
        .equ I2C3_OAR1_OA1EN, 1 << 15   @ bitWidth 1 (Own Address 1 enable)  
 
    .equ I2C3_OAR2, I2C3_BASE + 0xC @ (Own address register 2) 
        .equ I2C3_OAR2_OA2_Shift, 1   @ bitWidth 7 (Interface address)  
        .equ I2C3_OAR2_OA2MSK_Shift, 8   @ bitWidth 3 (Own Address 2 masks)  
        .equ I2C3_OAR2_OA2EN, 1 << 15   @ bitWidth 1 (Own Address 2 enable)  
 
    .equ I2C3_TIMINGR, I2C3_BASE + 0x10 @ (Timing register) 
        .equ I2C3_TIMINGR_SCLL_Shift, 0   @ bitWidth 8 (SCL low period master  mode)  
        .equ I2C3_TIMINGR_SCLH_Shift, 8   @ bitWidth 8 (SCL high period master  mode)  
        .equ I2C3_TIMINGR_SDADEL_Shift, 16   @ bitWidth 4 (Data hold time)  
        .equ I2C3_TIMINGR_SCLDEL_Shift, 20   @ bitWidth 4 (Data setup time)  
        .equ I2C3_TIMINGR_PRESC_Shift, 28   @ bitWidth 4 (Timing prescaler)  
 
    .equ I2C3_TIMEOUTR, I2C3_BASE + 0x14 @ (Status register 1) 
        .equ I2C3_TIMEOUTR_TIMEOUTA_Shift, 0   @ bitWidth 12 (Bus timeout A)  
        .equ I2C3_TIMEOUTR_TIDLE, 1 << 12   @ bitWidth 1 (Idle clock timeout  detection)  
        .equ I2C3_TIMEOUTR_TIMOUTEN, 1 << 15   @ bitWidth 1 (Clock timeout enable)  
        .equ I2C3_TIMEOUTR_TIMEOUTB_Shift, 16   @ bitWidth 12 (Bus timeout B)  
        .equ I2C3_TIMEOUTR_TEXTEN, 1 << 31   @ bitWidth 1 (Extended clock timeout  enable)  
 
    .equ I2C3_ISR, I2C3_BASE + 0x18 @ (Interrupt and Status register) 
        .equ I2C3_ISR_ADDCODE_Shift, 17   @ bitWidth 7 (Address match code Slave  mode)  
        .equ I2C3_ISR_DIR, 1 << 16   @ bitWidth 1 (Transfer direction Slave  mode)  
        .equ I2C3_ISR_BUSY, 1 << 15   @ bitWidth 1 (Bus busy)  
        .equ I2C3_ISR_ALERT, 1 << 13   @ bitWidth 1 (SMBus alert)  
        .equ I2C3_ISR_TIMEOUT, 1 << 12   @ bitWidth 1 (Timeout or t_low detection  flag)  
        .equ I2C3_ISR_PECERR, 1 << 11   @ bitWidth 1 (PEC Error in reception)  
        .equ I2C3_ISR_OVR, 1 << 10   @ bitWidth 1 (Overrun/Underrun slave  mode)  
        .equ I2C3_ISR_ARLO, 1 << 9   @ bitWidth 1 (Arbitration lost)  
        .equ I2C3_ISR_BERR, 1 << 8   @ bitWidth 1 (Bus error)  
        .equ I2C3_ISR_TCR, 1 << 7   @ bitWidth 1 (Transfer Complete Reload)  
        .equ I2C3_ISR_TC, 1 << 6   @ bitWidth 1 (Transfer Complete master  mode)  
        .equ I2C3_ISR_STOPF, 1 << 5   @ bitWidth 1 (Stop detection flag)  
        .equ I2C3_ISR_NACKF, 1 << 4   @ bitWidth 1 (Not acknowledge received  flag)  
        .equ I2C3_ISR_ADDR, 1 << 3   @ bitWidth 1 (Address matched slave  mode)  
        .equ I2C3_ISR_RXNE, 1 << 2   @ bitWidth 1 (Receive data register not empty  receivers)  
        .equ I2C3_ISR_TXIS, 1 << 1   @ bitWidth 1 (Transmit interrupt status  transmitters)  
        .equ I2C3_ISR_TXE, 1 << 0   @ bitWidth 1 (Transmit data register empty  transmitters)  
 
    .equ I2C3_ICR, I2C3_BASE + 0x1C @ (Interrupt clear register) 
        .equ I2C3_ICR_ALERTCF, 1 << 13   @ bitWidth 1 (Alert flag clear)  
        .equ I2C3_ICR_TIMOUTCF, 1 << 12   @ bitWidth 1 (Timeout detection flag  clear)  
        .equ I2C3_ICR_PECCF, 1 << 11   @ bitWidth 1 (PEC Error flag clear)  
        .equ I2C3_ICR_OVRCF, 1 << 10   @ bitWidth 1 (Overrun/Underrun flag  clear)  
        .equ I2C3_ICR_ARLOCF, 1 << 9   @ bitWidth 1 (Arbitration lost flag  clear)  
        .equ I2C3_ICR_BERRCF, 1 << 8   @ bitWidth 1 (Bus error flag clear)  
        .equ I2C3_ICR_STOPCF, 1 << 5   @ bitWidth 1 (Stop detection flag clear)  
        .equ I2C3_ICR_NACKCF, 1 << 4   @ bitWidth 1 (Not Acknowledge flag clear)  
        .equ I2C3_ICR_ADDRCF, 1 << 3   @ bitWidth 1 (Address Matched flag clear)  
 
    .equ I2C3_PECR, I2C3_BASE + 0x20 @ (PEC register) 
        .equ I2C3_PECR_PEC_Shift, 0   @ bitWidth 8 (Packet error checking  register)  
 
    .equ I2C3_RXDR, I2C3_BASE + 0x24 @ (Receive data register) 
        .equ I2C3_RXDR_RXDATA_Shift, 0   @ bitWidth 8 (8-bit receive data)  
 
    .equ I2C3_TXDR, I2C3_BASE + 0x28 @ (Transmit data register) 
        .equ I2C3_TXDR_TXDATA_Shift, 0   @ bitWidth 8 (8-bit transmit data)  
 

@=========================== RCC ===========================@
.equ RCC_BASE, 0x40021000 @ (Reset and clock control) 
    .equ RCC_CR, RCC_BASE + 0x0 @ (Clock control register) 
        .equ RCC_CR_PLLSAI2RDY, 1 << 29   @ bitWidth 1 (SAI2 PLL clock ready flag)  
        .equ RCC_CR_PLLSAI2ON, 1 << 28   @ bitWidth 1 (SAI2 PLL enable)  
        .equ RCC_CR_PLLSAI1RDY, 1 << 27   @ bitWidth 1 (SAI1 PLL clock ready flag)  
        .equ RCC_CR_PLLSAI1ON, 1 << 26   @ bitWidth 1 (SAI1 PLL enable)  
        .equ RCC_CR_PLLRDY, 1 << 25   @ bitWidth 1 (Main PLL clock ready flag)  
        .equ RCC_CR_PLLON, 1 << 24   @ bitWidth 1 (Main PLL enable)  
        .equ RCC_CR_CSSON, 1 << 19   @ bitWidth 1 (Clock security system  enable)  
        .equ RCC_CR_HSEBYP, 1 << 18   @ bitWidth 1 (HSE crystal oscillator  bypass)  
        .equ RCC_CR_HSERDY, 1 << 17   @ bitWidth 1 (HSE clock ready flag)  
        .equ RCC_CR_HSEON, 1 << 16   @ bitWidth 1 (HSE clock enable)  
        .equ RCC_CR_HSIASFS, 1 << 11   @ bitWidth 1 (HSI automatic start from  Stop)  
        .equ RCC_CR_HSIRDY, 1 << 10   @ bitWidth 1 (HSI clock ready flag)  
        .equ RCC_CR_HSIKERON, 1 << 9   @ bitWidth 1 (HSI always enable for peripheral  kernels)  
        .equ RCC_CR_HSION, 1 << 8   @ bitWidth 1 (HSI clock enable)  
        .equ RCC_CR_MSIRANGE_Shift, 4   @ bitWidth 4 (MSI clock ranges)  
        .equ RCC_CR_MSIRGSEL, 1 << 3   @ bitWidth 1 (MSI clock range selection)  
        .equ RCC_CR_MSIPLLEN, 1 << 2   @ bitWidth 1 (MSI clock PLL enable)  
        .equ RCC_CR_MSIRDY, 1 << 1   @ bitWidth 1 (MSI clock ready flag)  
        .equ RCC_CR_MSION, 1 << 0   @ bitWidth 1 (MSI clock enable)  
 
    .equ RCC_ICSCR, RCC_BASE + 0x4 @ (Internal clock sources calibration  register) 
        .equ RCC_ICSCR_HSITRIM_Shift, 24   @ bitWidth 5 (HSI clock trimming)  
        .equ RCC_ICSCR_HSICAL_Shift, 16   @ bitWidth 8 (HSI clock calibration)  
        .equ RCC_ICSCR_MSITRIM_Shift, 8   @ bitWidth 8 (MSI clock trimming)  
        .equ RCC_ICSCR_MSICAL_Shift, 0   @ bitWidth 8 (MSI clock calibration)  
 
    .equ RCC_CFGR, RCC_BASE + 0x8 @ (Clock configuration register) 
        .equ RCC_CFGR_MCOPRE_Shift, 28   @ bitWidth 3 (Microcontroller clock output  prescaler)  
        .equ RCC_CFGR_MCOSEL_Shift, 24   @ bitWidth 3 (Microcontroller clock  output)  
        .equ RCC_CFGR_STOPWUCK, 1 << 15   @ bitWidth 1 (Wakeup from Stop and CSS backup clock  selection)  
        .equ RCC_CFGR_PPRE2_Shift, 11   @ bitWidth 3 (APB high-speed prescaler  APB2)  
        .equ RCC_CFGR_PPRE1_Shift, 8   @ bitWidth 3 (PB low-speed prescaler  APB1)  
        .equ RCC_CFGR_HPRE_Shift, 4   @ bitWidth 4 (AHB prescaler)  
        .equ RCC_CFGR_SWS_Shift, 2   @ bitWidth 2 (System clock switch status)  
        .equ RCC_CFGR_SW_Shift, 0   @ bitWidth 2 (System clock switch)  
 
    .equ RCC_PLLCFGR, RCC_BASE + 0xC @ (PLL configuration register) 
        .equ RCC_PLLCFGR_PLLR_Shift, 25   @ bitWidth 2 (Main PLL division factor for PLLCLK  system clock)  
        .equ RCC_PLLCFGR_PLLREN, 1 << 24   @ bitWidth 1 (Main PLL PLLCLK output  enable)  
        .equ RCC_PLLCFGR_PLLQ_Shift, 21   @ bitWidth 2 (Main PLL division factor for  PLLUSB1CLK48 MHz clock)  
        .equ RCC_PLLCFGR_PLLQEN, 1 << 20   @ bitWidth 1 (Main PLL PLLUSB1CLK output  enable)  
        .equ RCC_PLLCFGR_PLLP, 1 << 17   @ bitWidth 1 (Main PLL division factor for PLLSAI3CLK  SAI1 and SAI2 clock)  
        .equ RCC_PLLCFGR_PLLPEN, 1 << 16   @ bitWidth 1 (Main PLL PLLSAI3CLK output  enable)  
        .equ RCC_PLLCFGR_PLLN_Shift, 8   @ bitWidth 7 (Main PLL multiplication factor for  VCO)  
        .equ RCC_PLLCFGR_PLLM_Shift, 4   @ bitWidth 3 (Division factor for the main PLL and  audio PLL PLLSAI1 and PLLSAI2 input  clock)  
        .equ RCC_PLLCFGR_PLLSRC_Shift, 0   @ bitWidth 2 (Main PLL, PLLSAI1 and PLLSAI2 entry  clock source)  
 
    .equ RCC_PLLSAI1CFGR, RCC_BASE + 0x10 @ (PLLSAI1 configuration register) 
        .equ RCC_PLLSAI1CFGR_PLLSAI1R_Shift, 25   @ bitWidth 2 (PLLSAI1 division factor for PLLADC1CLK  ADC clock)  
        .equ RCC_PLLSAI1CFGR_PLLSAI1REN, 1 << 24   @ bitWidth 1 (PLLSAI1 PLLADC1CLK output  enable)  
        .equ RCC_PLLSAI1CFGR_PLLSAI1Q_Shift, 21   @ bitWidth 2 (SAI1PLL division factor for PLLUSB2CLK  48 MHz clock)  
        .equ RCC_PLLSAI1CFGR_PLLSAI1QEN, 1 << 20   @ bitWidth 1 (SAI1PLL PLLUSB2CLK output  enable)  
        .equ RCC_PLLSAI1CFGR_PLLSAI1P, 1 << 17   @ bitWidth 1 (SAI1PLL division factor for PLLSAI1CLK  SAI1 or SAI2 clock)  
        .equ RCC_PLLSAI1CFGR_PLLSAI1PEN, 1 << 16   @ bitWidth 1 (SAI1PLL PLLSAI1CLK output  enable)  
        .equ RCC_PLLSAI1CFGR_PLLSAI1N_Shift, 8   @ bitWidth 7 (SAI1PLL multiplication factor for  VCO)  
 
    .equ RCC_PLLSAI2CFGR, RCC_BASE + 0x14 @ (PLLSAI2 configuration register) 
        .equ RCC_PLLSAI2CFGR_PLLSAI2R_Shift, 25   @ bitWidth 2 (PLLSAI2 division factor for PLLADC2CLK  ADC clock)  
        .equ RCC_PLLSAI2CFGR_PLLSAI2REN, 1 << 24   @ bitWidth 1 (PLLSAI2 PLLADC2CLK output  enable)  
        .equ RCC_PLLSAI2CFGR_PLLSAI2P, 1 << 17   @ bitWidth 1 (SAI1PLL division factor for PLLSAI2CLK  SAI1 or SAI2 clock)  
        .equ RCC_PLLSAI2CFGR_PLLSAI2PEN, 1 << 16   @ bitWidth 1 (SAI2PLL PLLSAI2CLK output  enable)  
        .equ RCC_PLLSAI2CFGR_PLLSAI2N_Shift, 8   @ bitWidth 7 (SAI2PLL multiplication factor for  VCO)  
 
    .equ RCC_CIER, RCC_BASE + 0x18 @ (Clock interrupt enable  register) 
        .equ RCC_CIER_LSECSSIE, 1 << 9   @ bitWidth 1 (LSE clock security system interrupt  enable)  
        .equ RCC_CIER_PLLSAI2RDYIE, 1 << 7   @ bitWidth 1 (PLLSAI2 ready interrupt  enable)  
        .equ RCC_CIER_PLLSAI1RDYIE, 1 << 6   @ bitWidth 1 (PLLSAI1 ready interrupt  enable)  
        .equ RCC_CIER_PLLRDYIE, 1 << 5   @ bitWidth 1 (PLL ready interrupt enable)  
        .equ RCC_CIER_HSERDYIE, 1 << 4   @ bitWidth 1 (HSE ready interrupt enable)  
        .equ RCC_CIER_HSIRDYIE, 1 << 3   @ bitWidth 1 (HSI ready interrupt enable)  
        .equ RCC_CIER_MSIRDYIE, 1 << 2   @ bitWidth 1 (MSI ready interrupt enable)  
        .equ RCC_CIER_LSERDYIE, 1 << 1   @ bitWidth 1 (LSE ready interrupt enable)  
        .equ RCC_CIER_LSIRDYIE, 1 << 0   @ bitWidth 1 (LSI ready interrupt enable)  
 
    .equ RCC_CIFR, RCC_BASE + 0x1C @ (Clock interrupt flag register) 
        .equ RCC_CIFR_LSECSSF, 1 << 9   @ bitWidth 1 (LSE Clock security system interrupt  flag)  
        .equ RCC_CIFR_CSSF, 1 << 8   @ bitWidth 1 (Clock security system interrupt  flag)  
        .equ RCC_CIFR_PLLSAI2RDYF, 1 << 7   @ bitWidth 1 (PLLSAI2 ready interrupt  flag)  
        .equ RCC_CIFR_PLLSAI1RDYF, 1 << 6   @ bitWidth 1 (PLLSAI1 ready interrupt  flag)  
        .equ RCC_CIFR_PLLRDYF, 1 << 5   @ bitWidth 1 (PLL ready interrupt flag)  
        .equ RCC_CIFR_HSERDYF, 1 << 4   @ bitWidth 1 (HSE ready interrupt flag)  
        .equ RCC_CIFR_HSIRDYF, 1 << 3   @ bitWidth 1 (HSI ready interrupt flag)  
        .equ RCC_CIFR_MSIRDYF, 1 << 2   @ bitWidth 1 (MSI ready interrupt flag)  
        .equ RCC_CIFR_LSERDYF, 1 << 1   @ bitWidth 1 (LSE ready interrupt flag)  
        .equ RCC_CIFR_LSIRDYF, 1 << 0   @ bitWidth 1 (LSI ready interrupt flag)  
 
    .equ RCC_CICR, RCC_BASE + 0x20 @ (Clock interrupt clear register) 
        .equ RCC_CICR_LSECSSC, 1 << 9   @ bitWidth 1 (LSE Clock security system interrupt  clear)  
        .equ RCC_CICR_CSSC, 1 << 8   @ bitWidth 1 (Clock security system interrupt  clear)  
        .equ RCC_CICR_PLLSAI2RDYC, 1 << 7   @ bitWidth 1 (PLLSAI2 ready interrupt  clear)  
        .equ RCC_CICR_PLLSAI1RDYC, 1 << 6   @ bitWidth 1 (PLLSAI1 ready interrupt  clear)  
        .equ RCC_CICR_PLLRDYC, 1 << 5   @ bitWidth 1 (PLL ready interrupt clear)  
        .equ RCC_CICR_HSERDYC, 1 << 4   @ bitWidth 1 (HSE ready interrupt clear)  
        .equ RCC_CICR_HSIRDYC, 1 << 3   @ bitWidth 1 (HSI ready interrupt clear)  
        .equ RCC_CICR_MSIRDYC, 1 << 2   @ bitWidth 1 (MSI ready interrupt clear)  
        .equ RCC_CICR_LSERDYC, 1 << 1   @ bitWidth 1 (LSE ready interrupt clear)  
        .equ RCC_CICR_LSIRDYC, 1 << 0   @ bitWidth 1 (LSI ready interrupt clear)  
 
    .equ RCC_AHB1RSTR, RCC_BASE + 0x28 @ (AHB1 peripheral reset register) 
        .equ RCC_AHB1RSTR_TSCRST, 1 << 16   @ bitWidth 1 (Touch Sensing Controller  reset)  
        .equ RCC_AHB1RSTR_CRCRST, 1 << 11   @ bitWidth 1 (Reserved)  
        .equ RCC_AHB1RSTR_FLASHRST, 1 << 8   @ bitWidth 1 (Flash memory interface  reset)  
        .equ RCC_AHB1RSTR_DMA2RST, 1 << 1   @ bitWidth 1 (DMA2 reset)  
        .equ RCC_AHB1RSTR_DMA1RST, 1 << 0   @ bitWidth 1 (DMA1 reset)  
 
    .equ RCC_AHB2RSTR, RCC_BASE + 0x2C @ (AHB2 peripheral reset register) 
        .equ RCC_AHB2RSTR_RNGRST, 1 << 18   @ bitWidth 1 (Random number generator  reset)  
        .equ RCC_AHB2RSTR_AESRST, 1 << 16   @ bitWidth 1 (AES hardware accelerator  reset)  
        .equ RCC_AHB2RSTR_ADCRST, 1 << 13   @ bitWidth 1 (ADC reset)  
        .equ RCC_AHB2RSTR_OTGFSRST, 1 << 12   @ bitWidth 1 (USB OTG FS reset)  
        .equ RCC_AHB2RSTR_GPIOHRST, 1 << 7   @ bitWidth 1 (IO port H reset)  
        .equ RCC_AHB2RSTR_GPIOGRST, 1 << 6   @ bitWidth 1 (IO port G reset)  
        .equ RCC_AHB2RSTR_GPIOFRST, 1 << 5   @ bitWidth 1 (IO port F reset)  
        .equ RCC_AHB2RSTR_GPIOERST, 1 << 4   @ bitWidth 1 (IO port E reset)  
        .equ RCC_AHB2RSTR_GPIODRST, 1 << 3   @ bitWidth 1 (IO port D reset)  
        .equ RCC_AHB2RSTR_GPIOCRST, 1 << 2   @ bitWidth 1 (IO port C reset)  
        .equ RCC_AHB2RSTR_GPIOBRST, 1 << 1   @ bitWidth 1 (IO port B reset)  
        .equ RCC_AHB2RSTR_GPIOARST, 1 << 0   @ bitWidth 1 (IO port A reset)  
 
    .equ RCC_AHB3RSTR, RCC_BASE + 0x30 @ (AHB3 peripheral reset register) 
        .equ RCC_AHB3RSTR_QSPIRST, 1 << 8   @ bitWidth 1 (Quad SPI memory interface  reset)  
        .equ RCC_AHB3RSTR_FMCRST, 1 << 0   @ bitWidth 1 (Flexible memory controller  reset)  
 
    .equ RCC_APB1RSTR1, RCC_BASE + 0x38 @ (APB1 peripheral reset register  1) 
        .equ RCC_APB1RSTR1_LPTIM1RST, 1 << 31   @ bitWidth 1 (Low Power Timer 1 reset)  
        .equ RCC_APB1RSTR1_OPAMPRST, 1 << 30   @ bitWidth 1 (OPAMP interface reset)  
        .equ RCC_APB1RSTR1_DAC1RST, 1 << 29   @ bitWidth 1 (DAC1 interface reset)  
        .equ RCC_APB1RSTR1_PWRRST, 1 << 28   @ bitWidth 1 (Power interface reset)  
        .equ RCC_APB1RSTR1_CAN1RST, 1 << 25   @ bitWidth 1 (CAN1 reset)  
        .equ RCC_APB1RSTR1_I2C3RST, 1 << 23   @ bitWidth 1 (I2C3 reset)  
        .equ RCC_APB1RSTR1_I2C2RST, 1 << 22   @ bitWidth 1 (I2C2 reset)  
        .equ RCC_APB1RSTR1_I2C1RST, 1 << 21   @ bitWidth 1 (I2C1 reset)  
        .equ RCC_APB1RSTR1_UART5RST, 1 << 20   @ bitWidth 1 (UART5 reset)  
        .equ RCC_APB1RSTR1_UART4RST, 1 << 19   @ bitWidth 1 (UART4 reset)  
        .equ RCC_APB1RSTR1_USART3RST, 1 << 18   @ bitWidth 1 (USART3 reset)  
        .equ RCC_APB1RSTR1_USART2RST, 1 << 17   @ bitWidth 1 (USART2 reset)  
        .equ RCC_APB1RSTR1_SPI3RST, 1 << 15   @ bitWidth 1 (SPI3 reset)  
        .equ RCC_APB1RSTR1_SPI2RST, 1 << 14   @ bitWidth 1 (SPI2 reset)  
        .equ RCC_APB1RSTR1_LCDRST, 1 << 9   @ bitWidth 1 (LCD interface reset)  
        .equ RCC_APB1RSTR1_TIM7RST, 1 << 5   @ bitWidth 1 (TIM7 timer reset)  
        .equ RCC_APB1RSTR1_TIM6RST, 1 << 4   @ bitWidth 1 (TIM6 timer reset)  
        .equ RCC_APB1RSTR1_TIM5RST, 1 << 3   @ bitWidth 1 (TIM5 timer reset)  
        .equ RCC_APB1RSTR1_TIM4RST, 1 << 2   @ bitWidth 1 (TIM3 timer reset)  
        .equ RCC_APB1RSTR1_TIM3RST, 1 << 1   @ bitWidth 1 (TIM3 timer reset)  
        .equ RCC_APB1RSTR1_TIM2RST, 1 << 0   @ bitWidth 1 (TIM2 timer reset)  
 
    .equ RCC_APB1RSTR2, RCC_BASE + 0x3C @ (APB1 peripheral reset register  2) 
        .equ RCC_APB1RSTR2_LPTIM2RST, 1 << 5   @ bitWidth 1 (Low-power timer 2 reset)  
        .equ RCC_APB1RSTR2_SWPMI1RST, 1 << 2   @ bitWidth 1 (Single wire protocol reset)  
        .equ RCC_APB1RSTR2_LPUART1RST, 1 << 0   @ bitWidth 1 (Low-power UART 1 reset)  
 
    .equ RCC_APB2RSTR, RCC_BASE + 0x40 @ (APB2 peripheral reset register) 
        .equ RCC_APB2RSTR_DFSDMRST, 1 << 24   @ bitWidth 1 (Digital filters for sigma-delata  modulators DFSDM reset)  
        .equ RCC_APB2RSTR_SAI2RST, 1 << 22   @ bitWidth 1 (Serial audio interface 2 SAI2  reset)  
        .equ RCC_APB2RSTR_SAI1RST, 1 << 21   @ bitWidth 1 (Serial audio interface 1 SAI1  reset)  
        .equ RCC_APB2RSTR_TIM17RST, 1 << 18   @ bitWidth 1 (TIM17 timer reset)  
        .equ RCC_APB2RSTR_TIM16RST, 1 << 17   @ bitWidth 1 (TIM16 timer reset)  
        .equ RCC_APB2RSTR_TIM15RST, 1 << 16   @ bitWidth 1 (TIM15 timer reset)  
        .equ RCC_APB2RSTR_USART1RST, 1 << 14   @ bitWidth 1 (USART1 reset)  
        .equ RCC_APB2RSTR_TIM8RST, 1 << 13   @ bitWidth 1 (TIM8 timer reset)  
        .equ RCC_APB2RSTR_SPI1RST, 1 << 12   @ bitWidth 1 (SPI1 reset)  
        .equ RCC_APB2RSTR_TIM1RST, 1 << 11   @ bitWidth 1 (TIM1 timer reset)  
        .equ RCC_APB2RSTR_SDMMCRST, 1 << 10   @ bitWidth 1 (SDMMC reset)  
        .equ RCC_APB2RSTR_SYSCFGRST, 1 << 0   @ bitWidth 1 (System configuration SYSCFG  reset)  
 
    .equ RCC_AHB1ENR, RCC_BASE + 0x48 @ (AHB1 peripheral clock enable  register) 
        .equ RCC_AHB1ENR_TSCEN, 1 << 16   @ bitWidth 1 (Touch Sensing Controller clock  enable)  
        .equ RCC_AHB1ENR_CRCEN, 1 << 11   @ bitWidth 1 (Reserved)  
        .equ RCC_AHB1ENR_FLASHEN, 1 << 8   @ bitWidth 1 (Flash memory interface clock  enable)  
        .equ RCC_AHB1ENR_DMA2EN, 1 << 1   @ bitWidth 1 (DMA2 clock enable)  
        .equ RCC_AHB1ENR_DMA1EN, 1 << 0   @ bitWidth 1 (DMA1 clock enable)  
 
    .equ RCC_AHB2ENR, RCC_BASE + 0x4C @ (AHB2 peripheral clock enable  register) 
        .equ RCC_AHB2ENR_RNGEN, 1 << 18   @ bitWidth 1 (Random Number Generator clock  enable)  
        .equ RCC_AHB2ENR_AESEN, 1 << 16   @ bitWidth 1 (AES accelerator clock  enable)  
        .equ RCC_AHB2ENR_ADCEN, 1 << 13   @ bitWidth 1 (ADC clock enable)  
        .equ RCC_AHB2ENR_OTGFSEN, 1 << 12   @ bitWidth 1 (OTG full speed clock  enable)  
        .equ RCC_AHB2ENR_GPIOHEN, 1 << 7   @ bitWidth 1 (IO port H clock enable)  
        .equ RCC_AHB2ENR_GPIOGEN, 1 << 6   @ bitWidth 1 (IO port G clock enable)  
        .equ RCC_AHB2ENR_GPIOFEN, 1 << 5   @ bitWidth 1 (IO port F clock enable)  
        .equ RCC_AHB2ENR_GPIOEEN, 1 << 4   @ bitWidth 1 (IO port E clock enable)  
        .equ RCC_AHB2ENR_GPIODEN, 1 << 3   @ bitWidth 1 (IO port D clock enable)  
        .equ RCC_AHB2ENR_GPIOCEN, 1 << 2   @ bitWidth 1 (IO port C clock enable)  
        .equ RCC_AHB2ENR_GPIOBEN, 1 << 1   @ bitWidth 1 (IO port B clock enable)  
        .equ RCC_AHB2ENR_GPIOAEN, 1 << 0   @ bitWidth 1 (IO port A clock enable)  
 
    .equ RCC_AHB3ENR, RCC_BASE + 0x50 @ (AHB3 peripheral clock enable  register) 
        .equ RCC_AHB3ENR_QSPIEN, 1 << 8   @ bitWidth 1 (QSPIEN)  
        .equ RCC_AHB3ENR_FMCEN, 1 << 0   @ bitWidth 1 (Flexible memory controller clock  enable)  
 
    .equ RCC_APB1ENR1, RCC_BASE + 0x58 @ (APB1ENR1) 
        .equ RCC_APB1ENR1_LPTIM1EN, 1 << 31   @ bitWidth 1 (Low power timer 1 clock  enable)  
        .equ RCC_APB1ENR1_OPAMPEN, 1 << 30   @ bitWidth 1 (OPAMP interface clock  enable)  
        .equ RCC_APB1ENR1_DAC1EN, 1 << 29   @ bitWidth 1 (DAC1 interface clock  enable)  
        .equ RCC_APB1ENR1_PWREN, 1 << 28   @ bitWidth 1 (Power interface clock  enable)  
        .equ RCC_APB1ENR1_CAN1EN, 1 << 25   @ bitWidth 1 (CAN1 clock enable)  
        .equ RCC_APB1ENR1_I2C3EN, 1 << 23   @ bitWidth 1 (I2C3 clock enable)  
        .equ RCC_APB1ENR1_I2C2EN, 1 << 22   @ bitWidth 1 (I2C2 clock enable)  
        .equ RCC_APB1ENR1_I2C1EN, 1 << 21   @ bitWidth 1 (I2C1 clock enable)  
        .equ RCC_APB1ENR1_UART5EN, 1 << 20   @ bitWidth 1 (UART5 clock enable)  
        .equ RCC_APB1ENR1_UART4EN, 1 << 19   @ bitWidth 1 (UART4 clock enable)  
        .equ RCC_APB1ENR1_USART3EN, 1 << 18   @ bitWidth 1 (USART3 clock enable)  
        .equ RCC_APB1ENR1_USART2EN, 1 << 17   @ bitWidth 1 (USART2 clock enable)  
        .equ RCC_APB1ENR1_SP3EN, 1 << 15   @ bitWidth 1 (SPI3 clock enable)  
        .equ RCC_APB1ENR1_SPI2EN, 1 << 14   @ bitWidth 1 (SPI2 clock enable)  
        .equ RCC_APB1ENR1_WWDGEN, 1 << 11   @ bitWidth 1 (Window watchdog clock  enable)  
        .equ RCC_APB1ENR1_LCDEN, 1 << 9   @ bitWidth 1 (LCD clock enable)  
        .equ RCC_APB1ENR1_TIM7EN, 1 << 5   @ bitWidth 1 (TIM7 timer clock enable)  
        .equ RCC_APB1ENR1_TIM6EN, 1 << 4   @ bitWidth 1 (TIM6 timer clock enable)  
        .equ RCC_APB1ENR1_TIM5EN, 1 << 3   @ bitWidth 1 (Reserved)  
        .equ RCC_APB1ENR1_TIM4EN, 1 << 2   @ bitWidth 1 (TIM4 timer clock enable)  
        .equ RCC_APB1ENR1_TIM3EN, 1 << 1   @ bitWidth 1 (TIM3 timer clock enable)  
        .equ RCC_APB1ENR1_TIM2EN, 1 << 0   @ bitWidth 1 (TIM2 timer clock enable)  
 
    .equ RCC_APB1ENR2, RCC_BASE + 0x5C @ (APB1 peripheral clock enable register  2) 
        .equ RCC_APB1ENR2_LPTIM2EN, 1 << 5   @ bitWidth 1 (LPTIM2EN)  
        .equ RCC_APB1ENR2_SWPMI1EN, 1 << 2   @ bitWidth 1 (Single wire protocol clock  enable)  
        .equ RCC_APB1ENR2_LPUART1EN, 1 << 0   @ bitWidth 1 (Low power UART 1 clock  enable)  
 
    .equ RCC_APB2ENR, RCC_BASE + 0x60 @ (APB2ENR) 
        .equ RCC_APB2ENR_DFSDMEN, 1 << 24   @ bitWidth 1 (DFSDM timer clock enable)  
        .equ RCC_APB2ENR_SAI2EN, 1 << 22   @ bitWidth 1 (SAI2 clock enable)  
        .equ RCC_APB2ENR_SAI1EN, 1 << 21   @ bitWidth 1 (SAI1 clock enable)  
        .equ RCC_APB2ENR_TIM17EN, 1 << 18   @ bitWidth 1 (TIM17 timer clock enable)  
        .equ RCC_APB2ENR_TIM16EN, 1 << 17   @ bitWidth 1 (TIM16 timer clock enable)  
        .equ RCC_APB2ENR_TIM15EN, 1 << 16   @ bitWidth 1 (TIM15 timer clock enable)  
        .equ RCC_APB2ENR_USART1EN, 1 << 14   @ bitWidth 1 (USART1clock enable)  
        .equ RCC_APB2ENR_TIM8EN, 1 << 13   @ bitWidth 1 (TIM8 timer clock enable)  
        .equ RCC_APB2ENR_SPI1EN, 1 << 12   @ bitWidth 1 (SPI1 clock enable)  
        .equ RCC_APB2ENR_TIM1EN, 1 << 11   @ bitWidth 1 (TIM1 timer clock enable)  
        .equ RCC_APB2ENR_SDMMCEN, 1 << 10   @ bitWidth 1 (SDMMC clock enable)  
        .equ RCC_APB2ENR_FIREWALLEN, 1 << 7   @ bitWidth 1 (Firewall clock enable)  
        .equ RCC_APB2ENR_SYSCFGEN, 1 << 0   @ bitWidth 1 (SYSCFG clock enable)  
 
    .equ RCC_AHB1SMENR, RCC_BASE + 0x68 @ (AHB1 peripheral clocks enable in Sleep and  Stop modes register) 
        .equ RCC_AHB1SMENR_TSCSMEN, 1 << 16   @ bitWidth 1 (Touch Sensing Controller clocks enable  during Sleep and Stop modes)  
        .equ RCC_AHB1SMENR_CRCSMEN, 1 << 11   @ bitWidth 1 (CRCSMEN)  
        .equ RCC_AHB1SMENR_SRAM1SMEN, 1 << 9   @ bitWidth 1 (SRAM1 interface clocks enable during  Sleep and Stop modes)  
        .equ RCC_AHB1SMENR_FLASHSMEN, 1 << 8   @ bitWidth 1 (Flash memory interface clocks enable  during Sleep and Stop modes)  
        .equ RCC_AHB1SMENR_DMA2SMEN, 1 << 1   @ bitWidth 1 (DMA2 clocks enable during Sleep and Stop  modes)  
        .equ RCC_AHB1SMENR_DMA1SMEN, 1 << 0   @ bitWidth 1 (DMA1 clocks enable during Sleep and Stop  modes)  
 
    .equ RCC_AHB2SMENR, RCC_BASE + 0x6C @ (AHB2 peripheral clocks enable in Sleep and  Stop modes register) 
        .equ RCC_AHB2SMENR_RNGSMEN, 1 << 18   @ bitWidth 1 (Random Number Generator clocks enable  during Sleep and Stop modes)  
        .equ RCC_AHB2SMENR_AESSMEN, 1 << 16   @ bitWidth 1 (AES accelerator clocks enable during  Sleep and Stop modes)  
        .equ RCC_AHB2SMENR_ADCFSSMEN, 1 << 13   @ bitWidth 1 (ADC clocks enable during Sleep and Stop  modes)  
        .equ RCC_AHB2SMENR_OTGFSSMEN, 1 << 12   @ bitWidth 1 (OTG full speed clocks enable during  Sleep and Stop modes)  
        .equ RCC_AHB2SMENR_SRAM2SMEN, 1 << 9   @ bitWidth 1 (SRAM2 interface clocks enable during  Sleep and Stop modes)  
        .equ RCC_AHB2SMENR_GPIOHSMEN, 1 << 7   @ bitWidth 1 (IO port H clocks enable during Sleep and  Stop modes)  
        .equ RCC_AHB2SMENR_GPIOGSMEN, 1 << 6   @ bitWidth 1 (IO port G clocks enable during Sleep and  Stop modes)  
        .equ RCC_AHB2SMENR_GPIOFSMEN, 1 << 5   @ bitWidth 1 (IO port F clocks enable during Sleep and  Stop modes)  
        .equ RCC_AHB2SMENR_GPIOESMEN, 1 << 4   @ bitWidth 1 (IO port E clocks enable during Sleep and  Stop modes)  
        .equ RCC_AHB2SMENR_GPIODSMEN, 1 << 3   @ bitWidth 1 (IO port D clocks enable during Sleep and  Stop modes)  
        .equ RCC_AHB2SMENR_GPIOCSMEN, 1 << 2   @ bitWidth 1 (IO port C clocks enable during Sleep and  Stop modes)  
        .equ RCC_AHB2SMENR_GPIOBSMEN, 1 << 1   @ bitWidth 1 (IO port B clocks enable during Sleep and  Stop modes)  
        .equ RCC_AHB2SMENR_GPIOASMEN, 1 << 0   @ bitWidth 1 (IO port A clocks enable during Sleep and  Stop modes)  
 
    .equ RCC_AHB3SMENR, RCC_BASE + 0x70 @ (AHB3 peripheral clocks enable in Sleep and  Stop modes register) 
        .equ RCC_AHB3SMENR_QSPISMEN, 1 << 8   @ bitWidth 1 (QSPISMEN)  
        .equ RCC_AHB3SMENR_FMCSMEN, 1 << 0   @ bitWidth 1 (Flexible memory controller clocks enable  during Sleep and Stop modes)  
 
    .equ RCC_APB1SMENR1, RCC_BASE + 0x78 @ (APB1SMENR1) 
        .equ RCC_APB1SMENR1_LPTIM1SMEN, 1 << 31   @ bitWidth 1 (Low power timer 1 clocks enable during  Sleep and Stop modes)  
        .equ RCC_APB1SMENR1_OPAMPSMEN, 1 << 30   @ bitWidth 1 (OPAMP interface clocks enable during  Sleep and Stop modes)  
        .equ RCC_APB1SMENR1_DAC1SMEN, 1 << 29   @ bitWidth 1 (DAC1 interface clocks enable during  Sleep and Stop modes)  
        .equ RCC_APB1SMENR1_PWRSMEN, 1 << 28   @ bitWidth 1 (Power interface clocks enable during  Sleep and Stop modes)  
        .equ RCC_APB1SMENR1_CAN1SMEN, 1 << 25   @ bitWidth 1 (CAN1 clocks enable during Sleep and Stop  modes)  
        .equ RCC_APB1SMENR1_I2C3SMEN, 1 << 23   @ bitWidth 1 (I2C3 clocks enable during Sleep and Stop  modes)  
        .equ RCC_APB1SMENR1_I2C2SMEN, 1 << 22   @ bitWidth 1 (I2C2 clocks enable during Sleep and Stop  modes)  
        .equ RCC_APB1SMENR1_I2C1SMEN, 1 << 21   @ bitWidth 1 (I2C1 clocks enable during Sleep and Stop  modes)  
        .equ RCC_APB1SMENR1_UART5SMEN, 1 << 20   @ bitWidth 1 (UART5 clocks enable during Sleep and  Stop modes)  
        .equ RCC_APB1SMENR1_UART4SMEN, 1 << 19   @ bitWidth 1 (UART4 clocks enable during Sleep and  Stop modes)  
        .equ RCC_APB1SMENR1_USART3SMEN, 1 << 18   @ bitWidth 1 (USART3 clocks enable during Sleep and  Stop modes)  
        .equ RCC_APB1SMENR1_USART2SMEN, 1 << 17   @ bitWidth 1 (USART2 clocks enable during Sleep and  Stop modes)  
        .equ RCC_APB1SMENR1_SP3SMEN, 1 << 15   @ bitWidth 1 (SPI3 clocks enable during Sleep and Stop  modes)  
        .equ RCC_APB1SMENR1_SPI2SMEN, 1 << 14   @ bitWidth 1 (SPI2 clocks enable during Sleep and Stop  modes)  
        .equ RCC_APB1SMENR1_WWDGSMEN, 1 << 11   @ bitWidth 1 (Window watchdog clocks enable during  Sleep and Stop modes)  
        .equ RCC_APB1SMENR1_LCDSMEN, 1 << 9   @ bitWidth 1 (LCD clocks enable during Sleep and Stop  modes)  
        .equ RCC_APB1SMENR1_TIM7SMEN, 1 << 5   @ bitWidth 1 (TIM7 timer clocks enable during Sleep  and Stop modes)  
        .equ RCC_APB1SMENR1_TIM6SMEN, 1 << 4   @ bitWidth 1 (TIM6 timer clocks enable during Sleep  and Stop modes)  
        .equ RCC_APB1SMENR1_TIM5SMEN, 1 << 3   @ bitWidth 1 (Reserved)  
        .equ RCC_APB1SMENR1_TIM4SMEN, 1 << 2   @ bitWidth 1 (TIM4 timer clocks enable during Sleep  and Stop modes)  
        .equ RCC_APB1SMENR1_TIM3SMEN, 1 << 1   @ bitWidth 1 (TIM3 timer clocks enable during Sleep  and Stop modes)  
        .equ RCC_APB1SMENR1_TIM2SMEN, 1 << 0   @ bitWidth 1 (TIM2 timer clocks enable during Sleep  and Stop modes)  
 
    .equ RCC_APB1SMENR2, RCC_BASE + 0x7C @ (APB1 peripheral clocks enable in Sleep and  Stop modes register 2) 
        .equ RCC_APB1SMENR2_LPTIM2SMEN, 1 << 5   @ bitWidth 1 (LPTIM2SMEN)  
        .equ RCC_APB1SMENR2_SWPMI1SMEN, 1 << 2   @ bitWidth 1 (Single wire protocol clocks enable  during Sleep and Stop modes)  
        .equ RCC_APB1SMENR2_LPUART1SMEN, 1 << 0   @ bitWidth 1 (Low power UART 1 clocks enable during  Sleep and Stop modes)  
 
    .equ RCC_APB2SMENR, RCC_BASE + 0x80 @ (APB2SMENR) 
        .equ RCC_APB2SMENR_DFSDMSMEN, 1 << 24   @ bitWidth 1 (DFSDM timer clocks enable during Sleep  and Stop modes)  
        .equ RCC_APB2SMENR_SAI2SMEN, 1 << 22   @ bitWidth 1 (SAI2 clocks enable during Sleep and Stop  modes)  
        .equ RCC_APB2SMENR_SAI1SMEN, 1 << 21   @ bitWidth 1 (SAI1 clocks enable during Sleep and Stop  modes)  
        .equ RCC_APB2SMENR_TIM17SMEN, 1 << 18   @ bitWidth 1 (TIM17 timer clocks enable during Sleep  and Stop modes)  
        .equ RCC_APB2SMENR_TIM16SMEN, 1 << 17   @ bitWidth 1 (TIM16 timer clocks enable during Sleep  and Stop modes)  
        .equ RCC_APB2SMENR_TIM15SMEN, 1 << 16   @ bitWidth 1 (TIM15 timer clocks enable during Sleep  and Stop modes)  
        .equ RCC_APB2SMENR_USART1SMEN, 1 << 14   @ bitWidth 1 (USART1clocks enable during Sleep and  Stop modes)  
        .equ RCC_APB2SMENR_TIM8SMEN, 1 << 13   @ bitWidth 1 (TIM8 timer clocks enable during Sleep  and Stop modes)  
        .equ RCC_APB2SMENR_SPI1SMEN, 1 << 12   @ bitWidth 1 (SPI1 clocks enable during Sleep and Stop  modes)  
        .equ RCC_APB2SMENR_TIM1SMEN, 1 << 11   @ bitWidth 1 (TIM1 timer clocks enable during Sleep  and Stop modes)  
        .equ RCC_APB2SMENR_SDMMCSMEN, 1 << 10   @ bitWidth 1 (SDMMC clocks enable during Sleep and  Stop modes)  
        .equ RCC_APB2SMENR_SYSCFGSMEN, 1 << 0   @ bitWidth 1 (SYSCFG clocks enable during Sleep and  Stop modes)  
 
    .equ RCC_CCIPR, RCC_BASE + 0x88 @ (CCIPR) 
        .equ RCC_CCIPR_DFSDMSEL, 1 << 31   @ bitWidth 1 (DFSDM clock source  selection)  
        .equ RCC_CCIPR_SWPMI1SEL, 1 << 30   @ bitWidth 1 (SWPMI1 clock source  selection)  
        .equ RCC_CCIPR_ADCSEL_Shift, 28   @ bitWidth 2 (ADCs clock source  selection)  
        .equ RCC_CCIPR_CLK48SEL_Shift, 26   @ bitWidth 2 (48 MHz clock source  selection)  
        .equ RCC_CCIPR_SAI2SEL_Shift, 24   @ bitWidth 2 (SAI2 clock source  selection)  
        .equ RCC_CCIPR_SAI1SEL_Shift, 22   @ bitWidth 2 (SAI1 clock source  selection)  
        .equ RCC_CCIPR_LPTIM2SEL_Shift, 20   @ bitWidth 2 (Low power timer 2 clock source  selection)  
        .equ RCC_CCIPR_LPTIM1SEL_Shift, 18   @ bitWidth 2 (Low power timer 1 clock source  selection)  
        .equ RCC_CCIPR_I2C3SEL_Shift, 16   @ bitWidth 2 (I2C3 clock source  selection)  
        .equ RCC_CCIPR_I2C2SEL_Shift, 14   @ bitWidth 2 (I2C2 clock source  selection)  
        .equ RCC_CCIPR_I2C1SEL_Shift, 12   @ bitWidth 2 (I2C1 clock source  selection)  
        .equ RCC_CCIPR_LPUART1SEL_Shift, 10   @ bitWidth 2 (LPUART1 clock source  selection)  
        .equ RCC_CCIPR_UART5SEL_Shift, 8   @ bitWidth 2 (UART5 clock source  selection)  
        .equ RCC_CCIPR_UART4SEL_Shift, 6   @ bitWidth 2 (UART4 clock source  selection)  
        .equ RCC_CCIPR_USART3SEL_Shift, 4   @ bitWidth 2 (USART3 clock source  selection)  
        .equ RCC_CCIPR_USART2SEL_Shift, 2   @ bitWidth 2 (USART2 clock source  selection)  
        .equ RCC_CCIPR_USART1SEL_Shift, 0   @ bitWidth 2 (USART1 clock source  selection)  
 
    .equ RCC_BDCR, RCC_BASE + 0x90 @ (BDCR) 
        .equ RCC_BDCR_LSCOSEL, 1 << 25   @ bitWidth 1 (Low speed clock output  selection)  
        .equ RCC_BDCR_LSCOEN, 1 << 24   @ bitWidth 1 (Low speed clock output  enable)  
        .equ RCC_BDCR_BDRST, 1 << 16   @ bitWidth 1 (Backup domain software  reset)  
        .equ RCC_BDCR_RTCEN, 1 << 15   @ bitWidth 1 (RTC clock enable)  
        .equ RCC_BDCR_RTCSEL_Shift, 8   @ bitWidth 2 (RTC clock source selection)  
        .equ RCC_BDCR_LSECSSD, 1 << 6   @ bitWidth 1 (LSECSSD)  
        .equ RCC_BDCR_LSECSSON, 1 << 5   @ bitWidth 1 (LSECSSON)  
        .equ RCC_BDCR_LSEDRV_Shift, 3   @ bitWidth 2 (SE oscillator drive  capability)  
        .equ RCC_BDCR_LSEBYP, 1 << 2   @ bitWidth 1 (LSE oscillator bypass)  
        .equ RCC_BDCR_LSERDY, 1 << 1   @ bitWidth 1 (LSE oscillator ready)  
        .equ RCC_BDCR_LSEON, 1 << 0   @ bitWidth 1 (LSE oscillator enable)  
 
    .equ RCC_CSR, RCC_BASE + 0x94 @ (CSR) 
        .equ RCC_CSR_LPWRSTF, 1 << 31   @ bitWidth 1 (Low-power reset flag)  
        .equ RCC_CSR_WWDGRSTF, 1 << 30   @ bitWidth 1 (Window watchdog reset flag)  
        .equ RCC_CSR_IWDGRSTF, 1 << 29   @ bitWidth 1 (Independent window watchdog reset  flag)  
        .equ RCC_CSR_SFTRSTF, 1 << 28   @ bitWidth 1 (Software reset flag)  
        .equ RCC_CSR_BORRSTF, 1 << 27   @ bitWidth 1 (BOR flag)  
        .equ RCC_CSR_PINRSTF, 1 << 26   @ bitWidth 1 (Pin reset flag)  
        .equ RCC_CSR_OBLRSTF, 1 << 25   @ bitWidth 1 (Option byte loader reset  flag)  
        .equ RCC_CSR_FIREWALLRSTF, 1 << 24   @ bitWidth 1 (Firewall reset flag)  
        .equ RCC_CSR_RMVF, 1 << 23   @ bitWidth 1 (Remove reset flag)  
        .equ RCC_CSR_MSISRANGE_Shift, 8   @ bitWidth 4 (SI range after Standby  mode)  
        .equ RCC_CSR_LSIRDY, 1 << 1   @ bitWidth 1 (LSI oscillator ready)  
        .equ RCC_CSR_LSION, 1 << 0   @ bitWidth 1 (LSI oscillator enable)  
 

@=========================== PWR ===========================@
.equ PWR_BASE, 0x40007000 @ (Power control) 
    .equ PWR_CR1, PWR_BASE + 0x0 @ (Power control register 1) 
        .equ PWR_CR1_LPR, 1 << 14   @ bitWidth 1 (Low-power run)  
        .equ PWR_CR1_VOS_Shift, 9   @ bitWidth 2 (Voltage scaling range  selection)  
        .equ PWR_CR1_DBP, 1 << 8   @ bitWidth 1 (Disable backup domain write  protection)  
        .equ PWR_CR1_LPMS_Shift, 0   @ bitWidth 3 (Low-power mode selection)  
 
    .equ PWR_CR2, PWR_BASE + 0x4 @ (Power control register 2) 
        .equ PWR_CR2_USV, 1 << 10   @ bitWidth 1 (VDDUSB USB supply valid)  
        .equ PWR_CR2_IOSV, 1 << 9   @ bitWidth 1 (VDDIO2 Independent I/Os supply  valid)  
        .equ PWR_CR2_PVME4, 1 << 7   @ bitWidth 1 (Peripheral voltage monitoring 4 enable:  VDDA vs. 2.2V)  
        .equ PWR_CR2_PVME3, 1 << 6   @ bitWidth 1 (Peripheral voltage monitoring 3 enable:  VDDA vs. 1.62V)  
        .equ PWR_CR2_PVME2, 1 << 5   @ bitWidth 1 (Peripheral voltage monitoring 2 enable:  VDDIO2 vs. 0.9V)  
        .equ PWR_CR2_PVME1, 1 << 4   @ bitWidth 1 (Peripheral voltage monitoring 1 enable:  VDDUSB vs. 1.2V)  
        .equ PWR_CR2_PLS_Shift, 1   @ bitWidth 3 (Power voltage detector level  selection)  
        .equ PWR_CR2_PVDE, 1 << 0   @ bitWidth 1 (Power voltage detector  enable)  
 
    .equ PWR_CR3, PWR_BASE + 0x8 @ (Power control register 3) 
        .equ PWR_CR3_EWF, 1 << 15   @ bitWidth 1 (Enable internal wakeup  line)  
        .equ PWR_CR3_APC, 1 << 10   @ bitWidth 1 (Apply pull-up and pull-down  configuration)  
        .equ PWR_CR3_RRS, 1 << 8   @ bitWidth 1 (SRAM2 retention in Standby  mode)  
        .equ PWR_CR3_EWUP5, 1 << 4   @ bitWidth 1 (Enable Wakeup pin WKUP5)  
        .equ PWR_CR3_EWUP4, 1 << 3   @ bitWidth 1 (Enable Wakeup pin WKUP4)  
        .equ PWR_CR3_EWUP3, 1 << 2   @ bitWidth 1 (Enable Wakeup pin WKUP3)  
        .equ PWR_CR3_EWUP2, 1 << 1   @ bitWidth 1 (Enable Wakeup pin WKUP2)  
        .equ PWR_CR3_EWUP1, 1 << 0   @ bitWidth 1 (Enable Wakeup pin WKUP1)  
 
    .equ PWR_CR4, PWR_BASE + 0xC @ (Power control register 4) 
        .equ PWR_CR4_VBRS, 1 << 9   @ bitWidth 1 (VBAT battery charging resistor  selection)  
        .equ PWR_CR4_VBE, 1 << 8   @ bitWidth 1 (VBAT battery charging  enable)  
        .equ PWR_CR4_WP5, 1 << 4   @ bitWidth 1 (Wakeup pin WKUP5 polarity)  
        .equ PWR_CR4_WP4, 1 << 3   @ bitWidth 1 (Wakeup pin WKUP4 polarity)  
        .equ PWR_CR4_WP3, 1 << 2   @ bitWidth 1 (Wakeup pin WKUP3 polarity)  
        .equ PWR_CR4_WP2, 1 << 1   @ bitWidth 1 (Wakeup pin WKUP2 polarity)  
        .equ PWR_CR4_WP1, 1 << 0   @ bitWidth 1 (Wakeup pin WKUP1 polarity)  
 
    .equ PWR_SR1, PWR_BASE + 0x10 @ (Power status register 1) 
        .equ PWR_SR1_WUFI, 1 << 15   @ bitWidth 1 (Wakeup flag internal)  
        .equ PWR_SR1_CSBF, 1 << 8   @ bitWidth 1 (Standby flag)  
        .equ PWR_SR1_CWUF5, 1 << 4   @ bitWidth 1 (Wakeup flag 5)  
        .equ PWR_SR1_CWUF4, 1 << 3   @ bitWidth 1 (Wakeup flag 4)  
        .equ PWR_SR1_CWUF3, 1 << 2   @ bitWidth 1 (Wakeup flag 3)  
        .equ PWR_SR1_CWUF2, 1 << 1   @ bitWidth 1 (Wakeup flag 2)  
        .equ PWR_SR1_CWUF1, 1 << 0   @ bitWidth 1 (Wakeup flag 1)  
 
    .equ PWR_SR2, PWR_BASE + 0x14 @ (Power status register 2) 
        .equ PWR_SR2_PVMO4, 1 << 15   @ bitWidth 1 (Peripheral voltage monitoring output:  VDDA vs. 2.2 V)  
        .equ PWR_SR2_PVMO3, 1 << 14   @ bitWidth 1 (Peripheral voltage monitoring output:  VDDA vs. 1.62 V)  
        .equ PWR_SR2_PVMO2, 1 << 13   @ bitWidth 1 (Peripheral voltage monitoring output:  VDDIO2 vs. 0.9 V)  
        .equ PWR_SR2_PVMO1, 1 << 12   @ bitWidth 1 (Peripheral voltage monitoring output:  VDDUSB vs. 1.2 V)  
        .equ PWR_SR2_PVDO, 1 << 11   @ bitWidth 1 (Power voltage detector  output)  
        .equ PWR_SR2_VOSF, 1 << 10   @ bitWidth 1 (Voltage scaling flag)  
        .equ PWR_SR2_REGLPF, 1 << 9   @ bitWidth 1 (Low-power regulator flag)  
        .equ PWR_SR2_REGLPS, 1 << 8   @ bitWidth 1 (Low-power regulator  started)  
 
    .equ PWR_SCR, PWR_BASE + 0x18 @ (Power status clear register) 
        .equ PWR_SCR_SBF, 1 << 8   @ bitWidth 1 (Clear standby flag)  
        .equ PWR_SCR_WUF5, 1 << 4   @ bitWidth 1 (Clear wakeup flag 5)  
        .equ PWR_SCR_WUF4, 1 << 3   @ bitWidth 1 (Clear wakeup flag 4)  
        .equ PWR_SCR_WUF3, 1 << 2   @ bitWidth 1 (Clear wakeup flag 3)  
        .equ PWR_SCR_WUF2, 1 << 1   @ bitWidth 1 (Clear wakeup flag 2)  
        .equ PWR_SCR_WUF1, 1 << 0   @ bitWidth 1 (Clear wakeup flag 1)  
 
    .equ PWR_PUCRA, PWR_BASE + 0x20 @ (Power Port A pull-up control  register) 
        .equ PWR_PUCRA_PU15, 1 << 15   @ bitWidth 1 (Port A pull-up bit y  y=0..15)  
        .equ PWR_PUCRA_PU14, 1 << 14   @ bitWidth 1 (Port A pull-up bit y  y=0..15)  
        .equ PWR_PUCRA_PU13, 1 << 13   @ bitWidth 1 (Port A pull-up bit y  y=0..15)  
        .equ PWR_PUCRA_PU12, 1 << 12   @ bitWidth 1 (Port A pull-up bit y  y=0..15)  
        .equ PWR_PUCRA_PU11, 1 << 11   @ bitWidth 1 (Port A pull-up bit y  y=0..15)  
        .equ PWR_PUCRA_PU10, 1 << 10   @ bitWidth 1 (Port A pull-up bit y  y=0..15)  
        .equ PWR_PUCRA_PU9, 1 << 9   @ bitWidth 1 (Port A pull-up bit y  y=0..15)  
        .equ PWR_PUCRA_PU8, 1 << 8   @ bitWidth 1 (Port A pull-up bit y  y=0..15)  
        .equ PWR_PUCRA_PU7, 1 << 7   @ bitWidth 1 (Port A pull-up bit y  y=0..15)  
        .equ PWR_PUCRA_PU6, 1 << 6   @ bitWidth 1 (Port A pull-up bit y  y=0..15)  
        .equ PWR_PUCRA_PU5, 1 << 5   @ bitWidth 1 (Port A pull-up bit y  y=0..15)  
        .equ PWR_PUCRA_PU4, 1 << 4   @ bitWidth 1 (Port A pull-up bit y  y=0..15)  
        .equ PWR_PUCRA_PU3, 1 << 3   @ bitWidth 1 (Port A pull-up bit y  y=0..15)  
        .equ PWR_PUCRA_PU2, 1 << 2   @ bitWidth 1 (Port A pull-up bit y  y=0..15)  
        .equ PWR_PUCRA_PU1, 1 << 1   @ bitWidth 1 (Port A pull-up bit y  y=0..15)  
        .equ PWR_PUCRA_PU0, 1 << 0   @ bitWidth 1 (Port A pull-up bit y  y=0..15)  
 
    .equ PWR_PDCRA, PWR_BASE + 0x24 @ (Power Port A pull-down control  register) 
        .equ PWR_PDCRA_PD15, 1 << 15   @ bitWidth 1 (Port A pull-down bit y  y=0..15)  
        .equ PWR_PDCRA_PD14, 1 << 14   @ bitWidth 1 (Port A pull-down bit y  y=0..15)  
        .equ PWR_PDCRA_PD13, 1 << 13   @ bitWidth 1 (Port A pull-down bit y  y=0..15)  
        .equ PWR_PDCRA_PD12, 1 << 12   @ bitWidth 1 (Port A pull-down bit y  y=0..15)  
        .equ PWR_PDCRA_PD11, 1 << 11   @ bitWidth 1 (Port A pull-down bit y  y=0..15)  
        .equ PWR_PDCRA_PD10, 1 << 10   @ bitWidth 1 (Port A pull-down bit y  y=0..15)  
        .equ PWR_PDCRA_PD9, 1 << 9   @ bitWidth 1 (Port A pull-down bit y  y=0..15)  
        .equ PWR_PDCRA_PD8, 1 << 8   @ bitWidth 1 (Port A pull-down bit y  y=0..15)  
        .equ PWR_PDCRA_PD7, 1 << 7   @ bitWidth 1 (Port A pull-down bit y  y=0..15)  
        .equ PWR_PDCRA_PD6, 1 << 6   @ bitWidth 1 (Port A pull-down bit y  y=0..15)  
        .equ PWR_PDCRA_PD5, 1 << 5   @ bitWidth 1 (Port A pull-down bit y  y=0..15)  
        .equ PWR_PDCRA_PD4, 1 << 4   @ bitWidth 1 (Port A pull-down bit y  y=0..15)  
        .equ PWR_PDCRA_PD3, 1 << 3   @ bitWidth 1 (Port A pull-down bit y  y=0..15)  
        .equ PWR_PDCRA_PD2, 1 << 2   @ bitWidth 1 (Port A pull-down bit y  y=0..15)  
        .equ PWR_PDCRA_PD1, 1 << 1   @ bitWidth 1 (Port A pull-down bit y  y=0..15)  
        .equ PWR_PDCRA_PD0, 1 << 0   @ bitWidth 1 (Port A pull-down bit y  y=0..15)  
 
    .equ PWR_PUCRB, PWR_BASE + 0x28 @ (Power Port B pull-up control  register) 
        .equ PWR_PUCRB_PU15, 1 << 15   @ bitWidth 1 (Port B pull-up bit y  y=0..15)  
        .equ PWR_PUCRB_PU14, 1 << 14   @ bitWidth 1 (Port B pull-up bit y  y=0..15)  
        .equ PWR_PUCRB_PU13, 1 << 13   @ bitWidth 1 (Port B pull-up bit y  y=0..15)  
        .equ PWR_PUCRB_PU12, 1 << 12   @ bitWidth 1 (Port B pull-up bit y  y=0..15)  
        .equ PWR_PUCRB_PU11, 1 << 11   @ bitWidth 1 (Port B pull-up bit y  y=0..15)  
        .equ PWR_PUCRB_PU10, 1 << 10   @ bitWidth 1 (Port B pull-up bit y  y=0..15)  
        .equ PWR_PUCRB_PU9, 1 << 9   @ bitWidth 1 (Port B pull-up bit y  y=0..15)  
        .equ PWR_PUCRB_PU8, 1 << 8   @ bitWidth 1 (Port B pull-up bit y  y=0..15)  
        .equ PWR_PUCRB_PU7, 1 << 7   @ bitWidth 1 (Port B pull-up bit y  y=0..15)  
        .equ PWR_PUCRB_PU6, 1 << 6   @ bitWidth 1 (Port B pull-up bit y  y=0..15)  
        .equ PWR_PUCRB_PU5, 1 << 5   @ bitWidth 1 (Port B pull-up bit y  y=0..15)  
        .equ PWR_PUCRB_PU4, 1 << 4   @ bitWidth 1 (Port B pull-up bit y  y=0..15)  
        .equ PWR_PUCRB_PU3, 1 << 3   @ bitWidth 1 (Port B pull-up bit y  y=0..15)  
        .equ PWR_PUCRB_PU2, 1 << 2   @ bitWidth 1 (Port B pull-up bit y  y=0..15)  
        .equ PWR_PUCRB_PU1, 1 << 1   @ bitWidth 1 (Port B pull-up bit y  y=0..15)  
        .equ PWR_PUCRB_PU0, 1 << 0   @ bitWidth 1 (Port B pull-up bit y  y=0..15)  
 
    .equ PWR_PDCRB, PWR_BASE + 0x2C @ (Power Port B pull-down control  register) 
        .equ PWR_PDCRB_PD15, 1 << 15   @ bitWidth 1 (Port B pull-down bit y  y=0..15)  
        .equ PWR_PDCRB_PD14, 1 << 14   @ bitWidth 1 (Port B pull-down bit y  y=0..15)  
        .equ PWR_PDCRB_PD13, 1 << 13   @ bitWidth 1 (Port B pull-down bit y  y=0..15)  
        .equ PWR_PDCRB_PD12, 1 << 12   @ bitWidth 1 (Port B pull-down bit y  y=0..15)  
        .equ PWR_PDCRB_PD11, 1 << 11   @ bitWidth 1 (Port B pull-down bit y  y=0..15)  
        .equ PWR_PDCRB_PD10, 1 << 10   @ bitWidth 1 (Port B pull-down bit y  y=0..15)  
        .equ PWR_PDCRB_PD9, 1 << 9   @ bitWidth 1 (Port B pull-down bit y  y=0..15)  
        .equ PWR_PDCRB_PD8, 1 << 8   @ bitWidth 1 (Port B pull-down bit y  y=0..15)  
        .equ PWR_PDCRB_PD7, 1 << 7   @ bitWidth 1 (Port B pull-down bit y  y=0..15)  
        .equ PWR_PDCRB_PD6, 1 << 6   @ bitWidth 1 (Port B pull-down bit y  y=0..15)  
        .equ PWR_PDCRB_PD5, 1 << 5   @ bitWidth 1 (Port B pull-down bit y  y=0..15)  
        .equ PWR_PDCRB_PD4, 1 << 4   @ bitWidth 1 (Port B pull-down bit y  y=0..15)  
        .equ PWR_PDCRB_PD3, 1 << 3   @ bitWidth 1 (Port B pull-down bit y  y=0..15)  
        .equ PWR_PDCRB_PD2, 1 << 2   @ bitWidth 1 (Port B pull-down bit y  y=0..15)  
        .equ PWR_PDCRB_PD1, 1 << 1   @ bitWidth 1 (Port B pull-down bit y  y=0..15)  
        .equ PWR_PDCRB_PD0, 1 << 0   @ bitWidth 1 (Port B pull-down bit y  y=0..15)  
 
    .equ PWR_PUCRC, PWR_BASE + 0x30 @ (Power Port C pull-up control  register) 
        .equ PWR_PUCRC_PU15, 1 << 15   @ bitWidth 1 (Port C pull-up bit y  y=0..15)  
        .equ PWR_PUCRC_PU14, 1 << 14   @ bitWidth 1 (Port C pull-up bit y  y=0..15)  
        .equ PWR_PUCRC_PU13, 1 << 13   @ bitWidth 1 (Port C pull-up bit y  y=0..15)  
        .equ PWR_PUCRC_PU12, 1 << 12   @ bitWidth 1 (Port C pull-up bit y  y=0..15)  
        .equ PWR_PUCRC_PU11, 1 << 11   @ bitWidth 1 (Port C pull-up bit y  y=0..15)  
        .equ PWR_PUCRC_PU10, 1 << 10   @ bitWidth 1 (Port C pull-up bit y  y=0..15)  
        .equ PWR_PUCRC_PU9, 1 << 9   @ bitWidth 1 (Port C pull-up bit y  y=0..15)  
        .equ PWR_PUCRC_PU8, 1 << 8   @ bitWidth 1 (Port C pull-up bit y  y=0..15)  
        .equ PWR_PUCRC_PU7, 1 << 7   @ bitWidth 1 (Port C pull-up bit y  y=0..15)  
        .equ PWR_PUCRC_PU6, 1 << 6   @ bitWidth 1 (Port C pull-up bit y  y=0..15)  
        .equ PWR_PUCRC_PU5, 1 << 5   @ bitWidth 1 (Port C pull-up bit y  y=0..15)  
        .equ PWR_PUCRC_PU4, 1 << 4   @ bitWidth 1 (Port C pull-up bit y  y=0..15)  
        .equ PWR_PUCRC_PU3, 1 << 3   @ bitWidth 1 (Port C pull-up bit y  y=0..15)  
        .equ PWR_PUCRC_PU2, 1 << 2   @ bitWidth 1 (Port C pull-up bit y  y=0..15)  
        .equ PWR_PUCRC_PU1, 1 << 1   @ bitWidth 1 (Port C pull-up bit y  y=0..15)  
        .equ PWR_PUCRC_PU0, 1 << 0   @ bitWidth 1 (Port C pull-up bit y  y=0..15)  
 
    .equ PWR_PDCRC, PWR_BASE + 0x34 @ (Power Port C pull-down control  register) 
        .equ PWR_PDCRC_PD15, 1 << 15   @ bitWidth 1 (Port C pull-down bit y  y=0..15)  
        .equ PWR_PDCRC_PD14, 1 << 14   @ bitWidth 1 (Port C pull-down bit y  y=0..15)  
        .equ PWR_PDCRC_PD13, 1 << 13   @ bitWidth 1 (Port C pull-down bit y  y=0..15)  
        .equ PWR_PDCRC_PD12, 1 << 12   @ bitWidth 1 (Port C pull-down bit y  y=0..15)  
        .equ PWR_PDCRC_PD11, 1 << 11   @ bitWidth 1 (Port C pull-down bit y  y=0..15)  
        .equ PWR_PDCRC_PD10, 1 << 10   @ bitWidth 1 (Port C pull-down bit y  y=0..15)  
        .equ PWR_PDCRC_PD9, 1 << 9   @ bitWidth 1 (Port C pull-down bit y  y=0..15)  
        .equ PWR_PDCRC_PD8, 1 << 8   @ bitWidth 1 (Port C pull-down bit y  y=0..15)  
        .equ PWR_PDCRC_PD7, 1 << 7   @ bitWidth 1 (Port C pull-down bit y  y=0..15)  
        .equ PWR_PDCRC_PD6, 1 << 6   @ bitWidth 1 (Port C pull-down bit y  y=0..15)  
        .equ PWR_PDCRC_PD5, 1 << 5   @ bitWidth 1 (Port C pull-down bit y  y=0..15)  
        .equ PWR_PDCRC_PD4, 1 << 4   @ bitWidth 1 (Port C pull-down bit y  y=0..15)  
        .equ PWR_PDCRC_PD3, 1 << 3   @ bitWidth 1 (Port C pull-down bit y  y=0..15)  
        .equ PWR_PDCRC_PD2, 1 << 2   @ bitWidth 1 (Port C pull-down bit y  y=0..15)  
        .equ PWR_PDCRC_PD1, 1 << 1   @ bitWidth 1 (Port C pull-down bit y  y=0..15)  
        .equ PWR_PDCRC_PD0, 1 << 0   @ bitWidth 1 (Port C pull-down bit y  y=0..15)  
 
    .equ PWR_PUCRD, PWR_BASE + 0x38 @ (Power Port D pull-up control  register) 
        .equ PWR_PUCRD_PU15, 1 << 15   @ bitWidth 1 (Port D pull-up bit y  y=0..15)  
        .equ PWR_PUCRD_PU14, 1 << 14   @ bitWidth 1 (Port D pull-up bit y  y=0..15)  
        .equ PWR_PUCRD_PU13, 1 << 13   @ bitWidth 1 (Port D pull-up bit y  y=0..15)  
        .equ PWR_PUCRD_PU12, 1 << 12   @ bitWidth 1 (Port D pull-up bit y  y=0..15)  
        .equ PWR_PUCRD_PU11, 1 << 11   @ bitWidth 1 (Port D pull-up bit y  y=0..15)  
        .equ PWR_PUCRD_PU10, 1 << 10   @ bitWidth 1 (Port D pull-up bit y  y=0..15)  
        .equ PWR_PUCRD_PU9, 1 << 9   @ bitWidth 1 (Port D pull-up bit y  y=0..15)  
        .equ PWR_PUCRD_PU8, 1 << 8   @ bitWidth 1 (Port D pull-up bit y  y=0..15)  
        .equ PWR_PUCRD_PU7, 1 << 7   @ bitWidth 1 (Port D pull-up bit y  y=0..15)  
        .equ PWR_PUCRD_PU6, 1 << 6   @ bitWidth 1 (Port D pull-up bit y  y=0..15)  
        .equ PWR_PUCRD_PU5, 1 << 5   @ bitWidth 1 (Port D pull-up bit y  y=0..15)  
        .equ PWR_PUCRD_PU4, 1 << 4   @ bitWidth 1 (Port D pull-up bit y  y=0..15)  
        .equ PWR_PUCRD_PU3, 1 << 3   @ bitWidth 1 (Port D pull-up bit y  y=0..15)  
        .equ PWR_PUCRD_PU2, 1 << 2   @ bitWidth 1 (Port D pull-up bit y  y=0..15)  
        .equ PWR_PUCRD_PU1, 1 << 1   @ bitWidth 1 (Port D pull-up bit y  y=0..15)  
        .equ PWR_PUCRD_PU0, 1 << 0   @ bitWidth 1 (Port D pull-up bit y  y=0..15)  
 
    .equ PWR_PDCRD, PWR_BASE + 0x3C @ (Power Port D pull-down control  register) 
        .equ PWR_PDCRD_PD15, 1 << 15   @ bitWidth 1 (Port D pull-down bit y  y=0..15)  
        .equ PWR_PDCRD_PD14, 1 << 14   @ bitWidth 1 (Port D pull-down bit y  y=0..15)  
        .equ PWR_PDCRD_PD13, 1 << 13   @ bitWidth 1 (Port D pull-down bit y  y=0..15)  
        .equ PWR_PDCRD_PD12, 1 << 12   @ bitWidth 1 (Port D pull-down bit y  y=0..15)  
        .equ PWR_PDCRD_PD11, 1 << 11   @ bitWidth 1 (Port D pull-down bit y  y=0..15)  
        .equ PWR_PDCRD_PD10, 1 << 10   @ bitWidth 1 (Port D pull-down bit y  y=0..15)  
        .equ PWR_PDCRD_PD9, 1 << 9   @ bitWidth 1 (Port D pull-down bit y  y=0..15)  
        .equ PWR_PDCRD_PD8, 1 << 8   @ bitWidth 1 (Port D pull-down bit y  y=0..15)  
        .equ PWR_PDCRD_PD7, 1 << 7   @ bitWidth 1 (Port D pull-down bit y  y=0..15)  
        .equ PWR_PDCRD_PD6, 1 << 6   @ bitWidth 1 (Port D pull-down bit y  y=0..15)  
        .equ PWR_PDCRD_PD5, 1 << 5   @ bitWidth 1 (Port D pull-down bit y  y=0..15)  
        .equ PWR_PDCRD_PD4, 1 << 4   @ bitWidth 1 (Port D pull-down bit y  y=0..15)  
        .equ PWR_PDCRD_PD3, 1 << 3   @ bitWidth 1 (Port D pull-down bit y  y=0..15)  
        .equ PWR_PDCRD_PD2, 1 << 2   @ bitWidth 1 (Port D pull-down bit y  y=0..15)  
        .equ PWR_PDCRD_PD1, 1 << 1   @ bitWidth 1 (Port D pull-down bit y  y=0..15)  
        .equ PWR_PDCRD_PD0, 1 << 0   @ bitWidth 1 (Port D pull-down bit y  y=0..15)  
 
    .equ PWR_PUCRE, PWR_BASE + 0x40 @ (Power Port E pull-up control  register) 
        .equ PWR_PUCRE_PU15, 1 << 15   @ bitWidth 1 (Port E pull-up bit y  y=0..15)  
        .equ PWR_PUCRE_PU14, 1 << 14   @ bitWidth 1 (Port E pull-up bit y  y=0..15)  
        .equ PWR_PUCRE_PU13, 1 << 13   @ bitWidth 1 (Port E pull-up bit y  y=0..15)  
        .equ PWR_PUCRE_PU12, 1 << 12   @ bitWidth 1 (Port E pull-up bit y  y=0..15)  
        .equ PWR_PUCRE_PU11, 1 << 11   @ bitWidth 1 (Port E pull-up bit y  y=0..15)  
        .equ PWR_PUCRE_PU10, 1 << 10   @ bitWidth 1 (Port E pull-up bit y  y=0..15)  
        .equ PWR_PUCRE_PU9, 1 << 9   @ bitWidth 1 (Port E pull-up bit y  y=0..15)  
        .equ PWR_PUCRE_PU8, 1 << 8   @ bitWidth 1 (Port E pull-up bit y  y=0..15)  
        .equ PWR_PUCRE_PU7, 1 << 7   @ bitWidth 1 (Port E pull-up bit y  y=0..15)  
        .equ PWR_PUCRE_PU6, 1 << 6   @ bitWidth 1 (Port E pull-up bit y  y=0..15)  
        .equ PWR_PUCRE_PU5, 1 << 5   @ bitWidth 1 (Port E pull-up bit y  y=0..15)  
        .equ PWR_PUCRE_PU4, 1 << 4   @ bitWidth 1 (Port E pull-up bit y  y=0..15)  
        .equ PWR_PUCRE_PU3, 1 << 3   @ bitWidth 1 (Port E pull-up bit y  y=0..15)  
        .equ PWR_PUCRE_PU2, 1 << 2   @ bitWidth 1 (Port E pull-up bit y  y=0..15)  
        .equ PWR_PUCRE_PU1, 1 << 1   @ bitWidth 1 (Port E pull-up bit y  y=0..15)  
        .equ PWR_PUCRE_PU0, 1 << 0   @ bitWidth 1 (Port E pull-up bit y  y=0..15)  
 
    .equ PWR_PDCRE, PWR_BASE + 0x44 @ (Power Port E pull-down control  register) 
        .equ PWR_PDCRE_PD15, 1 << 15   @ bitWidth 1 (Port E pull-down bit y  y=0..15)  
        .equ PWR_PDCRE_PD14, 1 << 14   @ bitWidth 1 (Port E pull-down bit y  y=0..15)  
        .equ PWR_PDCRE_PD13, 1 << 13   @ bitWidth 1 (Port E pull-down bit y  y=0..15)  
        .equ PWR_PDCRE_PD12, 1 << 12   @ bitWidth 1 (Port E pull-down bit y  y=0..15)  
        .equ PWR_PDCRE_PD11, 1 << 11   @ bitWidth 1 (Port E pull-down bit y  y=0..15)  
        .equ PWR_PDCRE_PD10, 1 << 10   @ bitWidth 1 (Port E pull-down bit y  y=0..15)  
        .equ PWR_PDCRE_PD9, 1 << 9   @ bitWidth 1 (Port E pull-down bit y  y=0..15)  
        .equ PWR_PDCRE_PD8, 1 << 8   @ bitWidth 1 (Port E pull-down bit y  y=0..15)  
        .equ PWR_PDCRE_PD7, 1 << 7   @ bitWidth 1 (Port E pull-down bit y  y=0..15)  
        .equ PWR_PDCRE_PD6, 1 << 6   @ bitWidth 1 (Port E pull-down bit y  y=0..15)  
        .equ PWR_PDCRE_PD5, 1 << 5   @ bitWidth 1 (Port E pull-down bit y  y=0..15)  
        .equ PWR_PDCRE_PD4, 1 << 4   @ bitWidth 1 (Port E pull-down bit y  y=0..15)  
        .equ PWR_PDCRE_PD3, 1 << 3   @ bitWidth 1 (Port E pull-down bit y  y=0..15)  
        .equ PWR_PDCRE_PD2, 1 << 2   @ bitWidth 1 (Port E pull-down bit y  y=0..15)  
        .equ PWR_PDCRE_PD1, 1 << 1   @ bitWidth 1 (Port E pull-down bit y  y=0..15)  
        .equ PWR_PDCRE_PD0, 1 << 0   @ bitWidth 1 (Port E pull-down bit y  y=0..15)  
 
    .equ PWR_PUCRF, PWR_BASE + 0x48 @ (Power Port F pull-up control  register) 
        .equ PWR_PUCRF_PU15, 1 << 15   @ bitWidth 1 (Port F pull-up bit y  y=0..15)  
        .equ PWR_PUCRF_PU14, 1 << 14   @ bitWidth 1 (Port F pull-up bit y  y=0..15)  
        .equ PWR_PUCRF_PU13, 1 << 13   @ bitWidth 1 (Port F pull-up bit y  y=0..15)  
        .equ PWR_PUCRF_PU12, 1 << 12   @ bitWidth 1 (Port F pull-up bit y  y=0..15)  
        .equ PWR_PUCRF_PU11, 1 << 11   @ bitWidth 1 (Port F pull-up bit y  y=0..15)  
        .equ PWR_PUCRF_PU10, 1 << 10   @ bitWidth 1 (Port F pull-up bit y  y=0..15)  
        .equ PWR_PUCRF_PU9, 1 << 9   @ bitWidth 1 (Port F pull-up bit y  y=0..15)  
        .equ PWR_PUCRF_PU8, 1 << 8   @ bitWidth 1 (Port F pull-up bit y  y=0..15)  
        .equ PWR_PUCRF_PU7, 1 << 7   @ bitWidth 1 (Port F pull-up bit y  y=0..15)  
        .equ PWR_PUCRF_PU6, 1 << 6   @ bitWidth 1 (Port F pull-up bit y  y=0..15)  
        .equ PWR_PUCRF_PU5, 1 << 5   @ bitWidth 1 (Port F pull-up bit y  y=0..15)  
        .equ PWR_PUCRF_PU4, 1 << 4   @ bitWidth 1 (Port F pull-up bit y  y=0..15)  
        .equ PWR_PUCRF_PU3, 1 << 3   @ bitWidth 1 (Port F pull-up bit y  y=0..15)  
        .equ PWR_PUCRF_PU2, 1 << 2   @ bitWidth 1 (Port F pull-up bit y  y=0..15)  
        .equ PWR_PUCRF_PU1, 1 << 1   @ bitWidth 1 (Port F pull-up bit y  y=0..15)  
        .equ PWR_PUCRF_PU0, 1 << 0   @ bitWidth 1 (Port F pull-up bit y  y=0..15)  
 
    .equ PWR_PDCRF, PWR_BASE + 0x4C @ (Power Port F pull-down control  register) 
        .equ PWR_PDCRF_PD15, 1 << 15   @ bitWidth 1 (Port F pull-down bit y  y=0..15)  
        .equ PWR_PDCRF_PD14, 1 << 14   @ bitWidth 1 (Port F pull-down bit y  y=0..15)  
        .equ PWR_PDCRF_PD13, 1 << 13   @ bitWidth 1 (Port F pull-down bit y  y=0..15)  
        .equ PWR_PDCRF_PD12, 1 << 12   @ bitWidth 1 (Port F pull-down bit y  y=0..15)  
        .equ PWR_PDCRF_PD11, 1 << 11   @ bitWidth 1 (Port F pull-down bit y  y=0..15)  
        .equ PWR_PDCRF_PD10, 1 << 10   @ bitWidth 1 (Port F pull-down bit y  y=0..15)  
        .equ PWR_PDCRF_PD9, 1 << 9   @ bitWidth 1 (Port F pull-down bit y  y=0..15)  
        .equ PWR_PDCRF_PD8, 1 << 8   @ bitWidth 1 (Port F pull-down bit y  y=0..15)  
        .equ PWR_PDCRF_PD7, 1 << 7   @ bitWidth 1 (Port F pull-down bit y  y=0..15)  
        .equ PWR_PDCRF_PD6, 1 << 6   @ bitWidth 1 (Port F pull-down bit y  y=0..15)  
        .equ PWR_PDCRF_PD5, 1 << 5   @ bitWidth 1 (Port F pull-down bit y  y=0..15)  
        .equ PWR_PDCRF_PD4, 1 << 4   @ bitWidth 1 (Port F pull-down bit y  y=0..15)  
        .equ PWR_PDCRF_PD3, 1 << 3   @ bitWidth 1 (Port F pull-down bit y  y=0..15)  
        .equ PWR_PDCRF_PD2, 1 << 2   @ bitWidth 1 (Port F pull-down bit y  y=0..15)  
        .equ PWR_PDCRF_PD1, 1 << 1   @ bitWidth 1 (Port F pull-down bit y  y=0..15)  
        .equ PWR_PDCRF_PD0, 1 << 0   @ bitWidth 1 (Port F pull-down bit y  y=0..15)  
 
    .equ PWR_PUCRG, PWR_BASE + 0x50 @ (Power Port G pull-up control  register) 
        .equ PWR_PUCRG_PU15, 1 << 15   @ bitWidth 1 (Port G pull-up bit y  y=0..15)  
        .equ PWR_PUCRG_PU14, 1 << 14   @ bitWidth 1 (Port G pull-up bit y  y=0..15)  
        .equ PWR_PUCRG_PU13, 1 << 13   @ bitWidth 1 (Port G pull-up bit y  y=0..15)  
        .equ PWR_PUCRG_PU12, 1 << 12   @ bitWidth 1 (Port G pull-up bit y  y=0..15)  
        .equ PWR_PUCRG_PU11, 1 << 11   @ bitWidth 1 (Port G pull-up bit y  y=0..15)  
        .equ PWR_PUCRG_PU10, 1 << 10   @ bitWidth 1 (Port G pull-up bit y  y=0..15)  
        .equ PWR_PUCRG_PU9, 1 << 9   @ bitWidth 1 (Port G pull-up bit y  y=0..15)  
        .equ PWR_PUCRG_PU8, 1 << 8   @ bitWidth 1 (Port G pull-up bit y  y=0..15)  
        .equ PWR_PUCRG_PU7, 1 << 7   @ bitWidth 1 (Port G pull-up bit y  y=0..15)  
        .equ PWR_PUCRG_PU6, 1 << 6   @ bitWidth 1 (Port G pull-up bit y  y=0..15)  
        .equ PWR_PUCRG_PU5, 1 << 5   @ bitWidth 1 (Port G pull-up bit y  y=0..15)  
        .equ PWR_PUCRG_PU4, 1 << 4   @ bitWidth 1 (Port G pull-up bit y  y=0..15)  
        .equ PWR_PUCRG_PU3, 1 << 3   @ bitWidth 1 (Port G pull-up bit y  y=0..15)  
        .equ PWR_PUCRG_PU2, 1 << 2   @ bitWidth 1 (Port G pull-up bit y  y=0..15)  
        .equ PWR_PUCRG_PU1, 1 << 1   @ bitWidth 1 (Port G pull-up bit y  y=0..15)  
        .equ PWR_PUCRG_PU0, 1 << 0   @ bitWidth 1 (Port G pull-up bit y  y=0..15)  
 
    .equ PWR_PDCRG, PWR_BASE + 0x54 @ (Power Port G pull-down control  register) 
        .equ PWR_PDCRG_PD15, 1 << 15   @ bitWidth 1 (Port G pull-down bit y  y=0..15)  
        .equ PWR_PDCRG_PD14, 1 << 14   @ bitWidth 1 (Port G pull-down bit y  y=0..15)  
        .equ PWR_PDCRG_PD13, 1 << 13   @ bitWidth 1 (Port G pull-down bit y  y=0..15)  
        .equ PWR_PDCRG_PD12, 1 << 12   @ bitWidth 1 (Port G pull-down bit y  y=0..15)  
        .equ PWR_PDCRG_PD11, 1 << 11   @ bitWidth 1 (Port G pull-down bit y  y=0..15)  
        .equ PWR_PDCRG_PD10, 1 << 10   @ bitWidth 1 (Port G pull-down bit y  y=0..15)  
        .equ PWR_PDCRG_PD9, 1 << 9   @ bitWidth 1 (Port G pull-down bit y  y=0..15)  
        .equ PWR_PDCRG_PD8, 1 << 8   @ bitWidth 1 (Port G pull-down bit y  y=0..15)  
        .equ PWR_PDCRG_PD7, 1 << 7   @ bitWidth 1 (Port G pull-down bit y  y=0..15)  
        .equ PWR_PDCRG_PD6, 1 << 6   @ bitWidth 1 (Port G pull-down bit y  y=0..15)  
        .equ PWR_PDCRG_PD5, 1 << 5   @ bitWidth 1 (Port G pull-down bit y  y=0..15)  
        .equ PWR_PDCRG_PD4, 1 << 4   @ bitWidth 1 (Port G pull-down bit y  y=0..15)  
        .equ PWR_PDCRG_PD3, 1 << 3   @ bitWidth 1 (Port G pull-down bit y  y=0..15)  
        .equ PWR_PDCRG_PD2, 1 << 2   @ bitWidth 1 (Port G pull-down bit y  y=0..15)  
        .equ PWR_PDCRG_PD1, 1 << 1   @ bitWidth 1 (Port G pull-down bit y  y=0..15)  
        .equ PWR_PDCRG_PD0, 1 << 0   @ bitWidth 1 (Port G pull-down bit y  y=0..15)  
 
    .equ PWR_PUCRH, PWR_BASE + 0x58 @ (Power Port H pull-up control  register) 
        .equ PWR_PUCRH_PU1, 1 << 1   @ bitWidth 1 (Port H pull-up bit y  y=0..1)  
        .equ PWR_PUCRH_PU0, 1 << 0   @ bitWidth 1 (Port H pull-up bit y  y=0..1)  
 
    .equ PWR_PDCRH, PWR_BASE + 0x5C @ (Power Port H pull-down control  register) 
        .equ PWR_PDCRH_PD1, 1 << 1   @ bitWidth 1 (Port H pull-down bit y  y=0..1)  
        .equ PWR_PDCRH_PD0, 1 << 0   @ bitWidth 1 (Port H pull-down bit y  y=0..1)  
 

@=========================== SYSCFG ===========================@
.equ SYSCFG_BASE, 0x40010000 @ (System configuration controller) 
    .equ SYSCFG_MEMRMP, SYSCFG_BASE + 0x0 @ (memory remap register) 
        .equ SYSCFG_MEMRMP_FB_MODE, 1 << 8   @ bitWidth 1 (Flash Bank mode selection)  
        .equ SYSCFG_MEMRMP_QFS, 1 << 3   @ bitWidth 1 (QUADSPI memory mapping  swap)  
        .equ SYSCFG_MEMRMP_MEM_MODE_Shift, 0   @ bitWidth 3 (Memory mapping selection)  
 
    .equ SYSCFG_CFGR1, SYSCFG_BASE + 0x4 @ (configuration register 1) 
        .equ SYSCFG_CFGR1_FPU_IE_Shift, 26   @ bitWidth 6 (Floating Point Unit interrupts enable  bits)  
        .equ SYSCFG_CFGR1_I2C3_FMP, 1 << 22   @ bitWidth 1 (I2C3 Fast-mode Plus driving capability  activation)  
        .equ SYSCFG_CFGR1_I2C2_FMP, 1 << 21   @ bitWidth 1 (I2C2 Fast-mode Plus driving capability  activation)  
        .equ SYSCFG_CFGR1_I2C1_FMP, 1 << 20   @ bitWidth 1 (I2C1 Fast-mode Plus driving capability  activation)  
        .equ SYSCFG_CFGR1_I2C_PB9_FMP, 1 << 19   @ bitWidth 1 (Fast-mode Plus Fm+ driving capability  activation on PB9)  
        .equ SYSCFG_CFGR1_I2C_PB8_FMP, 1 << 18   @ bitWidth 1 (Fast-mode Plus Fm+ driving capability  activation on PB8)  
        .equ SYSCFG_CFGR1_I2C_PB7_FMP, 1 << 17   @ bitWidth 1 (Fast-mode Plus Fm+ driving capability  activation on PB7)  
        .equ SYSCFG_CFGR1_I2C_PB6_FMP, 1 << 16   @ bitWidth 1 (Fast-mode Plus Fm+ driving capability  activation on PB6)  
        .equ SYSCFG_CFGR1_BOOSTEN, 1 << 8   @ bitWidth 1 (I/O analog switch voltage booster  enable)  
        .equ SYSCFG_CFGR1_FWDIS, 1 << 0   @ bitWidth 1 (Firewall disable)  
 
    .equ SYSCFG_EXTICR1, SYSCFG_BASE + 0x8 @ (external interrupt configuration register  1) 
        .equ SYSCFG_EXTICR1_EXTI3_Shift, 12   @ bitWidth 3 (EXTI 3 configuration bits)  
        .equ SYSCFG_EXTICR1_EXTI2_Shift, 8   @ bitWidth 3 (EXTI 2 configuration bits)  
        .equ SYSCFG_EXTICR1_EXTI1_Shift, 4   @ bitWidth 3 (EXTI 1 configuration bits)  
        .equ SYSCFG_EXTICR1_EXTI0_Shift, 0   @ bitWidth 3 (EXTI 0 configuration bits)  
 
    .equ SYSCFG_EXTICR2, SYSCFG_BASE + 0xC @ (external interrupt configuration register  2) 
        .equ SYSCFG_EXTICR2_EXTI7_Shift, 12   @ bitWidth 3 (EXTI 7 configuration bits)  
        .equ SYSCFG_EXTICR2_EXTI6_Shift, 8   @ bitWidth 3 (EXTI 6 configuration bits)  
        .equ SYSCFG_EXTICR2_EXTI5_Shift, 4   @ bitWidth 3 (EXTI 5 configuration bits)  
        .equ SYSCFG_EXTICR2_EXTI4_Shift, 0   @ bitWidth 3 (EXTI 4 configuration bits)  
 
    .equ SYSCFG_EXTICR3, SYSCFG_BASE + 0x10 @ (external interrupt configuration register  3) 
        .equ SYSCFG_EXTICR3_EXTI11_Shift, 12   @ bitWidth 3 (EXTI 11 configuration bits)  
        .equ SYSCFG_EXTICR3_EXTI10_Shift, 8   @ bitWidth 3 (EXTI 10 configuration bits)  
        .equ SYSCFG_EXTICR3_EXTI9_Shift, 4   @ bitWidth 3 (EXTI 9 configuration bits)  
        .equ SYSCFG_EXTICR3_EXTI8_Shift, 0   @ bitWidth 3 (EXTI 8 configuration bits)  
 
    .equ SYSCFG_EXTICR4, SYSCFG_BASE + 0x14 @ (external interrupt configuration register  4) 
        .equ SYSCFG_EXTICR4_EXTI15_Shift, 12   @ bitWidth 3 (EXTI15 configuration bits)  
        .equ SYSCFG_EXTICR4_EXTI14_Shift, 8   @ bitWidth 3 (EXTI14 configuration bits)  
        .equ SYSCFG_EXTICR4_EXTI13_Shift, 4   @ bitWidth 3 (EXTI13 configuration bits)  
        .equ SYSCFG_EXTICR4_EXTI12_Shift, 0   @ bitWidth 3 (EXTI12 configuration bits)  
 
    .equ SYSCFG_SCSR, SYSCFG_BASE + 0x18 @ (SCSR) 
        .equ SYSCFG_SCSR_SRAM2BSY, 1 << 1   @ bitWidth 1 (SRAM2 busy by erase  operation)  
        .equ SYSCFG_SCSR_SRAM2ER, 1 << 0   @ bitWidth 1 (SRAM2 Erase)  
 
    .equ SYSCFG_CFGR2, SYSCFG_BASE + 0x1C @ (CFGR2) 
        .equ SYSCFG_CFGR2_SPF, 1 << 8   @ bitWidth 1 (SRAM2 parity error flag)  
        .equ SYSCFG_CFGR2_ECCL, 1 << 3   @ bitWidth 1 (ECC Lock)  
        .equ SYSCFG_CFGR2_PVDL, 1 << 2   @ bitWidth 1 (PVD lock enable bit)  
        .equ SYSCFG_CFGR2_SPL, 1 << 1   @ bitWidth 1 (SRAM2 parity lock bit)  
        .equ SYSCFG_CFGR2_CLL, 1 << 0   @ bitWidth 1 (  CortexÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¾ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¾ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¾ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢-M4  LOCKUP Hardfault output enable bit)  
 
    .equ SYSCFG_SWPR, SYSCFG_BASE + 0x20 @ (SWPR) 
        .equ SYSCFG_SWPR_P31WP, 1 << 31   @ bitWidth 1 (SRAM2 page 31 write  protection)  
        .equ SYSCFG_SWPR_P30WP, 1 << 30   @ bitWidth 1 (P30WP)  
        .equ SYSCFG_SWPR_P29WP, 1 << 29   @ bitWidth 1 (P29WP)  
        .equ SYSCFG_SWPR_P28WP, 1 << 28   @ bitWidth 1 (P28WP)  
        .equ SYSCFG_SWPR_P27WP, 1 << 27   @ bitWidth 1 (P27WP)  
        .equ SYSCFG_SWPR_P26WP, 1 << 26   @ bitWidth 1 (P26WP)  
        .equ SYSCFG_SWPR_P25WP, 1 << 25   @ bitWidth 1 (P25WP)  
        .equ SYSCFG_SWPR_P24WP, 1 << 24   @ bitWidth 1 (P24WP)  
        .equ SYSCFG_SWPR_P23WP, 1 << 23   @ bitWidth 1 (P23WP)  
        .equ SYSCFG_SWPR_P22WP, 1 << 22   @ bitWidth 1 (P22WP)  
        .equ SYSCFG_SWPR_P21WP, 1 << 21   @ bitWidth 1 (P21WP)  
        .equ SYSCFG_SWPR_P20WP, 1 << 20   @ bitWidth 1 (P20WP)  
        .equ SYSCFG_SWPR_P19WP, 1 << 19   @ bitWidth 1 (P19WP)  
        .equ SYSCFG_SWPR_P18WP, 1 << 18   @ bitWidth 1 (P18WP)  
        .equ SYSCFG_SWPR_P17WP, 1 << 17   @ bitWidth 1 (P17WP)  
        .equ SYSCFG_SWPR_P16WP, 1 << 16   @ bitWidth 1 (P16WP)  
        .equ SYSCFG_SWPR_P15WP, 1 << 15   @ bitWidth 1 (P15WP)  
        .equ SYSCFG_SWPR_P14WP, 1 << 14   @ bitWidth 1 (P14WP)  
        .equ SYSCFG_SWPR_P13WP, 1 << 13   @ bitWidth 1 (P13WP)  
        .equ SYSCFG_SWPR_P12WP, 1 << 12   @ bitWidth 1 (P12WP)  
        .equ SYSCFG_SWPR_P11WP, 1 << 11   @ bitWidth 1 (P11WP)  
        .equ SYSCFG_SWPR_P10WP, 1 << 10   @ bitWidth 1 (P10WP)  
        .equ SYSCFG_SWPR_P9WP, 1 << 9   @ bitWidth 1 (P9WP)  
        .equ SYSCFG_SWPR_P8WP, 1 << 8   @ bitWidth 1 (P8WP)  
        .equ SYSCFG_SWPR_P7WP, 1 << 7   @ bitWidth 1 (P7WP)  
        .equ SYSCFG_SWPR_P6WP, 1 << 6   @ bitWidth 1 (P6WP)  
        .equ SYSCFG_SWPR_P5WP, 1 << 5   @ bitWidth 1 (P5WP)  
        .equ SYSCFG_SWPR_P4WP, 1 << 4   @ bitWidth 1 (P4WP)  
        .equ SYSCFG_SWPR_P3WP, 1 << 3   @ bitWidth 1 (P3WP)  
        .equ SYSCFG_SWPR_P2WP, 1 << 2   @ bitWidth 1 (P2WP)  
        .equ SYSCFG_SWPR_P1WP, 1 << 1   @ bitWidth 1 (P1WP)  
        .equ SYSCFG_SWPR_P0WP, 1 << 0   @ bitWidth 1 (P0WP)  
 
    .equ SYSCFG_SKR, SYSCFG_BASE + 0x24 @ (SKR) 
        .equ SYSCFG_SKR_KEY_Shift, 0   @ bitWidth 8 (SRAM2 write protection key for software  erase)  
 

@=========================== RNG ===========================@
.equ RNG_BASE, 0x50060800 @ (Random number generator) 
    .equ RNG_CR, RNG_BASE + 0x0 @ (control register) 
        .equ RNG_CR_IE, 1 << 3   @ bitWidth 1 (Interrupt enable)  
        .equ RNG_CR_RNGEN, 1 << 2   @ bitWidth 1 (Random number generator  enable)  
 
    .equ RNG_SR, RNG_BASE + 0x4 @ (status register) 
        .equ RNG_SR_SEIS, 1 << 6   @ bitWidth 1 (Seed error interrupt  status)  
        .equ RNG_SR_CEIS, 1 << 5   @ bitWidth 1 (Clock error interrupt  status)  
        .equ RNG_SR_SECS, 1 << 2   @ bitWidth 1 (Seed error current status)  
        .equ RNG_SR_CECS, 1 << 1   @ bitWidth 1 (Clock error current status)  
        .equ RNG_SR_DRDY, 1 << 0   @ bitWidth 1 (Data ready)  
 
    .equ RNG_DR, RNG_BASE + 0x8 @ (data register) 
        .equ RNG_DR_RNDATA_Shift, 0   @ bitWidth 32 (Random data)  
 

@=========================== ADC1 ===========================@
.equ ADC1_BASE, 0x50040000 @ (Analog-to-Digital Converter) 
    .equ ADC1_ISR, ADC1_BASE + 0x0 @ (interrupt and status register) 
        .equ ADC1_ISR_JQOVF, 1 << 10   @ bitWidth 1 (JQOVF)  
        .equ ADC1_ISR_AWD3, 1 << 9   @ bitWidth 1 (AWD3)  
        .equ ADC1_ISR_AWD2, 1 << 8   @ bitWidth 1 (AWD2)  
        .equ ADC1_ISR_AWD1, 1 << 7   @ bitWidth 1 (AWD1)  
        .equ ADC1_ISR_JEOS, 1 << 6   @ bitWidth 1 (JEOS)  
        .equ ADC1_ISR_JEOC, 1 << 5   @ bitWidth 1 (JEOC)  
        .equ ADC1_ISR_OVR, 1 << 4   @ bitWidth 1 (OVR)  
        .equ ADC1_ISR_EOS, 1 << 3   @ bitWidth 1 (EOS)  
        .equ ADC1_ISR_EOC, 1 << 2   @ bitWidth 1 (EOC)  
        .equ ADC1_ISR_EOSMP, 1 << 1   @ bitWidth 1 (EOSMP)  
        .equ ADC1_ISR_ADRDY, 1 << 0   @ bitWidth 1 (ADRDY)  
 
    .equ ADC1_IER, ADC1_BASE + 0x4 @ (interrupt enable register) 
        .equ ADC1_IER_JQOVFIE, 1 << 10   @ bitWidth 1 (JQOVFIE)  
        .equ ADC1_IER_AWD3IE, 1 << 9   @ bitWidth 1 (AWD3IE)  
        .equ ADC1_IER_AWD2IE, 1 << 8   @ bitWidth 1 (AWD2IE)  
        .equ ADC1_IER_AWD1IE, 1 << 7   @ bitWidth 1 (AWD1IE)  
        .equ ADC1_IER_JEOSIE, 1 << 6   @ bitWidth 1 (JEOSIE)  
        .equ ADC1_IER_JEOCIE, 1 << 5   @ bitWidth 1 (JEOCIE)  
        .equ ADC1_IER_OVRIE, 1 << 4   @ bitWidth 1 (OVRIE)  
        .equ ADC1_IER_EOSIE, 1 << 3   @ bitWidth 1 (EOSIE)  
        .equ ADC1_IER_EOCIE, 1 << 2   @ bitWidth 1 (EOCIE)  
        .equ ADC1_IER_EOSMPIE, 1 << 1   @ bitWidth 1 (EOSMPIE)  
        .equ ADC1_IER_ADRDYIE, 1 << 0   @ bitWidth 1 (ADRDYIE)  
 
    .equ ADC1_CR, ADC1_BASE + 0x8 @ (control register) 
        .equ ADC1_CR_ADCAL, 1 << 31   @ bitWidth 1 (ADCAL)  
        .equ ADC1_CR_ADCALDIF, 1 << 30   @ bitWidth 1 (ADCALDIF)  
        .equ ADC1_CR_DEEPPWD, 1 << 29   @ bitWidth 1 (DEEPPWD)  
        .equ ADC1_CR_ADVREGEN, 1 << 28   @ bitWidth 1 (ADVREGEN)  
        .equ ADC1_CR_JADSTP, 1 << 5   @ bitWidth 1 (JADSTP)  
        .equ ADC1_CR_ADSTP, 1 << 4   @ bitWidth 1 (ADSTP)  
        .equ ADC1_CR_JADSTART, 1 << 3   @ bitWidth 1 (JADSTART)  
        .equ ADC1_CR_ADSTART, 1 << 2   @ bitWidth 1 (ADSTART)  
        .equ ADC1_CR_ADDIS, 1 << 1   @ bitWidth 1 (ADDIS)  
        .equ ADC1_CR_ADEN, 1 << 0   @ bitWidth 1 (ADEN)  
 
    .equ ADC1_CFGR, ADC1_BASE + 0xC @ (configuration register) 
        .equ ADC1_CFGR_AWDCH1CH_Shift, 26   @ bitWidth 5 (AWDCH1CH)  
        .equ ADC1_CFGR_JAUTO, 1 << 25   @ bitWidth 1 (JAUTO)  
        .equ ADC1_CFGR_JAWD1EN, 1 << 24   @ bitWidth 1 (JAWD1EN)  
        .equ ADC1_CFGR_AWD1EN, 1 << 23   @ bitWidth 1 (AWD1EN)  
        .equ ADC1_CFGR_AWD1SGL, 1 << 22   @ bitWidth 1 (AWD1SGL)  
        .equ ADC1_CFGR_JQM, 1 << 21   @ bitWidth 1 (JQM)  
        .equ ADC1_CFGR_JDISCEN, 1 << 20   @ bitWidth 1 (JDISCEN)  
        .equ ADC1_CFGR_DISCNUM_Shift, 17   @ bitWidth 3 (DISCNUM)  
        .equ ADC1_CFGR_DISCEN, 1 << 16   @ bitWidth 1 (DISCEN)  
        .equ ADC1_CFGR_AUTOFF, 1 << 15   @ bitWidth 1 (AUTOFF)  
        .equ ADC1_CFGR_AUTDLY, 1 << 14   @ bitWidth 1 (AUTDLY)  
        .equ ADC1_CFGR_CONT, 1 << 13   @ bitWidth 1 (CONT)  
        .equ ADC1_CFGR_OVRMOD, 1 << 12   @ bitWidth 1 (OVRMOD)  
        .equ ADC1_CFGR_EXTEN_Shift, 10   @ bitWidth 2 (EXTEN)  
        .equ ADC1_CFGR_EXTSEL_Shift, 6   @ bitWidth 4 (EXTSEL)  
        .equ ADC1_CFGR_ALIGN, 1 << 5   @ bitWidth 1 (ALIGN)  
        .equ ADC1_CFGR_RES_Shift, 3   @ bitWidth 2 (RES)  
        .equ ADC1_CFGR_DMACFG, 1 << 1   @ bitWidth 1 (DMACFG)  
        .equ ADC1_CFGR_DMAEN, 1 << 0   @ bitWidth 1 (DMAEN)  
 
    .equ ADC1_CFGR2, ADC1_BASE + 0x10 @ (configuration register) 
        .equ ADC1_CFGR2_ROVSM, 1 << 10   @ bitWidth 1 (EXTEN)  
        .equ ADC1_CFGR2_TOVS, 1 << 9   @ bitWidth 1 (EXTSEL)  
        .equ ADC1_CFGR2_OVSS_Shift, 5   @ bitWidth 4 (ALIGN)  
        .equ ADC1_CFGR2_OVSR_Shift, 2   @ bitWidth 3 (RES)  
        .equ ADC1_CFGR2_JOVSE, 1 << 1   @ bitWidth 1 (DMACFG)  
        .equ ADC1_CFGR2_ROVSE, 1 << 0   @ bitWidth 1 (DMAEN)  
 
    .equ ADC1_SMPR1, ADC1_BASE + 0x14 @ (sample time register 1) 
        .equ ADC1_SMPR1_SMP9_Shift, 27   @ bitWidth 3 (SMP9)  
        .equ ADC1_SMPR1_SMP8_Shift, 24   @ bitWidth 3 (SMP8)  
        .equ ADC1_SMPR1_SMP7_Shift, 21   @ bitWidth 3 (SMP7)  
        .equ ADC1_SMPR1_SMP6_Shift, 18   @ bitWidth 3 (SMP6)  
        .equ ADC1_SMPR1_SMP5_Shift, 15   @ bitWidth 3 (SMP5)  
        .equ ADC1_SMPR1_SMP4_Shift, 12   @ bitWidth 3 (SMP4)  
        .equ ADC1_SMPR1_SMP3_Shift, 9   @ bitWidth 3 (SMP3)  
        .equ ADC1_SMPR1_SMP2_Shift, 6   @ bitWidth 3 (SMP2)  
        .equ ADC1_SMPR1_SMP1_Shift, 3   @ bitWidth 3 (SMP1)  
 
    .equ ADC1_SMPR2, ADC1_BASE + 0x18 @ (sample time register 2) 
        .equ ADC1_SMPR2_SMP18_Shift, 24   @ bitWidth 3 (SMP18)  
        .equ ADC1_SMPR2_SMP17_Shift, 21   @ bitWidth 3 (SMP17)  
        .equ ADC1_SMPR2_SMP16_Shift, 18   @ bitWidth 3 (SMP16)  
        .equ ADC1_SMPR2_SMP15_Shift, 15   @ bitWidth 3 (SMP15)  
        .equ ADC1_SMPR2_SMP14_Shift, 12   @ bitWidth 3 (SMP14)  
        .equ ADC1_SMPR2_SMP13_Shift, 9   @ bitWidth 3 (SMP13)  
        .equ ADC1_SMPR2_SMP12_Shift, 6   @ bitWidth 3 (SMP12)  
        .equ ADC1_SMPR2_SMP11_Shift, 3   @ bitWidth 3 (SMP11)  
        .equ ADC1_SMPR2_SMP10_Shift, 0   @ bitWidth 3 (SMP10)  
 
    .equ ADC1_TR1, ADC1_BASE + 0x20 @ (watchdog threshold register 1) 
        .equ ADC1_TR1_HT1_Shift, 16   @ bitWidth 12 (HT1)  
        .equ ADC1_TR1_LT1_Shift, 0   @ bitWidth 12 (LT1)  
 
    .equ ADC1_TR2, ADC1_BASE + 0x24 @ (watchdog threshold register) 
        .equ ADC1_TR2_HT2_Shift, 16   @ bitWidth 8 (HT2)  
        .equ ADC1_TR2_LT2_Shift, 0   @ bitWidth 8 (LT2)  
 
    .equ ADC1_TR3, ADC1_BASE + 0x28 @ (watchdog threshold register 3) 
        .equ ADC1_TR3_HT3_Shift, 16   @ bitWidth 8 (HT3)  
        .equ ADC1_TR3_LT3_Shift, 0   @ bitWidth 8 (LT3)  
 
    .equ ADC1_SQR1, ADC1_BASE + 0x30 @ (regular sequence register 1) 
        .equ ADC1_SQR1_SQ4_Shift, 24   @ bitWidth 5 (SQ4)  
        .equ ADC1_SQR1_SQ3_Shift, 18   @ bitWidth 5 (SQ3)  
        .equ ADC1_SQR1_SQ2_Shift, 12   @ bitWidth 5 (SQ2)  
        .equ ADC1_SQR1_SQ1_Shift, 6   @ bitWidth 5 (SQ1)  
        .equ ADC1_SQR1_L3_Shift, 0   @ bitWidth 4 (L3)  
 
    .equ ADC1_SQR2, ADC1_BASE + 0x34 @ (regular sequence register 2) 
        .equ ADC1_SQR2_SQ9_Shift, 24   @ bitWidth 5 (SQ9)  
        .equ ADC1_SQR2_SQ8_Shift, 18   @ bitWidth 5 (SQ8)  
        .equ ADC1_SQR2_SQ7_Shift, 12   @ bitWidth 5 (SQ7)  
        .equ ADC1_SQR2_SQ6_Shift, 6   @ bitWidth 5 (SQ6)  
        .equ ADC1_SQR2_SQ5_Shift, 0   @ bitWidth 5 (SQ5)  
 
    .equ ADC1_SQR3, ADC1_BASE + 0x38 @ (regular sequence register 3) 
        .equ ADC1_SQR3_SQ14_Shift, 24   @ bitWidth 5 (SQ14)  
        .equ ADC1_SQR3_SQ13_Shift, 18   @ bitWidth 5 (SQ13)  
        .equ ADC1_SQR3_SQ12_Shift, 12   @ bitWidth 5 (SQ12)  
        .equ ADC1_SQR3_SQ11_Shift, 6   @ bitWidth 5 (SQ11)  
        .equ ADC1_SQR3_SQ10_Shift, 0   @ bitWidth 5 (SQ10)  
 
    .equ ADC1_SQR4, ADC1_BASE + 0x3C @ (regular sequence register 4) 
        .equ ADC1_SQR4_SQ16_Shift, 6   @ bitWidth 5 (SQ16)  
        .equ ADC1_SQR4_SQ15_Shift, 0   @ bitWidth 5 (SQ15)  
 
    .equ ADC1_DR, ADC1_BASE + 0x40 @ (regular Data Register) 
        .equ ADC1_DR_regularDATA_Shift, 0   @ bitWidth 16 (regularDATA)  
 
    .equ ADC1_JSQR, ADC1_BASE + 0x4C @ (injected sequence register) 
        .equ ADC1_JSQR_JSQ4_Shift, 26   @ bitWidth 5 (JSQ4)  
        .equ ADC1_JSQR_JSQ3_Shift, 20   @ bitWidth 5 (JSQ3)  
        .equ ADC1_JSQR_JSQ2_Shift, 14   @ bitWidth 5 (JSQ2)  
        .equ ADC1_JSQR_JSQ1_Shift, 8   @ bitWidth 5 (JSQ1)  
        .equ ADC1_JSQR_JEXTEN_Shift, 6   @ bitWidth 2 (JEXTEN)  
        .equ ADC1_JSQR_JEXTSEL_Shift, 2   @ bitWidth 4 (JEXTSEL)  
        .equ ADC1_JSQR_JL_Shift, 0   @ bitWidth 2 (JL)  
 
    .equ ADC1_OFR1, ADC1_BASE + 0x60 @ (offset register 1) 
        .equ ADC1_OFR1_OFFSET1_EN, 1 << 31   @ bitWidth 1 (OFFSET1_EN)  
        .equ ADC1_OFR1_OFFSET1_CH_Shift, 26   @ bitWidth 5 (OFFSET1_CH)  
        .equ ADC1_OFR1_OFFSET1_Shift, 0   @ bitWidth 12 (OFFSET1)  
 
    .equ ADC1_OFR2, ADC1_BASE + 0x64 @ (offset register 2) 
        .equ ADC1_OFR2_OFFSET2_EN, 1 << 31   @ bitWidth 1 (OFFSET2_EN)  
        .equ ADC1_OFR2_OFFSET2_CH_Shift, 26   @ bitWidth 5 (OFFSET2_CH)  
        .equ ADC1_OFR2_OFFSET2_Shift, 0   @ bitWidth 12 (OFFSET2)  
 
    .equ ADC1_OFR3, ADC1_BASE + 0x68 @ (offset register 3) 
        .equ ADC1_OFR3_OFFSET3_EN, 1 << 31   @ bitWidth 1 (OFFSET3_EN)  
        .equ ADC1_OFR3_OFFSET3_CH_Shift, 26   @ bitWidth 5 (OFFSET3_CH)  
        .equ ADC1_OFR3_OFFSET3_Shift, 0   @ bitWidth 12 (OFFSET3)  
 
    .equ ADC1_OFR4, ADC1_BASE + 0x6C @ (offset register 4) 
        .equ ADC1_OFR4_OFFSET4_EN, 1 << 31   @ bitWidth 1 (OFFSET4_EN)  
        .equ ADC1_OFR4_OFFSET4_CH_Shift, 26   @ bitWidth 5 (OFFSET4_CH)  
        .equ ADC1_OFR4_OFFSET4_Shift, 0   @ bitWidth 12 (OFFSET4)  
 
    .equ ADC1_JDR1, ADC1_BASE + 0x80 @ (injected data register 1) 
        .equ ADC1_JDR1_JDATA1_Shift, 0   @ bitWidth 16 (JDATA1)  
 
    .equ ADC1_JDR2, ADC1_BASE + 0x84 @ (injected data register 2) 
        .equ ADC1_JDR2_JDATA2_Shift, 0   @ bitWidth 16 (JDATA2)  
 
    .equ ADC1_JDR3, ADC1_BASE + 0x88 @ (injected data register 3) 
        .equ ADC1_JDR3_JDATA3_Shift, 0   @ bitWidth 16 (JDATA3)  
 
    .equ ADC1_JDR4, ADC1_BASE + 0x8C @ (injected data register 4) 
        .equ ADC1_JDR4_JDATA4_Shift, 0   @ bitWidth 16 (JDATA4)  
 
    .equ ADC1_AWD2CR, ADC1_BASE + 0xA0 @ (Analog Watchdog 2 Configuration  Register) 
        .equ ADC1_AWD2CR_AWD2CH_Shift, 1   @ bitWidth 18 (AWD2CH)  
 
    .equ ADC1_AWD3CR, ADC1_BASE + 0xA4 @ (Analog Watchdog 3 Configuration  Register) 
        .equ ADC1_AWD3CR_AWD3CH_Shift, 1   @ bitWidth 18 (AWD3CH)  
 
    .equ ADC1_DIFSEL, ADC1_BASE + 0xB0 @ (Differential Mode Selection Register  2) 
        .equ ADC1_DIFSEL_DIFSEL_1_15_Shift, 1   @ bitWidth 15 (Differential mode for channels 15 to  1)  
        .equ ADC1_DIFSEL_DIFSEL_16_18_Shift, 16   @ bitWidth 3 (Differential mode for channels 18 to  16)  
 
    .equ ADC1_CALFACT, ADC1_BASE + 0xB4 @ (Calibration Factors) 
        .equ ADC1_CALFACT_CALFACT_D_Shift, 16   @ bitWidth 7 (CALFACT_D)  
        .equ ADC1_CALFACT_CALFACT_S_Shift, 0   @ bitWidth 7 (CALFACT_S)  
 

@=========================== ADC2 ===========================@
.equ ADC2_BASE, 0x50040100 @ (Analog-to-Digital Converter) 
    .equ ADC2_ISR, ADC2_BASE + 0x0 @ (interrupt and status register) 
        .equ ADC2_ISR_JQOVF, 1 << 10   @ bitWidth 1 (JQOVF)  
        .equ ADC2_ISR_AWD3, 1 << 9   @ bitWidth 1 (AWD3)  
        .equ ADC2_ISR_AWD2, 1 << 8   @ bitWidth 1 (AWD2)  
        .equ ADC2_ISR_AWD1, 1 << 7   @ bitWidth 1 (AWD1)  
        .equ ADC2_ISR_JEOS, 1 << 6   @ bitWidth 1 (JEOS)  
        .equ ADC2_ISR_JEOC, 1 << 5   @ bitWidth 1 (JEOC)  
        .equ ADC2_ISR_OVR, 1 << 4   @ bitWidth 1 (OVR)  
        .equ ADC2_ISR_EOS, 1 << 3   @ bitWidth 1 (EOS)  
        .equ ADC2_ISR_EOC, 1 << 2   @ bitWidth 1 (EOC)  
        .equ ADC2_ISR_EOSMP, 1 << 1   @ bitWidth 1 (EOSMP)  
        .equ ADC2_ISR_ADRDY, 1 << 0   @ bitWidth 1 (ADRDY)  
 
    .equ ADC2_IER, ADC2_BASE + 0x4 @ (interrupt enable register) 
        .equ ADC2_IER_JQOVFIE, 1 << 10   @ bitWidth 1 (JQOVFIE)  
        .equ ADC2_IER_AWD3IE, 1 << 9   @ bitWidth 1 (AWD3IE)  
        .equ ADC2_IER_AWD2IE, 1 << 8   @ bitWidth 1 (AWD2IE)  
        .equ ADC2_IER_AWD1IE, 1 << 7   @ bitWidth 1 (AWD1IE)  
        .equ ADC2_IER_JEOSIE, 1 << 6   @ bitWidth 1 (JEOSIE)  
        .equ ADC2_IER_JEOCIE, 1 << 5   @ bitWidth 1 (JEOCIE)  
        .equ ADC2_IER_OVRIE, 1 << 4   @ bitWidth 1 (OVRIE)  
        .equ ADC2_IER_EOSIE, 1 << 3   @ bitWidth 1 (EOSIE)  
        .equ ADC2_IER_EOCIE, 1 << 2   @ bitWidth 1 (EOCIE)  
        .equ ADC2_IER_EOSMPIE, 1 << 1   @ bitWidth 1 (EOSMPIE)  
        .equ ADC2_IER_ADRDYIE, 1 << 0   @ bitWidth 1 (ADRDYIE)  
 
    .equ ADC2_CR, ADC2_BASE + 0x8 @ (control register) 
        .equ ADC2_CR_ADCAL, 1 << 31   @ bitWidth 1 (ADCAL)  
        .equ ADC2_CR_ADCALDIF, 1 << 30   @ bitWidth 1 (ADCALDIF)  
        .equ ADC2_CR_DEEPPWD, 1 << 29   @ bitWidth 1 (DEEPPWD)  
        .equ ADC2_CR_ADVREGEN, 1 << 28   @ bitWidth 1 (ADVREGEN)  
        .equ ADC2_CR_JADSTP, 1 << 5   @ bitWidth 1 (JADSTP)  
        .equ ADC2_CR_ADSTP, 1 << 4   @ bitWidth 1 (ADSTP)  
        .equ ADC2_CR_JADSTART, 1 << 3   @ bitWidth 1 (JADSTART)  
        .equ ADC2_CR_ADSTART, 1 << 2   @ bitWidth 1 (ADSTART)  
        .equ ADC2_CR_ADDIS, 1 << 1   @ bitWidth 1 (ADDIS)  
        .equ ADC2_CR_ADEN, 1 << 0   @ bitWidth 1 (ADEN)  
 
    .equ ADC2_CFGR, ADC2_BASE + 0xC @ (configuration register) 
        .equ ADC2_CFGR_AWDCH1CH_Shift, 26   @ bitWidth 5 (AWDCH1CH)  
        .equ ADC2_CFGR_JAUTO, 1 << 25   @ bitWidth 1 (JAUTO)  
        .equ ADC2_CFGR_JAWD1EN, 1 << 24   @ bitWidth 1 (JAWD1EN)  
        .equ ADC2_CFGR_AWD1EN, 1 << 23   @ bitWidth 1 (AWD1EN)  
        .equ ADC2_CFGR_AWD1SGL, 1 << 22   @ bitWidth 1 (AWD1SGL)  
        .equ ADC2_CFGR_JQM, 1 << 21   @ bitWidth 1 (JQM)  
        .equ ADC2_CFGR_JDISCEN, 1 << 20   @ bitWidth 1 (JDISCEN)  
        .equ ADC2_CFGR_DISCNUM_Shift, 17   @ bitWidth 3 (DISCNUM)  
        .equ ADC2_CFGR_DISCEN, 1 << 16   @ bitWidth 1 (DISCEN)  
        .equ ADC2_CFGR_AUTOFF, 1 << 15   @ bitWidth 1 (AUTOFF)  
        .equ ADC2_CFGR_AUTDLY, 1 << 14   @ bitWidth 1 (AUTDLY)  
        .equ ADC2_CFGR_CONT, 1 << 13   @ bitWidth 1 (CONT)  
        .equ ADC2_CFGR_OVRMOD, 1 << 12   @ bitWidth 1 (OVRMOD)  
        .equ ADC2_CFGR_EXTEN_Shift, 10   @ bitWidth 2 (EXTEN)  
        .equ ADC2_CFGR_EXTSEL_Shift, 6   @ bitWidth 4 (EXTSEL)  
        .equ ADC2_CFGR_ALIGN, 1 << 5   @ bitWidth 1 (ALIGN)  
        .equ ADC2_CFGR_RES_Shift, 3   @ bitWidth 2 (RES)  
        .equ ADC2_CFGR_DMACFG, 1 << 1   @ bitWidth 1 (DMACFG)  
        .equ ADC2_CFGR_DMAEN, 1 << 0   @ bitWidth 1 (DMAEN)  
 
    .equ ADC2_CFGR2, ADC2_BASE + 0x10 @ (configuration register) 
        .equ ADC2_CFGR2_ROVSM, 1 << 10   @ bitWidth 1 (EXTEN)  
        .equ ADC2_CFGR2_TOVS, 1 << 9   @ bitWidth 1 (EXTSEL)  
        .equ ADC2_CFGR2_OVSS_Shift, 5   @ bitWidth 4 (ALIGN)  
        .equ ADC2_CFGR2_OVSR_Shift, 2   @ bitWidth 3 (RES)  
        .equ ADC2_CFGR2_JOVSE, 1 << 1   @ bitWidth 1 (DMACFG)  
        .equ ADC2_CFGR2_ROVSE, 1 << 0   @ bitWidth 1 (DMAEN)  
 
    .equ ADC2_SMPR1, ADC2_BASE + 0x14 @ (sample time register 1) 
        .equ ADC2_SMPR1_SMP9_Shift, 27   @ bitWidth 3 (SMP9)  
        .equ ADC2_SMPR1_SMP8_Shift, 24   @ bitWidth 3 (SMP8)  
        .equ ADC2_SMPR1_SMP7_Shift, 21   @ bitWidth 3 (SMP7)  
        .equ ADC2_SMPR1_SMP6_Shift, 18   @ bitWidth 3 (SMP6)  
        .equ ADC2_SMPR1_SMP5_Shift, 15   @ bitWidth 3 (SMP5)  
        .equ ADC2_SMPR1_SMP4_Shift, 12   @ bitWidth 3 (SMP4)  
        .equ ADC2_SMPR1_SMP3_Shift, 9   @ bitWidth 3 (SMP3)  
        .equ ADC2_SMPR1_SMP2_Shift, 6   @ bitWidth 3 (SMP2)  
        .equ ADC2_SMPR1_SMP1_Shift, 3   @ bitWidth 3 (SMP1)  
 
    .equ ADC2_SMPR2, ADC2_BASE + 0x18 @ (sample time register 2) 
        .equ ADC2_SMPR2_SMP18_Shift, 24   @ bitWidth 3 (SMP18)  
        .equ ADC2_SMPR2_SMP17_Shift, 21   @ bitWidth 3 (SMP17)  
        .equ ADC2_SMPR2_SMP16_Shift, 18   @ bitWidth 3 (SMP16)  
        .equ ADC2_SMPR2_SMP15_Shift, 15   @ bitWidth 3 (SMP15)  
        .equ ADC2_SMPR2_SMP14_Shift, 12   @ bitWidth 3 (SMP14)  
        .equ ADC2_SMPR2_SMP13_Shift, 9   @ bitWidth 3 (SMP13)  
        .equ ADC2_SMPR2_SMP12_Shift, 6   @ bitWidth 3 (SMP12)  
        .equ ADC2_SMPR2_SMP11_Shift, 3   @ bitWidth 3 (SMP11)  
        .equ ADC2_SMPR2_SMP10_Shift, 0   @ bitWidth 3 (SMP10)  
 
    .equ ADC2_TR1, ADC2_BASE + 0x20 @ (watchdog threshold register 1) 
        .equ ADC2_TR1_HT1_Shift, 16   @ bitWidth 12 (HT1)  
        .equ ADC2_TR1_LT1_Shift, 0   @ bitWidth 12 (LT1)  
 
    .equ ADC2_TR2, ADC2_BASE + 0x24 @ (watchdog threshold register) 
        .equ ADC2_TR2_HT2_Shift, 16   @ bitWidth 8 (HT2)  
        .equ ADC2_TR2_LT2_Shift, 0   @ bitWidth 8 (LT2)  
 
    .equ ADC2_TR3, ADC2_BASE + 0x28 @ (watchdog threshold register 3) 
        .equ ADC2_TR3_HT3_Shift, 16   @ bitWidth 8 (HT3)  
        .equ ADC2_TR3_LT3_Shift, 0   @ bitWidth 8 (LT3)  
 
    .equ ADC2_SQR1, ADC2_BASE + 0x30 @ (regular sequence register 1) 
        .equ ADC2_SQR1_SQ4_Shift, 24   @ bitWidth 5 (SQ4)  
        .equ ADC2_SQR1_SQ3_Shift, 18   @ bitWidth 5 (SQ3)  
        .equ ADC2_SQR1_SQ2_Shift, 12   @ bitWidth 5 (SQ2)  
        .equ ADC2_SQR1_SQ1_Shift, 6   @ bitWidth 5 (SQ1)  
        .equ ADC2_SQR1_L3_Shift, 0   @ bitWidth 4 (L3)  
 
    .equ ADC2_SQR2, ADC2_BASE + 0x34 @ (regular sequence register 2) 
        .equ ADC2_SQR2_SQ9_Shift, 24   @ bitWidth 5 (SQ9)  
        .equ ADC2_SQR2_SQ8_Shift, 18   @ bitWidth 5 (SQ8)  
        .equ ADC2_SQR2_SQ7_Shift, 12   @ bitWidth 5 (SQ7)  
        .equ ADC2_SQR2_SQ6_Shift, 6   @ bitWidth 5 (SQ6)  
        .equ ADC2_SQR2_SQ5_Shift, 0   @ bitWidth 5 (SQ5)  
 
    .equ ADC2_SQR3, ADC2_BASE + 0x38 @ (regular sequence register 3) 
        .equ ADC2_SQR3_SQ14_Shift, 24   @ bitWidth 5 (SQ14)  
        .equ ADC2_SQR3_SQ13_Shift, 18   @ bitWidth 5 (SQ13)  
        .equ ADC2_SQR3_SQ12_Shift, 12   @ bitWidth 5 (SQ12)  
        .equ ADC2_SQR3_SQ11_Shift, 6   @ bitWidth 5 (SQ11)  
        .equ ADC2_SQR3_SQ10_Shift, 0   @ bitWidth 5 (SQ10)  
 
    .equ ADC2_SQR4, ADC2_BASE + 0x3C @ (regular sequence register 4) 
        .equ ADC2_SQR4_SQ16_Shift, 6   @ bitWidth 5 (SQ16)  
        .equ ADC2_SQR4_SQ15_Shift, 0   @ bitWidth 5 (SQ15)  
 
    .equ ADC2_DR, ADC2_BASE + 0x40 @ (regular Data Register) 
        .equ ADC2_DR_regularDATA_Shift, 0   @ bitWidth 16 (regularDATA)  
 
    .equ ADC2_JSQR, ADC2_BASE + 0x4C @ (injected sequence register) 
        .equ ADC2_JSQR_JSQ4_Shift, 26   @ bitWidth 5 (JSQ4)  
        .equ ADC2_JSQR_JSQ3_Shift, 20   @ bitWidth 5 (JSQ3)  
        .equ ADC2_JSQR_JSQ2_Shift, 14   @ bitWidth 5 (JSQ2)  
        .equ ADC2_JSQR_JSQ1_Shift, 8   @ bitWidth 5 (JSQ1)  
        .equ ADC2_JSQR_JEXTEN_Shift, 6   @ bitWidth 2 (JEXTEN)  
        .equ ADC2_JSQR_JEXTSEL_Shift, 2   @ bitWidth 4 (JEXTSEL)  
        .equ ADC2_JSQR_JL_Shift, 0   @ bitWidth 2 (JL)  
 
    .equ ADC2_OFR1, ADC2_BASE + 0x60 @ (offset register 1) 
        .equ ADC2_OFR1_OFFSET1_EN, 1 << 31   @ bitWidth 1 (OFFSET1_EN)  
        .equ ADC2_OFR1_OFFSET1_CH_Shift, 26   @ bitWidth 5 (OFFSET1_CH)  
        .equ ADC2_OFR1_OFFSET1_Shift, 0   @ bitWidth 12 (OFFSET1)  
 
    .equ ADC2_OFR2, ADC2_BASE + 0x64 @ (offset register 2) 
        .equ ADC2_OFR2_OFFSET2_EN, 1 << 31   @ bitWidth 1 (OFFSET2_EN)  
        .equ ADC2_OFR2_OFFSET2_CH_Shift, 26   @ bitWidth 5 (OFFSET2_CH)  
        .equ ADC2_OFR2_OFFSET2_Shift, 0   @ bitWidth 12 (OFFSET2)  
 
    .equ ADC2_OFR3, ADC2_BASE + 0x68 @ (offset register 3) 
        .equ ADC2_OFR3_OFFSET3_EN, 1 << 31   @ bitWidth 1 (OFFSET3_EN)  
        .equ ADC2_OFR3_OFFSET3_CH_Shift, 26   @ bitWidth 5 (OFFSET3_CH)  
        .equ ADC2_OFR3_OFFSET3_Shift, 0   @ bitWidth 12 (OFFSET3)  
 
    .equ ADC2_OFR4, ADC2_BASE + 0x6C @ (offset register 4) 
        .equ ADC2_OFR4_OFFSET4_EN, 1 << 31   @ bitWidth 1 (OFFSET4_EN)  
        .equ ADC2_OFR4_OFFSET4_CH_Shift, 26   @ bitWidth 5 (OFFSET4_CH)  
        .equ ADC2_OFR4_OFFSET4_Shift, 0   @ bitWidth 12 (OFFSET4)  
 
    .equ ADC2_JDR1, ADC2_BASE + 0x80 @ (injected data register 1) 
        .equ ADC2_JDR1_JDATA1_Shift, 0   @ bitWidth 16 (JDATA1)  
 
    .equ ADC2_JDR2, ADC2_BASE + 0x84 @ (injected data register 2) 
        .equ ADC2_JDR2_JDATA2_Shift, 0   @ bitWidth 16 (JDATA2)  
 
    .equ ADC2_JDR3, ADC2_BASE + 0x88 @ (injected data register 3) 
        .equ ADC2_JDR3_JDATA3_Shift, 0   @ bitWidth 16 (JDATA3)  
 
    .equ ADC2_JDR4, ADC2_BASE + 0x8C @ (injected data register 4) 
        .equ ADC2_JDR4_JDATA4_Shift, 0   @ bitWidth 16 (JDATA4)  
 
    .equ ADC2_AWD2CR, ADC2_BASE + 0xA0 @ (Analog Watchdog 2 Configuration  Register) 
        .equ ADC2_AWD2CR_AWD2CH_Shift, 1   @ bitWidth 18 (AWD2CH)  
 
    .equ ADC2_AWD3CR, ADC2_BASE + 0xA4 @ (Analog Watchdog 3 Configuration  Register) 
        .equ ADC2_AWD3CR_AWD3CH_Shift, 1   @ bitWidth 18 (AWD3CH)  
 
    .equ ADC2_DIFSEL, ADC2_BASE + 0xB0 @ (Differential Mode Selection Register  2) 
        .equ ADC2_DIFSEL_DIFSEL_1_15_Shift, 1   @ bitWidth 15 (Differential mode for channels 15 to  1)  
        .equ ADC2_DIFSEL_DIFSEL_16_18_Shift, 16   @ bitWidth 3 (Differential mode for channels 18 to  16)  
 
    .equ ADC2_CALFACT, ADC2_BASE + 0xB4 @ (Calibration Factors) 
        .equ ADC2_CALFACT_CALFACT_D_Shift, 16   @ bitWidth 7 (CALFACT_D)  
        .equ ADC2_CALFACT_CALFACT_S_Shift, 0   @ bitWidth 7 (CALFACT_S)  
 

@=========================== ADC3 ===========================@
.equ ADC3_BASE, 0x50040200 @ (Analog-to-Digital Converter) 
    .equ ADC3_ISR, ADC3_BASE + 0x0 @ (interrupt and status register) 
        .equ ADC3_ISR_JQOVF, 1 << 10   @ bitWidth 1 (JQOVF)  
        .equ ADC3_ISR_AWD3, 1 << 9   @ bitWidth 1 (AWD3)  
        .equ ADC3_ISR_AWD2, 1 << 8   @ bitWidth 1 (AWD2)  
        .equ ADC3_ISR_AWD1, 1 << 7   @ bitWidth 1 (AWD1)  
        .equ ADC3_ISR_JEOS, 1 << 6   @ bitWidth 1 (JEOS)  
        .equ ADC3_ISR_JEOC, 1 << 5   @ bitWidth 1 (JEOC)  
        .equ ADC3_ISR_OVR, 1 << 4   @ bitWidth 1 (OVR)  
        .equ ADC3_ISR_EOS, 1 << 3   @ bitWidth 1 (EOS)  
        .equ ADC3_ISR_EOC, 1 << 2   @ bitWidth 1 (EOC)  
        .equ ADC3_ISR_EOSMP, 1 << 1   @ bitWidth 1 (EOSMP)  
        .equ ADC3_ISR_ADRDY, 1 << 0   @ bitWidth 1 (ADRDY)  
 
    .equ ADC3_IER, ADC3_BASE + 0x4 @ (interrupt enable register) 
        .equ ADC3_IER_JQOVFIE, 1 << 10   @ bitWidth 1 (JQOVFIE)  
        .equ ADC3_IER_AWD3IE, 1 << 9   @ bitWidth 1 (AWD3IE)  
        .equ ADC3_IER_AWD2IE, 1 << 8   @ bitWidth 1 (AWD2IE)  
        .equ ADC3_IER_AWD1IE, 1 << 7   @ bitWidth 1 (AWD1IE)  
        .equ ADC3_IER_JEOSIE, 1 << 6   @ bitWidth 1 (JEOSIE)  
        .equ ADC3_IER_JEOCIE, 1 << 5   @ bitWidth 1 (JEOCIE)  
        .equ ADC3_IER_OVRIE, 1 << 4   @ bitWidth 1 (OVRIE)  
        .equ ADC3_IER_EOSIE, 1 << 3   @ bitWidth 1 (EOSIE)  
        .equ ADC3_IER_EOCIE, 1 << 2   @ bitWidth 1 (EOCIE)  
        .equ ADC3_IER_EOSMPIE, 1 << 1   @ bitWidth 1 (EOSMPIE)  
        .equ ADC3_IER_ADRDYIE, 1 << 0   @ bitWidth 1 (ADRDYIE)  
 
    .equ ADC3_CR, ADC3_BASE + 0x8 @ (control register) 
        .equ ADC3_CR_ADCAL, 1 << 31   @ bitWidth 1 (ADCAL)  
        .equ ADC3_CR_ADCALDIF, 1 << 30   @ bitWidth 1 (ADCALDIF)  
        .equ ADC3_CR_DEEPPWD, 1 << 29   @ bitWidth 1 (DEEPPWD)  
        .equ ADC3_CR_ADVREGEN, 1 << 28   @ bitWidth 1 (ADVREGEN)  
        .equ ADC3_CR_JADSTP, 1 << 5   @ bitWidth 1 (JADSTP)  
        .equ ADC3_CR_ADSTP, 1 << 4   @ bitWidth 1 (ADSTP)  
        .equ ADC3_CR_JADSTART, 1 << 3   @ bitWidth 1 (JADSTART)  
        .equ ADC3_CR_ADSTART, 1 << 2   @ bitWidth 1 (ADSTART)  
        .equ ADC3_CR_ADDIS, 1 << 1   @ bitWidth 1 (ADDIS)  
        .equ ADC3_CR_ADEN, 1 << 0   @ bitWidth 1 (ADEN)  
 
    .equ ADC3_CFGR, ADC3_BASE + 0xC @ (configuration register) 
        .equ ADC3_CFGR_AWDCH1CH_Shift, 26   @ bitWidth 5 (AWDCH1CH)  
        .equ ADC3_CFGR_JAUTO, 1 << 25   @ bitWidth 1 (JAUTO)  
        .equ ADC3_CFGR_JAWD1EN, 1 << 24   @ bitWidth 1 (JAWD1EN)  
        .equ ADC3_CFGR_AWD1EN, 1 << 23   @ bitWidth 1 (AWD1EN)  
        .equ ADC3_CFGR_AWD1SGL, 1 << 22   @ bitWidth 1 (AWD1SGL)  
        .equ ADC3_CFGR_JQM, 1 << 21   @ bitWidth 1 (JQM)  
        .equ ADC3_CFGR_JDISCEN, 1 << 20   @ bitWidth 1 (JDISCEN)  
        .equ ADC3_CFGR_DISCNUM_Shift, 17   @ bitWidth 3 (DISCNUM)  
        .equ ADC3_CFGR_DISCEN, 1 << 16   @ bitWidth 1 (DISCEN)  
        .equ ADC3_CFGR_AUTOFF, 1 << 15   @ bitWidth 1 (AUTOFF)  
        .equ ADC3_CFGR_AUTDLY, 1 << 14   @ bitWidth 1 (AUTDLY)  
        .equ ADC3_CFGR_CONT, 1 << 13   @ bitWidth 1 (CONT)  
        .equ ADC3_CFGR_OVRMOD, 1 << 12   @ bitWidth 1 (OVRMOD)  
        .equ ADC3_CFGR_EXTEN_Shift, 10   @ bitWidth 2 (EXTEN)  
        .equ ADC3_CFGR_EXTSEL_Shift, 6   @ bitWidth 4 (EXTSEL)  
        .equ ADC3_CFGR_ALIGN, 1 << 5   @ bitWidth 1 (ALIGN)  
        .equ ADC3_CFGR_RES_Shift, 3   @ bitWidth 2 (RES)  
        .equ ADC3_CFGR_DMACFG, 1 << 1   @ bitWidth 1 (DMACFG)  
        .equ ADC3_CFGR_DMAEN, 1 << 0   @ bitWidth 1 (DMAEN)  
 
    .equ ADC3_CFGR2, ADC3_BASE + 0x10 @ (configuration register) 
        .equ ADC3_CFGR2_ROVSM, 1 << 10   @ bitWidth 1 (EXTEN)  
        .equ ADC3_CFGR2_TOVS, 1 << 9   @ bitWidth 1 (EXTSEL)  
        .equ ADC3_CFGR2_OVSS_Shift, 5   @ bitWidth 4 (ALIGN)  
        .equ ADC3_CFGR2_OVSR_Shift, 2   @ bitWidth 3 (RES)  
        .equ ADC3_CFGR2_JOVSE, 1 << 1   @ bitWidth 1 (DMACFG)  
        .equ ADC3_CFGR2_ROVSE, 1 << 0   @ bitWidth 1 (DMAEN)  
 
    .equ ADC3_SMPR1, ADC3_BASE + 0x14 @ (sample time register 1) 
        .equ ADC3_SMPR1_SMP9_Shift, 27   @ bitWidth 3 (SMP9)  
        .equ ADC3_SMPR1_SMP8_Shift, 24   @ bitWidth 3 (SMP8)  
        .equ ADC3_SMPR1_SMP7_Shift, 21   @ bitWidth 3 (SMP7)  
        .equ ADC3_SMPR1_SMP6_Shift, 18   @ bitWidth 3 (SMP6)  
        .equ ADC3_SMPR1_SMP5_Shift, 15   @ bitWidth 3 (SMP5)  
        .equ ADC3_SMPR1_SMP4_Shift, 12   @ bitWidth 3 (SMP4)  
        .equ ADC3_SMPR1_SMP3_Shift, 9   @ bitWidth 3 (SMP3)  
        .equ ADC3_SMPR1_SMP2_Shift, 6   @ bitWidth 3 (SMP2)  
        .equ ADC3_SMPR1_SMP1_Shift, 3   @ bitWidth 3 (SMP1)  
 
    .equ ADC3_SMPR2, ADC3_BASE + 0x18 @ (sample time register 2) 
        .equ ADC3_SMPR2_SMP18_Shift, 24   @ bitWidth 3 (SMP18)  
        .equ ADC3_SMPR2_SMP17_Shift, 21   @ bitWidth 3 (SMP17)  
        .equ ADC3_SMPR2_SMP16_Shift, 18   @ bitWidth 3 (SMP16)  
        .equ ADC3_SMPR2_SMP15_Shift, 15   @ bitWidth 3 (SMP15)  
        .equ ADC3_SMPR2_SMP14_Shift, 12   @ bitWidth 3 (SMP14)  
        .equ ADC3_SMPR2_SMP13_Shift, 9   @ bitWidth 3 (SMP13)  
        .equ ADC3_SMPR2_SMP12_Shift, 6   @ bitWidth 3 (SMP12)  
        .equ ADC3_SMPR2_SMP11_Shift, 3   @ bitWidth 3 (SMP11)  
        .equ ADC3_SMPR2_SMP10_Shift, 0   @ bitWidth 3 (SMP10)  
 
    .equ ADC3_TR1, ADC3_BASE + 0x20 @ (watchdog threshold register 1) 
        .equ ADC3_TR1_HT1_Shift, 16   @ bitWidth 12 (HT1)  
        .equ ADC3_TR1_LT1_Shift, 0   @ bitWidth 12 (LT1)  
 
    .equ ADC3_TR2, ADC3_BASE + 0x24 @ (watchdog threshold register) 
        .equ ADC3_TR2_HT2_Shift, 16   @ bitWidth 8 (HT2)  
        .equ ADC3_TR2_LT2_Shift, 0   @ bitWidth 8 (LT2)  
 
    .equ ADC3_TR3, ADC3_BASE + 0x28 @ (watchdog threshold register 3) 
        .equ ADC3_TR3_HT3_Shift, 16   @ bitWidth 8 (HT3)  
        .equ ADC3_TR3_LT3_Shift, 0   @ bitWidth 8 (LT3)  
 
    .equ ADC3_SQR1, ADC3_BASE + 0x30 @ (regular sequence register 1) 
        .equ ADC3_SQR1_SQ4_Shift, 24   @ bitWidth 5 (SQ4)  
        .equ ADC3_SQR1_SQ3_Shift, 18   @ bitWidth 5 (SQ3)  
        .equ ADC3_SQR1_SQ2_Shift, 12   @ bitWidth 5 (SQ2)  
        .equ ADC3_SQR1_SQ1_Shift, 6   @ bitWidth 5 (SQ1)  
        .equ ADC3_SQR1_L3_Shift, 0   @ bitWidth 4 (L3)  
 
    .equ ADC3_SQR2, ADC3_BASE + 0x34 @ (regular sequence register 2) 
        .equ ADC3_SQR2_SQ9_Shift, 24   @ bitWidth 5 (SQ9)  
        .equ ADC3_SQR2_SQ8_Shift, 18   @ bitWidth 5 (SQ8)  
        .equ ADC3_SQR2_SQ7_Shift, 12   @ bitWidth 5 (SQ7)  
        .equ ADC3_SQR2_SQ6_Shift, 6   @ bitWidth 5 (SQ6)  
        .equ ADC3_SQR2_SQ5_Shift, 0   @ bitWidth 5 (SQ5)  
 
    .equ ADC3_SQR3, ADC3_BASE + 0x38 @ (regular sequence register 3) 
        .equ ADC3_SQR3_SQ14_Shift, 24   @ bitWidth 5 (SQ14)  
        .equ ADC3_SQR3_SQ13_Shift, 18   @ bitWidth 5 (SQ13)  
        .equ ADC3_SQR3_SQ12_Shift, 12   @ bitWidth 5 (SQ12)  
        .equ ADC3_SQR3_SQ11_Shift, 6   @ bitWidth 5 (SQ11)  
        .equ ADC3_SQR3_SQ10_Shift, 0   @ bitWidth 5 (SQ10)  
 
    .equ ADC3_SQR4, ADC3_BASE + 0x3C @ (regular sequence register 4) 
        .equ ADC3_SQR4_SQ16_Shift, 6   @ bitWidth 5 (SQ16)  
        .equ ADC3_SQR4_SQ15_Shift, 0   @ bitWidth 5 (SQ15)  
 
    .equ ADC3_DR, ADC3_BASE + 0x40 @ (regular Data Register) 
        .equ ADC3_DR_regularDATA_Shift, 0   @ bitWidth 16 (regularDATA)  
 
    .equ ADC3_JSQR, ADC3_BASE + 0x4C @ (injected sequence register) 
        .equ ADC3_JSQR_JSQ4_Shift, 26   @ bitWidth 5 (JSQ4)  
        .equ ADC3_JSQR_JSQ3_Shift, 20   @ bitWidth 5 (JSQ3)  
        .equ ADC3_JSQR_JSQ2_Shift, 14   @ bitWidth 5 (JSQ2)  
        .equ ADC3_JSQR_JSQ1_Shift, 8   @ bitWidth 5 (JSQ1)  
        .equ ADC3_JSQR_JEXTEN_Shift, 6   @ bitWidth 2 (JEXTEN)  
        .equ ADC3_JSQR_JEXTSEL_Shift, 2   @ bitWidth 4 (JEXTSEL)  
        .equ ADC3_JSQR_JL_Shift, 0   @ bitWidth 2 (JL)  
 
    .equ ADC3_OFR1, ADC3_BASE + 0x60 @ (offset register 1) 
        .equ ADC3_OFR1_OFFSET1_EN, 1 << 31   @ bitWidth 1 (OFFSET1_EN)  
        .equ ADC3_OFR1_OFFSET1_CH_Shift, 26   @ bitWidth 5 (OFFSET1_CH)  
        .equ ADC3_OFR1_OFFSET1_Shift, 0   @ bitWidth 12 (OFFSET1)  
 
    .equ ADC3_OFR2, ADC3_BASE + 0x64 @ (offset register 2) 
        .equ ADC3_OFR2_OFFSET2_EN, 1 << 31   @ bitWidth 1 (OFFSET2_EN)  
        .equ ADC3_OFR2_OFFSET2_CH_Shift, 26   @ bitWidth 5 (OFFSET2_CH)  
        .equ ADC3_OFR2_OFFSET2_Shift, 0   @ bitWidth 12 (OFFSET2)  
 
    .equ ADC3_OFR3, ADC3_BASE + 0x68 @ (offset register 3) 
        .equ ADC3_OFR3_OFFSET3_EN, 1 << 31   @ bitWidth 1 (OFFSET3_EN)  
        .equ ADC3_OFR3_OFFSET3_CH_Shift, 26   @ bitWidth 5 (OFFSET3_CH)  
        .equ ADC3_OFR3_OFFSET3_Shift, 0   @ bitWidth 12 (OFFSET3)  
 
    .equ ADC3_OFR4, ADC3_BASE + 0x6C @ (offset register 4) 
        .equ ADC3_OFR4_OFFSET4_EN, 1 << 31   @ bitWidth 1 (OFFSET4_EN)  
        .equ ADC3_OFR4_OFFSET4_CH_Shift, 26   @ bitWidth 5 (OFFSET4_CH)  
        .equ ADC3_OFR4_OFFSET4_Shift, 0   @ bitWidth 12 (OFFSET4)  
 
    .equ ADC3_JDR1, ADC3_BASE + 0x80 @ (injected data register 1) 
        .equ ADC3_JDR1_JDATA1_Shift, 0   @ bitWidth 16 (JDATA1)  
 
    .equ ADC3_JDR2, ADC3_BASE + 0x84 @ (injected data register 2) 
        .equ ADC3_JDR2_JDATA2_Shift, 0   @ bitWidth 16 (JDATA2)  
 
    .equ ADC3_JDR3, ADC3_BASE + 0x88 @ (injected data register 3) 
        .equ ADC3_JDR3_JDATA3_Shift, 0   @ bitWidth 16 (JDATA3)  
 
    .equ ADC3_JDR4, ADC3_BASE + 0x8C @ (injected data register 4) 
        .equ ADC3_JDR4_JDATA4_Shift, 0   @ bitWidth 16 (JDATA4)  
 
    .equ ADC3_AWD2CR, ADC3_BASE + 0xA0 @ (Analog Watchdog 2 Configuration  Register) 
        .equ ADC3_AWD2CR_AWD2CH_Shift, 1   @ bitWidth 18 (AWD2CH)  
 
    .equ ADC3_AWD3CR, ADC3_BASE + 0xA4 @ (Analog Watchdog 3 Configuration  Register) 
        .equ ADC3_AWD3CR_AWD3CH_Shift, 1   @ bitWidth 18 (AWD3CH)  
 
    .equ ADC3_DIFSEL, ADC3_BASE + 0xB0 @ (Differential Mode Selection Register  2) 
        .equ ADC3_DIFSEL_DIFSEL_1_15_Shift, 1   @ bitWidth 15 (Differential mode for channels 15 to  1)  
        .equ ADC3_DIFSEL_DIFSEL_16_18_Shift, 16   @ bitWidth 3 (Differential mode for channels 18 to  16)  
 
    .equ ADC3_CALFACT, ADC3_BASE + 0xB4 @ (Calibration Factors) 
        .equ ADC3_CALFACT_CALFACT_D_Shift, 16   @ bitWidth 7 (CALFACT_D)  
        .equ ADC3_CALFACT_CALFACT_S_Shift, 0   @ bitWidth 7 (CALFACT_S)  
 

@=========================== GPIOA ===========================@
.equ GPIOA_BASE, 0x48000000 @ (General-purpose I/Os) 
    .equ GPIOA_MODER, GPIOA_BASE + 0x0 @ (GPIO port mode register) 
        .equ GPIOA_MODER_MODER15_Shift, 30   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_MODER_MODER14_Shift, 28   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_MODER_MODER13_Shift, 26   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_MODER_MODER12_Shift, 24   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_MODER_MODER11_Shift, 22   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_MODER_MODER10_Shift, 20   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_MODER_MODER9_Shift, 18   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_MODER_MODER8_Shift, 16   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_MODER_MODER7_Shift, 14   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_MODER_MODER6_Shift, 12   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_MODER_MODER5_Shift, 10   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_MODER_MODER4_Shift, 8   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_MODER_MODER3_Shift, 6   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_MODER_MODER2_Shift, 4   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_MODER_MODER1_Shift, 2   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_MODER_MODER0_Shift, 0   @ bitWidth 2 (Port x configuration bits y =  0..15)  
 
    .equ GPIOA_OTYPER, GPIOA_BASE + 0x4 @ (GPIO port output type register) 
        .equ GPIOA_OTYPER_OT15, 1 << 15   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOA_OTYPER_OT14, 1 << 14   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOA_OTYPER_OT13, 1 << 13   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOA_OTYPER_OT12, 1 << 12   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOA_OTYPER_OT11, 1 << 11   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOA_OTYPER_OT10, 1 << 10   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOA_OTYPER_OT9, 1 << 9   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOA_OTYPER_OT8, 1 << 8   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOA_OTYPER_OT7, 1 << 7   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOA_OTYPER_OT6, 1 << 6   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOA_OTYPER_OT5, 1 << 5   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOA_OTYPER_OT4, 1 << 4   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOA_OTYPER_OT3, 1 << 3   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOA_OTYPER_OT2, 1 << 2   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOA_OTYPER_OT1, 1 << 1   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOA_OTYPER_OT0, 1 << 0   @ bitWidth 1 (Port x configuration bits y =  0..15)  
 
    .equ GPIOA_OSPEEDR, GPIOA_BASE + 0x8 @ (GPIO port output speed  register) 
        .equ GPIOA_OSPEEDR_OSPEEDR15_Shift, 30   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_OSPEEDR_OSPEEDR14_Shift, 28   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_OSPEEDR_OSPEEDR13_Shift, 26   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_OSPEEDR_OSPEEDR12_Shift, 24   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_OSPEEDR_OSPEEDR11_Shift, 22   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_OSPEEDR_OSPEEDR10_Shift, 20   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_OSPEEDR_OSPEEDR9_Shift, 18   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_OSPEEDR_OSPEEDR8_Shift, 16   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_OSPEEDR_OSPEEDR7_Shift, 14   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_OSPEEDR_OSPEEDR6_Shift, 12   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_OSPEEDR_OSPEEDR5_Shift, 10   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_OSPEEDR_OSPEEDR4_Shift, 8   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_OSPEEDR_OSPEEDR3_Shift, 6   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_OSPEEDR_OSPEEDR2_Shift, 4   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_OSPEEDR_OSPEEDR1_Shift, 2   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_OSPEEDR_OSPEEDR0_Shift, 0   @ bitWidth 2 (Port x configuration bits y =  0..15)  
 
    .equ GPIOA_PUPDR, GPIOA_BASE + 0xC @ (GPIO port pull-up/pull-down  register) 
        .equ GPIOA_PUPDR_PUPDR15_Shift, 30   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_PUPDR_PUPDR14_Shift, 28   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_PUPDR_PUPDR13_Shift, 26   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_PUPDR_PUPDR12_Shift, 24   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_PUPDR_PUPDR11_Shift, 22   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_PUPDR_PUPDR10_Shift, 20   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_PUPDR_PUPDR9_Shift, 18   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_PUPDR_PUPDR8_Shift, 16   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_PUPDR_PUPDR7_Shift, 14   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_PUPDR_PUPDR6_Shift, 12   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_PUPDR_PUPDR5_Shift, 10   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_PUPDR_PUPDR4_Shift, 8   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_PUPDR_PUPDR3_Shift, 6   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_PUPDR_PUPDR2_Shift, 4   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_PUPDR_PUPDR1_Shift, 2   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOA_PUPDR_PUPDR0_Shift, 0   @ bitWidth 2 (Port x configuration bits y =  0..15)  
 
    .equ GPIOA_IDR, GPIOA_BASE + 0x10 @ (GPIO port input data register) 
        .equ GPIOA_IDR_IDR15, 1 << 15   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOA_IDR_IDR14, 1 << 14   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOA_IDR_IDR13, 1 << 13   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOA_IDR_IDR12, 1 << 12   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOA_IDR_IDR11, 1 << 11   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOA_IDR_IDR10, 1 << 10   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOA_IDR_IDR9, 1 << 9   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOA_IDR_IDR8, 1 << 8   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOA_IDR_IDR7, 1 << 7   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOA_IDR_IDR6, 1 << 6   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOA_IDR_IDR5, 1 << 5   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOA_IDR_IDR4, 1 << 4   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOA_IDR_IDR3, 1 << 3   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOA_IDR_IDR2, 1 << 2   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOA_IDR_IDR1, 1 << 1   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOA_IDR_IDR0, 1 << 0   @ bitWidth 1 (Port input data y =  0..15)  
 
    .equ GPIOA_ODR, GPIOA_BASE + 0x14 @ (GPIO port output data register) 
        .equ GPIOA_ODR_ODR15, 1 << 15   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOA_ODR_ODR14, 1 << 14   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOA_ODR_ODR13, 1 << 13   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOA_ODR_ODR12, 1 << 12   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOA_ODR_ODR11, 1 << 11   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOA_ODR_ODR10, 1 << 10   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOA_ODR_ODR9, 1 << 9   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOA_ODR_ODR8, 1 << 8   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOA_ODR_ODR7, 1 << 7   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOA_ODR_ODR6, 1 << 6   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOA_ODR_ODR5, 1 << 5   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOA_ODR_ODR4, 1 << 4   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOA_ODR_ODR3, 1 << 3   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOA_ODR_ODR2, 1 << 2   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOA_ODR_ODR1, 1 << 1   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOA_ODR_ODR0, 1 << 0   @ bitWidth 1 (Port output data y =  0..15)  
 
    .equ GPIOA_BSRR, GPIOA_BASE + 0x18 @ (GPIO port bit set/reset  register) 
        .equ GPIOA_BSRR_BR15, 1 << 31   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOA_BSRR_BR14, 1 << 30   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOA_BSRR_BR13, 1 << 29   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOA_BSRR_BR12, 1 << 28   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOA_BSRR_BR11, 1 << 27   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOA_BSRR_BR10, 1 << 26   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOA_BSRR_BR9, 1 << 25   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOA_BSRR_BR8, 1 << 24   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOA_BSRR_BR7, 1 << 23   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOA_BSRR_BR6, 1 << 22   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOA_BSRR_BR5, 1 << 21   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOA_BSRR_BR4, 1 << 20   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOA_BSRR_BR3, 1 << 19   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOA_BSRR_BR2, 1 << 18   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOA_BSRR_BR1, 1 << 17   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOA_BSRR_BR0, 1 << 16   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOA_BSRR_BS15, 1 << 15   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOA_BSRR_BS14, 1 << 14   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOA_BSRR_BS13, 1 << 13   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOA_BSRR_BS12, 1 << 12   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOA_BSRR_BS11, 1 << 11   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOA_BSRR_BS10, 1 << 10   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOA_BSRR_BS9, 1 << 9   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOA_BSRR_BS8, 1 << 8   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOA_BSRR_BS7, 1 << 7   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOA_BSRR_BS6, 1 << 6   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOA_BSRR_BS5, 1 << 5   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOA_BSRR_BS4, 1 << 4   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOA_BSRR_BS3, 1 << 3   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOA_BSRR_BS2, 1 << 2   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOA_BSRR_BS1, 1 << 1   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOA_BSRR_BS0, 1 << 0   @ bitWidth 1 (Port x set bit y y=  0..15)  
 
    .equ GPIOA_LCKR, GPIOA_BASE + 0x1C @ (GPIO port configuration lock  register) 
        .equ GPIOA_LCKR_LCKK, 1 << 16   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOA_LCKR_LCK15, 1 << 15   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOA_LCKR_LCK14, 1 << 14   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOA_LCKR_LCK13, 1 << 13   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOA_LCKR_LCK12, 1 << 12   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOA_LCKR_LCK11, 1 << 11   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOA_LCKR_LCK10, 1 << 10   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOA_LCKR_LCK9, 1 << 9   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOA_LCKR_LCK8, 1 << 8   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOA_LCKR_LCK7, 1 << 7   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOA_LCKR_LCK6, 1 << 6   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOA_LCKR_LCK5, 1 << 5   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOA_LCKR_LCK4, 1 << 4   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOA_LCKR_LCK3, 1 << 3   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOA_LCKR_LCK2, 1 << 2   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOA_LCKR_LCK1, 1 << 1   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOA_LCKR_LCK0, 1 << 0   @ bitWidth 1 (Port x lock bit y y=  0..15)  
 
    .equ GPIOA_AFRL, GPIOA_BASE + 0x20 @ (GPIO alternate function low  register) 
        .equ GPIOA_AFRL_AFRL7_Shift, 28   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOA_AFRL_AFRL6_Shift, 24   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOA_AFRL_AFRL5_Shift, 20   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOA_AFRL_AFRL4_Shift, 16   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOA_AFRL_AFRL3_Shift, 12   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOA_AFRL_AFRL2_Shift, 8   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOA_AFRL_AFRL1_Shift, 4   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOA_AFRL_AFRL0_Shift, 0   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
 
    .equ GPIOA_AFRH, GPIOA_BASE + 0x24 @ (GPIO alternate function high  register) 
        .equ GPIOA_AFRH_AFRH15_Shift, 28   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOA_AFRH_AFRH14_Shift, 24   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOA_AFRH_AFRH13_Shift, 20   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOA_AFRH_AFRH12_Shift, 16   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOA_AFRH_AFRH11_Shift, 12   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOA_AFRH_AFRH10_Shift, 8   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOA_AFRH_AFRH9_Shift, 4   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOA_AFRH_AFRH8_Shift, 0   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
 

@=========================== GPIOB ===========================@
.equ GPIOB_BASE, 0x48000400 @ (General-purpose I/Os) 
    .equ GPIOB_MODER, GPIOB_BASE + 0x0 @ (GPIO port mode register) 
        .equ GPIOB_MODER_MODER15_Shift, 30   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_MODER_MODER14_Shift, 28   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_MODER_MODER13_Shift, 26   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_MODER_MODER12_Shift, 24   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_MODER_MODER11_Shift, 22   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_MODER_MODER10_Shift, 20   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_MODER_MODER9_Shift, 18   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_MODER_MODER8_Shift, 16   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_MODER_MODER7_Shift, 14   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_MODER_MODER6_Shift, 12   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_MODER_MODER5_Shift, 10   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_MODER_MODER4_Shift, 8   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_MODER_MODER3_Shift, 6   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_MODER_MODER2_Shift, 4   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_MODER_MODER1_Shift, 2   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_MODER_MODER0_Shift, 0   @ bitWidth 2 (Port x configuration bits y =  0..15)  
 
    .equ GPIOB_OTYPER, GPIOB_BASE + 0x4 @ (GPIO port output type register) 
        .equ GPIOB_OTYPER_OT15, 1 << 15   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOB_OTYPER_OT14, 1 << 14   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOB_OTYPER_OT13, 1 << 13   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOB_OTYPER_OT12, 1 << 12   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOB_OTYPER_OT11, 1 << 11   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOB_OTYPER_OT10, 1 << 10   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOB_OTYPER_OT9, 1 << 9   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOB_OTYPER_OT8, 1 << 8   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOB_OTYPER_OT7, 1 << 7   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOB_OTYPER_OT6, 1 << 6   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOB_OTYPER_OT5, 1 << 5   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOB_OTYPER_OT4, 1 << 4   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOB_OTYPER_OT3, 1 << 3   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOB_OTYPER_OT2, 1 << 2   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOB_OTYPER_OT1, 1 << 1   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOB_OTYPER_OT0, 1 << 0   @ bitWidth 1 (Port x configuration bits y =  0..15)  
 
    .equ GPIOB_OSPEEDR, GPIOB_BASE + 0x8 @ (GPIO port output speed  register) 
        .equ GPIOB_OSPEEDR_OSPEEDR15_Shift, 30   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_OSPEEDR_OSPEEDR14_Shift, 28   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_OSPEEDR_OSPEEDR13_Shift, 26   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_OSPEEDR_OSPEEDR12_Shift, 24   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_OSPEEDR_OSPEEDR11_Shift, 22   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_OSPEEDR_OSPEEDR10_Shift, 20   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_OSPEEDR_OSPEEDR9_Shift, 18   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_OSPEEDR_OSPEEDR8_Shift, 16   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_OSPEEDR_OSPEEDR7_Shift, 14   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_OSPEEDR_OSPEEDR6_Shift, 12   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_OSPEEDR_OSPEEDR5_Shift, 10   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_OSPEEDR_OSPEEDR4_Shift, 8   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_OSPEEDR_OSPEEDR3_Shift, 6   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_OSPEEDR_OSPEEDR2_Shift, 4   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_OSPEEDR_OSPEEDR1_Shift, 2   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_OSPEEDR_OSPEEDR0_Shift, 0   @ bitWidth 2 (Port x configuration bits y =  0..15)  
 
    .equ GPIOB_PUPDR, GPIOB_BASE + 0xC @ (GPIO port pull-up/pull-down  register) 
        .equ GPIOB_PUPDR_PUPDR15_Shift, 30   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_PUPDR_PUPDR14_Shift, 28   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_PUPDR_PUPDR13_Shift, 26   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_PUPDR_PUPDR12_Shift, 24   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_PUPDR_PUPDR11_Shift, 22   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_PUPDR_PUPDR10_Shift, 20   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_PUPDR_PUPDR9_Shift, 18   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_PUPDR_PUPDR8_Shift, 16   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_PUPDR_PUPDR7_Shift, 14   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_PUPDR_PUPDR6_Shift, 12   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_PUPDR_PUPDR5_Shift, 10   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_PUPDR_PUPDR4_Shift, 8   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_PUPDR_PUPDR3_Shift, 6   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_PUPDR_PUPDR2_Shift, 4   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_PUPDR_PUPDR1_Shift, 2   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOB_PUPDR_PUPDR0_Shift, 0   @ bitWidth 2 (Port x configuration bits y =  0..15)  
 
    .equ GPIOB_IDR, GPIOB_BASE + 0x10 @ (GPIO port input data register) 
        .equ GPIOB_IDR_IDR15, 1 << 15   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOB_IDR_IDR14, 1 << 14   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOB_IDR_IDR13, 1 << 13   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOB_IDR_IDR12, 1 << 12   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOB_IDR_IDR11, 1 << 11   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOB_IDR_IDR10, 1 << 10   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOB_IDR_IDR9, 1 << 9   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOB_IDR_IDR8, 1 << 8   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOB_IDR_IDR7, 1 << 7   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOB_IDR_IDR6, 1 << 6   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOB_IDR_IDR5, 1 << 5   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOB_IDR_IDR4, 1 << 4   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOB_IDR_IDR3, 1 << 3   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOB_IDR_IDR2, 1 << 2   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOB_IDR_IDR1, 1 << 1   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOB_IDR_IDR0, 1 << 0   @ bitWidth 1 (Port input data y =  0..15)  
 
    .equ GPIOB_ODR, GPIOB_BASE + 0x14 @ (GPIO port output data register) 
        .equ GPIOB_ODR_ODR15, 1 << 15   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOB_ODR_ODR14, 1 << 14   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOB_ODR_ODR13, 1 << 13   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOB_ODR_ODR12, 1 << 12   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOB_ODR_ODR11, 1 << 11   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOB_ODR_ODR10, 1 << 10   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOB_ODR_ODR9, 1 << 9   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOB_ODR_ODR8, 1 << 8   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOB_ODR_ODR7, 1 << 7   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOB_ODR_ODR6, 1 << 6   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOB_ODR_ODR5, 1 << 5   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOB_ODR_ODR4, 1 << 4   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOB_ODR_ODR3, 1 << 3   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOB_ODR_ODR2, 1 << 2   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOB_ODR_ODR1, 1 << 1   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOB_ODR_ODR0, 1 << 0   @ bitWidth 1 (Port output data y =  0..15)  
 
    .equ GPIOB_BSRR, GPIOB_BASE + 0x18 @ (GPIO port bit set/reset  register) 
        .equ GPIOB_BSRR_BR15, 1 << 31   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOB_BSRR_BR14, 1 << 30   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOB_BSRR_BR13, 1 << 29   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOB_BSRR_BR12, 1 << 28   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOB_BSRR_BR11, 1 << 27   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOB_BSRR_BR10, 1 << 26   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOB_BSRR_BR9, 1 << 25   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOB_BSRR_BR8, 1 << 24   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOB_BSRR_BR7, 1 << 23   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOB_BSRR_BR6, 1 << 22   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOB_BSRR_BR5, 1 << 21   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOB_BSRR_BR4, 1 << 20   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOB_BSRR_BR3, 1 << 19   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOB_BSRR_BR2, 1 << 18   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOB_BSRR_BR1, 1 << 17   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOB_BSRR_BR0, 1 << 16   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOB_BSRR_BS15, 1 << 15   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOB_BSRR_BS14, 1 << 14   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOB_BSRR_BS13, 1 << 13   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOB_BSRR_BS12, 1 << 12   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOB_BSRR_BS11, 1 << 11   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOB_BSRR_BS10, 1 << 10   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOB_BSRR_BS9, 1 << 9   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOB_BSRR_BS8, 1 << 8   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOB_BSRR_BS7, 1 << 7   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOB_BSRR_BS6, 1 << 6   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOB_BSRR_BS5, 1 << 5   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOB_BSRR_BS4, 1 << 4   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOB_BSRR_BS3, 1 << 3   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOB_BSRR_BS2, 1 << 2   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOB_BSRR_BS1, 1 << 1   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOB_BSRR_BS0, 1 << 0   @ bitWidth 1 (Port x set bit y y=  0..15)  
 
    .equ GPIOB_LCKR, GPIOB_BASE + 0x1C @ (GPIO port configuration lock  register) 
        .equ GPIOB_LCKR_LCKK, 1 << 16   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOB_LCKR_LCK15, 1 << 15   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOB_LCKR_LCK14, 1 << 14   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOB_LCKR_LCK13, 1 << 13   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOB_LCKR_LCK12, 1 << 12   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOB_LCKR_LCK11, 1 << 11   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOB_LCKR_LCK10, 1 << 10   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOB_LCKR_LCK9, 1 << 9   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOB_LCKR_LCK8, 1 << 8   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOB_LCKR_LCK7, 1 << 7   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOB_LCKR_LCK6, 1 << 6   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOB_LCKR_LCK5, 1 << 5   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOB_LCKR_LCK4, 1 << 4   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOB_LCKR_LCK3, 1 << 3   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOB_LCKR_LCK2, 1 << 2   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOB_LCKR_LCK1, 1 << 1   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOB_LCKR_LCK0, 1 << 0   @ bitWidth 1 (Port x lock bit y y=  0..15)  
 
    .equ GPIOB_AFRL, GPIOB_BASE + 0x20 @ (GPIO alternate function low  register) 
        .equ GPIOB_AFRL_AFRL7_Shift, 28   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOB_AFRL_AFRL6_Shift, 24   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOB_AFRL_AFRL5_Shift, 20   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOB_AFRL_AFRL4_Shift, 16   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOB_AFRL_AFRL3_Shift, 12   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOB_AFRL_AFRL2_Shift, 8   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOB_AFRL_AFRL1_Shift, 4   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOB_AFRL_AFRL0_Shift, 0   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
 
    .equ GPIOB_AFRH, GPIOB_BASE + 0x24 @ (GPIO alternate function high  register) 
        .equ GPIOB_AFRH_AFRH15_Shift, 28   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOB_AFRH_AFRH14_Shift, 24   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOB_AFRH_AFRH13_Shift, 20   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOB_AFRH_AFRH12_Shift, 16   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOB_AFRH_AFRH11_Shift, 12   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOB_AFRH_AFRH10_Shift, 8   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOB_AFRH_AFRH9_Shift, 4   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOB_AFRH_AFRH8_Shift, 0   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
 

@=========================== GPIOC ===========================@
.equ GPIOC_BASE, 0x48000800 @ (General-purpose I/Os) 
    .equ GPIOC_MODER, GPIOC_BASE + 0x0 @ (GPIO port mode register) 
        .equ GPIOC_MODER_MODER15_Shift, 30   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_MODER_MODER14_Shift, 28   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_MODER_MODER13_Shift, 26   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_MODER_MODER12_Shift, 24   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_MODER_MODER11_Shift, 22   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_MODER_MODER10_Shift, 20   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_MODER_MODER9_Shift, 18   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_MODER_MODER8_Shift, 16   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_MODER_MODER7_Shift, 14   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_MODER_MODER6_Shift, 12   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_MODER_MODER5_Shift, 10   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_MODER_MODER4_Shift, 8   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_MODER_MODER3_Shift, 6   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_MODER_MODER2_Shift, 4   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_MODER_MODER1_Shift, 2   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_MODER_MODER0_Shift, 0   @ bitWidth 2 (Port x configuration bits y =  0..15)  
 
    .equ GPIOC_OTYPER, GPIOC_BASE + 0x4 @ (GPIO port output type register) 
        .equ GPIOC_OTYPER_OT15, 1 << 15   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOC_OTYPER_OT14, 1 << 14   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOC_OTYPER_OT13, 1 << 13   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOC_OTYPER_OT12, 1 << 12   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOC_OTYPER_OT11, 1 << 11   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOC_OTYPER_OT10, 1 << 10   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOC_OTYPER_OT9, 1 << 9   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOC_OTYPER_OT8, 1 << 8   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOC_OTYPER_OT7, 1 << 7   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOC_OTYPER_OT6, 1 << 6   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOC_OTYPER_OT5, 1 << 5   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOC_OTYPER_OT4, 1 << 4   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOC_OTYPER_OT3, 1 << 3   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOC_OTYPER_OT2, 1 << 2   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOC_OTYPER_OT1, 1 << 1   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOC_OTYPER_OT0, 1 << 0   @ bitWidth 1 (Port x configuration bits y =  0..15)  
 
    .equ GPIOC_OSPEEDR, GPIOC_BASE + 0x8 @ (GPIO port output speed  register) 
        .equ GPIOC_OSPEEDR_OSPEEDR15_Shift, 30   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_OSPEEDR_OSPEEDR14_Shift, 28   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_OSPEEDR_OSPEEDR13_Shift, 26   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_OSPEEDR_OSPEEDR12_Shift, 24   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_OSPEEDR_OSPEEDR11_Shift, 22   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_OSPEEDR_OSPEEDR10_Shift, 20   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_OSPEEDR_OSPEEDR9_Shift, 18   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_OSPEEDR_OSPEEDR8_Shift, 16   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_OSPEEDR_OSPEEDR7_Shift, 14   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_OSPEEDR_OSPEEDR6_Shift, 12   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_OSPEEDR_OSPEEDR5_Shift, 10   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_OSPEEDR_OSPEEDR4_Shift, 8   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_OSPEEDR_OSPEEDR3_Shift, 6   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_OSPEEDR_OSPEEDR2_Shift, 4   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_OSPEEDR_OSPEEDR1_Shift, 2   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_OSPEEDR_OSPEEDR0_Shift, 0   @ bitWidth 2 (Port x configuration bits y =  0..15)  
 
    .equ GPIOC_PUPDR, GPIOC_BASE + 0xC @ (GPIO port pull-up/pull-down  register) 
        .equ GPIOC_PUPDR_PUPDR15_Shift, 30   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_PUPDR_PUPDR14_Shift, 28   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_PUPDR_PUPDR13_Shift, 26   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_PUPDR_PUPDR12_Shift, 24   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_PUPDR_PUPDR11_Shift, 22   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_PUPDR_PUPDR10_Shift, 20   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_PUPDR_PUPDR9_Shift, 18   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_PUPDR_PUPDR8_Shift, 16   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_PUPDR_PUPDR7_Shift, 14   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_PUPDR_PUPDR6_Shift, 12   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_PUPDR_PUPDR5_Shift, 10   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_PUPDR_PUPDR4_Shift, 8   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_PUPDR_PUPDR3_Shift, 6   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_PUPDR_PUPDR2_Shift, 4   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_PUPDR_PUPDR1_Shift, 2   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOC_PUPDR_PUPDR0_Shift, 0   @ bitWidth 2 (Port x configuration bits y =  0..15)  
 
    .equ GPIOC_IDR, GPIOC_BASE + 0x10 @ (GPIO port input data register) 
        .equ GPIOC_IDR_IDR15, 1 << 15   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOC_IDR_IDR14, 1 << 14   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOC_IDR_IDR13, 1 << 13   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOC_IDR_IDR12, 1 << 12   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOC_IDR_IDR11, 1 << 11   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOC_IDR_IDR10, 1 << 10   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOC_IDR_IDR9, 1 << 9   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOC_IDR_IDR8, 1 << 8   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOC_IDR_IDR7, 1 << 7   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOC_IDR_IDR6, 1 << 6   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOC_IDR_IDR5, 1 << 5   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOC_IDR_IDR4, 1 << 4   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOC_IDR_IDR3, 1 << 3   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOC_IDR_IDR2, 1 << 2   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOC_IDR_IDR1, 1 << 1   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOC_IDR_IDR0, 1 << 0   @ bitWidth 1 (Port input data y =  0..15)  
 
    .equ GPIOC_ODR, GPIOC_BASE + 0x14 @ (GPIO port output data register) 
        .equ GPIOC_ODR_ODR15, 1 << 15   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOC_ODR_ODR14, 1 << 14   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOC_ODR_ODR13, 1 << 13   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOC_ODR_ODR12, 1 << 12   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOC_ODR_ODR11, 1 << 11   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOC_ODR_ODR10, 1 << 10   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOC_ODR_ODR9, 1 << 9   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOC_ODR_ODR8, 1 << 8   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOC_ODR_ODR7, 1 << 7   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOC_ODR_ODR6, 1 << 6   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOC_ODR_ODR5, 1 << 5   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOC_ODR_ODR4, 1 << 4   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOC_ODR_ODR3, 1 << 3   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOC_ODR_ODR2, 1 << 2   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOC_ODR_ODR1, 1 << 1   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOC_ODR_ODR0, 1 << 0   @ bitWidth 1 (Port output data y =  0..15)  
 
    .equ GPIOC_BSRR, GPIOC_BASE + 0x18 @ (GPIO port bit set/reset  register) 
        .equ GPIOC_BSRR_BR15, 1 << 31   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOC_BSRR_BR14, 1 << 30   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOC_BSRR_BR13, 1 << 29   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOC_BSRR_BR12, 1 << 28   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOC_BSRR_BR11, 1 << 27   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOC_BSRR_BR10, 1 << 26   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOC_BSRR_BR9, 1 << 25   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOC_BSRR_BR8, 1 << 24   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOC_BSRR_BR7, 1 << 23   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOC_BSRR_BR6, 1 << 22   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOC_BSRR_BR5, 1 << 21   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOC_BSRR_BR4, 1 << 20   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOC_BSRR_BR3, 1 << 19   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOC_BSRR_BR2, 1 << 18   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOC_BSRR_BR1, 1 << 17   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOC_BSRR_BR0, 1 << 16   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOC_BSRR_BS15, 1 << 15   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOC_BSRR_BS14, 1 << 14   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOC_BSRR_BS13, 1 << 13   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOC_BSRR_BS12, 1 << 12   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOC_BSRR_BS11, 1 << 11   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOC_BSRR_BS10, 1 << 10   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOC_BSRR_BS9, 1 << 9   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOC_BSRR_BS8, 1 << 8   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOC_BSRR_BS7, 1 << 7   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOC_BSRR_BS6, 1 << 6   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOC_BSRR_BS5, 1 << 5   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOC_BSRR_BS4, 1 << 4   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOC_BSRR_BS3, 1 << 3   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOC_BSRR_BS2, 1 << 2   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOC_BSRR_BS1, 1 << 1   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOC_BSRR_BS0, 1 << 0   @ bitWidth 1 (Port x set bit y y=  0..15)  
 
    .equ GPIOC_LCKR, GPIOC_BASE + 0x1C @ (GPIO port configuration lock  register) 
        .equ GPIOC_LCKR_LCKK, 1 << 16   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOC_LCKR_LCK15, 1 << 15   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOC_LCKR_LCK14, 1 << 14   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOC_LCKR_LCK13, 1 << 13   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOC_LCKR_LCK12, 1 << 12   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOC_LCKR_LCK11, 1 << 11   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOC_LCKR_LCK10, 1 << 10   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOC_LCKR_LCK9, 1 << 9   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOC_LCKR_LCK8, 1 << 8   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOC_LCKR_LCK7, 1 << 7   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOC_LCKR_LCK6, 1 << 6   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOC_LCKR_LCK5, 1 << 5   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOC_LCKR_LCK4, 1 << 4   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOC_LCKR_LCK3, 1 << 3   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOC_LCKR_LCK2, 1 << 2   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOC_LCKR_LCK1, 1 << 1   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOC_LCKR_LCK0, 1 << 0   @ bitWidth 1 (Port x lock bit y y=  0..15)  
 
    .equ GPIOC_AFRL, GPIOC_BASE + 0x20 @ (GPIO alternate function low  register) 
        .equ GPIOC_AFRL_AFRL7_Shift, 28   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOC_AFRL_AFRL6_Shift, 24   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOC_AFRL_AFRL5_Shift, 20   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOC_AFRL_AFRL4_Shift, 16   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOC_AFRL_AFRL3_Shift, 12   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOC_AFRL_AFRL2_Shift, 8   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOC_AFRL_AFRL1_Shift, 4   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOC_AFRL_AFRL0_Shift, 0   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
 
    .equ GPIOC_AFRH, GPIOC_BASE + 0x24 @ (GPIO alternate function high  register) 
        .equ GPIOC_AFRH_AFRH15_Shift, 28   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOC_AFRH_AFRH14_Shift, 24   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOC_AFRH_AFRH13_Shift, 20   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOC_AFRH_AFRH12_Shift, 16   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOC_AFRH_AFRH11_Shift, 12   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOC_AFRH_AFRH10_Shift, 8   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOC_AFRH_AFRH9_Shift, 4   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOC_AFRH_AFRH8_Shift, 0   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
 

@=========================== GPIOD ===========================@
.equ GPIOD_BASE, 0x48000C00 @ (General-purpose I/Os) 
    .equ GPIOD_MODER, GPIOD_BASE + 0x0 @ (GPIO port mode register) 
        .equ GPIOD_MODER_MODER15_Shift, 30   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_MODER_MODER14_Shift, 28   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_MODER_MODER13_Shift, 26   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_MODER_MODER12_Shift, 24   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_MODER_MODER11_Shift, 22   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_MODER_MODER10_Shift, 20   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_MODER_MODER9_Shift, 18   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_MODER_MODER8_Shift, 16   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_MODER_MODER7_Shift, 14   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_MODER_MODER6_Shift, 12   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_MODER_MODER5_Shift, 10   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_MODER_MODER4_Shift, 8   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_MODER_MODER3_Shift, 6   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_MODER_MODER2_Shift, 4   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_MODER_MODER1_Shift, 2   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_MODER_MODER0_Shift, 0   @ bitWidth 2 (Port x configuration bits y =  0..15)  
 
    .equ GPIOD_OTYPER, GPIOD_BASE + 0x4 @ (GPIO port output type register) 
        .equ GPIOD_OTYPER_OT15, 1 << 15   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOD_OTYPER_OT14, 1 << 14   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOD_OTYPER_OT13, 1 << 13   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOD_OTYPER_OT12, 1 << 12   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOD_OTYPER_OT11, 1 << 11   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOD_OTYPER_OT10, 1 << 10   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOD_OTYPER_OT9, 1 << 9   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOD_OTYPER_OT8, 1 << 8   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOD_OTYPER_OT7, 1 << 7   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOD_OTYPER_OT6, 1 << 6   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOD_OTYPER_OT5, 1 << 5   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOD_OTYPER_OT4, 1 << 4   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOD_OTYPER_OT3, 1 << 3   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOD_OTYPER_OT2, 1 << 2   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOD_OTYPER_OT1, 1 << 1   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOD_OTYPER_OT0, 1 << 0   @ bitWidth 1 (Port x configuration bits y =  0..15)  
 
    .equ GPIOD_OSPEEDR, GPIOD_BASE + 0x8 @ (GPIO port output speed  register) 
        .equ GPIOD_OSPEEDR_OSPEEDR15_Shift, 30   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_OSPEEDR_OSPEEDR14_Shift, 28   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_OSPEEDR_OSPEEDR13_Shift, 26   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_OSPEEDR_OSPEEDR12_Shift, 24   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_OSPEEDR_OSPEEDR11_Shift, 22   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_OSPEEDR_OSPEEDR10_Shift, 20   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_OSPEEDR_OSPEEDR9_Shift, 18   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_OSPEEDR_OSPEEDR8_Shift, 16   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_OSPEEDR_OSPEEDR7_Shift, 14   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_OSPEEDR_OSPEEDR6_Shift, 12   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_OSPEEDR_OSPEEDR5_Shift, 10   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_OSPEEDR_OSPEEDR4_Shift, 8   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_OSPEEDR_OSPEEDR3_Shift, 6   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_OSPEEDR_OSPEEDR2_Shift, 4   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_OSPEEDR_OSPEEDR1_Shift, 2   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_OSPEEDR_OSPEEDR0_Shift, 0   @ bitWidth 2 (Port x configuration bits y =  0..15)  
 
    .equ GPIOD_PUPDR, GPIOD_BASE + 0xC @ (GPIO port pull-up/pull-down  register) 
        .equ GPIOD_PUPDR_PUPDR15_Shift, 30   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_PUPDR_PUPDR14_Shift, 28   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_PUPDR_PUPDR13_Shift, 26   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_PUPDR_PUPDR12_Shift, 24   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_PUPDR_PUPDR11_Shift, 22   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_PUPDR_PUPDR10_Shift, 20   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_PUPDR_PUPDR9_Shift, 18   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_PUPDR_PUPDR8_Shift, 16   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_PUPDR_PUPDR7_Shift, 14   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_PUPDR_PUPDR6_Shift, 12   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_PUPDR_PUPDR5_Shift, 10   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_PUPDR_PUPDR4_Shift, 8   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_PUPDR_PUPDR3_Shift, 6   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_PUPDR_PUPDR2_Shift, 4   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_PUPDR_PUPDR1_Shift, 2   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOD_PUPDR_PUPDR0_Shift, 0   @ bitWidth 2 (Port x configuration bits y =  0..15)  
 
    .equ GPIOD_IDR, GPIOD_BASE + 0x10 @ (GPIO port input data register) 
        .equ GPIOD_IDR_IDR15, 1 << 15   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOD_IDR_IDR14, 1 << 14   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOD_IDR_IDR13, 1 << 13   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOD_IDR_IDR12, 1 << 12   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOD_IDR_IDR11, 1 << 11   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOD_IDR_IDR10, 1 << 10   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOD_IDR_IDR9, 1 << 9   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOD_IDR_IDR8, 1 << 8   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOD_IDR_IDR7, 1 << 7   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOD_IDR_IDR6, 1 << 6   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOD_IDR_IDR5, 1 << 5   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOD_IDR_IDR4, 1 << 4   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOD_IDR_IDR3, 1 << 3   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOD_IDR_IDR2, 1 << 2   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOD_IDR_IDR1, 1 << 1   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOD_IDR_IDR0, 1 << 0   @ bitWidth 1 (Port input data y =  0..15)  
 
    .equ GPIOD_ODR, GPIOD_BASE + 0x14 @ (GPIO port output data register) 
        .equ GPIOD_ODR_ODR15, 1 << 15   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOD_ODR_ODR14, 1 << 14   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOD_ODR_ODR13, 1 << 13   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOD_ODR_ODR12, 1 << 12   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOD_ODR_ODR11, 1 << 11   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOD_ODR_ODR10, 1 << 10   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOD_ODR_ODR9, 1 << 9   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOD_ODR_ODR8, 1 << 8   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOD_ODR_ODR7, 1 << 7   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOD_ODR_ODR6, 1 << 6   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOD_ODR_ODR5, 1 << 5   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOD_ODR_ODR4, 1 << 4   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOD_ODR_ODR3, 1 << 3   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOD_ODR_ODR2, 1 << 2   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOD_ODR_ODR1, 1 << 1   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOD_ODR_ODR0, 1 << 0   @ bitWidth 1 (Port output data y =  0..15)  
 
    .equ GPIOD_BSRR, GPIOD_BASE + 0x18 @ (GPIO port bit set/reset  register) 
        .equ GPIOD_BSRR_BR15, 1 << 31   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOD_BSRR_BR14, 1 << 30   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOD_BSRR_BR13, 1 << 29   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOD_BSRR_BR12, 1 << 28   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOD_BSRR_BR11, 1 << 27   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOD_BSRR_BR10, 1 << 26   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOD_BSRR_BR9, 1 << 25   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOD_BSRR_BR8, 1 << 24   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOD_BSRR_BR7, 1 << 23   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOD_BSRR_BR6, 1 << 22   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOD_BSRR_BR5, 1 << 21   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOD_BSRR_BR4, 1 << 20   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOD_BSRR_BR3, 1 << 19   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOD_BSRR_BR2, 1 << 18   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOD_BSRR_BR1, 1 << 17   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOD_BSRR_BR0, 1 << 16   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOD_BSRR_BS15, 1 << 15   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOD_BSRR_BS14, 1 << 14   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOD_BSRR_BS13, 1 << 13   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOD_BSRR_BS12, 1 << 12   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOD_BSRR_BS11, 1 << 11   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOD_BSRR_BS10, 1 << 10   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOD_BSRR_BS9, 1 << 9   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOD_BSRR_BS8, 1 << 8   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOD_BSRR_BS7, 1 << 7   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOD_BSRR_BS6, 1 << 6   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOD_BSRR_BS5, 1 << 5   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOD_BSRR_BS4, 1 << 4   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOD_BSRR_BS3, 1 << 3   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOD_BSRR_BS2, 1 << 2   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOD_BSRR_BS1, 1 << 1   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOD_BSRR_BS0, 1 << 0   @ bitWidth 1 (Port x set bit y y=  0..15)  
 
    .equ GPIOD_LCKR, GPIOD_BASE + 0x1C @ (GPIO port configuration lock  register) 
        .equ GPIOD_LCKR_LCKK, 1 << 16   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOD_LCKR_LCK15, 1 << 15   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOD_LCKR_LCK14, 1 << 14   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOD_LCKR_LCK13, 1 << 13   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOD_LCKR_LCK12, 1 << 12   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOD_LCKR_LCK11, 1 << 11   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOD_LCKR_LCK10, 1 << 10   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOD_LCKR_LCK9, 1 << 9   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOD_LCKR_LCK8, 1 << 8   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOD_LCKR_LCK7, 1 << 7   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOD_LCKR_LCK6, 1 << 6   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOD_LCKR_LCK5, 1 << 5   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOD_LCKR_LCK4, 1 << 4   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOD_LCKR_LCK3, 1 << 3   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOD_LCKR_LCK2, 1 << 2   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOD_LCKR_LCK1, 1 << 1   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOD_LCKR_LCK0, 1 << 0   @ bitWidth 1 (Port x lock bit y y=  0..15)  
 
    .equ GPIOD_AFRL, GPIOD_BASE + 0x20 @ (GPIO alternate function low  register) 
        .equ GPIOD_AFRL_AFRL7_Shift, 28   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOD_AFRL_AFRL6_Shift, 24   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOD_AFRL_AFRL5_Shift, 20   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOD_AFRL_AFRL4_Shift, 16   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOD_AFRL_AFRL3_Shift, 12   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOD_AFRL_AFRL2_Shift, 8   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOD_AFRL_AFRL1_Shift, 4   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOD_AFRL_AFRL0_Shift, 0   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
 
    .equ GPIOD_AFRH, GPIOD_BASE + 0x24 @ (GPIO alternate function high  register) 
        .equ GPIOD_AFRH_AFRH15_Shift, 28   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOD_AFRH_AFRH14_Shift, 24   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOD_AFRH_AFRH13_Shift, 20   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOD_AFRH_AFRH12_Shift, 16   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOD_AFRH_AFRH11_Shift, 12   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOD_AFRH_AFRH10_Shift, 8   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOD_AFRH_AFRH9_Shift, 4   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOD_AFRH_AFRH8_Shift, 0   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
 

@=========================== GPIOE ===========================@
.equ GPIOE_BASE, 0x48001000 @ (General-purpose I/Os) 
    .equ GPIOE_MODER, GPIOE_BASE + 0x0 @ (GPIO port mode register) 
        .equ GPIOE_MODER_MODER15_Shift, 30   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOE_MODER_MODER14_Shift, 28   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOE_MODER_MODER13_Shift, 26   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOE_MODER_MODER12_Shift, 24   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOE_MODER_MODER11_Shift, 22   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOE_MODER_MODER10_Shift, 20   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOE_MODER_MODER9_Shift, 18   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOE_MODER_MODER8_Shift, 16   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOE_MODER_MODER7_Shift, 14   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOE_MODER_MODER6_Shift, 12   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOE_MODER_MODER5_Shift, 10   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOE_MODER_MODER4_Shift, 8   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOE_MODER_MODER3_Shift, 6   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOE_MODER_MODER2_Shift, 4   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOE_MODER_MODER1_Shift, 2   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOE_MODER_MODER0_Shift, 0   @ bitWidth 2 (Port x configuration bits y =  0..15)  
 
    .equ GPIOE_OTYPER, GPIOE_BASE + 0x4 @ (GPIO port output type register) 
        .equ GPIOE_OTYPER_OT15, 1 << 15   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOE_OTYPER_OT14, 1 << 14   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOE_OTYPER_OT13, 1 << 13   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOE_OTYPER_OT12, 1 << 12   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOE_OTYPER_OT11, 1 << 11   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOE_OTYPER_OT10, 1 << 10   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOE_OTYPER_OT9, 1 << 9   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOE_OTYPER_OT8, 1 << 8   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOE_OTYPER_OT7, 1 << 7   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOE_OTYPER_OT6, 1 << 6   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOE_OTYPER_OT5, 1 << 5   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOE_OTYPER_OT4, 1 << 4   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOE_OTYPER_OT3, 1 << 3   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOE_OTYPER_OT2, 1 << 2   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOE_OTYPER_OT1, 1 << 1   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOE_OTYPER_OT0, 1 << 0   @ bitWidth 1 (Port x configuration bits y =  0..15)  
 
    .equ GPIOE_OSPEEDR, GPIOE_BASE + 0x8 @ (GPIO port output speed  register) 
        .equ GPIOE_OSPEEDR_OSPEEDR15_Shift, 30   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOE_OSPEEDR_OSPEEDR14_Shift, 28   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOE_OSPEEDR_OSPEEDR13_Shift, 26   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOE_OSPEEDR_OSPEEDR12_Shift, 24   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOE_OSPEEDR_OSPEEDR11_Shift, 22   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOE_OSPEEDR_OSPEEDR10_Shift, 20   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOE_OSPEEDR_OSPEEDR9_Shift, 18   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOE_OSPEEDR_OSPEEDR8_Shift, 16   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOE_OSPEEDR_OSPEEDR7_Shift, 14   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOE_OSPEEDR_OSPEEDR6_Shift, 12   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOE_OSPEEDR_OSPEEDR5_Shift, 10   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOE_OSPEEDR_OSPEEDR4_Shift, 8   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOE_OSPEEDR_OSPEEDR3_Shift, 6   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOE_OSPEEDR_OSPEEDR2_Shift, 4   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOE_OSPEEDR_OSPEEDR1_Shift, 2   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOE_OSPEEDR_OSPEEDR0_Shift, 0   @ bitWidth 2 (Port x configuration bits y =  0..15)  
 
    .equ GPIOE_PUPDR, GPIOE_BASE + 0xC @ (GPIO port pull-up/pull-down  register) 
        .equ GPIOE_PUPDR_PUPDR15_Shift, 30   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOE_PUPDR_PUPDR14_Shift, 28   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOE_PUPDR_PUPDR13_Shift, 26   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOE_PUPDR_PUPDR12_Shift, 24   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOE_PUPDR_PUPDR11_Shift, 22   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOE_PUPDR_PUPDR10_Shift, 20   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOE_PUPDR_PUPDR9_Shift, 18   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOE_PUPDR_PUPDR8_Shift, 16   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOE_PUPDR_PUPDR7_Shift, 14   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOE_PUPDR_PUPDR6_Shift, 12   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOE_PUPDR_PUPDR5_Shift, 10   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOE_PUPDR_PUPDR4_Shift, 8   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOE_PUPDR_PUPDR3_Shift, 6   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOE_PUPDR_PUPDR2_Shift, 4   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOE_PUPDR_PUPDR1_Shift, 2   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOE_PUPDR_PUPDR0_Shift, 0   @ bitWidth 2 (Port x configuration bits y =  0..15)  
 
    .equ GPIOE_IDR, GPIOE_BASE + 0x10 @ (GPIO port input data register) 
        .equ GPIOE_IDR_IDR15, 1 << 15   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOE_IDR_IDR14, 1 << 14   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOE_IDR_IDR13, 1 << 13   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOE_IDR_IDR12, 1 << 12   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOE_IDR_IDR11, 1 << 11   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOE_IDR_IDR10, 1 << 10   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOE_IDR_IDR9, 1 << 9   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOE_IDR_IDR8, 1 << 8   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOE_IDR_IDR7, 1 << 7   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOE_IDR_IDR6, 1 << 6   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOE_IDR_IDR5, 1 << 5   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOE_IDR_IDR4, 1 << 4   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOE_IDR_IDR3, 1 << 3   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOE_IDR_IDR2, 1 << 2   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOE_IDR_IDR1, 1 << 1   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOE_IDR_IDR0, 1 << 0   @ bitWidth 1 (Port input data y =  0..15)  
 
    .equ GPIOE_ODR, GPIOE_BASE + 0x14 @ (GPIO port output data register) 
        .equ GPIOE_ODR_ODR15, 1 << 15   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOE_ODR_ODR14, 1 << 14   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOE_ODR_ODR13, 1 << 13   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOE_ODR_ODR12, 1 << 12   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOE_ODR_ODR11, 1 << 11   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOE_ODR_ODR10, 1 << 10   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOE_ODR_ODR9, 1 << 9   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOE_ODR_ODR8, 1 << 8   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOE_ODR_ODR7, 1 << 7   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOE_ODR_ODR6, 1 << 6   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOE_ODR_ODR5, 1 << 5   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOE_ODR_ODR4, 1 << 4   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOE_ODR_ODR3, 1 << 3   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOE_ODR_ODR2, 1 << 2   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOE_ODR_ODR1, 1 << 1   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOE_ODR_ODR0, 1 << 0   @ bitWidth 1 (Port output data y =  0..15)  
 
    .equ GPIOE_BSRR, GPIOE_BASE + 0x18 @ (GPIO port bit set/reset  register) 
        .equ GPIOE_BSRR_BR15, 1 << 31   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOE_BSRR_BR14, 1 << 30   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOE_BSRR_BR13, 1 << 29   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOE_BSRR_BR12, 1 << 28   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOE_BSRR_BR11, 1 << 27   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOE_BSRR_BR10, 1 << 26   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOE_BSRR_BR9, 1 << 25   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOE_BSRR_BR8, 1 << 24   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOE_BSRR_BR7, 1 << 23   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOE_BSRR_BR6, 1 << 22   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOE_BSRR_BR5, 1 << 21   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOE_BSRR_BR4, 1 << 20   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOE_BSRR_BR3, 1 << 19   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOE_BSRR_BR2, 1 << 18   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOE_BSRR_BR1, 1 << 17   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOE_BSRR_BR0, 1 << 16   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOE_BSRR_BS15, 1 << 15   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOE_BSRR_BS14, 1 << 14   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOE_BSRR_BS13, 1 << 13   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOE_BSRR_BS12, 1 << 12   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOE_BSRR_BS11, 1 << 11   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOE_BSRR_BS10, 1 << 10   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOE_BSRR_BS9, 1 << 9   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOE_BSRR_BS8, 1 << 8   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOE_BSRR_BS7, 1 << 7   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOE_BSRR_BS6, 1 << 6   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOE_BSRR_BS5, 1 << 5   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOE_BSRR_BS4, 1 << 4   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOE_BSRR_BS3, 1 << 3   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOE_BSRR_BS2, 1 << 2   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOE_BSRR_BS1, 1 << 1   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOE_BSRR_BS0, 1 << 0   @ bitWidth 1 (Port x set bit y y=  0..15)  
 
    .equ GPIOE_LCKR, GPIOE_BASE + 0x1C @ (GPIO port configuration lock  register) 
        .equ GPIOE_LCKR_LCKK, 1 << 16   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOE_LCKR_LCK15, 1 << 15   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOE_LCKR_LCK14, 1 << 14   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOE_LCKR_LCK13, 1 << 13   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOE_LCKR_LCK12, 1 << 12   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOE_LCKR_LCK11, 1 << 11   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOE_LCKR_LCK10, 1 << 10   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOE_LCKR_LCK9, 1 << 9   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOE_LCKR_LCK8, 1 << 8   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOE_LCKR_LCK7, 1 << 7   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOE_LCKR_LCK6, 1 << 6   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOE_LCKR_LCK5, 1 << 5   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOE_LCKR_LCK4, 1 << 4   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOE_LCKR_LCK3, 1 << 3   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOE_LCKR_LCK2, 1 << 2   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOE_LCKR_LCK1, 1 << 1   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOE_LCKR_LCK0, 1 << 0   @ bitWidth 1 (Port x lock bit y y=  0..15)  
 
    .equ GPIOE_AFRL, GPIOE_BASE + 0x20 @ (GPIO alternate function low  register) 
        .equ GPIOE_AFRL_AFRL7_Shift, 28   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOE_AFRL_AFRL6_Shift, 24   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOE_AFRL_AFRL5_Shift, 20   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOE_AFRL_AFRL4_Shift, 16   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOE_AFRL_AFRL3_Shift, 12   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOE_AFRL_AFRL2_Shift, 8   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOE_AFRL_AFRL1_Shift, 4   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOE_AFRL_AFRL0_Shift, 0   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
 
    .equ GPIOE_AFRH, GPIOE_BASE + 0x24 @ (GPIO alternate function high  register) 
        .equ GPIOE_AFRH_AFRH15_Shift, 28   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOE_AFRH_AFRH14_Shift, 24   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOE_AFRH_AFRH13_Shift, 20   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOE_AFRH_AFRH12_Shift, 16   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOE_AFRH_AFRH11_Shift, 12   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOE_AFRH_AFRH10_Shift, 8   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOE_AFRH_AFRH9_Shift, 4   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOE_AFRH_AFRH8_Shift, 0   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
 

@=========================== GPIOF ===========================@
.equ GPIOF_BASE, 0x48001400 @ (General-purpose I/Os) 
    .equ GPIOF_MODER, GPIOF_BASE + 0x0 @ (GPIO port mode register) 
        .equ GPIOF_MODER_MODER15_Shift, 30   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_MODER_MODER14_Shift, 28   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_MODER_MODER13_Shift, 26   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_MODER_MODER12_Shift, 24   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_MODER_MODER11_Shift, 22   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_MODER_MODER10_Shift, 20   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_MODER_MODER9_Shift, 18   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_MODER_MODER8_Shift, 16   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_MODER_MODER7_Shift, 14   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_MODER_MODER6_Shift, 12   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_MODER_MODER5_Shift, 10   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_MODER_MODER4_Shift, 8   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_MODER_MODER3_Shift, 6   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_MODER_MODER2_Shift, 4   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_MODER_MODER1_Shift, 2   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_MODER_MODER0_Shift, 0   @ bitWidth 2 (Port x configuration bits y =  0..15)  
 
    .equ GPIOF_OTYPER, GPIOF_BASE + 0x4 @ (GPIO port output type register) 
        .equ GPIOF_OTYPER_OT15, 1 << 15   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOF_OTYPER_OT14, 1 << 14   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOF_OTYPER_OT13, 1 << 13   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOF_OTYPER_OT12, 1 << 12   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOF_OTYPER_OT11, 1 << 11   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOF_OTYPER_OT10, 1 << 10   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOF_OTYPER_OT9, 1 << 9   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOF_OTYPER_OT8, 1 << 8   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOF_OTYPER_OT7, 1 << 7   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOF_OTYPER_OT6, 1 << 6   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOF_OTYPER_OT5, 1 << 5   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOF_OTYPER_OT4, 1 << 4   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOF_OTYPER_OT3, 1 << 3   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOF_OTYPER_OT2, 1 << 2   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOF_OTYPER_OT1, 1 << 1   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOF_OTYPER_OT0, 1 << 0   @ bitWidth 1 (Port x configuration bits y =  0..15)  
 
    .equ GPIOF_OSPEEDR, GPIOF_BASE + 0x8 @ (GPIO port output speed  register) 
        .equ GPIOF_OSPEEDR_OSPEEDR15_Shift, 30   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_OSPEEDR_OSPEEDR14_Shift, 28   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_OSPEEDR_OSPEEDR13_Shift, 26   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_OSPEEDR_OSPEEDR12_Shift, 24   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_OSPEEDR_OSPEEDR11_Shift, 22   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_OSPEEDR_OSPEEDR10_Shift, 20   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_OSPEEDR_OSPEEDR9_Shift, 18   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_OSPEEDR_OSPEEDR8_Shift, 16   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_OSPEEDR_OSPEEDR7_Shift, 14   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_OSPEEDR_OSPEEDR6_Shift, 12   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_OSPEEDR_OSPEEDR5_Shift, 10   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_OSPEEDR_OSPEEDR4_Shift, 8   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_OSPEEDR_OSPEEDR3_Shift, 6   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_OSPEEDR_OSPEEDR2_Shift, 4   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_OSPEEDR_OSPEEDR1_Shift, 2   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_OSPEEDR_OSPEEDR0_Shift, 0   @ bitWidth 2 (Port x configuration bits y =  0..15)  
 
    .equ GPIOF_PUPDR, GPIOF_BASE + 0xC @ (GPIO port pull-up/pull-down  register) 
        .equ GPIOF_PUPDR_PUPDR15_Shift, 30   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_PUPDR_PUPDR14_Shift, 28   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_PUPDR_PUPDR13_Shift, 26   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_PUPDR_PUPDR12_Shift, 24   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_PUPDR_PUPDR11_Shift, 22   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_PUPDR_PUPDR10_Shift, 20   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_PUPDR_PUPDR9_Shift, 18   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_PUPDR_PUPDR8_Shift, 16   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_PUPDR_PUPDR7_Shift, 14   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_PUPDR_PUPDR6_Shift, 12   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_PUPDR_PUPDR5_Shift, 10   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_PUPDR_PUPDR4_Shift, 8   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_PUPDR_PUPDR3_Shift, 6   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_PUPDR_PUPDR2_Shift, 4   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_PUPDR_PUPDR1_Shift, 2   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOF_PUPDR_PUPDR0_Shift, 0   @ bitWidth 2 (Port x configuration bits y =  0..15)  
 
    .equ GPIOF_IDR, GPIOF_BASE + 0x10 @ (GPIO port input data register) 
        .equ GPIOF_IDR_IDR15, 1 << 15   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOF_IDR_IDR14, 1 << 14   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOF_IDR_IDR13, 1 << 13   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOF_IDR_IDR12, 1 << 12   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOF_IDR_IDR11, 1 << 11   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOF_IDR_IDR10, 1 << 10   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOF_IDR_IDR9, 1 << 9   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOF_IDR_IDR8, 1 << 8   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOF_IDR_IDR7, 1 << 7   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOF_IDR_IDR6, 1 << 6   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOF_IDR_IDR5, 1 << 5   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOF_IDR_IDR4, 1 << 4   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOF_IDR_IDR3, 1 << 3   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOF_IDR_IDR2, 1 << 2   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOF_IDR_IDR1, 1 << 1   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOF_IDR_IDR0, 1 << 0   @ bitWidth 1 (Port input data y =  0..15)  
 
    .equ GPIOF_ODR, GPIOF_BASE + 0x14 @ (GPIO port output data register) 
        .equ GPIOF_ODR_ODR15, 1 << 15   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOF_ODR_ODR14, 1 << 14   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOF_ODR_ODR13, 1 << 13   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOF_ODR_ODR12, 1 << 12   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOF_ODR_ODR11, 1 << 11   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOF_ODR_ODR10, 1 << 10   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOF_ODR_ODR9, 1 << 9   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOF_ODR_ODR8, 1 << 8   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOF_ODR_ODR7, 1 << 7   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOF_ODR_ODR6, 1 << 6   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOF_ODR_ODR5, 1 << 5   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOF_ODR_ODR4, 1 << 4   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOF_ODR_ODR3, 1 << 3   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOF_ODR_ODR2, 1 << 2   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOF_ODR_ODR1, 1 << 1   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOF_ODR_ODR0, 1 << 0   @ bitWidth 1 (Port output data y =  0..15)  
 
    .equ GPIOF_BSRR, GPIOF_BASE + 0x18 @ (GPIO port bit set/reset  register) 
        .equ GPIOF_BSRR_BR15, 1 << 31   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOF_BSRR_BR14, 1 << 30   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOF_BSRR_BR13, 1 << 29   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOF_BSRR_BR12, 1 << 28   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOF_BSRR_BR11, 1 << 27   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOF_BSRR_BR10, 1 << 26   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOF_BSRR_BR9, 1 << 25   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOF_BSRR_BR8, 1 << 24   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOF_BSRR_BR7, 1 << 23   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOF_BSRR_BR6, 1 << 22   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOF_BSRR_BR5, 1 << 21   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOF_BSRR_BR4, 1 << 20   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOF_BSRR_BR3, 1 << 19   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOF_BSRR_BR2, 1 << 18   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOF_BSRR_BR1, 1 << 17   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOF_BSRR_BR0, 1 << 16   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOF_BSRR_BS15, 1 << 15   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOF_BSRR_BS14, 1 << 14   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOF_BSRR_BS13, 1 << 13   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOF_BSRR_BS12, 1 << 12   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOF_BSRR_BS11, 1 << 11   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOF_BSRR_BS10, 1 << 10   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOF_BSRR_BS9, 1 << 9   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOF_BSRR_BS8, 1 << 8   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOF_BSRR_BS7, 1 << 7   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOF_BSRR_BS6, 1 << 6   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOF_BSRR_BS5, 1 << 5   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOF_BSRR_BS4, 1 << 4   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOF_BSRR_BS3, 1 << 3   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOF_BSRR_BS2, 1 << 2   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOF_BSRR_BS1, 1 << 1   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOF_BSRR_BS0, 1 << 0   @ bitWidth 1 (Port x set bit y y=  0..15)  
 
    .equ GPIOF_LCKR, GPIOF_BASE + 0x1C @ (GPIO port configuration lock  register) 
        .equ GPIOF_LCKR_LCKK, 1 << 16   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOF_LCKR_LCK15, 1 << 15   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOF_LCKR_LCK14, 1 << 14   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOF_LCKR_LCK13, 1 << 13   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOF_LCKR_LCK12, 1 << 12   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOF_LCKR_LCK11, 1 << 11   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOF_LCKR_LCK10, 1 << 10   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOF_LCKR_LCK9, 1 << 9   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOF_LCKR_LCK8, 1 << 8   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOF_LCKR_LCK7, 1 << 7   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOF_LCKR_LCK6, 1 << 6   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOF_LCKR_LCK5, 1 << 5   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOF_LCKR_LCK4, 1 << 4   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOF_LCKR_LCK3, 1 << 3   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOF_LCKR_LCK2, 1 << 2   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOF_LCKR_LCK1, 1 << 1   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOF_LCKR_LCK0, 1 << 0   @ bitWidth 1 (Port x lock bit y y=  0..15)  
 
    .equ GPIOF_AFRL, GPIOF_BASE + 0x20 @ (GPIO alternate function low  register) 
        .equ GPIOF_AFRL_AFRL7_Shift, 28   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOF_AFRL_AFRL6_Shift, 24   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOF_AFRL_AFRL5_Shift, 20   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOF_AFRL_AFRL4_Shift, 16   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOF_AFRL_AFRL3_Shift, 12   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOF_AFRL_AFRL2_Shift, 8   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOF_AFRL_AFRL1_Shift, 4   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOF_AFRL_AFRL0_Shift, 0   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
 
    .equ GPIOF_AFRH, GPIOF_BASE + 0x24 @ (GPIO alternate function high  register) 
        .equ GPIOF_AFRH_AFRH15_Shift, 28   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOF_AFRH_AFRH14_Shift, 24   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOF_AFRH_AFRH13_Shift, 20   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOF_AFRH_AFRH12_Shift, 16   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOF_AFRH_AFRH11_Shift, 12   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOF_AFRH_AFRH10_Shift, 8   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOF_AFRH_AFRH9_Shift, 4   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOF_AFRH_AFRH8_Shift, 0   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
 

@=========================== GPIOG ===========================@
.equ GPIOG_BASE, 0x48001800 @ (General-purpose I/Os) 
    .equ GPIOG_MODER, GPIOG_BASE + 0x0 @ (GPIO port mode register) 
        .equ GPIOG_MODER_MODER15_Shift, 30   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOG_MODER_MODER14_Shift, 28   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOG_MODER_MODER13_Shift, 26   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOG_MODER_MODER12_Shift, 24   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOG_MODER_MODER11_Shift, 22   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOG_MODER_MODER10_Shift, 20   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOG_MODER_MODER9_Shift, 18   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOG_MODER_MODER8_Shift, 16   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOG_MODER_MODER7_Shift, 14   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOG_MODER_MODER6_Shift, 12   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOG_MODER_MODER5_Shift, 10   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOG_MODER_MODER4_Shift, 8   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOG_MODER_MODER3_Shift, 6   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOG_MODER_MODER2_Shift, 4   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOG_MODER_MODER1_Shift, 2   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOG_MODER_MODER0_Shift, 0   @ bitWidth 2 (Port x configuration bits y =  0..15)  
 
    .equ GPIOG_OTYPER, GPIOG_BASE + 0x4 @ (GPIO port output type register) 
        .equ GPIOG_OTYPER_OT15, 1 << 15   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOG_OTYPER_OT14, 1 << 14   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOG_OTYPER_OT13, 1 << 13   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOG_OTYPER_OT12, 1 << 12   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOG_OTYPER_OT11, 1 << 11   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOG_OTYPER_OT10, 1 << 10   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOG_OTYPER_OT9, 1 << 9   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOG_OTYPER_OT8, 1 << 8   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOG_OTYPER_OT7, 1 << 7   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOG_OTYPER_OT6, 1 << 6   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOG_OTYPER_OT5, 1 << 5   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOG_OTYPER_OT4, 1 << 4   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOG_OTYPER_OT3, 1 << 3   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOG_OTYPER_OT2, 1 << 2   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOG_OTYPER_OT1, 1 << 1   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOG_OTYPER_OT0, 1 << 0   @ bitWidth 1 (Port x configuration bits y =  0..15)  
 
    .equ GPIOG_OSPEEDR, GPIOG_BASE + 0x8 @ (GPIO port output speed  register) 
        .equ GPIOG_OSPEEDR_OSPEEDR15_Shift, 30   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOG_OSPEEDR_OSPEEDR14_Shift, 28   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOG_OSPEEDR_OSPEEDR13_Shift, 26   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOG_OSPEEDR_OSPEEDR12_Shift, 24   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOG_OSPEEDR_OSPEEDR11_Shift, 22   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOG_OSPEEDR_OSPEEDR10_Shift, 20   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOG_OSPEEDR_OSPEEDR9_Shift, 18   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOG_OSPEEDR_OSPEEDR8_Shift, 16   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOG_OSPEEDR_OSPEEDR7_Shift, 14   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOG_OSPEEDR_OSPEEDR6_Shift, 12   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOG_OSPEEDR_OSPEEDR5_Shift, 10   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOG_OSPEEDR_OSPEEDR4_Shift, 8   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOG_OSPEEDR_OSPEEDR3_Shift, 6   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOG_OSPEEDR_OSPEEDR2_Shift, 4   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOG_OSPEEDR_OSPEEDR1_Shift, 2   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOG_OSPEEDR_OSPEEDR0_Shift, 0   @ bitWidth 2 (Port x configuration bits y =  0..15)  
 
    .equ GPIOG_PUPDR, GPIOG_BASE + 0xC @ (GPIO port pull-up/pull-down  register) 
        .equ GPIOG_PUPDR_PUPDR15_Shift, 30   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOG_PUPDR_PUPDR14_Shift, 28   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOG_PUPDR_PUPDR13_Shift, 26   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOG_PUPDR_PUPDR12_Shift, 24   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOG_PUPDR_PUPDR11_Shift, 22   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOG_PUPDR_PUPDR10_Shift, 20   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOG_PUPDR_PUPDR9_Shift, 18   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOG_PUPDR_PUPDR8_Shift, 16   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOG_PUPDR_PUPDR7_Shift, 14   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOG_PUPDR_PUPDR6_Shift, 12   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOG_PUPDR_PUPDR5_Shift, 10   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOG_PUPDR_PUPDR4_Shift, 8   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOG_PUPDR_PUPDR3_Shift, 6   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOG_PUPDR_PUPDR2_Shift, 4   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOG_PUPDR_PUPDR1_Shift, 2   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOG_PUPDR_PUPDR0_Shift, 0   @ bitWidth 2 (Port x configuration bits y =  0..15)  
 
    .equ GPIOG_IDR, GPIOG_BASE + 0x10 @ (GPIO port input data register) 
        .equ GPIOG_IDR_IDR15, 1 << 15   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOG_IDR_IDR14, 1 << 14   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOG_IDR_IDR13, 1 << 13   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOG_IDR_IDR12, 1 << 12   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOG_IDR_IDR11, 1 << 11   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOG_IDR_IDR10, 1 << 10   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOG_IDR_IDR9, 1 << 9   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOG_IDR_IDR8, 1 << 8   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOG_IDR_IDR7, 1 << 7   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOG_IDR_IDR6, 1 << 6   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOG_IDR_IDR5, 1 << 5   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOG_IDR_IDR4, 1 << 4   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOG_IDR_IDR3, 1 << 3   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOG_IDR_IDR2, 1 << 2   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOG_IDR_IDR1, 1 << 1   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOG_IDR_IDR0, 1 << 0   @ bitWidth 1 (Port input data y =  0..15)  
 
    .equ GPIOG_ODR, GPIOG_BASE + 0x14 @ (GPIO port output data register) 
        .equ GPIOG_ODR_ODR15, 1 << 15   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOG_ODR_ODR14, 1 << 14   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOG_ODR_ODR13, 1 << 13   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOG_ODR_ODR12, 1 << 12   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOG_ODR_ODR11, 1 << 11   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOG_ODR_ODR10, 1 << 10   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOG_ODR_ODR9, 1 << 9   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOG_ODR_ODR8, 1 << 8   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOG_ODR_ODR7, 1 << 7   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOG_ODR_ODR6, 1 << 6   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOG_ODR_ODR5, 1 << 5   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOG_ODR_ODR4, 1 << 4   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOG_ODR_ODR3, 1 << 3   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOG_ODR_ODR2, 1 << 2   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOG_ODR_ODR1, 1 << 1   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOG_ODR_ODR0, 1 << 0   @ bitWidth 1 (Port output data y =  0..15)  
 
    .equ GPIOG_BSRR, GPIOG_BASE + 0x18 @ (GPIO port bit set/reset  register) 
        .equ GPIOG_BSRR_BR15, 1 << 31   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOG_BSRR_BR14, 1 << 30   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOG_BSRR_BR13, 1 << 29   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOG_BSRR_BR12, 1 << 28   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOG_BSRR_BR11, 1 << 27   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOG_BSRR_BR10, 1 << 26   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOG_BSRR_BR9, 1 << 25   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOG_BSRR_BR8, 1 << 24   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOG_BSRR_BR7, 1 << 23   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOG_BSRR_BR6, 1 << 22   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOG_BSRR_BR5, 1 << 21   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOG_BSRR_BR4, 1 << 20   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOG_BSRR_BR3, 1 << 19   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOG_BSRR_BR2, 1 << 18   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOG_BSRR_BR1, 1 << 17   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOG_BSRR_BR0, 1 << 16   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOG_BSRR_BS15, 1 << 15   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOG_BSRR_BS14, 1 << 14   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOG_BSRR_BS13, 1 << 13   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOG_BSRR_BS12, 1 << 12   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOG_BSRR_BS11, 1 << 11   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOG_BSRR_BS10, 1 << 10   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOG_BSRR_BS9, 1 << 9   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOG_BSRR_BS8, 1 << 8   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOG_BSRR_BS7, 1 << 7   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOG_BSRR_BS6, 1 << 6   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOG_BSRR_BS5, 1 << 5   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOG_BSRR_BS4, 1 << 4   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOG_BSRR_BS3, 1 << 3   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOG_BSRR_BS2, 1 << 2   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOG_BSRR_BS1, 1 << 1   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOG_BSRR_BS0, 1 << 0   @ bitWidth 1 (Port x set bit y y=  0..15)  
 
    .equ GPIOG_LCKR, GPIOG_BASE + 0x1C @ (GPIO port configuration lock  register) 
        .equ GPIOG_LCKR_LCKK, 1 << 16   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOG_LCKR_LCK15, 1 << 15   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOG_LCKR_LCK14, 1 << 14   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOG_LCKR_LCK13, 1 << 13   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOG_LCKR_LCK12, 1 << 12   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOG_LCKR_LCK11, 1 << 11   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOG_LCKR_LCK10, 1 << 10   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOG_LCKR_LCK9, 1 << 9   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOG_LCKR_LCK8, 1 << 8   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOG_LCKR_LCK7, 1 << 7   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOG_LCKR_LCK6, 1 << 6   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOG_LCKR_LCK5, 1 << 5   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOG_LCKR_LCK4, 1 << 4   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOG_LCKR_LCK3, 1 << 3   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOG_LCKR_LCK2, 1 << 2   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOG_LCKR_LCK1, 1 << 1   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOG_LCKR_LCK0, 1 << 0   @ bitWidth 1 (Port x lock bit y y=  0..15)  
 
    .equ GPIOG_AFRL, GPIOG_BASE + 0x20 @ (GPIO alternate function low  register) 
        .equ GPIOG_AFRL_AFRL7_Shift, 28   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOG_AFRL_AFRL6_Shift, 24   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOG_AFRL_AFRL5_Shift, 20   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOG_AFRL_AFRL4_Shift, 16   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOG_AFRL_AFRL3_Shift, 12   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOG_AFRL_AFRL2_Shift, 8   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOG_AFRL_AFRL1_Shift, 4   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOG_AFRL_AFRL0_Shift, 0   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
 
    .equ GPIOG_AFRH, GPIOG_BASE + 0x24 @ (GPIO alternate function high  register) 
        .equ GPIOG_AFRH_AFRH15_Shift, 28   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOG_AFRH_AFRH14_Shift, 24   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOG_AFRH_AFRH13_Shift, 20   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOG_AFRH_AFRH12_Shift, 16   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOG_AFRH_AFRH11_Shift, 12   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOG_AFRH_AFRH10_Shift, 8   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOG_AFRH_AFRH9_Shift, 4   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOG_AFRH_AFRH8_Shift, 0   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
 

@=========================== GPIOH ===========================@
.equ GPIOH_BASE, 0x48001C00 @ (General-purpose I/Os) 
    .equ GPIOH_MODER, GPIOH_BASE + 0x0 @ (GPIO port mode register) 
        .equ GPIOH_MODER_MODER15_Shift, 30   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOH_MODER_MODER14_Shift, 28   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOH_MODER_MODER13_Shift, 26   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOH_MODER_MODER12_Shift, 24   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOH_MODER_MODER11_Shift, 22   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOH_MODER_MODER10_Shift, 20   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOH_MODER_MODER9_Shift, 18   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOH_MODER_MODER8_Shift, 16   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOH_MODER_MODER7_Shift, 14   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOH_MODER_MODER6_Shift, 12   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOH_MODER_MODER5_Shift, 10   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOH_MODER_MODER4_Shift, 8   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOH_MODER_MODER3_Shift, 6   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOH_MODER_MODER2_Shift, 4   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOH_MODER_MODER1_Shift, 2   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOH_MODER_MODER0_Shift, 0   @ bitWidth 2 (Port x configuration bits y =  0..15)  
 
    .equ GPIOH_OTYPER, GPIOH_BASE + 0x4 @ (GPIO port output type register) 
        .equ GPIOH_OTYPER_OT15, 1 << 15   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOH_OTYPER_OT14, 1 << 14   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOH_OTYPER_OT13, 1 << 13   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOH_OTYPER_OT12, 1 << 12   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOH_OTYPER_OT11, 1 << 11   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOH_OTYPER_OT10, 1 << 10   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOH_OTYPER_OT9, 1 << 9   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOH_OTYPER_OT8, 1 << 8   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOH_OTYPER_OT7, 1 << 7   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOH_OTYPER_OT6, 1 << 6   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOH_OTYPER_OT5, 1 << 5   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOH_OTYPER_OT4, 1 << 4   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOH_OTYPER_OT3, 1 << 3   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOH_OTYPER_OT2, 1 << 2   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOH_OTYPER_OT1, 1 << 1   @ bitWidth 1 (Port x configuration bits y =  0..15)  
        .equ GPIOH_OTYPER_OT0, 1 << 0   @ bitWidth 1 (Port x configuration bits y =  0..15)  
 
    .equ GPIOH_OSPEEDR, GPIOH_BASE + 0x8 @ (GPIO port output speed  register) 
        .equ GPIOH_OSPEEDR_OSPEEDR15_Shift, 30   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOH_OSPEEDR_OSPEEDR14_Shift, 28   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOH_OSPEEDR_OSPEEDR13_Shift, 26   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOH_OSPEEDR_OSPEEDR12_Shift, 24   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOH_OSPEEDR_OSPEEDR11_Shift, 22   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOH_OSPEEDR_OSPEEDR10_Shift, 20   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOH_OSPEEDR_OSPEEDR9_Shift, 18   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOH_OSPEEDR_OSPEEDR8_Shift, 16   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOH_OSPEEDR_OSPEEDR7_Shift, 14   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOH_OSPEEDR_OSPEEDR6_Shift, 12   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOH_OSPEEDR_OSPEEDR5_Shift, 10   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOH_OSPEEDR_OSPEEDR4_Shift, 8   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOH_OSPEEDR_OSPEEDR3_Shift, 6   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOH_OSPEEDR_OSPEEDR2_Shift, 4   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOH_OSPEEDR_OSPEEDR1_Shift, 2   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOH_OSPEEDR_OSPEEDR0_Shift, 0   @ bitWidth 2 (Port x configuration bits y =  0..15)  
 
    .equ GPIOH_PUPDR, GPIOH_BASE + 0xC @ (GPIO port pull-up/pull-down  register) 
        .equ GPIOH_PUPDR_PUPDR15_Shift, 30   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOH_PUPDR_PUPDR14_Shift, 28   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOH_PUPDR_PUPDR13_Shift, 26   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOH_PUPDR_PUPDR12_Shift, 24   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOH_PUPDR_PUPDR11_Shift, 22   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOH_PUPDR_PUPDR10_Shift, 20   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOH_PUPDR_PUPDR9_Shift, 18   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOH_PUPDR_PUPDR8_Shift, 16   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOH_PUPDR_PUPDR7_Shift, 14   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOH_PUPDR_PUPDR6_Shift, 12   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOH_PUPDR_PUPDR5_Shift, 10   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOH_PUPDR_PUPDR4_Shift, 8   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOH_PUPDR_PUPDR3_Shift, 6   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOH_PUPDR_PUPDR2_Shift, 4   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOH_PUPDR_PUPDR1_Shift, 2   @ bitWidth 2 (Port x configuration bits y =  0..15)  
        .equ GPIOH_PUPDR_PUPDR0_Shift, 0   @ bitWidth 2 (Port x configuration bits y =  0..15)  
 
    .equ GPIOH_IDR, GPIOH_BASE + 0x10 @ (GPIO port input data register) 
        .equ GPIOH_IDR_IDR15, 1 << 15   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOH_IDR_IDR14, 1 << 14   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOH_IDR_IDR13, 1 << 13   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOH_IDR_IDR12, 1 << 12   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOH_IDR_IDR11, 1 << 11   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOH_IDR_IDR10, 1 << 10   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOH_IDR_IDR9, 1 << 9   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOH_IDR_IDR8, 1 << 8   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOH_IDR_IDR7, 1 << 7   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOH_IDR_IDR6, 1 << 6   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOH_IDR_IDR5, 1 << 5   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOH_IDR_IDR4, 1 << 4   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOH_IDR_IDR3, 1 << 3   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOH_IDR_IDR2, 1 << 2   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOH_IDR_IDR1, 1 << 1   @ bitWidth 1 (Port input data y =  0..15)  
        .equ GPIOH_IDR_IDR0, 1 << 0   @ bitWidth 1 (Port input data y =  0..15)  
 
    .equ GPIOH_ODR, GPIOH_BASE + 0x14 @ (GPIO port output data register) 
        .equ GPIOH_ODR_ODR15, 1 << 15   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOH_ODR_ODR14, 1 << 14   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOH_ODR_ODR13, 1 << 13   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOH_ODR_ODR12, 1 << 12   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOH_ODR_ODR11, 1 << 11   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOH_ODR_ODR10, 1 << 10   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOH_ODR_ODR9, 1 << 9   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOH_ODR_ODR8, 1 << 8   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOH_ODR_ODR7, 1 << 7   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOH_ODR_ODR6, 1 << 6   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOH_ODR_ODR5, 1 << 5   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOH_ODR_ODR4, 1 << 4   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOH_ODR_ODR3, 1 << 3   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOH_ODR_ODR2, 1 << 2   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOH_ODR_ODR1, 1 << 1   @ bitWidth 1 (Port output data y =  0..15)  
        .equ GPIOH_ODR_ODR0, 1 << 0   @ bitWidth 1 (Port output data y =  0..15)  
 
    .equ GPIOH_BSRR, GPIOH_BASE + 0x18 @ (GPIO port bit set/reset  register) 
        .equ GPIOH_BSRR_BR15, 1 << 31   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOH_BSRR_BR14, 1 << 30   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOH_BSRR_BR13, 1 << 29   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOH_BSRR_BR12, 1 << 28   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOH_BSRR_BR11, 1 << 27   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOH_BSRR_BR10, 1 << 26   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOH_BSRR_BR9, 1 << 25   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOH_BSRR_BR8, 1 << 24   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOH_BSRR_BR7, 1 << 23   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOH_BSRR_BR6, 1 << 22   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOH_BSRR_BR5, 1 << 21   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOH_BSRR_BR4, 1 << 20   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOH_BSRR_BR3, 1 << 19   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOH_BSRR_BR2, 1 << 18   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOH_BSRR_BR1, 1 << 17   @ bitWidth 1 (Port x reset bit y y =  0..15)  
        .equ GPIOH_BSRR_BR0, 1 << 16   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOH_BSRR_BS15, 1 << 15   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOH_BSRR_BS14, 1 << 14   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOH_BSRR_BS13, 1 << 13   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOH_BSRR_BS12, 1 << 12   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOH_BSRR_BS11, 1 << 11   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOH_BSRR_BS10, 1 << 10   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOH_BSRR_BS9, 1 << 9   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOH_BSRR_BS8, 1 << 8   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOH_BSRR_BS7, 1 << 7   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOH_BSRR_BS6, 1 << 6   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOH_BSRR_BS5, 1 << 5   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOH_BSRR_BS4, 1 << 4   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOH_BSRR_BS3, 1 << 3   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOH_BSRR_BS2, 1 << 2   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOH_BSRR_BS1, 1 << 1   @ bitWidth 1 (Port x set bit y y=  0..15)  
        .equ GPIOH_BSRR_BS0, 1 << 0   @ bitWidth 1 (Port x set bit y y=  0..15)  
 
    .equ GPIOH_LCKR, GPIOH_BASE + 0x1C @ (GPIO port configuration lock  register) 
        .equ GPIOH_LCKR_LCKK, 1 << 16   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOH_LCKR_LCK15, 1 << 15   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOH_LCKR_LCK14, 1 << 14   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOH_LCKR_LCK13, 1 << 13   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOH_LCKR_LCK12, 1 << 12   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOH_LCKR_LCK11, 1 << 11   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOH_LCKR_LCK10, 1 << 10   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOH_LCKR_LCK9, 1 << 9   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOH_LCKR_LCK8, 1 << 8   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOH_LCKR_LCK7, 1 << 7   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOH_LCKR_LCK6, 1 << 6   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOH_LCKR_LCK5, 1 << 5   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOH_LCKR_LCK4, 1 << 4   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOH_LCKR_LCK3, 1 << 3   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOH_LCKR_LCK2, 1 << 2   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOH_LCKR_LCK1, 1 << 1   @ bitWidth 1 (Port x lock bit y y=  0..15)  
        .equ GPIOH_LCKR_LCK0, 1 << 0   @ bitWidth 1 (Port x lock bit y y=  0..15)  
 
    .equ GPIOH_AFRL, GPIOH_BASE + 0x20 @ (GPIO alternate function low  register) 
        .equ GPIOH_AFRL_AFRL7_Shift, 28   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOH_AFRL_AFRL6_Shift, 24   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOH_AFRL_AFRL5_Shift, 20   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOH_AFRL_AFRL4_Shift, 16   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOH_AFRL_AFRL3_Shift, 12   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOH_AFRL_AFRL2_Shift, 8   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOH_AFRL_AFRL1_Shift, 4   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
        .equ GPIOH_AFRL_AFRL0_Shift, 0   @ bitWidth 4 (Alternate function selection for port x  bit y y = 0..7)  
 
    .equ GPIOH_AFRH, GPIOH_BASE + 0x24 @ (GPIO alternate function high  register) 
        .equ GPIOH_AFRH_AFRH15_Shift, 28   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOH_AFRH_AFRH14_Shift, 24   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOH_AFRH_AFRH13_Shift, 20   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOH_AFRH_AFRH12_Shift, 16   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOH_AFRH_AFRH11_Shift, 12   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOH_AFRH_AFRH10_Shift, 8   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOH_AFRH_AFRH9_Shift, 4   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
        .equ GPIOH_AFRH_AFRH8_Shift, 0   @ bitWidth 4 (Alternate function selection for port x  bit y y = 8..15)  
 

@=========================== TIM2 ===========================@
.equ TIM2_BASE, 0x40000000 @ (General-purpose-timers) 
    .equ TIM2_CR1, TIM2_BASE + 0x0 @ (control register 1) 
        .equ TIM2_CR1_CKD_Shift, 8   @ bitWidth 2 (Clock division)  
        .equ TIM2_CR1_ARPE, 1 << 7   @ bitWidth 1 (Auto-reload preload enable)  
        .equ TIM2_CR1_CMS_Shift, 5   @ bitWidth 2 (Center-aligned mode  selection)  
        .equ TIM2_CR1_DIR, 1 << 4   @ bitWidth 1 (Direction)  
        .equ TIM2_CR1_OPM, 1 << 3   @ bitWidth 1 (One-pulse mode)  
        .equ TIM2_CR1_URS, 1 << 2   @ bitWidth 1 (Update request source)  
        .equ TIM2_CR1_UDIS, 1 << 1   @ bitWidth 1 (Update disable)  
        .equ TIM2_CR1_CEN, 1 << 0   @ bitWidth 1 (Counter enable)  
 
    .equ TIM2_CR2, TIM2_BASE + 0x4 @ (control register 2) 
        .equ TIM2_CR2_TI1S, 1 << 7   @ bitWidth 1 (TI1 selection)  
        .equ TIM2_CR2_MMS_Shift, 4   @ bitWidth 3 (Master mode selection)  
        .equ TIM2_CR2_CCDS, 1 << 3   @ bitWidth 1 (Capture/compare DMA  selection)  
 
    .equ TIM2_SMCR, TIM2_BASE + 0x8 @ (slave mode control register) 
        .equ TIM2_SMCR_ETP, 1 << 15   @ bitWidth 1 (External trigger polarity)  
        .equ TIM2_SMCR_ECE, 1 << 14   @ bitWidth 1 (External clock enable)  
        .equ TIM2_SMCR_ETPS_Shift, 12   @ bitWidth 2 (External trigger prescaler)  
        .equ TIM2_SMCR_ETF_Shift, 8   @ bitWidth 4 (External trigger filter)  
        .equ TIM2_SMCR_MSM, 1 << 7   @ bitWidth 1 (Master/Slave mode)  
        .equ TIM2_SMCR_TS_Shift, 4   @ bitWidth 3 (Trigger selection)  
        .equ TIM2_SMCR_SMS_Shift, 0   @ bitWidth 3 (Slave mode selection)  
 
    .equ TIM2_DIER, TIM2_BASE + 0xC @ (DMA/Interrupt enable register) 
        .equ TIM2_DIER_TDE, 1 << 14   @ bitWidth 1 (Trigger DMA request enable)  
        .equ TIM2_DIER_COMDE, 1 << 13   @ bitWidth 1 (Reserved)  
        .equ TIM2_DIER_CC4DE, 1 << 12   @ bitWidth 1 (Capture/Compare 4 DMA request  enable)  
        .equ TIM2_DIER_CC3DE, 1 << 11   @ bitWidth 1 (Capture/Compare 3 DMA request  enable)  
        .equ TIM2_DIER_CC2DE, 1 << 10   @ bitWidth 1 (Capture/Compare 2 DMA request  enable)  
        .equ TIM2_DIER_CC1DE, 1 << 9   @ bitWidth 1 (Capture/Compare 1 DMA request  enable)  
        .equ TIM2_DIER_UDE, 1 << 8   @ bitWidth 1 (Update DMA request enable)  
        .equ TIM2_DIER_TIE, 1 << 6   @ bitWidth 1 (Trigger interrupt enable)  
        .equ TIM2_DIER_CC4IE, 1 << 4   @ bitWidth 1 (Capture/Compare 4 interrupt  enable)  
        .equ TIM2_DIER_CC3IE, 1 << 3   @ bitWidth 1 (Capture/Compare 3 interrupt  enable)  
        .equ TIM2_DIER_CC2IE, 1 << 2   @ bitWidth 1 (Capture/Compare 2 interrupt  enable)  
        .equ TIM2_DIER_CC1IE, 1 << 1   @ bitWidth 1 (Capture/Compare 1 interrupt  enable)  
        .equ TIM2_DIER_UIE, 1 << 0   @ bitWidth 1 (Update interrupt enable)  
 
    .equ TIM2_SR, TIM2_BASE + 0x10 @ (status register) 
        .equ TIM2_SR_CC4OF, 1 << 12   @ bitWidth 1 (Capture/Compare 4 overcapture  flag)  
        .equ TIM2_SR_CC3OF, 1 << 11   @ bitWidth 1 (Capture/Compare 3 overcapture  flag)  
        .equ TIM2_SR_CC2OF, 1 << 10   @ bitWidth 1 (Capture/compare 2 overcapture  flag)  
        .equ TIM2_SR_CC1OF, 1 << 9   @ bitWidth 1 (Capture/Compare 1 overcapture  flag)  
        .equ TIM2_SR_TIF, 1 << 6   @ bitWidth 1 (Trigger interrupt flag)  
        .equ TIM2_SR_CC4IF, 1 << 4   @ bitWidth 1 (Capture/Compare 4 interrupt  flag)  
        .equ TIM2_SR_CC3IF, 1 << 3   @ bitWidth 1 (Capture/Compare 3 interrupt  flag)  
        .equ TIM2_SR_CC2IF, 1 << 2   @ bitWidth 1 (Capture/Compare 2 interrupt  flag)  
        .equ TIM2_SR_CC1IF, 1 << 1   @ bitWidth 1 (Capture/compare 1 interrupt  flag)  
        .equ TIM2_SR_UIF, 1 << 0   @ bitWidth 1 (Update interrupt flag)  
 
    .equ TIM2_EGR, TIM2_BASE + 0x14 @ (event generation register) 
        .equ TIM2_EGR_TG, 1 << 6   @ bitWidth 1 (Trigger generation)  
        .equ TIM2_EGR_CC4G, 1 << 4   @ bitWidth 1 (Capture/compare 4  generation)  
        .equ TIM2_EGR_CC3G, 1 << 3   @ bitWidth 1 (Capture/compare 3  generation)  
        .equ TIM2_EGR_CC2G, 1 << 2   @ bitWidth 1 (Capture/compare 2  generation)  
        .equ TIM2_EGR_CC1G, 1 << 1   @ bitWidth 1 (Capture/compare 1  generation)  
        .equ TIM2_EGR_UG, 1 << 0   @ bitWidth 1 (Update generation)  
 
    .equ TIM2_CCMR1_Output, TIM2_BASE + 0x18 @ (capture/compare mode register 1 output  mode) 
        .equ TIM2_CCMR1_Output_OC2CE, 1 << 15   @ bitWidth 1 (Output compare 2 clear  enable)  
        .equ TIM2_CCMR1_Output_OC2M_Shift, 12   @ bitWidth 3 (Output compare 2 mode)  
        .equ TIM2_CCMR1_Output_OC2PE, 1 << 11   @ bitWidth 1 (Output compare 2 preload  enable)  
        .equ TIM2_CCMR1_Output_OC2FE, 1 << 10   @ bitWidth 1 (Output compare 2 fast  enable)  
        .equ TIM2_CCMR1_Output_CC2S_Shift, 8   @ bitWidth 2 (Capture/Compare 2  selection)  
        .equ TIM2_CCMR1_Output_OC1CE, 1 << 7   @ bitWidth 1 (Output compare 1 clear  enable)  
        .equ TIM2_CCMR1_Output_OC1M_Shift, 4   @ bitWidth 3 (Output compare 1 mode)  
        .equ TIM2_CCMR1_Output_OC1PE, 1 << 3   @ bitWidth 1 (Output compare 1 preload  enable)  
        .equ TIM2_CCMR1_Output_OC1FE, 1 << 2   @ bitWidth 1 (Output compare 1 fast  enable)  
        .equ TIM2_CCMR1_Output_CC1S_Shift, 0   @ bitWidth 2 (Capture/Compare 1  selection)  
 
    .equ TIM2_CCMR1_Input, TIM2_BASE + 0x18 @ (capture/compare mode register 1 input  mode) 
        .equ TIM2_CCMR1_Input_IC2F_Shift, 12   @ bitWidth 4 (Input capture 2 filter)  
        .equ TIM2_CCMR1_Input_IC2PSC_Shift, 10   @ bitWidth 2 (Input capture 2 prescaler)  
        .equ TIM2_CCMR1_Input_CC2S_Shift, 8   @ bitWidth 2 (Capture/compare 2  selection)  
        .equ TIM2_CCMR1_Input_IC1F_Shift, 4   @ bitWidth 4 (Input capture 1 filter)  
        .equ TIM2_CCMR1_Input_IC1PSC_Shift, 2   @ bitWidth 2 (Input capture 1 prescaler)  
        .equ TIM2_CCMR1_Input_CC1S_Shift, 0   @ bitWidth 2 (Capture/Compare 1  selection)  
 
    .equ TIM2_CCMR2_Output, TIM2_BASE + 0x1C @ (capture/compare mode register 2 output  mode) 
        .equ TIM2_CCMR2_Output_OC4CE, 1 << 15   @ bitWidth 1 (Output compare 4 clear  enable)  
        .equ TIM2_CCMR2_Output_OC4M_Shift, 12   @ bitWidth 3 (Output compare 4 mode)  
        .equ TIM2_CCMR2_Output_OC4PE, 1 << 11   @ bitWidth 1 (Output compare 4 preload  enable)  
        .equ TIM2_CCMR2_Output_OC4FE, 1 << 10   @ bitWidth 1 (Output compare 4 fast  enable)  
        .equ TIM2_CCMR2_Output_CC4S_Shift, 8   @ bitWidth 2 (Capture/Compare 4  selection)  
        .equ TIM2_CCMR2_Output_OC3CE, 1 << 7   @ bitWidth 1 (Output compare 3 clear  enable)  
        .equ TIM2_CCMR2_Output_OC3M_Shift, 4   @ bitWidth 3 (Output compare 3 mode)  
        .equ TIM2_CCMR2_Output_OC3PE, 1 << 3   @ bitWidth 1 (Output compare 3 preload  enable)  
        .equ TIM2_CCMR2_Output_OC3FE, 1 << 2   @ bitWidth 1 (Output compare 3 fast  enable)  
        .equ TIM2_CCMR2_Output_CC3S_Shift, 0   @ bitWidth 2 (Capture/Compare 3  selection)  
 
    .equ TIM2_CCMR2_Input, TIM2_BASE + 0x1C @ (capture/compare mode register 2 input  mode) 
        .equ TIM2_CCMR2_Input_IC4F_Shift, 12   @ bitWidth 4 (Input capture 4 filter)  
        .equ TIM2_CCMR2_Input_IC4PSC_Shift, 10   @ bitWidth 2 (Input capture 4 prescaler)  
        .equ TIM2_CCMR2_Input_CC4S_Shift, 8   @ bitWidth 2 (Capture/Compare 4  selection)  
        .equ TIM2_CCMR2_Input_IC3F_Shift, 4   @ bitWidth 4 (Input capture 3 filter)  
        .equ TIM2_CCMR2_Input_IC3PSC_Shift, 2   @ bitWidth 2 (Input capture 3 prescaler)  
        .equ TIM2_CCMR2_Input_CC3S_Shift, 0   @ bitWidth 2 (Capture/Compare 3  selection)  
 
    .equ TIM2_CCER, TIM2_BASE + 0x20 @ (capture/compare enable  register) 
        .equ TIM2_CCER_CC4NP, 1 << 15   @ bitWidth 1 (Capture/Compare 4 output  Polarity)  
        .equ TIM2_CCER_CC4P, 1 << 13   @ bitWidth 1 (Capture/Compare 3 output  Polarity)  
        .equ TIM2_CCER_CC4E, 1 << 12   @ bitWidth 1 (Capture/Compare 4 output  enable)  
        .equ TIM2_CCER_CC3NP, 1 << 11   @ bitWidth 1 (Capture/Compare 3 output  Polarity)  
        .equ TIM2_CCER_CC3P, 1 << 9   @ bitWidth 1 (Capture/Compare 3 output  Polarity)  
        .equ TIM2_CCER_CC3E, 1 << 8   @ bitWidth 1 (Capture/Compare 3 output  enable)  
        .equ TIM2_CCER_CC2NP, 1 << 7   @ bitWidth 1 (Capture/Compare 2 output  Polarity)  
        .equ TIM2_CCER_CC2P, 1 << 5   @ bitWidth 1 (Capture/Compare 2 output  Polarity)  
        .equ TIM2_CCER_CC2E, 1 << 4   @ bitWidth 1 (Capture/Compare 2 output  enable)  
        .equ TIM2_CCER_CC1NP, 1 << 3   @ bitWidth 1 (Capture/Compare 1 output  Polarity)  
        .equ TIM2_CCER_CC1P, 1 << 1   @ bitWidth 1 (Capture/Compare 1 output  Polarity)  
        .equ TIM2_CCER_CC1E, 1 << 0   @ bitWidth 1 (Capture/Compare 1 output  enable)  
 
    .equ TIM2_CNT, TIM2_BASE + 0x24 @ (counter) 
        .equ TIM2_CNT_CNT_H_Shift, 16   @ bitWidth 16 (High counter value TIM2  only)  
        .equ TIM2_CNT_CNT_L_Shift, 0   @ bitWidth 16 (Low counter value)  
 
    .equ TIM2_PSC, TIM2_BASE + 0x28 @ (prescaler) 
        .equ TIM2_PSC_PSC_Shift, 0   @ bitWidth 16 (Prescaler value)  
 
    .equ TIM2_ARR, TIM2_BASE + 0x2C @ (auto-reload register) 
        .equ TIM2_ARR_ARR_H_Shift, 16   @ bitWidth 16 (High Auto-reload value TIM2  only)  
        .equ TIM2_ARR_ARR_L_Shift, 0   @ bitWidth 16 (Low Auto-reload value)  
 
    .equ TIM2_CCR1, TIM2_BASE + 0x34 @ (capture/compare register 1) 
        .equ TIM2_CCR1_CCR1_H_Shift, 16   @ bitWidth 16 (High Capture/Compare 1 value TIM2  only)  
        .equ TIM2_CCR1_CCR1_L_Shift, 0   @ bitWidth 16 (Low Capture/Compare 1  value)  
 
    .equ TIM2_CCR2, TIM2_BASE + 0x38 @ (capture/compare register 2) 
        .equ TIM2_CCR2_CCR2_H_Shift, 16   @ bitWidth 16 (High Capture/Compare 2 value TIM2  only)  
        .equ TIM2_CCR2_CCR2_L_Shift, 0   @ bitWidth 16 (Low Capture/Compare 2  value)  
 
    .equ TIM2_CCR3, TIM2_BASE + 0x3C @ (capture/compare register 3) 
        .equ TIM2_CCR3_CCR3_H_Shift, 16   @ bitWidth 16 (High Capture/Compare value TIM2  only)  
        .equ TIM2_CCR3_CCR3_L_Shift, 0   @ bitWidth 16 (Low Capture/Compare value)  
 
    .equ TIM2_CCR4, TIM2_BASE + 0x40 @ (capture/compare register 4) 
        .equ TIM2_CCR4_CCR4_H_Shift, 16   @ bitWidth 16 (High Capture/Compare value TIM2  only)  
        .equ TIM2_CCR4_CCR4_L_Shift, 0   @ bitWidth 16 (Low Capture/Compare value)  
 
    .equ TIM2_DCR, TIM2_BASE + 0x48 @ (DMA control register) 
        .equ TIM2_DCR_DBL_Shift, 8   @ bitWidth 5 (DMA burst length)  
        .equ TIM2_DCR_DBA_Shift, 0   @ bitWidth 5 (DMA base address)  
 
    .equ TIM2_DMAR, TIM2_BASE + 0x4C @ (DMA address for full transfer) 
        .equ TIM2_DMAR_DMAB_Shift, 0   @ bitWidth 16 (DMA register for burst  accesses)  
 
    .equ TIM2_OR, TIM2_BASE + 0x50 @ (TIM2 option register) 
        .equ TIM2_OR_ETR_RMP_Shift, 0   @ bitWidth 3 (Timer2 ETR remap)  
        .equ TIM2_OR_TI4_RMP_Shift, 3   @ bitWidth 2 (Internal trigger)  
 

@=========================== TIM3 ===========================@
.equ TIM3_BASE, 0x40000400 @ (General-purpose-timers) 
    .equ TIM3_CR1, TIM3_BASE + 0x0 @ (control register 1) 
        .equ TIM3_CR1_CKD_Shift, 8   @ bitWidth 2 (Clock division)  
        .equ TIM3_CR1_ARPE, 1 << 7   @ bitWidth 1 (Auto-reload preload enable)  
        .equ TIM3_CR1_CMS_Shift, 5   @ bitWidth 2 (Center-aligned mode  selection)  
        .equ TIM3_CR1_DIR, 1 << 4   @ bitWidth 1 (Direction)  
        .equ TIM3_CR1_OPM, 1 << 3   @ bitWidth 1 (One-pulse mode)  
        .equ TIM3_CR1_URS, 1 << 2   @ bitWidth 1 (Update request source)  
        .equ TIM3_CR1_UDIS, 1 << 1   @ bitWidth 1 (Update disable)  
        .equ TIM3_CR1_CEN, 1 << 0   @ bitWidth 1 (Counter enable)  
 
    .equ TIM3_CR2, TIM3_BASE + 0x4 @ (control register 2) 
        .equ TIM3_CR2_TI1S, 1 << 7   @ bitWidth 1 (TI1 selection)  
        .equ TIM3_CR2_MMS_Shift, 4   @ bitWidth 3 (Master mode selection)  
        .equ TIM3_CR2_CCDS, 1 << 3   @ bitWidth 1 (Capture/compare DMA  selection)  
 
    .equ TIM3_SMCR, TIM3_BASE + 0x8 @ (slave mode control register) 
        .equ TIM3_SMCR_ETP, 1 << 15   @ bitWidth 1 (External trigger polarity)  
        .equ TIM3_SMCR_ECE, 1 << 14   @ bitWidth 1 (External clock enable)  
        .equ TIM3_SMCR_ETPS_Shift, 12   @ bitWidth 2 (External trigger prescaler)  
        .equ TIM3_SMCR_ETF_Shift, 8   @ bitWidth 4 (External trigger filter)  
        .equ TIM3_SMCR_MSM, 1 << 7   @ bitWidth 1 (Master/Slave mode)  
        .equ TIM3_SMCR_TS_Shift, 4   @ bitWidth 3 (Trigger selection)  
        .equ TIM3_SMCR_SMS_Shift, 0   @ bitWidth 3 (Slave mode selection)  
 
    .equ TIM3_DIER, TIM3_BASE + 0xC @ (DMA/Interrupt enable register) 
        .equ TIM3_DIER_TDE, 1 << 14   @ bitWidth 1 (Trigger DMA request enable)  
        .equ TIM3_DIER_COMDE, 1 << 13   @ bitWidth 1 (Reserved)  
        .equ TIM3_DIER_CC4DE, 1 << 12   @ bitWidth 1 (Capture/Compare 4 DMA request  enable)  
        .equ TIM3_DIER_CC3DE, 1 << 11   @ bitWidth 1 (Capture/Compare 3 DMA request  enable)  
        .equ TIM3_DIER_CC2DE, 1 << 10   @ bitWidth 1 (Capture/Compare 2 DMA request  enable)  
        .equ TIM3_DIER_CC1DE, 1 << 9   @ bitWidth 1 (Capture/Compare 1 DMA request  enable)  
        .equ TIM3_DIER_UDE, 1 << 8   @ bitWidth 1 (Update DMA request enable)  
        .equ TIM3_DIER_TIE, 1 << 6   @ bitWidth 1 (Trigger interrupt enable)  
        .equ TIM3_DIER_CC4IE, 1 << 4   @ bitWidth 1 (Capture/Compare 4 interrupt  enable)  
        .equ TIM3_DIER_CC3IE, 1 << 3   @ bitWidth 1 (Capture/Compare 3 interrupt  enable)  
        .equ TIM3_DIER_CC2IE, 1 << 2   @ bitWidth 1 (Capture/Compare 2 interrupt  enable)  
        .equ TIM3_DIER_CC1IE, 1 << 1   @ bitWidth 1 (Capture/Compare 1 interrupt  enable)  
        .equ TIM3_DIER_UIE, 1 << 0   @ bitWidth 1 (Update interrupt enable)  
 
    .equ TIM3_SR, TIM3_BASE + 0x10 @ (status register) 
        .equ TIM3_SR_CC4OF, 1 << 12   @ bitWidth 1 (Capture/Compare 4 overcapture  flag)  
        .equ TIM3_SR_CC3OF, 1 << 11   @ bitWidth 1 (Capture/Compare 3 overcapture  flag)  
        .equ TIM3_SR_CC2OF, 1 << 10   @ bitWidth 1 (Capture/compare 2 overcapture  flag)  
        .equ TIM3_SR_CC1OF, 1 << 9   @ bitWidth 1 (Capture/Compare 1 overcapture  flag)  
        .equ TIM3_SR_TIF, 1 << 6   @ bitWidth 1 (Trigger interrupt flag)  
        .equ TIM3_SR_CC4IF, 1 << 4   @ bitWidth 1 (Capture/Compare 4 interrupt  flag)  
        .equ TIM3_SR_CC3IF, 1 << 3   @ bitWidth 1 (Capture/Compare 3 interrupt  flag)  
        .equ TIM3_SR_CC2IF, 1 << 2   @ bitWidth 1 (Capture/Compare 2 interrupt  flag)  
        .equ TIM3_SR_CC1IF, 1 << 1   @ bitWidth 1 (Capture/compare 1 interrupt  flag)  
        .equ TIM3_SR_UIF, 1 << 0   @ bitWidth 1 (Update interrupt flag)  
 
    .equ TIM3_EGR, TIM3_BASE + 0x14 @ (event generation register) 
        .equ TIM3_EGR_TG, 1 << 6   @ bitWidth 1 (Trigger generation)  
        .equ TIM3_EGR_CC4G, 1 << 4   @ bitWidth 1 (Capture/compare 4  generation)  
        .equ TIM3_EGR_CC3G, 1 << 3   @ bitWidth 1 (Capture/compare 3  generation)  
        .equ TIM3_EGR_CC2G, 1 << 2   @ bitWidth 1 (Capture/compare 2  generation)  
        .equ TIM3_EGR_CC1G, 1 << 1   @ bitWidth 1 (Capture/compare 1  generation)  
        .equ TIM3_EGR_UG, 1 << 0   @ bitWidth 1 (Update generation)  
 
    .equ TIM3_CCMR1_Output, TIM3_BASE + 0x18 @ (capture/compare mode register 1 output  mode) 
        .equ TIM3_CCMR1_Output_OC2CE, 1 << 15   @ bitWidth 1 (Output compare 2 clear  enable)  
        .equ TIM3_CCMR1_Output_OC2M_Shift, 12   @ bitWidth 3 (Output compare 2 mode)  
        .equ TIM3_CCMR1_Output_OC2PE, 1 << 11   @ bitWidth 1 (Output compare 2 preload  enable)  
        .equ TIM3_CCMR1_Output_OC2FE, 1 << 10   @ bitWidth 1 (Output compare 2 fast  enable)  
        .equ TIM3_CCMR1_Output_CC2S_Shift, 8   @ bitWidth 2 (Capture/Compare 2  selection)  
        .equ TIM3_CCMR1_Output_OC1CE, 1 << 7   @ bitWidth 1 (Output compare 1 clear  enable)  
        .equ TIM3_CCMR1_Output_OC1M_Shift, 4   @ bitWidth 3 (Output compare 1 mode)  
        .equ TIM3_CCMR1_Output_OC1PE, 1 << 3   @ bitWidth 1 (Output compare 1 preload  enable)  
        .equ TIM3_CCMR1_Output_OC1FE, 1 << 2   @ bitWidth 1 (Output compare 1 fast  enable)  
        .equ TIM3_CCMR1_Output_CC1S_Shift, 0   @ bitWidth 2 (Capture/Compare 1  selection)  
 
    .equ TIM3_CCMR1_Input, TIM3_BASE + 0x18 @ (capture/compare mode register 1 input  mode) 
        .equ TIM3_CCMR1_Input_IC2F_Shift, 12   @ bitWidth 4 (Input capture 2 filter)  
        .equ TIM3_CCMR1_Input_IC2PSC_Shift, 10   @ bitWidth 2 (Input capture 2 prescaler)  
        .equ TIM3_CCMR1_Input_CC2S_Shift, 8   @ bitWidth 2 (Capture/compare 2  selection)  
        .equ TIM3_CCMR1_Input_IC1F_Shift, 4   @ bitWidth 4 (Input capture 1 filter)  
        .equ TIM3_CCMR1_Input_IC1PSC_Shift, 2   @ bitWidth 2 (Input capture 1 prescaler)  
        .equ TIM3_CCMR1_Input_CC1S_Shift, 0   @ bitWidth 2 (Capture/Compare 1  selection)  
 
    .equ TIM3_CCMR2_Output, TIM3_BASE + 0x1C @ (capture/compare mode register 2 output  mode) 
        .equ TIM3_CCMR2_Output_OC4CE, 1 << 15   @ bitWidth 1 (Output compare 4 clear  enable)  
        .equ TIM3_CCMR2_Output_OC4M_Shift, 12   @ bitWidth 3 (Output compare 4 mode)  
        .equ TIM3_CCMR2_Output_OC4PE, 1 << 11   @ bitWidth 1 (Output compare 4 preload  enable)  
        .equ TIM3_CCMR2_Output_OC4FE, 1 << 10   @ bitWidth 1 (Output compare 4 fast  enable)  
        .equ TIM3_CCMR2_Output_CC4S_Shift, 8   @ bitWidth 2 (Capture/Compare 4  selection)  
        .equ TIM3_CCMR2_Output_OC3CE, 1 << 7   @ bitWidth 1 (Output compare 3 clear  enable)  
        .equ TIM3_CCMR2_Output_OC3M_Shift, 4   @ bitWidth 3 (Output compare 3 mode)  
        .equ TIM3_CCMR2_Output_OC3PE, 1 << 3   @ bitWidth 1 (Output compare 3 preload  enable)  
        .equ TIM3_CCMR2_Output_OC3FE, 1 << 2   @ bitWidth 1 (Output compare 3 fast  enable)  
        .equ TIM3_CCMR2_Output_CC3S_Shift, 0   @ bitWidth 2 (Capture/Compare 3  selection)  
 
    .equ TIM3_CCMR2_Input, TIM3_BASE + 0x1C @ (capture/compare mode register 2 input  mode) 
        .equ TIM3_CCMR2_Input_IC4F_Shift, 12   @ bitWidth 4 (Input capture 4 filter)  
        .equ TIM3_CCMR2_Input_IC4PSC_Shift, 10   @ bitWidth 2 (Input capture 4 prescaler)  
        .equ TIM3_CCMR2_Input_CC4S_Shift, 8   @ bitWidth 2 (Capture/Compare 4  selection)  
        .equ TIM3_CCMR2_Input_IC3F_Shift, 4   @ bitWidth 4 (Input capture 3 filter)  
        .equ TIM3_CCMR2_Input_IC3PSC_Shift, 2   @ bitWidth 2 (Input capture 3 prescaler)  
        .equ TIM3_CCMR2_Input_CC3S_Shift, 0   @ bitWidth 2 (Capture/Compare 3  selection)  
 
    .equ TIM3_CCER, TIM3_BASE + 0x20 @ (capture/compare enable  register) 
        .equ TIM3_CCER_CC4NP, 1 << 15   @ bitWidth 1 (Capture/Compare 4 output  Polarity)  
        .equ TIM3_CCER_CC4P, 1 << 13   @ bitWidth 1 (Capture/Compare 3 output  Polarity)  
        .equ TIM3_CCER_CC4E, 1 << 12   @ bitWidth 1 (Capture/Compare 4 output  enable)  
        .equ TIM3_CCER_CC3NP, 1 << 11   @ bitWidth 1 (Capture/Compare 3 output  Polarity)  
        .equ TIM3_CCER_CC3P, 1 << 9   @ bitWidth 1 (Capture/Compare 3 output  Polarity)  
        .equ TIM3_CCER_CC3E, 1 << 8   @ bitWidth 1 (Capture/Compare 3 output  enable)  
        .equ TIM3_CCER_CC2NP, 1 << 7   @ bitWidth 1 (Capture/Compare 2 output  Polarity)  
        .equ TIM3_CCER_CC2P, 1 << 5   @ bitWidth 1 (Capture/Compare 2 output  Polarity)  
        .equ TIM3_CCER_CC2E, 1 << 4   @ bitWidth 1 (Capture/Compare 2 output  enable)  
        .equ TIM3_CCER_CC1NP, 1 << 3   @ bitWidth 1 (Capture/Compare 1 output  Polarity)  
        .equ TIM3_CCER_CC1P, 1 << 1   @ bitWidth 1 (Capture/Compare 1 output  Polarity)  
        .equ TIM3_CCER_CC1E, 1 << 0   @ bitWidth 1 (Capture/Compare 1 output  enable)  
 
    .equ TIM3_CNT, TIM3_BASE + 0x24 @ (counter) 
        .equ TIM3_CNT_CNT_H_Shift, 16   @ bitWidth 16 (High counter value TIM2  only)  
        .equ TIM3_CNT_CNT_L_Shift, 0   @ bitWidth 16 (Low counter value)  
 
    .equ TIM3_PSC, TIM3_BASE + 0x28 @ (prescaler) 
        .equ TIM3_PSC_PSC_Shift, 0   @ bitWidth 16 (Prescaler value)  
 
    .equ TIM3_ARR, TIM3_BASE + 0x2C @ (auto-reload register) 
        .equ TIM3_ARR_ARR_H_Shift, 16   @ bitWidth 16 (High Auto-reload value TIM2  only)  
        .equ TIM3_ARR_ARR_L_Shift, 0   @ bitWidth 16 (Low Auto-reload value)  
 
    .equ TIM3_CCR1, TIM3_BASE + 0x34 @ (capture/compare register 1) 
        .equ TIM3_CCR1_CCR1_H_Shift, 16   @ bitWidth 16 (High Capture/Compare 1 value TIM2  only)  
        .equ TIM3_CCR1_CCR1_L_Shift, 0   @ bitWidth 16 (Low Capture/Compare 1  value)  
 
    .equ TIM3_CCR2, TIM3_BASE + 0x38 @ (capture/compare register 2) 
        .equ TIM3_CCR2_CCR2_H_Shift, 16   @ bitWidth 16 (High Capture/Compare 2 value TIM2  only)  
        .equ TIM3_CCR2_CCR2_L_Shift, 0   @ bitWidth 16 (Low Capture/Compare 2  value)  
 
    .equ TIM3_CCR3, TIM3_BASE + 0x3C @ (capture/compare register 3) 
        .equ TIM3_CCR3_CCR3_H_Shift, 16   @ bitWidth 16 (High Capture/Compare value TIM2  only)  
        .equ TIM3_CCR3_CCR3_L_Shift, 0   @ bitWidth 16 (Low Capture/Compare value)  
 
    .equ TIM3_CCR4, TIM3_BASE + 0x40 @ (capture/compare register 4) 
        .equ TIM3_CCR4_CCR4_H_Shift, 16   @ bitWidth 16 (High Capture/Compare value TIM2  only)  
        .equ TIM3_CCR4_CCR4_L_Shift, 0   @ bitWidth 16 (Low Capture/Compare value)  
 
    .equ TIM3_DCR, TIM3_BASE + 0x48 @ (DMA control register) 
        .equ TIM3_DCR_DBL_Shift, 8   @ bitWidth 5 (DMA burst length)  
        .equ TIM3_DCR_DBA_Shift, 0   @ bitWidth 5 (DMA base address)  
 
    .equ TIM3_DMAR, TIM3_BASE + 0x4C @ (DMA address for full transfer) 
        .equ TIM3_DMAR_DMAB_Shift, 0   @ bitWidth 16 (DMA register for burst  accesses)  
 
    .equ TIM3_OR, TIM3_BASE + 0x50 @ (TIM2 option register) 
        .equ TIM3_OR_ETR_RMP_Shift, 0   @ bitWidth 3 (Timer2 ETR remap)  
        .equ TIM3_OR_TI4_RMP_Shift, 3   @ bitWidth 2 (Internal trigger)  
 

@=========================== TIM4 ===========================@
.equ TIM4_BASE, 0x40000800 @ (General-purpose-timers) 
    .equ TIM4_CR1, TIM4_BASE + 0x0 @ (control register 1) 
        .equ TIM4_CR1_CKD_Shift, 8   @ bitWidth 2 (Clock division)  
        .equ TIM4_CR1_ARPE, 1 << 7   @ bitWidth 1 (Auto-reload preload enable)  
        .equ TIM4_CR1_CMS_Shift, 5   @ bitWidth 2 (Center-aligned mode  selection)  
        .equ TIM4_CR1_DIR, 1 << 4   @ bitWidth 1 (Direction)  
        .equ TIM4_CR1_OPM, 1 << 3   @ bitWidth 1 (One-pulse mode)  
        .equ TIM4_CR1_URS, 1 << 2   @ bitWidth 1 (Update request source)  
        .equ TIM4_CR1_UDIS, 1 << 1   @ bitWidth 1 (Update disable)  
        .equ TIM4_CR1_CEN, 1 << 0   @ bitWidth 1 (Counter enable)  
 
    .equ TIM4_CR2, TIM4_BASE + 0x4 @ (control register 2) 
        .equ TIM4_CR2_TI1S, 1 << 7   @ bitWidth 1 (TI1 selection)  
        .equ TIM4_CR2_MMS_Shift, 4   @ bitWidth 3 (Master mode selection)  
        .equ TIM4_CR2_CCDS, 1 << 3   @ bitWidth 1 (Capture/compare DMA  selection)  
 
    .equ TIM4_SMCR, TIM4_BASE + 0x8 @ (slave mode control register) 
        .equ TIM4_SMCR_ETP, 1 << 15   @ bitWidth 1 (External trigger polarity)  
        .equ TIM4_SMCR_ECE, 1 << 14   @ bitWidth 1 (External clock enable)  
        .equ TIM4_SMCR_ETPS_Shift, 12   @ bitWidth 2 (External trigger prescaler)  
        .equ TIM4_SMCR_ETF_Shift, 8   @ bitWidth 4 (External trigger filter)  
        .equ TIM4_SMCR_MSM, 1 << 7   @ bitWidth 1 (Master/Slave mode)  
        .equ TIM4_SMCR_TS_Shift, 4   @ bitWidth 3 (Trigger selection)  
        .equ TIM4_SMCR_SMS_Shift, 0   @ bitWidth 3 (Slave mode selection)  
 
    .equ TIM4_DIER, TIM4_BASE + 0xC @ (DMA/Interrupt enable register) 
        .equ TIM4_DIER_TDE, 1 << 14   @ bitWidth 1 (Trigger DMA request enable)  
        .equ TIM4_DIER_COMDE, 1 << 13   @ bitWidth 1 (Reserved)  
        .equ TIM4_DIER_CC4DE, 1 << 12   @ bitWidth 1 (Capture/Compare 4 DMA request  enable)  
        .equ TIM4_DIER_CC3DE, 1 << 11   @ bitWidth 1 (Capture/Compare 3 DMA request  enable)  
        .equ TIM4_DIER_CC2DE, 1 << 10   @ bitWidth 1 (Capture/Compare 2 DMA request  enable)  
        .equ TIM4_DIER_CC1DE, 1 << 9   @ bitWidth 1 (Capture/Compare 1 DMA request  enable)  
        .equ TIM4_DIER_UDE, 1 << 8   @ bitWidth 1 (Update DMA request enable)  
        .equ TIM4_DIER_TIE, 1 << 6   @ bitWidth 1 (Trigger interrupt enable)  
        .equ TIM4_DIER_CC4IE, 1 << 4   @ bitWidth 1 (Capture/Compare 4 interrupt  enable)  
        .equ TIM4_DIER_CC3IE, 1 << 3   @ bitWidth 1 (Capture/Compare 3 interrupt  enable)  
        .equ TIM4_DIER_CC2IE, 1 << 2   @ bitWidth 1 (Capture/Compare 2 interrupt  enable)  
        .equ TIM4_DIER_CC1IE, 1 << 1   @ bitWidth 1 (Capture/Compare 1 interrupt  enable)  
        .equ TIM4_DIER_UIE, 1 << 0   @ bitWidth 1 (Update interrupt enable)  
 
    .equ TIM4_SR, TIM4_BASE + 0x10 @ (status register) 
        .equ TIM4_SR_CC4OF, 1 << 12   @ bitWidth 1 (Capture/Compare 4 overcapture  flag)  
        .equ TIM4_SR_CC3OF, 1 << 11   @ bitWidth 1 (Capture/Compare 3 overcapture  flag)  
        .equ TIM4_SR_CC2OF, 1 << 10   @ bitWidth 1 (Capture/compare 2 overcapture  flag)  
        .equ TIM4_SR_CC1OF, 1 << 9   @ bitWidth 1 (Capture/Compare 1 overcapture  flag)  
        .equ TIM4_SR_TIF, 1 << 6   @ bitWidth 1 (Trigger interrupt flag)  
        .equ TIM4_SR_CC4IF, 1 << 4   @ bitWidth 1 (Capture/Compare 4 interrupt  flag)  
        .equ TIM4_SR_CC3IF, 1 << 3   @ bitWidth 1 (Capture/Compare 3 interrupt  flag)  
        .equ TIM4_SR_CC2IF, 1 << 2   @ bitWidth 1 (Capture/Compare 2 interrupt  flag)  
        .equ TIM4_SR_CC1IF, 1 << 1   @ bitWidth 1 (Capture/compare 1 interrupt  flag)  
        .equ TIM4_SR_UIF, 1 << 0   @ bitWidth 1 (Update interrupt flag)  
 
    .equ TIM4_EGR, TIM4_BASE + 0x14 @ (event generation register) 
        .equ TIM4_EGR_TG, 1 << 6   @ bitWidth 1 (Trigger generation)  
        .equ TIM4_EGR_CC4G, 1 << 4   @ bitWidth 1 (Capture/compare 4  generation)  
        .equ TIM4_EGR_CC3G, 1 << 3   @ bitWidth 1 (Capture/compare 3  generation)  
        .equ TIM4_EGR_CC2G, 1 << 2   @ bitWidth 1 (Capture/compare 2  generation)  
        .equ TIM4_EGR_CC1G, 1 << 1   @ bitWidth 1 (Capture/compare 1  generation)  
        .equ TIM4_EGR_UG, 1 << 0   @ bitWidth 1 (Update generation)  
 
    .equ TIM4_CCMR1_Output, TIM4_BASE + 0x18 @ (capture/compare mode register 1 output  mode) 
        .equ TIM4_CCMR1_Output_OC2CE, 1 << 15   @ bitWidth 1 (Output compare 2 clear  enable)  
        .equ TIM4_CCMR1_Output_OC2M_Shift, 12   @ bitWidth 3 (Output compare 2 mode)  
        .equ TIM4_CCMR1_Output_OC2PE, 1 << 11   @ bitWidth 1 (Output compare 2 preload  enable)  
        .equ TIM4_CCMR1_Output_OC2FE, 1 << 10   @ bitWidth 1 (Output compare 2 fast  enable)  
        .equ TIM4_CCMR1_Output_CC2S_Shift, 8   @ bitWidth 2 (Capture/Compare 2  selection)  
        .equ TIM4_CCMR1_Output_OC1CE, 1 << 7   @ bitWidth 1 (Output compare 1 clear  enable)  
        .equ TIM4_CCMR1_Output_OC1M_Shift, 4   @ bitWidth 3 (Output compare 1 mode)  
        .equ TIM4_CCMR1_Output_OC1PE, 1 << 3   @ bitWidth 1 (Output compare 1 preload  enable)  
        .equ TIM4_CCMR1_Output_OC1FE, 1 << 2   @ bitWidth 1 (Output compare 1 fast  enable)  
        .equ TIM4_CCMR1_Output_CC1S_Shift, 0   @ bitWidth 2 (Capture/Compare 1  selection)  
 
    .equ TIM4_CCMR1_Input, TIM4_BASE + 0x18 @ (capture/compare mode register 1 input  mode) 
        .equ TIM4_CCMR1_Input_IC2F_Shift, 12   @ bitWidth 4 (Input capture 2 filter)  
        .equ TIM4_CCMR1_Input_IC2PSC_Shift, 10   @ bitWidth 2 (Input capture 2 prescaler)  
        .equ TIM4_CCMR1_Input_CC2S_Shift, 8   @ bitWidth 2 (Capture/compare 2  selection)  
        .equ TIM4_CCMR1_Input_IC1F_Shift, 4   @ bitWidth 4 (Input capture 1 filter)  
        .equ TIM4_CCMR1_Input_IC1PSC_Shift, 2   @ bitWidth 2 (Input capture 1 prescaler)  
        .equ TIM4_CCMR1_Input_CC1S_Shift, 0   @ bitWidth 2 (Capture/Compare 1  selection)  
 
    .equ TIM4_CCMR2_Output, TIM4_BASE + 0x1C @ (capture/compare mode register 2 output  mode) 
        .equ TIM4_CCMR2_Output_OC4CE, 1 << 15   @ bitWidth 1 (Output compare 4 clear  enable)  
        .equ TIM4_CCMR2_Output_OC4M_Shift, 12   @ bitWidth 3 (Output compare 4 mode)  
        .equ TIM4_CCMR2_Output_OC4PE, 1 << 11   @ bitWidth 1 (Output compare 4 preload  enable)  
        .equ TIM4_CCMR2_Output_OC4FE, 1 << 10   @ bitWidth 1 (Output compare 4 fast  enable)  
        .equ TIM4_CCMR2_Output_CC4S_Shift, 8   @ bitWidth 2 (Capture/Compare 4  selection)  
        .equ TIM4_CCMR2_Output_OC3CE, 1 << 7   @ bitWidth 1 (Output compare 3 clear  enable)  
        .equ TIM4_CCMR2_Output_OC3M_Shift, 4   @ bitWidth 3 (Output compare 3 mode)  
        .equ TIM4_CCMR2_Output_OC3PE, 1 << 3   @ bitWidth 1 (Output compare 3 preload  enable)  
        .equ TIM4_CCMR2_Output_OC3FE, 1 << 2   @ bitWidth 1 (Output compare 3 fast  enable)  
        .equ TIM4_CCMR2_Output_CC3S_Shift, 0   @ bitWidth 2 (Capture/Compare 3  selection)  
 
    .equ TIM4_CCMR2_Input, TIM4_BASE + 0x1C @ (capture/compare mode register 2 input  mode) 
        .equ TIM4_CCMR2_Input_IC4F_Shift, 12   @ bitWidth 4 (Input capture 4 filter)  
        .equ TIM4_CCMR2_Input_IC4PSC_Shift, 10   @ bitWidth 2 (Input capture 4 prescaler)  
        .equ TIM4_CCMR2_Input_CC4S_Shift, 8   @ bitWidth 2 (Capture/Compare 4  selection)  
        .equ TIM4_CCMR2_Input_IC3F_Shift, 4   @ bitWidth 4 (Input capture 3 filter)  
        .equ TIM4_CCMR2_Input_IC3PSC_Shift, 2   @ bitWidth 2 (Input capture 3 prescaler)  
        .equ TIM4_CCMR2_Input_CC3S_Shift, 0   @ bitWidth 2 (Capture/Compare 3  selection)  
 
    .equ TIM4_CCER, TIM4_BASE + 0x20 @ (capture/compare enable  register) 
        .equ TIM4_CCER_CC4NP, 1 << 15   @ bitWidth 1 (Capture/Compare 4 output  Polarity)  
        .equ TIM4_CCER_CC4P, 1 << 13   @ bitWidth 1 (Capture/Compare 3 output  Polarity)  
        .equ TIM4_CCER_CC4E, 1 << 12   @ bitWidth 1 (Capture/Compare 4 output  enable)  
        .equ TIM4_CCER_CC3NP, 1 << 11   @ bitWidth 1 (Capture/Compare 3 output  Polarity)  
        .equ TIM4_CCER_CC3P, 1 << 9   @ bitWidth 1 (Capture/Compare 3 output  Polarity)  
        .equ TIM4_CCER_CC3E, 1 << 8   @ bitWidth 1 (Capture/Compare 3 output  enable)  
        .equ TIM4_CCER_CC2NP, 1 << 7   @ bitWidth 1 (Capture/Compare 2 output  Polarity)  
        .equ TIM4_CCER_CC2P, 1 << 5   @ bitWidth 1 (Capture/Compare 2 output  Polarity)  
        .equ TIM4_CCER_CC2E, 1 << 4   @ bitWidth 1 (Capture/Compare 2 output  enable)  
        .equ TIM4_CCER_CC1NP, 1 << 3   @ bitWidth 1 (Capture/Compare 1 output  Polarity)  
        .equ TIM4_CCER_CC1P, 1 << 1   @ bitWidth 1 (Capture/Compare 1 output  Polarity)  
        .equ TIM4_CCER_CC1E, 1 << 0   @ bitWidth 1 (Capture/Compare 1 output  enable)  
 
    .equ TIM4_CNT, TIM4_BASE + 0x24 @ (counter) 
        .equ TIM4_CNT_CNT_H_Shift, 16   @ bitWidth 16 (High counter value TIM2  only)  
        .equ TIM4_CNT_CNT_L_Shift, 0   @ bitWidth 16 (Low counter value)  
 
    .equ TIM4_PSC, TIM4_BASE + 0x28 @ (prescaler) 
        .equ TIM4_PSC_PSC_Shift, 0   @ bitWidth 16 (Prescaler value)  
 
    .equ TIM4_ARR, TIM4_BASE + 0x2C @ (auto-reload register) 
        .equ TIM4_ARR_ARR_H_Shift, 16   @ bitWidth 16 (High Auto-reload value TIM2  only)  
        .equ TIM4_ARR_ARR_L_Shift, 0   @ bitWidth 16 (Low Auto-reload value)  
 
    .equ TIM4_CCR1, TIM4_BASE + 0x34 @ (capture/compare register 1) 
        .equ TIM4_CCR1_CCR1_H_Shift, 16   @ bitWidth 16 (High Capture/Compare 1 value TIM2  only)  
        .equ TIM4_CCR1_CCR1_L_Shift, 0   @ bitWidth 16 (Low Capture/Compare 1  value)  
 
    .equ TIM4_CCR2, TIM4_BASE + 0x38 @ (capture/compare register 2) 
        .equ TIM4_CCR2_CCR2_H_Shift, 16   @ bitWidth 16 (High Capture/Compare 2 value TIM2  only)  
        .equ TIM4_CCR2_CCR2_L_Shift, 0   @ bitWidth 16 (Low Capture/Compare 2  value)  
 
    .equ TIM4_CCR3, TIM4_BASE + 0x3C @ (capture/compare register 3) 
        .equ TIM4_CCR3_CCR3_H_Shift, 16   @ bitWidth 16 (High Capture/Compare value TIM2  only)  
        .equ TIM4_CCR3_CCR3_L_Shift, 0   @ bitWidth 16 (Low Capture/Compare value)  
 
    .equ TIM4_CCR4, TIM4_BASE + 0x40 @ (capture/compare register 4) 
        .equ TIM4_CCR4_CCR4_H_Shift, 16   @ bitWidth 16 (High Capture/Compare value TIM2  only)  
        .equ TIM4_CCR4_CCR4_L_Shift, 0   @ bitWidth 16 (Low Capture/Compare value)  
 
    .equ TIM4_DCR, TIM4_BASE + 0x48 @ (DMA control register) 
        .equ TIM4_DCR_DBL_Shift, 8   @ bitWidth 5 (DMA burst length)  
        .equ TIM4_DCR_DBA_Shift, 0   @ bitWidth 5 (DMA base address)  
 
    .equ TIM4_DMAR, TIM4_BASE + 0x4C @ (DMA address for full transfer) 
        .equ TIM4_DMAR_DMAB_Shift, 0   @ bitWidth 16 (DMA register for burst  accesses)  
 
    .equ TIM4_OR, TIM4_BASE + 0x50 @ (TIM2 option register) 
        .equ TIM4_OR_ETR_RMP_Shift, 0   @ bitWidth 3 (Timer2 ETR remap)  
        .equ TIM4_OR_TI4_RMP_Shift, 3   @ bitWidth 2 (Internal trigger)  
 

@=========================== TIM5 ===========================@
.equ TIM5_BASE, 0x40000C00 @ (General-purpose-timers) 
    .equ TIM5_CR1, TIM5_BASE + 0x0 @ (control register 1) 
        .equ TIM5_CR1_CKD_Shift, 8   @ bitWidth 2 (Clock division)  
        .equ TIM5_CR1_ARPE, 1 << 7   @ bitWidth 1 (Auto-reload preload enable)  
        .equ TIM5_CR1_CMS_Shift, 5   @ bitWidth 2 (Center-aligned mode  selection)  
        .equ TIM5_CR1_DIR, 1 << 4   @ bitWidth 1 (Direction)  
        .equ TIM5_CR1_OPM, 1 << 3   @ bitWidth 1 (One-pulse mode)  
        .equ TIM5_CR1_URS, 1 << 2   @ bitWidth 1 (Update request source)  
        .equ TIM5_CR1_UDIS, 1 << 1   @ bitWidth 1 (Update disable)  
        .equ TIM5_CR1_CEN, 1 << 0   @ bitWidth 1 (Counter enable)  
 
    .equ TIM5_CR2, TIM5_BASE + 0x4 @ (control register 2) 
        .equ TIM5_CR2_TI1S, 1 << 7   @ bitWidth 1 (TI1 selection)  
        .equ TIM5_CR2_MMS_Shift, 4   @ bitWidth 3 (Master mode selection)  
        .equ TIM5_CR2_CCDS, 1 << 3   @ bitWidth 1 (Capture/compare DMA  selection)  
 
    .equ TIM5_SMCR, TIM5_BASE + 0x8 @ (slave mode control register) 
        .equ TIM5_SMCR_ETP, 1 << 15   @ bitWidth 1 (External trigger polarity)  
        .equ TIM5_SMCR_ECE, 1 << 14   @ bitWidth 1 (External clock enable)  
        .equ TIM5_SMCR_ETPS_Shift, 12   @ bitWidth 2 (External trigger prescaler)  
        .equ TIM5_SMCR_ETF_Shift, 8   @ bitWidth 4 (External trigger filter)  
        .equ TIM5_SMCR_MSM, 1 << 7   @ bitWidth 1 (Master/Slave mode)  
        .equ TIM5_SMCR_TS_Shift, 4   @ bitWidth 3 (Trigger selection)  
        .equ TIM5_SMCR_SMS_Shift, 0   @ bitWidth 3 (Slave mode selection)  
 
    .equ TIM5_DIER, TIM5_BASE + 0xC @ (DMA/Interrupt enable register) 
        .equ TIM5_DIER_TDE, 1 << 14   @ bitWidth 1 (Trigger DMA request enable)  
        .equ TIM5_DIER_COMDE, 1 << 13   @ bitWidth 1 (Reserved)  
        .equ TIM5_DIER_CC4DE, 1 << 12   @ bitWidth 1 (Capture/Compare 4 DMA request  enable)  
        .equ TIM5_DIER_CC3DE, 1 << 11   @ bitWidth 1 (Capture/Compare 3 DMA request  enable)  
        .equ TIM5_DIER_CC2DE, 1 << 10   @ bitWidth 1 (Capture/Compare 2 DMA request  enable)  
        .equ TIM5_DIER_CC1DE, 1 << 9   @ bitWidth 1 (Capture/Compare 1 DMA request  enable)  
        .equ TIM5_DIER_UDE, 1 << 8   @ bitWidth 1 (Update DMA request enable)  
        .equ TIM5_DIER_TIE, 1 << 6   @ bitWidth 1 (Trigger interrupt enable)  
        .equ TIM5_DIER_CC4IE, 1 << 4   @ bitWidth 1 (Capture/Compare 4 interrupt  enable)  
        .equ TIM5_DIER_CC3IE, 1 << 3   @ bitWidth 1 (Capture/Compare 3 interrupt  enable)  
        .equ TIM5_DIER_CC2IE, 1 << 2   @ bitWidth 1 (Capture/Compare 2 interrupt  enable)  
        .equ TIM5_DIER_CC1IE, 1 << 1   @ bitWidth 1 (Capture/Compare 1 interrupt  enable)  
        .equ TIM5_DIER_UIE, 1 << 0   @ bitWidth 1 (Update interrupt enable)  
 
    .equ TIM5_SR, TIM5_BASE + 0x10 @ (status register) 
        .equ TIM5_SR_CC4OF, 1 << 12   @ bitWidth 1 (Capture/Compare 4 overcapture  flag)  
        .equ TIM5_SR_CC3OF, 1 << 11   @ bitWidth 1 (Capture/Compare 3 overcapture  flag)  
        .equ TIM5_SR_CC2OF, 1 << 10   @ bitWidth 1 (Capture/compare 2 overcapture  flag)  
        .equ TIM5_SR_CC1OF, 1 << 9   @ bitWidth 1 (Capture/Compare 1 overcapture  flag)  
        .equ TIM5_SR_TIF, 1 << 6   @ bitWidth 1 (Trigger interrupt flag)  
        .equ TIM5_SR_CC4IF, 1 << 4   @ bitWidth 1 (Capture/Compare 4 interrupt  flag)  
        .equ TIM5_SR_CC3IF, 1 << 3   @ bitWidth 1 (Capture/Compare 3 interrupt  flag)  
        .equ TIM5_SR_CC2IF, 1 << 2   @ bitWidth 1 (Capture/Compare 2 interrupt  flag)  
        .equ TIM5_SR_CC1IF, 1 << 1   @ bitWidth 1 (Capture/compare 1 interrupt  flag)  
        .equ TIM5_SR_UIF, 1 << 0   @ bitWidth 1 (Update interrupt flag)  
 
    .equ TIM5_EGR, TIM5_BASE + 0x14 @ (event generation register) 
        .equ TIM5_EGR_TG, 1 << 6   @ bitWidth 1 (Trigger generation)  
        .equ TIM5_EGR_CC4G, 1 << 4   @ bitWidth 1 (Capture/compare 4  generation)  
        .equ TIM5_EGR_CC3G, 1 << 3   @ bitWidth 1 (Capture/compare 3  generation)  
        .equ TIM5_EGR_CC2G, 1 << 2   @ bitWidth 1 (Capture/compare 2  generation)  
        .equ TIM5_EGR_CC1G, 1 << 1   @ bitWidth 1 (Capture/compare 1  generation)  
        .equ TIM5_EGR_UG, 1 << 0   @ bitWidth 1 (Update generation)  
 
    .equ TIM5_CCMR1_Output, TIM5_BASE + 0x18 @ (capture/compare mode register 1 output  mode) 
        .equ TIM5_CCMR1_Output_OC2CE, 1 << 15   @ bitWidth 1 (Output compare 2 clear  enable)  
        .equ TIM5_CCMR1_Output_OC2M_Shift, 12   @ bitWidth 3 (Output compare 2 mode)  
        .equ TIM5_CCMR1_Output_OC2PE, 1 << 11   @ bitWidth 1 (Output compare 2 preload  enable)  
        .equ TIM5_CCMR1_Output_OC2FE, 1 << 10   @ bitWidth 1 (Output compare 2 fast  enable)  
        .equ TIM5_CCMR1_Output_CC2S_Shift, 8   @ bitWidth 2 (Capture/Compare 2  selection)  
        .equ TIM5_CCMR1_Output_OC1CE, 1 << 7   @ bitWidth 1 (Output compare 1 clear  enable)  
        .equ TIM5_CCMR1_Output_OC1M_Shift, 4   @ bitWidth 3 (Output compare 1 mode)  
        .equ TIM5_CCMR1_Output_OC1PE, 1 << 3   @ bitWidth 1 (Output compare 1 preload  enable)  
        .equ TIM5_CCMR1_Output_OC1FE, 1 << 2   @ bitWidth 1 (Output compare 1 fast  enable)  
        .equ TIM5_CCMR1_Output_CC1S_Shift, 0   @ bitWidth 2 (Capture/Compare 1  selection)  
 
    .equ TIM5_CCMR1_Input, TIM5_BASE + 0x18 @ (capture/compare mode register 1 input  mode) 
        .equ TIM5_CCMR1_Input_IC2F_Shift, 12   @ bitWidth 4 (Input capture 2 filter)  
        .equ TIM5_CCMR1_Input_IC2PSC_Shift, 10   @ bitWidth 2 (Input capture 2 prescaler)  
        .equ TIM5_CCMR1_Input_CC2S_Shift, 8   @ bitWidth 2 (Capture/compare 2  selection)  
        .equ TIM5_CCMR1_Input_IC1F_Shift, 4   @ bitWidth 4 (Input capture 1 filter)  
        .equ TIM5_CCMR1_Input_IC1PSC_Shift, 2   @ bitWidth 2 (Input capture 1 prescaler)  
        .equ TIM5_CCMR1_Input_CC1S_Shift, 0   @ bitWidth 2 (Capture/Compare 1  selection)  
 
    .equ TIM5_CCMR2_Output, TIM5_BASE + 0x1C @ (capture/compare mode register 2 output  mode) 
        .equ TIM5_CCMR2_Output_OC4CE, 1 << 15   @ bitWidth 1 (Output compare 4 clear  enable)  
        .equ TIM5_CCMR2_Output_OC4M_Shift, 12   @ bitWidth 3 (Output compare 4 mode)  
        .equ TIM5_CCMR2_Output_OC4PE, 1 << 11   @ bitWidth 1 (Output compare 4 preload  enable)  
        .equ TIM5_CCMR2_Output_OC4FE, 1 << 10   @ bitWidth 1 (Output compare 4 fast  enable)  
        .equ TIM5_CCMR2_Output_CC4S_Shift, 8   @ bitWidth 2 (Capture/Compare 4  selection)  
        .equ TIM5_CCMR2_Output_OC3CE, 1 << 7   @ bitWidth 1 (Output compare 3 clear  enable)  
        .equ TIM5_CCMR2_Output_OC3M_Shift, 4   @ bitWidth 3 (Output compare 3 mode)  
        .equ TIM5_CCMR2_Output_OC3PE, 1 << 3   @ bitWidth 1 (Output compare 3 preload  enable)  
        .equ TIM5_CCMR2_Output_OC3FE, 1 << 2   @ bitWidth 1 (Output compare 3 fast  enable)  
        .equ TIM5_CCMR2_Output_CC3S_Shift, 0   @ bitWidth 2 (Capture/Compare 3  selection)  
 
    .equ TIM5_CCMR2_Input, TIM5_BASE + 0x1C @ (capture/compare mode register 2 input  mode) 
        .equ TIM5_CCMR2_Input_IC4F_Shift, 12   @ bitWidth 4 (Input capture 4 filter)  
        .equ TIM5_CCMR2_Input_IC4PSC_Shift, 10   @ bitWidth 2 (Input capture 4 prescaler)  
        .equ TIM5_CCMR2_Input_CC4S_Shift, 8   @ bitWidth 2 (Capture/Compare 4  selection)  
        .equ TIM5_CCMR2_Input_IC3F_Shift, 4   @ bitWidth 4 (Input capture 3 filter)  
        .equ TIM5_CCMR2_Input_IC3PSC_Shift, 2   @ bitWidth 2 (Input capture 3 prescaler)  
        .equ TIM5_CCMR2_Input_CC3S_Shift, 0   @ bitWidth 2 (Capture/Compare 3  selection)  
 
    .equ TIM5_CCER, TIM5_BASE + 0x20 @ (capture/compare enable  register) 
        .equ TIM5_CCER_CC4NP, 1 << 15   @ bitWidth 1 (Capture/Compare 4 output  Polarity)  
        .equ TIM5_CCER_CC4P, 1 << 13   @ bitWidth 1 (Capture/Compare 3 output  Polarity)  
        .equ TIM5_CCER_CC4E, 1 << 12   @ bitWidth 1 (Capture/Compare 4 output  enable)  
        .equ TIM5_CCER_CC3NP, 1 << 11   @ bitWidth 1 (Capture/Compare 3 output  Polarity)  
        .equ TIM5_CCER_CC3P, 1 << 9   @ bitWidth 1 (Capture/Compare 3 output  Polarity)  
        .equ TIM5_CCER_CC3E, 1 << 8   @ bitWidth 1 (Capture/Compare 3 output  enable)  
        .equ TIM5_CCER_CC2NP, 1 << 7   @ bitWidth 1 (Capture/Compare 2 output  Polarity)  
        .equ TIM5_CCER_CC2P, 1 << 5   @ bitWidth 1 (Capture/Compare 2 output  Polarity)  
        .equ TIM5_CCER_CC2E, 1 << 4   @ bitWidth 1 (Capture/Compare 2 output  enable)  
        .equ TIM5_CCER_CC1NP, 1 << 3   @ bitWidth 1 (Capture/Compare 1 output  Polarity)  
        .equ TIM5_CCER_CC1P, 1 << 1   @ bitWidth 1 (Capture/Compare 1 output  Polarity)  
        .equ TIM5_CCER_CC1E, 1 << 0   @ bitWidth 1 (Capture/Compare 1 output  enable)  
 
    .equ TIM5_CNT, TIM5_BASE + 0x24 @ (counter) 
        .equ TIM5_CNT_CNT_H_Shift, 16   @ bitWidth 16 (High counter value TIM2  only)  
        .equ TIM5_CNT_CNT_L_Shift, 0   @ bitWidth 16 (Low counter value)  
 
    .equ TIM5_PSC, TIM5_BASE + 0x28 @ (prescaler) 
        .equ TIM5_PSC_PSC_Shift, 0   @ bitWidth 16 (Prescaler value)  
 
    .equ TIM5_ARR, TIM5_BASE + 0x2C @ (auto-reload register) 
        .equ TIM5_ARR_ARR_H_Shift, 16   @ bitWidth 16 (High Auto-reload value TIM2  only)  
        .equ TIM5_ARR_ARR_L_Shift, 0   @ bitWidth 16 (Low Auto-reload value)  
 
    .equ TIM5_CCR1, TIM5_BASE + 0x34 @ (capture/compare register 1) 
        .equ TIM5_CCR1_CCR1_H_Shift, 16   @ bitWidth 16 (High Capture/Compare 1 value TIM2  only)  
        .equ TIM5_CCR1_CCR1_L_Shift, 0   @ bitWidth 16 (Low Capture/Compare 1  value)  
 
    .equ TIM5_CCR2, TIM5_BASE + 0x38 @ (capture/compare register 2) 
        .equ TIM5_CCR2_CCR2_H_Shift, 16   @ bitWidth 16 (High Capture/Compare 2 value TIM2  only)  
        .equ TIM5_CCR2_CCR2_L_Shift, 0   @ bitWidth 16 (Low Capture/Compare 2  value)  
 
    .equ TIM5_CCR3, TIM5_BASE + 0x3C @ (capture/compare register 3) 
        .equ TIM5_CCR3_CCR3_H_Shift, 16   @ bitWidth 16 (High Capture/Compare value TIM2  only)  
        .equ TIM5_CCR3_CCR3_L_Shift, 0   @ bitWidth 16 (Low Capture/Compare value)  
 
    .equ TIM5_CCR4, TIM5_BASE + 0x40 @ (capture/compare register 4) 
        .equ TIM5_CCR4_CCR4_H_Shift, 16   @ bitWidth 16 (High Capture/Compare value TIM2  only)  
        .equ TIM5_CCR4_CCR4_L_Shift, 0   @ bitWidth 16 (Low Capture/Compare value)  
 
    .equ TIM5_DCR, TIM5_BASE + 0x48 @ (DMA control register) 
        .equ TIM5_DCR_DBL_Shift, 8   @ bitWidth 5 (DMA burst length)  
        .equ TIM5_DCR_DBA_Shift, 0   @ bitWidth 5 (DMA base address)  
 
    .equ TIM5_DMAR, TIM5_BASE + 0x4C @ (DMA address for full transfer) 
        .equ TIM5_DMAR_DMAB_Shift, 0   @ bitWidth 16 (DMA register for burst  accesses)  
 
    .equ TIM5_OR, TIM5_BASE + 0x50 @ (TIM2 option register) 
        .equ TIM5_OR_ETR_RMP_Shift, 0   @ bitWidth 3 (Timer2 ETR remap)  
        .equ TIM5_OR_TI4_RMP_Shift, 3   @ bitWidth 2 (Internal trigger)  
 

@=========================== TIM1 ===========================@
.equ TIM1_BASE, 0x40012C00 @ (Advanced-timers) 
    .equ TIM1_CR1, TIM1_BASE + 0x0 @ (control register 1) 
        .equ TIM1_CR1_CKD_Shift, 8   @ bitWidth 2 (Clock division)  
        .equ TIM1_CR1_ARPE, 1 << 7   @ bitWidth 1 (Auto-reload preload enable)  
        .equ TIM1_CR1_CMS_Shift, 5   @ bitWidth 2 (Center-aligned mode  selection)  
        .equ TIM1_CR1_DIR, 1 << 4   @ bitWidth 1 (Direction)  
        .equ TIM1_CR1_OPM, 1 << 3   @ bitWidth 1 (One-pulse mode)  
        .equ TIM1_CR1_URS, 1 << 2   @ bitWidth 1 (Update request source)  
        .equ TIM1_CR1_UDIS, 1 << 1   @ bitWidth 1 (Update disable)  
        .equ TIM1_CR1_CEN, 1 << 0   @ bitWidth 1 (Counter enable)  
 
    .equ TIM1_CR2, TIM1_BASE + 0x4 @ (control register 2) 
        .equ TIM1_CR2_OIS4, 1 << 14   @ bitWidth 1 (Output Idle state 4)  
        .equ TIM1_CR2_OIS3N, 1 << 13   @ bitWidth 1 (Output Idle state 3)  
        .equ TIM1_CR2_OIS3, 1 << 12   @ bitWidth 1 (Output Idle state 3)  
        .equ TIM1_CR2_OIS2N, 1 << 11   @ bitWidth 1 (Output Idle state 2)  
        .equ TIM1_CR2_OIS2, 1 << 10   @ bitWidth 1 (Output Idle state 2)  
        .equ TIM1_CR2_OIS1N, 1 << 9   @ bitWidth 1 (Output Idle state 1)  
        .equ TIM1_CR2_OIS1, 1 << 8   @ bitWidth 1 (Output Idle state 1)  
        .equ TIM1_CR2_TI1S, 1 << 7   @ bitWidth 1 (TI1 selection)  
        .equ TIM1_CR2_MMS_Shift, 4   @ bitWidth 3 (Master mode selection)  
        .equ TIM1_CR2_CCDS, 1 << 3   @ bitWidth 1 (Capture/compare DMA  selection)  
        .equ TIM1_CR2_CCUS, 1 << 2   @ bitWidth 1 (Capture/compare control update  selection)  
        .equ TIM1_CR2_CCPC, 1 << 0   @ bitWidth 1 (Capture/compare preloaded  control)  
 
    .equ TIM1_SMCR, TIM1_BASE + 0x8 @ (slave mode control register) 
        .equ TIM1_SMCR_ETP, 1 << 15   @ bitWidth 1 (External trigger polarity)  
        .equ TIM1_SMCR_ECE, 1 << 14   @ bitWidth 1 (External clock enable)  
        .equ TIM1_SMCR_ETPS_Shift, 12   @ bitWidth 2 (External trigger prescaler)  
        .equ TIM1_SMCR_ETF_Shift, 8   @ bitWidth 4 (External trigger filter)  
        .equ TIM1_SMCR_MSM, 1 << 7   @ bitWidth 1 (Master/Slave mode)  
        .equ TIM1_SMCR_TS_Shift, 4   @ bitWidth 3 (Trigger selection)  
        .equ TIM1_SMCR_SMS_Shift, 0   @ bitWidth 3 (Slave mode selection)  
 
    .equ TIM1_DIER, TIM1_BASE + 0xC @ (DMA/Interrupt enable register) 
        .equ TIM1_DIER_TDE, 1 << 14   @ bitWidth 1 (Trigger DMA request enable)  
        .equ TIM1_DIER_COMDE, 1 << 13   @ bitWidth 1 (COM DMA request enable)  
        .equ TIM1_DIER_CC4DE, 1 << 12   @ bitWidth 1 (Capture/Compare 4 DMA request  enable)  
        .equ TIM1_DIER_CC3DE, 1 << 11   @ bitWidth 1 (Capture/Compare 3 DMA request  enable)  
        .equ TIM1_DIER_CC2DE, 1 << 10   @ bitWidth 1 (Capture/Compare 2 DMA request  enable)  
        .equ TIM1_DIER_CC1DE, 1 << 9   @ bitWidth 1 (Capture/Compare 1 DMA request  enable)  
        .equ TIM1_DIER_UDE, 1 << 8   @ bitWidth 1 (Update DMA request enable)  
        .equ TIM1_DIER_TIE, 1 << 6   @ bitWidth 1 (Trigger interrupt enable)  
        .equ TIM1_DIER_CC4IE, 1 << 4   @ bitWidth 1 (Capture/Compare 4 interrupt  enable)  
        .equ TIM1_DIER_CC3IE, 1 << 3   @ bitWidth 1 (Capture/Compare 3 interrupt  enable)  
        .equ TIM1_DIER_CC2IE, 1 << 2   @ bitWidth 1 (Capture/Compare 2 interrupt  enable)  
        .equ TIM1_DIER_CC1IE, 1 << 1   @ bitWidth 1 (Capture/Compare 1 interrupt  enable)  
        .equ TIM1_DIER_UIE, 1 << 0   @ bitWidth 1 (Update interrupt enable)  
        .equ TIM1_DIER_BIE, 1 << 7   @ bitWidth 1 (Break interrupt enable)  
        .equ TIM1_DIER_COMIE, 1 << 5   @ bitWidth 1 (COM interrupt enable)  
 
    .equ TIM1_SR, TIM1_BASE + 0x10 @ (status register) 
        .equ TIM1_SR_CC4OF, 1 << 12   @ bitWidth 1 (Capture/Compare 4 overcapture  flag)  
        .equ TIM1_SR_CC3OF, 1 << 11   @ bitWidth 1 (Capture/Compare 3 overcapture  flag)  
        .equ TIM1_SR_CC2OF, 1 << 10   @ bitWidth 1 (Capture/compare 2 overcapture  flag)  
        .equ TIM1_SR_CC1OF, 1 << 9   @ bitWidth 1 (Capture/Compare 1 overcapture  flag)  
        .equ TIM1_SR_BIF, 1 << 7   @ bitWidth 1 (Break interrupt flag)  
        .equ TIM1_SR_TIF, 1 << 6   @ bitWidth 1 (Trigger interrupt flag)  
        .equ TIM1_SR_COMIF, 1 << 5   @ bitWidth 1 (COM interrupt flag)  
        .equ TIM1_SR_CC4IF, 1 << 4   @ bitWidth 1 (Capture/Compare 4 interrupt  flag)  
        .equ TIM1_SR_CC3IF, 1 << 3   @ bitWidth 1 (Capture/Compare 3 interrupt  flag)  
        .equ TIM1_SR_CC2IF, 1 << 2   @ bitWidth 1 (Capture/Compare 2 interrupt  flag)  
        .equ TIM1_SR_CC1IF, 1 << 1   @ bitWidth 1 (Capture/compare 1 interrupt  flag)  
        .equ TIM1_SR_UIF, 1 << 0   @ bitWidth 1 (Update interrupt flag)  
 
    .equ TIM1_EGR, TIM1_BASE + 0x14 @ (event generation register) 
        .equ TIM1_EGR_BG, 1 << 7   @ bitWidth 1 (Break generation)  
        .equ TIM1_EGR_TG, 1 << 6   @ bitWidth 1 (Trigger generation)  
        .equ TIM1_EGR_COMG, 1 << 5   @ bitWidth 1 (Capture/Compare control update  generation)  
        .equ TIM1_EGR_CC4G, 1 << 4   @ bitWidth 1 (Capture/compare 4  generation)  
        .equ TIM1_EGR_CC3G, 1 << 3   @ bitWidth 1 (Capture/compare 3  generation)  
        .equ TIM1_EGR_CC2G, 1 << 2   @ bitWidth 1 (Capture/compare 2  generation)  
        .equ TIM1_EGR_CC1G, 1 << 1   @ bitWidth 1 (Capture/compare 1  generation)  
        .equ TIM1_EGR_UG, 1 << 0   @ bitWidth 1 (Update generation)  
 
    .equ TIM1_CCMR1_Output, TIM1_BASE + 0x18 @ (capture/compare mode register 1 output  mode) 
        .equ TIM1_CCMR1_Output_OC2CE, 1 << 15   @ bitWidth 1 (Output Compare 2 clear  enable)  
        .equ TIM1_CCMR1_Output_OC2M_Shift, 12   @ bitWidth 3 (Output Compare 2 mode)  
        .equ TIM1_CCMR1_Output_OC2PE, 1 << 11   @ bitWidth 1 (Output Compare 2 preload  enable)  
        .equ TIM1_CCMR1_Output_OC2FE, 1 << 10   @ bitWidth 1 (Output Compare 2 fast  enable)  
        .equ TIM1_CCMR1_Output_CC2S_Shift, 8   @ bitWidth 2 (Capture/Compare 2  selection)  
        .equ TIM1_CCMR1_Output_OC1CE, 1 << 7   @ bitWidth 1 (Output Compare 1 clear  enable)  
        .equ TIM1_CCMR1_Output_OC1M_Shift, 4   @ bitWidth 3 (Output Compare 1 mode)  
        .equ TIM1_CCMR1_Output_OC1PE, 1 << 3   @ bitWidth 1 (Output Compare 1 preload  enable)  
        .equ TIM1_CCMR1_Output_OC1FE, 1 << 2   @ bitWidth 1 (Output Compare 1 fast  enable)  
        .equ TIM1_CCMR1_Output_CC1S_Shift, 0   @ bitWidth 2 (Capture/Compare 1  selection)  
 
    .equ TIM1_CCMR1_Input, TIM1_BASE + 0x18 @ (capture/compare mode register 1 input  mode) 
        .equ TIM1_CCMR1_Input_IC2F_Shift, 12   @ bitWidth 4 (Input capture 2 filter)  
        .equ TIM1_CCMR1_Input_IC2PCS_Shift, 10   @ bitWidth 2 (Input capture 2 prescaler)  
        .equ TIM1_CCMR1_Input_CC2S_Shift, 8   @ bitWidth 2 (Capture/Compare 2  selection)  
        .equ TIM1_CCMR1_Input_IC1F_Shift, 4   @ bitWidth 4 (Input capture 1 filter)  
        .equ TIM1_CCMR1_Input_ICPCS_Shift, 2   @ bitWidth 2 (Input capture 1 prescaler)  
        .equ TIM1_CCMR1_Input_CC1S_Shift, 0   @ bitWidth 2 (Capture/Compare 1  selection)  
 
    .equ TIM1_CCMR2_Output, TIM1_BASE + 0x1C @ (capture/compare mode register 2 output  mode) 
        .equ TIM1_CCMR2_Output_OC4CE, 1 << 15   @ bitWidth 1 (Output compare 4 clear  enable)  
        .equ TIM1_CCMR2_Output_OC4M_Shift, 12   @ bitWidth 3 (Output compare 4 mode)  
        .equ TIM1_CCMR2_Output_OC4PE, 1 << 11   @ bitWidth 1 (Output compare 4 preload  enable)  
        .equ TIM1_CCMR2_Output_OC4FE, 1 << 10   @ bitWidth 1 (Output compare 4 fast  enable)  
        .equ TIM1_CCMR2_Output_CC4S_Shift, 8   @ bitWidth 2 (Capture/Compare 4  selection)  
        .equ TIM1_CCMR2_Output_OC3CE, 1 << 7   @ bitWidth 1 (Output compare 3 clear  enable)  
        .equ TIM1_CCMR2_Output_OC3M_Shift, 4   @ bitWidth 3 (Output compare 3 mode)  
        .equ TIM1_CCMR2_Output_OC3PE, 1 << 3   @ bitWidth 1 (Output compare 3 preload  enable)  
        .equ TIM1_CCMR2_Output_OC3FE, 1 << 2   @ bitWidth 1 (Output compare 3 fast  enable)  
        .equ TIM1_CCMR2_Output_CC3S_Shift, 0   @ bitWidth 2 (Capture/Compare 3  selection)  
 
    .equ TIM1_CCMR2_Input, TIM1_BASE + 0x1C @ (capture/compare mode register 2 input  mode) 
        .equ TIM1_CCMR2_Input_IC4F_Shift, 12   @ bitWidth 4 (Input capture 4 filter)  
        .equ TIM1_CCMR2_Input_IC4PSC_Shift, 10   @ bitWidth 2 (Input capture 4 prescaler)  
        .equ TIM1_CCMR2_Input_CC4S_Shift, 8   @ bitWidth 2 (Capture/Compare 4  selection)  
        .equ TIM1_CCMR2_Input_IC3F_Shift, 4   @ bitWidth 4 (Input capture 3 filter)  
        .equ TIM1_CCMR2_Input_IC3PSC_Shift, 2   @ bitWidth 2 (Input capture 3 prescaler)  
        .equ TIM1_CCMR2_Input_CC3S_Shift, 0   @ bitWidth 2 (Capture/compare 3  selection)  
 
    .equ TIM1_CCER, TIM1_BASE + 0x20 @ (capture/compare enable  register) 
        .equ TIM1_CCER_CC4P, 1 << 13   @ bitWidth 1 (Capture/Compare 3 output  Polarity)  
        .equ TIM1_CCER_CC4E, 1 << 12   @ bitWidth 1 (Capture/Compare 4 output  enable)  
        .equ TIM1_CCER_CC3NP, 1 << 11   @ bitWidth 1 (Capture/Compare 3 output  Polarity)  
        .equ TIM1_CCER_CC3NE, 1 << 10   @ bitWidth 1 (Capture/Compare 3 complementary output  enable)  
        .equ TIM1_CCER_CC3P, 1 << 9   @ bitWidth 1 (Capture/Compare 3 output  Polarity)  
        .equ TIM1_CCER_CC3E, 1 << 8   @ bitWidth 1 (Capture/Compare 3 output  enable)  
        .equ TIM1_CCER_CC2NP, 1 << 7   @ bitWidth 1 (Capture/Compare 2 output  Polarity)  
        .equ TIM1_CCER_CC2NE, 1 << 6   @ bitWidth 1 (Capture/Compare 2 complementary output  enable)  
        .equ TIM1_CCER_CC2P, 1 << 5   @ bitWidth 1 (Capture/Compare 2 output  Polarity)  
        .equ TIM1_CCER_CC2E, 1 << 4   @ bitWidth 1 (Capture/Compare 2 output  enable)  
        .equ TIM1_CCER_CC1NP, 1 << 3   @ bitWidth 1 (Capture/Compare 1 output  Polarity)  
        .equ TIM1_CCER_CC1NE, 1 << 2   @ bitWidth 1 (Capture/Compare 1 complementary output  enable)  
        .equ TIM1_CCER_CC1P, 1 << 1   @ bitWidth 1 (Capture/Compare 1 output  Polarity)  
        .equ TIM1_CCER_CC1E, 1 << 0   @ bitWidth 1 (Capture/Compare 1 output  enable)  
 
    .equ TIM1_CNT, TIM1_BASE + 0x24 @ (counter) 
        .equ TIM1_CNT_CNT_Shift, 0   @ bitWidth 16 (counter value)  
 
    .equ TIM1_PSC, TIM1_BASE + 0x28 @ (prescaler) 
        .equ TIM1_PSC_PSC_Shift, 0   @ bitWidth 16 (Prescaler value)  
 
    .equ TIM1_ARR, TIM1_BASE + 0x2C @ (auto-reload register) 
        .equ TIM1_ARR_ARR_Shift, 0   @ bitWidth 16 (Auto-reload value)  
 
    .equ TIM1_RCR, TIM1_BASE + 0x30 @ (repetition counter register) 
        .equ TIM1_RCR_REP_Shift, 0   @ bitWidth 8 (Repetition counter value)  
 
    .equ TIM1_CCR1, TIM1_BASE + 0x34 @ (capture/compare register 1) 
        .equ TIM1_CCR1_CCR1_Shift, 0   @ bitWidth 16 (Capture/Compare 1 value)  
 
    .equ TIM1_CCR2, TIM1_BASE + 0x38 @ (capture/compare register 2) 
        .equ TIM1_CCR2_CCR2_Shift, 0   @ bitWidth 16 (Capture/Compare 2 value)  
 
    .equ TIM1_CCR3, TIM1_BASE + 0x3C @ (capture/compare register 3) 
        .equ TIM1_CCR3_CCR3_Shift, 0   @ bitWidth 16 (Capture/Compare value)  
 
    .equ TIM1_CCR4, TIM1_BASE + 0x40 @ (capture/compare register 4) 
        .equ TIM1_CCR4_CCR4_Shift, 0   @ bitWidth 16 (Capture/Compare value)  
 
    .equ TIM1_BDTR, TIM1_BASE + 0x44 @ (break and dead-time register) 
        .equ TIM1_BDTR_MOE, 1 << 15   @ bitWidth 1 (Main output enable)  
        .equ TIM1_BDTR_AOE, 1 << 14   @ bitWidth 1 (Automatic output enable)  
        .equ TIM1_BDTR_BKP, 1 << 13   @ bitWidth 1 (Break polarity)  
        .equ TIM1_BDTR_BKE, 1 << 12   @ bitWidth 1 (Break enable)  
        .equ TIM1_BDTR_OSSR, 1 << 11   @ bitWidth 1 (Off-state selection for Run  mode)  
        .equ TIM1_BDTR_OSSI, 1 << 10   @ bitWidth 1 (Off-state selection for Idle  mode)  
        .equ TIM1_BDTR_LOCK_Shift, 8   @ bitWidth 2 (Lock configuration)  
        .equ TIM1_BDTR_DTG_Shift, 0   @ bitWidth 8 (Dead-time generator setup)  
 
    .equ TIM1_DCR, TIM1_BASE + 0x48 @ (DMA control register) 
        .equ TIM1_DCR_DBL_Shift, 8   @ bitWidth 5 (DMA burst length)  
        .equ TIM1_DCR_DBA_Shift, 0   @ bitWidth 5 (DMA base address)  
 
    .equ TIM1_DMAR, TIM1_BASE + 0x4C @ (DMA address for full transfer) 
        .equ TIM1_DMAR_DMAB_Shift, 0   @ bitWidth 16 (DMA register for burst  accesses)  
 
    .equ TIM1_OR1, TIM1_BASE + 0x50 @ (DMA address for full transfer) 
        .equ TIM1_OR1_ETR_ADC1_RMP_Shift, 0   @ bitWidth 2 (External trigger remap on ADC1 analog  watchdog)  
        .equ TIM1_OR1_ETR_ADC3_RMP_Shift, 2   @ bitWidth 2 (External trigger remap on ADC3 analog  watchdog)  
        .equ TIM1_OR1_TI1_RMP, 1 << 4   @ bitWidth 1 (Input Capture 1 remap)  
 
    .equ TIM1_CCMR3_Output, TIM1_BASE + 0x54 @ (capture/compare mode register 2 output  mode) 
        .equ TIM1_CCMR3_Output_OC6M_bit3, 1 << 24   @ bitWidth 1 (Output Compare 6 mode bit  3)  
        .equ TIM1_CCMR3_Output_OC5M_bit3_Shift, 16   @ bitWidth 3 (Output Compare 5 mode bit  3)  
        .equ TIM1_CCMR3_Output_OC6CE, 1 << 15   @ bitWidth 1 (Output compare 6 clear  enable)  
        .equ TIM1_CCMR3_Output_OC6M_Shift, 12   @ bitWidth 3 (Output compare 6 mode)  
        .equ TIM1_CCMR3_Output_OC6PE, 1 << 11   @ bitWidth 1 (Output compare 6 preload  enable)  
        .equ TIM1_CCMR3_Output_OC6FE, 1 << 10   @ bitWidth 1 (Output compare 6 fast  enable)  
        .equ TIM1_CCMR3_Output_OC5CE, 1 << 7   @ bitWidth 1 (Output compare 5 clear  enable)  
        .equ TIM1_CCMR3_Output_OC5M_Shift, 4   @ bitWidth 3 (Output compare 5 mode)  
        .equ TIM1_CCMR3_Output_OC5PE, 1 << 3   @ bitWidth 1 (Output compare 5 preload  enable)  
        .equ TIM1_CCMR3_Output_OC5FE, 1 << 2   @ bitWidth 1 (Output compare 5 fast  enable)  
 
    .equ TIM1_CCR5, TIM1_BASE + 0x58 @ (capture/compare register 4) 
        .equ TIM1_CCR5_CCR5_Shift, 0   @ bitWidth 16 (Capture/Compare value)  
        .equ TIM1_CCR5_GC5C1, 1 << 29   @ bitWidth 1 (Group Channel 5 and Channel  1)  
        .equ TIM1_CCR5_GC5C2, 1 << 30   @ bitWidth 1 (Group Channel 5 and Channel  2)  
        .equ TIM1_CCR5_GC5C3, 1 << 31   @ bitWidth 1 (Group Channel 5 and Channel  3)  
 
    .equ TIM1_CCR6, TIM1_BASE + 0x5C @ (capture/compare register 4) 
        .equ TIM1_CCR6_CCR6_Shift, 0   @ bitWidth 16 (Capture/Compare value)  
 
    .equ TIM1_OR2, TIM1_BASE + 0x60 @ (DMA address for full transfer) 
        .equ TIM1_OR2_BKINE, 1 << 0   @ bitWidth 1 (BRK BKIN input enable)  
        .equ TIM1_OR2_BKCMP1E, 1 << 1   @ bitWidth 1 (BRK COMP1 enable)  
        .equ TIM1_OR2_BKCMP2E, 1 << 2   @ bitWidth 1 (BRK COMP2 enable)  
        .equ TIM1_OR2_BKDFBK0E, 1 << 8   @ bitWidth 1 (BRK DFSDM_BREAK0 enable)  
        .equ TIM1_OR2_BKINP, 1 << 9   @ bitWidth 1 (BRK BKIN input polarity)  
        .equ TIM1_OR2_BKCMP1P, 1 << 10   @ bitWidth 1 (BRK COMP1 input polarity)  
        .equ TIM1_OR2_BKCMP2P, 1 << 11   @ bitWidth 1 (BRK COMP2 input polarity)  
        .equ TIM1_OR2_ETRSEL_Shift, 14   @ bitWidth 3 (ETR source selection)  
 
    .equ TIM1_OR3, TIM1_BASE + 0x64 @ (DMA address for full transfer) 
        .equ TIM1_OR3_BK2INE, 1 << 0   @ bitWidth 1 (BRK2 BKIN input enable)  
        .equ TIM1_OR3_BK2CMP1E, 1 << 1   @ bitWidth 1 (BRK2 COMP1 enable)  
        .equ TIM1_OR3_BK2CMP2E, 1 << 2   @ bitWidth 1 (BRK2 COMP2 enable)  
        .equ TIM1_OR3_BK2DFBK0E, 1 << 8   @ bitWidth 1 (BRK2 DFSDM_BREAK0 enable)  
        .equ TIM1_OR3_BK2INP, 1 << 9   @ bitWidth 1 (BRK2 BKIN input polarity)  
        .equ TIM1_OR3_BK2CMP1P, 1 << 10   @ bitWidth 1 (BRK2 COMP1 input polarity)  
        .equ TIM1_OR3_BK2CMP2P, 1 << 11   @ bitWidth 1 (BRK2 COMP2 input polarity)  
 

@=========================== TIM8 ===========================@
.equ TIM8_BASE, 0x40013400 @ (Advanced-timers) 
    .equ TIM8_CR1, TIM8_BASE + 0x0 @ (control register 1) 
        .equ TIM8_CR1_CKD_Shift, 8   @ bitWidth 2 (Clock division)  
        .equ TIM8_CR1_ARPE, 1 << 7   @ bitWidth 1 (Auto-reload preload enable)  
        .equ TIM8_CR1_CMS_Shift, 5   @ bitWidth 2 (Center-aligned mode  selection)  
        .equ TIM8_CR1_DIR, 1 << 4   @ bitWidth 1 (Direction)  
        .equ TIM8_CR1_OPM, 1 << 3   @ bitWidth 1 (One-pulse mode)  
        .equ TIM8_CR1_URS, 1 << 2   @ bitWidth 1 (Update request source)  
        .equ TIM8_CR1_UDIS, 1 << 1   @ bitWidth 1 (Update disable)  
        .equ TIM8_CR1_CEN, 1 << 0   @ bitWidth 1 (Counter enable)  
 
    .equ TIM8_CR2, TIM8_BASE + 0x4 @ (control register 2) 
        .equ TIM8_CR2_OIS4, 1 << 14   @ bitWidth 1 (Output Idle state 4)  
        .equ TIM8_CR2_OIS3N, 1 << 13   @ bitWidth 1 (Output Idle state 3)  
        .equ TIM8_CR2_OIS3, 1 << 12   @ bitWidth 1 (Output Idle state 3)  
        .equ TIM8_CR2_OIS2N, 1 << 11   @ bitWidth 1 (Output Idle state 2)  
        .equ TIM8_CR2_OIS2, 1 << 10   @ bitWidth 1 (Output Idle state 2)  
        .equ TIM8_CR2_OIS1N, 1 << 9   @ bitWidth 1 (Output Idle state 1)  
        .equ TIM8_CR2_OIS1, 1 << 8   @ bitWidth 1 (Output Idle state 1)  
        .equ TIM8_CR2_TI1S, 1 << 7   @ bitWidth 1 (TI1 selection)  
        .equ TIM8_CR2_MMS_Shift, 4   @ bitWidth 3 (Master mode selection)  
        .equ TIM8_CR2_CCDS, 1 << 3   @ bitWidth 1 (Capture/compare DMA  selection)  
        .equ TIM8_CR2_CCUS, 1 << 2   @ bitWidth 1 (Capture/compare control update  selection)  
        .equ TIM8_CR2_CCPC, 1 << 0   @ bitWidth 1 (Capture/compare preloaded  control)  
 
    .equ TIM8_SMCR, TIM8_BASE + 0x8 @ (slave mode control register) 
        .equ TIM8_SMCR_ETP, 1 << 15   @ bitWidth 1 (External trigger polarity)  
        .equ TIM8_SMCR_ECE, 1 << 14   @ bitWidth 1 (External clock enable)  
        .equ TIM8_SMCR_ETPS_Shift, 12   @ bitWidth 2 (External trigger prescaler)  
        .equ TIM8_SMCR_ETF_Shift, 8   @ bitWidth 4 (External trigger filter)  
        .equ TIM8_SMCR_MSM, 1 << 7   @ bitWidth 1 (Master/Slave mode)  
        .equ TIM8_SMCR_TS_Shift, 4   @ bitWidth 3 (Trigger selection)  
        .equ TIM8_SMCR_SMS_Shift, 0   @ bitWidth 3 (Slave mode selection)  
 
    .equ TIM8_DIER, TIM8_BASE + 0xC @ (DMA/Interrupt enable register) 
        .equ TIM8_DIER_TDE, 1 << 14   @ bitWidth 1 (Trigger DMA request enable)  
        .equ TIM8_DIER_COMDE, 1 << 13   @ bitWidth 1 (COM DMA request enable)  
        .equ TIM8_DIER_CC4DE, 1 << 12   @ bitWidth 1 (Capture/Compare 4 DMA request  enable)  
        .equ TIM8_DIER_CC3DE, 1 << 11   @ bitWidth 1 (Capture/Compare 3 DMA request  enable)  
        .equ TIM8_DIER_CC2DE, 1 << 10   @ bitWidth 1 (Capture/Compare 2 DMA request  enable)  
        .equ TIM8_DIER_CC1DE, 1 << 9   @ bitWidth 1 (Capture/Compare 1 DMA request  enable)  
        .equ TIM8_DIER_UDE, 1 << 8   @ bitWidth 1 (Update DMA request enable)  
        .equ TIM8_DIER_TIE, 1 << 6   @ bitWidth 1 (Trigger interrupt enable)  
        .equ TIM8_DIER_CC4IE, 1 << 4   @ bitWidth 1 (Capture/Compare 4 interrupt  enable)  
        .equ TIM8_DIER_CC3IE, 1 << 3   @ bitWidth 1 (Capture/Compare 3 interrupt  enable)  
        .equ TIM8_DIER_CC2IE, 1 << 2   @ bitWidth 1 (Capture/Compare 2 interrupt  enable)  
        .equ TIM8_DIER_CC1IE, 1 << 1   @ bitWidth 1 (Capture/Compare 1 interrupt  enable)  
        .equ TIM8_DIER_UIE, 1 << 0   @ bitWidth 1 (Update interrupt enable)  
        .equ TIM8_DIER_BIE, 1 << 7   @ bitWidth 1 (Break interrupt enable)  
        .equ TIM8_DIER_COMIE, 1 << 5   @ bitWidth 1 (COM interrupt enable)  
 
    .equ TIM8_SR, TIM8_BASE + 0x10 @ (status register) 
        .equ TIM8_SR_CC4OF, 1 << 12   @ bitWidth 1 (Capture/Compare 4 overcapture  flag)  
        .equ TIM8_SR_CC3OF, 1 << 11   @ bitWidth 1 (Capture/Compare 3 overcapture  flag)  
        .equ TIM8_SR_CC2OF, 1 << 10   @ bitWidth 1 (Capture/compare 2 overcapture  flag)  
        .equ TIM8_SR_CC1OF, 1 << 9   @ bitWidth 1 (Capture/Compare 1 overcapture  flag)  
        .equ TIM8_SR_BIF, 1 << 7   @ bitWidth 1 (Break interrupt flag)  
        .equ TIM8_SR_TIF, 1 << 6   @ bitWidth 1 (Trigger interrupt flag)  
        .equ TIM8_SR_COMIF, 1 << 5   @ bitWidth 1 (COM interrupt flag)  
        .equ TIM8_SR_CC4IF, 1 << 4   @ bitWidth 1 (Capture/Compare 4 interrupt  flag)  
        .equ TIM8_SR_CC3IF, 1 << 3   @ bitWidth 1 (Capture/Compare 3 interrupt  flag)  
        .equ TIM8_SR_CC2IF, 1 << 2   @ bitWidth 1 (Capture/Compare 2 interrupt  flag)  
        .equ TIM8_SR_CC1IF, 1 << 1   @ bitWidth 1 (Capture/compare 1 interrupt  flag)  
        .equ TIM8_SR_UIF, 1 << 0   @ bitWidth 1 (Update interrupt flag)  
 
    .equ TIM8_EGR, TIM8_BASE + 0x14 @ (event generation register) 
        .equ TIM8_EGR_BG, 1 << 7   @ bitWidth 1 (Break generation)  
        .equ TIM8_EGR_TG, 1 << 6   @ bitWidth 1 (Trigger generation)  
        .equ TIM8_EGR_COMG, 1 << 5   @ bitWidth 1 (Capture/Compare control update  generation)  
        .equ TIM8_EGR_CC4G, 1 << 4   @ bitWidth 1 (Capture/compare 4  generation)  
        .equ TIM8_EGR_CC3G, 1 << 3   @ bitWidth 1 (Capture/compare 3  generation)  
        .equ TIM8_EGR_CC2G, 1 << 2   @ bitWidth 1 (Capture/compare 2  generation)  
        .equ TIM8_EGR_CC1G, 1 << 1   @ bitWidth 1 (Capture/compare 1  generation)  
        .equ TIM8_EGR_UG, 1 << 0   @ bitWidth 1 (Update generation)  
 
    .equ TIM8_CCMR1_Output, TIM8_BASE + 0x18 @ (capture/compare mode register 1 output  mode) 
        .equ TIM8_CCMR1_Output_OC2CE, 1 << 15   @ bitWidth 1 (Output Compare 2 clear  enable)  
        .equ TIM8_CCMR1_Output_OC2M_Shift, 12   @ bitWidth 3 (Output Compare 2 mode)  
        .equ TIM8_CCMR1_Output_OC2PE, 1 << 11   @ bitWidth 1 (Output Compare 2 preload  enable)  
        .equ TIM8_CCMR1_Output_OC2FE, 1 << 10   @ bitWidth 1 (Output Compare 2 fast  enable)  
        .equ TIM8_CCMR1_Output_CC2S_Shift, 8   @ bitWidth 2 (Capture/Compare 2  selection)  
        .equ TIM8_CCMR1_Output_OC1CE, 1 << 7   @ bitWidth 1 (Output Compare 1 clear  enable)  
        .equ TIM8_CCMR1_Output_OC1M_Shift, 4   @ bitWidth 3 (Output Compare 1 mode)  
        .equ TIM8_CCMR1_Output_OC1PE, 1 << 3   @ bitWidth 1 (Output Compare 1 preload  enable)  
        .equ TIM8_CCMR1_Output_OC1FE, 1 << 2   @ bitWidth 1 (Output Compare 1 fast  enable)  
        .equ TIM8_CCMR1_Output_CC1S_Shift, 0   @ bitWidth 2 (Capture/Compare 1  selection)  
 
    .equ TIM8_CCMR1_Input, TIM8_BASE + 0x18 @ (capture/compare mode register 1 input  mode) 
        .equ TIM8_CCMR1_Input_IC2F_Shift, 12   @ bitWidth 4 (Input capture 2 filter)  
        .equ TIM8_CCMR1_Input_IC2PCS_Shift, 10   @ bitWidth 2 (Input capture 2 prescaler)  
        .equ TIM8_CCMR1_Input_CC2S_Shift, 8   @ bitWidth 2 (Capture/Compare 2  selection)  
        .equ TIM8_CCMR1_Input_IC1F_Shift, 4   @ bitWidth 4 (Input capture 1 filter)  
        .equ TIM8_CCMR1_Input_ICPCS_Shift, 2   @ bitWidth 2 (Input capture 1 prescaler)  
        .equ TIM8_CCMR1_Input_CC1S_Shift, 0   @ bitWidth 2 (Capture/Compare 1  selection)  
 
    .equ TIM8_CCMR2_Output, TIM8_BASE + 0x1C @ (capture/compare mode register 2 output  mode) 
        .equ TIM8_CCMR2_Output_OC4CE, 1 << 15   @ bitWidth 1 (Output compare 4 clear  enable)  
        .equ TIM8_CCMR2_Output_OC4M_Shift, 12   @ bitWidth 3 (Output compare 4 mode)  
        .equ TIM8_CCMR2_Output_OC4PE, 1 << 11   @ bitWidth 1 (Output compare 4 preload  enable)  
        .equ TIM8_CCMR2_Output_OC4FE, 1 << 10   @ bitWidth 1 (Output compare 4 fast  enable)  
        .equ TIM8_CCMR2_Output_CC4S_Shift, 8   @ bitWidth 2 (Capture/Compare 4  selection)  
        .equ TIM8_CCMR2_Output_OC3CE, 1 << 7   @ bitWidth 1 (Output compare 3 clear  enable)  
        .equ TIM8_CCMR2_Output_OC3M_Shift, 4   @ bitWidth 3 (Output compare 3 mode)  
        .equ TIM8_CCMR2_Output_OC3PE, 1 << 3   @ bitWidth 1 (Output compare 3 preload  enable)  
        .equ TIM8_CCMR2_Output_OC3FE, 1 << 2   @ bitWidth 1 (Output compare 3 fast  enable)  
        .equ TIM8_CCMR2_Output_CC3S_Shift, 0   @ bitWidth 2 (Capture/Compare 3  selection)  
 
    .equ TIM8_CCMR2_Input, TIM8_BASE + 0x1C @ (capture/compare mode register 2 input  mode) 
        .equ TIM8_CCMR2_Input_IC4F_Shift, 12   @ bitWidth 4 (Input capture 4 filter)  
        .equ TIM8_CCMR2_Input_IC4PSC_Shift, 10   @ bitWidth 2 (Input capture 4 prescaler)  
        .equ TIM8_CCMR2_Input_CC4S_Shift, 8   @ bitWidth 2 (Capture/Compare 4  selection)  
        .equ TIM8_CCMR2_Input_IC3F_Shift, 4   @ bitWidth 4 (Input capture 3 filter)  
        .equ TIM8_CCMR2_Input_IC3PSC_Shift, 2   @ bitWidth 2 (Input capture 3 prescaler)  
        .equ TIM8_CCMR2_Input_CC3S_Shift, 0   @ bitWidth 2 (Capture/compare 3  selection)  
 
    .equ TIM8_CCER, TIM8_BASE + 0x20 @ (capture/compare enable  register) 
        .equ TIM8_CCER_CC4P, 1 << 13   @ bitWidth 1 (Capture/Compare 3 output  Polarity)  
        .equ TIM8_CCER_CC4E, 1 << 12   @ bitWidth 1 (Capture/Compare 4 output  enable)  
        .equ TIM8_CCER_CC3NP, 1 << 11   @ bitWidth 1 (Capture/Compare 3 output  Polarity)  
        .equ TIM8_CCER_CC3NE, 1 << 10   @ bitWidth 1 (Capture/Compare 3 complementary output  enable)  
        .equ TIM8_CCER_CC3P, 1 << 9   @ bitWidth 1 (Capture/Compare 3 output  Polarity)  
        .equ TIM8_CCER_CC3E, 1 << 8   @ bitWidth 1 (Capture/Compare 3 output  enable)  
        .equ TIM8_CCER_CC2NP, 1 << 7   @ bitWidth 1 (Capture/Compare 2 output  Polarity)  
        .equ TIM8_CCER_CC2NE, 1 << 6   @ bitWidth 1 (Capture/Compare 2 complementary output  enable)  
        .equ TIM8_CCER_CC2P, 1 << 5   @ bitWidth 1 (Capture/Compare 2 output  Polarity)  
        .equ TIM8_CCER_CC2E, 1 << 4   @ bitWidth 1 (Capture/Compare 2 output  enable)  
        .equ TIM8_CCER_CC1NP, 1 << 3   @ bitWidth 1 (Capture/Compare 1 output  Polarity)  
        .equ TIM8_CCER_CC1NE, 1 << 2   @ bitWidth 1 (Capture/Compare 1 complementary output  enable)  
        .equ TIM8_CCER_CC1P, 1 << 1   @ bitWidth 1 (Capture/Compare 1 output  Polarity)  
        .equ TIM8_CCER_CC1E, 1 << 0   @ bitWidth 1 (Capture/Compare 1 output  enable)  
 
    .equ TIM8_CNT, TIM8_BASE + 0x24 @ (counter) 
        .equ TIM8_CNT_CNT_Shift, 0   @ bitWidth 16 (counter value)  
 
    .equ TIM8_PSC, TIM8_BASE + 0x28 @ (prescaler) 
        .equ TIM8_PSC_PSC_Shift, 0   @ bitWidth 16 (Prescaler value)  
 
    .equ TIM8_ARR, TIM8_BASE + 0x2C @ (auto-reload register) 
        .equ TIM8_ARR_ARR_Shift, 0   @ bitWidth 16 (Auto-reload value)  
 
    .equ TIM8_RCR, TIM8_BASE + 0x30 @ (repetition counter register) 
        .equ TIM8_RCR_REP_Shift, 0   @ bitWidth 8 (Repetition counter value)  
 
    .equ TIM8_CCR1, TIM8_BASE + 0x34 @ (capture/compare register 1) 
        .equ TIM8_CCR1_CCR1_Shift, 0   @ bitWidth 16 (Capture/Compare 1 value)  
 
    .equ TIM8_CCR2, TIM8_BASE + 0x38 @ (capture/compare register 2) 
        .equ TIM8_CCR2_CCR2_Shift, 0   @ bitWidth 16 (Capture/Compare 2 value)  
 
    .equ TIM8_CCR3, TIM8_BASE + 0x3C @ (capture/compare register 3) 
        .equ TIM8_CCR3_CCR3_Shift, 0   @ bitWidth 16 (Capture/Compare value)  
 
    .equ TIM8_CCR4, TIM8_BASE + 0x40 @ (capture/compare register 4) 
        .equ TIM8_CCR4_CCR4_Shift, 0   @ bitWidth 16 (Capture/Compare value)  
 
    .equ TIM8_BDTR, TIM8_BASE + 0x44 @ (break and dead-time register) 
        .equ TIM8_BDTR_MOE, 1 << 15   @ bitWidth 1 (Main output enable)  
        .equ TIM8_BDTR_AOE, 1 << 14   @ bitWidth 1 (Automatic output enable)  
        .equ TIM8_BDTR_BKP, 1 << 13   @ bitWidth 1 (Break polarity)  
        .equ TIM8_BDTR_BKE, 1 << 12   @ bitWidth 1 (Break enable)  
        .equ TIM8_BDTR_OSSR, 1 << 11   @ bitWidth 1 (Off-state selection for Run  mode)  
        .equ TIM8_BDTR_OSSI, 1 << 10   @ bitWidth 1 (Off-state selection for Idle  mode)  
        .equ TIM8_BDTR_LOCK_Shift, 8   @ bitWidth 2 (Lock configuration)  
        .equ TIM8_BDTR_DTG_Shift, 0   @ bitWidth 8 (Dead-time generator setup)  
 
    .equ TIM8_DCR, TIM8_BASE + 0x48 @ (DMA control register) 
        .equ TIM8_DCR_DBL_Shift, 8   @ bitWidth 5 (DMA burst length)  
        .equ TIM8_DCR_DBA_Shift, 0   @ bitWidth 5 (DMA base address)  
 
    .equ TIM8_DMAR, TIM8_BASE + 0x4C @ (DMA address for full transfer) 
        .equ TIM8_DMAR_DMAB_Shift, 0   @ bitWidth 16 (DMA register for burst  accesses)  
 
    .equ TIM8_OR1, TIM8_BASE + 0x50 @ (DMA address for full transfer) 
        .equ TIM8_OR1_ETR_ADC2_RMP_Shift, 0   @ bitWidth 2 (External trigger remap on ADC2 analog  watchdog)  
        .equ TIM8_OR1_ETR_ADC3_RMP_Shift, 2   @ bitWidth 2 (External trigger remap on ADC3 analog  watchdog)  
        .equ TIM8_OR1_TI1_RMP, 1 << 4   @ bitWidth 1 (Input Capture 1 remap)  
 
    .equ TIM8_CCMR3_Output, TIM8_BASE + 0x54 @ (capture/compare mode register 2 output  mode) 
        .equ TIM8_CCMR3_Output_OC6M_bit3, 1 << 24   @ bitWidth 1 (Output Compare 6 mode bit  3)  
        .equ TIM8_CCMR3_Output_OC5M_bit3_Shift, 16   @ bitWidth 3 (Output Compare 5 mode bit  3)  
        .equ TIM8_CCMR3_Output_OC6CE, 1 << 15   @ bitWidth 1 (Output compare 6 clear  enable)  
        .equ TIM8_CCMR3_Output_OC6M_Shift, 12   @ bitWidth 3 (Output compare 6 mode)  
        .equ TIM8_CCMR3_Output_OC6PE, 1 << 11   @ bitWidth 1 (Output compare 6 preload  enable)  
        .equ TIM8_CCMR3_Output_OC6FE, 1 << 10   @ bitWidth 1 (Output compare 6 fast  enable)  
        .equ TIM8_CCMR3_Output_OC5CE, 1 << 7   @ bitWidth 1 (Output compare 5 clear  enable)  
        .equ TIM8_CCMR3_Output_OC5M_Shift, 4   @ bitWidth 3 (Output compare 5 mode)  
        .equ TIM8_CCMR3_Output_OC5PE, 1 << 3   @ bitWidth 1 (Output compare 5 preload  enable)  
        .equ TIM8_CCMR3_Output_OC5FE, 1 << 2   @ bitWidth 1 (Output compare 5 fast  enable)  
 
    .equ TIM8_CCR5, TIM8_BASE + 0x58 @ (capture/compare register 4) 
        .equ TIM8_CCR5_CCR5_Shift, 0   @ bitWidth 16 (Capture/Compare value)  
        .equ TIM8_CCR5_GC5C1, 1 << 29   @ bitWidth 1 (Group Channel 5 and Channel  1)  
        .equ TIM8_CCR5_GC5C2, 1 << 30   @ bitWidth 1 (Group Channel 5 and Channel  2)  
        .equ TIM8_CCR5_GC5C3, 1 << 31   @ bitWidth 1 (Group Channel 5 and Channel  3)  
 
    .equ TIM8_CCR6, TIM8_BASE + 0x5C @ (capture/compare register 4) 
        .equ TIM8_CCR6_CCR6_Shift, 0   @ bitWidth 16 (Capture/Compare value)  
 
    .equ TIM8_OR2, TIM8_BASE + 0x60 @ (DMA address for full transfer) 
        .equ TIM8_OR2_BKINE, 1 << 0   @ bitWidth 1 (BRK BKIN input enable)  
        .equ TIM8_OR2_BKCMP1E, 1 << 1   @ bitWidth 1 (BRK COMP1 enable)  
        .equ TIM8_OR2_BKCMP2E, 1 << 2   @ bitWidth 1 (BRK COMP2 enable)  
        .equ TIM8_OR2_BKDFBK2E, 1 << 8   @ bitWidth 1 (BRK DFSDM_BREAK2 enable)  
        .equ TIM8_OR2_BKINP, 1 << 9   @ bitWidth 1 (BRK BKIN input polarity)  
        .equ TIM8_OR2_BKCMP1P, 1 << 10   @ bitWidth 1 (BRK COMP1 input polarity)  
        .equ TIM8_OR2_BKCMP2P, 1 << 11   @ bitWidth 1 (BRK COMP2 input polarity)  
        .equ TIM8_OR2_ETRSEL_Shift, 14   @ bitWidth 3 (ETR source selection)  
 
    .equ TIM8_OR3, TIM8_BASE + 0x64 @ (DMA address for full transfer) 
        .equ TIM8_OR3_BK2INE, 1 << 0   @ bitWidth 1 (BRK2 BKIN input enable)  
        .equ TIM8_OR3_BK2CMP1E, 1 << 1   @ bitWidth 1 (BRK2 COMP1 enable)  
        .equ TIM8_OR3_BK2CMP2E, 1 << 2   @ bitWidth 1 (BRK2 COMP2 enable)  
        .equ TIM8_OR3_BK2DFBK3E, 1 << 8   @ bitWidth 1 (BRK2 DFSDM_BREAK3 enable)  
        .equ TIM8_OR3_BK2INP, 1 << 9   @ bitWidth 1 (BRK2 BKIN input polarity)  
        .equ TIM8_OR3_BK2CMP1P, 1 << 10   @ bitWidth 1 (BRK2 COMP1 input polarity)  
        .equ TIM8_OR3_BK2CMP2P, 1 << 11   @ bitWidth 1 (BRK2 COMP2 input polarity)  
 

@=========================== TIM6 ===========================@
.equ TIM6_BASE, 0x40001000 @ (Basic-timers) 
    .equ TIM6_CR1, TIM6_BASE + 0x0 @ (control register 1) 
        .equ TIM6_CR1_ARPE, 1 << 7   @ bitWidth 1 (Auto-reload preload enable)  
        .equ TIM6_CR1_OPM, 1 << 3   @ bitWidth 1 (One-pulse mode)  
        .equ TIM6_CR1_URS, 1 << 2   @ bitWidth 1 (Update request source)  
        .equ TIM6_CR1_UDIS, 1 << 1   @ bitWidth 1 (Update disable)  
        .equ TIM6_CR1_CEN, 1 << 0   @ bitWidth 1 (Counter enable)  
 
    .equ TIM6_CR2, TIM6_BASE + 0x4 @ (control register 2) 
        .equ TIM6_CR2_MMS_Shift, 4   @ bitWidth 3 (Master mode selection)  
 
    .equ TIM6_DIER, TIM6_BASE + 0xC @ (DMA/Interrupt enable register) 
        .equ TIM6_DIER_UDE, 1 << 8   @ bitWidth 1 (Update DMA request enable)  
        .equ TIM6_DIER_UIE, 1 << 0   @ bitWidth 1 (Update interrupt enable)  
 
    .equ TIM6_SR, TIM6_BASE + 0x10 @ (status register) 
        .equ TIM6_SR_UIF, 1 << 0   @ bitWidth 1 (Update interrupt flag)  
 
    .equ TIM6_EGR, TIM6_BASE + 0x14 @ (event generation register) 
        .equ TIM6_EGR_UG, 1 << 0   @ bitWidth 1 (Update generation)  
 
    .equ TIM6_CNT, TIM6_BASE + 0x24 @ (counter) 
        .equ TIM6_CNT_CNT_Shift, 0   @ bitWidth 16 (Low counter value)  
 
    .equ TIM6_PSC, TIM6_BASE + 0x28 @ (prescaler) 
        .equ TIM6_PSC_PSC_Shift, 0   @ bitWidth 16 (Prescaler value)  
 
    .equ TIM6_ARR, TIM6_BASE + 0x2C @ (auto-reload register) 
        .equ TIM6_ARR_ARR_Shift, 0   @ bitWidth 16 (Low Auto-reload value)  
 

@=========================== TIM7 ===========================@
.equ TIM7_BASE, 0x40001400 @ (Basic-timers) 
    .equ TIM7_CR1, TIM7_BASE + 0x0 @ (control register 1) 
        .equ TIM7_CR1_ARPE, 1 << 7   @ bitWidth 1 (Auto-reload preload enable)  
        .equ TIM7_CR1_OPM, 1 << 3   @ bitWidth 1 (One-pulse mode)  
        .equ TIM7_CR1_URS, 1 << 2   @ bitWidth 1 (Update request source)  
        .equ TIM7_CR1_UDIS, 1 << 1   @ bitWidth 1 (Update disable)  
        .equ TIM7_CR1_CEN, 1 << 0   @ bitWidth 1 (Counter enable)  
 
    .equ TIM7_CR2, TIM7_BASE + 0x4 @ (control register 2) 
        .equ TIM7_CR2_MMS_Shift, 4   @ bitWidth 3 (Master mode selection)  
 
    .equ TIM7_DIER, TIM7_BASE + 0xC @ (DMA/Interrupt enable register) 
        .equ TIM7_DIER_UDE, 1 << 8   @ bitWidth 1 (Update DMA request enable)  
        .equ TIM7_DIER_UIE, 1 << 0   @ bitWidth 1 (Update interrupt enable)  
 
    .equ TIM7_SR, TIM7_BASE + 0x10 @ (status register) 
        .equ TIM7_SR_UIF, 1 << 0   @ bitWidth 1 (Update interrupt flag)  
 
    .equ TIM7_EGR, TIM7_BASE + 0x14 @ (event generation register) 
        .equ TIM7_EGR_UG, 1 << 0   @ bitWidth 1 (Update generation)  
 
    .equ TIM7_CNT, TIM7_BASE + 0x24 @ (counter) 
        .equ TIM7_CNT_CNT_Shift, 0   @ bitWidth 16 (Low counter value)  
 
    .equ TIM7_PSC, TIM7_BASE + 0x28 @ (prescaler) 
        .equ TIM7_PSC_PSC_Shift, 0   @ bitWidth 16 (Prescaler value)  
 
    .equ TIM7_ARR, TIM7_BASE + 0x2C @ (auto-reload register) 
        .equ TIM7_ARR_ARR_Shift, 0   @ bitWidth 16 (Low Auto-reload value)  
 

@=========================== USART1 ===========================@
.equ USART1_BASE, 0x40013800 @ (Universal synchronous asynchronous receiver  transmitter) 
    .equ USART1_CR1, USART1_BASE + 0x0 @ (Control register 1) 
        .equ USART1_CR1_M1, 1 << 28   @ bitWidth 1 (Word length)  
        .equ USART1_CR1_EOBIE, 1 << 27   @ bitWidth 1 (End of Block interrupt  enable)  
        .equ USART1_CR1_RTOIE, 1 << 26   @ bitWidth 1 (Receiver timeout interrupt  enable)  
        .equ USART1_CR1_DEAT4, 1 << 25   @ bitWidth 1 (Driver Enable assertion  time)  
        .equ USART1_CR1_DEAT3, 1 << 24   @ bitWidth 1 (DEAT3)  
        .equ USART1_CR1_DEAT2, 1 << 23   @ bitWidth 1 (DEAT2)  
        .equ USART1_CR1_DEAT1, 1 << 22   @ bitWidth 1 (DEAT1)  
        .equ USART1_CR1_DEAT0, 1 << 21   @ bitWidth 1 (DEAT0)  
        .equ USART1_CR1_DEDT4, 1 << 20   @ bitWidth 1 (Driver Enable de-assertion  time)  
        .equ USART1_CR1_DEDT3, 1 << 19   @ bitWidth 1 (DEDT3)  
        .equ USART1_CR1_DEDT2, 1 << 18   @ bitWidth 1 (DEDT2)  
        .equ USART1_CR1_DEDT1, 1 << 17   @ bitWidth 1 (DEDT1)  
        .equ USART1_CR1_DEDT0, 1 << 16   @ bitWidth 1 (DEDT0)  
        .equ USART1_CR1_OVER8, 1 << 15   @ bitWidth 1 (Oversampling mode)  
        .equ USART1_CR1_CMIE, 1 << 14   @ bitWidth 1 (Character match interrupt  enable)  
        .equ USART1_CR1_MME, 1 << 13   @ bitWidth 1 (Mute mode enable)  
        .equ USART1_CR1_M0, 1 << 12   @ bitWidth 1 (Word length)  
        .equ USART1_CR1_WAKE, 1 << 11   @ bitWidth 1 (Receiver wakeup method)  
        .equ USART1_CR1_PCE, 1 << 10   @ bitWidth 1 (Parity control enable)  
        .equ USART1_CR1_PS, 1 << 9   @ bitWidth 1 (Parity selection)  
        .equ USART1_CR1_PEIE, 1 << 8   @ bitWidth 1 (PE interrupt enable)  
        .equ USART1_CR1_TXEIE, 1 << 7   @ bitWidth 1 (interrupt enable)  
        .equ USART1_CR1_TCIE, 1 << 6   @ bitWidth 1 (Transmission complete interrupt  enable)  
        .equ USART1_CR1_RXNEIE, 1 << 5   @ bitWidth 1 (RXNE interrupt enable)  
        .equ USART1_CR1_IDLEIE, 1 << 4   @ bitWidth 1 (IDLE interrupt enable)  
        .equ USART1_CR1_TE, 1 << 3   @ bitWidth 1 (Transmitter enable)  
        .equ USART1_CR1_RE, 1 << 2   @ bitWidth 1 (Receiver enable)  
        .equ USART1_CR1_UESM, 1 << 1   @ bitWidth 1 (USART enable in Stop mode)  
        .equ USART1_CR1_UE, 1 << 0   @ bitWidth 1 (USART enable)  
 
    .equ USART1_CR2, USART1_BASE + 0x4 @ (Control register 2) 
        .equ USART1_CR2_ADD4_7_Shift, 28   @ bitWidth 4 (Address of the USART node)  
        .equ USART1_CR2_ADD0_3_Shift, 24   @ bitWidth 4 (Address of the USART node)  
        .equ USART1_CR2_RTOEN, 1 << 23   @ bitWidth 1 (Receiver timeout enable)  
        .equ USART1_CR2_ABRMOD1, 1 << 22   @ bitWidth 1 (Auto baud rate mode)  
        .equ USART1_CR2_ABRMOD0, 1 << 21   @ bitWidth 1 (ABRMOD0)  
        .equ USART1_CR2_ABREN, 1 << 20   @ bitWidth 1 (Auto baud rate enable)  
        .equ USART1_CR2_MSBFIRST, 1 << 19   @ bitWidth 1 (Most significant bit first)  
        .equ USART1_CR2_TAINV, 1 << 18   @ bitWidth 1 (Binary data inversion)  
        .equ USART1_CR2_TXINV, 1 << 17   @ bitWidth 1 (TX pin active level  inversion)  
        .equ USART1_CR2_RXINV, 1 << 16   @ bitWidth 1 (RX pin active level  inversion)  
        .equ USART1_CR2_SWAP, 1 << 15   @ bitWidth 1 (Swap TX/RX pins)  
        .equ USART1_CR2_LINEN, 1 << 14   @ bitWidth 1 (LIN mode enable)  
        .equ USART1_CR2_STOP_Shift, 12   @ bitWidth 2 (STOP bits)  
        .equ USART1_CR2_CLKEN, 1 << 11   @ bitWidth 1 (Clock enable)  
        .equ USART1_CR2_CPOL, 1 << 10   @ bitWidth 1 (Clock polarity)  
        .equ USART1_CR2_CPHA, 1 << 9   @ bitWidth 1 (Clock phase)  
        .equ USART1_CR2_LBCL, 1 << 8   @ bitWidth 1 (Last bit clock pulse)  
        .equ USART1_CR2_LBDIE, 1 << 6   @ bitWidth 1 (LIN break detection interrupt  enable)  
        .equ USART1_CR2_LBDL, 1 << 5   @ bitWidth 1 (LIN break detection length)  
        .equ USART1_CR2_ADDM7, 1 << 4   @ bitWidth 1 (7-bit Address Detection/4-bit Address  Detection)  
 
    .equ USART1_CR3, USART1_BASE + 0x8 @ (Control register 3) 
        .equ USART1_CR3_WUFIE, 1 << 22   @ bitWidth 1 (Wakeup from Stop mode interrupt  enable)  
        .equ USART1_CR3_WUS_Shift, 20   @ bitWidth 2 (Wakeup from Stop mode interrupt flag  selection)  
        .equ USART1_CR3_SCARCNT_Shift, 17   @ bitWidth 3 (Smartcard auto-retry count)  
        .equ USART1_CR3_DEP, 1 << 15   @ bitWidth 1 (Driver enable polarity  selection)  
        .equ USART1_CR3_DEM, 1 << 14   @ bitWidth 1 (Driver enable mode)  
        .equ USART1_CR3_DDRE, 1 << 13   @ bitWidth 1 (DMA Disable on Reception  Error)  
        .equ USART1_CR3_OVRDIS, 1 << 12   @ bitWidth 1 (Overrun Disable)  
        .equ USART1_CR3_ONEBIT, 1 << 11   @ bitWidth 1 (One sample bit method  enable)  
        .equ USART1_CR3_CTSIE, 1 << 10   @ bitWidth 1 (CTS interrupt enable)  
        .equ USART1_CR3_CTSE, 1 << 9   @ bitWidth 1 (CTS enable)  
        .equ USART1_CR3_RTSE, 1 << 8   @ bitWidth 1 (RTS enable)  
        .equ USART1_CR3_DMAT, 1 << 7   @ bitWidth 1 (DMA enable transmitter)  
        .equ USART1_CR3_DMAR, 1 << 6   @ bitWidth 1 (DMA enable receiver)  
        .equ USART1_CR3_SCEN, 1 << 5   @ bitWidth 1 (Smartcard mode enable)  
        .equ USART1_CR3_NACK, 1 << 4   @ bitWidth 1 (Smartcard NACK enable)  
        .equ USART1_CR3_HDSEL, 1 << 3   @ bitWidth 1 (Half-duplex selection)  
        .equ USART1_CR3_IRLP, 1 << 2   @ bitWidth 1 (Ir low-power)  
        .equ USART1_CR3_IREN, 1 << 1   @ bitWidth 1 (Ir mode enable)  
        .equ USART1_CR3_EIE, 1 << 0   @ bitWidth 1 (Error interrupt enable)  
 
    .equ USART1_BRR, USART1_BASE + 0xC @ (Baud rate register) 
        .equ USART1_BRR_DIV_Mantissa_Shift, 4   @ bitWidth 12 (DIV_Mantissa)  
        .equ USART1_BRR_DIV_Fraction_Shift, 0   @ bitWidth 4 (DIV_Fraction)  
 
    .equ USART1_GTPR, USART1_BASE + 0x10 @ (Guard time and prescaler  register) 
        .equ USART1_GTPR_GT_Shift, 8   @ bitWidth 8 (Guard time value)  
        .equ USART1_GTPR_PSC_Shift, 0   @ bitWidth 8 (Prescaler value)  
 
    .equ USART1_RTOR, USART1_BASE + 0x14 @ (Receiver timeout register) 
        .equ USART1_RTOR_BLEN_Shift, 24   @ bitWidth 8 (Block Length)  
        .equ USART1_RTOR_RTO_Shift, 0   @ bitWidth 24 (Receiver timeout value)  
 
    .equ USART1_RQR, USART1_BASE + 0x18 @ (Request register) 
        .equ USART1_RQR_TXFRQ, 1 << 4   @ bitWidth 1 (Transmit data flush  request)  
        .equ USART1_RQR_RXFRQ, 1 << 3   @ bitWidth 1 (Receive data flush request)  
        .equ USART1_RQR_MMRQ, 1 << 2   @ bitWidth 1 (Mute mode request)  
        .equ USART1_RQR_SBKRQ, 1 << 1   @ bitWidth 1 (Send break request)  
        .equ USART1_RQR_ABRRQ, 1 << 0   @ bitWidth 1 (Auto baud rate request)  
 
    .equ USART1_ISR, USART1_BASE + 0x1C @ (Interrupt & status  register) 
        .equ USART1_ISR_REACK, 1 << 22   @ bitWidth 1 (REACK)  
        .equ USART1_ISR_TEACK, 1 << 21   @ bitWidth 1 (TEACK)  
        .equ USART1_ISR_WUF, 1 << 20   @ bitWidth 1 (WUF)  
        .equ USART1_ISR_RWU, 1 << 19   @ bitWidth 1 (RWU)  
        .equ USART1_ISR_SBKF, 1 << 18   @ bitWidth 1 (SBKF)  
        .equ USART1_ISR_CMF, 1 << 17   @ bitWidth 1 (CMF)  
        .equ USART1_ISR_BUSY, 1 << 16   @ bitWidth 1 (BUSY)  
        .equ USART1_ISR_ABRF, 1 << 15   @ bitWidth 1 (ABRF)  
        .equ USART1_ISR_ABRE, 1 << 14   @ bitWidth 1 (ABRE)  
        .equ USART1_ISR_EOBF, 1 << 12   @ bitWidth 1 (EOBF)  
        .equ USART1_ISR_RTOF, 1 << 11   @ bitWidth 1 (RTOF)  
        .equ USART1_ISR_CTS, 1 << 10   @ bitWidth 1 (CTS)  
        .equ USART1_ISR_CTSIF, 1 << 9   @ bitWidth 1 (CTSIF)  
        .equ USART1_ISR_LBDF, 1 << 8   @ bitWidth 1 (LBDF)  
        .equ USART1_ISR_TXE, 1 << 7   @ bitWidth 1 (TXE)  
        .equ USART1_ISR_TC, 1 << 6   @ bitWidth 1 (TC)  
        .equ USART1_ISR_RXNE, 1 << 5   @ bitWidth 1 (RXNE)  
        .equ USART1_ISR_IDLE, 1 << 4   @ bitWidth 1 (IDLE)  
        .equ USART1_ISR_ORE, 1 << 3   @ bitWidth 1 (ORE)  
        .equ USART1_ISR_NF, 1 << 2   @ bitWidth 1 (NF)  
        .equ USART1_ISR_FE, 1 << 1   @ bitWidth 1 (FE)  
        .equ USART1_ISR_PE, 1 << 0   @ bitWidth 1 (PE)  
 
    .equ USART1_ICR, USART1_BASE + 0x20 @ (Interrupt flag clear register) 
        .equ USART1_ICR_WUCF, 1 << 20   @ bitWidth 1 (Wakeup from Stop mode clear  flag)  
        .equ USART1_ICR_CMCF, 1 << 17   @ bitWidth 1 (Character match clear flag)  
        .equ USART1_ICR_EOBCF, 1 << 12   @ bitWidth 1 (End of block clear flag)  
        .equ USART1_ICR_RTOCF, 1 << 11   @ bitWidth 1 (Receiver timeout clear  flag)  
        .equ USART1_ICR_CTSCF, 1 << 9   @ bitWidth 1 (CTS clear flag)  
        .equ USART1_ICR_LBDCF, 1 << 8   @ bitWidth 1 (LIN break detection clear  flag)  
        .equ USART1_ICR_TCCF, 1 << 6   @ bitWidth 1 (Transmission complete clear  flag)  
        .equ USART1_ICR_IDLECF, 1 << 4   @ bitWidth 1 (Idle line detected clear  flag)  
        .equ USART1_ICR_ORECF, 1 << 3   @ bitWidth 1 (Overrun error clear flag)  
        .equ USART1_ICR_NCF, 1 << 2   @ bitWidth 1 (Noise detected clear flag)  
        .equ USART1_ICR_FECF, 1 << 1   @ bitWidth 1 (Framing error clear flag)  
        .equ USART1_ICR_PECF, 1 << 0   @ bitWidth 1 (Parity error clear flag)  
 
    .equ USART1_RDR, USART1_BASE + 0x24 @ (Receive data register) 
        .equ USART1_RDR_RDR_Shift, 0   @ bitWidth 9 (Receive data value)  
 
    .equ USART1_TDR, USART1_BASE + 0x28 @ (Transmit data register) 
        .equ USART1_TDR_TDR_Shift, 0   @ bitWidth 9 (Transmit data value)  
 

@=========================== USART2 ===========================@
.equ USART2_BASE, 0x40004400 @ (Universal synchronous asynchronous receiver  transmitter) 
    .equ USART2_CR1, USART2_BASE + 0x0 @ (Control register 1) 
        .equ USART2_CR1_M1, 1 << 28   @ bitWidth 1 (Word length)  
        .equ USART2_CR1_EOBIE, 1 << 27   @ bitWidth 1 (End of Block interrupt  enable)  
        .equ USART2_CR1_RTOIE, 1 << 26   @ bitWidth 1 (Receiver timeout interrupt  enable)  
        .equ USART2_CR1_DEAT4, 1 << 25   @ bitWidth 1 (Driver Enable assertion  time)  
        .equ USART2_CR1_DEAT3, 1 << 24   @ bitWidth 1 (DEAT3)  
        .equ USART2_CR1_DEAT2, 1 << 23   @ bitWidth 1 (DEAT2)  
        .equ USART2_CR1_DEAT1, 1 << 22   @ bitWidth 1 (DEAT1)  
        .equ USART2_CR1_DEAT0, 1 << 21   @ bitWidth 1 (DEAT0)  
        .equ USART2_CR1_DEDT4, 1 << 20   @ bitWidth 1 (Driver Enable de-assertion  time)  
        .equ USART2_CR1_DEDT3, 1 << 19   @ bitWidth 1 (DEDT3)  
        .equ USART2_CR1_DEDT2, 1 << 18   @ bitWidth 1 (DEDT2)  
        .equ USART2_CR1_DEDT1, 1 << 17   @ bitWidth 1 (DEDT1)  
        .equ USART2_CR1_DEDT0, 1 << 16   @ bitWidth 1 (DEDT0)  
        .equ USART2_CR1_OVER8, 1 << 15   @ bitWidth 1 (Oversampling mode)  
        .equ USART2_CR1_CMIE, 1 << 14   @ bitWidth 1 (Character match interrupt  enable)  
        .equ USART2_CR1_MME, 1 << 13   @ bitWidth 1 (Mute mode enable)  
        .equ USART2_CR1_M0, 1 << 12   @ bitWidth 1 (Word length)  
        .equ USART2_CR1_WAKE, 1 << 11   @ bitWidth 1 (Receiver wakeup method)  
        .equ USART2_CR1_PCE, 1 << 10   @ bitWidth 1 (Parity control enable)  
        .equ USART2_CR1_PS, 1 << 9   @ bitWidth 1 (Parity selection)  
        .equ USART2_CR1_PEIE, 1 << 8   @ bitWidth 1 (PE interrupt enable)  
        .equ USART2_CR1_TXEIE, 1 << 7   @ bitWidth 1 (interrupt enable)  
        .equ USART2_CR1_TCIE, 1 << 6   @ bitWidth 1 (Transmission complete interrupt  enable)  
        .equ USART2_CR1_RXNEIE, 1 << 5   @ bitWidth 1 (RXNE interrupt enable)  
        .equ USART2_CR1_IDLEIE, 1 << 4   @ bitWidth 1 (IDLE interrupt enable)  
        .equ USART2_CR1_TE, 1 << 3   @ bitWidth 1 (Transmitter enable)  
        .equ USART2_CR1_RE, 1 << 2   @ bitWidth 1 (Receiver enable)  
        .equ USART2_CR1_UESM, 1 << 1   @ bitWidth 1 (USART enable in Stop mode)  
        .equ USART2_CR1_UE, 1 << 0   @ bitWidth 1 (USART enable)  
 
    .equ USART2_CR2, USART2_BASE + 0x4 @ (Control register 2) 
        .equ USART2_CR2_ADD4_7_Shift, 28   @ bitWidth 4 (Address of the USART node)  
        .equ USART2_CR2_ADD0_3_Shift, 24   @ bitWidth 4 (Address of the USART node)  
        .equ USART2_CR2_RTOEN, 1 << 23   @ bitWidth 1 (Receiver timeout enable)  
        .equ USART2_CR2_ABRMOD1, 1 << 22   @ bitWidth 1 (Auto baud rate mode)  
        .equ USART2_CR2_ABRMOD0, 1 << 21   @ bitWidth 1 (ABRMOD0)  
        .equ USART2_CR2_ABREN, 1 << 20   @ bitWidth 1 (Auto baud rate enable)  
        .equ USART2_CR2_MSBFIRST, 1 << 19   @ bitWidth 1 (Most significant bit first)  
        .equ USART2_CR2_TAINV, 1 << 18   @ bitWidth 1 (Binary data inversion)  
        .equ USART2_CR2_TXINV, 1 << 17   @ bitWidth 1 (TX pin active level  inversion)  
        .equ USART2_CR2_RXINV, 1 << 16   @ bitWidth 1 (RX pin active level  inversion)  
        .equ USART2_CR2_SWAP, 1 << 15   @ bitWidth 1 (Swap TX/RX pins)  
        .equ USART2_CR2_LINEN, 1 << 14   @ bitWidth 1 (LIN mode enable)  
        .equ USART2_CR2_STOP_Shift, 12   @ bitWidth 2 (STOP bits)  
        .equ USART2_CR2_CLKEN, 1 << 11   @ bitWidth 1 (Clock enable)  
        .equ USART2_CR2_CPOL, 1 << 10   @ bitWidth 1 (Clock polarity)  
        .equ USART2_CR2_CPHA, 1 << 9   @ bitWidth 1 (Clock phase)  
        .equ USART2_CR2_LBCL, 1 << 8   @ bitWidth 1 (Last bit clock pulse)  
        .equ USART2_CR2_LBDIE, 1 << 6   @ bitWidth 1 (LIN break detection interrupt  enable)  
        .equ USART2_CR2_LBDL, 1 << 5   @ bitWidth 1 (LIN break detection length)  
        .equ USART2_CR2_ADDM7, 1 << 4   @ bitWidth 1 (7-bit Address Detection/4-bit Address  Detection)  
 
    .equ USART2_CR3, USART2_BASE + 0x8 @ (Control register 3) 
        .equ USART2_CR3_WUFIE, 1 << 22   @ bitWidth 1 (Wakeup from Stop mode interrupt  enable)  
        .equ USART2_CR3_WUS_Shift, 20   @ bitWidth 2 (Wakeup from Stop mode interrupt flag  selection)  
        .equ USART2_CR3_SCARCNT_Shift, 17   @ bitWidth 3 (Smartcard auto-retry count)  
        .equ USART2_CR3_DEP, 1 << 15   @ bitWidth 1 (Driver enable polarity  selection)  
        .equ USART2_CR3_DEM, 1 << 14   @ bitWidth 1 (Driver enable mode)  
        .equ USART2_CR3_DDRE, 1 << 13   @ bitWidth 1 (DMA Disable on Reception  Error)  
        .equ USART2_CR3_OVRDIS, 1 << 12   @ bitWidth 1 (Overrun Disable)  
        .equ USART2_CR3_ONEBIT, 1 << 11   @ bitWidth 1 (One sample bit method  enable)  
        .equ USART2_CR3_CTSIE, 1 << 10   @ bitWidth 1 (CTS interrupt enable)  
        .equ USART2_CR3_CTSE, 1 << 9   @ bitWidth 1 (CTS enable)  
        .equ USART2_CR3_RTSE, 1 << 8   @ bitWidth 1 (RTS enable)  
        .equ USART2_CR3_DMAT, 1 << 7   @ bitWidth 1 (DMA enable transmitter)  
        .equ USART2_CR3_DMAR, 1 << 6   @ bitWidth 1 (DMA enable receiver)  
        .equ USART2_CR3_SCEN, 1 << 5   @ bitWidth 1 (Smartcard mode enable)  
        .equ USART2_CR3_NACK, 1 << 4   @ bitWidth 1 (Smartcard NACK enable)  
        .equ USART2_CR3_HDSEL, 1 << 3   @ bitWidth 1 (Half-duplex selection)  
        .equ USART2_CR3_IRLP, 1 << 2   @ bitWidth 1 (Ir low-power)  
        .equ USART2_CR3_IREN, 1 << 1   @ bitWidth 1 (Ir mode enable)  
        .equ USART2_CR3_EIE, 1 << 0   @ bitWidth 1 (Error interrupt enable)  
 
    .equ USART2_BRR, USART2_BASE + 0xC @ (Baud rate register) 
        .equ USART2_BRR_DIV_Mantissa_Shift, 4   @ bitWidth 12 (DIV_Mantissa)  
        .equ USART2_BRR_DIV_Fraction_Shift, 0   @ bitWidth 4 (DIV_Fraction)  
 
    .equ USART2_GTPR, USART2_BASE + 0x10 @ (Guard time and prescaler  register) 
        .equ USART2_GTPR_GT_Shift, 8   @ bitWidth 8 (Guard time value)  
        .equ USART2_GTPR_PSC_Shift, 0   @ bitWidth 8 (Prescaler value)  
 
    .equ USART2_RTOR, USART2_BASE + 0x14 @ (Receiver timeout register) 
        .equ USART2_RTOR_BLEN_Shift, 24   @ bitWidth 8 (Block Length)  
        .equ USART2_RTOR_RTO_Shift, 0   @ bitWidth 24 (Receiver timeout value)  
 
    .equ USART2_RQR, USART2_BASE + 0x18 @ (Request register) 
        .equ USART2_RQR_TXFRQ, 1 << 4   @ bitWidth 1 (Transmit data flush  request)  
        .equ USART2_RQR_RXFRQ, 1 << 3   @ bitWidth 1 (Receive data flush request)  
        .equ USART2_RQR_MMRQ, 1 << 2   @ bitWidth 1 (Mute mode request)  
        .equ USART2_RQR_SBKRQ, 1 << 1   @ bitWidth 1 (Send break request)  
        .equ USART2_RQR_ABRRQ, 1 << 0   @ bitWidth 1 (Auto baud rate request)  
 
    .equ USART2_ISR, USART2_BASE + 0x1C @ (Interrupt & status  register) 
        .equ USART2_ISR_REACK, 1 << 22   @ bitWidth 1 (REACK)  
        .equ USART2_ISR_TEACK, 1 << 21   @ bitWidth 1 (TEACK)  
        .equ USART2_ISR_WUF, 1 << 20   @ bitWidth 1 (WUF)  
        .equ USART2_ISR_RWU, 1 << 19   @ bitWidth 1 (RWU)  
        .equ USART2_ISR_SBKF, 1 << 18   @ bitWidth 1 (SBKF)  
        .equ USART2_ISR_CMF, 1 << 17   @ bitWidth 1 (CMF)  
        .equ USART2_ISR_BUSY, 1 << 16   @ bitWidth 1 (BUSY)  
        .equ USART2_ISR_ABRF, 1 << 15   @ bitWidth 1 (ABRF)  
        .equ USART2_ISR_ABRE, 1 << 14   @ bitWidth 1 (ABRE)  
        .equ USART2_ISR_EOBF, 1 << 12   @ bitWidth 1 (EOBF)  
        .equ USART2_ISR_RTOF, 1 << 11   @ bitWidth 1 (RTOF)  
        .equ USART2_ISR_CTS, 1 << 10   @ bitWidth 1 (CTS)  
        .equ USART2_ISR_CTSIF, 1 << 9   @ bitWidth 1 (CTSIF)  
        .equ USART2_ISR_LBDF, 1 << 8   @ bitWidth 1 (LBDF)  
        .equ USART2_ISR_TXE, 1 << 7   @ bitWidth 1 (TXE)  
        .equ USART2_ISR_TC, 1 << 6   @ bitWidth 1 (TC)  
        .equ USART2_ISR_RXNE, 1 << 5   @ bitWidth 1 (RXNE)  
        .equ USART2_ISR_IDLE, 1 << 4   @ bitWidth 1 (IDLE)  
        .equ USART2_ISR_ORE, 1 << 3   @ bitWidth 1 (ORE)  
        .equ USART2_ISR_NF, 1 << 2   @ bitWidth 1 (NF)  
        .equ USART2_ISR_FE, 1 << 1   @ bitWidth 1 (FE)  
        .equ USART2_ISR_PE, 1 << 0   @ bitWidth 1 (PE)  
 
    .equ USART2_ICR, USART2_BASE + 0x20 @ (Interrupt flag clear register) 
        .equ USART2_ICR_WUCF, 1 << 20   @ bitWidth 1 (Wakeup from Stop mode clear  flag)  
        .equ USART2_ICR_CMCF, 1 << 17   @ bitWidth 1 (Character match clear flag)  
        .equ USART2_ICR_EOBCF, 1 << 12   @ bitWidth 1 (End of block clear flag)  
        .equ USART2_ICR_RTOCF, 1 << 11   @ bitWidth 1 (Receiver timeout clear  flag)  
        .equ USART2_ICR_CTSCF, 1 << 9   @ bitWidth 1 (CTS clear flag)  
        .equ USART2_ICR_LBDCF, 1 << 8   @ bitWidth 1 (LIN break detection clear  flag)  
        .equ USART2_ICR_TCCF, 1 << 6   @ bitWidth 1 (Transmission complete clear  flag)  
        .equ USART2_ICR_IDLECF, 1 << 4   @ bitWidth 1 (Idle line detected clear  flag)  
        .equ USART2_ICR_ORECF, 1 << 3   @ bitWidth 1 (Overrun error clear flag)  
        .equ USART2_ICR_NCF, 1 << 2   @ bitWidth 1 (Noise detected clear flag)  
        .equ USART2_ICR_FECF, 1 << 1   @ bitWidth 1 (Framing error clear flag)  
        .equ USART2_ICR_PECF, 1 << 0   @ bitWidth 1 (Parity error clear flag)  
 
    .equ USART2_RDR, USART2_BASE + 0x24 @ (Receive data register) 
        .equ USART2_RDR_RDR_Shift, 0   @ bitWidth 9 (Receive data value)  
 
    .equ USART2_TDR, USART2_BASE + 0x28 @ (Transmit data register) 
        .equ USART2_TDR_TDR_Shift, 0   @ bitWidth 9 (Transmit data value)  
 

@=========================== USART3 ===========================@
.equ USART3_BASE, 0x40004800 @ (Universal synchronous asynchronous receiver  transmitter) 
    .equ USART3_CR1, USART3_BASE + 0x0 @ (Control register 1) 
        .equ USART3_CR1_M1, 1 << 28   @ bitWidth 1 (Word length)  
        .equ USART3_CR1_EOBIE, 1 << 27   @ bitWidth 1 (End of Block interrupt  enable)  
        .equ USART3_CR1_RTOIE, 1 << 26   @ bitWidth 1 (Receiver timeout interrupt  enable)  
        .equ USART3_CR1_DEAT4, 1 << 25   @ bitWidth 1 (Driver Enable assertion  time)  
        .equ USART3_CR1_DEAT3, 1 << 24   @ bitWidth 1 (DEAT3)  
        .equ USART3_CR1_DEAT2, 1 << 23   @ bitWidth 1 (DEAT2)  
        .equ USART3_CR1_DEAT1, 1 << 22   @ bitWidth 1 (DEAT1)  
        .equ USART3_CR1_DEAT0, 1 << 21   @ bitWidth 1 (DEAT0)  
        .equ USART3_CR1_DEDT4, 1 << 20   @ bitWidth 1 (Driver Enable de-assertion  time)  
        .equ USART3_CR1_DEDT3, 1 << 19   @ bitWidth 1 (DEDT3)  
        .equ USART3_CR1_DEDT2, 1 << 18   @ bitWidth 1 (DEDT2)  
        .equ USART3_CR1_DEDT1, 1 << 17   @ bitWidth 1 (DEDT1)  
        .equ USART3_CR1_DEDT0, 1 << 16   @ bitWidth 1 (DEDT0)  
        .equ USART3_CR1_OVER8, 1 << 15   @ bitWidth 1 (Oversampling mode)  
        .equ USART3_CR1_CMIE, 1 << 14   @ bitWidth 1 (Character match interrupt  enable)  
        .equ USART3_CR1_MME, 1 << 13   @ bitWidth 1 (Mute mode enable)  
        .equ USART3_CR1_M0, 1 << 12   @ bitWidth 1 (Word length)  
        .equ USART3_CR1_WAKE, 1 << 11   @ bitWidth 1 (Receiver wakeup method)  
        .equ USART3_CR1_PCE, 1 << 10   @ bitWidth 1 (Parity control enable)  
        .equ USART3_CR1_PS, 1 << 9   @ bitWidth 1 (Parity selection)  
        .equ USART3_CR1_PEIE, 1 << 8   @ bitWidth 1 (PE interrupt enable)  
        .equ USART3_CR1_TXEIE, 1 << 7   @ bitWidth 1 (interrupt enable)  
        .equ USART3_CR1_TCIE, 1 << 6   @ bitWidth 1 (Transmission complete interrupt  enable)  
        .equ USART3_CR1_RXNEIE, 1 << 5   @ bitWidth 1 (RXNE interrupt enable)  
        .equ USART3_CR1_IDLEIE, 1 << 4   @ bitWidth 1 (IDLE interrupt enable)  
        .equ USART3_CR1_TE, 1 << 3   @ bitWidth 1 (Transmitter enable)  
        .equ USART3_CR1_RE, 1 << 2   @ bitWidth 1 (Receiver enable)  
        .equ USART3_CR1_UESM, 1 << 1   @ bitWidth 1 (USART enable in Stop mode)  
        .equ USART3_CR1_UE, 1 << 0   @ bitWidth 1 (USART enable)  
 
    .equ USART3_CR2, USART3_BASE + 0x4 @ (Control register 2) 
        .equ USART3_CR2_ADD4_7_Shift, 28   @ bitWidth 4 (Address of the USART node)  
        .equ USART3_CR2_ADD0_3_Shift, 24   @ bitWidth 4 (Address of the USART node)  
        .equ USART3_CR2_RTOEN, 1 << 23   @ bitWidth 1 (Receiver timeout enable)  
        .equ USART3_CR2_ABRMOD1, 1 << 22   @ bitWidth 1 (Auto baud rate mode)  
        .equ USART3_CR2_ABRMOD0, 1 << 21   @ bitWidth 1 (ABRMOD0)  
        .equ USART3_CR2_ABREN, 1 << 20   @ bitWidth 1 (Auto baud rate enable)  
        .equ USART3_CR2_MSBFIRST, 1 << 19   @ bitWidth 1 (Most significant bit first)  
        .equ USART3_CR2_TAINV, 1 << 18   @ bitWidth 1 (Binary data inversion)  
        .equ USART3_CR2_TXINV, 1 << 17   @ bitWidth 1 (TX pin active level  inversion)  
        .equ USART3_CR2_RXINV, 1 << 16   @ bitWidth 1 (RX pin active level  inversion)  
        .equ USART3_CR2_SWAP, 1 << 15   @ bitWidth 1 (Swap TX/RX pins)  
        .equ USART3_CR2_LINEN, 1 << 14   @ bitWidth 1 (LIN mode enable)  
        .equ USART3_CR2_STOP_Shift, 12   @ bitWidth 2 (STOP bits)  
        .equ USART3_CR2_CLKEN, 1 << 11   @ bitWidth 1 (Clock enable)  
        .equ USART3_CR2_CPOL, 1 << 10   @ bitWidth 1 (Clock polarity)  
        .equ USART3_CR2_CPHA, 1 << 9   @ bitWidth 1 (Clock phase)  
        .equ USART3_CR2_LBCL, 1 << 8   @ bitWidth 1 (Last bit clock pulse)  
        .equ USART3_CR2_LBDIE, 1 << 6   @ bitWidth 1 (LIN break detection interrupt  enable)  
        .equ USART3_CR2_LBDL, 1 << 5   @ bitWidth 1 (LIN break detection length)  
        .equ USART3_CR2_ADDM7, 1 << 4   @ bitWidth 1 (7-bit Address Detection/4-bit Address  Detection)  
 
    .equ USART3_CR3, USART3_BASE + 0x8 @ (Control register 3) 
        .equ USART3_CR3_WUFIE, 1 << 22   @ bitWidth 1 (Wakeup from Stop mode interrupt  enable)  
        .equ USART3_CR3_WUS_Shift, 20   @ bitWidth 2 (Wakeup from Stop mode interrupt flag  selection)  
        .equ USART3_CR3_SCARCNT_Shift, 17   @ bitWidth 3 (Smartcard auto-retry count)  
        .equ USART3_CR3_DEP, 1 << 15   @ bitWidth 1 (Driver enable polarity  selection)  
        .equ USART3_CR3_DEM, 1 << 14   @ bitWidth 1 (Driver enable mode)  
        .equ USART3_CR3_DDRE, 1 << 13   @ bitWidth 1 (DMA Disable on Reception  Error)  
        .equ USART3_CR3_OVRDIS, 1 << 12   @ bitWidth 1 (Overrun Disable)  
        .equ USART3_CR3_ONEBIT, 1 << 11   @ bitWidth 1 (One sample bit method  enable)  
        .equ USART3_CR3_CTSIE, 1 << 10   @ bitWidth 1 (CTS interrupt enable)  
        .equ USART3_CR3_CTSE, 1 << 9   @ bitWidth 1 (CTS enable)  
        .equ USART3_CR3_RTSE, 1 << 8   @ bitWidth 1 (RTS enable)  
        .equ USART3_CR3_DMAT, 1 << 7   @ bitWidth 1 (DMA enable transmitter)  
        .equ USART3_CR3_DMAR, 1 << 6   @ bitWidth 1 (DMA enable receiver)  
        .equ USART3_CR3_SCEN, 1 << 5   @ bitWidth 1 (Smartcard mode enable)  
        .equ USART3_CR3_NACK, 1 << 4   @ bitWidth 1 (Smartcard NACK enable)  
        .equ USART3_CR3_HDSEL, 1 << 3   @ bitWidth 1 (Half-duplex selection)  
        .equ USART3_CR3_IRLP, 1 << 2   @ bitWidth 1 (Ir low-power)  
        .equ USART3_CR3_IREN, 1 << 1   @ bitWidth 1 (Ir mode enable)  
        .equ USART3_CR3_EIE, 1 << 0   @ bitWidth 1 (Error interrupt enable)  
 
    .equ USART3_BRR, USART3_BASE + 0xC @ (Baud rate register) 
        .equ USART3_BRR_DIV_Mantissa_Shift, 4   @ bitWidth 12 (DIV_Mantissa)  
        .equ USART3_BRR_DIV_Fraction_Shift, 0   @ bitWidth 4 (DIV_Fraction)  
 
    .equ USART3_GTPR, USART3_BASE + 0x10 @ (Guard time and prescaler  register) 
        .equ USART3_GTPR_GT_Shift, 8   @ bitWidth 8 (Guard time value)  
        .equ USART3_GTPR_PSC_Shift, 0   @ bitWidth 8 (Prescaler value)  
 
    .equ USART3_RTOR, USART3_BASE + 0x14 @ (Receiver timeout register) 
        .equ USART3_RTOR_BLEN_Shift, 24   @ bitWidth 8 (Block Length)  
        .equ USART3_RTOR_RTO_Shift, 0   @ bitWidth 24 (Receiver timeout value)  
 
    .equ USART3_RQR, USART3_BASE + 0x18 @ (Request register) 
        .equ USART3_RQR_TXFRQ, 1 << 4   @ bitWidth 1 (Transmit data flush  request)  
        .equ USART3_RQR_RXFRQ, 1 << 3   @ bitWidth 1 (Receive data flush request)  
        .equ USART3_RQR_MMRQ, 1 << 2   @ bitWidth 1 (Mute mode request)  
        .equ USART3_RQR_SBKRQ, 1 << 1   @ bitWidth 1 (Send break request)  
        .equ USART3_RQR_ABRRQ, 1 << 0   @ bitWidth 1 (Auto baud rate request)  
 
    .equ USART3_ISR, USART3_BASE + 0x1C @ (Interrupt & status  register) 
        .equ USART3_ISR_REACK, 1 << 22   @ bitWidth 1 (REACK)  
        .equ USART3_ISR_TEACK, 1 << 21   @ bitWidth 1 (TEACK)  
        .equ USART3_ISR_WUF, 1 << 20   @ bitWidth 1 (WUF)  
        .equ USART3_ISR_RWU, 1 << 19   @ bitWidth 1 (RWU)  
        .equ USART3_ISR_SBKF, 1 << 18   @ bitWidth 1 (SBKF)  
        .equ USART3_ISR_CMF, 1 << 17   @ bitWidth 1 (CMF)  
        .equ USART3_ISR_BUSY, 1 << 16   @ bitWidth 1 (BUSY)  
        .equ USART3_ISR_ABRF, 1 << 15   @ bitWidth 1 (ABRF)  
        .equ USART3_ISR_ABRE, 1 << 14   @ bitWidth 1 (ABRE)  
        .equ USART3_ISR_EOBF, 1 << 12   @ bitWidth 1 (EOBF)  
        .equ USART3_ISR_RTOF, 1 << 11   @ bitWidth 1 (RTOF)  
        .equ USART3_ISR_CTS, 1 << 10   @ bitWidth 1 (CTS)  
        .equ USART3_ISR_CTSIF, 1 << 9   @ bitWidth 1 (CTSIF)  
        .equ USART3_ISR_LBDF, 1 << 8   @ bitWidth 1 (LBDF)  
        .equ USART3_ISR_TXE, 1 << 7   @ bitWidth 1 (TXE)  
        .equ USART3_ISR_TC, 1 << 6   @ bitWidth 1 (TC)  
        .equ USART3_ISR_RXNE, 1 << 5   @ bitWidth 1 (RXNE)  
        .equ USART3_ISR_IDLE, 1 << 4   @ bitWidth 1 (IDLE)  
        .equ USART3_ISR_ORE, 1 << 3   @ bitWidth 1 (ORE)  
        .equ USART3_ISR_NF, 1 << 2   @ bitWidth 1 (NF)  
        .equ USART3_ISR_FE, 1 << 1   @ bitWidth 1 (FE)  
        .equ USART3_ISR_PE, 1 << 0   @ bitWidth 1 (PE)  
 
    .equ USART3_ICR, USART3_BASE + 0x20 @ (Interrupt flag clear register) 
        .equ USART3_ICR_WUCF, 1 << 20   @ bitWidth 1 (Wakeup from Stop mode clear  flag)  
        .equ USART3_ICR_CMCF, 1 << 17   @ bitWidth 1 (Character match clear flag)  
        .equ USART3_ICR_EOBCF, 1 << 12   @ bitWidth 1 (End of block clear flag)  
        .equ USART3_ICR_RTOCF, 1 << 11   @ bitWidth 1 (Receiver timeout clear  flag)  
        .equ USART3_ICR_CTSCF, 1 << 9   @ bitWidth 1 (CTS clear flag)  
        .equ USART3_ICR_LBDCF, 1 << 8   @ bitWidth 1 (LIN break detection clear  flag)  
        .equ USART3_ICR_TCCF, 1 << 6   @ bitWidth 1 (Transmission complete clear  flag)  
        .equ USART3_ICR_IDLECF, 1 << 4   @ bitWidth 1 (Idle line detected clear  flag)  
        .equ USART3_ICR_ORECF, 1 << 3   @ bitWidth 1 (Overrun error clear flag)  
        .equ USART3_ICR_NCF, 1 << 2   @ bitWidth 1 (Noise detected clear flag)  
        .equ USART3_ICR_FECF, 1 << 1   @ bitWidth 1 (Framing error clear flag)  
        .equ USART3_ICR_PECF, 1 << 0   @ bitWidth 1 (Parity error clear flag)  
 
    .equ USART3_RDR, USART3_BASE + 0x24 @ (Receive data register) 
        .equ USART3_RDR_RDR_Shift, 0   @ bitWidth 9 (Receive data value)  
 
    .equ USART3_TDR, USART3_BASE + 0x28 @ (Transmit data register) 
        .equ USART3_TDR_TDR_Shift, 0   @ bitWidth 9 (Transmit data value)  
 

@=========================== UART4 ===========================@
.equ UART4_BASE, 0x40004C00 @ (Universal synchronous asynchronous receiver  transmitter) 
    .equ UART4_CR1, UART4_BASE + 0x0 @ (Control register 1) 
        .equ UART4_CR1_M1, 1 << 28   @ bitWidth 1 (Word length)  
        .equ UART4_CR1_EOBIE, 1 << 27   @ bitWidth 1 (End of Block interrupt  enable)  
        .equ UART4_CR1_RTOIE, 1 << 26   @ bitWidth 1 (Receiver timeout interrupt  enable)  
        .equ UART4_CR1_DEAT4, 1 << 25   @ bitWidth 1 (Driver Enable assertion  time)  
        .equ UART4_CR1_DEAT3, 1 << 24   @ bitWidth 1 (DEAT3)  
        .equ UART4_CR1_DEAT2, 1 << 23   @ bitWidth 1 (DEAT2)  
        .equ UART4_CR1_DEAT1, 1 << 22   @ bitWidth 1 (DEAT1)  
        .equ UART4_CR1_DEAT0, 1 << 21   @ bitWidth 1 (DEAT0)  
        .equ UART4_CR1_DEDT4, 1 << 20   @ bitWidth 1 (Driver Enable de-assertion  time)  
        .equ UART4_CR1_DEDT3, 1 << 19   @ bitWidth 1 (DEDT3)  
        .equ UART4_CR1_DEDT2, 1 << 18   @ bitWidth 1 (DEDT2)  
        .equ UART4_CR1_DEDT1, 1 << 17   @ bitWidth 1 (DEDT1)  
        .equ UART4_CR1_DEDT0, 1 << 16   @ bitWidth 1 (DEDT0)  
        .equ UART4_CR1_OVER8, 1 << 15   @ bitWidth 1 (Oversampling mode)  
        .equ UART4_CR1_CMIE, 1 << 14   @ bitWidth 1 (Character match interrupt  enable)  
        .equ UART4_CR1_MME, 1 << 13   @ bitWidth 1 (Mute mode enable)  
        .equ UART4_CR1_M0, 1 << 12   @ bitWidth 1 (Word length)  
        .equ UART4_CR1_WAKE, 1 << 11   @ bitWidth 1 (Receiver wakeup method)  
        .equ UART4_CR1_PCE, 1 << 10   @ bitWidth 1 (Parity control enable)  
        .equ UART4_CR1_PS, 1 << 9   @ bitWidth 1 (Parity selection)  
        .equ UART4_CR1_PEIE, 1 << 8   @ bitWidth 1 (PE interrupt enable)  
        .equ UART4_CR1_TXEIE, 1 << 7   @ bitWidth 1 (interrupt enable)  
        .equ UART4_CR1_TCIE, 1 << 6   @ bitWidth 1 (Transmission complete interrupt  enable)  
        .equ UART4_CR1_RXNEIE, 1 << 5   @ bitWidth 1 (RXNE interrupt enable)  
        .equ UART4_CR1_IDLEIE, 1 << 4   @ bitWidth 1 (IDLE interrupt enable)  
        .equ UART4_CR1_TE, 1 << 3   @ bitWidth 1 (Transmitter enable)  
        .equ UART4_CR1_RE, 1 << 2   @ bitWidth 1 (Receiver enable)  
        .equ UART4_CR1_UESM, 1 << 1   @ bitWidth 1 (USART enable in Stop mode)  
        .equ UART4_CR1_UE, 1 << 0   @ bitWidth 1 (USART enable)  
 
    .equ UART4_CR2, UART4_BASE + 0x4 @ (Control register 2) 
        .equ UART4_CR2_ADD4_7_Shift, 28   @ bitWidth 4 (Address of the USART node)  
        .equ UART4_CR2_ADD0_3_Shift, 24   @ bitWidth 4 (Address of the USART node)  
        .equ UART4_CR2_RTOEN, 1 << 23   @ bitWidth 1 (Receiver timeout enable)  
        .equ UART4_CR2_ABRMOD1, 1 << 22   @ bitWidth 1 (Auto baud rate mode)  
        .equ UART4_CR2_ABRMOD0, 1 << 21   @ bitWidth 1 (ABRMOD0)  
        .equ UART4_CR2_ABREN, 1 << 20   @ bitWidth 1 (Auto baud rate enable)  
        .equ UART4_CR2_MSBFIRST, 1 << 19   @ bitWidth 1 (Most significant bit first)  
        .equ UART4_CR2_TAINV, 1 << 18   @ bitWidth 1 (Binary data inversion)  
        .equ UART4_CR2_TXINV, 1 << 17   @ bitWidth 1 (TX pin active level  inversion)  
        .equ UART4_CR2_RXINV, 1 << 16   @ bitWidth 1 (RX pin active level  inversion)  
        .equ UART4_CR2_SWAP, 1 << 15   @ bitWidth 1 (Swap TX/RX pins)  
        .equ UART4_CR2_LINEN, 1 << 14   @ bitWidth 1 (LIN mode enable)  
        .equ UART4_CR2_STOP_Shift, 12   @ bitWidth 2 (STOP bits)  
        .equ UART4_CR2_CLKEN, 1 << 11   @ bitWidth 1 (Clock enable)  
        .equ UART4_CR2_CPOL, 1 << 10   @ bitWidth 1 (Clock polarity)  
        .equ UART4_CR2_CPHA, 1 << 9   @ bitWidth 1 (Clock phase)  
        .equ UART4_CR2_LBCL, 1 << 8   @ bitWidth 1 (Last bit clock pulse)  
        .equ UART4_CR2_LBDIE, 1 << 6   @ bitWidth 1 (LIN break detection interrupt  enable)  
        .equ UART4_CR2_LBDL, 1 << 5   @ bitWidth 1 (LIN break detection length)  
        .equ UART4_CR2_ADDM7, 1 << 4   @ bitWidth 1 (7-bit Address Detection/4-bit Address  Detection)  
 
    .equ UART4_CR3, UART4_BASE + 0x8 @ (Control register 3) 
        .equ UART4_CR3_WUFIE, 1 << 22   @ bitWidth 1 (Wakeup from Stop mode interrupt  enable)  
        .equ UART4_CR3_WUS_Shift, 20   @ bitWidth 2 (Wakeup from Stop mode interrupt flag  selection)  
        .equ UART4_CR3_SCARCNT_Shift, 17   @ bitWidth 3 (Smartcard auto-retry count)  
        .equ UART4_CR3_DEP, 1 << 15   @ bitWidth 1 (Driver enable polarity  selection)  
        .equ UART4_CR3_DEM, 1 << 14   @ bitWidth 1 (Driver enable mode)  
        .equ UART4_CR3_DDRE, 1 << 13   @ bitWidth 1 (DMA Disable on Reception  Error)  
        .equ UART4_CR3_OVRDIS, 1 << 12   @ bitWidth 1 (Overrun Disable)  
        .equ UART4_CR3_ONEBIT, 1 << 11   @ bitWidth 1 (One sample bit method  enable)  
        .equ UART4_CR3_CTSIE, 1 << 10   @ bitWidth 1 (CTS interrupt enable)  
        .equ UART4_CR3_CTSE, 1 << 9   @ bitWidth 1 (CTS enable)  
        .equ UART4_CR3_RTSE, 1 << 8   @ bitWidth 1 (RTS enable)  
        .equ UART4_CR3_DMAT, 1 << 7   @ bitWidth 1 (DMA enable transmitter)  
        .equ UART4_CR3_DMAR, 1 << 6   @ bitWidth 1 (DMA enable receiver)  
        .equ UART4_CR3_SCEN, 1 << 5   @ bitWidth 1 (Smartcard mode enable)  
        .equ UART4_CR3_NACK, 1 << 4   @ bitWidth 1 (Smartcard NACK enable)  
        .equ UART4_CR3_HDSEL, 1 << 3   @ bitWidth 1 (Half-duplex selection)  
        .equ UART4_CR3_IRLP, 1 << 2   @ bitWidth 1 (Ir low-power)  
        .equ UART4_CR3_IREN, 1 << 1   @ bitWidth 1 (Ir mode enable)  
        .equ UART4_CR3_EIE, 1 << 0   @ bitWidth 1 (Error interrupt enable)  
 
    .equ UART4_BRR, UART4_BASE + 0xC @ (Baud rate register) 
        .equ UART4_BRR_DIV_Mantissa_Shift, 4   @ bitWidth 12 (DIV_Mantissa)  
        .equ UART4_BRR_DIV_Fraction_Shift, 0   @ bitWidth 4 (DIV_Fraction)  
 
    .equ UART4_GTPR, UART4_BASE + 0x10 @ (Guard time and prescaler  register) 
        .equ UART4_GTPR_GT_Shift, 8   @ bitWidth 8 (Guard time value)  
        .equ UART4_GTPR_PSC_Shift, 0   @ bitWidth 8 (Prescaler value)  
 
    .equ UART4_RTOR, UART4_BASE + 0x14 @ (Receiver timeout register) 
        .equ UART4_RTOR_BLEN_Shift, 24   @ bitWidth 8 (Block Length)  
        .equ UART4_RTOR_RTO_Shift, 0   @ bitWidth 24 (Receiver timeout value)  
 
    .equ UART4_RQR, UART4_BASE + 0x18 @ (Request register) 
        .equ UART4_RQR_TXFRQ, 1 << 4   @ bitWidth 1 (Transmit data flush  request)  
        .equ UART4_RQR_RXFRQ, 1 << 3   @ bitWidth 1 (Receive data flush request)  
        .equ UART4_RQR_MMRQ, 1 << 2   @ bitWidth 1 (Mute mode request)  
        .equ UART4_RQR_SBKRQ, 1 << 1   @ bitWidth 1 (Send break request)  
        .equ UART4_RQR_ABRRQ, 1 << 0   @ bitWidth 1 (Auto baud rate request)  
 
    .equ UART4_ISR, UART4_BASE + 0x1C @ (Interrupt & status  register) 
        .equ UART4_ISR_REACK, 1 << 22   @ bitWidth 1 (REACK)  
        .equ UART4_ISR_TEACK, 1 << 21   @ bitWidth 1 (TEACK)  
        .equ UART4_ISR_WUF, 1 << 20   @ bitWidth 1 (WUF)  
        .equ UART4_ISR_RWU, 1 << 19   @ bitWidth 1 (RWU)  
        .equ UART4_ISR_SBKF, 1 << 18   @ bitWidth 1 (SBKF)  
        .equ UART4_ISR_CMF, 1 << 17   @ bitWidth 1 (CMF)  
        .equ UART4_ISR_BUSY, 1 << 16   @ bitWidth 1 (BUSY)  
        .equ UART4_ISR_ABRF, 1 << 15   @ bitWidth 1 (ABRF)  
        .equ UART4_ISR_ABRE, 1 << 14   @ bitWidth 1 (ABRE)  
        .equ UART4_ISR_EOBF, 1 << 12   @ bitWidth 1 (EOBF)  
        .equ UART4_ISR_RTOF, 1 << 11   @ bitWidth 1 (RTOF)  
        .equ UART4_ISR_CTS, 1 << 10   @ bitWidth 1 (CTS)  
        .equ UART4_ISR_CTSIF, 1 << 9   @ bitWidth 1 (CTSIF)  
        .equ UART4_ISR_LBDF, 1 << 8   @ bitWidth 1 (LBDF)  
        .equ UART4_ISR_TXE, 1 << 7   @ bitWidth 1 (TXE)  
        .equ UART4_ISR_TC, 1 << 6   @ bitWidth 1 (TC)  
        .equ UART4_ISR_RXNE, 1 << 5   @ bitWidth 1 (RXNE)  
        .equ UART4_ISR_IDLE, 1 << 4   @ bitWidth 1 (IDLE)  
        .equ UART4_ISR_ORE, 1 << 3   @ bitWidth 1 (ORE)  
        .equ UART4_ISR_NF, 1 << 2   @ bitWidth 1 (NF)  
        .equ UART4_ISR_FE, 1 << 1   @ bitWidth 1 (FE)  
        .equ UART4_ISR_PE, 1 << 0   @ bitWidth 1 (PE)  
 
    .equ UART4_ICR, UART4_BASE + 0x20 @ (Interrupt flag clear register) 
        .equ UART4_ICR_WUCF, 1 << 20   @ bitWidth 1 (Wakeup from Stop mode clear  flag)  
        .equ UART4_ICR_CMCF, 1 << 17   @ bitWidth 1 (Character match clear flag)  
        .equ UART4_ICR_EOBCF, 1 << 12   @ bitWidth 1 (End of block clear flag)  
        .equ UART4_ICR_RTOCF, 1 << 11   @ bitWidth 1 (Receiver timeout clear  flag)  
        .equ UART4_ICR_CTSCF, 1 << 9   @ bitWidth 1 (CTS clear flag)  
        .equ UART4_ICR_LBDCF, 1 << 8   @ bitWidth 1 (LIN break detection clear  flag)  
        .equ UART4_ICR_TCCF, 1 << 6   @ bitWidth 1 (Transmission complete clear  flag)  
        .equ UART4_ICR_IDLECF, 1 << 4   @ bitWidth 1 (Idle line detected clear  flag)  
        .equ UART4_ICR_ORECF, 1 << 3   @ bitWidth 1 (Overrun error clear flag)  
        .equ UART4_ICR_NCF, 1 << 2   @ bitWidth 1 (Noise detected clear flag)  
        .equ UART4_ICR_FECF, 1 << 1   @ bitWidth 1 (Framing error clear flag)  
        .equ UART4_ICR_PECF, 1 << 0   @ bitWidth 1 (Parity error clear flag)  
 
    .equ UART4_RDR, UART4_BASE + 0x24 @ (Receive data register) 
        .equ UART4_RDR_RDR_Shift, 0   @ bitWidth 9 (Receive data value)  
 
    .equ UART4_TDR, UART4_BASE + 0x28 @ (Transmit data register) 
        .equ UART4_TDR_TDR_Shift, 0   @ bitWidth 9 (Transmit data value)  
 

@=========================== UART5 ===========================@
.equ UART5_BASE, 0x40005000 @ (Universal synchronous asynchronous receiver  transmitter) 
    .equ UART5_CR1, UART5_BASE + 0x0 @ (Control register 1) 
        .equ UART5_CR1_M1, 1 << 28   @ bitWidth 1 (Word length)  
        .equ UART5_CR1_EOBIE, 1 << 27   @ bitWidth 1 (End of Block interrupt  enable)  
        .equ UART5_CR1_RTOIE, 1 << 26   @ bitWidth 1 (Receiver timeout interrupt  enable)  
        .equ UART5_CR1_DEAT4, 1 << 25   @ bitWidth 1 (Driver Enable assertion  time)  
        .equ UART5_CR1_DEAT3, 1 << 24   @ bitWidth 1 (DEAT3)  
        .equ UART5_CR1_DEAT2, 1 << 23   @ bitWidth 1 (DEAT2)  
        .equ UART5_CR1_DEAT1, 1 << 22   @ bitWidth 1 (DEAT1)  
        .equ UART5_CR1_DEAT0, 1 << 21   @ bitWidth 1 (DEAT0)  
        .equ UART5_CR1_DEDT4, 1 << 20   @ bitWidth 1 (Driver Enable de-assertion  time)  
        .equ UART5_CR1_DEDT3, 1 << 19   @ bitWidth 1 (DEDT3)  
        .equ UART5_CR1_DEDT2, 1 << 18   @ bitWidth 1 (DEDT2)  
        .equ UART5_CR1_DEDT1, 1 << 17   @ bitWidth 1 (DEDT1)  
        .equ UART5_CR1_DEDT0, 1 << 16   @ bitWidth 1 (DEDT0)  
        .equ UART5_CR1_OVER8, 1 << 15   @ bitWidth 1 (Oversampling mode)  
        .equ UART5_CR1_CMIE, 1 << 14   @ bitWidth 1 (Character match interrupt  enable)  
        .equ UART5_CR1_MME, 1 << 13   @ bitWidth 1 (Mute mode enable)  
        .equ UART5_CR1_M0, 1 << 12   @ bitWidth 1 (Word length)  
        .equ UART5_CR1_WAKE, 1 << 11   @ bitWidth 1 (Receiver wakeup method)  
        .equ UART5_CR1_PCE, 1 << 10   @ bitWidth 1 (Parity control enable)  
        .equ UART5_CR1_PS, 1 << 9   @ bitWidth 1 (Parity selection)  
        .equ UART5_CR1_PEIE, 1 << 8   @ bitWidth 1 (PE interrupt enable)  
        .equ UART5_CR1_TXEIE, 1 << 7   @ bitWidth 1 (interrupt enable)  
        .equ UART5_CR1_TCIE, 1 << 6   @ bitWidth 1 (Transmission complete interrupt  enable)  
        .equ UART5_CR1_RXNEIE, 1 << 5   @ bitWidth 1 (RXNE interrupt enable)  
        .equ UART5_CR1_IDLEIE, 1 << 4   @ bitWidth 1 (IDLE interrupt enable)  
        .equ UART5_CR1_TE, 1 << 3   @ bitWidth 1 (Transmitter enable)  
        .equ UART5_CR1_RE, 1 << 2   @ bitWidth 1 (Receiver enable)  
        .equ UART5_CR1_UESM, 1 << 1   @ bitWidth 1 (USART enable in Stop mode)  
        .equ UART5_CR1_UE, 1 << 0   @ bitWidth 1 (USART enable)  
 
    .equ UART5_CR2, UART5_BASE + 0x4 @ (Control register 2) 
        .equ UART5_CR2_ADD4_7_Shift, 28   @ bitWidth 4 (Address of the USART node)  
        .equ UART5_CR2_ADD0_3_Shift, 24   @ bitWidth 4 (Address of the USART node)  
        .equ UART5_CR2_RTOEN, 1 << 23   @ bitWidth 1 (Receiver timeout enable)  
        .equ UART5_CR2_ABRMOD1, 1 << 22   @ bitWidth 1 (Auto baud rate mode)  
        .equ UART5_CR2_ABRMOD0, 1 << 21   @ bitWidth 1 (ABRMOD0)  
        .equ UART5_CR2_ABREN, 1 << 20   @ bitWidth 1 (Auto baud rate enable)  
        .equ UART5_CR2_MSBFIRST, 1 << 19   @ bitWidth 1 (Most significant bit first)  
        .equ UART5_CR2_TAINV, 1 << 18   @ bitWidth 1 (Binary data inversion)  
        .equ UART5_CR2_TXINV, 1 << 17   @ bitWidth 1 (TX pin active level  inversion)  
        .equ UART5_CR2_RXINV, 1 << 16   @ bitWidth 1 (RX pin active level  inversion)  
        .equ UART5_CR2_SWAP, 1 << 15   @ bitWidth 1 (Swap TX/RX pins)  
        .equ UART5_CR2_LINEN, 1 << 14   @ bitWidth 1 (LIN mode enable)  
        .equ UART5_CR2_STOP_Shift, 12   @ bitWidth 2 (STOP bits)  
        .equ UART5_CR2_CLKEN, 1 << 11   @ bitWidth 1 (Clock enable)  
        .equ UART5_CR2_CPOL, 1 << 10   @ bitWidth 1 (Clock polarity)  
        .equ UART5_CR2_CPHA, 1 << 9   @ bitWidth 1 (Clock phase)  
        .equ UART5_CR2_LBCL, 1 << 8   @ bitWidth 1 (Last bit clock pulse)  
        .equ UART5_CR2_LBDIE, 1 << 6   @ bitWidth 1 (LIN break detection interrupt  enable)  
        .equ UART5_CR2_LBDL, 1 << 5   @ bitWidth 1 (LIN break detection length)  
        .equ UART5_CR2_ADDM7, 1 << 4   @ bitWidth 1 (7-bit Address Detection/4-bit Address  Detection)  
 
    .equ UART5_CR3, UART5_BASE + 0x8 @ (Control register 3) 
        .equ UART5_CR3_WUFIE, 1 << 22   @ bitWidth 1 (Wakeup from Stop mode interrupt  enable)  
        .equ UART5_CR3_WUS_Shift, 20   @ bitWidth 2 (Wakeup from Stop mode interrupt flag  selection)  
        .equ UART5_CR3_SCARCNT_Shift, 17   @ bitWidth 3 (Smartcard auto-retry count)  
        .equ UART5_CR3_DEP, 1 << 15   @ bitWidth 1 (Driver enable polarity  selection)  
        .equ UART5_CR3_DEM, 1 << 14   @ bitWidth 1 (Driver enable mode)  
        .equ UART5_CR3_DDRE, 1 << 13   @ bitWidth 1 (DMA Disable on Reception  Error)  
        .equ UART5_CR3_OVRDIS, 1 << 12   @ bitWidth 1 (Overrun Disable)  
        .equ UART5_CR3_ONEBIT, 1 << 11   @ bitWidth 1 (One sample bit method  enable)  
        .equ UART5_CR3_CTSIE, 1 << 10   @ bitWidth 1 (CTS interrupt enable)  
        .equ UART5_CR3_CTSE, 1 << 9   @ bitWidth 1 (CTS enable)  
        .equ UART5_CR3_RTSE, 1 << 8   @ bitWidth 1 (RTS enable)  
        .equ UART5_CR3_DMAT, 1 << 7   @ bitWidth 1 (DMA enable transmitter)  
        .equ UART5_CR3_DMAR, 1 << 6   @ bitWidth 1 (DMA enable receiver)  
        .equ UART5_CR3_SCEN, 1 << 5   @ bitWidth 1 (Smartcard mode enable)  
        .equ UART5_CR3_NACK, 1 << 4   @ bitWidth 1 (Smartcard NACK enable)  
        .equ UART5_CR3_HDSEL, 1 << 3   @ bitWidth 1 (Half-duplex selection)  
        .equ UART5_CR3_IRLP, 1 << 2   @ bitWidth 1 (Ir low-power)  
        .equ UART5_CR3_IREN, 1 << 1   @ bitWidth 1 (Ir mode enable)  
        .equ UART5_CR3_EIE, 1 << 0   @ bitWidth 1 (Error interrupt enable)  
 
    .equ UART5_BRR, UART5_BASE + 0xC @ (Baud rate register) 
        .equ UART5_BRR_DIV_Mantissa_Shift, 4   @ bitWidth 12 (DIV_Mantissa)  
        .equ UART5_BRR_DIV_Fraction_Shift, 0   @ bitWidth 4 (DIV_Fraction)  
 
    .equ UART5_GTPR, UART5_BASE + 0x10 @ (Guard time and prescaler  register) 
        .equ UART5_GTPR_GT_Shift, 8   @ bitWidth 8 (Guard time value)  
        .equ UART5_GTPR_PSC_Shift, 0   @ bitWidth 8 (Prescaler value)  
 
    .equ UART5_RTOR, UART5_BASE + 0x14 @ (Receiver timeout register) 
        .equ UART5_RTOR_BLEN_Shift, 24   @ bitWidth 8 (Block Length)  
        .equ UART5_RTOR_RTO_Shift, 0   @ bitWidth 24 (Receiver timeout value)  
 
    .equ UART5_RQR, UART5_BASE + 0x18 @ (Request register) 
        .equ UART5_RQR_TXFRQ, 1 << 4   @ bitWidth 1 (Transmit data flush  request)  
        .equ UART5_RQR_RXFRQ, 1 << 3   @ bitWidth 1 (Receive data flush request)  
        .equ UART5_RQR_MMRQ, 1 << 2   @ bitWidth 1 (Mute mode request)  
        .equ UART5_RQR_SBKRQ, 1 << 1   @ bitWidth 1 (Send break request)  
        .equ UART5_RQR_ABRRQ, 1 << 0   @ bitWidth 1 (Auto baud rate request)  
 
    .equ UART5_ISR, UART5_BASE + 0x1C @ (Interrupt & status  register) 
        .equ UART5_ISR_REACK, 1 << 22   @ bitWidth 1 (REACK)  
        .equ UART5_ISR_TEACK, 1 << 21   @ bitWidth 1 (TEACK)  
        .equ UART5_ISR_WUF, 1 << 20   @ bitWidth 1 (WUF)  
        .equ UART5_ISR_RWU, 1 << 19   @ bitWidth 1 (RWU)  
        .equ UART5_ISR_SBKF, 1 << 18   @ bitWidth 1 (SBKF)  
        .equ UART5_ISR_CMF, 1 << 17   @ bitWidth 1 (CMF)  
        .equ UART5_ISR_BUSY, 1 << 16   @ bitWidth 1 (BUSY)  
        .equ UART5_ISR_ABRF, 1 << 15   @ bitWidth 1 (ABRF)  
        .equ UART5_ISR_ABRE, 1 << 14   @ bitWidth 1 (ABRE)  
        .equ UART5_ISR_EOBF, 1 << 12   @ bitWidth 1 (EOBF)  
        .equ UART5_ISR_RTOF, 1 << 11   @ bitWidth 1 (RTOF)  
        .equ UART5_ISR_CTS, 1 << 10   @ bitWidth 1 (CTS)  
        .equ UART5_ISR_CTSIF, 1 << 9   @ bitWidth 1 (CTSIF)  
        .equ UART5_ISR_LBDF, 1 << 8   @ bitWidth 1 (LBDF)  
        .equ UART5_ISR_TXE, 1 << 7   @ bitWidth 1 (TXE)  
        .equ UART5_ISR_TC, 1 << 6   @ bitWidth 1 (TC)  
        .equ UART5_ISR_RXNE, 1 << 5   @ bitWidth 1 (RXNE)  
        .equ UART5_ISR_IDLE, 1 << 4   @ bitWidth 1 (IDLE)  
        .equ UART5_ISR_ORE, 1 << 3   @ bitWidth 1 (ORE)  
        .equ UART5_ISR_NF, 1 << 2   @ bitWidth 1 (NF)  
        .equ UART5_ISR_FE, 1 << 1   @ bitWidth 1 (FE)  
        .equ UART5_ISR_PE, 1 << 0   @ bitWidth 1 (PE)  
 
    .equ UART5_ICR, UART5_BASE + 0x20 @ (Interrupt flag clear register) 
        .equ UART5_ICR_WUCF, 1 << 20   @ bitWidth 1 (Wakeup from Stop mode clear  flag)  
        .equ UART5_ICR_CMCF, 1 << 17   @ bitWidth 1 (Character match clear flag)  
        .equ UART5_ICR_EOBCF, 1 << 12   @ bitWidth 1 (End of block clear flag)  
        .equ UART5_ICR_RTOCF, 1 << 11   @ bitWidth 1 (Receiver timeout clear  flag)  
        .equ UART5_ICR_CTSCF, 1 << 9   @ bitWidth 1 (CTS clear flag)  
        .equ UART5_ICR_LBDCF, 1 << 8   @ bitWidth 1 (LIN break detection clear  flag)  
        .equ UART5_ICR_TCCF, 1 << 6   @ bitWidth 1 (Transmission complete clear  flag)  
        .equ UART5_ICR_IDLECF, 1 << 4   @ bitWidth 1 (Idle line detected clear  flag)  
        .equ UART5_ICR_ORECF, 1 << 3   @ bitWidth 1 (Overrun error clear flag)  
        .equ UART5_ICR_NCF, 1 << 2   @ bitWidth 1 (Noise detected clear flag)  
        .equ UART5_ICR_FECF, 1 << 1   @ bitWidth 1 (Framing error clear flag)  
        .equ UART5_ICR_PECF, 1 << 0   @ bitWidth 1 (Parity error clear flag)  
 
    .equ UART5_RDR, UART5_BASE + 0x24 @ (Receive data register) 
        .equ UART5_RDR_RDR_Shift, 0   @ bitWidth 9 (Receive data value)  
 
    .equ UART5_TDR, UART5_BASE + 0x28 @ (Transmit data register) 
        .equ UART5_TDR_TDR_Shift, 0   @ bitWidth 9 (Transmit data value)  
 

@=========================== SPI1 ===========================@
.equ SPI1_BASE, 0x40013000 @ (Serial peripheral interface/Inter-IC  sound) 
    .equ SPI1_CR1, SPI1_BASE + 0x0 @ (control register 1) 
        .equ SPI1_CR1_BIDIMODE, 1 << 15   @ bitWidth 1 (Bidirectional data mode  enable)  
        .equ SPI1_CR1_BIDIOE, 1 << 14   @ bitWidth 1 (Output enable in bidirectional  mode)  
        .equ SPI1_CR1_CRCEN, 1 << 13   @ bitWidth 1 (Hardware CRC calculation  enable)  
        .equ SPI1_CR1_CRCNEXT, 1 << 12   @ bitWidth 1 (CRC transfer next)  
        .equ SPI1_CR1_DFF, 1 << 11   @ bitWidth 1 (Data frame format)  
        .equ SPI1_CR1_RXONLY, 1 << 10   @ bitWidth 1 (Receive only)  
        .equ SPI1_CR1_SSM, 1 << 9   @ bitWidth 1 (Software slave management)  
        .equ SPI1_CR1_SSI, 1 << 8   @ bitWidth 1 (Internal slave select)  
        .equ SPI1_CR1_LSBFIRST, 1 << 7   @ bitWidth 1 (Frame format)  
        .equ SPI1_CR1_SPE, 1 << 6   @ bitWidth 1 (SPI enable)  
        .equ SPI1_CR1_BR_Shift, 3   @ bitWidth 3 (Baud rate control)  
        .equ SPI1_CR1_MSTR, 1 << 2   @ bitWidth 1 (Master selection)  
        .equ SPI1_CR1_CPOL, 1 << 1   @ bitWidth 1 (Clock polarity)  
        .equ SPI1_CR1_CPHA, 1 << 0   @ bitWidth 1 (Clock phase)  
 
    .equ SPI1_CR2, SPI1_BASE + 0x4 @ (control register 2) 
        .equ SPI1_CR2_RXDMAEN, 1 << 0   @ bitWidth 1 (Rx buffer DMA enable)  
        .equ SPI1_CR2_TXDMAEN, 1 << 1   @ bitWidth 1 (Tx buffer DMA enable)  
        .equ SPI1_CR2_SSOE, 1 << 2   @ bitWidth 1 (SS output enable)  
        .equ SPI1_CR2_NSSP, 1 << 3   @ bitWidth 1 (NSS pulse management)  
        .equ SPI1_CR2_FRF, 1 << 4   @ bitWidth 1 (Frame format)  
        .equ SPI1_CR2_ERRIE, 1 << 5   @ bitWidth 1 (Error interrupt enable)  
        .equ SPI1_CR2_RXNEIE, 1 << 6   @ bitWidth 1 (RX buffer not empty interrupt  enable)  
        .equ SPI1_CR2_TXEIE, 1 << 7   @ bitWidth 1 (Tx buffer empty interrupt  enable)  
        .equ SPI1_CR2_DS_Shift, 8   @ bitWidth 4 (Data size)  
        .equ SPI1_CR2_FRXTH, 1 << 12   @ bitWidth 1 (FIFO reception threshold)  
        .equ SPI1_CR2_LDMA_RX, 1 << 13   @ bitWidth 1 (Last DMA transfer for  reception)  
        .equ SPI1_CR2_LDMA_TX, 1 << 14   @ bitWidth 1 (Last DMA transfer for  transmission)  
 
    .equ SPI1_SR, SPI1_BASE + 0x8 @ (status register) 
        .equ SPI1_SR_RXNE, 1 << 0   @ bitWidth 1 (Receive buffer not empty)  
        .equ SPI1_SR_TXE, 1 << 1   @ bitWidth 1 (Transmit buffer empty)  
        .equ SPI1_SR_CRCERR, 1 << 4   @ bitWidth 1 (CRC error flag)  
        .equ SPI1_SR_MODF, 1 << 5   @ bitWidth 1 (Mode fault)  
        .equ SPI1_SR_OVR, 1 << 6   @ bitWidth 1 (Overrun flag)  
        .equ SPI1_SR_BSY, 1 << 7   @ bitWidth 1 (Busy flag)  
        .equ SPI1_SR_TIFRFE, 1 << 8   @ bitWidth 1 (TI frame format error)  
        .equ SPI1_SR_FRLVL_Shift, 9   @ bitWidth 2 (FIFO reception level)  
        .equ SPI1_SR_FTLVL_Shift, 11   @ bitWidth 2 (FIFO transmission level)  
 
    .equ SPI1_DR, SPI1_BASE + 0xC @ (data register) 
        .equ SPI1_DR_DR_Shift, 0   @ bitWidth 16 (Data register)  
 
    .equ SPI1_CRCPR, SPI1_BASE + 0x10 @ (CRC polynomial register) 
        .equ SPI1_CRCPR_CRCPOLY_Shift, 0   @ bitWidth 16 (CRC polynomial register)  
 
    .equ SPI1_RXCRCR, SPI1_BASE + 0x14 @ (RX CRC register) 
        .equ SPI1_RXCRCR_RxCRC_Shift, 0   @ bitWidth 16 (Rx CRC register)  
 
    .equ SPI1_TXCRCR, SPI1_BASE + 0x18 @ (TX CRC register) 
        .equ SPI1_TXCRCR_TxCRC_Shift, 0   @ bitWidth 16 (Tx CRC register)  
 

@=========================== SPI2 ===========================@
.equ SPI2_BASE, 0x40003800 @ (Serial peripheral interface/Inter-IC  sound) 
    .equ SPI2_CR1, SPI2_BASE + 0x0 @ (control register 1) 
        .equ SPI2_CR1_BIDIMODE, 1 << 15   @ bitWidth 1 (Bidirectional data mode  enable)  
        .equ SPI2_CR1_BIDIOE, 1 << 14   @ bitWidth 1 (Output enable in bidirectional  mode)  
        .equ SPI2_CR1_CRCEN, 1 << 13   @ bitWidth 1 (Hardware CRC calculation  enable)  
        .equ SPI2_CR1_CRCNEXT, 1 << 12   @ bitWidth 1 (CRC transfer next)  
        .equ SPI2_CR1_DFF, 1 << 11   @ bitWidth 1 (Data frame format)  
        .equ SPI2_CR1_RXONLY, 1 << 10   @ bitWidth 1 (Receive only)  
        .equ SPI2_CR1_SSM, 1 << 9   @ bitWidth 1 (Software slave management)  
        .equ SPI2_CR1_SSI, 1 << 8   @ bitWidth 1 (Internal slave select)  
        .equ SPI2_CR1_LSBFIRST, 1 << 7   @ bitWidth 1 (Frame format)  
        .equ SPI2_CR1_SPE, 1 << 6   @ bitWidth 1 (SPI enable)  
        .equ SPI2_CR1_BR_Shift, 3   @ bitWidth 3 (Baud rate control)  
        .equ SPI2_CR1_MSTR, 1 << 2   @ bitWidth 1 (Master selection)  
        .equ SPI2_CR1_CPOL, 1 << 1   @ bitWidth 1 (Clock polarity)  
        .equ SPI2_CR1_CPHA, 1 << 0   @ bitWidth 1 (Clock phase)  
 
    .equ SPI2_CR2, SPI2_BASE + 0x4 @ (control register 2) 
        .equ SPI2_CR2_RXDMAEN, 1 << 0   @ bitWidth 1 (Rx buffer DMA enable)  
        .equ SPI2_CR2_TXDMAEN, 1 << 1   @ bitWidth 1 (Tx buffer DMA enable)  
        .equ SPI2_CR2_SSOE, 1 << 2   @ bitWidth 1 (SS output enable)  
        .equ SPI2_CR2_NSSP, 1 << 3   @ bitWidth 1 (NSS pulse management)  
        .equ SPI2_CR2_FRF, 1 << 4   @ bitWidth 1 (Frame format)  
        .equ SPI2_CR2_ERRIE, 1 << 5   @ bitWidth 1 (Error interrupt enable)  
        .equ SPI2_CR2_RXNEIE, 1 << 6   @ bitWidth 1 (RX buffer not empty interrupt  enable)  
        .equ SPI2_CR2_TXEIE, 1 << 7   @ bitWidth 1 (Tx buffer empty interrupt  enable)  
        .equ SPI2_CR2_DS_Shift, 8   @ bitWidth 4 (Data size)  
        .equ SPI2_CR2_FRXTH, 1 << 12   @ bitWidth 1 (FIFO reception threshold)  
        .equ SPI2_CR2_LDMA_RX, 1 << 13   @ bitWidth 1 (Last DMA transfer for  reception)  
        .equ SPI2_CR2_LDMA_TX, 1 << 14   @ bitWidth 1 (Last DMA transfer for  transmission)  
 
    .equ SPI2_SR, SPI2_BASE + 0x8 @ (status register) 
        .equ SPI2_SR_RXNE, 1 << 0   @ bitWidth 1 (Receive buffer not empty)  
        .equ SPI2_SR_TXE, 1 << 1   @ bitWidth 1 (Transmit buffer empty)  
        .equ SPI2_SR_CRCERR, 1 << 4   @ bitWidth 1 (CRC error flag)  
        .equ SPI2_SR_MODF, 1 << 5   @ bitWidth 1 (Mode fault)  
        .equ SPI2_SR_OVR, 1 << 6   @ bitWidth 1 (Overrun flag)  
        .equ SPI2_SR_BSY, 1 << 7   @ bitWidth 1 (Busy flag)  
        .equ SPI2_SR_TIFRFE, 1 << 8   @ bitWidth 1 (TI frame format error)  
        .equ SPI2_SR_FRLVL_Shift, 9   @ bitWidth 2 (FIFO reception level)  
        .equ SPI2_SR_FTLVL_Shift, 11   @ bitWidth 2 (FIFO transmission level)  
 
    .equ SPI2_DR, SPI2_BASE + 0xC @ (data register) 
        .equ SPI2_DR_DR_Shift, 0   @ bitWidth 16 (Data register)  
 
    .equ SPI2_CRCPR, SPI2_BASE + 0x10 @ (CRC polynomial register) 
        .equ SPI2_CRCPR_CRCPOLY_Shift, 0   @ bitWidth 16 (CRC polynomial register)  
 
    .equ SPI2_RXCRCR, SPI2_BASE + 0x14 @ (RX CRC register) 
        .equ SPI2_RXCRCR_RxCRC_Shift, 0   @ bitWidth 16 (Rx CRC register)  
 
    .equ SPI2_TXCRCR, SPI2_BASE + 0x18 @ (TX CRC register) 
        .equ SPI2_TXCRCR_TxCRC_Shift, 0   @ bitWidth 16 (Tx CRC register)  
 

@=========================== SPI3 ===========================@
.equ SPI3_BASE, 0x40003C00 @ (Serial peripheral interface/Inter-IC  sound) 
    .equ SPI3_CR1, SPI3_BASE + 0x0 @ (control register 1) 
        .equ SPI3_CR1_BIDIMODE, 1 << 15   @ bitWidth 1 (Bidirectional data mode  enable)  
        .equ SPI3_CR1_BIDIOE, 1 << 14   @ bitWidth 1 (Output enable in bidirectional  mode)  
        .equ SPI3_CR1_CRCEN, 1 << 13   @ bitWidth 1 (Hardware CRC calculation  enable)  
        .equ SPI3_CR1_CRCNEXT, 1 << 12   @ bitWidth 1 (CRC transfer next)  
        .equ SPI3_CR1_DFF, 1 << 11   @ bitWidth 1 (Data frame format)  
        .equ SPI3_CR1_RXONLY, 1 << 10   @ bitWidth 1 (Receive only)  
        .equ SPI3_CR1_SSM, 1 << 9   @ bitWidth 1 (Software slave management)  
        .equ SPI3_CR1_SSI, 1 << 8   @ bitWidth 1 (Internal slave select)  
        .equ SPI3_CR1_LSBFIRST, 1 << 7   @ bitWidth 1 (Frame format)  
        .equ SPI3_CR1_SPE, 1 << 6   @ bitWidth 1 (SPI enable)  
        .equ SPI3_CR1_BR_Shift, 3   @ bitWidth 3 (Baud rate control)  
        .equ SPI3_CR1_MSTR, 1 << 2   @ bitWidth 1 (Master selection)  
        .equ SPI3_CR1_CPOL, 1 << 1   @ bitWidth 1 (Clock polarity)  
        .equ SPI3_CR1_CPHA, 1 << 0   @ bitWidth 1 (Clock phase)  
 
    .equ SPI3_CR2, SPI3_BASE + 0x4 @ (control register 2) 
        .equ SPI3_CR2_RXDMAEN, 1 << 0   @ bitWidth 1 (Rx buffer DMA enable)  
        .equ SPI3_CR2_TXDMAEN, 1 << 1   @ bitWidth 1 (Tx buffer DMA enable)  
        .equ SPI3_CR2_SSOE, 1 << 2   @ bitWidth 1 (SS output enable)  
        .equ SPI3_CR2_NSSP, 1 << 3   @ bitWidth 1 (NSS pulse management)  
        .equ SPI3_CR2_FRF, 1 << 4   @ bitWidth 1 (Frame format)  
        .equ SPI3_CR2_ERRIE, 1 << 5   @ bitWidth 1 (Error interrupt enable)  
        .equ SPI3_CR2_RXNEIE, 1 << 6   @ bitWidth 1 (RX buffer not empty interrupt  enable)  
        .equ SPI3_CR2_TXEIE, 1 << 7   @ bitWidth 1 (Tx buffer empty interrupt  enable)  
        .equ SPI3_CR2_DS_Shift, 8   @ bitWidth 4 (Data size)  
        .equ SPI3_CR2_FRXTH, 1 << 12   @ bitWidth 1 (FIFO reception threshold)  
        .equ SPI3_CR2_LDMA_RX, 1 << 13   @ bitWidth 1 (Last DMA transfer for  reception)  
        .equ SPI3_CR2_LDMA_TX, 1 << 14   @ bitWidth 1 (Last DMA transfer for  transmission)  
 
    .equ SPI3_SR, SPI3_BASE + 0x8 @ (status register) 
        .equ SPI3_SR_RXNE, 1 << 0   @ bitWidth 1 (Receive buffer not empty)  
        .equ SPI3_SR_TXE, 1 << 1   @ bitWidth 1 (Transmit buffer empty)  
        .equ SPI3_SR_CRCERR, 1 << 4   @ bitWidth 1 (CRC error flag)  
        .equ SPI3_SR_MODF, 1 << 5   @ bitWidth 1 (Mode fault)  
        .equ SPI3_SR_OVR, 1 << 6   @ bitWidth 1 (Overrun flag)  
        .equ SPI3_SR_BSY, 1 << 7   @ bitWidth 1 (Busy flag)  
        .equ SPI3_SR_TIFRFE, 1 << 8   @ bitWidth 1 (TI frame format error)  
        .equ SPI3_SR_FRLVL_Shift, 9   @ bitWidth 2 (FIFO reception level)  
        .equ SPI3_SR_FTLVL_Shift, 11   @ bitWidth 2 (FIFO transmission level)  
 
    .equ SPI3_DR, SPI3_BASE + 0xC @ (data register) 
        .equ SPI3_DR_DR_Shift, 0   @ bitWidth 16 (Data register)  
 
    .equ SPI3_CRCPR, SPI3_BASE + 0x10 @ (CRC polynomial register) 
        .equ SPI3_CRCPR_CRCPOLY_Shift, 0   @ bitWidth 16 (CRC polynomial register)  
 
    .equ SPI3_RXCRCR, SPI3_BASE + 0x14 @ (RX CRC register) 
        .equ SPI3_RXCRCR_RxCRC_Shift, 0   @ bitWidth 16 (Rx CRC register)  
 
    .equ SPI3_TXCRCR, SPI3_BASE + 0x18 @ (TX CRC register) 
        .equ SPI3_TXCRCR_TxCRC_Shift, 0   @ bitWidth 16 (Tx CRC register)  
 

@=========================== EXTI ===========================@
.equ EXTI_BASE, 0x40010400 @ (External interrupt/event  controller) 
    .equ EXTI_IMR1, EXTI_BASE + 0x0 @ (Interrupt mask register) 
        .equ EXTI_IMR1_MR0, 1 << 0   @ bitWidth 1 (Interrupt Mask on line 0)  
        .equ EXTI_IMR1_MR1, 1 << 1   @ bitWidth 1 (Interrupt Mask on line 1)  
        .equ EXTI_IMR1_MR2, 1 << 2   @ bitWidth 1 (Interrupt Mask on line 2)  
        .equ EXTI_IMR1_MR3, 1 << 3   @ bitWidth 1 (Interrupt Mask on line 3)  
        .equ EXTI_IMR1_MR4, 1 << 4   @ bitWidth 1 (Interrupt Mask on line 4)  
        .equ EXTI_IMR1_MR5, 1 << 5   @ bitWidth 1 (Interrupt Mask on line 5)  
        .equ EXTI_IMR1_MR6, 1 << 6   @ bitWidth 1 (Interrupt Mask on line 6)  
        .equ EXTI_IMR1_MR7, 1 << 7   @ bitWidth 1 (Interrupt Mask on line 7)  
        .equ EXTI_IMR1_MR8, 1 << 8   @ bitWidth 1 (Interrupt Mask on line 8)  
        .equ EXTI_IMR1_MR9, 1 << 9   @ bitWidth 1 (Interrupt Mask on line 9)  
        .equ EXTI_IMR1_MR10, 1 << 10   @ bitWidth 1 (Interrupt Mask on line 10)  
        .equ EXTI_IMR1_MR11, 1 << 11   @ bitWidth 1 (Interrupt Mask on line 11)  
        .equ EXTI_IMR1_MR12, 1 << 12   @ bitWidth 1 (Interrupt Mask on line 12)  
        .equ EXTI_IMR1_MR13, 1 << 13   @ bitWidth 1 (Interrupt Mask on line 13)  
        .equ EXTI_IMR1_MR14, 1 << 14   @ bitWidth 1 (Interrupt Mask on line 14)  
        .equ EXTI_IMR1_MR15, 1 << 15   @ bitWidth 1 (Interrupt Mask on line 15)  
        .equ EXTI_IMR1_MR16, 1 << 16   @ bitWidth 1 (Interrupt Mask on line 16)  
        .equ EXTI_IMR1_MR17, 1 << 17   @ bitWidth 1 (Interrupt Mask on line 17)  
        .equ EXTI_IMR1_MR18, 1 << 18   @ bitWidth 1 (Interrupt Mask on line 18)  
        .equ EXTI_IMR1_MR19, 1 << 19   @ bitWidth 1 (Interrupt Mask on line 19)  
        .equ EXTI_IMR1_MR20, 1 << 20   @ bitWidth 1 (Interrupt Mask on line 20)  
        .equ EXTI_IMR1_MR21, 1 << 21   @ bitWidth 1 (Interrupt Mask on line 21)  
        .equ EXTI_IMR1_MR22, 1 << 22   @ bitWidth 1 (Interrupt Mask on line 22)  
        .equ EXTI_IMR1_MR23, 1 << 23   @ bitWidth 1 (Interrupt Mask on line 23)  
        .equ EXTI_IMR1_MR24, 1 << 24   @ bitWidth 1 (Interrupt Mask on line 24)  
        .equ EXTI_IMR1_MR25, 1 << 25   @ bitWidth 1 (Interrupt Mask on line 25)  
        .equ EXTI_IMR1_MR26, 1 << 26   @ bitWidth 1 (Interrupt Mask on line 26)  
        .equ EXTI_IMR1_MR27, 1 << 27   @ bitWidth 1 (Interrupt Mask on line 27)  
        .equ EXTI_IMR1_MR28, 1 << 28   @ bitWidth 1 (Interrupt Mask on line 28)  
        .equ EXTI_IMR1_MR29, 1 << 29   @ bitWidth 1 (Interrupt Mask on line 29)  
        .equ EXTI_IMR1_MR30, 1 << 30   @ bitWidth 1 (Interrupt Mask on line 30)  
        .equ EXTI_IMR1_MR31, 1 << 31   @ bitWidth 1 (Interrupt Mask on line 31)  
 
    .equ EXTI_EMR1, EXTI_BASE + 0x4 @ (Event mask register) 
        .equ EXTI_EMR1_MR0, 1 << 0   @ bitWidth 1 (Event Mask on line 0)  
        .equ EXTI_EMR1_MR1, 1 << 1   @ bitWidth 1 (Event Mask on line 1)  
        .equ EXTI_EMR1_MR2, 1 << 2   @ bitWidth 1 (Event Mask on line 2)  
        .equ EXTI_EMR1_MR3, 1 << 3   @ bitWidth 1 (Event Mask on line 3)  
        .equ EXTI_EMR1_MR4, 1 << 4   @ bitWidth 1 (Event Mask on line 4)  
        .equ EXTI_EMR1_MR5, 1 << 5   @ bitWidth 1 (Event Mask on line 5)  
        .equ EXTI_EMR1_MR6, 1 << 6   @ bitWidth 1 (Event Mask on line 6)  
        .equ EXTI_EMR1_MR7, 1 << 7   @ bitWidth 1 (Event Mask on line 7)  
        .equ EXTI_EMR1_MR8, 1 << 8   @ bitWidth 1 (Event Mask on line 8)  
        .equ EXTI_EMR1_MR9, 1 << 9   @ bitWidth 1 (Event Mask on line 9)  
        .equ EXTI_EMR1_MR10, 1 << 10   @ bitWidth 1 (Event Mask on line 10)  
        .equ EXTI_EMR1_MR11, 1 << 11   @ bitWidth 1 (Event Mask on line 11)  
        .equ EXTI_EMR1_MR12, 1 << 12   @ bitWidth 1 (Event Mask on line 12)  
        .equ EXTI_EMR1_MR13, 1 << 13   @ bitWidth 1 (Event Mask on line 13)  
        .equ EXTI_EMR1_MR14, 1 << 14   @ bitWidth 1 (Event Mask on line 14)  
        .equ EXTI_EMR1_MR15, 1 << 15   @ bitWidth 1 (Event Mask on line 15)  
        .equ EXTI_EMR1_MR16, 1 << 16   @ bitWidth 1 (Event Mask on line 16)  
        .equ EXTI_EMR1_MR17, 1 << 17   @ bitWidth 1 (Event Mask on line 17)  
        .equ EXTI_EMR1_MR18, 1 << 18   @ bitWidth 1 (Event Mask on line 18)  
        .equ EXTI_EMR1_MR19, 1 << 19   @ bitWidth 1 (Event Mask on line 19)  
        .equ EXTI_EMR1_MR20, 1 << 20   @ bitWidth 1 (Event Mask on line 20)  
        .equ EXTI_EMR1_MR21, 1 << 21   @ bitWidth 1 (Event Mask on line 21)  
        .equ EXTI_EMR1_MR22, 1 << 22   @ bitWidth 1 (Event Mask on line 22)  
        .equ EXTI_EMR1_MR23, 1 << 23   @ bitWidth 1 (Event Mask on line 23)  
        .equ EXTI_EMR1_MR24, 1 << 24   @ bitWidth 1 (Event Mask on line 24)  
        .equ EXTI_EMR1_MR25, 1 << 25   @ bitWidth 1 (Event Mask on line 25)  
        .equ EXTI_EMR1_MR26, 1 << 26   @ bitWidth 1 (Event Mask on line 26)  
        .equ EXTI_EMR1_MR27, 1 << 27   @ bitWidth 1 (Event Mask on line 27)  
        .equ EXTI_EMR1_MR28, 1 << 28   @ bitWidth 1 (Event Mask on line 28)  
        .equ EXTI_EMR1_MR29, 1 << 29   @ bitWidth 1 (Event Mask on line 29)  
        .equ EXTI_EMR1_MR30, 1 << 30   @ bitWidth 1 (Event Mask on line 30)  
        .equ EXTI_EMR1_MR31, 1 << 31   @ bitWidth 1 (Event Mask on line 31)  
 
    .equ EXTI_RTSR1, EXTI_BASE + 0x8 @ (Rising Trigger selection  register) 
        .equ EXTI_RTSR1_TR0, 1 << 0   @ bitWidth 1 (Rising trigger event configuration of  line 0)  
        .equ EXTI_RTSR1_TR1, 1 << 1   @ bitWidth 1 (Rising trigger event configuration of  line 1)  
        .equ EXTI_RTSR1_TR2, 1 << 2   @ bitWidth 1 (Rising trigger event configuration of  line 2)  
        .equ EXTI_RTSR1_TR3, 1 << 3   @ bitWidth 1 (Rising trigger event configuration of  line 3)  
        .equ EXTI_RTSR1_TR4, 1 << 4   @ bitWidth 1 (Rising trigger event configuration of  line 4)  
        .equ EXTI_RTSR1_TR5, 1 << 5   @ bitWidth 1 (Rising trigger event configuration of  line 5)  
        .equ EXTI_RTSR1_TR6, 1 << 6   @ bitWidth 1 (Rising trigger event configuration of  line 6)  
        .equ EXTI_RTSR1_TR7, 1 << 7   @ bitWidth 1 (Rising trigger event configuration of  line 7)  
        .equ EXTI_RTSR1_TR8, 1 << 8   @ bitWidth 1 (Rising trigger event configuration of  line 8)  
        .equ EXTI_RTSR1_TR9, 1 << 9   @ bitWidth 1 (Rising trigger event configuration of  line 9)  
        .equ EXTI_RTSR1_TR10, 1 << 10   @ bitWidth 1 (Rising trigger event configuration of  line 10)  
        .equ EXTI_RTSR1_TR11, 1 << 11   @ bitWidth 1 (Rising trigger event configuration of  line 11)  
        .equ EXTI_RTSR1_TR12, 1 << 12   @ bitWidth 1 (Rising trigger event configuration of  line 12)  
        .equ EXTI_RTSR1_TR13, 1 << 13   @ bitWidth 1 (Rising trigger event configuration of  line 13)  
        .equ EXTI_RTSR1_TR14, 1 << 14   @ bitWidth 1 (Rising trigger event configuration of  line 14)  
        .equ EXTI_RTSR1_TR15, 1 << 15   @ bitWidth 1 (Rising trigger event configuration of  line 15)  
        .equ EXTI_RTSR1_TR16, 1 << 16   @ bitWidth 1 (Rising trigger event configuration of  line 16)  
        .equ EXTI_RTSR1_TR18, 1 << 18   @ bitWidth 1 (Rising trigger event configuration of  line 18)  
        .equ EXTI_RTSR1_TR19, 1 << 19   @ bitWidth 1 (Rising trigger event configuration of  line 19)  
        .equ EXTI_RTSR1_TR20, 1 << 20   @ bitWidth 1 (Rising trigger event configuration of  line 20)  
        .equ EXTI_RTSR1_TR21, 1 << 21   @ bitWidth 1 (Rising trigger event configuration of  line 21)  
        .equ EXTI_RTSR1_TR22, 1 << 22   @ bitWidth 1 (Rising trigger event configuration of  line 22)  
 
    .equ EXTI_FTSR1, EXTI_BASE + 0xC @ (Falling Trigger selection  register) 
        .equ EXTI_FTSR1_TR0, 1 << 0   @ bitWidth 1 (Falling trigger event configuration of  line 0)  
        .equ EXTI_FTSR1_TR1, 1 << 1   @ bitWidth 1 (Falling trigger event configuration of  line 1)  
        .equ EXTI_FTSR1_TR2, 1 << 2   @ bitWidth 1 (Falling trigger event configuration of  line 2)  
        .equ EXTI_FTSR1_TR3, 1 << 3   @ bitWidth 1 (Falling trigger event configuration of  line 3)  
        .equ EXTI_FTSR1_TR4, 1 << 4   @ bitWidth 1 (Falling trigger event configuration of  line 4)  
        .equ EXTI_FTSR1_TR5, 1 << 5   @ bitWidth 1 (Falling trigger event configuration of  line 5)  
        .equ EXTI_FTSR1_TR6, 1 << 6   @ bitWidth 1 (Falling trigger event configuration of  line 6)  
        .equ EXTI_FTSR1_TR7, 1 << 7   @ bitWidth 1 (Falling trigger event configuration of  line 7)  
        .equ EXTI_FTSR1_TR8, 1 << 8   @ bitWidth 1 (Falling trigger event configuration of  line 8)  
        .equ EXTI_FTSR1_TR9, 1 << 9   @ bitWidth 1 (Falling trigger event configuration of  line 9)  
        .equ EXTI_FTSR1_TR10, 1 << 10   @ bitWidth 1 (Falling trigger event configuration of  line 10)  
        .equ EXTI_FTSR1_TR11, 1 << 11   @ bitWidth 1 (Falling trigger event configuration of  line 11)  
        .equ EXTI_FTSR1_TR12, 1 << 12   @ bitWidth 1 (Falling trigger event configuration of  line 12)  
        .equ EXTI_FTSR1_TR13, 1 << 13   @ bitWidth 1 (Falling trigger event configuration of  line 13)  
        .equ EXTI_FTSR1_TR14, 1 << 14   @ bitWidth 1 (Falling trigger event configuration of  line 14)  
        .equ EXTI_FTSR1_TR15, 1 << 15   @ bitWidth 1 (Falling trigger event configuration of  line 15)  
        .equ EXTI_FTSR1_TR16, 1 << 16   @ bitWidth 1 (Falling trigger event configuration of  line 16)  
        .equ EXTI_FTSR1_TR18, 1 << 18   @ bitWidth 1 (Falling trigger event configuration of  line 18)  
        .equ EXTI_FTSR1_TR19, 1 << 19   @ bitWidth 1 (Falling trigger event configuration of  line 19)  
        .equ EXTI_FTSR1_TR20, 1 << 20   @ bitWidth 1 (Falling trigger event configuration of  line 20)  
        .equ EXTI_FTSR1_TR21, 1 << 21   @ bitWidth 1 (Falling trigger event configuration of  line 21)  
        .equ EXTI_FTSR1_TR22, 1 << 22   @ bitWidth 1 (Falling trigger event configuration of  line 22)  
 
    .equ EXTI_SWIER1, EXTI_BASE + 0x10 @ (Software interrupt event  register) 
        .equ EXTI_SWIER1_SWIER0, 1 << 0   @ bitWidth 1 (Software Interrupt on line  0)  
        .equ EXTI_SWIER1_SWIER1, 1 << 1   @ bitWidth 1 (Software Interrupt on line  1)  
        .equ EXTI_SWIER1_SWIER2, 1 << 2   @ bitWidth 1 (Software Interrupt on line  2)  
        .equ EXTI_SWIER1_SWIER3, 1 << 3   @ bitWidth 1 (Software Interrupt on line  3)  
        .equ EXTI_SWIER1_SWIER4, 1 << 4   @ bitWidth 1 (Software Interrupt on line  4)  
        .equ EXTI_SWIER1_SWIER5, 1 << 5   @ bitWidth 1 (Software Interrupt on line  5)  
        .equ EXTI_SWIER1_SWIER6, 1 << 6   @ bitWidth 1 (Software Interrupt on line  6)  
        .equ EXTI_SWIER1_SWIER7, 1 << 7   @ bitWidth 1 (Software Interrupt on line  7)  
        .equ EXTI_SWIER1_SWIER8, 1 << 8   @ bitWidth 1 (Software Interrupt on line  8)  
        .equ EXTI_SWIER1_SWIER9, 1 << 9   @ bitWidth 1 (Software Interrupt on line  9)  
        .equ EXTI_SWIER1_SWIER10, 1 << 10   @ bitWidth 1 (Software Interrupt on line  10)  
        .equ EXTI_SWIER1_SWIER11, 1 << 11   @ bitWidth 1 (Software Interrupt on line  11)  
        .equ EXTI_SWIER1_SWIER12, 1 << 12   @ bitWidth 1 (Software Interrupt on line  12)  
        .equ EXTI_SWIER1_SWIER13, 1 << 13   @ bitWidth 1 (Software Interrupt on line  13)  
        .equ EXTI_SWIER1_SWIER14, 1 << 14   @ bitWidth 1 (Software Interrupt on line  14)  
        .equ EXTI_SWIER1_SWIER15, 1 << 15   @ bitWidth 1 (Software Interrupt on line  15)  
        .equ EXTI_SWIER1_SWIER16, 1 << 16   @ bitWidth 1 (Software Interrupt on line  16)  
        .equ EXTI_SWIER1_SWIER18, 1 << 18   @ bitWidth 1 (Software Interrupt on line  18)  
        .equ EXTI_SWIER1_SWIER19, 1 << 19   @ bitWidth 1 (Software Interrupt on line  19)  
        .equ EXTI_SWIER1_SWIER20, 1 << 20   @ bitWidth 1 (Software Interrupt on line  20)  
        .equ EXTI_SWIER1_SWIER21, 1 << 21   @ bitWidth 1 (Software Interrupt on line  21)  
        .equ EXTI_SWIER1_SWIER22, 1 << 22   @ bitWidth 1 (Software Interrupt on line  22)  
 
    .equ EXTI_PR1, EXTI_BASE + 0x14 @ (Pending register) 
        .equ EXTI_PR1_PR0, 1 << 0   @ bitWidth 1 (Pending bit 0)  
        .equ EXTI_PR1_PR1, 1 << 1   @ bitWidth 1 (Pending bit 1)  
        .equ EXTI_PR1_PR2, 1 << 2   @ bitWidth 1 (Pending bit 2)  
        .equ EXTI_PR1_PR3, 1 << 3   @ bitWidth 1 (Pending bit 3)  
        .equ EXTI_PR1_PR4, 1 << 4   @ bitWidth 1 (Pending bit 4)  
        .equ EXTI_PR1_PR5, 1 << 5   @ bitWidth 1 (Pending bit 5)  
        .equ EXTI_PR1_PR6, 1 << 6   @ bitWidth 1 (Pending bit 6)  
        .equ EXTI_PR1_PR7, 1 << 7   @ bitWidth 1 (Pending bit 7)  
        .equ EXTI_PR1_PR8, 1 << 8   @ bitWidth 1 (Pending bit 8)  
        .equ EXTI_PR1_PR9, 1 << 9   @ bitWidth 1 (Pending bit 9)  
        .equ EXTI_PR1_PR10, 1 << 10   @ bitWidth 1 (Pending bit 10)  
        .equ EXTI_PR1_PR11, 1 << 11   @ bitWidth 1 (Pending bit 11)  
        .equ EXTI_PR1_PR12, 1 << 12   @ bitWidth 1 (Pending bit 12)  
        .equ EXTI_PR1_PR13, 1 << 13   @ bitWidth 1 (Pending bit 13)  
        .equ EXTI_PR1_PR14, 1 << 14   @ bitWidth 1 (Pending bit 14)  
        .equ EXTI_PR1_PR15, 1 << 15   @ bitWidth 1 (Pending bit 15)  
        .equ EXTI_PR1_PR16, 1 << 16   @ bitWidth 1 (Pending bit 16)  
        .equ EXTI_PR1_PR18, 1 << 18   @ bitWidth 1 (Pending bit 18)  
        .equ EXTI_PR1_PR19, 1 << 19   @ bitWidth 1 (Pending bit 19)  
        .equ EXTI_PR1_PR20, 1 << 20   @ bitWidth 1 (Pending bit 20)  
        .equ EXTI_PR1_PR21, 1 << 21   @ bitWidth 1 (Pending bit 21)  
        .equ EXTI_PR1_PR22, 1 << 22   @ bitWidth 1 (Pending bit 22)  
 
    .equ EXTI_IMR2, EXTI_BASE + 0x20 @ (Interrupt mask register) 
        .equ EXTI_IMR2_MR32, 1 << 0   @ bitWidth 1 (Interrupt Mask on external/internal line  32)  
        .equ EXTI_IMR2_MR33, 1 << 1   @ bitWidth 1 (Interrupt Mask on external/internal line  33)  
        .equ EXTI_IMR2_MR34, 1 << 2   @ bitWidth 1 (Interrupt Mask on external/internal line  34)  
        .equ EXTI_IMR2_MR35, 1 << 3   @ bitWidth 1 (Interrupt Mask on external/internal line  35)  
        .equ EXTI_IMR2_MR36, 1 << 4   @ bitWidth 1 (Interrupt Mask on external/internal line  36)  
        .equ EXTI_IMR2_MR37, 1 << 5   @ bitWidth 1 (Interrupt Mask on external/internal line  37)  
        .equ EXTI_IMR2_MR38, 1 << 6   @ bitWidth 1 (Interrupt Mask on external/internal line  38)  
        .equ EXTI_IMR2_MR39, 1 << 7   @ bitWidth 1 (Interrupt Mask on external/internal line  39)  
 
    .equ EXTI_EMR2, EXTI_BASE + 0x24 @ (Event mask register) 
        .equ EXTI_EMR2_MR32, 1 << 0   @ bitWidth 1 (Event mask on external/internal line  32)  
        .equ EXTI_EMR2_MR33, 1 << 1   @ bitWidth 1 (Event mask on external/internal line  33)  
        .equ EXTI_EMR2_MR34, 1 << 2   @ bitWidth 1 (Event mask on external/internal line  34)  
        .equ EXTI_EMR2_MR35, 1 << 3   @ bitWidth 1 (Event mask on external/internal line  35)  
        .equ EXTI_EMR2_MR36, 1 << 4   @ bitWidth 1 (Event mask on external/internal line  36)  
        .equ EXTI_EMR2_MR37, 1 << 5   @ bitWidth 1 (Event mask on external/internal line  37)  
        .equ EXTI_EMR2_MR38, 1 << 6   @ bitWidth 1 (Event mask on external/internal line  38)  
        .equ EXTI_EMR2_MR39, 1 << 7   @ bitWidth 1 (Event mask on external/internal line  39)  
 
    .equ EXTI_RTSR2, EXTI_BASE + 0x28 @ (Rising Trigger selection  register) 
        .equ EXTI_RTSR2_RT35, 1 << 3   @ bitWidth 1 (Rising trigger event configuration bit  of line 35)  
        .equ EXTI_RTSR2_RT36, 1 << 4   @ bitWidth 1 (Rising trigger event configuration bit  of line 36)  
        .equ EXTI_RTSR2_RT37, 1 << 5   @ bitWidth 1 (Rising trigger event configuration bit  of line 37)  
        .equ EXTI_RTSR2_RT38, 1 << 6   @ bitWidth 1 (Rising trigger event configuration bit  of line 38)  
 
    .equ EXTI_FTSR2, EXTI_BASE + 0x2C @ (Falling Trigger selection  register) 
        .equ EXTI_FTSR2_FT35, 1 << 3   @ bitWidth 1 (Falling trigger event configuration bit  of line 35)  
        .equ EXTI_FTSR2_FT36, 1 << 4   @ bitWidth 1 (Falling trigger event configuration bit  of line 36)  
        .equ EXTI_FTSR2_FT37, 1 << 5   @ bitWidth 1 (Falling trigger event configuration bit  of line 37)  
        .equ EXTI_FTSR2_FT38, 1 << 6   @ bitWidth 1 (Falling trigger event configuration bit  of line 38)  
 
    .equ EXTI_SWIER2, EXTI_BASE + 0x30 @ (Software interrupt event  register) 
        .equ EXTI_SWIER2_SWI35, 1 << 3   @ bitWidth 1 (Software interrupt on line  35)  
        .equ EXTI_SWIER2_SWI36, 1 << 4   @ bitWidth 1 (Software interrupt on line  36)  
        .equ EXTI_SWIER2_SWI37, 1 << 5   @ bitWidth 1 (Software interrupt on line  37)  
        .equ EXTI_SWIER2_SWI38, 1 << 6   @ bitWidth 1 (Software interrupt on line  38)  
 
    .equ EXTI_PR2, EXTI_BASE + 0x34 @ (Pending register) 
        .equ EXTI_PR2_PIF35, 1 << 3   @ bitWidth 1 (Pending interrupt flag on line  35)  
        .equ EXTI_PR2_PIF36, 1 << 4   @ bitWidth 1 (Pending interrupt flag on line  36)  
        .equ EXTI_PR2_PIF37, 1 << 5   @ bitWidth 1 (Pending interrupt flag on line  37)  
        .equ EXTI_PR2_PIF38, 1 << 6   @ bitWidth 1 (Pending interrupt flag on line  38)  
 

@=========================== RTC ===========================@
.equ RTC_BASE, 0x40002800 @ (Real-time clock) 
    .equ RTC_TR, RTC_BASE + 0x0 @ (time register) 
        .equ RTC_TR_PM, 1 << 22   @ bitWidth 1 (AM/PM notation)  
        .equ RTC_TR_HT_Shift, 20   @ bitWidth 2 (Hour tens in BCD format)  
        .equ RTC_TR_HU_Shift, 16   @ bitWidth 4 (Hour units in BCD format)  
        .equ RTC_TR_MNT_Shift, 12   @ bitWidth 3 (Minute tens in BCD format)  
        .equ RTC_TR_MNU_Shift, 8   @ bitWidth 4 (Minute units in BCD format)  
        .equ RTC_TR_ST_Shift, 4   @ bitWidth 3 (Second tens in BCD format)  
        .equ RTC_TR_SU_Shift, 0   @ bitWidth 4 (Second units in BCD format)  
 
    .equ RTC_DR, RTC_BASE + 0x4 @ (date register) 
        .equ RTC_DR_YT_Shift, 20   @ bitWidth 4 (Year tens in BCD format)  
        .equ RTC_DR_YU_Shift, 16   @ bitWidth 4 (Year units in BCD format)  
        .equ RTC_DR_WDU_Shift, 13   @ bitWidth 3 (Week day units)  
        .equ RTC_DR_MT, 1 << 12   @ bitWidth 1 (Month tens in BCD format)  
        .equ RTC_DR_MU_Shift, 8   @ bitWidth 4 (Month units in BCD format)  
        .equ RTC_DR_DT_Shift, 4   @ bitWidth 2 (Date tens in BCD format)  
        .equ RTC_DR_DU_Shift, 0   @ bitWidth 4 (Date units in BCD format)  
 
    .equ RTC_CR, RTC_BASE + 0x8 @ (control register) 
        .equ RTC_CR_WCKSEL_Shift, 0   @ bitWidth 3 (Wakeup clock selection)  
        .equ RTC_CR_TSEDGE, 1 << 3   @ bitWidth 1 (Time-stamp event active  edge)  
        .equ RTC_CR_REFCKON, 1 << 4   @ bitWidth 1 (Reference clock detection enable 50 or  60 Hz)  
        .equ RTC_CR_BYPSHAD, 1 << 5   @ bitWidth 1 (Bypass the shadow  registers)  
        .equ RTC_CR_FMT, 1 << 6   @ bitWidth 1 (Hour format)  
        .equ RTC_CR_ALRAE, 1 << 8   @ bitWidth 1 (Alarm A enable)  
        .equ RTC_CR_ALRBE, 1 << 9   @ bitWidth 1 (Alarm B enable)  
        .equ RTC_CR_WUTE, 1 << 10   @ bitWidth 1 (Wakeup timer enable)  
        .equ RTC_CR_TSE, 1 << 11   @ bitWidth 1 (Time stamp enable)  
        .equ RTC_CR_ALRAIE, 1 << 12   @ bitWidth 1 (Alarm A interrupt enable)  
        .equ RTC_CR_ALRBIE, 1 << 13   @ bitWidth 1 (Alarm B interrupt enable)  
        .equ RTC_CR_WUTIE, 1 << 14   @ bitWidth 1 (Wakeup timer interrupt  enable)  
        .equ RTC_CR_TSIE, 1 << 15   @ bitWidth 1 (Time-stamp interrupt  enable)  
        .equ RTC_CR_ADD1H, 1 << 16   @ bitWidth 1 (Add 1 hour summer time  change)  
        .equ RTC_CR_SUB1H, 1 << 17   @ bitWidth 1 (Subtract 1 hour winter time  change)  
        .equ RTC_CR_BKP, 1 << 18   @ bitWidth 1 (Backup)  
        .equ RTC_CR_COSEL, 1 << 19   @ bitWidth 1 (Calibration output  selection)  
        .equ RTC_CR_POL, 1 << 20   @ bitWidth 1 (Output polarity)  
        .equ RTC_CR_OSEL_Shift, 21   @ bitWidth 2 (Output selection)  
        .equ RTC_CR_COE, 1 << 23   @ bitWidth 1 (Calibration output enable)  
        .equ RTC_CR_ITSE, 1 << 24   @ bitWidth 1 (timestamp on internal event  enable)  
 
    .equ RTC_ISR, RTC_BASE + 0xC @ (initialization and status  register) 
        .equ RTC_ISR_ALRAWF, 1 << 0   @ bitWidth 1 (Alarm A write flag)  
        .equ RTC_ISR_ALRBWF, 1 << 1   @ bitWidth 1 (Alarm B write flag)  
        .equ RTC_ISR_WUTWF, 1 << 2   @ bitWidth 1 (Wakeup timer write flag)  
        .equ RTC_ISR_SHPF, 1 << 3   @ bitWidth 1 (Shift operation pending)  
        .equ RTC_ISR_INITS, 1 << 4   @ bitWidth 1 (Initialization status flag)  
        .equ RTC_ISR_RSF, 1 << 5   @ bitWidth 1 (Registers synchronization  flag)  
        .equ RTC_ISR_INITF, 1 << 6   @ bitWidth 1 (Initialization flag)  
        .equ RTC_ISR_INIT, 1 << 7   @ bitWidth 1 (Initialization mode)  
        .equ RTC_ISR_ALRAF, 1 << 8   @ bitWidth 1 (Alarm A flag)  
        .equ RTC_ISR_ALRBF, 1 << 9   @ bitWidth 1 (Alarm B flag)  
        .equ RTC_ISR_WUTF, 1 << 10   @ bitWidth 1 (Wakeup timer flag)  
        .equ RTC_ISR_TSF, 1 << 11   @ bitWidth 1 (Time-stamp flag)  
        .equ RTC_ISR_TSOVF, 1 << 12   @ bitWidth 1 (Time-stamp overflow flag)  
        .equ RTC_ISR_TAMP1F, 1 << 13   @ bitWidth 1 (Tamper detection flag)  
        .equ RTC_ISR_TAMP2F, 1 << 14   @ bitWidth 1 (RTC_TAMP2 detection flag)  
        .equ RTC_ISR_TAMP3F, 1 << 15   @ bitWidth 1 (RTC_TAMP3 detection flag)  
        .equ RTC_ISR_RECALPF, 1 << 16   @ bitWidth 1 (Recalibration pending Flag)  
 
    .equ RTC_PRER, RTC_BASE + 0x10 @ (prescaler register) 
        .equ RTC_PRER_PREDIV_A_Shift, 16   @ bitWidth 7 (Asynchronous prescaler  factor)  
        .equ RTC_PRER_PREDIV_S_Shift, 0   @ bitWidth 15 (Synchronous prescaler  factor)  
 
    .equ RTC_WUTR, RTC_BASE + 0x14 @ (wakeup timer register) 
        .equ RTC_WUTR_WUT_Shift, 0   @ bitWidth 16 (Wakeup auto-reload value  bits)  
 
    .equ RTC_ALRMAR, RTC_BASE + 0x1C @ (alarm A register) 
        .equ RTC_ALRMAR_MSK4, 1 << 31   @ bitWidth 1 (Alarm A date mask)  
        .equ RTC_ALRMAR_WDSEL, 1 << 30   @ bitWidth 1 (Week day selection)  
        .equ RTC_ALRMAR_DT_Shift, 28   @ bitWidth 2 (Date tens in BCD format)  
        .equ RTC_ALRMAR_DU_Shift, 24   @ bitWidth 4 (Date units or day in BCD  format)  
        .equ RTC_ALRMAR_MSK3, 1 << 23   @ bitWidth 1 (Alarm A hours mask)  
        .equ RTC_ALRMAR_PM, 1 << 22   @ bitWidth 1 (AM/PM notation)  
        .equ RTC_ALRMAR_HT_Shift, 20   @ bitWidth 2 (Hour tens in BCD format)  
        .equ RTC_ALRMAR_HU_Shift, 16   @ bitWidth 4 (Hour units in BCD format)  
        .equ RTC_ALRMAR_MSK2, 1 << 15   @ bitWidth 1 (Alarm A minutes mask)  
        .equ RTC_ALRMAR_MNT_Shift, 12   @ bitWidth 3 (Minute tens in BCD format)  
        .equ RTC_ALRMAR_MNU_Shift, 8   @ bitWidth 4 (Minute units in BCD format)  
        .equ RTC_ALRMAR_MSK1, 1 << 7   @ bitWidth 1 (Alarm A seconds mask)  
        .equ RTC_ALRMAR_ST_Shift, 4   @ bitWidth 3 (Second tens in BCD format)  
        .equ RTC_ALRMAR_SU_Shift, 0   @ bitWidth 4 (Second units in BCD format)  
 
    .equ RTC_ALRMBR, RTC_BASE + 0x20 @ (alarm B register) 
        .equ RTC_ALRMBR_MSK4, 1 << 31   @ bitWidth 1 (Alarm B date mask)  
        .equ RTC_ALRMBR_WDSEL, 1 << 30   @ bitWidth 1 (Week day selection)  
        .equ RTC_ALRMBR_DT_Shift, 28   @ bitWidth 2 (Date tens in BCD format)  
        .equ RTC_ALRMBR_DU_Shift, 24   @ bitWidth 4 (Date units or day in BCD  format)  
        .equ RTC_ALRMBR_MSK3, 1 << 23   @ bitWidth 1 (Alarm B hours mask)  
        .equ RTC_ALRMBR_PM, 1 << 22   @ bitWidth 1 (AM/PM notation)  
        .equ RTC_ALRMBR_HT_Shift, 20   @ bitWidth 2 (Hour tens in BCD format)  
        .equ RTC_ALRMBR_HU_Shift, 16   @ bitWidth 4 (Hour units in BCD format)  
        .equ RTC_ALRMBR_MSK2, 1 << 15   @ bitWidth 1 (Alarm B minutes mask)  
        .equ RTC_ALRMBR_MNT_Shift, 12   @ bitWidth 3 (Minute tens in BCD format)  
        .equ RTC_ALRMBR_MNU_Shift, 8   @ bitWidth 4 (Minute units in BCD format)  
        .equ RTC_ALRMBR_MSK1, 1 << 7   @ bitWidth 1 (Alarm B seconds mask)  
        .equ RTC_ALRMBR_ST_Shift, 4   @ bitWidth 3 (Second tens in BCD format)  
        .equ RTC_ALRMBR_SU_Shift, 0   @ bitWidth 4 (Second units in BCD format)  
 
    .equ RTC_WPR, RTC_BASE + 0x24 @ (write protection register) 
        .equ RTC_WPR_KEY_Shift, 0   @ bitWidth 8 (Write protection key)  
 
    .equ RTC_SSR, RTC_BASE + 0x28 @ (sub second register) 
        .equ RTC_SSR_SS_Shift, 0   @ bitWidth 16 (Sub second value)  
 
    .equ RTC_SHIFTR, RTC_BASE + 0x2C @ (shift control register) 
        .equ RTC_SHIFTR_ADD1S, 1 << 31   @ bitWidth 1 (Add one second)  
        .equ RTC_SHIFTR_SUBFS_Shift, 0   @ bitWidth 15 (Subtract a fraction of a  second)  
 
    .equ RTC_TSTR, RTC_BASE + 0x30 @ (time stamp time register) 
        .equ RTC_TSTR_SU_Shift, 0   @ bitWidth 4 (Second units in BCD format)  
        .equ RTC_TSTR_ST_Shift, 4   @ bitWidth 3 (Second tens in BCD format)  
        .equ RTC_TSTR_MNU_Shift, 8   @ bitWidth 4 (Minute units in BCD format)  
        .equ RTC_TSTR_MNT_Shift, 12   @ bitWidth 3 (Minute tens in BCD format)  
        .equ RTC_TSTR_HU_Shift, 16   @ bitWidth 4 (Hour units in BCD format)  
        .equ RTC_TSTR_HT_Shift, 20   @ bitWidth 2 (Hour tens in BCD format)  
        .equ RTC_TSTR_PM, 1 << 22   @ bitWidth 1 (AM/PM notation)  
 
    .equ RTC_TSDR, RTC_BASE + 0x34 @ (time stamp date register) 
        .equ RTC_TSDR_WDU_Shift, 13   @ bitWidth 3 (Week day units)  
        .equ RTC_TSDR_MT, 1 << 12   @ bitWidth 1 (Month tens in BCD format)  
        .equ RTC_TSDR_MU_Shift, 8   @ bitWidth 4 (Month units in BCD format)  
        .equ RTC_TSDR_DT_Shift, 4   @ bitWidth 2 (Date tens in BCD format)  
        .equ RTC_TSDR_DU_Shift, 0   @ bitWidth 4 (Date units in BCD format)  
 
    .equ RTC_TSSSR, RTC_BASE + 0x38 @ (timestamp sub second register) 
        .equ RTC_TSSSR_SS_Shift, 0   @ bitWidth 16 (Sub second value)  
 
    .equ RTC_CALR, RTC_BASE + 0x3C @ (calibration register) 
        .equ RTC_CALR_CALP, 1 << 15   @ bitWidth 1 (Increase frequency of RTC by 488.5  ppm)  
        .equ RTC_CALR_CALW8, 1 << 14   @ bitWidth 1 (Use an 8-second calibration cycle  period)  
        .equ RTC_CALR_CALW16, 1 << 13   @ bitWidth 1 (Use a 16-second calibration cycle  period)  
        .equ RTC_CALR_CALM_Shift, 0   @ bitWidth 9 (Calibration minus)  
 
    .equ RTC_TAMPCR, RTC_BASE + 0x40 @ (tamper configuration register) 
        .equ RTC_TAMPCR_TAMP1E, 1 << 0   @ bitWidth 1 (Tamper 1 detection enable)  
        .equ RTC_TAMPCR_TAMP1TRG, 1 << 1   @ bitWidth 1 (Active level for tamper 1)  
        .equ RTC_TAMPCR_TAMPIE, 1 << 2   @ bitWidth 1 (Tamper interrupt enable)  
        .equ RTC_TAMPCR_TAMP2E, 1 << 3   @ bitWidth 1 (Tamper 2 detection enable)  
        .equ RTC_TAMPCR_TAMP2TRG, 1 << 4   @ bitWidth 1 (Active level for tamper 2)  
        .equ RTC_TAMPCR_TAMP3E, 1 << 5   @ bitWidth 1 (Tamper 3 detection enable)  
        .equ RTC_TAMPCR_TAMP3TRG, 1 << 6   @ bitWidth 1 (Active level for tamper 3)  
        .equ RTC_TAMPCR_TAMPTS, 1 << 7   @ bitWidth 1 (Activate timestamp on tamper detection  event)  
        .equ RTC_TAMPCR_TAMPFREQ_Shift, 8   @ bitWidth 3 (Tamper sampling frequency)  
        .equ RTC_TAMPCR_TAMPFLT_Shift, 11   @ bitWidth 2 (Tamper filter count)  
        .equ RTC_TAMPCR_TAMPPRCH_Shift, 13   @ bitWidth 2 (Tamper precharge duration)  
        .equ RTC_TAMPCR_TAMPPUDIS, 1 << 15   @ bitWidth 1 (TAMPER pull-up disable)  
        .equ RTC_TAMPCR_TAMP1IE, 1 << 16   @ bitWidth 1 (Tamper 1 interrupt enable)  
        .equ RTC_TAMPCR_TAMP1NOERASE, 1 << 17   @ bitWidth 1 (Tamper 1 no erase)  
        .equ RTC_TAMPCR_TAMP1MF, 1 << 18   @ bitWidth 1 (Tamper 1 mask flag)  
        .equ RTC_TAMPCR_TAMP2IE, 1 << 19   @ bitWidth 1 (Tamper 2 interrupt enable)  
        .equ RTC_TAMPCR_TAMP2NOERASE, 1 << 20   @ bitWidth 1 (Tamper 2 no erase)  
        .equ RTC_TAMPCR_TAMP2MF, 1 << 21   @ bitWidth 1 (Tamper 2 mask flag)  
        .equ RTC_TAMPCR_TAMP3IE, 1 << 22   @ bitWidth 1 (Tamper 3 interrupt enable)  
        .equ RTC_TAMPCR_TAMP3NOERASE, 1 << 23   @ bitWidth 1 (Tamper 3 no erase)  
        .equ RTC_TAMPCR_TAMP3MF, 1 << 24   @ bitWidth 1 (Tamper 3 mask flag)  
 
    .equ RTC_ALRMASSR, RTC_BASE + 0x44 @ (alarm A sub second register) 
        .equ RTC_ALRMASSR_MASKSS_Shift, 24   @ bitWidth 4 (Mask the most-significant bits starting  at this bit)  
        .equ RTC_ALRMASSR_SS_Shift, 0   @ bitWidth 15 (Sub seconds value)  
 
    .equ RTC_ALRMBSSR, RTC_BASE + 0x48 @ (alarm B sub second register) 
        .equ RTC_ALRMBSSR_MASKSS_Shift, 24   @ bitWidth 4 (Mask the most-significant bits starting  at this bit)  
        .equ RTC_ALRMBSSR_SS_Shift, 0   @ bitWidth 15 (Sub seconds value)  
 
    .equ RTC_OR, RTC_BASE + 0x4C @ (option register) 
        .equ RTC_OR_RTC_ALARM_TYPE, 1 << 0   @ bitWidth 1 (RTC_ALARM on PC13 output  type)  
        .equ RTC_OR_RTC_OUT_RMP, 1 << 1   @ bitWidth 1 (RTC_OUT remap)  
 
    .equ RTC_BKP0R, RTC_BASE + 0x50 @ (backup register) 
        .equ RTC_BKP0R_BKP_Shift, 0   @ bitWidth 32 (BKP)  
 
    .equ RTC_BKP1R, RTC_BASE + 0x54 @ (backup register) 
        .equ RTC_BKP1R_BKP_Shift, 0   @ bitWidth 32 (BKP)  
 
    .equ RTC_BKP2R, RTC_BASE + 0x58 @ (backup register) 
        .equ RTC_BKP2R_BKP_Shift, 0   @ bitWidth 32 (BKP)  
 
    .equ RTC_BKP3R, RTC_BASE + 0x5C @ (backup register) 
        .equ RTC_BKP3R_BKP_Shift, 0   @ bitWidth 32 (BKP)  
 
    .equ RTC_BKP4R, RTC_BASE + 0x60 @ (backup register) 
        .equ RTC_BKP4R_BKP_Shift, 0   @ bitWidth 32 (BKP)  
 
    .equ RTC_BKP5R, RTC_BASE + 0x64 @ (backup register) 
        .equ RTC_BKP5R_BKP_Shift, 0   @ bitWidth 32 (BKP)  
 
    .equ RTC_BKP6R, RTC_BASE + 0x68 @ (backup register) 
        .equ RTC_BKP6R_BKP_Shift, 0   @ bitWidth 32 (BKP)  
 
    .equ RTC_BKP7R, RTC_BASE + 0x6C @ (backup register) 
        .equ RTC_BKP7R_BKP_Shift, 0   @ bitWidth 32 (BKP)  
 
    .equ RTC_BKP8R, RTC_BASE + 0x70 @ (backup register) 
        .equ RTC_BKP8R_BKP_Shift, 0   @ bitWidth 32 (BKP)  
 
    .equ RTC_BKP9R, RTC_BASE + 0x74 @ (backup register) 
        .equ RTC_BKP9R_BKP_Shift, 0   @ bitWidth 32 (BKP)  
 
    .equ RTC_BKP10R, RTC_BASE + 0x78 @ (backup register) 
        .equ RTC_BKP10R_BKP_Shift, 0   @ bitWidth 32 (BKP)  
 
    .equ RTC_BKP11R, RTC_BASE + 0x7C @ (backup register) 
        .equ RTC_BKP11R_BKP_Shift, 0   @ bitWidth 32 (BKP)  
 
    .equ RTC_BKP12R, RTC_BASE + 0x80 @ (backup register) 
        .equ RTC_BKP12R_BKP_Shift, 0   @ bitWidth 32 (BKP)  
 
    .equ RTC_BKP13R, RTC_BASE + 0x84 @ (backup register) 
        .equ RTC_BKP13R_BKP_Shift, 0   @ bitWidth 32 (BKP)  
 
    .equ RTC_BKP14R, RTC_BASE + 0x88 @ (backup register) 
        .equ RTC_BKP14R_BKP_Shift, 0   @ bitWidth 32 (BKP)  
 
    .equ RTC_BKP15R, RTC_BASE + 0x8C @ (backup register) 
        .equ RTC_BKP15R_BKP_Shift, 0   @ bitWidth 32 (BKP)  
 
    .equ RTC_BKP16R, RTC_BASE + 0x90 @ (backup register) 
        .equ RTC_BKP16R_BKP_Shift, 0   @ bitWidth 32 (BKP)  
 
    .equ RTC_BKP17R, RTC_BASE + 0x94 @ (backup register) 
        .equ RTC_BKP17R_BKP_Shift, 0   @ bitWidth 32 (BKP)  
 
    .equ RTC_BKP18R, RTC_BASE + 0x98 @ (backup register) 
        .equ RTC_BKP18R_BKP_Shift, 0   @ bitWidth 32 (BKP)  
 
    .equ RTC_BKP19R, RTC_BASE + 0x9C @ (backup register) 
        .equ RTC_BKP19R_BKP_Shift, 0   @ bitWidth 32 (BKP)  
 
    .equ RTC_BKP20R, RTC_BASE + 0xA0 @ (backup register) 
        .equ RTC_BKP20R_BKP_Shift, 0   @ bitWidth 32 (BKP)  
 
    .equ RTC_BKP21R, RTC_BASE + 0xA4 @ (backup register) 
        .equ RTC_BKP21R_BKP_Shift, 0   @ bitWidth 32 (BKP)  
 
    .equ RTC_BKP22R, RTC_BASE + 0xA8 @ (backup register) 
        .equ RTC_BKP22R_BKP_Shift, 0   @ bitWidth 32 (BKP)  
 
    .equ RTC_BKP23R, RTC_BASE + 0xAC @ (backup register) 
        .equ RTC_BKP23R_BKP_Shift, 0   @ bitWidth 32 (BKP)  
 
    .equ RTC_BKP24R, RTC_BASE + 0xB0 @ (backup register) 
        .equ RTC_BKP24R_BKP_Shift, 0   @ bitWidth 32 (BKP)  
 
    .equ RTC_BKP25R, RTC_BASE + 0xB4 @ (backup register) 
        .equ RTC_BKP25R_BKP_Shift, 0   @ bitWidth 32 (BKP)  
 
    .equ RTC_BKP26R, RTC_BASE + 0xB8 @ (backup register) 
        .equ RTC_BKP26R_BKP_Shift, 0   @ bitWidth 32 (BKP)  
 
    .equ RTC_BKP27R, RTC_BASE + 0xBC @ (backup register) 
        .equ RTC_BKP27R_BKP_Shift, 0   @ bitWidth 32 (BKP)  
 
    .equ RTC_BKP28R, RTC_BASE + 0xC0 @ (backup register) 
        .equ RTC_BKP28R_BKP_Shift, 0   @ bitWidth 32 (BKP)  
 
    .equ RTC_BKP29R, RTC_BASE + 0xC4 @ (backup register) 
        .equ RTC_BKP29R_BKP_Shift, 0   @ bitWidth 32 (BKP)  
 
    .equ RTC_BKP30R, RTC_BASE + 0xC8 @ (backup register) 
        .equ RTC_BKP30R_BKP_Shift, 0   @ bitWidth 32 (BKP)  
 
    .equ RTC_BKP31R, RTC_BASE + 0xCC @ (backup register) 
        .equ RTC_BKP31R_BKP_Shift, 0   @ bitWidth 32 (BKP)  
 

@=========================== OTG_FS_GLOBAL ===========================@
.equ OTG_FS_GLOBAL_BASE, 0x50000000 @ (USB on the go full speed) 
    .equ OTG_FS_GLOBAL_FS_GOTGCTL, OTG_FS_GLOBAL_BASE + 0x0 @ (OTG_FS control and status register  OTG_FS_GOTGCTL) 
        .equ OTG_FS_GLOBAL_FS_GOTGCTL_SRQSCS, 1 << 0   @ bitWidth 1 (Session request success)  
        .equ OTG_FS_GLOBAL_FS_GOTGCTL_SRQ, 1 << 1   @ bitWidth 1 (Session request)  
        .equ OTG_FS_GLOBAL_FS_GOTGCTL_HNGSCS, 1 << 8   @ bitWidth 1 (Host negotiation success)  
        .equ OTG_FS_GLOBAL_FS_GOTGCTL_HNPRQ, 1 << 9   @ bitWidth 1 (HNP request)  
        .equ OTG_FS_GLOBAL_FS_GOTGCTL_HSHNPEN, 1 << 10   @ bitWidth 1 (Host set HNP enable)  
        .equ OTG_FS_GLOBAL_FS_GOTGCTL_DHNPEN, 1 << 11   @ bitWidth 1 (Device HNP enabled)  
        .equ OTG_FS_GLOBAL_FS_GOTGCTL_CIDSTS, 1 << 16   @ bitWidth 1 (Connector ID status)  
        .equ OTG_FS_GLOBAL_FS_GOTGCTL_DBCT, 1 << 17   @ bitWidth 1 (Long/short debounce time)  
        .equ OTG_FS_GLOBAL_FS_GOTGCTL_ASVLD, 1 << 18   @ bitWidth 1 (A-session valid)  
        .equ OTG_FS_GLOBAL_FS_GOTGCTL_BSVLD, 1 << 19   @ bitWidth 1 (B-session valid)  
 
    .equ OTG_FS_GLOBAL_FS_GOTGINT, OTG_FS_GLOBAL_BASE + 0x4 @ (OTG_FS interrupt register  OTG_FS_GOTGINT) 
        .equ OTG_FS_GLOBAL_FS_GOTGINT_SEDET, 1 << 2   @ bitWidth 1 (Session end detected)  
        .equ OTG_FS_GLOBAL_FS_GOTGINT_SRSSCHG, 1 << 8   @ bitWidth 1 (Session request success status  change)  
        .equ OTG_FS_GLOBAL_FS_GOTGINT_HNSSCHG, 1 << 9   @ bitWidth 1 (Host negotiation success status  change)  
        .equ OTG_FS_GLOBAL_FS_GOTGINT_HNGDET, 1 << 17   @ bitWidth 1 (Host negotiation detected)  
        .equ OTG_FS_GLOBAL_FS_GOTGINT_ADTOCHG, 1 << 18   @ bitWidth 1 (A-device timeout change)  
        .equ OTG_FS_GLOBAL_FS_GOTGINT_DBCDNE, 1 << 19   @ bitWidth 1 (Debounce done)  
 
    .equ OTG_FS_GLOBAL_FS_GAHBCFG, OTG_FS_GLOBAL_BASE + 0x8 @ (OTG_FS AHB configuration register  OTG_FS_GAHBCFG) 
        .equ OTG_FS_GLOBAL_FS_GAHBCFG_GINT, 1 << 0   @ bitWidth 1 (Global interrupt mask)  
        .equ OTG_FS_GLOBAL_FS_GAHBCFG_TXFELVL, 1 << 7   @ bitWidth 1 (TxFIFO empty level)  
        .equ OTG_FS_GLOBAL_FS_GAHBCFG_PTXFELVL, 1 << 8   @ bitWidth 1 (Periodic TxFIFO empty  level)  
 
    .equ OTG_FS_GLOBAL_FS_GUSBCFG, OTG_FS_GLOBAL_BASE + 0xC @ (OTG_FS USB configuration register  OTG_FS_GUSBCFG) 
        .equ OTG_FS_GLOBAL_FS_GUSBCFG_TOCAL_Shift, 0   @ bitWidth 3 (FS timeout calibration)  
        .equ OTG_FS_GLOBAL_FS_GUSBCFG_PHYSEL, 1 << 6   @ bitWidth 1 (Full Speed serial transceiver  select)  
        .equ OTG_FS_GLOBAL_FS_GUSBCFG_SRPCAP, 1 << 8   @ bitWidth 1 (SRP-capable)  
        .equ OTG_FS_GLOBAL_FS_GUSBCFG_HNPCAP, 1 << 9   @ bitWidth 1 (HNP-capable)  
        .equ OTG_FS_GLOBAL_FS_GUSBCFG_TRDT_Shift, 10   @ bitWidth 4 (USB turnaround time)  
        .equ OTG_FS_GLOBAL_FS_GUSBCFG_FHMOD, 1 << 29   @ bitWidth 1 (Force host mode)  
        .equ OTG_FS_GLOBAL_FS_GUSBCFG_FDMOD, 1 << 30   @ bitWidth 1 (Force device mode)  
        .equ OTG_FS_GLOBAL_FS_GUSBCFG_CTXPKT, 1 << 31   @ bitWidth 1 (Corrupt Tx packet)  
 
    .equ OTG_FS_GLOBAL_FS_GRSTCTL, OTG_FS_GLOBAL_BASE + 0x10 @ (OTG_FS reset register  OTG_FS_GRSTCTL) 
        .equ OTG_FS_GLOBAL_FS_GRSTCTL_CSRST, 1 << 0   @ bitWidth 1 (Core soft reset)  
        .equ OTG_FS_GLOBAL_FS_GRSTCTL_HSRST, 1 << 1   @ bitWidth 1 (HCLK soft reset)  
        .equ OTG_FS_GLOBAL_FS_GRSTCTL_FCRST, 1 << 2   @ bitWidth 1 (Host frame counter reset)  
        .equ OTG_FS_GLOBAL_FS_GRSTCTL_RXFFLSH, 1 << 4   @ bitWidth 1 (RxFIFO flush)  
        .equ OTG_FS_GLOBAL_FS_GRSTCTL_TXFFLSH, 1 << 5   @ bitWidth 1 (TxFIFO flush)  
        .equ OTG_FS_GLOBAL_FS_GRSTCTL_TXFNUM_Shift, 6   @ bitWidth 5 (TxFIFO number)  
        .equ OTG_FS_GLOBAL_FS_GRSTCTL_AHBIDL, 1 << 31   @ bitWidth 1 (AHB master idle)  
 
    .equ OTG_FS_GLOBAL_FS_GINTSTS, OTG_FS_GLOBAL_BASE + 0x14 @ (OTG_FS core interrupt register  OTG_FS_GINTSTS) 
        .equ OTG_FS_GLOBAL_FS_GINTSTS_CMOD, 1 << 0   @ bitWidth 1 (Current mode of operation)  
        .equ OTG_FS_GLOBAL_FS_GINTSTS_MMIS, 1 << 1   @ bitWidth 1 (Mode mismatch interrupt)  
        .equ OTG_FS_GLOBAL_FS_GINTSTS_OTGINT, 1 << 2   @ bitWidth 1 (OTG interrupt)  
        .equ OTG_FS_GLOBAL_FS_GINTSTS_SOF, 1 << 3   @ bitWidth 1 (Start of frame)  
        .equ OTG_FS_GLOBAL_FS_GINTSTS_RXFLVL, 1 << 4   @ bitWidth 1 (RxFIFO non-empty)  
        .equ OTG_FS_GLOBAL_FS_GINTSTS_NPTXFE, 1 << 5   @ bitWidth 1 (Non-periodic TxFIFO empty)  
        .equ OTG_FS_GLOBAL_FS_GINTSTS_GINAKEFF, 1 << 6   @ bitWidth 1 (Global IN non-periodic NAK  effective)  
        .equ OTG_FS_GLOBAL_FS_GINTSTS_GOUTNAKEFF, 1 << 7   @ bitWidth 1 (Global OUT NAK effective)  
        .equ OTG_FS_GLOBAL_FS_GINTSTS_ESUSP, 1 << 10   @ bitWidth 1 (Early suspend)  
        .equ OTG_FS_GLOBAL_FS_GINTSTS_USBSUSP, 1 << 11   @ bitWidth 1 (USB suspend)  
        .equ OTG_FS_GLOBAL_FS_GINTSTS_USBRST, 1 << 12   @ bitWidth 1 (USB reset)  
        .equ OTG_FS_GLOBAL_FS_GINTSTS_ENUMDNE, 1 << 13   @ bitWidth 1 (Enumeration done)  
        .equ OTG_FS_GLOBAL_FS_GINTSTS_ISOODRP, 1 << 14   @ bitWidth 1 (Isochronous OUT packet dropped  interrupt)  
        .equ OTG_FS_GLOBAL_FS_GINTSTS_EOPF, 1 << 15   @ bitWidth 1 (End of periodic frame  interrupt)  
        .equ OTG_FS_GLOBAL_FS_GINTSTS_IEPINT, 1 << 18   @ bitWidth 1 (IN endpoint interrupt)  
        .equ OTG_FS_GLOBAL_FS_GINTSTS_OEPINT, 1 << 19   @ bitWidth 1 (OUT endpoint interrupt)  
        .equ OTG_FS_GLOBAL_FS_GINTSTS_IISOIXFR, 1 << 20   @ bitWidth 1 (Incomplete isochronous IN  transfer)  
        .equ OTG_FS_GLOBAL_FS_GINTSTS_IPXFR_INCOMPISOOUT, 1 << 21   @ bitWidth 1 (Incomplete periodic transferHost  mode/Incomplete isochronous OUT transferDevice  mode)  
        .equ OTG_FS_GLOBAL_FS_GINTSTS_HPRTINT, 1 << 24   @ bitWidth 1 (Host port interrupt)  
        .equ OTG_FS_GLOBAL_FS_GINTSTS_HCINT, 1 << 25   @ bitWidth 1 (Host channels interrupt)  
        .equ OTG_FS_GLOBAL_FS_GINTSTS_PTXFE, 1 << 26   @ bitWidth 1 (Periodic TxFIFO empty)  
        .equ OTG_FS_GLOBAL_FS_GINTSTS_CIDSCHG, 1 << 28   @ bitWidth 1 (Connector ID status change)  
        .equ OTG_FS_GLOBAL_FS_GINTSTS_DISCINT, 1 << 29   @ bitWidth 1 (Disconnect detected  interrupt)  
        .equ OTG_FS_GLOBAL_FS_GINTSTS_SRQINT, 1 << 30   @ bitWidth 1 (Session request/new session detected  interrupt)  
        .equ OTG_FS_GLOBAL_FS_GINTSTS_WKUPINT, 1 << 31   @ bitWidth 1 (Resume/remote wakeup detected  interrupt)  
 
    .equ OTG_FS_GLOBAL_FS_GINTMSK, OTG_FS_GLOBAL_BASE + 0x18 @ (OTG_FS interrupt mask register  OTG_FS_GINTMSK) 
        .equ OTG_FS_GLOBAL_FS_GINTMSK_MMISM, 1 << 1   @ bitWidth 1 (Mode mismatch interrupt  mask)  
        .equ OTG_FS_GLOBAL_FS_GINTMSK_OTGINT, 1 << 2   @ bitWidth 1 (OTG interrupt mask)  
        .equ OTG_FS_GLOBAL_FS_GINTMSK_SOFM, 1 << 3   @ bitWidth 1 (Start of frame mask)  
        .equ OTG_FS_GLOBAL_FS_GINTMSK_RXFLVLM, 1 << 4   @ bitWidth 1 (Receive FIFO non-empty  mask)  
        .equ OTG_FS_GLOBAL_FS_GINTMSK_NPTXFEM, 1 << 5   @ bitWidth 1 (Non-periodic TxFIFO empty  mask)  
        .equ OTG_FS_GLOBAL_FS_GINTMSK_GINAKEFFM, 1 << 6   @ bitWidth 1 (Global non-periodic IN NAK effective  mask)  
        .equ OTG_FS_GLOBAL_FS_GINTMSK_GONAKEFFM, 1 << 7   @ bitWidth 1 (Global OUT NAK effective  mask)  
        .equ OTG_FS_GLOBAL_FS_GINTMSK_ESUSPM, 1 << 10   @ bitWidth 1 (Early suspend mask)  
        .equ OTG_FS_GLOBAL_FS_GINTMSK_USBSUSPM, 1 << 11   @ bitWidth 1 (USB suspend mask)  
        .equ OTG_FS_GLOBAL_FS_GINTMSK_USBRST, 1 << 12   @ bitWidth 1 (USB reset mask)  
        .equ OTG_FS_GLOBAL_FS_GINTMSK_ENUMDNEM, 1 << 13   @ bitWidth 1 (Enumeration done mask)  
        .equ OTG_FS_GLOBAL_FS_GINTMSK_ISOODRPM, 1 << 14   @ bitWidth 1 (Isochronous OUT packet dropped interrupt  mask)  
        .equ OTG_FS_GLOBAL_FS_GINTMSK_EOPFM, 1 << 15   @ bitWidth 1 (End of periodic frame interrupt  mask)  
        .equ OTG_FS_GLOBAL_FS_GINTMSK_EPMISM, 1 << 17   @ bitWidth 1 (Endpoint mismatch interrupt  mask)  
        .equ OTG_FS_GLOBAL_FS_GINTMSK_IEPINT, 1 << 18   @ bitWidth 1 (IN endpoints interrupt  mask)  
        .equ OTG_FS_GLOBAL_FS_GINTMSK_OEPINT, 1 << 19   @ bitWidth 1 (OUT endpoints interrupt  mask)  
        .equ OTG_FS_GLOBAL_FS_GINTMSK_IISOIXFRM, 1 << 20   @ bitWidth 1 (Incomplete isochronous IN transfer  mask)  
        .equ OTG_FS_GLOBAL_FS_GINTMSK_IPXFRM_IISOOXFRM, 1 << 21   @ bitWidth 1 (Incomplete periodic transfer maskHost  mode/Incomplete isochronous OUT transfer maskDevice  mode)  
        .equ OTG_FS_GLOBAL_FS_GINTMSK_PRTIM, 1 << 24   @ bitWidth 1 (Host port interrupt mask)  
        .equ OTG_FS_GLOBAL_FS_GINTMSK_HCIM, 1 << 25   @ bitWidth 1 (Host channels interrupt  mask)  
        .equ OTG_FS_GLOBAL_FS_GINTMSK_PTXFEM, 1 << 26   @ bitWidth 1 (Periodic TxFIFO empty mask)  
        .equ OTG_FS_GLOBAL_FS_GINTMSK_CIDSCHGM, 1 << 28   @ bitWidth 1 (Connector ID status change  mask)  
        .equ OTG_FS_GLOBAL_FS_GINTMSK_DISCINT, 1 << 29   @ bitWidth 1 (Disconnect detected interrupt  mask)  
        .equ OTG_FS_GLOBAL_FS_GINTMSK_SRQIM, 1 << 30   @ bitWidth 1 (Session request/new session detected  interrupt mask)  
        .equ OTG_FS_GLOBAL_FS_GINTMSK_WUIM, 1 << 31   @ bitWidth 1 (Resume/remote wakeup detected interrupt  mask)  
 
    .equ OTG_FS_GLOBAL_FS_GRXSTSR_Device, OTG_FS_GLOBAL_BASE + 0x1C @ (OTG_FS Receive status debug readDevice  mode) 
        .equ OTG_FS_GLOBAL_FS_GRXSTSR_Device_EPNUM_Shift, 0   @ bitWidth 4 (Endpoint number)  
        .equ OTG_FS_GLOBAL_FS_GRXSTSR_Device_BCNT_Shift, 4   @ bitWidth 11 (Byte count)  
        .equ OTG_FS_GLOBAL_FS_GRXSTSR_Device_DPID_Shift, 15   @ bitWidth 2 (Data PID)  
        .equ OTG_FS_GLOBAL_FS_GRXSTSR_Device_PKTSTS_Shift, 17   @ bitWidth 4 (Packet status)  
        .equ OTG_FS_GLOBAL_FS_GRXSTSR_Device_FRMNUM_Shift, 21   @ bitWidth 4 (Frame number)  
 
    .equ OTG_FS_GLOBAL_FS_GRXSTSR_Host, OTG_FS_GLOBAL_BASE + 0x1C @ (OTG_FS Receive status debug readHost  mode) 
        .equ OTG_FS_GLOBAL_FS_GRXSTSR_Host_EPNUM_Shift, 0   @ bitWidth 4 (Endpoint number)  
        .equ OTG_FS_GLOBAL_FS_GRXSTSR_Host_BCNT_Shift, 4   @ bitWidth 11 (Byte count)  
        .equ OTG_FS_GLOBAL_FS_GRXSTSR_Host_DPID_Shift, 15   @ bitWidth 2 (Data PID)  
        .equ OTG_FS_GLOBAL_FS_GRXSTSR_Host_PKTSTS_Shift, 17   @ bitWidth 4 (Packet status)  
        .equ OTG_FS_GLOBAL_FS_GRXSTSR_Host_FRMNUM_Shift, 21   @ bitWidth 4 (Frame number)  
 
    .equ OTG_FS_GLOBAL_FS_GRXFSIZ, OTG_FS_GLOBAL_BASE + 0x24 @ (OTG_FS Receive FIFO size register  OTG_FS_GRXFSIZ) 
        .equ OTG_FS_GLOBAL_FS_GRXFSIZ_RXFD_Shift, 0   @ bitWidth 16 (RxFIFO depth)  
 
    .equ OTG_FS_GLOBAL_FS_GNPTXFSIZ_Device, OTG_FS_GLOBAL_BASE + 0x28 @ (OTG_FS non-periodic transmit FIFO size  register Device mode) 
        .equ OTG_FS_GLOBAL_FS_GNPTXFSIZ_Device_TX0FSA_Shift, 0   @ bitWidth 16 (Endpoint 0 transmit RAM start  address)  
        .equ OTG_FS_GLOBAL_FS_GNPTXFSIZ_Device_TX0FD_Shift, 16   @ bitWidth 16 (Endpoint 0 TxFIFO depth)  
 
    .equ OTG_FS_GLOBAL_FS_GNPTXFSIZ_Host, OTG_FS_GLOBAL_BASE + 0x28 @ (OTG_FS non-periodic transmit FIFO size  register Host mode) 
        .equ OTG_FS_GLOBAL_FS_GNPTXFSIZ_Host_NPTXFSA_Shift, 0   @ bitWidth 16 (Non-periodic transmit RAM start  address)  
        .equ OTG_FS_GLOBAL_FS_GNPTXFSIZ_Host_NPTXFD_Shift, 16   @ bitWidth 16 (Non-periodic TxFIFO depth)  
 
    .equ OTG_FS_GLOBAL_FS_GNPTXSTS, OTG_FS_GLOBAL_BASE + 0x2C @ (OTG_FS non-periodic transmit FIFO/queue  status register OTG_FS_GNPTXSTS) 
        .equ OTG_FS_GLOBAL_FS_GNPTXSTS_NPTXFSAV_Shift, 0   @ bitWidth 16 (Non-periodic TxFIFO space  available)  
        .equ OTG_FS_GLOBAL_FS_GNPTXSTS_NPTQXSAV_Shift, 16   @ bitWidth 8 (Non-periodic transmit request queue  space available)  
        .equ OTG_FS_GLOBAL_FS_GNPTXSTS_NPTXQTOP_Shift, 24   @ bitWidth 7 (Top of the non-periodic transmit request  queue)  
 
    .equ OTG_FS_GLOBAL_FS_GCCFG, OTG_FS_GLOBAL_BASE + 0x38 @ (OTG_FS general core configuration register  OTG_FS_GCCFG) 
        .equ OTG_FS_GLOBAL_FS_GCCFG_PWRDWN, 1 << 16   @ bitWidth 1 (Power down)  
        .equ OTG_FS_GLOBAL_FS_GCCFG_VBUSASEN, 1 << 18   @ bitWidth 1 (Enable the VBUS sensing  device)  
        .equ OTG_FS_GLOBAL_FS_GCCFG_VBUSBSEN, 1 << 19   @ bitWidth 1 (Enable the VBUS sensing  device)  
        .equ OTG_FS_GLOBAL_FS_GCCFG_SOFOUTEN, 1 << 20   @ bitWidth 1 (SOF output enable)  
 
    .equ OTG_FS_GLOBAL_FS_CID, OTG_FS_GLOBAL_BASE + 0x3C @ (core ID register) 
        .equ OTG_FS_GLOBAL_FS_CID_PRODUCT_ID_Shift, 0   @ bitWidth 32 (Product ID field)  
 
    .equ OTG_FS_GLOBAL_FS_HPTXFSIZ, OTG_FS_GLOBAL_BASE + 0x100 @ (OTG_FS Host periodic transmit FIFO size  register OTG_FS_HPTXFSIZ) 
        .equ OTG_FS_GLOBAL_FS_HPTXFSIZ_PTXSA_Shift, 0   @ bitWidth 16 (Host periodic TxFIFO start  address)  
        .equ OTG_FS_GLOBAL_FS_HPTXFSIZ_PTXFSIZ_Shift, 16   @ bitWidth 16 (Host periodic TxFIFO depth)  
 
    .equ OTG_FS_GLOBAL_FS_DIEPTXF1, OTG_FS_GLOBAL_BASE + 0x104 @ (OTG_FS device IN endpoint transmit FIFO size  register OTG_FS_DIEPTXF2) 
        .equ OTG_FS_GLOBAL_FS_DIEPTXF1_INEPTXSA_Shift, 0   @ bitWidth 16 (IN endpoint FIFO2 transmit RAM start  address)  
        .equ OTG_FS_GLOBAL_FS_DIEPTXF1_INEPTXFD_Shift, 16   @ bitWidth 16 (IN endpoint TxFIFO depth)  
 
    .equ OTG_FS_GLOBAL_FS_DIEPTXF2, OTG_FS_GLOBAL_BASE + 0x108 @ (OTG_FS device IN endpoint transmit FIFO size  register OTG_FS_DIEPTXF3) 
        .equ OTG_FS_GLOBAL_FS_DIEPTXF2_INEPTXSA_Shift, 0   @ bitWidth 16 (IN endpoint FIFO3 transmit RAM start  address)  
        .equ OTG_FS_GLOBAL_FS_DIEPTXF2_INEPTXFD_Shift, 16   @ bitWidth 16 (IN endpoint TxFIFO depth)  
 
    .equ OTG_FS_GLOBAL_FS_DIEPTXF3, OTG_FS_GLOBAL_BASE + 0x10C @ (OTG_FS device IN endpoint transmit FIFO size  register OTG_FS_DIEPTXF4) 
        .equ OTG_FS_GLOBAL_FS_DIEPTXF3_INEPTXSA_Shift, 0   @ bitWidth 16 (IN endpoint FIFO4 transmit RAM start  address)  
        .equ OTG_FS_GLOBAL_FS_DIEPTXF3_INEPTXFD_Shift, 16   @ bitWidth 16 (IN endpoint TxFIFO depth)  
 

@=========================== OTG_FS_HOST ===========================@
.equ OTG_FS_HOST_BASE, 0x50000400 @ (USB on the go full speed) 
    .equ OTG_FS_HOST_FS_HCFG, OTG_FS_HOST_BASE + 0x0 @ (OTG_FS host configuration register  OTG_FS_HCFG) 
        .equ OTG_FS_HOST_FS_HCFG_FSLSPCS_Shift, 0   @ bitWidth 2 (FS/LS PHY clock select)  
        .equ OTG_FS_HOST_FS_HCFG_FSLSS, 1 << 2   @ bitWidth 1 (FS- and LS-only support)  
 
    .equ OTG_FS_HOST_HFIR, OTG_FS_HOST_BASE + 0x4 @ (OTG_FS Host frame interval  register) 
        .equ OTG_FS_HOST_HFIR_FRIVL_Shift, 0   @ bitWidth 16 (Frame interval)  
 
    .equ OTG_FS_HOST_FS_HFNUM, OTG_FS_HOST_BASE + 0x8 @ (OTG_FS host frame number/frame time  remaining register OTG_FS_HFNUM) 
        .equ OTG_FS_HOST_FS_HFNUM_FRNUM_Shift, 0   @ bitWidth 16 (Frame number)  
        .equ OTG_FS_HOST_FS_HFNUM_FTREM_Shift, 16   @ bitWidth 16 (Frame time remaining)  
 
    .equ OTG_FS_HOST_FS_HPTXSTS, OTG_FS_HOST_BASE + 0x10 @ (OTG_FS_Host periodic transmit FIFO/queue  status register OTG_FS_HPTXSTS) 
        .equ OTG_FS_HOST_FS_HPTXSTS_PTXFSAVL_Shift, 0   @ bitWidth 16 (Periodic transmit data FIFO space  available)  
        .equ OTG_FS_HOST_FS_HPTXSTS_PTXQSAV_Shift, 16   @ bitWidth 8 (Periodic transmit request queue space  available)  
        .equ OTG_FS_HOST_FS_HPTXSTS_PTXQTOP_Shift, 24   @ bitWidth 8 (Top of the periodic transmit request  queue)  
 
    .equ OTG_FS_HOST_HAINT, OTG_FS_HOST_BASE + 0x14 @ (OTG_FS Host all channels interrupt  register) 
        .equ OTG_FS_HOST_HAINT_HAINT_Shift, 0   @ bitWidth 16 (Channel interrupts)  
 
    .equ OTG_FS_HOST_HAINTMSK, OTG_FS_HOST_BASE + 0x18 @ (OTG_FS host all channels interrupt mask  register) 
        .equ OTG_FS_HOST_HAINTMSK_HAINTM_Shift, 0   @ bitWidth 16 (Channel interrupt mask)  
 
    .equ OTG_FS_HOST_FS_HPRT, OTG_FS_HOST_BASE + 0x40 @ (OTG_FS host port control and status register  OTG_FS_HPRT) 
        .equ OTG_FS_HOST_FS_HPRT_PCSTS, 1 << 0   @ bitWidth 1 (Port connect status)  
        .equ OTG_FS_HOST_FS_HPRT_PCDET, 1 << 1   @ bitWidth 1 (Port connect detected)  
        .equ OTG_FS_HOST_FS_HPRT_PENA, 1 << 2   @ bitWidth 1 (Port enable)  
        .equ OTG_FS_HOST_FS_HPRT_PENCHNG, 1 << 3   @ bitWidth 1 (Port enable/disable change)  
        .equ OTG_FS_HOST_FS_HPRT_POCA, 1 << 4   @ bitWidth 1 (Port overcurrent active)  
        .equ OTG_FS_HOST_FS_HPRT_POCCHNG, 1 << 5   @ bitWidth 1 (Port overcurrent change)  
        .equ OTG_FS_HOST_FS_HPRT_PRES, 1 << 6   @ bitWidth 1 (Port resume)  
        .equ OTG_FS_HOST_FS_HPRT_PSUSP, 1 << 7   @ bitWidth 1 (Port suspend)  
        .equ OTG_FS_HOST_FS_HPRT_PRST, 1 << 8   @ bitWidth 1 (Port reset)  
        .equ OTG_FS_HOST_FS_HPRT_PLSTS_Shift, 10   @ bitWidth 2 (Port line status)  
        .equ OTG_FS_HOST_FS_HPRT_PPWR, 1 << 12   @ bitWidth 1 (Port power)  
        .equ OTG_FS_HOST_FS_HPRT_PTCTL_Shift, 13   @ bitWidth 4 (Port test control)  
        .equ OTG_FS_HOST_FS_HPRT_PSPD_Shift, 17   @ bitWidth 2 (Port speed)  
 
    .equ OTG_FS_HOST_FS_HCCHAR0, OTG_FS_HOST_BASE + 0x100 @ (OTG_FS host channel-0 characteristics  register OTG_FS_HCCHAR0) 
        .equ OTG_FS_HOST_FS_HCCHAR0_MPSIZ_Shift, 0   @ bitWidth 11 (Maximum packet size)  
        .equ OTG_FS_HOST_FS_HCCHAR0_EPNUM_Shift, 11   @ bitWidth 4 (Endpoint number)  
        .equ OTG_FS_HOST_FS_HCCHAR0_EPDIR, 1 << 15   @ bitWidth 1 (Endpoint direction)  
        .equ OTG_FS_HOST_FS_HCCHAR0_LSDEV, 1 << 17   @ bitWidth 1 (Low-speed device)  
        .equ OTG_FS_HOST_FS_HCCHAR0_EPTYP_Shift, 18   @ bitWidth 2 (Endpoint type)  
        .equ OTG_FS_HOST_FS_HCCHAR0_MCNT_Shift, 20   @ bitWidth 2 (Multicount)  
        .equ OTG_FS_HOST_FS_HCCHAR0_DAD_Shift, 22   @ bitWidth 7 (Device address)  
        .equ OTG_FS_HOST_FS_HCCHAR0_ODDFRM, 1 << 29   @ bitWidth 1 (Odd frame)  
        .equ OTG_FS_HOST_FS_HCCHAR0_CHDIS, 1 << 30   @ bitWidth 1 (Channel disable)  
        .equ OTG_FS_HOST_FS_HCCHAR0_CHENA, 1 << 31   @ bitWidth 1 (Channel enable)  
 
    .equ OTG_FS_HOST_FS_HCCHAR1, OTG_FS_HOST_BASE + 0x120 @ (OTG_FS host channel-1 characteristics  register OTG_FS_HCCHAR1) 
        .equ OTG_FS_HOST_FS_HCCHAR1_MPSIZ_Shift, 0   @ bitWidth 11 (Maximum packet size)  
        .equ OTG_FS_HOST_FS_HCCHAR1_EPNUM_Shift, 11   @ bitWidth 4 (Endpoint number)  
        .equ OTG_FS_HOST_FS_HCCHAR1_EPDIR, 1 << 15   @ bitWidth 1 (Endpoint direction)  
        .equ OTG_FS_HOST_FS_HCCHAR1_LSDEV, 1 << 17   @ bitWidth 1 (Low-speed device)  
        .equ OTG_FS_HOST_FS_HCCHAR1_EPTYP_Shift, 18   @ bitWidth 2 (Endpoint type)  
        .equ OTG_FS_HOST_FS_HCCHAR1_MCNT_Shift, 20   @ bitWidth 2 (Multicount)  
        .equ OTG_FS_HOST_FS_HCCHAR1_DAD_Shift, 22   @ bitWidth 7 (Device address)  
        .equ OTG_FS_HOST_FS_HCCHAR1_ODDFRM, 1 << 29   @ bitWidth 1 (Odd frame)  
        .equ OTG_FS_HOST_FS_HCCHAR1_CHDIS, 1 << 30   @ bitWidth 1 (Channel disable)  
        .equ OTG_FS_HOST_FS_HCCHAR1_CHENA, 1 << 31   @ bitWidth 1 (Channel enable)  
 
    .equ OTG_FS_HOST_FS_HCCHAR2, OTG_FS_HOST_BASE + 0x140 @ (OTG_FS host channel-2 characteristics  register OTG_FS_HCCHAR2) 
        .equ OTG_FS_HOST_FS_HCCHAR2_MPSIZ_Shift, 0   @ bitWidth 11 (Maximum packet size)  
        .equ OTG_FS_HOST_FS_HCCHAR2_EPNUM_Shift, 11   @ bitWidth 4 (Endpoint number)  
        .equ OTG_FS_HOST_FS_HCCHAR2_EPDIR, 1 << 15   @ bitWidth 1 (Endpoint direction)  
        .equ OTG_FS_HOST_FS_HCCHAR2_LSDEV, 1 << 17   @ bitWidth 1 (Low-speed device)  
        .equ OTG_FS_HOST_FS_HCCHAR2_EPTYP_Shift, 18   @ bitWidth 2 (Endpoint type)  
        .equ OTG_FS_HOST_FS_HCCHAR2_MCNT_Shift, 20   @ bitWidth 2 (Multicount)  
        .equ OTG_FS_HOST_FS_HCCHAR2_DAD_Shift, 22   @ bitWidth 7 (Device address)  
        .equ OTG_FS_HOST_FS_HCCHAR2_ODDFRM, 1 << 29   @ bitWidth 1 (Odd frame)  
        .equ OTG_FS_HOST_FS_HCCHAR2_CHDIS, 1 << 30   @ bitWidth 1 (Channel disable)  
        .equ OTG_FS_HOST_FS_HCCHAR2_CHENA, 1 << 31   @ bitWidth 1 (Channel enable)  
 
    .equ OTG_FS_HOST_FS_HCCHAR3, OTG_FS_HOST_BASE + 0x160 @ (OTG_FS host channel-3 characteristics  register OTG_FS_HCCHAR3) 
        .equ OTG_FS_HOST_FS_HCCHAR3_MPSIZ_Shift, 0   @ bitWidth 11 (Maximum packet size)  
        .equ OTG_FS_HOST_FS_HCCHAR3_EPNUM_Shift, 11   @ bitWidth 4 (Endpoint number)  
        .equ OTG_FS_HOST_FS_HCCHAR3_EPDIR, 1 << 15   @ bitWidth 1 (Endpoint direction)  
        .equ OTG_FS_HOST_FS_HCCHAR3_LSDEV, 1 << 17   @ bitWidth 1 (Low-speed device)  
        .equ OTG_FS_HOST_FS_HCCHAR3_EPTYP_Shift, 18   @ bitWidth 2 (Endpoint type)  
        .equ OTG_FS_HOST_FS_HCCHAR3_MCNT_Shift, 20   @ bitWidth 2 (Multicount)  
        .equ OTG_FS_HOST_FS_HCCHAR3_DAD_Shift, 22   @ bitWidth 7 (Device address)  
        .equ OTG_FS_HOST_FS_HCCHAR3_ODDFRM, 1 << 29   @ bitWidth 1 (Odd frame)  
        .equ OTG_FS_HOST_FS_HCCHAR3_CHDIS, 1 << 30   @ bitWidth 1 (Channel disable)  
        .equ OTG_FS_HOST_FS_HCCHAR3_CHENA, 1 << 31   @ bitWidth 1 (Channel enable)  
 
    .equ OTG_FS_HOST_FS_HCCHAR4, OTG_FS_HOST_BASE + 0x180 @ (OTG_FS host channel-4 characteristics  register OTG_FS_HCCHAR4) 
        .equ OTG_FS_HOST_FS_HCCHAR4_MPSIZ_Shift, 0   @ bitWidth 11 (Maximum packet size)  
        .equ OTG_FS_HOST_FS_HCCHAR4_EPNUM_Shift, 11   @ bitWidth 4 (Endpoint number)  
        .equ OTG_FS_HOST_FS_HCCHAR4_EPDIR, 1 << 15   @ bitWidth 1 (Endpoint direction)  
        .equ OTG_FS_HOST_FS_HCCHAR4_LSDEV, 1 << 17   @ bitWidth 1 (Low-speed device)  
        .equ OTG_FS_HOST_FS_HCCHAR4_EPTYP_Shift, 18   @ bitWidth 2 (Endpoint type)  
        .equ OTG_FS_HOST_FS_HCCHAR4_MCNT_Shift, 20   @ bitWidth 2 (Multicount)  
        .equ OTG_FS_HOST_FS_HCCHAR4_DAD_Shift, 22   @ bitWidth 7 (Device address)  
        .equ OTG_FS_HOST_FS_HCCHAR4_ODDFRM, 1 << 29   @ bitWidth 1 (Odd frame)  
        .equ OTG_FS_HOST_FS_HCCHAR4_CHDIS, 1 << 30   @ bitWidth 1 (Channel disable)  
        .equ OTG_FS_HOST_FS_HCCHAR4_CHENA, 1 << 31   @ bitWidth 1 (Channel enable)  
 
    .equ OTG_FS_HOST_FS_HCCHAR5, OTG_FS_HOST_BASE + 0x1A0 @ (OTG_FS host channel-5 characteristics  register OTG_FS_HCCHAR5) 
        .equ OTG_FS_HOST_FS_HCCHAR5_MPSIZ_Shift, 0   @ bitWidth 11 (Maximum packet size)  
        .equ OTG_FS_HOST_FS_HCCHAR5_EPNUM_Shift, 11   @ bitWidth 4 (Endpoint number)  
        .equ OTG_FS_HOST_FS_HCCHAR5_EPDIR, 1 << 15   @ bitWidth 1 (Endpoint direction)  
        .equ OTG_FS_HOST_FS_HCCHAR5_LSDEV, 1 << 17   @ bitWidth 1 (Low-speed device)  
        .equ OTG_FS_HOST_FS_HCCHAR5_EPTYP_Shift, 18   @ bitWidth 2 (Endpoint type)  
        .equ OTG_FS_HOST_FS_HCCHAR5_MCNT_Shift, 20   @ bitWidth 2 (Multicount)  
        .equ OTG_FS_HOST_FS_HCCHAR5_DAD_Shift, 22   @ bitWidth 7 (Device address)  
        .equ OTG_FS_HOST_FS_HCCHAR5_ODDFRM, 1 << 29   @ bitWidth 1 (Odd frame)  
        .equ OTG_FS_HOST_FS_HCCHAR5_CHDIS, 1 << 30   @ bitWidth 1 (Channel disable)  
        .equ OTG_FS_HOST_FS_HCCHAR5_CHENA, 1 << 31   @ bitWidth 1 (Channel enable)  
 
    .equ OTG_FS_HOST_FS_HCCHAR6, OTG_FS_HOST_BASE + 0x1C0 @ (OTG_FS host channel-6 characteristics  register OTG_FS_HCCHAR6) 
        .equ OTG_FS_HOST_FS_HCCHAR6_MPSIZ_Shift, 0   @ bitWidth 11 (Maximum packet size)  
        .equ OTG_FS_HOST_FS_HCCHAR6_EPNUM_Shift, 11   @ bitWidth 4 (Endpoint number)  
        .equ OTG_FS_HOST_FS_HCCHAR6_EPDIR, 1 << 15   @ bitWidth 1 (Endpoint direction)  
        .equ OTG_FS_HOST_FS_HCCHAR6_LSDEV, 1 << 17   @ bitWidth 1 (Low-speed device)  
        .equ OTG_FS_HOST_FS_HCCHAR6_EPTYP_Shift, 18   @ bitWidth 2 (Endpoint type)  
        .equ OTG_FS_HOST_FS_HCCHAR6_MCNT_Shift, 20   @ bitWidth 2 (Multicount)  
        .equ OTG_FS_HOST_FS_HCCHAR6_DAD_Shift, 22   @ bitWidth 7 (Device address)  
        .equ OTG_FS_HOST_FS_HCCHAR6_ODDFRM, 1 << 29   @ bitWidth 1 (Odd frame)  
        .equ OTG_FS_HOST_FS_HCCHAR6_CHDIS, 1 << 30   @ bitWidth 1 (Channel disable)  
        .equ OTG_FS_HOST_FS_HCCHAR6_CHENA, 1 << 31   @ bitWidth 1 (Channel enable)  
 
    .equ OTG_FS_HOST_FS_HCCHAR7, OTG_FS_HOST_BASE + 0x1E0 @ (OTG_FS host channel-7 characteristics  register OTG_FS_HCCHAR7) 
        .equ OTG_FS_HOST_FS_HCCHAR7_MPSIZ_Shift, 0   @ bitWidth 11 (Maximum packet size)  
        .equ OTG_FS_HOST_FS_HCCHAR7_EPNUM_Shift, 11   @ bitWidth 4 (Endpoint number)  
        .equ OTG_FS_HOST_FS_HCCHAR7_EPDIR, 1 << 15   @ bitWidth 1 (Endpoint direction)  
        .equ OTG_FS_HOST_FS_HCCHAR7_LSDEV, 1 << 17   @ bitWidth 1 (Low-speed device)  
        .equ OTG_FS_HOST_FS_HCCHAR7_EPTYP_Shift, 18   @ bitWidth 2 (Endpoint type)  
        .equ OTG_FS_HOST_FS_HCCHAR7_MCNT_Shift, 20   @ bitWidth 2 (Multicount)  
        .equ OTG_FS_HOST_FS_HCCHAR7_DAD_Shift, 22   @ bitWidth 7 (Device address)  
        .equ OTG_FS_HOST_FS_HCCHAR7_ODDFRM, 1 << 29   @ bitWidth 1 (Odd frame)  
        .equ OTG_FS_HOST_FS_HCCHAR7_CHDIS, 1 << 30   @ bitWidth 1 (Channel disable)  
        .equ OTG_FS_HOST_FS_HCCHAR7_CHENA, 1 << 31   @ bitWidth 1 (Channel enable)  
 
    .equ OTG_FS_HOST_FS_HCINT0, OTG_FS_HOST_BASE + 0x108 @ (OTG_FS host channel-0 interrupt register  OTG_FS_HCINT0) 
        .equ OTG_FS_HOST_FS_HCINT0_XFRC, 1 << 0   @ bitWidth 1 (Transfer completed)  
        .equ OTG_FS_HOST_FS_HCINT0_CHH, 1 << 1   @ bitWidth 1 (Channel halted)  
        .equ OTG_FS_HOST_FS_HCINT0_STALL, 1 << 3   @ bitWidth 1 (STALL response received  interrupt)  
        .equ OTG_FS_HOST_FS_HCINT0_NAK, 1 << 4   @ bitWidth 1 (NAK response received  interrupt)  
        .equ OTG_FS_HOST_FS_HCINT0_ACK, 1 << 5   @ bitWidth 1 (ACK response received/transmitted  interrupt)  
        .equ OTG_FS_HOST_FS_HCINT0_TXERR, 1 << 7   @ bitWidth 1 (Transaction error)  
        .equ OTG_FS_HOST_FS_HCINT0_BBERR, 1 << 8   @ bitWidth 1 (Babble error)  
        .equ OTG_FS_HOST_FS_HCINT0_FRMOR, 1 << 9   @ bitWidth 1 (Frame overrun)  
        .equ OTG_FS_HOST_FS_HCINT0_DTERR, 1 << 10   @ bitWidth 1 (Data toggle error)  
 
    .equ OTG_FS_HOST_FS_HCINT1, OTG_FS_HOST_BASE + 0x128 @ (OTG_FS host channel-1 interrupt register  OTG_FS_HCINT1) 
        .equ OTG_FS_HOST_FS_HCINT1_XFRC, 1 << 0   @ bitWidth 1 (Transfer completed)  
        .equ OTG_FS_HOST_FS_HCINT1_CHH, 1 << 1   @ bitWidth 1 (Channel halted)  
        .equ OTG_FS_HOST_FS_HCINT1_STALL, 1 << 3   @ bitWidth 1 (STALL response received  interrupt)  
        .equ OTG_FS_HOST_FS_HCINT1_NAK, 1 << 4   @ bitWidth 1 (NAK response received  interrupt)  
        .equ OTG_FS_HOST_FS_HCINT1_ACK, 1 << 5   @ bitWidth 1 (ACK response received/transmitted  interrupt)  
        .equ OTG_FS_HOST_FS_HCINT1_TXERR, 1 << 7   @ bitWidth 1 (Transaction error)  
        .equ OTG_FS_HOST_FS_HCINT1_BBERR, 1 << 8   @ bitWidth 1 (Babble error)  
        .equ OTG_FS_HOST_FS_HCINT1_FRMOR, 1 << 9   @ bitWidth 1 (Frame overrun)  
        .equ OTG_FS_HOST_FS_HCINT1_DTERR, 1 << 10   @ bitWidth 1 (Data toggle error)  
 
    .equ OTG_FS_HOST_FS_HCINT2, OTG_FS_HOST_BASE + 0x148 @ (OTG_FS host channel-2 interrupt register  OTG_FS_HCINT2) 
        .equ OTG_FS_HOST_FS_HCINT2_XFRC, 1 << 0   @ bitWidth 1 (Transfer completed)  
        .equ OTG_FS_HOST_FS_HCINT2_CHH, 1 << 1   @ bitWidth 1 (Channel halted)  
        .equ OTG_FS_HOST_FS_HCINT2_STALL, 1 << 3   @ bitWidth 1 (STALL response received  interrupt)  
        .equ OTG_FS_HOST_FS_HCINT2_NAK, 1 << 4   @ bitWidth 1 (NAK response received  interrupt)  
        .equ OTG_FS_HOST_FS_HCINT2_ACK, 1 << 5   @ bitWidth 1 (ACK response received/transmitted  interrupt)  
        .equ OTG_FS_HOST_FS_HCINT2_TXERR, 1 << 7   @ bitWidth 1 (Transaction error)  
        .equ OTG_FS_HOST_FS_HCINT2_BBERR, 1 << 8   @ bitWidth 1 (Babble error)  
        .equ OTG_FS_HOST_FS_HCINT2_FRMOR, 1 << 9   @ bitWidth 1 (Frame overrun)  
        .equ OTG_FS_HOST_FS_HCINT2_DTERR, 1 << 10   @ bitWidth 1 (Data toggle error)  
 
    .equ OTG_FS_HOST_FS_HCINT3, OTG_FS_HOST_BASE + 0x168 @ (OTG_FS host channel-3 interrupt register  OTG_FS_HCINT3) 
        .equ OTG_FS_HOST_FS_HCINT3_XFRC, 1 << 0   @ bitWidth 1 (Transfer completed)  
        .equ OTG_FS_HOST_FS_HCINT3_CHH, 1 << 1   @ bitWidth 1 (Channel halted)  
        .equ OTG_FS_HOST_FS_HCINT3_STALL, 1 << 3   @ bitWidth 1 (STALL response received  interrupt)  
        .equ OTG_FS_HOST_FS_HCINT3_NAK, 1 << 4   @ bitWidth 1 (NAK response received  interrupt)  
        .equ OTG_FS_HOST_FS_HCINT3_ACK, 1 << 5   @ bitWidth 1 (ACK response received/transmitted  interrupt)  
        .equ OTG_FS_HOST_FS_HCINT3_TXERR, 1 << 7   @ bitWidth 1 (Transaction error)  
        .equ OTG_FS_HOST_FS_HCINT3_BBERR, 1 << 8   @ bitWidth 1 (Babble error)  
        .equ OTG_FS_HOST_FS_HCINT3_FRMOR, 1 << 9   @ bitWidth 1 (Frame overrun)  
        .equ OTG_FS_HOST_FS_HCINT3_DTERR, 1 << 10   @ bitWidth 1 (Data toggle error)  
 
    .equ OTG_FS_HOST_FS_HCINT4, OTG_FS_HOST_BASE + 0x188 @ (OTG_FS host channel-4 interrupt register  OTG_FS_HCINT4) 
        .equ OTG_FS_HOST_FS_HCINT4_XFRC, 1 << 0   @ bitWidth 1 (Transfer completed)  
        .equ OTG_FS_HOST_FS_HCINT4_CHH, 1 << 1   @ bitWidth 1 (Channel halted)  
        .equ OTG_FS_HOST_FS_HCINT4_STALL, 1 << 3   @ bitWidth 1 (STALL response received  interrupt)  
        .equ OTG_FS_HOST_FS_HCINT4_NAK, 1 << 4   @ bitWidth 1 (NAK response received  interrupt)  
        .equ OTG_FS_HOST_FS_HCINT4_ACK, 1 << 5   @ bitWidth 1 (ACK response received/transmitted  interrupt)  
        .equ OTG_FS_HOST_FS_HCINT4_TXERR, 1 << 7   @ bitWidth 1 (Transaction error)  
        .equ OTG_FS_HOST_FS_HCINT4_BBERR, 1 << 8   @ bitWidth 1 (Babble error)  
        .equ OTG_FS_HOST_FS_HCINT4_FRMOR, 1 << 9   @ bitWidth 1 (Frame overrun)  
        .equ OTG_FS_HOST_FS_HCINT4_DTERR, 1 << 10   @ bitWidth 1 (Data toggle error)  
 
    .equ OTG_FS_HOST_FS_HCINT5, OTG_FS_HOST_BASE + 0x1A8 @ (OTG_FS host channel-5 interrupt register  OTG_FS_HCINT5) 
        .equ OTG_FS_HOST_FS_HCINT5_XFRC, 1 << 0   @ bitWidth 1 (Transfer completed)  
        .equ OTG_FS_HOST_FS_HCINT5_CHH, 1 << 1   @ bitWidth 1 (Channel halted)  
        .equ OTG_FS_HOST_FS_HCINT5_STALL, 1 << 3   @ bitWidth 1 (STALL response received  interrupt)  
        .equ OTG_FS_HOST_FS_HCINT5_NAK, 1 << 4   @ bitWidth 1 (NAK response received  interrupt)  
        .equ OTG_FS_HOST_FS_HCINT5_ACK, 1 << 5   @ bitWidth 1 (ACK response received/transmitted  interrupt)  
        .equ OTG_FS_HOST_FS_HCINT5_TXERR, 1 << 7   @ bitWidth 1 (Transaction error)  
        .equ OTG_FS_HOST_FS_HCINT5_BBERR, 1 << 8   @ bitWidth 1 (Babble error)  
        .equ OTG_FS_HOST_FS_HCINT5_FRMOR, 1 << 9   @ bitWidth 1 (Frame overrun)  
        .equ OTG_FS_HOST_FS_HCINT5_DTERR, 1 << 10   @ bitWidth 1 (Data toggle error)  
 
    .equ OTG_FS_HOST_FS_HCINT6, OTG_FS_HOST_BASE + 0x1C8 @ (OTG_FS host channel-6 interrupt register  OTG_FS_HCINT6) 
        .equ OTG_FS_HOST_FS_HCINT6_XFRC, 1 << 0   @ bitWidth 1 (Transfer completed)  
        .equ OTG_FS_HOST_FS_HCINT6_CHH, 1 << 1   @ bitWidth 1 (Channel halted)  
        .equ OTG_FS_HOST_FS_HCINT6_STALL, 1 << 3   @ bitWidth 1 (STALL response received  interrupt)  
        .equ OTG_FS_HOST_FS_HCINT6_NAK, 1 << 4   @ bitWidth 1 (NAK response received  interrupt)  
        .equ OTG_FS_HOST_FS_HCINT6_ACK, 1 << 5   @ bitWidth 1 (ACK response received/transmitted  interrupt)  
        .equ OTG_FS_HOST_FS_HCINT6_TXERR, 1 << 7   @ bitWidth 1 (Transaction error)  
        .equ OTG_FS_HOST_FS_HCINT6_BBERR, 1 << 8   @ bitWidth 1 (Babble error)  
        .equ OTG_FS_HOST_FS_HCINT6_FRMOR, 1 << 9   @ bitWidth 1 (Frame overrun)  
        .equ OTG_FS_HOST_FS_HCINT6_DTERR, 1 << 10   @ bitWidth 1 (Data toggle error)  
 
    .equ OTG_FS_HOST_FS_HCINT7, OTG_FS_HOST_BASE + 0x1E8 @ (OTG_FS host channel-7 interrupt register  OTG_FS_HCINT7) 
        .equ OTG_FS_HOST_FS_HCINT7_XFRC, 1 << 0   @ bitWidth 1 (Transfer completed)  
        .equ OTG_FS_HOST_FS_HCINT7_CHH, 1 << 1   @ bitWidth 1 (Channel halted)  
        .equ OTG_FS_HOST_FS_HCINT7_STALL, 1 << 3   @ bitWidth 1 (STALL response received  interrupt)  
        .equ OTG_FS_HOST_FS_HCINT7_NAK, 1 << 4   @ bitWidth 1 (NAK response received  interrupt)  
        .equ OTG_FS_HOST_FS_HCINT7_ACK, 1 << 5   @ bitWidth 1 (ACK response received/transmitted  interrupt)  
        .equ OTG_FS_HOST_FS_HCINT7_TXERR, 1 << 7   @ bitWidth 1 (Transaction error)  
        .equ OTG_FS_HOST_FS_HCINT7_BBERR, 1 << 8   @ bitWidth 1 (Babble error)  
        .equ OTG_FS_HOST_FS_HCINT7_FRMOR, 1 << 9   @ bitWidth 1 (Frame overrun)  
        .equ OTG_FS_HOST_FS_HCINT7_DTERR, 1 << 10   @ bitWidth 1 (Data toggle error)  
 
    .equ OTG_FS_HOST_FS_HCINTMSK0, OTG_FS_HOST_BASE + 0x10C @ (OTG_FS host channel-0 mask register  OTG_FS_HCINTMSK0) 
        .equ OTG_FS_HOST_FS_HCINTMSK0_XFRCM, 1 << 0   @ bitWidth 1 (Transfer completed mask)  
        .equ OTG_FS_HOST_FS_HCINTMSK0_CHHM, 1 << 1   @ bitWidth 1 (Channel halted mask)  
        .equ OTG_FS_HOST_FS_HCINTMSK0_STALLM, 1 << 3   @ bitWidth 1 (STALL response received interrupt  mask)  
        .equ OTG_FS_HOST_FS_HCINTMSK0_NAKM, 1 << 4   @ bitWidth 1 (NAK response received interrupt  mask)  
        .equ OTG_FS_HOST_FS_HCINTMSK0_ACKM, 1 << 5   @ bitWidth 1 (ACK response received/transmitted  interrupt mask)  
        .equ OTG_FS_HOST_FS_HCINTMSK0_NYET, 1 << 6   @ bitWidth 1 (response received interrupt  mask)  
        .equ OTG_FS_HOST_FS_HCINTMSK0_TXERRM, 1 << 7   @ bitWidth 1 (Transaction error mask)  
        .equ OTG_FS_HOST_FS_HCINTMSK0_BBERRM, 1 << 8   @ bitWidth 1 (Babble error mask)  
        .equ OTG_FS_HOST_FS_HCINTMSK0_FRMORM, 1 << 9   @ bitWidth 1 (Frame overrun mask)  
        .equ OTG_FS_HOST_FS_HCINTMSK0_DTERRM, 1 << 10   @ bitWidth 1 (Data toggle error mask)  
 
    .equ OTG_FS_HOST_FS_HCINTMSK1, OTG_FS_HOST_BASE + 0x12C @ (OTG_FS host channel-1 mask register  OTG_FS_HCINTMSK1) 
        .equ OTG_FS_HOST_FS_HCINTMSK1_XFRCM, 1 << 0   @ bitWidth 1 (Transfer completed mask)  
        .equ OTG_FS_HOST_FS_HCINTMSK1_CHHM, 1 << 1   @ bitWidth 1 (Channel halted mask)  
        .equ OTG_FS_HOST_FS_HCINTMSK1_STALLM, 1 << 3   @ bitWidth 1 (STALL response received interrupt  mask)  
        .equ OTG_FS_HOST_FS_HCINTMSK1_NAKM, 1 << 4   @ bitWidth 1 (NAK response received interrupt  mask)  
        .equ OTG_FS_HOST_FS_HCINTMSK1_ACKM, 1 << 5   @ bitWidth 1 (ACK response received/transmitted  interrupt mask)  
        .equ OTG_FS_HOST_FS_HCINTMSK1_NYET, 1 << 6   @ bitWidth 1 (response received interrupt  mask)  
        .equ OTG_FS_HOST_FS_HCINTMSK1_TXERRM, 1 << 7   @ bitWidth 1 (Transaction error mask)  
        .equ OTG_FS_HOST_FS_HCINTMSK1_BBERRM, 1 << 8   @ bitWidth 1 (Babble error mask)  
        .equ OTG_FS_HOST_FS_HCINTMSK1_FRMORM, 1 << 9   @ bitWidth 1 (Frame overrun mask)  
        .equ OTG_FS_HOST_FS_HCINTMSK1_DTERRM, 1 << 10   @ bitWidth 1 (Data toggle error mask)  
 
    .equ OTG_FS_HOST_FS_HCINTMSK2, OTG_FS_HOST_BASE + 0x14C @ (OTG_FS host channel-2 mask register  OTG_FS_HCINTMSK2) 
        .equ OTG_FS_HOST_FS_HCINTMSK2_XFRCM, 1 << 0   @ bitWidth 1 (Transfer completed mask)  
        .equ OTG_FS_HOST_FS_HCINTMSK2_CHHM, 1 << 1   @ bitWidth 1 (Channel halted mask)  
        .equ OTG_FS_HOST_FS_HCINTMSK2_STALLM, 1 << 3   @ bitWidth 1 (STALL response received interrupt  mask)  
        .equ OTG_FS_HOST_FS_HCINTMSK2_NAKM, 1 << 4   @ bitWidth 1 (NAK response received interrupt  mask)  
        .equ OTG_FS_HOST_FS_HCINTMSK2_ACKM, 1 << 5   @ bitWidth 1 (ACK response received/transmitted  interrupt mask)  
        .equ OTG_FS_HOST_FS_HCINTMSK2_NYET, 1 << 6   @ bitWidth 1 (response received interrupt  mask)  
        .equ OTG_FS_HOST_FS_HCINTMSK2_TXERRM, 1 << 7   @ bitWidth 1 (Transaction error mask)  
        .equ OTG_FS_HOST_FS_HCINTMSK2_BBERRM, 1 << 8   @ bitWidth 1 (Babble error mask)  
        .equ OTG_FS_HOST_FS_HCINTMSK2_FRMORM, 1 << 9   @ bitWidth 1 (Frame overrun mask)  
        .equ OTG_FS_HOST_FS_HCINTMSK2_DTERRM, 1 << 10   @ bitWidth 1 (Data toggle error mask)  
 
    .equ OTG_FS_HOST_FS_HCINTMSK3, OTG_FS_HOST_BASE + 0x16C @ (OTG_FS host channel-3 mask register  OTG_FS_HCINTMSK3) 
        .equ OTG_FS_HOST_FS_HCINTMSK3_XFRCM, 1 << 0   @ bitWidth 1 (Transfer completed mask)  
        .equ OTG_FS_HOST_FS_HCINTMSK3_CHHM, 1 << 1   @ bitWidth 1 (Channel halted mask)  
        .equ OTG_FS_HOST_FS_HCINTMSK3_STALLM, 1 << 3   @ bitWidth 1 (STALL response received interrupt  mask)  
        .equ OTG_FS_HOST_FS_HCINTMSK3_NAKM, 1 << 4   @ bitWidth 1 (NAK response received interrupt  mask)  
        .equ OTG_FS_HOST_FS_HCINTMSK3_ACKM, 1 << 5   @ bitWidth 1 (ACK response received/transmitted  interrupt mask)  
        .equ OTG_FS_HOST_FS_HCINTMSK3_NYET, 1 << 6   @ bitWidth 1 (response received interrupt  mask)  
        .equ OTG_FS_HOST_FS_HCINTMSK3_TXERRM, 1 << 7   @ bitWidth 1 (Transaction error mask)  
        .equ OTG_FS_HOST_FS_HCINTMSK3_BBERRM, 1 << 8   @ bitWidth 1 (Babble error mask)  
        .equ OTG_FS_HOST_FS_HCINTMSK3_FRMORM, 1 << 9   @ bitWidth 1 (Frame overrun mask)  
        .equ OTG_FS_HOST_FS_HCINTMSK3_DTERRM, 1 << 10   @ bitWidth 1 (Data toggle error mask)  
 
    .equ OTG_FS_HOST_FS_HCINTMSK4, OTG_FS_HOST_BASE + 0x18C @ (OTG_FS host channel-4 mask register  OTG_FS_HCINTMSK4) 
        .equ OTG_FS_HOST_FS_HCINTMSK4_XFRCM, 1 << 0   @ bitWidth 1 (Transfer completed mask)  
        .equ OTG_FS_HOST_FS_HCINTMSK4_CHHM, 1 << 1   @ bitWidth 1 (Channel halted mask)  
        .equ OTG_FS_HOST_FS_HCINTMSK4_STALLM, 1 << 3   @ bitWidth 1 (STALL response received interrupt  mask)  
        .equ OTG_FS_HOST_FS_HCINTMSK4_NAKM, 1 << 4   @ bitWidth 1 (NAK response received interrupt  mask)  
        .equ OTG_FS_HOST_FS_HCINTMSK4_ACKM, 1 << 5   @ bitWidth 1 (ACK response received/transmitted  interrupt mask)  
        .equ OTG_FS_HOST_FS_HCINTMSK4_NYET, 1 << 6   @ bitWidth 1 (response received interrupt  mask)  
        .equ OTG_FS_HOST_FS_HCINTMSK4_TXERRM, 1 << 7   @ bitWidth 1 (Transaction error mask)  
        .equ OTG_FS_HOST_FS_HCINTMSK4_BBERRM, 1 << 8   @ bitWidth 1 (Babble error mask)  
        .equ OTG_FS_HOST_FS_HCINTMSK4_FRMORM, 1 << 9   @ bitWidth 1 (Frame overrun mask)  
        .equ OTG_FS_HOST_FS_HCINTMSK4_DTERRM, 1 << 10   @ bitWidth 1 (Data toggle error mask)  
 
    .equ OTG_FS_HOST_FS_HCINTMSK5, OTG_FS_HOST_BASE + 0x1AC @ (OTG_FS host channel-5 mask register  OTG_FS_HCINTMSK5) 
        .equ OTG_FS_HOST_FS_HCINTMSK5_XFRCM, 1 << 0   @ bitWidth 1 (Transfer completed mask)  
        .equ OTG_FS_HOST_FS_HCINTMSK5_CHHM, 1 << 1   @ bitWidth 1 (Channel halted mask)  
        .equ OTG_FS_HOST_FS_HCINTMSK5_STALLM, 1 << 3   @ bitWidth 1 (STALL response received interrupt  mask)  
        .equ OTG_FS_HOST_FS_HCINTMSK5_NAKM, 1 << 4   @ bitWidth 1 (NAK response received interrupt  mask)  
        .equ OTG_FS_HOST_FS_HCINTMSK5_ACKM, 1 << 5   @ bitWidth 1 (ACK response received/transmitted  interrupt mask)  
        .equ OTG_FS_HOST_FS_HCINTMSK5_NYET, 1 << 6   @ bitWidth 1 (response received interrupt  mask)  
        .equ OTG_FS_HOST_FS_HCINTMSK5_TXERRM, 1 << 7   @ bitWidth 1 (Transaction error mask)  
        .equ OTG_FS_HOST_FS_HCINTMSK5_BBERRM, 1 << 8   @ bitWidth 1 (Babble error mask)  
        .equ OTG_FS_HOST_FS_HCINTMSK5_FRMORM, 1 << 9   @ bitWidth 1 (Frame overrun mask)  
        .equ OTG_FS_HOST_FS_HCINTMSK5_DTERRM, 1 << 10   @ bitWidth 1 (Data toggle error mask)  
 
    .equ OTG_FS_HOST_FS_HCINTMSK6, OTG_FS_HOST_BASE + 0x1CC @ (OTG_FS host channel-6 mask register  OTG_FS_HCINTMSK6) 
        .equ OTG_FS_HOST_FS_HCINTMSK6_XFRCM, 1 << 0   @ bitWidth 1 (Transfer completed mask)  
        .equ OTG_FS_HOST_FS_HCINTMSK6_CHHM, 1 << 1   @ bitWidth 1 (Channel halted mask)  
        .equ OTG_FS_HOST_FS_HCINTMSK6_STALLM, 1 << 3   @ bitWidth 1 (STALL response received interrupt  mask)  
        .equ OTG_FS_HOST_FS_HCINTMSK6_NAKM, 1 << 4   @ bitWidth 1 (NAK response received interrupt  mask)  
        .equ OTG_FS_HOST_FS_HCINTMSK6_ACKM, 1 << 5   @ bitWidth 1 (ACK response received/transmitted  interrupt mask)  
        .equ OTG_FS_HOST_FS_HCINTMSK6_NYET, 1 << 6   @ bitWidth 1 (response received interrupt  mask)  
        .equ OTG_FS_HOST_FS_HCINTMSK6_TXERRM, 1 << 7   @ bitWidth 1 (Transaction error mask)  
        .equ OTG_FS_HOST_FS_HCINTMSK6_BBERRM, 1 << 8   @ bitWidth 1 (Babble error mask)  
        .equ OTG_FS_HOST_FS_HCINTMSK6_FRMORM, 1 << 9   @ bitWidth 1 (Frame overrun mask)  
        .equ OTG_FS_HOST_FS_HCINTMSK6_DTERRM, 1 << 10   @ bitWidth 1 (Data toggle error mask)  
 
    .equ OTG_FS_HOST_FS_HCINTMSK7, OTG_FS_HOST_BASE + 0x1EC @ (OTG_FS host channel-7 mask register  OTG_FS_HCINTMSK7) 
        .equ OTG_FS_HOST_FS_HCINTMSK7_XFRCM, 1 << 0   @ bitWidth 1 (Transfer completed mask)  
        .equ OTG_FS_HOST_FS_HCINTMSK7_CHHM, 1 << 1   @ bitWidth 1 (Channel halted mask)  
        .equ OTG_FS_HOST_FS_HCINTMSK7_STALLM, 1 << 3   @ bitWidth 1 (STALL response received interrupt  mask)  
        .equ OTG_FS_HOST_FS_HCINTMSK7_NAKM, 1 << 4   @ bitWidth 1 (NAK response received interrupt  mask)  
        .equ OTG_FS_HOST_FS_HCINTMSK7_ACKM, 1 << 5   @ bitWidth 1 (ACK response received/transmitted  interrupt mask)  
        .equ OTG_FS_HOST_FS_HCINTMSK7_NYET, 1 << 6   @ bitWidth 1 (response received interrupt  mask)  
        .equ OTG_FS_HOST_FS_HCINTMSK7_TXERRM, 1 << 7   @ bitWidth 1 (Transaction error mask)  
        .equ OTG_FS_HOST_FS_HCINTMSK7_BBERRM, 1 << 8   @ bitWidth 1 (Babble error mask)  
        .equ OTG_FS_HOST_FS_HCINTMSK7_FRMORM, 1 << 9   @ bitWidth 1 (Frame overrun mask)  
        .equ OTG_FS_HOST_FS_HCINTMSK7_DTERRM, 1 << 10   @ bitWidth 1 (Data toggle error mask)  
 
    .equ OTG_FS_HOST_FS_HCTSIZ0, OTG_FS_HOST_BASE + 0x110 @ (OTG_FS host channel-0 transfer size  register) 
        .equ OTG_FS_HOST_FS_HCTSIZ0_XFRSIZ_Shift, 0   @ bitWidth 19 (Transfer size)  
        .equ OTG_FS_HOST_FS_HCTSIZ0_PKTCNT_Shift, 19   @ bitWidth 10 (Packet count)  
        .equ OTG_FS_HOST_FS_HCTSIZ0_DPID_Shift, 29   @ bitWidth 2 (Data PID)  
 
    .equ OTG_FS_HOST_FS_HCTSIZ1, OTG_FS_HOST_BASE + 0x130 @ (OTG_FS host channel-1 transfer size  register) 
        .equ OTG_FS_HOST_FS_HCTSIZ1_XFRSIZ_Shift, 0   @ bitWidth 19 (Transfer size)  
        .equ OTG_FS_HOST_FS_HCTSIZ1_PKTCNT_Shift, 19   @ bitWidth 10 (Packet count)  
        .equ OTG_FS_HOST_FS_HCTSIZ1_DPID_Shift, 29   @ bitWidth 2 (Data PID)  
 
    .equ OTG_FS_HOST_FS_HCTSIZ2, OTG_FS_HOST_BASE + 0x150 @ (OTG_FS host channel-2 transfer size  register) 
        .equ OTG_FS_HOST_FS_HCTSIZ2_XFRSIZ_Shift, 0   @ bitWidth 19 (Transfer size)  
        .equ OTG_FS_HOST_FS_HCTSIZ2_PKTCNT_Shift, 19   @ bitWidth 10 (Packet count)  
        .equ OTG_FS_HOST_FS_HCTSIZ2_DPID_Shift, 29   @ bitWidth 2 (Data PID)  
 
    .equ OTG_FS_HOST_FS_HCTSIZ3, OTG_FS_HOST_BASE + 0x170 @ (OTG_FS host channel-3 transfer size  register) 
        .equ OTG_FS_HOST_FS_HCTSIZ3_XFRSIZ_Shift, 0   @ bitWidth 19 (Transfer size)  
        .equ OTG_FS_HOST_FS_HCTSIZ3_PKTCNT_Shift, 19   @ bitWidth 10 (Packet count)  
        .equ OTG_FS_HOST_FS_HCTSIZ3_DPID_Shift, 29   @ bitWidth 2 (Data PID)  
 
    .equ OTG_FS_HOST_FS_HCTSIZ4, OTG_FS_HOST_BASE + 0x190 @ (OTG_FS host channel-x transfer size  register) 
        .equ OTG_FS_HOST_FS_HCTSIZ4_XFRSIZ_Shift, 0   @ bitWidth 19 (Transfer size)  
        .equ OTG_FS_HOST_FS_HCTSIZ4_PKTCNT_Shift, 19   @ bitWidth 10 (Packet count)  
        .equ OTG_FS_HOST_FS_HCTSIZ4_DPID_Shift, 29   @ bitWidth 2 (Data PID)  
 
    .equ OTG_FS_HOST_FS_HCTSIZ5, OTG_FS_HOST_BASE + 0x1B0 @ (OTG_FS host channel-5 transfer size  register) 
        .equ OTG_FS_HOST_FS_HCTSIZ5_XFRSIZ_Shift, 0   @ bitWidth 19 (Transfer size)  
        .equ OTG_FS_HOST_FS_HCTSIZ5_PKTCNT_Shift, 19   @ bitWidth 10 (Packet count)  
        .equ OTG_FS_HOST_FS_HCTSIZ5_DPID_Shift, 29   @ bitWidth 2 (Data PID)  
 
    .equ OTG_FS_HOST_FS_HCTSIZ6, OTG_FS_HOST_BASE + 0x1D0 @ (OTG_FS host channel-6 transfer size  register) 
        .equ OTG_FS_HOST_FS_HCTSIZ6_XFRSIZ_Shift, 0   @ bitWidth 19 (Transfer size)  
        .equ OTG_FS_HOST_FS_HCTSIZ6_PKTCNT_Shift, 19   @ bitWidth 10 (Packet count)  
        .equ OTG_FS_HOST_FS_HCTSIZ6_DPID_Shift, 29   @ bitWidth 2 (Data PID)  
 
    .equ OTG_FS_HOST_FS_HCTSIZ7, OTG_FS_HOST_BASE + 0x1F0 @ (OTG_FS host channel-7 transfer size  register) 
        .equ OTG_FS_HOST_FS_HCTSIZ7_XFRSIZ_Shift, 0   @ bitWidth 19 (Transfer size)  
        .equ OTG_FS_HOST_FS_HCTSIZ7_PKTCNT_Shift, 19   @ bitWidth 10 (Packet count)  
        .equ OTG_FS_HOST_FS_HCTSIZ7_DPID_Shift, 29   @ bitWidth 2 (Data PID)  
 

@=========================== OTG_FS_DEVICE ===========================@
.equ OTG_FS_DEVICE_BASE, 0x50000800 @ (USB on the go full speed) 
    .equ OTG_FS_DEVICE_FS_DCFG, OTG_FS_DEVICE_BASE + 0x0 @ (OTG_FS device configuration register  OTG_FS_DCFG) 
        .equ OTG_FS_DEVICE_FS_DCFG_DSPD_Shift, 0   @ bitWidth 2 (Device speed)  
        .equ OTG_FS_DEVICE_FS_DCFG_NZLSOHSK, 1 << 2   @ bitWidth 1 (Non-zero-length status OUT  handshake)  
        .equ OTG_FS_DEVICE_FS_DCFG_DAD_Shift, 4   @ bitWidth 7 (Device address)  
        .equ OTG_FS_DEVICE_FS_DCFG_PFIVL_Shift, 11   @ bitWidth 2 (Periodic frame interval)  
 
    .equ OTG_FS_DEVICE_FS_DCTL, OTG_FS_DEVICE_BASE + 0x4 @ (OTG_FS device control register  OTG_FS_DCTL) 
        .equ OTG_FS_DEVICE_FS_DCTL_RWUSIG, 1 << 0   @ bitWidth 1 (Remote wakeup signaling)  
        .equ OTG_FS_DEVICE_FS_DCTL_SDIS, 1 << 1   @ bitWidth 1 (Soft disconnect)  
        .equ OTG_FS_DEVICE_FS_DCTL_GINSTS, 1 << 2   @ bitWidth 1 (Global IN NAK status)  
        .equ OTG_FS_DEVICE_FS_DCTL_GONSTS, 1 << 3   @ bitWidth 1 (Global OUT NAK status)  
        .equ OTG_FS_DEVICE_FS_DCTL_TCTL_Shift, 4   @ bitWidth 3 (Test control)  
        .equ OTG_FS_DEVICE_FS_DCTL_SGINAK, 1 << 7   @ bitWidth 1 (Set global IN NAK)  
        .equ OTG_FS_DEVICE_FS_DCTL_CGINAK, 1 << 8   @ bitWidth 1 (Clear global IN NAK)  
        .equ OTG_FS_DEVICE_FS_DCTL_SGONAK, 1 << 9   @ bitWidth 1 (Set global OUT NAK)  
        .equ OTG_FS_DEVICE_FS_DCTL_CGONAK, 1 << 10   @ bitWidth 1 (Clear global OUT NAK)  
        .equ OTG_FS_DEVICE_FS_DCTL_POPRGDNE, 1 << 11   @ bitWidth 1 (Power-on programming done)  
 
    .equ OTG_FS_DEVICE_FS_DSTS, OTG_FS_DEVICE_BASE + 0x8 @ (OTG_FS device status register  OTG_FS_DSTS) 
        .equ OTG_FS_DEVICE_FS_DSTS_SUSPSTS, 1 << 0   @ bitWidth 1 (Suspend status)  
        .equ OTG_FS_DEVICE_FS_DSTS_ENUMSPD_Shift, 1   @ bitWidth 2 (Enumerated speed)  
        .equ OTG_FS_DEVICE_FS_DSTS_EERR, 1 << 3   @ bitWidth 1 (Erratic error)  
        .equ OTG_FS_DEVICE_FS_DSTS_FNSOF_Shift, 8   @ bitWidth 14 (Frame number of the received  SOF)  
 
    .equ OTG_FS_DEVICE_FS_DIEPMSK, OTG_FS_DEVICE_BASE + 0x10 @ (OTG_FS device IN endpoint common interrupt  mask register OTG_FS_DIEPMSK) 
        .equ OTG_FS_DEVICE_FS_DIEPMSK_XFRCM, 1 << 0   @ bitWidth 1 (Transfer completed interrupt  mask)  
        .equ OTG_FS_DEVICE_FS_DIEPMSK_EPDM, 1 << 1   @ bitWidth 1 (Endpoint disabled interrupt  mask)  
        .equ OTG_FS_DEVICE_FS_DIEPMSK_TOM, 1 << 3   @ bitWidth 1 (Timeout condition mask Non-isochronous  endpoints)  
        .equ OTG_FS_DEVICE_FS_DIEPMSK_ITTXFEMSK, 1 << 4   @ bitWidth 1 (IN token received when TxFIFO empty  mask)  
        .equ OTG_FS_DEVICE_FS_DIEPMSK_INEPNMM, 1 << 5   @ bitWidth 1 (IN token received with EP mismatch  mask)  
        .equ OTG_FS_DEVICE_FS_DIEPMSK_INEPNEM, 1 << 6   @ bitWidth 1 (IN endpoint NAK effective  mask)  
 
    .equ OTG_FS_DEVICE_FS_DOEPMSK, OTG_FS_DEVICE_BASE + 0x14 @ (OTG_FS device OUT endpoint common interrupt  mask register OTG_FS_DOEPMSK) 
        .equ OTG_FS_DEVICE_FS_DOEPMSK_XFRCM, 1 << 0   @ bitWidth 1 (Transfer completed interrupt  mask)  
        .equ OTG_FS_DEVICE_FS_DOEPMSK_EPDM, 1 << 1   @ bitWidth 1 (Endpoint disabled interrupt  mask)  
        .equ OTG_FS_DEVICE_FS_DOEPMSK_STUPM, 1 << 3   @ bitWidth 1 (SETUP phase done mask)  
        .equ OTG_FS_DEVICE_FS_DOEPMSK_OTEPDM, 1 << 4   @ bitWidth 1 (OUT token received when endpoint  disabled mask)  
 
    .equ OTG_FS_DEVICE_FS_DAINT, OTG_FS_DEVICE_BASE + 0x18 @ (OTG_FS device all endpoints interrupt  register OTG_FS_DAINT) 
        .equ OTG_FS_DEVICE_FS_DAINT_IEPINT_Shift, 0   @ bitWidth 16 (IN endpoint interrupt bits)  
        .equ OTG_FS_DEVICE_FS_DAINT_OEPINT_Shift, 16   @ bitWidth 16 (OUT endpoint interrupt  bits)  
 
    .equ OTG_FS_DEVICE_FS_DAINTMSK, OTG_FS_DEVICE_BASE + 0x1C @ (OTG_FS all endpoints interrupt mask register  OTG_FS_DAINTMSK) 
        .equ OTG_FS_DEVICE_FS_DAINTMSK_IEPM_Shift, 0   @ bitWidth 16 (IN EP interrupt mask bits)  
        .equ OTG_FS_DEVICE_FS_DAINTMSK_OEPINT_Shift, 16   @ bitWidth 16 (OUT endpoint interrupt  bits)  
 
    .equ OTG_FS_DEVICE_DVBUSDIS, OTG_FS_DEVICE_BASE + 0x28 @ (OTG_FS device VBUS discharge time  register) 
        .equ OTG_FS_DEVICE_DVBUSDIS_VBUSDT_Shift, 0   @ bitWidth 16 (Device VBUS discharge time)  
 
    .equ OTG_FS_DEVICE_DVBUSPULSE, OTG_FS_DEVICE_BASE + 0x2C @ (OTG_FS device VBUS pulsing time  register) 
        .equ OTG_FS_DEVICE_DVBUSPULSE_DVBUSP_Shift, 0   @ bitWidth 12 (Device VBUS pulsing time)  
 
    .equ OTG_FS_DEVICE_DIEPEMPMSK, OTG_FS_DEVICE_BASE + 0x34 @ (OTG_FS device IN endpoint FIFO empty  interrupt mask register) 
        .equ OTG_FS_DEVICE_DIEPEMPMSK_INEPTXFEM_Shift, 0   @ bitWidth 16 (IN EP Tx FIFO empty interrupt mask  bits)  
 
    .equ OTG_FS_DEVICE_FS_DIEPCTL0, OTG_FS_DEVICE_BASE + 0x100 @ (OTG_FS device control IN endpoint 0 control  register OTG_FS_DIEPCTL0) 
        .equ OTG_FS_DEVICE_FS_DIEPCTL0_MPSIZ_Shift, 0   @ bitWidth 2 (Maximum packet size)  
        .equ OTG_FS_DEVICE_FS_DIEPCTL0_USBAEP, 1 << 15   @ bitWidth 1 (USB active endpoint)  
        .equ OTG_FS_DEVICE_FS_DIEPCTL0_NAKSTS, 1 << 17   @ bitWidth 1 (NAK status)  
        .equ OTG_FS_DEVICE_FS_DIEPCTL0_EPTYP_Shift, 18   @ bitWidth 2 (Endpoint type)  
        .equ OTG_FS_DEVICE_FS_DIEPCTL0_STALL, 1 << 21   @ bitWidth 1 (STALL handshake)  
        .equ OTG_FS_DEVICE_FS_DIEPCTL0_TXFNUM_Shift, 22   @ bitWidth 4 (TxFIFO number)  
        .equ OTG_FS_DEVICE_FS_DIEPCTL0_CNAK, 1 << 26   @ bitWidth 1 (Clear NAK)  
        .equ OTG_FS_DEVICE_FS_DIEPCTL0_SNAK, 1 << 27   @ bitWidth 1 (Set NAK)  
        .equ OTG_FS_DEVICE_FS_DIEPCTL0_EPDIS, 1 << 30   @ bitWidth 1 (Endpoint disable)  
        .equ OTG_FS_DEVICE_FS_DIEPCTL0_EPENA, 1 << 31   @ bitWidth 1 (Endpoint enable)  
 
    .equ OTG_FS_DEVICE_DIEPCTL1, OTG_FS_DEVICE_BASE + 0x120 @ (OTG device endpoint-1 control  register) 
        .equ OTG_FS_DEVICE_DIEPCTL1_EPENA, 1 << 31   @ bitWidth 1 (EPENA)  
        .equ OTG_FS_DEVICE_DIEPCTL1_EPDIS, 1 << 30   @ bitWidth 1 (EPDIS)  
        .equ OTG_FS_DEVICE_DIEPCTL1_SODDFRM_SD1PID, 1 << 29   @ bitWidth 1 (SODDFRM/SD1PID)  
        .equ OTG_FS_DEVICE_DIEPCTL1_SD0PID_SEVNFRM, 1 << 28   @ bitWidth 1 (SD0PID/SEVNFRM)  
        .equ OTG_FS_DEVICE_DIEPCTL1_SNAK, 1 << 27   @ bitWidth 1 (SNAK)  
        .equ OTG_FS_DEVICE_DIEPCTL1_CNAK, 1 << 26   @ bitWidth 1 (CNAK)  
        .equ OTG_FS_DEVICE_DIEPCTL1_TXFNUM_Shift, 22   @ bitWidth 4 (TXFNUM)  
        .equ OTG_FS_DEVICE_DIEPCTL1_Stall, 1 << 21   @ bitWidth 1 (Stall)  
        .equ OTG_FS_DEVICE_DIEPCTL1_EPTYP_Shift, 18   @ bitWidth 2 (EPTYP)  
        .equ OTG_FS_DEVICE_DIEPCTL1_NAKSTS, 1 << 17   @ bitWidth 1 (NAKSTS)  
        .equ OTG_FS_DEVICE_DIEPCTL1_EONUM_DPID, 1 << 16   @ bitWidth 1 (EONUM/DPID)  
        .equ OTG_FS_DEVICE_DIEPCTL1_USBAEP, 1 << 15   @ bitWidth 1 (USBAEP)  
        .equ OTG_FS_DEVICE_DIEPCTL1_MPSIZ_Shift, 0   @ bitWidth 11 (MPSIZ)  
 
    .equ OTG_FS_DEVICE_DIEPCTL2, OTG_FS_DEVICE_BASE + 0x140 @ (OTG device endpoint-2 control  register) 
        .equ OTG_FS_DEVICE_DIEPCTL2_EPENA, 1 << 31   @ bitWidth 1 (EPENA)  
        .equ OTG_FS_DEVICE_DIEPCTL2_EPDIS, 1 << 30   @ bitWidth 1 (EPDIS)  
        .equ OTG_FS_DEVICE_DIEPCTL2_SODDFRM, 1 << 29   @ bitWidth 1 (SODDFRM)  
        .equ OTG_FS_DEVICE_DIEPCTL2_SD0PID_SEVNFRM, 1 << 28   @ bitWidth 1 (SD0PID/SEVNFRM)  
        .equ OTG_FS_DEVICE_DIEPCTL2_SNAK, 1 << 27   @ bitWidth 1 (SNAK)  
        .equ OTG_FS_DEVICE_DIEPCTL2_CNAK, 1 << 26   @ bitWidth 1 (CNAK)  
        .equ OTG_FS_DEVICE_DIEPCTL2_TXFNUM_Shift, 22   @ bitWidth 4 (TXFNUM)  
        .equ OTG_FS_DEVICE_DIEPCTL2_Stall, 1 << 21   @ bitWidth 1 (Stall)  
        .equ OTG_FS_DEVICE_DIEPCTL2_EPTYP_Shift, 18   @ bitWidth 2 (EPTYP)  
        .equ OTG_FS_DEVICE_DIEPCTL2_NAKSTS, 1 << 17   @ bitWidth 1 (NAKSTS)  
        .equ OTG_FS_DEVICE_DIEPCTL2_EONUM_DPID, 1 << 16   @ bitWidth 1 (EONUM/DPID)  
        .equ OTG_FS_DEVICE_DIEPCTL2_USBAEP, 1 << 15   @ bitWidth 1 (USBAEP)  
        .equ OTG_FS_DEVICE_DIEPCTL2_MPSIZ_Shift, 0   @ bitWidth 11 (MPSIZ)  
 
    .equ OTG_FS_DEVICE_DIEPCTL3, OTG_FS_DEVICE_BASE + 0x160 @ (OTG device endpoint-3 control  register) 
        .equ OTG_FS_DEVICE_DIEPCTL3_EPENA, 1 << 31   @ bitWidth 1 (EPENA)  
        .equ OTG_FS_DEVICE_DIEPCTL3_EPDIS, 1 << 30   @ bitWidth 1 (EPDIS)  
        .equ OTG_FS_DEVICE_DIEPCTL3_SODDFRM, 1 << 29   @ bitWidth 1 (SODDFRM)  
        .equ OTG_FS_DEVICE_DIEPCTL3_SD0PID_SEVNFRM, 1 << 28   @ bitWidth 1 (SD0PID/SEVNFRM)  
        .equ OTG_FS_DEVICE_DIEPCTL3_SNAK, 1 << 27   @ bitWidth 1 (SNAK)  
        .equ OTG_FS_DEVICE_DIEPCTL3_CNAK, 1 << 26   @ bitWidth 1 (CNAK)  
        .equ OTG_FS_DEVICE_DIEPCTL3_TXFNUM_Shift, 22   @ bitWidth 4 (TXFNUM)  
        .equ OTG_FS_DEVICE_DIEPCTL3_Stall, 1 << 21   @ bitWidth 1 (Stall)  
        .equ OTG_FS_DEVICE_DIEPCTL3_EPTYP_Shift, 18   @ bitWidth 2 (EPTYP)  
        .equ OTG_FS_DEVICE_DIEPCTL3_NAKSTS, 1 << 17   @ bitWidth 1 (NAKSTS)  
        .equ OTG_FS_DEVICE_DIEPCTL3_EONUM_DPID, 1 << 16   @ bitWidth 1 (EONUM/DPID)  
        .equ OTG_FS_DEVICE_DIEPCTL3_USBAEP, 1 << 15   @ bitWidth 1 (USBAEP)  
        .equ OTG_FS_DEVICE_DIEPCTL3_MPSIZ_Shift, 0   @ bitWidth 11 (MPSIZ)  
 
    .equ OTG_FS_DEVICE_DOEPCTL0, OTG_FS_DEVICE_BASE + 0x300 @ (device endpoint-0 control  register) 
        .equ OTG_FS_DEVICE_DOEPCTL0_EPENA, 1 << 31   @ bitWidth 1 (EPENA)  
        .equ OTG_FS_DEVICE_DOEPCTL0_EPDIS, 1 << 30   @ bitWidth 1 (EPDIS)  
        .equ OTG_FS_DEVICE_DOEPCTL0_SNAK, 1 << 27   @ bitWidth 1 (SNAK)  
        .equ OTG_FS_DEVICE_DOEPCTL0_CNAK, 1 << 26   @ bitWidth 1 (CNAK)  
        .equ OTG_FS_DEVICE_DOEPCTL0_Stall, 1 << 21   @ bitWidth 1 (Stall)  
        .equ OTG_FS_DEVICE_DOEPCTL0_SNPM, 1 << 20   @ bitWidth 1 (SNPM)  
        .equ OTG_FS_DEVICE_DOEPCTL0_EPTYP_Shift, 18   @ bitWidth 2 (EPTYP)  
        .equ OTG_FS_DEVICE_DOEPCTL0_NAKSTS, 1 << 17   @ bitWidth 1 (NAKSTS)  
        .equ OTG_FS_DEVICE_DOEPCTL0_USBAEP, 1 << 15   @ bitWidth 1 (USBAEP)  
        .equ OTG_FS_DEVICE_DOEPCTL0_MPSIZ_Shift, 0   @ bitWidth 2 (MPSIZ)  
 
    .equ OTG_FS_DEVICE_DOEPCTL1, OTG_FS_DEVICE_BASE + 0x320 @ (device endpoint-1 control  register) 
        .equ OTG_FS_DEVICE_DOEPCTL1_EPENA, 1 << 31   @ bitWidth 1 (EPENA)  
        .equ OTG_FS_DEVICE_DOEPCTL1_EPDIS, 1 << 30   @ bitWidth 1 (EPDIS)  
        .equ OTG_FS_DEVICE_DOEPCTL1_SODDFRM, 1 << 29   @ bitWidth 1 (SODDFRM)  
        .equ OTG_FS_DEVICE_DOEPCTL1_SD0PID_SEVNFRM, 1 << 28   @ bitWidth 1 (SD0PID/SEVNFRM)  
        .equ OTG_FS_DEVICE_DOEPCTL1_SNAK, 1 << 27   @ bitWidth 1 (SNAK)  
        .equ OTG_FS_DEVICE_DOEPCTL1_CNAK, 1 << 26   @ bitWidth 1 (CNAK)  
        .equ OTG_FS_DEVICE_DOEPCTL1_Stall, 1 << 21   @ bitWidth 1 (Stall)  
        .equ OTG_FS_DEVICE_DOEPCTL1_SNPM, 1 << 20   @ bitWidth 1 (SNPM)  
        .equ OTG_FS_DEVICE_DOEPCTL1_EPTYP_Shift, 18   @ bitWidth 2 (EPTYP)  
        .equ OTG_FS_DEVICE_DOEPCTL1_NAKSTS, 1 << 17   @ bitWidth 1 (NAKSTS)  
        .equ OTG_FS_DEVICE_DOEPCTL1_EONUM_DPID, 1 << 16   @ bitWidth 1 (EONUM/DPID)  
        .equ OTG_FS_DEVICE_DOEPCTL1_USBAEP, 1 << 15   @ bitWidth 1 (USBAEP)  
        .equ OTG_FS_DEVICE_DOEPCTL1_MPSIZ_Shift, 0   @ bitWidth 11 (MPSIZ)  
 
    .equ OTG_FS_DEVICE_DOEPCTL2, OTG_FS_DEVICE_BASE + 0x340 @ (device endpoint-2 control  register) 
        .equ OTG_FS_DEVICE_DOEPCTL2_EPENA, 1 << 31   @ bitWidth 1 (EPENA)  
        .equ OTG_FS_DEVICE_DOEPCTL2_EPDIS, 1 << 30   @ bitWidth 1 (EPDIS)  
        .equ OTG_FS_DEVICE_DOEPCTL2_SODDFRM, 1 << 29   @ bitWidth 1 (SODDFRM)  
        .equ OTG_FS_DEVICE_DOEPCTL2_SD0PID_SEVNFRM, 1 << 28   @ bitWidth 1 (SD0PID/SEVNFRM)  
        .equ OTG_FS_DEVICE_DOEPCTL2_SNAK, 1 << 27   @ bitWidth 1 (SNAK)  
        .equ OTG_FS_DEVICE_DOEPCTL2_CNAK, 1 << 26   @ bitWidth 1 (CNAK)  
        .equ OTG_FS_DEVICE_DOEPCTL2_Stall, 1 << 21   @ bitWidth 1 (Stall)  
        .equ OTG_FS_DEVICE_DOEPCTL2_SNPM, 1 << 20   @ bitWidth 1 (SNPM)  
        .equ OTG_FS_DEVICE_DOEPCTL2_EPTYP_Shift, 18   @ bitWidth 2 (EPTYP)  
        .equ OTG_FS_DEVICE_DOEPCTL2_NAKSTS, 1 << 17   @ bitWidth 1 (NAKSTS)  
        .equ OTG_FS_DEVICE_DOEPCTL2_EONUM_DPID, 1 << 16   @ bitWidth 1 (EONUM/DPID)  
        .equ OTG_FS_DEVICE_DOEPCTL2_USBAEP, 1 << 15   @ bitWidth 1 (USBAEP)  
        .equ OTG_FS_DEVICE_DOEPCTL2_MPSIZ_Shift, 0   @ bitWidth 11 (MPSIZ)  
 
    .equ OTG_FS_DEVICE_DOEPCTL3, OTG_FS_DEVICE_BASE + 0x360 @ (device endpoint-3 control  register) 
        .equ OTG_FS_DEVICE_DOEPCTL3_EPENA, 1 << 31   @ bitWidth 1 (EPENA)  
        .equ OTG_FS_DEVICE_DOEPCTL3_EPDIS, 1 << 30   @ bitWidth 1 (EPDIS)  
        .equ OTG_FS_DEVICE_DOEPCTL3_SODDFRM, 1 << 29   @ bitWidth 1 (SODDFRM)  
        .equ OTG_FS_DEVICE_DOEPCTL3_SD0PID_SEVNFRM, 1 << 28   @ bitWidth 1 (SD0PID/SEVNFRM)  
        .equ OTG_FS_DEVICE_DOEPCTL3_SNAK, 1 << 27   @ bitWidth 1 (SNAK)  
        .equ OTG_FS_DEVICE_DOEPCTL3_CNAK, 1 << 26   @ bitWidth 1 (CNAK)  
        .equ OTG_FS_DEVICE_DOEPCTL3_Stall, 1 << 21   @ bitWidth 1 (Stall)  
        .equ OTG_FS_DEVICE_DOEPCTL3_SNPM, 1 << 20   @ bitWidth 1 (SNPM)  
        .equ OTG_FS_DEVICE_DOEPCTL3_EPTYP_Shift, 18   @ bitWidth 2 (EPTYP)  
        .equ OTG_FS_DEVICE_DOEPCTL3_NAKSTS, 1 << 17   @ bitWidth 1 (NAKSTS)  
        .equ OTG_FS_DEVICE_DOEPCTL3_EONUM_DPID, 1 << 16   @ bitWidth 1 (EONUM/DPID)  
        .equ OTG_FS_DEVICE_DOEPCTL3_USBAEP, 1 << 15   @ bitWidth 1 (USBAEP)  
        .equ OTG_FS_DEVICE_DOEPCTL3_MPSIZ_Shift, 0   @ bitWidth 11 (MPSIZ)  
 
    .equ OTG_FS_DEVICE_DIEPINT0, OTG_FS_DEVICE_BASE + 0x108 @ (device endpoint-x interrupt  register) 
        .equ OTG_FS_DEVICE_DIEPINT0_TXFE, 1 << 7   @ bitWidth 1 (TXFE)  
        .equ OTG_FS_DEVICE_DIEPINT0_INEPNE, 1 << 6   @ bitWidth 1 (INEPNE)  
        .equ OTG_FS_DEVICE_DIEPINT0_ITTXFE, 1 << 4   @ bitWidth 1 (ITTXFE)  
        .equ OTG_FS_DEVICE_DIEPINT0_TOC, 1 << 3   @ bitWidth 1 (TOC)  
        .equ OTG_FS_DEVICE_DIEPINT0_EPDISD, 1 << 1   @ bitWidth 1 (EPDISD)  
        .equ OTG_FS_DEVICE_DIEPINT0_XFRC, 1 << 0   @ bitWidth 1 (XFRC)  
 
    .equ OTG_FS_DEVICE_DIEPINT1, OTG_FS_DEVICE_BASE + 0x128 @ (device endpoint-1 interrupt  register) 
        .equ OTG_FS_DEVICE_DIEPINT1_TXFE, 1 << 7   @ bitWidth 1 (TXFE)  
        .equ OTG_FS_DEVICE_DIEPINT1_INEPNE, 1 << 6   @ bitWidth 1 (INEPNE)  
        .equ OTG_FS_DEVICE_DIEPINT1_ITTXFE, 1 << 4   @ bitWidth 1 (ITTXFE)  
        .equ OTG_FS_DEVICE_DIEPINT1_TOC, 1 << 3   @ bitWidth 1 (TOC)  
        .equ OTG_FS_DEVICE_DIEPINT1_EPDISD, 1 << 1   @ bitWidth 1 (EPDISD)  
        .equ OTG_FS_DEVICE_DIEPINT1_XFRC, 1 << 0   @ bitWidth 1 (XFRC)  
 
    .equ OTG_FS_DEVICE_DIEPINT2, OTG_FS_DEVICE_BASE + 0x148 @ (device endpoint-2 interrupt  register) 
        .equ OTG_FS_DEVICE_DIEPINT2_TXFE, 1 << 7   @ bitWidth 1 (TXFE)  
        .equ OTG_FS_DEVICE_DIEPINT2_INEPNE, 1 << 6   @ bitWidth 1 (INEPNE)  
        .equ OTG_FS_DEVICE_DIEPINT2_ITTXFE, 1 << 4   @ bitWidth 1 (ITTXFE)  
        .equ OTG_FS_DEVICE_DIEPINT2_TOC, 1 << 3   @ bitWidth 1 (TOC)  
        .equ OTG_FS_DEVICE_DIEPINT2_EPDISD, 1 << 1   @ bitWidth 1 (EPDISD)  
        .equ OTG_FS_DEVICE_DIEPINT2_XFRC, 1 << 0   @ bitWidth 1 (XFRC)  
 
    .equ OTG_FS_DEVICE_DIEPINT3, OTG_FS_DEVICE_BASE + 0x168 @ (device endpoint-3 interrupt  register) 
        .equ OTG_FS_DEVICE_DIEPINT3_TXFE, 1 << 7   @ bitWidth 1 (TXFE)  
        .equ OTG_FS_DEVICE_DIEPINT3_INEPNE, 1 << 6   @ bitWidth 1 (INEPNE)  
        .equ OTG_FS_DEVICE_DIEPINT3_ITTXFE, 1 << 4   @ bitWidth 1 (ITTXFE)  
        .equ OTG_FS_DEVICE_DIEPINT3_TOC, 1 << 3   @ bitWidth 1 (TOC)  
        .equ OTG_FS_DEVICE_DIEPINT3_EPDISD, 1 << 1   @ bitWidth 1 (EPDISD)  
        .equ OTG_FS_DEVICE_DIEPINT3_XFRC, 1 << 0   @ bitWidth 1 (XFRC)  
 
    .equ OTG_FS_DEVICE_DOEPINT0, OTG_FS_DEVICE_BASE + 0x308 @ (device endpoint-0 interrupt  register) 
        .equ OTG_FS_DEVICE_DOEPINT0_B2BSTUP, 1 << 6   @ bitWidth 1 (B2BSTUP)  
        .equ OTG_FS_DEVICE_DOEPINT0_OTEPDIS, 1 << 4   @ bitWidth 1 (OTEPDIS)  
        .equ OTG_FS_DEVICE_DOEPINT0_STUP, 1 << 3   @ bitWidth 1 (STUP)  
        .equ OTG_FS_DEVICE_DOEPINT0_EPDISD, 1 << 1   @ bitWidth 1 (EPDISD)  
        .equ OTG_FS_DEVICE_DOEPINT0_XFRC, 1 << 0   @ bitWidth 1 (XFRC)  
 
    .equ OTG_FS_DEVICE_DOEPINT1, OTG_FS_DEVICE_BASE + 0x328 @ (device endpoint-1 interrupt  register) 
        .equ OTG_FS_DEVICE_DOEPINT1_B2BSTUP, 1 << 6   @ bitWidth 1 (B2BSTUP)  
        .equ OTG_FS_DEVICE_DOEPINT1_OTEPDIS, 1 << 4   @ bitWidth 1 (OTEPDIS)  
        .equ OTG_FS_DEVICE_DOEPINT1_STUP, 1 << 3   @ bitWidth 1 (STUP)  
        .equ OTG_FS_DEVICE_DOEPINT1_EPDISD, 1 << 1   @ bitWidth 1 (EPDISD)  
        .equ OTG_FS_DEVICE_DOEPINT1_XFRC, 1 << 0   @ bitWidth 1 (XFRC)  
 
    .equ OTG_FS_DEVICE_DOEPINT2, OTG_FS_DEVICE_BASE + 0x348 @ (device endpoint-2 interrupt  register) 
        .equ OTG_FS_DEVICE_DOEPINT2_B2BSTUP, 1 << 6   @ bitWidth 1 (B2BSTUP)  
        .equ OTG_FS_DEVICE_DOEPINT2_OTEPDIS, 1 << 4   @ bitWidth 1 (OTEPDIS)  
        .equ OTG_FS_DEVICE_DOEPINT2_STUP, 1 << 3   @ bitWidth 1 (STUP)  
        .equ OTG_FS_DEVICE_DOEPINT2_EPDISD, 1 << 1   @ bitWidth 1 (EPDISD)  
        .equ OTG_FS_DEVICE_DOEPINT2_XFRC, 1 << 0   @ bitWidth 1 (XFRC)  
 
    .equ OTG_FS_DEVICE_DOEPINT3, OTG_FS_DEVICE_BASE + 0x368 @ (device endpoint-3 interrupt  register) 
        .equ OTG_FS_DEVICE_DOEPINT3_B2BSTUP, 1 << 6   @ bitWidth 1 (B2BSTUP)  
        .equ OTG_FS_DEVICE_DOEPINT3_OTEPDIS, 1 << 4   @ bitWidth 1 (OTEPDIS)  
        .equ OTG_FS_DEVICE_DOEPINT3_STUP, 1 << 3   @ bitWidth 1 (STUP)  
        .equ OTG_FS_DEVICE_DOEPINT3_EPDISD, 1 << 1   @ bitWidth 1 (EPDISD)  
        .equ OTG_FS_DEVICE_DOEPINT3_XFRC, 1 << 0   @ bitWidth 1 (XFRC)  
 
    .equ OTG_FS_DEVICE_DIEPTSIZ0, OTG_FS_DEVICE_BASE + 0x110 @ (device endpoint-0 transfer size  register) 
        .equ OTG_FS_DEVICE_DIEPTSIZ0_PKTCNT_Shift, 19   @ bitWidth 2 (Packet count)  
        .equ OTG_FS_DEVICE_DIEPTSIZ0_XFRSIZ_Shift, 0   @ bitWidth 7 (Transfer size)  
 
    .equ OTG_FS_DEVICE_DOEPTSIZ0, OTG_FS_DEVICE_BASE + 0x310 @ (device OUT endpoint-0 transfer size  register) 
        .equ OTG_FS_DEVICE_DOEPTSIZ0_STUPCNT_Shift, 29   @ bitWidth 2 (SETUP packet count)  
        .equ OTG_FS_DEVICE_DOEPTSIZ0_PKTCNT, 1 << 19   @ bitWidth 1 (Packet count)  
        .equ OTG_FS_DEVICE_DOEPTSIZ0_XFRSIZ_Shift, 0   @ bitWidth 7 (Transfer size)  
 
    .equ OTG_FS_DEVICE_DIEPTSIZ1, OTG_FS_DEVICE_BASE + 0x130 @ (device endpoint-1 transfer size  register) 
        .equ OTG_FS_DEVICE_DIEPTSIZ1_MCNT_Shift, 29   @ bitWidth 2 (Multi count)  
        .equ OTG_FS_DEVICE_DIEPTSIZ1_PKTCNT_Shift, 19   @ bitWidth 10 (Packet count)  
        .equ OTG_FS_DEVICE_DIEPTSIZ1_XFRSIZ_Shift, 0   @ bitWidth 19 (Transfer size)  
 
    .equ OTG_FS_DEVICE_DIEPTSIZ2, OTG_FS_DEVICE_BASE + 0x150 @ (device endpoint-2 transfer size  register) 
        .equ OTG_FS_DEVICE_DIEPTSIZ2_MCNT_Shift, 29   @ bitWidth 2 (Multi count)  
        .equ OTG_FS_DEVICE_DIEPTSIZ2_PKTCNT_Shift, 19   @ bitWidth 10 (Packet count)  
        .equ OTG_FS_DEVICE_DIEPTSIZ2_XFRSIZ_Shift, 0   @ bitWidth 19 (Transfer size)  
 
    .equ OTG_FS_DEVICE_DIEPTSIZ3, OTG_FS_DEVICE_BASE + 0x170 @ (device endpoint-3 transfer size  register) 
        .equ OTG_FS_DEVICE_DIEPTSIZ3_MCNT_Shift, 29   @ bitWidth 2 (Multi count)  
        .equ OTG_FS_DEVICE_DIEPTSIZ3_PKTCNT_Shift, 19   @ bitWidth 10 (Packet count)  
        .equ OTG_FS_DEVICE_DIEPTSIZ3_XFRSIZ_Shift, 0   @ bitWidth 19 (Transfer size)  
 
    .equ OTG_FS_DEVICE_DTXFSTS0, OTG_FS_DEVICE_BASE + 0x118 @ (OTG_FS device IN endpoint transmit FIFO  status register) 
        .equ OTG_FS_DEVICE_DTXFSTS0_INEPTFSAV_Shift, 0   @ bitWidth 16 (IN endpoint TxFIFO space  available)  
 
    .equ OTG_FS_DEVICE_DTXFSTS1, OTG_FS_DEVICE_BASE + 0x138 @ (OTG_FS device IN endpoint transmit FIFO  status register) 
        .equ OTG_FS_DEVICE_DTXFSTS1_INEPTFSAV_Shift, 0   @ bitWidth 16 (IN endpoint TxFIFO space  available)  
 
    .equ OTG_FS_DEVICE_DTXFSTS2, OTG_FS_DEVICE_BASE + 0x158 @ (OTG_FS device IN endpoint transmit FIFO  status register) 
        .equ OTG_FS_DEVICE_DTXFSTS2_INEPTFSAV_Shift, 0   @ bitWidth 16 (IN endpoint TxFIFO space  available)  
 
    .equ OTG_FS_DEVICE_DTXFSTS3, OTG_FS_DEVICE_BASE + 0x178 @ (OTG_FS device IN endpoint transmit FIFO  status register) 
        .equ OTG_FS_DEVICE_DTXFSTS3_INEPTFSAV_Shift, 0   @ bitWidth 16 (IN endpoint TxFIFO space  available)  
 
    .equ OTG_FS_DEVICE_DOEPTSIZ1, OTG_FS_DEVICE_BASE + 0x330 @ (device OUT endpoint-1 transfer size  register) 
        .equ OTG_FS_DEVICE_DOEPTSIZ1_RXDPID_STUPCNT_Shift, 29   @ bitWidth 2 (Received data PID/SETUP packet  count)  
        .equ OTG_FS_DEVICE_DOEPTSIZ1_PKTCNT_Shift, 19   @ bitWidth 10 (Packet count)  
        .equ OTG_FS_DEVICE_DOEPTSIZ1_XFRSIZ_Shift, 0   @ bitWidth 19 (Transfer size)  
 
    .equ OTG_FS_DEVICE_DOEPTSIZ2, OTG_FS_DEVICE_BASE + 0x350 @ (device OUT endpoint-2 transfer size  register) 
        .equ OTG_FS_DEVICE_DOEPTSIZ2_RXDPID_STUPCNT_Shift, 29   @ bitWidth 2 (Received data PID/SETUP packet  count)  
        .equ OTG_FS_DEVICE_DOEPTSIZ2_PKTCNT_Shift, 19   @ bitWidth 10 (Packet count)  
        .equ OTG_FS_DEVICE_DOEPTSIZ2_XFRSIZ_Shift, 0   @ bitWidth 19 (Transfer size)  
 
    .equ OTG_FS_DEVICE_DOEPTSIZ3, OTG_FS_DEVICE_BASE + 0x370 @ (device OUT endpoint-3 transfer size  register) 
        .equ OTG_FS_DEVICE_DOEPTSIZ3_RXDPID_STUPCNT_Shift, 29   @ bitWidth 2 (Received data PID/SETUP packet  count)  
        .equ OTG_FS_DEVICE_DOEPTSIZ3_PKTCNT_Shift, 19   @ bitWidth 10 (Packet count)  
        .equ OTG_FS_DEVICE_DOEPTSIZ3_XFRSIZ_Shift, 0   @ bitWidth 19 (Transfer size)  
 

@=========================== OTG_FS_PWRCLK ===========================@
.equ OTG_FS_PWRCLK_BASE, 0x50000E00 @ (USB on the go full speed) 
    .equ OTG_FS_PWRCLK_FS_PCGCCTL, OTG_FS_PWRCLK_BASE + 0x0 @ (OTG_FS power and clock gating control  register OTG_FS_PCGCCTL) 
        .equ OTG_FS_PWRCLK_FS_PCGCCTL_STPPCLK, 1 << 0   @ bitWidth 1 (Stop PHY clock)  
        .equ OTG_FS_PWRCLK_FS_PCGCCTL_GATEHCLK, 1 << 1   @ bitWidth 1 (Gate HCLK)  
        .equ OTG_FS_PWRCLK_FS_PCGCCTL_PHYSUSP, 1 << 4   @ bitWidth 1 (PHY Suspended)  
 

@=========================== NVIC ===========================@
.equ NVIC_BASE, 0xE000E000 @ (Nested Vectored Interrupt  Controller) 
    .equ NVIC_ICTR, NVIC_BASE + 0x4 @ (Interrupt Controller Type  Register) 
        .equ NVIC_ICTR_INTLINESNUM_Shift, 0   @ bitWidth 4 (Total number of interrupt lines in  groups)  
 
    .equ NVIC_STIR, NVIC_BASE + 0xF00 @ (Software Triggered Interrupt  Register) 
        .equ NVIC_STIR_INTID_Shift, 0   @ bitWidth 9 (interrupt to be triggered)  
 
    .equ NVIC_ISER0, NVIC_BASE + 0x100 @ (Interrupt Set-Enable Register) 
        .equ NVIC_ISER0_SETENA_Shift, 0   @ bitWidth 32 (SETENA)  
 
    .equ NVIC_ISER1, NVIC_BASE + 0x104 @ (Interrupt Set-Enable Register) 
        .equ NVIC_ISER1_SETENA_Shift, 0   @ bitWidth 32 (SETENA)  
 
    .equ NVIC_ISER2, NVIC_BASE + 0x108 @ (Interrupt Set-Enable Register) 
        .equ NVIC_ISER2_SETENA_Shift, 0   @ bitWidth 32 (SETENA)  
 
    .equ NVIC_ICER0, NVIC_BASE + 0x180 @ (Interrupt Clear-Enable  Register) 
        .equ NVIC_ICER0_CLRENA_Shift, 0   @ bitWidth 32 (CLRENA)  
 
    .equ NVIC_ICER1, NVIC_BASE + 0x184 @ (Interrupt Clear-Enable  Register) 
        .equ NVIC_ICER1_CLRENA_Shift, 0   @ bitWidth 32 (CLRENA)  
 
    .equ NVIC_ICER2, NVIC_BASE + 0x188 @ (Interrupt Clear-Enable  Register) 
        .equ NVIC_ICER2_CLRENA_Shift, 0   @ bitWidth 32 (CLRENA)  
 
    .equ NVIC_ISPR0, NVIC_BASE + 0x200 @ (Interrupt Set-Pending Register) 
        .equ NVIC_ISPR0_SETPEND_Shift, 0   @ bitWidth 32 (SETPEND)  
 
    .equ NVIC_ISPR1, NVIC_BASE + 0x204 @ (Interrupt Set-Pending Register) 
        .equ NVIC_ISPR1_SETPEND_Shift, 0   @ bitWidth 32 (SETPEND)  
 
    .equ NVIC_ISPR2, NVIC_BASE + 0x208 @ (Interrupt Set-Pending Register) 
        .equ NVIC_ISPR2_SETPEND_Shift, 0   @ bitWidth 32 (SETPEND)  
 
    .equ NVIC_ICPR0, NVIC_BASE + 0x280 @ (Interrupt Clear-Pending  Register) 
        .equ NVIC_ICPR0_CLRPEND_Shift, 0   @ bitWidth 32 (CLRPEND)  
 
    .equ NVIC_ICPR1, NVIC_BASE + 0x284 @ (Interrupt Clear-Pending  Register) 
        .equ NVIC_ICPR1_CLRPEND_Shift, 0   @ bitWidth 32 (CLRPEND)  
 
    .equ NVIC_ICPR2, NVIC_BASE + 0x288 @ (Interrupt Clear-Pending  Register) 
        .equ NVIC_ICPR2_CLRPEND_Shift, 0   @ bitWidth 32 (CLRPEND)  
 
    .equ NVIC_IABR0, NVIC_BASE + 0x300 @ (Interrupt Active Bit Register) 
        .equ NVIC_IABR0_ACTIVE_Shift, 0   @ bitWidth 32 (ACTIVE)  
 
    .equ NVIC_IABR1, NVIC_BASE + 0x304 @ (Interrupt Active Bit Register) 
        .equ NVIC_IABR1_ACTIVE_Shift, 0   @ bitWidth 32 (ACTIVE)  
 
    .equ NVIC_IABR2, NVIC_BASE + 0x308 @ (Interrupt Active Bit Register) 
        .equ NVIC_IABR2_ACTIVE_Shift, 0   @ bitWidth 32 (ACTIVE)  
 
    .equ NVIC_IPR0, NVIC_BASE + 0x400 @ (Interrupt Priority Register) 
        .equ NVIC_IPR0_IPR_N0_Shift, 0   @ bitWidth 8 (IPR_N0)  
        .equ NVIC_IPR0_IPR_N1_Shift, 8   @ bitWidth 8 (IPR_N1)  
        .equ NVIC_IPR0_IPR_N2_Shift, 16   @ bitWidth 8 (IPR_N2)  
        .equ NVIC_IPR0_IPR_N3_Shift, 24   @ bitWidth 8 (IPR_N3)  
 
    .equ NVIC_IPR1, NVIC_BASE + 0x404 @ (Interrupt Priority Register) 
        .equ NVIC_IPR1_IPR_N0_Shift, 0   @ bitWidth 8 (IPR_N0)  
        .equ NVIC_IPR1_IPR_N1_Shift, 8   @ bitWidth 8 (IPR_N1)  
        .equ NVIC_IPR1_IPR_N2_Shift, 16   @ bitWidth 8 (IPR_N2)  
        .equ NVIC_IPR1_IPR_N3_Shift, 24   @ bitWidth 8 (IPR_N3)  
 
    .equ NVIC_IPR2, NVIC_BASE + 0x408 @ (Interrupt Priority Register) 
        .equ NVIC_IPR2_IPR_N0_Shift, 0   @ bitWidth 8 (IPR_N0)  
        .equ NVIC_IPR2_IPR_N1_Shift, 8   @ bitWidth 8 (IPR_N1)  
        .equ NVIC_IPR2_IPR_N2_Shift, 16   @ bitWidth 8 (IPR_N2)  
        .equ NVIC_IPR2_IPR_N3_Shift, 24   @ bitWidth 8 (IPR_N3)  
 
    .equ NVIC_IPR3, NVIC_BASE + 0x40C @ (Interrupt Priority Register) 
        .equ NVIC_IPR3_IPR_N0_Shift, 0   @ bitWidth 8 (IPR_N0)  
        .equ NVIC_IPR3_IPR_N1_Shift, 8   @ bitWidth 8 (IPR_N1)  
        .equ NVIC_IPR3_IPR_N2_Shift, 16   @ bitWidth 8 (IPR_N2)  
        .equ NVIC_IPR3_IPR_N3_Shift, 24   @ bitWidth 8 (IPR_N3)  
 
    .equ NVIC_IPR4, NVIC_BASE + 0x410 @ (Interrupt Priority Register) 
        .equ NVIC_IPR4_IPR_N0_Shift, 0   @ bitWidth 8 (IPR_N0)  
        .equ NVIC_IPR4_IPR_N1_Shift, 8   @ bitWidth 8 (IPR_N1)  
        .equ NVIC_IPR4_IPR_N2_Shift, 16   @ bitWidth 8 (IPR_N2)  
        .equ NVIC_IPR4_IPR_N3_Shift, 24   @ bitWidth 8 (IPR_N3)  
 
    .equ NVIC_IPR5, NVIC_BASE + 0x414 @ (Interrupt Priority Register) 
        .equ NVIC_IPR5_IPR_N0_Shift, 0   @ bitWidth 8 (IPR_N0)  
        .equ NVIC_IPR5_IPR_N1_Shift, 8   @ bitWidth 8 (IPR_N1)  
        .equ NVIC_IPR5_IPR_N2_Shift, 16   @ bitWidth 8 (IPR_N2)  
        .equ NVIC_IPR5_IPR_N3_Shift, 24   @ bitWidth 8 (IPR_N3)  
 
    .equ NVIC_IPR6, NVIC_BASE + 0x418 @ (Interrupt Priority Register) 
        .equ NVIC_IPR6_IPR_N0_Shift, 0   @ bitWidth 8 (IPR_N0)  
        .equ NVIC_IPR6_IPR_N1_Shift, 8   @ bitWidth 8 (IPR_N1)  
        .equ NVIC_IPR6_IPR_N2_Shift, 16   @ bitWidth 8 (IPR_N2)  
        .equ NVIC_IPR6_IPR_N3_Shift, 24   @ bitWidth 8 (IPR_N3)  
 
    .equ NVIC_IPR7, NVIC_BASE + 0x41C @ (Interrupt Priority Register) 
        .equ NVIC_IPR7_IPR_N0_Shift, 0   @ bitWidth 8 (IPR_N0)  
        .equ NVIC_IPR7_IPR_N1_Shift, 8   @ bitWidth 8 (IPR_N1)  
        .equ NVIC_IPR7_IPR_N2_Shift, 16   @ bitWidth 8 (IPR_N2)  
        .equ NVIC_IPR7_IPR_N3_Shift, 24   @ bitWidth 8 (IPR_N3)  
 
    .equ NVIC_IPR8, NVIC_BASE + 0x420 @ (Interrupt Priority Register) 
        .equ NVIC_IPR8_IPR_N0_Shift, 0   @ bitWidth 8 (IPR_N0)  
        .equ NVIC_IPR8_IPR_N1_Shift, 8   @ bitWidth 8 (IPR_N1)  
        .equ NVIC_IPR8_IPR_N2_Shift, 16   @ bitWidth 8 (IPR_N2)  
        .equ NVIC_IPR8_IPR_N3_Shift, 24   @ bitWidth 8 (IPR_N3)  
 
    .equ NVIC_IPR9, NVIC_BASE + 0x424 @ (Interrupt Priority Register) 
        .equ NVIC_IPR9_IPR_N0_Shift, 0   @ bitWidth 8 (IPR_N0)  
        .equ NVIC_IPR9_IPR_N1_Shift, 8   @ bitWidth 8 (IPR_N1)  
        .equ NVIC_IPR9_IPR_N2_Shift, 16   @ bitWidth 8 (IPR_N2)  
        .equ NVIC_IPR9_IPR_N3_Shift, 24   @ bitWidth 8 (IPR_N3)  
 
    .equ NVIC_IPR10, NVIC_BASE + 0x428 @ (Interrupt Priority Register) 
        .equ NVIC_IPR10_IPR_N0_Shift, 0   @ bitWidth 8 (IPR_N0)  
        .equ NVIC_IPR10_IPR_N1_Shift, 8   @ bitWidth 8 (IPR_N1)  
        .equ NVIC_IPR10_IPR_N2_Shift, 16   @ bitWidth 8 (IPR_N2)  
        .equ NVIC_IPR10_IPR_N3_Shift, 24   @ bitWidth 8 (IPR_N3)  
 
    .equ NVIC_IPR11, NVIC_BASE + 0x42C @ (Interrupt Priority Register) 
        .equ NVIC_IPR11_IPR_N0_Shift, 0   @ bitWidth 8 (IPR_N0)  
        .equ NVIC_IPR11_IPR_N1_Shift, 8   @ bitWidth 8 (IPR_N1)  
        .equ NVIC_IPR11_IPR_N2_Shift, 16   @ bitWidth 8 (IPR_N2)  
        .equ NVIC_IPR11_IPR_N3_Shift, 24   @ bitWidth 8 (IPR_N3)  
 
    .equ NVIC_IPR12, NVIC_BASE + 0x430 @ (Interrupt Priority Register) 
        .equ NVIC_IPR12_IPR_N0_Shift, 0   @ bitWidth 8 (IPR_N0)  
        .equ NVIC_IPR12_IPR_N1_Shift, 8   @ bitWidth 8 (IPR_N1)  
        .equ NVIC_IPR12_IPR_N2_Shift, 16   @ bitWidth 8 (IPR_N2)  
        .equ NVIC_IPR12_IPR_N3_Shift, 24   @ bitWidth 8 (IPR_N3)  
 
    .equ NVIC_IPR13, NVIC_BASE + 0x434 @ (Interrupt Priority Register) 
        .equ NVIC_IPR13_IPR_N0_Shift, 0   @ bitWidth 8 (IPR_N0)  
        .equ NVIC_IPR13_IPR_N1_Shift, 8   @ bitWidth 8 (IPR_N1)  
        .equ NVIC_IPR13_IPR_N2_Shift, 16   @ bitWidth 8 (IPR_N2)  
        .equ NVIC_IPR13_IPR_N3_Shift, 24   @ bitWidth 8 (IPR_N3)  
 
    .equ NVIC_IPR14, NVIC_BASE + 0x438 @ (Interrupt Priority Register) 
        .equ NVIC_IPR14_IPR_N0_Shift, 0   @ bitWidth 8 (IPR_N0)  
        .equ NVIC_IPR14_IPR_N1_Shift, 8   @ bitWidth 8 (IPR_N1)  
        .equ NVIC_IPR14_IPR_N2_Shift, 16   @ bitWidth 8 (IPR_N2)  
        .equ NVIC_IPR14_IPR_N3_Shift, 24   @ bitWidth 8 (IPR_N3)  
 
    .equ NVIC_IPR15, NVIC_BASE + 0x43C @ (Interrupt Priority Register) 
        .equ NVIC_IPR15_IPR_N0_Shift, 0   @ bitWidth 8 (IPR_N0)  
        .equ NVIC_IPR15_IPR_N1_Shift, 8   @ bitWidth 8 (IPR_N1)  
        .equ NVIC_IPR15_IPR_N2_Shift, 16   @ bitWidth 8 (IPR_N2)  
        .equ NVIC_IPR15_IPR_N3_Shift, 24   @ bitWidth 8 (IPR_N3)  
 
    .equ NVIC_IPR16, NVIC_BASE + 0x440 @ (Interrupt Priority Register) 
        .equ NVIC_IPR16_IPR_N0_Shift, 0   @ bitWidth 8 (IPR_N0)  
        .equ NVIC_IPR16_IPR_N1_Shift, 8   @ bitWidth 8 (IPR_N1)  
        .equ NVIC_IPR16_IPR_N2_Shift, 16   @ bitWidth 8 (IPR_N2)  
        .equ NVIC_IPR16_IPR_N3_Shift, 24   @ bitWidth 8 (IPR_N3)  
 
    .equ NVIC_IPR17, NVIC_BASE + 0x444 @ (Interrupt Priority Register) 
        .equ NVIC_IPR17_IPR_N0_Shift, 0   @ bitWidth 8 (IPR_N0)  
        .equ NVIC_IPR17_IPR_N1_Shift, 8   @ bitWidth 8 (IPR_N1)  
        .equ NVIC_IPR17_IPR_N2_Shift, 16   @ bitWidth 8 (IPR_N2)  
        .equ NVIC_IPR17_IPR_N3_Shift, 24   @ bitWidth 8 (IPR_N3)  
 
    .equ NVIC_IPR18, NVIC_BASE + 0x448 @ (Interrupt Priority Register) 
        .equ NVIC_IPR18_IPR_N0_Shift, 0   @ bitWidth 8 (IPR_N0)  
        .equ NVIC_IPR18_IPR_N1_Shift, 8   @ bitWidth 8 (IPR_N1)  
        .equ NVIC_IPR18_IPR_N2_Shift, 16   @ bitWidth 8 (IPR_N2)  
        .equ NVIC_IPR18_IPR_N3_Shift, 24   @ bitWidth 8 (IPR_N3)  
 
    .equ NVIC_IPR19, NVIC_BASE + 0x44C @ (Interrupt Priority Register) 
        .equ NVIC_IPR19_IPR_N0_Shift, 0   @ bitWidth 8 (IPR_N0)  
        .equ NVIC_IPR19_IPR_N1_Shift, 8   @ bitWidth 8 (IPR_N1)  
        .equ NVIC_IPR19_IPR_N2_Shift, 16   @ bitWidth 8 (IPR_N2)  
        .equ NVIC_IPR19_IPR_N3_Shift, 24   @ bitWidth 8 (IPR_N3)  
 
    .equ NVIC_IPR20, NVIC_BASE + 0x450 @ (Interrupt Priority Register) 
        .equ NVIC_IPR20_IPR_N0_Shift, 0   @ bitWidth 8 (IPR_N0)  
        .equ NVIC_IPR20_IPR_N1_Shift, 8   @ bitWidth 8 (IPR_N1)  
        .equ NVIC_IPR20_IPR_N2_Shift, 16   @ bitWidth 8 (IPR_N2)  
        .equ NVIC_IPR20_IPR_N3_Shift, 24   @ bitWidth 8 (IPR_N3)  
 
