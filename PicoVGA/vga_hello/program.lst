
build/program.elf:     file format elf32-littlearm


Disassembly of section .boot2:

10000000 <__boot2_start__>:
10000000:	4b32b500 	.word	0x4b32b500
10000004:	60582021 	.word	0x60582021
10000008:	21026898 	.word	0x21026898
1000000c:	60984388 	.word	0x60984388
10000010:	611860d8 	.word	0x611860d8
10000014:	4b2e6158 	.word	0x4b2e6158
10000018:	60992100 	.word	0x60992100
1000001c:	61592102 	.word	0x61592102
10000020:	22f02101 	.word	0x22f02101
10000024:	492b5099 	.word	0x492b5099
10000028:	21016019 	.word	0x21016019
1000002c:	20356099 	.word	0x20356099
10000030:	f844f000 	.word	0xf844f000
10000034:	42902202 	.word	0x42902202
10000038:	2106d014 	.word	0x2106d014
1000003c:	f0006619 	.word	0xf0006619
10000040:	6e19f834 	.word	0x6e19f834
10000044:	66192101 	.word	0x66192101
10000048:	66182000 	.word	0x66182000
1000004c:	f000661a 	.word	0xf000661a
10000050:	6e19f82c 	.word	0x6e19f82c
10000054:	6e196e19 	.word	0x6e196e19
10000058:	f0002005 	.word	0xf0002005
1000005c:	2101f82f 	.word	0x2101f82f
10000060:	d1f94208 	.word	0xd1f94208
10000064:	60992100 	.word	0x60992100
10000068:	6019491b 	.word	0x6019491b
1000006c:	60592100 	.word	0x60592100
10000070:	481b491a 	.word	0x481b491a
10000074:	21016001 	.word	0x21016001
10000078:	21eb6099 	.word	0x21eb6099
1000007c:	21a06619 	.word	0x21a06619
10000080:	f0006619 	.word	0xf0006619
10000084:	2100f812 	.word	0x2100f812
10000088:	49166099 	.word	0x49166099
1000008c:	60014814 	.word	0x60014814
10000090:	60992101 	.word	0x60992101
10000094:	2800bc01 	.word	0x2800bc01
10000098:	4700d000 	.word	0x4700d000
1000009c:	49134812 	.word	0x49134812
100000a0:	c8036008 	.word	0xc8036008
100000a4:	8808f380 	.word	0x8808f380
100000a8:	b5034708 	.word	0xb5034708
100000ac:	20046a99 	.word	0x20046a99
100000b0:	d0fb4201 	.word	0xd0fb4201
100000b4:	42012001 	.word	0x42012001
100000b8:	bd03d1f8 	.word	0xbd03d1f8
100000bc:	6618b502 	.word	0x6618b502
100000c0:	f7ff6618 	.word	0xf7ff6618
100000c4:	6e18fff2 	.word	0x6e18fff2
100000c8:	bd026e18 	.word	0xbd026e18
100000cc:	40020000 	.word	0x40020000
100000d0:	18000000 	.word	0x18000000
100000d4:	00070000 	.word	0x00070000
100000d8:	005f0300 	.word	0x005f0300
100000dc:	00002221 	.word	0x00002221
100000e0:	180000f4 	.word	0x180000f4
100000e4:	a0002022 	.word	0xa0002022
100000e8:	10000100 	.word	0x10000100
100000ec:	e000ed08 	.word	0xe000ed08
	...
100000fc:	7a4eb274 	.word	0x7a4eb274

Disassembly of section .text:

10000100 <__logical_binary_start>:
10000100:	20042000 	.word	0x20042000
10000104:	100001f7 	.word	0x100001f7
10000108:	100001c3 	.word	0x100001c3
1000010c:	100001c5 	.word	0x100001c5
10000110:	100001c1 	.word	0x100001c1
10000114:	100001c1 	.word	0x100001c1
10000118:	100001c1 	.word	0x100001c1
1000011c:	100001c1 	.word	0x100001c1
10000120:	100001c1 	.word	0x100001c1
10000124:	100001c1 	.word	0x100001c1
10000128:	100001c1 	.word	0x100001c1
1000012c:	100001c7 	.word	0x100001c7
10000130:	100001c1 	.word	0x100001c1
10000134:	100001c1 	.word	0x100001c1
10000138:	100001c9 	.word	0x100001c9
1000013c:	100001cb 	.word	0x100001cb
10000140:	100001cd 	.word	0x100001cd
10000144:	100001cd 	.word	0x100001cd
10000148:	100001cd 	.word	0x100001cd
1000014c:	100001cd 	.word	0x100001cd
10000150:	100001cd 	.word	0x100001cd
10000154:	100001cd 	.word	0x100001cd
10000158:	100001cd 	.word	0x100001cd
1000015c:	100001cd 	.word	0x100001cd
10000160:	100001cd 	.word	0x100001cd
10000164:	100001cd 	.word	0x100001cd
10000168:	100001cd 	.word	0x100001cd
1000016c:	100001cd 	.word	0x100001cd
10000170:	100001cd 	.word	0x100001cd
10000174:	100001cd 	.word	0x100001cd
10000178:	100001cd 	.word	0x100001cd
1000017c:	100001cd 	.word	0x100001cd
10000180:	100001cd 	.word	0x100001cd
10000184:	100001cd 	.word	0x100001cd
10000188:	100001cd 	.word	0x100001cd
1000018c:	100001cd 	.word	0x100001cd
10000190:	100001cd 	.word	0x100001cd
10000194:	100001cd 	.word	0x100001cd
10000198:	100001cd 	.word	0x100001cd
1000019c:	100001cd 	.word	0x100001cd
100001a0:	100001cd 	.word	0x100001cd
100001a4:	100001cd 	.word	0x100001cd
100001a8:	100001cd 	.word	0x100001cd
100001ac:	100001cd 	.word	0x100001cd
100001b0:	100001cd 	.word	0x100001cd
100001b4:	100001cd 	.word	0x100001cd
100001b8:	100001cd 	.word	0x100001cd
100001bc:	100001cd 	.word	0x100001cd

100001c0 <isr_invalid>:
100001c0:	be00      	bkpt	0x0000

100001c2 <isr_nmi>:
100001c2:	be00      	bkpt	0x0000

100001c4 <isr_hardfault>:
100001c4:	be00      	bkpt	0x0000

100001c6 <isr_svcall>:
100001c6:	be00      	bkpt	0x0000

100001c8 <isr_pendsv>:
100001c8:	be00      	bkpt	0x0000

100001ca <isr_systick>:
100001ca:	be00      	bkpt	0x0000

100001cc <__unhandled_user_irq>:
100001cc:	f000 f84b 	bl	10000266 <__get_current_exception>
100001d0:	3810      	subs	r0, #16

100001d2 <unhandled_user_irq_num_in_r0>:
100001d2:	be00      	bkpt	0x0000

100001d4 <binary_info_header>:
100001d4:	7188ebf2 	.word	0x7188ebf2
100001d8:	10006224 	.word	0x10006224
100001dc:	10006240 	.word	0x10006240
100001e0:	10000234 	.word	0x10000234
100001e4:	e71aa390 	.word	0xe71aa390

100001e8 <_entry_point>:
100001e8:	2000      	movs	r0, #0
100001ea:	4921      	ldr	r1, [pc, #132]	; (10000270 <__get_current_exception+0xa>)
100001ec:	6008      	str	r0, [r1, #0]
100001ee:	c806      	ldmia	r0!, {r1, r2}
100001f0:	f381 8808 	msr	MSP, r1
100001f4:	4710      	bx	r2

100001f6 <_reset_handler>:
100001f6:	481f      	ldr	r0, [pc, #124]	; (10000274 <__get_current_exception+0xe>)
100001f8:	6800      	ldr	r0, [r0, #0]
100001fa:	2800      	cmp	r0, #0
100001fc:	d12f      	bne.n	1000025e <hold_non_core0_in_bootrom>
100001fe:	a40d      	add	r4, pc, #52	; (adr r4, 10000234 <data_cpy_table>)
10000200:	cc0e      	ldmia	r4!, {r1, r2, r3}
10000202:	2900      	cmp	r1, #0
10000204:	d002      	beq.n	1000020c <_reset_handler+0x16>
10000206:	f000 f812 	bl	1000022e <data_cpy>
1000020a:	e7f9      	b.n	10000200 <_reset_handler+0xa>
1000020c:	491a      	ldr	r1, [pc, #104]	; (10000278 <__get_current_exception+0x12>)
1000020e:	4a1b      	ldr	r2, [pc, #108]	; (1000027c <__get_current_exception+0x16>)
10000210:	2000      	movs	r0, #0
10000212:	e000      	b.n	10000216 <bss_fill_test>

10000214 <bss_fill_loop>:
10000214:	c101      	stmia	r1!, {r0}

10000216 <bss_fill_test>:
10000216:	4291      	cmp	r1, r2
10000218:	d1fc      	bne.n	10000214 <bss_fill_loop>

1000021a <platform_entry>:
1000021a:	4919      	ldr	r1, [pc, #100]	; (10000280 <__get_current_exception+0x1a>)
1000021c:	4788      	blx	r1
1000021e:	4919      	ldr	r1, [pc, #100]	; (10000284 <__get_current_exception+0x1e>)
10000220:	4788      	blx	r1
10000222:	4919      	ldr	r1, [pc, #100]	; (10000288 <__get_current_exception+0x22>)
10000224:	4788      	blx	r1
10000226:	be00      	bkpt	0x0000
10000228:	e7fd      	b.n	10000226 <platform_entry+0xc>

1000022a <data_cpy_loop>:
1000022a:	c901      	ldmia	r1!, {r0}
1000022c:	c201      	stmia	r2!, {r0}

1000022e <data_cpy>:
1000022e:	429a      	cmp	r2, r3
10000230:	d3fb      	bcc.n	1000022a <data_cpy_loop>
10000232:	4770      	bx	lr

10000234 <data_cpy_table>:
10000234:	10006240 	.word	0x10006240
10000238:	200000c0 	.word	0x200000c0
1000023c:	20002f50 	.word	0x20002f50
10000240:	100090d0 	.word	0x100090d0
10000244:	20040000 	.word	0x20040000
10000248:	20040000 	.word	0x20040000
1000024c:	100090d0 	.word	0x100090d0
10000250:	20041000 	.word	0x20041000
10000254:	20041000 	.word	0x20041000
10000258:	00000000 	.word	0x00000000
1000025c:	4770      	bx	lr

1000025e <hold_non_core0_in_bootrom>:
1000025e:	480b      	ldr	r0, [pc, #44]	; (1000028c <__get_current_exception+0x26>)
10000260:	f000 fba0 	bl	100009a4 <rom_func_lookup>
10000264:	4700      	bx	r0

10000266 <__get_current_exception>:
10000266:	f3ef 8005 	mrs	r0, IPSR
1000026a:	b2c0      	uxtb	r0, r0
1000026c:	4770      	bx	lr
1000026e:	0000      	.short	0x0000
10000270:	e000ed08 	.word	0xe000ed08
10000274:	d0000000 	.word	0xd0000000
10000278:	20002f50 	.word	0x20002f50
1000027c:	200394e4 	.word	0x200394e4
10000280:	10001ae9 	.word	0x10001ae9
10000284:	10002535 	.word	0x10002535
10000288:	10001c09 	.word	0x10001c09
1000028c:	00005657 	.word	0x00005657

10000290 <__bi_46>:
10000290:	50520006 5360b3ab 10004b68              ..RP..`ShK..

1000029c <__bi_34>:
1000029c:	50520006 02031c86 10004b70              ..RP....pK..

100002a8 <__bi_26>:
100002a8:	50520006 9da22254 10004b78              ..RPT"..xK..

100002b4 <__bi_18>:
100002b4:	50520005 68f465de 100090d0              ..RP.e.h....

100002c0 <_init>:
100002c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100002c2:	46c0      	nop			; (mov r8, r8)

100002c4 <__do_global_dtors_aux>:
100002c4:	b510      	push	{r4, lr}
100002c6:	4c06      	ldr	r4, [pc, #24]	; (100002e0 <__do_global_dtors_aux+0x1c>)
100002c8:	7823      	ldrb	r3, [r4, #0]
100002ca:	2b00      	cmp	r3, #0
100002cc:	d107      	bne.n	100002de <__do_global_dtors_aux+0x1a>
100002ce:	4b05      	ldr	r3, [pc, #20]	; (100002e4 <__do_global_dtors_aux+0x20>)
100002d0:	2b00      	cmp	r3, #0
100002d2:	d002      	beq.n	100002da <__do_global_dtors_aux+0x16>
100002d4:	4804      	ldr	r0, [pc, #16]	; (100002e8 <__do_global_dtors_aux+0x24>)
100002d6:	e000      	b.n	100002da <__do_global_dtors_aux+0x16>
100002d8:	bf00      	nop
100002da:	2301      	movs	r3, #1
100002dc:	7023      	strb	r3, [r4, #0]
100002de:	bd10      	pop	{r4, pc}
100002e0:	20003150 	.word	0x20003150
100002e4:	00000000 	.word	0x00000000
100002e8:	10004b30 	.word	0x10004b30

100002ec <frame_dummy>:
100002ec:	4b04      	ldr	r3, [pc, #16]	; (10000300 <frame_dummy+0x14>)
100002ee:	b510      	push	{r4, lr}
100002f0:	2b00      	cmp	r3, #0
100002f2:	d003      	beq.n	100002fc <frame_dummy+0x10>
100002f4:	4903      	ldr	r1, [pc, #12]	; (10000304 <frame_dummy+0x18>)
100002f6:	4804      	ldr	r0, [pc, #16]	; (10000308 <frame_dummy+0x1c>)
100002f8:	e000      	b.n	100002fc <frame_dummy+0x10>
100002fa:	bf00      	nop
100002fc:	bd10      	pop	{r4, pc}
100002fe:	46c0      	nop			; (mov r8, r8)
10000300:	00000000 	.word	0x00000000
10000304:	20003154 	.word	0x20003154
10000308:	10004b30 	.word	0x10004b30

1000030c <__aeabi_bits_init>:
1000030c:	4801      	ldr	r0, [pc, #4]	; (10000314 <__aeabi_bits_init+0x8>)
1000030e:	2104      	movs	r1, #4
10000310:	4b01      	ldr	r3, [pc, #4]	; (10000318 <__aeabi_bits_init+0xc>)
10000312:	4718      	bx	r3
10000314:	200025f0 	.word	0x200025f0
10000318:	100009c5 	.word	0x100009c5

1000031c <__wrap___aeabi_idiv>:
1000031c:	4a14      	ldr	r2, [pc, #80]	; (10000370 <divmod_s32s32_savestate+0x20>)
1000031e:	6f93      	ldr	r3, [r2, #120]	; 0x78
10000320:	089b      	lsrs	r3, r3, #2
10000322:	d215      	bcs.n	10000350 <divmod_s32s32_savestate>

10000324 <divmod_s32s32_unsafe>:
10000324:	6690      	str	r0, [r2, #104]	; 0x68
10000326:	66d1      	str	r1, [r2, #108]	; 0x6c
10000328:	2900      	cmp	r1, #0
1000032a:	d005      	beq.n	10000338 <divmod_s32s32_unsafe+0x14>
1000032c:	e7ff      	b.n	1000032e <divmod_s32s32_unsafe+0xa>
1000032e:	e7ff      	b.n	10000330 <divmod_s32s32_unsafe+0xc>
10000330:	e7ff      	b.n	10000332 <divmod_s32s32_unsafe+0xe>
10000332:	6f51      	ldr	r1, [r2, #116]	; 0x74
10000334:	6f10      	ldr	r0, [r2, #112]	; 0x70
10000336:	4770      	bx	lr
10000338:	b504      	push	{r2, lr}
1000033a:	2180      	movs	r1, #128	; 0x80
1000033c:	0609      	lsls	r1, r1, #24
1000033e:	17c2      	asrs	r2, r0, #31
10000340:	4051      	eors	r1, r2
10000342:	2800      	cmp	r0, #0
10000344:	d000      	beq.n	10000348 <divmod_s32s32_unsafe+0x24>
10000346:	43c8      	mvns	r0, r1
10000348:	f004 fbd2 	bl	10004af0 <____aeabi_idiv0_veneer>
1000034c:	2100      	movs	r1, #0
1000034e:	bd04      	pop	{r2, pc}

10000350 <divmod_s32s32_savestate>:
10000350:	6f93      	ldr	r3, [r2, #120]	; 0x78
10000352:	085b      	lsrs	r3, r3, #1
10000354:	d3fd      	bcc.n	10000352 <divmod_s32s32_savestate+0x2>
10000356:	b5f0      	push	{r4, r5, r6, r7, lr}
10000358:	6e94      	ldr	r4, [r2, #104]	; 0x68
1000035a:	6ed5      	ldr	r5, [r2, #108]	; 0x6c
1000035c:	6f57      	ldr	r7, [r2, #116]	; 0x74
1000035e:	6f16      	ldr	r6, [r2, #112]	; 0x70
10000360:	f7ff ffe0 	bl	10000324 <divmod_s32s32_unsafe>
10000364:	6694      	str	r4, [r2, #104]	; 0x68
10000366:	66d5      	str	r5, [r2, #108]	; 0x6c
10000368:	6757      	str	r7, [r2, #116]	; 0x74
1000036a:	6716      	str	r6, [r2, #112]	; 0x70
1000036c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000036e:	0000      	.short	0x0000
10000370:	d0000000 	.word	0xd0000000

10000374 <__wrap___aeabi_uidiv>:
10000374:	4a13      	ldr	r2, [pc, #76]	; (100003c4 <divmod_u32u32_savestate+0x20>)
10000376:	6f93      	ldr	r3, [r2, #120]	; 0x78
10000378:	089b      	lsrs	r3, r3, #2
1000037a:	d213      	bcs.n	100003a4 <divmod_u32u32_savestate>

1000037c <divmod_u32u32_unsafe>:
1000037c:	6610      	str	r0, [r2, #96]	; 0x60
1000037e:	6651      	str	r1, [r2, #100]	; 0x64
10000380:	2900      	cmp	r1, #0
10000382:	d005      	beq.n	10000390 <divmod_u32u32_unsafe+0x14>
10000384:	e7ff      	b.n	10000386 <divmod_u32u32_unsafe+0xa>
10000386:	e7ff      	b.n	10000388 <divmod_u32u32_unsafe+0xc>
10000388:	e7ff      	b.n	1000038a <divmod_u32u32_unsafe+0xe>
1000038a:	6f51      	ldr	r1, [r2, #116]	; 0x74
1000038c:	6f10      	ldr	r0, [r2, #112]	; 0x70
1000038e:	4770      	bx	lr
10000390:	b504      	push	{r2, lr}
10000392:	2800      	cmp	r0, #0
10000394:	d001      	beq.n	1000039a <divmod_u32u32_unsafe+0x1e>
10000396:	2000      	movs	r0, #0
10000398:	43c0      	mvns	r0, r0
1000039a:	f004 fba9 	bl	10004af0 <____aeabi_idiv0_veneer>
1000039e:	2100      	movs	r1, #0
100003a0:	bd04      	pop	{r2, pc}
100003a2:	46c0      	nop			; (mov r8, r8)

100003a4 <divmod_u32u32_savestate>:
100003a4:	6f93      	ldr	r3, [r2, #120]	; 0x78
100003a6:	085b      	lsrs	r3, r3, #1
100003a8:	d3fd      	bcc.n	100003a6 <divmod_u32u32_savestate+0x2>
100003aa:	b5f0      	push	{r4, r5, r6, r7, lr}
100003ac:	6e94      	ldr	r4, [r2, #104]	; 0x68
100003ae:	6ed5      	ldr	r5, [r2, #108]	; 0x6c
100003b0:	6f57      	ldr	r7, [r2, #116]	; 0x74
100003b2:	6f16      	ldr	r6, [r2, #112]	; 0x70
100003b4:	f7ff ffe2 	bl	1000037c <divmod_u32u32_unsafe>
100003b8:	6694      	str	r4, [r2, #104]	; 0x68
100003ba:	66d5      	str	r5, [r2, #108]	; 0x6c
100003bc:	6757      	str	r7, [r2, #116]	; 0x74
100003be:	6716      	str	r6, [r2, #112]	; 0x70
100003c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
100003c2:	0000      	.short	0x0000
100003c4:	d0000000 	.word	0xd0000000

100003c8 <__wrap___aeabi_ldivmod>:
100003c8:	4694      	mov	ip, r2
100003ca:	4a4e      	ldr	r2, [pc, #312]	; (10000504 <udiv0+0x1a>)
100003cc:	6f92      	ldr	r2, [r2, #120]	; 0x78
100003ce:	0892      	lsrs	r2, r2, #2
100003d0:	4662      	mov	r2, ip
100003d2:	d201      	bcs.n	100003d8 <divmod_s64s64_savestate>
100003d4:	e030      	b.n	10000438 <divmod_s64s64_unsafe>
100003d6:	46c0      	nop			; (mov r8, r8)

100003d8 <divmod_s64s64_savestate>:
100003d8:	b5f0      	push	{r4, r5, r6, r7, lr}
100003da:	4e4a      	ldr	r6, [pc, #296]	; (10000504 <udiv0+0x1a>)
100003dc:	6fb5      	ldr	r5, [r6, #120]	; 0x78
100003de:	086d      	lsrs	r5, r5, #1
100003e0:	d3fc      	bcc.n	100003dc <divmod_s64s64_savestate+0x4>
100003e2:	6e34      	ldr	r4, [r6, #96]	; 0x60
100003e4:	6e75      	ldr	r5, [r6, #100]	; 0x64
100003e6:	6f77      	ldr	r7, [r6, #116]	; 0x74
100003e8:	6f36      	ldr	r6, [r6, #112]	; 0x70
100003ea:	f000 f825 	bl	10000438 <divmod_s64s64_unsafe>
100003ee:	4694      	mov	ip, r2
100003f0:	4a44      	ldr	r2, [pc, #272]	; (10000504 <udiv0+0x1a>)
100003f2:	6614      	str	r4, [r2, #96]	; 0x60
100003f4:	6655      	str	r5, [r2, #100]	; 0x64
100003f6:	6757      	str	r7, [r2, #116]	; 0x74
100003f8:	6716      	str	r6, [r2, #112]	; 0x70
100003fa:	4662      	mov	r2, ip
100003fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
100003fe:	46c0      	nop			; (mov r8, r8)

10000400 <__wrap___aeabi_uldivmod>:
10000400:	4694      	mov	ip, r2
10000402:	4a40      	ldr	r2, [pc, #256]	; (10000504 <udiv0+0x1a>)
10000404:	6f92      	ldr	r2, [r2, #120]	; 0x78
10000406:	0892      	lsrs	r2, r2, #2
10000408:	4662      	mov	r2, ip
1000040a:	d201      	bcs.n	10000410 <divmod_u64u64_savestate>
1000040c:	e058      	b.n	100004c0 <divmod_u64u64_unsafe>
1000040e:	46c0      	nop			; (mov r8, r8)

10000410 <divmod_u64u64_savestate>:
10000410:	b5f0      	push	{r4, r5, r6, r7, lr}
10000412:	4e3c      	ldr	r6, [pc, #240]	; (10000504 <udiv0+0x1a>)
10000414:	6fb5      	ldr	r5, [r6, #120]	; 0x78
10000416:	086d      	lsrs	r5, r5, #1
10000418:	d3fc      	bcc.n	10000414 <divmod_u64u64_savestate+0x4>
1000041a:	6e34      	ldr	r4, [r6, #96]	; 0x60
1000041c:	6e75      	ldr	r5, [r6, #100]	; 0x64
1000041e:	6f77      	ldr	r7, [r6, #116]	; 0x74
10000420:	6f36      	ldr	r6, [r6, #112]	; 0x70
10000422:	f000 f84d 	bl	100004c0 <divmod_u64u64_unsafe>
10000426:	4694      	mov	ip, r2
10000428:	4a36      	ldr	r2, [pc, #216]	; (10000504 <udiv0+0x1a>)
1000042a:	6614      	str	r4, [r2, #96]	; 0x60
1000042c:	6655      	str	r5, [r2, #100]	; 0x64
1000042e:	6757      	str	r7, [r2, #116]	; 0x74
10000430:	6716      	str	r6, [r2, #112]	; 0x70
10000432:	4662      	mov	r2, ip
10000434:	bdf0      	pop	{r4, r5, r6, r7, pc}
10000436:	46c0      	nop			; (mov r8, r8)

10000438 <divmod_s64s64_unsafe>:
10000438:	2b00      	cmp	r3, #0
1000043a:	db24      	blt.n	10000486 <l41_1+0x26>
1000043c:	d011      	beq.n	10000462 <l41_1+0x2>
1000043e:	2900      	cmp	r1, #0
10000440:	da3e      	bge.n	100004c0 <divmod_u64u64_unsafe>
10000442:	b500      	push	{lr}
10000444:	43c9      	mvns	r1, r1
10000446:	4240      	negs	r0, r0
10000448:	d100      	bne.n	1000044c <l39_1>
1000044a:	3101      	adds	r1, #1

1000044c <l39_1>:
1000044c:	f000 f838 	bl	100004c0 <divmod_u64u64_unsafe>
10000450:	43c9      	mvns	r1, r1
10000452:	4240      	negs	r0, r0
10000454:	d100      	bne.n	10000458 <l40_1>
10000456:	3101      	adds	r1, #1

10000458 <l40_1>:
10000458:	43db      	mvns	r3, r3
1000045a:	4252      	negs	r2, r2
1000045c:	d100      	bne.n	10000460 <l41_1>
1000045e:	3301      	adds	r3, #1

10000460 <l41_1>:
10000460:	bd00      	pop	{pc}
10000462:	2a00      	cmp	r2, #0
10000464:	d1eb      	bne.n	1000043e <divmod_s64s64_unsafe+0x6>
10000466:	2800      	cmp	r0, #0
10000468:	d101      	bne.n	1000046e <l41_1+0xe>
1000046a:	2900      	cmp	r1, #0
1000046c:	d005      	beq.n	1000047a <l41_1+0x1a>
1000046e:	2000      	movs	r0, #0
10000470:	0fc9      	lsrs	r1, r1, #31
10000472:	07c9      	lsls	r1, r1, #31
10000474:	d101      	bne.n	1000047a <l41_1+0x1a>
10000476:	43c0      	mvns	r0, r0
10000478:	0841      	lsrs	r1, r0, #1
1000047a:	b500      	push	{lr}
1000047c:	f004 fb30 	bl	10004ae0 <____aeabi_ldiv0_veneer>
10000480:	2200      	movs	r2, #0
10000482:	2300      	movs	r3, #0
10000484:	bd00      	pop	{pc}
10000486:	b500      	push	{lr}
10000488:	2900      	cmp	r1, #0
1000048a:	db0a      	blt.n	100004a2 <l43_1+0x2>
1000048c:	43db      	mvns	r3, r3
1000048e:	4252      	negs	r2, r2
10000490:	d100      	bne.n	10000494 <l42_1>
10000492:	3301      	adds	r3, #1

10000494 <l42_1>:
10000494:	f000 f814 	bl	100004c0 <divmod_u64u64_unsafe>
10000498:	43c9      	mvns	r1, r1
1000049a:	4240      	negs	r0, r0
1000049c:	d100      	bne.n	100004a0 <l43_1>
1000049e:	3101      	adds	r1, #1

100004a0 <l43_1>:
100004a0:	bd00      	pop	{pc}
100004a2:	43c9      	mvns	r1, r1
100004a4:	4240      	negs	r0, r0
100004a6:	d100      	bne.n	100004aa <l44_1>
100004a8:	3101      	adds	r1, #1

100004aa <l44_1>:
100004aa:	43db      	mvns	r3, r3
100004ac:	4252      	negs	r2, r2
100004ae:	d100      	bne.n	100004b2 <l45_1>
100004b0:	3301      	adds	r3, #1

100004b2 <l45_1>:
100004b2:	f000 f805 	bl	100004c0 <divmod_u64u64_unsafe>
100004b6:	43db      	mvns	r3, r3
100004b8:	4252      	negs	r2, r2
100004ba:	d100      	bne.n	100004be <l46_1>
100004bc:	3301      	adds	r3, #1

100004be <l46_1>:
100004be:	bd00      	pop	{pc}

100004c0 <divmod_u64u64_unsafe>:
100004c0:	2900      	cmp	r1, #0
100004c2:	d123      	bne.n	1000050c <y64>
100004c4:	2b00      	cmp	r3, #0
100004c6:	d118      	bne.n	100004fa <udiv0+0x10>
100004c8:	2a00      	cmp	r2, #0
100004ca:	d00c      	beq.n	100004e6 <divmod_u64u64_unsafe+0x26>
100004cc:	46bc      	mov	ip, r7
100004ce:	4f0d      	ldr	r7, [pc, #52]	; (10000504 <udiv0+0x1a>)
100004d0:	6638      	str	r0, [r7, #96]	; 0x60
100004d2:	667a      	str	r2, [r7, #100]	; 0x64
100004d4:	2100      	movs	r1, #0
100004d6:	2300      	movs	r3, #0
100004d8:	e7ff      	b.n	100004da <divmod_u64u64_unsafe+0x1a>
100004da:	e7ff      	b.n	100004dc <divmod_u64u64_unsafe+0x1c>
100004dc:	e7ff      	b.n	100004de <divmod_u64u64_unsafe+0x1e>
100004de:	6f7a      	ldr	r2, [r7, #116]	; 0x74
100004e0:	6f38      	ldr	r0, [r7, #112]	; 0x70
100004e2:	4667      	mov	r7, ip
100004e4:	4770      	bx	lr
100004e6:	2800      	cmp	r0, #0
100004e8:	d001      	beq.n	100004ee <udiv0+0x4>

100004ea <udiv0>:
100004ea:	4807      	ldr	r0, [pc, #28]	; (10000508 <udiv0+0x1e>)
100004ec:	0001      	movs	r1, r0
100004ee:	b500      	push	{lr}
100004f0:	f004 faf6 	bl	10004ae0 <____aeabi_ldiv0_veneer>
100004f4:	2200      	movs	r2, #0
100004f6:	2300      	movs	r3, #0
100004f8:	bd00      	pop	{pc}
100004fa:	0002      	movs	r2, r0
100004fc:	000b      	movs	r3, r1
100004fe:	2000      	movs	r0, #0
10000500:	2100      	movs	r1, #0
10000502:	4770      	bx	lr
10000504:	d0000000 	.word	0xd0000000
10000508:	ffffffff 	.word	0xffffffff

1000050c <y64>:
1000050c:	2b00      	cmp	r3, #0
1000050e:	d000      	beq.n	10000512 <y64+0x6>
10000510:	e0bd      	b.n	1000068e <y64_x48>
10000512:	0c13      	lsrs	r3, r2, #16
10000514:	d126      	bne.n	10000564 <y64_x32>
10000516:	2a00      	cmp	r2, #0
10000518:	d0e7      	beq.n	100004ea <udiv0>
1000051a:	b480      	push	{r7}
1000051c:	4f10      	ldr	r7, [pc, #64]	; (10000560 <y64+0x54>)
1000051e:	6639      	str	r1, [r7, #96]	; 0x60
10000520:	667a      	str	r2, [r7, #100]	; 0x64
10000522:	e7ff      	b.n	10000524 <y64+0x18>
10000524:	e7ff      	b.n	10000526 <y64+0x1a>
10000526:	b430      	push	{r4, r5}
10000528:	0c04      	lsrs	r4, r0, #16
1000052a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
1000052c:	6f39      	ldr	r1, [r7, #112]	; 0x70
1000052e:	041b      	lsls	r3, r3, #16
10000530:	4323      	orrs	r3, r4
10000532:	663b      	str	r3, [r7, #96]	; 0x60
10000534:	e7ff      	b.n	10000536 <y64+0x2a>
10000536:	e7ff      	b.n	10000538 <y64+0x2c>
10000538:	e7ff      	b.n	1000053a <y64+0x2e>
1000053a:	46c0      	nop			; (mov r8, r8)
1000053c:	b284      	uxth	r4, r0
1000053e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
10000540:	6f3d      	ldr	r5, [r7, #112]	; 0x70
10000542:	041b      	lsls	r3, r3, #16
10000544:	4323      	orrs	r3, r4
10000546:	663b      	str	r3, [r7, #96]	; 0x60
10000548:	e7ff      	b.n	1000054a <y64+0x3e>
1000054a:	e7ff      	b.n	1000054c <y64+0x40>
1000054c:	46c0      	nop			; (mov r8, r8)
1000054e:	2300      	movs	r3, #0
10000550:	042c      	lsls	r4, r5, #16
10000552:	0c2d      	lsrs	r5, r5, #16
10000554:	6f7a      	ldr	r2, [r7, #116]	; 0x74
10000556:	6f38      	ldr	r0, [r7, #112]	; 0x70
10000558:	1900      	adds	r0, r0, r4
1000055a:	4169      	adcs	r1, r5
1000055c:	bcb0      	pop	{r4, r5, r7}
1000055e:	4770      	bx	lr
10000560:	d0000000 	.word	0xd0000000

10000564 <y64_x32>:
10000564:	b5f0      	push	{r4, r5, r6, r7, lr}
10000566:	4694      	mov	ip, r2
10000568:	2500      	movs	r5, #0
1000056a:	0e14      	lsrs	r4, r2, #24
1000056c:	d101      	bne.n	10000572 <y64_x32+0xe>
1000056e:	0212      	lsls	r2, r2, #8
10000570:	3508      	adds	r5, #8
10000572:	0f14      	lsrs	r4, r2, #28
10000574:	d101      	bne.n	1000057a <y64_x32+0x16>
10000576:	0112      	lsls	r2, r2, #4
10000578:	3504      	adds	r5, #4
1000057a:	0f94      	lsrs	r4, r2, #30
1000057c:	d101      	bne.n	10000582 <y64_x32+0x1e>
1000057e:	0092      	lsls	r2, r2, #2
10000580:	3502      	adds	r5, #2
10000582:	0fd4      	lsrs	r4, r2, #31
10000584:	d101      	bne.n	1000058a <y64_x32+0x26>
10000586:	0052      	lsls	r2, r2, #1
10000588:	3501      	adds	r5, #1
1000058a:	0bd4      	lsrs	r4, r2, #15
1000058c:	3401      	adds	r4, #1
1000058e:	4f25      	ldr	r7, [pc, #148]	; (10000624 <y64_x32+0xc0>)
10000590:	667c      	str	r4, [r7, #100]	; 0x64
10000592:	4c25      	ldr	r4, [pc, #148]	; (10000628 <y64_x32+0xc4>)
10000594:	663c      	str	r4, [r7, #96]	; 0x60
10000596:	0c0e      	lsrs	r6, r1, #16
10000598:	b293      	uxth	r3, r2
1000059a:	e7ff      	b.n	1000059c <y64_x32+0x38>
1000059c:	e7ff      	b.n	1000059e <y64_x32+0x3a>
1000059e:	e7ff      	b.n	100005a0 <y64_x32+0x3c>
100005a0:	6f3c      	ldr	r4, [r7, #112]	; 0x70
100005a2:	4366      	muls	r6, r4
100005a4:	0c36      	lsrs	r6, r6, #16
100005a6:	0377      	lsls	r7, r6, #13
100005a8:	46be      	mov	lr, r7
100005aa:	4373      	muls	r3, r6
100005ac:	0bdf      	lsrs	r7, r3, #15
100005ae:	045b      	lsls	r3, r3, #17
100005b0:	1ac0      	subs	r0, r0, r3
100005b2:	41b9      	sbcs	r1, r7
100005b4:	0c13      	lsrs	r3, r2, #16
100005b6:	4373      	muls	r3, r6
100005b8:	18db      	adds	r3, r3, r3
100005ba:	1ac9      	subs	r1, r1, r3
100005bc:	08ce      	lsrs	r6, r1, #3
100005be:	4366      	muls	r6, r4
100005c0:	0c36      	lsrs	r6, r6, #16
100005c2:	44b6      	add	lr, r6
100005c4:	b293      	uxth	r3, r2
100005c6:	4373      	muls	r3, r6
100005c8:	0f1f      	lsrs	r7, r3, #28
100005ca:	011b      	lsls	r3, r3, #4
100005cc:	1ac0      	subs	r0, r0, r3
100005ce:	41b9      	sbcs	r1, r7
100005d0:	0c13      	lsrs	r3, r2, #16
100005d2:	4373      	muls	r3, r6
100005d4:	0b1f      	lsrs	r7, r3, #12
100005d6:	051b      	lsls	r3, r3, #20
100005d8:	1ac0      	subs	r0, r0, r3
100005da:	41b9      	sbcs	r1, r7
100005dc:	0d86      	lsrs	r6, r0, #22
100005de:	028f      	lsls	r7, r1, #10
100005e0:	433e      	orrs	r6, r7
100005e2:	4366      	muls	r6, r4
100005e4:	0c36      	lsrs	r6, r6, #16
100005e6:	2d09      	cmp	r5, #9
100005e8:	db24      	blt.n	10000634 <last0>
100005ea:	0a52      	lsrs	r2, r2, #9
100005ec:	4372      	muls	r2, r6
100005ee:	1a80      	subs	r0, r0, r2
100005f0:	0377      	lsls	r7, r6, #13
100005f2:	0a46      	lsrs	r6, r0, #9
100005f4:	4366      	muls	r6, r4
100005f6:	0c36      	lsrs	r6, r6, #16
100005f8:	2316      	movs	r3, #22
100005fa:	1b5b      	subs	r3, r3, r5
100005fc:	40de      	lsrs	r6, r3
100005fe:	40df      	lsrs	r7, r3
10000600:	19bf      	adds	r7, r7, r6
10000602:	4664      	mov	r4, ip
10000604:	4366      	muls	r6, r4
10000606:	1b82      	subs	r2, r0, r6
10000608:	4670      	mov	r0, lr
1000060a:	3504      	adds	r5, #4
1000060c:	3306      	adds	r3, #6
1000060e:	0001      	movs	r1, r0
10000610:	40d9      	lsrs	r1, r3
10000612:	40a8      	lsls	r0, r5
10000614:	19c0      	adds	r0, r0, r7
10000616:	d300      	bcc.n	1000061a <y64_x32+0xb6>
10000618:	3101      	adds	r1, #1
1000061a:	42a2      	cmp	r2, r4
1000061c:	d206      	bcs.n	1000062c <y64_x32+0xc8>
1000061e:	2300      	movs	r3, #0
10000620:	bdf0      	pop	{r4, r5, r6, r7, pc}
10000622:	0000      	.short	0x0000
10000624:	d0000000 	.word	0xd0000000
10000628:	ffffffff 	.word	0xffffffff
1000062c:	1b12      	subs	r2, r2, r4
1000062e:	3001      	adds	r0, #1
10000630:	d3f3      	bcc.n	1000061a <y64_x32+0xb6>
10000632:	e7f1      	b.n	10000618 <y64_x32+0xb4>

10000634 <last0>:
10000634:	2709      	movs	r7, #9
10000636:	1b7f      	subs	r7, r7, r5
10000638:	40fe      	lsrs	r6, r7
1000063a:	4664      	mov	r4, ip
1000063c:	b2a2      	uxth	r2, r4
1000063e:	4372      	muls	r2, r6
10000640:	1a80      	subs	r0, r0, r2
10000642:	d200      	bcs.n	10000646 <last0+0x12>
10000644:	3901      	subs	r1, #1
10000646:	0c22      	lsrs	r2, r4, #16
10000648:	4372      	muls	r2, r6
1000064a:	0c13      	lsrs	r3, r2, #16
1000064c:	0412      	lsls	r2, r2, #16
1000064e:	1a82      	subs	r2, r0, r2
10000650:	4199      	sbcs	r1, r3
10000652:	000b      	movs	r3, r1
10000654:	4670      	mov	r0, lr
10000656:	3504      	adds	r5, #4
10000658:	3713      	adds	r7, #19
1000065a:	0001      	movs	r1, r0
1000065c:	40f9      	lsrs	r1, r7
1000065e:	40a8      	lsls	r0, r5
10000660:	1980      	adds	r0, r0, r6
10000662:	d300      	bcc.n	10000666 <last0+0x32>
10000664:	3101      	adds	r1, #1
10000666:	2b00      	cmp	r3, #0
10000668:	d102      	bne.n	10000670 <last0+0x3c>
1000066a:	42a2      	cmp	r2, r4
1000066c:	d20a      	bcs.n	10000684 <last0+0x50>
1000066e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10000670:	3001      	adds	r0, #1
10000672:	d300      	bcc.n	10000676 <last0+0x42>
10000674:	3101      	adds	r1, #1
10000676:	1b12      	subs	r2, r2, r4
10000678:	d2fa      	bcs.n	10000670 <last0+0x3c>
1000067a:	3b01      	subs	r3, #1
1000067c:	d1f8      	bne.n	10000670 <last0+0x3c>
1000067e:	42a2      	cmp	r2, r4
10000680:	d200      	bcs.n	10000684 <last0+0x50>
10000682:	bdf0      	pop	{r4, r5, r6, r7, pc}
10000684:	3001      	adds	r0, #1
10000686:	d300      	bcc.n	1000068a <last0+0x56>
10000688:	3101      	adds	r1, #1
1000068a:	1b12      	subs	r2, r2, r4
1000068c:	e7f7      	b.n	1000067e <last0+0x4a>

1000068e <y64_x48>:
1000068e:	b5f0      	push	{r4, r5, r6, r7, lr}
10000690:	0c1c      	lsrs	r4, r3, #16
10000692:	d000      	beq.n	10000696 <y64_x48+0x8>
10000694:	e080      	b.n	10000798 <y64_x64>
10000696:	b40c      	push	{r2, r3}
10000698:	2500      	movs	r5, #0
1000069a:	0a1c      	lsrs	r4, r3, #8
1000069c:	d104      	bne.n	100006a8 <y64_x48+0x1a>
1000069e:	021b      	lsls	r3, r3, #8
100006a0:	0e16      	lsrs	r6, r2, #24
100006a2:	4333      	orrs	r3, r6
100006a4:	0212      	lsls	r2, r2, #8
100006a6:	3508      	adds	r5, #8
100006a8:	0b1c      	lsrs	r4, r3, #12
100006aa:	d104      	bne.n	100006b6 <y64_x48+0x28>
100006ac:	011b      	lsls	r3, r3, #4
100006ae:	0f16      	lsrs	r6, r2, #28
100006b0:	4333      	orrs	r3, r6
100006b2:	0112      	lsls	r2, r2, #4
100006b4:	3504      	adds	r5, #4
100006b6:	0b9c      	lsrs	r4, r3, #14
100006b8:	d104      	bne.n	100006c4 <y64_x48+0x36>
100006ba:	009b      	lsls	r3, r3, #2
100006bc:	0f96      	lsrs	r6, r2, #30
100006be:	4333      	orrs	r3, r6
100006c0:	0092      	lsls	r2, r2, #2
100006c2:	3502      	adds	r5, #2
100006c4:	0bdc      	lsrs	r4, r3, #15
100006c6:	d102      	bne.n	100006ce <y64_x48+0x40>
100006c8:	1892      	adds	r2, r2, r2
100006ca:	415b      	adcs	r3, r3
100006cc:	3501      	adds	r5, #1
100006ce:	001c      	movs	r4, r3
100006d0:	1897      	adds	r7, r2, r2
100006d2:	4164      	adcs	r4, r4
100006d4:	3401      	adds	r4, #1
100006d6:	4f46      	ldr	r7, [pc, #280]	; (100007f0 <y64_x64+0x58>)
100006d8:	667c      	str	r4, [r7, #100]	; 0x64
100006da:	4c46      	ldr	r4, [pc, #280]	; (100007f4 <y64_x64+0x5c>)
100006dc:	663c      	str	r4, [r7, #96]	; 0x60
100006de:	0c0e      	lsrs	r6, r1, #16
100006e0:	e7ff      	b.n	100006e2 <y64_x48+0x54>
100006e2:	e7ff      	b.n	100006e4 <y64_x48+0x56>
100006e4:	e7ff      	b.n	100006e6 <y64_x48+0x58>
100006e6:	46c0      	nop			; (mov r8, r8)
100006e8:	6f3c      	ldr	r4, [r7, #112]	; 0x70
100006ea:	4366      	muls	r6, r4
100006ec:	0c36      	lsrs	r6, r6, #16
100006ee:	0377      	lsls	r7, r6, #13
100006f0:	46be      	mov	lr, r7
100006f2:	b297      	uxth	r7, r2
100006f4:	4377      	muls	r7, r6
100006f6:	1bc0      	subs	r0, r0, r7
100006f8:	d200      	bcs.n	100006fc <y64_x48+0x6e>
100006fa:	3901      	subs	r1, #1
100006fc:	1bc0      	subs	r0, r0, r7
100006fe:	d200      	bcs.n	10000702 <y64_x48+0x74>
10000700:	3901      	subs	r1, #1
10000702:	b29f      	uxth	r7, r3
10000704:	4377      	muls	r7, r6
10000706:	1bc9      	subs	r1, r1, r7
10000708:	1bc9      	subs	r1, r1, r7
1000070a:	0c17      	lsrs	r7, r2, #16
1000070c:	4377      	muls	r7, r6
1000070e:	047e      	lsls	r6, r7, #17
10000710:	0bff      	lsrs	r7, r7, #15
10000712:	1b80      	subs	r0, r0, r6
10000714:	41b9      	sbcs	r1, r7
10000716:	08ce      	lsrs	r6, r1, #3
10000718:	4366      	muls	r6, r4
1000071a:	0c36      	lsrs	r6, r6, #16
1000071c:	2d0c      	cmp	r5, #12
1000071e:	db33      	blt.n	10000788 <last1>
10000720:	44b6      	add	lr, r6
10000722:	0b12      	lsrs	r2, r2, #12
10000724:	051f      	lsls	r7, r3, #20
10000726:	433a      	orrs	r2, r7
10000728:	0b1b      	lsrs	r3, r3, #12
1000072a:	b297      	uxth	r7, r2
1000072c:	4377      	muls	r7, r6
1000072e:	1bc0      	subs	r0, r0, r7
10000730:	d200      	bcs.n	10000734 <y64_x48+0xa6>
10000732:	3901      	subs	r1, #1
10000734:	b29f      	uxth	r7, r3
10000736:	4377      	muls	r7, r6
10000738:	1bc9      	subs	r1, r1, r7
1000073a:	0c17      	lsrs	r7, r2, #16
1000073c:	4377      	muls	r7, r6
1000073e:	043e      	lsls	r6, r7, #16
10000740:	0c3f      	lsrs	r7, r7, #16
10000742:	1b80      	subs	r0, r0, r6
10000744:	41b9      	sbcs	r1, r7
10000746:	0d86      	lsrs	r6, r0, #22
10000748:	028f      	lsls	r7, r1, #10
1000074a:	433e      	orrs	r6, r7
1000074c:	4366      	muls	r6, r4
1000074e:	2729      	movs	r7, #41	; 0x29
10000750:	1b7f      	subs	r7, r7, r5
10000752:	40fe      	lsrs	r6, r7
10000754:	3d0c      	subs	r5, #12
10000756:	4677      	mov	r7, lr
10000758:	40af      	lsls	r7, r5
1000075a:	19bf      	adds	r7, r7, r6
1000075c:	bc30      	pop	{r4, r5}
1000075e:	b2a2      	uxth	r2, r4
10000760:	b2ab      	uxth	r3, r5
10000762:	4372      	muls	r2, r6
10000764:	4373      	muls	r3, r6
10000766:	1a80      	subs	r0, r0, r2
10000768:	4199      	sbcs	r1, r3
1000076a:	0c22      	lsrs	r2, r4, #16
1000076c:	4372      	muls	r2, r6
1000076e:	0c13      	lsrs	r3, r2, #16
10000770:	0412      	lsls	r2, r2, #16
10000772:	1a80      	subs	r0, r0, r2
10000774:	4199      	sbcs	r1, r3
10000776:	0002      	movs	r2, r0
10000778:	000b      	movs	r3, r1
1000077a:	3701      	adds	r7, #1
1000077c:	1b00      	subs	r0, r0, r4
1000077e:	41a9      	sbcs	r1, r5
10000780:	d2f9      	bcs.n	10000776 <y64_x48+0xe8>
10000782:	1e78      	subs	r0, r7, #1
10000784:	2100      	movs	r1, #0
10000786:	bdf0      	pop	{r4, r5, r6, r7, pc}

10000788 <last1>:
10000788:	270c      	movs	r7, #12
1000078a:	1b7f      	subs	r7, r7, r5
1000078c:	40fe      	lsrs	r6, r7
1000078e:	4677      	mov	r7, lr
10000790:	0b7f      	lsrs	r7, r7, #13
10000792:	40af      	lsls	r7, r5
10000794:	19ff      	adds	r7, r7, r7
10000796:	e7e0      	b.n	1000075a <y64_x48+0xcc>

10000798 <y64_x64>:
10000798:	2400      	movs	r4, #0
1000079a:	1c5d      	adds	r5, r3, #1
1000079c:	d007      	beq.n	100007ae <y64_x64+0x16>
1000079e:	4f14      	ldr	r7, [pc, #80]	; (100007f0 <y64_x64+0x58>)
100007a0:	667d      	str	r5, [r7, #100]	; 0x64
100007a2:	6639      	str	r1, [r7, #96]	; 0x60
100007a4:	e7ff      	b.n	100007a6 <y64_x64+0xe>
100007a6:	e7ff      	b.n	100007a8 <y64_x64+0x10>
100007a8:	e7ff      	b.n	100007aa <y64_x64+0x12>
100007aa:	e7ff      	b.n	100007ac <y64_x64+0x14>
100007ac:	6f3c      	ldr	r4, [r7, #112]	; 0x70
100007ae:	b295      	uxth	r5, r2
100007b0:	b29e      	uxth	r6, r3
100007b2:	4365      	muls	r5, r4
100007b4:	4366      	muls	r6, r4
100007b6:	1b40      	subs	r0, r0, r5
100007b8:	41b1      	sbcs	r1, r6
100007ba:	0c15      	lsrs	r5, r2, #16
100007bc:	0c1e      	lsrs	r6, r3, #16
100007be:	4365      	muls	r5, r4
100007c0:	4366      	muls	r6, r4
100007c2:	0436      	lsls	r6, r6, #16
100007c4:	0c2f      	lsrs	r7, r5, #16
100007c6:	433e      	orrs	r6, r7
100007c8:	042d      	lsls	r5, r5, #16
100007ca:	1b40      	subs	r0, r0, r5
100007cc:	41b1      	sbcs	r1, r6
100007ce:	4299      	cmp	r1, r3
100007d0:	d204      	bcs.n	100007dc <y64_x64+0x44>
100007d2:	0002      	movs	r2, r0
100007d4:	000b      	movs	r3, r1
100007d6:	0020      	movs	r0, r4
100007d8:	2100      	movs	r1, #0
100007da:	bdf0      	pop	{r4, r5, r6, r7, pc}
100007dc:	d101      	bne.n	100007e2 <y64_x64+0x4a>
100007de:	4290      	cmp	r0, r2
100007e0:	d3f7      	bcc.n	100007d2 <y64_x64+0x3a>
100007e2:	1a80      	subs	r0, r0, r2
100007e4:	4199      	sbcs	r1, r3
100007e6:	3401      	adds	r4, #1
100007e8:	4299      	cmp	r1, r3
100007ea:	d3f2      	bcc.n	100007d2 <y64_x64+0x3a>
100007ec:	e7f6      	b.n	100007dc <y64_x64+0x44>
100007ee:	0000      	.short	0x0000
100007f0:	d0000000 	.word	0xd0000000
100007f4:	ffffffff 	.word	0xffffffff

100007f8 <hw_divider_save_state>:
100007f8:	b530      	push	{r4, r5, lr}
100007fa:	4d05      	ldr	r5, [pc, #20]	; (10000810 <hw_divider_save_state+0x18>)
100007fc:	6fac      	ldr	r4, [r5, #120]	; 0x78
100007fe:	0864      	lsrs	r4, r4, #1
10000800:	d3fd      	bcc.n	100007fe <hw_divider_save_state+0x6>
10000802:	6e29      	ldr	r1, [r5, #96]	; 0x60
10000804:	6e6a      	ldr	r2, [r5, #100]	; 0x64
10000806:	6f6b      	ldr	r3, [r5, #116]	; 0x74
10000808:	6f2c      	ldr	r4, [r5, #112]	; 0x70
1000080a:	c01e      	stmia	r0!, {r1, r2, r3, r4}
1000080c:	bd30      	pop	{r4, r5, pc}
1000080e:	0000      	.short	0x0000
10000810:	d0000000 	.word	0xd0000000

10000814 <hw_divider_restore_state>:
10000814:	b530      	push	{r4, r5, lr}
10000816:	4d03      	ldr	r5, [pc, #12]	; (10000824 <hw_divider_restore_state+0x10>)
10000818:	c81e      	ldmia	r0!, {r1, r2, r3, r4}
1000081a:	6629      	str	r1, [r5, #96]	; 0x60
1000081c:	666a      	str	r2, [r5, #100]	; 0x64
1000081e:	676b      	str	r3, [r5, #116]	; 0x74
10000820:	672c      	str	r4, [r5, #112]	; 0x70
10000822:	bd30      	pop	{r4, r5, pc}
10000824:	d0000000 	.word	0xd0000000

10000828 <double_table_shim_on_use_helper>:
10000828:	b507      	push	{r0, r1, r2, lr}
1000082a:	4660      	mov	r0, ip
1000082c:	8801      	ldrh	r1, [r0, #0]
1000082e:	0a0a      	lsrs	r2, r1, #8
10000830:	3002      	adds	r0, #2
10000832:	2adf      	cmp	r2, #223	; 0xdf
10000834:	d1fa      	bne.n	1000082c <double_table_shim_on_use_helper+0x4>
10000836:	b2c9      	uxtb	r1, r1
10000838:	0882      	lsrs	r2, r0, #2
1000083a:	d304      	bcc.n	10000846 <double_table_shim_on_use_helper+0x1e>
1000083c:	8802      	ldrh	r2, [r0, #0]
1000083e:	8840      	ldrh	r0, [r0, #2]
10000840:	0400      	lsls	r0, r0, #16
10000842:	4310      	orrs	r0, r2
10000844:	e000      	b.n	10000848 <double_table_shim_on_use_helper+0x20>
10000846:	6800      	ldr	r0, [r0, #0]
10000848:	4a01      	ldr	r2, [pc, #4]	; (10000850 <double_table_shim_on_use_helper+0x28>)
1000084a:	5050      	str	r0, [r2, r1]
1000084c:	9003      	str	r0, [sp, #12]
1000084e:	bd07      	pop	{r0, r1, r2, pc}
10000850:	20002f50 	.word	0x20002f50

10000854 <__wrap___aeabi_frsub>:
10000854:	4048      	eors	r0, r1
10000856:	4041      	eors	r1, r0
10000858:	4048      	eors	r0, r1

1000085a <__wrap___aeabi_fsub>:
1000085a:	4b06      	ldr	r3, [pc, #24]	; (10000874 <__wrap___aeabi_fmul+0x8>)
1000085c:	685b      	ldr	r3, [r3, #4]
1000085e:	4718      	bx	r3

10000860 <__wrap___aeabi_fadd>:
10000860:	4b04      	ldr	r3, [pc, #16]	; (10000874 <__wrap___aeabi_fmul+0x8>)
10000862:	681b      	ldr	r3, [r3, #0]
10000864:	4718      	bx	r3

10000866 <__wrap___aeabi_fdiv>:
10000866:	4b03      	ldr	r3, [pc, #12]	; (10000874 <__wrap___aeabi_fmul+0x8>)
10000868:	68db      	ldr	r3, [r3, #12]
1000086a:	4718      	bx	r3

1000086c <__wrap___aeabi_fmul>:
1000086c:	4b01      	ldr	r3, [pc, #4]	; (10000874 <__wrap___aeabi_fmul+0x8>)
1000086e:	689b      	ldr	r3, [r3, #8]
10000870:	4718      	bx	r3
10000872:	0000      	.short	0x0000
10000874:	20003050 	.word	0x20003050

10000878 <__wrap___aeabi_ui2f>:
10000878:	1a49      	subs	r1, r1, r1
1000087a:	2800      	cmp	r0, #0
1000087c:	d108      	bne.n	10000890 <__aeabi_i2f_main>
1000087e:	4608      	mov	r0, r1
10000880:	4770      	bx	lr
	...

10000884 <__wrap___aeabi_i2f>:
10000884:	0fc1      	lsrs	r1, r0, #31
10000886:	07c9      	lsls	r1, r1, #31
10000888:	d500      	bpl.n	1000088c <__wrap___aeabi_i2f+0x8>
1000088a:	4240      	negs	r0, r0
1000088c:	2800      	cmp	r0, #0
1000088e:	d017      	beq.n	100008c0 <__aeabi_i2f_main+0x30>

10000890 <__aeabi_i2f_main>:
10000890:	46f4      	mov	ip, lr
10000892:	b403      	push	{r0, r1}
10000894:	4b0b      	ldr	r3, [pc, #44]	; (100008c4 <__aeabi_i2f_main+0x34>)
10000896:	681b      	ldr	r3, [r3, #0]
10000898:	4798      	blx	r3
1000089a:	bc06      	pop	{r1, r2}
1000089c:	4081      	lsls	r1, r0
1000089e:	389e      	subs	r0, #158	; 0x9e
100008a0:	4240      	negs	r0, r0
100008a2:	3180      	adds	r1, #128	; 0x80
100008a4:	d207      	bcs.n	100008b6 <__aeabi_i2f_main+0x26>
100008a6:	060b      	lsls	r3, r1, #24
100008a8:	d007      	beq.n	100008ba <__aeabi_i2f_main+0x2a>
100008aa:	0049      	lsls	r1, r1, #1
100008ac:	0a49      	lsrs	r1, r1, #9
100008ae:	05c0      	lsls	r0, r0, #23
100008b0:	4310      	orrs	r0, r2
100008b2:	4308      	orrs	r0, r1
100008b4:	4760      	bx	ip
100008b6:	3001      	adds	r0, #1
100008b8:	e7f8      	b.n	100008ac <__aeabi_i2f_main+0x1c>
100008ba:	0a49      	lsrs	r1, r1, #9
100008bc:	0289      	lsls	r1, r1, #10
100008be:	e7f5      	b.n	100008ac <__aeabi_i2f_main+0x1c>
100008c0:	4770      	bx	lr
100008c2:	0000      	.short	0x0000
100008c4:	200394c4 	.word	0x200394c4

100008c8 <__wrap___aeabi_f2iz>:
100008c8:	0041      	lsls	r1, r0, #1
100008ca:	0e0a      	lsrs	r2, r1, #24
100008cc:	2380      	movs	r3, #128	; 0x80
100008ce:	061b      	lsls	r3, r3, #24
100008d0:	2a7e      	cmp	r2, #126	; 0x7e
100008d2:	dd0b      	ble.n	100008ec <__wrap___aeabi_f2iz+0x24>
100008d4:	3a9e      	subs	r2, #158	; 0x9e
100008d6:	da0b      	bge.n	100008f0 <__wrap___aeabi_f2iz+0x28>
100008d8:	17c1      	asrs	r1, r0, #31
100008da:	0240      	lsls	r0, r0, #9
100008dc:	0840      	lsrs	r0, r0, #1
100008de:	4318      	orrs	r0, r3
100008e0:	4252      	negs	r2, r2
100008e2:	40d0      	lsrs	r0, r2
100008e4:	0049      	lsls	r1, r1, #1
100008e6:	3101      	adds	r1, #1
100008e8:	4348      	muls	r0, r1
100008ea:	4770      	bx	lr
100008ec:	2000      	movs	r0, #0
100008ee:	4770      	bx	lr
100008f0:	0fc0      	lsrs	r0, r0, #31
100008f2:	18c0      	adds	r0, r0, r3
100008f4:	3801      	subs	r0, #1
100008f6:	4770      	bx	lr
100008f8:	42c0      	cmn	r0, r0
100008fa:	d30d      	bcc.n	10000918 <float2int>
100008fc:	b500      	push	{lr}
100008fe:	0040      	lsls	r0, r0, #1
10000900:	0840      	lsrs	r0, r0, #1
10000902:	2100      	movs	r1, #0
10000904:	f000 f812 	bl	1000092c <__wrap___aeabi_f2uiz>
10000908:	2800      	cmp	r0, #0
1000090a:	d401      	bmi.n	10000910 <__wrap___aeabi_f2iz+0x48>
1000090c:	4240      	negs	r0, r0
1000090e:	bd00      	pop	{pc}
10000910:	2080      	movs	r0, #128	; 0x80
10000912:	0600      	lsls	r0, r0, #24
10000914:	bd00      	pop	{pc}
	...

10000918 <float2int>:
10000918:	4b03      	ldr	r3, [pc, #12]	; (10000928 <float2int+0x10>)
1000091a:	69db      	ldr	r3, [r3, #28]
1000091c:	46fc      	mov	ip, pc
1000091e:	4718      	bx	r3
10000920:	0965df1c 	.word	0x0965df1c
10000924:	00001000 	.word	0x00001000
10000928:	20003050 	.word	0x20003050

1000092c <__wrap___aeabi_f2uiz>:
1000092c:	4b01      	ldr	r3, [pc, #4]	; (10000934 <__wrap___aeabi_f2uiz+0x8>)
1000092e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10000930:	4718      	bx	r3
10000932:	0000      	.short	0x0000
10000934:	20003050 	.word	0x20003050

10000938 <float_table_shim_on_use_helper>:
10000938:	b507      	push	{r0, r1, r2, lr}
1000093a:	4660      	mov	r0, ip
1000093c:	8801      	ldrh	r1, [r0, #0]
1000093e:	0a0a      	lsrs	r2, r1, #8
10000940:	3002      	adds	r0, #2
10000942:	2adf      	cmp	r2, #223	; 0xdf
10000944:	d1fa      	bne.n	1000093c <float_table_shim_on_use_helper+0x4>
10000946:	b2c9      	uxtb	r1, r1
10000948:	0882      	lsrs	r2, r0, #2
1000094a:	d304      	bcc.n	10000956 <float_table_shim_on_use_helper+0x1e>
1000094c:	8802      	ldrh	r2, [r0, #0]
1000094e:	8840      	ldrh	r0, [r0, #2]
10000950:	0400      	lsls	r0, r0, #16
10000952:	4310      	orrs	r0, r2
10000954:	e000      	b.n	10000958 <float_table_shim_on_use_helper+0x20>
10000956:	6800      	ldr	r0, [r0, #0]
10000958:	4a01      	ldr	r2, [pc, #4]	; (10000960 <float_table_shim_on_use_helper+0x28>)
1000095a:	5050      	str	r0, [r2, r1]
1000095c:	9003      	str	r0, [sp, #12]
1000095e:	bd07      	pop	{r0, r1, r2, pc}
10000960:	20003050 	.word	0x20003050

10000964 <float2int_shim>:
10000964:	2100      	movs	r1, #0

10000966 <float2fix_shim>:
10000966:	15c2      	asrs	r2, r0, #23
10000968:	3280      	adds	r2, #128	; 0x80
1000096a:	3280      	adds	r2, #128	; 0x80
1000096c:	d001      	beq.n	10000972 <float2fix_shim+0xc>
1000096e:	4a02      	ldr	r2, [pc, #8]	; (10000978 <float2fix_shim+0x12>)
10000970:	4710      	bx	r2
10000972:	2000      	movs	r0, #0
10000974:	4770      	bx	lr
10000976:	0000      	.short	0x0000
10000978:	00002acd 	.word	0x00002acd

1000097c <__aeabi_mem_init>:
1000097c:	4801      	ldr	r0, [pc, #4]	; (10000984 <__aeabi_mem_init+0x8>)
1000097e:	2104      	movs	r1, #4
10000980:	4b01      	ldr	r3, [pc, #4]	; (10000988 <__aeabi_mem_init+0xc>)
10000982:	4718      	bx	r3
10000984:	20002648 	.word	0x20002648
10000988:	100009c5 	.word	0x100009c5

1000098c <__wrap_memset>:
1000098c:	4b01      	ldr	r3, [pc, #4]	; (10000994 <__wrap_memset+0x8>)
1000098e:	681b      	ldr	r3, [r3, #0]
10000990:	4718      	bx	r3
10000992:	0000      	.short	0x0000
10000994:	20002648 	.word	0x20002648

10000998 <__wrap___aeabi_memcpy>:
10000998:	4b01      	ldr	r3, [pc, #4]	; (100009a0 <__wrap___aeabi_memcpy+0x8>)
1000099a:	685b      	ldr	r3, [r3, #4]
1000099c:	4718      	bx	r3
1000099e:	0000      	.short	0x0000
100009a0:	20002648 	.word	0x20002648

100009a4 <rom_func_lookup>:
// Convert a 16 bit pointer stored at the given rom address into a 32 bit pointer
#define rom_hword_as_ptr(rom_address) (void *)(uintptr_t)(*(uint16_t *)rom_address)

void *rom_func_lookup(uint32_t code) {
    rom_table_lookup_fn rom_table_lookup = (rom_table_lookup_fn) rom_hword_as_ptr(0x18);
    uint16_t *func_table = (uint16_t *) rom_hword_as_ptr(0x14);
100009a4:	2314      	movs	r3, #20
void *rom_func_lookup(uint32_t code) {
100009a6:	b510      	push	{r4, lr}
100009a8:	0001      	movs	r1, r0
    uint16_t *func_table = (uint16_t *) rom_hword_as_ptr(0x14);
100009aa:	8818      	ldrh	r0, [r3, #0]
    rom_table_lookup_fn rom_table_lookup = (rom_table_lookup_fn) rom_hword_as_ptr(0x18);
100009ac:	3304      	adds	r3, #4
100009ae:	881b      	ldrh	r3, [r3, #0]
    return rom_table_lookup(func_table, code);
100009b0:	4798      	blx	r3
}
100009b2:	bd10      	pop	{r4, pc}

100009b4 <rom_data_lookup>:

void *rom_data_lookup(uint32_t code) {
    rom_table_lookup_fn rom_table_lookup = (rom_table_lookup_fn) rom_hword_as_ptr(0x18);
    uint16_t *data_table = (uint16_t *) rom_hword_as_ptr(0x16);
100009b4:	2316      	movs	r3, #22
void *rom_data_lookup(uint32_t code) {
100009b6:	b510      	push	{r4, lr}
100009b8:	0001      	movs	r1, r0
    uint16_t *data_table = (uint16_t *) rom_hword_as_ptr(0x16);
100009ba:	8818      	ldrh	r0, [r3, #0]
    rom_table_lookup_fn rom_table_lookup = (rom_table_lookup_fn) rom_hword_as_ptr(0x18);
100009bc:	3302      	adds	r3, #2
100009be:	881b      	ldrh	r3, [r3, #0]
    return rom_table_lookup(data_table, code);
100009c0:	4798      	blx	r3
}
100009c2:	bd10      	pop	{r4, pc}

100009c4 <rom_funcs_lookup>:
/// \end::table_lookup[]

bool rom_funcs_lookup(uint32_t *table, unsigned int count) {
100009c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100009c6:	4647      	mov	r7, r8
100009c8:	46ce      	mov	lr, r9
100009ca:	b580      	push	{r7, lr}
100009cc:	1e0f      	subs	r7, r1, #0
    bool ok = true;
    for (unsigned int i = 0; i < count; i++) {
100009ce:	d019      	beq.n	10000a04 <rom_funcs_lookup+0x40>
    uint16_t *func_table = (uint16_t *) rom_hword_as_ptr(0x14);
100009d0:	2314      	movs	r3, #20
100009d2:	4699      	mov	r9, r3
    rom_table_lookup_fn rom_table_lookup = (rom_table_lookup_fn) rom_hword_as_ptr(0x18);
100009d4:	3304      	adds	r3, #4
100009d6:	0004      	movs	r4, r0
    for (unsigned int i = 0; i < count; i++) {
100009d8:	2500      	movs	r5, #0
    bool ok = true;
100009da:	2601      	movs	r6, #1
    rom_table_lookup_fn rom_table_lookup = (rom_table_lookup_fn) rom_hword_as_ptr(0x18);
100009dc:	4698      	mov	r8, r3
    uint16_t *func_table = (uint16_t *) rom_hword_as_ptr(0x14);
100009de:	464b      	mov	r3, r9
100009e0:	8818      	ldrh	r0, [r3, #0]
    rom_table_lookup_fn rom_table_lookup = (rom_table_lookup_fn) rom_hword_as_ptr(0x18);
100009e2:	4643      	mov	r3, r8
    return rom_table_lookup(func_table, code);
100009e4:	6821      	ldr	r1, [r4, #0]
    rom_table_lookup_fn rom_table_lookup = (rom_table_lookup_fn) rom_hword_as_ptr(0x18);
100009e6:	881b      	ldrh	r3, [r3, #0]
    return rom_table_lookup(func_table, code);
100009e8:	4798      	blx	r3
        table[i] = (uintptr_t) rom_func_lookup(table[i]);
100009ea:	c401      	stmia	r4!, {r0}
        if (!table[i]) ok = false;
100009ec:	1e43      	subs	r3, r0, #1
100009ee:	4198      	sbcs	r0, r3
    for (unsigned int i = 0; i < count; i++) {
100009f0:	3501      	adds	r5, #1
        if (!table[i]) ok = false;
100009f2:	4240      	negs	r0, r0
100009f4:	4006      	ands	r6, r0
    for (unsigned int i = 0; i < count; i++) {
100009f6:	42af      	cmp	r7, r5
100009f8:	d1f1      	bne.n	100009de <rom_funcs_lookup+0x1a>
    }
    return ok;
}
100009fa:	0030      	movs	r0, r6
100009fc:	bcc0      	pop	{r6, r7}
100009fe:	46b9      	mov	r9, r7
10000a00:	46b0      	mov	r8, r6
10000a02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bool ok = true;
10000a04:	2601      	movs	r6, #1
10000a06:	e7f8      	b.n	100009fa <rom_funcs_lookup+0x36>

10000a08 <hw_claim_lock>:
 *
 * \return The prior interrupt enable status for restoration later via restore_interrupts()
 */
inline static uint32_t save_and_disable_interrupts() {
    uint32_t status;
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
10000a08:	f3ef 8010 	mrs	r0, PRIMASK
    __asm volatile ("cpsid i");
10000a0c:	b672      	cpsid	i
 */
inline static void spin_lock_unsafe_blocking(spin_lock_t *lock) {
    // Note we don't do a wfe or anything, because by convention these spin_locks are VERY SHORT LIVED and NEVER BLOCK and run
    // with INTERRUPTS disabled (to ensure that)... therefore nothing on our core could be blocking us, so we just need to wait on another core
    // anyway which should be finished soon
    while (__builtin_expect(!*lock, 0));
10000a0e:	4a03      	ldr	r2, [pc, #12]	; (10000a1c <hw_claim_lock+0x14>)
10000a10:	6813      	ldr	r3, [r2, #0]
10000a12:	2b00      	cmp	r3, #0
10000a14:	d0fc      	beq.n	10000a10 <hw_claim_lock+0x8>
    __asm volatile ("dmb");
10000a16:	f3bf 8f5f 	dmb	sy

#include "hardware/claim.h"

uint32_t hw_claim_lock() {
    return spin_lock_blocking(spin_lock_instance(PICO_SPINLOCK_ID_HARDWARE_CLAIM));
}
10000a1a:	4770      	bx	lr
10000a1c:	d000012c 	.word	0xd000012c

10000a20 <hw_claim_unlock>:
10000a20:	f3bf 8f5f 	dmb	sy
 *
 * \param lock Spinlock instance
 */
inline static void spin_unlock_unsafe(spin_lock_t *lock) {
    __mem_fence_release();
    *lock = 0;
10000a24:	2200      	movs	r2, #0
10000a26:	4b02      	ldr	r3, [pc, #8]	; (10000a30 <hw_claim_unlock+0x10>)
10000a28:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10000a2a:	f380 8810 	msr	PRIMASK, r0

void hw_claim_unlock(uint32_t save) {
    spin_unlock(spin_lock_instance(PICO_SPINLOCK_ID_HARDWARE_CLAIM), save);
}
10000a2e:	4770      	bx	lr
10000a30:	d000012c 	.word	0xd000012c

10000a34 <hw_claim_or_assert>:
    }
    hw_claim_unlock(save);
    return rc;
}

void hw_claim_or_assert(uint8_t *bits, uint bit_index, const char *message) {
10000a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10000a36:	46ce      	mov	lr, r9
10000a38:	4647      	mov	r7, r8
10000a3a:	4691      	mov	r9, r2
10000a3c:	b580      	push	{r7, lr}
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
10000a3e:	f3ef 8c10 	mrs	ip, PRIMASK
    __asm volatile ("cpsid i");
10000a42:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
10000a44:	4d10      	ldr	r5, [pc, #64]	; (10000a88 <hw_claim_or_assert+0x54>)
10000a46:	682b      	ldr	r3, [r5, #0]
10000a48:	2b00      	cmp	r3, #0
10000a4a:	d0fc      	beq.n	10000a46 <hw_claim_or_assert+0x12>
    __asm volatile ("dmb");
10000a4c:	f3bf 8f5f 	dmb	sy
    uint32_t save = hw_claim_lock();
    if (bits[bit_index >> 3u] & (1u << (bit_index & 7u))) {
10000a50:	08cb      	lsrs	r3, r1, #3
10000a52:	5cc4      	ldrb	r4, [r0, r3]
10000a54:	18c7      	adds	r7, r0, r3
10000a56:	2007      	movs	r0, #7
10000a58:	0026      	movs	r6, r4
10000a5a:	2301      	movs	r3, #1
10000a5c:	4008      	ands	r0, r1
10000a5e:	40c6      	lsrs	r6, r0
10000a60:	001a      	movs	r2, r3
10000a62:	4032      	ands	r2, r6
10000a64:	4233      	tst	r3, r6
10000a66:	d10b      	bne.n	10000a80 <hw_claim_or_assert+0x4c>
        panic(message, bit_index);
    } else {
        bits[bit_index >> 3u] |= (1u << (bit_index & 7u));
10000a68:	4083      	lsls	r3, r0
10000a6a:	4323      	orrs	r3, r4
10000a6c:	703b      	strb	r3, [r7, #0]
10000a6e:	f3bf 8f5f 	dmb	sy
    *lock = 0;
10000a72:	602a      	str	r2, [r5, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10000a74:	f38c 8810 	msr	PRIMASK, ip
    }
    hw_claim_unlock(save);
}
10000a78:	bcc0      	pop	{r6, r7}
10000a7a:	46b9      	mov	r9, r7
10000a7c:	46b0      	mov	r8, r6
10000a7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        panic(message, bit_index);
10000a80:	4648      	mov	r0, r9
10000a82:	f001 f8c3 	bl	10001c0c <panic>
10000a86:	46c0      	nop			; (mov r8, r8)
10000a88:	d000012c 	.word	0xd000012c

10000a8c <clock_configure>:
    hw_clear_bits(&clock->ctrl, CLOCKS_CLK_USB_CTRL_ENABLE_BITS);
    configured_freq[clk_index] = 0;
}

/// \tag::clock_configure[]
bool clock_configure(enum clock_index clk_index, uint32_t src, uint32_t auxsrc, uint32_t src_freq, uint32_t freq) {
10000a8c:	b5f0      	push	{r4, r5, r6, r7, lr}
10000a8e:	464f      	mov	r7, r9
10000a90:	4646      	mov	r6, r8
10000a92:	46d6      	mov	lr, sl
10000a94:	b5c0      	push	{r6, r7, lr}
10000a96:	0017      	movs	r7, r2
    uint32_t div;

    assert(src_freq >= freq);

    if (freq > src_freq)
10000a98:	9a08      	ldr	r2, [sp, #32]
bool clock_configure(enum clock_index clk_index, uint32_t src, uint32_t auxsrc, uint32_t src_freq, uint32_t freq) {
10000a9a:	0005      	movs	r5, r0
10000a9c:	4688      	mov	r8, r1
    if (freq > src_freq)
10000a9e:	429a      	cmp	r2, r3
10000aa0:	d865      	bhi.n	10000b6e <clock_configure+0xe2>
        return false;

    // Div register is 24.8 int.frac divider so multiply by 2^8 (left shift by 8)
    div = (uint32_t) (((uint64_t) src_freq << 8) / freq);
10000aa2:	0e19      	lsrs	r1, r3, #24
10000aa4:	0218      	lsls	r0, r3, #8
10000aa6:	2300      	movs	r3, #0
10000aa8:	f7ff fcaa 	bl	10000400 <__wrap___aeabi_uldivmod>

    clock_hw_t *clock = &clocks_hw->clk[clk_index];
10000aac:	4b31      	ldr	r3, [pc, #196]	; (10000b74 <clock_configure+0xe8>)
10000aae:	006c      	lsls	r4, r5, #1
10000ab0:	469c      	mov	ip, r3
10000ab2:	1964      	adds	r4, r4, r5
10000ab4:	00a4      	lsls	r4, r4, #2
10000ab6:	4464      	add	r4, ip

    // If increasing divisor, set divisor before source. Otherwise set source
    // before divisor. This avoids a momentary overspeed when e.g. switching
    // to a faster source and increasing divisor to compensate.
    if (div > clock->div)
10000ab8:	6863      	ldr	r3, [r4, #4]
    div = (uint32_t) (((uint64_t) src_freq << 8) / freq);
10000aba:	4681      	mov	r9, r0
    if (div > clock->div)
10000abc:	4298      	cmp	r0, r3
10000abe:	d900      	bls.n	10000ac2 <clock_configure+0x36>
        clock->div = div;
10000ac0:	6060      	str	r0, [r4, #4]
    return clk_index == clk_sys || clk_index == clk_ref;
10000ac2:	1f2b      	subs	r3, r5, #4
10000ac4:	b2db      	uxtb	r3, r3
10000ac6:	469a      	mov	sl, r3

    // If switching a glitchless slice (ref or sys) to an aux source, switch
    // away from aux *first* to avoid passing glitches when changing aux mux.
    // Assume (!!!) glitchless source 0 is no faster than the aux source.
    if (has_glitchless_mux(clk_index) && src == CLOCKS_CLK_SYS_CTRL_SRC_VALUE_CLKSRC_CLK_SYS_AUX) {
10000ac8:	2b01      	cmp	r3, #1
10000aca:	d92c      	bls.n	10000b26 <clock_configure+0x9a>
 *
 * \param addr Address of writable register
 * \param mask Bit-mask specifying bits to clear
 */
inline static void hw_clear_bits(io_rw_32 *addr, uint32_t mask) {
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10000acc:	23c0      	movs	r3, #192	; 0xc0
10000ace:	2280      	movs	r2, #128	; 0x80
    // If no glitchless mux, cleanly stop the clock to avoid glitches
    // propagating when changing aux mux. Note it would be a really bad idea
    // to do this on one of the glitchless clocks (clk_sys, clk_ref).
    else {
        hw_clear_bits(&clock->ctrl, CLOCKS_CLK_GPOUT0_CTRL_ENABLE_BITS);
        if (configured_freq[clk_index] > 0) {
10000ad0:	4e29      	ldr	r6, [pc, #164]	; (10000b78 <clock_configure+0xec>)
10000ad2:	00ad      	lsls	r5, r5, #2
10000ad4:	019b      	lsls	r3, r3, #6
10000ad6:	5971      	ldr	r1, [r6, r5]
10000ad8:	4323      	orrs	r3, r4
10000ada:	0112      	lsls	r2, r2, #4
10000adc:	601a      	str	r2, [r3, #0]
10000ade:	2900      	cmp	r1, #0
10000ae0:	d005      	beq.n	10000aee <clock_configure+0x62>
            // Delay for 3 cycles of the target clock, for ENABLE propagation.
            // Note XOSC_COUNT is not helpful here because XOSC is not
            // necessarily running, nor is timer... so, 3 cycles per loop:
            uint delay_cyc = configured_freq[clk_sys] / configured_freq[clk_index] + 1;
10000ae2:	6970      	ldr	r0, [r6, #20]
10000ae4:	f7ff fc46 	bl	10000374 <__wrap___aeabi_uidiv>
10000ae8:	3001      	adds	r0, #1
            asm volatile (
10000aea:	3801      	subs	r0, #1
10000aec:	d1fd      	bne.n	10000aea <clock_configure+0x5e>
 * \param addr Address of writable register
 * \param values Bits values
 * \param write_mask Mask of bits to change
 */
inline static void hw_write_masked(io_rw_32 *addr, uint32_t values, uint32_t write_mask) {
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10000aee:	6822      	ldr	r2, [r4, #0]
            );
        }
    }

    // Set aux mux first, and then glitchless mux if this clock has one
    hw_write_masked(&clock->ctrl,
10000af0:	017f      	lsls	r7, r7, #5
10000af2:	407a      	eors	r2, r7
10000af4:	27e0      	movs	r7, #224	; 0xe0
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10000af6:	2380      	movs	r3, #128	; 0x80
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10000af8:	4017      	ands	r7, r2
        (auxsrc << CLOCKS_CLK_SYS_CTRL_AUXSRC_LSB),
        CLOCKS_CLK_SYS_CTRL_AUXSRC_BITS
    );

    if (has_glitchless_mux(clk_index)) {
10000afa:	4652      	mov	r2, sl
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10000afc:	015b      	lsls	r3, r3, #5
10000afe:	4323      	orrs	r3, r4
10000b00:	601f      	str	r7, [r3, #0]
10000b02:	2a01      	cmp	r2, #1
10000b04:	d926      	bls.n	10000b54 <clock_configure+0xc8>
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10000b06:	2380      	movs	r3, #128	; 0x80
10000b08:	2280      	movs	r2, #128	; 0x80
10000b0a:	019b      	lsls	r3, r3, #6
10000b0c:	4323      	orrs	r3, r4
10000b0e:	0112      	lsls	r2, r2, #4
10000b10:	601a      	str	r2, [r3, #0]

    hw_set_bits(&clock->ctrl, CLOCKS_CLK_GPOUT0_CTRL_ENABLE_BITS);

    // Now that the source is configured, we can trust that the user-supplied
    // divisor is a safe value.
    clock->div = div;
10000b12:	464b      	mov	r3, r9

    // Store the configured frequency
    configured_freq[clk_index] = freq;
10000b14:	2001      	movs	r0, #1
    clock->div = div;
10000b16:	6063      	str	r3, [r4, #4]
    configured_freq[clk_index] = freq;
10000b18:	9b08      	ldr	r3, [sp, #32]
10000b1a:	5173      	str	r3, [r6, r5]

    return true;
}
10000b1c:	bce0      	pop	{r5, r6, r7}
10000b1e:	46ba      	mov	sl, r7
10000b20:	46b1      	mov	r9, r6
10000b22:	46a8      	mov	r8, r5
10000b24:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (has_glitchless_mux(clk_index) && src == CLOCKS_CLK_SYS_CTRL_SRC_VALUE_CLKSRC_CLK_SYS_AUX) {
10000b26:	4643      	mov	r3, r8
10000b28:	2b01      	cmp	r3, #1
10000b2a:	d1cf      	bne.n	10000acc <clock_configure+0x40>
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10000b2c:	23c0      	movs	r3, #192	; 0xc0
10000b2e:	2203      	movs	r2, #3
10000b30:	019b      	lsls	r3, r3, #6
10000b32:	4323      	orrs	r3, r4
10000b34:	601a      	str	r2, [r3, #0]
        while (!(clock->selected & 1u))
10000b36:	3a02      	subs	r2, #2
10000b38:	68a3      	ldr	r3, [r4, #8]
10000b3a:	421a      	tst	r2, r3
10000b3c:	d0fc      	beq.n	10000b38 <clock_configure+0xac>
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10000b3e:	23e0      	movs	r3, #224	; 0xe0
10000b40:	6822      	ldr	r2, [r4, #0]
    hw_write_masked(&clock->ctrl,
10000b42:	017f      	lsls	r7, r7, #5
10000b44:	4057      	eors	r7, r2
10000b46:	401f      	ands	r7, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10000b48:	2380      	movs	r3, #128	; 0x80
10000b4a:	015b      	lsls	r3, r3, #5
10000b4c:	4323      	orrs	r3, r4
10000b4e:	4e0a      	ldr	r6, [pc, #40]	; (10000b78 <clock_configure+0xec>)
10000b50:	601f      	str	r7, [r3, #0]
    return clk_index == clk_sys || clk_index == clk_ref;
10000b52:	00ad      	lsls	r5, r5, #2
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10000b54:	4642      	mov	r2, r8
10000b56:	6821      	ldr	r1, [r4, #0]
10000b58:	4051      	eors	r1, r2
10000b5a:	2203      	movs	r2, #3
10000b5c:	400a      	ands	r2, r1
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10000b5e:	601a      	str	r2, [r3, #0]
        while (!(clock->selected & (1u << src)))
10000b60:	2201      	movs	r2, #1
10000b62:	4643      	mov	r3, r8
10000b64:	409a      	lsls	r2, r3
10000b66:	68a3      	ldr	r3, [r4, #8]
10000b68:	421a      	tst	r2, r3
10000b6a:	d0fc      	beq.n	10000b66 <clock_configure+0xda>
10000b6c:	e7cb      	b.n	10000b06 <clock_configure+0x7a>
        return false;
10000b6e:	2000      	movs	r0, #0
10000b70:	e7d4      	b.n	10000b1c <clock_configure+0x90>
10000b72:	46c0      	nop			; (mov r8, r8)
10000b74:	40008000 	.word	0x40008000
10000b78:	2003946c 	.word	0x2003946c

10000b7c <clocks_init>:
/// \end::clock_configure[]

void clocks_init(void) {
10000b7c:	b530      	push	{r4, r5, lr}
    // Start tick in watchdog
    watchdog_start_tick(XOSC_MHZ);
10000b7e:	200c      	movs	r0, #12
void clocks_init(void) {
10000b80:	b083      	sub	sp, #12
    watchdog_start_tick(XOSC_MHZ);
10000b82:	f001 fcbb 	bl	100024fc <watchdog_start_tick>

    // Everything is 48MHz on FPGA apart from RTC. Otherwise set to 0 and will be set in clock configure
    if (running_on_fpga()) {
10000b86:	f000 ff59 	bl	10001a3c <running_on_fpga>
10000b8a:	2800      	cmp	r0, #0
10000b8c:	d00e      	beq.n	10000bac <clocks_init+0x30>
        for (uint i = 0; i < CLK_COUNT; i++) {
            configured_freq[i] = 48 * MHZ;
10000b8e:	4b9a      	ldr	r3, [pc, #616]	; (10000df8 <clocks_init+0x27c>)
10000b90:	4a9a      	ldr	r2, [pc, #616]	; (10000dfc <clocks_init+0x280>)
10000b92:	601a      	str	r2, [r3, #0]
10000b94:	605a      	str	r2, [r3, #4]
10000b96:	609a      	str	r2, [r3, #8]
10000b98:	60da      	str	r2, [r3, #12]
10000b9a:	611a      	str	r2, [r3, #16]
10000b9c:	615a      	str	r2, [r3, #20]
10000b9e:	619a      	str	r2, [r3, #24]
10000ba0:	61da      	str	r2, [r3, #28]
10000ba2:	621a      	str	r2, [r3, #32]
        }
        configured_freq[clk_rtc] = 46875;
10000ba4:	4a96      	ldr	r2, [pc, #600]	; (10000e00 <clocks_init+0x284>)
10000ba6:	625a      	str	r2, [r3, #36]	; 0x24
    clock_configure(clk_peri,
                    0,
                    CLOCKS_CLK_PERI_CTRL_AUXSRC_VALUE_CLK_SYS,
                    125 * MHZ,
                    125 * MHZ);
}
10000ba8:	b003      	add	sp, #12
10000baa:	bd30      	pop	{r4, r5, pc}
    clocks_hw->resus.ctrl = 0;
10000bac:	4c95      	ldr	r4, [pc, #596]	; (10000e04 <clocks_init+0x288>)
10000bae:	67a0      	str	r0, [r4, #120]	; 0x78
    xosc_init();
10000bb0:	f001 fcac 	bl	1000250c <xosc_init>
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10000bb4:	2201      	movs	r2, #1
10000bb6:	4b94      	ldr	r3, [pc, #592]	; (10000e08 <clocks_init+0x28c>)
10000bb8:	601a      	str	r2, [r3, #0]
    while (clocks_hw->clk[clk_sys].selected != 0x1)
10000bba:	6c63      	ldr	r3, [r4, #68]	; 0x44
10000bbc:	2b01      	cmp	r3, #1
10000bbe:	d1fc      	bne.n	10000bba <clocks_init+0x3e>
10000bc0:	2203      	movs	r2, #3
10000bc2:	4b92      	ldr	r3, [pc, #584]	; (10000e0c <clocks_init+0x290>)
10000bc4:	601a      	str	r2, [r3, #0]
    while (clocks_hw->clk[clk_ref].selected != 0x1)
10000bc6:	4a8f      	ldr	r2, [pc, #572]	; (10000e04 <clocks_init+0x288>)
10000bc8:	6b93      	ldr	r3, [r2, #56]	; 0x38
10000bca:	2b01      	cmp	r3, #1
10000bcc:	d1fc      	bne.n	10000bc8 <clocks_init+0x4c>
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10000bce:	22c0      	movs	r2, #192	; 0xc0
10000bd0:	4b8f      	ldr	r3, [pc, #572]	; (10000e10 <clocks_init+0x294>)
10000bd2:	0192      	lsls	r2, r2, #6
10000bd4:	601a      	str	r2, [r3, #0]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10000bd6:	4b8f      	ldr	r3, [pc, #572]	; (10000e14 <clocks_init+0x298>)
 *
 * \param bits Bit pattern indicating blocks to unreset. See \ref reset_bitmask
 */
static inline void unreset_block_wait(uint32_t bits) {
    hw_clear_bits(&resets_hw->reset, bits);
    while (~resets_hw->reset_done & bits)
10000bd8:	498f      	ldr	r1, [pc, #572]	; (10000e18 <clocks_init+0x29c>)
10000bda:	601a      	str	r2, [r3, #0]
10000bdc:	0010      	movs	r0, r2
10000bde:	688b      	ldr	r3, [r1, #8]
10000be0:	4398      	bics	r0, r3
10000be2:	1e03      	subs	r3, r0, #0
10000be4:	d1fa      	bne.n	10000bdc <clocks_init+0x60>
    pll_init(pll_sys, 1, 1500 * MHZ, 6, 2);
10000be6:	2402      	movs	r4, #2
10000be8:	2101      	movs	r1, #1
10000bea:	4a8c      	ldr	r2, [pc, #560]	; (10000e1c <clocks_init+0x2a0>)
10000bec:	488c      	ldr	r0, [pc, #560]	; (10000e20 <clocks_init+0x2a4>)
10000bee:	3306      	adds	r3, #6
10000bf0:	9400      	str	r4, [sp, #0]
10000bf2:	f000 ff2b 	bl	10001a4c <pll_init>
    pll_init(pll_usb, 1, 480 * MHZ, 5, 2);
10000bf6:	2305      	movs	r3, #5
10000bf8:	4a8a      	ldr	r2, [pc, #552]	; (10000e24 <clocks_init+0x2a8>)
10000bfa:	2101      	movs	r1, #1
10000bfc:	488a      	ldr	r0, [pc, #552]	; (10000e28 <clocks_init+0x2ac>)
10000bfe:	9400      	str	r4, [sp, #0]
10000c00:	f000 ff24 	bl	10001a4c <pll_init>
    if (div > clock->div)
10000c04:	4b89      	ldr	r3, [pc, #548]	; (10000e2c <clocks_init+0x2b0>)
10000c06:	685a      	ldr	r2, [r3, #4]
10000c08:	2aff      	cmp	r2, #255	; 0xff
10000c0a:	d802      	bhi.n	10000c12 <clocks_init+0x96>
        clock->div = div;
10000c0c:	2280      	movs	r2, #128	; 0x80
10000c0e:	0052      	lsls	r2, r2, #1
10000c10:	605a      	str	r2, [r3, #4]
10000c12:	2280      	movs	r2, #128	; 0x80
        if (configured_freq[clk_index] > 0) {
10000c14:	4c78      	ldr	r4, [pc, #480]	; (10000df8 <clocks_init+0x27c>)
10000c16:	4b7d      	ldr	r3, [pc, #500]	; (10000e0c <clocks_init+0x290>)
10000c18:	6921      	ldr	r1, [r4, #16]
10000c1a:	0112      	lsls	r2, r2, #4
10000c1c:	4d83      	ldr	r5, [pc, #524]	; (10000e2c <clocks_init+0x2b0>)
10000c1e:	601a      	str	r2, [r3, #0]
10000c20:	2900      	cmp	r1, #0
10000c22:	d005      	beq.n	10000c30 <clocks_init+0xb4>
            uint delay_cyc = configured_freq[clk_sys] / configured_freq[clk_index] + 1;
10000c24:	6960      	ldr	r0, [r4, #20]
10000c26:	f7ff fba5 	bl	10000374 <__wrap___aeabi_uidiv>
10000c2a:	3001      	adds	r0, #1
            asm volatile (
10000c2c:	3801      	subs	r0, #1
10000c2e:	d1fd      	bne.n	10000c2c <clocks_init+0xb0>
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10000c30:	21e0      	movs	r1, #224	; 0xe0
10000c32:	4b7e      	ldr	r3, [pc, #504]	; (10000e2c <clocks_init+0x2b0>)
10000c34:	2002      	movs	r0, #2
10000c36:	681a      	ldr	r2, [r3, #0]
10000c38:	4011      	ands	r1, r2
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10000c3a:	2280      	movs	r2, #128	; 0x80
10000c3c:	0152      	lsls	r2, r2, #5
10000c3e:	432a      	orrs	r2, r5
10000c40:	6011      	str	r1, [r2, #0]
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10000c42:	6819      	ldr	r1, [r3, #0]
10000c44:	4048      	eors	r0, r1
10000c46:	2103      	movs	r1, #3
10000c48:	4001      	ands	r1, r0
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10000c4a:	6011      	str	r1, [r2, #0]
        while (!(clock->selected & (1u << src)))
10000c4c:	2104      	movs	r1, #4
10000c4e:	689a      	ldr	r2, [r3, #8]
10000c50:	4211      	tst	r1, r2
10000c52:	d0fc      	beq.n	10000c4e <clocks_init+0xd2>
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10000c54:	2280      	movs	r2, #128	; 0x80
10000c56:	2180      	movs	r1, #128	; 0x80
10000c58:	0192      	lsls	r2, r2, #6
10000c5a:	432a      	orrs	r2, r5
10000c5c:	0109      	lsls	r1, r1, #4
10000c5e:	6011      	str	r1, [r2, #0]
    clock->div = div;
10000c60:	2280      	movs	r2, #128	; 0x80
10000c62:	0052      	lsls	r2, r2, #1
10000c64:	605a      	str	r2, [r3, #4]
    configured_freq[clk_index] = freq;
10000c66:	4b72      	ldr	r3, [pc, #456]	; (10000e30 <clocks_init+0x2b4>)
10000c68:	6123      	str	r3, [r4, #16]
    if (div > clock->div)
10000c6a:	4b72      	ldr	r3, [pc, #456]	; (10000e34 <clocks_init+0x2b8>)
10000c6c:	6859      	ldr	r1, [r3, #4]
10000c6e:	29ff      	cmp	r1, #255	; 0xff
10000c70:	d800      	bhi.n	10000c74 <clocks_init+0xf8>
        clock->div = div;
10000c72:	605a      	str	r2, [r3, #4]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10000c74:	2103      	movs	r1, #3
10000c76:	4a64      	ldr	r2, [pc, #400]	; (10000e08 <clocks_init+0x28c>)
10000c78:	4b6e      	ldr	r3, [pc, #440]	; (10000e34 <clocks_init+0x2b8>)
10000c7a:	6011      	str	r1, [r2, #0]
        while (!(clock->selected & 1u))
10000c7c:	3902      	subs	r1, #2
10000c7e:	689a      	ldr	r2, [r3, #8]
10000c80:	4211      	tst	r1, r2
10000c82:	d0fc      	beq.n	10000c7e <clocks_init+0x102>
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10000c84:	20e0      	movs	r0, #224	; 0xe0
10000c86:	681a      	ldr	r2, [r3, #0]
10000c88:	4010      	ands	r0, r2
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10000c8a:	2280      	movs	r2, #128	; 0x80
10000c8c:	0152      	lsls	r2, r2, #5
10000c8e:	431a      	orrs	r2, r3
10000c90:	6010      	str	r0, [r2, #0]
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10000c92:	6818      	ldr	r0, [r3, #0]
10000c94:	4048      	eors	r0, r1
10000c96:	2103      	movs	r1, #3
10000c98:	4001      	ands	r1, r0
        while (!(clock->selected & (1u << src)))
10000c9a:	2002      	movs	r0, #2
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10000c9c:	6011      	str	r1, [r2, #0]
10000c9e:	4965      	ldr	r1, [pc, #404]	; (10000e34 <clocks_init+0x2b8>)
10000ca0:	688a      	ldr	r2, [r1, #8]
10000ca2:	4210      	tst	r0, r2
10000ca4:	d0fc      	beq.n	10000ca0 <clocks_init+0x124>
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10000ca6:	2280      	movs	r2, #128	; 0x80
10000ca8:	0192      	lsls	r2, r2, #6
10000caa:	4313      	orrs	r3, r2
10000cac:	2280      	movs	r2, #128	; 0x80
10000cae:	0112      	lsls	r2, r2, #4
10000cb0:	601a      	str	r2, [r3, #0]
    clock->div = div;
10000cb2:	2280      	movs	r2, #128	; 0x80
    configured_freq[clk_index] = freq;
10000cb4:	4b60      	ldr	r3, [pc, #384]	; (10000e38 <clocks_init+0x2bc>)
    clock->div = div;
10000cb6:	0052      	lsls	r2, r2, #1
10000cb8:	604a      	str	r2, [r1, #4]
    configured_freq[clk_index] = freq;
10000cba:	6163      	str	r3, [r4, #20]
    if (div > clock->div)
10000cbc:	4b5f      	ldr	r3, [pc, #380]	; (10000e3c <clocks_init+0x2c0>)
10000cbe:	6859      	ldr	r1, [r3, #4]
10000cc0:	29ff      	cmp	r1, #255	; 0xff
10000cc2:	d800      	bhi.n	10000cc6 <clocks_init+0x14a>
        clock->div = div;
10000cc4:	605a      	str	r2, [r3, #4]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10000cc6:	2280      	movs	r2, #128	; 0x80
10000cc8:	4b5d      	ldr	r3, [pc, #372]	; (10000e40 <clocks_init+0x2c4>)
        if (configured_freq[clk_index] > 0) {
10000cca:	69e1      	ldr	r1, [r4, #28]
10000ccc:	0112      	lsls	r2, r2, #4
10000cce:	4d5b      	ldr	r5, [pc, #364]	; (10000e3c <clocks_init+0x2c0>)
10000cd0:	601a      	str	r2, [r3, #0]
10000cd2:	2900      	cmp	r1, #0
10000cd4:	d005      	beq.n	10000ce2 <clocks_init+0x166>
            uint delay_cyc = configured_freq[clk_sys] / configured_freq[clk_index] + 1;
10000cd6:	6960      	ldr	r0, [r4, #20]
10000cd8:	f7ff fb4c 	bl	10000374 <__wrap___aeabi_uidiv>
10000cdc:	3001      	adds	r0, #1
            asm volatile (
10000cde:	3801      	subs	r0, #1
10000ce0:	d1fd      	bne.n	10000cde <clocks_init+0x162>
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10000ce2:	22e0      	movs	r2, #224	; 0xe0
10000ce4:	4955      	ldr	r1, [pc, #340]	; (10000e3c <clocks_init+0x2c0>)
10000ce6:	680b      	ldr	r3, [r1, #0]
10000ce8:	401a      	ands	r2, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10000cea:	2380      	movs	r3, #128	; 0x80
10000cec:	015b      	lsls	r3, r3, #5
10000cee:	432b      	orrs	r3, r5
10000cf0:	601a      	str	r2, [r3, #0]
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10000cf2:	2380      	movs	r3, #128	; 0x80
10000cf4:	2280      	movs	r2, #128	; 0x80
10000cf6:	019b      	lsls	r3, r3, #6
10000cf8:	432b      	orrs	r3, r5
10000cfa:	0112      	lsls	r2, r2, #4
10000cfc:	601a      	str	r2, [r3, #0]
    clock->div = div;
10000cfe:	2280      	movs	r2, #128	; 0x80
    configured_freq[clk_index] = freq;
10000d00:	4b3e      	ldr	r3, [pc, #248]	; (10000dfc <clocks_init+0x280>)
    clock->div = div;
10000d02:	0052      	lsls	r2, r2, #1
10000d04:	604a      	str	r2, [r1, #4]
    configured_freq[clk_index] = freq;
10000d06:	61e3      	str	r3, [r4, #28]
    if (div > clock->div)
10000d08:	4b4e      	ldr	r3, [pc, #312]	; (10000e44 <clocks_init+0x2c8>)
10000d0a:	6859      	ldr	r1, [r3, #4]
10000d0c:	29ff      	cmp	r1, #255	; 0xff
10000d0e:	d800      	bhi.n	10000d12 <clocks_init+0x196>
        clock->div = div;
10000d10:	605a      	str	r2, [r3, #4]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10000d12:	2280      	movs	r2, #128	; 0x80
10000d14:	4b4c      	ldr	r3, [pc, #304]	; (10000e48 <clocks_init+0x2cc>)
        if (configured_freq[clk_index] > 0) {
10000d16:	6a21      	ldr	r1, [r4, #32]
10000d18:	0112      	lsls	r2, r2, #4
10000d1a:	4d4a      	ldr	r5, [pc, #296]	; (10000e44 <clocks_init+0x2c8>)
10000d1c:	601a      	str	r2, [r3, #0]
10000d1e:	2900      	cmp	r1, #0
10000d20:	d005      	beq.n	10000d2e <clocks_init+0x1b2>
            uint delay_cyc = configured_freq[clk_sys] / configured_freq[clk_index] + 1;
10000d22:	6960      	ldr	r0, [r4, #20]
10000d24:	f7ff fb26 	bl	10000374 <__wrap___aeabi_uidiv>
10000d28:	3001      	adds	r0, #1
            asm volatile (
10000d2a:	3801      	subs	r0, #1
10000d2c:	d1fd      	bne.n	10000d2a <clocks_init+0x1ae>
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10000d2e:	22e0      	movs	r2, #224	; 0xe0
10000d30:	4944      	ldr	r1, [pc, #272]	; (10000e44 <clocks_init+0x2c8>)
10000d32:	680b      	ldr	r3, [r1, #0]
10000d34:	401a      	ands	r2, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10000d36:	2380      	movs	r3, #128	; 0x80
10000d38:	015b      	lsls	r3, r3, #5
10000d3a:	432b      	orrs	r3, r5
10000d3c:	601a      	str	r2, [r3, #0]
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10000d3e:	2380      	movs	r3, #128	; 0x80
10000d40:	2280      	movs	r2, #128	; 0x80
10000d42:	019b      	lsls	r3, r3, #6
10000d44:	432b      	orrs	r3, r5
10000d46:	0112      	lsls	r2, r2, #4
10000d48:	601a      	str	r2, [r3, #0]
    clock->div = div;
10000d4a:	2380      	movs	r3, #128	; 0x80
    if (div > clock->div)
10000d4c:	2280      	movs	r2, #128	; 0x80
    clock->div = div;
10000d4e:	005b      	lsls	r3, r3, #1
10000d50:	604b      	str	r3, [r1, #4]
    configured_freq[clk_index] = freq;
10000d52:	4b2a      	ldr	r3, [pc, #168]	; (10000dfc <clocks_init+0x280>)
    if (div > clock->div)
10000d54:	02d2      	lsls	r2, r2, #11
    configured_freq[clk_index] = freq;
10000d56:	6223      	str	r3, [r4, #32]
    if (div > clock->div)
10000d58:	4b3c      	ldr	r3, [pc, #240]	; (10000e4c <clocks_init+0x2d0>)
10000d5a:	6859      	ldr	r1, [r3, #4]
10000d5c:	4291      	cmp	r1, r2
10000d5e:	d200      	bcs.n	10000d62 <clocks_init+0x1e6>
        clock->div = div;
10000d60:	605a      	str	r2, [r3, #4]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10000d62:	2280      	movs	r2, #128	; 0x80
10000d64:	4b3a      	ldr	r3, [pc, #232]	; (10000e50 <clocks_init+0x2d4>)
        if (configured_freq[clk_index] > 0) {
10000d66:	6a61      	ldr	r1, [r4, #36]	; 0x24
10000d68:	0112      	lsls	r2, r2, #4
10000d6a:	4d38      	ldr	r5, [pc, #224]	; (10000e4c <clocks_init+0x2d0>)
10000d6c:	601a      	str	r2, [r3, #0]
10000d6e:	2900      	cmp	r1, #0
10000d70:	d005      	beq.n	10000d7e <clocks_init+0x202>
            uint delay_cyc = configured_freq[clk_sys] / configured_freq[clk_index] + 1;
10000d72:	6960      	ldr	r0, [r4, #20]
10000d74:	f7ff fafe 	bl	10000374 <__wrap___aeabi_uidiv>
10000d78:	3001      	adds	r0, #1
            asm volatile (
10000d7a:	3801      	subs	r0, #1
10000d7c:	d1fd      	bne.n	10000d7a <clocks_init+0x1fe>
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10000d7e:	22e0      	movs	r2, #224	; 0xe0
10000d80:	4932      	ldr	r1, [pc, #200]	; (10000e4c <clocks_init+0x2d0>)
10000d82:	680b      	ldr	r3, [r1, #0]
10000d84:	401a      	ands	r2, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10000d86:	2380      	movs	r3, #128	; 0x80
10000d88:	015b      	lsls	r3, r3, #5
10000d8a:	432b      	orrs	r3, r5
10000d8c:	601a      	str	r2, [r3, #0]
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10000d8e:	2380      	movs	r3, #128	; 0x80
10000d90:	2280      	movs	r2, #128	; 0x80
10000d92:	019b      	lsls	r3, r3, #6
10000d94:	432b      	orrs	r3, r5
10000d96:	0112      	lsls	r2, r2, #4
10000d98:	601a      	str	r2, [r3, #0]
    clock->div = div;
10000d9a:	2380      	movs	r3, #128	; 0x80
10000d9c:	02db      	lsls	r3, r3, #11
10000d9e:	604b      	str	r3, [r1, #4]
    configured_freq[clk_index] = freq;
10000da0:	4b17      	ldr	r3, [pc, #92]	; (10000e00 <clocks_init+0x284>)
10000da2:	6263      	str	r3, [r4, #36]	; 0x24
    if (div > clock->div)
10000da4:	4b2b      	ldr	r3, [pc, #172]	; (10000e54 <clocks_init+0x2d8>)
10000da6:	685a      	ldr	r2, [r3, #4]
10000da8:	2aff      	cmp	r2, #255	; 0xff
10000daa:	d802      	bhi.n	10000db2 <clocks_init+0x236>
        clock->div = div;
10000dac:	2280      	movs	r2, #128	; 0x80
10000dae:	0052      	lsls	r2, r2, #1
10000db0:	605a      	str	r2, [r3, #4]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10000db2:	2280      	movs	r2, #128	; 0x80
10000db4:	4b28      	ldr	r3, [pc, #160]	; (10000e58 <clocks_init+0x2dc>)
        if (configured_freq[clk_index] > 0) {
10000db6:	69a1      	ldr	r1, [r4, #24]
10000db8:	0112      	lsls	r2, r2, #4
10000dba:	4d26      	ldr	r5, [pc, #152]	; (10000e54 <clocks_init+0x2d8>)
10000dbc:	601a      	str	r2, [r3, #0]
10000dbe:	2900      	cmp	r1, #0
10000dc0:	d005      	beq.n	10000dce <clocks_init+0x252>
            uint delay_cyc = configured_freq[clk_sys] / configured_freq[clk_index] + 1;
10000dc2:	6960      	ldr	r0, [r4, #20]
10000dc4:	f7ff fad6 	bl	10000374 <__wrap___aeabi_uidiv>
10000dc8:	3001      	adds	r0, #1
            asm volatile (
10000dca:	3801      	subs	r0, #1
10000dcc:	d1fd      	bne.n	10000dca <clocks_init+0x24e>
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10000dce:	22e0      	movs	r2, #224	; 0xe0
10000dd0:	4920      	ldr	r1, [pc, #128]	; (10000e54 <clocks_init+0x2d8>)
10000dd2:	680b      	ldr	r3, [r1, #0]
10000dd4:	401a      	ands	r2, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10000dd6:	2380      	movs	r3, #128	; 0x80
10000dd8:	015b      	lsls	r3, r3, #5
10000dda:	432b      	orrs	r3, r5
10000ddc:	601a      	str	r2, [r3, #0]
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10000dde:	2380      	movs	r3, #128	; 0x80
10000de0:	2280      	movs	r2, #128	; 0x80
10000de2:	019b      	lsls	r3, r3, #6
10000de4:	432b      	orrs	r3, r5
10000de6:	0112      	lsls	r2, r2, #4
10000de8:	601a      	str	r2, [r3, #0]
    clock->div = div;
10000dea:	2380      	movs	r3, #128	; 0x80
10000dec:	005b      	lsls	r3, r3, #1
10000dee:	604b      	str	r3, [r1, #4]
    configured_freq[clk_index] = freq;
10000df0:	4b11      	ldr	r3, [pc, #68]	; (10000e38 <clocks_init+0x2bc>)
10000df2:	61a3      	str	r3, [r4, #24]
    return true;
10000df4:	e6d8      	b.n	10000ba8 <clocks_init+0x2c>
10000df6:	46c0      	nop			; (mov r8, r8)
10000df8:	2003946c 	.word	0x2003946c
10000dfc:	02dc6c00 	.word	0x02dc6c00
10000e00:	0000b71b 	.word	0x0000b71b
10000e04:	40008000 	.word	0x40008000
10000e08:	4000b03c 	.word	0x4000b03c
10000e0c:	4000b030 	.word	0x4000b030
10000e10:	4000e000 	.word	0x4000e000
10000e14:	4000f000 	.word	0x4000f000
10000e18:	4000c000 	.word	0x4000c000
10000e1c:	59682f00 	.word	0x59682f00
10000e20:	40028000 	.word	0x40028000
10000e24:	1c9c3800 	.word	0x1c9c3800
10000e28:	4002c000 	.word	0x4002c000
10000e2c:	40008030 	.word	0x40008030
10000e30:	00b71b00 	.word	0x00b71b00
10000e34:	4000803c 	.word	0x4000803c
10000e38:	07735940 	.word	0x07735940
10000e3c:	40008054 	.word	0x40008054
10000e40:	4000b054 	.word	0x4000b054
10000e44:	40008060 	.word	0x40008060
10000e48:	4000b060 	.word	0x4000b060
10000e4c:	4000806c 	.word	0x4000806c
10000e50:	4000b06c 	.word	0x4000b06c
10000e54:	40008048 	.word	0x40008048
10000e58:	4000b048 	.word	0x4000b048

10000e5c <clock_get_hz>:

/// \tag::clock_get_hz[]
uint32_t clock_get_hz(enum clock_index clk_index) {
    return configured_freq[clk_index];
10000e5c:	4b01      	ldr	r3, [pc, #4]	; (10000e64 <clock_get_hz+0x8>)
10000e5e:	0080      	lsls	r0, r0, #2
10000e60:	58c0      	ldr	r0, [r0, r3]
}
10000e62:	4770      	bx	lr
10000e64:	2003946c 	.word	0x2003946c

10000e68 <__aeabi_double_init>:

bool running_on_fpga();
uint8_t rp2040_chip_version();

static inline uint8_t rp2040_rom_version() {
    return *(uint8_t*)0x13;
10000e68:	2313      	movs	r3, #19
    panic("missing double function");
}
#endif
extern void double_table_shim_on_use_helper();

void __aeabi_double_init() {
10000e6a:	b570      	push	{r4, r5, r6, lr}
    int rom_version = rp2040_rom_version();
10000e6c:	781d      	ldrb	r5, [r3, #0]
#if PICO_DOUBLE_SUPPORT_ROM_V1
    if (rom_version == 1) {
10000e6e:	2d01      	cmp	r5, #1
10000e70:	d010      	beq.n	10000e94 <__aeabi_double_init+0x2c>
        for(uint i=0;i<SF_TABLE_V2_SIZE/4;i++) {
            sd_table[i] = (uintptr_t)missing_double_func_shim;
        }
    }
#endif
    if (rom_version >= 2) {
10000e72:	dd0b      	ble.n	10000e8c <__aeabi_double_init+0x24>
        void *rom_table = rom_data_lookup(rom_table_code('S', 'D'));
10000e74:	4819      	ldr	r0, [pc, #100]	; (10000edc <__aeabi_double_init+0x74>)
10000e76:	f7ff fd9d 	bl	100009b4 <rom_data_lookup>
        assert(*((uint8_t *)(((void *)rom_data_lookup(rom_table_code('S', 'F')))-2)) * 4 >= SF_TABLE_V2_SIZE);
        memcpy(&sd_table, rom_table, SF_TABLE_V2_SIZE);
10000e7a:	4c19      	ldr	r4, [pc, #100]	; (10000ee0 <__aeabi_double_init+0x78>)
        void *rom_table = rom_data_lookup(rom_table_code('S', 'D'));
10000e7c:	0001      	movs	r1, r0
        memcpy(&sd_table, rom_table, SF_TABLE_V2_SIZE);
10000e7e:	2280      	movs	r2, #128	; 0x80
10000e80:	0020      	movs	r0, r4
10000e82:	f7ff fd89 	bl	10000998 <__wrap___aeabi_memcpy>
                panic(NULL);
            }
#endif
        }
    }
    if (rom_version < 3) {
10000e86:	2d02      	cmp	r5, #2
10000e88:	d001      	beq.n	10000e8e <__aeabi_double_init+0x26>
        // we use the unused entry for SINCOS
        sd_table[SF_TABLE_V3_FSINCOS / 4] = (uintptr_t) double_table_shim_on_use_helper;
    }
}
10000e8a:	bd70      	pop	{r4, r5, r6, pc}
10000e8c:	4c14      	ldr	r4, [pc, #80]	; (10000ee0 <__aeabi_double_init+0x78>)
        sd_table[SF_TABLE_V3_FSINCOS / 4] = (uintptr_t) double_table_shim_on_use_helper;
10000e8e:	4b15      	ldr	r3, [pc, #84]	; (10000ee4 <__aeabi_double_init+0x7c>)
10000e90:	64a3      	str	r3, [r4, #72]	; 0x48
}
10000e92:	e7fa      	b.n	10000e8a <__aeabi_double_init+0x22>
        sd_table[SF_TABLE_V3_FSINCOS / 4] = (uintptr_t) double_table_shim_on_use_helper;
10000e94:	4b13      	ldr	r3, [pc, #76]	; (10000ee4 <__aeabi_double_init+0x7c>)
            sd_table[i] = (uintptr_t)double_table_shim_on_use_helper;
10000e96:	4c12      	ldr	r4, [pc, #72]	; (10000ee0 <__aeabi_double_init+0x78>)
10000e98:	6023      	str	r3, [r4, #0]
10000e9a:	6063      	str	r3, [r4, #4]
10000e9c:	60a3      	str	r3, [r4, #8]
10000e9e:	60e3      	str	r3, [r4, #12]
10000ea0:	6123      	str	r3, [r4, #16]
10000ea2:	6163      	str	r3, [r4, #20]
10000ea4:	61a3      	str	r3, [r4, #24]
10000ea6:	61e3      	str	r3, [r4, #28]
10000ea8:	6223      	str	r3, [r4, #32]
10000eaa:	6263      	str	r3, [r4, #36]	; 0x24
10000eac:	62a3      	str	r3, [r4, #40]	; 0x28
10000eae:	62e3      	str	r3, [r4, #44]	; 0x2c
10000eb0:	6323      	str	r3, [r4, #48]	; 0x30
10000eb2:	6363      	str	r3, [r4, #52]	; 0x34
10000eb4:	63a3      	str	r3, [r4, #56]	; 0x38
10000eb6:	63e3      	str	r3, [r4, #60]	; 0x3c
10000eb8:	6423      	str	r3, [r4, #64]	; 0x40
10000eba:	6463      	str	r3, [r4, #68]	; 0x44
10000ebc:	64a3      	str	r3, [r4, #72]	; 0x48
10000ebe:	64e3      	str	r3, [r4, #76]	; 0x4c
10000ec0:	6523      	str	r3, [r4, #80]	; 0x50
10000ec2:	6563      	str	r3, [r4, #84]	; 0x54
10000ec4:	65a3      	str	r3, [r4, #88]	; 0x58
10000ec6:	65e3      	str	r3, [r4, #92]	; 0x5c
10000ec8:	6623      	str	r3, [r4, #96]	; 0x60
10000eca:	6663      	str	r3, [r4, #100]	; 0x64
10000ecc:	66a3      	str	r3, [r4, #104]	; 0x68
10000ece:	66e3      	str	r3, [r4, #108]	; 0x6c
10000ed0:	6723      	str	r3, [r4, #112]	; 0x70
10000ed2:	6763      	str	r3, [r4, #116]	; 0x74
10000ed4:	67a3      	str	r3, [r4, #120]	; 0x78
10000ed6:	67e3      	str	r3, [r4, #124]	; 0x7c
        sd_table[SF_TABLE_V3_FSINCOS / 4] = (uintptr_t) double_table_shim_on_use_helper;
10000ed8:	64a3      	str	r3, [r4, #72]	; 0x48
10000eda:	e7d6      	b.n	10000e8a <__aeabi_double_init+0x22>
10000edc:	00004453 	.word	0x00004453
10000ee0:	20002f50 	.word	0x20002f50
10000ee4:	10000829 	.word	0x10000829

10000ee8 <flash_get_unique_id>:
// Use standard RUID command to get a unique identifier for the flash (and
// hence the board)

static_assert(FLASH_UNIQUE_ID_SIZE_BYTES == FLASH_RUID_DATA_BYTES, "");

void flash_get_unique_id(uint8_t *id_out) {
10000ee8:	b530      	push	{r4, r5, lr}
#if PICO_NO_FLASH
    panic_unsupported();
#else
    uint8_t txbuf[FLASH_RUID_TOTAL_BYTES] = {0};
10000eea:	2500      	movs	r5, #0
void flash_get_unique_id(uint8_t *id_out) {
10000eec:	b089      	sub	sp, #36	; 0x24
10000eee:	0004      	movs	r4, r0
    uint8_t txbuf[FLASH_RUID_TOTAL_BYTES] = {0};
10000ef0:	2209      	movs	r2, #9
10000ef2:	2100      	movs	r1, #0
10000ef4:	a801      	add	r0, sp, #4
10000ef6:	9500      	str	r5, [sp, #0]
10000ef8:	f7ff fd48 	bl	1000098c <__wrap_memset>
    uint8_t rxbuf[FLASH_RUID_TOTAL_BYTES] = {0};
10000efc:	2209      	movs	r2, #9
10000efe:	2100      	movs	r1, #0
10000f00:	a805      	add	r0, sp, #20
10000f02:	9504      	str	r5, [sp, #16]
10000f04:	f7ff fd42 	bl	1000098c <__wrap_memset>
    txbuf[0] = FLASH_RUID_CMD;
10000f08:	234b      	movs	r3, #75	; 0x4b
10000f0a:	466a      	mov	r2, sp
    flash_do_cmd(txbuf, rxbuf, FLASH_RUID_TOTAL_BYTES);
10000f0c:	4668      	mov	r0, sp
    txbuf[0] = FLASH_RUID_CMD;
10000f0e:	7013      	strb	r3, [r2, #0]
    flash_do_cmd(txbuf, rxbuf, FLASH_RUID_TOTAL_BYTES);
10000f10:	a904      	add	r1, sp, #16
10000f12:	f003 fdfd 	bl	10004b10 <__flash_do_cmd.constprop.0_veneer>
    for (int i = 0; i < FLASH_RUID_DATA_BYTES; i++)
        id_out[i] = rxbuf[i + 1 + FLASH_RUID_DUMMY_BYTES];
10000f16:	2115      	movs	r1, #21
10000f18:	2208      	movs	r2, #8
10000f1a:	0020      	movs	r0, r4
10000f1c:	4469      	add	r1, sp
10000f1e:	f7ff fd3b 	bl	10000998 <__wrap___aeabi_memcpy>
#endif
}
10000f22:	b009      	add	sp, #36	; 0x24
10000f24:	bd30      	pop	{r4, r5, pc}
10000f26:	46c0      	nop			; (mov r8, r8)

10000f28 <__aeabi_float_init>:
10000f28:	2313      	movs	r3, #19
static __attribute__((noreturn)) void missing_float_func_shim() {
    panic("");
}
#endif

void __aeabi_float_init() {
10000f2a:	b510      	push	{r4, lr}
    int rom_version = rp2040_rom_version();
    void *rom_table = rom_data_lookup(rom_table_code('S', 'F'));
10000f2c:	4812      	ldr	r0, [pc, #72]	; (10000f78 <__aeabi_float_init+0x50>)
    int rom_version = rp2040_rom_version();
10000f2e:	781c      	ldrb	r4, [r3, #0]
    void *rom_table = rom_data_lookup(rom_table_code('S', 'F'));
10000f30:	f7ff fd40 	bl	100009b4 <rom_data_lookup>
10000f34:	0001      	movs	r1, r0
#if PICO_FLOAT_SUPPORT_ROM_V1
    if (rom_version == 1) {
10000f36:	2c01      	cmp	r4, #1
10000f38:	d00a      	beq.n	10000f50 <__aeabi_float_init+0x28>
        for(uint i=0;i<SF_TABLE_V2_SIZE/4;i++) {
            if (!sf_table[i]) sf_table[i] = (uintptr_t)missing_float_func_shim;
        }
    }
#endif
    if (rom_version >= 2) {
10000f3a:	dd03      	ble.n	10000f44 <__aeabi_float_init+0x1c>
        assert(*((uint8_t *)(rom_table-2)) * 4 >= SF_TABLE_V2_SIZE);
        memcpy(&sf_table, rom_table, SF_TABLE_V2_SIZE);
10000f3c:	2280      	movs	r2, #128	; 0x80
10000f3e:	480f      	ldr	r0, [pc, #60]	; (10000f7c <__aeabi_float_init+0x54>)
10000f40:	f7ff fd2a 	bl	10000998 <__wrap___aeabi_memcpy>
    }
    sf_clz_func = rom_func_lookup(rom_table_code('L', '3'));
10000f44:	480e      	ldr	r0, [pc, #56]	; (10000f80 <__aeabi_float_init+0x58>)
10000f46:	f7ff fd2d 	bl	100009a4 <rom_func_lookup>
10000f4a:	4b0e      	ldr	r3, [pc, #56]	; (10000f84 <__aeabi_float_init+0x5c>)
10000f4c:	6018      	str	r0, [r3, #0]
}
10000f4e:	bd10      	pop	{r4, pc}
        memcpy(&sf_table, rom_table, SF_TABLE_V1_SIZE);
10000f50:	4c0a      	ldr	r4, [pc, #40]	; (10000f7c <__aeabi_float_init+0x54>)
10000f52:	2254      	movs	r2, #84	; 0x54
10000f54:	0020      	movs	r0, r4
10000f56:	f7ff fd1f 	bl	10000998 <__wrap___aeabi_memcpy>
            sf_table[i] = (uintptr_t)float_table_shim_on_use_helper;
10000f5a:	4b0b      	ldr	r3, [pc, #44]	; (10000f88 <__aeabi_float_init+0x60>)
10000f5c:	6563      	str	r3, [r4, #84]	; 0x54
10000f5e:	65a3      	str	r3, [r4, #88]	; 0x58
10000f60:	65e3      	str	r3, [r4, #92]	; 0x5c
10000f62:	6623      	str	r3, [r4, #96]	; 0x60
10000f64:	6663      	str	r3, [r4, #100]	; 0x64
10000f66:	66a3      	str	r3, [r4, #104]	; 0x68
10000f68:	66e3      	str	r3, [r4, #108]	; 0x6c
10000f6a:	6723      	str	r3, [r4, #112]	; 0x70
10000f6c:	6763      	str	r3, [r4, #116]	; 0x74
10000f6e:	67a3      	str	r3, [r4, #120]	; 0x78
10000f70:	67e3      	str	r3, [r4, #124]	; 0x7c
        sf_table[SF_TABLE_FLOAT2INT/4] = sf_table[SF_TABLE_FLOAT2FIX/4] = (uintptr_t)float_table_shim_on_use_helper;
10000f72:	6223      	str	r3, [r4, #32]
10000f74:	61e3      	str	r3, [r4, #28]
    if (rom_version >= 2) {
10000f76:	e7e5      	b.n	10000f44 <__aeabi_float_init+0x1c>
10000f78:	00004653 	.word	0x00004653
10000f7c:	20003050 	.word	0x20003050
10000f80:	0000334c 	.word	0x0000334c
10000f84:	200394c4 	.word	0x200394c4
10000f88:	10000939 	.word	0x10000939

10000f8c <gpio_set_function>:
// This also clears the input/output/irq override bits.
void gpio_set_function(uint gpio, enum gpio_function fn) {
    invalid_params_if(GPIO, gpio >= NUM_BANK0_GPIOS);
    invalid_params_if(GPIO, fn << IO_BANK0_GPIO0_CTRL_FUNCSEL_LSB & ~IO_BANK0_GPIO0_CTRL_FUNCSEL_BITS);
    // Set input enable on, output disable off
    hw_write_masked(&padsbank0_hw->io[gpio],
10000f8c:	4a09      	ldr	r2, [pc, #36]	; (10000fb4 <gpio_set_function+0x28>)
10000f8e:	0083      	lsls	r3, r0, #2
10000f90:	4694      	mov	ip, r2
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10000f92:	2240      	movs	r2, #64	; 0x40
10000f94:	4463      	add	r3, ip
void gpio_set_function(uint gpio, enum gpio_function fn) {
10000f96:	b510      	push	{r4, lr}
10000f98:	681c      	ldr	r4, [r3, #0]
                   PADS_BANK0_GPIO0_IE_BITS,
                   PADS_BANK0_GPIO0_IE_BITS | PADS_BANK0_GPIO0_OD_BITS
    );
    // Zero all fields apart from fsel; we want this IO to do what the peripheral tells it.
    // This doesn't affect e.g. pullup/pulldown, as these are in pad controls.
    iobank0_hw->io[gpio].ctrl = fn << IO_BANK0_GPIO0_CTRL_FUNCSEL_LSB;
10000f9a:	00c0      	lsls	r0, r0, #3
10000f9c:	4062      	eors	r2, r4
10000f9e:	24c0      	movs	r4, #192	; 0xc0
10000fa0:	4014      	ands	r4, r2
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10000fa2:	2280      	movs	r2, #128	; 0x80
10000fa4:	0152      	lsls	r2, r2, #5
10000fa6:	4313      	orrs	r3, r2
10000fa8:	601c      	str	r4, [r3, #0]
10000faa:	4b03      	ldr	r3, [pc, #12]	; (10000fb8 <gpio_set_function+0x2c>)
10000fac:	469c      	mov	ip, r3
10000fae:	4460      	add	r0, ip
10000fb0:	6041      	str	r1, [r0, #4]
}
10000fb2:	bd10      	pop	{r4, pc}
10000fb4:	4001c004 	.word	0x4001c004
10000fb8:	40014000 	.word	0x40014000

10000fbc <gpio_set_outover>:
    );
}

void gpio_set_outover(uint gpio, uint value) {
    invalid_params_if(GPIO, gpio >= NUM_BANK0_GPIOS);
    hw_write_masked(&iobank0_hw->io[gpio].ctrl,
10000fbc:	4b07      	ldr	r3, [pc, #28]	; (10000fdc <gpio_set_outover+0x20>)
10000fbe:	00c0      	lsls	r0, r0, #3
10000fc0:	469c      	mov	ip, r3
10000fc2:	4460      	add	r0, ip
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10000fc4:	6803      	ldr	r3, [r0, #0]
                   value << IO_BANK0_GPIO0_CTRL_OUTOVER_LSB,
10000fc6:	0209      	lsls	r1, r1, #8
10000fc8:	4059      	eors	r1, r3
10000fca:	23c0      	movs	r3, #192	; 0xc0
10000fcc:	009b      	lsls	r3, r3, #2
10000fce:	4019      	ands	r1, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10000fd0:	2380      	movs	r3, #128	; 0x80
10000fd2:	015b      	lsls	r3, r3, #5
10000fd4:	4318      	orrs	r0, r3
10000fd6:	6001      	str	r1, [r0, #0]
                   IO_BANK0_GPIO0_CTRL_OUTOVER_BITS
    );
}
10000fd8:	4770      	bx	lr
10000fda:	46c0      	nop			; (mov r8, r8)
10000fdc:	40014004 	.word	0x40014004

10000fe0 <irq_set_enabled>:
    invalid_params_if(IRQ, num >= NUM_IRQS);
}

void irq_set_enabled(uint num, bool enabled) {
    check_irq_param(num);
    irq_set_mask_enabled(1u << num, enabled);
10000fe0:	2301      	movs	r3, #1
10000fe2:	4083      	lsls	r3, r0
    check_irq_param(num);
    return 0 != ((1u << num) & *((io_rw_32 *) (PPB_BASE + M0PLUS_NVIC_ISER_OFFSET)));
}

void irq_set_mask_enabled(uint32_t mask, bool enabled) {
    if (enabled) {
10000fe4:	2900      	cmp	r1, #0
10000fe6:	d004      	beq.n	10000ff2 <irq_set_enabled+0x12>
        // Clear pending before enable
        // (if IRQ is actually asserted, it will immediately re-pend)
        *((io_rw_32 *) (PPB_BASE + M0PLUS_NVIC_ICPR_OFFSET)) = mask;
10000fe8:	4a03      	ldr	r2, [pc, #12]	; (10000ff8 <irq_set_enabled+0x18>)
10000fea:	6013      	str	r3, [r2, #0]
        *((io_rw_32 *) (PPB_BASE + M0PLUS_NVIC_ISER_OFFSET)) = mask;
10000fec:	4a03      	ldr	r2, [pc, #12]	; (10000ffc <irq_set_enabled+0x1c>)
10000fee:	6013      	str	r3, [r2, #0]
}
10000ff0:	4770      	bx	lr
    } else {
        *((io_rw_32 *) (PPB_BASE + M0PLUS_NVIC_ICER_OFFSET)) = mask;
10000ff2:	4a03      	ldr	r2, [pc, #12]	; (10001000 <irq_set_enabled+0x20>)
10000ff4:	6013      	str	r3, [r2, #0]
}
10000ff6:	e7fb      	b.n	10000ff0 <irq_set_enabled+0x10>
10000ff8:	e000e280 	.word	0xe000e280
10000ffc:	e000e100 	.word	0xe000e100
10001000:	e000e180 	.word	0xe000e180

10001004 <irq_get_vtable_handler>:
    return (irq_handler_t *) scb_hw->vtor;
10001004:	4b02      	ldr	r3, [pc, #8]	; (10001010 <irq_get_vtable_handler+0xc>)
    return (uintptr_t)raw_handler - (uintptr_t)irq_handler_chain_slots < sizeof(irq_handler_chain_slots);
}

irq_handler_t irq_get_vtable_handler(uint num) {
    check_irq_param(num);
    return get_vtable()[16 + num];
10001006:	3010      	adds	r0, #16
    return (irq_handler_t *) scb_hw->vtor;
10001008:	689b      	ldr	r3, [r3, #8]
    return get_vtable()[16 + num];
1000100a:	0080      	lsls	r0, r0, #2
1000100c:	58c0      	ldr	r0, [r0, r3]
}
1000100e:	4770      	bx	lr
10001010:	e000ed00 	.word	0xe000ed00

10001014 <irq_set_exclusive_handler>:

void irq_set_exclusive_handler(uint num, irq_handler_t handler) {
10001014:	b570      	push	{r4, r5, r6, lr}
10001016:	000d      	movs	r5, r1
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
10001018:	f3ef 8610 	mrs	r6, PRIMASK
    __asm volatile ("cpsid i");
1000101c:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
1000101e:	4a0f      	ldr	r2, [pc, #60]	; (1000105c <irq_set_exclusive_handler+0x48>)
10001020:	6813      	ldr	r3, [r2, #0]
10001022:	2b00      	cmp	r3, #0
10001024:	d0fc      	beq.n	10001020 <irq_set_exclusive_handler+0xc>
    __asm volatile ("dmb");
10001026:	f3bf 8f5f 	dmb	sy
    return (irq_handler_t *) scb_hw->vtor;
1000102a:	4b0d      	ldr	r3, [pc, #52]	; (10001060 <irq_set_exclusive_handler+0x4c>)
    return get_vtable()[16 + num];
1000102c:	3010      	adds	r0, #16
    return (irq_handler_t *) scb_hw->vtor;
1000102e:	689b      	ldr	r3, [r3, #8]
    return get_vtable()[16 + num];
10001030:	0084      	lsls	r4, r0, #2
10001032:	591b      	ldr	r3, [r3, r4]
    check_irq_param(num);
#if !PICO_NO_RAM_VECTOR_TABLE
    spin_lock_t *lock = spin_lock_instance(PICO_SPINLOCK_ID_IRQ);
    uint32_t save = spin_lock_blocking(lock);
    __unused irq_handler_t current = irq_get_vtable_handler(num);
    hard_assert(current == __unhandled_user_irq || current == handler);
10001034:	4a0b      	ldr	r2, [pc, #44]	; (10001064 <irq_set_exclusive_handler+0x50>)
10001036:	4293      	cmp	r3, r2
10001038:	d003      	beq.n	10001042 <irq_set_exclusive_handler+0x2e>
1000103a:	429d      	cmp	r5, r3
1000103c:	d001      	beq.n	10001042 <irq_set_exclusive_handler+0x2e>

#ifdef NDEBUG
extern void hard_assertion_failure();
static inline void hard_assert(bool condition, ...) {
    if (!condition)
        hard_assertion_failure();
1000103e:	f000 fdfd 	bl	10001c3c <hard_assertion_failure>
    return (irq_handler_t *) scb_hw->vtor;
10001042:	4b07      	ldr	r3, [pc, #28]	; (10001060 <irq_set_exclusive_handler+0x4c>)
10001044:	689b      	ldr	r3, [r3, #8]
    get_vtable()[16 + num] = handler;
10001046:	511d      	str	r5, [r3, r4]
10001048:	f3bf 8f5f 	dmb	sy
1000104c:	f3bf 8f5f 	dmb	sy
    *lock = 0;
10001050:	2200      	movs	r2, #0
10001052:	4b02      	ldr	r3, [pc, #8]	; (1000105c <irq_set_exclusive_handler+0x48>)
10001054:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10001056:	f386 8810 	msr	PRIMASK, r6
    set_raw_irq_handler_and_unlock(num, handler, save);
#else
    panic_unsupported();
#endif
}
1000105a:	bd70      	pop	{r4, r5, r6, pc}
1000105c:	d0000124 	.word	0xd0000124
10001060:	e000ed00 	.word	0xe000ed00
10001064:	100001cd 	.word	0x100001cd

10001068 <irq_remove_handler>:
    }
    set_raw_irq_handler_and_unlock(num, vtable_handler, save);
#endif
}

void irq_remove_handler(uint num, irq_handler_t handler) {
10001068:	b5f0      	push	{r4, r5, r6, r7, lr}
1000106a:	46de      	mov	lr, fp
1000106c:	4657      	mov	r7, sl
1000106e:	464e      	mov	r6, r9
10001070:	4645      	mov	r5, r8
10001072:	b5e0      	push	{r5, r6, r7, lr}
10001074:	000c      	movs	r4, r1
10001076:	b083      	sub	sp, #12
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
10001078:	f3ef 8a10 	mrs	sl, PRIMASK
    __asm volatile ("cpsid i");
1000107c:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
1000107e:	4a5e      	ldr	r2, [pc, #376]	; (100011f8 <irq_remove_handler+0x190>)
10001080:	6813      	ldr	r3, [r2, #0]
10001082:	2b00      	cmp	r3, #0
10001084:	d0fc      	beq.n	10001080 <irq_remove_handler+0x18>
    __asm volatile ("dmb");
10001086:	f3bf 8f5f 	dmb	sy
#if !PICO_NO_RAM_VECTOR_TABLE
    spin_lock_t *lock = spin_lock_instance(PICO_SPINLOCK_ID_IRQ);
    uint32_t save = spin_lock_blocking(lock);
    irq_handler_t vtable_handler = get_vtable()[16 + num];
1000108a:	2210      	movs	r2, #16
1000108c:	4691      	mov	r9, r2
1000108e:	4481      	add	r9, r0
10001090:	464a      	mov	r2, r9
    return (irq_handler_t *) scb_hw->vtor;
10001092:	4b5a      	ldr	r3, [pc, #360]	; (100011fc <irq_remove_handler+0x194>)
    irq_handler_t vtable_handler = get_vtable()[16 + num];
10001094:	0096      	lsls	r6, r2, #2
    return (irq_handler_t *) scb_hw->vtor;
10001096:	689b      	ldr	r3, [r3, #8]
    irq_handler_t vtable_handler = get_vtable()[16 + num];
10001098:	599d      	ldr	r5, [r3, r6]
    if (vtable_handler != __unhandled_user_irq && vtable_handler != handler) {
1000109a:	4b59      	ldr	r3, [pc, #356]	; (10001200 <irq_remove_handler+0x198>)
1000109c:	4698      	mov	r8, r3
1000109e:	429d      	cmp	r5, r3
100010a0:	d005      	beq.n	100010ae <irq_remove_handler+0x46>
100010a2:	42a5      	cmp	r5, r4
100010a4:	d016      	beq.n	100010d4 <irq_remove_handler+0x6c>
    return (uintptr_t)raw_handler - (uintptr_t)irq_handler_chain_slots < sizeof(irq_handler_chain_slots);
100010a6:	4f57      	ldr	r7, [pc, #348]	; (10001204 <irq_remove_handler+0x19c>)
100010a8:	1beb      	subs	r3, r5, r7
#if !PICO_DISABLE_SHARED_IRQ_HANDLERS && PICO_MAX_SHARED_IRQ_HANDLERS
        if (is_shared_irq_raw_handler(vtable_handler)) {
100010aa:	2b2f      	cmp	r3, #47	; 0x2f
100010ac:	d914      	bls.n	100010d8 <irq_remove_handler+0x70>
    return (irq_handler_t *) scb_hw->vtor;
100010ae:	4b53      	ldr	r3, [pc, #332]	; (100011fc <irq_remove_handler+0x194>)
100010b0:	689b      	ldr	r3, [r3, #8]
    get_vtable()[16 + num] = handler;
100010b2:	519d      	str	r5, [r3, r6]
100010b4:	f3bf 8f5f 	dmb	sy
100010b8:	f3bf 8f5f 	dmb	sy
    *lock = 0;
100010bc:	2200      	movs	r2, #0
100010be:	4b4e      	ldr	r3, [pc, #312]	; (100011f8 <irq_remove_handler+0x190>)
100010c0:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
100010c2:	f38a 8810 	msr	PRIMASK, sl
    }
    set_raw_irq_handler_and_unlock(num, vtable_handler, save);
#else
    panic_unsupported();
#endif
}
100010c6:	b003      	add	sp, #12
100010c8:	bcf0      	pop	{r4, r5, r6, r7}
100010ca:	46bb      	mov	fp, r7
100010cc:	46b2      	mov	sl, r6
100010ce:	46a9      	mov	r9, r5
100010d0:	46a0      	mov	r8, r4
100010d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        vtable_handler = __unhandled_user_irq;
100010d4:	001d      	movs	r5, r3
100010d6:	e7ea      	b.n	100010ae <irq_remove_handler+0x46>
    return 0 != ((1u << num) & *((io_rw_32 *) (PPB_BASE + M0PLUS_NVIC_ISER_OFFSET)));
100010d8:	2301      	movs	r3, #1
100010da:	4083      	lsls	r3, r0
100010dc:	469b      	mov	fp, r3
100010de:	465a      	mov	r2, fp
100010e0:	4b49      	ldr	r3, [pc, #292]	; (10001208 <irq_remove_handler+0x1a0>)
100010e2:	681b      	ldr	r3, [r3, #0]
100010e4:	401a      	ands	r2, r3
100010e6:	9200      	str	r2, [sp, #0]
        *((io_rw_32 *) (PPB_BASE + M0PLUS_NVIC_ICER_OFFSET)) = mask;
100010e8:	465a      	mov	r2, fp
100010ea:	4b48      	ldr	r3, [pc, #288]	; (1000120c <irq_remove_handler+0x1a4>)
100010ec:	601a      	str	r2, [r3, #0]
    __asm volatile ("dmb");
100010ee:	f3bf 8f5f 	dmb	sy
            uint exception = __get_current_exception();
100010f2:	f7ff f8b8 	bl	10000266 <__get_current_exception>
100010f6:	9001      	str	r0, [sp, #4]
            hard_assert(!exception || exception == num + 16);
100010f8:	2800      	cmp	r0, #0
100010fa:	d003      	beq.n	10001104 <irq_remove_handler+0x9c>
100010fc:	4581      	cmp	r9, r0
100010fe:	d001      	beq.n	10001104 <irq_remove_handler+0x9c>
10001100:	f000 fd9c 	bl	10001c3c <hard_assertion_failure>
    return (void *) (((uintptr_t) addr) & ~0x1);
10001104:	2301      	movs	r3, #1
10001106:	0029      	movs	r1, r5
10001108:	4399      	bics	r1, r3
            while (to_free_slot->handler != handler) {
1000110a:	688b      	ldr	r3, [r1, #8]
1000110c:	42a3      	cmp	r3, r4
1000110e:	d068      	beq.n	100011e2 <irq_remove_handler+0x17a>
10001110:	000a      	movs	r2, r1
10001112:	e007      	b.n	10001124 <irq_remove_handler+0xbc>
                to_free_slot = &irq_handler_chain_slots[to_free_slot->link];
10001114:	0043      	lsls	r3, r0, #1
10001116:	181b      	adds	r3, r3, r0
10001118:	009b      	lsls	r3, r3, #2
1000111a:	18fb      	adds	r3, r7, r3
            while (to_free_slot->handler != handler) {
1000111c:	6898      	ldr	r0, [r3, #8]
1000111e:	42a0      	cmp	r0, r4
10001120:	d011      	beq.n	10001146 <irq_remove_handler+0xde>
                to_free_slot = &irq_handler_chain_slots[to_free_slot->link];
10001122:	001a      	movs	r2, r3
                if (to_free_slot->link < 0) break;
10001124:	2006      	movs	r0, #6
10001126:	5610      	ldrsb	r0, [r2, r0]
10001128:	2800      	cmp	r0, #0
1000112a:	daf3      	bge.n	10001114 <irq_remove_handler+0xac>
    if (enabled) {
1000112c:	9b00      	ldr	r3, [sp, #0]
1000112e:	2b00      	cmp	r3, #0
10001130:	d005      	beq.n	1000113e <irq_remove_handler+0xd6>
        *((io_rw_32 *) (PPB_BASE + M0PLUS_NVIC_ICPR_OFFSET)) = mask;
10001132:	465a      	mov	r2, fp
10001134:	4b36      	ldr	r3, [pc, #216]	; (10001210 <irq_remove_handler+0x1a8>)
10001136:	601a      	str	r2, [r3, #0]
        *((io_rw_32 *) (PPB_BASE + M0PLUS_NVIC_ISER_OFFSET)) = mask;
10001138:	4b33      	ldr	r3, [pc, #204]	; (10001208 <irq_remove_handler+0x1a0>)
1000113a:	601a      	str	r2, [r3, #0]
1000113c:	e7b7      	b.n	100010ae <irq_remove_handler+0x46>
        *((io_rw_32 *) (PPB_BASE + M0PLUS_NVIC_ICER_OFFSET)) = mask;
1000113e:	465a      	mov	r2, fp
10001140:	4b32      	ldr	r3, [pc, #200]	; (1000120c <irq_remove_handler+0x1a4>)
10001142:	601a      	str	r2, [r3, #0]
10001144:	e7b3      	b.n	100010ae <irq_remove_handler+0x46>
                int next_slot_index = to_free_slot->link;
10001146:	2006      	movs	r0, #6
10001148:	5618      	ldrsb	r0, [r3, r0]
                if (next_slot_index >= 0) {
1000114a:	2800      	cmp	r0, #0
1000114c:	db21      	blt.n	10001192 <irq_remove_handler+0x12a>
                    to_free_slot->handler = next_slot->handler;
1000114e:	0042      	lsls	r2, r0, #1
10001150:	1811      	adds	r1, r2, r0
10001152:	0089      	lsls	r1, r1, #2
10001154:	187c      	adds	r4, r7, r1
10001156:	4688      	mov	r8, r1
10001158:	68a1      	ldr	r1, [r4, #8]
1000115a:	6099      	str	r1, [r3, #8]
                    to_free_slot->priority = next_slot->priority;
1000115c:	79e1      	ldrb	r1, [r4, #7]
1000115e:	71d9      	strb	r1, [r3, #7]
                    to_free_slot->link = next_slot->link;
10001160:	2106      	movs	r1, #6
10001162:	5661      	ldrsb	r1, [r4, r1]
10001164:	7199      	strb	r1, [r3, #6]
                    to_free_slot->inst3 = next_slot->link >= 0 ?
10001166:	2900      	cmp	r1, #0
10001168:	db2b      	blt.n	100011c2 <irq_remove_handler+0x15a>
    int32_t i_addr = (*inst) << 21u;
1000116a:	88a4      	ldrh	r4, [r4, #4]
    uint32_t delta = (ui_to - ui_from - 4) / 2;
1000116c:	1af9      	subs	r1, r7, r3
    int32_t i_addr = (*inst) << 21u;
1000116e:	0564      	lsls	r4, r4, #21
    return inst + 2 + i_addr;
10001170:	1524      	asrs	r4, r4, #20
10001172:	4444      	add	r4, r8
    uint32_t delta = (ui_to - ui_from - 4) / 2;
10001174:	1909      	adds	r1, r1, r4
    return 0xe000 | (delta & 0x7ff);
10001176:	24e0      	movs	r4, #224	; 0xe0
10001178:	0509      	lsls	r1, r1, #20
1000117a:	0d49      	lsrs	r1, r1, #21
1000117c:	0224      	lsls	r4, r4, #8
1000117e:	4321      	orrs	r1, r4
                    to_free_slot->inst3 = next_slot->link >= 0 ?
10001180:	8099      	strh	r1, [r3, #4]
                    next_slot->link = irq_hander_chain_free_slot_head;
10001182:	1812      	adds	r2, r2, r0
10001184:	4b23      	ldr	r3, [pc, #140]	; (10001214 <irq_remove_handler+0x1ac>)
10001186:	0092      	lsls	r2, r2, #2
10001188:	18bf      	adds	r7, r7, r2
1000118a:	781a      	ldrb	r2, [r3, #0]
                    irq_hander_chain_free_slot_head = next_slot_index;
1000118c:	7018      	strb	r0, [r3, #0]
                    next_slot->link = irq_hander_chain_free_slot_head;
1000118e:	71ba      	strb	r2, [r7, #6]
                    irq_hander_chain_free_slot_head = next_slot_index;
10001190:	e7cc      	b.n	1000112c <irq_remove_handler+0xc4>
                    if (!exception) {
10001192:	9801      	ldr	r0, [sp, #4]
10001194:	2800      	cmp	r0, #0
10001196:	d117      	bne.n	100011c8 <irq_remove_handler+0x160>
                            prev_slot->link = -1;
10001198:	30ff      	adds	r0, #255	; 0xff
1000119a:	7190      	strb	r0, [r2, #6]
                            prev_slot->inst3 = 0xbd00; // pop {pc}
1000119c:	481e      	ldr	r0, [pc, #120]	; (10001218 <irq_remove_handler+0x1b0>)
1000119e:	8090      	strh	r0, [r2, #4]
                        to_free_slot->link = irq_hander_chain_free_slot_head;
100011a0:	4a1c      	ldr	r2, [pc, #112]	; (10001214 <irq_remove_handler+0x1ac>)
            int to_free_slot_index = to_free_slot - irq_handler_chain_slots;
100011a2:	1bc9      	subs	r1, r1, r7
                        to_free_slot->link = irq_hander_chain_free_slot_head;
100011a4:	7810      	ldrb	r0, [r2, #0]
            int to_free_slot_index = to_free_slot - irq_handler_chain_slots;
100011a6:	1089      	asrs	r1, r1, #2
                        to_free_slot->link = irq_hander_chain_free_slot_head;
100011a8:	7198      	strb	r0, [r3, #6]
            int to_free_slot_index = to_free_slot - irq_handler_chain_slots;
100011aa:	008b      	lsls	r3, r1, #2
100011ac:	185b      	adds	r3, r3, r1
100011ae:	0118      	lsls	r0, r3, #4
100011b0:	181b      	adds	r3, r3, r0
100011b2:	0218      	lsls	r0, r3, #8
100011b4:	181b      	adds	r3, r3, r0
100011b6:	0418      	lsls	r0, r3, #16
100011b8:	181b      	adds	r3, r3, r0
100011ba:	005b      	lsls	r3, r3, #1
100011bc:	185b      	adds	r3, r3, r1
                        irq_hander_chain_free_slot_head = to_free_slot_index;
100011be:	7013      	strb	r3, [r2, #0]
100011c0:	e7b4      	b.n	1000112c <irq_remove_handler+0xc4>
                    to_free_slot->inst3 = next_slot->link >= 0 ?
100011c2:	21bd      	movs	r1, #189	; 0xbd
100011c4:	0209      	lsls	r1, r1, #8
100011c6:	e7db      	b.n	10001180 <irq_remove_handler+0x118>
                        insert_branch_and_link(&to_free_slot->inst3, irq_handler_chain_remove_tail);
100011c8:	4a14      	ldr	r2, [pc, #80]	; (1000121c <irq_remove_handler+0x1b4>)
    from[0] = 0xf000 | ((delta >> 11u) & 0x7ffu);
100011ca:	4915      	ldr	r1, [pc, #84]	; (10001220 <irq_remove_handler+0x1b8>)
                        insert_branch_and_link(&to_free_slot->inst3, irq_handler_chain_remove_tail);
100011cc:	1ad2      	subs	r2, r2, r3
    uint32_t delta = (ui_to - ui_from - 4) / 2;
100011ce:	3a08      	subs	r2, #8
    from[0] = 0xf000 | ((delta >> 11u) & 0x7ffu);
100011d0:	0250      	lsls	r0, r2, #9
100011d2:	0d40      	lsrs	r0, r0, #21
100011d4:	4301      	orrs	r1, r0
100011d6:	8099      	strh	r1, [r3, #4]
    from[1] = 0xf800 | (delta & 0x7ffu);
100011d8:	4912      	ldr	r1, [pc, #72]	; (10001224 <irq_remove_handler+0x1bc>)
    uint32_t delta = (ui_to - ui_from - 4) / 2;
100011da:	0852      	lsrs	r2, r2, #1
    from[1] = 0xf800 | (delta & 0x7ffu);
100011dc:	430a      	orrs	r2, r1
100011de:	80da      	strh	r2, [r3, #6]
}
100011e0:	e7a4      	b.n	1000112c <irq_remove_handler+0xc4>
                int next_slot_index = to_free_slot->link;
100011e2:	2006      	movs	r0, #6
100011e4:	5608      	ldrsb	r0, [r1, r0]
                if (next_slot_index >= 0) {
100011e6:	000b      	movs	r3, r1
100011e8:	2800      	cmp	r0, #0
100011ea:	dab0      	bge.n	1000114e <irq_remove_handler+0xe6>
                    if (!exception) {
100011ec:	9a01      	ldr	r2, [sp, #4]
100011ee:	2a00      	cmp	r2, #0
100011f0:	d1ea      	bne.n	100011c8 <irq_remove_handler+0x160>
                            vtable_handler = __unhandled_user_irq;
100011f2:	4645      	mov	r5, r8
100011f4:	e7d4      	b.n	100011a0 <irq_remove_handler+0x138>
100011f6:	46c0      	nop			; (mov r8, r8)
100011f8:	d0000124 	.word	0xd0000124
100011fc:	e000ed00 	.word	0xe000ed00
10001200:	100001cd 	.word	0x100001cd
10001204:	20002600 	.word	0x20002600
10001208:	e000e100 	.word	0xe000e100
1000120c:	e000e180 	.word	0xe000e180
10001210:	e000e280 	.word	0xe000e280
10001214:	200394df 	.word	0x200394df
10001218:	ffffbd00 	.word	0xffffbd00
1000121c:	2000263a 	.word	0x2000263a
10001220:	fffff000 	.word	0xfffff000
10001224:	fffff800 	.word	0xfffff800

10001228 <irq_set_priority>:

void irq_set_priority(uint num, uint8_t hardware_priority) {
    check_irq_param(num);

    // note that only 32 bit writes are supported
    io_rw_32 *p = (io_rw_32 *)((PPB_BASE + M0PLUS_NVIC_IPR0_OFFSET) + (num & ~3u));
10001228:	2303      	movs	r3, #3
void irq_set_priority(uint num, uint8_t hardware_priority) {
1000122a:	b510      	push	{r4, lr}
    io_rw_32 *p = (io_rw_32 *)((PPB_BASE + M0PLUS_NVIC_IPR0_OFFSET) + (num & ~3u));
1000122c:	0004      	movs	r4, r0
1000122e:	4a07      	ldr	r2, [pc, #28]	; (1000124c <irq_set_priority+0x24>)
    *p = (*p & ~(0xffu << (8 * (num & 3u)))) | (((uint32_t) hardware_priority) << (8 * (num & 3u)));
10001230:	4018      	ands	r0, r3
    io_rw_32 *p = (io_rw_32 *)((PPB_BASE + M0PLUS_NVIC_IPR0_OFFSET) + (num & ~3u));
10001232:	4694      	mov	ip, r2
    *p = (*p & ~(0xffu << (8 * (num & 3u)))) | (((uint32_t) hardware_priority) << (8 * (num & 3u)));
10001234:	00c0      	lsls	r0, r0, #3
    io_rw_32 *p = (io_rw_32 *)((PPB_BASE + M0PLUS_NVIC_IPR0_OFFSET) + (num & ~3u));
10001236:	439c      	bics	r4, r3
    *p = (*p & ~(0xffu << (8 * (num & 3u)))) | (((uint32_t) hardware_priority) << (8 * (num & 3u)));
10001238:	33fc      	adds	r3, #252	; 0xfc
1000123a:	4083      	lsls	r3, r0
    io_rw_32 *p = (io_rw_32 *)((PPB_BASE + M0PLUS_NVIC_IPR0_OFFSET) + (num & ~3u));
1000123c:	4464      	add	r4, ip
    *p = (*p & ~(0xffu << (8 * (num & 3u)))) | (((uint32_t) hardware_priority) << (8 * (num & 3u)));
1000123e:	6822      	ldr	r2, [r4, #0]
10001240:	4081      	lsls	r1, r0
10001242:	439a      	bics	r2, r3
10001244:	0013      	movs	r3, r2
10001246:	430b      	orrs	r3, r1
10001248:	6023      	str	r3, [r4, #0]
}
1000124a:	bd10      	pop	{r4, pc}
1000124c:	e000e400 	.word	0xe000e400

10001250 <irq_add_tail_to_free_list>:

#if !PICO_DISABLE_SHARED_IRQ_HANDLERS && PICO_MAX_SHARED_IRQ_HANDLERS
// used by irq_handler_chain.S to remove the last link in a handler chain after it executes
// note this must be called only with the last slot in a chain (and during the exception)
void irq_add_tail_to_free_list(struct irq_handler_chain_slot *slot) {
10001250:	b570      	push	{r4, r5, r6, lr}
    return (void *) (((uintptr_t) addr) | 0x1);
10001252:	2501      	movs	r5, #1
void irq_add_tail_to_free_list(struct irq_handler_chain_slot *slot) {
10001254:	0004      	movs	r4, r0
    return (void *) (((uintptr_t) addr) | 0x1);
10001256:	4305      	orrs	r5, r0
    irq_handler_t slot_handler = (irq_handler_t) add_thumb_bit(slot);
    assert(is_shared_irq_raw_handler(slot_handler));

    int exception = __get_current_exception();
10001258:	f7ff f805 	bl	10000266 <__get_current_exception>
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
1000125c:	f3ef 8c10 	mrs	ip, PRIMASK
    __asm volatile ("cpsid i");
10001260:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
10001262:	4a24      	ldr	r2, [pc, #144]	; (100012f4 <irq_add_tail_to_free_list+0xa4>)
10001264:	6813      	ldr	r3, [r2, #0]
10001266:	2b00      	cmp	r3, #0
10001268:	d0fc      	beq.n	10001264 <irq_add_tail_to_free_list+0x14>
    __asm volatile ("dmb");
1000126a:	f3bf 8f5f 	dmb	sy
    assert(exception);
    spin_lock_t *lock = spin_lock_instance(PICO_SPINLOCK_ID_IRQ);
    uint32_t save = spin_lock_blocking(lock);
    int slot_index = slot - irq_handler_chain_slots;
1000126e:	4e22      	ldr	r6, [pc, #136]	; (100012f8 <irq_add_tail_to_free_list+0xa8>)
    if (slot_handler == get_vtable()[exception]) {
10001270:	0080      	lsls	r0, r0, #2
    int slot_index = slot - irq_handler_chain_slots;
10001272:	1ba1      	subs	r1, r4, r6
10001274:	1089      	asrs	r1, r1, #2
10001276:	008a      	lsls	r2, r1, #2
10001278:	1852      	adds	r2, r2, r1
1000127a:	0113      	lsls	r3, r2, #4
1000127c:	18d2      	adds	r2, r2, r3
1000127e:	0213      	lsls	r3, r2, #8
10001280:	18d2      	adds	r2, r2, r3
10001282:	0413      	lsls	r3, r2, #16
10001284:	18d3      	adds	r3, r2, r3
    return (irq_handler_t *) scb_hw->vtor;
10001286:	4a1d      	ldr	r2, [pc, #116]	; (100012fc <irq_add_tail_to_free_list+0xac>)
    int slot_index = slot - irq_handler_chain_slots;
10001288:	005b      	lsls	r3, r3, #1
1000128a:	185b      	adds	r3, r3, r1
    return (irq_handler_t *) scb_hw->vtor;
1000128c:	6891      	ldr	r1, [r2, #8]
    if (slot_handler == get_vtable()[exception]) {
1000128e:	5809      	ldr	r1, [r1, r0]
10001290:	42a9      	cmp	r1, r5
10001292:	d01c      	beq.n	100012ce <irq_add_tail_to_free_list+0x7e>
        get_vtable()[exception] = __unhandled_user_irq;
    } else {
        bool __unused found = false;
        // need to find who points at the slot and update it
        for(uint i=0;i<count_of(irq_handler_chain_slots);i++) {
            if (irq_handler_chain_slots[i].link == slot_index) {
10001294:	2206      	movs	r2, #6
10001296:	56b2      	ldrsb	r2, [r6, r2]
10001298:	429a      	cmp	r2, r3
1000129a:	d01c      	beq.n	100012d6 <irq_add_tail_to_free_list+0x86>
1000129c:	2212      	movs	r2, #18
1000129e:	56b2      	ldrsb	r2, [r6, r2]
100012a0:	4293      	cmp	r3, r2
100012a2:	d022      	beq.n	100012ea <irq_add_tail_to_free_list+0x9a>
100012a4:	221e      	movs	r2, #30
100012a6:	56b2      	ldrsb	r2, [r6, r2]
100012a8:	4293      	cmp	r3, r2
100012aa:	d020      	beq.n	100012ee <irq_add_tail_to_free_list+0x9e>
100012ac:	222a      	movs	r2, #42	; 0x2a
100012ae:	56b2      	ldrsb	r2, [r6, r2]
        for(uint i=0;i<count_of(irq_handler_chain_slots);i++) {
100012b0:	2103      	movs	r1, #3
            if (irq_handler_chain_slots[i].link == slot_index) {
100012b2:	429a      	cmp	r2, r3
100012b4:	d010      	beq.n	100012d8 <irq_add_tail_to_free_list+0x88>
            }
        }
        assert(found);
    }
    // add slot to free list
    slot->link = irq_hander_chain_free_slot_head;
100012b6:	4a12      	ldr	r2, [pc, #72]	; (10001300 <irq_add_tail_to_free_list+0xb0>)
100012b8:	7811      	ldrb	r1, [r2, #0]
    irq_hander_chain_free_slot_head = slot_index;
100012ba:	7013      	strb	r3, [r2, #0]
    slot->link = irq_hander_chain_free_slot_head;
100012bc:	71a1      	strb	r1, [r4, #6]
100012be:	f3bf 8f5f 	dmb	sy
    *lock = 0;
100012c2:	2200      	movs	r2, #0
100012c4:	4b0b      	ldr	r3, [pc, #44]	; (100012f4 <irq_add_tail_to_free_list+0xa4>)
100012c6:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
100012c8:	f38c 8810 	msr	PRIMASK, ip
    spin_unlock(lock, save);
}
100012cc:	bd70      	pop	{r4, r5, r6, pc}
    return (irq_handler_t *) scb_hw->vtor;
100012ce:	6892      	ldr	r2, [r2, #8]
        get_vtable()[exception] = __unhandled_user_irq;
100012d0:	490c      	ldr	r1, [pc, #48]	; (10001304 <irq_add_tail_to_free_list+0xb4>)
100012d2:	5011      	str	r1, [r2, r0]
100012d4:	e7ef      	b.n	100012b6 <irq_add_tail_to_free_list+0x66>
        for(uint i=0;i<count_of(irq_handler_chain_slots);i++) {
100012d6:	2100      	movs	r1, #0
                irq_handler_chain_slots[i].link = -1;
100012d8:	004a      	lsls	r2, r1, #1
100012da:	1852      	adds	r2, r2, r1
100012dc:	21ff      	movs	r1, #255	; 0xff
100012de:	0092      	lsls	r2, r2, #2
100012e0:	18b2      	adds	r2, r6, r2
100012e2:	7191      	strb	r1, [r2, #6]
                irq_handler_chain_slots[i].inst3 = 0xbd00; // pop {pc}
100012e4:	4908      	ldr	r1, [pc, #32]	; (10001308 <irq_add_tail_to_free_list+0xb8>)
100012e6:	8091      	strh	r1, [r2, #4]
                break;
100012e8:	e7e5      	b.n	100012b6 <irq_add_tail_to_free_list+0x66>
        for(uint i=0;i<count_of(irq_handler_chain_slots);i++) {
100012ea:	2101      	movs	r1, #1
100012ec:	e7f4      	b.n	100012d8 <irq_add_tail_to_free_list+0x88>
100012ee:	2102      	movs	r1, #2
100012f0:	e7f2      	b.n	100012d8 <irq_add_tail_to_free_list+0x88>
100012f2:	46c0      	nop			; (mov r8, r8)
100012f4:	d0000124 	.word	0xd0000124
100012f8:	20002600 	.word	0x20002600
100012fc:	e000ed00 	.word	0xe000ed00
10001300:	200394df 	.word	0x200394df
10001304:	100001cd 	.word	0x100001cd
10001308:	ffffbd00 	.word	0xffffbd00

1000130c <irq_init_priorities>:
#endif

void irq_init_priorities() {
1000130c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if PICO_DEFAULT_IRQ_PRIORITY != 0
    for (uint irq = 0; irq < NUM_IRQS; irq++) {
1000130e:	2200      	movs	r2, #0
    io_rw_32 *p = (io_rw_32 *)((PPB_BASE + M0PLUS_NVIC_IPR0_OFFSET) + (num & ~3u));
10001310:	2403      	movs	r4, #3
    *p = (*p & ~(0xffu << (8 * (num & 3u)))) | (((uint32_t) hardware_priority) << (8 * (num & 3u)));
10001312:	27ff      	movs	r7, #255	; 0xff
10001314:	2680      	movs	r6, #128	; 0x80
10001316:	0020      	movs	r0, r4
10001318:	003d      	movs	r5, r7
    io_rw_32 *p = (io_rw_32 *)((PPB_BASE + M0PLUS_NVIC_IPR0_OFFSET) + (num & ~3u));
1000131a:	4b09      	ldr	r3, [pc, #36]	; (10001340 <irq_init_priorities+0x34>)
1000131c:	0011      	movs	r1, r2
1000131e:	469c      	mov	ip, r3
    *p = (*p & ~(0xffu << (8 * (num & 3u)))) | (((uint32_t) hardware_priority) << (8 * (num & 3u)));
10001320:	4010      	ands	r0, r2
10001322:	00c0      	lsls	r0, r0, #3
10001324:	4085      	lsls	r5, r0
    io_rw_32 *p = (io_rw_32 *)((PPB_BASE + M0PLUS_NVIC_IPR0_OFFSET) + (num & ~3u));
10001326:	43a1      	bics	r1, r4
10001328:	4461      	add	r1, ip
    *p = (*p & ~(0xffu << (8 * (num & 3u)))) | (((uint32_t) hardware_priority) << (8 * (num & 3u)));
1000132a:	680b      	ldr	r3, [r1, #0]
    for (uint irq = 0; irq < NUM_IRQS; irq++) {
1000132c:	3201      	adds	r2, #1
    *p = (*p & ~(0xffu << (8 * (num & 3u)))) | (((uint32_t) hardware_priority) << (8 * (num & 3u)));
1000132e:	43ab      	bics	r3, r5
10001330:	0035      	movs	r5, r6
10001332:	4085      	lsls	r5, r0
10001334:	432b      	orrs	r3, r5
10001336:	600b      	str	r3, [r1, #0]
    for (uint irq = 0; irq < NUM_IRQS; irq++) {
10001338:	2a20      	cmp	r2, #32
1000133a:	d1ec      	bne.n	10001316 <irq_init_priorities+0xa>
        irq_set_priority(irq, PICO_DEFAULT_IRQ_PRIORITY);
    }
#endif
}
1000133c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000133e:	46c0      	nop			; (mov r8, r8)
10001340:	e000e400 	.word	0xe000e400

10001344 <lock_init>:
    return (spin_lock_t *) (SIO_BASE + SIO_SPINLOCK0_OFFSET + lock_num * 4);
10001344:	4b02      	ldr	r3, [pc, #8]	; (10001350 <lock_init+0xc>)
10001346:	469c      	mov	ip, r3
10001348:	4461      	add	r1, ip
1000134a:	0089      	lsls	r1, r1, #2

#include "pico/lock_core.h"

void lock_init(lock_core_t *core, uint lock_num) {
    assert(lock_num >= 0 && lock_num < NUM_SPIN_LOCKS);
    core->spin_lock = spin_lock_instance(lock_num);
1000134c:	6001      	str	r1, [r0, #0]
}
1000134e:	4770      	bx	lr
10001350:	34000040 	.word	0x34000040

10001354 <core1_trampoline>:

// Default stack for core1 ... if multicore_launch_core1 is not included then .stack1 section will be garbage collected
static uint32_t __attribute__((section(".stack1"))) core1_stack[PICO_CORE1_STACK_SIZE / sizeof(uint32_t)];

static void __attribute__ ((naked)) core1_trampoline() {
    __asm("pop {r0, r1, pc}");
10001354:	bd03      	pop	{r0, r1, pc}
10001356:	46c0      	nop			; (mov r8, r8)

10001358 <core1_wrapper>:
}

int core1_wrapper(int (*entry)(void), void *stack_base) {
10001358:	b510      	push	{r4, lr}
1000135a:	0004      	movs	r4, r0
#if PICO_USE_STACK_GUARDS
    // install core1 stack guard
    runtime_install_stack_guard(stack_base);
#endif
    irq_init_priorities();
1000135c:	f7ff ffd6 	bl	1000130c <irq_init_priorities>
    return (*entry)();
10001360:	47a0      	blx	r4
}
10001362:	bd10      	pop	{r4, pc}

10001364 <multicore_reset_core1>:
    io_rw_32 *power_off_clr = hw_clear_alias(power_off);

    // Hard-reset core 1.
    // Reading back confirms the core 1 reset is in the correct state, but also
    // forces APB IO bridges to fence on any internal store buffering
    *power_off_set = PSM_FRCE_OFF_PROC1_BITS;
10001364:	2280      	movs	r2, #128	; 0x80
10001366:	4b05      	ldr	r3, [pc, #20]	; (1000137c <multicore_reset_core1+0x18>)
10001368:	0252      	lsls	r2, r2, #9
    while (!(*power_off & PSM_FRCE_OFF_PROC1_BITS)) tight_loop_contents();
1000136a:	4905      	ldr	r1, [pc, #20]	; (10001380 <multicore_reset_core1+0x1c>)
    *power_off_set = PSM_FRCE_OFF_PROC1_BITS;
1000136c:	601a      	str	r2, [r3, #0]
    while (!(*power_off & PSM_FRCE_OFF_PROC1_BITS)) tight_loop_contents();
1000136e:	680b      	ldr	r3, [r1, #0]
10001370:	4213      	tst	r3, r2
10001372:	d0fc      	beq.n	1000136e <multicore_reset_core1+0xa>

    // Bring core 1 back out of reset. It will drain its own mailbox FIFO, then push
    // a 0 to our mailbox to tell us it has done this.
    *power_off_clr = PSM_FRCE_OFF_PROC1_BITS;
10001374:	4b03      	ldr	r3, [pc, #12]	; (10001384 <multicore_reset_core1+0x20>)
10001376:	601a      	str	r2, [r3, #0]
}
10001378:	4770      	bx	lr
1000137a:	46c0      	nop			; (mov r8, r8)
1000137c:	40012004 	.word	0x40012004
10001380:	40010004 	.word	0x40010004
10001384:	40013004 	.word	0x40013004

10001388 <multicore_launch_core1>:
    stack_ptr[1] = (uintptr_t) stack_bottom;
    stack_ptr[2] = (uintptr_t) core1_wrapper;
    multicore_launch_core1_raw(core1_trampoline, stack_ptr, scb_hw->vtor);
}

void multicore_launch_core1(void (*entry)(void)) {
10001388:	b530      	push	{r4, r5, lr}
    extern char __StackOneBottom;
    uint32_t *stack_limit = (uint32_t *) &__StackOneBottom;
    // hack to reference core1_stack although that pointer is wrong.... core1_stack should always be <= stack_limit, if not boom!
    uint32_t *stack = core1_stack <= stack_limit ? stack_limit : (uint32_t *) -1;
1000138a:	4a22      	ldr	r2, [pc, #136]	; (10001414 <multicore_launch_core1+0x8c>)
1000138c:	4b22      	ldr	r3, [pc, #136]	; (10001418 <multicore_launch_core1+0x90>)
void multicore_launch_core1(void (*entry)(void)) {
1000138e:	b087      	sub	sp, #28
    uint32_t *stack = core1_stack <= stack_limit ? stack_limit : (uint32_t *) -1;
10001390:	429a      	cmp	r2, r3
10001392:	d201      	bcs.n	10001398 <multicore_launch_core1+0x10>
10001394:	2201      	movs	r2, #1
10001396:	4252      	negs	r2, r2
10001398:	0013      	movs	r3, r2
    stack_ptr[0] = (uintptr_t) entry;
1000139a:	4920      	ldr	r1, [pc, #128]	; (1000141c <multicore_launch_core1+0x94>)
    multicore_launch_core1_with_stack(entry, stack, sizeof(core1_stack));
}

void multicore_launch_core1_raw(void (*entry)(void), uint32_t *sp, uint32_t vector_table) {
    uint32_t cmd_sequence[] = {0, 0, 1, (uintptr_t) vector_table, (uintptr_t) sp, (uintptr_t) entry};
1000139c:	2400      	movs	r4, #0
    stack_ptr[0] = (uintptr_t) entry;
1000139e:	5050      	str	r0, [r2, r1]
    stack_ptr[1] = (uintptr_t) stack_bottom;
100013a0:	3104      	adds	r1, #4
100013a2:	5052      	str	r2, [r2, r1]
    stack_ptr[2] = (uintptr_t) core1_wrapper;
100013a4:	4a1e      	ldr	r2, [pc, #120]	; (10001420 <multicore_launch_core1+0x98>)
100013a6:	491f      	ldr	r1, [pc, #124]	; (10001424 <multicore_launch_core1+0x9c>)
    uint32_t cmd_sequence[] = {0, 0, 1, (uintptr_t) vector_table, (uintptr_t) sp, (uintptr_t) entry};
100013a8:	2000      	movs	r0, #0
    stack_ptr[2] = (uintptr_t) core1_wrapper;
100013aa:	5099      	str	r1, [r3, r2]
    multicore_launch_core1_raw(core1_trampoline, stack_ptr, scb_hw->vtor);
100013ac:	4a1e      	ldr	r2, [pc, #120]	; (10001428 <multicore_launch_core1+0xa0>)
    uint32_t cmd_sequence[] = {0, 0, 1, (uintptr_t) vector_table, (uintptr_t) sp, (uintptr_t) entry};
100013ae:	2100      	movs	r1, #0
    multicore_launch_core1_raw(core1_trampoline, stack_ptr, scb_hw->vtor);
100013b0:	6892      	ldr	r2, [r2, #8]
    uint32_t cmd_sequence[] = {0, 0, 1, (uintptr_t) vector_table, (uintptr_t) sp, (uintptr_t) entry};
100013b2:	9000      	str	r0, [sp, #0]
100013b4:	9101      	str	r1, [sp, #4]
100013b6:	9203      	str	r2, [sp, #12]
    stack_ptr -= 3;
100013b8:	4a18      	ldr	r2, [pc, #96]	; (1000141c <multicore_launch_core1+0x94>)
    uint32_t cmd_sequence[] = {0, 0, 1, (uintptr_t) vector_table, (uintptr_t) sp, (uintptr_t) entry};
100013ba:	2101      	movs	r1, #1
    stack_ptr -= 3;
100013bc:	4694      	mov	ip, r2
100013be:	4463      	add	r3, ip
    uint32_t cmd_sequence[] = {0, 0, 1, (uintptr_t) vector_table, (uintptr_t) sp, (uintptr_t) entry};
100013c0:	9304      	str	r3, [sp, #16]
100013c2:	4b1a      	ldr	r3, [pc, #104]	; (1000142c <multicore_launch_core1+0xa4>)

    uint seq = 0;
100013c4:	2500      	movs	r5, #0
    uint32_t cmd_sequence[] = {0, 0, 1, (uintptr_t) vector_table, (uintptr_t) sp, (uintptr_t) entry};
100013c6:	9305      	str	r3, [sp, #20]
 *  \ingroup multicore_fifo
 *
 * \return true if the FIFO has data in it, false otherwise
 */
static inline bool multicore_fifo_rvalid() {
    return !!(sio_hw->fifo_st & SIO_FIFO_ST_VLD_BITS);
100013c8:	23d0      	movs	r3, #208	; 0xd0
100013ca:	9102      	str	r1, [sp, #8]
100013cc:	061b      	lsls	r3, r3, #24
 *  \ingroup multicore_fifo
 *
 *  @return true if the FIFO is full, false otherwise
 */
static inline bool multicore_fifo_wready() {
    return !!(sio_hw->fifo_st & SIO_FIFO_ST_RDY_BITS);
100013ce:	3002      	adds	r0, #2
    do {
        uint cmd = cmd_sequence[seq];
        // we drain before sending a 0
        if (!cmd) {
100013d0:	2c00      	cmp	r4, #0
100013d2:	d014      	beq.n	100013fe <multicore_launch_core1+0x76>
100013d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    while (!multicore_fifo_wready())
100013d6:	4210      	tst	r0, r2
100013d8:	d0fc      	beq.n	100013d4 <multicore_launch_core1+0x4c>
    sio_hw->fifo_wr = data;
100013da:	655c      	str	r4, [r3, #84]	; 0x54
    __asm volatile ("sev");
100013dc:	bf40      	sev
    return !!(sio_hw->fifo_st & SIO_FIFO_ST_VLD_BITS);
100013de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    while (!multicore_fifo_rvalid())
100013e0:	4211      	tst	r1, r2
100013e2:	d103      	bne.n	100013ec <multicore_launch_core1+0x64>
    __asm volatile ("wfe");
100013e4:	bf20      	wfe
100013e6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
100013e8:	4211      	tst	r1, r2
100013ea:	d0fb      	beq.n	100013e4 <multicore_launch_core1+0x5c>
    return sio_hw->fifo_rd;
100013ec:	6d9a      	ldr	r2, [r3, #88]	; 0x58
            __sev(); // core 1 may be waiting for fifo space
        }
        multicore_fifo_push_blocking(cmd);
        uint32_t response = multicore_fifo_pop_blocking();
        // move to next state on correct response otherwise start over
        seq = cmd == response ? seq + 1 : 0;
100013ee:	42a2      	cmp	r2, r4
100013f0:	d00a      	beq.n	10001408 <multicore_launch_core1+0x80>
100013f2:	2500      	movs	r5, #0
        uint cmd = cmd_sequence[seq];
100013f4:	466c      	mov	r4, sp
100013f6:	00aa      	lsls	r2, r5, #2
100013f8:	58a4      	ldr	r4, [r4, r2]
100013fa:	e7e9      	b.n	100013d0 <multicore_launch_core1+0x48>
 *  \ingroup multicore_fifo
 *
 */
static inline void multicore_fifo_drain() {
    while (multicore_fifo_rvalid())
        (void) sio_hw->fifo_rd;
100013fc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    return !!(sio_hw->fifo_st & SIO_FIFO_ST_VLD_BITS);
100013fe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    while (multicore_fifo_rvalid())
10001400:	4211      	tst	r1, r2
10001402:	d1fb      	bne.n	100013fc <multicore_launch_core1+0x74>
    __asm volatile ("sev");
10001404:	bf40      	sev
    while (!multicore_fifo_wready())
10001406:	e7e5      	b.n	100013d4 <multicore_launch_core1+0x4c>
        seq = cmd == response ? seq + 1 : 0;
10001408:	3501      	adds	r5, #1
    } while (seq < count_of(cmd_sequence));
1000140a:	2d05      	cmp	r5, #5
1000140c:	d9f2      	bls.n	100013f4 <multicore_launch_core1+0x6c>
}
1000140e:	b007      	add	sp, #28
10001410:	bd30      	pop	{r4, r5, pc}
10001412:	46c0      	nop			; (mov r8, r8)
10001414:	20040800 	.word	0x20040800
10001418:	20040000 	.word	0x20040000
1000141c:	000007f4 	.word	0x000007f4
10001420:	000007fc 	.word	0x000007fc
10001424:	10001359 	.word	0x10001359
10001428:	e000ed00 	.word	0xe000ed00
1000142c:	10001355 	.word	0x10001355

10001430 <mutex_init>:

#if !PICO_NO_HARDWARE
static_assert(sizeof(mutex_t) == 8, "");
#endif

void mutex_init(mutex_t *mtx) {
10001430:	b510      	push	{r4, lr}
10001432:	0004      	movs	r4, r0
    lock_init(&mtx->core, next_striped_spin_lock_num());
10001434:	f000 fd4c 	bl	10001ed0 <next_striped_spin_lock_num>
10001438:	0001      	movs	r1, r0
1000143a:	0020      	movs	r0, r4
1000143c:	f7ff ff82 	bl	10001344 <lock_init>
    mtx->owner = -1;
10001440:	23ff      	movs	r3, #255	; 0xff
10001442:	7123      	strb	r3, [r4, #4]
    __asm volatile ("dmb");
10001444:	f3bf 8f5f 	dmb	sy
    __mem_fence_release();
}
10001448:	bd10      	pop	{r4, pc}
1000144a:	46c0      	nop			; (mov r8, r8)

1000144c <ph_merge_nodes>:
        c->sibling = n->child;
        n->child = child_id;
    }
}

static pheap_node_id_t ph_merge_nodes(pheap_t *heap, pheap_node_id_t a, pheap_node_id_t b) {
1000144c:	b570      	push	{r4, r5, r6, lr}
1000144e:	0005      	movs	r5, r0
10001450:	0014      	movs	r4, r2
10001452:	0016      	movs	r6, r2
    if (!a) return b;
10001454:	2900      	cmp	r1, #0
10001456:	d015      	beq.n	10001484 <ph_merge_nodes+0x38>
    if (!b) return a;
10001458:	000c      	movs	r4, r1
1000145a:	2a00      	cmp	r2, #0
1000145c:	d012      	beq.n	10001484 <ph_merge_nodes+0x38>
    if (heap->comparator(heap->user_data, a, b)) {
1000145e:	6880      	ldr	r0, [r0, #8]
10001460:	686b      	ldr	r3, [r5, #4]
10001462:	4798      	blx	r3
10001464:	6829      	ldr	r1, [r5, #0]
10001466:	2800      	cmp	r0, #0
10001468:	d00e      	beq.n	10001488 <ph_merge_nodes+0x3c>
    return heap->nodes + id - 1;
1000146a:	0073      	lsls	r3, r6, #1
1000146c:	199b      	adds	r3, r3, r6
1000146e:	0062      	lsls	r2, r4, #1
10001470:	3b03      	subs	r3, #3
10001472:	1912      	adds	r2, r2, r4
10001474:	18cb      	adds	r3, r1, r3
10001476:	3a03      	subs	r2, #3
    c->parent = parent_id;
10001478:	709c      	strb	r4, [r3, #2]
    return heap->nodes + id - 1;
1000147a:	1888      	adds	r0, r1, r2
    if (!n->child) {
1000147c:	5c8a      	ldrb	r2, [r1, r2]
1000147e:	2a00      	cmp	r2, #0
10001480:	d115      	bne.n	100014ae <ph_merge_nodes+0x62>
        n->child = child_id;
10001482:	7006      	strb	r6, [r0, #0]
        return a;
    } else {
        ph_add_child_node(heap, b, a);
        return b;
    }
}
10001484:	0020      	movs	r0, r4
10001486:	bd70      	pop	{r4, r5, r6, pc}
    return heap->nodes + id - 1;
10001488:	0063      	lsls	r3, r4, #1
1000148a:	191b      	adds	r3, r3, r4
1000148c:	0072      	lsls	r2, r6, #1
1000148e:	3b03      	subs	r3, #3
10001490:	1992      	adds	r2, r2, r6
10001492:	18cb      	adds	r3, r1, r3
10001494:	3a03      	subs	r2, #3
    c->parent = parent_id;
10001496:	709e      	strb	r6, [r3, #2]
    return heap->nodes + id - 1;
10001498:	1888      	adds	r0, r1, r2
    if (!n->child) {
1000149a:	5c8a      	ldrb	r2, [r1, r2]
1000149c:	2a00      	cmp	r2, #0
1000149e:	d102      	bne.n	100014a6 <ph_merge_nodes+0x5a>
        n->child = child_id;
100014a0:	7004      	strb	r4, [r0, #0]
100014a2:	0034      	movs	r4, r6
100014a4:	e7ee      	b.n	10001484 <ph_merge_nodes+0x38>
        c->sibling = n->child;
100014a6:	705a      	strb	r2, [r3, #1]
        n->child = child_id;
100014a8:	7004      	strb	r4, [r0, #0]
100014aa:	0034      	movs	r4, r6
100014ac:	e7ea      	b.n	10001484 <ph_merge_nodes+0x38>
        c->sibling = n->child;
100014ae:	705a      	strb	r2, [r3, #1]
        n->child = child_id;
100014b0:	7006      	strb	r6, [r0, #0]
100014b2:	e7e7      	b.n	10001484 <ph_merge_nodes+0x38>

100014b4 <ph_create>:

#include <stdio.h>
#include <stdlib.h>
#include "pico/util/pheap.h"

pheap_t *ph_create(uint max_nodes, pheap_comparator comparator, void *user_data) {
100014b4:	b5f0      	push	{r4, r5, r6, r7, lr}
100014b6:	46c6      	mov	lr, r8
100014b8:	0005      	movs	r5, r0
100014ba:	000f      	movs	r7, r1
100014bc:	b500      	push	{lr}
    invalid_params_if(PHEAP, !max_nodes || max_nodes >= (1u << sizeof(pheap_node_id_t)));
    pheap_t *heap = calloc(1, sizeof(pheap_t));
100014be:	2110      	movs	r1, #16
100014c0:	2001      	movs	r0, #1
pheap_t *ph_create(uint max_nodes, pheap_comparator comparator, void *user_data) {
100014c2:	0016      	movs	r6, r2
    pheap_t *heap = calloc(1, sizeof(pheap_t));
100014c4:	f000 f9ac 	bl	10001820 <__wrap_calloc>
    heap->max_nodes = max_nodes;
100014c8:	b2eb      	uxtb	r3, r5
    pheap_t *heap = calloc(1, sizeof(pheap_t));
100014ca:	0004      	movs	r4, r0
    heap->max_nodes = max_nodes;
100014cc:	7303      	strb	r3, [r0, #12]
    heap->comparator = comparator;
    heap->nodes = calloc(max_nodes, sizeof(pheap_node_t));
100014ce:	2103      	movs	r1, #3
    heap->comparator = comparator;
100014d0:	6047      	str	r7, [r0, #4]
    heap->nodes = calloc(max_nodes, sizeof(pheap_node_t));
100014d2:	0028      	movs	r0, r5
    heap->max_nodes = max_nodes;
100014d4:	4698      	mov	r8, r3
    heap->nodes = calloc(max_nodes, sizeof(pheap_node_t));
100014d6:	f000 f9a3 	bl	10001820 <__wrap_calloc>
    ph_clear(heap);
    return heap;
}

void ph_clear(pheap_t *heap) {
    heap->root_id = 0;
100014da:	2300      	movs	r3, #0
100014dc:	7363      	strb	r3, [r4, #13]
    heap->free_head_id = 1;
100014de:	3301      	adds	r3, #1
100014e0:	73a3      	strb	r3, [r4, #14]
    heap->free_tail_id = heap->max_nodes;
100014e2:	4643      	mov	r3, r8
100014e4:	21ff      	movs	r1, #255	; 0xff
100014e6:	73e3      	strb	r3, [r4, #15]
    for(uint i = 1; i < heap->max_nodes; i++) {
100014e8:	23fe      	movs	r3, #254	; 0xfe
    heap->nodes = calloc(max_nodes, sizeof(pheap_node_t));
100014ea:	6020      	str	r0, [r4, #0]
    heap->user_data = user_data;
100014ec:	60a6      	str	r6, [r4, #8]
    for(uint i = 1; i < heap->max_nodes; i++) {
100014ee:	4029      	ands	r1, r5
100014f0:	422b      	tst	r3, r5
100014f2:	d006      	beq.n	10001502 <ph_create+0x4e>
100014f4:	1c42      	adds	r2, r0, #1
100014f6:	3bfd      	subs	r3, #253	; 0xfd
        ph_get_node(heap, i)->sibling = i + 1;
100014f8:	3301      	adds	r3, #1
100014fa:	7013      	strb	r3, [r2, #0]
    for(uint i = 1; i < heap->max_nodes; i++) {
100014fc:	3203      	adds	r2, #3
100014fe:	428b      	cmp	r3, r1
10001500:	d3fa      	bcc.n	100014f8 <ph_create+0x44>
    }
    ph_get_node(heap, heap->max_nodes)->sibling = 0;
10001502:	004b      	lsls	r3, r1, #1
10001504:	1859      	adds	r1, r3, r1
10001506:	2300      	movs	r3, #0
10001508:	1840      	adds	r0, r0, r1
1000150a:	3803      	subs	r0, #3
1000150c:	7043      	strb	r3, [r0, #1]
}
1000150e:	0020      	movs	r0, r4
10001510:	bc80      	pop	{r7}
10001512:	46b8      	mov	r8, r7
10001514:	bdf0      	pop	{r4, r5, r6, r7, pc}
10001516:	46c0      	nop			; (mov r8, r8)

10001518 <ph_merge_two_pass>:
void ph_destroy(pheap_t *heap) {
    free(heap->nodes);
    free(heap);
}

pheap_node_id_t ph_merge_two_pass(pheap_t *heap, pheap_node_id_t id) {
10001518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000151a:	46ce      	mov	lr, r9
1000151c:	4647      	mov	r7, r8
1000151e:	0006      	movs	r6, r0
10001520:	000c      	movs	r4, r1
10001522:	b580      	push	{r7, lr}
    if (!id || !ph_get_node(heap, id)->sibling) {
10001524:	2900      	cmp	r1, #0
10001526:	d007      	beq.n	10001538 <ph_merge_two_pass+0x20>
    return heap->nodes + id - 1;
10001528:	004d      	lsls	r5, r1, #1
1000152a:	6803      	ldr	r3, [r0, #0]
1000152c:	186d      	adds	r5, r5, r1
1000152e:	3d03      	subs	r5, #3
10001530:	195a      	adds	r2, r3, r5
10001532:	7857      	ldrb	r7, [r2, #1]
10001534:	2f00      	cmp	r7, #0
10001536:	d104      	bne.n	10001542 <ph_merge_two_pass+0x2a>
        b = ph_get_node(heap, id)->sibling;
        new_node = ph_get_node(heap, b)->sibling;
        ph_get_node(heap, a)->sibling = ph_get_node(heap, b)->sibling = 0;
        return ph_merge_nodes(heap, ph_merge_nodes(heap, a, b), ph_merge_two_pass(heap, new_node));
    }
}
10001538:	0020      	movs	r0, r4
1000153a:	bcc0      	pop	{r6, r7}
1000153c:	46b9      	mov	r9, r7
1000153e:	46b0      	mov	r8, r6
10001540:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10001542:	0079      	lsls	r1, r7, #1
10001544:	19c9      	adds	r1, r1, r7
10001546:	3903      	subs	r1, #3
10001548:	4688      	mov	r8, r1
1000154a:	4443      	add	r3, r8
        new_node = ph_get_node(heap, b)->sibling;
1000154c:	7859      	ldrb	r1, [r3, #1]
1000154e:	4689      	mov	r9, r1
        ph_get_node(heap, a)->sibling = ph_get_node(heap, b)->sibling = 0;
10001550:	2100      	movs	r1, #0
10001552:	7059      	strb	r1, [r3, #1]
10001554:	7051      	strb	r1, [r2, #1]
    if (heap->comparator(heap->user_data, a, b)) {
10001556:	6873      	ldr	r3, [r6, #4]
10001558:	003a      	movs	r2, r7
1000155a:	0021      	movs	r1, r4
1000155c:	6880      	ldr	r0, [r0, #8]
1000155e:	4798      	blx	r3
10001560:	6833      	ldr	r3, [r6, #0]
10001562:	2800      	cmp	r0, #0
10001564:	d014      	beq.n	10001590 <ph_merge_two_pass+0x78>
    return heap->nodes + id - 1;
10001566:	4642      	mov	r2, r8
10001568:	189a      	adds	r2, r3, r2
    c->parent = parent_id;
1000156a:	7094      	strb	r4, [r2, #2]
    return heap->nodes + id - 1;
1000156c:	1959      	adds	r1, r3, r5
    if (!n->child) {
1000156e:	5d5b      	ldrb	r3, [r3, r5]
10001570:	2b00      	cmp	r3, #0
10001572:	d000      	beq.n	10001576 <ph_merge_two_pass+0x5e>
        c->sibling = n->child;
10001574:	7053      	strb	r3, [r2, #1]
        n->child = child_id;
10001576:	700f      	strb	r7, [r1, #0]
10001578:	0027      	movs	r7, r4
        return ph_merge_nodes(heap, ph_merge_nodes(heap, a, b), ph_merge_two_pass(heap, new_node));
1000157a:	4649      	mov	r1, r9
1000157c:	0030      	movs	r0, r6
1000157e:	f7ff ffcb 	bl	10001518 <ph_merge_two_pass>
10001582:	0039      	movs	r1, r7
10001584:	0002      	movs	r2, r0
10001586:	0030      	movs	r0, r6
10001588:	f7ff ff60 	bl	1000144c <ph_merge_nodes>
1000158c:	0004      	movs	r4, r0
1000158e:	e7d3      	b.n	10001538 <ph_merge_two_pass+0x20>
    return heap->nodes + id - 1;
10001590:	4642      	mov	r2, r8
    if (!n->child) {
10001592:	4641      	mov	r1, r8
    return heap->nodes + id - 1;
10001594:	195d      	adds	r5, r3, r5
    c->parent = parent_id;
10001596:	70af      	strb	r7, [r5, #2]
    return heap->nodes + id - 1;
10001598:	189a      	adds	r2, r3, r2
    if (!n->child) {
1000159a:	5c5b      	ldrb	r3, [r3, r1]
1000159c:	2b00      	cmp	r3, #0
1000159e:	d000      	beq.n	100015a2 <ph_merge_two_pass+0x8a>
        c->sibling = n->child;
100015a0:	706b      	strb	r3, [r5, #1]
        n->child = child_id;
100015a2:	7014      	strb	r4, [r2, #0]
100015a4:	e7e9      	b.n	1000157a <ph_merge_two_pass+0x62>
100015a6:	46c0      	nop			; (mov r8, r8)

100015a8 <ph_remove_any_head>:

static pheap_node_id_t ph_remove_any_head(pheap_t *heap, pheap_node_id_t root_id, bool reserve) {
100015a8:	b5f0      	push	{r4, r5, r6, r7, lr}
100015aa:	4657      	mov	r7, sl
100015ac:	4645      	mov	r5, r8
100015ae:	46de      	mov	lr, fp
100015b0:	464e      	mov	r6, r9
100015b2:	b5e0      	push	{r5, r6, r7, lr}
100015b4:	000d      	movs	r5, r1
    return heap->nodes + id - 1;
100015b6:	006b      	lsls	r3, r5, #1
100015b8:	6801      	ldr	r1, [r0, #0]
100015ba:	195b      	adds	r3, r3, r5
100015bc:	1edf      	subs	r7, r3, #3
100015be:	0004      	movs	r4, r0
    assert(root_id);
//    printf("Removing head %d (parent %d sibling %d)\n", root_id, ph_get_node(heap, root_id)->parent, ph_get_node(heap, root_id)->sibling);
    assert(!ph_get_node(heap, root_id)->sibling);
    assert(!ph_get_node(heap, root_id)->parent);
    pheap_node_id_t new_root_id = ph_merge_two_pass(heap, ph_get_node(heap, root_id)->child);
100015c0:	5dc8      	ldrb	r0, [r1, r7]
static pheap_node_id_t ph_remove_any_head(pheap_t *heap, pheap_node_id_t root_id, bool reserve) {
100015c2:	b083      	sub	sp, #12
100015c4:	9201      	str	r2, [sp, #4]
100015c6:	19ca      	adds	r2, r1, r7
    if (!id || !ph_get_node(heap, id)->sibling) {
100015c8:	2800      	cmp	r0, #0
100015ca:	d04c      	beq.n	10001666 <ph_remove_any_head+0xbe>
100015cc:	0043      	lsls	r3, r0, #1
100015ce:	181b      	adds	r3, r3, r0
100015d0:	3b03      	subs	r3, #3
100015d2:	18cb      	adds	r3, r1, r3
100015d4:	785e      	ldrb	r6, [r3, #1]
100015d6:	46b4      	mov	ip, r6
100015d8:	2e00      	cmp	r6, #0
100015da:	d116      	bne.n	1000160a <ph_remove_any_head+0x62>
    if (!reserve) {
100015dc:	9e01      	ldr	r6, [sp, #4]
100015de:	2e00      	cmp	r6, #0
100015e0:	d13e      	bne.n	10001660 <ph_remove_any_head+0xb8>
        if (heap->free_tail_id) {
100015e2:	7be6      	ldrb	r6, [r4, #15]
100015e4:	2e00      	cmp	r6, #0
100015e6:	d004      	beq.n	100015f2 <ph_remove_any_head+0x4a>
            ph_get_node(heap, heap->free_tail_id)->sibling = root_id;
100015e8:	0073      	lsls	r3, r6, #1
100015ea:	199b      	adds	r3, r3, r6
100015ec:	18cb      	adds	r3, r1, r3
100015ee:	3b03      	subs	r3, #3
100015f0:	705d      	strb	r5, [r3, #1]
        }
        heap->free_tail_id = root_id;
100015f2:	73e5      	strb	r5, [r4, #15]
    }
    if (new_root_id) ph_get_node(heap, new_root_id)->parent = 0;
100015f4:	2800      	cmp	r0, #0
100015f6:	d12f      	bne.n	10001658 <ph_remove_any_head+0xb0>
    ph_get_node(heap, root_id)->sibling = 0;
100015f8:	2300      	movs	r3, #0
100015fa:	7053      	strb	r3, [r2, #1]
    return new_root_id;
}
100015fc:	b003      	add	sp, #12
100015fe:	bcf0      	pop	{r4, r5, r6, r7}
10001600:	46bb      	mov	fp, r7
10001602:	46b2      	mov	sl, r6
10001604:	46a9      	mov	r9, r5
10001606:	46a0      	mov	r8, r4
10001608:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000160a:	0072      	lsls	r2, r6, #1
1000160c:	4462      	add	r2, ip
1000160e:	3a03      	subs	r2, #3
10001610:	1889      	adds	r1, r1, r2
        new_node = ph_get_node(heap, b)->sibling;
10001612:	784a      	ldrb	r2, [r1, #1]
10001614:	4690      	mov	r8, r2
        ph_get_node(heap, a)->sibling = ph_get_node(heap, b)->sibling = 0;
10001616:	2200      	movs	r2, #0
10001618:	704a      	strb	r2, [r1, #1]
1000161a:	4691      	mov	r9, r2
1000161c:	705a      	strb	r2, [r3, #1]
        return ph_merge_nodes(heap, ph_merge_nodes(heap, a, b), ph_merge_two_pass(heap, new_node));
1000161e:	0001      	movs	r1, r0
10001620:	0032      	movs	r2, r6
10001622:	0020      	movs	r0, r4
10001624:	f7ff ff12 	bl	1000144c <ph_merge_nodes>
    if (!id || !ph_get_node(heap, id)->sibling) {
10001628:	4643      	mov	r3, r8
        return ph_merge_nodes(heap, ph_merge_nodes(heap, a, b), ph_merge_two_pass(heap, new_node));
1000162a:	4682      	mov	sl, r0
    if (!id || !ph_get_node(heap, id)->sibling) {
1000162c:	2b00      	cmp	r3, #0
1000162e:	d007      	beq.n	10001640 <ph_remove_any_head+0x98>
10001630:	005b      	lsls	r3, r3, #1
10001632:	6821      	ldr	r1, [r4, #0]
10001634:	4443      	add	r3, r8
10001636:	3b03      	subs	r3, #3
10001638:	18cb      	adds	r3, r1, r3
1000163a:	785a      	ldrb	r2, [r3, #1]
1000163c:	2a00      	cmp	r2, #0
1000163e:	d116      	bne.n	1000166e <ph_remove_any_head+0xc6>
        return ph_merge_nodes(heap, ph_merge_nodes(heap, a, b), ph_merge_two_pass(heap, new_node));
10001640:	4642      	mov	r2, r8
10001642:	4651      	mov	r1, sl
10001644:	0020      	movs	r0, r4
10001646:	f7ff ff01 	bl	1000144c <ph_merge_nodes>
1000164a:	6821      	ldr	r1, [r4, #0]
    if (!reserve) {
1000164c:	9b01      	ldr	r3, [sp, #4]
1000164e:	19ca      	adds	r2, r1, r7
10001650:	2b00      	cmp	r3, #0
10001652:	d0c6      	beq.n	100015e2 <ph_remove_any_head+0x3a>
    if (new_root_id) ph_get_node(heap, new_root_id)->parent = 0;
10001654:	2800      	cmp	r0, #0
10001656:	d0cf      	beq.n	100015f8 <ph_remove_any_head+0x50>
10001658:	0043      	lsls	r3, r0, #1
1000165a:	181b      	adds	r3, r3, r0
1000165c:	3b03      	subs	r3, #3
1000165e:	18cb      	adds	r3, r1, r3
10001660:	2100      	movs	r1, #0
10001662:	7099      	strb	r1, [r3, #2]
10001664:	e7c8      	b.n	100015f8 <ph_remove_any_head+0x50>
    if (!reserve) {
10001666:	9b01      	ldr	r3, [sp, #4]
10001668:	2b00      	cmp	r3, #0
1000166a:	d1c5      	bne.n	100015f8 <ph_remove_any_head+0x50>
1000166c:	e7b9      	b.n	100015e2 <ph_remove_any_head+0x3a>
1000166e:	0050      	lsls	r0, r2, #1
10001670:	1880      	adds	r0, r0, r2
10001672:	3803      	subs	r0, #3
10001674:	1809      	adds	r1, r1, r0
        new_node = ph_get_node(heap, b)->sibling;
10001676:	7848      	ldrb	r0, [r1, #1]
10001678:	4683      	mov	fp, r0
        ph_get_node(heap, a)->sibling = ph_get_node(heap, b)->sibling = 0;
1000167a:	4648      	mov	r0, r9
1000167c:	7048      	strb	r0, [r1, #1]
1000167e:	7058      	strb	r0, [r3, #1]
        return ph_merge_nodes(heap, ph_merge_nodes(heap, a, b), ph_merge_two_pass(heap, new_node));
10001680:	4641      	mov	r1, r8
10001682:	0020      	movs	r0, r4
10001684:	f7ff fee2 	bl	1000144c <ph_merge_nodes>
10001688:	4659      	mov	r1, fp
1000168a:	4680      	mov	r8, r0
1000168c:	0020      	movs	r0, r4
1000168e:	f7ff ff43 	bl	10001518 <ph_merge_two_pass>
10001692:	4641      	mov	r1, r8
10001694:	0002      	movs	r2, r0
10001696:	0020      	movs	r0, r4
10001698:	f7ff fed8 	bl	1000144c <ph_merge_nodes>
1000169c:	4680      	mov	r8, r0
1000169e:	e7cf      	b.n	10001640 <ph_remove_any_head+0x98>

100016a0 <ph_remove_head_reserve>:

pheap_node_id_t ph_remove_head_reserve(pheap_t *heap, bool reserve) {
100016a0:	b5f0      	push	{r4, r5, r6, r7, lr}
100016a2:	4657      	mov	r7, sl
100016a4:	4645      	mov	r5, r8
100016a6:	46de      	mov	lr, fp
100016a8:	464e      	mov	r6, r9
100016aa:	b5e0      	push	{r5, r6, r7, lr}
100016ac:	b083      	sub	sp, #12
100016ae:	9101      	str	r1, [sp, #4]
    heap->root_id = ph_merge_nodes(heap, heap->root_id, id);
    return heap->root_id;
}

static inline pheap_node_id_t ph_peek_head(pheap_t *heap) {
    return heap->root_id;
100016b0:	7b45      	ldrb	r5, [r0, #13]
100016b2:	0004      	movs	r4, r0
    return heap->nodes + id - 1;
100016b4:	006b      	lsls	r3, r5, #1
100016b6:	6800      	ldr	r0, [r0, #0]
100016b8:	195b      	adds	r3, r3, r5
100016ba:	1edf      	subs	r7, r3, #3
    pheap_node_id_t new_root_id = ph_merge_two_pass(heap, ph_get_node(heap, root_id)->child);
100016bc:	5dc1      	ldrb	r1, [r0, r7]
100016be:	19c2      	adds	r2, r0, r7
    if (!id || !ph_get_node(heap, id)->sibling) {
100016c0:	2900      	cmp	r1, #0
100016c2:	d04e      	beq.n	10001762 <ph_remove_head_reserve+0xc2>
100016c4:	004b      	lsls	r3, r1, #1
100016c6:	185b      	adds	r3, r3, r1
100016c8:	3b03      	subs	r3, #3
100016ca:	18c3      	adds	r3, r0, r3
100016cc:	785e      	ldrb	r6, [r3, #1]
100016ce:	46b4      	mov	ip, r6
100016d0:	2e00      	cmp	r6, #0
100016d2:	d118      	bne.n	10001706 <ph_remove_head_reserve+0x66>
    if (!reserve) {
100016d4:	9e01      	ldr	r6, [sp, #4]
100016d6:	2e00      	cmp	r6, #0
100016d8:	d140      	bne.n	1000175c <ph_remove_head_reserve+0xbc>
        if (heap->free_tail_id) {
100016da:	7be6      	ldrb	r6, [r4, #15]
100016dc:	2e00      	cmp	r6, #0
100016de:	d004      	beq.n	100016ea <ph_remove_head_reserve+0x4a>
            ph_get_node(heap, heap->free_tail_id)->sibling = root_id;
100016e0:	0073      	lsls	r3, r6, #1
100016e2:	199b      	adds	r3, r3, r6
100016e4:	18c3      	adds	r3, r0, r3
100016e6:	3b03      	subs	r3, #3
100016e8:	705d      	strb	r5, [r3, #1]
        heap->free_tail_id = root_id;
100016ea:	73e5      	strb	r5, [r4, #15]
    if (new_root_id) ph_get_node(heap, new_root_id)->parent = 0;
100016ec:	2900      	cmp	r1, #0
100016ee:	d131      	bne.n	10001754 <ph_remove_head_reserve+0xb4>
    ph_get_node(heap, root_id)->sibling = 0;
100016f0:	2300      	movs	r3, #0
    pheap_node_id_t old_root_id = ph_peek_head(heap);
    heap->root_id = ph_remove_any_head(heap, old_root_id, reserve);
    return old_root_id;
}
100016f2:	0028      	movs	r0, r5
    ph_get_node(heap, root_id)->sibling = 0;
100016f4:	7053      	strb	r3, [r2, #1]
    heap->root_id = ph_remove_any_head(heap, old_root_id, reserve);
100016f6:	7361      	strb	r1, [r4, #13]
}
100016f8:	b003      	add	sp, #12
100016fa:	bcf0      	pop	{r4, r5, r6, r7}
100016fc:	46bb      	mov	fp, r7
100016fe:	46b2      	mov	sl, r6
10001700:	46a9      	mov	r9, r5
10001702:	46a0      	mov	r8, r4
10001704:	bdf0      	pop	{r4, r5, r6, r7, pc}
10001706:	0072      	lsls	r2, r6, #1
10001708:	4462      	add	r2, ip
1000170a:	3a03      	subs	r2, #3
1000170c:	1880      	adds	r0, r0, r2
        new_node = ph_get_node(heap, b)->sibling;
1000170e:	7842      	ldrb	r2, [r0, #1]
10001710:	4690      	mov	r8, r2
        ph_get_node(heap, a)->sibling = ph_get_node(heap, b)->sibling = 0;
10001712:	2200      	movs	r2, #0
10001714:	7042      	strb	r2, [r0, #1]
10001716:	4691      	mov	r9, r2
10001718:	705a      	strb	r2, [r3, #1]
        return ph_merge_nodes(heap, ph_merge_nodes(heap, a, b), ph_merge_two_pass(heap, new_node));
1000171a:	0020      	movs	r0, r4
1000171c:	0032      	movs	r2, r6
1000171e:	f7ff fe95 	bl	1000144c <ph_merge_nodes>
    if (!id || !ph_get_node(heap, id)->sibling) {
10001722:	4643      	mov	r3, r8
        return ph_merge_nodes(heap, ph_merge_nodes(heap, a, b), ph_merge_two_pass(heap, new_node));
10001724:	4682      	mov	sl, r0
    if (!id || !ph_get_node(heap, id)->sibling) {
10001726:	2b00      	cmp	r3, #0
10001728:	d007      	beq.n	1000173a <ph_remove_head_reserve+0x9a>
1000172a:	005b      	lsls	r3, r3, #1
1000172c:	6821      	ldr	r1, [r4, #0]
1000172e:	4443      	add	r3, r8
10001730:	3b03      	subs	r3, #3
10001732:	18cb      	adds	r3, r1, r3
10001734:	785a      	ldrb	r2, [r3, #1]
10001736:	2a00      	cmp	r2, #0
10001738:	d117      	bne.n	1000176a <ph_remove_head_reserve+0xca>
        return ph_merge_nodes(heap, ph_merge_nodes(heap, a, b), ph_merge_two_pass(heap, new_node));
1000173a:	4642      	mov	r2, r8
1000173c:	4651      	mov	r1, sl
1000173e:	0020      	movs	r0, r4
10001740:	f7ff fe84 	bl	1000144c <ph_merge_nodes>
    if (!reserve) {
10001744:	9b01      	ldr	r3, [sp, #4]
        return ph_merge_nodes(heap, ph_merge_nodes(heap, a, b), ph_merge_two_pass(heap, new_node));
10001746:	0001      	movs	r1, r0
10001748:	6820      	ldr	r0, [r4, #0]
1000174a:	19c2      	adds	r2, r0, r7
    if (!reserve) {
1000174c:	2b00      	cmp	r3, #0
1000174e:	d0c4      	beq.n	100016da <ph_remove_head_reserve+0x3a>
    if (new_root_id) ph_get_node(heap, new_root_id)->parent = 0;
10001750:	2900      	cmp	r1, #0
10001752:	d0cd      	beq.n	100016f0 <ph_remove_head_reserve+0x50>
10001754:	004b      	lsls	r3, r1, #1
10001756:	185b      	adds	r3, r3, r1
10001758:	3b03      	subs	r3, #3
1000175a:	18c3      	adds	r3, r0, r3
1000175c:	2000      	movs	r0, #0
1000175e:	7098      	strb	r0, [r3, #2]
10001760:	e7c6      	b.n	100016f0 <ph_remove_head_reserve+0x50>
    if (!reserve) {
10001762:	9b01      	ldr	r3, [sp, #4]
10001764:	2b00      	cmp	r3, #0
10001766:	d1c3      	bne.n	100016f0 <ph_remove_head_reserve+0x50>
10001768:	e7b7      	b.n	100016da <ph_remove_head_reserve+0x3a>
1000176a:	0050      	lsls	r0, r2, #1
1000176c:	1880      	adds	r0, r0, r2
1000176e:	3803      	subs	r0, #3
10001770:	1809      	adds	r1, r1, r0
        new_node = ph_get_node(heap, b)->sibling;
10001772:	7848      	ldrb	r0, [r1, #1]
10001774:	4683      	mov	fp, r0
        ph_get_node(heap, a)->sibling = ph_get_node(heap, b)->sibling = 0;
10001776:	4648      	mov	r0, r9
10001778:	7048      	strb	r0, [r1, #1]
1000177a:	7058      	strb	r0, [r3, #1]
        return ph_merge_nodes(heap, ph_merge_nodes(heap, a, b), ph_merge_two_pass(heap, new_node));
1000177c:	4641      	mov	r1, r8
1000177e:	0020      	movs	r0, r4
10001780:	f7ff fe64 	bl	1000144c <ph_merge_nodes>
10001784:	4659      	mov	r1, fp
10001786:	4680      	mov	r8, r0
10001788:	0020      	movs	r0, r4
1000178a:	f7ff fec5 	bl	10001518 <ph_merge_two_pass>
1000178e:	4641      	mov	r1, r8
10001790:	0002      	movs	r2, r0
10001792:	0020      	movs	r0, r4
10001794:	f7ff fe5a 	bl	1000144c <ph_merge_nodes>
10001798:	4680      	mov	r8, r0
1000179a:	e7ce      	b.n	1000173a <ph_remove_head_reserve+0x9a>

1000179c <ph_delete>:

#include <stdio.h>
bool ph_delete(pheap_t *heap, pheap_node_id_t id) {
1000179c:	b570      	push	{r4, r5, r6, lr}
1000179e:	0004      	movs	r4, r0
    // 1) trivial cases
    if (!id) return false;
100017a0:	2900      	cmp	r1, #0
100017a2:	d02c      	beq.n	100017fe <ph_delete+0x62>
    if (id == heap->root_id) {
100017a4:	7b43      	ldrb	r3, [r0, #13]
100017a6:	428b      	cmp	r3, r1
100017a8:	d02e      	beq.n	10001808 <ph_delete+0x6c>
100017aa:	6805      	ldr	r5, [r0, #0]
100017ac:	0048      	lsls	r0, r1, #1
100017ae:	1840      	adds	r0, r0, r1
100017b0:	3803      	subs	r0, #3
100017b2:	1828      	adds	r0, r5, r0
        ph_remove_head(heap);
        return true;
    }
    // 2) unlink the node from the tree
    pheap_node_t *node = ph_get_node(heap, id);
    if (!node->parent) return false; // not in tree
100017b4:	7882      	ldrb	r2, [r0, #2]
100017b6:	2a00      	cmp	r2, #0
100017b8:	d021      	beq.n	100017fe <ph_delete+0x62>
100017ba:	0053      	lsls	r3, r2, #1
100017bc:	189b      	adds	r3, r3, r2
100017be:	3b03      	subs	r3, #3
    pheap_node_t *parent = ph_get_node(heap, node->parent);
    if (parent->child == id) {
100017c0:	5cea      	ldrb	r2, [r5, r3]
100017c2:	18ee      	adds	r6, r5, r3
100017c4:	428a      	cmp	r2, r1
100017c6:	d102      	bne.n	100017ce <ph_delete+0x32>
100017c8:	e01b      	b.n	10001802 <ph_delete+0x66>
                prev_sibling->sibling = node->sibling;
                found = true;
                break;
            }
            prev_sibling_id = prev_sibling->sibling;
        } while (prev_sibling_id);
100017ca:	2a00      	cmp	r2, #0
100017cc:	d008      	beq.n	100017e0 <ph_delete+0x44>
100017ce:	0053      	lsls	r3, r2, #1
100017d0:	189b      	adds	r3, r3, r2
100017d2:	3b03      	subs	r3, #3
100017d4:	18eb      	adds	r3, r5, r3
            if (prev_sibling->sibling == id) {
100017d6:	785a      	ldrb	r2, [r3, #1]
100017d8:	428a      	cmp	r2, r1
100017da:	d1f6      	bne.n	100017ca <ph_delete+0x2e>
                prev_sibling->sibling = node->sibling;
100017dc:	7842      	ldrb	r2, [r0, #1]
100017de:	705a      	strb	r2, [r3, #1]
        assert(found);
    }
    node->sibling = node->parent = 0;
100017e0:	2300      	movs	r3, #0
//    ph_dump(heap, NULL, NULL);
    // 3) remove it from the head of its own subtree
    pheap_node_id_t new_sub_tree = ph_remove_any_head(heap, id, false);
100017e2:	2200      	movs	r2, #0
    node->sibling = node->parent = 0;
100017e4:	7083      	strb	r3, [r0, #2]
100017e6:	7043      	strb	r3, [r0, #1]
    pheap_node_id_t new_sub_tree = ph_remove_any_head(heap, id, false);
100017e8:	0020      	movs	r0, r4
100017ea:	f7ff fedd 	bl	100015a8 <ph_remove_any_head>
    assert(new_sub_tree != heap->root_id);
    heap->root_id = ph_merge_nodes(heap, heap->root_id, new_sub_tree);
100017ee:	7b61      	ldrb	r1, [r4, #13]
    pheap_node_id_t new_sub_tree = ph_remove_any_head(heap, id, false);
100017f0:	0002      	movs	r2, r0
    heap->root_id = ph_merge_nodes(heap, heap->root_id, new_sub_tree);
100017f2:	0020      	movs	r0, r4
100017f4:	f7ff fe2a 	bl	1000144c <ph_merge_nodes>
100017f8:	7360      	strb	r0, [r4, #13]
    return true;
100017fa:	2001      	movs	r0, #1
100017fc:	e000      	b.n	10001800 <ph_delete+0x64>
    if (!id) return false;
100017fe:	2000      	movs	r0, #0
}
10001800:	bd70      	pop	{r4, r5, r6, pc}
        parent->child = node->sibling;
10001802:	7843      	ldrb	r3, [r0, #1]
10001804:	7033      	strb	r3, [r6, #0]
10001806:	e7eb      	b.n	100017e0 <ph_delete+0x44>
    heap->root_id = ph_remove_any_head(heap, old_root_id, reserve);
10001808:	2200      	movs	r2, #0
1000180a:	0019      	movs	r1, r3
1000180c:	f7ff fecc 	bl	100015a8 <ph_remove_any_head>
10001810:	7360      	strb	r0, [r4, #13]
        return true;
10001812:	2001      	movs	r0, #1
10001814:	e7f4      	b.n	10001800 <ph_delete+0x64>
10001816:	46c0      	nop			; (mov r8, r8)

10001818 <__wrap_malloc>:
        panic("Out of memory");
    }
#endif
}

void *__wrap_malloc(size_t size) {
10001818:	b510      	push	{r4, lr}
#if PICO_USE_MALLOC_MUTEX
    mutex_enter_blocking(&malloc_mutex);
#endif
    void *rc = __real_malloc(size);
1000181a:	f002 fd07 	bl	1000422c <malloc>
        printf("malloc %d %p->%p\n", (uint) size, rc, ((uint8_t *) rc) + size);
    }
#endif
    check_alloc(rc, size);
    return rc;
}
1000181e:	bd10      	pop	{r4, pc}

10001820 <__wrap_calloc>:

void *__wrap_calloc(size_t count, size_t size) {
10001820:	b510      	push	{r4, lr}
#if PICO_USE_MALLOC_MUTEX
    mutex_enter_blocking(&malloc_mutex);
#endif
    void *rc = __real_calloc(count, size);
10001822:	f002 fca3 	bl	1000416c <calloc>
        printf("calloc %d %p->%p\n", (uint) (count * size), rc, ((uint8_t *) rc) + size);
    }
#endif
    check_alloc(rc, size);
    return rc;
}
10001826:	bd10      	pop	{r4, pc}

10001828 <pio_add_program>:
    uint32_t program_mask = (1u << program->length) - 1;
    _used_instruction_space[pio_get_index(pio)] |= program_mask << offset;
}

// these assert if unable
uint pio_add_program(PIO pio, const pio_program_t *program) {
10001828:	b5f0      	push	{r4, r5, r6, r7, lr}
1000182a:	46d6      	mov	lr, sl
1000182c:	464f      	mov	r7, r9
1000182e:	4646      	mov	r6, r8
10001830:	4688      	mov	r8, r1
10001832:	b5c0      	push	{r6, r7, lr}
10001834:	2405      	movs	r4, #5
10001836:	0006      	movs	r6, r0
    uint32_t save = hw_claim_lock();
10001838:	f7ff f8e6 	bl	10000a08 <hw_claim_lock>
1000183c:	4643      	mov	r3, r8
1000183e:	791f      	ldrb	r7, [r3, #4]
10001840:	571c      	ldrsb	r4, [r3, r4]
 * \param pio The PIO instance; either \ref pio0 or \ref pio1
 * \return the PIO instance number (either 0 or 1)
 */
static inline uint pio_get_index(PIO pio) {
    assert(pio == pio0 || pio == pio1);
    return pio == pio1 ? 1 : 0;
10001842:	4b28      	ldr	r3, [pc, #160]	; (100018e4 <pio_add_program+0xbc>)
10001844:	4681      	mov	r9, r0
10001846:	18f0      	adds	r0, r6, r3
10001848:	4243      	negs	r3, r0
1000184a:	4158      	adcs	r0, r3
    uint32_t used_mask = _used_instruction_space[pio_get_index(pio)];
1000184c:	4b26      	ldr	r3, [pc, #152]	; (100018e8 <pio_add_program+0xc0>)
1000184e:	469a      	mov	sl, r3
10001850:	0083      	lsls	r3, r0, #2
10001852:	469c      	mov	ip, r3
10001854:	4653      	mov	r3, sl
10001856:	4662      	mov	r2, ip
10001858:	5898      	ldr	r0, [r3, r2]
    uint32_t program_mask = (1u << program->length) - 1;
1000185a:	2201      	movs	r2, #1
        if (program->origin > 32 - program->length) return -1;
1000185c:	2320      	movs	r3, #32
    uint32_t program_mask = (1u << program->length) - 1;
1000185e:	40ba      	lsls	r2, r7
        if (program->origin > 32 - program->length) return -1;
10001860:	1bdb      	subs	r3, r3, r7
    uint32_t program_mask = (1u << program->length) - 1;
10001862:	3a01      	subs	r2, #1
    if (program->origin >= 0) {
10001864:	2c00      	cmp	r4, #0
10001866:	db32      	blt.n	100018ce <pio_add_program+0xa6>
        if (program->origin > 32 - program->length) return -1;
10001868:	429c      	cmp	r4, r3
1000186a:	dc2d      	bgt.n	100018c8 <pio_add_program+0xa0>
        return used_mask & (program_mask << program->origin) ? -1 : program->origin;
1000186c:	40a2      	lsls	r2, r4
1000186e:	0015      	movs	r5, r2
10001870:	4210      	tst	r0, r2
10001872:	d129      	bne.n	100018c8 <pio_add_program+0xa0>
    for (uint i = 0; i < program->length; ++i) {
10001874:	2f00      	cmp	r7, #0
10001876:	d01a      	beq.n	100018ae <pio_add_program+0x86>
        uint16_t instr = program->instructions[i];
10001878:	4643      	mov	r3, r8
1000187a:	785a      	ldrb	r2, [r3, #1]
1000187c:	7819      	ldrb	r1, [r3, #0]
1000187e:	0212      	lsls	r2, r2, #8
10001880:	4311      	orrs	r1, r2
10001882:	4642      	mov	r2, r8
10001884:	789b      	ldrb	r3, [r3, #2]
10001886:	78d2      	ldrb	r2, [r2, #3]
10001888:	041b      	lsls	r3, r3, #16
1000188a:	430b      	orrs	r3, r1
1000188c:	0612      	lsls	r2, r2, #24
1000188e:	431a      	orrs	r2, r3
10001890:	4690      	mov	r8, r2
    for (uint i = 0; i < program->length; ++i) {
10001892:	2200      	movs	r2, #0
        uint16_t instr = program->instructions[i];
10001894:	4641      	mov	r1, r8
10001896:	0053      	lsls	r3, r2, #1
10001898:	5ac9      	ldrh	r1, [r1, r3]
        pio->instr_mem[offset + i] = pio_instr_bits_jmp != _pio_major_instr_bits(instr) ? instr : instr + offset;
1000189a:	0b4b      	lsrs	r3, r1, #13
1000189c:	d100      	bne.n	100018a0 <pio_add_program+0x78>
1000189e:	1909      	adds	r1, r1, r4
100018a0:	1913      	adds	r3, r2, r4
100018a2:	3312      	adds	r3, #18
100018a4:	009b      	lsls	r3, r3, #2
    for (uint i = 0; i < program->length; ++i) {
100018a6:	3201      	adds	r2, #1
        pio->instr_mem[offset + i] = pio_instr_bits_jmp != _pio_major_instr_bits(instr) ? instr : instr + offset;
100018a8:	5199      	str	r1, [r3, r6]
    for (uint i = 0; i < program->length; ++i) {
100018aa:	4297      	cmp	r7, r2
100018ac:	d8f2      	bhi.n	10001894 <pio_add_program+0x6c>
    _used_instruction_space[pio_get_index(pio)] |= program_mask << offset;
100018ae:	4653      	mov	r3, sl
100018b0:	4662      	mov	r2, ip
100018b2:	4305      	orrs	r5, r0
100018b4:	509d      	str	r5, [r3, r2]
    int offset = _pio_find_offset_for_program(pio, program);
    if (offset < 0) {
        panic("No program space");
    }
    _pio_add_program_at_offset(pio, program, offset);
    hw_claim_unlock(save);
100018b6:	4648      	mov	r0, r9
100018b8:	f7ff f8b2 	bl	10000a20 <hw_claim_unlock>
    return offset;
}
100018bc:	0020      	movs	r0, r4
100018be:	bce0      	pop	{r5, r6, r7}
100018c0:	46ba      	mov	sl, r7
100018c2:	46b1      	mov	r9, r6
100018c4:	46a8      	mov	r8, r5
100018c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        panic("No program space");
100018c8:	4808      	ldr	r0, [pc, #32]	; (100018ec <pio_add_program+0xc4>)
100018ca:	f000 f99f 	bl	10001c0c <panic>
        for (int i = 32 - program->length; i >= 0; i--) {
100018ce:	2b00      	cmp	r3, #0
100018d0:	da02      	bge.n	100018d8 <pio_add_program+0xb0>
100018d2:	e7f9      	b.n	100018c8 <pio_add_program+0xa0>
100018d4:	3b01      	subs	r3, #1
100018d6:	d3f7      	bcc.n	100018c8 <pio_add_program+0xa0>
            if (!(used_mask & (program_mask << (uint) i))) {
100018d8:	0015      	movs	r5, r2
100018da:	409d      	lsls	r5, r3
100018dc:	001c      	movs	r4, r3
100018de:	4205      	tst	r5, r0
100018e0:	d1f8      	bne.n	100018d4 <pio_add_program+0xac>
100018e2:	e7c7      	b.n	10001874 <pio_add_program+0x4c>
100018e4:	afd00000 	.word	0xafd00000
100018e8:	20039354 	.word	0x20039354
100018ec:	10004ba8 	.word	0x10004ba8

100018f0 <pio_clear_instruction_memory>:
    assert(program_mask == (_used_instruction_space[pio_get_index(pio)] & program_mask));
    _used_instruction_space[pio_get_index(pio)] &= ~program_mask;
    hw_claim_unlock(save);
}

void pio_clear_instruction_memory(PIO pio) {
100018f0:	b510      	push	{r4, lr}
100018f2:	0004      	movs	r4, r0
    uint32_t save = hw_claim_lock();
100018f4:	f7ff f888 	bl	10000a08 <hw_claim_lock>
100018f8:	4b09      	ldr	r3, [pc, #36]	; (10001920 <pio_clear_instruction_memory+0x30>)
    _used_instruction_space[pio_get_index(pio)] = 0;
100018fa:	2100      	movs	r1, #0
100018fc:	18e3      	adds	r3, r4, r3
100018fe:	425a      	negs	r2, r3
10001900:	4153      	adcs	r3, r2
10001902:	4a08      	ldr	r2, [pc, #32]	; (10001924 <pio_clear_instruction_memory+0x34>)
10001904:	009b      	lsls	r3, r3, #2
10001906:	5099      	str	r1, [r3, r2]
    for(uint i=0;i<PIO_INSTRUCTION_COUNT;i++) {
10001908:	2300      	movs	r3, #0
        pio->instr_mem[i] = pio_encode_jmp(i);
1000190a:	001a      	movs	r2, r3
1000190c:	3212      	adds	r2, #18
1000190e:	0092      	lsls	r2, r2, #2
10001910:	5113      	str	r3, [r2, r4]
    for(uint i=0;i<PIO_INSTRUCTION_COUNT;i++) {
10001912:	3301      	adds	r3, #1
10001914:	2b20      	cmp	r3, #32
10001916:	d1f8      	bne.n	1000190a <pio_clear_instruction_memory+0x1a>
    }
    hw_claim_unlock(save);
10001918:	f7ff f882 	bl	10000a20 <hw_claim_unlock>
}
1000191c:	bd10      	pop	{r4, pc}
1000191e:	46c0      	nop			; (mov r8, r8)
10001920:	afd00000 	.word	0xafd00000
10001924:	20039354 	.word	0x20039354

10001928 <pio_sm_set_consecutive_pindirs>:
        pin_mask &= pin_mask - 1;
    }
    pio->sm[sm].pinctrl = pinctrl_saved;
}

void pio_sm_set_consecutive_pindirs(PIO pio, uint sm, uint pin, uint count, bool is_out) {
10001928:	b5f0      	push	{r4, r5, r6, r7, lr}
1000192a:	464e      	mov	r6, r9
1000192c:	4645      	mov	r5, r8
1000192e:	46de      	mov	lr, fp
10001930:	4657      	mov	r7, sl
10001932:	468a      	mov	sl, r1
    assert(pin < 32u);
    uint32_t pinctrl_saved = pio->sm[sm].pinctrl;
10001934:	0049      	lsls	r1, r1, #1
void pio_sm_set_consecutive_pindirs(PIO pio, uint sm, uint pin, uint count, bool is_out) {
10001936:	b5e0      	push	{r5, r6, r7, lr}
    uint32_t pinctrl_saved = pio->sm[sm].pinctrl;
10001938:	000d      	movs	r5, r1
void pio_sm_set_consecutive_pindirs(PIO pio, uint sm, uint pin, uint count, bool is_out) {
1000193a:	4680      	mov	r8, r0
    uint32_t pinctrl_saved = pio->sm[sm].pinctrl;
1000193c:	4455      	add	r5, sl
1000193e:	00ed      	lsls	r5, r5, #3
10001940:	4445      	add	r5, r8
10001942:	4689      	mov	r9, r1
10001944:	0029      	movs	r1, r5
void pio_sm_set_consecutive_pindirs(PIO pio, uint sm, uint pin, uint count, bool is_out) {
10001946:	ac09      	add	r4, sp, #36	; 0x24
10001948:	7826      	ldrb	r6, [r4, #0]
    uint32_t pinctrl_saved = pio->sm[sm].pinctrl;
1000194a:	31dc      	adds	r1, #220	; 0xdc
    uint pindir_val = is_out ? 0x1f : 0;
1000194c:	1e74      	subs	r4, r6, #1
1000194e:	41a6      	sbcs	r6, r4
    uint32_t pinctrl_saved = pio->sm[sm].pinctrl;
10001950:	6808      	ldr	r0, [r1, #0]
    uint pindir_val = is_out ? 0x1f : 0;
10001952:	4274      	negs	r4, r6
    uint32_t pinctrl_saved = pio->sm[sm].pinctrl;
10001954:	4684      	mov	ip, r0
    uint pindir_val = is_out ? 0x1f : 0;
10001956:	4814      	ldr	r0, [pc, #80]	; (100019a8 <pio_sm_set_consecutive_pindirs+0x80>)
10001958:	261f      	movs	r6, #31
1000195a:	4683      	mov	fp, r0
1000195c:	4026      	ands	r6, r4
1000195e:	445e      	add	r6, fp
    while (count > 5) {
10001960:	2b05      	cmp	r3, #5
10001962:	d90c      	bls.n	1000197e <pio_sm_set_consecutive_pindirs+0x56>
        pio->sm[sm].pinctrl = (5u << PIO_SM0_PINCTRL_SET_COUNT_LSB) | (pin << PIO_SM0_PINCTRL_SET_BASE_LSB);
10001964:	20a0      	movs	r0, #160	; 0xa0
        pio_sm_exec(pio, sm, pio_encode_set(pio_pindirs, pindir_val));
        count -= 5;
        pin = (pin + 5) & 0x1f;
10001966:	271f      	movs	r7, #31
        pio->sm[sm].pinctrl = (5u << PIO_SM0_PINCTRL_SET_COUNT_LSB) | (pin << PIO_SM0_PINCTRL_SET_BASE_LSB);
10001968:	0540      	lsls	r0, r0, #21
 * \param sm State machine index (0..3)
 * \param instr the encoded PIO instruction
 */
inline static void pio_sm_exec(PIO pio, uint sm, uint instr) {
    check_sm_param(sm);
    pio->sm[sm].instr = instr;
1000196a:	35d8      	adds	r5, #216	; 0xd8
1000196c:	0154      	lsls	r4, r2, #5
1000196e:	4304      	orrs	r4, r0
        pin = (pin + 5) & 0x1f;
10001970:	3205      	adds	r2, #5
        count -= 5;
10001972:	3b05      	subs	r3, #5
        pio->sm[sm].pinctrl = (5u << PIO_SM0_PINCTRL_SET_COUNT_LSB) | (pin << PIO_SM0_PINCTRL_SET_BASE_LSB);
10001974:	600c      	str	r4, [r1, #0]
        pin = (pin + 5) & 0x1f;
10001976:	403a      	ands	r2, r7
10001978:	602e      	str	r6, [r5, #0]
    while (count > 5) {
1000197a:	2b05      	cmp	r3, #5
1000197c:	d8f6      	bhi.n	1000196c <pio_sm_set_consecutive_pindirs+0x44>
    }
    pio->sm[sm].pinctrl = (count << PIO_SM0_PINCTRL_SET_COUNT_LSB) | (pin << PIO_SM0_PINCTRL_SET_BASE_LSB);
1000197e:	4649      	mov	r1, r9
10001980:	4451      	add	r1, sl
10001982:	00c9      	lsls	r1, r1, #3
10001984:	4441      	add	r1, r8
10001986:	0152      	lsls	r2, r2, #5
10001988:	069b      	lsls	r3, r3, #26
1000198a:	4313      	orrs	r3, r2
1000198c:	000a      	movs	r2, r1
1000198e:	0008      	movs	r0, r1
10001990:	32dc      	adds	r2, #220	; 0xdc
10001992:	6013      	str	r3, [r2, #0]
    pio_sm_exec(pio, sm, pio_encode_set(pio_pindirs, pindir_val));
    pio->sm[sm].pinctrl = pinctrl_saved;
10001994:	4663      	mov	r3, ip
10001996:	30d8      	adds	r0, #216	; 0xd8
10001998:	6006      	str	r6, [r0, #0]
1000199a:	6013      	str	r3, [r2, #0]
}
1000199c:	bcf0      	pop	{r4, r5, r6, r7}
1000199e:	46bb      	mov	fp, r7
100019a0:	46b2      	mov	sl, r6
100019a2:	46a9      	mov	r9, r5
100019a4:	46a0      	mov	r8, r4
100019a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
100019a8:	0000e080 	.word	0x0000e080

100019ac <pio_sm_init>:

void pio_sm_init(PIO pio, uint sm, uint initial_pc, const pio_sm_config *config) {
100019ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    pio->ctrl = (pio->ctrl & ~(1u << sm)) | (!!enabled << sm);
100019ae:	2501      	movs	r5, #1
100019b0:	408d      	lsls	r5, r1
100019b2:	6804      	ldr	r4, [r0, #0]
100019b4:	43ac      	bics	r4, r5
    pio->sm[sm].clkdiv = config->clkdiv;
100019b6:	004d      	lsls	r5, r1, #1
    pio->ctrl = (pio->ctrl & ~(1u << sm)) | (!!enabled << sm);
100019b8:	6004      	str	r4, [r0, #0]
    pio->sm[sm].clkdiv = config->clkdiv;
100019ba:	186c      	adds	r4, r5, r1
100019bc:	00e4      	lsls	r4, r4, #3
100019be:	1904      	adds	r4, r0, r4
100019c0:	0026      	movs	r6, r4
100019c2:	36c8      	adds	r6, #200	; 0xc8
    // Halt the machine, set some sensible defaults
    pio_sm_set_enabled(pio, sm, false);

    if (config) {
100019c4:	2b00      	cmp	r3, #0
100019c6:	d02a      	beq.n	10001a1e <pio_sm_init+0x72>
100019c8:	681f      	ldr	r7, [r3, #0]
    pio->sm[sm].pinctrl = config->pinctrl;
100019ca:	34dc      	adds	r4, #220	; 0xdc
    pio->sm[sm].clkdiv = config->clkdiv;
100019cc:	6037      	str	r7, [r6, #0]
    pio->sm[sm].execctrl = config->execctrl;
100019ce:	685f      	ldr	r7, [r3, #4]
100019d0:	6077      	str	r7, [r6, #4]
    pio->sm[sm].shiftctrl = config->shiftctrl;
100019d2:	689f      	ldr	r7, [r3, #8]
    pio->sm[sm].pinctrl = config->pinctrl;
100019d4:	68db      	ldr	r3, [r3, #12]
    pio->sm[sm].shiftctrl = config->shiftctrl;
100019d6:	60b7      	str	r7, [r6, #8]
    pio->sm[sm].pinctrl = config->pinctrl;
100019d8:	6023      	str	r3, [r4, #0]
 * \param sm State machine index (0..3)
 */
static inline void pio_sm_clear_fifos(PIO pio, uint sm) {
    // changing the FIFO join state clears the fifo
    check_sm_param(sm);
    hw_xor_bits(&pio->sm[sm].shiftctrl, PIO_SM0_SHIFTCTRL_FJOIN_RX_BITS);
100019da:	186d      	adds	r5, r5, r1
100019dc:	00eb      	lsls	r3, r5, #3
100019de:	001d      	movs	r5, r3
100019e0:	2480      	movs	r4, #128	; 0x80
100019e2:	35d0      	adds	r5, #208	; 0xd0
100019e4:	1945      	adds	r5, r0, r5
100019e6:	0164      	lsls	r4, r4, #5
100019e8:	432c      	orrs	r4, r5
100019ea:	2580      	movs	r5, #128	; 0x80
100019ec:	062d      	lsls	r5, r5, #24
100019ee:	6025      	str	r5, [r4, #0]
100019f0:	6025      	str	r5, [r4, #0]
    const uint32_t fdebug_sm_mask =
            (1u << PIO_FDEBUG_TXOVER_LSB) |
            (1u << PIO_FDEBUG_RXUNDER_LSB) |
            (1u << PIO_FDEBUG_TXSTALL_LSB) |
            (1u << PIO_FDEBUG_RXSTALL_LSB);
    pio->fdebug = fdebug_sm_mask << sm;
100019f2:	4c11      	ldr	r4, [pc, #68]	; (10001a38 <pio_sm_init+0x8c>)
    pio->ctrl |= 1u << (PIO_CTRL_SM_RESTART_LSB + sm);
100019f4:	1d0d      	adds	r5, r1, #4
100019f6:	408c      	lsls	r4, r1
100019f8:	6084      	str	r4, [r0, #8]
100019fa:	2401      	movs	r4, #1
100019fc:	0027      	movs	r7, r4
100019fe:	40af      	lsls	r7, r5
10001a00:	003d      	movs	r5, r7
    pio->ctrl |= 1u << (PIO_CTRL_CLKDIV_RESTART_LSB + sm);
10001a02:	3108      	adds	r1, #8
10001a04:	408c      	lsls	r4, r1
        assert(arg2 && arg2 <= 32);
    } else {
        assert(arg2 <= 31);
    }
#endif
    return instr_bits | (arg1 << 5u) | (arg2 & 0x1fu);
10001a06:	211f      	movs	r1, #31
    pio->ctrl |= 1u << (PIO_CTRL_SM_RESTART_LSB + sm);
10001a08:	6806      	ldr	r6, [r0, #0]
10001a0a:	400a      	ands	r2, r1
10001a0c:	4335      	orrs	r5, r6
10001a0e:	6005      	str	r5, [r0, #0]
    pio->ctrl |= 1u << (PIO_CTRL_CLKDIV_RESTART_LSB + sm);
10001a10:	6805      	ldr	r5, [r0, #0]
10001a12:	432c      	orrs	r4, r5
10001a14:	6004      	str	r4, [r0, #0]
    pio->sm[sm].instr = instr;
10001a16:	18c0      	adds	r0, r0, r3
10001a18:	30d8      	adds	r0, #216	; 0xd8
10001a1a:	6002      	str	r2, [r0, #0]

    // Finally, clear some internal SM state
    pio_sm_restart(pio, sm);
    pio_sm_clkdiv_restart(pio, sm);
    pio_sm_exec(pio, sm, pio_encode_jmp(initial_pc));
}
10001a1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    pio->sm[sm].clkdiv = config->clkdiv;
10001a1e:	2780      	movs	r7, #128	; 0x80
10001a20:	027f      	lsls	r7, r7, #9
10001a22:	6037      	str	r7, [r6, #0]
    pio->sm[sm].execctrl = config->execctrl;
10001a24:	27f8      	movs	r7, #248	; 0xf8
10001a26:	027f      	lsls	r7, r7, #9
10001a28:	6077      	str	r7, [r6, #4]
    pio->sm[sm].shiftctrl = config->shiftctrl;
10001a2a:	27c0      	movs	r7, #192	; 0xc0
    pio->sm[sm].pinctrl = config->pinctrl;
10001a2c:	34dc      	adds	r4, #220	; 0xdc
    pio->sm[sm].shiftctrl = config->shiftctrl;
10001a2e:	033f      	lsls	r7, r7, #12
10001a30:	60b7      	str	r7, [r6, #8]
    pio->sm[sm].pinctrl = config->pinctrl;
10001a32:	6023      	str	r3, [r4, #0]
10001a34:	e7d1      	b.n	100019da <pio_sm_init+0x2e>
10001a36:	46c0      	nop			; (mov r8, r8)
10001a38:	01010101 	.word	0x01010101

10001a3c <running_on_fpga>:
#include "hardware/address_mapped.h"
#include "hardware/regs/tbman.h"
#include "hardware/regs/sysinfo.h"

bool running_on_fpga() {
    return !!((*(io_ro_32 *)TBMAN_BASE) & TBMAN_PLATFORM_FPGA_BITS);
10001a3c:	4b02      	ldr	r3, [pc, #8]	; (10001a48 <running_on_fpga+0xc>)
10001a3e:	6818      	ldr	r0, [r3, #0]
10001a40:	0780      	lsls	r0, r0, #30
10001a42:	0fc0      	lsrs	r0, r0, #31
}
10001a44:	4770      	bx	lr
10001a46:	46c0      	nop			; (mov r8, r8)
10001a48:	4006c000 	.word	0x4006c000

10001a4c <pll_init>:
// For MHZ definitions etc
#include "hardware/clocks.h"
#include "hardware/pll.h"

/// \tag::pll_init_calculations[]
void pll_init(PLL pll, uint32_t refdiv, uint32_t vco_freq, uint32_t post_div1, uint8_t post_div2) {
10001a4c:	b5f0      	push	{r4, r5, r6, r7, lr}
10001a4e:	46c6      	mov	lr, r8
10001a50:	b500      	push	{lr}
10001a52:	001e      	movs	r6, r3
10001a54:	ab06      	add	r3, sp, #24
10001a56:	781f      	ldrb	r7, [r3, #0]
    // Turn off PLL in case it is already running
    pll->pwr = 0xffffffff;
10001a58:	2301      	movs	r3, #1
10001a5a:	425b      	negs	r3, r3
10001a5c:	6043      	str	r3, [r0, #4]
    pll->fbdiv_int = 0;
10001a5e:	2300      	movs	r3, #0
void pll_init(PLL pll, uint32_t refdiv, uint32_t vco_freq, uint32_t post_div1, uint8_t post_div2) {
10001a60:	0004      	movs	r4, r0
    pll->fbdiv_int = 0;
10001a62:	6083      	str	r3, [r0, #8]

    uint32_t ref_mhz = XOSC_MHZ / refdiv;
    pll->cs = refdiv;
10001a64:	6001      	str	r1, [r0, #0]
    uint32_t ref_mhz = XOSC_MHZ / refdiv;
10001a66:	200c      	movs	r0, #12
void pll_init(PLL pll, uint32_t refdiv, uint32_t vco_freq, uint32_t post_div1, uint8_t post_div2) {
10001a68:	4690      	mov	r8, r2
    uint32_t ref_mhz = XOSC_MHZ / refdiv;
10001a6a:	f7fe fc83 	bl	10000374 <__wrap___aeabi_uidiv>

    // What are we multiplying the reference clock by to get the vco freq
    // (The regs are called div, because you divide the vco output and compare it to the refclk)
    uint32_t fbdiv = vco_freq / (ref_mhz * MHZ);
10001a6e:	0141      	lsls	r1, r0, #5
10001a70:	1a09      	subs	r1, r1, r0
10001a72:	018d      	lsls	r5, r1, #6
10001a74:	1a69      	subs	r1, r5, r1
10001a76:	00c9      	lsls	r1, r1, #3
10001a78:	1809      	adds	r1, r1, r0
10001a7a:	0189      	lsls	r1, r1, #6
10001a7c:	4640      	mov	r0, r8
10001a7e:	f7fe fc79 	bl	10000374 <__wrap___aeabi_uidiv>
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10001a82:	21c0      	movs	r1, #192	; 0xc0

    // Turn on PLL
    uint32_t power = PLL_PWR_PD_BITS | // Main power
                     PLL_PWR_VCOPD_BITS; // VCO Power

    hw_clear_bits(&pll->pwr, power);
10001a84:	1d23      	adds	r3, r4, #4
10001a86:	0189      	lsls	r1, r1, #6
10001a88:	4319      	orrs	r1, r3
10001a8a:	2321      	movs	r3, #33	; 0x21
    pll->fbdiv_int = fbdiv;
10001a8c:	60a0      	str	r0, [r4, #8]
10001a8e:	600b      	str	r3, [r1, #0]

    // Wait for PLL to lock
    while (!(pll->cs & PLL_CS_LOCK_BITS)) tight_loop_contents();
10001a90:	6822      	ldr	r2, [r4, #0]
10001a92:	2a00      	cmp	r2, #0
10001a94:	dafc      	bge.n	10001a90 <pll_init+0x44>
10001a96:	2308      	movs	r3, #8

    // Set up post dividers - div1 feeds into div2 so if div1 is 5 and div2 is 2 then you get a divide by 10
    uint32_t pdiv = (post_div1 << PLL_PRIM_POSTDIV1_LSB) |
                    (post_div2 << PLL_PRIM_POSTDIV2_LSB);
10001a98:	033f      	lsls	r7, r7, #12
    uint32_t pdiv = (post_div1 << PLL_PRIM_POSTDIV1_LSB) |
10001a9a:	0436      	lsls	r6, r6, #16
10001a9c:	433e      	orrs	r6, r7
    pll->prim = pdiv;
10001a9e:	60e6      	str	r6, [r4, #12]
10001aa0:	600b      	str	r3, [r1, #0]

    // Turn on post divider
    hw_clear_bits(&pll->pwr, PLL_PWR_POSTDIVPD_BITS);
/// \end::pll_init_finish[]
}
10001aa2:	bc80      	pop	{r7}
10001aa4:	46b8      	mov	r8, r7
10001aa6:	bdf0      	pop	{r4, r5, r6, r7, pc}

10001aa8 <_out_char>:
    (void) idx;
    (void) maxlen;
}

// internal _putchar wrapper
static inline void _out_char(char character, void *buffer, size_t idx, size_t maxlen) {
10001aa8:	b510      	push	{r4, lr}
    (void) buffer;
    (void) idx;
    (void) maxlen;
    if (character) {
10001aaa:	2800      	cmp	r0, #0
10001aac:	d100      	bne.n	10001ab0 <_out_char+0x8>
        _putchar(character);
    }
}
10001aae:	bd10      	pop	{r4, pc}
    putchar(character);
10001ab0:	f000 f996 	bl	10001de0 <__wrap_putchar>
}
10001ab4:	e7fb      	b.n	10001aae <_out_char+0x6>
10001ab6:	46c0      	nop			; (mov r8, r8)

10001ab8 <weak_raw_vprintf>:
    bool rc = weak_raw_vprintf(fmt, va);
    va_end(va);
    return rc;
}

bool weak_raw_vprintf(const char *fmt, va_list args) {
10001ab8:	b510      	push	{r4, lr}
    if (lazy_vsnprintf) {
10001aba:	4a09      	ldr	r2, [pc, #36]	; (10001ae0 <weak_raw_vprintf+0x28>)
bool weak_raw_vprintf(const char *fmt, va_list args) {
10001abc:	0003      	movs	r3, r0
    if (lazy_vsnprintf) {
10001abe:	6814      	ldr	r4, [r2, #0]
bool weak_raw_vprintf(const char *fmt, va_list args) {
10001ac0:	b084      	sub	sp, #16
    if (lazy_vsnprintf) {
10001ac2:	2c00      	cmp	r4, #0
10001ac4:	d008      	beq.n	10001ad8 <weak_raw_vprintf+0x20>
        char buffer[1];
        lazy_vsnprintf(_out_char, buffer, (size_t) -1, fmt, args);
10001ac6:	2201      	movs	r2, #1
10001ac8:	9100      	str	r1, [sp, #0]
10001aca:	4806      	ldr	r0, [pc, #24]	; (10001ae4 <weak_raw_vprintf+0x2c>)
10001acc:	4252      	negs	r2, r2
10001ace:	a903      	add	r1, sp, #12
10001ad0:	47a0      	blx	r4
        return true;
10001ad2:	2001      	movs	r0, #1
    } else {
        puts(fmt);
        return false;
    }
}
10001ad4:	b004      	add	sp, #16
10001ad6:	bd10      	pop	{r4, pc}
        puts(fmt);
10001ad8:	f000 f990 	bl	10001dfc <__wrap_puts>
        return false;
10001adc:	2000      	movs	r0, #0
10001ade:	e7f9      	b.n	10001ad4 <weak_raw_vprintf+0x1c>
10001ae0:	200394a8 	.word	0x200394a8
10001ae4:	10001aa9 	.word	0x10001aa9

10001ae8 <runtime_init>:
                   | (0x7 << 1) // size 2^(7 + 1) = 256
                   | (subregion_select << 8)
                   | 0x10000000; // XN = disable instruction fetch; no other bits means no permissions
}

void runtime_init(void) {
10001ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10001aea:	4a2b      	ldr	r2, [pc, #172]	; (10001b98 <runtime_init+0xb0>)
10001aec:	4b2b      	ldr	r3, [pc, #172]	; (10001b9c <runtime_init+0xb4>)
10001aee:	492c      	ldr	r1, [pc, #176]	; (10001ba0 <runtime_init+0xb8>)
10001af0:	601a      	str	r2, [r3, #0]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10001af2:	4a2c      	ldr	r2, [pc, #176]	; (10001ba4 <runtime_init+0xbc>)
10001af4:	4b2c      	ldr	r3, [pc, #176]	; (10001ba8 <runtime_init+0xc0>)
10001af6:	601a      	str	r2, [r3, #0]
10001af8:	0014      	movs	r4, r2
10001afa:	688b      	ldr	r3, [r1, #8]
10001afc:	439c      	bics	r4, r3
10001afe:	d1fb      	bne.n	10001af8 <runtime_init+0x10>
    extern void (*__preinit_array_end)();

    // Call each function in the list.
    // We have to take the address of the symbols, as __preinit_array_start *is*
    // the first function pointer, not the address of it.
    for (void (**p)() = &__preinit_array_start; p < &__preinit_array_end; ++p) {
10001b00:	4d2a      	ldr	r5, [pc, #168]	; (10001bac <runtime_init+0xc4>)
10001b02:	4e2b      	ldr	r6, [pc, #172]	; (10001bb0 <runtime_init+0xc8>)
10001b04:	42b5      	cmp	r5, r6
10001b06:	d208      	bcs.n	10001b1a <runtime_init+0x32>
10001b08:	3e01      	subs	r6, #1
10001b0a:	1b76      	subs	r6, r6, r5
10001b0c:	08b6      	lsrs	r6, r6, #2
        (*p)();
10001b0e:	cd08      	ldmia	r5!, {r3}
10001b10:	4798      	blx	r3
    for (void (**p)() = &__preinit_array_start; p < &__preinit_array_end; ++p) {
10001b12:	0023      	movs	r3, r4
10001b14:	3401      	adds	r4, #1
10001b16:	42b3      	cmp	r3, r6
10001b18:	d1f9      	bne.n	10001b0e <runtime_init+0x26>
    }

    // After calling preinit we have enough runtime to do the exciting maths
    // in clocks_init
    clocks_init();
10001b1a:	f7ff f82f 	bl	10000b7c <clocks_init>
10001b1e:	4a25      	ldr	r2, [pc, #148]	; (10001bb4 <runtime_init+0xcc>)
10001b20:	4b21      	ldr	r3, [pc, #132]	; (10001ba8 <runtime_init+0xc0>)
10001b22:	601a      	str	r2, [r3, #0]
10001b24:	4a1e      	ldr	r2, [pc, #120]	; (10001ba0 <runtime_init+0xb8>)
10001b26:	6893      	ldr	r3, [r2, #8]
10001b28:	43db      	mvns	r3, r3
10001b2a:	01db      	lsls	r3, r3, #7
10001b2c:	09dc      	lsrs	r4, r3, #7
10001b2e:	2b00      	cmp	r3, #0
10001b30:	d1f9      	bne.n	10001b26 <runtime_init+0x3e>
    unreset_block_wait(RESETS_RESET_BITS);

#if !PICO_IE_26_29_UNCHANGED_ON_RESET
    // after resetting BANK0 we should disable IE on 26-29
    hw_clear_alias(padsbank0_hw)->io[26] = hw_clear_alias(padsbank0_hw)->io[27] =
            hw_clear_alias(padsbank0_hw)->io[28] = hw_clear_alias(padsbank0_hw)->io[29] = PADS_BANK0_GPIO0_IE_BITS;
10001b32:	2240      	movs	r2, #64	; 0x40
10001b34:	4b20      	ldr	r3, [pc, #128]	; (10001bb8 <runtime_init+0xd0>)

    extern mutex_t __mutex_array_start;
    extern mutex_t __mutex_array_end;

    // the first function pointer, not the address of it.
    for (mutex_t *m = &__mutex_array_start; m < &__mutex_array_end; m++) {
10001b36:	4d21      	ldr	r5, [pc, #132]	; (10001bbc <runtime_init+0xd4>)
10001b38:	4f21      	ldr	r7, [pc, #132]	; (10001bc0 <runtime_init+0xd8>)
            hw_clear_alias(padsbank0_hw)->io[28] = hw_clear_alias(padsbank0_hw)->io[29] = PADS_BANK0_GPIO0_IE_BITS;
10001b3a:	679a      	str	r2, [r3, #120]	; 0x78
10001b3c:	675a      	str	r2, [r3, #116]	; 0x74
    hw_clear_alias(padsbank0_hw)->io[26] = hw_clear_alias(padsbank0_hw)->io[27] =
10001b3e:	671a      	str	r2, [r3, #112]	; 0x70
10001b40:	66da      	str	r2, [r3, #108]	; 0x6c
    for (mutex_t *m = &__mutex_array_start; m < &__mutex_array_end; m++) {
10001b42:	42bd      	cmp	r5, r7
10001b44:	d20b      	bcs.n	10001b5e <runtime_init+0x76>
10001b46:	2600      	movs	r6, #0
10001b48:	3f01      	subs	r7, #1
10001b4a:	1b7f      	subs	r7, r7, r5
10001b4c:	08ff      	lsrs	r7, r7, #3
        mutex_init(m);
10001b4e:	0028      	movs	r0, r5
10001b50:	f7ff fc6e 	bl	10001430 <mutex_init>
    for (mutex_t *m = &__mutex_array_start; m < &__mutex_array_end; m++) {
10001b54:	3508      	adds	r5, #8
10001b56:	0033      	movs	r3, r6
10001b58:	3601      	adds	r6, #1
10001b5a:	42bb      	cmp	r3, r7
10001b5c:	d1f7      	bne.n	10001b4e <runtime_init+0x66>
    }

#if !(PICO_NO_RAM_VECTOR_TABLE || PICO_NO_FLASH)
    __builtin_memcpy(ram_vector_table, (uint32_t *) scb_hw->vtor, sizeof(ram_vector_table));
10001b5e:	4e19      	ldr	r6, [pc, #100]	; (10001bc4 <runtime_init+0xdc>)
10001b60:	4d19      	ldr	r5, [pc, #100]	; (10001bc8 <runtime_init+0xe0>)
10001b62:	22c0      	movs	r2, #192	; 0xc0
10001b64:	68a9      	ldr	r1, [r5, #8]
10001b66:	0030      	movs	r0, r6
10001b68:	f7fe ff16 	bl	10000998 <__wrap___aeabi_memcpy>
    scb_hw->vtor = (intptr_t) ram_vector_table;
10001b6c:	60ae      	str	r6, [r5, #8]
    // install core0 stack guard
    extern char __StackBottom;
    runtime_install_stack_guard(&__StackBottom);
#endif

    spin_locks_reset();
10001b6e:	f000 f9a1 	bl	10001eb4 <spin_locks_reset>
    irq_init_priorities();
10001b72:	f7ff fbcb 	bl	1000130c <irq_init_priorities>
    alarm_pool_init_default();
10001b76:	f000 fb45 	bl	10002204 <alarm_pool_init_default>
    extern void (*__init_array_end)();

    // Call each function in the list.
    // We have to take the address of the symbols, as __init_array_start *is*
    // the first function pointer, not the address of it.
    for (void (**p)() = &__init_array_start; p < &__init_array_end; ++p) {
10001b7a:	4d14      	ldr	r5, [pc, #80]	; (10001bcc <runtime_init+0xe4>)
10001b7c:	4e14      	ldr	r6, [pc, #80]	; (10001bd0 <runtime_init+0xe8>)
10001b7e:	42b5      	cmp	r5, r6
10001b80:	d208      	bcs.n	10001b94 <runtime_init+0xac>
10001b82:	3e01      	subs	r6, #1
10001b84:	1b76      	subs	r6, r6, r5
10001b86:	08b6      	lsrs	r6, r6, #2
        (*p)();
10001b88:	cd08      	ldmia	r5!, {r3}
10001b8a:	4798      	blx	r3
    for (void (**p)() = &__init_array_start; p < &__init_array_end; ++p) {
10001b8c:	0023      	movs	r3, r4
10001b8e:	3401      	adds	r4, #1
10001b90:	429e      	cmp	r6, r3
10001b92:	d1f9      	bne.n	10001b88 <runtime_init+0xa0>
    }

}
10001b94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10001b96:	46c0      	nop			; (mov r8, r8)
10001b98:	ffffcdbf 	.word	0xffffcdbf
10001b9c:	4000e000 	.word	0x4000e000
10001ba0:	4000c000 	.word	0x4000c000
10001ba4:	003c7ffe 	.word	0x003c7ffe
10001ba8:	4000f000 	.word	0x4000f000
10001bac:	20002f38 	.word	0x20002f38
10001bb0:	20002f48 	.word	0x20002f48
10001bb4:	01ffffff 	.word	0x01ffffff
10001bb8:	4001f000 	.word	0x4001f000
10001bbc:	20002f30 	.word	0x20002f30
10001bc0:	20002f38 	.word	0x20002f38
10001bc4:	20000000 	.word	0x20000000
10001bc8:	e000ed00 	.word	0xe000ed00
10001bcc:	20002f48 	.word	0x20002f48
10001bd0:	20002f50 	.word	0x20002f50

10001bd4 <_sbrk>:
void *_sbrk(int incr) {
    extern char end; /* Set by linker.  */
    static char *heap_end;
    char *prev_heap_end;

    if (heap_end == 0)
10001bd4:	4a09      	ldr	r2, [pc, #36]	; (10001bfc <_sbrk+0x28>)
void *_sbrk(int incr) {
10001bd6:	0003      	movs	r3, r0
    if (heap_end == 0)
10001bd8:	6810      	ldr	r0, [r2, #0]
10001bda:	2800      	cmp	r0, #0
10001bdc:	d005      	beq.n	10001bea <_sbrk+0x16>
        heap_end = &end;

    prev_heap_end = heap_end;
    char *next_heap_end = heap_end + incr;

    if (__builtin_expect(next_heap_end >= (&__StackLimit), false)) {
10001bde:	4908      	ldr	r1, [pc, #32]	; (10001c00 <_sbrk+0x2c>)
    char *next_heap_end = heap_end + incr;
10001be0:	18c3      	adds	r3, r0, r3
    if (__builtin_expect(next_heap_end >= (&__StackLimit), false)) {
10001be2:	428b      	cmp	r3, r1
10001be4:	d207      	bcs.n	10001bf6 <_sbrk+0x22>
#else
        return (char *) -1;
#endif
    }

    heap_end = next_heap_end;
10001be6:	6013      	str	r3, [r2, #0]
    return (void *) prev_heap_end;
}
10001be8:	4770      	bx	lr
        heap_end = &end;
10001bea:	4806      	ldr	r0, [pc, #24]	; (10001c04 <_sbrk+0x30>)
    if (__builtin_expect(next_heap_end >= (&__StackLimit), false)) {
10001bec:	4904      	ldr	r1, [pc, #16]	; (10001c00 <_sbrk+0x2c>)
    char *next_heap_end = heap_end + incr;
10001bee:	18c3      	adds	r3, r0, r3
        heap_end = &end;
10001bf0:	6010      	str	r0, [r2, #0]
    if (__builtin_expect(next_heap_end >= (&__StackLimit), false)) {
10001bf2:	428b      	cmp	r3, r1
10001bf4:	d3f7      	bcc.n	10001be6 <_sbrk+0x12>
        return (char *) -1;
10001bf6:	2001      	movs	r0, #1
10001bf8:	4240      	negs	r0, r0
10001bfa:	e7f5      	b.n	10001be8 <_sbrk+0x14>
10001bfc:	200394a4 	.word	0x200394a4
10001c00:	20040000 	.word	0x20040000
10001c04:	200394e4 	.word	0x200394e4

10001c08 <exit>:
    __asm__("bkpt #0");
10001c08:	be00      	bkpt	0x0000
10001c0a:	e7fd      	b.n	10001c08 <exit>

10001c0c <panic>:
//  right now, print mutex may be uninitialised (in which case it deadlocks - although after printing "PANIC")
//  more importantly there may be no stdout/UART initialized yet
// todo we may want to think about where we print panic messages to; writing to USB appears to work
//  though it doesn't seem like we can expect it to... fine for now
//
void __attribute__((noreturn)) __printflike(1, 0) panic(const char *fmt, ...) {
10001c0c:	b40f      	push	{r0, r1, r2, r3}
10001c0e:	b500      	push	{lr}
    puts("\n*** PANIC ***\n");
10001c10:	4808      	ldr	r0, [pc, #32]	; (10001c34 <panic+0x28>)
void __attribute__((noreturn)) __printflike(1, 0) panic(const char *fmt, ...) {
10001c12:	b083      	sub	sp, #12
    puts("\n*** PANIC ***\n");
10001c14:	f000 f8f2 	bl	10001dfc <__wrap_puts>
    if (fmt) {
10001c18:	9b04      	ldr	r3, [sp, #16]
10001c1a:	2b00      	cmp	r3, #0
10001c1c:	d007      	beq.n	10001c2e <panic+0x22>
#if PICO_PRINTF_NONE
        puts(fmt);
#else
        va_list args;
        va_start(args, fmt);
10001c1e:	a905      	add	r1, sp, #20
#if PICO_PRINTF_ALWAYS_INCLUDED
        vprintf(fmt, args);
#else
        weak_raw_vprintf(fmt, args);
10001c20:	0018      	movs	r0, r3
        va_start(args, fmt);
10001c22:	9101      	str	r1, [sp, #4]
        weak_raw_vprintf(fmt, args);
10001c24:	f7ff ff48 	bl	10001ab8 <weak_raw_vprintf>
#endif
        va_end(args);
        puts("\n");
10001c28:	4803      	ldr	r0, [pc, #12]	; (10001c38 <panic+0x2c>)
10001c2a:	f000 f8e7 	bl	10001dfc <__wrap_puts>
10001c2e:	be00      	bkpt	0x0000
10001c30:	e7fd      	b.n	10001c2e <panic+0x22>
10001c32:	46c0      	nop			; (mov r8, r8)
10001c34:	10004bbc 	.word	0x10004bbc
10001c38:	10004bcc 	.word	0x10004bcc

10001c3c <hard_assertion_failure>:
    }

    _exit(1);
}

void hard_assertion_failure(void) {
10001c3c:	b510      	push	{r4, lr}
    panic("Hard assert");
10001c3e:	4801      	ldr	r0, [pc, #4]	; (10001c44 <hard_assertion_failure+0x8>)
10001c40:	f7ff ffe4 	bl	10001c0c <panic>
10001c44:	10004bd0 	.word	0x10004bd0

10001c48 <stdio_out_chars_crlf.part.0>:
}
static void print_serialize_end() {
}
#endif

static void stdio_out_chars_crlf(stdio_driver_t *driver, const char *s, int len) {
10001c48:	b5f0      	push	{r4, r5, r6, r7, lr}
10001c4a:	4646      	mov	r6, r8
10001c4c:	464f      	mov	r7, r9
10001c4e:	46d6      	mov	lr, sl
10001c50:	4680      	mov	r8, r0
10001c52:	b5c0      	push	{r6, r7, lr}
10001c54:	000e      	movs	r6, r1
10001c56:	1e17      	subs	r7, r2, #0
        driver->out_chars(s, len);
        return;
    }
    int first_of_chunk = 0;
    static const char crlf_str[] = {'\r', '\n'};
    for (int i = 0; i < len; i++) {
10001c58:	dd3f      	ble.n	10001cda <stdio_out_chars_crlf.part.0+0x92>
        bool prev_char_was_cr = i > 0 ? s[i - 1] == '\r' : driver->last_ended_with_cr;
10001c5a:	1e4b      	subs	r3, r1, #1
10001c5c:	4699      	mov	r9, r3
        if (s[i] == '\n' && !prev_char_was_cr) {
            if (i > first_of_chunk) {
                driver->out_chars(&s[first_of_chunk], i - first_of_chunk);
            }
            driver->out_chars(crlf_str, 2);
10001c5e:	4b21      	ldr	r3, [pc, #132]	; (10001ce4 <stdio_out_chars_crlf.part.0+0x9c>)
    for (int i = 0; i < len; i++) {
10001c60:	2501      	movs	r5, #1
10001c62:	2400      	movs	r4, #0
    int first_of_chunk = 0;
10001c64:	2000      	movs	r0, #0
            driver->out_chars(crlf_str, 2);
10001c66:	469a      	mov	sl, r3
10001c68:	e00d      	b.n	10001c86 <stdio_out_chars_crlf.part.0+0x3e>
        bool prev_char_was_cr = i > 0 ? s[i - 1] == '\r' : driver->last_ended_with_cr;
10001c6a:	464b      	mov	r3, r9
10001c6c:	5d1b      	ldrb	r3, [r3, r4]
10001c6e:	3b0d      	subs	r3, #13
10001c70:	425a      	negs	r2, r3
10001c72:	4153      	adcs	r3, r2
        if (s[i] == '\n' && !prev_char_was_cr) {
10001c74:	5d32      	ldrb	r2, [r6, r4]
        bool prev_char_was_cr = i > 0 ? s[i - 1] == '\r' : driver->last_ended_with_cr;
10001c76:	b2db      	uxtb	r3, r3
        if (s[i] == '\n' && !prev_char_was_cr) {
10001c78:	2a0a      	cmp	r2, #10
10001c7a:	d00b      	beq.n	10001c94 <stdio_out_chars_crlf.part.0+0x4c>
            first_of_chunk = i + 1;
10001c7c:	002b      	movs	r3, r5
    for (int i = 0; i < len; i++) {
10001c7e:	3401      	adds	r4, #1
10001c80:	3501      	adds	r5, #1
10001c82:	429f      	cmp	r7, r3
10001c84:	dd1a      	ble.n	10001cbc <stdio_out_chars_crlf.part.0+0x74>
        bool prev_char_was_cr = i > 0 ? s[i - 1] == '\r' : driver->last_ended_with_cr;
10001c86:	2c00      	cmp	r4, #0
10001c88:	d1ef      	bne.n	10001c6a <stdio_out_chars_crlf.part.0+0x22>
10001c8a:	4643      	mov	r3, r8
        if (s[i] == '\n' && !prev_char_was_cr) {
10001c8c:	5d32      	ldrb	r2, [r6, r4]
        bool prev_char_was_cr = i > 0 ? s[i - 1] == '\r' : driver->last_ended_with_cr;
10001c8e:	7c1b      	ldrb	r3, [r3, #16]
        if (s[i] == '\n' && !prev_char_was_cr) {
10001c90:	2a0a      	cmp	r2, #10
10001c92:	d1f3      	bne.n	10001c7c <stdio_out_chars_crlf.part.0+0x34>
10001c94:	2b00      	cmp	r3, #0
10001c96:	d1f1      	bne.n	10001c7c <stdio_out_chars_crlf.part.0+0x34>
            if (i > first_of_chunk) {
10001c98:	42a0      	cmp	r0, r4
10001c9a:	da04      	bge.n	10001ca6 <stdio_out_chars_crlf.part.0+0x5e>
                driver->out_chars(&s[first_of_chunk], i - first_of_chunk);
10001c9c:	4643      	mov	r3, r8
10001c9e:	1a21      	subs	r1, r4, r0
10001ca0:	681b      	ldr	r3, [r3, #0]
10001ca2:	1830      	adds	r0, r6, r0
10001ca4:	4798      	blx	r3
            driver->out_chars(crlf_str, 2);
10001ca6:	4643      	mov	r3, r8
10001ca8:	4650      	mov	r0, sl
10001caa:	681b      	ldr	r3, [r3, #0]
10001cac:	2102      	movs	r1, #2
10001cae:	4798      	blx	r3
    for (int i = 0; i < len; i++) {
10001cb0:	3401      	adds	r4, #1
            first_of_chunk = i + 1;
10001cb2:	0028      	movs	r0, r5
10001cb4:	002b      	movs	r3, r5
    for (int i = 0; i < len; i++) {
10001cb6:	3501      	adds	r5, #1
10001cb8:	429f      	cmp	r7, r3
10001cba:	dce4      	bgt.n	10001c86 <stdio_out_chars_crlf.part.0+0x3e>
        }
    }
    if (first_of_chunk < len) {
10001cbc:	4287      	cmp	r7, r0
10001cbe:	dd04      	ble.n	10001cca <stdio_out_chars_crlf.part.0+0x82>
        driver->out_chars(&s[first_of_chunk], len - first_of_chunk);
10001cc0:	4643      	mov	r3, r8
10001cc2:	1a39      	subs	r1, r7, r0
10001cc4:	681b      	ldr	r3, [r3, #0]
10001cc6:	1830      	adds	r0, r6, r0
10001cc8:	4798      	blx	r3
    }
    if (len > 0) {
        driver->last_ended_with_cr = s[len - 1] == '\r';
10001cca:	19f6      	adds	r6, r6, r7
10001ccc:	3e01      	subs	r6, #1
10001cce:	7833      	ldrb	r3, [r6, #0]
10001cd0:	3b0d      	subs	r3, #13
10001cd2:	425a      	negs	r2, r3
10001cd4:	4153      	adcs	r3, r2
10001cd6:	4642      	mov	r2, r8
10001cd8:	7413      	strb	r3, [r2, #16]
    }
#else
    driver->out_chars(s, len);
#endif
}
10001cda:	bce0      	pop	{r5, r6, r7}
10001cdc:	46ba      	mov	sl, r7
10001cde:	46b1      	mov	r9, r6
10001ce0:	46a8      	mov	r8, r5
10001ce2:	bdf0      	pop	{r4, r5, r6, r7, pc}
10001ce4:	10004bdc 	.word	0x10004bdc

10001ce8 <stdio_put_string.isra.0>:

static bool stdio_put_string(const char *s, int len, bool newline) {
10001ce8:	b5f0      	push	{r4, r5, r6, r7, lr}
10001cea:	4657      	mov	r7, sl
10001cec:	4645      	mov	r5, r8
10001cee:	46de      	mov	lr, fp
10001cf0:	464e      	mov	r6, r9
 *  \ingroup hardware_sync
 *
 * \return The core number the call was made from
 */
static inline uint get_core_num() {
    return (*(uint32_t *) (SIO_BASE + SIO_CPUID_OFFSET));
10001cf2:	23d0      	movs	r3, #208	; 0xd0
10001cf4:	b5e0      	push	{r5, r6, r7, lr}
10001cf6:	061b      	lsls	r3, r3, #24
10001cf8:	681c      	ldr	r4, [r3, #0]
    if (!mutex_try_enter(&print_mutex, &owner)) {
10001cfa:	4b35      	ldr	r3, [pc, #212]	; (10001dd0 <stdio_put_string.isra.0+0xe8>)
static bool stdio_put_string(const char *s, int len, bool newline) {
10001cfc:	b083      	sub	sp, #12
10001cfe:	0007      	movs	r7, r0
10001d00:	000d      	movs	r5, r1
    if (!mutex_try_enter(&print_mutex, &owner)) {
10001d02:	0018      	movs	r0, r3
10001d04:	a901      	add	r1, sp, #4
static bool stdio_put_string(const char *s, int len, bool newline) {
10001d06:	4690      	mov	r8, r2
    if (!mutex_try_enter(&print_mutex, &owner)) {
10001d08:	469a      	mov	sl, r3
10001d0a:	f002 fef9 	bl	10004b00 <__mutex_try_enter_veneer>
10001d0e:	4681      	mov	r9, r0
10001d10:	2800      	cmp	r0, #0
10001d12:	d107      	bne.n	10001d24 <stdio_put_string.isra.0+0x3c>
        if (owner == core_num) {
10001d14:	9b01      	ldr	r3, [sp, #4]
10001d16:	429c      	cmp	r4, r3
10001d18:	d004      	beq.n	10001d24 <stdio_put_string.isra.0+0x3c>
        mutex_enter_blocking(&print_mutex);
10001d1a:	4650      	mov	r0, sl
10001d1c:	f002 ff00 	bl	10004b20 <__mutex_enter_blocking_veneer>
    return true;
10001d20:	2301      	movs	r3, #1
10001d22:	4699      	mov	r9, r3
    if (!serialzed) {
#if PICO_STDIO_IGNORE_NESTED_STDOUT
        return false;
#endif
    }
    if (len == -1) len = strlen(s);
10001d24:	1c6b      	adds	r3, r5, #1
10001d26:	d103      	bne.n	10001d30 <stdio_put_string.isra.0+0x48>
10001d28:	0038      	movs	r0, r7
10001d2a:	f002 fd6d 	bl	10004808 <strlen>
10001d2e:	0005      	movs	r5, r0
    for (stdio_driver_t *driver = drivers; driver; driver = driver->next) {
10001d30:	4b28      	ldr	r3, [pc, #160]	; (10001dd4 <stdio_put_string.isra.0+0xec>)
10001d32:	681c      	ldr	r4, [r3, #0]
10001d34:	2c00      	cmp	r4, #0
10001d36:	d02f      	beq.n	10001d98 <stdio_put_string.isra.0+0xb0>
        if (!driver->out_chars) continue;
        if (filter && filter != driver) continue;
        stdio_out_chars_crlf(driver, s, len);
        if (newline) {
            const char c = '\n';
10001d38:	230a      	movs	r3, #10
        if (filter && filter != driver) continue;
10001d3a:	4e27      	ldr	r6, [pc, #156]	; (10001dd8 <stdio_put_string.isra.0+0xf0>)
            const char c = '\n';
10001d3c:	469b      	mov	fp, r3
10001d3e:	e002      	b.n	10001d46 <stdio_put_string.isra.0+0x5e>
    for (stdio_driver_t *driver = drivers; driver; driver = driver->next) {
10001d40:	68e4      	ldr	r4, [r4, #12]
10001d42:	2c00      	cmp	r4, #0
10001d44:	d028      	beq.n	10001d98 <stdio_put_string.isra.0+0xb0>
        if (!driver->out_chars) continue;
10001d46:	6822      	ldr	r2, [r4, #0]
10001d48:	2a00      	cmp	r2, #0
10001d4a:	d0f9      	beq.n	10001d40 <stdio_put_string.isra.0+0x58>
        if (filter && filter != driver) continue;
10001d4c:	6833      	ldr	r3, [r6, #0]
10001d4e:	2b00      	cmp	r3, #0
10001d50:	d001      	beq.n	10001d56 <stdio_put_string.isra.0+0x6e>
10001d52:	42a3      	cmp	r3, r4
10001d54:	d1f4      	bne.n	10001d40 <stdio_put_string.isra.0+0x58>
    if (!driver->crlf_enabled) {
10001d56:	7c63      	ldrb	r3, [r4, #17]
10001d58:	2b00      	cmp	r3, #0
10001d5a:	d027      	beq.n	10001dac <stdio_put_string.isra.0+0xc4>
10001d5c:	002a      	movs	r2, r5
10001d5e:	0039      	movs	r1, r7
10001d60:	0020      	movs	r0, r4
10001d62:	f7ff ff71 	bl	10001c48 <stdio_out_chars_crlf.part.0>
        if (newline) {
10001d66:	4643      	mov	r3, r8
10001d68:	2b00      	cmp	r3, #0
10001d6a:	d0e9      	beq.n	10001d40 <stdio_put_string.isra.0+0x58>
            const char c = '\n';
10001d6c:	466b      	mov	r3, sp
10001d6e:	465a      	mov	r2, fp
10001d70:	711a      	strb	r2, [r3, #4]
    if (!driver->crlf_enabled) {
10001d72:	7c63      	ldrb	r3, [r4, #17]
10001d74:	2b00      	cmp	r3, #0
10001d76:	d01d      	beq.n	10001db4 <stdio_put_string.isra.0+0xcc>
        if (s[i] == '\n' && !prev_char_was_cr) {
10001d78:	7c23      	ldrb	r3, [r4, #16]
10001d7a:	2b00      	cmp	r3, #0
10001d7c:	d023      	beq.n	10001dc6 <stdio_put_string.isra.0+0xde>
        driver->out_chars(&s[first_of_chunk], len - first_of_chunk);
10001d7e:	2101      	movs	r1, #1
10001d80:	6823      	ldr	r3, [r4, #0]
10001d82:	a801      	add	r0, sp, #4
10001d84:	4798      	blx	r3
        driver->last_ended_with_cr = s[len - 1] == '\r';
10001d86:	466b      	mov	r3, sp
10001d88:	791b      	ldrb	r3, [r3, #4]
10001d8a:	3b0d      	subs	r3, #13
10001d8c:	425a      	negs	r2, r3
10001d8e:	4153      	adcs	r3, r2
10001d90:	7423      	strb	r3, [r4, #16]
    for (stdio_driver_t *driver = drivers; driver; driver = driver->next) {
10001d92:	68e4      	ldr	r4, [r4, #12]
10001d94:	2c00      	cmp	r4, #0
10001d96:	d1d6      	bne.n	10001d46 <stdio_put_string.isra.0+0x5e>
            stdio_out_chars_crlf(driver, &c, 1);
        }
    }
    if (serialzed) {
10001d98:	464b      	mov	r3, r9
10001d9a:	2b00      	cmp	r3, #0
10001d9c:	d10f      	bne.n	10001dbe <stdio_put_string.isra.0+0xd6>
        stdout_serialize_end();
    }
    return len;
}
10001d9e:	b003      	add	sp, #12
10001da0:	bcf0      	pop	{r4, r5, r6, r7}
10001da2:	46bb      	mov	fp, r7
10001da4:	46b2      	mov	sl, r6
10001da6:	46a9      	mov	r9, r5
10001da8:	46a0      	mov	r8, r4
10001daa:	bdf0      	pop	{r4, r5, r6, r7, pc}
        driver->out_chars(s, len);
10001dac:	0029      	movs	r1, r5
10001dae:	0038      	movs	r0, r7
10001db0:	4790      	blx	r2
        return;
10001db2:	e7d8      	b.n	10001d66 <stdio_put_string.isra.0+0x7e>
        driver->out_chars(s, len);
10001db4:	2101      	movs	r1, #1
10001db6:	6823      	ldr	r3, [r4, #0]
10001db8:	a801      	add	r0, sp, #4
10001dba:	4798      	blx	r3
        return;
10001dbc:	e7c0      	b.n	10001d40 <stdio_put_string.isra.0+0x58>
    mutex_exit(&print_mutex);
10001dbe:	4650      	mov	r0, sl
10001dc0:	f002 fe86 	bl	10004ad0 <__mutex_exit_veneer>
    return len;
10001dc4:	e7eb      	b.n	10001d9e <stdio_put_string.isra.0+0xb6>
            driver->out_chars(crlf_str, 2);
10001dc6:	2102      	movs	r1, #2
10001dc8:	4804      	ldr	r0, [pc, #16]	; (10001ddc <stdio_put_string.isra.0+0xf4>)
10001dca:	6823      	ldr	r3, [r4, #0]
10001dcc:	4798      	blx	r3
    if (first_of_chunk < len) {
10001dce:	e7da      	b.n	10001d86 <stdio_put_string.isra.0+0x9e>
10001dd0:	20002f30 	.word	0x20002f30
10001dd4:	20039498 	.word	0x20039498
10001dd8:	200394a0 	.word	0x200394a0
10001ddc:	10004bdc 	.word	0x10004bdc

10001de0 <__wrap_putchar>:
        // todo maybe a little sleep here?
    } while (!time_reached(until));
    return PICO_ERROR_TIMEOUT;
}

int WRAPPER_FUNC(putchar)(int c) {
10001de0:	b510      	push	{r4, lr}
10001de2:	b082      	sub	sp, #8
    char cc = c;
10001de4:	466b      	mov	r3, sp
int WRAPPER_FUNC(putchar)(int c) {
10001de6:	0004      	movs	r4, r0
    stdio_put_string(&cc, 1, false);
10001de8:	2200      	movs	r2, #0
    char cc = c;
10001dea:	1dd8      	adds	r0, r3, #7
    stdio_put_string(&cc, 1, false);
10001dec:	2101      	movs	r1, #1
    char cc = c;
10001dee:	7004      	strb	r4, [r0, #0]
    stdio_put_string(&cc, 1, false);
10001df0:	f7ff ff7a 	bl	10001ce8 <stdio_put_string.isra.0>
    return c;
}
10001df4:	0020      	movs	r0, r4
10001df6:	b002      	add	sp, #8
10001df8:	bd10      	pop	{r4, pc}
10001dfa:	46c0      	nop			; (mov r8, r8)

10001dfc <__wrap_puts>:

int WRAPPER_FUNC(puts)(const char *s) {
10001dfc:	b570      	push	{r4, r5, r6, lr}
10001dfe:	0004      	movs	r4, r0
    int len = strlen(s);
10001e00:	f002 fd02 	bl	10004808 <strlen>
    stdio_put_string(s, len, true);
10001e04:	2201      	movs	r2, #1
10001e06:	0001      	movs	r1, r0
    int len = strlen(s);
10001e08:	0005      	movs	r5, r0
    stdio_put_string(s, len, true);
10001e0a:	0020      	movs	r0, r4
10001e0c:	f7ff ff6c 	bl	10001ce8 <stdio_put_string.isra.0>
        else drivers = driver;
    }
}

void stdio_flush() {
    for (stdio_driver_t *d = drivers; d; d = d->next) {
10001e10:	4b08      	ldr	r3, [pc, #32]	; (10001e34 <__wrap_puts+0x38>)
10001e12:	681c      	ldr	r4, [r3, #0]
10001e14:	2c00      	cmp	r4, #0
10001e16:	d006      	beq.n	10001e26 <__wrap_puts+0x2a>
        if (d->out_flush) d->out_flush();
10001e18:	6863      	ldr	r3, [r4, #4]
10001e1a:	2b00      	cmp	r3, #0
10001e1c:	d005      	beq.n	10001e2a <__wrap_puts+0x2e>
10001e1e:	4798      	blx	r3
    for (stdio_driver_t *d = drivers; d; d = d->next) {
10001e20:	68e4      	ldr	r4, [r4, #12]
10001e22:	2c00      	cmp	r4, #0
10001e24:	d1f8      	bne.n	10001e18 <__wrap_puts+0x1c>
}
10001e26:	0028      	movs	r0, r5
10001e28:	bd70      	pop	{r4, r5, r6, pc}
    for (stdio_driver_t *d = drivers; d; d = d->next) {
10001e2a:	68e4      	ldr	r4, [r4, #12]
10001e2c:	2c00      	cmp	r4, #0
10001e2e:	d1f3      	bne.n	10001e18 <__wrap_puts+0x1c>
10001e30:	e7f9      	b.n	10001e26 <__wrap_puts+0x2a>
10001e32:	46c0      	nop			; (mov r8, r8)
10001e34:	20039498 	.word	0x20039498

10001e38 <set_sys_clock_pll>:
                        48 * MHZ,
                        48 * MHZ);
    }
}

void set_sys_clock_pll(uint32_t vco_freq, uint post_div1, uint post_div2) {
10001e38:	b5f0      	push	{r4, r5, r6, r7, lr}
10001e3a:	b083      	sub	sp, #12
10001e3c:	0006      	movs	r6, r0
10001e3e:	000c      	movs	r4, r1
10001e40:	0015      	movs	r5, r2
    if (!running_on_fpga()) {
10001e42:	f7ff fdfb 	bl	10001a3c <running_on_fpga>
10001e46:	2800      	cmp	r0, #0
10001e48:	d001      	beq.n	10001e4e <set_sys_clock_pll+0x16>
                        0, // Only AUX mux on ADC
                        CLOCKS_CLK_PERI_CTRL_AUXSRC_VALUE_CLKSRC_PLL_USB,
                        48 * MHZ,
                        48 * MHZ);
    }
}
10001e4a:	b003      	add	sp, #12
10001e4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        clock_configure(clk_sys,
10001e4e:	4f16      	ldr	r7, [pc, #88]	; (10001ea8 <set_sys_clock_pll+0x70>)
10001e50:	2201      	movs	r2, #1
10001e52:	003b      	movs	r3, r7
10001e54:	2101      	movs	r1, #1
10001e56:	9700      	str	r7, [sp, #0]
10001e58:	3005      	adds	r0, #5
10001e5a:	f7fe fe17 	bl	10000a8c <clock_configure>
        pll_init(pll_sys, 1, vco_freq, post_div1, post_div2);
10001e5e:	b2eb      	uxtb	r3, r5
10001e60:	0032      	movs	r2, r6
10001e62:	9300      	str	r3, [sp, #0]
10001e64:	2101      	movs	r1, #1
10001e66:	0023      	movs	r3, r4
10001e68:	4810      	ldr	r0, [pc, #64]	; (10001eac <set_sys_clock_pll+0x74>)
10001e6a:	f7ff fdef 	bl	10001a4c <pll_init>
        uint32_t freq = vco_freq / (post_div1 * post_div2);
10001e6e:	0021      	movs	r1, r4
10001e70:	0030      	movs	r0, r6
10001e72:	4369      	muls	r1, r5
10001e74:	f7fe fa7e 	bl	10000374 <__wrap___aeabi_uidiv>
10001e78:	0004      	movs	r4, r0
        clock_configure(clk_ref,
10001e7a:	4b0d      	ldr	r3, [pc, #52]	; (10001eb0 <set_sys_clock_pll+0x78>)
10001e7c:	2200      	movs	r2, #0
10001e7e:	9300      	str	r3, [sp, #0]
10001e80:	2102      	movs	r1, #2
10001e82:	2004      	movs	r0, #4
10001e84:	f7fe fe02 	bl	10000a8c <clock_configure>
        clock_configure(clk_sys,
10001e88:	0023      	movs	r3, r4
10001e8a:	2200      	movs	r2, #0
10001e8c:	2101      	movs	r1, #1
10001e8e:	9400      	str	r4, [sp, #0]
10001e90:	2005      	movs	r0, #5
10001e92:	f7fe fdfb 	bl	10000a8c <clock_configure>
        clock_configure(clk_peri,
10001e96:	003b      	movs	r3, r7
10001e98:	2202      	movs	r2, #2
10001e9a:	2100      	movs	r1, #0
10001e9c:	9700      	str	r7, [sp, #0]
10001e9e:	2006      	movs	r0, #6
10001ea0:	f7fe fdf4 	bl	10000a8c <clock_configure>
}
10001ea4:	e7d1      	b.n	10001e4a <set_sys_clock_pll+0x12>
10001ea6:	46c0      	nop			; (mov r8, r8)
10001ea8:	02dc6c00 	.word	0x02dc6c00
10001eac:	40028000 	.word	0x40028000
10001eb0:	00b71b00 	.word	0x00b71b00

10001eb4 <spin_locks_reset>:
    *lock = 0;
10001eb4:	2100      	movs	r1, #0

static void check_lock_num(uint __unused lock_num) {
    invalid_params_if(SYNC, lock_num >= 32);
}

void spin_locks_reset(void) {
10001eb6:	4b04      	ldr	r3, [pc, #16]	; (10001ec8 <spin_locks_reset+0x14>)
    for (uint i = 0; i < NUM_SPIN_LOCKS; i++) {
10001eb8:	4a04      	ldr	r2, [pc, #16]	; (10001ecc <spin_locks_reset+0x18>)
    __asm volatile ("dmb");
10001eba:	f3bf 8f5f 	dmb	sy
    *lock = 0;
10001ebe:	c302      	stmia	r3!, {r1}
10001ec0:	4293      	cmp	r3, r2
10001ec2:	d1fa      	bne.n	10001eba <spin_locks_reset+0x6>
        spin_unlock_unsafe(spin_lock_instance(i));
    }
}
10001ec4:	4770      	bx	lr
10001ec6:	46c0      	nop			; (mov r8, r8)
10001ec8:	d0000100 	.word	0xd0000100
10001ecc:	d0000180 	.word	0xd0000180

10001ed0 <next_striped_spin_lock_num>:
    spin_unlock_unsafe(lock);
    return lock;
}

uint next_striped_spin_lock_num() {
    uint rc = striped_spin_lock_num++;
10001ed0:	4a04      	ldr	r2, [pc, #16]	; (10001ee4 <next_striped_spin_lock_num+0x14>)
10001ed2:	7810      	ldrb	r0, [r2, #0]
10001ed4:	1c43      	adds	r3, r0, #1
10001ed6:	b2db      	uxtb	r3, r3
    if (striped_spin_lock_num > PICO_SPINLOCK_ID_STRIPED_LAST) {
10001ed8:	2b17      	cmp	r3, #23
10001eda:	d900      	bls.n	10001ede <next_striped_spin_lock_num+0xe>
        striped_spin_lock_num = PICO_SPINLOCK_ID_STRIPED_FIRST;
10001edc:	2310      	movs	r3, #16
10001ede:	7013      	strb	r3, [r2, #0]
    }
    return rc;
}
10001ee0:	4770      	bx	lr
10001ee2:	46c0      	nop			; (mov r8, r8)
10001ee4:	20002658 	.word	0x20002658

10001ee8 <timer_pool_entry_comparator>:
}
#endif

static inline alarm_pool_entry_t *get_entry(alarm_pool_t *pool, pheap_node_id_t id) {
    assert(id && id <= pool->heap->max_nodes);
    return pool->entries + id - 1;
10001ee8:	6883      	ldr	r3, [r0, #8]
10001eea:	480b      	ldr	r0, [pc, #44]	; (10001f18 <timer_pool_entry_comparator+0x30>)
static inline uint8_t *get_entry_id_high(alarm_pool_t *pool, pheap_node_id_t id) {
    assert(id && id <= pool->heap->max_nodes);
    return pool->entry_ids_high + id - 1;
}

bool timer_pool_entry_comparator(void *user_data, pheap_node_id_t a, pheap_node_id_t b) {
10001eec:	b510      	push	{r4, lr}
    return pool->entries + id - 1;
10001eee:	4684      	mov	ip, r0
10001ef0:	4461      	add	r1, ip
10001ef2:	4462      	add	r2, ip
    alarm_pool_t *pool = (alarm_pool_t *)user_data;
    return to_us_since_boot(get_entry(pool, a)->target) < to_us_since_boot(get_entry(pool, b)->target);
10001ef4:	0109      	lsls	r1, r1, #4
10001ef6:	0112      	lsls	r2, r2, #4
10001ef8:	189a      	adds	r2, r3, r2
10001efa:	1859      	adds	r1, r3, r1
10001efc:	6854      	ldr	r4, [r2, #4]
10001efe:	684b      	ldr	r3, [r1, #4]
10001f00:	2001      	movs	r0, #1
10001f02:	429c      	cmp	r4, r3
10001f04:	d801      	bhi.n	10001f0a <timer_pool_entry_comparator+0x22>
10001f06:	d002      	beq.n	10001f0e <timer_pool_entry_comparator+0x26>
10001f08:	2000      	movs	r0, #0
10001f0a:	b2c0      	uxtb	r0, r0
}
10001f0c:	bd10      	pop	{r4, pc}
    return to_us_since_boot(get_entry(pool, a)->target) < to_us_since_boot(get_entry(pool, b)->target);
10001f0e:	6812      	ldr	r2, [r2, #0]
10001f10:	680b      	ldr	r3, [r1, #0]
10001f12:	429a      	cmp	r2, r3
10001f14:	d8f9      	bhi.n	10001f0a <timer_pool_entry_comparator+0x22>
10001f16:	e7f7      	b.n	10001f08 <timer_pool_entry_comparator+0x20>
10001f18:	0fffffff 	.word	0x0fffffff

10001f1c <add_alarm_under_lock.isra.0>:

static inline alarm_id_t make_public_id(uint8_t id_high, pheap_node_id_t id) {
    return ((uint)id_high << 8u * sizeof(id)) | id;
}

static alarm_id_t add_alarm_under_lock(alarm_pool_t *pool, absolute_time_t time, alarm_callback_t callback,
10001f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10001f1e:	46de      	mov	lr, fp
10001f20:	4657      	mov	r7, sl
10001f22:	464e      	mov	r6, r9
10001f24:	4645      	mov	r5, r8
10001f26:	b5e0      	push	{r5, r6, r7, lr}
10001f28:	001f      	movs	r7, r3
10001f2a:	ab0d      	add	r3, sp, #52	; 0x34
10001f2c:	781b      	ldrb	r3, [r3, #0]
10001f2e:	0005      	movs	r5, r0
10001f30:	469b      	mov	fp, r3
                                       void *user_data, alarm_id_t reuse_id, bool create_if_past, bool *missed) {
    alarm_id_t id;
    if (reuse_id) {
10001f32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
static alarm_id_t add_alarm_under_lock(alarm_pool_t *pool, absolute_time_t time, alarm_callback_t callback,
10001f34:	0016      	movs	r6, r2
    if (reuse_id) {
10001f36:	2b00      	cmp	r3, #0
10001f38:	d045      	beq.n	10001fc6 <add_alarm_under_lock.isra.0+0xaa>
    return pool->entries + id - 1;
10001f3a:	4a3f      	ldr	r2, [pc, #252]	; (10002038 <add_alarm_under_lock.isra.0+0x11c>)
        id = reuse_id;
    } else {
        id = ph_new_node(pool->heap);
    }
    if (id) {
        alarm_pool_entry_t *entry = get_entry(pool, id);
10001f3c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    return pool->entries + id - 1;
10001f3e:	4694      	mov	ip, r2
        alarm_pool_entry_t *entry = get_entry(pool, id);
10001f40:	b2db      	uxtb	r3, r3
    return pool->entries + id - 1;
10001f42:	68aa      	ldr	r2, [r5, #8]
        alarm_pool_entry_t *entry = get_entry(pool, id);
10001f44:	469a      	mov	sl, r3
    return pool->entries + id - 1;
10001f46:	9b0c      	ldr	r3, [sp, #48]	; 0x30
        entry->target = time;
        entry->callback = callback;
        entry->user_data = user_data;
        if (id == ph_insert(pool->heap, id)) {
10001f48:	682c      	ldr	r4, [r5, #0]
    return pool->entries + id - 1;
10001f4a:	4463      	add	r3, ip
10001f4c:	4694      	mov	ip, r2
10001f4e:	011b      	lsls	r3, r3, #4
        entry->callback = callback;
10001f50:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    return pool->entries + id - 1;
10001f52:	4463      	add	r3, ip
        entry->callback = callback;
10001f54:	609a      	str	r2, [r3, #8]
        entry->user_data = user_data;
10001f56:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
        entry->target = time;
10001f58:	601e      	str	r6, [r3, #0]
        entry->user_data = user_data;
10001f5a:	60da      	str	r2, [r3, #12]
10001f5c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
        entry->target = time;
10001f5e:	605f      	str	r7, [r3, #4]
10001f60:	4694      	mov	ip, r2
10001f62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    hn->child = hn->sibling = hn->parent = 0;
10001f64:	2200      	movs	r2, #0
    return heap->nodes + id - 1;
10001f66:	005b      	lsls	r3, r3, #1
10001f68:	4463      	add	r3, ip
10001f6a:	3b03      	subs	r3, #3
10001f6c:	4698      	mov	r8, r3
10001f6e:	6823      	ldr	r3, [r4, #0]
10001f70:	4443      	add	r3, r8
    hn->child = hn->sibling = hn->parent = 0;
10001f72:	709a      	strb	r2, [r3, #2]
10001f74:	705a      	strb	r2, [r3, #1]
10001f76:	701a      	strb	r2, [r3, #0]
    heap->root_id = ph_merge_nodes(heap, heap->root_id, id);
10001f78:	7b63      	ldrb	r3, [r4, #13]
10001f7a:	4699      	mov	r9, r3
    if (!a) return b;
10001f7c:	2b00      	cmp	r3, #0
10001f7e:	d042      	beq.n	10002006 <add_alarm_under_lock.isra.0+0xea>
    if (heap->comparator(heap->user_data, a, b)) {
10001f80:	4652      	mov	r2, sl
10001f82:	0019      	movs	r1, r3
10001f84:	68a0      	ldr	r0, [r4, #8]
10001f86:	6863      	ldr	r3, [r4, #4]
10001f88:	4798      	blx	r3
    return heap->nodes + id - 1;
10001f8a:	6822      	ldr	r2, [r4, #0]
    if (heap->comparator(heap->user_data, a, b)) {
10001f8c:	2800      	cmp	r0, #0
10001f8e:	d02b      	beq.n	10001fe8 <add_alarm_under_lock.isra.0+0xcc>
    return heap->nodes + id - 1;
10001f90:	464b      	mov	r3, r9
10001f92:	005b      	lsls	r3, r3, #1
10001f94:	444b      	add	r3, r9
10001f96:	3b03      	subs	r3, #3
10001f98:	18d1      	adds	r1, r2, r3
10001f9a:	468c      	mov	ip, r1
10001f9c:	4641      	mov	r1, r8
    c->parent = parent_id;
10001f9e:	4648      	mov	r0, r9
    return heap->nodes + id - 1;
10001fa0:	1851      	adds	r1, r2, r1
    c->parent = parent_id;
10001fa2:	7088      	strb	r0, [r1, #2]
    if (!n->child) {
10001fa4:	5cd3      	ldrb	r3, [r2, r3]
10001fa6:	2b00      	cmp	r3, #0
10001fa8:	d142      	bne.n	10002030 <add_alarm_under_lock.isra.0+0x114>
        n->child = child_id;
10001faa:	4653      	mov	r3, sl
10001fac:	4662      	mov	r2, ip
10001fae:	7013      	strb	r3, [r2, #0]
    heap->root_id = ph_merge_nodes(heap, heap->root_id, id);
10001fb0:	464b      	mov	r3, r9
10001fb2:	7363      	strb	r3, [r4, #13]
        if (id == ph_insert(pool->heap, id)) {
10001fb4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
10001fb6:	4599      	cmp	r9, r3
10001fb8:	d027      	beq.n	1000200a <add_alarm_under_lock.isra.0+0xee>
            }
            if (missed) *missed = is_missed;
        }
    }
    return id;
}
10001fba:	bcf0      	pop	{r4, r5, r6, r7}
10001fbc:	46bb      	mov	fp, r7
10001fbe:	46b2      	mov	sl, r6
10001fc0:	46a9      	mov	r9, r5
10001fc2:	46a0      	mov	r8, r4
10001fc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        id = ph_new_node(pool->heap);
10001fc6:	6802      	ldr	r2, [r0, #0]
    if (!heap->free_head_id) return 0;
10001fc8:	7b94      	ldrb	r4, [r2, #14]
10001fca:	2c00      	cmp	r4, #0
10001fcc:	d0f5      	beq.n	10001fba <add_alarm_under_lock.isra.0+0x9e>
    heap->free_head_id = ph_get_node(heap, id)->sibling;
10001fce:	6811      	ldr	r1, [r2, #0]
10001fd0:	0063      	lsls	r3, r4, #1
10001fd2:	468c      	mov	ip, r1
10001fd4:	191b      	adds	r3, r3, r4
10001fd6:	4463      	add	r3, ip
10001fd8:	3b03      	subs	r3, #3
10001fda:	785b      	ldrb	r3, [r3, #1]
10001fdc:	7393      	strb	r3, [r2, #14]
    if (!heap->free_head_id) heap->free_tail_id = 0;
10001fde:	2b00      	cmp	r3, #0
10001fe0:	d100      	bne.n	10001fe4 <add_alarm_under_lock.isra.0+0xc8>
10001fe2:	73d3      	strb	r3, [r2, #15]
10001fe4:	940c      	str	r4, [sp, #48]	; 0x30
    if (id) {
10001fe6:	e7a8      	b.n	10001f3a <add_alarm_under_lock.isra.0+0x1e>
    return heap->nodes + id - 1;
10001fe8:	4643      	mov	r3, r8
10001fea:	18d1      	adds	r1, r2, r3
10001fec:	464b      	mov	r3, r9
    c->parent = parent_id;
10001fee:	4650      	mov	r0, sl
    return heap->nodes + id - 1;
10001ff0:	005b      	lsls	r3, r3, #1
10001ff2:	444b      	add	r3, r9
10001ff4:	3b03      	subs	r3, #3
10001ff6:	18d3      	adds	r3, r2, r3
    c->parent = parent_id;
10001ff8:	7098      	strb	r0, [r3, #2]
    if (!n->child) {
10001ffa:	4640      	mov	r0, r8
10001ffc:	5c12      	ldrb	r2, [r2, r0]
10001ffe:	2a00      	cmp	r2, #0
10002000:	d118      	bne.n	10002034 <add_alarm_under_lock.isra.0+0x118>
        n->child = child_id;
10002002:	464b      	mov	r3, r9
10002004:	700b      	strb	r3, [r1, #0]
    heap->root_id = ph_merge_nodes(heap, heap->root_id, id);
10002006:	4653      	mov	r3, sl
10002008:	7363      	strb	r3, [r4, #13]
            bool is_missed = hardware_alarm_set_target(pool->hardware_alarm_num, time);
1000200a:	0032      	movs	r2, r6
1000200c:	003b      	movs	r3, r7
1000200e:	7d28      	ldrb	r0, [r5, #20]
10002010:	f000 f9ec 	bl	100023ec <hardware_alarm_set_target>
10002014:	1e04      	subs	r4, r0, #0
            if (is_missed && !create_if_past) {
10002016:	d006      	beq.n	10002026 <add_alarm_under_lock.isra.0+0x10a>
10002018:	465b      	mov	r3, fp
1000201a:	2b00      	cmp	r3, #0
1000201c:	d103      	bne.n	10002026 <add_alarm_under_lock.isra.0+0x10a>
                ph_delete(pool->heap, id);
1000201e:	4651      	mov	r1, sl
10002020:	6828      	ldr	r0, [r5, #0]
10002022:	f7ff fbbb 	bl	1000179c <ph_delete>
            if (missed) *missed = is_missed;
10002026:	9b0e      	ldr	r3, [sp, #56]	; 0x38
10002028:	2b00      	cmp	r3, #0
1000202a:	d0c6      	beq.n	10001fba <add_alarm_under_lock.isra.0+0x9e>
1000202c:	701c      	strb	r4, [r3, #0]
    return id;
1000202e:	e7c4      	b.n	10001fba <add_alarm_under_lock.isra.0+0x9e>
        c->sibling = n->child;
10002030:	704b      	strb	r3, [r1, #1]
10002032:	e7ba      	b.n	10001faa <add_alarm_under_lock.isra.0+0x8e>
10002034:	705a      	strb	r2, [r3, #1]
10002036:	e7e4      	b.n	10002002 <add_alarm_under_lock.isra.0+0xe6>
10002038:	0fffffff 	.word	0x0fffffff

1000203c <alarm_pool_alarm_callback>:

static void alarm_pool_alarm_callback(uint alarm_num) {
1000203c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000203e:	46de      	mov	lr, fp
10002040:	464e      	mov	r6, r9
10002042:	4657      	mov	r7, sl
10002044:	4645      	mov	r5, r8
10002046:	2300      	movs	r3, #0
10002048:	b5e0      	push	{r5, r6, r7, lr}
1000204a:	b08d      	sub	sp, #52	; 0x34
1000204c:	930a      	str	r3, [sp, #40]	; 0x28
    // note this is called from timer IRQ handler
    alarm_pool_t *pool = pools[alarm_num];
1000204e:	4b6b      	ldr	r3, [pc, #428]	; (100021fc <alarm_pool_alarm_callback+0x1c0>)
10002050:	0082      	lsls	r2, r0, #2
10002052:	58d3      	ldr	r3, [r2, r3]
static void alarm_pool_alarm_callback(uint alarm_num) {
10002054:	900b      	str	r0, [sp, #44]	; 0x2c
    alarm_pool_t *pool = pools[alarm_num];
10002056:	4699      	mov	r9, r3
    bool again;
    do {
        absolute_time_t now = get_absolute_time();
        alarm_callback_t callback = NULL;
        absolute_time_t target = nil_time;
        void *user_data = NULL;
10002058:	2300      	movs	r3, #0
1000205a:	469b      	mov	fp, r3
1000205c:	464b      	mov	r3, r9
1000205e:	9307      	str	r3, [sp, #28]
 * \sa sleep_until()
 * \sa time_us_64()
 */
static inline absolute_time_t get_absolute_time() {
    absolute_time_t t;
    update_us_since_boot(&t, time_us_64());
10002060:	f000 f974 	bl	1000234c <time_us_64>
        uint8_t id_high;
        again = false;
        uint32_t save = spin_lock_blocking(pool->lock);
10002064:	9c07      	ldr	r4, [sp, #28]
10002066:	0006      	movs	r6, r0
10002068:	000f      	movs	r7, r1
1000206a:	6862      	ldr	r2, [r4, #4]
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
1000206c:	f3ef 8510 	mrs	r5, PRIMASK
    __asm volatile ("cpsid i");
10002070:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
10002072:	6813      	ldr	r3, [r2, #0]
10002074:	2b00      	cmp	r3, #0
10002076:	d0fc      	beq.n	10002072 <alarm_pool_alarm_callback+0x36>
    __asm volatile ("dmb");
10002078:	0022      	movs	r2, r4
1000207a:	9407      	str	r4, [sp, #28]
1000207c:	f3bf 8f5f 	dmb	sy
        pheap_node_id_t next_id = ph_peek_head(pool->heap);
10002080:	6824      	ldr	r4, [r4, #0]
    return heap->root_id;
10002082:	7b63      	ldrb	r3, [r4, #13]
10002084:	4699      	mov	r9, r3
        if (next_id) {
10002086:	2b00      	cmp	r3, #0
10002088:	d067      	beq.n	1000215a <alarm_pool_alarm_callback+0x11e>
    return pool->entries + id - 1;
1000208a:	6892      	ldr	r2, [r2, #8]
1000208c:	4b5c      	ldr	r3, [pc, #368]	; (10002200 <alarm_pool_alarm_callback+0x1c4>)
1000208e:	4690      	mov	r8, r2
10002090:	444b      	add	r3, r9
10002092:	011b      	lsls	r3, r3, #4
10002094:	4498      	add	r8, r3
            alarm_pool_entry_t *entry = get_entry(pool, next_id);
            if (absolute_time_diff_us(now, entry->target) <= 0) {
10002096:	4643      	mov	r3, r8
10002098:	681a      	ldr	r2, [r3, #0]
1000209a:	685b      	ldr	r3, [r3, #4]
 * \param to the second timestamp
 * \return the number of microseconds between the two timestamps (positive if `to` is after `from` except
 * in case of overflow)
 */
static inline int64_t absolute_time_diff_us(absolute_time_t from, absolute_time_t to) {
    return to_us_since_boot(to) - to_us_since_boot(from);
1000209c:	0010      	movs	r0, r2
1000209e:	0019      	movs	r1, r3
100020a0:	1b80      	subs	r0, r0, r6
100020a2:	41b9      	sbcs	r1, r7
100020a4:	2900      	cmp	r1, #0
100020a6:	dd5f      	ble.n	10002168 <alarm_pool_alarm_callback+0x12c>
                user_data = entry->user_data;
                assert(callback);
                id_high = *get_entry_id_high(pool, next_id);
                pool->alarm_in_progress = make_public_id(id_high, removed_id);
            } else {
                if (hardware_alarm_set_target(alarm_num, entry->target)) {
100020a8:	980b      	ldr	r0, [sp, #44]	; 0x2c
100020aa:	f000 f99f 	bl	100023ec <hardware_alarm_set_target>
        void *user_data = NULL;
100020ae:	2300      	movs	r3, #0
        absolute_time_t target = nil_time;
100020b0:	2600      	movs	r6, #0
        void *user_data = NULL;
100020b2:	4698      	mov	r8, r3
        absolute_time_t target = nil_time;
100020b4:	2700      	movs	r7, #0
        alarm_callback_t callback = NULL;
100020b6:	469a      	mov	sl, r3
                    again = true;
                }
            }
        }
        spin_unlock(pool->lock, save);
100020b8:	9c07      	ldr	r4, [sp, #28]
100020ba:	6863      	ldr	r3, [r4, #4]
100020bc:	f3bf 8f5f 	dmb	sy
    *lock = 0;
100020c0:	465a      	mov	r2, fp
100020c2:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
100020c4:	f385 8810 	msr	PRIMASK, r5
        if (callback) {
100020c8:	4653      	mov	r3, sl
100020ca:	2b00      	cmp	r3, #0
100020cc:	d108      	bne.n	100020e0 <alarm_pool_alarm_callback+0xa4>
            }
            pool->alarm_in_progress = 0;
            spin_unlock(pool->lock, save);
            again = true;
        }
    } while (again);
100020ce:	2800      	cmp	r0, #0
100020d0:	d1c6      	bne.n	10002060 <alarm_pool_alarm_callback+0x24>
}
100020d2:	b00d      	add	sp, #52	; 0x34
100020d4:	bcf0      	pop	{r4, r5, r6, r7}
100020d6:	46bb      	mov	fp, r7
100020d8:	46b2      	mov	sl, r6
100020da:	46a9      	mov	r9, r5
100020dc:	46a0      	mov	r8, r4
100020de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return ((uint)id_high << 8u * sizeof(id)) | id;
100020e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
            int64_t repeat = callback(make_public_id(id_high, next_id), user_data);
100020e2:	4641      	mov	r1, r8
    return ((uint)id_high << 8u * sizeof(id)) | id;
100020e4:	0218      	lsls	r0, r3, #8
100020e6:	464b      	mov	r3, r9
100020e8:	4318      	orrs	r0, r3
            int64_t repeat = callback(make_public_id(id_high, next_id), user_data);
100020ea:	47d0      	blx	sl
100020ec:	9008      	str	r0, [sp, #32]
100020ee:	9109      	str	r1, [sp, #36]	; 0x24
            save = spin_lock_blocking(pool->lock);
100020f0:	6862      	ldr	r2, [r4, #4]
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
100020f2:	f3ef 8510 	mrs	r5, PRIMASK
    __asm volatile ("cpsid i");
100020f6:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
100020f8:	6813      	ldr	r3, [r2, #0]
100020fa:	2b00      	cmp	r3, #0
100020fc:	d0fc      	beq.n	100020f8 <alarm_pool_alarm_callback+0xbc>
    __asm volatile ("dmb");
100020fe:	9407      	str	r4, [sp, #28]
10002100:	f3bf 8f5f 	dmb	sy
            if (repeat < 0 && pool->alarm_in_progress) {
10002104:	9908      	ldr	r1, [sp, #32]
10002106:	9a09      	ldr	r2, [sp, #36]	; 0x24
10002108:	2a00      	cmp	r2, #0
1000210a:	db48      	blt.n	1000219e <alarm_pool_alarm_callback+0x162>
            } else if (repeat > 0 && pool->alarm_in_progress) {
1000210c:	4311      	orrs	r1, r2
1000210e:	d003      	beq.n	10002118 <alarm_pool_alarm_callback+0xdc>
10002110:	9b07      	ldr	r3, [sp, #28]
10002112:	691b      	ldr	r3, [r3, #16]
10002114:	2b00      	cmp	r3, #0
10002116:	d15d      	bne.n	100021d4 <alarm_pool_alarm_callback+0x198>
                ph_add_to_free_list(pool->heap, next_id);
10002118:	9b07      	ldr	r3, [sp, #28]
1000211a:	681b      	ldr	r3, [r3, #0]

bool ph_delete(pheap_t *heap, pheap_node_id_t id);

static inline void ph_add_to_free_list(pheap_t *heap, pheap_node_id_t id) {
    assert(id && !ph_contains(heap, id));
    if (heap->free_tail_id) {
1000211c:	7bd9      	ldrb	r1, [r3, #15]
1000211e:	2900      	cmp	r1, #0
10002120:	d007      	beq.n	10002132 <alarm_pool_alarm_callback+0xf6>
        ph_get_node(heap, heap->free_tail_id)->sibling = id;
10002122:	004a      	lsls	r2, r1, #1
10002124:	1852      	adds	r2, r2, r1
10002126:	6819      	ldr	r1, [r3, #0]
10002128:	468c      	mov	ip, r1
1000212a:	4649      	mov	r1, r9
1000212c:	4462      	add	r2, ip
1000212e:	3a03      	subs	r2, #3
10002130:	7051      	strb	r1, [r2, #1]
    }
    heap->free_tail_id = id;
10002132:	464a      	mov	r2, r9
10002134:	73da      	strb	r2, [r3, #15]
    return pool->entry_ids_high + id - 1;
10002136:	464b      	mov	r3, r9
10002138:	9a07      	ldr	r2, [sp, #28]
1000213a:	3b01      	subs	r3, #1
1000213c:	68d1      	ldr	r1, [r2, #12]
                (*get_entry_id_high(pool, next_id))++; // we bump it for next use of id
1000213e:	5cca      	ldrb	r2, [r1, r3]
10002140:	3201      	adds	r2, #1
10002142:	54ca      	strb	r2, [r1, r3]
            pool->alarm_in_progress = 0;
10002144:	465b      	mov	r3, fp
10002146:	9a07      	ldr	r2, [sp, #28]
10002148:	6113      	str	r3, [r2, #16]
            spin_unlock(pool->lock, save);
1000214a:	6853      	ldr	r3, [r2, #4]
1000214c:	f3bf 8f5f 	dmb	sy
    *lock = 0;
10002150:	465a      	mov	r2, fp
10002152:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10002154:	f385 8810 	msr	PRIMASK, r5
    } while (again);
10002158:	e782      	b.n	10002060 <alarm_pool_alarm_callback+0x24>
        void *user_data = NULL;
1000215a:	2300      	movs	r3, #0
        absolute_time_t target = nil_time;
1000215c:	2600      	movs	r6, #0
        void *user_data = NULL;
1000215e:	4698      	mov	r8, r3
        absolute_time_t target = nil_time;
10002160:	2700      	movs	r7, #0
        alarm_callback_t callback = NULL;
10002162:	469a      	mov	sl, r3
        again = false;
10002164:	2000      	movs	r0, #0
10002166:	e7a7      	b.n	100020b8 <alarm_pool_alarm_callback+0x7c>
            if (absolute_time_diff_us(now, entry->target) <= 0) {
10002168:	2900      	cmp	r1, #0
1000216a:	d101      	bne.n	10002170 <alarm_pool_alarm_callback+0x134>
1000216c:	2800      	cmp	r0, #0
1000216e:	d19b      	bne.n	100020a8 <alarm_pool_alarm_callback+0x6c>
                pheap_node_id_t __unused removed_id = ph_remove_head_reserve(pool->heap, true);
10002170:	2101      	movs	r1, #1
10002172:	0020      	movs	r0, r4
10002174:	f7ff fa94 	bl	100016a0 <ph_remove_head_reserve>
                target = entry->target;
10002178:	4643      	mov	r3, r8
1000217a:	681e      	ldr	r6, [r3, #0]
1000217c:	685f      	ldr	r7, [r3, #4]
                callback = entry->callback;
1000217e:	689b      	ldr	r3, [r3, #8]
                id_high = *get_entry_id_high(pool, next_id);
10002180:	9a07      	ldr	r2, [sp, #28]
                callback = entry->callback;
10002182:	469a      	mov	sl, r3
                user_data = entry->user_data;
10002184:	4643      	mov	r3, r8
10002186:	68db      	ldr	r3, [r3, #12]
10002188:	4698      	mov	r8, r3
                id_high = *get_entry_id_high(pool, next_id);
1000218a:	68d3      	ldr	r3, [r2, #12]
1000218c:	444b      	add	r3, r9
1000218e:	3b01      	subs	r3, #1
10002190:	781b      	ldrb	r3, [r3, #0]
10002192:	930a      	str	r3, [sp, #40]	; 0x28
    return ((uint)id_high << 8u * sizeof(id)) | id;
10002194:	021b      	lsls	r3, r3, #8
10002196:	4303      	orrs	r3, r0
                pool->alarm_in_progress = make_public_id(id_high, removed_id);
10002198:	6113      	str	r3, [r2, #16]
        again = false;
1000219a:	2000      	movs	r0, #0
1000219c:	e78c      	b.n	100020b8 <alarm_pool_alarm_callback+0x7c>
            if (repeat < 0 && pool->alarm_in_progress) {
1000219e:	6923      	ldr	r3, [r4, #16]
100021a0:	2b00      	cmp	r3, #0
100021a2:	d0b9      	beq.n	10002118 <alarm_pool_alarm_callback+0xdc>
    uint64_t delayed = base + us;
100021a4:	0033      	movs	r3, r6
100021a6:	003c      	movs	r4, r7
100021a8:	1a5b      	subs	r3, r3, r1
100021aa:	4194      	sbcs	r4, r2
100021ac:	001a      	movs	r2, r3
100021ae:	0023      	movs	r3, r4
    if (delayed < base) {
100021b0:	42a7      	cmp	r7, r4
100021b2:	d819      	bhi.n	100021e8 <alarm_pool_alarm_callback+0x1ac>
100021b4:	429f      	cmp	r7, r3
100021b6:	d01b      	beq.n	100021f0 <alarm_pool_alarm_callback+0x1b4>
                add_alarm_under_lock(pool, delayed_by_us(get_absolute_time(), repeat), callback, user_data, next_id,
100021b8:	4659      	mov	r1, fp
100021ba:	9104      	str	r1, [sp, #16]
100021bc:	2101      	movs	r1, #1
100021be:	9103      	str	r1, [sp, #12]
100021c0:	4649      	mov	r1, r9
100021c2:	9102      	str	r1, [sp, #8]
100021c4:	4641      	mov	r1, r8
100021c6:	9101      	str	r1, [sp, #4]
100021c8:	4651      	mov	r1, sl
100021ca:	9807      	ldr	r0, [sp, #28]
100021cc:	9100      	str	r1, [sp, #0]
100021ce:	f7ff fea5 	bl	10001f1c <add_alarm_under_lock.isra.0>
100021d2:	e7b7      	b.n	10002144 <alarm_pool_alarm_callback+0x108>
    update_us_since_boot(&t, time_us_64());
100021d4:	f000 f8ba 	bl	1000234c <time_us_64>
    uint64_t delayed = base + us;
100021d8:	9a08      	ldr	r2, [sp, #32]
100021da:	9b09      	ldr	r3, [sp, #36]	; 0x24
    update_us_since_boot(&t, time_us_64());
100021dc:	0006      	movs	r6, r0
100021de:	000f      	movs	r7, r1
    uint64_t delayed = base + us;
100021e0:	1992      	adds	r2, r2, r6
100021e2:	417b      	adcs	r3, r7
    if (delayed < base) {
100021e4:	4299      	cmp	r1, r3
100021e6:	d9e5      	bls.n	100021b4 <alarm_pool_alarm_callback+0x178>
        delayed = (uint64_t)-1;
100021e8:	2201      	movs	r2, #1
100021ea:	4252      	negs	r2, r2
100021ec:	17d3      	asrs	r3, r2, #31
100021ee:	e7e3      	b.n	100021b8 <alarm_pool_alarm_callback+0x17c>
    if (delayed < base) {
100021f0:	4296      	cmp	r6, r2
100021f2:	d9e1      	bls.n	100021b8 <alarm_pool_alarm_callback+0x17c>
        delayed = (uint64_t)-1;
100021f4:	2201      	movs	r2, #1
100021f6:	4252      	negs	r2, r2
100021f8:	17d3      	asrs	r3, r2, #31
100021fa:	e7dd      	b.n	100021b8 <alarm_pool_alarm_callback+0x17c>
100021fc:	200394ac 	.word	0x200394ac
10002200:	0fffffff 	.word	0x0fffffff

10002204 <alarm_pool_init_default>:
void alarm_pool_init_default() {
10002204:	b570      	push	{r4, r5, r6, lr}
    if (!default_alarm_pool) {
10002206:	4c18      	ldr	r4, [pc, #96]	; (10002268 <alarm_pool_init_default+0x64>)
10002208:	6823      	ldr	r3, [r4, #0]
1000220a:	2b00      	cmp	r3, #0
1000220c:	d000      	beq.n	10002210 <alarm_pool_init_default+0xc>
}
1000220e:	bd70      	pop	{r4, r5, r6, pc}

// note the timer is create with IRQs on this core
alarm_pool_t *alarm_pool_create(uint hardware_alarm_num, uint max_timers) {
    hardware_alarm_claim(hardware_alarm_num);
10002210:	2003      	movs	r0, #3
10002212:	f000 f88f 	bl	10002334 <hardware_alarm_claim>
    hardware_alarm_cancel(hardware_alarm_num);
10002216:	2003      	movs	r0, #3
10002218:	f000 f94a 	bl	100024b0 <hardware_alarm_cancel>
    hardware_alarm_set_callback(hardware_alarm_num, alarm_pool_alarm_callback);
1000221c:	4913      	ldr	r1, [pc, #76]	; (1000226c <alarm_pool_init_default+0x68>)
1000221e:	2003      	movs	r0, #3
10002220:	f000 f89e 	bl	10002360 <hardware_alarm_set_callback>
    alarm_pool_t *pool = (alarm_pool_t *)malloc(sizeof(alarm_pool_t));
10002224:	2018      	movs	r0, #24
10002226:	f7ff faf7 	bl	10001818 <__wrap_malloc>
1000222a:	0005      	movs	r5, r0
    pool->lock = spin_lock_instance(next_striped_spin_lock_num());
1000222c:	f7ff fe50 	bl	10001ed0 <next_striped_spin_lock_num>
    return (spin_lock_t *) (SIO_BASE + SIO_SPINLOCK0_OFFSET + lock_num * 4);
10002230:	4b0f      	ldr	r3, [pc, #60]	; (10002270 <alarm_pool_init_default+0x6c>)
    pool->heap = ph_create(max_timers, timer_pool_entry_comparator, pool);
10002232:	002a      	movs	r2, r5
10002234:	469c      	mov	ip, r3
10002236:	4460      	add	r0, ip
10002238:	0080      	lsls	r0, r0, #2
1000223a:	490e      	ldr	r1, [pc, #56]	; (10002274 <alarm_pool_init_default+0x70>)
    pool->lock = spin_lock_instance(next_striped_spin_lock_num());
1000223c:	6068      	str	r0, [r5, #4]
    pool->heap = ph_create(max_timers, timer_pool_entry_comparator, pool);
1000223e:	2010      	movs	r0, #16
10002240:	f7ff f938 	bl	100014b4 <ph_create>
    pool->entries = (alarm_pool_entry_t *)calloc(max_timers, sizeof(alarm_pool_entry_t));
10002244:	2110      	movs	r1, #16
    pool->heap = ph_create(max_timers, timer_pool_entry_comparator, pool);
10002246:	6028      	str	r0, [r5, #0]
    pool->entries = (alarm_pool_entry_t *)calloc(max_timers, sizeof(alarm_pool_entry_t));
10002248:	2010      	movs	r0, #16
1000224a:	f7ff fae9 	bl	10001820 <__wrap_calloc>
    pool->entry_ids_high = (uint8_t *)calloc(max_timers, sizeof(uint8_t));
1000224e:	2101      	movs	r1, #1
    pool->entries = (alarm_pool_entry_t *)calloc(max_timers, sizeof(alarm_pool_entry_t));
10002250:	60a8      	str	r0, [r5, #8]
    pool->entry_ids_high = (uint8_t *)calloc(max_timers, sizeof(uint8_t));
10002252:	2010      	movs	r0, #16
10002254:	f7ff fae4 	bl	10001820 <__wrap_calloc>
    pool->hardware_alarm_num = hardware_alarm_num;
10002258:	2303      	movs	r3, #3
1000225a:	752b      	strb	r3, [r5, #20]
    pools[hardware_alarm_num] = pool;
1000225c:	4b06      	ldr	r3, [pc, #24]	; (10002278 <alarm_pool_init_default+0x74>)
    pool->entry_ids_high = (uint8_t *)calloc(max_timers, sizeof(uint8_t));
1000225e:	60e8      	str	r0, [r5, #12]
    pools[hardware_alarm_num] = pool;
10002260:	60dd      	str	r5, [r3, #12]
        default_alarm_pool = alarm_pool_create(PICO_TIME_DEFAULT_ALARM_POOL_HARDWARE_ALARM_NUM,
10002262:	6025      	str	r5, [r4, #0]
}
10002264:	e7d3      	b.n	1000220e <alarm_pool_init_default+0xa>
10002266:	46c0      	nop			; (mov r8, r8)
10002268:	20039494 	.word	0x20039494
1000226c:	1000203d 	.word	0x1000203d
10002270:	34000040 	.word	0x34000040
10002274:	10001ee9 	.word	0x10001ee9
10002278:	200394ac 	.word	0x200394ac

1000227c <hardware_alarm_irq_handler>:

static inline uint harware_alarm_irq_number(uint alarm_num) {
    return TIMER_IRQ_0 + alarm_num;
}

static void hardware_alarm_irq_handler() {
1000227c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000227e:	46d6      	mov	lr, sl
10002280:	464f      	mov	r7, r9
10002282:	4646      	mov	r6, r8
10002284:	b5c0      	push	{r6, r7, lr}
    // Determine which timer this IRQ is for
    uint32_t ipsr;
    __asm volatile ("mrs %0, ipsr" : "=r" (ipsr)::);
10002286:	f3ef 8305 	mrs	r3, IPSR
    uint alarm_num = (ipsr & 0x3fu) - 16 - TIMER_IRQ_0;
1000228a:	223f      	movs	r2, #63	; 0x3f
1000228c:	4013      	ands	r3, r2
1000228e:	0018      	movs	r0, r3
10002290:	3810      	subs	r0, #16
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
10002292:	f3ef 8c10 	mrs	ip, PRIMASK
    __asm volatile ("cpsid i");
10002296:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
10002298:	4d20      	ldr	r5, [pc, #128]	; (1000231c <hardware_alarm_irq_handler+0xa0>)
1000229a:	682a      	ldr	r2, [r5, #0]
1000229c:	2a00      	cmp	r2, #0
1000229e:	d0fc      	beq.n	1000229a <hardware_alarm_irq_handler+0x1e>
    __asm volatile ("dmb");
100022a0:	f3bf 8f5f 	dmb	sy
    hardware_alarm_callback_t callback = NULL;

    spin_lock_t *lock = spin_lock_instance(PICO_SPINLOCK_ID_TIMER);
    uint32_t save = spin_lock_blocking(lock);
    // Clear the timer IRQ (inside lock, because we check whether we have handled the IRQ yet in alarm_set by looking at the interrupt status
    timer_hw->intr = 1u << alarm_num;
100022a4:	2201      	movs	r2, #1
100022a6:	0011      	movs	r1, r2
100022a8:	4081      	lsls	r1, r0
100022aa:	4c1d      	ldr	r4, [pc, #116]	; (10002320 <hardware_alarm_irq_handler+0xa4>)
100022ac:	4688      	mov	r8, r1
100022ae:	6361      	str	r1, [r4, #52]	; 0x34

    // make sure the IRQ is still valid
    if (timer_callbacks_pending & (1u << alarm_num)) {
100022b0:	491c      	ldr	r1, [pc, #112]	; (10002324 <hardware_alarm_irq_handler+0xa8>)
100022b2:	0017      	movs	r7, r2
100022b4:	780e      	ldrb	r6, [r1, #0]
100022b6:	468a      	mov	sl, r1
100022b8:	0031      	movs	r1, r6
100022ba:	40c1      	lsrs	r1, r0
100022bc:	400f      	ands	r7, r1
100022be:	420a      	tst	r2, r1
100022c0:	d109      	bne.n	100022d6 <hardware_alarm_irq_handler+0x5a>
100022c2:	f3bf 8f5f 	dmb	sy
    *lock = 0;
100022c6:	602f      	str	r7, [r5, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
100022c8:	f38c 8810 	msr	PRIMASK, ip
    spin_unlock(lock, save);

    if (callback) {
        callback(alarm_num);
    }
}
100022cc:	bce0      	pop	{r5, r6, r7}
100022ce:	46ba      	mov	sl, r7
100022d0:	46b1      	mov	r9, r6
100022d2:	46a8      	mov	r8, r5
100022d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (timer_hw->timerawh >= target_hi[alarm_num]) {
100022d6:	4914      	ldr	r1, [pc, #80]	; (10002328 <hardware_alarm_irq_handler+0xac>)
100022d8:	0082      	lsls	r2, r0, #2
100022da:	6a64      	ldr	r4, [r4, #36]	; 0x24
100022dc:	5851      	ldr	r1, [r2, r1]
100022de:	428c      	cmp	r4, r1
100022e0:	d30f      	bcc.n	10002302 <hardware_alarm_irq_handler+0x86>
            callback = alarm_callbacks[alarm_num];
100022e2:	4b12      	ldr	r3, [pc, #72]	; (1000232c <hardware_alarm_irq_handler+0xb0>)
100022e4:	58d2      	ldr	r2, [r2, r3]
            timer_callbacks_pending &= ~(1u << alarm_num);
100022e6:	4643      	mov	r3, r8
100022e8:	439e      	bics	r6, r3
100022ea:	4653      	mov	r3, sl
100022ec:	701e      	strb	r6, [r3, #0]
    __asm volatile ("dmb");
100022ee:	f3bf 8f5f 	dmb	sy
    *lock = 0;
100022f2:	2300      	movs	r3, #0
100022f4:	602b      	str	r3, [r5, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
100022f6:	f38c 8810 	msr	PRIMASK, ip
    if (callback) {
100022fa:	2a00      	cmp	r2, #0
100022fc:	d0e6      	beq.n	100022cc <hardware_alarm_irq_handler+0x50>
        callback(alarm_num);
100022fe:	4790      	blx	r2
}
10002300:	e7e4      	b.n	100022cc <hardware_alarm_irq_handler+0x50>
            timer_hw->alarm[alarm_num] = timer_hw->alarm[alarm_num]; // re-arm the timer
10002302:	4a0b      	ldr	r2, [pc, #44]	; (10002330 <hardware_alarm_irq_handler+0xb4>)
10002304:	009b      	lsls	r3, r3, #2
10002306:	4690      	mov	r8, r2
10002308:	4443      	add	r3, r8
1000230a:	681a      	ldr	r2, [r3, #0]
1000230c:	601a      	str	r2, [r3, #0]
    __asm volatile ("dmb");
1000230e:	f3bf 8f5f 	dmb	sy
    *lock = 0;
10002312:	2300      	movs	r3, #0
10002314:	602b      	str	r3, [r5, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10002316:	f38c 8810 	msr	PRIMASK, ip
    if (callback) {
1000231a:	e7d7      	b.n	100022cc <hardware_alarm_irq_handler+0x50>
1000231c:	d0000128 	.word	0xd0000128
10002320:	40054000 	.word	0x40054000
10002324:	200394e0 	.word	0x200394e0
10002328:	200394c8 	.word	0x200394c8
1000232c:	2003935c 	.word	0x2003935c
10002330:	40053fd0 	.word	0x40053fd0

10002334 <hardware_alarm_claim>:
void hardware_alarm_claim(uint alarm_num) {
10002334:	b510      	push	{r4, lr}
10002336:	0001      	movs	r1, r0
    hw_claim_or_assert(&claimed, alarm_num, "Hardware alarm %d already claimed");
10002338:	4a02      	ldr	r2, [pc, #8]	; (10002344 <hardware_alarm_claim+0x10>)
1000233a:	4803      	ldr	r0, [pc, #12]	; (10002348 <hardware_alarm_claim+0x14>)
1000233c:	f7fe fb7a 	bl	10000a34 <hw_claim_or_assert>
}
10002340:	bd10      	pop	{r4, pc}
10002342:	46c0      	nop			; (mov r8, r8)
10002344:	10004be0 	.word	0x10004be0
10002348:	200394de 	.word	0x200394de

1000234c <time_us_64>:
    uint32_t hi = timer_hw->timerawh;
1000234c:	4b03      	ldr	r3, [pc, #12]	; (1000235c <time_us_64+0x10>)
1000234e:	6a59      	ldr	r1, [r3, #36]	; 0x24
        lo = timer_hw->timerawl;
10002350:	000a      	movs	r2, r1
10002352:	6a98      	ldr	r0, [r3, #40]	; 0x28
        uint32_t next_hi = timer_hw->timerawh;
10002354:	6a59      	ldr	r1, [r3, #36]	; 0x24
        if (hi == next_hi) break;
10002356:	428a      	cmp	r2, r1
10002358:	d1fa      	bne.n	10002350 <time_us_64+0x4>
}
1000235a:	4770      	bx	lr
1000235c:	40054000 	.word	0x40054000

10002360 <hardware_alarm_set_callback>:

void hardware_alarm_set_callback(uint alarm_num, hardware_alarm_callback_t callback) {
10002360:	b570      	push	{r4, r5, r6, lr}
10002362:	0004      	movs	r4, r0
10002364:	000d      	movs	r5, r1
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
10002366:	f3ef 8610 	mrs	r6, PRIMASK
    __asm volatile ("cpsid i");
1000236a:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
1000236c:	4a1a      	ldr	r2, [pc, #104]	; (100023d8 <hardware_alarm_set_callback+0x78>)
1000236e:	6813      	ldr	r3, [r2, #0]
10002370:	2b00      	cmp	r3, #0
10002372:	d0fc      	beq.n	1000236e <hardware_alarm_set_callback+0xe>
    __asm volatile ("dmb");
10002374:	f3bf 8f5f 	dmb	sy
    //  should disallow IRQ handlers on both cores
    check_hardware_alarm_num_param(alarm_num);
    uint irq_num = harware_alarm_irq_number(alarm_num);
    spin_lock_t *lock = spin_lock_instance(PICO_SPINLOCK_ID_TIMER);
    uint32_t save = spin_lock_blocking(lock);
    if (callback) {
10002378:	2d00      	cmp	r5, #0
1000237a:	d01b      	beq.n	100023b4 <hardware_alarm_set_callback+0x54>
        if (hardware_alarm_irq_handler != irq_get_vtable_handler(irq_num)) {
1000237c:	0020      	movs	r0, r4
1000237e:	f7fe fe41 	bl	10001004 <irq_get_vtable_handler>
10002382:	4916      	ldr	r1, [pc, #88]	; (100023dc <hardware_alarm_set_callback+0x7c>)
10002384:	4281      	cmp	r1, r0
10002386:	d00a      	beq.n	1000239e <hardware_alarm_set_callback+0x3e>
            // note that set_exclusive will silently allow you to set the handler to the same thing
            // since it is idempotent, which means we don't need to worry about locking ourselves
            irq_set_exclusive_handler(irq_num, hardware_alarm_irq_handler);
10002388:	0020      	movs	r0, r4
1000238a:	f7fe fe43 	bl	10001014 <irq_set_exclusive_handler>
            irq_set_enabled(irq_num, true);
1000238e:	2101      	movs	r1, #1
10002390:	0020      	movs	r0, r4
10002392:	f7fe fe25 	bl	10000fe0 <irq_set_enabled>
            // Enable interrupt in block and at processor
            hw_set_bits(&timer_hw->inte, 1u << alarm_num);
10002396:	2301      	movs	r3, #1
10002398:	40a3      	lsls	r3, r4
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
1000239a:	4a11      	ldr	r2, [pc, #68]	; (100023e0 <hardware_alarm_set_callback+0x80>)
1000239c:	6013      	str	r3, [r2, #0]
        }
        alarm_callbacks[alarm_num] = callback;
1000239e:	4b11      	ldr	r3, [pc, #68]	; (100023e4 <hardware_alarm_set_callback+0x84>)
100023a0:	00a4      	lsls	r4, r4, #2
100023a2:	50e5      	str	r5, [r4, r3]
100023a4:	f3bf 8f5f 	dmb	sy
    *lock = 0;
100023a8:	2200      	movs	r2, #0
100023aa:	4b0b      	ldr	r3, [pc, #44]	; (100023d8 <hardware_alarm_set_callback+0x78>)
100023ac:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
100023ae:	f386 8810 	msr	PRIMASK, r6
        timer_callbacks_pending &= ~(1u << alarm_num);
        irq_remove_handler(irq_num, hardware_alarm_irq_handler);
        irq_set_enabled(irq_num, false);
    }
    spin_unlock(lock, save);
}
100023b2:	bd70      	pop	{r4, r5, r6, pc}
        alarm_callbacks[alarm_num] = NULL;
100023b4:	4b0b      	ldr	r3, [pc, #44]	; (100023e4 <hardware_alarm_set_callback+0x84>)
100023b6:	00a2      	lsls	r2, r4, #2
100023b8:	50d5      	str	r5, [r2, r3]
        timer_callbacks_pending &= ~(1u << alarm_num);
100023ba:	2201      	movs	r2, #1
100023bc:	40a2      	lsls	r2, r4
100023be:	490a      	ldr	r1, [pc, #40]	; (100023e8 <hardware_alarm_set_callback+0x88>)
        irq_remove_handler(irq_num, hardware_alarm_irq_handler);
100023c0:	0020      	movs	r0, r4
        timer_callbacks_pending &= ~(1u << alarm_num);
100023c2:	780b      	ldrb	r3, [r1, #0]
100023c4:	4393      	bics	r3, r2
100023c6:	700b      	strb	r3, [r1, #0]
        irq_remove_handler(irq_num, hardware_alarm_irq_handler);
100023c8:	4904      	ldr	r1, [pc, #16]	; (100023dc <hardware_alarm_set_callback+0x7c>)
100023ca:	f7fe fe4d 	bl	10001068 <irq_remove_handler>
        irq_set_enabled(irq_num, false);
100023ce:	2100      	movs	r1, #0
100023d0:	0020      	movs	r0, r4
100023d2:	f7fe fe05 	bl	10000fe0 <irq_set_enabled>
100023d6:	e7e5      	b.n	100023a4 <hardware_alarm_set_callback+0x44>
100023d8:	d0000128 	.word	0xd0000128
100023dc:	1000227d 	.word	0x1000227d
100023e0:	40056038 	.word	0x40056038
100023e4:	2003935c 	.word	0x2003935c
100023e8:	200394e0 	.word	0x200394e0

100023ec <hardware_alarm_set_target>:

bool hardware_alarm_set_target(uint alarm_num, absolute_time_t target) {
100023ec:	b5f0      	push	{r4, r5, r6, r7, lr}
100023ee:	46ce      	mov	lr, r9
100023f0:	4647      	mov	r7, r8
100023f2:	b580      	push	{r7, lr}
    uint32_t hi = timer_hw->timerawh;
100023f4:	4c2a      	ldr	r4, [pc, #168]	; (100024a0 <hardware_alarm_set_target+0xb4>)
100023f6:	6a61      	ldr	r1, [r4, #36]	; 0x24
        lo = timer_hw->timerawl;
100023f8:	000d      	movs	r5, r1
100023fa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
        uint32_t next_hi = timer_hw->timerawh;
100023fc:	6a61      	ldr	r1, [r4, #36]	; 0x24
        if (hi == next_hi) break;
100023fe:	42a9      	cmp	r1, r5
10002400:	d1fa      	bne.n	100023f8 <hardware_alarm_set_target+0xc>
    bool missed;
    uint64_t now = time_us_64();
    uint64_t t = to_us_since_boot(target);
    if (now >= t) {
10002402:	428b      	cmp	r3, r1
10002404:	d807      	bhi.n	10002416 <hardware_alarm_set_target+0x2a>
10002406:	d004      	beq.n	10002412 <hardware_alarm_set_target+0x26>
        missed = true;
10002408:	2001      	movs	r0, #1
            }
        }
        spin_unlock(lock, save);
    }
    return missed;
}
1000240a:	bcc0      	pop	{r6, r7}
1000240c:	46b9      	mov	r9, r7
1000240e:	46b0      	mov	r8, r6
10002410:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (now >= t) {
10002412:	42b2      	cmp	r2, r6
10002414:	d9f8      	bls.n	10002408 <hardware_alarm_set_target+0x1c>
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
10002416:	f3ef 8910 	mrs	r9, PRIMASK
    __asm volatile ("cpsid i");
1000241a:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
1000241c:	4c21      	ldr	r4, [pc, #132]	; (100024a4 <hardware_alarm_set_target+0xb8>)
1000241e:	6821      	ldr	r1, [r4, #0]
10002420:	2900      	cmp	r1, #0
10002422:	d0fc      	beq.n	1000241e <hardware_alarm_set_target+0x32>
    __asm volatile ("dmb");
10002424:	f3bf 8f5f 	dmb	sy
        timer_hw->intr = 1u << alarm_num;
10002428:	2501      	movs	r5, #1
1000242a:	4085      	lsls	r5, r0
1000242c:	4c1c      	ldr	r4, [pc, #112]	; (100024a0 <hardware_alarm_set_target+0xb4>)
        timer_callbacks_pending |= 1u << alarm_num;
1000242e:	4f1e      	ldr	r7, [pc, #120]	; (100024a8 <hardware_alarm_set_target+0xbc>)
        timer_hw->intr = 1u << alarm_num;
10002430:	6365      	str	r5, [r4, #52]	; 0x34
        timer_callbacks_pending |= 1u << alarm_num;
10002432:	b2e9      	uxtb	r1, r5
10002434:	4688      	mov	r8, r1
10002436:	7839      	ldrb	r1, [r7, #0]
10002438:	468c      	mov	ip, r1
1000243a:	4641      	mov	r1, r8
1000243c:	4666      	mov	r6, ip
1000243e:	4331      	orrs	r1, r6
10002440:	7039      	strb	r1, [r7, #0]
        timer_hw->alarm[alarm_num] = (uint32_t) t;
10002442:	1d01      	adds	r1, r0, #4
10002444:	0089      	lsls	r1, r1, #2
10002446:	510a      	str	r2, [r1, r4]
        target_hi[alarm_num] = t >> 32u;
10002448:	4918      	ldr	r1, [pc, #96]	; (100024ac <hardware_alarm_set_target+0xc0>)
1000244a:	0080      	lsls	r0, r0, #2
1000244c:	5043      	str	r3, [r0, r1]
        if (!(timer_hw->armed & 1u << alarm_num)) {
1000244e:	6a21      	ldr	r1, [r4, #32]
        missed = false;
10002450:	2000      	movs	r0, #0
        if (!(timer_hw->armed & 1u << alarm_num)) {
10002452:	4229      	tst	r1, r5
10002454:	d00b      	beq.n	1000246e <hardware_alarm_set_target+0x82>
    uint32_t hi = timer_hw->timerawh;
10002456:	6a61      	ldr	r1, [r4, #36]	; 0x24
        lo = timer_hw->timerawl;
10002458:	0008      	movs	r0, r1
1000245a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
        uint32_t next_hi = timer_hw->timerawh;
1000245c:	6a61      	ldr	r1, [r4, #36]	; 0x24
        if (hi == next_hi) break;
1000245e:	4281      	cmp	r1, r0
10002460:	d1fa      	bne.n	10002458 <hardware_alarm_set_target+0x6c>
            if (time_us_64() >= t) {
10002462:	428b      	cmp	r3, r1
10002464:	d802      	bhi.n	1000246c <hardware_alarm_set_target+0x80>
10002466:	d10a      	bne.n	1000247e <hardware_alarm_set_target+0x92>
10002468:	42b2      	cmp	r2, r6
1000246a:	d908      	bls.n	1000247e <hardware_alarm_set_target+0x92>
        missed = false;
1000246c:	2000      	movs	r0, #0
1000246e:	f3bf 8f5f 	dmb	sy
    *lock = 0;
10002472:	2200      	movs	r2, #0
10002474:	4b0b      	ldr	r3, [pc, #44]	; (100024a4 <hardware_alarm_set_target+0xb8>)
10002476:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10002478:	f389 8810 	msr	PRIMASK, r9
}
1000247c:	e7c5      	b.n	1000240a <hardware_alarm_set_target+0x1e>
                timer_hw->armed = 1u << alarm_num;
1000247e:	4b08      	ldr	r3, [pc, #32]	; (100024a0 <hardware_alarm_set_target+0xb4>)
                timer_callbacks_pending &= ~(1u << alarm_num);
10002480:	4642      	mov	r2, r8
                timer_hw->armed = 1u << alarm_num;
10002482:	621d      	str	r5, [r3, #32]
                timer_hw->intr = 1u << alarm_num; // clear the IRQ too
10002484:	635d      	str	r5, [r3, #52]	; 0x34
                timer_callbacks_pending &= ~(1u << alarm_num);
10002486:	4663      	mov	r3, ip
10002488:	4393      	bics	r3, r2
                missed = true;
1000248a:	2001      	movs	r0, #1
                timer_callbacks_pending &= ~(1u << alarm_num);
1000248c:	703b      	strb	r3, [r7, #0]
    __asm volatile ("dmb");
1000248e:	f3bf 8f5f 	dmb	sy
    *lock = 0;
10002492:	2200      	movs	r2, #0
10002494:	4b03      	ldr	r3, [pc, #12]	; (100024a4 <hardware_alarm_set_target+0xb8>)
10002496:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10002498:	f389 8810 	msr	PRIMASK, r9
1000249c:	e7b5      	b.n	1000240a <hardware_alarm_set_target+0x1e>
1000249e:	46c0      	nop			; (mov r8, r8)
100024a0:	40054000 	.word	0x40054000
100024a4:	d0000128 	.word	0xd0000128
100024a8:	200394e0 	.word	0x200394e0
100024ac:	200394c8 	.word	0x200394c8

100024b0 <hardware_alarm_cancel>:
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
100024b0:	f3ef 8c10 	mrs	ip, PRIMASK
    __asm volatile ("cpsid i");
100024b4:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
100024b6:	490a      	ldr	r1, [pc, #40]	; (100024e0 <hardware_alarm_cancel+0x30>)
100024b8:	680b      	ldr	r3, [r1, #0]
100024ba:	2b00      	cmp	r3, #0
100024bc:	d0fc      	beq.n	100024b8 <hardware_alarm_cancel+0x8>
    __asm volatile ("dmb");
100024be:	f3bf 8f5f 	dmb	sy
void hardware_alarm_cancel(uint alarm_num) {
    check_hardware_alarm_num_param(alarm_num);

    spin_lock_t *lock = spin_lock_instance(PICO_SPINLOCK_ID_TIMER);
    uint32_t save = spin_lock_blocking(lock);
    timer_hw->armed = 1u << alarm_num;
100024c2:	2301      	movs	r3, #1
100024c4:	4083      	lsls	r3, r0
100024c6:	4a07      	ldr	r2, [pc, #28]	; (100024e4 <hardware_alarm_cancel+0x34>)
    timer_callbacks_pending &= ~(1u << alarm_num);
100024c8:	4807      	ldr	r0, [pc, #28]	; (100024e8 <hardware_alarm_cancel+0x38>)
    timer_hw->armed = 1u << alarm_num;
100024ca:	6213      	str	r3, [r2, #32]
    timer_callbacks_pending &= ~(1u << alarm_num);
100024cc:	7802      	ldrb	r2, [r0, #0]
100024ce:	439a      	bics	r2, r3
100024d0:	7002      	strb	r2, [r0, #0]
100024d2:	f3bf 8f5f 	dmb	sy
    *lock = 0;
100024d6:	2300      	movs	r3, #0
100024d8:	600b      	str	r3, [r1, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
100024da:	f38c 8810 	msr	PRIMASK, ip
    spin_unlock(lock, save);
}
100024de:	4770      	bx	lr
100024e0:	d0000128 	.word	0xd0000128
100024e4:	40054000 	.word	0x40054000
100024e8:	200394e0 	.word	0x200394e0

100024ec <_retrieve_unique_id_on_boot>:

static_assert(PICO_UNIQUE_BOARD_ID_SIZE_BYTES == FLASH_UNIQUE_ID_SIZE_BYTES, "Board ID size must match flash ID size");

static pico_unique_board_id_t retrieved_id;

static void __attribute__((constructor)) _retrieve_unique_id_on_boot() {
100024ec:	b510      	push	{r4, lr}
    // build. Since this constructor is pre-main it would be annoying to
    // debug, so just produce something well-defined and obviously wrong.
    for (int i = 0; i < PICO_UNIQUE_BOARD_ID_SIZE_BYTES; i++)
        retrieved_id.id[i] = 0xee;
#else
    flash_get_unique_id(retrieved_id.id);
100024ee:	4802      	ldr	r0, [pc, #8]	; (100024f8 <_retrieve_unique_id_on_boot+0xc>)
100024f0:	f7fe fcfa 	bl	10000ee8 <flash_get_unique_id>
#endif
}
100024f4:	bd10      	pop	{r4, pc}
100024f6:	46c0      	nop			; (mov r8, r8)
100024f8:	200394bc 	.word	0x200394bc

100024fc <watchdog_start_tick>:
#include "hardware/structs/psm.h"

/// \tag::watchdog_start_tick[]
void watchdog_start_tick(uint cycles) {
    // Important: This function also provides a tick reference to the timer
    watchdog_hw->tick = cycles | WATCHDOG_TICK_ENABLE_BITS;
100024fc:	2380      	movs	r3, #128	; 0x80
100024fe:	4a02      	ldr	r2, [pc, #8]	; (10002508 <watchdog_start_tick+0xc>)
10002500:	009b      	lsls	r3, r3, #2
10002502:	4303      	orrs	r3, r0
10002504:	62d3      	str	r3, [r2, #44]	; 0x2c
}
10002506:	4770      	bx	lr
10002508:	40058000 	.word	0x40058000

1000250c <xosc_init>:
#include "hardware/structs/xosc.h"

void xosc_init(void) {
    // Assumes 1-15 MHz input
    assert(XOSC_MHZ <= 15);
    xosc_hw->ctrl = XOSC_CTRL_FREQ_RANGE_VALUE_1_15MHZ;
1000250c:	23aa      	movs	r3, #170	; 0xaa
1000250e:	4a06      	ldr	r2, [pc, #24]	; (10002528 <xosc_init+0x1c>)
10002510:	011b      	lsls	r3, r3, #4
10002512:	6013      	str	r3, [r2, #0]

    // Set xosc startup delay
    uint32_t startup_delay = (((12 * MHZ) / 1000) + 128) / 256;
    xosc_hw->startup = startup_delay;
10002514:	232f      	movs	r3, #47	; 0x2f
10002516:	4905      	ldr	r1, [pc, #20]	; (1000252c <xosc_init+0x20>)
10002518:	60d3      	str	r3, [r2, #12]
1000251a:	4b05      	ldr	r3, [pc, #20]	; (10002530 <xosc_init+0x24>)
1000251c:	6019      	str	r1, [r3, #0]

    // Set the enable bit now that we have set freq range and startup delay
    hw_set_bits(&xosc_hw->ctrl, XOSC_CTRL_ENABLE_VALUE_ENABLE << XOSC_CTRL_ENABLE_LSB);

    // Wait for XOSC to be stable
    while(!(xosc_hw->status & XOSC_STATUS_STABLE_BITS));
1000251e:	6853      	ldr	r3, [r2, #4]
10002520:	2b00      	cmp	r3, #0
10002522:	dafc      	bge.n	1000251e <xosc_init+0x12>
}
10002524:	4770      	bx	lr
10002526:	46c0      	nop			; (mov r8, r8)
10002528:	40024000 	.word	0x40024000
1000252c:	00fab000 	.word	0x00fab000
10002530:	40026000 	.word	0x40026000

10002534 <main>:

// Draw box
ALIGNED u8 Box[512*400];

int main()
{
10002534:	b510      	push	{r4, lr}
	// initialize videomode
	Video(DEV_VGA, RES_EGA, FORM_8BIT, Box);
10002536:	4c0d      	ldr	r4, [pc, #52]	; (1000256c <main+0x38>)
{
10002538:	b086      	sub	sp, #24
	Video(DEV_VGA, RES_EGA, FORM_8BIT, Box);
1000253a:	2200      	movs	r2, #0
1000253c:	2103      	movs	r1, #3
1000253e:	2002      	movs	r0, #2
10002540:	4b0b      	ldr	r3, [pc, #44]	; (10002570 <main+0x3c>)
10002542:	9400      	str	r4, [sp, #0]
10002544:	f001 f91c 	bl	10003780 <_Z5VideohhhPhPKv>

	// draw text
	DrawText(&Canvas, "Hello Doug!", (512-12*8*4)/2, (400-8*4)/2,
10002548:	2304      	movs	r3, #4
1000254a:	9304      	str	r3, [sp, #16]
1000254c:	9303      	str	r3, [sp, #12]
1000254e:	330c      	adds	r3, #12
10002550:	9302      	str	r3, [sp, #8]
10002552:	33ef      	adds	r3, #239	; 0xef
10002554:	9300      	str	r3, [sp, #0]
10002556:	2240      	movs	r2, #64	; 0x40
10002558:	4906      	ldr	r1, [pc, #24]	; (10002574 <main+0x40>)
1000255a:	4807      	ldr	r0, [pc, #28]	; (10002578 <main+0x44>)
1000255c:	9401      	str	r4, [sp, #4]
1000255e:	3b47      	subs	r3, #71	; 0x47
10002560:	f001 fbaa 	bl	10003cb8 <_Z8DrawTextP7sCanvasPKciihPKviii>
		COL_WHITE, FontBoldB8x16, 16, 4, 4);
}
10002564:	2000      	movs	r0, #0
10002566:	b006      	add	sp, #24
10002568:	bd10      	pop	{r4, pc}
1000256a:	46c0      	nop			; (mov r8, r8)
1000256c:	10005224 	.word	0x10005224
10002570:	2000316c 	.word	0x2000316c
10002574:	10004c04 	.word	0x10004c04
10002578:	20035170 	.word	0x20035170

1000257c <_Z10VgaDmaInitv>:
 * \param read_addr Initial read address of transfer.
 * \param trigger True to start the transfer immediately
 */
static inline void dma_channel_set_read_addr(uint channel, const volatile void *read_addr, bool trigger) {
    if (!trigger) {
        dma_channel_hw_addr(channel)->read_addr = (uintptr_t) read_addr;
1000257c:	23a0      	movs	r3, #160	; 0xa0
// 0x10 (alias 1):  CTRL        READ_ADDR     WRITE_ADDR    TRANS_COUNT_TRIG
// 0x20 (alias 2):  CTRL        TRANS_COUNT   READ_ADDR     WRITE_ADDR_TRIG
// 0x30 (alias 3):  CTRL        WRITE_ADDR    TRANS_COUNT   READ_ADDR_TRIG ... !

void VgaDmaInit()
{
1000257e:	b570      	push	{r4, r5, r6, lr}
 * \param trans_count The number of transfers (not NOT bytes, see channel_config_set_transfer_data_size)
 * \param trigger True to start the transfer immediately
 */
static inline void dma_channel_set_trans_count(uint channel, uint32_t trans_count, bool trigger) {
    if (!trigger) {
        dma_channel_hw_addr(channel)->transfer_count = trans_count;
10002580:	2402      	movs	r4, #2
        dma_channel_hw_addr(channel)->write_addr = (uintptr_t) write_addr;
10002582:	4a2a      	ldr	r2, [pc, #168]	; (1000262c <_Z10VgaDmaInitv+0xb0>)
        dma_channel_hw_addr(channel)->read_addr = (uintptr_t) read_addr;
10002584:	492a      	ldr	r1, [pc, #168]	; (10002630 <_Z10VgaDmaInitv+0xb4>)
10002586:	05db      	lsls	r3, r3, #23
10002588:	6019      	str	r1, [r3, #0]
        dma_channel_hw_addr(channel)->write_addr = (uintptr_t) write_addr;
1000258a:	605a      	str	r2, [r3, #4]
        dma_channel_hw_addr(channel)->al1_ctrl = channel_config_get_ctrl_value(config);
1000258c:	4a29      	ldr	r2, [pc, #164]	; (10002634 <_Z10VgaDmaInitv+0xb8>)
        dma_channel_hw_addr(channel)->transfer_count = trans_count;
1000258e:	609c      	str	r4, [r3, #8]
        dma_channel_hw_addr(channel)->al1_ctrl = channel_config_get_ctrl_value(config);
10002590:	611a      	str	r2, [r3, #16]
        dma_channel_hw_addr(channel)->read_addr = (uintptr_t) read_addr;
10002592:	2200      	movs	r2, #0
10002594:	4b28      	ldr	r3, [pc, #160]	; (10002638 <_Z10VgaDmaInitv+0xbc>)
        dma_channel_hw_addr(channel)->write_addr = (uintptr_t) write_addr;
10002596:	4829      	ldr	r0, [pc, #164]	; (1000263c <_Z10VgaDmaInitv+0xc0>)
        dma_channel_hw_addr(channel)->read_addr = (uintptr_t) read_addr;
10002598:	601a      	str	r2, [r3, #0]
        dma_channel_hw_addr(channel)->write_addr = (uintptr_t) write_addr;
1000259a:	6058      	str	r0, [r3, #4]
        dma_channel_hw_addr(channel)->al1_ctrl = channel_config_get_ctrl_value(config);
1000259c:	4828      	ldr	r0, [pc, #160]	; (10002640 <_Z10VgaDmaInitv+0xc4>)
        dma_channel_hw_addr(channel)->transfer_count = trans_count;
1000259e:	609a      	str	r2, [r3, #8]
        dma_channel_hw_addr(channel)->al1_ctrl = channel_config_get_ctrl_value(config);
100025a0:	6118      	str	r0, [r3, #16]
	dma_channel_config cfg;
	int layer;
	for (layer = 0; layer < LAYERS; layer++)
	{
		// layer is not active
		if ((layer > 0) && (LayerModeInx[layer] == LAYERMODE_BASE)) continue;
100025a2:	4b28      	ldr	r3, [pc, #160]	; (10002644 <_Z10VgaDmaInitv+0xc8>)
100025a4:	7858      	ldrb	r0, [r3, #1]
100025a6:	2800      	cmp	r0, #0
100025a8:	d00d      	beq.n	100025c6 <_Z10VgaDmaInitv+0x4a>
        dma_channel_hw_addr(channel)->read_addr = (uintptr_t) read_addr;
100025aa:	4827      	ldr	r0, [pc, #156]	; (10002648 <_Z10VgaDmaInitv+0xcc>)
        dma_channel_hw_addr(channel)->write_addr = (uintptr_t) write_addr;
100025ac:	4d27      	ldr	r5, [pc, #156]	; (1000264c <_Z10VgaDmaInitv+0xd0>)
        dma_channel_hw_addr(channel)->read_addr = (uintptr_t) read_addr;
100025ae:	6001      	str	r1, [r0, #0]
        dma_channel_hw_addr(channel)->write_addr = (uintptr_t) write_addr;
100025b0:	6045      	str	r5, [r0, #4]
        dma_channel_hw_addr(channel)->transfer_count = trans_count;
100025b2:	6084      	str	r4, [r0, #8]
        dma_channel_hw_addr(channel)->al1_ctrl = channel_config_get_ctrl_value(config);
100025b4:	4c26      	ldr	r4, [pc, #152]	; (10002650 <_Z10VgaDmaInitv+0xd4>)
100025b6:	6104      	str	r4, [r0, #16]
        dma_channel_hw_addr(channel)->read_addr = (uintptr_t) read_addr;
100025b8:	4826      	ldr	r0, [pc, #152]	; (10002654 <_Z10VgaDmaInitv+0xd8>)
        dma_channel_hw_addr(channel)->write_addr = (uintptr_t) write_addr;
100025ba:	4c27      	ldr	r4, [pc, #156]	; (10002658 <_Z10VgaDmaInitv+0xdc>)
        dma_channel_hw_addr(channel)->read_addr = (uintptr_t) read_addr;
100025bc:	6002      	str	r2, [r0, #0]
        dma_channel_hw_addr(channel)->write_addr = (uintptr_t) write_addr;
100025be:	6044      	str	r4, [r0, #4]
        dma_channel_hw_addr(channel)->transfer_count = trans_count;
100025c0:	6082      	str	r2, [r0, #8]
        dma_channel_hw_addr(channel)->al1_ctrl = channel_config_get_ctrl_value(config);
100025c2:	4a26      	ldr	r2, [pc, #152]	; (1000265c <_Z10VgaDmaInitv+0xe0>)
100025c4:	6102      	str	r2, [r0, #16]
100025c6:	789a      	ldrb	r2, [r3, #2]
100025c8:	2a00      	cmp	r2, #0
100025ca:	d00f      	beq.n	100025ec <_Z10VgaDmaInitv+0x70>
        dma_channel_hw_addr(channel)->read_addr = (uintptr_t) read_addr;
100025cc:	4a24      	ldr	r2, [pc, #144]	; (10002660 <_Z10VgaDmaInitv+0xe4>)
        dma_channel_hw_addr(channel)->write_addr = (uintptr_t) write_addr;
100025ce:	4825      	ldr	r0, [pc, #148]	; (10002664 <_Z10VgaDmaInitv+0xe8>)
        dma_channel_hw_addr(channel)->read_addr = (uintptr_t) read_addr;
100025d0:	6011      	str	r1, [r2, #0]
        dma_channel_hw_addr(channel)->write_addr = (uintptr_t) write_addr;
100025d2:	6050      	str	r0, [r2, #4]
        dma_channel_hw_addr(channel)->transfer_count = trans_count;
100025d4:	2002      	movs	r0, #2
100025d6:	6090      	str	r0, [r2, #8]
        dma_channel_hw_addr(channel)->al1_ctrl = channel_config_get_ctrl_value(config);
100025d8:	4823      	ldr	r0, [pc, #140]	; (10002668 <_Z10VgaDmaInitv+0xec>)
        dma_channel_hw_addr(channel)->write_addr = (uintptr_t) write_addr;
100025da:	4c24      	ldr	r4, [pc, #144]	; (1000266c <_Z10VgaDmaInitv+0xf0>)
        dma_channel_hw_addr(channel)->al1_ctrl = channel_config_get_ctrl_value(config);
100025dc:	6110      	str	r0, [r2, #16]
        dma_channel_hw_addr(channel)->read_addr = (uintptr_t) read_addr;
100025de:	2000      	movs	r0, #0
100025e0:	4a23      	ldr	r2, [pc, #140]	; (10002670 <_Z10VgaDmaInitv+0xf4>)
100025e2:	6010      	str	r0, [r2, #0]
        dma_channel_hw_addr(channel)->write_addr = (uintptr_t) write_addr;
100025e4:	6054      	str	r4, [r2, #4]
        dma_channel_hw_addr(channel)->transfer_count = trans_count;
100025e6:	6090      	str	r0, [r2, #8]
        dma_channel_hw_addr(channel)->al1_ctrl = channel_config_get_ctrl_value(config);
100025e8:	4822      	ldr	r0, [pc, #136]	; (10002674 <_Z10VgaDmaInitv+0xf8>)
100025ea:	6110      	str	r0, [r2, #16]
100025ec:	78db      	ldrb	r3, [r3, #3]
100025ee:	2b00      	cmp	r3, #0
100025f0:	d00f      	beq.n	10002612 <_Z10VgaDmaInitv+0x96>
        dma_channel_hw_addr(channel)->read_addr = (uintptr_t) read_addr;
100025f2:	4b21      	ldr	r3, [pc, #132]	; (10002678 <_Z10VgaDmaInitv+0xfc>)
        dma_channel_hw_addr(channel)->write_addr = (uintptr_t) write_addr;
100025f4:	4a21      	ldr	r2, [pc, #132]	; (1000267c <_Z10VgaDmaInitv+0x100>)
        dma_channel_hw_addr(channel)->read_addr = (uintptr_t) read_addr;
100025f6:	6019      	str	r1, [r3, #0]
        dma_channel_hw_addr(channel)->write_addr = (uintptr_t) write_addr;
100025f8:	605a      	str	r2, [r3, #4]
        dma_channel_hw_addr(channel)->transfer_count = trans_count;
100025fa:	2202      	movs	r2, #2
100025fc:	609a      	str	r2, [r3, #8]
        dma_channel_hw_addr(channel)->al1_ctrl = channel_config_get_ctrl_value(config);
100025fe:	4a20      	ldr	r2, [pc, #128]	; (10002680 <_Z10VgaDmaInitv+0x104>)
        dma_channel_hw_addr(channel)->write_addr = (uintptr_t) write_addr;
10002600:	4920      	ldr	r1, [pc, #128]	; (10002684 <_Z10VgaDmaInitv+0x108>)
        dma_channel_hw_addr(channel)->al1_ctrl = channel_config_get_ctrl_value(config);
10002602:	611a      	str	r2, [r3, #16]
        dma_channel_hw_addr(channel)->read_addr = (uintptr_t) read_addr;
10002604:	2200      	movs	r2, #0
10002606:	4b20      	ldr	r3, [pc, #128]	; (10002688 <_Z10VgaDmaInitv+0x10c>)
10002608:	601a      	str	r2, [r3, #0]
        dma_channel_hw_addr(channel)->write_addr = (uintptr_t) write_addr;
1000260a:	6059      	str	r1, [r3, #4]
        dma_channel_hw_addr(channel)->transfer_count = trans_count;
1000260c:	609a      	str	r2, [r3, #8]
        dma_channel_hw_addr(channel)->al1_ctrl = channel_config_get_ctrl_value(config);
1000260e:	4a1f      	ldr	r2, [pc, #124]	; (1000268c <_Z10VgaDmaInitv+0x110>)
10002610:	611a      	str	r2, [r3, #16]
10002612:	2202      	movs	r2, #2
10002614:	4b1e      	ldr	r3, [pc, #120]	; (10002690 <_Z10VgaDmaInitv+0x114>)

	// enable DMA channel IRQ0
	dma_channel_set_irq0_enabled(VGA_DMA_PIO0, true);

	// set DMA IRQ handler
	irq_set_exclusive_handler(DMA_IRQ_0, VgaLine);
10002616:	200b      	movs	r0, #11
10002618:	601a      	str	r2, [r3, #0]
1000261a:	491e      	ldr	r1, [pc, #120]	; (10002694 <_Z10VgaDmaInitv+0x118>)
1000261c:	f7fe fcfa 	bl	10001014 <irq_set_exclusive_handler>

	// set highest IRQ priority
	irq_set_priority(DMA_IRQ_0, 0);
10002620:	2100      	movs	r1, #0
10002622:	200b      	movs	r0, #11
10002624:	f7fe fe00 	bl	10001228 <irq_set_priority>
}
10002628:	bd70      	pop	{r4, r5, r6, pc}
1000262a:	46c0      	nop			; (mov r8, r8)
1000262c:	50000078 	.word	0x50000078
10002630:	200351a8 	.word	0x200351a8
10002634:	001f84f9 	.word	0x001f84f9
10002638:	50000040 	.word	0x50000040
1000263c:	50200010 	.word	0x50200010
10002640:	0060001b 	.word	0x0060001b
10002644:	20036728 	.word	0x20036728
10002648:	50000080 	.word	0x50000080
1000264c:	500000f8 	.word	0x500000f8
10002650:	001f94f9 	.word	0x001f94f9
10002654:	500000c0 	.word	0x500000c0
10002658:	50200014 	.word	0x50200014
1000265c:	0060901b 	.word	0x0060901b
10002660:	50000100 	.word	0x50000100
10002664:	50000178 	.word	0x50000178
10002668:	001fa4f9 	.word	0x001fa4f9
1000266c:	50200018 	.word	0x50200018
10002670:	50000140 	.word	0x50000140
10002674:	0061201b 	.word	0x0061201b
10002678:	50000180 	.word	0x50000180
1000267c:	500001f8 	.word	0x500001f8
10002680:	001fb4f9 	.word	0x001fb4f9
10002684:	5020001c 	.word	0x5020001c
10002688:	500001c0 	.word	0x500001c0
1000268c:	0061b01b 	.word	0x0061b01b
10002690:	50002404 	.word	0x50002404
10002694:	20002499 	.word	0x20002499

10002698 <_Z10VgaPioInitv>:

// initialize VGA PIO
void VgaPioInit()
{
10002698:	b5f0      	push	{r4, r5, r6, r7, lr}
1000269a:	46ce      	mov	lr, r9
1000269c:	4647      	mov	r7, r8
1000269e:	b580      	push	{r7, lr}
100026a0:	b099      	sub	sp, #100	; 0x64
	int i;

	// clear PIO instruction memory 
	pio_clear_instruction_memory(VGA_PIO);
100026a2:	485c      	ldr	r0, [pc, #368]	; (10002814 <_Z10VgaPioInitv+0x17c>)

	// configure main program instructions
	uint16_t ins[32]; // temporary buffer of program instructions
	memcpy(ins, &vga_program_instructions, vga_program.length*sizeof(uint16_t)); // copy program into buffer
100026a4:	ac08      	add	r4, sp, #32
	pio_clear_instruction_memory(VGA_PIO);
100026a6:	f7ff f923 	bl	100018f0 <pio_clear_instruction_memory>
	memcpy(ins, &vga_program_instructions, vga_program.length*sizeof(uint16_t)); // copy program into buffer
100026aa:	0022      	movs	r2, r4
100026ac:	4b5a      	ldr	r3, [pc, #360]	; (10002818 <_Z10VgaPioInitv+0x180>)
100026ae:	cb23      	ldmia	r3!, {r0, r1, r5}
100026b0:	c223      	stmia	r2!, {r0, r1, r5}
100026b2:	cb23      	ldmia	r3!, {r0, r1, r5}
100026b4:	c223      	stmia	r2!, {r0, r1, r5}
100026b6:	6819      	ldr	r1, [r3, #0]
	u16 cpp = (u16)CurVmode.cpp; // number of clocks per pixel
100026b8:	4d58      	ldr	r5, [pc, #352]	; (1000281c <_Z10VgaPioInitv+0x184>)
	memcpy(ins, &vga_program_instructions, vga_program.length*sizeof(uint16_t)); // copy program into buffer
100026ba:	6011      	str	r1, [r2, #0]
100026bc:	889b      	ldrh	r3, [r3, #4]
	// load main program into PIO's instruction memory
	struct pio_program prg;
	prg.instructions = ins;
	prg.length = vga_program.length;
	prg.origin = BASE_OFFSET;
	pio_add_program(VGA_PIO, &prg);
100026be:	4855      	ldr	r0, [pc, #340]	; (10002814 <_Z10VgaPioInitv+0x17c>)
	memcpy(ins, &vga_program_instructions, vga_program.length*sizeof(uint16_t)); // copy program into buffer
100026c0:	8093      	strh	r3, [r2, #4]
	ins[vga_offset_extra1] |= (cpp-2) << 8; // update waits
100026c2:	8aee      	ldrh	r6, [r5, #22]
100026c4:	4b56      	ldr	r3, [pc, #344]	; (10002820 <_Z10VgaPioInitv+0x188>)
100026c6:	1eb2      	subs	r2, r6, #2
100026c8:	0212      	lsls	r2, r2, #8
100026ca:	4313      	orrs	r3, r2
100026cc:	b29b      	uxth	r3, r3
	prg.length = vga_program.length;
100026ce:	466a      	mov	r2, sp
	ins[vga_offset_extra1] |= (cpp-2) << 8; // update waits
100026d0:	8323      	strh	r3, [r4, #24]
	ins[vga_offset_extra2] |= (cpp-2) << 8; // update waits
100026d2:	83a3      	strh	r3, [r4, #28]
	prg.length = vga_program.length;
100026d4:	230f      	movs	r3, #15
	pio_add_program(VGA_PIO, &prg);
100026d6:	a902      	add	r1, sp, #8
	prg.length = vga_program.length;
100026d8:	7313      	strb	r3, [r2, #12]
	prg.origin = BASE_OFFSET;
100026da:	3302      	adds	r3, #2
100026dc:	7353      	strb	r3, [r2, #13]
	prg.instructions = ins;
100026de:	9402      	str	r4, [sp, #8]
	pio_add_program(VGA_PIO, &prg);
100026e0:	f7ff f8a2 	bl	10001828 <pio_add_program>

	// load layer program
	if (LayerProgInx != LAYERPROG_BASE)
100026e4:	4b4f      	ldr	r3, [pc, #316]	; (10002824 <_Z10VgaPioInitv+0x18c>)
100026e6:	781b      	ldrb	r3, [r3, #0]
100026e8:	2b00      	cmp	r3, #0
100026ea:	d161      	bne.n	100027b0 <_Z10VgaPioInitv+0x118>
	{
		// configure layer program instructions
		memcpy(ins, CurLayerProg.ins, CurLayerProg.length*sizeof(uint16_t)); // copy program into buffer
		for (i = 0; i < CurLayerProg.extranum; i++)
100026ec:	2400      	movs	r4, #0
    gpio_set_function(pin, pio == pio0 ? GPIO_FUNC_PIO0 : GPIO_FUNC_PIO1);
100026ee:	0020      	movs	r0, r4
100026f0:	2106      	movs	r1, #6
		prg.origin = LAYER_OFFSET;
		pio_add_program(VGA_PIO, &prg);
	}

	// connect PIO to the pad
	for (i = VGA_GPIO_FIRST; i <= VGA_GPIO_LAST; i++) pio_gpio_init(VGA_PIO, i);
100026f2:	3401      	adds	r4, #1
100026f4:	f7fe fc4a 	bl	10000f8c <gpio_set_function>
100026f8:	2c09      	cmp	r4, #9
100026fa:	d1f8      	bne.n	100026ee <_Z10VgaPioInitv+0x56>

	// negative HSYNC output
	if (!CurVmode.psync) gpio_set_outover(VGA_GPIO_SYNC, GPIO_OVERRIDE_INVERT);
100026fc:	2357      	movs	r3, #87	; 0x57
100026fe:	5ceb      	ldrb	r3, [r5, r3]
10002700:	2b00      	cmp	r3, #0
10002702:	d100      	bne.n	10002706 <_Z10VgaPioInitv+0x6e>
10002704:	e081      	b.n	1000280a <_Z10VgaPioInitv+0x172>

		// get default config
		pio_sm_config cfg = pio_get_default_sm_config();

		// map state machine's OUT and MOV pins	
		sm_config_set_out_pins(&cfg, LayerFirstPin[layer], LayerNumPin[layer]);
10002706:	4b48      	ldr	r3, [pc, #288]	; (10002828 <_Z10VgaPioInitv+0x190>)
		for (i = 0; i < CurLayerProg.extranum; i++)
10002708:	2400      	movs	r4, #0
		sm_config_set_out_pins(&cfg, LayerFirstPin[layer], LayerNumPin[layer]);
1000270a:	4698      	mov	r8, r3
		if ((layer > 0) && (LayerModeInx[layer] == LAYERMODE_BASE)) continue;
1000270c:	2c00      	cmp	r4, #0
1000270e:	d003      	beq.n	10002718 <_Z10VgaPioInitv+0x80>
10002710:	4b46      	ldr	r3, [pc, #280]	; (1000282c <_Z10VgaPioInitv+0x194>)
10002712:	5d1b      	ldrb	r3, [r3, r4]
10002714:	2b00      	cmp	r3, #0
10002716:	d036      	beq.n	10002786 <_Z10VgaPioInitv+0xee>
		pio_sm_set_consecutive_pindirs(VGA_PIO, VGA_SM(layer), VGA_GPIO_FIRST, VGA_GPIO_NUM, true);
10002718:	2301      	movs	r3, #1
1000271a:	2200      	movs	r2, #0
1000271c:	0021      	movs	r1, r4
1000271e:	483d      	ldr	r0, [pc, #244]	; (10002814 <_Z10VgaPioInitv+0x17c>)
10002720:	9300      	str	r3, [sp, #0]
10002722:	3308      	adds	r3, #8
10002724:	f7ff f900 	bl	10001928 <pio_sm_set_consecutive_pindirs>
		sm_config_set_out_pins(&cfg, LayerFirstPin[layer], LayerNumPin[layer]);
10002728:	4643      	mov	r3, r8
1000272a:	5d1e      	ldrb	r6, [r3, r4]
1000272c:	4b40      	ldr	r3, [pc, #256]	; (10002830 <_Z10VgaPioInitv+0x198>)
                 (out_count << PIO_SM0_PINCTRL_OUT_COUNT_LSB);
1000272e:	0536      	lsls	r6, r6, #20
10002730:	5d1b      	ldrb	r3, [r3, r4]
                 (out_base << PIO_SM0_PINCTRL_OUT_BASE_LSB) |
10002732:	431e      	orrs	r6, r3
    c->pinctrl = (c->pinctrl & ~(PIO_SM0_PINCTRL_OUT_BASE_BITS | PIO_SM0_PINCTRL_OUT_COUNT_BITS)) |
10002734:	9607      	str	r6, [sp, #28]

		// join FIFO to send only
		sm_config_set_fifo_join(&cfg, PIO_FIFO_JOIN_TX);

		// PIO clock divider
		sm_config_set_clkdiv(&cfg, CurVmode.div);
10002736:	8aaf      	ldrh	r7, [r5, #20]
10002738:	0038      	movs	r0, r7
1000273a:	f7fe f89d 	bl	10000878 <__wrap___aeabi_ui2f>
1000273e:	4681      	mov	r9, r0
    uint8_t div_frac = (uint8_t) ((div - div_int) * (1u << 8u));
10002740:	0038      	movs	r0, r7
10002742:	f7fe f89f 	bl	10000884 <__wrap___aeabi_i2f>
10002746:	1c01      	adds	r1, r0, #0
10002748:	4648      	mov	r0, r9
1000274a:	f7fe f886 	bl	1000085a <__wrap___aeabi_fsub>
1000274e:	2187      	movs	r1, #135	; 0x87
10002750:	05c9      	lsls	r1, r1, #23
10002752:	f7fe f88b 	bl	1000086c <__wrap___aeabi_fmul>
10002756:	f7fe f8e9 	bl	1000092c <__wrap___aeabi_f2uiz>
            (div_frac << PIO_SM0_CLKDIV_FRAC_LSB) |
1000275a:	b2c0      	uxtb	r0, r0
            (div_int << PIO_SM0_CLKDIV_INT_LSB);
1000275c:	043b      	lsls	r3, r7, #16
            (div_frac << PIO_SM0_CLKDIV_FRAC_LSB) |
1000275e:	0200      	lsls	r0, r0, #8
10002760:	4318      	orrs	r0, r3
    c->shiftctrl = (c->shiftctrl &
10002762:	4b34      	ldr	r3, [pc, #208]	; (10002834 <_Z10VgaPioInitv+0x19c>)
    c->clkdiv =
10002764:	9004      	str	r0, [sp, #16]
    c->shiftctrl = (c->shiftctrl &
10002766:	9306      	str	r3, [sp, #24]

		// shift left, autopull, pull threshold
		sm_config_set_out_shift(&cfg, false, true, 32);
	
		// base layer 0
		if (layer == 0)
10002768:	2c00      	cmp	r4, #0
1000276a:	d014      	beq.n	10002796 <_Z10VgaPioInitv+0xfe>
			pio_sm_init(VGA_PIO, VGA_SM0, vga_offset_entry+BASE_OFFSET, &cfg);
		}
		else
		{
			// set wrap
			sm_config_set_wrap(&cfg, CurLayerProg.wrap_target+LAYER_OFFSET, CurLayerProg.wrap+LAYER_OFFSET);
1000276c:	4a32      	ldr	r2, [pc, #200]	; (10002838 <_Z10VgaPioInitv+0x1a0>)

			// initialize state machine
			pio_sm_init(VGA_PIO, VGA_SM(layer), CurLayerProg.idle+LAYER_OFFSET, &cfg);
1000276e:	4829      	ldr	r0, [pc, #164]	; (10002814 <_Z10VgaPioInitv+0x17c>)
			sm_config_set_wrap(&cfg, CurLayerProg.wrap_target+LAYER_OFFSET, CurLayerProg.wrap+LAYER_OFFSET);
10002770:	7a53      	ldrb	r3, [r2, #9]
10002772:	7a91      	ldrb	r1, [r2, #10]
                  (wrap_target << PIO_SM0_EXECCTRL_WRAP_BOTTOM_LSB) |
10002774:	01db      	lsls	r3, r3, #7
                  (wrap << PIO_SM0_EXECCTRL_WRAP_TOP_LSB);
10002776:	0309      	lsls	r1, r1, #12
                  (wrap_target << PIO_SM0_EXECCTRL_WRAP_BOTTOM_LSB) |
10002778:	430b      	orrs	r3, r1
    c->execctrl = (c->execctrl & ~(PIO_SM0_EXECCTRL_WRAP_TOP_BITS | PIO_SM0_EXECCTRL_WRAP_BOTTOM_BITS)) |
1000277a:	9305      	str	r3, [sp, #20]
			pio_sm_init(VGA_PIO, VGA_SM(layer), CurLayerProg.idle+LAYER_OFFSET, &cfg);
1000277c:	0021      	movs	r1, r4
1000277e:	7ad2      	ldrb	r2, [r2, #11]
10002780:	ab04      	add	r3, sp, #16
10002782:	f7ff f913 	bl	100019ac <pio_sm_init>
	for (layer = 0; layer < LAYERS; layer++)
10002786:	3401      	adds	r4, #1
10002788:	2c04      	cmp	r4, #4
1000278a:	d1bf      	bne.n	1000270c <_Z10VgaPioInitv+0x74>
		}
	}
}
1000278c:	b019      	add	sp, #100	; 0x64
1000278e:	bcc0      	pop	{r6, r7}
10002790:	46b9      	mov	r9, r7
10002792:	46b0      	mov	r8, r6
10002794:	bdf0      	pop	{r4, r5, r6, r7, pc}
10002796:	4b29      	ldr	r3, [pc, #164]	; (1000283c <_Z10VgaPioInitv+0x1a4>)
			pio_sm_init(VGA_PIO, VGA_SM0, vga_offset_entry+BASE_OFFSET, &cfg);
10002798:	2213      	movs	r2, #19
1000279a:	9305      	str	r3, [sp, #20]
    c->pinctrl = (c->pinctrl & ~PIO_SM0_PINCTRL_SIDESET_BASE_BITS) |
1000279c:	4b28      	ldr	r3, [pc, #160]	; (10002840 <_Z10VgaPioInitv+0x1a8>)
1000279e:	2100      	movs	r1, #0
100027a0:	431e      	orrs	r6, r3
100027a2:	481c      	ldr	r0, [pc, #112]	; (10002814 <_Z10VgaPioInitv+0x17c>)
100027a4:	ab04      	add	r3, sp, #16
100027a6:	9607      	str	r6, [sp, #28]
	for (layer = 0; layer < LAYERS; layer++)
100027a8:	3401      	adds	r4, #1
			pio_sm_init(VGA_PIO, VGA_SM0, vga_offset_entry+BASE_OFFSET, &cfg);
100027aa:	f7ff f8ff 	bl	100019ac <pio_sm_init>
	for (layer = 0; layer < LAYERS; layer++)
100027ae:	e7af      	b.n	10002710 <_Z10VgaPioInitv+0x78>
		memcpy(ins, CurLayerProg.ins, CurLayerProg.length*sizeof(uint16_t)); // copy program into buffer
100027b0:	4b21      	ldr	r3, [pc, #132]	; (10002838 <_Z10VgaPioInitv+0x1a0>)
100027b2:	0020      	movs	r0, r4
100027b4:	4698      	mov	r8, r3
100027b6:	7a1b      	ldrb	r3, [r3, #8]
100027b8:	005a      	lsls	r2, r3, #1
100027ba:	4699      	mov	r9, r3
100027bc:	4643      	mov	r3, r8
100027be:	6819      	ldr	r1, [r3, #0]
100027c0:	f7fe f8ea 	bl	10000998 <__wrap___aeabi_memcpy>
		for (i = 0; i < CurLayerProg.extranum; i++)
100027c4:	4643      	mov	r3, r8
100027c6:	7b9b      	ldrb	r3, [r3, #14]
100027c8:	469c      	mov	ip, r3
100027ca:	2b00      	cmp	r3, #0
100027cc:	d011      	beq.n	100027f2 <_Z10VgaPioInitv+0x15a>
100027ce:	4641      	mov	r1, r8
100027d0:	2000      	movs	r0, #0
100027d2:	310f      	adds	r1, #15
			int extra = (int)cpp - CurLayerProg.extra[i*2+1];
100027d4:	784b      	ldrb	r3, [r1, #1]
			ins[CurLayerProg.extra[i*2]] |= extra << 8; // update waits
100027d6:	780a      	ldrb	r2, [r1, #0]
			int extra = (int)cpp - CurLayerProg.extra[i*2+1];
100027d8:	1af3      	subs	r3, r6, r3
			ins[CurLayerProg.extra[i*2]] |= extra << 8; // update waits
100027da:	43df      	mvns	r7, r3
100027dc:	0052      	lsls	r2, r2, #1
100027de:	17ff      	asrs	r7, r7, #31
100027e0:	403b      	ands	r3, r7
100027e2:	5aa7      	ldrh	r7, [r4, r2]
100027e4:	021b      	lsls	r3, r3, #8
100027e6:	433b      	orrs	r3, r7
		for (i = 0; i < CurLayerProg.extranum; i++)
100027e8:	3001      	adds	r0, #1
			ins[CurLayerProg.extra[i*2]] |= extra << 8; // update waits
100027ea:	52a3      	strh	r3, [r4, r2]
		for (i = 0; i < CurLayerProg.extranum; i++)
100027ec:	3102      	adds	r1, #2
100027ee:	4560      	cmp	r0, ip
100027f0:	dbf0      	blt.n	100027d4 <_Z10VgaPioInitv+0x13c>
		prg.length = CurLayerProg.length;
100027f2:	466b      	mov	r3, sp
100027f4:	464a      	mov	r2, r9
100027f6:	731a      	strb	r2, [r3, #12]
		prg.origin = LAYER_OFFSET;
100027f8:	2300      	movs	r3, #0
100027fa:	466a      	mov	r2, sp
		pio_add_program(VGA_PIO, &prg);
100027fc:	a902      	add	r1, sp, #8
100027fe:	4805      	ldr	r0, [pc, #20]	; (10002814 <_Z10VgaPioInitv+0x17c>)
		prg.instructions = ins;
10002800:	9402      	str	r4, [sp, #8]
		prg.origin = LAYER_OFFSET;
10002802:	7353      	strb	r3, [r2, #13]
		pio_add_program(VGA_PIO, &prg);
10002804:	f7ff f810 	bl	10001828 <pio_add_program>
10002808:	e770      	b.n	100026ec <_Z10VgaPioInitv+0x54>
	if (!CurVmode.psync) gpio_set_outover(VGA_GPIO_SYNC, GPIO_OVERRIDE_INVERT);
1000280a:	2101      	movs	r1, #1
1000280c:	2008      	movs	r0, #8
1000280e:	f7fe fbd5 	bl	10000fbc <gpio_set_outover>
10002812:	e778      	b.n	10002706 <_Z10VgaPioInitv+0x6e>
10002814:	50200000 	.word	0x50200000
10002818:	10004c84 	.word	0x10004c84
1000281c:	200366b4 	.word	0x200366b4
10002820:	00006008 	.word	0x00006008
10002824:	200394d9 	.word	0x200394d9
10002828:	2000267c 	.word	0x2000267c
1000282c:	20036728 	.word	0x20036728
10002830:	20036724 	.word	0x20036724
10002834:	40060000 	.word	0x40060000
10002838:	20036684 	.word	0x20036684
1000283c:	0001fd80 	.word	0x0001fd80
10002840:	20002000 	.word	0x20002000

10002844 <_Z10VgaBufInitv>:

// initialize scanline buffers
void VgaBufInit()
{
10002844:	b5f0      	push	{r4, r5, r6, r7, lr}
10002846:	464e      	mov	r6, r9
10002848:	4645      	mov	r5, r8
1000284a:	4657      	mov	r7, sl
1000284c:	46de      	mov	lr, fp
	// init HSYNC..back porch buffer
	//  hsync must be min. 3
	//  hback must be min. 13
	LineBufHsBp[0] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,CurVmode.hsync-3)); // HSYNC
1000284e:	2388      	movs	r3, #136	; 0x88
{
10002850:	b5e0      	push	{r5, r6, r7, lr}
	LineBufHsBp[0] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,CurVmode.hsync-3)); // HSYNC
10002852:	485f      	ldr	r0, [pc, #380]	; (100029d0 <_Z10VgaBufInitv+0x18c>)
10002854:	4f5f      	ldr	r7, [pc, #380]	; (100029d4 <_Z10VgaBufInitv+0x190>)
10002856:	8c41      	ldrh	r1, [r0, #34]	; 0x22
	LineBufHsBp[1] = BYTESWAP(VGADARK(CurVmode.hback-4-1-9,0)); // back porch - 1 - 9
10002858:	4e5f      	ldr	r6, [pc, #380]	; (100029d8 <_Z10VgaBufInitv+0x194>)
	LineBufHsBp[0] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,CurVmode.hsync-3)); // HSYNC
1000285a:	1eca      	subs	r2, r1, #3
1000285c:	ba12      	rev	r2, r2
1000285e:	431a      	orrs	r2, r3
10002860:	603a      	str	r2, [r7, #0]
	LineBufHsBp[1] = BYTESWAP(VGADARK(CurVmode.hback-4-1-9,0)); // back porch - 1 - 9
10002862:	8c84      	ldrh	r4, [r0, #36]	; 0x24
	LineBufHsBp[0] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,CurVmode.hsync-3)); // HSYNC
10002864:	469c      	mov	ip, r3
	LineBufHsBp[1] = BYTESWAP(VGADARK(CurVmode.hback-4-1-9,0)); // back porch - 1 - 9
10002866:	3c0e      	subs	r4, #14
10002868:	0423      	lsls	r3, r4, #16
1000286a:	0225      	lsls	r5, r4, #8
1000286c:	0e2d      	lsrs	r5, r5, #24
1000286e:	4033      	ands	r3, r6
10002870:	432b      	orrs	r3, r5
10002872:	25ff      	movs	r5, #255	; 0xff
10002874:	022d      	lsls	r5, r5, #8
10002876:	402c      	ands	r4, r5
10002878:	4323      	orrs	r3, r4
1000287a:	24a0      	movs	r4, #160	; 0xa0
1000287c:	4323      	orrs	r3, r4
1000287e:	607b      	str	r3, [r7, #4]
	LineBufHsBp[2] = BYTESWAP(VGACMD(vga_offset_irqset+BASE_OFFSET,0)); // IRQ command (takes 9 clock cycles)
10002880:	23c0      	movs	r3, #192	; 0xc0
10002882:	60bb      	str	r3, [r7, #8]
	LineBufHsBp[3] = BYTESWAP(VGACMD(vga_offset_output+BASE_OFFSET, CurVmode.width - 2)); // missing 2 clock cycles after last pixel
10002884:	8803      	ldrh	r3, [r0, #0]
10002886:	3440      	adds	r4, #64	; 0x40
10002888:	3b02      	subs	r3, #2
1000288a:	ba1b      	rev	r3, r3
1000288c:	4323      	orrs	r3, r4
1000288e:	60fb      	str	r3, [r7, #12]

	// init front porch buffer
	//  hfront must be min. 4
	LineBufFp = BYTESWAP(VGADARK(CurVmode.hfront-4,0)); // front porch
10002890:	8c07      	ldrh	r7, [r0, #32]
{
10002892:	b083      	sub	sp, #12
	LineBufFp = BYTESWAP(VGADARK(CurVmode.hfront-4,0)); // front porch
10002894:	3f04      	subs	r7, #4
10002896:	043b      	lsls	r3, r7, #16
10002898:	023c      	lsls	r4, r7, #8
1000289a:	0e24      	lsrs	r4, r4, #24
1000289c:	4033      	ands	r3, r6
1000289e:	4323      	orrs	r3, r4
100028a0:	24a0      	movs	r4, #160	; 0xa0
100028a2:	402f      	ands	r7, r5
100028a4:	433b      	orrs	r3, r7
100028a6:	4f4d      	ldr	r7, [pc, #308]	; (100029dc <_Z10VgaBufInitv+0x198>)
100028a8:	4323      	orrs	r3, r4
100028aa:	603b      	str	r3, [r7, #0]

	// init dark line
	LineBufDark[0] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,CurVmode.hsync-3)); // HSYNC
100028ac:	4b4c      	ldr	r3, [pc, #304]	; (100029e0 <_Z10VgaBufInitv+0x19c>)
100028ae:	601a      	str	r2, [r3, #0]
	LineBufDark[1] = BYTESWAP(VGADARK(CurVmode.htot-CurVmode.hsync-4,0)); // dark line
100028b0:	8bc2      	ldrh	r2, [r0, #30]
	LineBufDark[0] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,CurVmode.hsync-3)); // HSYNC
100028b2:	4698      	mov	r8, r3
	LineBufDark[1] = BYTESWAP(VGADARK(CurVmode.htot-CurVmode.hsync-4,0)); // dark line
100028b4:	1a57      	subs	r7, r2, r1
100028b6:	1f3b      	subs	r3, r7, #4
100028b8:	4699      	mov	r9, r3
100028ba:	464c      	mov	r4, r9
100028bc:	041b      	lsls	r3, r3, #16
100028be:	0224      	lsls	r4, r4, #8
100028c0:	0e24      	lsrs	r4, r4, #24
100028c2:	4033      	ands	r3, r6
100028c4:	4323      	orrs	r3, r4
100028c6:	464c      	mov	r4, r9
100028c8:	402c      	ands	r4, r5
100028ca:	4323      	orrs	r3, r4
100028cc:	24a0      	movs	r4, #160	; 0xa0
100028ce:	4323      	orrs	r3, r4
100028d0:	4644      	mov	r4, r8
100028d2:	6063      	str	r3, [r4, #4]

	// TV mode
	if (CurVmode.inter)
100028d4:	2356      	movs	r3, #86	; 0x56
100028d6:	5cc3      	ldrb	r3, [r0, r3]
100028d8:	2b00      	cmp	r3, #0
100028da:	d060      	beq.n	1000299e <_Z10VgaBufInitv+0x15a>
	{
		// vertical synchronization
		LineBufSync[0] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,CurVmode.hsync/2-3)); // HSYNC
100028dc:	4664      	mov	r4, ip
100028de:	0848      	lsrs	r0, r1, #1
100028e0:	1ec3      	subs	r3, r0, #3
100028e2:	ba1b      	rev	r3, r3
100028e4:	431c      	orrs	r4, r3
100028e6:	4b3f      	ldr	r3, [pc, #252]	; (100029e4 <_Z10VgaBufInitv+0x1a0>)
100028e8:	46a0      	mov	r8, r4
100028ea:	601c      	str	r4, [r3, #0]
		LineBufSync[1] = BYTESWAP(VGADARK(CurVmode.htot/2-CurVmode.hsync/2-4,0)); // dark line
100028ec:	0854      	lsrs	r4, r2, #1
100028ee:	1a27      	subs	r7, r4, r0
100028f0:	46a1      	mov	r9, r4
100028f2:	1f3c      	subs	r4, r7, #4
100028f4:	46a2      	mov	sl, r4
100028f6:	0427      	lsls	r7, r4, #16
100028f8:	0224      	lsls	r4, r4, #8
100028fa:	4037      	ands	r7, r6
100028fc:	0e24      	lsrs	r4, r4, #24
100028fe:	4327      	orrs	r7, r4
10002900:	4654      	mov	r4, sl
10002902:	402c      	ands	r4, r5
10002904:	4327      	orrs	r7, r4
10002906:	24a0      	movs	r4, #160	; 0xa0
10002908:	433c      	orrs	r4, r7
1000290a:	9401      	str	r4, [sp, #4]
1000290c:	605c      	str	r4, [r3, #4]
		LineBufSync[2] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,CurVmode.hsync/2-3)); // HSYNC
1000290e:	4644      	mov	r4, r8
		LineBufSync[3] = BYTESWAP(VGADARK((CurVmode.htot+1)/2-CurVmode.hsync/2-4,0)); // dark line
10002910:	3201      	adds	r2, #1
10002912:	1052      	asrs	r2, r2, #1
10002914:	1a10      	subs	r0, r2, r0
10002916:	3804      	subs	r0, #4
		LineBufSync[2] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,CurVmode.hsync/2-3)); // HSYNC
10002918:	609c      	str	r4, [r3, #8]
		LineBufSync[3] = BYTESWAP(VGADARK((CurVmode.htot+1)/2-CurVmode.hsync/2-4,0)); // dark line
1000291a:	0404      	lsls	r4, r0, #16
1000291c:	4034      	ands	r4, r6
1000291e:	46a2      	mov	sl, r4
10002920:	0204      	lsls	r4, r0, #8
10002922:	0e24      	lsrs	r4, r4, #24
10002924:	46a3      	mov	fp, r4
10002926:	4654      	mov	r4, sl
10002928:	465f      	mov	r7, fp
1000292a:	4028      	ands	r0, r5
1000292c:	433c      	orrs	r4, r7
1000292e:	4320      	orrs	r0, r4
10002930:	24a0      	movs	r4, #160	; 0xa0
10002932:	4320      	orrs	r0, r4
10002934:	60d8      	str	r0, [r3, #12]

		LineBufSync[4] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,CurVmode.htot/2-CurVmode.hsync-3)); // invert dark line
10002936:	4648      	mov	r0, r9
10002938:	4664      	mov	r4, ip
1000293a:	1a40      	subs	r0, r0, r1
1000293c:	3803      	subs	r0, #3
1000293e:	ba00      	rev	r0, r0
10002940:	4320      	orrs	r0, r4
10002942:	6118      	str	r0, [r3, #16]
		LineBufSync[5] = BYTESWAP(VGADARK(CurVmode.hsync-4,0)); // invert HSYNC
10002944:	1f08      	subs	r0, r1, #4
10002946:	4681      	mov	r9, r0
10002948:	0400      	lsls	r0, r0, #16
1000294a:	4006      	ands	r6, r0
1000294c:	4648      	mov	r0, r9
		LineBufSync[6] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,(CurVmode.htot+1)/2-CurVmode.hsync-3)); // invert dark line
1000294e:	1a52      	subs	r2, r2, r1
10002950:	4661      	mov	r1, ip
		LineBufSync[5] = BYTESWAP(VGADARK(CurVmode.hsync-4,0)); // invert HSYNC
10002952:	0200      	lsls	r0, r0, #8
10002954:	0e00      	lsrs	r0, r0, #24
10002956:	4306      	orrs	r6, r0
10002958:	4648      	mov	r0, r9
		LineBufSync[6] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,(CurVmode.htot+1)/2-CurVmode.hsync-3)); // invert dark line
1000295a:	3a03      	subs	r2, #3
1000295c:	ba12      	rev	r2, r2
1000295e:	430a      	orrs	r2, r1
10002960:	619a      	str	r2, [r3, #24]
		LineBufSync[7] = BYTESWAP(VGADARK(CurVmode.hsync-4,0)); // invert HSYNC

		LineBufSync[8] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,CurVmode.hsync/2-3)); // HSYNC
10002962:	4642      	mov	r2, r8
		LineBufSync[5] = BYTESWAP(VGADARK(CurVmode.hsync-4,0)); // invert HSYNC
10002964:	4005      	ands	r5, r0
		LineBufSync[9] = BYTESWAP(VGADARK(CurVmode.htot/2-CurVmode.hsync/2-4,0)); // dark line

		// control blocks - initialize to VSYNC
		CtrlBuf1[0] = 4; // send 4x u32
10002966:	2004      	movs	r0, #4
		LineBufSync[8] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,CurVmode.hsync/2-3)); // HSYNC
10002968:	621a      	str	r2, [r3, #32]
		LineBufSync[9] = BYTESWAP(VGADARK(CurVmode.htot/2-CurVmode.hsync/2-4,0)); // dark line
1000296a:	9a01      	ldr	r2, [sp, #4]
		LineBufSync[5] = BYTESWAP(VGADARK(CurVmode.hsync-4,0)); // invert HSYNC
1000296c:	4335      	orrs	r5, r6
1000296e:	3418      	adds	r4, #24
		LineBufSync[9] = BYTESWAP(VGADARK(CurVmode.htot/2-CurVmode.hsync/2-4,0)); // dark line
10002970:	625a      	str	r2, [r3, #36]	; 0x24
		CtrlBuf1[0] = 4; // send 4x u32
10002972:	491d      	ldr	r1, [pc, #116]	; (100029e8 <_Z10VgaBufInitv+0x1a4>)
		CtrlBuf1[1] = (u32)&LineBufSync[4]; // VSYNC

		CtrlBuf2[0] = 4; // send 4x u32
10002974:	4a1d      	ldr	r2, [pc, #116]	; (100029ec <_Z10VgaBufInitv+0x1a8>)
		LineBufSync[5] = BYTESWAP(VGADARK(CurVmode.hsync-4,0)); // invert HSYNC
10002976:	432c      	orrs	r4, r5
10002978:	615c      	str	r4, [r3, #20]
		LineBufSync[7] = BYTESWAP(VGADARK(CurVmode.hsync-4,0)); // invert HSYNC
1000297a:	61dc      	str	r4, [r3, #28]
		CtrlBuf1[1] = (u32)&LineBufSync[4]; // VSYNC
1000297c:	3310      	adds	r3, #16
		CtrlBuf1[0] = 4; // send 4x u32
1000297e:	6008      	str	r0, [r1, #0]
		CtrlBuf1[1] = (u32)&LineBufSync[4]; // VSYNC
10002980:	604b      	str	r3, [r1, #4]
		CtrlBuf2[0] = 4; // send 4x u32
10002982:	6010      	str	r0, [r2, #0]
		CtrlBuf2[1] = (u32)&LineBufSync[4]; // VSYNC
10002984:	6053      	str	r3, [r2, #4]

		CtrlBuf2[0] = 2; // send 2x u32
		CtrlBuf2[1] = (u32)&LineBufSync[0]; // VSYNC
	}

	CtrlBuf1[2] = 0; // stop mark
10002986:	2300      	movs	r3, #0
10002988:	608b      	str	r3, [r1, #8]
	CtrlBuf1[3] = 0; // stop mark
1000298a:	60cb      	str	r3, [r1, #12]

	CtrlBuf2[2] = 0; // stop mark
1000298c:	6093      	str	r3, [r2, #8]
	CtrlBuf2[3] = 0; // stop mark
1000298e:	60d3      	str	r3, [r2, #12]
}
10002990:	b003      	add	sp, #12
10002992:	bcf0      	pop	{r4, r5, r6, r7}
10002994:	46bb      	mov	fp, r7
10002996:	46b2      	mov	sl, r6
10002998:	46a9      	mov	r9, r5
1000299a:	46a0      	mov	r8, r4
1000299c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LineBufSync[0] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,CurVmode.htot-CurVmode.hsync-3)); // invert dark line
1000299e:	4662      	mov	r2, ip
		LineBufSync[1] = BYTESWAP(VGADARK(CurVmode.hsync-4,0)); // invert HSYNC
100029a0:	24a0      	movs	r4, #160	; 0xa0
		CtrlBuf1[0] = 2; // send 2x u32
100029a2:	2002      	movs	r0, #2
		LineBufSync[0] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,CurVmode.htot-CurVmode.hsync-3)); // invert dark line
100029a4:	3f03      	subs	r7, #3
		LineBufSync[1] = BYTESWAP(VGADARK(CurVmode.hsync-4,0)); // invert HSYNC
100029a6:	3904      	subs	r1, #4
100029a8:	ba3f      	rev	r7, r7
		LineBufSync[0] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,CurVmode.htot-CurVmode.hsync-3)); // invert dark line
100029aa:	4317      	orrs	r7, r2
		LineBufSync[1] = BYTESWAP(VGADARK(CurVmode.hsync-4,0)); // invert HSYNC
100029ac:	040a      	lsls	r2, r1, #16
100029ae:	4016      	ands	r6, r2
100029b0:	020a      	lsls	r2, r1, #8
100029b2:	0e12      	lsrs	r2, r2, #24
100029b4:	4316      	orrs	r6, r2
100029b6:	4029      	ands	r1, r5
100029b8:	4331      	orrs	r1, r6
		LineBufSync[0] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,CurVmode.htot-CurVmode.hsync-3)); // invert dark line
100029ba:	4b0a      	ldr	r3, [pc, #40]	; (100029e4 <_Z10VgaBufInitv+0x1a0>)
		CtrlBuf2[0] = 2; // send 2x u32
100029bc:	4a0b      	ldr	r2, [pc, #44]	; (100029ec <_Z10VgaBufInitv+0x1a8>)
		LineBufSync[1] = BYTESWAP(VGADARK(CurVmode.hsync-4,0)); // invert HSYNC
100029be:	430c      	orrs	r4, r1
		CtrlBuf1[0] = 2; // send 2x u32
100029c0:	4909      	ldr	r1, [pc, #36]	; (100029e8 <_Z10VgaBufInitv+0x1a4>)
		LineBufSync[0] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,CurVmode.htot-CurVmode.hsync-3)); // invert dark line
100029c2:	601f      	str	r7, [r3, #0]
		LineBufSync[1] = BYTESWAP(VGADARK(CurVmode.hsync-4,0)); // invert HSYNC
100029c4:	605c      	str	r4, [r3, #4]
		CtrlBuf1[0] = 2; // send 2x u32
100029c6:	6008      	str	r0, [r1, #0]
		CtrlBuf1[1] = (u32)&LineBufSync[0]; // VSYNC
100029c8:	604b      	str	r3, [r1, #4]
		CtrlBuf2[0] = 2; // send 2x u32
100029ca:	6010      	str	r0, [r2, #0]
		CtrlBuf2[1] = (u32)&LineBufSync[0]; // VSYNC
100029cc:	6053      	str	r3, [r2, #4]
100029ce:	e7da      	b.n	10002986 <_Z10VgaBufInitv+0x142>
100029d0:	200366b4 	.word	0x200366b4
100029d4:	20037e88 	.word	0x20037e88
100029d8:	00ffff00 	.word	0x00ffff00
100029dc:	20037e84 	.word	0x20037e84
100029e0:	20037e7c 	.word	0x20037e7c
100029e4:	20037e98 	.word	0x20037e98
100029e8:	200351a8 	.word	0x200351a8
100029ec:	20035c08 	.word	0x20035c08

100029f0 <_Z7VgaTermv>:
 *
 * \param channel DMA channel
 */
static inline void dma_channel_abort(uint channel) {
    check_dma_channel_param(channel);
    dma_hw->abort = 1u << channel;
100029f0:	21a0      	movs	r1, #160	; 0xa0
100029f2:	2302      	movs	r3, #2
    // Bit will go 0 once channel has reached safe state
    // (i.e. any in-flight transfers have retired)
    while (dma_hw->abort & (1ul << channel)) tight_loop_contents();
100029f4:	2002      	movs	r0, #2
    dma_hw->abort = 1u << channel;
100029f6:	4a27      	ldr	r2, [pc, #156]	; (10002a94 <_Z7VgaTermv+0xa4>)
100029f8:	05c9      	lsls	r1, r1, #23

// terminate VGA service
void VgaTerm()
{
100029fa:	b570      	push	{r4, r5, r6, lr}
100029fc:	508b      	str	r3, [r1, r2]
    while (dma_hw->abort & (1ul << channel)) tight_loop_contents();
100029fe:	588b      	ldr	r3, [r1, r2]
10002a00:	4218      	tst	r0, r3
10002a02:	d1fc      	bne.n	100029fe <_Z7VgaTermv+0xe>
    dma_hw->abort = 1u << channel;
10002a04:	2301      	movs	r3, #1
    while (dma_hw->abort & (1ul << channel)) tight_loop_contents();
10002a06:	20a0      	movs	r0, #160	; 0xa0
    dma_hw->abort = 1u << channel;
10002a08:	508b      	str	r3, [r1, r2]
    while (dma_hw->abort & (1ul << channel)) tight_loop_contents();
10002a0a:	2201      	movs	r2, #1
10002a0c:	4921      	ldr	r1, [pc, #132]	; (10002a94 <_Z7VgaTermv+0xa4>)
10002a0e:	05c0      	lsls	r0, r0, #23
10002a10:	5843      	ldr	r3, [r0, r1]
10002a12:	421a      	tst	r2, r3
10002a14:	d1fc      	bne.n	10002a10 <_Z7VgaTermv+0x20>
    dma_hw->abort = 1u << channel;
10002a16:	24a0      	movs	r4, #160	; 0xa0
10002a18:	2001      	movs	r0, #1
10002a1a:	2601      	movs	r6, #1
10002a1c:	4a1d      	ldr	r2, [pc, #116]	; (10002a94 <_Z7VgaTermv+0xa4>)
10002a1e:	05e4      	lsls	r4, r4, #23
10002a20:	0031      	movs	r1, r6
10002a22:	4081      	lsls	r1, r0
10002a24:	50a1      	str	r1, [r4, r2]
    while (dma_hw->abort & (1ul << channel)) tight_loop_contents();
10002a26:	58a3      	ldr	r3, [r4, r2]
10002a28:	420b      	tst	r3, r1
10002a2a:	d1fc      	bne.n	10002a26 <_Z7VgaTermv+0x36>
    dma_hw->abort = 1u << channel;
10002a2c:	0031      	movs	r1, r6
10002a2e:	1e43      	subs	r3, r0, #1
10002a30:	4099      	lsls	r1, r3
10002a32:	50a1      	str	r1, [r4, r2]
    while (dma_hw->abort & (1ul << channel)) tight_loop_contents();
10002a34:	58a3      	ldr	r3, [r4, r2]
10002a36:	001d      	movs	r5, r3
10002a38:	400d      	ands	r5, r1
10002a3a:	420b      	tst	r3, r1
10002a3c:	d1fa      	bne.n	10002a34 <_Z7VgaTermv+0x44>
	int i;

	// abort DMA channels
	dma_channel_abort(VGA_DMA_PIO0); // pre-abort, could be chaining right now
	dma_channel_abort(VGA_DMA_CB0);
	for (i = 0; i < LAYERS; i++)
10002a3e:	3002      	adds	r0, #2
10002a40:	2809      	cmp	r0, #9
10002a42:	d1ed      	bne.n	10002a20 <_Z7VgaTermv+0x30>
		dma_channel_abort(VGA_DMA_PIO(i));
		dma_channel_abort(VGA_DMA_CB(i));
	}

	// disable IRQ0 from DMA0
	irq_set_enabled(DMA_IRQ_0, false);
10002a44:	2100      	movs	r1, #0
10002a46:	3002      	adds	r0, #2
10002a48:	f7fe faca 	bl	10000fe0 <irq_set_enabled>
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10002a4c:	2302      	movs	r3, #2
10002a4e:	4a12      	ldr	r2, [pc, #72]	; (10002a98 <_Z7VgaTermv+0xa8>)
    pio->ctrl = (pio->ctrl & ~mask) | (enabled ? mask : 0u);
10002a50:	4812      	ldr	r0, [pc, #72]	; (10002a9c <_Z7VgaTermv+0xac>)
10002a52:	6013      	str	r3, [r2, #0]
	dma_channel_set_irq0_enabled(VGA_DMA_PIO0, false);

	// Clear the interrupt request for DMA control channel
	dma_hw->ints0 = (1u << VGA_DMA_PIO0);
10002a54:	4a12      	ldr	r2, [pc, #72]	; (10002aa0 <_Z7VgaTermv+0xb0>)
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10002a56:	4913      	ldr	r1, [pc, #76]	; (10002aa4 <_Z7VgaTermv+0xb4>)
10002a58:	50a3      	str	r3, [r4, r2]
10002a5a:	220f      	movs	r2, #15
10002a5c:	6803      	ldr	r3, [r0, #0]
10002a5e:	4393      	bics	r3, r2
10002a60:	6003      	str	r3, [r0, #0]
    pio->ctrl |= (mask << PIO_CTRL_SM_RESTART_LSB) & PIO_CTRL_SM_RESTART_BITS;
10002a62:	6803      	ldr	r3, [r0, #0]
10002a64:	32e1      	adds	r2, #225	; 0xe1
10002a66:	4313      	orrs	r3, r2
10002a68:	6003      	str	r3, [r0, #0]
10002a6a:	2380      	movs	r3, #128	; 0x80
10002a6c:	4a0e      	ldr	r2, [pc, #56]	; (10002aa8 <_Z7VgaTermv+0xb8>)
10002a6e:	061b      	lsls	r3, r3, #24
10002a70:	6013      	str	r3, [r2, #0]
10002a72:	6013      	str	r3, [r2, #0]

	// clear FIFOs
	for (i = 0; i < LAYERS; i++)
	{
		pio_sm_clear_fifos(VGA_PIO, VGA_SM(i));
		CtrlBufNext[i] = NULL;
10002a74:	4a0d      	ldr	r2, [pc, #52]	; (10002aac <_Z7VgaTermv+0xbc>)
10002a76:	6015      	str	r5, [r2, #0]
10002a78:	600b      	str	r3, [r1, #0]
10002a7a:	600b      	str	r3, [r1, #0]
10002a7c:	490c      	ldr	r1, [pc, #48]	; (10002ab0 <_Z7VgaTermv+0xc0>)
10002a7e:	6055      	str	r5, [r2, #4]
10002a80:	600b      	str	r3, [r1, #0]
10002a82:	600b      	str	r3, [r1, #0]
10002a84:	490b      	ldr	r1, [pc, #44]	; (10002ab4 <_Z7VgaTermv+0xc4>)
10002a86:	6095      	str	r5, [r2, #8]
10002a88:	600b      	str	r3, [r1, #0]
10002a8a:	600b      	str	r3, [r1, #0]
10002a8c:	60d5      	str	r5, [r2, #12]
	}

	// clear PIO instruction memory 
	pio_clear_instruction_memory(VGA_PIO);
10002a8e:	f7fe ff2f 	bl	100018f0 <pio_clear_instruction_memory>
}
10002a92:	bd70      	pop	{r4, r5, r6, pc}
10002a94:	00000444 	.word	0x00000444
10002a98:	50003404 	.word	0x50003404
10002a9c:	50200000 	.word	0x50200000
10002aa0:	0000040c 	.word	0x0000040c
10002aa4:	502010e8 	.word	0x502010e8
10002aa8:	502010d0 	.word	0x502010d0
10002aac:	20036668 	.word	0x20036668
10002ab0:	50201100 	.word	0x50201100
10002ab4:	50201118 	.word	0x50201118

10002ab8 <_Z16ScanlineTypeInitPK6sVmode>:

// initialize scanline type table
void ScanlineTypeInit(const sVmode* v)
{
10002ab8:	b5f0      	push	{r4, r5, r6, r7, lr}
10002aba:	46c6      	mov	lr, r8
	u8* d = ScanlineType;
	int i, k;

	// line 0 is not used
	*d++ = LINE_DARK;
10002abc:	2305      	movs	r3, #5
{
10002abe:	b500      	push	{lr}
	*d++ = LINE_DARK;
10002ac0:	4c6b      	ldr	r4, [pc, #428]	; (10002c70 <_Z16ScanlineTypeInitPK6sVmode+0x1b8>)
{
10002ac2:	0005      	movs	r5, r0
	*d++ = LINE_DARK;
10002ac4:	7023      	strb	r3, [r4, #0]

	// progressive mode (VGA 525)
	if (!v->inter)
10002ac6:	3351      	adds	r3, #81	; 0x51
10002ac8:	5cc3      	ldrb	r3, [r0, r3]
10002aca:	2b00      	cmp	r3, #0
10002acc:	d125      	bne.n	10002b1a <_Z16ScanlineTypeInitPK6sVmode+0x62>
	{
		// vertical sync (VGA 2)
		for (i = v->vsync1; i > 0; i--) *d++ = LINE_VSYNC;
10002ace:	8e86      	ldrh	r6, [r0, #52]	; 0x34
	*d++ = LINE_DARK;
10002ad0:	3401      	adds	r4, #1
		for (i = v->vsync1; i > 0; i--) *d++ = LINE_VSYNC;
10002ad2:	2e00      	cmp	r6, #0
10002ad4:	d005      	beq.n	10002ae2 <_Z16ScanlineTypeInitPK6sVmode+0x2a>
10002ad6:	0020      	movs	r0, r4
10002ad8:	0032      	movs	r2, r6
10002ada:	2100      	movs	r1, #0
10002adc:	f7fd ff56 	bl	1000098c <__wrap_memset>
10002ae0:	1934      	adds	r4, r6, r4

		// dark (VGA 33)
		for (i = v->vback1; i > 0; i--) *d++ = LINE_DARK;
10002ae2:	8f2e      	ldrh	r6, [r5, #56]	; 0x38
10002ae4:	2e00      	cmp	r6, #0
10002ae6:	d005      	beq.n	10002af4 <_Z16ScanlineTypeInitPK6sVmode+0x3c>
10002ae8:	0020      	movs	r0, r4
10002aea:	0032      	movs	r2, r6
10002aec:	2105      	movs	r1, #5
10002aee:	f7fd ff4d 	bl	1000098c <__wrap_memset>
10002af2:	19a4      	adds	r4, r4, r6

		// image (VGA 480)
		for (i = v->vact1; i > 0; i--) *d++ = LINE_IMG;
10002af4:	8f6e      	ldrh	r6, [r5, #58]	; 0x3a
10002af6:	2e00      	cmp	r6, #0
10002af8:	d005      	beq.n	10002b06 <_Z16ScanlineTypeInitPK6sVmode+0x4e>
10002afa:	0020      	movs	r0, r4
10002afc:	0032      	movs	r2, r6
10002afe:	2106      	movs	r1, #6
10002b00:	f7fd ff44 	bl	1000098c <__wrap_memset>
10002b04:	19a4      	adds	r4, r4, r6

		// dark (VGA 10)
		for (i = v->vfront1; i > 0; i--) *d++ = LINE_DARK;
10002b06:	8faa      	ldrh	r2, [r5, #60]	; 0x3c
10002b08:	2a00      	cmp	r2, #0
10002b0a:	d003      	beq.n	10002b14 <_Z16ScanlineTypeInitPK6sVmode+0x5c>
10002b0c:	2105      	movs	r1, #5
10002b0e:	0020      	movs	r0, r4
10002b10:	f7fd ff3c 	bl	1000098c <__wrap_memset>
		for (i = v->vfront2; i > 0; i--) *d++ = LINE_DARK;

		// half sync (PAL 3, NTSC 3)
		for (i = v->vpre2/2; i > 0; i--) *d++ = LINE_HHSYNC;
	}
}
10002b14:	bc80      	pop	{r7}
10002b16:	46b8      	mov	r8, r7
10002b18:	bdf0      	pop	{r4, r5, r6, r7, pc}
		for (i = v->vsync1/2; i > 0; i--) *d++ = LINE_VVSYNC;
10002b1a:	8e83      	ldrh	r3, [r0, #52]	; 0x34
	*d++ = LINE_DARK;
10002b1c:	3401      	adds	r4, #1
		for (i = v->vsync1/2; i > 0; i--) *d++ = LINE_VVSYNC;
10002b1e:	085e      	lsrs	r6, r3, #1
10002b20:	d006      	beq.n	10002b30 <_Z16ScanlineTypeInitPK6sVmode+0x78>
10002b22:	0020      	movs	r0, r4
10002b24:	0032      	movs	r2, r6
10002b26:	2101      	movs	r1, #1
10002b28:	f7fd ff30 	bl	1000098c <__wrap_memset>
		if ((v->vsync1 & 1) != 0) *d++ = LINE_VHSYNC;
10002b2c:	8eab      	ldrh	r3, [r5, #52]	; 0x34
		for (i = v->vsync1/2; i > 0; i--) *d++ = LINE_VVSYNC;
10002b2e:	1934      	adds	r4, r6, r4
		if ((v->vsync1 & 1) != 0) *d++ = LINE_VHSYNC;
10002b30:	07db      	lsls	r3, r3, #31
10002b32:	d502      	bpl.n	10002b3a <_Z16ScanlineTypeInitPK6sVmode+0x82>
10002b34:	2302      	movs	r3, #2
10002b36:	7023      	strb	r3, [r4, #0]
10002b38:	3401      	adds	r4, #1
		for (i = v->vpost1/2; i > 0; i--) *d++ = LINE_HHSYNC;
10002b3a:	8eee      	ldrh	r6, [r5, #54]	; 0x36
10002b3c:	0876      	lsrs	r6, r6, #1
10002b3e:	d005      	beq.n	10002b4c <_Z16ScanlineTypeInitPK6sVmode+0x94>
10002b40:	0020      	movs	r0, r4
10002b42:	0032      	movs	r2, r6
10002b44:	2103      	movs	r1, #3
10002b46:	f7fd ff21 	bl	1000098c <__wrap_memset>
10002b4a:	19a4      	adds	r4, r4, r6
		for (i = v->vback1; i > 0; i--) *d++ = LINE_DARK;
10002b4c:	8f2e      	ldrh	r6, [r5, #56]	; 0x38
10002b4e:	2e00      	cmp	r6, #0
10002b50:	d005      	beq.n	10002b5e <_Z16ScanlineTypeInitPK6sVmode+0xa6>
10002b52:	0020      	movs	r0, r4
10002b54:	0032      	movs	r2, r6
10002b56:	2105      	movs	r1, #5
10002b58:	f7fd ff18 	bl	1000098c <__wrap_memset>
10002b5c:	19a4      	adds	r4, r4, r6
		if (v->odd)
10002b5e:	2358      	movs	r3, #88	; 0x58
10002b60:	5ceb      	ldrb	r3, [r5, r3]
			for (i = v->vact1; i > 0; i--) *d++ = LINE_IMGODD1; // odd lines 1, 3, 5, ... (PAL)
10002b62:	8f6e      	ldrh	r6, [r5, #58]	; 0x3a
		if (v->odd)
10002b64:	2b00      	cmp	r3, #0
10002b66:	d16e      	bne.n	10002c46 <_Z16ScanlineTypeInitPK6sVmode+0x18e>
			for (i = v->vact1; i > 0; i--) *d++ = LINE_IMGEVEN1; // even lines 0, 2, 4, ... (NTSC)
10002b68:	2e00      	cmp	r6, #0
10002b6a:	d005      	beq.n	10002b78 <_Z16ScanlineTypeInitPK6sVmode+0xc0>
10002b6c:	0020      	movs	r0, r4
10002b6e:	0032      	movs	r2, r6
10002b70:	2107      	movs	r1, #7
10002b72:	f7fd ff0b 	bl	1000098c <__wrap_memset>
10002b76:	19a4      	adds	r4, r4, r6
		for (i = v->vfront1; i > 0; i--) *d++ = LINE_DARK;
10002b78:	8fae      	ldrh	r6, [r5, #60]	; 0x3c
10002b7a:	2e00      	cmp	r6, #0
10002b7c:	d005      	beq.n	10002b8a <_Z16ScanlineTypeInitPK6sVmode+0xd2>
10002b7e:	0020      	movs	r0, r4
10002b80:	0032      	movs	r2, r6
10002b82:	2105      	movs	r1, #5
10002b84:	f7fd ff02 	bl	1000098c <__wrap_memset>
10002b88:	19a4      	adds	r4, r4, r6
		for (i = v->vpre1/2; i > 0; i--) *d++ = LINE_HHSYNC;
10002b8a:	8fef      	ldrh	r7, [r5, #62]	; 0x3e
10002b8c:	087e      	lsrs	r6, r7, #1
10002b8e:	d006      	beq.n	10002b9e <_Z16ScanlineTypeInitPK6sVmode+0xe6>
10002b90:	0020      	movs	r0, r4
10002b92:	0032      	movs	r2, r6
10002b94:	2103      	movs	r1, #3
10002b96:	f7fd fef9 	bl	1000098c <__wrap_memset>
		k = v->vpre1 & 1;
10002b9a:	8fef      	ldrh	r7, [r5, #62]	; 0x3e
		for (i = v->vpre1/2; i > 0; i--) *d++ = LINE_HHSYNC;
10002b9c:	19a4      	adds	r4, r4, r6
		k = v->vpre1 & 1;
10002b9e:	2301      	movs	r3, #1
10002ba0:	001a      	movs	r2, r3
10002ba2:	403a      	ands	r2, r7
		if (k != 0) *d++ = LINE_HVSYNC;
10002ba4:	423b      	tst	r3, r7
10002ba6:	d002      	beq.n	10002bae <_Z16ScanlineTypeInitPK6sVmode+0xf6>
10002ba8:	3303      	adds	r3, #3
10002baa:	7023      	strb	r3, [r4, #0]
10002bac:	3401      	adds	r4, #1
		for (i = (v->vsync2 - k)/2; i > 0; i--) *d++ = LINE_VVSYNC;
10002bae:	2342      	movs	r3, #66	; 0x42
10002bb0:	4698      	mov	r8, r3
10002bb2:	5aeb      	ldrh	r3, [r5, r3]
10002bb4:	1a9a      	subs	r2, r3, r2
10002bb6:	0fd6      	lsrs	r6, r2, #31
10002bb8:	18b6      	adds	r6, r6, r2
10002bba:	1076      	asrs	r6, r6, #1
10002bbc:	d007      	beq.n	10002bce <_Z16ScanlineTypeInitPK6sVmode+0x116>
10002bbe:	0020      	movs	r0, r4
10002bc0:	0032      	movs	r2, r6
10002bc2:	2101      	movs	r1, #1
10002bc4:	f7fd fee2 	bl	1000098c <__wrap_memset>
		if (((v->vsync2 - k) & 1) != 0) *d++ = LINE_VHSYNC;
10002bc8:	4643      	mov	r3, r8
10002bca:	5aeb      	ldrh	r3, [r5, r3]
		for (i = (v->vsync2 - k)/2; i > 0; i--) *d++ = LINE_VVSYNC;
10002bcc:	19a4      	adds	r4, r4, r6
		if (((v->vsync2 - k) & 1) != 0) *d++ = LINE_VHSYNC;
10002bce:	1bdb      	subs	r3, r3, r7
10002bd0:	07db      	lsls	r3, r3, #31
10002bd2:	d502      	bpl.n	10002bda <_Z16ScanlineTypeInitPK6sVmode+0x122>
10002bd4:	2302      	movs	r3, #2
10002bd6:	7023      	strb	r3, [r4, #0]
10002bd8:	3401      	adds	r4, #1
		for (i = v->vpost2/2; i > 0; i--) *d++ = LINE_HHSYNC;
10002bda:	2344      	movs	r3, #68	; 0x44
10002bdc:	5aee      	ldrh	r6, [r5, r3]
10002bde:	0876      	lsrs	r6, r6, #1
10002be0:	d005      	beq.n	10002bee <_Z16ScanlineTypeInitPK6sVmode+0x136>
10002be2:	0020      	movs	r0, r4
10002be4:	0032      	movs	r2, r6
10002be6:	2103      	movs	r1, #3
10002be8:	f7fd fed0 	bl	1000098c <__wrap_memset>
10002bec:	19a4      	adds	r4, r4, r6
		for (i = v->vback2; i > 0; i--) *d++ = LINE_DARK;
10002bee:	2346      	movs	r3, #70	; 0x46
10002bf0:	5aee      	ldrh	r6, [r5, r3]
10002bf2:	2e00      	cmp	r6, #0
10002bf4:	d005      	beq.n	10002c02 <_Z16ScanlineTypeInitPK6sVmode+0x14a>
10002bf6:	0020      	movs	r0, r4
10002bf8:	0032      	movs	r2, r6
10002bfa:	2105      	movs	r1, #5
10002bfc:	f7fd fec6 	bl	1000098c <__wrap_memset>
10002c00:	19a4      	adds	r4, r4, r6
		if (v->odd)
10002c02:	2358      	movs	r3, #88	; 0x58
10002c04:	5ceb      	ldrb	r3, [r5, r3]
10002c06:	2b00      	cmp	r3, #0
10002c08:	d026      	beq.n	10002c58 <_Z16ScanlineTypeInitPK6sVmode+0x1a0>
			for (i = v->vact2; i > 0; i--) *d++ = LINE_IMGEVEN2; // even lines 0, 2, 4, ... (PAL)
10002c0a:	2348      	movs	r3, #72	; 0x48
10002c0c:	5aee      	ldrh	r6, [r5, r3]
10002c0e:	2e00      	cmp	r6, #0
10002c10:	d005      	beq.n	10002c1e <_Z16ScanlineTypeInitPK6sVmode+0x166>
10002c12:	0020      	movs	r0, r4
10002c14:	0032      	movs	r2, r6
10002c16:	2108      	movs	r1, #8
10002c18:	f7fd feb8 	bl	1000098c <__wrap_memset>
10002c1c:	19a4      	adds	r4, r4, r6
		for (i = v->vfront2; i > 0; i--) *d++ = LINE_DARK;
10002c1e:	234a      	movs	r3, #74	; 0x4a
10002c20:	5aee      	ldrh	r6, [r5, r3]
10002c22:	2e00      	cmp	r6, #0
10002c24:	d005      	beq.n	10002c32 <_Z16ScanlineTypeInitPK6sVmode+0x17a>
10002c26:	0020      	movs	r0, r4
10002c28:	0032      	movs	r2, r6
10002c2a:	2105      	movs	r1, #5
10002c2c:	f7fd feae 	bl	1000098c <__wrap_memset>
10002c30:	19a4      	adds	r4, r4, r6
		for (i = v->vpre2/2; i > 0; i--) *d++ = LINE_HHSYNC;
10002c32:	234c      	movs	r3, #76	; 0x4c
10002c34:	5aea      	ldrh	r2, [r5, r3]
10002c36:	0852      	lsrs	r2, r2, #1
10002c38:	d100      	bne.n	10002c3c <_Z16ScanlineTypeInitPK6sVmode+0x184>
10002c3a:	e76b      	b.n	10002b14 <_Z16ScanlineTypeInitPK6sVmode+0x5c>
10002c3c:	2103      	movs	r1, #3
10002c3e:	0020      	movs	r0, r4
10002c40:	f7fd fea4 	bl	1000098c <__wrap_memset>
10002c44:	e766      	b.n	10002b14 <_Z16ScanlineTypeInitPK6sVmode+0x5c>
			for (i = v->vact1; i > 0; i--) *d++ = LINE_IMGODD1; // odd lines 1, 3, 5, ... (PAL)
10002c46:	2e00      	cmp	r6, #0
10002c48:	d096      	beq.n	10002b78 <_Z16ScanlineTypeInitPK6sVmode+0xc0>
10002c4a:	0020      	movs	r0, r4
10002c4c:	0032      	movs	r2, r6
10002c4e:	2109      	movs	r1, #9
10002c50:	f7fd fe9c 	bl	1000098c <__wrap_memset>
10002c54:	19a4      	adds	r4, r4, r6
10002c56:	e78f      	b.n	10002b78 <_Z16ScanlineTypeInitPK6sVmode+0xc0>
			for (i = v->vact2; i > 0; i--) *d++ = LINE_IMGODD2; // odd lines 1, 3, 5, ... (NTSC)
10002c58:	2348      	movs	r3, #72	; 0x48
10002c5a:	5aee      	ldrh	r6, [r5, r3]
10002c5c:	2e00      	cmp	r6, #0
10002c5e:	d0de      	beq.n	10002c1e <_Z16ScanlineTypeInitPK6sVmode+0x166>
10002c60:	0020      	movs	r0, r4
10002c62:	0032      	movs	r2, r6
10002c64:	210a      	movs	r1, #10
10002c66:	f7fd fe91 	bl	1000098c <__wrap_memset>
10002c6a:	19a4      	adds	r4, r4, r6
10002c6c:	e7d7      	b.n	10002c1e <_Z16ScanlineTypeInitPK6sVmode+0x166>
10002c6e:	46c0      	nop			; (mov r8, r8)
10002c70:	200388dc 	.word	0x200388dc

10002c74 <_Z7VgaInitPK6sVmode>:
}

// initialize videomode (returns False on bad configuration)
// - All layer modes must use same layer program (LAYERMODE_BASE = overlapped layers are OFF)
void VgaInit(const sVmode* vmode)
{
10002c74:	b5f0      	push	{r4, r5, r6, r7, lr}
10002c76:	46de      	mov	lr, fp
10002c78:	464e      	mov	r6, r9
10002c7a:	4645      	mov	r5, r8
10002c7c:	4657      	mov	r7, sl
10002c7e:	0004      	movs	r4, r0
10002c80:	b5e0      	push	{r5, r6, r7, lr}
10002c82:	b083      	sub	sp, #12
10002c84:	9001      	str	r0, [sp, #4]
	int i;

	// stop old state
	VgaTerm();
10002c86:	f7ff feb3 	bl	100029f0 <_Z7VgaTermv>

	// initialize scanline type table
	ScanlineTypeInit(vmode);
10002c8a:	0020      	movs	r0, r4
10002c8c:	f7ff ff14 	bl	10002ab8 <_Z16ScanlineTypeInitPK6sVmode>
	// prepare render font pixel mask
	for (i = 0; i < 256; i++)
	{
		// higher 4 bits
		u32 m = 0;
		if ((i & B7) != 0) m |= 0xff;
10002c90:	2280      	movs	r2, #128	; 0x80
10002c92:	4691      	mov	r9, r2
		if ((i & B6) != 0) m |= 0xff << 8;
10002c94:	3a40      	subs	r2, #64	; 0x40
10002c96:	4690      	mov	r8, r2
		if ((i & B5) != 0) m |= 0xff << 16;
		if ((i & B4) != 0) m |= 0xff << 24;
10002c98:	22ff      	movs	r2, #255	; 0xff
		if ((i & B5) != 0) m |= 0xff << 16;
10002c9a:	27ff      	movs	r7, #255	; 0xff
		if ((i & B4) != 0) m |= 0xff << 24;
10002c9c:	0612      	lsls	r2, r2, #24
	for (i = 0; i < 256; i++)
10002c9e:	2300      	movs	r3, #0
		if ((i & B5) != 0) m |= 0xff << 16;
10002ca0:	2520      	movs	r5, #32
		if ((i & B4) != 0) m |= 0xff << 24;
10002ca2:	2610      	movs	r6, #16
10002ca4:	4694      	mov	ip, r2
10002ca6:	4956      	ldr	r1, [pc, #344]	; (10002e00 <_Z7VgaInitPK6sVmode+0x18c>)
		if ((i & B5) != 0) m |= 0xff << 16;
10002ca8:	043f      	lsls	r7, r7, #16
10002caa:	e024      	b.n	10002cf6 <_Z7VgaInitPK6sVmode+0x82>
		if ((i & B7) != 0) m |= 0xff;
10002cac:	20ff      	movs	r0, #255	; 0xff
		u32 m = 0;
10002cae:	2200      	movs	r2, #0
		if ((i & B7) != 0) m |= 0xff;
10002cb0:	0200      	lsls	r0, r0, #8
		if ((i & B6) != 0) m |= 0xff << 8;
10002cb2:	4644      	mov	r4, r8
10002cb4:	421c      	tst	r4, r3
10002cb6:	d000      	beq.n	10002cba <_Z7VgaInitPK6sVmode+0x46>
10002cb8:	0002      	movs	r2, r0
		if ((i & B5) != 0) m |= 0xff << 16;
10002cba:	421d      	tst	r5, r3
10002cbc:	d000      	beq.n	10002cc0 <_Z7VgaInitPK6sVmode+0x4c>
10002cbe:	433a      	orrs	r2, r7
		if ((i & B4) != 0) m |= 0xff << 24;
10002cc0:	421e      	tst	r6, r3
10002cc2:	d001      	beq.n	10002cc8 <_Z7VgaInitPK6sVmode+0x54>
10002cc4:	4660      	mov	r0, ip
10002cc6:	4302      	orrs	r2, r0
		RenderTextMask[2*i] = m;
10002cc8:	600a      	str	r2, [r1, #0]

		// lower 4 bits
		m = 0;
		if ((i & B3) != 0) m |= 0xff;
10002cca:	071a      	lsls	r2, r3, #28
10002ccc:	d419      	bmi.n	10002d02 <_Z7VgaInitPK6sVmode+0x8e>
10002cce:	20ff      	movs	r0, #255	; 0xff
		m = 0;
10002cd0:	2200      	movs	r2, #0
		if ((i & B3) != 0) m |= 0xff;
10002cd2:	0200      	lsls	r0, r0, #8
		if ((i & B2) != 0) m |= 0xff << 8;
10002cd4:	075c      	lsls	r4, r3, #29
10002cd6:	d500      	bpl.n	10002cda <_Z7VgaInitPK6sVmode+0x66>
10002cd8:	0002      	movs	r2, r0
		if ((i & B1) != 0) m |= 0xff << 16;
10002cda:	0798      	lsls	r0, r3, #30
10002cdc:	d500      	bpl.n	10002ce0 <_Z7VgaInitPK6sVmode+0x6c>
10002cde:	433a      	orrs	r2, r7
		if ((i & B0) != 0) m |= 0xff << 24;
10002ce0:	07d8      	lsls	r0, r3, #31
10002ce2:	d501      	bpl.n	10002ce8 <_Z7VgaInitPK6sVmode+0x74>
10002ce4:	4660      	mov	r0, ip
10002ce6:	4302      	orrs	r2, r0
		RenderTextMask[2*i+1] = m;
10002ce8:	604a      	str	r2, [r1, #4]
	for (i = 0; i < 256; i++)
10002cea:	2280      	movs	r2, #128	; 0x80
10002cec:	3301      	adds	r3, #1
10002cee:	3108      	adds	r1, #8
10002cf0:	0052      	lsls	r2, r2, #1
10002cf2:	4293      	cmp	r3, r2
10002cf4:	d008      	beq.n	10002d08 <_Z7VgaInitPK6sVmode+0x94>
		if ((i & B7) != 0) m |= 0xff;
10002cf6:	464a      	mov	r2, r9
10002cf8:	421a      	tst	r2, r3
10002cfa:	d0d7      	beq.n	10002cac <_Z7VgaInitPK6sVmode+0x38>
10002cfc:	22ff      	movs	r2, #255	; 0xff
10002cfe:	4841      	ldr	r0, [pc, #260]	; (10002e04 <_Z7VgaInitPK6sVmode+0x190>)
10002d00:	e7d7      	b.n	10002cb2 <_Z7VgaInitPK6sVmode+0x3e>
		if ((i & B3) != 0) m |= 0xff;
10002d02:	22ff      	movs	r2, #255	; 0xff
10002d04:	483f      	ldr	r0, [pc, #252]	; (10002e04 <_Z7VgaInitPK6sVmode+0x190>)
10002d06:	e7e5      	b.n	10002cd4 <_Z7VgaInitPK6sVmode+0x60>

	// save current videomode
	memcpy(&CurVmode, vmode, sizeof(sVmode));

	// initialize parameters
	ScanLine = 1; // currently processed scanline
10002d08:	2401      	movs	r4, #1
	memset(LineBuf0, COL_BLACK, BLACK_MAX);
10002d0a:	3281      	adds	r2, #129	; 0x81
10002d0c:	2100      	movs	r1, #0
10002d0e:	32ff      	adds	r2, #255	; 0xff
10002d10:	483d      	ldr	r0, [pc, #244]	; (10002e08 <_Z7VgaInitPK6sVmode+0x194>)
10002d12:	f7fd fe3b 	bl	1000098c <__wrap_memset>
	memcpy(&CurVmode, vmode, sizeof(sVmode));
10002d16:	9d01      	ldr	r5, [sp, #4]
10002d18:	225c      	movs	r2, #92	; 0x5c
10002d1a:	0029      	movs	r1, r5
10002d1c:	483b      	ldr	r0, [pc, #236]	; (10002e0c <_Z7VgaInitPK6sVmode+0x198>)
10002d1e:	f7fd fe3b 	bl	10000998 <__wrap___aeabi_memcpy>
	ScanLine = 1; // currently processed scanline
10002d22:	4b3b      	ldr	r3, [pc, #236]	; (10002e10 <_Z7VgaInitPK6sVmode+0x19c>)
//	Frame = 0;
	BufInx = 0; // at first, control buffer 1 will be sent out
	CtrlBufNext[0] = CtrlBuf2;

	// initialize base layer
	LayerModeInx[0] = LAYERMODE_BASE;
10002d24:	483b      	ldr	r0, [pc, #236]	; (10002e14 <_Z7VgaInitPK6sVmode+0x1a0>)
	ScanLine = 1; // currently processed scanline
10002d26:	601c      	str	r4, [r3, #0]
	BufInx = 0; // at first, control buffer 1 will be sent out
10002d28:	2300      	movs	r3, #0
	LayerModeInx[0] = LAYERMODE_BASE;
10002d2a:	4681      	mov	r9, r0
	BufInx = 0; // at first, control buffer 1 will be sent out
10002d2c:	4a3a      	ldr	r2, [pc, #232]	; (10002e18 <_Z7VgaInitPK6sVmode+0x1a4>)
	CtrlBufNext[0] = CtrlBuf2;
10002d2e:	493b      	ldr	r1, [pc, #236]	; (10002e1c <_Z7VgaInitPK6sVmode+0x1a8>)
	BufInx = 0; // at first, control buffer 1 will be sent out
10002d30:	6013      	str	r3, [r2, #0]
	memcpy(&CurLayerMode[0], &LayerMode[LAYERMODE_BASE], sizeof(sLayerMode));
10002d32:	4f3b      	ldr	r7, [pc, #236]	; (10002e20 <_Z7VgaInitPK6sVmode+0x1ac>)
	CtrlBufNext[0] = CtrlBuf2;
10002d34:	4a3b      	ldr	r2, [pc, #236]	; (10002e24 <_Z7VgaInitPK6sVmode+0x1b0>)
	LayerModeInx[0] = LAYERMODE_BASE;
10002d36:	7003      	strb	r3, [r0, #0]
	memcpy(&CurLayerMode[0], &LayerMode[LAYERMODE_BASE], sizeof(sLayerMode));
10002d38:	4b3b      	ldr	r3, [pc, #236]	; (10002e28 <_Z7VgaInitPK6sVmode+0x1b4>)
	CtrlBufNext[0] = CtrlBuf2;
10002d3a:	6011      	str	r1, [r2, #0]
	memcpy(&CurLayerMode[0], &LayerMode[LAYERMODE_BASE], sizeof(sLayerMode));
10002d3c:	0038      	movs	r0, r7
10002d3e:	0019      	movs	r1, r3
10002d40:	2203      	movs	r2, #3
10002d42:	469a      	mov	sl, r3
10002d44:	f7fd fe28 	bl	10000998 <__wrap___aeabi_memcpy>
	memset(&LayerScreen[0], 0, sizeof(sLayer));
10002d48:	2100      	movs	r1, #0
10002d4a:	2224      	movs	r2, #36	; 0x24
10002d4c:	4837      	ldr	r0, [pc, #220]	; (10002e2c <_Z7VgaInitPK6sVmode+0x1b8>)
10002d4e:	f7fd fe1d 	bl	1000098c <__wrap_memset>

	// save layer modes
	LayerModeInx[1] = vmode->mode[1];
10002d52:	4649      	mov	r1, r9
10002d54:	7eab      	ldrb	r3, [r5, #26]
	LayerModeInx[2] = vmode->mode[2];
	LayerModeInx[3] = vmode->mode[3];

	LayerMask = B0; // mask of active layers
10002d56:	4e36      	ldr	r6, [pc, #216]	; (10002e30 <_Z7VgaInitPK6sVmode+0x1bc>)
	LayerModeInx[1] = vmode->mode[1];
10002d58:	704b      	strb	r3, [r1, #1]
	LayerModeInx[2] = vmode->mode[2];
10002d5a:	7eeb      	ldrb	r3, [r5, #27]
10002d5c:	3703      	adds	r7, #3
10002d5e:	708b      	strb	r3, [r1, #2]
	LayerModeInx[3] = vmode->mode[3];
10002d60:	7f2b      	ldrb	r3, [r5, #28]
	LayerMask = B0; // mask of active layers
10002d62:	7034      	strb	r4, [r6, #0]
	LayerModeInx[3] = vmode->mode[3];
10002d64:	70cb      	strb	r3, [r1, #3]
	for (i = 1; i < LAYERS; i++)
	{
		memcpy(&CurLayerMode[i], &LayerMode[LayerModeInx[i]], sizeof(sLayerMode));
		if (LayerModeInx[i] != LAYERMODE_BASE) LayerMask |= (1 << i);
10002d66:	2301      	movs	r3, #1
10002d68:	469b      	mov	fp, r3
		memcpy(&CurLayerMode[i], &LayerMode[LayerModeInx[i]], sizeof(sLayerMode));
10002d6a:	464b      	mov	r3, r9
10002d6c:	5d1d      	ldrb	r5, [r3, r4]
10002d6e:	2203      	movs	r2, #3
10002d70:	0069      	lsls	r1, r5, #1
10002d72:	1949      	adds	r1, r1, r5
10002d74:	0038      	movs	r0, r7
10002d76:	4451      	add	r1, sl
10002d78:	f7fd fe0e 	bl	10000998 <__wrap___aeabi_memcpy>
		if (LayerModeInx[i] != LAYERMODE_BASE) LayerMask |= (1 << i);
10002d7c:	2d00      	cmp	r5, #0
10002d7e:	d004      	beq.n	10002d8a <_Z7VgaInitPK6sVmode+0x116>
10002d80:	465b      	mov	r3, fp
10002d82:	40a3      	lsls	r3, r4
10002d84:	7832      	ldrb	r2, [r6, #0]
10002d86:	4313      	orrs	r3, r2
10002d88:	7033      	strb	r3, [r6, #0]
	for (i = 1; i < LAYERS; i++)
10002d8a:	3401      	adds	r4, #1
10002d8c:	3703      	adds	r7, #3
10002d8e:	2c04      	cmp	r4, #4
10002d90:	d1eb      	bne.n	10002d6a <_Z7VgaInitPK6sVmode+0xf6>
	}

	// get layer program
	LayerProgInx = vmode->prog;
10002d92:	9b01      	ldr	r3, [sp, #4]
	memcpy(&CurLayerProg, &LayerProg[LayerProgInx], sizeof(sLayerProg));
10002d94:	4927      	ldr	r1, [pc, #156]	; (10002e34 <_Z7VgaInitPK6sVmode+0x1c0>)
	LayerProgInx = vmode->prog;
10002d96:	7e1a      	ldrb	r2, [r3, #24]
10002d98:	4b27      	ldr	r3, [pc, #156]	; (10002e38 <_Z7VgaInitPK6sVmode+0x1c4>)
10002d9a:	701a      	strb	r2, [r3, #0]
	memcpy(&CurLayerProg, &LayerProg[LayerProgInx], sizeof(sLayerProg));
10002d9c:	0053      	lsls	r3, r2, #1
10002d9e:	189b      	adds	r3, r3, r2
10002da0:	4a26      	ldr	r2, [pc, #152]	; (10002e3c <_Z7VgaInitPK6sVmode+0x1c8>)
10002da2:	011b      	lsls	r3, r3, #4
10002da4:	189b      	adds	r3, r3, r2
10002da6:	000a      	movs	r2, r1
10002da8:	cb13      	ldmia	r3!, {r0, r1, r4}
10002daa:	c213      	stmia	r2!, {r0, r1, r4}
10002dac:	cb13      	ldmia	r3!, {r0, r1, r4}
10002dae:	c213      	stmia	r2!, {r0, r1, r4}
10002db0:	cb13      	ldmia	r3!, {r0, r1, r4}
10002db2:	c213      	stmia	r2!, {r0, r1, r4}
10002db4:	cb13      	ldmia	r3!, {r0, r1, r4}
10002db6:	c213      	stmia	r2!, {r0, r1, r4}

	// initialize VGA PIO
	VgaPioInit();
10002db8:	f7ff fc6e 	bl	10002698 <_Z10VgaPioInitv>

	// initialize scanline buffers
	VgaBufInit();
10002dbc:	f7ff fd42 	bl	10002844 <_Z10VgaBufInitv>

	// initialize DMA
	VgaDmaInit();
10002dc0:	f7ff fbdc 	bl	1000257c <_Z10VgaDmaInitv>

	// enable DMA IRQ
	irq_set_enabled(DMA_IRQ_0, true);
10002dc4:	2101      	movs	r1, #1
10002dc6:	200b      	movs	r0, #11
10002dc8:	f7fe f90a 	bl	10000fe0 <irq_set_enabled>
    dma_hw->multi_channel_trigger = chan_mask;
10002dcc:	22a0      	movs	r2, #160	; 0xa0
10002dce:	2386      	movs	r3, #134	; 0x86
10002dd0:	2101      	movs	r1, #1
10002dd2:	05d2      	lsls	r2, r2, #23
10002dd4:	00db      	lsls	r3, r3, #3
10002dd6:	50d1      	str	r1, [r2, r3]
                 ((mask << PIO_CTRL_SM_ENABLE_LSB) & PIO_CTRL_SM_ENABLE_BITS);
10002dd8:	230f      	movs	r3, #15
    pio->ctrl |= ((mask << PIO_CTRL_CLKDIV_RESTART_LSB) & PIO_CTRL_CLKDIV_RESTART_BITS) |
10002dda:	4919      	ldr	r1, [pc, #100]	; (10002e40 <_Z7VgaInitPK6sVmode+0x1cc>)

	// start DMA with base layer 0
	dma_channel_start(VGA_DMA_CB0);

	// run state machines
	pio_enable_sm_mask_in_sync(VGA_PIO, LayerMask);
10002ddc:	7832      	ldrb	r2, [r6, #0]
10002dde:	6808      	ldr	r0, [r1, #0]
                 ((mask << PIO_CTRL_SM_ENABLE_LSB) & PIO_CTRL_SM_ENABLE_BITS);
10002de0:	4013      	ands	r3, r2
    pio->ctrl |= ((mask << PIO_CTRL_CLKDIV_RESTART_LSB) & PIO_CTRL_CLKDIV_RESTART_BITS) |
10002de2:	4303      	orrs	r3, r0
10002de4:	20f0      	movs	r0, #240	; 0xf0
10002de6:	0212      	lsls	r2, r2, #8
10002de8:	0100      	lsls	r0, r0, #4
10002dea:	4002      	ands	r2, r0
10002dec:	4313      	orrs	r3, r2
10002dee:	600b      	str	r3, [r1, #0]
}
10002df0:	b003      	add	sp, #12
10002df2:	bcf0      	pop	{r4, r5, r6, r7}
10002df4:	46bb      	mov	fp, r7
10002df6:	46b2      	mov	sl, r6
10002df8:	46a9      	mov	r9, r5
10002dfa:	46a0      	mov	r8, r4
10002dfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
10002dfe:	46c0      	nop			; (mov r8, r8)
10002e00:	200380d8 	.word	0x200380d8
10002e04:	0000ffff 	.word	0x0000ffff
10002e08:	200367bc 	.word	0x200367bc
10002e0c:	200366b4 	.word	0x200366b4
10002e10:	200388d8 	.word	0x200388d8
10002e14:	20036728 	.word	0x20036728
10002e18:	2003516c 	.word	0x2003516c
10002e1c:	20035c08 	.word	0x20035c08
10002e20:	20036678 	.word	0x20036678
10002e24:	20036668 	.word	0x20036668
10002e28:	10004cf0 	.word	0x10004cf0
10002e2c:	2003672c 	.word	0x2003672c
10002e30:	200394d8 	.word	0x200394d8
10002e34:	20036684 	.word	0x20036684
10002e38:	200394d9 	.word	0x200394d9
10002e3c:	10004d2c 	.word	0x10004d2c
10002e40:	50200000 	.word	0x50200000

10002e44 <_Z7VgaCorev>:

void (* volatile Core1Fnc)() = NULL; // core 1 remote function

// VGA core
void VgaCore()
{
10002e44:	b570      	push	{r4, r5, r6, lr}
			if ((u32)v == (u32)1)
				VgaTerm(); // terminate
			else
				VgaInit(v);
			__dmb();
			VgaVmodeReq = NULL;
10002e46:	2600      	movs	r6, #0
10002e48:	4d0f      	ldr	r5, [pc, #60]	; (10002e88 <_Z7VgaCorev+0x44>)
10002e4a:	4c10      	ldr	r4, [pc, #64]	; (10002e8c <_Z7VgaCorev+0x48>)
    __asm volatile ("dmb");
10002e4c:	f3bf 8f5f 	dmb	sy
		v = VgaVmodeReq;
10002e50:	6828      	ldr	r0, [r5, #0]
		if (v != NULL)
10002e52:	2800      	cmp	r0, #0
10002e54:	d006      	beq.n	10002e64 <_Z7VgaCorev+0x20>
			if ((u32)v == (u32)1)
10002e56:	2801      	cmp	r0, #1
10002e58:	d012      	beq.n	10002e80 <_Z7VgaCorev+0x3c>
				VgaInit(v);
10002e5a:	f7ff ff0b 	bl	10002c74 <_Z7VgaInitPK6sVmode>
10002e5e:	f3bf 8f5f 	dmb	sy
			VgaVmodeReq = NULL;
10002e62:	602e      	str	r6, [r5, #0]
		}

		// execute remote function
		fnc = Core1Fnc;
10002e64:	6823      	ldr	r3, [r4, #0]
		if (fnc != NULL)
10002e66:	2b00      	cmp	r3, #0
10002e68:	d0f0      	beq.n	10002e4c <_Z7VgaCorev+0x8>
		{
			fnc();
10002e6a:	4798      	blx	r3
10002e6c:	f3bf 8f5f 	dmb	sy
			__dmb();
			Core1Fnc = NULL;
10002e70:	6026      	str	r6, [r4, #0]
10002e72:	f3bf 8f5f 	dmb	sy
		v = VgaVmodeReq;
10002e76:	6828      	ldr	r0, [r5, #0]
		if (v != NULL)
10002e78:	2800      	cmp	r0, #0
10002e7a:	d0f3      	beq.n	10002e64 <_Z7VgaCorev+0x20>
			if ((u32)v == (u32)1)
10002e7c:	2801      	cmp	r0, #1
10002e7e:	d1ec      	bne.n	10002e5a <_Z7VgaCorev+0x16>
				VgaTerm(); // terminate
10002e80:	f7ff fdb6 	bl	100029f0 <_Z7VgaTermv>
10002e84:	e7eb      	b.n	10002e5e <_Z7VgaCorev+0x1a>
10002e86:	46c0      	nop			; (mov r8, r8)
10002e88:	200392bc 	.word	0x200392bc
10002e8c:	200351a4 	.word	0x200351a4

10002e90 <_Z10VgaInitReqPK6sVmode>:
}

// request to initialize VGA videomode, NULL=only stop driver (wait to initialization completes)
void VgaInitReq(const sVmode* vmode)
{
	if (vmode == NULL) vmode = (const sVmode*)1;
10002e90:	2800      	cmp	r0, #0
10002e92:	d00c      	beq.n	10002eae <_Z10VgaInitReqPK6sVmode+0x1e>
10002e94:	f3bf 8f5f 	dmb	sy
	__dmb();
	VgaVmodeReq = vmode;
10002e98:	4a06      	ldr	r2, [pc, #24]	; (10002eb4 <_Z10VgaInitReqPK6sVmode+0x24>)
10002e9a:	6010      	str	r0, [r2, #0]
	while (VgaVmodeReq != NULL) { __dmb(); }
10002e9c:	6813      	ldr	r3, [r2, #0]
10002e9e:	2b00      	cmp	r3, #0
10002ea0:	d004      	beq.n	10002eac <_Z10VgaInitReqPK6sVmode+0x1c>
10002ea2:	f3bf 8f5f 	dmb	sy
10002ea6:	6813      	ldr	r3, [r2, #0]
10002ea8:	2b00      	cmp	r3, #0
10002eaa:	d1fa      	bne.n	10002ea2 <_Z10VgaInitReqPK6sVmode+0x12>
}
10002eac:	4770      	bx	lr
	if (vmode == NULL) vmode = (const sVmode*)1;
10002eae:	3001      	adds	r0, #1
10002eb0:	e7f0      	b.n	10002e94 <_Z10VgaInitReqPK6sVmode+0x4>
10002eb2:	46c0      	nop			; (mov r8, r8)
10002eb4:	200392bc 	.word	0x200392bc

10002eb8 <_Z7LayerOnh>:
// number of pins of overlapped layer (base layer should stay VGA_GPIO_OUTNUM)
u8 LayerNumPin[LAYERS_MAX] = { VGA_GPIO_OUTNUM, VGA_GPIO_OUTNUM, VGA_GPIO_OUTNUM, VGA_GPIO_OUTNUM};

// set overlapped layer 1..3 ON
void LayerOn(u8 inx)
{
10002eb8:	0003      	movs	r3, r0
10002eba:	f3bf 8f5f 	dmb	sy
	__dmb();
	LayerScreen[inx].on = True;
10002ebe:	00c0      	lsls	r0, r0, #3
10002ec0:	18c3      	adds	r3, r0, r3
10002ec2:	4804      	ldr	r0, [pc, #16]	; (10002ed4 <_Z7LayerOnh+0x1c>)
10002ec4:	009b      	lsls	r3, r3, #2
10002ec6:	18c0      	adds	r0, r0, r3
10002ec8:	2301      	movs	r3, #1
10002eca:	3022      	adds	r0, #34	; 0x22
10002ecc:	7003      	strb	r3, [r0, #0]
10002ece:	f3bf 8f5f 	dmb	sy
	__dmb();
}
10002ed2:	4770      	bx	lr
10002ed4:	2003672c 	.word	0x2003672c

10002ed8 <_Z10LayerSetuphPKhPK6sVmodetthPKv>:
//  h ... image height
//  col ... key color (needed for LAYERMODE_KEY and LAYERMODE_MONO layer mode)
//  par ... additional data (RLE index table, integer transformation matrix)
// Use these functions after layer setup: LayerSetX, LayerSetY, LayerOn
void LayerSetup(u8 inx, const u8* img, const sVmode* vmode, u16 w, u16 h, u8 col /* = 0 */, const void* par /* = NULL */)
{
10002ed8:	b5f0      	push	{r4, r5, r6, r7, lr}
10002eda:	46de      	mov	lr, fp
10002edc:	464e      	mov	r6, r9
10002ede:	4645      	mov	r5, r8
10002ee0:	4657      	mov	r7, sl
10002ee2:	b5e0      	push	{r5, r6, r7, lr}
10002ee4:	b083      	sub	sp, #12
10002ee6:	4688      	mov	r8, r1
10002ee8:	a90c      	add	r1, sp, #48	; 0x30
10002eea:	4693      	mov	fp, r2
10002eec:	880a      	ldrh	r2, [r1, #0]
10002eee:	a90d      	add	r1, sp, #52	; 0x34
10002ef0:	4691      	mov	r9, r2
10002ef2:	7809      	ldrb	r1, [r1, #0]
10002ef4:	f3bf 8f5f 	dmb	sy
	LayerScreen[inx].on = False;
10002ef8:	00c2      	lsls	r2, r0, #3
10002efa:	1814      	adds	r4, r2, r0
10002efc:	4e35      	ldr	r6, [pc, #212]	; (10002fd4 <_Z10LayerSetuphPKhPK6sVmodetthPKv+0xfc>)
10002efe:	9201      	str	r2, [sp, #4]
10002f00:	00a2      	lsls	r2, r4, #2
10002f02:	18b4      	adds	r4, r6, r2
10002f04:	4694      	mov	ip, r2
10002f06:	2222      	movs	r2, #34	; 0x22
10002f08:	4692      	mov	sl, r2
10002f0a:	44a2      	add	sl, r4
10002f0c:	2700      	movs	r7, #0
10002f0e:	4652      	mov	r2, sl
10002f10:	7017      	strb	r7, [r2, #0]
10002f12:	f3bf 8f5f 	dmb	sy
	LayerOff(inx); // set layer OFF
	sLayer* lay = &LayerScreen[inx]; // get pointer to layer
	lay->img = img; // pointer to image data
10002f16:	4662      	mov	r2, ip
10002f18:	4645      	mov	r5, r8
10002f1a:	50b5      	str	r5, [r6, r2]
	lay->par = par; // additional parameter
10002f1c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
	lay->keycol = col | ((u16)col << 8) | ((u32)col << 16) | ((u32)col << 24); // key color
	lay->x = 0; // X coordinate
10002f1e:	8267      	strh	r7, [r4, #18]
	lay->par = par; // additional parameter
10002f20:	6062      	str	r2, [r4, #4]
	lay->keycol = col | ((u16)col << 8) | ((u32)col << 16) | ((u32)col << 24); // key color
10002f22:	040a      	lsls	r2, r1, #16
10002f24:	4690      	mov	r8, r2
10002f26:	060a      	lsls	r2, r1, #24
10002f28:	4694      	mov	ip, r2
10002f2a:	4642      	mov	r2, r8
10002f2c:	4665      	mov	r5, ip
10002f2e:	432a      	orrs	r2, r5
10002f30:	4690      	mov	r8, r2
10002f32:	020a      	lsls	r2, r1, #8
10002f34:	4311      	orrs	r1, r2
10002f36:	4642      	mov	r2, r8
10002f38:	4311      	orrs	r1, r2
	lay->y = 0; // Y coordinate
	lay->h = h; // height of image
10002f3a:	464a      	mov	r2, r9
10002f3c:	8322      	strh	r2, [r4, #24]
	lay->spritenum = 0; // number of sprites
	lay->cpp = vmode->cpp; // save clocks per pixel
10002f3e:	465a      	mov	r2, fp
	lay->y = 0; // Y coordinate
10002f40:	82a7      	strh	r7, [r4, #20]
	lay->spritenum = 0; // number of sprites
10002f42:	8427      	strh	r7, [r4, #32]
	lay->cpp = vmode->cpp; // save clocks per pixel
10002f44:	0027      	movs	r7, r4
	lay->keycol = col | ((u16)col << 8) | ((u32)col << 16) | ((u32)col << 24); // key color
10002f46:	60e1      	str	r1, [r4, #12]
	lay->cpp = vmode->cpp; // save clocks per pixel
10002f48:	8ad2      	ldrh	r2, [r2, #22]
10002f4a:	3723      	adds	r7, #35	; 0x23
10002f4c:	703a      	strb	r2, [r7, #0]
	lay->mode = vmode->mode[inx]; // layer mode
10002f4e:	465a      	mov	r2, fp
10002f50:	1812      	adds	r2, r2, r0
10002f52:	7e52      	ldrb	r2, [r2, #25]
	lay->w = w; // image width
10002f54:	82e3      	strh	r3, [r4, #22]
	lay->mode = vmode->mode[inx]; // layer mode
10002f56:	7722      	strb	r2, [r4, #28]
	lay->trans = mono ? (((w/8)+3)/4) : (w/4); // transfer count
10002f58:	2a04      	cmp	r2, #4
10002f5a:	d019      	beq.n	10002f90 <_Z10LayerSetuphPKhPK6sVmodetthPKv+0xb8>
10002f5c:	089f      	lsrs	r7, r3, #2
10002f5e:	8227      	strh	r7, [r4, #16]
	lay->wb = mono ? (w/8) : w; // width bytes
10002f60:	8363      	strh	r3, [r4, #26]
	switch (lay->mode)
10002f62:	2a12      	cmp	r2, #18
10002f64:	d834      	bhi.n	10002fd0 <_Z10LayerSetuphPKhPK6sVmodetthPKv+0xf8>
10002f66:	4c1c      	ldr	r4, [pc, #112]	; (10002fd8 <_Z10LayerSetuphPKhPK6sVmodetthPKv+0x100>)
10002f68:	0092      	lsls	r2, r2, #2
10002f6a:	58a2      	ldr	r2, [r4, r2]
10002f6c:	4697      	mov	pc, r2
		init = VGAWHITE(cppx, w);
10002f6e:	1e59      	subs	r1, r3, #1
10002f70:	23c0      	movs	r3, #192	; 0xc0
10002f72:	029b      	lsls	r3, r3, #10
10002f74:	430b      	orrs	r3, r1
	lay->init = init; // init word
10002f76:	9a01      	ldr	r2, [sp, #4]
10002f78:	4694      	mov	ip, r2
10002f7a:	4460      	add	r0, ip
10002f7c:	0080      	lsls	r0, r0, #2
10002f7e:	1830      	adds	r0, r6, r0
10002f80:	6083      	str	r3, [r0, #8]
	LayerSetW(inx, w); // set width of image, update parameters init, trans and wb
}
10002f82:	b003      	add	sp, #12
10002f84:	bcf0      	pop	{r4, r5, r6, r7}
10002f86:	46bb      	mov	fp, r7
10002f88:	46b2      	mov	sl, r6
10002f8a:	46a9      	mov	r9, r5
10002f8c:	46a0      	mov	r8, r4
10002f8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	lay->trans = mono ? (((w/8)+3)/4) : (w/4); // transfer count
10002f90:	08df      	lsrs	r7, r3, #3
10002f92:	1cfa      	adds	r2, r7, #3
10002f94:	1092      	asrs	r2, r2, #2
10002f96:	8222      	strh	r2, [r4, #16]
		init = VGAMONO(cppx, w, (lay->keycol & 0xff));
10002f98:	22ff      	movs	r2, #255	; 0xff
10002f9a:	0309      	lsls	r1, r1, #12
10002f9c:	0312      	lsls	r2, r2, #12
10002f9e:	3b01      	subs	r3, #1
10002fa0:	4011      	ands	r1, r2
10002fa2:	005b      	lsls	r3, r3, #1
10002fa4:	430b      	orrs	r3, r1
10002fa6:	2101      	movs	r1, #1
	lay->wb = mono ? (w/8) : w; // width bytes
10002fa8:	8367      	strh	r7, [r4, #26]
		init = VGAMONO(cppx, w, (lay->keycol & 0xff));
10002faa:	430b      	orrs	r3, r1
		break;
10002fac:	e7e3      	b.n	10002f76 <_Z10LayerSetuphPKhPK6sVmodetthPKv+0x9e>
		init = VGAKEY(cppx, w, (lay->keycol & 0xff));
10002fae:	22ff      	movs	r2, #255	; 0xff
10002fb0:	02c9      	lsls	r1, r1, #11
10002fb2:	02d2      	lsls	r2, r2, #11
10002fb4:	3b01      	subs	r3, #1
10002fb6:	4011      	ands	r1, r2
10002fb8:	4319      	orrs	r1, r3
10002fba:	2380      	movs	r3, #128	; 0x80
10002fbc:	031b      	lsls	r3, r3, #12
10002fbe:	430b      	orrs	r3, r1
		break;
10002fc0:	e7d9      	b.n	10002f76 <_Z10LayerSetuphPKhPK6sVmodetthPKv+0x9e>
		init = VGACOLOR(cppx, w);
10002fc2:	4906      	ldr	r1, [pc, #24]	; (10002fdc <_Z10LayerSetuphPKhPK6sVmodetthPKv+0x104>)
10002fc4:	3b01      	subs	r3, #1
10002fc6:	005b      	lsls	r3, r3, #1
10002fc8:	430b      	orrs	r3, r1
		break;
10002fca:	e7d4      	b.n	10002f76 <_Z10LayerSetuphPKhPK6sVmodetthPKv+0x9e>
	switch (lay->mode)
10002fcc:	2301      	movs	r3, #1
10002fce:	e7d2      	b.n	10002f76 <_Z10LayerSetuphPKhPK6sVmodetthPKv+0x9e>
	u32 init = 0; // init word
10002fd0:	2300      	movs	r3, #0
10002fd2:	e7d0      	b.n	10002f76 <_Z10LayerSetuphPKhPK6sVmodetthPKv+0x9e>
10002fd4:	2003672c 	.word	0x2003672c
10002fd8:	10004ca4 	.word	0x10004ca4
10002fdc:	002ff000 	.word	0x002ff000

10002fe0 <_Z11ScreenClearP7sScreen>:
10002fe0:	f3bf 8f5f 	dmb	sy

// clear screen (set 0 strips, does not modify sprites)
void ScreenClear(sScreen* s)
{
	__dmb();
	s->num = 0;
10002fe4:	2300      	movs	r3, #0
10002fe6:	8003      	strh	r3, [r0, #0]
10002fe8:	f3bf 8f5f 	dmb	sy
	__dmb();
}
10002fec:	4770      	bx	lr
10002fee:	46c0      	nop			; (mov r8, r8)

10002ff0 <_Z14ScreenAddStripP7sScreeni>:

// add empty strip to the screen (returns pointer to the strip)
sStrip* ScreenAddStrip(sScreen* s, int height)
{
	int n = s->num;
10002ff0:	23e4      	movs	r3, #228	; 0xe4
10002ff2:	8802      	ldrh	r2, [r0, #0]
{
10002ff4:	b510      	push	{r4, lr}
10002ff6:	4353      	muls	r3, r2
	sStrip* t = &s->strip[n];
	t->height = height;
10002ff8:	18c4      	adds	r4, r0, r3
10002ffa:	80a1      	strh	r1, [r4, #4]
	t->num = 0;
10002ffc:	2100      	movs	r1, #0
10002ffe:	80e1      	strh	r1, [r4, #6]
10003000:	f3bf 8f5f 	dmb	sy
	__dmb();
	s->num = n + 1;
10003004:	3201      	adds	r2, #1
10003006:	8002      	strh	r2, [r0, #0]
10003008:	f3bf 8f5f 	dmb	sy
	sStrip* t = &s->strip[n];
1000300c:	3304      	adds	r3, #4
1000300e:	18c0      	adds	r0, r0, r3
	__dmb();
	return t;
}
10003010:	bd10      	pop	{r4, pc}
10003012:	46c0      	nop			; (mov r8, r8)

10003014 <_Z13ScreenAddSegmP6sStripi>:

// add empty segment to video strip (returns pointer to the segment and initialises is to defaults)
sSegm* ScreenAddSegm(sStrip* strip, int width)
{
10003014:	b5f0      	push	{r4, r5, r6, r7, lr}
	int n = strip->num;
	sSegm* g = &strip->seg[n];
	g->width = width;
10003016:	2500      	movs	r5, #0
	int n = strip->num;
10003018:	8844      	ldrh	r4, [r0, #2]
	g->width = width;
1000301a:	040f      	lsls	r7, r1, #16
1000301c:	00e3      	lsls	r3, r4, #3
1000301e:	1b1b      	subs	r3, r3, r4
10003020:	009b      	lsls	r3, r3, #2
10003022:	0c3e      	lsrs	r6, r7, #16
10003024:	18c2      	adds	r2, r0, r3
10003026:	433e      	orrs	r6, r7
10003028:	6056      	str	r6, [r2, #4]
	g->wb = width;
	g->offx = 0;
1000302a:	6095      	str	r5, [r2, #8]
	g->offy = 0;
	g->wrapx = width;
1000302c:	8191      	strh	r1, [r2, #12]
	g->wrapy = strip->height;
1000302e:	8801      	ldrh	r1, [r0, #0]
	g->data = NULL;
10003030:	6115      	str	r5, [r2, #16]
	g->wrapy = strip->height;
10003032:	81d1      	strh	r1, [r2, #14]
	g->form = GF_COLOR;
10003034:	8295      	strh	r5, [r2, #20]
	g->dbly = false;
	g->par = 0;
10003036:	6195      	str	r5, [r2, #24]
	g->par2 = 0;
10003038:	61d5      	str	r5, [r2, #28]
1000303a:	f3bf 8f5f 	dmb	sy
	__dmb();
	strip->num = n + 1;
1000303e:	3401      	adds	r4, #1
10003040:	8044      	strh	r4, [r0, #2]
10003042:	f3bf 8f5f 	dmb	sy
	sSegm* g = &strip->seg[n];
10003046:	3304      	adds	r3, #4
10003048:	18c0      	adds	r0, r0, r3
	__dmb();
	return g;
}
1000304a:	bdf0      	pop	{r4, r5, r6, r7, pc}

1000304c <_Z15ScreenSegmColorP5sSegmmm>:
// set video segment to simple color format GF_COLOR
//  col1 = color pattern 4-pixels even line (use macro MULTICOL)
//  col2 = color pattern 4-pixels odd line (use macro MULTICOL)
void ScreenSegmColor(sSegm* segm, u32 col1, u32 col2)
{
	segm->par = col1;
1000304c:	6141      	str	r1, [r0, #20]
	segm->par2 = col2;
1000304e:	6182      	str	r2, [r0, #24]
10003050:	f3bf 8f5f 	dmb	sy
	__dmb();
	segm->form = GF_COLOR;
10003054:	2300      	movs	r3, #0
10003056:	7403      	strb	r3, [r0, #16]
10003058:	f3bf 8f5f 	dmb	sy
	__dmb();
}
1000305c:	4770      	bx	lr
1000305e:	46c0      	nop			; (mov r8, r8)

10003060 <_Z16ScreenSegmGraph8P5sSegmPKvi>:
//   data = pointer to data buffer
//   wb = pitch - number of bytes between lines
// To scroll image, set virtual dimension wrapx and wrapy, then shift offx and offy.
void ScreenSegmGraph8(sSegm* segm, const void* data, int wb)
{
	segm->form = GF_COLOR;
10003060:	2300      	movs	r3, #0
10003062:	7403      	strb	r3, [r0, #16]
10003064:	f3bf 8f5f 	dmb	sy
	__dmb();
	segm->data = data;
10003068:	60c1      	str	r1, [r0, #12]
	segm->wb = wb;
1000306a:	8042      	strh	r2, [r0, #2]
1000306c:	f3bf 8f5f 	dmb	sy
	__dmb();
	segm->form = GF_GRAPH8;
10003070:	3301      	adds	r3, #1
10003072:	7403      	strb	r3, [r0, #16]
10003074:	f3bf 8f5f 	dmb	sy
	__dmb();
}
10003078:	4770      	bx	lr
1000307a:	46c0      	nop			; (mov r8, r8)

1000307c <_Z13GenPal16TransPtPKh>:

// generate 16-color palette translation table for functions ScreenSegmGraph4
//  trans = pointer to destination palette translation table (u16 trans[256])
//  pal = pointer to source palette of 16 colors (u8 pal[16])
void GenPal16Trans(u16* trans, const u8* pal)
{
1000307c:	b5f0      	push	{r4, r5, r6, r7, lr}
	int i, j;
	u16 k;
	for (i = 0; i < 256; i++)
1000307e:	2680      	movs	r6, #128	; 0x80
{
10003080:	0005      	movs	r5, r0
	for (i = 0; i < 256; i++)
10003082:	2300      	movs	r3, #0
{
10003084:	0008      	movs	r0, r1
	{
		j = (i >> 4) & 0x0f;
		k = pal[j];

		j = i & 0x0f;
10003086:	270f      	movs	r7, #15
	for (i = 0; i < 256; i++)
10003088:	0076      	lsls	r6, r6, #1
		j = i & 0x0f;
1000308a:	003a      	movs	r2, r7
1000308c:	401a      	ands	r2, r3
		k |= (u16)pal[j] << 8;
1000308e:	5c81      	ldrb	r1, [r0, r2]
		j = (i >> 4) & 0x0f;
10003090:	111a      	asrs	r2, r3, #4
		k |= (u16)pal[j] << 8;
10003092:	5c82      	ldrb	r2, [r0, r2]
10003094:	0209      	lsls	r1, r1, #8

		trans[i] = k;
10003096:	005c      	lsls	r4, r3, #1
		k |= (u16)pal[j] << 8;
10003098:	430a      	orrs	r2, r1
	for (i = 0; i < 256; i++)
1000309a:	3301      	adds	r3, #1
		trans[i] = k;
1000309c:	532a      	strh	r2, [r5, r4]
	for (i = 0; i < 256; i++)
1000309e:	42b3      	cmp	r3, r6
100030a0:	d1f3      	bne.n	1000308a <_Z13GenPal16TransPtPKh+0xe>
	}
}
100030a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

100030a4 <_Z16ScreenSegmGraph4P5sSegmPKvS2_i>:
//   data = pointer to data buffer
//   trans = pointer to 16-color palette translation table (generated with GenPal16Trans function)
//   wb = pitch - number of bytes between lines
// To scroll image, set virtual dimension wrapx and wrapy, then shift offx and offy.
void ScreenSegmGraph4(sSegm* segm, const void* data, const void* trans, int wb)
{
100030a4:	b510      	push	{r4, lr}
	segm->form = GF_COLOR;
100030a6:	2400      	movs	r4, #0
100030a8:	7404      	strb	r4, [r0, #16]
100030aa:	f3bf 8f5f 	dmb	sy
	__dmb();
	segm->data = data;
100030ae:	60c1      	str	r1, [r0, #12]
	segm->par = (u32)trans;
100030b0:	6142      	str	r2, [r0, #20]
	segm->wb = wb;
100030b2:	8043      	strh	r3, [r0, #2]
100030b4:	f3bf 8f5f 	dmb	sy
	__dmb();
	segm->form = GF_GRAPH4;
100030b8:	2307      	movs	r3, #7
100030ba:	7403      	strb	r3, [r0, #16]
100030bc:	f3bf 8f5f 	dmb	sy
	__dmb();
}
100030c0:	bd10      	pop	{r4, pc}
100030c2:	46c0      	nop			; (mov r8, r8)

100030c4 <_Z16ScreenSegmGraph1P5sSegmPKvhhi>:
//   bg = background color
//   fg = foreground color
//   wb = pitch - number of bytes between lines
// To scroll image, set virtual dimension wrapx and wrapy, then shift offx and offy.
void ScreenSegmGraph1(sSegm* segm, const void* data, u8 bg, u8 fg, int wb)
{
100030c4:	b510      	push	{r4, lr}
100030c6:	0014      	movs	r4, r2
	segm->form = GF_COLOR;
100030c8:	2200      	movs	r2, #0
100030ca:	7402      	strb	r2, [r0, #16]
100030cc:	f3bf 8f5f 	dmb	sy
	__dmb();
	segm->data = data;
	segm->par = bg | ((u32)fg << 8);
100030d0:	021a      	lsls	r2, r3, #8
	segm->wb = wb;
100030d2:	9b02      	ldr	r3, [sp, #8]
	segm->par = bg | ((u32)fg << 8);
100030d4:	4322      	orrs	r2, r4
	segm->data = data;
100030d6:	60c1      	str	r1, [r0, #12]
	segm->par = bg | ((u32)fg << 8);
100030d8:	6142      	str	r2, [r0, #20]
	segm->wb = wb;
100030da:	8043      	strh	r3, [r0, #2]
100030dc:	f3bf 8f5f 	dmb	sy
	__dmb();
	segm->form = GF_GRAPH1;
100030e0:	2309      	movs	r3, #9
100030e2:	7403      	strb	r3, [r0, #16]
100030e4:	f3bf 8f5f 	dmb	sy
	__dmb();
}
100030e8:	bd10      	pop	{r4, pc}
100030ea:	46c0      	nop			; (mov r8, r8)

100030ec <_Z15ScreenSegmMTextP5sSegmPKvS2_thhi>:
//   fontheight = font height
//   bg = background color
//   fg = foreground color
//   wb = pitch - number of bytes between text lines
void ScreenSegmMText(sSegm* segm, const void* data, const void* font, u16 fontheight, u8 bg, u8 fg, int wb)
{
100030ec:	b570      	push	{r4, r5, r6, lr}
	segm->form = GF_COLOR;
100030ee:	2600      	movs	r6, #0
{
100030f0:	ac04      	add	r4, sp, #16
100030f2:	7825      	ldrb	r5, [r4, #0]
100030f4:	ac05      	add	r4, sp, #20
100030f6:	7824      	ldrb	r4, [r4, #0]
	segm->form = GF_COLOR;
100030f8:	7406      	strb	r6, [r0, #16]
100030fa:	f3bf 8f5f 	dmb	sy
	__dmb();
	segm->data = data;
	segm->par = (u32)font;
100030fe:	6142      	str	r2, [r0, #20]
	segm->par2 = bg | ((u32)fg << 8);
	segm->par3 = fontheight;
10003100:	8243      	strh	r3, [r0, #18]
	segm->par2 = bg | ((u32)fg << 8);
10003102:	0222      	lsls	r2, r4, #8
	segm->wb = wb;
10003104:	9b06      	ldr	r3, [sp, #24]
	segm->par2 = bg | ((u32)fg << 8);
10003106:	432a      	orrs	r2, r5
	segm->data = data;
10003108:	60c1      	str	r1, [r0, #12]
	segm->par2 = bg | ((u32)fg << 8);
1000310a:	6182      	str	r2, [r0, #24]
	segm->wb = wb;
1000310c:	8043      	strh	r3, [r0, #2]
1000310e:	f3bf 8f5f 	dmb	sy
	__dmb();
	segm->form = GF_MTEXT;
10003112:	230a      	movs	r3, #10
10003114:	7403      	strb	r3, [r0, #16]
10003116:	f3bf 8f5f 	dmb	sy
	__dmb();
}
1000311a:	bd70      	pop	{r4, r5, r6, pc}

1000311c <_Z15ScreenSegmATextP5sSegmPKvS2_tS2_i>:
//   font = pointer to 1-bit font of 256 characters of width 8 (total width of image 2048 pixels)
//   fontheight = font height
//   pal = pointer to palette of 16 colors
//   wb = pitch - number of bytes between text lines
void ScreenSegmAText(sSegm* segm, const void* data, const void* font, u16 fontheight, const void* pal, int wb)
{
1000311c:	b510      	push	{r4, lr}
	segm->form = GF_COLOR;
1000311e:	2400      	movs	r4, #0
10003120:	7404      	strb	r4, [r0, #16]
10003122:	f3bf 8f5f 	dmb	sy
	__dmb();
	segm->data = data;
	segm->par = (u32)font;
10003126:	6142      	str	r2, [r0, #20]
	segm->par2 = (u32)pal;
	segm->par3 = fontheight;
10003128:	8243      	strh	r3, [r0, #18]
	segm->par2 = (u32)pal;
1000312a:	9a02      	ldr	r2, [sp, #8]
	segm->wb = wb;
1000312c:	9b03      	ldr	r3, [sp, #12]
	segm->data = data;
1000312e:	60c1      	str	r1, [r0, #12]
	segm->par2 = (u32)pal;
10003130:	6182      	str	r2, [r0, #24]
	segm->wb = wb;
10003132:	8043      	strh	r3, [r0, #2]
10003134:	f3bf 8f5f 	dmb	sy
	__dmb();
	segm->form = GF_ATEXT;
10003138:	230b      	movs	r3, #11
1000313a:	7403      	strb	r3, [r0, #16]
1000313c:	f3bf 8f5f 	dmb	sy
	__dmb();
}
10003140:	bd10      	pop	{r4, pc}
10003142:	46c0      	nop			; (mov r8, r8)

10003144 <_Z14ScreenSegmTileP5sSegmPKvS2_iii>:
//   tiles = pointer to 1 column of tiles, 1 pixel = 8 bits
//   w = tile width (must be multiple of 4)
//   h = tile height
//   wb = pitch - number of bytes between tile map rows
void ScreenSegmTile(sSegm* segm, const void* data, const void* tiles, int w, int h, int wb)
{
10003144:	b570      	push	{r4, r5, r6, lr}
10003146:	0004      	movs	r4, r0
10003148:	0008      	movs	r0, r1
1000314a:	0019      	movs	r1, r3
	segm->form = GF_COLOR;
1000314c:	2300      	movs	r3, #0
{
1000314e:	9d04      	ldr	r5, [sp, #16]
	segm->form = GF_COLOR;
10003150:	7423      	strb	r3, [r4, #16]
10003152:	f3bf 8f5f 	dmb	sy
	__dmb();
	segm->data = data;
10003156:	60e0      	str	r0, [r4, #12]
	segm->par = (u32)tiles;
	segm->par2 = (u32)h;
	segm->par3 = (u16)w;
	segm->wb = wb;
	segm->wrapx = (segm->width+w-1)/w*w;
10003158:	8820      	ldrh	r0, [r4, #0]
	segm->wb = wb;
1000315a:	9b05      	ldr	r3, [sp, #20]
	segm->par3 = (u16)w;
1000315c:	b28e      	uxth	r6, r1
	segm->wrapx = (segm->width+w-1)/w*w;
1000315e:	1840      	adds	r0, r0, r1
	segm->par = (u32)tiles;
10003160:	6162      	str	r2, [r4, #20]
	segm->par2 = (u32)h;
10003162:	61a5      	str	r5, [r4, #24]
	segm->wb = wb;
10003164:	8063      	strh	r3, [r4, #2]
	segm->par3 = (u16)w;
10003166:	8266      	strh	r6, [r4, #18]
	segm->wrapx = (segm->width+w-1)/w*w;
10003168:	3801      	subs	r0, #1
1000316a:	f7fd f8d7 	bl	1000031c <__wrap___aeabi_idiv>
1000316e:	4370      	muls	r0, r6
10003170:	8120      	strh	r0, [r4, #8]
	segm->wrapy = (segm->wrapy+h-1)/h*h;
10003172:	8960      	ldrh	r0, [r4, #10]
10003174:	0029      	movs	r1, r5
10003176:	1940      	adds	r0, r0, r5
10003178:	3801      	subs	r0, #1
1000317a:	f7fd f8cf 	bl	1000031c <__wrap___aeabi_idiv>
1000317e:	4345      	muls	r5, r0
10003180:	8165      	strh	r5, [r4, #10]
10003182:	f3bf 8f5f 	dmb	sy
	__dmb();
	segm->form = GF_TILE;
10003186:	2302      	movs	r3, #2
10003188:	7423      	strb	r3, [r4, #16]
1000318a:	f3bf 8f5f 	dmb	sy
	__dmb();
}
1000318e:	bd70      	pop	{r4, r5, r6, pc}

10003190 <_Z6VgaCfgPK7sVgaCfgP6sVmode>:

// calculate videomode setup
//   cfg ... required configuration
//   vmode ... destination videomode setup for driver
void VgaCfg(const sVgaCfg* cfg, sVmode* vmode)
{
10003190:	b5f0      	push	{r4, r5, r6, r7, lr}
10003192:	46de      	mov	lr, fp
10003194:	4657      	mov	r7, sl
10003196:	464e      	mov	r6, r9
10003198:	4645      	mov	r5, r8
	int i;

	// prepare layer program, copy layer modes
	u8 prog = LAYERMODE_BASE;
	vmode->mode[0] = prog;
1000319a:	2300      	movs	r3, #0
{
1000319c:	b5e0      	push	{r5, r6, r7, lr}
	vmode->mode[0] = prog;
1000319e:	764b      	strb	r3, [r1, #25]
	for (i = 1; i < LAYERS; i++)
	{
		if (cfg->mode[i] != LAYERMODE_BASE) prog = LayerMode[cfg->mode[i]].prog;
100031a0:	7d42      	ldrb	r2, [r0, #21]
{
100031a2:	4682      	mov	sl, r0
100031a4:	468b      	mov	fp, r1
100031a6:	b091      	sub	sp, #68	; 0x44
		if (cfg->mode[i] != LAYERMODE_BASE) prog = LayerMode[cfg->mode[i]].prog;
100031a8:	2a00      	cmp	r2, #0
100031aa:	d100      	bne.n	100031ae <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x1e>
100031ac:	e290      	b.n	100036d0 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x540>
100031ae:	4bdb      	ldr	r3, [pc, #876]	; (1000351c <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x38c>)
100031b0:	0051      	lsls	r1, r2, #1
100031b2:	1889      	adds	r1, r1, r2
100031b4:	5c59      	ldrb	r1, [r3, r1]
		vmode->mode[i] = cfg->mode[i];
100031b6:	4658      	mov	r0, fp
100031b8:	7682      	strb	r2, [r0, #26]
		if (cfg->mode[i] != LAYERMODE_BASE) prog = LayerMode[cfg->mode[i]].prog;
100031ba:	4652      	mov	r2, sl
100031bc:	7d92      	ldrb	r2, [r2, #22]
100031be:	2a00      	cmp	r2, #0
100031c0:	d002      	beq.n	100031c8 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x38>
100031c2:	0051      	lsls	r1, r2, #1
100031c4:	1889      	adds	r1, r1, r2
100031c6:	5c59      	ldrb	r1, [r3, r1]
		vmode->mode[i] = cfg->mode[i];
100031c8:	4658      	mov	r0, fp
100031ca:	76c2      	strb	r2, [r0, #27]
		if (cfg->mode[i] != LAYERMODE_BASE) prog = LayerMode[cfg->mode[i]].prog;
100031cc:	4652      	mov	r2, sl
100031ce:	7dd2      	ldrb	r2, [r2, #23]
100031d0:	2a00      	cmp	r2, #0
100031d2:	d002      	beq.n	100031da <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x4a>
100031d4:	0051      	lsls	r1, r2, #1
100031d6:	1889      	adds	r1, r1, r2
100031d8:	5c59      	ldrb	r1, [r3, r1]
		vmode->mode[i] = cfg->mode[i];
100031da:	4658      	mov	r0, fp
100031dc:	7702      	strb	r2, [r0, #28]
	}
	vmode->prog = prog;

	// prepare minimal and maximal clocks per pixel
	int mincpp = LayerMode[LAYERMODE_BASE].mincpp;
100031de:	785a      	ldrb	r2, [r3, #1]
	vmode->prog = prog;
100031e0:	7601      	strb	r1, [r0, #24]
	int mincpp = LayerMode[LAYERMODE_BASE].mincpp;
100031e2:	4694      	mov	ip, r2
	int maxcpp = LayerMode[LAYERMODE_BASE].maxcpp;
	int cpp;
	for (i = 1; i < LAYERS; i++)
	{
		cpp = LayerMode[cfg->mode[i]].mincpp;
100031e4:	4652      	mov	r2, sl
100031e6:	7d54      	ldrb	r4, [r2, #21]
100031e8:	7d96      	ldrb	r6, [r2, #22]
100031ea:	0060      	lsls	r0, r4, #1
100031ec:	0072      	lsls	r2, r6, #1
100031ee:	1991      	adds	r1, r2, r6
100031f0:	1907      	adds	r7, r0, r4
100031f2:	1859      	adds	r1, r3, r1
100031f4:	19df      	adds	r7, r3, r7
100031f6:	787f      	ldrb	r7, [r7, #1]
100031f8:	7849      	ldrb	r1, [r1, #1]
	int maxcpp = LayerMode[LAYERMODE_BASE].maxcpp;
100031fa:	789d      	ldrb	r5, [r3, #2]
		if (cpp > mincpp) mincpp = cpp;
100031fc:	42b9      	cmp	r1, r7
100031fe:	da00      	bge.n	10003202 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x72>
10003200:	0039      	movs	r1, r7
10003202:	4561      	cmp	r1, ip
10003204:	da00      	bge.n	10003208 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x78>
10003206:	4661      	mov	r1, ip
		cpp = LayerMode[cfg->mode[i]].maxcpp;
10003208:	1992      	adds	r2, r2, r6
1000320a:	1900      	adds	r0, r0, r4
1000320c:	189a      	adds	r2, r3, r2
1000320e:	1818      	adds	r0, r3, r0
10003210:	7880      	ldrb	r0, [r0, #2]
10003212:	7892      	ldrb	r2, [r2, #2]
10003214:	4282      	cmp	r2, r0
10003216:	dd00      	ble.n	1000321a <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x8a>
10003218:	0002      	movs	r2, r0
1000321a:	42aa      	cmp	r2, r5
1000321c:	dd00      	ble.n	10003220 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x90>
1000321e:	002a      	movs	r2, r5
		cpp = LayerMode[cfg->mode[i]].mincpp;
10003220:	4650      	mov	r0, sl
10003222:	7dc4      	ldrb	r4, [r0, #23]
10003224:	0060      	lsls	r0, r4, #1
10003226:	1905      	adds	r5, r0, r4
10003228:	195d      	adds	r5, r3, r5
1000322a:	786e      	ldrb	r6, [r5, #1]
1000322c:	428e      	cmp	r6, r1
1000322e:	da00      	bge.n	10003232 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0xa2>
10003230:	000e      	movs	r6, r1
		cpp = LayerMode[cfg->mode[i]].maxcpp;
10003232:	1900      	adds	r0, r0, r4
10003234:	181b      	adds	r3, r3, r0
10003236:	789c      	ldrb	r4, [r3, #2]
10003238:	4294      	cmp	r4, r2
1000323a:	dd00      	ble.n	1000323e <_Z6VgaCfgPK7sVgaCfgP6sVmode+0xae>
1000323c:	0014      	movs	r4, r2
		if (cpp < maxcpp) maxcpp = cpp;
	}

	// prepare full width
	int w = cfg->width; // required width
1000323e:	4653      	mov	r3, sl
	int wfull = cfg->wfull;	// full width
10003240:	4652      	mov	r2, sl
	int w = cfg->width; // required width
10003242:	881b      	ldrh	r3, [r3, #0]
10003244:	9306      	str	r3, [sp, #24]
	int wfull = cfg->wfull;	// full width
10003246:	8897      	ldrh	r7, [r2, #4]
	if (wfull == 0) wfull = w; // use required width as 100% width
10003248:	2f00      	cmp	r7, #0
1000324a:	d100      	bne.n	1000324e <_Z6VgaCfgPK7sVgaCfgP6sVmode+0xbe>
1000324c:	001f      	movs	r7, r3

	// prepare maximal active time and maximal pixels
	const sVideo* v = cfg->video;
1000324e:	4653      	mov	r3, sl
10003250:	689b      	ldr	r3, [r3, #8]
10003252:	4699      	mov	r9, r3
	float hmax = v->htot - v->hfront - v->hsync - v->hback;
10003254:	6859      	ldr	r1, [r3, #4]
10003256:	6818      	ldr	r0, [r3, #0]
10003258:	f7fd faff 	bl	1000085a <__wrap___aeabi_fsub>
1000325c:	464b      	mov	r3, r9
1000325e:	6899      	ldr	r1, [r3, #8]
10003260:	f7fd fafb 	bl	1000085a <__wrap___aeabi_fsub>
10003264:	464b      	mov	r3, r9
10003266:	68d9      	ldr	r1, [r3, #12]
10003268:	f7fd faf7 	bl	1000085a <__wrap___aeabi_fsub>
	float hfull = v->hfull;
1000326c:	464b      	mov	r3, r9
1000326e:	691b      	ldr	r3, [r3, #16]
	float hmax = v->htot - v->hfront - v->hsync - v->hback;
10003270:	9007      	str	r0, [sp, #28]
	int wmax = (int)(wfull*hmax/hfull + 0.001f);
10003272:	0038      	movs	r0, r7
	float hfull = v->hfull;
10003274:	4698      	mov	r8, r3
	int wmax = (int)(wfull*hmax/hfull + 0.001f);
10003276:	f7fd fb05 	bl	10000884 <__wrap___aeabi_i2f>

	// calculate cpp from required frequency (rounded down), limit minimal cpp
	u32 freq = cfg->freq;
1000327a:	4653      	mov	r3, sl
1000327c:	68dd      	ldr	r5, [r3, #12]
	int wmax = (int)(wfull*hmax/hfull + 0.001f);
1000327e:	9004      	str	r0, [sp, #16]
	u32 freq = cfg->freq;
10003280:	950e      	str	r5, [sp, #56]	; 0x38
	cpp = (int)(freq*hfull/1000/wfull + 0.1f);
	if (cpp < mincpp) cpp = mincpp;

	// recalculate frequency if not locked
	if (!cfg->lockfreq)
10003282:	7e5b      	ldrb	r3, [r3, #25]
10003284:	2b00      	cmp	r3, #0
10003286:	d130      	bne.n	100032ea <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x15a>
	cpp = (int)(freq*hfull/1000/wfull + 0.1f);
10003288:	0028      	movs	r0, r5
1000328a:	f7fd faf5 	bl	10000878 <__wrap___aeabi_ui2f>
1000328e:	4641      	mov	r1, r8
10003290:	f7fd faec 	bl	1000086c <__wrap___aeabi_fmul>
10003294:	49a2      	ldr	r1, [pc, #648]	; (10003520 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x390>)
10003296:	f7fd fae6 	bl	10000866 <__wrap___aeabi_fdiv>
1000329a:	9904      	ldr	r1, [sp, #16]
1000329c:	f7fd fae3 	bl	10000866 <__wrap___aeabi_fdiv>
100032a0:	49a0      	ldr	r1, [pc, #640]	; (10003524 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x394>)
100032a2:	f7fd fadd 	bl	10000860 <__wrap___aeabi_fadd>
100032a6:	f7fd fb0f 	bl	100008c8 <__wrap___aeabi_f2iz>
	{
		int freq2 = (int)(cpp*wfull*1000/hfull + 0.5f) + 200;
100032aa:	4286      	cmp	r6, r0
100032ac:	da00      	bge.n	100032b0 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x120>
100032ae:	e240      	b.n	10003732 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x5a2>
100032b0:	437e      	muls	r6, r7
100032b2:	0170      	lsls	r0, r6, #5
100032b4:	1b80      	subs	r0, r0, r6
100032b6:	0080      	lsls	r0, r0, #2
100032b8:	1980      	adds	r0, r0, r6
100032ba:	00c0      	lsls	r0, r0, #3
100032bc:	f7fd fae2 	bl	10000884 <__wrap___aeabi_i2f>
100032c0:	4641      	mov	r1, r8
100032c2:	f7fd fad0 	bl	10000866 <__wrap___aeabi_fdiv>
100032c6:	21fc      	movs	r1, #252	; 0xfc
100032c8:	0589      	lsls	r1, r1, #22
100032ca:	f7fd fac9 	bl	10000860 <__wrap___aeabi_fadd>
100032ce:	f7fd fafb 	bl	100008c8 <__wrap___aeabi_f2iz>
100032d2:	30c8      	adds	r0, #200	; 0xc8
		if (freq2 < freq)
100032d4:	4285      	cmp	r5, r0
100032d6:	d900      	bls.n	100032da <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x14a>
100032d8:	e215      	b.n	10003706 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x576>
		{
			cpp++;
			freq2 = (int)(cpp*wfull*1000/hfull + 0.5f) + 200;
		}
		if (freq2 >= freq) freq = freq2;
100032da:	0005      	movs	r5, r0
100032dc:	900e      	str	r0, [sp, #56]	; 0x38
		if (freq > cfg->fmax) freq = cfg->fmax;
100032de:	4653      	mov	r3, sl
100032e0:	691b      	ldr	r3, [r3, #16]
100032e2:	42ab      	cmp	r3, r5
100032e4:	d201      	bcs.n	100032ea <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x15a>
100032e6:	001d      	movs	r5, r3
100032e8:	930e      	str	r3, [sp, #56]	; 0x38

	// find sysclock setup (use set_sys_clock_pll to set sysclock)
	u32 vco;
	u16 fbdiv;
	u8 pd1, pd2;
	FindSysClock(freq, &freq, &vco, &fbdiv, &pd1, &pd2);
100032ea:	ab0a      	add	r3, sp, #40	; 0x28
100032ec:	469c      	mov	ip, r3
100032ee:	260e      	movs	r6, #14
100032f0:	230d      	movs	r3, #13
100032f2:	4466      	add	r6, ip
100032f4:	4463      	add	r3, ip
100032f6:	af0d      	add	r7, sp, #52	; 0x34
100032f8:	a90e      	add	r1, sp, #56	; 0x38
100032fa:	0028      	movs	r0, r5
100032fc:	9301      	str	r3, [sp, #4]
100032fe:	aa0f      	add	r2, sp, #60	; 0x3c
10003300:	0033      	movs	r3, r6
10003302:	9700      	str	r7, [sp, #0]
10003304:	f000 fd82 	bl	10003e0c <_Z12FindSysClockmPmS_PtPhS1_>

	vmode->freq = freq;
10003308:	465b      	mov	r3, fp
1000330a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
	vmode->fbdiv = fbdiv;
	vmode->pd1 = pd1;
	vmode->pd2 = pd2;

	// calculate divisor
	cpp = (int)(freq*hfull/1000/wfull + 0.2f);
1000330c:	980e      	ldr	r0, [sp, #56]	; 0x38
	vmode->freq = freq;
1000330e:	609a      	str	r2, [r3, #8]
	vmode->vco = vco;
10003310:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
10003312:	60da      	str	r2, [r3, #12]
	vmode->fbdiv = fbdiv;
10003314:	465a      	mov	r2, fp
10003316:	8833      	ldrh	r3, [r6, #0]
10003318:	8213      	strh	r3, [r2, #16]
	vmode->pd1 = pd1;
1000331a:	783b      	ldrb	r3, [r7, #0]
1000331c:	7493      	strb	r3, [r2, #18]
	vmode->pd2 = pd2;
1000331e:	ab0a      	add	r3, sp, #40	; 0x28
10003320:	7b5b      	ldrb	r3, [r3, #13]
10003322:	74d3      	strb	r3, [r2, #19]
	cpp = (int)(freq*hfull/1000/wfull + 0.2f);
10003324:	f7fd faa8 	bl	10000878 <__wrap___aeabi_ui2f>
10003328:	4641      	mov	r1, r8
1000332a:	9003      	str	r0, [sp, #12]
1000332c:	f7fd fa9e 	bl	1000086c <__wrap___aeabi_fmul>
10003330:	497b      	ldr	r1, [pc, #492]	; (10003520 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x390>)
10003332:	f7fd fa98 	bl	10000866 <__wrap___aeabi_fdiv>
10003336:	9904      	ldr	r1, [sp, #16]
10003338:	9005      	str	r0, [sp, #20]
1000333a:	f7fd fa94 	bl	10000866 <__wrap___aeabi_fdiv>
1000333e:	497a      	ldr	r1, [pc, #488]	; (10003528 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x398>)
10003340:	4680      	mov	r8, r0
10003342:	f7fd fa8d 	bl	10000860 <__wrap___aeabi_fadd>
10003346:	f7fd fabf 	bl	100008c8 <__wrap___aeabi_f2iz>
1000334a:	0005      	movs	r5, r0
	int div = 1;
	while (cpp > maxcpp)
1000334c:	4284      	cmp	r4, r0
1000334e:	db00      	blt.n	10003352 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x1c2>
10003350:	e20c      	b.n	1000376c <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x5dc>
	int div = 1;
10003352:	2701      	movs	r7, #1
10003354:	4645      	mov	r5, r8
	{
		div++;
10003356:	3701      	adds	r7, #1
		cpp = (int)(freq*hfull/1000/wfull/div + 0.2f);
10003358:	0038      	movs	r0, r7
1000335a:	f7fd fa93 	bl	10000884 <__wrap___aeabi_i2f>
1000335e:	1c01      	adds	r1, r0, #0
10003360:	1c06      	adds	r6, r0, #0
10003362:	1c28      	adds	r0, r5, #0
10003364:	f7fd fa7f 	bl	10000866 <__wrap___aeabi_fdiv>
10003368:	496f      	ldr	r1, [pc, #444]	; (10003528 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x398>)
1000336a:	f7fd fa79 	bl	10000860 <__wrap___aeabi_fadd>
1000336e:	f7fd faab 	bl	100008c8 <__wrap___aeabi_f2iz>
	while (cpp > maxcpp)
10003372:	4284      	cmp	r4, r0
10003374:	dbef      	blt.n	10003356 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x1c6>
	}

	vmode->div = div;
10003376:	0005      	movs	r5, r0
	vmode->vback2 = v->vback2 - dh/2; // V back porch (after VSYNC, before image) on subframe 2
	vmode->vfront2 = v->vfront2 - ((dh < 0) ? (dh-1)/2 : (dh+1)/2); // V front porch (after image, before VSYNC) on subframe 2
	vmode->vpre2 = v->vpre2; // V sync pre half-pulses on subframe 2

	// frequency
	vmode->hfreq = vmode->freq * 1000.0f / vmode->div / vmode->htot;
10003378:	0438      	lsls	r0, r7, #16
1000337a:	0c00      	lsrs	r0, r0, #16
1000337c:	f7fd fa82 	bl	10000884 <__wrap___aeabi_i2f>
	vmode->div = div;
10003380:	b2bc      	uxth	r4, r7
	vmode->hfreq = vmode->freq * 1000.0f / vmode->div / vmode->htot;
10003382:	9008      	str	r0, [sp, #32]
	vmode->div = div;
10003384:	465b      	mov	r3, fp
	wfull = (int)(freq*hfull/1000/cpp/div + 0.4f);
10003386:	0028      	movs	r0, r5
	vmode->div = div;
10003388:	829c      	strh	r4, [r3, #20]
	vmode->cpp = cpp;
1000338a:	82dd      	strh	r5, [r3, #22]
	wfull = (int)(freq*hfull/1000/cpp/div + 0.4f);
1000338c:	f7fd fa7a 	bl	10000884 <__wrap___aeabi_i2f>
	wmax = (int)(freq*hmax/1000/cpp/div + 0.4f);
10003390:	9907      	ldr	r1, [sp, #28]
	wfull = (int)(freq*hfull/1000/cpp/div + 0.4f);
10003392:	1c04      	adds	r4, r0, #0
	wmax = (int)(freq*hmax/1000/cpp/div + 0.4f);
10003394:	9803      	ldr	r0, [sp, #12]
10003396:	f7fd fa69 	bl	1000086c <__wrap___aeabi_fmul>
1000339a:	4961      	ldr	r1, [pc, #388]	; (10003520 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x390>)
1000339c:	f7fd fa63 	bl	10000866 <__wrap___aeabi_fdiv>
100033a0:	1c21      	adds	r1, r4, #0
100033a2:	f7fd fa60 	bl	10000866 <__wrap___aeabi_fdiv>
100033a6:	1c31      	adds	r1, r6, #0
100033a8:	f7fd fa5d 	bl	10000866 <__wrap___aeabi_fdiv>
100033ac:	495f      	ldr	r1, [pc, #380]	; (1000352c <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x39c>)
100033ae:	f7fd fa57 	bl	10000860 <__wrap___aeabi_fadd>
100033b2:	f7fd fa89 	bl	100008c8 <__wrap___aeabi_f2iz>
100033b6:	0007      	movs	r7, r0
	if (w > wmax) w = wmax;
100033b8:	9806      	ldr	r0, [sp, #24]
100033ba:	42b8      	cmp	r0, r7
100033bc:	dd00      	ble.n	100033c0 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x230>
100033be:	0038      	movs	r0, r7
	w = ALIGN4(w);
100033c0:	2303      	movs	r3, #3
100033c2:	4398      	bics	r0, r3
	vmode->width = w; // active width
100033c4:	465b      	mov	r3, fp
	wfull = (int)(freq*hfull/1000/cpp/div + 0.4f);
100033c6:	1c21      	adds	r1, r4, #0
	vmode->width = w; // active width
100033c8:	8018      	strh	r0, [r3, #0]
	w = ALIGN4(w);
100033ca:	4680      	mov	r8, r0
	wfull = (int)(freq*hfull/1000/cpp/div + 0.4f);
100033cc:	9805      	ldr	r0, [sp, #20]
100033ce:	f7fd fa4a 	bl	10000866 <__wrap___aeabi_fdiv>
100033d2:	1c31      	adds	r1, r6, #0
100033d4:	f7fd fa47 	bl	10000866 <__wrap___aeabi_fdiv>
100033d8:	4954      	ldr	r1, [pc, #336]	; (1000352c <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x39c>)
100033da:	f7fd fa41 	bl	10000860 <__wrap___aeabi_fadd>
100033de:	f7fd fa73 	bl	100008c8 <__wrap___aeabi_f2iz>
	vmode->wfull = wfull; // width of full screen (image should be full visible)
100033e2:	465b      	mov	r3, fp
100033e4:	8098      	strh	r0, [r3, #4]
	vmode->wmax = wmax; // maximal width (can be > wfull)
100033e6:	80df      	strh	r7, [r3, #6]
	int hwidth = w*cpp; // active width in state machine clocks
100033e8:	4643      	mov	r3, r8
100033ea:	435d      	muls	r5, r3
	int htot = (int)(freq*v->htot/1000/div + 0.5f);  // total state machine clocks per line
100033ec:	464b      	mov	r3, r9
100033ee:	9f03      	ldr	r7, [sp, #12]
100033f0:	6819      	ldr	r1, [r3, #0]
100033f2:	1c38      	adds	r0, r7, #0
100033f4:	f7fd fa3a 	bl	1000086c <__wrap___aeabi_fmul>
100033f8:	4949      	ldr	r1, [pc, #292]	; (10003520 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x390>)
100033fa:	f7fd fa34 	bl	10000866 <__wrap___aeabi_fdiv>
100033fe:	1c31      	adds	r1, r6, #0
10003400:	f7fd fa31 	bl	10000866 <__wrap___aeabi_fdiv>
10003404:	21fc      	movs	r1, #252	; 0xfc
10003406:	0589      	lsls	r1, r1, #22
10003408:	f7fd fa2a 	bl	10000860 <__wrap___aeabi_fadd>
1000340c:	f7fd fa5c 	bl	100008c8 <__wrap___aeabi_f2iz>
	int hsync = (int)(freq*v->hsync/1000/div + 0.5f); // H sync pulse in state machine clocks (min. 4)
10003410:	464b      	mov	r3, r9
	int htot = (int)(freq*v->htot/1000/div + 0.5f);  // total state machine clocks per line
10003412:	0004      	movs	r4, r0
	int hsync = (int)(freq*v->hsync/1000/div + 0.5f); // H sync pulse in state machine clocks (min. 4)
10003414:	6899      	ldr	r1, [r3, #8]
10003416:	1c38      	adds	r0, r7, #0
10003418:	f7fd fa28 	bl	1000086c <__wrap___aeabi_fmul>
1000341c:	4940      	ldr	r1, [pc, #256]	; (10003520 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x390>)
1000341e:	f7fd fa22 	bl	10000866 <__wrap___aeabi_fdiv>
10003422:	1c31      	adds	r1, r6, #0
10003424:	f7fd fa1f 	bl	10000866 <__wrap___aeabi_fdiv>
10003428:	21fc      	movs	r1, #252	; 0xfc
1000342a:	0589      	lsls	r1, r1, #22
1000342c:	f7fd fa18 	bl	10000860 <__wrap___aeabi_fadd>
10003430:	f7fd fa4a 	bl	100008c8 <__wrap___aeabi_f2iz>
10003434:	0007      	movs	r7, r0
	if (hsync < 4)
10003436:	2803      	cmp	r0, #3
10003438:	dc00      	bgt.n	1000343c <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x2ac>
1000343a:	e143      	b.n	100036c4 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x534>
	vmode->hsync = (u16)hsync; // H sync pulse in state machine clocks (min. 4)
1000343c:	b283      	uxth	r3, r0
1000343e:	9304      	str	r3, [sp, #16]
	int hfront = (int)(freq*v->hfront/1000/div + 0.5f); // H front porch in state machine clocks (min. 2)
10003440:	464b      	mov	r3, r9
10003442:	9803      	ldr	r0, [sp, #12]
10003444:	6859      	ldr	r1, [r3, #4]
10003446:	f7fd fa11 	bl	1000086c <__wrap___aeabi_fmul>
1000344a:	4935      	ldr	r1, [pc, #212]	; (10003520 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x390>)
1000344c:	f7fd fa0b 	bl	10000866 <__wrap___aeabi_fdiv>
10003450:	1c31      	adds	r1, r6, #0
10003452:	f7fd fa08 	bl	10000866 <__wrap___aeabi_fdiv>
10003456:	21fc      	movs	r1, #252	; 0xfc
10003458:	0589      	lsls	r1, r1, #22
1000345a:	f7fd fa01 	bl	10000860 <__wrap___aeabi_fadd>
1000345e:	f7fd fa33 	bl	100008c8 <__wrap___aeabi_f2iz>
	int hback = (int)(freq*v->hback/1000/div + 0.5f); // H back porch in state machine clocks (min. 13)
10003462:	464b      	mov	r3, r9
	int hfront = (int)(freq*v->hfront/1000/div + 0.5f); // H front porch in state machine clocks (min. 2)
10003464:	4680      	mov	r8, r0
	int hback = (int)(freq*v->hback/1000/div + 0.5f); // H back porch in state machine clocks (min. 13)
10003466:	68d9      	ldr	r1, [r3, #12]
10003468:	9803      	ldr	r0, [sp, #12]
1000346a:	f7fd f9ff 	bl	1000086c <__wrap___aeabi_fmul>
1000346e:	492c      	ldr	r1, [pc, #176]	; (10003520 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x390>)
10003470:	f7fd f9f9 	bl	10000866 <__wrap___aeabi_fdiv>
10003474:	1c31      	adds	r1, r6, #0
10003476:	f7fd f9f6 	bl	10000866 <__wrap___aeabi_fdiv>
1000347a:	21fc      	movs	r1, #252	; 0xfc
1000347c:	0589      	lsls	r1, r1, #22
1000347e:	f7fd f9ef 	bl	10000860 <__wrap___aeabi_fadd>
10003482:	f7fd fa21 	bl	100008c8 <__wrap___aeabi_f2iz>
	int d = htot - hfront - hsync - hback - hwidth; // difference
10003486:	4643      	mov	r3, r8
10003488:	1ae2      	subs	r2, r4, r3
1000348a:	1bd2      	subs	r2, r2, r7
1000348c:	1a12      	subs	r2, r2, r0
1000348e:	1b52      	subs	r2, r2, r5
	hfront += d/2;
10003490:	0fd3      	lsrs	r3, r2, #31
10003492:	189b      	adds	r3, r3, r2
10003494:	1059      	asrs	r1, r3, #1
10003496:	4441      	add	r1, r8
	hback += (d < 0) ? (d-1)/2 : (d+1)/2;
10003498:	2a00      	cmp	r2, #0
1000349a:	da00      	bge.n	1000349e <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x30e>
1000349c:	e161      	b.n	10003762 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x5d2>
1000349e:	3201      	adds	r2, #1
100034a0:	1053      	asrs	r3, r2, #1
100034a2:	181b      	adds	r3, r3, r0
	if (hfront < 4)
100034a4:	2903      	cmp	r1, #3
100034a6:	dc02      	bgt.n	100034ae <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x31e>
		hback -= 4 - hfront;
100034a8:	18cb      	adds	r3, r1, r3
		hfront = 4;
100034aa:	2104      	movs	r1, #4
		hback -= 4 - hfront;
100034ac:	3b04      	subs	r3, #4
	if (hback < 13)
100034ae:	2b0c      	cmp	r3, #12
100034b0:	dc00      	bgt.n	100034b4 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x324>
100034b2:	e100      	b.n	100036b6 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x526>
	vmode->hback = (u16)hback; // H back porch in state machine clocks (min. 13)
100034b4:	b29a      	uxth	r2, r3
	htot = hfront + hsync + hback + hwidth; // total state machine clocks per line
100034b6:	187f      	adds	r7, r7, r1
100034b8:	18fb      	adds	r3, r7, r3
	if (v->inter && ((htot & 1) != 0))
100034ba:	4648      	mov	r0, r9
	htot = hfront + hsync + hback + hwidth; // total state machine clocks per line
100034bc:	195d      	adds	r5, r3, r5
	if (v->inter && ((htot & 1) != 0))
100034be:	2334      	movs	r3, #52	; 0x34
100034c0:	5cc0      	ldrb	r0, [r0, r3]
100034c2:	2800      	cmp	r0, #0
100034c4:	d002      	beq.n	100034cc <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x33c>
100034c6:	07eb      	lsls	r3, r5, #31
100034c8:	d500      	bpl.n	100034cc <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x33c>
100034ca:	e119      	b.n	10003700 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x570>
	vmode->htot = (u16)htot; // total state machine clocks per line
100034cc:	465b      	mov	r3, fp
	vmode->hfront = (u16)hfront; // H front porch in state machine clocks (min. 2)
100034ce:	8419      	strh	r1, [r3, #32]
	vmode->hback = (u16)hback; // H back porch in state machine clocks (min. 13)
100034d0:	849a      	strh	r2, [r3, #36]	; 0x24
	vmode->hsync = (u16)hsync; // H sync pulse in state machine clocks (min. 4)
100034d2:	9904      	ldr	r1, [sp, #16]
	if (cfg->dbly) h *= 2; // use double lines
100034d4:	4652      	mov	r2, sl
	vmode->htot = (u16)htot; // total state machine clocks per line
100034d6:	83dd      	strh	r5, [r3, #30]
	vmode->hsync = (u16)hsync; // H sync pulse in state machine clocks (min. 4)
100034d8:	8459      	strh	r1, [r3, #34]	; 0x22
	int h = cfg->height; // required height
100034da:	4653      	mov	r3, sl
	if (cfg->dbly) h *= 2; // use double lines
100034dc:	7e14      	ldrb	r4, [r2, #24]
	int h = cfg->height; // required height
100034de:	885b      	ldrh	r3, [r3, #2]
	if (cfg->dbly) h *= 2; // use double lines
100034e0:	2c00      	cmp	r4, #0
100034e2:	d025      	beq.n	10003530 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x3a0>
	vmode->vmax = v->vmax; // maximal height
100034e4:	464a      	mov	r2, r9
100034e6:	8ad1      	ldrh	r1, [r2, #22]
100034e8:	465a      	mov	r2, fp
	if (cfg->dbly) h *= 2; // use double lines
100034ea:	005b      	lsls	r3, r3, #1
	vmode->vmax = v->vmax; // maximal height
100034ec:	85d1      	strh	r1, [r2, #46]	; 0x2e
	if (h > v->vmax) h = v->vmax; // limit height
100034ee:	4299      	cmp	r1, r3
100034f0:	dd00      	ble.n	100034f4 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x364>
100034f2:	e0fe      	b.n	100036f2 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x562>
	if (cfg->dbly) h &= ~1; // must be even number if double lines
100034f4:	2301      	movs	r3, #1
100034f6:	4399      	bics	r1, r3
	if (v->inter) // interlaced
100034f8:	2800      	cmp	r0, #0
100034fa:	d100      	bne.n	100034fe <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x36e>
100034fc:	e0f0      	b.n	100036e0 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x550>
		if (v->odd) // first frame is odd lines
100034fe:	2336      	movs	r3, #54	; 0x36
10003500:	464a      	mov	r2, r9
10003502:	5cd3      	ldrb	r3, [r2, r3]
10003504:	2b00      	cmp	r3, #0
10003506:	d100      	bne.n	1000350a <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x37a>
10003508:	e0ee      	b.n	100036e8 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x558>
			vact1 = h/2;
1000350a:	104a      	asrs	r2, r1, #1
			vact2 = (h+1)/2; // if even lines, even frame will have more lines
1000350c:	0016      	movs	r6, r2
1000350e:	1c4b      	adds	r3, r1, #1
10003510:	105b      	asrs	r3, r3, #1
	vmode->vact2 = vact2; // active scanlines of 2nd subframe
10003512:	b298      	uxth	r0, r3
	if (cfg->dbly) h /= 2; // return double lines to single lines
10003514:	2c00      	cmp	r4, #0
10003516:	d016      	beq.n	10003546 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x3b6>
	vmode->vact2 = vact2; // active scanlines of 2nd subframe
10003518:	0031      	movs	r1, r6
	if (cfg->dbly) h /= 2; // return double lines to single lines
1000351a:	e014      	b.n	10003546 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x3b6>
1000351c:	10004cf0 	.word	0x10004cf0
10003520:	447a0000 	.word	0x447a0000
10003524:	3dcccccd 	.word	0x3dcccccd
10003528:	3e4ccccd 	.word	0x3e4ccccd
1000352c:	3ecccccd 	.word	0x3ecccccd
	vmode->vmax = v->vmax; // maximal height
10003530:	464a      	mov	r2, r9
10003532:	8ad1      	ldrh	r1, [r2, #22]
10003534:	465a      	mov	r2, fp
10003536:	85d1      	strh	r1, [r2, #46]	; 0x2e
	if (h > v->vmax) h = v->vmax; // limit height
10003538:	4299      	cmp	r1, r3
1000353a:	dd00      	ble.n	1000353e <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x3ae>
1000353c:	e0cb      	b.n	100036d6 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x546>
	if (v->inter) // interlaced
1000353e:	2800      	cmp	r0, #0
10003540:	d1dd      	bne.n	100034fe <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x36e>
10003542:	000a      	movs	r2, r1
	int vact2 = 0;
10003544:	2300      	movs	r3, #0
	vmode->height = h;
10003546:	465c      	mov	r4, fp
10003548:	8061      	strh	r1, [r4, #2]
	vmode->vtot = v->vtot; // total scanlines
1000354a:	4649      	mov	r1, r9
1000354c:	8a8e      	ldrh	r6, [r1, #20]
	vmode->vact1 = vact1; // active scanlines of 1st subframe
1000354e:	b291      	uxth	r1, r2
10003550:	8761      	strh	r1, [r4, #58]	; 0x3a
10003552:	9105      	str	r1, [sp, #20]
	int dh = vact1 - v->vact1; // difference
10003554:	4649      	mov	r1, r9
	vmode->vtot = v->vtot; // total scanlines
10003556:	85a6      	strh	r6, [r4, #44]	; 0x2c
	int dh = vact1 - v->vact1; // difference
10003558:	8bc9      	ldrh	r1, [r1, #30]
1000355a:	1a52      	subs	r2, r2, r1
	vmode->vsync1 = v->vsync1; // V sync (half-)pulses on subframe 1
1000355c:	4649      	mov	r1, r9
1000355e:	8b09      	ldrh	r1, [r1, #24]
10003560:	86a1      	strh	r1, [r4, #52]	; 0x34
10003562:	9104      	str	r1, [sp, #16]
	vmode->vpost1 = v->vpost1; // V sync post (half-)pulses on subframe 1
10003564:	4649      	mov	r1, r9
10003566:	8b49      	ldrh	r1, [r1, #26]
10003568:	86e1      	strh	r1, [r4, #54]	; 0x36
	vmode->vback1 = v->vback1 - dh/2; // V back porch (after VSYNC, before image) on subframe 1
1000356a:	464c      	mov	r4, r9
	vmode->vpost1 = v->vpost1; // V sync post (half-)pulses on subframe 1
1000356c:	9106      	str	r1, [sp, #24]
	vmode->vback1 = v->vback1 - dh/2; // V back porch (after VSYNC, before image) on subframe 1
1000356e:	0fd1      	lsrs	r1, r2, #31
10003570:	8ba4      	ldrh	r4, [r4, #28]
10003572:	1889      	adds	r1, r1, r2
10003574:	1049      	asrs	r1, r1, #1
10003576:	1a61      	subs	r1, r4, r1
10003578:	b28f      	uxth	r7, r1
1000357a:	4659      	mov	r1, fp
1000357c:	870f      	strh	r7, [r1, #56]	; 0x38
	vmode->vfront1 = v->vfront1 - ((dh < 0) ? (dh-1)/2 : (dh+1)/2); // V front porch (after image, before VSYNC) on subframe 1
1000357e:	4649      	mov	r1, r9
10003580:	8c09      	ldrh	r1, [r1, #32]
10003582:	2a00      	cmp	r2, #0
10003584:	da00      	bge.n	10003588 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x3f8>
10003586:	e0e6      	b.n	10003756 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x5c6>
10003588:	3201      	adds	r2, #1
1000358a:	1052      	asrs	r2, r2, #1
1000358c:	b292      	uxth	r2, r2
1000358e:	1a8a      	subs	r2, r1, r2
10003590:	4659      	mov	r1, fp
10003592:	b292      	uxth	r2, r2
10003594:	878a      	strh	r2, [r1, #60]	; 0x3c
10003596:	9207      	str	r2, [sp, #28]
	vmode->vpre1 = v->vpre1; // V sync pre (half-)pulses on subframe 1
10003598:	464a      	mov	r2, r9
1000359a:	8c52      	ldrh	r2, [r2, #34]	; 0x22
1000359c:	87ca      	strh	r2, [r1, #62]	; 0x3e
1000359e:	9209      	str	r2, [sp, #36]	; 0x24
	vmode->vact2 = vact2; // active scanlines of 2nd subframe
100035a0:	2248      	movs	r2, #72	; 0x48
100035a2:	5288      	strh	r0, [r1, r2]
	dh = vact2 - v->vact2; // difference
100035a4:	464a      	mov	r2, r9
100035a6:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
	vmode->vsync2 = v->vsync2; // V sync half-pulses on subframe 2
100035a8:	4658      	mov	r0, fp
	dh = vact2 - v->vact2; // difference
100035aa:	1a9b      	subs	r3, r3, r2
	vmode->vsync2 = v->vsync2; // V sync half-pulses on subframe 2
100035ac:	464a      	mov	r2, r9
100035ae:	8c92      	ldrh	r2, [r2, #36]	; 0x24
100035b0:	920a      	str	r2, [sp, #40]	; 0x28
100035b2:	0011      	movs	r1, r2
100035b4:	2242      	movs	r2, #66	; 0x42
100035b6:	5281      	strh	r1, [r0, r2]
	vmode->vpost2 = v->vpost2; // V sync post half-pulses on subframe 2
100035b8:	464a      	mov	r2, r9
100035ba:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
100035bc:	0011      	movs	r1, r2
100035be:	920b      	str	r2, [sp, #44]	; 0x2c
100035c0:	2244      	movs	r2, #68	; 0x44
100035c2:	5281      	strh	r1, [r0, r2]
	vmode->vback2 = v->vback2 - dh/2; // V back porch (after VSYNC, before image) on subframe 2
100035c4:	4649      	mov	r1, r9
100035c6:	0fda      	lsrs	r2, r3, #31
100035c8:	8d0c      	ldrh	r4, [r1, #40]	; 0x28
100035ca:	18d2      	adds	r2, r2, r3
100035cc:	1052      	asrs	r2, r2, #1
100035ce:	1aa4      	subs	r4, r4, r2
100035d0:	2246      	movs	r2, #70	; 0x46
100035d2:	b2a4      	uxth	r4, r4
100035d4:	5284      	strh	r4, [r0, r2]
	vmode->vfront2 = v->vfront2 - ((dh < 0) ? (dh-1)/2 : (dh+1)/2); // V front porch (after image, before VSYNC) on subframe 2
100035d6:	8d8a      	ldrh	r2, [r1, #44]	; 0x2c
100035d8:	2b00      	cmp	r3, #0
100035da:	da00      	bge.n	100035de <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x44e>
100035dc:	e0b5      	b.n	1000374a <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x5ba>
100035de:	3301      	adds	r3, #1
100035e0:	105b      	asrs	r3, r3, #1
100035e2:	b29b      	uxth	r3, r3
100035e4:	4659      	mov	r1, fp
100035e6:	1ad3      	subs	r3, r2, r3
100035e8:	224a      	movs	r2, #74	; 0x4a
100035ea:	528b      	strh	r3, [r1, r2]
	vmode->vpre2 = v->vpre2; // V sync pre half-pulses on subframe 2
100035ec:	464b      	mov	r3, r9
100035ee:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
100035f0:	234c      	movs	r3, #76	; 0x4c
	vmode->hfreq = vmode->freq * 1000.0f / vmode->div / vmode->htot;
100035f2:	9803      	ldr	r0, [sp, #12]
	vmode->vpre2 = v->vpre2; // V sync pre half-pulses on subframe 2
100035f4:	52ca      	strh	r2, [r1, r3]
	vmode->hfreq = vmode->freq * 1000.0f / vmode->div / vmode->htot;
100035f6:	4960      	ldr	r1, [pc, #384]	; (10003778 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x5e8>)
100035f8:	f7fd f938 	bl	1000086c <__wrap___aeabi_fmul>
100035fc:	9908      	ldr	r1, [sp, #32]
100035fe:	f7fd f932 	bl	10000866 <__wrap___aeabi_fdiv>
10003602:	042d      	lsls	r5, r5, #16
10003604:	4680      	mov	r8, r0
10003606:	0c28      	lsrs	r0, r5, #16
10003608:	f7fd f93c 	bl	10000884 <__wrap___aeabi_i2f>
1000360c:	1c01      	adds	r1, r0, #0
1000360e:	4640      	mov	r0, r8
10003610:	f7fd f929 	bl	10000866 <__wrap___aeabi_fdiv>
10003614:	465b      	mov	r3, fp
10003616:	1c05      	adds	r5, r0, #0
10003618:	6298      	str	r0, [r3, #40]	; 0x28
	vmode->vfreq = vmode->hfreq / vmode->vtot;
1000361a:	0030      	movs	r0, r6
1000361c:	f7fd f932 	bl	10000884 <__wrap___aeabi_i2f>
10003620:	1c01      	adds	r1, r0, #0
10003622:	1c28      	adds	r0, r5, #0
10003624:	f7fd f91f 	bl	10000866 <__wrap___aeabi_fdiv>

	// name
	vmode->name = v->name;	// video timing name
10003628:	464a      	mov	r2, r9
	vmode->vfreq = vmode->hfreq / vmode->vtot;
1000362a:	465b      	mov	r3, fp
	vmode->name = v->name;	// video timing name
1000362c:	6b12      	ldr	r2, [r2, #48]	; 0x30
	vmode->vfreq = vmode->hfreq / vmode->vtot;
1000362e:	6318      	str	r0, [r3, #48]	; 0x30
	vmode->name = v->name;	// video timing name
10003630:	651a      	str	r2, [r3, #80]	; 0x50

	// flags
	vmode->lockfreq = cfg->lockfreq; // lock current frequency, do not change it
10003632:	4653      	mov	r3, sl
10003634:	4659      	mov	r1, fp
10003636:	7e5a      	ldrb	r2, [r3, #25]
10003638:	2354      	movs	r3, #84	; 0x54
1000363a:	54ca      	strb	r2, [r1, r3]
	vmode->dbly = cfg->dbly; // double scanlines
1000363c:	4653      	mov	r3, sl
1000363e:	7e1a      	ldrb	r2, [r3, #24]
10003640:	2355      	movs	r3, #85	; 0x55
10003642:	54ca      	strb	r2, [r1, r3]
	vmode->inter = v->inter; // interlaced (use sub-frames)
10003644:	464a      	mov	r2, r9
10003646:	3b21      	subs	r3, #33	; 0x21
10003648:	5cd1      	ldrb	r1, [r2, r3]
1000364a:	4658      	mov	r0, fp
1000364c:	2256      	movs	r2, #86	; 0x56
1000364e:	5481      	strb	r1, [r0, r2]
	vmode->psync = v->psync; // positive synchronization
10003650:	4649      	mov	r1, r9
10003652:	3a21      	subs	r2, #33	; 0x21
10003654:	5c89      	ldrb	r1, [r1, r2]
10003656:	3222      	adds	r2, #34	; 0x22
10003658:	5481      	strb	r1, [r0, r2]
	vmode->odd = v->odd; // first sub-frame is odd lines 1, 3, 5,... (PAL)
1000365a:	4649      	mov	r1, r9
1000365c:	3a21      	subs	r2, #33	; 0x21
1000365e:	5c89      	ldrb	r1, [r1, r2]
10003660:	3222      	adds	r2, #34	; 0x22
10003662:	5481      	strb	r1, [r0, r2]

	// first active scanline
	if (v->inter)
10003664:	464a      	mov	r2, r9
10003666:	5cd3      	ldrb	r3, [r2, r3]
10003668:	2b00      	cmp	r3, #0
1000366a:	d068      	beq.n	1000373e <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x5ae>
	{
		// interlaced
		vmode->vfirst1 = (vmode->vsync1 + vmode->vpost1)/2 + vmode->vback1 + 1; 
1000366c:	9a06      	ldr	r2, [sp, #24]
		vmode->vfirst2 = vmode->vfirst1 + vmode->vact1 + vmode->vfront1 + 
			(vmode->vpre1 + vmode->vsync2 + vmode->vpost2)/2 + vmode->vback2;
1000366e:	990a      	ldr	r1, [sp, #40]	; 0x28
		vmode->vfirst1 = (vmode->vsync1 + vmode->vpost1)/2 + vmode->vback1 + 1; 
10003670:	4694      	mov	ip, r2
10003672:	9b04      	ldr	r3, [sp, #16]
			(vmode->vpre1 + vmode->vsync2 + vmode->vpost2)/2 + vmode->vback2;
10003674:	9a09      	ldr	r2, [sp, #36]	; 0x24
		vmode->vfirst1 = (vmode->vsync1 + vmode->vpost1)/2 + vmode->vback1 + 1; 
10003676:	4463      	add	r3, ip
			(vmode->vpre1 + vmode->vsync2 + vmode->vpost2)/2 + vmode->vback2;
10003678:	468c      	mov	ip, r1
1000367a:	990b      	ldr	r1, [sp, #44]	; 0x2c
1000367c:	4462      	add	r2, ip
1000367e:	468c      	mov	ip, r1
10003680:	9905      	ldr	r1, [sp, #20]
10003682:	4462      	add	r2, ip
10003684:	468c      	mov	ip, r1
10003686:	9907      	ldr	r1, [sp, #28]
10003688:	1052      	asrs	r2, r2, #1
1000368a:	4462      	add	r2, ip
1000368c:	468c      	mov	ip, r1
		vmode->vfirst1 = (vmode->vsync1 + vmode->vpost1)/2 + vmode->vback1 + 1; 
1000368e:	105b      	asrs	r3, r3, #1
10003690:	3301      	adds	r3, #1
10003692:	18fb      	adds	r3, r7, r3
10003694:	b29b      	uxth	r3, r3
			(vmode->vpre1 + vmode->vsync2 + vmode->vpost2)/2 + vmode->vback2;
10003696:	18a2      	adds	r2, r4, r2
10003698:	189a      	adds	r2, r3, r2
1000369a:	4462      	add	r2, ip
1000369c:	b292      	uxth	r2, r2
1000369e:	4658      	mov	r0, fp
100036a0:	214e      	movs	r1, #78	; 0x4e
100036a2:	5242      	strh	r2, [r0, r1]
100036a4:	2240      	movs	r2, #64	; 0x40
100036a6:	5283      	strh	r3, [r0, r2]
	{
		// progressive
		vmode->vfirst1 = vmode->vsync1 + vmode->vback1 + 1;
		vmode->vfirst2 = 0;
	}
}
100036a8:	b011      	add	sp, #68	; 0x44
100036aa:	bcf0      	pop	{r4, r5, r6, r7}
100036ac:	46bb      	mov	fp, r7
100036ae:	46b2      	mov	sl, r6
100036b0:	46a9      	mov	r9, r5
100036b2:	46a0      	mov	r8, r4
100036b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		hfront -= 13 - hback;
100036b6:	18c9      	adds	r1, r1, r3
100036b8:	390d      	subs	r1, #13
100036ba:	2902      	cmp	r1, #2
100036bc:	db3b      	blt.n	10003736 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x5a6>
100036be:	220d      	movs	r2, #13
		hback = 13;
100036c0:	230d      	movs	r3, #13
100036c2:	e6f8      	b.n	100034b6 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x326>
		htot -= 4 - hsync;
100036c4:	2304      	movs	r3, #4
100036c6:	1824      	adds	r4, r4, r0
		hsync = 4;
100036c8:	2704      	movs	r7, #4
		htot -= 4 - hsync;
100036ca:	3c04      	subs	r4, #4
		hsync = 4;
100036cc:	9304      	str	r3, [sp, #16]
100036ce:	e6b7      	b.n	10003440 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x2b0>
	u8 prog = LAYERMODE_BASE;
100036d0:	2100      	movs	r1, #0
100036d2:	4b2a      	ldr	r3, [pc, #168]	; (1000377c <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x5ec>)
100036d4:	e56f      	b.n	100031b6 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x26>
100036d6:	0019      	movs	r1, r3
	if (v->inter) // interlaced
100036d8:	2800      	cmp	r0, #0
100036da:	d000      	beq.n	100036de <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x54e>
100036dc:	e70f      	b.n	100034fe <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x36e>
100036de:	e730      	b.n	10003542 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x3b2>
	if (cfg->dbly) h &= ~1; // must be even number if double lines
100036e0:	000a      	movs	r2, r1
	int vact2 = 0;
100036e2:	2300      	movs	r3, #0
	if (cfg->dbly) h /= 2; // return double lines to single lines
100036e4:	0849      	lsrs	r1, r1, #1
100036e6:	e72e      	b.n	10003546 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x3b6>
			vact1 = (h+1)/2; // if even lines, even frame will have more lines
100036e8:	1c4a      	adds	r2, r1, #1
			vact2 = h/2;
100036ea:	104b      	asrs	r3, r1, #1
100036ec:	001e      	movs	r6, r3
			vact1 = (h+1)/2; // if even lines, even frame will have more lines
100036ee:	1052      	asrs	r2, r2, #1
			vact2 = h/2;
100036f0:	e70f      	b.n	10003512 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x382>
100036f2:	0019      	movs	r1, r3
	if (cfg->dbly) h &= ~1; // must be even number if double lines
100036f4:	2301      	movs	r3, #1
100036f6:	4399      	bics	r1, r3
	if (v->inter) // interlaced
100036f8:	2800      	cmp	r0, #0
100036fa:	d000      	beq.n	100036fe <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x56e>
100036fc:	e6ff      	b.n	100034fe <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x36e>
100036fe:	e7ef      	b.n	100036e0 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x550>
		htot--;
10003700:	3d01      	subs	r5, #1
		hfront++;
10003702:	3101      	adds	r1, #1
10003704:	e6e2      	b.n	100034cc <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x33c>
			freq2 = (int)(cpp*wfull*1000/hfull + 0.5f) + 200;
10003706:	19f6      	adds	r6, r6, r7
10003708:	0170      	lsls	r0, r6, #5
1000370a:	1b80      	subs	r0, r0, r6
1000370c:	0080      	lsls	r0, r0, #2
1000370e:	1980      	adds	r0, r0, r6
10003710:	00c0      	lsls	r0, r0, #3
10003712:	f7fd f8b7 	bl	10000884 <__wrap___aeabi_i2f>
10003716:	4641      	mov	r1, r8
10003718:	f7fd f8a5 	bl	10000866 <__wrap___aeabi_fdiv>
1000371c:	21fc      	movs	r1, #252	; 0xfc
1000371e:	0589      	lsls	r1, r1, #22
10003720:	f7fd f89e 	bl	10000860 <__wrap___aeabi_fadd>
10003724:	f7fd f8d0 	bl	100008c8 <__wrap___aeabi_f2iz>
10003728:	30c8      	adds	r0, #200	; 0xc8
		if (freq2 >= freq) freq = freq2;
1000372a:	4285      	cmp	r5, r0
1000372c:	d900      	bls.n	10003730 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x5a0>
1000372e:	e5d6      	b.n	100032de <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x14e>
10003730:	e5d3      	b.n	100032da <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x14a>
		int freq2 = (int)(cpp*wfull*1000/hfull + 0.5f) + 200;
10003732:	0006      	movs	r6, r0
10003734:	e5bc      	b.n	100032b0 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x120>
10003736:	2102      	movs	r1, #2
10003738:	220d      	movs	r2, #13
		hback = 13;
1000373a:	230d      	movs	r3, #13
1000373c:	e6bb      	b.n	100034b6 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x326>
		vmode->vfirst1 = vmode->vsync1 + vmode->vback1 + 1;
1000373e:	9b04      	ldr	r3, [sp, #16]
		vmode->vfirst2 = 0;
10003740:	2200      	movs	r2, #0
		vmode->vfirst1 = vmode->vsync1 + vmode->vback1 + 1;
10003742:	3301      	adds	r3, #1
10003744:	18fb      	adds	r3, r7, r3
10003746:	b29b      	uxth	r3, r3
		vmode->vfirst2 = 0;
10003748:	e7a9      	b.n	1000369e <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x50e>
	vmode->vfront2 = v->vfront2 - ((dh < 0) ? (dh-1)/2 : (dh+1)/2); // V front porch (after image, before VSYNC) on subframe 2
1000374a:	1e59      	subs	r1, r3, #1
1000374c:	0fcb      	lsrs	r3, r1, #31
1000374e:	185b      	adds	r3, r3, r1
10003750:	105b      	asrs	r3, r3, #1
10003752:	b29b      	uxth	r3, r3
10003754:	e746      	b.n	100035e4 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x454>
	vmode->vfront1 = v->vfront1 - ((dh < 0) ? (dh-1)/2 : (dh+1)/2); // V front porch (after image, before VSYNC) on subframe 1
10003756:	1e54      	subs	r4, r2, #1
10003758:	0fe2      	lsrs	r2, r4, #31
1000375a:	1912      	adds	r2, r2, r4
1000375c:	1052      	asrs	r2, r2, #1
1000375e:	b292      	uxth	r2, r2
10003760:	e715      	b.n	1000358e <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x3fe>
	hback += (d < 0) ? (d-1)/2 : (d+1)/2;
10003762:	3a01      	subs	r2, #1
10003764:	0fd3      	lsrs	r3, r2, #31
10003766:	189b      	adds	r3, r3, r2
10003768:	105b      	asrs	r3, r3, #1
1000376a:	e69a      	b.n	100034a2 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x312>
	while (cpp > maxcpp)
1000376c:	23fe      	movs	r3, #254	; 0xfe
1000376e:	059b      	lsls	r3, r3, #22
10003770:	2401      	movs	r4, #1
10003772:	9308      	str	r3, [sp, #32]
10003774:	1c1e      	adds	r6, r3, #0
10003776:	e605      	b.n	10003384 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x1f4>
10003778:	447a0000 	.word	0x447a0000
1000377c:	10004cf0 	.word	0x10004cf0

10003780 <_Z5VideohhhPhPKv>:
//	FORM_TEXT: pointer to font 8x16 or 8x8 (size 4 KB or 2 KB, ALIGNED attribute, should be in RAM)
//		- copy font to 4KB or 2 KB RAM buffer with ALIGNED attribute
//		- text uses color attributes PC_*
//	FORM_RLE: pointer to image rows (ALIGNED attribute, should be in RAM)
void Video(u8 dev, u8 res, u8 form, u8* buf, const void* buf2 /* = FontBoldB8x16 */)
{
10003780:	b5f0      	push	{r4, r5, r6, r7, lr}
10003782:	46d6      	mov	lr, sl
10003784:	464f      	mov	r7, r9
10003786:	4646      	mov	r6, r8
10003788:	b5c0      	push	{r6, r7, lr}
1000378a:	0016      	movs	r6, r2
1000378c:	b084      	sub	sp, #16
1000378e:	4681      	mov	r9, r0
10003790:	000d      	movs	r5, r1
10003792:	4698      	mov	r8, r3
	// stop VGA core
	multicore_reset_core1();
10003794:	f7fd fde6 	bl	10001364 <multicore_reset_core1>

	// run VGA core
	multicore_launch_core1(VgaCore);
10003798:	489b      	ldr	r0, [pc, #620]	; (10003a08 <_Z5VideohhhPhPKv+0x288>)
1000379a:	f7fd fdf5 	bl	10001388 <multicore_launch_core1>

	// prepare timings structure
	if (dev >= DEV_MAX) dev = DEV_VGA;
	if (res >= RES_MAX) res = RES_MAX-1;
	if (form >= FORM_MAX) form = FORM_MAX-1;
1000379e:	1c37      	adds	r7, r6, #0
100037a0:	2e0e      	cmp	r6, #14
100037a2:	d900      	bls.n	100037a6 <_Z5VideohhhPhPKv+0x26>
100037a4:	270e      	movs	r7, #14
100037a6:	b2ff      	uxtb	r7, r7
	const sVideo* v = VideoResTab[dev*RES_MAX + res];
100037a8:	1c2c      	adds	r4, r5, #0
100037aa:	2d07      	cmp	r5, #7
100037ac:	d900      	bls.n	100037b0 <_Z5VideohhhPhPKv+0x30>
100037ae:	2407      	movs	r4, #7
100037b0:	464b      	mov	r3, r9
100037b2:	464d      	mov	r5, r9
100037b4:	b2e4      	uxtb	r4, r4
100037b6:	2b02      	cmp	r3, #2
100037b8:	d900      	bls.n	100037bc <_Z5VideohhhPhPKv+0x3c>
100037ba:	2502      	movs	r5, #2
100037bc:	b2ed      	uxtb	r5, r5

	// required resolution
	u16 w = VideoResReq[res*2];
100037be:	00a1      	lsls	r1, r4, #2
	const sVideo* v = VideoResTab[dev*RES_MAX + res];
100037c0:	00ed      	lsls	r5, r5, #3
100037c2:	192d      	adds	r5, r5, r4
	u16 h = VideoResReq[res*2+1];
100037c4:	000c      	movs	r4, r1
	const sVideo* v = VideoResTab[dev*RES_MAX + res];
100037c6:	4b91      	ldr	r3, [pc, #580]	; (10003a0c <_Z5VideohhhPhPKv+0x28c>)
100037c8:	00ad      	lsls	r5, r5, #2
	u16 w = VideoResReq[res*2];
100037ca:	4a91      	ldr	r2, [pc, #580]	; (10003a10 <_Z5VideohhhPhPKv+0x290>)
	const sVideo* v = VideoResTab[dev*RES_MAX + res];
100037cc:	58eb      	ldr	r3, [r5, r3]
	u16 h = VideoResReq[res*2+1];
100037ce:	3402      	adds	r4, #2
	u16 w = VideoResReq[res*2];
100037d0:	5a8d      	ldrh	r5, [r1, r2]
	u16 h = VideoResReq[res*2+1];
100037d2:	5aa0      	ldrh	r0, [r4, r2]
	if (h > v->vmax) h = v->vmax;
100037d4:	8ad9      	ldrh	r1, [r3, #22]
100037d6:	1c0a      	adds	r2, r1, #0
100037d8:	4281      	cmp	r1, r0
100037da:	d900      	bls.n	100037de <_Z5VideohhhPhPKv+0x5e>
100037dc:	1c02      	adds	r2, r0, #0
100037de:	b292      	uxth	r2, r2
100037e0:	4691      	mov	r9, r2

	if ((form == FORM_TEXT8) || (form == FORM_MTEXT8))
100037e2:	0032      	movs	r2, r6
100037e4:	21fd      	movs	r1, #253	; 0xfd
100037e6:	3a0a      	subs	r2, #10
100037e8:	420a      	tst	r2, r1
100037ea:	d104      	bne.n	100037f6 <_Z5VideohhhPhPKv+0x76>
	{
		w = w/8*8;
100037ec:	2207      	movs	r2, #7
		h = h/8*8;
100037ee:	4649      	mov	r1, r9
100037f0:	4391      	bics	r1, r2
100037f2:	4689      	mov	r9, r1
		w = w/8*8;
100037f4:	4395      	bics	r5, r2
	}

	if ((form == FORM_TEXT16) || (form == FORM_MTEXT16))
100037f6:	0032      	movs	r2, r6
100037f8:	21fd      	movs	r1, #253	; 0xfd
100037fa:	3a0b      	subs	r2, #11
100037fc:	420a      	tst	r2, r1
100037fe:	d105      	bne.n	1000380c <_Z5VideohhhPhPKv+0x8c>
	{
		w = w/8*8;
10003800:	2207      	movs	r2, #7
		h = h/16*16;
10003802:	4649      	mov	r1, r9
		w = w/8*8;
10003804:	4395      	bics	r5, r2
		h = h/16*16;
10003806:	3208      	adds	r2, #8
10003808:	4391      	bics	r1, r2
1000380a:	4689      	mov	r9, r1
	cfg->wfull = 0;			// width of full screen, corresponding to 'hfull' time (0=use 'width' parameter)
1000380c:	2200      	movs	r2, #0
1000380e:	4881      	ldr	r0, [pc, #516]	; (10003a14 <_Z5VideohhhPhPKv+0x294>)
	cfg->freq = 120000;		// required minimal system frequency in kHz (real frequency can be higher)
10003810:	4981      	ldr	r1, [pc, #516]	; (10003a18 <_Z5VideohhhPhPKv+0x298>)
	cfg->wfull = 0;			// width of full screen, corresponding to 'hfull' time (0=use 'width' parameter)
10003812:	8082      	strh	r2, [r0, #4]
	cfg->mode[0] = LAYERMODE_BASE;	// modes of overlapped layers 0..3 LAYERMODE_* (LAYERMODE_BASE = layer is off)
10003814:	6142      	str	r2, [r0, #20]
	cfg->lockfreq = False;		// lock required frequency, do not change it
10003816:	7642      	strb	r2, [r0, #25]
	}

	// setup videomode
	VgaCfgDef(&Cfg); // get default configuration
	Cfg.video = v; // video timings
	Cfg.width = w; // screen width
10003818:	464a      	mov	r2, r9
	cfg->freq = 120000;		// required minimal system frequency in kHz (real frequency can be higher)
1000381a:	60c1      	str	r1, [r0, #12]
	Cfg.width = w; // screen width
1000381c:	0412      	lsls	r2, r2, #16
	cfg->fmax = 270000;		// maximal system frequency in kHz (limit resolution if needed)
1000381e:	497f      	ldr	r1, [pc, #508]	; (10003a1c <_Z5VideohhhPhPKv+0x29c>)
	Cfg.width = w; // screen width
10003820:	432a      	orrs	r2, r5
	cfg->fmax = 270000;		// maximal system frequency in kHz (limit resolution if needed)
10003822:	6101      	str	r1, [r0, #16]
	Cfg.video = v; // video timings
10003824:	6083      	str	r3, [r0, #8]
	Cfg.width = w; // screen width
10003826:	6002      	str	r2, [r0, #0]
	Cfg.height = h; // screen height
	if (form == FORM_RLE) Cfg.mode[1] = LAYERMODE_RLE;
10003828:	2e0d      	cmp	r6, #13
1000382a:	d901      	bls.n	10003830 <_Z5VideohhhPhPKv+0xb0>
1000382c:	2206      	movs	r2, #6
1000382e:	7542      	strb	r2, [r0, #21]
	Cfg.dbly = h <= v->vmax/2; // double scanlines
10003830:	8ada      	ldrh	r2, [r3, #22]
10003832:	4649      	mov	r1, r9
10003834:	2300      	movs	r3, #0
10003836:	0852      	lsrs	r2, r2, #1
10003838:	428a      	cmp	r2, r1
1000383a:	415b      	adcs	r3, r3
	VgaCfg(&Cfg, &Vmode); // calculate videomode setup
1000383c:	4c78      	ldr	r4, [pc, #480]	; (10003a20 <_Z5VideohhhPhPKv+0x2a0>)
	Cfg.dbly = h <= v->vmax/2; // double scanlines
1000383e:	7603      	strb	r3, [r0, #24]
	VgaCfg(&Cfg, &Vmode); // calculate videomode setup
10003840:	0021      	movs	r1, r4
10003842:	f7ff fca5 	bl	10003190 <_Z6VgaCfgPK7sVgaCfgP6sVmode>

	// initialize base layer 0
	ScreenClear(pScreen);
10003846:	4e77      	ldr	r6, [pc, #476]	; (10003a24 <_Z5VideohhhPhPKv+0x2a4>)
10003848:	6830      	ldr	r0, [r6, #0]
1000384a:	f7ff fbc9 	bl	10002fe0 <_Z11ScreenClearP7sScreen>
	sStrip* t = ScreenAddStrip(pScreen, h);
1000384e:	4649      	mov	r1, r9
10003850:	6830      	ldr	r0, [r6, #0]
10003852:	f7ff fbcd 	bl	10002ff0 <_Z14ScreenAddStripP7sScreeni>
	sSegm* g = ScreenAddSegm(t, w);
10003856:	0029      	movs	r1, r5
10003858:	f7ff fbdc 	bl	10003014 <_Z13ScreenAddSegmP6sStripi>
1000385c:	0006      	movs	r6, r0
	switch (form)
1000385e:	2f0e      	cmp	r7, #14
10003860:	d900      	bls.n	10003864 <_Z5VideohhhPhPKv+0xe4>
10003862:	e0c2      	b.n	100039ea <_Z5VideohhhPhPKv+0x26a>
10003864:	4b70      	ldr	r3, [pc, #448]	; (10003a28 <_Z5VideohhhPhPKv+0x2a8>)
10003866:	00bf      	lsls	r7, r7, #2
10003868:	59db      	ldr	r3, [r3, r7]
1000386a:	469f      	mov	pc, r3
		PrintSetup(buf, w/8, h/16, w/8*2);
		PrintClear();
		break;

	case FORM_RLE:	// images with RLE compression (on overlapped layer 1)
		ScreenSegmColor(g, 0, 0);
1000386c:	2200      	movs	r2, #0
1000386e:	2100      	movs	r1, #0
10003870:	f7ff fbec 	bl	1000304c <_Z15ScreenSegmColorP5sSegmmm>
		LayerSetup(1, buf, &Vmode, w, h, 0, buf2);
10003874:	9b0c      	ldr	r3, [sp, #48]	; 0x30
10003876:	2001      	movs	r0, #1
10003878:	9302      	str	r3, [sp, #8]
1000387a:	2300      	movs	r3, #0
1000387c:	9301      	str	r3, [sp, #4]
1000387e:	464b      	mov	r3, r9
10003880:	0022      	movs	r2, r4
10003882:	9300      	str	r3, [sp, #0]
10003884:	4641      	mov	r1, r8
10003886:	002b      	movs	r3, r5
10003888:	f7ff fb26 	bl	10002ed8 <_Z10LayerSetuphPKhPK6sVmodetthPKv>
		LayerOn(1);
1000388c:	2001      	movs	r0, #1
1000388e:	f7ff fb13 	bl	10002eb8 <_Z7LayerOnh>
		break;
	}

	// initialize system clock
	set_sys_clock_pll(Vmode.vco*1000, Vmode.pd1, Vmode.pd2);
10003892:	68e3      	ldr	r3, [r4, #12]
10003894:	7ce2      	ldrb	r2, [r4, #19]
10003896:	0158      	lsls	r0, r3, #5
10003898:	1ac0      	subs	r0, r0, r3
1000389a:	0080      	lsls	r0, r0, #2
1000389c:	18c0      	adds	r0, r0, r3
1000389e:	7ca1      	ldrb	r1, [r4, #18]
100038a0:	00c0      	lsls	r0, r0, #3
100038a2:	f7fe fac9 	bl	10001e38 <set_sys_clock_pll>

	// initialize videomode
	VgaInitReq(&Vmode);
100038a6:	0020      	movs	r0, r4
100038a8:	f7ff faf2 	bl	10002e90 <_Z10VgaInitReqPK6sVmode>
}
100038ac:	b004      	add	sp, #16
100038ae:	bce0      	pop	{r5, r6, r7}
100038b0:	46ba      	mov	sl, r7
100038b2:	46b1      	mov	r9, r6
100038b4:	46a8      	mov	r8, r5
100038b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		GenPal16Trans(Pal16Trans, DefPal16); // generate palette translation table
100038b8:	4b5c      	ldr	r3, [pc, #368]	; (10003a2c <_Z5VideohhhPhPKv+0x2ac>)
100038ba:	495d      	ldr	r1, [pc, #372]	; (10003a30 <_Z5VideohhhPhPKv+0x2b0>)
100038bc:	469a      	mov	sl, r3
100038be:	0018      	movs	r0, r3
		ScreenSegmGraph4(g, buf, Pal16Trans, w/2);
100038c0:	086f      	lsrs	r7, r5, #1
		GenPal16Trans(Pal16Trans, DefPal16); // generate palette translation table
100038c2:	f7ff fbdb 	bl	1000307c <_Z13GenPal16TransPtPKh>
		ScreenSegmGraph4(g, buf, Pal16Trans, w/2);
100038c6:	003b      	movs	r3, r7
100038c8:	4652      	mov	r2, sl
100038ca:	4641      	mov	r1, r8
100038cc:	0030      	movs	r0, r6
100038ce:	f7ff fbe9 	bl	100030a4 <_Z16ScreenSegmGraph4P5sSegmPKvS2_i>
		Canvas.img = buf;
100038d2:	4642      	mov	r2, r8
100038d4:	4b57      	ldr	r3, [pc, #348]	; (10003a34 <_Z5VideohhhPhPKv+0x2b4>)
100038d6:	601a      	str	r2, [r3, #0]
		Canvas.h = h;
100038d8:	464a      	mov	r2, r9
100038da:	60da      	str	r2, [r3, #12]
		Canvas.format = CANVAS_4;
100038dc:	2201      	movs	r2, #1
		Canvas.w = w;
100038de:	609d      	str	r5, [r3, #8]
		Canvas.wb = w/2;
100038e0:	611f      	str	r7, [r3, #16]
		Canvas.format = CANVAS_4;
100038e2:	751a      	strb	r2, [r3, #20]
		break;
100038e4:	e7d5      	b.n	10003892 <_Z5VideohhhPhPKv+0x112>
		ScreenSegmGraph1(g, buf, COL_BLACK, COL_WHITE, w/8);
100038e6:	08ef      	lsrs	r7, r5, #3
100038e8:	23ff      	movs	r3, #255	; 0xff
100038ea:	2200      	movs	r2, #0
100038ec:	4641      	mov	r1, r8
100038ee:	9700      	str	r7, [sp, #0]
100038f0:	f7ff fbe8 	bl	100030c4 <_Z16ScreenSegmGraph1P5sSegmPKvhhi>
		Canvas.img = buf;
100038f4:	4642      	mov	r2, r8
100038f6:	4b4f      	ldr	r3, [pc, #316]	; (10003a34 <_Z5VideohhhPhPKv+0x2b4>)
100038f8:	601a      	str	r2, [r3, #0]
		Canvas.h = h;
100038fa:	464a      	mov	r2, r9
100038fc:	60da      	str	r2, [r3, #12]
		Canvas.format = CANVAS_1;
100038fe:	2203      	movs	r2, #3
		Canvas.w = w;
10003900:	609d      	str	r5, [r3, #8]
		Canvas.wb = w/8;
10003902:	611f      	str	r7, [r3, #16]
		Canvas.format = CANVAS_1;
10003904:	751a      	strb	r2, [r3, #20]
		break;
10003906:	e7c4      	b.n	10003892 <_Z5VideohhhPhPKv+0x112>
		ScreenSegmTile(g, buf, buf2, 8, 8, (w+7)/8);
10003908:	2308      	movs	r3, #8
1000390a:	3507      	adds	r5, #7
1000390c:	10ed      	asrs	r5, r5, #3
1000390e:	9501      	str	r5, [sp, #4]
		ScreenSegmTile(g, buf, buf2, 12, 12, (w+11)/12);
10003910:	4641      	mov	r1, r8
10003912:	0030      	movs	r0, r6
10003914:	9a0c      	ldr	r2, [sp, #48]	; 0x30
10003916:	9300      	str	r3, [sp, #0]
10003918:	f7ff fc14 	bl	10003144 <_Z14ScreenSegmTileP5sSegmPKvS2_iii>
		break;
1000391c:	e7b9      	b.n	10003892 <_Z5VideohhhPhPKv+0x112>
		ScreenSegmTile(g, buf, buf2, 12, 12, (w+11)/12);
1000391e:	0028      	movs	r0, r5
10003920:	210c      	movs	r1, #12
10003922:	300b      	adds	r0, #11
10003924:	f7fc fcfa 	bl	1000031c <__wrap___aeabi_idiv>
10003928:	230c      	movs	r3, #12
1000392a:	9001      	str	r0, [sp, #4]
1000392c:	e7f0      	b.n	10003910 <_Z5VideohhhPhPKv+0x190>
		ScreenSegmTile(g, buf, buf2, 16, 16, (w+15)/16);
1000392e:	350f      	adds	r5, #15
10003930:	112d      	asrs	r5, r5, #4
10003932:	2310      	movs	r3, #16
10003934:	9501      	str	r5, [sp, #4]
10003936:	e7eb      	b.n	10003910 <_Z5VideohhhPhPKv+0x190>
		ScreenSegmTile(g, buf, buf2, 24, 24, (w+23)/24);
10003938:	0028      	movs	r0, r5
1000393a:	2118      	movs	r1, #24
1000393c:	3017      	adds	r0, #23
1000393e:	f7fc fced 	bl	1000031c <__wrap___aeabi_idiv>
10003942:	2318      	movs	r3, #24
10003944:	9001      	str	r0, [sp, #4]
10003946:	e7e3      	b.n	10003910 <_Z5VideohhhPhPKv+0x190>
		ScreenSegmTile(g, buf, buf2, 32, 32, (w+31)/32);
10003948:	351f      	adds	r5, #31
1000394a:	116d      	asrs	r5, r5, #5
1000394c:	2320      	movs	r3, #32
1000394e:	9501      	str	r5, [sp, #4]
10003950:	e7de      	b.n	10003910 <_Z5VideohhhPhPKv+0x190>
		ScreenSegmTile(g, buf, buf2, 48, 48, (w+47)/48);
10003952:	0028      	movs	r0, r5
10003954:	2130      	movs	r1, #48	; 0x30
10003956:	302f      	adds	r0, #47	; 0x2f
10003958:	f7fc fce0 	bl	1000031c <__wrap___aeabi_idiv>
1000395c:	2330      	movs	r3, #48	; 0x30
1000395e:	9001      	str	r0, [sp, #4]
10003960:	e7d6      	b.n	10003910 <_Z5VideohhhPhPKv+0x190>
		ScreenSegmTile(g, buf, buf2, 64, 64, (w+63)/64);
10003962:	353f      	adds	r5, #63	; 0x3f
10003964:	11ad      	asrs	r5, r5, #6
10003966:	2340      	movs	r3, #64	; 0x40
10003968:	9501      	str	r5, [sp, #4]
1000396a:	e7d1      	b.n	10003910 <_Z5VideohhhPhPKv+0x190>
		ScreenSegmMText(g, buf, buf2, 8, COL_BLACK, COL_WHITE, w/8);
1000396c:	23ff      	movs	r3, #255	; 0xff
1000396e:	9301      	str	r3, [sp, #4]
10003970:	2300      	movs	r3, #0
10003972:	08ed      	lsrs	r5, r5, #3
10003974:	9300      	str	r3, [sp, #0]
10003976:	9502      	str	r5, [sp, #8]
10003978:	3308      	adds	r3, #8
		ScreenSegmMText(g, buf, buf2, 16, COL_BLACK, COL_WHITE, w/8);
1000397a:	4641      	mov	r1, r8
1000397c:	0030      	movs	r0, r6
1000397e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
10003980:	f7ff fbb4 	bl	100030ec <_Z15ScreenSegmMTextP5sSegmPKvS2_thhi>
		PrintSetup(buf, w/8, h/8, w/8);
10003984:	464b      	mov	r3, r9
10003986:	0029      	movs	r1, r5
10003988:	08da      	lsrs	r2, r3, #3
1000398a:	4640      	mov	r0, r8
1000398c:	002b      	movs	r3, r5
1000398e:	f000 fb77 	bl	10004080 <_Z10PrintSetupPhiii>
		PrintClear();
10003992:	f000 fb9f 	bl	100040d4 <_Z10PrintClearv>
		break;
10003996:	e77c      	b.n	10003892 <_Z5VideohhhPhPKv+0x112>
		ScreenSegmMText(g, buf, buf2, 16, COL_BLACK, COL_WHITE, w/8);
10003998:	23ff      	movs	r3, #255	; 0xff
1000399a:	9301      	str	r3, [sp, #4]
1000399c:	2300      	movs	r3, #0
1000399e:	08ed      	lsrs	r5, r5, #3
100039a0:	9300      	str	r3, [sp, #0]
100039a2:	9502      	str	r5, [sp, #8]
100039a4:	3310      	adds	r3, #16
100039a6:	e7e8      	b.n	1000397a <_Z5VideohhhPhPKv+0x1fa>
		ScreenSegmAText(g, buf, buf2, 8, DefPal16, w/8*2);
100039a8:	4b21      	ldr	r3, [pc, #132]	; (10003a30 <_Z5VideohhhPhPKv+0x2b0>)
100039aa:	08ed      	lsrs	r5, r5, #3
100039ac:	006f      	lsls	r7, r5, #1
100039ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
100039b0:	9300      	str	r3, [sp, #0]
100039b2:	4641      	mov	r1, r8
100039b4:	2308      	movs	r3, #8
100039b6:	9701      	str	r7, [sp, #4]
100039b8:	f7ff fbb0 	bl	1000311c <_Z15ScreenSegmATextP5sSegmPKvS2_tS2_i>
		PrintSetup(buf, w/8, h/8, w/8*2);
100039bc:	464b      	mov	r3, r9
100039be:	08da      	lsrs	r2, r3, #3
		PrintSetup(buf, w/8, h/16, w/8*2);
100039c0:	003b      	movs	r3, r7
100039c2:	0029      	movs	r1, r5
100039c4:	4640      	mov	r0, r8
100039c6:	f000 fb5b 	bl	10004080 <_Z10PrintSetupPhiii>
		PrintClear();
100039ca:	f000 fb83 	bl	100040d4 <_Z10PrintClearv>
		break;
100039ce:	e760      	b.n	10003892 <_Z5VideohhhPhPKv+0x112>
		ScreenSegmAText(g, buf, buf2, 16, DefPal16, w/8*2);
100039d0:	4b17      	ldr	r3, [pc, #92]	; (10003a30 <_Z5VideohhhPhPKv+0x2b0>)
100039d2:	08ed      	lsrs	r5, r5, #3
100039d4:	006f      	lsls	r7, r5, #1
100039d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
100039d8:	9300      	str	r3, [sp, #0]
100039da:	4641      	mov	r1, r8
100039dc:	2310      	movs	r3, #16
100039de:	9701      	str	r7, [sp, #4]
100039e0:	f7ff fb9c 	bl	1000311c <_Z15ScreenSegmATextP5sSegmPKvS2_tS2_i>
		PrintSetup(buf, w/8, h/16, w/8*2);
100039e4:	464b      	mov	r3, r9
100039e6:	091a      	lsrs	r2, r3, #4
100039e8:	e7ea      	b.n	100039c0 <_Z5VideohhhPhPKv+0x240>
		ScreenSegmGraph8(g, buf, w);
100039ea:	002a      	movs	r2, r5
100039ec:	4641      	mov	r1, r8
100039ee:	0030      	movs	r0, r6
100039f0:	f7ff fb36 	bl	10003060 <_Z16ScreenSegmGraph8P5sSegmPKvi>
		Canvas.img = buf;
100039f4:	4642      	mov	r2, r8
100039f6:	4b0f      	ldr	r3, [pc, #60]	; (10003a34 <_Z5VideohhhPhPKv+0x2b4>)
100039f8:	601a      	str	r2, [r3, #0]
		Canvas.h = h;
100039fa:	464a      	mov	r2, r9
100039fc:	60da      	str	r2, [r3, #12]
		Canvas.format = CANVAS_8;
100039fe:	2200      	movs	r2, #0
		Canvas.w = w;
10003a00:	609d      	str	r5, [r3, #8]
		Canvas.wb = w;
10003a02:	611d      	str	r5, [r3, #16]
		Canvas.format = CANVAS_8;
10003a04:	751a      	strb	r2, [r3, #20]
		break;
10003a06:	e744      	b.n	10003892 <_Z5VideohhhPhPKv+0x112>
10003a08:	10002e45 	.word	0x10002e45
10003a0c:	20002694 	.word	0x20002694
10003a10:	100051ac 	.word	0x100051ac
10003a14:	20035188 	.word	0x20035188
10003a18:	0001d4c0 	.word	0x0001d4c0
10003a1c:	00041eb0 	.word	0x00041eb0
10003a20:	200392c0 	.word	0x200392c0
10003a24:	20002690 	.word	0x20002690
10003a28:	10004f28 	.word	0x10004f28
10003a2c:	20037ec0 	.word	0x20037ec0
10003a30:	20002680 	.word	0x20002680
10003a34:	20035170 	.word	0x20035170

10003a38 <_Z9DrawPointP7sCanvasiih.part.0>:
	DrawRect(canvas, 0, 0, canvas->w, canvas->h, 0);
}

// Draw point
//  col with CANVAS_ATTRIB8 format: bit 0..3 = draw color, bit 4 = draw color is background color
void DrawPoint(sCanvas* canvas, int x, int y, u8 col)
10003a38:	b5f0      	push	{r4, r5, r6, r7, lr}
{
	// check coordinates
	if (((u32)x >= (u32)canvas->w) || ((u32)y >= (u32)canvas->h)) return;

	// check format
	switch(canvas->format)
10003a3a:	7d04      	ldrb	r4, [r0, #20]
10003a3c:	2c05      	cmp	r4, #5
10003a3e:	d808      	bhi.n	10003a52 <_Z9DrawPointP7sCanvasiih.part.0+0x1a>
10003a40:	4d9a      	ldr	r5, [pc, #616]	; (10003cac <_Z9DrawPointP7sCanvasiih.part.0+0x274>)
10003a42:	00a4      	lsls	r4, r4, #2
10003a44:	592c      	ldr	r4, [r5, r4]
10003a46:	46a7      	mov	pc, r4
	{
	// 8-bit pixels
	case CANVAS_8:
		canvas->img[x + y*canvas->wb] = col;
10003a48:	6904      	ldr	r4, [r0, #16]
10003a4a:	6800      	ldr	r0, [r0, #0]
10003a4c:	4362      	muls	r2, r4
10003a4e:	1841      	adds	r1, r0, r1
10003a50:	548b      	strb	r3, [r1, r2]
				*d2 = (*d2 & 0x0f) | (col << 4);
			}
		}
		break;
	}
}
10003a52:	bdf0      	pop	{r4, r5, r6, r7, pc}
			u8* d = canvas->img + x/8 + y*wb; // 1st plane
10003a54:	2507      	movs	r5, #7
10003a56:	6904      	ldr	r4, [r0, #16]
10003a58:	4362      	muls	r2, r4
10003a5a:	17cc      	asrs	r4, r1, #31
10003a5c:	402c      	ands	r4, r5
10003a5e:	1864      	adds	r4, r4, r1
10003a60:	10e4      	asrs	r4, r4, #3
10003a62:	1914      	adds	r4, r2, r4
10003a64:	6802      	ldr	r2, [r0, #0]
			switch (x & 7)
10003a66:	400d      	ands	r5, r1
			u8* d = canvas->img + x/8 + y*wb; // 1st plane
10003a68:	1916      	adds	r6, r2, r4
			u8* d2 = canvas->img2 + x/8 + y*wb; // 2nd plane
10003a6a:	6842      	ldr	r2, [r0, #4]
			col &= 1;
10003a6c:	2001      	movs	r0, #1
10003a6e:	4990      	ldr	r1, [pc, #576]	; (10003cb0 <_Z9DrawPointP7sCanvasiih.part.0+0x278>)
10003a70:	00ad      	lsls	r5, r5, #2
10003a72:	5949      	ldr	r1, [r1, r5]
			u8* d2 = canvas->img2 + x/8 + y*wb; // 2nd plane
10003a74:	1914      	adds	r4, r2, r4
			u8 col2 = col >> 1;
10003a76:	085a      	lsrs	r2, r3, #1
			col &= 1;
10003a78:	4003      	ands	r3, r0
			switch (x & 7)
10003a7a:	468f      	mov	pc, r1
			u8* d = canvas->img + x/8 + y*wb; // pixels
10003a7c:	2707      	movs	r7, #7
10003a7e:	6906      	ldr	r6, [r0, #16]
10003a80:	17cc      	asrs	r4, r1, #31
10003a82:	4356      	muls	r6, r2
10003a84:	403c      	ands	r4, r7
10003a86:	1864      	adds	r4, r4, r1
10003a88:	10e4      	asrs	r4, r4, #3
10003a8a:	6805      	ldr	r5, [r0, #0]
10003a8c:	1936      	adds	r6, r6, r4
10003a8e:	19ad      	adds	r5, r5, r6
			u8* d2 = canvas->img2 + x/8 + (y/8)*wb; // attributes
10003a90:	17d6      	asrs	r6, r2, #31
10003a92:	403e      	ands	r6, r7
10003a94:	18b2      	adds	r2, r6, r2
10003a96:	6906      	ldr	r6, [r0, #16]
10003a98:	10d2      	asrs	r2, r2, #3
10003a9a:	4372      	muls	r2, r6
10003a9c:	1914      	adds	r4, r2, r4
10003a9e:	6842      	ldr	r2, [r0, #4]
				*d |= (0x80 >> (x & 7));
10003aa0:	4039      	ands	r1, r7
			u8* d2 = canvas->img2 + x/8 + (y/8)*wb; // attributes
10003aa2:	1914      	adds	r4, r2, r4
			if ((col & B4) == 0)
10003aa4:	06da      	lsls	r2, r3, #27
10003aa6:	d445      	bmi.n	10003b34 <_Z9DrawPointP7sCanvasiih.part.0+0xfc>
				*d |= (0x80 >> (x & 7));
10003aa8:	2280      	movs	r2, #128	; 0x80
10003aaa:	410a      	asrs	r2, r1
10003aac:	7829      	ldrb	r1, [r5, #0]
10003aae:	430a      	orrs	r2, r1
				*d2 = (*d2 & 0xf0) | col;
10003ab0:	210f      	movs	r1, #15
				*d |= (0x80 >> (x & 7));
10003ab2:	702a      	strb	r2, [r5, #0]
				*d2 = (*d2 & 0xf0) | col;
10003ab4:	7822      	ldrb	r2, [r4, #0]
10003ab6:	438a      	bics	r2, r1
10003ab8:	4313      	orrs	r3, r2
10003aba:	7023      	strb	r3, [r4, #0]
10003abc:	e7c9      	b.n	10003a52 <_Z9DrawPointP7sCanvasiih.part.0+0x1a>
			u8* d = canvas->img + x/4 + y*canvas->wb;
10003abe:	2503      	movs	r5, #3
10003ac0:	6904      	ldr	r4, [r0, #16]
10003ac2:	4362      	muls	r2, r4
10003ac4:	17cc      	asrs	r4, r1, #31
10003ac6:	402c      	ands	r4, r5
10003ac8:	1864      	adds	r4, r4, r1
10003aca:	10a4      	asrs	r4, r4, #2
10003acc:	1914      	adds	r4, r2, r4
10003ace:	6802      	ldr	r2, [r0, #0]
			switch (x & 3)
10003ad0:	4029      	ands	r1, r5
			u8* d = canvas->img + x/4 + y*canvas->wb;
10003ad2:	1914      	adds	r4, r2, r4
			switch (x & 3)
10003ad4:	2902      	cmp	r1, #2
10003ad6:	d100      	bne.n	10003ada <_Z9DrawPointP7sCanvasiih.part.0+0xa2>
10003ad8:	e0cd      	b.n	10003c76 <_Z9DrawPointP7sCanvasiih.part.0+0x23e>
10003ada:	2903      	cmp	r1, #3
10003adc:	d100      	bne.n	10003ae0 <_Z9DrawPointP7sCanvasiih.part.0+0xa8>
10003ade:	e0c5      	b.n	10003c6c <_Z9DrawPointP7sCanvasiih.part.0+0x234>
10003ae0:	2901      	cmp	r1, #1
10003ae2:	d100      	bne.n	10003ae6 <_Z9DrawPointP7sCanvasiih.part.0+0xae>
10003ae4:	e0bb      	b.n	10003c5e <_Z9DrawPointP7sCanvasiih.part.0+0x226>
				*d = (*d & 0x3f) | (col << 6);
10003ae6:	223f      	movs	r2, #63	; 0x3f
10003ae8:	7821      	ldrb	r1, [r4, #0]
10003aea:	019b      	lsls	r3, r3, #6
10003aec:	400a      	ands	r2, r1
10003aee:	4313      	orrs	r3, r2
10003af0:	7023      	strb	r3, [r4, #0]
				break;
10003af2:	e7ae      	b.n	10003a52 <_Z9DrawPointP7sCanvasiih.part.0+0x1a>
			u8* d = canvas->img + x/8 + y*canvas->wb;
10003af4:	2507      	movs	r5, #7
10003af6:	6904      	ldr	r4, [r0, #16]
10003af8:	4362      	muls	r2, r4
10003afa:	17cc      	asrs	r4, r1, #31
10003afc:	402c      	ands	r4, r5
10003afe:	1864      	adds	r4, r4, r1
10003b00:	10e4      	asrs	r4, r4, #3
10003b02:	1914      	adds	r4, r2, r4
10003b04:	6802      	ldr	r2, [r0, #0]
			switch (x & 7)
10003b06:	4029      	ands	r1, r5
			u8* d = canvas->img + x/8 + y*canvas->wb;
10003b08:	1914      	adds	r4, r2, r4
			switch (x & 7)
10003b0a:	4a6a      	ldr	r2, [pc, #424]	; (10003cb4 <_Z9DrawPointP7sCanvasiih.part.0+0x27c>)
10003b0c:	0089      	lsls	r1, r1, #2
10003b0e:	5852      	ldr	r2, [r2, r1]
10003b10:	4697      	mov	pc, r2
			u8* d = canvas->img + x/2 + y*canvas->wb;
10003b12:	6904      	ldr	r4, [r0, #16]
10003b14:	6800      	ldr	r0, [r0, #0]
10003b16:	4362      	muls	r2, r4
10003b18:	0fcc      	lsrs	r4, r1, #31
10003b1a:	1864      	adds	r4, r4, r1
10003b1c:	1064      	asrs	r4, r4, #1
10003b1e:	1912      	adds	r2, r2, r4
10003b20:	1882      	adds	r2, r0, r2
			if ((x & 1) == 0)
10003b22:	07c9      	lsls	r1, r1, #31
10003b24:	d413      	bmi.n	10003b4e <_Z9DrawPointP7sCanvasiih.part.0+0x116>
					*d = (*d & 0x0f) | (col << 4);
10003b26:	210f      	movs	r1, #15
10003b28:	7810      	ldrb	r0, [r2, #0]
10003b2a:	011b      	lsls	r3, r3, #4
10003b2c:	4001      	ands	r1, r0
10003b2e:	430b      	orrs	r3, r1
10003b30:	7013      	strb	r3, [r2, #0]
10003b32:	e78e      	b.n	10003a52 <_Z9DrawPointP7sCanvasiih.part.0+0x1a>
				*d &= ~(0x80 >> (x & 7));
10003b34:	2280      	movs	r2, #128	; 0x80
10003b36:	410a      	asrs	r2, r1
10003b38:	0011      	movs	r1, r2
10003b3a:	782a      	ldrb	r2, [r5, #0]
				*d2 = (*d2 & 0x0f) | (col << 4);
10003b3c:	011b      	lsls	r3, r3, #4
				*d &= ~(0x80 >> (x & 7));
10003b3e:	438a      	bics	r2, r1
10003b40:	702a      	strb	r2, [r5, #0]
				*d2 = (*d2 & 0x0f) | (col << 4);
10003b42:	220f      	movs	r2, #15
10003b44:	7821      	ldrb	r1, [r4, #0]
10003b46:	400a      	ands	r2, r1
10003b48:	4313      	orrs	r3, r2
10003b4a:	7023      	strb	r3, [r4, #0]
10003b4c:	e781      	b.n	10003a52 <_Z9DrawPointP7sCanvasiih.part.0+0x1a>
					*d = (*d & 0xf0) | col;
10003b4e:	200f      	movs	r0, #15
10003b50:	7811      	ldrb	r1, [r2, #0]
10003b52:	4381      	bics	r1, r0
10003b54:	430b      	orrs	r3, r1
10003b56:	7013      	strb	r3, [r2, #0]
10003b58:	e77b      	b.n	10003a52 <_Z9DrawPointP7sCanvasiih.part.0+0x1a>
				*d = (*d & ~0x01) | col;
10003b5a:	2101      	movs	r1, #1
10003b5c:	7822      	ldrb	r2, [r4, #0]
10003b5e:	438a      	bics	r2, r1
10003b60:	4313      	orrs	r3, r2
10003b62:	7023      	strb	r3, [r4, #0]
				break;
10003b64:	e775      	b.n	10003a52 <_Z9DrawPointP7sCanvasiih.part.0+0x1a>
				*d = (*d & ~0x02) | (col << 1);
10003b66:	2102      	movs	r1, #2
10003b68:	7822      	ldrb	r2, [r4, #0]
10003b6a:	005b      	lsls	r3, r3, #1
10003b6c:	438a      	bics	r2, r1
10003b6e:	4313      	orrs	r3, r2
10003b70:	7023      	strb	r3, [r4, #0]
				break;
10003b72:	e76e      	b.n	10003a52 <_Z9DrawPointP7sCanvasiih.part.0+0x1a>
				*d = (*d & ~0x04) | (col << 2);
10003b74:	2104      	movs	r1, #4
10003b76:	7822      	ldrb	r2, [r4, #0]
10003b78:	009b      	lsls	r3, r3, #2
10003b7a:	438a      	bics	r2, r1
10003b7c:	4313      	orrs	r3, r2
10003b7e:	7023      	strb	r3, [r4, #0]
				break;
10003b80:	e767      	b.n	10003a52 <_Z9DrawPointP7sCanvasiih.part.0+0x1a>
				*d = (*d & ~0x08) | (col << 3);
10003b82:	2108      	movs	r1, #8
10003b84:	7822      	ldrb	r2, [r4, #0]
10003b86:	00db      	lsls	r3, r3, #3
10003b88:	438a      	bics	r2, r1
10003b8a:	4313      	orrs	r3, r2
10003b8c:	7023      	strb	r3, [r4, #0]
				break;
10003b8e:	e760      	b.n	10003a52 <_Z9DrawPointP7sCanvasiih.part.0+0x1a>
				*d = (*d & ~0x10) | (col << 4);
10003b90:	2110      	movs	r1, #16
10003b92:	7822      	ldrb	r2, [r4, #0]
10003b94:	011b      	lsls	r3, r3, #4
10003b96:	438a      	bics	r2, r1
10003b98:	4313      	orrs	r3, r2
10003b9a:	7023      	strb	r3, [r4, #0]
				break;
10003b9c:	e759      	b.n	10003a52 <_Z9DrawPointP7sCanvasiih.part.0+0x1a>
				*d = (*d & ~0x20) | (col << 5);
10003b9e:	2120      	movs	r1, #32
10003ba0:	7822      	ldrb	r2, [r4, #0]
10003ba2:	015b      	lsls	r3, r3, #5
10003ba4:	438a      	bics	r2, r1
10003ba6:	4313      	orrs	r3, r2
10003ba8:	7023      	strb	r3, [r4, #0]
				break;
10003baa:	e752      	b.n	10003a52 <_Z9DrawPointP7sCanvasiih.part.0+0x1a>
				*d = (*d & ~0x40) | (col << 6);
10003bac:	2140      	movs	r1, #64	; 0x40
10003bae:	7822      	ldrb	r2, [r4, #0]
10003bb0:	019b      	lsls	r3, r3, #6
10003bb2:	438a      	bics	r2, r1
10003bb4:	4313      	orrs	r3, r2
10003bb6:	7023      	strb	r3, [r4, #0]
				break;
10003bb8:	e74b      	b.n	10003a52 <_Z9DrawPointP7sCanvasiih.part.0+0x1a>
				*d = (*d & ~0x01) | col;
10003bba:	2101      	movs	r1, #1
10003bbc:	7830      	ldrb	r0, [r6, #0]
10003bbe:	4388      	bics	r0, r1
10003bc0:	4303      	orrs	r3, r0
10003bc2:	7033      	strb	r3, [r6, #0]
				*d2 = (*d2 & ~0x01) | col2;
10003bc4:	7823      	ldrb	r3, [r4, #0]
10003bc6:	438b      	bics	r3, r1
10003bc8:	431a      	orrs	r2, r3
10003bca:	7022      	strb	r2, [r4, #0]
				break;
10003bcc:	e741      	b.n	10003a52 <_Z9DrawPointP7sCanvasiih.part.0+0x1a>
				*d = (*d & ~0x02) | (col << 1);
10003bce:	2502      	movs	r5, #2
10003bd0:	7831      	ldrb	r1, [r6, #0]
10003bd2:	005b      	lsls	r3, r3, #1
10003bd4:	43a9      	bics	r1, r5
10003bd6:	430b      	orrs	r3, r1
10003bd8:	7033      	strb	r3, [r6, #0]
				*d2 = (*d2 & ~0x02) | (col2 << 1);
10003bda:	7823      	ldrb	r3, [r4, #0]
10003bdc:	0052      	lsls	r2, r2, #1
10003bde:	43ab      	bics	r3, r5
10003be0:	431a      	orrs	r2, r3
10003be2:	7022      	strb	r2, [r4, #0]
				break;
10003be4:	e735      	b.n	10003a52 <_Z9DrawPointP7sCanvasiih.part.0+0x1a>
				*d = (*d & ~0x04) | (col << 2);
10003be6:	2504      	movs	r5, #4
10003be8:	7831      	ldrb	r1, [r6, #0]
10003bea:	009b      	lsls	r3, r3, #2
10003bec:	43a9      	bics	r1, r5
10003bee:	430b      	orrs	r3, r1
10003bf0:	7033      	strb	r3, [r6, #0]
				*d2 = (*d2 & ~0x04) | (col2 << 2);
10003bf2:	7823      	ldrb	r3, [r4, #0]
10003bf4:	0092      	lsls	r2, r2, #2
10003bf6:	43ab      	bics	r3, r5
10003bf8:	431a      	orrs	r2, r3
10003bfa:	7022      	strb	r2, [r4, #0]
				break;
10003bfc:	e729      	b.n	10003a52 <_Z9DrawPointP7sCanvasiih.part.0+0x1a>
				*d = (*d & ~0x08) | (col << 3);
10003bfe:	2508      	movs	r5, #8
10003c00:	7831      	ldrb	r1, [r6, #0]
10003c02:	00db      	lsls	r3, r3, #3
10003c04:	43a9      	bics	r1, r5
10003c06:	430b      	orrs	r3, r1
10003c08:	7033      	strb	r3, [r6, #0]
				*d2 = (*d2 & ~0x08) | (col2 << 3);
10003c0a:	7823      	ldrb	r3, [r4, #0]
10003c0c:	00d2      	lsls	r2, r2, #3
10003c0e:	43ab      	bics	r3, r5
10003c10:	431a      	orrs	r2, r3
10003c12:	7022      	strb	r2, [r4, #0]
				break;
10003c14:	e71d      	b.n	10003a52 <_Z9DrawPointP7sCanvasiih.part.0+0x1a>
				*d = (*d & ~0x10) | (col << 4);
10003c16:	2510      	movs	r5, #16
10003c18:	7831      	ldrb	r1, [r6, #0]
10003c1a:	011b      	lsls	r3, r3, #4
10003c1c:	43a9      	bics	r1, r5
10003c1e:	430b      	orrs	r3, r1
10003c20:	7033      	strb	r3, [r6, #0]
				*d2 = (*d2 & ~0x10) | (col2 << 4);
10003c22:	7823      	ldrb	r3, [r4, #0]
10003c24:	0112      	lsls	r2, r2, #4
10003c26:	43ab      	bics	r3, r5
10003c28:	431a      	orrs	r2, r3
10003c2a:	7022      	strb	r2, [r4, #0]
				break;
10003c2c:	e711      	b.n	10003a52 <_Z9DrawPointP7sCanvasiih.part.0+0x1a>
				*d = (*d & ~0x20) | (col << 5);
10003c2e:	2520      	movs	r5, #32
10003c30:	7831      	ldrb	r1, [r6, #0]
10003c32:	015b      	lsls	r3, r3, #5
10003c34:	43a9      	bics	r1, r5
10003c36:	430b      	orrs	r3, r1
10003c38:	7033      	strb	r3, [r6, #0]
				*d2 = (*d2 & ~0x20) | (col2 << 5);
10003c3a:	7823      	ldrb	r3, [r4, #0]
10003c3c:	0152      	lsls	r2, r2, #5
10003c3e:	43ab      	bics	r3, r5
10003c40:	431a      	orrs	r2, r3
10003c42:	7022      	strb	r2, [r4, #0]
				break;
10003c44:	e705      	b.n	10003a52 <_Z9DrawPointP7sCanvasiih.part.0+0x1a>
				*d = (*d & ~0x40) | (col << 6);
10003c46:	2540      	movs	r5, #64	; 0x40
10003c48:	7831      	ldrb	r1, [r6, #0]
10003c4a:	019b      	lsls	r3, r3, #6
10003c4c:	43a9      	bics	r1, r5
10003c4e:	430b      	orrs	r3, r1
10003c50:	7033      	strb	r3, [r6, #0]
				*d2 = (*d2 & ~0x40) | (col2 << 6);
10003c52:	7823      	ldrb	r3, [r4, #0]
10003c54:	0192      	lsls	r2, r2, #6
10003c56:	43ab      	bics	r3, r5
10003c58:	431a      	orrs	r2, r3
10003c5a:	7022      	strb	r2, [r4, #0]
				break;
10003c5c:	e6f9      	b.n	10003a52 <_Z9DrawPointP7sCanvasiih.part.0+0x1a>
				*d = (*d & 0xcf) | (col << 4);
10003c5e:	2130      	movs	r1, #48	; 0x30
10003c60:	7822      	ldrb	r2, [r4, #0]
10003c62:	011b      	lsls	r3, r3, #4
10003c64:	438a      	bics	r2, r1
10003c66:	4313      	orrs	r3, r2
10003c68:	7023      	strb	r3, [r4, #0]
				break;
10003c6a:	e6f2      	b.n	10003a52 <_Z9DrawPointP7sCanvasiih.part.0+0x1a>
				*d = (*d & 0xfc) | col;
10003c6c:	7822      	ldrb	r2, [r4, #0]
10003c6e:	438a      	bics	r2, r1
10003c70:	4313      	orrs	r3, r2
10003c72:	7023      	strb	r3, [r4, #0]
				break;
10003c74:	e6ed      	b.n	10003a52 <_Z9DrawPointP7sCanvasiih.part.0+0x1a>
				*d = (*d & 0xf3) | (col << 2);
10003c76:	210c      	movs	r1, #12
10003c78:	7822      	ldrb	r2, [r4, #0]
10003c7a:	009b      	lsls	r3, r3, #2
10003c7c:	438a      	bics	r2, r1
10003c7e:	4313      	orrs	r3, r2
10003c80:	7023      	strb	r3, [r4, #0]
				break;
10003c82:	e6e6      	b.n	10003a52 <_Z9DrawPointP7sCanvasiih.part.0+0x1a>
				*d = (*d & ~0x80) | (col << 7);
10003c84:	217f      	movs	r1, #127	; 0x7f
10003c86:	7835      	ldrb	r5, [r6, #0]
10003c88:	01db      	lsls	r3, r3, #7
10003c8a:	400d      	ands	r5, r1
10003c8c:	432b      	orrs	r3, r5
10003c8e:	7033      	strb	r3, [r6, #0]
				*d2 = (*d2 & ~0x80) | (col2 << 7);
10003c90:	7823      	ldrb	r3, [r4, #0]
10003c92:	01d2      	lsls	r2, r2, #7
10003c94:	4019      	ands	r1, r3
10003c96:	4311      	orrs	r1, r2
10003c98:	7021      	strb	r1, [r4, #0]
				break;
10003c9a:	e6da      	b.n	10003a52 <_Z9DrawPointP7sCanvasiih.part.0+0x1a>
				*d = (*d & ~0x80) | (col << 7);
10003c9c:	227f      	movs	r2, #127	; 0x7f
10003c9e:	7821      	ldrb	r1, [r4, #0]
10003ca0:	01db      	lsls	r3, r3, #7
10003ca2:	400a      	ands	r2, r1
10003ca4:	4313      	orrs	r3, r2
10003ca6:	7023      	strb	r3, [r4, #0]
				break;
10003ca8:	e6d3      	b.n	10003a52 <_Z9DrawPointP7sCanvasiih.part.0+0x1a>
10003caa:	46c0      	nop			; (mov r8, r8)
10003cac:	100051cc 	.word	0x100051cc
10003cb0:	100051e4 	.word	0x100051e4
10003cb4:	10005204 	.word	0x10005204

10003cb8 <_Z8DrawTextP7sCanvasPKciihPKviii>:

// Draw text (transparent background)
//   font = pointer to 1-bit font
void DrawText(sCanvas* canvas, const char* text, int x, int y, u8 col,
	const void* font, int fontheight /*=8*/, int scalex /*=1*/, int scaley /*=1*/)
{
10003cb8:	b5f0      	push	{r4, r5, r6, r7, lr}
10003cba:	4657      	mov	r7, sl
10003cbc:	46de      	mov	lr, fp
10003cbe:	464e      	mov	r6, r9
10003cc0:	4645      	mov	r5, r8
10003cc2:	b5e0      	push	{r5, r6, r7, lr}
10003cc4:	b08f      	sub	sp, #60	; 0x3c
10003cc6:	930d      	str	r3, [sp, #52]	; 0x34
10003cc8:	ab18      	add	r3, sp, #96	; 0x60
10003cca:	781b      	ldrb	r3, [r3, #0]
10003ccc:	0007      	movs	r7, r0
10003cce:	9300      	str	r3, [sp, #0]
	// invalid scale
	if ((scalex == 0) || (scaley == 0)) return;
10003cd0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
{
10003cd2:	9206      	str	r2, [sp, #24]
	if ((scalex == 0) || (scaley == 0)) return;
10003cd4:	2b00      	cmp	r3, #0
10003cd6:	d100      	bne.n	10003cda <_Z8DrawTextP7sCanvasPKciihPKviii+0x22>
10003cd8:	e08b      	b.n	10003df2 <_Z8DrawTextP7sCanvasPKciihPKviii+0x13a>
10003cda:	9b1c      	ldr	r3, [sp, #112]	; 0x70
10003cdc:	2b00      	cmp	r3, #0
10003cde:	d100      	bne.n	10003ce2 <_Z8DrawTextP7sCanvasPKciihPKviii+0x2a>
10003ce0:	e087      	b.n	10003df2 <_Z8DrawTextP7sCanvasPKciihPKviii+0x13a>

	// prepare coordinate increment
	int sx = (scalex < 0) ? -1 : 1; // increment X coordinate
10003ce2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
10003ce4:	2b00      	cmp	r3, #0
10003ce6:	da00      	bge.n	10003cea <_Z8DrawTextP7sCanvasPKciihPKviii+0x32>
10003ce8:	e08a      	b.n	10003e00 <_Z8DrawTextP7sCanvasPKciihPKviii+0x148>
10003cea:	9302      	str	r3, [sp, #8]
10003cec:	2301      	movs	r3, #1
10003cee:	469b      	mov	fp, r3
	int sy = (scaley < 0) ? -1 : 1; // increment Y coordinate
10003cf0:	2301      	movs	r3, #1
10003cf2:	9305      	str	r3, [sp, #20]
10003cf4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
10003cf6:	2b00      	cmp	r3, #0
10003cf8:	da04      	bge.n	10003d04 <_Z8DrawTextP7sCanvasPKciihPKviii+0x4c>
10003cfa:	425b      	negs	r3, r3
10003cfc:	931c      	str	r3, [sp, #112]	; 0x70
10003cfe:	2301      	movs	r3, #1
10003d00:	425b      	negs	r3, r3
10003d02:	9305      	str	r3, [sp, #20]
	int i, j, k, m;
	const u8* s;
	const u8* fnt = (const u8*)font;

	// loop through characters of text
	while ((ch = (u8)*text++) != 0) // until end of text
10003d04:	780b      	ldrb	r3, [r1, #0]
10003d06:	1c4a      	adds	r2, r1, #1
10003d08:	2b00      	cmp	r3, #0
10003d0a:	d072      	beq.n	10003df2 <_Z8DrawTextP7sCanvasPKciihPKviii+0x13a>
				y += sy;
			}
		}

		// shift to next character position
		x0 += scalex*8;
10003d0c:	991b      	ldr	r1, [sp, #108]	; 0x6c
10003d0e:	00c9      	lsls	r1, r1, #3
10003d10:	910c      	str	r1, [sp, #48]	; 0x30
10003d12:	991a      	ldr	r1, [sp, #104]	; 0x68
10003d14:	2900      	cmp	r1, #0
10003d16:	dd6c      	ble.n	10003df2 <_Z8DrawTextP7sCanvasPKciihPKviii+0x13a>
10003d18:	4659      	mov	r1, fp
10003d1a:	920b      	str	r2, [sp, #44]	; 0x2c
10003d1c:	9a02      	ldr	r2, [sp, #8]
10003d1e:	3a01      	subs	r2, #1
10003d20:	4351      	muls	r1, r2
10003d22:	9a05      	ldr	r2, [sp, #20]
10003d24:	9103      	str	r1, [sp, #12]
10003d26:	991c      	ldr	r1, [sp, #112]	; 0x70
10003d28:	434a      	muls	r2, r1
10003d2a:	920a      	str	r2, [sp, #40]	; 0x28
		s = &fnt[ch];
10003d2c:	9a19      	ldr	r2, [sp, #100]	; 0x64
10003d2e:	4694      	mov	ip, r2
10003d30:	4463      	add	r3, ip
10003d32:	9308      	str	r3, [sp, #32]
10003d34:	9b1a      	ldr	r3, [sp, #104]	; 0x68
10003d36:	9309      	str	r3, [sp, #36]	; 0x24
		y = y0;
10003d38:	9b0d      	ldr	r3, [sp, #52]	; 0x34
10003d3a:	9307      	str	r3, [sp, #28]
			ch0 = *s;
10003d3c:	9b08      	ldr	r3, [sp, #32]
10003d3e:	781a      	ldrb	r2, [r3, #0]
			s += 256;
10003d40:	3301      	adds	r3, #1
10003d42:	33ff      	adds	r3, #255	; 0xff
10003d44:	9308      	str	r3, [sp, #32]
10003d46:	9b1c      	ldr	r3, [sp, #112]	; 0x70
			ch0 = *s;
10003d48:	9204      	str	r2, [sp, #16]
			s += 256;
10003d4a:	9301      	str	r3, [sp, #4]
10003d4c:	9b07      	ldr	r3, [sp, #28]
10003d4e:	469a      	mov	sl, r3
				ch = ch0;
10003d50:	9b06      	ldr	r3, [sp, #24]
10003d52:	9e04      	ldr	r6, [sp, #16]
10003d54:	4699      	mov	r9, r3
10003d56:	2308      	movs	r3, #8
10003d58:	4698      	mov	r8, r3
10003d5a:	e00b      	b.n	10003d74 <_Z8DrawTextP7sCanvasPKciihPKviii+0xbc>
						x += scalex;
10003d5c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
10003d5e:	469c      	mov	ip, r3
10003d60:	44e1      	add	r9, ip
				for (j = 8; j > 0; j--)
10003d62:	2301      	movs	r3, #1
10003d64:	425b      	negs	r3, r3
10003d66:	469c      	mov	ip, r3
10003d68:	44e0      	add	r8, ip
10003d6a:	4643      	mov	r3, r8
					ch <<= 1;
10003d6c:	0076      	lsls	r6, r6, #1
10003d6e:	b2f6      	uxtb	r6, r6
				for (j = 8; j > 0; j--)
10003d70:	2b00      	cmp	r3, #0
10003d72:	d020      	beq.n	10003db6 <_Z8DrawTextP7sCanvasPKciihPKviii+0xfe>
					if ((ch & 0x80) != 0)
10003d74:	b273      	sxtb	r3, r6
10003d76:	2b00      	cmp	r3, #0
10003d78:	daf0      	bge.n	10003d5c <_Z8DrawTextP7sCanvasPKciihPKviii+0xa4>
10003d7a:	4653      	mov	r3, sl
10003d7c:	464c      	mov	r4, r9
10003d7e:	46b2      	mov	sl, r6
10003d80:	001e      	movs	r6, r3
10003d82:	9d02      	ldr	r5, [sp, #8]
	if (((u32)x >= (u32)canvas->w) || ((u32)y >= (u32)canvas->h)) return;
10003d84:	68bb      	ldr	r3, [r7, #8]
10003d86:	42a3      	cmp	r3, r4
10003d88:	d908      	bls.n	10003d9c <_Z8DrawTextP7sCanvasPKciihPKviii+0xe4>
10003d8a:	68fb      	ldr	r3, [r7, #12]
10003d8c:	429e      	cmp	r6, r3
10003d8e:	d205      	bcs.n	10003d9c <_Z8DrawTextP7sCanvasPKciihPKviii+0xe4>
10003d90:	0032      	movs	r2, r6
10003d92:	0021      	movs	r1, r4
10003d94:	0038      	movs	r0, r7
10003d96:	9b00      	ldr	r3, [sp, #0]
10003d98:	f7ff fe4e 	bl	10003a38 <_Z9DrawPointP7sCanvasiih.part.0>
						for (k = dx; k > 0; k--)
10003d9c:	3d01      	subs	r5, #1
							x += sx;
10003d9e:	445c      	add	r4, fp
						for (k = dx; k > 0; k--)
10003da0:	2d00      	cmp	r5, #0
10003da2:	d1ef      	bne.n	10003d84 <_Z8DrawTextP7sCanvasPKciihPKviii+0xcc>
10003da4:	0033      	movs	r3, r6
							x += sx;
10003da6:	9a03      	ldr	r2, [sp, #12]
10003da8:	4656      	mov	r6, sl
10003daa:	469a      	mov	sl, r3
10003dac:	464b      	mov	r3, r9
10003dae:	4691      	mov	r9, r2
10003db0:	445b      	add	r3, fp
10003db2:	4499      	add	r9, r3
10003db4:	e7d5      	b.n	10003d62 <_Z8DrawTextP7sCanvasPKciihPKviii+0xaa>
				y += sy;
10003db6:	9b05      	ldr	r3, [sp, #20]
10003db8:	469c      	mov	ip, r3
			for (m = dy; m > 0; m--)
10003dba:	9b01      	ldr	r3, [sp, #4]
				y += sy;
10003dbc:	44e2      	add	sl, ip
			for (m = dy; m > 0; m--)
10003dbe:	3b01      	subs	r3, #1
10003dc0:	9301      	str	r3, [sp, #4]
10003dc2:	2b00      	cmp	r3, #0
10003dc4:	d1c4      	bne.n	10003d50 <_Z8DrawTextP7sCanvasPKciihPKviii+0x98>
10003dc6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
10003dc8:	9b07      	ldr	r3, [sp, #28]
10003dca:	4694      	mov	ip, r2
10003dcc:	4463      	add	r3, ip
10003dce:	9307      	str	r3, [sp, #28]
		for (i = fontheight; i > 0; i--)
10003dd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
10003dd2:	3b01      	subs	r3, #1
10003dd4:	9309      	str	r3, [sp, #36]	; 0x24
10003dd6:	2b00      	cmp	r3, #0
10003dd8:	d1b0      	bne.n	10003d3c <_Z8DrawTextP7sCanvasPKciihPKviii+0x84>
		x0 += scalex*8;
10003dda:	9a0c      	ldr	r2, [sp, #48]	; 0x30
10003ddc:	9b06      	ldr	r3, [sp, #24]
10003dde:	4694      	mov	ip, r2
10003de0:	4463      	add	r3, ip
10003de2:	9306      	str	r3, [sp, #24]
	while ((ch = (u8)*text++) != 0) // until end of text
10003de4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
10003de6:	3301      	adds	r3, #1
10003de8:	930b      	str	r3, [sp, #44]	; 0x2c
10003dea:	3b01      	subs	r3, #1
10003dec:	781b      	ldrb	r3, [r3, #0]
10003dee:	2b00      	cmp	r3, #0
10003df0:	d19c      	bne.n	10003d2c <_Z8DrawTextP7sCanvasPKciihPKviii+0x74>
	}
}
10003df2:	b00f      	add	sp, #60	; 0x3c
10003df4:	bcf0      	pop	{r4, r5, r6, r7}
10003df6:	46bb      	mov	fp, r7
10003df8:	46b2      	mov	sl, r6
10003dfa:	46a9      	mov	r9, r5
10003dfc:	46a0      	mov	r8, r4
10003dfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
10003e00:	425b      	negs	r3, r3
10003e02:	9302      	str	r3, [sp, #8]
	int sx = (scalex < 0) ? -1 : 1; // increment X coordinate
10003e04:	2301      	movs	r3, #1
10003e06:	425b      	negs	r3, r3
10003e08:	469b      	mov	fp, r3
10003e0a:	e771      	b.n	10003cf0 <_Z8DrawTextP7sCanvasPKciihPKviii+0x38>

10003e0c <_Z12FindSysClockmPmS_PtPhS1_>:
//  outfbdiv ... output fbdiv (16..320)
//  outpd1 ... output postdiv1 (1..7)
//  outpd2 ... output postdiv2 (1..7)
// Returns true if precise frequency has been found, or near frequency used otherwise.
bool FindSysClock(u32 reqkhz, u32* outkhz, u32* outvco, u16* outfbdiv, u8* outpd1, u8* outpd2)
{
10003e0c:	b5f0      	push	{r4, r5, r6, r7, lr}
10003e0e:	46de      	mov	lr, fp
10003e10:	464e      	mov	r6, r9
10003e12:	4657      	mov	r7, sl
10003e14:	4645      	mov	r5, r8
10003e16:	b5e0      	push	{r5, r6, r7, lr}
10003e18:	b087      	sub	sp, #28
10003e1a:	9000      	str	r0, [sp, #0]
	// get reference frequency in kHz (should be 12 MHz)
	u32 input = clock_get_hz(clk_ref)/1000;
10003e1c:	2004      	movs	r0, #4
{
10003e1e:	468a      	mov	sl, r1
10003e20:	4691      	mov	r9, r2
10003e22:	9304      	str	r3, [sp, #16]
	u32 input = clock_get_hz(clk_ref)/1000;
10003e24:	f7fd f81a 	bl	10000e5c <clock_get_hz>
10003e28:	21fa      	movs	r1, #250	; 0xfa
10003e2a:	0089      	lsls	r1, r1, #2
10003e2c:	f7fc faa2 	bl	10000374 <__wrap___aeabi_uidiv>
	*outkhz = 0;
10003e30:	2300      	movs	r3, #0
10003e32:	4651      	mov	r1, sl
10003e34:	4684      	mov	ip, r0
10003e36:	4a8e      	ldr	r2, [pc, #568]	; (10004070 <_Z12FindSysClockmPmS_PtPhS1_+0x264>)
10003e38:	600b      	str	r3, [r1, #0]
10003e3a:	0083      	lsls	r3, r0, #2
10003e3c:	4463      	add	r3, ip
10003e3e:	4694      	mov	ip, r2
10003e40:	019b      	lsls	r3, r3, #6
10003e42:	4463      	add	r3, ip
10003e44:	9302      	str	r3, [sp, #8]
						*outpd2 = pd2;
10003e46:	464b      	mov	r3, r9
	*outkhz = 0;
10003e48:	25a0      	movs	r5, #160	; 0xa0
						*outpd2 = pd2;
10003e4a:	46d1      	mov	r9, sl
10003e4c:	469a      	mov	sl, r3
	*outkhz = 0;
10003e4e:	4e89      	ldr	r6, [pc, #548]	; (10004074 <_Z12FindSysClockmPmS_PtPhS1_+0x268>)
	u32 input = clock_get_hz(clk_ref)/1000;
10003e50:	9005      	str	r0, [sp, #20]
	*outkhz = 0;
10003e52:	006d      	lsls	r5, r5, #1
		vco = fbdiv * input;
10003e54:	4a88      	ldr	r2, [pc, #544]	; (10004078 <_Z12FindSysClockmPmS_PtPhS1_+0x26c>)
10003e56:	9b02      	ldr	r3, [sp, #8]
10003e58:	4694      	mov	ip, r2
10003e5a:	001c      	movs	r4, r3
		if ((vco >= vcomin) && (vco <= vcomax))
10003e5c:	4a87      	ldr	r2, [pc, #540]	; (1000407c <_Z12FindSysClockmPmS_PtPhS1_+0x270>)
10003e5e:	4464      	add	r4, ip
10003e60:	4293      	cmp	r3, r2
10003e62:	d900      	bls.n	10003e66 <_Z12FindSysClockmPmS_PtPhS1_+0x5a>
10003e64:	e0dd      	b.n	10004022 <_Z12FindSysClockmPmS_PtPhS1_+0x216>
10003e66:	2306      	movs	r3, #6
10003e68:	9503      	str	r5, [sp, #12]
10003e6a:	4698      	mov	r8, r3
10003e6c:	e0b4      	b.n	10003fd8 <_Z12FindSysClockmPmS_PtPhS1_+0x1cc>
					khz = vco / (pd1 * pd2);
10003e6e:	4641      	mov	r1, r8
10003e70:	0020      	movs	r0, r4
10003e72:	4369      	muls	r1, r5
10003e74:	f7fc fa7e 	bl	10000374 <__wrap___aeabi_uidiv>
					margin = abs((int)(khz - reqkhz));
10003e78:	9b00      	ldr	r3, [sp, #0]
10003e7a:	1ac3      	subs	r3, r0, r3
10003e7c:	17da      	asrs	r2, r3, #31
10003e7e:	189b      	adds	r3, r3, r2
10003e80:	4053      	eors	r3, r2
					if (margin < margin_best)
10003e82:	42b3      	cmp	r3, r6
10003e84:	d20c      	bcs.n	10003ea0 <_Z12FindSysClockmPmS_PtPhS1_+0x94>
						*outkhz = khz;
10003e86:	464a      	mov	r2, r9
10003e88:	6010      	str	r0, [r2, #0]
						*outvco = vco;
10003e8a:	4652      	mov	r2, sl
						*outpd2 = pd2;
10003e8c:	001e      	movs	r6, r3
						*outvco = vco;
10003e8e:	6014      	str	r4, [r2, #0]
						*outfbdiv = fbdiv;
10003e90:	9903      	ldr	r1, [sp, #12]
10003e92:	9a04      	ldr	r2, [sp, #16]
10003e94:	8011      	strh	r1, [r2, #0]
						*outpd1 = pd1;
10003e96:	9a10      	ldr	r2, [sp, #64]	; 0x40
10003e98:	9901      	ldr	r1, [sp, #4]
10003e9a:	7011      	strb	r1, [r2, #0]
						*outpd2 = pd2;
10003e9c:	9a11      	ldr	r2, [sp, #68]	; 0x44
10003e9e:	7017      	strb	r7, [r2, #0]
				for (pd2 = pd1; pd2 >= 1; pd2--)
10003ea0:	1e7b      	subs	r3, r7, #1
10003ea2:	b2db      	uxtb	r3, r3
10003ea4:	469b      	mov	fp, r3
10003ea6:	2b00      	cmp	r3, #0
10003ea8:	d100      	bne.n	10003eac <_Z12FindSysClockmPmS_PtPhS1_+0xa0>
10003eaa:	e091      	b.n	10003fd0 <_Z12FindSysClockmPmS_PtPhS1_+0x1c4>
					khz = vco / (pd1 * pd2);
10003eac:	0019      	movs	r1, r3
10003eae:	0020      	movs	r0, r4
10003eb0:	4369      	muls	r1, r5
10003eb2:	f7fc fa5f 	bl	10000374 <__wrap___aeabi_uidiv>
					margin = abs((int)(khz - reqkhz));
10003eb6:	9b00      	ldr	r3, [sp, #0]
10003eb8:	1ac3      	subs	r3, r0, r3
10003eba:	17da      	asrs	r2, r3, #31
10003ebc:	189b      	adds	r3, r3, r2
10003ebe:	4053      	eors	r3, r2
					if (margin < margin_best)
10003ec0:	42b3      	cmp	r3, r6
10003ec2:	d20d      	bcs.n	10003ee0 <_Z12FindSysClockmPmS_PtPhS1_+0xd4>
						*outkhz = khz;
10003ec4:	464a      	mov	r2, r9
10003ec6:	6010      	str	r0, [r2, #0]
						*outvco = vco;
10003ec8:	4652      	mov	r2, sl
						*outfbdiv = fbdiv;
10003eca:	9903      	ldr	r1, [sp, #12]
						*outvco = vco;
10003ecc:	6014      	str	r4, [r2, #0]
						*outfbdiv = fbdiv;
10003ece:	9a04      	ldr	r2, [sp, #16]
						*outpd2 = pd2;
10003ed0:	001e      	movs	r6, r3
						*outfbdiv = fbdiv;
10003ed2:	8011      	strh	r1, [r2, #0]
						*outpd1 = pd1;
10003ed4:	9a10      	ldr	r2, [sp, #64]	; 0x40
10003ed6:	9901      	ldr	r1, [sp, #4]
10003ed8:	7011      	strb	r1, [r2, #0]
						*outpd2 = pd2;
10003eda:	4659      	mov	r1, fp
10003edc:	9a11      	ldr	r2, [sp, #68]	; 0x44
10003ede:	7011      	strb	r1, [r2, #0]
				for (pd2 = pd1; pd2 >= 1; pd2--)
10003ee0:	1ebb      	subs	r3, r7, #2
10003ee2:	b2db      	uxtb	r3, r3
10003ee4:	469b      	mov	fp, r3
10003ee6:	2b00      	cmp	r3, #0
10003ee8:	d072      	beq.n	10003fd0 <_Z12FindSysClockmPmS_PtPhS1_+0x1c4>
					khz = vco / (pd1 * pd2);
10003eea:	0019      	movs	r1, r3
10003eec:	0020      	movs	r0, r4
10003eee:	4369      	muls	r1, r5
10003ef0:	f7fc fa40 	bl	10000374 <__wrap___aeabi_uidiv>
					margin = abs((int)(khz - reqkhz));
10003ef4:	9b00      	ldr	r3, [sp, #0]
10003ef6:	1ac3      	subs	r3, r0, r3
10003ef8:	17da      	asrs	r2, r3, #31
10003efa:	189b      	adds	r3, r3, r2
10003efc:	4053      	eors	r3, r2
					if (margin < margin_best)
10003efe:	429e      	cmp	r6, r3
10003f00:	d90d      	bls.n	10003f1e <_Z12FindSysClockmPmS_PtPhS1_+0x112>
						*outkhz = khz;
10003f02:	464a      	mov	r2, r9
10003f04:	6010      	str	r0, [r2, #0]
						*outvco = vco;
10003f06:	4652      	mov	r2, sl
						*outfbdiv = fbdiv;
10003f08:	9903      	ldr	r1, [sp, #12]
						*outvco = vco;
10003f0a:	6014      	str	r4, [r2, #0]
						*outfbdiv = fbdiv;
10003f0c:	9a04      	ldr	r2, [sp, #16]
						*outpd2 = pd2;
10003f0e:	001e      	movs	r6, r3
						*outfbdiv = fbdiv;
10003f10:	8011      	strh	r1, [r2, #0]
						*outpd1 = pd1;
10003f12:	9a10      	ldr	r2, [sp, #64]	; 0x40
10003f14:	9901      	ldr	r1, [sp, #4]
10003f16:	7011      	strb	r1, [r2, #0]
						*outpd2 = pd2;
10003f18:	4659      	mov	r1, fp
10003f1a:	9a11      	ldr	r2, [sp, #68]	; 0x44
10003f1c:	7011      	strb	r1, [r2, #0]
				for (pd2 = pd1; pd2 >= 1; pd2--)
10003f1e:	1efb      	subs	r3, r7, #3
10003f20:	b2db      	uxtb	r3, r3
10003f22:	469b      	mov	fp, r3
10003f24:	2b00      	cmp	r3, #0
10003f26:	d053      	beq.n	10003fd0 <_Z12FindSysClockmPmS_PtPhS1_+0x1c4>
					khz = vco / (pd1 * pd2);
10003f28:	0019      	movs	r1, r3
10003f2a:	0020      	movs	r0, r4
10003f2c:	4369      	muls	r1, r5
10003f2e:	f7fc fa21 	bl	10000374 <__wrap___aeabi_uidiv>
					margin = abs((int)(khz - reqkhz));
10003f32:	9b00      	ldr	r3, [sp, #0]
10003f34:	1ac3      	subs	r3, r0, r3
10003f36:	17da      	asrs	r2, r3, #31
10003f38:	189b      	adds	r3, r3, r2
10003f3a:	4053      	eors	r3, r2
					if (margin < margin_best)
10003f3c:	429e      	cmp	r6, r3
10003f3e:	d90d      	bls.n	10003f5c <_Z12FindSysClockmPmS_PtPhS1_+0x150>
						*outkhz = khz;
10003f40:	464a      	mov	r2, r9
10003f42:	6010      	str	r0, [r2, #0]
						*outvco = vco;
10003f44:	4652      	mov	r2, sl
						*outfbdiv = fbdiv;
10003f46:	9903      	ldr	r1, [sp, #12]
						*outvco = vco;
10003f48:	6014      	str	r4, [r2, #0]
						*outfbdiv = fbdiv;
10003f4a:	9a04      	ldr	r2, [sp, #16]
						*outpd2 = pd2;
10003f4c:	001e      	movs	r6, r3
						*outfbdiv = fbdiv;
10003f4e:	8011      	strh	r1, [r2, #0]
						*outpd1 = pd1;
10003f50:	9a10      	ldr	r2, [sp, #64]	; 0x40
10003f52:	9901      	ldr	r1, [sp, #4]
10003f54:	7011      	strb	r1, [r2, #0]
						*outpd2 = pd2;
10003f56:	4659      	mov	r1, fp
10003f58:	9a11      	ldr	r2, [sp, #68]	; 0x44
10003f5a:	7011      	strb	r1, [r2, #0]
				for (pd2 = pd1; pd2 >= 1; pd2--)
10003f5c:	1f3b      	subs	r3, r7, #4
10003f5e:	b2db      	uxtb	r3, r3
10003f60:	469b      	mov	fp, r3
10003f62:	2b00      	cmp	r3, #0
10003f64:	d034      	beq.n	10003fd0 <_Z12FindSysClockmPmS_PtPhS1_+0x1c4>
					khz = vco / (pd1 * pd2);
10003f66:	0019      	movs	r1, r3
10003f68:	0020      	movs	r0, r4
10003f6a:	4369      	muls	r1, r5
10003f6c:	f7fc fa02 	bl	10000374 <__wrap___aeabi_uidiv>
					margin = abs((int)(khz - reqkhz));
10003f70:	9b00      	ldr	r3, [sp, #0]
10003f72:	1ac3      	subs	r3, r0, r3
10003f74:	17da      	asrs	r2, r3, #31
10003f76:	189b      	adds	r3, r3, r2
10003f78:	4053      	eors	r3, r2
					if (margin < margin_best)
10003f7a:	429e      	cmp	r6, r3
10003f7c:	d90d      	bls.n	10003f9a <_Z12FindSysClockmPmS_PtPhS1_+0x18e>
						*outkhz = khz;
10003f7e:	464a      	mov	r2, r9
10003f80:	6010      	str	r0, [r2, #0]
						*outvco = vco;
10003f82:	4652      	mov	r2, sl
						*outfbdiv = fbdiv;
10003f84:	9903      	ldr	r1, [sp, #12]
						*outvco = vco;
10003f86:	6014      	str	r4, [r2, #0]
						*outfbdiv = fbdiv;
10003f88:	9a04      	ldr	r2, [sp, #16]
						*outpd2 = pd2;
10003f8a:	001e      	movs	r6, r3
						*outfbdiv = fbdiv;
10003f8c:	8011      	strh	r1, [r2, #0]
						*outpd1 = pd1;
10003f8e:	9a10      	ldr	r2, [sp, #64]	; 0x40
10003f90:	9901      	ldr	r1, [sp, #4]
10003f92:	7011      	strb	r1, [r2, #0]
						*outpd2 = pd2;
10003f94:	4659      	mov	r1, fp
10003f96:	9a11      	ldr	r2, [sp, #68]	; 0x44
10003f98:	7011      	strb	r1, [r2, #0]
				for (pd2 = pd1; pd2 >= 1; pd2--)
10003f9a:	2f05      	cmp	r7, #5
10003f9c:	d018      	beq.n	10003fd0 <_Z12FindSysClockmPmS_PtPhS1_+0x1c4>
					khz = vco / (pd1 * pd2);
10003f9e:	0029      	movs	r1, r5
10003fa0:	0020      	movs	r0, r4
10003fa2:	f7fc f9e7 	bl	10000374 <__wrap___aeabi_uidiv>
					margin = abs((int)(khz - reqkhz));
10003fa6:	9b00      	ldr	r3, [sp, #0]
10003fa8:	1ac3      	subs	r3, r0, r3
10003faa:	17da      	asrs	r2, r3, #31
10003fac:	189b      	adds	r3, r3, r2
10003fae:	4053      	eors	r3, r2
					if (margin < margin_best)
10003fb0:	429e      	cmp	r6, r3
10003fb2:	d90d      	bls.n	10003fd0 <_Z12FindSysClockmPmS_PtPhS1_+0x1c4>
						*outkhz = khz;
10003fb4:	464a      	mov	r2, r9
10003fb6:	6010      	str	r0, [r2, #0]
						*outvco = vco;
10003fb8:	4652      	mov	r2, sl
						*outfbdiv = fbdiv;
10003fba:	9903      	ldr	r1, [sp, #12]
						*outvco = vco;
10003fbc:	6014      	str	r4, [r2, #0]
						*outfbdiv = fbdiv;
10003fbe:	9a04      	ldr	r2, [sp, #16]
						*outpd2 = pd2;
10003fc0:	001e      	movs	r6, r3
						*outfbdiv = fbdiv;
10003fc2:	8011      	strh	r1, [r2, #0]
						*outpd1 = pd1;
10003fc4:	9a10      	ldr	r2, [sp, #64]	; 0x40
10003fc6:	9901      	ldr	r1, [sp, #4]
10003fc8:	7011      	strb	r1, [r2, #0]
						*outpd2 = pd2;
10003fca:	2101      	movs	r1, #1
10003fcc:	9a11      	ldr	r2, [sp, #68]	; 0x44
10003fce:	7011      	strb	r1, [r2, #0]
			for (pd1 = 7; pd1 >= 1; pd1--)
10003fd0:	2301      	movs	r3, #1
10003fd2:	425b      	negs	r3, r3
10003fd4:	469c      	mov	ip, r3
10003fd6:	44e0      	add	r8, ip
				for (pd2 = pd1; pd2 >= 1; pd2--)
10003fd8:	4643      	mov	r3, r8
10003fda:	b2df      	uxtb	r7, r3
10003fdc:	1c7b      	adds	r3, r7, #1
10003fde:	b2da      	uxtb	r2, r3
10003fe0:	4643      	mov	r3, r8
10003fe2:	1c5d      	adds	r5, r3, #1
					khz = vco / (pd1 * pd2);
10003fe4:	0029      	movs	r1, r5
10003fe6:	0020      	movs	r0, r4
10003fe8:	4369      	muls	r1, r5
10003fea:	9201      	str	r2, [sp, #4]
10003fec:	f7fc f9c2 	bl	10000374 <__wrap___aeabi_uidiv>
					margin = abs((int)(khz - reqkhz));
10003ff0:	9b00      	ldr	r3, [sp, #0]
10003ff2:	1ac3      	subs	r3, r0, r3
10003ff4:	17d9      	asrs	r1, r3, #31
10003ff6:	185b      	adds	r3, r3, r1
10003ff8:	404b      	eors	r3, r1
					if (margin < margin_best)
10003ffa:	429e      	cmp	r6, r3
10003ffc:	d90c      	bls.n	10004018 <_Z12FindSysClockmPmS_PtPhS1_+0x20c>
						*outkhz = khz;
10003ffe:	4649      	mov	r1, r9
10004000:	6008      	str	r0, [r1, #0]
						*outvco = vco;
10004002:	4651      	mov	r1, sl
						*outpd2 = pd2;
10004004:	001e      	movs	r6, r3
						*outvco = vco;
10004006:	600c      	str	r4, [r1, #0]
						*outfbdiv = fbdiv;
10004008:	9803      	ldr	r0, [sp, #12]
1000400a:	9904      	ldr	r1, [sp, #16]
						*outpd1 = pd1;
1000400c:	9a01      	ldr	r2, [sp, #4]
						*outfbdiv = fbdiv;
1000400e:	8008      	strh	r0, [r1, #0]
						*outpd1 = pd1;
10004010:	9910      	ldr	r1, [sp, #64]	; 0x40
10004012:	700a      	strb	r2, [r1, #0]
						*outpd2 = pd2;
10004014:	9911      	ldr	r1, [sp, #68]	; 0x44
10004016:	700a      	strb	r2, [r1, #0]
				for (pd2 = pd1; pd2 >= 1; pd2--)
10004018:	4643      	mov	r3, r8
1000401a:	2b00      	cmp	r3, #0
1000401c:	d000      	beq.n	10004020 <_Z12FindSysClockmPmS_PtPhS1_+0x214>
1000401e:	e726      	b.n	10003e6e <_Z12FindSysClockmPmS_PtPhS1_+0x62>
10004020:	9d03      	ldr	r5, [sp, #12]
			if (fbdiv < 16) break;
10004022:	9b02      	ldr	r3, [sp, #8]
10004024:	9a05      	ldr	r2, [sp, #20]
			fbdiv--;
10004026:	3d01      	subs	r5, #1
			if (fbdiv < 16) break;
10004028:	1a9b      	subs	r3, r3, r2
			fbdiv--;
1000402a:	b2ad      	uxth	r5, r5
			if (fbdiv < 16) break;
1000402c:	9302      	str	r3, [sp, #8]
1000402e:	2d0f      	cmp	r5, #15
10004030:	d000      	beq.n	10004034 <_Z12FindSysClockmPmS_PtPhS1_+0x228>
10004032:	e70f      	b.n	10003e54 <_Z12FindSysClockmPmS_PtPhS1_+0x48>
	return (*outkhz == reqkhz) && (*outvco == *outkhz * *outpd1 * *outpd2);
10004034:	4653      	mov	r3, sl
10004036:	46ca      	mov	sl, r9
10004038:	4699      	mov	r9, r3
1000403a:	4653      	mov	r3, sl
1000403c:	9a00      	ldr	r2, [sp, #0]
1000403e:	681b      	ldr	r3, [r3, #0]
10004040:	2000      	movs	r0, #0
10004042:	429a      	cmp	r2, r3
10004044:	d10d      	bne.n	10004062 <_Z12FindSysClockmPmS_PtPhS1_+0x256>
10004046:	9b10      	ldr	r3, [sp, #64]	; 0x40
10004048:	9a11      	ldr	r2, [sp, #68]	; 0x44
1000404a:	781b      	ldrb	r3, [r3, #0]
1000404c:	7810      	ldrb	r0, [r2, #0]
1000404e:	4358      	muls	r0, r3
10004050:	9b00      	ldr	r3, [sp, #0]
10004052:	4343      	muls	r3, r0
10004054:	0018      	movs	r0, r3
10004056:	464b      	mov	r3, r9
10004058:	681b      	ldr	r3, [r3, #0]
1000405a:	1ac0      	subs	r0, r0, r3
1000405c:	4243      	negs	r3, r0
1000405e:	4158      	adcs	r0, r3
10004060:	b2c0      	uxtb	r0, r0

	// find PLL setup
	return vcocalc(reqkhz, input, 400000, 1600000, false,  outkhz, outvco, outfbdiv, outpd1, outpd2);
}
10004062:	b007      	add	sp, #28
10004064:	bcf0      	pop	{r4, r5, r6, r7}
10004066:	46bb      	mov	fp, r7
10004068:	46b2      	mov	sl, r6
1000406a:	46a9      	mov	r9, r5
1000406c:	46a0      	mov	r8, r4
1000406e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10004070:	fff9e580 	.word	0xfff9e580
10004074:	000186a0 	.word	0x000186a0
10004078:	00061a80 	.word	0x00061a80
1000407c:	00124f80 	.word	0x00124f80

10004080 <_Z10PrintSetupPhiii>:
// use mono mode
Bool PrintMonoMode;

// setup print service (if bufwb < 2*bufw, use mono text)
void PrintSetup(u8* buf, int bufw, int bufh, int bufwb)
{
10004080:	b510      	push	{r4, lr}
	PrintBuf = buf;
10004082:	4c0c      	ldr	r4, [pc, #48]	; (100040b4 <_Z10PrintSetupPhiii+0x34>)
10004084:	6020      	str	r0, [r4, #0]
	PrintBufW = bufw;
10004086:	480c      	ldr	r0, [pc, #48]	; (100040b8 <_Z10PrintSetupPhiii+0x38>)
10004088:	6001      	str	r1, [r0, #0]
	PrintBufH = bufh;
1000408a:	480c      	ldr	r0, [pc, #48]	; (100040bc <_Z10PrintSetupPhiii+0x3c>)
	PrintBufWB = bufwb;
	PrintX = 0;
	PrintY = 0;
	PrintMonoMode = (bufwb < 2*bufw);
1000408c:	0049      	lsls	r1, r1, #1
	PrintBufH = bufh;
1000408e:	6002      	str	r2, [r0, #0]
	PrintBufWB = bufwb;
10004090:	4a0b      	ldr	r2, [pc, #44]	; (100040c0 <_Z10PrintSetupPhiii+0x40>)
	PrintX = 0;
10004092:	480c      	ldr	r0, [pc, #48]	; (100040c4 <_Z10PrintSetupPhiii+0x44>)
	PrintBufWB = bufwb;
10004094:	6013      	str	r3, [r2, #0]
	PrintX = 0;
10004096:	2200      	movs	r2, #0
10004098:	6002      	str	r2, [r0, #0]
	PrintY = 0;
1000409a:	480b      	ldr	r0, [pc, #44]	; (100040c8 <_Z10PrintSetupPhiii+0x48>)
1000409c:	6002      	str	r2, [r0, #0]
	PrintMonoMode = (bufwb < 2*bufw);
1000409e:	2201      	movs	r2, #1
100040a0:	4299      	cmp	r1, r3
100040a2:	dc00      	bgt.n	100040a6 <_Z10PrintSetupPhiii+0x26>
100040a4:	2200      	movs	r2, #0
100040a6:	4b09      	ldr	r3, [pc, #36]	; (100040cc <_Z10PrintSetupPhiii+0x4c>)
100040a8:	701a      	strb	r2, [r3, #0]
	PrintCol = PC_COLOR(PC_BLACK, PC_WHITE);
100040aa:	220f      	movs	r2, #15
100040ac:	4b08      	ldr	r3, [pc, #32]	; (100040d0 <_Z10PrintSetupPhiii+0x50>)
100040ae:	701a      	strb	r2, [r3, #0]
}
100040b0:	bd10      	pop	{r4, pc}
100040b2:	46c0      	nop			; (mov r8, r8)
100040b4:	200380c0 	.word	0x200380c0
100040b8:	200380c8 	.word	0x200380c8
100040bc:	200380c4 	.word	0x200380c4
100040c0:	200380cc 	.word	0x200380cc
100040c4:	200380d0 	.word	0x200380d0
100040c8:	200380d4 	.word	0x200380d4
100040cc:	200394db 	.word	0x200394db
100040d0:	200394da 	.word	0x200394da

100040d4 <_Z10PrintClearv>:

// clear text screen, using current color
void PrintClear()
{
100040d4:	b5f0      	push	{r4, r5, r6, r7, lr}
100040d6:	464f      	mov	r7, r9
100040d8:	46d6      	mov	lr, sl
100040da:	4646      	mov	r6, r8
100040dc:	b5c0      	push	{r6, r7, lr}
	int i, y;
	u8* d;
	u8 col = PrintCol;
100040de:	4b1b      	ldr	r3, [pc, #108]	; (1000414c <_Z10PrintClearv+0x78>)
	for (y = 0; y < PrintBufH; y++)
100040e0:	4f1b      	ldr	r7, [pc, #108]	; (10004150 <_Z10PrintClearv+0x7c>)
	u8 col = PrintCol;
100040e2:	781d      	ldrb	r5, [r3, #0]
	for (y = 0; y < PrintBufH; y++)
100040e4:	683b      	ldr	r3, [r7, #0]
100040e6:	2b00      	cmp	r3, #0
100040e8:	dd25      	ble.n	10004136 <_Z10PrintClearv+0x62>
100040ea:	4b1a      	ldr	r3, [pc, #104]	; (10004154 <_Z10PrintClearv+0x80>)
100040ec:	2600      	movs	r6, #0
100040ee:	4699      	mov	r9, r3
100040f0:	4b19      	ldr	r3, [pc, #100]	; (10004158 <_Z10PrintClearv+0x84>)
	{
		d = &PrintBuf[y*PrintBufWB];
		for (i = PrintBufW; i > 0; i--)
		{
			*d++ = ' ';
100040f2:	2020      	movs	r0, #32
100040f4:	4698      	mov	r8, r3
100040f6:	4b19      	ldr	r3, [pc, #100]	; (1000415c <_Z10PrintClearv+0x88>)
100040f8:	4c19      	ldr	r4, [pc, #100]	; (10004160 <_Z10PrintClearv+0x8c>)
100040fa:	469c      	mov	ip, r3
		d = &PrintBuf[y*PrintBufWB];
100040fc:	464a      	mov	r2, r9
100040fe:	4643      	mov	r3, r8
10004100:	6812      	ldr	r2, [r2, #0]
10004102:	681b      	ldr	r3, [r3, #0]
10004104:	4692      	mov	sl, r2
		for (i = PrintBufW; i > 0; i--)
10004106:	4662      	mov	r2, ip
		d = &PrintBuf[y*PrintBufWB];
10004108:	4373      	muls	r3, r6
		for (i = PrintBufW; i > 0; i--)
1000410a:	6812      	ldr	r2, [r2, #0]
		d = &PrintBuf[y*PrintBufWB];
1000410c:	4453      	add	r3, sl
		for (i = PrintBufW; i > 0; i--)
1000410e:	2a00      	cmp	r2, #0
10004110:	dc04      	bgt.n	1000411c <_Z10PrintClearv+0x48>
10004112:	e010      	b.n	10004136 <_Z10PrintClearv+0x62>
10004114:	3a01      	subs	r2, #1
			*d++ = ' ';
10004116:	3301      	adds	r3, #1
		for (i = PrintBufW; i > 0; i--)
10004118:	2a00      	cmp	r2, #0
1000411a:	d008      	beq.n	1000412e <_Z10PrintClearv+0x5a>
			*d++ = ' ';
1000411c:	7018      	strb	r0, [r3, #0]
			if (!PrintMonoMode) *d++ = col;
1000411e:	7821      	ldrb	r1, [r4, #0]
10004120:	2900      	cmp	r1, #0
10004122:	d1f7      	bne.n	10004114 <_Z10PrintClearv+0x40>
		for (i = PrintBufW; i > 0; i--)
10004124:	3a01      	subs	r2, #1
			if (!PrintMonoMode) *d++ = col;
10004126:	705d      	strb	r5, [r3, #1]
10004128:	3302      	adds	r3, #2
		for (i = PrintBufW; i > 0; i--)
1000412a:	2a00      	cmp	r2, #0
1000412c:	d1f6      	bne.n	1000411c <_Z10PrintClearv+0x48>
	for (y = 0; y < PrintBufH; y++)
1000412e:	683b      	ldr	r3, [r7, #0]
10004130:	3601      	adds	r6, #1
10004132:	42b3      	cmp	r3, r6
10004134:	dce2      	bgt.n	100040fc <_Z10PrintClearv+0x28>
		}
	}
	PrintX = 0;
10004136:	2300      	movs	r3, #0
10004138:	4a0a      	ldr	r2, [pc, #40]	; (10004164 <_Z10PrintClearv+0x90>)
1000413a:	6013      	str	r3, [r2, #0]
	PrintY = 0;
1000413c:	4a0a      	ldr	r2, [pc, #40]	; (10004168 <_Z10PrintClearv+0x94>)
1000413e:	6013      	str	r3, [r2, #0]
}
10004140:	bce0      	pop	{r5, r6, r7}
10004142:	46ba      	mov	sl, r7
10004144:	46b1      	mov	r9, r6
10004146:	46a8      	mov	r8, r5
10004148:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000414a:	46c0      	nop			; (mov r8, r8)
1000414c:	200394da 	.word	0x200394da
10004150:	200380c4 	.word	0x200380c4
10004154:	200380c0 	.word	0x200380c0
10004158:	200380cc 	.word	0x200380cc
1000415c:	200380c8 	.word	0x200380c8
10004160:	200394db 	.word	0x200394db
10004164:	200380d0 	.word	0x200380d0
10004168:	200380d4 	.word	0x200380d4

1000416c <calloc>:
1000416c:	0003      	movs	r3, r0
1000416e:	b510      	push	{r4, lr}
10004170:	000a      	movs	r2, r1
10004172:	4903      	ldr	r1, [pc, #12]	; (10004180 <calloc+0x14>)
10004174:	6808      	ldr	r0, [r1, #0]
10004176:	0019      	movs	r1, r3
10004178:	f000 f804 	bl	10004184 <_calloc_r>
1000417c:	bd10      	pop	{r4, pc}
1000417e:	46c0      	nop			; (mov r8, r8)
10004180:	200026f4 	.word	0x200026f4

10004184 <_calloc_r>:
10004184:	b570      	push	{r4, r5, r6, lr}
10004186:	0c0b      	lsrs	r3, r1, #16
10004188:	2400      	movs	r4, #0
1000418a:	0c15      	lsrs	r5, r2, #16
1000418c:	2b00      	cmp	r3, #0
1000418e:	d128      	bne.n	100041e2 <_calloc_r+0x5e>
10004190:	2d00      	cmp	r5, #0
10004192:	d137      	bne.n	10004204 <_calloc_r+0x80>
10004194:	b28b      	uxth	r3, r1
10004196:	b291      	uxth	r1, r2
10004198:	4359      	muls	r1, r3
1000419a:	f000 f851 	bl	10004240 <_malloc_r>
1000419e:	1e05      	subs	r5, r0, #0
100041a0:	d019      	beq.n	100041d6 <_calloc_r+0x52>
100041a2:	0003      	movs	r3, r0
100041a4:	3b08      	subs	r3, #8
100041a6:	685a      	ldr	r2, [r3, #4]
100041a8:	2303      	movs	r3, #3
100041aa:	439a      	bics	r2, r3
100041ac:	3a04      	subs	r2, #4
100041ae:	2a24      	cmp	r2, #36	; 0x24
100041b0:	d813      	bhi.n	100041da <_calloc_r+0x56>
100041b2:	0003      	movs	r3, r0
100041b4:	2a13      	cmp	r2, #19
100041b6:	d90a      	bls.n	100041ce <_calloc_r+0x4a>
100041b8:	6004      	str	r4, [r0, #0]
100041ba:	6044      	str	r4, [r0, #4]
100041bc:	3308      	adds	r3, #8
100041be:	2a1b      	cmp	r2, #27
100041c0:	d905      	bls.n	100041ce <_calloc_r+0x4a>
100041c2:	6084      	str	r4, [r0, #8]
100041c4:	60c4      	str	r4, [r0, #12]
100041c6:	2a24      	cmp	r2, #36	; 0x24
100041c8:	d025      	beq.n	10004216 <_calloc_r+0x92>
100041ca:	0003      	movs	r3, r0
100041cc:	3310      	adds	r3, #16
100041ce:	2200      	movs	r2, #0
100041d0:	601a      	str	r2, [r3, #0]
100041d2:	605a      	str	r2, [r3, #4]
100041d4:	609a      	str	r2, [r3, #8]
100041d6:	0028      	movs	r0, r5
100041d8:	bd70      	pop	{r4, r5, r6, pc}
100041da:	2100      	movs	r1, #0
100041dc:	f7fc fbd6 	bl	1000098c <__wrap_memset>
100041e0:	e7f9      	b.n	100041d6 <_calloc_r+0x52>
100041e2:	2d00      	cmp	r5, #0
100041e4:	d111      	bne.n	1000420a <_calloc_r+0x86>
100041e6:	1c15      	adds	r5, r2, #0
100041e8:	b289      	uxth	r1, r1
100041ea:	b292      	uxth	r2, r2
100041ec:	434a      	muls	r2, r1
100041ee:	b2ad      	uxth	r5, r5
100041f0:	b29b      	uxth	r3, r3
100041f2:	436b      	muls	r3, r5
100041f4:	0c11      	lsrs	r1, r2, #16
100041f6:	185b      	adds	r3, r3, r1
100041f8:	0c19      	lsrs	r1, r3, #16
100041fa:	d106      	bne.n	1000420a <_calloc_r+0x86>
100041fc:	0419      	lsls	r1, r3, #16
100041fe:	b292      	uxth	r2, r2
10004200:	4311      	orrs	r1, r2
10004202:	e7ca      	b.n	1000419a <_calloc_r+0x16>
10004204:	1c2b      	adds	r3, r5, #0
10004206:	1c0d      	adds	r5, r1, #0
10004208:	e7ee      	b.n	100041e8 <_calloc_r+0x64>
1000420a:	f000 f809 	bl	10004220 <__errno>
1000420e:	230c      	movs	r3, #12
10004210:	2500      	movs	r5, #0
10004212:	6003      	str	r3, [r0, #0]
10004214:	e7df      	b.n	100041d6 <_calloc_r+0x52>
10004216:	0003      	movs	r3, r0
10004218:	6104      	str	r4, [r0, #16]
1000421a:	3318      	adds	r3, #24
1000421c:	6144      	str	r4, [r0, #20]
1000421e:	e7d6      	b.n	100041ce <_calloc_r+0x4a>

10004220 <__errno>:
10004220:	4b01      	ldr	r3, [pc, #4]	; (10004228 <__errno+0x8>)
10004222:	6818      	ldr	r0, [r3, #0]
10004224:	4770      	bx	lr
10004226:	46c0      	nop			; (mov r8, r8)
10004228:	200026f4 	.word	0x200026f4

1000422c <malloc>:
1000422c:	b510      	push	{r4, lr}
1000422e:	4b03      	ldr	r3, [pc, #12]	; (1000423c <malloc+0x10>)
10004230:	0001      	movs	r1, r0
10004232:	6818      	ldr	r0, [r3, #0]
10004234:	f000 f804 	bl	10004240 <_malloc_r>
10004238:	bd10      	pop	{r4, pc}
1000423a:	46c0      	nop			; (mov r8, r8)
1000423c:	200026f4 	.word	0x200026f4

10004240 <_malloc_r>:
10004240:	b5f0      	push	{r4, r5, r6, r7, lr}
10004242:	464e      	mov	r6, r9
10004244:	4645      	mov	r5, r8
10004246:	46de      	mov	lr, fp
10004248:	4657      	mov	r7, sl
1000424a:	b5e0      	push	{r5, r6, r7, lr}
1000424c:	000d      	movs	r5, r1
1000424e:	350b      	adds	r5, #11
10004250:	0006      	movs	r6, r0
10004252:	b083      	sub	sp, #12
10004254:	2d16      	cmp	r5, #22
10004256:	d822      	bhi.n	1000429e <_malloc_r+0x5e>
10004258:	2910      	cmp	r1, #16
1000425a:	d900      	bls.n	1000425e <_malloc_r+0x1e>
1000425c:	e0b2      	b.n	100043c4 <_malloc_r+0x184>
1000425e:	f000 fab1 	bl	100047c4 <__malloc_lock>
10004262:	2510      	movs	r5, #16
10004264:	2318      	movs	r3, #24
10004266:	2002      	movs	r0, #2
10004268:	4fcc      	ldr	r7, [pc, #816]	; (1000459c <_malloc_r+0x35c>)
1000426a:	18fb      	adds	r3, r7, r3
1000426c:	001a      	movs	r2, r3
1000426e:	685c      	ldr	r4, [r3, #4]
10004270:	3a08      	subs	r2, #8
10004272:	4294      	cmp	r4, r2
10004274:	d100      	bne.n	10004278 <_malloc_r+0x38>
10004276:	e0b5      	b.n	100043e4 <_malloc_r+0x1a4>
10004278:	2303      	movs	r3, #3
1000427a:	6862      	ldr	r2, [r4, #4]
1000427c:	439a      	bics	r2, r3
1000427e:	0013      	movs	r3, r2
10004280:	68e2      	ldr	r2, [r4, #12]
10004282:	68a1      	ldr	r1, [r4, #8]
10004284:	60ca      	str	r2, [r1, #12]
10004286:	6091      	str	r1, [r2, #8]
10004288:	2201      	movs	r2, #1
1000428a:	18e3      	adds	r3, r4, r3
1000428c:	6859      	ldr	r1, [r3, #4]
1000428e:	0030      	movs	r0, r6
10004290:	430a      	orrs	r2, r1
10004292:	605a      	str	r2, [r3, #4]
10004294:	f000 fa9e 	bl	100047d4 <__malloc_unlock>
10004298:	0020      	movs	r0, r4
1000429a:	3008      	adds	r0, #8
1000429c:	e095      	b.n	100043ca <_malloc_r+0x18a>
1000429e:	2307      	movs	r3, #7
100042a0:	439d      	bics	r5, r3
100042a2:	d500      	bpl.n	100042a6 <_malloc_r+0x66>
100042a4:	e08e      	b.n	100043c4 <_malloc_r+0x184>
100042a6:	42a9      	cmp	r1, r5
100042a8:	d900      	bls.n	100042ac <_malloc_r+0x6c>
100042aa:	e08b      	b.n	100043c4 <_malloc_r+0x184>
100042ac:	f000 fa8a 	bl	100047c4 <__malloc_lock>
100042b0:	23fc      	movs	r3, #252	; 0xfc
100042b2:	005b      	lsls	r3, r3, #1
100042b4:	429d      	cmp	r5, r3
100042b6:	d200      	bcs.n	100042ba <_malloc_r+0x7a>
100042b8:	e1a7      	b.n	1000460a <_malloc_r+0x3ca>
100042ba:	0a68      	lsrs	r0, r5, #9
100042bc:	d100      	bne.n	100042c0 <_malloc_r+0x80>
100042be:	e08b      	b.n	100043d8 <_malloc_r+0x198>
100042c0:	2804      	cmp	r0, #4
100042c2:	d900      	bls.n	100042c6 <_malloc_r+0x86>
100042c4:	e17a      	b.n	100045bc <_malloc_r+0x37c>
100042c6:	2338      	movs	r3, #56	; 0x38
100042c8:	4698      	mov	r8, r3
100042ca:	09a8      	lsrs	r0, r5, #6
100042cc:	4480      	add	r8, r0
100042ce:	3039      	adds	r0, #57	; 0x39
100042d0:	00c1      	lsls	r1, r0, #3
100042d2:	4fb2      	ldr	r7, [pc, #712]	; (1000459c <_malloc_r+0x35c>)
100042d4:	1879      	adds	r1, r7, r1
100042d6:	684c      	ldr	r4, [r1, #4]
100042d8:	3908      	subs	r1, #8
100042da:	42a1      	cmp	r1, r4
100042dc:	d00e      	beq.n	100042fc <_malloc_r+0xbc>
100042de:	2303      	movs	r3, #3
100042e0:	469c      	mov	ip, r3
100042e2:	e004      	b.n	100042ee <_malloc_r+0xae>
100042e4:	2a00      	cmp	r2, #0
100042e6:	dacb      	bge.n	10004280 <_malloc_r+0x40>
100042e8:	68e4      	ldr	r4, [r4, #12]
100042ea:	42a1      	cmp	r1, r4
100042ec:	d006      	beq.n	100042fc <_malloc_r+0xbc>
100042ee:	4662      	mov	r2, ip
100042f0:	6863      	ldr	r3, [r4, #4]
100042f2:	4393      	bics	r3, r2
100042f4:	1b5a      	subs	r2, r3, r5
100042f6:	2a0f      	cmp	r2, #15
100042f8:	ddf4      	ble.n	100042e4 <_malloc_r+0xa4>
100042fa:	4640      	mov	r0, r8
100042fc:	003a      	movs	r2, r7
100042fe:	693c      	ldr	r4, [r7, #16]
10004300:	3208      	adds	r2, #8
10004302:	4294      	cmp	r4, r2
10004304:	d100      	bne.n	10004308 <_malloc_r+0xc8>
10004306:	e078      	b.n	100043fa <_malloc_r+0x1ba>
10004308:	2303      	movs	r3, #3
1000430a:	6861      	ldr	r1, [r4, #4]
1000430c:	4399      	bics	r1, r3
1000430e:	4689      	mov	r9, r1
10004310:	000b      	movs	r3, r1
10004312:	1b49      	subs	r1, r1, r5
10004314:	290f      	cmp	r1, #15
10004316:	dd00      	ble.n	1000431a <_malloc_r+0xda>
10004318:	e17b      	b.n	10004612 <_malloc_r+0x3d2>
1000431a:	617a      	str	r2, [r7, #20]
1000431c:	613a      	str	r2, [r7, #16]
1000431e:	2900      	cmp	r1, #0
10004320:	dab2      	bge.n	10004288 <_malloc_r+0x48>
10004322:	2280      	movs	r2, #128	; 0x80
10004324:	0092      	lsls	r2, r2, #2
10004326:	4591      	cmp	r9, r2
10004328:	d300      	bcc.n	1000432c <_malloc_r+0xec>
1000432a:	e10f      	b.n	1000454c <_malloc_r+0x30c>
1000432c:	0959      	lsrs	r1, r3, #5
1000432e:	08da      	lsrs	r2, r3, #3
10004330:	2301      	movs	r3, #1
10004332:	408b      	lsls	r3, r1
10004334:	00d2      	lsls	r2, r2, #3
10004336:	6879      	ldr	r1, [r7, #4]
10004338:	19d2      	adds	r2, r2, r7
1000433a:	430b      	orrs	r3, r1
1000433c:	6891      	ldr	r1, [r2, #8]
1000433e:	607b      	str	r3, [r7, #4]
10004340:	60e2      	str	r2, [r4, #12]
10004342:	60a1      	str	r1, [r4, #8]
10004344:	6094      	str	r4, [r2, #8]
10004346:	60cc      	str	r4, [r1, #12]
10004348:	2101      	movs	r1, #1
1000434a:	1082      	asrs	r2, r0, #2
1000434c:	4091      	lsls	r1, r2
1000434e:	4299      	cmp	r1, r3
10004350:	d859      	bhi.n	10004406 <_malloc_r+0x1c6>
10004352:	420b      	tst	r3, r1
10004354:	d105      	bne.n	10004362 <_malloc_r+0x122>
10004356:	2203      	movs	r2, #3
10004358:	4390      	bics	r0, r2
1000435a:	0049      	lsls	r1, r1, #1
1000435c:	3004      	adds	r0, #4
1000435e:	420b      	tst	r3, r1
10004360:	d0fb      	beq.n	1000435a <_malloc_r+0x11a>
10004362:	2303      	movs	r3, #3
10004364:	4698      	mov	r8, r3
10004366:	00c3      	lsls	r3, r0, #3
10004368:	4699      	mov	r9, r3
1000436a:	44b9      	add	r9, r7
1000436c:	46cc      	mov	ip, r9
1000436e:	4682      	mov	sl, r0
10004370:	4663      	mov	r3, ip
10004372:	68dc      	ldr	r4, [r3, #12]
10004374:	45a4      	cmp	ip, r4
10004376:	d107      	bne.n	10004388 <_malloc_r+0x148>
10004378:	e12c      	b.n	100045d4 <_malloc_r+0x394>
1000437a:	2a00      	cmp	r2, #0
1000437c:	db00      	blt.n	10004380 <_malloc_r+0x140>
1000437e:	e135      	b.n	100045ec <_malloc_r+0x3ac>
10004380:	68e4      	ldr	r4, [r4, #12]
10004382:	45a4      	cmp	ip, r4
10004384:	d100      	bne.n	10004388 <_malloc_r+0x148>
10004386:	e125      	b.n	100045d4 <_malloc_r+0x394>
10004388:	4642      	mov	r2, r8
1000438a:	6863      	ldr	r3, [r4, #4]
1000438c:	4393      	bics	r3, r2
1000438e:	1b5a      	subs	r2, r3, r5
10004390:	2a0f      	cmp	r2, #15
10004392:	ddf2      	ble.n	1000437a <_malloc_r+0x13a>
10004394:	2001      	movs	r0, #1
10004396:	4680      	mov	r8, r0
10004398:	1961      	adds	r1, r4, r5
1000439a:	4305      	orrs	r5, r0
1000439c:	6065      	str	r5, [r4, #4]
1000439e:	68a0      	ldr	r0, [r4, #8]
100043a0:	68e5      	ldr	r5, [r4, #12]
100043a2:	3708      	adds	r7, #8
100043a4:	60c5      	str	r5, [r0, #12]
100043a6:	60a8      	str	r0, [r5, #8]
100043a8:	4640      	mov	r0, r8
100043aa:	4310      	orrs	r0, r2
100043ac:	60f9      	str	r1, [r7, #12]
100043ae:	60b9      	str	r1, [r7, #8]
100043b0:	6048      	str	r0, [r1, #4]
100043b2:	60cf      	str	r7, [r1, #12]
100043b4:	0030      	movs	r0, r6
100043b6:	608f      	str	r7, [r1, #8]
100043b8:	50e2      	str	r2, [r4, r3]
100043ba:	f000 fa0b 	bl	100047d4 <__malloc_unlock>
100043be:	0020      	movs	r0, r4
100043c0:	3008      	adds	r0, #8
100043c2:	e002      	b.n	100043ca <_malloc_r+0x18a>
100043c4:	230c      	movs	r3, #12
100043c6:	2000      	movs	r0, #0
100043c8:	6033      	str	r3, [r6, #0]
100043ca:	b003      	add	sp, #12
100043cc:	bcf0      	pop	{r4, r5, r6, r7}
100043ce:	46bb      	mov	fp, r7
100043d0:	46b2      	mov	sl, r6
100043d2:	46a9      	mov	r9, r5
100043d4:	46a0      	mov	r8, r4
100043d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
100043d8:	2180      	movs	r1, #128	; 0x80
100043da:	233f      	movs	r3, #63	; 0x3f
100043dc:	2040      	movs	r0, #64	; 0x40
100043de:	4698      	mov	r8, r3
100043e0:	0089      	lsls	r1, r1, #2
100043e2:	e776      	b.n	100042d2 <_malloc_r+0x92>
100043e4:	68dc      	ldr	r4, [r3, #12]
100043e6:	3002      	adds	r0, #2
100043e8:	42a3      	cmp	r3, r4
100043ea:	d000      	beq.n	100043ee <_malloc_r+0x1ae>
100043ec:	e744      	b.n	10004278 <_malloc_r+0x38>
100043ee:	003a      	movs	r2, r7
100043f0:	693c      	ldr	r4, [r7, #16]
100043f2:	3208      	adds	r2, #8
100043f4:	4294      	cmp	r4, r2
100043f6:	d000      	beq.n	100043fa <_malloc_r+0x1ba>
100043f8:	e786      	b.n	10004308 <_malloc_r+0xc8>
100043fa:	2101      	movs	r1, #1
100043fc:	687b      	ldr	r3, [r7, #4]
100043fe:	1082      	asrs	r2, r0, #2
10004400:	4091      	lsls	r1, r2
10004402:	4299      	cmp	r1, r3
10004404:	d9a5      	bls.n	10004352 <_malloc_r+0x112>
10004406:	2303      	movs	r3, #3
10004408:	68bc      	ldr	r4, [r7, #8]
1000440a:	6862      	ldr	r2, [r4, #4]
1000440c:	439a      	bics	r2, r3
1000440e:	4691      	mov	r9, r2
10004410:	4295      	cmp	r5, r2
10004412:	d803      	bhi.n	1000441c <_malloc_r+0x1dc>
10004414:	1b53      	subs	r3, r2, r5
10004416:	2b0f      	cmp	r3, #15
10004418:	dd00      	ble.n	1000441c <_malloc_r+0x1dc>
1000441a:	e089      	b.n	10004530 <_malloc_r+0x2f0>
1000441c:	0023      	movs	r3, r4
1000441e:	444b      	add	r3, r9
10004420:	4a5f      	ldr	r2, [pc, #380]	; (100045a0 <_malloc_r+0x360>)
10004422:	9301      	str	r3, [sp, #4]
10004424:	4b5f      	ldr	r3, [pc, #380]	; (100045a4 <_malloc_r+0x364>)
10004426:	4693      	mov	fp, r2
10004428:	681b      	ldr	r3, [r3, #0]
1000442a:	6812      	ldr	r2, [r2, #0]
1000442c:	18eb      	adds	r3, r5, r3
1000442e:	3201      	adds	r2, #1
10004430:	d100      	bne.n	10004434 <_malloc_r+0x1f4>
10004432:	e13d      	b.n	100046b0 <_malloc_r+0x470>
10004434:	4a5c      	ldr	r2, [pc, #368]	; (100045a8 <_malloc_r+0x368>)
10004436:	4694      	mov	ip, r2
10004438:	4463      	add	r3, ip
1000443a:	0b1b      	lsrs	r3, r3, #12
1000443c:	031b      	lsls	r3, r3, #12
1000443e:	9300      	str	r3, [sp, #0]
10004440:	0030      	movs	r0, r6
10004442:	9900      	ldr	r1, [sp, #0]
10004444:	f000 f9ce 	bl	100047e4 <_sbrk_r>
10004448:	0003      	movs	r3, r0
1000444a:	4680      	mov	r8, r0
1000444c:	3301      	adds	r3, #1
1000444e:	d100      	bne.n	10004452 <_malloc_r+0x212>
10004450:	e0fa      	b.n	10004648 <_malloc_r+0x408>
10004452:	9b01      	ldr	r3, [sp, #4]
10004454:	4283      	cmp	r3, r0
10004456:	d900      	bls.n	1000445a <_malloc_r+0x21a>
10004458:	e0f4      	b.n	10004644 <_malloc_r+0x404>
1000445a:	4b54      	ldr	r3, [pc, #336]	; (100045ac <_malloc_r+0x36c>)
1000445c:	9800      	ldr	r0, [sp, #0]
1000445e:	001a      	movs	r2, r3
10004460:	469a      	mov	sl, r3
10004462:	6812      	ldr	r2, [r2, #0]
10004464:	0003      	movs	r3, r0
10004466:	4694      	mov	ip, r2
10004468:	4651      	mov	r1, sl
1000446a:	4463      	add	r3, ip
1000446c:	600b      	str	r3, [r1, #0]
1000446e:	9901      	ldr	r1, [sp, #4]
10004470:	001a      	movs	r2, r3
10004472:	4541      	cmp	r1, r8
10004474:	d100      	bne.n	10004478 <_malloc_r+0x238>
10004476:	e151      	b.n	1000471c <_malloc_r+0x4dc>
10004478:	465b      	mov	r3, fp
1000447a:	681b      	ldr	r3, [r3, #0]
1000447c:	3301      	adds	r3, #1
1000447e:	d100      	bne.n	10004482 <_malloc_r+0x242>
10004480:	e156      	b.n	10004730 <_malloc_r+0x4f0>
10004482:	4643      	mov	r3, r8
10004484:	9901      	ldr	r1, [sp, #4]
10004486:	1a5b      	subs	r3, r3, r1
10004488:	189a      	adds	r2, r3, r2
1000448a:	4653      	mov	r3, sl
1000448c:	601a      	str	r2, [r3, #0]
1000448e:	2307      	movs	r3, #7
10004490:	4642      	mov	r2, r8
10004492:	4641      	mov	r1, r8
10004494:	401a      	ands	r2, r3
10004496:	9201      	str	r2, [sp, #4]
10004498:	4219      	tst	r1, r3
1000449a:	d100      	bne.n	1000449e <_malloc_r+0x25e>
1000449c:	e112      	b.n	100046c4 <_malloc_r+0x484>
1000449e:	2308      	movs	r3, #8
100044a0:	4698      	mov	r8, r3
100044a2:	1a88      	subs	r0, r1, r2
100044a4:	4b42      	ldr	r3, [pc, #264]	; (100045b0 <_malloc_r+0x370>)
100044a6:	9900      	ldr	r1, [sp, #0]
100044a8:	4480      	add	r8, r0
100044aa:	4441      	add	r1, r8
100044ac:	1a9b      	subs	r3, r3, r2
100044ae:	1a5b      	subs	r3, r3, r1
100044b0:	051b      	lsls	r3, r3, #20
100044b2:	0d1b      	lsrs	r3, r3, #20
100044b4:	9100      	str	r1, [sp, #0]
100044b6:	0030      	movs	r0, r6
100044b8:	0019      	movs	r1, r3
100044ba:	469b      	mov	fp, r3
100044bc:	f000 f992 	bl	100047e4 <_sbrk_r>
100044c0:	1c43      	adds	r3, r0, #1
100044c2:	d100      	bne.n	100044c6 <_malloc_r+0x286>
100044c4:	e150      	b.n	10004768 <_malloc_r+0x528>
100044c6:	4643      	mov	r3, r8
100044c8:	1ac0      	subs	r0, r0, r3
100044ca:	0003      	movs	r3, r0
100044cc:	445b      	add	r3, fp
100044ce:	9300      	str	r3, [sp, #0]
100044d0:	4653      	mov	r3, sl
100044d2:	4652      	mov	r2, sl
100044d4:	681b      	ldr	r3, [r3, #0]
100044d6:	2101      	movs	r1, #1
100044d8:	445b      	add	r3, fp
100044da:	6013      	str	r3, [r2, #0]
100044dc:	4642      	mov	r2, r8
100044de:	4640      	mov	r0, r8
100044e0:	60ba      	str	r2, [r7, #8]
100044e2:	9a00      	ldr	r2, [sp, #0]
100044e4:	430a      	orrs	r2, r1
100044e6:	6042      	str	r2, [r0, #4]
100044e8:	42bc      	cmp	r4, r7
100044ea:	d100      	bne.n	100044ee <_malloc_r+0x2ae>
100044ec:	e124      	b.n	10004738 <_malloc_r+0x4f8>
100044ee:	464a      	mov	r2, r9
100044f0:	2a0f      	cmp	r2, #15
100044f2:	d800      	bhi.n	100044f6 <_malloc_r+0x2b6>
100044f4:	e122      	b.n	1000473c <_malloc_r+0x4fc>
100044f6:	2007      	movs	r0, #7
100044f8:	3a0c      	subs	r2, #12
100044fa:	4382      	bics	r2, r0
100044fc:	6860      	ldr	r0, [r4, #4]
100044fe:	4001      	ands	r1, r0
10004500:	2005      	movs	r0, #5
10004502:	4311      	orrs	r1, r2
10004504:	6061      	str	r1, [r4, #4]
10004506:	18a1      	adds	r1, r4, r2
10004508:	6048      	str	r0, [r1, #4]
1000450a:	6088      	str	r0, [r1, #8]
1000450c:	2a0f      	cmp	r2, #15
1000450e:	d900      	bls.n	10004512 <_malloc_r+0x2d2>
10004510:	e135      	b.n	1000477e <_malloc_r+0x53e>
10004512:	4642      	mov	r2, r8
10004514:	4644      	mov	r4, r8
10004516:	6852      	ldr	r2, [r2, #4]
10004518:	4926      	ldr	r1, [pc, #152]	; (100045b4 <_malloc_r+0x374>)
1000451a:	6808      	ldr	r0, [r1, #0]
1000451c:	4298      	cmp	r0, r3
1000451e:	d200      	bcs.n	10004522 <_malloc_r+0x2e2>
10004520:	600b      	str	r3, [r1, #0]
10004522:	4925      	ldr	r1, [pc, #148]	; (100045b8 <_malloc_r+0x378>)
10004524:	6808      	ldr	r0, [r1, #0]
10004526:	4298      	cmp	r0, r3
10004528:	d300      	bcc.n	1000452c <_malloc_r+0x2ec>
1000452a:	e08f      	b.n	1000464c <_malloc_r+0x40c>
1000452c:	600b      	str	r3, [r1, #0]
1000452e:	e08d      	b.n	1000464c <_malloc_r+0x40c>
10004530:	2201      	movs	r2, #1
10004532:	0029      	movs	r1, r5
10004534:	4313      	orrs	r3, r2
10004536:	4311      	orrs	r1, r2
10004538:	1965      	adds	r5, r4, r5
1000453a:	6061      	str	r1, [r4, #4]
1000453c:	0030      	movs	r0, r6
1000453e:	60bd      	str	r5, [r7, #8]
10004540:	606b      	str	r3, [r5, #4]
10004542:	f000 f947 	bl	100047d4 <__malloc_unlock>
10004546:	0020      	movs	r0, r4
10004548:	3008      	adds	r0, #8
1000454a:	e73e      	b.n	100043ca <_malloc_r+0x18a>
1000454c:	0a5a      	lsrs	r2, r3, #9
1000454e:	2a04      	cmp	r2, #4
10004550:	d972      	bls.n	10004638 <_malloc_r+0x3f8>
10004552:	2a14      	cmp	r2, #20
10004554:	d900      	bls.n	10004558 <_malloc_r+0x318>
10004556:	e0c5      	b.n	100046e4 <_malloc_r+0x4a4>
10004558:	0011      	movs	r1, r2
1000455a:	325c      	adds	r2, #92	; 0x5c
1000455c:	315b      	adds	r1, #91	; 0x5b
1000455e:	00d2      	lsls	r2, r2, #3
10004560:	2308      	movs	r3, #8
10004562:	425b      	negs	r3, r3
10004564:	469c      	mov	ip, r3
10004566:	18ba      	adds	r2, r7, r2
10004568:	4494      	add	ip, r2
1000456a:	4663      	mov	r3, ip
1000456c:	689a      	ldr	r2, [r3, #8]
1000456e:	2303      	movs	r3, #3
10004570:	4698      	mov	r8, r3
10004572:	4594      	cmp	ip, r2
10004574:	d100      	bne.n	10004578 <_malloc_r+0x338>
10004576:	e09e      	b.n	100046b6 <_malloc_r+0x476>
10004578:	4643      	mov	r3, r8
1000457a:	6851      	ldr	r1, [r2, #4]
1000457c:	4399      	bics	r1, r3
1000457e:	4549      	cmp	r1, r9
10004580:	d902      	bls.n	10004588 <_malloc_r+0x348>
10004582:	6892      	ldr	r2, [r2, #8]
10004584:	4594      	cmp	ip, r2
10004586:	d1f7      	bne.n	10004578 <_malloc_r+0x338>
10004588:	68d3      	ldr	r3, [r2, #12]
1000458a:	469c      	mov	ip, r3
1000458c:	687b      	ldr	r3, [r7, #4]
1000458e:	4661      	mov	r1, ip
10004590:	60a2      	str	r2, [r4, #8]
10004592:	60e1      	str	r1, [r4, #12]
10004594:	608c      	str	r4, [r1, #8]
10004596:	60d4      	str	r4, [r2, #12]
10004598:	e6d6      	b.n	10004348 <_malloc_r+0x108>
1000459a:	46c0      	nop			; (mov r8, r8)
1000459c:	20002b20 	.word	0x20002b20
100045a0:	20002f28 	.word	0x20002f28
100045a4:	20039350 	.word	0x20039350
100045a8:	0000100f 	.word	0x0000100f
100045ac:	20039320 	.word	0x20039320
100045b0:	00001008 	.word	0x00001008
100045b4:	20039348 	.word	0x20039348
100045b8:	2003934c 	.word	0x2003934c
100045bc:	2814      	cmp	r0, #20
100045be:	d952      	bls.n	10004666 <_malloc_r+0x426>
100045c0:	2854      	cmp	r0, #84	; 0x54
100045c2:	d900      	bls.n	100045c6 <_malloc_r+0x386>
100045c4:	e096      	b.n	100046f4 <_malloc_r+0x4b4>
100045c6:	236e      	movs	r3, #110	; 0x6e
100045c8:	4698      	mov	r8, r3
100045ca:	0b28      	lsrs	r0, r5, #12
100045cc:	4480      	add	r8, r0
100045ce:	306f      	adds	r0, #111	; 0x6f
100045d0:	00c1      	lsls	r1, r0, #3
100045d2:	e67e      	b.n	100042d2 <_malloc_r+0x92>
100045d4:	2308      	movs	r3, #8
100045d6:	469b      	mov	fp, r3
100045d8:	3b07      	subs	r3, #7
100045da:	44dc      	add	ip, fp
100045dc:	469b      	mov	fp, r3
100045de:	44da      	add	sl, fp
100045e0:	4643      	mov	r3, r8
100045e2:	4652      	mov	r2, sl
100045e4:	4213      	tst	r3, r2
100045e6:	d000      	beq.n	100045ea <_malloc_r+0x3aa>
100045e8:	e6c2      	b.n	10004370 <_malloc_r+0x130>
100045ea:	e04c      	b.n	10004686 <_malloc_r+0x446>
100045ec:	2201      	movs	r2, #1
100045ee:	18e3      	adds	r3, r4, r3
100045f0:	6859      	ldr	r1, [r3, #4]
100045f2:	0030      	movs	r0, r6
100045f4:	430a      	orrs	r2, r1
100045f6:	605a      	str	r2, [r3, #4]
100045f8:	68e3      	ldr	r3, [r4, #12]
100045fa:	68a2      	ldr	r2, [r4, #8]
100045fc:	60d3      	str	r3, [r2, #12]
100045fe:	609a      	str	r2, [r3, #8]
10004600:	f000 f8e8 	bl	100047d4 <__malloc_unlock>
10004604:	0020      	movs	r0, r4
10004606:	3008      	adds	r0, #8
10004608:	e6df      	b.n	100043ca <_malloc_r+0x18a>
1000460a:	002b      	movs	r3, r5
1000460c:	08e8      	lsrs	r0, r5, #3
1000460e:	3308      	adds	r3, #8
10004610:	e62a      	b.n	10004268 <_malloc_r+0x28>
10004612:	2301      	movs	r3, #1
10004614:	1960      	adds	r0, r4, r5
10004616:	431d      	orrs	r5, r3
10004618:	6065      	str	r5, [r4, #4]
1000461a:	6178      	str	r0, [r7, #20]
1000461c:	6138      	str	r0, [r7, #16]
1000461e:	60c2      	str	r2, [r0, #12]
10004620:	6082      	str	r2, [r0, #8]
10004622:	001a      	movs	r2, r3
10004624:	464b      	mov	r3, r9
10004626:	430a      	orrs	r2, r1
10004628:	6042      	str	r2, [r0, #4]
1000462a:	0030      	movs	r0, r6
1000462c:	50e1      	str	r1, [r4, r3]
1000462e:	f000 f8d1 	bl	100047d4 <__malloc_unlock>
10004632:	0020      	movs	r0, r4
10004634:	3008      	adds	r0, #8
10004636:	e6c8      	b.n	100043ca <_malloc_r+0x18a>
10004638:	099a      	lsrs	r2, r3, #6
1000463a:	0011      	movs	r1, r2
1000463c:	3239      	adds	r2, #57	; 0x39
1000463e:	3138      	adds	r1, #56	; 0x38
10004640:	00d2      	lsls	r2, r2, #3
10004642:	e78d      	b.n	10004560 <_malloc_r+0x320>
10004644:	42bc      	cmp	r4, r7
10004646:	d060      	beq.n	1000470a <_malloc_r+0x4ca>
10004648:	68bc      	ldr	r4, [r7, #8]
1000464a:	6862      	ldr	r2, [r4, #4]
1000464c:	2303      	movs	r3, #3
1000464e:	439a      	bics	r2, r3
10004650:	1b53      	subs	r3, r2, r5
10004652:	4295      	cmp	r5, r2
10004654:	d802      	bhi.n	1000465c <_malloc_r+0x41c>
10004656:	2b0f      	cmp	r3, #15
10004658:	dd00      	ble.n	1000465c <_malloc_r+0x41c>
1000465a:	e769      	b.n	10004530 <_malloc_r+0x2f0>
1000465c:	0030      	movs	r0, r6
1000465e:	f000 f8b9 	bl	100047d4 <__malloc_unlock>
10004662:	2000      	movs	r0, #0
10004664:	e6b1      	b.n	100043ca <_malloc_r+0x18a>
10004666:	235b      	movs	r3, #91	; 0x5b
10004668:	4698      	mov	r8, r3
1000466a:	4480      	add	r8, r0
1000466c:	305c      	adds	r0, #92	; 0x5c
1000466e:	00c1      	lsls	r1, r0, #3
10004670:	e62f      	b.n	100042d2 <_malloc_r+0x92>
10004672:	2308      	movs	r3, #8
10004674:	425b      	negs	r3, r3
10004676:	469c      	mov	ip, r3
10004678:	44e1      	add	r9, ip
1000467a:	464b      	mov	r3, r9
1000467c:	689b      	ldr	r3, [r3, #8]
1000467e:	3801      	subs	r0, #1
10004680:	454b      	cmp	r3, r9
10004682:	d000      	beq.n	10004686 <_malloc_r+0x446>
10004684:	e098      	b.n	100047b8 <_malloc_r+0x578>
10004686:	4643      	mov	r3, r8
10004688:	4203      	tst	r3, r0
1000468a:	d1f2      	bne.n	10004672 <_malloc_r+0x432>
1000468c:	687b      	ldr	r3, [r7, #4]
1000468e:	438b      	bics	r3, r1
10004690:	607b      	str	r3, [r7, #4]
10004692:	0049      	lsls	r1, r1, #1
10004694:	4299      	cmp	r1, r3
10004696:	d900      	bls.n	1000469a <_malloc_r+0x45a>
10004698:	e6b5      	b.n	10004406 <_malloc_r+0x1c6>
1000469a:	2900      	cmp	r1, #0
1000469c:	d104      	bne.n	100046a8 <_malloc_r+0x468>
1000469e:	e6b2      	b.n	10004406 <_malloc_r+0x1c6>
100046a0:	2204      	movs	r2, #4
100046a2:	4694      	mov	ip, r2
100046a4:	0049      	lsls	r1, r1, #1
100046a6:	44e2      	add	sl, ip
100046a8:	420b      	tst	r3, r1
100046aa:	d0f9      	beq.n	100046a0 <_malloc_r+0x460>
100046ac:	4650      	mov	r0, sl
100046ae:	e65a      	b.n	10004366 <_malloc_r+0x126>
100046b0:	3310      	adds	r3, #16
100046b2:	9300      	str	r3, [sp, #0]
100046b4:	e6c4      	b.n	10004440 <_malloc_r+0x200>
100046b6:	1089      	asrs	r1, r1, #2
100046b8:	3b02      	subs	r3, #2
100046ba:	408b      	lsls	r3, r1
100046bc:	6879      	ldr	r1, [r7, #4]
100046be:	430b      	orrs	r3, r1
100046c0:	607b      	str	r3, [r7, #4]
100046c2:	e764      	b.n	1000458e <_malloc_r+0x34e>
100046c4:	9b00      	ldr	r3, [sp, #0]
100046c6:	0030      	movs	r0, r6
100046c8:	4443      	add	r3, r8
100046ca:	425b      	negs	r3, r3
100046cc:	051b      	lsls	r3, r3, #20
100046ce:	0d1b      	lsrs	r3, r3, #20
100046d0:	0019      	movs	r1, r3
100046d2:	469b      	mov	fp, r3
100046d4:	f000 f886 	bl	100047e4 <_sbrk_r>
100046d8:	1c43      	adds	r3, r0, #1
100046da:	d000      	beq.n	100046de <_malloc_r+0x49e>
100046dc:	e6f3      	b.n	100044c6 <_malloc_r+0x286>
100046de:	2300      	movs	r3, #0
100046e0:	469b      	mov	fp, r3
100046e2:	e6f5      	b.n	100044d0 <_malloc_r+0x290>
100046e4:	2a54      	cmp	r2, #84	; 0x54
100046e6:	d82b      	bhi.n	10004740 <_malloc_r+0x500>
100046e8:	0b1a      	lsrs	r2, r3, #12
100046ea:	0011      	movs	r1, r2
100046ec:	326f      	adds	r2, #111	; 0x6f
100046ee:	316e      	adds	r1, #110	; 0x6e
100046f0:	00d2      	lsls	r2, r2, #3
100046f2:	e735      	b.n	10004560 <_malloc_r+0x320>
100046f4:	23aa      	movs	r3, #170	; 0xaa
100046f6:	005b      	lsls	r3, r3, #1
100046f8:	4298      	cmp	r0, r3
100046fa:	d82b      	bhi.n	10004754 <_malloc_r+0x514>
100046fc:	3bdd      	subs	r3, #221	; 0xdd
100046fe:	4698      	mov	r8, r3
10004700:	0be8      	lsrs	r0, r5, #15
10004702:	4480      	add	r8, r0
10004704:	3078      	adds	r0, #120	; 0x78
10004706:	00c1      	lsls	r1, r0, #3
10004708:	e5e3      	b.n	100042d2 <_malloc_r+0x92>
1000470a:	4b2c      	ldr	r3, [pc, #176]	; (100047bc <_malloc_r+0x57c>)
1000470c:	9a00      	ldr	r2, [sp, #0]
1000470e:	469a      	mov	sl, r3
10004710:	681b      	ldr	r3, [r3, #0]
10004712:	469c      	mov	ip, r3
10004714:	4653      	mov	r3, sl
10004716:	4462      	add	r2, ip
10004718:	601a      	str	r2, [r3, #0]
1000471a:	e6ad      	b.n	10004478 <_malloc_r+0x238>
1000471c:	0509      	lsls	r1, r1, #20
1000471e:	d000      	beq.n	10004722 <_malloc_r+0x4e2>
10004720:	e6aa      	b.n	10004478 <_malloc_r+0x238>
10004722:	0002      	movs	r2, r0
10004724:	68bc      	ldr	r4, [r7, #8]
10004726:	444a      	add	r2, r9
10004728:	3101      	adds	r1, #1
1000472a:	430a      	orrs	r2, r1
1000472c:	6062      	str	r2, [r4, #4]
1000472e:	e6f3      	b.n	10004518 <_malloc_r+0x2d8>
10004730:	465b      	mov	r3, fp
10004732:	4642      	mov	r2, r8
10004734:	601a      	str	r2, [r3, #0]
10004736:	e6aa      	b.n	1000448e <_malloc_r+0x24e>
10004738:	4644      	mov	r4, r8
1000473a:	e6ed      	b.n	10004518 <_malloc_r+0x2d8>
1000473c:	6041      	str	r1, [r0, #4]
1000473e:	e78d      	b.n	1000465c <_malloc_r+0x41c>
10004740:	21aa      	movs	r1, #170	; 0xaa
10004742:	0049      	lsls	r1, r1, #1
10004744:	428a      	cmp	r2, r1
10004746:	d824      	bhi.n	10004792 <_malloc_r+0x552>
10004748:	0bda      	lsrs	r2, r3, #15
1000474a:	0011      	movs	r1, r2
1000474c:	3278      	adds	r2, #120	; 0x78
1000474e:	3177      	adds	r1, #119	; 0x77
10004750:	00d2      	lsls	r2, r2, #3
10004752:	e705      	b.n	10004560 <_malloc_r+0x320>
10004754:	4b1a      	ldr	r3, [pc, #104]	; (100047c0 <_malloc_r+0x580>)
10004756:	4298      	cmp	r0, r3
10004758:	d824      	bhi.n	100047a4 <_malloc_r+0x564>
1000475a:	237c      	movs	r3, #124	; 0x7c
1000475c:	4698      	mov	r8, r3
1000475e:	0ca8      	lsrs	r0, r5, #18
10004760:	4480      	add	r8, r0
10004762:	307d      	adds	r0, #125	; 0x7d
10004764:	00c1      	lsls	r1, r0, #3
10004766:	e5b4      	b.n	100042d2 <_malloc_r+0x92>
10004768:	9a00      	ldr	r2, [sp, #0]
1000476a:	9b01      	ldr	r3, [sp, #4]
1000476c:	4694      	mov	ip, r2
1000476e:	4642      	mov	r2, r8
10004770:	3b08      	subs	r3, #8
10004772:	4463      	add	r3, ip
10004774:	1a9b      	subs	r3, r3, r2
10004776:	9300      	str	r3, [sp, #0]
10004778:	2300      	movs	r3, #0
1000477a:	469b      	mov	fp, r3
1000477c:	e6a8      	b.n	100044d0 <_malloc_r+0x290>
1000477e:	0021      	movs	r1, r4
10004780:	0030      	movs	r0, r6
10004782:	3108      	adds	r1, #8
10004784:	f000 f8bc 	bl	10004900 <_free_r>
10004788:	4653      	mov	r3, sl
1000478a:	68bc      	ldr	r4, [r7, #8]
1000478c:	681b      	ldr	r3, [r3, #0]
1000478e:	6862      	ldr	r2, [r4, #4]
10004790:	e6c2      	b.n	10004518 <_malloc_r+0x2d8>
10004792:	490b      	ldr	r1, [pc, #44]	; (100047c0 <_malloc_r+0x580>)
10004794:	428a      	cmp	r2, r1
10004796:	d80b      	bhi.n	100047b0 <_malloc_r+0x570>
10004798:	0c9a      	lsrs	r2, r3, #18
1000479a:	0011      	movs	r1, r2
1000479c:	327d      	adds	r2, #125	; 0x7d
1000479e:	317c      	adds	r1, #124	; 0x7c
100047a0:	00d2      	lsls	r2, r2, #3
100047a2:	e6dd      	b.n	10004560 <_malloc_r+0x320>
100047a4:	21fe      	movs	r1, #254	; 0xfe
100047a6:	237e      	movs	r3, #126	; 0x7e
100047a8:	207f      	movs	r0, #127	; 0x7f
100047aa:	4698      	mov	r8, r3
100047ac:	0089      	lsls	r1, r1, #2
100047ae:	e590      	b.n	100042d2 <_malloc_r+0x92>
100047b0:	22fe      	movs	r2, #254	; 0xfe
100047b2:	217e      	movs	r1, #126	; 0x7e
100047b4:	0092      	lsls	r2, r2, #2
100047b6:	e6d3      	b.n	10004560 <_malloc_r+0x320>
100047b8:	687b      	ldr	r3, [r7, #4]
100047ba:	e76a      	b.n	10004692 <_malloc_r+0x452>
100047bc:	20039320 	.word	0x20039320
100047c0:	00000554 	.word	0x00000554

100047c4 <__malloc_lock>:
100047c4:	b510      	push	{r4, lr}
100047c6:	4802      	ldr	r0, [pc, #8]	; (100047d0 <__malloc_lock+0xc>)
100047c8:	f000 f97c 	bl	10004ac4 <__retarget_lock_acquire_recursive>
100047cc:	bd10      	pop	{r4, pc}
100047ce:	46c0      	nop			; (mov r8, r8)
100047d0:	2003931c 	.word	0x2003931c

100047d4 <__malloc_unlock>:
100047d4:	b510      	push	{r4, lr}
100047d6:	4802      	ldr	r0, [pc, #8]	; (100047e0 <__malloc_unlock+0xc>)
100047d8:	f000 f976 	bl	10004ac8 <__retarget_lock_release_recursive>
100047dc:	bd10      	pop	{r4, pc}
100047de:	46c0      	nop			; (mov r8, r8)
100047e0:	2003931c 	.word	0x2003931c

100047e4 <_sbrk_r>:
100047e4:	2300      	movs	r3, #0
100047e6:	b570      	push	{r4, r5, r6, lr}
100047e8:	4d06      	ldr	r5, [pc, #24]	; (10004804 <_sbrk_r+0x20>)
100047ea:	0004      	movs	r4, r0
100047ec:	0008      	movs	r0, r1
100047ee:	602b      	str	r3, [r5, #0]
100047f0:	f7fd f9f0 	bl	10001bd4 <_sbrk>
100047f4:	1c43      	adds	r3, r0, #1
100047f6:	d000      	beq.n	100047fa <_sbrk_r+0x16>
100047f8:	bd70      	pop	{r4, r5, r6, pc}
100047fa:	682b      	ldr	r3, [r5, #0]
100047fc:	2b00      	cmp	r3, #0
100047fe:	d0fb      	beq.n	100047f8 <_sbrk_r+0x14>
10004800:	6023      	str	r3, [r4, #0]
10004802:	e7f9      	b.n	100047f8 <_sbrk_r+0x14>
10004804:	2003949c 	.word	0x2003949c

10004808 <strlen>:
10004808:	b510      	push	{r4, lr}
1000480a:	0783      	lsls	r3, r0, #30
1000480c:	d00a      	beq.n	10004824 <strlen+0x1c>
1000480e:	0003      	movs	r3, r0
10004810:	2103      	movs	r1, #3
10004812:	e002      	b.n	1000481a <strlen+0x12>
10004814:	3301      	adds	r3, #1
10004816:	420b      	tst	r3, r1
10004818:	d005      	beq.n	10004826 <strlen+0x1e>
1000481a:	781a      	ldrb	r2, [r3, #0]
1000481c:	2a00      	cmp	r2, #0
1000481e:	d1f9      	bne.n	10004814 <strlen+0xc>
10004820:	1a18      	subs	r0, r3, r0
10004822:	bd10      	pop	{r4, pc}
10004824:	0003      	movs	r3, r0
10004826:	6819      	ldr	r1, [r3, #0]
10004828:	4a0c      	ldr	r2, [pc, #48]	; (1000485c <strlen+0x54>)
1000482a:	4c0d      	ldr	r4, [pc, #52]	; (10004860 <strlen+0x58>)
1000482c:	188a      	adds	r2, r1, r2
1000482e:	438a      	bics	r2, r1
10004830:	4222      	tst	r2, r4
10004832:	d10f      	bne.n	10004854 <strlen+0x4c>
10004834:	6859      	ldr	r1, [r3, #4]
10004836:	4a09      	ldr	r2, [pc, #36]	; (1000485c <strlen+0x54>)
10004838:	3304      	adds	r3, #4
1000483a:	188a      	adds	r2, r1, r2
1000483c:	438a      	bics	r2, r1
1000483e:	4222      	tst	r2, r4
10004840:	d108      	bne.n	10004854 <strlen+0x4c>
10004842:	6859      	ldr	r1, [r3, #4]
10004844:	4a05      	ldr	r2, [pc, #20]	; (1000485c <strlen+0x54>)
10004846:	3304      	adds	r3, #4
10004848:	188a      	adds	r2, r1, r2
1000484a:	438a      	bics	r2, r1
1000484c:	4222      	tst	r2, r4
1000484e:	d0f1      	beq.n	10004834 <strlen+0x2c>
10004850:	e000      	b.n	10004854 <strlen+0x4c>
10004852:	3301      	adds	r3, #1
10004854:	781a      	ldrb	r2, [r3, #0]
10004856:	2a00      	cmp	r2, #0
10004858:	d1fb      	bne.n	10004852 <strlen+0x4a>
1000485a:	e7e1      	b.n	10004820 <strlen+0x18>
1000485c:	fefefeff 	.word	0xfefefeff
10004860:	80808080 	.word	0x80808080

10004864 <_malloc_trim_r>:
10004864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10004866:	000c      	movs	r4, r1
10004868:	0005      	movs	r5, r0
1000486a:	f7ff ffab 	bl	100047c4 <__malloc_lock>
1000486e:	4f20      	ldr	r7, [pc, #128]	; (100048f0 <_malloc_trim_r+0x8c>)
10004870:	68bb      	ldr	r3, [r7, #8]
10004872:	685e      	ldr	r6, [r3, #4]
10004874:	2303      	movs	r3, #3
10004876:	439e      	bics	r6, r3
10004878:	4b1e      	ldr	r3, [pc, #120]	; (100048f4 <_malloc_trim_r+0x90>)
1000487a:	1b34      	subs	r4, r6, r4
1000487c:	469c      	mov	ip, r3
1000487e:	4464      	add	r4, ip
10004880:	0b24      	lsrs	r4, r4, #12
10004882:	3c01      	subs	r4, #1
10004884:	3311      	adds	r3, #17
10004886:	0324      	lsls	r4, r4, #12
10004888:	429c      	cmp	r4, r3
1000488a:	db07      	blt.n	1000489c <_malloc_trim_r+0x38>
1000488c:	2100      	movs	r1, #0
1000488e:	0028      	movs	r0, r5
10004890:	f7ff ffa8 	bl	100047e4 <_sbrk_r>
10004894:	68bb      	ldr	r3, [r7, #8]
10004896:	199b      	adds	r3, r3, r6
10004898:	4298      	cmp	r0, r3
1000489a:	d004      	beq.n	100048a6 <_malloc_trim_r+0x42>
1000489c:	0028      	movs	r0, r5
1000489e:	f7ff ff99 	bl	100047d4 <__malloc_unlock>
100048a2:	2000      	movs	r0, #0
100048a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100048a6:	0028      	movs	r0, r5
100048a8:	4261      	negs	r1, r4
100048aa:	f7ff ff9b 	bl	100047e4 <_sbrk_r>
100048ae:	1c43      	adds	r3, r0, #1
100048b0:	d00d      	beq.n	100048ce <_malloc_trim_r+0x6a>
100048b2:	2201      	movs	r2, #1
100048b4:	68bb      	ldr	r3, [r7, #8]
100048b6:	1b36      	subs	r6, r6, r4
100048b8:	4316      	orrs	r6, r2
100048ba:	605e      	str	r6, [r3, #4]
100048bc:	4b0e      	ldr	r3, [pc, #56]	; (100048f8 <_malloc_trim_r+0x94>)
100048be:	0028      	movs	r0, r5
100048c0:	681a      	ldr	r2, [r3, #0]
100048c2:	1b14      	subs	r4, r2, r4
100048c4:	601c      	str	r4, [r3, #0]
100048c6:	f7ff ff85 	bl	100047d4 <__malloc_unlock>
100048ca:	2001      	movs	r0, #1
100048cc:	e7ea      	b.n	100048a4 <_malloc_trim_r+0x40>
100048ce:	2100      	movs	r1, #0
100048d0:	0028      	movs	r0, r5
100048d2:	f7ff ff87 	bl	100047e4 <_sbrk_r>
100048d6:	68ba      	ldr	r2, [r7, #8]
100048d8:	1a83      	subs	r3, r0, r2
100048da:	2b0f      	cmp	r3, #15
100048dc:	ddde      	ble.n	1000489c <_malloc_trim_r+0x38>
100048de:	4907      	ldr	r1, [pc, #28]	; (100048fc <_malloc_trim_r+0x98>)
100048e0:	6809      	ldr	r1, [r1, #0]
100048e2:	1a40      	subs	r0, r0, r1
100048e4:	4904      	ldr	r1, [pc, #16]	; (100048f8 <_malloc_trim_r+0x94>)
100048e6:	6008      	str	r0, [r1, #0]
100048e8:	2101      	movs	r1, #1
100048ea:	430b      	orrs	r3, r1
100048ec:	6053      	str	r3, [r2, #4]
100048ee:	e7d5      	b.n	1000489c <_malloc_trim_r+0x38>
100048f0:	20002b20 	.word	0x20002b20
100048f4:	00000fef 	.word	0x00000fef
100048f8:	20039320 	.word	0x20039320
100048fc:	20002f28 	.word	0x20002f28

10004900 <_free_r>:
10004900:	b5f0      	push	{r4, r5, r6, r7, lr}
10004902:	46c6      	mov	lr, r8
10004904:	0005      	movs	r5, r0
10004906:	000c      	movs	r4, r1
10004908:	b500      	push	{lr}
1000490a:	2900      	cmp	r1, #0
1000490c:	d04f      	beq.n	100049ae <_free_r+0xae>
1000490e:	f7ff ff59 	bl	100047c4 <__malloc_lock>
10004912:	0021      	movs	r1, r4
10004914:	3908      	subs	r1, #8
10004916:	684c      	ldr	r4, [r1, #4]
10004918:	2601      	movs	r6, #1
1000491a:	0022      	movs	r2, r4
1000491c:	2003      	movs	r0, #3
1000491e:	43b2      	bics	r2, r6
10004920:	188f      	adds	r7, r1, r2
10004922:	687b      	ldr	r3, [r7, #4]
10004924:	4383      	bics	r3, r0
10004926:	4862      	ldr	r0, [pc, #392]	; (10004ab0 <_free_r+0x1b0>)
10004928:	4698      	mov	r8, r3
1000492a:	6883      	ldr	r3, [r0, #8]
1000492c:	42bb      	cmp	r3, r7
1000492e:	d06a      	beq.n	10004a06 <_free_r+0x106>
10004930:	4643      	mov	r3, r8
10004932:	607b      	str	r3, [r7, #4]
10004934:	4226      	tst	r6, r4
10004936:	d11e      	bne.n	10004976 <_free_r+0x76>
10004938:	2308      	movs	r3, #8
1000493a:	469c      	mov	ip, r3
1000493c:	680c      	ldr	r4, [r1, #0]
1000493e:	4484      	add	ip, r0
10004940:	1b09      	subs	r1, r1, r4
10004942:	1912      	adds	r2, r2, r4
10004944:	688c      	ldr	r4, [r1, #8]
10004946:	4564      	cmp	r4, ip
10004948:	d04f      	beq.n	100049ea <_free_r+0xea>
1000494a:	68cb      	ldr	r3, [r1, #12]
1000494c:	60e3      	str	r3, [r4, #12]
1000494e:	609c      	str	r4, [r3, #8]
10004950:	4643      	mov	r3, r8
10004952:	18fc      	adds	r4, r7, r3
10004954:	6864      	ldr	r4, [r4, #4]
10004956:	4234      	tst	r4, r6
10004958:	d111      	bne.n	1000497e <_free_r+0x7e>
1000495a:	68bb      	ldr	r3, [r7, #8]
1000495c:	4c55      	ldr	r4, [pc, #340]	; (10004ab4 <_free_r+0x1b4>)
1000495e:	4442      	add	r2, r8
10004960:	42a3      	cmp	r3, r4
10004962:	d100      	bne.n	10004966 <_free_r+0x66>
10004964:	e07e      	b.n	10004a64 <_free_r+0x164>
10004966:	68fc      	ldr	r4, [r7, #12]
10004968:	60dc      	str	r4, [r3, #12]
1000496a:	60a3      	str	r3, [r4, #8]
1000496c:	2301      	movs	r3, #1
1000496e:	4313      	orrs	r3, r2
10004970:	604b      	str	r3, [r1, #4]
10004972:	508a      	str	r2, [r1, r2]
10004974:	e006      	b.n	10004984 <_free_r+0x84>
10004976:	18fc      	adds	r4, r7, r3
10004978:	6864      	ldr	r4, [r4, #4]
1000497a:	4234      	tst	r4, r6
1000497c:	d0ed      	beq.n	1000495a <_free_r+0x5a>
1000497e:	4316      	orrs	r6, r2
10004980:	604e      	str	r6, [r1, #4]
10004982:	603a      	str	r2, [r7, #0]
10004984:	2380      	movs	r3, #128	; 0x80
10004986:	009b      	lsls	r3, r3, #2
10004988:	429a      	cmp	r2, r3
1000498a:	d213      	bcs.n	100049b4 <_free_r+0xb4>
1000498c:	0954      	lsrs	r4, r2, #5
1000498e:	08d3      	lsrs	r3, r2, #3
10004990:	2201      	movs	r2, #1
10004992:	40a2      	lsls	r2, r4
10004994:	6844      	ldr	r4, [r0, #4]
10004996:	00db      	lsls	r3, r3, #3
10004998:	4322      	orrs	r2, r4
1000499a:	6042      	str	r2, [r0, #4]
1000499c:	1818      	adds	r0, r3, r0
1000499e:	6883      	ldr	r3, [r0, #8]
100049a0:	60c8      	str	r0, [r1, #12]
100049a2:	608b      	str	r3, [r1, #8]
100049a4:	6081      	str	r1, [r0, #8]
100049a6:	60d9      	str	r1, [r3, #12]
100049a8:	0028      	movs	r0, r5
100049aa:	f7ff ff13 	bl	100047d4 <__malloc_unlock>
100049ae:	bc80      	pop	{r7}
100049b0:	46b8      	mov	r8, r7
100049b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
100049b4:	0a53      	lsrs	r3, r2, #9
100049b6:	2b04      	cmp	r3, #4
100049b8:	d83e      	bhi.n	10004a38 <_free_r+0x138>
100049ba:	0994      	lsrs	r4, r2, #6
100049bc:	0026      	movs	r6, r4
100049be:	3439      	adds	r4, #57	; 0x39
100049c0:	3638      	adds	r6, #56	; 0x38
100049c2:	00e4      	lsls	r4, r4, #3
100049c4:	1904      	adds	r4, r0, r4
100049c6:	6823      	ldr	r3, [r4, #0]
100049c8:	3c08      	subs	r4, #8
100049ca:	2703      	movs	r7, #3
100049cc:	429c      	cmp	r4, r3
100049ce:	d042      	beq.n	10004a56 <_free_r+0x156>
100049d0:	6858      	ldr	r0, [r3, #4]
100049d2:	43b8      	bics	r0, r7
100049d4:	4290      	cmp	r0, r2
100049d6:	d902      	bls.n	100049de <_free_r+0xde>
100049d8:	689b      	ldr	r3, [r3, #8]
100049da:	429c      	cmp	r4, r3
100049dc:	d1f8      	bne.n	100049d0 <_free_r+0xd0>
100049de:	68dc      	ldr	r4, [r3, #12]
100049e0:	60cc      	str	r4, [r1, #12]
100049e2:	608b      	str	r3, [r1, #8]
100049e4:	60a1      	str	r1, [r4, #8]
100049e6:	60d9      	str	r1, [r3, #12]
100049e8:	e7de      	b.n	100049a8 <_free_r+0xa8>
100049ea:	4643      	mov	r3, r8
100049ec:	18f8      	adds	r0, r7, r3
100049ee:	6840      	ldr	r0, [r0, #4]
100049f0:	4230      	tst	r0, r6
100049f2:	d157      	bne.n	10004aa4 <_free_r+0x1a4>
100049f4:	68fb      	ldr	r3, [r7, #12]
100049f6:	68b8      	ldr	r0, [r7, #8]
100049f8:	4442      	add	r2, r8
100049fa:	4316      	orrs	r6, r2
100049fc:	60c3      	str	r3, [r0, #12]
100049fe:	6098      	str	r0, [r3, #8]
10004a00:	604e      	str	r6, [r1, #4]
10004a02:	508a      	str	r2, [r1, r2]
10004a04:	e7d0      	b.n	100049a8 <_free_r+0xa8>
10004a06:	0013      	movs	r3, r2
10004a08:	4443      	add	r3, r8
10004a0a:	4226      	tst	r6, r4
10004a0c:	d106      	bne.n	10004a1c <_free_r+0x11c>
10004a0e:	680a      	ldr	r2, [r1, #0]
10004a10:	1a89      	subs	r1, r1, r2
10004a12:	688c      	ldr	r4, [r1, #8]
10004a14:	189b      	adds	r3, r3, r2
10004a16:	68ca      	ldr	r2, [r1, #12]
10004a18:	60e2      	str	r2, [r4, #12]
10004a1a:	6094      	str	r4, [r2, #8]
10004a1c:	2201      	movs	r2, #1
10004a1e:	431a      	orrs	r2, r3
10004a20:	604a      	str	r2, [r1, #4]
10004a22:	4a25      	ldr	r2, [pc, #148]	; (10004ab8 <_free_r+0x1b8>)
10004a24:	6081      	str	r1, [r0, #8]
10004a26:	6812      	ldr	r2, [r2, #0]
10004a28:	429a      	cmp	r2, r3
10004a2a:	d8bd      	bhi.n	100049a8 <_free_r+0xa8>
10004a2c:	4b23      	ldr	r3, [pc, #140]	; (10004abc <_free_r+0x1bc>)
10004a2e:	0028      	movs	r0, r5
10004a30:	6819      	ldr	r1, [r3, #0]
10004a32:	f7ff ff17 	bl	10004864 <_malloc_trim_r>
10004a36:	e7b7      	b.n	100049a8 <_free_r+0xa8>
10004a38:	2b14      	cmp	r3, #20
10004a3a:	d907      	bls.n	10004a4c <_free_r+0x14c>
10004a3c:	2b54      	cmp	r3, #84	; 0x54
10004a3e:	d81a      	bhi.n	10004a76 <_free_r+0x176>
10004a40:	0b14      	lsrs	r4, r2, #12
10004a42:	0026      	movs	r6, r4
10004a44:	346f      	adds	r4, #111	; 0x6f
10004a46:	366e      	adds	r6, #110	; 0x6e
10004a48:	00e4      	lsls	r4, r4, #3
10004a4a:	e7bb      	b.n	100049c4 <_free_r+0xc4>
10004a4c:	001e      	movs	r6, r3
10004a4e:	335c      	adds	r3, #92	; 0x5c
10004a50:	365b      	adds	r6, #91	; 0x5b
10004a52:	00dc      	lsls	r4, r3, #3
10004a54:	e7b6      	b.n	100049c4 <_free_r+0xc4>
10004a56:	2201      	movs	r2, #1
10004a58:	10b6      	asrs	r6, r6, #2
10004a5a:	40b2      	lsls	r2, r6
10004a5c:	6846      	ldr	r6, [r0, #4]
10004a5e:	4332      	orrs	r2, r6
10004a60:	6042      	str	r2, [r0, #4]
10004a62:	e7bd      	b.n	100049e0 <_free_r+0xe0>
10004a64:	60d9      	str	r1, [r3, #12]
10004a66:	6099      	str	r1, [r3, #8]
10004a68:	60cb      	str	r3, [r1, #12]
10004a6a:	608b      	str	r3, [r1, #8]
10004a6c:	2301      	movs	r3, #1
10004a6e:	4313      	orrs	r3, r2
10004a70:	604b      	str	r3, [r1, #4]
10004a72:	508a      	str	r2, [r1, r2]
10004a74:	e798      	b.n	100049a8 <_free_r+0xa8>
10004a76:	24aa      	movs	r4, #170	; 0xaa
10004a78:	0064      	lsls	r4, r4, #1
10004a7a:	42a3      	cmp	r3, r4
10004a7c:	d805      	bhi.n	10004a8a <_free_r+0x18a>
10004a7e:	0bd4      	lsrs	r4, r2, #15
10004a80:	0026      	movs	r6, r4
10004a82:	3478      	adds	r4, #120	; 0x78
10004a84:	3677      	adds	r6, #119	; 0x77
10004a86:	00e4      	lsls	r4, r4, #3
10004a88:	e79c      	b.n	100049c4 <_free_r+0xc4>
10004a8a:	4c0d      	ldr	r4, [pc, #52]	; (10004ac0 <_free_r+0x1c0>)
10004a8c:	42a3      	cmp	r3, r4
10004a8e:	d805      	bhi.n	10004a9c <_free_r+0x19c>
10004a90:	0c94      	lsrs	r4, r2, #18
10004a92:	0026      	movs	r6, r4
10004a94:	347d      	adds	r4, #125	; 0x7d
10004a96:	367c      	adds	r6, #124	; 0x7c
10004a98:	00e4      	lsls	r4, r4, #3
10004a9a:	e793      	b.n	100049c4 <_free_r+0xc4>
10004a9c:	24fe      	movs	r4, #254	; 0xfe
10004a9e:	267e      	movs	r6, #126	; 0x7e
10004aa0:	00a4      	lsls	r4, r4, #2
10004aa2:	e78f      	b.n	100049c4 <_free_r+0xc4>
10004aa4:	0033      	movs	r3, r6
10004aa6:	4313      	orrs	r3, r2
10004aa8:	604b      	str	r3, [r1, #4]
10004aaa:	603a      	str	r2, [r7, #0]
10004aac:	e77c      	b.n	100049a8 <_free_r+0xa8>
10004aae:	46c0      	nop			; (mov r8, r8)
10004ab0:	20002b20 	.word	0x20002b20
10004ab4:	20002b28 	.word	0x20002b28
10004ab8:	20002f2c 	.word	0x20002f2c
10004abc:	20039350 	.word	0x20039350
10004ac0:	00000554 	.word	0x00000554

10004ac4 <__retarget_lock_acquire_recursive>:
10004ac4:	4770      	bx	lr
10004ac6:	46c0      	nop			; (mov r8, r8)

10004ac8 <__retarget_lock_release_recursive>:
10004ac8:	4770      	bx	lr
10004aca:	46c0      	nop			; (mov r8, r8)

10004acc <_fini>:
10004acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10004ace:	46c0      	nop			; (mov r8, r8)

10004ad0 <__mutex_exit_veneer>:
10004ad0:	b401      	push	{r0}
10004ad2:	4802      	ldr	r0, [pc, #8]	; (10004adc <__mutex_exit_veneer+0xc>)
10004ad4:	4684      	mov	ip, r0
10004ad6:	bc01      	pop	{r0}
10004ad8:	4760      	bx	ip
10004ada:	bf00      	nop
10004adc:	20001fb5 	.word	0x20001fb5

10004ae0 <____aeabi_ldiv0_veneer>:
10004ae0:	b401      	push	{r0}
10004ae2:	4802      	ldr	r0, [pc, #8]	; (10004aec <____aeabi_ldiv0_veneer+0xc>)
10004ae4:	4684      	mov	ip, r0
10004ae6:	bc01      	pop	{r0}
10004ae8:	4760      	bx	ip
10004aea:	bf00      	nop
10004aec:	200025b5 	.word	0x200025b5

10004af0 <____aeabi_idiv0_veneer>:
10004af0:	b401      	push	{r0}
10004af2:	4802      	ldr	r0, [pc, #8]	; (10004afc <____aeabi_idiv0_veneer+0xc>)
10004af4:	4684      	mov	ip, r0
10004af6:	bc01      	pop	{r0}
10004af8:	4760      	bx	ip
10004afa:	bf00      	nop
10004afc:	200025b5 	.word	0x200025b5

10004b00 <__mutex_try_enter_veneer>:
10004b00:	b401      	push	{r0}
10004b02:	4802      	ldr	r0, [pc, #8]	; (10004b0c <__mutex_try_enter_veneer+0xc>)
10004b04:	4684      	mov	ip, r0
10004b06:	bc01      	pop	{r0}
10004b08:	4760      	bx	ip
10004b0a:	bf00      	nop
10004b0c:	20001f71 	.word	0x20001f71

10004b10 <__flash_do_cmd.constprop.0_veneer>:
10004b10:	b401      	push	{r0}
10004b12:	4802      	ldr	r0, [pc, #8]	; (10004b1c <__flash_do_cmd.constprop.0_veneer+0xc>)
10004b14:	4684      	mov	ip, r0
10004b16:	bc01      	pop	{r0}
10004b18:	4760      	bx	ip
10004b1a:	bf00      	nop
10004b1c:	20001e81 	.word	0x20001e81

10004b20 <__mutex_enter_blocking_veneer>:
10004b20:	b401      	push	{r0}
10004b22:	4802      	ldr	r0, [pc, #8]	; (10004b2c <__mutex_enter_blocking_veneer+0xc>)
10004b24:	4684      	mov	ip, r0
10004b26:	bc01      	pop	{r0}
10004b28:	4760      	bx	ip
10004b2a:	bf00      	nop
10004b2c:	20001f25 	.word	0x20001f25

Disassembly of section .data:

200000c0 <RenderAText>:
200000c0:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
200000c2:	4644      	mov	r4, r8
200000c4:	b410      	push	{r4}
200000c6:	9c09      	ldr	r4, [sp, #36]	; 0x24
200000c8:	4e49      	ldr	r6, [pc, #292]	; (200001f0 <RenderAText_pSioBase>)
200000ca:	6632      	str	r2, [r6, #96]	; 0x60
200000cc:	8a62      	ldrh	r2, [r4, #18]
200000ce:	6672      	str	r2, [r6, #100]	; 0x64
200000d0:	8925      	ldrh	r5, [r4, #8]
200000d2:	2703      	movs	r7, #3
200000d4:	43bd      	bics	r5, r7
200000d6:	9509      	str	r5, [sp, #36]	; 0x24
200000d8:	43b9      	bics	r1, r7
200000da:	43bb      	bics	r3, r7
200000dc:	9303      	str	r3, [sp, #12]
200000de:	6f75      	ldr	r5, [r6, #116]	; 0x74
200000e0:	6f32      	ldr	r2, [r6, #112]	; 0x70
200000e2:	022d      	lsls	r5, r5, #8
200000e4:	6963      	ldr	r3, [r4, #20]
200000e6:	442b      	add	r3, r5
200000e8:	8865      	ldrh	r5, [r4, #2]
200000ea:	436a      	muls	r2, r5
200000ec:	68e5      	ldr	r5, [r4, #12]
200000ee:	442a      	add	r2, r5
200000f0:	9202      	str	r2, [sp, #8]
200000f2:	08ce      	lsrs	r6, r1, #3
200000f4:	4432      	add	r2, r6
200000f6:	4432      	add	r2, r6
200000f8:	69a5      	ldr	r5, [r4, #24]
200000fa:	46a8      	mov	r8, r5
200000fc:	4d3b      	ldr	r5, [pc, #236]	; (200001ec <RenderAText_Addr>)
200000fe:	46ae      	mov	lr, r5
20000100:	074e      	lsls	r6, r1, #29
20000102:	d521      	bpl.n	20000148 <RenderAText+0x88>
20000104:	7856      	ldrb	r6, [r2, #1]
20000106:	4645      	mov	r5, r8
20000108:	0934      	lsrs	r4, r6, #4
2000010a:	5d2c      	ldrb	r4, [r5, r4]
2000010c:	0736      	lsls	r6, r6, #28
2000010e:	0f36      	lsrs	r6, r6, #28
20000110:	5dae      	ldrb	r6, [r5, r6]
20000112:	0225      	lsls	r5, r4, #8
20000114:	4325      	orrs	r5, r4
20000116:	042c      	lsls	r4, r5, #16
20000118:	432c      	orrs	r4, r5
2000011a:	0235      	lsls	r5, r6, #8
2000011c:	4335      	orrs	r5, r6
2000011e:	042e      	lsls	r6, r5, #16
20000120:	432e      	orrs	r6, r5
20000122:	4066      	eors	r6, r4
20000124:	7815      	ldrb	r5, [r2, #0]
20000126:	5d5d      	ldrb	r5, [r3, r5]
20000128:	3202      	adds	r2, #2
2000012a:	00ed      	lsls	r5, r5, #3
2000012c:	4475      	add	r5, lr
2000012e:	686f      	ldr	r7, [r5, #4]
20000130:	4037      	ands	r7, r6
20000132:	4067      	eors	r7, r4
20000134:	c080      	stmia	r0!, {r7}
20000136:	3104      	adds	r1, #4
20000138:	9f09      	ldr	r7, [sp, #36]	; 0x24
2000013a:	42b9      	cmp	r1, r7
2000013c:	d301      	bcc.n	20000142 <RenderAText+0x82>
2000013e:	2100      	movs	r1, #0
20000140:	9a02      	ldr	r2, [sp, #8]
20000142:	9f03      	ldr	r7, [sp, #12]
20000144:	3f04      	subs	r7, #4
20000146:	9703      	str	r7, [sp, #12]
20000148:	9f09      	ldr	r7, [sp, #36]	; 0x24
2000014a:	1a7f      	subs	r7, r7, r1

2000014c <RenderAText_OutLoop>:
2000014c:	9e03      	ldr	r6, [sp, #12]
2000014e:	42b7      	cmp	r7, r6
20000150:	d900      	bls.n	20000154 <RenderAText_OutLoop+0x8>
20000152:	4637      	mov	r7, r6
20000154:	2f08      	cmp	r7, #8
20000156:	d220      	bcs.n	2000019a <RenderAText_Last+0x3e>
20000158:	2f04      	cmp	r7, #4
2000015a:	d31b      	bcc.n	20000194 <RenderAText_Last+0x38>

2000015c <RenderAText_Last>:
2000015c:	7856      	ldrb	r6, [r2, #1]
2000015e:	4645      	mov	r5, r8
20000160:	0934      	lsrs	r4, r6, #4
20000162:	5d2c      	ldrb	r4, [r5, r4]
20000164:	0736      	lsls	r6, r6, #28
20000166:	0f36      	lsrs	r6, r6, #28
20000168:	5dae      	ldrb	r6, [r5, r6]
2000016a:	0225      	lsls	r5, r4, #8
2000016c:	4325      	orrs	r5, r4
2000016e:	042c      	lsls	r4, r5, #16
20000170:	432c      	orrs	r4, r5
20000172:	0235      	lsls	r5, r6, #8
20000174:	4335      	orrs	r5, r6
20000176:	042e      	lsls	r6, r5, #16
20000178:	432e      	orrs	r6, r5
2000017a:	4066      	eors	r6, r4
2000017c:	7815      	ldrb	r5, [r2, #0]
2000017e:	5d5d      	ldrb	r5, [r3, r5]
20000180:	3202      	adds	r2, #2
20000182:	00ed      	lsls	r5, r5, #3
20000184:	4475      	add	r5, lr
20000186:	6829      	ldr	r1, [r5, #0]
20000188:	4031      	ands	r1, r6
2000018a:	4061      	eors	r1, r4
2000018c:	c002      	stmia	r0!, {r1}
2000018e:	9a02      	ldr	r2, [sp, #8]
20000190:	2f04      	cmp	r7, #4
20000192:	d8db      	bhi.n	2000014c <RenderAText_OutLoop>
20000194:	bc10      	pop	{r4}
20000196:	46a0      	mov	r8, r4
20000198:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
2000019a:	08b9      	lsrs	r1, r7, #2
2000019c:	008d      	lsls	r5, r1, #2
2000019e:	1b76      	subs	r6, r6, r5
200001a0:	9603      	str	r6, [sp, #12]
200001a2:	3901      	subs	r1, #1

200001a4 <RenderAText_InLoop>:
200001a4:	7856      	ldrb	r6, [r2, #1]
200001a6:	4645      	mov	r5, r8
200001a8:	0934      	lsrs	r4, r6, #4
200001aa:	5d2c      	ldrb	r4, [r5, r4]
200001ac:	0736      	lsls	r6, r6, #28
200001ae:	0f36      	lsrs	r6, r6, #28
200001b0:	5dae      	ldrb	r6, [r5, r6]
200001b2:	0225      	lsls	r5, r4, #8
200001b4:	4325      	orrs	r5, r4
200001b6:	042c      	lsls	r4, r5, #16
200001b8:	432c      	orrs	r4, r5
200001ba:	0235      	lsls	r5, r6, #8
200001bc:	4335      	orrs	r5, r6
200001be:	042e      	lsls	r6, r5, #16
200001c0:	432e      	orrs	r6, r5
200001c2:	4066      	eors	r6, r4
200001c4:	7815      	ldrb	r5, [r2, #0]
200001c6:	5d5d      	ldrb	r5, [r3, r5]
200001c8:	3202      	adds	r2, #2
200001ca:	00ed      	lsls	r5, r5, #3
200001cc:	4475      	add	r5, lr
200001ce:	682f      	ldr	r7, [r5, #0]
200001d0:	4037      	ands	r7, r6
200001d2:	4067      	eors	r7, r4
200001d4:	c080      	stmia	r0!, {r7}
200001d6:	686f      	ldr	r7, [r5, #4]
200001d8:	4037      	ands	r7, r6
200001da:	4067      	eors	r7, r4
200001dc:	c080      	stmia	r0!, {r7}
200001de:	3902      	subs	r1, #2
200001e0:	d8e0      	bhi.n	200001a4 <RenderAText_InLoop>
200001e2:	9f09      	ldr	r7, [sp, #36]	; 0x24
200001e4:	d0ba      	beq.n	2000015c <RenderAText_Last>
200001e6:	9a02      	ldr	r2, [sp, #8]
200001e8:	e7b0      	b.n	2000014c <RenderAText_OutLoop>
200001ea:	46c0      	nop			; (mov r8, r8)

200001ec <RenderAText_Addr>:
200001ec:	200380d8 	.word	0x200380d8

200001f0 <RenderAText_pSioBase>:
200001f0:	d0000000 	.word	0xd0000000

200001f4 <RenderAttrib8>:
200001f4:	b5fc      	push	{r2, r3, r4, r5, r6, r7, lr}
200001f6:	4644      	mov	r4, r8
200001f8:	b410      	push	{r4}
200001fa:	9c08      	ldr	r4, [sp, #32]
200001fc:	8925      	ldrh	r5, [r4, #8]
200001fe:	2703      	movs	r7, #3
20000200:	43bd      	bics	r5, r7
20000202:	9508      	str	r5, [sp, #32]
20000204:	43b9      	bics	r1, r7
20000206:	43bb      	bics	r3, r7
20000208:	9302      	str	r3, [sp, #8]
2000020a:	08d3      	lsrs	r3, r2, #3
2000020c:	8865      	ldrh	r5, [r4, #2]
2000020e:	436b      	muls	r3, r5
20000210:	6967      	ldr	r7, [r4, #20]
20000212:	443b      	add	r3, r7
20000214:	436a      	muls	r2, r5
20000216:	68e5      	ldr	r5, [r4, #12]
20000218:	442a      	add	r2, r5
2000021a:	9201      	str	r2, [sp, #4]
2000021c:	1a9b      	subs	r3, r3, r2
2000021e:	08ce      	lsrs	r6, r1, #3
20000220:	4432      	add	r2, r6
20000222:	69a5      	ldr	r5, [r4, #24]
20000224:	46a8      	mov	r8, r5
20000226:	4d39      	ldr	r5, [pc, #228]	; (2000030c <RenderAttrib8_Addr>)
20000228:	46ae      	mov	lr, r5
2000022a:	074e      	lsls	r6, r1, #29
2000022c:	d520      	bpl.n	20000270 <RenderAttrib8+0x7c>
2000022e:	5cd6      	ldrb	r6, [r2, r3]
20000230:	4645      	mov	r5, r8
20000232:	0934      	lsrs	r4, r6, #4
20000234:	5d2c      	ldrb	r4, [r5, r4]
20000236:	0736      	lsls	r6, r6, #28
20000238:	0f36      	lsrs	r6, r6, #28
2000023a:	5dae      	ldrb	r6, [r5, r6]
2000023c:	0225      	lsls	r5, r4, #8
2000023e:	4325      	orrs	r5, r4
20000240:	042c      	lsls	r4, r5, #16
20000242:	432c      	orrs	r4, r5
20000244:	0235      	lsls	r5, r6, #8
20000246:	4335      	orrs	r5, r6
20000248:	042e      	lsls	r6, r5, #16
2000024a:	432e      	orrs	r6, r5
2000024c:	4066      	eors	r6, r4
2000024e:	7815      	ldrb	r5, [r2, #0]
20000250:	3201      	adds	r2, #1
20000252:	00ed      	lsls	r5, r5, #3
20000254:	4475      	add	r5, lr
20000256:	686f      	ldr	r7, [r5, #4]
20000258:	4037      	ands	r7, r6
2000025a:	4067      	eors	r7, r4
2000025c:	c080      	stmia	r0!, {r7}
2000025e:	3104      	adds	r1, #4
20000260:	9f08      	ldr	r7, [sp, #32]
20000262:	42b9      	cmp	r1, r7
20000264:	d301      	bcc.n	2000026a <RenderAttrib8+0x76>
20000266:	2100      	movs	r1, #0
20000268:	9a01      	ldr	r2, [sp, #4]
2000026a:	9f02      	ldr	r7, [sp, #8]
2000026c:	3f04      	subs	r7, #4
2000026e:	9702      	str	r7, [sp, #8]
20000270:	9f08      	ldr	r7, [sp, #32]
20000272:	1a7f      	subs	r7, r7, r1

20000274 <RenderAttrib8_OutLoop>:
20000274:	9e02      	ldr	r6, [sp, #8]
20000276:	42b7      	cmp	r7, r6
20000278:	d900      	bls.n	2000027c <RenderAttrib8_OutLoop+0x8>
2000027a:	4637      	mov	r7, r6
2000027c:	2f08      	cmp	r7, #8
2000027e:	d21f      	bcs.n	200002c0 <RenderAttrib8_Last+0x3c>
20000280:	2f04      	cmp	r7, #4
20000282:	d31a      	bcc.n	200002ba <RenderAttrib8_Last+0x36>

20000284 <RenderAttrib8_Last>:
20000284:	5cd6      	ldrb	r6, [r2, r3]
20000286:	4645      	mov	r5, r8
20000288:	0934      	lsrs	r4, r6, #4
2000028a:	5d2c      	ldrb	r4, [r5, r4]
2000028c:	0736      	lsls	r6, r6, #28
2000028e:	0f36      	lsrs	r6, r6, #28
20000290:	5dae      	ldrb	r6, [r5, r6]
20000292:	0225      	lsls	r5, r4, #8
20000294:	4325      	orrs	r5, r4
20000296:	042c      	lsls	r4, r5, #16
20000298:	432c      	orrs	r4, r5
2000029a:	0235      	lsls	r5, r6, #8
2000029c:	4335      	orrs	r5, r6
2000029e:	042e      	lsls	r6, r5, #16
200002a0:	432e      	orrs	r6, r5
200002a2:	4066      	eors	r6, r4
200002a4:	7815      	ldrb	r5, [r2, #0]
200002a6:	3201      	adds	r2, #1
200002a8:	00ed      	lsls	r5, r5, #3
200002aa:	4475      	add	r5, lr
200002ac:	6829      	ldr	r1, [r5, #0]
200002ae:	4031      	ands	r1, r6
200002b0:	4061      	eors	r1, r4
200002b2:	c002      	stmia	r0!, {r1}
200002b4:	9a01      	ldr	r2, [sp, #4]
200002b6:	2f04      	cmp	r7, #4
200002b8:	d8dc      	bhi.n	20000274 <RenderAttrib8_OutLoop>
200002ba:	bc10      	pop	{r4}
200002bc:	46a0      	mov	r8, r4
200002be:	bdfc      	pop	{r2, r3, r4, r5, r6, r7, pc}
200002c0:	08b9      	lsrs	r1, r7, #2
200002c2:	008d      	lsls	r5, r1, #2
200002c4:	1b76      	subs	r6, r6, r5
200002c6:	9602      	str	r6, [sp, #8]
200002c8:	3901      	subs	r1, #1

200002ca <RenderAttrib8_InLoop>:
200002ca:	5cd6      	ldrb	r6, [r2, r3]
200002cc:	4645      	mov	r5, r8
200002ce:	0934      	lsrs	r4, r6, #4
200002d0:	5d2c      	ldrb	r4, [r5, r4]
200002d2:	0736      	lsls	r6, r6, #28
200002d4:	0f36      	lsrs	r6, r6, #28
200002d6:	5dae      	ldrb	r6, [r5, r6]
200002d8:	0225      	lsls	r5, r4, #8
200002da:	4325      	orrs	r5, r4
200002dc:	042c      	lsls	r4, r5, #16
200002de:	432c      	orrs	r4, r5
200002e0:	0235      	lsls	r5, r6, #8
200002e2:	4335      	orrs	r5, r6
200002e4:	042e      	lsls	r6, r5, #16
200002e6:	432e      	orrs	r6, r5
200002e8:	4066      	eors	r6, r4
200002ea:	7817      	ldrb	r7, [r2, #0]
200002ec:	3201      	adds	r2, #1
200002ee:	00ff      	lsls	r7, r7, #3
200002f0:	4477      	add	r7, lr
200002f2:	683d      	ldr	r5, [r7, #0]
200002f4:	4035      	ands	r5, r6
200002f6:	4065      	eors	r5, r4
200002f8:	687f      	ldr	r7, [r7, #4]
200002fa:	4037      	ands	r7, r6
200002fc:	4067      	eors	r7, r4
200002fe:	c0a0      	stmia	r0!, {r5, r7}
20000300:	3902      	subs	r1, #2
20000302:	d8e2      	bhi.n	200002ca <RenderAttrib8_InLoop>
20000304:	9f08      	ldr	r7, [sp, #32]
20000306:	d0bd      	beq.n	20000284 <RenderAttrib8_Last>
20000308:	9a01      	ldr	r2, [sp, #4]
2000030a:	e7b3      	b.n	20000274 <RenderAttrib8_OutLoop>

2000030c <RenderAttrib8_Addr>:
2000030c:	200380d8 	.word	0x200380d8

20000310 <MemSet4>:
20000310:	b5f0      	push	{r4, r5, r6, r7, lr}
20000312:	460b      	mov	r3, r1
20000314:	460c      	mov	r4, r1
20000316:	460d      	mov	r5, r1
20000318:	460e      	mov	r6, r1
2000031a:	460f      	mov	r7, r1
2000031c:	e004      	b.n	20000328 <MemSet4+0x18>
2000031e:	c0fa      	stmia	r0!, {r1, r3, r4, r5, r6, r7}
20000320:	c0fa      	stmia	r0!, {r1, r3, r4, r5, r6, r7}
20000322:	c0fa      	stmia	r0!, {r1, r3, r4, r5, r6, r7}
20000324:	c0fa      	stmia	r0!, {r1, r3, r4, r5, r6, r7}
20000326:	c0fa      	stmia	r0!, {r1, r3, r4, r5, r6, r7}
20000328:	3a1e      	subs	r2, #30
2000032a:	daf8      	bge.n	2000031e <MemSet4+0xe>
2000032c:	321e      	adds	r2, #30
2000032e:	e000      	b.n	20000332 <MemSet4+0x22>
20000330:	c0fa      	stmia	r0!, {r1, r3, r4, r5, r6, r7}
20000332:	3a06      	subs	r2, #6
20000334:	dafc      	bge.n	20000330 <MemSet4+0x20>
20000336:	3206      	adds	r2, #6
20000338:	e000      	b.n	2000033c <MemSet4+0x2c>
2000033a:	c002      	stmia	r0!, {r1}
2000033c:	3a01      	subs	r2, #1
2000033e:	dafc      	bge.n	2000033a <MemSet4+0x2a>
20000340:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

20000344 <RenderCText>:
20000344:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
20000346:	9c08      	ldr	r4, [sp, #32]
20000348:	4e40      	ldr	r6, [pc, #256]	; (2000044c <RenderCText_pSioBase>)
2000034a:	6632      	str	r2, [r6, #96]	; 0x60
2000034c:	8a62      	ldrh	r2, [r4, #18]
2000034e:	6672      	str	r2, [r6, #100]	; 0x64
20000350:	8925      	ldrh	r5, [r4, #8]
20000352:	2703      	movs	r7, #3
20000354:	43bd      	bics	r5, r7
20000356:	9508      	str	r5, [sp, #32]
20000358:	43b9      	bics	r1, r7
2000035a:	43bb      	bics	r3, r7
2000035c:	9302      	str	r3, [sp, #8]
2000035e:	6f75      	ldr	r5, [r6, #116]	; 0x74
20000360:	6f32      	ldr	r2, [r6, #112]	; 0x70
20000362:	022d      	lsls	r5, r5, #8
20000364:	6963      	ldr	r3, [r4, #20]
20000366:	442b      	add	r3, r5
20000368:	8865      	ldrh	r5, [r4, #2]
2000036a:	436a      	muls	r2, r5
2000036c:	68e5      	ldr	r5, [r4, #12]
2000036e:	442a      	add	r2, r5
20000370:	9201      	str	r2, [sp, #4]
20000372:	08ce      	lsrs	r6, r1, #3
20000374:	4432      	add	r2, r6
20000376:	4432      	add	r2, r6
20000378:	4432      	add	r2, r6
2000037a:	4d33      	ldr	r5, [pc, #204]	; (20000448 <RenderCText_Addr>)
2000037c:	46ae      	mov	lr, r5
2000037e:	074e      	lsls	r6, r1, #29
20000380:	d51c      	bpl.n	200003bc <RenderCText+0x78>
20000382:	7815      	ldrb	r5, [r2, #0]
20000384:	5d5d      	ldrb	r5, [r3, r5]
20000386:	7854      	ldrb	r4, [r2, #1]
20000388:	0227      	lsls	r7, r4, #8
2000038a:	4327      	orrs	r7, r4
2000038c:	043c      	lsls	r4, r7, #16
2000038e:	433c      	orrs	r4, r7
20000390:	7896      	ldrb	r6, [r2, #2]
20000392:	3203      	adds	r2, #3
20000394:	0237      	lsls	r7, r6, #8
20000396:	4337      	orrs	r7, r6
20000398:	043e      	lsls	r6, r7, #16
2000039a:	433e      	orrs	r6, r7
2000039c:	4066      	eors	r6, r4
2000039e:	00ed      	lsls	r5, r5, #3
200003a0:	4475      	add	r5, lr
200003a2:	686f      	ldr	r7, [r5, #4]
200003a4:	4037      	ands	r7, r6
200003a6:	4067      	eors	r7, r4
200003a8:	c080      	stmia	r0!, {r7}
200003aa:	3104      	adds	r1, #4
200003ac:	9f08      	ldr	r7, [sp, #32]
200003ae:	42b9      	cmp	r1, r7
200003b0:	d301      	bcc.n	200003b6 <RenderCText+0x72>
200003b2:	2100      	movs	r1, #0
200003b4:	9a01      	ldr	r2, [sp, #4]
200003b6:	9f02      	ldr	r7, [sp, #8]
200003b8:	3f04      	subs	r7, #4
200003ba:	9702      	str	r7, [sp, #8]
200003bc:	9f08      	ldr	r7, [sp, #32]
200003be:	1a7f      	subs	r7, r7, r1

200003c0 <RenderCText_OutLoop>:
200003c0:	9e02      	ldr	r6, [sp, #8]
200003c2:	42b7      	cmp	r7, r6
200003c4:	d900      	bls.n	200003c8 <RenderCText_OutLoop+0x8>
200003c6:	4637      	mov	r7, r6
200003c8:	2f08      	cmp	r7, #8
200003ca:	d219      	bcs.n	20000400 <RenderCText_Last+0x30>
200003cc:	2f04      	cmp	r7, #4
200003ce:	d316      	bcc.n	200003fe <RenderCText_Last+0x2e>

200003d0 <RenderCText_Last>:
200003d0:	7815      	ldrb	r5, [r2, #0]
200003d2:	5d5d      	ldrb	r5, [r3, r5]
200003d4:	7854      	ldrb	r4, [r2, #1]
200003d6:	0221      	lsls	r1, r4, #8
200003d8:	4321      	orrs	r1, r4
200003da:	040c      	lsls	r4, r1, #16
200003dc:	430c      	orrs	r4, r1
200003de:	7896      	ldrb	r6, [r2, #2]
200003e0:	3203      	adds	r2, #3
200003e2:	0231      	lsls	r1, r6, #8
200003e4:	4331      	orrs	r1, r6
200003e6:	040e      	lsls	r6, r1, #16
200003e8:	430e      	orrs	r6, r1
200003ea:	4066      	eors	r6, r4
200003ec:	00ed      	lsls	r5, r5, #3
200003ee:	4475      	add	r5, lr
200003f0:	6829      	ldr	r1, [r5, #0]
200003f2:	4031      	ands	r1, r6
200003f4:	4061      	eors	r1, r4
200003f6:	c002      	stmia	r0!, {r1}
200003f8:	9a01      	ldr	r2, [sp, #4]
200003fa:	2f04      	cmp	r7, #4
200003fc:	d8e0      	bhi.n	200003c0 <RenderCText_OutLoop>
200003fe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
20000400:	08b9      	lsrs	r1, r7, #2
20000402:	008d      	lsls	r5, r1, #2
20000404:	1b76      	subs	r6, r6, r5
20000406:	9602      	str	r6, [sp, #8]
20000408:	3901      	subs	r1, #1

2000040a <RenderCText_InLoop>:
2000040a:	7815      	ldrb	r5, [r2, #0]
2000040c:	5d5d      	ldrb	r5, [r3, r5]
2000040e:	7854      	ldrb	r4, [r2, #1]
20000410:	0227      	lsls	r7, r4, #8
20000412:	4327      	orrs	r7, r4
20000414:	043c      	lsls	r4, r7, #16
20000416:	433c      	orrs	r4, r7
20000418:	7896      	ldrb	r6, [r2, #2]
2000041a:	3203      	adds	r2, #3
2000041c:	0237      	lsls	r7, r6, #8
2000041e:	4337      	orrs	r7, r6
20000420:	043e      	lsls	r6, r7, #16
20000422:	433e      	orrs	r6, r7
20000424:	4066      	eors	r6, r4
20000426:	00ed      	lsls	r5, r5, #3
20000428:	4475      	add	r5, lr
2000042a:	682f      	ldr	r7, [r5, #0]
2000042c:	4037      	ands	r7, r6
2000042e:	4067      	eors	r7, r4
20000430:	c080      	stmia	r0!, {r7}
20000432:	686f      	ldr	r7, [r5, #4]
20000434:	4037      	ands	r7, r6
20000436:	4067      	eors	r7, r4
20000438:	c080      	stmia	r0!, {r7}
2000043a:	3902      	subs	r1, #2
2000043c:	d8e5      	bhi.n	2000040a <RenderCText_InLoop>
2000043e:	9f08      	ldr	r7, [sp, #32]
20000440:	d0c6      	beq.n	200003d0 <RenderCText_Last>
20000442:	9a01      	ldr	r2, [sp, #4]
20000444:	e7bc      	b.n	200003c0 <RenderCText_OutLoop>
20000446:	46c0      	nop			; (mov r8, r8)

20000448 <RenderCText_Addr>:
20000448:	200380d8 	.word	0x200380d8

2000044c <RenderCText_pSioBase>:
2000044c:	d0000000 	.word	0xd0000000

20000450 <RenderDText>:
20000450:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
20000452:	4644      	mov	r4, r8
20000454:	b410      	push	{r4}
20000456:	9c09      	ldr	r4, [sp, #36]	; 0x24
20000458:	4e68      	ldr	r6, [pc, #416]	; (200005fc <RenderDText_pSioBase>)
2000045a:	6632      	str	r2, [r6, #96]	; 0x60
2000045c:	7ce2      	ldrb	r2, [r4, #19]
2000045e:	6672      	str	r2, [r6, #100]	; 0x64
20000460:	8925      	ldrh	r5, [r4, #8]
20000462:	2703      	movs	r7, #3
20000464:	43bd      	bics	r5, r7
20000466:	9509      	str	r5, [sp, #36]	; 0x24
20000468:	43b9      	bics	r1, r7
2000046a:	43bb      	bics	r3, r7
2000046c:	9303      	str	r3, [sp, #12]
2000046e:	6f75      	ldr	r5, [r6, #116]	; 0x74
20000470:	6f32      	ldr	r2, [r6, #112]	; 0x70
20000472:	022d      	lsls	r5, r5, #8
20000474:	6963      	ldr	r3, [r4, #20]
20000476:	442b      	add	r3, r5
20000478:	4698      	mov	r8, r3
2000047a:	8865      	ldrh	r5, [r4, #2]
2000047c:	436a      	muls	r2, r5
2000047e:	68e5      	ldr	r5, [r4, #12]
20000480:	442a      	add	r2, r5
20000482:	9202      	str	r2, [sp, #8]
20000484:	69a3      	ldr	r3, [r4, #24]
20000486:	9301      	str	r3, [sp, #4]
20000488:	08ce      	lsrs	r6, r1, #3
2000048a:	00b6      	lsls	r6, r6, #2
2000048c:	4433      	add	r3, r6
2000048e:	090e      	lsrs	r6, r1, #4
20000490:	4432      	add	r2, r6
20000492:	7ca4      	ldrb	r4, [r4, #18]
20000494:	0225      	lsls	r5, r4, #8
20000496:	4325      	orrs	r5, r4
20000498:	042c      	lsls	r4, r5, #16
2000049a:	432c      	orrs	r4, r5
2000049c:	4d56      	ldr	r5, [pc, #344]	; (200005f8 <RenderDText_Addr>)
2000049e:	46ae      	mov	lr, r5
200004a0:	070e      	lsls	r6, r1, #28
200004a2:	d037      	beq.n	20000514 <RenderDText+0xc4>
200004a4:	0f35      	lsrs	r5, r6, #28
200004a6:	2610      	movs	r6, #16
200004a8:	1b76      	subs	r6, r6, r5
200004aa:	1989      	adds	r1, r1, r6
200004ac:	9f03      	ldr	r7, [sp, #12]
200004ae:	1bbf      	subs	r7, r7, r6
200004b0:	9703      	str	r7, [sp, #12]
200004b2:	b402      	push	{r1}
200004b4:	7817      	ldrb	r7, [r2, #0]
200004b6:	3201      	adds	r2, #1
200004b8:	4447      	add	r7, r8
200004ba:	783f      	ldrb	r7, [r7, #0]
200004bc:	cb40      	ldmia	r3!, {r6}
200004be:	4066      	eors	r6, r4
200004c0:	00ff      	lsls	r7, r7, #3
200004c2:	4477      	add	r7, lr
200004c4:	6839      	ldr	r1, [r7, #0]
200004c6:	4031      	ands	r1, r6
200004c8:	4061      	eors	r1, r4
200004ca:	2d04      	cmp	r5, #4
200004cc:	d806      	bhi.n	200004dc <RenderDText+0x8c>
200004ce:	0c09      	lsrs	r1, r1, #16
200004d0:	7001      	strb	r1, [r0, #0]
200004d2:	7041      	strb	r1, [r0, #1]
200004d4:	0a09      	lsrs	r1, r1, #8
200004d6:	7081      	strb	r1, [r0, #2]
200004d8:	70c1      	strb	r1, [r0, #3]
200004da:	3004      	adds	r0, #4
200004dc:	cb40      	ldmia	r3!, {r6}
200004de:	4066      	eors	r6, r4
200004e0:	6879      	ldr	r1, [r7, #4]
200004e2:	4031      	ands	r1, r6
200004e4:	4061      	eors	r1, r4
200004e6:	2d08      	cmp	r5, #8
200004e8:	d806      	bhi.n	200004f8 <RenderDText+0xa8>
200004ea:	7001      	strb	r1, [r0, #0]
200004ec:	7041      	strb	r1, [r0, #1]
200004ee:	0a09      	lsrs	r1, r1, #8
200004f0:	7081      	strb	r1, [r0, #2]
200004f2:	70c1      	strb	r1, [r0, #3]
200004f4:	0209      	lsls	r1, r1, #8
200004f6:	3004      	adds	r0, #4
200004f8:	0c09      	lsrs	r1, r1, #16
200004fa:	7001      	strb	r1, [r0, #0]
200004fc:	7041      	strb	r1, [r0, #1]
200004fe:	0a09      	lsrs	r1, r1, #8
20000500:	7081      	strb	r1, [r0, #2]
20000502:	70c1      	strb	r1, [r0, #3]
20000504:	3004      	adds	r0, #4
20000506:	bc02      	pop	{r1}
20000508:	9f09      	ldr	r7, [sp, #36]	; 0x24
2000050a:	42b9      	cmp	r1, r7
2000050c:	d302      	bcc.n	20000514 <RenderDText+0xc4>
2000050e:	2100      	movs	r1, #0
20000510:	9a02      	ldr	r2, [sp, #8]
20000512:	9b01      	ldr	r3, [sp, #4]
20000514:	9f09      	ldr	r7, [sp, #36]	; 0x24
20000516:	1a7f      	subs	r7, r7, r1

20000518 <RenderDText_OutLoop>:
20000518:	9e03      	ldr	r6, [sp, #12]
2000051a:	42b7      	cmp	r7, r6
2000051c:	d900      	bls.n	20000520 <RenderDText_OutLoop+0x8>
2000051e:	4637      	mov	r7, r6
20000520:	2f10      	cmp	r7, #16
20000522:	d232      	bcs.n	2000058a <RenderDText_Last+0x60>
20000524:	2f04      	cmp	r7, #4
20000526:	d32d      	bcc.n	20000584 <RenderDText_Last+0x5a>
20000528:	4639      	mov	r1, r7

2000052a <RenderDText_Last>:
2000052a:	b480      	push	{r7}
2000052c:	7817      	ldrb	r7, [r2, #0]
2000052e:	3201      	adds	r2, #1
20000530:	4447      	add	r7, r8
20000532:	783f      	ldrb	r7, [r7, #0]
20000534:	cb40      	ldmia	r3!, {r6}
20000536:	4066      	eors	r6, r4
20000538:	00ff      	lsls	r7, r7, #3
2000053a:	4477      	add	r7, lr
2000053c:	683d      	ldr	r5, [r7, #0]
2000053e:	4035      	ands	r5, r6
20000540:	4065      	eors	r5, r4
20000542:	7005      	strb	r5, [r0, #0]
20000544:	7045      	strb	r5, [r0, #1]
20000546:	0a2d      	lsrs	r5, r5, #8
20000548:	7085      	strb	r5, [r0, #2]
2000054a:	70c5      	strb	r5, [r0, #3]
2000054c:	3004      	adds	r0, #4
2000054e:	2904      	cmp	r1, #4
20000550:	d913      	bls.n	2000057a <RenderDText_Last+0x50>
20000552:	0a2d      	lsrs	r5, r5, #8
20000554:	7005      	strb	r5, [r0, #0]
20000556:	7045      	strb	r5, [r0, #1]
20000558:	0a2d      	lsrs	r5, r5, #8
2000055a:	7085      	strb	r5, [r0, #2]
2000055c:	70c5      	strb	r5, [r0, #3]
2000055e:	3004      	adds	r0, #4
20000560:	2908      	cmp	r1, #8
20000562:	d90a      	bls.n	2000057a <RenderDText_Last+0x50>
20000564:	cb40      	ldmia	r3!, {r6}
20000566:	4066      	eors	r6, r4
20000568:	687f      	ldr	r7, [r7, #4]
2000056a:	4037      	ands	r7, r6
2000056c:	4067      	eors	r7, r4
2000056e:	7007      	strb	r7, [r0, #0]
20000570:	7047      	strb	r7, [r0, #1]
20000572:	0a3f      	lsrs	r7, r7, #8
20000574:	7087      	strb	r7, [r0, #2]
20000576:	70c7      	strb	r7, [r0, #3]
20000578:	3004      	adds	r0, #4
2000057a:	bc80      	pop	{r7}
2000057c:	9a02      	ldr	r2, [sp, #8]
2000057e:	9b01      	ldr	r3, [sp, #4]
20000580:	2f10      	cmp	r7, #16
20000582:	d2c9      	bcs.n	20000518 <RenderDText_OutLoop>
20000584:	bc10      	pop	{r4}
20000586:	46a0      	mov	r8, r4
20000588:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
2000058a:	08b9      	lsrs	r1, r7, #2
2000058c:	008d      	lsls	r5, r1, #2
2000058e:	1b76      	subs	r6, r6, r5
20000590:	9603      	str	r6, [sp, #12]
20000592:	3903      	subs	r1, #3

20000594 <RenderDText_InLoop>:
20000594:	7817      	ldrb	r7, [r2, #0]
20000596:	3201      	adds	r2, #1
20000598:	4447      	add	r7, r8
2000059a:	783f      	ldrb	r7, [r7, #0]
2000059c:	cb40      	ldmia	r3!, {r6}
2000059e:	4066      	eors	r6, r4
200005a0:	00ff      	lsls	r7, r7, #3
200005a2:	4477      	add	r7, lr
200005a4:	683d      	ldr	r5, [r7, #0]
200005a6:	4035      	ands	r5, r6
200005a8:	4065      	eors	r5, r4
200005aa:	7005      	strb	r5, [r0, #0]
200005ac:	7045      	strb	r5, [r0, #1]
200005ae:	0a2d      	lsrs	r5, r5, #8
200005b0:	7085      	strb	r5, [r0, #2]
200005b2:	70c5      	strb	r5, [r0, #3]
200005b4:	0a2d      	lsrs	r5, r5, #8
200005b6:	7105      	strb	r5, [r0, #4]
200005b8:	7145      	strb	r5, [r0, #5]
200005ba:	0a2d      	lsrs	r5, r5, #8
200005bc:	7185      	strb	r5, [r0, #6]
200005be:	71c5      	strb	r5, [r0, #7]
200005c0:	3008      	adds	r0, #8
200005c2:	cb40      	ldmia	r3!, {r6}
200005c4:	4066      	eors	r6, r4
200005c6:	687f      	ldr	r7, [r7, #4]
200005c8:	4037      	ands	r7, r6
200005ca:	4067      	eors	r7, r4
200005cc:	7007      	strb	r7, [r0, #0]
200005ce:	7047      	strb	r7, [r0, #1]
200005d0:	0a3f      	lsrs	r7, r7, #8
200005d2:	7087      	strb	r7, [r0, #2]
200005d4:	70c7      	strb	r7, [r0, #3]
200005d6:	0a3f      	lsrs	r7, r7, #8
200005d8:	7107      	strb	r7, [r0, #4]
200005da:	7147      	strb	r7, [r0, #5]
200005dc:	0a3f      	lsrs	r7, r7, #8
200005de:	7187      	strb	r7, [r0, #6]
200005e0:	71c7      	strb	r7, [r0, #7]
200005e2:	3008      	adds	r0, #8
200005e4:	3904      	subs	r1, #4
200005e6:	d8d5      	bhi.n	20000594 <RenderDText_InLoop>
200005e8:	9f09      	ldr	r7, [sp, #36]	; 0x24
200005ea:	3103      	adds	r1, #3
200005ec:	0089      	lsls	r1, r1, #2
200005ee:	d19c      	bne.n	2000052a <RenderDText_Last>
200005f0:	9a02      	ldr	r2, [sp, #8]
200005f2:	9b01      	ldr	r3, [sp, #4]
200005f4:	e790      	b.n	20000518 <RenderDText_OutLoop>
200005f6:	46c0      	nop			; (mov r8, r8)

200005f8 <RenderDText_Addr>:
200005f8:	200380d8 	.word	0x200380d8

200005fc <RenderDText_pSioBase>:
200005fc:	d0000000 	.word	0xd0000000

20000600 <RenderFastSprite>:
20000600:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
20000602:	6817      	ldr	r7, [r2, #0]
20000604:	46be      	mov	lr, r7
20000606:	8c17      	ldrh	r7, [r2, #32]
20000608:	9701      	str	r7, [sp, #4]
2000060a:	8ad2      	ldrh	r2, [r2, #22]
2000060c:	2100      	movs	r1, #0
2000060e:	9f01      	ldr	r7, [sp, #4]
20000610:	3f01      	subs	r7, #1
20000612:	d332      	bcc.n	2000067a <RenderFastSprite+0x7a>
20000614:	9701      	str	r7, [sp, #4]
20000616:	4677      	mov	r7, lr
20000618:	cf08      	ldmia	r7!, {r3}
2000061a:	46be      	mov	lr, r7
2000061c:	8a5f      	ldrh	r7, [r3, #18]
2000061e:	b23f      	sxth	r7, r7
20000620:	9c00      	ldr	r4, [sp, #0]
20000622:	1be4      	subs	r4, r4, r7
20000624:	d4f3      	bmi.n	2000060e <RenderFastSprite+0xe>
20000626:	8adf      	ldrh	r7, [r3, #22]
20000628:	42bc      	cmp	r4, r7
2000062a:	daf0      	bge.n	2000060e <RenderFastSprite+0xe>
2000062c:	685f      	ldr	r7, [r3, #4]
2000062e:	5d3d      	ldrb	r5, [r7, r4]
20000630:	00ad      	lsls	r5, r5, #2
20000632:	689f      	ldr	r7, [r3, #8]
20000634:	5d3e      	ldrb	r6, [r7, r4]
20000636:	00b6      	lsls	r6, r6, #2
20000638:	8b1f      	ldrh	r7, [r3, #24]
2000063a:	437c      	muls	r4, r7
2000063c:	681f      	ldr	r7, [r3, #0]
2000063e:	443c      	add	r4, r7
20000640:	8a1b      	ldrh	r3, [r3, #16]
20000642:	b21b      	sxth	r3, r3
20000644:	195b      	adds	r3, r3, r5
20000646:	1acf      	subs	r7, r1, r3
20000648:	dd02      	ble.n	20000650 <RenderFastSprite+0x50>
2000064a:	19ed      	adds	r5, r5, r7
2000064c:	1bf6      	subs	r6, r6, r7
2000064e:	460b      	mov	r3, r1
20000650:	1ad7      	subs	r7, r2, r3
20000652:	42be      	cmp	r6, r7
20000654:	dd00      	ble.n	20000658 <RenderFastSprite+0x58>
20000656:	463e      	mov	r6, r7
20000658:	2703      	movs	r7, #3
2000065a:	43bb      	bics	r3, r7
2000065c:	43bd      	bics	r5, r7
2000065e:	43be      	bics	r6, r7
20000660:	ddd5      	ble.n	2000060e <RenderFastSprite+0xe>
20000662:	1a5f      	subs	r7, r3, r1
20000664:	dd04      	ble.n	20000670 <RenderFastSprite+0x70>
20000666:	08bf      	lsrs	r7, r7, #2
20000668:	c080      	stmia	r0!, {r7}
2000066a:	9f02      	ldr	r7, [sp, #8]
2000066c:	c080      	stmia	r0!, {r7}
2000066e:	4619      	mov	r1, r3
20000670:	1967      	adds	r7, r4, r5
20000672:	08b4      	lsrs	r4, r6, #2
20000674:	c090      	stmia	r0!, {r4, r7}
20000676:	1989      	adds	r1, r1, r6
20000678:	e7c9      	b.n	2000060e <RenderFastSprite+0xe>
2000067a:	1a52      	subs	r2, r2, r1
2000067c:	d902      	bls.n	20000684 <RenderFastSprite+0x84>
2000067e:	0892      	lsrs	r2, r2, #2
20000680:	9b02      	ldr	r3, [sp, #8]
20000682:	c00c      	stmia	r0!, {r2, r3}
20000684:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

20000688 <RenderFText>:
20000688:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
2000068a:	9c08      	ldr	r4, [sp, #32]
2000068c:	4e3a      	ldr	r6, [pc, #232]	; (20000778 <RenderFText_pSioBase>)
2000068e:	6632      	str	r2, [r6, #96]	; 0x60
20000690:	8a62      	ldrh	r2, [r4, #18]
20000692:	6672      	str	r2, [r6, #100]	; 0x64
20000694:	8925      	ldrh	r5, [r4, #8]
20000696:	2703      	movs	r7, #3
20000698:	43bd      	bics	r5, r7
2000069a:	9508      	str	r5, [sp, #32]
2000069c:	43b9      	bics	r1, r7
2000069e:	43bb      	bics	r3, r7
200006a0:	9302      	str	r3, [sp, #8]
200006a2:	6f75      	ldr	r5, [r6, #116]	; 0x74
200006a4:	6f32      	ldr	r2, [r6, #112]	; 0x70
200006a6:	022d      	lsls	r5, r5, #8
200006a8:	6963      	ldr	r3, [r4, #20]
200006aa:	442b      	add	r3, r5
200006ac:	8865      	ldrh	r5, [r4, #2]
200006ae:	436a      	muls	r2, r5
200006b0:	68e5      	ldr	r5, [r4, #12]
200006b2:	442a      	add	r2, r5
200006b4:	9201      	str	r2, [sp, #4]
200006b6:	08ce      	lsrs	r6, r1, #3
200006b8:	0076      	lsls	r6, r6, #1
200006ba:	4432      	add	r2, r6
200006bc:	7e24      	ldrb	r4, [r4, #24]
200006be:	0225      	lsls	r5, r4, #8
200006c0:	4325      	orrs	r5, r4
200006c2:	042c      	lsls	r4, r5, #16
200006c4:	432c      	orrs	r4, r5
200006c6:	4d2b      	ldr	r5, [pc, #172]	; (20000774 <RenderFText_Addr>)
200006c8:	46ae      	mov	lr, r5
200006ca:	074e      	lsls	r6, r1, #29
200006cc:	d517      	bpl.n	200006fe <RenderFText+0x76>
200006ce:	7815      	ldrb	r5, [r2, #0]
200006d0:	5d5d      	ldrb	r5, [r3, r5]
200006d2:	7856      	ldrb	r6, [r2, #1]
200006d4:	3202      	adds	r2, #2
200006d6:	0237      	lsls	r7, r6, #8
200006d8:	4337      	orrs	r7, r6
200006da:	043e      	lsls	r6, r7, #16
200006dc:	433e      	orrs	r6, r7
200006de:	4066      	eors	r6, r4
200006e0:	00ed      	lsls	r5, r5, #3
200006e2:	4475      	add	r5, lr
200006e4:	686f      	ldr	r7, [r5, #4]
200006e6:	4037      	ands	r7, r6
200006e8:	4067      	eors	r7, r4
200006ea:	c080      	stmia	r0!, {r7}
200006ec:	3104      	adds	r1, #4
200006ee:	9f08      	ldr	r7, [sp, #32]
200006f0:	42b9      	cmp	r1, r7
200006f2:	d301      	bcc.n	200006f8 <RenderFText+0x70>
200006f4:	2100      	movs	r1, #0
200006f6:	9a01      	ldr	r2, [sp, #4]
200006f8:	9f02      	ldr	r7, [sp, #8]
200006fa:	3f04      	subs	r7, #4
200006fc:	9702      	str	r7, [sp, #8]
200006fe:	9f08      	ldr	r7, [sp, #32]
20000700:	1a7f      	subs	r7, r7, r1

20000702 <RenderFText_OutLoop>:
20000702:	9e02      	ldr	r6, [sp, #8]
20000704:	42b7      	cmp	r7, r6
20000706:	d900      	bls.n	2000070a <RenderFText_OutLoop+0x8>
20000708:	4637      	mov	r7, r6
2000070a:	2f08      	cmp	r7, #8
2000070c:	d214      	bcs.n	20000738 <RenderFText_Last+0x26>
2000070e:	2f04      	cmp	r7, #4
20000710:	d311      	bcc.n	20000736 <RenderFText_Last+0x24>

20000712 <RenderFText_Last>:
20000712:	7815      	ldrb	r5, [r2, #0]
20000714:	5d5d      	ldrb	r5, [r3, r5]
20000716:	7856      	ldrb	r6, [r2, #1]
20000718:	3202      	adds	r2, #2
2000071a:	0231      	lsls	r1, r6, #8
2000071c:	4331      	orrs	r1, r6
2000071e:	040e      	lsls	r6, r1, #16
20000720:	430e      	orrs	r6, r1
20000722:	4066      	eors	r6, r4
20000724:	00ed      	lsls	r5, r5, #3
20000726:	4475      	add	r5, lr
20000728:	6829      	ldr	r1, [r5, #0]
2000072a:	4031      	ands	r1, r6
2000072c:	4061      	eors	r1, r4
2000072e:	c002      	stmia	r0!, {r1}
20000730:	9a01      	ldr	r2, [sp, #4]
20000732:	2f04      	cmp	r7, #4
20000734:	d8e5      	bhi.n	20000702 <RenderFText_OutLoop>
20000736:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
20000738:	08b9      	lsrs	r1, r7, #2
2000073a:	008d      	lsls	r5, r1, #2
2000073c:	1b76      	subs	r6, r6, r5
2000073e:	9602      	str	r6, [sp, #8]
20000740:	3901      	subs	r1, #1

20000742 <RenderFText_InLoop>:
20000742:	7815      	ldrb	r5, [r2, #0]
20000744:	5d5d      	ldrb	r5, [r3, r5]
20000746:	7856      	ldrb	r6, [r2, #1]
20000748:	3202      	adds	r2, #2
2000074a:	0237      	lsls	r7, r6, #8
2000074c:	4337      	orrs	r7, r6
2000074e:	043e      	lsls	r6, r7, #16
20000750:	433e      	orrs	r6, r7
20000752:	4066      	eors	r6, r4
20000754:	00ed      	lsls	r5, r5, #3
20000756:	4475      	add	r5, lr
20000758:	682f      	ldr	r7, [r5, #0]
2000075a:	4037      	ands	r7, r6
2000075c:	4067      	eors	r7, r4
2000075e:	c080      	stmia	r0!, {r7}
20000760:	686f      	ldr	r7, [r5, #4]
20000762:	4037      	ands	r7, r6
20000764:	4067      	eors	r7, r4
20000766:	c080      	stmia	r0!, {r7}
20000768:	3902      	subs	r1, #2
2000076a:	d8ea      	bhi.n	20000742 <RenderFText_InLoop>
2000076c:	9f08      	ldr	r7, [sp, #32]
2000076e:	d0d0      	beq.n	20000712 <RenderFText_Last>
20000770:	9a01      	ldr	r2, [sp, #4]
20000772:	e7c6      	b.n	20000702 <RenderFText_OutLoop>

20000774 <RenderFText_Addr>:
20000774:	200380d8 	.word	0x200380d8

20000778 <RenderFText_pSioBase>:
20000778:	d0000000 	.word	0xd0000000

2000077c <RenderGraph1>:
2000077c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2000077e:	9c06      	ldr	r4, [sp, #24]
20000780:	8925      	ldrh	r5, [r4, #8]
20000782:	2703      	movs	r7, #3
20000784:	43bd      	bics	r5, r7
20000786:	9506      	str	r5, [sp, #24]
20000788:	43b9      	bics	r1, r7
2000078a:	43bb      	bics	r3, r7
2000078c:	9300      	str	r3, [sp, #0]
2000078e:	8865      	ldrh	r5, [r4, #2]
20000790:	436a      	muls	r2, r5
20000792:	68e5      	ldr	r5, [r4, #12]
20000794:	442a      	add	r2, r5
20000796:	4696      	mov	lr, r2
20000798:	08ca      	lsrs	r2, r1, #3
2000079a:	4472      	add	r2, lr
2000079c:	7d66      	ldrb	r6, [r4, #21]
2000079e:	0237      	lsls	r7, r6, #8
200007a0:	4337      	orrs	r7, r6
200007a2:	043e      	lsls	r6, r7, #16
200007a4:	433e      	orrs	r6, r7
200007a6:	7d24      	ldrb	r4, [r4, #20]
200007a8:	0225      	lsls	r5, r4, #8
200007aa:	4325      	orrs	r5, r4
200007ac:	042c      	lsls	r4, r5, #16
200007ae:	432c      	orrs	r4, r5
200007b0:	4066      	eors	r6, r4
200007b2:	4b20      	ldr	r3, [pc, #128]	; (20000834 <RenderGraph1_Addr>)
200007b4:	074d      	lsls	r5, r1, #29
200007b6:	d510      	bpl.n	200007da <RenderGraph1+0x5e>
200007b8:	7815      	ldrb	r5, [r2, #0]
200007ba:	3201      	adds	r2, #1
200007bc:	00ed      	lsls	r5, r5, #3
200007be:	441d      	add	r5, r3
200007c0:	686f      	ldr	r7, [r5, #4]
200007c2:	4037      	ands	r7, r6
200007c4:	4067      	eors	r7, r4
200007c6:	c080      	stmia	r0!, {r7}
200007c8:	3104      	adds	r1, #4
200007ca:	9f06      	ldr	r7, [sp, #24]
200007cc:	42b9      	cmp	r1, r7
200007ce:	d301      	bcc.n	200007d4 <RenderGraph1+0x58>
200007d0:	2100      	movs	r1, #0
200007d2:	4672      	mov	r2, lr
200007d4:	9f00      	ldr	r7, [sp, #0]
200007d6:	3f04      	subs	r7, #4
200007d8:	9700      	str	r7, [sp, #0]
200007da:	9f06      	ldr	r7, [sp, #24]
200007dc:	1a7f      	subs	r7, r7, r1

200007de <RenderGraph1_OutLoop>:
200007de:	9d00      	ldr	r5, [sp, #0]
200007e0:	42af      	cmp	r7, r5
200007e2:	d900      	bls.n	200007e6 <RenderGraph1_OutLoop+0x8>
200007e4:	462f      	mov	r7, r5
200007e6:	2f08      	cmp	r7, #8
200007e8:	d20d      	bcs.n	20000806 <RenderGraph1_Last+0x18>
200007ea:	2f04      	cmp	r7, #4
200007ec:	d30a      	bcc.n	20000804 <RenderGraph1_Last+0x16>

200007ee <RenderGraph1_Last>:
200007ee:	7815      	ldrb	r5, [r2, #0]
200007f0:	3201      	adds	r2, #1
200007f2:	00ed      	lsls	r5, r5, #3
200007f4:	441d      	add	r5, r3
200007f6:	6829      	ldr	r1, [r5, #0]
200007f8:	4031      	ands	r1, r6
200007fa:	4061      	eors	r1, r4
200007fc:	c002      	stmia	r0!, {r1}
200007fe:	4672      	mov	r2, lr
20000800:	2f04      	cmp	r7, #4
20000802:	d8ec      	bhi.n	200007de <RenderGraph1_OutLoop>
20000804:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
20000806:	08b9      	lsrs	r1, r7, #2
20000808:	008f      	lsls	r7, r1, #2
2000080a:	1bed      	subs	r5, r5, r7
2000080c:	9500      	str	r5, [sp, #0]
2000080e:	3901      	subs	r1, #1

20000810 <RenderGraph1_InLoop>:
20000810:	7815      	ldrb	r5, [r2, #0]
20000812:	3201      	adds	r2, #1
20000814:	00ed      	lsls	r5, r5, #3
20000816:	441d      	add	r5, r3
20000818:	682f      	ldr	r7, [r5, #0]
2000081a:	4037      	ands	r7, r6
2000081c:	4067      	eors	r7, r4
2000081e:	c080      	stmia	r0!, {r7}
20000820:	686f      	ldr	r7, [r5, #4]
20000822:	4037      	ands	r7, r6
20000824:	4067      	eors	r7, r4
20000826:	c080      	stmia	r0!, {r7}
20000828:	3902      	subs	r1, #2
2000082a:	d8f1      	bhi.n	20000810 <RenderGraph1_InLoop>
2000082c:	9f06      	ldr	r7, [sp, #24]
2000082e:	d0de      	beq.n	200007ee <RenderGraph1_Last>
20000830:	4672      	mov	r2, lr
20000832:	e7d4      	b.n	200007de <RenderGraph1_OutLoop>

20000834 <RenderGraph1_Addr>:
20000834:	200380d8 	.word	0x200380d8

20000838 <RenderGraph2>:
20000838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2000083a:	9c06      	ldr	r4, [sp, #24]
2000083c:	8927      	ldrh	r7, [r4, #8]
2000083e:	2603      	movs	r6, #3
20000840:	43b7      	bics	r7, r6
20000842:	43b1      	bics	r1, r6
20000844:	43b3      	bics	r3, r6
20000846:	9300      	str	r3, [sp, #0]
20000848:	8865      	ldrh	r5, [r4, #2]
2000084a:	436a      	muls	r2, r5
2000084c:	68e5      	ldr	r5, [r4, #12]
2000084e:	442a      	add	r2, r5
20000850:	4696      	mov	lr, r2
20000852:	088e      	lsrs	r6, r1, #2
20000854:	4432      	add	r2, r6
20000856:	6963      	ldr	r3, [r4, #20]
20000858:	1a7e      	subs	r6, r7, r1

2000085a <RenderGraph2_OutLoop>:
2000085a:	9c00      	ldr	r4, [sp, #0]
2000085c:	42a6      	cmp	r6, r4
2000085e:	d900      	bls.n	20000862 <RenderGraph2_OutLoop+0x8>
20000860:	4626      	mov	r6, r4
20000862:	2e04      	cmp	r6, #4
20000864:	d200      	bcs.n	20000868 <RenderGraph2_OutLoop+0xe>
20000866:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
20000868:	08b1      	lsrs	r1, r6, #2
2000086a:	008e      	lsls	r6, r1, #2
2000086c:	1ba4      	subs	r4, r4, r6
2000086e:	9400      	str	r4, [sp, #0]
20000870:	0849      	lsrs	r1, r1, #1
20000872:	d306      	bcc.n	20000882 <RenderGraph2_InLoop>
20000874:	7814      	ldrb	r4, [r2, #0]
20000876:	3201      	adds	r2, #1
20000878:	00a4      	lsls	r4, r4, #2
2000087a:	591d      	ldr	r5, [r3, r4]
2000087c:	c020      	stmia	r0!, {r5}
2000087e:	4209      	tst	r1, r1
20000880:	d009      	beq.n	20000896 <RenderGraph2_EndLoop>

20000882 <RenderGraph2_InLoop>:
20000882:	7814      	ldrb	r4, [r2, #0]
20000884:	00a4      	lsls	r4, r4, #2
20000886:	591d      	ldr	r5, [r3, r4]
20000888:	7854      	ldrb	r4, [r2, #1]
2000088a:	3202      	adds	r2, #2
2000088c:	00a4      	lsls	r4, r4, #2
2000088e:	591e      	ldr	r6, [r3, r4]
20000890:	c060      	stmia	r0!, {r5, r6}
20000892:	3901      	subs	r1, #1
20000894:	d1f5      	bne.n	20000882 <RenderGraph2_InLoop>

20000896 <RenderGraph2_EndLoop>:
20000896:	463e      	mov	r6, r7
20000898:	4672      	mov	r2, lr
2000089a:	e7de      	b.n	2000085a <RenderGraph2_OutLoop>

2000089c <RenderGraph4>:
2000089c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2000089e:	9c06      	ldr	r4, [sp, #24]
200008a0:	8927      	ldrh	r7, [r4, #8]
200008a2:	2603      	movs	r6, #3
200008a4:	43b7      	bics	r7, r6
200008a6:	9706      	str	r7, [sp, #24]
200008a8:	43b1      	bics	r1, r6
200008aa:	43b3      	bics	r3, r6
200008ac:	9300      	str	r3, [sp, #0]
200008ae:	8865      	ldrh	r5, [r4, #2]
200008b0:	436a      	muls	r2, r5
200008b2:	68e5      	ldr	r5, [r4, #12]
200008b4:	442a      	add	r2, r5
200008b6:	4696      	mov	lr, r2
200008b8:	084e      	lsrs	r6, r1, #1
200008ba:	4432      	add	r2, r6
200008bc:	6963      	ldr	r3, [r4, #20]
200008be:	9e06      	ldr	r6, [sp, #24]
200008c0:	1a76      	subs	r6, r6, r1

200008c2 <RenderGraph4_OutLoop>:
200008c2:	9c00      	ldr	r4, [sp, #0]
200008c4:	42a6      	cmp	r6, r4
200008c6:	d900      	bls.n	200008ca <RenderGraph4_OutLoop+0x8>
200008c8:	4626      	mov	r6, r4
200008ca:	2e04      	cmp	r6, #4
200008cc:	d200      	bcs.n	200008d0 <RenderGraph4_OutLoop+0xe>
200008ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
200008d0:	08b1      	lsrs	r1, r6, #2
200008d2:	008e      	lsls	r6, r1, #2
200008d4:	1ba4      	subs	r4, r4, r6
200008d6:	9400      	str	r4, [sp, #0]
200008d8:	0849      	lsrs	r1, r1, #1
200008da:	d30b      	bcc.n	200008f4 <RenderGraph4_InLoop>
200008dc:	7814      	ldrb	r4, [r2, #0]
200008de:	0064      	lsls	r4, r4, #1
200008e0:	5b1d      	ldrh	r5, [r3, r4]
200008e2:	7854      	ldrb	r4, [r2, #1]
200008e4:	3202      	adds	r2, #2
200008e6:	0064      	lsls	r4, r4, #1
200008e8:	5b1e      	ldrh	r6, [r3, r4]
200008ea:	0436      	lsls	r6, r6, #16
200008ec:	4335      	orrs	r5, r6
200008ee:	c020      	stmia	r0!, {r5}
200008f0:	4209      	tst	r1, r1
200008f2:	d013      	beq.n	2000091c <RenderGraph4_EndLoop>

200008f4 <RenderGraph4_InLoop>:
200008f4:	7814      	ldrb	r4, [r2, #0]
200008f6:	0064      	lsls	r4, r4, #1
200008f8:	5b1d      	ldrh	r5, [r3, r4]
200008fa:	7854      	ldrb	r4, [r2, #1]
200008fc:	0064      	lsls	r4, r4, #1
200008fe:	5b1e      	ldrh	r6, [r3, r4]
20000900:	0436      	lsls	r6, r6, #16
20000902:	4335      	orrs	r5, r6
20000904:	7894      	ldrb	r4, [r2, #2]
20000906:	0064      	lsls	r4, r4, #1
20000908:	5b1e      	ldrh	r6, [r3, r4]
2000090a:	78d4      	ldrb	r4, [r2, #3]
2000090c:	3204      	adds	r2, #4
2000090e:	0064      	lsls	r4, r4, #1
20000910:	5b1f      	ldrh	r7, [r3, r4]
20000912:	043f      	lsls	r7, r7, #16
20000914:	433e      	orrs	r6, r7
20000916:	c060      	stmia	r0!, {r5, r6}
20000918:	3901      	subs	r1, #1
2000091a:	d1eb      	bne.n	200008f4 <RenderGraph4_InLoop>

2000091c <RenderGraph4_EndLoop>:
2000091c:	9e06      	ldr	r6, [sp, #24]
2000091e:	4672      	mov	r2, lr
20000920:	e7cf      	b.n	200008c2 <RenderGraph4_OutLoop>

20000922 <RenderGrad1>:
20000922:	2200      	movs	r2, #0

20000924 <RenderGrad2>:
20000924:	07d2      	lsls	r2, r2, #31
20000926:	0fd2      	lsrs	r2, r2, #31

20000928 <RenderGraph8>:
20000928:	b5f0      	push	{r4, r5, r6, r7, lr}
2000092a:	9c05      	ldr	r4, [sp, #20]
2000092c:	8927      	ldrh	r7, [r4, #8]
2000092e:	2603      	movs	r6, #3
20000930:	43b7      	bics	r7, r6
20000932:	43b1      	bics	r1, r6
20000934:	43b3      	bics	r3, r6
20000936:	8865      	ldrh	r5, [r4, #2]
20000938:	436a      	muls	r2, r5
2000093a:	68e5      	ldr	r5, [r4, #12]
2000093c:	1954      	adds	r4, r2, r5
2000093e:	1862      	adds	r2, r4, r1
20000940:	1a79      	subs	r1, r7, r1
20000942:	421b      	tst	r3, r3
20000944:	d008      	beq.n	20000958 <RenderGraph8+0x30>
20000946:	4299      	cmp	r1, r3
20000948:	d900      	bls.n	2000094c <RenderGraph8+0x24>
2000094a:	4619      	mov	r1, r3
2000094c:	1a5b      	subs	r3, r3, r1
2000094e:	0889      	lsrs	r1, r1, #2
20000950:	c006      	stmia	r0!, {r1, r2}
20000952:	4639      	mov	r1, r7
20000954:	4622      	mov	r2, r4
20000956:	e7f4      	b.n	20000942 <RenderGraph8+0x1a>
20000958:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

2000095c <RenderGraph8Mat>:
2000095c:	b5f0      	push	{r4, r5, r6, r7, lr}
2000095e:	0859      	lsrs	r1, r3, #1
20000960:	4249      	negs	r1, r1
20000962:	468e      	mov	lr, r1
20000964:	089f      	lsrs	r7, r3, #2
20000966:	9c05      	ldr	r4, [sp, #20]
20000968:	8961      	ldrh	r1, [r4, #10]
2000096a:	0849      	lsrs	r1, r1, #1
2000096c:	4249      	negs	r1, r1
2000096e:	1889      	adds	r1, r1, r2
20000970:	468c      	mov	ip, r1
20000972:	8b21      	ldrh	r1, [r4, #24]
20000974:	8b62      	ldrh	r2, [r4, #26]
20000976:	4b2c      	ldr	r3, [pc, #176]	; (20000a28 <RenderGraph8Mat_Interp>)
20000978:	68e6      	ldr	r6, [r4, #12]
2000097a:	611e      	str	r6, [r3, #16]
2000097c:	4e2b      	ldr	r6, [pc, #172]	; (20000a2c <RenderGraph8Mat_Ctrl>)
2000097e:	1a76      	subs	r6, r6, r1
20000980:	014d      	lsls	r5, r1, #5
20000982:	432e      	orrs	r6, r5
20000984:	3901      	subs	r1, #1
20000986:	188d      	adds	r5, r1, r2
20000988:	02ad      	lsls	r5, r5, #10
2000098a:	432e      	orrs	r6, r5
2000098c:	631e      	str	r6, [r3, #48]	; 0x30
2000098e:	4e27      	ldr	r6, [pc, #156]	; (20000a2c <RenderGraph8Mat_Ctrl>)
20000990:	0289      	lsls	r1, r1, #10
20000992:	430e      	orrs	r6, r1
20000994:	62de      	str	r6, [r3, #44]	; 0x2c
20000996:	6964      	ldr	r4, [r4, #20]
20000998:	6825      	ldr	r5, [r4, #0]
2000099a:	609d      	str	r5, [r3, #8]
2000099c:	68e6      	ldr	r6, [r4, #12]
2000099e:	60de      	str	r6, [r3, #12]
200009a0:	4672      	mov	r2, lr
200009a2:	4355      	muls	r5, r2
200009a4:	4372      	muls	r2, r6
200009a6:	6861      	ldr	r1, [r4, #4]
200009a8:	4666      	mov	r6, ip
200009aa:	4371      	muls	r1, r6
200009ac:	186d      	adds	r5, r5, r1
200009ae:	68a1      	ldr	r1, [r4, #8]
200009b0:	186d      	adds	r5, r5, r1
200009b2:	601d      	str	r5, [r3, #0]
200009b4:	6921      	ldr	r1, [r4, #16]
200009b6:	4371      	muls	r1, r6
200009b8:	1852      	adds	r2, r2, r1
200009ba:	6961      	ldr	r1, [r4, #20]
200009bc:	1852      	adds	r2, r2, r1
200009be:	605a      	str	r2, [r3, #4]
200009c0:	087f      	lsrs	r7, r7, #1
200009c2:	d30e      	bcc.n	200009e2 <RenderGraph8Mat+0x86>
200009c4:	69dc      	ldr	r4, [r3, #28]
200009c6:	7826      	ldrb	r6, [r4, #0]
200009c8:	69dc      	ldr	r4, [r3, #28]
200009ca:	7825      	ldrb	r5, [r4, #0]
200009cc:	022d      	lsls	r5, r5, #8
200009ce:	432e      	orrs	r6, r5
200009d0:	69dc      	ldr	r4, [r3, #28]
200009d2:	7825      	ldrb	r5, [r4, #0]
200009d4:	042d      	lsls	r5, r5, #16
200009d6:	432e      	orrs	r6, r5
200009d8:	69dc      	ldr	r4, [r3, #28]
200009da:	7825      	ldrb	r5, [r4, #0]
200009dc:	062d      	lsls	r5, r5, #24
200009de:	432e      	orrs	r6, r5
200009e0:	c040      	stmia	r0!, {r6}
200009e2:	423f      	tst	r7, r7
200009e4:	d01e      	beq.n	20000a24 <RenderGraph8Mat+0xc8>
200009e6:	69dc      	ldr	r4, [r3, #28]
200009e8:	7821      	ldrb	r1, [r4, #0]
200009ea:	69dc      	ldr	r4, [r3, #28]
200009ec:	7824      	ldrb	r4, [r4, #0]
200009ee:	0224      	lsls	r4, r4, #8
200009f0:	4321      	orrs	r1, r4
200009f2:	69dc      	ldr	r4, [r3, #28]
200009f4:	7824      	ldrb	r4, [r4, #0]
200009f6:	0424      	lsls	r4, r4, #16
200009f8:	4321      	orrs	r1, r4
200009fa:	69dc      	ldr	r4, [r3, #28]
200009fc:	7824      	ldrb	r4, [r4, #0]
200009fe:	0624      	lsls	r4, r4, #24
20000a00:	4321      	orrs	r1, r4
20000a02:	69dc      	ldr	r4, [r3, #28]
20000a04:	7822      	ldrb	r2, [r4, #0]
20000a06:	69dc      	ldr	r4, [r3, #28]
20000a08:	7824      	ldrb	r4, [r4, #0]
20000a0a:	0224      	lsls	r4, r4, #8
20000a0c:	4322      	orrs	r2, r4
20000a0e:	69dc      	ldr	r4, [r3, #28]
20000a10:	7824      	ldrb	r4, [r4, #0]
20000a12:	0424      	lsls	r4, r4, #16
20000a14:	4322      	orrs	r2, r4
20000a16:	69dc      	ldr	r4, [r3, #28]
20000a18:	7824      	ldrb	r4, [r4, #0]
20000a1a:	0624      	lsls	r4, r4, #24
20000a1c:	4322      	orrs	r2, r4
20000a1e:	c006      	stmia	r0!, {r1, r2}
20000a20:	3f01      	subs	r7, #1
20000a22:	d1e0      	bne.n	200009e6 <RenderGraph8Mat+0x8a>
20000a24:	bdf0      	pop	{r4, r5, r6, r7, pc}
20000a26:	46c0      	nop			; (mov r8, r8)

20000a28 <RenderGraph8Mat_Interp>:
20000a28:	d00000c0 	.word	0xd00000c0

20000a2c <RenderGraph8Mat_Ctrl>:
20000a2c:	0004000c 	.word	0x0004000c

20000a30 <RenderGraph8Persp>:
20000a30:	b5f0      	push	{r4, r5, r6, r7, lr}
20000a32:	9c05      	ldr	r4, [sp, #20]
20000a34:	8961      	ldrh	r1, [r4, #10]
20000a36:	1a52      	subs	r2, r2, r1
20000a38:	4694      	mov	ip, r2
20000a3a:	030e      	lsls	r6, r1, #12
20000a3c:	4d38      	ldr	r5, [pc, #224]	; (20000b20 <RenderGraph8Persp_pSioBase>)
20000a3e:	662e      	str	r6, [r5, #96]	; 0x60
20000a40:	8a66      	ldrh	r6, [r4, #18]
20000a42:	1852      	adds	r2, r2, r1
20000a44:	18b6      	adds	r6, r6, r2
20000a46:	3601      	adds	r6, #1
20000a48:	666e      	str	r6, [r5, #100]	; 0x64
20000a4a:	085d      	lsrs	r5, r3, #1
20000a4c:	426d      	negs	r5, r5
20000a4e:	46ae      	mov	lr, r5
20000a50:	089f      	lsrs	r7, r3, #2
20000a52:	8b21      	ldrh	r1, [r4, #24]
20000a54:	8b62      	ldrh	r2, [r4, #26]
20000a56:	4b33      	ldr	r3, [pc, #204]	; (20000b24 <RenderGraph8Persp_Interp>)
20000a58:	68e6      	ldr	r6, [r4, #12]
20000a5a:	611e      	str	r6, [r3, #16]
20000a5c:	4e32      	ldr	r6, [pc, #200]	; (20000b28 <RenderGraph8Persp_Ctrl>)
20000a5e:	1a76      	subs	r6, r6, r1
20000a60:	014d      	lsls	r5, r1, #5
20000a62:	432e      	orrs	r6, r5
20000a64:	3901      	subs	r1, #1
20000a66:	188d      	adds	r5, r1, r2
20000a68:	02ad      	lsls	r5, r5, #10
20000a6a:	432e      	orrs	r6, r5
20000a6c:	631e      	str	r6, [r3, #48]	; 0x30
20000a6e:	4e2e      	ldr	r6, [pc, #184]	; (20000b28 <RenderGraph8Persp_Ctrl>)
20000a70:	0289      	lsls	r1, r1, #10
20000a72:	430e      	orrs	r6, r1
20000a74:	62de      	str	r6, [r3, #44]	; 0x2c
20000a76:	6964      	ldr	r4, [r4, #20]
20000a78:	4929      	ldr	r1, [pc, #164]	; (20000b20 <RenderGraph8Persp_pSioBase>)
20000a7a:	6f09      	ldr	r1, [r1, #112]	; 0x70
20000a7c:	6825      	ldr	r5, [r4, #0]
20000a7e:	434d      	muls	r5, r1
20000a80:	132d      	asrs	r5, r5, #12
20000a82:	609d      	str	r5, [r3, #8]
20000a84:	68e6      	ldr	r6, [r4, #12]
20000a86:	434e      	muls	r6, r1
20000a88:	1336      	asrs	r6, r6, #12
20000a8a:	60de      	str	r6, [r3, #12]
20000a8c:	4672      	mov	r2, lr
20000a8e:	4355      	muls	r5, r2
20000a90:	4372      	muls	r2, r6
20000a92:	468e      	mov	lr, r1
20000a94:	6866      	ldr	r6, [r4, #4]
20000a96:	4371      	muls	r1, r6
20000a98:	1309      	asrs	r1, r1, #12
20000a9a:	4666      	mov	r6, ip
20000a9c:	4371      	muls	r1, r6
20000a9e:	186d      	adds	r5, r5, r1
20000aa0:	68a1      	ldr	r1, [r4, #8]
20000aa2:	186d      	adds	r5, r5, r1
20000aa4:	601d      	str	r5, [r3, #0]
20000aa6:	6921      	ldr	r1, [r4, #16]
20000aa8:	4675      	mov	r5, lr
20000aaa:	4369      	muls	r1, r5
20000aac:	1309      	asrs	r1, r1, #12
20000aae:	4371      	muls	r1, r6
20000ab0:	1852      	adds	r2, r2, r1
20000ab2:	6961      	ldr	r1, [r4, #20]
20000ab4:	1852      	adds	r2, r2, r1
20000ab6:	605a      	str	r2, [r3, #4]
20000ab8:	087f      	lsrs	r7, r7, #1
20000aba:	d30e      	bcc.n	20000ada <RenderGraph8Persp+0xaa>
20000abc:	69dc      	ldr	r4, [r3, #28]
20000abe:	7826      	ldrb	r6, [r4, #0]
20000ac0:	69dc      	ldr	r4, [r3, #28]
20000ac2:	7825      	ldrb	r5, [r4, #0]
20000ac4:	022d      	lsls	r5, r5, #8
20000ac6:	432e      	orrs	r6, r5
20000ac8:	69dc      	ldr	r4, [r3, #28]
20000aca:	7825      	ldrb	r5, [r4, #0]
20000acc:	042d      	lsls	r5, r5, #16
20000ace:	432e      	orrs	r6, r5
20000ad0:	69dc      	ldr	r4, [r3, #28]
20000ad2:	7825      	ldrb	r5, [r4, #0]
20000ad4:	062d      	lsls	r5, r5, #24
20000ad6:	432e      	orrs	r6, r5
20000ad8:	c040      	stmia	r0!, {r6}
20000ada:	423f      	tst	r7, r7
20000adc:	d01e      	beq.n	20000b1c <RenderGraph8Persp+0xec>
20000ade:	69dc      	ldr	r4, [r3, #28]
20000ae0:	7821      	ldrb	r1, [r4, #0]
20000ae2:	69dc      	ldr	r4, [r3, #28]
20000ae4:	7824      	ldrb	r4, [r4, #0]
20000ae6:	0224      	lsls	r4, r4, #8
20000ae8:	4321      	orrs	r1, r4
20000aea:	69dc      	ldr	r4, [r3, #28]
20000aec:	7824      	ldrb	r4, [r4, #0]
20000aee:	0424      	lsls	r4, r4, #16
20000af0:	4321      	orrs	r1, r4
20000af2:	69dc      	ldr	r4, [r3, #28]
20000af4:	7824      	ldrb	r4, [r4, #0]
20000af6:	0624      	lsls	r4, r4, #24
20000af8:	4321      	orrs	r1, r4
20000afa:	69dc      	ldr	r4, [r3, #28]
20000afc:	7822      	ldrb	r2, [r4, #0]
20000afe:	69dc      	ldr	r4, [r3, #28]
20000b00:	7824      	ldrb	r4, [r4, #0]
20000b02:	0224      	lsls	r4, r4, #8
20000b04:	4322      	orrs	r2, r4
20000b06:	69dc      	ldr	r4, [r3, #28]
20000b08:	7824      	ldrb	r4, [r4, #0]
20000b0a:	0424      	lsls	r4, r4, #16
20000b0c:	4322      	orrs	r2, r4
20000b0e:	69dc      	ldr	r4, [r3, #28]
20000b10:	7824      	ldrb	r4, [r4, #0]
20000b12:	0624      	lsls	r4, r4, #24
20000b14:	4322      	orrs	r2, r4
20000b16:	c006      	stmia	r0!, {r1, r2}
20000b18:	3f01      	subs	r7, #1
20000b1a:	d1e0      	bne.n	20000ade <RenderGraph8Persp+0xae>
20000b1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
20000b1e:	46c0      	nop			; (mov r8, r8)

20000b20 <RenderGraph8Persp_pSioBase>:
20000b20:	d0000000 	.word	0xd0000000

20000b24 <RenderGraph8Persp_Interp>:
20000b24:	d00000c0 	.word	0xd00000c0

20000b28 <RenderGraph8Persp_Ctrl>:
20000b28:	0004000c 	.word	0x0004000c

20000b2c <RenderGText>:
20000b2c:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
20000b2e:	4644      	mov	r4, r8
20000b30:	b410      	push	{r4}
20000b32:	9c09      	ldr	r4, [sp, #36]	; 0x24
20000b34:	4e3a      	ldr	r6, [pc, #232]	; (20000c20 <RenderGText_pSioBase>)
20000b36:	6632      	str	r2, [r6, #96]	; 0x60
20000b38:	8a62      	ldrh	r2, [r4, #18]
20000b3a:	6672      	str	r2, [r6, #100]	; 0x64
20000b3c:	8925      	ldrh	r5, [r4, #8]
20000b3e:	2703      	movs	r7, #3
20000b40:	43bd      	bics	r5, r7
20000b42:	9509      	str	r5, [sp, #36]	; 0x24
20000b44:	43b9      	bics	r1, r7
20000b46:	43bb      	bics	r3, r7
20000b48:	9303      	str	r3, [sp, #12]
20000b4a:	6f75      	ldr	r5, [r6, #116]	; 0x74
20000b4c:	6f32      	ldr	r2, [r6, #112]	; 0x70
20000b4e:	022d      	lsls	r5, r5, #8
20000b50:	6963      	ldr	r3, [r4, #20]
20000b52:	442b      	add	r3, r5
20000b54:	4698      	mov	r8, r3
20000b56:	8865      	ldrh	r5, [r4, #2]
20000b58:	436a      	muls	r2, r5
20000b5a:	68e5      	ldr	r5, [r4, #12]
20000b5c:	442a      	add	r2, r5
20000b5e:	9202      	str	r2, [sp, #8]
20000b60:	69a3      	ldr	r3, [r4, #24]
20000b62:	9301      	str	r3, [sp, #4]
20000b64:	440b      	add	r3, r1
20000b66:	08ce      	lsrs	r6, r1, #3
20000b68:	4432      	add	r2, r6
20000b6a:	7ca4      	ldrb	r4, [r4, #18]
20000b6c:	0225      	lsls	r5, r4, #8
20000b6e:	4325      	orrs	r5, r4
20000b70:	042c      	lsls	r4, r5, #16
20000b72:	432c      	orrs	r4, r5
20000b74:	4d29      	ldr	r5, [pc, #164]	; (20000c1c <RenderGText_Addr>)
20000b76:	46ae      	mov	lr, r5
20000b78:	074e      	lsls	r6, r1, #29
20000b7a:	d515      	bpl.n	20000ba8 <RenderGText+0x7c>
20000b7c:	7815      	ldrb	r5, [r2, #0]
20000b7e:	3201      	adds	r2, #1
20000b80:	4445      	add	r5, r8
20000b82:	782d      	ldrb	r5, [r5, #0]
20000b84:	cb40      	ldmia	r3!, {r6}
20000b86:	4066      	eors	r6, r4
20000b88:	00ed      	lsls	r5, r5, #3
20000b8a:	4475      	add	r5, lr
20000b8c:	686f      	ldr	r7, [r5, #4]
20000b8e:	4037      	ands	r7, r6
20000b90:	4067      	eors	r7, r4
20000b92:	c080      	stmia	r0!, {r7}
20000b94:	3104      	adds	r1, #4
20000b96:	9f09      	ldr	r7, [sp, #36]	; 0x24
20000b98:	42b9      	cmp	r1, r7
20000b9a:	d302      	bcc.n	20000ba2 <RenderGText+0x76>
20000b9c:	2100      	movs	r1, #0
20000b9e:	9a02      	ldr	r2, [sp, #8]
20000ba0:	9b01      	ldr	r3, [sp, #4]
20000ba2:	9f03      	ldr	r7, [sp, #12]
20000ba4:	3f04      	subs	r7, #4
20000ba6:	9703      	str	r7, [sp, #12]
20000ba8:	9f09      	ldr	r7, [sp, #36]	; 0x24
20000baa:	1a7f      	subs	r7, r7, r1

20000bac <RenderGText_OutLoop>:
20000bac:	9e03      	ldr	r6, [sp, #12]
20000bae:	42b7      	cmp	r7, r6
20000bb0:	d900      	bls.n	20000bb4 <RenderGText_OutLoop+0x8>
20000bb2:	4637      	mov	r7, r6
20000bb4:	2f08      	cmp	r7, #8
20000bb6:	d214      	bcs.n	20000be2 <RenderGText_Last+0x26>
20000bb8:	2f04      	cmp	r7, #4
20000bba:	d30f      	bcc.n	20000bdc <RenderGText_Last+0x20>

20000bbc <RenderGText_Last>:
20000bbc:	7815      	ldrb	r5, [r2, #0]
20000bbe:	3201      	adds	r2, #1
20000bc0:	4445      	add	r5, r8
20000bc2:	782d      	ldrb	r5, [r5, #0]
20000bc4:	cb40      	ldmia	r3!, {r6}
20000bc6:	4066      	eors	r6, r4
20000bc8:	00ed      	lsls	r5, r5, #3
20000bca:	4475      	add	r5, lr
20000bcc:	6829      	ldr	r1, [r5, #0]
20000bce:	4031      	ands	r1, r6
20000bd0:	4061      	eors	r1, r4
20000bd2:	c002      	stmia	r0!, {r1}
20000bd4:	9a02      	ldr	r2, [sp, #8]
20000bd6:	9b01      	ldr	r3, [sp, #4]
20000bd8:	2f04      	cmp	r7, #4
20000bda:	d8e7      	bhi.n	20000bac <RenderGText_OutLoop>
20000bdc:	bc10      	pop	{r4}
20000bde:	46a0      	mov	r8, r4
20000be0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
20000be2:	08b9      	lsrs	r1, r7, #2
20000be4:	008d      	lsls	r5, r1, #2
20000be6:	1b76      	subs	r6, r6, r5
20000be8:	9603      	str	r6, [sp, #12]
20000bea:	3901      	subs	r1, #1

20000bec <RenderGText_InLoop>:
20000bec:	7817      	ldrb	r7, [r2, #0]
20000bee:	3201      	adds	r2, #1
20000bf0:	4447      	add	r7, r8
20000bf2:	783f      	ldrb	r7, [r7, #0]
20000bf4:	cb40      	ldmia	r3!, {r6}
20000bf6:	4066      	eors	r6, r4
20000bf8:	00ff      	lsls	r7, r7, #3
20000bfa:	4477      	add	r7, lr
20000bfc:	683d      	ldr	r5, [r7, #0]
20000bfe:	4035      	ands	r5, r6
20000c00:	4065      	eors	r5, r4
20000c02:	cb40      	ldmia	r3!, {r6}
20000c04:	4066      	eors	r6, r4
20000c06:	687f      	ldr	r7, [r7, #4]
20000c08:	4037      	ands	r7, r6
20000c0a:	4067      	eors	r7, r4
20000c0c:	c0a0      	stmia	r0!, {r5, r7}
20000c0e:	3902      	subs	r1, #2
20000c10:	d8ec      	bhi.n	20000bec <RenderGText_InLoop>
20000c12:	9f09      	ldr	r7, [sp, #36]	; 0x24
20000c14:	d0d2      	beq.n	20000bbc <RenderGText_Last>
20000c16:	9a02      	ldr	r2, [sp, #8]
20000c18:	9b01      	ldr	r3, [sp, #4]
20000c1a:	e7c7      	b.n	20000bac <RenderGText_OutLoop>

20000c1c <RenderGText_Addr>:
20000c1c:	200380d8 	.word	0x200380d8

20000c20 <RenderGText_pSioBase>:
20000c20:	d0000000 	.word	0xd0000000

20000c24 <RenderLevel>:
20000c24:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
20000c26:	9c08      	ldr	r4, [sp, #32]
20000c28:	8925      	ldrh	r5, [r4, #8]
20000c2a:	2703      	movs	r7, #3
20000c2c:	43bd      	bics	r5, r7
20000c2e:	9508      	str	r5, [sp, #32]
20000c30:	43b9      	bics	r1, r7
20000c32:	43bb      	bics	r3, r7
20000c34:	9302      	str	r3, [sp, #8]
20000c36:	8965      	ldrh	r5, [r4, #10]
20000c38:	3d01      	subs	r5, #1
20000c3a:	1aad      	subs	r5, r5, r2
20000c3c:	7e23      	ldrb	r3, [r4, #24]
20000c3e:	9300      	str	r3, [sp, #0]
20000c40:	68e2      	ldr	r2, [r4, #12]
20000c42:	9201      	str	r2, [sp, #4]
20000c44:	440a      	add	r2, r1
20000c46:	7d66      	ldrb	r6, [r4, #21]
20000c48:	0233      	lsls	r3, r6, #8
20000c4a:	4333      	orrs	r3, r6
20000c4c:	041e      	lsls	r6, r3, #16
20000c4e:	431e      	orrs	r6, r3
20000c50:	7d24      	ldrb	r4, [r4, #20]
20000c52:	0223      	lsls	r3, r4, #8
20000c54:	4323      	orrs	r3, r4
20000c56:	041c      	lsls	r4, r3, #16
20000c58:	431c      	orrs	r4, r3
20000c5a:	4066      	eors	r6, r4
20000c5c:	4b4c      	ldr	r3, [pc, #304]	; (20000d90 <RenderLevel_Addr>)
20000c5e:	469e      	mov	lr, r3
20000c60:	9f08      	ldr	r7, [sp, #32]
20000c62:	1a7f      	subs	r7, r7, r1
20000c64:	2f04      	cmp	r7, #4
20000c66:	d801      	bhi.n	20000c6c <RenderLevel_OutLoop>
20000c68:	9f08      	ldr	r7, [sp, #32]
20000c6a:	e007      	b.n	20000c7c <RenderLevel_Last>

20000c6c <RenderLevel_OutLoop>:
20000c6c:	9b02      	ldr	r3, [sp, #8]
20000c6e:	429f      	cmp	r7, r3
20000c70:	d900      	bls.n	20000c74 <RenderLevel_OutLoop+0x8>
20000c72:	461f      	mov	r7, r3
20000c74:	2f08      	cmp	r7, #8
20000c76:	d231      	bcs.n	20000cdc <RenderLevel_Last2+0x30>
20000c78:	2f04      	cmp	r7, #4
20000c7a:	d32e      	bcc.n	20000cda <RenderLevel_Last2+0x2e>

20000c7c <RenderLevel_Last>:
20000c7c:	9b00      	ldr	r3, [sp, #0]
20000c7e:	429d      	cmp	r5, r3
20000c80:	d314      	bcc.n	20000cac <RenderLevel_Last2>
20000c82:	2100      	movs	r1, #0
20000c84:	7813      	ldrb	r3, [r2, #0]
20000c86:	42ab      	cmp	r3, r5
20000c88:	4149      	adcs	r1, r1
20000c8a:	7853      	ldrb	r3, [r2, #1]
20000c8c:	42ab      	cmp	r3, r5
20000c8e:	4149      	adcs	r1, r1
20000c90:	7893      	ldrb	r3, [r2, #2]
20000c92:	42ab      	cmp	r3, r5
20000c94:	4149      	adcs	r1, r1
20000c96:	78d3      	ldrb	r3, [r2, #3]
20000c98:	42ab      	cmp	r3, r5
20000c9a:	4149      	adcs	r1, r1
20000c9c:	3204      	adds	r2, #4
20000c9e:	00c9      	lsls	r1, r1, #3
20000ca0:	4471      	add	r1, lr
20000ca2:	6849      	ldr	r1, [r1, #4]
20000ca4:	4031      	ands	r1, r6
20000ca6:	4061      	eors	r1, r4
20000ca8:	c002      	stmia	r0!, {r1}
20000caa:	e013      	b.n	20000cd4 <RenderLevel_Last2+0x28>

20000cac <RenderLevel_Last2>:
20000cac:	2100      	movs	r1, #0
20000cae:	7813      	ldrb	r3, [r2, #0]
20000cb0:	429d      	cmp	r5, r3
20000cb2:	4149      	adcs	r1, r1
20000cb4:	7853      	ldrb	r3, [r2, #1]
20000cb6:	429d      	cmp	r5, r3
20000cb8:	4149      	adcs	r1, r1
20000cba:	7893      	ldrb	r3, [r2, #2]
20000cbc:	429d      	cmp	r5, r3
20000cbe:	4149      	adcs	r1, r1
20000cc0:	78d3      	ldrb	r3, [r2, #3]
20000cc2:	429d      	cmp	r5, r3
20000cc4:	4149      	adcs	r1, r1
20000cc6:	3204      	adds	r2, #4
20000cc8:	00c9      	lsls	r1, r1, #3
20000cca:	4471      	add	r1, lr
20000ccc:	6849      	ldr	r1, [r1, #4]
20000cce:	4031      	ands	r1, r6
20000cd0:	4061      	eors	r1, r4
20000cd2:	c002      	stmia	r0!, {r1}
20000cd4:	9a01      	ldr	r2, [sp, #4]
20000cd6:	2f04      	cmp	r7, #4
20000cd8:	d8c8      	bhi.n	20000c6c <RenderLevel_OutLoop>
20000cda:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
20000cdc:	08b9      	lsrs	r1, r7, #2
20000cde:	008f      	lsls	r7, r1, #2
20000ce0:	1bdb      	subs	r3, r3, r7
20000ce2:	9302      	str	r3, [sp, #8]
20000ce4:	3901      	subs	r1, #1
20000ce6:	9b00      	ldr	r3, [sp, #0]
20000ce8:	429d      	cmp	r5, r3
20000cea:	d328      	bcc.n	20000d3e <RenderLevel_InLoopBot>

20000cec <RenderLevel_InLoopTop>:
20000cec:	2700      	movs	r7, #0
20000cee:	7813      	ldrb	r3, [r2, #0]
20000cf0:	42ab      	cmp	r3, r5
20000cf2:	417f      	adcs	r7, r7
20000cf4:	7853      	ldrb	r3, [r2, #1]
20000cf6:	42ab      	cmp	r3, r5
20000cf8:	417f      	adcs	r7, r7
20000cfa:	7893      	ldrb	r3, [r2, #2]
20000cfc:	42ab      	cmp	r3, r5
20000cfe:	417f      	adcs	r7, r7
20000d00:	78d3      	ldrb	r3, [r2, #3]
20000d02:	42ab      	cmp	r3, r5
20000d04:	417f      	adcs	r7, r7
20000d06:	7913      	ldrb	r3, [r2, #4]
20000d08:	42ab      	cmp	r3, r5
20000d0a:	417f      	adcs	r7, r7
20000d0c:	7953      	ldrb	r3, [r2, #5]
20000d0e:	42ab      	cmp	r3, r5
20000d10:	417f      	adcs	r7, r7
20000d12:	7993      	ldrb	r3, [r2, #6]
20000d14:	42ab      	cmp	r3, r5
20000d16:	417f      	adcs	r7, r7
20000d18:	79d3      	ldrb	r3, [r2, #7]
20000d1a:	42ab      	cmp	r3, r5
20000d1c:	417f      	adcs	r7, r7
20000d1e:	3208      	adds	r2, #8
20000d20:	00ff      	lsls	r7, r7, #3
20000d22:	4477      	add	r7, lr
20000d24:	683b      	ldr	r3, [r7, #0]
20000d26:	4033      	ands	r3, r6
20000d28:	4063      	eors	r3, r4
20000d2a:	687f      	ldr	r7, [r7, #4]
20000d2c:	4037      	ands	r7, r6
20000d2e:	4067      	eors	r7, r4
20000d30:	c088      	stmia	r0!, {r3, r7}
20000d32:	3902      	subs	r1, #2
20000d34:	d8da      	bhi.n	20000cec <RenderLevel_InLoopTop>
20000d36:	9f08      	ldr	r7, [sp, #32]
20000d38:	d0a0      	beq.n	20000c7c <RenderLevel_Last>
20000d3a:	9a01      	ldr	r2, [sp, #4]
20000d3c:	e796      	b.n	20000c6c <RenderLevel_OutLoop>

20000d3e <RenderLevel_InLoopBot>:
20000d3e:	2700      	movs	r7, #0
20000d40:	7813      	ldrb	r3, [r2, #0]
20000d42:	429d      	cmp	r5, r3
20000d44:	417f      	adcs	r7, r7
20000d46:	7853      	ldrb	r3, [r2, #1]
20000d48:	429d      	cmp	r5, r3
20000d4a:	417f      	adcs	r7, r7
20000d4c:	7893      	ldrb	r3, [r2, #2]
20000d4e:	429d      	cmp	r5, r3
20000d50:	417f      	adcs	r7, r7
20000d52:	78d3      	ldrb	r3, [r2, #3]
20000d54:	429d      	cmp	r5, r3
20000d56:	417f      	adcs	r7, r7
20000d58:	7913      	ldrb	r3, [r2, #4]
20000d5a:	429d      	cmp	r5, r3
20000d5c:	417f      	adcs	r7, r7
20000d5e:	7953      	ldrb	r3, [r2, #5]
20000d60:	429d      	cmp	r5, r3
20000d62:	417f      	adcs	r7, r7
20000d64:	7993      	ldrb	r3, [r2, #6]
20000d66:	429d      	cmp	r5, r3
20000d68:	417f      	adcs	r7, r7
20000d6a:	79d3      	ldrb	r3, [r2, #7]
20000d6c:	429d      	cmp	r5, r3
20000d6e:	417f      	adcs	r7, r7
20000d70:	3208      	adds	r2, #8
20000d72:	00ff      	lsls	r7, r7, #3
20000d74:	4477      	add	r7, lr
20000d76:	683b      	ldr	r3, [r7, #0]
20000d78:	4033      	ands	r3, r6
20000d7a:	4063      	eors	r3, r4
20000d7c:	687f      	ldr	r7, [r7, #4]
20000d7e:	4037      	ands	r7, r6
20000d80:	4067      	eors	r7, r4
20000d82:	c088      	stmia	r0!, {r3, r7}
20000d84:	3902      	subs	r1, #2
20000d86:	d8da      	bhi.n	20000d3e <RenderLevel_InLoopBot>
20000d88:	9f08      	ldr	r7, [sp, #32]
20000d8a:	d0d5      	beq.n	20000d38 <RenderLevel_InLoopTop+0x4c>
20000d8c:	9a01      	ldr	r2, [sp, #4]
20000d8e:	e76d      	b.n	20000c6c <RenderLevel_OutLoop>

20000d90 <RenderLevel_Addr>:
20000d90:	200380d8 	.word	0x200380d8

20000d94 <RenderLevelGrad>:
20000d94:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
20000d96:	9c08      	ldr	r4, [sp, #32]
20000d98:	8925      	ldrh	r5, [r4, #8]
20000d9a:	2703      	movs	r7, #3
20000d9c:	43bd      	bics	r5, r7
20000d9e:	9508      	str	r5, [sp, #32]
20000da0:	43b9      	bics	r1, r7
20000da2:	43bb      	bics	r3, r7
20000da4:	9302      	str	r3, [sp, #8]
20000da6:	8965      	ldrh	r5, [r4, #10]
20000da8:	3d01      	subs	r5, #1
20000daa:	1aad      	subs	r5, r5, r2
20000dac:	68e2      	ldr	r2, [r4, #12]
20000dae:	9201      	str	r2, [sp, #4]
20000db0:	440a      	add	r2, r1
20000db2:	6966      	ldr	r6, [r4, #20]
20000db4:	5d76      	ldrb	r6, [r6, r5]
20000db6:	0233      	lsls	r3, r6, #8
20000db8:	4333      	orrs	r3, r6
20000dba:	041e      	lsls	r6, r3, #16
20000dbc:	431e      	orrs	r6, r3
20000dbe:	69a4      	ldr	r4, [r4, #24]
20000dc0:	5d64      	ldrb	r4, [r4, r5]
20000dc2:	0223      	lsls	r3, r4, #8
20000dc4:	4323      	orrs	r3, r4
20000dc6:	041c      	lsls	r4, r3, #16
20000dc8:	431c      	orrs	r4, r3
20000dca:	4066      	eors	r6, r4
20000dcc:	4b2a      	ldr	r3, [pc, #168]	; (20000e78 <RenderLevelGrad_Addr>)
20000dce:	469e      	mov	lr, r3
20000dd0:	9f08      	ldr	r7, [sp, #32]
20000dd2:	1a7f      	subs	r7, r7, r1
20000dd4:	2f04      	cmp	r7, #4
20000dd6:	d801      	bhi.n	20000ddc <RenderLevelGrad_OutLoop>
20000dd8:	9f08      	ldr	r7, [sp, #32]
20000dda:	e007      	b.n	20000dec <RenderLevelGrad_Last>

20000ddc <RenderLevelGrad_OutLoop>:
20000ddc:	9b02      	ldr	r3, [sp, #8]
20000dde:	429f      	cmp	r7, r3
20000de0:	d900      	bls.n	20000de4 <RenderLevelGrad_OutLoop+0x8>
20000de2:	461f      	mov	r7, r3
20000de4:	2f08      	cmp	r7, #8
20000de6:	d219      	bcs.n	20000e1c <RenderLevelGrad_Last+0x30>
20000de8:	2f04      	cmp	r7, #4
20000dea:	d316      	bcc.n	20000e1a <RenderLevelGrad_Last+0x2e>

20000dec <RenderLevelGrad_Last>:
20000dec:	2100      	movs	r1, #0
20000dee:	7813      	ldrb	r3, [r2, #0]
20000df0:	42ab      	cmp	r3, r5
20000df2:	4149      	adcs	r1, r1
20000df4:	7853      	ldrb	r3, [r2, #1]
20000df6:	42ab      	cmp	r3, r5
20000df8:	4149      	adcs	r1, r1
20000dfa:	7893      	ldrb	r3, [r2, #2]
20000dfc:	42ab      	cmp	r3, r5
20000dfe:	4149      	adcs	r1, r1
20000e00:	78d3      	ldrb	r3, [r2, #3]
20000e02:	42ab      	cmp	r3, r5
20000e04:	4149      	adcs	r1, r1
20000e06:	3204      	adds	r2, #4
20000e08:	00c9      	lsls	r1, r1, #3
20000e0a:	4471      	add	r1, lr
20000e0c:	6849      	ldr	r1, [r1, #4]
20000e0e:	4031      	ands	r1, r6
20000e10:	4061      	eors	r1, r4
20000e12:	c002      	stmia	r0!, {r1}
20000e14:	9a01      	ldr	r2, [sp, #4]
20000e16:	2f04      	cmp	r7, #4
20000e18:	d8e0      	bhi.n	20000ddc <RenderLevelGrad_OutLoop>
20000e1a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
20000e1c:	08b9      	lsrs	r1, r7, #2
20000e1e:	008f      	lsls	r7, r1, #2
20000e20:	1bdb      	subs	r3, r3, r7
20000e22:	9302      	str	r3, [sp, #8]
20000e24:	3901      	subs	r1, #1

20000e26 <RenderLevelGrad_InLoopTop>:
20000e26:	2700      	movs	r7, #0
20000e28:	7813      	ldrb	r3, [r2, #0]
20000e2a:	42ab      	cmp	r3, r5
20000e2c:	417f      	adcs	r7, r7
20000e2e:	7853      	ldrb	r3, [r2, #1]
20000e30:	42ab      	cmp	r3, r5
20000e32:	417f      	adcs	r7, r7
20000e34:	7893      	ldrb	r3, [r2, #2]
20000e36:	42ab      	cmp	r3, r5
20000e38:	417f      	adcs	r7, r7
20000e3a:	78d3      	ldrb	r3, [r2, #3]
20000e3c:	42ab      	cmp	r3, r5
20000e3e:	417f      	adcs	r7, r7
20000e40:	7913      	ldrb	r3, [r2, #4]
20000e42:	42ab      	cmp	r3, r5
20000e44:	417f      	adcs	r7, r7
20000e46:	7953      	ldrb	r3, [r2, #5]
20000e48:	42ab      	cmp	r3, r5
20000e4a:	417f      	adcs	r7, r7
20000e4c:	7993      	ldrb	r3, [r2, #6]
20000e4e:	42ab      	cmp	r3, r5
20000e50:	417f      	adcs	r7, r7
20000e52:	79d3      	ldrb	r3, [r2, #7]
20000e54:	42ab      	cmp	r3, r5
20000e56:	417f      	adcs	r7, r7
20000e58:	3208      	adds	r2, #8
20000e5a:	00ff      	lsls	r7, r7, #3
20000e5c:	4477      	add	r7, lr
20000e5e:	683b      	ldr	r3, [r7, #0]
20000e60:	4033      	ands	r3, r6
20000e62:	4063      	eors	r3, r4
20000e64:	687f      	ldr	r7, [r7, #4]
20000e66:	4037      	ands	r7, r6
20000e68:	4067      	eors	r7, r4
20000e6a:	c088      	stmia	r0!, {r3, r7}
20000e6c:	3902      	subs	r1, #2
20000e6e:	d8da      	bhi.n	20000e26 <RenderLevelGrad_InLoopTop>
20000e70:	9f08      	ldr	r7, [sp, #32]
20000e72:	d0bb      	beq.n	20000dec <RenderLevelGrad_Last>
20000e74:	9a01      	ldr	r2, [sp, #4]
20000e76:	e7b1      	b.n	20000ddc <RenderLevelGrad_OutLoop>

20000e78 <RenderLevelGrad_Addr>:
20000e78:	200380d8 	.word	0x200380d8

20000e7c <RenderMText>:
20000e7c:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
20000e7e:	9c08      	ldr	r4, [sp, #32]
20000e80:	4e34      	ldr	r6, [pc, #208]	; (20000f54 <RenderMText_pSioBase>)
20000e82:	6632      	str	r2, [r6, #96]	; 0x60
20000e84:	8a62      	ldrh	r2, [r4, #18]
20000e86:	6672      	str	r2, [r6, #100]	; 0x64
20000e88:	8925      	ldrh	r5, [r4, #8]
20000e8a:	2703      	movs	r7, #3
20000e8c:	43bd      	bics	r5, r7
20000e8e:	9508      	str	r5, [sp, #32]
20000e90:	43b9      	bics	r1, r7
20000e92:	43bb      	bics	r3, r7
20000e94:	9302      	str	r3, [sp, #8]
20000e96:	6f75      	ldr	r5, [r6, #116]	; 0x74
20000e98:	6f32      	ldr	r2, [r6, #112]	; 0x70
20000e9a:	022d      	lsls	r5, r5, #8
20000e9c:	6963      	ldr	r3, [r4, #20]
20000e9e:	442b      	add	r3, r5
20000ea0:	8865      	ldrh	r5, [r4, #2]
20000ea2:	436a      	muls	r2, r5
20000ea4:	68e5      	ldr	r5, [r4, #12]
20000ea6:	442a      	add	r2, r5
20000ea8:	9201      	str	r2, [sp, #4]
20000eaa:	08ce      	lsrs	r6, r1, #3
20000eac:	4432      	add	r2, r6
20000eae:	7e66      	ldrb	r6, [r4, #25]
20000eb0:	0237      	lsls	r7, r6, #8
20000eb2:	4337      	orrs	r7, r6
20000eb4:	043e      	lsls	r6, r7, #16
20000eb6:	433e      	orrs	r6, r7
20000eb8:	7e24      	ldrb	r4, [r4, #24]
20000eba:	0225      	lsls	r5, r4, #8
20000ebc:	4325      	orrs	r5, r4
20000ebe:	042c      	lsls	r4, r5, #16
20000ec0:	432c      	orrs	r4, r5
20000ec2:	4066      	eors	r6, r4
20000ec4:	4d22      	ldr	r5, [pc, #136]	; (20000f50 <RenderMText_Addr>)
20000ec6:	46ae      	mov	lr, r5
20000ec8:	074d      	lsls	r5, r1, #29
20000eca:	d511      	bpl.n	20000ef0 <RenderMText+0x74>
20000ecc:	7815      	ldrb	r5, [r2, #0]
20000ece:	5d5d      	ldrb	r5, [r3, r5]
20000ed0:	3201      	adds	r2, #1
20000ed2:	00ed      	lsls	r5, r5, #3
20000ed4:	4475      	add	r5, lr
20000ed6:	686f      	ldr	r7, [r5, #4]
20000ed8:	4037      	ands	r7, r6
20000eda:	4067      	eors	r7, r4
20000edc:	c080      	stmia	r0!, {r7}
20000ede:	3104      	adds	r1, #4
20000ee0:	9f08      	ldr	r7, [sp, #32]
20000ee2:	42b9      	cmp	r1, r7
20000ee4:	d301      	bcc.n	20000eea <RenderMText+0x6e>
20000ee6:	2100      	movs	r1, #0
20000ee8:	9a01      	ldr	r2, [sp, #4]
20000eea:	9f02      	ldr	r7, [sp, #8]
20000eec:	3f04      	subs	r7, #4
20000eee:	9702      	str	r7, [sp, #8]
20000ef0:	9f08      	ldr	r7, [sp, #32]
20000ef2:	1a7f      	subs	r7, r7, r1

20000ef4 <RenderMText_OutLoop>:
20000ef4:	9d02      	ldr	r5, [sp, #8]
20000ef6:	42af      	cmp	r7, r5
20000ef8:	d900      	bls.n	20000efc <RenderMText_OutLoop+0x8>
20000efa:	462f      	mov	r7, r5
20000efc:	2f08      	cmp	r7, #8
20000efe:	d20e      	bcs.n	20000f1e <RenderMText_Last+0x1a>
20000f00:	2f04      	cmp	r7, #4
20000f02:	d30b      	bcc.n	20000f1c <RenderMText_Last+0x18>

20000f04 <RenderMText_Last>:
20000f04:	7815      	ldrb	r5, [r2, #0]
20000f06:	5d5d      	ldrb	r5, [r3, r5]
20000f08:	3201      	adds	r2, #1
20000f0a:	00ed      	lsls	r5, r5, #3
20000f0c:	4475      	add	r5, lr
20000f0e:	6829      	ldr	r1, [r5, #0]
20000f10:	4031      	ands	r1, r6
20000f12:	4061      	eors	r1, r4
20000f14:	c002      	stmia	r0!, {r1}
20000f16:	9a01      	ldr	r2, [sp, #4]
20000f18:	2f04      	cmp	r7, #4
20000f1a:	d8eb      	bhi.n	20000ef4 <RenderMText_OutLoop>
20000f1c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
20000f1e:	08b9      	lsrs	r1, r7, #2
20000f20:	008f      	lsls	r7, r1, #2
20000f22:	1bed      	subs	r5, r5, r7
20000f24:	9502      	str	r5, [sp, #8]
20000f26:	3901      	subs	r1, #1

20000f28 <RenderMText_InLoop>:
20000f28:	7815      	ldrb	r5, [r2, #0]
20000f2a:	5d5d      	ldrb	r5, [r3, r5]
20000f2c:	3201      	adds	r2, #1
20000f2e:	00ed      	lsls	r5, r5, #3
20000f30:	4475      	add	r5, lr
20000f32:	682f      	ldr	r7, [r5, #0]
20000f34:	4037      	ands	r7, r6
20000f36:	4067      	eors	r7, r4
20000f38:	c080      	stmia	r0!, {r7}
20000f3a:	686f      	ldr	r7, [r5, #4]
20000f3c:	4037      	ands	r7, r6
20000f3e:	4067      	eors	r7, r4
20000f40:	c080      	stmia	r0!, {r7}
20000f42:	3902      	subs	r1, #2
20000f44:	d8f0      	bhi.n	20000f28 <RenderMText_InLoop>
20000f46:	9f08      	ldr	r7, [sp, #32]
20000f48:	d0dc      	beq.n	20000f04 <RenderMText_Last>
20000f4a:	9a01      	ldr	r2, [sp, #4]
20000f4c:	e7d2      	b.n	20000ef4 <RenderMText_OutLoop>
20000f4e:	46c0      	nop			; (mov r8, r8)

20000f50 <RenderMText_Addr>:
20000f50:	200380d8 	.word	0x200380d8

20000f54 <RenderMText_pSioBase>:
20000f54:	d0000000 	.word	0xd0000000

20000f58 <RenderOscil>:
20000f58:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
20000f5a:	9c08      	ldr	r4, [sp, #32]
20000f5c:	8925      	ldrh	r5, [r4, #8]
20000f5e:	2703      	movs	r7, #3
20000f60:	43bd      	bics	r5, r7
20000f62:	9508      	str	r5, [sp, #32]
20000f64:	43b9      	bics	r1, r7
20000f66:	43bb      	bics	r3, r7
20000f68:	9302      	str	r3, [sp, #8]
20000f6a:	8965      	ldrh	r5, [r4, #10]
20000f6c:	3d01      	subs	r5, #1
20000f6e:	1aad      	subs	r5, r5, r2
20000f70:	7e23      	ldrb	r3, [r4, #24]
20000f72:	469e      	mov	lr, r3
20000f74:	68e2      	ldr	r2, [r4, #12]
20000f76:	9201      	str	r2, [sp, #4]
20000f78:	440a      	add	r2, r1
20000f7a:	7d66      	ldrb	r6, [r4, #21]
20000f7c:	0233      	lsls	r3, r6, #8
20000f7e:	4333      	orrs	r3, r6
20000f80:	041e      	lsls	r6, r3, #16
20000f82:	431e      	orrs	r6, r3
20000f84:	7d24      	ldrb	r4, [r4, #20]
20000f86:	0223      	lsls	r3, r4, #8
20000f88:	4323      	orrs	r3, r4
20000f8a:	041c      	lsls	r4, r3, #16
20000f8c:	431c      	orrs	r4, r3
20000f8e:	4066      	eors	r6, r4
20000f90:	9f08      	ldr	r7, [sp, #32]
20000f92:	1a7f      	subs	r7, r7, r1
20000f94:	2f04      	cmp	r7, #4
20000f96:	d801      	bhi.n	20000f9c <RenderOscil_OutLoop>
20000f98:	9f08      	ldr	r7, [sp, #32]
20000f9a:	e007      	b.n	20000fac <RenderOscil_Last>

20000f9c <RenderOscil_OutLoop>:
20000f9c:	9b02      	ldr	r3, [sp, #8]
20000f9e:	429f      	cmp	r7, r3
20000fa0:	d900      	bls.n	20000fa4 <RenderOscil_OutLoop+0x8>
20000fa2:	461f      	mov	r7, r3
20000fa4:	2f08      	cmp	r7, #8
20000fa6:	d21e      	bcs.n	20000fe6 <RenderOscil_Last+0x3a>
20000fa8:	2f04      	cmp	r7, #4
20000faa:	d31b      	bcc.n	20000fe4 <RenderOscil_Last+0x38>

20000fac <RenderOscil_Last>:
20000fac:	2100      	movs	r1, #0
20000fae:	7813      	ldrb	r3, [r2, #0]
20000fb0:	1b5b      	subs	r3, r3, r5
20000fb2:	459e      	cmp	lr, r3
20000fb4:	4149      	adcs	r1, r1
20000fb6:	7853      	ldrb	r3, [r2, #1]
20000fb8:	1b5b      	subs	r3, r3, r5
20000fba:	459e      	cmp	lr, r3
20000fbc:	4149      	adcs	r1, r1
20000fbe:	7893      	ldrb	r3, [r2, #2]
20000fc0:	1b5b      	subs	r3, r3, r5
20000fc2:	459e      	cmp	lr, r3
20000fc4:	4149      	adcs	r1, r1
20000fc6:	78d3      	ldrb	r3, [r2, #3]
20000fc8:	1b5b      	subs	r3, r3, r5
20000fca:	459e      	cmp	lr, r3
20000fcc:	4149      	adcs	r1, r1
20000fce:	3204      	adds	r2, #4
20000fd0:	00c9      	lsls	r1, r1, #3
20000fd2:	4b20      	ldr	r3, [pc, #128]	; (20001054 <RenderOscil_Addr>)
20000fd4:	4419      	add	r1, r3
20000fd6:	6849      	ldr	r1, [r1, #4]
20000fd8:	4031      	ands	r1, r6
20000fda:	4061      	eors	r1, r4
20000fdc:	c002      	stmia	r0!, {r1}
20000fde:	9a01      	ldr	r2, [sp, #4]
20000fe0:	2f04      	cmp	r7, #4
20000fe2:	d8db      	bhi.n	20000f9c <RenderOscil_OutLoop>
20000fe4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
20000fe6:	08b9      	lsrs	r1, r7, #2
20000fe8:	008f      	lsls	r7, r1, #2
20000fea:	1bdb      	subs	r3, r3, r7
20000fec:	9302      	str	r3, [sp, #8]
20000fee:	3901      	subs	r1, #1

20000ff0 <RenderOscil_InLoop>:
20000ff0:	2700      	movs	r7, #0
20000ff2:	7813      	ldrb	r3, [r2, #0]
20000ff4:	1b5b      	subs	r3, r3, r5
20000ff6:	459e      	cmp	lr, r3
20000ff8:	417f      	adcs	r7, r7
20000ffa:	7853      	ldrb	r3, [r2, #1]
20000ffc:	1b5b      	subs	r3, r3, r5
20000ffe:	459e      	cmp	lr, r3
20001000:	417f      	adcs	r7, r7
20001002:	7893      	ldrb	r3, [r2, #2]
20001004:	1b5b      	subs	r3, r3, r5
20001006:	459e      	cmp	lr, r3
20001008:	417f      	adcs	r7, r7
2000100a:	78d3      	ldrb	r3, [r2, #3]
2000100c:	1b5b      	subs	r3, r3, r5
2000100e:	459e      	cmp	lr, r3
20001010:	417f      	adcs	r7, r7
20001012:	7913      	ldrb	r3, [r2, #4]
20001014:	1b5b      	subs	r3, r3, r5
20001016:	459e      	cmp	lr, r3
20001018:	417f      	adcs	r7, r7
2000101a:	7953      	ldrb	r3, [r2, #5]
2000101c:	1b5b      	subs	r3, r3, r5
2000101e:	459e      	cmp	lr, r3
20001020:	417f      	adcs	r7, r7
20001022:	7993      	ldrb	r3, [r2, #6]
20001024:	1b5b      	subs	r3, r3, r5
20001026:	459e      	cmp	lr, r3
20001028:	417f      	adcs	r7, r7
2000102a:	79d3      	ldrb	r3, [r2, #7]
2000102c:	1b5b      	subs	r3, r3, r5
2000102e:	459e      	cmp	lr, r3
20001030:	417f      	adcs	r7, r7
20001032:	3208      	adds	r2, #8
20001034:	00ff      	lsls	r7, r7, #3
20001036:	4b07      	ldr	r3, [pc, #28]	; (20001054 <RenderOscil_Addr>)
20001038:	441f      	add	r7, r3
2000103a:	683b      	ldr	r3, [r7, #0]
2000103c:	4033      	ands	r3, r6
2000103e:	4063      	eors	r3, r4
20001040:	687f      	ldr	r7, [r7, #4]
20001042:	4037      	ands	r7, r6
20001044:	4067      	eors	r7, r4
20001046:	c088      	stmia	r0!, {r3, r7}
20001048:	3902      	subs	r1, #2
2000104a:	d8d1      	bhi.n	20000ff0 <RenderOscil_InLoop>
2000104c:	9f08      	ldr	r7, [sp, #32]
2000104e:	d0ad      	beq.n	20000fac <RenderOscil_Last>
20001050:	9a01      	ldr	r2, [sp, #4]
20001052:	e7a3      	b.n	20000f9c <RenderOscil_OutLoop>

20001054 <RenderOscil_Addr>:
20001054:	200380d8 	.word	0x200380d8

20001058 <RenderOscLine>:
20001058:	b5fc      	push	{r2, r3, r4, r5, r6, r7, lr}
2000105a:	9c07      	ldr	r4, [sp, #28]
2000105c:	8925      	ldrh	r5, [r4, #8]
2000105e:	086d      	lsrs	r5, r5, #1
20001060:	9507      	str	r5, [sp, #28]
20001062:	0849      	lsrs	r1, r1, #1
20001064:	085b      	lsrs	r3, r3, #1
20001066:	9301      	str	r3, [sp, #4]
20001068:	8965      	ldrh	r5, [r4, #10]
2000106a:	3d01      	subs	r5, #1
2000106c:	1aad      	subs	r5, r5, r2
2000106e:	46ae      	mov	lr, r5
20001070:	68e2      	ldr	r2, [r4, #12]
20001072:	9200      	str	r2, [sp, #0]
20001074:	440a      	add	r2, r1
20001076:	7d66      	ldrb	r6, [r4, #21]
20001078:	0237      	lsls	r7, r6, #8
2000107a:	433e      	orrs	r6, r7
2000107c:	7d24      	ldrb	r4, [r4, #20]
2000107e:	0227      	lsls	r7, r4, #8
20001080:	433c      	orrs	r4, r7
20001082:	9f07      	ldr	r7, [sp, #28]
20001084:	1a79      	subs	r1, r7, r1

20001086 <RenderOscLine_OutLoop>:
20001086:	9b01      	ldr	r3, [sp, #4]
20001088:	4299      	cmp	r1, r3
2000108a:	d900      	bls.n	2000108e <RenderOscLine_OutLoop+0x8>
2000108c:	4619      	mov	r1, r3
2000108e:	2900      	cmp	r1, #0
20001090:	d01b      	beq.n	200010ca <RenderOscLine_Stop>
20001092:	1a5b      	subs	r3, r3, r1
20001094:	9301      	str	r3, [sp, #4]
20001096:	7815      	ldrb	r5, [r2, #0]

20001098 <RenderOscLine_InLoop>:
20001098:	7813      	ldrb	r3, [r2, #0]
2000109a:	3201      	adds	r2, #1
2000109c:	4627      	mov	r7, r4
2000109e:	4573      	cmp	r3, lr
200010a0:	d00a      	beq.n	200010b8 <RenderOscLine_InLoop+0x20>
200010a2:	d303      	bcc.n	200010ac <RenderOscLine_InLoop+0x14>
200010a4:	42ab      	cmp	r3, r5
200010a6:	d901      	bls.n	200010ac <RenderOscLine_InLoop+0x14>
200010a8:	45ae      	cmp	lr, r5
200010aa:	d805      	bhi.n	200010b8 <RenderOscLine_InLoop+0x20>
200010ac:	42ab      	cmp	r3, r5
200010ae:	d204      	bcs.n	200010ba <RenderOscLine_InLoop+0x22>
200010b0:	4573      	cmp	r3, lr
200010b2:	d202      	bcs.n	200010ba <RenderOscLine_InLoop+0x22>
200010b4:	45ae      	cmp	lr, r5
200010b6:	d200      	bcs.n	200010ba <RenderOscLine_InLoop+0x22>
200010b8:	4637      	mov	r7, r6
200010ba:	8007      	strh	r7, [r0, #0]
200010bc:	3002      	adds	r0, #2
200010be:	461d      	mov	r5, r3
200010c0:	3901      	subs	r1, #1
200010c2:	d1e9      	bne.n	20001098 <RenderOscLine_InLoop>
200010c4:	9907      	ldr	r1, [sp, #28]
200010c6:	9a00      	ldr	r2, [sp, #0]
200010c8:	e7dd      	b.n	20001086 <RenderOscLine_OutLoop>

200010ca <RenderOscLine_Stop>:
200010ca:	bdfc      	pop	{r2, r3, r4, r5, r6, r7, pc}

200010cc <RenderOscLine_Addr>:
200010cc:	200380d8 	.word	0x200380d8

200010d0 <RenderPersp>:
200010d0:	b5f0      	push	{r4, r5, r6, r7, lr}
200010d2:	4e41      	ldr	r6, [pc, #260]	; (200011d8 <RenderPersp_pSioBase>)
200010d4:	8b15      	ldrh	r5, [r2, #24]
200010d6:	7f54      	ldrb	r4, [r2, #29]
200010d8:	b264      	sxtb	r4, r4
200010da:	00a4      	lsls	r4, r4, #2
200010dc:	d107      	bne.n	200010ee <RenderPersp+0x1e>
200010de:	086d      	lsrs	r5, r5, #1
200010e0:	1b49      	subs	r1, r1, r5
200010e2:	468c      	mov	ip, r1
200010e4:	2501      	movs	r5, #1
200010e6:	6675      	str	r5, [r6, #100]	; 0x64
200010e8:	032d      	lsls	r5, r5, #12
200010ea:	6635      	str	r5, [r6, #96]	; 0x60
200010ec:	e009      	b.n	20001102 <RenderPersp+0x32>
200010ee:	d502      	bpl.n	200010f6 <RenderPersp+0x26>
200010f0:	1a69      	subs	r1, r5, r1
200010f2:	3901      	subs	r1, #1
200010f4:	4264      	negs	r4, r4
200010f6:	1b4f      	subs	r7, r1, r5
200010f8:	46bc      	mov	ip, r7
200010fa:	032d      	lsls	r5, r5, #12
200010fc:	6635      	str	r5, [r6, #96]	; 0x60
200010fe:	1909      	adds	r1, r1, r4
20001100:	6671      	str	r1, [r6, #100]	; 0x64
20001102:	8ad3      	ldrh	r3, [r2, #22]
20001104:	085d      	lsrs	r5, r3, #1
20001106:	426d      	negs	r5, r5
20001108:	46ae      	mov	lr, r5
2000110a:	089f      	lsrs	r7, r3, #2
2000110c:	7f91      	ldrb	r1, [r2, #30]
2000110e:	7fd4      	ldrb	r4, [r2, #31]
20001110:	4b32      	ldr	r3, [pc, #200]	; (200011dc <RenderPersp_Interp>)
20001112:	6816      	ldr	r6, [r2, #0]
20001114:	611e      	str	r6, [r3, #16]
20001116:	4e32      	ldr	r6, [pc, #200]	; (200011e0 <RenderPersp_Ctrl>)
20001118:	1a76      	subs	r6, r6, r1
2000111a:	014d      	lsls	r5, r1, #5
2000111c:	432e      	orrs	r6, r5
2000111e:	3901      	subs	r1, #1
20001120:	190d      	adds	r5, r1, r4
20001122:	02ad      	lsls	r5, r5, #10
20001124:	432e      	orrs	r6, r5
20001126:	631e      	str	r6, [r3, #48]	; 0x30
20001128:	4e2d      	ldr	r6, [pc, #180]	; (200011e0 <RenderPersp_Ctrl>)
2000112a:	0289      	lsls	r1, r1, #10
2000112c:	430e      	orrs	r6, r1
2000112e:	62de      	str	r6, [r3, #44]	; 0x2c
20001130:	6854      	ldr	r4, [r2, #4]
20001132:	4929      	ldr	r1, [pc, #164]	; (200011d8 <RenderPersp_pSioBase>)
20001134:	6f09      	ldr	r1, [r1, #112]	; 0x70
20001136:	6825      	ldr	r5, [r4, #0]
20001138:	434d      	muls	r5, r1
2000113a:	132d      	asrs	r5, r5, #12
2000113c:	609d      	str	r5, [r3, #8]
2000113e:	68e6      	ldr	r6, [r4, #12]
20001140:	434e      	muls	r6, r1
20001142:	1336      	asrs	r6, r6, #12
20001144:	60de      	str	r6, [r3, #12]
20001146:	4672      	mov	r2, lr
20001148:	4355      	muls	r5, r2
2000114a:	4372      	muls	r2, r6
2000114c:	468e      	mov	lr, r1
2000114e:	6866      	ldr	r6, [r4, #4]
20001150:	4371      	muls	r1, r6
20001152:	1309      	asrs	r1, r1, #12
20001154:	4666      	mov	r6, ip
20001156:	4371      	muls	r1, r6
20001158:	186d      	adds	r5, r5, r1
2000115a:	68a1      	ldr	r1, [r4, #8]
2000115c:	186d      	adds	r5, r5, r1
2000115e:	601d      	str	r5, [r3, #0]
20001160:	6921      	ldr	r1, [r4, #16]
20001162:	4675      	mov	r5, lr
20001164:	4369      	muls	r1, r5
20001166:	1309      	asrs	r1, r1, #12
20001168:	4371      	muls	r1, r6
2000116a:	1852      	adds	r2, r2, r1
2000116c:	6961      	ldr	r1, [r4, #20]
2000116e:	1852      	adds	r2, r2, r1
20001170:	605a      	str	r2, [r3, #4]
20001172:	087f      	lsrs	r7, r7, #1
20001174:	d30e      	bcc.n	20001194 <RenderPersp+0xc4>
20001176:	69dc      	ldr	r4, [r3, #28]
20001178:	7826      	ldrb	r6, [r4, #0]
2000117a:	69dc      	ldr	r4, [r3, #28]
2000117c:	7825      	ldrb	r5, [r4, #0]
2000117e:	022d      	lsls	r5, r5, #8
20001180:	432e      	orrs	r6, r5
20001182:	69dc      	ldr	r4, [r3, #28]
20001184:	7825      	ldrb	r5, [r4, #0]
20001186:	042d      	lsls	r5, r5, #16
20001188:	432e      	orrs	r6, r5
2000118a:	69dc      	ldr	r4, [r3, #28]
2000118c:	7825      	ldrb	r5, [r4, #0]
2000118e:	062d      	lsls	r5, r5, #24
20001190:	432e      	orrs	r6, r5
20001192:	c040      	stmia	r0!, {r6}
20001194:	423f      	tst	r7, r7
20001196:	d01e      	beq.n	200011d6 <RenderPersp+0x106>
20001198:	69dc      	ldr	r4, [r3, #28]
2000119a:	7821      	ldrb	r1, [r4, #0]
2000119c:	69dc      	ldr	r4, [r3, #28]
2000119e:	7824      	ldrb	r4, [r4, #0]
200011a0:	0224      	lsls	r4, r4, #8
200011a2:	4321      	orrs	r1, r4
200011a4:	69dc      	ldr	r4, [r3, #28]
200011a6:	7824      	ldrb	r4, [r4, #0]
200011a8:	0424      	lsls	r4, r4, #16
200011aa:	4321      	orrs	r1, r4
200011ac:	69dc      	ldr	r4, [r3, #28]
200011ae:	7824      	ldrb	r4, [r4, #0]
200011b0:	0624      	lsls	r4, r4, #24
200011b2:	4321      	orrs	r1, r4
200011b4:	69dc      	ldr	r4, [r3, #28]
200011b6:	7822      	ldrb	r2, [r4, #0]
200011b8:	69dc      	ldr	r4, [r3, #28]
200011ba:	7824      	ldrb	r4, [r4, #0]
200011bc:	0224      	lsls	r4, r4, #8
200011be:	4322      	orrs	r2, r4
200011c0:	69dc      	ldr	r4, [r3, #28]
200011c2:	7824      	ldrb	r4, [r4, #0]
200011c4:	0424      	lsls	r4, r4, #16
200011c6:	4322      	orrs	r2, r4
200011c8:	69dc      	ldr	r4, [r3, #28]
200011ca:	7824      	ldrb	r4, [r4, #0]
200011cc:	0624      	lsls	r4, r4, #24
200011ce:	4322      	orrs	r2, r4
200011d0:	c006      	stmia	r0!, {r1, r2}
200011d2:	3f01      	subs	r7, #1
200011d4:	d1e0      	bne.n	20001198 <RenderPersp+0xc8>
200011d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

200011d8 <RenderPersp_pSioBase>:
200011d8:	d0000000 	.word	0xd0000000

200011dc <RenderPersp_Interp>:
200011dc:	d00000c0 	.word	0xd00000c0

200011e0 <RenderPersp_Ctrl>:
200011e0:	0004000c 	.word	0x0004000c

200011e4 <RenderPersp2>:
200011e4:	b5f0      	push	{r4, r5, r6, r7, lr}
200011e6:	4e3c      	ldr	r6, [pc, #240]	; (200012d8 <RenderPersp_pSioBase>)
200011e8:	8b15      	ldrh	r5, [r2, #24]
200011ea:	7f54      	ldrb	r4, [r2, #29]
200011ec:	b264      	sxtb	r4, r4
200011ee:	00a4      	lsls	r4, r4, #2
200011f0:	d107      	bne.n	20001202 <RenderPersp2+0x1e>
200011f2:	086d      	lsrs	r5, r5, #1
200011f4:	1b49      	subs	r1, r1, r5
200011f6:	468c      	mov	ip, r1
200011f8:	2501      	movs	r5, #1
200011fa:	6675      	str	r5, [r6, #100]	; 0x64
200011fc:	032d      	lsls	r5, r5, #12
200011fe:	6635      	str	r5, [r6, #96]	; 0x60
20001200:	e009      	b.n	20001216 <RenderPersp2+0x32>
20001202:	d502      	bpl.n	2000120a <RenderPersp2+0x26>
20001204:	1a69      	subs	r1, r5, r1
20001206:	3901      	subs	r1, #1
20001208:	4264      	negs	r4, r4
2000120a:	1b4f      	subs	r7, r1, r5
2000120c:	46bc      	mov	ip, r7
2000120e:	032d      	lsls	r5, r5, #12
20001210:	6635      	str	r5, [r6, #96]	; 0x60
20001212:	1909      	adds	r1, r1, r4
20001214:	6671      	str	r1, [r6, #100]	; 0x64
20001216:	8ad3      	ldrh	r3, [r2, #22]
20001218:	085d      	lsrs	r5, r3, #1
2000121a:	426d      	negs	r5, r5
2000121c:	46ae      	mov	lr, r5
2000121e:	089f      	lsrs	r7, r3, #2
20001220:	7f91      	ldrb	r1, [r2, #30]
20001222:	7fd4      	ldrb	r4, [r2, #31]
20001224:	4b2d      	ldr	r3, [pc, #180]	; (200012dc <RenderPersp_Interp>)
20001226:	6816      	ldr	r6, [r2, #0]
20001228:	611e      	str	r6, [r3, #16]
2000122a:	4e2d      	ldr	r6, [pc, #180]	; (200012e0 <RenderPersp_Ctrl>)
2000122c:	1a76      	subs	r6, r6, r1
2000122e:	014d      	lsls	r5, r1, #5
20001230:	432e      	orrs	r6, r5
20001232:	3901      	subs	r1, #1
20001234:	190d      	adds	r5, r1, r4
20001236:	02ad      	lsls	r5, r5, #10
20001238:	432e      	orrs	r6, r5
2000123a:	631e      	str	r6, [r3, #48]	; 0x30
2000123c:	4e28      	ldr	r6, [pc, #160]	; (200012e0 <RenderPersp_Ctrl>)
2000123e:	0289      	lsls	r1, r1, #10
20001240:	430e      	orrs	r6, r1
20001242:	62de      	str	r6, [r3, #44]	; 0x2c
20001244:	6854      	ldr	r4, [r2, #4]
20001246:	4924      	ldr	r1, [pc, #144]	; (200012d8 <RenderPersp_pSioBase>)
20001248:	6f09      	ldr	r1, [r1, #112]	; 0x70
2000124a:	6825      	ldr	r5, [r4, #0]
2000124c:	434d      	muls	r5, r1
2000124e:	12ed      	asrs	r5, r5, #11
20001250:	609d      	str	r5, [r3, #8]
20001252:	106d      	asrs	r5, r5, #1
20001254:	68e6      	ldr	r6, [r4, #12]
20001256:	434e      	muls	r6, r1
20001258:	12f6      	asrs	r6, r6, #11
2000125a:	60de      	str	r6, [r3, #12]
2000125c:	1076      	asrs	r6, r6, #1
2000125e:	4672      	mov	r2, lr
20001260:	4355      	muls	r5, r2
20001262:	4372      	muls	r2, r6
20001264:	468e      	mov	lr, r1
20001266:	6866      	ldr	r6, [r4, #4]
20001268:	4371      	muls	r1, r6
2000126a:	1309      	asrs	r1, r1, #12
2000126c:	4666      	mov	r6, ip
2000126e:	4371      	muls	r1, r6
20001270:	186d      	adds	r5, r5, r1
20001272:	68a1      	ldr	r1, [r4, #8]
20001274:	186d      	adds	r5, r5, r1
20001276:	601d      	str	r5, [r3, #0]
20001278:	6921      	ldr	r1, [r4, #16]
2000127a:	4675      	mov	r5, lr
2000127c:	4369      	muls	r1, r5
2000127e:	1309      	asrs	r1, r1, #12
20001280:	4371      	muls	r1, r6
20001282:	1852      	adds	r2, r2, r1
20001284:	6961      	ldr	r1, [r4, #20]
20001286:	1852      	adds	r2, r2, r1
20001288:	605a      	str	r2, [r3, #4]
2000128a:	087f      	lsrs	r7, r7, #1
2000128c:	d30a      	bcc.n	200012a4 <RenderPersp2+0xc0>
2000128e:	69dc      	ldr	r4, [r3, #28]
20001290:	7821      	ldrb	r1, [r4, #0]
20001292:	020c      	lsls	r4, r1, #8
20001294:	4321      	orrs	r1, r4
20001296:	69dc      	ldr	r4, [r3, #28]
20001298:	7824      	ldrb	r4, [r4, #0]
2000129a:	0424      	lsls	r4, r4, #16
2000129c:	4321      	orrs	r1, r4
2000129e:	0224      	lsls	r4, r4, #8
200012a0:	4321      	orrs	r1, r4
200012a2:	c002      	stmia	r0!, {r1}
200012a4:	423f      	tst	r7, r7
200012a6:	d016      	beq.n	200012d6 <RenderPersp2+0xf2>
200012a8:	69dc      	ldr	r4, [r3, #28]
200012aa:	7821      	ldrb	r1, [r4, #0]
200012ac:	020c      	lsls	r4, r1, #8
200012ae:	4321      	orrs	r1, r4
200012b0:	69dc      	ldr	r4, [r3, #28]
200012b2:	7824      	ldrb	r4, [r4, #0]
200012b4:	0424      	lsls	r4, r4, #16
200012b6:	4321      	orrs	r1, r4
200012b8:	0224      	lsls	r4, r4, #8
200012ba:	4321      	orrs	r1, r4
200012bc:	69dc      	ldr	r4, [r3, #28]
200012be:	7822      	ldrb	r2, [r4, #0]
200012c0:	0214      	lsls	r4, r2, #8
200012c2:	4322      	orrs	r2, r4
200012c4:	69dc      	ldr	r4, [r3, #28]
200012c6:	7824      	ldrb	r4, [r4, #0]
200012c8:	0424      	lsls	r4, r4, #16
200012ca:	4322      	orrs	r2, r4
200012cc:	0224      	lsls	r4, r4, #8
200012ce:	4322      	orrs	r2, r4
200012d0:	c006      	stmia	r0!, {r1, r2}
200012d2:	3f01      	subs	r7, #1
200012d4:	d1e8      	bne.n	200012a8 <RenderPersp2+0xc4>
200012d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

200012d8 <RenderPersp_pSioBase>:
200012d8:	d0000000 	.word	0xd0000000

200012dc <RenderPersp_Interp>:
200012dc:	d00000c0 	.word	0xd00000c0

200012e0 <RenderPersp_Ctrl>:
200012e0:	0004000c 	.word	0x0004000c

200012e4 <RenderPlane2>:
200012e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
200012e6:	9c06      	ldr	r4, [sp, #24]
200012e8:	8927      	ldrh	r7, [r4, #8]
200012ea:	2603      	movs	r6, #3
200012ec:	43b7      	bics	r7, r6
200012ee:	9706      	str	r7, [sp, #24]
200012f0:	43b1      	bics	r1, r6
200012f2:	43b3      	bics	r3, r6
200012f4:	9300      	str	r3, [sp, #0]
200012f6:	8865      	ldrh	r5, [r4, #2]
200012f8:	436a      	muls	r2, r5
200012fa:	68e5      	ldr	r5, [r4, #12]
200012fc:	442a      	add	r2, r5
200012fe:	4696      	mov	lr, r2
20001300:	08ce      	lsrs	r6, r1, #3
20001302:	4432      	add	r2, r6
20001304:	6963      	ldr	r3, [r4, #20]
20001306:	69a7      	ldr	r7, [r4, #24]
20001308:	074d      	lsls	r5, r1, #29
2000130a:	d512      	bpl.n	20001332 <RenderPlane2+0x4e>
2000130c:	7815      	ldrb	r5, [r2, #0]
2000130e:	5cd6      	ldrb	r6, [r2, r3]
20001310:	3201      	adds	r2, #1
20001312:	0736      	lsls	r6, r6, #28
20001314:	0db6      	lsrs	r6, r6, #22
20001316:	072d      	lsls	r5, r5, #28
20001318:	0ead      	lsrs	r5, r5, #26
2000131a:	4335      	orrs	r5, r6
2000131c:	597d      	ldr	r5, [r7, r5]
2000131e:	c020      	stmia	r0!, {r5}
20001320:	3104      	adds	r1, #4
20001322:	9e06      	ldr	r6, [sp, #24]
20001324:	42b1      	cmp	r1, r6
20001326:	d301      	bcc.n	2000132c <RenderPlane2+0x48>
20001328:	2100      	movs	r1, #0
2000132a:	4672      	mov	r2, lr
2000132c:	9e00      	ldr	r6, [sp, #0]
2000132e:	3e04      	subs	r6, #4
20001330:	9600      	str	r6, [sp, #0]
20001332:	9e06      	ldr	r6, [sp, #24]
20001334:	1a76      	subs	r6, r6, r1

20001336 <RenderPlane2_OutLoop>:
20001336:	9c00      	ldr	r4, [sp, #0]
20001338:	42a6      	cmp	r6, r4
2000133a:	d900      	bls.n	2000133e <RenderPlane2_OutLoop+0x8>
2000133c:	4626      	mov	r6, r4
2000133e:	2e08      	cmp	r6, #8
20001340:	d20f      	bcs.n	20001362 <RenderPlane2_Last+0x1c>
20001342:	2e04      	cmp	r6, #4
20001344:	d30c      	bcc.n	20001360 <RenderPlane2_Last+0x1a>

20001346 <RenderPlane2_Last>:
20001346:	7815      	ldrb	r5, [r2, #0]
20001348:	5cd4      	ldrb	r4, [r2, r3]
2000134a:	3201      	adds	r2, #1
2000134c:	0924      	lsrs	r4, r4, #4
2000134e:	0224      	lsls	r4, r4, #8
20001350:	432c      	orrs	r4, r5
20001352:	0924      	lsrs	r4, r4, #4
20001354:	00a4      	lsls	r4, r4, #2
20001356:	593c      	ldr	r4, [r7, r4]
20001358:	c010      	stmia	r0!, {r4}
2000135a:	4672      	mov	r2, lr
2000135c:	2e04      	cmp	r6, #4
2000135e:	d8ea      	bhi.n	20001336 <RenderPlane2_OutLoop>
20001360:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
20001362:	08b1      	lsrs	r1, r6, #2
20001364:	008e      	lsls	r6, r1, #2
20001366:	1ba4      	subs	r4, r4, r6
20001368:	9400      	str	r4, [sp, #0]
2000136a:	3901      	subs	r1, #1

2000136c <RenderPlane2_InLoop>:
2000136c:	7815      	ldrb	r5, [r2, #0]
2000136e:	5cd6      	ldrb	r6, [r2, r3]
20001370:	3201      	adds	r2, #1
20001372:	0934      	lsrs	r4, r6, #4
20001374:	0224      	lsls	r4, r4, #8
20001376:	432c      	orrs	r4, r5
20001378:	0924      	lsrs	r4, r4, #4
2000137a:	00a4      	lsls	r4, r4, #2
2000137c:	593c      	ldr	r4, [r7, r4]
2000137e:	0736      	lsls	r6, r6, #28
20001380:	0db6      	lsrs	r6, r6, #22
20001382:	072d      	lsls	r5, r5, #28
20001384:	0ead      	lsrs	r5, r5, #26
20001386:	4335      	orrs	r5, r6
20001388:	597d      	ldr	r5, [r7, r5]
2000138a:	c030      	stmia	r0!, {r4, r5}
2000138c:	3902      	subs	r1, #2
2000138e:	d8ed      	bhi.n	2000136c <RenderPlane2_InLoop>

20001390 <RenderPlane2_EndLoop>:
20001390:	9e06      	ldr	r6, [sp, #24]
20001392:	d0d8      	beq.n	20001346 <RenderPlane2_Last>
20001394:	4672      	mov	r2, lr
20001396:	e7ce      	b.n	20001336 <RenderPlane2_OutLoop>

20001398 <RenderProgress>:
20001398:	b5f0      	push	{r4, r5, r6, r7, lr}
2000139a:	9c05      	ldr	r4, [sp, #20]
2000139c:	0889      	lsrs	r1, r1, #2
2000139e:	68e5      	ldr	r5, [r4, #12]
200013a0:	5caa      	ldrb	r2, [r5, r2]
200013a2:	089b      	lsrs	r3, r3, #2
200013a4:	8927      	ldrh	r7, [r4, #8]
200013a6:	08bf      	lsrs	r7, r7, #2
200013a8:	46be      	mov	lr, r7
200013aa:	69a5      	ldr	r5, [r4, #24]
200013ac:	6964      	ldr	r4, [r4, #20]
200013ae:	421b      	tst	r3, r3
200013b0:	d017      	beq.n	200013e2 <RenderProgress+0x4a>
200013b2:	4677      	mov	r7, lr
200013b4:	1a7f      	subs	r7, r7, r1
200013b6:	429f      	cmp	r7, r3
200013b8:	d900      	bls.n	200013bc <RenderProgress+0x24>
200013ba:	461f      	mov	r7, r3
200013bc:	1bdb      	subs	r3, r3, r7
200013be:	4291      	cmp	r1, r2
200013c0:	d208      	bcs.n	200013d4 <RenderProgress+0x3c>
200013c2:	1a56      	subs	r6, r2, r1
200013c4:	42be      	cmp	r6, r7
200013c6:	d900      	bls.n	200013ca <RenderProgress+0x32>
200013c8:	463e      	mov	r6, r7
200013ca:	1bbf      	subs	r7, r7, r6
200013cc:	c040      	stmia	r0!, {r6}
200013ce:	1866      	adds	r6, r4, r1
200013d0:	c040      	stmia	r0!, {r6}
200013d2:	4611      	mov	r1, r2
200013d4:	423f      	tst	r7, r7
200013d6:	d002      	beq.n	200013de <RenderProgress+0x46>
200013d8:	c080      	stmia	r0!, {r7}
200013da:	186e      	adds	r6, r5, r1
200013dc:	c040      	stmia	r0!, {r6}
200013de:	2100      	movs	r1, #0
200013e0:	e7e5      	b.n	200013ae <RenderProgress+0x16>
200013e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

200013e4 <RenderSprite>:
200013e4:	b5f0      	push	{r4, r5, r6, r7, lr}
200013e6:	6817      	ldr	r7, [r2, #0]
200013e8:	8ad6      	ldrh	r6, [r2, #22]
200013ea:	8c12      	ldrh	r2, [r2, #32]
200013ec:	3a01      	subs	r2, #1
200013ee:	d324      	bcc.n	2000143a <RenderSprite+0x56>
200013f0:	b407      	push	{r0, r1, r2}
200013f2:	cf08      	ldmia	r7!, {r3}
200013f4:	8a5c      	ldrh	r4, [r3, #18]
200013f6:	b224      	sxth	r4, r4
200013f8:	1b09      	subs	r1, r1, r4
200013fa:	d41c      	bmi.n	20001436 <RenderSprite+0x52>
200013fc:	8adc      	ldrh	r4, [r3, #22]
200013fe:	42a1      	cmp	r1, r4
20001400:	da19      	bge.n	20001436 <RenderSprite+0x52>
20001402:	685c      	ldr	r4, [r3, #4]
20001404:	5c65      	ldrb	r5, [r4, r1]
20001406:	689c      	ldr	r4, [r3, #8]
20001408:	5c62      	ldrb	r2, [r4, r1]
2000140a:	8b1c      	ldrh	r4, [r3, #24]
2000140c:	4361      	muls	r1, r4
2000140e:	681c      	ldr	r4, [r3, #0]
20001410:	4421      	add	r1, r4
20001412:	8a1c      	ldrh	r4, [r3, #16]
20001414:	b224      	sxth	r4, r4
20001416:	7b1b      	ldrb	r3, [r3, #12]
20001418:	1964      	adds	r4, r4, r5
2000141a:	d502      	bpl.n	20001422 <RenderSprite+0x3e>
2000141c:	1b2d      	subs	r5, r5, r4
2000141e:	1912      	adds	r2, r2, r4
20001420:	2400      	movs	r4, #0
20001422:	1949      	adds	r1, r1, r5
20001424:	1b35      	subs	r5, r6, r4
20001426:	42aa      	cmp	r2, r5
20001428:	dd00      	ble.n	2000142c <RenderSprite+0x48>
2000142a:	462a      	mov	r2, r5
2000142c:	4212      	tst	r2, r2
2000142e:	dd02      	ble.n	20001436 <RenderSprite+0x52>
20001430:	1900      	adds	r0, r0, r4
20001432:	f000 fc11 	bl	20001c58 <BlitKey>
20001436:	bc07      	pop	{r0, r1, r2}
20001438:	e7d8      	b.n	200013ec <RenderSprite+0x8>
2000143a:	bdf0      	pop	{r4, r5, r6, r7, pc}

2000143c <RenderTile>:
2000143c:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
2000143e:	9c08      	ldr	r4, [sp, #32]
20001440:	4d2f      	ldr	r5, [pc, #188]	; (20001500 <RenderTile_pSioBase>)
20001442:	662a      	str	r2, [r5, #96]	; 0x60
20001444:	69a2      	ldr	r2, [r4, #24]
20001446:	666a      	str	r2, [r5, #100]	; 0x64
20001448:	8927      	ldrh	r7, [r4, #8]
2000144a:	2603      	movs	r6, #3
2000144c:	43b7      	bics	r7, r6
2000144e:	9700      	str	r7, [sp, #0]
20001450:	43b1      	bics	r1, r6
20001452:	43b3      	bics	r3, r6
20001454:	9301      	str	r3, [sp, #4]
20001456:	8a63      	ldrh	r3, [r4, #18]
20001458:	9302      	str	r3, [sp, #8]
2000145a:	6f6e      	ldr	r6, [r5, #116]	; 0x74
2000145c:	6f2f      	ldr	r7, [r5, #112]	; 0x70
2000145e:	6629      	str	r1, [r5, #96]	; 0x60
20001460:	666b      	str	r3, [r5, #100]	; 0x64
20001462:	435a      	muls	r2, r3
20001464:	8863      	ldrh	r3, [r4, #2]
20001466:	435f      	muls	r7, r3
20001468:	68e3      	ldr	r3, [r4, #12]
2000146a:	18ff      	adds	r7, r7, r3
2000146c:	46be      	mov	lr, r7
2000146e:	9b02      	ldr	r3, [sp, #8]
20001470:	435e      	muls	r6, r3
20001472:	6964      	ldr	r4, [r4, #20]
20001474:	19a4      	adds	r4, r4, r6
20001476:	6f6e      	ldr	r6, [r5, #116]	; 0x74
20001478:	6f2d      	ldr	r5, [r5, #112]	; 0x70
2000147a:	197f      	adds	r7, r7, r5
2000147c:	4236      	tst	r6, r6
2000147e:	d011      	beq.n	200014a4 <RenderTile+0x68>
20001480:	1b9d      	subs	r5, r3, r6
20001482:	1949      	adds	r1, r1, r5
20001484:	9b01      	ldr	r3, [sp, #4]
20001486:	1b5b      	subs	r3, r3, r5
20001488:	9301      	str	r3, [sp, #4]
2000148a:	08ad      	lsrs	r5, r5, #2
2000148c:	c020      	stmia	r0!, {r5}
2000148e:	783b      	ldrb	r3, [r7, #0]
20001490:	3701      	adds	r7, #1
20001492:	4353      	muls	r3, r2
20001494:	4423      	add	r3, r4
20001496:	4433      	add	r3, r6
20001498:	c008      	stmia	r0!, {r3}
2000149a:	9b00      	ldr	r3, [sp, #0]
2000149c:	4299      	cmp	r1, r3
2000149e:	d301      	bcc.n	200014a4 <RenderTile+0x68>
200014a0:	2100      	movs	r1, #0
200014a2:	4677      	mov	r7, lr
200014a4:	9b00      	ldr	r3, [sp, #0]
200014a6:	1a5d      	subs	r5, r3, r1
200014a8:	9b01      	ldr	r3, [sp, #4]

200014aa <RenderTile_OutLoop>:
200014aa:	429d      	cmp	r5, r3
200014ac:	d900      	bls.n	200014b0 <RenderTile_OutLoop+0x6>
200014ae:	461d      	mov	r5, r3
200014b0:	9902      	ldr	r1, [sp, #8]
200014b2:	428d      	cmp	r5, r1
200014b4:	d20e      	bcs.n	200014d4 <RenderTile_Last+0x18>
200014b6:	2d04      	cmp	r5, #4
200014b8:	d30b      	bcc.n	200014d2 <RenderTile_Last+0x16>
200014ba:	4629      	mov	r1, r5

200014bc <RenderTile_Last>:
200014bc:	088e      	lsrs	r6, r1, #2
200014be:	c040      	stmia	r0!, {r6}
200014c0:	783e      	ldrb	r6, [r7, #0]
200014c2:	3701      	adds	r7, #1
200014c4:	4356      	muls	r6, r2
200014c6:	4426      	add	r6, r4
200014c8:	c040      	stmia	r0!, {r6}
200014ca:	4677      	mov	r7, lr
200014cc:	9e02      	ldr	r6, [sp, #8]
200014ce:	42b5      	cmp	r5, r6
200014d0:	d2eb      	bcs.n	200014aa <RenderTile_OutLoop>
200014d2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
200014d4:	08a9      	lsrs	r1, r5, #2
200014d6:	008d      	lsls	r5, r1, #2
200014d8:	1b5b      	subs	r3, r3, r5
200014da:	9d02      	ldr	r5, [sp, #8]
200014dc:	08ad      	lsrs	r5, r5, #2
200014de:	1b49      	subs	r1, r1, r5
200014e0:	3101      	adds	r1, #1

200014e2 <RenderTile_InLoop>:
200014e2:	783e      	ldrb	r6, [r7, #0]
200014e4:	3701      	adds	r7, #1
200014e6:	4356      	muls	r6, r2
200014e8:	4426      	add	r6, r4
200014ea:	c060      	stmia	r0!, {r5, r6}
200014ec:	1b49      	subs	r1, r1, r5
200014ee:	d8f8      	bhi.n	200014e2 <RenderTile_InLoop>
200014f0:	1949      	adds	r1, r1, r5
200014f2:	3901      	subs	r1, #1
200014f4:	9d00      	ldr	r5, [sp, #0]
200014f6:	0089      	lsls	r1, r1, #2
200014f8:	d1e0      	bne.n	200014bc <RenderTile_Last>
200014fa:	4677      	mov	r7, lr
200014fc:	e7d5      	b.n	200014aa <RenderTile_OutLoop>
200014fe:	46c0      	nop			; (mov r8, r8)

20001500 <RenderTile_pSioBase>:
20001500:	d0000000 	.word	0xd0000000

20001504 <RenderTile2>:
20001504:	b5fc      	push	{r2, r3, r4, r5, r6, r7, lr}
20001506:	9c07      	ldr	r4, [sp, #28]
20001508:	4d2c      	ldr	r5, [pc, #176]	; (200015bc <RenderTile_pSioBase>)
2000150a:	662a      	str	r2, [r5, #96]	; 0x60
2000150c:	8b22      	ldrh	r2, [r4, #24]
2000150e:	666a      	str	r2, [r5, #100]	; 0x64
20001510:	8927      	ldrh	r7, [r4, #8]
20001512:	2603      	movs	r6, #3
20001514:	43b7      	bics	r7, r6
20001516:	9700      	str	r7, [sp, #0]
20001518:	43b1      	bics	r1, r6
2000151a:	43b3      	bics	r3, r6
2000151c:	9301      	str	r3, [sp, #4]
2000151e:	8a63      	ldrh	r3, [r4, #18]
20001520:	6f6e      	ldr	r6, [r5, #116]	; 0x74
20001522:	6f2f      	ldr	r7, [r5, #112]	; 0x70
20001524:	6629      	str	r1, [r5, #96]	; 0x60
20001526:	666b      	str	r3, [r5, #100]	; 0x64
20001528:	8862      	ldrh	r2, [r4, #2]
2000152a:	4357      	muls	r7, r2
2000152c:	68e2      	ldr	r2, [r4, #12]
2000152e:	18bf      	adds	r7, r7, r2
20001530:	46be      	mov	lr, r7
20001532:	8b62      	ldrh	r2, [r4, #26]
20001534:	4356      	muls	r6, r2
20001536:	6964      	ldr	r4, [r4, #20]
20001538:	19a4      	adds	r4, r4, r6
2000153a:	6f6e      	ldr	r6, [r5, #116]	; 0x74
2000153c:	6f2d      	ldr	r5, [r5, #112]	; 0x70
2000153e:	197f      	adds	r7, r7, r5
20001540:	4236      	tst	r6, r6
20001542:	d011      	beq.n	20001568 <RenderTile2+0x64>
20001544:	1b9d      	subs	r5, r3, r6
20001546:	1949      	adds	r1, r1, r5
20001548:	9a01      	ldr	r2, [sp, #4]
2000154a:	1b52      	subs	r2, r2, r5
2000154c:	9201      	str	r2, [sp, #4]
2000154e:	08ad      	lsrs	r5, r5, #2
20001550:	c020      	stmia	r0!, {r5}
20001552:	783a      	ldrb	r2, [r7, #0]
20001554:	3701      	adds	r7, #1
20001556:	435a      	muls	r2, r3
20001558:	4422      	add	r2, r4
2000155a:	4432      	add	r2, r6
2000155c:	c004      	stmia	r0!, {r2}
2000155e:	9a00      	ldr	r2, [sp, #0]
20001560:	4291      	cmp	r1, r2
20001562:	d301      	bcc.n	20001568 <RenderTile2+0x64>
20001564:	2100      	movs	r1, #0
20001566:	4677      	mov	r7, lr
20001568:	9a00      	ldr	r2, [sp, #0]
2000156a:	1a55      	subs	r5, r2, r1
2000156c:	9a01      	ldr	r2, [sp, #4]

2000156e <RenderTile_OutLoop>:
2000156e:	4295      	cmp	r5, r2
20001570:	d900      	bls.n	20001574 <RenderTile_OutLoop+0x6>
20001572:	4615      	mov	r5, r2
20001574:	429d      	cmp	r5, r3
20001576:	d20d      	bcs.n	20001594 <RenderTile_Last+0x16>
20001578:	2d04      	cmp	r5, #4
2000157a:	d30a      	bcc.n	20001592 <RenderTile_Last+0x14>
2000157c:	4629      	mov	r1, r5

2000157e <RenderTile_Last>:
2000157e:	088e      	lsrs	r6, r1, #2
20001580:	c040      	stmia	r0!, {r6}
20001582:	783e      	ldrb	r6, [r7, #0]
20001584:	3701      	adds	r7, #1
20001586:	435e      	muls	r6, r3
20001588:	4426      	add	r6, r4
2000158a:	c040      	stmia	r0!, {r6}
2000158c:	4677      	mov	r7, lr
2000158e:	429d      	cmp	r5, r3
20001590:	d2ed      	bcs.n	2000156e <RenderTile_OutLoop>
20001592:	bdfc      	pop	{r2, r3, r4, r5, r6, r7, pc}
20001594:	08a9      	lsrs	r1, r5, #2
20001596:	008d      	lsls	r5, r1, #2
20001598:	1b52      	subs	r2, r2, r5
2000159a:	089d      	lsrs	r5, r3, #2
2000159c:	1b49      	subs	r1, r1, r5
2000159e:	3101      	adds	r1, #1

200015a0 <RenderTile_InLoop>:
200015a0:	783e      	ldrb	r6, [r7, #0]
200015a2:	3701      	adds	r7, #1
200015a4:	435e      	muls	r6, r3
200015a6:	4426      	add	r6, r4
200015a8:	c060      	stmia	r0!, {r5, r6}
200015aa:	1b49      	subs	r1, r1, r5
200015ac:	d8f8      	bhi.n	200015a0 <RenderTile_InLoop>
200015ae:	1949      	adds	r1, r1, r5
200015b0:	3901      	subs	r1, #1
200015b2:	9d00      	ldr	r5, [sp, #0]
200015b4:	0089      	lsls	r1, r1, #2
200015b6:	d1e2      	bne.n	2000157e <RenderTile_Last>
200015b8:	4677      	mov	r7, lr
200015ba:	e7d8      	b.n	2000156e <RenderTile_OutLoop>

200015bc <RenderTile_pSioBase>:
200015bc:	d0000000 	.word	0xd0000000

200015c0 <RenderTilePersp>:
200015c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
200015c2:	9c06      	ldr	r4, [sp, #24]
200015c4:	4e5c      	ldr	r6, [pc, #368]	; (20001738 <RenderTilePersp_pSioBase>)
200015c6:	8965      	ldrh	r5, [r4, #10]
200015c8:	7ce1      	ldrb	r1, [r4, #19]
200015ca:	b249      	sxtb	r1, r1
200015cc:	0089      	lsls	r1, r1, #2
200015ce:	d107      	bne.n	200015e0 <RenderTilePersp+0x20>
200015d0:	086d      	lsrs	r5, r5, #1
200015d2:	1b52      	subs	r2, r2, r5
200015d4:	4694      	mov	ip, r2
200015d6:	2501      	movs	r5, #1
200015d8:	6675      	str	r5, [r6, #100]	; 0x64
200015da:	032d      	lsls	r5, r5, #12
200015dc:	6635      	str	r5, [r6, #96]	; 0x60
200015de:	e009      	b.n	200015f4 <RenderTilePersp+0x34>
200015e0:	d502      	bpl.n	200015e8 <RenderTilePersp+0x28>
200015e2:	1aaa      	subs	r2, r5, r2
200015e4:	3a01      	subs	r2, #1
200015e6:	4249      	negs	r1, r1
200015e8:	1b57      	subs	r7, r2, r5
200015ea:	46bc      	mov	ip, r7
200015ec:	032d      	lsls	r5, r5, #12
200015ee:	6635      	str	r5, [r6, #96]	; 0x60
200015f0:	1852      	adds	r2, r2, r1
200015f2:	6672      	str	r2, [r6, #100]	; 0x64
200015f4:	085d      	lsrs	r5, r3, #1
200015f6:	426d      	negs	r5, r5
200015f8:	46ae      	mov	lr, r5
200015fa:	089f      	lsrs	r7, r3, #2
200015fc:	4b4f      	ldr	r3, [pc, #316]	; (2000173c <RenderTilePersp_Interp>)
200015fe:	68e6      	ldr	r6, [r4, #12]
20001600:	611e      	str	r6, [r3, #16]
20001602:	4e4f      	ldr	r6, [pc, #316]	; (20001740 <RenderTilePersp_Ctrl>)
20001604:	7ca1      	ldrb	r1, [r4, #18]
20001606:	9100      	str	r1, [sp, #0]
20001608:	1876      	adds	r6, r6, r1
2000160a:	78a2      	ldrb	r2, [r4, #2]
2000160c:	1e55      	subs	r5, r2, #1
2000160e:	02ad      	lsls	r5, r5, #10
20001610:	432e      	orrs	r6, r5
20001612:	62de      	str	r6, [r3, #44]	; 0x2c
20001614:	1ab6      	subs	r6, r6, r2
20001616:	0152      	lsls	r2, r2, #5
20001618:	4316      	orrs	r6, r2
2000161a:	78e2      	ldrb	r2, [r4, #3]
2000161c:	0292      	lsls	r2, r2, #10
2000161e:	18b6      	adds	r6, r6, r2
20001620:	631e      	str	r6, [r3, #48]	; 0x30
20001622:	6966      	ldr	r6, [r4, #20]
20001624:	651e      	str	r6, [r3, #80]	; 0x50
20001626:	4e46      	ldr	r6, [pc, #280]	; (20001740 <RenderTilePersp_Ctrl>)
20001628:	1e4d      	subs	r5, r1, #1
2000162a:	02ad      	lsls	r5, r5, #10
2000162c:	432e      	orrs	r6, r5
2000162e:	66de      	str	r6, [r3, #108]	; 0x6c
20001630:	1a76      	subs	r6, r6, r1
20001632:	014d      	lsls	r5, r1, #5
20001634:	432e      	orrs	r6, r5
20001636:	0289      	lsls	r1, r1, #10
20001638:	1876      	adds	r6, r6, r1
2000163a:	671e      	str	r6, [r3, #112]	; 0x70
2000163c:	69a4      	ldr	r4, [r4, #24]
2000163e:	493e      	ldr	r1, [pc, #248]	; (20001738 <RenderTilePersp_pSioBase>)
20001640:	6f09      	ldr	r1, [r1, #112]	; 0x70
20001642:	6825      	ldr	r5, [r4, #0]
20001644:	434d      	muls	r5, r1
20001646:	132d      	asrs	r5, r5, #12
20001648:	609d      	str	r5, [r3, #8]
2000164a:	649d      	str	r5, [r3, #72]	; 0x48
2000164c:	68e6      	ldr	r6, [r4, #12]
2000164e:	434e      	muls	r6, r1
20001650:	1336      	asrs	r6, r6, #12
20001652:	60de      	str	r6, [r3, #12]
20001654:	64de      	str	r6, [r3, #76]	; 0x4c
20001656:	4672      	mov	r2, lr
20001658:	4355      	muls	r5, r2
2000165a:	4372      	muls	r2, r6
2000165c:	468e      	mov	lr, r1
2000165e:	6866      	ldr	r6, [r4, #4]
20001660:	4371      	muls	r1, r6
20001662:	1309      	asrs	r1, r1, #12
20001664:	4666      	mov	r6, ip
20001666:	4371      	muls	r1, r6
20001668:	186d      	adds	r5, r5, r1
2000166a:	68a1      	ldr	r1, [r4, #8]
2000166c:	186d      	adds	r5, r5, r1
2000166e:	601d      	str	r5, [r3, #0]
20001670:	641d      	str	r5, [r3, #64]	; 0x40
20001672:	6921      	ldr	r1, [r4, #16]
20001674:	4675      	mov	r5, lr
20001676:	4369      	muls	r1, r5
20001678:	1309      	asrs	r1, r1, #12
2000167a:	4371      	muls	r1, r6
2000167c:	1852      	adds	r2, r2, r1
2000167e:	6961      	ldr	r1, [r4, #20]
20001680:	1852      	adds	r2, r2, r1
20001682:	605a      	str	r2, [r3, #4]
20001684:	645a      	str	r2, [r3, #68]	; 0x44
20001686:	9e00      	ldr	r6, [sp, #0]
20001688:	0076      	lsls	r6, r6, #1
2000168a:	087f      	lsrs	r7, r7, #1
2000168c:	d31a      	bcc.n	200016c4 <RenderTilePersp+0x104>
2000168e:	69dc      	ldr	r4, [r3, #28]
20001690:	7824      	ldrb	r4, [r4, #0]
20001692:	40b4      	lsls	r4, r6
20001694:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
20001696:	5d29      	ldrb	r1, [r5, r4]
20001698:	69dc      	ldr	r4, [r3, #28]
2000169a:	7824      	ldrb	r4, [r4, #0]
2000169c:	40b4      	lsls	r4, r6
2000169e:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
200016a0:	5d2c      	ldrb	r4, [r5, r4]
200016a2:	0224      	lsls	r4, r4, #8
200016a4:	4321      	orrs	r1, r4
200016a6:	69dc      	ldr	r4, [r3, #28]
200016a8:	7824      	ldrb	r4, [r4, #0]
200016aa:	40b4      	lsls	r4, r6
200016ac:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
200016ae:	5d2c      	ldrb	r4, [r5, r4]
200016b0:	0424      	lsls	r4, r4, #16
200016b2:	4321      	orrs	r1, r4
200016b4:	69dc      	ldr	r4, [r3, #28]
200016b6:	7824      	ldrb	r4, [r4, #0]
200016b8:	40b4      	lsls	r4, r6
200016ba:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
200016bc:	5d2c      	ldrb	r4, [r5, r4]
200016be:	0624      	lsls	r4, r4, #24
200016c0:	4321      	orrs	r1, r4
200016c2:	c002      	stmia	r0!, {r1}
200016c4:	423f      	tst	r7, r7
200016c6:	d036      	beq.n	20001736 <RenderTilePersp+0x176>
200016c8:	69dc      	ldr	r4, [r3, #28]
200016ca:	7824      	ldrb	r4, [r4, #0]
200016cc:	40b4      	lsls	r4, r6
200016ce:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
200016d0:	5d29      	ldrb	r1, [r5, r4]
200016d2:	69dc      	ldr	r4, [r3, #28]
200016d4:	7824      	ldrb	r4, [r4, #0]
200016d6:	40b4      	lsls	r4, r6
200016d8:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
200016da:	5d2c      	ldrb	r4, [r5, r4]
200016dc:	0224      	lsls	r4, r4, #8
200016de:	4321      	orrs	r1, r4
200016e0:	69dc      	ldr	r4, [r3, #28]
200016e2:	7824      	ldrb	r4, [r4, #0]
200016e4:	40b4      	lsls	r4, r6
200016e6:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
200016e8:	5d2c      	ldrb	r4, [r5, r4]
200016ea:	0424      	lsls	r4, r4, #16
200016ec:	4321      	orrs	r1, r4
200016ee:	69dc      	ldr	r4, [r3, #28]
200016f0:	7824      	ldrb	r4, [r4, #0]
200016f2:	40b4      	lsls	r4, r6
200016f4:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
200016f6:	5d2c      	ldrb	r4, [r5, r4]
200016f8:	0624      	lsls	r4, r4, #24
200016fa:	4321      	orrs	r1, r4
200016fc:	69dc      	ldr	r4, [r3, #28]
200016fe:	7824      	ldrb	r4, [r4, #0]
20001700:	40b4      	lsls	r4, r6
20001702:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
20001704:	5d2a      	ldrb	r2, [r5, r4]
20001706:	69dc      	ldr	r4, [r3, #28]
20001708:	7824      	ldrb	r4, [r4, #0]
2000170a:	40b4      	lsls	r4, r6
2000170c:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
2000170e:	5d2c      	ldrb	r4, [r5, r4]
20001710:	0224      	lsls	r4, r4, #8
20001712:	4322      	orrs	r2, r4
20001714:	69dc      	ldr	r4, [r3, #28]
20001716:	7824      	ldrb	r4, [r4, #0]
20001718:	40b4      	lsls	r4, r6
2000171a:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
2000171c:	5d2c      	ldrb	r4, [r5, r4]
2000171e:	0424      	lsls	r4, r4, #16
20001720:	4322      	orrs	r2, r4
20001722:	69dc      	ldr	r4, [r3, #28]
20001724:	7824      	ldrb	r4, [r4, #0]
20001726:	40b4      	lsls	r4, r6
20001728:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
2000172a:	5d2c      	ldrb	r4, [r5, r4]
2000172c:	0624      	lsls	r4, r4, #24
2000172e:	4322      	orrs	r2, r4
20001730:	c006      	stmia	r0!, {r1, r2}
20001732:	3f01      	subs	r7, #1
20001734:	d1c8      	bne.n	200016c8 <RenderTilePersp+0x108>
20001736:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

20001738 <RenderTilePersp_pSioBase>:
20001738:	d0000000 	.word	0xd0000000

2000173c <RenderTilePersp_Interp>:
2000173c:	d0000080 	.word	0xd0000080

20001740 <RenderTilePersp_Ctrl>:
20001740:	0004000c 	.word	0x0004000c

20001744 <RenderTilePersp15>:
20001744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
20001746:	9c06      	ldr	r4, [sp, #24]
20001748:	4e57      	ldr	r6, [pc, #348]	; (200018a8 <RenderTilePersp_pSioBase>)
2000174a:	8965      	ldrh	r5, [r4, #10]
2000174c:	7ce1      	ldrb	r1, [r4, #19]
2000174e:	b249      	sxtb	r1, r1
20001750:	0089      	lsls	r1, r1, #2
20001752:	d107      	bne.n	20001764 <RenderTilePersp15+0x20>
20001754:	086d      	lsrs	r5, r5, #1
20001756:	1b52      	subs	r2, r2, r5
20001758:	4694      	mov	ip, r2
2000175a:	2501      	movs	r5, #1
2000175c:	6675      	str	r5, [r6, #100]	; 0x64
2000175e:	032d      	lsls	r5, r5, #12
20001760:	6635      	str	r5, [r6, #96]	; 0x60
20001762:	e009      	b.n	20001778 <RenderTilePersp15+0x34>
20001764:	d502      	bpl.n	2000176c <RenderTilePersp15+0x28>
20001766:	1aaa      	subs	r2, r5, r2
20001768:	3a01      	subs	r2, #1
2000176a:	4249      	negs	r1, r1
2000176c:	1b57      	subs	r7, r2, r5
2000176e:	46bc      	mov	ip, r7
20001770:	032d      	lsls	r5, r5, #12
20001772:	6635      	str	r5, [r6, #96]	; 0x60
20001774:	1852      	adds	r2, r2, r1
20001776:	6672      	str	r2, [r6, #100]	; 0x64
20001778:	085d      	lsrs	r5, r3, #1
2000177a:	426d      	negs	r5, r5
2000177c:	46ae      	mov	lr, r5
2000177e:	089f      	lsrs	r7, r3, #2
20001780:	4b4a      	ldr	r3, [pc, #296]	; (200018ac <RenderTilePersp_Interp>)
20001782:	68e6      	ldr	r6, [r4, #12]
20001784:	611e      	str	r6, [r3, #16]
20001786:	4e4a      	ldr	r6, [pc, #296]	; (200018b0 <RenderTilePersp_Ctrl>)
20001788:	7ca1      	ldrb	r1, [r4, #18]
2000178a:	9100      	str	r1, [sp, #0]
2000178c:	1876      	adds	r6, r6, r1
2000178e:	78a2      	ldrb	r2, [r4, #2]
20001790:	1e55      	subs	r5, r2, #1
20001792:	02ad      	lsls	r5, r5, #10
20001794:	432e      	orrs	r6, r5
20001796:	62de      	str	r6, [r3, #44]	; 0x2c
20001798:	1ab6      	subs	r6, r6, r2
2000179a:	0152      	lsls	r2, r2, #5
2000179c:	4316      	orrs	r6, r2
2000179e:	78e2      	ldrb	r2, [r4, #3]
200017a0:	0292      	lsls	r2, r2, #10
200017a2:	18b6      	adds	r6, r6, r2
200017a4:	631e      	str	r6, [r3, #48]	; 0x30
200017a6:	6966      	ldr	r6, [r4, #20]
200017a8:	651e      	str	r6, [r3, #80]	; 0x50
200017aa:	4e41      	ldr	r6, [pc, #260]	; (200018b0 <RenderTilePersp_Ctrl>)
200017ac:	1e4d      	subs	r5, r1, #1
200017ae:	02ad      	lsls	r5, r5, #10
200017b0:	432e      	orrs	r6, r5
200017b2:	66de      	str	r6, [r3, #108]	; 0x6c
200017b4:	1a76      	subs	r6, r6, r1
200017b6:	014d      	lsls	r5, r1, #5
200017b8:	432e      	orrs	r6, r5
200017ba:	0289      	lsls	r1, r1, #10
200017bc:	1876      	adds	r6, r6, r1
200017be:	671e      	str	r6, [r3, #112]	; 0x70
200017c0:	69a4      	ldr	r4, [r4, #24]
200017c2:	4939      	ldr	r1, [pc, #228]	; (200018a8 <RenderTilePersp_pSioBase>)
200017c4:	6f09      	ldr	r1, [r1, #112]	; 0x70
200017c6:	6825      	ldr	r5, [r4, #0]
200017c8:	434d      	muls	r5, r1
200017ca:	132d      	asrs	r5, r5, #12
200017cc:	106a      	asrs	r2, r5, #1
200017ce:	1952      	adds	r2, r2, r5
200017d0:	609a      	str	r2, [r3, #8]
200017d2:	649a      	str	r2, [r3, #72]	; 0x48
200017d4:	68e6      	ldr	r6, [r4, #12]
200017d6:	434e      	muls	r6, r1
200017d8:	1336      	asrs	r6, r6, #12
200017da:	1072      	asrs	r2, r6, #1
200017dc:	1992      	adds	r2, r2, r6
200017de:	60da      	str	r2, [r3, #12]
200017e0:	64da      	str	r2, [r3, #76]	; 0x4c
200017e2:	4672      	mov	r2, lr
200017e4:	4355      	muls	r5, r2
200017e6:	4372      	muls	r2, r6
200017e8:	468e      	mov	lr, r1
200017ea:	6866      	ldr	r6, [r4, #4]
200017ec:	4371      	muls	r1, r6
200017ee:	1309      	asrs	r1, r1, #12
200017f0:	4666      	mov	r6, ip
200017f2:	4371      	muls	r1, r6
200017f4:	186d      	adds	r5, r5, r1
200017f6:	68a1      	ldr	r1, [r4, #8]
200017f8:	186d      	adds	r5, r5, r1
200017fa:	601d      	str	r5, [r3, #0]
200017fc:	641d      	str	r5, [r3, #64]	; 0x40
200017fe:	6921      	ldr	r1, [r4, #16]
20001800:	4675      	mov	r5, lr
20001802:	4369      	muls	r1, r5
20001804:	1309      	asrs	r1, r1, #12
20001806:	4371      	muls	r1, r6
20001808:	1852      	adds	r2, r2, r1
2000180a:	6961      	ldr	r1, [r4, #20]
2000180c:	1852      	adds	r2, r2, r1
2000180e:	605a      	str	r2, [r3, #4]
20001810:	645a      	str	r2, [r3, #68]	; 0x44
20001812:	9e00      	ldr	r6, [sp, #0]
20001814:	0076      	lsls	r6, r6, #1
20001816:	087f      	lsrs	r7, r7, #1
20001818:	d315      	bcc.n	20001846 <RenderTilePersp15+0x102>
2000181a:	69dc      	ldr	r4, [r3, #28]
2000181c:	7824      	ldrb	r4, [r4, #0]
2000181e:	40b4      	lsls	r4, r6
20001820:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
20001822:	5d29      	ldrb	r1, [r5, r4]
20001824:	69dc      	ldr	r4, [r3, #28]
20001826:	7824      	ldrb	r4, [r4, #0]
20001828:	40b4      	lsls	r4, r6
2000182a:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
2000182c:	5d2c      	ldrb	r4, [r5, r4]
2000182e:	0224      	lsls	r4, r4, #8
20001830:	4321      	orrs	r1, r4
20001832:	69dc      	ldr	r4, [r3, #28]
20001834:	7824      	ldrb	r4, [r4, #0]
20001836:	40b4      	lsls	r4, r6
20001838:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
2000183a:	5d2c      	ldrb	r4, [r5, r4]
2000183c:	0424      	lsls	r4, r4, #16
2000183e:	4321      	orrs	r1, r4
20001840:	0224      	lsls	r4, r4, #8
20001842:	4321      	orrs	r1, r4
20001844:	c002      	stmia	r0!, {r1}
20001846:	423f      	tst	r7, r7
20001848:	d02c      	beq.n	200018a4 <RenderTilePersp15+0x160>
2000184a:	69dc      	ldr	r4, [r3, #28]
2000184c:	7824      	ldrb	r4, [r4, #0]
2000184e:	40b4      	lsls	r4, r6
20001850:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
20001852:	5d29      	ldrb	r1, [r5, r4]
20001854:	69dc      	ldr	r4, [r3, #28]
20001856:	7824      	ldrb	r4, [r4, #0]
20001858:	40b4      	lsls	r4, r6
2000185a:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
2000185c:	5d2c      	ldrb	r4, [r5, r4]
2000185e:	0224      	lsls	r4, r4, #8
20001860:	4321      	orrs	r1, r4
20001862:	69dc      	ldr	r4, [r3, #28]
20001864:	7824      	ldrb	r4, [r4, #0]
20001866:	40b4      	lsls	r4, r6
20001868:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
2000186a:	5d2c      	ldrb	r4, [r5, r4]
2000186c:	0424      	lsls	r4, r4, #16
2000186e:	4321      	orrs	r1, r4
20001870:	0224      	lsls	r4, r4, #8
20001872:	4321      	orrs	r1, r4
20001874:	69dc      	ldr	r4, [r3, #28]
20001876:	7824      	ldrb	r4, [r4, #0]
20001878:	40b4      	lsls	r4, r6
2000187a:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
2000187c:	5d2a      	ldrb	r2, [r5, r4]
2000187e:	69dc      	ldr	r4, [r3, #28]
20001880:	7824      	ldrb	r4, [r4, #0]
20001882:	40b4      	lsls	r4, r6
20001884:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
20001886:	5d2c      	ldrb	r4, [r5, r4]
20001888:	0224      	lsls	r4, r4, #8
2000188a:	4322      	orrs	r2, r4
2000188c:	69dc      	ldr	r4, [r3, #28]
2000188e:	7824      	ldrb	r4, [r4, #0]
20001890:	40b4      	lsls	r4, r6
20001892:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
20001894:	5d2c      	ldrb	r4, [r5, r4]
20001896:	0424      	lsls	r4, r4, #16
20001898:	4322      	orrs	r2, r4
2000189a:	0224      	lsls	r4, r4, #8
2000189c:	4322      	orrs	r2, r4
2000189e:	c006      	stmia	r0!, {r1, r2}
200018a0:	3f01      	subs	r7, #1
200018a2:	d1d2      	bne.n	2000184a <RenderTilePersp15+0x106>
200018a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
200018a6:	46c0      	nop			; (mov r8, r8)

200018a8 <RenderTilePersp_pSioBase>:
200018a8:	d0000000 	.word	0xd0000000

200018ac <RenderTilePersp_Interp>:
200018ac:	d0000080 	.word	0xd0000080

200018b0 <RenderTilePersp_Ctrl>:
200018b0:	0004000c 	.word	0x0004000c

200018b4 <RenderTilePersp2>:
200018b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
200018b6:	9c06      	ldr	r4, [sp, #24]
200018b8:	4e4e      	ldr	r6, [pc, #312]	; (200019f4 <RenderTilePersp_pSioBase>)
200018ba:	8965      	ldrh	r5, [r4, #10]
200018bc:	7ce1      	ldrb	r1, [r4, #19]
200018be:	b249      	sxtb	r1, r1
200018c0:	0089      	lsls	r1, r1, #2
200018c2:	d107      	bne.n	200018d4 <RenderTilePersp2+0x20>
200018c4:	086d      	lsrs	r5, r5, #1
200018c6:	1b52      	subs	r2, r2, r5
200018c8:	4694      	mov	ip, r2
200018ca:	2501      	movs	r5, #1
200018cc:	6675      	str	r5, [r6, #100]	; 0x64
200018ce:	032d      	lsls	r5, r5, #12
200018d0:	6635      	str	r5, [r6, #96]	; 0x60
200018d2:	e009      	b.n	200018e8 <RenderTilePersp2+0x34>
200018d4:	d502      	bpl.n	200018dc <RenderTilePersp2+0x28>
200018d6:	1aaa      	subs	r2, r5, r2
200018d8:	3a01      	subs	r2, #1
200018da:	4249      	negs	r1, r1
200018dc:	1b57      	subs	r7, r2, r5
200018de:	46bc      	mov	ip, r7
200018e0:	032d      	lsls	r5, r5, #12
200018e2:	6635      	str	r5, [r6, #96]	; 0x60
200018e4:	1852      	adds	r2, r2, r1
200018e6:	6672      	str	r2, [r6, #100]	; 0x64
200018e8:	085d      	lsrs	r5, r3, #1
200018ea:	426d      	negs	r5, r5
200018ec:	46ae      	mov	lr, r5
200018ee:	089f      	lsrs	r7, r3, #2
200018f0:	4b41      	ldr	r3, [pc, #260]	; (200019f8 <RenderTilePersp_Interp>)
200018f2:	68e6      	ldr	r6, [r4, #12]
200018f4:	611e      	str	r6, [r3, #16]
200018f6:	4e41      	ldr	r6, [pc, #260]	; (200019fc <RenderTilePersp_Ctrl>)
200018f8:	7ca1      	ldrb	r1, [r4, #18]
200018fa:	9100      	str	r1, [sp, #0]
200018fc:	1876      	adds	r6, r6, r1
200018fe:	78a2      	ldrb	r2, [r4, #2]
20001900:	1e55      	subs	r5, r2, #1
20001902:	02ad      	lsls	r5, r5, #10
20001904:	432e      	orrs	r6, r5
20001906:	62de      	str	r6, [r3, #44]	; 0x2c
20001908:	1ab6      	subs	r6, r6, r2
2000190a:	0152      	lsls	r2, r2, #5
2000190c:	4316      	orrs	r6, r2
2000190e:	78e2      	ldrb	r2, [r4, #3]
20001910:	0292      	lsls	r2, r2, #10
20001912:	18b6      	adds	r6, r6, r2
20001914:	631e      	str	r6, [r3, #48]	; 0x30
20001916:	6966      	ldr	r6, [r4, #20]
20001918:	651e      	str	r6, [r3, #80]	; 0x50
2000191a:	4e38      	ldr	r6, [pc, #224]	; (200019fc <RenderTilePersp_Ctrl>)
2000191c:	1e4d      	subs	r5, r1, #1
2000191e:	02ad      	lsls	r5, r5, #10
20001920:	432e      	orrs	r6, r5
20001922:	66de      	str	r6, [r3, #108]	; 0x6c
20001924:	1a76      	subs	r6, r6, r1
20001926:	014d      	lsls	r5, r1, #5
20001928:	432e      	orrs	r6, r5
2000192a:	0289      	lsls	r1, r1, #10
2000192c:	1876      	adds	r6, r6, r1
2000192e:	671e      	str	r6, [r3, #112]	; 0x70
20001930:	69a4      	ldr	r4, [r4, #24]
20001932:	4930      	ldr	r1, [pc, #192]	; (200019f4 <RenderTilePersp_pSioBase>)
20001934:	6f09      	ldr	r1, [r1, #112]	; 0x70
20001936:	6825      	ldr	r5, [r4, #0]
20001938:	434d      	muls	r5, r1
2000193a:	12ed      	asrs	r5, r5, #11
2000193c:	609d      	str	r5, [r3, #8]
2000193e:	649d      	str	r5, [r3, #72]	; 0x48
20001940:	106d      	asrs	r5, r5, #1
20001942:	68e6      	ldr	r6, [r4, #12]
20001944:	434e      	muls	r6, r1
20001946:	12f6      	asrs	r6, r6, #11
20001948:	60de      	str	r6, [r3, #12]
2000194a:	64de      	str	r6, [r3, #76]	; 0x4c
2000194c:	1076      	asrs	r6, r6, #1
2000194e:	4672      	mov	r2, lr
20001950:	4355      	muls	r5, r2
20001952:	4372      	muls	r2, r6
20001954:	468e      	mov	lr, r1
20001956:	6866      	ldr	r6, [r4, #4]
20001958:	4371      	muls	r1, r6
2000195a:	1309      	asrs	r1, r1, #12
2000195c:	4666      	mov	r6, ip
2000195e:	4371      	muls	r1, r6
20001960:	186d      	adds	r5, r5, r1
20001962:	68a1      	ldr	r1, [r4, #8]
20001964:	186d      	adds	r5, r5, r1
20001966:	601d      	str	r5, [r3, #0]
20001968:	641d      	str	r5, [r3, #64]	; 0x40
2000196a:	6921      	ldr	r1, [r4, #16]
2000196c:	4675      	mov	r5, lr
2000196e:	4369      	muls	r1, r5
20001970:	1309      	asrs	r1, r1, #12
20001972:	4371      	muls	r1, r6
20001974:	1852      	adds	r2, r2, r1
20001976:	6961      	ldr	r1, [r4, #20]
20001978:	1852      	adds	r2, r2, r1
2000197a:	605a      	str	r2, [r3, #4]
2000197c:	645a      	str	r2, [r3, #68]	; 0x44
2000197e:	9e00      	ldr	r6, [sp, #0]
20001980:	0076      	lsls	r6, r6, #1
20001982:	087f      	lsrs	r7, r7, #1
20001984:	d310      	bcc.n	200019a8 <RenderTilePersp2+0xf4>
20001986:	69dc      	ldr	r4, [r3, #28]
20001988:	7824      	ldrb	r4, [r4, #0]
2000198a:	40b4      	lsls	r4, r6
2000198c:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
2000198e:	5d29      	ldrb	r1, [r5, r4]
20001990:	020c      	lsls	r4, r1, #8
20001992:	4321      	orrs	r1, r4
20001994:	69dc      	ldr	r4, [r3, #28]
20001996:	7824      	ldrb	r4, [r4, #0]
20001998:	40b4      	lsls	r4, r6
2000199a:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
2000199c:	5d2c      	ldrb	r4, [r5, r4]
2000199e:	0424      	lsls	r4, r4, #16
200019a0:	4321      	orrs	r1, r4
200019a2:	0224      	lsls	r4, r4, #8
200019a4:	4321      	orrs	r1, r4
200019a6:	c002      	stmia	r0!, {r1}
200019a8:	423f      	tst	r7, r7
200019aa:	d022      	beq.n	200019f2 <RenderTilePersp2+0x13e>
200019ac:	69dc      	ldr	r4, [r3, #28]
200019ae:	7824      	ldrb	r4, [r4, #0]
200019b0:	40b4      	lsls	r4, r6
200019b2:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
200019b4:	5d29      	ldrb	r1, [r5, r4]
200019b6:	020c      	lsls	r4, r1, #8
200019b8:	4321      	orrs	r1, r4
200019ba:	69dc      	ldr	r4, [r3, #28]
200019bc:	7824      	ldrb	r4, [r4, #0]
200019be:	40b4      	lsls	r4, r6
200019c0:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
200019c2:	5d2c      	ldrb	r4, [r5, r4]
200019c4:	0424      	lsls	r4, r4, #16
200019c6:	4321      	orrs	r1, r4
200019c8:	0224      	lsls	r4, r4, #8
200019ca:	4321      	orrs	r1, r4
200019cc:	69dc      	ldr	r4, [r3, #28]
200019ce:	7824      	ldrb	r4, [r4, #0]
200019d0:	40b4      	lsls	r4, r6
200019d2:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
200019d4:	5d2a      	ldrb	r2, [r5, r4]
200019d6:	0214      	lsls	r4, r2, #8
200019d8:	4322      	orrs	r2, r4
200019da:	69dc      	ldr	r4, [r3, #28]
200019dc:	7824      	ldrb	r4, [r4, #0]
200019de:	40b4      	lsls	r4, r6
200019e0:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
200019e2:	5d2c      	ldrb	r4, [r5, r4]
200019e4:	0424      	lsls	r4, r4, #16
200019e6:	4322      	orrs	r2, r4
200019e8:	0224      	lsls	r4, r4, #8
200019ea:	4322      	orrs	r2, r4
200019ec:	c006      	stmia	r0!, {r1, r2}
200019ee:	3f01      	subs	r7, #1
200019f0:	d1dc      	bne.n	200019ac <RenderTilePersp2+0xf8>
200019f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

200019f4 <RenderTilePersp_pSioBase>:
200019f4:	d0000000 	.word	0xd0000000

200019f8 <RenderTilePersp_Interp>:
200019f8:	d0000080 	.word	0xd0000080

200019fc <RenderTilePersp_Ctrl>:
200019fc:	0004000c 	.word	0x0004000c

20001a00 <RenderTilePersp3>:
20001a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
20001a02:	9c06      	ldr	r4, [sp, #24]
20001a04:	4e48      	ldr	r6, [pc, #288]	; (20001b28 <RenderTilePersp_pSioBase>)
20001a06:	8965      	ldrh	r5, [r4, #10]
20001a08:	7ce1      	ldrb	r1, [r4, #19]
20001a0a:	b249      	sxtb	r1, r1
20001a0c:	0089      	lsls	r1, r1, #2
20001a0e:	d107      	bne.n	20001a20 <RenderTilePersp3+0x20>
20001a10:	086d      	lsrs	r5, r5, #1
20001a12:	1b52      	subs	r2, r2, r5
20001a14:	4694      	mov	ip, r2
20001a16:	2501      	movs	r5, #1
20001a18:	6675      	str	r5, [r6, #100]	; 0x64
20001a1a:	032d      	lsls	r5, r5, #12
20001a1c:	6635      	str	r5, [r6, #96]	; 0x60
20001a1e:	e009      	b.n	20001a34 <RenderTilePersp3+0x34>
20001a20:	d502      	bpl.n	20001a28 <RenderTilePersp3+0x28>
20001a22:	1aaa      	subs	r2, r5, r2
20001a24:	3a01      	subs	r2, #1
20001a26:	4249      	negs	r1, r1
20001a28:	1b57      	subs	r7, r2, r5
20001a2a:	46bc      	mov	ip, r7
20001a2c:	032d      	lsls	r5, r5, #12
20001a2e:	6635      	str	r5, [r6, #96]	; 0x60
20001a30:	1852      	adds	r2, r2, r1
20001a32:	6672      	str	r2, [r6, #100]	; 0x64
20001a34:	085d      	lsrs	r5, r3, #1
20001a36:	426d      	negs	r5, r5
20001a38:	46ae      	mov	lr, r5
20001a3a:	089f      	lsrs	r7, r3, #2
20001a3c:	4b3b      	ldr	r3, [pc, #236]	; (20001b2c <RenderTilePersp_Interp>)
20001a3e:	68e6      	ldr	r6, [r4, #12]
20001a40:	611e      	str	r6, [r3, #16]
20001a42:	4e3b      	ldr	r6, [pc, #236]	; (20001b30 <RenderTilePersp_Ctrl>)
20001a44:	7ca1      	ldrb	r1, [r4, #18]
20001a46:	9100      	str	r1, [sp, #0]
20001a48:	1876      	adds	r6, r6, r1
20001a4a:	78a2      	ldrb	r2, [r4, #2]
20001a4c:	1e55      	subs	r5, r2, #1
20001a4e:	02ad      	lsls	r5, r5, #10
20001a50:	432e      	orrs	r6, r5
20001a52:	62de      	str	r6, [r3, #44]	; 0x2c
20001a54:	1ab6      	subs	r6, r6, r2
20001a56:	0152      	lsls	r2, r2, #5
20001a58:	4316      	orrs	r6, r2
20001a5a:	78e2      	ldrb	r2, [r4, #3]
20001a5c:	0292      	lsls	r2, r2, #10
20001a5e:	18b6      	adds	r6, r6, r2
20001a60:	631e      	str	r6, [r3, #48]	; 0x30
20001a62:	6966      	ldr	r6, [r4, #20]
20001a64:	651e      	str	r6, [r3, #80]	; 0x50
20001a66:	4e32      	ldr	r6, [pc, #200]	; (20001b30 <RenderTilePersp_Ctrl>)
20001a68:	1e4d      	subs	r5, r1, #1
20001a6a:	02ad      	lsls	r5, r5, #10
20001a6c:	432e      	orrs	r6, r5
20001a6e:	66de      	str	r6, [r3, #108]	; 0x6c
20001a70:	1a76      	subs	r6, r6, r1
20001a72:	014d      	lsls	r5, r1, #5
20001a74:	432e      	orrs	r6, r5
20001a76:	0289      	lsls	r1, r1, #10
20001a78:	1876      	adds	r6, r6, r1
20001a7a:	671e      	str	r6, [r3, #112]	; 0x70
20001a7c:	69a4      	ldr	r4, [r4, #24]
20001a7e:	492a      	ldr	r1, [pc, #168]	; (20001b28 <RenderTilePersp_pSioBase>)
20001a80:	6f09      	ldr	r1, [r1, #112]	; 0x70
20001a82:	6825      	ldr	r5, [r4, #0]
20001a84:	434d      	muls	r5, r1
20001a86:	132d      	asrs	r5, r5, #12
20001a88:	006a      	lsls	r2, r5, #1
20001a8a:	1952      	adds	r2, r2, r5
20001a8c:	609a      	str	r2, [r3, #8]
20001a8e:	649a      	str	r2, [r3, #72]	; 0x48
20001a90:	68e6      	ldr	r6, [r4, #12]
20001a92:	434e      	muls	r6, r1
20001a94:	1336      	asrs	r6, r6, #12
20001a96:	0072      	lsls	r2, r6, #1
20001a98:	1992      	adds	r2, r2, r6
20001a9a:	60da      	str	r2, [r3, #12]
20001a9c:	64da      	str	r2, [r3, #76]	; 0x4c
20001a9e:	4672      	mov	r2, lr
20001aa0:	4355      	muls	r5, r2
20001aa2:	4372      	muls	r2, r6
20001aa4:	468e      	mov	lr, r1
20001aa6:	6866      	ldr	r6, [r4, #4]
20001aa8:	4371      	muls	r1, r6
20001aaa:	1309      	asrs	r1, r1, #12
20001aac:	4666      	mov	r6, ip
20001aae:	4371      	muls	r1, r6
20001ab0:	186d      	adds	r5, r5, r1
20001ab2:	68a1      	ldr	r1, [r4, #8]
20001ab4:	186d      	adds	r5, r5, r1
20001ab6:	601d      	str	r5, [r3, #0]
20001ab8:	641d      	str	r5, [r3, #64]	; 0x40
20001aba:	6921      	ldr	r1, [r4, #16]
20001abc:	4675      	mov	r5, lr
20001abe:	4369      	muls	r1, r5
20001ac0:	1309      	asrs	r1, r1, #12
20001ac2:	4371      	muls	r1, r6
20001ac4:	1852      	adds	r2, r2, r1
20001ac6:	6961      	ldr	r1, [r4, #20]
20001ac8:	1852      	adds	r2, r2, r1
20001aca:	605a      	str	r2, [r3, #4]
20001acc:	645a      	str	r2, [r3, #68]	; 0x44
20001ace:	9e00      	ldr	r6, [sp, #0]
20001ad0:	0076      	lsls	r6, r6, #1
20001ad2:	087f      	lsrs	r7, r7, #1
20001ad4:	d309      	bcc.n	20001aea <RenderTilePersp3+0xea>
20001ad6:	69dc      	ldr	r4, [r3, #28]
20001ad8:	7824      	ldrb	r4, [r4, #0]
20001ada:	40b4      	lsls	r4, r6
20001adc:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
20001ade:	5d29      	ldrb	r1, [r5, r4]
20001ae0:	020c      	lsls	r4, r1, #8
20001ae2:	4321      	orrs	r1, r4
20001ae4:	040c      	lsls	r4, r1, #16
20001ae6:	4321      	orrs	r1, r4
20001ae8:	c002      	stmia	r0!, {r1}
20001aea:	423f      	tst	r7, r7
20001aec:	d01b      	beq.n	20001b26 <RenderTilePersp3+0x126>
20001aee:	69dc      	ldr	r4, [r3, #28]
20001af0:	7824      	ldrb	r4, [r4, #0]
20001af2:	40b4      	lsls	r4, r6
20001af4:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
20001af6:	5d29      	ldrb	r1, [r5, r4]
20001af8:	020c      	lsls	r4, r1, #8
20001afa:	4321      	orrs	r1, r4
20001afc:	69dc      	ldr	r4, [r3, #28]
20001afe:	7824      	ldrb	r4, [r4, #0]
20001b00:	40b4      	lsls	r4, r6
20001b02:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
20001b04:	5d2c      	ldrb	r4, [r5, r4]
20001b06:	0424      	lsls	r4, r4, #16
20001b08:	4321      	orrs	r1, r4
20001b0a:	0224      	lsls	r4, r4, #8
20001b0c:	4321      	orrs	r1, r4
20001b0e:	69dc      	ldr	r4, [r3, #28]
20001b10:	7824      	ldrb	r4, [r4, #0]
20001b12:	40b4      	lsls	r4, r6
20001b14:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
20001b16:	5d2a      	ldrb	r2, [r5, r4]
20001b18:	0214      	lsls	r4, r2, #8
20001b1a:	4322      	orrs	r2, r4
20001b1c:	0414      	lsls	r4, r2, #16
20001b1e:	4322      	orrs	r2, r4
20001b20:	c006      	stmia	r0!, {r1, r2}
20001b22:	3f01      	subs	r7, #1
20001b24:	d1e3      	bne.n	20001aee <RenderTilePersp3+0xee>
20001b26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

20001b28 <RenderTilePersp_pSioBase>:
20001b28:	d0000000 	.word	0xd0000000

20001b2c <RenderTilePersp_Interp>:
20001b2c:	d0000080 	.word	0xd0000080

20001b30 <RenderTilePersp_Ctrl>:
20001b30:	0004000c 	.word	0x0004000c

20001b34 <RenderTilePersp4>:
20001b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
20001b36:	9c06      	ldr	r4, [sp, #24]
20001b38:	4e44      	ldr	r6, [pc, #272]	; (20001c4c <RenderTilePersp_pSioBase>)
20001b3a:	8965      	ldrh	r5, [r4, #10]
20001b3c:	7ce1      	ldrb	r1, [r4, #19]
20001b3e:	b249      	sxtb	r1, r1
20001b40:	0089      	lsls	r1, r1, #2
20001b42:	d107      	bne.n	20001b54 <RenderTilePersp4+0x20>
20001b44:	086d      	lsrs	r5, r5, #1
20001b46:	1b52      	subs	r2, r2, r5
20001b48:	4694      	mov	ip, r2
20001b4a:	2501      	movs	r5, #1
20001b4c:	6675      	str	r5, [r6, #100]	; 0x64
20001b4e:	032d      	lsls	r5, r5, #12
20001b50:	6635      	str	r5, [r6, #96]	; 0x60
20001b52:	e009      	b.n	20001b68 <RenderTilePersp4+0x34>
20001b54:	d502      	bpl.n	20001b5c <RenderTilePersp4+0x28>
20001b56:	1aaa      	subs	r2, r5, r2
20001b58:	3a01      	subs	r2, #1
20001b5a:	4249      	negs	r1, r1
20001b5c:	1b57      	subs	r7, r2, r5
20001b5e:	46bc      	mov	ip, r7
20001b60:	032d      	lsls	r5, r5, #12
20001b62:	6635      	str	r5, [r6, #96]	; 0x60
20001b64:	1852      	adds	r2, r2, r1
20001b66:	6672      	str	r2, [r6, #100]	; 0x64
20001b68:	085d      	lsrs	r5, r3, #1
20001b6a:	426d      	negs	r5, r5
20001b6c:	46ae      	mov	lr, r5
20001b6e:	089f      	lsrs	r7, r3, #2
20001b70:	4b37      	ldr	r3, [pc, #220]	; (20001c50 <RenderTilePersp_Interp>)
20001b72:	68e6      	ldr	r6, [r4, #12]
20001b74:	611e      	str	r6, [r3, #16]
20001b76:	4e37      	ldr	r6, [pc, #220]	; (20001c54 <RenderTilePersp_Ctrl>)
20001b78:	7ca1      	ldrb	r1, [r4, #18]
20001b7a:	9100      	str	r1, [sp, #0]
20001b7c:	1876      	adds	r6, r6, r1
20001b7e:	78a2      	ldrb	r2, [r4, #2]
20001b80:	1e55      	subs	r5, r2, #1
20001b82:	02ad      	lsls	r5, r5, #10
20001b84:	432e      	orrs	r6, r5
20001b86:	62de      	str	r6, [r3, #44]	; 0x2c
20001b88:	1ab6      	subs	r6, r6, r2
20001b8a:	0152      	lsls	r2, r2, #5
20001b8c:	4316      	orrs	r6, r2
20001b8e:	78e2      	ldrb	r2, [r4, #3]
20001b90:	0292      	lsls	r2, r2, #10
20001b92:	18b6      	adds	r6, r6, r2
20001b94:	631e      	str	r6, [r3, #48]	; 0x30
20001b96:	6966      	ldr	r6, [r4, #20]
20001b98:	651e      	str	r6, [r3, #80]	; 0x50
20001b9a:	4e2e      	ldr	r6, [pc, #184]	; (20001c54 <RenderTilePersp_Ctrl>)
20001b9c:	1e4d      	subs	r5, r1, #1
20001b9e:	02ad      	lsls	r5, r5, #10
20001ba0:	432e      	orrs	r6, r5
20001ba2:	66de      	str	r6, [r3, #108]	; 0x6c
20001ba4:	1a76      	subs	r6, r6, r1
20001ba6:	014d      	lsls	r5, r1, #5
20001ba8:	432e      	orrs	r6, r5
20001baa:	0289      	lsls	r1, r1, #10
20001bac:	1876      	adds	r6, r6, r1
20001bae:	671e      	str	r6, [r3, #112]	; 0x70
20001bb0:	69a4      	ldr	r4, [r4, #24]
20001bb2:	4926      	ldr	r1, [pc, #152]	; (20001c4c <RenderTilePersp_pSioBase>)
20001bb4:	6f09      	ldr	r1, [r1, #112]	; 0x70
20001bb6:	6825      	ldr	r5, [r4, #0]
20001bb8:	434d      	muls	r5, r1
20001bba:	12ad      	asrs	r5, r5, #10
20001bbc:	609d      	str	r5, [r3, #8]
20001bbe:	649d      	str	r5, [r3, #72]	; 0x48
20001bc0:	10ad      	asrs	r5, r5, #2
20001bc2:	68e6      	ldr	r6, [r4, #12]
20001bc4:	434e      	muls	r6, r1
20001bc6:	12b6      	asrs	r6, r6, #10
20001bc8:	60de      	str	r6, [r3, #12]
20001bca:	64de      	str	r6, [r3, #76]	; 0x4c
20001bcc:	10b6      	asrs	r6, r6, #2
20001bce:	4672      	mov	r2, lr
20001bd0:	4355      	muls	r5, r2
20001bd2:	4372      	muls	r2, r6
20001bd4:	468e      	mov	lr, r1
20001bd6:	6866      	ldr	r6, [r4, #4]
20001bd8:	4371      	muls	r1, r6
20001bda:	1309      	asrs	r1, r1, #12
20001bdc:	4666      	mov	r6, ip
20001bde:	4371      	muls	r1, r6
20001be0:	186d      	adds	r5, r5, r1
20001be2:	68a1      	ldr	r1, [r4, #8]
20001be4:	186d      	adds	r5, r5, r1
20001be6:	601d      	str	r5, [r3, #0]
20001be8:	641d      	str	r5, [r3, #64]	; 0x40
20001bea:	6921      	ldr	r1, [r4, #16]
20001bec:	4675      	mov	r5, lr
20001bee:	4369      	muls	r1, r5
20001bf0:	1309      	asrs	r1, r1, #12
20001bf2:	4371      	muls	r1, r6
20001bf4:	1852      	adds	r2, r2, r1
20001bf6:	6961      	ldr	r1, [r4, #20]
20001bf8:	1852      	adds	r2, r2, r1
20001bfa:	605a      	str	r2, [r3, #4]
20001bfc:	645a      	str	r2, [r3, #68]	; 0x44
20001bfe:	9e00      	ldr	r6, [sp, #0]
20001c00:	0076      	lsls	r6, r6, #1
20001c02:	087f      	lsrs	r7, r7, #1
20001c04:	d309      	bcc.n	20001c1a <RenderTilePersp4+0xe6>
20001c06:	69dc      	ldr	r4, [r3, #28]
20001c08:	7824      	ldrb	r4, [r4, #0]
20001c0a:	40b4      	lsls	r4, r6
20001c0c:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
20001c0e:	5d29      	ldrb	r1, [r5, r4]
20001c10:	020c      	lsls	r4, r1, #8
20001c12:	4321      	orrs	r1, r4
20001c14:	040c      	lsls	r4, r1, #16
20001c16:	4321      	orrs	r1, r4
20001c18:	c002      	stmia	r0!, {r1}
20001c1a:	423f      	tst	r7, r7
20001c1c:	d014      	beq.n	20001c48 <RenderTilePersp4+0x114>
20001c1e:	69dc      	ldr	r4, [r3, #28]
20001c20:	7824      	ldrb	r4, [r4, #0]
20001c22:	40b4      	lsls	r4, r6
20001c24:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
20001c26:	5d29      	ldrb	r1, [r5, r4]
20001c28:	020c      	lsls	r4, r1, #8
20001c2a:	4321      	orrs	r1, r4
20001c2c:	040c      	lsls	r4, r1, #16
20001c2e:	4321      	orrs	r1, r4
20001c30:	69dc      	ldr	r4, [r3, #28]
20001c32:	7824      	ldrb	r4, [r4, #0]
20001c34:	40b4      	lsls	r4, r6
20001c36:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
20001c38:	5d2a      	ldrb	r2, [r5, r4]
20001c3a:	0214      	lsls	r4, r2, #8
20001c3c:	4322      	orrs	r2, r4
20001c3e:	0414      	lsls	r4, r2, #16
20001c40:	4322      	orrs	r2, r4
20001c42:	c006      	stmia	r0!, {r1, r2}
20001c44:	3f01      	subs	r7, #1
20001c46:	d1ea      	bne.n	20001c1e <RenderTilePersp4+0xea>
20001c48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
20001c4a:	46c0      	nop			; (mov r8, r8)

20001c4c <RenderTilePersp_pSioBase>:
20001c4c:	d0000000 	.word	0xd0000000

20001c50 <RenderTilePersp_Interp>:
20001c50:	d0000080 	.word	0xd0000080

20001c54 <RenderTilePersp_Ctrl>:
20001c54:	0004000c 	.word	0x0004000c

20001c58 <BlitKey>:
20001c58:	b510      	push	{r4, lr}
20001c5a:	4686      	mov	lr, r0
20001c5c:	08d4      	lsrs	r4, r2, #3
20001c5e:	00e4      	lsls	r4, r4, #3
20001c60:	4062      	eors	r2, r4
20001c62:	4420      	add	r0, r4
20001c64:	4421      	add	r1, r4
20001c66:	a413      	add	r4, pc, #76	; (adr r4, 20001cb4 <BlitKey+0x5c>)
20001c68:	00d2      	lsls	r2, r2, #3
20001c6a:	1aa4      	subs	r4, r4, r2
20001c6c:	3401      	adds	r4, #1
20001c6e:	4720      	bx	r4
20001c70:	3808      	subs	r0, #8
20001c72:	3908      	subs	r1, #8
20001c74:	79cc      	ldrb	r4, [r1, #7]
20001c76:	429c      	cmp	r4, r3
20001c78:	d000      	beq.n	20001c7c <BlitKey+0x24>
20001c7a:	71c4      	strb	r4, [r0, #7]
20001c7c:	798c      	ldrb	r4, [r1, #6]
20001c7e:	429c      	cmp	r4, r3
20001c80:	d000      	beq.n	20001c84 <BlitKey+0x2c>
20001c82:	7184      	strb	r4, [r0, #6]
20001c84:	794c      	ldrb	r4, [r1, #5]
20001c86:	429c      	cmp	r4, r3
20001c88:	d000      	beq.n	20001c8c <BlitKey+0x34>
20001c8a:	7144      	strb	r4, [r0, #5]
20001c8c:	790c      	ldrb	r4, [r1, #4]
20001c8e:	429c      	cmp	r4, r3
20001c90:	d000      	beq.n	20001c94 <BlitKey+0x3c>
20001c92:	7104      	strb	r4, [r0, #4]
20001c94:	78cc      	ldrb	r4, [r1, #3]
20001c96:	429c      	cmp	r4, r3
20001c98:	d000      	beq.n	20001c9c <BlitKey+0x44>
20001c9a:	70c4      	strb	r4, [r0, #3]
20001c9c:	788c      	ldrb	r4, [r1, #2]
20001c9e:	429c      	cmp	r4, r3
20001ca0:	d000      	beq.n	20001ca4 <BlitKey+0x4c>
20001ca2:	7084      	strb	r4, [r0, #2]
20001ca4:	784c      	ldrb	r4, [r1, #1]
20001ca6:	429c      	cmp	r4, r3
20001ca8:	d000      	beq.n	20001cac <BlitKey+0x54>
20001caa:	7044      	strb	r4, [r0, #1]
20001cac:	780c      	ldrb	r4, [r1, #0]
20001cae:	429c      	cmp	r4, r3
20001cb0:	d000      	beq.n	20001cb4 <BlitKey+0x5c>
20001cb2:	7004      	strb	r4, [r0, #0]
20001cb4:	4570      	cmp	r0, lr
20001cb6:	d8db      	bhi.n	20001c70 <BlitKey+0x18>
20001cb8:	bd10      	pop	{r4, pc}
20001cba:	46c0      	nop			; (mov r8, r8)

20001cbc <Render>:
20001cbc:	b5f0      	push	{r4, r5, r6, r7, lr}
20001cbe:	b085      	sub	sp, #20
20001cc0:	9001      	str	r0, [sp, #4]
20001cc2:	9102      	str	r1, [sp, #8]
20001cc4:	9304      	str	r3, [sp, #16]
20001cc6:	4c31      	ldr	r4, [pc, #196]	; (20001d8c <Render_pScreenAddr>)
20001cc8:	6824      	ldr	r4, [r4, #0]
20001cca:	2c00      	cmp	r4, #0
20001ccc:	d055      	beq.n	20001d7a <Render_Clear>
20001cce:	8825      	ldrh	r5, [r4, #0]
20001cd0:	422d      	tst	r5, r5
20001cd2:	d052      	beq.n	20001d7a <Render_Clear>
20001cd4:	3404      	adds	r4, #4

20001cd6 <Render_StripLoop>:
20001cd6:	8823      	ldrh	r3, [r4, #0]
20001cd8:	429a      	cmp	r2, r3
20001cda:	d304      	bcc.n	20001ce6 <Render_StripOK>
20001cdc:	1ad2      	subs	r2, r2, r3
20001cde:	34e4      	adds	r4, #228	; 0xe4
20001ce0:	3d01      	subs	r5, #1
20001ce2:	d1f8      	bne.n	20001cd6 <Render_StripLoop>
20001ce4:	e049      	b.n	20001d7a <Render_Clear>

20001ce6 <Render_StripOK>:
20001ce6:	9203      	str	r2, [sp, #12]
20001ce8:	8865      	ldrh	r5, [r4, #2]
20001cea:	422d      	tst	r5, r5
20001cec:	d045      	beq.n	20001d7a <Render_Clear>
20001cee:	3404      	adds	r4, #4

20001cf0 <Render_SegmLoop>:
20001cf0:	9a04      	ldr	r2, [sp, #16]
20001cf2:	4212      	tst	r2, r2
20001cf4:	d041      	beq.n	20001d7a <Render_Clear>
20001cf6:	8823      	ldrh	r3, [r4, #0]
20001cf8:	4293      	cmp	r3, r2
20001cfa:	d300      	bcc.n	20001cfe <Render_SegmLoop+0xe>
20001cfc:	4613      	mov	r3, r2
20001cfe:	421b      	tst	r3, r3
20001d00:	d038      	beq.n	20001d74 <Render_SegmNext>
20001d02:	1ad2      	subs	r2, r2, r3
20001d04:	9204      	str	r2, [sp, #16]
20001d06:	88e2      	ldrh	r2, [r4, #6]
20001d08:	b212      	sxth	r2, r2
20001d0a:	9903      	ldr	r1, [sp, #12]
20001d0c:	440a      	add	r2, r1
20001d0e:	7c61      	ldrb	r1, [r4, #17]
20001d10:	4209      	tst	r1, r1
20001d12:	d000      	beq.n	20001d16 <Render_SegmLoop+0x26>
20001d14:	1052      	asrs	r2, r2, #1
20001d16:	8961      	ldrh	r1, [r4, #10]
20001d18:	1a52      	subs	r2, r2, r1
20001d1a:	d5fd      	bpl.n	20001d18 <Render_SegmLoop+0x28>
20001d1c:	1852      	adds	r2, r2, r1
20001d1e:	d4fd      	bmi.n	20001d1c <Render_SegmLoop+0x2c>
20001d20:	88a1      	ldrh	r1, [r4, #4]
20001d22:	b209      	sxth	r1, r1
20001d24:	8920      	ldrh	r0, [r4, #8]
20001d26:	1a09      	subs	r1, r1, r0
20001d28:	d5fd      	bpl.n	20001d26 <Render_SegmLoop+0x36>
20001d2a:	1809      	adds	r1, r1, r0
20001d2c:	d4fd      	bmi.n	20001d2a <Render_SegmLoop+0x3a>
20001d2e:	7c20      	ldrb	r0, [r4, #16]
20001d30:	4200      	tst	r0, r0
20001d32:	d10d      	bne.n	20001d50 <Render_SegmLoop+0x60>
20001d34:	0852      	lsrs	r2, r2, #1
20001d36:	6961      	ldr	r1, [r4, #20]
20001d38:	d300      	bcc.n	20001d3c <Render_SegmLoop+0x4c>
20001d3a:	69a1      	ldr	r1, [r4, #24]
20001d3c:	089a      	lsrs	r2, r3, #2
20001d3e:	9e01      	ldr	r6, [sp, #4]
20001d40:	c604      	stmia	r6!, {r2}
20001d42:	9802      	ldr	r0, [sp, #8]
20001d44:	c601      	stmia	r6!, {r0}
20001d46:	9601      	str	r6, [sp, #4]
20001d48:	f7fe fae2 	bl	20000310 <MemSet4>
20001d4c:	9002      	str	r0, [sp, #8]
20001d4e:	e011      	b.n	20001d74 <Render_SegmNext>
20001d50:	9400      	str	r4, [sp, #0]
20001d52:	a710      	add	r7, pc, #64	; (adr r7, 20001d94 <Render_FncAddr>)
20001d54:	0086      	lsls	r6, r0, #2
20001d56:	59bf      	ldr	r7, [r7, r6]
20001d58:	2806      	cmp	r0, #6
20001d5a:	d803      	bhi.n	20001d64 <Render_SegmLoop+0x74>
20001d5c:	9801      	ldr	r0, [sp, #4]
20001d5e:	47b8      	blx	r7
20001d60:	9001      	str	r0, [sp, #4]
20001d62:	e007      	b.n	20001d74 <Render_SegmNext>
20001d64:	0898      	lsrs	r0, r3, #2
20001d66:	9e01      	ldr	r6, [sp, #4]
20001d68:	c601      	stmia	r6!, {r0}
20001d6a:	9802      	ldr	r0, [sp, #8]
20001d6c:	c601      	stmia	r6!, {r0}
20001d6e:	9601      	str	r6, [sp, #4]
20001d70:	47b8      	blx	r7
20001d72:	9002      	str	r0, [sp, #8]

20001d74 <Render_SegmNext>:
20001d74:	341c      	adds	r4, #28
20001d76:	3d01      	subs	r5, #1
20001d78:	d1ba      	bne.n	20001cf0 <Render_SegmLoop>

20001d7a <Render_Clear>:
20001d7a:	9801      	ldr	r0, [sp, #4]
20001d7c:	9904      	ldr	r1, [sp, #16]
20001d7e:	0889      	lsrs	r1, r1, #2
20001d80:	d001      	beq.n	20001d86 <Render_Clear+0xc>
20001d82:	4a03      	ldr	r2, [pc, #12]	; (20001d90 <Render_LineBuf0Addr>)
20001d84:	c006      	stmia	r0!, {r1, r2}
20001d86:	b005      	add	sp, #20
20001d88:	bdf0      	pop	{r4, r5, r6, r7, pc}
20001d8a:	46c0      	nop			; (mov r8, r8)

20001d8c <Render_pScreenAddr>:
20001d8c:	20002690 	.word	0x20002690

20001d90 <Render_LineBuf0Addr>:
20001d90:	200367bc 	.word	0x200367bc

20001d94 <Render_FncAddr>:
20001d94:	20000311 	.word	0x20000311
20001d98:	20000929 	.word	0x20000929
20001d9c:	2000143d 	.word	0x2000143d
20001da0:	20001505 	.word	0x20001505
20001da4:	20001399 	.word	0x20001399
20001da8:	20000923 	.word	0x20000923
20001dac:	20000925 	.word	0x20000925
20001db0:	2000089d 	.word	0x2000089d
20001db4:	20000839 	.word	0x20000839
20001db8:	2000077d 	.word	0x2000077d
20001dbc:	20000e7d 	.word	0x20000e7d
20001dc0:	200000c1 	.word	0x200000c1
20001dc4:	20000689 	.word	0x20000689
20001dc8:	20000345 	.word	0x20000345
20001dcc:	20000b2d 	.word	0x20000b2d
20001dd0:	20000451 	.word	0x20000451
20001dd4:	20000c25 	.word	0x20000c25
20001dd8:	20000d95 	.word	0x20000d95
20001ddc:	20000f59 	.word	0x20000f59
20001de0:	20001059 	.word	0x20001059
20001de4:	200012e5 	.word	0x200012e5
20001de8:	200001f5 	.word	0x200001f5
20001dec:	2000095d 	.word	0x2000095d
20001df0:	20000a31 	.word	0x20000a31
20001df4:	200015c1 	.word	0x200015c1
20001df8:	20001745 	.word	0x20001745
20001dfc:	200018b5 	.word	0x200018b5
20001e00:	20001a01 	.word	0x20001a01
20001e04:	20001b35 	.word	0x20001b35

20001e08 <flash_init_boot2_copyout>:
    if (boot2_copyout_valid)
20001e08:	4808      	ldr	r0, [pc, #32]	; (20001e2c <flash_init_boot2_copyout+0x24>)
static void __no_inline_not_in_flash_func(flash_init_boot2_copyout)() {
20001e0a:	b510      	push	{r4, lr}
    if (boot2_copyout_valid)
20001e0c:	7803      	ldrb	r3, [r0, #0]
20001e0e:	2b00      	cmp	r3, #0
20001e10:	d10a      	bne.n	20001e28 <flash_init_boot2_copyout+0x20>
20001e12:	2380      	movs	r3, #128	; 0x80
20001e14:	4906      	ldr	r1, [pc, #24]	; (20001e30 <flash_init_boot2_copyout+0x28>)
    for (int i = 0; i < BOOT2_SIZE_WORDS; ++i)
20001e16:	4a07      	ldr	r2, [pc, #28]	; (20001e34 <flash_init_boot2_copyout+0x2c>)
20001e18:	055b      	lsls	r3, r3, #21
        boot2_copyout[i] = ((uint32_t *)XIP_BASE)[i];
20001e1a:	681c      	ldr	r4, [r3, #0]
20001e1c:	50cc      	str	r4, [r1, r3]
    for (int i = 0; i < BOOT2_SIZE_WORDS; ++i)
20001e1e:	3304      	adds	r3, #4
20001e20:	4293      	cmp	r3, r2
20001e22:	d1fa      	bne.n	20001e1a <flash_init_boot2_copyout+0x12>
    boot2_copyout_valid = true;
20001e24:	2301      	movs	r3, #1
20001e26:	7003      	strb	r3, [r0, #0]
}
20001e28:	bd10      	pop	{r4, pc}
20001e2a:	46c0      	nop			; (mov r8, r8)
20001e2c:	200394dd 	.word	0x200394dd
20001e30:	1003936c 	.word	0x1003936c
20001e34:	10000100 	.word	0x10000100

20001e38 <flash_enable_xip_via_boot2>:
static void __no_inline_not_in_flash_func(flash_enable_xip_via_boot2)() {
20001e38:	b510      	push	{r4, lr}
    ((void (*)(void))boot2_copyout+1)();
20001e3a:	4b02      	ldr	r3, [pc, #8]	; (20001e44 <flash_enable_xip_via_boot2+0xc>)
20001e3c:	3301      	adds	r3, #1
20001e3e:	4798      	blx	r3
}
20001e40:	bd10      	pop	{r4, pc}
20001e42:	46c0      	nop			; (mov r8, r8)
20001e44:	2003936c 	.word	0x2003936c

20001e48 <flash_cs_force.constprop.0>:
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
20001e48:	4b03      	ldr	r3, [pc, #12]	; (20001e58 <flash_cs_force.constprop.0+0x10>)
20001e4a:	681a      	ldr	r2, [r3, #0]
20001e4c:	23c0      	movs	r3, #192	; 0xc0
20001e4e:	009b      	lsls	r3, r3, #2
20001e50:	4393      	bics	r3, r2
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
20001e52:	4a02      	ldr	r2, [pc, #8]	; (20001e5c <flash_cs_force.constprop.0+0x14>)
20001e54:	6013      	str	r3, [r2, #0]
}
20001e56:	4770      	bx	lr
20001e58:	4001800c 	.word	0x4001800c
20001e5c:	4001900c 	.word	0x4001900c

20001e60 <flash_cs_force.constprop.1>:
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
20001e60:	4b05      	ldr	r3, [pc, #20]	; (20001e78 <flash_cs_force.constprop.1+0x18>)
20001e62:	681a      	ldr	r2, [r3, #0]
20001e64:	2380      	movs	r3, #128	; 0x80
20001e66:	009b      	lsls	r3, r3, #2
20001e68:	4053      	eors	r3, r2
20001e6a:	22c0      	movs	r2, #192	; 0xc0
20001e6c:	0092      	lsls	r2, r2, #2
20001e6e:	4013      	ands	r3, r2
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
20001e70:	4a02      	ldr	r2, [pc, #8]	; (20001e7c <flash_cs_force.constprop.1+0x1c>)
20001e72:	6013      	str	r3, [r2, #0]
20001e74:	4770      	bx	lr
20001e76:	46c0      	nop			; (mov r8, r8)
20001e78:	4001800c 	.word	0x4001800c
20001e7c:	4001900c 	.word	0x4001900c

20001e80 <flash_do_cmd.constprop.0>:
static void __no_inline_not_in_flash_func(flash_do_cmd)(const uint8_t *txbuf, uint8_t *rxbuf, size_t count) {
20001e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
20001e82:	46ce      	mov	lr, r9
20001e84:	4647      	mov	r7, r8
20001e86:	4681      	mov	r9, r0
20001e88:	b580      	push	{r7, lr}
    void (*connect_internal_flash)(void) = (void(*)(void))rom_func_lookup(rom_table_code('I', 'F'));
20001e8a:	4823      	ldr	r0, [pc, #140]	; (20001f18 <flash_do_cmd.constprop.0+0x98>)
static void __no_inline_not_in_flash_func(flash_do_cmd)(const uint8_t *txbuf, uint8_t *rxbuf, size_t count) {
20001e8c:	000e      	movs	r6, r1
    void (*connect_internal_flash)(void) = (void(*)(void))rom_func_lookup(rom_table_code('I', 'F'));
20001e8e:	f000 fba3 	bl	200025d8 <__rom_func_lookup_veneer>
20001e92:	0005      	movs	r5, r0
    void (*flash_exit_xip)(void) = (void(*)(void))rom_func_lookup(rom_table_code('E', 'X'));
20001e94:	4821      	ldr	r0, [pc, #132]	; (20001f1c <flash_do_cmd.constprop.0+0x9c>)
20001e96:	f000 fb9f 	bl	200025d8 <__rom_func_lookup_veneer>
20001e9a:	0004      	movs	r4, r0
    void (*flash_flush_cache)(void) = (void(*)(void))rom_func_lookup(rom_table_code('F', 'C'));
20001e9c:	4820      	ldr	r0, [pc, #128]	; (20001f20 <flash_do_cmd.constprop.0+0xa0>)
20001e9e:	f000 fb9b 	bl	200025d8 <__rom_func_lookup_veneer>
20001ea2:	4680      	mov	r8, r0
    flash_init_boot2_copyout();
20001ea4:	f7ff ffb0 	bl	20001e08 <flash_init_boot2_copyout>
    connect_internal_flash();
20001ea8:	47a8      	blx	r5
    flash_exit_xip();
20001eaa:	47a0      	blx	r4
    flash_cs_force(0);
20001eac:	f7ff ffd8 	bl	20001e60 <flash_cs_force.constprop.1>
        uint32_t flags = ssi_hw->sr;
20001eb0:	21c0      	movs	r1, #192	; 0xc0
    size_t rx_remaining = count;
20001eb2:	240d      	movs	r4, #13
    size_t tx_remaining = count;
20001eb4:	220d      	movs	r2, #13
        bool can_get = !!(flags & SSI_SR_RFNE_BITS);
20001eb6:	2708      	movs	r7, #8
        bool can_put = !!(flags & SSI_SR_TFNF_BITS);
20001eb8:	2002      	movs	r0, #2
        uint32_t flags = ssi_hw->sr;
20001eba:	0549      	lsls	r1, r1, #21
        bool can_get = !!(flags & SSI_SR_RFNE_BITS);
20001ebc:	003d      	movs	r5, r7
        uint32_t flags = ssi_hw->sr;
20001ebe:	6a8b      	ldr	r3, [r1, #40]	; 0x28
        bool can_get = !!(flags & SSI_SR_RFNE_BITS);
20001ec0:	401d      	ands	r5, r3
        if (can_put && tx_remaining && rx_remaining - tx_remaining < max_in_flight) {
20001ec2:	4218      	tst	r0, r3
20001ec4:	d00b      	beq.n	20001ede <flash_do_cmd.constprop.0+0x5e>
20001ec6:	2a00      	cmp	r2, #0
20001ec8:	d009      	beq.n	20001ede <flash_do_cmd.constprop.0+0x5e>
20001eca:	1aa3      	subs	r3, r4, r2
20001ecc:	2b0d      	cmp	r3, #13
20001ece:	d81e      	bhi.n	20001f0e <flash_do_cmd.constprop.0+0x8e>
            ssi_hw->dr0 = *txbuf++;
20001ed0:	464b      	mov	r3, r9
20001ed2:	781b      	ldrb	r3, [r3, #0]
            --tx_remaining;
20001ed4:	3a01      	subs	r2, #1
            ssi_hw->dr0 = *txbuf++;
20001ed6:	660b      	str	r3, [r1, #96]	; 0x60
20001ed8:	2301      	movs	r3, #1
20001eda:	469c      	mov	ip, r3
20001edc:	44e1      	add	r9, ip
        if (can_get && rx_remaining) {
20001ede:	0013      	movs	r3, r2
20001ee0:	2d00      	cmp	r5, #0
20001ee2:	d10b      	bne.n	20001efc <flash_do_cmd.constprop.0+0x7c>
    while (tx_remaining || rx_remaining) {
20001ee4:	4323      	orrs	r3, r4
20001ee6:	2b00      	cmp	r3, #0
20001ee8:	d1e8      	bne.n	20001ebc <flash_do_cmd.constprop.0+0x3c>
    flash_cs_force(1);
20001eea:	f7ff ffad 	bl	20001e48 <flash_cs_force.constprop.0>
    flash_flush_cache();
20001eee:	47c0      	blx	r8
    flash_enable_xip_via_boot2();
20001ef0:	f7ff ffa2 	bl	20001e38 <flash_enable_xip_via_boot2>
}
20001ef4:	bcc0      	pop	{r6, r7}
20001ef6:	46b9      	mov	r9, r7
20001ef8:	46b0      	mov	r8, r6
20001efa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (can_get && rx_remaining) {
20001efc:	2c00      	cmp	r4, #0
20001efe:	d0f2      	beq.n	20001ee6 <flash_do_cmd.constprop.0+0x66>
            *rxbuf++ = ssi_hw->dr0;
20001f00:	6e0b      	ldr	r3, [r1, #96]	; 0x60
            --rx_remaining;
20001f02:	3c01      	subs	r4, #1
            *rxbuf++ = ssi_hw->dr0;
20001f04:	7033      	strb	r3, [r6, #0]
    while (tx_remaining || rx_remaining) {
20001f06:	0023      	movs	r3, r4
            *rxbuf++ = ssi_hw->dr0;
20001f08:	3601      	adds	r6, #1
    while (tx_remaining || rx_remaining) {
20001f0a:	4313      	orrs	r3, r2
20001f0c:	e7eb      	b.n	20001ee6 <flash_do_cmd.constprop.0+0x66>
        if (can_get && rx_remaining) {
20001f0e:	2d00      	cmp	r5, #0
20001f10:	d0d4      	beq.n	20001ebc <flash_do_cmd.constprop.0+0x3c>
20001f12:	2c00      	cmp	r4, #0
20001f14:	d0d2      	beq.n	20001ebc <flash_do_cmd.constprop.0+0x3c>
20001f16:	e7f3      	b.n	20001f00 <flash_do_cmd.constprop.0+0x80>
20001f18:	00004649 	.word	0x00004649
20001f1c:	00005845 	.word	0x00005845
20001f20:	00004346 	.word	0x00004346

20001f24 <mutex_enter_blocking>:

void __time_critical_func(mutex_enter_blocking)(mutex_t *mtx) {
20001f24:	b510      	push	{r4, lr}
    assert(mtx->core.spin_lock);
    bool block = true;
    do {
        uint32_t save = spin_lock_blocking(mtx->core.spin_lock);
20001f26:	6802      	ldr	r2, [r0, #0]
    *lock = 0;
20001f28:	2400      	movs	r4, #0
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
20001f2a:	f3ef 8110 	mrs	r1, PRIMASK
    __asm volatile ("cpsid i");
20001f2e:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
20001f30:	6813      	ldr	r3, [r2, #0]
20001f32:	2b00      	cmp	r3, #0
20001f34:	d0fc      	beq.n	20001f30 <mutex_enter_blocking+0xc>
    __asm volatile ("dmb");
20001f36:	f3bf 8f5f 	dmb	sy
        if (mtx->owner < 0) {
20001f3a:	7903      	ldrb	r3, [r0, #4]
20001f3c:	2b7f      	cmp	r3, #127	; 0x7f
20001f3e:	d80b      	bhi.n	20001f58 <mutex_enter_blocking+0x34>
            mtx->owner = get_core_num();
            block = false;
        }
        spin_unlock(mtx->core.spin_lock, save);
20001f40:	6803      	ldr	r3, [r0, #0]
20001f42:	f3bf 8f5f 	dmb	sy
    *lock = 0;
20001f46:	601c      	str	r4, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
20001f48:	f381 8810 	msr	PRIMASK, r1
    __asm volatile ("wfe");
20001f4c:	bf20      	wfe
        uint32_t save = spin_lock_blocking(mtx->core.spin_lock);
20001f4e:	6802      	ldr	r2, [r0, #0]
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
20001f50:	f3ef 8110 	mrs	r1, PRIMASK
    __asm volatile ("cpsid i");
20001f54:	b672      	cpsid	i
inline static void spin_lock_unsafe_blocking(spin_lock_t *lock) {
20001f56:	e7eb      	b.n	20001f30 <mutex_enter_blocking+0xc>
    return (*(uint32_t *) (SIO_BASE + SIO_CPUID_OFFSET));
20001f58:	23d0      	movs	r3, #208	; 0xd0
20001f5a:	061b      	lsls	r3, r3, #24
            mtx->owner = get_core_num();
20001f5c:	681b      	ldr	r3, [r3, #0]
20001f5e:	7103      	strb	r3, [r0, #4]
        spin_unlock(mtx->core.spin_lock, save);
20001f60:	6803      	ldr	r3, [r0, #0]
    __asm volatile ("dmb");
20001f62:	f3bf 8f5f 	dmb	sy
    *lock = 0;
20001f66:	2200      	movs	r2, #0
20001f68:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
20001f6a:	f381 8810 	msr	PRIMASK, r1
        if (block) {
            __wfe();
        }
    } while (block);
}
20001f6e:	bd10      	pop	{r4, pc}

20001f70 <mutex_try_enter>:

bool __time_critical_func(mutex_try_enter)(mutex_t *mtx, uint32_t *owner_out) {
20001f70:	0003      	movs	r3, r0
    bool entered;
    uint32_t save = spin_lock_blocking(mtx->core.spin_lock);
20001f72:	6800      	ldr	r0, [r0, #0]
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
20001f74:	f3ef 8c10 	mrs	ip, PRIMASK
    __asm volatile ("cpsid i");
20001f78:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
20001f7a:	6802      	ldr	r2, [r0, #0]
20001f7c:	2a00      	cmp	r2, #0
20001f7e:	d0fc      	beq.n	20001f7a <mutex_try_enter+0xa>
    __asm volatile ("dmb");
20001f80:	f3bf 8f5f 	dmb	sy
    if (mtx->owner < 0) {
20001f84:	2204      	movs	r2, #4
20001f86:	569a      	ldrsb	r2, [r3, r2]
20001f88:	2a00      	cmp	r2, #0
20001f8a:	db0b      	blt.n	20001fa4 <mutex_try_enter+0x34>
        mtx->owner = get_core_num();
        entered = true;
    } else {
        if (owner_out) *owner_out = mtx->owner;
20001f8c:	2900      	cmp	r1, #0
20001f8e:	d00f      	beq.n	20001fb0 <mutex_try_enter+0x40>
        entered = false;
20001f90:	2000      	movs	r0, #0
        if (owner_out) *owner_out = mtx->owner;
20001f92:	600a      	str	r2, [r1, #0]
    }
    spin_unlock(mtx->core.spin_lock, save);
20001f94:	681b      	ldr	r3, [r3, #0]
20001f96:	f3bf 8f5f 	dmb	sy
    *lock = 0;
20001f9a:	2200      	movs	r2, #0
20001f9c:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
20001f9e:	f38c 8810 	msr	PRIMASK, ip
    return entered;
}
20001fa2:	4770      	bx	lr
    return (*(uint32_t *) (SIO_BASE + SIO_CPUID_OFFSET));
20001fa4:	22d0      	movs	r2, #208	; 0xd0
20001fa6:	0612      	lsls	r2, r2, #24
        mtx->owner = get_core_num();
20001fa8:	6812      	ldr	r2, [r2, #0]
        entered = true;
20001faa:	2001      	movs	r0, #1
        mtx->owner = get_core_num();
20001fac:	711a      	strb	r2, [r3, #4]
        entered = true;
20001fae:	e7f1      	b.n	20001f94 <mutex_try_enter+0x24>
        entered = false;
20001fb0:	2000      	movs	r0, #0
20001fb2:	e7ef      	b.n	20001f94 <mutex_try_enter+0x24>

20001fb4 <mutex_exit>:
    } while (block);
    return true;
}

void __time_critical_func(mutex_exit)(mutex_t *mtx) {
    uint32_t save = spin_lock_blocking(mtx->core.spin_lock);
20001fb4:	6802      	ldr	r2, [r0, #0]
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
20001fb6:	f3ef 8110 	mrs	r1, PRIMASK
    __asm volatile ("cpsid i");
20001fba:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
20001fbc:	6813      	ldr	r3, [r2, #0]
20001fbe:	2b00      	cmp	r3, #0
20001fc0:	d0fc      	beq.n	20001fbc <mutex_exit+0x8>
    __asm volatile ("dmb");
20001fc2:	f3bf 8f5f 	dmb	sy
    assert(mtx->owner >= 0);
    mtx->owner = -1;
20001fc6:	23ff      	movs	r3, #255	; 0xff
20001fc8:	7103      	strb	r3, [r0, #4]
    __asm volatile ("sev");
20001fca:	bf40      	sev
    __sev();
    spin_unlock(mtx->core.spin_lock, save);
20001fcc:	6803      	ldr	r3, [r0, #0]
    __asm volatile ("dmb");
20001fce:	f3bf 8f5f 	dmb	sy
    *lock = 0;
20001fd2:	2200      	movs	r2, #0
20001fd4:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
20001fd6:	f381 8810 	msr	PRIMASK, r1
}
20001fda:	4770      	bx	lr

20001fdc <_Z13VgaBufProcessv>:
	dma_hw->ints0 = (1u << VGA_DMA_PIO0);
20001fdc:	22a0      	movs	r2, #160	; 0xa0
{
20001fde:	b5f0      	push	{r4, r5, r6, r7, lr}
	dma_hw->ints0 = (1u << VGA_DMA_PIO0);
20001fe0:	2102      	movs	r1, #2
{
20001fe2:	46de      	mov	lr, fp
20001fe4:	4657      	mov	r7, sl
20001fe6:	464e      	mov	r6, r9
20001fe8:	4645      	mov	r5, r8
	dma_hw->ints0 = (1u << VGA_DMA_PIO0);
20001fea:	4b7d      	ldr	r3, [pc, #500]	; (200021e0 <_Z13VgaBufProcessv+0x204>)
20001fec:	05d2      	lsls	r2, r2, #23
{
20001fee:	b5e0      	push	{r5, r6, r7, lr}
	dma_hw->ints0 = (1u << VGA_DMA_PIO0);
20001ff0:	50d1      	str	r1, [r2, r3]
	BufInx = bufinx ^ 1;
20001ff2:	2301      	movs	r3, #1
	int bufinx = BufInx;
20001ff4:	497b      	ldr	r1, [pc, #492]	; (200021e4 <_Z13VgaBufProcessv+0x208>)
	hw_divider_save_state(&DividerState);
20001ff6:	487c      	ldr	r0, [pc, #496]	; (200021e8 <_Z13VgaBufProcessv+0x20c>)
	int bufinx = BufInx;
20001ff8:	680f      	ldr	r7, [r1, #0]
{
20001ffa:	b083      	sub	sp, #12
	BufInx = bufinx ^ 1;
20001ffc:	407b      	eors	r3, r7
20001ffe:	600b      	str	r3, [r1, #0]
        dma_channel_hw_addr(channel)->al3_read_addr_trig = (uintptr_t) read_addr;
20002000:	4b7a      	ldr	r3, [pc, #488]	; (200021ec <_Z13VgaBufProcessv+0x210>)
20002002:	681b      	ldr	r3, [r3, #0]
20002004:	63d3      	str	r3, [r2, #60]	; 0x3c
	hw_divider_save_state(&DividerState);
20002006:	f000 fad7 	bl	200025b8 <__hw_divider_save_state_veneer>
	int line = ScanLine;	// current scanline
2000200a:	4b79      	ldr	r3, [pc, #484]	; (200021f0 <_Z13VgaBufProcessv+0x214>)
	if (line > CurVmode.vtot) // last scanline?
2000200c:	4979      	ldr	r1, [pc, #484]	; (200021f4 <_Z13VgaBufProcessv+0x218>)
	int line = ScanLine;	// current scanline
2000200e:	681a      	ldr	r2, [r3, #0]
	if (line > CurVmode.vtot) // last scanline?
20002010:	8d88      	ldrh	r0, [r1, #44]	; 0x2c
	line++; 		// new current scanline
20002012:	3201      	adds	r2, #1
	if (line > CurVmode.vtot) // last scanline?
20002014:	4290      	cmp	r0, r2
20002016:	da04      	bge.n	20002022 <_Z13VgaBufProcessv+0x46>
		Frame++;	// increment frame counter
20002018:	4877      	ldr	r0, [pc, #476]	; (200021f8 <_Z13VgaBufProcessv+0x21c>)
2000201a:	6802      	ldr	r2, [r0, #0]
2000201c:	3201      	adds	r2, #1
2000201e:	6002      	str	r2, [r0, #0]
		line = 1; 	// restart scanline
20002020:	2201      	movs	r2, #1
	ScanLine = line;	// store new scanline
20002022:	601a      	str	r2, [r3, #0]
	u8 linetype = ScanlineType[line];
20002024:	4b75      	ldr	r3, [pc, #468]	; (200021fc <_Z13VgaBufProcessv+0x220>)
	switch (linetype)
20002026:	5c9b      	ldrb	r3, [r3, r2]
20002028:	3b06      	subs	r3, #6
2000202a:	b2db      	uxtb	r3, r3
2000202c:	2b04      	cmp	r3, #4
2000202e:	d862      	bhi.n	200020f6 <_Z13VgaBufProcessv+0x11a>
20002030:	4873      	ldr	r0, [pc, #460]	; (20002200 <_Z13VgaBufProcessv+0x224>)
20002032:	009b      	lsls	r3, r3, #2
20002034:	58c3      	ldr	r3, [r0, r3]
20002036:	469f      	mov	pc, r3
		y0 = line - CurVmode.vfirst1;
20002038:	2340      	movs	r3, #64	; 0x40
		y0 = line - CurVmode.vfirst2;
2000203a:	5acb      	ldrh	r3, [r1, r3]
2000203c:	1ad2      	subs	r2, r2, r3
		if (CurVmode.dbly) y0 >>= 1;
2000203e:	2355      	movs	r3, #85	; 0x55
20002040:	5ccb      	ldrb	r3, [r1, r3]
20002042:	2b00      	cmp	r3, #0
20002044:	d000      	beq.n	20002048 <_Z13VgaBufProcessv+0x6c>
20002046:	1052      	asrs	r2, r2, #1
		y0 = (y0 << 1) + 1;
20002048:	0052      	lsls	r2, r2, #1
2000204a:	1c53      	adds	r3, r2, #1
		VSync = False;	// not vsync
2000204c:	2200      	movs	r2, #0
		y0 = (y0 << 1) + 1;
2000204e:	9300      	str	r3, [sp, #0]
		VSync = False;	// not vsync
20002050:	4b6c      	ldr	r3, [pc, #432]	; (20002204 <_Z13VgaBufProcessv+0x228>)
20002052:	701a      	strb	r2, [r3, #0]
	if (y0 >= 0)
20002054:	9b00      	ldr	r3, [sp, #0]
20002056:	2b00      	cmp	r3, #0
20002058:	db25      	blt.n	200020a6 <_Z13VgaBufProcessv+0xca>
    pio->ctrl = (pio->ctrl & ~(1u << sm)) | (!!enabled << sm);
2000205a:	4c6b      	ldr	r4, [pc, #428]	; (20002208 <_Z13VgaBufProcessv+0x22c>)
    dma_hw->abort = 1u << channel;
2000205c:	21a0      	movs	r1, #160	; 0xa0
		for (layer = 1; layer < LAYERS; layer++)
2000205e:	2301      	movs	r3, #1
20002060:	46a4      	mov	ip, r4
20002062:	46bb      	mov	fp, r7
* \note This value wraps roughly every 1 hour 11 minutes and 35 seconds.
*
* \return the 32 bit timestamp
*/
static inline uint32_t time_us_32() {
    return timer_hw->timerawl;
20002064:	4a69      	ldr	r2, [pc, #420]	; (2000220c <_Z13VgaBufProcessv+0x230>)
20002066:	486a      	ldr	r0, [pc, #424]	; (20002210 <_Z13VgaBufProcessv+0x234>)
20002068:	4690      	mov	r8, r2
	if (y0 >= 0)
2000206a:	4d6a      	ldr	r5, [pc, #424]	; (20002214 <_Z13VgaBufProcessv+0x238>)
2000206c:	4a6a      	ldr	r2, [pc, #424]	; (20002218 <_Z13VgaBufProcessv+0x23c>)
2000206e:	05c9      	lsls	r1, r1, #23
			if (CtrlBufNext[layer] == NULL) continue;
20002070:	4e5e      	ldr	r6, [pc, #376]	; (200021ec <_Z13VgaBufProcessv+0x210>)
20002072:	009c      	lsls	r4, r3, #2
20002074:	5934      	ldr	r4, [r6, r4]
20002076:	9401      	str	r4, [sp, #4]
20002078:	2c00      	cmp	r4, #0
2000207a:	d00e      	beq.n	2000209a <_Z13VgaBufProcessv+0xbe>
			if (!s->on || (s->w <= 0) || (y0 < s->y) || (y0 >= s->y + s->h)) continue;
2000207c:	7b84      	ldrb	r4, [r0, #14]
2000207e:	2c00      	cmp	r4, #0
20002080:	d00b      	beq.n	2000209a <_Z13VgaBufProcessv+0xbe>
20002082:	8844      	ldrh	r4, [r0, #2]
20002084:	2c00      	cmp	r4, #0
20002086:	d008      	beq.n	2000209a <_Z13VgaBufProcessv+0xbe>
20002088:	2400      	movs	r4, #0
2000208a:	5f07      	ldrsh	r7, [r0, r4]
2000208c:	9e00      	ldr	r6, [sp, #0]
2000208e:	42b7      	cmp	r7, r6
20002090:	dc03      	bgt.n	2000209a <_Z13VgaBufProcessv+0xbe>
20002092:	8884      	ldrh	r4, [r0, #4]
20002094:	19e4      	adds	r4, r4, r7
20002096:	42b4      	cmp	r4, r6
20002098:	dc31      	bgt.n	200020fe <_Z13VgaBufProcessv+0x122>
		for (layer = 1; layer < LAYERS; layer++)
2000209a:	3301      	adds	r3, #1
2000209c:	3518      	adds	r5, #24
2000209e:	3024      	adds	r0, #36	; 0x24
200020a0:	2b04      	cmp	r3, #4
200020a2:	d1e5      	bne.n	20002070 <_Z13VgaBufProcessv+0x94>
200020a4:	465f      	mov	r7, fp
}
200020a6:	0038      	movs	r0, r7
200020a8:	b003      	add	sp, #12
200020aa:	bcf0      	pop	{r4, r5, r6, r7}
200020ac:	46bb      	mov	fp, r7
200020ae:	46b2      	mov	sl, r6
200020b0:	46a9      	mov	r9, r5
200020b2:	46a0      	mov	r8, r4
200020b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		y0 = line - CurVmode.vfirst2;
200020b6:	234e      	movs	r3, #78	; 0x4e
200020b8:	e7bf      	b.n	2000203a <_Z13VgaBufProcessv+0x5e>
		y0 = line - CurVmode.vfirst1;
200020ba:	2340      	movs	r3, #64	; 0x40
200020bc:	5acb      	ldrh	r3, [r1, r3]
200020be:	1ad2      	subs	r2, r2, r3
		if (CurVmode.dbly) y0 >>= 1;
200020c0:	2355      	movs	r3, #85	; 0x55
		y0 = line - CurVmode.vfirst1;
200020c2:	9200      	str	r2, [sp, #0]
		if (CurVmode.dbly) y0 >>= 1;
200020c4:	5ccb      	ldrb	r3, [r1, r3]
200020c6:	2b00      	cmp	r3, #0
200020c8:	d001      	beq.n	200020ce <_Z13VgaBufProcessv+0xf2>
200020ca:	1053      	asrs	r3, r2, #1
200020cc:	9300      	str	r3, [sp, #0]
		VSync = False;	// not vsync
200020ce:	2200      	movs	r2, #0
200020d0:	4b4c      	ldr	r3, [pc, #304]	; (20002204 <_Z13VgaBufProcessv+0x228>)
200020d2:	701a      	strb	r2, [r3, #0]
		break;
200020d4:	e7be      	b.n	20002054 <_Z13VgaBufProcessv+0x78>
		y0 = line - CurVmode.vfirst1;
200020d6:	2340      	movs	r3, #64	; 0x40
		y0 = line - CurVmode.vfirst2;
200020d8:	5acb      	ldrh	r3, [r1, r3]
200020da:	1ad2      	subs	r2, r2, r3
		if (CurVmode.dbly) y0 >>= 1;
200020dc:	2355      	movs	r3, #85	; 0x55
200020de:	5ccb      	ldrb	r3, [r1, r3]
200020e0:	2b00      	cmp	r3, #0
200020e2:	d000      	beq.n	200020e6 <_Z13VgaBufProcessv+0x10a>
200020e4:	1052      	asrs	r2, r2, #1
		y0 <<= 1;
200020e6:	0053      	lsls	r3, r2, #1
		VSync = False;	// not vsync
200020e8:	2200      	movs	r2, #0
		y0 <<= 1;
200020ea:	9300      	str	r3, [sp, #0]
		VSync = False;	// not vsync
200020ec:	4b45      	ldr	r3, [pc, #276]	; (20002204 <_Z13VgaBufProcessv+0x228>)
200020ee:	701a      	strb	r2, [r3, #0]
		break;
200020f0:	e7b0      	b.n	20002054 <_Z13VgaBufProcessv+0x78>
		y0 = line - CurVmode.vfirst2;
200020f2:	234e      	movs	r3, #78	; 0x4e
200020f4:	e7f0      	b.n	200020d8 <_Z13VgaBufProcessv+0xfc>
		VSync = True;	// vsync
200020f6:	2201      	movs	r2, #1
200020f8:	4b42      	ldr	r3, [pc, #264]	; (20002204 <_Z13VgaBufProcessv+0x228>)
200020fa:	701a      	strb	r2, [r3, #0]
	if (y0 >= 0)
200020fc:	e7d3      	b.n	200020a6 <_Z13VgaBufProcessv+0xca>
200020fe:	4644      	mov	r4, r8
20002100:	6aa4      	ldr	r4, [r4, #40]	; 0x28
20002102:	46a2      	mov	sl, r4
20002104:	1d2c      	adds	r4, r5, #4
20002106:	46a1      	mov	r9, r4
				if (a <= CurLayerProg.maxidle+LAYER_OFFSET) break;
20002108:	4c44      	ldr	r4, [pc, #272]	; (2000221c <_Z13VgaBufProcessv+0x240>)
2000210a:	7b67      	ldrb	r7, [r4, #13]
2000210c:	464c      	mov	r4, r9
2000210e:	4699      	mov	r9, r3
20002110:	0003      	movs	r3, r0
20002112:	4650      	mov	r0, sl
20002114:	469a      	mov	sl, r3
20002116:	0023      	movs	r3, r4
20002118:	e004      	b.n	20002124 <_Z13VgaBufProcessv+0x148>
2000211a:	4644      	mov	r4, r8
2000211c:	6aa4      	ldr	r4, [r4, #40]	; 0x28
			} while ((u32)(time_us_32() - t1) < (u32)10); // wait max. 10 us, low resolution can take long time
2000211e:	1a24      	subs	r4, r4, r0
20002120:	2c09      	cmp	r4, #9
20002122:	d804      	bhi.n	2000212e <_Z13VgaBufProcessv+0x152>
				if (a <= CurLayerProg.maxidle+LAYER_OFFSET) break;
20002124:	261f      	movs	r6, #31
				u8 a = *(volatile u8*)&VGA_PIO->sm[sm].addr & 0x1f;
20002126:	781c      	ldrb	r4, [r3, #0]
				if (a <= CurLayerProg.maxidle+LAYER_OFFSET) break;
20002128:	4034      	ands	r4, r6
2000212a:	42a7      	cmp	r7, r4
2000212c:	d3f5      	bcc.n	2000211a <_Z13VgaBufProcessv+0x13e>
2000212e:	464b      	mov	r3, r9
20002130:	2701      	movs	r7, #1
20002132:	005c      	lsls	r4, r3, #1
20002134:	4650      	mov	r0, sl
			dma_channel_abort(VGA_DMA_PIO(layer));
20002136:	46a2      	mov	sl, r4
20002138:	3401      	adds	r4, #1
2000213a:	40a7      	lsls	r7, r4
2000213c:	508f      	str	r7, [r1, r2]
    while (dma_hw->abort & (1ul << channel)) tight_loop_contents();
2000213e:	588c      	ldr	r4, [r1, r2]
20002140:	423c      	tst	r4, r7
20002142:	d1fc      	bne.n	2000213e <_Z13VgaBufProcessv+0x162>
    dma_hw->abort = 1u << channel;
20002144:	2401      	movs	r4, #1
20002146:	4656      	mov	r6, sl
20002148:	40b4      	lsls	r4, r6
2000214a:	4699      	mov	r9, r3
2000214c:	508c      	str	r4, [r1, r2]
    while (dma_hw->abort & (1ul << channel)) tight_loop_contents();
2000214e:	588b      	ldr	r3, [r1, r2]
20002150:	4223      	tst	r3, r4
20002152:	d1fc      	bne.n	2000214e <_Z13VgaBufProcessv+0x172>
    dma_hw->abort = 1u << channel;
20002154:	003b      	movs	r3, r7
20002156:	508f      	str	r7, [r1, r2]
    while (dma_hw->abort & (1ul << channel)) tight_loop_contents();
20002158:	588f      	ldr	r7, [r1, r2]
2000215a:	423b      	tst	r3, r7
2000215c:	d1fc      	bne.n	20002158 <_Z13VgaBufProcessv+0x17c>
    dma_hw->abort = 1u << channel;
2000215e:	464b      	mov	r3, r9
20002160:	508c      	str	r4, [r1, r2]
    while (dma_hw->abort & (1ul << channel)) tight_loop_contents();
20002162:	588f      	ldr	r7, [r1, r2]
20002164:	423c      	tst	r4, r7
20002166:	d1fc      	bne.n	20002162 <_Z13VgaBufProcessv+0x186>
20002168:	2701      	movs	r7, #1
2000216a:	4664      	mov	r4, ip
2000216c:	409f      	lsls	r7, r3
2000216e:	4666      	mov	r6, ip
20002170:	6824      	ldr	r4, [r4, #0]
    pio->sm[sm].instr = instr;
20002172:	449a      	add	sl, r3
    pio->ctrl = (pio->ctrl & ~(1u << sm)) | (!!enabled << sm);
20002174:	43bc      	bics	r4, r7
20002176:	6034      	str	r4, [r6, #0]
20002178:	2480      	movs	r4, #128	; 0x80
2000217a:	2680      	movs	r6, #128	; 0x80
2000217c:	0164      	lsls	r4, r4, #5
2000217e:	432c      	orrs	r4, r5
20002180:	0636      	lsls	r6, r6, #24
20002182:	6026      	str	r6, [r4, #0]
20002184:	6026      	str	r6, [r4, #0]
    pio->ctrl |= 1u << (PIO_CTRL_SM_RESTART_LSB + sm);
20002186:	4664      	mov	r4, ip
20002188:	2601      	movs	r6, #1
2000218a:	6824      	ldr	r4, [r4, #0]
2000218c:	46a1      	mov	r9, r4
2000218e:	1d1c      	adds	r4, r3, #4
20002190:	40a6      	lsls	r6, r4
20002192:	0034      	movs	r4, r6
20002194:	464e      	mov	r6, r9
20002196:	4334      	orrs	r4, r6
20002198:	4666      	mov	r6, ip
2000219a:	6034      	str	r4, [r6, #0]
2000219c:	261f      	movs	r6, #31
2000219e:	4c1f      	ldr	r4, [pc, #124]	; (2000221c <_Z13VgaBufProcessv+0x240>)
200021a0:	7ae4      	ldrb	r4, [r4, #11]
200021a2:	4034      	ands	r4, r6
200021a4:	0026      	movs	r6, r4
    pio->sm[sm].instr = instr;
200021a6:	4654      	mov	r4, sl
200021a8:	00e4      	lsls	r4, r4, #3
200021aa:	46a2      	mov	sl, r4
200021ac:	4c1c      	ldr	r4, [pc, #112]	; (20002220 <_Z13VgaBufProcessv+0x244>)
200021ae:	46a1      	mov	r9, r4
200021b0:	44ca      	add	sl, r9
200021b2:	4654      	mov	r4, sl
200021b4:	6026      	str	r6, [r4, #0]
    pio->ctrl = (pio->ctrl & ~(1u << sm)) | (!!enabled << sm);
200021b6:	4664      	mov	r4, ip
200021b8:	6824      	ldr	r4, [r4, #0]
200021ba:	261f      	movs	r6, #31
200021bc:	43bc      	bics	r4, r7
200021be:	4327      	orrs	r7, r4
200021c0:	4664      	mov	r4, ip
200021c2:	6027      	str	r7, [r4, #0]
200021c4:	4c15      	ldr	r4, [pc, #84]	; (2000221c <_Z13VgaBufProcessv+0x240>)
200021c6:	7b24      	ldrb	r4, [r4, #12]
200021c8:	4034      	ands	r4, r6
    pio->sm[sm].instr = instr;
200021ca:	4656      	mov	r6, sl
200021cc:	6034      	str	r4, [r6, #0]
    return &dma_hw->ch[channel];
200021ce:	26a0      	movs	r6, #160	; 0xa0
200021d0:	05f6      	lsls	r6, r6, #23
200021d2:	46b1      	mov	r9, r6
200021d4:	01dc      	lsls	r4, r3, #7
        dma_channel_hw_addr(channel)->al3_read_addr_trig = (uintptr_t) read_addr;
200021d6:	9e01      	ldr	r6, [sp, #4]
200021d8:	444c      	add	r4, r9
200021da:	63e6      	str	r6, [r4, #60]	; 0x3c
200021dc:	e75d      	b.n	2000209a <_Z13VgaBufProcessv+0xbe>
200021de:	46c0      	nop			; (mov r8, r8)
200021e0:	0000040c 	.word	0x0000040c
200021e4:	2003516c 	.word	0x2003516c
200021e8:	20036710 	.word	0x20036710
200021ec:	20036668 	.word	0x20036668
200021f0:	200388d8 	.word	0x200388d8
200021f4:	200366b4 	.word	0x200366b4
200021f8:	20036720 	.word	0x20036720
200021fc:	200388dc 	.word	0x200388dc
20002200:	10004c10 	.word	0x10004c10
20002204:	200394dc 	.word	0x200394dc
20002208:	50200000 	.word	0x50200000
2000220c:	40054000 	.word	0x40054000
20002210:	20036764 	.word	0x20036764
20002214:	502000e8 	.word	0x502000e8
20002218:	00000444 	.word	0x00000444
2000221c:	20036684 	.word	0x20036684
20002220:	502000d8 	.word	0x502000d8

20002224 <_Z12VgaBufRenderPmS_Phi>:
{
20002224:	b5f0      	push	{r4, r5, r6, r7, lr}
20002226:	46de      	mov	lr, fp
20002228:	4657      	mov	r7, sl
2000222a:	464e      	mov	r6, r9
2000222c:	4645      	mov	r5, r8
2000222e:	4699      	mov	r9, r3
	*cbuf++ = 4; // send 4x u32
20002230:	2304      	movs	r3, #4
{
20002232:	0004      	movs	r4, r0
20002234:	4693      	mov	fp, r2
20002236:	b5e0      	push	{r5, r6, r7, lr}
	*cbuf++ = 4; // send 4x u32
20002238:	6003      	str	r3, [r0, #0]
	*cbuf++ = (u32)LineBufHsBp; // HSYNC + back porch
2000223a:	4b8b      	ldr	r3, [pc, #556]	; (20002468 <_Z12VgaBufRenderPmS_Phi+0x244>)
{
2000223c:	000e      	movs	r6, r1
	*cbuf++ = (u32)LineBufHsBp; // HSYNC + back porch
2000223e:	6063      	str	r3, [r4, #4]
	cbuf = Render(cbuf, dbuf, y0, CurVmode.width);
20002240:	4b8a      	ldr	r3, [pc, #552]	; (2000246c <_Z12VgaBufRenderPmS_Phi+0x248>)
20002242:	464a      	mov	r2, r9
20002244:	881b      	ldrh	r3, [r3, #0]
{
20002246:	b085      	sub	sp, #20
	cbuf = Render(cbuf, dbuf, y0, CurVmode.width);
20002248:	4659      	mov	r1, fp
	*cbuf++ = (u32)LineBufHsBp; // HSYNC + back porch
2000224a:	3008      	adds	r0, #8
	cbuf = Render(cbuf, dbuf, y0, CurVmode.width);
2000224c:	f7ff fd36 	bl	20001cbc <Render>
	*cbuf++ = 1; // send 1x u32
20002250:	2301      	movs	r3, #1
20002252:	6003      	str	r3, [r0, #0]
	*cbuf++ = (u32)&LineBufFp; // front porch
20002254:	3307      	adds	r3, #7
20002256:	469c      	mov	ip, r3
20002258:	4484      	add	ip, r0
2000225a:	4663      	mov	r3, ip
2000225c:	9300      	str	r3, [sp, #0]
2000225e:	4b84      	ldr	r3, [pc, #528]	; (20002470 <_Z12VgaBufRenderPmS_Phi+0x24c>)
20002260:	4c84      	ldr	r4, [pc, #528]	; (20002474 <_Z12VgaBufRenderPmS_Phi+0x250>)
20002262:	6043      	str	r3, [r0, #4]
	for (layer = 1; layer < LAYERS; layer++)
20002264:	4b84      	ldr	r3, [pc, #528]	; (20002478 <_Z12VgaBufRenderPmS_Phi+0x254>)
20002266:	4f85      	ldr	r7, [pc, #532]	; (2000247c <_Z12VgaBufRenderPmS_Phi+0x258>)
20002268:	4698      	mov	r8, r3
2000226a:	4b85      	ldr	r3, [pc, #532]	; (20002480 <_Z12VgaBufRenderPmS_Phi+0x25c>)
2000226c:	4d85      	ldr	r5, [pc, #532]	; (20002484 <_Z12VgaBufRenderPmS_Phi+0x260>)
2000226e:	469a      	mov	sl, r3
		switch(mode)
20002270:	464b      	mov	r3, r9
20002272:	46b1      	mov	r9, r6
20002274:	4656      	mov	r6, sl
20002276:	469a      	mov	sl, r3
		cbuf0 += CtrlBufSize[layer-1];
20002278:	6823      	ldr	r3, [r4, #0]
2000227a:	009b      	lsls	r3, r3, #2
2000227c:	4499      	add	r9, r3
		dbuf += LineBufSize[layer-1];
2000227e:	4643      	mov	r3, r8
20002280:	681b      	ldr	r3, [r3, #0]
20002282:	469c      	mov	ip, r3
		CtrlBufNext[layer] = NULL;
20002284:	2300      	movs	r3, #0
20002286:	607b      	str	r3, [r7, #4]
		int mode = LayerModeInx[layer];
20002288:	7873      	ldrb	r3, [r6, #1]
		dbuf += LineBufSize[layer-1];
2000228a:	44e3      	add	fp, ip
		if (mode == LAYERMODE_BASE) continue;
2000228c:	2b00      	cmp	r3, #0
2000228e:	d038      	beq.n	20002302 <_Z12VgaBufRenderPmS_Phi+0xde>
		if (!s->on || (s->w <= 0) || (y0 < s->y) || (y0 >= s->y + s->h)) continue;
20002290:	2222      	movs	r2, #34	; 0x22
20002292:	5caa      	ldrb	r2, [r5, r2]
20002294:	2a00      	cmp	r2, #0
20002296:	d034      	beq.n	20002302 <_Z12VgaBufRenderPmS_Phi+0xde>
20002298:	8aea      	ldrh	r2, [r5, #22]
2000229a:	2a00      	cmp	r2, #0
2000229c:	d031      	beq.n	20002302 <_Z12VgaBufRenderPmS_Phi+0xde>
2000229e:	2114      	movs	r1, #20
200022a0:	5e6a      	ldrsh	r2, [r5, r1]
200022a2:	4552      	cmp	r2, sl
200022a4:	dc2d      	bgt.n	20002302 <_Z12VgaBufRenderPmS_Phi+0xde>
200022a6:	8b29      	ldrh	r1, [r5, #24]
200022a8:	1889      	adds	r1, r1, r2
200022aa:	4551      	cmp	r1, sl
200022ac:	dd29      	ble.n	20002302 <_Z12VgaBufRenderPmS_Phi+0xde>
		int y = y0 - s->y;
200022ae:	4651      	mov	r1, sl
200022b0:	1a8a      	subs	r2, r1, r2
200022b2:	9203      	str	r2, [sp, #12]
		CtrlBufNext[layer] = cbuf2;
200022b4:	464a      	mov	r2, r9
		*cbuf2++ = 1;
200022b6:	4649      	mov	r1, r9
		CtrlBufNext[layer] = cbuf2;
200022b8:	607a      	str	r2, [r7, #4]
		*cbuf2++ = 1;
200022ba:	2201      	movs	r2, #1
200022bc:	600a      	str	r2, [r1, #0]
		*cbuf2++ = (u32)dbuf2;
200022be:	4659      	mov	r1, fp
200022c0:	464a      	mov	r2, r9
200022c2:	6051      	str	r1, [r2, #4]
		*(u32*)dbuf2 = BYTESWAP(s->init);
200022c4:	68aa      	ldr	r2, [r5, #8]
		switch(mode)
200022c6:	3b06      	subs	r3, #6
200022c8:	ba12      	rev	r2, r2
		*(u32*)dbuf2 = BYTESWAP(s->init);
200022ca:	c104      	stmia	r1!, {r2}
		switch(mode)
200022cc:	b2db      	uxtb	r3, r3
		*(u32*)dbuf2 = BYTESWAP(s->init);
200022ce:	9101      	str	r1, [sp, #4]
		switch(mode)
200022d0:	2b0c      	cmp	r3, #12
200022d2:	d900      	bls.n	200022d6 <_Z12VgaBufRenderPmS_Phi+0xb2>
200022d4:	e094      	b.n	20002400 <_Z12VgaBufRenderPmS_Phi+0x1dc>
200022d6:	4a6c      	ldr	r2, [pc, #432]	; (20002488 <_Z12VgaBufRenderPmS_Phi+0x264>)
200022d8:	009b      	lsls	r3, r3, #2
200022da:	58d3      	ldr	r3, [r2, r3]
200022dc:	469f      	mov	pc, r3
				MemSet4((u32*)dbuf2, s->keycol, s->w/4);
200022de:	8aea      	ldrh	r2, [r5, #22]
200022e0:	68e9      	ldr	r1, [r5, #12]
200022e2:	0892      	lsrs	r2, r2, #2
200022e4:	9801      	ldr	r0, [sp, #4]
200022e6:	f7fe f813 	bl	20000310 <MemSet4>
				cbuf2 = RenderFastSprite(cbuf2, y, s, dbuf2);
200022ea:	4648      	mov	r0, r9
200022ec:	002a      	movs	r2, r5
200022ee:	9b01      	ldr	r3, [sp, #4]
200022f0:	9903      	ldr	r1, [sp, #12]
200022f2:	3008      	adds	r0, #8
200022f4:	f7fe f984 	bl	20000600 <RenderFastSprite>
200022f8:	9002      	str	r0, [sp, #8]
		*cbuf2++ = 0; // end mark
200022fa:	2200      	movs	r2, #0
200022fc:	9b02      	ldr	r3, [sp, #8]
200022fe:	601a      	str	r2, [r3, #0]
		*cbuf2++ = 0; // end mark
20002300:	605a      	str	r2, [r3, #4]
	for (layer = 1; layer < LAYERS; layer++)
20002302:	2304      	movs	r3, #4
20002304:	469c      	mov	ip, r3
20002306:	4b61      	ldr	r3, [pc, #388]	; (2000248c <_Z12VgaBufRenderPmS_Phi+0x268>)
20002308:	3404      	adds	r4, #4
2000230a:	44e0      	add	r8, ip
2000230c:	3704      	adds	r7, #4
2000230e:	3601      	adds	r6, #1
20002310:	3524      	adds	r5, #36	; 0x24
20002312:	42a3      	cmp	r3, r4
20002314:	d1b0      	bne.n	20002278 <_Z12VgaBufRenderPmS_Phi+0x54>
}
20002316:	9800      	ldr	r0, [sp, #0]
20002318:	b005      	add	sp, #20
2000231a:	bcf0      	pop	{r4, r5, r6, r7}
2000231c:	46bb      	mov	fp, r7
2000231e:	46b2      	mov	sl, r6
20002320:	46a9      	mov	r9, r5
20002322:	46a0      	mov	r8, r4
20002324:	bdf0      	pop	{r4, r5, r6, r7, pc}
				int x = s->x; // destination coordinate X
20002326:	2112      	movs	r1, #18
20002328:	5e6b      	ldrsh	r3, [r5, r1]
				int w = s->w; // destination width
2000232a:	8aea      	ldrh	r2, [r5, #22]
				if (x < 0)
2000232c:	2b00      	cmp	r3, #0
2000232e:	da00      	bge.n	20002332 <_Z12VgaBufRenderPmS_Phi+0x10e>
20002330:	e07d      	b.n	2000242e <_Z12VgaBufRenderPmS_Phi+0x20a>
					if (x + w > CurVmode.width)
20002332:	494e      	ldr	r1, [pc, #312]	; (2000246c <_Z12VgaBufRenderPmS_Phi+0x248>)
20002334:	18d0      	adds	r0, r2, r3
20002336:	8809      	ldrh	r1, [r1, #0]
20002338:	468c      	mov	ip, r1
					x = 0;
2000233a:	2100      	movs	r1, #0
					if (x + w > CurVmode.width)
2000233c:	4560      	cmp	r0, ip
2000233e:	dd01      	ble.n	20002344 <_Z12VgaBufRenderPmS_Phi+0x120>
						w = CurVmode.width - x; // limit W
20002340:	4662      	mov	r2, ip
20002342:	1ad2      	subs	r2, r2, r3
				w = ALIGN4(w);
20002344:	2303      	movs	r3, #3
20002346:	0010      	movs	r0, r2
20002348:	4398      	bics	r0, r3
				if (w <= 0)
2000234a:	2800      	cmp	r0, #0
2000234c:	dd36      	ble.n	200023bc <_Z12VgaBufRenderPmS_Phi+0x198>
					*cbuf2++ = w/4;
2000234e:	464b      	mov	r3, r9
20002350:	1092      	asrs	r2, r2, #2
20002352:	609a      	str	r2, [r3, #8]
					*cbuf2++ = (u32)&dbuf2[x];
20002354:	2310      	movs	r3, #16
20002356:	9801      	ldr	r0, [sp, #4]
20002358:	444b      	add	r3, r9
2000235a:	4684      	mov	ip, r0
2000235c:	9302      	str	r3, [sp, #8]
2000235e:	464b      	mov	r3, r9
20002360:	4461      	add	r1, ip
20002362:	60d9      	str	r1, [r3, #12]
					RenderPersp(dbuf2, y, s);
20002364:	002a      	movs	r2, r5
20002366:	9903      	ldr	r1, [sp, #12]
20002368:	f7fe feb2 	bl	200010d0 <RenderPersp>
2000236c:	e7c5      	b.n	200022fa <_Z12VgaBufRenderPmS_Phi+0xd6>
				*cbuf2++ = s->trans;
2000236e:	464a      	mov	r2, r9
20002370:	8a2b      	ldrh	r3, [r5, #16]
20002372:	6093      	str	r3, [r2, #8]
				*cbuf2++ = (u32)dbuf2;
20002374:	2310      	movs	r3, #16
20002376:	444b      	add	r3, r9
20002378:	9302      	str	r3, [sp, #8]
2000237a:	9b01      	ldr	r3, [sp, #4]
2000237c:	60d3      	str	r3, [r2, #12]
				MemSet4((u32*)dbuf2, s->keycol, s->w/4);
2000237e:	8aea      	ldrh	r2, [r5, #22]
20002380:	68e9      	ldr	r1, [r5, #12]
20002382:	0018      	movs	r0, r3
20002384:	0892      	lsrs	r2, r2, #2
20002386:	f7fd ffc3 	bl	20000310 <MemSet4>
				RenderSprite(dbuf2, y, s);
2000238a:	002a      	movs	r2, r5
2000238c:	9903      	ldr	r1, [sp, #12]
2000238e:	9801      	ldr	r0, [sp, #4]
20002390:	f7ff f828 	bl	200013e4 <RenderSprite>
			break;
20002394:	e7b1      	b.n	200022fa <_Z12VgaBufRenderPmS_Phi+0xd6>
				int x = s->x; // destination coordinate X
20002396:	2112      	movs	r1, #18
20002398:	5e6b      	ldrsh	r3, [r5, r1]
				int w = s->w; // destination width
2000239a:	8aea      	ldrh	r2, [r5, #22]
				if (x < 0)
2000239c:	2b00      	cmp	r3, #0
2000239e:	db3a      	blt.n	20002416 <_Z12VgaBufRenderPmS_Phi+0x1f2>
					if (x + w > CurVmode.width)
200023a0:	4932      	ldr	r1, [pc, #200]	; (2000246c <_Z12VgaBufRenderPmS_Phi+0x248>)
200023a2:	18d0      	adds	r0, r2, r3
200023a4:	8809      	ldrh	r1, [r1, #0]
200023a6:	468c      	mov	ip, r1
					x = 0;
200023a8:	2100      	movs	r1, #0
					if (x + w > CurVmode.width)
200023aa:	4560      	cmp	r0, ip
200023ac:	dd01      	ble.n	200023b2 <_Z12VgaBufRenderPmS_Phi+0x18e>
						w = CurVmode.width - x; // limit W
200023ae:	4662      	mov	r2, ip
200023b0:	1ad2      	subs	r2, r2, r3
				w = ALIGN4(w);
200023b2:	2303      	movs	r3, #3
200023b4:	0010      	movs	r0, r2
200023b6:	4398      	bics	r0, r3
				if (w <= 0)
200023b8:	2800      	cmp	r0, #0
200023ba:	dc44      	bgt.n	20002446 <_Z12VgaBufRenderPmS_Phi+0x222>
					*cbuf2++ = 1;
200023bc:	2301      	movs	r3, #1
200023be:	464a      	mov	r2, r9
200023c0:	6093      	str	r3, [r2, #8]
					*cbuf2++ = (u32)dbuf2;
200023c2:	330f      	adds	r3, #15
200023c4:	444b      	add	r3, r9
200023c6:	9302      	str	r3, [sp, #8]
200023c8:	464b      	mov	r3, r9
200023ca:	9a01      	ldr	r2, [sp, #4]
200023cc:	60da      	str	r2, [r3, #12]
					*(u32*)dbuf2 = s->keycol;
200023ce:	465b      	mov	r3, fp
200023d0:	68ea      	ldr	r2, [r5, #12]
200023d2:	605a      	str	r2, [r3, #4]
200023d4:	e791      	b.n	200022fa <_Z12VgaBufRenderPmS_Phi+0xd6>
				int n = row[y+1] - row[y];
200023d6:	9a03      	ldr	r2, [sp, #12]
				u16* row = (u16*)s->par;
200023d8:	6869      	ldr	r1, [r5, #4]
				int n = row[y+1] - row[y];
200023da:	3201      	adds	r2, #1
200023dc:	0052      	lsls	r2, r2, #1
200023de:	188b      	adds	r3, r1, r2
200023e0:	5a8a      	ldrh	r2, [r1, r2]
				*cbuf2++ = n;
200023e2:	4649      	mov	r1, r9
				int n = row[y+1] - row[y];
200023e4:	3b02      	subs	r3, #2
200023e6:	881b      	ldrh	r3, [r3, #0]
200023e8:	1ad2      	subs	r2, r2, r3
				*cbuf2++ = n;
200023ea:	608a      	str	r2, [r1, #8]
				*cbuf2++ = (u32)&s->img[row[y]*4];
200023ec:	2210      	movs	r2, #16
200023ee:	444a      	add	r2, r9
200023f0:	9202      	str	r2, [sp, #8]
200023f2:	009b      	lsls	r3, r3, #2
				*cbuf2++ = (u32)&s->img[y*s->wb];
200023f4:	682a      	ldr	r2, [r5, #0]
200023f6:	4694      	mov	ip, r2
200023f8:	464a      	mov	r2, r9
200023fa:	4463      	add	r3, ip
200023fc:	60d3      	str	r3, [r2, #12]
			break;
200023fe:	e77c      	b.n	200022fa <_Z12VgaBufRenderPmS_Phi+0xd6>
				*cbuf2++ = s->trans;
20002400:	464a      	mov	r2, r9
20002402:	8a2b      	ldrh	r3, [r5, #16]
20002404:	6093      	str	r3, [r2, #8]
				*cbuf2++ = (u32)&s->img[y*s->wb];
20002406:	2310      	movs	r3, #16
20002408:	444b      	add	r3, r9
2000240a:	9a03      	ldr	r2, [sp, #12]
2000240c:	9302      	str	r3, [sp, #8]
2000240e:	8b6b      	ldrh	r3, [r5, #26]
20002410:	435a      	muls	r2, r3
20002412:	0013      	movs	r3, r2
20002414:	e7ee      	b.n	200023f4 <_Z12VgaBufRenderPmS_Phi+0x1d0>
					x = ALIGN4(x+4098) - 4096; // round X to 4-pixels
20002416:	491e      	ldr	r1, [pc, #120]	; (20002490 <_Z12VgaBufRenderPmS_Phi+0x26c>)
20002418:	468c      	mov	ip, r1
2000241a:	2103      	movs	r1, #3
2000241c:	4463      	add	r3, ip
2000241e:	438b      	bics	r3, r1
20002420:	491c      	ldr	r1, [pc, #112]	; (20002494 <_Z12VgaBufRenderPmS_Phi+0x270>)
20002422:	1859      	adds	r1, r3, r1
					w += x;	// decrease W
20002424:	1852      	adds	r2, r2, r1
					x = -x; // start offset of X
20002426:	2180      	movs	r1, #128	; 0x80
20002428:	0149      	lsls	r1, r1, #5
2000242a:	1ac9      	subs	r1, r1, r3
2000242c:	e7c1      	b.n	200023b2 <_Z12VgaBufRenderPmS_Phi+0x18e>
					x = ALIGN4(x+4098) - 4096; // round X to 4-pixels
2000242e:	4918      	ldr	r1, [pc, #96]	; (20002490 <_Z12VgaBufRenderPmS_Phi+0x26c>)
20002430:	468c      	mov	ip, r1
20002432:	2103      	movs	r1, #3
20002434:	4463      	add	r3, ip
20002436:	438b      	bics	r3, r1
20002438:	4916      	ldr	r1, [pc, #88]	; (20002494 <_Z12VgaBufRenderPmS_Phi+0x270>)
2000243a:	1859      	adds	r1, r3, r1
					w += x;	// decrease W
2000243c:	1852      	adds	r2, r2, r1
					x = -x; // start offset of X
2000243e:	2180      	movs	r1, #128	; 0x80
20002440:	0149      	lsls	r1, r1, #5
20002442:	1ac9      	subs	r1, r1, r3
20002444:	e77e      	b.n	20002344 <_Z12VgaBufRenderPmS_Phi+0x120>
					*cbuf2++ = w/4;
20002446:	464b      	mov	r3, r9
20002448:	1092      	asrs	r2, r2, #2
2000244a:	609a      	str	r2, [r3, #8]
					*cbuf2++ = (u32)&dbuf2[x];
2000244c:	2310      	movs	r3, #16
2000244e:	9801      	ldr	r0, [sp, #4]
20002450:	444b      	add	r3, r9
20002452:	4684      	mov	ip, r0
20002454:	9302      	str	r3, [sp, #8]
20002456:	464b      	mov	r3, r9
20002458:	4461      	add	r1, ip
2000245a:	60d9      	str	r1, [r3, #12]
					RenderPersp2(dbuf2, y, s);
2000245c:	002a      	movs	r2, r5
2000245e:	9903      	ldr	r1, [sp, #12]
20002460:	f7fe fec0 	bl	200011e4 <RenderPersp2>
20002464:	e749      	b.n	200022fa <_Z12VgaBufRenderPmS_Phi+0xd6>
20002466:	46c0      	nop			; (mov r8, r8)
20002468:	20037e88 	.word	0x20037e88
2000246c:	200366b4 	.word	0x200366b4
20002470:	20037e84 	.word	0x20037e84
20002474:	2000265c 	.word	0x2000265c
20002478:	2000266c 	.word	0x2000266c
2000247c:	20036668 	.word	0x20036668
20002480:	20036728 	.word	0x20036728
20002484:	20036750 	.word	0x20036750
20002488:	10004c24 	.word	0x10004c24
2000248c:	20002668 	.word	0x20002668
20002490:	00001002 	.word	0x00001002
20002494:	fffff000 	.word	0xfffff000

20002498 <VgaLine>:
{
20002498:	b570      	push	{r4, r5, r6, lr}
	int bufinx = VgaBufProcess();
2000249a:	f7ff fd9f 	bl	20001fdc <_Z13VgaBufProcessv>
	if (bufinx == 0)
2000249e:	2800      	cmp	r0, #0
200024a0:	d013      	beq.n	200024ca <VgaLine+0x32>
		cbuf = CtrlBuf2;
200024a2:	4838      	ldr	r0, [pc, #224]	; (20002584 <VgaLine+0xec>)
		dbuf = LineBuf2;
200024a4:	4a38      	ldr	r2, [pc, #224]	; (20002588 <VgaLine+0xf0>)
	CtrlBufNext[0] = cbuf;
200024a6:	4b39      	ldr	r3, [pc, #228]	; (2000258c <VgaLine+0xf4>)
	if (line > CurVmode.vtot) line = 1;
200024a8:	4d39      	ldr	r5, [pc, #228]	; (20002590 <VgaLine+0xf8>)
	CtrlBufNext[0] = cbuf;
200024aa:	6018      	str	r0, [r3, #0]
	int line = ScanLine;	// current scanline
200024ac:	4b39      	ldr	r3, [pc, #228]	; (20002594 <VgaLine+0xfc>)
	if (line > CurVmode.vtot) line = 1;
200024ae:	8da9      	ldrh	r1, [r5, #44]	; 0x2c
	int line = ScanLine;	// current scanline
200024b0:	681b      	ldr	r3, [r3, #0]
	line++; // next line to render
200024b2:	3301      	adds	r3, #1
	if (line > CurVmode.vtot) line = 1;
200024b4:	4299      	cmp	r1, r3
200024b6:	da00      	bge.n	200024ba <VgaLine+0x22>
200024b8:	2301      	movs	r3, #1
	u8 linetype = ScanlineType[line];
200024ba:	4937      	ldr	r1, [pc, #220]	; (20002598 <VgaLine+0x100>)
	switch (linetype)
200024bc:	5ccc      	ldrb	r4, [r1, r3]
200024be:	2c0a      	cmp	r4, #10
200024c0:	d85e      	bhi.n	20002580 <VgaLine+0xe8>
200024c2:	4936      	ldr	r1, [pc, #216]	; (2000259c <VgaLine+0x104>)
200024c4:	00a4      	lsls	r4, r4, #2
200024c6:	5909      	ldr	r1, [r1, r4]
200024c8:	468f      	mov	pc, r1
		cbuf = CtrlBuf1;
200024ca:	4835      	ldr	r0, [pc, #212]	; (200025a0 <VgaLine+0x108>)
		dbuf = LineBuf1;
200024cc:	4a35      	ldr	r2, [pc, #212]	; (200025a4 <VgaLine+0x10c>)
200024ce:	e7ea      	b.n	200024a6 <VgaLine+0xe>
		y0 = line - CurVmode.vfirst1;
200024d0:	2140      	movs	r1, #64	; 0x40
		y0 = line - CurVmode.vfirst2;
200024d2:	5a69      	ldrh	r1, [r5, r1]
200024d4:	1a5b      	subs	r3, r3, r1
		if (CurVmode.dbly) y0 >>= 1;
200024d6:	2155      	movs	r1, #85	; 0x55
200024d8:	5c69      	ldrb	r1, [r5, r1]
200024da:	2900      	cmp	r1, #0
200024dc:	d000      	beq.n	200024e0 <VgaLine+0x48>
200024de:	105b      	asrs	r3, r3, #1
		y0 = (y0 << 1) + 1;
200024e0:	005b      	lsls	r3, r3, #1
200024e2:	3301      	adds	r3, #1
		cbuf = VgaBufRender(cbuf, cbuf0, dbuf, y0);
200024e4:	0001      	movs	r1, r0
200024e6:	f7ff fe9d 	bl	20002224 <_Z12VgaBufRenderPmS_Phi>
200024ea:	0003      	movs	r3, r0
	*cbuf++ = 0; // end mark
200024ec:	2200      	movs	r2, #0
	hw_divider_restore_state(&DividerState);
200024ee:	482e      	ldr	r0, [pc, #184]	; (200025a8 <VgaLine+0x110>)
	*cbuf++ = 0; // end mark
200024f0:	601a      	str	r2, [r3, #0]
	*cbuf++ = 0; // end mark
200024f2:	605a      	str	r2, [r3, #4]
	hw_divider_restore_state(&DividerState);
200024f4:	f000 f868 	bl	200025c8 <__hw_divider_restore_state_veneer>
}
200024f8:	bd70      	pop	{r4, r5, r6, pc}
		y0 = line - CurVmode.vfirst2;
200024fa:	214e      	movs	r1, #78	; 0x4e
200024fc:	e7e9      	b.n	200024d2 <VgaLine+0x3a>
		*cbuf++ = 2; // send 2x u32
200024fe:	2302      	movs	r3, #2
		*cbuf++ = 4;	// send 4x u32
20002500:	6003      	str	r3, [r0, #0]
		*cbuf++ = (u32)&LineBufSync[0]; // half + half
20002502:	0003      	movs	r3, r0
20002504:	4a29      	ldr	r2, [pc, #164]	; (200025ac <VgaLine+0x114>)
20002506:	3308      	adds	r3, #8
20002508:	6042      	str	r2, [r0, #4]
		break;
2000250a:	e7ef      	b.n	200024ec <VgaLine+0x54>
		*cbuf++ = 4;	// send 4x u32
2000250c:	2304      	movs	r3, #4
2000250e:	6003      	str	r3, [r0, #0]
		*cbuf++ = (u32)&LineBufSync[4]; // VSYNC
20002510:	0003      	movs	r3, r0
20002512:	4a26      	ldr	r2, [pc, #152]	; (200025ac <VgaLine+0x114>)
20002514:	3308      	adds	r3, #8
20002516:	3210      	adds	r2, #16
20002518:	6042      	str	r2, [r0, #4]
		break;
2000251a:	e7e7      	b.n	200024ec <VgaLine+0x54>
		*cbuf++ = 4;	// send 4x u32
2000251c:	2304      	movs	r3, #4
2000251e:	6003      	str	r3, [r0, #0]
		*cbuf++ = (u32)&LineBufSync[6]; // VSYNC + half
20002520:	0003      	movs	r3, r0
20002522:	4a22      	ldr	r2, [pc, #136]	; (200025ac <VgaLine+0x114>)
20002524:	3308      	adds	r3, #8
20002526:	3218      	adds	r2, #24
20002528:	6042      	str	r2, [r0, #4]
		break;
2000252a:	e7df      	b.n	200024ec <VgaLine+0x54>
		*cbuf++ = 4;	// send 4x u32
2000252c:	2304      	movs	r3, #4
2000252e:	e7e7      	b.n	20002500 <VgaLine+0x68>
		*cbuf++ = 4;	// send 4x u32
20002530:	2304      	movs	r3, #4
20002532:	6003      	str	r3, [r0, #0]
		*cbuf++ = (u32)&LineBufSync[2]; // half + VSYNC
20002534:	0003      	movs	r3, r0
20002536:	4a1d      	ldr	r2, [pc, #116]	; (200025ac <VgaLine+0x114>)
20002538:	3308      	adds	r3, #8
2000253a:	3208      	adds	r2, #8
2000253c:	6042      	str	r2, [r0, #4]
		break;
2000253e:	e7d5      	b.n	200024ec <VgaLine+0x54>
		*cbuf++ = 2; // send 2x u32
20002540:	2302      	movs	r3, #2
20002542:	6003      	str	r3, [r0, #0]
		*cbuf++ = (u32)LineBufDark; // dark
20002544:	0003      	movs	r3, r0
20002546:	4a1a      	ldr	r2, [pc, #104]	; (200025b0 <VgaLine+0x118>)
20002548:	3308      	adds	r3, #8
2000254a:	6042      	str	r2, [r0, #4]
		break;
2000254c:	e7ce      	b.n	200024ec <VgaLine+0x54>
		y0 = line - CurVmode.vfirst1;
2000254e:	2140      	movs	r1, #64	; 0x40
20002550:	5a69      	ldrh	r1, [r5, r1]
20002552:	1a5b      	subs	r3, r3, r1
		if (CurVmode.dbly) y0 >>= 1;
20002554:	2155      	movs	r1, #85	; 0x55
20002556:	5c69      	ldrb	r1, [r5, r1]
20002558:	2900      	cmp	r1, #0
2000255a:	d0c3      	beq.n	200024e4 <VgaLine+0x4c>
2000255c:	105b      	asrs	r3, r3, #1
		cbuf = VgaBufRender(cbuf, cbuf0, dbuf, y0);
2000255e:	e7c1      	b.n	200024e4 <VgaLine+0x4c>
		y0 = line - CurVmode.vfirst1;
20002560:	2140      	movs	r1, #64	; 0x40
		y0 = line - CurVmode.vfirst2;
20002562:	5a69      	ldrh	r1, [r5, r1]
20002564:	1a5b      	subs	r3, r3, r1
		if (CurVmode.dbly) y0 >>= 1;
20002566:	2155      	movs	r1, #85	; 0x55
20002568:	5c69      	ldrb	r1, [r5, r1]
2000256a:	2900      	cmp	r1, #0
2000256c:	d000      	beq.n	20002570 <VgaLine+0xd8>
2000256e:	105b      	asrs	r3, r3, #1
		y0 <<= 1;
20002570:	005b      	lsls	r3, r3, #1
		cbuf = VgaBufRender(cbuf, cbuf0, dbuf, y0);
20002572:	0001      	movs	r1, r0
20002574:	f7ff fe56 	bl	20002224 <_Z12VgaBufRenderPmS_Phi>
20002578:	0003      	movs	r3, r0
		break;
2000257a:	e7b7      	b.n	200024ec <VgaLine+0x54>
		y0 = line - CurVmode.vfirst2;
2000257c:	214e      	movs	r1, #78	; 0x4e
2000257e:	e7f0      	b.n	20002562 <VgaLine+0xca>
	switch (linetype)
20002580:	0003      	movs	r3, r0
20002582:	e7b3      	b.n	200024ec <VgaLine+0x54>
20002584:	20035c08 	.word	0x20035c08
20002588:	2003745c 	.word	0x2003745c
2000258c:	20036668 	.word	0x20036668
20002590:	200366b4 	.word	0x200366b4
20002594:	200388d8 	.word	0x200388d8
20002598:	200388dc 	.word	0x200388dc
2000259c:	10004c58 	.word	0x10004c58
200025a0:	200351a8 	.word	0x200351a8
200025a4:	20036a3c 	.word	0x20036a3c
200025a8:	20036710 	.word	0x20036710
200025ac:	20037e98 	.word	0x20037e98
200025b0:	20037e7c 	.word	0x20037e7c

200025b4 <__aeabi_idiv0>:
200025b4:	4770      	bx	lr
200025b6:	46c0      	nop			; (mov r8, r8)

200025b8 <__hw_divider_save_state_veneer>:
200025b8:	b401      	push	{r0}
200025ba:	4802      	ldr	r0, [pc, #8]	; (200025c4 <__hw_divider_save_state_veneer+0xc>)
200025bc:	4684      	mov	ip, r0
200025be:	bc01      	pop	{r0}
200025c0:	4760      	bx	ip
200025c2:	bf00      	nop
200025c4:	100007f9 	.word	0x100007f9

200025c8 <__hw_divider_restore_state_veneer>:
200025c8:	b401      	push	{r0}
200025ca:	4802      	ldr	r0, [pc, #8]	; (200025d4 <__hw_divider_restore_state_veneer+0xc>)
200025cc:	4684      	mov	ip, r0
200025ce:	bc01      	pop	{r0}
200025d0:	4760      	bx	ip
200025d2:	bf00      	nop
200025d4:	10000815 	.word	0x10000815

200025d8 <__rom_func_lookup_veneer>:
200025d8:	b401      	push	{r0}
200025da:	4802      	ldr	r0, [pc, #8]	; (200025e4 <__rom_func_lookup_veneer+0xc>)
200025dc:	4684      	mov	ip, r0
200025de:	bc01      	pop	{r0}
200025e0:	4760      	bx	ip
200025e2:	bf00      	nop
200025e4:	100009a5 	.word	0x100009a5
	...

200025f0 <aeabi_bits_funcs>:
200025f0:	00003350 	.word	0x00003350
200025f4:	0000334c 	.word	0x0000334c
200025f8:	00003354 	.word	0x00003354
200025fc:	00003352 	.word	0x00003352

20002600 <aeabi_bits_funcs_end>:
20002600:	00000000 	.word	0x00000000
20002604:	00010000 	.word	0x00010000
	...
20002610:	00020000 	.word	0x00020000
	...
2000261c:	00030000 	.word	0x00030000
	...
20002628:	00ff0000 	.word	0x00ff0000
2000262c:	00000000 	.word	0x00000000

20002630 <irq_handler_chain_first_slot>:
20002630:	b500      	push	{lr}
20002632:	6848      	ldr	r0, [r1, #4]
20002634:	3101      	adds	r1, #1
20002636:	468e      	mov	lr, r1
20002638:	4700      	bx	r0

2000263a <irq_handler_chain_remove_tail>:
2000263a:	4670      	mov	r0, lr
2000263c:	3809      	subs	r0, #9
2000263e:	4901      	ldr	r1, [pc, #4]	; (20002644 <irq_handler_chain_remove_tail+0xa>)
20002640:	4788      	blx	r1
20002642:	bd00      	pop	{pc}
20002644:	10001251 	.word	0x10001251

20002648 <aeabi_mem_funcs>:
20002648:	0000534d 	.word	0x0000534d
2000264c:	0000434d 	.word	0x0000434d
20002650:	00003453 	.word	0x00003453
20002654:	00003443 	.word	0x00003443

20002658 <striped_spin_lock_num>:
20002658:	00000010                                ....

2000265c <CtrlBufSize>:
2000265c:	000000a6 000000a6 000000a6 000000a6     ................

2000266c <LineBufSize>:
2000266c:	00000288 00000288 00000288 00000288     ................

2000267c <LayerNumPin>:
2000267c:	08080808                                ....

20002680 <DefPal16>:
20002680:	16140200 b6a8a2a0 5f5d4b49 fffdebe9     ........IK]_....

20002690 <pScreen>:
20002690:	20038b98                                ... 

20002694 <VideoResTab>:
20002694:	100050cc 100050cc 100050cc 10005094     .P...P...P...P..
200026a4:	10005094 10005094 10005094 10005094     .P...P...P...P..
200026b4:	1000505c 1000505c 1000505c 10005024     \P..\P..\P..$P..
200026c4:	10005024 10005024 10005024 10005024     $P..$P..$P..$P..
200026d4:	10004fb4 1000513c 1000513c 10004fb4     .O..<Q..<Q...O..
200026e4:	1000513c 10005104 10005174 10004fec     <Q...Q..tQ...O..

200026f4 <_impure_ptr>:
200026f4:	200026f8                                .&. 

200026f8 <impure_data>:
200026f8:	00000000 200029e4 20002a4c 20002ab4     .....). L*. .*. 
	...
200027a0:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
200027b0:	0005deec 0000000b 00000000 00000000     ................
	...

20002b20 <__malloc_av_>:
	...
20002b28:	20002b20 20002b20 20002b28 20002b28      +.  +. (+. (+. 
20002b38:	20002b30 20002b30 20002b38 20002b38     0+. 0+. 8+. 8+. 
20002b48:	20002b40 20002b40 20002b48 20002b48     @+. @+. H+. H+. 
20002b58:	20002b50 20002b50 20002b58 20002b58     P+. P+. X+. X+. 
20002b68:	20002b60 20002b60 20002b68 20002b68     `+. `+. h+. h+. 
20002b78:	20002b70 20002b70 20002b78 20002b78     p+. p+. x+. x+. 
20002b88:	20002b80 20002b80 20002b88 20002b88     .+. .+. .+. .+. 
20002b98:	20002b90 20002b90 20002b98 20002b98     .+. .+. .+. .+. 
20002ba8:	20002ba0 20002ba0 20002ba8 20002ba8     .+. .+. .+. .+. 
20002bb8:	20002bb0 20002bb0 20002bb8 20002bb8     .+. .+. .+. .+. 
20002bc8:	20002bc0 20002bc0 20002bc8 20002bc8     .+. .+. .+. .+. 
20002bd8:	20002bd0 20002bd0 20002bd8 20002bd8     .+. .+. .+. .+. 
20002be8:	20002be0 20002be0 20002be8 20002be8     .+. .+. .+. .+. 
20002bf8:	20002bf0 20002bf0 20002bf8 20002bf8     .+. .+. .+. .+. 
20002c08:	20002c00 20002c00 20002c08 20002c08     .,. .,. .,. .,. 
20002c18:	20002c10 20002c10 20002c18 20002c18     .,. .,. .,. .,. 
20002c28:	20002c20 20002c20 20002c28 20002c28      ,.  ,. (,. (,. 
20002c38:	20002c30 20002c30 20002c38 20002c38     0,. 0,. 8,. 8,. 
20002c48:	20002c40 20002c40 20002c48 20002c48     @,. @,. H,. H,. 
20002c58:	20002c50 20002c50 20002c58 20002c58     P,. P,. X,. X,. 
20002c68:	20002c60 20002c60 20002c68 20002c68     `,. `,. h,. h,. 
20002c78:	20002c70 20002c70 20002c78 20002c78     p,. p,. x,. x,. 
20002c88:	20002c80 20002c80 20002c88 20002c88     .,. .,. .,. .,. 
20002c98:	20002c90 20002c90 20002c98 20002c98     .,. .,. .,. .,. 
20002ca8:	20002ca0 20002ca0 20002ca8 20002ca8     .,. .,. .,. .,. 
20002cb8:	20002cb0 20002cb0 20002cb8 20002cb8     .,. .,. .,. .,. 
20002cc8:	20002cc0 20002cc0 20002cc8 20002cc8     .,. .,. .,. .,. 
20002cd8:	20002cd0 20002cd0 20002cd8 20002cd8     .,. .,. .,. .,. 
20002ce8:	20002ce0 20002ce0 20002ce8 20002ce8     .,. .,. .,. .,. 
20002cf8:	20002cf0 20002cf0 20002cf8 20002cf8     .,. .,. .,. .,. 
20002d08:	20002d00 20002d00 20002d08 20002d08     .-. .-. .-. .-. 
20002d18:	20002d10 20002d10 20002d18 20002d18     .-. .-. .-. .-. 
20002d28:	20002d20 20002d20 20002d28 20002d28      -.  -. (-. (-. 
20002d38:	20002d30 20002d30 20002d38 20002d38     0-. 0-. 8-. 8-. 
20002d48:	20002d40 20002d40 20002d48 20002d48     @-. @-. H-. H-. 
20002d58:	20002d50 20002d50 20002d58 20002d58     P-. P-. X-. X-. 
20002d68:	20002d60 20002d60 20002d68 20002d68     `-. `-. h-. h-. 
20002d78:	20002d70 20002d70 20002d78 20002d78     p-. p-. x-. x-. 
20002d88:	20002d80 20002d80 20002d88 20002d88     .-. .-. .-. .-. 
20002d98:	20002d90 20002d90 20002d98 20002d98     .-. .-. .-. .-. 
20002da8:	20002da0 20002da0 20002da8 20002da8     .-. .-. .-. .-. 
20002db8:	20002db0 20002db0 20002db8 20002db8     .-. .-. .-. .-. 
20002dc8:	20002dc0 20002dc0 20002dc8 20002dc8     .-. .-. .-. .-. 
20002dd8:	20002dd0 20002dd0 20002dd8 20002dd8     .-. .-. .-. .-. 
20002de8:	20002de0 20002de0 20002de8 20002de8     .-. .-. .-. .-. 
20002df8:	20002df0 20002df0 20002df8 20002df8     .-. .-. .-. .-. 
20002e08:	20002e00 20002e00 20002e08 20002e08     ... ... ... ... 
20002e18:	20002e10 20002e10 20002e18 20002e18     ... ... ... ... 
20002e28:	20002e20 20002e20 20002e28 20002e28      ..  .. (.. (.. 
20002e38:	20002e30 20002e30 20002e38 20002e38     0.. 0.. 8.. 8.. 
20002e48:	20002e40 20002e40 20002e48 20002e48     @.. @.. H.. H.. 
20002e58:	20002e50 20002e50 20002e58 20002e58     P.. P.. X.. X.. 
20002e68:	20002e60 20002e60 20002e68 20002e68     `.. `.. h.. h.. 
20002e78:	20002e70 20002e70 20002e78 20002e78     p.. p.. x.. x.. 
20002e88:	20002e80 20002e80 20002e88 20002e88     ... ... ... ... 
20002e98:	20002e90 20002e90 20002e98 20002e98     ... ... ... ... 
20002ea8:	20002ea0 20002ea0 20002ea8 20002ea8     ... ... ... ... 
20002eb8:	20002eb0 20002eb0 20002eb8 20002eb8     ... ... ... ... 
20002ec8:	20002ec0 20002ec0 20002ec8 20002ec8     ... ... ... ... 
20002ed8:	20002ed0 20002ed0 20002ed8 20002ed8     ... ... ... ... 
20002ee8:	20002ee0 20002ee0 20002ee8 20002ee8     ... ... ... ... 
20002ef8:	20002ef0 20002ef0 20002ef8 20002ef8     ... ... ... ... 
20002f08:	20002f00 20002f00 20002f08 20002f08     ./. ./. ./. ./. 
20002f18:	20002f10 20002f10 20002f18 20002f18     ./. ./. ./. ./. 

20002f28 <__malloc_sbrk_base>:
20002f28:	ffffffff                                ....

20002f2c <__malloc_trim_threshold>:
20002f2c:	00020000                                ....

20002f30 <print_mutex>:
	...

20002f38 <__mutex_array_end>:
20002f38:	1000097d 	.word	0x1000097d
20002f3c:	1000030d 	.word	0x1000030d
20002f40:	10000e69 	.word	0x10000e69
20002f44:	10000f29 	.word	0x10000f29

20002f48 <__frame_dummy_init_array_entry>:
20002f48:	100002ed 100024ed                       .....$..
