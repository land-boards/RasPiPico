
build/program.elf:     file format elf32-littlearm


Disassembly of section .boot2:

10000000 <__boot2_start__>:
10000000:	4b32b500 	.word	0x4b32b500
10000004:	60582021 	.word	0x60582021
10000008:	21026898 	.word	0x21026898
1000000c:	60984388 	.word	0x60984388
10000010:	611860d8 	.word	0x611860d8
10000014:	4b2e6158 	.word	0x4b2e6158
10000018:	60992100 	.word	0x60992100
1000001c:	61592102 	.word	0x61592102
10000020:	22f02101 	.word	0x22f02101
10000024:	492b5099 	.word	0x492b5099
10000028:	21016019 	.word	0x21016019
1000002c:	20356099 	.word	0x20356099
10000030:	f844f000 	.word	0xf844f000
10000034:	42902202 	.word	0x42902202
10000038:	2106d014 	.word	0x2106d014
1000003c:	f0006619 	.word	0xf0006619
10000040:	6e19f834 	.word	0x6e19f834
10000044:	66192101 	.word	0x66192101
10000048:	66182000 	.word	0x66182000
1000004c:	f000661a 	.word	0xf000661a
10000050:	6e19f82c 	.word	0x6e19f82c
10000054:	6e196e19 	.word	0x6e196e19
10000058:	f0002005 	.word	0xf0002005
1000005c:	2101f82f 	.word	0x2101f82f
10000060:	d1f94208 	.word	0xd1f94208
10000064:	60992100 	.word	0x60992100
10000068:	6019491b 	.word	0x6019491b
1000006c:	60592100 	.word	0x60592100
10000070:	481b491a 	.word	0x481b491a
10000074:	21016001 	.word	0x21016001
10000078:	21eb6099 	.word	0x21eb6099
1000007c:	21a06619 	.word	0x21a06619
10000080:	f0006619 	.word	0xf0006619
10000084:	2100f812 	.word	0x2100f812
10000088:	49166099 	.word	0x49166099
1000008c:	60014814 	.word	0x60014814
10000090:	60992101 	.word	0x60992101
10000094:	2800bc01 	.word	0x2800bc01
10000098:	4700d000 	.word	0x4700d000
1000009c:	49134812 	.word	0x49134812
100000a0:	c8036008 	.word	0xc8036008
100000a4:	8808f380 	.word	0x8808f380
100000a8:	b5034708 	.word	0xb5034708
100000ac:	20046a99 	.word	0x20046a99
100000b0:	d0fb4201 	.word	0xd0fb4201
100000b4:	42012001 	.word	0x42012001
100000b8:	bd03d1f8 	.word	0xbd03d1f8
100000bc:	6618b502 	.word	0x6618b502
100000c0:	f7ff6618 	.word	0xf7ff6618
100000c4:	6e18fff2 	.word	0x6e18fff2
100000c8:	bd026e18 	.word	0xbd026e18
100000cc:	40020000 	.word	0x40020000
100000d0:	18000000 	.word	0x18000000
100000d4:	00070000 	.word	0x00070000
100000d8:	005f0300 	.word	0x005f0300
100000dc:	00002221 	.word	0x00002221
100000e0:	180000f4 	.word	0x180000f4
100000e4:	a0002022 	.word	0xa0002022
100000e8:	10000100 	.word	0x10000100
100000ec:	e000ed08 	.word	0xe000ed08
	...
100000fc:	7a4eb274 	.word	0x7a4eb274

Disassembly of section .text:

10000100 <__logical_binary_start>:
10000100:	20042000 	.word	0x20042000
10000104:	100001f7 	.word	0x100001f7
10000108:	100001c3 	.word	0x100001c3
1000010c:	100001c5 	.word	0x100001c5
10000110:	100001c1 	.word	0x100001c1
10000114:	100001c1 	.word	0x100001c1
10000118:	100001c1 	.word	0x100001c1
1000011c:	100001c1 	.word	0x100001c1
10000120:	100001c1 	.word	0x100001c1
10000124:	100001c1 	.word	0x100001c1
10000128:	100001c1 	.word	0x100001c1
1000012c:	100001c7 	.word	0x100001c7
10000130:	100001c1 	.word	0x100001c1
10000134:	100001c1 	.word	0x100001c1
10000138:	100001c9 	.word	0x100001c9
1000013c:	100001cb 	.word	0x100001cb
10000140:	100001cd 	.word	0x100001cd
10000144:	100001cd 	.word	0x100001cd
10000148:	100001cd 	.word	0x100001cd
1000014c:	100001cd 	.word	0x100001cd
10000150:	100001cd 	.word	0x100001cd
10000154:	100001cd 	.word	0x100001cd
10000158:	100001cd 	.word	0x100001cd
1000015c:	100001cd 	.word	0x100001cd
10000160:	100001cd 	.word	0x100001cd
10000164:	100001cd 	.word	0x100001cd
10000168:	100001cd 	.word	0x100001cd
1000016c:	100001cd 	.word	0x100001cd
10000170:	100001cd 	.word	0x100001cd
10000174:	100001cd 	.word	0x100001cd
10000178:	100001cd 	.word	0x100001cd
1000017c:	100001cd 	.word	0x100001cd
10000180:	100001cd 	.word	0x100001cd
10000184:	100001cd 	.word	0x100001cd
10000188:	100001cd 	.word	0x100001cd
1000018c:	100001cd 	.word	0x100001cd
10000190:	100001cd 	.word	0x100001cd
10000194:	100001cd 	.word	0x100001cd
10000198:	100001cd 	.word	0x100001cd
1000019c:	100001cd 	.word	0x100001cd
100001a0:	100001cd 	.word	0x100001cd
100001a4:	100001cd 	.word	0x100001cd
100001a8:	100001cd 	.word	0x100001cd
100001ac:	100001cd 	.word	0x100001cd
100001b0:	100001cd 	.word	0x100001cd
100001b4:	100001cd 	.word	0x100001cd
100001b8:	100001cd 	.word	0x100001cd
100001bc:	100001cd 	.word	0x100001cd

100001c0 <isr_invalid>:
100001c0:	be00      	bkpt	0x0000

100001c2 <isr_nmi>:
100001c2:	be00      	bkpt	0x0000

100001c4 <isr_hardfault>:
100001c4:	be00      	bkpt	0x0000

100001c6 <isr_svcall>:
100001c6:	be00      	bkpt	0x0000

100001c8 <isr_pendsv>:
100001c8:	be00      	bkpt	0x0000

100001ca <isr_systick>:
100001ca:	be00      	bkpt	0x0000

100001cc <__unhandled_user_irq>:
100001cc:	f000 f84b 	bl	10000266 <__get_current_exception>
100001d0:	3810      	subs	r0, #16

100001d2 <unhandled_user_irq_num_in_r0>:
100001d2:	be00      	bkpt	0x0000

100001d4 <binary_info_header>:
100001d4:	7188ebf2 	.word	0x7188ebf2
100001d8:	1002d004 	.word	0x1002d004
100001dc:	1002d024 	.word	0x1002d024
100001e0:	10000234 	.word	0x10000234
100001e4:	e71aa390 	.word	0xe71aa390

100001e8 <_entry_point>:
100001e8:	2000      	movs	r0, #0
100001ea:	4921      	ldr	r1, [pc, #132]	; (10000270 <__get_current_exception+0xa>)
100001ec:	6008      	str	r0, [r1, #0]
100001ee:	c806      	ldmia	r0!, {r1, r2}
100001f0:	f381 8808 	msr	MSP, r1
100001f4:	4710      	bx	r2

100001f6 <_reset_handler>:
100001f6:	481f      	ldr	r0, [pc, #124]	; (10000274 <__get_current_exception+0xe>)
100001f8:	6800      	ldr	r0, [r0, #0]
100001fa:	2800      	cmp	r0, #0
100001fc:	d12f      	bne.n	1000025e <hold_non_core0_in_bootrom>
100001fe:	a40d      	add	r4, pc, #52	; (adr r4, 10000234 <data_cpy_table>)
10000200:	cc0e      	ldmia	r4!, {r1, r2, r3}
10000202:	2900      	cmp	r1, #0
10000204:	d002      	beq.n	1000020c <_reset_handler+0x16>
10000206:	f000 f812 	bl	1000022e <data_cpy>
1000020a:	e7f9      	b.n	10000200 <_reset_handler+0xa>
1000020c:	491a      	ldr	r1, [pc, #104]	; (10000278 <__get_current_exception+0x12>)
1000020e:	4a1b      	ldr	r2, [pc, #108]	; (1000027c <__get_current_exception+0x16>)
10000210:	2000      	movs	r0, #0
10000212:	e000      	b.n	10000216 <bss_fill_test>

10000214 <bss_fill_loop>:
10000214:	c101      	stmia	r1!, {r0}

10000216 <bss_fill_test>:
10000216:	4291      	cmp	r1, r2
10000218:	d1fc      	bne.n	10000214 <bss_fill_loop>

1000021a <platform_entry>:
1000021a:	4919      	ldr	r1, [pc, #100]	; (10000280 <__get_current_exception+0x1a>)
1000021c:	4788      	blx	r1
1000021e:	4919      	ldr	r1, [pc, #100]	; (10000284 <__get_current_exception+0x1e>)
10000220:	4788      	blx	r1
10000222:	4919      	ldr	r1, [pc, #100]	; (10000288 <__get_current_exception+0x22>)
10000224:	4788      	blx	r1
10000226:	be00      	bkpt	0x0000
10000228:	e7fd      	b.n	10000226 <platform_entry+0xc>

1000022a <data_cpy_loop>:
1000022a:	c901      	ldmia	r1!, {r0}
1000022c:	c201      	stmia	r2!, {r0}

1000022e <data_cpy>:
1000022e:	429a      	cmp	r2, r3
10000230:	d3fb      	bcc.n	1000022a <data_cpy_loop>
10000232:	4770      	bx	lr

10000234 <data_cpy_table>:
10000234:	1002d024 	.word	0x1002d024
10000238:	200000c0 	.word	0x200000c0
1000023c:	20003050 	.word	0x20003050
10000240:	1002ffb4 	.word	0x1002ffb4
10000244:	20040000 	.word	0x20040000
10000248:	20040000 	.word	0x20040000
1000024c:	1002ffb4 	.word	0x1002ffb4
10000250:	20041000 	.word	0x20041000
10000254:	20041000 	.word	0x20041000
10000258:	00000000 	.word	0x00000000
1000025c:	4770      	bx	lr

1000025e <hold_non_core0_in_bootrom>:
1000025e:	480b      	ldr	r0, [pc, #44]	; (1000028c <__get_current_exception+0x26>)
10000260:	f000 ff66 	bl	10001130 <rom_func_lookup>
10000264:	4700      	bx	r0

10000266 <__get_current_exception>:
10000266:	f3ef 8005 	mrs	r0, IPSR
1000026a:	b2c0      	uxtb	r0, r0
1000026c:	4770      	bx	lr
1000026e:	0000      	.short	0x0000
10000270:	e000ed08 	.word	0xe000ed08
10000274:	d0000000 	.word	0xd0000000
10000278:	20003050 	.word	0x20003050
1000027c:	20012778 	.word	0x20012778
10000280:	100038fd 	.word	0x100038fd
10000284:	1000cbe5 	.word	0x1000cbe5
10000288:	10003a1d 	.word	0x10003a1d
1000028c:	00005657 	.word	0x00005657

10000290 <__bi_46>:
10000290:	50520006 5360b3ab 100103b8              ..RP..`S....

1000029c <__bi_34>:
1000029c:	50520006 02031c86 100103c0              ..RP........

100002a8 <__bi_26>:
100002a8:	50520006 9da22254 100103c8              ..RPT"......

100002b4 <__bi_18>:
100002b4:	50520005 68f465de 1002ffb4              ..RP.e.h....

100002c0 <_init>:
100002c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100002c2:	46c0      	nop			; (mov r8, r8)

100002c4 <__do_global_dtors_aux>:
100002c4:	b510      	push	{r4, lr}
100002c6:	4c06      	ldr	r4, [pc, #24]	; (100002e0 <__do_global_dtors_aux+0x1c>)
100002c8:	7823      	ldrb	r3, [r4, #0]
100002ca:	2b00      	cmp	r3, #0
100002cc:	d107      	bne.n	100002de <__do_global_dtors_aux+0x1a>
100002ce:	4b05      	ldr	r3, [pc, #20]	; (100002e4 <__do_global_dtors_aux+0x20>)
100002d0:	2b00      	cmp	r3, #0
100002d2:	d002      	beq.n	100002da <__do_global_dtors_aux+0x16>
100002d4:	4804      	ldr	r0, [pc, #16]	; (100002e8 <__do_global_dtors_aux+0x24>)
100002d6:	e000      	b.n	100002da <__do_global_dtors_aux+0x16>
100002d8:	bf00      	nop
100002da:	2301      	movs	r3, #1
100002dc:	7023      	strb	r3, [r4, #0]
100002de:	bd10      	pop	{r4, pc}
100002e0:	20003260 	.word	0x20003260
100002e4:	00000000 	.word	0x00000000
100002e8:	10010380 	.word	0x10010380

100002ec <frame_dummy>:
100002ec:	4b04      	ldr	r3, [pc, #16]	; (10000300 <frame_dummy+0x14>)
100002ee:	b510      	push	{r4, lr}
100002f0:	2b00      	cmp	r3, #0
100002f2:	d003      	beq.n	100002fc <frame_dummy+0x10>
100002f4:	4903      	ldr	r1, [pc, #12]	; (10000304 <frame_dummy+0x18>)
100002f6:	4804      	ldr	r0, [pc, #16]	; (10000308 <frame_dummy+0x1c>)
100002f8:	e000      	b.n	100002fc <frame_dummy+0x10>
100002fa:	bf00      	nop
100002fc:	bd10      	pop	{r4, pc}
100002fe:	46c0      	nop			; (mov r8, r8)
10000300:	00000000 	.word	0x00000000
10000304:	20003264 	.word	0x20003264
10000308:	10010380 	.word	0x10010380

1000030c <__aeabi_bits_init>:
1000030c:	4801      	ldr	r0, [pc, #4]	; (10000314 <__aeabi_bits_init+0x8>)
1000030e:	2104      	movs	r1, #4
10000310:	4b01      	ldr	r3, [pc, #4]	; (10000318 <__aeabi_bits_init+0xc>)
10000312:	4718      	bx	r3
10000314:	200026b0 	.word	0x200026b0
10000318:	10001151 	.word	0x10001151

1000031c <__wrap___aeabi_idiv>:
1000031c:	4a14      	ldr	r2, [pc, #80]	; (10000370 <divmod_s32s32_savestate+0x20>)
1000031e:	6f93      	ldr	r3, [r2, #120]	; 0x78
10000320:	089b      	lsrs	r3, r3, #2
10000322:	d215      	bcs.n	10000350 <divmod_s32s32_savestate>

10000324 <divmod_s32s32_unsafe>:
10000324:	6690      	str	r0, [r2, #104]	; 0x68
10000326:	66d1      	str	r1, [r2, #108]	; 0x6c
10000328:	2900      	cmp	r1, #0
1000032a:	d005      	beq.n	10000338 <divmod_s32s32_unsafe+0x14>
1000032c:	e7ff      	b.n	1000032e <divmod_s32s32_unsafe+0xa>
1000032e:	e7ff      	b.n	10000330 <divmod_s32s32_unsafe+0xc>
10000330:	e7ff      	b.n	10000332 <divmod_s32s32_unsafe+0xe>
10000332:	6f51      	ldr	r1, [r2, #116]	; 0x74
10000334:	6f10      	ldr	r0, [r2, #112]	; 0x70
10000336:	4770      	bx	lr
10000338:	b504      	push	{r2, lr}
1000033a:	2180      	movs	r1, #128	; 0x80
1000033c:	0609      	lsls	r1, r1, #24
1000033e:	17c2      	asrs	r2, r0, #31
10000340:	4051      	eors	r1, r2
10000342:	2800      	cmp	r0, #0
10000344:	d000      	beq.n	10000348 <divmod_s32s32_unsafe+0x24>
10000346:	43c8      	mvns	r0, r1
10000348:	f00f fff2 	bl	10010330 <____aeabi_idiv0_veneer>
1000034c:	2100      	movs	r1, #0
1000034e:	bd04      	pop	{r2, pc}

10000350 <divmod_s32s32_savestate>:
10000350:	6f93      	ldr	r3, [r2, #120]	; 0x78
10000352:	085b      	lsrs	r3, r3, #1
10000354:	d3fd      	bcc.n	10000352 <divmod_s32s32_savestate+0x2>
10000356:	b5f0      	push	{r4, r5, r6, r7, lr}
10000358:	6e94      	ldr	r4, [r2, #104]	; 0x68
1000035a:	6ed5      	ldr	r5, [r2, #108]	; 0x6c
1000035c:	6f57      	ldr	r7, [r2, #116]	; 0x74
1000035e:	6f16      	ldr	r6, [r2, #112]	; 0x70
10000360:	f7ff ffe0 	bl	10000324 <divmod_s32s32_unsafe>
10000364:	6694      	str	r4, [r2, #104]	; 0x68
10000366:	66d5      	str	r5, [r2, #108]	; 0x6c
10000368:	6757      	str	r7, [r2, #116]	; 0x74
1000036a:	6716      	str	r6, [r2, #112]	; 0x70
1000036c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000036e:	0000      	.short	0x0000
10000370:	d0000000 	.word	0xd0000000

10000374 <__wrap___aeabi_uidiv>:
10000374:	4a13      	ldr	r2, [pc, #76]	; (100003c4 <divmod_u32u32_savestate+0x20>)
10000376:	6f93      	ldr	r3, [r2, #120]	; 0x78
10000378:	089b      	lsrs	r3, r3, #2
1000037a:	d213      	bcs.n	100003a4 <divmod_u32u32_savestate>

1000037c <divmod_u32u32_unsafe>:
1000037c:	6610      	str	r0, [r2, #96]	; 0x60
1000037e:	6651      	str	r1, [r2, #100]	; 0x64
10000380:	2900      	cmp	r1, #0
10000382:	d005      	beq.n	10000390 <divmod_u32u32_unsafe+0x14>
10000384:	e7ff      	b.n	10000386 <divmod_u32u32_unsafe+0xa>
10000386:	e7ff      	b.n	10000388 <divmod_u32u32_unsafe+0xc>
10000388:	e7ff      	b.n	1000038a <divmod_u32u32_unsafe+0xe>
1000038a:	6f51      	ldr	r1, [r2, #116]	; 0x74
1000038c:	6f10      	ldr	r0, [r2, #112]	; 0x70
1000038e:	4770      	bx	lr
10000390:	b504      	push	{r2, lr}
10000392:	2800      	cmp	r0, #0
10000394:	d001      	beq.n	1000039a <divmod_u32u32_unsafe+0x1e>
10000396:	2000      	movs	r0, #0
10000398:	43c0      	mvns	r0, r0
1000039a:	f00f ffc9 	bl	10010330 <____aeabi_idiv0_veneer>
1000039e:	2100      	movs	r1, #0
100003a0:	bd04      	pop	{r2, pc}
100003a2:	46c0      	nop			; (mov r8, r8)

100003a4 <divmod_u32u32_savestate>:
100003a4:	6f93      	ldr	r3, [r2, #120]	; 0x78
100003a6:	085b      	lsrs	r3, r3, #1
100003a8:	d3fd      	bcc.n	100003a6 <divmod_u32u32_savestate+0x2>
100003aa:	b5f0      	push	{r4, r5, r6, r7, lr}
100003ac:	6e94      	ldr	r4, [r2, #104]	; 0x68
100003ae:	6ed5      	ldr	r5, [r2, #108]	; 0x6c
100003b0:	6f57      	ldr	r7, [r2, #116]	; 0x74
100003b2:	6f16      	ldr	r6, [r2, #112]	; 0x70
100003b4:	f7ff ffe2 	bl	1000037c <divmod_u32u32_unsafe>
100003b8:	6694      	str	r4, [r2, #104]	; 0x68
100003ba:	66d5      	str	r5, [r2, #108]	; 0x6c
100003bc:	6757      	str	r7, [r2, #116]	; 0x74
100003be:	6716      	str	r6, [r2, #112]	; 0x70
100003c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
100003c2:	0000      	.short	0x0000
100003c4:	d0000000 	.word	0xd0000000

100003c8 <__wrap___aeabi_ldivmod>:
100003c8:	4694      	mov	ip, r2
100003ca:	4a4e      	ldr	r2, [pc, #312]	; (10000504 <udiv0+0x1a>)
100003cc:	6f92      	ldr	r2, [r2, #120]	; 0x78
100003ce:	0892      	lsrs	r2, r2, #2
100003d0:	4662      	mov	r2, ip
100003d2:	d201      	bcs.n	100003d8 <divmod_s64s64_savestate>
100003d4:	e030      	b.n	10000438 <divmod_s64s64_unsafe>
100003d6:	46c0      	nop			; (mov r8, r8)

100003d8 <divmod_s64s64_savestate>:
100003d8:	b5f0      	push	{r4, r5, r6, r7, lr}
100003da:	4e4a      	ldr	r6, [pc, #296]	; (10000504 <udiv0+0x1a>)
100003dc:	6fb5      	ldr	r5, [r6, #120]	; 0x78
100003de:	086d      	lsrs	r5, r5, #1
100003e0:	d3fc      	bcc.n	100003dc <divmod_s64s64_savestate+0x4>
100003e2:	6e34      	ldr	r4, [r6, #96]	; 0x60
100003e4:	6e75      	ldr	r5, [r6, #100]	; 0x64
100003e6:	6f77      	ldr	r7, [r6, #116]	; 0x74
100003e8:	6f36      	ldr	r6, [r6, #112]	; 0x70
100003ea:	f000 f825 	bl	10000438 <divmod_s64s64_unsafe>
100003ee:	4694      	mov	ip, r2
100003f0:	4a44      	ldr	r2, [pc, #272]	; (10000504 <udiv0+0x1a>)
100003f2:	6614      	str	r4, [r2, #96]	; 0x60
100003f4:	6655      	str	r5, [r2, #100]	; 0x64
100003f6:	6757      	str	r7, [r2, #116]	; 0x74
100003f8:	6716      	str	r6, [r2, #112]	; 0x70
100003fa:	4662      	mov	r2, ip
100003fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
100003fe:	46c0      	nop			; (mov r8, r8)

10000400 <__wrap___aeabi_uldivmod>:
10000400:	4694      	mov	ip, r2
10000402:	4a40      	ldr	r2, [pc, #256]	; (10000504 <udiv0+0x1a>)
10000404:	6f92      	ldr	r2, [r2, #120]	; 0x78
10000406:	0892      	lsrs	r2, r2, #2
10000408:	4662      	mov	r2, ip
1000040a:	d201      	bcs.n	10000410 <divmod_u64u64_savestate>
1000040c:	e058      	b.n	100004c0 <divmod_u64u64_unsafe>
1000040e:	46c0      	nop			; (mov r8, r8)

10000410 <divmod_u64u64_savestate>:
10000410:	b5f0      	push	{r4, r5, r6, r7, lr}
10000412:	4e3c      	ldr	r6, [pc, #240]	; (10000504 <udiv0+0x1a>)
10000414:	6fb5      	ldr	r5, [r6, #120]	; 0x78
10000416:	086d      	lsrs	r5, r5, #1
10000418:	d3fc      	bcc.n	10000414 <divmod_u64u64_savestate+0x4>
1000041a:	6e34      	ldr	r4, [r6, #96]	; 0x60
1000041c:	6e75      	ldr	r5, [r6, #100]	; 0x64
1000041e:	6f77      	ldr	r7, [r6, #116]	; 0x74
10000420:	6f36      	ldr	r6, [r6, #112]	; 0x70
10000422:	f000 f84d 	bl	100004c0 <divmod_u64u64_unsafe>
10000426:	4694      	mov	ip, r2
10000428:	4a36      	ldr	r2, [pc, #216]	; (10000504 <udiv0+0x1a>)
1000042a:	6614      	str	r4, [r2, #96]	; 0x60
1000042c:	6655      	str	r5, [r2, #100]	; 0x64
1000042e:	6757      	str	r7, [r2, #116]	; 0x74
10000430:	6716      	str	r6, [r2, #112]	; 0x70
10000432:	4662      	mov	r2, ip
10000434:	bdf0      	pop	{r4, r5, r6, r7, pc}
10000436:	46c0      	nop			; (mov r8, r8)

10000438 <divmod_s64s64_unsafe>:
10000438:	2b00      	cmp	r3, #0
1000043a:	db24      	blt.n	10000486 <l41_1+0x26>
1000043c:	d011      	beq.n	10000462 <l41_1+0x2>
1000043e:	2900      	cmp	r1, #0
10000440:	da3e      	bge.n	100004c0 <divmod_u64u64_unsafe>
10000442:	b500      	push	{lr}
10000444:	43c9      	mvns	r1, r1
10000446:	4240      	negs	r0, r0
10000448:	d100      	bne.n	1000044c <l39_1>
1000044a:	3101      	adds	r1, #1

1000044c <l39_1>:
1000044c:	f000 f838 	bl	100004c0 <divmod_u64u64_unsafe>
10000450:	43c9      	mvns	r1, r1
10000452:	4240      	negs	r0, r0
10000454:	d100      	bne.n	10000458 <l40_1>
10000456:	3101      	adds	r1, #1

10000458 <l40_1>:
10000458:	43db      	mvns	r3, r3
1000045a:	4252      	negs	r2, r2
1000045c:	d100      	bne.n	10000460 <l41_1>
1000045e:	3301      	adds	r3, #1

10000460 <l41_1>:
10000460:	bd00      	pop	{pc}
10000462:	2a00      	cmp	r2, #0
10000464:	d1eb      	bne.n	1000043e <divmod_s64s64_unsafe+0x6>
10000466:	2800      	cmp	r0, #0
10000468:	d101      	bne.n	1000046e <l41_1+0xe>
1000046a:	2900      	cmp	r1, #0
1000046c:	d005      	beq.n	1000047a <l41_1+0x1a>
1000046e:	2000      	movs	r0, #0
10000470:	0fc9      	lsrs	r1, r1, #31
10000472:	07c9      	lsls	r1, r1, #31
10000474:	d101      	bne.n	1000047a <l41_1+0x1a>
10000476:	43c0      	mvns	r0, r0
10000478:	0841      	lsrs	r1, r0, #1
1000047a:	b500      	push	{lr}
1000047c:	f00f ff50 	bl	10010320 <____aeabi_ldiv0_veneer>
10000480:	2200      	movs	r2, #0
10000482:	2300      	movs	r3, #0
10000484:	bd00      	pop	{pc}
10000486:	b500      	push	{lr}
10000488:	2900      	cmp	r1, #0
1000048a:	db0a      	blt.n	100004a2 <l43_1+0x2>
1000048c:	43db      	mvns	r3, r3
1000048e:	4252      	negs	r2, r2
10000490:	d100      	bne.n	10000494 <l42_1>
10000492:	3301      	adds	r3, #1

10000494 <l42_1>:
10000494:	f000 f814 	bl	100004c0 <divmod_u64u64_unsafe>
10000498:	43c9      	mvns	r1, r1
1000049a:	4240      	negs	r0, r0
1000049c:	d100      	bne.n	100004a0 <l43_1>
1000049e:	3101      	adds	r1, #1

100004a0 <l43_1>:
100004a0:	bd00      	pop	{pc}
100004a2:	43c9      	mvns	r1, r1
100004a4:	4240      	negs	r0, r0
100004a6:	d100      	bne.n	100004aa <l44_1>
100004a8:	3101      	adds	r1, #1

100004aa <l44_1>:
100004aa:	43db      	mvns	r3, r3
100004ac:	4252      	negs	r2, r2
100004ae:	d100      	bne.n	100004b2 <l45_1>
100004b0:	3301      	adds	r3, #1

100004b2 <l45_1>:
100004b2:	f000 f805 	bl	100004c0 <divmod_u64u64_unsafe>
100004b6:	43db      	mvns	r3, r3
100004b8:	4252      	negs	r2, r2
100004ba:	d100      	bne.n	100004be <l46_1>
100004bc:	3301      	adds	r3, #1

100004be <l46_1>:
100004be:	bd00      	pop	{pc}

100004c0 <divmod_u64u64_unsafe>:
100004c0:	2900      	cmp	r1, #0
100004c2:	d123      	bne.n	1000050c <y64>
100004c4:	2b00      	cmp	r3, #0
100004c6:	d118      	bne.n	100004fa <udiv0+0x10>
100004c8:	2a00      	cmp	r2, #0
100004ca:	d00c      	beq.n	100004e6 <divmod_u64u64_unsafe+0x26>
100004cc:	46bc      	mov	ip, r7
100004ce:	4f0d      	ldr	r7, [pc, #52]	; (10000504 <udiv0+0x1a>)
100004d0:	6638      	str	r0, [r7, #96]	; 0x60
100004d2:	667a      	str	r2, [r7, #100]	; 0x64
100004d4:	2100      	movs	r1, #0
100004d6:	2300      	movs	r3, #0
100004d8:	e7ff      	b.n	100004da <divmod_u64u64_unsafe+0x1a>
100004da:	e7ff      	b.n	100004dc <divmod_u64u64_unsafe+0x1c>
100004dc:	e7ff      	b.n	100004de <divmod_u64u64_unsafe+0x1e>
100004de:	6f7a      	ldr	r2, [r7, #116]	; 0x74
100004e0:	6f38      	ldr	r0, [r7, #112]	; 0x70
100004e2:	4667      	mov	r7, ip
100004e4:	4770      	bx	lr
100004e6:	2800      	cmp	r0, #0
100004e8:	d001      	beq.n	100004ee <udiv0+0x4>

100004ea <udiv0>:
100004ea:	4807      	ldr	r0, [pc, #28]	; (10000508 <udiv0+0x1e>)
100004ec:	0001      	movs	r1, r0
100004ee:	b500      	push	{lr}
100004f0:	f00f ff16 	bl	10010320 <____aeabi_ldiv0_veneer>
100004f4:	2200      	movs	r2, #0
100004f6:	2300      	movs	r3, #0
100004f8:	bd00      	pop	{pc}
100004fa:	0002      	movs	r2, r0
100004fc:	000b      	movs	r3, r1
100004fe:	2000      	movs	r0, #0
10000500:	2100      	movs	r1, #0
10000502:	4770      	bx	lr
10000504:	d0000000 	.word	0xd0000000
10000508:	ffffffff 	.word	0xffffffff

1000050c <y64>:
1000050c:	2b00      	cmp	r3, #0
1000050e:	d000      	beq.n	10000512 <y64+0x6>
10000510:	e0bd      	b.n	1000068e <y64_x48>
10000512:	0c13      	lsrs	r3, r2, #16
10000514:	d126      	bne.n	10000564 <y64_x32>
10000516:	2a00      	cmp	r2, #0
10000518:	d0e7      	beq.n	100004ea <udiv0>
1000051a:	b480      	push	{r7}
1000051c:	4f10      	ldr	r7, [pc, #64]	; (10000560 <y64+0x54>)
1000051e:	6639      	str	r1, [r7, #96]	; 0x60
10000520:	667a      	str	r2, [r7, #100]	; 0x64
10000522:	e7ff      	b.n	10000524 <y64+0x18>
10000524:	e7ff      	b.n	10000526 <y64+0x1a>
10000526:	b430      	push	{r4, r5}
10000528:	0c04      	lsrs	r4, r0, #16
1000052a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
1000052c:	6f39      	ldr	r1, [r7, #112]	; 0x70
1000052e:	041b      	lsls	r3, r3, #16
10000530:	4323      	orrs	r3, r4
10000532:	663b      	str	r3, [r7, #96]	; 0x60
10000534:	e7ff      	b.n	10000536 <y64+0x2a>
10000536:	e7ff      	b.n	10000538 <y64+0x2c>
10000538:	e7ff      	b.n	1000053a <y64+0x2e>
1000053a:	46c0      	nop			; (mov r8, r8)
1000053c:	b284      	uxth	r4, r0
1000053e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
10000540:	6f3d      	ldr	r5, [r7, #112]	; 0x70
10000542:	041b      	lsls	r3, r3, #16
10000544:	4323      	orrs	r3, r4
10000546:	663b      	str	r3, [r7, #96]	; 0x60
10000548:	e7ff      	b.n	1000054a <y64+0x3e>
1000054a:	e7ff      	b.n	1000054c <y64+0x40>
1000054c:	46c0      	nop			; (mov r8, r8)
1000054e:	2300      	movs	r3, #0
10000550:	042c      	lsls	r4, r5, #16
10000552:	0c2d      	lsrs	r5, r5, #16
10000554:	6f7a      	ldr	r2, [r7, #116]	; 0x74
10000556:	6f38      	ldr	r0, [r7, #112]	; 0x70
10000558:	1900      	adds	r0, r0, r4
1000055a:	4169      	adcs	r1, r5
1000055c:	bcb0      	pop	{r4, r5, r7}
1000055e:	4770      	bx	lr
10000560:	d0000000 	.word	0xd0000000

10000564 <y64_x32>:
10000564:	b5f0      	push	{r4, r5, r6, r7, lr}
10000566:	4694      	mov	ip, r2
10000568:	2500      	movs	r5, #0
1000056a:	0e14      	lsrs	r4, r2, #24
1000056c:	d101      	bne.n	10000572 <y64_x32+0xe>
1000056e:	0212      	lsls	r2, r2, #8
10000570:	3508      	adds	r5, #8
10000572:	0f14      	lsrs	r4, r2, #28
10000574:	d101      	bne.n	1000057a <y64_x32+0x16>
10000576:	0112      	lsls	r2, r2, #4
10000578:	3504      	adds	r5, #4
1000057a:	0f94      	lsrs	r4, r2, #30
1000057c:	d101      	bne.n	10000582 <y64_x32+0x1e>
1000057e:	0092      	lsls	r2, r2, #2
10000580:	3502      	adds	r5, #2
10000582:	0fd4      	lsrs	r4, r2, #31
10000584:	d101      	bne.n	1000058a <y64_x32+0x26>
10000586:	0052      	lsls	r2, r2, #1
10000588:	3501      	adds	r5, #1
1000058a:	0bd4      	lsrs	r4, r2, #15
1000058c:	3401      	adds	r4, #1
1000058e:	4f25      	ldr	r7, [pc, #148]	; (10000624 <y64_x32+0xc0>)
10000590:	667c      	str	r4, [r7, #100]	; 0x64
10000592:	4c25      	ldr	r4, [pc, #148]	; (10000628 <y64_x32+0xc4>)
10000594:	663c      	str	r4, [r7, #96]	; 0x60
10000596:	0c0e      	lsrs	r6, r1, #16
10000598:	b293      	uxth	r3, r2
1000059a:	e7ff      	b.n	1000059c <y64_x32+0x38>
1000059c:	e7ff      	b.n	1000059e <y64_x32+0x3a>
1000059e:	e7ff      	b.n	100005a0 <y64_x32+0x3c>
100005a0:	6f3c      	ldr	r4, [r7, #112]	; 0x70
100005a2:	4366      	muls	r6, r4
100005a4:	0c36      	lsrs	r6, r6, #16
100005a6:	0377      	lsls	r7, r6, #13
100005a8:	46be      	mov	lr, r7
100005aa:	4373      	muls	r3, r6
100005ac:	0bdf      	lsrs	r7, r3, #15
100005ae:	045b      	lsls	r3, r3, #17
100005b0:	1ac0      	subs	r0, r0, r3
100005b2:	41b9      	sbcs	r1, r7
100005b4:	0c13      	lsrs	r3, r2, #16
100005b6:	4373      	muls	r3, r6
100005b8:	18db      	adds	r3, r3, r3
100005ba:	1ac9      	subs	r1, r1, r3
100005bc:	08ce      	lsrs	r6, r1, #3
100005be:	4366      	muls	r6, r4
100005c0:	0c36      	lsrs	r6, r6, #16
100005c2:	44b6      	add	lr, r6
100005c4:	b293      	uxth	r3, r2
100005c6:	4373      	muls	r3, r6
100005c8:	0f1f      	lsrs	r7, r3, #28
100005ca:	011b      	lsls	r3, r3, #4
100005cc:	1ac0      	subs	r0, r0, r3
100005ce:	41b9      	sbcs	r1, r7
100005d0:	0c13      	lsrs	r3, r2, #16
100005d2:	4373      	muls	r3, r6
100005d4:	0b1f      	lsrs	r7, r3, #12
100005d6:	051b      	lsls	r3, r3, #20
100005d8:	1ac0      	subs	r0, r0, r3
100005da:	41b9      	sbcs	r1, r7
100005dc:	0d86      	lsrs	r6, r0, #22
100005de:	028f      	lsls	r7, r1, #10
100005e0:	433e      	orrs	r6, r7
100005e2:	4366      	muls	r6, r4
100005e4:	0c36      	lsrs	r6, r6, #16
100005e6:	2d09      	cmp	r5, #9
100005e8:	db24      	blt.n	10000634 <last0>
100005ea:	0a52      	lsrs	r2, r2, #9
100005ec:	4372      	muls	r2, r6
100005ee:	1a80      	subs	r0, r0, r2
100005f0:	0377      	lsls	r7, r6, #13
100005f2:	0a46      	lsrs	r6, r0, #9
100005f4:	4366      	muls	r6, r4
100005f6:	0c36      	lsrs	r6, r6, #16
100005f8:	2316      	movs	r3, #22
100005fa:	1b5b      	subs	r3, r3, r5
100005fc:	40de      	lsrs	r6, r3
100005fe:	40df      	lsrs	r7, r3
10000600:	19bf      	adds	r7, r7, r6
10000602:	4664      	mov	r4, ip
10000604:	4366      	muls	r6, r4
10000606:	1b82      	subs	r2, r0, r6
10000608:	4670      	mov	r0, lr
1000060a:	3504      	adds	r5, #4
1000060c:	3306      	adds	r3, #6
1000060e:	0001      	movs	r1, r0
10000610:	40d9      	lsrs	r1, r3
10000612:	40a8      	lsls	r0, r5
10000614:	19c0      	adds	r0, r0, r7
10000616:	d300      	bcc.n	1000061a <y64_x32+0xb6>
10000618:	3101      	adds	r1, #1
1000061a:	42a2      	cmp	r2, r4
1000061c:	d206      	bcs.n	1000062c <y64_x32+0xc8>
1000061e:	2300      	movs	r3, #0
10000620:	bdf0      	pop	{r4, r5, r6, r7, pc}
10000622:	0000      	.short	0x0000
10000624:	d0000000 	.word	0xd0000000
10000628:	ffffffff 	.word	0xffffffff
1000062c:	1b12      	subs	r2, r2, r4
1000062e:	3001      	adds	r0, #1
10000630:	d3f3      	bcc.n	1000061a <y64_x32+0xb6>
10000632:	e7f1      	b.n	10000618 <y64_x32+0xb4>

10000634 <last0>:
10000634:	2709      	movs	r7, #9
10000636:	1b7f      	subs	r7, r7, r5
10000638:	40fe      	lsrs	r6, r7
1000063a:	4664      	mov	r4, ip
1000063c:	b2a2      	uxth	r2, r4
1000063e:	4372      	muls	r2, r6
10000640:	1a80      	subs	r0, r0, r2
10000642:	d200      	bcs.n	10000646 <last0+0x12>
10000644:	3901      	subs	r1, #1
10000646:	0c22      	lsrs	r2, r4, #16
10000648:	4372      	muls	r2, r6
1000064a:	0c13      	lsrs	r3, r2, #16
1000064c:	0412      	lsls	r2, r2, #16
1000064e:	1a82      	subs	r2, r0, r2
10000650:	4199      	sbcs	r1, r3
10000652:	000b      	movs	r3, r1
10000654:	4670      	mov	r0, lr
10000656:	3504      	adds	r5, #4
10000658:	3713      	adds	r7, #19
1000065a:	0001      	movs	r1, r0
1000065c:	40f9      	lsrs	r1, r7
1000065e:	40a8      	lsls	r0, r5
10000660:	1980      	adds	r0, r0, r6
10000662:	d300      	bcc.n	10000666 <last0+0x32>
10000664:	3101      	adds	r1, #1
10000666:	2b00      	cmp	r3, #0
10000668:	d102      	bne.n	10000670 <last0+0x3c>
1000066a:	42a2      	cmp	r2, r4
1000066c:	d20a      	bcs.n	10000684 <last0+0x50>
1000066e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10000670:	3001      	adds	r0, #1
10000672:	d300      	bcc.n	10000676 <last0+0x42>
10000674:	3101      	adds	r1, #1
10000676:	1b12      	subs	r2, r2, r4
10000678:	d2fa      	bcs.n	10000670 <last0+0x3c>
1000067a:	3b01      	subs	r3, #1
1000067c:	d1f8      	bne.n	10000670 <last0+0x3c>
1000067e:	42a2      	cmp	r2, r4
10000680:	d200      	bcs.n	10000684 <last0+0x50>
10000682:	bdf0      	pop	{r4, r5, r6, r7, pc}
10000684:	3001      	adds	r0, #1
10000686:	d300      	bcc.n	1000068a <last0+0x56>
10000688:	3101      	adds	r1, #1
1000068a:	1b12      	subs	r2, r2, r4
1000068c:	e7f7      	b.n	1000067e <last0+0x4a>

1000068e <y64_x48>:
1000068e:	b5f0      	push	{r4, r5, r6, r7, lr}
10000690:	0c1c      	lsrs	r4, r3, #16
10000692:	d000      	beq.n	10000696 <y64_x48+0x8>
10000694:	e080      	b.n	10000798 <y64_x64>
10000696:	b40c      	push	{r2, r3}
10000698:	2500      	movs	r5, #0
1000069a:	0a1c      	lsrs	r4, r3, #8
1000069c:	d104      	bne.n	100006a8 <y64_x48+0x1a>
1000069e:	021b      	lsls	r3, r3, #8
100006a0:	0e16      	lsrs	r6, r2, #24
100006a2:	4333      	orrs	r3, r6
100006a4:	0212      	lsls	r2, r2, #8
100006a6:	3508      	adds	r5, #8
100006a8:	0b1c      	lsrs	r4, r3, #12
100006aa:	d104      	bne.n	100006b6 <y64_x48+0x28>
100006ac:	011b      	lsls	r3, r3, #4
100006ae:	0f16      	lsrs	r6, r2, #28
100006b0:	4333      	orrs	r3, r6
100006b2:	0112      	lsls	r2, r2, #4
100006b4:	3504      	adds	r5, #4
100006b6:	0b9c      	lsrs	r4, r3, #14
100006b8:	d104      	bne.n	100006c4 <y64_x48+0x36>
100006ba:	009b      	lsls	r3, r3, #2
100006bc:	0f96      	lsrs	r6, r2, #30
100006be:	4333      	orrs	r3, r6
100006c0:	0092      	lsls	r2, r2, #2
100006c2:	3502      	adds	r5, #2
100006c4:	0bdc      	lsrs	r4, r3, #15
100006c6:	d102      	bne.n	100006ce <y64_x48+0x40>
100006c8:	1892      	adds	r2, r2, r2
100006ca:	415b      	adcs	r3, r3
100006cc:	3501      	adds	r5, #1
100006ce:	001c      	movs	r4, r3
100006d0:	1897      	adds	r7, r2, r2
100006d2:	4164      	adcs	r4, r4
100006d4:	3401      	adds	r4, #1
100006d6:	4f46      	ldr	r7, [pc, #280]	; (100007f0 <y64_x64+0x58>)
100006d8:	667c      	str	r4, [r7, #100]	; 0x64
100006da:	4c46      	ldr	r4, [pc, #280]	; (100007f4 <y64_x64+0x5c>)
100006dc:	663c      	str	r4, [r7, #96]	; 0x60
100006de:	0c0e      	lsrs	r6, r1, #16
100006e0:	e7ff      	b.n	100006e2 <y64_x48+0x54>
100006e2:	e7ff      	b.n	100006e4 <y64_x48+0x56>
100006e4:	e7ff      	b.n	100006e6 <y64_x48+0x58>
100006e6:	46c0      	nop			; (mov r8, r8)
100006e8:	6f3c      	ldr	r4, [r7, #112]	; 0x70
100006ea:	4366      	muls	r6, r4
100006ec:	0c36      	lsrs	r6, r6, #16
100006ee:	0377      	lsls	r7, r6, #13
100006f0:	46be      	mov	lr, r7
100006f2:	b297      	uxth	r7, r2
100006f4:	4377      	muls	r7, r6
100006f6:	1bc0      	subs	r0, r0, r7
100006f8:	d200      	bcs.n	100006fc <y64_x48+0x6e>
100006fa:	3901      	subs	r1, #1
100006fc:	1bc0      	subs	r0, r0, r7
100006fe:	d200      	bcs.n	10000702 <y64_x48+0x74>
10000700:	3901      	subs	r1, #1
10000702:	b29f      	uxth	r7, r3
10000704:	4377      	muls	r7, r6
10000706:	1bc9      	subs	r1, r1, r7
10000708:	1bc9      	subs	r1, r1, r7
1000070a:	0c17      	lsrs	r7, r2, #16
1000070c:	4377      	muls	r7, r6
1000070e:	047e      	lsls	r6, r7, #17
10000710:	0bff      	lsrs	r7, r7, #15
10000712:	1b80      	subs	r0, r0, r6
10000714:	41b9      	sbcs	r1, r7
10000716:	08ce      	lsrs	r6, r1, #3
10000718:	4366      	muls	r6, r4
1000071a:	0c36      	lsrs	r6, r6, #16
1000071c:	2d0c      	cmp	r5, #12
1000071e:	db33      	blt.n	10000788 <last1>
10000720:	44b6      	add	lr, r6
10000722:	0b12      	lsrs	r2, r2, #12
10000724:	051f      	lsls	r7, r3, #20
10000726:	433a      	orrs	r2, r7
10000728:	0b1b      	lsrs	r3, r3, #12
1000072a:	b297      	uxth	r7, r2
1000072c:	4377      	muls	r7, r6
1000072e:	1bc0      	subs	r0, r0, r7
10000730:	d200      	bcs.n	10000734 <y64_x48+0xa6>
10000732:	3901      	subs	r1, #1
10000734:	b29f      	uxth	r7, r3
10000736:	4377      	muls	r7, r6
10000738:	1bc9      	subs	r1, r1, r7
1000073a:	0c17      	lsrs	r7, r2, #16
1000073c:	4377      	muls	r7, r6
1000073e:	043e      	lsls	r6, r7, #16
10000740:	0c3f      	lsrs	r7, r7, #16
10000742:	1b80      	subs	r0, r0, r6
10000744:	41b9      	sbcs	r1, r7
10000746:	0d86      	lsrs	r6, r0, #22
10000748:	028f      	lsls	r7, r1, #10
1000074a:	433e      	orrs	r6, r7
1000074c:	4366      	muls	r6, r4
1000074e:	2729      	movs	r7, #41	; 0x29
10000750:	1b7f      	subs	r7, r7, r5
10000752:	40fe      	lsrs	r6, r7
10000754:	3d0c      	subs	r5, #12
10000756:	4677      	mov	r7, lr
10000758:	40af      	lsls	r7, r5
1000075a:	19bf      	adds	r7, r7, r6
1000075c:	bc30      	pop	{r4, r5}
1000075e:	b2a2      	uxth	r2, r4
10000760:	b2ab      	uxth	r3, r5
10000762:	4372      	muls	r2, r6
10000764:	4373      	muls	r3, r6
10000766:	1a80      	subs	r0, r0, r2
10000768:	4199      	sbcs	r1, r3
1000076a:	0c22      	lsrs	r2, r4, #16
1000076c:	4372      	muls	r2, r6
1000076e:	0c13      	lsrs	r3, r2, #16
10000770:	0412      	lsls	r2, r2, #16
10000772:	1a80      	subs	r0, r0, r2
10000774:	4199      	sbcs	r1, r3
10000776:	0002      	movs	r2, r0
10000778:	000b      	movs	r3, r1
1000077a:	3701      	adds	r7, #1
1000077c:	1b00      	subs	r0, r0, r4
1000077e:	41a9      	sbcs	r1, r5
10000780:	d2f9      	bcs.n	10000776 <y64_x48+0xe8>
10000782:	1e78      	subs	r0, r7, #1
10000784:	2100      	movs	r1, #0
10000786:	bdf0      	pop	{r4, r5, r6, r7, pc}

10000788 <last1>:
10000788:	270c      	movs	r7, #12
1000078a:	1b7f      	subs	r7, r7, r5
1000078c:	40fe      	lsrs	r6, r7
1000078e:	4677      	mov	r7, lr
10000790:	0b7f      	lsrs	r7, r7, #13
10000792:	40af      	lsls	r7, r5
10000794:	19ff      	adds	r7, r7, r7
10000796:	e7e0      	b.n	1000075a <y64_x48+0xcc>

10000798 <y64_x64>:
10000798:	2400      	movs	r4, #0
1000079a:	1c5d      	adds	r5, r3, #1
1000079c:	d007      	beq.n	100007ae <y64_x64+0x16>
1000079e:	4f14      	ldr	r7, [pc, #80]	; (100007f0 <y64_x64+0x58>)
100007a0:	667d      	str	r5, [r7, #100]	; 0x64
100007a2:	6639      	str	r1, [r7, #96]	; 0x60
100007a4:	e7ff      	b.n	100007a6 <y64_x64+0xe>
100007a6:	e7ff      	b.n	100007a8 <y64_x64+0x10>
100007a8:	e7ff      	b.n	100007aa <y64_x64+0x12>
100007aa:	e7ff      	b.n	100007ac <y64_x64+0x14>
100007ac:	6f3c      	ldr	r4, [r7, #112]	; 0x70
100007ae:	b295      	uxth	r5, r2
100007b0:	b29e      	uxth	r6, r3
100007b2:	4365      	muls	r5, r4
100007b4:	4366      	muls	r6, r4
100007b6:	1b40      	subs	r0, r0, r5
100007b8:	41b1      	sbcs	r1, r6
100007ba:	0c15      	lsrs	r5, r2, #16
100007bc:	0c1e      	lsrs	r6, r3, #16
100007be:	4365      	muls	r5, r4
100007c0:	4366      	muls	r6, r4
100007c2:	0436      	lsls	r6, r6, #16
100007c4:	0c2f      	lsrs	r7, r5, #16
100007c6:	433e      	orrs	r6, r7
100007c8:	042d      	lsls	r5, r5, #16
100007ca:	1b40      	subs	r0, r0, r5
100007cc:	41b1      	sbcs	r1, r6
100007ce:	4299      	cmp	r1, r3
100007d0:	d204      	bcs.n	100007dc <y64_x64+0x44>
100007d2:	0002      	movs	r2, r0
100007d4:	000b      	movs	r3, r1
100007d6:	0020      	movs	r0, r4
100007d8:	2100      	movs	r1, #0
100007da:	bdf0      	pop	{r4, r5, r6, r7, pc}
100007dc:	d101      	bne.n	100007e2 <y64_x64+0x4a>
100007de:	4290      	cmp	r0, r2
100007e0:	d3f7      	bcc.n	100007d2 <y64_x64+0x3a>
100007e2:	1a80      	subs	r0, r0, r2
100007e4:	4199      	sbcs	r1, r3
100007e6:	3401      	adds	r4, #1
100007e8:	4299      	cmp	r1, r3
100007ea:	d3f2      	bcc.n	100007d2 <y64_x64+0x3a>
100007ec:	e7f6      	b.n	100007dc <y64_x64+0x44>
100007ee:	0000      	.short	0x0000
100007f0:	d0000000 	.word	0xd0000000
100007f4:	ffffffff 	.word	0xffffffff

100007f8 <hw_divider_save_state>:
100007f8:	b530      	push	{r4, r5, lr}
100007fa:	4d05      	ldr	r5, [pc, #20]	; (10000810 <hw_divider_save_state+0x18>)
100007fc:	6fac      	ldr	r4, [r5, #120]	; 0x78
100007fe:	0864      	lsrs	r4, r4, #1
10000800:	d3fd      	bcc.n	100007fe <hw_divider_save_state+0x6>
10000802:	6e29      	ldr	r1, [r5, #96]	; 0x60
10000804:	6e6a      	ldr	r2, [r5, #100]	; 0x64
10000806:	6f6b      	ldr	r3, [r5, #116]	; 0x74
10000808:	6f2c      	ldr	r4, [r5, #112]	; 0x70
1000080a:	c01e      	stmia	r0!, {r1, r2, r3, r4}
1000080c:	bd30      	pop	{r4, r5, pc}
1000080e:	0000      	.short	0x0000
10000810:	d0000000 	.word	0xd0000000

10000814 <hw_divider_restore_state>:
10000814:	b530      	push	{r4, r5, lr}
10000816:	4d03      	ldr	r5, [pc, #12]	; (10000824 <hw_divider_restore_state+0x10>)
10000818:	c81e      	ldmia	r0!, {r1, r2, r3, r4}
1000081a:	6629      	str	r1, [r5, #96]	; 0x60
1000081c:	666a      	str	r2, [r5, #100]	; 0x64
1000081e:	676b      	str	r3, [r5, #116]	; 0x74
10000820:	672c      	str	r4, [r5, #112]	; 0x70
10000822:	bd30      	pop	{r4, r5, pc}
10000824:	d0000000 	.word	0xd0000000

10000828 <__wrap___aeabi_drsub>:
10000828:	4048      	eors	r0, r1
1000082a:	4041      	eors	r1, r0
1000082c:	4048      	eors	r0, r1

1000082e <__wrap___aeabi_dsub>:
1000082e:	b418      	push	{r3, r4}
10000830:	4b11      	ldr	r3, [pc, #68]	; (10000878 <__wrap___aeabi_dmul+0x14>)
10000832:	685b      	ldr	r3, [r3, #4]
10000834:	46fc      	mov	ip, pc
10000836:	9301      	str	r3, [sp, #4]
10000838:	bd08      	pop	{r3, pc}
1000083a:	df04      	.short	0xdf04
1000083c:	10000a07 	.word	0x10000a07

10000840 <__wrap___aeabi_dadd>:
10000840:	b418      	push	{r3, r4}
10000842:	4b0d      	ldr	r3, [pc, #52]	; (10000878 <__wrap___aeabi_dmul+0x14>)
10000844:	681b      	ldr	r3, [r3, #0]
10000846:	46fc      	mov	ip, pc
10000848:	9301      	str	r3, [sp, #4]
1000084a:	bd08      	pop	{r3, pc}
1000084c:	0a11df00 	.word	0x0a11df00
10000850:	1000      	.short	0x1000

10000852 <__wrap___aeabi_ddiv>:
10000852:	b418      	push	{r3, r4}
10000854:	4b08      	ldr	r3, [pc, #32]	; (10000878 <__wrap___aeabi_dmul+0x14>)
10000856:	68db      	ldr	r3, [r3, #12]
10000858:	46fc      	mov	ip, pc
1000085a:	9301      	str	r3, [sp, #4]
1000085c:	bd08      	pop	{r3, pc}
1000085e:	df0c      	.short	0xdf0c
10000860:	10000cc9 	.word	0x10000cc9

10000864 <__wrap___aeabi_dmul>:
10000864:	b418      	push	{r3, r4}
10000866:	4b04      	ldr	r3, [pc, #16]	; (10000878 <__wrap___aeabi_dmul+0x14>)
10000868:	689b      	ldr	r3, [r3, #8]
1000086a:	46fc      	mov	ip, pc
1000086c:	9301      	str	r3, [sp, #4]
1000086e:	bd08      	pop	{r3, pc}
10000870:	0b6ddf08 	.word	0x0b6ddf08
10000874:	00001000 	.word	0x00001000
10000878:	20003060 	.word	0x20003060

1000087c <__wrap___aeabi_cdrcmple>:
1000087c:	b5ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7, lr}
1000087e:	4050      	eors	r0, r2
10000880:	4042      	eors	r2, r0
10000882:	4050      	eors	r0, r2
10000884:	4059      	eors	r1, r3
10000886:	404b      	eors	r3, r1
10000888:	4059      	eors	r1, r3
1000088a:	e000      	b.n	1000088e <__aeabi_dfcmple_guts>

1000088c <__wrap___aeabi_cdcmpeq>:
1000088c:	b5ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7, lr}

1000088e <__aeabi_dfcmple_guts>:
1000088e:	4f15      	ldr	r7, [pc, #84]	; (100008e4 <__aeabi_dfcmple_guts+0x56>)
10000890:	004c      	lsls	r4, r1, #1
10000892:	0d64      	lsrs	r4, r4, #21
10000894:	d003      	beq.n	1000089e <__aeabi_dfcmple_guts+0x10>
10000896:	42bc      	cmp	r4, r7
10000898:	d104      	bne.n	100008a4 <__aeabi_dfcmple_guts+0x16>
1000089a:	030c      	lsls	r4, r1, #12
1000089c:	d814      	bhi.n	100008c8 <__aeabi_dfcmple_guts+0x3a>
1000089e:	2000      	movs	r0, #0
100008a0:	0d09      	lsrs	r1, r1, #20
100008a2:	0509      	lsls	r1, r1, #20
100008a4:	005c      	lsls	r4, r3, #1
100008a6:	0d64      	lsrs	r4, r4, #21
100008a8:	d003      	beq.n	100008b2 <__aeabi_dfcmple_guts+0x24>
100008aa:	42bc      	cmp	r4, r7
100008ac:	d104      	bne.n	100008b8 <__aeabi_dfcmple_guts+0x2a>
100008ae:	031c      	lsls	r4, r3, #12
100008b0:	d80a      	bhi.n	100008c8 <__aeabi_dfcmple_guts+0x3a>
100008b2:	2200      	movs	r2, #0
100008b4:	0d1b      	lsrs	r3, r3, #20
100008b6:	051b      	lsls	r3, r3, #20
100008b8:	2601      	movs	r6, #1
100008ba:	404b      	eors	r3, r1
100008bc:	d409      	bmi.n	100008d2 <__aeabi_dfcmple_guts+0x44>
100008be:	404b      	eors	r3, r1
100008c0:	d503      	bpl.n	100008ca <__aeabi_dfcmple_guts+0x3c>
100008c2:	428b      	cmp	r3, r1
100008c4:	d100      	bne.n	100008c8 <__aeabi_dfcmple_guts+0x3a>
100008c6:	4282      	cmp	r2, r0
100008c8:	bdff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7, pc}
100008ca:	4299      	cmp	r1, r3
100008cc:	d1fc      	bne.n	100008c8 <__aeabi_dfcmple_guts+0x3a>
100008ce:	4290      	cmp	r0, r2
100008d0:	bdff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7, pc}
100008d2:	430b      	orrs	r3, r1
100008d4:	18db      	adds	r3, r3, r3
100008d6:	4303      	orrs	r3, r0
100008d8:	4313      	orrs	r3, r2
100008da:	d0f5      	beq.n	100008c8 <__aeabi_dfcmple_guts+0x3a>
100008dc:	43c9      	mvns	r1, r1
100008de:	1849      	adds	r1, r1, r1
100008e0:	bdff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7, pc}
100008e2:	0000      	.short	0x0000
100008e4:	000007ff 	.word	0x000007ff

100008e8 <__wrap___aeabi_dcmplt>:
100008e8:	b500      	push	{lr}
100008ea:	f7ff ffcf 	bl	1000088c <__wrap___aeabi_cdcmpeq>
100008ee:	4180      	sbcs	r0, r0
100008f0:	bd00      	pop	{pc}
100008f2:	46c0      	nop			; (mov r8, r8)

100008f4 <__wrap___aeabi_dcmple>:
100008f4:	b500      	push	{lr}
100008f6:	f7ff ffc9 	bl	1000088c <__wrap___aeabi_cdcmpeq>
100008fa:	d901      	bls.n	10000900 <__wrap___aeabi_dcmple+0xc>
100008fc:	2000      	movs	r0, #0
100008fe:	bd00      	pop	{pc}
10000900:	2001      	movs	r0, #1
10000902:	bd00      	pop	{pc}

10000904 <__wrap___aeabi_dcmpge>:
10000904:	b500      	push	{lr}
10000906:	f7ff ffb9 	bl	1000087c <__wrap___aeabi_cdrcmple>
1000090a:	d901      	bls.n	10000910 <__wrap___aeabi_dcmpge+0xc>
1000090c:	2000      	movs	r0, #0
1000090e:	bd00      	pop	{pc}
10000910:	2001      	movs	r0, #1
10000912:	bd00      	pop	{pc}

10000914 <__wrap___aeabi_dcmpgt>:
10000914:	b500      	push	{lr}
10000916:	f7ff ffb1 	bl	1000087c <__wrap___aeabi_cdrcmple>
1000091a:	4180      	sbcs	r0, r0
1000091c:	bd00      	pop	{pc}

1000091e <__wrap___aeabi_dcmpun>:
1000091e:	2001      	movs	r0, #1
10000920:	0540      	lsls	r0, r0, #21
10000922:	004a      	lsls	r2, r1, #1
10000924:	1812      	adds	r2, r2, r0
10000926:	d804      	bhi.n	10000932 <__wrap___aeabi_dcmpun+0x14>
10000928:	005a      	lsls	r2, r3, #1
1000092a:	1812      	adds	r2, r2, r0
1000092c:	d801      	bhi.n	10000932 <__wrap___aeabi_dcmpun+0x14>
1000092e:	2000      	movs	r0, #0
10000930:	4770      	bx	lr
10000932:	2001      	movs	r0, #1
10000934:	4770      	bx	lr
10000936:	2000      	movs	r0, #0
10000938:	4770      	bx	lr
	...

1000093c <__wrap___aeabi_ui2d>:
1000093c:	2100      	movs	r1, #0
1000093e:	2800      	cmp	r0, #0
10000940:	d105      	bne.n	1000094e <__wrap___aeabi_i2d+0xa>
10000942:	4770      	bx	lr

10000944 <__wrap___aeabi_i2d>:
10000944:	17c1      	asrs	r1, r0, #31
10000946:	4048      	eors	r0, r1
10000948:	1a40      	subs	r0, r0, r1
1000094a:	d0fa      	beq.n	10000942 <__wrap___aeabi_ui2d+0x6>
1000094c:	07c9      	lsls	r1, r1, #31
1000094e:	b513      	push	{r0, r1, r4, lr}
10000950:	4b06      	ldr	r3, [pc, #24]	; (1000096c <__wrap___aeabi_i2d+0x28>)
10000952:	681b      	ldr	r3, [r3, #0]
10000954:	4798      	blx	r3
10000956:	bc0c      	pop	{r2, r3}
10000958:	1c44      	adds	r4, r0, #1
1000095a:	40a2      	lsls	r2, r4
1000095c:	0510      	lsls	r0, r2, #20
1000095e:	0b12      	lsrs	r2, r2, #12
10000960:	4903      	ldr	r1, [pc, #12]	; (10000970 <__wrap___aeabi_i2d+0x2c>)
10000962:	1b09      	subs	r1, r1, r4
10000964:	0509      	lsls	r1, r1, #20
10000966:	4319      	orrs	r1, r3
10000968:	4311      	orrs	r1, r2
1000096a:	bd10      	pop	{r4, pc}
1000096c:	20012748 	.word	0x20012748
10000970:	0000041f 	.word	0x0000041f

10000974 <__wrap___aeabi_d2iz>:
10000974:	b510      	push	{r4, lr}
10000976:	004c      	lsls	r4, r1, #1
10000978:	0d62      	lsrs	r2, r4, #21
1000097a:	2380      	movs	r3, #128	; 0x80
1000097c:	18d2      	adds	r2, r2, r3
1000097e:	00db      	lsls	r3, r3, #3
10000980:	1ad2      	subs	r2, r2, r3
10000982:	055b      	lsls	r3, r3, #21
10000984:	2a7e      	cmp	r2, #126	; 0x7e
10000986:	dd10      	ble.n	100009aa <__wrap___aeabi_d2iz+0x36>
10000988:	3a9e      	subs	r2, #158	; 0x9e
1000098a:	da13      	bge.n	100009b4 <__wrap___aeabi_d2iz+0x40>
1000098c:	17cc      	asrs	r4, r1, #31
1000098e:	0309      	lsls	r1, r1, #12
10000990:	0849      	lsrs	r1, r1, #1
10000992:	4319      	orrs	r1, r3
10000994:	4252      	negs	r2, r2
10000996:	40d1      	lsrs	r1, r2
10000998:	0064      	lsls	r4, r4, #1
1000099a:	3401      	adds	r4, #1
1000099c:	3215      	adds	r2, #21
1000099e:	2a20      	cmp	r2, #32
100009a0:	da05      	bge.n	100009ae <__wrap___aeabi_d2iz+0x3a>
100009a2:	40d0      	lsrs	r0, r2
100009a4:	4308      	orrs	r0, r1
100009a6:	4360      	muls	r0, r4
100009a8:	bd10      	pop	{r4, pc}
100009aa:	2000      	movs	r0, #0
100009ac:	bd10      	pop	{r4, pc}
100009ae:	4608      	mov	r0, r1
100009b0:	4360      	muls	r0, r4
100009b2:	bd10      	pop	{r4, pc}
100009b4:	0fc8      	lsrs	r0, r1, #31
100009b6:	18c0      	adds	r0, r0, r3
100009b8:	3801      	subs	r0, #1
100009ba:	bd10      	pop	{r4, pc}

100009bc <__wrap___aeabi_d2uiz>:
100009bc:	b418      	push	{r3, r4}
100009be:	4b04      	ldr	r3, [pc, #16]	; (100009d0 <__wrap___aeabi_d2uiz+0x14>)
100009c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100009c2:	46fc      	mov	ip, pc
100009c4:	9301      	str	r3, [sp, #4]
100009c6:	bd08      	pop	{r3, pc}
100009c8:	0ef5df24 	.word	0x0ef5df24
100009cc:	00001000 	.word	0x00001000
100009d0:	20003060 	.word	0x20003060

100009d4 <double_table_shim_on_use_helper>:
100009d4:	b507      	push	{r0, r1, r2, lr}
100009d6:	4660      	mov	r0, ip
100009d8:	8801      	ldrh	r1, [r0, #0]
100009da:	0a0a      	lsrs	r2, r1, #8
100009dc:	3002      	adds	r0, #2
100009de:	2adf      	cmp	r2, #223	; 0xdf
100009e0:	d1fa      	bne.n	100009d8 <double_table_shim_on_use_helper+0x4>
100009e2:	b2c9      	uxtb	r1, r1
100009e4:	0882      	lsrs	r2, r0, #2
100009e6:	d304      	bcc.n	100009f2 <double_table_shim_on_use_helper+0x1e>
100009e8:	8802      	ldrh	r2, [r0, #0]
100009ea:	8840      	ldrh	r0, [r0, #2]
100009ec:	0400      	lsls	r0, r0, #16
100009ee:	4310      	orrs	r0, r2
100009f0:	e000      	b.n	100009f4 <double_table_shim_on_use_helper+0x20>
100009f2:	6800      	ldr	r0, [r0, #0]
100009f4:	4a01      	ldr	r2, [pc, #4]	; (100009fc <double_table_shim_on_use_helper+0x28>)
100009f6:	5050      	str	r0, [r2, r1]
100009f8:	9003      	str	r0, [sp, #12]
100009fa:	bd07      	pop	{r0, r1, r2, pc}
100009fc:	20003060 	.word	0x20003060

10000a00 <drsub_shim>:
10000a00:	b40f      	push	{r0, r1, r2, r3}
10000a02:	bc03      	pop	{r0, r1}
10000a04:	bc0c      	pop	{r2, r3}

10000a06 <dsub_shim>:
10000a06:	b5f0      	push	{r4, r5, r6, r7, lr}
10000a08:	2401      	movs	r4, #1
10000a0a:	07e4      	lsls	r4, r4, #31
10000a0c:	4063      	eors	r3, r4
10000a0e:	e000      	b.n	10000a12 <da_entry>

10000a10 <dadd_shim>:
10000a10:	b5f0      	push	{r4, r5, r6, r7, lr}

10000a12 <da_entry>:
10000a12:	0d0c      	lsrs	r4, r1, #20
10000a14:	0fcf      	lsrs	r7, r1, #31
10000a16:	1e66      	subs	r6, r4, #1
10000a18:	0536      	lsls	r6, r6, #20
10000a1a:	1b89      	subs	r1, r1, r6
10000a1c:	0564      	lsls	r4, r4, #21
10000a1e:	d303      	bcc.n	10000a28 <l7_1>
10000a20:	43c9      	mvns	r1, r1
10000a22:	4240      	negs	r0, r0
10000a24:	d300      	bcc.n	10000a28 <l7_1>
10000a26:	3101      	adds	r1, #1

10000a28 <l7_1>:
10000a28:	0d64      	lsrs	r4, r4, #21
10000a2a:	d003      	beq.n	10000a34 <l7_2>
10000a2c:	1c66      	adds	r6, r4, #1
10000a2e:	0af6      	lsrs	r6, r6, #11
10000a30:	d007      	beq.n	10000a42 <l7_3>
10000a32:	1be4      	subs	r4, r4, r7

10000a34 <l7_2>:
10000a34:	2000      	movs	r0, #0
10000a36:	007f      	lsls	r7, r7, #1
10000a38:	1c79      	adds	r1, r7, #1
10000a3a:	0789      	lsls	r1, r1, #30
10000a3c:	1289      	asrs	r1, r1, #10
10000a3e:	3c80      	subs	r4, #128	; 0x80
10000a40:	0324      	lsls	r4, r4, #12

10000a42 <l7_3>:
10000a42:	0d1d      	lsrs	r5, r3, #20
10000a44:	0fdf      	lsrs	r7, r3, #31
10000a46:	1e6e      	subs	r6, r5, #1
10000a48:	0536      	lsls	r6, r6, #20
10000a4a:	1b9b      	subs	r3, r3, r6
10000a4c:	056d      	lsls	r5, r5, #21
10000a4e:	d303      	bcc.n	10000a58 <l8_1>
10000a50:	43db      	mvns	r3, r3
10000a52:	4252      	negs	r2, r2
10000a54:	d300      	bcc.n	10000a58 <l8_1>
10000a56:	3301      	adds	r3, #1

10000a58 <l8_1>:
10000a58:	0d6d      	lsrs	r5, r5, #21
10000a5a:	d003      	beq.n	10000a64 <l8_2>
10000a5c:	1c6e      	adds	r6, r5, #1
10000a5e:	0af6      	lsrs	r6, r6, #11
10000a60:	d007      	beq.n	10000a72 <l8_3>
10000a62:	1bed      	subs	r5, r5, r7

10000a64 <l8_2>:
10000a64:	2200      	movs	r2, #0
10000a66:	007f      	lsls	r7, r7, #1
10000a68:	1c7b      	adds	r3, r7, #1
10000a6a:	079b      	lsls	r3, r3, #30
10000a6c:	129b      	asrs	r3, r3, #10
10000a6e:	3d80      	subs	r5, #128	; 0x80
10000a70:	032d      	lsls	r5, r5, #12

10000a72 <l8_3>:
10000a72:	1b2f      	subs	r7, r5, r4
10000a74:	1b66      	subs	r6, r4, r5
10000a76:	d458      	bmi.n	10000b2a <da_ygtx>
10000a78:	46a4      	mov	ip, r4
10000a7a:	2e20      	cmp	r6, #32
10000a7c:	da46      	bge.n	10000b0c <da_xrgty>
10000a7e:	3720      	adds	r7, #32
10000a80:	0014      	movs	r4, r2
10000a82:	40bc      	lsls	r4, r7

10000a84 <da_xgty0>:
10000a84:	001d      	movs	r5, r3
10000a86:	40bd      	lsls	r5, r7
10000a88:	40f2      	lsrs	r2, r6
10000a8a:	4133      	asrs	r3, r6
10000a8c:	432a      	orrs	r2, r5

10000a8e <da_add>:
10000a8e:	1880      	adds	r0, r0, r2
10000a90:	4159      	adcs	r1, r3

10000a92 <da_pack>:
10000a92:	0fcb      	lsrs	r3, r1, #31
10000a94:	d005      	beq.n	10000aa2 <da_pack+0x10>
10000a96:	43c9      	mvns	r1, r1
10000a98:	43c0      	mvns	r0, r0
10000a9a:	2200      	movs	r2, #0
10000a9c:	4264      	negs	r4, r4
10000a9e:	4150      	adcs	r0, r2
10000aa0:	4151      	adcs	r1, r2
10000aa2:	4662      	mov	r2, ip
10000aa4:	0d4d      	lsrs	r5, r1, #21
10000aa6:	d128      	bne.n	10000afa <da_0>
10000aa8:	0d0d      	lsrs	r5, r1, #20
10000aaa:	d107      	bne.n	10000abc <da_1>
10000aac:	2800      	cmp	r0, #0
10000aae:	d01f      	beq.n	10000af0 <da_5>

10000ab0 <da_2>:
10000ab0:	1924      	adds	r4, r4, r4
10000ab2:	4140      	adcs	r0, r0
10000ab4:	4149      	adcs	r1, r1
10000ab6:	3a01      	subs	r2, #1
10000ab8:	0d0d      	lsrs	r5, r1, #20
10000aba:	d0f9      	beq.n	10000ab0 <da_2>

10000abc <da_1>:
10000abc:	0064      	lsls	r4, r4, #1
10000abe:	d306      	bcc.n	10000ace <da_3>

10000ac0 <da_4>:
10000ac0:	3001      	adds	r0, #1
10000ac2:	d300      	bcc.n	10000ac6 <da_4+0x6>
10000ac4:	3101      	adds	r1, #1
10000ac6:	2c00      	cmp	r4, #0
10000ac8:	d101      	bne.n	10000ace <da_3>
10000aca:	0840      	lsrs	r0, r0, #1
10000acc:	0040      	lsls	r0, r0, #1

10000ace <da_3>:
10000ace:	3a01      	subs	r2, #1
10000ad0:	d40b      	bmi.n	10000aea <da_6>
10000ad2:	1c94      	adds	r4, r2, #2
10000ad4:	0ae4      	lsrs	r4, r4, #11
10000ad6:	d104      	bne.n	10000ae2 <da_7>
10000ad8:	0512      	lsls	r2, r2, #20
10000ada:	4411      	add	r1, r2
10000adc:	07db      	lsls	r3, r3, #31
10000ade:	4419      	add	r1, r3
10000ae0:	bdf0      	pop	{r4, r5, r6, r7, pc}

10000ae2 <da_7>:
10000ae2:	07d9      	lsls	r1, r3, #31
10000ae4:	4b20      	ldr	r3, [pc, #128]	; (10000b68 <da_xmgty+0x4>)
10000ae6:	4319      	orrs	r1, r3
10000ae8:	e000      	b.n	10000aec <da_6+0x2>

10000aea <da_6>:
10000aea:	07d9      	lsls	r1, r3, #31
10000aec:	2000      	movs	r0, #0
10000aee:	bdf0      	pop	{r4, r5, r6, r7, pc}

10000af0 <da_5>:
10000af0:	2900      	cmp	r1, #0
10000af2:	d1dd      	bne.n	10000ab0 <da_2>
10000af4:	2c00      	cmp	r4, #0
10000af6:	d1db      	bne.n	10000ab0 <da_2>
10000af8:	bdf0      	pop	{r4, r5, r6, r7, pc}

10000afa <da_0>:
10000afa:	3201      	adds	r2, #1
10000afc:	07c6      	lsls	r6, r0, #31
10000afe:	0840      	lsrs	r0, r0, #1
10000b00:	07cd      	lsls	r5, r1, #31
10000b02:	4328      	orrs	r0, r5
10000b04:	0849      	lsrs	r1, r1, #1
10000b06:	2e00      	cmp	r6, #0
10000b08:	d0e1      	beq.n	10000ace <da_3>
10000b0a:	e7d9      	b.n	10000ac0 <da_4>

10000b0c <da_xrgty>:
10000b0c:	2e3c      	cmp	r6, #60	; 0x3c
10000b0e:	da29      	bge.n	10000b64 <da_xmgty>
10000b10:	3e20      	subs	r6, #32
10000b12:	3740      	adds	r7, #64	; 0x40
10000b14:	0014      	movs	r4, r2
10000b16:	40bc      	lsls	r4, r7
10000b18:	d000      	beq.n	10000b1c <da_xrgty+0x10>
10000b1a:	2401      	movs	r4, #1
10000b1c:	40f2      	lsrs	r2, r6
10000b1e:	4314      	orrs	r4, r2
10000b20:	001a      	movs	r2, r3
10000b22:	40bb      	lsls	r3, r7
10000b24:	431c      	orrs	r4, r3
10000b26:	17d3      	asrs	r3, r2, #31
10000b28:	e7ac      	b.n	10000a84 <da_xgty0>

10000b2a <da_ygtx>:
10000b2a:	46ac      	mov	ip, r5
10000b2c:	2f20      	cmp	r7, #32
10000b2e:	da08      	bge.n	10000b42 <da_yrgtx>
10000b30:	3620      	adds	r6, #32
10000b32:	0004      	movs	r4, r0
10000b34:	40b4      	lsls	r4, r6

10000b36 <da_ygtx0>:
10000b36:	000d      	movs	r5, r1
10000b38:	40b5      	lsls	r5, r6
10000b3a:	40f8      	lsrs	r0, r7
10000b3c:	4139      	asrs	r1, r7
10000b3e:	4328      	orrs	r0, r5
10000b40:	e7a5      	b.n	10000a8e <da_add>

10000b42 <da_yrgtx>:
10000b42:	2f3c      	cmp	r7, #60	; 0x3c
10000b44:	da0c      	bge.n	10000b60 <da_ymgtx>
10000b46:	3f20      	subs	r7, #32
10000b48:	3640      	adds	r6, #64	; 0x40
10000b4a:	0004      	movs	r4, r0
10000b4c:	40b4      	lsls	r4, r6
10000b4e:	d000      	beq.n	10000b52 <da_yrgtx+0x10>
10000b50:	2401      	movs	r4, #1
10000b52:	40f8      	lsrs	r0, r7
10000b54:	4304      	orrs	r4, r0
10000b56:	0008      	movs	r0, r1
10000b58:	40b1      	lsls	r1, r6
10000b5a:	430c      	orrs	r4, r1
10000b5c:	17c1      	asrs	r1, r0, #31
10000b5e:	e7ea      	b.n	10000b36 <da_ygtx0>

10000b60 <da_ymgtx>:
10000b60:	0010      	movs	r0, r2
10000b62:	0019      	movs	r1, r3

10000b64 <da_xmgty>:
10000b64:	2400      	movs	r4, #0
10000b66:	e794      	b.n	10000a92 <da_pack>
10000b68:	7ff00000 	.word	0x7ff00000

10000b6c <dmul_shim>:
10000b6c:	b5f0      	push	{r4, r5, r6, r7, lr}
10000b6e:	0d0c      	lsrs	r4, r1, #20
10000b70:	1e66      	subs	r6, r4, #1
10000b72:	0536      	lsls	r6, r6, #20
10000b74:	1b89      	subs	r1, r1, r6
10000b76:	0ae6      	lsrs	r6, r4, #11
10000b78:	0564      	lsls	r4, r4, #21
10000b7a:	0d64      	lsrs	r4, r4, #21
10000b7c:	d002      	beq.n	10000b84 <l11_1>
10000b7e:	1c65      	adds	r5, r4, #1
10000b80:	0aed      	lsrs	r5, r5, #11
10000b82:	d004      	beq.n	10000b8e <l11_2>

10000b84 <l11_1>:
10000b84:	2000      	movs	r0, #0
10000b86:	2101      	movs	r1, #1
10000b88:	0509      	lsls	r1, r1, #20
10000b8a:	3c80      	subs	r4, #128	; 0x80
10000b8c:	0324      	lsls	r4, r4, #12

10000b8e <l11_2>:
10000b8e:	46a4      	mov	ip, r4
10000b90:	0d1c      	lsrs	r4, r3, #20
10000b92:	1e67      	subs	r7, r4, #1
10000b94:	053f      	lsls	r7, r7, #20
10000b96:	1bdb      	subs	r3, r3, r7
10000b98:	0ae7      	lsrs	r7, r4, #11
10000b9a:	0564      	lsls	r4, r4, #21
10000b9c:	0d64      	lsrs	r4, r4, #21
10000b9e:	d002      	beq.n	10000ba6 <l12_1>
10000ba0:	1c65      	adds	r5, r4, #1
10000ba2:	0aed      	lsrs	r5, r5, #11
10000ba4:	d004      	beq.n	10000bb0 <l12_2>

10000ba6 <l12_1>:
10000ba6:	2200      	movs	r2, #0
10000ba8:	2301      	movs	r3, #1
10000baa:	051b      	lsls	r3, r3, #20
10000bac:	3c80      	subs	r4, #128	; 0x80
10000bae:	0324      	lsls	r4, r4, #12

10000bb0 <l12_2>:
10000bb0:	4077      	eors	r7, r6
10000bb2:	4464      	add	r4, ip
10000bb4:	b497      	push	{r0, r1, r2, r4, r7}
10000bb6:	b284      	uxth	r4, r0
10000bb8:	b296      	uxth	r6, r2
10000bba:	4374      	muls	r4, r6
10000bbc:	0c07      	lsrs	r7, r0, #16
10000bbe:	437e      	muls	r6, r7
10000bc0:	0c15      	lsrs	r5, r2, #16
10000bc2:	436f      	muls	r7, r5
10000bc4:	b280      	uxth	r0, r0
10000bc6:	4368      	muls	r0, r5
10000bc8:	1836      	adds	r6, r6, r0
10000bca:	d302      	bcc.n	10000bd2 <l13_1>
10000bcc:	2001      	movs	r0, #1
10000bce:	0400      	lsls	r0, r0, #16
10000bd0:	183f      	adds	r7, r7, r0

10000bd2 <l13_1>:
10000bd2:	0430      	lsls	r0, r6, #16
10000bd4:	0c35      	lsrs	r5, r6, #16
10000bd6:	1900      	adds	r0, r0, r4
10000bd8:	417d      	adcs	r5, r7
10000bda:	4684      	mov	ip, r0
10000bdc:	b288      	uxth	r0, r1
10000bde:	b29a      	uxth	r2, r3
10000be0:	4350      	muls	r0, r2
10000be2:	0c0c      	lsrs	r4, r1, #16
10000be4:	4362      	muls	r2, r4
10000be6:	0c1f      	lsrs	r7, r3, #16
10000be8:	437c      	muls	r4, r7
10000bea:	b28e      	uxth	r6, r1
10000bec:	437e      	muls	r6, r7
10000bee:	1992      	adds	r2, r2, r6
10000bf0:	d302      	bcc.n	10000bf8 <l14_1>
10000bf2:	2601      	movs	r6, #1
10000bf4:	0436      	lsls	r6, r6, #16
10000bf6:	19a4      	adds	r4, r4, r6

10000bf8 <l14_1>:
10000bf8:	0416      	lsls	r6, r2, #16
10000bfa:	0c17      	lsrs	r7, r2, #16
10000bfc:	1836      	adds	r6, r6, r0
10000bfe:	4167      	adcs	r7, r4
10000c00:	bc01      	pop	{r0}
10000c02:	b281      	uxth	r1, r0
10000c04:	b29a      	uxth	r2, r3
10000c06:	4351      	muls	r1, r2
10000c08:	0c04      	lsrs	r4, r0, #16
10000c0a:	4362      	muls	r2, r4
10000c0c:	0c1b      	lsrs	r3, r3, #16
10000c0e:	435c      	muls	r4, r3
10000c10:	b280      	uxth	r0, r0
10000c12:	4358      	muls	r0, r3
10000c14:	1812      	adds	r2, r2, r0
10000c16:	d302      	bcc.n	10000c1e <l15_1>
10000c18:	2001      	movs	r0, #1
10000c1a:	0400      	lsls	r0, r0, #16
10000c1c:	1824      	adds	r4, r4, r0

10000c1e <l15_1>:
10000c1e:	0410      	lsls	r0, r2, #16
10000c20:	0c13      	lsrs	r3, r2, #16
10000c22:	1840      	adds	r0, r0, r1
10000c24:	4163      	adcs	r3, r4
10000c26:	182d      	adds	r5, r5, r0
10000c28:	415e      	adcs	r6, r3
10000c2a:	2000      	movs	r0, #0
10000c2c:	4147      	adcs	r7, r0
10000c2e:	bc06      	pop	{r1, r2}
10000c30:	b288      	uxth	r0, r1
10000c32:	b293      	uxth	r3, r2
10000c34:	4358      	muls	r0, r3
10000c36:	0c0c      	lsrs	r4, r1, #16
10000c38:	4363      	muls	r3, r4
10000c3a:	0c12      	lsrs	r2, r2, #16
10000c3c:	4354      	muls	r4, r2
10000c3e:	b289      	uxth	r1, r1
10000c40:	4351      	muls	r1, r2
10000c42:	185b      	adds	r3, r3, r1
10000c44:	d302      	bcc.n	10000c4c <l16_1>
10000c46:	2101      	movs	r1, #1
10000c48:	0409      	lsls	r1, r1, #16
10000c4a:	1864      	adds	r4, r4, r1

10000c4c <l16_1>:
10000c4c:	0419      	lsls	r1, r3, #16
10000c4e:	0c1a      	lsrs	r2, r3, #16
10000c50:	1809      	adds	r1, r1, r0
10000c52:	4162      	adcs	r2, r4
10000c54:	186d      	adds	r5, r5, r1
10000c56:	4156      	adcs	r6, r2
10000c58:	2000      	movs	r0, #0
10000c5a:	4147      	adcs	r7, r0
10000c5c:	bc18      	pop	{r3, r4}
10000c5e:	02f9      	lsls	r1, r7, #11
10000c60:	0d72      	lsrs	r2, r6, #21
10000c62:	4311      	orrs	r1, r2
10000c64:	02f0      	lsls	r0, r6, #11
10000c66:	0d6a      	lsrs	r2, r5, #21
10000c68:	4310      	orrs	r0, r2
10000c6a:	02ed      	lsls	r5, r5, #11
10000c6c:	0d0a      	lsrs	r2, r1, #20
10000c6e:	d103      	bne.n	10000c78 <l16_1+0x2c>
10000c70:	196d      	adds	r5, r5, r5
10000c72:	4140      	adcs	r0, r0
10000c74:	4149      	adcs	r1, r1
10000c76:	3b01      	subs	r3, #1
10000c78:	4e12      	ldr	r6, [pc, #72]	; (10000cc4 <dm_1+0xa>)
10000c7a:	1b9b      	subs	r3, r3, r6
10000c7c:	0076      	lsls	r6, r6, #1
10000c7e:	42b3      	cmp	r3, r6
10000c80:	d20e      	bcs.n	10000ca0 <dm_0>
10000c82:	006d      	lsls	r5, r5, #1
10000c84:	d307      	bcc.n	10000c96 <l16_1+0x4a>
10000c86:	3001      	adds	r0, #1
10000c88:	2600      	movs	r6, #0
10000c8a:	4171      	adcs	r1, r6
10000c8c:	4666      	mov	r6, ip
10000c8e:	4335      	orrs	r5, r6
10000c90:	d101      	bne.n	10000c96 <l16_1+0x4a>
10000c92:	0840      	lsrs	r0, r0, #1
10000c94:	0040      	lsls	r0, r0, #1
10000c96:	051b      	lsls	r3, r3, #20
10000c98:	18c9      	adds	r1, r1, r3

10000c9a <dm_2>:
10000c9a:	07e4      	lsls	r4, r4, #31
10000c9c:	4421      	add	r1, r4
10000c9e:	bdf0      	pop	{r4, r5, r6, r7, pc}

10000ca0 <dm_0>:
10000ca0:	da0b      	bge.n	10000cba <dm_1>
10000ca2:	3301      	adds	r3, #1
10000ca4:	d106      	bne.n	10000cb4 <dm_0+0x14>
10000ca6:	3001      	adds	r0, #1
10000ca8:	d104      	bne.n	10000cb4 <dm_0+0x14>
10000caa:	3101      	adds	r1, #1
10000cac:	0d4f      	lsrs	r7, r1, #21
10000cae:	d001      	beq.n	10000cb4 <dm_0+0x14>
10000cb0:	0849      	lsrs	r1, r1, #1
10000cb2:	e7f2      	b.n	10000c9a <dm_2>
10000cb4:	07e1      	lsls	r1, r4, #31
10000cb6:	2000      	movs	r0, #0
10000cb8:	bdf0      	pop	{r4, r5, r6, r7, pc}

10000cba <dm_1>:
10000cba:	3601      	adds	r6, #1
10000cbc:	0531      	lsls	r1, r6, #20
10000cbe:	2000      	movs	r0, #0
10000cc0:	e7eb      	b.n	10000c9a <dm_2>
10000cc2:	0000      	.short	0x0000
10000cc4:	000003ff 	.word	0x000003ff

10000cc8 <ddiv_shim>:
10000cc8:	b5f0      	push	{r4, r5, r6, r7, lr}

10000cca <ddiv0>:
10000cca:	0d1c      	lsrs	r4, r3, #20
10000ccc:	1e67      	subs	r7, r4, #1
10000cce:	053f      	lsls	r7, r7, #20
10000cd0:	1bdb      	subs	r3, r3, r7
10000cd2:	0ae7      	lsrs	r7, r4, #11
10000cd4:	0564      	lsls	r4, r4, #21
10000cd6:	0d64      	lsrs	r4, r4, #21
10000cd8:	d002      	beq.n	10000ce0 <l19_1>
10000cda:	1c66      	adds	r6, r4, #1
10000cdc:	0af6      	lsrs	r6, r6, #11
10000cde:	d004      	beq.n	10000cea <l19_2>

10000ce0 <l19_1>:
10000ce0:	2200      	movs	r2, #0
10000ce2:	2301      	movs	r3, #1
10000ce4:	051b      	lsls	r3, r3, #20
10000ce6:	3c80      	subs	r4, #128	; 0x80
10000ce8:	0324      	lsls	r4, r4, #12

10000cea <l19_2>:
10000cea:	25d0      	movs	r5, #208	; 0xd0
10000cec:	062d      	lsls	r5, r5, #24
10000cee:	2600      	movs	r6, #0
10000cf0:	43f6      	mvns	r6, r6
10000cf2:	662e      	str	r6, [r5, #96]	; 0x60
10000cf4:	091e      	lsrs	r6, r3, #4
10000cf6:	666e      	str	r6, [r5, #100]	; 0x64
10000cf8:	0fce      	lsrs	r6, r1, #31
10000cfa:	19f6      	adds	r6, r6, r7
10000cfc:	46b4      	mov	ip, r6
10000cfe:	0049      	lsls	r1, r1, #1
10000d00:	0d4f      	lsrs	r7, r1, #21
10000d02:	d002      	beq.n	10000d0a <l19_2+0x20>
10000d04:	1c7e      	adds	r6, r7, #1
10000d06:	0af6      	lsrs	r6, r6, #11
10000d08:	d003      	beq.n	10000d12 <l19_2+0x28>
10000d0a:	2000      	movs	r0, #0
10000d0c:	2100      	movs	r1, #0
10000d0e:	3f40      	subs	r7, #64	; 0x40
10000d10:	033f      	lsls	r7, r7, #12
10000d12:	1b3e      	subs	r6, r7, r4
10000d14:	00b6      	lsls	r6, r6, #2
10000d16:	44b4      	add	ip, r6
10000d18:	3f01      	subs	r7, #1
10000d1a:	057f      	lsls	r7, r7, #21
10000d1c:	1bc9      	subs	r1, r1, r7
10000d1e:	0849      	lsrs	r1, r1, #1
10000d20:	6f2e      	ldr	r6, [r5, #112]	; 0x70
10000d22:	3601      	adds	r6, #1
10000d24:	0876      	lsrs	r6, r6, #1
10000d26:	029c      	lsls	r4, r3, #10
10000d28:	0d95      	lsrs	r5, r2, #22
10000d2a:	4325      	orrs	r5, r4
10000d2c:	4375      	muls	r5, r6
10000d2e:	13ed      	asrs	r5, r5, #15
10000d30:	4375      	muls	r5, r6
10000d32:	13ad      	asrs	r5, r5, #14
10000d34:	3501      	adds	r5, #1
10000d36:	106d      	asrs	r5, r5, #1
10000d38:	03f6      	lsls	r6, r6, #15
10000d3a:	1b76      	subs	r6, r6, r5
10000d3c:	b40c      	push	{r2, r3}
10000d3e:	02cc      	lsls	r4, r1, #11
10000d40:	0d45      	lsrs	r5, r0, #21
10000d42:	432c      	orrs	r4, r5
10000d44:	b2a2      	uxth	r2, r4
10000d46:	b2b3      	uxth	r3, r6
10000d48:	435a      	muls	r2, r3
10000d4a:	0c27      	lsrs	r7, r4, #16
10000d4c:	437b      	muls	r3, r7
10000d4e:	0c35      	lsrs	r5, r6, #16
10000d50:	436f      	muls	r7, r5
10000d52:	b2a4      	uxth	r4, r4
10000d54:	436c      	muls	r4, r5
10000d56:	191b      	adds	r3, r3, r4
10000d58:	d302      	bcc.n	10000d60 <l20_1>
10000d5a:	2401      	movs	r4, #1
10000d5c:	0424      	lsls	r4, r4, #16
10000d5e:	193f      	adds	r7, r7, r4

10000d60 <l20_1>:
10000d60:	041c      	lsls	r4, r3, #16
10000d62:	0c1d      	lsrs	r5, r3, #16
10000d64:	18a4      	adds	r4, r4, r2
10000d66:	417d      	adcs	r5, r7
10000d68:	1924      	adds	r4, r4, r4
10000d6a:	416d      	adcs	r5, r5
10000d6c:	9a00      	ldr	r2, [sp, #0]
10000d6e:	b291      	uxth	r1, r2
10000d70:	b2ac      	uxth	r4, r5
10000d72:	4361      	muls	r1, r4
10000d74:	0c17      	lsrs	r7, r2, #16
10000d76:	437c      	muls	r4, r7
10000d78:	0c2b      	lsrs	r3, r5, #16
10000d7a:	435f      	muls	r7, r3
10000d7c:	b292      	uxth	r2, r2
10000d7e:	435a      	muls	r2, r3
10000d80:	18a4      	adds	r4, r4, r2
10000d82:	d302      	bcc.n	10000d8a <l21_1>
10000d84:	2201      	movs	r2, #1
10000d86:	0412      	lsls	r2, r2, #16
10000d88:	18bf      	adds	r7, r7, r2

10000d8a <l21_1>:
10000d8a:	0422      	lsls	r2, r4, #16
10000d8c:	0c23      	lsrs	r3, r4, #16
10000d8e:	1852      	adds	r2, r2, r1
10000d90:	417b      	adcs	r3, r7
10000d92:	9c01      	ldr	r4, [sp, #4]
10000d94:	436c      	muls	r4, r5
10000d96:	191b      	adds	r3, r3, r4
10000d98:	0e52      	lsrs	r2, r2, #25
10000d9a:	01d9      	lsls	r1, r3, #7
10000d9c:	430a      	orrs	r2, r1
10000d9e:	0144      	lsls	r4, r0, #5
10000da0:	1aa0      	subs	r0, r4, r2
10000da2:	b281      	uxth	r1, r0
10000da4:	b2b2      	uxth	r2, r6
10000da6:	4351      	muls	r1, r2
10000da8:	1403      	asrs	r3, r0, #16
10000daa:	435a      	muls	r2, r3
10000dac:	0c36      	lsrs	r6, r6, #16
10000dae:	4373      	muls	r3, r6
10000db0:	b287      	uxth	r7, r0
10000db2:	4377      	muls	r7, r6
10000db4:	17d6      	asrs	r6, r2, #31
10000db6:	19d2      	adds	r2, r2, r7
10000db8:	2700      	movs	r7, #0
10000dba:	417e      	adcs	r6, r7
10000dbc:	0436      	lsls	r6, r6, #16
10000dbe:	199b      	adds	r3, r3, r6
10000dc0:	0417      	lsls	r7, r2, #16
10000dc2:	0c16      	lsrs	r6, r2, #16
10000dc4:	187f      	adds	r7, r7, r1
10000dc6:	415e      	adcs	r6, r3
10000dc8:	1673      	asrs	r3, r6, #25
10000dca:	18ed      	adds	r5, r5, r3
10000dcc:	01f3      	lsls	r3, r6, #7
10000dce:	2600      	movs	r6, #0
10000dd0:	3380      	adds	r3, #128	; 0x80
10000dd2:	4175      	adcs	r5, r6
10000dd4:	0fa9      	lsrs	r1, r5, #30
10000dd6:	d106      	bne.n	10000de6 <dd_0>
10000dd8:	0064      	lsls	r4, r4, #1
10000dda:	0a69      	lsrs	r1, r5, #9
10000ddc:	05e8      	lsls	r0, r5, #23
10000dde:	0a5b      	lsrs	r3, r3, #9
10000de0:	4318      	orrs	r0, r3
10000de2:	d209      	bcs.n	10000df8 <dd_1>
10000de4:	e02f      	b.n	10000e46 <dd_2>

10000de6 <dd_0>:
10000de6:	2204      	movs	r2, #4
10000de8:	4494      	add	ip, r2
10000dea:	3380      	adds	r3, #128	; 0x80
10000dec:	4175      	adcs	r5, r6
10000dee:	0aa9      	lsrs	r1, r5, #10
10000df0:	05a8      	lsls	r0, r5, #22
10000df2:	0a9b      	lsrs	r3, r3, #10
10000df4:	4318      	orrs	r0, r3
10000df6:	d326      	bcc.n	10000e46 <dd_2>

10000df8 <dd_1>:
10000df8:	4140      	adcs	r0, r0
10000dfa:	4149      	adcs	r1, r1
10000dfc:	0424      	lsls	r4, r4, #16
10000dfe:	9a00      	ldr	r2, [sp, #0]
10000e00:	9b01      	ldr	r3, [sp, #4]
10000e02:	000d      	movs	r5, r1
10000e04:	4355      	muls	r5, r2
10000e06:	1b64      	subs	r4, r4, r5
10000e08:	4343      	muls	r3, r0
10000e0a:	1ae4      	subs	r4, r4, r3
10000e0c:	b295      	uxth	r5, r2
10000e0e:	b286      	uxth	r6, r0
10000e10:	4375      	muls	r5, r6
10000e12:	0c17      	lsrs	r7, r2, #16
10000e14:	437e      	muls	r6, r7
10000e16:	0c03      	lsrs	r3, r0, #16
10000e18:	435f      	muls	r7, r3
10000e1a:	b292      	uxth	r2, r2
10000e1c:	435a      	muls	r2, r3
10000e1e:	18b6      	adds	r6, r6, r2
10000e20:	d302      	bcc.n	10000e28 <l23_1>
10000e22:	2201      	movs	r2, #1
10000e24:	0412      	lsls	r2, r2, #16
10000e26:	18bf      	adds	r7, r7, r2

10000e28 <l23_1>:
10000e28:	0432      	lsls	r2, r6, #16
10000e2a:	0c33      	lsrs	r3, r6, #16
10000e2c:	1952      	adds	r2, r2, r5
10000e2e:	417b      	adcs	r3, r7
10000e30:	4252      	negs	r2, r2
10000e32:	419c      	sbcs	r4, r3
10000e34:	2c00      	cmp	r4, #0
10000e36:	d402      	bmi.n	10000e3e <l23_1+0x16>
10000e38:	2200      	movs	r2, #0
10000e3a:	3001      	adds	r0, #1
10000e3c:	4151      	adcs	r1, r2
10000e3e:	0840      	lsrs	r0, r0, #1
10000e40:	07ca      	lsls	r2, r1, #31
10000e42:	4310      	orrs	r0, r2
10000e44:	0849      	lsrs	r1, r1, #1

10000e46 <dd_2>:
10000e46:	b002      	add	sp, #8
10000e48:	4662      	mov	r2, ip
10000e4a:	07d7      	lsls	r7, r2, #31
10000e4c:	1092      	asrs	r2, r2, #2
10000e4e:	4b08      	ldr	r3, [pc, #32]	; (10000e70 <dd_4+0x6>)
10000e50:	18d2      	adds	r2, r2, r3
10000e52:	4b08      	ldr	r3, [pc, #32]	; (10000e74 <dd_4+0xa>)
10000e54:	429a      	cmp	r2, r3
10000e56:	d203      	bcs.n	10000e60 <dd_3>
10000e58:	0512      	lsls	r2, r2, #20
10000e5a:	1889      	adds	r1, r1, r2

10000e5c <dd_5>:
10000e5c:	19c9      	adds	r1, r1, r7
10000e5e:	bdf0      	pop	{r4, r5, r6, r7, pc}

10000e60 <dd_3>:
10000e60:	2000      	movs	r0, #0
10000e62:	2a00      	cmp	r2, #0
10000e64:	dc01      	bgt.n	10000e6a <dd_4>
10000e66:	0039      	movs	r1, r7
10000e68:	bdf0      	pop	{r4, r5, r6, r7, pc}

10000e6a <dd_4>:
10000e6a:	3301      	adds	r3, #1
10000e6c:	0519      	lsls	r1, r3, #20
10000e6e:	e7f5      	b.n	10000e5c <dd_5>
10000e70:	000003fd 	.word	0x000003fd
10000e74:	000007fe 	.word	0x000007fe

10000e78 <dcordic_rot_step>:
10000e78:	4662      	mov	r2, ip
10000e7a:	ca18      	ldmia	r2!, {r3, r4}
10000e7c:	4694      	mov	ip, r2
10000e7e:	2900      	cmp	r1, #0
10000e80:	da1a      	bge.n	10000eb8 <dcordic_rot_step+0x40>
10000e82:	18c0      	adds	r0, r0, r3
10000e84:	4161      	adcs	r1, r4
10000e86:	465b      	mov	r3, fp
10000e88:	413b      	asrs	r3, r7
10000e8a:	465c      	mov	r4, fp
10000e8c:	40b4      	lsls	r4, r6
10000e8e:	4652      	mov	r2, sl
10000e90:	40fa      	lsrs	r2, r7
10000e92:	4322      	orrs	r2, r4
10000e94:	4644      	mov	r4, r8
10000e96:	464d      	mov	r5, r9
10000e98:	4162      	adcs	r2, r4
10000e9a:	416b      	adcs	r3, r5
10000e9c:	4690      	mov	r8, r2
10000e9e:	4699      	mov	r9, r3
10000ea0:	462b      	mov	r3, r5
10000ea2:	40b3      	lsls	r3, r6
10000ea4:	413d      	asrs	r5, r7
10000ea6:	40fc      	lsrs	r4, r7
10000ea8:	431c      	orrs	r4, r3
10000eaa:	4652      	mov	r2, sl
10000eac:	465b      	mov	r3, fp
10000eae:	41a2      	sbcs	r2, r4
10000eb0:	41ab      	sbcs	r3, r5
10000eb2:	4692      	mov	sl, r2
10000eb4:	469b      	mov	fp, r3
10000eb6:	4770      	bx	lr
10000eb8:	1ac0      	subs	r0, r0, r3
10000eba:	41a1      	sbcs	r1, r4
10000ebc:	464b      	mov	r3, r9
10000ebe:	413b      	asrs	r3, r7
10000ec0:	464c      	mov	r4, r9
10000ec2:	40b4      	lsls	r4, r6
10000ec4:	4642      	mov	r2, r8
10000ec6:	40fa      	lsrs	r2, r7
10000ec8:	4322      	orrs	r2, r4
10000eca:	4654      	mov	r4, sl
10000ecc:	465d      	mov	r5, fp
10000ece:	4162      	adcs	r2, r4
10000ed0:	416b      	adcs	r3, r5
10000ed2:	4692      	mov	sl, r2
10000ed4:	469b      	mov	fp, r3
10000ed6:	462b      	mov	r3, r5
10000ed8:	40b3      	lsls	r3, r6
10000eda:	413d      	asrs	r5, r7
10000edc:	40fc      	lsrs	r4, r7
10000ede:	431c      	orrs	r4, r3
10000ee0:	4642      	mov	r2, r8
10000ee2:	464b      	mov	r3, r9
10000ee4:	41a2      	sbcs	r2, r4
10000ee6:	41ab      	sbcs	r3, r5
10000ee8:	4690      	mov	r8, r2
10000eea:	4699      	mov	r9, r3
10000eec:	4770      	bx	lr

10000eee <ret_dzero>:
10000eee:	2000      	movs	r0, #0
10000ef0:	2100      	movs	r1, #0
10000ef2:	4770      	bx	lr

10000ef4 <double2uint_shim>:
10000ef4:	2200      	movs	r2, #0

10000ef6 <double2ufix_shim>:
10000ef6:	b500      	push	{lr}
10000ef8:	3220      	adds	r2, #32
10000efa:	f000 f804 	bl	10000f06 <double2ufix64_shim>
10000efe:	0008      	movs	r0, r1
10000f00:	bd00      	pop	{pc}
	...

10000f04 <double2uint64_shim>:
10000f04:	2200      	movs	r2, #0

10000f06 <double2ufix64_shim>:
10000f06:	150b      	asrs	r3, r1, #20
10000f08:	d4f1      	bmi.n	10000eee <ret_dzero>

10000f0a <d2fix>:
10000f0a:	b510      	push	{r4, lr}
10000f0c:	4694      	mov	ip, r2
10000f0e:	f000 f82f 	bl	10000f70 <dunpacks>
10000f12:	1414      	asrs	r4, r2, #16
10000f14:	3401      	adds	r4, #1
10000f16:	da00      	bge.n	10000f1a <d2fix+0x10>
10000f18:	2100      	movs	r1, #0
10000f1a:	17cb      	asrs	r3, r1, #31
10000f1c:	4c13      	ldr	r4, [pc, #76]	; (10000f6c <d2fix_a+0x4c>)
10000f1e:	4720      	bx	r4

10000f20 <d2fix_a>:
10000f20:	4462      	add	r2, ip
10000f22:	3a34      	subs	r2, #52	; 0x34
10000f24:	d40c      	bmi.n	10000f40 <d2fix_a+0x20>
10000f26:	2a0c      	cmp	r2, #12
10000f28:	da07      	bge.n	10000f3a <d2fix_a+0x1a>
10000f2a:	0004      	movs	r4, r0
10000f2c:	4091      	lsls	r1, r2
10000f2e:	4090      	lsls	r0, r2
10000f30:	4252      	negs	r2, r2
10000f32:	3220      	adds	r2, #32
10000f34:	40d4      	lsrs	r4, r2
10000f36:	4321      	orrs	r1, r4
10000f38:	bd10      	pop	{r4, pc}
10000f3a:	43d8      	mvns	r0, r3
10000f3c:	43d9      	mvns	r1, r3
10000f3e:	bd10      	pop	{r4, pc}
10000f40:	3220      	adds	r2, #32
10000f42:	d407      	bmi.n	10000f54 <d2fix_a+0x34>
10000f44:	460c      	mov	r4, r1
10000f46:	4094      	lsls	r4, r2
10000f48:	4252      	negs	r2, r2
10000f4a:	3220      	adds	r2, #32
10000f4c:	4111      	asrs	r1, r2
10000f4e:	40d0      	lsrs	r0, r2
10000f50:	4320      	orrs	r0, r4
10000f52:	bd10      	pop	{r4, pc}
10000f54:	0008      	movs	r0, r1
10000f56:	17c9      	asrs	r1, r1, #31
10000f58:	3220      	adds	r2, #32
10000f5a:	d403      	bmi.n	10000f64 <d2fix_a+0x44>
10000f5c:	4252      	negs	r2, r2
10000f5e:	3220      	adds	r2, #32
10000f60:	4110      	asrs	r0, r2
10000f62:	bd10      	pop	{r4, pc}
10000f64:	0018      	movs	r0, r3
10000f66:	0019      	movs	r1, r3
10000f68:	bd10      	pop	{r4, pc}
10000f6a:	0000      	.short	0x0000
10000f6c:	10000f21 	.word	0x10000f21

10000f70 <dunpacks>:
10000f70:	0d0a      	lsrs	r2, r1, #20
10000f72:	0fcc      	lsrs	r4, r1, #31
10000f74:	1e53      	subs	r3, r2, #1
10000f76:	051b      	lsls	r3, r3, #20
10000f78:	1ac9      	subs	r1, r1, r3
10000f7a:	0552      	lsls	r2, r2, #21
10000f7c:	d303      	bcc.n	10000f86 <l60_1>
10000f7e:	43c9      	mvns	r1, r1
10000f80:	4240      	negs	r0, r0
10000f82:	d300      	bcc.n	10000f86 <l60_1>
10000f84:	3101      	adds	r1, #1

10000f86 <l60_1>:
10000f86:	0d52      	lsrs	r2, r2, #21
10000f88:	d003      	beq.n	10000f92 <l60_2>
10000f8a:	1c53      	adds	r3, r2, #1
10000f8c:	0adb      	lsrs	r3, r3, #11
10000f8e:	d007      	beq.n	10000fa0 <l60_3>
10000f90:	1b12      	subs	r2, r2, r4

10000f92 <l60_2>:
10000f92:	2000      	movs	r0, #0
10000f94:	0064      	lsls	r4, r4, #1
10000f96:	1c61      	adds	r1, r4, #1
10000f98:	0789      	lsls	r1, r1, #30
10000f9a:	1289      	asrs	r1, r1, #10
10000f9c:	3a80      	subs	r2, #128	; 0x80
10000f9e:	0312      	lsls	r2, r2, #12

10000fa0 <l60_3>:
10000fa0:	4b01      	ldr	r3, [pc, #4]	; (10000fa8 <l60_3+0x8>)
10000fa2:	1ad2      	subs	r2, r2, r3
10000fa4:	4770      	bx	lr
10000fa6:	0000      	.short	0x0000
10000fa8:	000003ff 	.word	0x000003ff

10000fac <__wrap___aeabi_frsub>:
10000fac:	4048      	eors	r0, r1
10000fae:	4041      	eors	r1, r0
10000fb0:	4048      	eors	r0, r1

10000fb2 <__wrap___aeabi_fsub>:
10000fb2:	4b06      	ldr	r3, [pc, #24]	; (10000fcc <__wrap___aeabi_fmul+0x8>)
10000fb4:	685b      	ldr	r3, [r3, #4]
10000fb6:	4718      	bx	r3

10000fb8 <__wrap___aeabi_fadd>:
10000fb8:	4b04      	ldr	r3, [pc, #16]	; (10000fcc <__wrap___aeabi_fmul+0x8>)
10000fba:	681b      	ldr	r3, [r3, #0]
10000fbc:	4718      	bx	r3

10000fbe <__wrap___aeabi_fdiv>:
10000fbe:	4b03      	ldr	r3, [pc, #12]	; (10000fcc <__wrap___aeabi_fmul+0x8>)
10000fc0:	68db      	ldr	r3, [r3, #12]
10000fc2:	4718      	bx	r3

10000fc4 <__wrap___aeabi_fmul>:
10000fc4:	4b01      	ldr	r3, [pc, #4]	; (10000fcc <__wrap___aeabi_fmul+0x8>)
10000fc6:	689b      	ldr	r3, [r3, #8]
10000fc8:	4718      	bx	r3
10000fca:	0000      	.short	0x0000
10000fcc:	20003160 	.word	0x20003160

10000fd0 <__wrap___aeabi_ui2f>:
10000fd0:	1a49      	subs	r1, r1, r1
10000fd2:	2800      	cmp	r0, #0
10000fd4:	d108      	bne.n	10000fe8 <__aeabi_i2f_main>
10000fd6:	4608      	mov	r0, r1
10000fd8:	4770      	bx	lr
	...

10000fdc <__wrap___aeabi_i2f>:
10000fdc:	0fc1      	lsrs	r1, r0, #31
10000fde:	07c9      	lsls	r1, r1, #31
10000fe0:	d500      	bpl.n	10000fe4 <__wrap___aeabi_i2f+0x8>
10000fe2:	4240      	negs	r0, r0
10000fe4:	2800      	cmp	r0, #0
10000fe6:	d017      	beq.n	10001018 <__aeabi_i2f_main+0x30>

10000fe8 <__aeabi_i2f_main>:
10000fe8:	46f4      	mov	ip, lr
10000fea:	b403      	push	{r0, r1}
10000fec:	4b0b      	ldr	r3, [pc, #44]	; (1000101c <__aeabi_i2f_main+0x34>)
10000fee:	681b      	ldr	r3, [r3, #0]
10000ff0:	4798      	blx	r3
10000ff2:	bc06      	pop	{r1, r2}
10000ff4:	4081      	lsls	r1, r0
10000ff6:	389e      	subs	r0, #158	; 0x9e
10000ff8:	4240      	negs	r0, r0
10000ffa:	3180      	adds	r1, #128	; 0x80
10000ffc:	d207      	bcs.n	1000100e <__aeabi_i2f_main+0x26>
10000ffe:	060b      	lsls	r3, r1, #24
10001000:	d007      	beq.n	10001012 <__aeabi_i2f_main+0x2a>
10001002:	0049      	lsls	r1, r1, #1
10001004:	0a49      	lsrs	r1, r1, #9
10001006:	05c0      	lsls	r0, r0, #23
10001008:	4310      	orrs	r0, r2
1000100a:	4308      	orrs	r0, r1
1000100c:	4760      	bx	ip
1000100e:	3001      	adds	r0, #1
10001010:	e7f8      	b.n	10001004 <__aeabi_i2f_main+0x1c>
10001012:	0a49      	lsrs	r1, r1, #9
10001014:	0289      	lsls	r1, r1, #10
10001016:	e7f5      	b.n	10001004 <__aeabi_i2f_main+0x1c>
10001018:	4770      	bx	lr
1000101a:	0000      	.short	0x0000
1000101c:	20012748 	.word	0x20012748

10001020 <__wrap___aeabi_f2iz>:
10001020:	0041      	lsls	r1, r0, #1
10001022:	0e0a      	lsrs	r2, r1, #24
10001024:	2380      	movs	r3, #128	; 0x80
10001026:	061b      	lsls	r3, r3, #24
10001028:	2a7e      	cmp	r2, #126	; 0x7e
1000102a:	dd0b      	ble.n	10001044 <__wrap___aeabi_f2iz+0x24>
1000102c:	3a9e      	subs	r2, #158	; 0x9e
1000102e:	da0b      	bge.n	10001048 <__wrap___aeabi_f2iz+0x28>
10001030:	17c1      	asrs	r1, r0, #31
10001032:	0240      	lsls	r0, r0, #9
10001034:	0840      	lsrs	r0, r0, #1
10001036:	4318      	orrs	r0, r3
10001038:	4252      	negs	r2, r2
1000103a:	40d0      	lsrs	r0, r2
1000103c:	0049      	lsls	r1, r1, #1
1000103e:	3101      	adds	r1, #1
10001040:	4348      	muls	r0, r1
10001042:	4770      	bx	lr
10001044:	2000      	movs	r0, #0
10001046:	4770      	bx	lr
10001048:	0fc0      	lsrs	r0, r0, #31
1000104a:	18c0      	adds	r0, r0, r3
1000104c:	3801      	subs	r0, #1
1000104e:	4770      	bx	lr
10001050:	42c0      	cmn	r0, r0
10001052:	d30d      	bcc.n	10001070 <float2int>
10001054:	b500      	push	{lr}
10001056:	0040      	lsls	r0, r0, #1
10001058:	0840      	lsrs	r0, r0, #1
1000105a:	2100      	movs	r1, #0
1000105c:	f000 f812 	bl	10001084 <__wrap___aeabi_f2uiz>
10001060:	2800      	cmp	r0, #0
10001062:	d401      	bmi.n	10001068 <__wrap___aeabi_f2iz+0x48>
10001064:	4240      	negs	r0, r0
10001066:	bd00      	pop	{pc}
10001068:	2080      	movs	r0, #128	; 0x80
1000106a:	0600      	lsls	r0, r0, #24
1000106c:	bd00      	pop	{pc}
	...

10001070 <float2int>:
10001070:	4b03      	ldr	r3, [pc, #12]	; (10001080 <float2int+0x10>)
10001072:	69db      	ldr	r3, [r3, #28]
10001074:	46fc      	mov	ip, pc
10001076:	4718      	bx	r3
10001078:	10bddf1c 	.word	0x10bddf1c
1000107c:	00001000 	.word	0x00001000
10001080:	20003160 	.word	0x20003160

10001084 <__wrap___aeabi_f2uiz>:
10001084:	4b01      	ldr	r3, [pc, #4]	; (1000108c <__wrap___aeabi_f2uiz+0x8>)
10001086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10001088:	4718      	bx	r3
1000108a:	0000      	.short	0x0000
1000108c:	20003160 	.word	0x20003160

10001090 <float_table_shim_on_use_helper>:
10001090:	b507      	push	{r0, r1, r2, lr}
10001092:	4660      	mov	r0, ip
10001094:	8801      	ldrh	r1, [r0, #0]
10001096:	0a0a      	lsrs	r2, r1, #8
10001098:	3002      	adds	r0, #2
1000109a:	2adf      	cmp	r2, #223	; 0xdf
1000109c:	d1fa      	bne.n	10001094 <float_table_shim_on_use_helper+0x4>
1000109e:	b2c9      	uxtb	r1, r1
100010a0:	0882      	lsrs	r2, r0, #2
100010a2:	d304      	bcc.n	100010ae <float_table_shim_on_use_helper+0x1e>
100010a4:	8802      	ldrh	r2, [r0, #0]
100010a6:	8840      	ldrh	r0, [r0, #2]
100010a8:	0400      	lsls	r0, r0, #16
100010aa:	4310      	orrs	r0, r2
100010ac:	e000      	b.n	100010b0 <float_table_shim_on_use_helper+0x20>
100010ae:	6800      	ldr	r0, [r0, #0]
100010b0:	4a01      	ldr	r2, [pc, #4]	; (100010b8 <float_table_shim_on_use_helper+0x28>)
100010b2:	5050      	str	r0, [r2, r1]
100010b4:	9003      	str	r0, [sp, #12]
100010b6:	bd07      	pop	{r0, r1, r2, pc}
100010b8:	20003160 	.word	0x20003160

100010bc <float2int_shim>:
100010bc:	2100      	movs	r1, #0

100010be <float2fix_shim>:
100010be:	15c2      	asrs	r2, r0, #23
100010c0:	3280      	adds	r2, #128	; 0x80
100010c2:	3280      	adds	r2, #128	; 0x80
100010c4:	d001      	beq.n	100010ca <float2fix_shim+0xc>
100010c6:	4a02      	ldr	r2, [pc, #8]	; (100010d0 <float2fix_shim+0x12>)
100010c8:	4710      	bx	r2
100010ca:	2000      	movs	r0, #0
100010cc:	4770      	bx	lr
100010ce:	0000      	.short	0x0000
100010d0:	00002acd 	.word	0x00002acd

100010d4 <__aeabi_mem_init>:
100010d4:	4801      	ldr	r0, [pc, #4]	; (100010dc <__aeabi_mem_init+0x8>)
100010d6:	2104      	movs	r1, #4
100010d8:	4b01      	ldr	r3, [pc, #4]	; (100010e0 <__aeabi_mem_init+0xc>)
100010da:	4718      	bx	r3
100010dc:	20002708 	.word	0x20002708
100010e0:	10001151 	.word	0x10001151

100010e4 <__wrap_memset>:
100010e4:	4b01      	ldr	r3, [pc, #4]	; (100010ec <__wrap_memset+0x8>)
100010e6:	681b      	ldr	r3, [r3, #0]
100010e8:	4718      	bx	r3
100010ea:	0000      	.short	0x0000
100010ec:	20002708 	.word	0x20002708

100010f0 <__wrap___aeabi_memcpy>:
100010f0:	4b01      	ldr	r3, [pc, #4]	; (100010f8 <__wrap___aeabi_memcpy+0x8>)
100010f2:	685b      	ldr	r3, [r3, #4]
100010f4:	4718      	bx	r3
100010f6:	0000      	.short	0x0000
100010f8:	20002708 	.word	0x20002708

100010fc <__wrap___aeabi_lmul>:
100010fc:	4351      	muls	r1, r2
100010fe:	4343      	muls	r3, r0
10001100:	18c9      	adds	r1, r1, r3
10001102:	468c      	mov	ip, r1
10001104:	0c11      	lsrs	r1, r2, #16
10001106:	b283      	uxth	r3, r0
10001108:	434b      	muls	r3, r1
1000110a:	b410      	push	{r4}
1000110c:	0c04      	lsrs	r4, r0, #16
1000110e:	4361      	muls	r1, r4
10001110:	b292      	uxth	r2, r2
10001112:	b280      	uxth	r0, r0
10001114:	4350      	muls	r0, r2
10001116:	4362      	muls	r2, r4
10001118:	041c      	lsls	r4, r3, #16
1000111a:	0c1b      	lsrs	r3, r3, #16
1000111c:	1900      	adds	r0, r0, r4
1000111e:	bc10      	pop	{r4}
10001120:	4159      	adcs	r1, r3
10001122:	0413      	lsls	r3, r2, #16
10001124:	0c12      	lsrs	r2, r2, #16
10001126:	18c0      	adds	r0, r0, r3
10001128:	4151      	adcs	r1, r2
1000112a:	4461      	add	r1, ip
1000112c:	4770      	bx	lr
	...

10001130 <rom_func_lookup>:
// Convert a 16 bit pointer stored at the given rom address into a 32 bit pointer
#define rom_hword_as_ptr(rom_address) (void *)(uintptr_t)(*(uint16_t *)rom_address)

void *rom_func_lookup(uint32_t code) {
    rom_table_lookup_fn rom_table_lookup = (rom_table_lookup_fn) rom_hword_as_ptr(0x18);
    uint16_t *func_table = (uint16_t *) rom_hword_as_ptr(0x14);
10001130:	2314      	movs	r3, #20
void *rom_func_lookup(uint32_t code) {
10001132:	b510      	push	{r4, lr}
10001134:	0001      	movs	r1, r0
    uint16_t *func_table = (uint16_t *) rom_hword_as_ptr(0x14);
10001136:	8818      	ldrh	r0, [r3, #0]
    rom_table_lookup_fn rom_table_lookup = (rom_table_lookup_fn) rom_hword_as_ptr(0x18);
10001138:	3304      	adds	r3, #4
1000113a:	881b      	ldrh	r3, [r3, #0]
    return rom_table_lookup(func_table, code);
1000113c:	4798      	blx	r3
}
1000113e:	bd10      	pop	{r4, pc}

10001140 <rom_data_lookup>:

void *rom_data_lookup(uint32_t code) {
    rom_table_lookup_fn rom_table_lookup = (rom_table_lookup_fn) rom_hword_as_ptr(0x18);
    uint16_t *data_table = (uint16_t *) rom_hword_as_ptr(0x16);
10001140:	2316      	movs	r3, #22
void *rom_data_lookup(uint32_t code) {
10001142:	b510      	push	{r4, lr}
10001144:	0001      	movs	r1, r0
    uint16_t *data_table = (uint16_t *) rom_hword_as_ptr(0x16);
10001146:	8818      	ldrh	r0, [r3, #0]
    rom_table_lookup_fn rom_table_lookup = (rom_table_lookup_fn) rom_hword_as_ptr(0x18);
10001148:	3302      	adds	r3, #2
1000114a:	881b      	ldrh	r3, [r3, #0]
    return rom_table_lookup(data_table, code);
1000114c:	4798      	blx	r3
}
1000114e:	bd10      	pop	{r4, pc}

10001150 <rom_funcs_lookup>:
/// \end::table_lookup[]

bool rom_funcs_lookup(uint32_t *table, unsigned int count) {
10001150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10001152:	4647      	mov	r7, r8
10001154:	46ce      	mov	lr, r9
10001156:	b580      	push	{r7, lr}
10001158:	1e0f      	subs	r7, r1, #0
    bool ok = true;
    for (unsigned int i = 0; i < count; i++) {
1000115a:	d019      	beq.n	10001190 <rom_funcs_lookup+0x40>
    uint16_t *func_table = (uint16_t *) rom_hword_as_ptr(0x14);
1000115c:	2314      	movs	r3, #20
1000115e:	4699      	mov	r9, r3
    rom_table_lookup_fn rom_table_lookup = (rom_table_lookup_fn) rom_hword_as_ptr(0x18);
10001160:	3304      	adds	r3, #4
10001162:	0004      	movs	r4, r0
    for (unsigned int i = 0; i < count; i++) {
10001164:	2500      	movs	r5, #0
    bool ok = true;
10001166:	2601      	movs	r6, #1
    rom_table_lookup_fn rom_table_lookup = (rom_table_lookup_fn) rom_hword_as_ptr(0x18);
10001168:	4698      	mov	r8, r3
    uint16_t *func_table = (uint16_t *) rom_hword_as_ptr(0x14);
1000116a:	464b      	mov	r3, r9
1000116c:	8818      	ldrh	r0, [r3, #0]
    rom_table_lookup_fn rom_table_lookup = (rom_table_lookup_fn) rom_hword_as_ptr(0x18);
1000116e:	4643      	mov	r3, r8
    return rom_table_lookup(func_table, code);
10001170:	6821      	ldr	r1, [r4, #0]
    rom_table_lookup_fn rom_table_lookup = (rom_table_lookup_fn) rom_hword_as_ptr(0x18);
10001172:	881b      	ldrh	r3, [r3, #0]
    return rom_table_lookup(func_table, code);
10001174:	4798      	blx	r3
        table[i] = (uintptr_t) rom_func_lookup(table[i]);
10001176:	c401      	stmia	r4!, {r0}
        if (!table[i]) ok = false;
10001178:	1e43      	subs	r3, r0, #1
1000117a:	4198      	sbcs	r0, r3
    for (unsigned int i = 0; i < count; i++) {
1000117c:	3501      	adds	r5, #1
        if (!table[i]) ok = false;
1000117e:	4240      	negs	r0, r0
10001180:	4006      	ands	r6, r0
    for (unsigned int i = 0; i < count; i++) {
10001182:	42af      	cmp	r7, r5
10001184:	d1f1      	bne.n	1000116a <rom_funcs_lookup+0x1a>
    }
    return ok;
}
10001186:	0030      	movs	r0, r6
10001188:	bcc0      	pop	{r6, r7}
1000118a:	46b9      	mov	r9, r7
1000118c:	46b0      	mov	r8, r6
1000118e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bool ok = true;
10001190:	2601      	movs	r6, #1
10001192:	e7f8      	b.n	10001186 <rom_funcs_lookup+0x36>

10001194 <hw_claim_lock>:
 *
 * \return The prior interrupt enable status for restoration later via restore_interrupts()
 */
inline static uint32_t save_and_disable_interrupts() {
    uint32_t status;
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
10001194:	f3ef 8010 	mrs	r0, PRIMASK
    __asm volatile ("cpsid i");
10001198:	b672      	cpsid	i
 */
inline static void spin_lock_unsafe_blocking(spin_lock_t *lock) {
    // Note we don't do a wfe or anything, because by convention these spin_locks are VERY SHORT LIVED and NEVER BLOCK and run
    // with INTERRUPTS disabled (to ensure that)... therefore nothing on our core could be blocking us, so we just need to wait on another core
    // anyway which should be finished soon
    while (__builtin_expect(!*lock, 0));
1000119a:	4a03      	ldr	r2, [pc, #12]	; (100011a8 <hw_claim_lock+0x14>)
1000119c:	6813      	ldr	r3, [r2, #0]
1000119e:	2b00      	cmp	r3, #0
100011a0:	d0fc      	beq.n	1000119c <hw_claim_lock+0x8>
    __asm volatile ("dmb");
100011a2:	f3bf 8f5f 	dmb	sy

#include "hardware/claim.h"

uint32_t hw_claim_lock() {
    return spin_lock_blocking(spin_lock_instance(PICO_SPINLOCK_ID_HARDWARE_CLAIM));
}
100011a6:	4770      	bx	lr
100011a8:	d000012c 	.word	0xd000012c

100011ac <hw_claim_unlock>:
100011ac:	f3bf 8f5f 	dmb	sy
 *
 * \param lock Spinlock instance
 */
inline static void spin_unlock_unsafe(spin_lock_t *lock) {
    __mem_fence_release();
    *lock = 0;
100011b0:	2200      	movs	r2, #0
100011b2:	4b02      	ldr	r3, [pc, #8]	; (100011bc <hw_claim_unlock+0x10>)
100011b4:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
100011b6:	f380 8810 	msr	PRIMASK, r0

void hw_claim_unlock(uint32_t save) {
    spin_unlock(spin_lock_instance(PICO_SPINLOCK_ID_HARDWARE_CLAIM), save);
}
100011ba:	4770      	bx	lr
100011bc:	d000012c 	.word	0xd000012c

100011c0 <hw_claim_or_assert>:
    }
    hw_claim_unlock(save);
    return rc;
}

void hw_claim_or_assert(uint8_t *bits, uint bit_index, const char *message) {
100011c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100011c2:	46ce      	mov	lr, r9
100011c4:	4647      	mov	r7, r8
100011c6:	4691      	mov	r9, r2
100011c8:	b580      	push	{r7, lr}
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
100011ca:	f3ef 8c10 	mrs	ip, PRIMASK
    __asm volatile ("cpsid i");
100011ce:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
100011d0:	4d10      	ldr	r5, [pc, #64]	; (10001214 <hw_claim_or_assert+0x54>)
100011d2:	682b      	ldr	r3, [r5, #0]
100011d4:	2b00      	cmp	r3, #0
100011d6:	d0fc      	beq.n	100011d2 <hw_claim_or_assert+0x12>
    __asm volatile ("dmb");
100011d8:	f3bf 8f5f 	dmb	sy
    uint32_t save = hw_claim_lock();
    if (bits[bit_index >> 3u] & (1u << (bit_index & 7u))) {
100011dc:	08cb      	lsrs	r3, r1, #3
100011de:	5cc4      	ldrb	r4, [r0, r3]
100011e0:	18c7      	adds	r7, r0, r3
100011e2:	2007      	movs	r0, #7
100011e4:	0026      	movs	r6, r4
100011e6:	2301      	movs	r3, #1
100011e8:	4008      	ands	r0, r1
100011ea:	40c6      	lsrs	r6, r0
100011ec:	001a      	movs	r2, r3
100011ee:	4032      	ands	r2, r6
100011f0:	4233      	tst	r3, r6
100011f2:	d10b      	bne.n	1000120c <hw_claim_or_assert+0x4c>
        panic(message, bit_index);
    } else {
        bits[bit_index >> 3u] |= (1u << (bit_index & 7u));
100011f4:	4083      	lsls	r3, r0
100011f6:	4323      	orrs	r3, r4
100011f8:	703b      	strb	r3, [r7, #0]
100011fa:	f3bf 8f5f 	dmb	sy
    *lock = 0;
100011fe:	602a      	str	r2, [r5, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10001200:	f38c 8810 	msr	PRIMASK, ip
    }
    hw_claim_unlock(save);
}
10001204:	bcc0      	pop	{r6, r7}
10001206:	46b9      	mov	r9, r7
10001208:	46b0      	mov	r8, r6
1000120a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        panic(message, bit_index);
1000120c:	4648      	mov	r0, r9
1000120e:	f002 fc07 	bl	10003a20 <panic>
10001212:	46c0      	nop			; (mov r8, r8)
10001214:	d000012c 	.word	0xd000012c

10001218 <hw_claim_unused_from_range>:

int hw_claim_unused_from_range(uint8_t *bits, bool required, uint bit_lsb, uint bit_msb, const char *message) {
10001218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000121a:	4647      	mov	r7, r8
1000121c:	46ce      	mov	lr, r9
1000121e:	4688      	mov	r8, r1
10001220:	b580      	push	{r7, lr}
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
10001222:	f3ef 8c10 	mrs	ip, PRIMASK
    __asm volatile ("cpsid i");
10001226:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
10001228:	4d21      	ldr	r5, [pc, #132]	; (100012b0 <hw_claim_unused_from_range+0x98>)
1000122a:	682c      	ldr	r4, [r5, #0]
1000122c:	2c00      	cmp	r4, #0
1000122e:	d0fc      	beq.n	1000122a <hw_claim_unused_from_range+0x12>
    __asm volatile ("dmb");
10001230:	f3bf 8f5f 	dmb	sy
    // don't bother check lsb / msb order as if wrong, then it'll fail anyway
    uint32_t save = hw_claim_lock();
    int found_bit = -1;
    for(uint bit=bit_lsb; bit <= bit_msb; bit++) {
10001234:	429a      	cmp	r2, r3
10001236:	d82d      	bhi.n	10001294 <hw_claim_unused_from_range+0x7c>
        if (!(bits[bit >> 3u] & (1u << (bit & 7u)))) {
10001238:	08d4      	lsrs	r4, r2, #3
1000123a:	5d05      	ldrb	r5, [r0, r4]
1000123c:	1907      	adds	r7, r0, r4
1000123e:	2407      	movs	r4, #7
10001240:	002e      	movs	r6, r5
10001242:	4014      	ands	r4, r2
10001244:	40e6      	lsrs	r6, r4
10001246:	07f1      	lsls	r1, r6, #31
10001248:	d51e      	bpl.n	10001288 <hw_claim_unused_from_range+0x70>
1000124a:	2107      	movs	r1, #7
1000124c:	4689      	mov	r9, r1
1000124e:	3906      	subs	r1, #6
10001250:	e008      	b.n	10001264 <hw_claim_unused_from_range+0x4c>
10001252:	08d4      	lsrs	r4, r2, #3
10001254:	5d05      	ldrb	r5, [r0, r4]
10001256:	1907      	adds	r7, r0, r4
10001258:	464c      	mov	r4, r9
1000125a:	002e      	movs	r6, r5
1000125c:	4014      	ands	r4, r2
1000125e:	40e6      	lsrs	r6, r4
10001260:	4231      	tst	r1, r6
10001262:	d011      	beq.n	10001288 <hw_claim_unused_from_range+0x70>
    for(uint bit=bit_lsb; bit <= bit_msb; bit++) {
10001264:	3201      	adds	r2, #1
10001266:	4293      	cmp	r3, r2
10001268:	d2f3      	bcs.n	10001252 <hw_claim_unused_from_range+0x3a>
    int found_bit = -1;
1000126a:	2001      	movs	r0, #1
1000126c:	4240      	negs	r0, r0
1000126e:	f3bf 8f5f 	dmb	sy
    *lock = 0;
10001272:	2200      	movs	r2, #0
10001274:	4b0e      	ldr	r3, [pc, #56]	; (100012b0 <hw_claim_unused_from_range+0x98>)
10001276:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10001278:	f38c 8810 	msr	PRIMASK, ip
            found_bit = bit;
            break;
        }
    }
    hw_claim_unlock(save);
    if (found_bit < 0 && required) {
1000127c:	2800      	cmp	r0, #0
1000127e:	db11      	blt.n	100012a4 <hw_claim_unused_from_range+0x8c>
        panic(message);
    }
    return found_bit;
}
10001280:	bcc0      	pop	{r6, r7}
10001282:	46b9      	mov	r9, r7
10001284:	46b0      	mov	r8, r6
10001286:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            bits[bit >> 3u] |= (1u << (bit & 7u));
10001288:	2301      	movs	r3, #1
1000128a:	40a3      	lsls	r3, r4
1000128c:	431d      	orrs	r5, r3
            found_bit = bit;
1000128e:	0010      	movs	r0, r2
            bits[bit >> 3u] |= (1u << (bit & 7u));
10001290:	703d      	strb	r5, [r7, #0]
            break;
10001292:	e7ec      	b.n	1000126e <hw_claim_unused_from_range+0x56>
    __asm volatile ("dmb");
10001294:	f3bf 8f5f 	dmb	sy
    *lock = 0;
10001298:	2300      	movs	r3, #0
1000129a:	602b      	str	r3, [r5, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
1000129c:	f38c 8810 	msr	PRIMASK, ip
    int found_bit = -1;
100012a0:	2001      	movs	r0, #1
100012a2:	4240      	negs	r0, r0
    if (found_bit < 0 && required) {
100012a4:	4643      	mov	r3, r8
100012a6:	2b00      	cmp	r3, #0
100012a8:	d0ea      	beq.n	10001280 <hw_claim_unused_from_range+0x68>
        panic(message);
100012aa:	9808      	ldr	r0, [sp, #32]
100012ac:	f002 fbb8 	bl	10003a20 <panic>
100012b0:	d000012c 	.word	0xd000012c

100012b4 <clock_configure>:
    hw_clear_bits(&clock->ctrl, CLOCKS_CLK_USB_CTRL_ENABLE_BITS);
    configured_freq[clk_index] = 0;
}

/// \tag::clock_configure[]
bool clock_configure(enum clock_index clk_index, uint32_t src, uint32_t auxsrc, uint32_t src_freq, uint32_t freq) {
100012b4:	b5f0      	push	{r4, r5, r6, r7, lr}
100012b6:	464f      	mov	r7, r9
100012b8:	4646      	mov	r6, r8
100012ba:	46d6      	mov	lr, sl
100012bc:	b5c0      	push	{r6, r7, lr}
100012be:	0017      	movs	r7, r2
    uint32_t div;

    assert(src_freq >= freq);

    if (freq > src_freq)
100012c0:	9a08      	ldr	r2, [sp, #32]
bool clock_configure(enum clock_index clk_index, uint32_t src, uint32_t auxsrc, uint32_t src_freq, uint32_t freq) {
100012c2:	0005      	movs	r5, r0
100012c4:	4688      	mov	r8, r1
    if (freq > src_freq)
100012c6:	429a      	cmp	r2, r3
100012c8:	d865      	bhi.n	10001396 <clock_configure+0xe2>
        return false;

    // Div register is 24.8 int.frac divider so multiply by 2^8 (left shift by 8)
    div = (uint32_t) (((uint64_t) src_freq << 8) / freq);
100012ca:	0e19      	lsrs	r1, r3, #24
100012cc:	0218      	lsls	r0, r3, #8
100012ce:	2300      	movs	r3, #0
100012d0:	f7ff f896 	bl	10000400 <__wrap___aeabi_uldivmod>

    clock_hw_t *clock = &clocks_hw->clk[clk_index];
100012d4:	4b31      	ldr	r3, [pc, #196]	; (1000139c <clock_configure+0xe8>)
100012d6:	006c      	lsls	r4, r5, #1
100012d8:	469c      	mov	ip, r3
100012da:	1964      	adds	r4, r4, r5
100012dc:	00a4      	lsls	r4, r4, #2
100012de:	4464      	add	r4, ip

    // If increasing divisor, set divisor before source. Otherwise set source
    // before divisor. This avoids a momentary overspeed when e.g. switching
    // to a faster source and increasing divisor to compensate.
    if (div > clock->div)
100012e0:	6863      	ldr	r3, [r4, #4]
    div = (uint32_t) (((uint64_t) src_freq << 8) / freq);
100012e2:	4681      	mov	r9, r0
    if (div > clock->div)
100012e4:	4298      	cmp	r0, r3
100012e6:	d900      	bls.n	100012ea <clock_configure+0x36>
        clock->div = div;
100012e8:	6060      	str	r0, [r4, #4]
    return clk_index == clk_sys || clk_index == clk_ref;
100012ea:	1f2b      	subs	r3, r5, #4
100012ec:	b2db      	uxtb	r3, r3
100012ee:	469a      	mov	sl, r3

    // If switching a glitchless slice (ref or sys) to an aux source, switch
    // away from aux *first* to avoid passing glitches when changing aux mux.
    // Assume (!!!) glitchless source 0 is no faster than the aux source.
    if (has_glitchless_mux(clk_index) && src == CLOCKS_CLK_SYS_CTRL_SRC_VALUE_CLKSRC_CLK_SYS_AUX) {
100012f0:	2b01      	cmp	r3, #1
100012f2:	d92c      	bls.n	1000134e <clock_configure+0x9a>
 *
 * \param addr Address of writable register
 * \param mask Bit-mask specifying bits to clear
 */
inline static void hw_clear_bits(io_rw_32 *addr, uint32_t mask) {
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
100012f4:	23c0      	movs	r3, #192	; 0xc0
100012f6:	2280      	movs	r2, #128	; 0x80
    // If no glitchless mux, cleanly stop the clock to avoid glitches
    // propagating when changing aux mux. Note it would be a really bad idea
    // to do this on one of the glitchless clocks (clk_sys, clk_ref).
    else {
        hw_clear_bits(&clock->ctrl, CLOCKS_CLK_GPOUT0_CTRL_ENABLE_BITS);
        if (configured_freq[clk_index] > 0) {
100012f8:	4e29      	ldr	r6, [pc, #164]	; (100013a0 <clock_configure+0xec>)
100012fa:	00ad      	lsls	r5, r5, #2
100012fc:	019b      	lsls	r3, r3, #6
100012fe:	5971      	ldr	r1, [r6, r5]
10001300:	4323      	orrs	r3, r4
10001302:	0112      	lsls	r2, r2, #4
10001304:	601a      	str	r2, [r3, #0]
10001306:	2900      	cmp	r1, #0
10001308:	d005      	beq.n	10001316 <clock_configure+0x62>
            // Delay for 3 cycles of the target clock, for ENABLE propagation.
            // Note XOSC_COUNT is not helpful here because XOSC is not
            // necessarily running, nor is timer... so, 3 cycles per loop:
            uint delay_cyc = configured_freq[clk_sys] / configured_freq[clk_index] + 1;
1000130a:	6970      	ldr	r0, [r6, #20]
1000130c:	f7ff f832 	bl	10000374 <__wrap___aeabi_uidiv>
10001310:	3001      	adds	r0, #1
            asm volatile (
10001312:	3801      	subs	r0, #1
10001314:	d1fd      	bne.n	10001312 <clock_configure+0x5e>
 * \param addr Address of writable register
 * \param values Bits values
 * \param write_mask Mask of bits to change
 */
inline static void hw_write_masked(io_rw_32 *addr, uint32_t values, uint32_t write_mask) {
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10001316:	6822      	ldr	r2, [r4, #0]
            );
        }
    }

    // Set aux mux first, and then glitchless mux if this clock has one
    hw_write_masked(&clock->ctrl,
10001318:	017f      	lsls	r7, r7, #5
1000131a:	407a      	eors	r2, r7
1000131c:	27e0      	movs	r7, #224	; 0xe0
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
1000131e:	2380      	movs	r3, #128	; 0x80
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10001320:	4017      	ands	r7, r2
        (auxsrc << CLOCKS_CLK_SYS_CTRL_AUXSRC_LSB),
        CLOCKS_CLK_SYS_CTRL_AUXSRC_BITS
    );

    if (has_glitchless_mux(clk_index)) {
10001322:	4652      	mov	r2, sl
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10001324:	015b      	lsls	r3, r3, #5
10001326:	4323      	orrs	r3, r4
10001328:	601f      	str	r7, [r3, #0]
1000132a:	2a01      	cmp	r2, #1
1000132c:	d926      	bls.n	1000137c <clock_configure+0xc8>
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
1000132e:	2380      	movs	r3, #128	; 0x80
10001330:	2280      	movs	r2, #128	; 0x80
10001332:	019b      	lsls	r3, r3, #6
10001334:	4323      	orrs	r3, r4
10001336:	0112      	lsls	r2, r2, #4
10001338:	601a      	str	r2, [r3, #0]

    hw_set_bits(&clock->ctrl, CLOCKS_CLK_GPOUT0_CTRL_ENABLE_BITS);

    // Now that the source is configured, we can trust that the user-supplied
    // divisor is a safe value.
    clock->div = div;
1000133a:	464b      	mov	r3, r9

    // Store the configured frequency
    configured_freq[clk_index] = freq;
1000133c:	2001      	movs	r0, #1
    clock->div = div;
1000133e:	6063      	str	r3, [r4, #4]
    configured_freq[clk_index] = freq;
10001340:	9b08      	ldr	r3, [sp, #32]
10001342:	5173      	str	r3, [r6, r5]

    return true;
}
10001344:	bce0      	pop	{r5, r6, r7}
10001346:	46ba      	mov	sl, r7
10001348:	46b1      	mov	r9, r6
1000134a:	46a8      	mov	r8, r5
1000134c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (has_glitchless_mux(clk_index) && src == CLOCKS_CLK_SYS_CTRL_SRC_VALUE_CLKSRC_CLK_SYS_AUX) {
1000134e:	4643      	mov	r3, r8
10001350:	2b01      	cmp	r3, #1
10001352:	d1cf      	bne.n	100012f4 <clock_configure+0x40>
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10001354:	23c0      	movs	r3, #192	; 0xc0
10001356:	2203      	movs	r2, #3
10001358:	019b      	lsls	r3, r3, #6
1000135a:	4323      	orrs	r3, r4
1000135c:	601a      	str	r2, [r3, #0]
        while (!(clock->selected & 1u))
1000135e:	3a02      	subs	r2, #2
10001360:	68a3      	ldr	r3, [r4, #8]
10001362:	421a      	tst	r2, r3
10001364:	d0fc      	beq.n	10001360 <clock_configure+0xac>
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10001366:	23e0      	movs	r3, #224	; 0xe0
10001368:	6822      	ldr	r2, [r4, #0]
    hw_write_masked(&clock->ctrl,
1000136a:	017f      	lsls	r7, r7, #5
1000136c:	4057      	eors	r7, r2
1000136e:	401f      	ands	r7, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10001370:	2380      	movs	r3, #128	; 0x80
10001372:	015b      	lsls	r3, r3, #5
10001374:	4323      	orrs	r3, r4
10001376:	4e0a      	ldr	r6, [pc, #40]	; (100013a0 <clock_configure+0xec>)
10001378:	601f      	str	r7, [r3, #0]
    return clk_index == clk_sys || clk_index == clk_ref;
1000137a:	00ad      	lsls	r5, r5, #2
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
1000137c:	4642      	mov	r2, r8
1000137e:	6821      	ldr	r1, [r4, #0]
10001380:	4051      	eors	r1, r2
10001382:	2203      	movs	r2, #3
10001384:	400a      	ands	r2, r1
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10001386:	601a      	str	r2, [r3, #0]
        while (!(clock->selected & (1u << src)))
10001388:	2201      	movs	r2, #1
1000138a:	4643      	mov	r3, r8
1000138c:	409a      	lsls	r2, r3
1000138e:	68a3      	ldr	r3, [r4, #8]
10001390:	421a      	tst	r2, r3
10001392:	d0fc      	beq.n	1000138e <clock_configure+0xda>
10001394:	e7cb      	b.n	1000132e <clock_configure+0x7a>
        return false;
10001396:	2000      	movs	r0, #0
10001398:	e7d4      	b.n	10001344 <clock_configure+0x90>
1000139a:	46c0      	nop			; (mov r8, r8)
1000139c:	40008000 	.word	0x40008000
100013a0:	20012044 	.word	0x20012044

100013a4 <clocks_init>:
/// \end::clock_configure[]

void clocks_init(void) {
100013a4:	b530      	push	{r4, r5, lr}
    // Start tick in watchdog
    watchdog_start_tick(XOSC_MHZ);
100013a6:	200c      	movs	r0, #12
void clocks_init(void) {
100013a8:	b083      	sub	sp, #12
    watchdog_start_tick(XOSC_MHZ);
100013aa:	f003 fc13 	bl	10004bd4 <watchdog_start_tick>

    // Everything is 48MHz on FPGA apart from RTC. Otherwise set to 0 and will be set in clock configure
    if (running_on_fpga()) {
100013ae:	f000 ffa3 	bl	100022f8 <running_on_fpga>
100013b2:	2800      	cmp	r0, #0
100013b4:	d00e      	beq.n	100013d4 <clocks_init+0x30>
        for (uint i = 0; i < CLK_COUNT; i++) {
            configured_freq[i] = 48 * MHZ;
100013b6:	4b9a      	ldr	r3, [pc, #616]	; (10001620 <clocks_init+0x27c>)
100013b8:	4a9a      	ldr	r2, [pc, #616]	; (10001624 <clocks_init+0x280>)
100013ba:	601a      	str	r2, [r3, #0]
100013bc:	605a      	str	r2, [r3, #4]
100013be:	609a      	str	r2, [r3, #8]
100013c0:	60da      	str	r2, [r3, #12]
100013c2:	611a      	str	r2, [r3, #16]
100013c4:	615a      	str	r2, [r3, #20]
100013c6:	619a      	str	r2, [r3, #24]
100013c8:	61da      	str	r2, [r3, #28]
100013ca:	621a      	str	r2, [r3, #32]
        }
        configured_freq[clk_rtc] = 46875;
100013cc:	4a96      	ldr	r2, [pc, #600]	; (10001628 <clocks_init+0x284>)
100013ce:	625a      	str	r2, [r3, #36]	; 0x24
    clock_configure(clk_peri,
                    0,
                    CLOCKS_CLK_PERI_CTRL_AUXSRC_VALUE_CLK_SYS,
                    125 * MHZ,
                    125 * MHZ);
}
100013d0:	b003      	add	sp, #12
100013d2:	bd30      	pop	{r4, r5, pc}
    clocks_hw->resus.ctrl = 0;
100013d4:	4c95      	ldr	r4, [pc, #596]	; (1000162c <clocks_init+0x288>)
100013d6:	67a0      	str	r0, [r4, #120]	; 0x78
    xosc_init();
100013d8:	f003 fc04 	bl	10004be4 <xosc_init>
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
100013dc:	2201      	movs	r2, #1
100013de:	4b94      	ldr	r3, [pc, #592]	; (10001630 <clocks_init+0x28c>)
100013e0:	601a      	str	r2, [r3, #0]
    while (clocks_hw->clk[clk_sys].selected != 0x1)
100013e2:	6c63      	ldr	r3, [r4, #68]	; 0x44
100013e4:	2b01      	cmp	r3, #1
100013e6:	d1fc      	bne.n	100013e2 <clocks_init+0x3e>
100013e8:	2203      	movs	r2, #3
100013ea:	4b92      	ldr	r3, [pc, #584]	; (10001634 <clocks_init+0x290>)
100013ec:	601a      	str	r2, [r3, #0]
    while (clocks_hw->clk[clk_ref].selected != 0x1)
100013ee:	4a8f      	ldr	r2, [pc, #572]	; (1000162c <clocks_init+0x288>)
100013f0:	6b93      	ldr	r3, [r2, #56]	; 0x38
100013f2:	2b01      	cmp	r3, #1
100013f4:	d1fc      	bne.n	100013f0 <clocks_init+0x4c>
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
100013f6:	22c0      	movs	r2, #192	; 0xc0
100013f8:	4b8f      	ldr	r3, [pc, #572]	; (10001638 <clocks_init+0x294>)
100013fa:	0192      	lsls	r2, r2, #6
100013fc:	601a      	str	r2, [r3, #0]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
100013fe:	4b8f      	ldr	r3, [pc, #572]	; (1000163c <clocks_init+0x298>)
 *
 * \param bits Bit pattern indicating blocks to unreset. See \ref reset_bitmask
 */
static inline void unreset_block_wait(uint32_t bits) {
    hw_clear_bits(&resets_hw->reset, bits);
    while (~resets_hw->reset_done & bits)
10001400:	498f      	ldr	r1, [pc, #572]	; (10001640 <clocks_init+0x29c>)
10001402:	601a      	str	r2, [r3, #0]
10001404:	0010      	movs	r0, r2
10001406:	688b      	ldr	r3, [r1, #8]
10001408:	4398      	bics	r0, r3
1000140a:	1e03      	subs	r3, r0, #0
1000140c:	d1fa      	bne.n	10001404 <clocks_init+0x60>
    pll_init(pll_sys, 1, 1500 * MHZ, 6, 2);
1000140e:	2402      	movs	r4, #2
10001410:	2101      	movs	r1, #1
10001412:	4a8c      	ldr	r2, [pc, #560]	; (10001644 <clocks_init+0x2a0>)
10001414:	488c      	ldr	r0, [pc, #560]	; (10001648 <clocks_init+0x2a4>)
10001416:	3306      	adds	r3, #6
10001418:	9400      	str	r4, [sp, #0]
1000141a:	f000 ff75 	bl	10002308 <pll_init>
    pll_init(pll_usb, 1, 480 * MHZ, 5, 2);
1000141e:	2305      	movs	r3, #5
10001420:	4a8a      	ldr	r2, [pc, #552]	; (1000164c <clocks_init+0x2a8>)
10001422:	2101      	movs	r1, #1
10001424:	488a      	ldr	r0, [pc, #552]	; (10001650 <clocks_init+0x2ac>)
10001426:	9400      	str	r4, [sp, #0]
10001428:	f000 ff6e 	bl	10002308 <pll_init>
    if (div > clock->div)
1000142c:	4b89      	ldr	r3, [pc, #548]	; (10001654 <clocks_init+0x2b0>)
1000142e:	685a      	ldr	r2, [r3, #4]
10001430:	2aff      	cmp	r2, #255	; 0xff
10001432:	d802      	bhi.n	1000143a <clocks_init+0x96>
        clock->div = div;
10001434:	2280      	movs	r2, #128	; 0x80
10001436:	0052      	lsls	r2, r2, #1
10001438:	605a      	str	r2, [r3, #4]
1000143a:	2280      	movs	r2, #128	; 0x80
        if (configured_freq[clk_index] > 0) {
1000143c:	4c78      	ldr	r4, [pc, #480]	; (10001620 <clocks_init+0x27c>)
1000143e:	4b7d      	ldr	r3, [pc, #500]	; (10001634 <clocks_init+0x290>)
10001440:	6921      	ldr	r1, [r4, #16]
10001442:	0112      	lsls	r2, r2, #4
10001444:	4d83      	ldr	r5, [pc, #524]	; (10001654 <clocks_init+0x2b0>)
10001446:	601a      	str	r2, [r3, #0]
10001448:	2900      	cmp	r1, #0
1000144a:	d005      	beq.n	10001458 <clocks_init+0xb4>
            uint delay_cyc = configured_freq[clk_sys] / configured_freq[clk_index] + 1;
1000144c:	6960      	ldr	r0, [r4, #20]
1000144e:	f7fe ff91 	bl	10000374 <__wrap___aeabi_uidiv>
10001452:	3001      	adds	r0, #1
            asm volatile (
10001454:	3801      	subs	r0, #1
10001456:	d1fd      	bne.n	10001454 <clocks_init+0xb0>
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10001458:	21e0      	movs	r1, #224	; 0xe0
1000145a:	4b7e      	ldr	r3, [pc, #504]	; (10001654 <clocks_init+0x2b0>)
1000145c:	2002      	movs	r0, #2
1000145e:	681a      	ldr	r2, [r3, #0]
10001460:	4011      	ands	r1, r2
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10001462:	2280      	movs	r2, #128	; 0x80
10001464:	0152      	lsls	r2, r2, #5
10001466:	432a      	orrs	r2, r5
10001468:	6011      	str	r1, [r2, #0]
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
1000146a:	6819      	ldr	r1, [r3, #0]
1000146c:	4048      	eors	r0, r1
1000146e:	2103      	movs	r1, #3
10001470:	4001      	ands	r1, r0
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10001472:	6011      	str	r1, [r2, #0]
        while (!(clock->selected & (1u << src)))
10001474:	2104      	movs	r1, #4
10001476:	689a      	ldr	r2, [r3, #8]
10001478:	4211      	tst	r1, r2
1000147a:	d0fc      	beq.n	10001476 <clocks_init+0xd2>
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
1000147c:	2280      	movs	r2, #128	; 0x80
1000147e:	2180      	movs	r1, #128	; 0x80
10001480:	0192      	lsls	r2, r2, #6
10001482:	432a      	orrs	r2, r5
10001484:	0109      	lsls	r1, r1, #4
10001486:	6011      	str	r1, [r2, #0]
    clock->div = div;
10001488:	2280      	movs	r2, #128	; 0x80
1000148a:	0052      	lsls	r2, r2, #1
1000148c:	605a      	str	r2, [r3, #4]
    configured_freq[clk_index] = freq;
1000148e:	4b72      	ldr	r3, [pc, #456]	; (10001658 <clocks_init+0x2b4>)
10001490:	6123      	str	r3, [r4, #16]
    if (div > clock->div)
10001492:	4b72      	ldr	r3, [pc, #456]	; (1000165c <clocks_init+0x2b8>)
10001494:	6859      	ldr	r1, [r3, #4]
10001496:	29ff      	cmp	r1, #255	; 0xff
10001498:	d800      	bhi.n	1000149c <clocks_init+0xf8>
        clock->div = div;
1000149a:	605a      	str	r2, [r3, #4]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
1000149c:	2103      	movs	r1, #3
1000149e:	4a64      	ldr	r2, [pc, #400]	; (10001630 <clocks_init+0x28c>)
100014a0:	4b6e      	ldr	r3, [pc, #440]	; (1000165c <clocks_init+0x2b8>)
100014a2:	6011      	str	r1, [r2, #0]
        while (!(clock->selected & 1u))
100014a4:	3902      	subs	r1, #2
100014a6:	689a      	ldr	r2, [r3, #8]
100014a8:	4211      	tst	r1, r2
100014aa:	d0fc      	beq.n	100014a6 <clocks_init+0x102>
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
100014ac:	20e0      	movs	r0, #224	; 0xe0
100014ae:	681a      	ldr	r2, [r3, #0]
100014b0:	4010      	ands	r0, r2
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
100014b2:	2280      	movs	r2, #128	; 0x80
100014b4:	0152      	lsls	r2, r2, #5
100014b6:	431a      	orrs	r2, r3
100014b8:	6010      	str	r0, [r2, #0]
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
100014ba:	6818      	ldr	r0, [r3, #0]
100014bc:	4048      	eors	r0, r1
100014be:	2103      	movs	r1, #3
100014c0:	4001      	ands	r1, r0
        while (!(clock->selected & (1u << src)))
100014c2:	2002      	movs	r0, #2
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
100014c4:	6011      	str	r1, [r2, #0]
100014c6:	4965      	ldr	r1, [pc, #404]	; (1000165c <clocks_init+0x2b8>)
100014c8:	688a      	ldr	r2, [r1, #8]
100014ca:	4210      	tst	r0, r2
100014cc:	d0fc      	beq.n	100014c8 <clocks_init+0x124>
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
100014ce:	2280      	movs	r2, #128	; 0x80
100014d0:	0192      	lsls	r2, r2, #6
100014d2:	4313      	orrs	r3, r2
100014d4:	2280      	movs	r2, #128	; 0x80
100014d6:	0112      	lsls	r2, r2, #4
100014d8:	601a      	str	r2, [r3, #0]
    clock->div = div;
100014da:	2280      	movs	r2, #128	; 0x80
    configured_freq[clk_index] = freq;
100014dc:	4b60      	ldr	r3, [pc, #384]	; (10001660 <clocks_init+0x2bc>)
    clock->div = div;
100014de:	0052      	lsls	r2, r2, #1
100014e0:	604a      	str	r2, [r1, #4]
    configured_freq[clk_index] = freq;
100014e2:	6163      	str	r3, [r4, #20]
    if (div > clock->div)
100014e4:	4b5f      	ldr	r3, [pc, #380]	; (10001664 <clocks_init+0x2c0>)
100014e6:	6859      	ldr	r1, [r3, #4]
100014e8:	29ff      	cmp	r1, #255	; 0xff
100014ea:	d800      	bhi.n	100014ee <clocks_init+0x14a>
        clock->div = div;
100014ec:	605a      	str	r2, [r3, #4]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
100014ee:	2280      	movs	r2, #128	; 0x80
100014f0:	4b5d      	ldr	r3, [pc, #372]	; (10001668 <clocks_init+0x2c4>)
        if (configured_freq[clk_index] > 0) {
100014f2:	69e1      	ldr	r1, [r4, #28]
100014f4:	0112      	lsls	r2, r2, #4
100014f6:	4d5b      	ldr	r5, [pc, #364]	; (10001664 <clocks_init+0x2c0>)
100014f8:	601a      	str	r2, [r3, #0]
100014fa:	2900      	cmp	r1, #0
100014fc:	d005      	beq.n	1000150a <clocks_init+0x166>
            uint delay_cyc = configured_freq[clk_sys] / configured_freq[clk_index] + 1;
100014fe:	6960      	ldr	r0, [r4, #20]
10001500:	f7fe ff38 	bl	10000374 <__wrap___aeabi_uidiv>
10001504:	3001      	adds	r0, #1
            asm volatile (
10001506:	3801      	subs	r0, #1
10001508:	d1fd      	bne.n	10001506 <clocks_init+0x162>
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
1000150a:	22e0      	movs	r2, #224	; 0xe0
1000150c:	4955      	ldr	r1, [pc, #340]	; (10001664 <clocks_init+0x2c0>)
1000150e:	680b      	ldr	r3, [r1, #0]
10001510:	401a      	ands	r2, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10001512:	2380      	movs	r3, #128	; 0x80
10001514:	015b      	lsls	r3, r3, #5
10001516:	432b      	orrs	r3, r5
10001518:	601a      	str	r2, [r3, #0]
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
1000151a:	2380      	movs	r3, #128	; 0x80
1000151c:	2280      	movs	r2, #128	; 0x80
1000151e:	019b      	lsls	r3, r3, #6
10001520:	432b      	orrs	r3, r5
10001522:	0112      	lsls	r2, r2, #4
10001524:	601a      	str	r2, [r3, #0]
    clock->div = div;
10001526:	2280      	movs	r2, #128	; 0x80
    configured_freq[clk_index] = freq;
10001528:	4b3e      	ldr	r3, [pc, #248]	; (10001624 <clocks_init+0x280>)
    clock->div = div;
1000152a:	0052      	lsls	r2, r2, #1
1000152c:	604a      	str	r2, [r1, #4]
    configured_freq[clk_index] = freq;
1000152e:	61e3      	str	r3, [r4, #28]
    if (div > clock->div)
10001530:	4b4e      	ldr	r3, [pc, #312]	; (1000166c <clocks_init+0x2c8>)
10001532:	6859      	ldr	r1, [r3, #4]
10001534:	29ff      	cmp	r1, #255	; 0xff
10001536:	d800      	bhi.n	1000153a <clocks_init+0x196>
        clock->div = div;
10001538:	605a      	str	r2, [r3, #4]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
1000153a:	2280      	movs	r2, #128	; 0x80
1000153c:	4b4c      	ldr	r3, [pc, #304]	; (10001670 <clocks_init+0x2cc>)
        if (configured_freq[clk_index] > 0) {
1000153e:	6a21      	ldr	r1, [r4, #32]
10001540:	0112      	lsls	r2, r2, #4
10001542:	4d4a      	ldr	r5, [pc, #296]	; (1000166c <clocks_init+0x2c8>)
10001544:	601a      	str	r2, [r3, #0]
10001546:	2900      	cmp	r1, #0
10001548:	d005      	beq.n	10001556 <clocks_init+0x1b2>
            uint delay_cyc = configured_freq[clk_sys] / configured_freq[clk_index] + 1;
1000154a:	6960      	ldr	r0, [r4, #20]
1000154c:	f7fe ff12 	bl	10000374 <__wrap___aeabi_uidiv>
10001550:	3001      	adds	r0, #1
            asm volatile (
10001552:	3801      	subs	r0, #1
10001554:	d1fd      	bne.n	10001552 <clocks_init+0x1ae>
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10001556:	22e0      	movs	r2, #224	; 0xe0
10001558:	4944      	ldr	r1, [pc, #272]	; (1000166c <clocks_init+0x2c8>)
1000155a:	680b      	ldr	r3, [r1, #0]
1000155c:	401a      	ands	r2, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
1000155e:	2380      	movs	r3, #128	; 0x80
10001560:	015b      	lsls	r3, r3, #5
10001562:	432b      	orrs	r3, r5
10001564:	601a      	str	r2, [r3, #0]
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10001566:	2380      	movs	r3, #128	; 0x80
10001568:	2280      	movs	r2, #128	; 0x80
1000156a:	019b      	lsls	r3, r3, #6
1000156c:	432b      	orrs	r3, r5
1000156e:	0112      	lsls	r2, r2, #4
10001570:	601a      	str	r2, [r3, #0]
    clock->div = div;
10001572:	2380      	movs	r3, #128	; 0x80
    if (div > clock->div)
10001574:	2280      	movs	r2, #128	; 0x80
    clock->div = div;
10001576:	005b      	lsls	r3, r3, #1
10001578:	604b      	str	r3, [r1, #4]
    configured_freq[clk_index] = freq;
1000157a:	4b2a      	ldr	r3, [pc, #168]	; (10001624 <clocks_init+0x280>)
    if (div > clock->div)
1000157c:	02d2      	lsls	r2, r2, #11
    configured_freq[clk_index] = freq;
1000157e:	6223      	str	r3, [r4, #32]
    if (div > clock->div)
10001580:	4b3c      	ldr	r3, [pc, #240]	; (10001674 <clocks_init+0x2d0>)
10001582:	6859      	ldr	r1, [r3, #4]
10001584:	4291      	cmp	r1, r2
10001586:	d200      	bcs.n	1000158a <clocks_init+0x1e6>
        clock->div = div;
10001588:	605a      	str	r2, [r3, #4]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
1000158a:	2280      	movs	r2, #128	; 0x80
1000158c:	4b3a      	ldr	r3, [pc, #232]	; (10001678 <clocks_init+0x2d4>)
        if (configured_freq[clk_index] > 0) {
1000158e:	6a61      	ldr	r1, [r4, #36]	; 0x24
10001590:	0112      	lsls	r2, r2, #4
10001592:	4d38      	ldr	r5, [pc, #224]	; (10001674 <clocks_init+0x2d0>)
10001594:	601a      	str	r2, [r3, #0]
10001596:	2900      	cmp	r1, #0
10001598:	d005      	beq.n	100015a6 <clocks_init+0x202>
            uint delay_cyc = configured_freq[clk_sys] / configured_freq[clk_index] + 1;
1000159a:	6960      	ldr	r0, [r4, #20]
1000159c:	f7fe feea 	bl	10000374 <__wrap___aeabi_uidiv>
100015a0:	3001      	adds	r0, #1
            asm volatile (
100015a2:	3801      	subs	r0, #1
100015a4:	d1fd      	bne.n	100015a2 <clocks_init+0x1fe>
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
100015a6:	22e0      	movs	r2, #224	; 0xe0
100015a8:	4932      	ldr	r1, [pc, #200]	; (10001674 <clocks_init+0x2d0>)
100015aa:	680b      	ldr	r3, [r1, #0]
100015ac:	401a      	ands	r2, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
100015ae:	2380      	movs	r3, #128	; 0x80
100015b0:	015b      	lsls	r3, r3, #5
100015b2:	432b      	orrs	r3, r5
100015b4:	601a      	str	r2, [r3, #0]
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
100015b6:	2380      	movs	r3, #128	; 0x80
100015b8:	2280      	movs	r2, #128	; 0x80
100015ba:	019b      	lsls	r3, r3, #6
100015bc:	432b      	orrs	r3, r5
100015be:	0112      	lsls	r2, r2, #4
100015c0:	601a      	str	r2, [r3, #0]
    clock->div = div;
100015c2:	2380      	movs	r3, #128	; 0x80
100015c4:	02db      	lsls	r3, r3, #11
100015c6:	604b      	str	r3, [r1, #4]
    configured_freq[clk_index] = freq;
100015c8:	4b17      	ldr	r3, [pc, #92]	; (10001628 <clocks_init+0x284>)
100015ca:	6263      	str	r3, [r4, #36]	; 0x24
    if (div > clock->div)
100015cc:	4b2b      	ldr	r3, [pc, #172]	; (1000167c <clocks_init+0x2d8>)
100015ce:	685a      	ldr	r2, [r3, #4]
100015d0:	2aff      	cmp	r2, #255	; 0xff
100015d2:	d802      	bhi.n	100015da <clocks_init+0x236>
        clock->div = div;
100015d4:	2280      	movs	r2, #128	; 0x80
100015d6:	0052      	lsls	r2, r2, #1
100015d8:	605a      	str	r2, [r3, #4]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
100015da:	2280      	movs	r2, #128	; 0x80
100015dc:	4b28      	ldr	r3, [pc, #160]	; (10001680 <clocks_init+0x2dc>)
        if (configured_freq[clk_index] > 0) {
100015de:	69a1      	ldr	r1, [r4, #24]
100015e0:	0112      	lsls	r2, r2, #4
100015e2:	4d26      	ldr	r5, [pc, #152]	; (1000167c <clocks_init+0x2d8>)
100015e4:	601a      	str	r2, [r3, #0]
100015e6:	2900      	cmp	r1, #0
100015e8:	d005      	beq.n	100015f6 <clocks_init+0x252>
            uint delay_cyc = configured_freq[clk_sys] / configured_freq[clk_index] + 1;
100015ea:	6960      	ldr	r0, [r4, #20]
100015ec:	f7fe fec2 	bl	10000374 <__wrap___aeabi_uidiv>
100015f0:	3001      	adds	r0, #1
            asm volatile (
100015f2:	3801      	subs	r0, #1
100015f4:	d1fd      	bne.n	100015f2 <clocks_init+0x24e>
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
100015f6:	22e0      	movs	r2, #224	; 0xe0
100015f8:	4920      	ldr	r1, [pc, #128]	; (1000167c <clocks_init+0x2d8>)
100015fa:	680b      	ldr	r3, [r1, #0]
100015fc:	401a      	ands	r2, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
100015fe:	2380      	movs	r3, #128	; 0x80
10001600:	015b      	lsls	r3, r3, #5
10001602:	432b      	orrs	r3, r5
10001604:	601a      	str	r2, [r3, #0]
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10001606:	2380      	movs	r3, #128	; 0x80
10001608:	2280      	movs	r2, #128	; 0x80
1000160a:	019b      	lsls	r3, r3, #6
1000160c:	432b      	orrs	r3, r5
1000160e:	0112      	lsls	r2, r2, #4
10001610:	601a      	str	r2, [r3, #0]
    clock->div = div;
10001612:	2380      	movs	r3, #128	; 0x80
10001614:	005b      	lsls	r3, r3, #1
10001616:	604b      	str	r3, [r1, #4]
    configured_freq[clk_index] = freq;
10001618:	4b11      	ldr	r3, [pc, #68]	; (10001660 <clocks_init+0x2bc>)
1000161a:	61a3      	str	r3, [r4, #24]
    return true;
1000161c:	e6d8      	b.n	100013d0 <clocks_init+0x2c>
1000161e:	46c0      	nop			; (mov r8, r8)
10001620:	20012044 	.word	0x20012044
10001624:	02dc6c00 	.word	0x02dc6c00
10001628:	0000b71b 	.word	0x0000b71b
1000162c:	40008000 	.word	0x40008000
10001630:	4000b03c 	.word	0x4000b03c
10001634:	4000b030 	.word	0x4000b030
10001638:	4000e000 	.word	0x4000e000
1000163c:	4000f000 	.word	0x4000f000
10001640:	4000c000 	.word	0x4000c000
10001644:	59682f00 	.word	0x59682f00
10001648:	40028000 	.word	0x40028000
1000164c:	1c9c3800 	.word	0x1c9c3800
10001650:	4002c000 	.word	0x4002c000
10001654:	40008030 	.word	0x40008030
10001658:	00b71b00 	.word	0x00b71b00
1000165c:	4000803c 	.word	0x4000803c
10001660:	07735940 	.word	0x07735940
10001664:	40008054 	.word	0x40008054
10001668:	4000b054 	.word	0x4000b054
1000166c:	40008060 	.word	0x40008060
10001670:	4000b060 	.word	0x4000b060
10001674:	4000806c 	.word	0x4000806c
10001678:	4000b06c 	.word	0x4000b06c
1000167c:	40008048 	.word	0x40008048
10001680:	4000b048 	.word	0x4000b048

10001684 <clock_get_hz>:

/// \tag::clock_get_hz[]
uint32_t clock_get_hz(enum clock_index clk_index) {
    return configured_freq[clk_index];
10001684:	4b01      	ldr	r3, [pc, #4]	; (1000168c <clock_get_hz+0x8>)
10001686:	0080      	lsls	r0, r0, #2
10001688:	58c0      	ldr	r0, [r0, r3]
}
1000168a:	4770      	bx	lr
1000168c:	20012044 	.word	0x20012044

10001690 <critical_section_init>:

#if !PICO_NO_HARDWARE
static_assert(sizeof(critical_section_t) == 8, "");
#endif

void critical_section_init(critical_section_t *critsec) {
10001690:	b510      	push	{r4, lr}
10001692:	0004      	movs	r4, r0
    critical_section_init_with_lock_num(critsec, spin_lock_claim_unused(true));
10001694:	2001      	movs	r0, #1
10001696:	f002 fd4d 	bl	10004134 <spin_lock_claim_unused>
1000169a:	0001      	movs	r1, r0
}

void critical_section_init_with_lock_num(critical_section_t *critsec, uint lock_num) {
    lock_init(&critsec->core, lock_num);
1000169c:	0020      	movs	r0, r4
1000169e:	f000 faaf 	bl	10001c00 <lock_init>
    __asm volatile ("dmb");
100016a2:	f3bf 8f5f 	dmb	sy
}
100016a6:	bd10      	pop	{r4, pc}

100016a8 <__aeabi_double_init>:

bool running_on_fpga();
uint8_t rp2040_chip_version();

static inline uint8_t rp2040_rom_version() {
    return *(uint8_t*)0x13;
100016a8:	2313      	movs	r3, #19
    panic("missing double function");
}
#endif
extern void double_table_shim_on_use_helper();

void __aeabi_double_init() {
100016aa:	b570      	push	{r4, r5, r6, lr}
    int rom_version = rp2040_rom_version();
100016ac:	781d      	ldrb	r5, [r3, #0]
#if PICO_DOUBLE_SUPPORT_ROM_V1
    if (rom_version == 1) {
100016ae:	2d01      	cmp	r5, #1
100016b0:	d010      	beq.n	100016d4 <__aeabi_double_init+0x2c>
        for(uint i=0;i<SF_TABLE_V2_SIZE/4;i++) {
            sd_table[i] = (uintptr_t)missing_double_func_shim;
        }
    }
#endif
    if (rom_version >= 2) {
100016b2:	dd0b      	ble.n	100016cc <__aeabi_double_init+0x24>
        void *rom_table = rom_data_lookup(rom_table_code('S', 'D'));
100016b4:	4819      	ldr	r0, [pc, #100]	; (1000171c <__aeabi_double_init+0x74>)
100016b6:	f7ff fd43 	bl	10001140 <rom_data_lookup>
        assert(*((uint8_t *)(((void *)rom_data_lookup(rom_table_code('S', 'F')))-2)) * 4 >= SF_TABLE_V2_SIZE);
        memcpy(&sd_table, rom_table, SF_TABLE_V2_SIZE);
100016ba:	4c19      	ldr	r4, [pc, #100]	; (10001720 <__aeabi_double_init+0x78>)
        void *rom_table = rom_data_lookup(rom_table_code('S', 'D'));
100016bc:	0001      	movs	r1, r0
        memcpy(&sd_table, rom_table, SF_TABLE_V2_SIZE);
100016be:	2280      	movs	r2, #128	; 0x80
100016c0:	0020      	movs	r0, r4
100016c2:	f7ff fd15 	bl	100010f0 <__wrap___aeabi_memcpy>
                panic(NULL);
            }
#endif
        }
    }
    if (rom_version < 3) {
100016c6:	2d02      	cmp	r5, #2
100016c8:	d001      	beq.n	100016ce <__aeabi_double_init+0x26>
        // we use the unused entry for SINCOS
        sd_table[SF_TABLE_V3_FSINCOS / 4] = (uintptr_t) double_table_shim_on_use_helper;
    }
}
100016ca:	bd70      	pop	{r4, r5, r6, pc}
100016cc:	4c14      	ldr	r4, [pc, #80]	; (10001720 <__aeabi_double_init+0x78>)
        sd_table[SF_TABLE_V3_FSINCOS / 4] = (uintptr_t) double_table_shim_on_use_helper;
100016ce:	4b15      	ldr	r3, [pc, #84]	; (10001724 <__aeabi_double_init+0x7c>)
100016d0:	64a3      	str	r3, [r4, #72]	; 0x48
}
100016d2:	e7fa      	b.n	100016ca <__aeabi_double_init+0x22>
        sd_table[SF_TABLE_V3_FSINCOS / 4] = (uintptr_t) double_table_shim_on_use_helper;
100016d4:	4b13      	ldr	r3, [pc, #76]	; (10001724 <__aeabi_double_init+0x7c>)
            sd_table[i] = (uintptr_t)double_table_shim_on_use_helper;
100016d6:	4c12      	ldr	r4, [pc, #72]	; (10001720 <__aeabi_double_init+0x78>)
100016d8:	6023      	str	r3, [r4, #0]
100016da:	6063      	str	r3, [r4, #4]
100016dc:	60a3      	str	r3, [r4, #8]
100016de:	60e3      	str	r3, [r4, #12]
100016e0:	6123      	str	r3, [r4, #16]
100016e2:	6163      	str	r3, [r4, #20]
100016e4:	61a3      	str	r3, [r4, #24]
100016e6:	61e3      	str	r3, [r4, #28]
100016e8:	6223      	str	r3, [r4, #32]
100016ea:	6263      	str	r3, [r4, #36]	; 0x24
100016ec:	62a3      	str	r3, [r4, #40]	; 0x28
100016ee:	62e3      	str	r3, [r4, #44]	; 0x2c
100016f0:	6323      	str	r3, [r4, #48]	; 0x30
100016f2:	6363      	str	r3, [r4, #52]	; 0x34
100016f4:	63a3      	str	r3, [r4, #56]	; 0x38
100016f6:	63e3      	str	r3, [r4, #60]	; 0x3c
100016f8:	6423      	str	r3, [r4, #64]	; 0x40
100016fa:	6463      	str	r3, [r4, #68]	; 0x44
100016fc:	64a3      	str	r3, [r4, #72]	; 0x48
100016fe:	64e3      	str	r3, [r4, #76]	; 0x4c
10001700:	6523      	str	r3, [r4, #80]	; 0x50
10001702:	6563      	str	r3, [r4, #84]	; 0x54
10001704:	65a3      	str	r3, [r4, #88]	; 0x58
10001706:	65e3      	str	r3, [r4, #92]	; 0x5c
10001708:	6623      	str	r3, [r4, #96]	; 0x60
1000170a:	6663      	str	r3, [r4, #100]	; 0x64
1000170c:	66a3      	str	r3, [r4, #104]	; 0x68
1000170e:	66e3      	str	r3, [r4, #108]	; 0x6c
10001710:	6723      	str	r3, [r4, #112]	; 0x70
10001712:	6763      	str	r3, [r4, #116]	; 0x74
10001714:	67a3      	str	r3, [r4, #120]	; 0x78
10001716:	67e3      	str	r3, [r4, #124]	; 0x7c
        sd_table[SF_TABLE_V3_FSINCOS / 4] = (uintptr_t) double_table_shim_on_use_helper;
10001718:	64a3      	str	r3, [r4, #72]	; 0x48
1000171a:	e7d6      	b.n	100016ca <__aeabi_double_init+0x22>
1000171c:	00004453 	.word	0x00004453
10001720:	20003060 	.word	0x20003060
10001724:	100009d5 	.word	0x100009d5

10001728 <flash_get_unique_id>:
// Use standard RUID command to get a unique identifier for the flash (and
// hence the board)

static_assert(FLASH_UNIQUE_ID_SIZE_BYTES == FLASH_RUID_DATA_BYTES, "");

void flash_get_unique_id(uint8_t *id_out) {
10001728:	b530      	push	{r4, r5, lr}
#if PICO_NO_FLASH
    panic_unsupported();
#else
    uint8_t txbuf[FLASH_RUID_TOTAL_BYTES] = {0};
1000172a:	2500      	movs	r5, #0
void flash_get_unique_id(uint8_t *id_out) {
1000172c:	b089      	sub	sp, #36	; 0x24
1000172e:	0004      	movs	r4, r0
    uint8_t txbuf[FLASH_RUID_TOTAL_BYTES] = {0};
10001730:	2209      	movs	r2, #9
10001732:	2100      	movs	r1, #0
10001734:	a801      	add	r0, sp, #4
10001736:	9500      	str	r5, [sp, #0]
10001738:	f7ff fcd4 	bl	100010e4 <__wrap_memset>
    uint8_t rxbuf[FLASH_RUID_TOTAL_BYTES] = {0};
1000173c:	2209      	movs	r2, #9
1000173e:	2100      	movs	r1, #0
10001740:	a805      	add	r0, sp, #20
10001742:	9504      	str	r5, [sp, #16]
10001744:	f7ff fcce 	bl	100010e4 <__wrap_memset>
    txbuf[0] = FLASH_RUID_CMD;
10001748:	234b      	movs	r3, #75	; 0x4b
1000174a:	466a      	mov	r2, sp
    flash_do_cmd(txbuf, rxbuf, FLASH_RUID_TOTAL_BYTES);
1000174c:	4668      	mov	r0, sp
    txbuf[0] = FLASH_RUID_CMD;
1000174e:	7013      	strb	r3, [r2, #0]
    flash_do_cmd(txbuf, rxbuf, FLASH_RUID_TOTAL_BYTES);
10001750:	a904      	add	r1, sp, #16
10001752:	f00e fe05 	bl	10010360 <__flash_do_cmd.constprop.0_veneer>
    for (int i = 0; i < FLASH_RUID_DATA_BYTES; i++)
        id_out[i] = rxbuf[i + 1 + FLASH_RUID_DUMMY_BYTES];
10001756:	2115      	movs	r1, #21
10001758:	2208      	movs	r2, #8
1000175a:	0020      	movs	r0, r4
1000175c:	4469      	add	r1, sp
1000175e:	f7ff fcc7 	bl	100010f0 <__wrap___aeabi_memcpy>
#endif
}
10001762:	b009      	add	sp, #36	; 0x24
10001764:	bd30      	pop	{r4, r5, pc}
10001766:	46c0      	nop			; (mov r8, r8)

10001768 <__aeabi_float_init>:
10001768:	2313      	movs	r3, #19
static __attribute__((noreturn)) void missing_float_func_shim() {
    panic("");
}
#endif

void __aeabi_float_init() {
1000176a:	b510      	push	{r4, lr}
    int rom_version = rp2040_rom_version();
    void *rom_table = rom_data_lookup(rom_table_code('S', 'F'));
1000176c:	4812      	ldr	r0, [pc, #72]	; (100017b8 <__aeabi_float_init+0x50>)
    int rom_version = rp2040_rom_version();
1000176e:	781c      	ldrb	r4, [r3, #0]
    void *rom_table = rom_data_lookup(rom_table_code('S', 'F'));
10001770:	f7ff fce6 	bl	10001140 <rom_data_lookup>
10001774:	0001      	movs	r1, r0
#if PICO_FLOAT_SUPPORT_ROM_V1
    if (rom_version == 1) {
10001776:	2c01      	cmp	r4, #1
10001778:	d00a      	beq.n	10001790 <__aeabi_float_init+0x28>
        for(uint i=0;i<SF_TABLE_V2_SIZE/4;i++) {
            if (!sf_table[i]) sf_table[i] = (uintptr_t)missing_float_func_shim;
        }
    }
#endif
    if (rom_version >= 2) {
1000177a:	dd03      	ble.n	10001784 <__aeabi_float_init+0x1c>
        assert(*((uint8_t *)(rom_table-2)) * 4 >= SF_TABLE_V2_SIZE);
        memcpy(&sf_table, rom_table, SF_TABLE_V2_SIZE);
1000177c:	2280      	movs	r2, #128	; 0x80
1000177e:	480f      	ldr	r0, [pc, #60]	; (100017bc <__aeabi_float_init+0x54>)
10001780:	f7ff fcb6 	bl	100010f0 <__wrap___aeabi_memcpy>
    }
    sf_clz_func = rom_func_lookup(rom_table_code('L', '3'));
10001784:	480e      	ldr	r0, [pc, #56]	; (100017c0 <__aeabi_float_init+0x58>)
10001786:	f7ff fcd3 	bl	10001130 <rom_func_lookup>
1000178a:	4b0e      	ldr	r3, [pc, #56]	; (100017c4 <__aeabi_float_init+0x5c>)
1000178c:	6018      	str	r0, [r3, #0]
}
1000178e:	bd10      	pop	{r4, pc}
        memcpy(&sf_table, rom_table, SF_TABLE_V1_SIZE);
10001790:	4c0a      	ldr	r4, [pc, #40]	; (100017bc <__aeabi_float_init+0x54>)
10001792:	2254      	movs	r2, #84	; 0x54
10001794:	0020      	movs	r0, r4
10001796:	f7ff fcab 	bl	100010f0 <__wrap___aeabi_memcpy>
            sf_table[i] = (uintptr_t)float_table_shim_on_use_helper;
1000179a:	4b0b      	ldr	r3, [pc, #44]	; (100017c8 <__aeabi_float_init+0x60>)
1000179c:	6563      	str	r3, [r4, #84]	; 0x54
1000179e:	65a3      	str	r3, [r4, #88]	; 0x58
100017a0:	65e3      	str	r3, [r4, #92]	; 0x5c
100017a2:	6623      	str	r3, [r4, #96]	; 0x60
100017a4:	6663      	str	r3, [r4, #100]	; 0x64
100017a6:	66a3      	str	r3, [r4, #104]	; 0x68
100017a8:	66e3      	str	r3, [r4, #108]	; 0x6c
100017aa:	6723      	str	r3, [r4, #112]	; 0x70
100017ac:	6763      	str	r3, [r4, #116]	; 0x74
100017ae:	67a3      	str	r3, [r4, #120]	; 0x78
100017b0:	67e3      	str	r3, [r4, #124]	; 0x7c
        sf_table[SF_TABLE_FLOAT2INT/4] = sf_table[SF_TABLE_FLOAT2FIX/4] = (uintptr_t)float_table_shim_on_use_helper;
100017b2:	6223      	str	r3, [r4, #32]
100017b4:	61e3      	str	r3, [r4, #28]
    if (rom_version >= 2) {
100017b6:	e7e5      	b.n	10001784 <__aeabi_float_init+0x1c>
100017b8:	00004653 	.word	0x00004653
100017bc:	20003160 	.word	0x20003160
100017c0:	0000334c 	.word	0x0000334c
100017c4:	20012748 	.word	0x20012748
100017c8:	10001091 	.word	0x10001091

100017cc <gpio_set_function>:
// This also clears the input/output/irq override bits.
void gpio_set_function(uint gpio, enum gpio_function fn) {
    invalid_params_if(GPIO, gpio >= NUM_BANK0_GPIOS);
    invalid_params_if(GPIO, fn << IO_BANK0_GPIO0_CTRL_FUNCSEL_LSB & ~IO_BANK0_GPIO0_CTRL_FUNCSEL_BITS);
    // Set input enable on, output disable off
    hw_write_masked(&padsbank0_hw->io[gpio],
100017cc:	4a09      	ldr	r2, [pc, #36]	; (100017f4 <gpio_set_function+0x28>)
100017ce:	0083      	lsls	r3, r0, #2
100017d0:	4694      	mov	ip, r2
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
100017d2:	2240      	movs	r2, #64	; 0x40
100017d4:	4463      	add	r3, ip
void gpio_set_function(uint gpio, enum gpio_function fn) {
100017d6:	b510      	push	{r4, lr}
100017d8:	681c      	ldr	r4, [r3, #0]
                   PADS_BANK0_GPIO0_IE_BITS,
                   PADS_BANK0_GPIO0_IE_BITS | PADS_BANK0_GPIO0_OD_BITS
    );
    // Zero all fields apart from fsel; we want this IO to do what the peripheral tells it.
    // This doesn't affect e.g. pullup/pulldown, as these are in pad controls.
    iobank0_hw->io[gpio].ctrl = fn << IO_BANK0_GPIO0_CTRL_FUNCSEL_LSB;
100017da:	00c0      	lsls	r0, r0, #3
100017dc:	4062      	eors	r2, r4
100017de:	24c0      	movs	r4, #192	; 0xc0
100017e0:	4014      	ands	r4, r2
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
100017e2:	2280      	movs	r2, #128	; 0x80
100017e4:	0152      	lsls	r2, r2, #5
100017e6:	4313      	orrs	r3, r2
100017e8:	601c      	str	r4, [r3, #0]
100017ea:	4b03      	ldr	r3, [pc, #12]	; (100017f8 <gpio_set_function+0x2c>)
100017ec:	469c      	mov	ip, r3
100017ee:	4460      	add	r0, ip
100017f0:	6041      	str	r1, [r0, #4]
}
100017f2:	bd10      	pop	{r4, pc}
100017f4:	4001c004 	.word	0x4001c004
100017f8:	40014000 	.word	0x40014000

100017fc <gpio_set_pulls>:

// Note that, on RP2040, setting both pulls enables a "bus keep" function,
// i.e. weak pull to whatever is current high/low state of GPIO.
void gpio_set_pulls(uint gpio, bool up, bool down) {
    invalid_params_if(GPIO, gpio >= NUM_BANK0_GPIOS);
    hw_write_masked(
100017fc:	4b0a      	ldr	r3, [pc, #40]	; (10001828 <gpio_set_pulls+0x2c>)
100017fe:	0080      	lsls	r0, r0, #2
10001800:	469c      	mov	ip, r3
            &padsbank0_hw->io[gpio],
            (!!up << PADS_BANK0_GPIO0_PUE_LSB) | (!!down << PADS_BANK0_GPIO0_PDE_LSB),
10001802:	2304      	movs	r3, #4
    hw_write_masked(
10001804:	4460      	add	r0, ip
            (!!up << PADS_BANK0_GPIO0_PUE_LSB) | (!!down << PADS_BANK0_GPIO0_PDE_LSB),
10001806:	2900      	cmp	r1, #0
10001808:	d001      	beq.n	1000180e <gpio_set_pulls+0x12>
1000180a:	2108      	movs	r1, #8
1000180c:	230c      	movs	r3, #12
1000180e:	2a00      	cmp	r2, #0
10001810:	d100      	bne.n	10001814 <gpio_set_pulls+0x18>
10001812:	000b      	movs	r3, r1
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10001814:	6802      	ldr	r2, [r0, #0]
10001816:	4053      	eors	r3, r2
10001818:	220c      	movs	r2, #12
1000181a:	401a      	ands	r2, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
1000181c:	2380      	movs	r3, #128	; 0x80
1000181e:	015b      	lsls	r3, r3, #5
10001820:	4318      	orrs	r0, r3
10001822:	6002      	str	r2, [r0, #0]
            PADS_BANK0_GPIO0_PUE_BITS | PADS_BANK0_GPIO0_PDE_BITS
    );
}
10001824:	4770      	bx	lr
10001826:	46c0      	nop			; (mov r8, r8)
10001828:	4001c004 	.word	0x4001c004

1000182c <gpio_set_outover>:
    );
}

void gpio_set_outover(uint gpio, uint value) {
    invalid_params_if(GPIO, gpio >= NUM_BANK0_GPIOS);
    hw_write_masked(&iobank0_hw->io[gpio].ctrl,
1000182c:	4b07      	ldr	r3, [pc, #28]	; (1000184c <gpio_set_outover+0x20>)
1000182e:	00c0      	lsls	r0, r0, #3
10001830:	469c      	mov	ip, r3
10001832:	4460      	add	r0, ip
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10001834:	6803      	ldr	r3, [r0, #0]
                   value << IO_BANK0_GPIO0_CTRL_OUTOVER_LSB,
10001836:	0209      	lsls	r1, r1, #8
10001838:	4059      	eors	r1, r3
1000183a:	23c0      	movs	r3, #192	; 0xc0
1000183c:	009b      	lsls	r3, r3, #2
1000183e:	4019      	ands	r1, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10001840:	2380      	movs	r3, #128	; 0x80
10001842:	015b      	lsls	r3, r3, #5
10001844:	4318      	orrs	r0, r3
10001846:	6001      	str	r1, [r0, #0]
                   IO_BANK0_GPIO0_CTRL_OUTOVER_BITS
    );
}
10001848:	4770      	bx	lr
1000184a:	46c0      	nop			; (mov r8, r8)
1000184c:	40014004 	.word	0x40014004

10001850 <gpio_init>:
    else
        hw_clear_bits(&padsbank0_hw->io[gpio], PADS_BANK0_GPIO0_IE_BITS);
}

void gpio_init(uint gpio) {
    sio_hw->gpio_oe_clr = 1ul << gpio;
10001850:	2301      	movs	r3, #1
10001852:	22d0      	movs	r2, #208	; 0xd0
10001854:	4083      	lsls	r3, r0
10001856:	0612      	lsls	r2, r2, #24
10001858:	6293      	str	r3, [r2, #40]	; 0x28
    sio_hw->gpio_clr = 1ul << gpio;
1000185a:	6193      	str	r3, [r2, #24]
    hw_write_masked(&padsbank0_hw->io[gpio],
1000185c:	4a09      	ldr	r2, [pc, #36]	; (10001884 <gpio_init+0x34>)
1000185e:	0083      	lsls	r3, r0, #2
10001860:	4694      	mov	ip, r2
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10001862:	2240      	movs	r2, #64	; 0x40
10001864:	4463      	add	r3, ip
10001866:	6819      	ldr	r1, [r3, #0]
    iobank0_hw->io[gpio].ctrl = fn << IO_BANK0_GPIO0_CTRL_FUNCSEL_LSB;
10001868:	00c0      	lsls	r0, r0, #3
1000186a:	404a      	eors	r2, r1
1000186c:	21c0      	movs	r1, #192	; 0xc0
1000186e:	4011      	ands	r1, r2
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10001870:	2280      	movs	r2, #128	; 0x80
10001872:	0152      	lsls	r2, r2, #5
10001874:	4313      	orrs	r3, r2
10001876:	6019      	str	r1, [r3, #0]
10001878:	4b03      	ldr	r3, [pc, #12]	; (10001888 <gpio_init+0x38>)
1000187a:	469c      	mov	ip, r3
1000187c:	2305      	movs	r3, #5
1000187e:	4460      	add	r0, ip
10001880:	6043      	str	r3, [r0, #4]
    gpio_set_function(gpio, GPIO_FUNC_SIO);
}
10001882:	4770      	bx	lr
10001884:	4001c004 	.word	0x4001c004
10001888:	40014000 	.word	0x40014000

1000188c <irq_set_enabled>:
    invalid_params_if(IRQ, num >= NUM_IRQS);
}

void irq_set_enabled(uint num, bool enabled) {
    check_irq_param(num);
    irq_set_mask_enabled(1u << num, enabled);
1000188c:	2301      	movs	r3, #1
1000188e:	4083      	lsls	r3, r0
    check_irq_param(num);
    return 0 != ((1u << num) & *((io_rw_32 *) (PPB_BASE + M0PLUS_NVIC_ISER_OFFSET)));
}

void irq_set_mask_enabled(uint32_t mask, bool enabled) {
    if (enabled) {
10001890:	2900      	cmp	r1, #0
10001892:	d004      	beq.n	1000189e <irq_set_enabled+0x12>
        // Clear pending before enable
        // (if IRQ is actually asserted, it will immediately re-pend)
        *((io_rw_32 *) (PPB_BASE + M0PLUS_NVIC_ICPR_OFFSET)) = mask;
10001894:	4a03      	ldr	r2, [pc, #12]	; (100018a4 <irq_set_enabled+0x18>)
10001896:	6013      	str	r3, [r2, #0]
        *((io_rw_32 *) (PPB_BASE + M0PLUS_NVIC_ISER_OFFSET)) = mask;
10001898:	4a03      	ldr	r2, [pc, #12]	; (100018a8 <irq_set_enabled+0x1c>)
1000189a:	6013      	str	r3, [r2, #0]
}
1000189c:	4770      	bx	lr
    } else {
        *((io_rw_32 *) (PPB_BASE + M0PLUS_NVIC_ICER_OFFSET)) = mask;
1000189e:	4a03      	ldr	r2, [pc, #12]	; (100018ac <irq_set_enabled+0x20>)
100018a0:	6013      	str	r3, [r2, #0]
}
100018a2:	e7fb      	b.n	1000189c <irq_set_enabled+0x10>
100018a4:	e000e280 	.word	0xe000e280
100018a8:	e000e100 	.word	0xe000e100
100018ac:	e000e180 	.word	0xe000e180

100018b0 <irq_set_pending>:
    }
}

void irq_set_pending(uint num) {
    check_irq_param(num);
    *((io_rw_32 *) (PPB_BASE + M0PLUS_NVIC_ISPR_OFFSET)) = 1u << num;
100018b0:	2301      	movs	r3, #1
100018b2:	4083      	lsls	r3, r0
100018b4:	4a01      	ldr	r2, [pc, #4]	; (100018bc <irq_set_pending+0xc>)
100018b6:	6013      	str	r3, [r2, #0]
}
100018b8:	4770      	bx	lr
100018ba:	46c0      	nop			; (mov r8, r8)
100018bc:	e000e200 	.word	0xe000e200

100018c0 <irq_get_vtable_handler>:
    return (irq_handler_t *) scb_hw->vtor;
100018c0:	4b02      	ldr	r3, [pc, #8]	; (100018cc <irq_get_vtable_handler+0xc>)
    return (uintptr_t)raw_handler - (uintptr_t)irq_handler_chain_slots < sizeof(irq_handler_chain_slots);
}

irq_handler_t irq_get_vtable_handler(uint num) {
    check_irq_param(num);
    return get_vtable()[16 + num];
100018c2:	3010      	adds	r0, #16
    return (irq_handler_t *) scb_hw->vtor;
100018c4:	689b      	ldr	r3, [r3, #8]
    return get_vtable()[16 + num];
100018c6:	0080      	lsls	r0, r0, #2
100018c8:	58c0      	ldr	r0, [r0, r3]
}
100018ca:	4770      	bx	lr
100018cc:	e000ed00 	.word	0xe000ed00

100018d0 <irq_set_exclusive_handler>:

void irq_set_exclusive_handler(uint num, irq_handler_t handler) {
100018d0:	b570      	push	{r4, r5, r6, lr}
100018d2:	000d      	movs	r5, r1
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
100018d4:	f3ef 8610 	mrs	r6, PRIMASK
    __asm volatile ("cpsid i");
100018d8:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
100018da:	4a0f      	ldr	r2, [pc, #60]	; (10001918 <irq_set_exclusive_handler+0x48>)
100018dc:	6813      	ldr	r3, [r2, #0]
100018de:	2b00      	cmp	r3, #0
100018e0:	d0fc      	beq.n	100018dc <irq_set_exclusive_handler+0xc>
    __asm volatile ("dmb");
100018e2:	f3bf 8f5f 	dmb	sy
    return (irq_handler_t *) scb_hw->vtor;
100018e6:	4b0d      	ldr	r3, [pc, #52]	; (1000191c <irq_set_exclusive_handler+0x4c>)
    return get_vtable()[16 + num];
100018e8:	3010      	adds	r0, #16
    return (irq_handler_t *) scb_hw->vtor;
100018ea:	689b      	ldr	r3, [r3, #8]
    return get_vtable()[16 + num];
100018ec:	0084      	lsls	r4, r0, #2
100018ee:	591b      	ldr	r3, [r3, r4]
    check_irq_param(num);
#if !PICO_NO_RAM_VECTOR_TABLE
    spin_lock_t *lock = spin_lock_instance(PICO_SPINLOCK_ID_IRQ);
    uint32_t save = spin_lock_blocking(lock);
    __unused irq_handler_t current = irq_get_vtable_handler(num);
    hard_assert(current == __unhandled_user_irq || current == handler);
100018f0:	4a0b      	ldr	r2, [pc, #44]	; (10001920 <irq_set_exclusive_handler+0x50>)
100018f2:	4293      	cmp	r3, r2
100018f4:	d003      	beq.n	100018fe <irq_set_exclusive_handler+0x2e>
100018f6:	429d      	cmp	r5, r3
100018f8:	d001      	beq.n	100018fe <irq_set_exclusive_handler+0x2e>

#ifdef NDEBUG
extern void hard_assertion_failure();
static inline void hard_assert(bool condition, ...) {
    if (!condition)
        hard_assertion_failure();
100018fa:	f002 f8a9 	bl	10003a50 <hard_assertion_failure>
    return (irq_handler_t *) scb_hw->vtor;
100018fe:	4b07      	ldr	r3, [pc, #28]	; (1000191c <irq_set_exclusive_handler+0x4c>)
10001900:	689b      	ldr	r3, [r3, #8]
    get_vtable()[16 + num] = handler;
10001902:	511d      	str	r5, [r3, r4]
10001904:	f3bf 8f5f 	dmb	sy
10001908:	f3bf 8f5f 	dmb	sy
    *lock = 0;
1000190c:	2200      	movs	r2, #0
1000190e:	4b02      	ldr	r3, [pc, #8]	; (10001918 <irq_set_exclusive_handler+0x48>)
10001910:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10001912:	f386 8810 	msr	PRIMASK, r6
    set_raw_irq_handler_and_unlock(num, handler, save);
#else
    panic_unsupported();
#endif
}
10001916:	bd70      	pop	{r4, r5, r6, pc}
10001918:	d0000124 	.word	0xd0000124
1000191c:	e000ed00 	.word	0xe000ed00
10001920:	100001cd 	.word	0x100001cd

10001924 <irq_remove_handler>:
    }
    set_raw_irq_handler_and_unlock(num, vtable_handler, save);
#endif
}

void irq_remove_handler(uint num, irq_handler_t handler) {
10001924:	b5f0      	push	{r4, r5, r6, r7, lr}
10001926:	46de      	mov	lr, fp
10001928:	4657      	mov	r7, sl
1000192a:	464e      	mov	r6, r9
1000192c:	4645      	mov	r5, r8
1000192e:	b5e0      	push	{r5, r6, r7, lr}
10001930:	000c      	movs	r4, r1
10001932:	b083      	sub	sp, #12
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
10001934:	f3ef 8a10 	mrs	sl, PRIMASK
    __asm volatile ("cpsid i");
10001938:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
1000193a:	4a5e      	ldr	r2, [pc, #376]	; (10001ab4 <irq_remove_handler+0x190>)
1000193c:	6813      	ldr	r3, [r2, #0]
1000193e:	2b00      	cmp	r3, #0
10001940:	d0fc      	beq.n	1000193c <irq_remove_handler+0x18>
    __asm volatile ("dmb");
10001942:	f3bf 8f5f 	dmb	sy
#if !PICO_NO_RAM_VECTOR_TABLE
    spin_lock_t *lock = spin_lock_instance(PICO_SPINLOCK_ID_IRQ);
    uint32_t save = spin_lock_blocking(lock);
    irq_handler_t vtable_handler = get_vtable()[16 + num];
10001946:	2210      	movs	r2, #16
10001948:	4691      	mov	r9, r2
1000194a:	4481      	add	r9, r0
1000194c:	464a      	mov	r2, r9
    return (irq_handler_t *) scb_hw->vtor;
1000194e:	4b5a      	ldr	r3, [pc, #360]	; (10001ab8 <irq_remove_handler+0x194>)
    irq_handler_t vtable_handler = get_vtable()[16 + num];
10001950:	0096      	lsls	r6, r2, #2
    return (irq_handler_t *) scb_hw->vtor;
10001952:	689b      	ldr	r3, [r3, #8]
    irq_handler_t vtable_handler = get_vtable()[16 + num];
10001954:	599d      	ldr	r5, [r3, r6]
    if (vtable_handler != __unhandled_user_irq && vtable_handler != handler) {
10001956:	4b59      	ldr	r3, [pc, #356]	; (10001abc <irq_remove_handler+0x198>)
10001958:	4698      	mov	r8, r3
1000195a:	429d      	cmp	r5, r3
1000195c:	d005      	beq.n	1000196a <irq_remove_handler+0x46>
1000195e:	42a5      	cmp	r5, r4
10001960:	d016      	beq.n	10001990 <irq_remove_handler+0x6c>
    return (uintptr_t)raw_handler - (uintptr_t)irq_handler_chain_slots < sizeof(irq_handler_chain_slots);
10001962:	4f57      	ldr	r7, [pc, #348]	; (10001ac0 <irq_remove_handler+0x19c>)
10001964:	1beb      	subs	r3, r5, r7
#if !PICO_DISABLE_SHARED_IRQ_HANDLERS && PICO_MAX_SHARED_IRQ_HANDLERS
        if (is_shared_irq_raw_handler(vtable_handler)) {
10001966:	2b2f      	cmp	r3, #47	; 0x2f
10001968:	d914      	bls.n	10001994 <irq_remove_handler+0x70>
    return (irq_handler_t *) scb_hw->vtor;
1000196a:	4b53      	ldr	r3, [pc, #332]	; (10001ab8 <irq_remove_handler+0x194>)
1000196c:	689b      	ldr	r3, [r3, #8]
    get_vtable()[16 + num] = handler;
1000196e:	519d      	str	r5, [r3, r6]
10001970:	f3bf 8f5f 	dmb	sy
10001974:	f3bf 8f5f 	dmb	sy
    *lock = 0;
10001978:	2200      	movs	r2, #0
1000197a:	4b4e      	ldr	r3, [pc, #312]	; (10001ab4 <irq_remove_handler+0x190>)
1000197c:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
1000197e:	f38a 8810 	msr	PRIMASK, sl
    }
    set_raw_irq_handler_and_unlock(num, vtable_handler, save);
#else
    panic_unsupported();
#endif
}
10001982:	b003      	add	sp, #12
10001984:	bcf0      	pop	{r4, r5, r6, r7}
10001986:	46bb      	mov	fp, r7
10001988:	46b2      	mov	sl, r6
1000198a:	46a9      	mov	r9, r5
1000198c:	46a0      	mov	r8, r4
1000198e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        vtable_handler = __unhandled_user_irq;
10001990:	001d      	movs	r5, r3
10001992:	e7ea      	b.n	1000196a <irq_remove_handler+0x46>
    return 0 != ((1u << num) & *((io_rw_32 *) (PPB_BASE + M0PLUS_NVIC_ISER_OFFSET)));
10001994:	2301      	movs	r3, #1
10001996:	4083      	lsls	r3, r0
10001998:	469b      	mov	fp, r3
1000199a:	465a      	mov	r2, fp
1000199c:	4b49      	ldr	r3, [pc, #292]	; (10001ac4 <irq_remove_handler+0x1a0>)
1000199e:	681b      	ldr	r3, [r3, #0]
100019a0:	401a      	ands	r2, r3
100019a2:	9200      	str	r2, [sp, #0]
        *((io_rw_32 *) (PPB_BASE + M0PLUS_NVIC_ICER_OFFSET)) = mask;
100019a4:	465a      	mov	r2, fp
100019a6:	4b48      	ldr	r3, [pc, #288]	; (10001ac8 <irq_remove_handler+0x1a4>)
100019a8:	601a      	str	r2, [r3, #0]
    __asm volatile ("dmb");
100019aa:	f3bf 8f5f 	dmb	sy
            uint exception = __get_current_exception();
100019ae:	f7fe fc5a 	bl	10000266 <__get_current_exception>
100019b2:	9001      	str	r0, [sp, #4]
            hard_assert(!exception || exception == num + 16);
100019b4:	2800      	cmp	r0, #0
100019b6:	d003      	beq.n	100019c0 <irq_remove_handler+0x9c>
100019b8:	4581      	cmp	r9, r0
100019ba:	d001      	beq.n	100019c0 <irq_remove_handler+0x9c>
100019bc:	f002 f848 	bl	10003a50 <hard_assertion_failure>
    return (void *) (((uintptr_t) addr) & ~0x1);
100019c0:	2301      	movs	r3, #1
100019c2:	0029      	movs	r1, r5
100019c4:	4399      	bics	r1, r3
            while (to_free_slot->handler != handler) {
100019c6:	688b      	ldr	r3, [r1, #8]
100019c8:	42a3      	cmp	r3, r4
100019ca:	d068      	beq.n	10001a9e <irq_remove_handler+0x17a>
100019cc:	000a      	movs	r2, r1
100019ce:	e007      	b.n	100019e0 <irq_remove_handler+0xbc>
                to_free_slot = &irq_handler_chain_slots[to_free_slot->link];
100019d0:	0043      	lsls	r3, r0, #1
100019d2:	181b      	adds	r3, r3, r0
100019d4:	009b      	lsls	r3, r3, #2
100019d6:	18fb      	adds	r3, r7, r3
            while (to_free_slot->handler != handler) {
100019d8:	6898      	ldr	r0, [r3, #8]
100019da:	42a0      	cmp	r0, r4
100019dc:	d011      	beq.n	10001a02 <irq_remove_handler+0xde>
                to_free_slot = &irq_handler_chain_slots[to_free_slot->link];
100019de:	001a      	movs	r2, r3
                if (to_free_slot->link < 0) break;
100019e0:	2006      	movs	r0, #6
100019e2:	5610      	ldrsb	r0, [r2, r0]
100019e4:	2800      	cmp	r0, #0
100019e6:	daf3      	bge.n	100019d0 <irq_remove_handler+0xac>
    if (enabled) {
100019e8:	9b00      	ldr	r3, [sp, #0]
100019ea:	2b00      	cmp	r3, #0
100019ec:	d005      	beq.n	100019fa <irq_remove_handler+0xd6>
        *((io_rw_32 *) (PPB_BASE + M0PLUS_NVIC_ICPR_OFFSET)) = mask;
100019ee:	465a      	mov	r2, fp
100019f0:	4b36      	ldr	r3, [pc, #216]	; (10001acc <irq_remove_handler+0x1a8>)
100019f2:	601a      	str	r2, [r3, #0]
        *((io_rw_32 *) (PPB_BASE + M0PLUS_NVIC_ISER_OFFSET)) = mask;
100019f4:	4b33      	ldr	r3, [pc, #204]	; (10001ac4 <irq_remove_handler+0x1a0>)
100019f6:	601a      	str	r2, [r3, #0]
100019f8:	e7b7      	b.n	1000196a <irq_remove_handler+0x46>
        *((io_rw_32 *) (PPB_BASE + M0PLUS_NVIC_ICER_OFFSET)) = mask;
100019fa:	465a      	mov	r2, fp
100019fc:	4b32      	ldr	r3, [pc, #200]	; (10001ac8 <irq_remove_handler+0x1a4>)
100019fe:	601a      	str	r2, [r3, #0]
10001a00:	e7b3      	b.n	1000196a <irq_remove_handler+0x46>
                int next_slot_index = to_free_slot->link;
10001a02:	2006      	movs	r0, #6
10001a04:	5618      	ldrsb	r0, [r3, r0]
                if (next_slot_index >= 0) {
10001a06:	2800      	cmp	r0, #0
10001a08:	db21      	blt.n	10001a4e <irq_remove_handler+0x12a>
                    to_free_slot->handler = next_slot->handler;
10001a0a:	0042      	lsls	r2, r0, #1
10001a0c:	1811      	adds	r1, r2, r0
10001a0e:	0089      	lsls	r1, r1, #2
10001a10:	187c      	adds	r4, r7, r1
10001a12:	4688      	mov	r8, r1
10001a14:	68a1      	ldr	r1, [r4, #8]
10001a16:	6099      	str	r1, [r3, #8]
                    to_free_slot->priority = next_slot->priority;
10001a18:	79e1      	ldrb	r1, [r4, #7]
10001a1a:	71d9      	strb	r1, [r3, #7]
                    to_free_slot->link = next_slot->link;
10001a1c:	2106      	movs	r1, #6
10001a1e:	5661      	ldrsb	r1, [r4, r1]
10001a20:	7199      	strb	r1, [r3, #6]
                    to_free_slot->inst3 = next_slot->link >= 0 ?
10001a22:	2900      	cmp	r1, #0
10001a24:	db2b      	blt.n	10001a7e <irq_remove_handler+0x15a>
    int32_t i_addr = (*inst) << 21u;
10001a26:	88a4      	ldrh	r4, [r4, #4]
    uint32_t delta = (ui_to - ui_from - 4) / 2;
10001a28:	1af9      	subs	r1, r7, r3
    int32_t i_addr = (*inst) << 21u;
10001a2a:	0564      	lsls	r4, r4, #21
    return inst + 2 + i_addr;
10001a2c:	1524      	asrs	r4, r4, #20
10001a2e:	4444      	add	r4, r8
    uint32_t delta = (ui_to - ui_from - 4) / 2;
10001a30:	1909      	adds	r1, r1, r4
    return 0xe000 | (delta & 0x7ff);
10001a32:	24e0      	movs	r4, #224	; 0xe0
10001a34:	0509      	lsls	r1, r1, #20
10001a36:	0d49      	lsrs	r1, r1, #21
10001a38:	0224      	lsls	r4, r4, #8
10001a3a:	4321      	orrs	r1, r4
                    to_free_slot->inst3 = next_slot->link >= 0 ?
10001a3c:	8099      	strh	r1, [r3, #4]
                    next_slot->link = irq_hander_chain_free_slot_head;
10001a3e:	1812      	adds	r2, r2, r0
10001a40:	4b23      	ldr	r3, [pc, #140]	; (10001ad0 <irq_remove_handler+0x1ac>)
10001a42:	0092      	lsls	r2, r2, #2
10001a44:	18bf      	adds	r7, r7, r2
10001a46:	781a      	ldrb	r2, [r3, #0]
                    irq_hander_chain_free_slot_head = next_slot_index;
10001a48:	7018      	strb	r0, [r3, #0]
                    next_slot->link = irq_hander_chain_free_slot_head;
10001a4a:	71ba      	strb	r2, [r7, #6]
                    irq_hander_chain_free_slot_head = next_slot_index;
10001a4c:	e7cc      	b.n	100019e8 <irq_remove_handler+0xc4>
                    if (!exception) {
10001a4e:	9801      	ldr	r0, [sp, #4]
10001a50:	2800      	cmp	r0, #0
10001a52:	d117      	bne.n	10001a84 <irq_remove_handler+0x160>
                            prev_slot->link = -1;
10001a54:	30ff      	adds	r0, #255	; 0xff
10001a56:	7190      	strb	r0, [r2, #6]
                            prev_slot->inst3 = 0xbd00; // pop {pc}
10001a58:	481e      	ldr	r0, [pc, #120]	; (10001ad4 <irq_remove_handler+0x1b0>)
10001a5a:	8090      	strh	r0, [r2, #4]
                        to_free_slot->link = irq_hander_chain_free_slot_head;
10001a5c:	4a1c      	ldr	r2, [pc, #112]	; (10001ad0 <irq_remove_handler+0x1ac>)
            int to_free_slot_index = to_free_slot - irq_handler_chain_slots;
10001a5e:	1bc9      	subs	r1, r1, r7
                        to_free_slot->link = irq_hander_chain_free_slot_head;
10001a60:	7810      	ldrb	r0, [r2, #0]
            int to_free_slot_index = to_free_slot - irq_handler_chain_slots;
10001a62:	1089      	asrs	r1, r1, #2
                        to_free_slot->link = irq_hander_chain_free_slot_head;
10001a64:	7198      	strb	r0, [r3, #6]
            int to_free_slot_index = to_free_slot - irq_handler_chain_slots;
10001a66:	008b      	lsls	r3, r1, #2
10001a68:	185b      	adds	r3, r3, r1
10001a6a:	0118      	lsls	r0, r3, #4
10001a6c:	181b      	adds	r3, r3, r0
10001a6e:	0218      	lsls	r0, r3, #8
10001a70:	181b      	adds	r3, r3, r0
10001a72:	0418      	lsls	r0, r3, #16
10001a74:	181b      	adds	r3, r3, r0
10001a76:	005b      	lsls	r3, r3, #1
10001a78:	185b      	adds	r3, r3, r1
                        irq_hander_chain_free_slot_head = to_free_slot_index;
10001a7a:	7013      	strb	r3, [r2, #0]
10001a7c:	e7b4      	b.n	100019e8 <irq_remove_handler+0xc4>
                    to_free_slot->inst3 = next_slot->link >= 0 ?
10001a7e:	21bd      	movs	r1, #189	; 0xbd
10001a80:	0209      	lsls	r1, r1, #8
10001a82:	e7db      	b.n	10001a3c <irq_remove_handler+0x118>
                        insert_branch_and_link(&to_free_slot->inst3, irq_handler_chain_remove_tail);
10001a84:	4a14      	ldr	r2, [pc, #80]	; (10001ad8 <irq_remove_handler+0x1b4>)
    from[0] = 0xf000 | ((delta >> 11u) & 0x7ffu);
10001a86:	4915      	ldr	r1, [pc, #84]	; (10001adc <irq_remove_handler+0x1b8>)
                        insert_branch_and_link(&to_free_slot->inst3, irq_handler_chain_remove_tail);
10001a88:	1ad2      	subs	r2, r2, r3
    uint32_t delta = (ui_to - ui_from - 4) / 2;
10001a8a:	3a08      	subs	r2, #8
    from[0] = 0xf000 | ((delta >> 11u) & 0x7ffu);
10001a8c:	0250      	lsls	r0, r2, #9
10001a8e:	0d40      	lsrs	r0, r0, #21
10001a90:	4301      	orrs	r1, r0
10001a92:	8099      	strh	r1, [r3, #4]
    from[1] = 0xf800 | (delta & 0x7ffu);
10001a94:	4912      	ldr	r1, [pc, #72]	; (10001ae0 <irq_remove_handler+0x1bc>)
    uint32_t delta = (ui_to - ui_from - 4) / 2;
10001a96:	0852      	lsrs	r2, r2, #1
    from[1] = 0xf800 | (delta & 0x7ffu);
10001a98:	430a      	orrs	r2, r1
10001a9a:	80da      	strh	r2, [r3, #6]
}
10001a9c:	e7a4      	b.n	100019e8 <irq_remove_handler+0xc4>
                int next_slot_index = to_free_slot->link;
10001a9e:	2006      	movs	r0, #6
10001aa0:	5608      	ldrsb	r0, [r1, r0]
                if (next_slot_index >= 0) {
10001aa2:	000b      	movs	r3, r1
10001aa4:	2800      	cmp	r0, #0
10001aa6:	dab0      	bge.n	10001a0a <irq_remove_handler+0xe6>
                    if (!exception) {
10001aa8:	9a01      	ldr	r2, [sp, #4]
10001aaa:	2a00      	cmp	r2, #0
10001aac:	d1ea      	bne.n	10001a84 <irq_remove_handler+0x160>
                            vtable_handler = __unhandled_user_irq;
10001aae:	4645      	mov	r5, r8
10001ab0:	e7d4      	b.n	10001a5c <irq_remove_handler+0x138>
10001ab2:	46c0      	nop			; (mov r8, r8)
10001ab4:	d0000124 	.word	0xd0000124
10001ab8:	e000ed00 	.word	0xe000ed00
10001abc:	100001cd 	.word	0x100001cd
10001ac0:	200026c0 	.word	0x200026c0
10001ac4:	e000e100 	.word	0xe000e100
10001ac8:	e000e180 	.word	0xe000e180
10001acc:	e000e280 	.word	0xe000e280
10001ad0:	20012776 	.word	0x20012776
10001ad4:	ffffbd00 	.word	0xffffbd00
10001ad8:	200026fa 	.word	0x200026fa
10001adc:	fffff000 	.word	0xfffff000
10001ae0:	fffff800 	.word	0xfffff800

10001ae4 <irq_set_priority>:

void irq_set_priority(uint num, uint8_t hardware_priority) {
    check_irq_param(num);

    // note that only 32 bit writes are supported
    io_rw_32 *p = (io_rw_32 *)((PPB_BASE + M0PLUS_NVIC_IPR0_OFFSET) + (num & ~3u));
10001ae4:	2303      	movs	r3, #3
void irq_set_priority(uint num, uint8_t hardware_priority) {
10001ae6:	b510      	push	{r4, lr}
    io_rw_32 *p = (io_rw_32 *)((PPB_BASE + M0PLUS_NVIC_IPR0_OFFSET) + (num & ~3u));
10001ae8:	0004      	movs	r4, r0
10001aea:	4a07      	ldr	r2, [pc, #28]	; (10001b08 <irq_set_priority+0x24>)
    *p = (*p & ~(0xffu << (8 * (num & 3u)))) | (((uint32_t) hardware_priority) << (8 * (num & 3u)));
10001aec:	4018      	ands	r0, r3
    io_rw_32 *p = (io_rw_32 *)((PPB_BASE + M0PLUS_NVIC_IPR0_OFFSET) + (num & ~3u));
10001aee:	4694      	mov	ip, r2
    *p = (*p & ~(0xffu << (8 * (num & 3u)))) | (((uint32_t) hardware_priority) << (8 * (num & 3u)));
10001af0:	00c0      	lsls	r0, r0, #3
    io_rw_32 *p = (io_rw_32 *)((PPB_BASE + M0PLUS_NVIC_IPR0_OFFSET) + (num & ~3u));
10001af2:	439c      	bics	r4, r3
    *p = (*p & ~(0xffu << (8 * (num & 3u)))) | (((uint32_t) hardware_priority) << (8 * (num & 3u)));
10001af4:	33fc      	adds	r3, #252	; 0xfc
10001af6:	4083      	lsls	r3, r0
    io_rw_32 *p = (io_rw_32 *)((PPB_BASE + M0PLUS_NVIC_IPR0_OFFSET) + (num & ~3u));
10001af8:	4464      	add	r4, ip
    *p = (*p & ~(0xffu << (8 * (num & 3u)))) | (((uint32_t) hardware_priority) << (8 * (num & 3u)));
10001afa:	6822      	ldr	r2, [r4, #0]
10001afc:	4081      	lsls	r1, r0
10001afe:	439a      	bics	r2, r3
10001b00:	0013      	movs	r3, r2
10001b02:	430b      	orrs	r3, r1
10001b04:	6023      	str	r3, [r4, #0]
}
10001b06:	bd10      	pop	{r4, pc}
10001b08:	e000e400 	.word	0xe000e400

10001b0c <irq_add_tail_to_free_list>:

#if !PICO_DISABLE_SHARED_IRQ_HANDLERS && PICO_MAX_SHARED_IRQ_HANDLERS
// used by irq_handler_chain.S to remove the last link in a handler chain after it executes
// note this must be called only with the last slot in a chain (and during the exception)
void irq_add_tail_to_free_list(struct irq_handler_chain_slot *slot) {
10001b0c:	b570      	push	{r4, r5, r6, lr}
    return (void *) (((uintptr_t) addr) | 0x1);
10001b0e:	2501      	movs	r5, #1
void irq_add_tail_to_free_list(struct irq_handler_chain_slot *slot) {
10001b10:	0004      	movs	r4, r0
    return (void *) (((uintptr_t) addr) | 0x1);
10001b12:	4305      	orrs	r5, r0
    irq_handler_t slot_handler = (irq_handler_t) add_thumb_bit(slot);
    assert(is_shared_irq_raw_handler(slot_handler));

    int exception = __get_current_exception();
10001b14:	f7fe fba7 	bl	10000266 <__get_current_exception>
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
10001b18:	f3ef 8c10 	mrs	ip, PRIMASK
    __asm volatile ("cpsid i");
10001b1c:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
10001b1e:	4a24      	ldr	r2, [pc, #144]	; (10001bb0 <irq_add_tail_to_free_list+0xa4>)
10001b20:	6813      	ldr	r3, [r2, #0]
10001b22:	2b00      	cmp	r3, #0
10001b24:	d0fc      	beq.n	10001b20 <irq_add_tail_to_free_list+0x14>
    __asm volatile ("dmb");
10001b26:	f3bf 8f5f 	dmb	sy
    assert(exception);
    spin_lock_t *lock = spin_lock_instance(PICO_SPINLOCK_ID_IRQ);
    uint32_t save = spin_lock_blocking(lock);
    int slot_index = slot - irq_handler_chain_slots;
10001b2a:	4e22      	ldr	r6, [pc, #136]	; (10001bb4 <irq_add_tail_to_free_list+0xa8>)
    if (slot_handler == get_vtable()[exception]) {
10001b2c:	0080      	lsls	r0, r0, #2
    int slot_index = slot - irq_handler_chain_slots;
10001b2e:	1ba1      	subs	r1, r4, r6
10001b30:	1089      	asrs	r1, r1, #2
10001b32:	008a      	lsls	r2, r1, #2
10001b34:	1852      	adds	r2, r2, r1
10001b36:	0113      	lsls	r3, r2, #4
10001b38:	18d2      	adds	r2, r2, r3
10001b3a:	0213      	lsls	r3, r2, #8
10001b3c:	18d2      	adds	r2, r2, r3
10001b3e:	0413      	lsls	r3, r2, #16
10001b40:	18d3      	adds	r3, r2, r3
    return (irq_handler_t *) scb_hw->vtor;
10001b42:	4a1d      	ldr	r2, [pc, #116]	; (10001bb8 <irq_add_tail_to_free_list+0xac>)
    int slot_index = slot - irq_handler_chain_slots;
10001b44:	005b      	lsls	r3, r3, #1
10001b46:	185b      	adds	r3, r3, r1
    return (irq_handler_t *) scb_hw->vtor;
10001b48:	6891      	ldr	r1, [r2, #8]
    if (slot_handler == get_vtable()[exception]) {
10001b4a:	5809      	ldr	r1, [r1, r0]
10001b4c:	42a9      	cmp	r1, r5
10001b4e:	d01c      	beq.n	10001b8a <irq_add_tail_to_free_list+0x7e>
        get_vtable()[exception] = __unhandled_user_irq;
    } else {
        bool __unused found = false;
        // need to find who points at the slot and update it
        for(uint i=0;i<count_of(irq_handler_chain_slots);i++) {
            if (irq_handler_chain_slots[i].link == slot_index) {
10001b50:	2206      	movs	r2, #6
10001b52:	56b2      	ldrsb	r2, [r6, r2]
10001b54:	429a      	cmp	r2, r3
10001b56:	d01c      	beq.n	10001b92 <irq_add_tail_to_free_list+0x86>
10001b58:	2212      	movs	r2, #18
10001b5a:	56b2      	ldrsb	r2, [r6, r2]
10001b5c:	4293      	cmp	r3, r2
10001b5e:	d022      	beq.n	10001ba6 <irq_add_tail_to_free_list+0x9a>
10001b60:	221e      	movs	r2, #30
10001b62:	56b2      	ldrsb	r2, [r6, r2]
10001b64:	4293      	cmp	r3, r2
10001b66:	d020      	beq.n	10001baa <irq_add_tail_to_free_list+0x9e>
10001b68:	222a      	movs	r2, #42	; 0x2a
10001b6a:	56b2      	ldrsb	r2, [r6, r2]
        for(uint i=0;i<count_of(irq_handler_chain_slots);i++) {
10001b6c:	2103      	movs	r1, #3
            if (irq_handler_chain_slots[i].link == slot_index) {
10001b6e:	429a      	cmp	r2, r3
10001b70:	d010      	beq.n	10001b94 <irq_add_tail_to_free_list+0x88>
            }
        }
        assert(found);
    }
    // add slot to free list
    slot->link = irq_hander_chain_free_slot_head;
10001b72:	4a12      	ldr	r2, [pc, #72]	; (10001bbc <irq_add_tail_to_free_list+0xb0>)
10001b74:	7811      	ldrb	r1, [r2, #0]
    irq_hander_chain_free_slot_head = slot_index;
10001b76:	7013      	strb	r3, [r2, #0]
    slot->link = irq_hander_chain_free_slot_head;
10001b78:	71a1      	strb	r1, [r4, #6]
10001b7a:	f3bf 8f5f 	dmb	sy
    *lock = 0;
10001b7e:	2200      	movs	r2, #0
10001b80:	4b0b      	ldr	r3, [pc, #44]	; (10001bb0 <irq_add_tail_to_free_list+0xa4>)
10001b82:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10001b84:	f38c 8810 	msr	PRIMASK, ip
    spin_unlock(lock, save);
}
10001b88:	bd70      	pop	{r4, r5, r6, pc}
    return (irq_handler_t *) scb_hw->vtor;
10001b8a:	6892      	ldr	r2, [r2, #8]
        get_vtable()[exception] = __unhandled_user_irq;
10001b8c:	490c      	ldr	r1, [pc, #48]	; (10001bc0 <irq_add_tail_to_free_list+0xb4>)
10001b8e:	5011      	str	r1, [r2, r0]
10001b90:	e7ef      	b.n	10001b72 <irq_add_tail_to_free_list+0x66>
        for(uint i=0;i<count_of(irq_handler_chain_slots);i++) {
10001b92:	2100      	movs	r1, #0
                irq_handler_chain_slots[i].link = -1;
10001b94:	004a      	lsls	r2, r1, #1
10001b96:	1852      	adds	r2, r2, r1
10001b98:	21ff      	movs	r1, #255	; 0xff
10001b9a:	0092      	lsls	r2, r2, #2
10001b9c:	18b2      	adds	r2, r6, r2
10001b9e:	7191      	strb	r1, [r2, #6]
                irq_handler_chain_slots[i].inst3 = 0xbd00; // pop {pc}
10001ba0:	4908      	ldr	r1, [pc, #32]	; (10001bc4 <irq_add_tail_to_free_list+0xb8>)
10001ba2:	8091      	strh	r1, [r2, #4]
                break;
10001ba4:	e7e5      	b.n	10001b72 <irq_add_tail_to_free_list+0x66>
        for(uint i=0;i<count_of(irq_handler_chain_slots);i++) {
10001ba6:	2101      	movs	r1, #1
10001ba8:	e7f4      	b.n	10001b94 <irq_add_tail_to_free_list+0x88>
10001baa:	2102      	movs	r1, #2
10001bac:	e7f2      	b.n	10001b94 <irq_add_tail_to_free_list+0x88>
10001bae:	46c0      	nop			; (mov r8, r8)
10001bb0:	d0000124 	.word	0xd0000124
10001bb4:	200026c0 	.word	0x200026c0
10001bb8:	e000ed00 	.word	0xe000ed00
10001bbc:	20012776 	.word	0x20012776
10001bc0:	100001cd 	.word	0x100001cd
10001bc4:	ffffbd00 	.word	0xffffbd00

10001bc8 <irq_init_priorities>:
#endif

void irq_init_priorities() {
10001bc8:	b5f0      	push	{r4, r5, r6, r7, lr}
#if PICO_DEFAULT_IRQ_PRIORITY != 0
    for (uint irq = 0; irq < NUM_IRQS; irq++) {
10001bca:	2200      	movs	r2, #0
    io_rw_32 *p = (io_rw_32 *)((PPB_BASE + M0PLUS_NVIC_IPR0_OFFSET) + (num & ~3u));
10001bcc:	2403      	movs	r4, #3
    *p = (*p & ~(0xffu << (8 * (num & 3u)))) | (((uint32_t) hardware_priority) << (8 * (num & 3u)));
10001bce:	27ff      	movs	r7, #255	; 0xff
10001bd0:	2680      	movs	r6, #128	; 0x80
10001bd2:	0020      	movs	r0, r4
10001bd4:	003d      	movs	r5, r7
    io_rw_32 *p = (io_rw_32 *)((PPB_BASE + M0PLUS_NVIC_IPR0_OFFSET) + (num & ~3u));
10001bd6:	4b09      	ldr	r3, [pc, #36]	; (10001bfc <irq_init_priorities+0x34>)
10001bd8:	0011      	movs	r1, r2
10001bda:	469c      	mov	ip, r3
    *p = (*p & ~(0xffu << (8 * (num & 3u)))) | (((uint32_t) hardware_priority) << (8 * (num & 3u)));
10001bdc:	4010      	ands	r0, r2
10001bde:	00c0      	lsls	r0, r0, #3
10001be0:	4085      	lsls	r5, r0
    io_rw_32 *p = (io_rw_32 *)((PPB_BASE + M0PLUS_NVIC_IPR0_OFFSET) + (num & ~3u));
10001be2:	43a1      	bics	r1, r4
10001be4:	4461      	add	r1, ip
    *p = (*p & ~(0xffu << (8 * (num & 3u)))) | (((uint32_t) hardware_priority) << (8 * (num & 3u)));
10001be6:	680b      	ldr	r3, [r1, #0]
    for (uint irq = 0; irq < NUM_IRQS; irq++) {
10001be8:	3201      	adds	r2, #1
    *p = (*p & ~(0xffu << (8 * (num & 3u)))) | (((uint32_t) hardware_priority) << (8 * (num & 3u)));
10001bea:	43ab      	bics	r3, r5
10001bec:	0035      	movs	r5, r6
10001bee:	4085      	lsls	r5, r0
10001bf0:	432b      	orrs	r3, r5
10001bf2:	600b      	str	r3, [r1, #0]
    for (uint irq = 0; irq < NUM_IRQS; irq++) {
10001bf4:	2a20      	cmp	r2, #32
10001bf6:	d1ec      	bne.n	10001bd2 <irq_init_priorities+0xa>
        irq_set_priority(irq, PICO_DEFAULT_IRQ_PRIORITY);
    }
#endif
}
10001bf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
10001bfa:	46c0      	nop			; (mov r8, r8)
10001bfc:	e000e400 	.word	0xe000e400

10001c00 <lock_init>:
    return (spin_lock_t *) (SIO_BASE + SIO_SPINLOCK0_OFFSET + lock_num * 4);
10001c00:	4b02      	ldr	r3, [pc, #8]	; (10001c0c <lock_init+0xc>)
10001c02:	469c      	mov	ip, r3
10001c04:	4461      	add	r1, ip
10001c06:	0089      	lsls	r1, r1, #2

#include "pico/lock_core.h"

void lock_init(lock_core_t *core, uint lock_num) {
    assert(lock_num >= 0 && lock_num < NUM_SPIN_LOCKS);
    core->spin_lock = spin_lock_instance(lock_num);
10001c08:	6001      	str	r1, [r0, #0]
}
10001c0a:	4770      	bx	lr
10001c0c:	34000040 	.word	0x34000040

10001c10 <core1_trampoline>:

// Default stack for core1 ... if multicore_launch_core1 is not included then .stack1 section will be garbage collected
static uint32_t __attribute__((section(".stack1"))) core1_stack[PICO_CORE1_STACK_SIZE / sizeof(uint32_t)];

static void __attribute__ ((naked)) core1_trampoline() {
    __asm("pop {r0, r1, pc}");
10001c10:	bd03      	pop	{r0, r1, pc}
10001c12:	46c0      	nop			; (mov r8, r8)

10001c14 <core1_wrapper>:
}

int core1_wrapper(int (*entry)(void), void *stack_base) {
10001c14:	b510      	push	{r4, lr}
10001c16:	0004      	movs	r4, r0
#if PICO_USE_STACK_GUARDS
    // install core1 stack guard
    runtime_install_stack_guard(stack_base);
#endif
    irq_init_priorities();
10001c18:	f7ff ffd6 	bl	10001bc8 <irq_init_priorities>
    return (*entry)();
10001c1c:	47a0      	blx	r4
}
10001c1e:	bd10      	pop	{r4, pc}

10001c20 <multicore_reset_core1>:
    io_rw_32 *power_off_clr = hw_clear_alias(power_off);

    // Hard-reset core 1.
    // Reading back confirms the core 1 reset is in the correct state, but also
    // forces APB IO bridges to fence on any internal store buffering
    *power_off_set = PSM_FRCE_OFF_PROC1_BITS;
10001c20:	2280      	movs	r2, #128	; 0x80
10001c22:	4b05      	ldr	r3, [pc, #20]	; (10001c38 <multicore_reset_core1+0x18>)
10001c24:	0252      	lsls	r2, r2, #9
    while (!(*power_off & PSM_FRCE_OFF_PROC1_BITS)) tight_loop_contents();
10001c26:	4905      	ldr	r1, [pc, #20]	; (10001c3c <multicore_reset_core1+0x1c>)
    *power_off_set = PSM_FRCE_OFF_PROC1_BITS;
10001c28:	601a      	str	r2, [r3, #0]
    while (!(*power_off & PSM_FRCE_OFF_PROC1_BITS)) tight_loop_contents();
10001c2a:	680b      	ldr	r3, [r1, #0]
10001c2c:	4213      	tst	r3, r2
10001c2e:	d0fc      	beq.n	10001c2a <multicore_reset_core1+0xa>

    // Bring core 1 back out of reset. It will drain its own mailbox FIFO, then push
    // a 0 to our mailbox to tell us it has done this.
    *power_off_clr = PSM_FRCE_OFF_PROC1_BITS;
10001c30:	4b03      	ldr	r3, [pc, #12]	; (10001c40 <multicore_reset_core1+0x20>)
10001c32:	601a      	str	r2, [r3, #0]
}
10001c34:	4770      	bx	lr
10001c36:	46c0      	nop			; (mov r8, r8)
10001c38:	40012004 	.word	0x40012004
10001c3c:	40010004 	.word	0x40010004
10001c40:	40013004 	.word	0x40013004

10001c44 <multicore_launch_core1>:
    stack_ptr[1] = (uintptr_t) stack_bottom;
    stack_ptr[2] = (uintptr_t) core1_wrapper;
    multicore_launch_core1_raw(core1_trampoline, stack_ptr, scb_hw->vtor);
}

void multicore_launch_core1(void (*entry)(void)) {
10001c44:	b530      	push	{r4, r5, lr}
    extern char __StackOneBottom;
    uint32_t *stack_limit = (uint32_t *) &__StackOneBottom;
    // hack to reference core1_stack although that pointer is wrong.... core1_stack should always be <= stack_limit, if not boom!
    uint32_t *stack = core1_stack <= stack_limit ? stack_limit : (uint32_t *) -1;
10001c46:	4a22      	ldr	r2, [pc, #136]	; (10001cd0 <multicore_launch_core1+0x8c>)
10001c48:	4b22      	ldr	r3, [pc, #136]	; (10001cd4 <multicore_launch_core1+0x90>)
void multicore_launch_core1(void (*entry)(void)) {
10001c4a:	b087      	sub	sp, #28
    uint32_t *stack = core1_stack <= stack_limit ? stack_limit : (uint32_t *) -1;
10001c4c:	429a      	cmp	r2, r3
10001c4e:	d201      	bcs.n	10001c54 <multicore_launch_core1+0x10>
10001c50:	2201      	movs	r2, #1
10001c52:	4252      	negs	r2, r2
10001c54:	0013      	movs	r3, r2
    stack_ptr[0] = (uintptr_t) entry;
10001c56:	4920      	ldr	r1, [pc, #128]	; (10001cd8 <multicore_launch_core1+0x94>)
    multicore_launch_core1_with_stack(entry, stack, sizeof(core1_stack));
}

void multicore_launch_core1_raw(void (*entry)(void), uint32_t *sp, uint32_t vector_table) {
    uint32_t cmd_sequence[] = {0, 0, 1, (uintptr_t) vector_table, (uintptr_t) sp, (uintptr_t) entry};
10001c58:	2400      	movs	r4, #0
    stack_ptr[0] = (uintptr_t) entry;
10001c5a:	5050      	str	r0, [r2, r1]
    stack_ptr[1] = (uintptr_t) stack_bottom;
10001c5c:	3104      	adds	r1, #4
10001c5e:	5052      	str	r2, [r2, r1]
    stack_ptr[2] = (uintptr_t) core1_wrapper;
10001c60:	4a1e      	ldr	r2, [pc, #120]	; (10001cdc <multicore_launch_core1+0x98>)
10001c62:	491f      	ldr	r1, [pc, #124]	; (10001ce0 <multicore_launch_core1+0x9c>)
    uint32_t cmd_sequence[] = {0, 0, 1, (uintptr_t) vector_table, (uintptr_t) sp, (uintptr_t) entry};
10001c64:	2000      	movs	r0, #0
    stack_ptr[2] = (uintptr_t) core1_wrapper;
10001c66:	5099      	str	r1, [r3, r2]
    multicore_launch_core1_raw(core1_trampoline, stack_ptr, scb_hw->vtor);
10001c68:	4a1e      	ldr	r2, [pc, #120]	; (10001ce4 <multicore_launch_core1+0xa0>)
    uint32_t cmd_sequence[] = {0, 0, 1, (uintptr_t) vector_table, (uintptr_t) sp, (uintptr_t) entry};
10001c6a:	2100      	movs	r1, #0
    multicore_launch_core1_raw(core1_trampoline, stack_ptr, scb_hw->vtor);
10001c6c:	6892      	ldr	r2, [r2, #8]
    uint32_t cmd_sequence[] = {0, 0, 1, (uintptr_t) vector_table, (uintptr_t) sp, (uintptr_t) entry};
10001c6e:	9000      	str	r0, [sp, #0]
10001c70:	9101      	str	r1, [sp, #4]
10001c72:	9203      	str	r2, [sp, #12]
    stack_ptr -= 3;
10001c74:	4a18      	ldr	r2, [pc, #96]	; (10001cd8 <multicore_launch_core1+0x94>)
    uint32_t cmd_sequence[] = {0, 0, 1, (uintptr_t) vector_table, (uintptr_t) sp, (uintptr_t) entry};
10001c76:	2101      	movs	r1, #1
    stack_ptr -= 3;
10001c78:	4694      	mov	ip, r2
10001c7a:	4463      	add	r3, ip
    uint32_t cmd_sequence[] = {0, 0, 1, (uintptr_t) vector_table, (uintptr_t) sp, (uintptr_t) entry};
10001c7c:	9304      	str	r3, [sp, #16]
10001c7e:	4b1a      	ldr	r3, [pc, #104]	; (10001ce8 <multicore_launch_core1+0xa4>)

    uint seq = 0;
10001c80:	2500      	movs	r5, #0
    uint32_t cmd_sequence[] = {0, 0, 1, (uintptr_t) vector_table, (uintptr_t) sp, (uintptr_t) entry};
10001c82:	9305      	str	r3, [sp, #20]
 *  \ingroup multicore_fifo
 *
 * \return true if the FIFO has data in it, false otherwise
 */
static inline bool multicore_fifo_rvalid() {
    return !!(sio_hw->fifo_st & SIO_FIFO_ST_VLD_BITS);
10001c84:	23d0      	movs	r3, #208	; 0xd0
10001c86:	9102      	str	r1, [sp, #8]
10001c88:	061b      	lsls	r3, r3, #24
 *  \ingroup multicore_fifo
 *
 *  @return true if the FIFO is full, false otherwise
 */
static inline bool multicore_fifo_wready() {
    return !!(sio_hw->fifo_st & SIO_FIFO_ST_RDY_BITS);
10001c8a:	3002      	adds	r0, #2
    do {
        uint cmd = cmd_sequence[seq];
        // we drain before sending a 0
        if (!cmd) {
10001c8c:	2c00      	cmp	r4, #0
10001c8e:	d014      	beq.n	10001cba <multicore_launch_core1+0x76>
10001c90:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    while (!multicore_fifo_wready())
10001c92:	4210      	tst	r0, r2
10001c94:	d0fc      	beq.n	10001c90 <multicore_launch_core1+0x4c>
    sio_hw->fifo_wr = data;
10001c96:	655c      	str	r4, [r3, #84]	; 0x54
    __asm volatile ("sev");
10001c98:	bf40      	sev
    return !!(sio_hw->fifo_st & SIO_FIFO_ST_VLD_BITS);
10001c9a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    while (!multicore_fifo_rvalid())
10001c9c:	4211      	tst	r1, r2
10001c9e:	d103      	bne.n	10001ca8 <multicore_launch_core1+0x64>
    __asm volatile ("wfe");
10001ca0:	bf20      	wfe
10001ca2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
10001ca4:	4211      	tst	r1, r2
10001ca6:	d0fb      	beq.n	10001ca0 <multicore_launch_core1+0x5c>
    return sio_hw->fifo_rd;
10001ca8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
            __sev(); // core 1 may be waiting for fifo space
        }
        multicore_fifo_push_blocking(cmd);
        uint32_t response = multicore_fifo_pop_blocking();
        // move to next state on correct response otherwise start over
        seq = cmd == response ? seq + 1 : 0;
10001caa:	42a2      	cmp	r2, r4
10001cac:	d00a      	beq.n	10001cc4 <multicore_launch_core1+0x80>
10001cae:	2500      	movs	r5, #0
        uint cmd = cmd_sequence[seq];
10001cb0:	466c      	mov	r4, sp
10001cb2:	00aa      	lsls	r2, r5, #2
10001cb4:	58a4      	ldr	r4, [r4, r2]
10001cb6:	e7e9      	b.n	10001c8c <multicore_launch_core1+0x48>
 *  \ingroup multicore_fifo
 *
 */
static inline void multicore_fifo_drain() {
    while (multicore_fifo_rvalid())
        (void) sio_hw->fifo_rd;
10001cb8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    return !!(sio_hw->fifo_st & SIO_FIFO_ST_VLD_BITS);
10001cba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    while (multicore_fifo_rvalid())
10001cbc:	4211      	tst	r1, r2
10001cbe:	d1fb      	bne.n	10001cb8 <multicore_launch_core1+0x74>
    __asm volatile ("sev");
10001cc0:	bf40      	sev
    while (!multicore_fifo_wready())
10001cc2:	e7e5      	b.n	10001c90 <multicore_launch_core1+0x4c>
        seq = cmd == response ? seq + 1 : 0;
10001cc4:	3501      	adds	r5, #1
    } while (seq < count_of(cmd_sequence));
10001cc6:	2d05      	cmp	r5, #5
10001cc8:	d9f2      	bls.n	10001cb0 <multicore_launch_core1+0x6c>
}
10001cca:	b007      	add	sp, #28
10001ccc:	bd30      	pop	{r4, r5, pc}
10001cce:	46c0      	nop			; (mov r8, r8)
10001cd0:	20040800 	.word	0x20040800
10001cd4:	20040000 	.word	0x20040000
10001cd8:	000007f4 	.word	0x000007f4
10001cdc:	000007fc 	.word	0x000007fc
10001ce0:	10001c15 	.word	0x10001c15
10001ce4:	e000ed00 	.word	0xe000ed00
10001ce8:	10001c11 	.word	0x10001c11

10001cec <mutex_init>:

#if !PICO_NO_HARDWARE
static_assert(sizeof(mutex_t) == 8, "");
#endif

void mutex_init(mutex_t *mtx) {
10001cec:	b510      	push	{r4, lr}
10001cee:	0004      	movs	r4, r0
    lock_init(&mtx->core, next_striped_spin_lock_num());
10001cf0:	f002 fa14 	bl	1000411c <next_striped_spin_lock_num>
10001cf4:	0001      	movs	r1, r0
10001cf6:	0020      	movs	r0, r4
10001cf8:	f7ff ff82 	bl	10001c00 <lock_init>
    mtx->owner = -1;
10001cfc:	23ff      	movs	r3, #255	; 0xff
10001cfe:	7123      	strb	r3, [r4, #4]
    __asm volatile ("dmb");
10001d00:	f3bf 8f5f 	dmb	sy
    __mem_fence_release();
}
10001d04:	bd10      	pop	{r4, pc}
10001d06:	46c0      	nop			; (mov r8, r8)

10001d08 <ph_merge_nodes>:
        c->sibling = n->child;
        n->child = child_id;
    }
}

static pheap_node_id_t ph_merge_nodes(pheap_t *heap, pheap_node_id_t a, pheap_node_id_t b) {
10001d08:	b570      	push	{r4, r5, r6, lr}
10001d0a:	0005      	movs	r5, r0
10001d0c:	0014      	movs	r4, r2
10001d0e:	0016      	movs	r6, r2
    if (!a) return b;
10001d10:	2900      	cmp	r1, #0
10001d12:	d015      	beq.n	10001d40 <ph_merge_nodes+0x38>
    if (!b) return a;
10001d14:	000c      	movs	r4, r1
10001d16:	2a00      	cmp	r2, #0
10001d18:	d012      	beq.n	10001d40 <ph_merge_nodes+0x38>
    if (heap->comparator(heap->user_data, a, b)) {
10001d1a:	6880      	ldr	r0, [r0, #8]
10001d1c:	686b      	ldr	r3, [r5, #4]
10001d1e:	4798      	blx	r3
10001d20:	6829      	ldr	r1, [r5, #0]
10001d22:	2800      	cmp	r0, #0
10001d24:	d00e      	beq.n	10001d44 <ph_merge_nodes+0x3c>
    return heap->nodes + id - 1;
10001d26:	0073      	lsls	r3, r6, #1
10001d28:	199b      	adds	r3, r3, r6
10001d2a:	0062      	lsls	r2, r4, #1
10001d2c:	3b03      	subs	r3, #3
10001d2e:	1912      	adds	r2, r2, r4
10001d30:	18cb      	adds	r3, r1, r3
10001d32:	3a03      	subs	r2, #3
    c->parent = parent_id;
10001d34:	709c      	strb	r4, [r3, #2]
    return heap->nodes + id - 1;
10001d36:	1888      	adds	r0, r1, r2
    if (!n->child) {
10001d38:	5c8a      	ldrb	r2, [r1, r2]
10001d3a:	2a00      	cmp	r2, #0
10001d3c:	d115      	bne.n	10001d6a <ph_merge_nodes+0x62>
        n->child = child_id;
10001d3e:	7006      	strb	r6, [r0, #0]
        return a;
    } else {
        ph_add_child_node(heap, b, a);
        return b;
    }
}
10001d40:	0020      	movs	r0, r4
10001d42:	bd70      	pop	{r4, r5, r6, pc}
    return heap->nodes + id - 1;
10001d44:	0063      	lsls	r3, r4, #1
10001d46:	191b      	adds	r3, r3, r4
10001d48:	0072      	lsls	r2, r6, #1
10001d4a:	3b03      	subs	r3, #3
10001d4c:	1992      	adds	r2, r2, r6
10001d4e:	18cb      	adds	r3, r1, r3
10001d50:	3a03      	subs	r2, #3
    c->parent = parent_id;
10001d52:	709e      	strb	r6, [r3, #2]
    return heap->nodes + id - 1;
10001d54:	1888      	adds	r0, r1, r2
    if (!n->child) {
10001d56:	5c8a      	ldrb	r2, [r1, r2]
10001d58:	2a00      	cmp	r2, #0
10001d5a:	d102      	bne.n	10001d62 <ph_merge_nodes+0x5a>
        n->child = child_id;
10001d5c:	7004      	strb	r4, [r0, #0]
10001d5e:	0034      	movs	r4, r6
10001d60:	e7ee      	b.n	10001d40 <ph_merge_nodes+0x38>
        c->sibling = n->child;
10001d62:	705a      	strb	r2, [r3, #1]
        n->child = child_id;
10001d64:	7004      	strb	r4, [r0, #0]
10001d66:	0034      	movs	r4, r6
10001d68:	e7ea      	b.n	10001d40 <ph_merge_nodes+0x38>
        c->sibling = n->child;
10001d6a:	705a      	strb	r2, [r3, #1]
        n->child = child_id;
10001d6c:	7006      	strb	r6, [r0, #0]
10001d6e:	e7e7      	b.n	10001d40 <ph_merge_nodes+0x38>

10001d70 <ph_create>:

#include <stdio.h>
#include <stdlib.h>
#include "pico/util/pheap.h"

pheap_t *ph_create(uint max_nodes, pheap_comparator comparator, void *user_data) {
10001d70:	b5f0      	push	{r4, r5, r6, r7, lr}
10001d72:	46c6      	mov	lr, r8
10001d74:	0005      	movs	r5, r0
10001d76:	000f      	movs	r7, r1
10001d78:	b500      	push	{lr}
    invalid_params_if(PHEAP, !max_nodes || max_nodes >= (1u << sizeof(pheap_node_id_t)));
    pheap_t *heap = calloc(1, sizeof(pheap_t));
10001d7a:	2110      	movs	r1, #16
10001d7c:	2001      	movs	r0, #1
pheap_t *ph_create(uint max_nodes, pheap_comparator comparator, void *user_data) {
10001d7e:	0016      	movs	r6, r2
    pheap_t *heap = calloc(1, sizeof(pheap_t));
10001d80:	f000 f9ac 	bl	100020dc <__wrap_calloc>
    heap->max_nodes = max_nodes;
10001d84:	b2eb      	uxtb	r3, r5
    pheap_t *heap = calloc(1, sizeof(pheap_t));
10001d86:	0004      	movs	r4, r0
    heap->max_nodes = max_nodes;
10001d88:	7303      	strb	r3, [r0, #12]
    heap->comparator = comparator;
    heap->nodes = calloc(max_nodes, sizeof(pheap_node_t));
10001d8a:	2103      	movs	r1, #3
    heap->comparator = comparator;
10001d8c:	6047      	str	r7, [r0, #4]
    heap->nodes = calloc(max_nodes, sizeof(pheap_node_t));
10001d8e:	0028      	movs	r0, r5
    heap->max_nodes = max_nodes;
10001d90:	4698      	mov	r8, r3
    heap->nodes = calloc(max_nodes, sizeof(pheap_node_t));
10001d92:	f000 f9a3 	bl	100020dc <__wrap_calloc>
    ph_clear(heap);
    return heap;
}

void ph_clear(pheap_t *heap) {
    heap->root_id = 0;
10001d96:	2300      	movs	r3, #0
10001d98:	7363      	strb	r3, [r4, #13]
    heap->free_head_id = 1;
10001d9a:	3301      	adds	r3, #1
10001d9c:	73a3      	strb	r3, [r4, #14]
    heap->free_tail_id = heap->max_nodes;
10001d9e:	4643      	mov	r3, r8
10001da0:	21ff      	movs	r1, #255	; 0xff
10001da2:	73e3      	strb	r3, [r4, #15]
    for(uint i = 1; i < heap->max_nodes; i++) {
10001da4:	23fe      	movs	r3, #254	; 0xfe
    heap->nodes = calloc(max_nodes, sizeof(pheap_node_t));
10001da6:	6020      	str	r0, [r4, #0]
    heap->user_data = user_data;
10001da8:	60a6      	str	r6, [r4, #8]
    for(uint i = 1; i < heap->max_nodes; i++) {
10001daa:	4029      	ands	r1, r5
10001dac:	422b      	tst	r3, r5
10001dae:	d006      	beq.n	10001dbe <ph_create+0x4e>
10001db0:	1c42      	adds	r2, r0, #1
10001db2:	3bfd      	subs	r3, #253	; 0xfd
        ph_get_node(heap, i)->sibling = i + 1;
10001db4:	3301      	adds	r3, #1
10001db6:	7013      	strb	r3, [r2, #0]
    for(uint i = 1; i < heap->max_nodes; i++) {
10001db8:	3203      	adds	r2, #3
10001dba:	428b      	cmp	r3, r1
10001dbc:	d3fa      	bcc.n	10001db4 <ph_create+0x44>
    }
    ph_get_node(heap, heap->max_nodes)->sibling = 0;
10001dbe:	004b      	lsls	r3, r1, #1
10001dc0:	1859      	adds	r1, r3, r1
10001dc2:	2300      	movs	r3, #0
10001dc4:	1840      	adds	r0, r0, r1
10001dc6:	3803      	subs	r0, #3
10001dc8:	7043      	strb	r3, [r0, #1]
}
10001dca:	0020      	movs	r0, r4
10001dcc:	bc80      	pop	{r7}
10001dce:	46b8      	mov	r8, r7
10001dd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
10001dd2:	46c0      	nop			; (mov r8, r8)

10001dd4 <ph_merge_two_pass>:
void ph_destroy(pheap_t *heap) {
    free(heap->nodes);
    free(heap);
}

pheap_node_id_t ph_merge_two_pass(pheap_t *heap, pheap_node_id_t id) {
10001dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10001dd6:	46ce      	mov	lr, r9
10001dd8:	4647      	mov	r7, r8
10001dda:	0006      	movs	r6, r0
10001ddc:	000c      	movs	r4, r1
10001dde:	b580      	push	{r7, lr}
    if (!id || !ph_get_node(heap, id)->sibling) {
10001de0:	2900      	cmp	r1, #0
10001de2:	d007      	beq.n	10001df4 <ph_merge_two_pass+0x20>
    return heap->nodes + id - 1;
10001de4:	004d      	lsls	r5, r1, #1
10001de6:	6803      	ldr	r3, [r0, #0]
10001de8:	186d      	adds	r5, r5, r1
10001dea:	3d03      	subs	r5, #3
10001dec:	195a      	adds	r2, r3, r5
10001dee:	7857      	ldrb	r7, [r2, #1]
10001df0:	2f00      	cmp	r7, #0
10001df2:	d104      	bne.n	10001dfe <ph_merge_two_pass+0x2a>
        b = ph_get_node(heap, id)->sibling;
        new_node = ph_get_node(heap, b)->sibling;
        ph_get_node(heap, a)->sibling = ph_get_node(heap, b)->sibling = 0;
        return ph_merge_nodes(heap, ph_merge_nodes(heap, a, b), ph_merge_two_pass(heap, new_node));
    }
}
10001df4:	0020      	movs	r0, r4
10001df6:	bcc0      	pop	{r6, r7}
10001df8:	46b9      	mov	r9, r7
10001dfa:	46b0      	mov	r8, r6
10001dfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10001dfe:	0079      	lsls	r1, r7, #1
10001e00:	19c9      	adds	r1, r1, r7
10001e02:	3903      	subs	r1, #3
10001e04:	4688      	mov	r8, r1
10001e06:	4443      	add	r3, r8
        new_node = ph_get_node(heap, b)->sibling;
10001e08:	7859      	ldrb	r1, [r3, #1]
10001e0a:	4689      	mov	r9, r1
        ph_get_node(heap, a)->sibling = ph_get_node(heap, b)->sibling = 0;
10001e0c:	2100      	movs	r1, #0
10001e0e:	7059      	strb	r1, [r3, #1]
10001e10:	7051      	strb	r1, [r2, #1]
    if (heap->comparator(heap->user_data, a, b)) {
10001e12:	6873      	ldr	r3, [r6, #4]
10001e14:	003a      	movs	r2, r7
10001e16:	0021      	movs	r1, r4
10001e18:	6880      	ldr	r0, [r0, #8]
10001e1a:	4798      	blx	r3
10001e1c:	6833      	ldr	r3, [r6, #0]
10001e1e:	2800      	cmp	r0, #0
10001e20:	d014      	beq.n	10001e4c <ph_merge_two_pass+0x78>
    return heap->nodes + id - 1;
10001e22:	4642      	mov	r2, r8
10001e24:	189a      	adds	r2, r3, r2
    c->parent = parent_id;
10001e26:	7094      	strb	r4, [r2, #2]
    return heap->nodes + id - 1;
10001e28:	1959      	adds	r1, r3, r5
    if (!n->child) {
10001e2a:	5d5b      	ldrb	r3, [r3, r5]
10001e2c:	2b00      	cmp	r3, #0
10001e2e:	d000      	beq.n	10001e32 <ph_merge_two_pass+0x5e>
        c->sibling = n->child;
10001e30:	7053      	strb	r3, [r2, #1]
        n->child = child_id;
10001e32:	700f      	strb	r7, [r1, #0]
10001e34:	0027      	movs	r7, r4
        return ph_merge_nodes(heap, ph_merge_nodes(heap, a, b), ph_merge_two_pass(heap, new_node));
10001e36:	4649      	mov	r1, r9
10001e38:	0030      	movs	r0, r6
10001e3a:	f7ff ffcb 	bl	10001dd4 <ph_merge_two_pass>
10001e3e:	0039      	movs	r1, r7
10001e40:	0002      	movs	r2, r0
10001e42:	0030      	movs	r0, r6
10001e44:	f7ff ff60 	bl	10001d08 <ph_merge_nodes>
10001e48:	0004      	movs	r4, r0
10001e4a:	e7d3      	b.n	10001df4 <ph_merge_two_pass+0x20>
    return heap->nodes + id - 1;
10001e4c:	4642      	mov	r2, r8
    if (!n->child) {
10001e4e:	4641      	mov	r1, r8
    return heap->nodes + id - 1;
10001e50:	195d      	adds	r5, r3, r5
    c->parent = parent_id;
10001e52:	70af      	strb	r7, [r5, #2]
    return heap->nodes + id - 1;
10001e54:	189a      	adds	r2, r3, r2
    if (!n->child) {
10001e56:	5c5b      	ldrb	r3, [r3, r1]
10001e58:	2b00      	cmp	r3, #0
10001e5a:	d000      	beq.n	10001e5e <ph_merge_two_pass+0x8a>
        c->sibling = n->child;
10001e5c:	706b      	strb	r3, [r5, #1]
        n->child = child_id;
10001e5e:	7014      	strb	r4, [r2, #0]
10001e60:	e7e9      	b.n	10001e36 <ph_merge_two_pass+0x62>
10001e62:	46c0      	nop			; (mov r8, r8)

10001e64 <ph_remove_any_head>:

static pheap_node_id_t ph_remove_any_head(pheap_t *heap, pheap_node_id_t root_id, bool reserve) {
10001e64:	b5f0      	push	{r4, r5, r6, r7, lr}
10001e66:	4657      	mov	r7, sl
10001e68:	4645      	mov	r5, r8
10001e6a:	46de      	mov	lr, fp
10001e6c:	464e      	mov	r6, r9
10001e6e:	b5e0      	push	{r5, r6, r7, lr}
10001e70:	000d      	movs	r5, r1
    return heap->nodes + id - 1;
10001e72:	006b      	lsls	r3, r5, #1
10001e74:	6801      	ldr	r1, [r0, #0]
10001e76:	195b      	adds	r3, r3, r5
10001e78:	1edf      	subs	r7, r3, #3
10001e7a:	0004      	movs	r4, r0
    assert(root_id);
//    printf("Removing head %d (parent %d sibling %d)\n", root_id, ph_get_node(heap, root_id)->parent, ph_get_node(heap, root_id)->sibling);
    assert(!ph_get_node(heap, root_id)->sibling);
    assert(!ph_get_node(heap, root_id)->parent);
    pheap_node_id_t new_root_id = ph_merge_two_pass(heap, ph_get_node(heap, root_id)->child);
10001e7c:	5dc8      	ldrb	r0, [r1, r7]
static pheap_node_id_t ph_remove_any_head(pheap_t *heap, pheap_node_id_t root_id, bool reserve) {
10001e7e:	b083      	sub	sp, #12
10001e80:	9201      	str	r2, [sp, #4]
10001e82:	19ca      	adds	r2, r1, r7
    if (!id || !ph_get_node(heap, id)->sibling) {
10001e84:	2800      	cmp	r0, #0
10001e86:	d04c      	beq.n	10001f22 <ph_remove_any_head+0xbe>
10001e88:	0043      	lsls	r3, r0, #1
10001e8a:	181b      	adds	r3, r3, r0
10001e8c:	3b03      	subs	r3, #3
10001e8e:	18cb      	adds	r3, r1, r3
10001e90:	785e      	ldrb	r6, [r3, #1]
10001e92:	46b4      	mov	ip, r6
10001e94:	2e00      	cmp	r6, #0
10001e96:	d116      	bne.n	10001ec6 <ph_remove_any_head+0x62>
    if (!reserve) {
10001e98:	9e01      	ldr	r6, [sp, #4]
10001e9a:	2e00      	cmp	r6, #0
10001e9c:	d13e      	bne.n	10001f1c <ph_remove_any_head+0xb8>
        if (heap->free_tail_id) {
10001e9e:	7be6      	ldrb	r6, [r4, #15]
10001ea0:	2e00      	cmp	r6, #0
10001ea2:	d004      	beq.n	10001eae <ph_remove_any_head+0x4a>
            ph_get_node(heap, heap->free_tail_id)->sibling = root_id;
10001ea4:	0073      	lsls	r3, r6, #1
10001ea6:	199b      	adds	r3, r3, r6
10001ea8:	18cb      	adds	r3, r1, r3
10001eaa:	3b03      	subs	r3, #3
10001eac:	705d      	strb	r5, [r3, #1]
        }
        heap->free_tail_id = root_id;
10001eae:	73e5      	strb	r5, [r4, #15]
    }
    if (new_root_id) ph_get_node(heap, new_root_id)->parent = 0;
10001eb0:	2800      	cmp	r0, #0
10001eb2:	d12f      	bne.n	10001f14 <ph_remove_any_head+0xb0>
    ph_get_node(heap, root_id)->sibling = 0;
10001eb4:	2300      	movs	r3, #0
10001eb6:	7053      	strb	r3, [r2, #1]
    return new_root_id;
}
10001eb8:	b003      	add	sp, #12
10001eba:	bcf0      	pop	{r4, r5, r6, r7}
10001ebc:	46bb      	mov	fp, r7
10001ebe:	46b2      	mov	sl, r6
10001ec0:	46a9      	mov	r9, r5
10001ec2:	46a0      	mov	r8, r4
10001ec4:	bdf0      	pop	{r4, r5, r6, r7, pc}
10001ec6:	0072      	lsls	r2, r6, #1
10001ec8:	4462      	add	r2, ip
10001eca:	3a03      	subs	r2, #3
10001ecc:	1889      	adds	r1, r1, r2
        new_node = ph_get_node(heap, b)->sibling;
10001ece:	784a      	ldrb	r2, [r1, #1]
10001ed0:	4690      	mov	r8, r2
        ph_get_node(heap, a)->sibling = ph_get_node(heap, b)->sibling = 0;
10001ed2:	2200      	movs	r2, #0
10001ed4:	704a      	strb	r2, [r1, #1]
10001ed6:	4691      	mov	r9, r2
10001ed8:	705a      	strb	r2, [r3, #1]
        return ph_merge_nodes(heap, ph_merge_nodes(heap, a, b), ph_merge_two_pass(heap, new_node));
10001eda:	0001      	movs	r1, r0
10001edc:	0032      	movs	r2, r6
10001ede:	0020      	movs	r0, r4
10001ee0:	f7ff ff12 	bl	10001d08 <ph_merge_nodes>
    if (!id || !ph_get_node(heap, id)->sibling) {
10001ee4:	4643      	mov	r3, r8
        return ph_merge_nodes(heap, ph_merge_nodes(heap, a, b), ph_merge_two_pass(heap, new_node));
10001ee6:	4682      	mov	sl, r0
    if (!id || !ph_get_node(heap, id)->sibling) {
10001ee8:	2b00      	cmp	r3, #0
10001eea:	d007      	beq.n	10001efc <ph_remove_any_head+0x98>
10001eec:	005b      	lsls	r3, r3, #1
10001eee:	6821      	ldr	r1, [r4, #0]
10001ef0:	4443      	add	r3, r8
10001ef2:	3b03      	subs	r3, #3
10001ef4:	18cb      	adds	r3, r1, r3
10001ef6:	785a      	ldrb	r2, [r3, #1]
10001ef8:	2a00      	cmp	r2, #0
10001efa:	d116      	bne.n	10001f2a <ph_remove_any_head+0xc6>
        return ph_merge_nodes(heap, ph_merge_nodes(heap, a, b), ph_merge_two_pass(heap, new_node));
10001efc:	4642      	mov	r2, r8
10001efe:	4651      	mov	r1, sl
10001f00:	0020      	movs	r0, r4
10001f02:	f7ff ff01 	bl	10001d08 <ph_merge_nodes>
10001f06:	6821      	ldr	r1, [r4, #0]
    if (!reserve) {
10001f08:	9b01      	ldr	r3, [sp, #4]
10001f0a:	19ca      	adds	r2, r1, r7
10001f0c:	2b00      	cmp	r3, #0
10001f0e:	d0c6      	beq.n	10001e9e <ph_remove_any_head+0x3a>
    if (new_root_id) ph_get_node(heap, new_root_id)->parent = 0;
10001f10:	2800      	cmp	r0, #0
10001f12:	d0cf      	beq.n	10001eb4 <ph_remove_any_head+0x50>
10001f14:	0043      	lsls	r3, r0, #1
10001f16:	181b      	adds	r3, r3, r0
10001f18:	3b03      	subs	r3, #3
10001f1a:	18cb      	adds	r3, r1, r3
10001f1c:	2100      	movs	r1, #0
10001f1e:	7099      	strb	r1, [r3, #2]
10001f20:	e7c8      	b.n	10001eb4 <ph_remove_any_head+0x50>
    if (!reserve) {
10001f22:	9b01      	ldr	r3, [sp, #4]
10001f24:	2b00      	cmp	r3, #0
10001f26:	d1c5      	bne.n	10001eb4 <ph_remove_any_head+0x50>
10001f28:	e7b9      	b.n	10001e9e <ph_remove_any_head+0x3a>
10001f2a:	0050      	lsls	r0, r2, #1
10001f2c:	1880      	adds	r0, r0, r2
10001f2e:	3803      	subs	r0, #3
10001f30:	1809      	adds	r1, r1, r0
        new_node = ph_get_node(heap, b)->sibling;
10001f32:	7848      	ldrb	r0, [r1, #1]
10001f34:	4683      	mov	fp, r0
        ph_get_node(heap, a)->sibling = ph_get_node(heap, b)->sibling = 0;
10001f36:	4648      	mov	r0, r9
10001f38:	7048      	strb	r0, [r1, #1]
10001f3a:	7058      	strb	r0, [r3, #1]
        return ph_merge_nodes(heap, ph_merge_nodes(heap, a, b), ph_merge_two_pass(heap, new_node));
10001f3c:	4641      	mov	r1, r8
10001f3e:	0020      	movs	r0, r4
10001f40:	f7ff fee2 	bl	10001d08 <ph_merge_nodes>
10001f44:	4659      	mov	r1, fp
10001f46:	4680      	mov	r8, r0
10001f48:	0020      	movs	r0, r4
10001f4a:	f7ff ff43 	bl	10001dd4 <ph_merge_two_pass>
10001f4e:	4641      	mov	r1, r8
10001f50:	0002      	movs	r2, r0
10001f52:	0020      	movs	r0, r4
10001f54:	f7ff fed8 	bl	10001d08 <ph_merge_nodes>
10001f58:	4680      	mov	r8, r0
10001f5a:	e7cf      	b.n	10001efc <ph_remove_any_head+0x98>

10001f5c <ph_remove_head_reserve>:

pheap_node_id_t ph_remove_head_reserve(pheap_t *heap, bool reserve) {
10001f5c:	b5f0      	push	{r4, r5, r6, r7, lr}
10001f5e:	4657      	mov	r7, sl
10001f60:	4645      	mov	r5, r8
10001f62:	46de      	mov	lr, fp
10001f64:	464e      	mov	r6, r9
10001f66:	b5e0      	push	{r5, r6, r7, lr}
10001f68:	b083      	sub	sp, #12
10001f6a:	9101      	str	r1, [sp, #4]
    heap->root_id = ph_merge_nodes(heap, heap->root_id, id);
    return heap->root_id;
}

static inline pheap_node_id_t ph_peek_head(pheap_t *heap) {
    return heap->root_id;
10001f6c:	7b45      	ldrb	r5, [r0, #13]
10001f6e:	0004      	movs	r4, r0
    return heap->nodes + id - 1;
10001f70:	006b      	lsls	r3, r5, #1
10001f72:	6800      	ldr	r0, [r0, #0]
10001f74:	195b      	adds	r3, r3, r5
10001f76:	1edf      	subs	r7, r3, #3
    pheap_node_id_t new_root_id = ph_merge_two_pass(heap, ph_get_node(heap, root_id)->child);
10001f78:	5dc1      	ldrb	r1, [r0, r7]
10001f7a:	19c2      	adds	r2, r0, r7
    if (!id || !ph_get_node(heap, id)->sibling) {
10001f7c:	2900      	cmp	r1, #0
10001f7e:	d04e      	beq.n	1000201e <ph_remove_head_reserve+0xc2>
10001f80:	004b      	lsls	r3, r1, #1
10001f82:	185b      	adds	r3, r3, r1
10001f84:	3b03      	subs	r3, #3
10001f86:	18c3      	adds	r3, r0, r3
10001f88:	785e      	ldrb	r6, [r3, #1]
10001f8a:	46b4      	mov	ip, r6
10001f8c:	2e00      	cmp	r6, #0
10001f8e:	d118      	bne.n	10001fc2 <ph_remove_head_reserve+0x66>
    if (!reserve) {
10001f90:	9e01      	ldr	r6, [sp, #4]
10001f92:	2e00      	cmp	r6, #0
10001f94:	d140      	bne.n	10002018 <ph_remove_head_reserve+0xbc>
        if (heap->free_tail_id) {
10001f96:	7be6      	ldrb	r6, [r4, #15]
10001f98:	2e00      	cmp	r6, #0
10001f9a:	d004      	beq.n	10001fa6 <ph_remove_head_reserve+0x4a>
            ph_get_node(heap, heap->free_tail_id)->sibling = root_id;
10001f9c:	0073      	lsls	r3, r6, #1
10001f9e:	199b      	adds	r3, r3, r6
10001fa0:	18c3      	adds	r3, r0, r3
10001fa2:	3b03      	subs	r3, #3
10001fa4:	705d      	strb	r5, [r3, #1]
        heap->free_tail_id = root_id;
10001fa6:	73e5      	strb	r5, [r4, #15]
    if (new_root_id) ph_get_node(heap, new_root_id)->parent = 0;
10001fa8:	2900      	cmp	r1, #0
10001faa:	d131      	bne.n	10002010 <ph_remove_head_reserve+0xb4>
    ph_get_node(heap, root_id)->sibling = 0;
10001fac:	2300      	movs	r3, #0
    pheap_node_id_t old_root_id = ph_peek_head(heap);
    heap->root_id = ph_remove_any_head(heap, old_root_id, reserve);
    return old_root_id;
}
10001fae:	0028      	movs	r0, r5
    ph_get_node(heap, root_id)->sibling = 0;
10001fb0:	7053      	strb	r3, [r2, #1]
    heap->root_id = ph_remove_any_head(heap, old_root_id, reserve);
10001fb2:	7361      	strb	r1, [r4, #13]
}
10001fb4:	b003      	add	sp, #12
10001fb6:	bcf0      	pop	{r4, r5, r6, r7}
10001fb8:	46bb      	mov	fp, r7
10001fba:	46b2      	mov	sl, r6
10001fbc:	46a9      	mov	r9, r5
10001fbe:	46a0      	mov	r8, r4
10001fc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
10001fc2:	0072      	lsls	r2, r6, #1
10001fc4:	4462      	add	r2, ip
10001fc6:	3a03      	subs	r2, #3
10001fc8:	1880      	adds	r0, r0, r2
        new_node = ph_get_node(heap, b)->sibling;
10001fca:	7842      	ldrb	r2, [r0, #1]
10001fcc:	4690      	mov	r8, r2
        ph_get_node(heap, a)->sibling = ph_get_node(heap, b)->sibling = 0;
10001fce:	2200      	movs	r2, #0
10001fd0:	7042      	strb	r2, [r0, #1]
10001fd2:	4691      	mov	r9, r2
10001fd4:	705a      	strb	r2, [r3, #1]
        return ph_merge_nodes(heap, ph_merge_nodes(heap, a, b), ph_merge_two_pass(heap, new_node));
10001fd6:	0020      	movs	r0, r4
10001fd8:	0032      	movs	r2, r6
10001fda:	f7ff fe95 	bl	10001d08 <ph_merge_nodes>
    if (!id || !ph_get_node(heap, id)->sibling) {
10001fde:	4643      	mov	r3, r8
        return ph_merge_nodes(heap, ph_merge_nodes(heap, a, b), ph_merge_two_pass(heap, new_node));
10001fe0:	4682      	mov	sl, r0
    if (!id || !ph_get_node(heap, id)->sibling) {
10001fe2:	2b00      	cmp	r3, #0
10001fe4:	d007      	beq.n	10001ff6 <ph_remove_head_reserve+0x9a>
10001fe6:	005b      	lsls	r3, r3, #1
10001fe8:	6821      	ldr	r1, [r4, #0]
10001fea:	4443      	add	r3, r8
10001fec:	3b03      	subs	r3, #3
10001fee:	18cb      	adds	r3, r1, r3
10001ff0:	785a      	ldrb	r2, [r3, #1]
10001ff2:	2a00      	cmp	r2, #0
10001ff4:	d117      	bne.n	10002026 <ph_remove_head_reserve+0xca>
        return ph_merge_nodes(heap, ph_merge_nodes(heap, a, b), ph_merge_two_pass(heap, new_node));
10001ff6:	4642      	mov	r2, r8
10001ff8:	4651      	mov	r1, sl
10001ffa:	0020      	movs	r0, r4
10001ffc:	f7ff fe84 	bl	10001d08 <ph_merge_nodes>
    if (!reserve) {
10002000:	9b01      	ldr	r3, [sp, #4]
        return ph_merge_nodes(heap, ph_merge_nodes(heap, a, b), ph_merge_two_pass(heap, new_node));
10002002:	0001      	movs	r1, r0
10002004:	6820      	ldr	r0, [r4, #0]
10002006:	19c2      	adds	r2, r0, r7
    if (!reserve) {
10002008:	2b00      	cmp	r3, #0
1000200a:	d0c4      	beq.n	10001f96 <ph_remove_head_reserve+0x3a>
    if (new_root_id) ph_get_node(heap, new_root_id)->parent = 0;
1000200c:	2900      	cmp	r1, #0
1000200e:	d0cd      	beq.n	10001fac <ph_remove_head_reserve+0x50>
10002010:	004b      	lsls	r3, r1, #1
10002012:	185b      	adds	r3, r3, r1
10002014:	3b03      	subs	r3, #3
10002016:	18c3      	adds	r3, r0, r3
10002018:	2000      	movs	r0, #0
1000201a:	7098      	strb	r0, [r3, #2]
1000201c:	e7c6      	b.n	10001fac <ph_remove_head_reserve+0x50>
    if (!reserve) {
1000201e:	9b01      	ldr	r3, [sp, #4]
10002020:	2b00      	cmp	r3, #0
10002022:	d1c3      	bne.n	10001fac <ph_remove_head_reserve+0x50>
10002024:	e7b7      	b.n	10001f96 <ph_remove_head_reserve+0x3a>
10002026:	0050      	lsls	r0, r2, #1
10002028:	1880      	adds	r0, r0, r2
1000202a:	3803      	subs	r0, #3
1000202c:	1809      	adds	r1, r1, r0
        new_node = ph_get_node(heap, b)->sibling;
1000202e:	7848      	ldrb	r0, [r1, #1]
10002030:	4683      	mov	fp, r0
        ph_get_node(heap, a)->sibling = ph_get_node(heap, b)->sibling = 0;
10002032:	4648      	mov	r0, r9
10002034:	7048      	strb	r0, [r1, #1]
10002036:	7058      	strb	r0, [r3, #1]
        return ph_merge_nodes(heap, ph_merge_nodes(heap, a, b), ph_merge_two_pass(heap, new_node));
10002038:	4641      	mov	r1, r8
1000203a:	0020      	movs	r0, r4
1000203c:	f7ff fe64 	bl	10001d08 <ph_merge_nodes>
10002040:	4659      	mov	r1, fp
10002042:	4680      	mov	r8, r0
10002044:	0020      	movs	r0, r4
10002046:	f7ff fec5 	bl	10001dd4 <ph_merge_two_pass>
1000204a:	4641      	mov	r1, r8
1000204c:	0002      	movs	r2, r0
1000204e:	0020      	movs	r0, r4
10002050:	f7ff fe5a 	bl	10001d08 <ph_merge_nodes>
10002054:	4680      	mov	r8, r0
10002056:	e7ce      	b.n	10001ff6 <ph_remove_head_reserve+0x9a>

10002058 <ph_delete>:

#include <stdio.h>
bool ph_delete(pheap_t *heap, pheap_node_id_t id) {
10002058:	b570      	push	{r4, r5, r6, lr}
1000205a:	0004      	movs	r4, r0
    // 1) trivial cases
    if (!id) return false;
1000205c:	2900      	cmp	r1, #0
1000205e:	d02c      	beq.n	100020ba <ph_delete+0x62>
    if (id == heap->root_id) {
10002060:	7b43      	ldrb	r3, [r0, #13]
10002062:	428b      	cmp	r3, r1
10002064:	d02e      	beq.n	100020c4 <ph_delete+0x6c>
10002066:	6805      	ldr	r5, [r0, #0]
10002068:	0048      	lsls	r0, r1, #1
1000206a:	1840      	adds	r0, r0, r1
1000206c:	3803      	subs	r0, #3
1000206e:	1828      	adds	r0, r5, r0
        ph_remove_head(heap);
        return true;
    }
    // 2) unlink the node from the tree
    pheap_node_t *node = ph_get_node(heap, id);
    if (!node->parent) return false; // not in tree
10002070:	7882      	ldrb	r2, [r0, #2]
10002072:	2a00      	cmp	r2, #0
10002074:	d021      	beq.n	100020ba <ph_delete+0x62>
10002076:	0053      	lsls	r3, r2, #1
10002078:	189b      	adds	r3, r3, r2
1000207a:	3b03      	subs	r3, #3
    pheap_node_t *parent = ph_get_node(heap, node->parent);
    if (parent->child == id) {
1000207c:	5cea      	ldrb	r2, [r5, r3]
1000207e:	18ee      	adds	r6, r5, r3
10002080:	428a      	cmp	r2, r1
10002082:	d102      	bne.n	1000208a <ph_delete+0x32>
10002084:	e01b      	b.n	100020be <ph_delete+0x66>
                prev_sibling->sibling = node->sibling;
                found = true;
                break;
            }
            prev_sibling_id = prev_sibling->sibling;
        } while (prev_sibling_id);
10002086:	2a00      	cmp	r2, #0
10002088:	d008      	beq.n	1000209c <ph_delete+0x44>
1000208a:	0053      	lsls	r3, r2, #1
1000208c:	189b      	adds	r3, r3, r2
1000208e:	3b03      	subs	r3, #3
10002090:	18eb      	adds	r3, r5, r3
            if (prev_sibling->sibling == id) {
10002092:	785a      	ldrb	r2, [r3, #1]
10002094:	428a      	cmp	r2, r1
10002096:	d1f6      	bne.n	10002086 <ph_delete+0x2e>
                prev_sibling->sibling = node->sibling;
10002098:	7842      	ldrb	r2, [r0, #1]
1000209a:	705a      	strb	r2, [r3, #1]
        assert(found);
    }
    node->sibling = node->parent = 0;
1000209c:	2300      	movs	r3, #0
//    ph_dump(heap, NULL, NULL);
    // 3) remove it from the head of its own subtree
    pheap_node_id_t new_sub_tree = ph_remove_any_head(heap, id, false);
1000209e:	2200      	movs	r2, #0
    node->sibling = node->parent = 0;
100020a0:	7083      	strb	r3, [r0, #2]
100020a2:	7043      	strb	r3, [r0, #1]
    pheap_node_id_t new_sub_tree = ph_remove_any_head(heap, id, false);
100020a4:	0020      	movs	r0, r4
100020a6:	f7ff fedd 	bl	10001e64 <ph_remove_any_head>
    assert(new_sub_tree != heap->root_id);
    heap->root_id = ph_merge_nodes(heap, heap->root_id, new_sub_tree);
100020aa:	7b61      	ldrb	r1, [r4, #13]
    pheap_node_id_t new_sub_tree = ph_remove_any_head(heap, id, false);
100020ac:	0002      	movs	r2, r0
    heap->root_id = ph_merge_nodes(heap, heap->root_id, new_sub_tree);
100020ae:	0020      	movs	r0, r4
100020b0:	f7ff fe2a 	bl	10001d08 <ph_merge_nodes>
100020b4:	7360      	strb	r0, [r4, #13]
    return true;
100020b6:	2001      	movs	r0, #1
100020b8:	e000      	b.n	100020bc <ph_delete+0x64>
    if (!id) return false;
100020ba:	2000      	movs	r0, #0
}
100020bc:	bd70      	pop	{r4, r5, r6, pc}
        parent->child = node->sibling;
100020be:	7843      	ldrb	r3, [r0, #1]
100020c0:	7033      	strb	r3, [r6, #0]
100020c2:	e7eb      	b.n	1000209c <ph_delete+0x44>
    heap->root_id = ph_remove_any_head(heap, old_root_id, reserve);
100020c4:	2200      	movs	r2, #0
100020c6:	0019      	movs	r1, r3
100020c8:	f7ff fecc 	bl	10001e64 <ph_remove_any_head>
100020cc:	7360      	strb	r0, [r4, #13]
        return true;
100020ce:	2001      	movs	r0, #1
100020d0:	e7f4      	b.n	100020bc <ph_delete+0x64>
100020d2:	46c0      	nop			; (mov r8, r8)

100020d4 <__wrap_malloc>:
        panic("Out of memory");
    }
#endif
}

void *__wrap_malloc(size_t size) {
100020d4:	b510      	push	{r4, lr}
#if PICO_USE_MALLOC_MUTEX
    mutex_enter_blocking(&malloc_mutex);
#endif
    void *rc = __real_malloc(size);
100020d6:	f00d fcc9 	bl	1000fa6c <malloc>
        printf("malloc %d %p->%p\n", (uint) size, rc, ((uint8_t *) rc) + size);
    }
#endif
    check_alloc(rc, size);
    return rc;
}
100020da:	bd10      	pop	{r4, pc}

100020dc <__wrap_calloc>:

void *__wrap_calloc(size_t count, size_t size) {
100020dc:	b510      	push	{r4, lr}
#if PICO_USE_MALLOC_MUTEX
    mutex_enter_blocking(&malloc_mutex);
#endif
    void *rc = __real_calloc(count, size);
100020de:	f00d fc65 	bl	1000f9ac <calloc>
        printf("calloc %d %p->%p\n", (uint) (count * size), rc, ((uint8_t *) rc) + size);
    }
#endif
    check_alloc(rc, size);
    return rc;
}
100020e2:	bd10      	pop	{r4, pc}

100020e4 <pio_add_program>:
    uint32_t program_mask = (1u << program->length) - 1;
    _used_instruction_space[pio_get_index(pio)] |= program_mask << offset;
}

// these assert if unable
uint pio_add_program(PIO pio, const pio_program_t *program) {
100020e4:	b5f0      	push	{r4, r5, r6, r7, lr}
100020e6:	46d6      	mov	lr, sl
100020e8:	464f      	mov	r7, r9
100020ea:	4646      	mov	r6, r8
100020ec:	4688      	mov	r8, r1
100020ee:	b5c0      	push	{r6, r7, lr}
100020f0:	2405      	movs	r4, #5
100020f2:	0006      	movs	r6, r0
    uint32_t save = hw_claim_lock();
100020f4:	f7ff f84e 	bl	10001194 <hw_claim_lock>
100020f8:	4643      	mov	r3, r8
100020fa:	791f      	ldrb	r7, [r3, #4]
100020fc:	571c      	ldrsb	r4, [r3, r4]
 * \param pio The PIO instance; either \ref pio0 or \ref pio1
 * \return the PIO instance number (either 0 or 1)
 */
static inline uint pio_get_index(PIO pio) {
    assert(pio == pio0 || pio == pio1);
    return pio == pio1 ? 1 : 0;
100020fe:	4b28      	ldr	r3, [pc, #160]	; (100021a0 <pio_add_program+0xbc>)
10002100:	4681      	mov	r9, r0
10002102:	18f0      	adds	r0, r6, r3
10002104:	4243      	negs	r3, r0
10002106:	4158      	adcs	r0, r3
    uint32_t used_mask = _used_instruction_space[pio_get_index(pio)];
10002108:	4b26      	ldr	r3, [pc, #152]	; (100021a4 <pio_add_program+0xc0>)
1000210a:	469a      	mov	sl, r3
1000210c:	0083      	lsls	r3, r0, #2
1000210e:	469c      	mov	ip, r3
10002110:	4653      	mov	r3, sl
10002112:	4662      	mov	r2, ip
10002114:	5898      	ldr	r0, [r3, r2]
    uint32_t program_mask = (1u << program->length) - 1;
10002116:	2201      	movs	r2, #1
        if (program->origin > 32 - program->length) return -1;
10002118:	2320      	movs	r3, #32
    uint32_t program_mask = (1u << program->length) - 1;
1000211a:	40ba      	lsls	r2, r7
        if (program->origin > 32 - program->length) return -1;
1000211c:	1bdb      	subs	r3, r3, r7
    uint32_t program_mask = (1u << program->length) - 1;
1000211e:	3a01      	subs	r2, #1
    if (program->origin >= 0) {
10002120:	2c00      	cmp	r4, #0
10002122:	db32      	blt.n	1000218a <pio_add_program+0xa6>
        if (program->origin > 32 - program->length) return -1;
10002124:	429c      	cmp	r4, r3
10002126:	dc2d      	bgt.n	10002184 <pio_add_program+0xa0>
        return used_mask & (program_mask << program->origin) ? -1 : program->origin;
10002128:	40a2      	lsls	r2, r4
1000212a:	0015      	movs	r5, r2
1000212c:	4210      	tst	r0, r2
1000212e:	d129      	bne.n	10002184 <pio_add_program+0xa0>
    for (uint i = 0; i < program->length; ++i) {
10002130:	2f00      	cmp	r7, #0
10002132:	d01a      	beq.n	1000216a <pio_add_program+0x86>
        uint16_t instr = program->instructions[i];
10002134:	4643      	mov	r3, r8
10002136:	785a      	ldrb	r2, [r3, #1]
10002138:	7819      	ldrb	r1, [r3, #0]
1000213a:	0212      	lsls	r2, r2, #8
1000213c:	4311      	orrs	r1, r2
1000213e:	4642      	mov	r2, r8
10002140:	789b      	ldrb	r3, [r3, #2]
10002142:	78d2      	ldrb	r2, [r2, #3]
10002144:	041b      	lsls	r3, r3, #16
10002146:	430b      	orrs	r3, r1
10002148:	0612      	lsls	r2, r2, #24
1000214a:	431a      	orrs	r2, r3
1000214c:	4690      	mov	r8, r2
    for (uint i = 0; i < program->length; ++i) {
1000214e:	2200      	movs	r2, #0
        uint16_t instr = program->instructions[i];
10002150:	4641      	mov	r1, r8
10002152:	0053      	lsls	r3, r2, #1
10002154:	5ac9      	ldrh	r1, [r1, r3]
        pio->instr_mem[offset + i] = pio_instr_bits_jmp != _pio_major_instr_bits(instr) ? instr : instr + offset;
10002156:	0b4b      	lsrs	r3, r1, #13
10002158:	d100      	bne.n	1000215c <pio_add_program+0x78>
1000215a:	1909      	adds	r1, r1, r4
1000215c:	1913      	adds	r3, r2, r4
1000215e:	3312      	adds	r3, #18
10002160:	009b      	lsls	r3, r3, #2
    for (uint i = 0; i < program->length; ++i) {
10002162:	3201      	adds	r2, #1
        pio->instr_mem[offset + i] = pio_instr_bits_jmp != _pio_major_instr_bits(instr) ? instr : instr + offset;
10002164:	5199      	str	r1, [r3, r6]
    for (uint i = 0; i < program->length; ++i) {
10002166:	4297      	cmp	r7, r2
10002168:	d8f2      	bhi.n	10002150 <pio_add_program+0x6c>
    _used_instruction_space[pio_get_index(pio)] |= program_mask << offset;
1000216a:	4653      	mov	r3, sl
1000216c:	4662      	mov	r2, ip
1000216e:	4305      	orrs	r5, r0
10002170:	509d      	str	r5, [r3, r2]
    int offset = _pio_find_offset_for_program(pio, program);
    if (offset < 0) {
        panic("No program space");
    }
    _pio_add_program_at_offset(pio, program, offset);
    hw_claim_unlock(save);
10002172:	4648      	mov	r0, r9
10002174:	f7ff f81a 	bl	100011ac <hw_claim_unlock>
    return offset;
}
10002178:	0020      	movs	r0, r4
1000217a:	bce0      	pop	{r5, r6, r7}
1000217c:	46ba      	mov	sl, r7
1000217e:	46b1      	mov	r9, r6
10002180:	46a8      	mov	r8, r5
10002182:	bdf0      	pop	{r4, r5, r6, r7, pc}
        panic("No program space");
10002184:	4808      	ldr	r0, [pc, #32]	; (100021a8 <pio_add_program+0xc4>)
10002186:	f001 fc4b 	bl	10003a20 <panic>
        for (int i = 32 - program->length; i >= 0; i--) {
1000218a:	2b00      	cmp	r3, #0
1000218c:	da02      	bge.n	10002194 <pio_add_program+0xb0>
1000218e:	e7f9      	b.n	10002184 <pio_add_program+0xa0>
10002190:	3b01      	subs	r3, #1
10002192:	d3f7      	bcc.n	10002184 <pio_add_program+0xa0>
            if (!(used_mask & (program_mask << (uint) i))) {
10002194:	0015      	movs	r5, r2
10002196:	409d      	lsls	r5, r3
10002198:	001c      	movs	r4, r3
1000219a:	4205      	tst	r5, r0
1000219c:	d1f8      	bne.n	10002190 <pio_add_program+0xac>
1000219e:	e7c7      	b.n	10002130 <pio_add_program+0x4c>
100021a0:	afd00000 	.word	0xafd00000
100021a4:	20011f28 	.word	0x20011f28
100021a8:	100103f8 	.word	0x100103f8

100021ac <pio_clear_instruction_memory>:
    assert(program_mask == (_used_instruction_space[pio_get_index(pio)] & program_mask));
    _used_instruction_space[pio_get_index(pio)] &= ~program_mask;
    hw_claim_unlock(save);
}

void pio_clear_instruction_memory(PIO pio) {
100021ac:	b510      	push	{r4, lr}
100021ae:	0004      	movs	r4, r0
    uint32_t save = hw_claim_lock();
100021b0:	f7fe fff0 	bl	10001194 <hw_claim_lock>
100021b4:	4b09      	ldr	r3, [pc, #36]	; (100021dc <pio_clear_instruction_memory+0x30>)
    _used_instruction_space[pio_get_index(pio)] = 0;
100021b6:	2100      	movs	r1, #0
100021b8:	18e3      	adds	r3, r4, r3
100021ba:	425a      	negs	r2, r3
100021bc:	4153      	adcs	r3, r2
100021be:	4a08      	ldr	r2, [pc, #32]	; (100021e0 <pio_clear_instruction_memory+0x34>)
100021c0:	009b      	lsls	r3, r3, #2
100021c2:	5099      	str	r1, [r3, r2]
    for(uint i=0;i<PIO_INSTRUCTION_COUNT;i++) {
100021c4:	2300      	movs	r3, #0
        pio->instr_mem[i] = pio_encode_jmp(i);
100021c6:	001a      	movs	r2, r3
100021c8:	3212      	adds	r2, #18
100021ca:	0092      	lsls	r2, r2, #2
100021cc:	5113      	str	r3, [r2, r4]
    for(uint i=0;i<PIO_INSTRUCTION_COUNT;i++) {
100021ce:	3301      	adds	r3, #1
100021d0:	2b20      	cmp	r3, #32
100021d2:	d1f8      	bne.n	100021c6 <pio_clear_instruction_memory+0x1a>
    }
    hw_claim_unlock(save);
100021d4:	f7fe ffea 	bl	100011ac <hw_claim_unlock>
}
100021d8:	bd10      	pop	{r4, pc}
100021da:	46c0      	nop			; (mov r8, r8)
100021dc:	afd00000 	.word	0xafd00000
100021e0:	20011f28 	.word	0x20011f28

100021e4 <pio_sm_set_consecutive_pindirs>:
        pin_mask &= pin_mask - 1;
    }
    pio->sm[sm].pinctrl = pinctrl_saved;
}

void pio_sm_set_consecutive_pindirs(PIO pio, uint sm, uint pin, uint count, bool is_out) {
100021e4:	b5f0      	push	{r4, r5, r6, r7, lr}
100021e6:	464e      	mov	r6, r9
100021e8:	4645      	mov	r5, r8
100021ea:	46de      	mov	lr, fp
100021ec:	4657      	mov	r7, sl
100021ee:	468a      	mov	sl, r1
    assert(pin < 32u);
    uint32_t pinctrl_saved = pio->sm[sm].pinctrl;
100021f0:	0049      	lsls	r1, r1, #1
void pio_sm_set_consecutive_pindirs(PIO pio, uint sm, uint pin, uint count, bool is_out) {
100021f2:	b5e0      	push	{r5, r6, r7, lr}
    uint32_t pinctrl_saved = pio->sm[sm].pinctrl;
100021f4:	000d      	movs	r5, r1
void pio_sm_set_consecutive_pindirs(PIO pio, uint sm, uint pin, uint count, bool is_out) {
100021f6:	4680      	mov	r8, r0
    uint32_t pinctrl_saved = pio->sm[sm].pinctrl;
100021f8:	4455      	add	r5, sl
100021fa:	00ed      	lsls	r5, r5, #3
100021fc:	4445      	add	r5, r8
100021fe:	4689      	mov	r9, r1
10002200:	0029      	movs	r1, r5
void pio_sm_set_consecutive_pindirs(PIO pio, uint sm, uint pin, uint count, bool is_out) {
10002202:	ac09      	add	r4, sp, #36	; 0x24
10002204:	7826      	ldrb	r6, [r4, #0]
    uint32_t pinctrl_saved = pio->sm[sm].pinctrl;
10002206:	31dc      	adds	r1, #220	; 0xdc
    uint pindir_val = is_out ? 0x1f : 0;
10002208:	1e74      	subs	r4, r6, #1
1000220a:	41a6      	sbcs	r6, r4
    uint32_t pinctrl_saved = pio->sm[sm].pinctrl;
1000220c:	6808      	ldr	r0, [r1, #0]
    uint pindir_val = is_out ? 0x1f : 0;
1000220e:	4274      	negs	r4, r6
    uint32_t pinctrl_saved = pio->sm[sm].pinctrl;
10002210:	4684      	mov	ip, r0
    uint pindir_val = is_out ? 0x1f : 0;
10002212:	4814      	ldr	r0, [pc, #80]	; (10002264 <pio_sm_set_consecutive_pindirs+0x80>)
10002214:	261f      	movs	r6, #31
10002216:	4683      	mov	fp, r0
10002218:	4026      	ands	r6, r4
1000221a:	445e      	add	r6, fp
    while (count > 5) {
1000221c:	2b05      	cmp	r3, #5
1000221e:	d90c      	bls.n	1000223a <pio_sm_set_consecutive_pindirs+0x56>
        pio->sm[sm].pinctrl = (5u << PIO_SM0_PINCTRL_SET_COUNT_LSB) | (pin << PIO_SM0_PINCTRL_SET_BASE_LSB);
10002220:	20a0      	movs	r0, #160	; 0xa0
        pio_sm_exec(pio, sm, pio_encode_set(pio_pindirs, pindir_val));
        count -= 5;
        pin = (pin + 5) & 0x1f;
10002222:	271f      	movs	r7, #31
        pio->sm[sm].pinctrl = (5u << PIO_SM0_PINCTRL_SET_COUNT_LSB) | (pin << PIO_SM0_PINCTRL_SET_BASE_LSB);
10002224:	0540      	lsls	r0, r0, #21
 * \param sm State machine index (0..3)
 * \param instr the encoded PIO instruction
 */
inline static void pio_sm_exec(PIO pio, uint sm, uint instr) {
    check_sm_param(sm);
    pio->sm[sm].instr = instr;
10002226:	35d8      	adds	r5, #216	; 0xd8
10002228:	0154      	lsls	r4, r2, #5
1000222a:	4304      	orrs	r4, r0
        pin = (pin + 5) & 0x1f;
1000222c:	3205      	adds	r2, #5
        count -= 5;
1000222e:	3b05      	subs	r3, #5
        pio->sm[sm].pinctrl = (5u << PIO_SM0_PINCTRL_SET_COUNT_LSB) | (pin << PIO_SM0_PINCTRL_SET_BASE_LSB);
10002230:	600c      	str	r4, [r1, #0]
        pin = (pin + 5) & 0x1f;
10002232:	403a      	ands	r2, r7
10002234:	602e      	str	r6, [r5, #0]
    while (count > 5) {
10002236:	2b05      	cmp	r3, #5
10002238:	d8f6      	bhi.n	10002228 <pio_sm_set_consecutive_pindirs+0x44>
    }
    pio->sm[sm].pinctrl = (count << PIO_SM0_PINCTRL_SET_COUNT_LSB) | (pin << PIO_SM0_PINCTRL_SET_BASE_LSB);
1000223a:	4649      	mov	r1, r9
1000223c:	4451      	add	r1, sl
1000223e:	00c9      	lsls	r1, r1, #3
10002240:	4441      	add	r1, r8
10002242:	0152      	lsls	r2, r2, #5
10002244:	069b      	lsls	r3, r3, #26
10002246:	4313      	orrs	r3, r2
10002248:	000a      	movs	r2, r1
1000224a:	0008      	movs	r0, r1
1000224c:	32dc      	adds	r2, #220	; 0xdc
1000224e:	6013      	str	r3, [r2, #0]
    pio_sm_exec(pio, sm, pio_encode_set(pio_pindirs, pindir_val));
    pio->sm[sm].pinctrl = pinctrl_saved;
10002250:	4663      	mov	r3, ip
10002252:	30d8      	adds	r0, #216	; 0xd8
10002254:	6006      	str	r6, [r0, #0]
10002256:	6013      	str	r3, [r2, #0]
}
10002258:	bcf0      	pop	{r4, r5, r6, r7}
1000225a:	46bb      	mov	fp, r7
1000225c:	46b2      	mov	sl, r6
1000225e:	46a9      	mov	r9, r5
10002260:	46a0      	mov	r8, r4
10002262:	bdf0      	pop	{r4, r5, r6, r7, pc}
10002264:	0000e080 	.word	0x0000e080

10002268 <pio_sm_init>:

void pio_sm_init(PIO pio, uint sm, uint initial_pc, const pio_sm_config *config) {
10002268:	b5f0      	push	{r4, r5, r6, r7, lr}
    pio->ctrl = (pio->ctrl & ~(1u << sm)) | (!!enabled << sm);
1000226a:	2501      	movs	r5, #1
1000226c:	408d      	lsls	r5, r1
1000226e:	6804      	ldr	r4, [r0, #0]
10002270:	43ac      	bics	r4, r5
    pio->sm[sm].clkdiv = config->clkdiv;
10002272:	004d      	lsls	r5, r1, #1
    pio->ctrl = (pio->ctrl & ~(1u << sm)) | (!!enabled << sm);
10002274:	6004      	str	r4, [r0, #0]
    pio->sm[sm].clkdiv = config->clkdiv;
10002276:	186c      	adds	r4, r5, r1
10002278:	00e4      	lsls	r4, r4, #3
1000227a:	1904      	adds	r4, r0, r4
1000227c:	0026      	movs	r6, r4
1000227e:	36c8      	adds	r6, #200	; 0xc8
    // Halt the machine, set some sensible defaults
    pio_sm_set_enabled(pio, sm, false);

    if (config) {
10002280:	2b00      	cmp	r3, #0
10002282:	d02a      	beq.n	100022da <pio_sm_init+0x72>
10002284:	681f      	ldr	r7, [r3, #0]
    pio->sm[sm].pinctrl = config->pinctrl;
10002286:	34dc      	adds	r4, #220	; 0xdc
    pio->sm[sm].clkdiv = config->clkdiv;
10002288:	6037      	str	r7, [r6, #0]
    pio->sm[sm].execctrl = config->execctrl;
1000228a:	685f      	ldr	r7, [r3, #4]
1000228c:	6077      	str	r7, [r6, #4]
    pio->sm[sm].shiftctrl = config->shiftctrl;
1000228e:	689f      	ldr	r7, [r3, #8]
    pio->sm[sm].pinctrl = config->pinctrl;
10002290:	68db      	ldr	r3, [r3, #12]
    pio->sm[sm].shiftctrl = config->shiftctrl;
10002292:	60b7      	str	r7, [r6, #8]
    pio->sm[sm].pinctrl = config->pinctrl;
10002294:	6023      	str	r3, [r4, #0]
 * \param sm State machine index (0..3)
 */
static inline void pio_sm_clear_fifos(PIO pio, uint sm) {
    // changing the FIFO join state clears the fifo
    check_sm_param(sm);
    hw_xor_bits(&pio->sm[sm].shiftctrl, PIO_SM0_SHIFTCTRL_FJOIN_RX_BITS);
10002296:	186d      	adds	r5, r5, r1
10002298:	00eb      	lsls	r3, r5, #3
1000229a:	001d      	movs	r5, r3
1000229c:	2480      	movs	r4, #128	; 0x80
1000229e:	35d0      	adds	r5, #208	; 0xd0
100022a0:	1945      	adds	r5, r0, r5
100022a2:	0164      	lsls	r4, r4, #5
100022a4:	432c      	orrs	r4, r5
100022a6:	2580      	movs	r5, #128	; 0x80
100022a8:	062d      	lsls	r5, r5, #24
100022aa:	6025      	str	r5, [r4, #0]
100022ac:	6025      	str	r5, [r4, #0]
    const uint32_t fdebug_sm_mask =
            (1u << PIO_FDEBUG_TXOVER_LSB) |
            (1u << PIO_FDEBUG_RXUNDER_LSB) |
            (1u << PIO_FDEBUG_TXSTALL_LSB) |
            (1u << PIO_FDEBUG_RXSTALL_LSB);
    pio->fdebug = fdebug_sm_mask << sm;
100022ae:	4c11      	ldr	r4, [pc, #68]	; (100022f4 <pio_sm_init+0x8c>)
    pio->ctrl |= 1u << (PIO_CTRL_SM_RESTART_LSB + sm);
100022b0:	1d0d      	adds	r5, r1, #4
100022b2:	408c      	lsls	r4, r1
100022b4:	6084      	str	r4, [r0, #8]
100022b6:	2401      	movs	r4, #1
100022b8:	0027      	movs	r7, r4
100022ba:	40af      	lsls	r7, r5
100022bc:	003d      	movs	r5, r7
    pio->ctrl |= 1u << (PIO_CTRL_CLKDIV_RESTART_LSB + sm);
100022be:	3108      	adds	r1, #8
100022c0:	408c      	lsls	r4, r1
        assert(arg2 && arg2 <= 32);
    } else {
        assert(arg2 <= 31);
    }
#endif
    return instr_bits | (arg1 << 5u) | (arg2 & 0x1fu);
100022c2:	211f      	movs	r1, #31
    pio->ctrl |= 1u << (PIO_CTRL_SM_RESTART_LSB + sm);
100022c4:	6806      	ldr	r6, [r0, #0]
100022c6:	400a      	ands	r2, r1
100022c8:	4335      	orrs	r5, r6
100022ca:	6005      	str	r5, [r0, #0]
    pio->ctrl |= 1u << (PIO_CTRL_CLKDIV_RESTART_LSB + sm);
100022cc:	6805      	ldr	r5, [r0, #0]
100022ce:	432c      	orrs	r4, r5
100022d0:	6004      	str	r4, [r0, #0]
    pio->sm[sm].instr = instr;
100022d2:	18c0      	adds	r0, r0, r3
100022d4:	30d8      	adds	r0, #216	; 0xd8
100022d6:	6002      	str	r2, [r0, #0]

    // Finally, clear some internal SM state
    pio_sm_restart(pio, sm);
    pio_sm_clkdiv_restart(pio, sm);
    pio_sm_exec(pio, sm, pio_encode_jmp(initial_pc));
}
100022d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    pio->sm[sm].clkdiv = config->clkdiv;
100022da:	2780      	movs	r7, #128	; 0x80
100022dc:	027f      	lsls	r7, r7, #9
100022de:	6037      	str	r7, [r6, #0]
    pio->sm[sm].execctrl = config->execctrl;
100022e0:	27f8      	movs	r7, #248	; 0xf8
100022e2:	027f      	lsls	r7, r7, #9
100022e4:	6077      	str	r7, [r6, #4]
    pio->sm[sm].shiftctrl = config->shiftctrl;
100022e6:	27c0      	movs	r7, #192	; 0xc0
    pio->sm[sm].pinctrl = config->pinctrl;
100022e8:	34dc      	adds	r4, #220	; 0xdc
    pio->sm[sm].shiftctrl = config->shiftctrl;
100022ea:	033f      	lsls	r7, r7, #12
100022ec:	60b7      	str	r7, [r6, #8]
    pio->sm[sm].pinctrl = config->pinctrl;
100022ee:	6023      	str	r3, [r4, #0]
100022f0:	e7d1      	b.n	10002296 <pio_sm_init+0x2e>
100022f2:	46c0      	nop			; (mov r8, r8)
100022f4:	01010101 	.word	0x01010101

100022f8 <running_on_fpga>:
#include "hardware/address_mapped.h"
#include "hardware/regs/tbman.h"
#include "hardware/regs/sysinfo.h"

bool running_on_fpga() {
    return !!((*(io_ro_32 *)TBMAN_BASE) & TBMAN_PLATFORM_FPGA_BITS);
100022f8:	4b02      	ldr	r3, [pc, #8]	; (10002304 <running_on_fpga+0xc>)
100022fa:	6818      	ldr	r0, [r3, #0]
100022fc:	0780      	lsls	r0, r0, #30
100022fe:	0fc0      	lsrs	r0, r0, #31
}
10002300:	4770      	bx	lr
10002302:	46c0      	nop			; (mov r8, r8)
10002304:	4006c000 	.word	0x4006c000

10002308 <pll_init>:
// For MHZ definitions etc
#include "hardware/clocks.h"
#include "hardware/pll.h"

/// \tag::pll_init_calculations[]
void pll_init(PLL pll, uint32_t refdiv, uint32_t vco_freq, uint32_t post_div1, uint8_t post_div2) {
10002308:	b5f0      	push	{r4, r5, r6, r7, lr}
1000230a:	46c6      	mov	lr, r8
1000230c:	b500      	push	{lr}
1000230e:	001e      	movs	r6, r3
10002310:	ab06      	add	r3, sp, #24
10002312:	781f      	ldrb	r7, [r3, #0]
    // Turn off PLL in case it is already running
    pll->pwr = 0xffffffff;
10002314:	2301      	movs	r3, #1
10002316:	425b      	negs	r3, r3
10002318:	6043      	str	r3, [r0, #4]
    pll->fbdiv_int = 0;
1000231a:	2300      	movs	r3, #0
void pll_init(PLL pll, uint32_t refdiv, uint32_t vco_freq, uint32_t post_div1, uint8_t post_div2) {
1000231c:	0004      	movs	r4, r0
    pll->fbdiv_int = 0;
1000231e:	6083      	str	r3, [r0, #8]

    uint32_t ref_mhz = XOSC_MHZ / refdiv;
    pll->cs = refdiv;
10002320:	6001      	str	r1, [r0, #0]
    uint32_t ref_mhz = XOSC_MHZ / refdiv;
10002322:	200c      	movs	r0, #12
void pll_init(PLL pll, uint32_t refdiv, uint32_t vco_freq, uint32_t post_div1, uint8_t post_div2) {
10002324:	4690      	mov	r8, r2
    uint32_t ref_mhz = XOSC_MHZ / refdiv;
10002326:	f7fe f825 	bl	10000374 <__wrap___aeabi_uidiv>

    // What are we multiplying the reference clock by to get the vco freq
    // (The regs are called div, because you divide the vco output and compare it to the refclk)
    uint32_t fbdiv = vco_freq / (ref_mhz * MHZ);
1000232a:	0141      	lsls	r1, r0, #5
1000232c:	1a09      	subs	r1, r1, r0
1000232e:	018d      	lsls	r5, r1, #6
10002330:	1a69      	subs	r1, r5, r1
10002332:	00c9      	lsls	r1, r1, #3
10002334:	1809      	adds	r1, r1, r0
10002336:	0189      	lsls	r1, r1, #6
10002338:	4640      	mov	r0, r8
1000233a:	f7fe f81b 	bl	10000374 <__wrap___aeabi_uidiv>
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
1000233e:	21c0      	movs	r1, #192	; 0xc0

    // Turn on PLL
    uint32_t power = PLL_PWR_PD_BITS | // Main power
                     PLL_PWR_VCOPD_BITS; // VCO Power

    hw_clear_bits(&pll->pwr, power);
10002340:	1d23      	adds	r3, r4, #4
10002342:	0189      	lsls	r1, r1, #6
10002344:	4319      	orrs	r1, r3
10002346:	2321      	movs	r3, #33	; 0x21
    pll->fbdiv_int = fbdiv;
10002348:	60a0      	str	r0, [r4, #8]
1000234a:	600b      	str	r3, [r1, #0]

    // Wait for PLL to lock
    while (!(pll->cs & PLL_CS_LOCK_BITS)) tight_loop_contents();
1000234c:	6822      	ldr	r2, [r4, #0]
1000234e:	2a00      	cmp	r2, #0
10002350:	dafc      	bge.n	1000234c <pll_init+0x44>
10002352:	2308      	movs	r3, #8

    // Set up post dividers - div1 feeds into div2 so if div1 is 5 and div2 is 2 then you get a divide by 10
    uint32_t pdiv = (post_div1 << PLL_PRIM_POSTDIV1_LSB) |
                    (post_div2 << PLL_PRIM_POSTDIV2_LSB);
10002354:	033f      	lsls	r7, r7, #12
    uint32_t pdiv = (post_div1 << PLL_PRIM_POSTDIV1_LSB) |
10002356:	0436      	lsls	r6, r6, #16
10002358:	433e      	orrs	r6, r7
    pll->prim = pdiv;
1000235a:	60e6      	str	r6, [r4, #12]
1000235c:	600b      	str	r3, [r1, #0]

    // Turn on post divider
    hw_clear_bits(&pll->pwr, PLL_PWR_POSTDIVPD_BITS);
/// \end::pll_init_finish[]
}
1000235e:	bc80      	pop	{r7}
10002360:	46b8      	mov	r8, r7
10002362:	bdf0      	pop	{r4, r5, r6, r7, pc}

10002364 <_out_null>:
static inline void _out_null(char character, void *buffer, size_t idx, size_t maxlen) {
    (void) character;
    (void) buffer;
    (void) idx;
    (void) maxlen;
}
10002364:	4770      	bx	lr
10002366:	46c0      	nop			; (mov r8, r8)

10002368 <_out_rev>:
}


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char *buffer, size_t idx, size_t maxlen, const char *buf, size_t len,
                       unsigned int width, unsigned int flags) {
10002368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000236a:	4657      	mov	r7, sl
1000236c:	464e      	mov	r6, r9
1000236e:	4645      	mov	r5, r8
10002370:	46de      	mov	lr, fp
10002372:	b5e0      	push	{r5, r6, r7, lr}
10002374:	4699      	mov	r9, r3
10002376:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10002378:	0007      	movs	r7, r0
1000237a:	469a      	mov	sl, r3
    const size_t start_idx = idx;

    // pad spaces up to given width
    if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
1000237c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
                       unsigned int width, unsigned int flags) {
1000237e:	4688      	mov	r8, r1
10002380:	4693      	mov	fp, r2
10002382:	0015      	movs	r5, r2
10002384:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
10002386:	079b      	lsls	r3, r3, #30
10002388:	d110      	bne.n	100023ac <_out_rev+0x44>
        for (size_t i = len; i < width; i++) {
1000238a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1000238c:	429e      	cmp	r6, r3
1000238e:	d20d      	bcs.n	100023ac <_out_rev+0x44>
10002390:	1b9d      	subs	r5, r3, r6
10002392:	0014      	movs	r4, r2
10002394:	000e      	movs	r6, r1
10002396:	445d      	add	r5, fp
            out(' ', buffer, idx++, maxlen);
10002398:	0022      	movs	r2, r4
1000239a:	464b      	mov	r3, r9
1000239c:	3401      	adds	r4, #1
1000239e:	0031      	movs	r1, r6
100023a0:	2020      	movs	r0, #32
100023a2:	47b8      	blx	r7
        for (size_t i = len; i < width; i++) {
100023a4:	42a5      	cmp	r5, r4
100023a6:	d1f7      	bne.n	10002398 <_out_rev+0x30>
100023a8:	46b0      	mov	r8, r6
100023aa:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
        }
    }

    // reverse string
    while (len) {
100023ac:	2e00      	cmp	r6, #0
100023ae:	d027      	beq.n	10002400 <_out_rev+0x98>
100023b0:	4644      	mov	r4, r8
100023b2:	1975      	adds	r5, r6, r5
        out(buf[--len], buffer, idx++, maxlen);
100023b4:	4653      	mov	r3, sl
100023b6:	1baa      	subs	r2, r5, r6
100023b8:	3e01      	subs	r6, #1
100023ba:	5d98      	ldrb	r0, [r3, r6]
100023bc:	0021      	movs	r1, r4
100023be:	464b      	mov	r3, r9
100023c0:	47b8      	blx	r7
    while (len) {
100023c2:	2e00      	cmp	r6, #0
100023c4:	d1f6      	bne.n	100023b4 <_out_rev+0x4c>
100023c6:	0023      	movs	r3, r4
100023c8:	002c      	movs	r4, r5
100023ca:	4698      	mov	r8, r3
    }

    // append pad spaces up to given width
    if (flags & FLAGS_LEFT) {
100023cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
100023ce:	079b      	lsls	r3, r3, #30
100023d0:	d50f      	bpl.n	100023f2 <_out_rev+0x8a>
        while (idx - start_idx < width) {
100023d2:	465b      	mov	r3, fp
100023d4:	1ae5      	subs	r5, r4, r3
100023d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
100023d8:	42ab      	cmp	r3, r5
100023da:	d90a      	bls.n	100023f2 <_out_rev+0x8a>
100023dc:	4646      	mov	r6, r8
100023de:	4698      	mov	r8, r3
            out(' ', buffer, idx++, maxlen);
100023e0:	0022      	movs	r2, r4
100023e2:	464b      	mov	r3, r9
100023e4:	0031      	movs	r1, r6
100023e6:	2020      	movs	r0, #32
        while (idx - start_idx < width) {
100023e8:	3501      	adds	r5, #1
            out(' ', buffer, idx++, maxlen);
100023ea:	47b8      	blx	r7
100023ec:	3401      	adds	r4, #1
        while (idx - start_idx < width) {
100023ee:	45a8      	cmp	r8, r5
100023f0:	d8f6      	bhi.n	100023e0 <_out_rev+0x78>
        }
    }

    return idx;
}
100023f2:	0020      	movs	r0, r4
100023f4:	bcf0      	pop	{r4, r5, r6, r7}
100023f6:	46bb      	mov	fp, r7
100023f8:	46b2      	mov	sl, r6
100023fa:	46a9      	mov	r9, r5
100023fc:	46a0      	mov	r8, r4
100023fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    while (len) {
10002400:	002c      	movs	r4, r5
10002402:	e7e3      	b.n	100023cc <_out_rev+0x64>

10002404 <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char *buffer, size_t idx, size_t maxlen, char *buf, size_t len,
                           bool negative, unsigned int base, unsigned int prec, unsigned int width,
                           unsigned int flags) {
10002404:	b5f0      	push	{r4, r5, r6, r7, lr}
10002406:	464f      	mov	r7, r9
10002408:	4646      	mov	r6, r8
1000240a:	46d6      	mov	lr, sl
1000240c:	b5c0      	push	{r6, r7, lr}
1000240e:	b084      	sub	sp, #16
10002410:	4698      	mov	r8, r3
10002412:	ab0e      	add	r3, sp, #56	; 0x38
10002414:	781b      	ldrb	r3, [r3, #0]
10002416:	9f12      	ldr	r7, [sp, #72]	; 0x48
10002418:	4699      	mov	r9, r3
1000241a:	4694      	mov	ip, r2
1000241c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
1000241e:	9b10      	ldr	r3, [sp, #64]	; 0x40
10002420:	9e11      	ldr	r6, [sp, #68]	; 0x44
    // pad leading zeros
    if (!(flags & FLAGS_LEFT)) {
10002422:	07ba      	lsls	r2, r7, #30
10002424:	d425      	bmi.n	10002472 <_ntoa_format+0x6e>
        if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
10002426:	2e00      	cmp	r6, #0
10002428:	d14b      	bne.n	100024c2 <_ntoa_format+0xbe>
            width--;
        }
        while ((len < prec) && (len < PICO_PRINTF_NTOA_BUFFER_SIZE)) {
1000242a:	429c      	cmp	r4, r3
1000242c:	d300      	bcc.n	10002430 <_ntoa_format+0x2c>
1000242e:	e0bf      	b.n	100025b0 <_ntoa_format+0x1ac>
        if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
10002430:	2201      	movs	r2, #1
10002432:	403a      	ands	r2, r7
10002434:	4692      	mov	sl, r2
        while ((len < prec) && (len < PICO_PRINTF_NTOA_BUFFER_SIZE)) {
10002436:	2c1f      	cmp	r4, #31
10002438:	d900      	bls.n	1000243c <_ntoa_format+0x38>
1000243a:	e0b8      	b.n	100025ae <_ntoa_format+0x1aa>
1000243c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1000243e:	1e55      	subs	r5, r2, #1
            buf[len++] = '0';
10002440:	2230      	movs	r2, #48	; 0x30
10002442:	e001      	b.n	10002448 <_ntoa_format+0x44>
        while ((len < prec) && (len < PICO_PRINTF_NTOA_BUFFER_SIZE)) {
10002444:	2c20      	cmp	r4, #32
10002446:	d003      	beq.n	10002450 <_ntoa_format+0x4c>
            buf[len++] = '0';
10002448:	3401      	adds	r4, #1
1000244a:	552a      	strb	r2, [r5, r4]
        while ((len < prec) && (len < PICO_PRINTF_NTOA_BUFFER_SIZE)) {
1000244c:	42a3      	cmp	r3, r4
1000244e:	d8f9      	bhi.n	10002444 <_ntoa_format+0x40>
        }
        while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PICO_PRINTF_NTOA_BUFFER_SIZE)) {
10002450:	4652      	mov	r2, sl
10002452:	2a00      	cmp	r2, #0
10002454:	d00d      	beq.n	10002472 <_ntoa_format+0x6e>
10002456:	42a6      	cmp	r6, r4
10002458:	d90b      	bls.n	10002472 <_ntoa_format+0x6e>
1000245a:	2c20      	cmp	r4, #32
1000245c:	d044      	beq.n	100024e8 <_ntoa_format+0xe4>
1000245e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
10002460:	1e55      	subs	r5, r2, #1
            buf[len++] = '0';
10002462:	2230      	movs	r2, #48	; 0x30
10002464:	e001      	b.n	1000246a <_ntoa_format+0x66>
        while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PICO_PRINTF_NTOA_BUFFER_SIZE)) {
10002466:	2c20      	cmp	r4, #32
10002468:	d03e      	beq.n	100024e8 <_ntoa_format+0xe4>
            buf[len++] = '0';
1000246a:	3401      	adds	r4, #1
1000246c:	552a      	strb	r2, [r5, r4]
        while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PICO_PRINTF_NTOA_BUFFER_SIZE)) {
1000246e:	42b4      	cmp	r4, r6
10002470:	d1f9      	bne.n	10002466 <_ntoa_format+0x62>
        }
    }

    // handle hash
    if (flags & FLAGS_HASH) {
10002472:	06fa      	lsls	r2, r7, #27
10002474:	d54d      	bpl.n	10002512 <_ntoa_format+0x10e>
        if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
10002476:	057a      	lsls	r2, r7, #21
10002478:	d43f      	bmi.n	100024fa <_ntoa_format+0xf6>
1000247a:	2c00      	cmp	r4, #0
1000247c:	d139      	bne.n	100024f2 <_ntoa_format+0xee>
            len--;
            if (len && (base == 16U)) {
                len--;
            }
        }
        if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PICO_PRINTF_NTOA_BUFFER_SIZE)) {
1000247e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
10002480:	2b10      	cmp	r3, #16
10002482:	d100      	bne.n	10002486 <_ntoa_format+0x82>
10002484:	e079      	b.n	1000257a <_ntoa_format+0x176>
            buf[len++] = 'x';
        } else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PICO_PRINTF_NTOA_BUFFER_SIZE)) {
            buf[len++] = 'X';
        } else if ((base == 2U) && (len < PICO_PRINTF_NTOA_BUFFER_SIZE)) {
10002486:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
10002488:	2b02      	cmp	r3, #2
1000248a:	d100      	bne.n	1000248e <_ntoa_format+0x8a>
1000248c:	e08a      	b.n	100025a4 <_ntoa_format+0x1a0>
            buf[len++] = 'b';
        }
        if (len < PICO_PRINTF_NTOA_BUFFER_SIZE) {
            buf[len++] = '0';
1000248e:	2330      	movs	r3, #48	; 0x30
10002490:	9a0c      	ldr	r2, [sp, #48]	; 0x30
10002492:	2401      	movs	r4, #1
10002494:	7013      	strb	r3, [r2, #0]
        }
    }

    if (len < PICO_PRINTF_NTOA_BUFFER_SIZE) {
        if (negative) {
10002496:	464b      	mov	r3, r9
10002498:	2b00      	cmp	r3, #0
1000249a:	d03f      	beq.n	1000251c <_ntoa_format+0x118>
            buf[len++] = '-';
1000249c:	232d      	movs	r3, #45	; 0x2d
1000249e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
100024a0:	5513      	strb	r3, [r2, r4]
100024a2:	3401      	adds	r4, #1
        } else if (flags & FLAGS_SPACE) {
            buf[len++] = ' ';
        }
    }

    return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
100024a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
100024a6:	4662      	mov	r2, ip
100024a8:	9300      	str	r3, [sp, #0]
100024aa:	9703      	str	r7, [sp, #12]
100024ac:	4643      	mov	r3, r8
100024ae:	9602      	str	r6, [sp, #8]
100024b0:	9401      	str	r4, [sp, #4]
100024b2:	f7ff ff59 	bl	10002368 <_out_rev>
}
100024b6:	b004      	add	sp, #16
100024b8:	bce0      	pop	{r5, r6, r7}
100024ba:	46ba      	mov	sl, r7
100024bc:	46b1      	mov	r9, r6
100024be:	46a8      	mov	r8, r5
100024c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
100024c2:	2201      	movs	r2, #1
100024c4:	0015      	movs	r5, r2
100024c6:	403d      	ands	r5, r7
100024c8:	46aa      	mov	sl, r5
100024ca:	423a      	tst	r2, r7
100024cc:	d02f      	beq.n	1000252e <_ntoa_format+0x12a>
100024ce:	464a      	mov	r2, r9
100024d0:	2a00      	cmp	r2, #0
100024d2:	d102      	bne.n	100024da <_ntoa_format+0xd6>
100024d4:	320c      	adds	r2, #12
100024d6:	423a      	tst	r2, r7
100024d8:	d000      	beq.n	100024dc <_ntoa_format+0xd8>
            width--;
100024da:	3e01      	subs	r6, #1
        while ((len < prec) && (len < PICO_PRINTF_NTOA_BUFFER_SIZE)) {
100024dc:	429c      	cmp	r4, r3
100024de:	d2ba      	bcs.n	10002456 <_ntoa_format+0x52>
100024e0:	2c1f      	cmp	r4, #31
100024e2:	d9ab      	bls.n	1000243c <_ntoa_format+0x38>
        while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PICO_PRINTF_NTOA_BUFFER_SIZE)) {
100024e4:	2e20      	cmp	r6, #32
100024e6:	d927      	bls.n	10002538 <_ntoa_format+0x134>
        if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
100024e8:	2420      	movs	r4, #32
    if (flags & FLAGS_HASH) {
100024ea:	06fa      	lsls	r2, r7, #27
100024ec:	d5da      	bpl.n	100024a4 <_ntoa_format+0xa0>
        if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
100024ee:	057a      	lsls	r2, r7, #21
100024f0:	d403      	bmi.n	100024fa <_ntoa_format+0xf6>
100024f2:	42a3      	cmp	r3, r4
100024f4:	d02d      	beq.n	10002552 <_ntoa_format+0x14e>
100024f6:	42a6      	cmp	r6, r4
100024f8:	d02b      	beq.n	10002552 <_ntoa_format+0x14e>
        if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PICO_PRINTF_NTOA_BUFFER_SIZE)) {
100024fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
100024fc:	2b10      	cmp	r3, #16
100024fe:	d032      	beq.n	10002566 <_ntoa_format+0x162>
        } else if ((base == 2U) && (len < PICO_PRINTF_NTOA_BUFFER_SIZE)) {
10002500:	2b02      	cmp	r3, #2
10002502:	d020      	beq.n	10002546 <_ntoa_format+0x142>
        if (len < PICO_PRINTF_NTOA_BUFFER_SIZE) {
10002504:	2c20      	cmp	r4, #32
10002506:	d0cd      	beq.n	100024a4 <_ntoa_format+0xa0>
            buf[len++] = '0';
10002508:	2230      	movs	r2, #48	; 0x30
1000250a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1000250c:	191b      	adds	r3, r3, r4
1000250e:	701a      	strb	r2, [r3, #0]
10002510:	3401      	adds	r4, #1
    if (len < PICO_PRINTF_NTOA_BUFFER_SIZE) {
10002512:	2c20      	cmp	r4, #32
10002514:	d0c6      	beq.n	100024a4 <_ntoa_format+0xa0>
        if (negative) {
10002516:	464b      	mov	r3, r9
10002518:	2b00      	cmp	r3, #0
1000251a:	d1bf      	bne.n	1000249c <_ntoa_format+0x98>
        } else if (flags & FLAGS_PLUS) {
1000251c:	077b      	lsls	r3, r7, #29
1000251e:	d40d      	bmi.n	1000253c <_ntoa_format+0x138>
        } else if (flags & FLAGS_SPACE) {
10002520:	073b      	lsls	r3, r7, #28
10002522:	d5bf      	bpl.n	100024a4 <_ntoa_format+0xa0>
            buf[len++] = ' ';
10002524:	2320      	movs	r3, #32
10002526:	9a0c      	ldr	r2, [sp, #48]	; 0x30
10002528:	5513      	strb	r3, [r2, r4]
1000252a:	3401      	adds	r4, #1
1000252c:	e7ba      	b.n	100024a4 <_ntoa_format+0xa0>
        while ((len < prec) && (len < PICO_PRINTF_NTOA_BUFFER_SIZE)) {
1000252e:	429c      	cmp	r4, r3
10002530:	d29f      	bcs.n	10002472 <_ntoa_format+0x6e>
10002532:	2c1f      	cmp	r4, #31
10002534:	d800      	bhi.n	10002538 <_ntoa_format+0x134>
10002536:	e781      	b.n	1000243c <_ntoa_format+0x38>
10002538:	2420      	movs	r4, #32
1000253a:	e79a      	b.n	10002472 <_ntoa_format+0x6e>
            buf[len++] = '+';  // ignore the space if the '+' exists
1000253c:	232b      	movs	r3, #43	; 0x2b
1000253e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
10002540:	5513      	strb	r3, [r2, r4]
10002542:	3401      	adds	r4, #1
10002544:	e7ae      	b.n	100024a4 <_ntoa_format+0xa0>
        } else if ((base == 2U) && (len < PICO_PRINTF_NTOA_BUFFER_SIZE)) {
10002546:	2c20      	cmp	r4, #32
10002548:	d0ac      	beq.n	100024a4 <_ntoa_format+0xa0>
            buf[len++] = 'b';
1000254a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1000254c:	191b      	adds	r3, r3, r4
1000254e:	3401      	adds	r4, #1
10002550:	e03a      	b.n	100025c8 <_ntoa_format+0x1c4>
            len--;
10002552:	1e63      	subs	r3, r4, #1
            if (len && (base == 16U)) {
10002554:	2c01      	cmp	r4, #1
10002556:	d092      	beq.n	1000247e <_ntoa_format+0x7a>
10002558:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
1000255a:	2a10      	cmp	r2, #16
1000255c:	d02a      	beq.n	100025b4 <_ntoa_format+0x1b0>
        } else if ((base == 2U) && (len < PICO_PRINTF_NTOA_BUFFER_SIZE)) {
1000255e:	2a02      	cmp	r2, #2
10002560:	d02f      	beq.n	100025c2 <_ntoa_format+0x1be>
10002562:	001c      	movs	r4, r3
10002564:	e7d0      	b.n	10002508 <_ntoa_format+0x104>
        if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PICO_PRINTF_NTOA_BUFFER_SIZE)) {
10002566:	06bb      	lsls	r3, r7, #26
10002568:	d40e      	bmi.n	10002588 <_ntoa_format+0x184>
1000256a:	2c20      	cmp	r4, #32
1000256c:	d09a      	beq.n	100024a4 <_ntoa_format+0xa0>
            buf[len++] = 'x';
1000256e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
10002570:	191a      	adds	r2, r3, r4
10002572:	3401      	adds	r4, #1
10002574:	2378      	movs	r3, #120	; 0x78
10002576:	7013      	strb	r3, [r2, #0]
10002578:	e7c4      	b.n	10002504 <_ntoa_format+0x100>
        if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PICO_PRINTF_NTOA_BUFFER_SIZE)) {
1000257a:	06bb      	lsls	r3, r7, #26
1000257c:	d40d      	bmi.n	1000259a <_ntoa_format+0x196>
            buf[len++] = 'x';
1000257e:	2378      	movs	r3, #120	; 0x78
10002580:	9a0c      	ldr	r2, [sp, #48]	; 0x30
10002582:	2401      	movs	r4, #1
10002584:	7013      	strb	r3, [r2, #0]
        if (len < PICO_PRINTF_NTOA_BUFFER_SIZE) {
10002586:	e7bf      	b.n	10002508 <_ntoa_format+0x104>
        } else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PICO_PRINTF_NTOA_BUFFER_SIZE)) {
10002588:	2c20      	cmp	r4, #32
1000258a:	d100      	bne.n	1000258e <_ntoa_format+0x18a>
1000258c:	e78a      	b.n	100024a4 <_ntoa_format+0xa0>
            buf[len++] = 'X';
1000258e:	2258      	movs	r2, #88	; 0x58
10002590:	9b0c      	ldr	r3, [sp, #48]	; 0x30
10002592:	191b      	adds	r3, r3, r4
10002594:	701a      	strb	r2, [r3, #0]
10002596:	3401      	adds	r4, #1
10002598:	e7b4      	b.n	10002504 <_ntoa_format+0x100>
1000259a:	2358      	movs	r3, #88	; 0x58
1000259c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1000259e:	2401      	movs	r4, #1
100025a0:	7013      	strb	r3, [r2, #0]
        if (len < PICO_PRINTF_NTOA_BUFFER_SIZE) {
100025a2:	e7b1      	b.n	10002508 <_ntoa_format+0x104>
            buf[len++] = 'b';
100025a4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
100025a6:	3360      	adds	r3, #96	; 0x60
100025a8:	2401      	movs	r4, #1
100025aa:	7013      	strb	r3, [r2, #0]
        if (len < PICO_PRINTF_NTOA_BUFFER_SIZE) {
100025ac:	e7ac      	b.n	10002508 <_ntoa_format+0x104>
        while ((len < prec) && (len < PICO_PRINTF_NTOA_BUFFER_SIZE)) {
100025ae:	2420      	movs	r4, #32
        while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PICO_PRINTF_NTOA_BUFFER_SIZE)) {
100025b0:	2600      	movs	r6, #0
100025b2:	e75e      	b.n	10002472 <_ntoa_format+0x6e>
                len--;
100025b4:	3c02      	subs	r4, #2
        if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PICO_PRINTF_NTOA_BUFFER_SIZE)) {
100025b6:	06ba      	lsls	r2, r7, #26
100025b8:	d4e9      	bmi.n	1000258e <_ntoa_format+0x18a>
            buf[len++] = 'x';
100025ba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
100025bc:	1912      	adds	r2, r2, r4
100025be:	001c      	movs	r4, r3
100025c0:	e7d8      	b.n	10002574 <_ntoa_format+0x170>
            buf[len++] = 'b';
100025c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
100025c4:	4692      	mov	sl, r2
100025c6:	4453      	add	r3, sl
100025c8:	2262      	movs	r2, #98	; 0x62
100025ca:	701a      	strb	r2, [r3, #0]
100025cc:	e79a      	b.n	10002504 <_ntoa_format+0x100>
100025ce:	46c0      	nop			; (mov r8, r8)

100025d0 <_out_char>:
static inline void _out_char(char character, void *buffer, size_t idx, size_t maxlen) {
100025d0:	b510      	push	{r4, lr}
    if (character) {
100025d2:	2800      	cmp	r0, #0
100025d4:	d100      	bne.n	100025d8 <_out_char+0x8>
}
100025d6:	bd10      	pop	{r4, pc}
    putchar(character);
100025d8:	f001 fb48 	bl	10003c6c <__wrap_putchar>
}
100025dc:	e7fb      	b.n	100025d6 <_out_char+0x6>
100025de:	46c0      	nop			; (mov r8, r8)

100025e0 <_out_fct>:
static inline void _out_fct(char character, void *buffer, size_t idx, size_t maxlen) {
100025e0:	000b      	movs	r3, r1
100025e2:	b510      	push	{r4, lr}
    if (character) {
100025e4:	2800      	cmp	r0, #0
100025e6:	d002      	beq.n	100025ee <_out_fct+0xe>
        ((out_fct_wrap_type *) buffer)->fct(character, ((out_fct_wrap_type *) buffer)->arg);
100025e8:	6849      	ldr	r1, [r1, #4]
100025ea:	681b      	ldr	r3, [r3, #0]
100025ec:	4798      	blx	r3
}
100025ee:	bd10      	pop	{r4, pc}

100025f0 <_etoa>:

#if PICO_PRINTF_SUPPORT_EXPONENTIAL

// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char *buffer, size_t idx, size_t maxlen, double value, unsigned int prec,
                    unsigned int width, unsigned int flags) {
100025f0:	b5f0      	push	{r4, r5, r6, r7, lr}
100025f2:	46de      	mov	lr, fp
100025f4:	4657      	mov	r7, sl
100025f6:	464e      	mov	r6, r9
100025f8:	4645      	mov	r5, r8
100025fa:	b5e0      	push	{r5, r6, r7, lr}
100025fc:	b09b      	sub	sp, #108	; 0x6c
100025fe:	469a      	mov	sl, r3
10002600:	9b24      	ldr	r3, [sp, #144]	; 0x90
10002602:	468b      	mov	fp, r1
10002604:	4699      	mov	r9, r3
10002606:	9b25      	ldr	r3, [sp, #148]	; 0x94
10002608:	900b      	str	r0, [sp, #44]	; 0x2c
1000260a:	4698      	mov	r8, r3
1000260c:	920c      	str	r2, [sp, #48]	; 0x30
    // check for NaN and special values
    if (is_nan(value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
1000260e:	4643      	mov	r3, r8
10002610:	464a      	mov	r2, r9
10002612:	4648      	mov	r0, r9
10002614:	4641      	mov	r1, r8
10002616:	f7fe f982 	bl	1000091e <__wrap___aeabi_dcmpun>
1000261a:	2800      	cmp	r0, #0
1000261c:	d000      	beq.n	10002620 <_etoa+0x30>
1000261e:	e194      	b.n	1000294a <_etoa+0x35a>
10002620:	2201      	movs	r2, #1
10002622:	4648      	mov	r0, r9
10002624:	4641      	mov	r1, r8
10002626:	4be0      	ldr	r3, [pc, #896]	; (100029a8 <_etoa+0x3b8>)
10002628:	4252      	negs	r2, r2
1000262a:	f7fe f973 	bl	10000914 <__wrap___aeabi_dcmpgt>
1000262e:	2800      	cmp	r0, #0
10002630:	d000      	beq.n	10002634 <_etoa+0x44>
10002632:	e18a      	b.n	1000294a <_etoa+0x35a>
10002634:	2201      	movs	r2, #1
10002636:	4648      	mov	r0, r9
10002638:	4641      	mov	r1, r8
1000263a:	4bdc      	ldr	r3, [pc, #880]	; (100029ac <_etoa+0x3bc>)
1000263c:	4252      	negs	r2, r2
1000263e:	f7fe f953 	bl	100008e8 <__wrap___aeabi_dcmplt>
10002642:	2800      	cmp	r0, #0
10002644:	d000      	beq.n	10002648 <_etoa+0x58>
10002646:	e180      	b.n	1000294a <_etoa+0x35a>
        return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
    }

    // determine the sign
    const bool negative = value < 0;
    if (negative) {
10002648:	2200      	movs	r2, #0
1000264a:	2300      	movs	r3, #0
1000264c:	4648      	mov	r0, r9
1000264e:	4641      	mov	r1, r8
10002650:	f7fe f94a 	bl	100008e8 <__wrap___aeabi_dcmplt>
10002654:	2800      	cmp	r0, #0
10002656:	d000      	beq.n	1000265a <_etoa+0x6a>
10002658:	e19b      	b.n	10002992 <_etoa+0x3a2>
1000265a:	464a      	mov	r2, r9
1000265c:	4643      	mov	r3, r8
1000265e:	920a      	str	r2, [sp, #40]	; 0x28
10002660:	9309      	str	r3, [sp, #36]	; 0x24
        value = -value;
    }

    // default precision
    if (!(flags & FLAGS_PRECISION)) {
10002662:	2380      	movs	r3, #128	; 0x80
10002664:	9a28      	ldr	r2, [sp, #160]	; 0xa0
10002666:	00db      	lsls	r3, r3, #3
10002668:	401a      	ands	r2, r3
1000266a:	9211      	str	r2, [sp, #68]	; 0x44
1000266c:	9a28      	ldr	r2, [sp, #160]	; 0xa0
1000266e:	421a      	tst	r2, r3
10002670:	d101      	bne.n	10002676 <_etoa+0x86>
        prec = PICO_PRINTF_DEFAULT_FLOAT_PRECISION;
10002672:	2306      	movs	r3, #6
10002674:	9326      	str	r3, [sp, #152]	; 0x98
        uint64_t U;
        double F;
    } conv;

    conv.F = value;
    int exp2 = (int) ((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
10002676:	4bce      	ldr	r3, [pc, #824]	; (100029b0 <_etoa+0x3c0>)
10002678:	9f09      	ldr	r7, [sp, #36]	; 0x24
1000267a:	469c      	mov	ip, r3
1000267c:	0078      	lsls	r0, r7, #1
1000267e:	0d40      	lsrs	r0, r0, #21
10002680:	4460      	add	r0, ip
    conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
    // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
    int expval = (int) (0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
10002682:	f7fe f95f 	bl	10000944 <__wrap___aeabi_i2d>
10002686:	4acb      	ldr	r2, [pc, #812]	; (100029b4 <_etoa+0x3c4>)
10002688:	4bcb      	ldr	r3, [pc, #812]	; (100029b8 <_etoa+0x3c8>)
1000268a:	f7fe f8eb 	bl	10000864 <__wrap___aeabi_dmul>
1000268e:	4acb      	ldr	r2, [pc, #812]	; (100029bc <_etoa+0x3cc>)
10002690:	4bcb      	ldr	r3, [pc, #812]	; (100029c0 <_etoa+0x3d0>)
10002692:	f7fe f8d5 	bl	10000840 <__wrap___aeabi_dadd>
    conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
10002696:	033b      	lsls	r3, r7, #12
10002698:	4aca      	ldr	r2, [pc, #808]	; (100029c4 <_etoa+0x3d4>)
    conv.F = value;
1000269a:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
1000269c:	0b1b      	lsrs	r3, r3, #12
1000269e:	431a      	orrs	r2, r3
    int expval = (int) (0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
100026a0:	0004      	movs	r4, r0
100026a2:	000d      	movs	r5, r1
    conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
100026a4:	0030      	movs	r0, r6
100026a6:	0011      	movs	r1, r2
    int expval = (int) (0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
100026a8:	4bc7      	ldr	r3, [pc, #796]	; (100029c8 <_etoa+0x3d8>)
100026aa:	2200      	movs	r2, #0
100026ac:	f7fe f8bf 	bl	1000082e <__wrap___aeabi_dsub>
100026b0:	4ac6      	ldr	r2, [pc, #792]	; (100029cc <_etoa+0x3dc>)
100026b2:	4bc7      	ldr	r3, [pc, #796]	; (100029d0 <_etoa+0x3e0>)
100026b4:	f7fe f8d6 	bl	10000864 <__wrap___aeabi_dmul>
100026b8:	0002      	movs	r2, r0
100026ba:	000b      	movs	r3, r1
100026bc:	0020      	movs	r0, r4
100026be:	0029      	movs	r1, r5
100026c0:	f7fe f8be 	bl	10000840 <__wrap___aeabi_dadd>
100026c4:	f7fe f956 	bl	10000974 <__wrap___aeabi_d2iz>
    // now we want to compute 10^expval but we want to be sure it won't overflow
    exp2 = (int) (expval * 3.321928094887362 + 0.5);
100026c8:	900d      	str	r0, [sp, #52]	; 0x34
100026ca:	f7fe f93b 	bl	10000944 <__wrap___aeabi_i2d>
100026ce:	4ac1      	ldr	r2, [pc, #772]	; (100029d4 <_etoa+0x3e4>)
100026d0:	4bc1      	ldr	r3, [pc, #772]	; (100029d8 <_etoa+0x3e8>)
100026d2:	0004      	movs	r4, r0
100026d4:	000d      	movs	r5, r1
100026d6:	f7fe f8c5 	bl	10000864 <__wrap___aeabi_dmul>
100026da:	2200      	movs	r2, #0
100026dc:	4bbf      	ldr	r3, [pc, #764]	; (100029dc <_etoa+0x3ec>)
100026de:	f7fe f8af 	bl	10000840 <__wrap___aeabi_dadd>
100026e2:	f7fe f947 	bl	10000974 <__wrap___aeabi_d2iz>
    const double z = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
100026e6:	4abe      	ldr	r2, [pc, #760]	; (100029e0 <_etoa+0x3f0>)
    exp2 = (int) (expval * 3.321928094887362 + 0.5);
100026e8:	0006      	movs	r6, r0
    const double z = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
100026ea:	4bbe      	ldr	r3, [pc, #760]	; (100029e4 <_etoa+0x3f4>)
100026ec:	0020      	movs	r0, r4
100026ee:	0029      	movs	r1, r5
100026f0:	f7fe f8b8 	bl	10000864 <__wrap___aeabi_dmul>
100026f4:	0004      	movs	r4, r0
100026f6:	0030      	movs	r0, r6
100026f8:	000d      	movs	r5, r1
100026fa:	9610      	str	r6, [sp, #64]	; 0x40
100026fc:	f7fe f922 	bl	10000944 <__wrap___aeabi_i2d>
10002700:	4ab9      	ldr	r2, [pc, #740]	; (100029e8 <_etoa+0x3f8>)
10002702:	4bba      	ldr	r3, [pc, #744]	; (100029ec <_etoa+0x3fc>)
10002704:	f7fe f8ae 	bl	10000864 <__wrap___aeabi_dmul>
10002708:	0002      	movs	r2, r0
1000270a:	000b      	movs	r3, r1
1000270c:	0020      	movs	r0, r4
1000270e:	0029      	movs	r1, r5
10002710:	f7fe f88d 	bl	1000082e <__wrap___aeabi_dsub>
    const double z2 = z * z;
10002714:	0002      	movs	r2, r0
10002716:	000b      	movs	r3, r1
    const double z = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
10002718:	0006      	movs	r6, r0
1000271a:	000f      	movs	r7, r1
    const double z2 = z * z;
1000271c:	f7fe f8a2 	bl	10000864 <__wrap___aeabi_dmul>
    conv.U = (uint64_t) (exp2 + 1023) << 52U;
    // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
    conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
10002720:	0032      	movs	r2, r6
    const double z2 = z * z;
10002722:	0004      	movs	r4, r0
10002724:	000d      	movs	r5, r1
    conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
10002726:	003b      	movs	r3, r7
10002728:	0030      	movs	r0, r6
1000272a:	0039      	movs	r1, r7
1000272c:	f7fe f888 	bl	10000840 <__wrap___aeabi_dadd>
10002730:	2200      	movs	r2, #0
10002732:	900e      	str	r0, [sp, #56]	; 0x38
10002734:	910f      	str	r1, [sp, #60]	; 0x3c
10002736:	4bae      	ldr	r3, [pc, #696]	; (100029f0 <_etoa+0x400>)
10002738:	0020      	movs	r0, r4
1000273a:	0029      	movs	r1, r5
1000273c:	f7fe f889 	bl	10000852 <__wrap___aeabi_ddiv>
10002740:	2200      	movs	r2, #0
10002742:	4bac      	ldr	r3, [pc, #688]	; (100029f4 <_etoa+0x404>)
10002744:	f7fe f87c 	bl	10000840 <__wrap___aeabi_dadd>
10002748:	0002      	movs	r2, r0
1000274a:	000b      	movs	r3, r1
1000274c:	0020      	movs	r0, r4
1000274e:	0029      	movs	r1, r5
10002750:	f7fe f87f 	bl	10000852 <__wrap___aeabi_ddiv>
10002754:	2200      	movs	r2, #0
10002756:	4ba8      	ldr	r3, [pc, #672]	; (100029f8 <_etoa+0x408>)
10002758:	f7fe f872 	bl	10000840 <__wrap___aeabi_dadd>
1000275c:	0002      	movs	r2, r0
1000275e:	000b      	movs	r3, r1
10002760:	0020      	movs	r0, r4
10002762:	0029      	movs	r1, r5
10002764:	f7fe f875 	bl	10000852 <__wrap___aeabi_ddiv>
10002768:	000d      	movs	r5, r1
1000276a:	2180      	movs	r1, #128	; 0x80
1000276c:	0004      	movs	r4, r0
1000276e:	0032      	movs	r2, r6
10002770:	003b      	movs	r3, r7
10002772:	2000      	movs	r0, #0
10002774:	05c9      	lsls	r1, r1, #23
10002776:	f7fe f85a 	bl	1000082e <__wrap___aeabi_dsub>
1000277a:	0002      	movs	r2, r0
1000277c:	000b      	movs	r3, r1
1000277e:	0020      	movs	r0, r4
10002780:	0029      	movs	r1, r5
10002782:	f7fe f85d 	bl	10000840 <__wrap___aeabi_dadd>
10002786:	0002      	movs	r2, r0
10002788:	000b      	movs	r3, r1
1000278a:	980e      	ldr	r0, [sp, #56]	; 0x38
1000278c:	990f      	ldr	r1, [sp, #60]	; 0x3c
1000278e:	f7fe f860 	bl	10000852 <__wrap___aeabi_ddiv>
10002792:	2200      	movs	r2, #0
10002794:	4b8b      	ldr	r3, [pc, #556]	; (100029c4 <_etoa+0x3d4>)
10002796:	f7fe f853 	bl	10000840 <__wrap___aeabi_dadd>
    conv.U = (uint64_t) (exp2 + 1023) << 52U;
1000279a:	4b98      	ldr	r3, [pc, #608]	; (100029fc <_etoa+0x40c>)
1000279c:	9c10      	ldr	r4, [sp, #64]	; 0x40
1000279e:	469c      	mov	ip, r3
100027a0:	4464      	add	r4, ip
100027a2:	2200      	movs	r2, #0
100027a4:	0523      	lsls	r3, r4, #20
    conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
100027a6:	f7fe f85d 	bl	10000864 <__wrap___aeabi_dmul>
100027aa:	0006      	movs	r6, r0
100027ac:	000f      	movs	r7, r1
    // correct for rounding errors
    if (value < conv.F) {
100027ae:	0002      	movs	r2, r0
100027b0:	000b      	movs	r3, r1
100027b2:	980a      	ldr	r0, [sp, #40]	; 0x28
100027b4:	9909      	ldr	r1, [sp, #36]	; 0x24
100027b6:	f7fe f897 	bl	100008e8 <__wrap___aeabi_dcmplt>
100027ba:	2800      	cmp	r0, #0
100027bc:	d00a      	beq.n	100027d4 <_etoa+0x1e4>
        expval--;
100027be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
        conv.F /= 10;
100027c0:	0030      	movs	r0, r6
        expval--;
100027c2:	3b01      	subs	r3, #1
        conv.F /= 10;
100027c4:	0039      	movs	r1, r7
        expval--;
100027c6:	930d      	str	r3, [sp, #52]	; 0x34
        conv.F /= 10;
100027c8:	2200      	movs	r2, #0
100027ca:	4b8a      	ldr	r3, [pc, #552]	; (100029f4 <_etoa+0x404>)
100027cc:	f7fe f841 	bl	10000852 <__wrap___aeabi_ddiv>
100027d0:	0006      	movs	r6, r0
100027d2:	000f      	movs	r7, r1
    }

    // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
    unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
100027d4:	9d0d      	ldr	r5, [sp, #52]	; 0x34
100027d6:	24c6      	movs	r4, #198	; 0xc6
100027d8:	002b      	movs	r3, r5
100027da:	3363      	adds	r3, #99	; 0x63
100027dc:	429c      	cmp	r4, r3
100027de:	41a4      	sbcs	r4, r4

    // in "%g" mode, "prec" is the number of *significant figures* not decimals
    if (flags & FLAGS_ADAPT_EXP) {
100027e0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
100027e2:	4264      	negs	r4, r4
100027e4:	3404      	adds	r4, #4
    if (flags & FLAGS_ADAPT_EXP) {
100027e6:	051b      	lsls	r3, r3, #20
100027e8:	d51f      	bpl.n	1000282a <_etoa+0x23a>
        // do we want to fall-back to "%f" mode?
        if ((value >= 1e-4) && (value < 1e6)) {
100027ea:	4a85      	ldr	r2, [pc, #532]	; (10002a00 <_etoa+0x410>)
100027ec:	4b85      	ldr	r3, [pc, #532]	; (10002a04 <_etoa+0x414>)
100027ee:	980a      	ldr	r0, [sp, #40]	; 0x28
100027f0:	9909      	ldr	r1, [sp, #36]	; 0x24
100027f2:	f7fe f887 	bl	10000904 <__wrap___aeabi_dcmpge>
100027f6:	2800      	cmp	r0, #0
100027f8:	d100      	bne.n	100027fc <_etoa+0x20c>
100027fa:	e0bf      	b.n	1000297c <_etoa+0x38c>
100027fc:	2200      	movs	r2, #0
100027fe:	4b82      	ldr	r3, [pc, #520]	; (10002a08 <_etoa+0x418>)
10002800:	980a      	ldr	r0, [sp, #40]	; 0x28
10002802:	9909      	ldr	r1, [sp, #36]	; 0x24
10002804:	f7fe f870 	bl	100008e8 <__wrap___aeabi_dcmplt>
10002808:	2800      	cmp	r0, #0
1000280a:	d100      	bne.n	1000280e <_etoa+0x21e>
1000280c:	e0b6      	b.n	1000297c <_etoa+0x38c>
            if ((int) prec > expval) {
1000280e:	9b26      	ldr	r3, [sp, #152]	; 0x98
10002810:	429d      	cmp	r5, r3
10002812:	da00      	bge.n	10002816 <_etoa+0x226>
10002814:	e0c4      	b.n	100029a0 <_etoa+0x3b0>
                prec = (unsigned) ((int) prec - expval - 1);
            } else {
                prec = 0;
10002816:	2300      	movs	r3, #0
10002818:	9326      	str	r3, [sp, #152]	; 0x98
            }
            flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
1000281a:	2380      	movs	r3, #128	; 0x80
1000281c:	9a28      	ldr	r2, [sp, #160]	; 0xa0
1000281e:	00db      	lsls	r3, r3, #3
10002820:	431a      	orrs	r2, r3
            // no characters in exponent
            minwidth = 0U;
            expval = 0;
10002822:	2300      	movs	r3, #0
            minwidth = 0U;
10002824:	2400      	movs	r4, #0
            flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
10002826:	9228      	str	r2, [sp, #160]	; 0xa0
            expval = 0;
10002828:	930d      	str	r3, [sp, #52]	; 0x34
        }
    }

    // will everything fit?
    unsigned int fwidth = width;
    if (width > minwidth) {
1000282a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
        // we didn't fall-back so subtract the characters required for the exponent
        fwidth -= minwidth;
    } else {
        // not enough characters, so go back to default sizing
        fwidth = 0U;
1000282c:	2500      	movs	r5, #0
    if (width > minwidth) {
1000282e:	42a3      	cmp	r3, r4
10002830:	d900      	bls.n	10002834 <_etoa+0x244>
        fwidth -= minwidth;
10002832:	1b1d      	subs	r5, r3, r4
    }
    if ((flags & FLAGS_LEFT) && minwidth) {
10002834:	2302      	movs	r3, #2
10002836:	9a28      	ldr	r2, [sp, #160]	; 0xa0
10002838:	401a      	ands	r2, r3
1000283a:	9210      	str	r2, [sp, #64]	; 0x40
1000283c:	9a28      	ldr	r2, [sp, #160]	; 0xa0
1000283e:	4213      	tst	r3, r2
10002840:	d003      	beq.n	1000284a <_etoa+0x25a>
        // if we're padding on the right, DON'T pad the floating part
        fwidth = 0U;
10002842:	4263      	negs	r3, r4
10002844:	4163      	adcs	r3, r4
10002846:	425b      	negs	r3, r3
10002848:	401d      	ands	r5, r3
    }

    // rescale the float value
    if (expval) {
1000284a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1000284c:	2b00      	cmp	r3, #0
1000284e:	d007      	beq.n	10002860 <_etoa+0x270>
        value /= conv.F;
10002850:	980a      	ldr	r0, [sp, #40]	; 0x28
10002852:	9909      	ldr	r1, [sp, #36]	; 0x24
10002854:	0032      	movs	r2, r6
10002856:	003b      	movs	r3, r7
10002858:	f7fd fffb 	bl	10000852 <__wrap___aeabi_ddiv>
1000285c:	900a      	str	r0, [sp, #40]	; 0x28
1000285e:	9109      	str	r1, [sp, #36]	; 0x24
    }

    // output the floating part
    const size_t start_idx = idx;
    idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
10002860:	2200      	movs	r2, #0
10002862:	2300      	movs	r3, #0
10002864:	4648      	mov	r0, r9
10002866:	4641      	mov	r1, r8
10002868:	f7fe f83e 	bl	100008e8 <__wrap___aeabi_dcmplt>
1000286c:	2800      	cmp	r0, #0
1000286e:	d005      	beq.n	1000287c <_etoa+0x28c>
10002870:	2080      	movs	r0, #128	; 0x80
10002872:	0600      	lsls	r0, r0, #24
10002874:	4684      	mov	ip, r0
10002876:	9909      	ldr	r1, [sp, #36]	; 0x24
10002878:	4461      	add	r1, ip
1000287a:	9109      	str	r1, [sp, #36]	; 0x24
1000287c:	9a28      	ldr	r2, [sp, #160]	; 0xa0
1000287e:	4b63      	ldr	r3, [pc, #396]	; (10002a0c <_etoa+0x41c>)
10002880:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
10002882:	4013      	ands	r3, r2
10002884:	9304      	str	r3, [sp, #16]
10002886:	9b26      	ldr	r3, [sp, #152]	; 0x98
10002888:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1000288a:	9302      	str	r3, [sp, #8]
1000288c:	9b09      	ldr	r3, [sp, #36]	; 0x24
1000288e:	9503      	str	r5, [sp, #12]
10002890:	9200      	str	r2, [sp, #0]
10002892:	9301      	str	r3, [sp, #4]
10002894:	4659      	mov	r1, fp
10002896:	4653      	mov	r3, sl
10002898:	0030      	movs	r0, r6
1000289a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1000289c:	f000 f8b8 	bl	10002a10 <_ftoa>
100028a0:	0005      	movs	r5, r0

    // output the exponent part
    if (minwidth) {
100028a2:	2c00      	cmp	r4, #0
100028a4:	d062      	beq.n	1000296c <_etoa+0x37c>
        // output the exponential symbol
        out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
100028a6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
100028a8:	002a      	movs	r2, r5
100028aa:	0698      	lsls	r0, r3, #26
100028ac:	231f      	movs	r3, #31
100028ae:	17c0      	asrs	r0, r0, #31
100028b0:	4398      	bics	r0, r3
100028b2:	1c6b      	adds	r3, r5, #1
100028b4:	4698      	mov	r8, r3
100028b6:	4659      	mov	r1, fp
100028b8:	4653      	mov	r3, sl
100028ba:	3065      	adds	r0, #101	; 0x65
100028bc:	47b0      	blx	r6
        // output the exponent value
        idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth - 1,
100028be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
100028c0:	2600      	movs	r6, #0
100028c2:	17da      	asrs	r2, r3, #31
100028c4:	189d      	adds	r5, r3, r2
100028c6:	0fdb      	lsrs	r3, r3, #31
100028c8:	4699      	mov	r9, r3
100028ca:	4055      	eors	r5, r2
100028cc:	3c01      	subs	r4, #1
    if (!(flags & FLAGS_PRECISION) || value) {
100028ce:	e001      	b.n	100028d4 <_etoa+0x2e4>
        } while (value && (len < PICO_PRINTF_NTOA_BUFFER_SIZE));
100028d0:	2e20      	cmp	r6, #32
100028d2:	d013      	beq.n	100028fc <_etoa+0x30c>
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
100028d4:	aa0a      	add	r2, sp, #40	; 0x28
100028d6:	4694      	mov	ip, r2
100028d8:	231f      	movs	r3, #31
            const char digit = (char) (value % base);
100028da:	0028      	movs	r0, r5
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
100028dc:	4463      	add	r3, ip
            const char digit = (char) (value % base);
100028de:	210a      	movs	r1, #10
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
100028e0:	3601      	adds	r6, #1
100028e2:	199f      	adds	r7, r3, r6
            const char digit = (char) (value % base);
100028e4:	f7fd fd46 	bl	10000374 <__wrap___aeabi_uidiv>
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
100028e8:	3130      	adds	r1, #48	; 0x30
100028ea:	7039      	strb	r1, [r7, #0]
            value /= base;
100028ec:	0028      	movs	r0, r5
100028ee:	210a      	movs	r1, #10
100028f0:	f7fd fd40 	bl	10000374 <__wrap___aeabi_uidiv>
100028f4:	002f      	movs	r7, r5
100028f6:	0005      	movs	r5, r0
        } while (value && (len < PICO_PRINTF_NTOA_BUFFER_SIZE));
100028f8:	2f09      	cmp	r7, #9
100028fa:	d8e9      	bhi.n	100028d0 <_etoa+0x2e0>
    return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int) base, prec, width, flags);
100028fc:	2305      	movs	r3, #5
100028fe:	9306      	str	r3, [sp, #24]
10002900:	2300      	movs	r3, #0
10002902:	9304      	str	r3, [sp, #16]
10002904:	330a      	adds	r3, #10
10002906:	9303      	str	r3, [sp, #12]
10002908:	464b      	mov	r3, r9
1000290a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
1000290c:	9302      	str	r3, [sp, #8]
1000290e:	ab12      	add	r3, sp, #72	; 0x48
10002910:	9300      	str	r3, [sp, #0]
10002912:	4642      	mov	r2, r8
10002914:	4653      	mov	r3, sl
10002916:	4659      	mov	r1, fp
10002918:	0038      	movs	r0, r7
1000291a:	9405      	str	r4, [sp, #20]
1000291c:	9601      	str	r6, [sp, #4]
1000291e:	f7ff fd71 	bl	10002404 <_ntoa_format>
                         FLAGS_ZEROPAD | FLAGS_PLUS);
        // might need to right-pad spaces
        if (flags & FLAGS_LEFT) {
10002922:	9b10      	ldr	r3, [sp, #64]	; 0x40
    return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int) base, prec, width, flags);
10002924:	0005      	movs	r5, r0
        if (flags & FLAGS_LEFT) {
10002926:	2b00      	cmp	r3, #0
10002928:	d020      	beq.n	1000296c <_etoa+0x37c>
            while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
1000292a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1000292c:	1ac4      	subs	r4, r0, r3
1000292e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
10002930:	42a3      	cmp	r3, r4
10002932:	d91b      	bls.n	1000296c <_etoa+0x37c>
10002934:	001e      	movs	r6, r3
10002936:	002a      	movs	r2, r5
10002938:	4653      	mov	r3, sl
1000293a:	4659      	mov	r1, fp
1000293c:	2020      	movs	r0, #32
1000293e:	3401      	adds	r4, #1
10002940:	47b8      	blx	r7
10002942:	3501      	adds	r5, #1
10002944:	42a6      	cmp	r6, r4
10002946:	d8f6      	bhi.n	10002936 <_etoa+0x346>
10002948:	e010      	b.n	1000296c <_etoa+0x37c>
        return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
1000294a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
1000294c:	464a      	mov	r2, r9
1000294e:	9304      	str	r3, [sp, #16]
10002950:	9b27      	ldr	r3, [sp, #156]	; 0x9c
10002952:	4659      	mov	r1, fp
10002954:	9303      	str	r3, [sp, #12]
10002956:	9b26      	ldr	r3, [sp, #152]	; 0x98
10002958:	980b      	ldr	r0, [sp, #44]	; 0x2c
1000295a:	9302      	str	r3, [sp, #8]
1000295c:	4643      	mov	r3, r8
1000295e:	9200      	str	r2, [sp, #0]
10002960:	9301      	str	r3, [sp, #4]
10002962:	4653      	mov	r3, sl
10002964:	9a0c      	ldr	r2, [sp, #48]	; 0x30
10002966:	f000 f853 	bl	10002a10 <_ftoa>
1000296a:	0005      	movs	r5, r0
        }
    }
    return idx;
}
1000296c:	0028      	movs	r0, r5
1000296e:	b01b      	add	sp, #108	; 0x6c
10002970:	bcf0      	pop	{r4, r5, r6, r7}
10002972:	46bb      	mov	fp, r7
10002974:	46b2      	mov	sl, r6
10002976:	46a9      	mov	r9, r5
10002978:	46a0      	mov	r8, r4
1000297a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if ((prec > 0) && (flags & FLAGS_PRECISION)) {
1000297c:	9b26      	ldr	r3, [sp, #152]	; 0x98
1000297e:	2b00      	cmp	r3, #0
10002980:	d100      	bne.n	10002984 <_etoa+0x394>
10002982:	e752      	b.n	1000282a <_etoa+0x23a>
                --prec;
10002984:	9b11      	ldr	r3, [sp, #68]	; 0x44
10002986:	1e5a      	subs	r2, r3, #1
10002988:	4193      	sbcs	r3, r2
1000298a:	9a26      	ldr	r2, [sp, #152]	; 0x98
1000298c:	1ad3      	subs	r3, r2, r3
1000298e:	9326      	str	r3, [sp, #152]	; 0x98
10002990:	e74b      	b.n	1000282a <_etoa+0x23a>
        value = -value;
10002992:	464b      	mov	r3, r9
10002994:	930a      	str	r3, [sp, #40]	; 0x28
10002996:	2380      	movs	r3, #128	; 0x80
10002998:	061b      	lsls	r3, r3, #24
1000299a:	4443      	add	r3, r8
1000299c:	9309      	str	r3, [sp, #36]	; 0x24
1000299e:	e660      	b.n	10002662 <_etoa+0x72>
                prec = (unsigned) ((int) prec - expval - 1);
100029a0:	1b58      	subs	r0, r3, r5
100029a2:	1e43      	subs	r3, r0, #1
100029a4:	9326      	str	r3, [sp, #152]	; 0x98
100029a6:	e738      	b.n	1000281a <_etoa+0x22a>
100029a8:	7fefffff 	.word	0x7fefffff
100029ac:	ffefffff 	.word	0xffefffff
100029b0:	fffffc01 	.word	0xfffffc01
100029b4:	509f79fb 	.word	0x509f79fb
100029b8:	3fd34413 	.word	0x3fd34413
100029bc:	8b60c8b3 	.word	0x8b60c8b3
100029c0:	3fc68a28 	.word	0x3fc68a28
100029c4:	3ff00000 	.word	0x3ff00000
100029c8:	3ff80000 	.word	0x3ff80000
100029cc:	636f4361 	.word	0x636f4361
100029d0:	3fd287a7 	.word	0x3fd287a7
100029d4:	0979a371 	.word	0x0979a371
100029d8:	400a934f 	.word	0x400a934f
100029dc:	3fe00000 	.word	0x3fe00000
100029e0:	bbb55516 	.word	0xbbb55516
100029e4:	40026bb1 	.word	0x40026bb1
100029e8:	fefa39ef 	.word	0xfefa39ef
100029ec:	3fe62e42 	.word	0x3fe62e42
100029f0:	402c0000 	.word	0x402c0000
100029f4:	40240000 	.word	0x40240000
100029f8:	40180000 	.word	0x40180000
100029fc:	000003ff 	.word	0x000003ff
10002a00:	eb1c432d 	.word	0xeb1c432d
10002a04:	3f1a36e2 	.word	0x3f1a36e2
10002a08:	412e8480 	.word	0x412e8480
10002a0c:	fffff7ff 	.word	0xfffff7ff

10002a10 <_ftoa>:
                    unsigned int width, unsigned int flags) {
10002a10:	b5f0      	push	{r4, r5, r6, r7, lr}
10002a12:	464e      	mov	r6, r9
10002a14:	46de      	mov	lr, fp
10002a16:	4657      	mov	r7, sl
10002a18:	4645      	mov	r5, r8
10002a1a:	b5e0      	push	{r5, r6, r7, lr}
10002a1c:	b097      	sub	sp, #92	; 0x5c
10002a1e:	4699      	mov	r9, r3
10002a20:	9e20      	ldr	r6, [sp, #128]	; 0x80
10002a22:	9f21      	ldr	r7, [sp, #132]	; 0x84
10002a24:	9b22      	ldr	r3, [sp, #136]	; 0x88
10002a26:	4683      	mov	fp, r0
10002a28:	4698      	mov	r8, r3
10002a2a:	9107      	str	r1, [sp, #28]
10002a2c:	920c      	str	r2, [sp, #48]	; 0x30
    if (is_nan(value))
10002a2e:	003b      	movs	r3, r7
10002a30:	0032      	movs	r2, r6
10002a32:	0030      	movs	r0, r6
10002a34:	0039      	movs	r1, r7
10002a36:	f7fd ff72 	bl	1000091e <__wrap___aeabi_dcmpun>
10002a3a:	2800      	cmp	r0, #0
10002a3c:	d000      	beq.n	10002a40 <_ftoa+0x30>
10002a3e:	e1a9      	b.n	10002d94 <_ftoa+0x384>
    if (value < -DBL_MAX)
10002a40:	2201      	movs	r2, #1
10002a42:	0030      	movs	r0, r6
10002a44:	0039      	movs	r1, r7
10002a46:	4bca      	ldr	r3, [pc, #808]	; (10002d70 <_ftoa+0x360>)
10002a48:	4252      	negs	r2, r2
10002a4a:	f7fd ff4d 	bl	100008e8 <__wrap___aeabi_dcmplt>
10002a4e:	2800      	cmp	r0, #0
10002a50:	d000      	beq.n	10002a54 <_ftoa+0x44>
10002a52:	e0e1      	b.n	10002c18 <_ftoa+0x208>
    if (value > DBL_MAX)
10002a54:	2201      	movs	r2, #1
10002a56:	0030      	movs	r0, r6
10002a58:	0039      	movs	r1, r7
10002a5a:	4bc6      	ldr	r3, [pc, #792]	; (10002d74 <_ftoa+0x364>)
10002a5c:	4252      	negs	r2, r2
10002a5e:	f7fd ff59 	bl	10000914 <__wrap___aeabi_dcmpgt>
10002a62:	2800      	cmp	r0, #0
10002a64:	d000      	beq.n	10002a68 <_ftoa+0x58>
10002a66:	e0b7      	b.n	10002bd8 <_ftoa+0x1c8>
    if ((value > PICO_PRINTF_MAX_FLOAT) || (value < -PICO_PRINTF_MAX_FLOAT)) {
10002a68:	2200      	movs	r2, #0
10002a6a:	0030      	movs	r0, r6
10002a6c:	0039      	movs	r1, r7
10002a6e:	4bc2      	ldr	r3, [pc, #776]	; (10002d78 <_ftoa+0x368>)
10002a70:	f7fd ff50 	bl	10000914 <__wrap___aeabi_dcmpgt>
10002a74:	2800      	cmp	r0, #0
10002a76:	d000      	beq.n	10002a7a <_ftoa+0x6a>
10002a78:	e099      	b.n	10002bae <_ftoa+0x19e>
10002a7a:	2200      	movs	r2, #0
10002a7c:	0030      	movs	r0, r6
10002a7e:	0039      	movs	r1, r7
10002a80:	4bbe      	ldr	r3, [pc, #760]	; (10002d7c <_ftoa+0x36c>)
10002a82:	f7fd ff31 	bl	100008e8 <__wrap___aeabi_dcmplt>
10002a86:	2800      	cmp	r0, #0
10002a88:	d000      	beq.n	10002a8c <_ftoa+0x7c>
10002a8a:	e090      	b.n	10002bae <_ftoa+0x19e>
    if (value < 0) {
10002a8c:	2200      	movs	r2, #0
10002a8e:	2300      	movs	r3, #0
10002a90:	0030      	movs	r0, r6
10002a92:	0039      	movs	r1, r7
10002a94:	f7fd ff28 	bl	100008e8 <__wrap___aeabi_dcmplt>
10002a98:	2800      	cmp	r0, #0
10002a9a:	d000      	beq.n	10002a9e <_ftoa+0x8e>
10002a9c:	e0b1      	b.n	10002c02 <_ftoa+0x1f2>
    bool negative = false;
10002a9e:	2300      	movs	r3, #0
10002aa0:	930d      	str	r3, [sp, #52]	; 0x34
    if (!(flags & FLAGS_PRECISION)) {
10002aa2:	9b24      	ldr	r3, [sp, #144]	; 0x90
10002aa4:	055b      	lsls	r3, r3, #21
10002aa6:	d401      	bmi.n	10002aac <_ftoa+0x9c>
        prec = PICO_PRINTF_DEFAULT_FLOAT_PRECISION;
10002aa8:	2306      	movs	r3, #6
10002aaa:	4698      	mov	r8, r3
        buf[len++] = '0';
10002aac:	ab08      	add	r3, sp, #32
10002aae:	469c      	mov	ip, r3
10002ab0:	2217      	movs	r2, #23
        prec = PICO_PRINTF_DEFAULT_FLOAT_PRECISION;
10002ab2:	2400      	movs	r4, #0
        buf[len++] = '0';
10002ab4:	2330      	movs	r3, #48	; 0x30
10002ab6:	4641      	mov	r1, r8
10002ab8:	4462      	add	r2, ip
10002aba:	e004      	b.n	10002ac6 <_ftoa+0xb6>
10002abc:	3401      	adds	r4, #1
10002abe:	5513      	strb	r3, [r2, r4]
        prec--;
10002ac0:	3901      	subs	r1, #1
    while ((len < PICO_PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
10002ac2:	2c20      	cmp	r4, #32
10002ac4:	d001      	beq.n	10002aca <_ftoa+0xba>
10002ac6:	2909      	cmp	r1, #9
10002ac8:	d8f8      	bhi.n	10002abc <_ftoa+0xac>
10002aca:	4688      	mov	r8, r1
    int whole = (int) value;
10002acc:	0030      	movs	r0, r6
10002ace:	0039      	movs	r1, r7
10002ad0:	f7fd ff50 	bl	10000974 <__wrap___aeabi_d2iz>
    double tmp = (value - whole) * pow10[prec];
10002ad4:	4643      	mov	r3, r8
10002ad6:	00da      	lsls	r2, r3, #3
10002ad8:	4ba9      	ldr	r3, [pc, #676]	; (10002d80 <_ftoa+0x370>)
    int whole = (int) value;
10002ada:	0005      	movs	r5, r0
    double tmp = (value - whole) * pow10[prec];
10002adc:	189b      	adds	r3, r3, r2
10002ade:	681a      	ldr	r2, [r3, #0]
10002ae0:	685b      	ldr	r3, [r3, #4]
10002ae2:	9208      	str	r2, [sp, #32]
10002ae4:	9309      	str	r3, [sp, #36]	; 0x24
10002ae6:	f7fd ff2d 	bl	10000944 <__wrap___aeabi_i2d>
10002aea:	0002      	movs	r2, r0
10002aec:	000b      	movs	r3, r1
10002aee:	0030      	movs	r0, r6
10002af0:	0039      	movs	r1, r7
10002af2:	f7fd fe9c 	bl	1000082e <__wrap___aeabi_dsub>
10002af6:	9a08      	ldr	r2, [sp, #32]
10002af8:	9b09      	ldr	r3, [sp, #36]	; 0x24
10002afa:	f7fd feb3 	bl	10000864 <__wrap___aeabi_dmul>
    unsigned long frac = (unsigned long) tmp;
10002afe:	900a      	str	r0, [sp, #40]	; 0x28
10002b00:	910b      	str	r1, [sp, #44]	; 0x2c
10002b02:	f7fd ff5b 	bl	100009bc <__wrap___aeabi_d2uiz>
10002b06:	4682      	mov	sl, r0
    diff = tmp - frac;
10002b08:	f7fd ff18 	bl	1000093c <__wrap___aeabi_ui2d>
10002b0c:	0002      	movs	r2, r0
10002b0e:	000b      	movs	r3, r1
10002b10:	980a      	ldr	r0, [sp, #40]	; 0x28
10002b12:	990b      	ldr	r1, [sp, #44]	; 0x2c
10002b14:	f7fd fe8b 	bl	1000082e <__wrap___aeabi_dsub>
    if (diff > 0.5) {
10002b18:	2200      	movs	r2, #0
10002b1a:	4b9a      	ldr	r3, [pc, #616]	; (10002d84 <_ftoa+0x374>)
    diff = tmp - frac;
10002b1c:	900a      	str	r0, [sp, #40]	; 0x28
10002b1e:	910b      	str	r1, [sp, #44]	; 0x2c
    if (diff > 0.5) {
10002b20:	f7fd fef8 	bl	10000914 <__wrap___aeabi_dcmpgt>
10002b24:	2800      	cmp	r0, #0
10002b26:	d100      	bne.n	10002b2a <_ftoa+0x11a>
10002b28:	e0c0      	b.n	10002cac <_ftoa+0x29c>
        ++frac;
10002b2a:	2301      	movs	r3, #1
10002b2c:	469c      	mov	ip, r3
10002b2e:	44e2      	add	sl, ip
        if (frac >= pow10[prec]) {
10002b30:	4650      	mov	r0, sl
10002b32:	f7fd ff03 	bl	1000093c <__wrap___aeabi_ui2d>
10002b36:	0002      	movs	r2, r0
10002b38:	000b      	movs	r3, r1
10002b3a:	9808      	ldr	r0, [sp, #32]
10002b3c:	9909      	ldr	r1, [sp, #36]	; 0x24
10002b3e:	f7fd fed9 	bl	100008f4 <__wrap___aeabi_dcmple>
10002b42:	2800      	cmp	r0, #0
10002b44:	d002      	beq.n	10002b4c <_ftoa+0x13c>
            frac = 0;
10002b46:	2300      	movs	r3, #0
10002b48:	469a      	mov	sl, r3
            ++whole;
10002b4a:	3501      	adds	r5, #1
    if (prec == 0U) {
10002b4c:	4643      	mov	r3, r8
10002b4e:	2b00      	cmp	r3, #0
10002b50:	d06a      	beq.n	10002c28 <_ftoa+0x218>
            buf[len++] = (char) (48U + (frac % 10U));
10002b52:	ab08      	add	r3, sp, #32
10002b54:	2617      	movs	r6, #23
10002b56:	469c      	mov	ip, r3
10002b58:	9508      	str	r5, [sp, #32]
10002b5a:	4466      	add	r6, ip
10002b5c:	4655      	mov	r5, sl
10002b5e:	e014      	b.n	10002b8a <_ftoa+0x17a>
            --count;
10002b60:	2301      	movs	r3, #1
10002b62:	425b      	negs	r3, r3
10002b64:	4443      	add	r3, r8
            buf[len++] = (char) (48U + (frac % 10U));
10002b66:	210a      	movs	r1, #10
10002b68:	0028      	movs	r0, r5
            --count;
10002b6a:	469a      	mov	sl, r3
            buf[len++] = (char) (48U + (frac % 10U));
10002b6c:	f7fd fc02 	bl	10000374 <__wrap___aeabi_uidiv>
10002b70:	3401      	adds	r4, #1
10002b72:	3130      	adds	r1, #48	; 0x30
10002b74:	1937      	adds	r7, r6, r4
10002b76:	7039      	strb	r1, [r7, #0]
            if (!(frac /= 10U)) {
10002b78:	0028      	movs	r0, r5
10002b7a:	210a      	movs	r1, #10
10002b7c:	f7fd fbfa 	bl	10000374 <__wrap___aeabi_uidiv>
10002b80:	2d09      	cmp	r5, #9
10002b82:	d800      	bhi.n	10002b86 <_ftoa+0x176>
10002b84:	e0d0      	b.n	10002d28 <_ftoa+0x318>
            --count;
10002b86:	46d0      	mov	r8, sl
            if (!(frac /= 10U)) {
10002b88:	0005      	movs	r5, r0
        while (len < PICO_PRINTF_FTOA_BUFFER_SIZE) {
10002b8a:	2c20      	cmp	r4, #32
10002b8c:	d1e8      	bne.n	10002b60 <_ftoa+0x150>
10002b8e:	ab0e      	add	r3, sp, #56	; 0x38
10002b90:	4698      	mov	r8, r3
    if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
10002b92:	2303      	movs	r3, #3
10002b94:	9a24      	ldr	r2, [sp, #144]	; 0x90
10002b96:	4013      	ands	r3, r2
10002b98:	2b01      	cmp	r3, #1
10002b9a:	d100      	bne.n	10002b9e <_ftoa+0x18e>
10002b9c:	e096      	b.n	10002ccc <_ftoa+0x2bc>
10002b9e:	2320      	movs	r3, #32
    return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
10002ba0:	9a24      	ldr	r2, [sp, #144]	; 0x90
10002ba2:	9301      	str	r3, [sp, #4]
10002ba4:	9203      	str	r2, [sp, #12]
10002ba6:	9a23      	ldr	r2, [sp, #140]	; 0x8c
10002ba8:	4643      	mov	r3, r8
10002baa:	9202      	str	r2, [sp, #8]
10002bac:	e01e      	b.n	10002bec <_ftoa+0x1dc>
        return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
10002bae:	9b24      	ldr	r3, [sp, #144]	; 0x90
10002bb0:	4658      	mov	r0, fp
10002bb2:	9304      	str	r3, [sp, #16]
10002bb4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
10002bb6:	9600      	str	r6, [sp, #0]
10002bb8:	9701      	str	r7, [sp, #4]
10002bba:	9303      	str	r3, [sp, #12]
10002bbc:	4643      	mov	r3, r8
10002bbe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
10002bc0:	9302      	str	r3, [sp, #8]
10002bc2:	9907      	ldr	r1, [sp, #28]
10002bc4:	464b      	mov	r3, r9
10002bc6:	f7ff fd13 	bl	100025f0 <_etoa>
}
10002bca:	b017      	add	sp, #92	; 0x5c
10002bcc:	bcf0      	pop	{r4, r5, r6, r7}
10002bce:	46bb      	mov	fp, r7
10002bd0:	46b2      	mov	sl, r6
10002bd2:	46a9      	mov	r9, r5
10002bd4:	46a0      	mov	r8, r4
10002bd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U,
10002bd8:	9b24      	ldr	r3, [sp, #144]	; 0x90
10002bda:	075b      	lsls	r3, r3, #29
10002bdc:	d40e      	bmi.n	10002bfc <_ftoa+0x1ec>
10002bde:	2203      	movs	r2, #3
10002be0:	4b69      	ldr	r3, [pc, #420]	; (10002d88 <_ftoa+0x378>)
10002be2:	9924      	ldr	r1, [sp, #144]	; 0x90
10002be4:	9201      	str	r2, [sp, #4]
10002be6:	9103      	str	r1, [sp, #12]
10002be8:	9923      	ldr	r1, [sp, #140]	; 0x8c
10002bea:	9102      	str	r1, [sp, #8]
    return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
10002bec:	9300      	str	r3, [sp, #0]
10002bee:	4658      	mov	r0, fp
10002bf0:	464b      	mov	r3, r9
10002bf2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
10002bf4:	9907      	ldr	r1, [sp, #28]
10002bf6:	f7ff fbb7 	bl	10002368 <_out_rev>
10002bfa:	e7e6      	b.n	10002bca <_ftoa+0x1ba>
        return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U,
10002bfc:	2204      	movs	r2, #4
10002bfe:	4b63      	ldr	r3, [pc, #396]	; (10002d8c <_ftoa+0x37c>)
10002c00:	e7ef      	b.n	10002be2 <_ftoa+0x1d2>
        value = 0 - value;
10002c02:	003b      	movs	r3, r7
10002c04:	0032      	movs	r2, r6
10002c06:	2000      	movs	r0, #0
10002c08:	2100      	movs	r1, #0
10002c0a:	f7fd fe10 	bl	1000082e <__wrap___aeabi_dsub>
        negative = true;
10002c0e:	2301      	movs	r3, #1
        value = 0 - value;
10002c10:	0006      	movs	r6, r0
10002c12:	000f      	movs	r7, r1
        negative = true;
10002c14:	930d      	str	r3, [sp, #52]	; 0x34
10002c16:	e744      	b.n	10002aa2 <_ftoa+0x92>
        return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
10002c18:	9b24      	ldr	r3, [sp, #144]	; 0x90
10002c1a:	9303      	str	r3, [sp, #12]
10002c1c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
10002c1e:	9302      	str	r3, [sp, #8]
10002c20:	2304      	movs	r3, #4
10002c22:	9301      	str	r3, [sp, #4]
10002c24:	4b5a      	ldr	r3, [pc, #360]	; (10002d90 <_ftoa+0x380>)
10002c26:	e7e1      	b.n	10002bec <_ftoa+0x1dc>
        diff = value - (double) whole;
10002c28:	0028      	movs	r0, r5
10002c2a:	f7fd fe8b 	bl	10000944 <__wrap___aeabi_i2d>
10002c2e:	0002      	movs	r2, r0
10002c30:	000b      	movs	r3, r1
10002c32:	0030      	movs	r0, r6
10002c34:	0039      	movs	r1, r7
10002c36:	f7fd fdfa 	bl	1000082e <__wrap___aeabi_dsub>
        if (!((diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
10002c3a:	4b52      	ldr	r3, [pc, #328]	; (10002d84 <_ftoa+0x374>)
10002c3c:	2200      	movs	r2, #0
        diff = value - (double) whole;
10002c3e:	0006      	movs	r6, r0
10002c40:	000f      	movs	r7, r1
        if (!((diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
10002c42:	f7fd fe51 	bl	100008e8 <__wrap___aeabi_dcmplt>
10002c46:	ab0e      	add	r3, sp, #56	; 0x38
10002c48:	4698      	mov	r8, r3
10002c4a:	2800      	cmp	r0, #0
10002c4c:	d10a      	bne.n	10002c64 <_ftoa+0x254>
10002c4e:	2200      	movs	r2, #0
10002c50:	0030      	movs	r0, r6
10002c52:	0039      	movs	r1, r7
10002c54:	4b4b      	ldr	r3, [pc, #300]	; (10002d84 <_ftoa+0x374>)
10002c56:	f7fd fe5d 	bl	10000914 <__wrap___aeabi_dcmpgt>
10002c5a:	2800      	cmp	r0, #0
10002c5c:	d102      	bne.n	10002c64 <_ftoa+0x254>
10002c5e:	07eb      	lsls	r3, r5, #31
10002c60:	d500      	bpl.n	10002c64 <_ftoa+0x254>
            ++whole;
10002c62:	3501      	adds	r5, #1
    while (len < PICO_PRINTF_FTOA_BUFFER_SIZE) {
10002c64:	2c20      	cmp	r4, #32
10002c66:	d094      	beq.n	10002b92 <_ftoa+0x182>
        buf[len++] = (char) (48 + (whole % 10));
10002c68:	aa08      	add	r2, sp, #32
10002c6a:	4694      	mov	ip, r2
10002c6c:	2317      	movs	r3, #23
10002c6e:	0028      	movs	r0, r5
10002c70:	4463      	add	r3, ip
10002c72:	210a      	movs	r1, #10
10002c74:	3401      	adds	r4, #1
10002c76:	191e      	adds	r6, r3, r4
10002c78:	f7fd fb50 	bl	1000031c <__wrap___aeabi_idiv>
10002c7c:	3130      	adds	r1, #48	; 0x30
        if (!(whole /= 10)) {
10002c7e:	0028      	movs	r0, r5
        buf[len++] = (char) (48 + (whole % 10));
10002c80:	7031      	strb	r1, [r6, #0]
        if (!(whole /= 10)) {
10002c82:	210a      	movs	r1, #10
10002c84:	f7fd fb4a 	bl	1000031c <__wrap___aeabi_idiv>
10002c88:	1e05      	subs	r5, r0, #0
10002c8a:	d1eb      	bne.n	10002c64 <_ftoa+0x254>
    if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
10002c8c:	2303      	movs	r3, #3
10002c8e:	9a24      	ldr	r2, [sp, #144]	; 0x90
10002c90:	4013      	ands	r3, r2
10002c92:	2b01      	cmp	r3, #1
10002c94:	d01b      	beq.n	10002cce <_ftoa+0x2be>
    if (len < PICO_PRINTF_FTOA_BUFFER_SIZE) {
10002c96:	2c20      	cmp	r4, #32
10002c98:	d100      	bne.n	10002c9c <_ftoa+0x28c>
10002c9a:	e780      	b.n	10002b9e <_ftoa+0x18e>
        if (negative) {
10002c9c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
10002c9e:	2b00      	cmp	r3, #0
10002ca0:	d035      	beq.n	10002d0e <_ftoa+0x2fe>
            buf[len++] = '-';
10002ca2:	222d      	movs	r2, #45	; 0x2d
10002ca4:	4641      	mov	r1, r8
10002ca6:	1c63      	adds	r3, r4, #1
10002ca8:	550a      	strb	r2, [r1, r4]
10002caa:	e779      	b.n	10002ba0 <_ftoa+0x190>
    } else if (diff < 0.5) {
10002cac:	2200      	movs	r2, #0
10002cae:	980a      	ldr	r0, [sp, #40]	; 0x28
10002cb0:	990b      	ldr	r1, [sp, #44]	; 0x2c
10002cb2:	4b34      	ldr	r3, [pc, #208]	; (10002d84 <_ftoa+0x374>)
10002cb4:	f7fd fe18 	bl	100008e8 <__wrap___aeabi_dcmplt>
10002cb8:	2800      	cmp	r0, #0
10002cba:	d000      	beq.n	10002cbe <_ftoa+0x2ae>
10002cbc:	e746      	b.n	10002b4c <_ftoa+0x13c>
    } else if ((frac == 0U) || (frac & 1U)) {
10002cbe:	4653      	mov	r3, sl
10002cc0:	2b00      	cmp	r3, #0
10002cc2:	d151      	bne.n	10002d68 <_ftoa+0x358>
        ++frac;
10002cc4:	2301      	movs	r3, #1
10002cc6:	469c      	mov	ip, r3
10002cc8:	44e2      	add	sl, ip
10002cca:	e73f      	b.n	10002b4c <_ftoa+0x13c>
    if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
10002ccc:	2420      	movs	r4, #32
        if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
10002cce:	9b23      	ldr	r3, [sp, #140]	; 0x8c
10002cd0:	2b00      	cmp	r3, #0
10002cd2:	d0e0      	beq.n	10002c96 <_ftoa+0x286>
10002cd4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
10002cd6:	2b00      	cmp	r3, #0
10002cd8:	d103      	bne.n	10002ce2 <_ftoa+0x2d2>
10002cda:	9a24      	ldr	r2, [sp, #144]	; 0x90
10002cdc:	330c      	adds	r3, #12
10002cde:	4213      	tst	r3, r2
10002ce0:	d002      	beq.n	10002ce8 <_ftoa+0x2d8>
            width--;
10002ce2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
10002ce4:	3b01      	subs	r3, #1
10002ce6:	9323      	str	r3, [sp, #140]	; 0x8c
        while ((len < width) && (len < PICO_PRINTF_FTOA_BUFFER_SIZE)) {
10002ce8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
10002cea:	42a3      	cmp	r3, r4
10002cec:	d9d3      	bls.n	10002c96 <_ftoa+0x286>
10002cee:	ab08      	add	r3, sp, #32
10002cf0:	469c      	mov	ip, r3
10002cf2:	2217      	movs	r2, #23
            buf[len++] = '0';
10002cf4:	2330      	movs	r3, #48	; 0x30
10002cf6:	4462      	add	r2, ip
        while ((len < width) && (len < PICO_PRINTF_FTOA_BUFFER_SIZE)) {
10002cf8:	2c20      	cmp	r4, #32
10002cfa:	d100      	bne.n	10002cfe <_ftoa+0x2ee>
10002cfc:	e74f      	b.n	10002b9e <_ftoa+0x18e>
10002cfe:	9923      	ldr	r1, [sp, #140]	; 0x8c
            buf[len++] = '0';
10002d00:	3401      	adds	r4, #1
10002d02:	5513      	strb	r3, [r2, r4]
        while ((len < width) && (len < PICO_PRINTF_FTOA_BUFFER_SIZE)) {
10002d04:	428c      	cmp	r4, r1
10002d06:	d0c6      	beq.n	10002c96 <_ftoa+0x286>
10002d08:	2c20      	cmp	r4, #32
10002d0a:	d1f8      	bne.n	10002cfe <_ftoa+0x2ee>
10002d0c:	e747      	b.n	10002b9e <_ftoa+0x18e>
        } else if (flags & FLAGS_PLUS) {
10002d0e:	9b24      	ldr	r3, [sp, #144]	; 0x90
10002d10:	075b      	lsls	r3, r3, #29
10002d12:	d424      	bmi.n	10002d5e <_ftoa+0x34e>
        } else if (flags & FLAGS_SPACE) {
10002d14:	9a24      	ldr	r2, [sp, #144]	; 0x90
10002d16:	0023      	movs	r3, r4
10002d18:	0712      	lsls	r2, r2, #28
10002d1a:	d400      	bmi.n	10002d1e <_ftoa+0x30e>
10002d1c:	e740      	b.n	10002ba0 <_ftoa+0x190>
            buf[len++] = ' ';
10002d1e:	2220      	movs	r2, #32
10002d20:	4641      	mov	r1, r8
10002d22:	3301      	adds	r3, #1
10002d24:	550a      	strb	r2, [r1, r4]
10002d26:	e73b      	b.n	10002ba0 <_ftoa+0x190>
        while ((len < PICO_PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
10002d28:	4657      	mov	r7, sl
10002d2a:	9d08      	ldr	r5, [sp, #32]
10002d2c:	2c20      	cmp	r4, #32
10002d2e:	d100      	bne.n	10002d32 <_ftoa+0x322>
10002d30:	e72d      	b.n	10002b8e <_ftoa+0x17e>
10002d32:	0022      	movs	r2, r4
            buf[len++] = '0';
10002d34:	2130      	movs	r1, #48	; 0x30
10002d36:	4640      	mov	r0, r8
        while ((len < PICO_PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
10002d38:	2f00      	cmp	r7, #0
10002d3a:	d009      	beq.n	10002d50 <_ftoa+0x340>
            buf[len++] = '0';
10002d3c:	3201      	adds	r2, #1
10002d3e:	54b1      	strb	r1, [r6, r2]
        while ((len < PICO_PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
10002d40:	2a20      	cmp	r2, #32
10002d42:	d100      	bne.n	10002d46 <_ftoa+0x336>
10002d44:	e723      	b.n	10002b8e <_ftoa+0x17e>
10002d46:	43d3      	mvns	r3, r2
10002d48:	191b      	adds	r3, r3, r4
10002d4a:	181b      	adds	r3, r3, r0
10002d4c:	2b00      	cmp	r3, #0
10002d4e:	d1f5      	bne.n	10002d3c <_ftoa+0x32c>
            buf[len++] = '.';
10002d50:	ab0e      	add	r3, sp, #56	; 0x38
10002d52:	4698      	mov	r8, r3
10002d54:	232e      	movs	r3, #46	; 0x2e
10002d56:	4641      	mov	r1, r8
10002d58:	1c54      	adds	r4, r2, #1
10002d5a:	548b      	strb	r3, [r1, r2]
10002d5c:	e782      	b.n	10002c64 <_ftoa+0x254>
            buf[len++] = '+';  // ignore the space if the '+' exists
10002d5e:	222b      	movs	r2, #43	; 0x2b
10002d60:	4641      	mov	r1, r8
10002d62:	1c63      	adds	r3, r4, #1
10002d64:	550a      	strb	r2, [r1, r4]
10002d66:	e71b      	b.n	10002ba0 <_ftoa+0x190>
    } else if ((frac == 0U) || (frac & 1U)) {
10002d68:	07db      	lsls	r3, r3, #31
10002d6a:	d400      	bmi.n	10002d6e <_ftoa+0x35e>
10002d6c:	e6ee      	b.n	10002b4c <_ftoa+0x13c>
10002d6e:	e7a9      	b.n	10002cc4 <_ftoa+0x2b4>
10002d70:	ffefffff 	.word	0xffefffff
10002d74:	7fefffff 	.word	0x7fefffff
10002d78:	41cdcd65 	.word	0x41cdcd65
10002d7c:	c1cdcd65 	.word	0xc1cdcd65
10002d80:	10010608 	.word	0x10010608
10002d84:	3fe00000 	.word	0x3fe00000
10002d88:	1001040c 	.word	0x1001040c
10002d8c:	10010410 	.word	0x10010410
10002d90:	1001041c 	.word	0x1001041c
        return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
10002d94:	9b24      	ldr	r3, [sp, #144]	; 0x90
10002d96:	9303      	str	r3, [sp, #12]
10002d98:	9b23      	ldr	r3, [sp, #140]	; 0x8c
10002d9a:	9302      	str	r3, [sp, #8]
10002d9c:	2303      	movs	r3, #3
10002d9e:	9301      	str	r3, [sp, #4]
10002da0:	4b00      	ldr	r3, [pc, #0]	; (10002da4 <_ftoa+0x394>)
10002da2:	e723      	b.n	10002bec <_ftoa+0x1dc>
10002da4:	10010418 	.word	0x10010418

10002da8 <_vsnprintf>:

#endif  // PICO_PRINTF_SUPPORT_EXPONENTIAL
#endif  // PICO_PRINTF_SUPPORT_FLOAT

// internal vsnprintf
static int _vsnprintf(out_fct_type out, char *buffer, const size_t maxlen, const char *format, va_list va) {
10002da8:	b5f0      	push	{r4, r5, r6, r7, lr}
10002daa:	46de      	mov	lr, fp
10002dac:	464e      	mov	r6, r9
10002dae:	4657      	mov	r7, sl
10002db0:	4645      	mov	r5, r8
10002db2:	b5e0      	push	{r5, r6, r7, lr}
10002db4:	b09f      	sub	sp, #124	; 0x7c
10002db6:	001c      	movs	r4, r3
10002db8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
10002dba:	4691      	mov	r9, r2
10002dbc:	9309      	str	r3, [sp, #36]	; 0x24
#if !PICO_PRINTF_ALWAYS_INCLUDED
    lazy_vsnprintf = _vsnprintf;
10002dbe:	4ac9      	ldr	r2, [pc, #804]	; (100030e4 <_vsnprintf+0x33c>)
10002dc0:	4bc9      	ldr	r3, [pc, #804]	; (100030e8 <_vsnprintf+0x340>)
static int _vsnprintf(out_fct_type out, char *buffer, const size_t maxlen, const char *format, va_list va) {
10002dc2:	468b      	mov	fp, r1
10002dc4:	9008      	str	r0, [sp, #32]
    lazy_vsnprintf = _vsnprintf;
10002dc6:	601a      	str	r2, [r3, #0]
#endif
    unsigned int flags, width, precision, n;
    size_t idx = 0U;

    if (!buffer) {
10002dc8:	2900      	cmp	r1, #0
10002dca:	d100      	bne.n	10002dce <_vsnprintf+0x26>
10002dcc:	e218      	b.n	10003200 <_vsnprintf+0x458>
        // use null output function
        out = _out_null;
    }

    while (*format) {
10002dce:	2300      	movs	r3, #0
10002dd0:	7820      	ldrb	r0, [r4, #0]
10002dd2:	469a      	mov	sl, r3
10002dd4:	2800      	cmp	r0, #0
10002dd6:	d100      	bne.n	10002dda <_vsnprintf+0x32>
10002dd8:	e21a      	b.n	10003210 <_vsnprintf+0x468>
10002dda:	0026      	movs	r6, r4
10002ddc:	001d      	movs	r5, r3
10002dde:	465c      	mov	r4, fp
10002de0:	e00a      	b.n	10002df8 <_vsnprintf+0x50>
                out('%', buffer, idx++, maxlen);
                format++;
                break;

            default :
                out(*format, buffer, idx++, maxlen);
10002de2:	002a      	movs	r2, r5
10002de4:	1c6f      	adds	r7, r5, #1
10002de6:	464b      	mov	r3, r9
10002de8:	9d08      	ldr	r5, [sp, #32]
10002dea:	0021      	movs	r1, r4
10002dec:	47a8      	blx	r5
10002dee:	003d      	movs	r5, r7
                format++;
10002df0:	3601      	adds	r6, #1
    while (*format) {
10002df2:	7830      	ldrb	r0, [r6, #0]
10002df4:	2800      	cmp	r0, #0
10002df6:	d070      	beq.n	10002eda <_vsnprintf+0x132>
        if (*format != '%') {
10002df8:	2825      	cmp	r0, #37	; 0x25
10002dfa:	d1f2      	bne.n	10002de2 <_vsnprintf+0x3a>
                    flags |= FLAGS_HASH;
10002dfc:	2310      	movs	r3, #16
10002dfe:	469b      	mov	fp, r3
                    flags |= FLAGS_SPACE;
10002e00:	3b08      	subs	r3, #8
10002e02:	469a      	mov	sl, r3
                    flags |= FLAGS_PLUS;
10002e04:	3b04      	subs	r3, #4
10002e06:	4698      	mov	r8, r3
                    flags |= FLAGS_LEFT;
10002e08:	3b02      	subs	r3, #2
        flags = 0U;
10002e0a:	2100      	movs	r1, #0
                    flags |= FLAGS_LEFT;
10002e0c:	469c      	mov	ip, r3
            format++;
10002e0e:	1c72      	adds	r2, r6, #1
            switch (*format) {
10002e10:	7810      	ldrb	r0, [r2, #0]
10002e12:	0016      	movs	r6, r2
10002e14:	0003      	movs	r3, r0
10002e16:	3b20      	subs	r3, #32
10002e18:	b2db      	uxtb	r3, r3
10002e1a:	2b10      	cmp	r3, #16
10002e1c:	d803      	bhi.n	10002e26 <_vsnprintf+0x7e>
10002e1e:	4fb3      	ldr	r7, [pc, #716]	; (100030ec <_vsnprintf+0x344>)
10002e20:	009b      	lsls	r3, r3, #2
10002e22:	58fb      	ldr	r3, [r7, r3]
10002e24:	469f      	mov	pc, r3
        if (_is_digit(*format)) {
10002e26:	0003      	movs	r3, r0
10002e28:	3b30      	subs	r3, #48	; 0x30
10002e2a:	2b09      	cmp	r3, #9
10002e2c:	d932      	bls.n	10002e94 <_vsnprintf+0xec>
        width = 0U;
10002e2e:	2300      	movs	r3, #0
10002e30:	930a      	str	r3, [sp, #40]	; 0x28
        } else if (*format == '*') {
10002e32:	282a      	cmp	r0, #42	; 0x2a
10002e34:	d068      	beq.n	10002f08 <_vsnprintf+0x160>
        precision = 0U;
10002e36:	2300      	movs	r3, #0
10002e38:	4698      	mov	r8, r3
        if (*format == '.') {
10002e3a:	282e      	cmp	r0, #46	; 0x2e
10002e3c:	d03e      	beq.n	10002ebc <_vsnprintf+0x114>
        switch (*format) {
10002e3e:	0003      	movs	r3, r0
10002e40:	3b68      	subs	r3, #104	; 0x68
10002e42:	b2db      	uxtb	r3, r3
10002e44:	2b12      	cmp	r3, #18
10002e46:	d81c      	bhi.n	10002e82 <_vsnprintf+0xda>
10002e48:	4aa9      	ldr	r2, [pc, #676]	; (100030f0 <_vsnprintf+0x348>)
10002e4a:	009b      	lsls	r3, r3, #2
10002e4c:	58d3      	ldr	r3, [r2, r3]
10002e4e:	469f      	mov	pc, r3
                    flags |= FLAGS_ZEROPAD;
10002e50:	2301      	movs	r3, #1
10002e52:	3201      	adds	r2, #1
10002e54:	4319      	orrs	r1, r3
        } while (n);
10002e56:	e7db      	b.n	10002e10 <_vsnprintf+0x68>
                    flags |= FLAGS_LEFT;
10002e58:	4663      	mov	r3, ip
10002e5a:	3201      	adds	r2, #1
10002e5c:	4319      	orrs	r1, r3
        } while (n);
10002e5e:	e7d7      	b.n	10002e10 <_vsnprintf+0x68>
                    flags |= FLAGS_PLUS;
10002e60:	4643      	mov	r3, r8
10002e62:	3201      	adds	r2, #1
10002e64:	4319      	orrs	r1, r3
        } while (n);
10002e66:	e7d3      	b.n	10002e10 <_vsnprintf+0x68>
                    flags |= FLAGS_HASH;
10002e68:	465b      	mov	r3, fp
10002e6a:	3201      	adds	r2, #1
10002e6c:	4319      	orrs	r1, r3
        } while (n);
10002e6e:	e7cf      	b.n	10002e10 <_vsnprintf+0x68>
                    flags |= FLAGS_SPACE;
10002e70:	4653      	mov	r3, sl
10002e72:	3201      	adds	r2, #1
10002e74:	4319      	orrs	r1, r3
        } while (n);
10002e76:	e7cb      	b.n	10002e10 <_vsnprintf+0x68>
                flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
10002e78:	2380      	movs	r3, #128	; 0x80
10002e7a:	005b      	lsls	r3, r3, #1
        switch (*format) {
10002e7c:	7870      	ldrb	r0, [r6, #1]
                flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
10002e7e:	4319      	orrs	r1, r3
                format++;
10002e80:	3601      	adds	r6, #1
        switch (*format) {
10002e82:	0003      	movs	r3, r0
10002e84:	3b25      	subs	r3, #37	; 0x25
10002e86:	b2db      	uxtb	r3, r3
10002e88:	2b53      	cmp	r3, #83	; 0x53
10002e8a:	d8aa      	bhi.n	10002de2 <_vsnprintf+0x3a>
10002e8c:	4a99      	ldr	r2, [pc, #612]	; (100030f4 <_vsnprintf+0x34c>)
10002e8e:	009b      	lsls	r3, r3, #2
10002e90:	58d3      	ldr	r3, [r2, r3]
10002e92:	469f      	mov	pc, r3
    unsigned int i = 0U;
10002e94:	2700      	movs	r7, #0
10002e96:	0003      	movs	r3, r0
        i = i * 10U + (unsigned int) (*((*str)++) - '0');
10002e98:	00b8      	lsls	r0, r7, #2
10002e9a:	19c0      	adds	r0, r0, r7
10002e9c:	3601      	adds	r6, #1
10002e9e:	0040      	lsls	r0, r0, #1
10002ea0:	18c0      	adds	r0, r0, r3
    while (_is_digit(**str)) {
10002ea2:	7833      	ldrb	r3, [r6, #0]
        i = i * 10U + (unsigned int) (*((*str)++) - '0');
10002ea4:	3830      	subs	r0, #48	; 0x30
    while (_is_digit(**str)) {
10002ea6:	001a      	movs	r2, r3
10002ea8:	3a30      	subs	r2, #48	; 0x30
        i = i * 10U + (unsigned int) (*((*str)++) - '0');
10002eaa:	0007      	movs	r7, r0
    while (_is_digit(**str)) {
10002eac:	2a09      	cmp	r2, #9
10002eae:	d9f3      	bls.n	10002e98 <_vsnprintf+0xf0>
10002eb0:	900a      	str	r0, [sp, #40]	; 0x28
10002eb2:	0018      	movs	r0, r3
        precision = 0U;
10002eb4:	2300      	movs	r3, #0
10002eb6:	4698      	mov	r8, r3
        if (*format == '.') {
10002eb8:	282e      	cmp	r0, #46	; 0x2e
10002eba:	d1c0      	bne.n	10002e3e <_vsnprintf+0x96>
            flags |= FLAGS_PRECISION;
10002ebc:	2380      	movs	r3, #128	; 0x80
            if (_is_digit(*format)) {
10002ebe:	7870      	ldrb	r0, [r6, #1]
            flags |= FLAGS_PRECISION;
10002ec0:	00db      	lsls	r3, r3, #3
10002ec2:	4319      	orrs	r1, r3
            if (_is_digit(*format)) {
10002ec4:	0003      	movs	r3, r0
10002ec6:	3b30      	subs	r3, #48	; 0x30
            format++;
10002ec8:	1c72      	adds	r2, r6, #1
            if (_is_digit(*format)) {
10002eca:	2b09      	cmp	r3, #9
10002ecc:	d800      	bhi.n	10002ed0 <_vsnprintf+0x128>
10002ece:	e1a1      	b.n	10003214 <_vsnprintf+0x46c>
            } else if (*format == '*') {
10002ed0:	282a      	cmp	r0, #42	; 0x2a
10002ed2:	d100      	bne.n	10002ed6 <_vsnprintf+0x12e>
10002ed4:	e1b2      	b.n	1000323c <_vsnprintf+0x494>
            format++;
10002ed6:	0016      	movs	r6, r2
10002ed8:	e7b1      	b.n	10002e3e <_vsnprintf+0x96>

    // termination
    out((char) 0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);

    // return written chars without terminating \0
    return (int) idx;
10002eda:	46a3      	mov	fp, r4
10002edc:	46aa      	mov	sl, r5
10002ede:	002c      	movs	r4, r5
    out((char) 0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
10002ee0:	45d1      	cmp	r9, sl
10002ee2:	d803      	bhi.n	10002eec <_vsnprintf+0x144>
10002ee4:	2301      	movs	r3, #1
10002ee6:	425b      	negs	r3, r3
10002ee8:	444b      	add	r3, r9
10002eea:	469a      	mov	sl, r3
10002eec:	464b      	mov	r3, r9
10002eee:	4652      	mov	r2, sl
10002ef0:	4659      	mov	r1, fp
10002ef2:	2000      	movs	r0, #0
10002ef4:	9d08      	ldr	r5, [sp, #32]
10002ef6:	47a8      	blx	r5
}
10002ef8:	0020      	movs	r0, r4
10002efa:	b01f      	add	sp, #124	; 0x7c
10002efc:	bcf0      	pop	{r4, r5, r6, r7}
10002efe:	46bb      	mov	fp, r7
10002f00:	46b2      	mov	sl, r6
10002f02:	46a9      	mov	r9, r5
10002f04:	46a0      	mov	r8, r4
10002f06:	bdf0      	pop	{r4, r5, r6, r7, pc}
            const int w = va_arg(va, int);
10002f08:	9b09      	ldr	r3, [sp, #36]	; 0x24
10002f0a:	cb40      	ldmia	r3!, {r6}
10002f0c:	960a      	str	r6, [sp, #40]	; 0x28
            if (w < 0) {
10002f0e:	2e00      	cmp	r6, #0
10002f10:	db03      	blt.n	10002f1a <_vsnprintf+0x172>
        if (*format == '.') {
10002f12:	7850      	ldrb	r0, [r2, #1]
            const int w = va_arg(va, int);
10002f14:	9309      	str	r3, [sp, #36]	; 0x24
            format++;
10002f16:	1c56      	adds	r6, r2, #1
10002f18:	e78d      	b.n	10002e36 <_vsnprintf+0x8e>
                flags |= FLAGS_LEFT;    // reverse padding
10002f1a:	3828      	subs	r0, #40	; 0x28
10002f1c:	4301      	orrs	r1, r0
                width = (unsigned int) -w;
10002f1e:	4270      	negs	r0, r6
10002f20:	900a      	str	r0, [sp, #40]	; 0x28
            const int w = va_arg(va, int);
10002f22:	9309      	str	r3, [sp, #36]	; 0x24
        if (*format == '.') {
10002f24:	7850      	ldrb	r0, [r2, #1]
            format++;
10002f26:	1c56      	adds	r6, r2, #1
10002f28:	e785      	b.n	10002e36 <_vsnprintf+0x8e>
                if (*format == 'x' || *format == 'X') {
10002f2a:	2878      	cmp	r0, #120	; 0x78
10002f2c:	d100      	bne.n	10002f30 <_vsnprintf+0x188>
10002f2e:	e1df      	b.n	100032f0 <_vsnprintf+0x548>
10002f30:	2858      	cmp	r0, #88	; 0x58
10002f32:	d100      	bne.n	10002f36 <_vsnprintf+0x18e>
10002f34:	e24c      	b.n	100033d0 <_vsnprintf+0x628>
                } else if (*format == 'o') {
10002f36:	286f      	cmp	r0, #111	; 0x6f
10002f38:	d100      	bne.n	10002f3c <_vsnprintf+0x194>
10002f3a:	e34f      	b.n	100035dc <_vsnprintf+0x834>
                } else if (*format == 'b') {
10002f3c:	2862      	cmp	r0, #98	; 0x62
10002f3e:	d101      	bne.n	10002f44 <_vsnprintf+0x19c>
10002f40:	f000 fc30 	bl	100037a4 <_vsnprintf+0x9fc>
                    flags &= ~FLAGS_HASH;   // no hash for dec format
10002f44:	2310      	movs	r3, #16
10002f46:	000a      	movs	r2, r1
10002f48:	439a      	bics	r2, r3
10002f4a:	920b      	str	r2, [sp, #44]	; 0x2c
                if ((*format != 'i') && (*format != 'd')) {
10002f4c:	2869      	cmp	r0, #105	; 0x69
10002f4e:	d001      	beq.n	10002f54 <_vsnprintf+0x1ac>
10002f50:	f000 fca9 	bl	100038a6 <_vsnprintf+0xafe>
                    base = 10U;
10002f54:	230a      	movs	r3, #10
10002f56:	930c      	str	r3, [sp, #48]	; 0x30
                if (flags & FLAGS_PRECISION) {
10002f58:	054b      	lsls	r3, r1, #21
10002f5a:	d500      	bpl.n	10002f5e <_vsnprintf+0x1b6>
10002f5c:	e1d0      	b.n	10003300 <_vsnprintf+0x558>
                    if (flags & FLAGS_LONG_LONG) {
10002f5e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
10002f60:	2380      	movs	r3, #128	; 0x80
10002f62:	0011      	movs	r1, r2
10002f64:	009b      	lsls	r3, r3, #2
10002f66:	4019      	ands	r1, r3
10002f68:	468b      	mov	fp, r1
10002f6a:	421a      	tst	r2, r3
10002f6c:	d000      	beq.n	10002f70 <_vsnprintf+0x1c8>
10002f6e:	e2a1      	b.n	100034b4 <_vsnprintf+0x70c>
                    } else if (flags & FLAGS_LONG) {
10002f70:	2380      	movs	r3, #128	; 0x80
10002f72:	0011      	movs	r1, r2
10002f74:	005b      	lsls	r3, r3, #1
10002f76:	4019      	ands	r1, r3
10002f78:	468a      	mov	sl, r1
10002f7a:	421a      	tst	r2, r3
10002f7c:	d000      	beq.n	10002f80 <_vsnprintf+0x1d8>
10002f7e:	e3b6      	b.n	100036ee <_vsnprintf+0x946>
10002f80:	0013      	movs	r3, r2
                        const int value = (flags & FLAGS_CHAR) ? (char) va_arg(va, int) : (flags & FLAGS_SHORT)
10002f82:	065b      	lsls	r3, r3, #25
10002f84:	d500      	bpl.n	10002f88 <_vsnprintf+0x1e0>
10002f86:	e2ed      	b.n	10003564 <_vsnprintf+0x7bc>
10002f88:	0013      	movs	r3, r2
                                                                                          ? (short int) va_arg(va, int)
10002f8a:	9909      	ldr	r1, [sp, #36]	; 0x24
                                                                                          : va_arg(va, int);
10002f8c:	061b      	lsls	r3, r3, #24
10002f8e:	d401      	bmi.n	10002f94 <_vsnprintf+0x1ec>
10002f90:	f000 fc76 	bl	10003880 <_vsnprintf+0xad8>
                                                                                          ? (short int) va_arg(va, int)
10002f94:	c908      	ldmia	r1!, {r3}
                                                                                          : va_arg(va, int);
10002f96:	b21b      	sxth	r3, r3
                        idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int) (value > 0 ? value : 0 - value),
10002f98:	17d8      	asrs	r0, r3, #31
10002f9a:	181a      	adds	r2, r3, r0
10002f9c:	4042      	eors	r2, r0
10002f9e:	b292      	uxth	r2, r2
                                                                                          ? (short int) va_arg(va, int)
10002fa0:	9109      	str	r1, [sp, #36]	; 0x24
                        idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int) (value > 0 ? value : 0 - value),
10002fa2:	4693      	mov	fp, r2
10002fa4:	0fda      	lsrs	r2, r3, #31
10002fa6:	9212      	str	r2, [sp, #72]	; 0x48
    if (!value) {
10002fa8:	2b00      	cmp	r3, #0
10002faa:	d109      	bne.n	10002fc0 <_vsnprintf+0x218>
    if (!(flags & FLAGS_PRECISION) || value) {
10002fac:	2380      	movs	r3, #128	; 0x80
        flags &= ~FLAGS_HASH;
10002fae:	2210      	movs	r2, #16
    if (!(flags & FLAGS_PRECISION) || value) {
10002fb0:	990b      	ldr	r1, [sp, #44]	; 0x2c
10002fb2:	00db      	lsls	r3, r3, #3
10002fb4:	400b      	ands	r3, r1
        flags &= ~FLAGS_HASH;
10002fb6:	4391      	bics	r1, r2
10002fb8:	910b      	str	r1, [sp, #44]	; 0x2c
    if (!(flags & FLAGS_PRECISION) || value) {
10002fba:	2b00      	cmp	r3, #0
10002fbc:	d000      	beq.n	10002fc0 <_vsnprintf+0x218>
10002fbe:	e2e4      	b.n	1000358a <_vsnprintf+0x7e2>
10002fc0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
10002fc2:	2361      	movs	r3, #97	; 0x61
10002fc4:	0692      	lsls	r2, r2, #26
10002fc6:	d500      	bpl.n	10002fca <_vsnprintf+0x222>
10002fc8:	2341      	movs	r3, #65	; 0x41
10002fca:	a90e      	add	r1, sp, #56	; 0x38
10002fcc:	221f      	movs	r2, #31
10002fce:	468c      	mov	ip, r1
10002fd0:	b2db      	uxtb	r3, r3
10002fd2:	4462      	add	r2, ip
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
10002fd4:	3b0a      	subs	r3, #10
10002fd6:	465f      	mov	r7, fp
10002fd8:	9513      	str	r5, [sp, #76]	; 0x4c
10002fda:	46a3      	mov	fp, r4
10002fdc:	4655      	mov	r5, sl
10002fde:	9c0c      	ldr	r4, [sp, #48]	; 0x30
10002fe0:	46b2      	mov	sl, r6
10002fe2:	930d      	str	r3, [sp, #52]	; 0x34
10002fe4:	0016      	movs	r6, r2
10002fe6:	e00a      	b.n	10002ffe <_vsnprintf+0x256>
10002fe8:	3330      	adds	r3, #48	; 0x30
10002fea:	b2db      	uxtb	r3, r3
10002fec:	3501      	adds	r5, #1
10002fee:	5573      	strb	r3, [r6, r5]
        } while (value && (len < PICO_PRINTF_NTOA_BUFFER_SIZE));
10002ff0:	42a7      	cmp	r7, r4
10002ff2:	d200      	bcs.n	10002ff6 <_vsnprintf+0x24e>
10002ff4:	e2ed      	b.n	100035d2 <_vsnprintf+0x82a>
10002ff6:	2d20      	cmp	r5, #32
10002ff8:	d100      	bne.n	10002ffc <_vsnprintf+0x254>
10002ffa:	e2ea      	b.n	100035d2 <_vsnprintf+0x82a>
            value /= base;
10002ffc:	0007      	movs	r7, r0
            const char digit = (char) (value % base);
10002ffe:	0021      	movs	r1, r4
10003000:	0038      	movs	r0, r7
10003002:	f7fd f9b7 	bl	10000374 <__wrap___aeabi_uidiv>
10003006:	b2cb      	uxtb	r3, r1
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
10003008:	2909      	cmp	r1, #9
1000300a:	d9ed      	bls.n	10002fe8 <_vsnprintf+0x240>
1000300c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
1000300e:	4694      	mov	ip, r2
10003010:	4463      	add	r3, ip
10003012:	b2db      	uxtb	r3, r3
10003014:	e7ea      	b.n	10002fec <_vsnprintf+0x244>
                flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
10003016:	2380      	movs	r3, #128	; 0x80
10003018:	009b      	lsls	r3, r3, #2
        switch (*format) {
1000301a:	7870      	ldrb	r0, [r6, #1]
                flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
1000301c:	4319      	orrs	r1, r3
                format++;
1000301e:	3601      	adds	r6, #1
                break;
10003020:	e72f      	b.n	10002e82 <_vsnprintf+0xda>
                if (*format == 'h') {
10003022:	7870      	ldrb	r0, [r6, #1]
10003024:	2868      	cmp	r0, #104	; 0x68
10003026:	d100      	bne.n	1000302a <_vsnprintf+0x282>
10003028:	e1cd      	b.n	100033c6 <_vsnprintf+0x61e>
                flags |= FLAGS_SHORT;
1000302a:	2380      	movs	r3, #128	; 0x80
                format++;
1000302c:	3601      	adds	r6, #1
                flags |= FLAGS_SHORT;
1000302e:	4319      	orrs	r1, r3
10003030:	e727      	b.n	10002e82 <_vsnprintf+0xda>
                if (*format == 'l') {
10003032:	7870      	ldrb	r0, [r6, #1]
10003034:	286c      	cmp	r0, #108	; 0x6c
10003036:	d100      	bne.n	1000303a <_vsnprintf+0x292>
10003038:	e1bf      	b.n	100033ba <_vsnprintf+0x612>
                flags |= FLAGS_LONG;
1000303a:	2380      	movs	r3, #128	; 0x80
1000303c:	005b      	lsls	r3, r3, #1
1000303e:	4319      	orrs	r1, r3
                format++;
10003040:	3601      	adds	r6, #1
10003042:	e71e      	b.n	10002e82 <_vsnprintf+0xda>
                if (*format == 'F') flags |= FLAGS_UPPERCASE;
10003044:	2846      	cmp	r0, #70	; 0x46
10003046:	d100      	bne.n	1000304a <_vsnprintf+0x2a2>
10003048:	e19b      	b.n	10003382 <_vsnprintf+0x5da>
                idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
1000304a:	2207      	movs	r2, #7
1000304c:	9b09      	ldr	r3, [sp, #36]	; 0x24
1000304e:	9104      	str	r1, [sp, #16]
10003050:	3307      	adds	r3, #7
10003052:	4393      	bics	r3, r2
10003054:	9a0a      	ldr	r2, [sp, #40]	; 0x28
10003056:	0019      	movs	r1, r3
10003058:	9203      	str	r2, [sp, #12]
1000305a:	4642      	mov	r2, r8
1000305c:	9202      	str	r2, [sp, #8]
1000305e:	c90c      	ldmia	r1!, {r2, r3}
10003060:	9808      	ldr	r0, [sp, #32]
10003062:	9200      	str	r2, [sp, #0]
10003064:	9301      	str	r3, [sp, #4]
10003066:	9109      	str	r1, [sp, #36]	; 0x24
10003068:	002a      	movs	r2, r5
1000306a:	464b      	mov	r3, r9
1000306c:	0021      	movs	r1, r4
1000306e:	f7ff fccf 	bl	10002a10 <_ftoa>
                format++;
10003072:	3601      	adds	r6, #1
                idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
10003074:	0005      	movs	r5, r0
                break;
10003076:	e6bc      	b.n	10002df2 <_vsnprintf+0x4a>
                out('%', buffer, idx++, maxlen);
10003078:	002a      	movs	r2, r5
1000307a:	1c6f      	adds	r7, r5, #1
1000307c:	464b      	mov	r3, r9
1000307e:	9d08      	ldr	r5, [sp, #32]
10003080:	0021      	movs	r1, r4
10003082:	2025      	movs	r0, #37	; 0x25
10003084:	47a8      	blx	r5
                format++;
10003086:	3601      	adds	r6, #1
                out('%', buffer, idx++, maxlen);
10003088:	003d      	movs	r5, r7
                break;
1000308a:	e6b2      	b.n	10002df2 <_vsnprintf+0x4a>
                if (!(flags & FLAGS_LEFT)) {
1000308c:	078b      	lsls	r3, r1, #30
1000308e:	d400      	bmi.n	10003092 <_vsnprintf+0x2ea>
10003090:	e1ad      	b.n	100033ee <_vsnprintf+0x646>
                out((char) va_arg(va, int), buffer, idx++, maxlen);
10003092:	9b09      	ldr	r3, [sp, #36]	; 0x24
10003094:	002a      	movs	r2, r5
10003096:	469a      	mov	sl, r3
10003098:	1c6b      	adds	r3, r5, #1
1000309a:	4698      	mov	r8, r3
1000309c:	4653      	mov	r3, sl
1000309e:	cb01      	ldmia	r3!, {r0}
100030a0:	0021      	movs	r1, r4
100030a2:	469a      	mov	sl, r3
100030a4:	9f08      	ldr	r7, [sp, #32]
100030a6:	464b      	mov	r3, r9
100030a8:	b2c0      	uxtb	r0, r0
100030aa:	47b8      	blx	r7
                    while (l++ < width) {
100030ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
100030ae:	469c      	mov	ip, r3
100030b0:	4465      	add	r5, ip
100030b2:	2b01      	cmp	r3, #1
100030b4:	d800      	bhi.n	100030b8 <_vsnprintf+0x310>
100030b6:	e286      	b.n	100035c6 <_vsnprintf+0x81e>
100030b8:	9b08      	ldr	r3, [sp, #32]
100030ba:	4647      	mov	r7, r8
100030bc:	46b0      	mov	r8, r6
100030be:	0026      	movs	r6, r4
100030c0:	464c      	mov	r4, r9
100030c2:	4699      	mov	r9, r3
                        out(' ', buffer, idx++, maxlen);
100030c4:	003a      	movs	r2, r7
100030c6:	0023      	movs	r3, r4
100030c8:	3701      	adds	r7, #1
100030ca:	0031      	movs	r1, r6
100030cc:	2020      	movs	r0, #32
100030ce:	47c8      	blx	r9
                    while (l++ < width) {
100030d0:	42af      	cmp	r7, r5
100030d2:	d1f7      	bne.n	100030c4 <_vsnprintf+0x31c>
                out((char) va_arg(va, int), buffer, idx++, maxlen);
100030d4:	46a1      	mov	r9, r4
100030d6:	4653      	mov	r3, sl
100030d8:	0034      	movs	r4, r6
100030da:	4646      	mov	r6, r8
100030dc:	9309      	str	r3, [sp, #36]	; 0x24
                format++;
100030de:	3601      	adds	r6, #1
                break;
100030e0:	e687      	b.n	10002df2 <_vsnprintf+0x4a>
100030e2:	46c0      	nop			; (mov r8, r8)
100030e4:	10002da9 	.word	0x10002da9
100030e8:	20012728 	.word	0x20012728
100030ec:	10010424 	.word	0x10010424
100030f0:	10010468 	.word	0x10010468
100030f4:	100104b4 	.word	0x100104b4
                const char *p = va_arg(va, char*);
100030f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
100030fa:	cb04      	ldmia	r3!, {r2}
100030fc:	469b      	mov	fp, r3
                unsigned int l = _strnlen_s(p, precision ? precision : (size_t) -1);
100030fe:	4643      	mov	r3, r8
                const char *p = va_arg(va, char*);
10003100:	9209      	str	r2, [sp, #36]	; 0x24
                unsigned int l = _strnlen_s(p, precision ? precision : (size_t) -1);
10003102:	2b00      	cmp	r3, #0
10003104:	d100      	bne.n	10003108 <_vsnprintf+0x360>
10003106:	e0c6      	b.n	10003296 <_vsnprintf+0x4ee>
    for (s = str; *s && maxsize--; ++s);
10003108:	7813      	ldrb	r3, [r2, #0]
1000310a:	469c      	mov	ip, r3
1000310c:	2b00      	cmp	r3, #0
1000310e:	d100      	bne.n	10003112 <_vsnprintf+0x36a>
10003110:	e3bd      	b.n	1000388e <_vsnprintf+0xae6>
10003112:	4643      	mov	r3, r8
10003114:	3b01      	subs	r3, #1
10003116:	9a09      	ldr	r2, [sp, #36]	; 0x24
10003118:	3301      	adds	r3, #1
1000311a:	18d0      	adds	r0, r2, r3
                const char *p = va_arg(va, char*);
1000311c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
1000311e:	0013      	movs	r3, r2
10003120:	e001      	b.n	10003126 <_vsnprintf+0x37e>
    for (s = str; *s && maxsize--; ++s);
10003122:	4283      	cmp	r3, r0
10003124:	d003      	beq.n	1000312e <_vsnprintf+0x386>
10003126:	785a      	ldrb	r2, [r3, #1]
10003128:	3301      	adds	r3, #1
1000312a:	2a00      	cmp	r2, #0
1000312c:	d1f9      	bne.n	10003122 <_vsnprintf+0x37a>
    return (unsigned int) (s - str);
1000312e:	9a09      	ldr	r2, [sp, #36]	; 0x24
10003130:	970a      	str	r7, [sp, #40]	; 0x28
10003132:	1a9b      	subs	r3, r3, r2
10003134:	930b      	str	r3, [sp, #44]	; 0x2c
                if (flags & FLAGS_PRECISION) {
10003136:	2380      	movs	r3, #128	; 0x80
10003138:	000a      	movs	r2, r1
1000313a:	00db      	lsls	r3, r3, #3
1000313c:	401a      	ands	r2, r3
1000313e:	920c      	str	r2, [sp, #48]	; 0x30
10003140:	4219      	tst	r1, r3
10003142:	d004      	beq.n	1000314e <_vsnprintf+0x3a6>
                    l = (l < precision ? l : precision);
10003144:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
10003146:	4543      	cmp	r3, r8
10003148:	d901      	bls.n	1000314e <_vsnprintf+0x3a6>
1000314a:	4643      	mov	r3, r8
1000314c:	930b      	str	r3, [sp, #44]	; 0x2c
                if (!(flags & FLAGS_LEFT)) {
1000314e:	2302      	movs	r3, #2
10003150:	001a      	movs	r2, r3
10003152:	400a      	ands	r2, r1
10003154:	920d      	str	r2, [sp, #52]	; 0x34
10003156:	420b      	tst	r3, r1
10003158:	d100      	bne.n	1000315c <_vsnprintf+0x3b4>
1000315a:	e187      	b.n	1000346c <_vsnprintf+0x6c4>
                while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
1000315c:	4660      	mov	r0, ip
1000315e:	2800      	cmp	r0, #0
10003160:	d100      	bne.n	10003164 <_vsnprintf+0x3bc>
10003162:	e168      	b.n	10003436 <_vsnprintf+0x68e>
10003164:	9b0c      	ldr	r3, [sp, #48]	; 0x30
10003166:	2b00      	cmp	r3, #0
10003168:	d100      	bne.n	1000316c <_vsnprintf+0x3c4>
1000316a:	e10d      	b.n	10003388 <_vsnprintf+0x5e0>
1000316c:	44a8      	add	r8, r5
1000316e:	46c2      	mov	sl, r8
10003170:	9b09      	ldr	r3, [sp, #36]	; 0x24
10003172:	4657      	mov	r7, sl
10003174:	1b5b      	subs	r3, r3, r5
10003176:	4698      	mov	r8, r3
10003178:	9b08      	ldr	r3, [sp, #32]
1000317a:	46b2      	mov	sl, r6
    for (s = str; *s && maxsize--; ++s);
1000317c:	002a      	movs	r2, r5
1000317e:	0026      	movs	r6, r4
10003180:	464c      	mov	r4, r9
10003182:	4699      	mov	r9, r3
10003184:	e009      	b.n	1000319a <_vsnprintf+0x3f2>
                    out(*(p++), buffer, idx++, maxlen);
10003186:	0023      	movs	r3, r4
10003188:	0031      	movs	r1, r6
1000318a:	1c55      	adds	r5, r2, #1
1000318c:	47c8      	blx	r9
                while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
1000318e:	4643      	mov	r3, r8
10003190:	5d58      	ldrb	r0, [r3, r5]
10003192:	2800      	cmp	r0, #0
10003194:	d100      	bne.n	10003198 <_vsnprintf+0x3f0>
10003196:	e126      	b.n	100033e6 <_vsnprintf+0x63e>
                    out(*(p++), buffer, idx++, maxlen);
10003198:	002a      	movs	r2, r5
                while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
1000319a:	4297      	cmp	r7, r2
1000319c:	d1f3      	bne.n	10003186 <_vsnprintf+0x3de>
1000319e:	46a1      	mov	r9, r4
100031a0:	003d      	movs	r5, r7
100031a2:	0034      	movs	r4, r6
100031a4:	4656      	mov	r6, sl
                if (flags & FLAGS_LEFT) {
100031a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
100031a8:	2b00      	cmp	r3, #0
100031aa:	d000      	beq.n	100031ae <_vsnprintf+0x406>
100031ac:	e143      	b.n	10003436 <_vsnprintf+0x68e>
                const char *p = va_arg(va, char*);
100031ae:	465b      	mov	r3, fp
                format++;
100031b0:	3601      	adds	r6, #1
                const char *p = va_arg(va, char*);
100031b2:	9309      	str	r3, [sp, #36]	; 0x24
                break;
100031b4:	e61d      	b.n	10002df2 <_vsnprintf+0x4a>
                    idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long) ((uintptr_t) va_arg(va, void*)), false,
100031b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
100031b8:	001a      	movs	r2, r3
100031ba:	ca08      	ldmia	r2!, {r3}
100031bc:	4692      	mov	sl, r2
    if (!value) {
100031be:	2b00      	cmp	r3, #0
100031c0:	d048      	beq.n	10003254 <_vsnprintf+0x4ac>
                flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
100031c2:	2221      	movs	r2, #33	; 0x21
100031c4:	4311      	orrs	r1, r2
100031c6:	468b      	mov	fp, r1
100031c8:	a80e      	add	r0, sp, #56	; 0x38
100031ca:	4684      	mov	ip, r0
100031cc:	211f      	movs	r1, #31
100031ce:	4461      	add	r1, ip
100031d0:	9509      	str	r5, [sp, #36]	; 0x24
                    while (l++ < width) {
100031d2:	2200      	movs	r2, #0
            const char digit = (char) (value % base);
100031d4:	270f      	movs	r7, #15
100031d6:	46a4      	mov	ip, r4
100031d8:	000d      	movs	r5, r1
100031da:	e002      	b.n	100031e2 <_vsnprintf+0x43a>
        } while (value && (len < PICO_PRINTF_NTOA_BUFFER_SIZE));
100031dc:	2a20      	cmp	r2, #32
100031de:	d00c      	beq.n	100031fa <_vsnprintf+0x452>
            value /= base;
100031e0:	000b      	movs	r3, r1
            const char digit = (char) (value % base);
100031e2:	003c      	movs	r4, r7
100031e4:	401c      	ands	r4, r3
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
100031e6:	0020      	movs	r0, r4
100031e8:	3037      	adds	r0, #55	; 0x37
100031ea:	2c09      	cmp	r4, #9
100031ec:	d800      	bhi.n	100031f0 <_vsnprintf+0x448>
100031ee:	3807      	subs	r0, #7
100031f0:	3201      	adds	r2, #1
100031f2:	54a8      	strb	r0, [r5, r2]
            value /= base;
100031f4:	0919      	lsrs	r1, r3, #4
        } while (value && (len < PICO_PRINTF_NTOA_BUFFER_SIZE));
100031f6:	2b0f      	cmp	r3, #15
100031f8:	d8f0      	bhi.n	100031dc <_vsnprintf+0x434>
100031fa:	4664      	mov	r4, ip
100031fc:	9d09      	ldr	r5, [sp, #36]	; 0x24
100031fe:	e032      	b.n	10003266 <_vsnprintf+0x4be>
        out = _out_null;
10003200:	4bdc      	ldr	r3, [pc, #880]	; (10003574 <_vsnprintf+0x7cc>)
    while (*format) {
10003202:	7820      	ldrb	r0, [r4, #0]
        out = _out_null;
10003204:	9308      	str	r3, [sp, #32]
    while (*format) {
10003206:	2300      	movs	r3, #0
10003208:	469a      	mov	sl, r3
1000320a:	2800      	cmp	r0, #0
1000320c:	d000      	beq.n	10003210 <_vsnprintf+0x468>
1000320e:	e5e4      	b.n	10002dda <_vsnprintf+0x32>
10003210:	2400      	movs	r4, #0
10003212:	e665      	b.n	10002ee0 <_vsnprintf+0x138>
10003214:	4643      	mov	r3, r8
10003216:	0006      	movs	r6, r0
10003218:	9f0a      	ldr	r7, [sp, #40]	; 0x28
        i = i * 10U + (unsigned int) (*((*str)++) - '0');
1000321a:	0098      	lsls	r0, r3, #2
1000321c:	18c0      	adds	r0, r0, r3
1000321e:	3201      	adds	r2, #1
10003220:	0040      	lsls	r0, r0, #1
10003222:	1980      	adds	r0, r0, r6
    while (_is_digit(**str)) {
10003224:	7816      	ldrb	r6, [r2, #0]
        i = i * 10U + (unsigned int) (*((*str)++) - '0');
10003226:	0003      	movs	r3, r0
    while (_is_digit(**str)) {
10003228:	0030      	movs	r0, r6
1000322a:	3830      	subs	r0, #48	; 0x30
        i = i * 10U + (unsigned int) (*((*str)++) - '0');
1000322c:	3b30      	subs	r3, #48	; 0x30
    while (_is_digit(**str)) {
1000322e:	2809      	cmp	r0, #9
10003230:	d9f3      	bls.n	1000321a <_vsnprintf+0x472>
10003232:	0030      	movs	r0, r6
10003234:	4698      	mov	r8, r3
10003236:	0016      	movs	r6, r2
10003238:	970a      	str	r7, [sp, #40]	; 0x28
1000323a:	e600      	b.n	10002e3e <_vsnprintf+0x96>
                const int prec = (int) va_arg(va, int);
1000323c:	9b09      	ldr	r3, [sp, #36]	; 0x24
                format++;
1000323e:	3602      	adds	r6, #2
                precision = prec > 0 ? (unsigned int) prec : 0U;
10003240:	cb04      	ldmia	r3!, {r2}
10003242:	4690      	mov	r8, r2
10003244:	43d2      	mvns	r2, r2
10003246:	4640      	mov	r0, r8
10003248:	17d2      	asrs	r2, r2, #31
1000324a:	4010      	ands	r0, r2
1000324c:	4680      	mov	r8, r0
                const int prec = (int) va_arg(va, int);
1000324e:	9309      	str	r3, [sp, #36]	; 0x24
        switch (*format) {
10003250:	7830      	ldrb	r0, [r6, #0]
10003252:	e5f4      	b.n	10002e3e <_vsnprintf+0x96>
        flags &= ~FLAGS_HASH;
10003254:	2210      	movs	r2, #16
10003256:	0008      	movs	r0, r1
10003258:	4390      	bics	r0, r2
1000325a:	3211      	adds	r2, #17
1000325c:	4310      	orrs	r0, r2
1000325e:	4683      	mov	fp, r0
    size_t len = 0U;
10003260:	2200      	movs	r2, #0
    if (!(flags & FLAGS_PRECISION) || value) {
10003262:	0549      	lsls	r1, r1, #21
10003264:	d5b0      	bpl.n	100031c8 <_vsnprintf+0x420>
    return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int) base, prec, width, flags);
10003266:	465b      	mov	r3, fp
10003268:	9306      	str	r3, [sp, #24]
1000326a:	2308      	movs	r3, #8
1000326c:	9305      	str	r3, [sp, #20]
1000326e:	4643      	mov	r3, r8
10003270:	9304      	str	r3, [sp, #16]
10003272:	2310      	movs	r3, #16
10003274:	9303      	str	r3, [sp, #12]
10003276:	2300      	movs	r3, #0
10003278:	9302      	str	r3, [sp, #8]
1000327a:	ab16      	add	r3, sp, #88	; 0x58
1000327c:	9201      	str	r2, [sp, #4]
1000327e:	9300      	str	r3, [sp, #0]
10003280:	002a      	movs	r2, r5
10003282:	464b      	mov	r3, r9
10003284:	0021      	movs	r1, r4
10003286:	9808      	ldr	r0, [sp, #32]
10003288:	f7ff f8bc 	bl	10002404 <_ntoa_format>
                    idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long) ((uintptr_t) va_arg(va, void*)), false,
1000328c:	4653      	mov	r3, sl
    return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int) base, prec, width, flags);
1000328e:	0005      	movs	r5, r0
                format++;
10003290:	3601      	adds	r6, #1
                    idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long) ((uintptr_t) va_arg(va, void*)), false,
10003292:	9309      	str	r3, [sp, #36]	; 0x24
                break;
10003294:	e5ad      	b.n	10002df2 <_vsnprintf+0x4a>
    for (s = str; *s && maxsize--; ++s);
10003296:	7813      	ldrb	r3, [r2, #0]
10003298:	469c      	mov	ip, r3
1000329a:	2b00      	cmp	r3, #0
1000329c:	d100      	bne.n	100032a0 <_vsnprintf+0x4f8>
1000329e:	e2f7      	b.n	10003890 <_vsnprintf+0xae8>
100032a0:	2302      	movs	r3, #2
100032a2:	425b      	negs	r3, r3
100032a4:	e737      	b.n	10003116 <_vsnprintf+0x36e>
                if ((*format == 'g') || (*format == 'G')) flags |= FLAGS_ADAPT_EXP;
100032a6:	2320      	movs	r3, #32
100032a8:	0002      	movs	r2, r0
100032aa:	439a      	bics	r2, r3
100032ac:	2a47      	cmp	r2, #71	; 0x47
100032ae:	d104      	bne.n	100032ba <_vsnprintf+0x512>
100032b0:	2380      	movs	r3, #128	; 0x80
100032b2:	011b      	lsls	r3, r3, #4
100032b4:	4319      	orrs	r1, r3
                if ((*format == 'E') || (*format == 'G')) flags |= FLAGS_UPPERCASE;
100032b6:	2302      	movs	r3, #2
100032b8:	4398      	bics	r0, r3
100032ba:	2845      	cmp	r0, #69	; 0x45
100032bc:	d101      	bne.n	100032c2 <_vsnprintf+0x51a>
100032be:	2320      	movs	r3, #32
100032c0:	4319      	orrs	r1, r3
                idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
100032c2:	2207      	movs	r2, #7
100032c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
100032c6:	9104      	str	r1, [sp, #16]
100032c8:	3307      	adds	r3, #7
100032ca:	4393      	bics	r3, r2
100032cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
100032ce:	0019      	movs	r1, r3
100032d0:	9203      	str	r2, [sp, #12]
100032d2:	4642      	mov	r2, r8
100032d4:	9202      	str	r2, [sp, #8]
100032d6:	c90c      	ldmia	r1!, {r2, r3}
100032d8:	9808      	ldr	r0, [sp, #32]
100032da:	9200      	str	r2, [sp, #0]
100032dc:	9301      	str	r3, [sp, #4]
100032de:	9109      	str	r1, [sp, #36]	; 0x24
100032e0:	002a      	movs	r2, r5
100032e2:	464b      	mov	r3, r9
100032e4:	0021      	movs	r1, r4
100032e6:	f7ff f983 	bl	100025f0 <_etoa>
                format++;
100032ea:	3601      	adds	r6, #1
                idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
100032ec:	0005      	movs	r5, r0
                break;
100032ee:	e580      	b.n	10002df2 <_vsnprintf+0x4a>
                    base = 16U;
100032f0:	2310      	movs	r3, #16
100032f2:	930c      	str	r3, [sp, #48]	; 0x30
                    flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
100032f4:	230c      	movs	r3, #12
100032f6:	000a      	movs	r2, r1
100032f8:	439a      	bics	r2, r3
100032fa:	920b      	str	r2, [sp, #44]	; 0x2c
                if (flags & FLAGS_PRECISION) {
100032fc:	054b      	lsls	r3, r1, #21
100032fe:	d503      	bpl.n	10003308 <_vsnprintf+0x560>
                    flags &= ~FLAGS_ZEROPAD;
10003300:	2301      	movs	r3, #1
10003302:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
10003304:	439a      	bics	r2, r3
10003306:	920b      	str	r2, [sp, #44]	; 0x2c
                if ((*format == 'i') || (*format == 'd')) {
10003308:	2869      	cmp	r0, #105	; 0x69
1000330a:	d100      	bne.n	1000330e <_vsnprintf+0x566>
1000330c:	e627      	b.n	10002f5e <_vsnprintf+0x1b6>
1000330e:	2864      	cmp	r0, #100	; 0x64
10003310:	d100      	bne.n	10003314 <_vsnprintf+0x56c>
10003312:	e624      	b.n	10002f5e <_vsnprintf+0x1b6>
                    if (flags & FLAGS_LONG_LONG) {
10003314:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
10003316:	2380      	movs	r3, #128	; 0x80
10003318:	0011      	movs	r1, r2
1000331a:	009b      	lsls	r3, r3, #2
1000331c:	4019      	ands	r1, r3
1000331e:	468b      	mov	fp, r1
10003320:	421a      	tst	r2, r3
10003322:	d000      	beq.n	10003326 <_vsnprintf+0x57e>
10003324:	e166      	b.n	100035f4 <_vsnprintf+0x84c>
                    } else if (flags & FLAGS_LONG) {
10003326:	2380      	movs	r3, #128	; 0x80
10003328:	0011      	movs	r1, r2
1000332a:	005b      	lsls	r3, r3, #1
1000332c:	4019      	ands	r1, r3
1000332e:	468a      	mov	sl, r1
10003330:	421a      	tst	r2, r3
10003332:	d000      	beq.n	10003336 <_vsnprintf+0x58e>
10003334:	e239      	b.n	100037aa <_vsnprintf+0xa02>
10003336:	0013      	movs	r3, r2
                                                                        : (flags & FLAGS_SHORT)
10003338:	065b      	lsls	r3, r3, #25
1000333a:	d500      	bpl.n	1000333e <_vsnprintf+0x596>
1000333c:	e13c      	b.n	100035b8 <_vsnprintf+0x810>
1000333e:	0013      	movs	r3, r2
                                                                          : va_arg(va, unsigned int);
10003340:	061b      	lsls	r3, r3, #24
10003342:	d400      	bmi.n	10003346 <_vsnprintf+0x59e>
10003344:	e2a6      	b.n	10003894 <_vsnprintf+0xaec>
                                                                          ? (unsigned short int) va_arg(va,
10003346:	9b09      	ldr	r3, [sp, #36]	; 0x24
10003348:	cb04      	ldmia	r3!, {r2}
1000334a:	0412      	lsls	r2, r2, #16
1000334c:	0c12      	lsrs	r2, r2, #16
1000334e:	4693      	mov	fp, r2
10003350:	9309      	str	r3, [sp, #36]	; 0x24
    if (!value) {
10003352:	465b      	mov	r3, fp
10003354:	2b00      	cmp	r3, #0
10003356:	d000      	beq.n	1000335a <_vsnprintf+0x5b2>
10003358:	e19a      	b.n	10003690 <_vsnprintf+0x8e8>
        flags &= ~FLAGS_HASH;
1000335a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
1000335c:	3310      	adds	r3, #16
1000335e:	0011      	movs	r1, r2
10003360:	4399      	bics	r1, r3
10003362:	910b      	str	r1, [sp, #44]	; 0x2c
    if (!(flags & FLAGS_PRECISION) || value) {
10003364:	0552      	lsls	r2, r2, #21
10003366:	d400      	bmi.n	1000336a <_vsnprintf+0x5c2>
10003368:	e192      	b.n	10003690 <_vsnprintf+0x8e8>
    size_t len = 0U;
1000336a:	2300      	movs	r3, #0
1000336c:	469a      	mov	sl, r3
    return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int) base, prec, width, flags);
1000336e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
10003370:	9306      	str	r3, [sp, #24]
10003372:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10003374:	9305      	str	r3, [sp, #20]
10003376:	4643      	mov	r3, r8
10003378:	9304      	str	r3, [sp, #16]
1000337a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1000337c:	9303      	str	r3, [sp, #12]
1000337e:	2300      	movs	r3, #0
10003380:	e10c      	b.n	1000359c <_vsnprintf+0x7f4>
                if (*format == 'F') flags |= FLAGS_UPPERCASE;
10003382:	2320      	movs	r3, #32
10003384:	4319      	orrs	r1, r3
10003386:	e660      	b.n	1000304a <_vsnprintf+0x2a2>
10003388:	9b09      	ldr	r3, [sp, #36]	; 0x24
1000338a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1000338c:	1b5b      	subs	r3, r3, r5
1000338e:	4698      	mov	r8, r3
10003390:	464b      	mov	r3, r9
10003392:	4691      	mov	r9, r2
10003394:	001f      	movs	r7, r3
10003396:	46b2      	mov	sl, r6
10003398:	0026      	movs	r6, r4
1000339a:	9c08      	ldr	r4, [sp, #32]
                    out(*(p++), buffer, idx++, maxlen);
1000339c:	002a      	movs	r2, r5
1000339e:	003b      	movs	r3, r7
100033a0:	0031      	movs	r1, r6
100033a2:	47a0      	blx	r4
                while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
100033a4:	4643      	mov	r3, r8
                    out(*(p++), buffer, idx++, maxlen);
100033a6:	3501      	adds	r5, #1
                while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
100033a8:	5d58      	ldrb	r0, [r3, r5]
100033aa:	2800      	cmp	r0, #0
100033ac:	d1f6      	bne.n	1000339c <_vsnprintf+0x5f4>
                    out(*(p++), buffer, idx++, maxlen);
100033ae:	464a      	mov	r2, r9
100033b0:	0034      	movs	r4, r6
100033b2:	46b9      	mov	r9, r7
100033b4:	4656      	mov	r6, sl
100033b6:	920a      	str	r2, [sp, #40]	; 0x28
100033b8:	e6f5      	b.n	100031a6 <_vsnprintf+0x3fe>
                    flags |= FLAGS_LONG_LONG;
100033ba:	23c0      	movs	r3, #192	; 0xc0
100033bc:	009b      	lsls	r3, r3, #2
        switch (*format) {
100033be:	78b0      	ldrb	r0, [r6, #2]
                    flags |= FLAGS_LONG_LONG;
100033c0:	4319      	orrs	r1, r3
                    format++;
100033c2:	3602      	adds	r6, #2
100033c4:	e55d      	b.n	10002e82 <_vsnprintf+0xda>
                    flags |= FLAGS_CHAR;
100033c6:	23c0      	movs	r3, #192	; 0xc0
        switch (*format) {
100033c8:	78b0      	ldrb	r0, [r6, #2]
                    flags |= FLAGS_CHAR;
100033ca:	4319      	orrs	r1, r3
                    format++;
100033cc:	3602      	adds	r6, #2
100033ce:	e558      	b.n	10002e82 <_vsnprintf+0xda>
                    flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
100033d0:	230c      	movs	r3, #12
100033d2:	000a      	movs	r2, r1
100033d4:	439a      	bics	r2, r3
100033d6:	3314      	adds	r3, #20
100033d8:	431a      	orrs	r2, r3
                    base = 16U;
100033da:	3b10      	subs	r3, #16
                    flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
100033dc:	920b      	str	r2, [sp, #44]	; 0x2c
                    base = 16U;
100033de:	930c      	str	r3, [sp, #48]	; 0x30
                if (flags & FLAGS_PRECISION) {
100033e0:	054b      	lsls	r3, r1, #21
100033e2:	d48d      	bmi.n	10003300 <_vsnprintf+0x558>
100033e4:	e796      	b.n	10003314 <_vsnprintf+0x56c>
                    out(*(p++), buffer, idx++, maxlen);
100033e6:	46a1      	mov	r9, r4
100033e8:	0034      	movs	r4, r6
100033ea:	4656      	mov	r6, sl
100033ec:	e6db      	b.n	100031a6 <_vsnprintf+0x3fe>
                    while (l++ < width) {
100033ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
100033f0:	2a01      	cmp	r2, #1
100033f2:	d800      	bhi.n	100033f6 <_vsnprintf+0x64e>
100033f4:	e253      	b.n	1000389e <_vsnprintf+0xaf6>
100033f6:	1e6b      	subs	r3, r5, #1
100033f8:	189f      	adds	r7, r3, r2
100033fa:	9b08      	ldr	r3, [sp, #32]
100033fc:	46b0      	mov	r8, r6
100033fe:	0026      	movs	r6, r4
10003400:	464c      	mov	r4, r9
10003402:	4699      	mov	r9, r3
                        out(' ', buffer, idx++, maxlen);
10003404:	002a      	movs	r2, r5
10003406:	0023      	movs	r3, r4
10003408:	3501      	adds	r5, #1
1000340a:	0031      	movs	r1, r6
1000340c:	2020      	movs	r0, #32
1000340e:	47c8      	blx	r9
                    while (l++ < width) {
10003410:	42bd      	cmp	r5, r7
10003412:	d1f7      	bne.n	10003404 <_vsnprintf+0x65c>
10003414:	46a1      	mov	r9, r4
10003416:	0034      	movs	r4, r6
10003418:	4646      	mov	r6, r8
                out((char) va_arg(va, int), buffer, idx++, maxlen);
1000341a:	9b09      	ldr	r3, [sp, #36]	; 0x24
1000341c:	003a      	movs	r2, r7
1000341e:	cb01      	ldmia	r3!, {r0}
10003420:	0021      	movs	r1, r4
10003422:	4698      	mov	r8, r3
10003424:	1c7d      	adds	r5, r7, #1
10003426:	464b      	mov	r3, r9
10003428:	9f08      	ldr	r7, [sp, #32]
1000342a:	b2c0      	uxtb	r0, r0
1000342c:	47b8      	blx	r7
1000342e:	4643      	mov	r3, r8
                format++;
10003430:	3601      	adds	r6, #1
                out((char) va_arg(va, int), buffer, idx++, maxlen);
10003432:	9309      	str	r3, [sp, #36]	; 0x24
                break;
10003434:	e4dd      	b.n	10002df2 <_vsnprintf+0x4a>
                    while (l++ < width) {
10003436:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
10003438:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1000343a:	46a8      	mov	r8, r5
1000343c:	429a      	cmp	r2, r3
1000343e:	d800      	bhi.n	10003442 <_vsnprintf+0x69a>
10003440:	e6b5      	b.n	100031ae <_vsnprintf+0x406>
10003442:	4694      	mov	ip, r2
10003444:	4465      	add	r5, ip
10003446:	1aed      	subs	r5, r5, r3
10003448:	9b08      	ldr	r3, [sp, #32]
1000344a:	4647      	mov	r7, r8
1000344c:	46b0      	mov	r8, r6
1000344e:	0026      	movs	r6, r4
10003450:	464c      	mov	r4, r9
10003452:	4699      	mov	r9, r3
                        out(' ', buffer, idx++, maxlen);
10003454:	003a      	movs	r2, r7
10003456:	0023      	movs	r3, r4
10003458:	3701      	adds	r7, #1
1000345a:	0031      	movs	r1, r6
1000345c:	2020      	movs	r0, #32
1000345e:	47c8      	blx	r9
                    while (l++ < width) {
10003460:	42af      	cmp	r7, r5
10003462:	d1f7      	bne.n	10003454 <_vsnprintf+0x6ac>
10003464:	46a1      	mov	r9, r4
10003466:	0034      	movs	r4, r6
10003468:	4646      	mov	r6, r8
1000346a:	e6a0      	b.n	100031ae <_vsnprintf+0x406>
                    while (l++ < width) {
1000346c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
1000346e:	990a      	ldr	r1, [sp, #40]	; 0x28
10003470:	1c53      	adds	r3, r2, #1
10003472:	4291      	cmp	r1, r2
10003474:	d800      	bhi.n	10003478 <_vsnprintf+0x6d0>
10003476:	e214      	b.n	100038a2 <_vsnprintf+0xafa>
10003478:	194b      	adds	r3, r1, r5
1000347a:	1a9b      	subs	r3, r3, r2
1000347c:	001f      	movs	r7, r3
1000347e:	9b08      	ldr	r3, [sp, #32]
10003480:	46b2      	mov	sl, r6
10003482:	0026      	movs	r6, r4
10003484:	464c      	mov	r4, r9
10003486:	4699      	mov	r9, r3
                        out(' ', buffer, idx++, maxlen);
10003488:	002a      	movs	r2, r5
1000348a:	0023      	movs	r3, r4
1000348c:	3501      	adds	r5, #1
1000348e:	0031      	movs	r1, r6
10003490:	2020      	movs	r0, #32
10003492:	47c8      	blx	r9
                    while (l++ < width) {
10003494:	42bd      	cmp	r5, r7
10003496:	d1f7      	bne.n	10003488 <_vsnprintf+0x6e0>
10003498:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1000349a:	46a1      	mov	r9, r4
1000349c:	3301      	adds	r3, #1
1000349e:	930b      	str	r3, [sp, #44]	; 0x2c
100034a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
100034a2:	0034      	movs	r4, r6
100034a4:	781b      	ldrb	r3, [r3, #0]
100034a6:	4656      	mov	r6, sl
100034a8:	469c      	mov	ip, r3
                while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
100034aa:	4660      	mov	r0, ip
100034ac:	2800      	cmp	r0, #0
100034ae:	d000      	beq.n	100034b2 <_vsnprintf+0x70a>
100034b0:	e658      	b.n	10003164 <_vsnprintf+0x3bc>
100034b2:	e67c      	b.n	100031ae <_vsnprintf+0x406>
                        const long long value = va_arg(va, long long);
100034b4:	2207      	movs	r2, #7
100034b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
100034b8:	3307      	adds	r3, #7
100034ba:	4393      	bics	r3, r2
100034bc:	3201      	adds	r2, #1
100034be:	4694      	mov	ip, r2
100034c0:	449c      	add	ip, r3
100034c2:	4662      	mov	r2, ip
100034c4:	685f      	ldr	r7, [r3, #4]
100034c6:	9209      	str	r2, [sp, #36]	; 0x24
100034c8:	681a      	ldr	r2, [r3, #0]
                                              (unsigned long long) (value > 0 ? value : 0 - value), value < 0, base,
100034ca:	17fb      	asrs	r3, r7, #31
100034cc:	9310      	str	r3, [sp, #64]	; 0x40
100034ce:	9311      	str	r3, [sp, #68]	; 0x44
100034d0:	9810      	ldr	r0, [sp, #64]	; 0x40
100034d2:	9911      	ldr	r1, [sp, #68]	; 0x44
100034d4:	0003      	movs	r3, r0
100034d6:	4053      	eors	r3, r2
100034d8:	930e      	str	r3, [sp, #56]	; 0x38
100034da:	000b      	movs	r3, r1
100034dc:	407b      	eors	r3, r7
100034de:	930f      	str	r3, [sp, #60]	; 0x3c
                        const long long value = va_arg(va, long long);
100034e0:	4694      	mov	ip, r2
                                              (unsigned long long) (value > 0 ? value : 0 - value), value < 0, base,
100034e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
100034e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
100034e6:	1a12      	subs	r2, r2, r0
100034e8:	418b      	sbcs	r3, r1
100034ea:	920e      	str	r2, [sp, #56]	; 0x38
100034ec:	930f      	str	r3, [sp, #60]	; 0x3c
                        idx = _ntoa_long_long(out, buffer, idx, maxlen,
100034ee:	0ffb      	lsrs	r3, r7, #31
    if (!value) {
100034f0:	4662      	mov	r2, ip
                        idx = _ntoa_long_long(out, buffer, idx, maxlen,
100034f2:	9312      	str	r3, [sp, #72]	; 0x48
100034f4:	2300      	movs	r3, #0
    if (!value) {
100034f6:	433a      	orrs	r2, r7
                        idx = _ntoa_long_long(out, buffer, idx, maxlen,
100034f8:	469b      	mov	fp, r3
    if (!value) {
100034fa:	d03d      	beq.n	10003578 <_vsnprintf+0x7d0>
100034fc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
100034fe:	2361      	movs	r3, #97	; 0x61
10003500:	0692      	lsls	r2, r2, #26
10003502:	d500      	bpl.n	10003506 <_vsnprintf+0x75e>
10003504:	2341      	movs	r3, #65	; 0x41
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
10003506:	2200      	movs	r2, #0
10003508:	b2db      	uxtb	r3, r3
1000350a:	a90e      	add	r1, sp, #56	; 0x38
1000350c:	3b0a      	subs	r3, #10
1000350e:	468c      	mov	ip, r1
10003510:	4692      	mov	sl, r2
10003512:	930d      	str	r3, [sp, #52]	; 0x34
10003514:	4643      	mov	r3, r8
10003516:	321f      	adds	r2, #31
10003518:	4462      	add	r2, ip
1000351a:	9513      	str	r5, [sp, #76]	; 0x4c
1000351c:	9615      	str	r6, [sp, #84]	; 0x54
1000351e:	4655      	mov	r5, sl
10003520:	9e0e      	ldr	r6, [sp, #56]	; 0x38
10003522:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
10003524:	46a2      	mov	sl, r4
10003526:	4690      	mov	r8, r2
10003528:	9c0c      	ldr	r4, [sp, #48]	; 0x30
1000352a:	9314      	str	r3, [sp, #80]	; 0x50
1000352c:	e00c      	b.n	10003548 <_vsnprintf+0x7a0>
1000352e:	3230      	adds	r2, #48	; 0x30
10003530:	b2d2      	uxtb	r2, r2
10003532:	4643      	mov	r3, r8
10003534:	3501      	adds	r5, #1
10003536:	555a      	strb	r2, [r3, r5]
        } while (value && (len < PICO_PRINTF_NTOA_BUFFER_SIZE));
10003538:	45bb      	cmp	fp, r7
1000353a:	d100      	bne.n	1000353e <_vsnprintf+0x796>
1000353c:	e18a      	b.n	10003854 <_vsnprintf+0xaac>
1000353e:	2d20      	cmp	r5, #32
10003540:	d100      	bne.n	10003544 <_vsnprintf+0x79c>
10003542:	e18a      	b.n	1000385a <_vsnprintf+0xab2>
            value /= base;
10003544:	0006      	movs	r6, r0
10003546:	000f      	movs	r7, r1
            const char digit = (char) (value % base);
10003548:	0022      	movs	r2, r4
1000354a:	2300      	movs	r3, #0
1000354c:	0030      	movs	r0, r6
1000354e:	0039      	movs	r1, r7
10003550:	f7fc ff56 	bl	10000400 <__wrap___aeabi_uldivmod>
10003554:	b2d2      	uxtb	r2, r2
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
10003556:	2a09      	cmp	r2, #9
10003558:	d9e9      	bls.n	1000352e <_vsnprintf+0x786>
1000355a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1000355c:	469c      	mov	ip, r3
1000355e:	4462      	add	r2, ip
10003560:	b2d2      	uxtb	r2, r2
10003562:	e7e6      	b.n	10003532 <_vsnprintf+0x78a>
10003564:	23ff      	movs	r3, #255	; 0xff
                        const int value = (flags & FLAGS_CHAR) ? (char) va_arg(va, int) : (flags & FLAGS_SHORT)
10003566:	9909      	ldr	r1, [sp, #36]	; 0x24
10003568:	c904      	ldmia	r1!, {r2}
1000356a:	4013      	ands	r3, r2
1000356c:	001a      	movs	r2, r3
1000356e:	9109      	str	r1, [sp, #36]	; 0x24
10003570:	e517      	b.n	10002fa2 <_vsnprintf+0x1fa>
10003572:	46c0      	nop			; (mov r8, r8)
10003574:	10002365 	.word	0x10002365
        flags &= ~FLAGS_HASH;
10003578:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
1000357a:	3310      	adds	r3, #16
1000357c:	0011      	movs	r1, r2
1000357e:	4399      	bics	r1, r3
10003580:	910b      	str	r1, [sp, #44]	; 0x2c
    if (!(flags & FLAGS_PRECISION) || value) {
10003582:	0552      	lsls	r2, r2, #21
10003584:	d5ba      	bpl.n	100034fc <_vsnprintf+0x754>
    size_t len = 0U;
10003586:	2300      	movs	r3, #0
10003588:	469a      	mov	sl, r3
    return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int) base, prec, width, flags);
1000358a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1000358c:	9306      	str	r3, [sp, #24]
1000358e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10003590:	9305      	str	r3, [sp, #20]
10003592:	4643      	mov	r3, r8
10003594:	9304      	str	r3, [sp, #16]
10003596:	9b0c      	ldr	r3, [sp, #48]	; 0x30
10003598:	9303      	str	r3, [sp, #12]
1000359a:	9b12      	ldr	r3, [sp, #72]	; 0x48
1000359c:	9302      	str	r3, [sp, #8]
1000359e:	4653      	mov	r3, sl
100035a0:	9301      	str	r3, [sp, #4]
100035a2:	ab16      	add	r3, sp, #88	; 0x58
100035a4:	002a      	movs	r2, r5
100035a6:	9300      	str	r3, [sp, #0]
100035a8:	0021      	movs	r1, r4
100035aa:	464b      	mov	r3, r9
100035ac:	9808      	ldr	r0, [sp, #32]
100035ae:	f7fe ff29 	bl	10002404 <_ntoa_format>
                format++;
100035b2:	3601      	adds	r6, #1
    return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int) base, prec, width, flags);
100035b4:	0005      	movs	r5, r0
                break;
100035b6:	e41c      	b.n	10002df2 <_vsnprintf+0x4a>
100035b8:	22ff      	movs	r2, #255	; 0xff
                        const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char) va_arg(va, unsigned int)
100035ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
100035bc:	cb02      	ldmia	r3!, {r1}
100035be:	4011      	ands	r1, r2
100035c0:	468b      	mov	fp, r1
100035c2:	9309      	str	r3, [sp, #36]	; 0x24
100035c4:	e6c5      	b.n	10003352 <_vsnprintf+0x5aa>
                out((char) va_arg(va, int), buffer, idx++, maxlen);
100035c6:	4653      	mov	r3, sl
                    while (l++ < width) {
100035c8:	4645      	mov	r5, r8
                out((char) va_arg(va, int), buffer, idx++, maxlen);
100035ca:	9309      	str	r3, [sp, #36]	; 0x24
                format++;
100035cc:	3601      	adds	r6, #1
                break;
100035ce:	f7ff fc10 	bl	10002df2 <_vsnprintf+0x4a>
100035d2:	4656      	mov	r6, sl
100035d4:	465c      	mov	r4, fp
100035d6:	46aa      	mov	sl, r5
100035d8:	9d13      	ldr	r5, [sp, #76]	; 0x4c
100035da:	e7d6      	b.n	1000358a <_vsnprintf+0x7e2>
                    base = 8U;
100035dc:	2308      	movs	r3, #8
100035de:	930c      	str	r3, [sp, #48]	; 0x30
                format++;
100035e0:	910b      	str	r1, [sp, #44]	; 0x2c
100035e2:	990b      	ldr	r1, [sp, #44]	; 0x2c
                if ((*format != 'i') && (*format != 'd')) {
100035e4:	2864      	cmp	r0, #100	; 0x64
100035e6:	d000      	beq.n	100035ea <_vsnprintf+0x842>
100035e8:	e684      	b.n	100032f4 <_vsnprintf+0x54c>
                if (flags & FLAGS_PRECISION) {
100035ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
100035ec:	055b      	lsls	r3, r3, #21
100035ee:	d500      	bpl.n	100035f2 <_vsnprintf+0x84a>
100035f0:	e686      	b.n	10003300 <_vsnprintf+0x558>
100035f2:	e4b4      	b.n	10002f5e <_vsnprintf+0x1b6>
                        idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base,
100035f4:	2207      	movs	r2, #7
100035f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
100035f8:	3307      	adds	r3, #7
100035fa:	4393      	bics	r3, r2
100035fc:	3201      	adds	r2, #1
100035fe:	4694      	mov	ip, r2
10003600:	449c      	add	ip, r3
10003602:	4662      	mov	r2, ip
10003604:	9209      	str	r2, [sp, #36]	; 0x24
10003606:	681a      	ldr	r2, [r3, #0]
10003608:	685b      	ldr	r3, [r3, #4]
1000360a:	0010      	movs	r0, r2
1000360c:	469b      	mov	fp, r3
    if (!value) {
1000360e:	0013      	movs	r3, r2
10003610:	465a      	mov	r2, fp
10003612:	4313      	orrs	r3, r2
10003614:	d107      	bne.n	10003626 <_vsnprintf+0x87e>
        flags &= ~FLAGS_HASH;
10003616:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
10003618:	3310      	adds	r3, #16
1000361a:	0011      	movs	r1, r2
1000361c:	4399      	bics	r1, r3
1000361e:	910b      	str	r1, [sp, #44]	; 0x2c
    if (!(flags & FLAGS_PRECISION) || value) {
10003620:	0552      	lsls	r2, r2, #21
10003622:	d500      	bpl.n	10003626 <_vsnprintf+0x87e>
10003624:	e6a1      	b.n	1000336a <_vsnprintf+0x5c2>
10003626:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
10003628:	2361      	movs	r3, #97	; 0x61
1000362a:	0692      	lsls	r2, r2, #26
1000362c:	d500      	bpl.n	10003630 <_vsnprintf+0x888>
1000362e:	2341      	movs	r3, #65	; 0x41
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
10003630:	2200      	movs	r2, #0
10003632:	b2db      	uxtb	r3, r3
10003634:	a90e      	add	r1, sp, #56	; 0x38
10003636:	3b0a      	subs	r3, #10
10003638:	468c      	mov	ip, r1
1000363a:	4692      	mov	sl, r2
1000363c:	930d      	str	r3, [sp, #52]	; 0x34
1000363e:	4643      	mov	r3, r8
10003640:	321f      	adds	r2, #31
10003642:	4462      	add	r2, ip
10003644:	465f      	mov	r7, fp
10003646:	9512      	str	r5, [sp, #72]	; 0x48
10003648:	46a3      	mov	fp, r4
1000364a:	4655      	mov	r5, sl
1000364c:	0004      	movs	r4, r0
1000364e:	46b2      	mov	sl, r6
10003650:	4690      	mov	r8, r2
10003652:	9e0c      	ldr	r6, [sp, #48]	; 0x30
10003654:	9313      	str	r3, [sp, #76]	; 0x4c
10003656:	e00d      	b.n	10003674 <_vsnprintf+0x8cc>
10003658:	3230      	adds	r2, #48	; 0x30
1000365a:	b2d2      	uxtb	r2, r2
1000365c:	4643      	mov	r3, r8
1000365e:	3501      	adds	r5, #1
10003660:	555a      	strb	r2, [r3, r5]
        } while (value && (len < PICO_PRINTF_NTOA_BUFFER_SIZE));
10003662:	2300      	movs	r3, #0
10003664:	42bb      	cmp	r3, r7
10003666:	d100      	bne.n	1000366a <_vsnprintf+0x8c2>
10003668:	e100      	b.n	1000386c <_vsnprintf+0xac4>
1000366a:	2d20      	cmp	r5, #32
1000366c:	d100      	bne.n	10003670 <_vsnprintf+0x8c8>
1000366e:	e100      	b.n	10003872 <_vsnprintf+0xaca>
            value /= base;
10003670:	0004      	movs	r4, r0
10003672:	000f      	movs	r7, r1
            const char digit = (char) (value % base);
10003674:	0032      	movs	r2, r6
10003676:	2300      	movs	r3, #0
10003678:	0020      	movs	r0, r4
1000367a:	0039      	movs	r1, r7
1000367c:	f7fc fec0 	bl	10000400 <__wrap___aeabi_uldivmod>
10003680:	b2d2      	uxtb	r2, r2
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
10003682:	2a09      	cmp	r2, #9
10003684:	d9e8      	bls.n	10003658 <_vsnprintf+0x8b0>
10003686:	9b0d      	ldr	r3, [sp, #52]	; 0x34
10003688:	469c      	mov	ip, r3
1000368a:	4462      	add	r2, ip
1000368c:	b2d2      	uxtb	r2, r2
1000368e:	e7e5      	b.n	1000365c <_vsnprintf+0x8b4>
10003690:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
10003692:	2361      	movs	r3, #97	; 0x61
10003694:	0692      	lsls	r2, r2, #26
10003696:	d500      	bpl.n	1000369a <_vsnprintf+0x8f2>
10003698:	2341      	movs	r3, #65	; 0x41
1000369a:	b2db      	uxtb	r3, r3
1000369c:	a90e      	add	r1, sp, #56	; 0x38
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
1000369e:	3b0a      	subs	r3, #10
100036a0:	221f      	movs	r2, #31
100036a2:	468c      	mov	ip, r1
100036a4:	930d      	str	r3, [sp, #52]	; 0x34
100036a6:	0023      	movs	r3, r4
100036a8:	4462      	add	r2, ip
100036aa:	465c      	mov	r4, fp
100036ac:	9512      	str	r5, [sp, #72]	; 0x48
100036ae:	0017      	movs	r7, r2
100036b0:	4655      	mov	r5, sl
100036b2:	469b      	mov	fp, r3
100036b4:	46b2      	mov	sl, r6
100036b6:	9e0c      	ldr	r6, [sp, #48]	; 0x30
100036b8:	e008      	b.n	100036cc <_vsnprintf+0x924>
100036ba:	3330      	adds	r3, #48	; 0x30
100036bc:	b2db      	uxtb	r3, r3
100036be:	3501      	adds	r5, #1
100036c0:	557b      	strb	r3, [r7, r5]
        } while (value && (len < PICO_PRINTF_NTOA_BUFFER_SIZE));
100036c2:	42b4      	cmp	r4, r6
100036c4:	d30e      	bcc.n	100036e4 <_vsnprintf+0x93c>
100036c6:	2d20      	cmp	r5, #32
100036c8:	d00c      	beq.n	100036e4 <_vsnprintf+0x93c>
            value /= base;
100036ca:	0004      	movs	r4, r0
            const char digit = (char) (value % base);
100036cc:	0031      	movs	r1, r6
100036ce:	0020      	movs	r0, r4
100036d0:	f7fc fe50 	bl	10000374 <__wrap___aeabi_uidiv>
100036d4:	b2cb      	uxtb	r3, r1
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
100036d6:	2909      	cmp	r1, #9
100036d8:	d9ef      	bls.n	100036ba <_vsnprintf+0x912>
100036da:	9a0d      	ldr	r2, [sp, #52]	; 0x34
100036dc:	4694      	mov	ip, r2
100036de:	4463      	add	r3, ip
100036e0:	b2db      	uxtb	r3, r3
100036e2:	e7ec      	b.n	100036be <_vsnprintf+0x916>
100036e4:	4656      	mov	r6, sl
100036e6:	465c      	mov	r4, fp
100036e8:	46aa      	mov	sl, r5
100036ea:	9d12      	ldr	r5, [sp, #72]	; 0x48
100036ec:	e63f      	b.n	1000336e <_vsnprintf+0x5c6>
                        const long value = va_arg(va, long);
100036ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
100036f0:	001a      	movs	r2, r3
100036f2:	ca08      	ldmia	r2!, {r3}
                        idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long) (value > 0 ? value : 0 - value),
100036f4:	17d9      	asrs	r1, r3, #31
                        const long value = va_arg(va, long);
100036f6:	9213      	str	r2, [sp, #76]	; 0x4c
                        idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long) (value > 0 ? value : 0 - value),
100036f8:	185a      	adds	r2, r3, r1
100036fa:	404a      	eors	r2, r1
100036fc:	4692      	mov	sl, r2
100036fe:	0fda      	lsrs	r2, r3, #31
10003700:	9212      	str	r2, [sp, #72]	; 0x48
    if (!value) {
10003702:	2b00      	cmp	r3, #0
10003704:	d108      	bne.n	10003718 <_vsnprintf+0x970>
    if (!(flags & FLAGS_PRECISION) || value) {
10003706:	2380      	movs	r3, #128	; 0x80
        flags &= ~FLAGS_HASH;
10003708:	2210      	movs	r2, #16
    if (!(flags & FLAGS_PRECISION) || value) {
1000370a:	990b      	ldr	r1, [sp, #44]	; 0x2c
1000370c:	00db      	lsls	r3, r3, #3
1000370e:	400b      	ands	r3, r1
        flags &= ~FLAGS_HASH;
10003710:	4391      	bics	r1, r2
10003712:	910b      	str	r1, [sp, #44]	; 0x2c
    if (!(flags & FLAGS_PRECISION) || value) {
10003714:	2b00      	cmp	r3, #0
10003716:	d12b      	bne.n	10003770 <_vsnprintf+0x9c8>
10003718:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
1000371a:	2361      	movs	r3, #97	; 0x61
1000371c:	0692      	lsls	r2, r2, #26
1000371e:	d500      	bpl.n	10003722 <_vsnprintf+0x97a>
10003720:	2341      	movs	r3, #65	; 0x41
10003722:	aa0e      	add	r2, sp, #56	; 0x38
10003724:	271f      	movs	r7, #31
10003726:	4694      	mov	ip, r2
10003728:	b2db      	uxtb	r3, r3
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
1000372a:	3b0a      	subs	r3, #10
1000372c:	950d      	str	r5, [sp, #52]	; 0x34
1000372e:	4467      	add	r7, ip
10003730:	465d      	mov	r5, fp
10003732:	9309      	str	r3, [sp, #36]	; 0x24
10003734:	46a3      	mov	fp, r4
10003736:	4654      	mov	r4, sl
10003738:	46b2      	mov	sl, r6
1000373a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
1000373c:	e008      	b.n	10003750 <_vsnprintf+0x9a8>
1000373e:	3330      	adds	r3, #48	; 0x30
10003740:	b2db      	uxtb	r3, r3
10003742:	3501      	adds	r5, #1
10003744:	557b      	strb	r3, [r7, r5]
        } while (value && (len < PICO_PRINTF_NTOA_BUFFER_SIZE));
10003746:	42b4      	cmp	r4, r6
10003748:	d30e      	bcc.n	10003768 <_vsnprintf+0x9c0>
1000374a:	2d20      	cmp	r5, #32
1000374c:	d00c      	beq.n	10003768 <_vsnprintf+0x9c0>
            value /= base;
1000374e:	0004      	movs	r4, r0
            const char digit = (char) (value % base);
10003750:	0031      	movs	r1, r6
10003752:	0020      	movs	r0, r4
10003754:	f7fc fe0e 	bl	10000374 <__wrap___aeabi_uidiv>
10003758:	b2cb      	uxtb	r3, r1
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
1000375a:	2909      	cmp	r1, #9
1000375c:	d9ef      	bls.n	1000373e <_vsnprintf+0x996>
1000375e:	9a09      	ldr	r2, [sp, #36]	; 0x24
10003760:	4694      	mov	ip, r2
10003762:	4463      	add	r3, ip
10003764:	b2db      	uxtb	r3, r3
10003766:	e7ec      	b.n	10003742 <_vsnprintf+0x99a>
10003768:	4656      	mov	r6, sl
1000376a:	465c      	mov	r4, fp
1000376c:	46ab      	mov	fp, r5
1000376e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int) base, prec, width, flags);
10003770:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
10003772:	002a      	movs	r2, r5
10003774:	9306      	str	r3, [sp, #24]
10003776:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10003778:	0021      	movs	r1, r4
1000377a:	9305      	str	r3, [sp, #20]
1000377c:	4643      	mov	r3, r8
1000377e:	9304      	str	r3, [sp, #16]
10003780:	9b0c      	ldr	r3, [sp, #48]	; 0x30
10003782:	9808      	ldr	r0, [sp, #32]
10003784:	9303      	str	r3, [sp, #12]
10003786:	9b12      	ldr	r3, [sp, #72]	; 0x48
                format++;
10003788:	3601      	adds	r6, #1
    return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int) base, prec, width, flags);
1000378a:	9302      	str	r3, [sp, #8]
1000378c:	465b      	mov	r3, fp
1000378e:	9301      	str	r3, [sp, #4]
10003790:	ab16      	add	r3, sp, #88	; 0x58
10003792:	9300      	str	r3, [sp, #0]
10003794:	464b      	mov	r3, r9
10003796:	f7fe fe35 	bl	10002404 <_ntoa_format>
                        const long value = va_arg(va, long);
1000379a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int) base, prec, width, flags);
1000379c:	0005      	movs	r5, r0
                        const long value = va_arg(va, long);
1000379e:	9309      	str	r3, [sp, #36]	; 0x24
                break;
100037a0:	f7ff fb27 	bl	10002df2 <_vsnprintf+0x4a>
                    base = 2U;
100037a4:	2302      	movs	r3, #2
100037a6:	930c      	str	r3, [sp, #48]	; 0x30
100037a8:	e71a      	b.n	100035e0 <_vsnprintf+0x838>
                        idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision,
100037aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
100037ac:	cb04      	ldmia	r3!, {r2}
100037ae:	4692      	mov	sl, r2
100037b0:	9312      	str	r3, [sp, #72]	; 0x48
    if (!value) {
100037b2:	2a00      	cmp	r2, #0
100037b4:	d108      	bne.n	100037c8 <_vsnprintf+0xa20>
    if (!(flags & FLAGS_PRECISION) || value) {
100037b6:	2380      	movs	r3, #128	; 0x80
        flags &= ~FLAGS_HASH;
100037b8:	2210      	movs	r2, #16
    if (!(flags & FLAGS_PRECISION) || value) {
100037ba:	990b      	ldr	r1, [sp, #44]	; 0x2c
100037bc:	00db      	lsls	r3, r3, #3
100037be:	400b      	ands	r3, r1
        flags &= ~FLAGS_HASH;
100037c0:	4391      	bics	r1, r2
100037c2:	910b      	str	r1, [sp, #44]	; 0x2c
    if (!(flags & FLAGS_PRECISION) || value) {
100037c4:	2b00      	cmp	r3, #0
100037c6:	d12b      	bne.n	10003820 <_vsnprintf+0xa78>
100037c8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
100037ca:	2361      	movs	r3, #97	; 0x61
100037cc:	0692      	lsls	r2, r2, #26
100037ce:	d500      	bpl.n	100037d2 <_vsnprintf+0xa2a>
100037d0:	2341      	movs	r3, #65	; 0x41
100037d2:	aa0e      	add	r2, sp, #56	; 0x38
100037d4:	271f      	movs	r7, #31
100037d6:	4694      	mov	ip, r2
100037d8:	b2db      	uxtb	r3, r3
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
100037da:	3b0a      	subs	r3, #10
100037dc:	950d      	str	r5, [sp, #52]	; 0x34
100037de:	4467      	add	r7, ip
100037e0:	465d      	mov	r5, fp
100037e2:	9309      	str	r3, [sp, #36]	; 0x24
100037e4:	46a3      	mov	fp, r4
100037e6:	4654      	mov	r4, sl
100037e8:	46b2      	mov	sl, r6
100037ea:	9e0c      	ldr	r6, [sp, #48]	; 0x30
100037ec:	e008      	b.n	10003800 <_vsnprintf+0xa58>
100037ee:	3330      	adds	r3, #48	; 0x30
100037f0:	b2db      	uxtb	r3, r3
100037f2:	3501      	adds	r5, #1
100037f4:	557b      	strb	r3, [r7, r5]
        } while (value && (len < PICO_PRINTF_NTOA_BUFFER_SIZE));
100037f6:	42b4      	cmp	r4, r6
100037f8:	d30e      	bcc.n	10003818 <_vsnprintf+0xa70>
100037fa:	2d20      	cmp	r5, #32
100037fc:	d00c      	beq.n	10003818 <_vsnprintf+0xa70>
            value /= base;
100037fe:	0004      	movs	r4, r0
            const char digit = (char) (value % base);
10003800:	0031      	movs	r1, r6
10003802:	0020      	movs	r0, r4
10003804:	f7fc fdb6 	bl	10000374 <__wrap___aeabi_uidiv>
10003808:	b2cb      	uxtb	r3, r1
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
1000380a:	2909      	cmp	r1, #9
1000380c:	d9ef      	bls.n	100037ee <_vsnprintf+0xa46>
1000380e:	9a09      	ldr	r2, [sp, #36]	; 0x24
10003810:	4694      	mov	ip, r2
10003812:	4463      	add	r3, ip
10003814:	b2db      	uxtb	r3, r3
10003816:	e7ec      	b.n	100037f2 <_vsnprintf+0xa4a>
10003818:	4656      	mov	r6, sl
1000381a:	465c      	mov	r4, fp
1000381c:	46ab      	mov	fp, r5
1000381e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int) base, prec, width, flags);
10003820:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
10003822:	002a      	movs	r2, r5
10003824:	9306      	str	r3, [sp, #24]
10003826:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10003828:	0021      	movs	r1, r4
1000382a:	9305      	str	r3, [sp, #20]
1000382c:	4643      	mov	r3, r8
1000382e:	9304      	str	r3, [sp, #16]
10003830:	9b0c      	ldr	r3, [sp, #48]	; 0x30
10003832:	9808      	ldr	r0, [sp, #32]
10003834:	9303      	str	r3, [sp, #12]
10003836:	2300      	movs	r3, #0
10003838:	9302      	str	r3, [sp, #8]
1000383a:	465b      	mov	r3, fp
1000383c:	9301      	str	r3, [sp, #4]
1000383e:	ab16      	add	r3, sp, #88	; 0x58
10003840:	9300      	str	r3, [sp, #0]
10003842:	464b      	mov	r3, r9
10003844:	f7fe fdde 	bl	10002404 <_ntoa_format>
                        idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision,
10003848:	9b12      	ldr	r3, [sp, #72]	; 0x48
    return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int) base, prec, width, flags);
1000384a:	0005      	movs	r5, r0
                        idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision,
1000384c:	9309      	str	r3, [sp, #36]	; 0x24
                format++;
1000384e:	3601      	adds	r6, #1
                break;
10003850:	f7ff facf 	bl	10002df2 <_vsnprintf+0x4a>
        } while (value && (len < PICO_PRINTF_NTOA_BUFFER_SIZE));
10003854:	42b4      	cmp	r4, r6
10003856:	d800      	bhi.n	1000385a <_vsnprintf+0xab2>
10003858:	e671      	b.n	1000353e <_vsnprintf+0x796>
1000385a:	9b14      	ldr	r3, [sp, #80]	; 0x50
1000385c:	4654      	mov	r4, sl
1000385e:	960e      	str	r6, [sp, #56]	; 0x38
10003860:	970f      	str	r7, [sp, #60]	; 0x3c
10003862:	46aa      	mov	sl, r5
10003864:	4698      	mov	r8, r3
10003866:	9e15      	ldr	r6, [sp, #84]	; 0x54
10003868:	9d13      	ldr	r5, [sp, #76]	; 0x4c
    return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int) base, prec, width, flags);
1000386a:	e68e      	b.n	1000358a <_vsnprintf+0x7e2>
        } while (value && (len < PICO_PRINTF_NTOA_BUFFER_SIZE));
1000386c:	42a6      	cmp	r6, r4
1000386e:	d800      	bhi.n	10003872 <_vsnprintf+0xaca>
10003870:	e6fb      	b.n	1000366a <_vsnprintf+0x8c2>
10003872:	9b13      	ldr	r3, [sp, #76]	; 0x4c
10003874:	4656      	mov	r6, sl
10003876:	4698      	mov	r8, r3
10003878:	46aa      	mov	sl, r5
1000387a:	465c      	mov	r4, fp
    return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int) base, prec, width, flags);
1000387c:	9d12      	ldr	r5, [sp, #72]	; 0x48
1000387e:	e576      	b.n	1000336e <_vsnprintf+0x5c6>
                                                                                          : va_arg(va, int);
10003880:	c908      	ldmia	r1!, {r3}
                        idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int) (value > 0 ? value : 0 - value),
10003882:	17d8      	asrs	r0, r3, #31
10003884:	181a      	adds	r2, r3, r0
10003886:	4042      	eors	r2, r0
                                                                                          : va_arg(va, int);
10003888:	9109      	str	r1, [sp, #36]	; 0x24
1000388a:	f7ff fb8a 	bl	10002fa2 <_vsnprintf+0x1fa>
    for (s = str; *s && maxsize--; ++s);
1000388e:	2300      	movs	r3, #0
10003890:	930b      	str	r3, [sp, #44]	; 0x2c
10003892:	e450      	b.n	10003136 <_vsnprintf+0x38e>
                                                                          : va_arg(va, unsigned int);
10003894:	9b09      	ldr	r3, [sp, #36]	; 0x24
10003896:	cb04      	ldmia	r3!, {r2}
10003898:	4693      	mov	fp, r2
1000389a:	9309      	str	r3, [sp, #36]	; 0x24
1000389c:	e559      	b.n	10003352 <_vsnprintf+0x5aa>
                    while (l++ < width) {
1000389e:	002f      	movs	r7, r5
100038a0:	e5bb      	b.n	1000341a <_vsnprintf+0x672>
                    while (l++ < width) {
100038a2:	930b      	str	r3, [sp, #44]	; 0x2c
100038a4:	e601      	b.n	100034aa <_vsnprintf+0x702>
                    base = 10U;
100038a6:	3b06      	subs	r3, #6
100038a8:	930c      	str	r3, [sp, #48]	; 0x30
100038aa:	e69a      	b.n	100035e2 <_vsnprintf+0x83a>

100038ac <vfctprintf>:

int WRAPPER_FUNC(vsnprintf)(char *buffer, size_t count, const char *format, va_list va) {
    return _vsnprintf(_out_buffer, buffer, count, format, va);
}

int vfctprintf(void (*out)(char character, void *arg), void *arg, const char *format, va_list va) {
100038ac:	b500      	push	{lr}
100038ae:	b085      	sub	sp, #20
    const out_fct_wrap_type out_fct_wrap = {out, arg};
100038b0:	9103      	str	r1, [sp, #12]
    return _vsnprintf(_out_fct, (char *) (uintptr_t) &out_fct_wrap, (size_t) -1, format, va);
100038b2:	2101      	movs	r1, #1
    const out_fct_wrap_type out_fct_wrap = {out, arg};
100038b4:	9002      	str	r0, [sp, #8]
    return _vsnprintf(_out_fct, (char *) (uintptr_t) &out_fct_wrap, (size_t) -1, format, va);
100038b6:	9300      	str	r3, [sp, #0]
100038b8:	4803      	ldr	r0, [pc, #12]	; (100038c8 <vfctprintf+0x1c>)
100038ba:	0013      	movs	r3, r2
100038bc:	424a      	negs	r2, r1
100038be:	a902      	add	r1, sp, #8
100038c0:	f7ff fa72 	bl	10002da8 <_vsnprintf>
}
100038c4:	b005      	add	sp, #20
100038c6:	bd00      	pop	{pc}
100038c8:	100025e1 	.word	0x100025e1

100038cc <weak_raw_vprintf>:
    bool rc = weak_raw_vprintf(fmt, va);
    va_end(va);
    return rc;
}

bool weak_raw_vprintf(const char *fmt, va_list args) {
100038cc:	b510      	push	{r4, lr}
    if (lazy_vsnprintf) {
100038ce:	4a09      	ldr	r2, [pc, #36]	; (100038f4 <weak_raw_vprintf+0x28>)
bool weak_raw_vprintf(const char *fmt, va_list args) {
100038d0:	0003      	movs	r3, r0
    if (lazy_vsnprintf) {
100038d2:	6814      	ldr	r4, [r2, #0]
bool weak_raw_vprintf(const char *fmt, va_list args) {
100038d4:	b084      	sub	sp, #16
    if (lazy_vsnprintf) {
100038d6:	2c00      	cmp	r4, #0
100038d8:	d008      	beq.n	100038ec <weak_raw_vprintf+0x20>
        char buffer[1];
        lazy_vsnprintf(_out_char, buffer, (size_t) -1, fmt, args);
100038da:	2201      	movs	r2, #1
100038dc:	9100      	str	r1, [sp, #0]
100038de:	4806      	ldr	r0, [pc, #24]	; (100038f8 <weak_raw_vprintf+0x2c>)
100038e0:	4252      	negs	r2, r2
100038e2:	a903      	add	r1, sp, #12
100038e4:	47a0      	blx	r4
        return true;
100038e6:	2001      	movs	r0, #1
    } else {
        puts(fmt);
        return false;
    }
}
100038e8:	b004      	add	sp, #16
100038ea:	bd10      	pop	{r4, pc}
        puts(fmt);
100038ec:	f000 f9cc 	bl	10003c88 <__wrap_puts>
        return false;
100038f0:	2000      	movs	r0, #0
100038f2:	e7f9      	b.n	100038e8 <weak_raw_vprintf+0x1c>
100038f4:	20012728 	.word	0x20012728
100038f8:	100025d1 	.word	0x100025d1

100038fc <runtime_init>:
                   | (0x7 << 1) // size 2^(7 + 1) = 256
                   | (subregion_select << 8)
                   | 0x10000000; // XN = disable instruction fetch; no other bits means no permissions
}

void runtime_init(void) {
100038fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
100038fe:	4a2b      	ldr	r2, [pc, #172]	; (100039ac <runtime_init+0xb0>)
10003900:	4b2b      	ldr	r3, [pc, #172]	; (100039b0 <runtime_init+0xb4>)
10003902:	492c      	ldr	r1, [pc, #176]	; (100039b4 <runtime_init+0xb8>)
10003904:	601a      	str	r2, [r3, #0]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10003906:	4a2c      	ldr	r2, [pc, #176]	; (100039b8 <runtime_init+0xbc>)
10003908:	4b2c      	ldr	r3, [pc, #176]	; (100039bc <runtime_init+0xc0>)
1000390a:	601a      	str	r2, [r3, #0]
1000390c:	0014      	movs	r4, r2
1000390e:	688b      	ldr	r3, [r1, #8]
10003910:	439c      	bics	r4, r3
10003912:	d1fb      	bne.n	1000390c <runtime_init+0x10>
    extern void (*__preinit_array_end)();

    // Call each function in the list.
    // We have to take the address of the symbols, as __preinit_array_start *is*
    // the first function pointer, not the address of it.
    for (void (**p)() = &__preinit_array_start; p < &__preinit_array_end; ++p) {
10003914:	4d2a      	ldr	r5, [pc, #168]	; (100039c0 <runtime_init+0xc4>)
10003916:	4e2b      	ldr	r6, [pc, #172]	; (100039c4 <runtime_init+0xc8>)
10003918:	42b5      	cmp	r5, r6
1000391a:	d208      	bcs.n	1000392e <runtime_init+0x32>
1000391c:	3e01      	subs	r6, #1
1000391e:	1b76      	subs	r6, r6, r5
10003920:	08b6      	lsrs	r6, r6, #2
        (*p)();
10003922:	cd08      	ldmia	r5!, {r3}
10003924:	4798      	blx	r3
    for (void (**p)() = &__preinit_array_start; p < &__preinit_array_end; ++p) {
10003926:	0023      	movs	r3, r4
10003928:	3401      	adds	r4, #1
1000392a:	42b3      	cmp	r3, r6
1000392c:	d1f9      	bne.n	10003922 <runtime_init+0x26>
    }

    // After calling preinit we have enough runtime to do the exciting maths
    // in clocks_init
    clocks_init();
1000392e:	f7fd fd39 	bl	100013a4 <clocks_init>
10003932:	4a25      	ldr	r2, [pc, #148]	; (100039c8 <runtime_init+0xcc>)
10003934:	4b21      	ldr	r3, [pc, #132]	; (100039bc <runtime_init+0xc0>)
10003936:	601a      	str	r2, [r3, #0]
10003938:	4a1e      	ldr	r2, [pc, #120]	; (100039b4 <runtime_init+0xb8>)
1000393a:	6893      	ldr	r3, [r2, #8]
1000393c:	43db      	mvns	r3, r3
1000393e:	01db      	lsls	r3, r3, #7
10003940:	09dc      	lsrs	r4, r3, #7
10003942:	2b00      	cmp	r3, #0
10003944:	d1f9      	bne.n	1000393a <runtime_init+0x3e>
    unreset_block_wait(RESETS_RESET_BITS);

#if !PICO_IE_26_29_UNCHANGED_ON_RESET
    // after resetting BANK0 we should disable IE on 26-29
    hw_clear_alias(padsbank0_hw)->io[26] = hw_clear_alias(padsbank0_hw)->io[27] =
            hw_clear_alias(padsbank0_hw)->io[28] = hw_clear_alias(padsbank0_hw)->io[29] = PADS_BANK0_GPIO0_IE_BITS;
10003946:	2240      	movs	r2, #64	; 0x40
10003948:	4b20      	ldr	r3, [pc, #128]	; (100039cc <runtime_init+0xd0>)

    extern mutex_t __mutex_array_start;
    extern mutex_t __mutex_array_end;

    // the first function pointer, not the address of it.
    for (mutex_t *m = &__mutex_array_start; m < &__mutex_array_end; m++) {
1000394a:	4d21      	ldr	r5, [pc, #132]	; (100039d0 <runtime_init+0xd4>)
1000394c:	4f21      	ldr	r7, [pc, #132]	; (100039d4 <runtime_init+0xd8>)
            hw_clear_alias(padsbank0_hw)->io[28] = hw_clear_alias(padsbank0_hw)->io[29] = PADS_BANK0_GPIO0_IE_BITS;
1000394e:	679a      	str	r2, [r3, #120]	; 0x78
10003950:	675a      	str	r2, [r3, #116]	; 0x74
    hw_clear_alias(padsbank0_hw)->io[26] = hw_clear_alias(padsbank0_hw)->io[27] =
10003952:	671a      	str	r2, [r3, #112]	; 0x70
10003954:	66da      	str	r2, [r3, #108]	; 0x6c
    for (mutex_t *m = &__mutex_array_start; m < &__mutex_array_end; m++) {
10003956:	42bd      	cmp	r5, r7
10003958:	d20b      	bcs.n	10003972 <runtime_init+0x76>
1000395a:	2600      	movs	r6, #0
1000395c:	3f01      	subs	r7, #1
1000395e:	1b7f      	subs	r7, r7, r5
10003960:	08ff      	lsrs	r7, r7, #3
        mutex_init(m);
10003962:	0028      	movs	r0, r5
10003964:	f7fe f9c2 	bl	10001cec <mutex_init>
    for (mutex_t *m = &__mutex_array_start; m < &__mutex_array_end; m++) {
10003968:	3508      	adds	r5, #8
1000396a:	0033      	movs	r3, r6
1000396c:	3601      	adds	r6, #1
1000396e:	42bb      	cmp	r3, r7
10003970:	d1f7      	bne.n	10003962 <runtime_init+0x66>
    }

#if !(PICO_NO_RAM_VECTOR_TABLE || PICO_NO_FLASH)
    __builtin_memcpy(ram_vector_table, (uint32_t *) scb_hw->vtor, sizeof(ram_vector_table));
10003972:	4e19      	ldr	r6, [pc, #100]	; (100039d8 <runtime_init+0xdc>)
10003974:	4d19      	ldr	r5, [pc, #100]	; (100039dc <runtime_init+0xe0>)
10003976:	22c0      	movs	r2, #192	; 0xc0
10003978:	68a9      	ldr	r1, [r5, #8]
1000397a:	0030      	movs	r0, r6
1000397c:	f7fd fbb8 	bl	100010f0 <__wrap___aeabi_memcpy>
    scb_hw->vtor = (intptr_t) ram_vector_table;
10003980:	60ae      	str	r6, [r5, #8]
    // install core0 stack guard
    extern char __StackBottom;
    runtime_install_stack_guard(&__StackBottom);
#endif

    spin_locks_reset();
10003982:	f000 fbbd 	bl	10004100 <spin_locks_reset>
    irq_init_priorities();
10003986:	f7fe f91f 	bl	10001bc8 <irq_init_priorities>
    alarm_pool_init_default();
1000398a:	f000 fe03 	bl	10004594 <alarm_pool_init_default>
    extern void (*__init_array_end)();

    // Call each function in the list.
    // We have to take the address of the symbols, as __init_array_start *is*
    // the first function pointer, not the address of it.
    for (void (**p)() = &__init_array_start; p < &__init_array_end; ++p) {
1000398e:	4d14      	ldr	r5, [pc, #80]	; (100039e0 <runtime_init+0xe4>)
10003990:	4e14      	ldr	r6, [pc, #80]	; (100039e4 <runtime_init+0xe8>)
10003992:	42b5      	cmp	r5, r6
10003994:	d208      	bcs.n	100039a8 <runtime_init+0xac>
10003996:	3e01      	subs	r6, #1
10003998:	1b76      	subs	r6, r6, r5
1000399a:	08b6      	lsrs	r6, r6, #2
        (*p)();
1000399c:	cd08      	ldmia	r5!, {r3}
1000399e:	4798      	blx	r3
    for (void (**p)() = &__init_array_start; p < &__init_array_end; ++p) {
100039a0:	0023      	movs	r3, r4
100039a2:	3401      	adds	r4, #1
100039a4:	429e      	cmp	r6, r3
100039a6:	d1f9      	bne.n	1000399c <runtime_init+0xa0>
    }

}
100039a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100039aa:	46c0      	nop			; (mov r8, r8)
100039ac:	ffffcdbf 	.word	0xffffcdbf
100039b0:	4000e000 	.word	0x4000e000
100039b4:	4000c000 	.word	0x4000c000
100039b8:	003c7ffe 	.word	0x003c7ffe
100039bc:	4000f000 	.word	0x4000f000
100039c0:	20003038 	.word	0x20003038
100039c4:	20003048 	.word	0x20003048
100039c8:	01ffffff 	.word	0x01ffffff
100039cc:	4001f000 	.word	0x4001f000
100039d0:	20003030 	.word	0x20003030
100039d4:	20003038 	.word	0x20003038
100039d8:	20000000 	.word	0x20000000
100039dc:	e000ed00 	.word	0xe000ed00
100039e0:	20003048 	.word	0x20003048
100039e4:	20003050 	.word	0x20003050

100039e8 <_sbrk>:
void *_sbrk(int incr) {
    extern char end; /* Set by linker.  */
    static char *heap_end;
    char *prev_heap_end;

    if (heap_end == 0)
100039e8:	4a09      	ldr	r2, [pc, #36]	; (10003a10 <_sbrk+0x28>)
void *_sbrk(int incr) {
100039ea:	0003      	movs	r3, r0
    if (heap_end == 0)
100039ec:	6810      	ldr	r0, [r2, #0]
100039ee:	2800      	cmp	r0, #0
100039f0:	d005      	beq.n	100039fe <_sbrk+0x16>
        heap_end = &end;

    prev_heap_end = heap_end;
    char *next_heap_end = heap_end + incr;

    if (__builtin_expect(next_heap_end >= (&__StackLimit), false)) {
100039f2:	4908      	ldr	r1, [pc, #32]	; (10003a14 <_sbrk+0x2c>)
    char *next_heap_end = heap_end + incr;
100039f4:	18c3      	adds	r3, r0, r3
    if (__builtin_expect(next_heap_end >= (&__StackLimit), false)) {
100039f6:	428b      	cmp	r3, r1
100039f8:	d207      	bcs.n	10003a0a <_sbrk+0x22>
#else
        return (char *) -1;
#endif
    }

    heap_end = next_heap_end;
100039fa:	6013      	str	r3, [r2, #0]
    return (void *) prev_heap_end;
}
100039fc:	4770      	bx	lr
        heap_end = &end;
100039fe:	4806      	ldr	r0, [pc, #24]	; (10003a18 <_sbrk+0x30>)
    if (__builtin_expect(next_heap_end >= (&__StackLimit), false)) {
10003a00:	4904      	ldr	r1, [pc, #16]	; (10003a14 <_sbrk+0x2c>)
    char *next_heap_end = heap_end + incr;
10003a02:	18c3      	adds	r3, r0, r3
        heap_end = &end;
10003a04:	6010      	str	r0, [r2, #0]
    if (__builtin_expect(next_heap_end >= (&__StackLimit), false)) {
10003a06:	428b      	cmp	r3, r1
10003a08:	d3f7      	bcc.n	100039fa <_sbrk+0x12>
        return (char *) -1;
10003a0a:	2001      	movs	r0, #1
10003a0c:	4240      	negs	r0, r0
10003a0e:	e7f5      	b.n	100039fc <_sbrk+0x14>
10003a10:	200120a4 	.word	0x200120a4
10003a14:	20040000 	.word	0x20040000
10003a18:	20012778 	.word	0x20012778

10003a1c <exit>:
    __asm__("bkpt #0");
10003a1c:	be00      	bkpt	0x0000
10003a1e:	e7fd      	b.n	10003a1c <exit>

10003a20 <panic>:
//  right now, print mutex may be uninitialised (in which case it deadlocks - although after printing "PANIC")
//  more importantly there may be no stdout/UART initialized yet
// todo we may want to think about where we print panic messages to; writing to USB appears to work
//  though it doesn't seem like we can expect it to... fine for now
//
void __attribute__((noreturn)) __printflike(1, 0) panic(const char *fmt, ...) {
10003a20:	b40f      	push	{r0, r1, r2, r3}
10003a22:	b500      	push	{lr}
    puts("\n*** PANIC ***\n");
10003a24:	4808      	ldr	r0, [pc, #32]	; (10003a48 <panic+0x28>)
void __attribute__((noreturn)) __printflike(1, 0) panic(const char *fmt, ...) {
10003a26:	b083      	sub	sp, #12
    puts("\n*** PANIC ***\n");
10003a28:	f000 f92e 	bl	10003c88 <__wrap_puts>
    if (fmt) {
10003a2c:	9b04      	ldr	r3, [sp, #16]
10003a2e:	2b00      	cmp	r3, #0
10003a30:	d007      	beq.n	10003a42 <panic+0x22>
#if PICO_PRINTF_NONE
        puts(fmt);
#else
        va_list args;
        va_start(args, fmt);
10003a32:	a905      	add	r1, sp, #20
#if PICO_PRINTF_ALWAYS_INCLUDED
        vprintf(fmt, args);
#else
        weak_raw_vprintf(fmt, args);
10003a34:	0018      	movs	r0, r3
        va_start(args, fmt);
10003a36:	9101      	str	r1, [sp, #4]
        weak_raw_vprintf(fmt, args);
10003a38:	f7ff ff48 	bl	100038cc <weak_raw_vprintf>
#endif
        va_end(args);
        puts("\n");
10003a3c:	4803      	ldr	r0, [pc, #12]	; (10003a4c <panic+0x2c>)
10003a3e:	f000 f923 	bl	10003c88 <__wrap_puts>
10003a42:	be00      	bkpt	0x0000
10003a44:	e7fd      	b.n	10003a42 <panic+0x22>
10003a46:	46c0      	nop			; (mov r8, r8)
10003a48:	10010658 	.word	0x10010658
10003a4c:	1001092c 	.word	0x1001092c

10003a50 <hard_assertion_failure>:
    }

    _exit(1);
}

void hard_assertion_failure(void) {
10003a50:	b510      	push	{r4, lr}
    panic("Hard assert");
10003a52:	4801      	ldr	r0, [pc, #4]	; (10003a58 <hard_assertion_failure+0x8>)
10003a54:	f7ff ffe4 	bl	10003a20 <panic>
10003a58:	10010668 	.word	0x10010668

10003a5c <stdio_out_chars_crlf.part.0>:
}
static void print_serialize_end() {
}
#endif

static void stdio_out_chars_crlf(stdio_driver_t *driver, const char *s, int len) {
10003a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
10003a5e:	4646      	mov	r6, r8
10003a60:	464f      	mov	r7, r9
10003a62:	46d6      	mov	lr, sl
10003a64:	4680      	mov	r8, r0
10003a66:	b5c0      	push	{r6, r7, lr}
10003a68:	000e      	movs	r6, r1
10003a6a:	1e17      	subs	r7, r2, #0
        driver->out_chars(s, len);
        return;
    }
    int first_of_chunk = 0;
    static const char crlf_str[] = {'\r', '\n'};
    for (int i = 0; i < len; i++) {
10003a6c:	dd3f      	ble.n	10003aee <stdio_out_chars_crlf.part.0+0x92>
        bool prev_char_was_cr = i > 0 ? s[i - 1] == '\r' : driver->last_ended_with_cr;
10003a6e:	1e4b      	subs	r3, r1, #1
10003a70:	4699      	mov	r9, r3
        if (s[i] == '\n' && !prev_char_was_cr) {
            if (i > first_of_chunk) {
                driver->out_chars(&s[first_of_chunk], i - first_of_chunk);
            }
            driver->out_chars(crlf_str, 2);
10003a72:	4b21      	ldr	r3, [pc, #132]	; (10003af8 <stdio_out_chars_crlf.part.0+0x9c>)
    for (int i = 0; i < len; i++) {
10003a74:	2501      	movs	r5, #1
10003a76:	2400      	movs	r4, #0
    int first_of_chunk = 0;
10003a78:	2000      	movs	r0, #0
            driver->out_chars(crlf_str, 2);
10003a7a:	469a      	mov	sl, r3
10003a7c:	e00d      	b.n	10003a9a <stdio_out_chars_crlf.part.0+0x3e>
        bool prev_char_was_cr = i > 0 ? s[i - 1] == '\r' : driver->last_ended_with_cr;
10003a7e:	464b      	mov	r3, r9
10003a80:	5d1b      	ldrb	r3, [r3, r4]
10003a82:	3b0d      	subs	r3, #13
10003a84:	425a      	negs	r2, r3
10003a86:	4153      	adcs	r3, r2
        if (s[i] == '\n' && !prev_char_was_cr) {
10003a88:	5d32      	ldrb	r2, [r6, r4]
        bool prev_char_was_cr = i > 0 ? s[i - 1] == '\r' : driver->last_ended_with_cr;
10003a8a:	b2db      	uxtb	r3, r3
        if (s[i] == '\n' && !prev_char_was_cr) {
10003a8c:	2a0a      	cmp	r2, #10
10003a8e:	d00b      	beq.n	10003aa8 <stdio_out_chars_crlf.part.0+0x4c>
            first_of_chunk = i + 1;
10003a90:	002b      	movs	r3, r5
    for (int i = 0; i < len; i++) {
10003a92:	3401      	adds	r4, #1
10003a94:	3501      	adds	r5, #1
10003a96:	429f      	cmp	r7, r3
10003a98:	dd1a      	ble.n	10003ad0 <stdio_out_chars_crlf.part.0+0x74>
        bool prev_char_was_cr = i > 0 ? s[i - 1] == '\r' : driver->last_ended_with_cr;
10003a9a:	2c00      	cmp	r4, #0
10003a9c:	d1ef      	bne.n	10003a7e <stdio_out_chars_crlf.part.0+0x22>
10003a9e:	4643      	mov	r3, r8
        if (s[i] == '\n' && !prev_char_was_cr) {
10003aa0:	5d32      	ldrb	r2, [r6, r4]
        bool prev_char_was_cr = i > 0 ? s[i - 1] == '\r' : driver->last_ended_with_cr;
10003aa2:	7c1b      	ldrb	r3, [r3, #16]
        if (s[i] == '\n' && !prev_char_was_cr) {
10003aa4:	2a0a      	cmp	r2, #10
10003aa6:	d1f3      	bne.n	10003a90 <stdio_out_chars_crlf.part.0+0x34>
10003aa8:	2b00      	cmp	r3, #0
10003aaa:	d1f1      	bne.n	10003a90 <stdio_out_chars_crlf.part.0+0x34>
            if (i > first_of_chunk) {
10003aac:	42a0      	cmp	r0, r4
10003aae:	da04      	bge.n	10003aba <stdio_out_chars_crlf.part.0+0x5e>
                driver->out_chars(&s[first_of_chunk], i - first_of_chunk);
10003ab0:	4643      	mov	r3, r8
10003ab2:	1a21      	subs	r1, r4, r0
10003ab4:	681b      	ldr	r3, [r3, #0]
10003ab6:	1830      	adds	r0, r6, r0
10003ab8:	4798      	blx	r3
            driver->out_chars(crlf_str, 2);
10003aba:	4643      	mov	r3, r8
10003abc:	4650      	mov	r0, sl
10003abe:	681b      	ldr	r3, [r3, #0]
10003ac0:	2102      	movs	r1, #2
10003ac2:	4798      	blx	r3
    for (int i = 0; i < len; i++) {
10003ac4:	3401      	adds	r4, #1
            first_of_chunk = i + 1;
10003ac6:	0028      	movs	r0, r5
10003ac8:	002b      	movs	r3, r5
    for (int i = 0; i < len; i++) {
10003aca:	3501      	adds	r5, #1
10003acc:	429f      	cmp	r7, r3
10003ace:	dce4      	bgt.n	10003a9a <stdio_out_chars_crlf.part.0+0x3e>
        }
    }
    if (first_of_chunk < len) {
10003ad0:	4287      	cmp	r7, r0
10003ad2:	dd04      	ble.n	10003ade <stdio_out_chars_crlf.part.0+0x82>
        driver->out_chars(&s[first_of_chunk], len - first_of_chunk);
10003ad4:	4643      	mov	r3, r8
10003ad6:	1a39      	subs	r1, r7, r0
10003ad8:	681b      	ldr	r3, [r3, #0]
10003ada:	1830      	adds	r0, r6, r0
10003adc:	4798      	blx	r3
    }
    if (len > 0) {
        driver->last_ended_with_cr = s[len - 1] == '\r';
10003ade:	19f6      	adds	r6, r6, r7
10003ae0:	3e01      	subs	r6, #1
10003ae2:	7833      	ldrb	r3, [r6, #0]
10003ae4:	3b0d      	subs	r3, #13
10003ae6:	425a      	negs	r2, r3
10003ae8:	4153      	adcs	r3, r2
10003aea:	4642      	mov	r2, r8
10003aec:	7413      	strb	r3, [r2, #16]
    }
#else
    driver->out_chars(s, len);
#endif
}
10003aee:	bce0      	pop	{r5, r6, r7}
10003af0:	46ba      	mov	sl, r7
10003af2:	46b1      	mov	r9, r6
10003af4:	46a8      	mov	r8, r5
10003af6:	bdf0      	pop	{r4, r5, r6, r7, pc}
10003af8:	10010674 	.word	0x10010674

10003afc <stdio_buffered_printer>:
        }
        buffer->used = 0;
    }
}

static void stdio_buffered_printer(char c, void *arg) {
10003afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10003afe:	46ce      	mov	lr, r9
10003b00:	4647      	mov	r7, r8
10003b02:	000d      	movs	r5, r1
    stdio_stack_buffer_t *buffer = (stdio_stack_buffer_t *)arg;
    if (buffer->used == PICO_STDIO_STACK_BUFFER_SIZE) {
10003b04:	6809      	ldr	r1, [r1, #0]
static void stdio_buffered_printer(char c, void *arg) {
10003b06:	0006      	movs	r6, r0
10003b08:	b580      	push	{r7, lr}
    if (buffer->used == PICO_STDIO_STACK_BUFFER_SIZE) {
10003b0a:	2980      	cmp	r1, #128	; 0x80
10003b0c:	d007      	beq.n	10003b1e <stdio_buffered_printer+0x22>
        stdio_stack_buffer_flush(buffer);
    }
    buffer->buf[buffer->used++] = c;
10003b0e:	1c4b      	adds	r3, r1, #1
10003b10:	602b      	str	r3, [r5, #0]
10003b12:	186d      	adds	r5, r5, r1
10003b14:	712e      	strb	r6, [r5, #4]
}
10003b16:	bcc0      	pop	{r6, r7}
10003b18:	46b9      	mov	r9, r7
10003b1a:	46b0      	mov	r8, r6
10003b1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (stdio_driver_t *d = drivers; d; d = d->next) {
10003b1e:	4b13      	ldr	r3, [pc, #76]	; (10003b6c <stdio_buffered_printer+0x70>)
10003b20:	681c      	ldr	r4, [r3, #0]
10003b22:	2c00      	cmp	r4, #0
10003b24:	d01b      	beq.n	10003b5e <stdio_buffered_printer+0x62>
            if (filter && filter != d) continue;
10003b26:	4b12      	ldr	r3, [pc, #72]	; (10003b70 <stdio_buffered_printer+0x74>)
10003b28:	4698      	mov	r8, r3
            stdio_out_chars_crlf(d, buffer->buf, buffer->used);
10003b2a:	1d2b      	adds	r3, r5, #4
10003b2c:	4699      	mov	r9, r3
10003b2e:	e002      	b.n	10003b36 <stdio_buffered_printer+0x3a>
        for (stdio_driver_t *d = drivers; d; d = d->next) {
10003b30:	68e4      	ldr	r4, [r4, #12]
10003b32:	2c00      	cmp	r4, #0
10003b34:	d013      	beq.n	10003b5e <stdio_buffered_printer+0x62>
            if (!d->out_chars) continue;
10003b36:	6827      	ldr	r7, [r4, #0]
10003b38:	2f00      	cmp	r7, #0
10003b3a:	d0f9      	beq.n	10003b30 <stdio_buffered_printer+0x34>
            if (filter && filter != d) continue;
10003b3c:	4643      	mov	r3, r8
10003b3e:	681b      	ldr	r3, [r3, #0]
10003b40:	2b00      	cmp	r3, #0
10003b42:	d001      	beq.n	10003b48 <stdio_buffered_printer+0x4c>
10003b44:	429c      	cmp	r4, r3
10003b46:	d1f3      	bne.n	10003b30 <stdio_buffered_printer+0x34>
    if (!driver->crlf_enabled) {
10003b48:	7c63      	ldrb	r3, [r4, #17]
            stdio_out_chars_crlf(d, buffer->buf, buffer->used);
10003b4a:	682a      	ldr	r2, [r5, #0]
    if (!driver->crlf_enabled) {
10003b4c:	2b00      	cmp	r3, #0
10003b4e:	d009      	beq.n	10003b64 <stdio_buffered_printer+0x68>
10003b50:	0020      	movs	r0, r4
10003b52:	4649      	mov	r1, r9
10003b54:	f7ff ff82 	bl	10003a5c <stdio_out_chars_crlf.part.0>
        for (stdio_driver_t *d = drivers; d; d = d->next) {
10003b58:	68e4      	ldr	r4, [r4, #12]
10003b5a:	2c00      	cmp	r4, #0
10003b5c:	d1eb      	bne.n	10003b36 <stdio_buffered_printer+0x3a>
}
10003b5e:	2301      	movs	r3, #1
10003b60:	2100      	movs	r1, #0
10003b62:	e7d5      	b.n	10003b10 <stdio_buffered_printer+0x14>
        driver->out_chars(s, len);
10003b64:	0011      	movs	r1, r2
10003b66:	4648      	mov	r0, r9
10003b68:	47b8      	blx	r7
        return;
10003b6a:	e7e1      	b.n	10003b30 <stdio_buffered_printer+0x34>
10003b6c:	20012098 	.word	0x20012098
10003b70:	200120a0 	.word	0x200120a0

10003b74 <stdio_put_string.isra.0>:
static bool stdio_put_string(const char *s, int len, bool newline) {
10003b74:	b5f0      	push	{r4, r5, r6, r7, lr}
10003b76:	4657      	mov	r7, sl
10003b78:	4645      	mov	r5, r8
10003b7a:	46de      	mov	lr, fp
10003b7c:	464e      	mov	r6, r9
 *  \ingroup hardware_sync
 *
 * \return The core number the call was made from
 */
static inline uint get_core_num() {
    return (*(uint32_t *) (SIO_BASE + SIO_CPUID_OFFSET));
10003b7e:	23d0      	movs	r3, #208	; 0xd0
10003b80:	b5e0      	push	{r5, r6, r7, lr}
10003b82:	061b      	lsls	r3, r3, #24
10003b84:	681c      	ldr	r4, [r3, #0]
    if (!mutex_try_enter(&print_mutex, &owner)) {
10003b86:	4b35      	ldr	r3, [pc, #212]	; (10003c5c <stdio_put_string.isra.0+0xe8>)
static bool stdio_put_string(const char *s, int len, bool newline) {
10003b88:	b083      	sub	sp, #12
10003b8a:	0007      	movs	r7, r0
10003b8c:	000d      	movs	r5, r1
    if (!mutex_try_enter(&print_mutex, &owner)) {
10003b8e:	0018      	movs	r0, r3
10003b90:	a901      	add	r1, sp, #4
static bool stdio_put_string(const char *s, int len, bool newline) {
10003b92:	4690      	mov	r8, r2
    if (!mutex_try_enter(&print_mutex, &owner)) {
10003b94:	469a      	mov	sl, r3
10003b96:	f00c fbd3 	bl	10010340 <__mutex_try_enter_veneer>
10003b9a:	4681      	mov	r9, r0
10003b9c:	2800      	cmp	r0, #0
10003b9e:	d107      	bne.n	10003bb0 <stdio_put_string.isra.0+0x3c>
        if (owner == core_num) {
10003ba0:	9b01      	ldr	r3, [sp, #4]
10003ba2:	429c      	cmp	r4, r3
10003ba4:	d004      	beq.n	10003bb0 <stdio_put_string.isra.0+0x3c>
        mutex_enter_blocking(&print_mutex);
10003ba6:	4650      	mov	r0, sl
10003ba8:	f00c fbe2 	bl	10010370 <__mutex_enter_blocking_veneer>
    return true;
10003bac:	2301      	movs	r3, #1
10003bae:	4699      	mov	r9, r3
    if (len == -1) len = strlen(s);
10003bb0:	1c6b      	adds	r3, r5, #1
10003bb2:	d103      	bne.n	10003bbc <stdio_put_string.isra.0+0x48>
10003bb4:	0038      	movs	r0, r7
10003bb6:	f00c fa47 	bl	10010048 <strlen>
10003bba:	0005      	movs	r5, r0
    for (stdio_driver_t *driver = drivers; driver; driver = driver->next) {
10003bbc:	4b28      	ldr	r3, [pc, #160]	; (10003c60 <stdio_put_string.isra.0+0xec>)
10003bbe:	681c      	ldr	r4, [r3, #0]
10003bc0:	2c00      	cmp	r4, #0
10003bc2:	d02f      	beq.n	10003c24 <stdio_put_string.isra.0+0xb0>
            const char c = '\n';
10003bc4:	230a      	movs	r3, #10
        if (filter && filter != driver) continue;
10003bc6:	4e27      	ldr	r6, [pc, #156]	; (10003c64 <stdio_put_string.isra.0+0xf0>)
            const char c = '\n';
10003bc8:	469b      	mov	fp, r3
10003bca:	e002      	b.n	10003bd2 <stdio_put_string.isra.0+0x5e>
    for (stdio_driver_t *driver = drivers; driver; driver = driver->next) {
10003bcc:	68e4      	ldr	r4, [r4, #12]
10003bce:	2c00      	cmp	r4, #0
10003bd0:	d028      	beq.n	10003c24 <stdio_put_string.isra.0+0xb0>
        if (!driver->out_chars) continue;
10003bd2:	6822      	ldr	r2, [r4, #0]
10003bd4:	2a00      	cmp	r2, #0
10003bd6:	d0f9      	beq.n	10003bcc <stdio_put_string.isra.0+0x58>
        if (filter && filter != driver) continue;
10003bd8:	6833      	ldr	r3, [r6, #0]
10003bda:	2b00      	cmp	r3, #0
10003bdc:	d001      	beq.n	10003be2 <stdio_put_string.isra.0+0x6e>
10003bde:	42a3      	cmp	r3, r4
10003be0:	d1f4      	bne.n	10003bcc <stdio_put_string.isra.0+0x58>
    if (!driver->crlf_enabled) {
10003be2:	7c63      	ldrb	r3, [r4, #17]
10003be4:	2b00      	cmp	r3, #0
10003be6:	d027      	beq.n	10003c38 <stdio_put_string.isra.0+0xc4>
10003be8:	002a      	movs	r2, r5
10003bea:	0039      	movs	r1, r7
10003bec:	0020      	movs	r0, r4
10003bee:	f7ff ff35 	bl	10003a5c <stdio_out_chars_crlf.part.0>
        if (newline) {
10003bf2:	4643      	mov	r3, r8
10003bf4:	2b00      	cmp	r3, #0
10003bf6:	d0e9      	beq.n	10003bcc <stdio_put_string.isra.0+0x58>
            const char c = '\n';
10003bf8:	466b      	mov	r3, sp
10003bfa:	465a      	mov	r2, fp
10003bfc:	711a      	strb	r2, [r3, #4]
    if (!driver->crlf_enabled) {
10003bfe:	7c63      	ldrb	r3, [r4, #17]
10003c00:	2b00      	cmp	r3, #0
10003c02:	d01d      	beq.n	10003c40 <stdio_put_string.isra.0+0xcc>
        if (s[i] == '\n' && !prev_char_was_cr) {
10003c04:	7c23      	ldrb	r3, [r4, #16]
10003c06:	2b00      	cmp	r3, #0
10003c08:	d023      	beq.n	10003c52 <stdio_put_string.isra.0+0xde>
        driver->out_chars(&s[first_of_chunk], len - first_of_chunk);
10003c0a:	2101      	movs	r1, #1
10003c0c:	6823      	ldr	r3, [r4, #0]
10003c0e:	a801      	add	r0, sp, #4
10003c10:	4798      	blx	r3
        driver->last_ended_with_cr = s[len - 1] == '\r';
10003c12:	466b      	mov	r3, sp
10003c14:	791b      	ldrb	r3, [r3, #4]
10003c16:	3b0d      	subs	r3, #13
10003c18:	425a      	negs	r2, r3
10003c1a:	4153      	adcs	r3, r2
10003c1c:	7423      	strb	r3, [r4, #16]
    for (stdio_driver_t *driver = drivers; driver; driver = driver->next) {
10003c1e:	68e4      	ldr	r4, [r4, #12]
10003c20:	2c00      	cmp	r4, #0
10003c22:	d1d6      	bne.n	10003bd2 <stdio_put_string.isra.0+0x5e>
    if (serialzed) {
10003c24:	464b      	mov	r3, r9
10003c26:	2b00      	cmp	r3, #0
10003c28:	d10f      	bne.n	10003c4a <stdio_put_string.isra.0+0xd6>
}
10003c2a:	b003      	add	sp, #12
10003c2c:	bcf0      	pop	{r4, r5, r6, r7}
10003c2e:	46bb      	mov	fp, r7
10003c30:	46b2      	mov	sl, r6
10003c32:	46a9      	mov	r9, r5
10003c34:	46a0      	mov	r8, r4
10003c36:	bdf0      	pop	{r4, r5, r6, r7, pc}
        driver->out_chars(s, len);
10003c38:	0029      	movs	r1, r5
10003c3a:	0038      	movs	r0, r7
10003c3c:	4790      	blx	r2
        return;
10003c3e:	e7d8      	b.n	10003bf2 <stdio_put_string.isra.0+0x7e>
        driver->out_chars(s, len);
10003c40:	2101      	movs	r1, #1
10003c42:	6823      	ldr	r3, [r4, #0]
10003c44:	a801      	add	r0, sp, #4
10003c46:	4798      	blx	r3
        return;
10003c48:	e7c0      	b.n	10003bcc <stdio_put_string.isra.0+0x58>
    mutex_exit(&print_mutex);
10003c4a:	4650      	mov	r0, sl
10003c4c:	f00c fb60 	bl	10010310 <__mutex_exit_veneer>
    return len;
10003c50:	e7eb      	b.n	10003c2a <stdio_put_string.isra.0+0xb6>
            driver->out_chars(crlf_str, 2);
10003c52:	2102      	movs	r1, #2
10003c54:	4804      	ldr	r0, [pc, #16]	; (10003c68 <stdio_put_string.isra.0+0xf4>)
10003c56:	6823      	ldr	r3, [r4, #0]
10003c58:	4798      	blx	r3
    if (first_of_chunk < len) {
10003c5a:	e7da      	b.n	10003c12 <stdio_put_string.isra.0+0x9e>
10003c5c:	20003030 	.word	0x20003030
10003c60:	20012098 	.word	0x20012098
10003c64:	200120a0 	.word	0x200120a0
10003c68:	10010674 	.word	0x10010674

10003c6c <__wrap_putchar>:
int WRAPPER_FUNC(putchar)(int c) {
10003c6c:	b510      	push	{r4, lr}
10003c6e:	b082      	sub	sp, #8
    char cc = c;
10003c70:	466b      	mov	r3, sp
int WRAPPER_FUNC(putchar)(int c) {
10003c72:	0004      	movs	r4, r0
    stdio_put_string(&cc, 1, false);
10003c74:	2200      	movs	r2, #0
    char cc = c;
10003c76:	1dd8      	adds	r0, r3, #7
    stdio_put_string(&cc, 1, false);
10003c78:	2101      	movs	r1, #1
    char cc = c;
10003c7a:	7004      	strb	r4, [r0, #0]
    stdio_put_string(&cc, 1, false);
10003c7c:	f7ff ff7a 	bl	10003b74 <stdio_put_string.isra.0>
}
10003c80:	0020      	movs	r0, r4
10003c82:	b002      	add	sp, #8
10003c84:	bd10      	pop	{r4, pc}
10003c86:	46c0      	nop			; (mov r8, r8)

10003c88 <__wrap_puts>:
int WRAPPER_FUNC(puts)(const char *s) {
10003c88:	b570      	push	{r4, r5, r6, lr}
10003c8a:	0004      	movs	r4, r0
    int len = strlen(s);
10003c8c:	f00c f9dc 	bl	10010048 <strlen>
    stdio_put_string(s, len, true);
10003c90:	2201      	movs	r2, #1
10003c92:	0001      	movs	r1, r0
    int len = strlen(s);
10003c94:	0005      	movs	r5, r0
    stdio_put_string(s, len, true);
10003c96:	0020      	movs	r0, r4
10003c98:	f7ff ff6c 	bl	10003b74 <stdio_put_string.isra.0>
    for (stdio_driver_t *d = drivers; d; d = d->next) {
10003c9c:	4b08      	ldr	r3, [pc, #32]	; (10003cc0 <__wrap_puts+0x38>)
10003c9e:	681c      	ldr	r4, [r3, #0]
10003ca0:	2c00      	cmp	r4, #0
10003ca2:	d006      	beq.n	10003cb2 <__wrap_puts+0x2a>
        if (d->out_flush) d->out_flush();
10003ca4:	6863      	ldr	r3, [r4, #4]
10003ca6:	2b00      	cmp	r3, #0
10003ca8:	d005      	beq.n	10003cb6 <__wrap_puts+0x2e>
10003caa:	4798      	blx	r3
    for (stdio_driver_t *d = drivers; d; d = d->next) {
10003cac:	68e4      	ldr	r4, [r4, #12]
10003cae:	2c00      	cmp	r4, #0
10003cb0:	d1f8      	bne.n	10003ca4 <__wrap_puts+0x1c>
}
10003cb2:	0028      	movs	r0, r5
10003cb4:	bd70      	pop	{r4, r5, r6, pc}
    for (stdio_driver_t *d = drivers; d; d = d->next) {
10003cb6:	68e4      	ldr	r4, [r4, #12]
10003cb8:	2c00      	cmp	r4, #0
10003cba:	d1f3      	bne.n	10003ca4 <__wrap_puts+0x1c>
10003cbc:	e7f9      	b.n	10003cb2 <__wrap_puts+0x2a>
10003cbe:	46c0      	nop			; (mov r8, r8)
10003cc0:	20012098 	.word	0x20012098

10003cc4 <stdio_set_driver_enabled>:
    stdio_driver_t *prev = drivers;
10003cc4:	4a0d      	ldr	r2, [pc, #52]	; (10003cfc <stdio_set_driver_enabled+0x38>)
10003cc6:	6813      	ldr	r3, [r2, #0]
    for (stdio_driver_t *d = drivers; d; d = d->next) {
10003cc8:	2b00      	cmp	r3, #0
10003cca:	d013      	beq.n	10003cf4 <stdio_set_driver_enabled+0x30>
        if (d == driver) {
10003ccc:	4283      	cmp	r3, r0
10003cce:	d102      	bne.n	10003cd6 <stdio_set_driver_enabled+0x12>
10003cd0:	e009      	b.n	10003ce6 <stdio_set_driver_enabled+0x22>
10003cd2:	4298      	cmp	r0, r3
10003cd4:	d008      	beq.n	10003ce8 <stdio_set_driver_enabled+0x24>
    for (stdio_driver_t *d = drivers; d; d = d->next) {
10003cd6:	001a      	movs	r2, r3
10003cd8:	68db      	ldr	r3, [r3, #12]
10003cda:	2b00      	cmp	r3, #0
10003cdc:	d1f9      	bne.n	10003cd2 <stdio_set_driver_enabled+0xe>
    if (enable) {
10003cde:	2900      	cmp	r1, #0
10003ce0:	d000      	beq.n	10003ce4 <stdio_set_driver_enabled+0x20>
        if (prev) prev->next = driver;
10003ce2:	60d0      	str	r0, [r2, #12]
}
10003ce4:	4770      	bx	lr
        if (d == driver) {
10003ce6:	001a      	movs	r2, r3
            if (!enable) {
10003ce8:	2900      	cmp	r1, #0
10003cea:	d1fb      	bne.n	10003ce4 <stdio_set_driver_enabled+0x20>
                prev->next = d->next;
10003cec:	68db      	ldr	r3, [r3, #12]
10003cee:	60d3      	str	r3, [r2, #12]
                driver->next = NULL;
10003cf0:	60c1      	str	r1, [r0, #12]
10003cf2:	e7f7      	b.n	10003ce4 <stdio_set_driver_enabled+0x20>
    if (enable) {
10003cf4:	2900      	cmp	r1, #0
10003cf6:	d0f5      	beq.n	10003ce4 <stdio_set_driver_enabled+0x20>
        else drivers = driver;
10003cf8:	6010      	str	r0, [r2, #0]
10003cfa:	e7f3      	b.n	10003ce4 <stdio_set_driver_enabled+0x20>
10003cfc:	20012098 	.word	0x20012098

10003d00 <__wrap_vprintf>:

int WRAPPER_FUNC(vprintf)(const char *format, va_list va) {
10003d00:	b5f0      	push	{r4, r5, r6, r7, lr}
10003d02:	4646      	mov	r6, r8
10003d04:	46d6      	mov	lr, sl
10003d06:	464f      	mov	r7, r9
10003d08:	23d0      	movs	r3, #208	; 0xd0
10003d0a:	b5c0      	push	{r6, r7, lr}
10003d0c:	061b      	lsls	r3, r3, #24
10003d0e:	681f      	ldr	r7, [r3, #0]
    if (!mutex_try_enter(&print_mutex, &owner)) {
10003d10:	4b31      	ldr	r3, [pc, #196]	; (10003dd8 <__wrap_vprintf+0xd8>)
int WRAPPER_FUNC(vprintf)(const char *format, va_list va) {
10003d12:	b0a2      	sub	sp, #136	; 0x88
10003d14:	0004      	movs	r4, r0
10003d16:	000d      	movs	r5, r1
    if (!mutex_try_enter(&print_mutex, &owner)) {
10003d18:	0018      	movs	r0, r3
10003d1a:	a901      	add	r1, sp, #4
10003d1c:	4698      	mov	r8, r3
10003d1e:	f00c fb0f 	bl	10010340 <__mutex_try_enter_veneer>
10003d22:	1e06      	subs	r6, r0, #0
10003d24:	d106      	bne.n	10003d34 <__wrap_vprintf+0x34>
        if (owner == core_num) {
10003d26:	9b01      	ldr	r3, [sp, #4]
10003d28:	429f      	cmp	r7, r3
10003d2a:	d003      	beq.n	10003d34 <__wrap_vprintf+0x34>
        mutex_enter_blocking(&print_mutex);
10003d2c:	4640      	mov	r0, r8
10003d2e:	f00c fb1f 	bl	10010370 <__mutex_enter_blocking_veneer>
    return true;
10003d32:	3601      	adds	r6, #1
        return 0;
#endif
    }
    int ret;
#if PICO_PRINTF_PICO
    struct stdio_stack_buffer buffer = {.used = 0};
10003d34:	2284      	movs	r2, #132	; 0x84
10003d36:	2100      	movs	r1, #0
10003d38:	a801      	add	r0, sp, #4
10003d3a:	f7fd f9d3 	bl	100010e4 <__wrap_memset>
    ret = vfctprintf(stdio_buffered_printer, &buffer, format, va);
10003d3e:	002b      	movs	r3, r5
10003d40:	0022      	movs	r2, r4
10003d42:	4826      	ldr	r0, [pc, #152]	; (10003ddc <__wrap_vprintf+0xdc>)
10003d44:	a901      	add	r1, sp, #4
10003d46:	f7ff fdb1 	bl	100038ac <vfctprintf>
    if (buffer->used) {
10003d4a:	9b01      	ldr	r3, [sp, #4]
    ret = vfctprintf(stdio_buffered_printer, &buffer, format, va);
10003d4c:	0007      	movs	r7, r0
    if (buffer->used) {
10003d4e:	2b00      	cmp	r3, #0
10003d50:	d115      	bne.n	10003d7e <__wrap_vprintf+0x7e>
    for (stdio_driver_t *d = drivers; d; d = d->next) {
10003d52:	4b23      	ldr	r3, [pc, #140]	; (10003de0 <__wrap_vprintf+0xe0>)
10003d54:	681c      	ldr	r4, [r3, #0]
10003d56:	2c00      	cmp	r4, #0
10003d58:	d006      	beq.n	10003d68 <__wrap_vprintf+0x68>
        if (d->out_flush) d->out_flush();
10003d5a:	6863      	ldr	r3, [r4, #4]
10003d5c:	2b00      	cmp	r3, #0
10003d5e:	d00c      	beq.n	10003d7a <__wrap_vprintf+0x7a>
10003d60:	4798      	blx	r3
    for (stdio_driver_t *d = drivers; d; d = d->next) {
10003d62:	68e4      	ldr	r4, [r4, #12]
10003d64:	2c00      	cmp	r4, #0
10003d66:	d1f8      	bne.n	10003d5a <__wrap_vprintf+0x5a>
    printf_none_assert();
#else
    extern int REAL_FUNC(vprintf)(const char *format, va_list va);
    ret = REAL_FUNC(vprintf)(format, va);
#endif
    if (serialzed) {
10003d68:	2e00      	cmp	r6, #0
10003d6a:	d12f      	bne.n	10003dcc <__wrap_vprintf+0xcc>
        stdout_serialize_end();
    }
    return ret;
}
10003d6c:	0038      	movs	r0, r7
10003d6e:	b022      	add	sp, #136	; 0x88
10003d70:	bce0      	pop	{r5, r6, r7}
10003d72:	46ba      	mov	sl, r7
10003d74:	46b1      	mov	r9, r6
10003d76:	46a8      	mov	r8, r5
10003d78:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for (stdio_driver_t *d = drivers; d; d = d->next) {
10003d7a:	68e4      	ldr	r4, [r4, #12]
10003d7c:	e7eb      	b.n	10003d56 <__wrap_vprintf+0x56>
        for (stdio_driver_t *d = drivers; d; d = d->next) {
10003d7e:	4b18      	ldr	r3, [pc, #96]	; (10003de0 <__wrap_vprintf+0xe0>)
10003d80:	681d      	ldr	r5, [r3, #0]
10003d82:	469a      	mov	sl, r3
10003d84:	2d00      	cmp	r5, #0
10003d86:	d025      	beq.n	10003dd4 <__wrap_vprintf+0xd4>
            if (filter && filter != d) continue;
10003d88:	4b16      	ldr	r3, [pc, #88]	; (10003de4 <__wrap_vprintf+0xe4>)
10003d8a:	4699      	mov	r9, r3
10003d8c:	e002      	b.n	10003d94 <__wrap_vprintf+0x94>
        for (stdio_driver_t *d = drivers; d; d = d->next) {
10003d8e:	68ed      	ldr	r5, [r5, #12]
10003d90:	2d00      	cmp	r5, #0
10003d92:	d013      	beq.n	10003dbc <__wrap_vprintf+0xbc>
            if (!d->out_chars) continue;
10003d94:	682c      	ldr	r4, [r5, #0]
10003d96:	2c00      	cmp	r4, #0
10003d98:	d0f9      	beq.n	10003d8e <__wrap_vprintf+0x8e>
            if (filter && filter != d) continue;
10003d9a:	464b      	mov	r3, r9
10003d9c:	681b      	ldr	r3, [r3, #0]
10003d9e:	2b00      	cmp	r3, #0
10003da0:	d001      	beq.n	10003da6 <__wrap_vprintf+0xa6>
10003da2:	429d      	cmp	r5, r3
10003da4:	d1f3      	bne.n	10003d8e <__wrap_vprintf+0x8e>
    if (!driver->crlf_enabled) {
10003da6:	7c6b      	ldrb	r3, [r5, #17]
            stdio_out_chars_crlf(d, buffer->buf, buffer->used);
10003da8:	9a01      	ldr	r2, [sp, #4]
    if (!driver->crlf_enabled) {
10003daa:	2b00      	cmp	r3, #0
10003dac:	d00a      	beq.n	10003dc4 <__wrap_vprintf+0xc4>
10003dae:	0028      	movs	r0, r5
10003db0:	a902      	add	r1, sp, #8
10003db2:	f7ff fe53 	bl	10003a5c <stdio_out_chars_crlf.part.0>
        for (stdio_driver_t *d = drivers; d; d = d->next) {
10003db6:	68ed      	ldr	r5, [r5, #12]
10003db8:	2d00      	cmp	r5, #0
10003dba:	d1eb      	bne.n	10003d94 <__wrap_vprintf+0x94>
    for (stdio_driver_t *d = drivers; d; d = d->next) {
10003dbc:	4653      	mov	r3, sl
        buffer->used = 0;
10003dbe:	9501      	str	r5, [sp, #4]
    for (stdio_driver_t *d = drivers; d; d = d->next) {
10003dc0:	681c      	ldr	r4, [r3, #0]
}
10003dc2:	e7c8      	b.n	10003d56 <__wrap_vprintf+0x56>
        driver->out_chars(s, len);
10003dc4:	0011      	movs	r1, r2
10003dc6:	a802      	add	r0, sp, #8
10003dc8:	47a0      	blx	r4
        return;
10003dca:	e7e0      	b.n	10003d8e <__wrap_vprintf+0x8e>
    mutex_exit(&print_mutex);
10003dcc:	4640      	mov	r0, r8
10003dce:	f00c fa9f 	bl	10010310 <__mutex_exit_veneer>
    return ret;
10003dd2:	e7cb      	b.n	10003d6c <__wrap_vprintf+0x6c>
        buffer->used = 0;
10003dd4:	9501      	str	r5, [sp, #4]
    for (stdio_driver_t *d = drivers; d; d = d->next) {
10003dd6:	e7c7      	b.n	10003d68 <__wrap_vprintf+0x68>
10003dd8:	20003030 	.word	0x20003030
10003ddc:	10003afd 	.word	0x10003afd
10003de0:	20012098 	.word	0x20012098
10003de4:	200120a0 	.word	0x200120a0

10003de8 <__wrap_printf>:

int __printflike(1, 0) WRAPPER_FUNC(printf)(const char* format, ...)
{
10003de8:	b40f      	push	{r0, r1, r2, r3}
10003dea:	b500      	push	{lr}
10003dec:	b083      	sub	sp, #12
10003dee:	a904      	add	r1, sp, #16
10003df0:	c901      	ldmia	r1!, {r0}
    va_list va;
    va_start(va, format);
10003df2:	9101      	str	r1, [sp, #4]
    int ret = vprintf(format, va);
10003df4:	f7ff ff84 	bl	10003d00 <__wrap_vprintf>
    va_end(va);
    return ret;
}
10003df8:	b003      	add	sp, #12
10003dfa:	bc08      	pop	{r3}
10003dfc:	b004      	add	sp, #16
10003dfe:	4718      	bx	r3

10003e00 <stdio_init_all>:

void stdio_init_all() {
10003e00:	b510      	push	{r4, lr}
#if PICO_STDIO_SEMIHOSTING
    stdio_semihosting_init();
#endif

#if PICO_STDIO_USB
    stdio_usb_init();
10003e02:	f000 f8c1 	bl	10003f88 <stdio_usb_init>
#endif
}
10003e06:	bd10      	pop	{r4, pc}

10003e08 <stdio_usb_in_chars>:
        last_avail_time = 0;
    }
    mutex_exit(&stdio_usb_mutex);
}

int stdio_usb_in_chars(char *buf, int length) {
10003e08:	b570      	push	{r4, r5, r6, lr}
    uint32_t owner;
    if (!mutex_try_enter(&stdio_usb_mutex, &owner)) {
10003e0a:	4c18      	ldr	r4, [pc, #96]	; (10003e6c <stdio_usb_in_chars+0x64>)
int stdio_usb_in_chars(char *buf, int length) {
10003e0c:	b082      	sub	sp, #8
10003e0e:	0006      	movs	r6, r0
10003e10:	000d      	movs	r5, r1
    if (!mutex_try_enter(&stdio_usb_mutex, &owner)) {
10003e12:	0020      	movs	r0, r4
10003e14:	a901      	add	r1, sp, #4
10003e16:	f00c fa93 	bl	10010340 <__mutex_try_enter_veneer>
10003e1a:	2800      	cmp	r0, #0
10003e1c:	d108      	bne.n	10003e30 <stdio_usb_in_chars+0x28>
        if (owner == get_core_num()) return PICO_ERROR_NO_DATA; // would deadlock otherwise
10003e1e:	23d0      	movs	r3, #208	; 0xd0
10003e20:	061b      	lsls	r3, r3, #24
10003e22:	681b      	ldr	r3, [r3, #0]
10003e24:	9a01      	ldr	r2, [sp, #4]
10003e26:	429a      	cmp	r2, r3
10003e28:	d01c      	beq.n	10003e64 <stdio_usb_in_chars+0x5c>
        mutex_enter_blocking(&stdio_usb_mutex);
10003e2a:	0020      	movs	r0, r4
10003e2c:	f00c faa0 	bl	10010370 <__mutex_enter_blocking_veneer>
  return tud_cdc_n_write(itf, str, strlen(str));
}

static inline bool tud_cdc_connected (void)
{
  return tud_cdc_n_connected(0);
10003e30:	2000      	movs	r0, #0
10003e32:	f000 feeb 	bl	10004c0c <tud_cdc_n_connected>
    }
    int rc = PICO_ERROR_NO_DATA;
    if (tud_cdc_connected() && tud_cdc_available()) {
10003e36:	2800      	cmp	r0, #0
10003e38:	d107      	bne.n	10003e4a <stdio_usb_in_chars+0x42>
    int rc = PICO_ERROR_NO_DATA;
10003e3a:	2503      	movs	r5, #3
10003e3c:	426d      	negs	r5, r5
        int count = tud_cdc_read(buf, length);
        rc =  count ? count : PICO_ERROR_NO_DATA;
    }
    mutex_exit(&stdio_usb_mutex);
10003e3e:	0020      	movs	r0, r4
10003e40:	f00c fa66 	bl	10010310 <__mutex_exit_veneer>
    return rc;
}
10003e44:	0028      	movs	r0, r5
10003e46:	b002      	add	sp, #8
10003e48:	bd70      	pop	{r4, r5, r6, pc}
  tud_cdc_n_set_wanted_char(0, wanted);
}

static inline uint32_t tud_cdc_available (void)
{
  return tud_cdc_n_available(0);
10003e4a:	2000      	movs	r0, #0
10003e4c:	f000 fef8 	bl	10004c40 <tud_cdc_n_available>
    if (tud_cdc_connected() && tud_cdc_available()) {
10003e50:	2800      	cmp	r0, #0
10003e52:	d0f2      	beq.n	10003e3a <stdio_usb_in_chars+0x32>
  return tud_cdc_n_read_char(0);
}

static inline uint32_t tud_cdc_read (void* buffer, uint32_t bufsize)
{
  return tud_cdc_n_read(0, buffer, bufsize);
10003e54:	002a      	movs	r2, r5
10003e56:	0031      	movs	r1, r6
10003e58:	2000      	movs	r0, #0
10003e5a:	f000 feff 	bl	10004c5c <tud_cdc_n_read>
10003e5e:	1e05      	subs	r5, r0, #0
        rc =  count ? count : PICO_ERROR_NO_DATA;
10003e60:	d0eb      	beq.n	10003e3a <stdio_usb_in_chars+0x32>
10003e62:	e7ec      	b.n	10003e3e <stdio_usb_in_chars+0x36>
        if (owner == get_core_num()) return PICO_ERROR_NO_DATA; // would deadlock otherwise
10003e64:	2503      	movs	r5, #3
10003e66:	426d      	negs	r5, r5
10003e68:	e7ec      	b.n	10003e44 <stdio_usb_in_chars+0x3c>
10003e6a:	46c0      	nop			; (mov r8, r8)
10003e6c:	2001274c 	.word	0x2001274c

10003e70 <stdio_usb_out_chars>:
static void stdio_usb_out_chars(const char *buf, int length) {
10003e70:	b5f0      	push	{r4, r5, r6, r7, lr}
10003e72:	46de      	mov	lr, fp
10003e74:	464f      	mov	r7, r9
10003e76:	4646      	mov	r6, r8
10003e78:	b5c0      	push	{r6, r7, lr}
    if (!mutex_try_enter(&stdio_usb_mutex, &owner)) {
10003e7a:	4b33      	ldr	r3, [pc, #204]	; (10003f48 <stdio_usb_out_chars+0xd8>)
static void stdio_usb_out_chars(const char *buf, int length) {
10003e7c:	b082      	sub	sp, #8
10003e7e:	4681      	mov	r9, r0
10003e80:	000d      	movs	r5, r1
    if (!mutex_try_enter(&stdio_usb_mutex, &owner)) {
10003e82:	0018      	movs	r0, r3
10003e84:	a901      	add	r1, sp, #4
10003e86:	469b      	mov	fp, r3
10003e88:	f00c fa5a 	bl	10010340 <__mutex_try_enter_veneer>
10003e8c:	2800      	cmp	r0, #0
10003e8e:	d108      	bne.n	10003ea2 <stdio_usb_out_chars+0x32>
        if (owner == get_core_num()) return; // would deadlock otherwise
10003e90:	23d0      	movs	r3, #208	; 0xd0
10003e92:	061b      	lsls	r3, r3, #24
10003e94:	681b      	ldr	r3, [r3, #0]
10003e96:	9a01      	ldr	r2, [sp, #4]
10003e98:	429a      	cmp	r2, r3
10003e9a:	d04f      	beq.n	10003f3c <stdio_usb_out_chars+0xcc>
        mutex_enter_blocking(&stdio_usb_mutex);
10003e9c:	4658      	mov	r0, fp
10003e9e:	f00c fa67 	bl	10010370 <__mutex_enter_blocking_veneer>
  return tud_cdc_n_connected(0);
10003ea2:	2000      	movs	r0, #0
10003ea4:	f000 feb2 	bl	10004c0c <tud_cdc_n_connected>
    if (tud_cdc_connected()) {
10003ea8:	2800      	cmp	r0, #0
10003eaa:	d03f      	beq.n	10003f2c <stdio_usb_out_chars+0xbc>
        for (int i = 0; i < length;) {
10003eac:	2400      	movs	r4, #0
10003eae:	2d00      	cmp	r5, #0
10003eb0:	dd41      	ble.n	10003f36 <stdio_usb_out_chars+0xc6>
                    (!tud_cdc_write_available() && time_us_64() > last_avail_time + PICO_STDIO_USB_STDOUT_TIMEOUT_US)) {
10003eb2:	4e26      	ldr	r6, [pc, #152]	; (10003f4c <stdio_usb_out_chars+0xdc>)
10003eb4:	e011      	b.n	10003eda <stdio_usb_out_chars+0x6a>
                int n2 = tud_cdc_write(buf + i, n);
10003eb6:	464b      	mov	r3, r9
  return tud_cdc_n_write_char(0, ch);
}

static inline uint32_t tud_cdc_write (void const* buffer, uint32_t bufsize)
{
  return tud_cdc_n_write(0, buffer, bufsize);
10003eb8:	2000      	movs	r0, #0
10003eba:	1919      	adds	r1, r3, r4
10003ebc:	f000 ff5a 	bl	10004d74 <tud_cdc_n_write>
10003ec0:	4680      	mov	r8, r0
                tud_task();
10003ec2:	f001 fbab 	bl	1000561c <tud_task>
  return tud_cdc_n_write_str(0, str);
}

static inline uint32_t tud_cdc_write_flush (void)
{
  return tud_cdc_n_write_flush(0);
10003ec6:	2000      	movs	r0, #0
10003ec8:	f000 ff02 	bl	10004cd0 <tud_cdc_n_write_flush>
                last_avail_time = time_us_64();
10003ecc:	f000 fd9a 	bl	10004a04 <time_us_64>
10003ed0:	6030      	str	r0, [r6, #0]
10003ed2:	6071      	str	r1, [r6, #4]
                i += n2;
10003ed4:	4444      	add	r4, r8
        for (int i = 0; i < length;) {
10003ed6:	42ac      	cmp	r4, r5
10003ed8:	da2d      	bge.n	10003f36 <stdio_usb_out_chars+0xc6>
}

static inline uint32_t tud_cdc_write_available(void)
{
  return tud_cdc_n_write_available(0);
10003eda:	2000      	movs	r0, #0
10003edc:	f000 ff66 	bl	10004dac <tud_cdc_n_write_available>
            int n = length - i;
10003ee0:	1b2f      	subs	r7, r5, r4
10003ee2:	0002      	movs	r2, r0
            if (n > avail) n = avail;
10003ee4:	42b8      	cmp	r0, r7
10003ee6:	dd00      	ble.n	10003eea <stdio_usb_out_chars+0x7a>
10003ee8:	003a      	movs	r2, r7
            if (n) {
10003eea:	2a00      	cmp	r2, #0
10003eec:	d1e3      	bne.n	10003eb6 <stdio_usb_out_chars+0x46>
                tud_task();
10003eee:	f001 fb95 	bl	1000561c <tud_task>
  return tud_cdc_n_write_flush(0);
10003ef2:	2000      	movs	r0, #0
10003ef4:	f000 feec 	bl	10004cd0 <tud_cdc_n_write_flush>
  return tud_cdc_n_connected(0);
10003ef8:	2000      	movs	r0, #0
10003efa:	f000 fe87 	bl	10004c0c <tud_cdc_n_connected>
                if (!tud_cdc_connected() ||
10003efe:	2800      	cmp	r0, #0
10003f00:	d019      	beq.n	10003f36 <stdio_usb_out_chars+0xc6>
  return tud_cdc_n_write_available(0);
10003f02:	2000      	movs	r0, #0
10003f04:	f000 ff52 	bl	10004dac <tud_cdc_n_write_available>
10003f08:	2800      	cmp	r0, #0
10003f0a:	d1e4      	bne.n	10003ed6 <stdio_usb_out_chars+0x66>
                    (!tud_cdc_write_available() && time_us_64() > last_avail_time + PICO_STDIO_USB_STDOUT_TIMEOUT_US)) {
10003f0c:	f000 fd7a 	bl	10004a04 <time_us_64>
10003f10:	6832      	ldr	r2, [r6, #0]
10003f12:	6873      	ldr	r3, [r6, #4]
10003f14:	000f      	movs	r7, r1
10003f16:	2100      	movs	r1, #0
10003f18:	4684      	mov	ip, r0
10003f1a:	480d      	ldr	r0, [pc, #52]	; (10003f50 <stdio_usb_out_chars+0xe0>)
10003f1c:	1812      	adds	r2, r2, r0
10003f1e:	414b      	adcs	r3, r1
10003f20:	429f      	cmp	r7, r3
10003f22:	d808      	bhi.n	10003f36 <stdio_usb_out_chars+0xc6>
10003f24:	d1d7      	bne.n	10003ed6 <stdio_usb_out_chars+0x66>
10003f26:	4594      	cmp	ip, r2
10003f28:	d9d5      	bls.n	10003ed6 <stdio_usb_out_chars+0x66>
10003f2a:	e004      	b.n	10003f36 <stdio_usb_out_chars+0xc6>
        last_avail_time = 0;
10003f2c:	2000      	movs	r0, #0
10003f2e:	2100      	movs	r1, #0
10003f30:	4b06      	ldr	r3, [pc, #24]	; (10003f4c <stdio_usb_out_chars+0xdc>)
10003f32:	6018      	str	r0, [r3, #0]
10003f34:	6059      	str	r1, [r3, #4]
    mutex_exit(&stdio_usb_mutex);
10003f36:	4658      	mov	r0, fp
10003f38:	f00c f9ea 	bl	10010310 <__mutex_exit_veneer>
}
10003f3c:	b002      	add	sp, #8
10003f3e:	bce0      	pop	{r5, r6, r7}
10003f40:	46bb      	mov	fp, r7
10003f42:	46b1      	mov	r9, r6
10003f44:	46a8      	mov	r8, r5
10003f46:	bdf0      	pop	{r4, r5, r6, r7, pc}
10003f48:	2001274c 	.word	0x2001274c
10003f4c:	20003058 	.word	0x20003058
10003f50:	0007a120 	.word	0x0007a120

10003f54 <timer_task>:
    irq_set_pending(PICO_STDIO_USB_LOW_PRIORITY_IRQ);
10003f54:	201f      	movs	r0, #31
static int64_t timer_task(__unused alarm_id_t id, __unused void *user_data) {
10003f56:	b510      	push	{r4, lr}
    irq_set_pending(PICO_STDIO_USB_LOW_PRIORITY_IRQ);
10003f58:	f7fd fcaa 	bl	100018b0 <irq_set_pending>
}
10003f5c:	20fa      	movs	r0, #250	; 0xfa
10003f5e:	2100      	movs	r1, #0
10003f60:	0080      	lsls	r0, r0, #2
10003f62:	bd10      	pop	{r4, pc}

10003f64 <low_priority_worker_irq>:
static void low_priority_worker_irq() {
10003f64:	b510      	push	{r4, lr}
    if (mutex_try_enter(&stdio_usb_mutex, NULL)) {
10003f66:	4c07      	ldr	r4, [pc, #28]	; (10003f84 <low_priority_worker_irq+0x20>)
10003f68:	2100      	movs	r1, #0
10003f6a:	0020      	movs	r0, r4
10003f6c:	f00c f9e8 	bl	10010340 <__mutex_try_enter_veneer>
10003f70:	2800      	cmp	r0, #0
10003f72:	d100      	bne.n	10003f76 <low_priority_worker_irq+0x12>
}
10003f74:	bd10      	pop	{r4, pc}
        tud_task();
10003f76:	f001 fb51 	bl	1000561c <tud_task>
        mutex_exit(&stdio_usb_mutex);
10003f7a:	0020      	movs	r0, r4
10003f7c:	f00c f9c8 	bl	10010310 <__mutex_exit_veneer>
}
10003f80:	e7f8      	b.n	10003f74 <low_priority_worker_irq+0x10>
10003f82:	46c0      	nop			; (mov r8, r8)
10003f84:	2001274c 	.word	0x2001274c

10003f88 <stdio_usb_init>:
#if PICO_STDIO_ENABLE_CRLF_SUPPORT
    .crlf_enabled = PICO_STDIO_USB_DEFAULT_CRLF
#endif
};

bool stdio_usb_init(void) {
10003f88:	b570      	push	{r4, r5, r6, lr}
#if !PICO_NO_BI_STDIO_USB
    bi_decl_if_func_used(bi_program_feature("USB stdin / stdout"));
10003f8a:	4b1e      	ldr	r3, [pc, #120]	; (10004004 <stdio_usb_init+0x7c>)
bool stdio_usb_init(void) {
10003f8c:	b084      	sub	sp, #16
    bi_decl_if_func_used(bi_program_feature("USB stdin / stdout"));
10003f8e:	781b      	ldrb	r3, [r3, #0]
#endif

    // initialize TinyUSB
    tusb_init();
10003f90:	f002 fd42 	bl	10006a18 <tusb_init>

    irq_set_exclusive_handler(PICO_STDIO_USB_LOW_PRIORITY_IRQ, low_priority_worker_irq);
10003f94:	201f      	movs	r0, #31
10003f96:	491c      	ldr	r1, [pc, #112]	; (10004008 <stdio_usb_init+0x80>)
10003f98:	f7fd fc9a 	bl	100018d0 <irq_set_exclusive_handler>
    irq_set_enabled(PICO_STDIO_USB_LOW_PRIORITY_IRQ, true);
10003f9c:	2101      	movs	r1, #1
10003f9e:	201f      	movs	r0, #31
10003fa0:	f7fd fc74 	bl	1000188c <irq_set_enabled>

    mutex_init(&stdio_usb_mutex);
10003fa4:	4819      	ldr	r0, [pc, #100]	; (1000400c <stdio_usb_init+0x84>)
10003fa6:	f7fd fea1 	bl	10001cec <mutex_init>
 * @return >0 the alarm id
 * @return 0 the target timestamp was during or before this method call (whether the callback was called depends on fire_if_past)
 * @return -1 if there were no alarm slots available
 */
static inline alarm_id_t add_alarm_in_us(uint64_t us, alarm_callback_t callback, void *user_data, bool fire_if_past) {
    return alarm_pool_add_alarm_in_us(alarm_pool_get_default(), us, callback, user_data, fire_if_past);
10003faa:	f000 fb2f 	bl	1000460c <alarm_pool_get_default>
10003fae:	0006      	movs	r6, r0
    update_us_since_boot(&t, time_us_64());
10003fb0:	f000 fd28 	bl	10004a04 <time_us_64>
    uint64_t delayed = base + us;
10003fb4:	22fa      	movs	r2, #250	; 0xfa
    update_us_since_boot(&t, time_us_64());
10003fb6:	0004      	movs	r4, r0
10003fb8:	000d      	movs	r5, r1
    uint64_t delayed = base + us;
10003fba:	2300      	movs	r3, #0
10003fbc:	0092      	lsls	r2, r2, #2
10003fbe:	1912      	adds	r2, r2, r4
10003fc0:	416b      	adcs	r3, r5
    if (delayed < base) {
10003fc2:	4299      	cmp	r1, r3
10003fc4:	d814      	bhi.n	10003ff0 <stdio_usb_init+0x68>
10003fc6:	d011      	beq.n	10003fec <stdio_usb_init+0x64>
    return alarm_pool_add_alarm_at(pool, delayed_by_us(get_absolute_time(), us), callback, user_data, fire_if_past);
10003fc8:	2101      	movs	r1, #1
10003fca:	9102      	str	r1, [sp, #8]
10003fcc:	2100      	movs	r1, #0
10003fce:	9101      	str	r1, [sp, #4]
10003fd0:	490f      	ldr	r1, [pc, #60]	; (10004010 <stdio_usb_init+0x88>)
10003fd2:	0030      	movs	r0, r6
10003fd4:	9100      	str	r1, [sp, #0]
10003fd6:	f000 fb1f 	bl	10004618 <alarm_pool_add_alarm_at>
    bool rc = add_alarm_in_us(PICO_STDIO_USB_TASK_INTERVAL_US, timer_task, NULL, true);
10003fda:	0004      	movs	r4, r0
10003fdc:	1e63      	subs	r3, r4, #1
10003fde:	419c      	sbcs	r4, r3
10003fe0:	b2e4      	uxtb	r4, r4
    if (rc) {
10003fe2:	2800      	cmp	r0, #0
10003fe4:	d108      	bne.n	10003ff8 <stdio_usb_init+0x70>
        stdio_set_driver_enabled(&stdio_usb, true);
    }
    return rc;
}
10003fe6:	0020      	movs	r0, r4
10003fe8:	b004      	add	sp, #16
10003fea:	bd70      	pop	{r4, r5, r6, pc}
    if (delayed < base) {
10003fec:	4290      	cmp	r0, r2
10003fee:	d9eb      	bls.n	10003fc8 <stdio_usb_init+0x40>
        delayed = (uint64_t)-1;
10003ff0:	2201      	movs	r2, #1
10003ff2:	4252      	negs	r2, r2
10003ff4:	17d3      	asrs	r3, r2, #31
10003ff6:	e7e7      	b.n	10003fc8 <stdio_usb_init+0x40>
        stdio_set_driver_enabled(&stdio_usb, true);
10003ff8:	2101      	movs	r1, #1
10003ffa:	4806      	ldr	r0, [pc, #24]	; (10004014 <stdio_usb_init+0x8c>)
10003ffc:	f7ff fe62 	bl	10003cc4 <stdio_set_driver_enabled>
10004000:	e7f1      	b.n	10003fe6 <stdio_usb_init+0x5e>
10004002:	46c0      	nop			; (mov r8, r8)
10004004:	1002d020 	.word	0x1002d020
10004008:	10003f65 	.word	0x10003f65
1000400c:	2001274c 	.word	0x2001274c
10004010:	10003f55 	.word	0x10003f55
10004014:	20002718 	.word	0x20002718

10004018 <tud_descriptor_device_cb>:
    [USBD_STR_CDC] = "Board CDC",
};

const uint8_t *tud_descriptor_device_cb(void) {
    return (const uint8_t *)&usbd_desc_device;
}
10004018:	4800      	ldr	r0, [pc, #0]	; (1000401c <tud_descriptor_device_cb+0x4>)
1000401a:	4770      	bx	lr
1000401c:	10010718 	.word	0x10010718

10004020 <tud_descriptor_configuration_cb>:

const uint8_t *tud_descriptor_configuration_cb(uint8_t index) {
    (void)index;
    return usbd_desc_cfg;
}
10004020:	4800      	ldr	r0, [pc, #0]	; (10004024 <tud_descriptor_configuration_cb+0x4>)
10004022:	4770      	bx	lr
10004024:	100106cc 	.word	0x100106cc

10004028 <tud_descriptor_string_cb>:

const uint16_t *tud_descriptor_string_cb(uint8_t index, uint16_t langid) {
10004028:	b530      	push	{r4, r5, lr}
    #define DESC_STR_MAX (20)
    static uint16_t desc_str[DESC_STR_MAX];

    uint8_t len;
    if (index == 0) {
1000402a:	2800      	cmp	r0, #0
1000402c:	d106      	bne.n	1000403c <tud_descriptor_string_cb+0x14>
        desc_str[1] = 0x0409; // supported language is English
1000402e:	24c1      	movs	r4, #193	; 0xc1
10004030:	4811      	ldr	r0, [pc, #68]	; (10004078 <tud_descriptor_string_cb+0x50>)
10004032:	4b12      	ldr	r3, [pc, #72]	; (1000407c <tud_descriptor_string_cb+0x54>)
10004034:	00a4      	lsls	r4, r4, #2
10004036:	8043      	strh	r3, [r0, #2]
            desc_str[1 + len] = str[len];
        }
    }

    // first byte is length (including header), second byte is string type
    desc_str[0] = (TUSB_DESC_STRING << 8) | (2 * len + 2);
10004038:	8004      	strh	r4, [r0, #0]

    return desc_str;
}
1000403a:	bd30      	pop	{r4, r5, pc}
        if (index >= sizeof(usbd_desc_str) / sizeof(usbd_desc_str[0])) {
1000403c:	2804      	cmp	r0, #4
1000403e:	d819      	bhi.n	10004074 <tud_descriptor_string_cb+0x4c>
        const char *str = usbd_desc_str[index];
10004040:	4b0f      	ldr	r3, [pc, #60]	; (10004080 <tud_descriptor_string_cb+0x58>)
10004042:	0080      	lsls	r0, r0, #2
10004044:	58c5      	ldr	r5, [r0, r3]
        for (len = 0; len < DESC_STR_MAX - 1 && str[len]; ++len) {
10004046:	480c      	ldr	r0, [pc, #48]	; (10004078 <tud_descriptor_string_cb+0x50>)
        const char *str = usbd_desc_str[index];
10004048:	2300      	movs	r3, #0
1000404a:	1c81      	adds	r1, r0, #2
1000404c:	e004      	b.n	10004058 <tud_descriptor_string_cb+0x30>
        for (len = 0; len < DESC_STR_MAX - 1 && str[len]; ++len) {
1000404e:	3301      	adds	r3, #1
            desc_str[1 + len] = str[len];
10004050:	800a      	strh	r2, [r1, #0]
        for (len = 0; len < DESC_STR_MAX - 1 && str[len]; ++len) {
10004052:	3102      	adds	r1, #2
10004054:	2b13      	cmp	r3, #19
10004056:	d00a      	beq.n	1000406e <tud_descriptor_string_cb+0x46>
10004058:	5cea      	ldrb	r2, [r5, r3]
1000405a:	b2dc      	uxtb	r4, r3
1000405c:	2a00      	cmp	r2, #0
1000405e:	d1f6      	bne.n	1000404e <tud_descriptor_string_cb+0x26>
    desc_str[0] = (TUSB_DESC_STRING << 8) | (2 * len + 2);
10004060:	23c0      	movs	r3, #192	; 0xc0
10004062:	3401      	adds	r4, #1
10004064:	b2e4      	uxtb	r4, r4
10004066:	0064      	lsls	r4, r4, #1
10004068:	009b      	lsls	r3, r3, #2
1000406a:	431c      	orrs	r4, r3
1000406c:	e7e4      	b.n	10004038 <tud_descriptor_string_cb+0x10>
1000406e:	24ca      	movs	r4, #202	; 0xca
10004070:	00a4      	lsls	r4, r4, #2
10004072:	e7e1      	b.n	10004038 <tud_descriptor_string_cb+0x10>
            return NULL;
10004074:	2000      	movs	r0, #0
10004076:	e7e0      	b.n	1000403a <tud_descriptor_string_cb+0x12>
10004078:	20012070 	.word	0x20012070
1000407c:	00000409 	.word	0x00000409
10004080:	1001072c 	.word	0x1001072c

10004084 <set_sys_clock_pll>:
                        48 * MHZ,
                        48 * MHZ);
    }
}

void set_sys_clock_pll(uint32_t vco_freq, uint post_div1, uint post_div2) {
10004084:	b5f0      	push	{r4, r5, r6, r7, lr}
10004086:	b083      	sub	sp, #12
10004088:	0006      	movs	r6, r0
1000408a:	000c      	movs	r4, r1
1000408c:	0015      	movs	r5, r2
    if (!running_on_fpga()) {
1000408e:	f7fe f933 	bl	100022f8 <running_on_fpga>
10004092:	2800      	cmp	r0, #0
10004094:	d001      	beq.n	1000409a <set_sys_clock_pll+0x16>
                        0, // Only AUX mux on ADC
                        CLOCKS_CLK_PERI_CTRL_AUXSRC_VALUE_CLKSRC_PLL_USB,
                        48 * MHZ,
                        48 * MHZ);
    }
}
10004096:	b003      	add	sp, #12
10004098:	bdf0      	pop	{r4, r5, r6, r7, pc}
        clock_configure(clk_sys,
1000409a:	4f16      	ldr	r7, [pc, #88]	; (100040f4 <set_sys_clock_pll+0x70>)
1000409c:	2201      	movs	r2, #1
1000409e:	003b      	movs	r3, r7
100040a0:	2101      	movs	r1, #1
100040a2:	9700      	str	r7, [sp, #0]
100040a4:	3005      	adds	r0, #5
100040a6:	f7fd f905 	bl	100012b4 <clock_configure>
        pll_init(pll_sys, 1, vco_freq, post_div1, post_div2);
100040aa:	b2eb      	uxtb	r3, r5
100040ac:	0032      	movs	r2, r6
100040ae:	9300      	str	r3, [sp, #0]
100040b0:	2101      	movs	r1, #1
100040b2:	0023      	movs	r3, r4
100040b4:	4810      	ldr	r0, [pc, #64]	; (100040f8 <set_sys_clock_pll+0x74>)
100040b6:	f7fe f927 	bl	10002308 <pll_init>
        uint32_t freq = vco_freq / (post_div1 * post_div2);
100040ba:	0021      	movs	r1, r4
100040bc:	0030      	movs	r0, r6
100040be:	4369      	muls	r1, r5
100040c0:	f7fc f958 	bl	10000374 <__wrap___aeabi_uidiv>
100040c4:	0004      	movs	r4, r0
        clock_configure(clk_ref,
100040c6:	4b0d      	ldr	r3, [pc, #52]	; (100040fc <set_sys_clock_pll+0x78>)
100040c8:	2200      	movs	r2, #0
100040ca:	9300      	str	r3, [sp, #0]
100040cc:	2102      	movs	r1, #2
100040ce:	2004      	movs	r0, #4
100040d0:	f7fd f8f0 	bl	100012b4 <clock_configure>
        clock_configure(clk_sys,
100040d4:	0023      	movs	r3, r4
100040d6:	2200      	movs	r2, #0
100040d8:	2101      	movs	r1, #1
100040da:	9400      	str	r4, [sp, #0]
100040dc:	2005      	movs	r0, #5
100040de:	f7fd f8e9 	bl	100012b4 <clock_configure>
        clock_configure(clk_peri,
100040e2:	003b      	movs	r3, r7
100040e4:	2202      	movs	r2, #2
100040e6:	2100      	movs	r1, #0
100040e8:	9700      	str	r7, [sp, #0]
100040ea:	2006      	movs	r0, #6
100040ec:	f7fd f8e2 	bl	100012b4 <clock_configure>
}
100040f0:	e7d1      	b.n	10004096 <set_sys_clock_pll+0x12>
100040f2:	46c0      	nop			; (mov r8, r8)
100040f4:	02dc6c00 	.word	0x02dc6c00
100040f8:	40028000 	.word	0x40028000
100040fc:	00b71b00 	.word	0x00b71b00

10004100 <spin_locks_reset>:
    *lock = 0;
10004100:	2100      	movs	r1, #0

static void check_lock_num(uint __unused lock_num) {
    invalid_params_if(SYNC, lock_num >= 32);
}

void spin_locks_reset(void) {
10004102:	4b04      	ldr	r3, [pc, #16]	; (10004114 <spin_locks_reset+0x14>)
    for (uint i = 0; i < NUM_SPIN_LOCKS; i++) {
10004104:	4a04      	ldr	r2, [pc, #16]	; (10004118 <spin_locks_reset+0x18>)
    __asm volatile ("dmb");
10004106:	f3bf 8f5f 	dmb	sy
    *lock = 0;
1000410a:	c302      	stmia	r3!, {r1}
1000410c:	4293      	cmp	r3, r2
1000410e:	d1fa      	bne.n	10004106 <spin_locks_reset+0x6>
        spin_unlock_unsafe(spin_lock_instance(i));
    }
}
10004110:	4770      	bx	lr
10004112:	46c0      	nop			; (mov r8, r8)
10004114:	d0000100 	.word	0xd0000100
10004118:	d0000180 	.word	0xd0000180

1000411c <next_striped_spin_lock_num>:
    spin_unlock_unsafe(lock);
    return lock;
}

uint next_striped_spin_lock_num() {
    uint rc = striped_spin_lock_num++;
1000411c:	4a04      	ldr	r2, [pc, #16]	; (10004130 <next_striped_spin_lock_num+0x14>)
1000411e:	7810      	ldrb	r0, [r2, #0]
10004120:	1c43      	adds	r3, r0, #1
10004122:	b2db      	uxtb	r3, r3
    if (striped_spin_lock_num > PICO_SPINLOCK_ID_STRIPED_LAST) {
10004124:	2b17      	cmp	r3, #23
10004126:	d900      	bls.n	1000412a <next_striped_spin_lock_num+0xe>
        striped_spin_lock_num = PICO_SPINLOCK_ID_STRIPED_FIRST;
10004128:	2310      	movs	r3, #16
1000412a:	7013      	strb	r3, [r2, #0]
    }
    return rc;
}
1000412c:	4770      	bx	lr
1000412e:	46c0      	nop			; (mov r8, r8)
10004130:	2000272c 	.word	0x2000272c

10004134 <spin_lock_claim_unused>:
void spin_lock_unclaim(uint lock_num) {
    check_lock_num(lock_num);
    hw_claim_clear((uint8_t *) &claimed, lock_num);
}

int spin_lock_claim_unused(bool required) {
10004134:	b500      	push	{lr}
    return hw_claim_unused_from_range((uint8_t*)&claimed, required, PICO_SPINLOCK_ID_CLAIM_FREE_FIRST, PICO_SPINLOCK_ID_CLAIM_FREE_END, "No spinlocks are available");
10004136:	4b05      	ldr	r3, [pc, #20]	; (1000414c <spin_lock_claim_unused+0x18>)
int spin_lock_claim_unused(bool required) {
10004138:	b083      	sub	sp, #12
1000413a:	0001      	movs	r1, r0
    return hw_claim_unused_from_range((uint8_t*)&claimed, required, PICO_SPINLOCK_ID_CLAIM_FREE_FIRST, PICO_SPINLOCK_ID_CLAIM_FREE_END, "No spinlocks are available");
1000413c:	9300      	str	r3, [sp, #0]
1000413e:	2218      	movs	r2, #24
10004140:	231f      	movs	r3, #31
10004142:	4803      	ldr	r0, [pc, #12]	; (10004150 <spin_lock_claim_unused+0x1c>)
10004144:	f7fd f868 	bl	10001218 <hw_claim_unused_from_range>
}
10004148:	b003      	add	sp, #12
1000414a:	bd00      	pop	{pc}
1000414c:	10010740 	.word	0x10010740
10004150:	20012040 	.word	0x20012040

10004154 <timer_pool_entry_comparator>:
}
#endif

static inline alarm_pool_entry_t *get_entry(alarm_pool_t *pool, pheap_node_id_t id) {
    assert(id && id <= pool->heap->max_nodes);
    return pool->entries + id - 1;
10004154:	6883      	ldr	r3, [r0, #8]
10004156:	480b      	ldr	r0, [pc, #44]	; (10004184 <timer_pool_entry_comparator+0x30>)
static inline uint8_t *get_entry_id_high(alarm_pool_t *pool, pheap_node_id_t id) {
    assert(id && id <= pool->heap->max_nodes);
    return pool->entry_ids_high + id - 1;
}

bool timer_pool_entry_comparator(void *user_data, pheap_node_id_t a, pheap_node_id_t b) {
10004158:	b510      	push	{r4, lr}
    return pool->entries + id - 1;
1000415a:	4684      	mov	ip, r0
1000415c:	4461      	add	r1, ip
1000415e:	4462      	add	r2, ip
    alarm_pool_t *pool = (alarm_pool_t *)user_data;
    return to_us_since_boot(get_entry(pool, a)->target) < to_us_since_boot(get_entry(pool, b)->target);
10004160:	0109      	lsls	r1, r1, #4
10004162:	0112      	lsls	r2, r2, #4
10004164:	189a      	adds	r2, r3, r2
10004166:	1859      	adds	r1, r3, r1
10004168:	6854      	ldr	r4, [r2, #4]
1000416a:	684b      	ldr	r3, [r1, #4]
1000416c:	2001      	movs	r0, #1
1000416e:	429c      	cmp	r4, r3
10004170:	d801      	bhi.n	10004176 <timer_pool_entry_comparator+0x22>
10004172:	d002      	beq.n	1000417a <timer_pool_entry_comparator+0x26>
10004174:	2000      	movs	r0, #0
10004176:	b2c0      	uxtb	r0, r0
}
10004178:	bd10      	pop	{r4, pc}
    return to_us_since_boot(get_entry(pool, a)->target) < to_us_since_boot(get_entry(pool, b)->target);
1000417a:	6812      	ldr	r2, [r2, #0]
1000417c:	680b      	ldr	r3, [r1, #0]
1000417e:	429a      	cmp	r2, r3
10004180:	d8f9      	bhi.n	10004176 <timer_pool_entry_comparator+0x22>
10004182:	e7f7      	b.n	10004174 <timer_pool_entry_comparator+0x20>
10004184:	0fffffff 	.word	0x0fffffff

10004188 <sev_callback>:
    __asm volatile ("sev");
10004188:	bf40      	sev

#if !PICO_TIME_DEFAULT_ALARM_POOL_DISABLED
static int64_t sev_callback(alarm_id_t id, void *user_data) {
    __sev();
    return 0;
}
1000418a:	2000      	movs	r0, #0
1000418c:	2100      	movs	r1, #0
1000418e:	4770      	bx	lr

10004190 <add_alarm_under_lock.isra.0>:
static alarm_id_t add_alarm_under_lock(alarm_pool_t *pool, absolute_time_t time, alarm_callback_t callback,
10004190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10004192:	46de      	mov	lr, fp
10004194:	4657      	mov	r7, sl
10004196:	464e      	mov	r6, r9
10004198:	4645      	mov	r5, r8
1000419a:	b5e0      	push	{r5, r6, r7, lr}
1000419c:	001f      	movs	r7, r3
1000419e:	ab0d      	add	r3, sp, #52	; 0x34
100041a0:	781b      	ldrb	r3, [r3, #0]
100041a2:	0005      	movs	r5, r0
100041a4:	469b      	mov	fp, r3
    if (reuse_id) {
100041a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
static alarm_id_t add_alarm_under_lock(alarm_pool_t *pool, absolute_time_t time, alarm_callback_t callback,
100041a8:	0016      	movs	r6, r2
    if (reuse_id) {
100041aa:	2b00      	cmp	r3, #0
100041ac:	d045      	beq.n	1000423a <add_alarm_under_lock.isra.0+0xaa>
    return pool->entries + id - 1;
100041ae:	4a3f      	ldr	r2, [pc, #252]	; (100042ac <add_alarm_under_lock.isra.0+0x11c>)
        alarm_pool_entry_t *entry = get_entry(pool, id);
100041b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    return pool->entries + id - 1;
100041b2:	4694      	mov	ip, r2
        alarm_pool_entry_t *entry = get_entry(pool, id);
100041b4:	b2db      	uxtb	r3, r3
    return pool->entries + id - 1;
100041b6:	68aa      	ldr	r2, [r5, #8]
        alarm_pool_entry_t *entry = get_entry(pool, id);
100041b8:	469a      	mov	sl, r3
    return pool->entries + id - 1;
100041ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
        if (id == ph_insert(pool->heap, id)) {
100041bc:	682c      	ldr	r4, [r5, #0]
    return pool->entries + id - 1;
100041be:	4463      	add	r3, ip
100041c0:	4694      	mov	ip, r2
100041c2:	011b      	lsls	r3, r3, #4
        entry->callback = callback;
100041c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    return pool->entries + id - 1;
100041c6:	4463      	add	r3, ip
        entry->callback = callback;
100041c8:	609a      	str	r2, [r3, #8]
        entry->user_data = user_data;
100041ca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
        entry->target = time;
100041cc:	601e      	str	r6, [r3, #0]
        entry->user_data = user_data;
100041ce:	60da      	str	r2, [r3, #12]
100041d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
        entry->target = time;
100041d2:	605f      	str	r7, [r3, #4]
100041d4:	4694      	mov	ip, r2
100041d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    hn->child = hn->sibling = hn->parent = 0;
100041d8:	2200      	movs	r2, #0
    return heap->nodes + id - 1;
100041da:	005b      	lsls	r3, r3, #1
100041dc:	4463      	add	r3, ip
100041de:	3b03      	subs	r3, #3
100041e0:	4698      	mov	r8, r3
100041e2:	6823      	ldr	r3, [r4, #0]
100041e4:	4443      	add	r3, r8
    hn->child = hn->sibling = hn->parent = 0;
100041e6:	709a      	strb	r2, [r3, #2]
100041e8:	705a      	strb	r2, [r3, #1]
100041ea:	701a      	strb	r2, [r3, #0]
    heap->root_id = ph_merge_nodes(heap, heap->root_id, id);
100041ec:	7b63      	ldrb	r3, [r4, #13]
100041ee:	4699      	mov	r9, r3
    if (!a) return b;
100041f0:	2b00      	cmp	r3, #0
100041f2:	d042      	beq.n	1000427a <add_alarm_under_lock.isra.0+0xea>
    if (heap->comparator(heap->user_data, a, b)) {
100041f4:	4652      	mov	r2, sl
100041f6:	0019      	movs	r1, r3
100041f8:	68a0      	ldr	r0, [r4, #8]
100041fa:	6863      	ldr	r3, [r4, #4]
100041fc:	4798      	blx	r3
    return heap->nodes + id - 1;
100041fe:	6822      	ldr	r2, [r4, #0]
    if (heap->comparator(heap->user_data, a, b)) {
10004200:	2800      	cmp	r0, #0
10004202:	d02b      	beq.n	1000425c <add_alarm_under_lock.isra.0+0xcc>
    return heap->nodes + id - 1;
10004204:	464b      	mov	r3, r9
10004206:	005b      	lsls	r3, r3, #1
10004208:	444b      	add	r3, r9
1000420a:	3b03      	subs	r3, #3
1000420c:	18d1      	adds	r1, r2, r3
1000420e:	468c      	mov	ip, r1
10004210:	4641      	mov	r1, r8
    c->parent = parent_id;
10004212:	4648      	mov	r0, r9
    return heap->nodes + id - 1;
10004214:	1851      	adds	r1, r2, r1
    c->parent = parent_id;
10004216:	7088      	strb	r0, [r1, #2]
    if (!n->child) {
10004218:	5cd3      	ldrb	r3, [r2, r3]
1000421a:	2b00      	cmp	r3, #0
1000421c:	d142      	bne.n	100042a4 <add_alarm_under_lock.isra.0+0x114>
        n->child = child_id;
1000421e:	4653      	mov	r3, sl
10004220:	4662      	mov	r2, ip
10004222:	7013      	strb	r3, [r2, #0]
    heap->root_id = ph_merge_nodes(heap, heap->root_id, id);
10004224:	464b      	mov	r3, r9
10004226:	7363      	strb	r3, [r4, #13]
        if (id == ph_insert(pool->heap, id)) {
10004228:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1000422a:	4599      	cmp	r9, r3
1000422c:	d027      	beq.n	1000427e <add_alarm_under_lock.isra.0+0xee>
}
1000422e:	bcf0      	pop	{r4, r5, r6, r7}
10004230:	46bb      	mov	fp, r7
10004232:	46b2      	mov	sl, r6
10004234:	46a9      	mov	r9, r5
10004236:	46a0      	mov	r8, r4
10004238:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        id = ph_new_node(pool->heap);
1000423a:	6802      	ldr	r2, [r0, #0]
    if (!heap->free_head_id) return 0;
1000423c:	7b94      	ldrb	r4, [r2, #14]
1000423e:	2c00      	cmp	r4, #0
10004240:	d0f5      	beq.n	1000422e <add_alarm_under_lock.isra.0+0x9e>
    heap->free_head_id = ph_get_node(heap, id)->sibling;
10004242:	6811      	ldr	r1, [r2, #0]
10004244:	0063      	lsls	r3, r4, #1
10004246:	468c      	mov	ip, r1
10004248:	191b      	adds	r3, r3, r4
1000424a:	4463      	add	r3, ip
1000424c:	3b03      	subs	r3, #3
1000424e:	785b      	ldrb	r3, [r3, #1]
10004250:	7393      	strb	r3, [r2, #14]
    if (!heap->free_head_id) heap->free_tail_id = 0;
10004252:	2b00      	cmp	r3, #0
10004254:	d100      	bne.n	10004258 <add_alarm_under_lock.isra.0+0xc8>
10004256:	73d3      	strb	r3, [r2, #15]
10004258:	940c      	str	r4, [sp, #48]	; 0x30
    if (id) {
1000425a:	e7a8      	b.n	100041ae <add_alarm_under_lock.isra.0+0x1e>
    return heap->nodes + id - 1;
1000425c:	4643      	mov	r3, r8
1000425e:	18d1      	adds	r1, r2, r3
10004260:	464b      	mov	r3, r9
    c->parent = parent_id;
10004262:	4650      	mov	r0, sl
    return heap->nodes + id - 1;
10004264:	005b      	lsls	r3, r3, #1
10004266:	444b      	add	r3, r9
10004268:	3b03      	subs	r3, #3
1000426a:	18d3      	adds	r3, r2, r3
    c->parent = parent_id;
1000426c:	7098      	strb	r0, [r3, #2]
    if (!n->child) {
1000426e:	4640      	mov	r0, r8
10004270:	5c12      	ldrb	r2, [r2, r0]
10004272:	2a00      	cmp	r2, #0
10004274:	d118      	bne.n	100042a8 <add_alarm_under_lock.isra.0+0x118>
        n->child = child_id;
10004276:	464b      	mov	r3, r9
10004278:	700b      	strb	r3, [r1, #0]
    heap->root_id = ph_merge_nodes(heap, heap->root_id, id);
1000427a:	4653      	mov	r3, sl
1000427c:	7363      	strb	r3, [r4, #13]
            bool is_missed = hardware_alarm_set_target(pool->hardware_alarm_num, time);
1000427e:	0032      	movs	r2, r6
10004280:	003b      	movs	r3, r7
10004282:	7d28      	ldrb	r0, [r5, #20]
10004284:	f000 fc1e 	bl	10004ac4 <hardware_alarm_set_target>
10004288:	1e04      	subs	r4, r0, #0
            if (is_missed && !create_if_past) {
1000428a:	d006      	beq.n	1000429a <add_alarm_under_lock.isra.0+0x10a>
1000428c:	465b      	mov	r3, fp
1000428e:	2b00      	cmp	r3, #0
10004290:	d103      	bne.n	1000429a <add_alarm_under_lock.isra.0+0x10a>
                ph_delete(pool->heap, id);
10004292:	4651      	mov	r1, sl
10004294:	6828      	ldr	r0, [r5, #0]
10004296:	f7fd fedf 	bl	10002058 <ph_delete>
            if (missed) *missed = is_missed;
1000429a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1000429c:	2b00      	cmp	r3, #0
1000429e:	d0c6      	beq.n	1000422e <add_alarm_under_lock.isra.0+0x9e>
100042a0:	701c      	strb	r4, [r3, #0]
    return id;
100042a2:	e7c4      	b.n	1000422e <add_alarm_under_lock.isra.0+0x9e>
        c->sibling = n->child;
100042a4:	704b      	strb	r3, [r1, #1]
100042a6:	e7ba      	b.n	1000421e <add_alarm_under_lock.isra.0+0x8e>
100042a8:	705a      	strb	r2, [r3, #1]
100042aa:	e7e4      	b.n	10004276 <add_alarm_under_lock.isra.0+0xe6>
100042ac:	0fffffff 	.word	0x0fffffff

100042b0 <alarm_pool_alarm_callback>:
static void alarm_pool_alarm_callback(uint alarm_num) {
100042b0:	b5f0      	push	{r4, r5, r6, r7, lr}
100042b2:	46de      	mov	lr, fp
100042b4:	464e      	mov	r6, r9
100042b6:	4657      	mov	r7, sl
100042b8:	4645      	mov	r5, r8
100042ba:	2300      	movs	r3, #0
100042bc:	b5e0      	push	{r5, r6, r7, lr}
100042be:	b08d      	sub	sp, #52	; 0x34
100042c0:	930a      	str	r3, [sp, #40]	; 0x28
    alarm_pool_t *pool = pools[alarm_num];
100042c2:	4b6b      	ldr	r3, [pc, #428]	; (10004470 <alarm_pool_alarm_callback+0x1c0>)
100042c4:	0082      	lsls	r2, r0, #2
100042c6:	58d3      	ldr	r3, [r2, r3]
static void alarm_pool_alarm_callback(uint alarm_num) {
100042c8:	900b      	str	r0, [sp, #44]	; 0x2c
    alarm_pool_t *pool = pools[alarm_num];
100042ca:	4699      	mov	r9, r3
        void *user_data = NULL;
100042cc:	2300      	movs	r3, #0
100042ce:	469b      	mov	fp, r3
100042d0:	464b      	mov	r3, r9
100042d2:	9307      	str	r3, [sp, #28]
    update_us_since_boot(&t, time_us_64());
100042d4:	f000 fb96 	bl	10004a04 <time_us_64>
        uint32_t save = spin_lock_blocking(pool->lock);
100042d8:	9c07      	ldr	r4, [sp, #28]
100042da:	0006      	movs	r6, r0
100042dc:	000f      	movs	r7, r1
100042de:	6862      	ldr	r2, [r4, #4]
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
100042e0:	f3ef 8510 	mrs	r5, PRIMASK
    __asm volatile ("cpsid i");
100042e4:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
100042e6:	6813      	ldr	r3, [r2, #0]
100042e8:	2b00      	cmp	r3, #0
100042ea:	d0fc      	beq.n	100042e6 <alarm_pool_alarm_callback+0x36>
    __asm volatile ("dmb");
100042ec:	0022      	movs	r2, r4
100042ee:	9407      	str	r4, [sp, #28]
100042f0:	f3bf 8f5f 	dmb	sy
        pheap_node_id_t next_id = ph_peek_head(pool->heap);
100042f4:	6824      	ldr	r4, [r4, #0]
    return heap->root_id;
100042f6:	7b63      	ldrb	r3, [r4, #13]
100042f8:	4699      	mov	r9, r3
        if (next_id) {
100042fa:	2b00      	cmp	r3, #0
100042fc:	d067      	beq.n	100043ce <alarm_pool_alarm_callback+0x11e>
    return pool->entries + id - 1;
100042fe:	6892      	ldr	r2, [r2, #8]
10004300:	4b5c      	ldr	r3, [pc, #368]	; (10004474 <alarm_pool_alarm_callback+0x1c4>)
10004302:	4690      	mov	r8, r2
10004304:	444b      	add	r3, r9
10004306:	011b      	lsls	r3, r3, #4
10004308:	4498      	add	r8, r3
            if (absolute_time_diff_us(now, entry->target) <= 0) {
1000430a:	4643      	mov	r3, r8
1000430c:	681a      	ldr	r2, [r3, #0]
1000430e:	685b      	ldr	r3, [r3, #4]
    return to_us_since_boot(to) - to_us_since_boot(from);
10004310:	0010      	movs	r0, r2
10004312:	0019      	movs	r1, r3
10004314:	1b80      	subs	r0, r0, r6
10004316:	41b9      	sbcs	r1, r7
10004318:	2900      	cmp	r1, #0
1000431a:	dd5f      	ble.n	100043dc <alarm_pool_alarm_callback+0x12c>
                if (hardware_alarm_set_target(alarm_num, entry->target)) {
1000431c:	980b      	ldr	r0, [sp, #44]	; 0x2c
1000431e:	f000 fbd1 	bl	10004ac4 <hardware_alarm_set_target>
        void *user_data = NULL;
10004322:	2300      	movs	r3, #0
        absolute_time_t target = nil_time;
10004324:	2600      	movs	r6, #0
        void *user_data = NULL;
10004326:	4698      	mov	r8, r3
        absolute_time_t target = nil_time;
10004328:	2700      	movs	r7, #0
        alarm_callback_t callback = NULL;
1000432a:	469a      	mov	sl, r3
        spin_unlock(pool->lock, save);
1000432c:	9c07      	ldr	r4, [sp, #28]
1000432e:	6863      	ldr	r3, [r4, #4]
10004330:	f3bf 8f5f 	dmb	sy
    *lock = 0;
10004334:	465a      	mov	r2, fp
10004336:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10004338:	f385 8810 	msr	PRIMASK, r5
        if (callback) {
1000433c:	4653      	mov	r3, sl
1000433e:	2b00      	cmp	r3, #0
10004340:	d108      	bne.n	10004354 <alarm_pool_alarm_callback+0xa4>
    } while (again);
10004342:	2800      	cmp	r0, #0
10004344:	d1c6      	bne.n	100042d4 <alarm_pool_alarm_callback+0x24>
}
10004346:	b00d      	add	sp, #52	; 0x34
10004348:	bcf0      	pop	{r4, r5, r6, r7}
1000434a:	46bb      	mov	fp, r7
1000434c:	46b2      	mov	sl, r6
1000434e:	46a9      	mov	r9, r5
10004350:	46a0      	mov	r8, r4
10004352:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return ((uint)id_high << 8u * sizeof(id)) | id;
10004354:	9b0a      	ldr	r3, [sp, #40]	; 0x28
            int64_t repeat = callback(make_public_id(id_high, next_id), user_data);
10004356:	4641      	mov	r1, r8
    return ((uint)id_high << 8u * sizeof(id)) | id;
10004358:	0218      	lsls	r0, r3, #8
1000435a:	464b      	mov	r3, r9
1000435c:	4318      	orrs	r0, r3
            int64_t repeat = callback(make_public_id(id_high, next_id), user_data);
1000435e:	47d0      	blx	sl
10004360:	9008      	str	r0, [sp, #32]
10004362:	9109      	str	r1, [sp, #36]	; 0x24
            save = spin_lock_blocking(pool->lock);
10004364:	6862      	ldr	r2, [r4, #4]
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
10004366:	f3ef 8510 	mrs	r5, PRIMASK
    __asm volatile ("cpsid i");
1000436a:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
1000436c:	6813      	ldr	r3, [r2, #0]
1000436e:	2b00      	cmp	r3, #0
10004370:	d0fc      	beq.n	1000436c <alarm_pool_alarm_callback+0xbc>
    __asm volatile ("dmb");
10004372:	9407      	str	r4, [sp, #28]
10004374:	f3bf 8f5f 	dmb	sy
            if (repeat < 0 && pool->alarm_in_progress) {
10004378:	9908      	ldr	r1, [sp, #32]
1000437a:	9a09      	ldr	r2, [sp, #36]	; 0x24
1000437c:	2a00      	cmp	r2, #0
1000437e:	db48      	blt.n	10004412 <alarm_pool_alarm_callback+0x162>
            } else if (repeat > 0 && pool->alarm_in_progress) {
10004380:	4311      	orrs	r1, r2
10004382:	d003      	beq.n	1000438c <alarm_pool_alarm_callback+0xdc>
10004384:	9b07      	ldr	r3, [sp, #28]
10004386:	691b      	ldr	r3, [r3, #16]
10004388:	2b00      	cmp	r3, #0
1000438a:	d15d      	bne.n	10004448 <alarm_pool_alarm_callback+0x198>
                ph_add_to_free_list(pool->heap, next_id);
1000438c:	9b07      	ldr	r3, [sp, #28]
1000438e:	681b      	ldr	r3, [r3, #0]

bool ph_delete(pheap_t *heap, pheap_node_id_t id);

static inline void ph_add_to_free_list(pheap_t *heap, pheap_node_id_t id) {
    assert(id && !ph_contains(heap, id));
    if (heap->free_tail_id) {
10004390:	7bd9      	ldrb	r1, [r3, #15]
10004392:	2900      	cmp	r1, #0
10004394:	d007      	beq.n	100043a6 <alarm_pool_alarm_callback+0xf6>
        ph_get_node(heap, heap->free_tail_id)->sibling = id;
10004396:	004a      	lsls	r2, r1, #1
10004398:	1852      	adds	r2, r2, r1
1000439a:	6819      	ldr	r1, [r3, #0]
1000439c:	468c      	mov	ip, r1
1000439e:	4649      	mov	r1, r9
100043a0:	4462      	add	r2, ip
100043a2:	3a03      	subs	r2, #3
100043a4:	7051      	strb	r1, [r2, #1]
    }
    heap->free_tail_id = id;
100043a6:	464a      	mov	r2, r9
100043a8:	73da      	strb	r2, [r3, #15]
    return pool->entry_ids_high + id - 1;
100043aa:	464b      	mov	r3, r9
100043ac:	9a07      	ldr	r2, [sp, #28]
100043ae:	3b01      	subs	r3, #1
100043b0:	68d1      	ldr	r1, [r2, #12]
                (*get_entry_id_high(pool, next_id))++; // we bump it for next use of id
100043b2:	5cca      	ldrb	r2, [r1, r3]
100043b4:	3201      	adds	r2, #1
100043b6:	54ca      	strb	r2, [r1, r3]
            pool->alarm_in_progress = 0;
100043b8:	465b      	mov	r3, fp
100043ba:	9a07      	ldr	r2, [sp, #28]
100043bc:	6113      	str	r3, [r2, #16]
            spin_unlock(pool->lock, save);
100043be:	6853      	ldr	r3, [r2, #4]
100043c0:	f3bf 8f5f 	dmb	sy
    *lock = 0;
100043c4:	465a      	mov	r2, fp
100043c6:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
100043c8:	f385 8810 	msr	PRIMASK, r5
    } while (again);
100043cc:	e782      	b.n	100042d4 <alarm_pool_alarm_callback+0x24>
        void *user_data = NULL;
100043ce:	2300      	movs	r3, #0
        absolute_time_t target = nil_time;
100043d0:	2600      	movs	r6, #0
        void *user_data = NULL;
100043d2:	4698      	mov	r8, r3
        absolute_time_t target = nil_time;
100043d4:	2700      	movs	r7, #0
        alarm_callback_t callback = NULL;
100043d6:	469a      	mov	sl, r3
        again = false;
100043d8:	2000      	movs	r0, #0
100043da:	e7a7      	b.n	1000432c <alarm_pool_alarm_callback+0x7c>
            if (absolute_time_diff_us(now, entry->target) <= 0) {
100043dc:	2900      	cmp	r1, #0
100043de:	d101      	bne.n	100043e4 <alarm_pool_alarm_callback+0x134>
100043e0:	2800      	cmp	r0, #0
100043e2:	d19b      	bne.n	1000431c <alarm_pool_alarm_callback+0x6c>
                pheap_node_id_t __unused removed_id = ph_remove_head_reserve(pool->heap, true);
100043e4:	2101      	movs	r1, #1
100043e6:	0020      	movs	r0, r4
100043e8:	f7fd fdb8 	bl	10001f5c <ph_remove_head_reserve>
                target = entry->target;
100043ec:	4643      	mov	r3, r8
100043ee:	681e      	ldr	r6, [r3, #0]
100043f0:	685f      	ldr	r7, [r3, #4]
                callback = entry->callback;
100043f2:	689b      	ldr	r3, [r3, #8]
                id_high = *get_entry_id_high(pool, next_id);
100043f4:	9a07      	ldr	r2, [sp, #28]
                callback = entry->callback;
100043f6:	469a      	mov	sl, r3
                user_data = entry->user_data;
100043f8:	4643      	mov	r3, r8
100043fa:	68db      	ldr	r3, [r3, #12]
100043fc:	4698      	mov	r8, r3
                id_high = *get_entry_id_high(pool, next_id);
100043fe:	68d3      	ldr	r3, [r2, #12]
10004400:	444b      	add	r3, r9
10004402:	3b01      	subs	r3, #1
10004404:	781b      	ldrb	r3, [r3, #0]
10004406:	930a      	str	r3, [sp, #40]	; 0x28
    return ((uint)id_high << 8u * sizeof(id)) | id;
10004408:	021b      	lsls	r3, r3, #8
1000440a:	4303      	orrs	r3, r0
                pool->alarm_in_progress = make_public_id(id_high, removed_id);
1000440c:	6113      	str	r3, [r2, #16]
        again = false;
1000440e:	2000      	movs	r0, #0
10004410:	e78c      	b.n	1000432c <alarm_pool_alarm_callback+0x7c>
            if (repeat < 0 && pool->alarm_in_progress) {
10004412:	6923      	ldr	r3, [r4, #16]
10004414:	2b00      	cmp	r3, #0
10004416:	d0b9      	beq.n	1000438c <alarm_pool_alarm_callback+0xdc>
    uint64_t delayed = base + us;
10004418:	0033      	movs	r3, r6
1000441a:	003c      	movs	r4, r7
1000441c:	1a5b      	subs	r3, r3, r1
1000441e:	4194      	sbcs	r4, r2
10004420:	001a      	movs	r2, r3
10004422:	0023      	movs	r3, r4
    if (delayed < base) {
10004424:	42a7      	cmp	r7, r4
10004426:	d819      	bhi.n	1000445c <alarm_pool_alarm_callback+0x1ac>
10004428:	429f      	cmp	r7, r3
1000442a:	d01b      	beq.n	10004464 <alarm_pool_alarm_callback+0x1b4>
                add_alarm_under_lock(pool, delayed_by_us(get_absolute_time(), repeat), callback, user_data, next_id,
1000442c:	4659      	mov	r1, fp
1000442e:	9104      	str	r1, [sp, #16]
10004430:	2101      	movs	r1, #1
10004432:	9103      	str	r1, [sp, #12]
10004434:	4649      	mov	r1, r9
10004436:	9102      	str	r1, [sp, #8]
10004438:	4641      	mov	r1, r8
1000443a:	9101      	str	r1, [sp, #4]
1000443c:	4651      	mov	r1, sl
1000443e:	9807      	ldr	r0, [sp, #28]
10004440:	9100      	str	r1, [sp, #0]
10004442:	f7ff fea5 	bl	10004190 <add_alarm_under_lock.isra.0>
10004446:	e7b7      	b.n	100043b8 <alarm_pool_alarm_callback+0x108>
    update_us_since_boot(&t, time_us_64());
10004448:	f000 fadc 	bl	10004a04 <time_us_64>
    uint64_t delayed = base + us;
1000444c:	9a08      	ldr	r2, [sp, #32]
1000444e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    update_us_since_boot(&t, time_us_64());
10004450:	0006      	movs	r6, r0
10004452:	000f      	movs	r7, r1
    uint64_t delayed = base + us;
10004454:	1992      	adds	r2, r2, r6
10004456:	417b      	adcs	r3, r7
    if (delayed < base) {
10004458:	4299      	cmp	r1, r3
1000445a:	d9e5      	bls.n	10004428 <alarm_pool_alarm_callback+0x178>
        delayed = (uint64_t)-1;
1000445c:	2201      	movs	r2, #1
1000445e:	4252      	negs	r2, r2
10004460:	17d3      	asrs	r3, r2, #31
10004462:	e7e3      	b.n	1000442c <alarm_pool_alarm_callback+0x17c>
    if (delayed < base) {
10004464:	4296      	cmp	r6, r2
10004466:	d9e1      	bls.n	1000442c <alarm_pool_alarm_callback+0x17c>
        delayed = (uint64_t)-1;
10004468:	2201      	movs	r2, #1
1000446a:	4252      	negs	r2, r2
1000446c:	17d3      	asrs	r3, r2, #31
1000446e:	e7dd      	b.n	1000442c <alarm_pool_alarm_callback+0x17c>
10004470:	20012730 	.word	0x20012730
10004474:	0fffffff 	.word	0x0fffffff

10004478 <alarm_pool_add_alarm_at.constprop.0>:
alarm_id_t alarm_pool_add_alarm_at(alarm_pool_t *pool, absolute_time_t time, alarm_callback_t callback,
10004478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000447a:	4657      	mov	r7, sl
1000447c:	464e      	mov	r6, r9
1000447e:	46de      	mov	lr, fp
10004480:	4645      	mov	r5, r8
10004482:	4691      	mov	r9, r2
10004484:	b5e0      	push	{r5, r6, r7, lr}
10004486:	0004      	movs	r4, r0
10004488:	469a      	mov	sl, r3
        uint32_t save = spin_lock_blocking(pool->lock);
1000448a:	6842      	ldr	r2, [r0, #4]
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
1000448c:	f3ef 8810 	mrs	r8, PRIMASK
    __asm volatile ("cpsid i");
10004490:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
10004492:	6813      	ldr	r3, [r2, #0]
10004494:	2b00      	cmp	r3, #0
10004496:	d0fc      	beq.n	10004492 <alarm_pool_add_alarm_at.constprop.0+0x1a>
    __asm volatile ("dmb");
10004498:	f3bf 8f5f 	dmb	sy
        id = ph_new_node(pool->heap);
1000449c:	6826      	ldr	r6, [r4, #0]
    if (!heap->free_head_id) return 0;
1000449e:	7bb5      	ldrb	r5, [r6, #14]
100044a0:	2d00      	cmp	r5, #0
100044a2:	d048      	beq.n	10004536 <alarm_pool_add_alarm_at.constprop.0+0xbe>
    return heap->nodes + id - 1;
100044a4:	006f      	lsls	r7, r5, #1
100044a6:	6833      	ldr	r3, [r6, #0]
100044a8:	197f      	adds	r7, r7, r5
100044aa:	3f03      	subs	r7, #3
100044ac:	19d9      	adds	r1, r3, r7
    heap->free_head_id = ph_get_node(heap, id)->sibling;
100044ae:	784b      	ldrb	r3, [r1, #1]
100044b0:	73b3      	strb	r3, [r6, #14]
    if (!heap->free_head_id) heap->free_tail_id = 0;
100044b2:	2b00      	cmp	r3, #0
100044b4:	d100      	bne.n	100044b8 <alarm_pool_add_alarm_at.constprop.0+0x40>
100044b6:	73f3      	strb	r3, [r6, #15]
    return pool->entries + id - 1;
100044b8:	68a2      	ldr	r2, [r4, #8]
100044ba:	4b34      	ldr	r3, [pc, #208]	; (1000458c <alarm_pool_add_alarm_at.constprop.0+0x114>)
100044bc:	4694      	mov	ip, r2
        entry->target = time;
100044be:	464a      	mov	r2, r9
    return pool->entries + id - 1;
100044c0:	18eb      	adds	r3, r5, r3
100044c2:	011b      	lsls	r3, r3, #4
100044c4:	4463      	add	r3, ip
        entry->target = time;
100044c6:	601a      	str	r2, [r3, #0]
100044c8:	4652      	mov	r2, sl
100044ca:	605a      	str	r2, [r3, #4]
        entry->callback = callback;
100044cc:	4a30      	ldr	r2, [pc, #192]	; (10004590 <alarm_pool_add_alarm_at.constprop.0+0x118>)
100044ce:	609a      	str	r2, [r3, #8]
        entry->user_data = user_data;
100044d0:	2200      	movs	r2, #0
100044d2:	60da      	str	r2, [r3, #12]
    hn->child = hn->sibling = hn->parent = 0;
100044d4:	708a      	strb	r2, [r1, #2]
100044d6:	704a      	strb	r2, [r1, #1]
100044d8:	700a      	strb	r2, [r1, #0]
    heap->root_id = ph_merge_nodes(heap, heap->root_id, id);
100044da:	7b73      	ldrb	r3, [r6, #13]
100044dc:	469b      	mov	fp, r3
    if (!a) return b;
100044de:	2b00      	cmp	r3, #0
100044e0:	d043      	beq.n	1000456a <alarm_pool_add_alarm_at.constprop.0+0xf2>
    if (heap->comparator(heap->user_data, a, b)) {
100044e2:	002a      	movs	r2, r5
100044e4:	0019      	movs	r1, r3
100044e6:	68b0      	ldr	r0, [r6, #8]
100044e8:	6873      	ldr	r3, [r6, #4]
100044ea:	4798      	blx	r3
    return heap->nodes + id - 1;
100044ec:	6832      	ldr	r2, [r6, #0]
    if (heap->comparator(heap->user_data, a, b)) {
100044ee:	2800      	cmp	r0, #0
100044f0:	d02f      	beq.n	10004552 <alarm_pool_add_alarm_at.constprop.0+0xda>
    return heap->nodes + id - 1;
100044f2:	465b      	mov	r3, fp
    c->parent = parent_id;
100044f4:	4658      	mov	r0, fp
    return heap->nodes + id - 1;
100044f6:	005b      	lsls	r3, r3, #1
100044f8:	445b      	add	r3, fp
100044fa:	19d7      	adds	r7, r2, r7
100044fc:	3b03      	subs	r3, #3
    c->parent = parent_id;
100044fe:	70b8      	strb	r0, [r7, #2]
    return heap->nodes + id - 1;
10004500:	18d1      	adds	r1, r2, r3
    if (!n->child) {
10004502:	5cd3      	ldrb	r3, [r2, r3]
10004504:	2b00      	cmp	r3, #0
10004506:	d13f      	bne.n	10004588 <alarm_pool_add_alarm_at.constprop.0+0x110>
    heap->root_id = ph_merge_nodes(heap, heap->root_id, id);
10004508:	465b      	mov	r3, fp
        n->child = child_id;
1000450a:	700d      	strb	r5, [r1, #0]
    heap->root_id = ph_merge_nodes(heap, heap->root_id, id);
1000450c:	7373      	strb	r3, [r6, #13]
        if (id == ph_insert(pool->heap, id)) {
1000450e:	455d      	cmp	r5, fp
10004510:	d02c      	beq.n	1000456c <alarm_pool_add_alarm_at.constprop.0+0xf4>
    bool missed = false;
10004512:	2600      	movs	r6, #0
        if (id) id_high = *get_entry_id_high(pool, id);
10004514:	68e3      	ldr	r3, [r4, #12]
10004516:	195b      	adds	r3, r3, r5
10004518:	3b01      	subs	r3, #1
1000451a:	7819      	ldrb	r1, [r3, #0]
        spin_unlock(pool->lock, save);
1000451c:	6863      	ldr	r3, [r4, #4]
1000451e:	f3bf 8f5f 	dmb	sy
    *lock = 0;
10004522:	2200      	movs	r2, #0
10004524:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10004526:	f388 8810 	msr	PRIMASK, r8
        public_id = missed ? 0 : make_public_id(id_high, id);
1000452a:	2000      	movs	r0, #0
1000452c:	2e00      	cmp	r6, #0
1000452e:	d10a      	bne.n	10004546 <alarm_pool_add_alarm_at.constprop.0+0xce>
    return ((uint)id_high << 8u * sizeof(id)) | id;
10004530:	0208      	lsls	r0, r1, #8
10004532:	4328      	orrs	r0, r5
10004534:	e007      	b.n	10004546 <alarm_pool_add_alarm_at.constprop.0+0xce>
        spin_unlock(pool->lock, save);
10004536:	6863      	ldr	r3, [r4, #4]
    __asm volatile ("dmb");
10004538:	f3bf 8f5f 	dmb	sy
    *lock = 0;
1000453c:	601d      	str	r5, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
1000453e:	f388 8810 	msr	PRIMASK, r8
            return -1;
10004542:	2001      	movs	r0, #1
10004544:	4240      	negs	r0, r0
}
10004546:	bcf0      	pop	{r4, r5, r6, r7}
10004548:	46bb      	mov	fp, r7
1000454a:	46b2      	mov	sl, r6
1000454c:	46a9      	mov	r9, r5
1000454e:	46a0      	mov	r8, r4
10004550:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return heap->nodes + id - 1;
10004552:	465b      	mov	r3, fp
10004554:	005b      	lsls	r3, r3, #1
10004556:	445b      	add	r3, fp
10004558:	3b03      	subs	r3, #3
1000455a:	18d3      	adds	r3, r2, r3
    c->parent = parent_id;
1000455c:	709d      	strb	r5, [r3, #2]
    return heap->nodes + id - 1;
1000455e:	19d1      	adds	r1, r2, r7
    if (!n->child) {
10004560:	5dd2      	ldrb	r2, [r2, r7]
10004562:	2a00      	cmp	r2, #0
10004564:	d10e      	bne.n	10004584 <alarm_pool_add_alarm_at.constprop.0+0x10c>
        n->child = child_id;
10004566:	465b      	mov	r3, fp
10004568:	700b      	strb	r3, [r1, #0]
    heap->root_id = ph_merge_nodes(heap, heap->root_id, id);
1000456a:	7375      	strb	r5, [r6, #13]
            bool is_missed = hardware_alarm_set_target(pool->hardware_alarm_num, time);
1000456c:	464a      	mov	r2, r9
1000456e:	4653      	mov	r3, sl
10004570:	7d20      	ldrb	r0, [r4, #20]
10004572:	f000 faa7 	bl	10004ac4 <hardware_alarm_set_target>
10004576:	1e06      	subs	r6, r0, #0
            if (is_missed && !create_if_past) {
10004578:	d0cb      	beq.n	10004512 <alarm_pool_add_alarm_at.constprop.0+0x9a>
                ph_delete(pool->heap, id);
1000457a:	0029      	movs	r1, r5
1000457c:	6820      	ldr	r0, [r4, #0]
1000457e:	f7fd fd6b 	bl	10002058 <ph_delete>
10004582:	e7c7      	b.n	10004514 <alarm_pool_add_alarm_at.constprop.0+0x9c>
        c->sibling = n->child;
10004584:	705a      	strb	r2, [r3, #1]
10004586:	e7ee      	b.n	10004566 <alarm_pool_add_alarm_at.constprop.0+0xee>
10004588:	707b      	strb	r3, [r7, #1]
1000458a:	e7bd      	b.n	10004508 <alarm_pool_add_alarm_at.constprop.0+0x90>
1000458c:	0fffffff 	.word	0x0fffffff
10004590:	10004189 	.word	0x10004189

10004594 <alarm_pool_init_default>:
void alarm_pool_init_default() {
10004594:	b570      	push	{r4, r5, r6, lr}
    if (!default_alarm_pool) {
10004596:	4c18      	ldr	r4, [pc, #96]	; (100045f8 <alarm_pool_init_default+0x64>)
10004598:	6823      	ldr	r3, [r4, #0]
1000459a:	2b00      	cmp	r3, #0
1000459c:	d000      	beq.n	100045a0 <alarm_pool_init_default+0xc>
}
1000459e:	bd70      	pop	{r4, r5, r6, pc}
    hardware_alarm_claim(hardware_alarm_num);
100045a0:	2003      	movs	r0, #3
100045a2:	f000 fa23 	bl	100049ec <hardware_alarm_claim>
    hardware_alarm_cancel(hardware_alarm_num);
100045a6:	2003      	movs	r0, #3
100045a8:	f000 faee 	bl	10004b88 <hardware_alarm_cancel>
    hardware_alarm_set_callback(hardware_alarm_num, alarm_pool_alarm_callback);
100045ac:	4913      	ldr	r1, [pc, #76]	; (100045fc <alarm_pool_init_default+0x68>)
100045ae:	2003      	movs	r0, #3
100045b0:	f000 fa42 	bl	10004a38 <hardware_alarm_set_callback>
    alarm_pool_t *pool = (alarm_pool_t *)malloc(sizeof(alarm_pool_t));
100045b4:	2018      	movs	r0, #24
100045b6:	f7fd fd8d 	bl	100020d4 <__wrap_malloc>
100045ba:	0005      	movs	r5, r0
    pool->lock = spin_lock_instance(next_striped_spin_lock_num());
100045bc:	f7ff fdae 	bl	1000411c <next_striped_spin_lock_num>
    return (spin_lock_t *) (SIO_BASE + SIO_SPINLOCK0_OFFSET + lock_num * 4);
100045c0:	4b0f      	ldr	r3, [pc, #60]	; (10004600 <alarm_pool_init_default+0x6c>)
    pool->heap = ph_create(max_timers, timer_pool_entry_comparator, pool);
100045c2:	002a      	movs	r2, r5
100045c4:	469c      	mov	ip, r3
100045c6:	4460      	add	r0, ip
100045c8:	0080      	lsls	r0, r0, #2
100045ca:	490e      	ldr	r1, [pc, #56]	; (10004604 <alarm_pool_init_default+0x70>)
    pool->lock = spin_lock_instance(next_striped_spin_lock_num());
100045cc:	6068      	str	r0, [r5, #4]
    pool->heap = ph_create(max_timers, timer_pool_entry_comparator, pool);
100045ce:	2010      	movs	r0, #16
100045d0:	f7fd fbce 	bl	10001d70 <ph_create>
    pool->entries = (alarm_pool_entry_t *)calloc(max_timers, sizeof(alarm_pool_entry_t));
100045d4:	2110      	movs	r1, #16
    pool->heap = ph_create(max_timers, timer_pool_entry_comparator, pool);
100045d6:	6028      	str	r0, [r5, #0]
    pool->entries = (alarm_pool_entry_t *)calloc(max_timers, sizeof(alarm_pool_entry_t));
100045d8:	2010      	movs	r0, #16
100045da:	f7fd fd7f 	bl	100020dc <__wrap_calloc>
    pool->entry_ids_high = (uint8_t *)calloc(max_timers, sizeof(uint8_t));
100045de:	2101      	movs	r1, #1
    pool->entries = (alarm_pool_entry_t *)calloc(max_timers, sizeof(alarm_pool_entry_t));
100045e0:	60a8      	str	r0, [r5, #8]
    pool->entry_ids_high = (uint8_t *)calloc(max_timers, sizeof(uint8_t));
100045e2:	2010      	movs	r0, #16
100045e4:	f7fd fd7a 	bl	100020dc <__wrap_calloc>
    pool->hardware_alarm_num = hardware_alarm_num;
100045e8:	2303      	movs	r3, #3
100045ea:	752b      	strb	r3, [r5, #20]
    pools[hardware_alarm_num] = pool;
100045ec:	4b06      	ldr	r3, [pc, #24]	; (10004608 <alarm_pool_init_default+0x74>)
    pool->entry_ids_high = (uint8_t *)calloc(max_timers, sizeof(uint8_t));
100045ee:	60e8      	str	r0, [r5, #12]
    pools[hardware_alarm_num] = pool;
100045f0:	60dd      	str	r5, [r3, #12]
        default_alarm_pool = alarm_pool_create(PICO_TIME_DEFAULT_ALARM_POOL_HARDWARE_ALARM_NUM,
100045f2:	6025      	str	r5, [r4, #0]
}
100045f4:	e7d3      	b.n	1000459e <alarm_pool_init_default+0xa>
100045f6:	46c0      	nop			; (mov r8, r8)
100045f8:	2001206c 	.word	0x2001206c
100045fc:	100042b1 	.word	0x100042b1
10004600:	34000040 	.word	0x34000040
10004604:	10004155 	.word	0x10004155
10004608:	20012730 	.word	0x20012730

1000460c <alarm_pool_get_default>:
    return default_alarm_pool;
1000460c:	4b01      	ldr	r3, [pc, #4]	; (10004614 <alarm_pool_get_default+0x8>)
1000460e:	6818      	ldr	r0, [r3, #0]
}
10004610:	4770      	bx	lr
10004612:	46c0      	nop			; (mov r8, r8)
10004614:	2001206c 	.word	0x2001206c

10004618 <alarm_pool_add_alarm_at>:
                                   void *user_data, bool fire_if_past) {
10004618:	b5f0      	push	{r4, r5, r6, r7, lr}
1000461a:	46de      	mov	lr, fp
1000461c:	464e      	mov	r6, r9
1000461e:	4645      	mov	r5, r8
10004620:	4657      	mov	r7, sl
10004622:	b5e0      	push	{r5, r6, r7, lr}
10004624:	b085      	sub	sp, #20
10004626:	9301      	str	r3, [sp, #4]
10004628:	ab10      	add	r3, sp, #64	; 0x40
1000462a:	781b      	ldrb	r3, [r3, #0]
1000462c:	0006      	movs	r6, r0
1000462e:	9303      	str	r3, [sp, #12]
    bool missed = false;
10004630:	2300      	movs	r3, #0
10004632:	469b      	mov	fp, r3
    hn->child = hn->sibling = hn->parent = 0;
10004634:	4698      	mov	r8, r3
                                   void *user_data, bool fire_if_past) {
10004636:	9200      	str	r2, [sp, #0]
        uint32_t save = spin_lock_blocking(pool->lock);
10004638:	6872      	ldr	r2, [r6, #4]
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
1000463a:	f3ef 8a10 	mrs	sl, PRIMASK
    __asm volatile ("cpsid i");
1000463e:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
10004640:	6813      	ldr	r3, [r2, #0]
10004642:	2b00      	cmp	r3, #0
10004644:	d0fc      	beq.n	10004640 <alarm_pool_add_alarm_at+0x28>
    __asm volatile ("dmb");
10004646:	f3bf 8f5f 	dmb	sy
        id = ph_new_node(pool->heap);
1000464a:	6835      	ldr	r5, [r6, #0]
    if (!heap->free_head_id) return 0;
1000464c:	7bac      	ldrb	r4, [r5, #14]
1000464e:	2c00      	cmp	r4, #0
10004650:	d100      	bne.n	10004654 <alarm_pool_add_alarm_at+0x3c>
10004652:	e080      	b.n	10004756 <alarm_pool_add_alarm_at+0x13e>
    return heap->nodes + id - 1;
10004654:	0067      	lsls	r7, r4, #1
10004656:	682b      	ldr	r3, [r5, #0]
10004658:	193f      	adds	r7, r7, r4
1000465a:	3f03      	subs	r7, #3
1000465c:	19db      	adds	r3, r3, r7
    heap->free_head_id = ph_get_node(heap, id)->sibling;
1000465e:	785a      	ldrb	r2, [r3, #1]
10004660:	73aa      	strb	r2, [r5, #14]
    if (!heap->free_head_id) heap->free_tail_id = 0;
10004662:	2a00      	cmp	r2, #0
10004664:	d100      	bne.n	10004668 <alarm_pool_add_alarm_at+0x50>
10004666:	73ea      	strb	r2, [r5, #15]
    return pool->entries + id - 1;
10004668:	68b1      	ldr	r1, [r6, #8]
1000466a:	4a55      	ldr	r2, [pc, #340]	; (100047c0 <alarm_pool_add_alarm_at+0x1a8>)
1000466c:	468c      	mov	ip, r1
        entry->target = time;
1000466e:	9800      	ldr	r0, [sp, #0]
10004670:	9901      	ldr	r1, [sp, #4]
    return pool->entries + id - 1;
10004672:	18a2      	adds	r2, r4, r2
10004674:	0112      	lsls	r2, r2, #4
10004676:	4462      	add	r2, ip
        entry->target = time;
10004678:	6010      	str	r0, [r2, #0]
1000467a:	6051      	str	r1, [r2, #4]
        entry->callback = callback;
1000467c:	990e      	ldr	r1, [sp, #56]	; 0x38
1000467e:	6091      	str	r1, [r2, #8]
        entry->user_data = user_data;
10004680:	990f      	ldr	r1, [sp, #60]	; 0x3c
10004682:	60d1      	str	r1, [r2, #12]
    hn->child = hn->sibling = hn->parent = 0;
10004684:	4642      	mov	r2, r8
10004686:	709a      	strb	r2, [r3, #2]
10004688:	705a      	strb	r2, [r3, #1]
1000468a:	701a      	strb	r2, [r3, #0]
    heap->root_id = ph_merge_nodes(heap, heap->root_id, id);
1000468c:	7b6b      	ldrb	r3, [r5, #13]
1000468e:	4699      	mov	r9, r3
    if (!a) return b;
10004690:	2b00      	cmp	r3, #0
10004692:	d100      	bne.n	10004696 <alarm_pool_add_alarm_at+0x7e>
10004694:	e07d      	b.n	10004792 <alarm_pool_add_alarm_at+0x17a>
    if (heap->comparator(heap->user_data, a, b)) {
10004696:	0022      	movs	r2, r4
10004698:	0019      	movs	r1, r3
1000469a:	68a8      	ldr	r0, [r5, #8]
1000469c:	686b      	ldr	r3, [r5, #4]
1000469e:	4798      	blx	r3
    return heap->nodes + id - 1;
100046a0:	682a      	ldr	r2, [r5, #0]
    if (heap->comparator(heap->user_data, a, b)) {
100046a2:	2800      	cmp	r0, #0
100046a4:	d069      	beq.n	1000477a <alarm_pool_add_alarm_at+0x162>
    return heap->nodes + id - 1;
100046a6:	464b      	mov	r3, r9
    c->parent = parent_id;
100046a8:	4648      	mov	r0, r9
    return heap->nodes + id - 1;
100046aa:	005b      	lsls	r3, r3, #1
100046ac:	444b      	add	r3, r9
100046ae:	19d7      	adds	r7, r2, r7
100046b0:	3b03      	subs	r3, #3
    c->parent = parent_id;
100046b2:	70b8      	strb	r0, [r7, #2]
    return heap->nodes + id - 1;
100046b4:	18d1      	adds	r1, r2, r3
    if (!n->child) {
100046b6:	5cd3      	ldrb	r3, [r2, r3]
100046b8:	2b00      	cmp	r3, #0
100046ba:	d000      	beq.n	100046be <alarm_pool_add_alarm_at+0xa6>
100046bc:	e07c      	b.n	100047b8 <alarm_pool_add_alarm_at+0x1a0>
    heap->root_id = ph_merge_nodes(heap, heap->root_id, id);
100046be:	464b      	mov	r3, r9
        n->child = child_id;
100046c0:	700c      	strb	r4, [r1, #0]
    heap->root_id = ph_merge_nodes(heap, heap->root_id, id);
100046c2:	736b      	strb	r3, [r5, #13]
        if (id == ph_insert(pool->heap, id)) {
100046c4:	454c      	cmp	r4, r9
100046c6:	d065      	beq.n	10004794 <alarm_pool_add_alarm_at+0x17c>
        if (id) id_high = *get_entry_id_high(pool, id);
100046c8:	68f3      	ldr	r3, [r6, #12]
100046ca:	191b      	adds	r3, r3, r4
100046cc:	3b01      	subs	r3, #1
100046ce:	7818      	ldrb	r0, [r3, #0]
        spin_unlock(pool->lock, save);
100046d0:	6873      	ldr	r3, [r6, #4]
100046d2:	f3bf 8f5f 	dmb	sy
    *lock = 0;
100046d6:	4642      	mov	r2, r8
100046d8:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
100046da:	f38a 8810 	msr	PRIMASK, sl
        public_id = missed ? 0 : make_public_id(id_high, id);
100046de:	465b      	mov	r3, fp
100046e0:	2b00      	cmp	r3, #0
100046e2:	d108      	bne.n	100046f6 <alarm_pool_add_alarm_at+0xde>
    return ((uint)id_high << 8u * sizeof(id)) | id;
100046e4:	0200      	lsls	r0, r0, #8
100046e6:	4320      	orrs	r0, r4
}
100046e8:	b005      	add	sp, #20
100046ea:	bcf0      	pop	{r4, r5, r6, r7}
100046ec:	46bb      	mov	fp, r7
100046ee:	46b2      	mov	sl, r6
100046f0:	46a9      	mov	r9, r5
100046f2:	46a0      	mov	r8, r4
100046f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (missed && fire_if_past) {
100046f6:	9b03      	ldr	r3, [sp, #12]
100046f8:	2b00      	cmp	r3, #0
100046fa:	d05f      	beq.n	100047bc <alarm_pool_add_alarm_at+0x1a4>
            int64_t repeat = callback(public_id, user_data);
100046fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
100046fe:	2000      	movs	r0, #0
10004700:	990f      	ldr	r1, [sp, #60]	; 0x3c
10004702:	4798      	blx	r3
            if (!repeat) {
10004704:	0003      	movs	r3, r0
            int64_t repeat = callback(public_id, user_data);
10004706:	0004      	movs	r4, r0
10004708:	000d      	movs	r5, r1
            if (!repeat) {
1000470a:	430b      	orrs	r3, r1
1000470c:	d056      	beq.n	100047bc <alarm_pool_add_alarm_at+0x1a4>
            } else if (repeat < 0) {
1000470e:	2900      	cmp	r1, #0
10004710:	da0d      	bge.n	1000472e <alarm_pool_add_alarm_at+0x116>
    uint64_t delayed = base + us;
10004712:	9800      	ldr	r0, [sp, #0]
10004714:	9901      	ldr	r1, [sp, #4]
10004716:	0002      	movs	r2, r0
10004718:	000b      	movs	r3, r1
1000471a:	1b12      	subs	r2, r2, r4
1000471c:	41ab      	sbcs	r3, r5
    if (delayed < base) {
1000471e:	4299      	cmp	r1, r3
10004720:	d813      	bhi.n	1000474a <alarm_pool_add_alarm_at+0x132>
10004722:	d021      	beq.n	10004768 <alarm_pool_add_alarm_at+0x150>
10004724:	9200      	str	r2, [sp, #0]
10004726:	9301      	str	r3, [sp, #4]
        delayed = (uint64_t)-1;
10004728:	9b03      	ldr	r3, [sp, #12]
1000472a:	469b      	mov	fp, r3
1000472c:	e784      	b.n	10004638 <alarm_pool_add_alarm_at+0x20>
    update_us_since_boot(&t, time_us_64());
1000472e:	f000 f969 	bl	10004a04 <time_us_64>
10004732:	0002      	movs	r2, r0
10004734:	000b      	movs	r3, r1
    uint64_t delayed = base + us;
10004736:	18a4      	adds	r4, r4, r2
10004738:	415d      	adcs	r5, r3
1000473a:	9400      	str	r4, [sp, #0]
1000473c:	9501      	str	r5, [sp, #4]
    if (delayed < base) {
1000473e:	42a9      	cmp	r1, r5
10004740:	d803      	bhi.n	1000474a <alarm_pool_add_alarm_at+0x132>
10004742:	d1f1      	bne.n	10004728 <alarm_pool_add_alarm_at+0x110>
10004744:	9900      	ldr	r1, [sp, #0]
10004746:	428a      	cmp	r2, r1
10004748:	d9ee      	bls.n	10004728 <alarm_pool_add_alarm_at+0x110>
        delayed = (uint64_t)-1;
1000474a:	2301      	movs	r3, #1
1000474c:	425b      	negs	r3, r3
1000474e:	17dc      	asrs	r4, r3, #31
10004750:	9300      	str	r3, [sp, #0]
10004752:	9401      	str	r4, [sp, #4]
10004754:	e7e8      	b.n	10004728 <alarm_pool_add_alarm_at+0x110>
        spin_unlock(pool->lock, save);
10004756:	6873      	ldr	r3, [r6, #4]
    __asm volatile ("dmb");
10004758:	f3bf 8f5f 	dmb	sy
    *lock = 0;
1000475c:	601c      	str	r4, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
1000475e:	f38a 8810 	msr	PRIMASK, sl
            return -1;
10004762:	2001      	movs	r0, #1
10004764:	4240      	negs	r0, r0
10004766:	e7bf      	b.n	100046e8 <alarm_pool_add_alarm_at+0xd0>
    if (delayed < base) {
10004768:	9900      	ldr	r1, [sp, #0]
1000476a:	4291      	cmp	r1, r2
1000476c:	d9da      	bls.n	10004724 <alarm_pool_add_alarm_at+0x10c>
        delayed = (uint64_t)-1;
1000476e:	2301      	movs	r3, #1
10004770:	425b      	negs	r3, r3
10004772:	17dc      	asrs	r4, r3, #31
10004774:	9300      	str	r3, [sp, #0]
10004776:	9401      	str	r4, [sp, #4]
10004778:	e7d6      	b.n	10004728 <alarm_pool_add_alarm_at+0x110>
    return heap->nodes + id - 1;
1000477a:	464b      	mov	r3, r9
1000477c:	005b      	lsls	r3, r3, #1
1000477e:	444b      	add	r3, r9
10004780:	3b03      	subs	r3, #3
10004782:	18d3      	adds	r3, r2, r3
    c->parent = parent_id;
10004784:	709c      	strb	r4, [r3, #2]
    return heap->nodes + id - 1;
10004786:	19d1      	adds	r1, r2, r7
    if (!n->child) {
10004788:	5dd2      	ldrb	r2, [r2, r7]
1000478a:	2a00      	cmp	r2, #0
1000478c:	d110      	bne.n	100047b0 <alarm_pool_add_alarm_at+0x198>
        n->child = child_id;
1000478e:	464b      	mov	r3, r9
10004790:	700b      	strb	r3, [r1, #0]
    heap->root_id = ph_merge_nodes(heap, heap->root_id, id);
10004792:	736c      	strb	r4, [r5, #13]
            bool is_missed = hardware_alarm_set_target(pool->hardware_alarm_num, time);
10004794:	7d30      	ldrb	r0, [r6, #20]
10004796:	9a00      	ldr	r2, [sp, #0]
10004798:	9b01      	ldr	r3, [sp, #4]
1000479a:	f000 f993 	bl	10004ac4 <hardware_alarm_set_target>
1000479e:	4683      	mov	fp, r0
            if (is_missed && !create_if_past) {
100047a0:	2800      	cmp	r0, #0
100047a2:	d100      	bne.n	100047a6 <alarm_pool_add_alarm_at+0x18e>
100047a4:	e790      	b.n	100046c8 <alarm_pool_add_alarm_at+0xb0>
                ph_delete(pool->heap, id);
100047a6:	0021      	movs	r1, r4
100047a8:	6830      	ldr	r0, [r6, #0]
100047aa:	f7fd fc55 	bl	10002058 <ph_delete>
100047ae:	e78b      	b.n	100046c8 <alarm_pool_add_alarm_at+0xb0>
        c->sibling = n->child;
100047b0:	705a      	strb	r2, [r3, #1]
        n->child = child_id;
100047b2:	464b      	mov	r3, r9
100047b4:	700b      	strb	r3, [r1, #0]
100047b6:	e7ec      	b.n	10004792 <alarm_pool_add_alarm_at+0x17a>
        c->sibling = n->child;
100047b8:	707b      	strb	r3, [r7, #1]
100047ba:	e780      	b.n	100046be <alarm_pool_add_alarm_at+0xa6>
    bool missed = false;
100047bc:	2000      	movs	r0, #0
    return public_id;
100047be:	e793      	b.n	100046e8 <alarm_pool_add_alarm_at+0xd0>
100047c0:	0fffffff 	.word	0x0fffffff

100047c4 <alarm_pool_cancel_alarm>:
bool alarm_pool_cancel_alarm(alarm_pool_t *pool, alarm_id_t alarm_id) {
100047c4:	b570      	push	{r4, r5, r6, lr}
    uint32_t save = spin_lock_blocking(pool->lock);
100047c6:	6842      	ldr	r2, [r0, #4]
bool alarm_pool_cancel_alarm(alarm_pool_t *pool, alarm_id_t alarm_id) {
100047c8:	0004      	movs	r4, r0
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
100047ca:	f3ef 8510 	mrs	r5, PRIMASK
    __asm volatile ("cpsid i");
100047ce:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
100047d0:	6813      	ldr	r3, [r2, #0]
100047d2:	2b00      	cmp	r3, #0
100047d4:	d0fc      	beq.n	100047d0 <alarm_pool_cancel_alarm+0xc>
    __asm volatile ("dmb");
100047d6:	f3bf 8f5f 	dmb	sy
    if (ph_contains(pool->heap, id)) {
100047da:	6820      	ldr	r0, [r4, #0]
    pheap_node_id_t id = (pheap_node_id_t) alarm_id;
100047dc:	b2ce      	uxtb	r6, r1
    return id == heap->root_id || ph_get_node(heap, id)->parent;
100047de:	7b43      	ldrb	r3, [r0, #13]
100047e0:	42b3      	cmp	r3, r6
100047e2:	d00a      	beq.n	100047fa <alarm_pool_cancel_alarm+0x36>
    return heap->nodes + id - 1;
100047e4:	23ff      	movs	r3, #255	; 0xff
100047e6:	400b      	ands	r3, r1
    return id == heap->root_id || ph_get_node(heap, id)->parent;
100047e8:	005a      	lsls	r2, r3, #1
100047ea:	18d3      	adds	r3, r2, r3
100047ec:	6802      	ldr	r2, [r0, #0]
100047ee:	4694      	mov	ip, r2
100047f0:	4463      	add	r3, ip
100047f2:	3b03      	subs	r3, #3
100047f4:	789b      	ldrb	r3, [r3, #2]
100047f6:	2b00      	cmp	r3, #0
100047f8:	d013      	beq.n	10004822 <alarm_pool_cancel_alarm+0x5e>
        if (id_high == *get_entry_id_high(pool, id)) {
100047fa:	68e2      	ldr	r2, [r4, #12]
    return heap->nodes + id - 1;
100047fc:	23ff      	movs	r3, #255	; 0xff
100047fe:	4694      	mov	ip, r2
10004800:	400b      	ands	r3, r1
10004802:	4463      	add	r3, ip
10004804:	3b01      	subs	r3, #1
        uint8_t id_high = (uint8_t)((uint)alarm_id >> 8u * sizeof(pheap_node_id_t));
10004806:	0a0a      	lsrs	r2, r1, #8
        if (id_high == *get_entry_id_high(pool, id)) {
10004808:	7819      	ldrb	r1, [r3, #0]
1000480a:	b2d2      	uxtb	r2, r2
1000480c:	4291      	cmp	r1, r2
1000480e:	d00e      	beq.n	1000482e <alarm_pool_cancel_alarm+0x6a>
    bool rc = false;
10004810:	2000      	movs	r0, #0
    spin_unlock(pool->lock, save);
10004812:	6863      	ldr	r3, [r4, #4]
10004814:	f3bf 8f5f 	dmb	sy
    *lock = 0;
10004818:	2200      	movs	r2, #0
1000481a:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
1000481c:	f385 8810 	msr	PRIMASK, r5
}
10004820:	bd70      	pop	{r4, r5, r6, pc}
        if (alarm_id == pool->alarm_in_progress) {
10004822:	6922      	ldr	r2, [r4, #16]
10004824:	428a      	cmp	r2, r1
10004826:	d1f3      	bne.n	10004810 <alarm_pool_cancel_alarm+0x4c>
    bool rc = false;
10004828:	2000      	movs	r0, #0
            pool->alarm_in_progress = 0;
1000482a:	6123      	str	r3, [r4, #16]
1000482c:	e7f1      	b.n	10004812 <alarm_pool_cancel_alarm+0x4e>
            rc = ph_delete(pool->heap, id);
1000482e:	0031      	movs	r1, r6
10004830:	f7fd fc12 	bl	10002058 <ph_delete>
10004834:	e7ed      	b.n	10004812 <alarm_pool_cancel_alarm+0x4e>
10004836:	46c0      	nop			; (mov r8, r8)

10004838 <sleep_ms>:
    }
#endif

}

void sleep_ms(uint32_t ms) {
10004838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000483a:	0004      	movs	r4, r0
    update_us_since_boot(&t, time_us_64());
1000483c:	f000 f8e2 	bl	10004a04 <time_us_64>
    sleep_us(ms * 1000ull);
10004840:	22fa      	movs	r2, #250	; 0xfa
10004842:	0006      	movs	r6, r0
10004844:	000f      	movs	r7, r1
10004846:	0020      	movs	r0, r4
10004848:	2300      	movs	r3, #0
1000484a:	2100      	movs	r1, #0
1000484c:	0092      	lsls	r2, r2, #2
1000484e:	f7fc fc55 	bl	100010fc <__wrap___aeabi_lmul>
    uint64_t delayed = base + us;
10004852:	1980      	adds	r0, r0, r6
10004854:	4179      	adcs	r1, r7
10004856:	0004      	movs	r4, r0
10004858:	000d      	movs	r5, r1
    if (delayed < base) {
1000485a:	428f      	cmp	r7, r1
1000485c:	d81a      	bhi.n	10004894 <sleep_ms+0x5c>
1000485e:	d017      	beq.n	10004890 <sleep_ms+0x58>
    uint64_t t_before_us = t_us - PICO_TIME_SLEEP_OVERHEAD_ADJUST_US;
10004860:	2606      	movs	r6, #6
10004862:	4276      	negs	r6, r6
10004864:	17f7      	asrs	r7, r6, #31
10004866:	1936      	adds	r6, r6, r4
10004868:	416f      	adcs	r7, r5
    if (t_before_us > t_us) t_before_us = 0;
1000486a:	42af      	cmp	r7, r5
1000486c:	d937      	bls.n	100048de <sleep_ms+0xa6>
1000486e:	2600      	movs	r6, #0
10004870:	2700      	movs	r7, #0
    update_us_since_boot(&t, time_us_64());
10004872:	f000 f8c7 	bl	10004a04 <time_us_64>
    return to_us_since_boot(to) - to_us_since_boot(from);
10004876:	0032      	movs	r2, r6
10004878:	003b      	movs	r3, r7
1000487a:	1a12      	subs	r2, r2, r0
1000487c:	418b      	sbcs	r3, r1
    if (absolute_time_diff_us(get_absolute_time(), t_before) > 0) {
1000487e:	2b00      	cmp	r3, #0
10004880:	dc16      	bgt.n	100048b0 <sleep_ms+0x78>
10004882:	2b00      	cmp	r3, #0
10004884:	d028      	beq.n	100048d8 <sleep_ms+0xa0>
    busy_wait_until(t);
10004886:	0029      	movs	r1, r5
10004888:	0020      	movs	r0, r4
1000488a:	f000 f8c5 	bl	10004a18 <busy_wait_until>
}
1000488e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (delayed < base) {
10004890:	4286      	cmp	r6, r0
10004892:	d9e5      	bls.n	10004860 <sleep_ms+0x28>
    uint64_t t_before_us = t_us - PICO_TIME_SLEEP_OVERHEAD_ADJUST_US;
10004894:	2607      	movs	r6, #7
10004896:	4276      	negs	r6, r6
10004898:	17f7      	asrs	r7, r6, #31
    update_us_since_boot(&t, time_us_64());
1000489a:	f000 f8b3 	bl	10004a04 <time_us_64>
    return to_us_since_boot(to) - to_us_since_boot(from);
1000489e:	0032      	movs	r2, r6
100048a0:	003b      	movs	r3, r7
100048a2:	1a12      	subs	r2, r2, r0
100048a4:	418b      	sbcs	r3, r1
        delayed = (uint64_t)-1;
100048a6:	2401      	movs	r4, #1
100048a8:	4264      	negs	r4, r4
100048aa:	17e5      	asrs	r5, r4, #31
    if (absolute_time_diff_us(get_absolute_time(), t_before) > 0) {
100048ac:	2b00      	cmp	r3, #0
100048ae:	dde8      	ble.n	10004882 <sleep_ms+0x4a>
    return default_alarm_pool;
100048b0:	4b0d      	ldr	r3, [pc, #52]	; (100048e8 <sleep_ms+0xb0>)
    return alarm_pool_add_alarm_at(alarm_pool_get_default(), time, callback, user_data, fire_if_past);
100048b2:	0032      	movs	r2, r6
100048b4:	6818      	ldr	r0, [r3, #0]
100048b6:	003b      	movs	r3, r7
100048b8:	f7ff fdde 	bl	10004478 <alarm_pool_add_alarm_at.constprop.0>
        if (add_alarm_at(t_before, sev_callback, NULL, false) >= 0) {
100048bc:	2800      	cmp	r0, #0
100048be:	dbe2      	blt.n	10004886 <sleep_ms+0x4e>
 * \param t Absolute time to compare against current time
 * \return true if it is now after the specified timestamp
 */
static inline bool time_reached(absolute_time_t t) {
    uint64_t target = to_us_since_boot(t);
    uint32_t hi_target = target >> 32u;
100048c0:	0039      	movs	r1, r7
    uint32_t hi = timer_hw->timerawh;
100048c2:	4a0a      	ldr	r2, [pc, #40]	; (100048ec <sleep_ms+0xb4>)
100048c4:	6a53      	ldr	r3, [r2, #36]	; 0x24
    return (hi >= hi_target && (timer_hw->timerawl >= (uint32_t) target || hi != hi_target));
100048c6:	4299      	cmp	r1, r3
100048c8:	d804      	bhi.n	100048d4 <sleep_ms+0x9c>
100048ca:	6a90      	ldr	r0, [r2, #40]	; 0x28
100048cc:	4286      	cmp	r6, r0
100048ce:	d9da      	bls.n	10004886 <sleep_ms+0x4e>
100048d0:	4299      	cmp	r1, r3
100048d2:	d1d8      	bne.n	10004886 <sleep_ms+0x4e>
    __asm volatile ("wfe");
100048d4:	bf20      	wfe
}
100048d6:	e7f5      	b.n	100048c4 <sleep_ms+0x8c>
    if (absolute_time_diff_us(get_absolute_time(), t_before) > 0) {
100048d8:	2a00      	cmp	r2, #0
100048da:	d0d4      	beq.n	10004886 <sleep_ms+0x4e>
100048dc:	e7e8      	b.n	100048b0 <sleep_ms+0x78>
    if (t_before_us > t_us) t_before_us = 0;
100048de:	42af      	cmp	r7, r5
100048e0:	d1c7      	bne.n	10004872 <sleep_ms+0x3a>
100048e2:	42a6      	cmp	r6, r4
100048e4:	d8c3      	bhi.n	1000486e <sleep_ms+0x36>
100048e6:	e7c4      	b.n	10004872 <sleep_ms+0x3a>
100048e8:	2001206c 	.word	0x2001206c
100048ec:	40054000 	.word	0x40054000

100048f0 <best_effort_wfe_or_timeout>:

bool best_effort_wfe_or_timeout(absolute_time_t timeout_timestamp) {
100048f0:	b570      	push	{r4, r5, r6, lr}
    return default_alarm_pool;
100048f2:	4d0e      	ldr	r5, [pc, #56]	; (1000492c <best_effort_wfe_or_timeout+0x3c>)
100048f4:	0002      	movs	r2, r0
100048f6:	000b      	movs	r3, r1
bool best_effort_wfe_or_timeout(absolute_time_t timeout_timestamp) {
100048f8:	0006      	movs	r6, r0
100048fa:	6828      	ldr	r0, [r5, #0]
100048fc:	000c      	movs	r4, r1
100048fe:	f7ff fdbb 	bl	10004478 <alarm_pool_add_alarm_at.constprop.0>
10004902:	1e01      	subs	r1, r0, #0
#if !PICO_TIME_DEFAULT_ALARM_POOL_DISABLED
    alarm_id_t id;
    id = add_alarm_at(timeout_timestamp, sev_callback, NULL, false);
    if (id <= 0) {
10004904:	dd03      	ble.n	1000490e <best_effort_wfe_or_timeout+0x1e>
    __asm volatile ("wfe");
10004906:	bf20      	wfe
 * \param alarm_id the alarm
 * \return true if the alarm was cancelled, false if it didn't exist
 * \sa alarm_id_t for a note on reuse of IDs
 */
static inline bool cancel_alarm(alarm_id_t alarm_id) {
    return alarm_pool_cancel_alarm(alarm_pool_get_default(), alarm_id);
10004908:	6828      	ldr	r0, [r5, #0]
1000490a:	f7ff ff5b 	bl	100047c4 <alarm_pool_cancel_alarm>
    uint32_t hi = timer_hw->timerawh;
1000490e:	4b08      	ldr	r3, [pc, #32]	; (10004930 <best_effort_wfe_or_timeout+0x40>)
10004910:	2000      	movs	r0, #0
10004912:	6a59      	ldr	r1, [r3, #36]	; 0x24
    return (hi >= hi_target && (timer_hw->timerawl >= (uint32_t) target || hi != hi_target));
10004914:	428c      	cmp	r4, r1
10004916:	d803      	bhi.n	10004920 <best_effort_wfe_or_timeout+0x30>
10004918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1000491a:	3001      	adds	r0, #1
1000491c:	42b3      	cmp	r3, r6
1000491e:	d300      	bcc.n	10004922 <best_effort_wfe_or_timeout+0x32>
    }
#else
    tight_loop_contents();
    return time_reached(timeout_timestamp);
#endif
}
10004920:	bd70      	pop	{r4, r5, r6, pc}
10004922:	1a64      	subs	r4, r4, r1
10004924:	1e63      	subs	r3, r4, #1
10004926:	419c      	sbcs	r4, r3
10004928:	b2e0      	uxtb	r0, r4
1000492a:	e7f9      	b.n	10004920 <best_effort_wfe_or_timeout+0x30>
1000492c:	2001206c 	.word	0x2001206c
10004930:	40054000 	.word	0x40054000

10004934 <hardware_alarm_irq_handler>:

static inline uint harware_alarm_irq_number(uint alarm_num) {
    return TIMER_IRQ_0 + alarm_num;
}

static void hardware_alarm_irq_handler() {
10004934:	b5f0      	push	{r4, r5, r6, r7, lr}
10004936:	46d6      	mov	lr, sl
10004938:	464f      	mov	r7, r9
1000493a:	4646      	mov	r6, r8
1000493c:	b5c0      	push	{r6, r7, lr}
    // Determine which timer this IRQ is for
    uint32_t ipsr;
    __asm volatile ("mrs %0, ipsr" : "=r" (ipsr)::);
1000493e:	f3ef 8305 	mrs	r3, IPSR
    uint alarm_num = (ipsr & 0x3fu) - 16 - TIMER_IRQ_0;
10004942:	223f      	movs	r2, #63	; 0x3f
10004944:	4013      	ands	r3, r2
10004946:	0018      	movs	r0, r3
10004948:	3810      	subs	r0, #16
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
1000494a:	f3ef 8c10 	mrs	ip, PRIMASK
    __asm volatile ("cpsid i");
1000494e:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
10004950:	4d20      	ldr	r5, [pc, #128]	; (100049d4 <hardware_alarm_irq_handler+0xa0>)
10004952:	682a      	ldr	r2, [r5, #0]
10004954:	2a00      	cmp	r2, #0
10004956:	d0fc      	beq.n	10004952 <hardware_alarm_irq_handler+0x1e>
    __asm volatile ("dmb");
10004958:	f3bf 8f5f 	dmb	sy
    hardware_alarm_callback_t callback = NULL;

    spin_lock_t *lock = spin_lock_instance(PICO_SPINLOCK_ID_TIMER);
    uint32_t save = spin_lock_blocking(lock);
    // Clear the timer IRQ (inside lock, because we check whether we have handled the IRQ yet in alarm_set by looking at the interrupt status
    timer_hw->intr = 1u << alarm_num;
1000495c:	2201      	movs	r2, #1
1000495e:	0011      	movs	r1, r2
10004960:	4081      	lsls	r1, r0
10004962:	4c1d      	ldr	r4, [pc, #116]	; (100049d8 <hardware_alarm_irq_handler+0xa4>)
10004964:	4688      	mov	r8, r1
10004966:	6361      	str	r1, [r4, #52]	; 0x34

    // make sure the IRQ is still valid
    if (timer_callbacks_pending & (1u << alarm_num)) {
10004968:	491c      	ldr	r1, [pc, #112]	; (100049dc <hardware_alarm_irq_handler+0xa8>)
1000496a:	0017      	movs	r7, r2
1000496c:	780e      	ldrb	r6, [r1, #0]
1000496e:	468a      	mov	sl, r1
10004970:	0031      	movs	r1, r6
10004972:	40c1      	lsrs	r1, r0
10004974:	400f      	ands	r7, r1
10004976:	420a      	tst	r2, r1
10004978:	d109      	bne.n	1000498e <hardware_alarm_irq_handler+0x5a>
1000497a:	f3bf 8f5f 	dmb	sy
    *lock = 0;
1000497e:	602f      	str	r7, [r5, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10004980:	f38c 8810 	msr	PRIMASK, ip
    spin_unlock(lock, save);

    if (callback) {
        callback(alarm_num);
    }
}
10004984:	bce0      	pop	{r5, r6, r7}
10004986:	46ba      	mov	sl, r7
10004988:	46b1      	mov	r9, r6
1000498a:	46a8      	mov	r8, r5
1000498c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (timer_hw->timerawh >= target_hi[alarm_num]) {
1000498e:	4914      	ldr	r1, [pc, #80]	; (100049e0 <hardware_alarm_irq_handler+0xac>)
10004990:	0082      	lsls	r2, r0, #2
10004992:	6a64      	ldr	r4, [r4, #36]	; 0x24
10004994:	5851      	ldr	r1, [r2, r1]
10004996:	428c      	cmp	r4, r1
10004998:	d30f      	bcc.n	100049ba <hardware_alarm_irq_handler+0x86>
            callback = alarm_callbacks[alarm_num];
1000499a:	4b12      	ldr	r3, [pc, #72]	; (100049e4 <hardware_alarm_irq_handler+0xb0>)
1000499c:	58d2      	ldr	r2, [r2, r3]
            timer_callbacks_pending &= ~(1u << alarm_num);
1000499e:	4643      	mov	r3, r8
100049a0:	439e      	bics	r6, r3
100049a2:	4653      	mov	r3, sl
100049a4:	701e      	strb	r6, [r3, #0]
    __asm volatile ("dmb");
100049a6:	f3bf 8f5f 	dmb	sy
    *lock = 0;
100049aa:	2300      	movs	r3, #0
100049ac:	602b      	str	r3, [r5, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
100049ae:	f38c 8810 	msr	PRIMASK, ip
    if (callback) {
100049b2:	2a00      	cmp	r2, #0
100049b4:	d0e6      	beq.n	10004984 <hardware_alarm_irq_handler+0x50>
        callback(alarm_num);
100049b6:	4790      	blx	r2
}
100049b8:	e7e4      	b.n	10004984 <hardware_alarm_irq_handler+0x50>
            timer_hw->alarm[alarm_num] = timer_hw->alarm[alarm_num]; // re-arm the timer
100049ba:	4a0b      	ldr	r2, [pc, #44]	; (100049e8 <hardware_alarm_irq_handler+0xb4>)
100049bc:	009b      	lsls	r3, r3, #2
100049be:	4690      	mov	r8, r2
100049c0:	4443      	add	r3, r8
100049c2:	681a      	ldr	r2, [r3, #0]
100049c4:	601a      	str	r2, [r3, #0]
    __asm volatile ("dmb");
100049c6:	f3bf 8f5f 	dmb	sy
    *lock = 0;
100049ca:	2300      	movs	r3, #0
100049cc:	602b      	str	r3, [r5, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
100049ce:	f38c 8810 	msr	PRIMASK, ip
    if (callback) {
100049d2:	e7d7      	b.n	10004984 <hardware_alarm_irq_handler+0x50>
100049d4:	d0000128 	.word	0xd0000128
100049d8:	40054000 	.word	0x40054000
100049dc:	20012777 	.word	0x20012777
100049e0:	20012754 	.word	0x20012754
100049e4:	20011f30 	.word	0x20011f30
100049e8:	40053fd0 	.word	0x40053fd0

100049ec <hardware_alarm_claim>:
void hardware_alarm_claim(uint alarm_num) {
100049ec:	b510      	push	{r4, lr}
100049ee:	0001      	movs	r1, r0
    hw_claim_or_assert(&claimed, alarm_num, "Hardware alarm %d already claimed");
100049f0:	4a02      	ldr	r2, [pc, #8]	; (100049fc <hardware_alarm_claim+0x10>)
100049f2:	4803      	ldr	r0, [pc, #12]	; (10004a00 <hardware_alarm_claim+0x14>)
100049f4:	f7fc fbe4 	bl	100011c0 <hw_claim_or_assert>
}
100049f8:	bd10      	pop	{r4, pc}
100049fa:	46c0      	nop			; (mov r8, r8)
100049fc:	1001075c 	.word	0x1001075c
10004a00:	20012775 	.word	0x20012775

10004a04 <time_us_64>:
    uint32_t hi = timer_hw->timerawh;
10004a04:	4b03      	ldr	r3, [pc, #12]	; (10004a14 <time_us_64+0x10>)
10004a06:	6a59      	ldr	r1, [r3, #36]	; 0x24
        lo = timer_hw->timerawl;
10004a08:	000a      	movs	r2, r1
10004a0a:	6a98      	ldr	r0, [r3, #40]	; 0x28
        uint32_t next_hi = timer_hw->timerawh;
10004a0c:	6a59      	ldr	r1, [r3, #36]	; 0x24
        if (hi == next_hi) break;
10004a0e:	428a      	cmp	r2, r1
10004a10:	d1fa      	bne.n	10004a08 <time_us_64+0x4>
}
10004a12:	4770      	bx	lr
10004a14:	40054000 	.word	0x40054000

10004a18 <busy_wait_until>:
    uint32_t hi = timer_hw->timerawh;
10004a18:	4a06      	ldr	r2, [pc, #24]	; (10004a34 <busy_wait_until+0x1c>)
10004a1a:	6a53      	ldr	r3, [r2, #36]	; 0x24
    while (hi < hi_target) {
10004a1c:	4299      	cmp	r1, r3
10004a1e:	d8fc      	bhi.n	10004a1a <busy_wait_until+0x2>
    while (hi == hi_target && timer_hw->timerawl < (uint32_t) target) {
10004a20:	d107      	bne.n	10004a32 <busy_wait_until+0x1a>
10004a22:	4b04      	ldr	r3, [pc, #16]	; (10004a34 <busy_wait_until+0x1c>)
10004a24:	e002      	b.n	10004a2c <busy_wait_until+0x14>
        hi = timer_hw->timerawh;
10004a26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    while (hi == hi_target && timer_hw->timerawl < (uint32_t) target) {
10004a28:	4291      	cmp	r1, r2
10004a2a:	d102      	bne.n	10004a32 <busy_wait_until+0x1a>
10004a2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
10004a2e:	4282      	cmp	r2, r0
10004a30:	d3f9      	bcc.n	10004a26 <busy_wait_until+0xe>
}
10004a32:	4770      	bx	lr
10004a34:	40054000 	.word	0x40054000

10004a38 <hardware_alarm_set_callback>:

void hardware_alarm_set_callback(uint alarm_num, hardware_alarm_callback_t callback) {
10004a38:	b570      	push	{r4, r5, r6, lr}
10004a3a:	0004      	movs	r4, r0
10004a3c:	000d      	movs	r5, r1
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
10004a3e:	f3ef 8610 	mrs	r6, PRIMASK
    __asm volatile ("cpsid i");
10004a42:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
10004a44:	4a1a      	ldr	r2, [pc, #104]	; (10004ab0 <hardware_alarm_set_callback+0x78>)
10004a46:	6813      	ldr	r3, [r2, #0]
10004a48:	2b00      	cmp	r3, #0
10004a4a:	d0fc      	beq.n	10004a46 <hardware_alarm_set_callback+0xe>
    __asm volatile ("dmb");
10004a4c:	f3bf 8f5f 	dmb	sy
    //  should disallow IRQ handlers on both cores
    check_hardware_alarm_num_param(alarm_num);
    uint irq_num = harware_alarm_irq_number(alarm_num);
    spin_lock_t *lock = spin_lock_instance(PICO_SPINLOCK_ID_TIMER);
    uint32_t save = spin_lock_blocking(lock);
    if (callback) {
10004a50:	2d00      	cmp	r5, #0
10004a52:	d01b      	beq.n	10004a8c <hardware_alarm_set_callback+0x54>
        if (hardware_alarm_irq_handler != irq_get_vtable_handler(irq_num)) {
10004a54:	0020      	movs	r0, r4
10004a56:	f7fc ff33 	bl	100018c0 <irq_get_vtable_handler>
10004a5a:	4916      	ldr	r1, [pc, #88]	; (10004ab4 <hardware_alarm_set_callback+0x7c>)
10004a5c:	4281      	cmp	r1, r0
10004a5e:	d00a      	beq.n	10004a76 <hardware_alarm_set_callback+0x3e>
            // note that set_exclusive will silently allow you to set the handler to the same thing
            // since it is idempotent, which means we don't need to worry about locking ourselves
            irq_set_exclusive_handler(irq_num, hardware_alarm_irq_handler);
10004a60:	0020      	movs	r0, r4
10004a62:	f7fc ff35 	bl	100018d0 <irq_set_exclusive_handler>
            irq_set_enabled(irq_num, true);
10004a66:	2101      	movs	r1, #1
10004a68:	0020      	movs	r0, r4
10004a6a:	f7fc ff0f 	bl	1000188c <irq_set_enabled>
            // Enable interrupt in block and at processor
            hw_set_bits(&timer_hw->inte, 1u << alarm_num);
10004a6e:	2301      	movs	r3, #1
10004a70:	40a3      	lsls	r3, r4
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10004a72:	4a11      	ldr	r2, [pc, #68]	; (10004ab8 <hardware_alarm_set_callback+0x80>)
10004a74:	6013      	str	r3, [r2, #0]
        }
        alarm_callbacks[alarm_num] = callback;
10004a76:	4b11      	ldr	r3, [pc, #68]	; (10004abc <hardware_alarm_set_callback+0x84>)
10004a78:	00a4      	lsls	r4, r4, #2
10004a7a:	50e5      	str	r5, [r4, r3]
10004a7c:	f3bf 8f5f 	dmb	sy
    *lock = 0;
10004a80:	2200      	movs	r2, #0
10004a82:	4b0b      	ldr	r3, [pc, #44]	; (10004ab0 <hardware_alarm_set_callback+0x78>)
10004a84:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10004a86:	f386 8810 	msr	PRIMASK, r6
        timer_callbacks_pending &= ~(1u << alarm_num);
        irq_remove_handler(irq_num, hardware_alarm_irq_handler);
        irq_set_enabled(irq_num, false);
    }
    spin_unlock(lock, save);
}
10004a8a:	bd70      	pop	{r4, r5, r6, pc}
        alarm_callbacks[alarm_num] = NULL;
10004a8c:	4b0b      	ldr	r3, [pc, #44]	; (10004abc <hardware_alarm_set_callback+0x84>)
10004a8e:	00a2      	lsls	r2, r4, #2
10004a90:	50d5      	str	r5, [r2, r3]
        timer_callbacks_pending &= ~(1u << alarm_num);
10004a92:	2201      	movs	r2, #1
10004a94:	40a2      	lsls	r2, r4
10004a96:	490a      	ldr	r1, [pc, #40]	; (10004ac0 <hardware_alarm_set_callback+0x88>)
        irq_remove_handler(irq_num, hardware_alarm_irq_handler);
10004a98:	0020      	movs	r0, r4
        timer_callbacks_pending &= ~(1u << alarm_num);
10004a9a:	780b      	ldrb	r3, [r1, #0]
10004a9c:	4393      	bics	r3, r2
10004a9e:	700b      	strb	r3, [r1, #0]
        irq_remove_handler(irq_num, hardware_alarm_irq_handler);
10004aa0:	4904      	ldr	r1, [pc, #16]	; (10004ab4 <hardware_alarm_set_callback+0x7c>)
10004aa2:	f7fc ff3f 	bl	10001924 <irq_remove_handler>
        irq_set_enabled(irq_num, false);
10004aa6:	2100      	movs	r1, #0
10004aa8:	0020      	movs	r0, r4
10004aaa:	f7fc feef 	bl	1000188c <irq_set_enabled>
10004aae:	e7e5      	b.n	10004a7c <hardware_alarm_set_callback+0x44>
10004ab0:	d0000128 	.word	0xd0000128
10004ab4:	10004935 	.word	0x10004935
10004ab8:	40056038 	.word	0x40056038
10004abc:	20011f30 	.word	0x20011f30
10004ac0:	20012777 	.word	0x20012777

10004ac4 <hardware_alarm_set_target>:

bool hardware_alarm_set_target(uint alarm_num, absolute_time_t target) {
10004ac4:	b5f0      	push	{r4, r5, r6, r7, lr}
10004ac6:	46ce      	mov	lr, r9
10004ac8:	4647      	mov	r7, r8
10004aca:	b580      	push	{r7, lr}
    uint32_t hi = timer_hw->timerawh;
10004acc:	4c2a      	ldr	r4, [pc, #168]	; (10004b78 <hardware_alarm_set_target+0xb4>)
10004ace:	6a61      	ldr	r1, [r4, #36]	; 0x24
        lo = timer_hw->timerawl;
10004ad0:	000d      	movs	r5, r1
10004ad2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
        uint32_t next_hi = timer_hw->timerawh;
10004ad4:	6a61      	ldr	r1, [r4, #36]	; 0x24
        if (hi == next_hi) break;
10004ad6:	42a9      	cmp	r1, r5
10004ad8:	d1fa      	bne.n	10004ad0 <hardware_alarm_set_target+0xc>
    bool missed;
    uint64_t now = time_us_64();
    uint64_t t = to_us_since_boot(target);
    if (now >= t) {
10004ada:	428b      	cmp	r3, r1
10004adc:	d807      	bhi.n	10004aee <hardware_alarm_set_target+0x2a>
10004ade:	d004      	beq.n	10004aea <hardware_alarm_set_target+0x26>
        missed = true;
10004ae0:	2001      	movs	r0, #1
            }
        }
        spin_unlock(lock, save);
    }
    return missed;
}
10004ae2:	bcc0      	pop	{r6, r7}
10004ae4:	46b9      	mov	r9, r7
10004ae6:	46b0      	mov	r8, r6
10004ae8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (now >= t) {
10004aea:	42b2      	cmp	r2, r6
10004aec:	d9f8      	bls.n	10004ae0 <hardware_alarm_set_target+0x1c>
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
10004aee:	f3ef 8910 	mrs	r9, PRIMASK
    __asm volatile ("cpsid i");
10004af2:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
10004af4:	4c21      	ldr	r4, [pc, #132]	; (10004b7c <hardware_alarm_set_target+0xb8>)
10004af6:	6821      	ldr	r1, [r4, #0]
10004af8:	2900      	cmp	r1, #0
10004afa:	d0fc      	beq.n	10004af6 <hardware_alarm_set_target+0x32>
    __asm volatile ("dmb");
10004afc:	f3bf 8f5f 	dmb	sy
        timer_hw->intr = 1u << alarm_num;
10004b00:	2501      	movs	r5, #1
10004b02:	4085      	lsls	r5, r0
10004b04:	4c1c      	ldr	r4, [pc, #112]	; (10004b78 <hardware_alarm_set_target+0xb4>)
        timer_callbacks_pending |= 1u << alarm_num;
10004b06:	4f1e      	ldr	r7, [pc, #120]	; (10004b80 <hardware_alarm_set_target+0xbc>)
        timer_hw->intr = 1u << alarm_num;
10004b08:	6365      	str	r5, [r4, #52]	; 0x34
        timer_callbacks_pending |= 1u << alarm_num;
10004b0a:	b2e9      	uxtb	r1, r5
10004b0c:	4688      	mov	r8, r1
10004b0e:	7839      	ldrb	r1, [r7, #0]
10004b10:	468c      	mov	ip, r1
10004b12:	4641      	mov	r1, r8
10004b14:	4666      	mov	r6, ip
10004b16:	4331      	orrs	r1, r6
10004b18:	7039      	strb	r1, [r7, #0]
        timer_hw->alarm[alarm_num] = (uint32_t) t;
10004b1a:	1d01      	adds	r1, r0, #4
10004b1c:	0089      	lsls	r1, r1, #2
10004b1e:	510a      	str	r2, [r1, r4]
        target_hi[alarm_num] = t >> 32u;
10004b20:	4918      	ldr	r1, [pc, #96]	; (10004b84 <hardware_alarm_set_target+0xc0>)
10004b22:	0080      	lsls	r0, r0, #2
10004b24:	5043      	str	r3, [r0, r1]
        if (!(timer_hw->armed & 1u << alarm_num)) {
10004b26:	6a21      	ldr	r1, [r4, #32]
        missed = false;
10004b28:	2000      	movs	r0, #0
        if (!(timer_hw->armed & 1u << alarm_num)) {
10004b2a:	4229      	tst	r1, r5
10004b2c:	d00b      	beq.n	10004b46 <hardware_alarm_set_target+0x82>
    uint32_t hi = timer_hw->timerawh;
10004b2e:	6a61      	ldr	r1, [r4, #36]	; 0x24
        lo = timer_hw->timerawl;
10004b30:	0008      	movs	r0, r1
10004b32:	6aa6      	ldr	r6, [r4, #40]	; 0x28
        uint32_t next_hi = timer_hw->timerawh;
10004b34:	6a61      	ldr	r1, [r4, #36]	; 0x24
        if (hi == next_hi) break;
10004b36:	4281      	cmp	r1, r0
10004b38:	d1fa      	bne.n	10004b30 <hardware_alarm_set_target+0x6c>
            if (time_us_64() >= t) {
10004b3a:	428b      	cmp	r3, r1
10004b3c:	d802      	bhi.n	10004b44 <hardware_alarm_set_target+0x80>
10004b3e:	d10a      	bne.n	10004b56 <hardware_alarm_set_target+0x92>
10004b40:	42b2      	cmp	r2, r6
10004b42:	d908      	bls.n	10004b56 <hardware_alarm_set_target+0x92>
        missed = false;
10004b44:	2000      	movs	r0, #0
10004b46:	f3bf 8f5f 	dmb	sy
    *lock = 0;
10004b4a:	2200      	movs	r2, #0
10004b4c:	4b0b      	ldr	r3, [pc, #44]	; (10004b7c <hardware_alarm_set_target+0xb8>)
10004b4e:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10004b50:	f389 8810 	msr	PRIMASK, r9
}
10004b54:	e7c5      	b.n	10004ae2 <hardware_alarm_set_target+0x1e>
                timer_hw->armed = 1u << alarm_num;
10004b56:	4b08      	ldr	r3, [pc, #32]	; (10004b78 <hardware_alarm_set_target+0xb4>)
                timer_callbacks_pending &= ~(1u << alarm_num);
10004b58:	4642      	mov	r2, r8
                timer_hw->armed = 1u << alarm_num;
10004b5a:	621d      	str	r5, [r3, #32]
                timer_hw->intr = 1u << alarm_num; // clear the IRQ too
10004b5c:	635d      	str	r5, [r3, #52]	; 0x34
                timer_callbacks_pending &= ~(1u << alarm_num);
10004b5e:	4663      	mov	r3, ip
10004b60:	4393      	bics	r3, r2
                missed = true;
10004b62:	2001      	movs	r0, #1
                timer_callbacks_pending &= ~(1u << alarm_num);
10004b64:	703b      	strb	r3, [r7, #0]
    __asm volatile ("dmb");
10004b66:	f3bf 8f5f 	dmb	sy
    *lock = 0;
10004b6a:	2200      	movs	r2, #0
10004b6c:	4b03      	ldr	r3, [pc, #12]	; (10004b7c <hardware_alarm_set_target+0xb8>)
10004b6e:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10004b70:	f389 8810 	msr	PRIMASK, r9
10004b74:	e7b5      	b.n	10004ae2 <hardware_alarm_set_target+0x1e>
10004b76:	46c0      	nop			; (mov r8, r8)
10004b78:	40054000 	.word	0x40054000
10004b7c:	d0000128 	.word	0xd0000128
10004b80:	20012777 	.word	0x20012777
10004b84:	20012754 	.word	0x20012754

10004b88 <hardware_alarm_cancel>:
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
10004b88:	f3ef 8c10 	mrs	ip, PRIMASK
    __asm volatile ("cpsid i");
10004b8c:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
10004b8e:	490a      	ldr	r1, [pc, #40]	; (10004bb8 <hardware_alarm_cancel+0x30>)
10004b90:	680b      	ldr	r3, [r1, #0]
10004b92:	2b00      	cmp	r3, #0
10004b94:	d0fc      	beq.n	10004b90 <hardware_alarm_cancel+0x8>
    __asm volatile ("dmb");
10004b96:	f3bf 8f5f 	dmb	sy
void hardware_alarm_cancel(uint alarm_num) {
    check_hardware_alarm_num_param(alarm_num);

    spin_lock_t *lock = spin_lock_instance(PICO_SPINLOCK_ID_TIMER);
    uint32_t save = spin_lock_blocking(lock);
    timer_hw->armed = 1u << alarm_num;
10004b9a:	2301      	movs	r3, #1
10004b9c:	4083      	lsls	r3, r0
10004b9e:	4a07      	ldr	r2, [pc, #28]	; (10004bbc <hardware_alarm_cancel+0x34>)
    timer_callbacks_pending &= ~(1u << alarm_num);
10004ba0:	4807      	ldr	r0, [pc, #28]	; (10004bc0 <hardware_alarm_cancel+0x38>)
    timer_hw->armed = 1u << alarm_num;
10004ba2:	6213      	str	r3, [r2, #32]
    timer_callbacks_pending &= ~(1u << alarm_num);
10004ba4:	7802      	ldrb	r2, [r0, #0]
10004ba6:	439a      	bics	r2, r3
10004ba8:	7002      	strb	r2, [r0, #0]
10004baa:	f3bf 8f5f 	dmb	sy
    *lock = 0;
10004bae:	2300      	movs	r3, #0
10004bb0:	600b      	str	r3, [r1, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10004bb2:	f38c 8810 	msr	PRIMASK, ip
    spin_unlock(lock, save);
}
10004bb6:	4770      	bx	lr
10004bb8:	d0000128 	.word	0xd0000128
10004bbc:	40054000 	.word	0x40054000
10004bc0:	20012777 	.word	0x20012777

10004bc4 <_retrieve_unique_id_on_boot>:

static_assert(PICO_UNIQUE_BOARD_ID_SIZE_BYTES == FLASH_UNIQUE_ID_SIZE_BYTES, "Board ID size must match flash ID size");

static pico_unique_board_id_t retrieved_id;

static void __attribute__((constructor)) _retrieve_unique_id_on_boot() {
10004bc4:	b510      	push	{r4, lr}
    // build. Since this constructor is pre-main it would be annoying to
    // debug, so just produce something well-defined and obviously wrong.
    for (int i = 0; i < PICO_UNIQUE_BOARD_ID_SIZE_BYTES; i++)
        retrieved_id.id[i] = 0xee;
#else
    flash_get_unique_id(retrieved_id.id);
10004bc6:	4802      	ldr	r0, [pc, #8]	; (10004bd0 <_retrieve_unique_id_on_boot+0xc>)
10004bc8:	f7fc fdae 	bl	10001728 <flash_get_unique_id>
#endif
}
10004bcc:	bd10      	pop	{r4, pc}
10004bce:	46c0      	nop			; (mov r8, r8)
10004bd0:	20012740 	.word	0x20012740

10004bd4 <watchdog_start_tick>:
#include "hardware/structs/psm.h"

/// \tag::watchdog_start_tick[]
void watchdog_start_tick(uint cycles) {
    // Important: This function also provides a tick reference to the timer
    watchdog_hw->tick = cycles | WATCHDOG_TICK_ENABLE_BITS;
10004bd4:	2380      	movs	r3, #128	; 0x80
10004bd6:	4a02      	ldr	r2, [pc, #8]	; (10004be0 <watchdog_start_tick+0xc>)
10004bd8:	009b      	lsls	r3, r3, #2
10004bda:	4303      	orrs	r3, r0
10004bdc:	62d3      	str	r3, [r2, #44]	; 0x2c
}
10004bde:	4770      	bx	lr
10004be0:	40058000 	.word	0x40058000

10004be4 <xosc_init>:
#include "hardware/structs/xosc.h"

void xosc_init(void) {
    // Assumes 1-15 MHz input
    assert(XOSC_MHZ <= 15);
    xosc_hw->ctrl = XOSC_CTRL_FREQ_RANGE_VALUE_1_15MHZ;
10004be4:	23aa      	movs	r3, #170	; 0xaa
10004be6:	4a06      	ldr	r2, [pc, #24]	; (10004c00 <xosc_init+0x1c>)
10004be8:	011b      	lsls	r3, r3, #4
10004bea:	6013      	str	r3, [r2, #0]

    // Set xosc startup delay
    uint32_t startup_delay = (((12 * MHZ) / 1000) + 128) / 256;
    xosc_hw->startup = startup_delay;
10004bec:	232f      	movs	r3, #47	; 0x2f
10004bee:	4905      	ldr	r1, [pc, #20]	; (10004c04 <xosc_init+0x20>)
10004bf0:	60d3      	str	r3, [r2, #12]
10004bf2:	4b05      	ldr	r3, [pc, #20]	; (10004c08 <xosc_init+0x24>)
10004bf4:	6019      	str	r1, [r3, #0]

    // Set the enable bit now that we have set freq range and startup delay
    hw_set_bits(&xosc_hw->ctrl, XOSC_CTRL_ENABLE_VALUE_ENABLE << XOSC_CTRL_ENABLE_LSB);

    // Wait for XOSC to be stable
    while(!(xosc_hw->status & XOSC_STATUS_STABLE_BITS));
10004bf6:	6853      	ldr	r3, [r2, #4]
10004bf8:	2b00      	cmp	r3, #0
10004bfa:	dafc      	bge.n	10004bf6 <xosc_init+0x12>
}
10004bfc:	4770      	bx	lr
10004bfe:	46c0      	nop			; (mov r8, r8)
10004c00:	40024000 	.word	0x40024000
10004c04:	00fab000 	.word	0x00fab000
10004c08:	40026000 	.word	0x40026000

10004c0c <tud_cdc_n_connected>:

//--------------------------------------------------------------------+
// APPLICATION API
//--------------------------------------------------------------------+
bool tud_cdc_n_connected(uint8_t itf)
{
10004c0c:	b510      	push	{r4, lr}
10004c0e:	0004      	movs	r4, r0
bool tud_suspended(void);

// Check if device is ready to transfer
static inline bool tud_ready(void)
{
  return tud_mounted() && !tud_suspended();
10004c10:	f000 fc9c 	bl	1000554c <tud_mounted>
10004c14:	2800      	cmp	r0, #0
10004c16:	d101      	bne.n	10004c1c <tud_cdc_n_connected+0x10>
10004c18:	2000      	movs	r0, #0
  // DTR (bit 0) active  is considered as connected
  return tud_ready() && tu_bit_test(_cdcd_itf[itf].line_state, 0);
}
10004c1a:	bd10      	pop	{r4, pc}
10004c1c:	f000 fc9e 	bl	1000555c <tud_suspended>
10004c20:	2800      	cmp	r0, #0
10004c22:	d1f9      	bne.n	10004c18 <tud_cdc_n_connected+0xc>
  return tud_ready() && tu_bit_test(_cdcd_itf[itf].line_state, 0);
10004c24:	0060      	lsls	r0, r4, #1
10004c26:	1904      	adds	r4, r0, r4
10004c28:	0123      	lsls	r3, r4, #4
10004c2a:	4804      	ldr	r0, [pc, #16]	; (10004c3c <tud_cdc_n_connected+0x30>)
10004c2c:	1b1c      	subs	r4, r3, r4
10004c2e:	0124      	lsls	r4, r4, #4
10004c30:	1904      	adds	r4, r0, r4
10004c32:	2001      	movs	r0, #1
10004c34:	7923      	ldrb	r3, [r4, #4]
10004c36:	4018      	ands	r0, r3
10004c38:	e7ef      	b.n	10004c1a <tud_cdc_n_connected+0xe>
10004c3a:	46c0      	nop			; (mov r8, r8)
10004c3c:	20011afc 	.word	0x20011afc

10004c40 <tud_cdc_n_available>:
//--------------------------------------------------------------------+
// READ API
//--------------------------------------------------------------------+
uint32_t tud_cdc_n_available(uint8_t itf)
{
  return tu_fifo_count(&_cdcd_itf[itf].rx_ff);
10004c40:	0043      	lsls	r3, r0, #1
10004c42:	181b      	adds	r3, r3, r0
{
10004c44:	b510      	push	{r4, lr}
  return tu_fifo_count(&_cdcd_itf[itf].rx_ff);
10004c46:	0118      	lsls	r0, r3, #4
10004c48:	1ac0      	subs	r0, r0, r3
10004c4a:	0100      	lsls	r0, r0, #4
10004c4c:	4b02      	ldr	r3, [pc, #8]	; (10004c58 <tud_cdc_n_available+0x18>)
10004c4e:	3010      	adds	r0, #16
10004c50:	18c0      	adds	r0, r0, r3
10004c52:	f000 fab9 	bl	100051c8 <tu_fifo_count>
}
10004c56:	bd10      	pop	{r4, pc}
10004c58:	20011afc 	.word	0x20011afc

10004c5c <tud_cdc_n_read>:

uint32_t tud_cdc_n_read(uint8_t itf, void* buffer, uint32_t bufsize)
{
10004c5c:	b5f0      	push	{r4, r5, r6, r7, lr}
10004c5e:	0044      	lsls	r4, r0, #1
10004c60:	1820      	adds	r0, r4, r0
10004c62:	0104      	lsls	r4, r0, #4
10004c64:	1a24      	subs	r4, r4, r0
10004c66:	0124      	lsls	r4, r4, #4
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
  uint32_t num_read = tu_fifo_read_n(&p_cdc->rx_ff, buffer, bufsize);
10004c68:	0026      	movs	r6, r4
{
10004c6a:	46c6      	mov	lr, r8
  uint32_t num_read = tu_fifo_read_n(&p_cdc->rx_ff, buffer, bufsize);
10004c6c:	4f17      	ldr	r7, [pc, #92]	; (10004ccc <tud_cdc_n_read+0x70>)
10004c6e:	3610      	adds	r6, #16
10004c70:	19f6      	adds	r6, r6, r7
{
10004c72:	b500      	push	{lr}
  uint32_t num_read = tu_fifo_read_n(&p_cdc->rx_ff, buffer, bufsize);
10004c74:	0030      	movs	r0, r6
10004c76:	b292      	uxth	r2, r2
10004c78:	f000 fb14 	bl	100052a4 <tu_fifo_read_n>
10004c7c:	0005      	movs	r5, r0
  uint16_t available = tu_fifo_remaining(&p_cdc->rx_ff);
10004c7e:	0030      	movs	r0, r6
10004c80:	f000 faae 	bl	100051e0 <tu_fifo_remaining>
  TU_VERIFY(available >= sizeof(p_cdc->epout_buf), );
10004c84:	283f      	cmp	r0, #63	; 0x3f
10004c86:	d803      	bhi.n	10004c90 <tud_cdc_n_read+0x34>
  _prep_out_transaction(p_cdc);
  return num_read;
}
10004c88:	0028      	movs	r0, r5
10004c8a:	bc80      	pop	{r7}
10004c8c:	46b8      	mov	r8, r7
10004c8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  TU_VERIFY(usbd_edpt_claim(rhport, p_cdc->ep_out), );
10004c90:	193b      	adds	r3, r7, r4
10004c92:	2000      	movs	r0, #0
10004c94:	78d9      	ldrb	r1, [r3, #3]
10004c96:	4698      	mov	r8, r3
10004c98:	f001 f9c6 	bl	10006028 <usbd_edpt_claim>
10004c9c:	2800      	cmp	r0, #0
10004c9e:	d0f3      	beq.n	10004c88 <tud_cdc_n_read+0x2c>
  available = tu_fifo_remaining(&p_cdc->rx_ff);
10004ca0:	0030      	movs	r0, r6
10004ca2:	f000 fa9d 	bl	100051e0 <tu_fifo_remaining>
  if ( available >= sizeof(p_cdc->epout_buf) )  {
10004ca6:	283f      	cmp	r0, #63	; 0x3f
10004ca8:	d90a      	bls.n	10004cc0 <tud_cdc_n_read+0x64>
    usbd_edpt_xfer(rhport, p_cdc->ep_out, p_cdc->epout_buf, sizeof(p_cdc->epout_buf));
10004caa:	2394      	movs	r3, #148	; 0x94
10004cac:	009b      	lsls	r3, r3, #2
10004cae:	18e2      	adds	r2, r4, r3
10004cb0:	4643      	mov	r3, r8
10004cb2:	19d2      	adds	r2, r2, r7
10004cb4:	78d9      	ldrb	r1, [r3, #3]
10004cb6:	2000      	movs	r0, #0
10004cb8:	2340      	movs	r3, #64	; 0x40
10004cba:	f001 fa0d 	bl	100060d8 <usbd_edpt_xfer>
10004cbe:	e7e3      	b.n	10004c88 <tud_cdc_n_read+0x2c>
    usbd_edpt_release(rhport, p_cdc->ep_out);
10004cc0:	4643      	mov	r3, r8
10004cc2:	2000      	movs	r0, #0
10004cc4:	78d9      	ldrb	r1, [r3, #3]
10004cc6:	f001 f9e1 	bl	1000608c <usbd_edpt_release>
  return num_read;
10004cca:	e7dd      	b.n	10004c88 <tud_cdc_n_read+0x2c>
10004ccc:	20011afc 	.word	0x20011afc

10004cd0 <tud_cdc_n_write_flush>:

  return ret;
}

uint32_t tud_cdc_n_write_flush (uint8_t itf)
{
10004cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10004cd2:	4647      	mov	r7, r8
10004cd4:	46ce      	mov	lr, r9
10004cd6:	b580      	push	{r7, lr}
10004cd8:	0047      	lsls	r7, r0, #1
10004cda:	183b      	adds	r3, r7, r0
10004cdc:	011c      	lsls	r4, r3, #4
10004cde:	1ae4      	subs	r4, r4, r3
10004ce0:	0124      	lsls	r4, r4, #4
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];

  // No data to send
  if ( !tu_fifo_count(&p_cdc->tx_ff) ) return 0;
10004ce2:	4b23      	ldr	r3, [pc, #140]	; (10004d70 <tud_cdc_n_write_flush+0xa0>)
10004ce4:	0026      	movs	r6, r4
10004ce6:	4698      	mov	r8, r3
10004ce8:	3628      	adds	r6, #40	; 0x28
10004cea:	4446      	add	r6, r8
{
10004cec:	0005      	movs	r5, r0
  if ( !tu_fifo_count(&p_cdc->tx_ff) ) return 0;
10004cee:	0030      	movs	r0, r6
10004cf0:	f000 fa6a 	bl	100051c8 <tu_fifo_count>
10004cf4:	2800      	cmp	r0, #0
10004cf6:	d104      	bne.n	10004d02 <tud_cdc_n_write_flush+0x32>
  }else
  {
    // Release endpoint since we don't make any transfer
    // Note: data is dropped if terminal is not connected
    usbd_edpt_release(rhport, p_cdc->ep_in);
    return 0;
10004cf8:	2000      	movs	r0, #0
  }
}
10004cfa:	bcc0      	pop	{r6, r7}
10004cfc:	46b9      	mov	r9, r7
10004cfe:	46b0      	mov	r8, r6
10004d00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  TU_VERIFY( usbd_edpt_claim(rhport, p_cdc->ep_in), 0 );
10004d02:	46a1      	mov	r9, r4
10004d04:	44c1      	add	r9, r8
10004d06:	464b      	mov	r3, r9
10004d08:	2000      	movs	r0, #0
10004d0a:	7899      	ldrb	r1, [r3, #2]
10004d0c:	f001 f98c 	bl	10006028 <usbd_edpt_claim>
10004d10:	2800      	cmp	r0, #0
10004d12:	d0f1      	beq.n	10004cf8 <tud_cdc_n_write_flush+0x28>
  uint16_t const count = tu_fifo_read_n(&p_cdc->tx_ff, p_cdc->epin_buf, sizeof(p_cdc->epin_buf));
10004d14:	23a4      	movs	r3, #164	; 0xa4
10004d16:	009b      	lsls	r3, r3, #2
10004d18:	469c      	mov	ip, r3
10004d1a:	4464      	add	r4, ip
10004d1c:	4444      	add	r4, r8
10004d1e:	0030      	movs	r0, r6
10004d20:	2240      	movs	r2, #64	; 0x40
10004d22:	0021      	movs	r1, r4
10004d24:	f000 fabe 	bl	100052a4 <tu_fifo_read_n>
10004d28:	1e06      	subs	r6, r0, #0
  if ( count && tud_cdc_n_connected(itf) )
10004d2a:	d016      	beq.n	10004d5a <tud_cdc_n_write_flush+0x8a>
10004d2c:	f000 fc0e 	bl	1000554c <tud_mounted>
10004d30:	2800      	cmp	r0, #0
10004d32:	d012      	beq.n	10004d5a <tud_cdc_n_write_flush+0x8a>
10004d34:	f000 fc12 	bl	1000555c <tud_suspended>
10004d38:	2800      	cmp	r0, #0
10004d3a:	d10e      	bne.n	10004d5a <tud_cdc_n_write_flush+0x8a>
10004d3c:	464b      	mov	r3, r9
10004d3e:	791b      	ldrb	r3, [r3, #4]
10004d40:	07db      	lsls	r3, r3, #31
10004d42:	d50a      	bpl.n	10004d5a <tud_cdc_n_write_flush+0x8a>
    TU_ASSERT( usbd_edpt_xfer(rhport, p_cdc->ep_in, p_cdc->epin_buf, count), 0 );
10004d44:	464b      	mov	r3, r9
10004d46:	0022      	movs	r2, r4
10004d48:	7899      	ldrb	r1, [r3, #2]
10004d4a:	2000      	movs	r0, #0
10004d4c:	0033      	movs	r3, r6
10004d4e:	f001 f9c3 	bl	100060d8 <usbd_edpt_xfer>
10004d52:	2800      	cmp	r0, #0
10004d54:	d0d0      	beq.n	10004cf8 <tud_cdc_n_write_flush+0x28>
    return count;
10004d56:	0030      	movs	r0, r6
10004d58:	e7cf      	b.n	10004cfa <tud_cdc_n_write_flush+0x2a>
    usbd_edpt_release(rhport, p_cdc->ep_in);
10004d5a:	197d      	adds	r5, r7, r5
10004d5c:	012b      	lsls	r3, r5, #4
10004d5e:	1b5d      	subs	r5, r3, r5
10004d60:	012d      	lsls	r5, r5, #4
10004d62:	4445      	add	r5, r8
10004d64:	78a9      	ldrb	r1, [r5, #2]
10004d66:	2000      	movs	r0, #0
10004d68:	f001 f990 	bl	1000608c <usbd_edpt_release>
10004d6c:	e7c4      	b.n	10004cf8 <tud_cdc_n_write_flush+0x28>
10004d6e:	46c0      	nop			; (mov r8, r8)
10004d70:	20011afc 	.word	0x20011afc

10004d74 <tud_cdc_n_write>:
  uint16_t ret = tu_fifo_write_n(&p_cdc->tx_ff, buffer, bufsize);
10004d74:	0043      	lsls	r3, r0, #1
10004d76:	181b      	adds	r3, r3, r0
{
10004d78:	b570      	push	{r4, r5, r6, lr}
  uint16_t ret = tu_fifo_write_n(&p_cdc->tx_ff, buffer, bufsize);
10004d7a:	011c      	lsls	r4, r3, #4
10004d7c:	1ae4      	subs	r4, r4, r3
10004d7e:	0124      	lsls	r4, r4, #4
10004d80:	4b09      	ldr	r3, [pc, #36]	; (10004da8 <tud_cdc_n_write+0x34>)
10004d82:	3428      	adds	r4, #40	; 0x28
10004d84:	18e4      	adds	r4, r4, r3
{
10004d86:	0005      	movs	r5, r0
  uint16_t ret = tu_fifo_write_n(&p_cdc->tx_ff, buffer, bufsize);
10004d88:	b292      	uxth	r2, r2
10004d8a:	0020      	movs	r0, r4
10004d8c:	f000 fb4a 	bl	10005424 <tu_fifo_write_n>
10004d90:	0006      	movs	r6, r0
  if ( tu_fifo_count(&p_cdc->tx_ff) >= BULK_PACKET_SIZE )
10004d92:	0020      	movs	r0, r4
10004d94:	f000 fa18 	bl	100051c8 <tu_fifo_count>
10004d98:	283f      	cmp	r0, #63	; 0x3f
10004d9a:	d801      	bhi.n	10004da0 <tud_cdc_n_write+0x2c>
}
10004d9c:	0030      	movs	r0, r6
10004d9e:	bd70      	pop	{r4, r5, r6, pc}
    tud_cdc_n_write_flush(itf);
10004da0:	0028      	movs	r0, r5
10004da2:	f7ff ff95 	bl	10004cd0 <tud_cdc_n_write_flush>
10004da6:	e7f9      	b.n	10004d9c <tud_cdc_n_write+0x28>
10004da8:	20011afc 	.word	0x20011afc

10004dac <tud_cdc_n_write_available>:

uint32_t tud_cdc_n_write_available (uint8_t itf)
{
  return tu_fifo_remaining(&_cdcd_itf[itf].tx_ff);
10004dac:	0043      	lsls	r3, r0, #1
10004dae:	181b      	adds	r3, r3, r0
{
10004db0:	b510      	push	{r4, lr}
  return tu_fifo_remaining(&_cdcd_itf[itf].tx_ff);
10004db2:	0118      	lsls	r0, r3, #4
10004db4:	1ac0      	subs	r0, r0, r3
10004db6:	0100      	lsls	r0, r0, #4
10004db8:	4b02      	ldr	r3, [pc, #8]	; (10004dc4 <tud_cdc_n_write_available+0x18>)
10004dba:	3028      	adds	r0, #40	; 0x28
10004dbc:	18c0      	adds	r0, r0, r3
10004dbe:	f000 fa0f 	bl	100051e0 <tu_fifo_remaining>
}
10004dc2:	bd10      	pop	{r4, pc}
10004dc4:	20011afc 	.word	0x20011afc

10004dc8 <cdcd_init>:
//--------------------------------------------------------------------+
// USBD Driver API
//--------------------------------------------------------------------+
void cdcd_init(void)
{
  tu_memclr(_cdcd_itf, sizeof(_cdcd_itf));
10004dc8:	22b4      	movs	r2, #180	; 0xb4
{
10004dca:	b570      	push	{r4, r5, r6, lr}
  tu_memclr(_cdcd_itf, sizeof(_cdcd_itf));
10004dcc:	4c1a      	ldr	r4, [pc, #104]	; (10004e38 <cdcd_init+0x70>)
{
10004dce:	b082      	sub	sp, #8
  tu_memclr(_cdcd_itf, sizeof(_cdcd_itf));
10004dd0:	2100      	movs	r1, #0
10004dd2:	0020      	movs	r0, r4
10004dd4:	0092      	lsls	r2, r2, #2
10004dd6:	f7fc f985 	bl	100010e4 <__wrap_memset>

  for(uint8_t i=0; i<CFG_TUD_CDC; i++)
  {
    cdcd_interface_t* p_cdc = &_cdcd_itf[i];

    p_cdc->wanted_char = -1;
10004dda:	23ff      	movs	r3, #255	; 0xff
10004ddc:	7163      	strb	r3, [r4, #5]

    // default line coding is : stop bit = 1, parity = none, data bits = 8
    p_cdc->line_coding.bit_rate  = 115200;
10004dde:	4b17      	ldr	r3, [pc, #92]	; (10004e3c <cdcd_init+0x74>)
    p_cdc->line_coding.stop_bits = 0;
    p_cdc->line_coding.parity    = 0;
    p_cdc->line_coding.data_bits = 8;

    // config fifo
    tu_fifo_config(&p_cdc->rx_ff, p_cdc->rx_ff_buf, TU_ARRAY_SIZE(p_cdc->rx_ff_buf), 1, false);
10004de0:	2580      	movs	r5, #128	; 0x80
    p_cdc->line_coding.bit_rate  = 115200;
10004de2:	80e3      	strh	r3, [r4, #6]
10004de4:	2301      	movs	r3, #1
10004de6:	2600      	movs	r6, #0
    tu_fifo_config(&p_cdc->rx_ff, p_cdc->rx_ff_buf, TU_ARRAY_SIZE(p_cdc->rx_ff_buf), 1, false);
10004de8:	0021      	movs	r1, r4
10004dea:	0020      	movs	r0, r4
    p_cdc->line_coding.bit_rate  = 115200;
10004dec:	8123      	strh	r3, [r4, #8]
    tu_fifo_config(&p_cdc->rx_ff, p_cdc->rx_ff_buf, TU_ARRAY_SIZE(p_cdc->rx_ff_buf), 1, false);
10004dee:	006d      	lsls	r5, r5, #1
    p_cdc->line_coding.data_bits = 8;
10004df0:	3307      	adds	r3, #7
10004df2:	7323      	strb	r3, [r4, #12]
    tu_fifo_config(&p_cdc->rx_ff, p_cdc->rx_ff_buf, TU_ARRAY_SIZE(p_cdc->rx_ff_buf), 1, false);
10004df4:	002a      	movs	r2, r5
10004df6:	3140      	adds	r1, #64	; 0x40
10004df8:	9600      	str	r6, [sp, #0]
10004dfa:	3b07      	subs	r3, #7
10004dfc:	3010      	adds	r0, #16
10004dfe:	f000 f9a7 	bl	10005150 <tu_fifo_config>
    tu_fifo_config(&p_cdc->tx_ff, p_cdc->tx_ff_buf, TU_ARRAY_SIZE(p_cdc->tx_ff_buf), 1, false);
10004e02:	0021      	movs	r1, r4
10004e04:	0020      	movs	r0, r4
10004e06:	3141      	adds	r1, #65	; 0x41
10004e08:	002a      	movs	r2, r5
10004e0a:	31ff      	adds	r1, #255	; 0xff
10004e0c:	2301      	movs	r3, #1
10004e0e:	9600      	str	r6, [sp, #0]
10004e10:	3028      	adds	r0, #40	; 0x28
10004e12:	f000 f99d 	bl	10005150 <tu_fifo_config>
//--------------------------------------------------------------------+
typedef struct mutex osal_mutex_def_t, *osal_mutex_t;

static inline osal_mutex_t osal_mutex_create(osal_mutex_def_t* mdef)
{
    mutex_init(mdef);
10004e16:	2390      	movs	r3, #144	; 0x90
10004e18:	009b      	lsls	r3, r3, #2
10004e1a:	18e5      	adds	r5, r4, r3
10004e1c:	0028      	movs	r0, r5
10004e1e:	f7fc ff65 	bl	10001cec <mutex_init>
10004e22:	2392      	movs	r3, #146	; 0x92
10004e24:	009b      	lsls	r3, r3, #2
bool tu_fifo_config(tu_fifo_t *f, void* buffer, uint16_t depth, uint16_t item_size, bool overwritable);

#if CFG_FIFO_MUTEX
static inline void tu_fifo_config_mutex(tu_fifo_t *f, tu_fifo_mutex_t mutex_hdl)
{
  f->mutex = mutex_hdl;
10004e26:	6265      	str	r5, [r4, #36]	; 0x24
10004e28:	18e5      	adds	r5, r4, r3
10004e2a:	0028      	movs	r0, r5
10004e2c:	f7fc ff5e 	bl	10001cec <mutex_init>
10004e30:	63e5      	str	r5, [r4, #60]	; 0x3c
#if CFG_FIFO_MUTEX
    tu_fifo_config_mutex(&p_cdc->rx_ff, osal_mutex_create(&p_cdc->rx_ff_mutex));
    tu_fifo_config_mutex(&p_cdc->tx_ff, osal_mutex_create(&p_cdc->tx_ff_mutex));
#endif
  }
}
10004e32:	b002      	add	sp, #8
10004e34:	bd70      	pop	{r4, r5, r6, pc}
10004e36:	46c0      	nop			; (mov r8, r8)
10004e38:	20011afc 	.word	0x20011afc
10004e3c:	ffffc200 	.word	0xffffc200

10004e40 <cdcd_reset>:

void cdcd_reset(uint8_t rhport)
{
10004e40:	b510      	push	{r4, lr}
  (void) rhport;

  for(uint8_t i=0; i<CFG_TUD_CDC; i++)
  {
    tu_memclr(&_cdcd_itf[i], ITF_MEM_RESET_SIZE);
10004e42:	4c07      	ldr	r4, [pc, #28]	; (10004e60 <cdcd_reset+0x20>)
10004e44:	2205      	movs	r2, #5
10004e46:	2100      	movs	r1, #0
10004e48:	0020      	movs	r0, r4
10004e4a:	f7fc f94b 	bl	100010e4 <__wrap_memset>
    tu_fifo_clear(&_cdcd_itf[i].rx_ff);
10004e4e:	0020      	movs	r0, r4
10004e50:	3010      	adds	r0, #16
10004e52:	f000 fb65 	bl	10005520 <tu_fifo_clear>
    tu_fifo_clear(&_cdcd_itf[i].tx_ff);
10004e56:	0020      	movs	r0, r4
10004e58:	3028      	adds	r0, #40	; 0x28
10004e5a:	f000 fb61 	bl	10005520 <tu_fifo_clear>
  }
}
10004e5e:	bd10      	pop	{r4, pc}
10004e60:	20011afc 	.word	0x20011afc

10004e64 <cdcd_open>:

uint16_t cdcd_open(uint8_t rhport, tusb_desc_interface_t const * itf_desc, uint16_t max_len)
{
10004e64:	b5f0      	push	{r4, r5, r6, r7, lr}
  // Only support ACM subclass
  TU_VERIFY( TUSB_CLASS_CDC                           == itf_desc->bInterfaceClass &&
10004e66:	794b      	ldrb	r3, [r1, #5]
{
10004e68:	0006      	movs	r6, r0
10004e6a:	b083      	sub	sp, #12
  TU_VERIFY( TUSB_CLASS_CDC                           == itf_desc->bInterfaceClass &&
10004e6c:	2b02      	cmp	r3, #2
10004e6e:	d102      	bne.n	10004e76 <cdcd_open+0x12>
10004e70:	798b      	ldrb	r3, [r1, #6]
10004e72:	2b02      	cmp	r3, #2
10004e74:	d003      	beq.n	10004e7e <cdcd_open+0x1a>
10004e76:	2500      	movs	r5, #0

  // Prepare for incoming data
  _prep_out_transaction(p_cdc);

  return drv_len;
}
10004e78:	0028      	movs	r0, r5
10004e7a:	b003      	add	sp, #12
10004e7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
static inline uint32_t tu_abs(int32_t value) { return (uint32_t)((value < 0) ? (-value) : value); }

/// inclusive range checking
static inline bool tu_within(uint32_t lower, uint32_t value, uint32_t upper)
{
  return (lower <= value) && (value <= upper);
10004e7e:	79cb      	ldrb	r3, [r1, #7]
10004e80:	2b06      	cmp	r3, #6
10004e82:	d8f8      	bhi.n	10004e76 <cdcd_open+0x12>
    if ( _cdcd_itf[cdc_id].ep_in == 0 )
10004e84:	4f2f      	ldr	r7, [pc, #188]	; (10004f44 <cdcd_open+0xe0>)
10004e86:	78bb      	ldrb	r3, [r7, #2]
10004e88:	2b00      	cmp	r3, #0
10004e8a:	d1f4      	bne.n	10004e76 <cdcd_open+0x12>
  p_cdc->itf_num = itf_desc->bInterfaceNumber;
10004e8c:	788b      	ldrb	r3, [r1, #2]
  uint16_t drv_len = sizeof(tusb_desc_interface_t);
10004e8e:	2509      	movs	r5, #9
  p_cdc->itf_num = itf_desc->bInterfaceNumber;
10004e90:	703b      	strb	r3, [r7, #0]
// Descriptor helper
//--------------------------------------------------------------------+
static inline uint8_t const * tu_desc_next(void const* desc)
{
  uint8_t const* desc8 = (uint8_t const*) desc;
  return desc8 + desc8[DESC_OFFSET_LEN];
10004e92:	780c      	ldrb	r4, [r1, #0]
10004e94:	190c      	adds	r4, r1, r4
}

static inline uint8_t tu_desc_type(void const* desc)
{
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
10004e96:	7863      	ldrb	r3, [r4, #1]
  while ( TUSB_DESC_CS_INTERFACE == tu_desc_type(p_desc) && drv_len <= max_len )
10004e98:	2b24      	cmp	r3, #36	; 0x24
10004e9a:	d10b      	bne.n	10004eb4 <cdcd_open+0x50>
10004e9c:	2a08      	cmp	r2, #8
10004e9e:	d802      	bhi.n	10004ea6 <cdcd_open+0x42>
10004ea0:	e00f      	b.n	10004ec2 <cdcd_open+0x5e>
10004ea2:	42aa      	cmp	r2, r5
10004ea4:	d30d      	bcc.n	10004ec2 <cdcd_open+0x5e>
}

static inline uint8_t tu_desc_len(void const* desc)
{
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
10004ea6:	7823      	ldrb	r3, [r4, #0]
  return desc8 + desc8[DESC_OFFSET_LEN];
10004ea8:	18e4      	adds	r4, r4, r3
    drv_len += tu_desc_len(p_desc);
10004eaa:	18ed      	adds	r5, r5, r3
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
10004eac:	7863      	ldrb	r3, [r4, #1]
10004eae:	b2ad      	uxth	r5, r5
  while ( TUSB_DESC_CS_INTERFACE == tu_desc_type(p_desc) && drv_len <= max_len )
10004eb0:	2b24      	cmp	r3, #36	; 0x24
10004eb2:	d0f6      	beq.n	10004ea2 <cdcd_open+0x3e>
  if ( TUSB_DESC_ENDPOINT == tu_desc_type(p_desc) )
10004eb4:	2b05      	cmp	r3, #5
10004eb6:	d020      	beq.n	10004efa <cdcd_open+0x96>
  if ( (TUSB_DESC_INTERFACE == tu_desc_type(p_desc)) &&
10004eb8:	2b04      	cmp	r3, #4
10004eba:	d102      	bne.n	10004ec2 <cdcd_open+0x5e>
10004ebc:	7963      	ldrb	r3, [r4, #5]
10004ebe:	2b0a      	cmp	r3, #10
10004ec0:	d02e      	beq.n	10004f20 <cdcd_open+0xbc>
  uint16_t available = tu_fifo_remaining(&p_cdc->rx_ff);
10004ec2:	4c21      	ldr	r4, [pc, #132]	; (10004f48 <cdcd_open+0xe4>)
10004ec4:	0020      	movs	r0, r4
10004ec6:	f000 f98b 	bl	100051e0 <tu_fifo_remaining>
  TU_VERIFY(available >= sizeof(p_cdc->epout_buf), );
10004eca:	283f      	cmp	r0, #63	; 0x3f
10004ecc:	d9d4      	bls.n	10004e78 <cdcd_open+0x14>
  TU_VERIFY(usbd_edpt_claim(rhport, p_cdc->ep_out), );
10004ece:	0026      	movs	r6, r4
10004ed0:	3e10      	subs	r6, #16
10004ed2:	2000      	movs	r0, #0
10004ed4:	78f1      	ldrb	r1, [r6, #3]
10004ed6:	f001 f8a7 	bl	10006028 <usbd_edpt_claim>
10004eda:	2800      	cmp	r0, #0
10004edc:	d0cc      	beq.n	10004e78 <cdcd_open+0x14>
  available = tu_fifo_remaining(&p_cdc->rx_ff);
10004ede:	0020      	movs	r0, r4
10004ee0:	f000 f97e 	bl	100051e0 <tu_fifo_remaining>
  if ( available >= sizeof(p_cdc->epout_buf) )  {
10004ee4:	283f      	cmp	r0, #63	; 0x3f
10004ee6:	d916      	bls.n	10004f16 <cdcd_open+0xb2>
    usbd_edpt_xfer(rhport, p_cdc->ep_out, p_cdc->epout_buf, sizeof(p_cdc->epout_buf));
10004ee8:	2390      	movs	r3, #144	; 0x90
10004eea:	009b      	lsls	r3, r3, #2
10004eec:	18e2      	adds	r2, r4, r3
10004eee:	78f1      	ldrb	r1, [r6, #3]
10004ef0:	2340      	movs	r3, #64	; 0x40
10004ef2:	2000      	movs	r0, #0
10004ef4:	f001 f8f0 	bl	100060d8 <usbd_edpt_xfer>
10004ef8:	e7be      	b.n	10004e78 <cdcd_open+0x14>
    TU_ASSERT( usbd_edpt_open(rhport, (tusb_desc_endpoint_t const *) p_desc), 0 );
10004efa:	0021      	movs	r1, r4
10004efc:	0030      	movs	r0, r6
10004efe:	f001 f88f 	bl	10006020 <usbd_edpt_open>
10004f02:	2800      	cmp	r0, #0
10004f04:	d0b7      	beq.n	10004e76 <cdcd_open+0x12>
    p_cdc->ep_notif = ((tusb_desc_endpoint_t const *) p_desc)->bEndpointAddress;
10004f06:	78a3      	ldrb	r3, [r4, #2]
10004f08:	707b      	strb	r3, [r7, #1]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
10004f0a:	7823      	ldrb	r3, [r4, #0]
    drv_len += tu_desc_len(p_desc);
10004f0c:	18ed      	adds	r5, r5, r3
  return desc8 + desc8[DESC_OFFSET_LEN];
10004f0e:	18e4      	adds	r4, r4, r3
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
10004f10:	7863      	ldrb	r3, [r4, #1]
10004f12:	b2ad      	uxth	r5, r5
  return desc8 + desc8[DESC_OFFSET_LEN];
10004f14:	e7d0      	b.n	10004eb8 <cdcd_open+0x54>
    usbd_edpt_release(rhport, p_cdc->ep_out);
10004f16:	78f1      	ldrb	r1, [r6, #3]
10004f18:	2000      	movs	r0, #0
10004f1a:	f001 f8b7 	bl	1000608c <usbd_edpt_release>
10004f1e:	e7ab      	b.n	10004e78 <cdcd_open+0x14>
    TU_ASSERT( usbd_open_edpt_pair(rhport, p_desc, 2, TUSB_XFER_BULK, &p_cdc->ep_out, &p_cdc->ep_in), 0 );
10004f20:	4b0a      	ldr	r3, [pc, #40]	; (10004f4c <cdcd_open+0xe8>)
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
10004f22:	7827      	ldrb	r7, [r4, #0]
10004f24:	9301      	str	r3, [sp, #4]
10004f26:	3301      	adds	r3, #1
10004f28:	9300      	str	r3, [sp, #0]
10004f2a:	2202      	movs	r2, #2
10004f2c:	2302      	movs	r3, #2
10004f2e:	0030      	movs	r0, r6
  return desc8 + desc8[DESC_OFFSET_LEN];
10004f30:	19e1      	adds	r1, r4, r7
10004f32:	f001 f841 	bl	10005fb8 <usbd_open_edpt_pair>
10004f36:	2800      	cmp	r0, #0
10004f38:	d09d      	beq.n	10004e76 <cdcd_open+0x12>
    drv_len += 2*sizeof(tusb_desc_endpoint_t);
10004f3a:	350e      	adds	r5, #14
10004f3c:	19ed      	adds	r5, r5, r7
10004f3e:	b2ad      	uxth	r5, r5
10004f40:	e7bf      	b.n	10004ec2 <cdcd_open+0x5e>
10004f42:	46c0      	nop			; (mov r8, r8)
10004f44:	20011afc 	.word	0x20011afc
10004f48:	20011b0c 	.word	0x20011b0c
10004f4c:	20011afe 	.word	0x20011afe

10004f50 <cdcd_control_complete>:
bool cdcd_control_complete(uint8_t rhport, tusb_control_request_t const * request)
{
  (void) rhport;

  //------------- Class Specific Request -------------//
  TU_VERIFY (request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS);
10004f50:	2360      	movs	r3, #96	; 0x60
10004f52:	780a      	ldrb	r2, [r1, #0]
{
10004f54:	b570      	push	{r4, r5, r6, lr}
  TU_VERIFY (request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS);
10004f56:	4013      	ands	r3, r2
10004f58:	2400      	movs	r4, #0
10004f5a:	2b20      	cmp	r3, #32
10004f5c:	d10b      	bne.n	10004f76 <cdcd_control_complete+0x26>
  // Identify which interface to use
  for ( ; ; itf++, p_cdc++)
  {
    if (itf >= TU_ARRAY_SIZE(_cdcd_itf)) return false;

    if ( p_cdc->itf_num == request->wIndex ) break;
10004f5e:	4a0b      	ldr	r2, [pc, #44]	; (10004f8c <cdcd_control_complete+0x3c>)
10004f60:	794b      	ldrb	r3, [r1, #5]
10004f62:	790d      	ldrb	r5, [r1, #4]
10004f64:	7810      	ldrb	r0, [r2, #0]
10004f66:	021b      	lsls	r3, r3, #8
10004f68:	432b      	orrs	r3, r5
10004f6a:	4298      	cmp	r0, r3
10004f6c:	d103      	bne.n	10004f76 <cdcd_control_complete+0x26>
  }

  // Invoke callback
  if ( CDC_REQUEST_SET_LINE_CODING == request->bRequest )
10004f6e:	784b      	ldrb	r3, [r1, #1]
  {
    if ( tud_cdc_line_coding_cb ) tud_cdc_line_coding_cb(itf, &p_cdc->line_coding);
  }

  return true;
10004f70:	3401      	adds	r4, #1
  if ( CDC_REQUEST_SET_LINE_CODING == request->bRequest )
10004f72:	2b20      	cmp	r3, #32
10004f74:	d001      	beq.n	10004f7a <cdcd_control_complete+0x2a>
}
10004f76:	0020      	movs	r0, r4
10004f78:	bd70      	pop	{r4, r5, r6, pc}
    if ( tud_cdc_line_coding_cb ) tud_cdc_line_coding_cb(itf, &p_cdc->line_coding);
10004f7a:	4b05      	ldr	r3, [pc, #20]	; (10004f90 <cdcd_control_complete+0x40>)
10004f7c:	2b00      	cmp	r3, #0
10004f7e:	d0fa      	beq.n	10004f76 <cdcd_control_complete+0x26>
10004f80:	2000      	movs	r0, #0
10004f82:	1d91      	adds	r1, r2, #6
10004f84:	e000      	b.n	10004f88 <cdcd_control_complete+0x38>
10004f86:	bf00      	nop
10004f88:	e7f5      	b.n	10004f76 <cdcd_control_complete+0x26>
10004f8a:	46c0      	nop			; (mov r8, r8)
10004f8c:	20011afc 	.word	0x20011afc
10004f90:	00000000 	.word	0x00000000

10004f94 <cdcd_control_request>:
// Handle class control request
// return false to stall control endpoint (e.g unsupported request)
bool cdcd_control_request(uint8_t rhport, tusb_control_request_t const * request)
{
  // Handle class request only
  TU_VERIFY(request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS);
10004f94:	2360      	movs	r3, #96	; 0x60
10004f96:	780a      	ldrb	r2, [r1, #0]
{
10004f98:	b570      	push	{r4, r5, r6, lr}
  TU_VERIFY(request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS);
10004f9a:	4013      	ands	r3, r2
10004f9c:	2400      	movs	r4, #0
10004f9e:	2b20      	cmp	r3, #32
10004fa0:	d111      	bne.n	10004fc6 <cdcd_control_request+0x32>
  // Identify which interface to use
  for ( ; ; itf++, p_cdc++)
  {
    if (itf >= TU_ARRAY_SIZE(_cdcd_itf)) return false;

    if ( p_cdc->itf_num == request->wIndex ) break;
10004fa2:	4a14      	ldr	r2, [pc, #80]	; (10004ff4 <cdcd_control_request+0x60>)
10004fa4:	794b      	ldrb	r3, [r1, #5]
10004fa6:	790e      	ldrb	r6, [r1, #4]
10004fa8:	7815      	ldrb	r5, [r2, #0]
10004faa:	021b      	lsls	r3, r3, #8
10004fac:	4333      	orrs	r3, r6
10004fae:	429d      	cmp	r5, r3
10004fb0:	d109      	bne.n	10004fc6 <cdcd_control_request+0x32>
  }

  switch ( request->bRequest )
10004fb2:	784b      	ldrb	r3, [r1, #1]
10004fb4:	2b21      	cmp	r3, #33	; 0x21
10004fb6:	d808      	bhi.n	10004fca <cdcd_control_request+0x36>
10004fb8:	2b1f      	cmp	r3, #31
10004fba:	d904      	bls.n	10004fc6 <cdcd_control_request+0x32>
  {
    case CDC_REQUEST_SET_LINE_CODING:
      TU_LOG2("  Set Line Coding\r\n");
      tud_control_xfer(rhport, request, &p_cdc->line_coding, sizeof(cdc_line_coding_t));
10004fbc:	2307      	movs	r3, #7
10004fbe:	3206      	adds	r2, #6
10004fc0:	f001 f8c6 	bl	10006150 <tud_control_xfer>
    break;

    default: return false; // stall unsupported request
  }

  return true;
10004fc4:	2401      	movs	r4, #1
}
10004fc6:	0020      	movs	r0, r4
10004fc8:	bd70      	pop	{r4, r5, r6, pc}
  switch ( request->bRequest )
10004fca:	2b22      	cmp	r3, #34	; 0x22
10004fcc:	d1fb      	bne.n	10004fc6 <cdcd_control_request+0x32>
      bool const dtr = tu_bit_test(request->wValue, 0);
10004fce:	78cd      	ldrb	r5, [r1, #3]
10004fd0:	788b      	ldrb	r3, [r1, #2]
10004fd2:	022d      	lsls	r5, r5, #8
10004fd4:	431d      	orrs	r5, r3
      p_cdc->line_state = (uint8_t) request->wValue;
10004fd6:	7115      	strb	r5, [r2, #4]
      tud_control_status(rhport, request);
10004fd8:	f001 f8a2 	bl	10006120 <tud_control_status>
      if ( tud_cdc_line_state_cb ) tud_cdc_line_state_cb(itf, dtr, rts);
10004fdc:	4b06      	ldr	r3, [pc, #24]	; (10004ff8 <cdcd_control_request+0x64>)
  return true;
10004fde:	2401      	movs	r4, #1
      if ( tud_cdc_line_state_cb ) tud_cdc_line_state_cb(itf, dtr, rts);
10004fe0:	2b00      	cmp	r3, #0
10004fe2:	d0f0      	beq.n	10004fc6 <cdcd_control_request+0x32>
10004fe4:	0029      	movs	r1, r5
}

// Bit
static inline uint32_t tu_bit_set  (uint32_t value, uint8_t pos) { return value | TU_BIT(pos);                  }
static inline uint32_t tu_bit_clear(uint32_t value, uint8_t pos) { return value & (~TU_BIT(pos));               }
static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
10004fe6:	086a      	lsrs	r2, r5, #1
10004fe8:	2000      	movs	r0, #0
10004fea:	4022      	ands	r2, r4
10004fec:	4021      	ands	r1, r4
10004fee:	e000      	b.n	10004ff2 <cdcd_control_request+0x5e>
10004ff0:	bf00      	nop
10004ff2:	e7e8      	b.n	10004fc6 <cdcd_control_request+0x32>
10004ff4:	20011afc 	.word	0x20011afc
10004ff8:	00000000 	.word	0x00000000

10004ffc <cdcd_xfer_cb>:

bool cdcd_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes)
{
10004ffc:	b5f0      	push	{r4, r5, r6, r7, lr}
10004ffe:	4646      	mov	r6, r8
10005000:	464f      	mov	r7, r9
10005002:	46d6      	mov	lr, sl
10005004:	b5c0      	push	{r6, r7, lr}

  // Identify which interface to use
  for (itf = 0; itf < CFG_TUD_CDC; itf++)
  {
    p_cdc = &_cdcd_itf[itf];
    if ( ( ep_addr == p_cdc->ep_out ) || ( ep_addr == p_cdc->ep_in ) ) break;
10005006:	4e4d      	ldr	r6, [pc, #308]	; (1000513c <cdcd_xfer_cb+0x140>)
{
10005008:	4699      	mov	r9, r3
    if ( ( ep_addr == p_cdc->ep_out ) || ( ep_addr == p_cdc->ep_in ) ) break;
1000500a:	78f3      	ldrb	r3, [r6, #3]
{
1000500c:	4680      	mov	r8, r0
1000500e:	000d      	movs	r5, r1
    if ( ( ep_addr == p_cdc->ep_out ) || ( ep_addr == p_cdc->ep_in ) ) break;
10005010:	428b      	cmp	r3, r1
10005012:	d157      	bne.n	100050c4 <cdcd_xfer_cb+0xc8>

  // Received new data
  if ( ep_addr == p_cdc->ep_out )
  {
    // TODO search for wanted char first for better performance
    for(uint32_t i=0; i<xferred_bytes; i++)
10005014:	464b      	mov	r3, r9
10005016:	2b00      	cmp	r3, #0
10005018:	d100      	bne.n	1000501c <cdcd_xfer_cb+0x20>
1000501a:	e088      	b.n	1000512e <cdcd_xfer_cb+0x132>
1000501c:	4b48      	ldr	r3, [pc, #288]	; (10005140 <cdcd_xfer_cb+0x144>)
1000501e:	2b00      	cmp	r3, #0
10005020:	d100      	bne.n	10005024 <cdcd_xfer_cb+0x28>
10005022:	e075      	b.n	10005110 <cdcd_xfer_cb+0x114>
10005024:	2394      	movs	r3, #148	; 0x94
10005026:	009b      	lsls	r3, r3, #2
10005028:	18f4      	adds	r4, r6, r3
1000502a:	46a2      	mov	sl, r4
1000502c:	0037      	movs	r7, r6
1000502e:	44ca      	add	sl, r9
10005030:	3710      	adds	r7, #16
    {
      tu_fifo_write(&p_cdc->rx_ff, &p_cdc->epout_buf[i]);
10005032:	0021      	movs	r1, r4
10005034:	0038      	movs	r0, r7
10005036:	f000 f9b3 	bl	100053a0 <tu_fifo_write>

      // Check for wanted char and invoke callback if needed
      if ( tud_cdc_rx_wanted_cb && ( ((signed char) p_cdc->wanted_char) != -1 ) && ( p_cdc->wanted_char == p_cdc->epout_buf[i] ) )
1000503a:	7973      	ldrb	r3, [r6, #5]
1000503c:	2bff      	cmp	r3, #255	; 0xff
1000503e:	d002      	beq.n	10005046 <cdcd_xfer_cb+0x4a>
10005040:	7821      	ldrb	r1, [r4, #0]
10005042:	4299      	cmp	r1, r3
10005044:	d043      	beq.n	100050ce <cdcd_xfer_cb+0xd2>
    for(uint32_t i=0; i<xferred_bytes; i++)
10005046:	3401      	adds	r4, #1
10005048:	4554      	cmp	r4, sl
1000504a:	d1f2      	bne.n	10005032 <cdcd_xfer_cb+0x36>
        tud_cdc_rx_wanted_cb(itf, p_cdc->wanted_char);
      }
    }

    // invoke receive callback (if there is still data)
    if (tud_cdc_rx_cb && tu_fifo_count(&p_cdc->rx_ff) ) tud_cdc_rx_cb(itf);
1000504c:	4b3d      	ldr	r3, [pc, #244]	; (10005144 <cdcd_xfer_cb+0x148>)
1000504e:	2b00      	cmp	r3, #0
10005050:	d004      	beq.n	1000505c <cdcd_xfer_cb+0x60>
10005052:	0038      	movs	r0, r7
10005054:	f000 f8b8 	bl	100051c8 <tu_fifo_count>
10005058:	2800      	cmp	r0, #0
1000505a:	d16b      	bne.n	10005134 <cdcd_xfer_cb+0x138>
  uint16_t available = tu_fifo_remaining(&p_cdc->rx_ff);
1000505c:	0038      	movs	r0, r7
1000505e:	f000 f8bf 	bl	100051e0 <tu_fifo_remaining>
  TU_VERIFY(available >= sizeof(p_cdc->epout_buf), );
10005062:	283f      	cmp	r0, #63	; 0x3f
10005064:	d837      	bhi.n	100050d6 <cdcd_xfer_cb+0xda>
  }

  // Data sent to host, we continue to fetch from tx fifo to send.
  // Note: This will cause incorrect baudrate set in line coding.
  //       Though maybe the baudrate is not really important !!!
  if ( ep_addr == p_cdc->ep_in )
10005066:	3f10      	subs	r7, #16
10005068:	78bb      	ldrb	r3, [r7, #2]
1000506a:	429d      	cmp	r5, r3
1000506c:	d006      	beq.n	1000507c <cdcd_xfer_cb+0x80>
    }
  }

  // nothing to do with notif endpoint for now

  return true;
1000506e:	2401      	movs	r4, #1
}
10005070:	0020      	movs	r0, r4
10005072:	bce0      	pop	{r5, r6, r7}
10005074:	46ba      	mov	sl, r7
10005076:	46b1      	mov	r9, r6
10005078:	46a8      	mov	r8, r5
1000507a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ( tud_cdc_tx_complete_cb ) tud_cdc_tx_complete_cb(itf);
1000507c:	4b32      	ldr	r3, [pc, #200]	; (10005148 <cdcd_xfer_cb+0x14c>)
1000507e:	2b00      	cmp	r3, #0
10005080:	d002      	beq.n	10005088 <cdcd_xfer_cb+0x8c>
10005082:	2000      	movs	r0, #0
10005084:	e000      	b.n	10005088 <cdcd_xfer_cb+0x8c>
10005086:	bf00      	nop
    if ( 0 == tud_cdc_n_write_flush(itf) )
10005088:	2000      	movs	r0, #0
1000508a:	f7ff fe21 	bl	10004cd0 <tud_cdc_n_write_flush>
1000508e:	2800      	cmp	r0, #0
10005090:	d1ed      	bne.n	1000506e <cdcd_xfer_cb+0x72>
      if ( !tu_fifo_count(&p_cdc->tx_ff) && xferred_bytes && (0 == (xferred_bytes & (BULK_PACKET_SIZE-1))) )
10005092:	4d2e      	ldr	r5, [pc, #184]	; (1000514c <cdcd_xfer_cb+0x150>)
10005094:	0028      	movs	r0, r5
10005096:	f000 f897 	bl	100051c8 <tu_fifo_count>
1000509a:	2800      	cmp	r0, #0
1000509c:	d1e7      	bne.n	1000506e <cdcd_xfer_cb+0x72>
1000509e:	464b      	mov	r3, r9
100050a0:	2b00      	cmp	r3, #0
100050a2:	d0e4      	beq.n	1000506e <cdcd_xfer_cb+0x72>
100050a4:	069b      	lsls	r3, r3, #26
100050a6:	d1e2      	bne.n	1000506e <cdcd_xfer_cb+0x72>
        if ( usbd_edpt_claim(rhport, p_cdc->ep_in) )
100050a8:	3d28      	subs	r5, #40	; 0x28
100050aa:	4640      	mov	r0, r8
100050ac:	78a9      	ldrb	r1, [r5, #2]
100050ae:	f000 ffbb 	bl	10006028 <usbd_edpt_claim>
100050b2:	1e04      	subs	r4, r0, #0
100050b4:	d0db      	beq.n	1000506e <cdcd_xfer_cb+0x72>
          usbd_edpt_xfer(rhport, p_cdc->ep_in, NULL, 0);
100050b6:	2300      	movs	r3, #0
100050b8:	2200      	movs	r2, #0
100050ba:	4640      	mov	r0, r8
100050bc:	78a9      	ldrb	r1, [r5, #2]
100050be:	f001 f80b 	bl	100060d8 <usbd_edpt_xfer>
100050c2:	e7d5      	b.n	10005070 <cdcd_xfer_cb+0x74>
    if ( ( ep_addr == p_cdc->ep_out ) || ( ep_addr == p_cdc->ep_in ) ) break;
100050c4:	78b3      	ldrb	r3, [r6, #2]
100050c6:	428b      	cmp	r3, r1
100050c8:	d0d8      	beq.n	1000507c <cdcd_xfer_cb+0x80>
  TU_ASSERT(itf < CFG_TUD_CDC);
100050ca:	2400      	movs	r4, #0
100050cc:	e7d0      	b.n	10005070 <cdcd_xfer_cb+0x74>
        tud_cdc_rx_wanted_cb(itf, p_cdc->wanted_char);
100050ce:	2000      	movs	r0, #0
100050d0:	e000      	b.n	100050d4 <cdcd_xfer_cb+0xd8>
100050d2:	bf00      	nop
100050d4:	e7b7      	b.n	10005046 <cdcd_xfer_cb+0x4a>
  TU_VERIFY(usbd_edpt_claim(rhport, p_cdc->ep_out), );
100050d6:	003c      	movs	r4, r7
100050d8:	3c10      	subs	r4, #16
100050da:	2000      	movs	r0, #0
100050dc:	78e1      	ldrb	r1, [r4, #3]
100050de:	f000 ffa3 	bl	10006028 <usbd_edpt_claim>
100050e2:	2800      	cmp	r0, #0
100050e4:	d012      	beq.n	1000510c <cdcd_xfer_cb+0x110>
  available = tu_fifo_remaining(&p_cdc->rx_ff);
100050e6:	0038      	movs	r0, r7
100050e8:	f000 f87a 	bl	100051e0 <tu_fifo_remaining>
  if ( available >= sizeof(p_cdc->epout_buf) )  {
100050ec:	283f      	cmp	r0, #63	; 0x3f
100050ee:	d909      	bls.n	10005104 <cdcd_xfer_cb+0x108>
    usbd_edpt_xfer(rhport, p_cdc->ep_out, p_cdc->epout_buf, sizeof(p_cdc->epout_buf));
100050f0:	2390      	movs	r3, #144	; 0x90
100050f2:	009b      	lsls	r3, r3, #2
100050f4:	18fa      	adds	r2, r7, r3
100050f6:	2000      	movs	r0, #0
100050f8:	2340      	movs	r3, #64	; 0x40
100050fa:	78e1      	ldrb	r1, [r4, #3]
100050fc:	f000 ffec 	bl	100060d8 <usbd_edpt_xfer>
  if ( ep_addr == p_cdc->ep_in )
10005100:	78a3      	ldrb	r3, [r4, #2]
10005102:	e7b2      	b.n	1000506a <cdcd_xfer_cb+0x6e>
    usbd_edpt_release(rhport, p_cdc->ep_out);
10005104:	2000      	movs	r0, #0
10005106:	78e1      	ldrb	r1, [r4, #3]
10005108:	f000 ffc0 	bl	1000608c <usbd_edpt_release>
  if ( ep_addr == p_cdc->ep_in )
1000510c:	78a3      	ldrb	r3, [r4, #2]
1000510e:	e7ac      	b.n	1000506a <cdcd_xfer_cb+0x6e>
10005110:	2394      	movs	r3, #148	; 0x94
10005112:	009b      	lsls	r3, r3, #2
10005114:	18f4      	adds	r4, r6, r3
10005116:	46a2      	mov	sl, r4
10005118:	3610      	adds	r6, #16
1000511a:	0037      	movs	r7, r6
1000511c:	44ca      	add	sl, r9
      tu_fifo_write(&p_cdc->rx_ff, &p_cdc->epout_buf[i]);
1000511e:	0021      	movs	r1, r4
10005120:	0038      	movs	r0, r7
    for(uint32_t i=0; i<xferred_bytes; i++)
10005122:	3401      	adds	r4, #1
      tu_fifo_write(&p_cdc->rx_ff, &p_cdc->epout_buf[i]);
10005124:	f000 f93c 	bl	100053a0 <tu_fifo_write>
    for(uint32_t i=0; i<xferred_bytes; i++)
10005128:	4554      	cmp	r4, sl
1000512a:	d1f8      	bne.n	1000511e <cdcd_xfer_cb+0x122>
1000512c:	e78e      	b.n	1000504c <cdcd_xfer_cb+0x50>
1000512e:	3610      	adds	r6, #16
10005130:	0037      	movs	r7, r6
10005132:	e78b      	b.n	1000504c <cdcd_xfer_cb+0x50>
    if (tud_cdc_rx_cb && tu_fifo_count(&p_cdc->rx_ff) ) tud_cdc_rx_cb(itf);
10005134:	2000      	movs	r0, #0
10005136:	e000      	b.n	1000513a <cdcd_xfer_cb+0x13e>
10005138:	bf00      	nop
1000513a:	e78f      	b.n	1000505c <cdcd_xfer_cb+0x60>
1000513c:	20011afc 	.word	0x20011afc
	...
1000514c:	20011b24 	.word	0x20011b24

10005150 <tu_fifo_config>:
#define tu_fifo_unlock(_ff)

#endif

bool tu_fifo_config(tu_fifo_t *f, void* buffer, uint16_t depth, uint16_t item_size, bool overwritable)
{
10005150:	b5f0      	push	{r4, r5, r6, r7, lr}
10005152:	46c6      	mov	lr, r8
10005154:	b500      	push	{lr}
10005156:	0014      	movs	r4, r2
10005158:	aa06      	add	r2, sp, #24
1000515a:	001e      	movs	r6, r3
1000515c:	7813      	ldrb	r3, [r2, #0]
  if (depth > 0x8000) return false;               // Maximum depth is 2^15 items
1000515e:	2280      	movs	r2, #128	; 0x80
{
10005160:	0005      	movs	r5, r0
10005162:	000f      	movs	r7, r1
10005164:	4698      	mov	r8, r3
  if (depth > 0x8000) return false;               // Maximum depth is 2^15 items
10005166:	0212      	lsls	r2, r2, #8
10005168:	4294      	cmp	r4, r2
1000516a:	d82b      	bhi.n	100051c4 <tu_fifo_config+0x74>
  if (f->mutex)
1000516c:	6940      	ldr	r0, [r0, #20]
1000516e:	2800      	cmp	r0, #0
10005170:	d01a      	beq.n	100051a8 <tu_fifo_config+0x58>
    return mdef;
}

static inline bool osal_mutex_lock (osal_mutex_t mutex_hdl, uint32_t msec)
{
    return mutex_enter_timeout_ms(mutex_hdl, msec);
10005172:	2101      	movs	r1, #1
10005174:	4249      	negs	r1, r1
10005176:	f00b f8eb 	bl	10010350 <__mutex_enter_timeout_ms_veneer>
  tu_fifo_lock(f);

  f->buffer = (uint8_t*) buffer;
  f->depth  = depth;
  f->item_size = item_size;
  f->overwritable = overwritable;
1000517a:	4643      	mov	r3, r8
  f->depth  = depth;
1000517c:	80ac      	strh	r4, [r5, #4]

  f->max_pointer_idx = 2*depth - 1;               // Limit index space to 2*depth - this allows for a fast "modulo" calculation but limits the maximum depth to 2^16/2 = 2^15 and buffer overflows are detectable only if overflow happens once (important for unsupervised DMA applications)
1000517e:	0064      	lsls	r4, r4, #1
10005180:	b2a4      	uxth	r4, r4
  f->overwritable = overwritable;
10005182:	722b      	strb	r3, [r5, #8]
  f->max_pointer_idx = 2*depth - 1;               // Limit index space to 2*depth - this allows for a fast "modulo" calculation but limits the maximum depth to 2^16/2 = 2^15 and buffer overflows are detectable only if overflow happens once (important for unsupervised DMA applications)
10005184:	1e63      	subs	r3, r4, #1
10005186:	81ab      	strh	r3, [r5, #12]
  f->non_used_index_space = 0xFFFF - f->max_pointer_idx;

  f->rd_idx = f->wr_idx = 0;
10005188:	2300      	movs	r3, #0
  if (f->mutex)
1000518a:	6968      	ldr	r0, [r5, #20]
  f->non_used_index_space = 0xFFFF - f->max_pointer_idx;
1000518c:	4264      	negs	r4, r4
  f->rd_idx = f->wr_idx = 0;
1000518e:	81eb      	strh	r3, [r5, #14]
  f->buffer = (uint8_t*) buffer;
10005190:	602f      	str	r7, [r5, #0]
  f->item_size = item_size;
10005192:	80ee      	strh	r6, [r5, #6]
  f->non_used_index_space = 0xFFFF - f->max_pointer_idx;
10005194:	816c      	strh	r4, [r5, #10]
  f->rd_idx = f->wr_idx = 0;
10005196:	822b      	strh	r3, [r5, #16]
  if (f->mutex)
10005198:	2800      	cmp	r0, #0
1000519a:	d011      	beq.n	100051c0 <tu_fifo_config+0x70>
}

static inline bool osal_mutex_unlock(osal_mutex_t mutex_hdl)
{
    mutex_exit(mutex_hdl);
1000519c:	f00b f8b8 	bl	10010310 <__mutex_exit_veneer>

  tu_fifo_unlock(f);

  return true;
100051a0:	2001      	movs	r0, #1
}
100051a2:	bc80      	pop	{r7}
100051a4:	46b8      	mov	r8, r7
100051a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  f->depth  = depth;
100051a8:	80ac      	strh	r4, [r5, #4]
  f->max_pointer_idx = 2*depth - 1;               // Limit index space to 2*depth - this allows for a fast "modulo" calculation but limits the maximum depth to 2^16/2 = 2^15 and buffer overflows are detectable only if overflow happens once (important for unsupervised DMA applications)
100051aa:	0064      	lsls	r4, r4, #1
100051ac:	b2a4      	uxth	r4, r4
  f->overwritable = overwritable;
100051ae:	722b      	strb	r3, [r5, #8]
  f->max_pointer_idx = 2*depth - 1;               // Limit index space to 2*depth - this allows for a fast "modulo" calculation but limits the maximum depth to 2^16/2 = 2^15 and buffer overflows are detectable only if overflow happens once (important for unsupervised DMA applications)
100051b0:	1e63      	subs	r3, r4, #1
  f->non_used_index_space = 0xFFFF - f->max_pointer_idx;
100051b2:	4264      	negs	r4, r4
  f->rd_idx = f->wr_idx = 0;
100051b4:	81e8      	strh	r0, [r5, #14]
  f->buffer = (uint8_t*) buffer;
100051b6:	6029      	str	r1, [r5, #0]
  f->item_size = item_size;
100051b8:	80ee      	strh	r6, [r5, #6]
  f->max_pointer_idx = 2*depth - 1;               // Limit index space to 2*depth - this allows for a fast "modulo" calculation but limits the maximum depth to 2^16/2 = 2^15 and buffer overflows are detectable only if overflow happens once (important for unsupervised DMA applications)
100051ba:	81ab      	strh	r3, [r5, #12]
  f->non_used_index_space = 0xFFFF - f->max_pointer_idx;
100051bc:	816c      	strh	r4, [r5, #10]
  f->rd_idx = f->wr_idx = 0;
100051be:	8228      	strh	r0, [r5, #16]
  return true;
100051c0:	2001      	movs	r0, #1
100051c2:	e7ee      	b.n	100051a2 <tu_fifo_config+0x52>
  if (depth > 0x8000) return false;               // Maximum depth is 2^15 items
100051c4:	2000      	movs	r0, #0
100051c6:	e7ec      	b.n	100051a2 <tu_fifo_config+0x52>

100051c8 <tu_fifo_count>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_count(tu_fifo_t* f)
{
100051c8:	b510      	push	{r4, lr}
  return _tu_fifo_count(f, f->wr_idx, f->rd_idx);
100051ca:	89c4      	ldrh	r4, [r0, #14]
100051cc:	8a01      	ldrh	r1, [r0, #16]
{
100051ce:	0002      	movs	r2, r0
  uint16_t cnt = wAbs-rAbs;
100051d0:	1a60      	subs	r0, r4, r1
100051d2:	b280      	uxth	r0, r0
  if (rAbs > wAbs) cnt -= f->non_used_index_space;
100051d4:	428c      	cmp	r4, r1
100051d6:	d202      	bcs.n	100051de <tu_fifo_count+0x16>
100051d8:	8953      	ldrh	r3, [r2, #10]
100051da:	1ac0      	subs	r0, r0, r3
100051dc:	b280      	uxth	r0, r0
}
100051de:	bd10      	pop	{r4, pc}

100051e0 <tu_fifo_remaining>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_remaining(tu_fifo_t* f)
{
100051e0:	b510      	push	{r4, lr}
  return _tu_fifo_remaining(f, f->wr_idx, f->rd_idx);
100051e2:	89c4      	ldrh	r4, [r0, #14]
100051e4:	8a01      	ldrh	r1, [r0, #16]
  return f->depth - _tu_fifo_count(f, wAbs, rAbs);
100051e6:	8883      	ldrh	r3, [r0, #4]
  uint16_t cnt = wAbs-rAbs;
100051e8:	1a62      	subs	r2, r4, r1
100051ea:	b292      	uxth	r2, r2
  if (rAbs > wAbs) cnt -= f->non_used_index_space;
100051ec:	428c      	cmp	r4, r1
100051ee:	d202      	bcs.n	100051f6 <tu_fifo_remaining+0x16>
100051f0:	8940      	ldrh	r0, [r0, #10]
100051f2:	1a12      	subs	r2, r2, r0
100051f4:	b292      	uxth	r2, r2
  return f->depth - _tu_fifo_count(f, wAbs, rAbs);
100051f6:	1a98      	subs	r0, r3, r2
  return _tu_fifo_remaining(f, f->wr_idx, f->rd_idx);
100051f8:	b280      	uxth	r0, r0
}
100051fa:	bd10      	pop	{r4, pc}

100051fc <tu_fifo_read>:

    @returns TRUE if the queue is not empty
 */
/******************************************************************************/
bool tu_fifo_read(tu_fifo_t* f, void * buffer)
{
100051fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100051fe:	0004      	movs	r4, r0
  if (f->mutex)
10005200:	6940      	ldr	r0, [r0, #20]
{
10005202:	000e      	movs	r6, r1
  if (f->mutex)
10005204:	2800      	cmp	r0, #0
10005206:	d003      	beq.n	10005210 <tu_fifo_read+0x14>
    return mutex_enter_timeout_ms(mutex_hdl, msec);
10005208:	2101      	movs	r1, #1
1000520a:	4249      	negs	r1, r1
1000520c:	f00b f8a0 	bl	10010350 <__mutex_enter_timeout_ms_veneer>
  tu_fifo_lock(f);                                          // TODO: Here we may distinguish for read and write pointer mutexes!

  // Peek the data
  bool ret = _tu_fifo_peek_at(f, 0, buffer, f->wr_idx, f->rd_idx);    // f->rd_idx might get modified in case of an overflow so we can not use a local variable
10005210:	89e1      	ldrh	r1, [r4, #14]
10005212:	8a22      	ldrh	r2, [r4, #16]
10005214:	b28f      	uxth	r7, r1
  uint16_t cnt = wAbs-rAbs;
10005216:	1a8d      	subs	r5, r1, r2
  bool ret = _tu_fifo_peek_at(f, 0, buffer, f->wr_idx, f->rd_idx);    // f->rd_idx might get modified in case of an overflow so we can not use a local variable
10005218:	b293      	uxth	r3, r2
  uint16_t cnt = wAbs-rAbs;
1000521a:	b2ad      	uxth	r5, r5
  if (rAbs > wAbs) cnt -= f->non_used_index_space;
1000521c:	4291      	cmp	r1, r2
1000521e:	d202      	bcs.n	10005226 <tu_fifo_read+0x2a>
10005220:	8962      	ldrh	r2, [r4, #10]
10005222:	1aad      	subs	r5, r5, r2
10005224:	b2ad      	uxth	r5, r5
  if (cnt > f->depth)
10005226:	88a2      	ldrh	r2, [r4, #4]
  if ((p < p - offset) || (p - offset > f->max_pointer_idx))
10005228:	89a1      	ldrh	r1, [r4, #12]
  if (cnt > f->depth)
1000522a:	42aa      	cmp	r2, r5
1000522c:	d205      	bcs.n	1000523a <tu_fifo_read+0x3e>
  if ((p < p - offset) || (p - offset > f->max_pointer_idx))
1000522e:	1ab8      	subs	r0, r7, r2
10005230:	4288      	cmp	r0, r1
10005232:	dc2b      	bgt.n	1000528c <tu_fifo_read+0x90>
    p -= offset;
10005234:	b280      	uxth	r0, r0
  f->rd_idx = backward_pointer(f, wAbs, f->depth);
10005236:	0015      	movs	r5, r2
10005238:	8220      	strh	r0, [r4, #16]
  if (cnt == 0 || offset >= cnt) return false;
1000523a:	2d00      	cmp	r5, #0
1000523c:	d02e      	beq.n	1000529c <tu_fifo_read+0xa0>
  if ((p > p + offset) || (p + offset > f->max_pointer_idx))
1000523e:	428b      	cmp	r3, r1
10005240:	d906      	bls.n	10005250 <tu_fifo_read+0x54>
    p = (p + offset) + f->non_used_index_space;
10005242:	8961      	ldrh	r1, [r4, #10]
10005244:	185b      	adds	r3, r3, r1
10005246:	b29b      	uxth	r3, r3
  while ( idx >= depth) idx -= depth;
10005248:	429a      	cmp	r2, r3
1000524a:	d803      	bhi.n	10005254 <tu_fifo_read+0x58>
1000524c:	1a9b      	subs	r3, r3, r2
1000524e:	b29b      	uxth	r3, r3
10005250:	429a      	cmp	r2, r3
10005252:	d9fb      	bls.n	1000524c <tu_fifo_read+0x50>
  memcpy(p_buffer, f->buffer + (rRel * f->item_size), f->item_size);
10005254:	88e2      	ldrh	r2, [r4, #6]
10005256:	6821      	ldr	r1, [r4, #0]
10005258:	4353      	muls	r3, r2
1000525a:	0030      	movs	r0, r6
1000525c:	18c9      	adds	r1, r1, r3
1000525e:	f7fb ff47 	bl	100010f0 <__wrap___aeabi_memcpy>
  return true;
10005262:	2501      	movs	r5, #1
10005264:	2001      	movs	r0, #1
10005266:	2601      	movs	r6, #1
  if ((p > p + offset) || (p + offset > f->max_pointer_idx))
10005268:	89a1      	ldrh	r1, [r4, #12]

  // Advance pointer
  f->rd_idx = advance_pointer(f, f->rd_idx, ret);
1000526a:	8a22      	ldrh	r2, [r4, #16]
1000526c:	b293      	uxth	r3, r2
  if ((p > p + offset) || (p + offset > f->max_pointer_idx))
1000526e:	1812      	adds	r2, r2, r0
10005270:	428a      	cmp	r2, r1
10005272:	dd10      	ble.n	10005296 <tu_fifo_read+0x9a>
    p = (p + offset) + f->non_used_index_space;
10005274:	8962      	ldrh	r2, [r4, #10]
10005276:	189b      	adds	r3, r3, r2
10005278:	18ed      	adds	r5, r5, r3
1000527a:	b2ad      	uxth	r5, r5
  if (f->mutex)
1000527c:	6960      	ldr	r0, [r4, #20]
  f->rd_idx = advance_pointer(f, f->rd_idx, ret);
1000527e:	8225      	strh	r5, [r4, #16]
  if (f->mutex)
10005280:	2800      	cmp	r0, #0
10005282:	d001      	beq.n	10005288 <tu_fifo_read+0x8c>
    mutex_exit(mutex_hdl);
10005284:	f00b f844 	bl	10010310 <__mutex_exit_veneer>

  tu_fifo_unlock(f);
  return ret;
}
10005288:	0030      	movs	r0, r6
1000528a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    p = (p - offset) - f->non_used_index_space;
1000528c:	8960      	ldrh	r0, [r4, #10]
1000528e:	1810      	adds	r0, r2, r0
10005290:	1a38      	subs	r0, r7, r0
10005292:	b280      	uxth	r0, r0
10005294:	e7cf      	b.n	10005236 <tu_fifo_read+0x3a>
    p += offset;
10005296:	195d      	adds	r5, r3, r5
10005298:	b2ad      	uxth	r5, r5
1000529a:	e7ef      	b.n	1000527c <tu_fifo_read+0x80>
1000529c:	2000      	movs	r0, #0
  if (cnt == 0 || offset >= cnt) return false;
1000529e:	2600      	movs	r6, #0
100052a0:	e7e3      	b.n	1000526a <tu_fifo_read+0x6e>
100052a2:	46c0      	nop			; (mov r8, r8)

100052a4 <tu_fifo_read_n>:

    @returns number of items read from the FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_read_n(tu_fifo_t* f, void * buffer, uint16_t count)
{
100052a4:	b5f0      	push	{r4, r5, r6, r7, lr}
100052a6:	46c6      	mov	lr, r8
100052a8:	0004      	movs	r4, r0
  if (f->mutex)
100052aa:	6940      	ldr	r0, [r0, #20]
{
100052ac:	4688      	mov	r8, r1
100052ae:	0017      	movs	r7, r2
100052b0:	b500      	push	{lr}
  if (f->mutex)
100052b2:	2800      	cmp	r0, #0
100052b4:	d003      	beq.n	100052be <tu_fifo_read_n+0x1a>
    return mutex_enter_timeout_ms(mutex_hdl, msec);
100052b6:	2101      	movs	r1, #1
100052b8:	4249      	negs	r1, r1
100052ba:	f00b f849 	bl	10010350 <__mutex_enter_timeout_ms_veneer>
  tu_fifo_lock(f);                                          // TODO: Here we may distinguish for read and write pointer mutexes!

  // Peek the data
  count = _tu_fifo_peek_at_n(f, 0, buffer, count, f->wr_idx, f->rd_idx);        // f->rd_idx might get modified in case of an overflow so we can not use a local variable
100052be:	89e0      	ldrh	r0, [r4, #14]
100052c0:	8a21      	ldrh	r1, [r4, #16]
100052c2:	b282      	uxth	r2, r0
  uint16_t cnt = wAbs-rAbs;
100052c4:	1a46      	subs	r6, r0, r1
  count = _tu_fifo_peek_at_n(f, 0, buffer, count, f->wr_idx, f->rd_idx);        // f->rd_idx might get modified in case of an overflow so we can not use a local variable
100052c6:	b28b      	uxth	r3, r1
  uint16_t cnt = wAbs-rAbs;
100052c8:	b2b6      	uxth	r6, r6
  if (rAbs > wAbs) cnt -= f->non_used_index_space;
100052ca:	4288      	cmp	r0, r1
100052cc:	d202      	bcs.n	100052d4 <tu_fifo_read_n+0x30>
100052ce:	8961      	ldrh	r1, [r4, #10]
100052d0:	1a76      	subs	r6, r6, r1
100052d2:	b2b6      	uxth	r6, r6
  if (cnt > f->depth)
100052d4:	88a5      	ldrh	r5, [r4, #4]
  if ((p < p - offset) || (p - offset > f->max_pointer_idx))
100052d6:	89a0      	ldrh	r0, [r4, #12]
  if (cnt > f->depth)
100052d8:	42b5      	cmp	r5, r6
100052da:	d207      	bcs.n	100052ec <tu_fifo_read_n+0x48>
  if ((p < p - offset) || (p - offset > f->max_pointer_idx))
100052dc:	1b53      	subs	r3, r2, r5
100052de:	4283      	cmp	r3, r0
100052e0:	dc2c      	bgt.n	1000533c <tu_fifo_read_n+0x98>
    p -= offset;
100052e2:	b29b      	uxth	r3, r3
    rAbs = f->rd_idx;
100052e4:	002e      	movs	r6, r5
  f->rd_idx = backward_pointer(f, wAbs, f->depth);
100052e6:	8223      	strh	r3, [r4, #16]
    rAbs = f->rd_idx;
100052e8:	8a23      	ldrh	r3, [r4, #16]
100052ea:	b29b      	uxth	r3, r3
  if (cnt == 0 || offset >= cnt) return 0;
100052ec:	2e00      	cmp	r6, #0
100052ee:	d02c      	beq.n	1000534a <tu_fifo_read_n+0xa6>
  if (cnt < n) {
100052f0:	1c3a      	adds	r2, r7, #0
100052f2:	42b7      	cmp	r7, r6
100052f4:	d827      	bhi.n	10005346 <tu_fifo_read_n+0xa2>
100052f6:	b296      	uxth	r6, r2
  if ((p > p + offset) || (p + offset > f->max_pointer_idx))
100052f8:	4283      	cmp	r3, r0
100052fa:	d902      	bls.n	10005302 <tu_fifo_read_n+0x5e>
    p = (p + offset) + f->non_used_index_space;
100052fc:	8961      	ldrh	r1, [r4, #10]
100052fe:	185b      	adds	r3, r3, r1
10005300:	b29b      	uxth	r3, r3
  while ( idx >= depth) idx -= depth;
10005302:	429d      	cmp	r5, r3
10005304:	d803      	bhi.n	1000530e <tu_fifo_read_n+0x6a>
10005306:	1b5b      	subs	r3, r3, r5
10005308:	b29b      	uxth	r3, r3
1000530a:	429d      	cmp	r5, r3
1000530c:	d9fb      	bls.n	10005306 <tu_fifo_read_n+0x62>
  if(rRel + n <= f->depth)       // Linear mode only
1000530e:	199a      	adds	r2, r3, r6
10005310:	0037      	movs	r7, r6
    memcpy(p_buffer, f->buffer + (rRel * f->item_size), n*f->item_size);
10005312:	88e1      	ldrh	r1, [r4, #6]
  if(rRel + n <= f->depth)       // Linear mode only
10005314:	42aa      	cmp	r2, r5
10005316:	dc2c      	bgt.n	10005372 <tu_fifo_read_n+0xce>
    memcpy(p_buffer, f->buffer + (rRel * f->item_size), n*f->item_size);
10005318:	000a      	movs	r2, r1
1000531a:	4359      	muls	r1, r3
1000531c:	6823      	ldr	r3, [r4, #0]
1000531e:	4372      	muls	r2, r6
10005320:	469c      	mov	ip, r3
10005322:	4640      	mov	r0, r8
10005324:	4461      	add	r1, ip
10005326:	f7fb fee3 	bl	100010f0 <__wrap___aeabi_memcpy>

  // Advance read pointer
  f->rd_idx = advance_pointer(f, f->rd_idx, count);
1000532a:	8a22      	ldrh	r2, [r4, #16]
  if ((p > p + offset) || (p + offset > f->max_pointer_idx))
1000532c:	89a0      	ldrh	r0, [r4, #12]
  f->rd_idx = advance_pointer(f, f->rd_idx, count);
1000532e:	b293      	uxth	r3, r2
  if ((p > p + offset) || (p + offset > f->max_pointer_idx))
10005330:	19d2      	adds	r2, r2, r7
10005332:	4282      	cmp	r2, r0
10005334:	dc0f      	bgt.n	10005356 <tu_fifo_read_n+0xb2>
    p += offset;
10005336:	199b      	adds	r3, r3, r6
10005338:	b29b      	uxth	r3, r3
1000533a:	e010      	b.n	1000535e <tu_fifo_read_n+0xba>
    p = (p - offset) - f->non_used_index_space;
1000533c:	8963      	ldrh	r3, [r4, #10]
1000533e:	18eb      	adds	r3, r5, r3
10005340:	1ad3      	subs	r3, r2, r3
10005342:	b29b      	uxth	r3, r3
10005344:	e7ce      	b.n	100052e4 <tu_fifo_read_n+0x40>
10005346:	1c32      	adds	r2, r6, #0
10005348:	e7d5      	b.n	100052f6 <tu_fifo_read_n+0x52>
1000534a:	2700      	movs	r7, #0
  f->rd_idx = advance_pointer(f, f->rd_idx, count);
1000534c:	8a22      	ldrh	r2, [r4, #16]
1000534e:	b293      	uxth	r3, r2
  if ((p > p + offset) || (p + offset > f->max_pointer_idx))
10005350:	19d2      	adds	r2, r2, r7
10005352:	4282      	cmp	r2, r0
10005354:	ddef      	ble.n	10005336 <tu_fifo_read_n+0x92>
    p = (p + offset) + f->non_used_index_space;
10005356:	8962      	ldrh	r2, [r4, #10]
10005358:	189b      	adds	r3, r3, r2
1000535a:	18f3      	adds	r3, r6, r3
1000535c:	b29b      	uxth	r3, r3
  if (f->mutex)
1000535e:	6960      	ldr	r0, [r4, #20]
  f->rd_idx = advance_pointer(f, f->rd_idx, count);
10005360:	8223      	strh	r3, [r4, #16]
  if (f->mutex)
10005362:	2800      	cmp	r0, #0
10005364:	d001      	beq.n	1000536a <tu_fifo_read_n+0xc6>
    mutex_exit(mutex_hdl);
10005366:	f00a ffd3 	bl	10010310 <__mutex_exit_veneer>

  tu_fifo_unlock(f);
  return count;
}
1000536a:	0030      	movs	r0, r6
1000536c:	bc80      	pop	{r7}
1000536e:	46b8      	mov	r8, r7
10005370:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint16_t nLin = f->depth - rRel;
10005372:	1aed      	subs	r5, r5, r3
    memcpy(p_buffer, f->buffer + (rRel * f->item_size), nLin*f->item_size);
10005374:	b2ad      	uxth	r5, r5
10005376:	002a      	movs	r2, r5
10005378:	434a      	muls	r2, r1
1000537a:	4359      	muls	r1, r3
1000537c:	6823      	ldr	r3, [r4, #0]
1000537e:	4640      	mov	r0, r8
10005380:	469c      	mov	ip, r3
10005382:	4461      	add	r1, ip
10005384:	f7fb feb4 	bl	100010f0 <__wrap___aeabi_memcpy>
    memcpy(p_buffer + nLin*f->item_size, f->buffer, (n - nLin) * f->item_size);
10005388:	88e3      	ldrh	r3, [r4, #6]
1000538a:	1b72      	subs	r2, r6, r5
1000538c:	0018      	movs	r0, r3
1000538e:	4368      	muls	r0, r5
10005390:	435a      	muls	r2, r3
10005392:	6821      	ldr	r1, [r4, #0]
10005394:	4440      	add	r0, r8
10005396:	f7fb feab 	bl	100010f0 <__wrap___aeabi_memcpy>
  if ((p > p + offset) || (p + offset > f->max_pointer_idx))
1000539a:	89a0      	ldrh	r0, [r4, #12]
1000539c:	e7d6      	b.n	1000534c <tu_fifo_read_n+0xa8>
1000539e:	46c0      	nop			; (mov r8, r8)

100053a0 <tu_fifo_write>:
    @returns TRUE if the data was written to the FIFO (overwrittable
             FIFO will always return TRUE)
 */
/******************************************************************************/
bool tu_fifo_write(tu_fifo_t* f, const void * data)
{
100053a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100053a2:	0004      	movs	r4, r0
  if (f->mutex)
100053a4:	6940      	ldr	r0, [r0, #20]
{
100053a6:	000e      	movs	r6, r1
  if (f->mutex)
100053a8:	2800      	cmp	r0, #0
100053aa:	d003      	beq.n	100053b4 <tu_fifo_write+0x14>
    return mutex_enter_timeout_ms(mutex_hdl, msec);
100053ac:	2101      	movs	r1, #1
100053ae:	4249      	negs	r1, r1
100053b0:	f00a ffce 	bl	10010350 <__mutex_enter_timeout_ms_veneer>
  tu_fifo_lock(f);

  uint16_t w = f->wr_idx;
100053b4:	89e2      	ldrh	r2, [r4, #14]

  if ( _tu_fifo_full(f, w, f->rd_idx) && !f->overwritable ) return false;
100053b6:	8a21      	ldrh	r1, [r4, #16]
  uint16_t w = f->wr_idx;
100053b8:	b295      	uxth	r5, r2
  uint16_t cnt = wAbs-rAbs;
100053ba:	1a53      	subs	r3, r2, r1
100053bc:	b29b      	uxth	r3, r3
  if (rAbs > wAbs) cnt -= f->non_used_index_space;
100053be:	4291      	cmp	r1, r2
100053c0:	d902      	bls.n	100053c8 <tu_fifo_write+0x28>
100053c2:	8962      	ldrh	r2, [r4, #10]
100053c4:	1a9b      	subs	r3, r3, r2
100053c6:	b29b      	uxth	r3, r3
  return (_tu_fifo_count(f, wAbs, rAbs) == f->depth);
100053c8:	88a2      	ldrh	r2, [r4, #4]
  if ( _tu_fifo_full(f, w, f->rd_idx) && !f->overwritable ) return false;
100053ca:	429a      	cmp	r2, r3
100053cc:	d026      	beq.n	1000541c <tu_fifo_write+0x7c>
  if ((p > p + offset) || (p + offset > f->max_pointer_idx))
100053ce:	89a1      	ldrh	r1, [r4, #12]
100053d0:	002b      	movs	r3, r5
100053d2:	42a9      	cmp	r1, r5
100053d4:	d206      	bcs.n	100053e4 <tu_fifo_write+0x44>
    p = (p + offset) + f->non_used_index_space;
100053d6:	8963      	ldrh	r3, [r4, #10]
100053d8:	18eb      	adds	r3, r5, r3
100053da:	b29b      	uxth	r3, r3
  while ( idx >= depth) idx -= depth;
100053dc:	429a      	cmp	r2, r3
100053de:	d803      	bhi.n	100053e8 <tu_fifo_write+0x48>
100053e0:	1a9b      	subs	r3, r3, r2
100053e2:	b29b      	uxth	r3, r3
100053e4:	429a      	cmp	r2, r3
100053e6:	d9fb      	bls.n	100053e0 <tu_fifo_write+0x40>
  memcpy(f->buffer + (wRel * f->item_size), data, f->item_size);
100053e8:	88e2      	ldrh	r2, [r4, #6]
100053ea:	6821      	ldr	r1, [r4, #0]
100053ec:	4353      	muls	r3, r2
100053ee:	18c8      	adds	r0, r1, r3
100053f0:	0031      	movs	r1, r6
100053f2:	f7fb fe7d 	bl	100010f0 <__wrap___aeabi_memcpy>
  if ((p > p + offset) || (p + offset > f->max_pointer_idx))
100053f6:	89a3      	ldrh	r3, [r4, #12]
100053f8:	42ab      	cmp	r3, r5
100053fa:	d90a      	bls.n	10005412 <tu_fifo_write+0x72>
    p += offset;
100053fc:	3501      	adds	r5, #1
100053fe:	b2ad      	uxth	r5, r5
  if (f->mutex)
10005400:	6960      	ldr	r0, [r4, #20]
  // Advance pointer
  f->wr_idx = advance_pointer(f, w, 1);

  tu_fifo_unlock(f);

  return true;
10005402:	2701      	movs	r7, #1
  f->wr_idx = advance_pointer(f, w, 1);
10005404:	81e5      	strh	r5, [r4, #14]
  if (f->mutex)
10005406:	2800      	cmp	r0, #0
10005408:	d001      	beq.n	1000540e <tu_fifo_write+0x6e>
    mutex_exit(mutex_hdl);
1000540a:	f00a ff81 	bl	10010310 <__mutex_exit_veneer>
}
1000540e:	0038      	movs	r0, r7
10005410:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    p = (p + offset) + f->non_used_index_space;
10005412:	8963      	ldrh	r3, [r4, #10]
10005414:	18ed      	adds	r5, r5, r3
10005416:	3501      	adds	r5, #1
10005418:	b2ad      	uxth	r5, r5
1000541a:	e7f1      	b.n	10005400 <tu_fifo_write+0x60>
  if ( _tu_fifo_full(f, w, f->rd_idx) && !f->overwritable ) return false;
1000541c:	7a27      	ldrb	r7, [r4, #8]
1000541e:	2f00      	cmp	r7, #0
10005420:	d1d5      	bne.n	100053ce <tu_fifo_write+0x2e>
10005422:	e7f4      	b.n	1000540e <tu_fifo_write+0x6e>

10005424 <tu_fifo_write_n>:
                Number of element
    @return Number of written elements
 */
/******************************************************************************/
uint16_t tu_fifo_write_n(tu_fifo_t* f, const void * data, uint16_t count)
{
10005424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10005426:	4647      	mov	r7, r8
10005428:	46ce      	mov	lr, r9
1000542a:	0004      	movs	r4, r0
1000542c:	b580      	push	{r7, lr}
1000542e:	0015      	movs	r5, r2
10005430:	000f      	movs	r7, r1
  if ( count == 0 ) return 0;
10005432:	2a00      	cmp	r2, #0
10005434:	d052      	beq.n	100054dc <tu_fifo_write_n+0xb8>
  if (f->mutex)
10005436:	6940      	ldr	r0, [r0, #20]
10005438:	2800      	cmp	r0, #0
1000543a:	d003      	beq.n	10005444 <tu_fifo_write_n+0x20>
    return mutex_enter_timeout_ms(mutex_hdl, msec);
1000543c:	2101      	movs	r1, #1
1000543e:	4249      	negs	r1, r1
10005440:	f00a ff86 	bl	10010350 <__mutex_enter_timeout_ms_veneer>

  tu_fifo_lock(f);

  uint16_t w = f->wr_idx, r = f->rd_idx;
10005444:	89e6      	ldrh	r6, [r4, #14]
  uint8_t const* buf8 = (uint8_t const*) data;

  if (!f->overwritable)
10005446:	7a23      	ldrb	r3, [r4, #8]
  uint16_t w = f->wr_idx, r = f->rd_idx;
10005448:	8a20      	ldrh	r0, [r4, #16]
  return f->depth - _tu_fifo_count(f, wAbs, rAbs);
1000544a:	88a1      	ldrh	r1, [r4, #4]
  uint16_t w = f->wr_idx, r = f->rd_idx;
1000544c:	b2b6      	uxth	r6, r6
1000544e:	b280      	uxth	r0, r0
  if (!f->overwritable)
10005450:	2b00      	cmp	r3, #0
10005452:	d138      	bne.n	100054c6 <tu_fifo_write_n+0xa2>
  uint16_t cnt = wAbs-rAbs;
10005454:	1a33      	subs	r3, r6, r0
10005456:	b29b      	uxth	r3, r3
  if (rAbs > wAbs) cnt -= f->non_used_index_space;
10005458:	4286      	cmp	r6, r0
1000545a:	d202      	bcs.n	10005462 <tu_fifo_write_n+0x3e>
1000545c:	8962      	ldrh	r2, [r4, #10]
1000545e:	1a9b      	subs	r3, r3, r2
10005460:	b29b      	uxth	r3, r3
  return f->depth - _tu_fifo_count(f, wAbs, rAbs);
10005462:	1acb      	subs	r3, r1, r3
static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
10005464:	1c1a      	adds	r2, r3, #0
10005466:	b29b      	uxth	r3, r3
10005468:	42ab      	cmp	r3, r5
1000546a:	d852      	bhi.n	10005512 <tu_fifo_write_n+0xee>
1000546c:	b293      	uxth	r3, r2
1000546e:	4698      	mov	r8, r3
  if(wRel + n <= f->depth)  // Linear mode only
10005470:	001d      	movs	r5, r3
    count = tu_min16(count, _tu_fifo_remaining(f, w, r));
  }
  else if (count > f->depth)
  {
    // Only copy last part
    buf8 = buf8 + (count - f->depth) * f->item_size;
10005472:	88e2      	ldrh	r2, [r4, #6]
  if ((p > p + offset) || (p + offset > f->max_pointer_idx))
10005474:	89a0      	ldrh	r0, [r4, #12]
  uint16_t w = f->wr_idx, r = f->rd_idx;
10005476:	0033      	movs	r3, r6
  if ((p > p + offset) || (p + offset > f->max_pointer_idx))
10005478:	4286      	cmp	r6, r0
1000547a:	dd05      	ble.n	10005488 <tu_fifo_write_n+0x64>
    p = (p + offset) + f->non_used_index_space;
1000547c:	8963      	ldrh	r3, [r4, #10]
1000547e:	18f3      	adds	r3, r6, r3
10005480:	b29b      	uxth	r3, r3
  while ( idx >= depth) idx -= depth;
10005482:	e001      	b.n	10005488 <tu_fifo_write_n+0x64>
10005484:	1a5b      	subs	r3, r3, r1
10005486:	b29b      	uxth	r3, r3
10005488:	428b      	cmp	r3, r1
1000548a:	d2fb      	bcs.n	10005484 <tu_fifo_write_n+0x60>
  if(wRel + n <= f->depth)  // Linear mode only
1000548c:	1958      	adds	r0, r3, r5
1000548e:	4288      	cmp	r0, r1
10005490:	dc2a      	bgt.n	100054e8 <tu_fifo_write_n+0xc4>
    memcpy(f->buffer + (wRel * f->item_size), data, n*f->item_size);
10005492:	4353      	muls	r3, r2
10005494:	6821      	ldr	r1, [r4, #0]
10005496:	436a      	muls	r2, r5
10005498:	18c8      	adds	r0, r1, r3
1000549a:	0039      	movs	r1, r7
1000549c:	f7fb fe28 	bl	100010f0 <__wrap___aeabi_memcpy>
  if ((p > p + offset) || (p + offset > f->max_pointer_idx))
100054a0:	89a3      	ldrh	r3, [r4, #12]
100054a2:	1975      	adds	r5, r6, r5
100054a4:	429d      	cmp	r5, r3
100054a6:	dd1c      	ble.n	100054e2 <tu_fifo_write_n+0xbe>
    p = (p + offset) + f->non_used_index_space;
100054a8:	8963      	ldrh	r3, [r4, #10]
100054aa:	18f6      	adds	r6, r6, r3
100054ac:	4446      	add	r6, r8
100054ae:	b2b6      	uxth	r6, r6
  if (f->mutex)
100054b0:	6960      	ldr	r0, [r4, #20]

  // Write data
  _ff_push_n(f, buf8, count, wRel);

  // Advance pointer
  f->wr_idx = advance_pointer(f, w, count);
100054b2:	81e6      	strh	r6, [r4, #14]
  if (f->mutex)
100054b4:	2800      	cmp	r0, #0
100054b6:	d001      	beq.n	100054bc <tu_fifo_write_n+0x98>
    mutex_exit(mutex_hdl);
100054b8:	f00a ff2a 	bl	10010310 <__mutex_exit_veneer>

  tu_fifo_unlock(f);

  return count;
}
100054bc:	4640      	mov	r0, r8
100054be:	bcc0      	pop	{r6, r7}
100054c0:	46b9      	mov	r9, r7
100054c2:	46b0      	mov	r8, r6
100054c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if(wRel + n <= f->depth)  // Linear mode only
100054c6:	46a8      	mov	r8, r5
    buf8 = buf8 + (count - f->depth) * f->item_size;
100054c8:	88e2      	ldrh	r2, [r4, #6]
  else if (count > f->depth)
100054ca:	42a9      	cmp	r1, r5
100054cc:	d2d2      	bcs.n	10005474 <tu_fifo_write_n+0x50>
    buf8 = buf8 + (count - f->depth) * f->item_size;
100054ce:	1a6d      	subs	r5, r5, r1
100054d0:	4355      	muls	r5, r2
    f->wr_idx = r;
100054d2:	4688      	mov	r8, r1
    buf8 = buf8 + (count - f->depth) * f->item_size;
100054d4:	197f      	adds	r7, r7, r5
    f->wr_idx = r;
100054d6:	81e0      	strh	r0, [r4, #14]
100054d8:	000d      	movs	r5, r1
100054da:	e7cb      	b.n	10005474 <tu_fifo_write_n+0x50>
  if ( count == 0 ) return 0;
100054dc:	2300      	movs	r3, #0
100054de:	4698      	mov	r8, r3
100054e0:	e7ec      	b.n	100054bc <tu_fifo_write_n+0x98>
    p += offset;
100054e2:	4446      	add	r6, r8
100054e4:	b2b6      	uxth	r6, r6
100054e6:	e7e3      	b.n	100054b0 <tu_fifo_write_n+0x8c>
    uint16_t nLin = f->depth - wRel;
100054e8:	1ac9      	subs	r1, r1, r3
    memcpy(f->buffer + (wRel * f->item_size), data, nLin*f->item_size);
100054ea:	b289      	uxth	r1, r1
100054ec:	4689      	mov	r9, r1
100054ee:	4353      	muls	r3, r2
100054f0:	6821      	ldr	r1, [r4, #0]
100054f2:	18c8      	adds	r0, r1, r3
100054f4:	464b      	mov	r3, r9
100054f6:	0039      	movs	r1, r7
100054f8:	435a      	muls	r2, r3
100054fa:	f7fb fdf9 	bl	100010f0 <__wrap___aeabi_memcpy>
    memcpy(f->buffer, data + nLin*f->item_size, (n - nLin) * f->item_size);
100054fe:	464b      	mov	r3, r9
10005500:	88e1      	ldrh	r1, [r4, #6]
10005502:	1aea      	subs	r2, r5, r3
10005504:	434a      	muls	r2, r1
10005506:	4359      	muls	r1, r3
10005508:	6820      	ldr	r0, [r4, #0]
1000550a:	1879      	adds	r1, r7, r1
1000550c:	f7fb fdf0 	bl	100010f0 <__wrap___aeabi_memcpy>
10005510:	e7c6      	b.n	100054a0 <tu_fifo_write_n+0x7c>
10005512:	1c2a      	adds	r2, r5, #0
10005514:	b293      	uxth	r3, r2
10005516:	4698      	mov	r8, r3
  if(wRel + n <= f->depth)  // Linear mode only
10005518:	001d      	movs	r5, r3
    buf8 = buf8 + (count - f->depth) * f->item_size;
1000551a:	88e2      	ldrh	r2, [r4, #6]
1000551c:	e7aa      	b.n	10005474 <tu_fifo_write_n+0x50>
1000551e:	46c0      	nop			; (mov r8, r8)

10005520 <tu_fifo_clear>:
    @param[in]  f
                Pointer to the FIFO buffer to manipulate
 */
/******************************************************************************/
bool tu_fifo_clear(tu_fifo_t *f)
{
10005520:	b510      	push	{r4, lr}
10005522:	0004      	movs	r4, r0
  if (f->mutex)
10005524:	6940      	ldr	r0, [r0, #20]
10005526:	2800      	cmp	r0, #0
10005528:	d00d      	beq.n	10005546 <tu_fifo_clear+0x26>
    return mutex_enter_timeout_ms(mutex_hdl, msec);
1000552a:	2101      	movs	r1, #1
1000552c:	4249      	negs	r1, r1
1000552e:	f00a ff0f 	bl	10010350 <__mutex_enter_timeout_ms_veneer>
  tu_fifo_lock(f);
  f->rd_idx = f->wr_idx = 0;
10005532:	2300      	movs	r3, #0
  if (f->mutex)
10005534:	6960      	ldr	r0, [r4, #20]
  f->rd_idx = f->wr_idx = 0;
10005536:	81e3      	strh	r3, [r4, #14]
10005538:	8223      	strh	r3, [r4, #16]
  if (f->mutex)
1000553a:	2800      	cmp	r0, #0
1000553c:	d001      	beq.n	10005542 <tu_fifo_clear+0x22>
    mutex_exit(mutex_hdl);
1000553e:	f00a fee7 	bl	10010310 <__mutex_exit_veneer>
  tu_fifo_unlock(f);

  return true;
}
10005542:	2001      	movs	r0, #1
10005544:	bd10      	pop	{r4, pc}
  f->rd_idx = f->wr_idx = 0;
10005546:	81e0      	strh	r0, [r4, #14]
10005548:	8220      	strh	r0, [r4, #16]
  return true;
1000554a:	e7fa      	b.n	10005542 <tu_fifo_clear+0x22>

1000554c <tud_mounted>:
  return (tusb_speed_t) _usbd_dev.speed;
}

bool tud_mounted(void)
{
  return _usbd_dev.cfg_num ? 1 : 0;
1000554c:	4b02      	ldr	r3, [pc, #8]	; (10005558 <tud_mounted+0xc>)
1000554e:	7858      	ldrb	r0, [r3, #1]
10005550:	1e43      	subs	r3, r0, #1
10005552:	4198      	sbcs	r0, r3
10005554:	b2c0      	uxtb	r0, r0
}
10005556:	4770      	bx	lr
10005558:	20011e28 	.word	0x20011e28

1000555c <tud_suspended>:

bool tud_suspended(void)
{
  return _usbd_dev.suspended;
1000555c:	4b02      	ldr	r3, [pc, #8]	; (10005568 <tud_suspended+0xc>)
1000555e:	7818      	ldrb	r0, [r3, #0]
10005560:	0740      	lsls	r0, r0, #29
10005562:	0fc0      	lsrs	r0, r0, #31
}
10005564:	4770      	bx	lr
10005566:	46c0      	nop			; (mov r8, r8)
10005568:	20011e28 	.word	0x20011e28

1000556c <tud_init>:

//--------------------------------------------------------------------+
// USBD Task
//--------------------------------------------------------------------+
bool tud_init (void)
{
1000556c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  TU_LOG2("USBD init\r\n");

  tu_varclr(&_usbd_dev);
1000556e:	2237      	movs	r2, #55	; 0x37
10005570:	2100      	movs	r1, #0
10005572:	4821      	ldr	r0, [pc, #132]	; (100055f8 <tud_init+0x8c>)
10005574:	f7fb fdb6 	bl	100010e4 <__wrap_memset>
    mutex_init(mdef);
10005578:	4c20      	ldr	r4, [pc, #128]	; (100055fc <tud_init+0x90>)
1000557a:	0020      	movs	r0, r4
1000557c:	f7fc fbb6 	bl	10001cec <mutex_init>

#if CFG_TUSB_OS != OPT_OS_NONE
  // Init device mutex
  _usbd_mutex = osal_mutex_create(&_ubsd_mutexdef);
10005580:	4b1f      	ldr	r3, [pc, #124]	; (10005600 <tud_init+0x94>)
10005582:	601c      	str	r4, [r3, #0]
    critical_section_exit(&qhdl->critsec);
}

static inline osal_queue_t osal_queue_create(osal_queue_def_t* qdef)
{
  critical_section_init(&qdef->critsec);
10005584:	4c1f      	ldr	r4, [pc, #124]	; (10005604 <tud_init+0x98>)
10005586:	0020      	movs	r0, r4
10005588:	3018      	adds	r0, #24
1000558a:	f7fc f881 	bl	10001690 <critical_section_init>
  tu_fifo_clear(&qdef->ff);
1000558e:	0020      	movs	r0, r4
10005590:	f7ff ffc6 	bl	10005520 <tu_fifo_clear>
  TU_ASSERT(_usbd_mutex);
#endif

  // Init device queue & task
  _usbd_q = osal_queue_create(&_usbd_qdef);
10005594:	4b1c      	ldr	r3, [pc, #112]	; (10005608 <tud_init+0x9c>)
  TU_ASSERT(_usbd_q);

  // Get application driver if available
  if ( usbd_app_driver_get_cb )
10005596:	4e1d      	ldr	r6, [pc, #116]	; (1000560c <tud_init+0xa0>)
  {
    _app_driver = usbd_app_driver_get_cb(&_app_driver_count);
10005598:	4d1d      	ldr	r5, [pc, #116]	; (10005610 <tud_init+0xa4>)
  _usbd_q = osal_queue_create(&_usbd_qdef);
1000559a:	601c      	str	r4, [r3, #0]
  if ( usbd_app_driver_get_cb )
1000559c:	2e00      	cmp	r6, #0
1000559e:	d004      	beq.n	100055aa <tud_init+0x3e>
    _app_driver = usbd_app_driver_get_cb(&_app_driver_count);
100055a0:	0028      	movs	r0, r5
100055a2:	e000      	b.n	100055a6 <tud_init+0x3a>
100055a4:	bf00      	nop
100055a6:	4b1b      	ldr	r3, [pc, #108]	; (10005614 <tud_init+0xa8>)
100055a8:	6018      	str	r0, [r3, #0]
  }

  // Init class drivers
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
100055aa:	2400      	movs	r4, #0
100055ac:	782b      	ldrb	r3, [r5, #0]
100055ae:	2e00      	cmp	r6, #0
100055b0:	d019      	beq.n	100055e6 <tud_init+0x7a>
100055b2:	4e19      	ldr	r6, [pc, #100]	; (10005618 <tud_init+0xac>)
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
100055b4:	4f17      	ldr	r7, [pc, #92]	; (10005614 <tud_init+0xa8>)
100055b6:	429c      	cmp	r4, r3
100055b8:	d30f      	bcc.n	100055da <tud_init+0x6e>
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
100055ba:	d119      	bne.n	100055f0 <tud_init+0x84>
100055bc:	0033      	movs	r3, r6
  {
    usbd_class_driver_t const * driver = get_driver(i);
    TU_LOG2("%s init\r\n", driver->name);
    driver->init();
100055be:	4798      	blx	r3
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
100055c0:	3401      	adds	r4, #1
100055c2:	782b      	ldrb	r3, [r5, #0]
100055c4:	b2e4      	uxtb	r4, r4
100055c6:	42a3      	cmp	r3, r4
100055c8:	d2f5      	bcs.n	100055b6 <tud_init+0x4a>
  }

  // Init device controller driver
  dcd_init(TUD_OPT_RHPORT);
100055ca:	2000      	movs	r0, #0
100055cc:	f000 ff72 	bl	100064b4 <dcd_init>
  dcd_int_enable(TUD_OPT_RHPORT);
100055d0:	2000      	movs	r0, #0
100055d2:	f000 ff49 	bl	10006468 <dcd_int_enable>

  return true;
}
100055d6:	2001      	movs	r0, #1
100055d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    driver->init();
100055da:	00e3      	lsls	r3, r4, #3
100055dc:	683a      	ldr	r2, [r7, #0]
100055de:	1b1b      	subs	r3, r3, r4
100055e0:	009b      	lsls	r3, r3, #2
100055e2:	589b      	ldr	r3, [r3, r2]
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
100055e4:	e7eb      	b.n	100055be <tud_init+0x52>
    driver->init();
100055e6:	f7ff fbef 	bl	10004dc8 <cdcd_init>
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
100055ea:	782b      	ldrb	r3, [r5, #0]
100055ec:	2b00      	cmp	r3, #0
100055ee:	d0ec      	beq.n	100055ca <tud_init+0x5e>
    driver->init();
100055f0:	2300      	movs	r3, #0
100055f2:	681b      	ldr	r3, [r3, #0]
100055f4:	deff      	udf	#255	; 0xff
100055f6:	46c0      	nop			; (mov r8, r8)
100055f8:	20011e28 	.word	0x20011e28
100055fc:	20011de0 	.word	0x20011de0
10005600:	20011e60 	.word	0x20011e60
10005604:	20002730 	.word	0x20002730
10005608:	20011e64 	.word	0x20011e64
1000560c:	00000000 	.word	0x00000000
10005610:	20012771 	.word	0x20012771
10005614:	20011af8 	.word	0x20011af8
10005618:	10004dc9 	.word	0x10004dc9

1000561c <tud_task>:
      }
    }
    @endcode
 */
void tud_task (void)
{
1000561c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000561e:	46de      	mov	lr, fp
10005620:	4657      	mov	r7, sl
10005622:	464e      	mov	r6, r9
10005624:	4645      	mov	r5, r8
10005626:	b5e0      	push	{r5, r6, r7, lr}
10005628:	b08b      	sub	sp, #44	; 0x2c
  // Skip if stack is not initialized
  if ( !tusb_inited() ) return;
1000562a:	f001 fa05 	bl	10006a38 <tusb_inited>
1000562e:	2800      	cmp	r0, #0
10005630:	d100      	bne.n	10005634 <tud_task+0x18>
10005632:	e123      	b.n	1000587c <tud_task+0x260>
10005634:	4bb3      	ldr	r3, [pc, #716]	; (10005904 <tud_task+0x2e8>)
10005636:	af07      	add	r7, sp, #28
10005638:	469a      	mov	sl, r3
#if CFG_TUSB_DEBUG >= 2
    if (event.event_id == DCD_EVENT_SETUP_RECEIVED) TU_LOG2("\r\n"); // extra line for setup
    TU_LOG2("USBD %s ", event.event_id < DCD_EVENT_COUNT ? _usbd_event_str[event.event_id] : "CORRUPTED");
#endif

    switch ( event.event_id )
1000563a:	4bb3      	ldr	r3, [pc, #716]	; (10005908 <tud_task+0x2ec>)
1000563c:	469b      	mov	fp, r3
    if ( !osal_queue_receive(_usbd_q, &event) ) return;
1000563e:	4653      	mov	r3, sl
10005640:	681d      	ldr	r5, [r3, #0]
 * method will block until it is released.
 *
 * \param critsec Pointer to critical_section structure
 */
static inline void critical_section_enter_blocking(critical_section_t *critsec) {
    critsec->save = spin_lock_blocking(critsec->core.spin_lock);
10005642:	69aa      	ldr	r2, [r5, #24]
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
10005644:	f3ef 8110 	mrs	r1, PRIMASK
    __asm volatile ("cpsid i");
10005648:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
1000564a:	6813      	ldr	r3, [r2, #0]
1000564c:	2b00      	cmp	r3, #0
1000564e:	d0fc      	beq.n	1000564a <tud_task+0x2e>
    __asm volatile ("dmb");
10005650:	f3bf 8f5f 	dmb	sy
10005654:	61e9      	str	r1, [r5, #28]
  //  however osal_queue_recieve may be. therefore my assumption is that
  //  the fifo mutex is not populated for queues used from an IRQ context
  assert(!qhdl->ff.mutex);

  _osal_q_lock(qhdl);
  bool success = tu_fifo_read(&qhdl->ff, data);
10005656:	0028      	movs	r0, r5
10005658:	0039      	movs	r1, r7
1000565a:	f7ff fdcf 	bl	100051fc <tu_fifo_read>
 *  \ingroup critical_section
 *
 * \param critsec Pointer to critical_section structure
 */
static inline void critical_section_exit(critical_section_t *critsec) {
    spin_unlock(critsec->core.spin_lock, critsec->save);
1000565e:	69aa      	ldr	r2, [r5, #24]
10005660:	0004      	movs	r4, r0
10005662:	69eb      	ldr	r3, [r5, #28]
10005664:	f3bf 8f5f 	dmb	sy
    *lock = 0;
10005668:	2100      	movs	r1, #0
1000566a:	6011      	str	r1, [r2, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
1000566c:	f383 8810 	msr	PRIMASK, r3
10005670:	2800      	cmp	r0, #0
10005672:	d100      	bne.n	10005676 <tud_task+0x5a>
10005674:	e102      	b.n	1000587c <tud_task+0x260>
    switch ( event.event_id )
10005676:	787b      	ldrb	r3, [r7, #1]
10005678:	2b08      	cmp	r3, #8
1000567a:	d8e0      	bhi.n	1000563e <tud_task+0x22>
1000567c:	465a      	mov	r2, fp
1000567e:	009b      	lsls	r3, r3, #2
10005680:	58d3      	ldr	r3, [r2, r3]
10005682:	469f      	mov	pc, r3
        }
      break;

      case USBD_EVENT_FUNC_CALL:
        TU_LOG2("\r\n");
        if ( event.func_call.func ) event.func_call.func(event.func_call.param);
10005684:	687b      	ldr	r3, [r7, #4]
10005686:	2b00      	cmp	r3, #0
10005688:	d0d9      	beq.n	1000563e <tud_task+0x22>
1000568a:	68b8      	ldr	r0, [r7, #8]
1000568c:	4798      	blx	r3
  {
1000568e:	e7d6      	b.n	1000563e <tud_task+0x22>
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
10005690:	227f      	movs	r2, #127	; 0x7f
        uint8_t const ep_addr = event.xfer_complete.ep_addr;
10005692:	7939      	ldrb	r1, [r7, #4]
        _usbd_dev.ep_status[epnum][ep_dir].busy = false;
10005694:	4b9d      	ldr	r3, [pc, #628]	; (1000590c <tud_task+0x2f0>)
10005696:	400a      	ands	r2, r1
10005698:	0054      	lsls	r4, r2, #1
1000569a:	09c8      	lsrs	r0, r1, #7
1000569c:	191b      	adds	r3, r3, r4
1000569e:	181b      	adds	r3, r3, r0
100056a0:	0018      	movs	r0, r3
100056a2:	2501      	movs	r5, #1
100056a4:	3020      	adds	r0, #32
100056a6:	7944      	ldrb	r4, [r0, #5]
100056a8:	43ac      	bics	r4, r5
100056aa:	7144      	strb	r4, [r0, #5]
        _usbd_dev.ep_status[epnum][ep_dir].claimed = 0;
100056ac:	7944      	ldrb	r4, [r0, #5]
100056ae:	3503      	adds	r5, #3
100056b0:	43ac      	bics	r4, r5
100056b2:	7144      	strb	r4, [r0, #5]
        if ( 0 == epnum )
100056b4:	2a00      	cmp	r2, #0
100056b6:	d100      	bne.n	100056ba <tud_task+0x9e>
100056b8:	e0e7      	b.n	1000588a <tud_task+0x26e>
  if ( usbd_app_driver_get_cb )
100056ba:	4a95      	ldr	r2, [pc, #596]	; (10005910 <tud_task+0x2f4>)
          usbd_class_driver_t const * driver = get_driver( _usbd_dev.ep2drv[epnum][ep_dir] );
100056bc:	7cdb      	ldrb	r3, [r3, #19]
  if ( usbd_app_driver_get_cb )
100056be:	2a00      	cmp	r2, #0
100056c0:	d006      	beq.n	100056d0 <tud_task+0xb4>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
100056c2:	4a94      	ldr	r2, [pc, #592]	; (10005914 <tud_task+0x2f8>)
100056c4:	7812      	ldrb	r2, [r2, #0]
100056c6:	4293      	cmp	r3, r2
100056c8:	d200      	bcs.n	100056cc <tud_task+0xb0>
100056ca:	e16f      	b.n	100059ac <tud_task+0x390>
    drvid -= _app_driver_count;
100056cc:	1a9b      	subs	r3, r3, r2
100056ce:	b2db      	uxtb	r3, r3
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
100056d0:	2b00      	cmp	r3, #0
100056d2:	d000      	beq.n	100056d6 <tud_task+0xba>
100056d4:	e0d2      	b.n	1000587c <tud_task+0x260>
100056d6:	4c90      	ldr	r4, [pc, #576]	; (10005918 <tud_task+0x2fc>)
          driver->xfer_cb(event.rhport, ep_addr, event.xfer_complete.result, event.xfer_complete.len);
100056d8:	797a      	ldrb	r2, [r7, #5]
100056da:	7838      	ldrb	r0, [r7, #0]
100056dc:	68bb      	ldr	r3, [r7, #8]
100056de:	47a0      	blx	r4
100056e0:	e7ad      	b.n	1000563e <tud_task+0x22>
        _usbd_dev.connected = 1;
100056e2:	4b8a      	ldr	r3, [pc, #552]	; (1000590c <tud_task+0x2f0>)
100056e4:	2601      	movs	r6, #1
100056e6:	4698      	mov	r8, r3
100056e8:	4642      	mov	r2, r8
100056ea:	781b      	ldrb	r3, [r3, #0]

// This handles the actual request and its response.
// return false will cause its caller to stall control endpoint
static bool process_control_request(uint8_t rhport, tusb_control_request_t const * p_request)
{
  usbd_control_set_complete_callback(NULL);
100056ec:	2000      	movs	r0, #0
        _usbd_dev.connected = 1;
100056ee:	4333      	orrs	r3, r6
100056f0:	7013      	strb	r3, [r2, #0]
        if ( !process_control_request(event.rhport, &event.setup_received) )
100056f2:	783b      	ldrb	r3, [r7, #0]
100056f4:	4699      	mov	r9, r3
  usbd_control_set_complete_callback(NULL);
100056f6:	f000 fd93 	bl	10006220 <usbd_control_set_complete_callback>

  TU_ASSERT(p_request->bmRequestType_bit.type < TUSB_REQ_TYPE_INVALID);
100056fa:	2360      	movs	r3, #96	; 0x60
100056fc:	793d      	ldrb	r5, [r7, #4]
100056fe:	402b      	ands	r3, r5
10005700:	2b60      	cmp	r3, #96	; 0x60
10005702:	d00d      	beq.n	10005720 <tud_task+0x104>

  // Vendor request
  if ( p_request->bmRequestType_bit.type == TUSB_REQ_TYPE_VENDOR )
10005704:	2b40      	cmp	r3, #64	; 0x40
10005706:	d100      	bne.n	1000570a <tud_task+0xee>
10005708:	e0db      	b.n	100058c2 <tud_task+0x2a6>
    TU_LOG2("  %s", _tusb_std_request_str[p_request->bRequest]);
    if (TUSB_REQ_GET_DESCRIPTOR != p_request->bRequest) TU_LOG2("\r\n");
  }
#endif

  switch ( p_request->bmRequestType_bit.recipient )
1000570a:	06ed      	lsls	r5, r5, #27
1000570c:	0eed      	lsrs	r5, r5, #27
1000570e:	2d01      	cmp	r5, #1
10005710:	d100      	bne.n	10005714 <tud_task+0xf8>
10005712:	e156      	b.n	100059c2 <tud_task+0x3a6>
10005714:	2d02      	cmp	r5, #2
10005716:	d100      	bne.n	1000571a <tud_task+0xfe>
10005718:	e112      	b.n	10005940 <tud_task+0x324>
1000571a:	2d00      	cmp	r5, #0
1000571c:	d100      	bne.n	10005720 <tud_task+0x104>
1000571e:	e0e2      	b.n	100058e6 <tud_task+0x2ca>
          dcd_edpt_stall(event.rhport, 0);
10005720:	7838      	ldrb	r0, [r7, #0]
10005722:	2100      	movs	r1, #0
10005724:	f000 fff0 	bl	10006708 <dcd_edpt_stall>
          dcd_edpt_stall(event.rhport, 0 | TUSB_DIR_IN_MASK);
10005728:	2180      	movs	r1, #128	; 0x80
1000572a:	7838      	ldrb	r0, [r7, #0]
1000572c:	f000 ffec 	bl	10006708 <dcd_edpt_stall>
10005730:	e785      	b.n	1000563e <tud_task+0x22>
        if (tud_resume_cb) tud_resume_cb();
10005732:	4b7a      	ldr	r3, [pc, #488]	; (1000591c <tud_task+0x300>)
10005734:	2b00      	cmp	r3, #0
10005736:	d082      	beq.n	1000563e <tud_task+0x22>
10005738:	e000      	b.n	1000573c <tud_task+0x120>
1000573a:	bf00      	nop
1000573c:	e77f      	b.n	1000563e <tud_task+0x22>
        if (tud_suspend_cb) tud_suspend_cb(_usbd_dev.remote_wakeup_en);
1000573e:	4b78      	ldr	r3, [pc, #480]	; (10005920 <tud_task+0x304>)
10005740:	2b00      	cmp	r3, #0
10005742:	d100      	bne.n	10005746 <tud_task+0x12a>
10005744:	e77b      	b.n	1000563e <tud_task+0x22>
10005746:	4b71      	ldr	r3, [pc, #452]	; (1000590c <tud_task+0x2f0>)
10005748:	7818      	ldrb	r0, [r3, #0]
1000574a:	0700      	lsls	r0, r0, #28
1000574c:	0fc0      	lsrs	r0, r0, #31
1000574e:	e000      	b.n	10005752 <tud_task+0x136>
10005750:	bf00      	nop
10005752:	e774      	b.n	1000563e <tud_task+0x22>
        for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
10005754:	4d6f      	ldr	r5, [pc, #444]	; (10005914 <tud_task+0x2f8>)
10005756:	4a6e      	ldr	r2, [pc, #440]	; (10005910 <tud_task+0x2f4>)
10005758:	2400      	movs	r4, #0
1000575a:	782b      	ldrb	r3, [r5, #0]
1000575c:	2a00      	cmp	r2, #0
1000575e:	d100      	bne.n	10005762 <tud_task+0x146>
10005760:	e099      	b.n	10005896 <tud_task+0x27a>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
10005762:	4e70      	ldr	r6, [pc, #448]	; (10005924 <tud_task+0x308>)
10005764:	42a3      	cmp	r3, r4
10005766:	d809      	bhi.n	1000577c <tud_task+0x160>
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
10005768:	42a3      	cmp	r3, r4
1000576a:	d000      	beq.n	1000576e <tud_task+0x152>
1000576c:	e096      	b.n	1000589c <tud_task+0x280>
        for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
1000576e:	3401      	adds	r4, #1
10005770:	b2e4      	uxtb	r4, r4
10005772:	429c      	cmp	r4, r3
10005774:	d900      	bls.n	10005778 <tud_task+0x15c>
10005776:	e762      	b.n	1000563e <tud_task+0x22>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
10005778:	42a3      	cmp	r3, r4
1000577a:	d9f5      	bls.n	10005768 <tud_task+0x14c>
          if ( driver->sof ) driver->sof(event.rhport);
1000577c:	6831      	ldr	r1, [r6, #0]
1000577e:	00e2      	lsls	r2, r4, #3
10005780:	468c      	mov	ip, r1
10005782:	1b12      	subs	r2, r2, r4
10005784:	0092      	lsls	r2, r2, #2
10005786:	4462      	add	r2, ip
10005788:	6992      	ldr	r2, [r2, #24]
1000578a:	2a00      	cmp	r2, #0
1000578c:	d0ef      	beq.n	1000576e <tud_task+0x152>
1000578e:	7838      	ldrb	r0, [r7, #0]
10005790:	4790      	blx	r2
        for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
10005792:	3401      	adds	r4, #1
10005794:	782b      	ldrb	r3, [r5, #0]
10005796:	b2e4      	uxtb	r4, r4
10005798:	429c      	cmp	r4, r3
1000579a:	d9e3      	bls.n	10005764 <tud_task+0x148>
1000579c:	e74f      	b.n	1000563e <tud_task+0x22>
  tu_varclr(&_usbd_dev);
1000579e:	2237      	movs	r2, #55	; 0x37
100057a0:	2100      	movs	r1, #0
100057a2:	485a      	ldr	r0, [pc, #360]	; (1000590c <tud_task+0x2f0>)
        usbd_reset(event.rhport);
100057a4:	783e      	ldrb	r6, [r7, #0]
  tu_varclr(&_usbd_dev);
100057a6:	f7fb fc9d 	bl	100010e4 <__wrap_memset>
  memset(_usbd_dev.itf2drv, DRVID_INVALID, sizeof(_usbd_dev.itf2drv)); // invalid mapping
100057aa:	2210      	movs	r2, #16
100057ac:	21ff      	movs	r1, #255	; 0xff
100057ae:	485e      	ldr	r0, [pc, #376]	; (10005928 <tud_task+0x30c>)
100057b0:	f7fb fc98 	bl	100010e4 <__wrap_memset>
  memset(_usbd_dev.ep2drv , DRVID_INVALID, sizeof(_usbd_dev.ep2drv )); // invalid mapping
100057b4:	4855      	ldr	r0, [pc, #340]	; (1000590c <tud_task+0x2f0>)
100057b6:	2212      	movs	r2, #18
100057b8:	21ff      	movs	r1, #255	; 0xff
100057ba:	3013      	adds	r0, #19
100057bc:	f7fb fc92 	bl	100010e4 <__wrap_memset>
  usbd_control_reset();
100057c0:	f000 fd24 	bl	1000620c <usbd_control_reset>
  for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
100057c4:	4d53      	ldr	r5, [pc, #332]	; (10005914 <tud_task+0x2f8>)
100057c6:	4a52      	ldr	r2, [pc, #328]	; (10005910 <tud_task+0x2f4>)
100057c8:	2400      	movs	r4, #0
100057ca:	782b      	ldrb	r3, [r5, #0]
100057cc:	2a00      	cmp	r2, #0
100057ce:	d100      	bne.n	100057d2 <tud_task+0x1b6>
100057d0:	e070      	b.n	100058b4 <tud_task+0x298>
100057d2:	4a56      	ldr	r2, [pc, #344]	; (1000592c <tud_task+0x310>)
100057d4:	4690      	mov	r8, r2
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
100057d6:	4a53      	ldr	r2, [pc, #332]	; (10005924 <tud_task+0x308>)
100057d8:	4691      	mov	r9, r2
100057da:	42a3      	cmp	r3, r4
100057dc:	d845      	bhi.n	1000586a <tud_task+0x24e>
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
100057de:	d166      	bne.n	100058ae <tud_task+0x292>
100057e0:	4643      	mov	r3, r8
    get_driver(i)->reset(rhport);
100057e2:	0030      	movs	r0, r6
100057e4:	4798      	blx	r3
  for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
100057e6:	3401      	adds	r4, #1
100057e8:	782b      	ldrb	r3, [r5, #0]
100057ea:	b2e4      	uxtb	r4, r4
100057ec:	42a3      	cmp	r3, r4
100057ee:	d2f4      	bcs.n	100057da <tud_task+0x1be>
        if (tud_umount_cb) tud_umount_cb();
100057f0:	4b4f      	ldr	r3, [pc, #316]	; (10005930 <tud_task+0x314>)
100057f2:	2b00      	cmp	r3, #0
100057f4:	d100      	bne.n	100057f8 <tud_task+0x1dc>
100057f6:	e722      	b.n	1000563e <tud_task+0x22>
100057f8:	e000      	b.n	100057fc <tud_task+0x1e0>
100057fa:	bf00      	nop
100057fc:	e71f      	b.n	1000563e <tud_task+0x22>
  tu_varclr(&_usbd_dev);
100057fe:	4b43      	ldr	r3, [pc, #268]	; (1000590c <tud_task+0x2f0>)
10005800:	2237      	movs	r2, #55	; 0x37
10005802:	4698      	mov	r8, r3
10005804:	2100      	movs	r1, #0
10005806:	0018      	movs	r0, r3
        usbd_reset(event.rhport);
10005808:	783e      	ldrb	r6, [r7, #0]
  tu_varclr(&_usbd_dev);
1000580a:	f7fb fc6b 	bl	100010e4 <__wrap_memset>
  memset(_usbd_dev.itf2drv, DRVID_INVALID, sizeof(_usbd_dev.itf2drv)); // invalid mapping
1000580e:	4643      	mov	r3, r8
10005810:	2210      	movs	r2, #16
10005812:	1cd8      	adds	r0, r3, #3
10005814:	21ff      	movs	r1, #255	; 0xff
10005816:	f7fb fc65 	bl	100010e4 <__wrap_memset>
  memset(_usbd_dev.ep2drv , DRVID_INVALID, sizeof(_usbd_dev.ep2drv )); // invalid mapping
1000581a:	4640      	mov	r0, r8
1000581c:	2212      	movs	r2, #18
1000581e:	21ff      	movs	r1, #255	; 0xff
10005820:	3013      	adds	r0, #19
10005822:	f7fb fc5f 	bl	100010e4 <__wrap_memset>
  usbd_control_reset();
10005826:	f000 fcf1 	bl	1000620c <usbd_control_reset>
  for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
1000582a:	4d3a      	ldr	r5, [pc, #232]	; (10005914 <tud_task+0x2f8>)
1000582c:	4a38      	ldr	r2, [pc, #224]	; (10005910 <tud_task+0x2f4>)
1000582e:	2400      	movs	r4, #0
10005830:	782b      	ldrb	r3, [r5, #0]
10005832:	2a00      	cmp	r2, #0
10005834:	d035      	beq.n	100058a2 <tud_task+0x286>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
10005836:	4a3b      	ldr	r2, [pc, #236]	; (10005924 <tud_task+0x308>)
10005838:	4691      	mov	r9, r2
1000583a:	429c      	cmp	r4, r3
1000583c:	d30c      	bcc.n	10005858 <tud_task+0x23c>
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
1000583e:	d136      	bne.n	100058ae <tud_task+0x292>
10005840:	4b3a      	ldr	r3, [pc, #232]	; (1000592c <tud_task+0x310>)
    get_driver(i)->reset(rhport);
10005842:	0030      	movs	r0, r6
10005844:	4798      	blx	r3
  for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
10005846:	3401      	adds	r4, #1
10005848:	782b      	ldrb	r3, [r5, #0]
1000584a:	b2e4      	uxtb	r4, r4
1000584c:	42a3      	cmp	r3, r4
1000584e:	d2f4      	bcs.n	1000583a <tud_task+0x21e>
        _usbd_dev.speed = event.bus_reset.speed;
10005850:	4642      	mov	r2, r8
10005852:	793b      	ldrb	r3, [r7, #4]
10005854:	7093      	strb	r3, [r2, #2]
      break;
10005856:	e6f2      	b.n	1000563e <tud_task+0x22>
    get_driver(i)->reset(rhport);
10005858:	464a      	mov	r2, r9
1000585a:	6812      	ldr	r2, [r2, #0]
1000585c:	00e3      	lsls	r3, r4, #3
1000585e:	4694      	mov	ip, r2
10005860:	1b1b      	subs	r3, r3, r4
10005862:	009b      	lsls	r3, r3, #2
10005864:	4463      	add	r3, ip
10005866:	685b      	ldr	r3, [r3, #4]
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
10005868:	e7eb      	b.n	10005842 <tud_task+0x226>
    get_driver(i)->reset(rhport);
1000586a:	464a      	mov	r2, r9
1000586c:	6812      	ldr	r2, [r2, #0]
1000586e:	00e3      	lsls	r3, r4, #3
10005870:	4694      	mov	ip, r2
10005872:	1b1b      	subs	r3, r3, r4
10005874:	009b      	lsls	r3, r3, #2
10005876:	4463      	add	r3, ip
10005878:	685b      	ldr	r3, [r3, #4]
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
1000587a:	e7b2      	b.n	100057e2 <tud_task+0x1c6>
}
1000587c:	b00b      	add	sp, #44	; 0x2c
1000587e:	bcf0      	pop	{r4, r5, r6, r7}
10005880:	46bb      	mov	fp, r7
10005882:	46b2      	mov	sl, r6
10005884:	46a9      	mov	r9, r5
10005886:	46a0      	mov	r8, r4
10005888:	bdf0      	pop	{r4, r5, r6, r7, pc}
          usbd_control_xfer_cb(event.rhport, ep_addr, (xfer_result_t)event.xfer_complete.result, event.xfer_complete.len);
1000588a:	797a      	ldrb	r2, [r7, #5]
1000588c:	7838      	ldrb	r0, [r7, #0]
1000588e:	68bb      	ldr	r3, [r7, #8]
10005890:	f000 fcda 	bl	10006248 <usbd_control_xfer_cb>
10005894:	e6d3      	b.n	1000563e <tud_task+0x22>
        for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
10005896:	2b00      	cmp	r3, #0
10005898:	d100      	bne.n	1000589c <tud_task+0x280>
1000589a:	e6d0      	b.n	1000563e <tud_task+0x22>
          if ( driver->sof ) driver->sof(event.rhport);
1000589c:	2300      	movs	r3, #0
1000589e:	699b      	ldr	r3, [r3, #24]
100058a0:	deff      	udf	#255	; 0xff
    get_driver(i)->reset(rhport);
100058a2:	0030      	movs	r0, r6
100058a4:	f7ff facc 	bl	10004e40 <cdcd_reset>
  for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
100058a8:	782b      	ldrb	r3, [r5, #0]
100058aa:	2b00      	cmp	r3, #0
100058ac:	d0d0      	beq.n	10005850 <tud_task+0x234>
    get_driver(i)->reset(rhport);
100058ae:	2300      	movs	r3, #0
100058b0:	685b      	ldr	r3, [r3, #4]
100058b2:	deff      	udf	#255	; 0xff
100058b4:	0030      	movs	r0, r6
100058b6:	f7ff fac3 	bl	10004e40 <cdcd_reset>
  for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
100058ba:	782b      	ldrb	r3, [r5, #0]
100058bc:	2b00      	cmp	r3, #0
100058be:	d097      	beq.n	100057f0 <tud_task+0x1d4>
100058c0:	e7f5      	b.n	100058ae <tud_task+0x292>
    TU_VERIFY(tud_vendor_control_request_cb);
100058c2:	4b1c      	ldr	r3, [pc, #112]	; (10005934 <tud_task+0x318>)
100058c4:	2b00      	cmp	r3, #0
100058c6:	d100      	bne.n	100058ca <tud_task+0x2ae>
100058c8:	e72a      	b.n	10005720 <tud_task+0x104>
    if (tud_vendor_control_complete_cb) usbd_control_set_complete_callback(tud_vendor_control_complete_cb);
100058ca:	481b      	ldr	r0, [pc, #108]	; (10005938 <tud_task+0x31c>)
100058cc:	2800      	cmp	r0, #0
100058ce:	d001      	beq.n	100058d4 <tud_task+0x2b8>
100058d0:	f000 fca6 	bl	10006220 <usbd_control_set_complete_callback>
    return tud_vendor_control_request_cb(rhport, p_request);
100058d4:	4648      	mov	r0, r9
100058d6:	a908      	add	r1, sp, #32
100058d8:	e000      	b.n	100058dc <tud_task+0x2c0>
100058da:	bf00      	nop
100058dc:	0004      	movs	r4, r0
        if ( !process_control_request(event.rhport, &event.setup_received) )
100058de:	2c00      	cmp	r4, #0
100058e0:	d000      	beq.n	100058e4 <tud_task+0x2c8>
100058e2:	e6ac      	b.n	1000563e <tud_task+0x22>
100058e4:	e71c      	b.n	10005720 <tud_task+0x104>
  {
    //------------- Device Requests e.g in enumeration -------------//
    case TUSB_REQ_RCPT_DEVICE:
      if ( TUSB_REQ_TYPE_CLASS == p_request->bmRequestType_bit.type )
100058e6:	2b20      	cmp	r3, #32
100058e8:	d100      	bne.n	100058ec <tud_task+0x2d0>
100058ea:	e09b      	b.n	10005a24 <tud_task+0x408>
        TU_VERIFY(driver);

        // forward to class driver: "non-STD request to Interface"
        return invoke_class_control(rhport, driver, p_request);
      }
      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type )
100058ec:	2b00      	cmp	r3, #0
100058ee:	d000      	beq.n	100058f2 <tud_task+0x2d6>
100058f0:	e716      	b.n	10005720 <tud_task+0x104>
        // Non standard request is not supported
        TU_BREAKPOINT();
        return false;
      }

      switch ( p_request->bRequest )
100058f2:	797b      	ldrb	r3, [r7, #5]
100058f4:	2b09      	cmp	r3, #9
100058f6:	d900      	bls.n	100058fa <tud_task+0x2de>
100058f8:	e712      	b.n	10005720 <tud_task+0x104>
100058fa:	4a10      	ldr	r2, [pc, #64]	; (1000593c <tud_task+0x320>)
100058fc:	009b      	lsls	r3, r3, #2
100058fe:	58d3      	ldr	r3, [r2, r3]
10005900:	469f      	mov	pc, r3
10005902:	46c0      	nop			; (mov r8, r8)
10005904:	20011e64 	.word	0x20011e64
10005908:	10010780 	.word	0x10010780
1000590c:	20011e28 	.word	0x20011e28
10005910:	00000000 	.word	0x00000000
10005914:	20012771 	.word	0x20012771
10005918:	10004ffd 	.word	0x10004ffd
	...
10005924:	20011af8 	.word	0x20011af8
10005928:	20011e2b 	.word	0x20011e2b
1000592c:	10004e41 	.word	0x10004e41
	...
1000593c:	100107a4 	.word	0x100107a4
10005940:	227f      	movs	r2, #127	; 0x7f
static inline uint8_t tu_u16_low (uint16_t u16) { return (uint8_t) (u16 & 0x00ff); }
10005942:	7a39      	ldrb	r1, [r7, #8]
10005944:	400a      	ands	r2, r1
10005946:	9202      	str	r2, [sp, #8]
    {
      uint8_t const ep_addr = tu_u16_low(p_request->wIndex);
      uint8_t const ep_num  = tu_edpt_number(ep_addr);
      uint8_t const ep_dir  = tu_edpt_dir(ep_addr);

      TU_ASSERT(ep_num < TU_ARRAY_SIZE(_usbd_dev.ep2drv) );
10005948:	2a08      	cmp	r2, #8
1000594a:	d900      	bls.n	1000594e <tud_task+0x332>
1000594c:	e6e8      	b.n	10005720 <tud_task+0x104>
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
1000594e:	09c8      	lsrs	r0, r1, #7
10005950:	9001      	str	r0, [sp, #4]

      bool ret = false;

      // Handle STD request to endpoint
      if ( TUSB_REQ_TYPE_STANDARD == p_request->bmRequestType_bit.type )
10005952:	2b00      	cmp	r3, #0
10005954:	d100      	bne.n	10005958 <tud_task+0x33c>
10005956:	e082      	b.n	10005a5e <tud_task+0x442>
      bool ret = false;
10005958:	2400      	movs	r4, #0
1000595a:	0053      	lsls	r3, r2, #1
1000595c:	9302      	str	r3, [sp, #8]
          // Unknown/Unsupported request
          default: TU_BREAKPOINT(); return false;
        }
      }

      usbd_class_driver_t const * driver = get_driver(_usbd_dev.ep2drv[ep_num][ep_dir]);
1000595e:	9a01      	ldr	r2, [sp, #4]
10005960:	9b02      	ldr	r3, [sp, #8]
10005962:	4694      	mov	ip, r2
10005964:	4443      	add	r3, r8
  if ( usbd_app_driver_get_cb )
10005966:	4ac9      	ldr	r2, [pc, #804]	; (10005c8c <tud_task+0x670>)
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.ep2drv[ep_num][ep_dir]);
10005968:	4463      	add	r3, ip
1000596a:	7cdb      	ldrb	r3, [r3, #19]
  if ( usbd_app_driver_get_cb )
1000596c:	2a00      	cmp	r2, #0
1000596e:	d006      	beq.n	1000597e <tud_task+0x362>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
10005970:	4ac7      	ldr	r2, [pc, #796]	; (10005c90 <tud_task+0x674>)
10005972:	7812      	ldrb	r2, [r2, #0]
10005974:	4293      	cmp	r3, r2
10005976:	d200      	bcs.n	1000597a <tud_task+0x35e>
10005978:	e100      	b.n	10005b7c <tud_task+0x560>
    drvid -= _app_driver_count;
1000597a:	1a9b      	subs	r3, r3, r2
1000597c:	b2db      	uxtb	r3, r3
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
1000597e:	2b00      	cmp	r3, #0
10005980:	d000      	beq.n	10005984 <tud_task+0x368>
10005982:	e0f2      	b.n	10005b6a <tud_task+0x54e>
10005984:	48c3      	ldr	r0, [pc, #780]	; (10005c94 <tud_task+0x678>)
10005986:	4dc4      	ldr	r5, [pc, #784]	; (10005c98 <tud_task+0x67c>)
  usbd_control_set_complete_callback(driver->control_complete);
10005988:	f000 fc4a 	bl	10006220 <usbd_control_set_complete_callback>
  return driver->control_request(rhport, request);
1000598c:	4648      	mov	r0, r9
1000598e:	68eb      	ldr	r3, [r5, #12]
10005990:	a908      	add	r1, sp, #32
10005992:	4798      	blx	r3
        // We will forward all request targeted endpoint to class drivers after
        // - For class-type requests: driver is fully responsible to reply to host
        // - For std-type requests  : driver init/re-init internal variable/buffer only, and
        //                            must not call tud_control_status(), driver's return value will have no effect.
        //                            EP state has already affected (stalled/cleared)
        if ( invoke_class_control(rhport, driver, p_request) ) ret = true;
10005994:	2800      	cmp	r0, #0
10005996:	d100      	bne.n	1000599a <tud_task+0x37e>
10005998:	e0e7      	b.n	10005b6a <tud_task+0x54e>
      }

      if ( TUSB_REQ_TYPE_STANDARD == p_request->bmRequestType_bit.type )
1000599a:	2260      	movs	r2, #96	; 0x60
1000599c:	793b      	ldrb	r3, [r7, #4]
1000599e:	421a      	tst	r2, r3
100059a0:	d000      	beq.n	100059a4 <tud_task+0x388>
100059a2:	e64c      	b.n	1000563e <tud_task+0x22>
      {
        // Set complete callback = NULL since it can also stall the request.
        usbd_control_set_complete_callback(NULL);
100059a4:	2000      	movs	r0, #0
100059a6:	f000 fc3b 	bl	10006220 <usbd_control_set_complete_callback>
100059aa:	e648      	b.n	1000563e <tud_task+0x22>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
100059ac:	00da      	lsls	r2, r3, #3
100059ae:	1ad3      	subs	r3, r2, r3
100059b0:	4aba      	ldr	r2, [pc, #744]	; (10005c9c <tud_task+0x680>)
100059b2:	009b      	lsls	r3, r3, #2
100059b4:	6812      	ldr	r2, [r2, #0]
100059b6:	18d3      	adds	r3, r2, r3
          TU_ASSERT(driver, );
100059b8:	2b00      	cmp	r3, #0
100059ba:	d100      	bne.n	100059be <tud_task+0x3a2>
100059bc:	e75e      	b.n	1000587c <tud_task+0x260>
          driver->xfer_cb(event.rhport, ep_addr, event.xfer_complete.result, event.xfer_complete.len);
100059be:	695c      	ldr	r4, [r3, #20]
100059c0:	e68a      	b.n	100056d8 <tud_task+0xbc>
100059c2:	7a3b      	ldrb	r3, [r7, #8]
      TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
100059c4:	2b0f      	cmp	r3, #15
100059c6:	d900      	bls.n	100059ca <tud_task+0x3ae>
100059c8:	e6aa      	b.n	10005720 <tud_task+0x104>
  if ( usbd_app_driver_get_cb )
100059ca:	4ab0      	ldr	r2, [pc, #704]	; (10005c8c <tud_task+0x670>)
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
100059cc:	4443      	add	r3, r8
100059ce:	78db      	ldrb	r3, [r3, #3]
  if ( usbd_app_driver_get_cb )
100059d0:	2a00      	cmp	r2, #0
100059d2:	d005      	beq.n	100059e0 <tud_task+0x3c4>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
100059d4:	4aae      	ldr	r2, [pc, #696]	; (10005c90 <tud_task+0x674>)
100059d6:	7812      	ldrb	r2, [r2, #0]
100059d8:	4293      	cmp	r3, r2
100059da:	d35e      	bcc.n	10005a9a <tud_task+0x47e>
    drvid -= _app_driver_count;
100059dc:	1a9b      	subs	r3, r3, r2
100059de:	b2db      	uxtb	r3, r3
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
100059e0:	2b00      	cmp	r3, #0
100059e2:	d000      	beq.n	100059e6 <tud_task+0x3ca>
100059e4:	e69c      	b.n	10005720 <tud_task+0x104>
100059e6:	48ab      	ldr	r0, [pc, #684]	; (10005c94 <tud_task+0x678>)
100059e8:	4cab      	ldr	r4, [pc, #684]	; (10005c98 <tud_task+0x67c>)
  usbd_control_set_complete_callback(driver->control_complete);
100059ea:	f000 fc19 	bl	10006220 <usbd_control_set_complete_callback>
  return driver->control_request(rhport, request);
100059ee:	4648      	mov	r0, r9
100059f0:	68e3      	ldr	r3, [r4, #12]
100059f2:	a908      	add	r1, sp, #32
100059f4:	4798      	blx	r3
      if ( !invoke_class_control(rhport, driver, p_request) )
100059f6:	2800      	cmp	r0, #0
100059f8:	d000      	beq.n	100059fc <tud_task+0x3e0>
100059fa:	e620      	b.n	1000563e <tud_task+0x22>
        TU_VERIFY( TUSB_REQ_TYPE_STANDARD == p_request->bmRequestType_bit.type &&
100059fc:	2260      	movs	r2, #96	; 0x60
100059fe:	0011      	movs	r1, r2
10005a00:	793b      	ldrb	r3, [r7, #4]
10005a02:	4019      	ands	r1, r3
10005a04:	421a      	tst	r2, r3
10005a06:	d000      	beq.n	10005a0a <tud_task+0x3ee>
10005a08:	e68a      	b.n	10005720 <tud_task+0x104>
10005a0a:	797b      	ldrb	r3, [r7, #5]
10005a0c:	2b0a      	cmp	r3, #10
10005a0e:	d000      	beq.n	10005a12 <tud_task+0x3f6>
10005a10:	e686      	b.n	10005720 <tud_task+0x104>
        uint8_t alternate = 0;
10005a12:	ab06      	add	r3, sp, #24
10005a14:	1c9a      	adds	r2, r3, #2
10005a16:	7011      	strb	r1, [r2, #0]
        tud_control_xfer(rhport, p_request, &alternate, 1);
10005a18:	2301      	movs	r3, #1
10005a1a:	4648      	mov	r0, r9
10005a1c:	a908      	add	r1, sp, #32
10005a1e:	f000 fb97 	bl	10006150 <tud_control_xfer>
10005a22:	e60c      	b.n	1000563e <tud_task+0x22>
10005a24:	7a3b      	ldrb	r3, [r7, #8]
        TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
10005a26:	2b0f      	cmp	r3, #15
10005a28:	d900      	bls.n	10005a2c <tud_task+0x410>
10005a2a:	e679      	b.n	10005720 <tud_task+0x104>
  if ( usbd_app_driver_get_cb )
10005a2c:	4a97      	ldr	r2, [pc, #604]	; (10005c8c <tud_task+0x670>)
        usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
10005a2e:	4443      	add	r3, r8
10005a30:	78db      	ldrb	r3, [r3, #3]
  if ( usbd_app_driver_get_cb )
10005a32:	2a00      	cmp	r2, #0
10005a34:	d006      	beq.n	10005a44 <tud_task+0x428>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
10005a36:	4a96      	ldr	r2, [pc, #600]	; (10005c90 <tud_task+0x674>)
10005a38:	7812      	ldrb	r2, [r2, #0]
10005a3a:	4293      	cmp	r3, r2
10005a3c:	d200      	bcs.n	10005a40 <tud_task+0x424>
10005a3e:	e0c7      	b.n	10005bd0 <tud_task+0x5b4>
    drvid -= _app_driver_count;
10005a40:	1a9b      	subs	r3, r3, r2
10005a42:	b2db      	uxtb	r3, r3
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
10005a44:	2b00      	cmp	r3, #0
10005a46:	d000      	beq.n	10005a4a <tud_task+0x42e>
10005a48:	e66a      	b.n	10005720 <tud_task+0x104>
10005a4a:	4892      	ldr	r0, [pc, #584]	; (10005c94 <tud_task+0x678>)
10005a4c:	4c92      	ldr	r4, [pc, #584]	; (10005c98 <tud_task+0x67c>)
  usbd_control_set_complete_callback(driver->control_complete);
10005a4e:	f000 fbe7 	bl	10006220 <usbd_control_set_complete_callback>
  return driver->control_request(rhport, request);
10005a52:	68e3      	ldr	r3, [r4, #12]
10005a54:	4648      	mov	r0, r9
10005a56:	a908      	add	r1, sp, #32
10005a58:	4798      	blx	r3
10005a5a:	0004      	movs	r4, r0
        return invoke_class_control(rhport, driver, p_request);
10005a5c:	e73f      	b.n	100058de <tud_task+0x2c2>
        switch ( p_request->bRequest )
10005a5e:	797b      	ldrb	r3, [r7, #5]
10005a60:	9303      	str	r3, [sp, #12]
10005a62:	2b01      	cmp	r3, #1
10005a64:	d100      	bne.n	10005a68 <tud_task+0x44c>
10005a66:	e09d      	b.n	10005ba4 <tud_task+0x588>
10005a68:	2b03      	cmp	r3, #3
10005a6a:	d100      	bne.n	10005a6e <tud_task+0x452>
10005a6c:	e090      	b.n	10005b90 <tud_task+0x574>
10005a6e:	2b00      	cmp	r3, #0
10005a70:	d000      	beq.n	10005a74 <tud_task+0x458>
10005a72:	e655      	b.n	10005720 <tud_task+0x104>
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
  uint8_t const dir   = tu_edpt_dir(ep_addr);

  return _usbd_dev.ep_status[epnum][dir].stalled;
10005a74:	0053      	lsls	r3, r2, #1
10005a76:	9a01      	ldr	r2, [sp, #4]
10005a78:	9302      	str	r3, [sp, #8]
10005a7a:	4694      	mov	ip, r2
10005a7c:	4443      	add	r3, r8
10005a7e:	4463      	add	r3, ip
10005a80:	3320      	adds	r3, #32
10005a82:	795b      	ldrb	r3, [r3, #5]
            uint16_t status = usbd_edpt_stalled(rhport, ep_addr) ? 0x0001 : 0x0000;
10005a84:	aa06      	add	r2, sp, #24
  return _usbd_dev.ep_status[epnum][dir].stalled;
10005a86:	079b      	lsls	r3, r3, #30
10005a88:	0fdb      	lsrs	r3, r3, #31
            uint16_t status = usbd_edpt_stalled(rhport, ep_addr) ? 0x0001 : 0x0000;
10005a8a:	3202      	adds	r2, #2
10005a8c:	8013      	strh	r3, [r2, #0]
            tud_control_xfer(rhport, p_request, &status, 2);
10005a8e:	4648      	mov	r0, r9
10005a90:	2302      	movs	r3, #2
10005a92:	a908      	add	r1, sp, #32
10005a94:	f000 fb5c 	bl	10006150 <tud_control_xfer>
          break;
10005a98:	e761      	b.n	1000595e <tud_task+0x342>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
10005a9a:	4a80      	ldr	r2, [pc, #512]	; (10005c9c <tud_task+0x680>)
10005a9c:	00dc      	lsls	r4, r3, #3
10005a9e:	1ae3      	subs	r3, r4, r3
10005aa0:	6814      	ldr	r4, [r2, #0]
10005aa2:	009b      	lsls	r3, r3, #2
10005aa4:	18e4      	adds	r4, r4, r3
      TU_VERIFY(driver);
10005aa6:	2c00      	cmp	r4, #0
10005aa8:	d100      	bne.n	10005aac <tud_task+0x490>
10005aaa:	e639      	b.n	10005720 <tud_task+0x104>
  usbd_control_set_complete_callback(driver->control_complete);
10005aac:	6920      	ldr	r0, [r4, #16]
10005aae:	e79c      	b.n	100059ea <tud_task+0x3ce>
          TU_VERIFY(TUSB_REQ_FEATURE_REMOTE_WAKEUP == p_request->wValue);
10005ab0:	88fb      	ldrh	r3, [r7, #6]
10005ab2:	2b01      	cmp	r3, #1
10005ab4:	d000      	beq.n	10005ab8 <tud_task+0x49c>
10005ab6:	e633      	b.n	10005720 <tud_task+0x104>
          _usbd_dev.remote_wakeup_en = false;
10005ab8:	4643      	mov	r3, r8
10005aba:	2208      	movs	r2, #8
10005abc:	781b      	ldrb	r3, [r3, #0]
10005abe:	4393      	bics	r3, r2
10005ac0:	4642      	mov	r2, r8
          tud_control_status(rhport, p_request);
10005ac2:	4648      	mov	r0, r9
10005ac4:	a908      	add	r1, sp, #32
          _usbd_dev.remote_wakeup_en = false;
10005ac6:	7013      	strb	r3, [r2, #0]
          tud_control_status(rhport, p_request);
10005ac8:	f000 fb2a 	bl	10006120 <tud_control_status>
        break;
10005acc:	e5b7      	b.n	1000563e <tud_task+0x22>
          uint16_t status = (_usbd_dev.self_powered ? 1 : 0) | (_usbd_dev.remote_wakeup_en ? 2 : 0);
10005ace:	4643      	mov	r3, r8
10005ad0:	2002      	movs	r0, #2
10005ad2:	7819      	ldrb	r1, [r3, #0]
10005ad4:	ab06      	add	r3, sp, #24
10005ad6:	1c9a      	adds	r2, r3, #2
10005ad8:	068b      	lsls	r3, r1, #26
10005ada:	0889      	lsrs	r1, r1, #2
10005adc:	4001      	ands	r1, r0
10005ade:	0fdb      	lsrs	r3, r3, #31
10005ae0:	430b      	orrs	r3, r1
10005ae2:	8013      	strh	r3, [r2, #0]
          tud_control_xfer(rhport, p_request, &status, 2);
10005ae4:	4648      	mov	r0, r9
10005ae6:	2302      	movs	r3, #2
10005ae8:	a908      	add	r1, sp, #32
10005aea:	f000 fb31 	bl	10006150 <tud_control_xfer>
        break;
10005aee:	e5a6      	b.n	1000563e <tud_task+0x22>
          if ( !_usbd_dev.cfg_num && cfg_num ) TU_ASSERT( process_set_config(rhport, cfg_num) );
10005af0:	4643      	mov	r3, r8
          uint8_t const cfg_num = (uint8_t) p_request->wValue;
10005af2:	79ba      	ldrb	r2, [r7, #6]
10005af4:	9203      	str	r2, [sp, #12]
          if ( !_usbd_dev.cfg_num && cfg_num ) TU_ASSERT( process_set_config(rhport, cfg_num) );
10005af6:	785b      	ldrb	r3, [r3, #1]
10005af8:	2b00      	cmp	r3, #0
10005afa:	d102      	bne.n	10005b02 <tud_task+0x4e6>
10005afc:	2a00      	cmp	r2, #0
10005afe:	d000      	beq.n	10005b02 <tud_task+0x4e6>
10005b00:	e084      	b.n	10005c0c <tud_task+0x5f0>
          _usbd_dev.cfg_num = cfg_num;
10005b02:	4643      	mov	r3, r8
10005b04:	9a03      	ldr	r2, [sp, #12]
          tud_control_status(rhport, p_request);
10005b06:	4648      	mov	r0, r9
10005b08:	a908      	add	r1, sp, #32
          _usbd_dev.cfg_num = cfg_num;
10005b0a:	705a      	strb	r2, [r3, #1]
          tud_control_status(rhport, p_request);
10005b0c:	f000 fb08 	bl	10006120 <tud_control_status>
        break;
10005b10:	e595      	b.n	1000563e <tud_task+0x22>
          uint8_t cfg_num = _usbd_dev.cfg_num;
10005b12:	4643      	mov	r3, r8
10005b14:	aa06      	add	r2, sp, #24
10005b16:	785b      	ldrb	r3, [r3, #1]
10005b18:	3202      	adds	r2, #2
10005b1a:	7013      	strb	r3, [r2, #0]
          tud_control_xfer(rhport, p_request, &cfg_num, 1);
10005b1c:	4648      	mov	r0, r9
10005b1e:	2301      	movs	r3, #1
10005b20:	a908      	add	r1, sp, #32
10005b22:	f000 fb15 	bl	10006150 <tud_control_xfer>
        break;
10005b26:	e58a      	b.n	1000563e <tud_task+0x22>
  tusb_desc_type_t const desc_type = (tusb_desc_type_t) tu_u16_high(p_request->wValue);
10005b28:	88fb      	ldrh	r3, [r7, #6]
10005b2a:	79b8      	ldrb	r0, [r7, #6]
  switch(desc_type)
10005b2c:	0a1b      	lsrs	r3, r3, #8
10005b2e:	2b0f      	cmp	r3, #15
10005b30:	d900      	bls.n	10005b34 <tud_task+0x518>
10005b32:	e5f5      	b.n	10005720 <tud_task+0x104>
10005b34:	4a5a      	ldr	r2, [pc, #360]	; (10005ca0 <tud_task+0x684>)
10005b36:	009b      	lsls	r3, r3, #2
10005b38:	58d3      	ldr	r3, [r2, r3]
10005b3a:	469f      	mov	pc, r3
          usbd_control_set_request(p_request); // set request since DCD has no access to tud_control_status() API
10005b3c:	a808      	add	r0, sp, #32
10005b3e:	f000 fb75 	bl	1000622c <usbd_control_set_request>
          dcd_set_address(rhport, (uint8_t) p_request->wValue);
10005b42:	4648      	mov	r0, r9
10005b44:	79b9      	ldrb	r1, [r7, #6]
10005b46:	f000 fc95 	bl	10006474 <dcd_set_address>
          _usbd_dev.addressed = 1;
10005b4a:	4643      	mov	r3, r8
10005b4c:	2202      	movs	r2, #2
10005b4e:	781b      	ldrb	r3, [r3, #0]
10005b50:	4313      	orrs	r3, r2
10005b52:	4642      	mov	r2, r8
10005b54:	7013      	strb	r3, [r2, #0]
        break;
10005b56:	e572      	b.n	1000563e <tud_task+0x22>
          TU_VERIFY(TUSB_REQ_FEATURE_REMOTE_WAKEUP == p_request->wValue);
10005b58:	88fb      	ldrh	r3, [r7, #6]
10005b5a:	2b01      	cmp	r3, #1
10005b5c:	d000      	beq.n	10005b60 <tud_task+0x544>
10005b5e:	e5df      	b.n	10005720 <tud_task+0x104>
          _usbd_dev.remote_wakeup_en = true;
10005b60:	4643      	mov	r3, r8
10005b62:	2208      	movs	r2, #8
10005b64:	781b      	ldrb	r3, [r3, #0]
10005b66:	4313      	orrs	r3, r2
10005b68:	e7aa      	b.n	10005ac0 <tud_task+0x4a4>
      if ( TUSB_REQ_TYPE_STANDARD == p_request->bmRequestType_bit.type )
10005b6a:	2260      	movs	r2, #96	; 0x60
10005b6c:	793b      	ldrb	r3, [r7, #4]
10005b6e:	421a      	tst	r2, r3
10005b70:	d000      	beq.n	10005b74 <tud_task+0x558>
10005b72:	e6b4      	b.n	100058de <tud_task+0x2c2>
        usbd_control_set_complete_callback(NULL);
10005b74:	2000      	movs	r0, #0
10005b76:	f000 fb53 	bl	10006220 <usbd_control_set_complete_callback>
10005b7a:	e6b0      	b.n	100058de <tud_task+0x2c2>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
10005b7c:	4a47      	ldr	r2, [pc, #284]	; (10005c9c <tud_task+0x680>)
10005b7e:	00dd      	lsls	r5, r3, #3
10005b80:	1aeb      	subs	r3, r5, r3
10005b82:	6815      	ldr	r5, [r2, #0]
10005b84:	009b      	lsls	r3, r3, #2
10005b86:	18ed      	adds	r5, r5, r3
      if (driver)
10005b88:	2d00      	cmp	r5, #0
10005b8a:	d0ee      	beq.n	10005b6a <tud_task+0x54e>
  usbd_control_set_complete_callback(driver->control_complete);
10005b8c:	6928      	ldr	r0, [r5, #16]
10005b8e:	e6fb      	b.n	10005988 <tud_task+0x36c>
            if ( TUSB_REQ_FEATURE_EDPT_HALT == p_request->wValue ) usbd_edpt_stall(rhport, ep_addr);
10005b90:	88fb      	ldrh	r3, [r7, #6]
10005b92:	2b00      	cmp	r3, #0
10005b94:	d027      	beq.n	10005be6 <tud_task+0x5ca>
10005b96:	0053      	lsls	r3, r2, #1
10005b98:	9302      	str	r3, [sp, #8]
            tud_control_status(rhport, p_request);
10005b9a:	4648      	mov	r0, r9
10005b9c:	a908      	add	r1, sp, #32
10005b9e:	f000 fabf 	bl	10006120 <tud_control_status>
          break;
10005ba2:	e6dc      	b.n	1000595e <tud_task+0x342>
            if ( TUSB_REQ_FEATURE_EDPT_HALT == p_request->wValue ) usbd_edpt_clear_stall(rhport, ep_addr);
10005ba4:	88fb      	ldrh	r3, [r7, #6]
10005ba6:	2b00      	cmp	r3, #0
10005ba8:	d1f5      	bne.n	10005b96 <tud_task+0x57a>
  dcd_edpt_clear_stall(rhport, ep_addr);
10005baa:	4648      	mov	r0, r9
10005bac:	f000 fdd4 	bl	10006758 <dcd_edpt_clear_stall>
  _usbd_dev.ep_status[epnum][dir].stalled = false;
10005bb0:	9a01      	ldr	r2, [sp, #4]
10005bb2:	9b02      	ldr	r3, [sp, #8]
10005bb4:	4694      	mov	ip, r2
10005bb6:	005b      	lsls	r3, r3, #1
10005bb8:	9302      	str	r3, [sp, #8]
10005bba:	4443      	add	r3, r8
10005bbc:	4463      	add	r3, ip
10005bbe:	3320      	adds	r3, #32
10005bc0:	795a      	ldrb	r2, [r3, #5]
  _usbd_dev.ep_status[epnum][dir].busy = false;
10005bc2:	9903      	ldr	r1, [sp, #12]
  _usbd_dev.ep_status[epnum][dir].stalled = false;
10005bc4:	43aa      	bics	r2, r5
10005bc6:	715a      	strb	r2, [r3, #5]
  _usbd_dev.ep_status[epnum][dir].busy = false;
10005bc8:	795a      	ldrb	r2, [r3, #5]
10005bca:	438a      	bics	r2, r1
10005bcc:	715a      	strb	r2, [r3, #5]
}
10005bce:	e7e4      	b.n	10005b9a <tud_task+0x57e>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
10005bd0:	4a32      	ldr	r2, [pc, #200]	; (10005c9c <tud_task+0x680>)
10005bd2:	00dc      	lsls	r4, r3, #3
10005bd4:	1ae3      	subs	r3, r4, r3
10005bd6:	6814      	ldr	r4, [r2, #0]
10005bd8:	009b      	lsls	r3, r3, #2
10005bda:	18e4      	adds	r4, r4, r3
        TU_VERIFY(driver);
10005bdc:	2c00      	cmp	r4, #0
10005bde:	d100      	bne.n	10005be2 <tud_task+0x5c6>
10005be0:	e59e      	b.n	10005720 <tud_task+0x104>
  usbd_control_set_complete_callback(driver->control_complete);
10005be2:	6920      	ldr	r0, [r4, #16]
10005be4:	e733      	b.n	10005a4e <tud_task+0x432>
  dcd_edpt_stall(rhport, ep_addr);
10005be6:	4648      	mov	r0, r9
10005be8:	f000 fd8e 	bl	10006708 <dcd_edpt_stall>
  _usbd_dev.ep_status[epnum][dir].stalled = true;
10005bec:	9a01      	ldr	r2, [sp, #4]
10005bee:	2102      	movs	r1, #2
10005bf0:	4694      	mov	ip, r2
10005bf2:	9b02      	ldr	r3, [sp, #8]
10005bf4:	005b      	lsls	r3, r3, #1
10005bf6:	9302      	str	r3, [sp, #8]
10005bf8:	4443      	add	r3, r8
10005bfa:	4463      	add	r3, ip
10005bfc:	3320      	adds	r3, #32
10005bfe:	795a      	ldrb	r2, [r3, #5]
10005c00:	430a      	orrs	r2, r1
10005c02:	715a      	strb	r2, [r3, #5]
  _usbd_dev.ep_status[epnum][dir].busy = true;
10005c04:	795a      	ldrb	r2, [r3, #5]
10005c06:	4316      	orrs	r6, r2
10005c08:	715e      	strb	r6, [r3, #5]
}
10005c0a:	e7c6      	b.n	10005b9a <tud_task+0x57e>
  tusb_desc_configuration_t const * desc_cfg = (tusb_desc_configuration_t const *) tud_descriptor_configuration_cb(cfg_num-1); // index is cfg_num-1
10005c0c:	1e50      	subs	r0, r2, #1
10005c0e:	b2c0      	uxtb	r0, r0
10005c10:	f7fe fa06 	bl	10004020 <tud_descriptor_configuration_cb>
  TU_ASSERT(desc_cfg != NULL && desc_cfg->bDescriptorType == TUSB_DESC_CONFIGURATION);
10005c14:	2800      	cmp	r0, #0
10005c16:	d100      	bne.n	10005c1a <tud_task+0x5fe>
10005c18:	e582      	b.n	10005720 <tud_task+0x104>
10005c1a:	7843      	ldrb	r3, [r0, #1]
10005c1c:	2b02      	cmp	r3, #2
10005c1e:	d000      	beq.n	10005c22 <tud_task+0x606>
10005c20:	e57e      	b.n	10005720 <tud_task+0x104>
  _usbd_dev.remote_wakeup_support = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_REMOTE_WAKEUP) ? 1 : 0;
10005c22:	2101      	movs	r1, #1
10005c24:	79c2      	ldrb	r2, [r0, #7]
  uint8_t const * p_desc   = ((uint8_t const*) desc_cfg) + sizeof(tusb_desc_configuration_t);
10005c26:	0005      	movs	r5, r0
  _usbd_dev.self_powered = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_SELF_POWERED) ? 1 : 0;
10005c28:	1193      	asrs	r3, r2, #6
  _usbd_dev.remote_wakeup_support = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_REMOTE_WAKEUP) ? 1 : 0;
10005c2a:	1152      	asrs	r2, r2, #5
10005c2c:	400b      	ands	r3, r1
10005c2e:	400a      	ands	r2, r1
10005c30:	0112      	lsls	r2, r2, #4
10005c32:	015b      	lsls	r3, r3, #5
10005c34:	4313      	orrs	r3, r2
10005c36:	4642      	mov	r2, r8
10005c38:	7812      	ldrb	r2, [r2, #0]
10005c3a:	312f      	adds	r1, #47	; 0x2f
10005c3c:	438a      	bics	r2, r1
10005c3e:	4313      	orrs	r3, r2
10005c40:	4642      	mov	r2, r8
10005c42:	7013      	strb	r3, [r2, #0]
  uint8_t const * desc_end = ((uint8_t const*) desc_cfg) + desc_cfg->wTotalLength;
10005c44:	78c3      	ldrb	r3, [r0, #3]
10005c46:	7882      	ldrb	r2, [r0, #2]
10005c48:	021b      	lsls	r3, r3, #8
10005c4a:	4313      	orrs	r3, r2
10005c4c:	18c3      	adds	r3, r0, r3
  uint8_t const * p_desc   = ((uint8_t const*) desc_cfg) + sizeof(tusb_desc_configuration_t);
10005c4e:	3509      	adds	r5, #9
  uint8_t const * desc_end = ((uint8_t const*) desc_cfg) + desc_cfg->wTotalLength;
10005c50:	9304      	str	r3, [sp, #16]
  while( p_desc < desc_end )
10005c52:	9b04      	ldr	r3, [sp, #16]
10005c54:	42ab      	cmp	r3, r5
10005c56:	d800      	bhi.n	10005c5a <tud_task+0x63e>
10005c58:	e0cf      	b.n	10005dfa <tud_task+0x7de>
    tusb_desc_interface_assoc_t const * desc_itf_assoc = NULL;
10005c5a:	2300      	movs	r3, #0
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
10005c5c:	786a      	ldrb	r2, [r5, #1]
10005c5e:	9302      	str	r3, [sp, #8]
    if ( TUSB_DESC_INTERFACE_ASSOCIATION == tu_desc_type(p_desc) )
10005c60:	2a0b      	cmp	r2, #11
10005c62:	d104      	bne.n	10005c6e <tud_task+0x652>
  return desc8 + desc8[DESC_OFFSET_LEN];
10005c64:	782b      	ldrb	r3, [r5, #0]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
10005c66:	9502      	str	r5, [sp, #8]
  return desc8 + desc8[DESC_OFFSET_LEN];
10005c68:	18eb      	adds	r3, r5, r3
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
10005c6a:	001d      	movs	r5, r3
10005c6c:	785a      	ldrb	r2, [r3, #1]
    TU_ASSERT( TUSB_DESC_INTERFACE == tu_desc_type(p_desc) );
10005c6e:	2a04      	cmp	r2, #4
10005c70:	d000      	beq.n	10005c74 <tud_task+0x658>
10005c72:	e555      	b.n	10005720 <tud_task+0x104>
    uint16_t const remaining_len = desc_end-p_desc;
10005c74:	9b04      	ldr	r3, [sp, #16]
10005c76:	4a05      	ldr	r2, [pc, #20]	; (10005c8c <tud_task+0x670>)
10005c78:	1b5b      	subs	r3, r3, r5
10005c7a:	b29b      	uxth	r3, r3
10005c7c:	9301      	str	r3, [sp, #4]
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
10005c7e:	4b04      	ldr	r3, [pc, #16]	; (10005c90 <tud_task+0x674>)
10005c80:	2400      	movs	r4, #0
10005c82:	781b      	ldrb	r3, [r3, #0]
10005c84:	2a00      	cmp	r2, #0
10005c86:	d11d      	bne.n	10005cc4 <tud_task+0x6a8>
10005c88:	e029      	b.n	10005cde <tud_task+0x6c2>
10005c8a:	46c0      	nop			; (mov r8, r8)
10005c8c:	00000000 	.word	0x00000000
10005c90:	20012771 	.word	0x20012771
10005c94:	10004f51 	.word	0x10004f51
10005c98:	1001080c 	.word	0x1001080c
10005c9c:	20011af8 	.word	0x20011af8
10005ca0:	100107cc 	.word	0x100107cc
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
10005ca4:	429c      	cmp	r4, r3
10005ca6:	d126      	bne.n	10005cf6 <tud_task+0x6da>
10005ca8:	4b57      	ldr	r3, [pc, #348]	; (10005e08 <tud_task+0x7ec>)
      uint16_t const drv_len = driver->open(rhport, desc_itf, remaining_len);
10005caa:	0029      	movs	r1, r5
10005cac:	4648      	mov	r0, r9
10005cae:	9a01      	ldr	r2, [sp, #4]
10005cb0:	4798      	blx	r3
      if ( drv_len > 0 )
10005cb2:	2800      	cmp	r0, #0
10005cb4:	d122      	bne.n	10005cfc <tud_task+0x6e0>
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
10005cb6:	4b55      	ldr	r3, [pc, #340]	; (10005e0c <tud_task+0x7f0>)
10005cb8:	3401      	adds	r4, #1
10005cba:	781b      	ldrb	r3, [r3, #0]
10005cbc:	b2e4      	uxtb	r4, r4
10005cbe:	42a3      	cmp	r3, r4
10005cc0:	d200      	bcs.n	10005cc4 <tud_task+0x6a8>
10005cc2:	e52d      	b.n	10005720 <tud_task+0x104>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
10005cc4:	429c      	cmp	r4, r3
10005cc6:	d2ed      	bcs.n	10005ca4 <tud_task+0x688>
      uint16_t const drv_len = driver->open(rhport, desc_itf, remaining_len);
10005cc8:	4b51      	ldr	r3, [pc, #324]	; (10005e10 <tud_task+0x7f4>)
10005cca:	681b      	ldr	r3, [r3, #0]
10005ccc:	9305      	str	r3, [sp, #20]
10005cce:	9a05      	ldr	r2, [sp, #20]
10005cd0:	00e3      	lsls	r3, r4, #3
10005cd2:	4694      	mov	ip, r2
10005cd4:	1b1b      	subs	r3, r3, r4
10005cd6:	009b      	lsls	r3, r3, #2
10005cd8:	4463      	add	r3, ip
10005cda:	689b      	ldr	r3, [r3, #8]
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
10005cdc:	e7e5      	b.n	10005caa <tud_task+0x68e>
      uint16_t const drv_len = driver->open(rhport, desc_itf, remaining_len);
10005cde:	0029      	movs	r1, r5
10005ce0:	4648      	mov	r0, r9
10005ce2:	9a01      	ldr	r2, [sp, #4]
10005ce4:	f7ff f8be 	bl	10004e64 <cdcd_open>
10005ce8:	1e06      	subs	r6, r0, #0
      if ( drv_len > 0 )
10005cea:	d108      	bne.n	10005cfe <tud_task+0x6e2>
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
10005cec:	4b47      	ldr	r3, [pc, #284]	; (10005e0c <tud_task+0x7f0>)
10005cee:	781b      	ldrb	r3, [r3, #0]
10005cf0:	2b00      	cmp	r3, #0
10005cf2:	d100      	bne.n	10005cf6 <tud_task+0x6da>
10005cf4:	e514      	b.n	10005720 <tud_task+0x104>
      uint16_t const drv_len = driver->open(rhport, desc_itf, remaining_len);
10005cf6:	2300      	movs	r3, #0
10005cf8:	689b      	ldr	r3, [r3, #8]
10005cfa:	deff      	udf	#255	; 0xff
10005cfc:	0006      	movs	r6, r0
        TU_ASSERT( sizeof(tusb_desc_interface_t) <= drv_len && drv_len <= remaining_len);
10005cfe:	2e08      	cmp	r6, #8
10005d00:	d800      	bhi.n	10005d04 <tud_task+0x6e8>
10005d02:	e50d      	b.n	10005720 <tud_task+0x104>
10005d04:	9b01      	ldr	r3, [sp, #4]
10005d06:	42b3      	cmp	r3, r6
10005d08:	d200      	bcs.n	10005d0c <tud_task+0x6f0>
10005d0a:	e509      	b.n	10005720 <tud_task+0x104>
        TU_ASSERT(DRVID_INVALID == _usbd_dev.itf2drv[desc_itf->bInterfaceNumber]);
10005d0c:	4643      	mov	r3, r8
10005d0e:	78aa      	ldrb	r2, [r5, #2]
10005d10:	189b      	adds	r3, r3, r2
10005d12:	78d9      	ldrb	r1, [r3, #3]
10005d14:	29ff      	cmp	r1, #255	; 0xff
10005d16:	d000      	beq.n	10005d1a <tud_task+0x6fe>
10005d18:	e502      	b.n	10005720 <tud_task+0x104>
        _usbd_dev.itf2drv[desc_itf->bInterfaceNumber] = drv_id;
10005d1a:	70dc      	strb	r4, [r3, #3]
        if (desc_itf_assoc)
10005d1c:	9b02      	ldr	r3, [sp, #8]
10005d1e:	2b00      	cmp	r3, #0
10005d20:	d014      	beq.n	10005d4c <tud_task+0x730>
10005d22:	0018      	movs	r0, r3
          TU_ASSERT(desc_itf_assoc->bFirstInterface == desc_itf->bInterfaceNumber &&
10005d24:	789b      	ldrb	r3, [r3, #2]
10005d26:	4293      	cmp	r3, r2
10005d28:	d000      	beq.n	10005d2c <tud_task+0x710>
10005d2a:	e4f9      	b.n	10005720 <tud_task+0x104>
10005d2c:	7901      	ldrb	r1, [r0, #4]
10005d2e:	796a      	ldrb	r2, [r5, #5]
10005d30:	4291      	cmp	r1, r2
10005d32:	d000      	beq.n	10005d36 <tud_task+0x71a>
10005d34:	e4f4      	b.n	10005720 <tud_task+0x104>
          for(uint8_t i=1; i<desc_itf_assoc->bInterfaceCount; i++)
10005d36:	78c2      	ldrb	r2, [r0, #3]
10005d38:	2a01      	cmp	r2, #1
10005d3a:	d907      	bls.n	10005d4c <tud_task+0x730>
            _usbd_dev.itf2drv[desc_itf->bInterfaceNumber+i] = drv_id;
10005d3c:	3304      	adds	r3, #4
10005d3e:	3a01      	subs	r2, #1
10005d40:	4443      	add	r3, r8
10005d42:	0018      	movs	r0, r3
10005d44:	0021      	movs	r1, r4
10005d46:	b2d2      	uxtb	r2, r2
10005d48:	f7fb f9cc 	bl	100010e4 <__wrap_memset>
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
10005d4c:	217f      	movs	r1, #127	; 0x7f
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
10005d4e:	002a      	movs	r2, r5
10005d50:	2300      	movs	r3, #0
10005d52:	468c      	mov	ip, r1
    if ( TUSB_DESC_ENDPOINT == tu_desc_type(p_desc) )
10005d54:	7851      	ldrb	r1, [r2, #1]
10005d56:	2905      	cmp	r1, #5
10005d58:	d107      	bne.n	10005d6a <tud_task+0x74e>
      ep2drv[tu_edpt_number(ep_addr)][tu_edpt_dir(ep_addr)] = driver_id;
10005d5a:	4661      	mov	r1, ip
      uint8_t const ep_addr = ((tusb_desc_endpoint_t const*) p_desc)->bEndpointAddress;
10005d5c:	7890      	ldrb	r0, [r2, #2]
      ep2drv[tu_edpt_number(ep_addr)][tu_edpt_dir(ep_addr)] = driver_id;
10005d5e:	4001      	ands	r1, r0
10005d60:	0049      	lsls	r1, r1, #1
10005d62:	4441      	add	r1, r8
10005d64:	3113      	adds	r1, #19
10005d66:	09c0      	lsrs	r0, r0, #7
10005d68:	540c      	strb	r4, [r1, r0]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
10005d6a:	7811      	ldrb	r1, [r2, #0]
    len   = (uint16_t)(len + tu_desc_len(p_desc));
10005d6c:	185b      	adds	r3, r3, r1
10005d6e:	b29b      	uxth	r3, r3
  return desc8 + desc8[DESC_OFFSET_LEN];
10005d70:	1852      	adds	r2, r2, r1
  while( len < desc_len )
10005d72:	42b3      	cmp	r3, r6
10005d74:	d3ee      	bcc.n	10005d54 <tud_task+0x738>
    TU_ASSERT(drv_id < TOTAL_DRIVER_COUNT);
10005d76:	4b25      	ldr	r3, [pc, #148]	; (10005e0c <tud_task+0x7f0>)
        p_desc += drv_len; // next interface
10005d78:	19ad      	adds	r5, r5, r6
    TU_ASSERT(drv_id < TOTAL_DRIVER_COUNT);
10005d7a:	781b      	ldrb	r3, [r3, #0]
10005d7c:	42a3      	cmp	r3, r4
10005d7e:	d300      	bcc.n	10005d82 <tud_task+0x766>
10005d80:	e767      	b.n	10005c52 <tud_task+0x636>
10005d82:	e4cd      	b.n	10005720 <tud_task+0x104>
      if (!tud_descriptor_bos_cb) return false;
10005d84:	4b23      	ldr	r3, [pc, #140]	; (10005e14 <tud_task+0x7f8>)
10005d86:	2b00      	cmp	r3, #0
10005d88:	d100      	bne.n	10005d8c <tud_task+0x770>
10005d8a:	e4c9      	b.n	10005720 <tud_task+0x104>
      tusb_desc_bos_t const* desc_bos = (tusb_desc_bos_t const*) tud_descriptor_bos_cb();
10005d8c:	e000      	b.n	10005d90 <tud_task+0x774>
10005d8e:	bf00      	nop
10005d90:	0004      	movs	r4, r0
      memcpy(&total_len, (uint8_t*) desc_config + offsetof(tusb_desc_configuration_t, wTotalLength), 2);
10005d92:	ab06      	add	r3, sp, #24
10005d94:	1c9d      	adds	r5, r3, #2
10005d96:	2202      	movs	r2, #2
10005d98:	1ca1      	adds	r1, r4, #2
10005d9a:	0028      	movs	r0, r5
10005d9c:	f7fb f9a8 	bl	100010f0 <__wrap___aeabi_memcpy>
      return tud_control_xfer(rhport, p_request, (void*) desc_config, total_len);
10005da0:	0022      	movs	r2, r4
10005da2:	4648      	mov	r0, r9
10005da4:	882b      	ldrh	r3, [r5, #0]
10005da6:	a908      	add	r1, sp, #32
10005da8:	f000 f9d2 	bl	10006150 <tud_control_xfer>
          TU_VERIFY( process_get_descriptor(rhport, p_request) );
10005dac:	2800      	cmp	r0, #0
10005dae:	d000      	beq.n	10005db2 <tud_task+0x796>
10005db0:	e445      	b.n	1000563e <tud_task+0x22>
10005db2:	e4b5      	b.n	10005720 <tud_task+0x104>
      if ( tud_descriptor_device_qualifier_cb )
10005db4:	4b18      	ldr	r3, [pc, #96]	; (10005e18 <tud_task+0x7fc>)
10005db6:	2b00      	cmp	r3, #0
10005db8:	d100      	bne.n	10005dbc <tud_task+0x7a0>
10005dba:	e4b1      	b.n	10005720 <tud_task+0x104>
        uint8_t const* desc_qualifier = tud_descriptor_device_qualifier_cb();
10005dbc:	e000      	b.n	10005dc0 <tud_task+0x7a4>
10005dbe:	bf00      	nop
10005dc0:	1e02      	subs	r2, r0, #0
        TU_ASSERT(desc_qualifier);
10005dc2:	d100      	bne.n	10005dc6 <tud_task+0x7aa>
10005dc4:	e4ac      	b.n	10005720 <tud_task+0x104>
        return tud_control_xfer(rhport, p_request, (void*) desc_qualifier, desc_qualifier[0]);
10005dc6:	4648      	mov	r0, r9
10005dc8:	7813      	ldrb	r3, [r2, #0]
10005dca:	a908      	add	r1, sp, #32
10005dcc:	f000 f9c0 	bl	10006150 <tud_control_xfer>
10005dd0:	e7ec      	b.n	10005dac <tud_task+0x790>
      uint8_t const* desc_str = (uint8_t const*) tud_descriptor_string_cb(desc_index, p_request->wIndex);
10005dd2:	8939      	ldrh	r1, [r7, #8]
10005dd4:	f7fe f928 	bl	10004028 <tud_descriptor_string_cb>
10005dd8:	1e02      	subs	r2, r0, #0
      TU_VERIFY(desc_str);
10005dda:	d1f4      	bne.n	10005dc6 <tud_task+0x7aa>
10005ddc:	e4a0      	b.n	10005720 <tud_task+0x104>
      tusb_desc_configuration_t const* desc_config = (tusb_desc_configuration_t const*) tud_descriptor_configuration_cb(desc_index);
10005dde:	f7fe f91f 	bl	10004020 <tud_descriptor_configuration_cb>
10005de2:	1e04      	subs	r4, r0, #0
      TU_ASSERT(desc_config);
10005de4:	d1d5      	bne.n	10005d92 <tud_task+0x776>
10005de6:	e49b      	b.n	10005720 <tud_task+0x104>
      return tud_control_xfer(rhport, p_request, (void*) tud_descriptor_device_cb(), len);
10005de8:	f7fe f916 	bl	10004018 <tud_descriptor_device_cb>
10005dec:	2312      	movs	r3, #18
10005dee:	0002      	movs	r2, r0
10005df0:	a908      	add	r1, sp, #32
10005df2:	4648      	mov	r0, r9
10005df4:	f000 f9ac 	bl	10006150 <tud_control_xfer>
10005df8:	e7d8      	b.n	10005dac <tud_task+0x790>
  if (tud_mount_cb) tud_mount_cb();
10005dfa:	4b08      	ldr	r3, [pc, #32]	; (10005e1c <tud_task+0x800>)
10005dfc:	2b00      	cmp	r3, #0
10005dfe:	d100      	bne.n	10005e02 <tud_task+0x7e6>
10005e00:	e67f      	b.n	10005b02 <tud_task+0x4e6>
10005e02:	e000      	b.n	10005e06 <tud_task+0x7ea>
10005e04:	bf00      	nop
10005e06:	e67c      	b.n	10005b02 <tud_task+0x4e6>
10005e08:	10004e65 	.word	0x10004e65
10005e0c:	20012771 	.word	0x20012771
10005e10:	20011af8 	.word	0x20011af8
	...

10005e20 <dcd_event_bus_signal>:
{
10005e20:	b530      	push	{r4, r5, lr}
10005e22:	b085      	sub	sp, #20
10005e24:	0005      	movs	r5, r0
10005e26:	000c      	movs	r4, r1
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
10005e28:	220c      	movs	r2, #12
10005e2a:	2100      	movs	r1, #0
10005e2c:	a801      	add	r0, sp, #4
10005e2e:	f7fb f959 	bl	100010e4 <__wrap_memset>
10005e32:	466b      	mov	r3, sp
10005e34:	711d      	strb	r5, [r3, #4]
10005e36:	715c      	strb	r4, [r3, #5]
  switch (event->event_id)
10005e38:	2c04      	cmp	r4, #4
10005e3a:	d04b      	beq.n	10005ed4 <dcd_event_bus_signal+0xb4>
10005e3c:	d805      	bhi.n	10005e4a <dcd_event_bus_signal+0x2a>
10005e3e:	2c02      	cmp	r4, #2
10005e40:	d030      	beq.n	10005ea4 <dcd_event_bus_signal+0x84>
10005e42:	2c03      	cmp	r4, #3
10005e44:	d115      	bne.n	10005e72 <dcd_event_bus_signal+0x52>
}
10005e46:	b005      	add	sp, #20
10005e48:	bd30      	pop	{r4, r5, pc}
  switch (event->event_id)
10005e4a:	2c05      	cmp	r4, #5
10005e4c:	d111      	bne.n	10005e72 <dcd_event_bus_signal+0x52>
      if ( _usbd_dev.connected )
10005e4e:	4b2a      	ldr	r3, [pc, #168]	; (10005ef8 <dcd_event_bus_signal+0xd8>)
10005e50:	781a      	ldrb	r2, [r3, #0]
10005e52:	07d2      	lsls	r2, r2, #31
10005e54:	d5f7      	bpl.n	10005e46 <dcd_event_bus_signal+0x26>
        _usbd_dev.suspended = 0;
10005e56:	2104      	movs	r1, #4
10005e58:	781a      	ldrb	r2, [r3, #0]
10005e5a:	438a      	bics	r2, r1
10005e5c:	701a      	strb	r2, [r3, #0]
        osal_queue_send(_usbd_q, event, in_isr);
10005e5e:	4b27      	ldr	r3, [pc, #156]	; (10005efc <dcd_event_bus_signal+0xdc>)
10005e60:	681c      	ldr	r4, [r3, #0]
    critsec->save = spin_lock_blocking(critsec->core.spin_lock);
10005e62:	69a2      	ldr	r2, [r4, #24]
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
10005e64:	f3ef 8110 	mrs	r1, PRIMASK
    __asm volatile ("cpsid i");
10005e68:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
10005e6a:	6813      	ldr	r3, [r2, #0]
10005e6c:	2b00      	cmp	r3, #0
10005e6e:	d109      	bne.n	10005e84 <dcd_event_bus_signal+0x64>
10005e70:	e7fb      	b.n	10005e6a <dcd_event_bus_signal+0x4a>
      osal_queue_send(_usbd_q, event, in_isr);
10005e72:	4b22      	ldr	r3, [pc, #136]	; (10005efc <dcd_event_bus_signal+0xdc>)
10005e74:	681c      	ldr	r4, [r3, #0]
10005e76:	69a2      	ldr	r2, [r4, #24]
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
10005e78:	f3ef 8110 	mrs	r1, PRIMASK
    __asm volatile ("cpsid i");
10005e7c:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
10005e7e:	6813      	ldr	r3, [r2, #0]
10005e80:	2b00      	cmp	r3, #0
10005e82:	d0fc      	beq.n	10005e7e <dcd_event_bus_signal+0x5e>
    __asm volatile ("dmb");
10005e84:	f3bf 8f5f 	dmb	sy
10005e88:	61e1      	str	r1, [r4, #28]
  //  however osal_queue_recieve may be. therefore my assumption is that
  //  the fifo mutex is not populated for queues used from an IRQ context
  assert(!qhdl->ff.mutex);

  _osal_q_lock(qhdl);
  bool success = tu_fifo_write(&qhdl->ff, data);
10005e8a:	0020      	movs	r0, r4
10005e8c:	a901      	add	r1, sp, #4
10005e8e:	f7ff fa87 	bl	100053a0 <tu_fifo_write>
    spin_unlock(critsec->core.spin_lock, critsec->save);
10005e92:	69a2      	ldr	r2, [r4, #24]
10005e94:	69e3      	ldr	r3, [r4, #28]
10005e96:	f3bf 8f5f 	dmb	sy
    *lock = 0;
10005e9a:	2100      	movs	r1, #0
10005e9c:	6011      	str	r1, [r2, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10005e9e:	f383 8810 	msr	PRIMASK, r3
}
10005ea2:	e7d0      	b.n	10005e46 <dcd_event_bus_signal+0x26>
      _usbd_dev.connected  = 0;
10005ea4:	2101      	movs	r1, #1
10005ea6:	4b14      	ldr	r3, [pc, #80]	; (10005ef8 <dcd_event_bus_signal+0xd8>)
10005ea8:	781a      	ldrb	r2, [r3, #0]
10005eaa:	438a      	bics	r2, r1
10005eac:	701a      	strb	r2, [r3, #0]
      _usbd_dev.addressed  = 0;
10005eae:	781a      	ldrb	r2, [r3, #0]
      _usbd_dev.suspended  = 0;
10005eb0:	3103      	adds	r1, #3
      _usbd_dev.addressed  = 0;
10005eb2:	43a2      	bics	r2, r4
10005eb4:	701a      	strb	r2, [r3, #0]
      _usbd_dev.cfg_num    = 0;
10005eb6:	2200      	movs	r2, #0
10005eb8:	705a      	strb	r2, [r3, #1]
      _usbd_dev.suspended  = 0;
10005eba:	781a      	ldrb	r2, [r3, #0]
10005ebc:	438a      	bics	r2, r1
10005ebe:	701a      	strb	r2, [r3, #0]
      osal_queue_send(_usbd_q, event, in_isr);
10005ec0:	4b0e      	ldr	r3, [pc, #56]	; (10005efc <dcd_event_bus_signal+0xdc>)
10005ec2:	681c      	ldr	r4, [r3, #0]
    critsec->save = spin_lock_blocking(critsec->core.spin_lock);
10005ec4:	69a2      	ldr	r2, [r4, #24]
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
10005ec6:	f3ef 8110 	mrs	r1, PRIMASK
    __asm volatile ("cpsid i");
10005eca:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
10005ecc:	6813      	ldr	r3, [r2, #0]
10005ece:	2b00      	cmp	r3, #0
10005ed0:	d1d8      	bne.n	10005e84 <dcd_event_bus_signal+0x64>
10005ed2:	e7fb      	b.n	10005ecc <dcd_event_bus_signal+0xac>
      if ( _usbd_dev.connected )
10005ed4:	4b08      	ldr	r3, [pc, #32]	; (10005ef8 <dcd_event_bus_signal+0xd8>)
10005ed6:	781a      	ldrb	r2, [r3, #0]
10005ed8:	07d2      	lsls	r2, r2, #31
10005eda:	d5b4      	bpl.n	10005e46 <dcd_event_bus_signal+0x26>
        _usbd_dev.suspended = 1;
10005edc:	2104      	movs	r1, #4
10005ede:	781a      	ldrb	r2, [r3, #0]
10005ee0:	430a      	orrs	r2, r1
10005ee2:	701a      	strb	r2, [r3, #0]
        osal_queue_send(_usbd_q, event, in_isr);
10005ee4:	4b05      	ldr	r3, [pc, #20]	; (10005efc <dcd_event_bus_signal+0xdc>)
10005ee6:	681c      	ldr	r4, [r3, #0]
10005ee8:	69a2      	ldr	r2, [r4, #24]
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
10005eea:	f3ef 8110 	mrs	r1, PRIMASK
    __asm volatile ("cpsid i");
10005eee:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
10005ef0:	6813      	ldr	r3, [r2, #0]
10005ef2:	2b00      	cmp	r3, #0
10005ef4:	d1c6      	bne.n	10005e84 <dcd_event_bus_signal+0x64>
10005ef6:	e7fb      	b.n	10005ef0 <dcd_event_bus_signal+0xd0>
10005ef8:	20011e28 	.word	0x20011e28
10005efc:	20011e64 	.word	0x20011e64

10005f00 <dcd_event_setup_received>:
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_SETUP_RECEIVED };
10005f00:	2300      	movs	r3, #0
{
10005f02:	b530      	push	{r4, r5, lr}
10005f04:	b085      	sub	sp, #20
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_SETUP_RECEIVED };
10005f06:	ad01      	add	r5, sp, #4
10005f08:	806b      	strh	r3, [r5, #2]
10005f0a:	7028      	strb	r0, [r5, #0]
10005f0c:	3306      	adds	r3, #6
  memcpy(&event.setup_received, setup, 8);
10005f0e:	2208      	movs	r2, #8
10005f10:	a802      	add	r0, sp, #8
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_SETUP_RECEIVED };
10005f12:	706b      	strb	r3, [r5, #1]
  memcpy(&event.setup_received, setup, 8);
10005f14:	f7fb f8ec 	bl	100010f0 <__wrap___aeabi_memcpy>
      osal_queue_send(_usbd_q, event, in_isr);
10005f18:	4b0c      	ldr	r3, [pc, #48]	; (10005f4c <dcd_event_setup_received+0x4c>)
10005f1a:	681c      	ldr	r4, [r3, #0]
10005f1c:	69a2      	ldr	r2, [r4, #24]
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
10005f1e:	f3ef 8310 	mrs	r3, PRIMASK
    __asm volatile ("cpsid i");
10005f22:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
10005f24:	6811      	ldr	r1, [r2, #0]
10005f26:	2900      	cmp	r1, #0
10005f28:	d0fc      	beq.n	10005f24 <dcd_event_setup_received+0x24>
    __asm volatile ("dmb");
10005f2a:	f3bf 8f5f 	dmb	sy
10005f2e:	61e3      	str	r3, [r4, #28]
10005f30:	0029      	movs	r1, r5
10005f32:	0020      	movs	r0, r4
10005f34:	f7ff fa34 	bl	100053a0 <tu_fifo_write>
    spin_unlock(critsec->core.spin_lock, critsec->save);
10005f38:	69a2      	ldr	r2, [r4, #24]
10005f3a:	69e3      	ldr	r3, [r4, #28]
10005f3c:	f3bf 8f5f 	dmb	sy
    *lock = 0;
10005f40:	2100      	movs	r1, #0
10005f42:	6011      	str	r1, [r2, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10005f44:	f383 8810 	msr	PRIMASK, r3
}
10005f48:	b005      	add	sp, #20
10005f4a:	bd30      	pop	{r4, r5, pc}
10005f4c:	20011e64 	.word	0x20011e64

10005f50 <dcd_event_xfer_complete>:
{
10005f50:	b5f0      	push	{r4, r5, r6, r7, lr}
10005f52:	46c6      	mov	lr, r8
10005f54:	4680      	mov	r8, r0
10005f56:	b500      	push	{lr}
10005f58:	b084      	sub	sp, #16
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
10005f5a:	ac01      	add	r4, sp, #4
{
10005f5c:	000f      	movs	r7, r1
10005f5e:	0016      	movs	r6, r2
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
10005f60:	2100      	movs	r1, #0
10005f62:	2208      	movs	r2, #8
10005f64:	0020      	movs	r0, r4
{
10005f66:	001d      	movs	r5, r3
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
10005f68:	f7fb f8bc 	bl	100010e4 <__wrap_memset>
10005f6c:	4643      	mov	r3, r8
10005f6e:	7023      	strb	r3, [r4, #0]
10005f70:	2307      	movs	r3, #7
10005f72:	7063      	strb	r3, [r4, #1]
      osal_queue_send(_usbd_q, event, in_isr);
10005f74:	4b0f      	ldr	r3, [pc, #60]	; (10005fb4 <dcd_event_xfer_complete+0x64>)
  event.xfer_complete.result  = result;
10005f76:	7165      	strb	r5, [r4, #5]
      osal_queue_send(_usbd_q, event, in_isr);
10005f78:	681d      	ldr	r5, [r3, #0]
  event.xfer_complete.ep_addr = ep_addr;
10005f7a:	7127      	strb	r7, [r4, #4]
  event.xfer_complete.len     = xferred_bytes;
10005f7c:	60a6      	str	r6, [r4, #8]
    critsec->save = spin_lock_blocking(critsec->core.spin_lock);
10005f7e:	69aa      	ldr	r2, [r5, #24]
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
10005f80:	f3ef 8310 	mrs	r3, PRIMASK
    __asm volatile ("cpsid i");
10005f84:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
10005f86:	6811      	ldr	r1, [r2, #0]
10005f88:	2900      	cmp	r1, #0
10005f8a:	d0fc      	beq.n	10005f86 <dcd_event_xfer_complete+0x36>
    __asm volatile ("dmb");
10005f8c:	f3bf 8f5f 	dmb	sy
10005f90:	61eb      	str	r3, [r5, #28]
10005f92:	0021      	movs	r1, r4
10005f94:	0028      	movs	r0, r5
10005f96:	f7ff fa03 	bl	100053a0 <tu_fifo_write>
    spin_unlock(critsec->core.spin_lock, critsec->save);
10005f9a:	69aa      	ldr	r2, [r5, #24]
10005f9c:	69eb      	ldr	r3, [r5, #28]
10005f9e:	f3bf 8f5f 	dmb	sy
    *lock = 0;
10005fa2:	2100      	movs	r1, #0
10005fa4:	6011      	str	r1, [r2, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10005fa6:	f383 8810 	msr	PRIMASK, r3
}
10005faa:	b004      	add	sp, #16
10005fac:	bc80      	pop	{r7}
10005fae:	46b8      	mov	r8, r7
10005fb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
10005fb2:	46c0      	nop			; (mov r8, r8)
10005fb4:	20011e64 	.word	0x20011e64

10005fb8 <usbd_open_edpt_pair>:
{
10005fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10005fba:	4647      	mov	r7, r8
10005fbc:	46d6      	mov	lr, sl
10005fbe:	b580      	push	{r7, lr}
10005fc0:	4698      	mov	r8, r3
10005fc2:	9b08      	ldr	r3, [sp, #32]
10005fc4:	0006      	movs	r6, r0
10005fc6:	000c      	movs	r4, r1
10005fc8:	1e17      	subs	r7, r2, #0
10005fca:	469a      	mov	sl, r3
  for(int i=0; i<ep_count; i++)
10005fcc:	d021      	beq.n	10006012 <usbd_open_edpt_pair+0x5a>
10005fce:	2500      	movs	r5, #0
10005fd0:	e006      	b.n	10005fe0 <usbd_open_edpt_pair+0x28>
      (*ep_out) = desc_ep->bEndpointAddress;
10005fd2:	4652      	mov	r2, sl
10005fd4:	7013      	strb	r3, [r2, #0]
10005fd6:	7823      	ldrb	r3, [r4, #0]
  for(int i=0; i<ep_count; i++)
10005fd8:	3501      	adds	r5, #1
10005fda:	18e4      	adds	r4, r4, r3
10005fdc:	42bd      	cmp	r5, r7
10005fde:	da18      	bge.n	10006012 <usbd_open_edpt_pair+0x5a>
    TU_ASSERT(TUSB_DESC_ENDPOINT == desc_ep->bDescriptorType && xfer_type == desc_ep->bmAttributes.xfer);
10005fe0:	7863      	ldrb	r3, [r4, #1]
10005fe2:	2b05      	cmp	r3, #5
10005fe4:	d117      	bne.n	10006016 <usbd_open_edpt_pair+0x5e>
10005fe6:	78e1      	ldrb	r1, [r4, #3]
10005fe8:	0789      	lsls	r1, r1, #30
10005fea:	0f89      	lsrs	r1, r1, #30
10005fec:	4541      	cmp	r1, r8
10005fee:	d112      	bne.n	10006016 <usbd_open_edpt_pair+0x5e>
  return dcd_edpt_open(rhport, desc_ep);
10005ff0:	0021      	movs	r1, r4
10005ff2:	0030      	movs	r0, r6
10005ff4:	f000 facc 	bl	10006590 <dcd_edpt_open>
    TU_ASSERT(usbd_edpt_open(rhport, desc_ep));
10005ff8:	2800      	cmp	r0, #0
10005ffa:	d00c      	beq.n	10006016 <usbd_open_edpt_pair+0x5e>
    if ( tu_edpt_dir(desc_ep->bEndpointAddress) == TUSB_DIR_IN )
10005ffc:	78a3      	ldrb	r3, [r4, #2]
10005ffe:	09da      	lsrs	r2, r3, #7
10006000:	2a01      	cmp	r2, #1
10006002:	d1e6      	bne.n	10005fd2 <usbd_open_edpt_pair+0x1a>
      (*ep_in) = desc_ep->bEndpointAddress;
10006004:	9a09      	ldr	r2, [sp, #36]	; 0x24
  for(int i=0; i<ep_count; i++)
10006006:	3501      	adds	r5, #1
      (*ep_out) = desc_ep->bEndpointAddress;
10006008:	7013      	strb	r3, [r2, #0]
1000600a:	7823      	ldrb	r3, [r4, #0]
1000600c:	18e4      	adds	r4, r4, r3
  for(int i=0; i<ep_count; i++)
1000600e:	42bd      	cmp	r5, r7
10006010:	dbe6      	blt.n	10005fe0 <usbd_open_edpt_pair+0x28>
  return true;
10006012:	2001      	movs	r0, #1
10006014:	e000      	b.n	10006018 <usbd_open_edpt_pair+0x60>
    TU_ASSERT(TUSB_DESC_ENDPOINT == desc_ep->bDescriptorType && xfer_type == desc_ep->bmAttributes.xfer);
10006016:	2000      	movs	r0, #0
}
10006018:	bcc0      	pop	{r6, r7}
1000601a:	46ba      	mov	sl, r7
1000601c:	46b0      	mov	r8, r6
1000601e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10006020 <usbd_edpt_open>:
{
10006020:	b510      	push	{r4, lr}
  return dcd_edpt_open(rhport, desc_ep);
10006022:	f000 fab5 	bl	10006590 <dcd_edpt_open>
}
10006026:	bd10      	pop	{r4, pc}

10006028 <usbd_edpt_claim>:
{
10006028:	b570      	push	{r4, r5, r6, lr}
  TU_VERIFY((_usbd_dev.ep_status[epnum][dir].busy == 0) && (_usbd_dev.ep_status[epnum][dir].claimed == 0));
1000602a:	247f      	movs	r4, #127	; 0x7f
1000602c:	400c      	ands	r4, r1
1000602e:	0063      	lsls	r3, r4, #1
10006030:	4c14      	ldr	r4, [pc, #80]	; (10006084 <usbd_edpt_claim+0x5c>)
10006032:	09c9      	lsrs	r1, r1, #7
10006034:	18e4      	adds	r4, r4, r3
10006036:	1864      	adds	r4, r4, r1
10006038:	3420      	adds	r4, #32
1000603a:	7963      	ldrb	r3, [r4, #5]
1000603c:	07db      	lsls	r3, r3, #31
1000603e:	0fdd      	lsrs	r5, r3, #31
10006040:	2b00      	cmp	r3, #0
10006042:	d118      	bne.n	10006076 <usbd_edpt_claim+0x4e>
10006044:	7963      	ldrb	r3, [r4, #5]
10006046:	075b      	lsls	r3, r3, #29
10006048:	d501      	bpl.n	1000604e <usbd_edpt_claim+0x26>
}
1000604a:	0028      	movs	r0, r5
1000604c:	bd70      	pop	{r4, r5, r6, pc}
    return mutex_enter_timeout_ms(mutex_hdl, msec);
1000604e:	2101      	movs	r1, #1
  osal_mutex_lock(_usbd_mutex, OSAL_TIMEOUT_WAIT_FOREVER);
10006050:	4e0d      	ldr	r6, [pc, #52]	; (10006088 <usbd_edpt_claim+0x60>)
10006052:	4249      	negs	r1, r1
10006054:	6830      	ldr	r0, [r6, #0]
10006056:	f00a f97b 	bl	10010350 <__mutex_enter_timeout_ms_veneer>
  bool const ret = (_usbd_dev.ep_status[epnum][dir].busy == 0) && (_usbd_dev.ep_status[epnum][dir].claimed == 0);
1000605a:	7963      	ldrb	r3, [r4, #5]
1000605c:	07db      	lsls	r3, r3, #31
1000605e:	0fdd      	lsrs	r5, r3, #31
10006060:	2b00      	cmp	r3, #0
10006062:	d10a      	bne.n	1000607a <usbd_edpt_claim+0x52>
10006064:	7963      	ldrb	r3, [r4, #5]
10006066:	075b      	lsls	r3, r3, #29
10006068:	d408      	bmi.n	1000607c <usbd_edpt_claim+0x54>
    _usbd_dev.ep_status[epnum][dir].claimed = 1;
1000606a:	2204      	movs	r2, #4
1000606c:	7963      	ldrb	r3, [r4, #5]
  bool const ret = (_usbd_dev.ep_status[epnum][dir].busy == 0) && (_usbd_dev.ep_status[epnum][dir].claimed == 0);
1000606e:	2501      	movs	r5, #1
    _usbd_dev.ep_status[epnum][dir].claimed = 1;
10006070:	4313      	orrs	r3, r2
10006072:	7163      	strb	r3, [r4, #5]
10006074:	e002      	b.n	1000607c <usbd_edpt_claim+0x54>
  TU_VERIFY((_usbd_dev.ep_status[epnum][dir].busy == 0) && (_usbd_dev.ep_status[epnum][dir].claimed == 0));
10006076:	2500      	movs	r5, #0
10006078:	e7e7      	b.n	1000604a <usbd_edpt_claim+0x22>
  bool const ret = (_usbd_dev.ep_status[epnum][dir].busy == 0) && (_usbd_dev.ep_status[epnum][dir].claimed == 0);
1000607a:	2500      	movs	r5, #0
    mutex_exit(mutex_hdl);
1000607c:	6830      	ldr	r0, [r6, #0]
1000607e:	f00a f947 	bl	10010310 <__mutex_exit_veneer>
  return ret;
10006082:	e7e2      	b.n	1000604a <usbd_edpt_claim+0x22>
10006084:	20011e28 	.word	0x20011e28
10006088:	20011e60 	.word	0x20011e60

1000608c <usbd_edpt_release>:
{
1000608c:	b570      	push	{r4, r5, r6, lr}
1000608e:	000c      	movs	r4, r1
    return mutex_enter_timeout_ms(mutex_hdl, msec);
10006090:	2101      	movs	r1, #1
  osal_mutex_lock(_usbd_mutex, OSAL_TIMEOUT_WAIT_FOREVER);
10006092:	4d0f      	ldr	r5, [pc, #60]	; (100060d0 <usbd_edpt_release+0x44>)
10006094:	4249      	negs	r1, r1
10006096:	6828      	ldr	r0, [r5, #0]
10006098:	f00a f95a 	bl	10010350 <__mutex_enter_timeout_ms_veneer>
  bool const ret = (_usbd_dev.ep_status[epnum][dir].busy == 0) && (_usbd_dev.ep_status[epnum][dir].claimed == 1);
1000609c:	217f      	movs	r1, #127	; 0x7f
1000609e:	4021      	ands	r1, r4
100060a0:	004b      	lsls	r3, r1, #1
100060a2:	490c      	ldr	r1, [pc, #48]	; (100060d4 <usbd_edpt_release+0x48>)
100060a4:	09e4      	lsrs	r4, r4, #7
100060a6:	18c9      	adds	r1, r1, r3
100060a8:	1909      	adds	r1, r1, r4
100060aa:	3120      	adds	r1, #32
100060ac:	794b      	ldrb	r3, [r1, #5]
100060ae:	2400      	movs	r4, #0
100060b0:	07db      	lsls	r3, r3, #31
100060b2:	d408      	bmi.n	100060c6 <usbd_edpt_release+0x3a>
100060b4:	794b      	ldrb	r3, [r1, #5]
100060b6:	075b      	lsls	r3, r3, #29
100060b8:	0fdc      	lsrs	r4, r3, #31
100060ba:	2b00      	cmp	r3, #0
100060bc:	da03      	bge.n	100060c6 <usbd_edpt_release+0x3a>
    _usbd_dev.ep_status[epnum][dir].claimed = 0;
100060be:	2204      	movs	r2, #4
100060c0:	794b      	ldrb	r3, [r1, #5]
100060c2:	4393      	bics	r3, r2
100060c4:	714b      	strb	r3, [r1, #5]
    mutex_exit(mutex_hdl);
100060c6:	6828      	ldr	r0, [r5, #0]
100060c8:	f00a f922 	bl	10010310 <__mutex_exit_veneer>
}
100060cc:	0020      	movs	r0, r4
100060ce:	bd70      	pop	{r4, r5, r6, pc}
100060d0:	20011e60 	.word	0x20011e60
100060d4:	20011e28 	.word	0x20011e28

100060d8 <usbd_edpt_xfer>:
{
100060d8:	b570      	push	{r4, r5, r6, lr}
  TU_ASSERT(_usbd_dev.ep_status[epnum][dir].busy == 0);
100060da:	257f      	movs	r5, #127	; 0x7f
100060dc:	4c0f      	ldr	r4, [pc, #60]	; (1000611c <usbd_edpt_xfer+0x44>)
100060de:	400d      	ands	r5, r1
100060e0:	006d      	lsls	r5, r5, #1
100060e2:	1964      	adds	r4, r4, r5
{
100060e4:	0006      	movs	r6, r0
  TU_ASSERT(_usbd_dev.ep_status[epnum][dir].busy == 0);
100060e6:	09c8      	lsrs	r0, r1, #7
100060e8:	1824      	adds	r4, r4, r0
100060ea:	3420      	adds	r4, #32
100060ec:	7965      	ldrb	r5, [r4, #5]
100060ee:	2000      	movs	r0, #0
100060f0:	07ed      	lsls	r5, r5, #31
100060f2:	d500      	bpl.n	100060f6 <usbd_edpt_xfer+0x1e>
}
100060f4:	bd70      	pop	{r4, r5, r6, pc}
  _usbd_dev.ep_status[epnum][dir].busy = true;
100060f6:	2501      	movs	r5, #1
100060f8:	7960      	ldrb	r0, [r4, #5]
100060fa:	4328      	orrs	r0, r5
100060fc:	7160      	strb	r0, [r4, #5]
  if ( dcd_edpt_xfer(rhport, ep_addr, buffer, total_bytes) )
100060fe:	0030      	movs	r0, r6
10006100:	f000 faec 	bl	100066dc <dcd_edpt_xfer>
10006104:	2800      	cmp	r0, #0
10006106:	d1f5      	bne.n	100060f4 <usbd_edpt_xfer+0x1c>
    _usbd_dev.ep_status[epnum][dir].busy = false;
10006108:	2201      	movs	r2, #1
1000610a:	7963      	ldrb	r3, [r4, #5]
1000610c:	4393      	bics	r3, r2
1000610e:	7163      	strb	r3, [r4, #5]
    _usbd_dev.ep_status[epnum][dir].claimed = 0;
10006110:	7963      	ldrb	r3, [r4, #5]
10006112:	3203      	adds	r2, #3
10006114:	4393      	bics	r3, r2
10006116:	7163      	strb	r3, [r4, #5]
    return false;
10006118:	e7ec      	b.n	100060f4 <usbd_edpt_xfer+0x1c>
1000611a:	46c0      	nop			; (mov r8, r8)
1000611c:	20011e28 	.word	0x20011e28

10006120 <tud_control_status>:
  return dcd_edpt_xfer(rhport, ep_addr, NULL, 0);
}

// Status phase
bool tud_control_status(uint8_t rhport, tusb_control_request_t const * request)
{
10006120:	b570      	push	{r4, r5, r6, lr}
  _ctrl_xfer.request       = (*request);
10006122:	4e0a      	ldr	r6, [pc, #40]	; (1000614c <tud_control_status+0x2c>)
{
10006124:	0005      	movs	r5, r0
  _ctrl_xfer.request       = (*request);
10006126:	0030      	movs	r0, r6
10006128:	2208      	movs	r2, #8
{
1000612a:	000c      	movs	r4, r1
  _ctrl_xfer.request       = (*request);
1000612c:	f7fa ffe0 	bl	100010f0 <__wrap___aeabi_memcpy>
  _ctrl_xfer.buffer        = NULL;
10006130:	2300      	movs	r3, #0
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
10006132:	217f      	movs	r1, #127	; 0x7f
  _ctrl_xfer.total_xferred = 0;
  _ctrl_xfer.data_len      = 0;
10006134:	60f3      	str	r3, [r6, #12]
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
10006136:	7822      	ldrb	r2, [r4, #0]
  _ctrl_xfer.buffer        = NULL;
10006138:	60b3      	str	r3, [r6, #8]
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
1000613a:	4291      	cmp	r1, r2
1000613c:	415b      	adcs	r3, r3
  return dcd_edpt_xfer(rhport, ep_addr, NULL, 0);
1000613e:	0028      	movs	r0, r5
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
10006140:	01d9      	lsls	r1, r3, #7
  return dcd_edpt_xfer(rhport, ep_addr, NULL, 0);
10006142:	2200      	movs	r2, #0
10006144:	2300      	movs	r3, #0
10006146:	f000 fac9 	bl	100066dc <dcd_edpt_xfer>

  return _status_stage_xact(rhport, request);
}
1000614a:	bd70      	pop	{r4, r5, r6, pc}
1000614c:	20011dcc 	.word	0x20011dcc

10006150 <tud_control_xfer>:
}

// Transmit data to/from the control endpoint.
// If the request's wLength is zero, a status packet is sent instead.
bool tud_control_xfer(uint8_t rhport, tusb_control_request_t const * request, void* buffer, uint16_t len)
{
10006150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10006152:	46ce      	mov	lr, r9
10006154:	4647      	mov	r7, r8
10006156:	4691      	mov	r9, r2
  _ctrl_xfer.request       = (*request);
10006158:	4e2a      	ldr	r6, [pc, #168]	; (10006204 <tud_control_xfer+0xb4>)
{
1000615a:	b580      	push	{r7, lr}
  _ctrl_xfer.request       = (*request);
1000615c:	2208      	movs	r2, #8
{
1000615e:	0007      	movs	r7, r0
  _ctrl_xfer.request       = (*request);
10006160:	0030      	movs	r0, r6
{
10006162:	000d      	movs	r5, r1
10006164:	4698      	mov	r8, r3
  _ctrl_xfer.request       = (*request);
10006166:	f7fa ffc3 	bl	100010f0 <__wrap___aeabi_memcpy>
  _ctrl_xfer.buffer        = (uint8_t*) buffer;
1000616a:	464b      	mov	r3, r9
1000616c:	60b3      	str	r3, [r6, #8]
  _ctrl_xfer.total_xferred = 0U;
1000616e:	2300      	movs	r3, #0
10006170:	81f3      	strh	r3, [r6, #14]
  _ctrl_xfer.data_len      = tu_min16(len, request->wLength);
10006172:	79ec      	ldrb	r4, [r5, #7]
10006174:	79a9      	ldrb	r1, [r5, #6]
10006176:	0224      	lsls	r4, r4, #8
10006178:	430c      	orrs	r4, r1
static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
1000617a:	1c23      	adds	r3, r4, #0
1000617c:	4544      	cmp	r4, r8
1000617e:	d900      	bls.n	10006182 <tud_control_xfer+0x32>
10006180:	4643      	mov	r3, r8
10006182:	b29a      	uxth	r2, r3
10006184:	4690      	mov	r8, r2
10006186:	81b3      	strh	r3, [r6, #12]
  
  if (request->wLength > 0U)
10006188:	2c00      	cmp	r4, #0
1000618a:	d013      	beq.n	100061b4 <tud_control_xfer+0x64>
  {
    if(_ctrl_xfer.data_len > 0U)
1000618c:	2a00      	cmp	r2, #0
1000618e:	d01f      	beq.n	100061d0 <tud_control_xfer+0x80>
    {
      TU_ASSERT(buffer);
10006190:	464b      	mov	r3, r9
10006192:	2b00      	cmp	r3, #0
10006194:	d034      	beq.n	10006200 <tud_control_xfer+0xb0>
10006196:	1c13      	adds	r3, r2, #0
10006198:	2a40      	cmp	r2, #64	; 0x40
1000619a:	d81f      	bhi.n	100061dc <tud_control_xfer+0x8c>
1000619c:	b29b      	uxth	r3, r3
1000619e:	4698      	mov	r8, r3
  if ( _ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_IN )
100061a0:	7833      	ldrb	r3, [r6, #0]
100061a2:	2b7f      	cmp	r3, #127	; 0x7f
100061a4:	d820      	bhi.n	100061e8 <tud_control_xfer+0x98>
100061a6:	2100      	movs	r1, #0
  return dcd_edpt_xfer(rhport, ep_addr, xact_len ? _usbd_ctrl_buf : NULL, xact_len);
100061a8:	4a17      	ldr	r2, [pc, #92]	; (10006208 <tud_control_xfer+0xb8>)
100061aa:	4643      	mov	r3, r8
100061ac:	0038      	movs	r0, r7
100061ae:	f000 fa95 	bl	100066dc <dcd_edpt_xfer>
100061b2:	e009      	b.n	100061c8 <tud_control_xfer+0x78>
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
100061b4:	227f      	movs	r2, #127	; 0x7f
100061b6:	782b      	ldrb	r3, [r5, #0]
  return dcd_edpt_xfer(rhport, ep_addr, NULL, 0);
100061b8:	0038      	movs	r0, r7
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
100061ba:	429a      	cmp	r2, r3
100061bc:	4164      	adcs	r4, r4
  return dcd_edpt_xfer(rhport, ep_addr, NULL, 0);
100061be:	2300      	movs	r3, #0
100061c0:	2200      	movs	r2, #0
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
100061c2:	01e1      	lsls	r1, r4, #7
  return dcd_edpt_xfer(rhport, ep_addr, NULL, 0);
100061c4:	f000 fa8a 	bl	100066dc <dcd_edpt_xfer>
    // Status stage
    TU_ASSERT( _status_stage_xact(rhport, request) );
  }

  return true;
}
100061c8:	bcc0      	pop	{r6, r7}
100061ca:	46b9      	mov	r9, r7
100061cc:	46b0      	mov	r8, r6
100061ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ( _ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_IN )
100061d0:	7833      	ldrb	r3, [r6, #0]
100061d2:	2b7f      	cmp	r3, #127	; 0x7f
100061d4:	d911      	bls.n	100061fa <tud_control_xfer+0xaa>
    ep_addr = EDPT_CTRL_IN;
100061d6:	2180      	movs	r1, #128	; 0x80
  return dcd_edpt_xfer(rhport, ep_addr, xact_len ? _usbd_ctrl_buf : NULL, xact_len);
100061d8:	2200      	movs	r2, #0
100061da:	e7e6      	b.n	100061aa <tud_control_xfer+0x5a>
100061dc:	2340      	movs	r3, #64	; 0x40
100061de:	b29b      	uxth	r3, r3
100061e0:	4698      	mov	r8, r3
  if ( _ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_IN )
100061e2:	7833      	ldrb	r3, [r6, #0]
100061e4:	2b7f      	cmp	r3, #127	; 0x7f
100061e6:	d9de      	bls.n	100061a6 <tud_control_xfer+0x56>
    if ( xact_len ) memcpy(_usbd_ctrl_buf, _ctrl_xfer.buffer, xact_len);
100061e8:	4c07      	ldr	r4, [pc, #28]	; (10006208 <tud_control_xfer+0xb8>)
100061ea:	4642      	mov	r2, r8
100061ec:	4649      	mov	r1, r9
100061ee:	0020      	movs	r0, r4
100061f0:	f7fa ff7e 	bl	100010f0 <__wrap___aeabi_memcpy>
    ep_addr = EDPT_CTRL_IN;
100061f4:	2180      	movs	r1, #128	; 0x80
  return dcd_edpt_xfer(rhport, ep_addr, xact_len ? _usbd_ctrl_buf : NULL, xact_len);
100061f6:	0022      	movs	r2, r4
100061f8:	e7d7      	b.n	100061aa <tud_control_xfer+0x5a>
  if ( _ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_IN )
100061fa:	2100      	movs	r1, #0
  return dcd_edpt_xfer(rhport, ep_addr, xact_len ? _usbd_ctrl_buf : NULL, xact_len);
100061fc:	2200      	movs	r2, #0
100061fe:	e7d4      	b.n	100061aa <tud_control_xfer+0x5a>
      TU_ASSERT(buffer);
10006200:	2000      	movs	r0, #0
10006202:	e7e1      	b.n	100061c8 <tud_control_xfer+0x78>
10006204:	20011dcc 	.word	0x20011dcc
10006208:	20011de8 	.word	0x20011de8

1000620c <usbd_control_reset>:
//--------------------------------------------------------------------+
// USBD API
//--------------------------------------------------------------------+

void usbd_control_reset(void)
{
1000620c:	b510      	push	{r4, lr}
  tu_varclr(&_ctrl_xfer);
1000620e:	2214      	movs	r2, #20
10006210:	2100      	movs	r1, #0
10006212:	4802      	ldr	r0, [pc, #8]	; (1000621c <usbd_control_reset+0x10>)
10006214:	f7fa ff66 	bl	100010e4 <__wrap_memset>
}
10006218:	bd10      	pop	{r4, pc}
1000621a:	46c0      	nop			; (mov r8, r8)
1000621c:	20011dcc 	.word	0x20011dcc

10006220 <usbd_control_set_complete_callback>:

// TODO may find a better way
void usbd_control_set_complete_callback( bool (*fp) (uint8_t, tusb_control_request_t const * ) )
{
  _ctrl_xfer.complete_cb = fp;
10006220:	4b01      	ldr	r3, [pc, #4]	; (10006228 <usbd_control_set_complete_callback+0x8>)
10006222:	6118      	str	r0, [r3, #16]
}
10006224:	4770      	bx	lr
10006226:	46c0      	nop			; (mov r8, r8)
10006228:	20011dcc 	.word	0x20011dcc

1000622c <usbd_control_set_request>:

// useful for dcd_set_address where DCD is responsible for status response
void usbd_control_set_request(tusb_control_request_t const *request)
{
1000622c:	b510      	push	{r4, lr}
  _ctrl_xfer.request       = (*request);
1000622e:	4c05      	ldr	r4, [pc, #20]	; (10006244 <usbd_control_set_request+0x18>)
{
10006230:	0001      	movs	r1, r0
  _ctrl_xfer.request       = (*request);
10006232:	2208      	movs	r2, #8
10006234:	0020      	movs	r0, r4
10006236:	f7fa ff5b 	bl	100010f0 <__wrap___aeabi_memcpy>
  _ctrl_xfer.buffer        = NULL;
1000623a:	2300      	movs	r3, #0
1000623c:	60a3      	str	r3, [r4, #8]
  _ctrl_xfer.total_xferred = 0;
  _ctrl_xfer.data_len      = 0;
1000623e:	60e3      	str	r3, [r4, #12]
}
10006240:	bd10      	pop	{r4, pc}
10006242:	46c0      	nop			; (mov r8, r8)
10006244:	20011dcc 	.word	0x20011dcc

10006248 <usbd_control_xfer_cb>:

// callback when a transaction complete on
// - DATA stage of control endpoint or
// - Status stage
bool usbd_control_xfer_cb (uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes)
{
10006248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  (void) result;

  // Endpoint Address is opposite to direction bit, this is Status Stage complete event
  if ( tu_edpt_dir(ep_addr) != _ctrl_xfer.request.bmRequestType_bit.direction )
1000624a:	4d37      	ldr	r5, [pc, #220]	; (10006328 <usbd_control_xfer_cb+0xe0>)
{
1000624c:	001c      	movs	r4, r3
  if ( tu_edpt_dir(ep_addr) != _ctrl_xfer.request.bmRequestType_bit.direction )
1000624e:	782b      	ldrb	r3, [r5, #0]
{
10006250:	0006      	movs	r6, r0
  if ( tu_edpt_dir(ep_addr) != _ctrl_xfer.request.bmRequestType_bit.direction )
10006252:	09da      	lsrs	r2, r3, #7
10006254:	09c9      	lsrs	r1, r1, #7
10006256:	428a      	cmp	r2, r1
10006258:	d00c      	beq.n	10006274 <usbd_control_xfer_cb+0x2c>
  {
    TU_ASSERT(0 == xferred_bytes);
1000625a:	2700      	movs	r7, #0
1000625c:	2c00      	cmp	r4, #0
1000625e:	d001      	beq.n	10006264 <usbd_control_xfer_cb+0x1c>
    // More data to transfer
    TU_ASSERT( _data_stage_xact(rhport) );
  }

  return true;
}
10006260:	0038      	movs	r0, r7
10006262:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (dcd_edpt0_status_complete) dcd_edpt0_status_complete(rhport, &_ctrl_xfer.request);
10006264:	4b31      	ldr	r3, [pc, #196]	; (1000632c <usbd_control_xfer_cb+0xe4>)
    return true;
10006266:	3701      	adds	r7, #1
    if (dcd_edpt0_status_complete) dcd_edpt0_status_complete(rhport, &_ctrl_xfer.request);
10006268:	2b00      	cmp	r3, #0
1000626a:	d0f9      	beq.n	10006260 <usbd_control_xfer_cb+0x18>
1000626c:	0029      	movs	r1, r5
1000626e:	f000 f973 	bl	10006558 <dcd_edpt0_status_complete>
10006272:	e7f5      	b.n	10006260 <usbd_control_xfer_cb+0x18>
  if ( _ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_OUT )
10006274:	2b7f      	cmp	r3, #127	; 0x7f
10006276:	d806      	bhi.n	10006286 <usbd_control_xfer_cb+0x3e>
    TU_VERIFY(_ctrl_xfer.buffer);
10006278:	68a8      	ldr	r0, [r5, #8]
1000627a:	2800      	cmp	r0, #0
1000627c:	d038      	beq.n	100062f0 <usbd_control_xfer_cb+0xa8>
    memcpy(_ctrl_xfer.buffer, _usbd_ctrl_buf, xferred_bytes);
1000627e:	0022      	movs	r2, r4
10006280:	492b      	ldr	r1, [pc, #172]	; (10006330 <usbd_control_xfer_cb+0xe8>)
10006282:	f7fa ff35 	bl	100010f0 <__wrap___aeabi_memcpy>
  _ctrl_xfer.buffer += xferred_bytes;
10006286:	68ab      	ldr	r3, [r5, #8]
  _ctrl_xfer.total_xferred += xferred_bytes;
10006288:	89ea      	ldrh	r2, [r5, #14]
  _ctrl_xfer.buffer += xferred_bytes;
1000628a:	1919      	adds	r1, r3, r4
  _ctrl_xfer.total_xferred += xferred_bytes;
1000628c:	1912      	adds	r2, r2, r4
  if ( (_ctrl_xfer.request.wLength == _ctrl_xfer.total_xferred) || (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE) )
1000628e:	88eb      	ldrh	r3, [r5, #6]
  _ctrl_xfer.total_xferred += xferred_bytes;
10006290:	b292      	uxth	r2, r2
10006292:	81ea      	strh	r2, [r5, #14]
  _ctrl_xfer.buffer += xferred_bytes;
10006294:	60a9      	str	r1, [r5, #8]
  if ( (_ctrl_xfer.request.wLength == _ctrl_xfer.total_xferred) || (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE) )
10006296:	4293      	cmp	r3, r2
10006298:	d015      	beq.n	100062c6 <usbd_control_xfer_cb+0x7e>
1000629a:	2c3f      	cmp	r4, #63	; 0x3f
1000629c:	d913      	bls.n	100062c6 <usbd_control_xfer_cb+0x7e>
  uint16_t const xact_len = tu_min16(_ctrl_xfer.data_len - _ctrl_xfer.total_xferred, CFG_TUD_ENDPOINT0_SIZE);
1000629e:	89ac      	ldrh	r4, [r5, #12]
100062a0:	1aa0      	subs	r0, r4, r2
100062a2:	1c07      	adds	r7, r0, #0
100062a4:	b280      	uxth	r0, r0
100062a6:	2840      	cmp	r0, #64	; 0x40
100062a8:	d82e      	bhi.n	10006308 <usbd_control_xfer_cb+0xc0>
  if ( _ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_IN )
100062aa:	782b      	ldrb	r3, [r5, #0]
100062ac:	b2bf      	uxth	r7, r7
100062ae:	2b7f      	cmp	r3, #127	; 0x7f
100062b0:	d82c      	bhi.n	1000630c <usbd_control_xfer_cb+0xc4>
  uint8_t ep_addr = EDPT_CTRL_OUT;
100062b2:	2100      	movs	r1, #0
  return dcd_edpt_xfer(rhport, ep_addr, xact_len ? _usbd_ctrl_buf : NULL, xact_len);
100062b4:	42a2      	cmp	r2, r4
100062b6:	d034      	beq.n	10006322 <usbd_control_xfer_cb+0xda>
100062b8:	4a1d      	ldr	r2, [pc, #116]	; (10006330 <usbd_control_xfer_cb+0xe8>)
100062ba:	003b      	movs	r3, r7
100062bc:	0030      	movs	r0, r6
100062be:	f000 fa0d 	bl	100066dc <dcd_edpt_xfer>
100062c2:	0007      	movs	r7, r0
100062c4:	e7cc      	b.n	10006260 <usbd_control_xfer_cb+0x18>
    if ( _ctrl_xfer.complete_cb )
100062c6:	692b      	ldr	r3, [r5, #16]
100062c8:	2b00      	cmp	r3, #0
100062ca:	d004      	beq.n	100062d6 <usbd_control_xfer_cb+0x8e>
      is_ok = _ctrl_xfer.complete_cb(rhport, &_ctrl_xfer.request);
100062cc:	0029      	movs	r1, r5
100062ce:	0030      	movs	r0, r6
100062d0:	4798      	blx	r3
    if ( is_ok )
100062d2:	2800      	cmp	r0, #0
100062d4:	d00e      	beq.n	100062f4 <usbd_control_xfer_cb+0xac>
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
100062d6:	227f      	movs	r2, #127	; 0x7f
100062d8:	2100      	movs	r1, #0
100062da:	782b      	ldrb	r3, [r5, #0]
  return dcd_edpt_xfer(rhport, ep_addr, NULL, 0);
100062dc:	0030      	movs	r0, r6
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
100062de:	429a      	cmp	r2, r3
100062e0:	4149      	adcs	r1, r1
  return dcd_edpt_xfer(rhport, ep_addr, NULL, 0);
100062e2:	2300      	movs	r3, #0
100062e4:	2200      	movs	r2, #0
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
100062e6:	01c9      	lsls	r1, r1, #7
  return dcd_edpt_xfer(rhport, ep_addr, NULL, 0);
100062e8:	f000 f9f8 	bl	100066dc <dcd_edpt_xfer>
100062ec:	0007      	movs	r7, r0
100062ee:	e7b7      	b.n	10006260 <usbd_control_xfer_cb+0x18>
    TU_ASSERT(0 == xferred_bytes);
100062f0:	2700      	movs	r7, #0
100062f2:	e7b5      	b.n	10006260 <usbd_control_xfer_cb+0x18>
      dcd_edpt_stall(rhport, EDPT_CTRL_OUT);
100062f4:	2100      	movs	r1, #0
100062f6:	0030      	movs	r0, r6
100062f8:	f000 fa06 	bl	10006708 <dcd_edpt_stall>
      dcd_edpt_stall(rhport, EDPT_CTRL_IN);
100062fc:	2180      	movs	r1, #128	; 0x80
100062fe:	0030      	movs	r0, r6
10006300:	f000 fa02 	bl	10006708 <dcd_edpt_stall>
  return true;
10006304:	2701      	movs	r7, #1
10006306:	e7ab      	b.n	10006260 <usbd_control_xfer_cb+0x18>
10006308:	2740      	movs	r7, #64	; 0x40
1000630a:	e7ce      	b.n	100062aa <usbd_control_xfer_cb+0x62>
    if ( xact_len ) memcpy(_usbd_ctrl_buf, _ctrl_xfer.buffer, xact_len);
1000630c:	42a2      	cmp	r2, r4
1000630e:	d007      	beq.n	10006320 <usbd_control_xfer_cb+0xd8>
10006310:	4c07      	ldr	r4, [pc, #28]	; (10006330 <usbd_control_xfer_cb+0xe8>)
10006312:	003a      	movs	r2, r7
10006314:	0020      	movs	r0, r4
10006316:	f7fa feeb 	bl	100010f0 <__wrap___aeabi_memcpy>
    ep_addr = EDPT_CTRL_IN;
1000631a:	2180      	movs	r1, #128	; 0x80
  return dcd_edpt_xfer(rhport, ep_addr, xact_len ? _usbd_ctrl_buf : NULL, xact_len);
1000631c:	0022      	movs	r2, r4
1000631e:	e7cc      	b.n	100062ba <usbd_control_xfer_cb+0x72>
    ep_addr = EDPT_CTRL_IN;
10006320:	2180      	movs	r1, #128	; 0x80
  return dcd_edpt_xfer(rhport, ep_addr, xact_len ? _usbd_ctrl_buf : NULL, xact_len);
10006322:	2200      	movs	r2, #0
10006324:	e7c9      	b.n	100062ba <usbd_control_xfer_cb+0x72>
10006326:	46c0      	nop			; (mov r8, r8)
10006328:	20011dcc 	.word	0x20011dcc
1000632c:	10006559 	.word	0x10006559
10006330:	20011de8 	.word	0x20011de8

10006334 <dcd_rp2040_irq>:
    _hw_endpoint_clear_stall(ep);
}

static void dcd_rp2040_irq(void)
{
    uint32_t status = usb_hw->ints;
10006334:	2398      	movs	r3, #152	; 0x98
{
10006336:	b5f0      	push	{r4, r5, r6, r7, lr}
10006338:	4645      	mov	r5, r8
1000633a:	46de      	mov	lr, fp
1000633c:	4657      	mov	r7, sl
1000633e:	464e      	mov	r6, r9
    uint32_t status = usb_hw->ints;
10006340:	4a42      	ldr	r2, [pc, #264]	; (1000644c <dcd_rp2040_irq+0x118>)
{
10006342:	b5e0      	push	{r5, r6, r7, lr}
    uint32_t status = usb_hw->ints;
10006344:	58d3      	ldr	r3, [r2, r3]
    uint32_t handled = 0;

    if (status & USB_INTS_SETUP_REQ_BITS)
10006346:	2480      	movs	r4, #128	; 0x80
    uint32_t status = usb_hw->ints;
10006348:	4698      	mov	r8, r3
    if (status & USB_INTS_SETUP_REQ_BITS)
1000634a:	001d      	movs	r5, r3
1000634c:	2310      	movs	r3, #16
{
1000634e:	b085      	sub	sp, #20
10006350:	9303      	str	r3, [sp, #12]
    if (status & USB_INTS_SETUP_REQ_BITS)
10006352:	4643      	mov	r3, r8
10006354:	0264      	lsls	r4, r4, #9
10006356:	4025      	ands	r5, r4
10006358:	4223      	tst	r3, r4
1000635a:	d014      	beq.n	10006386 <dcd_rp2040_irq+0x52>
        ep->next_pid = 1u;
1000635c:	2101      	movs	r1, #1
1000635e:	2039      	movs	r0, #57	; 0x39
        ep->stalled  = 0;
10006360:	2200      	movs	r2, #0
        ep->next_pid = 1u;
10006362:	4b3b      	ldr	r3, [pc, #236]	; (10006450 <dcd_rp2040_irq+0x11c>)
    {
        handled |= USB_INTS_SETUP_REQ_BITS;
10006364:	0025      	movs	r5, r4
        ep->next_pid = 1u;
10006366:	5419      	strb	r1, [r3, r0]
10006368:	7159      	strb	r1, [r3, #5]
        ep->stalled  = 0;
1000636a:	3147      	adds	r1, #71	; 0x47
1000636c:	545a      	strb	r2, [r3, r1]
1000636e:	751a      	strb	r2, [r3, #20]
        uint8_t const *setup = (uint8_t const *)&usb_dpram->setup_packet;
        // Clear stall bits and reset pid
        reset_ep0();
        // Pass setup packet to tiny usb
        dcd_event_setup_received(0, setup, true);
10006370:	2000      	movs	r0, #0
10006372:	3201      	adds	r2, #1
10006374:	4937      	ldr	r1, [pc, #220]	; (10006454 <dcd_rp2040_irq+0x120>)
10006376:	f7ff fdc3 	bl	10005f00 <dcd_event_setup_received>
        usb_hw_clear->sie_status = USB_SIE_STATUS_SETUP_REC_BITS;
1000637a:	2280      	movs	r2, #128	; 0x80
1000637c:	4b36      	ldr	r3, [pc, #216]	; (10006458 <dcd_rp2040_irq+0x124>)
1000637e:	0292      	lsls	r2, r2, #10
10006380:	651a      	str	r2, [r3, #80]	; 0x50
10006382:	4b36      	ldr	r3, [pc, #216]	; (1000645c <dcd_rp2040_irq+0x128>)
10006384:	9303      	str	r3, [sp, #12]
    }

    if (status & USB_INTS_BUFF_STATUS_BITS)
10006386:	4643      	mov	r3, r8
10006388:	06db      	lsls	r3, r3, #27
1000638a:	d40d      	bmi.n	100063a8 <dcd_rp2040_irq+0x74>
    {
        handled |= USB_INTS_BUFF_STATUS_BITS;
        hw_handle_buff_status();
    }

    if (status & USB_INTS_BUS_RESET_BITS)
1000638c:	2380      	movs	r3, #128	; 0x80
1000638e:	4642      	mov	r2, r8
10006390:	015b      	lsls	r3, r3, #5
10006392:	421a      	tst	r2, r3
10006394:	d138      	bne.n	10006408 <dcd_rp2040_irq+0xd4>
#if TUD_OPT_RP2040_USB_DEVICE_ENUMERATION_FIX
        rp2040_usb_device_enumeration_fix();
#endif
    }

    if (status ^ handled)
10006396:	4545      	cmp	r5, r8
10006398:	d152      	bne.n	10006440 <dcd_rp2040_irq+0x10c>
    {
        panic("Unhandled IRQ 0x%x\n", (uint) (status ^ handled));
    }
}
1000639a:	b005      	add	sp, #20
1000639c:	bcf0      	pop	{r4, r5, r6, r7}
1000639e:	46bb      	mov	fp, r7
100063a0:	46b2      	mov	sl, r6
100063a2:	46a9      	mov	r9, r5
100063a4:	46a0      	mov	r8, r4
100063a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint32_t remaining_buffers = usb_hw->buf_status;
100063a8:	4b28      	ldr	r3, [pc, #160]	; (1000644c <dcd_rp2040_irq+0x118>)
100063aa:	6d9f      	ldr	r7, [r3, #88]	; 0x58
100063ac:	469a      	mov	sl, r3
    for (uint i = 0; remaining_buffers && i < USB_MAX_ENDPOINTS * 2; i++)
100063ae:	2f00      	cmp	r7, #0
100063b0:	d024      	beq.n	100063fc <dcd_rp2040_irq+0xc8>
            usb_hw_clear->buf_status = bit;
100063b2:	4b29      	ldr	r3, [pc, #164]	; (10006458 <dcd_rp2040_irq+0x124>)
    for (uint i = 0; remaining_buffers && i < USB_MAX_ENDPOINTS * 2; i++)
100063b4:	2500      	movs	r5, #0
    uint bit = 1u;
100063b6:	2401      	movs	r4, #1
            usb_hw_clear->buf_status = bit;
100063b8:	469b      	mov	fp, r3
100063ba:	e003      	b.n	100063c4 <dcd_rp2040_irq+0x90>
        bit <<= 1u;
100063bc:	0064      	lsls	r4, r4, #1
    for (uint i = 0; remaining_buffers && i < USB_MAX_ENDPOINTS * 2; i++)
100063be:	3501      	adds	r5, #1
100063c0:	2d20      	cmp	r5, #32
100063c2:	d01b      	beq.n	100063fc <dcd_rp2040_irq+0xc8>
        if (remaining_buffers & bit)
100063c4:	4227      	tst	r7, r4
100063c6:	d0f9      	beq.n	100063bc <dcd_rp2040_irq+0x88>
            uint __unused which = (usb_hw->buf_cpu_should_handle & bit) ? 1 : 0;
100063c8:	4653      	mov	r3, sl
100063ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
            usb_hw_clear->buf_status = bit;
100063cc:	465b      	mov	r3, fp
    return &hw_endpoints[num][in];
100063ce:	2668      	movs	r6, #104	; 0x68
100063d0:	2201      	movs	r2, #1
            usb_hw_clear->buf_status = bit;
100063d2:	659c      	str	r4, [r3, #88]	; 0x58
            struct hw_endpoint *ep = hw_endpoint_get_by_num(i >> 1u, !(i & 1u));
100063d4:	086b      	lsrs	r3, r5, #1
    return &hw_endpoints[num][in];
100063d6:	435e      	muls	r6, r3
100063d8:	2334      	movs	r3, #52	; 0x34
100063da:	4691      	mov	r9, r2
100063dc:	43aa      	bics	r2, r5
100063de:	4353      	muls	r3, r2
100063e0:	18f6      	adds	r6, r6, r3
100063e2:	4b1b      	ldr	r3, [pc, #108]	; (10006450 <dcd_rp2040_irq+0x11c>)
100063e4:	469c      	mov	ip, r3
100063e6:	4466      	add	r6, ip
            bool done = _hw_endpoint_xfer_continue(ep);
100063e8:	0030      	movs	r0, r6
100063ea:	f000 fa3d 	bl	10006868 <_hw_endpoint_xfer_continue>
            if (done)
100063ee:	2800      	cmp	r0, #0
100063f0:	d11a      	bne.n	10006428 <dcd_rp2040_irq+0xf4>
            remaining_buffers &= ~bit;
100063f2:	43a7      	bics	r7, r4
    for (uint i = 0; remaining_buffers && i < USB_MAX_ENDPOINTS * 2; i++)
100063f4:	3501      	adds	r5, #1
        bit <<= 1u;
100063f6:	0064      	lsls	r4, r4, #1
    for (uint i = 0; remaining_buffers && i < USB_MAX_ENDPOINTS * 2; i++)
100063f8:	2f00      	cmp	r7, #0
100063fa:	d1e1      	bne.n	100063c0 <dcd_rp2040_irq+0x8c>
    if (status & USB_INTS_BUS_RESET_BITS)
100063fc:	2380      	movs	r3, #128	; 0x80
100063fe:	4642      	mov	r2, r8
10006400:	015b      	lsls	r3, r3, #5
        handled |= USB_INTS_BUFF_STATUS_BITS;
10006402:	9d03      	ldr	r5, [sp, #12]
    if (status & USB_INTS_BUS_RESET_BITS)
10006404:	421a      	tst	r2, r3
10006406:	d0c6      	beq.n	10006396 <dcd_rp2040_irq+0x62>
        assigned_address = 0;
10006408:	2200      	movs	r2, #0
1000640a:	4915      	ldr	r1, [pc, #84]	; (10006460 <dcd_rp2040_irq+0x12c>)
        dcd_event_bus_signal(0, DCD_EVENT_BUS_RESET, true);
1000640c:	2000      	movs	r0, #0
        assigned_address = 0;
1000640e:	700a      	strb	r2, [r1, #0]
        usb_hw->dev_addr_ctrl = assigned_address;
10006410:	490e      	ldr	r1, [pc, #56]	; (1000644c <dcd_rp2040_irq+0x118>)
        handled |= USB_INTS_BUS_RESET_BITS;
10006412:	431d      	orrs	r5, r3
        usb_hw->dev_addr_ctrl = assigned_address;
10006414:	600a      	str	r2, [r1, #0]
        dcd_event_bus_signal(0, DCD_EVENT_BUS_RESET, true);
10006416:	3201      	adds	r2, #1
10006418:	2101      	movs	r1, #1
1000641a:	f7ff fd01 	bl	10005e20 <dcd_event_bus_signal>
        usb_hw_clear->sie_status = USB_SIE_STATUS_BUS_RESET_BITS;
1000641e:	2280      	movs	r2, #128	; 0x80
10006420:	4b0d      	ldr	r3, [pc, #52]	; (10006458 <dcd_rp2040_irq+0x124>)
10006422:	0312      	lsls	r2, r2, #12
10006424:	651a      	str	r2, [r3, #80]	; 0x50
10006426:	e7b6      	b.n	10006396 <dcd_rp2040_irq+0x62>
                dcd_event_xfer_complete(0, ep->ep_addr, ep->len, XFER_RESULT_SUCCESS, true);
10006428:	464b      	mov	r3, r9
1000642a:	69f2      	ldr	r2, [r6, #28]
1000642c:	7931      	ldrb	r1, [r6, #4]
1000642e:	2000      	movs	r0, #0
10006430:	9300      	str	r3, [sp, #0]
10006432:	2300      	movs	r3, #0
10006434:	f7ff fd8c 	bl	10005f50 <dcd_event_xfer_complete>
                hw_endpoint_reset_transfer(ep);
10006438:	0030      	movs	r0, r6
1000643a:	f000 f9e9 	bl	10006810 <hw_endpoint_reset_transfer>
1000643e:	e7d8      	b.n	100063f2 <dcd_rp2040_irq+0xbe>
        panic("Unhandled IRQ 0x%x\n", (uint) (status ^ handled));
10006440:	4641      	mov	r1, r8
10006442:	4808      	ldr	r0, [pc, #32]	; (10006464 <dcd_rp2040_irq+0x130>)
10006444:	4069      	eors	r1, r5
10006446:	f7fd faeb 	bl	10003a20 <panic>
1000644a:	46c0      	nop			; (mov r8, r8)
1000644c:	50110000 	.word	0x50110000
10006450:	200120a8 	.word	0x200120a8
10006454:	50100000 	.word	0x50100000
10006458:	50113000 	.word	0x50113000
1000645c:	00010010 	.word	0x00010010
10006460:	20012773 	.word	0x20012773
10006464:	10010828 	.word	0x10010828

10006468 <dcd_int_enable>:

    dcd_connect(rhport);
}

void dcd_int_enable(uint8_t rhport)
{
10006468:	b510      	push	{r4, lr}
    assert(rhport == 0);
    irq_set_enabled(USBCTRL_IRQ, true);
1000646a:	2101      	movs	r1, #1
1000646c:	2005      	movs	r0, #5
1000646e:	f7fb fa0d 	bl	1000188c <irq_set_enabled>
}
10006472:	bd10      	pop	{r4, pc}

10006474 <dcd_set_address>:
{
    pico_trace("dcd_set_address %d %d\n", rhport, dev_addr);
    assert(rhport == 0);

    // Can't set device address in hardware until status xfer has complete
    assigned_address = dev_addr;
10006474:	4b09      	ldr	r3, [pc, #36]	; (1000649c <dcd_set_address+0x28>)
{
10006476:	b510      	push	{r4, lr}
        ep->next_pid = 1u;
10006478:	2201      	movs	r2, #1
    assigned_address = dev_addr;
1000647a:	7019      	strb	r1, [r3, #0]
        ep->next_pid = 1u;
1000647c:	2139      	movs	r1, #57	; 0x39
        ep->stalled  = 0;
1000647e:	2300      	movs	r3, #0
        ep->next_pid = 1u;
10006480:	4807      	ldr	r0, [pc, #28]	; (100064a0 <dcd_set_address+0x2c>)
10006482:	5442      	strb	r2, [r0, r1]
10006484:	7142      	strb	r2, [r0, #5]
        ep->stalled  = 0;
10006486:	3247      	adds	r2, #71	; 0x47
10006488:	5483      	strb	r3, [r0, r2]
1000648a:	7503      	strb	r3, [r0, #20]
    _hw_endpoint_xfer(ep, buffer, total_bytes, start);
1000648c:	2200      	movs	r2, #0
1000648e:	2100      	movs	r1, #0
10006490:	3034      	adds	r0, #52	; 0x34
10006492:	3301      	adds	r3, #1
10006494:	f000 fa68 	bl	10006968 <_hw_endpoint_xfer>

    ep0_0len_status();
}
10006498:	bd10      	pop	{r4, pc}
1000649a:	46c0      	nop			; (mov r8, r8)
1000649c:	20012773 	.word	0x20012773
100064a0:	200120a8 	.word	0x200120a8

100064a4 <dcd_connect>:
// connect by enabling internal pull-up resistor on D+/D-
void dcd_connect(uint8_t rhport)
{
    pico_info("dcd_connect %d\n", rhport);
    assert(rhport == 0);
    usb_hw_set->sie_ctrl = USB_SIE_CTRL_PULLUP_EN_BITS;
100064a4:	2280      	movs	r2, #128	; 0x80
100064a6:	4b02      	ldr	r3, [pc, #8]	; (100064b0 <dcd_connect+0xc>)
100064a8:	0252      	lsls	r2, r2, #9
100064aa:	64da      	str	r2, [r3, #76]	; 0x4c
}
100064ac:	4770      	bx	lr
100064ae:	46c0      	nop			; (mov r8, r8)
100064b0:	50112000 	.word	0x50112000

100064b4 <dcd_init>:
{
100064b4:	b570      	push	{r4, r5, r6, lr}
100064b6:	0005      	movs	r5, r0
    rp2040_usb_init();
100064b8:	f000 f982 	bl	100067c0 <rp2040_usb_init>
    irq_set_exclusive_handler(USBCTRL_IRQ, dcd_rp2040_irq);
100064bc:	2005      	movs	r0, #5
100064be:	491c      	ldr	r1, [pc, #112]	; (10006530 <dcd_init+0x7c>)
100064c0:	f7fb fa06 	bl	100018d0 <irq_set_exclusive_handler>
    memset(hw_endpoints, 0, sizeof(hw_endpoints));
100064c4:	22d0      	movs	r2, #208	; 0xd0
100064c6:	4c1b      	ldr	r4, [pc, #108]	; (10006534 <dcd_init+0x80>)
100064c8:	2100      	movs	r1, #0
100064ca:	0020      	movs	r0, r4
100064cc:	00d2      	lsls	r2, r2, #3
100064ce:	f7fa fe09 	bl	100010e4 <__wrap_memset>
    assigned_address = 0;
100064d2:	2200      	movs	r2, #0
100064d4:	4b18      	ldr	r3, [pc, #96]	; (10006538 <dcd_init+0x84>)
    next_buffer_ptr = &usb_dpram->epx_data[0];
100064d6:	4919      	ldr	r1, [pc, #100]	; (1000653c <dcd_init+0x88>)
    assigned_address = 0;
100064d8:	701a      	strb	r2, [r3, #0]
    next_buffer_ptr = &usb_dpram->epx_data[0];
100064da:	4b19      	ldr	r3, [pc, #100]	; (10006540 <dcd_init+0x8c>)
    ep->wMaxPacketSize = wMaxPacketSize;
100064dc:	2040      	movs	r0, #64	; 0x40
    next_buffer_ptr = &usb_dpram->epx_data[0];
100064de:	6019      	str	r1, [r3, #0]
    ep->in = in;
100064e0:	2635      	movs	r6, #53	; 0x35
    ep->rx = in == false;
100064e2:	2301      	movs	r3, #1
        ep->buffer_control = &usb_dpram->ep_buf_ctrl[num].out;
100064e4:	4917      	ldr	r1, [pc, #92]	; (10006544 <dcd_init+0x90>)
    ep->rx = in == false;
100064e6:	70e3      	strb	r3, [r4, #3]
    ep->next_pid = num == 0 ? 1u : 0u;
100064e8:	7163      	strb	r3, [r4, #5]
    ep->wMaxPacketSize = wMaxPacketSize;
100064ea:	62e0      	str	r0, [r4, #44]	; 0x2c
        ep->buffer_control = &usb_dpram->ep_buf_ctrl[num].out;
100064ec:	60e1      	str	r1, [r4, #12]
    *ep->buffer_control = 0;
100064ee:	600a      	str	r2, [r1, #0]
    ep->in = in;
100064f0:	55a3      	strb	r3, [r4, r6]
    ep->ep_addr = ep_addr;
100064f2:	364c      	adds	r6, #76	; 0x4c
100064f4:	36ff      	adds	r6, #255	; 0xff
100064f6:	8726      	strh	r6, [r4, #56]	; 0x38
    ep->transfer_type = transfer_type;
100064f8:	2600      	movs	r6, #0
    ep->wMaxPacketSize = wMaxPacketSize;
100064fa:	6620      	str	r0, [r4, #96]	; 0x60
    ep->transfer_type = transfer_type;
100064fc:	3024      	adds	r0, #36	; 0x24
100064fe:	5426      	strb	r6, [r4, r0]
        ep->hw_data_buf = (uint8_t*)&usb_dpram->ep0_buf_a[0];
10006500:	4911      	ldr	r1, [pc, #68]	; (10006548 <dcd_init+0x94>)
        ep->buffer_control = &usb_dpram->ep_buf_ctrl[num].in;
10006502:	4812      	ldr	r0, [pc, #72]	; (1000654c <dcd_init+0x98>)
        ep->endpoint_control = NULL;
10006504:	60a2      	str	r2, [r4, #8]
        ep->hw_data_buf = (uint8_t*)&usb_dpram->ep0_buf_a[0];
10006506:	6121      	str	r1, [r4, #16]
    ep->configured = true;
10006508:	7023      	strb	r3, [r4, #0]
    ep->num = num;
1000650a:	86e2      	strh	r2, [r4, #54]	; 0x36
        ep->buffer_control = &usb_dpram->ep_buf_ctrl[num].in;
1000650c:	6420      	str	r0, [r4, #64]	; 0x40
    *ep->buffer_control = 0;
1000650e:	6002      	str	r2, [r0, #0]
        ep->endpoint_control = NULL;
10006510:	63e2      	str	r2, [r4, #60]	; 0x3c
    ep->configured = true;
10006512:	3234      	adds	r2, #52	; 0x34
10006514:	54a3      	strb	r3, [r4, r2]
    usb_hw->main_ctrl = USB_MAIN_CTRL_CONTROLLER_EN_BITS;
10006516:	4a0e      	ldr	r2, [pc, #56]	; (10006550 <dcd_init+0x9c>)
        ep->hw_data_buf = (uint8_t*)&usb_dpram->ep0_buf_a[0];
10006518:	6461      	str	r1, [r4, #68]	; 0x44
    usb_hw->main_ctrl = USB_MAIN_CTRL_CONTROLLER_EN_BITS;
1000651a:	6413      	str	r3, [r2, #64]	; 0x40
    usb_hw->sie_ctrl = USB_SIE_CTRL_EP0_INT_1BUF_BITS; 
1000651c:	2380      	movs	r3, #128	; 0x80
1000651e:	059b      	lsls	r3, r3, #22
10006520:	64d3      	str	r3, [r2, #76]	; 0x4c
    usb_hw->inte     = USB_INTS_BUFF_STATUS_BITS | USB_INTS_BUS_RESET_BITS | USB_INTS_SETUP_REQ_BITS;
10006522:	2390      	movs	r3, #144	; 0x90
10006524:	490b      	ldr	r1, [pc, #44]	; (10006554 <dcd_init+0xa0>)
    dcd_connect(rhport);
10006526:	0028      	movs	r0, r5
    usb_hw->inte     = USB_INTS_BUFF_STATUS_BITS | USB_INTS_BUS_RESET_BITS | USB_INTS_SETUP_REQ_BITS;
10006528:	50d1      	str	r1, [r2, r3]
    dcd_connect(rhport);
1000652a:	f7ff ffbb 	bl	100064a4 <dcd_connect>
}
1000652e:	bd70      	pop	{r4, r5, r6, pc}
10006530:	10006335 	.word	0x10006335
10006534:	200120a8 	.word	0x200120a8
10006538:	20012773 	.word	0x20012773
1000653c:	50100180 	.word	0x50100180
10006540:	2001272c 	.word	0x2001272c
10006544:	50100084 	.word	0x50100084
10006548:	50100100 	.word	0x50100100
1000654c:	50100080 	.word	0x50100080
10006550:	50110000 	.word	0x50110000
10006554:	00011010 	.word	0x00011010

10006558 <dcd_edpt0_status_complete>:
void dcd_edpt0_status_complete(uint8_t rhport, tusb_control_request_t const * request)
{
    pico_trace("dcd_edpt0_status_complete %d\n", rhport);
    assert(rhport == 0);

    if (request->bmRequestType_bit.recipient == TUSB_REQ_RCPT_DEVICE &&
10006558:	780b      	ldrb	r3, [r1, #0]
1000655a:	065b      	lsls	r3, r3, #25
1000655c:	d102      	bne.n	10006564 <dcd_edpt0_status_complete+0xc>
        request->bmRequestType_bit.type == TUSB_REQ_TYPE_STANDARD &&
1000655e:	784b      	ldrb	r3, [r1, #1]
10006560:	2b05      	cmp	r3, #5
10006562:	d009      	beq.n	10006578 <dcd_edpt0_status_complete+0x20>
        ep->next_pid = 1u;
10006564:	2101      	movs	r1, #1
10006566:	2039      	movs	r0, #57	; 0x39
        ep->stalled  = 0;
10006568:	2200      	movs	r2, #0
        ep->next_pid = 1u;
1000656a:	4b06      	ldr	r3, [pc, #24]	; (10006584 <dcd_edpt0_status_complete+0x2c>)
1000656c:	7159      	strb	r1, [r3, #5]
1000656e:	5419      	strb	r1, [r3, r0]
        ep->stalled  = 0;
10006570:	3147      	adds	r1, #71	; 0x47
10006572:	751a      	strb	r2, [r3, #20]
10006574:	545a      	strb	r2, [r3, r1]
        pico_trace("Set HW address %d\n", assigned_address);
        usb_hw->dev_addr_ctrl = assigned_address;
    }

    reset_ep0();
}
10006576:	4770      	bx	lr
        usb_hw->dev_addr_ctrl = assigned_address;
10006578:	4b03      	ldr	r3, [pc, #12]	; (10006588 <dcd_edpt0_status_complete+0x30>)
1000657a:	781a      	ldrb	r2, [r3, #0]
1000657c:	4b03      	ldr	r3, [pc, #12]	; (1000658c <dcd_edpt0_status_complete+0x34>)
1000657e:	601a      	str	r2, [r3, #0]
10006580:	e7f0      	b.n	10006564 <dcd_edpt0_status_complete+0xc>
10006582:	46c0      	nop			; (mov r8, r8)
10006584:	200120a8 	.word	0x200120a8
10006588:	20012773 	.word	0x20012773
1000658c:	50110000 	.word	0x50110000

10006590 <dcd_edpt_open>:

bool dcd_edpt_open (uint8_t rhport, tusb_desc_endpoint_t const * desc_edpt)
{
10006590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10006592:	4647      	mov	r7, r8
10006594:	46ce      	mov	lr, r9
    pico_info("dcd_edpt_open %d %02x\n", rhport, desc_edpt->bEndpointAddress);
    assert(rhport == 0);
    hw_endpoint_init(desc_edpt->bEndpointAddress, desc_edpt->wMaxPacketSize.size, desc_edpt->bmAttributes.xfer);
10006596:	2307      	movs	r3, #7
{
10006598:	b580      	push	{r7, lr}
    hw_endpoint_init(desc_edpt->bEndpointAddress, desc_edpt->wMaxPacketSize.size, desc_edpt->bmAttributes.xfer);
1000659a:	7948      	ldrb	r0, [r1, #5]
1000659c:	78cc      	ldrb	r4, [r1, #3]
1000659e:	790a      	ldrb	r2, [r1, #4]
100065a0:	4003      	ands	r3, r0
100065a2:	788f      	ldrb	r7, [r1, #2]
100065a4:	07a4      	lsls	r4, r4, #30
100065a6:	021b      	lsls	r3, r3, #8
100065a8:	4313      	orrs	r3, r2
100065aa:	0fa2      	lsrs	r2, r4, #30
100065ac:	4694      	mov	ip, r2
100065ae:	0014      	movs	r4, r2
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
100065b0:	207f      	movs	r0, #127	; 0x7f
100065b2:	b27a      	sxtb	r2, r7
100065b4:	4691      	mov	r9, r2
    ep->ep_addr = ep_addr;
100065b6:	2168      	movs	r1, #104	; 0x68
100065b8:	2234      	movs	r2, #52	; 0x34
100065ba:	4038      	ands	r0, r7
    return &hw_endpoints[num][in];
100065bc:	09fe      	lsrs	r6, r7, #7
    ep->ep_addr = ep_addr;
100065be:	4341      	muls	r1, r0
100065c0:	4372      	muls	r2, r6
100065c2:	1852      	adds	r2, r2, r1
    ep->rx = in == false;
100065c4:	4649      	mov	r1, r9
100065c6:	43c9      	mvns	r1, r1
    ep->ep_addr = ep_addr;
100065c8:	4d3c      	ldr	r5, [pc, #240]	; (100066bc <dcd_edpt_open+0x12c>)
    ep->rx = in == false;
100065ca:	0fc9      	lsrs	r1, r1, #31
    ep->ep_addr = ep_addr;
100065cc:	18aa      	adds	r2, r5, r2
    ep->rx = in == false;
100065ce:	70d1      	strb	r1, [r2, #3]
    ep->next_pid = num == 0 ? 1u : 0u;
100065d0:	4241      	negs	r1, r0
100065d2:	4141      	adcs	r1, r0
    ep->ep_addr = ep_addr;
100065d4:	7117      	strb	r7, [r2, #4]
    ep->in = in;
100065d6:	7056      	strb	r6, [r2, #1]
    ep->num = num;
100065d8:	7090      	strb	r0, [r2, #2]
    ep->next_pid = num == 0 ? 1u : 0u;
100065da:	7151      	strb	r1, [r2, #5]
    if (transfer_type == TUSB_XFER_ISOCHRONOUS)
100065dc:	2c01      	cmp	r4, #1
100065de:	d05f      	beq.n	100066a0 <dcd_edpt_open+0x110>
        if (wMaxPacketSize > USB_MAX_PACKET_SIZE)
100065e0:	2b40      	cmp	r3, #64	; 0x40
100065e2:	d861      	bhi.n	100066a8 <dcd_edpt_open+0x118>
    ep->wMaxPacketSize = wMaxPacketSize;
100065e4:	2234      	movs	r2, #52	; 0x34
100065e6:	2168      	movs	r1, #104	; 0x68
100065e8:	4372      	muls	r2, r6
100065ea:	4341      	muls	r1, r0
100065ec:	1852      	adds	r2, r2, r1
100065ee:	18aa      	adds	r2, r5, r2
    ep->transfer_type = transfer_type;
100065f0:	0011      	movs	r1, r2
100065f2:	4667      	mov	r7, ip
100065f4:	3130      	adds	r1, #48	; 0x30
100065f6:	700f      	strb	r7, [r1, #0]
    if (ep->in)
100065f8:	4649      	mov	r1, r9
    ep->wMaxPacketSize = wMaxPacketSize;
100065fa:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ep->in)
100065fc:	2900      	cmp	r1, #0
100065fe:	db3e      	blt.n	1000667e <dcd_edpt_open+0xee>
        ep->buffer_control = &usb_dpram->ep_buf_ctrl[num].out;
10006600:	4f2f      	ldr	r7, [pc, #188]	; (100066c0 <dcd_edpt_open+0x130>)
10006602:	00c1      	lsls	r1, r0, #3
10006604:	46bc      	mov	ip, r7
    *ep->buffer_control = 0;
10006606:	2700      	movs	r7, #0
        ep->buffer_control = &usb_dpram->ep_buf_ctrl[num].out;
10006608:	4461      	add	r1, ip
1000660a:	60d1      	str	r1, [r2, #12]
    *ep->buffer_control = 0;
1000660c:	600f      	str	r7, [r1, #0]
    if (ep->num == 0)
1000660e:	2800      	cmp	r0, #0
10006610:	d03e      	beq.n	10006690 <dcd_edpt_open+0x100>
            ep->endpoint_control = &usb_dpram->ep_ctrl[num-1].out;
10006612:	4f2c      	ldr	r7, [pc, #176]	; (100066c4 <dcd_edpt_open+0x134>)
10006614:	00c1      	lsls	r1, r0, #3
10006616:	46bc      	mov	ip, r7
10006618:	4461      	add	r1, ip
1000661a:	6091      	str	r1, [r2, #8]
    ep->hw_data_buf = next_buffer_ptr;
1000661c:	2768      	movs	r7, #104	; 0x68
1000661e:	4a2a      	ldr	r2, [pc, #168]	; (100066c8 <dcd_edpt_open+0x138>)
10006620:	4347      	muls	r7, r0
10006622:	6811      	ldr	r1, [r2, #0]
10006624:	4690      	mov	r8, r2
10006626:	2234      	movs	r2, #52	; 0x34
10006628:	46bc      	mov	ip, r7
1000662a:	4372      	muls	r2, r6
1000662c:	4462      	add	r2, ip
1000662e:	18aa      	adds	r2, r5, r2
10006630:	6111      	str	r1, [r2, #16]
    next_buffer_ptr += size;
10006632:	2b40      	cmp	r3, #64	; 0x40
10006634:	d200      	bcs.n	10006638 <dcd_edpt_open+0xa8>
10006636:	2340      	movs	r3, #64	; 0x40
    if ((uintptr_t)next_buffer_ptr & 0b111111u)
10006638:	223f      	movs	r2, #63	; 0x3f
    next_buffer_ptr += size;
1000663a:	18cb      	adds	r3, r1, r3
    if ((uintptr_t)next_buffer_ptr & 0b111111u)
1000663c:	4213      	tst	r3, r2
1000663e:	d001      	beq.n	10006644 <dcd_edpt_open+0xb4>
        fixptr &= ~0b111111u;
10006640:	4393      	bics	r3, r2
        fixptr += 64;
10006642:	3340      	adds	r3, #64	; 0x40
        next_buffer_ptr = (uint8_t*)fixptr;
10006644:	4642      	mov	r2, r8
10006646:	6013      	str	r3, [r2, #0]
}

static inline uintptr_t hw_data_offset(uint8_t *buf)
{
    // Remove usb base from buffer pointer
    return (uintptr_t)buf ^ (uintptr_t)usb_dpram;
10006648:	4b20      	ldr	r3, [pc, #128]	; (100066cc <dcd_edpt_open+0x13c>)
    *ep->endpoint_control = reg;
1000664a:	2268      	movs	r2, #104	; 0x68
1000664c:	4059      	eors	r1, r3
1000664e:	2334      	movs	r3, #52	; 0x34
                  | (ep->transfer_type << EP_CTRL_BUFFER_TYPE_LSB)
10006650:	06a4      	lsls	r4, r4, #26
                  | dpram_offset;
10006652:	430c      	orrs	r4, r1
    uint32_t reg =  EP_CTRL_ENABLE_BITS
10006654:	21a0      	movs	r1, #160	; 0xa0
    *ep->endpoint_control = reg;
10006656:	4373      	muls	r3, r6
10006658:	4342      	muls	r2, r0
1000665a:	189b      	adds	r3, r3, r2
1000665c:	18eb      	adds	r3, r5, r3
1000665e:	689b      	ldr	r3, [r3, #8]
    uint32_t reg =  EP_CTRL_ENABLE_BITS
10006660:	0609      	lsls	r1, r1, #24
10006662:	430c      	orrs	r4, r1
    *ep->endpoint_control = reg;
10006664:	601c      	str	r4, [r3, #0]
    ep->configured = true;
10006666:	2334      	movs	r3, #52	; 0x34
10006668:	435e      	muls	r6, r3
1000666a:	3334      	adds	r3, #52	; 0x34
1000666c:	4358      	muls	r0, r3
1000666e:	3b67      	subs	r3, #103	; 0x67
10006670:	1836      	adds	r6, r6, r0
10006672:	55ab      	strb	r3, [r5, r6]
    return true;
}
10006674:	2001      	movs	r0, #1
10006676:	bcc0      	pop	{r6, r7}
10006678:	46b9      	mov	r9, r7
1000667a:	46b0      	mov	r8, r6
1000667c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ep->buffer_control = &usb_dpram->ep_buf_ctrl[num].in;
1000667e:	4f14      	ldr	r7, [pc, #80]	; (100066d0 <dcd_edpt_open+0x140>)
10006680:	00c1      	lsls	r1, r0, #3
10006682:	46bc      	mov	ip, r7
    *ep->buffer_control = 0;
10006684:	2700      	movs	r7, #0
        ep->buffer_control = &usb_dpram->ep_buf_ctrl[num].in;
10006686:	4461      	add	r1, ip
10006688:	60d1      	str	r1, [r2, #12]
    *ep->buffer_control = 0;
1000668a:	600f      	str	r7, [r1, #0]
    if (ep->num == 0)
1000668c:	2800      	cmp	r0, #0
1000668e:	d10f      	bne.n	100066b0 <dcd_edpt_open+0x120>
        ep->endpoint_control = NULL;
10006690:	2334      	movs	r3, #52	; 0x34
10006692:	2200      	movs	r2, #0
10006694:	4373      	muls	r3, r6
10006696:	18eb      	adds	r3, r5, r3
10006698:	609a      	str	r2, [r3, #8]
        ep->hw_data_buf = (uint8_t*)&usb_dpram->ep0_buf_a[0];
1000669a:	4a0e      	ldr	r2, [pc, #56]	; (100066d4 <dcd_edpt_open+0x144>)
1000669c:	611a      	str	r2, [r3, #16]
1000669e:	e7e2      	b.n	10006666 <dcd_edpt_open+0xd6>
        if (wMaxPacketSize > USB_MAX_ISO_PACKET_SIZE)
100066a0:	2280      	movs	r2, #128	; 0x80
100066a2:	00d2      	lsls	r2, r2, #3
100066a4:	4293      	cmp	r3, r2
100066a6:	d39d      	bcc.n	100065e4 <dcd_edpt_open+0x54>
            panic("Isochronous wMaxPacketSize %d too large", wMaxPacketSize);
100066a8:	0019      	movs	r1, r3
100066aa:	480b      	ldr	r0, [pc, #44]	; (100066d8 <dcd_edpt_open+0x148>)
100066ac:	f7fd f9b8 	bl	10003a20 <panic>
            ep->endpoint_control = &usb_dpram->ep_ctrl[num-1].in;
100066b0:	4f06      	ldr	r7, [pc, #24]	; (100066cc <dcd_edpt_open+0x13c>)
100066b2:	00c1      	lsls	r1, r0, #3
100066b4:	46bc      	mov	ip, r7
100066b6:	4461      	add	r1, ip
100066b8:	6091      	str	r1, [r2, #8]
100066ba:	e7af      	b.n	1000661c <dcd_edpt_open+0x8c>
100066bc:	200120a8 	.word	0x200120a8
100066c0:	50100084 	.word	0x50100084
100066c4:	50100004 	.word	0x50100004
100066c8:	2001272c 	.word	0x2001272c
100066cc:	50100000 	.word	0x50100000
100066d0:	50100080 	.word	0x50100080
100066d4:	50100100 	.word	0x50100100
100066d8:	1001083c 	.word	0x1001083c

100066dc <dcd_edpt_xfer>:

bool dcd_edpt_xfer(uint8_t rhport, uint8_t ep_addr, uint8_t * buffer, uint16_t total_bytes)
{
100066dc:	b510      	push	{r4, lr}
100066de:	000c      	movs	r4, r1
    return &hw_endpoints[num][in];
100066e0:	2034      	movs	r0, #52	; 0x34
{
100066e2:	0011      	movs	r1, r2
100066e4:	001a      	movs	r2, r3
    return &hw_endpoints[num][in];
100066e6:	09e3      	lsrs	r3, r4, #7
100066e8:	4358      	muls	r0, r3
100066ea:	237f      	movs	r3, #127	; 0x7f
100066ec:	4023      	ands	r3, r4
100066ee:	2468      	movs	r4, #104	; 0x68
100066f0:	435c      	muls	r4, r3
100066f2:	4b04      	ldr	r3, [pc, #16]	; (10006704 <dcd_edpt_xfer+0x28>)
100066f4:	1900      	adds	r0, r0, r4
100066f6:	18c0      	adds	r0, r0, r3
    _hw_endpoint_xfer(ep, buffer, total_bytes, start);
100066f8:	2301      	movs	r3, #1
100066fa:	f000 f935 	bl	10006968 <_hw_endpoint_xfer>
    assert(rhport == 0);
    // True means start new xfer
    hw_endpoint_xfer(ep_addr, buffer, total_bytes, true);
    return true;
}
100066fe:	2001      	movs	r0, #1
10006700:	bd10      	pop	{r4, pc}
10006702:	46c0      	nop			; (mov r8, r8)
10006704:	200120a8 	.word	0x200120a8

10006708 <dcd_edpt_stall>:

void dcd_edpt_stall (uint8_t rhport, uint8_t ep_addr)
{
10006708:	b570      	push	{r4, r5, r6, lr}
1000670a:	257f      	movs	r5, #127	; 0x7f
    return &hw_endpoints[num][in];
1000670c:	2034      	movs	r0, #52	; 0x34
1000670e:	2368      	movs	r3, #104	; 0x68
10006710:	400d      	ands	r5, r1
    uint8_t in = (ep_addr & TUSB_DIR_IN_MASK) ? 1 : 0;
10006712:	09cc      	lsrs	r4, r1, #7
    return &hw_endpoints[num][in];
10006714:	436b      	muls	r3, r5
10006716:	4360      	muls	r0, r4
10006718:	4e0c      	ldr	r6, [pc, #48]	; (1000674c <dcd_edpt_stall+0x44>)
1000671a:	18c0      	adds	r0, r0, r3
1000671c:	1830      	adds	r0, r6, r0
    if (ep->num == 0)
1000671e:	7883      	ldrb	r3, [r0, #2]
10006720:	2b00      	cmp	r3, #0
10006722:	d105      	bne.n	10006730 <dcd_edpt_stall+0x28>
        usb_hw_set->ep_stall_arm = ep->in ? USB_EP_STALL_ARM_EP0_IN_BITS : USB_EP_STALL_ARM_EP0_OUT_BITS;
10006724:	7843      	ldrb	r3, [r0, #1]
10006726:	425a      	negs	r2, r3
10006728:	4153      	adcs	r3, r2
1000672a:	4a09      	ldr	r2, [pc, #36]	; (10006750 <dcd_edpt_stall+0x48>)
1000672c:	3301      	adds	r3, #1
1000672e:	6693      	str	r3, [r2, #104]	; 0x68
    return _hw_endpoint_buffer_control_update32(ep, ~value, value);
10006730:	2280      	movs	r2, #128	; 0x80
10006732:	4908      	ldr	r1, [pc, #32]	; (10006754 <dcd_edpt_stall+0x4c>)
10006734:	0112      	lsls	r2, r2, #4
10006736:	f000 f875 	bl	10006824 <_hw_endpoint_buffer_control_update32>
    ep->stalled = true;
1000673a:	2134      	movs	r1, #52	; 0x34
1000673c:	2301      	movs	r3, #1
1000673e:	434c      	muls	r4, r1
10006740:	3134      	adds	r1, #52	; 0x34
10006742:	434d      	muls	r5, r1
10006744:	1964      	adds	r4, r4, r5
10006746:	1934      	adds	r4, r6, r4
10006748:	7523      	strb	r3, [r4, #20]
    pico_trace("dcd_edpt_stall %d %02x\n", rhport, ep_addr);
    assert(rhport == 0);
    hw_endpoint_stall(ep_addr);
}
1000674a:	bd70      	pop	{r4, r5, r6, pc}
1000674c:	200120a8 	.word	0x200120a8
10006750:	50112000 	.word	0x50112000
10006754:	fffff7ff 	.word	0xfffff7ff

10006758 <dcd_edpt_clear_stall>:

void dcd_edpt_clear_stall (uint8_t rhport, uint8_t ep_addr)
{
10006758:	b570      	push	{r4, r5, r6, lr}
1000675a:	257f      	movs	r5, #127	; 0x7f
    return &hw_endpoints[num][in];
1000675c:	2034      	movs	r0, #52	; 0x34
1000675e:	2368      	movs	r3, #104	; 0x68
10006760:	400d      	ands	r5, r1
    uint8_t in = (ep_addr & TUSB_DIR_IN_MASK) ? 1 : 0;
10006762:	09cc      	lsrs	r4, r1, #7
    return &hw_endpoints[num][in];
10006764:	436b      	muls	r3, r5
10006766:	4360      	muls	r0, r4
10006768:	4e0c      	ldr	r6, [pc, #48]	; (1000679c <dcd_edpt_clear_stall+0x44>)
1000676a:	18c0      	adds	r0, r0, r3
1000676c:	1830      	adds	r0, r6, r0
    if (ep->num == 0)
1000676e:	7883      	ldrb	r3, [r0, #2]
10006770:	2b00      	cmp	r3, #0
10006772:	d105      	bne.n	10006780 <dcd_edpt_clear_stall+0x28>
        usb_hw_clear->ep_stall_arm = ep->in ? USB_EP_STALL_ARM_EP0_IN_BITS : USB_EP_STALL_ARM_EP0_OUT_BITS;
10006774:	7843      	ldrb	r3, [r0, #1]
10006776:	425a      	negs	r2, r3
10006778:	4153      	adcs	r3, r2
1000677a:	4a09      	ldr	r2, [pc, #36]	; (100067a0 <dcd_edpt_clear_stall+0x48>)
1000677c:	3301      	adds	r3, #1
1000677e:	6693      	str	r3, [r2, #104]	; 0x68
    return _hw_endpoint_buffer_control_update32(ep, ~value, 0);
10006780:	2200      	movs	r2, #0
10006782:	4908      	ldr	r1, [pc, #32]	; (100067a4 <dcd_edpt_clear_stall+0x4c>)
10006784:	f000 f84e 	bl	10006824 <_hw_endpoint_buffer_control_update32>
    ep->stalled = false;
10006788:	2134      	movs	r1, #52	; 0x34
1000678a:	2300      	movs	r3, #0
1000678c:	434c      	muls	r4, r1
1000678e:	3134      	adds	r1, #52	; 0x34
10006790:	434d      	muls	r5, r1
10006792:	1964      	adds	r4, r4, r5
10006794:	1934      	adds	r4, r6, r4
10006796:	7523      	strb	r3, [r4, #20]
    pico_trace("dcd_edpt_clear_stall %d %02x\n", rhport, ep_addr);
    assert(rhport == 0);
    hw_endpoint_clear_stall(ep_addr);
}
10006798:	bd70      	pop	{r4, r5, r6, pc}
1000679a:	46c0      	nop			; (mov r8, r8)
1000679c:	200120a8 	.word	0x200120a8
100067a0:	50113000 	.word	0x50113000
100067a4:	fffff7ff 	.word	0xfffff7ff

100067a8 <_hw_endpoint_buffer_control_update32.part.0.isra.0>:
    }
    if (or_mask) {
        value |= or_mask;
        if (or_mask & USB_BUF_CTRL_AVAIL) {
            if (*ep->buffer_control & USB_BUF_CTRL_AVAIL) {
                panic("ep %d %s was already available", ep->num, ep_dir_string[ep->in]);
100067a8:	4b03      	ldr	r3, [pc, #12]	; (100067b8 <_hw_endpoint_buffer_control_update32.part.0.isra.0+0x10>)
100067aa:	0080      	lsls	r0, r0, #2
100067ac:	58c2      	ldr	r2, [r0, r3]
void _hw_endpoint_buffer_control_update32(struct hw_endpoint *ep, uint32_t and_mask, uint32_t or_mask) {
100067ae:	b510      	push	{r4, lr}
                panic("ep %d %s was already available", ep->num, ep_dir_string[ep->in]);
100067b0:	4802      	ldr	r0, [pc, #8]	; (100067bc <_hw_endpoint_buffer_control_update32.part.0.isra.0+0x14>)
100067b2:	f7fd f935 	bl	10003a20 <panic>
100067b6:	46c0      	nop			; (mov r8, r8)
100067b8:	20002750 	.word	0x20002750
100067bc:	10010864 	.word	0x10010864

100067c0 <rp2040_usb_init>:
100067c0:	2280      	movs	r2, #128	; 0x80
100067c2:	4b0e      	ldr	r3, [pc, #56]	; (100067fc <rp2040_usb_init+0x3c>)
100067c4:	0452      	lsls	r2, r2, #17
{
100067c6:	b510      	push	{r4, lr}
100067c8:	601a      	str	r2, [r3, #0]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
100067ca:	4b0d      	ldr	r3, [pc, #52]	; (10006800 <rp2040_usb_init+0x40>)
100067cc:	490d      	ldr	r1, [pc, #52]	; (10006804 <rp2040_usb_init+0x44>)
100067ce:	601a      	str	r2, [r3, #0]
100067d0:	0010      	movs	r0, r2
100067d2:	688b      	ldr	r3, [r1, #8]
100067d4:	4398      	bics	r0, r3
100067d6:	d1fb      	bne.n	100067d0 <rp2040_usb_init+0x10>
    memset(usb_hw, 0, sizeof(*usb_hw));
100067d8:	4c0b      	ldr	r4, [pc, #44]	; (10006808 <rp2040_usb_init+0x48>)
100067da:	229c      	movs	r2, #156	; 0x9c
100067dc:	2100      	movs	r1, #0
100067de:	0020      	movs	r0, r4
100067e0:	f7fa fc80 	bl	100010e4 <__wrap_memset>
    memset(usb_dpram, 0, sizeof(*usb_dpram));
100067e4:	2280      	movs	r2, #128	; 0x80
100067e6:	2100      	movs	r1, #0
100067e8:	0152      	lsls	r2, r2, #5
100067ea:	4808      	ldr	r0, [pc, #32]	; (1000680c <rp2040_usb_init+0x4c>)
100067ec:	f7fa fc7a 	bl	100010e4 <__wrap_memset>
    usb_hw->muxing    = USB_USB_MUXING_TO_PHY_BITS    | USB_USB_MUXING_SOFTCON_BITS;
100067f0:	2309      	movs	r3, #9
100067f2:	6763      	str	r3, [r4, #116]	; 0x74
    usb_hw->pwr       = USB_USB_PWR_VBUS_DETECT_BITS  | USB_USB_PWR_VBUS_DETECT_OVERRIDE_EN_BITS;
100067f4:	3303      	adds	r3, #3
100067f6:	67a3      	str	r3, [r4, #120]	; 0x78
}
100067f8:	bd10      	pop	{r4, pc}
100067fa:	46c0      	nop			; (mov r8, r8)
100067fc:	4000e000 	.word	0x4000e000
10006800:	4000f000 	.word	0x4000f000
10006804:	4000c000 	.word	0x4000c000
10006808:	50110000 	.word	0x50110000
1000680c:	50100000 	.word	0x50100000

10006810 <hw_endpoint_reset_transfer>:
    ep->stalled = false;
10006810:	2300      	movs	r3, #0
    ep->sent_setup = false;
10006812:	2100      	movs	r1, #0
10006814:	2232      	movs	r2, #50	; 0x32
    ep->stalled = false;
10006816:	8283      	strh	r3, [r0, #20]
    ep->sent_setup = false;
10006818:	5481      	strb	r1, [r0, r2]
    ep->total_len = 0;
1000681a:	6183      	str	r3, [r0, #24]
    ep->len = 0;
1000681c:	61c3      	str	r3, [r0, #28]
    ep->transfer_size = 0;
1000681e:	6203      	str	r3, [r0, #32]
    ep->user_buf = 0;
10006820:	6283      	str	r3, [r0, #40]	; 0x28
}
10006822:	4770      	bx	lr

10006824 <_hw_endpoint_buffer_control_update32>:
void _hw_endpoint_buffer_control_update32(struct hw_endpoint *ep, uint32_t and_mask, uint32_t or_mask) {
10006824:	b510      	push	{r4, lr}
        value = *ep->buffer_control & and_mask;
10006826:	68c3      	ldr	r3, [r0, #12]
    if (and_mask) {
10006828:	2900      	cmp	r1, #0
1000682a:	d001      	beq.n	10006830 <_hw_endpoint_buffer_control_update32+0xc>
        value = *ep->buffer_control & and_mask;
1000682c:	681c      	ldr	r4, [r3, #0]
1000682e:	4021      	ands	r1, r4
    if (or_mask) {
10006830:	2a00      	cmp	r2, #0
10006832:	d011      	beq.n	10006858 <_hw_endpoint_buffer_control_update32+0x34>
        if (or_mask & USB_BUF_CTRL_AVAIL) {
10006834:	2480      	movs	r4, #128	; 0x80
10006836:	00e4      	lsls	r4, r4, #3
        value |= or_mask;
10006838:	4311      	orrs	r1, r2
        if (or_mask & USB_BUF_CTRL_AVAIL) {
1000683a:	4222      	tst	r2, r4
1000683c:	d00c      	beq.n	10006858 <_hw_endpoint_buffer_control_update32+0x34>
            if (*ep->buffer_control & USB_BUF_CTRL_AVAIL) {
1000683e:	681a      	ldr	r2, [r3, #0]
10006840:	4222      	tst	r2, r4
10006842:	d10b      	bne.n	1000685c <_hw_endpoint_buffer_control_update32+0x38>
            }
            *ep->buffer_control = value & ~USB_BUF_CTRL_AVAIL;
10006844:	4a07      	ldr	r2, [pc, #28]	; (10006864 <_hw_endpoint_buffer_control_update32+0x40>)
10006846:	400a      	ands	r2, r1
10006848:	601a      	str	r2, [r3, #0]
            // 12 cycle delay.. (should be good for 48*12Mhz = 576Mhz)
            // Don't need delay in host mode as host is in charge
#ifndef RP2040_USB_HOST_MODE
            __asm volatile (
1000684a:	e7ff      	b.n	1000684c <_hw_endpoint_buffer_control_update32+0x28>
1000684c:	e7ff      	b.n	1000684e <_hw_endpoint_buffer_control_update32+0x2a>
1000684e:	e7ff      	b.n	10006850 <_hw_endpoint_buffer_control_update32+0x2c>
10006850:	e7ff      	b.n	10006852 <_hw_endpoint_buffer_control_update32+0x2e>
10006852:	e7ff      	b.n	10006854 <_hw_endpoint_buffer_control_update32+0x30>
10006854:	e7ff      	b.n	10006856 <_hw_endpoint_buffer_control_update32+0x32>
                    "1:\n"
                    : : : "memory");
#endif
        }
    }
    *ep->buffer_control = value;
10006856:	68c3      	ldr	r3, [r0, #12]
10006858:	6019      	str	r1, [r3, #0]
}
1000685a:	bd10      	pop	{r4, pc}
1000685c:	7881      	ldrb	r1, [r0, #2]
1000685e:	7840      	ldrb	r0, [r0, #1]
10006860:	f7ff ffa2 	bl	100067a8 <_hw_endpoint_buffer_control_update32.part.0.isra.0>
10006864:	fffffbff 	.word	0xfffffbff

10006868 <_hw_endpoint_xfer_continue>:
    }
}

// Returns true if transfer is complete
bool _hw_endpoint_xfer_continue(struct hw_endpoint *ep)
{
10006868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _hw_endpoint_lock_update(ep, 1);
    // Part way through a transfer
    if (!ep->active)
1000686a:	7d46      	ldrb	r6, [r0, #21]
{
1000686c:	0004      	movs	r4, r0
    if (!ep->active)
1000686e:	2e00      	cmp	r6, #0
10006870:	d100      	bne.n	10006874 <_hw_endpoint_xfer_continue+0xc>
10006872:	e067      	b.n	10006944 <_hw_endpoint_xfer_continue+0xdc>
    return *ep->buffer_control;
10006874:	68c3      	ldr	r3, [r0, #12]
    if (!ep->rx)
10006876:	78c0      	ldrb	r0, [r0, #3]
10006878:	681d      	ldr	r5, [r3, #0]
    uint transferred_bytes = buf_ctrl & USB_BUF_CTRL_LEN_MASK;
1000687a:	05ad      	lsls	r5, r5, #22
1000687c:	0dad      	lsrs	r5, r5, #22
    if (!ep->rx)
1000687e:	2800      	cmp	r0, #0
10006880:	d143      	bne.n	1000690a <_hw_endpoint_xfer_continue+0xa2>
        ep->len += transferred_bytes;
10006882:	69e3      	ldr	r3, [r4, #28]
10006884:	18e9      	adds	r1, r5, r3
10006886:	61e1      	str	r1, [r4, #28]

    // Update EP struct from hardware state
    _hw_endpoint_xfer_sync(ep);

    // Now we have synced our state with the hardware. Is there more data to transfer?
    uint remaining_bytes = ep->total_len - ep->len;
10006888:	69a2      	ldr	r2, [r4, #24]
1000688a:	1a55      	subs	r5, r2, r1
    ep->transfer_size = remaining_bytes > 64 ? 64 : remaining_bytes;
1000688c:	2d40      	cmp	r5, #64	; 0x40
1000688e:	d82e      	bhi.n	100068ee <_hw_endpoint_xfer_continue+0x86>
    ep->last_buf = ep->len + ep->transfer_size == ep->total_len;
10006890:	186b      	adds	r3, r5, r1
10006892:	1a9b      	subs	r3, r3, r2
10006894:	425f      	negs	r7, r3
10006896:	417b      	adcs	r3, r7
10006898:	2724      	movs	r7, #36	; 0x24
1000689a:	b2db      	uxtb	r3, r3
    ep->transfer_size = remaining_bytes > 64 ? 64 : remaining_bytes;
1000689c:	6225      	str	r5, [r4, #32]
    ep->last_buf = ep->len + ep->transfer_size == ep->total_len;
1000689e:	55e3      	strb	r3, [r4, r7]
    _hw_endpoint_update_last_buf(ep);

    // Can happen because of programmer error so check for it
    if (ep->len > ep->total_len)
100068a0:	428a      	cmp	r2, r1
100068a2:	d34c      	bcc.n	1000693e <_hw_endpoint_xfer_continue+0xd6>
    {
        panic("Transferred more data than expected");
    }

    // If we are done then notify tinyusb
    if (ep->len == ep->total_len)
100068a4:	d049      	beq.n	1000693a <_hw_endpoint_xfer_continue+0xd2>
    if (!ep->rx)
100068a6:	2800      	cmp	r0, #0
100068a8:	d023      	beq.n	100068f2 <_hw_endpoint_xfer_continue+0x8a>
    uint32_t val = ep->transfer_size | USB_BUF_CTRL_AVAIL;
100068aa:	2280      	movs	r2, #128	; 0x80
100068ac:	00d2      	lsls	r2, r2, #3
100068ae:	432a      	orrs	r2, r5
    val |= ep->next_pid ? USB_BUF_CTRL_DATA1_PID : USB_BUF_CTRL_DATA0_PID;
100068b0:	7961      	ldrb	r1, [r4, #5]
100068b2:	2900      	cmp	r1, #0
100068b4:	d002      	beq.n	100068bc <_hw_endpoint_xfer_continue+0x54>
100068b6:	2080      	movs	r0, #128	; 0x80
100068b8:	0180      	lsls	r0, r0, #6
100068ba:	4302      	orrs	r2, r0
    ep->next_pid ^= 1u;
100068bc:	2001      	movs	r0, #1
100068be:	4041      	eors	r1, r0
100068c0:	7161      	strb	r1, [r4, #5]
    if (ep->last_buf)
100068c2:	2b00      	cmp	r3, #0
100068c4:	d002      	beq.n	100068cc <_hw_endpoint_xfer_continue+0x64>
        val |= USB_BUF_CTRL_LAST;
100068c6:	2380      	movs	r3, #128	; 0x80
100068c8:	01db      	lsls	r3, r3, #7
100068ca:	431a      	orrs	r2, r3
            if (*ep->buffer_control & USB_BUF_CTRL_AVAIL) {
100068cc:	68e1      	ldr	r1, [r4, #12]
100068ce:	680b      	ldr	r3, [r1, #0]
100068d0:	055b      	lsls	r3, r3, #21
100068d2:	d43c      	bmi.n	1000694e <_hw_endpoint_xfer_continue+0xe6>
            *ep->buffer_control = value & ~USB_BUF_CTRL_AVAIL;
100068d4:	4b20      	ldr	r3, [pc, #128]	; (10006958 <_hw_endpoint_xfer_continue+0xf0>)
100068d6:	4013      	ands	r3, r2
100068d8:	600b      	str	r3, [r1, #0]
            __asm volatile (
100068da:	e7ff      	b.n	100068dc <_hw_endpoint_xfer_continue+0x74>
100068dc:	e7ff      	b.n	100068de <_hw_endpoint_xfer_continue+0x76>
100068de:	e7ff      	b.n	100068e0 <_hw_endpoint_xfer_continue+0x78>
100068e0:	e7ff      	b.n	100068e2 <_hw_endpoint_xfer_continue+0x7a>
100068e2:	e7ff      	b.n	100068e4 <_hw_endpoint_xfer_continue+0x7c>
100068e4:	e7ff      	b.n	100068e6 <_hw_endpoint_xfer_continue+0x7e>
        _hw_endpoint_start_next_buffer(ep);
    }

    _hw_endpoint_lock_update(ep, -1);
    // More work to do
    return false;
100068e6:	2000      	movs	r0, #0
    *ep->buffer_control = value;
100068e8:	68e3      	ldr	r3, [r4, #12]
100068ea:	601a      	str	r2, [r3, #0]
}
100068ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ep->transfer_size = remaining_bytes > 64 ? 64 : remaining_bytes;
100068ee:	2540      	movs	r5, #64	; 0x40
100068f0:	e7ce      	b.n	10006890 <_hw_endpoint_xfer_continue+0x28>
        memcpy(ep->hw_data_buf, &ep->user_buf[ep->len], ep->transfer_size);
100068f2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
100068f4:	002a      	movs	r2, r5
100068f6:	469c      	mov	ip, r3
100068f8:	6920      	ldr	r0, [r4, #16]
100068fa:	4461      	add	r1, ip
100068fc:	f7fa fbf8 	bl	100010f0 <__wrap___aeabi_memcpy>
        val |= USB_BUF_CTRL_FULL;
10006900:	2284      	movs	r2, #132	; 0x84
10006902:	0212      	lsls	r2, r2, #8
    if (ep->last_buf)
10006904:	5de3      	ldrb	r3, [r4, r7]
        val |= USB_BUF_CTRL_FULL;
10006906:	432a      	orrs	r2, r5
10006908:	e7d2      	b.n	100068b0 <_hw_endpoint_xfer_continue+0x48>
        memcpy(&ep->user_buf[ep->len], ep->hw_data_buf, transferred_bytes);
1000690a:	69e3      	ldr	r3, [r4, #28]
1000690c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
1000690e:	469c      	mov	ip, r3
10006910:	6921      	ldr	r1, [r4, #16]
10006912:	002a      	movs	r2, r5
10006914:	4460      	add	r0, ip
10006916:	f7fa fbeb 	bl	100010f0 <__wrap___aeabi_memcpy>
        ep->len += transferred_bytes;
1000691a:	69e3      	ldr	r3, [r4, #28]
    if ((ep->rx) && (transferred_bytes < ep->transfer_size))
1000691c:	78e0      	ldrb	r0, [r4, #3]
        ep->len += transferred_bytes;
1000691e:	18e9      	adds	r1, r5, r3
10006920:	61e1      	str	r1, [r4, #28]
    if ((ep->rx) && (transferred_bytes < ep->transfer_size))
10006922:	2800      	cmp	r0, #0
10006924:	d0b0      	beq.n	10006888 <_hw_endpoint_xfer_continue+0x20>
10006926:	6a23      	ldr	r3, [r4, #32]
10006928:	429d      	cmp	r5, r3
1000692a:	d2ad      	bcs.n	10006888 <_hw_endpoint_xfer_continue+0x20>
    ep->transfer_size = remaining_bytes > 64 ? 64 : remaining_bytes;
1000692c:	2300      	movs	r3, #0
    ep->last_buf = ep->len + ep->transfer_size == ep->total_len;
1000692e:	2201      	movs	r2, #1
    ep->transfer_size = remaining_bytes > 64 ? 64 : remaining_bytes;
10006930:	6223      	str	r3, [r4, #32]
    ep->last_buf = ep->len + ep->transfer_size == ep->total_len;
10006932:	3324      	adds	r3, #36	; 0x24
        ep->total_len = ep->len;
10006934:	61a1      	str	r1, [r4, #24]
    ep->last_buf = ep->len + ep->transfer_size == ep->total_len;
10006936:	54e2      	strb	r2, [r4, r3]
    if (ep->len > ep->total_len)
10006938:	e7d8      	b.n	100068ec <_hw_endpoint_xfer_continue+0x84>
        return true;
1000693a:	0030      	movs	r0, r6
1000693c:	e7d6      	b.n	100068ec <_hw_endpoint_xfer_continue+0x84>
        panic("Transferred more data than expected");
1000693e:	4807      	ldr	r0, [pc, #28]	; (1000695c <_hw_endpoint_xfer_continue+0xf4>)
10006940:	f7fd f86e 	bl	10003a20 <panic>
        panic("Can't continue xfer on inactive ep %d %s", ep->num, ep_dir_string);
10006944:	7881      	ldrb	r1, [r0, #2]
10006946:	4a06      	ldr	r2, [pc, #24]	; (10006960 <_hw_endpoint_xfer_continue+0xf8>)
10006948:	4806      	ldr	r0, [pc, #24]	; (10006964 <_hw_endpoint_xfer_continue+0xfc>)
1000694a:	f7fd f869 	bl	10003a20 <panic>
1000694e:	78a1      	ldrb	r1, [r4, #2]
10006950:	7860      	ldrb	r0, [r4, #1]
10006952:	f7ff ff29 	bl	100067a8 <_hw_endpoint_buffer_control_update32.part.0.isra.0>
10006956:	46c0      	nop			; (mov r8, r8)
10006958:	fffffbff 	.word	0xfffffbff
1000695c:	100108b0 	.word	0x100108b0
10006960:	20002750 	.word	0x20002750
10006964:	10010884 	.word	0x10010884

10006968 <_hw_endpoint_xfer>:

void _hw_endpoint_xfer(struct hw_endpoint *ep, uint8_t *buffer, uint16_t total_len, bool start)
{
10006968:	b570      	push	{r4, r5, r6, lr}
1000696a:	0004      	movs	r4, r0
    pico_trace(" total_len %d, start=%d\n", total_len, start);

    assert(ep->configured);


    if (start)
1000696c:	2b00      	cmp	r3, #0
1000696e:	d049      	beq.n	10006a04 <_hw_endpoint_xfer+0x9c>
    if (ep->active)
10006970:	7d43      	ldrb	r3, [r0, #21]
10006972:	2b00      	cmp	r3, #0
10006974:	d003      	beq.n	1000697e <_hw_endpoint_xfer+0x16>
    ep->stalled = false;
10006976:	2300      	movs	r3, #0
10006978:	7503      	strb	r3, [r0, #20]
    ep->sent_setup = false;
1000697a:	2032      	movs	r0, #50	; 0x32
1000697c:	5423      	strb	r3, [r4, r0]
    ep->len = 0;
1000697e:	2300      	movs	r3, #0
    ep->total_len = total_len;
10006980:	61a2      	str	r2, [r4, #24]
    ep->len = 0;
10006982:	61e3      	str	r3, [r4, #28]
    ep->transfer_size = total_len > 64 ? 64 : total_len;
10006984:	1c15      	adds	r5, r2, #0
10006986:	2a40      	cmp	r2, #64	; 0x40
10006988:	d831      	bhi.n	100069ee <_hw_endpoint_xfer+0x86>
    ep->active = true;
1000698a:	2301      	movs	r3, #1
    ep->transfer_size = total_len > 64 ? 64 : total_len;
1000698c:	b2ad      	uxth	r5, r5
    ep->last_buf = ep->len + ep->transfer_size == ep->total_len;
1000698e:	1b52      	subs	r2, r2, r5
    ep->active = true;
10006990:	7563      	strb	r3, [r4, #21]
    ep->last_buf = ep->len + ep->transfer_size == ep->total_len;
10006992:	4253      	negs	r3, r2
10006994:	415a      	adcs	r2, r3
10006996:	2624      	movs	r6, #36	; 0x24
    ep->buf_sel = 0;
10006998:	2325      	movs	r3, #37	; 0x25
1000699a:	2000      	movs	r0, #0
    ep->last_buf = ep->len + ep->transfer_size == ep->total_len;
1000699c:	b2d2      	uxtb	r2, r2
    ep->transfer_size = total_len > 64 ? 64 : total_len;
1000699e:	6225      	str	r5, [r4, #32]
    ep->user_buf = buffer;
100069a0:	62a1      	str	r1, [r4, #40]	; 0x28
    ep->last_buf = ep->len + ep->transfer_size == ep->total_len;
100069a2:	55a2      	strb	r2, [r4, r6]
    ep->buf_sel = 0;
100069a4:	54e0      	strb	r0, [r4, r3]
    if (!ep->rx)
100069a6:	78e3      	ldrb	r3, [r4, #3]
100069a8:	2b00      	cmp	r3, #0
100069aa:	d022      	beq.n	100069f2 <_hw_endpoint_xfer+0x8a>
    uint32_t val = ep->transfer_size | USB_BUF_CTRL_AVAIL;
100069ac:	2380      	movs	r3, #128	; 0x80
100069ae:	00db      	lsls	r3, r3, #3
100069b0:	432b      	orrs	r3, r5
    val |= ep->next_pid ? USB_BUF_CTRL_DATA1_PID : USB_BUF_CTRL_DATA0_PID;
100069b2:	7961      	ldrb	r1, [r4, #5]
100069b4:	2900      	cmp	r1, #0
100069b6:	d002      	beq.n	100069be <_hw_endpoint_xfer+0x56>
100069b8:	2080      	movs	r0, #128	; 0x80
100069ba:	0180      	lsls	r0, r0, #6
100069bc:	4303      	orrs	r3, r0
    ep->next_pid ^= 1u;
100069be:	2001      	movs	r0, #1
100069c0:	4041      	eors	r1, r0
100069c2:	7161      	strb	r1, [r4, #5]
    if (ep->last_buf)
100069c4:	2a00      	cmp	r2, #0
100069c6:	d002      	beq.n	100069ce <_hw_endpoint_xfer+0x66>
        val |= USB_BUF_CTRL_LAST;
100069c8:	2280      	movs	r2, #128	; 0x80
100069ca:	01d2      	lsls	r2, r2, #7
100069cc:	4313      	orrs	r3, r2
            if (*ep->buffer_control & USB_BUF_CTRL_AVAIL) {
100069ce:	68e1      	ldr	r1, [r4, #12]
100069d0:	680a      	ldr	r2, [r1, #0]
100069d2:	0552      	lsls	r2, r2, #21
100069d4:	d419      	bmi.n	10006a0a <_hw_endpoint_xfer+0xa2>
            *ep->buffer_control = value & ~USB_BUF_CTRL_AVAIL;
100069d6:	4a0f      	ldr	r2, [pc, #60]	; (10006a14 <_hw_endpoint_xfer+0xac>)
100069d8:	401a      	ands	r2, r3
100069da:	600a      	str	r2, [r1, #0]
            __asm volatile (
100069dc:	e7ff      	b.n	100069de <_hw_endpoint_xfer+0x76>
100069de:	e7ff      	b.n	100069e0 <_hw_endpoint_xfer+0x78>
100069e0:	e7ff      	b.n	100069e2 <_hw_endpoint_xfer+0x7a>
100069e2:	e7ff      	b.n	100069e4 <_hw_endpoint_xfer+0x7c>
100069e4:	e7ff      	b.n	100069e6 <_hw_endpoint_xfer+0x7e>
100069e6:	e7ff      	b.n	100069e8 <_hw_endpoint_xfer+0x80>
    *ep->buffer_control = value;
100069e8:	68e2      	ldr	r2, [r4, #12]
100069ea:	6013      	str	r3, [r2, #0]
    }
    else
    {
        _hw_endpoint_xfer_continue(ep);
    }
}
100069ec:	bd70      	pop	{r4, r5, r6, pc}
    ep->transfer_size = total_len > 64 ? 64 : total_len;
100069ee:	2540      	movs	r5, #64	; 0x40
100069f0:	e7cb      	b.n	1000698a <_hw_endpoint_xfer+0x22>
        memcpy(ep->hw_data_buf, &ep->user_buf[ep->len], ep->transfer_size);
100069f2:	002a      	movs	r2, r5
100069f4:	6920      	ldr	r0, [r4, #16]
100069f6:	f7fa fb7b 	bl	100010f0 <__wrap___aeabi_memcpy>
        val |= USB_BUF_CTRL_FULL;
100069fa:	2384      	movs	r3, #132	; 0x84
100069fc:	021b      	lsls	r3, r3, #8
    if (ep->last_buf)
100069fe:	5da2      	ldrb	r2, [r4, r6]
        val |= USB_BUF_CTRL_FULL;
10006a00:	432b      	orrs	r3, r5
10006a02:	e7d6      	b.n	100069b2 <_hw_endpoint_xfer+0x4a>
        _hw_endpoint_xfer_continue(ep);
10006a04:	f7ff ff30 	bl	10006868 <_hw_endpoint_xfer_continue>
}
10006a08:	e7f0      	b.n	100069ec <_hw_endpoint_xfer+0x84>
10006a0a:	78a1      	ldrb	r1, [r4, #2]
10006a0c:	7860      	ldrb	r0, [r4, #1]
10006a0e:	f7ff fecb 	bl	100067a8 <_hw_endpoint_buffer_control_update32.part.0.isra.0>
10006a12:	46c0      	nop			; (mov r8, r8)
10006a14:	fffffbff 	.word	0xfffffbff

10006a18 <tusb_init>:
#if TUSB_OPT_DEVICE_ENABLED
#include "device/usbd_pvt.h"
#endif

bool tusb_init(void)
{
10006a18:	b570      	push	{r4, r5, r6, lr}
  // skip if already initialized
  if (_initialized) return true;
10006a1a:	4d06      	ldr	r5, [pc, #24]	; (10006a34 <tusb_init+0x1c>)
10006a1c:	782c      	ldrb	r4, [r5, #0]
10006a1e:	2c00      	cmp	r4, #0
10006a20:	d001      	beq.n	10006a26 <tusb_init+0xe>
#endif

  _initialized = true;

  return TUSB_ERROR_NONE;
}
10006a22:	0020      	movs	r0, r4
10006a24:	bd70      	pop	{r4, r5, r6, pc}
  TU_ASSERT ( tud_init() ); // init device stack
10006a26:	f7fe fda1 	bl	1000556c <tud_init>
10006a2a:	2800      	cmp	r0, #0
10006a2c:	d0f9      	beq.n	10006a22 <tusb_init+0xa>
  _initialized = true;
10006a2e:	2301      	movs	r3, #1
10006a30:	702b      	strb	r3, [r5, #0]
  return TUSB_ERROR_NONE;
10006a32:	e7f6      	b.n	10006a22 <tusb_init+0xa>
10006a34:	20012772 	.word	0x20012772

10006a38 <tusb_inited>:

bool tusb_inited(void)
{
  return _initialized;
10006a38:	4b01      	ldr	r3, [pc, #4]	; (10006a40 <tusb_inited+0x8>)
10006a3a:	7818      	ldrb	r0, [r3, #0]
}
10006a3c:	4770      	bx	lr
10006a3e:	46c0      	nop			; (mov r8, r8)
10006a40:	20012772 	.word	0x20012772

10006a44 <_Z11CheckBrickXaah.part.0>:
	}
	return res;
}

// check brick with moving to left and right
Bool CheckBrickX(s8 x, s8 y, u8 brick)
10006a44:	b5f0      	push	{r4, r5, r6, r7, lr}
10006a46:	464e      	mov	r6, r9
10006a48:	4645      	mov	r5, r8
10006a4a:	46de      	mov	lr, fp
10006a4c:	4657      	mov	r7, sl
10006a4e:	b5e0      	push	{r5, r6, r7, lr}
{
	if (CheckBrickSave(x, y, brick)) return True;
	if (CheckBrickSave(x-1, y, brick)) return True;
10006a50:	b2c3      	uxtb	r3, r0
Bool CheckBrickX(s8 x, s8 y, u8 brick)
10006a52:	b091      	sub	sp, #68	; 0x44
	if (CheckBrickSave(x-1, y, brick)) return True;
10006a54:	1e5e      	subs	r6, r3, #1
Bool CheckBrickX(s8 x, s8 y, u8 brick)
10006a56:	920c      	str	r2, [sp, #48]	; 0x30
	if (CheckBrickSave(x-1, y, brick)) return True;
10006a58:	9302      	str	r3, [sp, #8]
	const u8* s = &BrickTemp[brick*BRICKTEMPSIZE];
10006a5a:	0113      	lsls	r3, r2, #4
	u8* d = &Board[x + y*MAPW];
10006a5c:	004a      	lsls	r2, r1, #1
10006a5e:	1852      	adds	r2, r2, r1
10006a60:	00d5      	lsls	r5, r2, #3
10006a62:	1955      	adds	r5, r2, r5
	if (CheckBrickSave(x-1, y, brick)) return True;
10006a64:	b276      	sxtb	r6, r6
	u8* d = &Board[x + y*MAPW];
10006a66:	46ac      	mov	ip, r5
10006a68:	0032      	movs	r2, r6
10006a6a:	9503      	str	r5, [sp, #12]
10006a6c:	4dc0      	ldr	r5, [pc, #768]	; (10006d70 <_Z11CheckBrickXaah.part.0+0x32c>)
10006a6e:	4462      	add	r2, ip
10006a70:	46ac      	mov	ip, r5
	const u8* s = &BrickTemp[brick*BRICKTEMPSIZE];
10006a72:	48c0      	ldr	r0, [pc, #768]	; (10006d74 <_Z11CheckBrickXaah.part.0+0x330>)
	if (CheckBrickSave(x-1, y, brick)) return True;
10006a74:	960f      	str	r6, [sp, #60]	; 0x3c
	const u8* s = &BrickTemp[brick*BRICKTEMPSIZE];
10006a76:	181c      	adds	r4, r3, r0
			b = *s++;
10006a78:	5cc3      	ldrb	r3, [r0, r3]
	u8* d = &Board[x + y*MAPW];
10006a7a:	4462      	add	r2, ip
			b = *s++;
10006a7c:	9304      	str	r3, [sp, #16]
			if (b != 0)
10006a7e:	2b00      	cmp	r3, #0
10006a80:	d000      	beq.n	10006a84 <_Z11CheckBrickXaah.part.0+0x40>
10006a82:	e1eb      	b.n	10006e5c <_Z11CheckBrickXaah.part.0+0x418>
10006a84:	7865      	ldrb	r5, [r4, #1]
	Bool ok = True;
10006a86:	2001      	movs	r0, #1
				if ((y < 1) || (y >= MAPH-1))
10006a88:	b2cb      	uxtb	r3, r1
			if (b != 0)
10006a8a:	9506      	str	r5, [sp, #24]
10006a8c:	2d00      	cmp	r5, #0
10006a8e:	d004      	beq.n	10006a9a <_Z11CheckBrickXaah.part.0+0x56>
				if ((y < 1) || (y >= MAPH-1))
10006a90:	1e5d      	subs	r5, r3, #1
10006a92:	2d11      	cmp	r5, #17
10006a94:	d800      	bhi.n	10006a98 <_Z11CheckBrickXaah.part.0+0x54>
10006a96:	e1f0      	b.n	10006e7a <_Z11CheckBrickXaah.part.0+0x436>
					ok = False;
10006a98:	2000      	movs	r0, #0
			if (b != 0)
10006a9a:	78a5      	ldrb	r5, [r4, #2]
10006a9c:	9508      	str	r5, [sp, #32]
10006a9e:	2d00      	cmp	r5, #0
10006aa0:	d004      	beq.n	10006aac <_Z11CheckBrickXaah.part.0+0x68>
				if ((y < 1) || (y >= MAPH-1))
10006aa2:	1e5d      	subs	r5, r3, #1
10006aa4:	2d11      	cmp	r5, #17
10006aa6:	d800      	bhi.n	10006aaa <_Z11CheckBrickXaah.part.0+0x66>
10006aa8:	e1f2      	b.n	10006e90 <_Z11CheckBrickXaah.part.0+0x44c>
					ok = False;
10006aaa:	2000      	movs	r0, #0
			b = *s++;
10006aac:	1d25      	adds	r5, r4, #4
			if (b != 0)
10006aae:	78e4      	ldrb	r4, [r4, #3]
10006ab0:	9407      	str	r4, [sp, #28]
10006ab2:	2c00      	cmp	r4, #0
10006ab4:	d004      	beq.n	10006ac0 <_Z11CheckBrickXaah.part.0+0x7c>
				if ((y < 1) || (y >= MAPH-1))
10006ab6:	1e5c      	subs	r4, r3, #1
10006ab8:	2c11      	cmp	r4, #17
10006aba:	d800      	bhi.n	10006abe <_Z11CheckBrickXaah.part.0+0x7a>
10006abc:	e1f4      	b.n	10006ea8 <_Z11CheckBrickXaah.part.0+0x464>
					ok = False;
10006abe:	2000      	movs	r0, #0
			b = *s++;
10006ac0:	782e      	ldrb	r6, [r5, #0]
		y++;
10006ac2:	1c5c      	adds	r4, r3, #1
10006ac4:	b2e4      	uxtb	r4, r4
10006ac6:	9400      	str	r4, [sp, #0]
			b = *s++;
10006ac8:	9605      	str	r6, [sp, #20]
			if (b != 0)
10006aca:	2e00      	cmp	r6, #0
10006acc:	d066      	beq.n	10006b9c <_Z11CheckBrickXaah.part.0+0x158>
				if ((y < 1) || (y >= MAPH-1))
10006ace:	2b11      	cmp	r3, #17
10006ad0:	d900      	bls.n	10006ad4 <_Z11CheckBrickXaah.part.0+0x90>
10006ad2:	e17f      	b.n	10006dd4 <_Z11CheckBrickXaah.part.0+0x390>
					if (*d != TILE_EMPTY) ok = False;
10006ad4:	7ed7      	ldrb	r7, [r2, #27]
			if (b != 0)
10006ad6:	786c      	ldrb	r4, [r5, #1]
					if (*d != TILE_EMPTY) ok = False;
10006ad8:	3f08      	subs	r7, #8
10006ada:	427e      	negs	r6, r7
10006adc:	4177      	adcs	r7, r6
10006ade:	427f      	negs	r7, r7
10006ae0:	4038      	ands	r0, r7
			if (b != 0)
10006ae2:	9409      	str	r4, [sp, #36]	; 0x24
10006ae4:	2c00      	cmp	r4, #0
10006ae6:	d000      	beq.n	10006aea <_Z11CheckBrickXaah.part.0+0xa6>
10006ae8:	e117      	b.n	10006d1a <_Z11CheckBrickXaah.part.0+0x2d6>
10006aea:	78af      	ldrb	r7, [r5, #2]
10006aec:	2f00      	cmp	r7, #0
10006aee:	d000      	beq.n	10006af2 <_Z11CheckBrickXaah.part.0+0xae>
10006af0:	e17b      	b.n	10006dea <_Z11CheckBrickXaah.part.0+0x3a6>
10006af2:	78ec      	ldrb	r4, [r5, #3]
			b = *s++;
10006af4:	1d2e      	adds	r6, r5, #4
			if (b != 0)
10006af6:	940d      	str	r4, [sp, #52]	; 0x34
10006af8:	2c00      	cmp	r4, #0
10006afa:	d061      	beq.n	10006bc0 <_Z11CheckBrickXaah.part.0+0x17c>
					if (*d != TILE_EMPTY) ok = False;
10006afc:	7f95      	ldrb	r5, [r2, #30]
10006afe:	3d08      	subs	r5, #8
10006b00:	002c      	movs	r4, r5
10006b02:	4265      	negs	r5, r4
10006b04:	4165      	adcs	r5, r4
10006b06:	426d      	negs	r5, r5
10006b08:	4028      	ands	r0, r5
		y++;
10006b0a:	1c9d      	adds	r5, r3, #2
10006b0c:	b2ed      	uxtb	r5, r5
10006b0e:	9501      	str	r5, [sp, #4]
			b = *s++;
10006b10:	7835      	ldrb	r5, [r6, #0]
10006b12:	46a8      	mov	r8, r5
			if (b != 0)
10006b14:	2d00      	cmp	r5, #0
10006b16:	d15a      	bne.n	10006bce <_Z11CheckBrickXaah.part.0+0x18a>
10006b18:	7875      	ldrb	r5, [r6, #1]
10006b1a:	950a      	str	r5, [sp, #40]	; 0x28
10006b1c:	2d00      	cmp	r5, #0
10006b1e:	d100      	bne.n	10006b22 <_Z11CheckBrickXaah.part.0+0xde>
10006b20:	e17d      	b.n	10006e1e <_Z11CheckBrickXaah.part.0+0x3da>
				if ((y < 1) || (y >= MAPH-1))
10006b22:	9c00      	ldr	r4, [sp, #0]
10006b24:	2c11      	cmp	r4, #17
10006b26:	d800      	bhi.n	10006b2a <_Z11CheckBrickXaah.part.0+0xe6>
10006b28:	e10a      	b.n	10006d40 <_Z11CheckBrickXaah.part.0+0x2fc>
			b = *s++;
10006b2a:	78b0      	ldrb	r0, [r6, #2]
10006b2c:	4684      	mov	ip, r0
			if (b != 0)
10006b2e:	2800      	cmp	r0, #0
10006b30:	d100      	bne.n	10006b34 <_Z11CheckBrickXaah.part.0+0xf0>
10006b32:	e111      	b.n	10006d58 <_Z11CheckBrickXaah.part.0+0x314>
			b = *s++;
10006b34:	78f0      	ldrb	r0, [r6, #3]
10006b36:	1d35      	adds	r5, r6, #4
10006b38:	900e      	str	r0, [sp, #56]	; 0x38
			if (b != 0)
10006b3a:	2800      	cmp	r0, #0
10006b3c:	d000      	beq.n	10006b40 <_Z11CheckBrickXaah.part.0+0xfc>
					ok = False;
10006b3e:	2000      	movs	r0, #0
			b = *s++;
10006b40:	782e      	ldrb	r6, [r5, #0]
10006b42:	46b1      	mov	r9, r6
			if (b != 0)
10006b44:	2e00      	cmp	r6, #0
10006b46:	d069      	beq.n	10006c1c <_Z11CheckBrickXaah.part.0+0x1d8>
				if ((y < 1) || (y >= MAPH-1))
10006b48:	9c01      	ldr	r4, [sp, #4]
10006b4a:	2c11      	cmp	r4, #17
10006b4c:	d900      	bls.n	10006b50 <_Z11CheckBrickXaah.part.0+0x10c>
10006b4e:	e12a      	b.n	10006da6 <_Z11CheckBrickXaah.part.0+0x362>
					if (*d != TILE_EMPTY) ok = False;
10006b50:	2651      	movs	r6, #81	; 0x51
10006b52:	5d96      	ldrb	r6, [r2, r6]
10006b54:	3e08      	subs	r6, #8
10006b56:	0034      	movs	r4, r6
10006b58:	4266      	negs	r6, r4
10006b5a:	4166      	adcs	r6, r4
			if (b != 0)
10006b5c:	786c      	ldrb	r4, [r5, #1]
					if (*d != TILE_EMPTY) ok = False;
10006b5e:	4276      	negs	r6, r6
10006b60:	4030      	ands	r0, r6
			if (b != 0)
10006b62:	940b      	str	r4, [sp, #44]	; 0x2c
10006b64:	2c00      	cmp	r4, #0
10006b66:	d000      	beq.n	10006b6a <_Z11CheckBrickXaah.part.0+0x126>
10006b68:	e10c      	b.n	10006d84 <_Z11CheckBrickXaah.part.0+0x340>
10006b6a:	78ae      	ldrb	r6, [r5, #2]
10006b6c:	2e00      	cmp	r6, #0
10006b6e:	d000      	beq.n	10006b72 <_Z11CheckBrickXaah.part.0+0x12e>
10006b70:	e113      	b.n	10006d9a <_Z11CheckBrickXaah.part.0+0x356>
10006b72:	78ee      	ldrb	r6, [r5, #3]
10006b74:	2e00      	cmp	r6, #0
10006b76:	d000      	beq.n	10006b7a <_Z11CheckBrickXaah.part.0+0x136>
10006b78:	e126      	b.n	10006dc8 <_Z11CheckBrickXaah.part.0+0x384>
	if (res)
10006b7a:	2800      	cmp	r0, #0
10006b7c:	d057      	beq.n	10006c2e <_Z11CheckBrickXaah.part.0+0x1ea>
		BrickX = x;
10006b7e:	4b7e      	ldr	r3, [pc, #504]	; (10006d78 <_Z11CheckBrickXaah.part.0+0x334>)
10006b80:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
10006b82:	701a      	strb	r2, [r3, #0]
		BrickY = y;
10006b84:	4b7d      	ldr	r3, [pc, #500]	; (10006d7c <_Z11CheckBrickXaah.part.0+0x338>)
		Brick = brick;
10006b86:	9a0c      	ldr	r2, [sp, #48]	; 0x30
		BrickY = y;
10006b88:	7019      	strb	r1, [r3, #0]
		Brick = brick;
10006b8a:	4b7d      	ldr	r3, [pc, #500]	; (10006d80 <_Z11CheckBrickXaah.part.0+0x33c>)
10006b8c:	701a      	strb	r2, [r3, #0]
	if (CheckBrickSave(x+1, y, brick)) return True;
	if (CheckBrickSave(x-2, y, brick)) return True;
	return CheckBrickSave(x+2, y, brick);
}
10006b8e:	b011      	add	sp, #68	; 0x44
10006b90:	bcf0      	pop	{r4, r5, r6, r7}
10006b92:	46bb      	mov	fp, r7
10006b94:	46b2      	mov	sl, r6
10006b96:	46a9      	mov	r9, r5
10006b98:	46a0      	mov	r8, r4
10006b9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (b != 0)
10006b9c:	786e      	ldrb	r6, [r5, #1]
10006b9e:	9609      	str	r6, [sp, #36]	; 0x24
10006ba0:	2e00      	cmp	r6, #0
10006ba2:	d100      	bne.n	10006ba6 <_Z11CheckBrickXaah.part.0+0x162>
10006ba4:	e11b      	b.n	10006dde <_Z11CheckBrickXaah.part.0+0x39a>
				if ((y < 1) || (y >= MAPH-1))
10006ba6:	2b11      	cmp	r3, #17
10006ba8:	d800      	bhi.n	10006bac <_Z11CheckBrickXaah.part.0+0x168>
10006baa:	e0b6      	b.n	10006d1a <_Z11CheckBrickXaah.part.0+0x2d6>
			b = *s++;
10006bac:	78af      	ldrb	r7, [r5, #2]
10006bae:	1e38      	subs	r0, r7, #0
			if (b != 0)
10006bb0:	d100      	bne.n	10006bb4 <_Z11CheckBrickXaah.part.0+0x170>
10006bb2:	e0bb      	b.n	10006d2c <_Z11CheckBrickXaah.part.0+0x2e8>
			b = *s++;
10006bb4:	78e8      	ldrb	r0, [r5, #3]
10006bb6:	1d2e      	adds	r6, r5, #4
10006bb8:	900d      	str	r0, [sp, #52]	; 0x34
			if (b != 0)
10006bba:	2800      	cmp	r0, #0
10006bbc:	d000      	beq.n	10006bc0 <_Z11CheckBrickXaah.part.0+0x17c>
					ok = False;
10006bbe:	2000      	movs	r0, #0
		y++;
10006bc0:	1c9d      	adds	r5, r3, #2
10006bc2:	b2ed      	uxtb	r5, r5
10006bc4:	9501      	str	r5, [sp, #4]
			b = *s++;
10006bc6:	7835      	ldrb	r5, [r6, #0]
10006bc8:	46a8      	mov	r8, r5
			if (b != 0)
10006bca:	2d00      	cmp	r5, #0
10006bcc:	d0a4      	beq.n	10006b18 <_Z11CheckBrickXaah.part.0+0xd4>
				if ((y < 1) || (y >= MAPH-1))
10006bce:	9c00      	ldr	r4, [sp, #0]
10006bd0:	2c11      	cmp	r4, #17
10006bd2:	d900      	bls.n	10006bd6 <_Z11CheckBrickXaah.part.0+0x192>
10006bd4:	e11e      	b.n	10006e14 <_Z11CheckBrickXaah.part.0+0x3d0>
					if (*d != TILE_EMPTY) ok = False;
10006bd6:	2536      	movs	r5, #54	; 0x36
10006bd8:	5d55      	ldrb	r5, [r2, r5]
10006bda:	3d08      	subs	r5, #8
10006bdc:	002c      	movs	r4, r5
10006bde:	4265      	negs	r5, r4
10006be0:	4165      	adcs	r5, r4
			if (b != 0)
10006be2:	7874      	ldrb	r4, [r6, #1]
					if (*d != TILE_EMPTY) ok = False;
10006be4:	426d      	negs	r5, r5
10006be6:	4028      	ands	r0, r5
			if (b != 0)
10006be8:	940a      	str	r4, [sp, #40]	; 0x28
10006bea:	2c00      	cmp	r4, #0
10006bec:	d000      	beq.n	10006bf0 <_Z11CheckBrickXaah.part.0+0x1ac>
10006bee:	e0a7      	b.n	10006d40 <_Z11CheckBrickXaah.part.0+0x2fc>
10006bf0:	78b4      	ldrb	r4, [r6, #2]
10006bf2:	46a4      	mov	ip, r4
10006bf4:	2c00      	cmp	r4, #0
10006bf6:	d000      	beq.n	10006bfa <_Z11CheckBrickXaah.part.0+0x1b6>
10006bf8:	e119      	b.n	10006e2e <_Z11CheckBrickXaah.part.0+0x3ea>
10006bfa:	78f4      	ldrb	r4, [r6, #3]
			b = *s++;
10006bfc:	1d35      	adds	r5, r6, #4
			if (b != 0)
10006bfe:	940e      	str	r4, [sp, #56]	; 0x38
10006c00:	2c00      	cmp	r4, #0
10006c02:	d09d      	beq.n	10006b40 <_Z11CheckBrickXaah.part.0+0xfc>
					if (*d != TILE_EMPTY) ok = False;
10006c04:	2639      	movs	r6, #57	; 0x39
10006c06:	5d96      	ldrb	r6, [r2, r6]
10006c08:	3e08      	subs	r6, #8
10006c0a:	0034      	movs	r4, r6
10006c0c:	4266      	negs	r6, r4
10006c0e:	4166      	adcs	r6, r4
10006c10:	4276      	negs	r6, r6
10006c12:	4030      	ands	r0, r6
			b = *s++;
10006c14:	782e      	ldrb	r6, [r5, #0]
10006c16:	46b1      	mov	r9, r6
			if (b != 0)
10006c18:	2e00      	cmp	r6, #0
10006c1a:	d195      	bne.n	10006b48 <_Z11CheckBrickXaah.part.0+0x104>
10006c1c:	786e      	ldrb	r6, [r5, #1]
10006c1e:	960b      	str	r6, [sp, #44]	; 0x2c
10006c20:	2e00      	cmp	r6, #0
10006c22:	d100      	bne.n	10006c26 <_Z11CheckBrickXaah.part.0+0x1e2>
10006c24:	e0c4      	b.n	10006db0 <_Z11CheckBrickXaah.part.0+0x36c>
				if ((y < 1) || (y >= MAPH-1))
10006c26:	9c01      	ldr	r4, [sp, #4]
10006c28:	2c11      	cmp	r4, #17
10006c2a:	d800      	bhi.n	10006c2e <_Z11CheckBrickXaah.part.0+0x1ea>
10006c2c:	e0aa      	b.n	10006d84 <_Z11CheckBrickXaah.part.0+0x340>
	if (CheckBrickSave(x+1, y, brick)) return True;
10006c2e:	9a02      	ldr	r2, [sp, #8]
10006c30:	1c56      	adds	r6, r2, #1
10006c32:	b270      	sxtb	r0, r6
	u8* d = &Board[x + y*MAPW];
10006c34:	4682      	mov	sl, r0
10006c36:	9a03      	ldr	r2, [sp, #12]
	if (CheckBrickSave(x+1, y, brick)) return True;
10006c38:	900f      	str	r0, [sp, #60]	; 0x3c
	u8* d = &Board[x + y*MAPW];
10006c3a:	484d      	ldr	r0, [pc, #308]	; (10006d70 <_Z11CheckBrickXaah.part.0+0x32c>)
10006c3c:	4452      	add	r2, sl
10006c3e:	4682      	mov	sl, r0
			if (b != 0)
10006c40:	9804      	ldr	r0, [sp, #16]
	u8* d = &Board[x + y*MAPW];
10006c42:	4452      	add	r2, sl
			if (b != 0)
10006c44:	2800      	cmp	r0, #0
10006c46:	d000      	beq.n	10006c4a <_Z11CheckBrickXaah.part.0+0x206>
10006c48:	e1d9      	b.n	10006ffe <_Z11CheckBrickXaah.part.0+0x5ba>
	Bool ok = True;
10006c4a:	3001      	adds	r0, #1
			if (b != 0)
10006c4c:	9c06      	ldr	r4, [sp, #24]
10006c4e:	2c00      	cmp	r4, #0
10006c50:	d004      	beq.n	10006c5c <_Z11CheckBrickXaah.part.0+0x218>
				if ((y < 1) || (y >= MAPH-1))
10006c52:	1e5c      	subs	r4, r3, #1
10006c54:	2c11      	cmp	r4, #17
10006c56:	d800      	bhi.n	10006c5a <_Z11CheckBrickXaah.part.0+0x216>
10006c58:	e273      	b.n	10007142 <_Z11CheckBrickXaah.part.0+0x6fe>
					ok = False;
10006c5a:	2000      	movs	r0, #0
			if (b != 0)
10006c5c:	9c08      	ldr	r4, [sp, #32]
10006c5e:	2c00      	cmp	r4, #0
10006c60:	d004      	beq.n	10006c6c <_Z11CheckBrickXaah.part.0+0x228>
				if ((y < 1) || (y >= MAPH-1))
10006c62:	1e5c      	subs	r4, r3, #1
10006c64:	2c11      	cmp	r4, #17
10006c66:	d800      	bhi.n	10006c6a <_Z11CheckBrickXaah.part.0+0x226>
10006c68:	e27a      	b.n	10007160 <_Z11CheckBrickXaah.part.0+0x71c>
					ok = False;
10006c6a:	2000      	movs	r0, #0
			if (b != 0)
10006c6c:	9c07      	ldr	r4, [sp, #28]
10006c6e:	2c00      	cmp	r4, #0
10006c70:	d004      	beq.n	10006c7c <_Z11CheckBrickXaah.part.0+0x238>
				if ((y < 1) || (y >= MAPH-1))
10006c72:	1e5c      	subs	r4, r3, #1
10006c74:	2c11      	cmp	r4, #17
10006c76:	d800      	bhi.n	10006c7a <_Z11CheckBrickXaah.part.0+0x236>
10006c78:	e281      	b.n	1000717e <_Z11CheckBrickXaah.part.0+0x73a>
					ok = False;
10006c7a:	2000      	movs	r0, #0
			if (b != 0)
10006c7c:	9c05      	ldr	r4, [sp, #20]
10006c7e:	2c00      	cmp	r4, #0
10006c80:	d100      	bne.n	10006c84 <_Z11CheckBrickXaah.part.0+0x240>
10006c82:	e120      	b.n	10006ec6 <_Z11CheckBrickXaah.part.0+0x482>
				if ((y < 1) || (y >= MAPH-1))
10006c84:	2b11      	cmp	r3, #17
10006c86:	d800      	bhi.n	10006c8a <_Z11CheckBrickXaah.part.0+0x246>
10006c88:	e216      	b.n	100070b8 <_Z11CheckBrickXaah.part.0+0x674>
			b = *s++;
10006c8a:	9c09      	ldr	r4, [sp, #36]	; 0x24
10006c8c:	1e20      	subs	r0, r4, #0
			if (b != 0)
10006c8e:	d100      	bne.n	10006c92 <_Z11CheckBrickXaah.part.0+0x24e>
10006c90:	e1a7      	b.n	10006fe2 <_Z11CheckBrickXaah.part.0+0x59e>
			b = *s++;
10006c92:	1e38      	subs	r0, r7, #0
			if (b != 0)
10006c94:	d100      	bne.n	10006c98 <_Z11CheckBrickXaah.part.0+0x254>
10006c96:	e1aa      	b.n	10006fee <_Z11CheckBrickXaah.part.0+0x5aa>
					ok = False;
10006c98:	2000      	movs	r0, #0
			if (b != 0)
10006c9a:	4644      	mov	r4, r8
10006c9c:	2c00      	cmp	r4, #0
10006c9e:	d100      	bne.n	10006ca2 <_Z11CheckBrickXaah.part.0+0x25e>
10006ca0:	e143      	b.n	10006f2a <_Z11CheckBrickXaah.part.0+0x4e6>
				if ((y < 1) || (y >= MAPH-1))
10006ca2:	9c00      	ldr	r4, [sp, #0]
10006ca4:	2c11      	cmp	r4, #17
10006ca6:	d900      	bls.n	10006caa <_Z11CheckBrickXaah.part.0+0x266>
10006ca8:	e1bc      	b.n	10007024 <_Z11CheckBrickXaah.part.0+0x5e0>
					if (*d != TILE_EMPTY) ok = False;
10006caa:	2436      	movs	r4, #54	; 0x36
10006cac:	5d14      	ldrb	r4, [r2, r4]
10006cae:	46a2      	mov	sl, r4
10006cb0:	2408      	movs	r4, #8
10006cb2:	4264      	negs	r4, r4
10006cb4:	46a3      	mov	fp, r4
10006cb6:	44da      	add	sl, fp
10006cb8:	4656      	mov	r6, sl
10006cba:	4274      	negs	r4, r6
10006cbc:	4174      	adcs	r4, r6
10006cbe:	4264      	negs	r4, r4
10006cc0:	4020      	ands	r0, r4
			if (b != 0)
10006cc2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
10006cc4:	2c00      	cmp	r4, #0
10006cc6:	d000      	beq.n	10006cca <_Z11CheckBrickXaah.part.0+0x286>
10006cc8:	e1d2      	b.n	10007070 <_Z11CheckBrickXaah.part.0+0x62c>
10006cca:	4664      	mov	r4, ip
10006ccc:	2c00      	cmp	r4, #0
10006cce:	d000      	beq.n	10006cd2 <_Z11CheckBrickXaah.part.0+0x28e>
10006cd0:	e1b1      	b.n	10007036 <_Z11CheckBrickXaah.part.0+0x5f2>
10006cd2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
10006cd4:	2c00      	cmp	r4, #0
10006cd6:	d000      	beq.n	10006cda <_Z11CheckBrickXaah.part.0+0x296>
10006cd8:	e1bd      	b.n	10007056 <_Z11CheckBrickXaah.part.0+0x612>
10006cda:	464c      	mov	r4, r9
10006cdc:	2c00      	cmp	r4, #0
10006cde:	d100      	bne.n	10006ce2 <_Z11CheckBrickXaah.part.0+0x29e>
10006ce0:	e133      	b.n	10006f4a <_Z11CheckBrickXaah.part.0+0x506>
				if ((y < 1) || (y >= MAPH-1))
10006ce2:	9c01      	ldr	r4, [sp, #4]
10006ce4:	2c11      	cmp	r4, #17
10006ce6:	d800      	bhi.n	10006cea <_Z11CheckBrickXaah.part.0+0x2a6>
10006ce8:	e20f      	b.n	1000710a <_Z11CheckBrickXaah.part.0+0x6c6>
			if (b != 0)
10006cea:	980b      	ldr	r0, [sp, #44]	; 0x2c
10006cec:	2800      	cmp	r0, #0
10006cee:	d000      	beq.n	10006cf2 <_Z11CheckBrickXaah.part.0+0x2ae>
10006cf0:	e137      	b.n	10006f62 <_Z11CheckBrickXaah.part.0+0x51e>
			b = *s++;
10006cf2:	78a8      	ldrb	r0, [r5, #2]
			if (b != 0)
10006cf4:	2800      	cmp	r0, #0
10006cf6:	d000      	beq.n	10006cfa <_Z11CheckBrickXaah.part.0+0x2b6>
10006cf8:	e133      	b.n	10006f62 <_Z11CheckBrickXaah.part.0+0x51e>
10006cfa:	78ec      	ldrb	r4, [r5, #3]
10006cfc:	2c00      	cmp	r4, #0
10006cfe:	d008      	beq.n	10006d12 <_Z11CheckBrickXaah.part.0+0x2ce>
				if ((y < 1) || (y >= MAPH-1))
10006d00:	9c01      	ldr	r4, [sp, #4]
10006d02:	2c11      	cmp	r4, #17
10006d04:	d900      	bls.n	10006d08 <_Z11CheckBrickXaah.part.0+0x2c4>
10006d06:	e12c      	b.n	10006f62 <_Z11CheckBrickXaah.part.0+0x51e>
					if (*d != TILE_EMPTY) ok = False;
10006d08:	2454      	movs	r4, #84	; 0x54
10006d0a:	5d12      	ldrb	r2, [r2, r4]
10006d0c:	2a08      	cmp	r2, #8
10006d0e:	d000      	beq.n	10006d12 <_Z11CheckBrickXaah.part.0+0x2ce>
10006d10:	e127      	b.n	10006f62 <_Z11CheckBrickXaah.part.0+0x51e>
	if (res)
10006d12:	2800      	cmp	r0, #0
10006d14:	d000      	beq.n	10006d18 <_Z11CheckBrickXaah.part.0+0x2d4>
10006d16:	e732      	b.n	10006b7e <_Z11CheckBrickXaah.part.0+0x13a>
10006d18:	e123      	b.n	10006f62 <_Z11CheckBrickXaah.part.0+0x51e>
					if (*d != TILE_EMPTY) ok = False;
10006d1a:	7f17      	ldrb	r7, [r2, #28]
10006d1c:	3f08      	subs	r7, #8
10006d1e:	427e      	negs	r6, r7
10006d20:	4177      	adcs	r7, r6
10006d22:	427f      	negs	r7, r7
10006d24:	4038      	ands	r0, r7
			if (b != 0)
10006d26:	78af      	ldrb	r7, [r5, #2]
10006d28:	2f00      	cmp	r7, #0
10006d2a:	d15e      	bne.n	10006dea <_Z11CheckBrickXaah.part.0+0x3a6>
10006d2c:	78ec      	ldrb	r4, [r5, #3]
			b = *s++;
10006d2e:	1d2e      	adds	r6, r5, #4
			if (b != 0)
10006d30:	940d      	str	r4, [sp, #52]	; 0x34
10006d32:	2c00      	cmp	r4, #0
10006d34:	d100      	bne.n	10006d38 <_Z11CheckBrickXaah.part.0+0x2f4>
10006d36:	e743      	b.n	10006bc0 <_Z11CheckBrickXaah.part.0+0x17c>
				if ((y < 1) || (y >= MAPH-1))
10006d38:	2b11      	cmp	r3, #17
10006d3a:	d900      	bls.n	10006d3e <_Z11CheckBrickXaah.part.0+0x2fa>
10006d3c:	e73f      	b.n	10006bbe <_Z11CheckBrickXaah.part.0+0x17a>
10006d3e:	e6dd      	b.n	10006afc <_Z11CheckBrickXaah.part.0+0xb8>
					if (*d != TILE_EMPTY) ok = False;
10006d40:	2537      	movs	r5, #55	; 0x37
10006d42:	5d55      	ldrb	r5, [r2, r5]
10006d44:	3d08      	subs	r5, #8
10006d46:	002c      	movs	r4, r5
10006d48:	4265      	negs	r5, r4
10006d4a:	4165      	adcs	r5, r4
			if (b != 0)
10006d4c:	78b4      	ldrb	r4, [r6, #2]
					if (*d != TILE_EMPTY) ok = False;
10006d4e:	426d      	negs	r5, r5
			if (b != 0)
10006d50:	46a4      	mov	ip, r4
					if (*d != TILE_EMPTY) ok = False;
10006d52:	4028      	ands	r0, r5
			if (b != 0)
10006d54:	2c00      	cmp	r4, #0
10006d56:	d16a      	bne.n	10006e2e <_Z11CheckBrickXaah.part.0+0x3ea>
10006d58:	78f4      	ldrb	r4, [r6, #3]
			b = *s++;
10006d5a:	1d35      	adds	r5, r6, #4
			if (b != 0)
10006d5c:	940e      	str	r4, [sp, #56]	; 0x38
10006d5e:	2c00      	cmp	r4, #0
10006d60:	d100      	bne.n	10006d64 <_Z11CheckBrickXaah.part.0+0x320>
10006d62:	e6ed      	b.n	10006b40 <_Z11CheckBrickXaah.part.0+0xfc>
				if ((y < 1) || (y >= MAPH-1))
10006d64:	9c00      	ldr	r4, [sp, #0]
10006d66:	2c11      	cmp	r4, #17
10006d68:	d900      	bls.n	10006d6c <_Z11CheckBrickXaah.part.0+0x328>
10006d6a:	e6e8      	b.n	10006b3e <_Z11CheckBrickXaah.part.0+0xfa>
10006d6c:	e74a      	b.n	10006c04 <_Z11CheckBrickXaah.part.0+0x1c0>
10006d6e:	46c0      	nop			; (mov r8, r8)
10006d70:	2000327c 	.word	0x2000327c
10006d74:	10010bd4 	.word	0x10010bd4
10006d78:	20012765 	.word	0x20012765
10006d7c:	20012766 	.word	0x20012766
10006d80:	20012764 	.word	0x20012764
					if (*d != TILE_EMPTY) ok = False;
10006d84:	2652      	movs	r6, #82	; 0x52
10006d86:	5d96      	ldrb	r6, [r2, r6]
10006d88:	3e08      	subs	r6, #8
10006d8a:	0034      	movs	r4, r6
10006d8c:	4266      	negs	r6, r4
10006d8e:	4166      	adcs	r6, r4
10006d90:	4276      	negs	r6, r6
10006d92:	4030      	ands	r0, r6
			if (b != 0)
10006d94:	78ae      	ldrb	r6, [r5, #2]
10006d96:	2e00      	cmp	r6, #0
10006d98:	d00e      	beq.n	10006db8 <_Z11CheckBrickXaah.part.0+0x374>
					if (*d != TILE_EMPTY) ok = False;
10006d9a:	2653      	movs	r6, #83	; 0x53
10006d9c:	5d96      	ldrb	r6, [r2, r6]
10006d9e:	2e08      	cmp	r6, #8
10006da0:	d000      	beq.n	10006da4 <_Z11CheckBrickXaah.part.0+0x360>
10006da2:	e744      	b.n	10006c2e <_Z11CheckBrickXaah.part.0+0x1ea>
10006da4:	e6e5      	b.n	10006b72 <_Z11CheckBrickXaah.part.0+0x12e>
			b = *s++;
10006da6:	7868      	ldrb	r0, [r5, #1]
10006da8:	900b      	str	r0, [sp, #44]	; 0x2c
			if (b != 0)
10006daa:	2800      	cmp	r0, #0
10006dac:	d000      	beq.n	10006db0 <_Z11CheckBrickXaah.part.0+0x36c>
10006dae:	e73e      	b.n	10006c2e <_Z11CheckBrickXaah.part.0+0x1ea>
10006db0:	78ae      	ldrb	r6, [r5, #2]
10006db2:	2e00      	cmp	r6, #0
10006db4:	d000      	beq.n	10006db8 <_Z11CheckBrickXaah.part.0+0x374>
10006db6:	e17a      	b.n	100070ae <_Z11CheckBrickXaah.part.0+0x66a>
10006db8:	78ee      	ldrb	r6, [r5, #3]
10006dba:	2e00      	cmp	r6, #0
10006dbc:	d100      	bne.n	10006dc0 <_Z11CheckBrickXaah.part.0+0x37c>
10006dbe:	e6dc      	b.n	10006b7a <_Z11CheckBrickXaah.part.0+0x136>
				if ((y < 1) || (y >= MAPH-1))
10006dc0:	9c01      	ldr	r4, [sp, #4]
10006dc2:	2c11      	cmp	r4, #17
10006dc4:	d900      	bls.n	10006dc8 <_Z11CheckBrickXaah.part.0+0x384>
10006dc6:	e732      	b.n	10006c2e <_Z11CheckBrickXaah.part.0+0x1ea>
					if (*d != TILE_EMPTY) ok = False;
10006dc8:	2654      	movs	r6, #84	; 0x54
10006dca:	5d92      	ldrb	r2, [r2, r6]
10006dcc:	2a08      	cmp	r2, #8
10006dce:	d000      	beq.n	10006dd2 <_Z11CheckBrickXaah.part.0+0x38e>
10006dd0:	e72d      	b.n	10006c2e <_Z11CheckBrickXaah.part.0+0x1ea>
10006dd2:	e6d2      	b.n	10006b7a <_Z11CheckBrickXaah.part.0+0x136>
			b = *s++;
10006dd4:	7868      	ldrb	r0, [r5, #1]
10006dd6:	9009      	str	r0, [sp, #36]	; 0x24
			if (b != 0)
10006dd8:	2800      	cmp	r0, #0
10006dda:	d000      	beq.n	10006dde <_Z11CheckBrickXaah.part.0+0x39a>
10006ddc:	e6e6      	b.n	10006bac <_Z11CheckBrickXaah.part.0+0x168>
10006dde:	78af      	ldrb	r7, [r5, #2]
10006de0:	2f00      	cmp	r7, #0
10006de2:	d0a3      	beq.n	10006d2c <_Z11CheckBrickXaah.part.0+0x2e8>
				if ((y < 1) || (y >= MAPH-1))
10006de4:	2b11      	cmp	r3, #17
10006de6:	d900      	bls.n	10006dea <_Z11CheckBrickXaah.part.0+0x3a6>
10006de8:	e6e4      	b.n	10006bb4 <_Z11CheckBrickXaah.part.0+0x170>
					if (*d != TILE_EMPTY) ok = False;
10006dea:	7f56      	ldrb	r6, [r2, #29]
10006dec:	3e08      	subs	r6, #8
10006dee:	0034      	movs	r4, r6
10006df0:	4266      	negs	r6, r4
10006df2:	4166      	adcs	r6, r4
			if (b != 0)
10006df4:	78ec      	ldrb	r4, [r5, #3]
					if (*d != TILE_EMPTY) ok = False;
10006df6:	4276      	negs	r6, r6
10006df8:	4030      	ands	r0, r6
			if (b != 0)
10006dfa:	940d      	str	r4, [sp, #52]	; 0x34
			b = *s++;
10006dfc:	1d2e      	adds	r6, r5, #4
			if (b != 0)
10006dfe:	2c00      	cmp	r4, #0
10006e00:	d100      	bne.n	10006e04 <_Z11CheckBrickXaah.part.0+0x3c0>
10006e02:	e6dd      	b.n	10006bc0 <_Z11CheckBrickXaah.part.0+0x17c>
					if (*d != TILE_EMPTY) ok = False;
10006e04:	7f95      	ldrb	r5, [r2, #30]
10006e06:	3d08      	subs	r5, #8
10006e08:	002c      	movs	r4, r5
10006e0a:	4265      	negs	r5, r4
10006e0c:	4165      	adcs	r5, r4
10006e0e:	426d      	negs	r5, r5
10006e10:	4028      	ands	r0, r5
10006e12:	e67a      	b.n	10006b0a <_Z11CheckBrickXaah.part.0+0xc6>
			b = *s++;
10006e14:	7870      	ldrb	r0, [r6, #1]
10006e16:	900a      	str	r0, [sp, #40]	; 0x28
			if (b != 0)
10006e18:	2800      	cmp	r0, #0
10006e1a:	d000      	beq.n	10006e1e <_Z11CheckBrickXaah.part.0+0x3da>
10006e1c:	e685      	b.n	10006b2a <_Z11CheckBrickXaah.part.0+0xe6>
10006e1e:	78b4      	ldrb	r4, [r6, #2]
10006e20:	46a4      	mov	ip, r4
10006e22:	2c00      	cmp	r4, #0
10006e24:	d098      	beq.n	10006d58 <_Z11CheckBrickXaah.part.0+0x314>
				if ((y < 1) || (y >= MAPH-1))
10006e26:	9c00      	ldr	r4, [sp, #0]
10006e28:	2c11      	cmp	r4, #17
10006e2a:	d900      	bls.n	10006e2e <_Z11CheckBrickXaah.part.0+0x3ea>
10006e2c:	e682      	b.n	10006b34 <_Z11CheckBrickXaah.part.0+0xf0>
					if (*d != TILE_EMPTY) ok = False;
10006e2e:	2538      	movs	r5, #56	; 0x38
10006e30:	5d55      	ldrb	r5, [r2, r5]
10006e32:	3d08      	subs	r5, #8
10006e34:	002c      	movs	r4, r5
10006e36:	4265      	negs	r5, r4
10006e38:	4165      	adcs	r5, r4
			if (b != 0)
10006e3a:	78f4      	ldrb	r4, [r6, #3]
					if (*d != TILE_EMPTY) ok = False;
10006e3c:	426d      	negs	r5, r5
10006e3e:	4028      	ands	r0, r5
			if (b != 0)
10006e40:	940e      	str	r4, [sp, #56]	; 0x38
			b = *s++;
10006e42:	1d35      	adds	r5, r6, #4
			if (b != 0)
10006e44:	2c00      	cmp	r4, #0
10006e46:	d100      	bne.n	10006e4a <_Z11CheckBrickXaah.part.0+0x406>
10006e48:	e67a      	b.n	10006b40 <_Z11CheckBrickXaah.part.0+0xfc>
					if (*d != TILE_EMPTY) ok = False;
10006e4a:	2639      	movs	r6, #57	; 0x39
10006e4c:	5d96      	ldrb	r6, [r2, r6]
10006e4e:	3e08      	subs	r6, #8
10006e50:	0034      	movs	r4, r6
10006e52:	4266      	negs	r6, r4
10006e54:	4166      	adcs	r6, r4
10006e56:	4276      	negs	r6, r6
10006e58:	4030      	ands	r0, r6
10006e5a:	e6db      	b.n	10006c14 <_Z11CheckBrickXaah.part.0+0x1d0>
				if ((y < 1) || (y >= MAPH-1))
10006e5c:	b2cb      	uxtb	r3, r1
10006e5e:	1e58      	subs	r0, r3, #1
10006e60:	2811      	cmp	r0, #17
10006e62:	d900      	bls.n	10006e66 <_Z11CheckBrickXaah.part.0+0x422>
10006e64:	e11c      	b.n	100070a0 <_Z11CheckBrickXaah.part.0+0x65c>
					if (*d != TILE_EMPTY) ok = False;
10006e66:	7810      	ldrb	r0, [r2, #0]
10006e68:	3808      	subs	r0, #8
10006e6a:	4245      	negs	r5, r0
10006e6c:	4168      	adcs	r0, r5
			if (b != 0)
10006e6e:	7865      	ldrb	r5, [r4, #1]
					if (*d != TILE_EMPTY) ok = False;
10006e70:	b2c0      	uxtb	r0, r0
			if (b != 0)
10006e72:	9506      	str	r5, [sp, #24]
10006e74:	2d00      	cmp	r5, #0
10006e76:	d100      	bne.n	10006e7a <_Z11CheckBrickXaah.part.0+0x436>
10006e78:	e15d      	b.n	10007136 <_Z11CheckBrickXaah.part.0+0x6f2>
					if (*d != TILE_EMPTY) ok = False;
10006e7a:	7855      	ldrb	r5, [r2, #1]
10006e7c:	3d08      	subs	r5, #8
10006e7e:	426f      	negs	r7, r5
10006e80:	417d      	adcs	r5, r7
10006e82:	426d      	negs	r5, r5
10006e84:	4028      	ands	r0, r5
			if (b != 0)
10006e86:	78a5      	ldrb	r5, [r4, #2]
10006e88:	9508      	str	r5, [sp, #32]
10006e8a:	2d00      	cmp	r5, #0
10006e8c:	d100      	bne.n	10006e90 <_Z11CheckBrickXaah.part.0+0x44c>
10006e8e:	e60d      	b.n	10006aac <_Z11CheckBrickXaah.part.0+0x68>
					if (*d != TILE_EMPTY) ok = False;
10006e90:	7895      	ldrb	r5, [r2, #2]
10006e92:	3d08      	subs	r5, #8
10006e94:	426f      	negs	r7, r5
10006e96:	417d      	adcs	r5, r7
10006e98:	426d      	negs	r5, r5
10006e9a:	4028      	ands	r0, r5
			b = *s++;
10006e9c:	1d25      	adds	r5, r4, #4
			if (b != 0)
10006e9e:	78e4      	ldrb	r4, [r4, #3]
10006ea0:	9407      	str	r4, [sp, #28]
10006ea2:	2c00      	cmp	r4, #0
10006ea4:	d100      	bne.n	10006ea8 <_Z11CheckBrickXaah.part.0+0x464>
10006ea6:	e60b      	b.n	10006ac0 <_Z11CheckBrickXaah.part.0+0x7c>
					if (*d != TILE_EMPTY) ok = False;
10006ea8:	78d4      	ldrb	r4, [r2, #3]
			b = *s++;
10006eaa:	782e      	ldrb	r6, [r5, #0]
					if (*d != TILE_EMPTY) ok = False;
10006eac:	3c08      	subs	r4, #8
10006eae:	4267      	negs	r7, r4
10006eb0:	417c      	adcs	r4, r7
10006eb2:	4264      	negs	r4, r4
10006eb4:	4020      	ands	r0, r4
		y++;
10006eb6:	1c5c      	adds	r4, r3, #1
10006eb8:	b2e4      	uxtb	r4, r4
10006eba:	9400      	str	r4, [sp, #0]
			b = *s++;
10006ebc:	9605      	str	r6, [sp, #20]
			if (b != 0)
10006ebe:	2e00      	cmp	r6, #0
10006ec0:	d000      	beq.n	10006ec4 <_Z11CheckBrickXaah.part.0+0x480>
10006ec2:	e604      	b.n	10006ace <_Z11CheckBrickXaah.part.0+0x8a>
10006ec4:	e66a      	b.n	10006b9c <_Z11CheckBrickXaah.part.0+0x158>
10006ec6:	9c09      	ldr	r4, [sp, #36]	; 0x24
10006ec8:	2c00      	cmp	r4, #0
10006eca:	d100      	bne.n	10006ece <_Z11CheckBrickXaah.part.0+0x48a>
10006ecc:	e089      	b.n	10006fe2 <_Z11CheckBrickXaah.part.0+0x59e>
				if ((y < 1) || (y >= MAPH-1))
10006ece:	2b11      	cmp	r3, #17
10006ed0:	d900      	bls.n	10006ed4 <_Z11CheckBrickXaah.part.0+0x490>
10006ed2:	e6de      	b.n	10006c92 <_Z11CheckBrickXaah.part.0+0x24e>
					if (*d != TILE_EMPTY) ok = False;
10006ed4:	7f14      	ldrb	r4, [r2, #28]
10006ed6:	46a2      	mov	sl, r4
10006ed8:	2408      	movs	r4, #8
10006eda:	4264      	negs	r4, r4
10006edc:	46a3      	mov	fp, r4
10006ede:	44da      	add	sl, fp
10006ee0:	4656      	mov	r6, sl
10006ee2:	4274      	negs	r4, r6
10006ee4:	4174      	adcs	r4, r6
10006ee6:	4264      	negs	r4, r4
10006ee8:	4020      	ands	r0, r4
			if (b != 0)
10006eea:	2f00      	cmp	r7, #0
10006eec:	d07f      	beq.n	10006fee <_Z11CheckBrickXaah.part.0+0x5aa>
					if (*d != TILE_EMPTY) ok = False;
10006eee:	7f54      	ldrb	r4, [r2, #29]
10006ef0:	46a2      	mov	sl, r4
10006ef2:	2408      	movs	r4, #8
10006ef4:	4264      	negs	r4, r4
10006ef6:	46a3      	mov	fp, r4
10006ef8:	44da      	add	sl, fp
10006efa:	4656      	mov	r6, sl
10006efc:	4274      	negs	r4, r6
10006efe:	4174      	adcs	r4, r6
10006f00:	4264      	negs	r4, r4
10006f02:	4020      	ands	r0, r4
			if (b != 0)
10006f04:	9c0d      	ldr	r4, [sp, #52]	; 0x34
10006f06:	2c00      	cmp	r4, #0
10006f08:	d100      	bne.n	10006f0c <_Z11CheckBrickXaah.part.0+0x4c8>
10006f0a:	e6c6      	b.n	10006c9a <_Z11CheckBrickXaah.part.0+0x256>
					if (*d != TILE_EMPTY) ok = False;
10006f0c:	7f94      	ldrb	r4, [r2, #30]
10006f0e:	46a2      	mov	sl, r4
10006f10:	2408      	movs	r4, #8
10006f12:	4264      	negs	r4, r4
10006f14:	46a3      	mov	fp, r4
10006f16:	44da      	add	sl, fp
10006f18:	4656      	mov	r6, sl
10006f1a:	4274      	negs	r4, r6
10006f1c:	4174      	adcs	r4, r6
10006f1e:	4264      	negs	r4, r4
10006f20:	4020      	ands	r0, r4
			if (b != 0)
10006f22:	4644      	mov	r4, r8
10006f24:	2c00      	cmp	r4, #0
10006f26:	d000      	beq.n	10006f2a <_Z11CheckBrickXaah.part.0+0x4e6>
10006f28:	e6bb      	b.n	10006ca2 <_Z11CheckBrickXaah.part.0+0x25e>
10006f2a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
10006f2c:	2c00      	cmp	r4, #0
10006f2e:	d07c      	beq.n	1000702a <_Z11CheckBrickXaah.part.0+0x5e6>
				if ((y < 1) || (y >= MAPH-1))
10006f30:	9c00      	ldr	r4, [sp, #0]
10006f32:	2c11      	cmp	r4, #17
10006f34:	d800      	bhi.n	10006f38 <_Z11CheckBrickXaah.part.0+0x4f4>
10006f36:	e09b      	b.n	10007070 <_Z11CheckBrickXaah.part.0+0x62c>
			b = *s++;
10006f38:	4660      	mov	r0, ip
			if (b != 0)
10006f3a:	2800      	cmp	r0, #0
10006f3c:	d100      	bne.n	10006f40 <_Z11CheckBrickXaah.part.0+0x4fc>
10006f3e:	e0a6      	b.n	1000708e <_Z11CheckBrickXaah.part.0+0x64a>
					ok = False;
10006f40:	2000      	movs	r0, #0
			if (b != 0)
10006f42:	464c      	mov	r4, r9
10006f44:	2c00      	cmp	r4, #0
10006f46:	d000      	beq.n	10006f4a <_Z11CheckBrickXaah.part.0+0x506>
10006f48:	e6cb      	b.n	10006ce2 <_Z11CheckBrickXaah.part.0+0x29e>
10006f4a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
10006f4c:	2c00      	cmp	r4, #0
10006f4e:	d100      	bne.n	10006f52 <_Z11CheckBrickXaah.part.0+0x50e>
10006f50:	e0c9      	b.n	100070e6 <_Z11CheckBrickXaah.part.0+0x6a2>
				if ((y < 1) || (y >= MAPH-1))
10006f52:	9c01      	ldr	r4, [sp, #4]
10006f54:	2c11      	cmp	r4, #17
10006f56:	d804      	bhi.n	10006f62 <_Z11CheckBrickXaah.part.0+0x51e>
					if (*d != TILE_EMPTY) ok = False;
10006f58:	2452      	movs	r4, #82	; 0x52
10006f5a:	5d14      	ldrb	r4, [r2, r4]
10006f5c:	2c08      	cmp	r4, #8
10006f5e:	d100      	bne.n	10006f62 <_Z11CheckBrickXaah.part.0+0x51e>
10006f60:	e38c      	b.n	1000767c <_Z11CheckBrickXaah.part.0+0xc38>
	if (CheckBrickSave(x-2, y, brick)) return True;
10006f62:	9a02      	ldr	r2, [sp, #8]
	u8* d = &Board[x + y*MAPW];
10006f64:	48a6      	ldr	r0, [pc, #664]	; (10007200 <_Z11CheckBrickXaah.part.0+0x7bc>)
	if (CheckBrickSave(x-2, y, brick)) return True;
10006f66:	3a02      	subs	r2, #2
10006f68:	b252      	sxtb	r2, r2
10006f6a:	4693      	mov	fp, r2
	u8* d = &Board[x + y*MAPW];
10006f6c:	4682      	mov	sl, r0
10006f6e:	9a03      	ldr	r2, [sp, #12]
			if (b != 0)
10006f70:	9804      	ldr	r0, [sp, #16]
	u8* d = &Board[x + y*MAPW];
10006f72:	445a      	add	r2, fp
10006f74:	4452      	add	r2, sl
			if (b != 0)
10006f76:	2800      	cmp	r0, #0
10006f78:	d000      	beq.n	10006f7c <_Z11CheckBrickXaah.part.0+0x538>
10006f7a:	e2b7      	b.n	100074ec <_Z11CheckBrickXaah.part.0+0xaa8>
	Bool ok = True;
10006f7c:	3001      	adds	r0, #1
			if (b != 0)
10006f7e:	9c06      	ldr	r4, [sp, #24]
10006f80:	2c00      	cmp	r4, #0
10006f82:	d004      	beq.n	10006f8e <_Z11CheckBrickXaah.part.0+0x54a>
				if ((y < 1) || (y >= MAPH-1))
10006f84:	1e5e      	subs	r6, r3, #1
10006f86:	2e11      	cmp	r6, #17
10006f88:	d800      	bhi.n	10006f8c <_Z11CheckBrickXaah.part.0+0x548>
10006f8a:	e33c      	b.n	10007606 <_Z11CheckBrickXaah.part.0+0xbc2>
					ok = False;
10006f8c:	2000      	movs	r0, #0
			if (b != 0)
10006f8e:	9c08      	ldr	r4, [sp, #32]
10006f90:	2c00      	cmp	r4, #0
10006f92:	d004      	beq.n	10006f9e <_Z11CheckBrickXaah.part.0+0x55a>
				if ((y < 1) || (y >= MAPH-1))
10006f94:	1e5e      	subs	r6, r3, #1
10006f96:	2e11      	cmp	r6, #17
10006f98:	d800      	bhi.n	10006f9c <_Z11CheckBrickXaah.part.0+0x558>
10006f9a:	e2b8      	b.n	1000750e <_Z11CheckBrickXaah.part.0+0xaca>
					ok = False;
10006f9c:	2000      	movs	r0, #0
			if (b != 0)
10006f9e:	9c07      	ldr	r4, [sp, #28]
10006fa0:	2c00      	cmp	r4, #0
10006fa2:	d004      	beq.n	10006fae <_Z11CheckBrickXaah.part.0+0x56a>
				if ((y < 1) || (y >= MAPH-1))
10006fa4:	1e5e      	subs	r6, r3, #1
10006fa6:	2e11      	cmp	r6, #17
10006fa8:	d800      	bhi.n	10006fac <_Z11CheckBrickXaah.part.0+0x568>
10006faa:	e2bb      	b.n	10007524 <_Z11CheckBrickXaah.part.0+0xae0>
					ok = False;
10006fac:	2000      	movs	r0, #0
			if (b != 0)
10006fae:	9c05      	ldr	r4, [sp, #20]
10006fb0:	2c00      	cmp	r4, #0
10006fb2:	d100      	bne.n	10006fb6 <_Z11CheckBrickXaah.part.0+0x572>
10006fb4:	e289      	b.n	100074ca <_Z11CheckBrickXaah.part.0+0xa86>
				if ((y < 1) || (y >= MAPH-1))
10006fb6:	2b11      	cmp	r3, #17
10006fb8:	d900      	bls.n	10006fbc <_Z11CheckBrickXaah.part.0+0x578>
10006fba:	e2bb      	b.n	10007534 <_Z11CheckBrickXaah.part.0+0xaf0>
					if (*d != TILE_EMPTY) ok = False;
10006fbc:	7ed6      	ldrb	r6, [r2, #27]
10006fbe:	3e08      	subs	r6, #8
10006fc0:	0034      	movs	r4, r6
10006fc2:	4266      	negs	r6, r4
10006fc4:	4166      	adcs	r6, r4
			if (b != 0)
10006fc6:	9c09      	ldr	r4, [sp, #36]	; 0x24
					if (*d != TILE_EMPTY) ok = False;
10006fc8:	4276      	negs	r6, r6
10006fca:	4030      	ands	r0, r6
			if (b != 0)
10006fcc:	2c00      	cmp	r4, #0
10006fce:	d000      	beq.n	10006fd2 <_Z11CheckBrickXaah.part.0+0x58e>
10006fd0:	e0e1      	b.n	10007196 <_Z11CheckBrickXaah.part.0+0x752>
10006fd2:	2f00      	cmp	r7, #0
10006fd4:	d000      	beq.n	10006fd8 <_Z11CheckBrickXaah.part.0+0x594>
10006fd6:	e0e8      	b.n	100071aa <_Z11CheckBrickXaah.part.0+0x766>
10006fd8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
10006fda:	2c00      	cmp	r4, #0
10006fdc:	d000      	beq.n	10006fe0 <_Z11CheckBrickXaah.part.0+0x59c>
10006fde:	e0ee      	b.n	100071be <_Z11CheckBrickXaah.part.0+0x77a>
10006fe0:	e0f4      	b.n	100071cc <_Z11CheckBrickXaah.part.0+0x788>
10006fe2:	2f00      	cmp	r7, #0
10006fe4:	d003      	beq.n	10006fee <_Z11CheckBrickXaah.part.0+0x5aa>
				if ((y < 1) || (y >= MAPH-1))
10006fe6:	2b11      	cmp	r3, #17
10006fe8:	d981      	bls.n	10006eee <_Z11CheckBrickXaah.part.0+0x4aa>
					ok = False;
10006fea:	2000      	movs	r0, #0
10006fec:	e655      	b.n	10006c9a <_Z11CheckBrickXaah.part.0+0x256>
			if (b != 0)
10006fee:	9c0d      	ldr	r4, [sp, #52]	; 0x34
10006ff0:	2c00      	cmp	r4, #0
10006ff2:	d100      	bne.n	10006ff6 <_Z11CheckBrickXaah.part.0+0x5b2>
10006ff4:	e651      	b.n	10006c9a <_Z11CheckBrickXaah.part.0+0x256>
				if ((y < 1) || (y >= MAPH-1))
10006ff6:	2b11      	cmp	r3, #17
10006ff8:	d988      	bls.n	10006f0c <_Z11CheckBrickXaah.part.0+0x4c8>
					ok = False;
10006ffa:	2000      	movs	r0, #0
10006ffc:	e64d      	b.n	10006c9a <_Z11CheckBrickXaah.part.0+0x256>
				if ((y < 1) || (y >= MAPH-1))
10006ffe:	1e58      	subs	r0, r3, #1
10007000:	2811      	cmp	r0, #17
10007002:	d900      	bls.n	10007006 <_Z11CheckBrickXaah.part.0+0x5c2>
10007004:	e095      	b.n	10007132 <_Z11CheckBrickXaah.part.0+0x6ee>
					if (*d != TILE_EMPTY) ok = False;
10007006:	7810      	ldrb	r0, [r2, #0]
10007008:	3808      	subs	r0, #8
1000700a:	0004      	movs	r4, r0
1000700c:	4260      	negs	r0, r4
1000700e:	4160      	adcs	r0, r4
			if (b != 0)
10007010:	9c06      	ldr	r4, [sp, #24]
					if (*d != TILE_EMPTY) ok = False;
10007012:	b2c0      	uxtb	r0, r0
			if (b != 0)
10007014:	2c00      	cmp	r4, #0
10007016:	d000      	beq.n	1000701a <_Z11CheckBrickXaah.part.0+0x5d6>
10007018:	e093      	b.n	10007142 <_Z11CheckBrickXaah.part.0+0x6fe>
1000701a:	9c08      	ldr	r4, [sp, #32]
1000701c:	2c00      	cmp	r4, #0
1000701e:	d100      	bne.n	10007022 <_Z11CheckBrickXaah.part.0+0x5de>
10007020:	e624      	b.n	10006c6c <_Z11CheckBrickXaah.part.0+0x228>
10007022:	e09d      	b.n	10007160 <_Z11CheckBrickXaah.part.0+0x71c>
			b = *s++;
10007024:	9c0a      	ldr	r4, [sp, #40]	; 0x28
10007026:	1e20      	subs	r0, r4, #0
			if (b != 0)
10007028:	d186      	bne.n	10006f38 <_Z11CheckBrickXaah.part.0+0x4f4>
1000702a:	4664      	mov	r4, ip
1000702c:	2c00      	cmp	r4, #0
1000702e:	d02e      	beq.n	1000708e <_Z11CheckBrickXaah.part.0+0x64a>
				if ((y < 1) || (y >= MAPH-1))
10007030:	9c00      	ldr	r4, [sp, #0]
10007032:	2c11      	cmp	r4, #17
10007034:	d884      	bhi.n	10006f40 <_Z11CheckBrickXaah.part.0+0x4fc>
					if (*d != TILE_EMPTY) ok = False;
10007036:	2438      	movs	r4, #56	; 0x38
10007038:	5d14      	ldrb	r4, [r2, r4]
1000703a:	46a2      	mov	sl, r4
1000703c:	2408      	movs	r4, #8
1000703e:	4264      	negs	r4, r4
10007040:	46a3      	mov	fp, r4
10007042:	44da      	add	sl, fp
10007044:	4656      	mov	r6, sl
10007046:	4274      	negs	r4, r6
10007048:	4174      	adcs	r4, r6
1000704a:	4264      	negs	r4, r4
1000704c:	4020      	ands	r0, r4
			if (b != 0)
1000704e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
10007050:	2c00      	cmp	r4, #0
10007052:	d100      	bne.n	10007056 <_Z11CheckBrickXaah.part.0+0x612>
10007054:	e641      	b.n	10006cda <_Z11CheckBrickXaah.part.0+0x296>
					if (*d != TILE_EMPTY) ok = False;
10007056:	2439      	movs	r4, #57	; 0x39
10007058:	5d14      	ldrb	r4, [r2, r4]
1000705a:	46a2      	mov	sl, r4
1000705c:	2408      	movs	r4, #8
1000705e:	4264      	negs	r4, r4
10007060:	46a3      	mov	fp, r4
10007062:	44da      	add	sl, fp
10007064:	4656      	mov	r6, sl
10007066:	4274      	negs	r4, r6
10007068:	4174      	adcs	r4, r6
1000706a:	4264      	negs	r4, r4
1000706c:	4020      	ands	r0, r4
1000706e:	e634      	b.n	10006cda <_Z11CheckBrickXaah.part.0+0x296>
10007070:	2437      	movs	r4, #55	; 0x37
10007072:	5d14      	ldrb	r4, [r2, r4]
10007074:	46a2      	mov	sl, r4
10007076:	2408      	movs	r4, #8
10007078:	4264      	negs	r4, r4
1000707a:	46a3      	mov	fp, r4
1000707c:	44da      	add	sl, fp
1000707e:	4656      	mov	r6, sl
10007080:	4274      	negs	r4, r6
10007082:	4174      	adcs	r4, r6
10007084:	4264      	negs	r4, r4
10007086:	4020      	ands	r0, r4
			if (b != 0)
10007088:	4664      	mov	r4, ip
1000708a:	2c00      	cmp	r4, #0
1000708c:	d1d3      	bne.n	10007036 <_Z11CheckBrickXaah.part.0+0x5f2>
1000708e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
10007090:	2c00      	cmp	r4, #0
10007092:	d100      	bne.n	10007096 <_Z11CheckBrickXaah.part.0+0x652>
10007094:	e621      	b.n	10006cda <_Z11CheckBrickXaah.part.0+0x296>
				if ((y < 1) || (y >= MAPH-1))
10007096:	9c00      	ldr	r4, [sp, #0]
10007098:	2c11      	cmp	r4, #17
1000709a:	d9dc      	bls.n	10007056 <_Z11CheckBrickXaah.part.0+0x612>
					ok = False;
1000709c:	2000      	movs	r0, #0
1000709e:	e750      	b.n	10006f42 <_Z11CheckBrickXaah.part.0+0x4fe>
			if (b != 0)
100070a0:	7865      	ldrb	r5, [r4, #1]
					ok = False;
100070a2:	2000      	movs	r0, #0
			if (b != 0)
100070a4:	9506      	str	r5, [sp, #24]
100070a6:	2d00      	cmp	r5, #0
100070a8:	d100      	bne.n	100070ac <_Z11CheckBrickXaah.part.0+0x668>
100070aa:	e4f6      	b.n	10006a9a <_Z11CheckBrickXaah.part.0+0x56>
100070ac:	e4f0      	b.n	10006a90 <_Z11CheckBrickXaah.part.0+0x4c>
				if ((y < 1) || (y >= MAPH-1))
100070ae:	9c01      	ldr	r4, [sp, #4]
100070b0:	2c11      	cmp	r4, #17
100070b2:	d900      	bls.n	100070b6 <_Z11CheckBrickXaah.part.0+0x672>
100070b4:	e5bb      	b.n	10006c2e <_Z11CheckBrickXaah.part.0+0x1ea>
100070b6:	e670      	b.n	10006d9a <_Z11CheckBrickXaah.part.0+0x356>
					if (*d != TILE_EMPTY) ok = False;
100070b8:	7ed4      	ldrb	r4, [r2, #27]
100070ba:	46a2      	mov	sl, r4
100070bc:	2408      	movs	r4, #8
100070be:	4264      	negs	r4, r4
100070c0:	46a3      	mov	fp, r4
100070c2:	44da      	add	sl, fp
100070c4:	4656      	mov	r6, sl
100070c6:	4274      	negs	r4, r6
100070c8:	4174      	adcs	r4, r6
100070ca:	4264      	negs	r4, r4
100070cc:	4020      	ands	r0, r4
			if (b != 0)
100070ce:	9c09      	ldr	r4, [sp, #36]	; 0x24
100070d0:	2c00      	cmp	r4, #0
100070d2:	d000      	beq.n	100070d6 <_Z11CheckBrickXaah.part.0+0x692>
100070d4:	e6fe      	b.n	10006ed4 <_Z11CheckBrickXaah.part.0+0x490>
100070d6:	2f00      	cmp	r7, #0
100070d8:	d000      	beq.n	100070dc <_Z11CheckBrickXaah.part.0+0x698>
100070da:	e708      	b.n	10006eee <_Z11CheckBrickXaah.part.0+0x4aa>
100070dc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
100070de:	2c00      	cmp	r4, #0
100070e0:	d000      	beq.n	100070e4 <_Z11CheckBrickXaah.part.0+0x6a0>
100070e2:	e713      	b.n	10006f0c <_Z11CheckBrickXaah.part.0+0x4c8>
100070e4:	e5d9      	b.n	10006c9a <_Z11CheckBrickXaah.part.0+0x256>
100070e6:	78ac      	ldrb	r4, [r5, #2]
100070e8:	2c00      	cmp	r4, #0
100070ea:	d100      	bne.n	100070ee <_Z11CheckBrickXaah.part.0+0x6aa>
100070ec:	e605      	b.n	10006cfa <_Z11CheckBrickXaah.part.0+0x2b6>
				if ((y < 1) || (y >= MAPH-1))
100070ee:	9c01      	ldr	r4, [sp, #4]
100070f0:	2c11      	cmp	r4, #17
100070f2:	d900      	bls.n	100070f6 <_Z11CheckBrickXaah.part.0+0x6b2>
100070f4:	e735      	b.n	10006f62 <_Z11CheckBrickXaah.part.0+0x51e>
					if (*d != TILE_EMPTY) ok = False;
100070f6:	2453      	movs	r4, #83	; 0x53
100070f8:	5d14      	ldrb	r4, [r2, r4]
100070fa:	2c08      	cmp	r4, #8
100070fc:	d000      	beq.n	10007100 <_Z11CheckBrickXaah.part.0+0x6bc>
100070fe:	e730      	b.n	10006f62 <_Z11CheckBrickXaah.part.0+0x51e>
			if (b != 0)
10007100:	78ec      	ldrb	r4, [r5, #3]
10007102:	2c00      	cmp	r4, #0
10007104:	d100      	bne.n	10007108 <_Z11CheckBrickXaah.part.0+0x6c4>
10007106:	e604      	b.n	10006d12 <_Z11CheckBrickXaah.part.0+0x2ce>
10007108:	e5fe      	b.n	10006d08 <_Z11CheckBrickXaah.part.0+0x2c4>
					if (*d != TILE_EMPTY) ok = False;
1000710a:	2451      	movs	r4, #81	; 0x51
1000710c:	5d14      	ldrb	r4, [r2, r4]
1000710e:	46a2      	mov	sl, r4
10007110:	2408      	movs	r4, #8
10007112:	4264      	negs	r4, r4
10007114:	46a3      	mov	fp, r4
10007116:	44da      	add	sl, fp
10007118:	4656      	mov	r6, sl
1000711a:	4274      	negs	r4, r6
1000711c:	4174      	adcs	r4, r6
1000711e:	4264      	negs	r4, r4
10007120:	4020      	ands	r0, r4
			if (b != 0)
10007122:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
10007124:	2c00      	cmp	r4, #0
10007126:	d000      	beq.n	1000712a <_Z11CheckBrickXaah.part.0+0x6e6>
10007128:	e716      	b.n	10006f58 <_Z11CheckBrickXaah.part.0+0x514>
1000712a:	78ac      	ldrb	r4, [r5, #2]
1000712c:	2c00      	cmp	r4, #0
1000712e:	d1e2      	bne.n	100070f6 <_Z11CheckBrickXaah.part.0+0x6b2>
10007130:	e7e6      	b.n	10007100 <_Z11CheckBrickXaah.part.0+0x6bc>
					ok = False;
10007132:	2000      	movs	r0, #0
10007134:	e58a      	b.n	10006c4c <_Z11CheckBrickXaah.part.0+0x208>
			if (b != 0)
10007136:	78a5      	ldrb	r5, [r4, #2]
10007138:	9508      	str	r5, [sp, #32]
1000713a:	2d00      	cmp	r5, #0
1000713c:	d100      	bne.n	10007140 <_Z11CheckBrickXaah.part.0+0x6fc>
1000713e:	e4b5      	b.n	10006aac <_Z11CheckBrickXaah.part.0+0x68>
10007140:	e6a6      	b.n	10006e90 <_Z11CheckBrickXaah.part.0+0x44c>
					if (*d != TILE_EMPTY) ok = False;
10007142:	7854      	ldrb	r4, [r2, #1]
10007144:	46a2      	mov	sl, r4
10007146:	2408      	movs	r4, #8
10007148:	4264      	negs	r4, r4
1000714a:	46a3      	mov	fp, r4
1000714c:	44da      	add	sl, fp
1000714e:	4656      	mov	r6, sl
10007150:	4274      	negs	r4, r6
10007152:	4174      	adcs	r4, r6
10007154:	4264      	negs	r4, r4
10007156:	4020      	ands	r0, r4
			if (b != 0)
10007158:	9c08      	ldr	r4, [sp, #32]
1000715a:	2c00      	cmp	r4, #0
1000715c:	d100      	bne.n	10007160 <_Z11CheckBrickXaah.part.0+0x71c>
1000715e:	e585      	b.n	10006c6c <_Z11CheckBrickXaah.part.0+0x228>
					if (*d != TILE_EMPTY) ok = False;
10007160:	7894      	ldrb	r4, [r2, #2]
10007162:	46a2      	mov	sl, r4
10007164:	2408      	movs	r4, #8
10007166:	4264      	negs	r4, r4
10007168:	46a3      	mov	fp, r4
1000716a:	44da      	add	sl, fp
1000716c:	4656      	mov	r6, sl
1000716e:	4274      	negs	r4, r6
10007170:	4174      	adcs	r4, r6
10007172:	4264      	negs	r4, r4
10007174:	4020      	ands	r0, r4
			if (b != 0)
10007176:	9c07      	ldr	r4, [sp, #28]
10007178:	2c00      	cmp	r4, #0
1000717a:	d100      	bne.n	1000717e <_Z11CheckBrickXaah.part.0+0x73a>
1000717c:	e57e      	b.n	10006c7c <_Z11CheckBrickXaah.part.0+0x238>
					if (*d != TILE_EMPTY) ok = False;
1000717e:	78d4      	ldrb	r4, [r2, #3]
10007180:	46a2      	mov	sl, r4
10007182:	2408      	movs	r4, #8
10007184:	4264      	negs	r4, r4
10007186:	46a3      	mov	fp, r4
10007188:	44da      	add	sl, fp
1000718a:	4656      	mov	r6, sl
1000718c:	4274      	negs	r4, r6
1000718e:	4174      	adcs	r4, r6
10007190:	4264      	negs	r4, r4
10007192:	4020      	ands	r0, r4
10007194:	e572      	b.n	10006c7c <_Z11CheckBrickXaah.part.0+0x238>
10007196:	7f16      	ldrb	r6, [r2, #28]
10007198:	3e08      	subs	r6, #8
1000719a:	0034      	movs	r4, r6
1000719c:	4266      	negs	r6, r4
1000719e:	4166      	adcs	r6, r4
100071a0:	4276      	negs	r6, r6
100071a2:	4030      	ands	r0, r6
			if (b != 0)
100071a4:	2f00      	cmp	r7, #0
100071a6:	d100      	bne.n	100071aa <_Z11CheckBrickXaah.part.0+0x766>
100071a8:	e197      	b.n	100074da <_Z11CheckBrickXaah.part.0+0xa96>
					if (*d != TILE_EMPTY) ok = False;
100071aa:	7f56      	ldrb	r6, [r2, #29]
100071ac:	3e08      	subs	r6, #8
100071ae:	0034      	movs	r4, r6
100071b0:	4266      	negs	r6, r4
100071b2:	4166      	adcs	r6, r4
			if (b != 0)
100071b4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
					if (*d != TILE_EMPTY) ok = False;
100071b6:	4276      	negs	r6, r6
100071b8:	4030      	ands	r0, r6
			if (b != 0)
100071ba:	2c00      	cmp	r4, #0
100071bc:	d006      	beq.n	100071cc <_Z11CheckBrickXaah.part.0+0x788>
					if (*d != TILE_EMPTY) ok = False;
100071be:	7f96      	ldrb	r6, [r2, #30]
100071c0:	3e08      	subs	r6, #8
100071c2:	0034      	movs	r4, r6
100071c4:	4266      	negs	r6, r4
100071c6:	4166      	adcs	r6, r4
100071c8:	4276      	negs	r6, r6
100071ca:	4030      	ands	r0, r6
			if (b != 0)
100071cc:	4644      	mov	r4, r8
100071ce:	2c00      	cmp	r4, #0
100071d0:	d100      	bne.n	100071d4 <_Z11CheckBrickXaah.part.0+0x790>
100071d2:	e166      	b.n	100074a2 <_Z11CheckBrickXaah.part.0+0xa5e>
				if ((y < 1) || (y >= MAPH-1))
100071d4:	9c00      	ldr	r4, [sp, #0]
100071d6:	2c11      	cmp	r4, #17
100071d8:	d900      	bls.n	100071dc <_Z11CheckBrickXaah.part.0+0x798>
100071da:	e1b5      	b.n	10007548 <_Z11CheckBrickXaah.part.0+0xb04>
					if (*d != TILE_EMPTY) ok = False;
100071dc:	2636      	movs	r6, #54	; 0x36
100071de:	5d96      	ldrb	r6, [r2, r6]
100071e0:	3e08      	subs	r6, #8
100071e2:	0034      	movs	r4, r6
100071e4:	4266      	negs	r6, r4
100071e6:	4166      	adcs	r6, r4
			if (b != 0)
100071e8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
					if (*d != TILE_EMPTY) ok = False;
100071ea:	4276      	negs	r6, r6
100071ec:	4030      	ands	r0, r6
			if (b != 0)
100071ee:	2c00      	cmp	r4, #0
100071f0:	d108      	bne.n	10007204 <_Z11CheckBrickXaah.part.0+0x7c0>
100071f2:	4664      	mov	r4, ip
100071f4:	2c00      	cmp	r4, #0
100071f6:	d111      	bne.n	1000721c <_Z11CheckBrickXaah.part.0+0x7d8>
100071f8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
100071fa:	2c00      	cmp	r4, #0
100071fc:	d119      	bne.n	10007232 <_Z11CheckBrickXaah.part.0+0x7ee>
100071fe:	e020      	b.n	10007242 <_Z11CheckBrickXaah.part.0+0x7fe>
10007200:	2000327c 	.word	0x2000327c
					if (*d != TILE_EMPTY) ok = False;
10007204:	2637      	movs	r6, #55	; 0x37
10007206:	5d96      	ldrb	r6, [r2, r6]
10007208:	3e08      	subs	r6, #8
1000720a:	0034      	movs	r4, r6
1000720c:	4266      	negs	r6, r4
1000720e:	4166      	adcs	r6, r4
			if (b != 0)
10007210:	4664      	mov	r4, ip
					if (*d != TILE_EMPTY) ok = False;
10007212:	4276      	negs	r6, r6
10007214:	4030      	ands	r0, r6
			if (b != 0)
10007216:	2c00      	cmp	r4, #0
10007218:	d100      	bne.n	1000721c <_Z11CheckBrickXaah.part.0+0x7d8>
1000721a:	e14c      	b.n	100074b6 <_Z11CheckBrickXaah.part.0+0xa72>
					if (*d != TILE_EMPTY) ok = False;
1000721c:	2638      	movs	r6, #56	; 0x38
1000721e:	5d96      	ldrb	r6, [r2, r6]
10007220:	3e08      	subs	r6, #8
10007222:	0034      	movs	r4, r6
10007224:	4266      	negs	r6, r4
10007226:	4166      	adcs	r6, r4
			if (b != 0)
10007228:	9c0e      	ldr	r4, [sp, #56]	; 0x38
					if (*d != TILE_EMPTY) ok = False;
1000722a:	4276      	negs	r6, r6
1000722c:	4030      	ands	r0, r6
			if (b != 0)
1000722e:	2c00      	cmp	r4, #0
10007230:	d007      	beq.n	10007242 <_Z11CheckBrickXaah.part.0+0x7fe>
					if (*d != TILE_EMPTY) ok = False;
10007232:	2639      	movs	r6, #57	; 0x39
10007234:	5d96      	ldrb	r6, [r2, r6]
10007236:	3e08      	subs	r6, #8
10007238:	0034      	movs	r4, r6
1000723a:	4266      	negs	r6, r4
1000723c:	4166      	adcs	r6, r4
1000723e:	4276      	negs	r6, r6
10007240:	4030      	ands	r0, r6
			if (b != 0)
10007242:	464c      	mov	r4, r9
10007244:	2c00      	cmp	r4, #0
10007246:	d100      	bne.n	1000724a <_Z11CheckBrickXaah.part.0+0x806>
10007248:	e119      	b.n	1000747e <_Z11CheckBrickXaah.part.0+0xa3a>
				if ((y < 1) || (y >= MAPH-1))
1000724a:	9c01      	ldr	r4, [sp, #4]
1000724c:	2c11      	cmp	r4, #17
1000724e:	d900      	bls.n	10007252 <_Z11CheckBrickXaah.part.0+0x80e>
10007250:	e100      	b.n	10007454 <_Z11CheckBrickXaah.part.0+0xa10>
					if (*d != TILE_EMPTY) ok = False;
10007252:	2651      	movs	r6, #81	; 0x51
10007254:	5d96      	ldrb	r6, [r2, r6]
10007256:	3e08      	subs	r6, #8
10007258:	0034      	movs	r4, r6
1000725a:	4266      	negs	r6, r4
1000725c:	4166      	adcs	r6, r4
			if (b != 0)
1000725e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
					if (*d != TILE_EMPTY) ok = False;
10007260:	4276      	negs	r6, r6
10007262:	4030      	ands	r0, r6
			if (b != 0)
10007264:	2c00      	cmp	r4, #0
10007266:	d000      	beq.n	1000726a <_Z11CheckBrickXaah.part.0+0x826>
10007268:	e111      	b.n	1000748e <_Z11CheckBrickXaah.part.0+0xa4a>
1000726a:	78ae      	ldrb	r6, [r5, #2]
1000726c:	2e00      	cmp	r6, #0
1000726e:	d100      	bne.n	10007272 <_Z11CheckBrickXaah.part.0+0x82e>
10007270:	e0e6      	b.n	10007440 <_Z11CheckBrickXaah.part.0+0x9fc>
					if (*d != TILE_EMPTY) ok = False;
10007272:	2653      	movs	r6, #83	; 0x53
10007274:	5d96      	ldrb	r6, [r2, r6]
10007276:	2e08      	cmp	r6, #8
10007278:	d100      	bne.n	1000727c <_Z11CheckBrickXaah.part.0+0x838>
1000727a:	e0e1      	b.n	10007440 <_Z11CheckBrickXaah.part.0+0x9fc>
	return CheckBrickSave(x+2, y, brick);
1000727c:	9e02      	ldr	r6, [sp, #8]
	u8* d = &Board[x + y*MAPW];
1000727e:	9a03      	ldr	r2, [sp, #12]
	return CheckBrickSave(x+2, y, brick);
10007280:	3602      	adds	r6, #2
10007282:	b270      	sxtb	r0, r6
	u8* d = &Board[x + y*MAPW];
10007284:	4682      	mov	sl, r0
	return CheckBrickSave(x+2, y, brick);
10007286:	9002      	str	r0, [sp, #8]
	u8* d = &Board[x + y*MAPW];
10007288:	48bc      	ldr	r0, [pc, #752]	; (1000757c <_Z11CheckBrickXaah.part.0+0xb38>)
1000728a:	4452      	add	r2, sl
1000728c:	4682      	mov	sl, r0
			if (b != 0)
1000728e:	9804      	ldr	r0, [sp, #16]
	u8* d = &Board[x + y*MAPW];
10007290:	4452      	add	r2, sl
			if (b != 0)
10007292:	2800      	cmp	r0, #0
10007294:	d000      	beq.n	10007298 <_Z11CheckBrickXaah.part.0+0x854>
10007296:	e175      	b.n	10007584 <_Z11CheckBrickXaah.part.0+0xb40>
	Bool ok = True;
10007298:	3001      	adds	r0, #1
			if (b != 0)
1000729a:	9c06      	ldr	r4, [sp, #24]
1000729c:	2c00      	cmp	r4, #0
1000729e:	d004      	beq.n	100072aa <_Z11CheckBrickXaah.part.0+0x866>
				if ((y < 1) || (y >= MAPH-1))
100072a0:	1e5c      	subs	r4, r3, #1
100072a2:	2c11      	cmp	r4, #17
100072a4:	d800      	bhi.n	100072a8 <_Z11CheckBrickXaah.part.0+0x864>
100072a6:	e179      	b.n	1000759c <_Z11CheckBrickXaah.part.0+0xb58>
					ok = False;
100072a8:	2000      	movs	r0, #0
			if (b != 0)
100072aa:	9c08      	ldr	r4, [sp, #32]
100072ac:	2c00      	cmp	r4, #0
100072ae:	d004      	beq.n	100072ba <_Z11CheckBrickXaah.part.0+0x876>
				if ((y < 1) || (y >= MAPH-1))
100072b0:	1e5c      	subs	r4, r3, #1
100072b2:	2c11      	cmp	r4, #17
100072b4:	d800      	bhi.n	100072b8 <_Z11CheckBrickXaah.part.0+0x874>
100072b6:	e180      	b.n	100075ba <_Z11CheckBrickXaah.part.0+0xb76>
					ok = False;
100072b8:	2000      	movs	r0, #0
			if (b != 0)
100072ba:	9c07      	ldr	r4, [sp, #28]
100072bc:	2c00      	cmp	r4, #0
100072be:	d004      	beq.n	100072ca <_Z11CheckBrickXaah.part.0+0x886>
				if ((y < 1) || (y >= MAPH-1))
100072c0:	1e5c      	subs	r4, r3, #1
100072c2:	2c11      	cmp	r4, #17
100072c4:	d800      	bhi.n	100072c8 <_Z11CheckBrickXaah.part.0+0x884>
100072c6:	e187      	b.n	100075d8 <_Z11CheckBrickXaah.part.0+0xb94>
					ok = False;
100072c8:	2000      	movs	r0, #0
			if (b != 0)
100072ca:	9c05      	ldr	r4, [sp, #20]
100072cc:	2c00      	cmp	r4, #0
100072ce:	d01d      	beq.n	1000730c <_Z11CheckBrickXaah.part.0+0x8c8>
				if ((y < 1) || (y >= MAPH-1))
100072d0:	2b11      	cmp	r3, #17
100072d2:	d900      	bls.n	100072d6 <_Z11CheckBrickXaah.part.0+0x892>
100072d4:	e0a0      	b.n	10007418 <_Z11CheckBrickXaah.part.0+0x9d4>
					if (*d != TILE_EMPTY) ok = False;
100072d6:	7ed4      	ldrb	r4, [r2, #27]
100072d8:	46a2      	mov	sl, r4
100072da:	2408      	movs	r4, #8
100072dc:	4264      	negs	r4, r4
100072de:	46a3      	mov	fp, r4
100072e0:	44da      	add	sl, fp
100072e2:	4656      	mov	r6, sl
100072e4:	4274      	negs	r4, r6
100072e6:	4174      	adcs	r4, r6
100072e8:	4264      	negs	r4, r4
100072ea:	4020      	ands	r0, r4
			if (b != 0)
100072ec:	9c09      	ldr	r4, [sp, #36]	; 0x24
100072ee:	2c00      	cmp	r4, #0
100072f0:	d113      	bne.n	1000731a <_Z11CheckBrickXaah.part.0+0x8d6>
100072f2:	2f00      	cmp	r7, #0
100072f4:	d000      	beq.n	100072f8 <_Z11CheckBrickXaah.part.0+0x8b4>
100072f6:	e098      	b.n	1000742a <_Z11CheckBrickXaah.part.0+0x9e6>
100072f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
100072fa:	2b00      	cmp	r3, #0
100072fc:	d020      	beq.n	10007340 <_Z11CheckBrickXaah.part.0+0x8fc>
					if (*d != TILE_EMPTY) ok = False;
100072fe:	7f93      	ldrb	r3, [r2, #30]
10007300:	3b08      	subs	r3, #8
10007302:	425f      	negs	r7, r3
10007304:	417b      	adcs	r3, r7
10007306:	425b      	negs	r3, r3
10007308:	4018      	ands	r0, r3
1000730a:	e019      	b.n	10007340 <_Z11CheckBrickXaah.part.0+0x8fc>
			if (b != 0)
1000730c:	9c09      	ldr	r4, [sp, #36]	; 0x24
1000730e:	2c00      	cmp	r4, #0
10007310:	d100      	bne.n	10007314 <_Z11CheckBrickXaah.part.0+0x8d0>
10007312:	e085      	b.n	10007420 <_Z11CheckBrickXaah.part.0+0x9dc>
				if ((y < 1) || (y >= MAPH-1))
10007314:	2b11      	cmp	r3, #17
10007316:	d900      	bls.n	1000731a <_Z11CheckBrickXaah.part.0+0x8d6>
10007318:	e122      	b.n	10007560 <_Z11CheckBrickXaah.part.0+0xb1c>
					if (*d != TILE_EMPTY) ok = False;
1000731a:	7f14      	ldrb	r4, [r2, #28]
1000731c:	46a2      	mov	sl, r4
1000731e:	2408      	movs	r4, #8
10007320:	4264      	negs	r4, r4
10007322:	46a3      	mov	fp, r4
10007324:	44da      	add	sl, fp
10007326:	4656      	mov	r6, sl
10007328:	4274      	negs	r4, r6
1000732a:	4174      	adcs	r4, r6
1000732c:	4264      	negs	r4, r4
1000732e:	4020      	ands	r0, r4
			if (b != 0)
10007330:	2f00      	cmp	r7, #0
10007332:	d17a      	bne.n	1000742a <_Z11CheckBrickXaah.part.0+0x9e6>
10007334:	9c0d      	ldr	r4, [sp, #52]	; 0x34
10007336:	2c00      	cmp	r4, #0
10007338:	d002      	beq.n	10007340 <_Z11CheckBrickXaah.part.0+0x8fc>
				if ((y < 1) || (y >= MAPH-1))
1000733a:	2b11      	cmp	r3, #17
1000733c:	d9df      	bls.n	100072fe <_Z11CheckBrickXaah.part.0+0x8ba>
					ok = False;
1000733e:	2000      	movs	r0, #0
			if (b != 0)
10007340:	4643      	mov	r3, r8
10007342:	2b00      	cmp	r3, #0
10007344:	d01a      	beq.n	1000737c <_Z11CheckBrickXaah.part.0+0x938>
				if ((y < 1) || (y >= MAPH-1))
10007346:	9b00      	ldr	r3, [sp, #0]
10007348:	2b11      	cmp	r3, #17
1000734a:	d84f      	bhi.n	100073ec <_Z11CheckBrickXaah.part.0+0x9a8>
					if (*d != TILE_EMPTY) ok = False;
1000734c:	2336      	movs	r3, #54	; 0x36
1000734e:	5cd3      	ldrb	r3, [r2, r3]
10007350:	3b08      	subs	r3, #8
10007352:	425f      	negs	r7, r3
10007354:	417b      	adcs	r3, r7
10007356:	425b      	negs	r3, r3
10007358:	4018      	ands	r0, r3
			if (b != 0)
1000735a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1000735c:	2b00      	cmp	r3, #0
1000735e:	d114      	bne.n	1000738a <_Z11CheckBrickXaah.part.0+0x946>
10007360:	4663      	mov	r3, ip
10007362:	2b00      	cmp	r3, #0
10007364:	d14d      	bne.n	10007402 <_Z11CheckBrickXaah.part.0+0x9be>
10007366:	9b0e      	ldr	r3, [sp, #56]	; 0x38
10007368:	2b00      	cmp	r3, #0
1000736a:	d01f      	beq.n	100073ac <_Z11CheckBrickXaah.part.0+0x968>
					if (*d != TILE_EMPTY) ok = False;
1000736c:	2339      	movs	r3, #57	; 0x39
1000736e:	5cd3      	ldrb	r3, [r2, r3]
10007370:	3b08      	subs	r3, #8
10007372:	425c      	negs	r4, r3
10007374:	4163      	adcs	r3, r4
10007376:	425b      	negs	r3, r3
10007378:	4018      	ands	r0, r3
1000737a:	e017      	b.n	100073ac <_Z11CheckBrickXaah.part.0+0x968>
			if (b != 0)
1000737c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1000737e:	2b00      	cmp	r3, #0
10007380:	d038      	beq.n	100073f4 <_Z11CheckBrickXaah.part.0+0x9b0>
				if ((y < 1) || (y >= MAPH-1))
10007382:	9b00      	ldr	r3, [sp, #0]
10007384:	2b11      	cmp	r3, #17
10007386:	d900      	bls.n	1000738a <_Z11CheckBrickXaah.part.0+0x946>
10007388:	e0f6      	b.n	10007578 <_Z11CheckBrickXaah.part.0+0xb34>
					if (*d != TILE_EMPTY) ok = False;
1000738a:	2337      	movs	r3, #55	; 0x37
1000738c:	5cd3      	ldrb	r3, [r2, r3]
1000738e:	3b08      	subs	r3, #8
10007390:	425f      	negs	r7, r3
10007392:	417b      	adcs	r3, r7
10007394:	425b      	negs	r3, r3
10007396:	4018      	ands	r0, r3
			if (b != 0)
10007398:	4663      	mov	r3, ip
1000739a:	2b00      	cmp	r3, #0
1000739c:	d131      	bne.n	10007402 <_Z11CheckBrickXaah.part.0+0x9be>
1000739e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
100073a0:	2b00      	cmp	r3, #0
100073a2:	d003      	beq.n	100073ac <_Z11CheckBrickXaah.part.0+0x968>
				if ((y < 1) || (y >= MAPH-1))
100073a4:	9b00      	ldr	r3, [sp, #0]
100073a6:	2b11      	cmp	r3, #17
100073a8:	d9e0      	bls.n	1000736c <_Z11CheckBrickXaah.part.0+0x928>
					ok = False;
100073aa:	2000      	movs	r0, #0
			if (b != 0)
100073ac:	464b      	mov	r3, r9
100073ae:	2b00      	cmp	r3, #0
100073b0:	d100      	bne.n	100073b4 <_Z11CheckBrickXaah.part.0+0x970>
100073b2:	e0d7      	b.n	10007564 <_Z11CheckBrickXaah.part.0+0xb20>
				if ((y < 1) || (y >= MAPH-1))
100073b4:	9b01      	ldr	r3, [sp, #4]
100073b6:	2b11      	cmp	r3, #17
100073b8:	d900      	bls.n	100073bc <_Z11CheckBrickXaah.part.0+0x978>
100073ba:	e132      	b.n	10007622 <_Z11CheckBrickXaah.part.0+0xbde>
					if (*d != TILE_EMPTY) ok = False;
100073bc:	2351      	movs	r3, #81	; 0x51
100073be:	5cd3      	ldrb	r3, [r2, r3]
100073c0:	3b08      	subs	r3, #8
100073c2:	425c      	negs	r4, r3
100073c4:	4163      	adcs	r3, r4
100073c6:	425b      	negs	r3, r3
100073c8:	4018      	ands	r0, r3
			if (b != 0)
100073ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
100073cc:	2b00      	cmp	r3, #0
100073ce:	d100      	bne.n	100073d2 <_Z11CheckBrickXaah.part.0+0x98e>
100073d0:	e15e      	b.n	10007690 <_Z11CheckBrickXaah.part.0+0xc4c>
					if (*d != TILE_EMPTY) ok = False;
100073d2:	2352      	movs	r3, #82	; 0x52
100073d4:	5cd3      	ldrb	r3, [r2, r3]
100073d6:	2b08      	cmp	r3, #8
100073d8:	d100      	bne.n	100073dc <_Z11CheckBrickXaah.part.0+0x998>
100073da:	e15d      	b.n	10007698 <_Z11CheckBrickXaah.part.0+0xc54>
			b = *s++;
100073dc:	78a8      	ldrb	r0, [r5, #2]
			if (b != 0)
100073de:	2800      	cmp	r0, #0
100073e0:	d101      	bne.n	100073e6 <_Z11CheckBrickXaah.part.0+0x9a2>
100073e2:	f7ff fbd4 	bl	10006b8e <_Z11CheckBrickXaah.part.0+0x14a>
100073e6:	2000      	movs	r0, #0
100073e8:	f7ff fbd1 	bl	10006b8e <_Z11CheckBrickXaah.part.0+0x14a>
			b = *s++;
100073ec:	980a      	ldr	r0, [sp, #40]	; 0x28
			if (b != 0)
100073ee:	2800      	cmp	r0, #0
100073f0:	d000      	beq.n	100073f4 <_Z11CheckBrickXaah.part.0+0x9b0>
100073f2:	e0c1      	b.n	10007578 <_Z11CheckBrickXaah.part.0+0xb34>
100073f4:	4663      	mov	r3, ip
100073f6:	2b00      	cmp	r3, #0
100073f8:	d0d1      	beq.n	1000739e <_Z11CheckBrickXaah.part.0+0x95a>
				if ((y < 1) || (y >= MAPH-1))
100073fa:	9b00      	ldr	r3, [sp, #0]
100073fc:	2b11      	cmp	r3, #17
100073fe:	d900      	bls.n	10007402 <_Z11CheckBrickXaah.part.0+0x9be>
10007400:	e0ba      	b.n	10007578 <_Z11CheckBrickXaah.part.0+0xb34>
					if (*d != TILE_EMPTY) ok = False;
10007402:	2338      	movs	r3, #56	; 0x38
10007404:	5cd3      	ldrb	r3, [r2, r3]
10007406:	3b08      	subs	r3, #8
10007408:	425c      	negs	r4, r3
1000740a:	4163      	adcs	r3, r4
1000740c:	425b      	negs	r3, r3
1000740e:	4018      	ands	r0, r3
			if (b != 0)
10007410:	9b0e      	ldr	r3, [sp, #56]	; 0x38
10007412:	2b00      	cmp	r3, #0
10007414:	d1aa      	bne.n	1000736c <_Z11CheckBrickXaah.part.0+0x928>
10007416:	e7c9      	b.n	100073ac <_Z11CheckBrickXaah.part.0+0x968>
			b = *s++;
10007418:	9809      	ldr	r0, [sp, #36]	; 0x24
			if (b != 0)
1000741a:	2800      	cmp	r0, #0
1000741c:	d000      	beq.n	10007420 <_Z11CheckBrickXaah.part.0+0x9dc>
1000741e:	e09f      	b.n	10007560 <_Z11CheckBrickXaah.part.0+0xb1c>
10007420:	2f00      	cmp	r7, #0
10007422:	d087      	beq.n	10007334 <_Z11CheckBrickXaah.part.0+0x8f0>
				if ((y < 1) || (y >= MAPH-1))
10007424:	2b11      	cmp	r3, #17
10007426:	d900      	bls.n	1000742a <_Z11CheckBrickXaah.part.0+0x9e6>
10007428:	e09a      	b.n	10007560 <_Z11CheckBrickXaah.part.0+0xb1c>
					if (*d != TILE_EMPTY) ok = False;
1000742a:	7f53      	ldrb	r3, [r2, #29]
1000742c:	3b08      	subs	r3, #8
1000742e:	425f      	negs	r7, r3
10007430:	417b      	adcs	r3, r7
10007432:	425b      	negs	r3, r3
10007434:	4018      	ands	r0, r3
			if (b != 0)
10007436:	9b0d      	ldr	r3, [sp, #52]	; 0x34
10007438:	2b00      	cmp	r3, #0
1000743a:	d000      	beq.n	1000743e <_Z11CheckBrickXaah.part.0+0x9fa>
1000743c:	e75f      	b.n	100072fe <_Z11CheckBrickXaah.part.0+0x8ba>
1000743e:	e77f      	b.n	10007340 <_Z11CheckBrickXaah.part.0+0x8fc>
10007440:	78ee      	ldrb	r6, [r5, #3]
10007442:	2e00      	cmp	r6, #0
10007444:	d115      	bne.n	10007472 <_Z11CheckBrickXaah.part.0+0xa2e>
	if (res)
10007446:	2800      	cmp	r0, #0
10007448:	d100      	bne.n	1000744c <_Z11CheckBrickXaah.part.0+0xa08>
1000744a:	e717      	b.n	1000727c <_Z11CheckBrickXaah.part.0+0x838>
		BrickX = x;
1000744c:	465a      	mov	r2, fp
1000744e:	4b4c      	ldr	r3, [pc, #304]	; (10007580 <_Z11CheckBrickXaah.part.0+0xb3c>)
10007450:	f7ff fb97 	bl	10006b82 <_Z11CheckBrickXaah.part.0+0x13e>
			if (b != 0)
10007454:	980b      	ldr	r0, [sp, #44]	; 0x2c
10007456:	2800      	cmp	r0, #0
10007458:	d000      	beq.n	1000745c <_Z11CheckBrickXaah.part.0+0xa18>
1000745a:	e70f      	b.n	1000727c <_Z11CheckBrickXaah.part.0+0x838>
			b = *s++;
1000745c:	78a8      	ldrb	r0, [r5, #2]
			if (b != 0)
1000745e:	2800      	cmp	r0, #0
10007460:	d000      	beq.n	10007464 <_Z11CheckBrickXaah.part.0+0xa20>
10007462:	e70b      	b.n	1000727c <_Z11CheckBrickXaah.part.0+0x838>
10007464:	78ee      	ldrb	r6, [r5, #3]
10007466:	2e00      	cmp	r6, #0
10007468:	d0ed      	beq.n	10007446 <_Z11CheckBrickXaah.part.0+0xa02>
				if ((y < 1) || (y >= MAPH-1))
1000746a:	9c01      	ldr	r4, [sp, #4]
1000746c:	2c11      	cmp	r4, #17
1000746e:	d900      	bls.n	10007472 <_Z11CheckBrickXaah.part.0+0xa2e>
10007470:	e704      	b.n	1000727c <_Z11CheckBrickXaah.part.0+0x838>
					if (*d != TILE_EMPTY) ok = False;
10007472:	2654      	movs	r6, #84	; 0x54
10007474:	5d92      	ldrb	r2, [r2, r6]
10007476:	2a08      	cmp	r2, #8
10007478:	d000      	beq.n	1000747c <_Z11CheckBrickXaah.part.0+0xa38>
1000747a:	e6ff      	b.n	1000727c <_Z11CheckBrickXaah.part.0+0x838>
1000747c:	e7e3      	b.n	10007446 <_Z11CheckBrickXaah.part.0+0xa02>
			if (b != 0)
1000747e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
10007480:	2c00      	cmp	r4, #0
10007482:	d100      	bne.n	10007486 <_Z11CheckBrickXaah.part.0+0xa42>
10007484:	e0b4      	b.n	100075f0 <_Z11CheckBrickXaah.part.0+0xbac>
				if ((y < 1) || (y >= MAPH-1))
10007486:	9c01      	ldr	r4, [sp, #4]
10007488:	2c11      	cmp	r4, #17
1000748a:	d900      	bls.n	1000748e <_Z11CheckBrickXaah.part.0+0xa4a>
1000748c:	e6f6      	b.n	1000727c <_Z11CheckBrickXaah.part.0+0x838>
					if (*d != TILE_EMPTY) ok = False;
1000748e:	2652      	movs	r6, #82	; 0x52
10007490:	5d96      	ldrb	r6, [r2, r6]
10007492:	2e08      	cmp	r6, #8
10007494:	d000      	beq.n	10007498 <_Z11CheckBrickXaah.part.0+0xa54>
10007496:	e6f1      	b.n	1000727c <_Z11CheckBrickXaah.part.0+0x838>
			if (b != 0)
10007498:	78ae      	ldrb	r6, [r5, #2]
1000749a:	2e00      	cmp	r6, #0
1000749c:	d000      	beq.n	100074a0 <_Z11CheckBrickXaah.part.0+0xa5c>
1000749e:	e6e8      	b.n	10007272 <_Z11CheckBrickXaah.part.0+0x82e>
100074a0:	e7e0      	b.n	10007464 <_Z11CheckBrickXaah.part.0+0xa20>
100074a2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
100074a4:	2c00      	cmp	r4, #0
100074a6:	d052      	beq.n	1000754e <_Z11CheckBrickXaah.part.0+0xb0a>
				if ((y < 1) || (y >= MAPH-1))
100074a8:	9c00      	ldr	r4, [sp, #0]
100074aa:	2c11      	cmp	r4, #17
100074ac:	d800      	bhi.n	100074b0 <_Z11CheckBrickXaah.part.0+0xa6c>
100074ae:	e6a9      	b.n	10007204 <_Z11CheckBrickXaah.part.0+0x7c0>
			b = *s++;
100074b0:	4660      	mov	r0, ip
			if (b != 0)
100074b2:	2800      	cmp	r0, #0
100074b4:	d107      	bne.n	100074c6 <_Z11CheckBrickXaah.part.0+0xa82>
100074b6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
100074b8:	2c00      	cmp	r4, #0
100074ba:	d100      	bne.n	100074be <_Z11CheckBrickXaah.part.0+0xa7a>
100074bc:	e6c1      	b.n	10007242 <_Z11CheckBrickXaah.part.0+0x7fe>
				if ((y < 1) || (y >= MAPH-1))
100074be:	9c00      	ldr	r4, [sp, #0]
100074c0:	2c11      	cmp	r4, #17
100074c2:	d800      	bhi.n	100074c6 <_Z11CheckBrickXaah.part.0+0xa82>
100074c4:	e6b5      	b.n	10007232 <_Z11CheckBrickXaah.part.0+0x7ee>
					ok = False;
100074c6:	2000      	movs	r0, #0
100074c8:	e6bb      	b.n	10007242 <_Z11CheckBrickXaah.part.0+0x7fe>
			if (b != 0)
100074ca:	9c09      	ldr	r4, [sp, #36]	; 0x24
100074cc:	2c00      	cmp	r4, #0
100074ce:	d034      	beq.n	1000753a <_Z11CheckBrickXaah.part.0+0xaf6>
				if ((y < 1) || (y >= MAPH-1))
100074d0:	2b11      	cmp	r3, #17
100074d2:	d800      	bhi.n	100074d6 <_Z11CheckBrickXaah.part.0+0xa92>
100074d4:	e65f      	b.n	10007196 <_Z11CheckBrickXaah.part.0+0x752>
			b = *s++;
100074d6:	1e38      	subs	r0, r7, #0
			if (b != 0)
100074d8:	d106      	bne.n	100074e8 <_Z11CheckBrickXaah.part.0+0xaa4>
100074da:	9c0d      	ldr	r4, [sp, #52]	; 0x34
100074dc:	2c00      	cmp	r4, #0
100074de:	d100      	bne.n	100074e2 <_Z11CheckBrickXaah.part.0+0xa9e>
100074e0:	e674      	b.n	100071cc <_Z11CheckBrickXaah.part.0+0x788>
				if ((y < 1) || (y >= MAPH-1))
100074e2:	2b11      	cmp	r3, #17
100074e4:	d800      	bhi.n	100074e8 <_Z11CheckBrickXaah.part.0+0xaa4>
100074e6:	e66a      	b.n	100071be <_Z11CheckBrickXaah.part.0+0x77a>
					ok = False;
100074e8:	2000      	movs	r0, #0
100074ea:	e66f      	b.n	100071cc <_Z11CheckBrickXaah.part.0+0x788>
				if ((y < 1) || (y >= MAPH-1))
100074ec:	1e58      	subs	r0, r3, #1
100074ee:	2811      	cmp	r0, #17
100074f0:	d900      	bls.n	100074f4 <_Z11CheckBrickXaah.part.0+0xab0>
100074f2:	e086      	b.n	10007602 <_Z11CheckBrickXaah.part.0+0xbbe>
					if (*d != TILE_EMPTY) ok = False;
100074f4:	7810      	ldrb	r0, [r2, #0]
			if (b != 0)
100074f6:	9c06      	ldr	r4, [sp, #24]
					if (*d != TILE_EMPTY) ok = False;
100074f8:	3808      	subs	r0, #8
100074fa:	4246      	negs	r6, r0
100074fc:	4170      	adcs	r0, r6
100074fe:	b2c0      	uxtb	r0, r0
			if (b != 0)
10007500:	2c00      	cmp	r4, #0
10007502:	d000      	beq.n	10007506 <_Z11CheckBrickXaah.part.0+0xac2>
10007504:	e07f      	b.n	10007606 <_Z11CheckBrickXaah.part.0+0xbc2>
10007506:	9c08      	ldr	r4, [sp, #32]
10007508:	2c00      	cmp	r4, #0
1000750a:	d100      	bne.n	1000750e <_Z11CheckBrickXaah.part.0+0xaca>
1000750c:	e547      	b.n	10006f9e <_Z11CheckBrickXaah.part.0+0x55a>
					if (*d != TILE_EMPTY) ok = False;
1000750e:	7896      	ldrb	r6, [r2, #2]
10007510:	3e08      	subs	r6, #8
10007512:	0034      	movs	r4, r6
10007514:	4266      	negs	r6, r4
10007516:	4166      	adcs	r6, r4
			if (b != 0)
10007518:	9c07      	ldr	r4, [sp, #28]
					if (*d != TILE_EMPTY) ok = False;
1000751a:	4276      	negs	r6, r6
1000751c:	4030      	ands	r0, r6
			if (b != 0)
1000751e:	2c00      	cmp	r4, #0
10007520:	d100      	bne.n	10007524 <_Z11CheckBrickXaah.part.0+0xae0>
10007522:	e544      	b.n	10006fae <_Z11CheckBrickXaah.part.0+0x56a>
					if (*d != TILE_EMPTY) ok = False;
10007524:	78d6      	ldrb	r6, [r2, #3]
10007526:	3e08      	subs	r6, #8
10007528:	0034      	movs	r4, r6
1000752a:	4266      	negs	r6, r4
1000752c:	4166      	adcs	r6, r4
1000752e:	4276      	negs	r6, r6
10007530:	4030      	ands	r0, r6
10007532:	e53c      	b.n	10006fae <_Z11CheckBrickXaah.part.0+0x56a>
			b = *s++;
10007534:	9c09      	ldr	r4, [sp, #36]	; 0x24
10007536:	1e20      	subs	r0, r4, #0
			if (b != 0)
10007538:	d1cd      	bne.n	100074d6 <_Z11CheckBrickXaah.part.0+0xa92>
1000753a:	2f00      	cmp	r7, #0
1000753c:	d0cd      	beq.n	100074da <_Z11CheckBrickXaah.part.0+0xa96>
				if ((y < 1) || (y >= MAPH-1))
1000753e:	2b11      	cmp	r3, #17
10007540:	d800      	bhi.n	10007544 <_Z11CheckBrickXaah.part.0+0xb00>
10007542:	e632      	b.n	100071aa <_Z11CheckBrickXaah.part.0+0x766>
					ok = False;
10007544:	2000      	movs	r0, #0
10007546:	e641      	b.n	100071cc <_Z11CheckBrickXaah.part.0+0x788>
			b = *s++;
10007548:	9c0a      	ldr	r4, [sp, #40]	; 0x28
1000754a:	1e20      	subs	r0, r4, #0
			if (b != 0)
1000754c:	d1b0      	bne.n	100074b0 <_Z11CheckBrickXaah.part.0+0xa6c>
1000754e:	4664      	mov	r4, ip
10007550:	2c00      	cmp	r4, #0
10007552:	d0b0      	beq.n	100074b6 <_Z11CheckBrickXaah.part.0+0xa72>
				if ((y < 1) || (y >= MAPH-1))
10007554:	9c00      	ldr	r4, [sp, #0]
10007556:	2c11      	cmp	r4, #17
10007558:	d800      	bhi.n	1000755c <_Z11CheckBrickXaah.part.0+0xb18>
1000755a:	e65f      	b.n	1000721c <_Z11CheckBrickXaah.part.0+0x7d8>
					ok = False;
1000755c:	2000      	movs	r0, #0
1000755e:	e670      	b.n	10007242 <_Z11CheckBrickXaah.part.0+0x7fe>
10007560:	2000      	movs	r0, #0
10007562:	e6e7      	b.n	10007334 <_Z11CheckBrickXaah.part.0+0x8f0>
			if (b != 0)
10007564:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
10007566:	2b00      	cmp	r3, #0
10007568:	d06c      	beq.n	10007644 <_Z11CheckBrickXaah.part.0+0xc00>
				if ((y < 1) || (y >= MAPH-1))
1000756a:	9b01      	ldr	r3, [sp, #4]
1000756c:	2b11      	cmp	r3, #17
1000756e:	d800      	bhi.n	10007572 <_Z11CheckBrickXaah.part.0+0xb2e>
10007570:	e72f      	b.n	100073d2 <_Z11CheckBrickXaah.part.0+0x98e>
			if (b != 0)
10007572:	2000      	movs	r0, #0
10007574:	f7ff fb0b 	bl	10006b8e <_Z11CheckBrickXaah.part.0+0x14a>
					ok = False;
10007578:	2000      	movs	r0, #0
1000757a:	e710      	b.n	1000739e <_Z11CheckBrickXaah.part.0+0x95a>
1000757c:	2000327c 	.word	0x2000327c
10007580:	20012765 	.word	0x20012765
				if ((y < 1) || (y >= MAPH-1))
10007584:	1e58      	subs	r0, r3, #1
10007586:	2811      	cmp	r0, #17
10007588:	d849      	bhi.n	1000761e <_Z11CheckBrickXaah.part.0+0xbda>
					if (*d != TILE_EMPTY) ok = False;
1000758a:	7810      	ldrb	r0, [r2, #0]
1000758c:	3808      	subs	r0, #8
1000758e:	0004      	movs	r4, r0
10007590:	4260      	negs	r0, r4
10007592:	4160      	adcs	r0, r4
			if (b != 0)
10007594:	9c06      	ldr	r4, [sp, #24]
					if (*d != TILE_EMPTY) ok = False;
10007596:	b2c0      	uxtb	r0, r0
			if (b != 0)
10007598:	2c00      	cmp	r4, #0
1000759a:	d075      	beq.n	10007688 <_Z11CheckBrickXaah.part.0+0xc44>
					if (*d != TILE_EMPTY) ok = False;
1000759c:	7854      	ldrb	r4, [r2, #1]
1000759e:	46a2      	mov	sl, r4
100075a0:	2408      	movs	r4, #8
100075a2:	4264      	negs	r4, r4
100075a4:	46a3      	mov	fp, r4
100075a6:	44da      	add	sl, fp
100075a8:	4656      	mov	r6, sl
100075aa:	4274      	negs	r4, r6
100075ac:	4174      	adcs	r4, r6
100075ae:	4264      	negs	r4, r4
100075b0:	4020      	ands	r0, r4
			if (b != 0)
100075b2:	9c08      	ldr	r4, [sp, #32]
100075b4:	2c00      	cmp	r4, #0
100075b6:	d100      	bne.n	100075ba <_Z11CheckBrickXaah.part.0+0xb76>
100075b8:	e67f      	b.n	100072ba <_Z11CheckBrickXaah.part.0+0x876>
					if (*d != TILE_EMPTY) ok = False;
100075ba:	7894      	ldrb	r4, [r2, #2]
100075bc:	46a2      	mov	sl, r4
100075be:	2408      	movs	r4, #8
100075c0:	4264      	negs	r4, r4
100075c2:	46a3      	mov	fp, r4
100075c4:	44da      	add	sl, fp
100075c6:	4656      	mov	r6, sl
100075c8:	4274      	negs	r4, r6
100075ca:	4174      	adcs	r4, r6
100075cc:	4264      	negs	r4, r4
100075ce:	4020      	ands	r0, r4
			if (b != 0)
100075d0:	9c07      	ldr	r4, [sp, #28]
100075d2:	2c00      	cmp	r4, #0
100075d4:	d100      	bne.n	100075d8 <_Z11CheckBrickXaah.part.0+0xb94>
100075d6:	e678      	b.n	100072ca <_Z11CheckBrickXaah.part.0+0x886>
					if (*d != TILE_EMPTY) ok = False;
100075d8:	78d4      	ldrb	r4, [r2, #3]
100075da:	46a2      	mov	sl, r4
100075dc:	2408      	movs	r4, #8
100075de:	4264      	negs	r4, r4
100075e0:	46a3      	mov	fp, r4
100075e2:	44da      	add	sl, fp
100075e4:	4656      	mov	r6, sl
100075e6:	4274      	negs	r4, r6
100075e8:	4174      	adcs	r4, r6
100075ea:	4264      	negs	r4, r4
100075ec:	4020      	ands	r0, r4
100075ee:	e66c      	b.n	100072ca <_Z11CheckBrickXaah.part.0+0x886>
			if (b != 0)
100075f0:	78ae      	ldrb	r6, [r5, #2]
100075f2:	2e00      	cmp	r6, #0
100075f4:	d100      	bne.n	100075f8 <_Z11CheckBrickXaah.part.0+0xbb4>
100075f6:	e735      	b.n	10007464 <_Z11CheckBrickXaah.part.0+0xa20>
				if ((y < 1) || (y >= MAPH-1))
100075f8:	9c01      	ldr	r4, [sp, #4]
100075fa:	2c11      	cmp	r4, #17
100075fc:	d900      	bls.n	10007600 <_Z11CheckBrickXaah.part.0+0xbbc>
100075fe:	e63d      	b.n	1000727c <_Z11CheckBrickXaah.part.0+0x838>
10007600:	e637      	b.n	10007272 <_Z11CheckBrickXaah.part.0+0x82e>
					ok = False;
10007602:	2000      	movs	r0, #0
10007604:	e4bb      	b.n	10006f7e <_Z11CheckBrickXaah.part.0+0x53a>
					if (*d != TILE_EMPTY) ok = False;
10007606:	7856      	ldrb	r6, [r2, #1]
10007608:	3e08      	subs	r6, #8
1000760a:	0034      	movs	r4, r6
1000760c:	4266      	negs	r6, r4
1000760e:	4166      	adcs	r6, r4
			if (b != 0)
10007610:	9c08      	ldr	r4, [sp, #32]
					if (*d != TILE_EMPTY) ok = False;
10007612:	4276      	negs	r6, r6
10007614:	4030      	ands	r0, r6
			if (b != 0)
10007616:	2c00      	cmp	r4, #0
10007618:	d000      	beq.n	1000761c <_Z11CheckBrickXaah.part.0+0xbd8>
1000761a:	e778      	b.n	1000750e <_Z11CheckBrickXaah.part.0+0xaca>
1000761c:	e4bf      	b.n	10006f9e <_Z11CheckBrickXaah.part.0+0x55a>
					ok = False;
1000761e:	2000      	movs	r0, #0
10007620:	e63b      	b.n	1000729a <_Z11CheckBrickXaah.part.0+0x856>
			if (b != 0)
10007622:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
10007624:	2b00      	cmp	r3, #0
10007626:	d000      	beq.n	1000762a <_Z11CheckBrickXaah.part.0+0xbe6>
10007628:	e6dd      	b.n	100073e6 <_Z11CheckBrickXaah.part.0+0x9a2>
			b = *s++;
1000762a:	78a8      	ldrb	r0, [r5, #2]
			if (b != 0)
1000762c:	2800      	cmp	r0, #0
1000762e:	d000      	beq.n	10007632 <_Z11CheckBrickXaah.part.0+0xbee>
10007630:	e6d9      	b.n	100073e6 <_Z11CheckBrickXaah.part.0+0x9a2>
10007632:	78eb      	ldrb	r3, [r5, #3]
10007634:	2b00      	cmp	r3, #0
10007636:	d019      	beq.n	1000766c <_Z11CheckBrickXaah.part.0+0xc28>
				if ((y < 1) || (y >= MAPH-1))
10007638:	9b01      	ldr	r3, [sp, #4]
1000763a:	2b11      	cmp	r3, #17
1000763c:	d911      	bls.n	10007662 <_Z11CheckBrickXaah.part.0+0xc1e>
			if (b != 0)
1000763e:	2000      	movs	r0, #0
10007640:	f7ff faa5 	bl	10006b8e <_Z11CheckBrickXaah.part.0+0x14a>
10007644:	78ab      	ldrb	r3, [r5, #2]
10007646:	2b00      	cmp	r3, #0
10007648:	d0f3      	beq.n	10007632 <_Z11CheckBrickXaah.part.0+0xbee>
				if ((y < 1) || (y >= MAPH-1))
1000764a:	9b01      	ldr	r3, [sp, #4]
1000764c:	2b11      	cmp	r3, #17
1000764e:	d900      	bls.n	10007652 <_Z11CheckBrickXaah.part.0+0xc0e>
10007650:	e6c9      	b.n	100073e6 <_Z11CheckBrickXaah.part.0+0x9a2>
					if (*d != TILE_EMPTY) ok = False;
10007652:	2353      	movs	r3, #83	; 0x53
10007654:	5cd3      	ldrb	r3, [r2, r3]
10007656:	2b08      	cmp	r3, #8
10007658:	d000      	beq.n	1000765c <_Z11CheckBrickXaah.part.0+0xc18>
1000765a:	e6c4      	b.n	100073e6 <_Z11CheckBrickXaah.part.0+0x9a2>
			if (b != 0)
1000765c:	78eb      	ldrb	r3, [r5, #3]
1000765e:	2b00      	cmp	r3, #0
10007660:	d004      	beq.n	1000766c <_Z11CheckBrickXaah.part.0+0xc28>
					if (*d != TILE_EMPTY) ok = False;
10007662:	2354      	movs	r3, #84	; 0x54
10007664:	5cd3      	ldrb	r3, [r2, r3]
10007666:	2b08      	cmp	r3, #8
10007668:	d000      	beq.n	1000766c <_Z11CheckBrickXaah.part.0+0xc28>
1000766a:	e6bc      	b.n	100073e6 <_Z11CheckBrickXaah.part.0+0x9a2>
	if (res)
1000766c:	2800      	cmp	r0, #0
1000766e:	d101      	bne.n	10007674 <_Z11CheckBrickXaah.part.0+0xc30>
10007670:	f7ff fa8d 	bl	10006b8e <_Z11CheckBrickXaah.part.0+0x14a>
		BrickX = x;
10007674:	4b0a      	ldr	r3, [pc, #40]	; (100076a0 <_Z11CheckBrickXaah.part.0+0xc5c>)
10007676:	9a02      	ldr	r2, [sp, #8]
10007678:	f7ff fa83 	bl	10006b82 <_Z11CheckBrickXaah.part.0+0x13e>
			if (b != 0)
1000767c:	78ac      	ldrb	r4, [r5, #2]
1000767e:	2c00      	cmp	r4, #0
10007680:	d000      	beq.n	10007684 <_Z11CheckBrickXaah.part.0+0xc40>
10007682:	e538      	b.n	100070f6 <_Z11CheckBrickXaah.part.0+0x6b2>
10007684:	f7ff fb39 	bl	10006cfa <_Z11CheckBrickXaah.part.0+0x2b6>
10007688:	9c08      	ldr	r4, [sp, #32]
1000768a:	2c00      	cmp	r4, #0
1000768c:	d195      	bne.n	100075ba <_Z11CheckBrickXaah.part.0+0xb76>
1000768e:	e614      	b.n	100072ba <_Z11CheckBrickXaah.part.0+0x876>
10007690:	78ab      	ldrb	r3, [r5, #2]
10007692:	2b00      	cmp	r3, #0
10007694:	d1dd      	bne.n	10007652 <_Z11CheckBrickXaah.part.0+0xc0e>
10007696:	e7e1      	b.n	1000765c <_Z11CheckBrickXaah.part.0+0xc18>
10007698:	78ab      	ldrb	r3, [r5, #2]
1000769a:	2b00      	cmp	r3, #0
1000769c:	d1d9      	bne.n	10007652 <_Z11CheckBrickXaah.part.0+0xc0e>
1000769e:	e7c8      	b.n	10007632 <_Z11CheckBrickXaah.part.0+0xbee>
100076a0:	20012765 	.word	0x20012765

100076a4 <_Z8DispHelpv>:
{
100076a4:	b510      	push	{r4, lr}
	printf("\n");
100076a6:	200a      	movs	r0, #10
100076a8:	f7fc fae0 	bl	10003c6c <__wrap_putchar>
	printf("%c ... right\n", KEY_R);
100076ac:	214c      	movs	r1, #76	; 0x4c
100076ae:	480a      	ldr	r0, [pc, #40]	; (100076d8 <_Z8DispHelpv+0x34>)
100076b0:	f7fc fb9a 	bl	10003de8 <__wrap_printf>
	printf("%c ... up\n", KEY_U);
100076b4:	2149      	movs	r1, #73	; 0x49
100076b6:	4809      	ldr	r0, [pc, #36]	; (100076dc <_Z8DispHelpv+0x38>)
100076b8:	f7fc fb96 	bl	10003de8 <__wrap_printf>
	printf("%c ... left\n", KEY_L);
100076bc:	214a      	movs	r1, #74	; 0x4a
100076be:	4808      	ldr	r0, [pc, #32]	; (100076e0 <_Z8DispHelpv+0x3c>)
100076c0:	f7fc fb92 	bl	10003de8 <__wrap_printf>
	printf("%c or space ... down\n", KEY_D);
100076c4:	214b      	movs	r1, #75	; 0x4b
100076c6:	4807      	ldr	r0, [pc, #28]	; (100076e4 <_Z8DispHelpv+0x40>)
100076c8:	f7fc fb8e 	bl	10003de8 <__wrap_printf>
	printf("%c ... pause\n", KEY_PAUSE);
100076cc:	2141      	movs	r1, #65	; 0x41
100076ce:	4806      	ldr	r0, [pc, #24]	; (100076e8 <_Z8DispHelpv+0x44>)
100076d0:	f7fc fb8a 	bl	10003de8 <__wrap_printf>
}
100076d4:	bd10      	pop	{r4, pc}
100076d6:	46c0      	nop			; (mov r8, r8)
100076d8:	100108dc 	.word	0x100108dc
100076dc:	100108ec 	.word	0x100108ec
100076e0:	100108f8 	.word	0x100108f8
100076e4:	10010908 	.word	0x10010908
100076e8:	10010920 	.word	0x10010920

100076ec <_Z11DispTileNumhih>:
{
100076ec:	b5f0      	push	{r4, r5, r6, r7, lr}
100076ee:	46de      	mov	lr, fp
100076f0:	4657      	mov	r7, sl
100076f2:	464e      	mov	r6, r9
100076f4:	4645      	mov	r5, r8
100076f6:	b5e0      	push	{r5, r6, r7, lr}
	int n = DecNum(NumBuf, num);
100076f8:	4f37      	ldr	r7, [pc, #220]	; (100077d8 <_Z11DispTileNumhih+0xec>)
{
100076fa:	b089      	sub	sp, #36	; 0x24
100076fc:	0006      	movs	r6, r0
	int n = DecNum(NumBuf, num);
100076fe:	0038      	movs	r0, r7
{
10007700:	4693      	mov	fp, r2
10007702:	9207      	str	r2, [sp, #28]
	int n = DecNum(NumBuf, num);
10007704:	f006 f92c 	bl	1000d960 <_Z6DecNumPcl>
	int n1 = n/2;
10007708:	0fc4      	lsrs	r4, r0, #31
1000770a:	1824      	adds	r4, r4, r0
1000770c:	1064      	asrs	r4, r4, #1
	int n2 = n - n1;
1000770e:	1b03      	subs	r3, r0, r4
10007710:	9306      	str	r3, [sp, #24]
	DrawTextBg(&Canvas, &NumBuf[n1], 0, TILENUM_Y + (tile+1)*TILESIZE, col, COL_BLACK, FontBold8x16, 16);
10007712:	4b32      	ldr	r3, [pc, #200]	; (100077dc <_Z11DispTileNumhih+0xf0>)
	int n = DecNum(NumBuf, num);
10007714:	0005      	movs	r5, r0
	DrawTextBg(&Canvas, &NumBuf[n1], 0, TILENUM_Y + (tile+1)*TILESIZE, col, COL_BLACK, FontBold8x16, 16);
10007716:	4699      	mov	r9, r3
10007718:	2301      	movs	r3, #1
1000771a:	4698      	mov	r8, r3
1000771c:	9305      	str	r3, [sp, #20]
1000771e:	9304      	str	r3, [sp, #16]
10007720:	330f      	adds	r3, #15
10007722:	9303      	str	r3, [sp, #12]
10007724:	4b2e      	ldr	r3, [pc, #184]	; (100077e0 <_Z11DispTileNumhih+0xf4>)
10007726:	1c70      	adds	r0, r6, #1
10007728:	9302      	str	r3, [sp, #8]
1000772a:	2300      	movs	r3, #0
1000772c:	469a      	mov	sl, r3
1000772e:	9301      	str	r3, [sp, #4]
10007730:	465b      	mov	r3, fp
10007732:	0046      	lsls	r6, r0, #1
10007734:	1836      	adds	r6, r6, r0
10007736:	00f6      	lsls	r6, r6, #3
10007738:	9300      	str	r3, [sp, #0]
1000773a:	2200      	movs	r2, #0
1000773c:	0033      	movs	r3, r6
1000773e:	4648      	mov	r0, r9
10007740:	1939      	adds	r1, r7, r4
10007742:	f007 fdb7 	bl	1000f2b4 <_Z10DrawTextBgP7sCanvasPKciihhPKviii>
	if (n1 > 0)
10007746:	2d01      	cmp	r5, #1
10007748:	dc19      	bgt.n	1000777e <_Z11DispTileNumhih+0x92>
1000774a:	2318      	movs	r3, #24
1000774c:	425b      	negs	r3, r3
1000774e:	469b      	mov	fp, r3
10007750:	44b3      	add	fp, r6
	if (n1 < 3) DrawRect(&Canvas, 0, TILENUM_Y + tile*TILESIZE, (3-n1)*8, 16, COL_BLACK);
10007752:	2200      	movs	r2, #0
10007754:	2303      	movs	r3, #3
10007756:	9201      	str	r2, [sp, #4]
10007758:	1b1b      	subs	r3, r3, r4
1000775a:	3210      	adds	r2, #16
1000775c:	00db      	lsls	r3, r3, #3
1000775e:	9200      	str	r2, [sp, #0]
10007760:	2100      	movs	r1, #0
10007762:	465a      	mov	r2, fp
10007764:	4648      	mov	r0, r9
10007766:	f006 fedf 	bl	1000e528 <_Z8DrawRectP7sCanvasiiiih>
	if (n2 < 3) DrawRect(&Canvas, n2*8, TILENUM_Y + (tile+1)*TILESIZE, (3-n2)*8, 16, COL_BLACK);
1000776a:	9b06      	ldr	r3, [sp, #24]
1000776c:	2b02      	cmp	r3, #2
1000776e:	dd24      	ble.n	100077ba <_Z11DispTileNumhih+0xce>
}
10007770:	b009      	add	sp, #36	; 0x24
10007772:	bcf0      	pop	{r4, r5, r6, r7}
10007774:	46bb      	mov	fp, r7
10007776:	46b2      	mov	sl, r6
10007778:	46a9      	mov	r9, r5
1000777a:	46a0      	mov	r8, r4
1000777c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		NumBuf[n1] = 0;
1000777e:	4653      	mov	r3, sl
10007780:	553b      	strb	r3, [r7, r4]
		DrawTextBg(&Canvas, NumBuf, TILESIZE-n1*8, TILENUM_Y + tile*TILESIZE, col, COL_BLACK, FontBold8x16, 16);
10007782:	2318      	movs	r3, #24
10007784:	425b      	negs	r3, r3
10007786:	469b      	mov	fp, r3
10007788:	4643      	mov	r3, r8
1000778a:	9305      	str	r3, [sp, #20]
1000778c:	9304      	str	r3, [sp, #16]
1000778e:	2310      	movs	r3, #16
10007790:	9303      	str	r3, [sp, #12]
10007792:	4b13      	ldr	r3, [pc, #76]	; (100077e0 <_Z11DispTileNumhih+0xf4>)
10007794:	2203      	movs	r2, #3
10007796:	9302      	str	r3, [sp, #8]
10007798:	4653      	mov	r3, sl
1000779a:	9301      	str	r3, [sp, #4]
1000779c:	9b07      	ldr	r3, [sp, #28]
1000779e:	44b3      	add	fp, r6
100077a0:	1b12      	subs	r2, r2, r4
100077a2:	9300      	str	r3, [sp, #0]
100077a4:	0039      	movs	r1, r7
100077a6:	465b      	mov	r3, fp
100077a8:	4648      	mov	r0, r9
100077aa:	00d2      	lsls	r2, r2, #3
100077ac:	f007 fd82 	bl	1000f2b4 <_Z10DrawTextBgP7sCanvasPKciihhPKviii>
	if (n1 < 3) DrawRect(&Canvas, 0, TILENUM_Y + tile*TILESIZE, (3-n1)*8, 16, COL_BLACK);
100077b0:	2d05      	cmp	r5, #5
100077b2:	ddce      	ble.n	10007752 <_Z11DispTileNumhih+0x66>
	if (n2 < 3) DrawRect(&Canvas, n2*8, TILENUM_Y + (tile+1)*TILESIZE, (3-n2)*8, 16, COL_BLACK);
100077b4:	9b06      	ldr	r3, [sp, #24]
100077b6:	2b02      	cmp	r3, #2
100077b8:	dcda      	bgt.n	10007770 <_Z11DispTileNumhih+0x84>
100077ba:	001a      	movs	r2, r3
100077bc:	2303      	movs	r3, #3
100077be:	00d1      	lsls	r1, r2, #3
100077c0:	1a9b      	subs	r3, r3, r2
100077c2:	2200      	movs	r2, #0
100077c4:	9201      	str	r2, [sp, #4]
100077c6:	3210      	adds	r2, #16
100077c8:	9200      	str	r2, [sp, #0]
100077ca:	4648      	mov	r0, r9
100077cc:	0032      	movs	r2, r6
100077ce:	00db      	lsls	r3, r3, #3
100077d0:	f006 feaa 	bl	1000e528 <_Z8DrawRectP7sCanvasiiiih>
}
100077d4:	e7cc      	b.n	10007770 <_Z11DispTileNumhih+0x84>
100077d6:	46c0      	nop			; (mov r8, r8)
100077d8:	20006208 	.word	0x20006208
100077dc:	200034a0 	.word	0x200034a0
100077e0:	1002c004 	.word	0x1002c004

100077e4 <_Z8CheckEndv.part.0>:
	// display current brick
	DispBrick(BrickX, BrickY, Brick);
}

// check end game (returns True to continue)
Bool CheckEnd()
100077e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100077e6:	46ce      	mov	lr, r9
100077e8:	4647      	mov	r7, r8
100077ea:	b580      	push	{r7, lr}

	// check new brick on start position
	if (!CheckBrick(BrickX, BrickY, Brick))
	{
		// best score
		if (!Demo)
100077ec:	4b5e      	ldr	r3, [pc, #376]	; (10007968 <_Z8CheckEndv.part.0+0x184>)
100077ee:	4699      	mov	r9, r3
100077f0:	781b      	ldrb	r3, [r3, #0]
100077f2:	2b00      	cmp	r3, #0
100077f4:	d133      	bne.n	1000785e <_Z8CheckEndv.part.0+0x7a>
		{
			if (Level > LevelBest) LevelBest = Level;
100077f6:	4f5d      	ldr	r7, [pc, #372]	; (1000796c <_Z8CheckEndv.part.0+0x188>)
100077f8:	4c5d      	ldr	r4, [pc, #372]	; (10007970 <_Z8CheckEndv.part.0+0x18c>)
100077fa:	783b      	ldrb	r3, [r7, #0]
100077fc:	7822      	ldrb	r2, [r4, #0]
100077fe:	429a      	cmp	r2, r3
10007800:	d200      	bcs.n	10007804 <_Z8CheckEndv.part.0+0x20>
10007802:	7023      	strb	r3, [r4, #0]
			if (Score > ScoreBest) ScoreBest = Score;
10007804:	4b5b      	ldr	r3, [pc, #364]	; (10007974 <_Z8CheckEndv.part.0+0x190>)
10007806:	4e5c      	ldr	r6, [pc, #368]	; (10007978 <_Z8CheckEndv.part.0+0x194>)
10007808:	6819      	ldr	r1, [r3, #0]
1000780a:	6833      	ldr	r3, [r6, #0]
1000780c:	4299      	cmp	r1, r3
1000780e:	d900      	bls.n	10007812 <_Z8CheckEndv.part.0+0x2e>
10007810:	6031      	str	r1, [r6, #0]
			if (Lines > LinesBest) LinesBest = Lines;
10007812:	4b5a      	ldr	r3, [pc, #360]	; (1000797c <_Z8CheckEndv.part.0+0x198>)
10007814:	4d5a      	ldr	r5, [pc, #360]	; (10007980 <_Z8CheckEndv.part.0+0x19c>)
10007816:	4698      	mov	r8, r3
10007818:	682a      	ldr	r2, [r5, #0]
1000781a:	681b      	ldr	r3, [r3, #0]
1000781c:	4293      	cmp	r3, r2
1000781e:	dd00      	ble.n	10007822 <_Z8CheckEndv.part.0+0x3e>
10007820:	e099      	b.n	10007956 <_Z8CheckEndv.part.0+0x172>
	DispTileNum(TILE_SCOREV1, Score, COL_WHITE);
10007822:	22ff      	movs	r2, #255	; 0xff
10007824:	202e      	movs	r0, #46	; 0x2e
10007826:	f7ff ff61 	bl	100076ec <_Z11DispTileNumhih>
	DispTileNum(TILE_SCOREV3, ScoreBest, COL_YELLOW);
1000782a:	22fc      	movs	r2, #252	; 0xfc
1000782c:	2042      	movs	r0, #66	; 0x42
1000782e:	6831      	ldr	r1, [r6, #0]
10007830:	f7ff ff5c 	bl	100076ec <_Z11DispTileNumhih>
	DispTileNum(TILE_LINESV1, Lines, COL_WHITE);
10007834:	4643      	mov	r3, r8
10007836:	22ff      	movs	r2, #255	; 0xff
10007838:	6819      	ldr	r1, [r3, #0]
1000783a:	2030      	movs	r0, #48	; 0x30
1000783c:	f7ff ff56 	bl	100076ec <_Z11DispTileNumhih>
	DispTileNum(TILE_LINESV3, LinesBest, COL_YELLOW);
10007840:	22fc      	movs	r2, #252	; 0xfc
10007842:	2044      	movs	r0, #68	; 0x44
10007844:	6829      	ldr	r1, [r5, #0]
10007846:	f7ff ff51 	bl	100076ec <_Z11DispTileNumhih>
	DispTileNum(TILE_SPEEDV1, Level, COL_WHITE);
1000784a:	22ff      	movs	r2, #255	; 0xff
1000784c:	2032      	movs	r0, #50	; 0x32
1000784e:	7839      	ldrb	r1, [r7, #0]
10007850:	f7ff ff4c 	bl	100076ec <_Z11DispTileNumhih>
	DispTileNum(TILE_SPEEDV3, LevelBest, COL_YELLOW);
10007854:	22fc      	movs	r2, #252	; 0xfc
10007856:	2046      	movs	r0, #70	; 0x46
10007858:	7821      	ldrb	r1, [r4, #0]
1000785a:	f7ff ff47 	bl	100076ec <_Z11DispTileNumhih>
			DispScore();
		}

		// play sound
		PlaySound(GameOverSnd, sizeof(GameOverSnd));
1000785e:	23fe      	movs	r3, #254	; 0xfe
10007860:	2200      	movs	r2, #0
10007862:	059b      	lsls	r3, r3, #22
10007864:	4947      	ldr	r1, [pc, #284]	; (10007984 <_Z8CheckEndv.part.0+0x1a0>)
10007866:	4848      	ldr	r0, [pc, #288]	; (10007988 <_Z8CheckEndv.part.0+0x1a4>)
10007868:	f008 f86a 	bl	1000f940 <_Z9PlaySoundPKhihf>

		// save board
		memcpy(SaveBoard, Board, MAPSIZE);
1000786c:	2287      	movs	r2, #135	; 0x87
1000786e:	4d47      	ldr	r5, [pc, #284]	; (1000798c <_Z8CheckEndv.part.0+0x1a8>)
10007870:	4e47      	ldr	r6, [pc, #284]	; (10007990 <_Z8CheckEndv.part.0+0x1ac>)
10007872:	0029      	movs	r1, r5
10007874:	0030      	movs	r0, r6
10007876:	0092      	lsls	r2, r2, #2
10007878:	f7f9 fc3a 	bl	100010f0 <__wrap___aeabi_memcpy>

		// loop 2 seconds
		for (i = 10; i > 0; i--)
		{
			// display message
			memcpy(&Board[MAPW/2-5 + MAPH/2*MAPW], OverMsg, 10);
1000787c:	002f      	movs	r7, r5
1000787e:	4b45      	ldr	r3, [pc, #276]	; (10007994 <_Z8CheckEndv.part.0+0x1b0>)
		memcpy(SaveBoard, Board, MAPSIZE);
10007880:	240a      	movs	r4, #10
10007882:	4698      	mov	r8, r3
			memcpy(&Board[MAPW/2-5 + MAPH/2*MAPW], OverMsg, 10);
10007884:	3717      	adds	r7, #23
10007886:	37ff      	adds	r7, #255	; 0xff
10007888:	220a      	movs	r2, #10
1000788a:	4641      	mov	r1, r8
1000788c:	0038      	movs	r0, r7
1000788e:	f7f9 fc2f 	bl	100010f0 <__wrap___aeabi_memcpy>

			// wait
			sleep_ms(100);
10007892:	2064      	movs	r0, #100	; 0x64
10007894:	f7fc ffd0 	bl	10004838 <sleep_ms>

			// restore board
			memcpy(Board, SaveBoard, MAPSIZE);
10007898:	2287      	movs	r2, #135	; 0x87
1000789a:	0031      	movs	r1, r6
1000789c:	0092      	lsls	r2, r2, #2
1000789e:	0028      	movs	r0, r5
100078a0:	f7f9 fc26 	bl	100010f0 <__wrap___aeabi_memcpy>
		for (i = 10; i > 0; i--)
100078a4:	3c01      	subs	r4, #1

			// wait
			sleep_ms(100);
100078a6:	2064      	movs	r0, #100	; 0x64
100078a8:	f7fc ffc6 	bl	10004838 <sleep_ms>
		for (i = 10; i > 0; i--)
100078ac:	2c00      	cmp	r4, #0
100078ae:	d1eb      	bne.n	10007888 <_Z8CheckEndv.part.0+0xa4>
		}

		if (Demo) return False;
100078b0:	464b      	mov	r3, r9
100078b2:	781b      	ldrb	r3, [r3, #0]
100078b4:	2b00      	cmp	r3, #0
100078b6:	d149      	bne.n	1000794c <_Z8CheckEndv.part.0+0x168>

		// display message
		memcpy(&Board[MAPW/2-5 + MAPH/2*MAPW], OverMsg, 10);
100078b8:	0038      	movs	r0, r7
100078ba:	220a      	movs	r2, #10
100078bc:	4641      	mov	r1, r8
 *
 * \param gpio GPIO number
 * \return Current state of the GPIO. 0 for low, non-zero for high
 */
static inline bool gpio_get(uint gpio) {
    return !!((1ul << gpio) & sio_hw->gpio_in);
100078be:	27d0      	movs	r7, #208	; 0xd0
100078c0:	f7f9 fc16 	bl	100010f0 <__wrap___aeabi_memcpy>
100078c4:	063f      	lsls	r7, r7, #24
100078c6:	3401      	adds	r4, #1
100078c8:	687b      	ldr	r3, [r7, #4]
100078ca:	0d1b      	lsrs	r3, r3, #20
	if (!gpio_get(PB_LT))
100078cc:	421c      	tst	r4, r3
100078ce:	d015      	beq.n	100078fc <_Z8CheckEndv.part.0+0x118>
100078d0:	687b      	ldr	r3, [r7, #4]
100078d2:	0c5b      	lsrs	r3, r3, #17
	else if (!gpio_get(PB_RT))
100078d4:	421c      	tst	r4, r3
100078d6:	d011      	beq.n	100078fc <_Z8CheckEndv.part.0+0x118>
100078d8:	687b      	ldr	r3, [r7, #4]
100078da:	0d9b      	lsrs	r3, r3, #22
	else if (!gpio_get(PB_DN))
100078dc:	421c      	tst	r4, r3
100078de:	d00d      	beq.n	100078fc <_Z8CheckEndv.part.0+0x118>
100078e0:	687b      	ldr	r3, [r7, #4]
100078e2:	0d5b      	lsrs	r3, r3, #21
	else if (!gpio_get(PB_CF))
100078e4:	421c      	tst	r4, r3
100078e6:	d10d      	bne.n	10007904 <_Z8CheckEndv.part.0+0x120>
	sleep_ms(100);
100078e8:	2064      	movs	r0, #100	; 0x64
100078ea:	f7fc ffa5 	bl	10004838 <sleep_ms>
		sleep_ms(150);
100078ee:	2096      	movs	r0, #150	; 0x96
100078f0:	f7fc ffa2 	bl	10004838 <sleep_ms>
100078f4:	687b      	ldr	r3, [r7, #4]
100078f6:	0d1b      	lsrs	r3, r3, #20
	if (!gpio_get(PB_LT))
100078f8:	421c      	tst	r4, r3
100078fa:	d1e9      	bne.n	100078d0 <_Z8CheckEndv.part.0+0xec>
	sleep_ms(100);
100078fc:	2064      	movs	r0, #100	; 0x64
100078fe:	f7fc ff9b 	bl	10004838 <sleep_ms>
	if (rVal == 'I')
10007902:	e7e1      	b.n	100078c8 <_Z8CheckEndv.part.0+0xe4>
10007904:	687b      	ldr	r3, [r7, #4]
10007906:	0e9b      	lsrs	r3, r3, #26
	else if (!gpio_get(PB_UR))
10007908:	421c      	tst	r4, r3
1000790a:	d0f7      	beq.n	100078fc <_Z8CheckEndv.part.0+0x118>
1000790c:	21d0      	movs	r1, #208	; 0xd0
1000790e:	2201      	movs	r2, #1
10007910:	0609      	lsls	r1, r1, #24
10007912:	684b      	ldr	r3, [r1, #4]
10007914:	0d1b      	lsrs	r3, r3, #20
	if (!gpio_get(PB_LT))
10007916:	421a      	tst	r2, r3
10007918:	d00f      	beq.n	1000793a <_Z8CheckEndv.part.0+0x156>
1000791a:	684b      	ldr	r3, [r1, #4]
1000791c:	0c5b      	lsrs	r3, r3, #17
	else if (!gpio_get(PB_RT))
1000791e:	421a      	tst	r2, r3
10007920:	d00b      	beq.n	1000793a <_Z8CheckEndv.part.0+0x156>
10007922:	684b      	ldr	r3, [r1, #4]
10007924:	0d9b      	lsrs	r3, r3, #22
	else if (!gpio_get(PB_DN))
10007926:	421a      	tst	r2, r3
10007928:	d007      	beq.n	1000793a <_Z8CheckEndv.part.0+0x156>
1000792a:	684b      	ldr	r3, [r1, #4]
1000792c:	0d5b      	lsrs	r3, r3, #21
	else if (!gpio_get(PB_CF))
1000792e:	421a      	tst	r2, r3
10007930:	d013      	beq.n	1000795a <_Z8CheckEndv.part.0+0x176>
10007932:	684b      	ldr	r3, [r1, #4]
10007934:	0e9b      	lsrs	r3, r3, #26
	else if (!gpio_get(PB_UR))
10007936:	421a      	tst	r2, r3
10007938:	d1eb      	bne.n	10007912 <_Z8CheckEndv.part.0+0x12e>
	sleep_ms(100);
1000793a:	2064      	movs	r0, #100	; 0x64
1000793c:	f7fc ff7c 	bl	10004838 <sleep_ms>
		// wait for a key
		FlushChar();
		while (GetChar() == 0) {}

		// restore board
		memcpy(Board, SaveBoard, MAPSIZE);
10007940:	2287      	movs	r2, #135	; 0x87
10007942:	0031      	movs	r1, r6
10007944:	0028      	movs	r0, r5
10007946:	0092      	lsls	r2, r2, #2
10007948:	f7f9 fbd2 	bl	100010f0 <__wrap___aeabi_memcpy>
		return False;
	}

	// game is OK
	return True;
}
1000794c:	2000      	movs	r0, #0
1000794e:	bcc0      	pop	{r6, r7}
10007950:	46b9      	mov	r9, r7
10007952:	46b0      	mov	r8, r6
10007954:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (Lines > LinesBest) LinesBest = Lines;
10007956:	602b      	str	r3, [r5, #0]
10007958:	e763      	b.n	10007822 <_Z8CheckEndv.part.0+0x3e>
	sleep_ms(100);
1000795a:	2064      	movs	r0, #100	; 0x64
1000795c:	f7fc ff6c 	bl	10004838 <sleep_ms>
		sleep_ms(150);
10007960:	2096      	movs	r0, #150	; 0x96
10007962:	f7fc ff69 	bl	10004838 <sleep_ms>
10007966:	e7eb      	b.n	10007940 <_Z8CheckEndv.part.0+0x15c>
10007968:	20012767 	.word	0x20012767
1000796c:	2001276b 	.word	0x2001276b
10007970:	2001276c 	.word	0x2001276c
10007974:	20007108 	.word	0x20007108
10007978:	2000710c 	.word	0x2000710c
1000797c:	200061f4 	.word	0x200061f4
10007980:	200061f8 	.word	0x200061f8
10007984:	00003938 	.word	0x00003938
10007988:	1001b838 	.word	0x1001b838
1000798c:	2000327c 	.word	0x2000327c
10007990:	20006c2c 	.word	0x20006c2c
10007994:	10010930 	.word	0x10010930

10007998 <_Z10DelAllRowsv.part.0>:
void DelAllRows()
10007998:	b570      	push	{r4, r5, r6, lr}
	if ((NextLevel <= 0) && (Level < LEVELNUM) && !Demo)
1000799a:	4c3d      	ldr	r4, [pc, #244]	; (10007a90 <_Z10DelAllRowsv.part.0+0xf8>)
1000799c:	7823      	ldrb	r3, [r4, #0]
1000799e:	2b09      	cmp	r3, #9
100079a0:	d803      	bhi.n	100079aa <_Z10DelAllRowsv.part.0+0x12>
100079a2:	4a3c      	ldr	r2, [pc, #240]	; (10007a94 <_Z10DelAllRowsv.part.0+0xfc>)
100079a4:	7812      	ldrb	r2, [r2, #0]
100079a6:	2a00      	cmp	r2, #0
100079a8:	d000      	beq.n	100079ac <_Z10DelAllRowsv.part.0+0x14>
}
100079aa:	bd70      	pop	{r4, r5, r6, pc}
		Level++;
100079ac:	3301      	adds	r3, #1
100079ae:	7023      	strb	r3, [r4, #0]
	DispTileNum(TILE_SCOREV1, Score, COL_WHITE);
100079b0:	4b39      	ldr	r3, [pc, #228]	; (10007a98 <_Z10DelAllRowsv.part.0+0x100>)
100079b2:	202e      	movs	r0, #46	; 0x2e
100079b4:	6819      	ldr	r1, [r3, #0]
100079b6:	32ff      	adds	r2, #255	; 0xff
100079b8:	f7ff fe98 	bl	100076ec <_Z11DispTileNumhih>
	DispTileNum(TILE_SCOREV3, ScoreBest, COL_YELLOW);
100079bc:	4b37      	ldr	r3, [pc, #220]	; (10007a9c <_Z10DelAllRowsv.part.0+0x104>)
100079be:	22fc      	movs	r2, #252	; 0xfc
100079c0:	6819      	ldr	r1, [r3, #0]
100079c2:	2042      	movs	r0, #66	; 0x42
100079c4:	f7ff fe92 	bl	100076ec <_Z11DispTileNumhih>
	DispTileNum(TILE_LINESV1, Lines, COL_WHITE);
100079c8:	4b35      	ldr	r3, [pc, #212]	; (10007aa0 <_Z10DelAllRowsv.part.0+0x108>)
100079ca:	22ff      	movs	r2, #255	; 0xff
100079cc:	6819      	ldr	r1, [r3, #0]
100079ce:	2030      	movs	r0, #48	; 0x30
100079d0:	f7ff fe8c 	bl	100076ec <_Z11DispTileNumhih>
	DispTileNum(TILE_LINESV3, LinesBest, COL_YELLOW);
100079d4:	4b33      	ldr	r3, [pc, #204]	; (10007aa4 <_Z10DelAllRowsv.part.0+0x10c>)
100079d6:	22fc      	movs	r2, #252	; 0xfc
100079d8:	6819      	ldr	r1, [r3, #0]
100079da:	2044      	movs	r0, #68	; 0x44
100079dc:	f7ff fe86 	bl	100076ec <_Z11DispTileNumhih>
	DispTileNum(TILE_SPEEDV1, Level, COL_WHITE);
100079e0:	7821      	ldrb	r1, [r4, #0]
100079e2:	22ff      	movs	r2, #255	; 0xff
100079e4:	2032      	movs	r0, #50	; 0x32
100079e6:	f7ff fe81 	bl	100076ec <_Z11DispTileNumhih>
	DispTileNum(TILE_SPEEDV3, LevelBest, COL_YELLOW);
100079ea:	4b2f      	ldr	r3, [pc, #188]	; (10007aa8 <_Z10DelAllRowsv.part.0+0x110>)
100079ec:	22fc      	movs	r2, #252	; 0xfc
100079ee:	7819      	ldrb	r1, [r3, #0]
100079f0:	2046      	movs	r0, #70	; 0x46
100079f2:	f7ff fe7b 	bl	100076ec <_Z11DispTileNumhih>
		NextLevel = NextLevelTab[Level-1];
100079f6:	7823      	ldrb	r3, [r4, #0]
100079f8:	4a2c      	ldr	r2, [pc, #176]	; (10007aac <_Z10DelAllRowsv.part.0+0x114>)
100079fa:	3b01      	subs	r3, #1
100079fc:	009b      	lsls	r3, r3, #2
100079fe:	589a      	ldr	r2, [r3, r2]
10007a00:	4b2b      	ldr	r3, [pc, #172]	; (10007ab0 <_Z10DelAllRowsv.part.0+0x118>)
		PlaySound(LevelUpSnd, sizeof(LevelUpSnd));
10007a02:	492c      	ldr	r1, [pc, #176]	; (10007ab4 <_Z10DelAllRowsv.part.0+0x11c>)
		NextLevel = NextLevelTab[Level-1];
10007a04:	601a      	str	r2, [r3, #0]
		PlaySound(LevelUpSnd, sizeof(LevelUpSnd));
10007a06:	23fe      	movs	r3, #254	; 0xfe
10007a08:	2200      	movs	r2, #0
10007a0a:	059b      	lsls	r3, r3, #22
10007a0c:	482a      	ldr	r0, [pc, #168]	; (10007ab8 <_Z10DelAllRowsv.part.0+0x120>)
10007a0e:	f007 ff97 	bl	1000f940 <_Z9PlaySoundPKhihf>
		memcpy(SaveBoard, Board, MAPSIZE);
10007a12:	2287      	movs	r2, #135	; 0x87
10007a14:	4c29      	ldr	r4, [pc, #164]	; (10007abc <_Z10DelAllRowsv.part.0+0x124>)
10007a16:	4d2a      	ldr	r5, [pc, #168]	; (10007ac0 <_Z10DelAllRowsv.part.0+0x128>)
10007a18:	0021      	movs	r1, r4
10007a1a:	0028      	movs	r0, r5
10007a1c:	0092      	lsls	r2, r2, #2
10007a1e:	f7f9 fb67 	bl	100010f0 <__wrap___aeabi_memcpy>
		memcpy(&Board[MAPW/2-4 + MAPH/2*MAPW], LevelMsg, 8);
10007a22:	0020      	movs	r0, r4
10007a24:	3018      	adds	r0, #24
10007a26:	2208      	movs	r2, #8
10007a28:	4926      	ldr	r1, [pc, #152]	; (10007ac4 <_Z10DelAllRowsv.part.0+0x12c>)
10007a2a:	30ff      	adds	r0, #255	; 0xff
10007a2c:	f7f9 fb60 	bl	100010f0 <__wrap___aeabi_memcpy>
		sleep_ms(1000);
10007a30:	20fa      	movs	r0, #250	; 0xfa
10007a32:	0080      	lsls	r0, r0, #2
10007a34:	f7fc ff00 	bl	10004838 <sleep_ms>
		memcpy(Board, SaveBoard, MAPSIZE);
10007a38:	2287      	movs	r2, #135	; 0x87
10007a3a:	0029      	movs	r1, r5
10007a3c:	25d0      	movs	r5, #208	; 0xd0
10007a3e:	0020      	movs	r0, r4
10007a40:	0092      	lsls	r2, r2, #2
10007a42:	f7f9 fb55 	bl	100010f0 <__wrap___aeabi_memcpy>
10007a46:	2401      	movs	r4, #1
10007a48:	062d      	lsls	r5, r5, #24
10007a4a:	e006      	b.n	10007a5a <_Z10DelAllRowsv.part.0+0xc2>
10007a4c:	686b      	ldr	r3, [r5, #4]
10007a4e:	0e9b      	lsrs	r3, r3, #26
	else if (!gpio_get(PB_UR))
10007a50:	421c      	tst	r4, r3
10007a52:	d119      	bne.n	10007a88 <_Z10DelAllRowsv.part.0+0xf0>
	sleep_ms(100);
10007a54:	2064      	movs	r0, #100	; 0x64
10007a56:	f7fc feef 	bl	10004838 <sleep_ms>
10007a5a:	686b      	ldr	r3, [r5, #4]
10007a5c:	0d1b      	lsrs	r3, r3, #20
	if (!gpio_get(PB_LT))
10007a5e:	421c      	tst	r4, r3
10007a60:	d0f8      	beq.n	10007a54 <_Z10DelAllRowsv.part.0+0xbc>
10007a62:	686b      	ldr	r3, [r5, #4]
10007a64:	0c5b      	lsrs	r3, r3, #17
	else if (!gpio_get(PB_RT))
10007a66:	421c      	tst	r4, r3
10007a68:	d0f4      	beq.n	10007a54 <_Z10DelAllRowsv.part.0+0xbc>
10007a6a:	686b      	ldr	r3, [r5, #4]
10007a6c:	0d9b      	lsrs	r3, r3, #22
	else if (!gpio_get(PB_DN))
10007a6e:	421c      	tst	r4, r3
10007a70:	d0f0      	beq.n	10007a54 <_Z10DelAllRowsv.part.0+0xbc>
10007a72:	686b      	ldr	r3, [r5, #4]
10007a74:	0d5b      	lsrs	r3, r3, #21
	else if (!gpio_get(PB_CF))
10007a76:	421c      	tst	r4, r3
10007a78:	d1e8      	bne.n	10007a4c <_Z10DelAllRowsv.part.0+0xb4>
	sleep_ms(100);
10007a7a:	2064      	movs	r0, #100	; 0x64
10007a7c:	f7fc fedc 	bl	10004838 <sleep_ms>
		sleep_ms(150);
10007a80:	2096      	movs	r0, #150	; 0x96
10007a82:	f7fc fed9 	bl	10004838 <sleep_ms>
10007a86:	e7e8      	b.n	10007a5a <_Z10DelAllRowsv.part.0+0xc2>
		sleep_ms(200);
10007a88:	20c8      	movs	r0, #200	; 0xc8
10007a8a:	f7fc fed5 	bl	10004838 <sleep_ms>
}
10007a8e:	e78c      	b.n	100079aa <_Z10DelAllRowsv.part.0+0x12>
10007a90:	2001276b 	.word	0x2001276b
10007a94:	20012767 	.word	0x20012767
10007a98:	20007108 	.word	0x20007108
10007a9c:	2000710c 	.word	0x2000710c
10007aa0:	200061f4 	.word	0x200061f4
10007aa4:	200061f8 	.word	0x200061f8
10007aa8:	2001276c 	.word	0x2001276c
10007aac:	10010b70 	.word	0x10010b70
10007ab0:	200061fc 	.word	0x200061fc
10007ab4:	0000abc3 	.word	0x0000abc3
10007ab8:	1001f170 	.word	0x1001f170
10007abc:	2000327c 	.word	0x2000327c
10007ac0:	20006c2c 	.word	0x20006c2c
10007ac4:	1001093c 	.word	0x1001093c

10007ac8 <_Z10ScoreBrickaah>:
{
10007ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
	const u8* s = &BrickTemp[brick*BRICKTEMPSIZE];
10007aca:	0116      	lsls	r6, r2, #4
10007acc:	4a77      	ldr	r2, [pc, #476]	; (10007cac <_Z10ScoreBrickaah+0x1e4>)
{
10007ace:	46ce      	mov	lr, r9
	const u8* s = &BrickTemp[brick*BRICKTEMPSIZE];
10007ad0:	18b6      	adds	r6, r6, r2
	u8* d = &Board[x + y*MAPW];
10007ad2:	004a      	lsls	r2, r1, #1
10007ad4:	1852      	adds	r2, r2, r1
{
10007ad6:	4647      	mov	r7, r8
	u8* d = &Board[x + y*MAPW];
10007ad8:	00d3      	lsls	r3, r2, #3
10007ada:	18d2      	adds	r2, r2, r3
10007adc:	1812      	adds	r2, r2, r0
10007ade:	4b74      	ldr	r3, [pc, #464]	; (10007cb0 <_Z10ScoreBrickaah+0x1e8>)
10007ae0:	3a01      	subs	r2, #1
10007ae2:	18d3      	adds	r3, r2, r3
	int score = 0;
10007ae4:	2000      	movs	r0, #0
	u8* d = &Board[x + y*MAPW];
10007ae6:	2204      	movs	r2, #4
{
10007ae8:	b580      	push	{r7, lr}
			b = *s;
10007aea:	7835      	ldrb	r5, [r6, #0]
			if (b != 0)
10007aec:	2d00      	cmp	r5, #0
10007aee:	d055      	beq.n	10007b9c <_Z10ScoreBrickaah+0xd4>
				score += (int)y*y;
10007af0:	000c      	movs	r4, r1
10007af2:	434c      	muls	r4, r1
10007af4:	1900      	adds	r0, r0, r4
				if (y > 2)
10007af6:	2902      	cmp	r1, #2
10007af8:	dc00      	bgt.n	10007afc <_Z10ScoreBrickaah+0x34>
10007afa:	e08d      	b.n	10007c18 <_Z10ScoreBrickaah+0x150>
					if ((y < MAPH-2) &&
10007afc:	2911      	cmp	r1, #17
10007afe:	dc03      	bgt.n	10007b08 <_Z10ScoreBrickaah+0x40>
10007b00:	7f1f      	ldrb	r7, [r3, #28]
10007b02:	2f08      	cmp	r7, #8
10007b04:	d100      	bne.n	10007b08 <_Z10ScoreBrickaah+0x40>
10007b06:	e0b1      	b.n	10007c6c <_Z10ScoreBrickaah+0x1a4>
					if ((d[-1] == TILE_EMPTY) &&
10007b08:	781f      	ldrb	r7, [r3, #0]
10007b0a:	2f08      	cmp	r7, #8
10007b0c:	d100      	bne.n	10007b10 <_Z10ScoreBrickaah+0x48>
10007b0e:	e0ab      	b.n	10007c68 <_Z10ScoreBrickaah+0x1a0>
					if ((d[1] == TILE_EMPTY) &&
10007b10:	789f      	ldrb	r7, [r3, #2]
10007b12:	46bc      	mov	ip, r7
10007b14:	2f08      	cmp	r7, #8
10007b16:	d057      	beq.n	10007bc8 <_Z10ScoreBrickaah+0x100>
			b = *s;
10007b18:	7877      	ldrb	r7, [r6, #1]
10007b1a:	46b9      	mov	r9, r7
			if (b != 0)
10007b1c:	2f00      	cmp	r7, #0
10007b1e:	d058      	beq.n	10007bd2 <_Z10ScoreBrickaah+0x10a>
				score += (int)y*y;
10007b20:	1900      	adds	r0, r0, r4
					if ((y < MAPH-2) &&
10007b22:	2911      	cmp	r1, #17
10007b24:	dc03      	bgt.n	10007b2e <_Z10ScoreBrickaah+0x66>
10007b26:	7f5f      	ldrb	r7, [r3, #29]
10007b28:	2f08      	cmp	r7, #8
10007b2a:	d100      	bne.n	10007b2e <_Z10ScoreBrickaah+0x66>
10007b2c:	e0a6      	b.n	10007c7c <_Z10ScoreBrickaah+0x1b4>
					if ((d[-1] == TILE_EMPTY) &&
10007b2e:	785f      	ldrb	r7, [r3, #1]
10007b30:	2f08      	cmp	r7, #8
10007b32:	d100      	bne.n	10007b36 <_Z10ScoreBrickaah+0x6e>
10007b34:	e088      	b.n	10007c48 <_Z10ScoreBrickaah+0x180>
					if ((d[1] == TILE_EMPTY) &&
10007b36:	78dd      	ldrb	r5, [r3, #3]
10007b38:	2d08      	cmp	r5, #8
10007b3a:	d100      	bne.n	10007b3e <_Z10ScoreBrickaah+0x76>
10007b3c:	e07e      	b.n	10007c3c <_Z10ScoreBrickaah+0x174>
			b = *s;
10007b3e:	78b5      	ldrb	r5, [r6, #2]
			if (b != 0)
10007b40:	2d00      	cmp	r5, #0
10007b42:	d037      	beq.n	10007bb4 <_Z10ScoreBrickaah+0xec>
					if ((d[1] == TILE_EMPTY) &&
10007b44:	789f      	ldrb	r7, [r3, #2]
				score += (int)y*y;
10007b46:	1900      	adds	r0, r0, r4
					if ((d[1] == TILE_EMPTY) &&
10007b48:	46bc      	mov	ip, r7
					if ((y < MAPH-2) &&
10007b4a:	2911      	cmp	r1, #17
10007b4c:	dc03      	bgt.n	10007b56 <_Z10ScoreBrickaah+0x8e>
10007b4e:	7f9f      	ldrb	r7, [r3, #30]
10007b50:	2f08      	cmp	r7, #8
10007b52:	d100      	bne.n	10007b56 <_Z10ScoreBrickaah+0x8e>
10007b54:	e09a      	b.n	10007c8c <_Z10ScoreBrickaah+0x1c4>
					if ((d[-1] == TILE_EMPTY) &&
10007b56:	4667      	mov	r7, ip
10007b58:	2f08      	cmp	r7, #8
10007b5a:	d100      	bne.n	10007b5e <_Z10ScoreBrickaah+0x96>
10007b5c:	e079      	b.n	10007c52 <_Z10ScoreBrickaah+0x18a>
					if ((d[1] == TILE_EMPTY) &&
10007b5e:	791f      	ldrb	r7, [r3, #4]
10007b60:	2f08      	cmp	r7, #8
10007b62:	d05e      	beq.n	10007c22 <_Z10ScoreBrickaah+0x15a>
			if (b != 0)
10007b64:	78f7      	ldrb	r7, [r6, #3]
10007b66:	2f00      	cmp	r7, #0
10007b68:	d00d      	beq.n	10007b86 <_Z10ScoreBrickaah+0xbe>
				score += (int)y*y;
10007b6a:	1900      	adds	r0, r0, r4
					if ((y < MAPH-2) &&
10007b6c:	2911      	cmp	r1, #17
10007b6e:	dc03      	bgt.n	10007b78 <_Z10ScoreBrickaah+0xb0>
10007b70:	7fdc      	ldrb	r4, [r3, #31]
10007b72:	2c08      	cmp	r4, #8
10007b74:	d100      	bne.n	10007b78 <_Z10ScoreBrickaah+0xb0>
10007b76:	e091      	b.n	10007c9c <_Z10ScoreBrickaah+0x1d4>
					if ((d[-1] == TILE_EMPTY) &&
10007b78:	78dc      	ldrb	r4, [r3, #3]
10007b7a:	2c08      	cmp	r4, #8
10007b7c:	d100      	bne.n	10007b80 <_Z10ScoreBrickaah+0xb8>
10007b7e:	e06e      	b.n	10007c5e <_Z10ScoreBrickaah+0x196>
					if ((d[1] == TILE_EMPTY) &&
10007b80:	795c      	ldrb	r4, [r3, #5]
10007b82:	2c08      	cmp	r4, #8
10007b84:	d050      	beq.n	10007c28 <_Z10ScoreBrickaah+0x160>
			s++;
10007b86:	3101      	adds	r1, #1
	for (i = 4; i > 0; i--)
10007b88:	3a01      	subs	r2, #1
10007b8a:	3604      	adds	r6, #4
		y++;
10007b8c:	b249      	sxtb	r1, r1
	for (i = 4; i > 0; i--)
10007b8e:	331b      	adds	r3, #27
10007b90:	2a00      	cmp	r2, #0
10007b92:	d1aa      	bne.n	10007aea <_Z10ScoreBrickaah+0x22>
}
10007b94:	bcc0      	pop	{r6, r7}
10007b96:	46b9      	mov	r9, r7
10007b98:	46b0      	mov	r8, r6
10007b9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			b = *s;
10007b9c:	7874      	ldrb	r4, [r6, #1]
10007b9e:	46a1      	mov	r9, r4
			if (b != 0)
10007ba0:	2c00      	cmp	r4, #0
10007ba2:	d02e      	beq.n	10007c02 <_Z10ScoreBrickaah+0x13a>
				score += (int)y*y;
10007ba4:	000c      	movs	r4, r1
10007ba6:	434c      	muls	r4, r1
10007ba8:	1900      	adds	r0, r0, r4
				if (y > 2)
10007baa:	2902      	cmp	r1, #2
10007bac:	dcb9      	bgt.n	10007b22 <_Z10ScoreBrickaah+0x5a>
			if (b != 0)
10007bae:	78b5      	ldrb	r5, [r6, #2]
10007bb0:	2d00      	cmp	r5, #0
10007bb2:	d118      	bne.n	10007be6 <_Z10ScoreBrickaah+0x11e>
10007bb4:	78f4      	ldrb	r4, [r6, #3]
10007bb6:	2c00      	cmp	r4, #0
10007bb8:	d0e5      	beq.n	10007b86 <_Z10ScoreBrickaah+0xbe>
				score += (int)y*y;
10007bba:	000c      	movs	r4, r1
10007bbc:	434c      	muls	r4, r1
10007bbe:	1900      	adds	r0, r0, r4
				if (y > 2)
10007bc0:	2902      	cmp	r1, #2
10007bc2:	dde0      	ble.n	10007b86 <_Z10ScoreBrickaah+0xbe>
10007bc4:	2500      	movs	r5, #0
10007bc6:	e7d1      	b.n	10007b6c <_Z10ScoreBrickaah+0xa4>
						((j == 1) || (s[1] == 0)))
10007bc8:	7877      	ldrb	r7, [r6, #1]
10007bca:	46b9      	mov	r9, r7
10007bcc:	2f00      	cmp	r7, #0
10007bce:	d1a7      	bne.n	10007b20 <_Z10ScoreBrickaah+0x58>
						score -= 2;
10007bd0:	3802      	subs	r0, #2
			b = *s;
10007bd2:	78b5      	ldrb	r5, [r6, #2]
			if (b != 0)
10007bd4:	2d00      	cmp	r5, #0
10007bd6:	d0c5      	beq.n	10007b64 <_Z10ScoreBrickaah+0x9c>
				score += (int)y*y;
10007bd8:	2700      	movs	r7, #0
10007bda:	1900      	adds	r0, r0, r4
10007bdc:	46b9      	mov	r9, r7
10007bde:	e7b4      	b.n	10007b4a <_Z10ScoreBrickaah+0x82>
			if (b != 0)
10007be0:	78b5      	ldrb	r5, [r6, #2]
10007be2:	2d00      	cmp	r5, #0
10007be4:	d000      	beq.n	10007be8 <_Z10ScoreBrickaah+0x120>
				score += (int)y*y;
10007be6:	1900      	adds	r0, r0, r4
			if (b != 0)
10007be8:	78f5      	ldrb	r5, [r6, #3]
10007bea:	2d00      	cmp	r5, #0
10007bec:	d0cb      	beq.n	10007b86 <_Z10ScoreBrickaah+0xbe>
				score += (int)y*y;
10007bee:	3101      	adds	r1, #1
	for (i = 4; i > 0; i--)
10007bf0:	3a01      	subs	r2, #1
				score += (int)y*y;
10007bf2:	1900      	adds	r0, r0, r4
			s++;
10007bf4:	3604      	adds	r6, #4
		y++;
10007bf6:	b249      	sxtb	r1, r1
	for (i = 4; i > 0; i--)
10007bf8:	331b      	adds	r3, #27
10007bfa:	2a00      	cmp	r2, #0
10007bfc:	d000      	beq.n	10007c00 <_Z10ScoreBrickaah+0x138>
10007bfe:	e774      	b.n	10007aea <_Z10ScoreBrickaah+0x22>
10007c00:	e7c8      	b.n	10007b94 <_Z10ScoreBrickaah+0xcc>
			b = *s;
10007c02:	78b5      	ldrb	r5, [r6, #2]
			if (b != 0)
10007c04:	2d00      	cmp	r5, #0
10007c06:	d0d5      	beq.n	10007bb4 <_Z10ScoreBrickaah+0xec>
				score += (int)y*y;
10007c08:	000c      	movs	r4, r1
10007c0a:	434c      	muls	r4, r1
10007c0c:	1900      	adds	r0, r0, r4
				if (y > 2)
10007c0e:	2902      	cmp	r1, #2
10007c10:	ddea      	ble.n	10007be8 <_Z10ScoreBrickaah+0x120>
					if ((d[1] == TILE_EMPTY) &&
10007c12:	789f      	ldrb	r7, [r3, #2]
10007c14:	46bc      	mov	ip, r7
10007c16:	e798      	b.n	10007b4a <_Z10ScoreBrickaah+0x82>
			if (b != 0)
10007c18:	7875      	ldrb	r5, [r6, #1]
10007c1a:	2d00      	cmp	r5, #0
10007c1c:	d0e0      	beq.n	10007be0 <_Z10ScoreBrickaah+0x118>
				score += (int)y*y;
10007c1e:	1900      	adds	r0, r0, r4
				if (y > 2)
10007c20:	e7c5      	b.n	10007bae <_Z10ScoreBrickaah+0xe6>
						((j == 1) || (s[1] == 0)))
10007c22:	78f7      	ldrb	r7, [r6, #3]
10007c24:	2f00      	cmp	r7, #0
10007c26:	d1a0      	bne.n	10007b6a <_Z10ScoreBrickaah+0xa2>
						score -= 2;
10007c28:	3101      	adds	r1, #1
	for (i = 4; i > 0; i--)
10007c2a:	3a01      	subs	r2, #1
						score -= 2;
10007c2c:	3802      	subs	r0, #2
			s++;
10007c2e:	3604      	adds	r6, #4
		y++;
10007c30:	b249      	sxtb	r1, r1
	for (i = 4; i > 0; i--)
10007c32:	331b      	adds	r3, #27
10007c34:	2a00      	cmp	r2, #0
10007c36:	d000      	beq.n	10007c3a <_Z10ScoreBrickaah+0x172>
10007c38:	e757      	b.n	10007aea <_Z10ScoreBrickaah+0x22>
10007c3a:	e7ab      	b.n	10007b94 <_Z10ScoreBrickaah+0xcc>
						((j == 1) || (s[1] == 0)))
10007c3c:	78b5      	ldrb	r5, [r6, #2]
10007c3e:	2d00      	cmp	r5, #0
10007c40:	d000      	beq.n	10007c44 <_Z10ScoreBrickaah+0x17c>
10007c42:	e77f      	b.n	10007b44 <_Z10ScoreBrickaah+0x7c>
						score -= 2;
10007c44:	3802      	subs	r0, #2
			if (b != 0)
10007c46:	e7b5      	b.n	10007bb4 <_Z10ScoreBrickaah+0xec>
						((j == 4) || (s[-1] == 0)))
10007c48:	2d00      	cmp	r5, #0
10007c4a:	d000      	beq.n	10007c4e <_Z10ScoreBrickaah+0x186>
10007c4c:	e773      	b.n	10007b36 <_Z10ScoreBrickaah+0x6e>
						score -= 2;
10007c4e:	3802      	subs	r0, #2
10007c50:	e771      	b.n	10007b36 <_Z10ScoreBrickaah+0x6e>
						((j == 4) || (s[-1] == 0)))
10007c52:	464f      	mov	r7, r9
10007c54:	2f00      	cmp	r7, #0
10007c56:	d000      	beq.n	10007c5a <_Z10ScoreBrickaah+0x192>
10007c58:	e781      	b.n	10007b5e <_Z10ScoreBrickaah+0x96>
						score -= 2;
10007c5a:	3802      	subs	r0, #2
10007c5c:	e77f      	b.n	10007b5e <_Z10ScoreBrickaah+0x96>
						((j == 4) || (s[-1] == 0)))
10007c5e:	2d00      	cmp	r5, #0
10007c60:	d000      	beq.n	10007c64 <_Z10ScoreBrickaah+0x19c>
10007c62:	e78d      	b.n	10007b80 <_Z10ScoreBrickaah+0xb8>
						score -= 2;
10007c64:	3802      	subs	r0, #2
10007c66:	e78b      	b.n	10007b80 <_Z10ScoreBrickaah+0xb8>
10007c68:	3802      	subs	r0, #2
10007c6a:	e751      	b.n	10007b10 <_Z10ScoreBrickaah+0x48>
						(d[MAPW] == TILE_EMPTY) &&
10007c6c:	2a01      	cmp	r2, #1
10007c6e:	d003      	beq.n	10007c78 <_Z10ScoreBrickaah+0x1b0>
						((i == 1) || (s[4] == 0)))
10007c70:	7937      	ldrb	r7, [r6, #4]
10007c72:	2f00      	cmp	r7, #0
10007c74:	d000      	beq.n	10007c78 <_Z10ScoreBrickaah+0x1b0>
10007c76:	e747      	b.n	10007b08 <_Z10ScoreBrickaah+0x40>
						score -= 10;
10007c78:	380a      	subs	r0, #10
10007c7a:	e745      	b.n	10007b08 <_Z10ScoreBrickaah+0x40>
						(d[MAPW] == TILE_EMPTY) &&
10007c7c:	2a01      	cmp	r2, #1
10007c7e:	d003      	beq.n	10007c88 <_Z10ScoreBrickaah+0x1c0>
						((i == 1) || (s[4] == 0)))
10007c80:	7977      	ldrb	r7, [r6, #5]
10007c82:	2f00      	cmp	r7, #0
10007c84:	d000      	beq.n	10007c88 <_Z10ScoreBrickaah+0x1c0>
10007c86:	e752      	b.n	10007b2e <_Z10ScoreBrickaah+0x66>
						score -= 10;
10007c88:	380a      	subs	r0, #10
10007c8a:	e750      	b.n	10007b2e <_Z10ScoreBrickaah+0x66>
						(d[MAPW] == TILE_EMPTY) &&
10007c8c:	2a01      	cmp	r2, #1
10007c8e:	d003      	beq.n	10007c98 <_Z10ScoreBrickaah+0x1d0>
						((i == 1) || (s[4] == 0)))
10007c90:	79b7      	ldrb	r7, [r6, #6]
10007c92:	2f00      	cmp	r7, #0
10007c94:	d000      	beq.n	10007c98 <_Z10ScoreBrickaah+0x1d0>
10007c96:	e75e      	b.n	10007b56 <_Z10ScoreBrickaah+0x8e>
						score -= 10;
10007c98:	380a      	subs	r0, #10
10007c9a:	e75c      	b.n	10007b56 <_Z10ScoreBrickaah+0x8e>
						(d[MAPW] == TILE_EMPTY) &&
10007c9c:	2a01      	cmp	r2, #1
10007c9e:	d003      	beq.n	10007ca8 <_Z10ScoreBrickaah+0x1e0>
						((i == 1) || (s[4] == 0)))
10007ca0:	79f4      	ldrb	r4, [r6, #7]
10007ca2:	2c00      	cmp	r4, #0
10007ca4:	d000      	beq.n	10007ca8 <_Z10ScoreBrickaah+0x1e0>
10007ca6:	e767      	b.n	10007b78 <_Z10ScoreBrickaah+0xb0>
						score -= 10;
10007ca8:	380a      	subs	r0, #10
10007caa:	e765      	b.n	10007b78 <_Z10ScoreBrickaah+0xb0>
10007cac:	10010bd4 	.word	0x10010bd4
10007cb0:	2000327c 	.word	0x2000327c

10007cb4 <_Z6DelRowh>:
{
10007cb4:	b5f0      	push	{r4, r5, r6, r7, lr}
10007cb6:	46d6      	mov	lr, sl
10007cb8:	464f      	mov	r7, r9
10007cba:	4646      	mov	r6, r8
	PlaySound(LineSnd, sizeof(LineSnd));
10007cbc:	23fe      	movs	r3, #254	; 0xfe
{
10007cbe:	b5c0      	push	{r6, r7, lr}
10007cc0:	0007      	movs	r7, r0
	PlaySound(LineSnd, sizeof(LineSnd));
10007cc2:	2200      	movs	r2, #0
10007cc4:	4942      	ldr	r1, [pc, #264]	; (10007dd0 <_Z6DelRowh+0x11c>)
10007cc6:	4843      	ldr	r0, [pc, #268]	; (10007dd4 <_Z6DelRowh+0x120>)
10007cc8:	059b      	lsls	r3, r3, #22
10007cca:	f007 fe39 	bl	1000f940 <_Z9PlaySoundPKhihf>
	Lines++;
10007cce:	4c42      	ldr	r4, [pc, #264]	; (10007dd8 <_Z6DelRowh+0x124>)
	DispTileNum(TILE_SCOREV1, Score, COL_WHITE);
10007cd0:	22ff      	movs	r2, #255	; 0xff
	Lines++;
10007cd2:	6823      	ldr	r3, [r4, #0]
	DispTileNum(TILE_SCOREV1, Score, COL_WHITE);
10007cd4:	202e      	movs	r0, #46	; 0x2e
	Lines++;
10007cd6:	3301      	adds	r3, #1
10007cd8:	6023      	str	r3, [r4, #0]
	DispTileNum(TILE_SCOREV1, Score, COL_WHITE);
10007cda:	4b40      	ldr	r3, [pc, #256]	; (10007ddc <_Z6DelRowh+0x128>)
		s = &Board[y*MAPW + 8];
10007cdc:	260a      	movs	r6, #10
	DispTileNum(TILE_SCOREV1, Score, COL_WHITE);
10007cde:	6819      	ldr	r1, [r3, #0]
10007ce0:	f7ff fd04 	bl	100076ec <_Z11DispTileNumhih>
	DispTileNum(TILE_SCOREV3, ScoreBest, COL_YELLOW);
10007ce4:	4b3e      	ldr	r3, [pc, #248]	; (10007de0 <_Z6DelRowh+0x12c>)
10007ce6:	22fc      	movs	r2, #252	; 0xfc
10007ce8:	6819      	ldr	r1, [r3, #0]
10007cea:	2042      	movs	r0, #66	; 0x42
10007cec:	f7ff fcfe 	bl	100076ec <_Z11DispTileNumhih>
	DispTileNum(TILE_LINESV1, Lines, COL_WHITE);
10007cf0:	6821      	ldr	r1, [r4, #0]
10007cf2:	22ff      	movs	r2, #255	; 0xff
10007cf4:	2030      	movs	r0, #48	; 0x30
10007cf6:	f7ff fcf9 	bl	100076ec <_Z11DispTileNumhih>
	DispTileNum(TILE_LINESV3, LinesBest, COL_YELLOW);
10007cfa:	4b3a      	ldr	r3, [pc, #232]	; (10007de4 <_Z6DelRowh+0x130>)
10007cfc:	22fc      	movs	r2, #252	; 0xfc
10007cfe:	6819      	ldr	r1, [r3, #0]
10007d00:	2044      	movs	r0, #68	; 0x44
10007d02:	f7ff fcf3 	bl	100076ec <_Z11DispTileNumhih>
	DispTileNum(TILE_SPEEDV1, Level, COL_WHITE);
10007d06:	4b38      	ldr	r3, [pc, #224]	; (10007de8 <_Z6DelRowh+0x134>)
10007d08:	22ff      	movs	r2, #255	; 0xff
10007d0a:	7819      	ldrb	r1, [r3, #0]
10007d0c:	2032      	movs	r0, #50	; 0x32
10007d0e:	f7ff fced 	bl	100076ec <_Z11DispTileNumhih>
	DispTileNum(TILE_SPEEDV3, LevelBest, COL_YELLOW);
10007d12:	4b36      	ldr	r3, [pc, #216]	; (10007dec <_Z6DelRowh+0x138>)
10007d14:	22fc      	movs	r2, #252	; 0xfc
10007d16:	7819      	ldrb	r1, [r3, #0]
10007d18:	2046      	movs	r0, #70	; 0x46
10007d1a:	f7ff fce7 	bl	100076ec <_Z11DispTileNumhih>
		s = &Board[y*MAPW + 8];
10007d1e:	007b      	lsls	r3, r7, #1
10007d20:	4699      	mov	r9, r3
10007d22:	19db      	adds	r3, r3, r7
10007d24:	00da      	lsls	r2, r3, #3
10007d26:	189b      	adds	r3, r3, r2
10007d28:	2208      	movs	r2, #8
10007d2a:	4690      	mov	r8, r2
10007d2c:	4498      	add	r8, r3
10007d2e:	4643      	mov	r3, r8
10007d30:	4d2f      	ldr	r5, [pc, #188]	; (10007df0 <_Z6DelRowh+0x13c>)
10007d32:	18ec      	adds	r4, r5, r3
		s[0] = TILE_EMPTY;
10007d34:	2308      	movs	r3, #8
10007d36:	469a      	mov	sl, r3
			s[0] = s[1];
10007d38:	4642      	mov	r2, r8
10007d3a:	7863      	ldrb	r3, [r4, #1]
	for (i = 10; i > 0; i--)
10007d3c:	3e01      	subs	r6, #1
			s[0] = s[1];
10007d3e:	54ab      	strb	r3, [r5, r2]
10007d40:	78a3      	ldrb	r3, [r4, #2]
		sleep_ms(50);
10007d42:	2032      	movs	r0, #50	; 0x32
			s[0] = s[1];
10007d44:	7063      	strb	r3, [r4, #1]
10007d46:	78e3      	ldrb	r3, [r4, #3]
	for (i = 10; i > 0; i--)
10007d48:	b2f6      	uxtb	r6, r6
			s[0] = s[1];
10007d4a:	70a3      	strb	r3, [r4, #2]
10007d4c:	7923      	ldrb	r3, [r4, #4]
10007d4e:	70e3      	strb	r3, [r4, #3]
10007d50:	7963      	ldrb	r3, [r4, #5]
10007d52:	7123      	strb	r3, [r4, #4]
10007d54:	79a3      	ldrb	r3, [r4, #6]
10007d56:	7163      	strb	r3, [r4, #5]
10007d58:	79e3      	ldrb	r3, [r4, #7]
10007d5a:	71a3      	strb	r3, [r4, #6]
10007d5c:	7a23      	ldrb	r3, [r4, #8]
10007d5e:	71e3      	strb	r3, [r4, #7]
10007d60:	7a63      	ldrb	r3, [r4, #9]
10007d62:	7223      	strb	r3, [r4, #8]
		s[0] = TILE_EMPTY;
10007d64:	4653      	mov	r3, sl
10007d66:	7263      	strb	r3, [r4, #9]
		sleep_ms(50);
10007d68:	f7fc fd66 	bl	10004838 <sleep_ms>
	for (i = 10; i > 0; i--)
10007d6c:	2e00      	cmp	r6, #0
10007d6e:	d1e3      	bne.n	10007d38 <_Z6DelRowh+0x84>
	for (; y > 1; y--)
10007d70:	2f01      	cmp	r7, #1
10007d72:	d923      	bls.n	10007dbc <_Z6DelRowh+0x108>
10007d74:	464b      	mov	r3, r9
10007d76:	19da      	adds	r2, r3, r7
10007d78:	00d3      	lsls	r3, r2, #3
10007d7a:	18d3      	adds	r3, r2, r3
10007d7c:	001a      	movs	r2, r3
10007d7e:	3b13      	subs	r3, #19
10007d80:	3208      	adds	r2, #8
10007d82:	18aa      	adds	r2, r5, r2
10007d84:	18eb      	adds	r3, r5, r3
			*s = s[-MAPW];
10007d86:	7819      	ldrb	r1, [r3, #0]
	for (; y > 1; y--)
10007d88:	3f01      	subs	r7, #1
			*s = s[-MAPW];
10007d8a:	7011      	strb	r1, [r2, #0]
10007d8c:	7859      	ldrb	r1, [r3, #1]
	for (; y > 1; y--)
10007d8e:	b2ff      	uxtb	r7, r7
			*s = s[-MAPW];
10007d90:	7051      	strb	r1, [r2, #1]
10007d92:	7899      	ldrb	r1, [r3, #2]
10007d94:	7091      	strb	r1, [r2, #2]
10007d96:	78d9      	ldrb	r1, [r3, #3]
10007d98:	70d1      	strb	r1, [r2, #3]
10007d9a:	7919      	ldrb	r1, [r3, #4]
10007d9c:	7111      	strb	r1, [r2, #4]
10007d9e:	7959      	ldrb	r1, [r3, #5]
10007da0:	7151      	strb	r1, [r2, #5]
10007da2:	7999      	ldrb	r1, [r3, #6]
10007da4:	7191      	strb	r1, [r2, #6]
10007da6:	79d9      	ldrb	r1, [r3, #7]
10007da8:	71d1      	strb	r1, [r2, #7]
10007daa:	7a19      	ldrb	r1, [r3, #8]
10007dac:	7211      	strb	r1, [r2, #8]
10007dae:	7a59      	ldrb	r1, [r3, #9]
	for (; y > 1; y--)
10007db0:	3b1b      	subs	r3, #27
			*s = s[-MAPW];
10007db2:	7251      	strb	r1, [r2, #9]
	for (; y > 1; y--)
10007db4:	3a1b      	subs	r2, #27
10007db6:	2f01      	cmp	r7, #1
10007db8:	d1e5      	bne.n	10007d86 <_Z6DelRowh+0xd2>
10007dba:	4c0e      	ldr	r4, [pc, #56]	; (10007df4 <_Z6DelRowh+0x140>)
		*s = TILE_EMPTY;
10007dbc:	220a      	movs	r2, #10
10007dbe:	2108      	movs	r1, #8
10007dc0:	0020      	movs	r0, r4
10007dc2:	f7f9 f98f 	bl	100010e4 <__wrap_memset>
}
10007dc6:	bce0      	pop	{r5, r6, r7}
10007dc8:	46ba      	mov	sl, r7
10007dca:	46b1      	mov	r9, r6
10007dcc:	46a8      	mov	r8, r5
10007dce:	bdf0      	pop	{r4, r5, r6, r7, pc}
10007dd0:	00001ca2 	.word	0x00001ca2
10007dd4:	10029d34 	.word	0x10029d34
10007dd8:	200061f4 	.word	0x200061f4
10007ddc:	20007108 	.word	0x20007108
10007de0:	2000710c 	.word	0x2000710c
10007de4:	200061f8 	.word	0x200061f8
10007de8:	2001276b 	.word	0x2001276b
10007dec:	2001276c 	.word	0x2001276c
10007df0:	2000327c 	.word	0x2000327c
10007df4:	2000329f 	.word	0x2000329f

10007df8 <_Z8GenBrickv>:
{
10007df8:	b570      	push	{r4, r5, r6, lr}
	Stat[Brick]++;
10007dfa:	2434      	movs	r4, #52	; 0x34
	Brick = NextBrick;
10007dfc:	4e1d      	ldr	r6, [pc, #116]	; (10007e74 <_Z8GenBrickv+0x7c>)
10007dfe:	4a1e      	ldr	r2, [pc, #120]	; (10007e78 <_Z8GenBrickv+0x80>)
10007e00:	7833      	ldrb	r3, [r6, #0]
	Stat[Brick]++;
10007e02:	4d1e      	ldr	r5, [pc, #120]	; (10007e7c <_Z8GenBrickv+0x84>)
	Brick = NextBrick;
10007e04:	7013      	strb	r3, [r2, #0]
	Stat[Brick]++;
10007e06:	009b      	lsls	r3, r3, #2
10007e08:	595a      	ldr	r2, [r3, r5]
10007e0a:	3201      	adds	r2, #1
10007e0c:	515a      	str	r2, [r3, r5]
	for (i = 0; i < BASEBRICKNUM; i++) DispTileNum(TILE_STAT1 + i*2, Stat[i], COL_WHITE);
10007e0e:	0020      	movs	r0, r4
10007e10:	3402      	adds	r4, #2
10007e12:	22ff      	movs	r2, #255	; 0xff
10007e14:	cd02      	ldmia	r5!, {r1}
10007e16:	b2e4      	uxtb	r4, r4
10007e18:	f7ff fc68 	bl	100076ec <_Z11DispTileNumhih>
10007e1c:	2c42      	cmp	r4, #66	; 0x42
10007e1e:	d1f6      	bne.n	10007e0e <_Z8GenBrickv+0x16>

// generate double random number in range 0 (including) to 1 (excluding)
inline double RandDouble() { return Rand.Double(); }

// generate random number in range 0 to MAX (including)
inline u8 RandU8Max(u8 max) { return Rand.U8Max(max); }
10007e20:	2106      	movs	r1, #6
10007e22:	4817      	ldr	r0, [pc, #92]	; (10007e80 <_Z8GenBrickv+0x88>)
10007e24:	f007 fcf2 	bl	1000f80c <_ZN7cRandom5U8MaxEh>
	NextBrick = RandU8Max(BASEBRICKNUM-1);
10007e28:	7030      	strb	r0, [r6, #0]
	const u8* s = &BrickTemp[NextBrick*BRICKTEMPSIZE];
10007e2a:	0104      	lsls	r4, r0, #4
10007e2c:	4815      	ldr	r0, [pc, #84]	; (10007e84 <_Z8GenBrickv+0x8c>)
	u8* d = &Board[2 + 2*MAPW];
10007e2e:	4d16      	ldr	r5, [pc, #88]	; (10007e88 <_Z8GenBrickv+0x90>)
	const u8* s = &BrickTemp[NextBrick*BRICKTEMPSIZE];
10007e30:	1824      	adds	r4, r4, r0
	for (i = 4; i > 0; i--)
10007e32:	0026      	movs	r6, r4
10007e34:	3610      	adds	r6, #16
		memcpy(d, s, 4);
10007e36:	0021      	movs	r1, r4
10007e38:	0028      	movs	r0, r5
10007e3a:	2204      	movs	r2, #4
		s += 4;
10007e3c:	3404      	adds	r4, #4
		memcpy(d, s, 4);
10007e3e:	f7f9 f957 	bl	100010f0 <__wrap___aeabi_memcpy>
		d += MAPW;
10007e42:	351b      	adds	r5, #27
	for (i = 4; i > 0; i--)
10007e44:	42b4      	cmp	r4, r6
10007e46:	d1f6      	bne.n	10007e36 <_Z8GenBrickv+0x3e>
	BrickX = MAPW/2-2;
10007e48:	220b      	movs	r2, #11
10007e4a:	4b10      	ldr	r3, [pc, #64]	; (10007e8c <_Z8GenBrickv+0x94>)
	BrickScore = LevScore[Level-1];
10007e4c:	4910      	ldr	r1, [pc, #64]	; (10007e90 <_Z8GenBrickv+0x98>)
	BrickX = MAPW/2-2;
10007e4e:	701a      	strb	r2, [r3, #0]
	BrickY = 0;
10007e50:	2200      	movs	r2, #0
10007e52:	4b10      	ldr	r3, [pc, #64]	; (10007e94 <_Z8GenBrickv+0x9c>)
10007e54:	701a      	strb	r2, [r3, #0]
	BrickScore = LevScore[Level-1];
10007e56:	4b10      	ldr	r3, [pc, #64]	; (10007e98 <_Z8GenBrickv+0xa0>)
10007e58:	781b      	ldrb	r3, [r3, #0]
10007e5a:	3b01      	subs	r3, #1
10007e5c:	009b      	lsls	r3, r3, #2
10007e5e:	5859      	ldr	r1, [r3, r1]
10007e60:	4b0e      	ldr	r3, [pc, #56]	; (10007e9c <_Z8GenBrickv+0xa4>)
10007e62:	6019      	str	r1, [r3, #0]
	SpeedCnt = StepSpeed;
10007e64:	4b0e      	ldr	r3, [pc, #56]	; (10007ea0 <_Z8GenBrickv+0xa8>)
10007e66:	6819      	ldr	r1, [r3, #0]
10007e68:	4b0e      	ldr	r3, [pc, #56]	; (10007ea4 <_Z8GenBrickv+0xac>)
10007e6a:	6019      	str	r1, [r3, #0]
	Falling = False;
10007e6c:	4b0e      	ldr	r3, [pc, #56]	; (10007ea8 <_Z8GenBrickv+0xb0>)
10007e6e:	701a      	strb	r2, [r3, #0]
}
10007e70:	bd70      	pop	{r4, r5, r6, pc}
10007e72:	46c0      	nop			; (mov r8, r8)
10007e74:	2001276d 	.word	0x2001276d
10007e78:	20012764 	.word	0x20012764
10007e7c:	20007840 	.word	0x20007840
10007e80:	20003050 	.word	0x20003050
10007e84:	10010bd4 	.word	0x10010bd4
10007e88:	200032b4 	.word	0x200032b4
10007e8c:	20012765 	.word	0x20012765
10007e90:	10010bac 	.word	0x10010bac
10007e94:	20012766 	.word	0x20012766
10007e98:	2001276b 	.word	0x2001276b
10007e9c:	20003498 	.word	0x20003498
10007ea0:	2000785c 	.word	0x2000785c
10007ea4:	2000783c 	.word	0x2000783c
10007ea8:	20012768 	.word	0x20012768

10007eac <_Z11CheckBrickXaah>:
{
10007eac:	b5f0      	push	{r4, r5, r6, r7, lr}
10007eae:	464e      	mov	r6, r9
10007eb0:	4645      	mov	r5, r8
10007eb2:	46de      	mov	lr, fp
10007eb4:	4657      	mov	r7, sl
10007eb6:	b5e0      	push	{r5, r6, r7, lr}
10007eb8:	0006      	movs	r6, r0
	u8* d = &Board[x + y*MAPW];
10007eba:	004b      	lsls	r3, r1, #1
{
10007ebc:	b091      	sub	sp, #68	; 0x44
	u8* d = &Board[x + y*MAPW];
10007ebe:	185b      	adds	r3, r3, r1
{
10007ec0:	900c      	str	r0, [sp, #48]	; 0x30
10007ec2:	920b      	str	r2, [sp, #44]	; 0x2c
	const u8* s = &BrickTemp[brick*BRICKTEMPSIZE];
10007ec4:	0110      	lsls	r0, r2, #4
	u8* d = &Board[x + y*MAPW];
10007ec6:	00da      	lsls	r2, r3, #3
10007ec8:	189b      	adds	r3, r3, r2
10007eca:	18f2      	adds	r2, r6, r3
10007ecc:	9302      	str	r3, [sp, #8]
10007ece:	4bca      	ldr	r3, [pc, #808]	; (100081f8 <_Z11CheckBrickXaah+0x34c>)
	const u8* s = &BrickTemp[brick*BRICKTEMPSIZE];
10007ed0:	4dca      	ldr	r5, [pc, #808]	; (100081fc <_Z11CheckBrickXaah+0x350>)
	u8* d = &Board[x + y*MAPW];
10007ed2:	469c      	mov	ip, r3
			b = *s++;
10007ed4:	5c2b      	ldrb	r3, [r5, r0]
	const u8* s = &BrickTemp[brick*BRICKTEMPSIZE];
10007ed6:	1944      	adds	r4, r0, r5
	u8* d = &Board[x + y*MAPW];
10007ed8:	4462      	add	r2, ip
			b = *s++;
10007eda:	9303      	str	r3, [sp, #12]
			if (b != 0)
10007edc:	2b00      	cmp	r3, #0
10007ede:	d000      	beq.n	10007ee2 <_Z11CheckBrickXaah+0x36>
10007ee0:	e1ec      	b.n	100082bc <_Z11CheckBrickXaah+0x410>
10007ee2:	7865      	ldrb	r5, [r4, #1]
	Bool ok = True;
10007ee4:	2001      	movs	r0, #1
				if ((y < 1) || (y >= MAPH-1))
10007ee6:	b2cb      	uxtb	r3, r1
			if (b != 0)
10007ee8:	9505      	str	r5, [sp, #20]
10007eea:	2d00      	cmp	r5, #0
10007eec:	d004      	beq.n	10007ef8 <_Z11CheckBrickXaah+0x4c>
				if ((y < 1) || (y >= MAPH-1))
10007eee:	1e5d      	subs	r5, r3, #1
10007ef0:	2d11      	cmp	r5, #17
10007ef2:	d800      	bhi.n	10007ef6 <_Z11CheckBrickXaah+0x4a>
10007ef4:	e1f1      	b.n	100082da <_Z11CheckBrickXaah+0x42e>
					ok = False;
10007ef6:	2000      	movs	r0, #0
			if (b != 0)
10007ef8:	78a5      	ldrb	r5, [r4, #2]
10007efa:	9507      	str	r5, [sp, #28]
10007efc:	2d00      	cmp	r5, #0
10007efe:	d004      	beq.n	10007f0a <_Z11CheckBrickXaah+0x5e>
				if ((y < 1) || (y >= MAPH-1))
10007f00:	1e5d      	subs	r5, r3, #1
10007f02:	2d11      	cmp	r5, #17
10007f04:	d800      	bhi.n	10007f08 <_Z11CheckBrickXaah+0x5c>
10007f06:	e1f3      	b.n	100082f0 <_Z11CheckBrickXaah+0x444>
					ok = False;
10007f08:	2000      	movs	r0, #0
			b = *s++;
10007f0a:	1d25      	adds	r5, r4, #4
			if (b != 0)
10007f0c:	78e4      	ldrb	r4, [r4, #3]
10007f0e:	9406      	str	r4, [sp, #24]
10007f10:	2c00      	cmp	r4, #0
10007f12:	d004      	beq.n	10007f1e <_Z11CheckBrickXaah+0x72>
				if ((y < 1) || (y >= MAPH-1))
10007f14:	1e5c      	subs	r4, r3, #1
10007f16:	2c11      	cmp	r4, #17
10007f18:	d800      	bhi.n	10007f1c <_Z11CheckBrickXaah+0x70>
10007f1a:	e1f5      	b.n	10008308 <_Z11CheckBrickXaah+0x45c>
					ok = False;
10007f1c:	2000      	movs	r0, #0
			b = *s++;
10007f1e:	782f      	ldrb	r7, [r5, #0]
		y++;
10007f20:	1c5c      	adds	r4, r3, #1
10007f22:	b2e4      	uxtb	r4, r4
10007f24:	9400      	str	r4, [sp, #0]
			b = *s++;
10007f26:	9704      	str	r7, [sp, #16]
			if (b != 0)
10007f28:	2f00      	cmp	r7, #0
10007f2a:	d100      	bne.n	10007f2e <_Z11CheckBrickXaah+0x82>
10007f2c:	e083      	b.n	10008036 <_Z11CheckBrickXaah+0x18a>
				if ((y < 1) || (y >= MAPH-1))
10007f2e:	2b11      	cmp	r3, #17
10007f30:	d900      	bls.n	10007f34 <_Z11CheckBrickXaah+0x88>
10007f32:	e16b      	b.n	1000820c <_Z11CheckBrickXaah+0x360>
					if (*d != TILE_EMPTY) ok = False;
10007f34:	7ed7      	ldrb	r7, [r2, #27]
10007f36:	3f08      	subs	r7, #8
10007f38:	003c      	movs	r4, r7
10007f3a:	4267      	negs	r7, r4
10007f3c:	4167      	adcs	r7, r4
			if (b != 0)
10007f3e:	786c      	ldrb	r4, [r5, #1]
					if (*d != TILE_EMPTY) ok = False;
10007f40:	427f      	negs	r7, r7
10007f42:	4038      	ands	r0, r7
			if (b != 0)
10007f44:	9408      	str	r4, [sp, #32]
10007f46:	2c00      	cmp	r4, #0
10007f48:	d100      	bne.n	10007f4c <_Z11CheckBrickXaah+0xa0>
10007f4a:	e34a      	b.n	100085e2 <_Z11CheckBrickXaah+0x736>
					if (*d != TILE_EMPTY) ok = False;
10007f4c:	7f17      	ldrb	r7, [r2, #28]
10007f4e:	3f08      	subs	r7, #8
10007f50:	003c      	movs	r4, r7
10007f52:	4267      	negs	r7, r4
10007f54:	4167      	adcs	r7, r4
10007f56:	427f      	negs	r7, r7
10007f58:	4038      	ands	r0, r7
			if (b != 0)
10007f5a:	78af      	ldrb	r7, [r5, #2]
10007f5c:	2f00      	cmp	r7, #0
10007f5e:	d100      	bne.n	10007f62 <_Z11CheckBrickXaah+0xb6>
10007f60:	e15d      	b.n	1000821e <_Z11CheckBrickXaah+0x372>
					if (*d != TILE_EMPTY) ok = False;
10007f62:	7f54      	ldrb	r4, [r2, #29]
10007f64:	46a4      	mov	ip, r4
10007f66:	2408      	movs	r4, #8
10007f68:	4264      	negs	r4, r4
10007f6a:	46a0      	mov	r8, r4
10007f6c:	44c4      	add	ip, r8
10007f6e:	4666      	mov	r6, ip
10007f70:	4274      	negs	r4, r6
10007f72:	4174      	adcs	r4, r6
10007f74:	4264      	negs	r4, r4
10007f76:	4020      	ands	r0, r4
			b = *s++;
10007f78:	1d2c      	adds	r4, r5, #4
10007f7a:	46a1      	mov	r9, r4
			if (b != 0)
10007f7c:	78ec      	ldrb	r4, [r5, #3]
10007f7e:	940d      	str	r4, [sp, #52]	; 0x34
10007f80:	2c00      	cmp	r4, #0
10007f82:	d06b      	beq.n	1000805c <_Z11CheckBrickXaah+0x1b0>
					if (*d != TILE_EMPTY) ok = False;
10007f84:	7f95      	ldrb	r5, [r2, #30]
10007f86:	3d08      	subs	r5, #8
10007f88:	002c      	movs	r4, r5
10007f8a:	4265      	negs	r5, r4
10007f8c:	4165      	adcs	r5, r4
10007f8e:	426d      	negs	r5, r5
10007f90:	4028      	ands	r0, r5
		y++;
10007f92:	1c9d      	adds	r5, r3, #2
10007f94:	b2ed      	uxtb	r5, r5
10007f96:	9501      	str	r5, [sp, #4]
			b = *s++;
10007f98:	464d      	mov	r5, r9
10007f9a:	782d      	ldrb	r5, [r5, #0]
10007f9c:	46a8      	mov	r8, r5
			if (b != 0)
10007f9e:	2d00      	cmp	r5, #0
10007fa0:	d164      	bne.n	1000806c <_Z11CheckBrickXaah+0x1c0>
10007fa2:	464c      	mov	r4, r9
10007fa4:	7864      	ldrb	r4, [r4, #1]
10007fa6:	9409      	str	r4, [sp, #36]	; 0x24
10007fa8:	2c00      	cmp	r4, #0
10007faa:	d100      	bne.n	10007fae <_Z11CheckBrickXaah+0x102>
10007fac:	e148      	b.n	10008240 <_Z11CheckBrickXaah+0x394>
				if ((y < 1) || (y >= MAPH-1))
10007fae:	9c00      	ldr	r4, [sp, #0]
10007fb0:	2c11      	cmp	r4, #17
10007fb2:	d96d      	bls.n	10008090 <_Z11CheckBrickXaah+0x1e4>
			b = *s++;
10007fb4:	4648      	mov	r0, r9
10007fb6:	7880      	ldrb	r0, [r0, #2]
10007fb8:	4684      	mov	ip, r0
			if (b != 0)
10007fba:	2800      	cmp	r0, #0
10007fbc:	d100      	bne.n	10007fc0 <_Z11CheckBrickXaah+0x114>
10007fbe:	e145      	b.n	1000824c <_Z11CheckBrickXaah+0x3a0>
			b = *s++;
10007fc0:	4648      	mov	r0, r9
10007fc2:	1d05      	adds	r5, r0, #4
10007fc4:	78c0      	ldrb	r0, [r0, #3]
10007fc6:	900e      	str	r0, [sp, #56]	; 0x38
			if (b != 0)
10007fc8:	2800      	cmp	r0, #0
10007fca:	d000      	beq.n	10007fce <_Z11CheckBrickXaah+0x122>
					ok = False;
10007fcc:	2000      	movs	r0, #0
			b = *s++;
10007fce:	782c      	ldrb	r4, [r5, #0]
10007fd0:	46a1      	mov	r9, r4
			if (b != 0)
10007fd2:	2c00      	cmp	r4, #0
10007fd4:	d100      	bne.n	10007fd8 <_Z11CheckBrickXaah+0x12c>
10007fd6:	e089      	b.n	100080ec <_Z11CheckBrickXaah+0x240>
				if ((y < 1) || (y >= MAPH-1))
10007fd8:	9c01      	ldr	r4, [sp, #4]
10007fda:	2c11      	cmp	r4, #17
10007fdc:	d900      	bls.n	10007fe0 <_Z11CheckBrickXaah+0x134>
10007fde:	e156      	b.n	1000828e <_Z11CheckBrickXaah+0x3e2>
					if (*d != TILE_EMPTY) ok = False;
10007fe0:	2451      	movs	r4, #81	; 0x51
10007fe2:	5d14      	ldrb	r4, [r2, r4]
10007fe4:	46a2      	mov	sl, r4
10007fe6:	2408      	movs	r4, #8
10007fe8:	4264      	negs	r4, r4
10007fea:	46a3      	mov	fp, r4
10007fec:	44da      	add	sl, fp
10007fee:	4656      	mov	r6, sl
10007ff0:	4274      	negs	r4, r6
10007ff2:	4174      	adcs	r4, r6
10007ff4:	4264      	negs	r4, r4
10007ff6:	4020      	ands	r0, r4
			if (b != 0)
10007ff8:	786c      	ldrb	r4, [r5, #1]
10007ffa:	940a      	str	r4, [sp, #40]	; 0x28
10007ffc:	2c00      	cmp	r4, #0
10007ffe:	d000      	beq.n	10008002 <_Z11CheckBrickXaah+0x156>
10008000:	e130      	b.n	10008264 <_Z11CheckBrickXaah+0x3b8>
10008002:	78ac      	ldrb	r4, [r5, #2]
10008004:	2c00      	cmp	r4, #0
10008006:	d000      	beq.n	1000800a <_Z11CheckBrickXaah+0x15e>
10008008:	e13b      	b.n	10008282 <_Z11CheckBrickXaah+0x3d6>
1000800a:	78ec      	ldrb	r4, [r5, #3]
1000800c:	2c00      	cmp	r4, #0
1000800e:	d000      	beq.n	10008012 <_Z11CheckBrickXaah+0x166>
10008010:	e14e      	b.n	100082b0 <_Z11CheckBrickXaah+0x404>
	if (res)
10008012:	2800      	cmp	r0, #0
10008014:	d100      	bne.n	10008018 <_Z11CheckBrickXaah+0x16c>
10008016:	e072      	b.n	100080fe <_Z11CheckBrickXaah+0x252>
		BrickX = x;
10008018:	4b79      	ldr	r3, [pc, #484]	; (10008200 <_Z11CheckBrickXaah+0x354>)
1000801a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1000801c:	701a      	strb	r2, [r3, #0]
		BrickY = y;
1000801e:	4b79      	ldr	r3, [pc, #484]	; (10008204 <_Z11CheckBrickXaah+0x358>)
		Brick = brick;
10008020:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
		BrickY = y;
10008022:	7019      	strb	r1, [r3, #0]
		Brick = brick;
10008024:	4b78      	ldr	r3, [pc, #480]	; (10008208 <_Z11CheckBrickXaah+0x35c>)
10008026:	701a      	strb	r2, [r3, #0]
}
10008028:	b011      	add	sp, #68	; 0x44
1000802a:	bcf0      	pop	{r4, r5, r6, r7}
1000802c:	46bb      	mov	fp, r7
1000802e:	46b2      	mov	sl, r6
10008030:	46a9      	mov	r9, r5
10008032:	46a0      	mov	r8, r4
10008034:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (b != 0)
10008036:	786c      	ldrb	r4, [r5, #1]
10008038:	9408      	str	r4, [sp, #32]
1000803a:	2c00      	cmp	r4, #0
1000803c:	d100      	bne.n	10008040 <_Z11CheckBrickXaah+0x194>
1000803e:	e0ea      	b.n	10008216 <_Z11CheckBrickXaah+0x36a>
				if ((y < 1) || (y >= MAPH-1))
10008040:	2b11      	cmp	r3, #17
10008042:	d800      	bhi.n	10008046 <_Z11CheckBrickXaah+0x19a>
10008044:	e782      	b.n	10007f4c <_Z11CheckBrickXaah+0xa0>
			b = *s++;
10008046:	78af      	ldrb	r7, [r5, #2]
10008048:	1e38      	subs	r0, r7, #0
			if (b != 0)
1000804a:	d100      	bne.n	1000804e <_Z11CheckBrickXaah+0x1a2>
1000804c:	e0e7      	b.n	1000821e <_Z11CheckBrickXaah+0x372>
			b = *s++;
1000804e:	1d28      	adds	r0, r5, #4
10008050:	4681      	mov	r9, r0
10008052:	78e8      	ldrb	r0, [r5, #3]
10008054:	900d      	str	r0, [sp, #52]	; 0x34
			if (b != 0)
10008056:	2800      	cmp	r0, #0
10008058:	d000      	beq.n	1000805c <_Z11CheckBrickXaah+0x1b0>
					ok = False;
1000805a:	2000      	movs	r0, #0
		y++;
1000805c:	1c9d      	adds	r5, r3, #2
1000805e:	b2ed      	uxtb	r5, r5
10008060:	9501      	str	r5, [sp, #4]
			b = *s++;
10008062:	464d      	mov	r5, r9
10008064:	782d      	ldrb	r5, [r5, #0]
10008066:	46a8      	mov	r8, r5
			if (b != 0)
10008068:	2d00      	cmp	r5, #0
1000806a:	d09a      	beq.n	10007fa2 <_Z11CheckBrickXaah+0xf6>
				if ((y < 1) || (y >= MAPH-1))
1000806c:	9c00      	ldr	r4, [sp, #0]
1000806e:	2c11      	cmp	r4, #17
10008070:	d900      	bls.n	10008074 <_Z11CheckBrickXaah+0x1c8>
10008072:	e0df      	b.n	10008234 <_Z11CheckBrickXaah+0x388>
					if (*d != TILE_EMPTY) ok = False;
10008074:	2536      	movs	r5, #54	; 0x36
10008076:	5d55      	ldrb	r5, [r2, r5]
10008078:	3d08      	subs	r5, #8
1000807a:	002c      	movs	r4, r5
1000807c:	4265      	negs	r5, r4
1000807e:	4165      	adcs	r5, r4
			if (b != 0)
10008080:	464c      	mov	r4, r9
10008082:	7864      	ldrb	r4, [r4, #1]
					if (*d != TILE_EMPTY) ok = False;
10008084:	426d      	negs	r5, r5
10008086:	4028      	ands	r0, r5
			if (b != 0)
10008088:	9409      	str	r4, [sp, #36]	; 0x24
1000808a:	2c00      	cmp	r4, #0
1000808c:	d100      	bne.n	10008090 <_Z11CheckBrickXaah+0x1e4>
1000808e:	e2a1      	b.n	100085d4 <_Z11CheckBrickXaah+0x728>
					if (*d != TILE_EMPTY) ok = False;
10008090:	2537      	movs	r5, #55	; 0x37
10008092:	5d55      	ldrb	r5, [r2, r5]
10008094:	3d08      	subs	r5, #8
10008096:	002c      	movs	r4, r5
10008098:	4265      	negs	r5, r4
1000809a:	4165      	adcs	r5, r4
			if (b != 0)
1000809c:	464c      	mov	r4, r9
1000809e:	78a4      	ldrb	r4, [r4, #2]
					if (*d != TILE_EMPTY) ok = False;
100080a0:	426d      	negs	r5, r5
			if (b != 0)
100080a2:	46a4      	mov	ip, r4
					if (*d != TILE_EMPTY) ok = False;
100080a4:	4028      	ands	r0, r5
			if (b != 0)
100080a6:	2c00      	cmp	r4, #0
100080a8:	d100      	bne.n	100080ac <_Z11CheckBrickXaah+0x200>
100080aa:	e0cf      	b.n	1000824c <_Z11CheckBrickXaah+0x3a0>
					if (*d != TILE_EMPTY) ok = False;
100080ac:	2538      	movs	r5, #56	; 0x38
100080ae:	5d55      	ldrb	r5, [r2, r5]
100080b0:	3d08      	subs	r5, #8
100080b2:	002c      	movs	r4, r5
100080b4:	4265      	negs	r5, r4
100080b6:	4165      	adcs	r5, r4
100080b8:	426d      	negs	r5, r5
100080ba:	4028      	ands	r0, r5
			b = *s++;
100080bc:	464c      	mov	r4, r9
100080be:	1d25      	adds	r5, r4, #4
			if (b != 0)
100080c0:	78e4      	ldrb	r4, [r4, #3]
100080c2:	940e      	str	r4, [sp, #56]	; 0x38
100080c4:	2c00      	cmp	r4, #0
100080c6:	d100      	bne.n	100080ca <_Z11CheckBrickXaah+0x21e>
100080c8:	e781      	b.n	10007fce <_Z11CheckBrickXaah+0x122>
					if (*d != TILE_EMPTY) ok = False;
100080ca:	2439      	movs	r4, #57	; 0x39
100080cc:	5d14      	ldrb	r4, [r2, r4]
100080ce:	46a1      	mov	r9, r4
100080d0:	2408      	movs	r4, #8
100080d2:	4264      	negs	r4, r4
100080d4:	46a2      	mov	sl, r4
100080d6:	44d1      	add	r9, sl
100080d8:	464e      	mov	r6, r9
100080da:	4274      	negs	r4, r6
100080dc:	4174      	adcs	r4, r6
100080de:	4264      	negs	r4, r4
100080e0:	4020      	ands	r0, r4
			b = *s++;
100080e2:	782c      	ldrb	r4, [r5, #0]
100080e4:	46a1      	mov	r9, r4
			if (b != 0)
100080e6:	2c00      	cmp	r4, #0
100080e8:	d000      	beq.n	100080ec <_Z11CheckBrickXaah+0x240>
100080ea:	e775      	b.n	10007fd8 <_Z11CheckBrickXaah+0x12c>
100080ec:	786c      	ldrb	r4, [r5, #1]
100080ee:	940a      	str	r4, [sp, #40]	; 0x28
100080f0:	2c00      	cmp	r4, #0
100080f2:	d100      	bne.n	100080f6 <_Z11CheckBrickXaah+0x24a>
100080f4:	e0d0      	b.n	10008298 <_Z11CheckBrickXaah+0x3ec>
				if ((y < 1) || (y >= MAPH-1))
100080f6:	9c01      	ldr	r4, [sp, #4]
100080f8:	2c11      	cmp	r4, #17
100080fa:	d800      	bhi.n	100080fe <_Z11CheckBrickXaah+0x252>
100080fc:	e0b2      	b.n	10008264 <_Z11CheckBrickXaah+0x3b8>
	if (CheckBrickSave(x-1, y, brick)) return True;
100080fe:	2030      	movs	r0, #48	; 0x30
10008100:	466a      	mov	r2, sp
10008102:	1812      	adds	r2, r2, r0
10008104:	7812      	ldrb	r2, [r2, #0]
10008106:	1e56      	subs	r6, r2, #1
10008108:	b270      	sxtb	r0, r6
	u8* d = &Board[x + y*MAPW];
1000810a:	4682      	mov	sl, r0
	if (CheckBrickSave(x-1, y, brick)) return True;
1000810c:	920c      	str	r2, [sp, #48]	; 0x30
1000810e:	900f      	str	r0, [sp, #60]	; 0x3c
	u8* d = &Board[x + y*MAPW];
10008110:	9a02      	ldr	r2, [sp, #8]
10008112:	4839      	ldr	r0, [pc, #228]	; (100081f8 <_Z11CheckBrickXaah+0x34c>)
10008114:	4452      	add	r2, sl
10008116:	4682      	mov	sl, r0
			if (b != 0)
10008118:	9803      	ldr	r0, [sp, #12]
	u8* d = &Board[x + y*MAPW];
1000811a:	4452      	add	r2, sl
			if (b != 0)
1000811c:	2800      	cmp	r0, #0
1000811e:	d000      	beq.n	10008122 <_Z11CheckBrickXaah+0x276>
10008120:	e19f      	b.n	10008462 <_Z11CheckBrickXaah+0x5b6>
	Bool ok = True;
10008122:	3001      	adds	r0, #1
			if (b != 0)
10008124:	9c05      	ldr	r4, [sp, #20]
10008126:	2c00      	cmp	r4, #0
10008128:	d004      	beq.n	10008134 <_Z11CheckBrickXaah+0x288>
				if ((y < 1) || (y >= MAPH-1))
1000812a:	1e5c      	subs	r4, r3, #1
1000812c:	2c11      	cmp	r4, #17
1000812e:	d800      	bhi.n	10008132 <_Z11CheckBrickXaah+0x286>
10008130:	e25c      	b.n	100085ec <_Z11CheckBrickXaah+0x740>
					ok = False;
10008132:	2000      	movs	r0, #0
			if (b != 0)
10008134:	9c07      	ldr	r4, [sp, #28]
10008136:	2c00      	cmp	r4, #0
10008138:	d004      	beq.n	10008144 <_Z11CheckBrickXaah+0x298>
				if ((y < 1) || (y >= MAPH-1))
1000813a:	1e5c      	subs	r4, r3, #1
1000813c:	2c11      	cmp	r4, #17
1000813e:	d800      	bhi.n	10008142 <_Z11CheckBrickXaah+0x296>
10008140:	e263      	b.n	1000860a <_Z11CheckBrickXaah+0x75e>
					ok = False;
10008142:	2000      	movs	r0, #0
			if (b != 0)
10008144:	9c06      	ldr	r4, [sp, #24]
10008146:	2c00      	cmp	r4, #0
10008148:	d004      	beq.n	10008154 <_Z11CheckBrickXaah+0x2a8>
				if ((y < 1) || (y >= MAPH-1))
1000814a:	1e5c      	subs	r4, r3, #1
1000814c:	2c11      	cmp	r4, #17
1000814e:	d800      	bhi.n	10008152 <_Z11CheckBrickXaah+0x2a6>
10008150:	e26a      	b.n	10008628 <_Z11CheckBrickXaah+0x77c>
					ok = False;
10008152:	2000      	movs	r0, #0
			if (b != 0)
10008154:	9c04      	ldr	r4, [sp, #16]
10008156:	2c00      	cmp	r4, #0
10008158:	d100      	bne.n	1000815c <_Z11CheckBrickXaah+0x2b0>
1000815a:	e0e4      	b.n	10008326 <_Z11CheckBrickXaah+0x47a>
				if ((y < 1) || (y >= MAPH-1))
1000815c:	2b11      	cmp	r3, #17
1000815e:	d800      	bhi.n	10008162 <_Z11CheckBrickXaah+0x2b6>
10008160:	e1f3      	b.n	1000854a <_Z11CheckBrickXaah+0x69e>
			b = *s++;
10008162:	9c08      	ldr	r4, [sp, #32]
10008164:	1e20      	subs	r0, r4, #0
			if (b != 0)
10008166:	d100      	bne.n	1000816a <_Z11CheckBrickXaah+0x2be>
10008168:	e16d      	b.n	10008446 <_Z11CheckBrickXaah+0x59a>
			b = *s++;
1000816a:	1e38      	subs	r0, r7, #0
			if (b != 0)
1000816c:	d100      	bne.n	10008170 <_Z11CheckBrickXaah+0x2c4>
1000816e:	e170      	b.n	10008452 <_Z11CheckBrickXaah+0x5a6>
					ok = False;
10008170:	2000      	movs	r0, #0
			if (b != 0)
10008172:	4644      	mov	r4, r8
10008174:	2c00      	cmp	r4, #0
10008176:	d100      	bne.n	1000817a <_Z11CheckBrickXaah+0x2ce>
10008178:	e108      	b.n	1000838c <_Z11CheckBrickXaah+0x4e0>
				if ((y < 1) || (y >= MAPH-1))
1000817a:	9c00      	ldr	r4, [sp, #0]
1000817c:	2c11      	cmp	r4, #17
1000817e:	d900      	bls.n	10008182 <_Z11CheckBrickXaah+0x2d6>
10008180:	e182      	b.n	10008488 <_Z11CheckBrickXaah+0x5dc>
					if (*d != TILE_EMPTY) ok = False;
10008182:	2436      	movs	r4, #54	; 0x36
10008184:	5d14      	ldrb	r4, [r2, r4]
10008186:	46a2      	mov	sl, r4
10008188:	2408      	movs	r4, #8
1000818a:	4264      	negs	r4, r4
1000818c:	46a3      	mov	fp, r4
1000818e:	44da      	add	sl, fp
10008190:	4656      	mov	r6, sl
10008192:	4274      	negs	r4, r6
10008194:	4174      	adcs	r4, r6
10008196:	4264      	negs	r4, r4
10008198:	4020      	ands	r0, r4
			if (b != 0)
1000819a:	9c09      	ldr	r4, [sp, #36]	; 0x24
1000819c:	2c00      	cmp	r4, #0
1000819e:	d000      	beq.n	100081a2 <_Z11CheckBrickXaah+0x2f6>
100081a0:	e198      	b.n	100084d4 <_Z11CheckBrickXaah+0x628>
100081a2:	4664      	mov	r4, ip
100081a4:	2c00      	cmp	r4, #0
100081a6:	d000      	beq.n	100081aa <_Z11CheckBrickXaah+0x2fe>
100081a8:	e177      	b.n	1000849a <_Z11CheckBrickXaah+0x5ee>
100081aa:	9c0e      	ldr	r4, [sp, #56]	; 0x38
100081ac:	2c00      	cmp	r4, #0
100081ae:	d000      	beq.n	100081b2 <_Z11CheckBrickXaah+0x306>
100081b0:	e183      	b.n	100084ba <_Z11CheckBrickXaah+0x60e>
100081b2:	464c      	mov	r4, r9
100081b4:	2c00      	cmp	r4, #0
100081b6:	d100      	bne.n	100081ba <_Z11CheckBrickXaah+0x30e>
100081b8:	e0f8      	b.n	100083ac <_Z11CheckBrickXaah+0x500>
				if ((y < 1) || (y >= MAPH-1))
100081ba:	9c01      	ldr	r4, [sp, #4]
100081bc:	2c11      	cmp	r4, #17
100081be:	d800      	bhi.n	100081c2 <_Z11CheckBrickXaah+0x316>
100081c0:	e1ec      	b.n	1000859c <_Z11CheckBrickXaah+0x6f0>
			if (b != 0)
100081c2:	980a      	ldr	r0, [sp, #40]	; 0x28
100081c4:	2800      	cmp	r0, #0
100081c6:	d000      	beq.n	100081ca <_Z11CheckBrickXaah+0x31e>
100081c8:	e0fd      	b.n	100083c6 <_Z11CheckBrickXaah+0x51a>
			b = *s++;
100081ca:	78a8      	ldrb	r0, [r5, #2]
			if (b != 0)
100081cc:	2800      	cmp	r0, #0
100081ce:	d000      	beq.n	100081d2 <_Z11CheckBrickXaah+0x326>
100081d0:	e0f9      	b.n	100083c6 <_Z11CheckBrickXaah+0x51a>
100081d2:	78ec      	ldrb	r4, [r5, #3]
100081d4:	2c00      	cmp	r4, #0
100081d6:	d008      	beq.n	100081ea <_Z11CheckBrickXaah+0x33e>
				if ((y < 1) || (y >= MAPH-1))
100081d8:	9c01      	ldr	r4, [sp, #4]
100081da:	2c11      	cmp	r4, #17
100081dc:	d900      	bls.n	100081e0 <_Z11CheckBrickXaah+0x334>
100081de:	e0f2      	b.n	100083c6 <_Z11CheckBrickXaah+0x51a>
					if (*d != TILE_EMPTY) ok = False;
100081e0:	2454      	movs	r4, #84	; 0x54
100081e2:	5d12      	ldrb	r2, [r2, r4]
100081e4:	2a08      	cmp	r2, #8
100081e6:	d000      	beq.n	100081ea <_Z11CheckBrickXaah+0x33e>
100081e8:	e0ed      	b.n	100083c6 <_Z11CheckBrickXaah+0x51a>
	if (res)
100081ea:	2800      	cmp	r0, #0
100081ec:	d100      	bne.n	100081f0 <_Z11CheckBrickXaah+0x344>
100081ee:	e0ea      	b.n	100083c6 <_Z11CheckBrickXaah+0x51a>
		BrickX = x;
100081f0:	4b03      	ldr	r3, [pc, #12]	; (10008200 <_Z11CheckBrickXaah+0x354>)
100081f2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
100081f4:	e712      	b.n	1000801c <_Z11CheckBrickXaah+0x170>
100081f6:	46c0      	nop			; (mov r8, r8)
100081f8:	2000327c 	.word	0x2000327c
100081fc:	10010bd4 	.word	0x10010bd4
10008200:	20012765 	.word	0x20012765
10008204:	20012766 	.word	0x20012766
10008208:	20012764 	.word	0x20012764
			b = *s++;
1000820c:	7868      	ldrb	r0, [r5, #1]
1000820e:	9008      	str	r0, [sp, #32]
			if (b != 0)
10008210:	2800      	cmp	r0, #0
10008212:	d000      	beq.n	10008216 <_Z11CheckBrickXaah+0x36a>
10008214:	e717      	b.n	10008046 <_Z11CheckBrickXaah+0x19a>
10008216:	78af      	ldrb	r7, [r5, #2]
10008218:	2f00      	cmp	r7, #0
1000821a:	d000      	beq.n	1000821e <_Z11CheckBrickXaah+0x372>
1000821c:	e18a      	b.n	10008534 <_Z11CheckBrickXaah+0x688>
			b = *s++;
1000821e:	1d2c      	adds	r4, r5, #4
10008220:	46a1      	mov	r9, r4
			if (b != 0)
10008222:	78ec      	ldrb	r4, [r5, #3]
10008224:	940d      	str	r4, [sp, #52]	; 0x34
10008226:	2c00      	cmp	r4, #0
10008228:	d100      	bne.n	1000822c <_Z11CheckBrickXaah+0x380>
1000822a:	e717      	b.n	1000805c <_Z11CheckBrickXaah+0x1b0>
				if ((y < 1) || (y >= MAPH-1))
1000822c:	2b11      	cmp	r3, #17
1000822e:	d900      	bls.n	10008232 <_Z11CheckBrickXaah+0x386>
10008230:	e713      	b.n	1000805a <_Z11CheckBrickXaah+0x1ae>
10008232:	e6a7      	b.n	10007f84 <_Z11CheckBrickXaah+0xd8>
			b = *s++;
10008234:	4648      	mov	r0, r9
10008236:	7840      	ldrb	r0, [r0, #1]
10008238:	9009      	str	r0, [sp, #36]	; 0x24
			if (b != 0)
1000823a:	2800      	cmp	r0, #0
1000823c:	d000      	beq.n	10008240 <_Z11CheckBrickXaah+0x394>
1000823e:	e6b9      	b.n	10007fb4 <_Z11CheckBrickXaah+0x108>
10008240:	464c      	mov	r4, r9
10008242:	78a4      	ldrb	r4, [r4, #2]
10008244:	46a4      	mov	ip, r4
10008246:	2c00      	cmp	r4, #0
10008248:	d000      	beq.n	1000824c <_Z11CheckBrickXaah+0x3a0>
1000824a:	e167      	b.n	1000851c <_Z11CheckBrickXaah+0x670>
			b = *s++;
1000824c:	464c      	mov	r4, r9
1000824e:	1d25      	adds	r5, r4, #4
			if (b != 0)
10008250:	78e4      	ldrb	r4, [r4, #3]
10008252:	940e      	str	r4, [sp, #56]	; 0x38
10008254:	2c00      	cmp	r4, #0
10008256:	d100      	bne.n	1000825a <_Z11CheckBrickXaah+0x3ae>
10008258:	e6b9      	b.n	10007fce <_Z11CheckBrickXaah+0x122>
				if ((y < 1) || (y >= MAPH-1))
1000825a:	9c00      	ldr	r4, [sp, #0]
1000825c:	2c11      	cmp	r4, #17
1000825e:	d900      	bls.n	10008262 <_Z11CheckBrickXaah+0x3b6>
10008260:	e6b4      	b.n	10007fcc <_Z11CheckBrickXaah+0x120>
10008262:	e732      	b.n	100080ca <_Z11CheckBrickXaah+0x21e>
					if (*d != TILE_EMPTY) ok = False;
10008264:	2452      	movs	r4, #82	; 0x52
10008266:	5d14      	ldrb	r4, [r2, r4]
10008268:	46a2      	mov	sl, r4
1000826a:	2408      	movs	r4, #8
1000826c:	4264      	negs	r4, r4
1000826e:	46a3      	mov	fp, r4
10008270:	44da      	add	sl, fp
10008272:	4656      	mov	r6, sl
10008274:	4274      	negs	r4, r6
10008276:	4174      	adcs	r4, r6
10008278:	4264      	negs	r4, r4
1000827a:	4020      	ands	r0, r4
			if (b != 0)
1000827c:	78ac      	ldrb	r4, [r5, #2]
1000827e:	2c00      	cmp	r4, #0
10008280:	d00e      	beq.n	100082a0 <_Z11CheckBrickXaah+0x3f4>
					if (*d != TILE_EMPTY) ok = False;
10008282:	2453      	movs	r4, #83	; 0x53
10008284:	5d14      	ldrb	r4, [r2, r4]
10008286:	2c08      	cmp	r4, #8
10008288:	d000      	beq.n	1000828c <_Z11CheckBrickXaah+0x3e0>
1000828a:	e738      	b.n	100080fe <_Z11CheckBrickXaah+0x252>
1000828c:	e6bd      	b.n	1000800a <_Z11CheckBrickXaah+0x15e>
			b = *s++;
1000828e:	7868      	ldrb	r0, [r5, #1]
10008290:	900a      	str	r0, [sp, #40]	; 0x28
			if (b != 0)
10008292:	2800      	cmp	r0, #0
10008294:	d000      	beq.n	10008298 <_Z11CheckBrickXaah+0x3ec>
10008296:	e732      	b.n	100080fe <_Z11CheckBrickXaah+0x252>
10008298:	78ac      	ldrb	r4, [r5, #2]
1000829a:	2c00      	cmp	r4, #0
1000829c:	d000      	beq.n	100082a0 <_Z11CheckBrickXaah+0x3f4>
1000829e:	e138      	b.n	10008512 <_Z11CheckBrickXaah+0x666>
100082a0:	78ec      	ldrb	r4, [r5, #3]
100082a2:	2c00      	cmp	r4, #0
100082a4:	d100      	bne.n	100082a8 <_Z11CheckBrickXaah+0x3fc>
100082a6:	e6b4      	b.n	10008012 <_Z11CheckBrickXaah+0x166>
				if ((y < 1) || (y >= MAPH-1))
100082a8:	9c01      	ldr	r4, [sp, #4]
100082aa:	2c11      	cmp	r4, #17
100082ac:	d900      	bls.n	100082b0 <_Z11CheckBrickXaah+0x404>
100082ae:	e726      	b.n	100080fe <_Z11CheckBrickXaah+0x252>
					if (*d != TILE_EMPTY) ok = False;
100082b0:	2454      	movs	r4, #84	; 0x54
100082b2:	5d12      	ldrb	r2, [r2, r4]
100082b4:	2a08      	cmp	r2, #8
100082b6:	d000      	beq.n	100082ba <_Z11CheckBrickXaah+0x40e>
100082b8:	e721      	b.n	100080fe <_Z11CheckBrickXaah+0x252>
100082ba:	e6aa      	b.n	10008012 <_Z11CheckBrickXaah+0x166>
				if ((y < 1) || (y >= MAPH-1))
100082bc:	b2cb      	uxtb	r3, r1
100082be:	1e58      	subs	r0, r3, #1
100082c0:	2811      	cmp	r0, #17
100082c2:	d900      	bls.n	100082c6 <_Z11CheckBrickXaah+0x41a>
100082c4:	e11e      	b.n	10008504 <_Z11CheckBrickXaah+0x658>
					if (*d != TILE_EMPTY) ok = False;
100082c6:	7810      	ldrb	r0, [r2, #0]
100082c8:	3808      	subs	r0, #8
100082ca:	4245      	negs	r5, r0
100082cc:	4168      	adcs	r0, r5
			if (b != 0)
100082ce:	7865      	ldrb	r5, [r4, #1]
					if (*d != TILE_EMPTY) ok = False;
100082d0:	b2c0      	uxtb	r0, r0
			if (b != 0)
100082d2:	9505      	str	r5, [sp, #20]
100082d4:	2d00      	cmp	r5, #0
100082d6:	d100      	bne.n	100082da <_Z11CheckBrickXaah+0x42e>
100082d8:	e176      	b.n	100085c8 <_Z11CheckBrickXaah+0x71c>
					if (*d != TILE_EMPTY) ok = False;
100082da:	7855      	ldrb	r5, [r2, #1]
100082dc:	3d08      	subs	r5, #8
100082de:	426f      	negs	r7, r5
100082e0:	417d      	adcs	r5, r7
100082e2:	426d      	negs	r5, r5
100082e4:	4028      	ands	r0, r5
			if (b != 0)
100082e6:	78a5      	ldrb	r5, [r4, #2]
100082e8:	9507      	str	r5, [sp, #28]
100082ea:	2d00      	cmp	r5, #0
100082ec:	d100      	bne.n	100082f0 <_Z11CheckBrickXaah+0x444>
100082ee:	e60c      	b.n	10007f0a <_Z11CheckBrickXaah+0x5e>
					if (*d != TILE_EMPTY) ok = False;
100082f0:	7895      	ldrb	r5, [r2, #2]
100082f2:	3d08      	subs	r5, #8
100082f4:	426f      	negs	r7, r5
100082f6:	417d      	adcs	r5, r7
100082f8:	426d      	negs	r5, r5
100082fa:	4028      	ands	r0, r5
			b = *s++;
100082fc:	1d25      	adds	r5, r4, #4
			if (b != 0)
100082fe:	78e4      	ldrb	r4, [r4, #3]
10008300:	9406      	str	r4, [sp, #24]
10008302:	2c00      	cmp	r4, #0
10008304:	d100      	bne.n	10008308 <_Z11CheckBrickXaah+0x45c>
10008306:	e60a      	b.n	10007f1e <_Z11CheckBrickXaah+0x72>
					if (*d != TILE_EMPTY) ok = False;
10008308:	78d4      	ldrb	r4, [r2, #3]
1000830a:	3c08      	subs	r4, #8
1000830c:	4267      	negs	r7, r4
1000830e:	417c      	adcs	r4, r7
10008310:	4264      	negs	r4, r4
			b = *s++;
10008312:	782f      	ldrb	r7, [r5, #0]
					if (*d != TILE_EMPTY) ok = False;
10008314:	4020      	ands	r0, r4
		y++;
10008316:	1c5c      	adds	r4, r3, #1
10008318:	b2e4      	uxtb	r4, r4
1000831a:	9400      	str	r4, [sp, #0]
			b = *s++;
1000831c:	9704      	str	r7, [sp, #16]
			if (b != 0)
1000831e:	2f00      	cmp	r7, #0
10008320:	d000      	beq.n	10008324 <_Z11CheckBrickXaah+0x478>
10008322:	e604      	b.n	10007f2e <_Z11CheckBrickXaah+0x82>
10008324:	e687      	b.n	10008036 <_Z11CheckBrickXaah+0x18a>
10008326:	9c08      	ldr	r4, [sp, #32]
10008328:	2c00      	cmp	r4, #0
1000832a:	d100      	bne.n	1000832e <_Z11CheckBrickXaah+0x482>
1000832c:	e08b      	b.n	10008446 <_Z11CheckBrickXaah+0x59a>
				if ((y < 1) || (y >= MAPH-1))
1000832e:	2b11      	cmp	r3, #17
10008330:	d900      	bls.n	10008334 <_Z11CheckBrickXaah+0x488>
10008332:	e71a      	b.n	1000816a <_Z11CheckBrickXaah+0x2be>
					if (*d != TILE_EMPTY) ok = False;
10008334:	7f14      	ldrb	r4, [r2, #28]
10008336:	46a2      	mov	sl, r4
10008338:	2408      	movs	r4, #8
1000833a:	4264      	negs	r4, r4
1000833c:	46a3      	mov	fp, r4
1000833e:	44da      	add	sl, fp
10008340:	4656      	mov	r6, sl
10008342:	4274      	negs	r4, r6
10008344:	4174      	adcs	r4, r6
10008346:	4264      	negs	r4, r4
10008348:	4020      	ands	r0, r4
			if (b != 0)
1000834a:	2f00      	cmp	r7, #0
1000834c:	d100      	bne.n	10008350 <_Z11CheckBrickXaah+0x4a4>
1000834e:	e080      	b.n	10008452 <_Z11CheckBrickXaah+0x5a6>
					if (*d != TILE_EMPTY) ok = False;
10008350:	7f54      	ldrb	r4, [r2, #29]
10008352:	46a2      	mov	sl, r4
10008354:	2408      	movs	r4, #8
10008356:	4264      	negs	r4, r4
10008358:	46a3      	mov	fp, r4
1000835a:	44da      	add	sl, fp
1000835c:	4656      	mov	r6, sl
1000835e:	4274      	negs	r4, r6
10008360:	4174      	adcs	r4, r6
10008362:	4264      	negs	r4, r4
10008364:	4020      	ands	r0, r4
			if (b != 0)
10008366:	9c0d      	ldr	r4, [sp, #52]	; 0x34
10008368:	2c00      	cmp	r4, #0
1000836a:	d100      	bne.n	1000836e <_Z11CheckBrickXaah+0x4c2>
1000836c:	e701      	b.n	10008172 <_Z11CheckBrickXaah+0x2c6>
					if (*d != TILE_EMPTY) ok = False;
1000836e:	7f94      	ldrb	r4, [r2, #30]
10008370:	46a2      	mov	sl, r4
10008372:	2408      	movs	r4, #8
10008374:	4264      	negs	r4, r4
10008376:	46a3      	mov	fp, r4
10008378:	44da      	add	sl, fp
1000837a:	4656      	mov	r6, sl
1000837c:	4274      	negs	r4, r6
1000837e:	4174      	adcs	r4, r6
10008380:	4264      	negs	r4, r4
10008382:	4020      	ands	r0, r4
			if (b != 0)
10008384:	4644      	mov	r4, r8
10008386:	2c00      	cmp	r4, #0
10008388:	d000      	beq.n	1000838c <_Z11CheckBrickXaah+0x4e0>
1000838a:	e6f6      	b.n	1000817a <_Z11CheckBrickXaah+0x2ce>
1000838c:	9c09      	ldr	r4, [sp, #36]	; 0x24
1000838e:	2c00      	cmp	r4, #0
10008390:	d07d      	beq.n	1000848e <_Z11CheckBrickXaah+0x5e2>
				if ((y < 1) || (y >= MAPH-1))
10008392:	9c00      	ldr	r4, [sp, #0]
10008394:	2c11      	cmp	r4, #17
10008396:	d800      	bhi.n	1000839a <_Z11CheckBrickXaah+0x4ee>
10008398:	e09c      	b.n	100084d4 <_Z11CheckBrickXaah+0x628>
			b = *s++;
1000839a:	4660      	mov	r0, ip
			if (b != 0)
1000839c:	2800      	cmp	r0, #0
1000839e:	d100      	bne.n	100083a2 <_Z11CheckBrickXaah+0x4f6>
100083a0:	e0a7      	b.n	100084f2 <_Z11CheckBrickXaah+0x646>
					ok = False;
100083a2:	2000      	movs	r0, #0
			if (b != 0)
100083a4:	464c      	mov	r4, r9
100083a6:	2c00      	cmp	r4, #0
100083a8:	d000      	beq.n	100083ac <_Z11CheckBrickXaah+0x500>
100083aa:	e706      	b.n	100081ba <_Z11CheckBrickXaah+0x30e>
100083ac:	9c0a      	ldr	r4, [sp, #40]	; 0x28
100083ae:	2c00      	cmp	r4, #0
100083b0:	d100      	bne.n	100083b4 <_Z11CheckBrickXaah+0x508>
100083b2:	e0e1      	b.n	10008578 <_Z11CheckBrickXaah+0x6cc>
				if ((y < 1) || (y >= MAPH-1))
100083b4:	9c01      	ldr	r4, [sp, #4]
100083b6:	2c11      	cmp	r4, #17
100083b8:	d805      	bhi.n	100083c6 <_Z11CheckBrickXaah+0x51a>
					if (*d != TILE_EMPTY) ok = False;
100083ba:	2452      	movs	r4, #82	; 0x52
100083bc:	5d14      	ldrb	r4, [r2, r4]
100083be:	2c08      	cmp	r4, #8
100083c0:	d101      	bne.n	100083c6 <_Z11CheckBrickXaah+0x51a>
100083c2:	f000 fcbc 	bl	10008d3e <_Z11CheckBrickXaah+0xe92>
	if (CheckBrickSave(x+1, y, brick)) return True;
100083c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	u8* d = &Board[x + y*MAPW];
100083c8:	48b8      	ldr	r0, [pc, #736]	; (100086ac <_Z11CheckBrickXaah+0x800>)
	if (CheckBrickSave(x+1, y, brick)) return True;
100083ca:	3201      	adds	r2, #1
100083cc:	b252      	sxtb	r2, r2
100083ce:	4693      	mov	fp, r2
	u8* d = &Board[x + y*MAPW];
100083d0:	4682      	mov	sl, r0
100083d2:	9a02      	ldr	r2, [sp, #8]
			if (b != 0)
100083d4:	9803      	ldr	r0, [sp, #12]
	u8* d = &Board[x + y*MAPW];
100083d6:	445a      	add	r2, fp
100083d8:	4452      	add	r2, sl
			if (b != 0)
100083da:	2800      	cmp	r0, #0
100083dc:	d000      	beq.n	100083e0 <_Z11CheckBrickXaah+0x534>
100083de:	e376      	b.n	10008ace <_Z11CheckBrickXaah+0xc22>
	Bool ok = True;
100083e0:	3001      	adds	r0, #1
			if (b != 0)
100083e2:	9c05      	ldr	r4, [sp, #20]
100083e4:	2c00      	cmp	r4, #0
100083e6:	d004      	beq.n	100083f2 <_Z11CheckBrickXaah+0x546>
				if ((y < 1) || (y >= MAPH-1))
100083e8:	1e5e      	subs	r6, r3, #1
100083ea:	2e11      	cmp	r6, #17
100083ec:	d800      	bhi.n	100083f0 <_Z11CheckBrickXaah+0x544>
100083ee:	e3d6      	b.n	10008b9e <_Z11CheckBrickXaah+0xcf2>
					ok = False;
100083f0:	2000      	movs	r0, #0
			if (b != 0)
100083f2:	9c07      	ldr	r4, [sp, #28]
100083f4:	2c00      	cmp	r4, #0
100083f6:	d004      	beq.n	10008402 <_Z11CheckBrickXaah+0x556>
				if ((y < 1) || (y >= MAPH-1))
100083f8:	1e5e      	subs	r6, r3, #1
100083fa:	2e11      	cmp	r6, #17
100083fc:	d800      	bhi.n	10008400 <_Z11CheckBrickXaah+0x554>
100083fe:	e375      	b.n	10008aec <_Z11CheckBrickXaah+0xc40>
					ok = False;
10008400:	2000      	movs	r0, #0
			if (b != 0)
10008402:	9c06      	ldr	r4, [sp, #24]
10008404:	2c00      	cmp	r4, #0
10008406:	d004      	beq.n	10008412 <_Z11CheckBrickXaah+0x566>
				if ((y < 1) || (y >= MAPH-1))
10008408:	1e5e      	subs	r6, r3, #1
1000840a:	2e11      	cmp	r6, #17
1000840c:	d800      	bhi.n	10008410 <_Z11CheckBrickXaah+0x564>
1000840e:	e378      	b.n	10008b02 <_Z11CheckBrickXaah+0xc56>
					ok = False;
10008410:	2000      	movs	r0, #0
			if (b != 0)
10008412:	9c04      	ldr	r4, [sp, #16]
10008414:	2c00      	cmp	r4, #0
10008416:	d100      	bne.n	1000841a <_Z11CheckBrickXaah+0x56e>
10008418:	e348      	b.n	10008aac <_Z11CheckBrickXaah+0xc00>
				if ((y < 1) || (y >= MAPH-1))
1000841a:	2b11      	cmp	r3, #17
1000841c:	d900      	bls.n	10008420 <_Z11CheckBrickXaah+0x574>
1000841e:	e38b      	b.n	10008b38 <_Z11CheckBrickXaah+0xc8c>
					if (*d != TILE_EMPTY) ok = False;
10008420:	7ed6      	ldrb	r6, [r2, #27]
10008422:	3e08      	subs	r6, #8
10008424:	0034      	movs	r4, r6
10008426:	4266      	negs	r6, r4
10008428:	4166      	adcs	r6, r4
			if (b != 0)
1000842a:	9c08      	ldr	r4, [sp, #32]
					if (*d != TILE_EMPTY) ok = False;
1000842c:	4276      	negs	r6, r6
1000842e:	4030      	ands	r0, r6
			if (b != 0)
10008430:	2c00      	cmp	r4, #0
10008432:	d000      	beq.n	10008436 <_Z11CheckBrickXaah+0x58a>
10008434:	e104      	b.n	10008640 <_Z11CheckBrickXaah+0x794>
10008436:	2f00      	cmp	r7, #0
10008438:	d000      	beq.n	1000843c <_Z11CheckBrickXaah+0x590>
1000843a:	e10b      	b.n	10008654 <_Z11CheckBrickXaah+0x7a8>
1000843c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
1000843e:	2c00      	cmp	r4, #0
10008440:	d000      	beq.n	10008444 <_Z11CheckBrickXaah+0x598>
10008442:	e111      	b.n	10008668 <_Z11CheckBrickXaah+0x7bc>
10008444:	e117      	b.n	10008676 <_Z11CheckBrickXaah+0x7ca>
10008446:	2f00      	cmp	r7, #0
10008448:	d003      	beq.n	10008452 <_Z11CheckBrickXaah+0x5a6>
				if ((y < 1) || (y >= MAPH-1))
1000844a:	2b11      	cmp	r3, #17
1000844c:	d980      	bls.n	10008350 <_Z11CheckBrickXaah+0x4a4>
					ok = False;
1000844e:	2000      	movs	r0, #0
10008450:	e68f      	b.n	10008172 <_Z11CheckBrickXaah+0x2c6>
			if (b != 0)
10008452:	9c0d      	ldr	r4, [sp, #52]	; 0x34
10008454:	2c00      	cmp	r4, #0
10008456:	d100      	bne.n	1000845a <_Z11CheckBrickXaah+0x5ae>
10008458:	e68b      	b.n	10008172 <_Z11CheckBrickXaah+0x2c6>
				if ((y < 1) || (y >= MAPH-1))
1000845a:	2b11      	cmp	r3, #17
1000845c:	d987      	bls.n	1000836e <_Z11CheckBrickXaah+0x4c2>
					ok = False;
1000845e:	2000      	movs	r0, #0
10008460:	e687      	b.n	10008172 <_Z11CheckBrickXaah+0x2c6>
				if ((y < 1) || (y >= MAPH-1))
10008462:	1e58      	subs	r0, r3, #1
10008464:	2811      	cmp	r0, #17
10008466:	d900      	bls.n	1000846a <_Z11CheckBrickXaah+0x5be>
10008468:	e0ac      	b.n	100085c4 <_Z11CheckBrickXaah+0x718>
					if (*d != TILE_EMPTY) ok = False;
1000846a:	7810      	ldrb	r0, [r2, #0]
1000846c:	3808      	subs	r0, #8
1000846e:	0004      	movs	r4, r0
10008470:	4260      	negs	r0, r4
10008472:	4160      	adcs	r0, r4
			if (b != 0)
10008474:	9c05      	ldr	r4, [sp, #20]
					if (*d != TILE_EMPTY) ok = False;
10008476:	b2c0      	uxtb	r0, r0
			if (b != 0)
10008478:	2c00      	cmp	r4, #0
1000847a:	d000      	beq.n	1000847e <_Z11CheckBrickXaah+0x5d2>
1000847c:	e0b6      	b.n	100085ec <_Z11CheckBrickXaah+0x740>
1000847e:	9c07      	ldr	r4, [sp, #28]
10008480:	2c00      	cmp	r4, #0
10008482:	d100      	bne.n	10008486 <_Z11CheckBrickXaah+0x5da>
10008484:	e65e      	b.n	10008144 <_Z11CheckBrickXaah+0x298>
10008486:	e0c0      	b.n	1000860a <_Z11CheckBrickXaah+0x75e>
			b = *s++;
10008488:	9c09      	ldr	r4, [sp, #36]	; 0x24
1000848a:	1e20      	subs	r0, r4, #0
			if (b != 0)
1000848c:	d185      	bne.n	1000839a <_Z11CheckBrickXaah+0x4ee>
1000848e:	4664      	mov	r4, ip
10008490:	2c00      	cmp	r4, #0
10008492:	d02e      	beq.n	100084f2 <_Z11CheckBrickXaah+0x646>
				if ((y < 1) || (y >= MAPH-1))
10008494:	9c00      	ldr	r4, [sp, #0]
10008496:	2c11      	cmp	r4, #17
10008498:	d883      	bhi.n	100083a2 <_Z11CheckBrickXaah+0x4f6>
					if (*d != TILE_EMPTY) ok = False;
1000849a:	2438      	movs	r4, #56	; 0x38
1000849c:	5d14      	ldrb	r4, [r2, r4]
1000849e:	46a2      	mov	sl, r4
100084a0:	2408      	movs	r4, #8
100084a2:	4264      	negs	r4, r4
100084a4:	46a3      	mov	fp, r4
100084a6:	44da      	add	sl, fp
100084a8:	4656      	mov	r6, sl
100084aa:	4274      	negs	r4, r6
100084ac:	4174      	adcs	r4, r6
100084ae:	4264      	negs	r4, r4
100084b0:	4020      	ands	r0, r4
			if (b != 0)
100084b2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
100084b4:	2c00      	cmp	r4, #0
100084b6:	d100      	bne.n	100084ba <_Z11CheckBrickXaah+0x60e>
100084b8:	e67b      	b.n	100081b2 <_Z11CheckBrickXaah+0x306>
					if (*d != TILE_EMPTY) ok = False;
100084ba:	2439      	movs	r4, #57	; 0x39
100084bc:	5d14      	ldrb	r4, [r2, r4]
100084be:	46a2      	mov	sl, r4
100084c0:	2408      	movs	r4, #8
100084c2:	4264      	negs	r4, r4
100084c4:	46a3      	mov	fp, r4
100084c6:	44da      	add	sl, fp
100084c8:	4656      	mov	r6, sl
100084ca:	4274      	negs	r4, r6
100084cc:	4174      	adcs	r4, r6
100084ce:	4264      	negs	r4, r4
100084d0:	4020      	ands	r0, r4
100084d2:	e66e      	b.n	100081b2 <_Z11CheckBrickXaah+0x306>
100084d4:	2437      	movs	r4, #55	; 0x37
100084d6:	5d14      	ldrb	r4, [r2, r4]
100084d8:	46a2      	mov	sl, r4
100084da:	2408      	movs	r4, #8
100084dc:	4264      	negs	r4, r4
100084de:	46a3      	mov	fp, r4
100084e0:	44da      	add	sl, fp
100084e2:	4656      	mov	r6, sl
100084e4:	4274      	negs	r4, r6
100084e6:	4174      	adcs	r4, r6
100084e8:	4264      	negs	r4, r4
100084ea:	4020      	ands	r0, r4
			if (b != 0)
100084ec:	4664      	mov	r4, ip
100084ee:	2c00      	cmp	r4, #0
100084f0:	d1d3      	bne.n	1000849a <_Z11CheckBrickXaah+0x5ee>
100084f2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
100084f4:	2c00      	cmp	r4, #0
100084f6:	d100      	bne.n	100084fa <_Z11CheckBrickXaah+0x64e>
100084f8:	e65b      	b.n	100081b2 <_Z11CheckBrickXaah+0x306>
				if ((y < 1) || (y >= MAPH-1))
100084fa:	9c00      	ldr	r4, [sp, #0]
100084fc:	2c11      	cmp	r4, #17
100084fe:	d9dc      	bls.n	100084ba <_Z11CheckBrickXaah+0x60e>
					ok = False;
10008500:	2000      	movs	r0, #0
10008502:	e74f      	b.n	100083a4 <_Z11CheckBrickXaah+0x4f8>
			if (b != 0)
10008504:	7865      	ldrb	r5, [r4, #1]
					ok = False;
10008506:	2000      	movs	r0, #0
			if (b != 0)
10008508:	9505      	str	r5, [sp, #20]
1000850a:	2d00      	cmp	r5, #0
1000850c:	d100      	bne.n	10008510 <_Z11CheckBrickXaah+0x664>
1000850e:	e4f3      	b.n	10007ef8 <_Z11CheckBrickXaah+0x4c>
10008510:	e4ed      	b.n	10007eee <_Z11CheckBrickXaah+0x42>
				if ((y < 1) || (y >= MAPH-1))
10008512:	9c01      	ldr	r4, [sp, #4]
10008514:	2c11      	cmp	r4, #17
10008516:	d900      	bls.n	1000851a <_Z11CheckBrickXaah+0x66e>
10008518:	e5f1      	b.n	100080fe <_Z11CheckBrickXaah+0x252>
1000851a:	e6b2      	b.n	10008282 <_Z11CheckBrickXaah+0x3d6>
1000851c:	9c00      	ldr	r4, [sp, #0]
1000851e:	2c11      	cmp	r4, #17
10008520:	d800      	bhi.n	10008524 <_Z11CheckBrickXaah+0x678>
10008522:	e5c3      	b.n	100080ac <_Z11CheckBrickXaah+0x200>
			b = *s++;
10008524:	4648      	mov	r0, r9
10008526:	1d05      	adds	r5, r0, #4
10008528:	78c0      	ldrb	r0, [r0, #3]
1000852a:	900e      	str	r0, [sp, #56]	; 0x38
			if (b != 0)
1000852c:	2800      	cmp	r0, #0
1000852e:	d100      	bne.n	10008532 <_Z11CheckBrickXaah+0x686>
10008530:	e54d      	b.n	10007fce <_Z11CheckBrickXaah+0x122>
10008532:	e54b      	b.n	10007fcc <_Z11CheckBrickXaah+0x120>
				if ((y < 1) || (y >= MAPH-1))
10008534:	2b11      	cmp	r3, #17
10008536:	d800      	bhi.n	1000853a <_Z11CheckBrickXaah+0x68e>
10008538:	e513      	b.n	10007f62 <_Z11CheckBrickXaah+0xb6>
			b = *s++;
1000853a:	1d28      	adds	r0, r5, #4
1000853c:	4681      	mov	r9, r0
1000853e:	78e8      	ldrb	r0, [r5, #3]
10008540:	900d      	str	r0, [sp, #52]	; 0x34
			if (b != 0)
10008542:	2800      	cmp	r0, #0
10008544:	d100      	bne.n	10008548 <_Z11CheckBrickXaah+0x69c>
10008546:	e589      	b.n	1000805c <_Z11CheckBrickXaah+0x1b0>
10008548:	e587      	b.n	1000805a <_Z11CheckBrickXaah+0x1ae>
					if (*d != TILE_EMPTY) ok = False;
1000854a:	7ed4      	ldrb	r4, [r2, #27]
1000854c:	46a2      	mov	sl, r4
1000854e:	2408      	movs	r4, #8
10008550:	4264      	negs	r4, r4
10008552:	46a3      	mov	fp, r4
10008554:	44da      	add	sl, fp
10008556:	4656      	mov	r6, sl
10008558:	4274      	negs	r4, r6
1000855a:	4174      	adcs	r4, r6
1000855c:	4264      	negs	r4, r4
1000855e:	4020      	ands	r0, r4
			if (b != 0)
10008560:	9c08      	ldr	r4, [sp, #32]
10008562:	2c00      	cmp	r4, #0
10008564:	d000      	beq.n	10008568 <_Z11CheckBrickXaah+0x6bc>
10008566:	e6e5      	b.n	10008334 <_Z11CheckBrickXaah+0x488>
10008568:	2f00      	cmp	r7, #0
1000856a:	d000      	beq.n	1000856e <_Z11CheckBrickXaah+0x6c2>
1000856c:	e6f0      	b.n	10008350 <_Z11CheckBrickXaah+0x4a4>
1000856e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
10008570:	2c00      	cmp	r4, #0
10008572:	d000      	beq.n	10008576 <_Z11CheckBrickXaah+0x6ca>
10008574:	e6fb      	b.n	1000836e <_Z11CheckBrickXaah+0x4c2>
10008576:	e5fc      	b.n	10008172 <_Z11CheckBrickXaah+0x2c6>
10008578:	78ac      	ldrb	r4, [r5, #2]
1000857a:	2c00      	cmp	r4, #0
1000857c:	d100      	bne.n	10008580 <_Z11CheckBrickXaah+0x6d4>
1000857e:	e628      	b.n	100081d2 <_Z11CheckBrickXaah+0x326>
				if ((y < 1) || (y >= MAPH-1))
10008580:	9c01      	ldr	r4, [sp, #4]
10008582:	2c11      	cmp	r4, #17
10008584:	d900      	bls.n	10008588 <_Z11CheckBrickXaah+0x6dc>
10008586:	e71e      	b.n	100083c6 <_Z11CheckBrickXaah+0x51a>
					if (*d != TILE_EMPTY) ok = False;
10008588:	2453      	movs	r4, #83	; 0x53
1000858a:	5d14      	ldrb	r4, [r2, r4]
1000858c:	2c08      	cmp	r4, #8
1000858e:	d000      	beq.n	10008592 <_Z11CheckBrickXaah+0x6e6>
10008590:	e719      	b.n	100083c6 <_Z11CheckBrickXaah+0x51a>
			if (b != 0)
10008592:	78ec      	ldrb	r4, [r5, #3]
10008594:	2c00      	cmp	r4, #0
10008596:	d100      	bne.n	1000859a <_Z11CheckBrickXaah+0x6ee>
10008598:	e627      	b.n	100081ea <_Z11CheckBrickXaah+0x33e>
1000859a:	e621      	b.n	100081e0 <_Z11CheckBrickXaah+0x334>
					if (*d != TILE_EMPTY) ok = False;
1000859c:	2451      	movs	r4, #81	; 0x51
1000859e:	5d14      	ldrb	r4, [r2, r4]
100085a0:	46a2      	mov	sl, r4
100085a2:	2408      	movs	r4, #8
100085a4:	4264      	negs	r4, r4
100085a6:	46a3      	mov	fp, r4
100085a8:	44da      	add	sl, fp
100085aa:	4656      	mov	r6, sl
100085ac:	4274      	negs	r4, r6
100085ae:	4174      	adcs	r4, r6
100085b0:	4264      	negs	r4, r4
100085b2:	4020      	ands	r0, r4
			if (b != 0)
100085b4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
100085b6:	2c00      	cmp	r4, #0
100085b8:	d000      	beq.n	100085bc <_Z11CheckBrickXaah+0x710>
100085ba:	e6fe      	b.n	100083ba <_Z11CheckBrickXaah+0x50e>
100085bc:	78ac      	ldrb	r4, [r5, #2]
100085be:	2c00      	cmp	r4, #0
100085c0:	d1e2      	bne.n	10008588 <_Z11CheckBrickXaah+0x6dc>
100085c2:	e7e6      	b.n	10008592 <_Z11CheckBrickXaah+0x6e6>
					ok = False;
100085c4:	2000      	movs	r0, #0
100085c6:	e5ad      	b.n	10008124 <_Z11CheckBrickXaah+0x278>
			if (b != 0)
100085c8:	78a5      	ldrb	r5, [r4, #2]
100085ca:	9507      	str	r5, [sp, #28]
100085cc:	2d00      	cmp	r5, #0
100085ce:	d100      	bne.n	100085d2 <_Z11CheckBrickXaah+0x726>
100085d0:	e49b      	b.n	10007f0a <_Z11CheckBrickXaah+0x5e>
100085d2:	e68d      	b.n	100082f0 <_Z11CheckBrickXaah+0x444>
100085d4:	464c      	mov	r4, r9
100085d6:	78a4      	ldrb	r4, [r4, #2]
100085d8:	46a4      	mov	ip, r4
100085da:	2c00      	cmp	r4, #0
100085dc:	d100      	bne.n	100085e0 <_Z11CheckBrickXaah+0x734>
100085de:	e56d      	b.n	100080bc <_Z11CheckBrickXaah+0x210>
100085e0:	e564      	b.n	100080ac <_Z11CheckBrickXaah+0x200>
100085e2:	78af      	ldrb	r7, [r5, #2]
100085e4:	2f00      	cmp	r7, #0
100085e6:	d100      	bne.n	100085ea <_Z11CheckBrickXaah+0x73e>
100085e8:	e4c6      	b.n	10007f78 <_Z11CheckBrickXaah+0xcc>
100085ea:	e4ba      	b.n	10007f62 <_Z11CheckBrickXaah+0xb6>
					if (*d != TILE_EMPTY) ok = False;
100085ec:	7854      	ldrb	r4, [r2, #1]
100085ee:	46a2      	mov	sl, r4
100085f0:	2408      	movs	r4, #8
100085f2:	4264      	negs	r4, r4
100085f4:	46a3      	mov	fp, r4
100085f6:	44da      	add	sl, fp
100085f8:	4656      	mov	r6, sl
100085fa:	4274      	negs	r4, r6
100085fc:	4174      	adcs	r4, r6
100085fe:	4264      	negs	r4, r4
10008600:	4020      	ands	r0, r4
			if (b != 0)
10008602:	9c07      	ldr	r4, [sp, #28]
10008604:	2c00      	cmp	r4, #0
10008606:	d100      	bne.n	1000860a <_Z11CheckBrickXaah+0x75e>
10008608:	e59c      	b.n	10008144 <_Z11CheckBrickXaah+0x298>
					if (*d != TILE_EMPTY) ok = False;
1000860a:	7894      	ldrb	r4, [r2, #2]
1000860c:	46a2      	mov	sl, r4
1000860e:	2408      	movs	r4, #8
10008610:	4264      	negs	r4, r4
10008612:	46a3      	mov	fp, r4
10008614:	44da      	add	sl, fp
10008616:	4656      	mov	r6, sl
10008618:	4274      	negs	r4, r6
1000861a:	4174      	adcs	r4, r6
1000861c:	4264      	negs	r4, r4
1000861e:	4020      	ands	r0, r4
			if (b != 0)
10008620:	9c06      	ldr	r4, [sp, #24]
10008622:	2c00      	cmp	r4, #0
10008624:	d100      	bne.n	10008628 <_Z11CheckBrickXaah+0x77c>
10008626:	e595      	b.n	10008154 <_Z11CheckBrickXaah+0x2a8>
					if (*d != TILE_EMPTY) ok = False;
10008628:	78d4      	ldrb	r4, [r2, #3]
1000862a:	46a2      	mov	sl, r4
1000862c:	2408      	movs	r4, #8
1000862e:	4264      	negs	r4, r4
10008630:	46a3      	mov	fp, r4
10008632:	44da      	add	sl, fp
10008634:	4656      	mov	r6, sl
10008636:	4274      	negs	r4, r6
10008638:	4174      	adcs	r4, r6
1000863a:	4264      	negs	r4, r4
1000863c:	4020      	ands	r0, r4
1000863e:	e589      	b.n	10008154 <_Z11CheckBrickXaah+0x2a8>
10008640:	7f16      	ldrb	r6, [r2, #28]
10008642:	3e08      	subs	r6, #8
10008644:	0034      	movs	r4, r6
10008646:	4266      	negs	r6, r4
10008648:	4166      	adcs	r6, r4
1000864a:	4276      	negs	r6, r6
1000864c:	4030      	ands	r0, r6
			if (b != 0)
1000864e:	2f00      	cmp	r7, #0
10008650:	d100      	bne.n	10008654 <_Z11CheckBrickXaah+0x7a8>
10008652:	e233      	b.n	10008abc <_Z11CheckBrickXaah+0xc10>
					if (*d != TILE_EMPTY) ok = False;
10008654:	7f56      	ldrb	r6, [r2, #29]
10008656:	3e08      	subs	r6, #8
10008658:	0034      	movs	r4, r6
1000865a:	4266      	negs	r6, r4
1000865c:	4166      	adcs	r6, r4
			if (b != 0)
1000865e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
					if (*d != TILE_EMPTY) ok = False;
10008660:	4276      	negs	r6, r6
10008662:	4030      	ands	r0, r6
			if (b != 0)
10008664:	2c00      	cmp	r4, #0
10008666:	d006      	beq.n	10008676 <_Z11CheckBrickXaah+0x7ca>
					if (*d != TILE_EMPTY) ok = False;
10008668:	7f96      	ldrb	r6, [r2, #30]
1000866a:	3e08      	subs	r6, #8
1000866c:	0034      	movs	r4, r6
1000866e:	4266      	negs	r6, r4
10008670:	4166      	adcs	r6, r4
10008672:	4276      	negs	r6, r6
10008674:	4030      	ands	r0, r6
			if (b != 0)
10008676:	4644      	mov	r4, r8
10008678:	2c00      	cmp	r4, #0
1000867a:	d100      	bne.n	1000867e <_Z11CheckBrickXaah+0x7d2>
1000867c:	e202      	b.n	10008a84 <_Z11CheckBrickXaah+0xbd8>
				if ((y < 1) || (y >= MAPH-1))
1000867e:	9c00      	ldr	r4, [sp, #0]
10008680:	2c11      	cmp	r4, #17
10008682:	d900      	bls.n	10008686 <_Z11CheckBrickXaah+0x7da>
10008684:	e262      	b.n	10008b4c <_Z11CheckBrickXaah+0xca0>
					if (*d != TILE_EMPTY) ok = False;
10008686:	2636      	movs	r6, #54	; 0x36
10008688:	5d96      	ldrb	r6, [r2, r6]
1000868a:	3e08      	subs	r6, #8
1000868c:	0034      	movs	r4, r6
1000868e:	4266      	negs	r6, r4
10008690:	4166      	adcs	r6, r4
			if (b != 0)
10008692:	9c09      	ldr	r4, [sp, #36]	; 0x24
					if (*d != TILE_EMPTY) ok = False;
10008694:	4276      	negs	r6, r6
10008696:	4030      	ands	r0, r6
			if (b != 0)
10008698:	2c00      	cmp	r4, #0
1000869a:	d109      	bne.n	100086b0 <_Z11CheckBrickXaah+0x804>
1000869c:	4664      	mov	r4, ip
1000869e:	2c00      	cmp	r4, #0
100086a0:	d112      	bne.n	100086c8 <_Z11CheckBrickXaah+0x81c>
100086a2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
100086a4:	2c00      	cmp	r4, #0
100086a6:	d11a      	bne.n	100086de <_Z11CheckBrickXaah+0x832>
100086a8:	e021      	b.n	100086ee <_Z11CheckBrickXaah+0x842>
100086aa:	46c0      	nop			; (mov r8, r8)
100086ac:	2000327c 	.word	0x2000327c
					if (*d != TILE_EMPTY) ok = False;
100086b0:	2637      	movs	r6, #55	; 0x37
100086b2:	5d96      	ldrb	r6, [r2, r6]
100086b4:	3e08      	subs	r6, #8
100086b6:	0034      	movs	r4, r6
100086b8:	4266      	negs	r6, r4
100086ba:	4166      	adcs	r6, r4
			if (b != 0)
100086bc:	4664      	mov	r4, ip
					if (*d != TILE_EMPTY) ok = False;
100086be:	4276      	negs	r6, r6
100086c0:	4030      	ands	r0, r6
			if (b != 0)
100086c2:	2c00      	cmp	r4, #0
100086c4:	d100      	bne.n	100086c8 <_Z11CheckBrickXaah+0x81c>
100086c6:	e1e7      	b.n	10008a98 <_Z11CheckBrickXaah+0xbec>
					if (*d != TILE_EMPTY) ok = False;
100086c8:	2638      	movs	r6, #56	; 0x38
100086ca:	5d96      	ldrb	r6, [r2, r6]
100086cc:	3e08      	subs	r6, #8
100086ce:	0034      	movs	r4, r6
100086d0:	4266      	negs	r6, r4
100086d2:	4166      	adcs	r6, r4
			if (b != 0)
100086d4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
					if (*d != TILE_EMPTY) ok = False;
100086d6:	4276      	negs	r6, r6
100086d8:	4030      	ands	r0, r6
			if (b != 0)
100086da:	2c00      	cmp	r4, #0
100086dc:	d007      	beq.n	100086ee <_Z11CheckBrickXaah+0x842>
					if (*d != TILE_EMPTY) ok = False;
100086de:	2639      	movs	r6, #57	; 0x39
100086e0:	5d96      	ldrb	r6, [r2, r6]
100086e2:	3e08      	subs	r6, #8
100086e4:	0034      	movs	r4, r6
100086e6:	4266      	negs	r6, r4
100086e8:	4166      	adcs	r6, r4
100086ea:	4276      	negs	r6, r6
100086ec:	4030      	ands	r0, r6
			if (b != 0)
100086ee:	464c      	mov	r4, r9
100086f0:	2c00      	cmp	r4, #0
100086f2:	d100      	bne.n	100086f6 <_Z11CheckBrickXaah+0x84a>
100086f4:	e1b4      	b.n	10008a60 <_Z11CheckBrickXaah+0xbb4>
				if ((y < 1) || (y >= MAPH-1))
100086f6:	9c01      	ldr	r4, [sp, #4]
100086f8:	2c11      	cmp	r4, #17
100086fa:	d900      	bls.n	100086fe <_Z11CheckBrickXaah+0x852>
100086fc:	e196      	b.n	10008a2c <_Z11CheckBrickXaah+0xb80>
					if (*d != TILE_EMPTY) ok = False;
100086fe:	2651      	movs	r6, #81	; 0x51
10008700:	5d96      	ldrb	r6, [r2, r6]
10008702:	3e08      	subs	r6, #8
10008704:	0034      	movs	r4, r6
10008706:	4266      	negs	r6, r4
10008708:	4166      	adcs	r6, r4
			if (b != 0)
1000870a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
					if (*d != TILE_EMPTY) ok = False;
1000870c:	4276      	negs	r6, r6
1000870e:	4030      	ands	r0, r6
			if (b != 0)
10008710:	2c00      	cmp	r4, #0
10008712:	d000      	beq.n	10008716 <_Z11CheckBrickXaah+0x86a>
10008714:	e1ac      	b.n	10008a70 <_Z11CheckBrickXaah+0xbc4>
10008716:	78ae      	ldrb	r6, [r5, #2]
10008718:	2e00      	cmp	r6, #0
1000871a:	d100      	bne.n	1000871e <_Z11CheckBrickXaah+0x872>
1000871c:	e17c      	b.n	10008a18 <_Z11CheckBrickXaah+0xb6c>
					if (*d != TILE_EMPTY) ok = False;
1000871e:	2653      	movs	r6, #83	; 0x53
10008720:	5d96      	ldrb	r6, [r2, r6]
10008722:	2e08      	cmp	r6, #8
10008724:	d100      	bne.n	10008728 <_Z11CheckBrickXaah+0x87c>
10008726:	e177      	b.n	10008a18 <_Z11CheckBrickXaah+0xb6c>
	if (CheckBrickSave(x-2, y, brick)) return True;
10008728:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	u8* d = &Board[x + y*MAPW];
1000872a:	48cb      	ldr	r0, [pc, #812]	; (10008a58 <_Z11CheckBrickXaah+0xbac>)
	if (CheckBrickSave(x-2, y, brick)) return True;
1000872c:	3a02      	subs	r2, #2
1000872e:	b252      	sxtb	r2, r2
10008730:	4693      	mov	fp, r2
	u8* d = &Board[x + y*MAPW];
10008732:	4682      	mov	sl, r0
10008734:	9a02      	ldr	r2, [sp, #8]
	Bool ok = True;
10008736:	2001      	movs	r0, #1
	u8* d = &Board[x + y*MAPW];
10008738:	445a      	add	r2, fp
1000873a:	4492      	add	sl, r2
			if (b != 0)
1000873c:	9a03      	ldr	r2, [sp, #12]
1000873e:	2a00      	cmp	r2, #0
10008740:	d100      	bne.n	10008744 <_Z11CheckBrickXaah+0x898>
10008742:	e1e7      	b.n	10008b14 <_Z11CheckBrickXaah+0xc68>
				if ((y < 1) || (y >= MAPH-1))
10008744:	1e5a      	subs	r2, r3, #1
10008746:	2a11      	cmp	r2, #17
10008748:	d900      	bls.n	1000874c <_Z11CheckBrickXaah+0x8a0>
1000874a:	e1e2      	b.n	10008b12 <_Z11CheckBrickXaah+0xc66>
					if (*d != TILE_EMPTY) ok = False;
1000874c:	4652      	mov	r2, sl
1000874e:	7810      	ldrb	r0, [r2, #0]
10008750:	3808      	subs	r0, #8
10008752:	4242      	negs	r2, r0
10008754:	4150      	adcs	r0, r2
			if (b != 0)
10008756:	9a05      	ldr	r2, [sp, #20]
					if (*d != TILE_EMPTY) ok = False;
10008758:	b2c0      	uxtb	r0, r0
			if (b != 0)
1000875a:	2a00      	cmp	r2, #0
1000875c:	d100      	bne.n	10008760 <_Z11CheckBrickXaah+0x8b4>
1000875e:	e12e      	b.n	100089be <_Z11CheckBrickXaah+0xb12>
					if (*d != TILE_EMPTY) ok = False;
10008760:	4652      	mov	r2, sl
10008762:	7852      	ldrb	r2, [r2, #1]
10008764:	3a08      	subs	r2, #8
10008766:	4256      	negs	r6, r2
10008768:	4172      	adcs	r2, r6
1000876a:	4252      	negs	r2, r2
1000876c:	4010      	ands	r0, r2
			if (b != 0)
1000876e:	9a07      	ldr	r2, [sp, #28]
10008770:	2a00      	cmp	r2, #0
10008772:	d000      	beq.n	10008776 <_Z11CheckBrickXaah+0x8ca>
10008774:	e127      	b.n	100089c6 <_Z11CheckBrickXaah+0xb1a>
10008776:	9a06      	ldr	r2, [sp, #24]
10008778:	2a00      	cmp	r2, #0
1000877a:	d004      	beq.n	10008786 <_Z11CheckBrickXaah+0x8da>
				if ((y < 1) || (y >= MAPH-1))
1000877c:	1e5a      	subs	r2, r3, #1
1000877e:	2a11      	cmp	r2, #17
10008780:	d800      	bhi.n	10008784 <_Z11CheckBrickXaah+0x8d8>
10008782:	e12b      	b.n	100089dc <_Z11CheckBrickXaah+0xb30>
					ok = False;
10008784:	2000      	movs	r0, #0
			if (b != 0)
10008786:	9a04      	ldr	r2, [sp, #16]
10008788:	2a00      	cmp	r2, #0
1000878a:	d01a      	beq.n	100087c2 <_Z11CheckBrickXaah+0x916>
				if ((y < 1) || (y >= MAPH-1))
1000878c:	2b11      	cmp	r3, #17
1000878e:	d900      	bls.n	10008792 <_Z11CheckBrickXaah+0x8e6>
10008790:	e12c      	b.n	100089ec <_Z11CheckBrickXaah+0xb40>
					if (*d != TILE_EMPTY) ok = False;
10008792:	4652      	mov	r2, sl
10008794:	7ed2      	ldrb	r2, [r2, #27]
10008796:	3a08      	subs	r2, #8
10008798:	4256      	negs	r6, r2
1000879a:	4172      	adcs	r2, r6
1000879c:	4252      	negs	r2, r2
1000879e:	4010      	ands	r0, r2
			if (b != 0)
100087a0:	9a08      	ldr	r2, [sp, #32]
100087a2:	2a00      	cmp	r2, #0
100087a4:	d114      	bne.n	100087d0 <_Z11CheckBrickXaah+0x924>
100087a6:	2f00      	cmp	r7, #0
100087a8:	d000      	beq.n	100087ac <_Z11CheckBrickXaah+0x900>
100087aa:	e129      	b.n	10008a00 <_Z11CheckBrickXaah+0xb54>
100087ac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
100087ae:	2a00      	cmp	r2, #0
100087b0:	d01e      	beq.n	100087f0 <_Z11CheckBrickXaah+0x944>
					if (*d != TILE_EMPTY) ok = False;
100087b2:	4652      	mov	r2, sl
100087b4:	7f92      	ldrb	r2, [r2, #30]
100087b6:	3a08      	subs	r2, #8
100087b8:	4256      	negs	r6, r2
100087ba:	4172      	adcs	r2, r6
100087bc:	4252      	negs	r2, r2
100087be:	4010      	ands	r0, r2
100087c0:	e016      	b.n	100087f0 <_Z11CheckBrickXaah+0x944>
			if (b != 0)
100087c2:	9a08      	ldr	r2, [sp, #32]
100087c4:	2a00      	cmp	r2, #0
100087c6:	d100      	bne.n	100087ca <_Z11CheckBrickXaah+0x91e>
100087c8:	e114      	b.n	100089f4 <_Z11CheckBrickXaah+0xb48>
				if ((y < 1) || (y >= MAPH-1))
100087ca:	2b11      	cmp	r3, #17
100087cc:	d900      	bls.n	100087d0 <_Z11CheckBrickXaah+0x924>
100087ce:	e1d2      	b.n	10008b76 <_Z11CheckBrickXaah+0xcca>
					if (*d != TILE_EMPTY) ok = False;
100087d0:	4652      	mov	r2, sl
100087d2:	7f12      	ldrb	r2, [r2, #28]
100087d4:	3a08      	subs	r2, #8
100087d6:	4256      	negs	r6, r2
100087d8:	4172      	adcs	r2, r6
100087da:	4252      	negs	r2, r2
100087dc:	4010      	ands	r0, r2
			if (b != 0)
100087de:	2f00      	cmp	r7, #0
100087e0:	d000      	beq.n	100087e4 <_Z11CheckBrickXaah+0x938>
100087e2:	e10d      	b.n	10008a00 <_Z11CheckBrickXaah+0xb54>
100087e4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
100087e6:	2a00      	cmp	r2, #0
100087e8:	d002      	beq.n	100087f0 <_Z11CheckBrickXaah+0x944>
				if ((y < 1) || (y >= MAPH-1))
100087ea:	2b11      	cmp	r3, #17
100087ec:	d9e1      	bls.n	100087b2 <_Z11CheckBrickXaah+0x906>
					ok = False;
100087ee:	2000      	movs	r0, #0
			if (b != 0)
100087f0:	4642      	mov	r2, r8
100087f2:	2a00      	cmp	r2, #0
100087f4:	d01e      	beq.n	10008834 <_Z11CheckBrickXaah+0x988>
				if ((y < 1) || (y >= MAPH-1))
100087f6:	9a00      	ldr	r2, [sp, #0]
100087f8:	2a11      	cmp	r2, #17
100087fa:	d900      	bls.n	100087fe <_Z11CheckBrickXaah+0x952>
100087fc:	e0c6      	b.n	1000898c <_Z11CheckBrickXaah+0xae0>
					if (*d != TILE_EMPTY) ok = False;
100087fe:	2236      	movs	r2, #54	; 0x36
10008800:	4654      	mov	r4, sl
10008802:	5ca2      	ldrb	r2, [r4, r2]
10008804:	3a08      	subs	r2, #8
10008806:	4256      	negs	r6, r2
10008808:	4172      	adcs	r2, r6
1000880a:	4252      	negs	r2, r2
1000880c:	4010      	ands	r0, r2
			if (b != 0)
1000880e:	9a09      	ldr	r2, [sp, #36]	; 0x24
10008810:	2a00      	cmp	r2, #0
10008812:	d117      	bne.n	10008844 <_Z11CheckBrickXaah+0x998>
10008814:	4662      	mov	r2, ip
10008816:	2a00      	cmp	r2, #0
10008818:	d000      	beq.n	1000881c <_Z11CheckBrickXaah+0x970>
1000881a:	e0c3      	b.n	100089a4 <_Z11CheckBrickXaah+0xaf8>
1000881c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
1000881e:	2a00      	cmp	r2, #0
10008820:	d023      	beq.n	1000886a <_Z11CheckBrickXaah+0x9be>
					if (*d != TILE_EMPTY) ok = False;
10008822:	2239      	movs	r2, #57	; 0x39
10008824:	4654      	mov	r4, sl
10008826:	5ca2      	ldrb	r2, [r4, r2]
10008828:	3a08      	subs	r2, #8
1000882a:	4256      	negs	r6, r2
1000882c:	4172      	adcs	r2, r6
1000882e:	4252      	negs	r2, r2
10008830:	4010      	ands	r0, r2
10008832:	e01a      	b.n	1000886a <_Z11CheckBrickXaah+0x9be>
			if (b != 0)
10008834:	9a09      	ldr	r2, [sp, #36]	; 0x24
10008836:	2a00      	cmp	r2, #0
10008838:	d100      	bne.n	1000883c <_Z11CheckBrickXaah+0x990>
1000883a:	e0ab      	b.n	10008994 <_Z11CheckBrickXaah+0xae8>
				if ((y < 1) || (y >= MAPH-1))
1000883c:	9a00      	ldr	r2, [sp, #0]
1000883e:	2a11      	cmp	r2, #17
10008840:	d900      	bls.n	10008844 <_Z11CheckBrickXaah+0x998>
10008842:	e19c      	b.n	10008b7e <_Z11CheckBrickXaah+0xcd2>
					if (*d != TILE_EMPTY) ok = False;
10008844:	2237      	movs	r2, #55	; 0x37
10008846:	4654      	mov	r4, sl
10008848:	5ca2      	ldrb	r2, [r4, r2]
1000884a:	3a08      	subs	r2, #8
1000884c:	4256      	negs	r6, r2
1000884e:	4172      	adcs	r2, r6
10008850:	4252      	negs	r2, r2
10008852:	4010      	ands	r0, r2
			if (b != 0)
10008854:	4662      	mov	r2, ip
10008856:	2a00      	cmp	r2, #0
10008858:	d000      	beq.n	1000885c <_Z11CheckBrickXaah+0x9b0>
1000885a:	e0a3      	b.n	100089a4 <_Z11CheckBrickXaah+0xaf8>
1000885c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
1000885e:	2a00      	cmp	r2, #0
10008860:	d003      	beq.n	1000886a <_Z11CheckBrickXaah+0x9be>
				if ((y < 1) || (y >= MAPH-1))
10008862:	9a00      	ldr	r2, [sp, #0]
10008864:	2a11      	cmp	r2, #17
10008866:	d9dc      	bls.n	10008822 <_Z11CheckBrickXaah+0x976>
					ok = False;
10008868:	2000      	movs	r0, #0
			if (b != 0)
1000886a:	464a      	mov	r2, r9
1000886c:	2a00      	cmp	r2, #0
1000886e:	d100      	bne.n	10008872 <_Z11CheckBrickXaah+0x9c6>
10008870:	e178      	b.n	10008b64 <_Z11CheckBrickXaah+0xcb8>
				if ((y < 1) || (y >= MAPH-1))
10008872:	9a01      	ldr	r2, [sp, #4]
10008874:	2a11      	cmp	r2, #17
10008876:	d900      	bls.n	1000887a <_Z11CheckBrickXaah+0x9ce>
10008878:	e238      	b.n	10008cec <_Z11CheckBrickXaah+0xe40>
					if (*d != TILE_EMPTY) ok = False;
1000887a:	2251      	movs	r2, #81	; 0x51
1000887c:	4654      	mov	r4, sl
1000887e:	5ca2      	ldrb	r2, [r4, r2]
10008880:	3a08      	subs	r2, #8
10008882:	4256      	negs	r6, r2
10008884:	4172      	adcs	r2, r6
10008886:	4252      	negs	r2, r2
10008888:	4010      	ands	r0, r2
			if (b != 0)
1000888a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1000888c:	2a00      	cmp	r2, #0
1000888e:	d100      	bne.n	10008892 <_Z11CheckBrickXaah+0x9e6>
10008890:	e282      	b.n	10008d98 <_Z11CheckBrickXaah+0xeec>
					if (*d != TILE_EMPTY) ok = False;
10008892:	2252      	movs	r2, #82	; 0x52
10008894:	4654      	mov	r4, sl
10008896:	5ca2      	ldrb	r2, [r4, r2]
10008898:	2a08      	cmp	r2, #8
1000889a:	d100      	bne.n	1000889e <_Z11CheckBrickXaah+0x9f2>
1000889c:	e28c      	b.n	10008db8 <_Z11CheckBrickXaah+0xf0c>
	return CheckBrickSave(x+2, y, brick);
1000889e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
	u8* d = &Board[x + y*MAPW];
100088a0:	486d      	ldr	r0, [pc, #436]	; (10008a58 <_Z11CheckBrickXaah+0xbac>)
	return CheckBrickSave(x+2, y, brick);
100088a2:	3602      	adds	r6, #2
100088a4:	b272      	sxtb	r2, r6
100088a6:	4693      	mov	fp, r2
	u8* d = &Board[x + y*MAPW];
100088a8:	4682      	mov	sl, r0
100088aa:	9a02      	ldr	r2, [sp, #8]
			if (b != 0)
100088ac:	9803      	ldr	r0, [sp, #12]
	u8* d = &Board[x + y*MAPW];
100088ae:	445a      	add	r2, fp
100088b0:	4452      	add	r2, sl
			if (b != 0)
100088b2:	2800      	cmp	r0, #0
100088b4:	d000      	beq.n	100088b8 <_Z11CheckBrickXaah+0xa0c>
100088b6:	e17d      	b.n	10008bb4 <_Z11CheckBrickXaah+0xd08>
	Bool ok = True;
100088b8:	3001      	adds	r0, #1
			if (b != 0)
100088ba:	9c05      	ldr	r4, [sp, #20]
100088bc:	2c00      	cmp	r4, #0
100088be:	d004      	beq.n	100088ca <_Z11CheckBrickXaah+0xa1e>
				if ((y < 1) || (y >= MAPH-1))
100088c0:	1e5e      	subs	r6, r3, #1
100088c2:	2e11      	cmp	r6, #17
100088c4:	d800      	bhi.n	100088c8 <_Z11CheckBrickXaah+0xa1c>
100088c6:	e26b      	b.n	10008da0 <_Z11CheckBrickXaah+0xef4>
					ok = False;
100088c8:	2000      	movs	r0, #0
			if (b != 0)
100088ca:	9c07      	ldr	r4, [sp, #28]
100088cc:	2c00      	cmp	r4, #0
100088ce:	d004      	beq.n	100088da <_Z11CheckBrickXaah+0xa2e>
				if ((y < 1) || (y >= MAPH-1))
100088d0:	1e5e      	subs	r6, r3, #1
100088d2:	2e11      	cmp	r6, #17
100088d4:	d800      	bhi.n	100088d8 <_Z11CheckBrickXaah+0xa2c>
100088d6:	e17e      	b.n	10008bd6 <_Z11CheckBrickXaah+0xd2a>
					ok = False;
100088d8:	2000      	movs	r0, #0
			if (b != 0)
100088da:	9c06      	ldr	r4, [sp, #24]
100088dc:	2c00      	cmp	r4, #0
100088de:	d004      	beq.n	100088ea <_Z11CheckBrickXaah+0xa3e>
				if ((y < 1) || (y >= MAPH-1))
100088e0:	1e5e      	subs	r6, r3, #1
100088e2:	2e11      	cmp	r6, #17
100088e4:	d800      	bhi.n	100088e8 <_Z11CheckBrickXaah+0xa3c>
100088e6:	e181      	b.n	10008bec <_Z11CheckBrickXaah+0xd40>
					ok = False;
100088e8:	2000      	movs	r0, #0
			if (b != 0)
100088ea:	9c04      	ldr	r4, [sp, #16]
100088ec:	2c00      	cmp	r4, #0
100088ee:	d100      	bne.n	100088f2 <_Z11CheckBrickXaah+0xa46>
100088f0:	e184      	b.n	10008bfc <_Z11CheckBrickXaah+0xd50>
				if ((y < 1) || (y >= MAPH-1))
100088f2:	2b11      	cmp	r3, #17
100088f4:	d900      	bls.n	100088f8 <_Z11CheckBrickXaah+0xa4c>
100088f6:	e1a0      	b.n	10008c3a <_Z11CheckBrickXaah+0xd8e>
					if (*d != TILE_EMPTY) ok = False;
100088f8:	7ed6      	ldrb	r6, [r2, #27]
100088fa:	3e08      	subs	r6, #8
100088fc:	0034      	movs	r4, r6
100088fe:	4266      	negs	r6, r4
10008900:	4166      	adcs	r6, r4
			if (b != 0)
10008902:	9c08      	ldr	r4, [sp, #32]
					if (*d != TILE_EMPTY) ok = False;
10008904:	4276      	negs	r6, r6
10008906:	4030      	ands	r0, r6
			if (b != 0)
10008908:	2c00      	cmp	r4, #0
1000890a:	d000      	beq.n	1000890e <_Z11CheckBrickXaah+0xa62>
1000890c:	e17b      	b.n	10008c06 <_Z11CheckBrickXaah+0xd5a>
1000890e:	2f00      	cmp	r7, #0
10008910:	d000      	beq.n	10008914 <_Z11CheckBrickXaah+0xa68>
10008912:	e181      	b.n	10008c18 <_Z11CheckBrickXaah+0xd6c>
10008914:	9b0d      	ldr	r3, [sp, #52]	; 0x34
10008916:	2b00      	cmp	r3, #0
10008918:	d000      	beq.n	1000891c <_Z11CheckBrickXaah+0xa70>
1000891a:	e187      	b.n	10008c2c <_Z11CheckBrickXaah+0xd80>
1000891c:	4643      	mov	r3, r8
1000891e:	2b00      	cmp	r3, #0
10008920:	d100      	bne.n	10008924 <_Z11CheckBrickXaah+0xa78>
10008922:	e19a      	b.n	10008c5a <_Z11CheckBrickXaah+0xdae>
				if ((y < 1) || (y >= MAPH-1))
10008924:	9b00      	ldr	r3, [sp, #0]
10008926:	2b11      	cmp	r3, #17
10008928:	d900      	bls.n	1000892c <_Z11CheckBrickXaah+0xa80>
1000892a:	e1b9      	b.n	10008ca0 <_Z11CheckBrickXaah+0xdf4>
					if (*d != TILE_EMPTY) ok = False;
1000892c:	2336      	movs	r3, #54	; 0x36
1000892e:	5cd3      	ldrb	r3, [r2, r3]
10008930:	3b08      	subs	r3, #8
10008932:	425e      	negs	r6, r3
10008934:	4173      	adcs	r3, r6
10008936:	425b      	negs	r3, r3
10008938:	4018      	ands	r0, r3
			if (b != 0)
1000893a:	9b09      	ldr	r3, [sp, #36]	; 0x24
1000893c:	2b00      	cmp	r3, #0
1000893e:	d000      	beq.n	10008942 <_Z11CheckBrickXaah+0xa96>
10008940:	e191      	b.n	10008c66 <_Z11CheckBrickXaah+0xdba>
10008942:	4663      	mov	r3, ip
10008944:	2b00      	cmp	r3, #0
10008946:	d000      	beq.n	1000894a <_Z11CheckBrickXaah+0xa9e>
10008948:	e197      	b.n	10008c7a <_Z11CheckBrickXaah+0xdce>
1000894a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1000894c:	2b00      	cmp	r3, #0
1000894e:	d000      	beq.n	10008952 <_Z11CheckBrickXaah+0xaa6>
10008950:	e19e      	b.n	10008c90 <_Z11CheckBrickXaah+0xde4>
10008952:	464b      	mov	r3, r9
10008954:	2b00      	cmp	r3, #0
10008956:	d100      	bne.n	1000895a <_Z11CheckBrickXaah+0xaae>
10008958:	e1b5      	b.n	10008cc6 <_Z11CheckBrickXaah+0xe1a>
				if ((y < 1) || (y >= MAPH-1))
1000895a:	9b01      	ldr	r3, [sp, #4]
1000895c:	2b11      	cmp	r3, #17
1000895e:	d800      	bhi.n	10008962 <_Z11CheckBrickXaah+0xab6>
10008960:	e202      	b.n	10008d68 <_Z11CheckBrickXaah+0xebc>
			if (b != 0)
10008962:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10008964:	2b00      	cmp	r3, #0
10008966:	d10e      	bne.n	10008986 <_Z11CheckBrickXaah+0xada>
			b = *s++;
10008968:	78a8      	ldrb	r0, [r5, #2]
			if (b != 0)
1000896a:	2800      	cmp	r0, #0
1000896c:	d10b      	bne.n	10008986 <_Z11CheckBrickXaah+0xada>
1000896e:	78eb      	ldrb	r3, [r5, #3]
10008970:	2b00      	cmp	r3, #0
10008972:	d100      	bne.n	10008976 <_Z11CheckBrickXaah+0xaca>
10008974:	e209      	b.n	10008d8a <_Z11CheckBrickXaah+0xede>
				if ((y < 1) || (y >= MAPH-1))
10008976:	9b01      	ldr	r3, [sp, #4]
10008978:	2b11      	cmp	r3, #17
1000897a:	d804      	bhi.n	10008986 <_Z11CheckBrickXaah+0xada>
					if (*d != TILE_EMPTY) ok = False;
1000897c:	2354      	movs	r3, #84	; 0x54
1000897e:	5cd3      	ldrb	r3, [r2, r3]
10008980:	2b08      	cmp	r3, #8
10008982:	d100      	bne.n	10008986 <_Z11CheckBrickXaah+0xada>
10008984:	e201      	b.n	10008d8a <_Z11CheckBrickXaah+0xede>
			if (b != 0)
10008986:	2000      	movs	r0, #0
10008988:	f7ff fb4e 	bl	10008028 <_Z11CheckBrickXaah+0x17c>
			b = *s++;
1000898c:	9a09      	ldr	r2, [sp, #36]	; 0x24
1000898e:	1e10      	subs	r0, r2, #0
			if (b != 0)
10008990:	d000      	beq.n	10008994 <_Z11CheckBrickXaah+0xae8>
10008992:	e0f4      	b.n	10008b7e <_Z11CheckBrickXaah+0xcd2>
10008994:	4662      	mov	r2, ip
10008996:	2a00      	cmp	r2, #0
10008998:	d100      	bne.n	1000899c <_Z11CheckBrickXaah+0xaf0>
1000899a:	e75f      	b.n	1000885c <_Z11CheckBrickXaah+0x9b0>
				if ((y < 1) || (y >= MAPH-1))
1000899c:	9a00      	ldr	r2, [sp, #0]
1000899e:	2a11      	cmp	r2, #17
100089a0:	d900      	bls.n	100089a4 <_Z11CheckBrickXaah+0xaf8>
100089a2:	e761      	b.n	10008868 <_Z11CheckBrickXaah+0x9bc>
					if (*d != TILE_EMPTY) ok = False;
100089a4:	2238      	movs	r2, #56	; 0x38
100089a6:	4654      	mov	r4, sl
100089a8:	5ca2      	ldrb	r2, [r4, r2]
100089aa:	3a08      	subs	r2, #8
100089ac:	4256      	negs	r6, r2
100089ae:	4172      	adcs	r2, r6
100089b0:	4252      	negs	r2, r2
100089b2:	4010      	ands	r0, r2
			if (b != 0)
100089b4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
100089b6:	2a00      	cmp	r2, #0
100089b8:	d000      	beq.n	100089bc <_Z11CheckBrickXaah+0xb10>
100089ba:	e732      	b.n	10008822 <_Z11CheckBrickXaah+0x976>
100089bc:	e755      	b.n	1000886a <_Z11CheckBrickXaah+0x9be>
100089be:	9a07      	ldr	r2, [sp, #28]
100089c0:	2a00      	cmp	r2, #0
100089c2:	d100      	bne.n	100089c6 <_Z11CheckBrickXaah+0xb1a>
100089c4:	e6d7      	b.n	10008776 <_Z11CheckBrickXaah+0x8ca>
					if (*d != TILE_EMPTY) ok = False;
100089c6:	4652      	mov	r2, sl
100089c8:	7892      	ldrb	r2, [r2, #2]
100089ca:	3a08      	subs	r2, #8
100089cc:	4256      	negs	r6, r2
100089ce:	4172      	adcs	r2, r6
100089d0:	4252      	negs	r2, r2
100089d2:	4010      	ands	r0, r2
			if (b != 0)
100089d4:	9a06      	ldr	r2, [sp, #24]
100089d6:	2a00      	cmp	r2, #0
100089d8:	d100      	bne.n	100089dc <_Z11CheckBrickXaah+0xb30>
100089da:	e6d4      	b.n	10008786 <_Z11CheckBrickXaah+0x8da>
					if (*d != TILE_EMPTY) ok = False;
100089dc:	4652      	mov	r2, sl
100089de:	78d2      	ldrb	r2, [r2, #3]
100089e0:	3a08      	subs	r2, #8
100089e2:	4256      	negs	r6, r2
100089e4:	4172      	adcs	r2, r6
100089e6:	4252      	negs	r2, r2
100089e8:	4010      	ands	r0, r2
100089ea:	e6cc      	b.n	10008786 <_Z11CheckBrickXaah+0x8da>
			b = *s++;
100089ec:	9a08      	ldr	r2, [sp, #32]
100089ee:	1e10      	subs	r0, r2, #0
			if (b != 0)
100089f0:	d000      	beq.n	100089f4 <_Z11CheckBrickXaah+0xb48>
100089f2:	e0c0      	b.n	10008b76 <_Z11CheckBrickXaah+0xcca>
100089f4:	2f00      	cmp	r7, #0
100089f6:	d100      	bne.n	100089fa <_Z11CheckBrickXaah+0xb4e>
100089f8:	e6f4      	b.n	100087e4 <_Z11CheckBrickXaah+0x938>
				if ((y < 1) || (y >= MAPH-1))
100089fa:	2b11      	cmp	r3, #17
100089fc:	d900      	bls.n	10008a00 <_Z11CheckBrickXaah+0xb54>
100089fe:	e6f6      	b.n	100087ee <_Z11CheckBrickXaah+0x942>
					if (*d != TILE_EMPTY) ok = False;
10008a00:	4652      	mov	r2, sl
10008a02:	7f52      	ldrb	r2, [r2, #29]
10008a04:	3a08      	subs	r2, #8
10008a06:	4256      	negs	r6, r2
10008a08:	4172      	adcs	r2, r6
10008a0a:	4252      	negs	r2, r2
10008a0c:	4010      	ands	r0, r2
			if (b != 0)
10008a0e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
10008a10:	2a00      	cmp	r2, #0
10008a12:	d000      	beq.n	10008a16 <_Z11CheckBrickXaah+0xb6a>
10008a14:	e6cd      	b.n	100087b2 <_Z11CheckBrickXaah+0x906>
10008a16:	e6eb      	b.n	100087f0 <_Z11CheckBrickXaah+0x944>
10008a18:	78ee      	ldrb	r6, [r5, #3]
10008a1a:	2e00      	cmp	r6, #0
10008a1c:	d115      	bne.n	10008a4a <_Z11CheckBrickXaah+0xb9e>
	if (res)
10008a1e:	2800      	cmp	r0, #0
10008a20:	d100      	bne.n	10008a24 <_Z11CheckBrickXaah+0xb78>
10008a22:	e681      	b.n	10008728 <_Z11CheckBrickXaah+0x87c>
		BrickX = x;
10008a24:	465a      	mov	r2, fp
10008a26:	4b0d      	ldr	r3, [pc, #52]	; (10008a5c <_Z11CheckBrickXaah+0xbb0>)
10008a28:	f7ff faf8 	bl	1000801c <_Z11CheckBrickXaah+0x170>
			if (b != 0)
10008a2c:	980a      	ldr	r0, [sp, #40]	; 0x28
10008a2e:	2800      	cmp	r0, #0
10008a30:	d000      	beq.n	10008a34 <_Z11CheckBrickXaah+0xb88>
10008a32:	e679      	b.n	10008728 <_Z11CheckBrickXaah+0x87c>
			b = *s++;
10008a34:	78a8      	ldrb	r0, [r5, #2]
			if (b != 0)
10008a36:	2800      	cmp	r0, #0
10008a38:	d000      	beq.n	10008a3c <_Z11CheckBrickXaah+0xb90>
10008a3a:	e675      	b.n	10008728 <_Z11CheckBrickXaah+0x87c>
10008a3c:	78ee      	ldrb	r6, [r5, #3]
10008a3e:	2e00      	cmp	r6, #0
10008a40:	d0ed      	beq.n	10008a1e <_Z11CheckBrickXaah+0xb72>
				if ((y < 1) || (y >= MAPH-1))
10008a42:	9c01      	ldr	r4, [sp, #4]
10008a44:	2c11      	cmp	r4, #17
10008a46:	d900      	bls.n	10008a4a <_Z11CheckBrickXaah+0xb9e>
10008a48:	e66e      	b.n	10008728 <_Z11CheckBrickXaah+0x87c>
					if (*d != TILE_EMPTY) ok = False;
10008a4a:	2654      	movs	r6, #84	; 0x54
10008a4c:	5d92      	ldrb	r2, [r2, r6]
10008a4e:	2a08      	cmp	r2, #8
10008a50:	d000      	beq.n	10008a54 <_Z11CheckBrickXaah+0xba8>
10008a52:	e669      	b.n	10008728 <_Z11CheckBrickXaah+0x87c>
10008a54:	e7e3      	b.n	10008a1e <_Z11CheckBrickXaah+0xb72>
10008a56:	46c0      	nop			; (mov r8, r8)
10008a58:	2000327c 	.word	0x2000327c
10008a5c:	20012765 	.word	0x20012765
			if (b != 0)
10008a60:	9c0a      	ldr	r4, [sp, #40]	; 0x28
10008a62:	2c00      	cmp	r4, #0
10008a64:	d100      	bne.n	10008a68 <_Z11CheckBrickXaah+0xbbc>
10008a66:	e08f      	b.n	10008b88 <_Z11CheckBrickXaah+0xcdc>
				if ((y < 1) || (y >= MAPH-1))
10008a68:	9c01      	ldr	r4, [sp, #4]
10008a6a:	2c11      	cmp	r4, #17
10008a6c:	d900      	bls.n	10008a70 <_Z11CheckBrickXaah+0xbc4>
10008a6e:	e65b      	b.n	10008728 <_Z11CheckBrickXaah+0x87c>
					if (*d != TILE_EMPTY) ok = False;
10008a70:	2652      	movs	r6, #82	; 0x52
10008a72:	5d96      	ldrb	r6, [r2, r6]
10008a74:	2e08      	cmp	r6, #8
10008a76:	d000      	beq.n	10008a7a <_Z11CheckBrickXaah+0xbce>
10008a78:	e656      	b.n	10008728 <_Z11CheckBrickXaah+0x87c>
			if (b != 0)
10008a7a:	78ae      	ldrb	r6, [r5, #2]
10008a7c:	2e00      	cmp	r6, #0
10008a7e:	d000      	beq.n	10008a82 <_Z11CheckBrickXaah+0xbd6>
10008a80:	e64d      	b.n	1000871e <_Z11CheckBrickXaah+0x872>
10008a82:	e7db      	b.n	10008a3c <_Z11CheckBrickXaah+0xb90>
10008a84:	9c09      	ldr	r4, [sp, #36]	; 0x24
10008a86:	2c00      	cmp	r4, #0
10008a88:	d063      	beq.n	10008b52 <_Z11CheckBrickXaah+0xca6>
				if ((y < 1) || (y >= MAPH-1))
10008a8a:	9c00      	ldr	r4, [sp, #0]
10008a8c:	2c11      	cmp	r4, #17
10008a8e:	d800      	bhi.n	10008a92 <_Z11CheckBrickXaah+0xbe6>
10008a90:	e60e      	b.n	100086b0 <_Z11CheckBrickXaah+0x804>
			b = *s++;
10008a92:	4660      	mov	r0, ip
			if (b != 0)
10008a94:	2800      	cmp	r0, #0
10008a96:	d107      	bne.n	10008aa8 <_Z11CheckBrickXaah+0xbfc>
10008a98:	9c0e      	ldr	r4, [sp, #56]	; 0x38
10008a9a:	2c00      	cmp	r4, #0
10008a9c:	d100      	bne.n	10008aa0 <_Z11CheckBrickXaah+0xbf4>
10008a9e:	e626      	b.n	100086ee <_Z11CheckBrickXaah+0x842>
				if ((y < 1) || (y >= MAPH-1))
10008aa0:	9c00      	ldr	r4, [sp, #0]
10008aa2:	2c11      	cmp	r4, #17
10008aa4:	d800      	bhi.n	10008aa8 <_Z11CheckBrickXaah+0xbfc>
10008aa6:	e61a      	b.n	100086de <_Z11CheckBrickXaah+0x832>
					ok = False;
10008aa8:	2000      	movs	r0, #0
10008aaa:	e620      	b.n	100086ee <_Z11CheckBrickXaah+0x842>
			if (b != 0)
10008aac:	9c08      	ldr	r4, [sp, #32]
10008aae:	2c00      	cmp	r4, #0
10008ab0:	d045      	beq.n	10008b3e <_Z11CheckBrickXaah+0xc92>
				if ((y < 1) || (y >= MAPH-1))
10008ab2:	2b11      	cmp	r3, #17
10008ab4:	d800      	bhi.n	10008ab8 <_Z11CheckBrickXaah+0xc0c>
10008ab6:	e5c3      	b.n	10008640 <_Z11CheckBrickXaah+0x794>
			b = *s++;
10008ab8:	1e38      	subs	r0, r7, #0
			if (b != 0)
10008aba:	d106      	bne.n	10008aca <_Z11CheckBrickXaah+0xc1e>
10008abc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
10008abe:	2c00      	cmp	r4, #0
10008ac0:	d100      	bne.n	10008ac4 <_Z11CheckBrickXaah+0xc18>
10008ac2:	e5d8      	b.n	10008676 <_Z11CheckBrickXaah+0x7ca>
				if ((y < 1) || (y >= MAPH-1))
10008ac4:	2b11      	cmp	r3, #17
10008ac6:	d800      	bhi.n	10008aca <_Z11CheckBrickXaah+0xc1e>
10008ac8:	e5ce      	b.n	10008668 <_Z11CheckBrickXaah+0x7bc>
					ok = False;
10008aca:	2000      	movs	r0, #0
10008acc:	e5d3      	b.n	10008676 <_Z11CheckBrickXaah+0x7ca>
				if ((y < 1) || (y >= MAPH-1))
10008ace:	1e58      	subs	r0, r3, #1
10008ad0:	2811      	cmp	r0, #17
10008ad2:	d862      	bhi.n	10008b9a <_Z11CheckBrickXaah+0xcee>
					if (*d != TILE_EMPTY) ok = False;
10008ad4:	7810      	ldrb	r0, [r2, #0]
			if (b != 0)
10008ad6:	9c05      	ldr	r4, [sp, #20]
					if (*d != TILE_EMPTY) ok = False;
10008ad8:	3808      	subs	r0, #8
10008ada:	4246      	negs	r6, r0
10008adc:	4170      	adcs	r0, r6
10008ade:	b2c0      	uxtb	r0, r0
			if (b != 0)
10008ae0:	2c00      	cmp	r4, #0
10008ae2:	d15c      	bne.n	10008b9e <_Z11CheckBrickXaah+0xcf2>
10008ae4:	9c07      	ldr	r4, [sp, #28]
10008ae6:	2c00      	cmp	r4, #0
10008ae8:	d100      	bne.n	10008aec <_Z11CheckBrickXaah+0xc40>
10008aea:	e48a      	b.n	10008402 <_Z11CheckBrickXaah+0x556>
					if (*d != TILE_EMPTY) ok = False;
10008aec:	7896      	ldrb	r6, [r2, #2]
10008aee:	3e08      	subs	r6, #8
10008af0:	0034      	movs	r4, r6
10008af2:	4266      	negs	r6, r4
10008af4:	4166      	adcs	r6, r4
			if (b != 0)
10008af6:	9c06      	ldr	r4, [sp, #24]
					if (*d != TILE_EMPTY) ok = False;
10008af8:	4276      	negs	r6, r6
10008afa:	4030      	ands	r0, r6
			if (b != 0)
10008afc:	2c00      	cmp	r4, #0
10008afe:	d100      	bne.n	10008b02 <_Z11CheckBrickXaah+0xc56>
10008b00:	e487      	b.n	10008412 <_Z11CheckBrickXaah+0x566>
					if (*d != TILE_EMPTY) ok = False;
10008b02:	78d6      	ldrb	r6, [r2, #3]
10008b04:	3e08      	subs	r6, #8
10008b06:	0034      	movs	r4, r6
10008b08:	4266      	negs	r6, r4
10008b0a:	4166      	adcs	r6, r4
10008b0c:	4276      	negs	r6, r6
10008b0e:	4030      	ands	r0, r6
10008b10:	e47f      	b.n	10008412 <_Z11CheckBrickXaah+0x566>
					ok = False;
10008b12:	2000      	movs	r0, #0
			if (b != 0)
10008b14:	9a05      	ldr	r2, [sp, #20]
10008b16:	2a00      	cmp	r2, #0
10008b18:	d004      	beq.n	10008b24 <_Z11CheckBrickXaah+0xc78>
				if ((y < 1) || (y >= MAPH-1))
10008b1a:	1e5a      	subs	r2, r3, #1
10008b1c:	2a11      	cmp	r2, #17
10008b1e:	d800      	bhi.n	10008b22 <_Z11CheckBrickXaah+0xc76>
10008b20:	e61e      	b.n	10008760 <_Z11CheckBrickXaah+0x8b4>
					ok = False;
10008b22:	2000      	movs	r0, #0
			if (b != 0)
10008b24:	9a07      	ldr	r2, [sp, #28]
10008b26:	2a00      	cmp	r2, #0
10008b28:	d100      	bne.n	10008b2c <_Z11CheckBrickXaah+0xc80>
10008b2a:	e624      	b.n	10008776 <_Z11CheckBrickXaah+0x8ca>
				if ((y < 1) || (y >= MAPH-1))
10008b2c:	1e5a      	subs	r2, r3, #1
10008b2e:	2a11      	cmp	r2, #17
10008b30:	d800      	bhi.n	10008b34 <_Z11CheckBrickXaah+0xc88>
10008b32:	e748      	b.n	100089c6 <_Z11CheckBrickXaah+0xb1a>
					ok = False;
10008b34:	2000      	movs	r0, #0
10008b36:	e61e      	b.n	10008776 <_Z11CheckBrickXaah+0x8ca>
			b = *s++;
10008b38:	9c08      	ldr	r4, [sp, #32]
10008b3a:	1e20      	subs	r0, r4, #0
			if (b != 0)
10008b3c:	d1bc      	bne.n	10008ab8 <_Z11CheckBrickXaah+0xc0c>
10008b3e:	2f00      	cmp	r7, #0
10008b40:	d0bc      	beq.n	10008abc <_Z11CheckBrickXaah+0xc10>
				if ((y < 1) || (y >= MAPH-1))
10008b42:	2b11      	cmp	r3, #17
10008b44:	d800      	bhi.n	10008b48 <_Z11CheckBrickXaah+0xc9c>
10008b46:	e585      	b.n	10008654 <_Z11CheckBrickXaah+0x7a8>
					ok = False;
10008b48:	2000      	movs	r0, #0
10008b4a:	e594      	b.n	10008676 <_Z11CheckBrickXaah+0x7ca>
			b = *s++;
10008b4c:	9c09      	ldr	r4, [sp, #36]	; 0x24
10008b4e:	1e20      	subs	r0, r4, #0
			if (b != 0)
10008b50:	d19f      	bne.n	10008a92 <_Z11CheckBrickXaah+0xbe6>
10008b52:	4664      	mov	r4, ip
10008b54:	2c00      	cmp	r4, #0
10008b56:	d09f      	beq.n	10008a98 <_Z11CheckBrickXaah+0xbec>
				if ((y < 1) || (y >= MAPH-1))
10008b58:	9c00      	ldr	r4, [sp, #0]
10008b5a:	2c11      	cmp	r4, #17
10008b5c:	d800      	bhi.n	10008b60 <_Z11CheckBrickXaah+0xcb4>
10008b5e:	e5b3      	b.n	100086c8 <_Z11CheckBrickXaah+0x81c>
					ok = False;
10008b60:	2000      	movs	r0, #0
10008b62:	e5c4      	b.n	100086ee <_Z11CheckBrickXaah+0x842>
			if (b != 0)
10008b64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
10008b66:	2a00      	cmp	r2, #0
10008b68:	d100      	bne.n	10008b6c <_Z11CheckBrickXaah+0xcc0>
10008b6a:	e0ce      	b.n	10008d0a <_Z11CheckBrickXaah+0xe5e>
				if ((y < 1) || (y >= MAPH-1))
10008b6c:	9a01      	ldr	r2, [sp, #4]
10008b6e:	2a11      	cmp	r2, #17
10008b70:	d900      	bls.n	10008b74 <_Z11CheckBrickXaah+0xcc8>
10008b72:	e694      	b.n	1000889e <_Z11CheckBrickXaah+0x9f2>
10008b74:	e68d      	b.n	10008892 <_Z11CheckBrickXaah+0x9e6>
			b = *s++;
10008b76:	1e38      	subs	r0, r7, #0
			if (b != 0)
10008b78:	d000      	beq.n	10008b7c <_Z11CheckBrickXaah+0xcd0>
10008b7a:	e638      	b.n	100087ee <_Z11CheckBrickXaah+0x942>
10008b7c:	e632      	b.n	100087e4 <_Z11CheckBrickXaah+0x938>
			b = *s++;
10008b7e:	4660      	mov	r0, ip
			if (b != 0)
10008b80:	2800      	cmp	r0, #0
10008b82:	d000      	beq.n	10008b86 <_Z11CheckBrickXaah+0xcda>
10008b84:	e670      	b.n	10008868 <_Z11CheckBrickXaah+0x9bc>
10008b86:	e669      	b.n	1000885c <_Z11CheckBrickXaah+0x9b0>
10008b88:	78ae      	ldrb	r6, [r5, #2]
10008b8a:	2e00      	cmp	r6, #0
10008b8c:	d100      	bne.n	10008b90 <_Z11CheckBrickXaah+0xce4>
10008b8e:	e755      	b.n	10008a3c <_Z11CheckBrickXaah+0xb90>
				if ((y < 1) || (y >= MAPH-1))
10008b90:	9c01      	ldr	r4, [sp, #4]
10008b92:	2c11      	cmp	r4, #17
10008b94:	d900      	bls.n	10008b98 <_Z11CheckBrickXaah+0xcec>
10008b96:	e5c7      	b.n	10008728 <_Z11CheckBrickXaah+0x87c>
10008b98:	e5c1      	b.n	1000871e <_Z11CheckBrickXaah+0x872>
					ok = False;
10008b9a:	2000      	movs	r0, #0
10008b9c:	e421      	b.n	100083e2 <_Z11CheckBrickXaah+0x536>
					if (*d != TILE_EMPTY) ok = False;
10008b9e:	7856      	ldrb	r6, [r2, #1]
10008ba0:	3e08      	subs	r6, #8
10008ba2:	0034      	movs	r4, r6
10008ba4:	4266      	negs	r6, r4
10008ba6:	4166      	adcs	r6, r4
			if (b != 0)
10008ba8:	9c07      	ldr	r4, [sp, #28]
					if (*d != TILE_EMPTY) ok = False;
10008baa:	4276      	negs	r6, r6
10008bac:	4030      	ands	r0, r6
			if (b != 0)
10008bae:	2c00      	cmp	r4, #0
10008bb0:	d19c      	bne.n	10008aec <_Z11CheckBrickXaah+0xc40>
10008bb2:	e426      	b.n	10008402 <_Z11CheckBrickXaah+0x556>
				if ((y < 1) || (y >= MAPH-1))
10008bb4:	1e58      	subs	r0, r3, #1
10008bb6:	2811      	cmp	r0, #17
10008bb8:	d900      	bls.n	10008bbc <_Z11CheckBrickXaah+0xd10>
10008bba:	e0eb      	b.n	10008d94 <_Z11CheckBrickXaah+0xee8>
					if (*d != TILE_EMPTY) ok = False;
10008bbc:	7810      	ldrb	r0, [r2, #0]
			if (b != 0)
10008bbe:	9c05      	ldr	r4, [sp, #20]
					if (*d != TILE_EMPTY) ok = False;
10008bc0:	3808      	subs	r0, #8
10008bc2:	4246      	negs	r6, r0
10008bc4:	4170      	adcs	r0, r6
10008bc6:	b2c0      	uxtb	r0, r0
			if (b != 0)
10008bc8:	2c00      	cmp	r4, #0
10008bca:	d000      	beq.n	10008bce <_Z11CheckBrickXaah+0xd22>
10008bcc:	e0e8      	b.n	10008da0 <_Z11CheckBrickXaah+0xef4>
10008bce:	9c07      	ldr	r4, [sp, #28]
10008bd0:	2c00      	cmp	r4, #0
10008bd2:	d100      	bne.n	10008bd6 <_Z11CheckBrickXaah+0xd2a>
10008bd4:	e681      	b.n	100088da <_Z11CheckBrickXaah+0xa2e>
					if (*d != TILE_EMPTY) ok = False;
10008bd6:	7896      	ldrb	r6, [r2, #2]
10008bd8:	3e08      	subs	r6, #8
10008bda:	0034      	movs	r4, r6
10008bdc:	4266      	negs	r6, r4
10008bde:	4166      	adcs	r6, r4
			if (b != 0)
10008be0:	9c06      	ldr	r4, [sp, #24]
					if (*d != TILE_EMPTY) ok = False;
10008be2:	4276      	negs	r6, r6
10008be4:	4030      	ands	r0, r6
			if (b != 0)
10008be6:	2c00      	cmp	r4, #0
10008be8:	d100      	bne.n	10008bec <_Z11CheckBrickXaah+0xd40>
10008bea:	e67e      	b.n	100088ea <_Z11CheckBrickXaah+0xa3e>
					if (*d != TILE_EMPTY) ok = False;
10008bec:	78d6      	ldrb	r6, [r2, #3]
10008bee:	3e08      	subs	r6, #8
10008bf0:	0034      	movs	r4, r6
10008bf2:	4266      	negs	r6, r4
10008bf4:	4166      	adcs	r6, r4
10008bf6:	4276      	negs	r6, r6
10008bf8:	4030      	ands	r0, r6
10008bfa:	e676      	b.n	100088ea <_Z11CheckBrickXaah+0xa3e>
			if (b != 0)
10008bfc:	9c08      	ldr	r4, [sp, #32]
10008bfe:	2c00      	cmp	r4, #0
10008c00:	d01e      	beq.n	10008c40 <_Z11CheckBrickXaah+0xd94>
				if ((y < 1) || (y >= MAPH-1))
10008c02:	2b11      	cmp	r3, #17
10008c04:	d820      	bhi.n	10008c48 <_Z11CheckBrickXaah+0xd9c>
					if (*d != TILE_EMPTY) ok = False;
10008c06:	7f16      	ldrb	r6, [r2, #28]
10008c08:	3e08      	subs	r6, #8
10008c0a:	0034      	movs	r4, r6
10008c0c:	4266      	negs	r6, r4
10008c0e:	4166      	adcs	r6, r4
10008c10:	4276      	negs	r6, r6
10008c12:	4030      	ands	r0, r6
			if (b != 0)
10008c14:	2f00      	cmp	r7, #0
10008c16:	d018      	beq.n	10008c4a <_Z11CheckBrickXaah+0xd9e>
					if (*d != TILE_EMPTY) ok = False;
10008c18:	7f53      	ldrb	r3, [r2, #29]
10008c1a:	3b08      	subs	r3, #8
10008c1c:	425e      	negs	r6, r3
10008c1e:	4173      	adcs	r3, r6
10008c20:	425b      	negs	r3, r3
10008c22:	4018      	ands	r0, r3
			if (b != 0)
10008c24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
10008c26:	2b00      	cmp	r3, #0
10008c28:	d100      	bne.n	10008c2c <_Z11CheckBrickXaah+0xd80>
10008c2a:	e677      	b.n	1000891c <_Z11CheckBrickXaah+0xa70>
					if (*d != TILE_EMPTY) ok = False;
10008c2c:	7f93      	ldrb	r3, [r2, #30]
10008c2e:	3b08      	subs	r3, #8
10008c30:	425e      	negs	r6, r3
10008c32:	4173      	adcs	r3, r6
10008c34:	425b      	negs	r3, r3
10008c36:	4018      	ands	r0, r3
10008c38:	e670      	b.n	1000891c <_Z11CheckBrickXaah+0xa70>
			b = *s++;
10008c3a:	9808      	ldr	r0, [sp, #32]
			if (b != 0)
10008c3c:	2800      	cmp	r0, #0
10008c3e:	d103      	bne.n	10008c48 <_Z11CheckBrickXaah+0xd9c>
10008c40:	2f00      	cmp	r7, #0
10008c42:	d002      	beq.n	10008c4a <_Z11CheckBrickXaah+0xd9e>
				if ((y < 1) || (y >= MAPH-1))
10008c44:	2b11      	cmp	r3, #17
10008c46:	d9e7      	bls.n	10008c18 <_Z11CheckBrickXaah+0xd6c>
					ok = False;
10008c48:	2000      	movs	r0, #0
			if (b != 0)
10008c4a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
10008c4c:	2c00      	cmp	r4, #0
10008c4e:	d100      	bne.n	10008c52 <_Z11CheckBrickXaah+0xda6>
10008c50:	e664      	b.n	1000891c <_Z11CheckBrickXaah+0xa70>
				if ((y < 1) || (y >= MAPH-1))
10008c52:	2b11      	cmp	r3, #17
10008c54:	d9ea      	bls.n	10008c2c <_Z11CheckBrickXaah+0xd80>
					ok = False;
10008c56:	2000      	movs	r0, #0
10008c58:	e660      	b.n	1000891c <_Z11CheckBrickXaah+0xa70>
			if (b != 0)
10008c5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
10008c5c:	2b00      	cmp	r3, #0
10008c5e:	d022      	beq.n	10008ca6 <_Z11CheckBrickXaah+0xdfa>
				if ((y < 1) || (y >= MAPH-1))
10008c60:	9b00      	ldr	r3, [sp, #0]
10008c62:	2b11      	cmp	r3, #17
10008c64:	d825      	bhi.n	10008cb2 <_Z11CheckBrickXaah+0xe06>
					if (*d != TILE_EMPTY) ok = False;
10008c66:	2337      	movs	r3, #55	; 0x37
10008c68:	5cd3      	ldrb	r3, [r2, r3]
10008c6a:	3b08      	subs	r3, #8
10008c6c:	425e      	negs	r6, r3
10008c6e:	4173      	adcs	r3, r6
10008c70:	425b      	negs	r3, r3
10008c72:	4018      	ands	r0, r3
			if (b != 0)
10008c74:	4663      	mov	r3, ip
10008c76:	2b00      	cmp	r3, #0
10008c78:	d01c      	beq.n	10008cb4 <_Z11CheckBrickXaah+0xe08>
					if (*d != TILE_EMPTY) ok = False;
10008c7a:	2338      	movs	r3, #56	; 0x38
10008c7c:	5cd3      	ldrb	r3, [r2, r3]
10008c7e:	3b08      	subs	r3, #8
10008c80:	425c      	negs	r4, r3
10008c82:	4163      	adcs	r3, r4
10008c84:	425b      	negs	r3, r3
10008c86:	4018      	ands	r0, r3
			if (b != 0)
10008c88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
10008c8a:	2b00      	cmp	r3, #0
10008c8c:	d100      	bne.n	10008c90 <_Z11CheckBrickXaah+0xde4>
10008c8e:	e660      	b.n	10008952 <_Z11CheckBrickXaah+0xaa6>
					if (*d != TILE_EMPTY) ok = False;
10008c90:	2339      	movs	r3, #57	; 0x39
10008c92:	5cd3      	ldrb	r3, [r2, r3]
10008c94:	3b08      	subs	r3, #8
10008c96:	425c      	negs	r4, r3
10008c98:	4163      	adcs	r3, r4
10008c9a:	425b      	negs	r3, r3
10008c9c:	4018      	ands	r0, r3
10008c9e:	e658      	b.n	10008952 <_Z11CheckBrickXaah+0xaa6>
			b = *s++;
10008ca0:	9809      	ldr	r0, [sp, #36]	; 0x24
			if (b != 0)
10008ca2:	2800      	cmp	r0, #0
10008ca4:	d105      	bne.n	10008cb2 <_Z11CheckBrickXaah+0xe06>
10008ca6:	4663      	mov	r3, ip
10008ca8:	2b00      	cmp	r3, #0
10008caa:	d003      	beq.n	10008cb4 <_Z11CheckBrickXaah+0xe08>
				if ((y < 1) || (y >= MAPH-1))
10008cac:	9b00      	ldr	r3, [sp, #0]
10008cae:	2b11      	cmp	r3, #17
10008cb0:	d9e3      	bls.n	10008c7a <_Z11CheckBrickXaah+0xdce>
					ok = False;
10008cb2:	2000      	movs	r0, #0
			if (b != 0)
10008cb4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
10008cb6:	2b00      	cmp	r3, #0
10008cb8:	d100      	bne.n	10008cbc <_Z11CheckBrickXaah+0xe10>
10008cba:	e64a      	b.n	10008952 <_Z11CheckBrickXaah+0xaa6>
				if ((y < 1) || (y >= MAPH-1))
10008cbc:	9b00      	ldr	r3, [sp, #0]
10008cbe:	2b11      	cmp	r3, #17
10008cc0:	d9e6      	bls.n	10008c90 <_Z11CheckBrickXaah+0xde4>
					ok = False;
10008cc2:	2000      	movs	r0, #0
10008cc4:	e645      	b.n	10008952 <_Z11CheckBrickXaah+0xaa6>
			if (b != 0)
10008cc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10008cc8:	2b00      	cmp	r3, #0
10008cca:	d03e      	beq.n	10008d4a <_Z11CheckBrickXaah+0xe9e>
				if ((y < 1) || (y >= MAPH-1))
10008ccc:	9b01      	ldr	r3, [sp, #4]
10008cce:	2b11      	cmp	r3, #17
10008cd0:	d900      	bls.n	10008cd4 <_Z11CheckBrickXaah+0xe28>
10008cd2:	e658      	b.n	10008986 <_Z11CheckBrickXaah+0xada>
					if (*d != TILE_EMPTY) ok = False;
10008cd4:	2352      	movs	r3, #82	; 0x52
10008cd6:	5cd3      	ldrb	r3, [r2, r3]
10008cd8:	2b08      	cmp	r3, #8
10008cda:	d071      	beq.n	10008dc0 <_Z11CheckBrickXaah+0xf14>
			b = *s++;
10008cdc:	78a8      	ldrb	r0, [r5, #2]
			if (b != 0)
10008cde:	2800      	cmp	r0, #0
10008ce0:	d101      	bne.n	10008ce6 <_Z11CheckBrickXaah+0xe3a>
10008ce2:	f7ff f9a1 	bl	10008028 <_Z11CheckBrickXaah+0x17c>
10008ce6:	2000      	movs	r0, #0
10008ce8:	f7ff f99e 	bl	10008028 <_Z11CheckBrickXaah+0x17c>
10008cec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
10008cee:	2a00      	cmp	r2, #0
10008cf0:	d000      	beq.n	10008cf4 <_Z11CheckBrickXaah+0xe48>
10008cf2:	e5d4      	b.n	1000889e <_Z11CheckBrickXaah+0x9f2>
			b = *s++;
10008cf4:	78a8      	ldrb	r0, [r5, #2]
			if (b != 0)
10008cf6:	2800      	cmp	r0, #0
10008cf8:	d000      	beq.n	10008cfc <_Z11CheckBrickXaah+0xe50>
10008cfa:	e5d0      	b.n	1000889e <_Z11CheckBrickXaah+0x9f2>
10008cfc:	78ea      	ldrb	r2, [r5, #3]
10008cfe:	2a00      	cmp	r2, #0
10008d00:	d019      	beq.n	10008d36 <_Z11CheckBrickXaah+0xe8a>
				if ((y < 1) || (y >= MAPH-1))
10008d02:	9a01      	ldr	r2, [sp, #4]
10008d04:	2a11      	cmp	r2, #17
10008d06:	d910      	bls.n	10008d2a <_Z11CheckBrickXaah+0xe7e>
10008d08:	e5c9      	b.n	1000889e <_Z11CheckBrickXaah+0x9f2>
			if (b != 0)
10008d0a:	78aa      	ldrb	r2, [r5, #2]
10008d0c:	2a00      	cmp	r2, #0
10008d0e:	d0f5      	beq.n	10008cfc <_Z11CheckBrickXaah+0xe50>
				if ((y < 1) || (y >= MAPH-1))
10008d10:	9a01      	ldr	r2, [sp, #4]
10008d12:	2a11      	cmp	r2, #17
10008d14:	d900      	bls.n	10008d18 <_Z11CheckBrickXaah+0xe6c>
10008d16:	e5c2      	b.n	1000889e <_Z11CheckBrickXaah+0x9f2>
					if (*d != TILE_EMPTY) ok = False;
10008d18:	2253      	movs	r2, #83	; 0x53
10008d1a:	4654      	mov	r4, sl
10008d1c:	5ca2      	ldrb	r2, [r4, r2]
10008d1e:	2a08      	cmp	r2, #8
10008d20:	d000      	beq.n	10008d24 <_Z11CheckBrickXaah+0xe78>
10008d22:	e5bc      	b.n	1000889e <_Z11CheckBrickXaah+0x9f2>
			if (b != 0)
10008d24:	78ea      	ldrb	r2, [r5, #3]
10008d26:	2a00      	cmp	r2, #0
10008d28:	d005      	beq.n	10008d36 <_Z11CheckBrickXaah+0xe8a>
					if (*d != TILE_EMPTY) ok = False;
10008d2a:	2254      	movs	r2, #84	; 0x54
10008d2c:	4654      	mov	r4, sl
10008d2e:	5ca2      	ldrb	r2, [r4, r2]
10008d30:	2a08      	cmp	r2, #8
10008d32:	d000      	beq.n	10008d36 <_Z11CheckBrickXaah+0xe8a>
10008d34:	e5b3      	b.n	1000889e <_Z11CheckBrickXaah+0x9f2>
	if (res)
10008d36:	2800      	cmp	r0, #0
10008d38:	d000      	beq.n	10008d3c <_Z11CheckBrickXaah+0xe90>
10008d3a:	e673      	b.n	10008a24 <_Z11CheckBrickXaah+0xb78>
10008d3c:	e5af      	b.n	1000889e <_Z11CheckBrickXaah+0x9f2>
			if (b != 0)
10008d3e:	78ac      	ldrb	r4, [r5, #2]
10008d40:	2c00      	cmp	r4, #0
10008d42:	d000      	beq.n	10008d46 <_Z11CheckBrickXaah+0xe9a>
10008d44:	e420      	b.n	10008588 <_Z11CheckBrickXaah+0x6dc>
10008d46:	f7ff fa44 	bl	100081d2 <_Z11CheckBrickXaah+0x326>
10008d4a:	78ab      	ldrb	r3, [r5, #2]
10008d4c:	2b00      	cmp	r3, #0
10008d4e:	d100      	bne.n	10008d52 <_Z11CheckBrickXaah+0xea6>
10008d50:	e60d      	b.n	1000896e <_Z11CheckBrickXaah+0xac2>
				if ((y < 1) || (y >= MAPH-1))
10008d52:	9b01      	ldr	r3, [sp, #4]
10008d54:	2b11      	cmp	r3, #17
10008d56:	d900      	bls.n	10008d5a <_Z11CheckBrickXaah+0xeae>
10008d58:	e615      	b.n	10008986 <_Z11CheckBrickXaah+0xada>
					if (*d != TILE_EMPTY) ok = False;
10008d5a:	2353      	movs	r3, #83	; 0x53
10008d5c:	5cd3      	ldrb	r3, [r2, r3]
10008d5e:	2b08      	cmp	r3, #8
10008d60:	d00f      	beq.n	10008d82 <_Z11CheckBrickXaah+0xed6>
			if (b != 0)
10008d62:	2000      	movs	r0, #0
10008d64:	f7ff f960 	bl	10008028 <_Z11CheckBrickXaah+0x17c>
					if (*d != TILE_EMPTY) ok = False;
10008d68:	2351      	movs	r3, #81	; 0x51
10008d6a:	5cd3      	ldrb	r3, [r2, r3]
10008d6c:	3b08      	subs	r3, #8
10008d6e:	425c      	negs	r4, r3
10008d70:	4163      	adcs	r3, r4
10008d72:	425b      	negs	r3, r3
10008d74:	4018      	ands	r0, r3
			if (b != 0)
10008d76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10008d78:	2b00      	cmp	r3, #0
10008d7a:	d1ab      	bne.n	10008cd4 <_Z11CheckBrickXaah+0xe28>
10008d7c:	78ab      	ldrb	r3, [r5, #2]
10008d7e:	2b00      	cmp	r3, #0
10008d80:	d1eb      	bne.n	10008d5a <_Z11CheckBrickXaah+0xeae>
10008d82:	78eb      	ldrb	r3, [r5, #3]
10008d84:	2b00      	cmp	r3, #0
10008d86:	d000      	beq.n	10008d8a <_Z11CheckBrickXaah+0xede>
10008d88:	e5f8      	b.n	1000897c <_Z11CheckBrickXaah+0xad0>
	if (res)
10008d8a:	2800      	cmp	r0, #0
10008d8c:	d000      	beq.n	10008d90 <_Z11CheckBrickXaah+0xee4>
10008d8e:	e649      	b.n	10008a24 <_Z11CheckBrickXaah+0xb78>
10008d90:	f7ff f94a 	bl	10008028 <_Z11CheckBrickXaah+0x17c>
					ok = False;
10008d94:	2000      	movs	r0, #0
10008d96:	e590      	b.n	100088ba <_Z11CheckBrickXaah+0xa0e>
			if (b != 0)
10008d98:	78aa      	ldrb	r2, [r5, #2]
10008d9a:	2a00      	cmp	r2, #0
10008d9c:	d1bc      	bne.n	10008d18 <_Z11CheckBrickXaah+0xe6c>
10008d9e:	e7c1      	b.n	10008d24 <_Z11CheckBrickXaah+0xe78>
					if (*d != TILE_EMPTY) ok = False;
10008da0:	7856      	ldrb	r6, [r2, #1]
10008da2:	3e08      	subs	r6, #8
10008da4:	0034      	movs	r4, r6
10008da6:	4266      	negs	r6, r4
10008da8:	4166      	adcs	r6, r4
			if (b != 0)
10008daa:	9c07      	ldr	r4, [sp, #28]
					if (*d != TILE_EMPTY) ok = False;
10008dac:	4276      	negs	r6, r6
10008dae:	4030      	ands	r0, r6
			if (b != 0)
10008db0:	2c00      	cmp	r4, #0
10008db2:	d000      	beq.n	10008db6 <_Z11CheckBrickXaah+0xf0a>
10008db4:	e70f      	b.n	10008bd6 <_Z11CheckBrickXaah+0xd2a>
10008db6:	e590      	b.n	100088da <_Z11CheckBrickXaah+0xa2e>
10008db8:	78aa      	ldrb	r2, [r5, #2]
10008dba:	2a00      	cmp	r2, #0
10008dbc:	d1ac      	bne.n	10008d18 <_Z11CheckBrickXaah+0xe6c>
10008dbe:	e79d      	b.n	10008cfc <_Z11CheckBrickXaah+0xe50>
10008dc0:	78ab      	ldrb	r3, [r5, #2]
10008dc2:	2b00      	cmp	r3, #0
10008dc4:	d1c9      	bne.n	10008d5a <_Z11CheckBrickXaah+0xeae>
10008dc6:	e5d2      	b.n	1000896e <_Z11CheckBrickXaah+0xac2>

10008dc8 <_Z7NewGamev>:
{
10008dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	memcpy(Board, BoardTemp, MAPSIZE);
10008dca:	2287      	movs	r2, #135	; 0x87
{
10008dcc:	46ce      	mov	lr, r9
10008dce:	4647      	mov	r7, r8
	NextBrick = 0;
10008dd0:	2400      	movs	r4, #0
	memcpy(Board, BoardTemp, MAPSIZE);
10008dd2:	4e57      	ldr	r6, [pc, #348]	; (10008f30 <_Z7NewGamev+0x168>)
{
10008dd4:	b580      	push	{r7, lr}
	memcpy(Board, BoardTemp, MAPSIZE);
10008dd6:	4957      	ldr	r1, [pc, #348]	; (10008f34 <_Z7NewGamev+0x16c>)
10008dd8:	0092      	lsls	r2, r2, #2
10008dda:	0030      	movs	r0, r6
10008ddc:	f7f8 f988 	bl	100010f0 <__wrap___aeabi_memcpy>
	NextBrick = 0;
10008de0:	4b55      	ldr	r3, [pc, #340]	; (10008f38 <_Z7NewGamev+0x170>)
10008de2:	701c      	strb	r4, [r3, #0]
	GenBrick();
10008de4:	f7ff f808 	bl	10007df8 <_Z8GenBrickv>
	Level = 1; // current level (1..)
10008de8:	2301      	movs	r3, #1
	NextLevel = NextLevelTab[0]; // next level counter
10008dea:	220a      	movs	r2, #10
	Level = 1; // current level (1..)
10008dec:	4f53      	ldr	r7, [pc, #332]	; (10008f3c <_Z7NewGamev+0x174>)
	for (i = 0; i < BASEBRICKNUM; i++) Stat[i] = 0;
10008dee:	4d54      	ldr	r5, [pc, #336]	; (10008f40 <_Z7NewGamev+0x178>)
	Level = 1; // current level (1..)
10008df0:	703b      	strb	r3, [r7, #0]
	NextLevel = NextLevelTab[0]; // next level counter
10008df2:	4b54      	ldr	r3, [pc, #336]	; (10008f44 <_Z7NewGamev+0x17c>)
	for (i = 0; i < BASEBRICKNUM; i++) Stat[i] = 0;
10008df4:	602c      	str	r4, [r5, #0]
	NextLevel = NextLevelTab[0]; // next level counter
10008df6:	601a      	str	r2, [r3, #0]
	Score = 0;	// game score
10008df8:	4b53      	ldr	r3, [pc, #332]	; (10008f48 <_Z7NewGamev+0x180>)
	StepSpeed = LevSpeed[Level-1];
10008dfa:	22fa      	movs	r2, #250	; 0xfa
	Score = 0;	// game score
10008dfc:	4699      	mov	r9, r3
10008dfe:	601c      	str	r4, [r3, #0]
	Lines = 0;	// lines
10008e00:	4b52      	ldr	r3, [pc, #328]	; (10008f4c <_Z7NewGamev+0x184>)
	StepSpeed = LevSpeed[Level-1];
10008e02:	0092      	lsls	r2, r2, #2
	Lines = 0;	// lines
10008e04:	601c      	str	r4, [r3, #0]
10008e06:	4698      	mov	r8, r3
	StepSpeed = LevSpeed[Level-1];
10008e08:	4b51      	ldr	r3, [pc, #324]	; (10008f50 <_Z7NewGamev+0x188>)
	for (i = 0; i < BASEBRICKNUM; i++) Stat[i] = 0;
10008e0a:	606c      	str	r4, [r5, #4]
10008e0c:	60ac      	str	r4, [r5, #8]
10008e0e:	60ec      	str	r4, [r5, #12]
10008e10:	612c      	str	r4, [r5, #16]
10008e12:	616c      	str	r4, [r5, #20]
10008e14:	61ac      	str	r4, [r5, #24]
	StepSpeed = LevSpeed[Level-1];
10008e16:	601a      	str	r2, [r3, #0]
	GenBrick();
10008e18:	f7fe ffee 	bl	10007df8 <_Z8GenBrickv>
	DispTileNum(TILE_SCOREV1, Score, COL_WHITE);
10008e1c:	464b      	mov	r3, r9
10008e1e:	22ff      	movs	r2, #255	; 0xff
10008e20:	6819      	ldr	r1, [r3, #0]
10008e22:	202e      	movs	r0, #46	; 0x2e
10008e24:	f7fe fc62 	bl	100076ec <_Z11DispTileNumhih>
	DispTileNum(TILE_SCOREV3, ScoreBest, COL_YELLOW);
10008e28:	4b4a      	ldr	r3, [pc, #296]	; (10008f54 <_Z7NewGamev+0x18c>)
10008e2a:	22fc      	movs	r2, #252	; 0xfc
10008e2c:	6819      	ldr	r1, [r3, #0]
10008e2e:	2042      	movs	r0, #66	; 0x42
10008e30:	f7fe fc5c 	bl	100076ec <_Z11DispTileNumhih>
	DispTileNum(TILE_LINESV1, Lines, COL_WHITE);
10008e34:	4643      	mov	r3, r8
10008e36:	22ff      	movs	r2, #255	; 0xff
10008e38:	6819      	ldr	r1, [r3, #0]
10008e3a:	2030      	movs	r0, #48	; 0x30
10008e3c:	f7fe fc56 	bl	100076ec <_Z11DispTileNumhih>
	DispTileNum(TILE_LINESV3, LinesBest, COL_YELLOW);
10008e40:	4b45      	ldr	r3, [pc, #276]	; (10008f58 <_Z7NewGamev+0x190>)
10008e42:	22fc      	movs	r2, #252	; 0xfc
10008e44:	6819      	ldr	r1, [r3, #0]
10008e46:	2044      	movs	r0, #68	; 0x44
10008e48:	f7fe fc50 	bl	100076ec <_Z11DispTileNumhih>
	DispTileNum(TILE_SPEEDV1, Level, COL_WHITE);
10008e4c:	22ff      	movs	r2, #255	; 0xff
10008e4e:	2032      	movs	r0, #50	; 0x32
10008e50:	7839      	ldrb	r1, [r7, #0]
10008e52:	f7fe fc4b 	bl	100076ec <_Z11DispTileNumhih>
	DispTileNum(TILE_SPEEDV3, LevelBest, COL_YELLOW);
10008e56:	4b41      	ldr	r3, [pc, #260]	; (10008f5c <_Z7NewGamev+0x194>)
10008e58:	22fc      	movs	r2, #252	; 0xfc
10008e5a:	2046      	movs	r0, #70	; 0x46
10008e5c:	7819      	ldrb	r1, [r3, #0]
10008e5e:	f7fe fc45 	bl	100076ec <_Z11DispTileNumhih>
10008e62:	3434      	adds	r4, #52	; 0x34
	for (i = 0; i < BASEBRICKNUM; i++) DispTileNum(TILE_STAT1 + i*2, Stat[i], COL_WHITE);
10008e64:	0020      	movs	r0, r4
10008e66:	3402      	adds	r4, #2
10008e68:	22ff      	movs	r2, #255	; 0xff
10008e6a:	cd02      	ldmia	r5!, {r1}
10008e6c:	b2e4      	uxtb	r4, r4
10008e6e:	f7fe fc3d 	bl	100076ec <_Z11DispTileNumhih>
10008e72:	2c42      	cmp	r4, #66	; 0x42
10008e74:	d1f6      	bne.n	10008e64 <_Z7NewGamev+0x9c>
	u8* d = &Board[x + y*MAPW];
10008e76:	2400      	movs	r4, #0
	DispBrick(BrickX, BrickY, Brick);
10008e78:	4839      	ldr	r0, [pc, #228]	; (10008f60 <_Z7NewGamev+0x198>)
10008e7a:	4b3a      	ldr	r3, [pc, #232]	; (10008f64 <_Z7NewGamev+0x19c>)
	u8* d = &Board[x + y*MAPW];
10008e7c:	5704      	ldrsb	r4, [r0, r4]
	const u8* s = &BrickTemp[brick*BRICKTEMPSIZE];
10008e7e:	781a      	ldrb	r2, [r3, #0]
	u8* d = &Board[x + y*MAPW];
10008e80:	0060      	lsls	r0, r4, #1
10008e82:	1900      	adds	r0, r0, r4
10008e84:	00c4      	lsls	r4, r0, #3
10008e86:	1900      	adds	r0, r0, r4
	DispBrick(BrickX, BrickY, Brick);
10008e88:	4c37      	ldr	r4, [pc, #220]	; (10008f68 <_Z7NewGamev+0x1a0>)
	const u8* s = &BrickTemp[brick*BRICKTEMPSIZE];
10008e8a:	4938      	ldr	r1, [pc, #224]	; (10008f6c <_Z7NewGamev+0x1a4>)
	u8* d = &Board[x + y*MAPW];
10008e8c:	7824      	ldrb	r4, [r4, #0]
	const u8* s = &BrickTemp[brick*BRICKTEMPSIZE];
10008e8e:	0112      	lsls	r2, r2, #4
10008e90:	1853      	adds	r3, r2, r1
	u8* d = &Board[x + y*MAPW];
10008e92:	b264      	sxtb	r4, r4
			b = *s++;
10008e94:	5c8a      	ldrb	r2, [r1, r2]
	u8* d = &Board[x + y*MAPW];
10008e96:	1900      	adds	r0, r0, r4
10008e98:	1830      	adds	r0, r6, r0
			if (b != 0) *d = b;
10008e9a:	2a00      	cmp	r2, #0
10008e9c:	d000      	beq.n	10008ea0 <_Z7NewGamev+0xd8>
10008e9e:	7002      	strb	r2, [r0, #0]
			b = *s++;
10008ea0:	785a      	ldrb	r2, [r3, #1]
			if (b != 0) *d = b;
10008ea2:	2a00      	cmp	r2, #0
10008ea4:	d000      	beq.n	10008ea8 <_Z7NewGamev+0xe0>
10008ea6:	7042      	strb	r2, [r0, #1]
			b = *s++;
10008ea8:	789a      	ldrb	r2, [r3, #2]
			if (b != 0) *d = b;
10008eaa:	2a00      	cmp	r2, #0
10008eac:	d000      	beq.n	10008eb0 <_Z7NewGamev+0xe8>
10008eae:	7082      	strb	r2, [r0, #2]
			b = *s++;
10008eb0:	78da      	ldrb	r2, [r3, #3]
			if (b != 0) *d = b;
10008eb2:	2a00      	cmp	r2, #0
10008eb4:	d000      	beq.n	10008eb8 <_Z7NewGamev+0xf0>
10008eb6:	70c2      	strb	r2, [r0, #3]
			b = *s++;
10008eb8:	791a      	ldrb	r2, [r3, #4]
			if (b != 0) *d = b;
10008eba:	2a00      	cmp	r2, #0
10008ebc:	d000      	beq.n	10008ec0 <_Z7NewGamev+0xf8>
10008ebe:	76c2      	strb	r2, [r0, #27]
			b = *s++;
10008ec0:	795a      	ldrb	r2, [r3, #5]
			if (b != 0) *d = b;
10008ec2:	2a00      	cmp	r2, #0
10008ec4:	d000      	beq.n	10008ec8 <_Z7NewGamev+0x100>
10008ec6:	7702      	strb	r2, [r0, #28]
			b = *s++;
10008ec8:	799a      	ldrb	r2, [r3, #6]
			if (b != 0) *d = b;
10008eca:	2a00      	cmp	r2, #0
10008ecc:	d000      	beq.n	10008ed0 <_Z7NewGamev+0x108>
10008ece:	7742      	strb	r2, [r0, #29]
			b = *s++;
10008ed0:	79da      	ldrb	r2, [r3, #7]
			if (b != 0) *d = b;
10008ed2:	2a00      	cmp	r2, #0
10008ed4:	d000      	beq.n	10008ed8 <_Z7NewGamev+0x110>
10008ed6:	7782      	strb	r2, [r0, #30]
			b = *s++;
10008ed8:	7a1a      	ldrb	r2, [r3, #8]
			if (b != 0) *d = b;
10008eda:	2a00      	cmp	r2, #0
10008edc:	d001      	beq.n	10008ee2 <_Z7NewGamev+0x11a>
10008ede:	2136      	movs	r1, #54	; 0x36
10008ee0:	5442      	strb	r2, [r0, r1]
			b = *s++;
10008ee2:	7a5a      	ldrb	r2, [r3, #9]
			if (b != 0) *d = b;
10008ee4:	2a00      	cmp	r2, #0
10008ee6:	d001      	beq.n	10008eec <_Z7NewGamev+0x124>
10008ee8:	2137      	movs	r1, #55	; 0x37
10008eea:	5442      	strb	r2, [r0, r1]
			b = *s++;
10008eec:	7a9a      	ldrb	r2, [r3, #10]
			if (b != 0) *d = b;
10008eee:	2a00      	cmp	r2, #0
10008ef0:	d001      	beq.n	10008ef6 <_Z7NewGamev+0x12e>
10008ef2:	2138      	movs	r1, #56	; 0x38
10008ef4:	5442      	strb	r2, [r0, r1]
			b = *s++;
10008ef6:	7ada      	ldrb	r2, [r3, #11]
			if (b != 0) *d = b;
10008ef8:	2a00      	cmp	r2, #0
10008efa:	d001      	beq.n	10008f00 <_Z7NewGamev+0x138>
10008efc:	2139      	movs	r1, #57	; 0x39
10008efe:	5442      	strb	r2, [r0, r1]
			b = *s++;
10008f00:	7b1a      	ldrb	r2, [r3, #12]
			if (b != 0) *d = b;
10008f02:	2a00      	cmp	r2, #0
10008f04:	d001      	beq.n	10008f0a <_Z7NewGamev+0x142>
10008f06:	2151      	movs	r1, #81	; 0x51
10008f08:	5442      	strb	r2, [r0, r1]
			b = *s++;
10008f0a:	7b5a      	ldrb	r2, [r3, #13]
			if (b != 0) *d = b;
10008f0c:	2a00      	cmp	r2, #0
10008f0e:	d001      	beq.n	10008f14 <_Z7NewGamev+0x14c>
10008f10:	2152      	movs	r1, #82	; 0x52
10008f12:	5442      	strb	r2, [r0, r1]
			b = *s++;
10008f14:	7b9a      	ldrb	r2, [r3, #14]
			if (b != 0) *d = b;
10008f16:	2a00      	cmp	r2, #0
10008f18:	d001      	beq.n	10008f1e <_Z7NewGamev+0x156>
10008f1a:	2153      	movs	r1, #83	; 0x53
10008f1c:	5442      	strb	r2, [r0, r1]
			b = *s++;
10008f1e:	7bdb      	ldrb	r3, [r3, #15]
			if (b != 0) *d = b;
10008f20:	2b00      	cmp	r3, #0
10008f22:	d001      	beq.n	10008f28 <_Z7NewGamev+0x160>
10008f24:	2254      	movs	r2, #84	; 0x54
10008f26:	5483      	strb	r3, [r0, r2]
}
10008f28:	bcc0      	pop	{r6, r7}
10008f2a:	46b9      	mov	r9, r7
10008f2c:	46b0      	mov	r8, r6
10008f2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10008f30:	2000327c 	.word	0x2000327c
10008f34:	10010954 	.word	0x10010954
10008f38:	2001276d 	.word	0x2001276d
10008f3c:	2001276b 	.word	0x2001276b
10008f40:	20007840 	.word	0x20007840
10008f44:	200061fc 	.word	0x200061fc
10008f48:	20007108 	.word	0x20007108
10008f4c:	200061f4 	.word	0x200061f4
10008f50:	2000785c 	.word	0x2000785c
10008f54:	2000710c 	.word	0x2000710c
10008f58:	200061f8 	.word	0x200061f8
10008f5c:	2001276c 	.word	0x2001276c
10008f60:	20012766 	.word	0x20012766
10008f64:	20012764 	.word	0x20012764
10008f68:	20012765 	.word	0x20012765
10008f6c:	10010bd4 	.word	0x10010bd4

10008f70 <_Z4Gamev.part.0>:

	return i > 0; // i > 0 if continue with user
}

// process game
void Game()
10008f70:	b5f0      	push	{r4, r5, r6, r7, lr}
10008f72:	46de      	mov	lr, fp
10008f74:	464e      	mov	r6, r9
10008f76:	4645      	mov	r5, r8
10008f78:	4657      	mov	r7, sl
10008f7a:	4b04      	ldr	r3, [pc, #16]	; (10008f8c <_Z4Gamev.part.0+0x1c>)
10008f7c:	b5e0      	push	{r5, r6, r7, lr}
10008f7e:	4698      	mov	r8, r3
10008f80:	4b03      	ldr	r3, [pc, #12]	; (10008f90 <_Z4Gamev.part.0+0x20>)
10008f82:	b095      	sub	sp, #84	; 0x54
10008f84:	469b      	mov	fp, r3
10008f86:	4b03      	ldr	r3, [pc, #12]	; (10008f94 <_Z4Gamev.part.0+0x24>)
10008f88:	4699      	mov	r9, r3
10008f8a:	e00b      	b.n	10008fa4 <_Z4Gamev.part.0+0x34>
10008f8c:	2000783c 	.word	0x2000783c
10008f90:	2000327c 	.word	0x2000327c
10008f94:	200061fc 	.word	0x200061fc
				if (!Falling && (BrickScore > 0)) BrickScore--;
			}
		}

		// key service if not falling
		if (!Falling)
10008f98:	4cd6      	ldr	r4, [pc, #856]	; (100092f4 <_Z4Gamev.part.0+0x384>)
10008f9a:	7823      	ldrb	r3, [r4, #0]
10008f9c:	2b00      	cmp	r3, #0
10008f9e:	d101      	bne.n	10008fa4 <_Z4Gamev.part.0+0x34>
10008fa0:	f000 fc2c 	bl	100097fc <_Z4Gamev.part.0+0x88c>
		sleep_ms(TIMEDELAY);
10008fa4:	200a      	movs	r0, #10
10008fa6:	f7fb fc47 	bl	10004838 <sleep_ms>
		SpeedCnt -= TIMEDELAY;
10008faa:	4643      	mov	r3, r8
10008fac:	4642      	mov	r2, r8
10008fae:	681b      	ldr	r3, [r3, #0]
10008fb0:	3b0a      	subs	r3, #10
10008fb2:	6013      	str	r3, [r2, #0]
		if (SpeedCnt <= 0)
10008fb4:	2b00      	cmp	r3, #0
10008fb6:	dcef      	bgt.n	10008f98 <_Z4Gamev.part.0+0x28>
			ClearBrick(BrickX, BrickY, Brick);
10008fb8:	2100      	movs	r1, #0
	u8* d = &Board[x + y*MAPW];
10008fba:	2000      	movs	r0, #0
			ClearBrick(BrickX, BrickY, Brick);
10008fbc:	4bce      	ldr	r3, [pc, #824]	; (100092f8 <_Z4Gamev.part.0+0x388>)
	u8* d = &Board[x + y*MAPW];
10008fbe:	4acf      	ldr	r2, [pc, #828]	; (100092fc <_Z4Gamev.part.0+0x38c>)
			ClearBrick(BrickX, BrickY, Brick);
10008fc0:	5659      	ldrsb	r1, [r3, r1]
	u8* d = &Board[x + y*MAPW];
10008fc2:	5610      	ldrsb	r0, [r2, r0]
10008fc4:	004a      	lsls	r2, r1, #1
10008fc6:	1852      	adds	r2, r2, r1
10008fc8:	00d5      	lsls	r5, r2, #3
10008fca:	1952      	adds	r2, r2, r5
10008fcc:	1815      	adds	r5, r2, r0
10008fce:	002a      	movs	r2, r5
	const u8* s = &BrickTemp[brick*BRICKTEMPSIZE];
10008fd0:	4bcb      	ldr	r3, [pc, #812]	; (10009300 <_Z4Gamev.part.0+0x390>)
			b = *s++;
10008fd2:	4ecc      	ldr	r6, [pc, #816]	; (10009304 <_Z4Gamev.part.0+0x394>)
	const u8* s = &BrickTemp[brick*BRICKTEMPSIZE];
10008fd4:	781c      	ldrb	r4, [r3, #0]
10008fd6:	4bcb      	ldr	r3, [pc, #812]	; (10009304 <_Z4Gamev.part.0+0x394>)
10008fd8:	0124      	lsls	r4, r4, #4
10008fda:	191b      	adds	r3, r3, r4
			b = *s++;
10008fdc:	5d34      	ldrb	r4, [r6, r4]
	u8* d = &Board[x + y*MAPW];
10008fde:	9010      	str	r0, [sp, #64]	; 0x40
10008fe0:	9511      	str	r5, [sp, #68]	; 0x44
10008fe2:	445a      	add	r2, fp
			b = *s++;
10008fe4:	9401      	str	r4, [sp, #4]
			if (b != 0) *d = TILE_EMPTY;
10008fe6:	2c00      	cmp	r4, #0
10008fe8:	d002      	beq.n	10008ff0 <_Z4Gamev.part.0+0x80>
10008fea:	2408      	movs	r4, #8
10008fec:	465e      	mov	r6, fp
10008fee:	5574      	strb	r4, [r6, r5]
			b = *s++;
10008ff0:	785c      	ldrb	r4, [r3, #1]
10008ff2:	9402      	str	r4, [sp, #8]
			if (b != 0) *d = TILE_EMPTY;
10008ff4:	2c00      	cmp	r4, #0
10008ff6:	d001      	beq.n	10008ffc <_Z4Gamev.part.0+0x8c>
10008ff8:	2408      	movs	r4, #8
10008ffa:	7054      	strb	r4, [r2, #1]
			b = *s++;
10008ffc:	789c      	ldrb	r4, [r3, #2]
10008ffe:	9406      	str	r4, [sp, #24]
			if (b != 0) *d = TILE_EMPTY;
10009000:	2c00      	cmp	r4, #0
10009002:	d001      	beq.n	10009008 <_Z4Gamev.part.0+0x98>
10009004:	2408      	movs	r4, #8
10009006:	7094      	strb	r4, [r2, #2]
			b = *s++;
10009008:	78dc      	ldrb	r4, [r3, #3]
1000900a:	940a      	str	r4, [sp, #40]	; 0x28
			if (b != 0) *d = TILE_EMPTY;
1000900c:	2c00      	cmp	r4, #0
1000900e:	d001      	beq.n	10009014 <_Z4Gamev.part.0+0xa4>
10009010:	2408      	movs	r4, #8
10009012:	70d4      	strb	r4, [r2, #3]
			b = *s++;
10009014:	791c      	ldrb	r4, [r3, #4]
10009016:	9403      	str	r4, [sp, #12]
			if (b != 0) *d = TILE_EMPTY;
10009018:	2c00      	cmp	r4, #0
1000901a:	d001      	beq.n	10009020 <_Z4Gamev.part.0+0xb0>
1000901c:	2408      	movs	r4, #8
1000901e:	76d4      	strb	r4, [r2, #27]
			b = *s++;
10009020:	7958      	ldrb	r0, [r3, #5]
10009022:	9004      	str	r0, [sp, #16]
			if (b != 0) *d = TILE_EMPTY;
10009024:	2800      	cmp	r0, #0
10009026:	d001      	beq.n	1000902c <_Z4Gamev.part.0+0xbc>
10009028:	2508      	movs	r5, #8
1000902a:	7715      	strb	r5, [r2, #28]
			b = *s++;
1000902c:	799c      	ldrb	r4, [r3, #6]
1000902e:	9407      	str	r4, [sp, #28]
			if (b != 0) *d = TILE_EMPTY;
10009030:	2c00      	cmp	r4, #0
10009032:	d001      	beq.n	10009038 <_Z4Gamev.part.0+0xc8>
10009034:	2508      	movs	r5, #8
10009036:	7755      	strb	r5, [r2, #29]
			b = *s++;
10009038:	79dc      	ldrb	r4, [r3, #7]
1000903a:	940b      	str	r4, [sp, #44]	; 0x2c
			if (b != 0) *d = TILE_EMPTY;
1000903c:	2c00      	cmp	r4, #0
1000903e:	d001      	beq.n	10009044 <_Z4Gamev.part.0+0xd4>
10009040:	2508      	movs	r5, #8
10009042:	7795      	strb	r5, [r2, #30]
			b = *s++;
10009044:	7a18      	ldrb	r0, [r3, #8]
10009046:	9005      	str	r0, [sp, #20]
			if (b != 0) *d = TILE_EMPTY;
10009048:	2800      	cmp	r0, #0
1000904a:	d002      	beq.n	10009052 <_Z4Gamev.part.0+0xe2>
1000904c:	2636      	movs	r6, #54	; 0x36
1000904e:	2708      	movs	r7, #8
10009050:	5597      	strb	r7, [r2, r6]
			b = *s++;
10009052:	7a5e      	ldrb	r6, [r3, #9]
			if (b != 0) *d = TILE_EMPTY;
10009054:	2e00      	cmp	r6, #0
10009056:	d002      	beq.n	1000905e <_Z4Gamev.part.0+0xee>
10009058:	2737      	movs	r7, #55	; 0x37
1000905a:	2408      	movs	r4, #8
1000905c:	55d4      	strb	r4, [r2, r7]
			b = *s++;
1000905e:	7a9c      	ldrb	r4, [r3, #10]
10009060:	9408      	str	r4, [sp, #32]
			if (b != 0) *d = TILE_EMPTY;
10009062:	2c00      	cmp	r4, #0
10009064:	d002      	beq.n	1000906c <_Z4Gamev.part.0+0xfc>
10009066:	2738      	movs	r7, #56	; 0x38
10009068:	2408      	movs	r4, #8
1000906a:	55d4      	strb	r4, [r2, r7]
			b = *s++;
1000906c:	7adc      	ldrb	r4, [r3, #11]
1000906e:	940c      	str	r4, [sp, #48]	; 0x30
			if (b != 0) *d = TILE_EMPTY;
10009070:	2c00      	cmp	r4, #0
10009072:	d002      	beq.n	1000907a <_Z4Gamev.part.0+0x10a>
10009074:	2739      	movs	r7, #57	; 0x39
10009076:	2408      	movs	r4, #8
10009078:	55d4      	strb	r4, [r2, r7]
			b = *s++;
1000907a:	7b1f      	ldrb	r7, [r3, #12]
			if (b != 0) *d = TILE_EMPTY;
1000907c:	2f00      	cmp	r7, #0
1000907e:	d006      	beq.n	1000908e <_Z4Gamev.part.0+0x11e>
10009080:	2451      	movs	r4, #81	; 0x51
10009082:	46a4      	mov	ip, r4
10009084:	3c49      	subs	r4, #73	; 0x49
10009086:	46a2      	mov	sl, r4
10009088:	4664      	mov	r4, ip
1000908a:	4650      	mov	r0, sl
1000908c:	5510      	strb	r0, [r2, r4]
			b = *s++;
1000908e:	7b5c      	ldrb	r4, [r3, #13]
10009090:	9409      	str	r4, [sp, #36]	; 0x24
			if (b != 0) *d = TILE_EMPTY;
10009092:	2c00      	cmp	r4, #0
10009094:	d006      	beq.n	100090a4 <_Z4Gamev.part.0+0x134>
10009096:	2052      	movs	r0, #82	; 0x52
10009098:	4684      	mov	ip, r0
1000909a:	384a      	subs	r0, #74	; 0x4a
1000909c:	4682      	mov	sl, r0
1000909e:	4660      	mov	r0, ip
100090a0:	4654      	mov	r4, sl
100090a2:	5414      	strb	r4, [r2, r0]
			b = *s++;
100090a4:	7b9c      	ldrb	r4, [r3, #14]
100090a6:	940d      	str	r4, [sp, #52]	; 0x34
			if (b != 0) *d = TILE_EMPTY;
100090a8:	2c00      	cmp	r4, #0
100090aa:	d006      	beq.n	100090ba <_Z4Gamev.part.0+0x14a>
100090ac:	2053      	movs	r0, #83	; 0x53
100090ae:	4684      	mov	ip, r0
100090b0:	384b      	subs	r0, #75	; 0x4b
100090b2:	4682      	mov	sl, r0
100090b4:	4660      	mov	r0, ip
100090b6:	4654      	mov	r4, sl
100090b8:	5414      	strb	r4, [r2, r0]
			b = *s++;
100090ba:	7bdb      	ldrb	r3, [r3, #15]
100090bc:	930e      	str	r3, [sp, #56]	; 0x38
			if (b != 0) *d = TILE_EMPTY;
100090be:	2b00      	cmp	r3, #0
100090c0:	d002      	beq.n	100090c8 <_Z4Gamev.part.0+0x158>
100090c2:	2354      	movs	r3, #84	; 0x54
100090c4:	2008      	movs	r0, #8
100090c6:	54d0      	strb	r0, [r2, r3]
			if (!CheckBrick(BrickX, BrickY+1, Brick))
100090c8:	b2cb      	uxtb	r3, r1
100090ca:	1c59      	adds	r1, r3, #1
100090cc:	b2cc      	uxtb	r4, r1
100090ce:	b249      	sxtb	r1, r1
100090d0:	940f      	str	r4, [sp, #60]	; 0x3c
100090d2:	000c      	movs	r4, r1
	u8* d = &Board[x + y*MAPW];
100090d4:	46a4      	mov	ip, r4
			if (!CheckBrick(BrickX, BrickY+1, Brick))
100090d6:	9112      	str	r1, [sp, #72]	; 0x48
	u8* d = &Board[x + y*MAPW];
100090d8:	0049      	lsls	r1, r1, #1
100090da:	4461      	add	r1, ip
100090dc:	00cc      	lsls	r4, r1, #3
100090de:	46a4      	mov	ip, r4
100090e0:	9810      	ldr	r0, [sp, #64]	; 0x40
100090e2:	4461      	add	r1, ip
100090e4:	4684      	mov	ip, r0
100090e6:	4461      	add	r1, ip
100090e8:	0008      	movs	r0, r1
			if (b != 0)
100090ea:	9c01      	ldr	r4, [sp, #4]
	u8* d = &Board[x + y*MAPW];
100090ec:	9113      	str	r1, [sp, #76]	; 0x4c
100090ee:	4458      	add	r0, fp
			if (b != 0)
100090f0:	2c00      	cmp	r4, #0
100090f2:	d101      	bne.n	100090f8 <_Z4Gamev.part.0+0x188>
100090f4:	f000 fd2f 	bl	10009b56 <_Z4Gamev.part.0+0xbe6>
				if ((y < 1) || (y >= MAPH-1))
100090f8:	2b11      	cmp	r3, #17
100090fa:	d901      	bls.n	10009100 <_Z4Gamev.part.0+0x190>
100090fc:	f000 fde1 	bl	10009cc2 <_Z4Gamev.part.0+0xd52>
					if (*d != TILE_EMPTY) ok = False;
10009100:	465c      	mov	r4, fp
10009102:	5c61      	ldrb	r1, [r4, r1]
10009104:	3908      	subs	r1, #8
10009106:	000c      	movs	r4, r1
10009108:	4261      	negs	r1, r4
1000910a:	4161      	adcs	r1, r4
			if (b != 0)
1000910c:	9c02      	ldr	r4, [sp, #8]
	Bool ok = True;
1000910e:	b2c9      	uxtb	r1, r1
			if (b != 0)
10009110:	2c00      	cmp	r4, #0
10009112:	d001      	beq.n	10009118 <_Z4Gamev.part.0+0x1a8>
10009114:	f000 fd97 	bl	10009c46 <_Z4Gamev.part.0+0xcd6>
10009118:	9c06      	ldr	r4, [sp, #24]
1000911a:	2c00      	cmp	r4, #0
1000911c:	d001      	beq.n	10009122 <_Z4Gamev.part.0+0x1b2>
1000911e:	f000 fda1 	bl	10009c64 <_Z4Gamev.part.0+0xcf4>
10009122:	9c0a      	ldr	r4, [sp, #40]	; 0x28
10009124:	2c00      	cmp	r4, #0
10009126:	d00a      	beq.n	1000913e <_Z4Gamev.part.0+0x1ce>
					if (*d != TILE_EMPTY) ok = False;
10009128:	78c4      	ldrb	r4, [r0, #3]
1000912a:	46a4      	mov	ip, r4
					ok = False;
1000912c:	2408      	movs	r4, #8
1000912e:	4264      	negs	r4, r4
10009130:	46a2      	mov	sl, r4
10009132:	44d4      	add	ip, sl
10009134:	4665      	mov	r5, ip
10009136:	426c      	negs	r4, r5
10009138:	416c      	adcs	r4, r5
1000913a:	4264      	negs	r4, r4
1000913c:	4021      	ands	r1, r4
		y++;
1000913e:	1c9c      	adds	r4, r3, #2
10009140:	b2e4      	uxtb	r4, r4
10009142:	9410      	str	r4, [sp, #64]	; 0x40
			if (b != 0)
10009144:	9c03      	ldr	r4, [sp, #12]
10009146:	2c00      	cmp	r4, #0
10009148:	d101      	bne.n	1000914e <_Z4Gamev.part.0+0x1de>
1000914a:	f000 fce9 	bl	10009b20 <_Z4Gamev.part.0+0xbb0>
				if ((y < 1) || (y >= MAPH-1))
1000914e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
10009150:	2c11      	cmp	r4, #17
10009152:	d901      	bls.n	10009158 <_Z4Gamev.part.0+0x1e8>
10009154:	f000 fdc0 	bl	10009cd8 <_Z4Gamev.part.0+0xd68>
					if (*d != TILE_EMPTY) ok = False;
10009158:	7ec4      	ldrb	r4, [r0, #27]
1000915a:	46a4      	mov	ip, r4
1000915c:	2408      	movs	r4, #8
1000915e:	4264      	negs	r4, r4
10009160:	46a2      	mov	sl, r4
10009162:	44d4      	add	ip, sl
10009164:	4665      	mov	r5, ip
10009166:	426c      	negs	r4, r5
10009168:	416c      	adcs	r4, r5
1000916a:	4264      	negs	r4, r4
1000916c:	4021      	ands	r1, r4
			if (b != 0)
1000916e:	9c04      	ldr	r4, [sp, #16]
10009170:	2c00      	cmp	r4, #0
10009172:	d001      	beq.n	10009178 <_Z4Gamev.part.0+0x208>
10009174:	f000 fd07 	bl	10009b86 <_Z4Gamev.part.0+0xc16>
10009178:	9c07      	ldr	r4, [sp, #28]
1000917a:	2c00      	cmp	r4, #0
1000917c:	d001      	beq.n	10009182 <_Z4Gamev.part.0+0x212>
1000917e:	f000 fcd8 	bl	10009b32 <_Z4Gamev.part.0+0xbc2>
10009182:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
10009184:	2c00      	cmp	r4, #0
10009186:	d00a      	beq.n	1000919e <_Z4Gamev.part.0+0x22e>
					if (*d != TILE_EMPTY) ok = False;
10009188:	7f84      	ldrb	r4, [r0, #30]
1000918a:	46a4      	mov	ip, r4
					ok = False;
1000918c:	2408      	movs	r4, #8
1000918e:	4264      	negs	r4, r4
10009190:	46a2      	mov	sl, r4
10009192:	44d4      	add	ip, sl
10009194:	4665      	mov	r5, ip
10009196:	426c      	negs	r4, r5
10009198:	416c      	adcs	r4, r5
1000919a:	4264      	negs	r4, r4
1000919c:	4021      	ands	r1, r4
		y++;
1000919e:	3303      	adds	r3, #3
100091a0:	b2db      	uxtb	r3, r3
100091a2:	469a      	mov	sl, r3
			if (b != 0)
100091a4:	9b05      	ldr	r3, [sp, #20]
100091a6:	2b00      	cmp	r3, #0
100091a8:	d101      	bne.n	100091ae <_Z4Gamev.part.0+0x23e>
100091aa:	f000 fca2 	bl	10009af2 <_Z4Gamev.part.0+0xb82>
				if ((y < 1) || (y >= MAPH-1))
100091ae:	9b10      	ldr	r3, [sp, #64]	; 0x40
100091b0:	2b11      	cmp	r3, #17
100091b2:	d901      	bls.n	100091b8 <_Z4Gamev.part.0+0x248>
100091b4:	f000 fd68 	bl	10009c88 <_Z4Gamev.part.0+0xd18>
					if (*d != TILE_EMPTY) ok = False;
100091b8:	2336      	movs	r3, #54	; 0x36
100091ba:	5cc3      	ldrb	r3, [r0, r3]
100091bc:	3b08      	subs	r3, #8
100091be:	001c      	movs	r4, r3
100091c0:	4263      	negs	r3, r4
100091c2:	4163      	adcs	r3, r4
100091c4:	425b      	negs	r3, r3
100091c6:	4019      	ands	r1, r3
			if (b != 0)
100091c8:	2e00      	cmp	r6, #0
100091ca:	d001      	beq.n	100091d0 <_Z4Gamev.part.0+0x260>
100091cc:	f000 fcf9 	bl	10009bc2 <_Z4Gamev.part.0+0xc52>
100091d0:	9b08      	ldr	r3, [sp, #32]
100091d2:	2b00      	cmp	r3, #0
100091d4:	d001      	beq.n	100091da <_Z4Gamev.part.0+0x26a>
100091d6:	f000 fc94 	bl	10009b02 <_Z4Gamev.part.0+0xb92>
100091da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
100091dc:	2b00      	cmp	r3, #0
100091de:	d007      	beq.n	100091f0 <_Z4Gamev.part.0+0x280>
					if (*d != TILE_EMPTY) ok = False;
100091e0:	2339      	movs	r3, #57	; 0x39
100091e2:	5cc3      	ldrb	r3, [r0, r3]
					ok = False;
100091e4:	3b08      	subs	r3, #8
100091e6:	001c      	movs	r4, r3
100091e8:	4263      	negs	r3, r4
100091ea:	4163      	adcs	r3, r4
100091ec:	425b      	negs	r3, r3
100091ee:	4019      	ands	r1, r3
			if (b != 0)
100091f0:	2f00      	cmp	r7, #0
100091f2:	d100      	bne.n	100091f6 <_Z4Gamev.part.0+0x286>
100091f4:	e287      	b.n	10009706 <_Z4Gamev.part.0+0x796>
				if ((y < 1) || (y >= MAPH-1))
100091f6:	4653      	mov	r3, sl
100091f8:	2b11      	cmp	r3, #17
100091fa:	d80f      	bhi.n	1000921c <_Z4Gamev.part.0+0x2ac>
					if (*d != TILE_EMPTY) ok = False;
100091fc:	2351      	movs	r3, #81	; 0x51
100091fe:	5cc3      	ldrb	r3, [r0, r3]
10009200:	2b08      	cmp	r3, #8
10009202:	d101      	bne.n	10009208 <_Z4Gamev.part.0+0x298>
10009204:	f000 fe50 	bl	10009ea8 <_Z4Gamev.part.0+0xf38>
			if (b != 0)
10009208:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1000920a:	2b00      	cmp	r3, #0
1000920c:	d006      	beq.n	1000921c <_Z4Gamev.part.0+0x2ac>
1000920e:	2100      	movs	r1, #0
					if (*d != TILE_EMPTY) ok = False;
10009210:	2353      	movs	r3, #83	; 0x53
10009212:	5cc3      	ldrb	r3, [r0, r3]
10009214:	2b08      	cmp	r3, #8
10009216:	d101      	bne.n	1000921c <_Z4Gamev.part.0+0x2ac>
10009218:	f000 fd4e 	bl	10009cb8 <_Z4Gamev.part.0+0xd48>
			if (b != 0) *d = b;
1000921c:	9b01      	ldr	r3, [sp, #4]
1000921e:	2b00      	cmp	r3, #0
10009220:	d002      	beq.n	10009228 <_Z4Gamev.part.0+0x2b8>
10009222:	4659      	mov	r1, fp
10009224:	9811      	ldr	r0, [sp, #68]	; 0x44
10009226:	540b      	strb	r3, [r1, r0]
10009228:	9b02      	ldr	r3, [sp, #8]
1000922a:	2b00      	cmp	r3, #0
1000922c:	d000      	beq.n	10009230 <_Z4Gamev.part.0+0x2c0>
1000922e:	7053      	strb	r3, [r2, #1]
10009230:	9b06      	ldr	r3, [sp, #24]
10009232:	2b00      	cmp	r3, #0
10009234:	d000      	beq.n	10009238 <_Z4Gamev.part.0+0x2c8>
10009236:	7093      	strb	r3, [r2, #2]
10009238:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1000923a:	2b00      	cmp	r3, #0
1000923c:	d000      	beq.n	10009240 <_Z4Gamev.part.0+0x2d0>
1000923e:	70d3      	strb	r3, [r2, #3]
10009240:	9b03      	ldr	r3, [sp, #12]
10009242:	2b00      	cmp	r3, #0
10009244:	d000      	beq.n	10009248 <_Z4Gamev.part.0+0x2d8>
10009246:	76d3      	strb	r3, [r2, #27]
10009248:	9b04      	ldr	r3, [sp, #16]
1000924a:	2b00      	cmp	r3, #0
1000924c:	d000      	beq.n	10009250 <_Z4Gamev.part.0+0x2e0>
1000924e:	7713      	strb	r3, [r2, #28]
10009250:	9b07      	ldr	r3, [sp, #28]
10009252:	2b00      	cmp	r3, #0
10009254:	d000      	beq.n	10009258 <_Z4Gamev.part.0+0x2e8>
10009256:	7753      	strb	r3, [r2, #29]
10009258:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1000925a:	2b00      	cmp	r3, #0
1000925c:	d000      	beq.n	10009260 <_Z4Gamev.part.0+0x2f0>
1000925e:	7793      	strb	r3, [r2, #30]
10009260:	9905      	ldr	r1, [sp, #20]
10009262:	2900      	cmp	r1, #0
10009264:	d001      	beq.n	1000926a <_Z4Gamev.part.0+0x2fa>
10009266:	2336      	movs	r3, #54	; 0x36
10009268:	54d1      	strb	r1, [r2, r3]
1000926a:	2e00      	cmp	r6, #0
1000926c:	d001      	beq.n	10009272 <_Z4Gamev.part.0+0x302>
1000926e:	2337      	movs	r3, #55	; 0x37
10009270:	54d6      	strb	r6, [r2, r3]
10009272:	9908      	ldr	r1, [sp, #32]
10009274:	2900      	cmp	r1, #0
10009276:	d001      	beq.n	1000927c <_Z4Gamev.part.0+0x30c>
10009278:	2338      	movs	r3, #56	; 0x38
1000927a:	54d1      	strb	r1, [r2, r3]
1000927c:	990c      	ldr	r1, [sp, #48]	; 0x30
1000927e:	2900      	cmp	r1, #0
10009280:	d001      	beq.n	10009286 <_Z4Gamev.part.0+0x316>
10009282:	2339      	movs	r3, #57	; 0x39
10009284:	54d1      	strb	r1, [r2, r3]
10009286:	2f00      	cmp	r7, #0
10009288:	d001      	beq.n	1000928e <_Z4Gamev.part.0+0x31e>
1000928a:	2351      	movs	r3, #81	; 0x51
1000928c:	54d7      	strb	r7, [r2, r3]
1000928e:	9909      	ldr	r1, [sp, #36]	; 0x24
10009290:	2900      	cmp	r1, #0
10009292:	d001      	beq.n	10009298 <_Z4Gamev.part.0+0x328>
10009294:	2352      	movs	r3, #82	; 0x52
10009296:	54d1      	strb	r1, [r2, r3]
10009298:	990d      	ldr	r1, [sp, #52]	; 0x34
1000929a:	2900      	cmp	r1, #0
1000929c:	d001      	beq.n	100092a2 <_Z4Gamev.part.0+0x332>
1000929e:	2353      	movs	r3, #83	; 0x53
100092a0:	54d1      	strb	r1, [r2, r3]
100092a2:	990e      	ldr	r1, [sp, #56]	; 0x38
100092a4:	2900      	cmp	r1, #0
100092a6:	d001      	beq.n	100092ac <_Z4Gamev.part.0+0x33c>
100092a8:	2354      	movs	r3, #84	; 0x54
100092aa:	54d1      	strb	r1, [r2, r3]
				Score += BrickScore;
100092ac:	4b16      	ldr	r3, [pc, #88]	; (10009308 <_Z4Gamev.part.0+0x398>)
	DispTileNum(TILE_SCOREV1, Score, COL_WHITE);
100092ae:	22ff      	movs	r2, #255	; 0xff
				Score += BrickScore;
100092b0:	681b      	ldr	r3, [r3, #0]
	DispTileNum(TILE_SCOREV1, Score, COL_WHITE);
100092b2:	202e      	movs	r0, #46	; 0x2e
				Score += BrickScore;
100092b4:	9301      	str	r3, [sp, #4]
100092b6:	4b15      	ldr	r3, [pc, #84]	; (1000930c <_Z4Gamev.part.0+0x39c>)
100092b8:	9901      	ldr	r1, [sp, #4]
100092ba:	681b      	ldr	r3, [r3, #0]
	for (y = MAPH-2; y > 1; y--)
100092bc:	2412      	movs	r4, #18
				Score += BrickScore;
100092be:	469c      	mov	ip, r3
100092c0:	9302      	str	r3, [sp, #8]
100092c2:	4b11      	ldr	r3, [pc, #68]	; (10009308 <_Z4Gamev.part.0+0x398>)
100092c4:	4461      	add	r1, ip
100092c6:	6019      	str	r1, [r3, #0]
	DispTileNum(TILE_SCOREV1, Score, COL_WHITE);
100092c8:	f7fe fa10 	bl	100076ec <_Z11DispTileNumhih>
	DispTileNum(TILE_SCOREV3, ScoreBest, COL_YELLOW);
100092cc:	4b10      	ldr	r3, [pc, #64]	; (10009310 <_Z4Gamev.part.0+0x3a0>)
100092ce:	22fc      	movs	r2, #252	; 0xfc
100092d0:	681b      	ldr	r3, [r3, #0]
100092d2:	2042      	movs	r0, #66	; 0x42
100092d4:	0019      	movs	r1, r3
100092d6:	9301      	str	r3, [sp, #4]
100092d8:	f7fe fa08 	bl	100076ec <_Z11DispTileNumhih>
	DispTileNum(TILE_LINESV1, Lines, COL_WHITE);
100092dc:	4b0d      	ldr	r3, [pc, #52]	; (10009314 <_Z4Gamev.part.0+0x3a4>)
100092de:	22ff      	movs	r2, #255	; 0xff
100092e0:	681b      	ldr	r3, [r3, #0]
100092e2:	2030      	movs	r0, #48	; 0x30
100092e4:	0019      	movs	r1, r3
100092e6:	9301      	str	r3, [sp, #4]
100092e8:	f7fe fa00 	bl	100076ec <_Z11DispTileNumhih>
	DispTileNum(TILE_LINESV3, LinesBest, COL_YELLOW);
100092ec:	4b0a      	ldr	r3, [pc, #40]	; (10009318 <_Z4Gamev.part.0+0x3a8>)
100092ee:	22fc      	movs	r2, #252	; 0xfc
100092f0:	681b      	ldr	r3, [r3, #0]
100092f2:	e013      	b.n	1000931c <_Z4Gamev.part.0+0x3ac>
100092f4:	20012768 	.word	0x20012768
100092f8:	20012766 	.word	0x20012766
100092fc:	20012765 	.word	0x20012765
10009300:	20012764 	.word	0x20012764
10009304:	10010bd4 	.word	0x10010bd4
10009308:	20007108 	.word	0x20007108
1000930c:	20003498 	.word	0x20003498
10009310:	2000710c 	.word	0x2000710c
10009314:	200061f4 	.word	0x200061f4
10009318:	200061f8 	.word	0x200061f8
1000931c:	2044      	movs	r0, #68	; 0x44
1000931e:	0019      	movs	r1, r3
10009320:	9301      	str	r3, [sp, #4]
10009322:	f7fe f9e3 	bl	100076ec <_Z11DispTileNumhih>
	DispTileNum(TILE_SPEEDV1, Level, COL_WHITE);
10009326:	4b9c      	ldr	r3, [pc, #624]	; (10009598 <_Z4Gamev.part.0+0x628>)
10009328:	22ff      	movs	r2, #255	; 0xff
1000932a:	7819      	ldrb	r1, [r3, #0]
1000932c:	2032      	movs	r0, #50	; 0x32
1000932e:	f7fe f9dd 	bl	100076ec <_Z11DispTileNumhih>
	DispTileNum(TILE_SPEEDV3, LevelBest, COL_YELLOW);
10009332:	4b9a      	ldr	r3, [pc, #616]	; (1000959c <_Z4Gamev.part.0+0x62c>)
10009334:	22fc      	movs	r2, #252	; 0xfc
10009336:	7819      	ldrb	r1, [r3, #0]
10009338:	2046      	movs	r0, #70	; 0x46
1000933a:	f7fe f9d7 	bl	100076ec <_Z11DispTileNumhih>
				PlaySound(BrickSnd, sizeof(BrickSnd));
1000933e:	23fe      	movs	r3, #254	; 0xfe
10009340:	2200      	movs	r2, #0
10009342:	4997      	ldr	r1, [pc, #604]	; (100095a0 <_Z4Gamev.part.0+0x630>)
10009344:	4897      	ldr	r0, [pc, #604]	; (100095a4 <_Z4Gamev.part.0+0x634>)
10009346:	059b      	lsls	r3, r3, #22
10009348:	f006 fafa 	bl	1000f940 <_Z9PlaySoundPKhihf>
	for (y = MAPH-2; y > 1; y--)
1000934c:	2524      	movs	r5, #36	; 0x24
		s = &Board[y*MAPW + 8];
1000934e:	192a      	adds	r2, r5, r4
10009350:	00d3      	lsls	r3, r2, #3
10009352:	18d2      	adds	r2, r2, r3
			if (*s == TILE_EMPTY)
10009354:	4659      	mov	r1, fp
		s = &Board[y*MAPW + 8];
10009356:	465b      	mov	r3, fp
10009358:	3208      	adds	r2, #8
1000935a:	189b      	adds	r3, r3, r2
			if (*s == TILE_EMPTY)
1000935c:	5c8a      	ldrb	r2, [r1, r2]
1000935e:	2a08      	cmp	r2, #8
10009360:	d023      	beq.n	100093aa <_Z4Gamev.part.0+0x43a>
10009362:	785a      	ldrb	r2, [r3, #1]
10009364:	2a08      	cmp	r2, #8
10009366:	d020      	beq.n	100093aa <_Z4Gamev.part.0+0x43a>
10009368:	789a      	ldrb	r2, [r3, #2]
1000936a:	2a08      	cmp	r2, #8
1000936c:	d01d      	beq.n	100093aa <_Z4Gamev.part.0+0x43a>
1000936e:	78da      	ldrb	r2, [r3, #3]
10009370:	2a08      	cmp	r2, #8
10009372:	d01a      	beq.n	100093aa <_Z4Gamev.part.0+0x43a>
10009374:	791a      	ldrb	r2, [r3, #4]
10009376:	2a08      	cmp	r2, #8
10009378:	d017      	beq.n	100093aa <_Z4Gamev.part.0+0x43a>
1000937a:	795a      	ldrb	r2, [r3, #5]
1000937c:	2a08      	cmp	r2, #8
1000937e:	d014      	beq.n	100093aa <_Z4Gamev.part.0+0x43a>
10009380:	799a      	ldrb	r2, [r3, #6]
10009382:	2a08      	cmp	r2, #8
10009384:	d011      	beq.n	100093aa <_Z4Gamev.part.0+0x43a>
10009386:	79da      	ldrb	r2, [r3, #7]
10009388:	2a08      	cmp	r2, #8
1000938a:	d00e      	beq.n	100093aa <_Z4Gamev.part.0+0x43a>
1000938c:	7a1a      	ldrb	r2, [r3, #8]
1000938e:	2a08      	cmp	r2, #8
10009390:	d00b      	beq.n	100093aa <_Z4Gamev.part.0+0x43a>
10009392:	7a5b      	ldrb	r3, [r3, #9]
10009394:	2b08      	cmp	r3, #8
10009396:	d008      	beq.n	100093aa <_Z4Gamev.part.0+0x43a>
			DelRow(y);
10009398:	b2e0      	uxtb	r0, r4
1000939a:	f7fe fc8b 	bl	10007cb4 <_Z6DelRowh>
			NextLevel--;
1000939e:	464b      	mov	r3, r9
100093a0:	464a      	mov	r2, r9
100093a2:	681b      	ldr	r3, [r3, #0]
100093a4:	3b01      	subs	r3, #1
100093a6:	6013      	str	r3, [r2, #0]
	for (y = MAPH-2; y > 1; y--)
100093a8:	e7d1      	b.n	1000934e <_Z4Gamev.part.0+0x3de>
100093aa:	3c01      	subs	r4, #1
100093ac:	2c01      	cmp	r4, #1
100093ae:	d001      	beq.n	100093b4 <_Z4Gamev.part.0+0x444>
100093b0:	0065      	lsls	r5, r4, #1
100093b2:	e7cc      	b.n	1000934e <_Z4Gamev.part.0+0x3de>
	if ((NextLevel <= 0) && (Level < LEVELNUM) && !Demo)
100093b4:	464b      	mov	r3, r9
100093b6:	681b      	ldr	r3, [r3, #0]
100093b8:	2b00      	cmp	r3, #0
100093ba:	dc01      	bgt.n	100093c0 <_Z4Gamev.part.0+0x450>
100093bc:	f7fe faec 	bl	10007998 <_Z10DelAllRowsv.part.0>
				sleep_ms(50);
100093c0:	2032      	movs	r0, #50	; 0x32
100093c2:	f7fb fa39 	bl	10004838 <sleep_ms>
				GenBrick();
100093c6:	f7fe fd17 	bl	10007df8 <_Z8GenBrickv>
	if (!CheckBrick(BrickX, BrickY, Brick))
100093ca:	2200      	movs	r2, #0
	u8* d = &Board[x + y*MAPW];
100093cc:	2400      	movs	r4, #0
	if (!CheckBrick(BrickX, BrickY, Brick))
100093ce:	4b76      	ldr	r3, [pc, #472]	; (100095a8 <_Z4Gamev.part.0+0x638>)
	u8* d = &Board[x + y*MAPW];
100093d0:	4976      	ldr	r1, [pc, #472]	; (100095ac <_Z4Gamev.part.0+0x63c>)
	if (!CheckBrick(BrickX, BrickY, Brick))
100093d2:	569a      	ldrsb	r2, [r3, r2]
	u8* d = &Board[x + y*MAPW];
100093d4:	570c      	ldrsb	r4, [r1, r4]
100093d6:	0051      	lsls	r1, r2, #1
100093d8:	1889      	adds	r1, r1, r2
100093da:	00c8      	lsls	r0, r1, #3
100093dc:	1809      	adds	r1, r1, r0
100093de:	1864      	adds	r4, r4, r1
100093e0:	4659      	mov	r1, fp
	const u8* s = &BrickTemp[brick*BRICKTEMPSIZE];
100093e2:	4b73      	ldr	r3, [pc, #460]	; (100095b0 <_Z4Gamev.part.0+0x640>)
	u8* d = &Board[x + y*MAPW];
100093e4:	1908      	adds	r0, r1, r4
	const u8* s = &BrickTemp[brick*BRICKTEMPSIZE];
100093e6:	781d      	ldrb	r5, [r3, #0]
			b = *s++;
100093e8:	4972      	ldr	r1, [pc, #456]	; (100095b4 <_Z4Gamev.part.0+0x644>)
	const u8* s = &BrickTemp[brick*BRICKTEMPSIZE];
100093ea:	012d      	lsls	r5, r5, #4
100093ec:	4b71      	ldr	r3, [pc, #452]	; (100095b4 <_Z4Gamev.part.0+0x644>)
			b = *s++;
100093ee:	5d49      	ldrb	r1, [r1, r5]
	const u8* s = &BrickTemp[brick*BRICKTEMPSIZE];
100093f0:	195b      	adds	r3, r3, r5
			b = *s++;
100093f2:	9103      	str	r1, [sp, #12]
				if ((y < 1) || (y >= MAPH-1))
100093f4:	b2d2      	uxtb	r2, r2
			if (b != 0)
100093f6:	2900      	cmp	r1, #0
100093f8:	d100      	bne.n	100093fc <_Z4Gamev.part.0+0x48c>
100093fa:	e0e1      	b.n	100095c0 <_Z4Gamev.part.0+0x650>
				if ((y < 1) || (y >= MAPH-1))
100093fc:	1e51      	subs	r1, r2, #1
100093fe:	2911      	cmp	r1, #17
10009400:	d901      	bls.n	10009406 <_Z4Gamev.part.0+0x496>
10009402:	f000 fc74 	bl	10009cee <_Z4Gamev.part.0+0xd7e>
					if (*d != TILE_EMPTY) ok = False;
10009406:	4659      	mov	r1, fp
10009408:	5d09      	ldrb	r1, [r1, r4]
1000940a:	3908      	subs	r1, #8
1000940c:	424d      	negs	r5, r1
1000940e:	4169      	adcs	r1, r5
			if (b != 0)
10009410:	785d      	ldrb	r5, [r3, #1]
	Bool ok = True;
10009412:	b2c9      	uxtb	r1, r1
			if (b != 0)
10009414:	2d00      	cmp	r5, #0
10009416:	d001      	beq.n	1000941c <_Z4Gamev.part.0+0x4ac>
10009418:	f000 fc6b 	bl	10009cf2 <_Z4Gamev.part.0+0xd82>
1000941c:	789d      	ldrb	r5, [r3, #2]
1000941e:	2d00      	cmp	r5, #0
10009420:	d100      	bne.n	10009424 <_Z4Gamev.part.0+0x4b4>
10009422:	e0de      	b.n	100095e2 <_Z4Gamev.part.0+0x672>
					if (*d != TILE_EMPTY) ok = False;
10009424:	7885      	ldrb	r5, [r0, #2]
10009426:	3d08      	subs	r5, #8
10009428:	426e      	negs	r6, r5
1000942a:	4175      	adcs	r5, r6
1000942c:	426d      	negs	r5, r5
1000942e:	4029      	ands	r1, r5
			if (b != 0)
10009430:	78dd      	ldrb	r5, [r3, #3]
10009432:	2d00      	cmp	r5, #0
10009434:	d005      	beq.n	10009442 <_Z4Gamev.part.0+0x4d2>
					if (*d != TILE_EMPTY) ok = False;
10009436:	78c5      	ldrb	r5, [r0, #3]
10009438:	3d08      	subs	r5, #8
1000943a:	426e      	negs	r6, r5
1000943c:	4175      	adcs	r5, r6
1000943e:	426d      	negs	r5, r5
10009440:	4029      	ands	r1, r5
			b = *s++;
10009442:	791e      	ldrb	r6, [r3, #4]
		y++;
10009444:	1c55      	adds	r5, r2, #1
10009446:	b2ed      	uxtb	r5, r5
			b = *s++;
10009448:	9602      	str	r6, [sp, #8]
			if (b != 0)
1000944a:	2e00      	cmp	r6, #0
1000944c:	d100      	bne.n	10009450 <_Z4Gamev.part.0+0x4e0>
1000944e:	e0d8      	b.n	10009602 <_Z4Gamev.part.0+0x692>
				if ((y < 1) || (y >= MAPH-1))
10009450:	2a11      	cmp	r2, #17
10009452:	d900      	bls.n	10009456 <_Z4Gamev.part.0+0x4e6>
10009454:	e3d9      	b.n	10009c0a <_Z4Gamev.part.0+0xc9a>
					if (*d != TILE_EMPTY) ok = False;
10009456:	7ec7      	ldrb	r7, [r0, #27]
10009458:	3f08      	subs	r7, #8
1000945a:	003e      	movs	r6, r7
1000945c:	4277      	negs	r7, r6
1000945e:	4177      	adcs	r7, r6
10009460:	427f      	negs	r7, r7
10009462:	4039      	ands	r1, r7
			if (b != 0)
10009464:	795f      	ldrb	r7, [r3, #5]
10009466:	2f00      	cmp	r7, #0
10009468:	d000      	beq.n	1000946c <_Z4Gamev.part.0+0x4fc>
1000946a:	e0d1      	b.n	10009610 <_Z4Gamev.part.0+0x6a0>
1000946c:	799f      	ldrb	r7, [r3, #6]
1000946e:	2f00      	cmp	r7, #0
10009470:	d000      	beq.n	10009474 <_Z4Gamev.part.0+0x504>
10009472:	e0d8      	b.n	10009626 <_Z4Gamev.part.0+0x6b6>
10009474:	79df      	ldrb	r7, [r3, #7]
10009476:	2f00      	cmp	r7, #0
10009478:	d006      	beq.n	10009488 <_Z4Gamev.part.0+0x518>
					if (*d != TILE_EMPTY) ok = False;
1000947a:	7f87      	ldrb	r7, [r0, #30]
					ok = False;
1000947c:	3f08      	subs	r7, #8
1000947e:	003e      	movs	r6, r7
10009480:	4277      	negs	r7, r6
10009482:	4177      	adcs	r7, r6
10009484:	427f      	negs	r7, r7
10009486:	4039      	ands	r1, r7
		y++;
10009488:	3202      	adds	r2, #2
			b = *s++;
1000948a:	7a1f      	ldrb	r7, [r3, #8]
		y++;
1000948c:	b2d2      	uxtb	r2, r2
1000948e:	9201      	str	r2, [sp, #4]
			if (b != 0)
10009490:	2f00      	cmp	r7, #0
10009492:	d100      	bne.n	10009496 <_Z4Gamev.part.0+0x526>
10009494:	e0d9      	b.n	1000964a <_Z4Gamev.part.0+0x6da>
				if ((y < 1) || (y >= MAPH-1))
10009496:	2d11      	cmp	r5, #17
10009498:	d900      	bls.n	1000949c <_Z4Gamev.part.0+0x52c>
1000949a:	e3aa      	b.n	10009bf2 <_Z4Gamev.part.0+0xc82>
					if (*d != TILE_EMPTY) ok = False;
1000949c:	2636      	movs	r6, #54	; 0x36
1000949e:	5d86      	ldrb	r6, [r0, r6]
100094a0:	46b4      	mov	ip, r6
100094a2:	2608      	movs	r6, #8
100094a4:	4276      	negs	r6, r6
100094a6:	46b2      	mov	sl, r6
100094a8:	44d4      	add	ip, sl
100094aa:	4662      	mov	r2, ip
100094ac:	4256      	negs	r6, r2
100094ae:	4156      	adcs	r6, r2
100094b0:	4272      	negs	r2, r6
100094b2:	4011      	ands	r1, r2
			if (b != 0)
100094b4:	7a5a      	ldrb	r2, [r3, #9]
100094b6:	2a00      	cmp	r2, #0
100094b8:	d000      	beq.n	100094bc <_Z4Gamev.part.0+0x54c>
100094ba:	e0cd      	b.n	10009658 <_Z4Gamev.part.0+0x6e8>
100094bc:	7a9d      	ldrb	r5, [r3, #10]
100094be:	2d00      	cmp	r5, #0
100094c0:	d000      	beq.n	100094c4 <_Z4Gamev.part.0+0x554>
100094c2:	e0d9      	b.n	10009678 <_Z4Gamev.part.0+0x708>
100094c4:	7add      	ldrb	r5, [r3, #11]
100094c6:	2d00      	cmp	r5, #0
100094c8:	d007      	beq.n	100094da <_Z4Gamev.part.0+0x56a>
					if (*d != TILE_EMPTY) ok = False;
100094ca:	2539      	movs	r5, #57	; 0x39
100094cc:	5d45      	ldrb	r5, [r0, r5]
					ok = False;
100094ce:	3d08      	subs	r5, #8
100094d0:	002a      	movs	r2, r5
100094d2:	4255      	negs	r5, r2
100094d4:	4155      	adcs	r5, r2
100094d6:	426d      	negs	r5, r5
100094d8:	4029      	ands	r1, r5
			b = *s++;
100094da:	7b1d      	ldrb	r5, [r3, #12]
			if (b != 0)
100094dc:	2d00      	cmp	r5, #0
100094de:	d100      	bne.n	100094e2 <_Z4Gamev.part.0+0x572>
100094e0:	e0da      	b.n	10009698 <_Z4Gamev.part.0+0x728>
				if ((y < 1) || (y >= MAPH-1))
100094e2:	9a01      	ldr	r2, [sp, #4]
100094e4:	2a11      	cmp	r2, #17
100094e6:	d81e      	bhi.n	10009526 <_Z4Gamev.part.0+0x5b6>
					if (*d != TILE_EMPTY) ok = False;
100094e8:	2251      	movs	r2, #81	; 0x51
100094ea:	5c82      	ldrb	r2, [r0, r2]
100094ec:	4694      	mov	ip, r2
100094ee:	2208      	movs	r2, #8
100094f0:	4252      	negs	r2, r2
100094f2:	4692      	mov	sl, r2
100094f4:	44d4      	add	ip, sl
100094f6:	4666      	mov	r6, ip
100094f8:	4272      	negs	r2, r6
100094fa:	4172      	adcs	r2, r6
100094fc:	4252      	negs	r2, r2
100094fe:	4011      	ands	r1, r2
			if (b != 0)
10009500:	7b5a      	ldrb	r2, [r3, #13]
10009502:	2a00      	cmp	r2, #0
10009504:	d000      	beq.n	10009508 <_Z4Gamev.part.0+0x598>
10009506:	e0cf      	b.n	100096a8 <_Z4Gamev.part.0+0x738>
10009508:	7b9a      	ldrb	r2, [r3, #14]
1000950a:	2a00      	cmp	r2, #0
1000950c:	d000      	beq.n	10009510 <_Z4Gamev.part.0+0x5a0>
1000950e:	e0d6      	b.n	100096be <_Z4Gamev.part.0+0x74e>
10009510:	7bda      	ldrb	r2, [r3, #15]
10009512:	2a00      	cmp	r2, #0
10009514:	d101      	bne.n	1000951a <_Z4Gamev.part.0+0x5aa>
10009516:	f000 fc15 	bl	10009d44 <_Z4Gamev.part.0+0xdd4>
					if (*d != TILE_EMPTY) ok = False;
1000951a:	2254      	movs	r2, #84	; 0x54
1000951c:	5c82      	ldrb	r2, [r0, r2]
1000951e:	2a08      	cmp	r2, #8
10009520:	d101      	bne.n	10009526 <_Z4Gamev.part.0+0x5b6>
10009522:	f000 fc0f 	bl	10009d44 <_Z4Gamev.part.0+0xdd4>
10009526:	f7fe f95d 	bl	100077e4 <_Z8CheckEndv.part.0>
				if (!CheckEnd())
1000952a:	2800      	cmp	r0, #0
1000952c:	d000      	beq.n	10009530 <_Z4Gamev.part.0+0x5c0>
1000952e:	e0d0      	b.n	100096d2 <_Z4Gamev.part.0+0x762>
					NewGame();
10009530:	f7ff fc4a 	bl	10008dc8 <_Z7NewGamev>
	memcpy(SaveBoard, Board, MAPSIZE);
10009534:	2287      	movs	r2, #135	; 0x87
10009536:	4659      	mov	r1, fp
10009538:	0092      	lsls	r2, r2, #2
1000953a:	481f      	ldr	r0, [pc, #124]	; (100095b8 <_Z4Gamev.part.0+0x648>)
1000953c:	f7f7 fdd8 	bl	100010f0 <__wrap___aeabi_memcpy>
	memcpy(&Board[MAPW/2-4 + MAPH/2*MAPW], PauseMsg, 8);
10009540:	4658      	mov	r0, fp
10009542:	25d0      	movs	r5, #208	; 0xd0
10009544:	3018      	adds	r0, #24
10009546:	2208      	movs	r2, #8
10009548:	491c      	ldr	r1, [pc, #112]	; (100095bc <_Z4Gamev.part.0+0x64c>)
1000954a:	30ff      	adds	r0, #255	; 0xff
1000954c:	f7f7 fdd0 	bl	100010f0 <__wrap___aeabi_memcpy>
10009550:	2401      	movs	r4, #1
10009552:	062d      	lsls	r5, r5, #24
10009554:	e008      	b.n	10009568 <_Z4Gamev.part.0+0x5f8>
10009556:	686b      	ldr	r3, [r5, #4]
10009558:	0e9b      	lsrs	r3, r3, #26
	else if (!gpio_get(PB_UR))
1000955a:	421c      	tst	r4, r3
1000955c:	d001      	beq.n	10009562 <_Z4Gamev.part.0+0x5f2>
1000955e:	f000 fc4f 	bl	10009e00 <_Z4Gamev.part.0+0xe90>
	sleep_ms(100);
10009562:	2064      	movs	r0, #100	; 0x64
10009564:	f7fb f968 	bl	10004838 <sleep_ms>
10009568:	686b      	ldr	r3, [r5, #4]
1000956a:	0d1b      	lsrs	r3, r3, #20
	if (!gpio_get(PB_LT))
1000956c:	421c      	tst	r4, r3
1000956e:	d0f8      	beq.n	10009562 <_Z4Gamev.part.0+0x5f2>
10009570:	686b      	ldr	r3, [r5, #4]
10009572:	0c5b      	lsrs	r3, r3, #17
	else if (!gpio_get(PB_RT))
10009574:	421c      	tst	r4, r3
10009576:	d0f4      	beq.n	10009562 <_Z4Gamev.part.0+0x5f2>
10009578:	686b      	ldr	r3, [r5, #4]
1000957a:	0d9b      	lsrs	r3, r3, #22
	else if (!gpio_get(PB_DN))
1000957c:	421c      	tst	r4, r3
1000957e:	d0f0      	beq.n	10009562 <_Z4Gamev.part.0+0x5f2>
10009580:	686b      	ldr	r3, [r5, #4]
10009582:	0d5b      	lsrs	r3, r3, #21
	else if (!gpio_get(PB_CF))
10009584:	421c      	tst	r4, r3
10009586:	d1e6      	bne.n	10009556 <_Z4Gamev.part.0+0x5e6>
	sleep_ms(100);
10009588:	2064      	movs	r0, #100	; 0x64
1000958a:	f7fb f955 	bl	10004838 <sleep_ms>
		sleep_ms(150);
1000958e:	2096      	movs	r0, #150	; 0x96
10009590:	f7fb f952 	bl	10004838 <sleep_ms>
10009594:	e7e8      	b.n	10009568 <_Z4Gamev.part.0+0x5f8>
10009596:	46c0      	nop			; (mov r8, r8)
10009598:	2001276b 	.word	0x2001276b
1000959c:	2001276c 	.word	0x2001276c
100095a0:	00000932 	.word	0x00000932
100095a4:	1001af04 	.word	0x1001af04
100095a8:	20012766 	.word	0x20012766
100095ac:	20012765 	.word	0x20012765
100095b0:	20012764 	.word	0x20012764
100095b4:	10010bd4 	.word	0x10010bd4
100095b8:	20006c2c 	.word	0x20006c2c
100095bc:	10010948 	.word	0x10010948
	Bool ok = True;
100095c0:	2101      	movs	r1, #1
			if (b != 0)
100095c2:	785d      	ldrb	r5, [r3, #1]
100095c4:	2d00      	cmp	r5, #0
100095c6:	d004      	beq.n	100095d2 <_Z4Gamev.part.0+0x662>
				if ((y < 1) || (y >= MAPH-1))
100095c8:	1e55      	subs	r5, r2, #1
100095ca:	2d11      	cmp	r5, #17
100095cc:	d800      	bhi.n	100095d0 <_Z4Gamev.part.0+0x660>
100095ce:	e390      	b.n	10009cf2 <_Z4Gamev.part.0+0xd82>
					ok = False;
100095d0:	2100      	movs	r1, #0
			if (b != 0)
100095d2:	789d      	ldrb	r5, [r3, #2]
100095d4:	2d00      	cmp	r5, #0
100095d6:	d004      	beq.n	100095e2 <_Z4Gamev.part.0+0x672>
				if ((y < 1) || (y >= MAPH-1))
100095d8:	1e55      	subs	r5, r2, #1
100095da:	2d11      	cmp	r5, #17
100095dc:	d800      	bhi.n	100095e0 <_Z4Gamev.part.0+0x670>
100095de:	e721      	b.n	10009424 <_Z4Gamev.part.0+0x4b4>
					ok = False;
100095e0:	2100      	movs	r1, #0
			if (b != 0)
100095e2:	78dd      	ldrb	r5, [r3, #3]
100095e4:	2d00      	cmp	r5, #0
100095e6:	d100      	bne.n	100095ea <_Z4Gamev.part.0+0x67a>
100095e8:	e72b      	b.n	10009442 <_Z4Gamev.part.0+0x4d2>
				if ((y < 1) || (y >= MAPH-1))
100095ea:	1e55      	subs	r5, r2, #1
100095ec:	2d11      	cmp	r5, #17
100095ee:	d800      	bhi.n	100095f2 <_Z4Gamev.part.0+0x682>
100095f0:	e721      	b.n	10009436 <_Z4Gamev.part.0+0x4c6>
			b = *s++;
100095f2:	791e      	ldrb	r6, [r3, #4]
		y++;
100095f4:	1c55      	adds	r5, r2, #1
					ok = False;
100095f6:	2100      	movs	r1, #0
		y++;
100095f8:	b2ed      	uxtb	r5, r5
			b = *s++;
100095fa:	9602      	str	r6, [sp, #8]
			if (b != 0)
100095fc:	2e00      	cmp	r6, #0
100095fe:	d000      	beq.n	10009602 <_Z4Gamev.part.0+0x692>
10009600:	e726      	b.n	10009450 <_Z4Gamev.part.0+0x4e0>
			b = *s++;
10009602:	795f      	ldrb	r7, [r3, #5]
			if (b != 0)
10009604:	2f00      	cmp	r7, #0
10009606:	d100      	bne.n	1000960a <_Z4Gamev.part.0+0x69a>
10009608:	e37f      	b.n	10009d0a <_Z4Gamev.part.0+0xd9a>
				if ((y < 1) || (y >= MAPH-1))
1000960a:	2a11      	cmp	r2, #17
1000960c:	d900      	bls.n	10009610 <_Z4Gamev.part.0+0x6a0>
1000960e:	e300      	b.n	10009c12 <_Z4Gamev.part.0+0xca2>
					if (*d != TILE_EMPTY) ok = False;
10009610:	7f07      	ldrb	r7, [r0, #28]
10009612:	3f08      	subs	r7, #8
10009614:	003e      	movs	r6, r7
10009616:	4277      	negs	r7, r6
10009618:	4177      	adcs	r7, r6
1000961a:	427f      	negs	r7, r7
1000961c:	4039      	ands	r1, r7
			if (b != 0)
1000961e:	799f      	ldrb	r7, [r3, #6]
10009620:	2f00      	cmp	r7, #0
10009622:	d100      	bne.n	10009626 <_Z4Gamev.part.0+0x6b6>
10009624:	e2f8      	b.n	10009c18 <_Z4Gamev.part.0+0xca8>
					if (*d != TILE_EMPTY) ok = False;
10009626:	7f47      	ldrb	r7, [r0, #29]
10009628:	3f08      	subs	r7, #8
1000962a:	003e      	movs	r6, r7
1000962c:	4277      	negs	r7, r6
1000962e:	4177      	adcs	r7, r6
10009630:	427f      	negs	r7, r7
10009632:	4039      	ands	r1, r7
			if (b != 0)
10009634:	79df      	ldrb	r7, [r3, #7]
10009636:	2f00      	cmp	r7, #0
10009638:	d000      	beq.n	1000963c <_Z4Gamev.part.0+0x6cc>
1000963a:	e71e      	b.n	1000947a <_Z4Gamev.part.0+0x50a>
		y++;
1000963c:	3202      	adds	r2, #2
			b = *s++;
1000963e:	7a1f      	ldrb	r7, [r3, #8]
		y++;
10009640:	b2d2      	uxtb	r2, r2
10009642:	9201      	str	r2, [sp, #4]
			if (b != 0)
10009644:	2f00      	cmp	r7, #0
10009646:	d000      	beq.n	1000964a <_Z4Gamev.part.0+0x6da>
10009648:	e725      	b.n	10009496 <_Z4Gamev.part.0+0x526>
			b = *s++;
1000964a:	7a5e      	ldrb	r6, [r3, #9]
			if (b != 0)
1000964c:	2e00      	cmp	r6, #0
1000964e:	d100      	bne.n	10009652 <_Z4Gamev.part.0+0x6e2>
10009650:	e364      	b.n	10009d1c <_Z4Gamev.part.0+0xdac>
				if ((y < 1) || (y >= MAPH-1))
10009652:	2d11      	cmp	r5, #17
10009654:	d900      	bls.n	10009658 <_Z4Gamev.part.0+0x6e8>
10009656:	e2cc      	b.n	10009bf2 <_Z4Gamev.part.0+0xc82>
					if (*d != TILE_EMPTY) ok = False;
10009658:	2237      	movs	r2, #55	; 0x37
1000965a:	5c82      	ldrb	r2, [r0, r2]
1000965c:	4694      	mov	ip, r2
1000965e:	2208      	movs	r2, #8
10009660:	4252      	negs	r2, r2
10009662:	4692      	mov	sl, r2
10009664:	44d4      	add	ip, sl
10009666:	4666      	mov	r6, ip
10009668:	4272      	negs	r2, r6
1000966a:	4172      	adcs	r2, r6
1000966c:	4252      	negs	r2, r2
1000966e:	4011      	ands	r1, r2
			if (b != 0)
10009670:	7a9a      	ldrb	r2, [r3, #10]
10009672:	2a00      	cmp	r2, #0
10009674:	d100      	bne.n	10009678 <_Z4Gamev.part.0+0x708>
10009676:	e2bf      	b.n	10009bf8 <_Z4Gamev.part.0+0xc88>
					if (*d != TILE_EMPTY) ok = False;
10009678:	2538      	movs	r5, #56	; 0x38
1000967a:	5d45      	ldrb	r5, [r0, r5]
1000967c:	3d08      	subs	r5, #8
1000967e:	002a      	movs	r2, r5
10009680:	4255      	negs	r5, r2
10009682:	4155      	adcs	r5, r2
10009684:	426d      	negs	r5, r5
10009686:	4029      	ands	r1, r5
			if (b != 0)
10009688:	7add      	ldrb	r5, [r3, #11]
1000968a:	2d00      	cmp	r5, #0
1000968c:	d000      	beq.n	10009690 <_Z4Gamev.part.0+0x720>
1000968e:	e71c      	b.n	100094ca <_Z4Gamev.part.0+0x55a>
			b = *s++;
10009690:	7b1d      	ldrb	r5, [r3, #12]
			if (b != 0)
10009692:	2d00      	cmp	r5, #0
10009694:	d000      	beq.n	10009698 <_Z4Gamev.part.0+0x728>
10009696:	e724      	b.n	100094e2 <_Z4Gamev.part.0+0x572>
10009698:	7b5e      	ldrb	r6, [r3, #13]
1000969a:	2e00      	cmp	r6, #0
1000969c:	d100      	bne.n	100096a0 <_Z4Gamev.part.0+0x730>
1000969e:	e347      	b.n	10009d30 <_Z4Gamev.part.0+0xdc0>
				if ((y < 1) || (y >= MAPH-1))
100096a0:	9a01      	ldr	r2, [sp, #4]
100096a2:	2a11      	cmp	r2, #17
100096a4:	d900      	bls.n	100096a8 <_Z4Gamev.part.0+0x738>
100096a6:	e73e      	b.n	10009526 <_Z4Gamev.part.0+0x5b6>
					if (*d != TILE_EMPTY) ok = False;
100096a8:	2252      	movs	r2, #82	; 0x52
100096aa:	5c82      	ldrb	r2, [r0, r2]
100096ac:	2a08      	cmp	r2, #8
100096ae:	d101      	bne.n	100096b4 <_Z4Gamev.part.0+0x744>
100096b0:	f000 fbea 	bl	10009e88 <_Z4Gamev.part.0+0xf18>
			if (b != 0)
100096b4:	7b9a      	ldrb	r2, [r3, #14]
100096b6:	2a00      	cmp	r2, #0
100096b8:	d100      	bne.n	100096bc <_Z4Gamev.part.0+0x74c>
100096ba:	e734      	b.n	10009526 <_Z4Gamev.part.0+0x5b6>
					if (*d != TILE_EMPTY) ok = False;
100096bc:	2100      	movs	r1, #0
100096be:	2253      	movs	r2, #83	; 0x53
100096c0:	5c82      	ldrb	r2, [r0, r2]
100096c2:	2a08      	cmp	r2, #8
100096c4:	d100      	bne.n	100096c8 <_Z4Gamev.part.0+0x758>
100096c6:	e723      	b.n	10009510 <_Z4Gamev.part.0+0x5a0>
100096c8:	f7fe f88c 	bl	100077e4 <_Z8CheckEndv.part.0>
				if (!CheckEnd())
100096cc:	2800      	cmp	r0, #0
100096ce:	d100      	bne.n	100096d2 <_Z4Gamev.part.0+0x762>
100096d0:	e72e      	b.n	10009530 <_Z4Gamev.part.0+0x5c0>
	u8* d = &Board[x + y*MAPW];
100096d2:	4971      	ldr	r1, [pc, #452]	; (10009898 <_Z4Gamev.part.0+0x928>)
	const u8* s = &BrickTemp[brick*BRICKTEMPSIZE];
100096d4:	4b71      	ldr	r3, [pc, #452]	; (1000989c <_Z4Gamev.part.0+0x92c>)
	u8* d = &Board[x + y*MAPW];
100096d6:	7809      	ldrb	r1, [r1, #0]
	const u8* s = &BrickTemp[brick*BRICKTEMPSIZE];
100096d8:	781a      	ldrb	r2, [r3, #0]
	u8* d = &Board[x + y*MAPW];
100096da:	b249      	sxtb	r1, r1
100096dc:	004c      	lsls	r4, r1, #1
100096de:	1864      	adds	r4, r4, r1
100096e0:	00e1      	lsls	r1, r4, #3
100096e2:	1864      	adds	r4, r4, r1
100096e4:	496e      	ldr	r1, [pc, #440]	; (100098a0 <_Z4Gamev.part.0+0x930>)
	const u8* s = &BrickTemp[brick*BRICKTEMPSIZE];
100096e6:	4b6f      	ldr	r3, [pc, #444]	; (100098a4 <_Z4Gamev.part.0+0x934>)
	u8* d = &Board[x + y*MAPW];
100096e8:	7809      	ldrb	r1, [r1, #0]
	const u8* s = &BrickTemp[brick*BRICKTEMPSIZE];
100096ea:	0112      	lsls	r2, r2, #4
	u8* d = &Board[x + y*MAPW];
100096ec:	b249      	sxtb	r1, r1
100096ee:	1864      	adds	r4, r4, r1
100096f0:	4659      	mov	r1, fp
100096f2:	1908      	adds	r0, r1, r4
			b = *s++;
100096f4:	496b      	ldr	r1, [pc, #428]	; (100098a4 <_Z4Gamev.part.0+0x934>)
	const u8* s = &BrickTemp[brick*BRICKTEMPSIZE];
100096f6:	189b      	adds	r3, r3, r2
			b = *s++;
100096f8:	5c8a      	ldrb	r2, [r1, r2]
100096fa:	7a1f      	ldrb	r7, [r3, #8]
100096fc:	9203      	str	r2, [sp, #12]
100096fe:	791a      	ldrb	r2, [r3, #4]
10009700:	7b1d      	ldrb	r5, [r3, #12]
10009702:	9202      	str	r2, [sp, #8]
10009704:	e322      	b.n	10009d4c <_Z4Gamev.part.0+0xddc>
			if (b != 0)
10009706:	9b09      	ldr	r3, [sp, #36]	; 0x24
10009708:	2b00      	cmp	r3, #0
1000970a:	d100      	bne.n	1000970e <_Z4Gamev.part.0+0x79e>
1000970c:	e2c5      	b.n	10009c9a <_Z4Gamev.part.0+0xd2a>
				if ((y < 1) || (y >= MAPH-1))
1000970e:	4653      	mov	r3, sl
10009710:	2b11      	cmp	r3, #17
10009712:	d900      	bls.n	10009716 <_Z4Gamev.part.0+0x7a6>
10009714:	e582      	b.n	1000921c <_Z4Gamev.part.0+0x2ac>
					if (*d != TILE_EMPTY) ok = False;
10009716:	2352      	movs	r3, #82	; 0x52
10009718:	5cc3      	ldrb	r3, [r0, r3]
1000971a:	2b08      	cmp	r3, #8
1000971c:	d000      	beq.n	10009720 <_Z4Gamev.part.0+0x7b0>
1000971e:	e573      	b.n	10009208 <_Z4Gamev.part.0+0x298>
			if (b != 0)
10009720:	9b0d      	ldr	r3, [sp, #52]	; 0x34
10009722:	2b00      	cmp	r3, #0
10009724:	d000      	beq.n	10009728 <_Z4Gamev.part.0+0x7b8>
10009726:	e573      	b.n	10009210 <_Z4Gamev.part.0+0x2a0>
10009728:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1000972a:	2b00      	cmp	r3, #0
1000972c:	d008      	beq.n	10009740 <_Z4Gamev.part.0+0x7d0>
				if ((y < 1) || (y >= MAPH-1))
1000972e:	4653      	mov	r3, sl
10009730:	2b11      	cmp	r3, #17
10009732:	d900      	bls.n	10009736 <_Z4Gamev.part.0+0x7c6>
10009734:	e572      	b.n	1000921c <_Z4Gamev.part.0+0x2ac>
					if (*d != TILE_EMPTY) ok = False;
10009736:	2354      	movs	r3, #84	; 0x54
10009738:	5cc3      	ldrb	r3, [r0, r3]
1000973a:	2b08      	cmp	r3, #8
1000973c:	d000      	beq.n	10009740 <_Z4Gamev.part.0+0x7d0>
1000973e:	e56d      	b.n	1000921c <_Z4Gamev.part.0+0x2ac>
			if (!CheckBrick(BrickX, BrickY+1, Brick))
10009740:	2900      	cmp	r1, #0
10009742:	d100      	bne.n	10009746 <_Z4Gamev.part.0+0x7d6>
10009744:	e56a      	b.n	1000921c <_Z4Gamev.part.0+0x2ac>
				BrickY++;
10009746:	4b54      	ldr	r3, [pc, #336]	; (10009898 <_Z4Gamev.part.0+0x928>)
10009748:	9a12      	ldr	r2, [sp, #72]	; 0x48
1000974a:	701a      	strb	r2, [r3, #0]
			if (b != 0) *d = b;
1000974c:	9b01      	ldr	r3, [sp, #4]
1000974e:	2b00      	cmp	r3, #0
10009750:	d002      	beq.n	10009758 <_Z4Gamev.part.0+0x7e8>
10009752:	465a      	mov	r2, fp
10009754:	9913      	ldr	r1, [sp, #76]	; 0x4c
10009756:	5453      	strb	r3, [r2, r1]
10009758:	9b02      	ldr	r3, [sp, #8]
1000975a:	2b00      	cmp	r3, #0
1000975c:	d000      	beq.n	10009760 <_Z4Gamev.part.0+0x7f0>
1000975e:	7043      	strb	r3, [r0, #1]
10009760:	9b06      	ldr	r3, [sp, #24]
10009762:	2b00      	cmp	r3, #0
10009764:	d000      	beq.n	10009768 <_Z4Gamev.part.0+0x7f8>
10009766:	7083      	strb	r3, [r0, #2]
10009768:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1000976a:	2b00      	cmp	r3, #0
1000976c:	d000      	beq.n	10009770 <_Z4Gamev.part.0+0x800>
1000976e:	70c3      	strb	r3, [r0, #3]
10009770:	9b03      	ldr	r3, [sp, #12]
10009772:	2b00      	cmp	r3, #0
10009774:	d000      	beq.n	10009778 <_Z4Gamev.part.0+0x808>
10009776:	76c3      	strb	r3, [r0, #27]
10009778:	9b04      	ldr	r3, [sp, #16]
1000977a:	2b00      	cmp	r3, #0
1000977c:	d000      	beq.n	10009780 <_Z4Gamev.part.0+0x810>
1000977e:	7703      	strb	r3, [r0, #28]
10009780:	9b07      	ldr	r3, [sp, #28]
10009782:	2b00      	cmp	r3, #0
10009784:	d000      	beq.n	10009788 <_Z4Gamev.part.0+0x818>
10009786:	7743      	strb	r3, [r0, #29]
10009788:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1000978a:	2b00      	cmp	r3, #0
1000978c:	d000      	beq.n	10009790 <_Z4Gamev.part.0+0x820>
1000978e:	7783      	strb	r3, [r0, #30]
10009790:	9a05      	ldr	r2, [sp, #20]
10009792:	2a00      	cmp	r2, #0
10009794:	d001      	beq.n	1000979a <_Z4Gamev.part.0+0x82a>
10009796:	2336      	movs	r3, #54	; 0x36
10009798:	54c2      	strb	r2, [r0, r3]
1000979a:	2e00      	cmp	r6, #0
1000979c:	d001      	beq.n	100097a2 <_Z4Gamev.part.0+0x832>
1000979e:	2337      	movs	r3, #55	; 0x37
100097a0:	54c6      	strb	r6, [r0, r3]
100097a2:	9a08      	ldr	r2, [sp, #32]
100097a4:	2a00      	cmp	r2, #0
100097a6:	d001      	beq.n	100097ac <_Z4Gamev.part.0+0x83c>
100097a8:	2338      	movs	r3, #56	; 0x38
100097aa:	54c2      	strb	r2, [r0, r3]
100097ac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
100097ae:	2a00      	cmp	r2, #0
100097b0:	d001      	beq.n	100097b6 <_Z4Gamev.part.0+0x846>
100097b2:	2339      	movs	r3, #57	; 0x39
100097b4:	54c2      	strb	r2, [r0, r3]
100097b6:	2f00      	cmp	r7, #0
100097b8:	d001      	beq.n	100097be <_Z4Gamev.part.0+0x84e>
100097ba:	2351      	movs	r3, #81	; 0x51
100097bc:	54c7      	strb	r7, [r0, r3]
100097be:	9a09      	ldr	r2, [sp, #36]	; 0x24
100097c0:	2a00      	cmp	r2, #0
100097c2:	d001      	beq.n	100097c8 <_Z4Gamev.part.0+0x858>
100097c4:	2352      	movs	r3, #82	; 0x52
100097c6:	54c2      	strb	r2, [r0, r3]
100097c8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
100097ca:	2a00      	cmp	r2, #0
100097cc:	d001      	beq.n	100097d2 <_Z4Gamev.part.0+0x862>
100097ce:	2353      	movs	r3, #83	; 0x53
100097d0:	54c2      	strb	r2, [r0, r3]
100097d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
100097d4:	2a00      	cmp	r2, #0
100097d6:	d001      	beq.n	100097dc <_Z4Gamev.part.0+0x86c>
100097d8:	2354      	movs	r3, #84	; 0x54
100097da:	54c2      	strb	r2, [r0, r3]
				SpeedCnt = Falling ? SPEEDFALL : StepSpeed;
100097dc:	4c32      	ldr	r4, [pc, #200]	; (100098a8 <_Z4Gamev.part.0+0x938>)
100097de:	7823      	ldrb	r3, [r4, #0]
100097e0:	2b00      	cmp	r3, #0
100097e2:	d000      	beq.n	100097e6 <_Z4Gamev.part.0+0x876>
100097e4:	e307      	b.n	10009df6 <_Z4Gamev.part.0+0xe86>
100097e6:	4642      	mov	r2, r8
100097e8:	4b30      	ldr	r3, [pc, #192]	; (100098ac <_Z4Gamev.part.0+0x93c>)
100097ea:	681b      	ldr	r3, [r3, #0]
100097ec:	6013      	str	r3, [r2, #0]
				if (!Falling && (BrickScore > 0)) BrickScore--;
100097ee:	4b30      	ldr	r3, [pc, #192]	; (100098b0 <_Z4Gamev.part.0+0x940>)
100097f0:	681b      	ldr	r3, [r3, #0]
100097f2:	2b00      	cmp	r3, #0
100097f4:	dd02      	ble.n	100097fc <_Z4Gamev.part.0+0x88c>
100097f6:	4a2e      	ldr	r2, [pc, #184]	; (100098b0 <_Z4Gamev.part.0+0x940>)
100097f8:	3b01      	subs	r3, #1
100097fa:	6013      	str	r3, [r2, #0]
100097fc:	25d0      	movs	r5, #208	; 0xd0
100097fe:	062d      	lsls	r5, r5, #24
10009800:	686b      	ldr	r3, [r5, #4]
10009802:	2601      	movs	r6, #1
	if (!gpio_get(PB_LT))
10009804:	02db      	lsls	r3, r3, #11
10009806:	d401      	bmi.n	1000980c <_Z4Gamev.part.0+0x89c>
10009808:	f000 fca4 	bl	1000a154 <_Z4Gamev.part.0+0x11e4>
1000980c:	686b      	ldr	r3, [r5, #4]
1000980e:	0c5b      	lsrs	r3, r3, #17
	else if (!gpio_get(PB_RT))
10009810:	421e      	tst	r6, r3
10009812:	d100      	bne.n	10009816 <_Z4Gamev.part.0+0x8a6>
10009814:	e356      	b.n	10009ec4 <_Z4Gamev.part.0+0xf54>
10009816:	686b      	ldr	r3, [r5, #4]
10009818:	0d9b      	lsrs	r3, r3, #22
	else if (!gpio_get(PB_DN))
1000981a:	421e      	tst	r6, r3
1000981c:	d100      	bne.n	10009820 <_Z4Gamev.part.0+0x8b0>
1000981e:	e2e0      	b.n	10009de2 <_Z4Gamev.part.0+0xe72>
10009820:	686b      	ldr	r3, [r5, #4]
10009822:	0d5b      	lsrs	r3, r3, #21
	else if (!gpio_get(PB_CF))
10009824:	421e      	tst	r6, r3
10009826:	d049      	beq.n	100098bc <_Z4Gamev.part.0+0x94c>
10009828:	686b      	ldr	r3, [r5, #4]
1000982a:	0e9b      	lsrs	r3, r3, #26
	else if (!gpio_get(PB_UR))
1000982c:	421e      	tst	r6, r3
1000982e:	d001      	beq.n	10009834 <_Z4Gamev.part.0+0x8c4>
10009830:	f7ff fbb8 	bl	10008fa4 <_Z4Gamev.part.0+0x34>
	sleep_ms(100);
10009834:	2064      	movs	r0, #100	; 0x64
10009836:	f7fa ffff 	bl	10004838 <sleep_ms>
	memcpy(SaveBoard, Board, MAPSIZE);
1000983a:	2287      	movs	r2, #135	; 0x87
1000983c:	4659      	mov	r1, fp
1000983e:	0092      	lsls	r2, r2, #2
10009840:	481c      	ldr	r0, [pc, #112]	; (100098b4 <_Z4Gamev.part.0+0x944>)
10009842:	f7f7 fc55 	bl	100010f0 <__wrap___aeabi_memcpy>
	memcpy(&Board[MAPW/2-4 + MAPH/2*MAPW], PauseMsg, 8);
10009846:	4658      	mov	r0, fp
10009848:	3018      	adds	r0, #24
1000984a:	2208      	movs	r2, #8
1000984c:	491a      	ldr	r1, [pc, #104]	; (100098b8 <_Z4Gamev.part.0+0x948>)
1000984e:	30ff      	adds	r0, #255	; 0xff
10009850:	f7f7 fc4e 	bl	100010f0 <__wrap___aeabi_memcpy>
10009854:	2401      	movs	r4, #1
10009856:	e008      	b.n	1000986a <_Z4Gamev.part.0+0x8fa>
10009858:	686b      	ldr	r3, [r5, #4]
1000985a:	0e9b      	lsrs	r3, r3, #26
	else if (!gpio_get(PB_UR))
1000985c:	421c      	tst	r4, r3
1000985e:	d001      	beq.n	10009864 <_Z4Gamev.part.0+0x8f4>
10009860:	f001 f924 	bl	1000aaac <_Z4Gamev.part.0+0x1b3c>
	sleep_ms(100);
10009864:	2064      	movs	r0, #100	; 0x64
10009866:	f7fa ffe7 	bl	10004838 <sleep_ms>
1000986a:	686b      	ldr	r3, [r5, #4]
1000986c:	0d1b      	lsrs	r3, r3, #20
	if (!gpio_get(PB_LT))
1000986e:	421c      	tst	r4, r3
10009870:	d0f8      	beq.n	10009864 <_Z4Gamev.part.0+0x8f4>
10009872:	686b      	ldr	r3, [r5, #4]
10009874:	0c5b      	lsrs	r3, r3, #17
	else if (!gpio_get(PB_RT))
10009876:	421c      	tst	r4, r3
10009878:	d0f4      	beq.n	10009864 <_Z4Gamev.part.0+0x8f4>
1000987a:	686b      	ldr	r3, [r5, #4]
1000987c:	0d9b      	lsrs	r3, r3, #22
	else if (!gpio_get(PB_DN))
1000987e:	421c      	tst	r4, r3
10009880:	d0f0      	beq.n	10009864 <_Z4Gamev.part.0+0x8f4>
10009882:	686b      	ldr	r3, [r5, #4]
10009884:	0d5b      	lsrs	r3, r3, #21
	else if (!gpio_get(PB_CF))
10009886:	421c      	tst	r4, r3
10009888:	d1e6      	bne.n	10009858 <_Z4Gamev.part.0+0x8e8>
	sleep_ms(100);
1000988a:	2064      	movs	r0, #100	; 0x64
1000988c:	f7fa ffd4 	bl	10004838 <sleep_ms>
		sleep_ms(150);
10009890:	2096      	movs	r0, #150	; 0x96
10009892:	f7fa ffd1 	bl	10004838 <sleep_ms>
10009896:	e7e8      	b.n	1000986a <_Z4Gamev.part.0+0x8fa>
10009898:	20012766 	.word	0x20012766
1000989c:	20012764 	.word	0x20012764
100098a0:	20012765 	.word	0x20012765
100098a4:	10010bd4 	.word	0x10010bd4
100098a8:	20012768 	.word	0x20012768
100098ac:	2000785c 	.word	0x2000785c
100098b0:	20003498 	.word	0x20003498
100098b4:	20006c2c 	.word	0x20006c2c
100098b8:	10010948 	.word	0x10010948
	sleep_ms(100);
100098bc:	2064      	movs	r0, #100	; 0x64
100098be:	f7fa ffbb 	bl	10004838 <sleep_ms>
		sleep_ms(150);
100098c2:	2096      	movs	r0, #150	; 0x96
100098c4:	f7fa ffb8 	bl	10004838 <sleep_ms>
				break;

			// up - rotate
			case KEY_U:
				// clear current brick
				ClearBrick(BrickX, BrickY, Brick);
100098c8:	2000      	movs	r0, #0
100098ca:	4bd8      	ldr	r3, [pc, #864]	; (10009c2c <_Z4Gamev.part.0+0xcbc>)
100098cc:	5618      	ldrsb	r0, [r3, r0]
100098ce:	4bd8      	ldr	r3, [pc, #864]	; (10009c30 <_Z4Gamev.part.0+0xcc0>)
	u8* d = &Board[x + y*MAPW];
100098d0:	4682      	mov	sl, r0
				ClearBrick(BrickX, BrickY, Brick);
100098d2:	781b      	ldrb	r3, [r3, #0]
100098d4:	9007      	str	r0, [sp, #28]
100098d6:	b25b      	sxtb	r3, r3
100098d8:	469c      	mov	ip, r3
	u8* d = &Board[x + y*MAPW];
100098da:	4661      	mov	r1, ip
	const u8* s = &BrickTemp[brick*BRICKTEMPSIZE];
100098dc:	4bd5      	ldr	r3, [pc, #852]	; (10009c34 <_Z4Gamev.part.0+0xcc4>)
	u8* d = &Board[x + y*MAPW];
100098de:	004e      	lsls	r6, r1, #1
100098e0:	4466      	add	r6, ip
100098e2:	00f1      	lsls	r1, r6, #3
	const u8* s = &BrickTemp[brick*BRICKTEMPSIZE];
100098e4:	781a      	ldrb	r2, [r3, #0]
	u8* d = &Board[x + y*MAPW];
100098e6:	1876      	adds	r6, r6, r1
			if (b != 0) *d = TILE_EMPTY;
100098e8:	49d3      	ldr	r1, [pc, #844]	; (10009c38 <_Z4Gamev.part.0+0xcc8>)
	const u8* s = &BrickTemp[brick*BRICKTEMPSIZE];
100098ea:	0113      	lsls	r3, r2, #4
			if (b != 0) *d = TILE_EMPTY;
100098ec:	5cc9      	ldrb	r1, [r1, r3]
	u8* d = &Board[x + y*MAPW];
100098ee:	4456      	add	r6, sl
			if (b != 0) *d = TILE_EMPTY;
100098f0:	2900      	cmp	r1, #0
100098f2:	d002      	beq.n	100098fa <_Z4Gamev.part.0+0x98a>
100098f4:	2108      	movs	r1, #8
100098f6:	4658      	mov	r0, fp
100098f8:	5581      	strb	r1, [r0, r6]
	const u8* s = &BrickTemp[brick*BRICKTEMPSIZE];
100098fa:	49cf      	ldr	r1, [pc, #828]	; (10009c38 <_Z4Gamev.part.0+0xcc8>)
100098fc:	468a      	mov	sl, r1
	u8* d = &Board[x + y*MAPW];
100098fe:	4659      	mov	r1, fp
	const u8* s = &BrickTemp[brick*BRICKTEMPSIZE];
10009900:	4453      	add	r3, sl
	u8* d = &Board[x + y*MAPW];
10009902:	1988      	adds	r0, r1, r6
			if (b != 0) *d = TILE_EMPTY;
10009904:	7859      	ldrb	r1, [r3, #1]
10009906:	2900      	cmp	r1, #0
10009908:	d001      	beq.n	1000990e <_Z4Gamev.part.0+0x99e>
1000990a:	2108      	movs	r1, #8
1000990c:	7041      	strb	r1, [r0, #1]
1000990e:	7899      	ldrb	r1, [r3, #2]
10009910:	2900      	cmp	r1, #0
10009912:	d001      	beq.n	10009918 <_Z4Gamev.part.0+0x9a8>
10009914:	2108      	movs	r1, #8
10009916:	7081      	strb	r1, [r0, #2]
10009918:	78d9      	ldrb	r1, [r3, #3]
1000991a:	2900      	cmp	r1, #0
1000991c:	d001      	beq.n	10009922 <_Z4Gamev.part.0+0x9b2>
1000991e:	2108      	movs	r1, #8
10009920:	70c1      	strb	r1, [r0, #3]
10009922:	7919      	ldrb	r1, [r3, #4]
10009924:	2900      	cmp	r1, #0
10009926:	d001      	beq.n	1000992c <_Z4Gamev.part.0+0x9bc>
10009928:	2108      	movs	r1, #8
1000992a:	76c1      	strb	r1, [r0, #27]
1000992c:	7959      	ldrb	r1, [r3, #5]
1000992e:	2900      	cmp	r1, #0
10009930:	d001      	beq.n	10009936 <_Z4Gamev.part.0+0x9c6>
10009932:	2108      	movs	r1, #8
10009934:	7701      	strb	r1, [r0, #28]
10009936:	7999      	ldrb	r1, [r3, #6]
10009938:	2900      	cmp	r1, #0
1000993a:	d001      	beq.n	10009940 <_Z4Gamev.part.0+0x9d0>
1000993c:	2108      	movs	r1, #8
1000993e:	7741      	strb	r1, [r0, #29]
10009940:	79d9      	ldrb	r1, [r3, #7]
10009942:	2900      	cmp	r1, #0
10009944:	d001      	beq.n	1000994a <_Z4Gamev.part.0+0x9da>
10009946:	2108      	movs	r1, #8
10009948:	7781      	strb	r1, [r0, #30]
1000994a:	7a19      	ldrb	r1, [r3, #8]
1000994c:	2900      	cmp	r1, #0
1000994e:	d002      	beq.n	10009956 <_Z4Gamev.part.0+0x9e6>
10009950:	2136      	movs	r1, #54	; 0x36
10009952:	2408      	movs	r4, #8
10009954:	5444      	strb	r4, [r0, r1]
10009956:	7a59      	ldrb	r1, [r3, #9]
10009958:	2900      	cmp	r1, #0
1000995a:	d002      	beq.n	10009962 <_Z4Gamev.part.0+0x9f2>
1000995c:	2137      	movs	r1, #55	; 0x37
1000995e:	2408      	movs	r4, #8
10009960:	5444      	strb	r4, [r0, r1]
10009962:	7a99      	ldrb	r1, [r3, #10]
10009964:	2900      	cmp	r1, #0
10009966:	d002      	beq.n	1000996e <_Z4Gamev.part.0+0x9fe>
10009968:	2138      	movs	r1, #56	; 0x38
1000996a:	2408      	movs	r4, #8
1000996c:	5444      	strb	r4, [r0, r1]
1000996e:	7ad9      	ldrb	r1, [r3, #11]
10009970:	2900      	cmp	r1, #0
10009972:	d002      	beq.n	1000997a <_Z4Gamev.part.0+0xa0a>
10009974:	2139      	movs	r1, #57	; 0x39
10009976:	2408      	movs	r4, #8
10009978:	5444      	strb	r4, [r0, r1]
1000997a:	7b19      	ldrb	r1, [r3, #12]
1000997c:	2900      	cmp	r1, #0
1000997e:	d002      	beq.n	10009986 <_Z4Gamev.part.0+0xa16>
10009980:	2151      	movs	r1, #81	; 0x51
10009982:	2408      	movs	r4, #8
10009984:	5444      	strb	r4, [r0, r1]
10009986:	7b59      	ldrb	r1, [r3, #13]
10009988:	2900      	cmp	r1, #0
1000998a:	d002      	beq.n	10009992 <_Z4Gamev.part.0+0xa22>
1000998c:	2152      	movs	r1, #82	; 0x52
1000998e:	2408      	movs	r4, #8
10009990:	5444      	strb	r4, [r0, r1]
10009992:	7b99      	ldrb	r1, [r3, #14]
10009994:	2900      	cmp	r1, #0
10009996:	d002      	beq.n	1000999e <_Z4Gamev.part.0+0xa2e>
10009998:	2153      	movs	r1, #83	; 0x53
1000999a:	2408      	movs	r4, #8
1000999c:	5444      	strb	r4, [r0, r1]
1000999e:	7bdb      	ldrb	r3, [r3, #15]
100099a0:	2b00      	cmp	r3, #0
100099a2:	d002      	beq.n	100099aa <_Z4Gamev.part.0+0xa3a>
100099a4:	2354      	movs	r3, #84	; 0x54
100099a6:	2108      	movs	r1, #8
100099a8:	54c1      	strb	r1, [r0, r3]

				// get new brick
				b = BrickRot[Brick];
100099aa:	4ba4      	ldr	r3, [pc, #656]	; (10009c3c <_Z4Gamev.part.0+0xccc>)
			b = *s++;
100099ac:	49a2      	ldr	r1, [pc, #648]	; (10009c38 <_Z4Gamev.part.0+0xcc8>)
				b = BrickRot[Brick];
100099ae:	5c9c      	ldrb	r4, [r3, r2]
	const u8* s = &BrickTemp[brick*BRICKTEMPSIZE];
100099b0:	4ba1      	ldr	r3, [pc, #644]	; (10009c38 <_Z4Gamev.part.0+0xcc8>)
100099b2:	0122      	lsls	r2, r4, #4
100099b4:	189b      	adds	r3, r3, r2
			b = *s++;
100099b6:	5c8a      	ldrb	r2, [r1, r2]
100099b8:	9203      	str	r2, [sp, #12]
			if (b != 0)
100099ba:	2a00      	cmp	r2, #0
100099bc:	d001      	beq.n	100099c2 <_Z4Gamev.part.0+0xa52>
100099be:	f000 fd37 	bl	1000a430 <_Z4Gamev.part.0+0x14c0>
				if ((y < 1) || (y >= MAPH-1))
100099c2:	4662      	mov	r2, ip
100099c4:	b2d1      	uxtb	r1, r2
	Bool ok = True;
100099c6:	2201      	movs	r2, #1
			if (b != 0)
100099c8:	785f      	ldrb	r7, [r3, #1]
100099ca:	2f00      	cmp	r7, #0
100099cc:	d005      	beq.n	100099da <_Z4Gamev.part.0+0xa6a>
				if ((y < 1) || (y >= MAPH-1))
100099ce:	1e4f      	subs	r7, r1, #1
100099d0:	2f11      	cmp	r7, #17
100099d2:	d801      	bhi.n	100099d8 <_Z4Gamev.part.0+0xa68>
100099d4:	f000 fe59 	bl	1000a68a <_Z4Gamev.part.0+0x171a>
					ok = False;
100099d8:	2200      	movs	r2, #0
			if (b != 0)
100099da:	789f      	ldrb	r7, [r3, #2]
100099dc:	2f00      	cmp	r7, #0
100099de:	d005      	beq.n	100099ec <_Z4Gamev.part.0+0xa7c>
				if ((y < 1) || (y >= MAPH-1))
100099e0:	1e4f      	subs	r7, r1, #1
100099e2:	2f11      	cmp	r7, #17
100099e4:	d801      	bhi.n	100099ea <_Z4Gamev.part.0+0xa7a>
100099e6:	f000 fe5c 	bl	1000a6a2 <_Z4Gamev.part.0+0x1732>
					ok = False;
100099ea:	2200      	movs	r2, #0
			if (b != 0)
100099ec:	78df      	ldrb	r7, [r3, #3]
100099ee:	2f00      	cmp	r7, #0
100099f0:	d005      	beq.n	100099fe <_Z4Gamev.part.0+0xa8e>
				if ((y < 1) || (y >= MAPH-1))
100099f2:	1e4f      	subs	r7, r1, #1
100099f4:	2f11      	cmp	r7, #17
100099f6:	d801      	bhi.n	100099fc <_Z4Gamev.part.0+0xa8c>
100099f8:	f000 fe5f 	bl	1000a6ba <_Z4Gamev.part.0+0x174a>
					ok = False;
100099fc:	2200      	movs	r2, #0
		y++;
100099fe:	1c4f      	adds	r7, r1, #1
10009a00:	b2fd      	uxtb	r5, r7
			b = *s++;
10009a02:	791f      	ldrb	r7, [r3, #4]
		y++;
10009a04:	9501      	str	r5, [sp, #4]
			b = *s++;
10009a06:	9704      	str	r7, [sp, #16]
			if (b != 0)
10009a08:	2f00      	cmp	r7, #0
10009a0a:	d101      	bne.n	10009a10 <_Z4Gamev.part.0+0xaa0>
10009a0c:	f000 fd2e 	bl	1000a46c <_Z4Gamev.part.0+0x14fc>
				if ((y < 1) || (y >= MAPH-1))
10009a10:	2911      	cmp	r1, #17
10009a12:	d801      	bhi.n	10009a18 <_Z4Gamev.part.0+0xaa8>
10009a14:	f000 fe90 	bl	1000a738 <_Z4Gamev.part.0+0x17c8>
			b = *s++;
10009a18:	795a      	ldrb	r2, [r3, #5]
			if (b != 0)
10009a1a:	2a00      	cmp	r2, #0
10009a1c:	d101      	bne.n	10009a22 <_Z4Gamev.part.0+0xab2>
10009a1e:	f000 fd4a 	bl	1000a4b6 <_Z4Gamev.part.0+0x1546>
			b = *s++;
10009a22:	799a      	ldrb	r2, [r3, #6]
			if (b != 0)
10009a24:	2a00      	cmp	r2, #0
10009a26:	d108      	bne.n	10009a3a <_Z4Gamev.part.0+0xaca>
10009a28:	79df      	ldrb	r7, [r3, #7]
10009a2a:	2f00      	cmp	r7, #0
10009a2c:	d101      	bne.n	10009a32 <_Z4Gamev.part.0+0xac2>
10009a2e:	f000 fd42 	bl	1000a4b6 <_Z4Gamev.part.0+0x1546>
				if ((y < 1) || (y >= MAPH-1))
10009a32:	2911      	cmp	r1, #17
10009a34:	d801      	bhi.n	10009a3a <_Z4Gamev.part.0+0xaca>
10009a36:	f000 fd37 	bl	1000a4a8 <_Z4Gamev.part.0+0x1538>
					ok = False;
10009a3a:	2200      	movs	r2, #0
		y++;
10009a3c:	3102      	adds	r1, #2
10009a3e:	b2c9      	uxtb	r1, r1
10009a40:	9102      	str	r1, [sp, #8]
			b = *s++;
10009a42:	7a19      	ldrb	r1, [r3, #8]
10009a44:	9105      	str	r1, [sp, #20]
			if (b != 0)
10009a46:	2900      	cmp	r1, #0
10009a48:	d001      	beq.n	10009a4e <_Z4Gamev.part.0+0xade>
10009a4a:	f000 fd3d 	bl	1000a4c8 <_Z4Gamev.part.0+0x1558>
			b = *s++;
10009a4e:	7a59      	ldrb	r1, [r3, #9]
			if (b != 0)
10009a50:	2900      	cmp	r1, #0
10009a52:	d101      	bne.n	10009a58 <_Z4Gamev.part.0+0xae8>
10009a54:	f001 f81e 	bl	1000aa94 <_Z4Gamev.part.0+0x1b24>
				if ((y < 1) || (y >= MAPH-1))
10009a58:	9901      	ldr	r1, [sp, #4]
10009a5a:	2911      	cmp	r1, #17
10009a5c:	d901      	bls.n	10009a62 <_Z4Gamev.part.0+0xaf2>
10009a5e:	f000 ff4c 	bl	1000a8fa <_Z4Gamev.part.0+0x198a>
					if (*d != TILE_EMPTY) ok = False;
10009a62:	2137      	movs	r1, #55	; 0x37
10009a64:	5c41      	ldrb	r1, [r0, r1]
10009a66:	3908      	subs	r1, #8
10009a68:	424f      	negs	r7, r1
10009a6a:	4179      	adcs	r1, r7
10009a6c:	4249      	negs	r1, r1
10009a6e:	400a      	ands	r2, r1
			if (b != 0)
10009a70:	7a99      	ldrb	r1, [r3, #10]
10009a72:	2900      	cmp	r1, #0
10009a74:	d101      	bne.n	10009a7a <_Z4Gamev.part.0+0xb0a>
10009a76:	f000 ff43 	bl	1000a900 <_Z4Gamev.part.0+0x1990>
					if (*d != TILE_EMPTY) ok = False;
10009a7a:	2138      	movs	r1, #56	; 0x38
10009a7c:	5c41      	ldrb	r1, [r0, r1]
10009a7e:	3908      	subs	r1, #8
10009a80:	424f      	negs	r7, r1
10009a82:	4179      	adcs	r1, r7
10009a84:	4249      	negs	r1, r1
10009a86:	400a      	ands	r2, r1
			if (b != 0)
10009a88:	7ad9      	ldrb	r1, [r3, #11]
10009a8a:	2900      	cmp	r1, #0
10009a8c:	d006      	beq.n	10009a9c <_Z4Gamev.part.0+0xb2c>
					if (*d != TILE_EMPTY) ok = False;
10009a8e:	2139      	movs	r1, #57	; 0x39
10009a90:	5c41      	ldrb	r1, [r0, r1]
					ok = False;
10009a92:	3908      	subs	r1, #8
10009a94:	424f      	negs	r7, r1
10009a96:	4179      	adcs	r1, r7
10009a98:	4249      	negs	r1, r1
10009a9a:	400a      	ands	r2, r1
			b = *s++;
10009a9c:	7b19      	ldrb	r1, [r3, #12]
10009a9e:	9106      	str	r1, [sp, #24]
			if (b != 0)
10009aa0:	2900      	cmp	r1, #0
10009aa2:	d101      	bne.n	10009aa8 <_Z4Gamev.part.0+0xb38>
10009aa4:	f000 ff04 	bl	1000a8b0 <_Z4Gamev.part.0+0x1940>
				if ((y < 1) || (y >= MAPH-1))
10009aa8:	9902      	ldr	r1, [sp, #8]
10009aaa:	2911      	cmp	r1, #17
10009aac:	d901      	bls.n	10009ab2 <_Z4Gamev.part.0+0xb42>
10009aae:	f000 fe7d 	bl	1000a7ac <_Z4Gamev.part.0+0x183c>
					if (*d != TILE_EMPTY) ok = False;
10009ab2:	2151      	movs	r1, #81	; 0x51
10009ab4:	5c41      	ldrb	r1, [r0, r1]
10009ab6:	3908      	subs	r1, #8
10009ab8:	424f      	negs	r7, r1
10009aba:	4179      	adcs	r1, r7
10009abc:	4249      	negs	r1, r1
10009abe:	400a      	ands	r2, r1
			if (b != 0)
10009ac0:	7b59      	ldrb	r1, [r3, #13]
10009ac2:	2900      	cmp	r1, #0
10009ac4:	d001      	beq.n	10009aca <_Z4Gamev.part.0+0xb5a>
10009ac6:	f000 fefb 	bl	1000a8c0 <_Z4Gamev.part.0+0x1950>
			b = *s++;
10009aca:	7b99      	ldrb	r1, [r3, #14]
			if (b != 0)
10009acc:	2900      	cmp	r1, #0
10009ace:	d001      	beq.n	10009ad4 <_Z4Gamev.part.0+0xb64>
10009ad0:	f000 ff00 	bl	1000a8d4 <_Z4Gamev.part.0+0x1964>
			b = *s++;
10009ad4:	7bdf      	ldrb	r7, [r3, #15]
			if (b != 0)
10009ad6:	2f00      	cmp	r7, #0
10009ad8:	d001      	beq.n	10009ade <_Z4Gamev.part.0+0xb6e>
10009ada:	f000 fe62 	bl	1000a7a2 <_Z4Gamev.part.0+0x1832>
10009ade:	2100      	movs	r1, #0
10009ae0:	468a      	mov	sl, r1
	if (res)
10009ae2:	2a00      	cmp	r2, #0
10009ae4:	d101      	bne.n	10009aea <_Z4Gamev.part.0+0xb7a>
10009ae6:	f000 fe61 	bl	1000a7ac <_Z4Gamev.part.0+0x183c>
		Brick = brick;
10009aea:	4a52      	ldr	r2, [pc, #328]	; (10009c34 <_Z4Gamev.part.0+0xcc4>)
10009aec:	7014      	strb	r4, [r2, #0]
	return res;
10009aee:	f000 fe92 	bl	1000a816 <_Z4Gamev.part.0+0x18a6>
			if (b != 0)
10009af2:	2e00      	cmp	r6, #0
10009af4:	d162      	bne.n	10009bbc <_Z4Gamev.part.0+0xc4c>
10009af6:	9b08      	ldr	r3, [sp, #32]
10009af8:	2b00      	cmp	r3, #0
10009afa:	d06d      	beq.n	10009bd8 <_Z4Gamev.part.0+0xc68>
				if ((y < 1) || (y >= MAPH-1))
10009afc:	9b10      	ldr	r3, [sp, #64]	; 0x40
10009afe:	2b11      	cmp	r3, #17
10009b00:	d874      	bhi.n	10009bec <_Z4Gamev.part.0+0xc7c>
					if (*d != TILE_EMPTY) ok = False;
10009b02:	2338      	movs	r3, #56	; 0x38
10009b04:	5cc3      	ldrb	r3, [r0, r3]
10009b06:	3b08      	subs	r3, #8
10009b08:	001c      	movs	r4, r3
10009b0a:	4263      	negs	r3, r4
10009b0c:	4163      	adcs	r3, r4
10009b0e:	425b      	negs	r3, r3
10009b10:	4019      	ands	r1, r3
			if (b != 0)
10009b12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
10009b14:	2b00      	cmp	r3, #0
10009b16:	d001      	beq.n	10009b1c <_Z4Gamev.part.0+0xbac>
10009b18:	f7ff fb62 	bl	100091e0 <_Z4Gamev.part.0+0x270>
10009b1c:	f7ff fb68 	bl	100091f0 <_Z4Gamev.part.0+0x280>
10009b20:	9c04      	ldr	r4, [sp, #16]
10009b22:	2c00      	cmp	r4, #0
10009b24:	d12b      	bne.n	10009b7e <_Z4Gamev.part.0+0xc0e>
10009b26:	9c07      	ldr	r4, [sp, #28]
10009b28:	2c00      	cmp	r4, #0
10009b2a:	d03a      	beq.n	10009ba2 <_Z4Gamev.part.0+0xc32>
				if ((y < 1) || (y >= MAPH-1))
10009b2c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
10009b2e:	2c11      	cmp	r4, #17
10009b30:	d841      	bhi.n	10009bb6 <_Z4Gamev.part.0+0xc46>
					if (*d != TILE_EMPTY) ok = False;
10009b32:	7f44      	ldrb	r4, [r0, #29]
10009b34:	46a4      	mov	ip, r4
10009b36:	2408      	movs	r4, #8
10009b38:	4264      	negs	r4, r4
10009b3a:	46a2      	mov	sl, r4
10009b3c:	44d4      	add	ip, sl
10009b3e:	4665      	mov	r5, ip
10009b40:	426c      	negs	r4, r5
10009b42:	416c      	adcs	r4, r5
10009b44:	4264      	negs	r4, r4
10009b46:	4021      	ands	r1, r4
			if (b != 0)
10009b48:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
10009b4a:	2c00      	cmp	r4, #0
10009b4c:	d001      	beq.n	10009b52 <_Z4Gamev.part.0+0xbe2>
10009b4e:	f7ff fb1b 	bl	10009188 <_Z4Gamev.part.0+0x218>
10009b52:	f7ff fb24 	bl	1000919e <_Z4Gamev.part.0+0x22e>
10009b56:	9902      	ldr	r1, [sp, #8]
10009b58:	2900      	cmp	r1, #0
10009b5a:	d171      	bne.n	10009c40 <_Z4Gamev.part.0+0xcd0>
10009b5c:	9906      	ldr	r1, [sp, #24]
10009b5e:	2900      	cmp	r1, #0
10009b60:	d000      	beq.n	10009b64 <_Z4Gamev.part.0+0xbf4>
10009b62:	e18a      	b.n	10009e7a <_Z4Gamev.part.0+0xf0a>
	Bool ok = True;
10009b64:	3101      	adds	r1, #1
			if (b != 0)
10009b66:	9c0a      	ldr	r4, [sp, #40]	; 0x28
10009b68:	2c00      	cmp	r4, #0
10009b6a:	d101      	bne.n	10009b70 <_Z4Gamev.part.0+0xc00>
10009b6c:	f7ff fae7 	bl	1000913e <_Z4Gamev.part.0+0x1ce>
				if ((y < 1) || (y >= MAPH-1))
10009b70:	2b11      	cmp	r3, #17
10009b72:	d801      	bhi.n	10009b78 <_Z4Gamev.part.0+0xc08>
10009b74:	f7ff fad8 	bl	10009128 <_Z4Gamev.part.0+0x1b8>
					ok = False;
10009b78:	2100      	movs	r1, #0
10009b7a:	f7ff fae0 	bl	1000913e <_Z4Gamev.part.0+0x1ce>
				if ((y < 1) || (y >= MAPH-1))
10009b7e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
10009b80:	2c11      	cmp	r4, #17
10009b82:	d900      	bls.n	10009b86 <_Z4Gamev.part.0+0xc16>
10009b84:	e0ac      	b.n	10009ce0 <_Z4Gamev.part.0+0xd70>
					if (*d != TILE_EMPTY) ok = False;
10009b86:	7f04      	ldrb	r4, [r0, #28]
10009b88:	46a4      	mov	ip, r4
10009b8a:	2408      	movs	r4, #8
10009b8c:	4264      	negs	r4, r4
10009b8e:	46a2      	mov	sl, r4
10009b90:	44d4      	add	ip, sl
10009b92:	4665      	mov	r5, ip
10009b94:	426c      	negs	r4, r5
10009b96:	416c      	adcs	r4, r5
10009b98:	4264      	negs	r4, r4
10009b9a:	4021      	ands	r1, r4
			if (b != 0)
10009b9c:	9c07      	ldr	r4, [sp, #28]
10009b9e:	2c00      	cmp	r4, #0
10009ba0:	d1c7      	bne.n	10009b32 <_Z4Gamev.part.0+0xbc2>
10009ba2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
10009ba4:	2c00      	cmp	r4, #0
10009ba6:	d101      	bne.n	10009bac <_Z4Gamev.part.0+0xc3c>
10009ba8:	f7ff faf9 	bl	1000919e <_Z4Gamev.part.0+0x22e>
				if ((y < 1) || (y >= MAPH-1))
10009bac:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
10009bae:	2c11      	cmp	r4, #17
10009bb0:	d801      	bhi.n	10009bb6 <_Z4Gamev.part.0+0xc46>
10009bb2:	f7ff fae9 	bl	10009188 <_Z4Gamev.part.0+0x218>
					ok = False;
10009bb6:	2100      	movs	r1, #0
10009bb8:	f7ff faf1 	bl	1000919e <_Z4Gamev.part.0+0x22e>
				if ((y < 1) || (y >= MAPH-1))
10009bbc:	9b10      	ldr	r3, [sp, #64]	; 0x40
10009bbe:	2b11      	cmp	r3, #17
10009bc0:	d864      	bhi.n	10009c8c <_Z4Gamev.part.0+0xd1c>
					if (*d != TILE_EMPTY) ok = False;
10009bc2:	2337      	movs	r3, #55	; 0x37
10009bc4:	5cc3      	ldrb	r3, [r0, r3]
10009bc6:	3b08      	subs	r3, #8
10009bc8:	001c      	movs	r4, r3
10009bca:	4263      	negs	r3, r4
10009bcc:	4163      	adcs	r3, r4
10009bce:	425b      	negs	r3, r3
10009bd0:	4019      	ands	r1, r3
			if (b != 0)
10009bd2:	9b08      	ldr	r3, [sp, #32]
10009bd4:	2b00      	cmp	r3, #0
10009bd6:	d194      	bne.n	10009b02 <_Z4Gamev.part.0+0xb92>
10009bd8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
10009bda:	2b00      	cmp	r3, #0
10009bdc:	d101      	bne.n	10009be2 <_Z4Gamev.part.0+0xc72>
10009bde:	f7ff fb07 	bl	100091f0 <_Z4Gamev.part.0+0x280>
				if ((y < 1) || (y >= MAPH-1))
10009be2:	9b10      	ldr	r3, [sp, #64]	; 0x40
10009be4:	2b11      	cmp	r3, #17
10009be6:	d801      	bhi.n	10009bec <_Z4Gamev.part.0+0xc7c>
10009be8:	f7ff fafa 	bl	100091e0 <_Z4Gamev.part.0+0x270>
					ok = False;
10009bec:	2100      	movs	r1, #0
10009bee:	f7ff faff 	bl	100091f0 <_Z4Gamev.part.0+0x280>
			b = *s++;
10009bf2:	7a99      	ldrb	r1, [r3, #10]
			if (b != 0)
10009bf4:	2900      	cmp	r1, #0
10009bf6:	d106      	bne.n	10009c06 <_Z4Gamev.part.0+0xc96>
10009bf8:	7ade      	ldrb	r6, [r3, #11]
10009bfa:	2e00      	cmp	r6, #0
10009bfc:	d100      	bne.n	10009c00 <_Z4Gamev.part.0+0xc90>
10009bfe:	e46c      	b.n	100094da <_Z4Gamev.part.0+0x56a>
				if ((y < 1) || (y >= MAPH-1))
10009c00:	2d11      	cmp	r5, #17
10009c02:	d800      	bhi.n	10009c06 <_Z4Gamev.part.0+0xc96>
10009c04:	e461      	b.n	100094ca <_Z4Gamev.part.0+0x55a>
					ok = False;
10009c06:	2100      	movs	r1, #0
10009c08:	e467      	b.n	100094da <_Z4Gamev.part.0+0x56a>
			b = *s++;
10009c0a:	7959      	ldrb	r1, [r3, #5]
			if (b != 0)
10009c0c:	2900      	cmp	r1, #0
10009c0e:	d100      	bne.n	10009c12 <_Z4Gamev.part.0+0xca2>
10009c10:	e43a      	b.n	10009488 <_Z4Gamev.part.0+0x518>
			b = *s++;
10009c12:	7999      	ldrb	r1, [r3, #6]
			if (b != 0)
10009c14:	2900      	cmp	r1, #0
10009c16:	d106      	bne.n	10009c26 <_Z4Gamev.part.0+0xcb6>
10009c18:	79df      	ldrb	r7, [r3, #7]
10009c1a:	2f00      	cmp	r7, #0
10009c1c:	d100      	bne.n	10009c20 <_Z4Gamev.part.0+0xcb0>
10009c1e:	e433      	b.n	10009488 <_Z4Gamev.part.0+0x518>
				if ((y < 1) || (y >= MAPH-1))
10009c20:	2a11      	cmp	r2, #17
10009c22:	d800      	bhi.n	10009c26 <_Z4Gamev.part.0+0xcb6>
10009c24:	e429      	b.n	1000947a <_Z4Gamev.part.0+0x50a>
					ok = False;
10009c26:	2100      	movs	r1, #0
10009c28:	e42e      	b.n	10009488 <_Z4Gamev.part.0+0x518>
10009c2a:	46c0      	nop			; (mov r8, r8)
10009c2c:	20012765 	.word	0x20012765
10009c30:	20012766 	.word	0x20012766
10009c34:	20012764 	.word	0x20012764
10009c38:	10010bd4 	.word	0x10010bd4
10009c3c:	10010b98 	.word	0x10010b98
				if ((y < 1) || (y >= MAPH-1))
10009c40:	2b11      	cmp	r3, #17
10009c42:	d842      	bhi.n	10009cca <_Z4Gamev.part.0+0xd5a>
	Bool ok = True;
10009c44:	2101      	movs	r1, #1
					if (*d != TILE_EMPTY) ok = False;
10009c46:	7844      	ldrb	r4, [r0, #1]
10009c48:	46a4      	mov	ip, r4
10009c4a:	2408      	movs	r4, #8
10009c4c:	4264      	negs	r4, r4
10009c4e:	46a2      	mov	sl, r4
10009c50:	44d4      	add	ip, sl
10009c52:	4665      	mov	r5, ip
10009c54:	426c      	negs	r4, r5
10009c56:	416c      	adcs	r4, r5
10009c58:	4264      	negs	r4, r4
10009c5a:	4021      	ands	r1, r4
			if (b != 0)
10009c5c:	9c06      	ldr	r4, [sp, #24]
10009c5e:	2c00      	cmp	r4, #0
10009c60:	d100      	bne.n	10009c64 <_Z4Gamev.part.0+0xcf4>
10009c62:	e780      	b.n	10009b66 <_Z4Gamev.part.0+0xbf6>
					if (*d != TILE_EMPTY) ok = False;
10009c64:	7884      	ldrb	r4, [r0, #2]
10009c66:	46a4      	mov	ip, r4
10009c68:	2408      	movs	r4, #8
10009c6a:	4264      	negs	r4, r4
10009c6c:	46a2      	mov	sl, r4
10009c6e:	44d4      	add	ip, sl
10009c70:	4665      	mov	r5, ip
10009c72:	426c      	negs	r4, r5
10009c74:	416c      	adcs	r4, r5
10009c76:	4264      	negs	r4, r4
10009c78:	4021      	ands	r1, r4
			if (b != 0)
10009c7a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
10009c7c:	2c00      	cmp	r4, #0
10009c7e:	d001      	beq.n	10009c84 <_Z4Gamev.part.0+0xd14>
10009c80:	f7ff fa52 	bl	10009128 <_Z4Gamev.part.0+0x1b8>
10009c84:	f7ff fa5b 	bl	1000913e <_Z4Gamev.part.0+0x1ce>
10009c88:	2e00      	cmp	r6, #0
10009c8a:	d0af      	beq.n	10009bec <_Z4Gamev.part.0+0xc7c>
10009c8c:	9b08      	ldr	r3, [sp, #32]
					ok = False;
10009c8e:	2100      	movs	r1, #0
			if (b != 0)
10009c90:	2b00      	cmp	r3, #0
10009c92:	d001      	beq.n	10009c98 <_Z4Gamev.part.0+0xd28>
10009c94:	f7ff faac 	bl	100091f0 <_Z4Gamev.part.0+0x280>
10009c98:	e79e      	b.n	10009bd8 <_Z4Gamev.part.0+0xc68>
10009c9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
10009c9c:	2b00      	cmp	r3, #0
10009c9e:	d100      	bne.n	10009ca2 <_Z4Gamev.part.0+0xd32>
10009ca0:	e542      	b.n	10009728 <_Z4Gamev.part.0+0x7b8>
				if ((y < 1) || (y >= MAPH-1))
10009ca2:	4653      	mov	r3, sl
10009ca4:	2b11      	cmp	r3, #17
10009ca6:	d901      	bls.n	10009cac <_Z4Gamev.part.0+0xd3c>
10009ca8:	f7ff fab8 	bl	1000921c <_Z4Gamev.part.0+0x2ac>
					if (*d != TILE_EMPTY) ok = False;
10009cac:	2353      	movs	r3, #83	; 0x53
10009cae:	5cc3      	ldrb	r3, [r0, r3]
10009cb0:	2b08      	cmp	r3, #8
10009cb2:	d001      	beq.n	10009cb8 <_Z4Gamev.part.0+0xd48>
10009cb4:	f7ff fab2 	bl	1000921c <_Z4Gamev.part.0+0x2ac>
			if (b != 0)
10009cb8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
10009cba:	2b00      	cmp	r3, #0
10009cbc:	d000      	beq.n	10009cc0 <_Z4Gamev.part.0+0xd50>
10009cbe:	e53a      	b.n	10009736 <_Z4Gamev.part.0+0x7c6>
10009cc0:	e53e      	b.n	10009740 <_Z4Gamev.part.0+0x7d0>
10009cc2:	9902      	ldr	r1, [sp, #8]
10009cc4:	2900      	cmp	r1, #0
10009cc6:	d100      	bne.n	10009cca <_Z4Gamev.part.0+0xd5a>
10009cc8:	e756      	b.n	10009b78 <_Z4Gamev.part.0+0xc08>
10009cca:	9c06      	ldr	r4, [sp, #24]
					ok = False;
10009ccc:	2100      	movs	r1, #0
			if (b != 0)
10009cce:	2c00      	cmp	r4, #0
10009cd0:	d001      	beq.n	10009cd6 <_Z4Gamev.part.0+0xd66>
10009cd2:	f7ff fa34 	bl	1000913e <_Z4Gamev.part.0+0x1ce>
10009cd6:	e746      	b.n	10009b66 <_Z4Gamev.part.0+0xbf6>
10009cd8:	9904      	ldr	r1, [sp, #16]
10009cda:	2900      	cmp	r1, #0
10009cdc:	d100      	bne.n	10009ce0 <_Z4Gamev.part.0+0xd70>
10009cde:	e76a      	b.n	10009bb6 <_Z4Gamev.part.0+0xc46>
10009ce0:	9c07      	ldr	r4, [sp, #28]
					ok = False;
10009ce2:	2100      	movs	r1, #0
			if (b != 0)
10009ce4:	2c00      	cmp	r4, #0
10009ce6:	d001      	beq.n	10009cec <_Z4Gamev.part.0+0xd7c>
10009ce8:	f7ff fa59 	bl	1000919e <_Z4Gamev.part.0+0x22e>
10009cec:	e759      	b.n	10009ba2 <_Z4Gamev.part.0+0xc32>
					ok = False;
10009cee:	2100      	movs	r1, #0
10009cf0:	e467      	b.n	100095c2 <_Z4Gamev.part.0+0x652>
					if (*d != TILE_EMPTY) ok = False;
10009cf2:	7845      	ldrb	r5, [r0, #1]
10009cf4:	3d08      	subs	r5, #8
10009cf6:	426e      	negs	r6, r5
10009cf8:	4175      	adcs	r5, r6
10009cfa:	426d      	negs	r5, r5
10009cfc:	4029      	ands	r1, r5
			if (b != 0)
10009cfe:	789d      	ldrb	r5, [r3, #2]
10009d00:	2d00      	cmp	r5, #0
10009d02:	d001      	beq.n	10009d08 <_Z4Gamev.part.0+0xd98>
10009d04:	f7ff fb8e 	bl	10009424 <_Z4Gamev.part.0+0x4b4>
10009d08:	e46b      	b.n	100095e2 <_Z4Gamev.part.0+0x672>
10009d0a:	799f      	ldrb	r7, [r3, #6]
10009d0c:	2f00      	cmp	r7, #0
10009d0e:	d083      	beq.n	10009c18 <_Z4Gamev.part.0+0xca8>
				if ((y < 1) || (y >= MAPH-1))
10009d10:	2a11      	cmp	r2, #17
10009d12:	d800      	bhi.n	10009d16 <_Z4Gamev.part.0+0xda6>
10009d14:	e487      	b.n	10009626 <_Z4Gamev.part.0+0x6b6>
					ok = False;
10009d16:	2100      	movs	r1, #0
10009d18:	f7ff fbb6 	bl	10009488 <_Z4Gamev.part.0+0x518>
			if (b != 0)
10009d1c:	7a9a      	ldrb	r2, [r3, #10]
10009d1e:	2a00      	cmp	r2, #0
10009d20:	d100      	bne.n	10009d24 <_Z4Gamev.part.0+0xdb4>
10009d22:	e769      	b.n	10009bf8 <_Z4Gamev.part.0+0xc88>
				if ((y < 1) || (y >= MAPH-1))
10009d24:	2d11      	cmp	r5, #17
10009d26:	d800      	bhi.n	10009d2a <_Z4Gamev.part.0+0xdba>
10009d28:	e4a6      	b.n	10009678 <_Z4Gamev.part.0+0x708>
					ok = False;
10009d2a:	2100      	movs	r1, #0
10009d2c:	f7ff fbd5 	bl	100094da <_Z4Gamev.part.0+0x56a>
			if (b != 0)
10009d30:	7b9a      	ldrb	r2, [r3, #14]
10009d32:	2a00      	cmp	r2, #0
10009d34:	d100      	bne.n	10009d38 <_Z4Gamev.part.0+0xdc8>
10009d36:	e0ac      	b.n	10009e92 <_Z4Gamev.part.0+0xf22>
				if ((y < 1) || (y >= MAPH-1))
10009d38:	9a01      	ldr	r2, [sp, #4]
10009d3a:	2a11      	cmp	r2, #17
10009d3c:	d901      	bls.n	10009d42 <_Z4Gamev.part.0+0xdd2>
10009d3e:	f7ff fbf2 	bl	10009526 <_Z4Gamev.part.0+0x5b6>
10009d42:	e4bc      	b.n	100096be <_Z4Gamev.part.0+0x74e>
	if (!CheckBrick(BrickX, BrickY, Brick))
10009d44:	2900      	cmp	r1, #0
10009d46:	d101      	bne.n	10009d4c <_Z4Gamev.part.0+0xddc>
10009d48:	f7ff fbed 	bl	10009526 <_Z4Gamev.part.0+0x5b6>
			if (b != 0) *d = b;
10009d4c:	9903      	ldr	r1, [sp, #12]
10009d4e:	2900      	cmp	r1, #0
10009d50:	d001      	beq.n	10009d56 <_Z4Gamev.part.0+0xde6>
10009d52:	465a      	mov	r2, fp
10009d54:	5511      	strb	r1, [r2, r4]
			b = *s++;
10009d56:	785a      	ldrb	r2, [r3, #1]
			if (b != 0) *d = b;
10009d58:	2a00      	cmp	r2, #0
10009d5a:	d000      	beq.n	10009d5e <_Z4Gamev.part.0+0xdee>
10009d5c:	7042      	strb	r2, [r0, #1]
			b = *s++;
10009d5e:	789a      	ldrb	r2, [r3, #2]
			if (b != 0) *d = b;
10009d60:	2a00      	cmp	r2, #0
10009d62:	d000      	beq.n	10009d66 <_Z4Gamev.part.0+0xdf6>
10009d64:	7082      	strb	r2, [r0, #2]
			b = *s++;
10009d66:	78da      	ldrb	r2, [r3, #3]
			if (b != 0) *d = b;
10009d68:	2a00      	cmp	r2, #0
10009d6a:	d000      	beq.n	10009d6e <_Z4Gamev.part.0+0xdfe>
10009d6c:	70c2      	strb	r2, [r0, #3]
10009d6e:	9a02      	ldr	r2, [sp, #8]
10009d70:	2a00      	cmp	r2, #0
10009d72:	d000      	beq.n	10009d76 <_Z4Gamev.part.0+0xe06>
10009d74:	76c2      	strb	r2, [r0, #27]
			b = *s++;
10009d76:	795a      	ldrb	r2, [r3, #5]
			if (b != 0) *d = b;
10009d78:	2a00      	cmp	r2, #0
10009d7a:	d000      	beq.n	10009d7e <_Z4Gamev.part.0+0xe0e>
10009d7c:	7702      	strb	r2, [r0, #28]
			b = *s++;
10009d7e:	799a      	ldrb	r2, [r3, #6]
			if (b != 0) *d = b;
10009d80:	2a00      	cmp	r2, #0
10009d82:	d000      	beq.n	10009d86 <_Z4Gamev.part.0+0xe16>
10009d84:	7742      	strb	r2, [r0, #29]
			b = *s++;
10009d86:	79da      	ldrb	r2, [r3, #7]
			if (b != 0) *d = b;
10009d88:	2a00      	cmp	r2, #0
10009d8a:	d000      	beq.n	10009d8e <_Z4Gamev.part.0+0xe1e>
10009d8c:	7782      	strb	r2, [r0, #30]
10009d8e:	2f00      	cmp	r7, #0
10009d90:	d001      	beq.n	10009d96 <_Z4Gamev.part.0+0xe26>
10009d92:	2236      	movs	r2, #54	; 0x36
10009d94:	5487      	strb	r7, [r0, r2]
			b = *s++;
10009d96:	7a5a      	ldrb	r2, [r3, #9]
			if (b != 0) *d = b;
10009d98:	2a00      	cmp	r2, #0
10009d9a:	d001      	beq.n	10009da0 <_Z4Gamev.part.0+0xe30>
10009d9c:	2137      	movs	r1, #55	; 0x37
10009d9e:	5442      	strb	r2, [r0, r1]
			b = *s++;
10009da0:	7a9a      	ldrb	r2, [r3, #10]
			if (b != 0) *d = b;
10009da2:	2a00      	cmp	r2, #0
10009da4:	d001      	beq.n	10009daa <_Z4Gamev.part.0+0xe3a>
10009da6:	2138      	movs	r1, #56	; 0x38
10009da8:	5442      	strb	r2, [r0, r1]
			b = *s++;
10009daa:	7ada      	ldrb	r2, [r3, #11]
			if (b != 0) *d = b;
10009dac:	2a00      	cmp	r2, #0
10009dae:	d001      	beq.n	10009db4 <_Z4Gamev.part.0+0xe44>
10009db0:	2139      	movs	r1, #57	; 0x39
10009db2:	5442      	strb	r2, [r0, r1]
10009db4:	2d00      	cmp	r5, #0
10009db6:	d001      	beq.n	10009dbc <_Z4Gamev.part.0+0xe4c>
10009db8:	2251      	movs	r2, #81	; 0x51
10009dba:	5485      	strb	r5, [r0, r2]
			b = *s++;
10009dbc:	7b5a      	ldrb	r2, [r3, #13]
			if (b != 0) *d = b;
10009dbe:	2a00      	cmp	r2, #0
10009dc0:	d001      	beq.n	10009dc6 <_Z4Gamev.part.0+0xe56>
10009dc2:	2152      	movs	r1, #82	; 0x52
10009dc4:	5442      	strb	r2, [r0, r1]
			b = *s++;
10009dc6:	7b9a      	ldrb	r2, [r3, #14]
			if (b != 0) *d = b;
10009dc8:	2a00      	cmp	r2, #0
10009dca:	d001      	beq.n	10009dd0 <_Z4Gamev.part.0+0xe60>
10009dcc:	2153      	movs	r1, #83	; 0x53
10009dce:	5442      	strb	r2, [r0, r1]
			b = *s++;
10009dd0:	7bdb      	ldrb	r3, [r3, #15]
			if (b != 0) *d = b;
10009dd2:	2b00      	cmp	r3, #0
10009dd4:	d101      	bne.n	10009dda <_Z4Gamev.part.0+0xe6a>
10009dd6:	f7ff f8df 	bl	10008f98 <_Z4Gamev.part.0+0x28>
10009dda:	2254      	movs	r2, #84	; 0x54
10009ddc:	5483      	strb	r3, [r0, r2]
10009dde:	f7ff f8db 	bl	10008f98 <_Z4Gamev.part.0+0x28>
	sleep_ms(100);
10009de2:	2064      	movs	r0, #100	; 0x64
10009de4:	f7fa fd28 	bl	10004838 <sleep_ms>
				if (SpeedCnt > SPEEDFALL) SpeedCnt = SPEEDFALL;
10009de8:	4643      	mov	r3, r8
10009dea:	681b      	ldr	r3, [r3, #0]
				Falling = True;
10009dec:	7026      	strb	r6, [r4, #0]
				if (SpeedCnt > SPEEDFALL) SpeedCnt = SPEEDFALL;
10009dee:	2b0a      	cmp	r3, #10
10009df0:	dc01      	bgt.n	10009df6 <_Z4Gamev.part.0+0xe86>
10009df2:	f7ff f8d7 	bl	10008fa4 <_Z4Gamev.part.0+0x34>
				SpeedCnt = Falling ? SPEEDFALL : StepSpeed;
10009df6:	230a      	movs	r3, #10
10009df8:	4642      	mov	r2, r8
10009dfa:	6013      	str	r3, [r2, #0]
		if (!Falling)
10009dfc:	f7ff f8d2 	bl	10008fa4 <_Z4Gamev.part.0+0x34>
10009e00:	26d0      	movs	r6, #208	; 0xd0
10009e02:	2464      	movs	r4, #100	; 0x64
10009e04:	2501      	movs	r5, #1
10009e06:	0636      	lsls	r6, r6, #24
10009e08:	6873      	ldr	r3, [r6, #4]
10009e0a:	0d1b      	lsrs	r3, r3, #20
	if (!gpio_get(PB_LT))
10009e0c:	421d      	tst	r5, r3
10009e0e:	d00f      	beq.n	10009e30 <_Z4Gamev.part.0+0xec0>
10009e10:	6873      	ldr	r3, [r6, #4]
10009e12:	0c5b      	lsrs	r3, r3, #17
	else if (!gpio_get(PB_RT))
10009e14:	421d      	tst	r5, r3
10009e16:	d00b      	beq.n	10009e30 <_Z4Gamev.part.0+0xec0>
10009e18:	6873      	ldr	r3, [r6, #4]
10009e1a:	0d9b      	lsrs	r3, r3, #22
	else if (!gpio_get(PB_DN))
10009e1c:	421d      	tst	r5, r3
10009e1e:	d007      	beq.n	10009e30 <_Z4Gamev.part.0+0xec0>
10009e20:	6873      	ldr	r3, [r6, #4]
10009e22:	0d5b      	lsrs	r3, r3, #21
	else if (!gpio_get(PB_CF))
10009e24:	421d      	tst	r5, r3
10009e26:	d021      	beq.n	10009e6c <_Z4Gamev.part.0+0xefc>
10009e28:	6873      	ldr	r3, [r6, #4]
10009e2a:	0e9b      	lsrs	r3, r3, #26
	else if (!gpio_get(PB_UR))
10009e2c:	421d      	tst	r5, r3
10009e2e:	d10a      	bne.n	10009e46 <_Z4Gamev.part.0+0xed6>
	sleep_ms(100);
10009e30:	2064      	movs	r0, #100	; 0x64
10009e32:	f7fa fd01 	bl	10004838 <sleep_ms>
	memcpy(Board, SaveBoard, MAPSIZE);
10009e36:	2287      	movs	r2, #135	; 0x87
10009e38:	4658      	mov	r0, fp
10009e3a:	49c1      	ldr	r1, [pc, #772]	; (1000a140 <_Z4Gamev.part.0+0x11d0>)
10009e3c:	0092      	lsls	r2, r2, #2
10009e3e:	f7f7 f957 	bl	100010f0 <__wrap___aeabi_memcpy>
	return i > 0; // i > 0 if continue with user
10009e42:	f7ff f8a9 	bl	10008f98 <_Z4Gamev.part.0+0x28>
		sleep_ms(100);
10009e46:	2064      	movs	r0, #100	; 0x64
	for (i = (timeout ? 100 : 1000000000) ; i > 0; i--)
10009e48:	3c01      	subs	r4, #1
		sleep_ms(100);
10009e4a:	f7fa fcf5 	bl	10004838 <sleep_ms>
	for (i = (timeout ? 100 : 1000000000) ; i > 0; i--)
10009e4e:	2c00      	cmp	r4, #0
10009e50:	d1da      	bne.n	10009e08 <_Z4Gamev.part.0+0xe98>
	memcpy(Board, SaveBoard, MAPSIZE);
10009e52:	2287      	movs	r2, #135	; 0x87
10009e54:	4658      	mov	r0, fp
10009e56:	49ba      	ldr	r1, [pc, #744]	; (1000a140 <_Z4Gamev.part.0+0x11d0>)
10009e58:	0092      	lsls	r2, r2, #2
10009e5a:	f7f7 f949 	bl	100010f0 <__wrap___aeabi_memcpy>
				FlushChar();
				break;
			}
		}
	}
}
10009e5e:	b015      	add	sp, #84	; 0x54
10009e60:	bcf0      	pop	{r4, r5, r6, r7}
10009e62:	46bb      	mov	fp, r7
10009e64:	46b2      	mov	sl, r6
10009e66:	46a9      	mov	r9, r5
10009e68:	46a0      	mov	r8, r4
10009e6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sleep_ms(100);
10009e6c:	2064      	movs	r0, #100	; 0x64
10009e6e:	f7fa fce3 	bl	10004838 <sleep_ms>
		sleep_ms(150);
10009e72:	2096      	movs	r0, #150	; 0x96
10009e74:	f7fa fce0 	bl	10004838 <sleep_ms>
10009e78:	e7dd      	b.n	10009e36 <_Z4Gamev.part.0+0xec6>
					ok = False;
10009e7a:	2100      	movs	r1, #0
				if ((y < 1) || (y >= MAPH-1))
10009e7c:	2b11      	cmp	r3, #17
10009e7e:	d901      	bls.n	10009e84 <_Z4Gamev.part.0+0xf14>
10009e80:	f7ff f95d 	bl	1000913e <_Z4Gamev.part.0+0x1ce>
	Bool ok = True;
10009e84:	3101      	adds	r1, #1
10009e86:	e6ed      	b.n	10009c64 <_Z4Gamev.part.0+0xcf4>
			if (b != 0)
10009e88:	7b9a      	ldrb	r2, [r3, #14]
10009e8a:	2a00      	cmp	r2, #0
10009e8c:	d001      	beq.n	10009e92 <_Z4Gamev.part.0+0xf22>
10009e8e:	f7ff fc16 	bl	100096be <_Z4Gamev.part.0+0x74e>
10009e92:	7bda      	ldrb	r2, [r3, #15]
10009e94:	2a00      	cmp	r2, #0
10009e96:	d100      	bne.n	10009e9a <_Z4Gamev.part.0+0xf2a>
10009e98:	e754      	b.n	10009d44 <_Z4Gamev.part.0+0xdd4>
				if ((y < 1) || (y >= MAPH-1))
10009e9a:	9a01      	ldr	r2, [sp, #4]
10009e9c:	2a11      	cmp	r2, #17
10009e9e:	d801      	bhi.n	10009ea4 <_Z4Gamev.part.0+0xf34>
10009ea0:	f7ff fb3b 	bl	1000951a <_Z4Gamev.part.0+0x5aa>
10009ea4:	f7ff fb3f 	bl	10009526 <_Z4Gamev.part.0+0x5b6>
			if (b != 0)
10009ea8:	9b09      	ldr	r3, [sp, #36]	; 0x24
10009eaa:	2b00      	cmp	r3, #0
10009eac:	d000      	beq.n	10009eb0 <_Z4Gamev.part.0+0xf40>
10009eae:	e432      	b.n	10009716 <_Z4Gamev.part.0+0x7a6>
10009eb0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
10009eb2:	2b00      	cmp	r3, #0
10009eb4:	d001      	beq.n	10009eba <_Z4Gamev.part.0+0xf4a>
10009eb6:	f7ff f9ab 	bl	10009210 <_Z4Gamev.part.0+0x2a0>
10009eba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
10009ebc:	2b00      	cmp	r3, #0
10009ebe:	d000      	beq.n	10009ec2 <_Z4Gamev.part.0+0xf52>
10009ec0:	e439      	b.n	10009736 <_Z4Gamev.part.0+0x7c6>
10009ec2:	e43d      	b.n	10009740 <_Z4Gamev.part.0+0x7d0>
				ClearBrick(BrickX, BrickY, Brick);
10009ec4:	2700      	movs	r7, #0
	sleep_ms(100);
10009ec6:	2064      	movs	r0, #100	; 0x64
10009ec8:	f7fa fcb6 	bl	10004838 <sleep_ms>
				ClearBrick(BrickX, BrickY, Brick);
10009ecc:	4b9d      	ldr	r3, [pc, #628]	; (1000a144 <_Z4Gamev.part.0+0x11d4>)
10009ece:	781b      	ldrb	r3, [r3, #0]
10009ed0:	b25b      	sxtb	r3, r3
10009ed2:	469a      	mov	sl, r3
10009ed4:	4b9c      	ldr	r3, [pc, #624]	; (1000a148 <_Z4Gamev.part.0+0x11d8>)
10009ed6:	57df      	ldrsb	r7, [r3, r7]
	const u8* s = &BrickTemp[brick*BRICKTEMPSIZE];
10009ed8:	4b9c      	ldr	r3, [pc, #624]	; (1000a14c <_Z4Gamev.part.0+0x11dc>)
	u8* d = &Board[x + y*MAPW];
10009eda:	007a      	lsls	r2, r7, #1
10009edc:	19d2      	adds	r2, r2, r7
10009ede:	00d1      	lsls	r1, r2, #3
	const u8* s = &BrickTemp[brick*BRICKTEMPSIZE];
10009ee0:	781b      	ldrb	r3, [r3, #0]
	u8* d = &Board[x + y*MAPW];
10009ee2:	1851      	adds	r1, r2, r1
			b = *s++;
10009ee4:	4a9a      	ldr	r2, [pc, #616]	; (1000a150 <_Z4Gamev.part.0+0x11e0>)
	const u8* s = &BrickTemp[brick*BRICKTEMPSIZE];
10009ee6:	011b      	lsls	r3, r3, #4
			b = *s++;
10009ee8:	5cd2      	ldrb	r2, [r2, r3]
	u8* d = &Board[x + y*MAPW];
10009eea:	000d      	movs	r5, r1
10009eec:	4451      	add	r1, sl
10009eee:	9109      	str	r1, [sp, #36]	; 0x24
			b = *s++;
10009ef0:	920c      	str	r2, [sp, #48]	; 0x30
			if (b != 0) *d = TILE_EMPTY;
10009ef2:	2a00      	cmp	r2, #0
10009ef4:	d002      	beq.n	10009efc <_Z4Gamev.part.0+0xf8c>
10009ef6:	2208      	movs	r2, #8
10009ef8:	4658      	mov	r0, fp
10009efa:	5442      	strb	r2, [r0, r1]
	const u8* s = &BrickTemp[brick*BRICKTEMPSIZE];
10009efc:	4a94      	ldr	r2, [pc, #592]	; (1000a150 <_Z4Gamev.part.0+0x11e0>)
10009efe:	4694      	mov	ip, r2
10009f00:	4463      	add	r3, ip
	u8* d = &Board[x + y*MAPW];
10009f02:	9a09      	ldr	r2, [sp, #36]	; 0x24
			b = *s++;
10009f04:	7859      	ldrb	r1, [r3, #1]
	u8* d = &Board[x + y*MAPW];
10009f06:	445a      	add	r2, fp
			b = *s++;
10009f08:	910a      	str	r1, [sp, #40]	; 0x28
			if (b != 0) *d = TILE_EMPTY;
10009f0a:	2900      	cmp	r1, #0
10009f0c:	d001      	beq.n	10009f12 <_Z4Gamev.part.0+0xfa2>
10009f0e:	2108      	movs	r1, #8
10009f10:	7051      	strb	r1, [r2, #1]
			b = *s++;
10009f12:	7899      	ldrb	r1, [r3, #2]
10009f14:	9103      	str	r1, [sp, #12]
			if (b != 0) *d = TILE_EMPTY;
10009f16:	2900      	cmp	r1, #0
10009f18:	d001      	beq.n	10009f1e <_Z4Gamev.part.0+0xfae>
10009f1a:	2108      	movs	r1, #8
10009f1c:	7091      	strb	r1, [r2, #2]
			b = *s++;
10009f1e:	78d9      	ldrb	r1, [r3, #3]
10009f20:	910b      	str	r1, [sp, #44]	; 0x2c
			if (b != 0) *d = TILE_EMPTY;
10009f22:	2900      	cmp	r1, #0
10009f24:	d001      	beq.n	10009f2a <_Z4Gamev.part.0+0xfba>
10009f26:	2108      	movs	r1, #8
10009f28:	70d1      	strb	r1, [r2, #3]
			b = *s++;
10009f2a:	7919      	ldrb	r1, [r3, #4]
10009f2c:	910d      	str	r1, [sp, #52]	; 0x34
			if (b != 0) *d = TILE_EMPTY;
10009f2e:	2900      	cmp	r1, #0
10009f30:	d001      	beq.n	10009f36 <_Z4Gamev.part.0+0xfc6>
10009f32:	2108      	movs	r1, #8
10009f34:	76d1      	strb	r1, [r2, #27]
			b = *s++;
10009f36:	7959      	ldrb	r1, [r3, #5]
10009f38:	9104      	str	r1, [sp, #16]
			if (b != 0) *d = TILE_EMPTY;
10009f3a:	2900      	cmp	r1, #0
10009f3c:	d001      	beq.n	10009f42 <_Z4Gamev.part.0+0xfd2>
10009f3e:	2108      	movs	r1, #8
10009f40:	7711      	strb	r1, [r2, #28]
			b = *s++;
10009f42:	7999      	ldrb	r1, [r3, #6]
10009f44:	9101      	str	r1, [sp, #4]
			if (b != 0) *d = TILE_EMPTY;
10009f46:	2900      	cmp	r1, #0
10009f48:	d001      	beq.n	10009f4e <_Z4Gamev.part.0+0xfde>
10009f4a:	2108      	movs	r1, #8
10009f4c:	7751      	strb	r1, [r2, #29]
			b = *s++;
10009f4e:	79d9      	ldrb	r1, [r3, #7]
10009f50:	9105      	str	r1, [sp, #20]
			if (b != 0) *d = TILE_EMPTY;
10009f52:	2900      	cmp	r1, #0
10009f54:	d001      	beq.n	10009f5a <_Z4Gamev.part.0+0xfea>
10009f56:	2108      	movs	r1, #8
10009f58:	7791      	strb	r1, [r2, #30]
			b = *s++;
10009f5a:	7a19      	ldrb	r1, [r3, #8]
10009f5c:	910e      	str	r1, [sp, #56]	; 0x38
			if (b != 0) *d = TILE_EMPTY;
10009f5e:	2900      	cmp	r1, #0
10009f60:	d002      	beq.n	10009f68 <_Z4Gamev.part.0+0xff8>
10009f62:	2136      	movs	r1, #54	; 0x36
10009f64:	2008      	movs	r0, #8
10009f66:	5450      	strb	r0, [r2, r1]
			b = *s++;
10009f68:	7a59      	ldrb	r1, [r3, #9]
10009f6a:	9106      	str	r1, [sp, #24]
			if (b != 0) *d = TILE_EMPTY;
10009f6c:	2900      	cmp	r1, #0
10009f6e:	d002      	beq.n	10009f76 <_Z4Gamev.part.0+0x1006>
10009f70:	2137      	movs	r1, #55	; 0x37
10009f72:	2008      	movs	r0, #8
10009f74:	5450      	strb	r0, [r2, r1]
			b = *s++;
10009f76:	7a9e      	ldrb	r6, [r3, #10]
			if (b != 0) *d = TILE_EMPTY;
10009f78:	2e00      	cmp	r6, #0
10009f7a:	d002      	beq.n	10009f82 <_Z4Gamev.part.0+0x1012>
10009f7c:	2138      	movs	r1, #56	; 0x38
10009f7e:	2008      	movs	r0, #8
10009f80:	5450      	strb	r0, [r2, r1]
			b = *s++;
10009f82:	7ad9      	ldrb	r1, [r3, #11]
10009f84:	9107      	str	r1, [sp, #28]
			if (b != 0) *d = TILE_EMPTY;
10009f86:	2900      	cmp	r1, #0
10009f88:	d002      	beq.n	10009f90 <_Z4Gamev.part.0+0x1020>
10009f8a:	2139      	movs	r1, #57	; 0x39
10009f8c:	2008      	movs	r0, #8
10009f8e:	5450      	strb	r0, [r2, r1]
			b = *s++;
10009f90:	7b19      	ldrb	r1, [r3, #12]
10009f92:	910f      	str	r1, [sp, #60]	; 0x3c
			if (b != 0) *d = TILE_EMPTY;
10009f94:	2900      	cmp	r1, #0
10009f96:	d002      	beq.n	10009f9e <_Z4Gamev.part.0+0x102e>
10009f98:	2151      	movs	r1, #81	; 0x51
10009f9a:	2008      	movs	r0, #8
10009f9c:	5450      	strb	r0, [r2, r1]
			b = *s++;
10009f9e:	7b59      	ldrb	r1, [r3, #13]
10009fa0:	9108      	str	r1, [sp, #32]
			if (b != 0) *d = TILE_EMPTY;
10009fa2:	2900      	cmp	r1, #0
10009fa4:	d002      	beq.n	10009fac <_Z4Gamev.part.0+0x103c>
10009fa6:	2152      	movs	r1, #82	; 0x52
10009fa8:	2008      	movs	r0, #8
10009faa:	5450      	strb	r0, [r2, r1]
			b = *s++;
10009fac:	7b9c      	ldrb	r4, [r3, #14]
			if (b != 0) *d = TILE_EMPTY;
10009fae:	2c00      	cmp	r4, #0
10009fb0:	d002      	beq.n	10009fb8 <_Z4Gamev.part.0+0x1048>
10009fb2:	2153      	movs	r1, #83	; 0x53
10009fb4:	2008      	movs	r0, #8
10009fb6:	5450      	strb	r0, [r2, r1]
			b = *s++;
10009fb8:	7bdb      	ldrb	r3, [r3, #15]
10009fba:	469c      	mov	ip, r3
			if (b != 0) *d = TILE_EMPTY;
10009fbc:	2b00      	cmp	r3, #0
10009fbe:	d002      	beq.n	10009fc6 <_Z4Gamev.part.0+0x1056>
10009fc0:	2354      	movs	r3, #84	; 0x54
10009fc2:	2108      	movs	r1, #8
10009fc4:	54d1      	strb	r1, [r2, r3]
				if (CheckBrick(BrickX+1, BrickY, Brick)) BrickX++;
10009fc6:	4653      	mov	r3, sl
10009fc8:	3301      	adds	r3, #1
10009fca:	b259      	sxtb	r1, r3
	u8* d = &Board[x + y*MAPW];
10009fcc:	468a      	mov	sl, r1
10009fce:	002b      	movs	r3, r5
10009fd0:	4453      	add	r3, sl
				if (CheckBrick(BrickX+1, BrickY, Brick)) BrickX++;
10009fd2:	9110      	str	r1, [sp, #64]	; 0x40
	u8* d = &Board[x + y*MAPW];
10009fd4:	0019      	movs	r1, r3
			if (b != 0)
10009fd6:	980c      	ldr	r0, [sp, #48]	; 0x30
	u8* d = &Board[x + y*MAPW];
10009fd8:	001d      	movs	r5, r3
10009fda:	9311      	str	r3, [sp, #68]	; 0x44
10009fdc:	4459      	add	r1, fp
			if (b != 0)
10009fde:	2800      	cmp	r0, #0
10009fe0:	d000      	beq.n	10009fe4 <_Z4Gamev.part.0+0x1074>
10009fe2:	e1fd      	b.n	1000a3e0 <_Z4Gamev.part.0+0x1470>
	Bool ok = True;
10009fe4:	2301      	movs	r3, #1
				if ((y < 1) || (y >= MAPH-1))
10009fe6:	b2f8      	uxtb	r0, r7
			if (b != 0)
10009fe8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
10009fea:	2f00      	cmp	r7, #0
10009fec:	d004      	beq.n	10009ff8 <_Z4Gamev.part.0+0x1088>
				if ((y < 1) || (y >= MAPH-1))
10009fee:	1e47      	subs	r7, r0, #1
10009ff0:	2f11      	cmp	r7, #17
10009ff2:	d800      	bhi.n	10009ff6 <_Z4Gamev.part.0+0x1086>
10009ff4:	e36e      	b.n	1000a6d4 <_Z4Gamev.part.0+0x1764>
					ok = False;
10009ff6:	2300      	movs	r3, #0
			if (b != 0)
10009ff8:	9d03      	ldr	r5, [sp, #12]
10009ffa:	2d00      	cmp	r5, #0
10009ffc:	d004      	beq.n	1000a008 <_Z4Gamev.part.0+0x1098>
				if ((y < 1) || (y >= MAPH-1))
10009ffe:	1e47      	subs	r7, r0, #1
1000a000:	2f11      	cmp	r7, #17
1000a002:	d800      	bhi.n	1000a006 <_Z4Gamev.part.0+0x1096>
1000a004:	e371      	b.n	1000a6ea <_Z4Gamev.part.0+0x177a>
					ok = False;
1000a006:	2300      	movs	r3, #0
			if (b != 0)
1000a008:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
1000a00a:	2d00      	cmp	r5, #0
1000a00c:	d004      	beq.n	1000a018 <_Z4Gamev.part.0+0x10a8>
				if ((y < 1) || (y >= MAPH-1))
1000a00e:	1e47      	subs	r7, r0, #1
1000a010:	2f11      	cmp	r7, #17
1000a012:	d800      	bhi.n	1000a016 <_Z4Gamev.part.0+0x10a6>
1000a014:	e374      	b.n	1000a700 <_Z4Gamev.part.0+0x1790>
					ok = False;
1000a016:	2300      	movs	r3, #0
		y++;
1000a018:	1c47      	adds	r7, r0, #1
1000a01a:	b2fd      	uxtb	r5, r7
1000a01c:	9502      	str	r5, [sp, #8]
			if (b != 0)
1000a01e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
1000a020:	2d00      	cmp	r5, #0
1000a022:	d100      	bne.n	1000a026 <_Z4Gamev.part.0+0x10b6>
1000a024:	e26c      	b.n	1000a500 <_Z4Gamev.part.0+0x1590>
				if ((y < 1) || (y >= MAPH-1))
1000a026:	2811      	cmp	r0, #17
1000a028:	d800      	bhi.n	1000a02c <_Z4Gamev.part.0+0x10bc>
1000a02a:	e399      	b.n	1000a760 <_Z4Gamev.part.0+0x17f0>
			if (b != 0)
1000a02c:	9b04      	ldr	r3, [sp, #16]
1000a02e:	2b00      	cmp	r3, #0
1000a030:	d00b      	beq.n	1000a04a <_Z4Gamev.part.0+0x10da>
1000a032:	9d01      	ldr	r5, [sp, #4]
					ok = False;
1000a034:	2300      	movs	r3, #0
			if (b != 0)
1000a036:	2d00      	cmp	r5, #0
1000a038:	d000      	beq.n	1000a03c <_Z4Gamev.part.0+0x10cc>
1000a03a:	e284      	b.n	1000a546 <_Z4Gamev.part.0+0x15d6>
1000a03c:	9d05      	ldr	r5, [sp, #20]
1000a03e:	2d00      	cmp	r5, #0
1000a040:	d100      	bne.n	1000a044 <_Z4Gamev.part.0+0x10d4>
1000a042:	e280      	b.n	1000a546 <_Z4Gamev.part.0+0x15d6>
				if ((y < 1) || (y >= MAPH-1))
1000a044:	2811      	cmp	r0, #17
1000a046:	d800      	bhi.n	1000a04a <_Z4Gamev.part.0+0x10da>
1000a048:	e276      	b.n	1000a538 <_Z4Gamev.part.0+0x15c8>
					ok = False;
1000a04a:	2300      	movs	r3, #0
		y++;
1000a04c:	3002      	adds	r0, #2
1000a04e:	b2c0      	uxtb	r0, r0
1000a050:	4682      	mov	sl, r0
			if (b != 0)
1000a052:	980e      	ldr	r0, [sp, #56]	; 0x38
1000a054:	2800      	cmp	r0, #0
1000a056:	d000      	beq.n	1000a05a <_Z4Gamev.part.0+0x10ea>
1000a058:	e27c      	b.n	1000a554 <_Z4Gamev.part.0+0x15e4>
1000a05a:	9806      	ldr	r0, [sp, #24]
1000a05c:	2800      	cmp	r0, #0
1000a05e:	d001      	beq.n	1000a064 <_Z4Gamev.part.0+0x10f4>
1000a060:	f000 fce7 	bl	1000aa32 <_Z4Gamev.part.0+0x1ac2>
1000a064:	2e00      	cmp	r6, #0
1000a066:	d101      	bne.n	1000a06c <_Z4Gamev.part.0+0x10fc>
1000a068:	f000 fc8f 	bl	1000a98a <_Z4Gamev.part.0+0x1a1a>
				if ((y < 1) || (y >= MAPH-1))
1000a06c:	9802      	ldr	r0, [sp, #8]
1000a06e:	2811      	cmp	r0, #17
1000a070:	d801      	bhi.n	1000a076 <_Z4Gamev.part.0+0x1106>
1000a072:	f000 fcea 	bl	1000aa4a <_Z4Gamev.part.0+0x1ada>
			if (b != 0)
1000a076:	980f      	ldr	r0, [sp, #60]	; 0x3c
					ok = False;
1000a078:	2300      	movs	r3, #0
			if (b != 0)
1000a07a:	2800      	cmp	r0, #0
1000a07c:	d001      	beq.n	1000a082 <_Z4Gamev.part.0+0x1112>
1000a07e:	f000 fc98 	bl	1000a9b2 <_Z4Gamev.part.0+0x1a42>
1000a082:	9808      	ldr	r0, [sp, #32]
1000a084:	2800      	cmp	r0, #0
1000a086:	d101      	bne.n	1000a08c <_Z4Gamev.part.0+0x111c>
1000a088:	f000 fcaf 	bl	1000a9ea <_Z4Gamev.part.0+0x1a7a>
				if ((y < 1) || (y >= MAPH-1))
1000a08c:	4650      	mov	r0, sl
1000a08e:	2811      	cmp	r0, #17
1000a090:	d817      	bhi.n	1000a0c2 <_Z4Gamev.part.0+0x1152>
					if (*d != TILE_EMPTY) ok = False;
1000a092:	2052      	movs	r0, #82	; 0x52
1000a094:	5c08      	ldrb	r0, [r1, r0]
1000a096:	2808      	cmp	r0, #8
1000a098:	d101      	bne.n	1000a09e <_Z4Gamev.part.0+0x112e>
1000a09a:	f000 fcaf 	bl	1000a9fc <_Z4Gamev.part.0+0x1a8c>
			if (b != 0)
1000a09e:	2c00      	cmp	r4, #0
1000a0a0:	d00f      	beq.n	1000a0c2 <_Z4Gamev.part.0+0x1152>
1000a0a2:	2300      	movs	r3, #0
					if (*d != TILE_EMPTY) ok = False;
1000a0a4:	2053      	movs	r0, #83	; 0x53
1000a0a6:	5c08      	ldrb	r0, [r1, r0]
1000a0a8:	2808      	cmp	r0, #8
1000a0aa:	d10a      	bne.n	1000a0c2 <_Z4Gamev.part.0+0x1152>
			if (b != 0)
1000a0ac:	4660      	mov	r0, ip
1000a0ae:	2800      	cmp	r0, #0
1000a0b0:	d101      	bne.n	1000a0b6 <_Z4Gamev.part.0+0x1146>
1000a0b2:	f000 fcab 	bl	1000aa0c <_Z4Gamev.part.0+0x1a9c>
					if (*d != TILE_EMPTY) ok = False;
1000a0b6:	2054      	movs	r0, #84	; 0x54
1000a0b8:	5c08      	ldrb	r0, [r1, r0]
1000a0ba:	2808      	cmp	r0, #8
1000a0bc:	d101      	bne.n	1000a0c2 <_Z4Gamev.part.0+0x1152>
1000a0be:	f000 fca5 	bl	1000aa0c <_Z4Gamev.part.0+0x1a9c>
			if (b != 0) *d = b;
1000a0c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1000a0c4:	2b00      	cmp	r3, #0
1000a0c6:	d002      	beq.n	1000a0ce <_Z4Gamev.part.0+0x115e>
1000a0c8:	4659      	mov	r1, fp
1000a0ca:	9809      	ldr	r0, [sp, #36]	; 0x24
1000a0cc:	540b      	strb	r3, [r1, r0]
1000a0ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1000a0d0:	2b00      	cmp	r3, #0
1000a0d2:	d000      	beq.n	1000a0d6 <_Z4Gamev.part.0+0x1166>
1000a0d4:	7053      	strb	r3, [r2, #1]
1000a0d6:	9b03      	ldr	r3, [sp, #12]
1000a0d8:	2b00      	cmp	r3, #0
1000a0da:	d000      	beq.n	1000a0de <_Z4Gamev.part.0+0x116e>
1000a0dc:	7093      	strb	r3, [r2, #2]
1000a0de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1000a0e0:	2b00      	cmp	r3, #0
1000a0e2:	d000      	beq.n	1000a0e6 <_Z4Gamev.part.0+0x1176>
1000a0e4:	70d3      	strb	r3, [r2, #3]
1000a0e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1000a0e8:	2b00      	cmp	r3, #0
1000a0ea:	d000      	beq.n	1000a0ee <_Z4Gamev.part.0+0x117e>
1000a0ec:	76d3      	strb	r3, [r2, #27]
1000a0ee:	9b04      	ldr	r3, [sp, #16]
1000a0f0:	2b00      	cmp	r3, #0
1000a0f2:	d000      	beq.n	1000a0f6 <_Z4Gamev.part.0+0x1186>
1000a0f4:	7713      	strb	r3, [r2, #28]
1000a0f6:	9b01      	ldr	r3, [sp, #4]
1000a0f8:	2b00      	cmp	r3, #0
1000a0fa:	d000      	beq.n	1000a0fe <_Z4Gamev.part.0+0x118e>
1000a0fc:	7753      	strb	r3, [r2, #29]
1000a0fe:	9b05      	ldr	r3, [sp, #20]
1000a100:	2b00      	cmp	r3, #0
1000a102:	d000      	beq.n	1000a106 <_Z4Gamev.part.0+0x1196>
1000a104:	7793      	strb	r3, [r2, #30]
1000a106:	990e      	ldr	r1, [sp, #56]	; 0x38
1000a108:	2900      	cmp	r1, #0
1000a10a:	d001      	beq.n	1000a110 <_Z4Gamev.part.0+0x11a0>
1000a10c:	2336      	movs	r3, #54	; 0x36
1000a10e:	54d1      	strb	r1, [r2, r3]
1000a110:	9906      	ldr	r1, [sp, #24]
1000a112:	2900      	cmp	r1, #0
1000a114:	d001      	beq.n	1000a11a <_Z4Gamev.part.0+0x11aa>
1000a116:	2337      	movs	r3, #55	; 0x37
1000a118:	54d1      	strb	r1, [r2, r3]
1000a11a:	2e00      	cmp	r6, #0
1000a11c:	d001      	beq.n	1000a122 <_Z4Gamev.part.0+0x11b2>
1000a11e:	2338      	movs	r3, #56	; 0x38
1000a120:	54d6      	strb	r6, [r2, r3]
1000a122:	9907      	ldr	r1, [sp, #28]
1000a124:	2900      	cmp	r1, #0
1000a126:	d001      	beq.n	1000a12c <_Z4Gamev.part.0+0x11bc>
1000a128:	2339      	movs	r3, #57	; 0x39
1000a12a:	54d1      	strb	r1, [r2, r3]
1000a12c:	990f      	ldr	r1, [sp, #60]	; 0x3c
1000a12e:	2900      	cmp	r1, #0
1000a130:	d001      	beq.n	1000a136 <_Z4Gamev.part.0+0x11c6>
1000a132:	2351      	movs	r3, #81	; 0x51
1000a134:	54d1      	strb	r1, [r2, r3]
1000a136:	9908      	ldr	r1, [sp, #32]
1000a138:	2900      	cmp	r1, #0
1000a13a:	d100      	bne.n	1000a13e <_Z4Gamev.part.0+0x11ce>
1000a13c:	e142      	b.n	1000a3c4 <_Z4Gamev.part.0+0x1454>
1000a13e:	e13f      	b.n	1000a3c0 <_Z4Gamev.part.0+0x1450>
1000a140:	20006c2c 	.word	0x20006c2c
1000a144:	20012765 	.word	0x20012765
1000a148:	20012766 	.word	0x20012766
1000a14c:	20012764 	.word	0x20012764
1000a150:	10010bd4 	.word	0x10010bd4
	sleep_ms(100);
1000a154:	2064      	movs	r0, #100	; 0x64
				ClearBrick(BrickX, BrickY, Brick);
1000a156:	2700      	movs	r7, #0
	sleep_ms(100);
1000a158:	f7fa fb6e 	bl	10004838 <sleep_ms>
				ClearBrick(BrickX, BrickY, Brick);
1000a15c:	4bbf      	ldr	r3, [pc, #764]	; (1000a45c <_Z4Gamev.part.0+0x14ec>)
1000a15e:	781b      	ldrb	r3, [r3, #0]
1000a160:	b25b      	sxtb	r3, r3
1000a162:	469a      	mov	sl, r3
1000a164:	4bbe      	ldr	r3, [pc, #760]	; (1000a460 <_Z4Gamev.part.0+0x14f0>)
1000a166:	57df      	ldrsb	r7, [r3, r7]
	const u8* s = &BrickTemp[brick*BRICKTEMPSIZE];
1000a168:	4bbe      	ldr	r3, [pc, #760]	; (1000a464 <_Z4Gamev.part.0+0x14f4>)
	u8* d = &Board[x + y*MAPW];
1000a16a:	007a      	lsls	r2, r7, #1
1000a16c:	19d2      	adds	r2, r2, r7
1000a16e:	00d1      	lsls	r1, r2, #3
1000a170:	1852      	adds	r2, r2, r1
1000a172:	0015      	movs	r5, r2
	const u8* s = &BrickTemp[brick*BRICKTEMPSIZE];
1000a174:	781b      	ldrb	r3, [r3, #0]
	u8* d = &Board[x + y*MAPW];
1000a176:	4452      	add	r2, sl
1000a178:	9202      	str	r2, [sp, #8]
			b = *s++;
1000a17a:	4abb      	ldr	r2, [pc, #748]	; (1000a468 <_Z4Gamev.part.0+0x14f8>)
	const u8* s = &BrickTemp[brick*BRICKTEMPSIZE];
1000a17c:	011b      	lsls	r3, r3, #4
			b = *s++;
1000a17e:	5cd2      	ldrb	r2, [r2, r3]
1000a180:	920c      	str	r2, [sp, #48]	; 0x30
			if (b != 0) *d = TILE_EMPTY;
1000a182:	2a00      	cmp	r2, #0
1000a184:	d003      	beq.n	1000a18e <_Z4Gamev.part.0+0x121e>
1000a186:	2208      	movs	r2, #8
1000a188:	4659      	mov	r1, fp
1000a18a:	9802      	ldr	r0, [sp, #8]
1000a18c:	540a      	strb	r2, [r1, r0]
	const u8* s = &BrickTemp[brick*BRICKTEMPSIZE];
1000a18e:	4ab6      	ldr	r2, [pc, #728]	; (1000a468 <_Z4Gamev.part.0+0x14f8>)
1000a190:	4694      	mov	ip, r2
1000a192:	4463      	add	r3, ip
	u8* d = &Board[x + y*MAPW];
1000a194:	9a02      	ldr	r2, [sp, #8]
			b = *s++;
1000a196:	7859      	ldrb	r1, [r3, #1]
	u8* d = &Board[x + y*MAPW];
1000a198:	445a      	add	r2, fp
			b = *s++;
1000a19a:	910a      	str	r1, [sp, #40]	; 0x28
			if (b != 0) *d = TILE_EMPTY;
1000a19c:	2900      	cmp	r1, #0
1000a19e:	d001      	beq.n	1000a1a4 <_Z4Gamev.part.0+0x1234>
1000a1a0:	2108      	movs	r1, #8
1000a1a2:	7051      	strb	r1, [r2, #1]
			b = *s++;
1000a1a4:	7899      	ldrb	r1, [r3, #2]
1000a1a6:	9104      	str	r1, [sp, #16]
			if (b != 0) *d = TILE_EMPTY;
1000a1a8:	2900      	cmp	r1, #0
1000a1aa:	d001      	beq.n	1000a1b0 <_Z4Gamev.part.0+0x1240>
1000a1ac:	2108      	movs	r1, #8
1000a1ae:	7091      	strb	r1, [r2, #2]
			b = *s++;
1000a1b0:	78d9      	ldrb	r1, [r3, #3]
1000a1b2:	910b      	str	r1, [sp, #44]	; 0x2c
			if (b != 0) *d = TILE_EMPTY;
1000a1b4:	2900      	cmp	r1, #0
1000a1b6:	d001      	beq.n	1000a1bc <_Z4Gamev.part.0+0x124c>
1000a1b8:	2108      	movs	r1, #8
1000a1ba:	70d1      	strb	r1, [r2, #3]
			b = *s++;
1000a1bc:	7919      	ldrb	r1, [r3, #4]
1000a1be:	910d      	str	r1, [sp, #52]	; 0x34
			if (b != 0) *d = TILE_EMPTY;
1000a1c0:	2900      	cmp	r1, #0
1000a1c2:	d001      	beq.n	1000a1c8 <_Z4Gamev.part.0+0x1258>
1000a1c4:	2108      	movs	r1, #8
1000a1c6:	76d1      	strb	r1, [r2, #27]
			b = *s++;
1000a1c8:	7959      	ldrb	r1, [r3, #5]
1000a1ca:	9105      	str	r1, [sp, #20]
			if (b != 0) *d = TILE_EMPTY;
1000a1cc:	2900      	cmp	r1, #0
1000a1ce:	d001      	beq.n	1000a1d4 <_Z4Gamev.part.0+0x1264>
1000a1d0:	2108      	movs	r1, #8
1000a1d2:	7711      	strb	r1, [r2, #28]
			b = *s++;
1000a1d4:	7999      	ldrb	r1, [r3, #6]
1000a1d6:	9101      	str	r1, [sp, #4]
			if (b != 0) *d = TILE_EMPTY;
1000a1d8:	2900      	cmp	r1, #0
1000a1da:	d001      	beq.n	1000a1e0 <_Z4Gamev.part.0+0x1270>
1000a1dc:	2108      	movs	r1, #8
1000a1de:	7751      	strb	r1, [r2, #29]
			b = *s++;
1000a1e0:	79d9      	ldrb	r1, [r3, #7]
1000a1e2:	9106      	str	r1, [sp, #24]
			if (b != 0) *d = TILE_EMPTY;
1000a1e4:	2900      	cmp	r1, #0
1000a1e6:	d001      	beq.n	1000a1ec <_Z4Gamev.part.0+0x127c>
1000a1e8:	2108      	movs	r1, #8
1000a1ea:	7791      	strb	r1, [r2, #30]
			b = *s++;
1000a1ec:	7a19      	ldrb	r1, [r3, #8]
1000a1ee:	910e      	str	r1, [sp, #56]	; 0x38
			if (b != 0) *d = TILE_EMPTY;
1000a1f0:	2900      	cmp	r1, #0
1000a1f2:	d002      	beq.n	1000a1fa <_Z4Gamev.part.0+0x128a>
1000a1f4:	2136      	movs	r1, #54	; 0x36
1000a1f6:	2008      	movs	r0, #8
1000a1f8:	5450      	strb	r0, [r2, r1]
			b = *s++;
1000a1fa:	7a59      	ldrb	r1, [r3, #9]
1000a1fc:	9107      	str	r1, [sp, #28]
			if (b != 0) *d = TILE_EMPTY;
1000a1fe:	2900      	cmp	r1, #0
1000a200:	d002      	beq.n	1000a208 <_Z4Gamev.part.0+0x1298>
1000a202:	2137      	movs	r1, #55	; 0x37
1000a204:	2008      	movs	r0, #8
1000a206:	5450      	strb	r0, [r2, r1]
			b = *s++;
1000a208:	7a9e      	ldrb	r6, [r3, #10]
			if (b != 0) *d = TILE_EMPTY;
1000a20a:	2e00      	cmp	r6, #0
1000a20c:	d002      	beq.n	1000a214 <_Z4Gamev.part.0+0x12a4>
1000a20e:	2138      	movs	r1, #56	; 0x38
1000a210:	2008      	movs	r0, #8
1000a212:	5450      	strb	r0, [r2, r1]
			b = *s++;
1000a214:	7ad9      	ldrb	r1, [r3, #11]
1000a216:	9108      	str	r1, [sp, #32]
			if (b != 0) *d = TILE_EMPTY;
1000a218:	2900      	cmp	r1, #0
1000a21a:	d002      	beq.n	1000a222 <_Z4Gamev.part.0+0x12b2>
1000a21c:	2139      	movs	r1, #57	; 0x39
1000a21e:	2008      	movs	r0, #8
1000a220:	5450      	strb	r0, [r2, r1]
			b = *s++;
1000a222:	7b19      	ldrb	r1, [r3, #12]
1000a224:	910f      	str	r1, [sp, #60]	; 0x3c
			if (b != 0) *d = TILE_EMPTY;
1000a226:	2900      	cmp	r1, #0
1000a228:	d002      	beq.n	1000a230 <_Z4Gamev.part.0+0x12c0>
1000a22a:	2151      	movs	r1, #81	; 0x51
1000a22c:	2008      	movs	r0, #8
1000a22e:	5450      	strb	r0, [r2, r1]
			b = *s++;
1000a230:	7b59      	ldrb	r1, [r3, #13]
1000a232:	9109      	str	r1, [sp, #36]	; 0x24
			if (b != 0) *d = TILE_EMPTY;
1000a234:	2900      	cmp	r1, #0
1000a236:	d002      	beq.n	1000a23e <_Z4Gamev.part.0+0x12ce>
1000a238:	2152      	movs	r1, #82	; 0x52
1000a23a:	2008      	movs	r0, #8
1000a23c:	5450      	strb	r0, [r2, r1]
			b = *s++;
1000a23e:	7b9c      	ldrb	r4, [r3, #14]
			if (b != 0) *d = TILE_EMPTY;
1000a240:	2c00      	cmp	r4, #0
1000a242:	d002      	beq.n	1000a24a <_Z4Gamev.part.0+0x12da>
1000a244:	2153      	movs	r1, #83	; 0x53
1000a246:	2008      	movs	r0, #8
1000a248:	5450      	strb	r0, [r2, r1]
			b = *s++;
1000a24a:	7bdb      	ldrb	r3, [r3, #15]
1000a24c:	469c      	mov	ip, r3
			if (b != 0) *d = TILE_EMPTY;
1000a24e:	2b00      	cmp	r3, #0
1000a250:	d002      	beq.n	1000a258 <_Z4Gamev.part.0+0x12e8>
1000a252:	2354      	movs	r3, #84	; 0x54
1000a254:	2108      	movs	r1, #8
1000a256:	54d1      	strb	r1, [r2, r3]
				if (CheckBrick(BrickX-1, BrickY, Brick)) BrickX--;
1000a258:	4653      	mov	r3, sl
1000a25a:	3b01      	subs	r3, #1
1000a25c:	b259      	sxtb	r1, r3
	u8* d = &Board[x + y*MAPW];
1000a25e:	468a      	mov	sl, r1
1000a260:	002b      	movs	r3, r5
1000a262:	4453      	add	r3, sl
				if (CheckBrick(BrickX-1, BrickY, Brick)) BrickX--;
1000a264:	9110      	str	r1, [sp, #64]	; 0x40
	u8* d = &Board[x + y*MAPW];
1000a266:	0019      	movs	r1, r3
			if (b != 0)
1000a268:	980c      	ldr	r0, [sp, #48]	; 0x30
	u8* d = &Board[x + y*MAPW];
1000a26a:	001d      	movs	r5, r3
1000a26c:	9311      	str	r3, [sp, #68]	; 0x44
1000a26e:	4459      	add	r1, fp
			if (b != 0)
1000a270:	2800      	cmp	r0, #0
1000a272:	d000      	beq.n	1000a276 <_Z4Gamev.part.0+0x1306>
1000a274:	e0c8      	b.n	1000a408 <_Z4Gamev.part.0+0x1498>
	Bool ok = True;
1000a276:	2301      	movs	r3, #1
				if ((y < 1) || (y >= MAPH-1))
1000a278:	b2f8      	uxtb	r0, r7
			if (b != 0)
1000a27a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
1000a27c:	2f00      	cmp	r7, #0
1000a27e:	d004      	beq.n	1000a28a <_Z4Gamev.part.0+0x131a>
				if ((y < 1) || (y >= MAPH-1))
1000a280:	1e47      	subs	r7, r0, #1
1000a282:	2f11      	cmp	r7, #17
1000a284:	d800      	bhi.n	1000a288 <_Z4Gamev.part.0+0x1318>
1000a286:	e1df      	b.n	1000a648 <_Z4Gamev.part.0+0x16d8>
					ok = False;
1000a288:	2300      	movs	r3, #0
			if (b != 0)
1000a28a:	9d04      	ldr	r5, [sp, #16]
1000a28c:	2d00      	cmp	r5, #0
1000a28e:	d004      	beq.n	1000a29a <_Z4Gamev.part.0+0x132a>
				if ((y < 1) || (y >= MAPH-1))
1000a290:	1e47      	subs	r7, r0, #1
1000a292:	2f11      	cmp	r7, #17
1000a294:	d800      	bhi.n	1000a298 <_Z4Gamev.part.0+0x1328>
1000a296:	e1e2      	b.n	1000a65e <_Z4Gamev.part.0+0x16ee>
					ok = False;
1000a298:	2300      	movs	r3, #0
			if (b != 0)
1000a29a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
1000a29c:	2d00      	cmp	r5, #0
1000a29e:	d004      	beq.n	1000a2aa <_Z4Gamev.part.0+0x133a>
				if ((y < 1) || (y >= MAPH-1))
1000a2a0:	1e47      	subs	r7, r0, #1
1000a2a2:	2f11      	cmp	r7, #17
1000a2a4:	d800      	bhi.n	1000a2a8 <_Z4Gamev.part.0+0x1338>
1000a2a6:	e1e5      	b.n	1000a674 <_Z4Gamev.part.0+0x1704>
					ok = False;
1000a2a8:	2300      	movs	r3, #0
		y++;
1000a2aa:	1c47      	adds	r7, r0, #1
1000a2ac:	b2fd      	uxtb	r5, r7
1000a2ae:	9503      	str	r5, [sp, #12]
			if (b != 0)
1000a2b0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
1000a2b2:	2d00      	cmp	r5, #0
1000a2b4:	d100      	bne.n	1000a2b8 <_Z4Gamev.part.0+0x1348>
1000a2b6:	e164      	b.n	1000a582 <_Z4Gamev.part.0+0x1612>
				if ((y < 1) || (y >= MAPH-1))
1000a2b8:	2811      	cmp	r0, #17
1000a2ba:	d800      	bhi.n	1000a2be <_Z4Gamev.part.0+0x134e>
1000a2bc:	e228      	b.n	1000a710 <_Z4Gamev.part.0+0x17a0>
			if (b != 0)
1000a2be:	9b05      	ldr	r3, [sp, #20]
1000a2c0:	2b00      	cmp	r3, #0
1000a2c2:	d00b      	beq.n	1000a2dc <_Z4Gamev.part.0+0x136c>
1000a2c4:	9d01      	ldr	r5, [sp, #4]
					ok = False;
1000a2c6:	2300      	movs	r3, #0
			if (b != 0)
1000a2c8:	2d00      	cmp	r5, #0
1000a2ca:	d000      	beq.n	1000a2ce <_Z4Gamev.part.0+0x135e>
1000a2cc:	e17b      	b.n	1000a5c6 <_Z4Gamev.part.0+0x1656>
1000a2ce:	9d06      	ldr	r5, [sp, #24]
1000a2d0:	2d00      	cmp	r5, #0
1000a2d2:	d100      	bne.n	1000a2d6 <_Z4Gamev.part.0+0x1366>
1000a2d4:	e177      	b.n	1000a5c6 <_Z4Gamev.part.0+0x1656>
				if ((y < 1) || (y >= MAPH-1))
1000a2d6:	2811      	cmp	r0, #17
1000a2d8:	d800      	bhi.n	1000a2dc <_Z4Gamev.part.0+0x136c>
1000a2da:	e16d      	b.n	1000a5b8 <_Z4Gamev.part.0+0x1648>
					ok = False;
1000a2dc:	2300      	movs	r3, #0
		y++;
1000a2de:	3002      	adds	r0, #2
1000a2e0:	b2c0      	uxtb	r0, r0
1000a2e2:	4682      	mov	sl, r0
			if (b != 0)
1000a2e4:	980e      	ldr	r0, [sp, #56]	; 0x38
1000a2e6:	2800      	cmp	r0, #0
1000a2e8:	d000      	beq.n	1000a2ec <_Z4Gamev.part.0+0x137c>
1000a2ea:	e173      	b.n	1000a5d4 <_Z4Gamev.part.0+0x1664>
1000a2ec:	9807      	ldr	r0, [sp, #28]
1000a2ee:	2800      	cmp	r0, #0
1000a2f0:	d001      	beq.n	1000a2f6 <_Z4Gamev.part.0+0x1386>
1000a2f2:	f000 fc19 	bl	1000ab28 <_Z4Gamev.part.0+0x1bb8>
1000a2f6:	2e00      	cmp	r6, #0
1000a2f8:	d100      	bne.n	1000a2fc <_Z4Gamev.part.0+0x138c>
1000a2fa:	e315      	b.n	1000a928 <_Z4Gamev.part.0+0x19b8>
				if ((y < 1) || (y >= MAPH-1))
1000a2fc:	9803      	ldr	r0, [sp, #12]
1000a2fe:	2811      	cmp	r0, #17
1000a300:	d800      	bhi.n	1000a304 <_Z4Gamev.part.0+0x1394>
1000a302:	e179      	b.n	1000a5f8 <_Z4Gamev.part.0+0x1688>
			if (b != 0)
1000a304:	980f      	ldr	r0, [sp, #60]	; 0x3c
					ok = False;
1000a306:	2300      	movs	r3, #0
			if (b != 0)
1000a308:	2800      	cmp	r0, #0
1000a30a:	d000      	beq.n	1000a30e <_Z4Gamev.part.0+0x139e>
1000a30c:	e31e      	b.n	1000a94c <_Z4Gamev.part.0+0x19dc>
1000a30e:	9809      	ldr	r0, [sp, #36]	; 0x24
1000a310:	2800      	cmp	r0, #0
1000a312:	d100      	bne.n	1000a316 <_Z4Gamev.part.0+0x13a6>
1000a314:	e386      	b.n	1000aa24 <_Z4Gamev.part.0+0x1ab4>
				if ((y < 1) || (y >= MAPH-1))
1000a316:	4650      	mov	r0, sl
1000a318:	2811      	cmp	r0, #17
1000a31a:	d814      	bhi.n	1000a346 <_Z4Gamev.part.0+0x13d6>
					if (*d != TILE_EMPTY) ok = False;
1000a31c:	2052      	movs	r0, #82	; 0x52
1000a31e:	5c08      	ldrb	r0, [r1, r0]
1000a320:	2808      	cmp	r0, #8
1000a322:	d100      	bne.n	1000a326 <_Z4Gamev.part.0+0x13b6>
1000a324:	e39c      	b.n	1000aa60 <_Z4Gamev.part.0+0x1af0>
			if (b != 0)
1000a326:	2c00      	cmp	r4, #0
1000a328:	d00d      	beq.n	1000a346 <_Z4Gamev.part.0+0x13d6>
1000a32a:	2300      	movs	r3, #0
					if (*d != TILE_EMPTY) ok = False;
1000a32c:	2053      	movs	r0, #83	; 0x53
1000a32e:	5c08      	ldrb	r0, [r1, r0]
1000a330:	2808      	cmp	r0, #8
1000a332:	d108      	bne.n	1000a346 <_Z4Gamev.part.0+0x13d6>
			if (b != 0)
1000a334:	4660      	mov	r0, ip
1000a336:	2800      	cmp	r0, #0
1000a338:	d100      	bne.n	1000a33c <_Z4Gamev.part.0+0x13cc>
1000a33a:	e398      	b.n	1000aa6e <_Z4Gamev.part.0+0x1afe>
					if (*d != TILE_EMPTY) ok = False;
1000a33c:	2054      	movs	r0, #84	; 0x54
1000a33e:	5c08      	ldrb	r0, [r1, r0]
1000a340:	2808      	cmp	r0, #8
1000a342:	d100      	bne.n	1000a346 <_Z4Gamev.part.0+0x13d6>
1000a344:	e393      	b.n	1000aa6e <_Z4Gamev.part.0+0x1afe>
			if (b != 0) *d = b;
1000a346:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1000a348:	2b00      	cmp	r3, #0
1000a34a:	d002      	beq.n	1000a352 <_Z4Gamev.part.0+0x13e2>
1000a34c:	4659      	mov	r1, fp
1000a34e:	9802      	ldr	r0, [sp, #8]
1000a350:	540b      	strb	r3, [r1, r0]
1000a352:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1000a354:	2b00      	cmp	r3, #0
1000a356:	d000      	beq.n	1000a35a <_Z4Gamev.part.0+0x13ea>
1000a358:	7053      	strb	r3, [r2, #1]
1000a35a:	9b04      	ldr	r3, [sp, #16]
1000a35c:	2b00      	cmp	r3, #0
1000a35e:	d000      	beq.n	1000a362 <_Z4Gamev.part.0+0x13f2>
1000a360:	7093      	strb	r3, [r2, #2]
1000a362:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1000a364:	2b00      	cmp	r3, #0
1000a366:	d000      	beq.n	1000a36a <_Z4Gamev.part.0+0x13fa>
1000a368:	70d3      	strb	r3, [r2, #3]
1000a36a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1000a36c:	2b00      	cmp	r3, #0
1000a36e:	d000      	beq.n	1000a372 <_Z4Gamev.part.0+0x1402>
1000a370:	76d3      	strb	r3, [r2, #27]
1000a372:	9b05      	ldr	r3, [sp, #20]
1000a374:	2b00      	cmp	r3, #0
1000a376:	d000      	beq.n	1000a37a <_Z4Gamev.part.0+0x140a>
1000a378:	7713      	strb	r3, [r2, #28]
1000a37a:	9b01      	ldr	r3, [sp, #4]
1000a37c:	2b00      	cmp	r3, #0
1000a37e:	d000      	beq.n	1000a382 <_Z4Gamev.part.0+0x1412>
1000a380:	7753      	strb	r3, [r2, #29]
1000a382:	9b06      	ldr	r3, [sp, #24]
1000a384:	2b00      	cmp	r3, #0
1000a386:	d000      	beq.n	1000a38a <_Z4Gamev.part.0+0x141a>
1000a388:	7793      	strb	r3, [r2, #30]
1000a38a:	990e      	ldr	r1, [sp, #56]	; 0x38
1000a38c:	2900      	cmp	r1, #0
1000a38e:	d001      	beq.n	1000a394 <_Z4Gamev.part.0+0x1424>
1000a390:	2336      	movs	r3, #54	; 0x36
1000a392:	54d1      	strb	r1, [r2, r3]
1000a394:	9907      	ldr	r1, [sp, #28]
1000a396:	2900      	cmp	r1, #0
1000a398:	d001      	beq.n	1000a39e <_Z4Gamev.part.0+0x142e>
1000a39a:	2337      	movs	r3, #55	; 0x37
1000a39c:	54d1      	strb	r1, [r2, r3]
1000a39e:	2e00      	cmp	r6, #0
1000a3a0:	d001      	beq.n	1000a3a6 <_Z4Gamev.part.0+0x1436>
1000a3a2:	2338      	movs	r3, #56	; 0x38
1000a3a4:	54d6      	strb	r6, [r2, r3]
1000a3a6:	9908      	ldr	r1, [sp, #32]
1000a3a8:	2900      	cmp	r1, #0
1000a3aa:	d001      	beq.n	1000a3b0 <_Z4Gamev.part.0+0x1440>
1000a3ac:	2339      	movs	r3, #57	; 0x39
1000a3ae:	54d1      	strb	r1, [r2, r3]
1000a3b0:	990f      	ldr	r1, [sp, #60]	; 0x3c
1000a3b2:	2900      	cmp	r1, #0
1000a3b4:	d001      	beq.n	1000a3ba <_Z4Gamev.part.0+0x144a>
1000a3b6:	2351      	movs	r3, #81	; 0x51
1000a3b8:	54d1      	strb	r1, [r2, r3]
1000a3ba:	9909      	ldr	r1, [sp, #36]	; 0x24
1000a3bc:	2900      	cmp	r1, #0
1000a3be:	d001      	beq.n	1000a3c4 <_Z4Gamev.part.0+0x1454>
1000a3c0:	2352      	movs	r3, #82	; 0x52
1000a3c2:	54d1      	strb	r1, [r2, r3]
1000a3c4:	2c00      	cmp	r4, #0
1000a3c6:	d001      	beq.n	1000a3cc <_Z4Gamev.part.0+0x145c>
1000a3c8:	2353      	movs	r3, #83	; 0x53
1000a3ca:	54d4      	strb	r4, [r2, r3]
1000a3cc:	4663      	mov	r3, ip
1000a3ce:	2b00      	cmp	r3, #0
1000a3d0:	d101      	bne.n	1000a3d6 <_Z4Gamev.part.0+0x1466>
1000a3d2:	f7fe fde7 	bl	10008fa4 <_Z4Gamev.part.0+0x34>
1000a3d6:	2354      	movs	r3, #84	; 0x54
1000a3d8:	4661      	mov	r1, ip
1000a3da:	54d1      	strb	r1, [r2, r3]
1000a3dc:	f7fe fde2 	bl	10008fa4 <_Z4Gamev.part.0+0x34>
				if ((y < 1) || (y >= MAPH-1))
1000a3e0:	b2f8      	uxtb	r0, r7
1000a3e2:	1e43      	subs	r3, r0, #1
1000a3e4:	2b11      	cmp	r3, #17
1000a3e6:	d900      	bls.n	1000a3ea <_Z4Gamev.part.0+0x147a>
1000a3e8:	e172      	b.n	1000a6d0 <_Z4Gamev.part.0+0x1760>
					if (*d != TILE_EMPTY) ok = False;
1000a3ea:	465f      	mov	r7, fp
1000a3ec:	5d7b      	ldrb	r3, [r7, r5]
1000a3ee:	3b08      	subs	r3, #8
1000a3f0:	425f      	negs	r7, r3
1000a3f2:	417b      	adcs	r3, r7
			if (b != 0)
1000a3f4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
					if (*d != TILE_EMPTY) ok = False;
1000a3f6:	b2db      	uxtb	r3, r3
			if (b != 0)
1000a3f8:	2f00      	cmp	r7, #0
1000a3fa:	d000      	beq.n	1000a3fe <_Z4Gamev.part.0+0x148e>
1000a3fc:	e16a      	b.n	1000a6d4 <_Z4Gamev.part.0+0x1764>
1000a3fe:	9d03      	ldr	r5, [sp, #12]
1000a400:	2d00      	cmp	r5, #0
1000a402:	d100      	bne.n	1000a406 <_Z4Gamev.part.0+0x1496>
1000a404:	e600      	b.n	1000a008 <_Z4Gamev.part.0+0x1098>
1000a406:	e170      	b.n	1000a6ea <_Z4Gamev.part.0+0x177a>
				if ((y < 1) || (y >= MAPH-1))
1000a408:	b2f8      	uxtb	r0, r7
1000a40a:	1e43      	subs	r3, r0, #1
1000a40c:	2b11      	cmp	r3, #17
1000a40e:	d900      	bls.n	1000a412 <_Z4Gamev.part.0+0x14a2>
1000a410:	e15c      	b.n	1000a6cc <_Z4Gamev.part.0+0x175c>
					if (*d != TILE_EMPTY) ok = False;
1000a412:	465f      	mov	r7, fp
1000a414:	5d7b      	ldrb	r3, [r7, r5]
1000a416:	3b08      	subs	r3, #8
1000a418:	425f      	negs	r7, r3
1000a41a:	417b      	adcs	r3, r7
			if (b != 0)
1000a41c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
					if (*d != TILE_EMPTY) ok = False;
1000a41e:	b2db      	uxtb	r3, r3
			if (b != 0)
1000a420:	2f00      	cmp	r7, #0
1000a422:	d000      	beq.n	1000a426 <_Z4Gamev.part.0+0x14b6>
1000a424:	e110      	b.n	1000a648 <_Z4Gamev.part.0+0x16d8>
1000a426:	9d04      	ldr	r5, [sp, #16]
1000a428:	2d00      	cmp	r5, #0
1000a42a:	d100      	bne.n	1000a42e <_Z4Gamev.part.0+0x14be>
1000a42c:	e735      	b.n	1000a29a <_Z4Gamev.part.0+0x132a>
1000a42e:	e116      	b.n	1000a65e <_Z4Gamev.part.0+0x16ee>
				if ((y < 1) || (y >= MAPH-1))
1000a430:	4662      	mov	r2, ip
1000a432:	b2d1      	uxtb	r1, r2
1000a434:	1e4a      	subs	r2, r1, #1
1000a436:	2a11      	cmp	r2, #17
1000a438:	d900      	bls.n	1000a43c <_Z4Gamev.part.0+0x14cc>
1000a43a:	e123      	b.n	1000a684 <_Z4Gamev.part.0+0x1714>
					if (*d != TILE_EMPTY) ok = False;
1000a43c:	465a      	mov	r2, fp
1000a43e:	5d92      	ldrb	r2, [r2, r6]
1000a440:	3a08      	subs	r2, #8
1000a442:	4257      	negs	r7, r2
1000a444:	417a      	adcs	r2, r7
			if (b != 0)
1000a446:	785f      	ldrb	r7, [r3, #1]
	Bool ok = True;
1000a448:	b2d2      	uxtb	r2, r2
			if (b != 0)
1000a44a:	2f00      	cmp	r7, #0
1000a44c:	d000      	beq.n	1000a450 <_Z4Gamev.part.0+0x14e0>
1000a44e:	e11c      	b.n	1000a68a <_Z4Gamev.part.0+0x171a>
1000a450:	789f      	ldrb	r7, [r3, #2]
1000a452:	2f00      	cmp	r7, #0
1000a454:	d101      	bne.n	1000a45a <_Z4Gamev.part.0+0x14ea>
1000a456:	f7ff fac9 	bl	100099ec <_Z4Gamev.part.0+0xa7c>
1000a45a:	e122      	b.n	1000a6a2 <_Z4Gamev.part.0+0x1732>
1000a45c:	20012765 	.word	0x20012765
1000a460:	20012766 	.word	0x20012766
1000a464:	20012764 	.word	0x20012764
1000a468:	10010bd4 	.word	0x10010bd4
			b = *s++;
1000a46c:	795f      	ldrb	r7, [r3, #5]
			if (b != 0)
1000a46e:	2f00      	cmp	r7, #0
1000a470:	d100      	bne.n	1000a474 <_Z4Gamev.part.0+0x1504>
1000a472:	e0de      	b.n	1000a632 <_Z4Gamev.part.0+0x16c2>
				if ((y < 1) || (y >= MAPH-1))
1000a474:	2911      	cmp	r1, #17
1000a476:	d901      	bls.n	1000a47c <_Z4Gamev.part.0+0x150c>
1000a478:	f7ff fad3 	bl	10009a22 <_Z4Gamev.part.0+0xab2>
					if (*d != TILE_EMPTY) ok = False;
1000a47c:	7f07      	ldrb	r7, [r0, #28]
1000a47e:	3f08      	subs	r7, #8
1000a480:	003d      	movs	r5, r7
1000a482:	426f      	negs	r7, r5
1000a484:	416f      	adcs	r7, r5
1000a486:	427f      	negs	r7, r7
1000a488:	403a      	ands	r2, r7
			if (b != 0)
1000a48a:	799f      	ldrb	r7, [r3, #6]
1000a48c:	2f00      	cmp	r7, #0
1000a48e:	d101      	bne.n	1000a494 <_Z4Gamev.part.0+0x1524>
1000a490:	f7ff faca 	bl	10009a28 <_Z4Gamev.part.0+0xab8>
					if (*d != TILE_EMPTY) ok = False;
1000a494:	7f47      	ldrb	r7, [r0, #29]
1000a496:	3f08      	subs	r7, #8
1000a498:	003d      	movs	r5, r7
1000a49a:	426f      	negs	r7, r5
1000a49c:	416f      	adcs	r7, r5
1000a49e:	427f      	negs	r7, r7
1000a4a0:	403a      	ands	r2, r7
			if (b != 0)
1000a4a2:	79df      	ldrb	r7, [r3, #7]
1000a4a4:	2f00      	cmp	r7, #0
1000a4a6:	d006      	beq.n	1000a4b6 <_Z4Gamev.part.0+0x1546>
					if (*d != TILE_EMPTY) ok = False;
1000a4a8:	7f87      	ldrb	r7, [r0, #30]
					ok = False;
1000a4aa:	3f08      	subs	r7, #8
1000a4ac:	003d      	movs	r5, r7
1000a4ae:	426f      	negs	r7, r5
1000a4b0:	416f      	adcs	r7, r5
1000a4b2:	427f      	negs	r7, r7
1000a4b4:	403a      	ands	r2, r7
		y++;
1000a4b6:	3102      	adds	r1, #2
1000a4b8:	b2c9      	uxtb	r1, r1
1000a4ba:	9102      	str	r1, [sp, #8]
			b = *s++;
1000a4bc:	7a19      	ldrb	r1, [r3, #8]
1000a4be:	9105      	str	r1, [sp, #20]
			if (b != 0)
1000a4c0:	2900      	cmp	r1, #0
1000a4c2:	d101      	bne.n	1000a4c8 <_Z4Gamev.part.0+0x1558>
1000a4c4:	f7ff fac3 	bl	10009a4e <_Z4Gamev.part.0+0xade>
				if ((y < 1) || (y >= MAPH-1))
1000a4c8:	9901      	ldr	r1, [sp, #4]
1000a4ca:	2911      	cmp	r1, #17
1000a4cc:	d900      	bls.n	1000a4d0 <_Z4Gamev.part.0+0x1560>
1000a4ce:	e20f      	b.n	1000a8f0 <_Z4Gamev.part.0+0x1980>
					if (*d != TILE_EMPTY) ok = False;
1000a4d0:	2136      	movs	r1, #54	; 0x36
1000a4d2:	5c41      	ldrb	r1, [r0, r1]
1000a4d4:	3908      	subs	r1, #8
1000a4d6:	424f      	negs	r7, r1
1000a4d8:	4179      	adcs	r1, r7
1000a4da:	4249      	negs	r1, r1
1000a4dc:	400a      	ands	r2, r1
			if (b != 0)
1000a4de:	7a59      	ldrb	r1, [r3, #9]
1000a4e0:	2900      	cmp	r1, #0
1000a4e2:	d001      	beq.n	1000a4e8 <_Z4Gamev.part.0+0x1578>
1000a4e4:	f7ff fabd 	bl	10009a62 <_Z4Gamev.part.0+0xaf2>
1000a4e8:	7a99      	ldrb	r1, [r3, #10]
1000a4ea:	2900      	cmp	r1, #0
1000a4ec:	d001      	beq.n	1000a4f2 <_Z4Gamev.part.0+0x1582>
1000a4ee:	f7ff fac4 	bl	10009a7a <_Z4Gamev.part.0+0xb0a>
1000a4f2:	7ad9      	ldrb	r1, [r3, #11]
1000a4f4:	2900      	cmp	r1, #0
1000a4f6:	d001      	beq.n	1000a4fc <_Z4Gamev.part.0+0x158c>
1000a4f8:	f7ff fac9 	bl	10009a8e <_Z4Gamev.part.0+0xb1e>
1000a4fc:	f7ff face 	bl	10009a9c <_Z4Gamev.part.0+0xb2c>
1000a500:	9d04      	ldr	r5, [sp, #16]
1000a502:	2d00      	cmp	r5, #0
1000a504:	d100      	bne.n	1000a508 <_Z4Gamev.part.0+0x1598>
1000a506:	e08b      	b.n	1000a620 <_Z4Gamev.part.0+0x16b0>
				if ((y < 1) || (y >= MAPH-1))
1000a508:	2811      	cmp	r0, #17
1000a50a:	d900      	bls.n	1000a50e <_Z4Gamev.part.0+0x159e>
1000a50c:	e591      	b.n	1000a032 <_Z4Gamev.part.0+0x10c2>
					if (*d != TILE_EMPTY) ok = False;
1000a50e:	7f0f      	ldrb	r7, [r1, #28]
1000a510:	3f08      	subs	r7, #8
1000a512:	003d      	movs	r5, r7
1000a514:	426f      	negs	r7, r5
1000a516:	416f      	adcs	r7, r5
			if (b != 0)
1000a518:	9d01      	ldr	r5, [sp, #4]
					if (*d != TILE_EMPTY) ok = False;
1000a51a:	427f      	negs	r7, r7
1000a51c:	403b      	ands	r3, r7
			if (b != 0)
1000a51e:	2d00      	cmp	r5, #0
1000a520:	d100      	bne.n	1000a524 <_Z4Gamev.part.0+0x15b4>
1000a522:	e58b      	b.n	1000a03c <_Z4Gamev.part.0+0x10cc>
					if (*d != TILE_EMPTY) ok = False;
1000a524:	7f4f      	ldrb	r7, [r1, #29]
1000a526:	3f08      	subs	r7, #8
1000a528:	003d      	movs	r5, r7
1000a52a:	426f      	negs	r7, r5
1000a52c:	416f      	adcs	r7, r5
			if (b != 0)
1000a52e:	9d05      	ldr	r5, [sp, #20]
					if (*d != TILE_EMPTY) ok = False;
1000a530:	427f      	negs	r7, r7
1000a532:	403b      	ands	r3, r7
			if (b != 0)
1000a534:	2d00      	cmp	r5, #0
1000a536:	d006      	beq.n	1000a546 <_Z4Gamev.part.0+0x15d6>
					if (*d != TILE_EMPTY) ok = False;
1000a538:	7f8f      	ldrb	r7, [r1, #30]
					ok = False;
1000a53a:	3f08      	subs	r7, #8
1000a53c:	003d      	movs	r5, r7
1000a53e:	426f      	negs	r7, r5
1000a540:	416f      	adcs	r7, r5
1000a542:	427f      	negs	r7, r7
1000a544:	403b      	ands	r3, r7
		y++;
1000a546:	3002      	adds	r0, #2
1000a548:	b2c0      	uxtb	r0, r0
1000a54a:	4682      	mov	sl, r0
			if (b != 0)
1000a54c:	980e      	ldr	r0, [sp, #56]	; 0x38
1000a54e:	2800      	cmp	r0, #0
1000a550:	d100      	bne.n	1000a554 <_Z4Gamev.part.0+0x15e4>
1000a552:	e582      	b.n	1000a05a <_Z4Gamev.part.0+0x10ea>
				if ((y < 1) || (y >= MAPH-1))
1000a554:	9802      	ldr	r0, [sp, #8]
1000a556:	2811      	cmp	r0, #17
1000a558:	d900      	bls.n	1000a55c <_Z4Gamev.part.0+0x15ec>
1000a55a:	e20e      	b.n	1000a97a <_Z4Gamev.part.0+0x1a0a>
					if (*d != TILE_EMPTY) ok = False;
1000a55c:	2036      	movs	r0, #54	; 0x36
1000a55e:	5c08      	ldrb	r0, [r1, r0]
1000a560:	3808      	subs	r0, #8
1000a562:	4247      	negs	r7, r0
1000a564:	4178      	adcs	r0, r7
1000a566:	4240      	negs	r0, r0
1000a568:	4003      	ands	r3, r0
			if (b != 0)
1000a56a:	9806      	ldr	r0, [sp, #24]
1000a56c:	2800      	cmp	r0, #0
1000a56e:	d000      	beq.n	1000a572 <_Z4Gamev.part.0+0x1602>
1000a570:	e262      	b.n	1000aa38 <_Z4Gamev.part.0+0x1ac8>
1000a572:	2e00      	cmp	r6, #0
1000a574:	d000      	beq.n	1000a578 <_Z4Gamev.part.0+0x1608>
1000a576:	e268      	b.n	1000aa4a <_Z4Gamev.part.0+0x1ada>
1000a578:	9807      	ldr	r0, [sp, #28]
1000a57a:	2800      	cmp	r0, #0
1000a57c:	d000      	beq.n	1000a580 <_Z4Gamev.part.0+0x1610>
1000a57e:	e20c      	b.n	1000a99a <_Z4Gamev.part.0+0x1a2a>
1000a580:	e212      	b.n	1000a9a8 <_Z4Gamev.part.0+0x1a38>
1000a582:	9d05      	ldr	r5, [sp, #20]
1000a584:	2d00      	cmp	r5, #0
1000a586:	d043      	beq.n	1000a610 <_Z4Gamev.part.0+0x16a0>
				if ((y < 1) || (y >= MAPH-1))
1000a588:	2811      	cmp	r0, #17
1000a58a:	d900      	bls.n	1000a58e <_Z4Gamev.part.0+0x161e>
1000a58c:	e69a      	b.n	1000a2c4 <_Z4Gamev.part.0+0x1354>
					if (*d != TILE_EMPTY) ok = False;
1000a58e:	7f0f      	ldrb	r7, [r1, #28]
1000a590:	3f08      	subs	r7, #8
1000a592:	003d      	movs	r5, r7
1000a594:	426f      	negs	r7, r5
1000a596:	416f      	adcs	r7, r5
			if (b != 0)
1000a598:	9d01      	ldr	r5, [sp, #4]
					if (*d != TILE_EMPTY) ok = False;
1000a59a:	427f      	negs	r7, r7
1000a59c:	403b      	ands	r3, r7
			if (b != 0)
1000a59e:	2d00      	cmp	r5, #0
1000a5a0:	d100      	bne.n	1000a5a4 <_Z4Gamev.part.0+0x1634>
1000a5a2:	e694      	b.n	1000a2ce <_Z4Gamev.part.0+0x135e>
					if (*d != TILE_EMPTY) ok = False;
1000a5a4:	7f4f      	ldrb	r7, [r1, #29]
1000a5a6:	3f08      	subs	r7, #8
1000a5a8:	003d      	movs	r5, r7
1000a5aa:	426f      	negs	r7, r5
1000a5ac:	416f      	adcs	r7, r5
			if (b != 0)
1000a5ae:	9d06      	ldr	r5, [sp, #24]
					if (*d != TILE_EMPTY) ok = False;
1000a5b0:	427f      	negs	r7, r7
1000a5b2:	403b      	ands	r3, r7
			if (b != 0)
1000a5b4:	2d00      	cmp	r5, #0
1000a5b6:	d006      	beq.n	1000a5c6 <_Z4Gamev.part.0+0x1656>
					if (*d != TILE_EMPTY) ok = False;
1000a5b8:	7f8f      	ldrb	r7, [r1, #30]
					ok = False;
1000a5ba:	3f08      	subs	r7, #8
1000a5bc:	003d      	movs	r5, r7
1000a5be:	426f      	negs	r7, r5
1000a5c0:	416f      	adcs	r7, r5
1000a5c2:	427f      	negs	r7, r7
1000a5c4:	403b      	ands	r3, r7
		y++;
1000a5c6:	3002      	adds	r0, #2
1000a5c8:	b2c0      	uxtb	r0, r0
1000a5ca:	4682      	mov	sl, r0
			if (b != 0)
1000a5cc:	980e      	ldr	r0, [sp, #56]	; 0x38
1000a5ce:	2800      	cmp	r0, #0
1000a5d0:	d100      	bne.n	1000a5d4 <_Z4Gamev.part.0+0x1664>
1000a5d2:	e68b      	b.n	1000a2ec <_Z4Gamev.part.0+0x137c>
				if ((y < 1) || (y >= MAPH-1))
1000a5d4:	9803      	ldr	r0, [sp, #12]
1000a5d6:	2811      	cmp	r0, #17
1000a5d8:	d900      	bls.n	1000a5dc <_Z4Gamev.part.0+0x166c>
1000a5da:	e19e      	b.n	1000a91a <_Z4Gamev.part.0+0x19aa>
					if (*d != TILE_EMPTY) ok = False;
1000a5dc:	2036      	movs	r0, #54	; 0x36
1000a5de:	5c08      	ldrb	r0, [r1, r0]
1000a5e0:	3808      	subs	r0, #8
1000a5e2:	4247      	negs	r7, r0
1000a5e4:	4178      	adcs	r0, r7
1000a5e6:	4240      	negs	r0, r0
1000a5e8:	4003      	ands	r3, r0
			if (b != 0)
1000a5ea:	9807      	ldr	r0, [sp, #28]
1000a5ec:	2800      	cmp	r0, #0
1000a5ee:	d000      	beq.n	1000a5f2 <_Z4Gamev.part.0+0x1682>
1000a5f0:	e29e      	b.n	1000ab30 <_Z4Gamev.part.0+0x1bc0>
1000a5f2:	2e00      	cmp	r6, #0
1000a5f4:	d100      	bne.n	1000a5f8 <_Z4Gamev.part.0+0x1688>
1000a5f6:	e2bc      	b.n	1000ab72 <_Z4Gamev.part.0+0x1c02>
					if (*d != TILE_EMPTY) ok = False;
1000a5f8:	2038      	movs	r0, #56	; 0x38
1000a5fa:	5c08      	ldrb	r0, [r1, r0]
1000a5fc:	3808      	subs	r0, #8
1000a5fe:	4247      	negs	r7, r0
1000a600:	4178      	adcs	r0, r7
1000a602:	4240      	negs	r0, r0
1000a604:	4003      	ands	r3, r0
			if (b != 0)
1000a606:	9808      	ldr	r0, [sp, #32]
1000a608:	2800      	cmp	r0, #0
1000a60a:	d000      	beq.n	1000a60e <_Z4Gamev.part.0+0x169e>
1000a60c:	e193      	b.n	1000a936 <_Z4Gamev.part.0+0x19c6>
1000a60e:	e199      	b.n	1000a944 <_Z4Gamev.part.0+0x19d4>
1000a610:	9d01      	ldr	r5, [sp, #4]
1000a612:	2d00      	cmp	r5, #0
1000a614:	d100      	bne.n	1000a618 <_Z4Gamev.part.0+0x16a8>
1000a616:	e65a      	b.n	1000a2ce <_Z4Gamev.part.0+0x135e>
				if ((y < 1) || (y >= MAPH-1))
1000a618:	2811      	cmp	r0, #17
1000a61a:	d9c3      	bls.n	1000a5a4 <_Z4Gamev.part.0+0x1634>
					ok = False;
1000a61c:	2300      	movs	r3, #0
1000a61e:	e65e      	b.n	1000a2de <_Z4Gamev.part.0+0x136e>
			if (b != 0)
1000a620:	9d01      	ldr	r5, [sp, #4]
1000a622:	2d00      	cmp	r5, #0
1000a624:	d100      	bne.n	1000a628 <_Z4Gamev.part.0+0x16b8>
1000a626:	e509      	b.n	1000a03c <_Z4Gamev.part.0+0x10cc>
				if ((y < 1) || (y >= MAPH-1))
1000a628:	2811      	cmp	r0, #17
1000a62a:	d800      	bhi.n	1000a62e <_Z4Gamev.part.0+0x16be>
1000a62c:	e77a      	b.n	1000a524 <_Z4Gamev.part.0+0x15b4>
					ok = False;
1000a62e:	2300      	movs	r3, #0
1000a630:	e50c      	b.n	1000a04c <_Z4Gamev.part.0+0x10dc>
			if (b != 0)
1000a632:	799f      	ldrb	r7, [r3, #6]
1000a634:	2f00      	cmp	r7, #0
1000a636:	d101      	bne.n	1000a63c <_Z4Gamev.part.0+0x16cc>
1000a638:	f7ff f9f6 	bl	10009a28 <_Z4Gamev.part.0+0xab8>
				if ((y < 1) || (y >= MAPH-1))
1000a63c:	2911      	cmp	r1, #17
1000a63e:	d800      	bhi.n	1000a642 <_Z4Gamev.part.0+0x16d2>
1000a640:	e728      	b.n	1000a494 <_Z4Gamev.part.0+0x1524>
					ok = False;
1000a642:	2200      	movs	r2, #0
1000a644:	f7ff f9fa 	bl	10009a3c <_Z4Gamev.part.0+0xacc>
					if (*d != TILE_EMPTY) ok = False;
1000a648:	784f      	ldrb	r7, [r1, #1]
1000a64a:	3f08      	subs	r7, #8
1000a64c:	003d      	movs	r5, r7
1000a64e:	426f      	negs	r7, r5
1000a650:	416f      	adcs	r7, r5
			if (b != 0)
1000a652:	9d04      	ldr	r5, [sp, #16]
					if (*d != TILE_EMPTY) ok = False;
1000a654:	427f      	negs	r7, r7
1000a656:	403b      	ands	r3, r7
			if (b != 0)
1000a658:	2d00      	cmp	r5, #0
1000a65a:	d100      	bne.n	1000a65e <_Z4Gamev.part.0+0x16ee>
1000a65c:	e61d      	b.n	1000a29a <_Z4Gamev.part.0+0x132a>
					if (*d != TILE_EMPTY) ok = False;
1000a65e:	788f      	ldrb	r7, [r1, #2]
1000a660:	3f08      	subs	r7, #8
1000a662:	003d      	movs	r5, r7
1000a664:	426f      	negs	r7, r5
1000a666:	416f      	adcs	r7, r5
			if (b != 0)
1000a668:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
					if (*d != TILE_EMPTY) ok = False;
1000a66a:	427f      	negs	r7, r7
1000a66c:	403b      	ands	r3, r7
			if (b != 0)
1000a66e:	2d00      	cmp	r5, #0
1000a670:	d100      	bne.n	1000a674 <_Z4Gamev.part.0+0x1704>
1000a672:	e61a      	b.n	1000a2aa <_Z4Gamev.part.0+0x133a>
					if (*d != TILE_EMPTY) ok = False;
1000a674:	78cf      	ldrb	r7, [r1, #3]
1000a676:	3f08      	subs	r7, #8
1000a678:	003d      	movs	r5, r7
1000a67a:	426f      	negs	r7, r5
1000a67c:	416f      	adcs	r7, r5
1000a67e:	427f      	negs	r7, r7
1000a680:	403b      	ands	r3, r7
1000a682:	e612      	b.n	1000a2aa <_Z4Gamev.part.0+0x133a>
					ok = False;
1000a684:	2200      	movs	r2, #0
1000a686:	f7ff f99f 	bl	100099c8 <_Z4Gamev.part.0+0xa58>
					if (*d != TILE_EMPTY) ok = False;
1000a68a:	7847      	ldrb	r7, [r0, #1]
1000a68c:	3f08      	subs	r7, #8
1000a68e:	003d      	movs	r5, r7
1000a690:	426f      	negs	r7, r5
1000a692:	416f      	adcs	r7, r5
1000a694:	427f      	negs	r7, r7
1000a696:	403a      	ands	r2, r7
			if (b != 0)
1000a698:	789f      	ldrb	r7, [r3, #2]
1000a69a:	2f00      	cmp	r7, #0
1000a69c:	d101      	bne.n	1000a6a2 <_Z4Gamev.part.0+0x1732>
1000a69e:	f7ff f9a5 	bl	100099ec <_Z4Gamev.part.0+0xa7c>
					if (*d != TILE_EMPTY) ok = False;
1000a6a2:	7887      	ldrb	r7, [r0, #2]
1000a6a4:	3f08      	subs	r7, #8
1000a6a6:	003d      	movs	r5, r7
1000a6a8:	426f      	negs	r7, r5
1000a6aa:	416f      	adcs	r7, r5
1000a6ac:	427f      	negs	r7, r7
1000a6ae:	403a      	ands	r2, r7
			if (b != 0)
1000a6b0:	78df      	ldrb	r7, [r3, #3]
1000a6b2:	2f00      	cmp	r7, #0
1000a6b4:	d101      	bne.n	1000a6ba <_Z4Gamev.part.0+0x174a>
1000a6b6:	f7ff f9a2 	bl	100099fe <_Z4Gamev.part.0+0xa8e>
					if (*d != TILE_EMPTY) ok = False;
1000a6ba:	78c7      	ldrb	r7, [r0, #3]
1000a6bc:	3f08      	subs	r7, #8
1000a6be:	003d      	movs	r5, r7
1000a6c0:	426f      	negs	r7, r5
1000a6c2:	416f      	adcs	r7, r5
1000a6c4:	427f      	negs	r7, r7
1000a6c6:	403a      	ands	r2, r7
1000a6c8:	f7ff f999 	bl	100099fe <_Z4Gamev.part.0+0xa8e>
					ok = False;
1000a6cc:	2300      	movs	r3, #0
1000a6ce:	e5d4      	b.n	1000a27a <_Z4Gamev.part.0+0x130a>
1000a6d0:	2300      	movs	r3, #0
1000a6d2:	e489      	b.n	10009fe8 <_Z4Gamev.part.0+0x1078>
					if (*d != TILE_EMPTY) ok = False;
1000a6d4:	784f      	ldrb	r7, [r1, #1]
1000a6d6:	3f08      	subs	r7, #8
1000a6d8:	003d      	movs	r5, r7
1000a6da:	426f      	negs	r7, r5
1000a6dc:	416f      	adcs	r7, r5
			if (b != 0)
1000a6de:	9d03      	ldr	r5, [sp, #12]
					if (*d != TILE_EMPTY) ok = False;
1000a6e0:	427f      	negs	r7, r7
1000a6e2:	403b      	ands	r3, r7
			if (b != 0)
1000a6e4:	2d00      	cmp	r5, #0
1000a6e6:	d100      	bne.n	1000a6ea <_Z4Gamev.part.0+0x177a>
1000a6e8:	e48e      	b.n	1000a008 <_Z4Gamev.part.0+0x1098>
					if (*d != TILE_EMPTY) ok = False;
1000a6ea:	788f      	ldrb	r7, [r1, #2]
1000a6ec:	3f08      	subs	r7, #8
1000a6ee:	003d      	movs	r5, r7
1000a6f0:	426f      	negs	r7, r5
1000a6f2:	416f      	adcs	r7, r5
			if (b != 0)
1000a6f4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
					if (*d != TILE_EMPTY) ok = False;
1000a6f6:	427f      	negs	r7, r7
1000a6f8:	403b      	ands	r3, r7
			if (b != 0)
1000a6fa:	2d00      	cmp	r5, #0
1000a6fc:	d100      	bne.n	1000a700 <_Z4Gamev.part.0+0x1790>
1000a6fe:	e48b      	b.n	1000a018 <_Z4Gamev.part.0+0x10a8>
					if (*d != TILE_EMPTY) ok = False;
1000a700:	78cf      	ldrb	r7, [r1, #3]
1000a702:	3f08      	subs	r7, #8
1000a704:	003d      	movs	r5, r7
1000a706:	426f      	negs	r7, r5
1000a708:	416f      	adcs	r7, r5
1000a70a:	427f      	negs	r7, r7
1000a70c:	403b      	ands	r3, r7
1000a70e:	e483      	b.n	1000a018 <_Z4Gamev.part.0+0x10a8>
1000a710:	7ecf      	ldrb	r7, [r1, #27]
1000a712:	3f08      	subs	r7, #8
1000a714:	003d      	movs	r5, r7
1000a716:	426f      	negs	r7, r5
1000a718:	416f      	adcs	r7, r5
			if (b != 0)
1000a71a:	9d05      	ldr	r5, [sp, #20]
					if (*d != TILE_EMPTY) ok = False;
1000a71c:	427f      	negs	r7, r7
1000a71e:	403b      	ands	r3, r7
			if (b != 0)
1000a720:	2d00      	cmp	r5, #0
1000a722:	d000      	beq.n	1000a726 <_Z4Gamev.part.0+0x17b6>
1000a724:	e733      	b.n	1000a58e <_Z4Gamev.part.0+0x161e>
1000a726:	9d01      	ldr	r5, [sp, #4]
1000a728:	2d00      	cmp	r5, #0
1000a72a:	d000      	beq.n	1000a72e <_Z4Gamev.part.0+0x17be>
1000a72c:	e73a      	b.n	1000a5a4 <_Z4Gamev.part.0+0x1634>
1000a72e:	9d06      	ldr	r5, [sp, #24]
1000a730:	2d00      	cmp	r5, #0
1000a732:	d000      	beq.n	1000a736 <_Z4Gamev.part.0+0x17c6>
1000a734:	e740      	b.n	1000a5b8 <_Z4Gamev.part.0+0x1648>
1000a736:	e746      	b.n	1000a5c6 <_Z4Gamev.part.0+0x1656>
					if (*d != TILE_EMPTY) ok = False;
1000a738:	7ec7      	ldrb	r7, [r0, #27]
1000a73a:	3f08      	subs	r7, #8
1000a73c:	003d      	movs	r5, r7
1000a73e:	426f      	negs	r7, r5
1000a740:	416f      	adcs	r7, r5
1000a742:	427f      	negs	r7, r7
1000a744:	403a      	ands	r2, r7
			if (b != 0)
1000a746:	795f      	ldrb	r7, [r3, #5]
1000a748:	2f00      	cmp	r7, #0
1000a74a:	d000      	beq.n	1000a74e <_Z4Gamev.part.0+0x17de>
1000a74c:	e696      	b.n	1000a47c <_Z4Gamev.part.0+0x150c>
1000a74e:	799f      	ldrb	r7, [r3, #6]
1000a750:	2f00      	cmp	r7, #0
1000a752:	d000      	beq.n	1000a756 <_Z4Gamev.part.0+0x17e6>
1000a754:	e69e      	b.n	1000a494 <_Z4Gamev.part.0+0x1524>
1000a756:	79df      	ldrb	r7, [r3, #7]
1000a758:	2f00      	cmp	r7, #0
1000a75a:	d000      	beq.n	1000a75e <_Z4Gamev.part.0+0x17ee>
1000a75c:	e6a4      	b.n	1000a4a8 <_Z4Gamev.part.0+0x1538>
1000a75e:	e6aa      	b.n	1000a4b6 <_Z4Gamev.part.0+0x1546>
					if (*d != TILE_EMPTY) ok = False;
1000a760:	7ecf      	ldrb	r7, [r1, #27]
1000a762:	3f08      	subs	r7, #8
1000a764:	003d      	movs	r5, r7
1000a766:	426f      	negs	r7, r5
1000a768:	416f      	adcs	r7, r5
			if (b != 0)
1000a76a:	9d04      	ldr	r5, [sp, #16]
					if (*d != TILE_EMPTY) ok = False;
1000a76c:	427f      	negs	r7, r7
1000a76e:	403b      	ands	r3, r7
			if (b != 0)
1000a770:	2d00      	cmp	r5, #0
1000a772:	d000      	beq.n	1000a776 <_Z4Gamev.part.0+0x1806>
1000a774:	e6cb      	b.n	1000a50e <_Z4Gamev.part.0+0x159e>
1000a776:	9d01      	ldr	r5, [sp, #4]
1000a778:	2d00      	cmp	r5, #0
1000a77a:	d000      	beq.n	1000a77e <_Z4Gamev.part.0+0x180e>
1000a77c:	e6d2      	b.n	1000a524 <_Z4Gamev.part.0+0x15b4>
1000a77e:	9d05      	ldr	r5, [sp, #20]
1000a780:	2d00      	cmp	r5, #0
1000a782:	d000      	beq.n	1000a786 <_Z4Gamev.part.0+0x1816>
1000a784:	e6d8      	b.n	1000a538 <_Z4Gamev.part.0+0x15c8>
1000a786:	e6de      	b.n	1000a546 <_Z4Gamev.part.0+0x15d6>
			b = *s++;
1000a788:	7b99      	ldrb	r1, [r3, #14]
			if (b != 0)
1000a78a:	2900      	cmp	r1, #0
1000a78c:	d000      	beq.n	1000a790 <_Z4Gamev.part.0+0x1820>
1000a78e:	e0a1      	b.n	1000a8d4 <_Z4Gamev.part.0+0x1964>
			b = *s++;
1000a790:	7bdf      	ldrb	r7, [r3, #15]
			if (b != 0)
1000a792:	2f00      	cmp	r7, #0
1000a794:	d101      	bne.n	1000a79a <_Z4Gamev.part.0+0x182a>
1000a796:	f7ff f9a2 	bl	10009ade <_Z4Gamev.part.0+0xb6e>
				if ((y < 1) || (y >= MAPH-1))
1000a79a:	9902      	ldr	r1, [sp, #8]
1000a79c:	2911      	cmp	r1, #17
1000a79e:	d805      	bhi.n	1000a7ac <_Z4Gamev.part.0+0x183c>
1000a7a0:	2100      	movs	r1, #0
					if (*d != TILE_EMPTY) ok = False;
1000a7a2:	2554      	movs	r5, #84	; 0x54
1000a7a4:	5d45      	ldrb	r5, [r0, r5]
1000a7a6:	2d08      	cmp	r5, #8
1000a7a8:	d100      	bne.n	1000a7ac <_Z4Gamev.part.0+0x183c>
1000a7aa:	e1e7      	b.n	1000ab7c <_Z4Gamev.part.0+0x1c0c>
	return res;
1000a7ac:	0022      	movs	r2, r4
1000a7ae:	4661      	mov	r1, ip
1000a7b0:	9807      	ldr	r0, [sp, #28]
1000a7b2:	f7fc f947 	bl	10006a44 <_Z11CheckBrickXaah.part.0>
	if (CheckBrickX(x, y, brick)) return True;
1000a7b6:	2800      	cmp	r0, #0
1000a7b8:	d10f      	bne.n	1000a7da <_Z4Gamev.part.0+0x186a>
	if (CheckBrickX(x, y+1, brick)) return True;
1000a7ba:	466b      	mov	r3, sp
1000a7bc:	2104      	movs	r1, #4
1000a7be:	0022      	movs	r2, r4
1000a7c0:	5659      	ldrsb	r1, [r3, r1]
1000a7c2:	9807      	ldr	r0, [sp, #28]
1000a7c4:	f7fd fb72 	bl	10007eac <_Z11CheckBrickXaah>
1000a7c8:	2800      	cmp	r0, #0
1000a7ca:	d106      	bne.n	1000a7da <_Z4Gamev.part.0+0x186a>
	return CheckBrickX(x, y+2, brick);
1000a7cc:	466b      	mov	r3, sp
1000a7ce:	2108      	movs	r1, #8
1000a7d0:	0022      	movs	r2, r4
1000a7d2:	5659      	ldrsb	r1, [r3, r1]
1000a7d4:	9807      	ldr	r0, [sp, #28]
1000a7d6:	f7fd fb69 	bl	10007eac <_Z11CheckBrickXaah>
	u8* d = &Board[x + y*MAPW];
1000a7da:	49cd      	ldr	r1, [pc, #820]	; (1000ab10 <_Z4Gamev.part.0+0x1ba0>)
	const u8* s = &BrickTemp[brick*BRICKTEMPSIZE];
1000a7dc:	4bcd      	ldr	r3, [pc, #820]	; (1000ab14 <_Z4Gamev.part.0+0x1ba4>)
	u8* d = &Board[x + y*MAPW];
1000a7de:	7809      	ldrb	r1, [r1, #0]
	const u8* s = &BrickTemp[brick*BRICKTEMPSIZE];
1000a7e0:	781a      	ldrb	r2, [r3, #0]
	u8* d = &Board[x + y*MAPW];
1000a7e2:	b249      	sxtb	r1, r1
1000a7e4:	004e      	lsls	r6, r1, #1
1000a7e6:	1876      	adds	r6, r6, r1
1000a7e8:	00f1      	lsls	r1, r6, #3
1000a7ea:	1876      	adds	r6, r6, r1
1000a7ec:	49ca      	ldr	r1, [pc, #808]	; (1000ab18 <_Z4Gamev.part.0+0x1ba8>)
	const u8* s = &BrickTemp[brick*BRICKTEMPSIZE];
1000a7ee:	4bcb      	ldr	r3, [pc, #812]	; (1000ab1c <_Z4Gamev.part.0+0x1bac>)
	u8* d = &Board[x + y*MAPW];
1000a7f0:	7809      	ldrb	r1, [r1, #0]
	const u8* s = &BrickTemp[brick*BRICKTEMPSIZE];
1000a7f2:	0112      	lsls	r2, r2, #4
	u8* d = &Board[x + y*MAPW];
1000a7f4:	b249      	sxtb	r1, r1
1000a7f6:	1876      	adds	r6, r6, r1
1000a7f8:	4659      	mov	r1, fp
1000a7fa:	1988      	adds	r0, r1, r6
			b = *s++;
1000a7fc:	49c7      	ldr	r1, [pc, #796]	; (1000ab1c <_Z4Gamev.part.0+0x1bac>)
	const u8* s = &BrickTemp[brick*BRICKTEMPSIZE];
1000a7fe:	189b      	adds	r3, r3, r2
			b = *s++;
1000a800:	5c8a      	ldrb	r2, [r1, r2]
1000a802:	9203      	str	r2, [sp, #12]
1000a804:	791a      	ldrb	r2, [r3, #4]
1000a806:	9204      	str	r2, [sp, #16]
1000a808:	7a1a      	ldrb	r2, [r3, #8]
1000a80a:	9205      	str	r2, [sp, #20]
1000a80c:	7b1a      	ldrb	r2, [r3, #12]
1000a80e:	9206      	str	r2, [sp, #24]
1000a810:	7bda      	ldrb	r2, [r3, #15]
1000a812:	7b9f      	ldrb	r7, [r3, #14]
1000a814:	4692      	mov	sl, r2
			if (b != 0) *d = b;
1000a816:	9a03      	ldr	r2, [sp, #12]
1000a818:	2a00      	cmp	r2, #0
1000a81a:	d001      	beq.n	1000a820 <_Z4Gamev.part.0+0x18b0>
1000a81c:	4659      	mov	r1, fp
1000a81e:	558a      	strb	r2, [r1, r6]
			b = *s++;
1000a820:	785a      	ldrb	r2, [r3, #1]
			if (b != 0) *d = b;
1000a822:	2a00      	cmp	r2, #0
1000a824:	d000      	beq.n	1000a828 <_Z4Gamev.part.0+0x18b8>
1000a826:	7042      	strb	r2, [r0, #1]
			b = *s++;
1000a828:	789a      	ldrb	r2, [r3, #2]
			if (b != 0) *d = b;
1000a82a:	2a00      	cmp	r2, #0
1000a82c:	d000      	beq.n	1000a830 <_Z4Gamev.part.0+0x18c0>
1000a82e:	7082      	strb	r2, [r0, #2]
			b = *s++;
1000a830:	78da      	ldrb	r2, [r3, #3]
			if (b != 0) *d = b;
1000a832:	2a00      	cmp	r2, #0
1000a834:	d000      	beq.n	1000a838 <_Z4Gamev.part.0+0x18c8>
1000a836:	70c2      	strb	r2, [r0, #3]
1000a838:	9a04      	ldr	r2, [sp, #16]
1000a83a:	2a00      	cmp	r2, #0
1000a83c:	d000      	beq.n	1000a840 <_Z4Gamev.part.0+0x18d0>
1000a83e:	76c2      	strb	r2, [r0, #27]
			b = *s++;
1000a840:	795a      	ldrb	r2, [r3, #5]
			if (b != 0) *d = b;
1000a842:	2a00      	cmp	r2, #0
1000a844:	d000      	beq.n	1000a848 <_Z4Gamev.part.0+0x18d8>
1000a846:	7702      	strb	r2, [r0, #28]
			b = *s++;
1000a848:	799a      	ldrb	r2, [r3, #6]
			if (b != 0) *d = b;
1000a84a:	2a00      	cmp	r2, #0
1000a84c:	d000      	beq.n	1000a850 <_Z4Gamev.part.0+0x18e0>
1000a84e:	7742      	strb	r2, [r0, #29]
			b = *s++;
1000a850:	79da      	ldrb	r2, [r3, #7]
			if (b != 0) *d = b;
1000a852:	2a00      	cmp	r2, #0
1000a854:	d000      	beq.n	1000a858 <_Z4Gamev.part.0+0x18e8>
1000a856:	7782      	strb	r2, [r0, #30]
1000a858:	9905      	ldr	r1, [sp, #20]
1000a85a:	2900      	cmp	r1, #0
1000a85c:	d001      	beq.n	1000a862 <_Z4Gamev.part.0+0x18f2>
1000a85e:	2236      	movs	r2, #54	; 0x36
1000a860:	5481      	strb	r1, [r0, r2]
			b = *s++;
1000a862:	7a5a      	ldrb	r2, [r3, #9]
			if (b != 0) *d = b;
1000a864:	2a00      	cmp	r2, #0
1000a866:	d001      	beq.n	1000a86c <_Z4Gamev.part.0+0x18fc>
1000a868:	2137      	movs	r1, #55	; 0x37
1000a86a:	5442      	strb	r2, [r0, r1]
			b = *s++;
1000a86c:	7a9a      	ldrb	r2, [r3, #10]
			if (b != 0) *d = b;
1000a86e:	2a00      	cmp	r2, #0
1000a870:	d001      	beq.n	1000a876 <_Z4Gamev.part.0+0x1906>
1000a872:	2138      	movs	r1, #56	; 0x38
1000a874:	5442      	strb	r2, [r0, r1]
			b = *s++;
1000a876:	7ada      	ldrb	r2, [r3, #11]
			if (b != 0) *d = b;
1000a878:	2a00      	cmp	r2, #0
1000a87a:	d001      	beq.n	1000a880 <_Z4Gamev.part.0+0x1910>
1000a87c:	2139      	movs	r1, #57	; 0x39
1000a87e:	5442      	strb	r2, [r0, r1]
1000a880:	9906      	ldr	r1, [sp, #24]
1000a882:	2900      	cmp	r1, #0
1000a884:	d001      	beq.n	1000a88a <_Z4Gamev.part.0+0x191a>
1000a886:	2251      	movs	r2, #81	; 0x51
1000a888:	5481      	strb	r1, [r0, r2]
			b = *s++;
1000a88a:	7b5b      	ldrb	r3, [r3, #13]
			if (b != 0) *d = b;
1000a88c:	2b00      	cmp	r3, #0
1000a88e:	d001      	beq.n	1000a894 <_Z4Gamev.part.0+0x1924>
1000a890:	2252      	movs	r2, #82	; 0x52
1000a892:	5483      	strb	r3, [r0, r2]
1000a894:	2f00      	cmp	r7, #0
1000a896:	d001      	beq.n	1000a89c <_Z4Gamev.part.0+0x192c>
1000a898:	2353      	movs	r3, #83	; 0x53
1000a89a:	54c7      	strb	r7, [r0, r3]
1000a89c:	4653      	mov	r3, sl
1000a89e:	2b00      	cmp	r3, #0
1000a8a0:	d101      	bne.n	1000a8a6 <_Z4Gamev.part.0+0x1936>
1000a8a2:	f7fe fb7f 	bl	10008fa4 <_Z4Gamev.part.0+0x34>
1000a8a6:	2354      	movs	r3, #84	; 0x54
1000a8a8:	4652      	mov	r2, sl
1000a8aa:	54c2      	strb	r2, [r0, r3]
1000a8ac:	f7fe fb7a 	bl	10008fa4 <_Z4Gamev.part.0+0x34>
			if (b != 0)
1000a8b0:	7b59      	ldrb	r1, [r3, #13]
1000a8b2:	2900      	cmp	r1, #0
1000a8b4:	d100      	bne.n	1000a8b8 <_Z4Gamev.part.0+0x1948>
1000a8b6:	e0e4      	b.n	1000aa82 <_Z4Gamev.part.0+0x1b12>
				if ((y < 1) || (y >= MAPH-1))
1000a8b8:	9902      	ldr	r1, [sp, #8]
1000a8ba:	2911      	cmp	r1, #17
1000a8bc:	d900      	bls.n	1000a8c0 <_Z4Gamev.part.0+0x1950>
1000a8be:	e775      	b.n	1000a7ac <_Z4Gamev.part.0+0x183c>
					if (*d != TILE_EMPTY) ok = False;
1000a8c0:	2152      	movs	r1, #82	; 0x52
1000a8c2:	5c41      	ldrb	r1, [r0, r1]
1000a8c4:	2908      	cmp	r1, #8
1000a8c6:	d100      	bne.n	1000a8ca <_Z4Gamev.part.0+0x195a>
1000a8c8:	e75e      	b.n	1000a788 <_Z4Gamev.part.0+0x1818>
			b = *s++;
1000a8ca:	7b99      	ldrb	r1, [r3, #14]
			if (b != 0)
1000a8cc:	2900      	cmp	r1, #0
1000a8ce:	d100      	bne.n	1000a8d2 <_Z4Gamev.part.0+0x1962>
1000a8d0:	e76c      	b.n	1000a7ac <_Z4Gamev.part.0+0x183c>
					if (*d != TILE_EMPTY) ok = False;
1000a8d2:	2200      	movs	r2, #0
1000a8d4:	2753      	movs	r7, #83	; 0x53
1000a8d6:	5dc7      	ldrb	r7, [r0, r7]
1000a8d8:	2f08      	cmp	r7, #8
1000a8da:	d000      	beq.n	1000a8de <_Z4Gamev.part.0+0x196e>
1000a8dc:	e766      	b.n	1000a7ac <_Z4Gamev.part.0+0x183c>
			b = *s++;
1000a8de:	7bdf      	ldrb	r7, [r3, #15]
			if (b != 0)
1000a8e0:	2f00      	cmp	r7, #0
1000a8e2:	d000      	beq.n	1000a8e6 <_Z4Gamev.part.0+0x1976>
1000a8e4:	e75d      	b.n	1000a7a2 <_Z4Gamev.part.0+0x1832>
1000a8e6:	2500      	movs	r5, #0
1000a8e8:	000f      	movs	r7, r1
1000a8ea:	46aa      	mov	sl, r5
1000a8ec:	f7ff f8f9 	bl	10009ae2 <_Z4Gamev.part.0+0xb72>
			b = *s++;
1000a8f0:	7a5a      	ldrb	r2, [r3, #9]
			if (b != 0)
1000a8f2:	2a00      	cmp	r2, #0
1000a8f4:	d101      	bne.n	1000a8fa <_Z4Gamev.part.0+0x198a>
1000a8f6:	f7ff f8d1 	bl	10009a9c <_Z4Gamev.part.0+0xb2c>
			b = *s++;
1000a8fa:	7a9a      	ldrb	r2, [r3, #10]
			if (b != 0)
1000a8fc:	2a00      	cmp	r2, #0
1000a8fe:	d109      	bne.n	1000a914 <_Z4Gamev.part.0+0x19a4>
1000a900:	7ad9      	ldrb	r1, [r3, #11]
1000a902:	2900      	cmp	r1, #0
1000a904:	d101      	bne.n	1000a90a <_Z4Gamev.part.0+0x199a>
1000a906:	f7ff f8c9 	bl	10009a9c <_Z4Gamev.part.0+0xb2c>
				if ((y < 1) || (y >= MAPH-1))
1000a90a:	9901      	ldr	r1, [sp, #4]
1000a90c:	2911      	cmp	r1, #17
1000a90e:	d801      	bhi.n	1000a914 <_Z4Gamev.part.0+0x19a4>
1000a910:	f7ff f8bd 	bl	10009a8e <_Z4Gamev.part.0+0xb1e>
					ok = False;
1000a914:	2200      	movs	r2, #0
1000a916:	f7ff f8c1 	bl	10009a9c <_Z4Gamev.part.0+0xb2c>
			if (b != 0)
1000a91a:	9b07      	ldr	r3, [sp, #28]
1000a91c:	2b00      	cmp	r3, #0
1000a91e:	d100      	bne.n	1000a922 <_Z4Gamev.part.0+0x19b2>
1000a920:	e4f0      	b.n	1000a304 <_Z4Gamev.part.0+0x1394>
					ok = False;
1000a922:	2300      	movs	r3, #0
			if (b != 0)
1000a924:	2e00      	cmp	r6, #0
1000a926:	d10d      	bne.n	1000a944 <_Z4Gamev.part.0+0x19d4>
1000a928:	9808      	ldr	r0, [sp, #32]
1000a92a:	2800      	cmp	r0, #0
1000a92c:	d00a      	beq.n	1000a944 <_Z4Gamev.part.0+0x19d4>
				if ((y < 1) || (y >= MAPH-1))
1000a92e:	9803      	ldr	r0, [sp, #12]
1000a930:	2811      	cmp	r0, #17
1000a932:	d900      	bls.n	1000a936 <_Z4Gamev.part.0+0x19c6>
1000a934:	e4e6      	b.n	1000a304 <_Z4Gamev.part.0+0x1394>
					if (*d != TILE_EMPTY) ok = False;
1000a936:	2039      	movs	r0, #57	; 0x39
1000a938:	5c08      	ldrb	r0, [r1, r0]
					ok = False;
1000a93a:	3808      	subs	r0, #8
1000a93c:	4247      	negs	r7, r0
1000a93e:	4178      	adcs	r0, r7
1000a940:	4240      	negs	r0, r0
1000a942:	4003      	ands	r3, r0
			if (b != 0)
1000a944:	980f      	ldr	r0, [sp, #60]	; 0x3c
1000a946:	2800      	cmp	r0, #0
1000a948:	d100      	bne.n	1000a94c <_Z4Gamev.part.0+0x19dc>
1000a94a:	e4e0      	b.n	1000a30e <_Z4Gamev.part.0+0x139e>
				if ((y < 1) || (y >= MAPH-1))
1000a94c:	4650      	mov	r0, sl
1000a94e:	2811      	cmp	r0, #17
1000a950:	d900      	bls.n	1000a954 <_Z4Gamev.part.0+0x19e4>
1000a952:	e4f8      	b.n	1000a346 <_Z4Gamev.part.0+0x13d6>
					if (*d != TILE_EMPTY) ok = False;
1000a954:	2051      	movs	r0, #81	; 0x51
1000a956:	5c08      	ldrb	r0, [r1, r0]
1000a958:	2808      	cmp	r0, #8
1000a95a:	d100      	bne.n	1000a95e <_Z4Gamev.part.0+0x19ee>
1000a95c:	e0fe      	b.n	1000ab5c <_Z4Gamev.part.0+0x1bec>
			if (b != 0)
1000a95e:	9b09      	ldr	r3, [sp, #36]	; 0x24
1000a960:	2b00      	cmp	r3, #0
1000a962:	d100      	bne.n	1000a966 <_Z4Gamev.part.0+0x19f6>
1000a964:	e4df      	b.n	1000a326 <_Z4Gamev.part.0+0x13b6>
					if (*d != TILE_EMPTY) ok = False;
1000a966:	2352      	movs	r3, #82	; 0x52
1000a968:	5ccb      	ldrb	r3, [r1, r3]
1000a96a:	2b08      	cmp	r3, #8
1000a96c:	d000      	beq.n	1000a970 <_Z4Gamev.part.0+0x1a00>
1000a96e:	e4da      	b.n	1000a326 <_Z4Gamev.part.0+0x13b6>
1000a970:	2300      	movs	r3, #0
			if (b != 0)
1000a972:	2c00      	cmp	r4, #0
1000a974:	d000      	beq.n	1000a978 <_Z4Gamev.part.0+0x1a08>
1000a976:	e4d9      	b.n	1000a32c <_Z4Gamev.part.0+0x13bc>
1000a978:	e4e5      	b.n	1000a346 <_Z4Gamev.part.0+0x13d6>
1000a97a:	9b06      	ldr	r3, [sp, #24]
1000a97c:	2b00      	cmp	r3, #0
1000a97e:	d101      	bne.n	1000a984 <_Z4Gamev.part.0+0x1a14>
1000a980:	f7ff fb79 	bl	1000a076 <_Z4Gamev.part.0+0x1106>
					ok = False;
1000a984:	2300      	movs	r3, #0
			if (b != 0)
1000a986:	2e00      	cmp	r6, #0
1000a988:	d10e      	bne.n	1000a9a8 <_Z4Gamev.part.0+0x1a38>
1000a98a:	9807      	ldr	r0, [sp, #28]
1000a98c:	2800      	cmp	r0, #0
1000a98e:	d00b      	beq.n	1000a9a8 <_Z4Gamev.part.0+0x1a38>
				if ((y < 1) || (y >= MAPH-1))
1000a990:	9802      	ldr	r0, [sp, #8]
1000a992:	2811      	cmp	r0, #17
1000a994:	d901      	bls.n	1000a99a <_Z4Gamev.part.0+0x1a2a>
1000a996:	f7ff fb6e 	bl	1000a076 <_Z4Gamev.part.0+0x1106>
					if (*d != TILE_EMPTY) ok = False;
1000a99a:	2039      	movs	r0, #57	; 0x39
1000a99c:	5c08      	ldrb	r0, [r1, r0]
					ok = False;
1000a99e:	3808      	subs	r0, #8
1000a9a0:	4247      	negs	r7, r0
1000a9a2:	4178      	adcs	r0, r7
1000a9a4:	4240      	negs	r0, r0
1000a9a6:	4003      	ands	r3, r0
			if (b != 0)
1000a9a8:	980f      	ldr	r0, [sp, #60]	; 0x3c
1000a9aa:	2800      	cmp	r0, #0
1000a9ac:	d101      	bne.n	1000a9b2 <_Z4Gamev.part.0+0x1a42>
1000a9ae:	f7ff fb68 	bl	1000a082 <_Z4Gamev.part.0+0x1112>
				if ((y < 1) || (y >= MAPH-1))
1000a9b2:	4650      	mov	r0, sl
1000a9b4:	2811      	cmp	r0, #17
1000a9b6:	d901      	bls.n	1000a9bc <_Z4Gamev.part.0+0x1a4c>
1000a9b8:	f7ff fb83 	bl	1000a0c2 <_Z4Gamev.part.0+0x1152>
					if (*d != TILE_EMPTY) ok = False;
1000a9bc:	2051      	movs	r0, #81	; 0x51
1000a9be:	5c08      	ldrb	r0, [r1, r0]
1000a9c0:	2808      	cmp	r0, #8
1000a9c2:	d100      	bne.n	1000a9c6 <_Z4Gamev.part.0+0x1a56>
1000a9c4:	e0bf      	b.n	1000ab46 <_Z4Gamev.part.0+0x1bd6>
			if (b != 0)
1000a9c6:	9b08      	ldr	r3, [sp, #32]
1000a9c8:	2b00      	cmp	r3, #0
1000a9ca:	d101      	bne.n	1000a9d0 <_Z4Gamev.part.0+0x1a60>
1000a9cc:	f7ff fb67 	bl	1000a09e <_Z4Gamev.part.0+0x112e>
					if (*d != TILE_EMPTY) ok = False;
1000a9d0:	2352      	movs	r3, #82	; 0x52
1000a9d2:	5ccb      	ldrb	r3, [r1, r3]
1000a9d4:	2b08      	cmp	r3, #8
1000a9d6:	d001      	beq.n	1000a9dc <_Z4Gamev.part.0+0x1a6c>
1000a9d8:	f7ff fb61 	bl	1000a09e <_Z4Gamev.part.0+0x112e>
1000a9dc:	2300      	movs	r3, #0
			if (b != 0)
1000a9de:	2c00      	cmp	r4, #0
1000a9e0:	d001      	beq.n	1000a9e6 <_Z4Gamev.part.0+0x1a76>
1000a9e2:	f7ff fb5f 	bl	1000a0a4 <_Z4Gamev.part.0+0x1134>
1000a9e6:	f7ff fb6c 	bl	1000a0c2 <_Z4Gamev.part.0+0x1152>
1000a9ea:	2c00      	cmp	r4, #0
1000a9ec:	d00a      	beq.n	1000aa04 <_Z4Gamev.part.0+0x1a94>
				if ((y < 1) || (y >= MAPH-1))
1000a9ee:	4650      	mov	r0, sl
1000a9f0:	2811      	cmp	r0, #17
1000a9f2:	d801      	bhi.n	1000a9f8 <_Z4Gamev.part.0+0x1a88>
1000a9f4:	f7ff fb56 	bl	1000a0a4 <_Z4Gamev.part.0+0x1134>
1000a9f8:	f7ff fb63 	bl	1000a0c2 <_Z4Gamev.part.0+0x1152>
			if (b != 0)
1000a9fc:	2c00      	cmp	r4, #0
1000a9fe:	d001      	beq.n	1000aa04 <_Z4Gamev.part.0+0x1a94>
1000aa00:	f7ff fb50 	bl	1000a0a4 <_Z4Gamev.part.0+0x1134>
1000aa04:	4660      	mov	r0, ip
1000aa06:	2800      	cmp	r0, #0
1000aa08:	d000      	beq.n	1000aa0c <_Z4Gamev.part.0+0x1a9c>
1000aa0a:	e0c2      	b.n	1000ab92 <_Z4Gamev.part.0+0x1c22>
				if (CheckBrick(BrickX+1, BrickY, Brick)) BrickX++;
1000aa0c:	2b00      	cmp	r3, #0
1000aa0e:	d101      	bne.n	1000aa14 <_Z4Gamev.part.0+0x1aa4>
1000aa10:	f7ff fb57 	bl	1000a0c2 <_Z4Gamev.part.0+0x1152>
1000aa14:	4b40      	ldr	r3, [pc, #256]	; (1000ab18 <_Z4Gamev.part.0+0x1ba8>)
1000aa16:	9a10      	ldr	r2, [sp, #64]	; 0x40
1000aa18:	701a      	strb	r2, [r3, #0]
1000aa1a:	9b11      	ldr	r3, [sp, #68]	; 0x44
	u8* d = &Board[x + y*MAPW];
1000aa1c:	000a      	movs	r2, r1
1000aa1e:	9309      	str	r3, [sp, #36]	; 0x24
1000aa20:	f7ff fb4f 	bl	1000a0c2 <_Z4Gamev.part.0+0x1152>
			if (b != 0)
1000aa24:	2c00      	cmp	r4, #0
1000aa26:	d01e      	beq.n	1000aa66 <_Z4Gamev.part.0+0x1af6>
				if ((y < 1) || (y >= MAPH-1))
1000aa28:	4650      	mov	r0, sl
1000aa2a:	2811      	cmp	r0, #17
1000aa2c:	d900      	bls.n	1000aa30 <_Z4Gamev.part.0+0x1ac0>
1000aa2e:	e48a      	b.n	1000a346 <_Z4Gamev.part.0+0x13d6>
1000aa30:	e47c      	b.n	1000a32c <_Z4Gamev.part.0+0x13bc>
1000aa32:	9802      	ldr	r0, [sp, #8]
1000aa34:	2811      	cmp	r0, #17
1000aa36:	d8a5      	bhi.n	1000a984 <_Z4Gamev.part.0+0x1a14>
					if (*d != TILE_EMPTY) ok = False;
1000aa38:	2037      	movs	r0, #55	; 0x37
1000aa3a:	5c08      	ldrb	r0, [r1, r0]
1000aa3c:	3808      	subs	r0, #8
1000aa3e:	4247      	negs	r7, r0
1000aa40:	4178      	adcs	r0, r7
1000aa42:	4240      	negs	r0, r0
1000aa44:	4003      	ands	r3, r0
			if (b != 0)
1000aa46:	2e00      	cmp	r6, #0
1000aa48:	d09f      	beq.n	1000a98a <_Z4Gamev.part.0+0x1a1a>
					if (*d != TILE_EMPTY) ok = False;
1000aa4a:	2038      	movs	r0, #56	; 0x38
1000aa4c:	5c08      	ldrb	r0, [r1, r0]
1000aa4e:	3808      	subs	r0, #8
1000aa50:	4247      	negs	r7, r0
1000aa52:	4178      	adcs	r0, r7
1000aa54:	4240      	negs	r0, r0
1000aa56:	4003      	ands	r3, r0
			if (b != 0)
1000aa58:	9807      	ldr	r0, [sp, #28]
1000aa5a:	2800      	cmp	r0, #0
1000aa5c:	d19d      	bne.n	1000a99a <_Z4Gamev.part.0+0x1a2a>
1000aa5e:	e7a3      	b.n	1000a9a8 <_Z4Gamev.part.0+0x1a38>
1000aa60:	2c00      	cmp	r4, #0
1000aa62:	d000      	beq.n	1000aa66 <_Z4Gamev.part.0+0x1af6>
1000aa64:	e462      	b.n	1000a32c <_Z4Gamev.part.0+0x13bc>
1000aa66:	4660      	mov	r0, ip
1000aa68:	2800      	cmp	r0, #0
1000aa6a:	d000      	beq.n	1000aa6e <_Z4Gamev.part.0+0x1afe>
1000aa6c:	e08a      	b.n	1000ab84 <_Z4Gamev.part.0+0x1c14>
				if (CheckBrick(BrickX-1, BrickY, Brick)) BrickX--;
1000aa6e:	2b00      	cmp	r3, #0
1000aa70:	d100      	bne.n	1000aa74 <_Z4Gamev.part.0+0x1b04>
1000aa72:	e468      	b.n	1000a346 <_Z4Gamev.part.0+0x13d6>
1000aa74:	4b28      	ldr	r3, [pc, #160]	; (1000ab18 <_Z4Gamev.part.0+0x1ba8>)
1000aa76:	9a10      	ldr	r2, [sp, #64]	; 0x40
1000aa78:	701a      	strb	r2, [r3, #0]
1000aa7a:	9b11      	ldr	r3, [sp, #68]	; 0x44
	u8* d = &Board[x + y*MAPW];
1000aa7c:	000a      	movs	r2, r1
1000aa7e:	9302      	str	r3, [sp, #8]
1000aa80:	e461      	b.n	1000a346 <_Z4Gamev.part.0+0x13d6>
			b = *s++;
1000aa82:	7b99      	ldrb	r1, [r3, #14]
			if (b != 0)
1000aa84:	2900      	cmp	r1, #0
1000aa86:	d100      	bne.n	1000aa8a <_Z4Gamev.part.0+0x1b1a>
1000aa88:	e682      	b.n	1000a790 <_Z4Gamev.part.0+0x1820>
				if ((y < 1) || (y >= MAPH-1))
1000aa8a:	9d02      	ldr	r5, [sp, #8]
1000aa8c:	2d11      	cmp	r5, #17
1000aa8e:	d900      	bls.n	1000aa92 <_Z4Gamev.part.0+0x1b22>
1000aa90:	e68c      	b.n	1000a7ac <_Z4Gamev.part.0+0x183c>
1000aa92:	e71f      	b.n	1000a8d4 <_Z4Gamev.part.0+0x1964>
			if (b != 0)
1000aa94:	7a99      	ldrb	r1, [r3, #10]
1000aa96:	2900      	cmp	r1, #0
1000aa98:	d100      	bne.n	1000aa9c <_Z4Gamev.part.0+0x1b2c>
1000aa9a:	e731      	b.n	1000a900 <_Z4Gamev.part.0+0x1990>
				if ((y < 1) || (y >= MAPH-1))
1000aa9c:	9901      	ldr	r1, [sp, #4]
1000aa9e:	2911      	cmp	r1, #17
1000aaa0:	d801      	bhi.n	1000aaa6 <_Z4Gamev.part.0+0x1b36>
1000aaa2:	f7fe ffea 	bl	10009a7a <_Z4Gamev.part.0+0xb0a>
					ok = False;
1000aaa6:	2200      	movs	r2, #0
1000aaa8:	f7fe fff8 	bl	10009a9c <_Z4Gamev.part.0+0xb2c>
1000aaac:	25d0      	movs	r5, #208	; 0xd0
1000aaae:	2401      	movs	r4, #1
1000aab0:	4e1b      	ldr	r6, [pc, #108]	; (1000ab20 <_Z4Gamev.part.0+0x1bb0>)
1000aab2:	062d      	lsls	r5, r5, #24
1000aab4:	686b      	ldr	r3, [r5, #4]
1000aab6:	0d1b      	lsrs	r3, r3, #20
	if (!gpio_get(PB_LT))
1000aab8:	421c      	tst	r4, r3
1000aaba:	d00f      	beq.n	1000aadc <_Z4Gamev.part.0+0x1b6c>
1000aabc:	686b      	ldr	r3, [r5, #4]
1000aabe:	0c5b      	lsrs	r3, r3, #17
	else if (!gpio_get(PB_RT))
1000aac0:	421c      	tst	r4, r3
1000aac2:	d00b      	beq.n	1000aadc <_Z4Gamev.part.0+0x1b6c>
1000aac4:	686b      	ldr	r3, [r5, #4]
1000aac6:	0d9b      	lsrs	r3, r3, #22
	else if (!gpio_get(PB_DN))
1000aac8:	421c      	tst	r4, r3
1000aaca:	d007      	beq.n	1000aadc <_Z4Gamev.part.0+0x1b6c>
1000aacc:	686b      	ldr	r3, [r5, #4]
1000aace:	0d5b      	lsrs	r3, r3, #21
	else if (!gpio_get(PB_CF))
1000aad0:	421c      	tst	r4, r3
1000aad2:	d015      	beq.n	1000ab00 <_Z4Gamev.part.0+0x1b90>
1000aad4:	686b      	ldr	r3, [r5, #4]
1000aad6:	0e9b      	lsrs	r3, r3, #26
	else if (!gpio_get(PB_UR))
1000aad8:	421c      	tst	r4, r3
1000aada:	d10a      	bne.n	1000aaf2 <_Z4Gamev.part.0+0x1b82>
	sleep_ms(100);
1000aadc:	2064      	movs	r0, #100	; 0x64
1000aade:	f7f9 feab 	bl	10004838 <sleep_ms>
	memcpy(Board, SaveBoard, MAPSIZE);
1000aae2:	2287      	movs	r2, #135	; 0x87
1000aae4:	4658      	mov	r0, fp
1000aae6:	490f      	ldr	r1, [pc, #60]	; (1000ab24 <_Z4Gamev.part.0+0x1bb4>)
1000aae8:	0092      	lsls	r2, r2, #2
1000aaea:	f7f6 fb01 	bl	100010f0 <__wrap___aeabi_memcpy>
	return i > 0; // i > 0 if continue with user
1000aaee:	f7fe fa59 	bl	10008fa4 <_Z4Gamev.part.0+0x34>
		sleep_ms(100);
1000aaf2:	2064      	movs	r0, #100	; 0x64
	for (i = (timeout ? 100 : 1000000000) ; i > 0; i--)
1000aaf4:	3e01      	subs	r6, #1
		sleep_ms(100);
1000aaf6:	f7f9 fe9f 	bl	10004838 <sleep_ms>
	for (i = (timeout ? 100 : 1000000000) ; i > 0; i--)
1000aafa:	2e00      	cmp	r6, #0
1000aafc:	d1da      	bne.n	1000aab4 <_Z4Gamev.part.0+0x1b44>
1000aafe:	e7f0      	b.n	1000aae2 <_Z4Gamev.part.0+0x1b72>
	sleep_ms(100);
1000ab00:	2064      	movs	r0, #100	; 0x64
1000ab02:	f7f9 fe99 	bl	10004838 <sleep_ms>
		sleep_ms(150);
1000ab06:	2096      	movs	r0, #150	; 0x96
1000ab08:	f7f9 fe96 	bl	10004838 <sleep_ms>
1000ab0c:	e7e9      	b.n	1000aae2 <_Z4Gamev.part.0+0x1b72>
1000ab0e:	46c0      	nop			; (mov r8, r8)
1000ab10:	20012766 	.word	0x20012766
1000ab14:	20012764 	.word	0x20012764
1000ab18:	20012765 	.word	0x20012765
1000ab1c:	10010bd4 	.word	0x10010bd4
1000ab20:	3b9aca00 	.word	0x3b9aca00
1000ab24:	20006c2c 	.word	0x20006c2c
				if ((y < 1) || (y >= MAPH-1))
1000ab28:	9803      	ldr	r0, [sp, #12]
1000ab2a:	2811      	cmp	r0, #17
1000ab2c:	d900      	bls.n	1000ab30 <_Z4Gamev.part.0+0x1bc0>
1000ab2e:	e6f8      	b.n	1000a922 <_Z4Gamev.part.0+0x19b2>
					if (*d != TILE_EMPTY) ok = False;
1000ab30:	2037      	movs	r0, #55	; 0x37
1000ab32:	5c08      	ldrb	r0, [r1, r0]
1000ab34:	3808      	subs	r0, #8
1000ab36:	4247      	negs	r7, r0
1000ab38:	4178      	adcs	r0, r7
1000ab3a:	4240      	negs	r0, r0
1000ab3c:	4003      	ands	r3, r0
			if (b != 0)
1000ab3e:	2e00      	cmp	r6, #0
1000ab40:	d000      	beq.n	1000ab44 <_Z4Gamev.part.0+0x1bd4>
1000ab42:	e559      	b.n	1000a5f8 <_Z4Gamev.part.0+0x1688>
1000ab44:	e6f0      	b.n	1000a928 <_Z4Gamev.part.0+0x19b8>
1000ab46:	9808      	ldr	r0, [sp, #32]
1000ab48:	2800      	cmp	r0, #0
1000ab4a:	d001      	beq.n	1000ab50 <_Z4Gamev.part.0+0x1be0>
1000ab4c:	f7ff faa1 	bl	1000a092 <_Z4Gamev.part.0+0x1122>
1000ab50:	2c00      	cmp	r4, #0
1000ab52:	d001      	beq.n	1000ab58 <_Z4Gamev.part.0+0x1be8>
1000ab54:	f7ff faa6 	bl	1000a0a4 <_Z4Gamev.part.0+0x1134>
1000ab58:	f7ff faa8 	bl	1000a0ac <_Z4Gamev.part.0+0x113c>
1000ab5c:	9809      	ldr	r0, [sp, #36]	; 0x24
1000ab5e:	2800      	cmp	r0, #0
1000ab60:	d001      	beq.n	1000ab66 <_Z4Gamev.part.0+0x1bf6>
1000ab62:	f7ff fbdb 	bl	1000a31c <_Z4Gamev.part.0+0x13ac>
1000ab66:	2c00      	cmp	r4, #0
1000ab68:	d001      	beq.n	1000ab6e <_Z4Gamev.part.0+0x1bfe>
1000ab6a:	f7ff fbdf 	bl	1000a32c <_Z4Gamev.part.0+0x13bc>
1000ab6e:	f7ff fbe1 	bl	1000a334 <_Z4Gamev.part.0+0x13c4>
1000ab72:	9808      	ldr	r0, [sp, #32]
1000ab74:	2800      	cmp	r0, #0
1000ab76:	d000      	beq.n	1000ab7a <_Z4Gamev.part.0+0x1c0a>
1000ab78:	e6dd      	b.n	1000a936 <_Z4Gamev.part.0+0x19c6>
1000ab7a:	e6e3      	b.n	1000a944 <_Z4Gamev.part.0+0x19d4>
					if (*d != TILE_EMPTY) ok = False;
1000ab7c:	46ba      	mov	sl, r7
1000ab7e:	000f      	movs	r7, r1
1000ab80:	f7fe ffaf 	bl	10009ae2 <_Z4Gamev.part.0+0xb72>
				if ((y < 1) || (y >= MAPH-1))
1000ab84:	4650      	mov	r0, sl
1000ab86:	2811      	cmp	r0, #17
1000ab88:	d801      	bhi.n	1000ab8e <_Z4Gamev.part.0+0x1c1e>
1000ab8a:	f7ff fbd7 	bl	1000a33c <_Z4Gamev.part.0+0x13cc>
1000ab8e:	f7ff fbda 	bl	1000a346 <_Z4Gamev.part.0+0x13d6>
1000ab92:	4650      	mov	r0, sl
1000ab94:	2811      	cmp	r0, #17
1000ab96:	d801      	bhi.n	1000ab9c <_Z4Gamev.part.0+0x1c2c>
1000ab98:	f7ff fa8d 	bl	1000a0b6 <_Z4Gamev.part.0+0x1146>
1000ab9c:	f7ff fa91 	bl	1000a0c2 <_Z4Gamev.part.0+0x1152>

1000aba0 <_Z8FindDemov>:

// find demo move
void FindDemo()
{
1000aba0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000aba2:	464e      	mov	r6, r9
1000aba4:	46de      	mov	lr, fp
1000aba6:	4657      	mov	r7, sl
1000aba8:	4645      	mov	r5, r8
1000abaa:	b5e0      	push	{r5, r6, r7, lr}
	int bestscore, bestx, besty, bestbrick; // best move
	int savex, savey, savebrick; // save state

	// clear best score
	bestscore = 0;
	bestx = BrickX;
1000abac:	2600      	movs	r6, #0
1000abae:	4be6      	ldr	r3, [pc, #920]	; (1000af48 <_Z8FindDemov+0x3a8>)
{
1000abb0:	b09b      	sub	sp, #108	; 0x6c
	bestx = BrickX;
1000abb2:	579e      	ldrsb	r6, [r3, r6]
	besty = BrickY;
1000abb4:	4be5      	ldr	r3, [pc, #916]	; (1000af4c <_Z8FindDemov+0x3ac>)
	bestbrick = Brick;
1000abb6:	4ae6      	ldr	r2, [pc, #920]	; (1000af50 <_Z8FindDemov+0x3b0>)
	besty = BrickY;
1000abb8:	781b      	ldrb	r3, [r3, #0]
	bestbrick = Brick;
1000abba:	7812      	ldrb	r2, [r2, #0]
	besty = BrickY;
1000abbc:	b25b      	sxtb	r3, r3
	u8* d = &Board[x + y*MAPW];
1000abbe:	469c      	mov	ip, r3
1000abc0:	0058      	lsls	r0, r3, #1
1000abc2:	900f      	str	r0, [sp, #60]	; 0x3c
1000abc4:	4460      	add	r0, ip
	besty = BrickY;
1000abc6:	930d      	str	r3, [sp, #52]	; 0x34
1000abc8:	9316      	str	r3, [sp, #88]	; 0x58
	u8* d = &Board[x + y*MAPW];
1000abca:	0003      	movs	r3, r0
1000abcc:	00c0      	lsls	r0, r0, #3
1000abce:	181b      	adds	r3, r3, r0
1000abd0:	48e0      	ldr	r0, [pc, #896]	; (1000af54 <_Z8FindDemov+0x3b4>)
	const u8* s = &BrickTemp[brick*BRICKTEMPSIZE];
1000abd2:	0111      	lsls	r1, r2, #4
	u8* d = &Board[x + y*MAPW];
1000abd4:	4684      	mov	ip, r0
	bestbrick = Brick;
1000abd6:	920e      	str	r2, [sp, #56]	; 0x38
			if (b != 0) *d = TILE_EMPTY;
1000abd8:	48df      	ldr	r0, [pc, #892]	; (1000af58 <_Z8FindDemov+0x3b8>)
	bestbrick = Brick;
1000abda:	9217      	str	r2, [sp, #92]	; 0x5c
	const u8* s = &BrickTemp[brick*BRICKTEMPSIZE];
1000abdc:	4ade      	ldr	r2, [pc, #888]	; (1000af58 <_Z8FindDemov+0x3b8>)
	u8* d = &Board[x + y*MAPW];
1000abde:	199b      	adds	r3, r3, r6
	const u8* s = &BrickTemp[brick*BRICKTEMPSIZE];
1000abe0:	1852      	adds	r2, r2, r1
			if (b != 0) *d = TILE_EMPTY;
1000abe2:	5c41      	ldrb	r1, [r0, r1]
	bestx = BrickX;
1000abe4:	9615      	str	r6, [sp, #84]	; 0x54
	u8* d = &Board[x + y*MAPW];
1000abe6:	4463      	add	r3, ip
			if (b != 0) *d = TILE_EMPTY;
1000abe8:	2900      	cmp	r1, #0
1000abea:	d001      	beq.n	1000abf0 <_Z8FindDemov+0x50>
1000abec:	2108      	movs	r1, #8
1000abee:	7019      	strb	r1, [r3, #0]
1000abf0:	7851      	ldrb	r1, [r2, #1]
1000abf2:	2900      	cmp	r1, #0
1000abf4:	d001      	beq.n	1000abfa <_Z8FindDemov+0x5a>
1000abf6:	2108      	movs	r1, #8
1000abf8:	7059      	strb	r1, [r3, #1]
1000abfa:	7891      	ldrb	r1, [r2, #2]
1000abfc:	2900      	cmp	r1, #0
1000abfe:	d001      	beq.n	1000ac04 <_Z8FindDemov+0x64>
1000ac00:	2108      	movs	r1, #8
1000ac02:	7099      	strb	r1, [r3, #2]
1000ac04:	78d1      	ldrb	r1, [r2, #3]
1000ac06:	2900      	cmp	r1, #0
1000ac08:	d001      	beq.n	1000ac0e <_Z8FindDemov+0x6e>
1000ac0a:	2108      	movs	r1, #8
1000ac0c:	70d9      	strb	r1, [r3, #3]
1000ac0e:	7911      	ldrb	r1, [r2, #4]
1000ac10:	2900      	cmp	r1, #0
1000ac12:	d001      	beq.n	1000ac18 <_Z8FindDemov+0x78>
1000ac14:	2108      	movs	r1, #8
1000ac16:	76d9      	strb	r1, [r3, #27]
1000ac18:	7951      	ldrb	r1, [r2, #5]
1000ac1a:	2900      	cmp	r1, #0
1000ac1c:	d001      	beq.n	1000ac22 <_Z8FindDemov+0x82>
1000ac1e:	2108      	movs	r1, #8
1000ac20:	7719      	strb	r1, [r3, #28]
1000ac22:	7991      	ldrb	r1, [r2, #6]
1000ac24:	2900      	cmp	r1, #0
1000ac26:	d001      	beq.n	1000ac2c <_Z8FindDemov+0x8c>
1000ac28:	2108      	movs	r1, #8
1000ac2a:	7759      	strb	r1, [r3, #29]
1000ac2c:	79d1      	ldrb	r1, [r2, #7]
1000ac2e:	2900      	cmp	r1, #0
1000ac30:	d001      	beq.n	1000ac36 <_Z8FindDemov+0x96>
1000ac32:	2108      	movs	r1, #8
1000ac34:	7799      	strb	r1, [r3, #30]
1000ac36:	7a11      	ldrb	r1, [r2, #8]
1000ac38:	2900      	cmp	r1, #0
1000ac3a:	d002      	beq.n	1000ac42 <_Z8FindDemov+0xa2>
1000ac3c:	2136      	movs	r1, #54	; 0x36
1000ac3e:	2008      	movs	r0, #8
1000ac40:	5458      	strb	r0, [r3, r1]
1000ac42:	7a51      	ldrb	r1, [r2, #9]
1000ac44:	2900      	cmp	r1, #0
1000ac46:	d002      	beq.n	1000ac4e <_Z8FindDemov+0xae>
1000ac48:	2137      	movs	r1, #55	; 0x37
1000ac4a:	2008      	movs	r0, #8
1000ac4c:	5458      	strb	r0, [r3, r1]
1000ac4e:	7a91      	ldrb	r1, [r2, #10]
1000ac50:	2900      	cmp	r1, #0
1000ac52:	d002      	beq.n	1000ac5a <_Z8FindDemov+0xba>
1000ac54:	2138      	movs	r1, #56	; 0x38
1000ac56:	2008      	movs	r0, #8
1000ac58:	5458      	strb	r0, [r3, r1]
1000ac5a:	7ad1      	ldrb	r1, [r2, #11]
1000ac5c:	2900      	cmp	r1, #0
1000ac5e:	d002      	beq.n	1000ac66 <_Z8FindDemov+0xc6>
1000ac60:	2139      	movs	r1, #57	; 0x39
1000ac62:	2008      	movs	r0, #8
1000ac64:	5458      	strb	r0, [r3, r1]
1000ac66:	7b11      	ldrb	r1, [r2, #12]
1000ac68:	2900      	cmp	r1, #0
1000ac6a:	d002      	beq.n	1000ac72 <_Z8FindDemov+0xd2>
1000ac6c:	2151      	movs	r1, #81	; 0x51
1000ac6e:	2008      	movs	r0, #8
1000ac70:	5458      	strb	r0, [r3, r1]
1000ac72:	7b51      	ldrb	r1, [r2, #13]
1000ac74:	2900      	cmp	r1, #0
1000ac76:	d002      	beq.n	1000ac7e <_Z8FindDemov+0xde>
1000ac78:	2152      	movs	r1, #82	; 0x52
1000ac7a:	2008      	movs	r0, #8
1000ac7c:	5458      	strb	r0, [r3, r1]
1000ac7e:	7b91      	ldrb	r1, [r2, #14]
1000ac80:	2900      	cmp	r1, #0
1000ac82:	d002      	beq.n	1000ac8a <_Z8FindDemov+0xea>
1000ac84:	2153      	movs	r1, #83	; 0x53
1000ac86:	2008      	movs	r0, #8
1000ac88:	5458      	strb	r0, [r3, r1]
1000ac8a:	7bd2      	ldrb	r2, [r2, #15]
1000ac8c:	2a00      	cmp	r2, #0
1000ac8e:	d002      	beq.n	1000ac96 <_Z8FindDemov+0xf6>
1000ac90:	2254      	movs	r2, #84	; 0x54
1000ac92:	2108      	movs	r1, #8
1000ac94:	5499      	strb	r1, [r3, r2]
{
1000ac96:	2304      	movs	r3, #4
1000ac98:	9319      	str	r3, [sp, #100]	; 0x64
	bestscore = 0;
1000ac9a:	2300      	movs	r3, #0
1000ac9c:	2234      	movs	r2, #52	; 0x34
1000ac9e:	9313      	str	r3, [sp, #76]	; 0x4c
1000aca0:	466b      	mov	r3, sp
1000aca2:	189b      	adds	r3, r3, r2
1000aca4:	781b      	ldrb	r3, [r3, #0]
					if (*d != TILE_EMPTY) ok = False;
1000aca6:	46b2      	mov	sl, r6
1000aca8:	469b      	mov	fp, r3

	// rotations
	for (rot = 4; rot > 0; rot--)
	{
		// get new brick
		newbrick = BrickRot[Brick];
1000acaa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
1000acac:	4bab      	ldr	r3, [pc, #684]	; (1000af5c <_Z8FindDemov+0x3bc>)
	const u8* s = &BrickTemp[brick*BRICKTEMPSIZE];
1000acae:	4caa      	ldr	r4, [pc, #680]	; (1000af58 <_Z8FindDemov+0x3b8>)
		newbrick = BrickRot[Brick];
1000acb0:	5c9b      	ldrb	r3, [r3, r2]
	u8* d = &Board[x + y*MAPW];
1000acb2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
	const u8* s = &BrickTemp[brick*BRICKTEMPSIZE];
1000acb4:	0119      	lsls	r1, r3, #4
1000acb6:	468c      	mov	ip, r1
1000acb8:	4464      	add	r4, ip
	u8* d = &Board[x + y*MAPW];
1000acba:	4694      	mov	ip, r2
		newbrick = BrickRot[Brick];
1000acbc:	930e      	str	r3, [sp, #56]	; 0x38
	u8* d = &Board[x + y*MAPW];
1000acbe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
			b = *s++;
1000acc0:	48a5      	ldr	r0, [pc, #660]	; (1000af58 <_Z8FindDemov+0x3b8>)
	u8* d = &Board[x + y*MAPW];
1000acc2:	4463      	add	r3, ip
1000acc4:	00da      	lsls	r2, r3, #3
1000acc6:	189b      	adds	r3, r3, r2
	const u8* s = &BrickTemp[brick*BRICKTEMPSIZE];
1000acc8:	9110      	str	r1, [sp, #64]	; 0x40
	u8* d = &Board[x + y*MAPW];
1000acca:	4aa2      	ldr	r2, [pc, #648]	; (1000af54 <_Z8FindDemov+0x3b4>)
			b = *s++;
1000accc:	5c41      	ldrb	r1, [r0, r1]
	u8* d = &Board[x + y*MAPW];
1000acce:	9311      	str	r3, [sp, #68]	; 0x44
1000acd0:	4453      	add	r3, sl
			b = *s++;
1000acd2:	4689      	mov	r9, r1
				if ((y < 1) || (y >= MAPH-1))
1000acd4:	465d      	mov	r5, fp
	u8* d = &Board[x + y*MAPW];
1000acd6:	18d2      	adds	r2, r2, r3
			if (b != 0)
1000acd8:	2900      	cmp	r1, #0
1000acda:	d101      	bne.n	1000ace0 <_Z8FindDemov+0x140>
1000acdc:	f000 fc0f 	bl	1000b4fe <_Z8FindDemov+0x95e>
				if ((y < 1) || (y >= MAPH-1))
1000ace0:	4659      	mov	r1, fp
1000ace2:	3901      	subs	r1, #1
1000ace4:	2911      	cmp	r1, #17
1000ace6:	d901      	bls.n	1000acec <_Z8FindDemov+0x14c>
1000ace8:	f001 f830 	bl	1000bd4c <_Z8FindDemov+0x11ac>
					if (*d != TILE_EMPTY) ok = False;
1000acec:	4999      	ldr	r1, [pc, #612]	; (1000af54 <_Z8FindDemov+0x3b4>)
1000acee:	5ccb      	ldrb	r3, [r1, r3]
1000acf0:	3b08      	subs	r3, #8
1000acf2:	4259      	negs	r1, r3
1000acf4:	414b      	adcs	r3, r1
			if (b != 0)
1000acf6:	7861      	ldrb	r1, [r4, #1]
					if (*d != TILE_EMPTY) ok = False;
1000acf8:	b2db      	uxtb	r3, r3
			if (b != 0)
1000acfa:	2900      	cmp	r1, #0
1000acfc:	d001      	beq.n	1000ad02 <_Z8FindDemov+0x162>
1000acfe:	f001 f807 	bl	1000bd10 <_Z8FindDemov+0x1170>
1000ad02:	78a1      	ldrb	r1, [r4, #2]
1000ad04:	2900      	cmp	r1, #0
1000ad06:	d001      	beq.n	1000ad0c <_Z8FindDemov+0x16c>
1000ad08:	f001 f80d 	bl	1000bd26 <_Z8FindDemov+0x1186>
1000ad0c:	78e1      	ldrb	r1, [r4, #3]
1000ad0e:	2900      	cmp	r1, #0
1000ad10:	d006      	beq.n	1000ad20 <_Z8FindDemov+0x180>
				if ((y < 1) || (y >= MAPH-1))
1000ad12:	4659      	mov	r1, fp
1000ad14:	3901      	subs	r1, #1
1000ad16:	2911      	cmp	r1, #17
1000ad18:	d801      	bhi.n	1000ad1e <_Z8FindDemov+0x17e>
1000ad1a:	f001 f80f 	bl	1000bd3c <_Z8FindDemov+0x119c>
					ok = False;
1000ad1e:	2300      	movs	r3, #0
		y++;
1000ad20:	4659      	mov	r1, fp
1000ad22:	3101      	adds	r1, #1
1000ad24:	b2c9      	uxtb	r1, r1
1000ad26:	9101      	str	r1, [sp, #4]
			b = *s++;
1000ad28:	7921      	ldrb	r1, [r4, #4]
1000ad2a:	9103      	str	r1, [sp, #12]
			if (b != 0)
1000ad2c:	2900      	cmp	r1, #0
1000ad2e:	d101      	bne.n	1000ad34 <_Z8FindDemov+0x194>
1000ad30:	f000 fbfe 	bl	1000b530 <_Z8FindDemov+0x990>
				if ((y < 1) || (y >= MAPH-1))
1000ad34:	4659      	mov	r1, fp
1000ad36:	2911      	cmp	r1, #17
1000ad38:	d901      	bls.n	1000ad3e <_Z8FindDemov+0x19e>
1000ad3a:	f000 ffcf 	bl	1000bcdc <_Z8FindDemov+0x113c>
					if (*d != TILE_EMPTY) ok = False;
1000ad3e:	7ed1      	ldrb	r1, [r2, #27]
1000ad40:	3908      	subs	r1, #8
1000ad42:	4248      	negs	r0, r1
1000ad44:	4141      	adcs	r1, r0
1000ad46:	4249      	negs	r1, r1
1000ad48:	400b      	ands	r3, r1
			if (b != 0)
1000ad4a:	7961      	ldrb	r1, [r4, #5]
1000ad4c:	2900      	cmp	r1, #0
1000ad4e:	d001      	beq.n	1000ad54 <_Z8FindDemov+0x1b4>
1000ad50:	f000 fbf6 	bl	1000b540 <_Z8FindDemov+0x9a0>
1000ad54:	79a1      	ldrb	r1, [r4, #6]
1000ad56:	2900      	cmp	r1, #0
1000ad58:	d001      	beq.n	1000ad5e <_Z8FindDemov+0x1be>
1000ad5a:	f000 fbfb 	bl	1000b554 <_Z8FindDemov+0x9b4>
1000ad5e:	79e1      	ldrb	r1, [r4, #7]
1000ad60:	2900      	cmp	r1, #0
1000ad62:	d001      	beq.n	1000ad68 <_Z8FindDemov+0x1c8>
1000ad64:	f000 fbff 	bl	1000b566 <_Z8FindDemov+0x9c6>
		y++;
1000ad68:	4659      	mov	r1, fp
1000ad6a:	3102      	adds	r1, #2
1000ad6c:	b2c9      	uxtb	r1, r1
1000ad6e:	4688      	mov	r8, r1
			b = *s++;
1000ad70:	7a21      	ldrb	r1, [r4, #8]
1000ad72:	9102      	str	r1, [sp, #8]
			if (b != 0)
1000ad74:	2900      	cmp	r1, #0
1000ad76:	d001      	beq.n	1000ad7c <_Z8FindDemov+0x1dc>
1000ad78:	f000 fc05 	bl	1000b586 <_Z8FindDemov+0x9e6>
			b = *s++;
1000ad7c:	7a61      	ldrb	r1, [r4, #9]
			if (b != 0)
1000ad7e:	2900      	cmp	r1, #0
1000ad80:	d101      	bne.n	1000ad86 <_Z8FindDemov+0x1e6>
1000ad82:	f000 ffa0 	bl	1000bcc6 <_Z8FindDemov+0x1126>
				if ((y < 1) || (y >= MAPH-1))
1000ad86:	9901      	ldr	r1, [sp, #4]
1000ad88:	2911      	cmp	r1, #17
1000ad8a:	d901      	bls.n	1000ad90 <_Z8FindDemov+0x1f0>
1000ad8c:	f000 ff8b 	bl	1000bca6 <_Z8FindDemov+0x1106>
					if (*d != TILE_EMPTY) ok = False;
1000ad90:	2137      	movs	r1, #55	; 0x37
1000ad92:	5c51      	ldrb	r1, [r2, r1]
1000ad94:	3908      	subs	r1, #8
1000ad96:	4248      	negs	r0, r1
1000ad98:	4141      	adcs	r1, r0
1000ad9a:	4249      	negs	r1, r1
1000ad9c:	400b      	ands	r3, r1
			if (b != 0)
1000ad9e:	7aa1      	ldrb	r1, [r4, #10]
1000ada0:	2900      	cmp	r1, #0
1000ada2:	d101      	bne.n	1000ada8 <_Z8FindDemov+0x208>
1000ada4:	f000 ff82 	bl	1000bcac <_Z8FindDemov+0x110c>
					if (*d != TILE_EMPTY) ok = False;
1000ada8:	2138      	movs	r1, #56	; 0x38
1000adaa:	5c51      	ldrb	r1, [r2, r1]
1000adac:	3908      	subs	r1, #8
1000adae:	4248      	negs	r0, r1
1000adb0:	4141      	adcs	r1, r0
1000adb2:	4249      	negs	r1, r1
1000adb4:	400b      	ands	r3, r1
			if (b != 0)
1000adb6:	7ae1      	ldrb	r1, [r4, #11]
1000adb8:	2900      	cmp	r1, #0
1000adba:	d006      	beq.n	1000adca <_Z8FindDemov+0x22a>
					if (*d != TILE_EMPTY) ok = False;
1000adbc:	2139      	movs	r1, #57	; 0x39
1000adbe:	5c51      	ldrb	r1, [r2, r1]
					ok = False;
1000adc0:	3908      	subs	r1, #8
1000adc2:	4248      	negs	r0, r1
1000adc4:	4141      	adcs	r1, r0
1000adc6:	4249      	negs	r1, r1
1000adc8:	400b      	ands	r3, r1
			b = *s++;
1000adca:	7b21      	ldrb	r1, [r4, #12]
1000adcc:	9104      	str	r1, [sp, #16]
			if (b != 0)
1000adce:	2900      	cmp	r1, #0
1000add0:	d101      	bne.n	1000add6 <_Z8FindDemov+0x236>
1000add2:	f000 fbf8 	bl	1000b5c6 <_Z8FindDemov+0xa26>
				if ((y < 1) || (y >= MAPH-1))
1000add6:	4641      	mov	r1, r8
1000add8:	2911      	cmp	r1, #17
1000adda:	d817      	bhi.n	1000ae0c <_Z8FindDemov+0x26c>
					if (*d != TILE_EMPTY) ok = False;
1000addc:	2151      	movs	r1, #81	; 0x51
1000adde:	5c51      	ldrb	r1, [r2, r1]
1000ade0:	3908      	subs	r1, #8
1000ade2:	4248      	negs	r0, r1
1000ade4:	4141      	adcs	r1, r0
1000ade6:	4249      	negs	r1, r1
1000ade8:	400b      	ands	r3, r1
			if (b != 0)
1000adea:	7b61      	ldrb	r1, [r4, #13]
1000adec:	2900      	cmp	r1, #0
1000adee:	d001      	beq.n	1000adf4 <_Z8FindDemov+0x254>
1000adf0:	f000 fbf1 	bl	1000b5d6 <_Z8FindDemov+0xa36>
			b = *s++;
1000adf4:	7ba1      	ldrb	r1, [r4, #14]
1000adf6:	9109      	str	r1, [sp, #36]	; 0x24
			if (b != 0)
1000adf8:	2900      	cmp	r1, #0
1000adfa:	d101      	bne.n	1000ae00 <_Z8FindDemov+0x260>
1000adfc:	f000 ff2f 	bl	1000bc5e <_Z8FindDemov+0x10be>
					if (*d != TILE_EMPTY) ok = False;
1000ae00:	2153      	movs	r1, #83	; 0x53
1000ae02:	5c51      	ldrb	r1, [r2, r1]
1000ae04:	2908      	cmp	r1, #8
1000ae06:	d101      	bne.n	1000ae0c <_Z8FindDemov+0x26c>
1000ae08:	f000 ff29 	bl	1000bc5e <_Z8FindDemov+0x10be>
	return res;
1000ae0c:	4650      	mov	r0, sl
1000ae0e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
1000ae10:	990d      	ldr	r1, [sp, #52]	; 0x34
1000ae12:	f7fb fe17 	bl	10006a44 <_Z11CheckBrickXaah.part.0>
	if (CheckBrickX(x, y, brick)) return True;
1000ae16:	2800      	cmp	r0, #0
1000ae18:	d000      	beq.n	1000ae1c <_Z8FindDemov+0x27c>
1000ae1a:	e0ae      	b.n	1000af7a <_Z8FindDemov+0x3da>
		y++;
1000ae1c:	466b      	mov	r3, sp
1000ae1e:	2204      	movs	r2, #4
1000ae20:	569a      	ldrsb	r2, [r3, r2]
			if (b != 0)
1000ae22:	4649      	mov	r1, r9
	u8* d = &Board[x + y*MAPW];
1000ae24:	4694      	mov	ip, r2
1000ae26:	0053      	lsls	r3, r2, #1
1000ae28:	930f      	str	r3, [sp, #60]	; 0x3c
1000ae2a:	4463      	add	r3, ip
		y++;
1000ae2c:	920d      	str	r2, [sp, #52]	; 0x34
	u8* d = &Board[x + y*MAPW];
1000ae2e:	00da      	lsls	r2, r3, #3
1000ae30:	189b      	adds	r3, r3, r2
1000ae32:	4a48      	ldr	r2, [pc, #288]	; (1000af54 <_Z8FindDemov+0x3b4>)
1000ae34:	9311      	str	r3, [sp, #68]	; 0x44
1000ae36:	4453      	add	r3, sl
1000ae38:	18d2      	adds	r2, r2, r3
			if (b != 0)
1000ae3a:	2900      	cmp	r1, #0
1000ae3c:	d101      	bne.n	1000ae42 <_Z8FindDemov+0x2a2>
1000ae3e:	f000 ff88 	bl	1000bd52 <_Z8FindDemov+0x11b2>
				if ((y < 1) || (y >= MAPH-1))
1000ae42:	4659      	mov	r1, fp
1000ae44:	2911      	cmp	r1, #17
1000ae46:	d801      	bhi.n	1000ae4c <_Z8FindDemov+0x2ac>
1000ae48:	f001 f858 	bl	1000befc <_Z8FindDemov+0x135c>
			b = *s++;
1000ae4c:	7863      	ldrb	r3, [r4, #1]
			if (b != 0)
1000ae4e:	2b00      	cmp	r3, #0
1000ae50:	d101      	bne.n	1000ae56 <_Z8FindDemov+0x2b6>
1000ae52:	f000 ffa2 	bl	1000bd9a <_Z8FindDemov+0x11fa>
			b = *s++;
1000ae56:	78a3      	ldrb	r3, [r4, #2]
			if (b != 0)
1000ae58:	2b00      	cmp	r3, #0
1000ae5a:	d109      	bne.n	1000ae70 <_Z8FindDemov+0x2d0>
1000ae5c:	78e1      	ldrb	r1, [r4, #3]
1000ae5e:	2900      	cmp	r1, #0
1000ae60:	d101      	bne.n	1000ae66 <_Z8FindDemov+0x2c6>
1000ae62:	f000 ff9a 	bl	1000bd9a <_Z8FindDemov+0x11fa>
				if ((y < 1) || (y >= MAPH-1))
1000ae66:	4659      	mov	r1, fp
1000ae68:	2911      	cmp	r1, #17
1000ae6a:	d801      	bhi.n	1000ae70 <_Z8FindDemov+0x2d0>
1000ae6c:	f000 ff8f 	bl	1000bd8e <_Z8FindDemov+0x11ee>
			b = *s++;
1000ae70:	7921      	ldrb	r1, [r4, #4]
					ok = False;
1000ae72:	2300      	movs	r3, #0
			b = *s++;
1000ae74:	9103      	str	r1, [sp, #12]
			if (b != 0)
1000ae76:	2900      	cmp	r1, #0
1000ae78:	d001      	beq.n	1000ae7e <_Z8FindDemov+0x2de>
1000ae7a:	f000 ff94 	bl	1000bda6 <_Z8FindDemov+0x1206>
			b = *s++;
1000ae7e:	7961      	ldrb	r1, [r4, #5]
			if (b != 0)
1000ae80:	2900      	cmp	r1, #0
1000ae82:	d101      	bne.n	1000ae88 <_Z8FindDemov+0x2e8>
1000ae84:	f001 f880 	bl	1000bf88 <_Z8FindDemov+0x13e8>
				if ((y < 1) || (y >= MAPH-1))
1000ae88:	9901      	ldr	r1, [sp, #4]
1000ae8a:	2911      	cmp	r1, #17
1000ae8c:	d901      	bls.n	1000ae92 <_Z8FindDemov+0x2f2>
1000ae8e:	f001 f873 	bl	1000bf78 <_Z8FindDemov+0x13d8>
					if (*d != TILE_EMPTY) ok = False;
1000ae92:	7f11      	ldrb	r1, [r2, #28]
1000ae94:	3908      	subs	r1, #8
1000ae96:	4248      	negs	r0, r1
1000ae98:	4141      	adcs	r1, r0
1000ae9a:	4249      	negs	r1, r1
1000ae9c:	400b      	ands	r3, r1
			if (b != 0)
1000ae9e:	79a1      	ldrb	r1, [r4, #6]
1000aea0:	2900      	cmp	r1, #0
1000aea2:	d001      	beq.n	1000aea8 <_Z8FindDemov+0x308>
1000aea4:	f000 ff92 	bl	1000bdcc <_Z8FindDemov+0x122c>
1000aea8:	79e1      	ldrb	r1, [r4, #7]
1000aeaa:	2900      	cmp	r1, #0
1000aeac:	d101      	bne.n	1000aeb2 <_Z8FindDemov+0x312>
1000aeae:	f000 ff9c 	bl	1000bdea <_Z8FindDemov+0x124a>
				if ((y < 1) || (y >= MAPH-1))
1000aeb2:	9901      	ldr	r1, [sp, #4]
1000aeb4:	2911      	cmp	r1, #17
1000aeb6:	d801      	bhi.n	1000aebc <_Z8FindDemov+0x31c>
1000aeb8:	f000 ff91 	bl	1000bdde <_Z8FindDemov+0x123e>
					ok = False;
1000aebc:	2300      	movs	r3, #0
			b = *s++;
1000aebe:	7a21      	ldrb	r1, [r4, #8]
1000aec0:	9102      	str	r1, [sp, #8]
			if (b != 0)
1000aec2:	2900      	cmp	r1, #0
1000aec4:	d001      	beq.n	1000aeca <_Z8FindDemov+0x32a>
1000aec6:	f000 ff96 	bl	1000bdf6 <_Z8FindDemov+0x1256>
			b = *s++;
1000aeca:	7a61      	ldrb	r1, [r4, #9]
			if (b != 0)
1000aecc:	2900      	cmp	r1, #0
1000aece:	d101      	bne.n	1000aed4 <_Z8FindDemov+0x334>
1000aed0:	f001 f842 	bl	1000bf58 <_Z8FindDemov+0x13b8>
				if ((y < 1) || (y >= MAPH-1))
1000aed4:	4641      	mov	r1, r8
1000aed6:	2911      	cmp	r1, #17
1000aed8:	d901      	bls.n	1000aede <_Z8FindDemov+0x33e>
1000aeda:	f001 f835 	bl	1000bf48 <_Z8FindDemov+0x13a8>
					if (*d != TILE_EMPTY) ok = False;
1000aede:	2137      	movs	r1, #55	; 0x37
1000aee0:	5c51      	ldrb	r1, [r2, r1]
1000aee2:	3908      	subs	r1, #8
1000aee4:	4248      	negs	r0, r1
1000aee6:	4141      	adcs	r1, r0
1000aee8:	4249      	negs	r1, r1
1000aeea:	400b      	ands	r3, r1
			if (b != 0)
1000aeec:	7aa1      	ldrb	r1, [r4, #10]
1000aeee:	2900      	cmp	r1, #0
1000aef0:	d001      	beq.n	1000aef6 <_Z8FindDemov+0x356>
1000aef2:	f000 ff94 	bl	1000be1e <_Z8FindDemov+0x127e>
1000aef6:	7ae1      	ldrb	r1, [r4, #11]
1000aef8:	2900      	cmp	r1, #0
1000aefa:	d101      	bne.n	1000af00 <_Z8FindDemov+0x360>
1000aefc:	f000 ffa0 	bl	1000be40 <_Z8FindDemov+0x12a0>
				if ((y < 1) || (y >= MAPH-1))
1000af00:	4641      	mov	r1, r8
1000af02:	2911      	cmp	r1, #17
1000af04:	d801      	bhi.n	1000af0a <_Z8FindDemov+0x36a>
1000af06:	f000 ff94 	bl	1000be32 <_Z8FindDemov+0x1292>
					ok = False;
1000af0a:	2300      	movs	r3, #0
		y++;
1000af0c:	4659      	mov	r1, fp
1000af0e:	1cce      	adds	r6, r1, #3
			b = *s++;
1000af10:	7b21      	ldrb	r1, [r4, #12]
		y++;
1000af12:	b2f6      	uxtb	r6, r6
			b = *s++;
1000af14:	9104      	str	r1, [sp, #16]
			if (b != 0)
1000af16:	2900      	cmp	r1, #0
1000af18:	d001      	beq.n	1000af1e <_Z8FindDemov+0x37e>
1000af1a:	f000 ff9a 	bl	1000be52 <_Z8FindDemov+0x12b2>
1000af1e:	7b61      	ldrb	r1, [r4, #13]
1000af20:	2900      	cmp	r1, #0
1000af22:	d101      	bne.n	1000af28 <_Z8FindDemov+0x388>
1000af24:	f000 fffd 	bl	1000bf22 <_Z8FindDemov+0x1382>
				if ((y < 1) || (y >= MAPH-1))
1000af28:	2e11      	cmp	r6, #17
1000af2a:	d819      	bhi.n	1000af60 <_Z8FindDemov+0x3c0>
					if (*d != TILE_EMPTY) ok = False;
1000af2c:	2152      	movs	r1, #82	; 0x52
1000af2e:	5c51      	ldrb	r1, [r2, r1]
1000af30:	2908      	cmp	r1, #8
1000af32:	d101      	bne.n	1000af38 <_Z8FindDemov+0x398>
1000af34:	f001 f834 	bl	1000bfa0 <_Z8FindDemov+0x1400>
			b = *s++;
1000af38:	7ba3      	ldrb	r3, [r4, #14]
1000af3a:	9309      	str	r3, [sp, #36]	; 0x24
			if (b != 0)
1000af3c:	2b00      	cmp	r3, #0
1000af3e:	d001      	beq.n	1000af44 <_Z8FindDemov+0x3a4>
1000af40:	f001 f848 	bl	1000bfd4 <_Z8FindDemov+0x1434>
1000af44:	e00c      	b.n	1000af60 <_Z8FindDemov+0x3c0>
1000af46:	46c0      	nop			; (mov r8, r8)
1000af48:	20012765 	.word	0x20012765
1000af4c:	20012766 	.word	0x20012766
1000af50:	20012764 	.word	0x20012764
1000af54:	2000327c 	.word	0x2000327c
1000af58:	10010bd4 	.word	0x10010bd4
1000af5c:	10010b98 	.word	0x10010b98
	return res;
1000af60:	4650      	mov	r0, sl
1000af62:	9a0e      	ldr	r2, [sp, #56]	; 0x38
1000af64:	990d      	ldr	r1, [sp, #52]	; 0x34
1000af66:	f7fb fd6d 	bl	10006a44 <_Z11CheckBrickXaah.part.0>
	if (CheckBrickX(x, y+1, brick)) return True;
1000af6a:	2800      	cmp	r0, #0
1000af6c:	d105      	bne.n	1000af7a <_Z8FindDemov+0x3da>
	return CheckBrickX(x, y+2, brick);
1000af6e:	4643      	mov	r3, r8
1000af70:	4650      	mov	r0, sl
1000af72:	9a0e      	ldr	r2, [sp, #56]	; 0x38
1000af74:	b259      	sxtb	r1, r3
1000af76:	f7fc ff99 	bl	10007eac <_Z11CheckBrickXaah>

		// try rotate brick, find nearest free space
		CheckBrickY(BrickX, BrickY, newbrick);

		// move brick left
		while (CheckBrick(BrickX-1, BrickY, Brick)) BrickX--;
1000af7a:	2100      	movs	r1, #0
1000af7c:	4be8      	ldr	r3, [pc, #928]	; (1000b320 <_Z8FindDemov+0x780>)
	const u8* s = &BrickTemp[brick*BRICKTEMPSIZE];
1000af7e:	4ce9      	ldr	r4, [pc, #932]	; (1000b324 <_Z8FindDemov+0x784>)
		while (CheckBrick(BrickX-1, BrickY, Brick)) BrickX--;
1000af80:	5659      	ldrsb	r1, [r3, r1]
1000af82:	4be9      	ldr	r3, [pc, #932]	; (1000b328 <_Z8FindDemov+0x788>)
1000af84:	910d      	str	r1, [sp, #52]	; 0x34
1000af86:	781b      	ldrb	r3, [r3, #0]
	const u8* s = &BrickTemp[brick*BRICKTEMPSIZE];
1000af88:	0118      	lsls	r0, r3, #4
1000af8a:	4684      	mov	ip, r0
1000af8c:	4464      	add	r4, ip
	u8* d = &Board[x + y*MAPW];
1000af8e:	468c      	mov	ip, r1
		while (CheckBrick(BrickX-1, BrickY, Brick)) BrickX--;
1000af90:	930e      	str	r3, [sp, #56]	; 0x38
	u8* d = &Board[x + y*MAPW];
1000af92:	004b      	lsls	r3, r1, #1
1000af94:	930f      	str	r3, [sp, #60]	; 0x3c
1000af96:	4463      	add	r3, ip
1000af98:	00da      	lsls	r2, r3, #3
1000af9a:	189b      	adds	r3, r3, r2
1000af9c:	9311      	str	r3, [sp, #68]	; 0x44
1000af9e:	4be3      	ldr	r3, [pc, #908]	; (1000b32c <_Z8FindDemov+0x78c>)
	const u8* s = &BrickTemp[brick*BRICKTEMPSIZE];
1000afa0:	9010      	str	r0, [sp, #64]	; 0x40
1000afa2:	781b      	ldrb	r3, [r3, #0]
1000afa4:	b25b      	sxtb	r3, r3
1000afa6:	469a      	mov	sl, r3
			b = *s++;
1000afa8:	4bde      	ldr	r3, [pc, #888]	; (1000b324 <_Z8FindDemov+0x784>)
1000afaa:	5c1b      	ldrb	r3, [r3, r0]
1000afac:	4699      	mov	r9, r3
				if ((y < 1) || (y >= MAPH-1))
1000afae:	b2cb      	uxtb	r3, r1
1000afb0:	001d      	movs	r5, r3
1000afb2:	3b01      	subs	r3, #1
1000afb4:	b2db      	uxtb	r3, r3
1000afb6:	469b      	mov	fp, r3
		y++;
1000afb8:	002b      	movs	r3, r5
1000afba:	3301      	adds	r3, #1
1000afbc:	b2db      	uxtb	r3, r3
1000afbe:	9301      	str	r3, [sp, #4]
			b = *s++;
1000afc0:	7923      	ldrb	r3, [r4, #4]
		y++;
1000afc2:	1ca9      	adds	r1, r5, #2
			b = *s++;
1000afc4:	9303      	str	r3, [sp, #12]
		y++;
1000afc6:	b2cb      	uxtb	r3, r1
1000afc8:	4698      	mov	r8, r3
			b = *s++;
1000afca:	7a23      	ldrb	r3, [r4, #8]
1000afcc:	9302      	str	r3, [sp, #8]
1000afce:	7b23      	ldrb	r3, [r4, #12]
1000afd0:	9304      	str	r3, [sp, #16]
1000afd2:	7ba3      	ldrb	r3, [r4, #14]
1000afd4:	9309      	str	r3, [sp, #36]	; 0x24
1000afd6:	464b      	mov	r3, r9
1000afd8:	425a      	negs	r2, r3
1000afda:	415a      	adcs	r2, r3
1000afdc:	78a3      	ldrb	r3, [r4, #2]
1000afde:	4657      	mov	r7, sl
1000afe0:	930b      	str	r3, [sp, #44]	; 0x2c
1000afe2:	7963      	ldrb	r3, [r4, #5]
1000afe4:	002e      	movs	r6, r5
1000afe6:	9308      	str	r3, [sp, #32]
1000afe8:	79a3      	ldrb	r3, [r4, #6]
1000afea:	9218      	str	r2, [sp, #96]	; 0x60
1000afec:	930a      	str	r3, [sp, #40]	; 0x28
1000afee:	7a63      	ldrb	r3, [r4, #9]
1000aff0:	9307      	str	r3, [sp, #28]
1000aff2:	7aa3      	ldrb	r3, [r4, #10]
1000aff4:	9306      	str	r3, [sp, #24]
1000aff6:	7b63      	ldrb	r3, [r4, #13]
1000aff8:	930c      	str	r3, [sp, #48]	; 0x30
1000affa:	7863      	ldrb	r3, [r4, #1]
1000affc:	9305      	str	r3, [sp, #20]
1000affe:	2300      	movs	r3, #0
1000b000:	9312      	str	r3, [sp, #72]	; 0x48
1000b002:	78e3      	ldrb	r3, [r4, #3]
1000b004:	9314      	str	r3, [sp, #80]	; 0x50
			if (b != 0)
1000b006:	4648      	mov	r0, r9
	u8* d = &Board[x + y*MAPW];
1000b008:	9b11      	ldr	r3, [sp, #68]	; 0x44
1000b00a:	1e7a      	subs	r2, r7, #1
1000b00c:	49c8      	ldr	r1, [pc, #800]	; (1000b330 <_Z8FindDemov+0x790>)
1000b00e:	b252      	sxtb	r2, r2
1000b010:	18d3      	adds	r3, r2, r3
1000b012:	18c9      	adds	r1, r1, r3
			if (b != 0)
1000b014:	2800      	cmp	r0, #0
1000b016:	d101      	bne.n	1000b01c <_Z8FindDemov+0x47c>
1000b018:	f000 fcf2 	bl	1000ba00 <_Z8FindDemov+0xe60>
				if ((y < 1) || (y >= MAPH-1))
1000b01c:	4658      	mov	r0, fp
1000b01e:	2811      	cmp	r0, #17
1000b020:	d901      	bls.n	1000b026 <_Z8FindDemov+0x486>
1000b022:	f000 fd0c 	bl	1000ba3e <_Z8FindDemov+0xe9e>
					if (*d != TILE_EMPTY) ok = False;
1000b026:	48c2      	ldr	r0, [pc, #776]	; (1000b330 <_Z8FindDemov+0x790>)
1000b028:	5cc3      	ldrb	r3, [r0, r3]
1000b02a:	3b08      	subs	r3, #8
1000b02c:	4258      	negs	r0, r3
1000b02e:	4143      	adcs	r3, r0
			if (b != 0)
1000b030:	9805      	ldr	r0, [sp, #20]
	Bool ok = True;
1000b032:	b2db      	uxtb	r3, r3
			if (b != 0)
1000b034:	2800      	cmp	r0, #0
1000b036:	d001      	beq.n	1000b03c <_Z8FindDemov+0x49c>
1000b038:	f000 fce9 	bl	1000ba0e <_Z8FindDemov+0xe6e>
1000b03c:	980b      	ldr	r0, [sp, #44]	; 0x2c
1000b03e:	2800      	cmp	r0, #0
1000b040:	d001      	beq.n	1000b046 <_Z8FindDemov+0x4a6>
1000b042:	f000 fcee 	bl	1000ba22 <_Z8FindDemov+0xe82>
1000b046:	9814      	ldr	r0, [sp, #80]	; 0x50
1000b048:	2800      	cmp	r0, #0
1000b04a:	d006      	beq.n	1000b05a <_Z8FindDemov+0x4ba>
					if (*d != TILE_EMPTY) ok = False;
1000b04c:	78c8      	ldrb	r0, [r1, #3]
					ok = False;
1000b04e:	3808      	subs	r0, #8
1000b050:	0005      	movs	r5, r0
1000b052:	4268      	negs	r0, r5
1000b054:	4168      	adcs	r0, r5
1000b056:	4240      	negs	r0, r0
1000b058:	4003      	ands	r3, r0
			if (b != 0)
1000b05a:	9803      	ldr	r0, [sp, #12]
1000b05c:	2800      	cmp	r0, #0
1000b05e:	d101      	bne.n	1000b064 <_Z8FindDemov+0x4c4>
1000b060:	f000 fcb0 	bl	1000b9c4 <_Z8FindDemov+0xe24>
				if ((y < 1) || (y >= MAPH-1))
1000b064:	2e11      	cmp	r6, #17
1000b066:	d901      	bls.n	1000b06c <_Z8FindDemov+0x4cc>
1000b068:	f000 fcfa 	bl	1000ba60 <_Z8FindDemov+0xec0>
					if (*d != TILE_EMPTY) ok = False;
1000b06c:	7ec8      	ldrb	r0, [r1, #27]
1000b06e:	3808      	subs	r0, #8
1000b070:	0005      	movs	r5, r0
1000b072:	4268      	negs	r0, r5
1000b074:	4168      	adcs	r0, r5
1000b076:	4240      	negs	r0, r0
1000b078:	4003      	ands	r3, r0
			if (b != 0)
1000b07a:	9808      	ldr	r0, [sp, #32]
1000b07c:	2800      	cmp	r0, #0
1000b07e:	d001      	beq.n	1000b084 <_Z8FindDemov+0x4e4>
1000b080:	f000 fca6 	bl	1000b9d0 <_Z8FindDemov+0xe30>
1000b084:	980a      	ldr	r0, [sp, #40]	; 0x28
1000b086:	2800      	cmp	r0, #0
1000b088:	d001      	beq.n	1000b08e <_Z8FindDemov+0x4ee>
1000b08a:	f000 fcab 	bl	1000b9e4 <_Z8FindDemov+0xe44>
1000b08e:	79e0      	ldrb	r0, [r4, #7]
1000b090:	2800      	cmp	r0, #0
1000b092:	d006      	beq.n	1000b0a2 <_Z8FindDemov+0x502>
					if (*d != TILE_EMPTY) ok = False;
1000b094:	7f88      	ldrb	r0, [r1, #30]
					ok = False;
1000b096:	3808      	subs	r0, #8
1000b098:	0005      	movs	r5, r0
1000b09a:	4268      	negs	r0, r5
1000b09c:	4168      	adcs	r0, r5
1000b09e:	4240      	negs	r0, r0
1000b0a0:	4003      	ands	r3, r0
			if (b != 0)
1000b0a2:	9802      	ldr	r0, [sp, #8]
1000b0a4:	2800      	cmp	r0, #0
1000b0a6:	d101      	bne.n	1000b0ac <_Z8FindDemov+0x50c>
1000b0a8:	f000 fc6b 	bl	1000b982 <_Z8FindDemov+0xde2>
				if ((y < 1) || (y >= MAPH-1))
1000b0ac:	9801      	ldr	r0, [sp, #4]
1000b0ae:	2811      	cmp	r0, #17
1000b0b0:	d901      	bls.n	1000b0b6 <_Z8FindDemov+0x516>
1000b0b2:	f000 fce7 	bl	1000ba84 <_Z8FindDemov+0xee4>
					if (*d != TILE_EMPTY) ok = False;
1000b0b6:	2036      	movs	r0, #54	; 0x36
1000b0b8:	5c08      	ldrb	r0, [r1, r0]
1000b0ba:	3808      	subs	r0, #8
1000b0bc:	0005      	movs	r5, r0
1000b0be:	4268      	negs	r0, r5
1000b0c0:	4168      	adcs	r0, r5
1000b0c2:	4240      	negs	r0, r0
1000b0c4:	4003      	ands	r3, r0
			if (b != 0)
1000b0c6:	9807      	ldr	r0, [sp, #28]
1000b0c8:	2800      	cmp	r0, #0
1000b0ca:	d001      	beq.n	1000b0d0 <_Z8FindDemov+0x530>
1000b0cc:	f000 fc60 	bl	1000b990 <_Z8FindDemov+0xdf0>
1000b0d0:	9806      	ldr	r0, [sp, #24]
1000b0d2:	2800      	cmp	r0, #0
1000b0d4:	d001      	beq.n	1000b0da <_Z8FindDemov+0x53a>
1000b0d6:	f000 fc66 	bl	1000b9a6 <_Z8FindDemov+0xe06>
1000b0da:	7ae0      	ldrb	r0, [r4, #11]
1000b0dc:	2800      	cmp	r0, #0
1000b0de:	d007      	beq.n	1000b0f0 <_Z8FindDemov+0x550>
					if (*d != TILE_EMPTY) ok = False;
1000b0e0:	2039      	movs	r0, #57	; 0x39
1000b0e2:	5c08      	ldrb	r0, [r1, r0]
					ok = False;
1000b0e4:	3808      	subs	r0, #8
1000b0e6:	0005      	movs	r5, r0
1000b0e8:	4268      	negs	r0, r5
1000b0ea:	4168      	adcs	r0, r5
1000b0ec:	4240      	negs	r0, r0
1000b0ee:	4003      	ands	r3, r0
			if (b != 0)
1000b0f0:	9804      	ldr	r0, [sp, #16]
1000b0f2:	2800      	cmp	r0, #0
1000b0f4:	d101      	bne.n	1000b0fa <_Z8FindDemov+0x55a>
1000b0f6:	f000 fc1f 	bl	1000b938 <_Z8FindDemov+0xd98>
				if ((y < 1) || (y >= MAPH-1))
1000b0fa:	4640      	mov	r0, r8
1000b0fc:	2811      	cmp	r0, #17
1000b0fe:	d901      	bls.n	1000b104 <_Z8FindDemov+0x564>
1000b100:	f000 fc34 	bl	1000b96c <_Z8FindDemov+0xdcc>
					if (*d != TILE_EMPTY) ok = False;
1000b104:	2051      	movs	r0, #81	; 0x51
1000b106:	5c08      	ldrb	r0, [r1, r0]
1000b108:	3808      	subs	r0, #8
1000b10a:	0005      	movs	r5, r0
1000b10c:	4268      	negs	r0, r5
1000b10e:	4168      	adcs	r0, r5
1000b110:	4240      	negs	r0, r0
1000b112:	4003      	ands	r3, r0
			if (b != 0)
1000b114:	980c      	ldr	r0, [sp, #48]	; 0x30
1000b116:	2800      	cmp	r0, #0
1000b118:	d001      	beq.n	1000b11e <_Z8FindDemov+0x57e>
1000b11a:	f000 fc16 	bl	1000b94a <_Z8FindDemov+0xdaa>
1000b11e:	9809      	ldr	r0, [sp, #36]	; 0x24
1000b120:	2800      	cmp	r0, #0
1000b122:	d001      	beq.n	1000b128 <_Z8FindDemov+0x588>
1000b124:	f000 fc1c 	bl	1000b960 <_Z8FindDemov+0xdc0>
1000b128:	7be0      	ldrb	r0, [r4, #15]
1000b12a:	2800      	cmp	r0, #0
1000b12c:	d101      	bne.n	1000b132 <_Z8FindDemov+0x592>
1000b12e:	f000 fd2b 	bl	1000bb88 <_Z8FindDemov+0xfe8>
					if (*d != TILE_EMPTY) ok = False;
1000b132:	2054      	movs	r0, #84	; 0x54
1000b134:	5c09      	ldrb	r1, [r1, r0]
1000b136:	2908      	cmp	r1, #8
1000b138:	d101      	bne.n	1000b13e <_Z8FindDemov+0x59e>
1000b13a:	f000 fd25 	bl	1000bb88 <_Z8FindDemov+0xfe8>
1000b13e:	9b12      	ldr	r3, [sp, #72]	; 0x48
1000b140:	2b00      	cmp	r3, #0
1000b142:	d002      	beq.n	1000b14a <_Z8FindDemov+0x5aa>
		while (CheckBrick(BrickX-1, BrickY, Brick)) BrickX--;
1000b144:	46ba      	mov	sl, r7
1000b146:	4b79      	ldr	r3, [pc, #484]	; (1000b32c <_Z8FindDemov+0x78c>)
1000b148:	701f      	strb	r7, [r3, #0]
inline u8 RandU8() { return Rand.U8(); }
1000b14a:	4657      	mov	r7, sl
		// loop all positions
		while (True)
		{
			// save current state
			savex = BrickX;
			savey = BrickY;
1000b14c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
			savebrick = Brick;
1000b14e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
	const u8* s = &BrickTemp[brick*BRICKTEMPSIZE];
1000b150:	4698      	mov	r8, r3
			savey = BrickY;
1000b152:	9312      	str	r3, [sp, #72]	; 0x48
	const u8* s = &BrickTemp[brick*BRICKTEMPSIZE];
1000b154:	2300      	movs	r3, #0
			savebrick = Brick;
1000b156:	9214      	str	r2, [sp, #80]	; 0x50
	const u8* s = &BrickTemp[brick*BRICKTEMPSIZE];
1000b158:	9a10      	ldr	r2, [sp, #64]	; 0x40
1000b15a:	469a      	mov	sl, r3
1000b15c:	4694      	mov	ip, r2
1000b15e:	4644      	mov	r4, r8
1000b160:	4e70      	ldr	r6, [pc, #448]	; (1000b324 <_Z8FindDemov+0x784>)
			savex = BrickX;
1000b162:	9711      	str	r7, [sp, #68]	; 0x44
	const u8* s = &BrickTemp[brick*BRICKTEMPSIZE];
1000b164:	4466      	add	r6, ip
1000b166:	9701      	str	r7, [sp, #4]

			// move down
			while (CheckBrick(BrickX, BrickY+1, Brick)) BrickY++;
1000b168:	b2e1      	uxtb	r1, r4
1000b16a:	1c4a      	adds	r2, r1, #1
1000b16c:	b2d0      	uxtb	r0, r2
1000b16e:	b252      	sxtb	r2, r2
	u8* d = &Board[x + y*MAPW];
1000b170:	0053      	lsls	r3, r2, #1
1000b172:	189b      	adds	r3, r3, r2
1000b174:	00df      	lsls	r7, r3, #3
1000b176:	46bc      	mov	ip, r7
1000b178:	9d01      	ldr	r5, [sp, #4]
1000b17a:	4463      	add	r3, ip
1000b17c:	46ac      	mov	ip, r5
1000b17e:	4d6c      	ldr	r5, [pc, #432]	; (1000b330 <_Z8FindDemov+0x790>)
1000b180:	4463      	add	r3, ip
1000b182:	18ef      	adds	r7, r5, r3
1000b184:	46bc      	mov	ip, r7
			if (b != 0)
1000b186:	464f      	mov	r7, r9
1000b188:	2f00      	cmp	r7, #0
1000b18a:	d100      	bne.n	1000b18e <_Z8FindDemov+0x5ee>
1000b18c:	e2a8      	b.n	1000b6e0 <_Z8FindDemov+0xb40>
				if ((y < 1) || (y >= MAPH-1))
1000b18e:	2911      	cmp	r1, #17
1000b190:	d900      	bls.n	1000b194 <_Z8FindDemov+0x5f4>
1000b192:	e30a      	b.n	1000b7aa <_Z8FindDemov+0xc0a>
					if (*d != TILE_EMPTY) ok = False;
1000b194:	5ceb      	ldrb	r3, [r5, r3]
1000b196:	3b08      	subs	r3, #8
1000b198:	001f      	movs	r7, r3
1000b19a:	427b      	negs	r3, r7
1000b19c:	417b      	adcs	r3, r7
			if (b != 0)
1000b19e:	9f05      	ldr	r7, [sp, #20]
	Bool ok = True;
1000b1a0:	b2db      	uxtb	r3, r3
			if (b != 0)
1000b1a2:	2f00      	cmp	r7, #0
1000b1a4:	d000      	beq.n	1000b1a8 <_Z8FindDemov+0x608>
1000b1a6:	e2a1      	b.n	1000b6ec <_Z8FindDemov+0xb4c>
1000b1a8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
1000b1aa:	2d00      	cmp	r5, #0
1000b1ac:	d000      	beq.n	1000b1b0 <_Z8FindDemov+0x610>
1000b1ae:	e2ac      	b.n	1000b70a <_Z8FindDemov+0xb6a>
1000b1b0:	78f5      	ldrb	r5, [r6, #3]
1000b1b2:	2d00      	cmp	r5, #0
1000b1b4:	d00b      	beq.n	1000b1ce <_Z8FindDemov+0x62e>
					if (*d != TILE_EMPTY) ok = False;
1000b1b6:	4665      	mov	r5, ip
1000b1b8:	78ed      	ldrb	r5, [r5, #3]
1000b1ba:	46a8      	mov	r8, r5
					ok = False;
1000b1bc:	2508      	movs	r5, #8
1000b1be:	426d      	negs	r5, r5
1000b1c0:	46ab      	mov	fp, r5
1000b1c2:	44d8      	add	r8, fp
1000b1c4:	4647      	mov	r7, r8
1000b1c6:	427d      	negs	r5, r7
1000b1c8:	417d      	adcs	r5, r7
1000b1ca:	426d      	negs	r5, r5
1000b1cc:	402b      	ands	r3, r5
			if (b != 0)
1000b1ce:	9f03      	ldr	r7, [sp, #12]
1000b1d0:	2f00      	cmp	r7, #0
1000b1d2:	d100      	bne.n	1000b1d6 <_Z8FindDemov+0x636>
1000b1d4:	e213      	b.n	1000b5fe <_Z8FindDemov+0xa5e>
				if ((y < 1) || (y >= MAPH-1))
1000b1d6:	2811      	cmp	r0, #17
1000b1d8:	d900      	bls.n	1000b1dc <_Z8FindDemov+0x63c>
1000b1da:	e2cb      	b.n	1000b774 <_Z8FindDemov+0xbd4>
					if (*d != TILE_EMPTY) ok = False;
1000b1dc:	4665      	mov	r5, ip
1000b1de:	7eed      	ldrb	r5, [r5, #27]
1000b1e0:	46a8      	mov	r8, r5
1000b1e2:	2508      	movs	r5, #8
1000b1e4:	426d      	negs	r5, r5
1000b1e6:	46ab      	mov	fp, r5
1000b1e8:	44d8      	add	r8, fp
1000b1ea:	4647      	mov	r7, r8
1000b1ec:	427d      	negs	r5, r7
1000b1ee:	417d      	adcs	r5, r7
1000b1f0:	426d      	negs	r5, r5
1000b1f2:	402b      	ands	r3, r5
			if (b != 0)
1000b1f4:	9d08      	ldr	r5, [sp, #32]
1000b1f6:	2d00      	cmp	r5, #0
1000b1f8:	d000      	beq.n	1000b1fc <_Z8FindDemov+0x65c>
1000b1fa:	e207      	b.n	1000b60c <_Z8FindDemov+0xa6c>
1000b1fc:	980a      	ldr	r0, [sp, #40]	; 0x28
1000b1fe:	2800      	cmp	r0, #0
1000b200:	d000      	beq.n	1000b204 <_Z8FindDemov+0x664>
1000b202:	e213      	b.n	1000b62c <_Z8FindDemov+0xa8c>
1000b204:	79f0      	ldrb	r0, [r6, #7]
1000b206:	2800      	cmp	r0, #0
1000b208:	d007      	beq.n	1000b21a <_Z8FindDemov+0x67a>
					if (*d != TILE_EMPTY) ok = False;
1000b20a:	4660      	mov	r0, ip
1000b20c:	7f80      	ldrb	r0, [r0, #30]
					ok = False;
1000b20e:	3808      	subs	r0, #8
1000b210:	0005      	movs	r5, r0
1000b212:	4268      	negs	r0, r5
1000b214:	4168      	adcs	r0, r5
1000b216:	4240      	negs	r0, r0
1000b218:	4003      	ands	r3, r0
			if (b != 0)
1000b21a:	9802      	ldr	r0, [sp, #8]
1000b21c:	2800      	cmp	r0, #0
1000b21e:	d100      	bne.n	1000b222 <_Z8FindDemov+0x682>
1000b220:	e214      	b.n	1000b64c <_Z8FindDemov+0xaac>
				if ((y < 1) || (y >= MAPH-1))
1000b222:	1c88      	adds	r0, r1, #2
1000b224:	b2c0      	uxtb	r0, r0
1000b226:	2811      	cmp	r0, #17
1000b228:	d900      	bls.n	1000b22c <_Z8FindDemov+0x68c>
1000b22a:	e27f      	b.n	1000b72c <_Z8FindDemov+0xb8c>
					if (*d != TILE_EMPTY) ok = False;
1000b22c:	2536      	movs	r5, #54	; 0x36
1000b22e:	4660      	mov	r0, ip
1000b230:	5d40      	ldrb	r0, [r0, r5]
1000b232:	3808      	subs	r0, #8
1000b234:	0005      	movs	r5, r0
1000b236:	4268      	negs	r0, r5
1000b238:	4168      	adcs	r0, r5
1000b23a:	4240      	negs	r0, r0
1000b23c:	4003      	ands	r3, r0
			if (b != 0)
1000b23e:	9807      	ldr	r0, [sp, #28]
1000b240:	2800      	cmp	r0, #0
1000b242:	d000      	beq.n	1000b246 <_Z8FindDemov+0x6a6>
1000b244:	e20a      	b.n	1000b65c <_Z8FindDemov+0xabc>
1000b246:	9806      	ldr	r0, [sp, #24]
1000b248:	2800      	cmp	r0, #0
1000b24a:	d000      	beq.n	1000b24e <_Z8FindDemov+0x6ae>
1000b24c:	e212      	b.n	1000b674 <_Z8FindDemov+0xad4>
1000b24e:	7af0      	ldrb	r0, [r6, #11]
1000b250:	2800      	cmp	r0, #0
1000b252:	d008      	beq.n	1000b266 <_Z8FindDemov+0x6c6>
					if (*d != TILE_EMPTY) ok = False;
1000b254:	2539      	movs	r5, #57	; 0x39
1000b256:	4660      	mov	r0, ip
1000b258:	5d40      	ldrb	r0, [r0, r5]
					ok = False;
1000b25a:	3808      	subs	r0, #8
1000b25c:	0005      	movs	r5, r0
1000b25e:	4268      	negs	r0, r5
1000b260:	4168      	adcs	r0, r5
1000b262:	4240      	negs	r0, r0
1000b264:	4003      	ands	r3, r0
			if (b != 0)
1000b266:	9804      	ldr	r0, [sp, #16]
1000b268:	2800      	cmp	r0, #0
1000b26a:	d100      	bne.n	1000b26e <_Z8FindDemov+0x6ce>
1000b26c:	e213      	b.n	1000b696 <_Z8FindDemov+0xaf6>
				if ((y < 1) || (y >= MAPH-1))
1000b26e:	1cc8      	adds	r0, r1, #3
1000b270:	b2c0      	uxtb	r0, r0
1000b272:	2811      	cmp	r0, #17
1000b274:	d81a      	bhi.n	1000b2ac <_Z8FindDemov+0x70c>
					if (*d != TILE_EMPTY) ok = False;
1000b276:	2551      	movs	r5, #81	; 0x51
1000b278:	4660      	mov	r0, ip
1000b27a:	5d40      	ldrb	r0, [r0, r5]
1000b27c:	3808      	subs	r0, #8
1000b27e:	0005      	movs	r5, r0
1000b280:	4268      	negs	r0, r5
1000b282:	4168      	adcs	r0, r5
1000b284:	4240      	negs	r0, r0
1000b286:	4003      	ands	r3, r0
			if (b != 0)
1000b288:	980c      	ldr	r0, [sp, #48]	; 0x30
1000b28a:	2800      	cmp	r0, #0
1000b28c:	d000      	beq.n	1000b290 <_Z8FindDemov+0x6f0>
1000b28e:	e20b      	b.n	1000b6a8 <_Z8FindDemov+0xb08>
1000b290:	9909      	ldr	r1, [sp, #36]	; 0x24
1000b292:	2900      	cmp	r1, #0
1000b294:	d000      	beq.n	1000b298 <_Z8FindDemov+0x6f8>
1000b296:	e212      	b.n	1000b6be <_Z8FindDemov+0xb1e>
1000b298:	7bf1      	ldrb	r1, [r6, #15]
1000b29a:	2900      	cmp	r1, #0
1000b29c:	d100      	bne.n	1000b2a0 <_Z8FindDemov+0x700>
1000b29e:	e218      	b.n	1000b6d2 <_Z8FindDemov+0xb32>
					if (*d != TILE_EMPTY) ok = False;
1000b2a0:	4661      	mov	r1, ip
1000b2a2:	2054      	movs	r0, #84	; 0x54
1000b2a4:	5c09      	ldrb	r1, [r1, r0]
1000b2a6:	2908      	cmp	r1, #8
1000b2a8:	d100      	bne.n	1000b2ac <_Z8FindDemov+0x70c>
1000b2aa:	e212      	b.n	1000b6d2 <_Z8FindDemov+0xb32>
1000b2ac:	4653      	mov	r3, sl
1000b2ae:	46a0      	mov	r8, r4
1000b2b0:	9f01      	ldr	r7, [sp, #4]
1000b2b2:	2b00      	cmp	r3, #0
1000b2b4:	d002      	beq.n	1000b2bc <_Z8FindDemov+0x71c>
1000b2b6:	4642      	mov	r2, r8
1000b2b8:	4b19      	ldr	r3, [pc, #100]	; (1000b320 <_Z8FindDemov+0x780>)
1000b2ba:	701a      	strb	r2, [r3, #0]

			// calculate score
			score = ScoreBrick(BrickX, BrickY, Brick);
1000b2bc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
1000b2be:	4641      	mov	r1, r8
1000b2c0:	0038      	movs	r0, r7
1000b2c2:	f7fc fc01 	bl	10007ac8 <_Z10ScoreBrickaah>

			// restore state
			Brick = savebrick;
			BrickX = savex;
			BrickY = savey;
1000b2c6:	4b16      	ldr	r3, [pc, #88]	; (1000b320 <_Z8FindDemov+0x780>)
1000b2c8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
1000b2ca:	701a      	strb	r2, [r3, #0]

			// found better score
			if ((score > bestscore) || ((score == bestscore) && (RandU8() < 0x50)))
1000b2cc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
1000b2ce:	4283      	cmp	r3, r0
1000b2d0:	da00      	bge.n	1000b2d4 <_Z8FindDemov+0x734>
1000b2d2:	e32a      	b.n	1000b92a <_Z8FindDemov+0xd8a>
1000b2d4:	d101      	bne.n	1000b2da <_Z8FindDemov+0x73a>
1000b2d6:	f000 fc7b 	bl	1000bbd0 <_Z8FindDemov+0x1030>
	u8* d = &Board[x + y*MAPW];
1000b2da:	980d      	ldr	r0, [sp, #52]	; 0x34
				besty = savey;
				bestbrick = savebrick;
			}

			// increment X position
			if (!CheckBrick(BrickX+1, BrickY, Brick)) break;
1000b2dc:	1c7b      	adds	r3, r7, #1
	u8* d = &Board[x + y*MAPW];
1000b2de:	4680      	mov	r8, r0
			if (!CheckBrick(BrickX+1, BrickY, Brick)) break;
1000b2e0:	b25b      	sxtb	r3, r3
1000b2e2:	469c      	mov	ip, r3
	u8* d = &Board[x + y*MAPW];
1000b2e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1000b2e6:	4443      	add	r3, r8
1000b2e8:	00da      	lsls	r2, r3, #3
1000b2ea:	189b      	adds	r3, r3, r2
1000b2ec:	4a10      	ldr	r2, [pc, #64]	; (1000b330 <_Z8FindDemov+0x790>)
1000b2ee:	4463      	add	r3, ip
1000b2f0:	18d1      	adds	r1, r2, r3
			if (b != 0)
1000b2f2:	464a      	mov	r2, r9
1000b2f4:	2a00      	cmp	r2, #0
1000b2f6:	d100      	bne.n	1000b2fa <_Z8FindDemov+0x75a>
1000b2f8:	e28a      	b.n	1000b810 <_Z8FindDemov+0xc70>
				if ((y < 1) || (y >= MAPH-1))
1000b2fa:	b2c2      	uxtb	r2, r0
1000b2fc:	1e50      	subs	r0, r2, #1
1000b2fe:	2811      	cmp	r0, #17
1000b300:	d901      	bls.n	1000b306 <_Z8FindDemov+0x766>
1000b302:	f000 fc36 	bl	1000bb72 <_Z8FindDemov+0xfd2>
					if (*d != TILE_EMPTY) ok = False;
1000b306:	480a      	ldr	r0, [pc, #40]	; (1000b330 <_Z8FindDemov+0x790>)
1000b308:	5cc3      	ldrb	r3, [r0, r3]
1000b30a:	3b08      	subs	r3, #8
1000b30c:	4258      	negs	r0, r3
1000b30e:	4143      	adcs	r3, r0
			if (b != 0)
1000b310:	9805      	ldr	r0, [sp, #20]
	Bool ok = True;
1000b312:	b2db      	uxtb	r3, r3
			if (b != 0)
1000b314:	2800      	cmp	r0, #0
1000b316:	d001      	beq.n	1000b31c <_Z8FindDemov+0x77c>
1000b318:	f000 fc1f 	bl	1000bb5a <_Z8FindDemov+0xfba>
1000b31c:	e00a      	b.n	1000b334 <_Z8FindDemov+0x794>
1000b31e:	46c0      	nop			; (mov r8, r8)
1000b320:	20012766 	.word	0x20012766
1000b324:	10010bd4 	.word	0x10010bd4
1000b328:	20012764 	.word	0x20012764
1000b32c:	20012765 	.word	0x20012765
1000b330:	2000327c 	.word	0x2000327c
1000b334:	980b      	ldr	r0, [sp, #44]	; 0x2c
1000b336:	2800      	cmp	r0, #0
1000b338:	d100      	bne.n	1000b33c <_Z8FindDemov+0x79c>
1000b33a:	e27e      	b.n	1000b83a <_Z8FindDemov+0xc9a>
					if (*d != TILE_EMPTY) ok = False;
1000b33c:	7888      	ldrb	r0, [r1, #2]
1000b33e:	3808      	subs	r0, #8
1000b340:	4244      	negs	r4, r0
1000b342:	4160      	adcs	r0, r4
1000b344:	4240      	negs	r0, r0
1000b346:	4003      	ands	r3, r0
			if (b != 0)
1000b348:	78f0      	ldrb	r0, [r6, #3]
1000b34a:	2800      	cmp	r0, #0
1000b34c:	d005      	beq.n	1000b35a <_Z8FindDemov+0x7ba>
					if (*d != TILE_EMPTY) ok = False;
1000b34e:	78c8      	ldrb	r0, [r1, #3]
1000b350:	3808      	subs	r0, #8
1000b352:	4244      	negs	r4, r0
1000b354:	4160      	adcs	r0, r4
1000b356:	4240      	negs	r0, r0
1000b358:	4003      	ands	r3, r0
		y++;
1000b35a:	1c50      	adds	r0, r2, #1
1000b35c:	b2c0      	uxtb	r0, r0
1000b35e:	4682      	mov	sl, r0
			if (b != 0)
1000b360:	9803      	ldr	r0, [sp, #12]
1000b362:	2800      	cmp	r0, #0
1000b364:	d100      	bne.n	1000b368 <_Z8FindDemov+0x7c8>
1000b366:	e278      	b.n	1000b85a <_Z8FindDemov+0xcba>
				if ((y < 1) || (y >= MAPH-1))
1000b368:	2a11      	cmp	r2, #17
1000b36a:	d900      	bls.n	1000b36e <_Z8FindDemov+0x7ce>
1000b36c:	e3b6      	b.n	1000badc <_Z8FindDemov+0xf3c>
					if (*d != TILE_EMPTY) ok = False;
1000b36e:	7ec8      	ldrb	r0, [r1, #27]
1000b370:	3808      	subs	r0, #8
1000b372:	4244      	negs	r4, r0
1000b374:	4160      	adcs	r0, r4
1000b376:	4240      	negs	r0, r0
1000b378:	4003      	ands	r3, r0
			if (b != 0)
1000b37a:	9808      	ldr	r0, [sp, #32]
1000b37c:	2800      	cmp	r0, #0
1000b37e:	d000      	beq.n	1000b382 <_Z8FindDemov+0x7e2>
1000b380:	e272      	b.n	1000b868 <_Z8FindDemov+0xcc8>
1000b382:	980a      	ldr	r0, [sp, #40]	; 0x28
1000b384:	2800      	cmp	r0, #0
1000b386:	d000      	beq.n	1000b38a <_Z8FindDemov+0x7ea>
1000b388:	e278      	b.n	1000b87c <_Z8FindDemov+0xcdc>
1000b38a:	79f0      	ldrb	r0, [r6, #7]
1000b38c:	2800      	cmp	r0, #0
1000b38e:	d005      	beq.n	1000b39c <_Z8FindDemov+0x7fc>
					if (*d != TILE_EMPTY) ok = False;
1000b390:	7f88      	ldrb	r0, [r1, #30]
					ok = False;
1000b392:	3808      	subs	r0, #8
1000b394:	4244      	negs	r4, r0
1000b396:	4160      	adcs	r0, r4
1000b398:	4240      	negs	r0, r0
1000b39a:	4003      	ands	r3, r0
		y++;
1000b39c:	1c90      	adds	r0, r2, #2
1000b39e:	b2c0      	uxtb	r0, r0
1000b3a0:	4680      	mov	r8, r0
			if (b != 0)
1000b3a2:	9802      	ldr	r0, [sp, #8]
1000b3a4:	2800      	cmp	r0, #0
1000b3a6:	d100      	bne.n	1000b3aa <_Z8FindDemov+0x80a>
1000b3a8:	e279      	b.n	1000b89e <_Z8FindDemov+0xcfe>
				if ((y < 1) || (y >= MAPH-1))
1000b3aa:	4650      	mov	r0, sl
1000b3ac:	2811      	cmp	r0, #17
1000b3ae:	d900      	bls.n	1000b3b2 <_Z8FindDemov+0x812>
1000b3b0:	e37b      	b.n	1000baaa <_Z8FindDemov+0xf0a>
					if (*d != TILE_EMPTY) ok = False;
1000b3b2:	2036      	movs	r0, #54	; 0x36
1000b3b4:	5c08      	ldrb	r0, [r1, r0]
1000b3b6:	3808      	subs	r0, #8
1000b3b8:	4244      	negs	r4, r0
1000b3ba:	4160      	adcs	r0, r4
1000b3bc:	4240      	negs	r0, r0
1000b3be:	4003      	ands	r3, r0
			if (b != 0)
1000b3c0:	9807      	ldr	r0, [sp, #28]
1000b3c2:	2800      	cmp	r0, #0
1000b3c4:	d000      	beq.n	1000b3c8 <_Z8FindDemov+0x828>
1000b3c6:	e272      	b.n	1000b8ae <_Z8FindDemov+0xd0e>
1000b3c8:	9806      	ldr	r0, [sp, #24]
1000b3ca:	2800      	cmp	r0, #0
1000b3cc:	d000      	beq.n	1000b3d0 <_Z8FindDemov+0x830>
1000b3ce:	e279      	b.n	1000b8c4 <_Z8FindDemov+0xd24>
1000b3d0:	7af0      	ldrb	r0, [r6, #11]
1000b3d2:	2800      	cmp	r0, #0
1000b3d4:	d006      	beq.n	1000b3e4 <_Z8FindDemov+0x844>
					if (*d != TILE_EMPTY) ok = False;
1000b3d6:	2039      	movs	r0, #57	; 0x39
1000b3d8:	5c08      	ldrb	r0, [r1, r0]
					ok = False;
1000b3da:	3808      	subs	r0, #8
1000b3dc:	4244      	negs	r4, r0
1000b3de:	4160      	adcs	r0, r4
1000b3e0:	4240      	negs	r0, r0
1000b3e2:	4003      	ands	r3, r0
			if (b != 0)
1000b3e4:	9804      	ldr	r0, [sp, #16]
1000b3e6:	2800      	cmp	r0, #0
1000b3e8:	d100      	bne.n	1000b3ec <_Z8FindDemov+0x84c>
1000b3ea:	e27a      	b.n	1000b8e2 <_Z8FindDemov+0xd42>
				if ((y < 1) || (y >= MAPH-1))
1000b3ec:	4640      	mov	r0, r8
1000b3ee:	2811      	cmp	r0, #17
1000b3f0:	d817      	bhi.n	1000b422 <_Z8FindDemov+0x882>
					if (*d != TILE_EMPTY) ok = False;
1000b3f2:	2051      	movs	r0, #81	; 0x51
1000b3f4:	5c08      	ldrb	r0, [r1, r0]
1000b3f6:	3808      	subs	r0, #8
1000b3f8:	4244      	negs	r4, r0
1000b3fa:	4160      	adcs	r0, r4
1000b3fc:	4240      	negs	r0, r0
1000b3fe:	4003      	ands	r3, r0
			if (b != 0)
1000b400:	980c      	ldr	r0, [sp, #48]	; 0x30
1000b402:	2800      	cmp	r0, #0
1000b404:	d000      	beq.n	1000b408 <_Z8FindDemov+0x868>
1000b406:	e274      	b.n	1000b8f2 <_Z8FindDemov+0xd52>
1000b408:	9809      	ldr	r0, [sp, #36]	; 0x24
1000b40a:	2800      	cmp	r0, #0
1000b40c:	d000      	beq.n	1000b410 <_Z8FindDemov+0x870>
1000b40e:	e27a      	b.n	1000b906 <_Z8FindDemov+0xd66>
1000b410:	7bf0      	ldrb	r0, [r6, #15]
1000b412:	2800      	cmp	r0, #0
1000b414:	d100      	bne.n	1000b418 <_Z8FindDemov+0x878>
1000b416:	e27f      	b.n	1000b918 <_Z8FindDemov+0xd78>
					if (*d != TILE_EMPTY) ok = False;
1000b418:	2054      	movs	r0, #84	; 0x54
1000b41a:	5c09      	ldrb	r1, [r1, r0]
1000b41c:	2908      	cmp	r1, #8
1000b41e:	d100      	bne.n	1000b422 <_Z8FindDemov+0x882>
1000b420:	e27a      	b.n	1000b918 <_Z8FindDemov+0xd78>
	for (rot = 4; rot > 0; rot--)
1000b422:	9b19      	ldr	r3, [sp, #100]	; 0x64
1000b424:	46ba      	mov	sl, r7
1000b426:	3b01      	subs	r3, #1
1000b428:	4693      	mov	fp, r2
1000b42a:	9319      	str	r3, [sp, #100]	; 0x64
1000b42c:	2b00      	cmp	r3, #0
1000b42e:	d000      	beq.n	1000b432 <_Z8FindDemov+0x892>
1000b430:	e43b      	b.n	1000acaa <_Z8FindDemov+0x10a>
		}
	}

	// display brick on new best position
	BrickX = bestx;
	BrickY = besty;
1000b432:	9816      	ldr	r0, [sp, #88]	; 0x58
	BrickX = bestx;
1000b434:	4bca      	ldr	r3, [pc, #808]	; (1000b760 <_Z8FindDemov+0xbc0>)
	u8* d = &Board[x + y*MAPW];
1000b436:	4684      	mov	ip, r0
	BrickX = bestx;
1000b438:	9c15      	ldr	r4, [sp, #84]	; 0x54
	BrickY = besty;
1000b43a:	4aca      	ldr	r2, [pc, #808]	; (1000b764 <_Z8FindDemov+0xbc4>)
	BrickX = bestx;
1000b43c:	701c      	strb	r4, [r3, #0]
	u8* d = &Board[x + y*MAPW];
1000b43e:	0043      	lsls	r3, r0, #1
1000b440:	4463      	add	r3, ip
1000b442:	46a4      	mov	ip, r4
	BrickY = besty;
1000b444:	7010      	strb	r0, [r2, #0]
	u8* d = &Board[x + y*MAPW];
1000b446:	00d8      	lsls	r0, r3, #3
1000b448:	181b      	adds	r3, r3, r0
1000b44a:	48c7      	ldr	r0, [pc, #796]	; (1000b768 <_Z8FindDemov+0xbc8>)
1000b44c:	4463      	add	r3, ip
1000b44e:	4684      	mov	ip, r0
	Brick = bestbrick;
1000b450:	49c6      	ldr	r1, [pc, #792]	; (1000b76c <_Z8FindDemov+0xbcc>)
1000b452:	9a17      	ldr	r2, [sp, #92]	; 0x5c
			b = *s++;
1000b454:	48c6      	ldr	r0, [pc, #792]	; (1000b770 <_Z8FindDemov+0xbd0>)
	Brick = bestbrick;
1000b456:	700a      	strb	r2, [r1, #0]
	const u8* s = &BrickTemp[brick*BRICKTEMPSIZE];
1000b458:	49c5      	ldr	r1, [pc, #788]	; (1000b770 <_Z8FindDemov+0xbd0>)
1000b45a:	0112      	lsls	r2, r2, #4
1000b45c:	1889      	adds	r1, r1, r2
			b = *s++;
1000b45e:	5c82      	ldrb	r2, [r0, r2]
	u8* d = &Board[x + y*MAPW];
1000b460:	4463      	add	r3, ip
			if (b != 0) *d = b;
1000b462:	2a00      	cmp	r2, #0
1000b464:	d000      	beq.n	1000b468 <_Z8FindDemov+0x8c8>
1000b466:	701a      	strb	r2, [r3, #0]
			b = *s++;
1000b468:	784a      	ldrb	r2, [r1, #1]
			if (b != 0) *d = b;
1000b46a:	2a00      	cmp	r2, #0
1000b46c:	d000      	beq.n	1000b470 <_Z8FindDemov+0x8d0>
1000b46e:	705a      	strb	r2, [r3, #1]
			b = *s++;
1000b470:	788a      	ldrb	r2, [r1, #2]
			if (b != 0) *d = b;
1000b472:	2a00      	cmp	r2, #0
1000b474:	d000      	beq.n	1000b478 <_Z8FindDemov+0x8d8>
1000b476:	709a      	strb	r2, [r3, #2]
			b = *s++;
1000b478:	78ca      	ldrb	r2, [r1, #3]
			if (b != 0) *d = b;
1000b47a:	2a00      	cmp	r2, #0
1000b47c:	d000      	beq.n	1000b480 <_Z8FindDemov+0x8e0>
1000b47e:	70da      	strb	r2, [r3, #3]
			b = *s++;
1000b480:	790a      	ldrb	r2, [r1, #4]
			if (b != 0) *d = b;
1000b482:	2a00      	cmp	r2, #0
1000b484:	d000      	beq.n	1000b488 <_Z8FindDemov+0x8e8>
1000b486:	76da      	strb	r2, [r3, #27]
			b = *s++;
1000b488:	794a      	ldrb	r2, [r1, #5]
			if (b != 0) *d = b;
1000b48a:	2a00      	cmp	r2, #0
1000b48c:	d000      	beq.n	1000b490 <_Z8FindDemov+0x8f0>
1000b48e:	771a      	strb	r2, [r3, #28]
			b = *s++;
1000b490:	798a      	ldrb	r2, [r1, #6]
			if (b != 0) *d = b;
1000b492:	2a00      	cmp	r2, #0
1000b494:	d000      	beq.n	1000b498 <_Z8FindDemov+0x8f8>
1000b496:	775a      	strb	r2, [r3, #29]
			b = *s++;
1000b498:	79ca      	ldrb	r2, [r1, #7]
			if (b != 0) *d = b;
1000b49a:	2a00      	cmp	r2, #0
1000b49c:	d000      	beq.n	1000b4a0 <_Z8FindDemov+0x900>
1000b49e:	779a      	strb	r2, [r3, #30]
			b = *s++;
1000b4a0:	7a0a      	ldrb	r2, [r1, #8]
			if (b != 0) *d = b;
1000b4a2:	2a00      	cmp	r2, #0
1000b4a4:	d001      	beq.n	1000b4aa <_Z8FindDemov+0x90a>
1000b4a6:	2036      	movs	r0, #54	; 0x36
1000b4a8:	541a      	strb	r2, [r3, r0]
			b = *s++;
1000b4aa:	7a4a      	ldrb	r2, [r1, #9]
			if (b != 0) *d = b;
1000b4ac:	2a00      	cmp	r2, #0
1000b4ae:	d001      	beq.n	1000b4b4 <_Z8FindDemov+0x914>
1000b4b0:	2037      	movs	r0, #55	; 0x37
1000b4b2:	541a      	strb	r2, [r3, r0]
			b = *s++;
1000b4b4:	7a8a      	ldrb	r2, [r1, #10]
			if (b != 0) *d = b;
1000b4b6:	2a00      	cmp	r2, #0
1000b4b8:	d001      	beq.n	1000b4be <_Z8FindDemov+0x91e>
1000b4ba:	2038      	movs	r0, #56	; 0x38
1000b4bc:	541a      	strb	r2, [r3, r0]
			b = *s++;
1000b4be:	7aca      	ldrb	r2, [r1, #11]
			if (b != 0) *d = b;
1000b4c0:	2a00      	cmp	r2, #0
1000b4c2:	d001      	beq.n	1000b4c8 <_Z8FindDemov+0x928>
1000b4c4:	2039      	movs	r0, #57	; 0x39
1000b4c6:	541a      	strb	r2, [r3, r0]
			b = *s++;
1000b4c8:	7b0a      	ldrb	r2, [r1, #12]
			if (b != 0) *d = b;
1000b4ca:	2a00      	cmp	r2, #0
1000b4cc:	d001      	beq.n	1000b4d2 <_Z8FindDemov+0x932>
1000b4ce:	2051      	movs	r0, #81	; 0x51
1000b4d0:	541a      	strb	r2, [r3, r0]
			b = *s++;
1000b4d2:	7b4a      	ldrb	r2, [r1, #13]
			if (b != 0) *d = b;
1000b4d4:	2a00      	cmp	r2, #0
1000b4d6:	d001      	beq.n	1000b4dc <_Z8FindDemov+0x93c>
1000b4d8:	2052      	movs	r0, #82	; 0x52
1000b4da:	541a      	strb	r2, [r3, r0]
			b = *s++;
1000b4dc:	7b8a      	ldrb	r2, [r1, #14]
			if (b != 0) *d = b;
1000b4de:	2a00      	cmp	r2, #0
1000b4e0:	d001      	beq.n	1000b4e6 <_Z8FindDemov+0x946>
1000b4e2:	2053      	movs	r0, #83	; 0x53
1000b4e4:	541a      	strb	r2, [r3, r0]
			b = *s++;
1000b4e6:	7bca      	ldrb	r2, [r1, #15]
			if (b != 0) *d = b;
1000b4e8:	2a00      	cmp	r2, #0
1000b4ea:	d001      	beq.n	1000b4f0 <_Z8FindDemov+0x950>
1000b4ec:	2154      	movs	r1, #84	; 0x54
1000b4ee:	545a      	strb	r2, [r3, r1]
	DispBrick(BrickX, BrickY, Brick);
}
1000b4f0:	b01b      	add	sp, #108	; 0x6c
1000b4f2:	bcf0      	pop	{r4, r5, r6, r7}
1000b4f4:	46bb      	mov	fp, r7
1000b4f6:	46b2      	mov	sl, r6
1000b4f8:	46a9      	mov	r9, r5
1000b4fa:	46a0      	mov	r8, r4
1000b4fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	Bool ok = True;
1000b4fe:	2301      	movs	r3, #1
			if (b != 0)
1000b500:	7861      	ldrb	r1, [r4, #1]
1000b502:	2900      	cmp	r1, #0
1000b504:	d006      	beq.n	1000b514 <_Z8FindDemov+0x974>
				if ((y < 1) || (y >= MAPH-1))
1000b506:	4659      	mov	r1, fp
1000b508:	3901      	subs	r1, #1
1000b50a:	2911      	cmp	r1, #17
1000b50c:	d801      	bhi.n	1000b512 <_Z8FindDemov+0x972>
1000b50e:	f000 fbff 	bl	1000bd10 <_Z8FindDemov+0x1170>
					ok = False;
1000b512:	2300      	movs	r3, #0
			if (b != 0)
1000b514:	78a1      	ldrb	r1, [r4, #2]
1000b516:	2900      	cmp	r1, #0
1000b518:	d101      	bne.n	1000b51e <_Z8FindDemov+0x97e>
1000b51a:	f7ff fbf7 	bl	1000ad0c <_Z8FindDemov+0x16c>
				if ((y < 1) || (y >= MAPH-1))
1000b51e:	4659      	mov	r1, fp
1000b520:	3901      	subs	r1, #1
1000b522:	2911      	cmp	r1, #17
1000b524:	d801      	bhi.n	1000b52a <_Z8FindDemov+0x98a>
1000b526:	f000 fbfe 	bl	1000bd26 <_Z8FindDemov+0x1186>
					ok = False;
1000b52a:	2300      	movs	r3, #0
1000b52c:	f7ff fbee 	bl	1000ad0c <_Z8FindDemov+0x16c>
			b = *s++;
1000b530:	7961      	ldrb	r1, [r4, #5]
			if (b != 0)
1000b532:	2900      	cmp	r1, #0
1000b534:	d100      	bne.n	1000b538 <_Z8FindDemov+0x998>
1000b536:	e3e2      	b.n	1000bcfe <_Z8FindDemov+0x115e>
				if ((y < 1) || (y >= MAPH-1))
1000b538:	4659      	mov	r1, fp
1000b53a:	2911      	cmp	r1, #17
1000b53c:	d900      	bls.n	1000b540 <_Z8FindDemov+0x9a0>
1000b53e:	e3d1      	b.n	1000bce4 <_Z8FindDemov+0x1144>
					if (*d != TILE_EMPTY) ok = False;
1000b540:	7f11      	ldrb	r1, [r2, #28]
1000b542:	3908      	subs	r1, #8
1000b544:	4248      	negs	r0, r1
1000b546:	4141      	adcs	r1, r0
1000b548:	4249      	negs	r1, r1
1000b54a:	400b      	ands	r3, r1
			if (b != 0)
1000b54c:	79a1      	ldrb	r1, [r4, #6]
1000b54e:	2900      	cmp	r1, #0
1000b550:	d100      	bne.n	1000b554 <_Z8FindDemov+0x9b4>
1000b552:	e3ca      	b.n	1000bcea <_Z8FindDemov+0x114a>
					if (*d != TILE_EMPTY) ok = False;
1000b554:	7f51      	ldrb	r1, [r2, #29]
1000b556:	3908      	subs	r1, #8
1000b558:	4248      	negs	r0, r1
1000b55a:	4141      	adcs	r1, r0
1000b55c:	4249      	negs	r1, r1
1000b55e:	400b      	ands	r3, r1
			if (b != 0)
1000b560:	79e1      	ldrb	r1, [r4, #7]
1000b562:	2900      	cmp	r1, #0
1000b564:	d005      	beq.n	1000b572 <_Z8FindDemov+0x9d2>
					if (*d != TILE_EMPTY) ok = False;
1000b566:	7f91      	ldrb	r1, [r2, #30]
					ok = False;
1000b568:	3908      	subs	r1, #8
1000b56a:	4248      	negs	r0, r1
1000b56c:	4141      	adcs	r1, r0
1000b56e:	4249      	negs	r1, r1
1000b570:	400b      	ands	r3, r1
		y++;
1000b572:	4659      	mov	r1, fp
1000b574:	3102      	adds	r1, #2
1000b576:	b2c9      	uxtb	r1, r1
1000b578:	4688      	mov	r8, r1
			b = *s++;
1000b57a:	7a21      	ldrb	r1, [r4, #8]
1000b57c:	9102      	str	r1, [sp, #8]
			if (b != 0)
1000b57e:	2900      	cmp	r1, #0
1000b580:	d101      	bne.n	1000b586 <_Z8FindDemov+0x9e6>
1000b582:	f7ff fbfb 	bl	1000ad7c <_Z8FindDemov+0x1dc>
				if ((y < 1) || (y >= MAPH-1))
1000b586:	9901      	ldr	r1, [sp, #4]
1000b588:	2911      	cmp	r1, #17
1000b58a:	d900      	bls.n	1000b58e <_Z8FindDemov+0x9ee>
1000b58c:	e386      	b.n	1000bc9c <_Z8FindDemov+0x10fc>
					if (*d != TILE_EMPTY) ok = False;
1000b58e:	2136      	movs	r1, #54	; 0x36
1000b590:	5c51      	ldrb	r1, [r2, r1]
1000b592:	3908      	subs	r1, #8
1000b594:	4248      	negs	r0, r1
1000b596:	4141      	adcs	r1, r0
1000b598:	4249      	negs	r1, r1
1000b59a:	400b      	ands	r3, r1
			if (b != 0)
1000b59c:	7a61      	ldrb	r1, [r4, #9]
1000b59e:	2900      	cmp	r1, #0
1000b5a0:	d001      	beq.n	1000b5a6 <_Z8FindDemov+0xa06>
1000b5a2:	f7ff fbf5 	bl	1000ad90 <_Z8FindDemov+0x1f0>
1000b5a6:	7aa1      	ldrb	r1, [r4, #10]
1000b5a8:	2900      	cmp	r1, #0
1000b5aa:	d001      	beq.n	1000b5b0 <_Z8FindDemov+0xa10>
1000b5ac:	f7ff fbfc 	bl	1000ada8 <_Z8FindDemov+0x208>
1000b5b0:	7ae1      	ldrb	r1, [r4, #11]
1000b5b2:	2900      	cmp	r1, #0
1000b5b4:	d001      	beq.n	1000b5ba <_Z8FindDemov+0xa1a>
1000b5b6:	f7ff fc01 	bl	1000adbc <_Z8FindDemov+0x21c>
			b = *s++;
1000b5ba:	7b21      	ldrb	r1, [r4, #12]
1000b5bc:	9104      	str	r1, [sp, #16]
			if (b != 0)
1000b5be:	2900      	cmp	r1, #0
1000b5c0:	d001      	beq.n	1000b5c6 <_Z8FindDemov+0xa26>
1000b5c2:	f7ff fc08 	bl	1000add6 <_Z8FindDemov+0x236>
1000b5c6:	7b61      	ldrb	r1, [r4, #13]
1000b5c8:	2900      	cmp	r1, #0
1000b5ca:	d100      	bne.n	1000b5ce <_Z8FindDemov+0xa2e>
1000b5cc:	e337      	b.n	1000bc3e <_Z8FindDemov+0x109e>
				if ((y < 1) || (y >= MAPH-1))
1000b5ce:	4641      	mov	r1, r8
1000b5d0:	2911      	cmp	r1, #17
1000b5d2:	d900      	bls.n	1000b5d6 <_Z8FindDemov+0xa36>
1000b5d4:	e41a      	b.n	1000ae0c <_Z8FindDemov+0x26c>
					if (*d != TILE_EMPTY) ok = False;
1000b5d6:	2152      	movs	r1, #82	; 0x52
1000b5d8:	5c51      	ldrb	r1, [r2, r1]
1000b5da:	2908      	cmp	r1, #8
1000b5dc:	d101      	bne.n	1000b5e2 <_Z8FindDemov+0xa42>
1000b5de:	f000 fc6b 	bl	1000beb8 <_Z8FindDemov+0x1318>
			b = *s++;
1000b5e2:	7ba3      	ldrb	r3, [r4, #14]
1000b5e4:	9309      	str	r3, [sp, #36]	; 0x24
			if (b != 0)
1000b5e6:	2b00      	cmp	r3, #0
1000b5e8:	d101      	bne.n	1000b5ee <_Z8FindDemov+0xa4e>
1000b5ea:	f7ff fc0f 	bl	1000ae0c <_Z8FindDemov+0x26c>
					if (*d != TILE_EMPTY) ok = False;
1000b5ee:	2153      	movs	r1, #83	; 0x53
1000b5f0:	5c51      	ldrb	r1, [r2, r1]
1000b5f2:	2300      	movs	r3, #0
1000b5f4:	2908      	cmp	r1, #8
1000b5f6:	d001      	beq.n	1000b5fc <_Z8FindDemov+0xa5c>
1000b5f8:	f7ff fc08 	bl	1000ae0c <_Z8FindDemov+0x26c>
1000b5fc:	e32f      	b.n	1000bc5e <_Z8FindDemov+0x10be>
			if (b != 0)
1000b5fe:	9f08      	ldr	r7, [sp, #32]
1000b600:	2f00      	cmp	r7, #0
1000b602:	d100      	bne.n	1000b606 <_Z8FindDemov+0xa66>
1000b604:	e0ee      	b.n	1000b7e4 <_Z8FindDemov+0xc44>
				if ((y < 1) || (y >= MAPH-1))
1000b606:	2811      	cmp	r0, #17
1000b608:	d900      	bls.n	1000b60c <_Z8FindDemov+0xa6c>
1000b60a:	e0b7      	b.n	1000b77c <_Z8FindDemov+0xbdc>
					if (*d != TILE_EMPTY) ok = False;
1000b60c:	4665      	mov	r5, ip
1000b60e:	7f2d      	ldrb	r5, [r5, #28]
1000b610:	46a8      	mov	r8, r5
1000b612:	2508      	movs	r5, #8
1000b614:	426d      	negs	r5, r5
1000b616:	46ab      	mov	fp, r5
1000b618:	44d8      	add	r8, fp
1000b61a:	4647      	mov	r7, r8
1000b61c:	427d      	negs	r5, r7
1000b61e:	417d      	adcs	r5, r7
1000b620:	426d      	negs	r5, r5
1000b622:	402b      	ands	r3, r5
			if (b != 0)
1000b624:	9d0a      	ldr	r5, [sp, #40]	; 0x28
1000b626:	2d00      	cmp	r5, #0
1000b628:	d100      	bne.n	1000b62c <_Z8FindDemov+0xa8c>
1000b62a:	e0ac      	b.n	1000b786 <_Z8FindDemov+0xbe6>
					if (*d != TILE_EMPTY) ok = False;
1000b62c:	4660      	mov	r0, ip
1000b62e:	7f40      	ldrb	r0, [r0, #29]
1000b630:	3808      	subs	r0, #8
1000b632:	0005      	movs	r5, r0
1000b634:	4268      	negs	r0, r5
1000b636:	4168      	adcs	r0, r5
1000b638:	4240      	negs	r0, r0
1000b63a:	4003      	ands	r3, r0
			if (b != 0)
1000b63c:	79f0      	ldrb	r0, [r6, #7]
1000b63e:	2800      	cmp	r0, #0
1000b640:	d000      	beq.n	1000b644 <_Z8FindDemov+0xaa4>
1000b642:	e5e2      	b.n	1000b20a <_Z8FindDemov+0x66a>
1000b644:	9802      	ldr	r0, [sp, #8]
1000b646:	2800      	cmp	r0, #0
1000b648:	d000      	beq.n	1000b64c <_Z8FindDemov+0xaac>
1000b64a:	e5ea      	b.n	1000b222 <_Z8FindDemov+0x682>
1000b64c:	9807      	ldr	r0, [sp, #28]
1000b64e:	2800      	cmp	r0, #0
1000b650:	d100      	bne.n	1000b654 <_Z8FindDemov+0xab4>
1000b652:	e0bd      	b.n	1000b7d0 <_Z8FindDemov+0xc30>
				if ((y < 1) || (y >= MAPH-1))
1000b654:	1c88      	adds	r0, r1, #2
1000b656:	b2c0      	uxtb	r0, r0
1000b658:	2811      	cmp	r0, #17
1000b65a:	d867      	bhi.n	1000b72c <_Z8FindDemov+0xb8c>
					if (*d != TILE_EMPTY) ok = False;
1000b65c:	2537      	movs	r5, #55	; 0x37
1000b65e:	4660      	mov	r0, ip
1000b660:	5d40      	ldrb	r0, [r0, r5]
1000b662:	3808      	subs	r0, #8
1000b664:	0005      	movs	r5, r0
1000b666:	4268      	negs	r0, r5
1000b668:	4168      	adcs	r0, r5
1000b66a:	4240      	negs	r0, r0
1000b66c:	4003      	ands	r3, r0
			if (b != 0)
1000b66e:	9806      	ldr	r0, [sp, #24]
1000b670:	2800      	cmp	r0, #0
1000b672:	d060      	beq.n	1000b736 <_Z8FindDemov+0xb96>
					if (*d != TILE_EMPTY) ok = False;
1000b674:	2538      	movs	r5, #56	; 0x38
1000b676:	4660      	mov	r0, ip
1000b678:	5d40      	ldrb	r0, [r0, r5]
1000b67a:	3808      	subs	r0, #8
1000b67c:	0005      	movs	r5, r0
1000b67e:	4268      	negs	r0, r5
1000b680:	4168      	adcs	r0, r5
1000b682:	4240      	negs	r0, r0
1000b684:	4003      	ands	r3, r0
			if (b != 0)
1000b686:	7af0      	ldrb	r0, [r6, #11]
1000b688:	2800      	cmp	r0, #0
1000b68a:	d000      	beq.n	1000b68e <_Z8FindDemov+0xaee>
1000b68c:	e5e2      	b.n	1000b254 <_Z8FindDemov+0x6b4>
1000b68e:	9804      	ldr	r0, [sp, #16]
1000b690:	2800      	cmp	r0, #0
1000b692:	d000      	beq.n	1000b696 <_Z8FindDemov+0xaf6>
1000b694:	e5eb      	b.n	1000b26e <_Z8FindDemov+0x6ce>
1000b696:	980c      	ldr	r0, [sp, #48]	; 0x30
1000b698:	2800      	cmp	r0, #0
1000b69a:	d100      	bne.n	1000b69e <_Z8FindDemov+0xafe>
1000b69c:	e07c      	b.n	1000b798 <_Z8FindDemov+0xbf8>
				if ((y < 1) || (y >= MAPH-1))
1000b69e:	1cc8      	adds	r0, r1, #3
1000b6a0:	b2c0      	uxtb	r0, r0
1000b6a2:	2811      	cmp	r0, #17
1000b6a4:	d900      	bls.n	1000b6a8 <_Z8FindDemov+0xb08>
1000b6a6:	e601      	b.n	1000b2ac <_Z8FindDemov+0x70c>
					if (*d != TILE_EMPTY) ok = False;
1000b6a8:	4660      	mov	r0, ip
1000b6aa:	2552      	movs	r5, #82	; 0x52
1000b6ac:	5d40      	ldrb	r0, [r0, r5]
1000b6ae:	2808      	cmp	r0, #8
1000b6b0:	d100      	bne.n	1000b6b4 <_Z8FindDemov+0xb14>
1000b6b2:	e09f      	b.n	1000b7f4 <_Z8FindDemov+0xc54>
			if (b != 0)
1000b6b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
1000b6b6:	2b00      	cmp	r3, #0
1000b6b8:	d100      	bne.n	1000b6bc <_Z8FindDemov+0xb1c>
1000b6ba:	e5f7      	b.n	1000b2ac <_Z8FindDemov+0x70c>
					if (*d != TILE_EMPTY) ok = False;
1000b6bc:	2300      	movs	r3, #0
1000b6be:	4661      	mov	r1, ip
1000b6c0:	2053      	movs	r0, #83	; 0x53
1000b6c2:	5c09      	ldrb	r1, [r1, r0]
1000b6c4:	2908      	cmp	r1, #8
1000b6c6:	d000      	beq.n	1000b6ca <_Z8FindDemov+0xb2a>
1000b6c8:	e5f0      	b.n	1000b2ac <_Z8FindDemov+0x70c>
			if (b != 0)
1000b6ca:	7bf1      	ldrb	r1, [r6, #15]
1000b6cc:	2900      	cmp	r1, #0
1000b6ce:	d000      	beq.n	1000b6d2 <_Z8FindDemov+0xb32>
1000b6d0:	e5e6      	b.n	1000b2a0 <_Z8FindDemov+0x700>
			while (CheckBrick(BrickX, BrickY+1, Brick)) BrickY++;
1000b6d2:	2b00      	cmp	r3, #0
1000b6d4:	d100      	bne.n	1000b6d8 <_Z8FindDemov+0xb38>
1000b6d6:	e5e9      	b.n	1000b2ac <_Z8FindDemov+0x70c>
1000b6d8:	2301      	movs	r3, #1
1000b6da:	0014      	movs	r4, r2
1000b6dc:	469a      	mov	sl, r3
1000b6de:	e543      	b.n	1000b168 <_Z8FindDemov+0x5c8>
			if (b != 0)
1000b6e0:	9b05      	ldr	r3, [sp, #20]
1000b6e2:	2b00      	cmp	r3, #0
1000b6e4:	d06b      	beq.n	1000b7be <_Z8FindDemov+0xc1e>
				if ((y < 1) || (y >= MAPH-1))
1000b6e6:	2911      	cmp	r1, #17
1000b6e8:	d863      	bhi.n	1000b7b2 <_Z8FindDemov+0xc12>
	Bool ok = True;
1000b6ea:	2301      	movs	r3, #1
					if (*d != TILE_EMPTY) ok = False;
1000b6ec:	4667      	mov	r7, ip
1000b6ee:	787f      	ldrb	r7, [r7, #1]
1000b6f0:	46b8      	mov	r8, r7
1000b6f2:	2708      	movs	r7, #8
1000b6f4:	427f      	negs	r7, r7
1000b6f6:	46bb      	mov	fp, r7
1000b6f8:	44d8      	add	r8, fp
1000b6fa:	4645      	mov	r5, r8
1000b6fc:	426f      	negs	r7, r5
1000b6fe:	416f      	adcs	r7, r5
1000b700:	427d      	negs	r5, r7
1000b702:	402b      	ands	r3, r5
			if (b != 0)
1000b704:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
1000b706:	2d00      	cmp	r5, #0
1000b708:	d021      	beq.n	1000b74e <_Z8FindDemov+0xbae>
					if (*d != TILE_EMPTY) ok = False;
1000b70a:	4665      	mov	r5, ip
1000b70c:	78ad      	ldrb	r5, [r5, #2]
1000b70e:	46a8      	mov	r8, r5
1000b710:	2508      	movs	r5, #8
1000b712:	426d      	negs	r5, r5
1000b714:	46ab      	mov	fp, r5
1000b716:	44d8      	add	r8, fp
1000b718:	4647      	mov	r7, r8
1000b71a:	427d      	negs	r5, r7
1000b71c:	417d      	adcs	r5, r7
1000b71e:	426d      	negs	r5, r5
1000b720:	402b      	ands	r3, r5
			if (b != 0)
1000b722:	78f5      	ldrb	r5, [r6, #3]
1000b724:	2d00      	cmp	r5, #0
1000b726:	d000      	beq.n	1000b72a <_Z8FindDemov+0xb8a>
1000b728:	e545      	b.n	1000b1b6 <_Z8FindDemov+0x616>
1000b72a:	e550      	b.n	1000b1ce <_Z8FindDemov+0x62e>
1000b72c:	9806      	ldr	r0, [sp, #24]
					ok = False;
1000b72e:	2300      	movs	r3, #0
			if (b != 0)
1000b730:	2800      	cmp	r0, #0
1000b732:	d000      	beq.n	1000b736 <_Z8FindDemov+0xb96>
1000b734:	e597      	b.n	1000b266 <_Z8FindDemov+0x6c6>
1000b736:	7af0      	ldrb	r0, [r6, #11]
1000b738:	2800      	cmp	r0, #0
1000b73a:	d100      	bne.n	1000b73e <_Z8FindDemov+0xb9e>
1000b73c:	e593      	b.n	1000b266 <_Z8FindDemov+0x6c6>
				if ((y < 1) || (y >= MAPH-1))
1000b73e:	1c88      	adds	r0, r1, #2
1000b740:	b2c0      	uxtb	r0, r0
1000b742:	2811      	cmp	r0, #17
1000b744:	d800      	bhi.n	1000b748 <_Z8FindDemov+0xba8>
1000b746:	e585      	b.n	1000b254 <_Z8FindDemov+0x6b4>
					ok = False;
1000b748:	2300      	movs	r3, #0
1000b74a:	e58c      	b.n	1000b266 <_Z8FindDemov+0x6c6>
	Bool ok = True;
1000b74c:	2301      	movs	r3, #1
			if (b != 0)
1000b74e:	78f7      	ldrb	r7, [r6, #3]
1000b750:	2f00      	cmp	r7, #0
1000b752:	d100      	bne.n	1000b756 <_Z8FindDemov+0xbb6>
1000b754:	e53b      	b.n	1000b1ce <_Z8FindDemov+0x62e>
				if ((y < 1) || (y >= MAPH-1))
1000b756:	2911      	cmp	r1, #17
1000b758:	d800      	bhi.n	1000b75c <_Z8FindDemov+0xbbc>
1000b75a:	e52c      	b.n	1000b1b6 <_Z8FindDemov+0x616>
					ok = False;
1000b75c:	2300      	movs	r3, #0
1000b75e:	e536      	b.n	1000b1ce <_Z8FindDemov+0x62e>
1000b760:	20012765 	.word	0x20012765
1000b764:	20012766 	.word	0x20012766
1000b768:	2000327c 	.word	0x2000327c
1000b76c:	20012764 	.word	0x20012764
1000b770:	10010bd4 	.word	0x10010bd4
			if (b != 0)
1000b774:	9b08      	ldr	r3, [sp, #32]
1000b776:	2b00      	cmp	r3, #0
1000b778:	d100      	bne.n	1000b77c <_Z8FindDemov+0xbdc>
1000b77a:	e54e      	b.n	1000b21a <_Z8FindDemov+0x67a>
1000b77c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
					ok = False;
1000b77e:	2300      	movs	r3, #0
			if (b != 0)
1000b780:	2d00      	cmp	r5, #0
1000b782:	d000      	beq.n	1000b786 <_Z8FindDemov+0xbe6>
1000b784:	e549      	b.n	1000b21a <_Z8FindDemov+0x67a>
1000b786:	79f7      	ldrb	r7, [r6, #7]
1000b788:	2f00      	cmp	r7, #0
1000b78a:	d100      	bne.n	1000b78e <_Z8FindDemov+0xbee>
1000b78c:	e545      	b.n	1000b21a <_Z8FindDemov+0x67a>
				if ((y < 1) || (y >= MAPH-1))
1000b78e:	2811      	cmp	r0, #17
1000b790:	d800      	bhi.n	1000b794 <_Z8FindDemov+0xbf4>
1000b792:	e53a      	b.n	1000b20a <_Z8FindDemov+0x66a>
					ok = False;
1000b794:	2300      	movs	r3, #0
1000b796:	e540      	b.n	1000b21a <_Z8FindDemov+0x67a>
			if (b != 0)
1000b798:	9809      	ldr	r0, [sp, #36]	; 0x24
1000b79a:	2800      	cmp	r0, #0
1000b79c:	d02e      	beq.n	1000b7fc <_Z8FindDemov+0xc5c>
				if ((y < 1) || (y >= MAPH-1))
1000b79e:	3103      	adds	r1, #3
1000b7a0:	b2c9      	uxtb	r1, r1
1000b7a2:	2911      	cmp	r1, #17
1000b7a4:	d900      	bls.n	1000b7a8 <_Z8FindDemov+0xc08>
1000b7a6:	e581      	b.n	1000b2ac <_Z8FindDemov+0x70c>
1000b7a8:	e789      	b.n	1000b6be <_Z8FindDemov+0xb1e>
			if (b != 0)
1000b7aa:	9b05      	ldr	r3, [sp, #20]
1000b7ac:	2b00      	cmp	r3, #0
1000b7ae:	d100      	bne.n	1000b7b2 <_Z8FindDemov+0xc12>
1000b7b0:	e50d      	b.n	1000b1ce <_Z8FindDemov+0x62e>
1000b7b2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
					ok = False;
1000b7b4:	2300      	movs	r3, #0
			if (b != 0)
1000b7b6:	2d00      	cmp	r5, #0
1000b7b8:	d000      	beq.n	1000b7bc <_Z8FindDemov+0xc1c>
1000b7ba:	e508      	b.n	1000b1ce <_Z8FindDemov+0x62e>
1000b7bc:	e7c7      	b.n	1000b74e <_Z8FindDemov+0xbae>
1000b7be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1000b7c0:	2b00      	cmp	r3, #0
1000b7c2:	d0c3      	beq.n	1000b74c <_Z8FindDemov+0xbac>
					ok = False;
1000b7c4:	2300      	movs	r3, #0
				if ((y < 1) || (y >= MAPH-1))
1000b7c6:	2911      	cmp	r1, #17
1000b7c8:	d900      	bls.n	1000b7cc <_Z8FindDemov+0xc2c>
1000b7ca:	e500      	b.n	1000b1ce <_Z8FindDemov+0x62e>
	Bool ok = True;
1000b7cc:	3301      	adds	r3, #1
1000b7ce:	e79c      	b.n	1000b70a <_Z8FindDemov+0xb6a>
			if (b != 0)
1000b7d0:	9806      	ldr	r0, [sp, #24]
1000b7d2:	2800      	cmp	r0, #0
1000b7d4:	d0af      	beq.n	1000b736 <_Z8FindDemov+0xb96>
				if ((y < 1) || (y >= MAPH-1))
1000b7d6:	1c88      	adds	r0, r1, #2
1000b7d8:	b2c0      	uxtb	r0, r0
1000b7da:	2811      	cmp	r0, #17
1000b7dc:	d800      	bhi.n	1000b7e0 <_Z8FindDemov+0xc40>
1000b7de:	e749      	b.n	1000b674 <_Z8FindDemov+0xad4>
					ok = False;
1000b7e0:	2300      	movs	r3, #0
1000b7e2:	e540      	b.n	1000b266 <_Z8FindDemov+0x6c6>
			if (b != 0)
1000b7e4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
1000b7e6:	2d00      	cmp	r5, #0
1000b7e8:	d0cd      	beq.n	1000b786 <_Z8FindDemov+0xbe6>
				if ((y < 1) || (y >= MAPH-1))
1000b7ea:	2811      	cmp	r0, #17
1000b7ec:	d800      	bhi.n	1000b7f0 <_Z8FindDemov+0xc50>
1000b7ee:	e71d      	b.n	1000b62c <_Z8FindDemov+0xa8c>
					ok = False;
1000b7f0:	2300      	movs	r3, #0
1000b7f2:	e512      	b.n	1000b21a <_Z8FindDemov+0x67a>
			if (b != 0)
1000b7f4:	9809      	ldr	r0, [sp, #36]	; 0x24
1000b7f6:	2800      	cmp	r0, #0
1000b7f8:	d000      	beq.n	1000b7fc <_Z8FindDemov+0xc5c>
1000b7fa:	e760      	b.n	1000b6be <_Z8FindDemov+0xb1e>
1000b7fc:	7bf0      	ldrb	r0, [r6, #15]
1000b7fe:	2800      	cmp	r0, #0
1000b800:	d100      	bne.n	1000b804 <_Z8FindDemov+0xc64>
1000b802:	e766      	b.n	1000b6d2 <_Z8FindDemov+0xb32>
				if ((y < 1) || (y >= MAPH-1))
1000b804:	3103      	adds	r1, #3
1000b806:	b2c9      	uxtb	r1, r1
1000b808:	2911      	cmp	r1, #17
1000b80a:	d800      	bhi.n	1000b80e <_Z8FindDemov+0xc6e>
1000b80c:	e548      	b.n	1000b2a0 <_Z8FindDemov+0x700>
1000b80e:	e54d      	b.n	1000b2ac <_Z8FindDemov+0x70c>
1000b810:	2234      	movs	r2, #52	; 0x34
1000b812:	466b      	mov	r3, sp
1000b814:	189b      	adds	r3, r3, r2
1000b816:	781a      	ldrb	r2, [r3, #0]
	Bool ok = True;
1000b818:	2301      	movs	r3, #1
			if (b != 0)
1000b81a:	9805      	ldr	r0, [sp, #20]
1000b81c:	2800      	cmp	r0, #0
1000b81e:	d004      	beq.n	1000b82a <_Z8FindDemov+0xc8a>
				if ((y < 1) || (y >= MAPH-1))
1000b820:	1e50      	subs	r0, r2, #1
1000b822:	2811      	cmp	r0, #17
1000b824:	d800      	bhi.n	1000b828 <_Z8FindDemov+0xc88>
1000b826:	e198      	b.n	1000bb5a <_Z8FindDemov+0xfba>
					ok = False;
1000b828:	2300      	movs	r3, #0
			if (b != 0)
1000b82a:	980b      	ldr	r0, [sp, #44]	; 0x2c
1000b82c:	2800      	cmp	r0, #0
1000b82e:	d004      	beq.n	1000b83a <_Z8FindDemov+0xc9a>
				if ((y < 1) || (y >= MAPH-1))
1000b830:	1e50      	subs	r0, r2, #1
1000b832:	2811      	cmp	r0, #17
1000b834:	d800      	bhi.n	1000b838 <_Z8FindDemov+0xc98>
1000b836:	e581      	b.n	1000b33c <_Z8FindDemov+0x79c>
					ok = False;
1000b838:	2300      	movs	r3, #0
			if (b != 0)
1000b83a:	78f0      	ldrb	r0, [r6, #3]
1000b83c:	2800      	cmp	r0, #0
1000b83e:	d100      	bne.n	1000b842 <_Z8FindDemov+0xca2>
1000b840:	e58b      	b.n	1000b35a <_Z8FindDemov+0x7ba>
				if ((y < 1) || (y >= MAPH-1))
1000b842:	1e50      	subs	r0, r2, #1
1000b844:	2811      	cmp	r0, #17
1000b846:	d800      	bhi.n	1000b84a <_Z8FindDemov+0xcaa>
1000b848:	e581      	b.n	1000b34e <_Z8FindDemov+0x7ae>
		y++;
1000b84a:	1c50      	adds	r0, r2, #1
1000b84c:	b2c0      	uxtb	r0, r0
1000b84e:	4682      	mov	sl, r0
			if (b != 0)
1000b850:	9803      	ldr	r0, [sp, #12]
					ok = False;
1000b852:	2300      	movs	r3, #0
			if (b != 0)
1000b854:	2800      	cmp	r0, #0
1000b856:	d000      	beq.n	1000b85a <_Z8FindDemov+0xcba>
1000b858:	e586      	b.n	1000b368 <_Z8FindDemov+0x7c8>
1000b85a:	9808      	ldr	r0, [sp, #32]
1000b85c:	2800      	cmp	r0, #0
1000b85e:	d100      	bne.n	1000b862 <_Z8FindDemov+0xcc2>
1000b860:	e189      	b.n	1000bb76 <_Z8FindDemov+0xfd6>
				if ((y < 1) || (y >= MAPH-1))
1000b862:	2a11      	cmp	r2, #17
1000b864:	d900      	bls.n	1000b868 <_Z8FindDemov+0xcc8>
1000b866:	e13d      	b.n	1000bae4 <_Z8FindDemov+0xf44>
					if (*d != TILE_EMPTY) ok = False;
1000b868:	7f08      	ldrb	r0, [r1, #28]
1000b86a:	3808      	subs	r0, #8
1000b86c:	4244      	negs	r4, r0
1000b86e:	4160      	adcs	r0, r4
1000b870:	4240      	negs	r0, r0
1000b872:	4003      	ands	r3, r0
			if (b != 0)
1000b874:	980a      	ldr	r0, [sp, #40]	; 0x28
1000b876:	2800      	cmp	r0, #0
1000b878:	d100      	bne.n	1000b87c <_Z8FindDemov+0xcdc>
1000b87a:	e138      	b.n	1000baee <_Z8FindDemov+0xf4e>
					if (*d != TILE_EMPTY) ok = False;
1000b87c:	7f48      	ldrb	r0, [r1, #29]
1000b87e:	3808      	subs	r0, #8
1000b880:	4244      	negs	r4, r0
1000b882:	4160      	adcs	r0, r4
1000b884:	4240      	negs	r0, r0
1000b886:	4003      	ands	r3, r0
			if (b != 0)
1000b888:	79f0      	ldrb	r0, [r6, #7]
1000b88a:	2800      	cmp	r0, #0
1000b88c:	d000      	beq.n	1000b890 <_Z8FindDemov+0xcf0>
1000b88e:	e57f      	b.n	1000b390 <_Z8FindDemov+0x7f0>
		y++;
1000b890:	1c90      	adds	r0, r2, #2
1000b892:	b2c0      	uxtb	r0, r0
1000b894:	4680      	mov	r8, r0
			if (b != 0)
1000b896:	9802      	ldr	r0, [sp, #8]
1000b898:	2800      	cmp	r0, #0
1000b89a:	d000      	beq.n	1000b89e <_Z8FindDemov+0xcfe>
1000b89c:	e585      	b.n	1000b3aa <_Z8FindDemov+0x80a>
1000b89e:	9807      	ldr	r0, [sp, #28]
1000b8a0:	2800      	cmp	r0, #0
1000b8a2:	d100      	bne.n	1000b8a6 <_Z8FindDemov+0xd06>
1000b8a4:	e12c      	b.n	1000bb00 <_Z8FindDemov+0xf60>
				if ((y < 1) || (y >= MAPH-1))
1000b8a6:	4650      	mov	r0, sl
1000b8a8:	2811      	cmp	r0, #17
1000b8aa:	d900      	bls.n	1000b8ae <_Z8FindDemov+0xd0e>
1000b8ac:	e0fd      	b.n	1000baaa <_Z8FindDemov+0xf0a>
					if (*d != TILE_EMPTY) ok = False;
1000b8ae:	2037      	movs	r0, #55	; 0x37
1000b8b0:	5c08      	ldrb	r0, [r1, r0]
1000b8b2:	3808      	subs	r0, #8
1000b8b4:	4244      	negs	r4, r0
1000b8b6:	4160      	adcs	r0, r4
1000b8b8:	4240      	negs	r0, r0
1000b8ba:	4003      	ands	r3, r0
			if (b != 0)
1000b8bc:	9806      	ldr	r0, [sp, #24]
1000b8be:	2800      	cmp	r0, #0
1000b8c0:	d100      	bne.n	1000b8c4 <_Z8FindDemov+0xd24>
1000b8c2:	e0f7      	b.n	1000bab4 <_Z8FindDemov+0xf14>
					if (*d != TILE_EMPTY) ok = False;
1000b8c4:	2038      	movs	r0, #56	; 0x38
1000b8c6:	5c08      	ldrb	r0, [r1, r0]
1000b8c8:	3808      	subs	r0, #8
1000b8ca:	4244      	negs	r4, r0
1000b8cc:	4160      	adcs	r0, r4
1000b8ce:	4240      	negs	r0, r0
1000b8d0:	4003      	ands	r3, r0
			if (b != 0)
1000b8d2:	7af0      	ldrb	r0, [r6, #11]
1000b8d4:	2800      	cmp	r0, #0
1000b8d6:	d000      	beq.n	1000b8da <_Z8FindDemov+0xd3a>
1000b8d8:	e57d      	b.n	1000b3d6 <_Z8FindDemov+0x836>
1000b8da:	9804      	ldr	r0, [sp, #16]
1000b8dc:	2800      	cmp	r0, #0
1000b8de:	d000      	beq.n	1000b8e2 <_Z8FindDemov+0xd42>
1000b8e0:	e584      	b.n	1000b3ec <_Z8FindDemov+0x84c>
1000b8e2:	980c      	ldr	r0, [sp, #48]	; 0x30
1000b8e4:	2800      	cmp	r0, #0
1000b8e6:	d100      	bne.n	1000b8ea <_Z8FindDemov+0xd4a>
1000b8e8:	e12f      	b.n	1000bb4a <_Z8FindDemov+0xfaa>
				if ((y < 1) || (y >= MAPH-1))
1000b8ea:	4640      	mov	r0, r8
1000b8ec:	2811      	cmp	r0, #17
1000b8ee:	d900      	bls.n	1000b8f2 <_Z8FindDemov+0xd52>
1000b8f0:	e597      	b.n	1000b422 <_Z8FindDemov+0x882>
					if (*d != TILE_EMPTY) ok = False;
1000b8f2:	2052      	movs	r0, #82	; 0x52
1000b8f4:	5c08      	ldrb	r0, [r1, r0]
1000b8f6:	2808      	cmp	r0, #8
1000b8f8:	d100      	bne.n	1000b8fc <_Z8FindDemov+0xd5c>
1000b8fa:	e14e      	b.n	1000bb9a <_Z8FindDemov+0xffa>
			if (b != 0)
1000b8fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
1000b8fe:	2b00      	cmp	r3, #0
1000b900:	d100      	bne.n	1000b904 <_Z8FindDemov+0xd64>
1000b902:	e58e      	b.n	1000b422 <_Z8FindDemov+0x882>
					if (*d != TILE_EMPTY) ok = False;
1000b904:	2300      	movs	r3, #0
1000b906:	2053      	movs	r0, #83	; 0x53
1000b908:	5c08      	ldrb	r0, [r1, r0]
1000b90a:	2808      	cmp	r0, #8
1000b90c:	d000      	beq.n	1000b910 <_Z8FindDemov+0xd70>
1000b90e:	e588      	b.n	1000b422 <_Z8FindDemov+0x882>
			if (b != 0)
1000b910:	7bf0      	ldrb	r0, [r6, #15]
1000b912:	2800      	cmp	r0, #0
1000b914:	d000      	beq.n	1000b918 <_Z8FindDemov+0xd78>
1000b916:	e57f      	b.n	1000b418 <_Z8FindDemov+0x878>
			if (!CheckBrick(BrickX+1, BrickY, Brick)) break;
1000b918:	2b00      	cmp	r3, #0
1000b91a:	d100      	bne.n	1000b91e <_Z8FindDemov+0xd7e>
1000b91c:	e581      	b.n	1000b422 <_Z8FindDemov+0x882>
			BrickX++;
1000b91e:	4662      	mov	r2, ip
1000b920:	4bd9      	ldr	r3, [pc, #868]	; (1000bc88 <_Z8FindDemov+0x10e8>)
			savex = BrickX;
1000b922:	4667      	mov	r7, ip
			BrickX++;
1000b924:	701a      	strb	r2, [r3, #0]
			savex = BrickX;
1000b926:	f7ff fc11 	bl	1000b14c <_Z8FindDemov+0x5ac>
				bestbrick = savebrick;
1000b92a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
				bestx = savex;
1000b92c:	9715      	str	r7, [sp, #84]	; 0x54
				bestbrick = savebrick;
1000b92e:	9317      	str	r3, [sp, #92]	; 0x5c
				besty = savey;
1000b930:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1000b932:	9013      	str	r0, [sp, #76]	; 0x4c
1000b934:	9316      	str	r3, [sp, #88]	; 0x58
1000b936:	e4d0      	b.n	1000b2da <_Z8FindDemov+0x73a>
			if (b != 0)
1000b938:	980c      	ldr	r0, [sp, #48]	; 0x30
1000b93a:	2800      	cmp	r0, #0
1000b93c:	d100      	bne.n	1000b940 <_Z8FindDemov+0xda0>
1000b93e:	e0e8      	b.n	1000bb12 <_Z8FindDemov+0xf72>
				if ((y < 1) || (y >= MAPH-1))
1000b940:	4640      	mov	r0, r8
1000b942:	2811      	cmp	r0, #17
1000b944:	d901      	bls.n	1000b94a <_Z8FindDemov+0xdaa>
1000b946:	f7ff fbfa 	bl	1000b13e <_Z8FindDemov+0x59e>
					if (*d != TILE_EMPTY) ok = False;
1000b94a:	2052      	movs	r0, #82	; 0x52
1000b94c:	5c08      	ldrb	r0, [r1, r0]
1000b94e:	2808      	cmp	r0, #8
1000b950:	d100      	bne.n	1000b954 <_Z8FindDemov+0xdb4>
1000b952:	e12f      	b.n	1000bbb4 <_Z8FindDemov+0x1014>
			if (b != 0)
1000b954:	9b09      	ldr	r3, [sp, #36]	; 0x24
1000b956:	2b00      	cmp	r3, #0
1000b958:	d101      	bne.n	1000b95e <_Z8FindDemov+0xdbe>
1000b95a:	f7ff fbf0 	bl	1000b13e <_Z8FindDemov+0x59e>
					if (*d != TILE_EMPTY) ok = False;
1000b95e:	2300      	movs	r3, #0
1000b960:	2053      	movs	r0, #83	; 0x53
1000b962:	5c08      	ldrb	r0, [r1, r0]
1000b964:	2808      	cmp	r0, #8
1000b966:	d101      	bne.n	1000b96c <_Z8FindDemov+0xdcc>
1000b968:	f7ff fbde 	bl	1000b128 <_Z8FindDemov+0x588>
1000b96c:	9b12      	ldr	r3, [sp, #72]	; 0x48
1000b96e:	2b00      	cmp	r3, #0
1000b970:	d001      	beq.n	1000b976 <_Z8FindDemov+0xdd6>
1000b972:	4bc5      	ldr	r3, [pc, #788]	; (1000bc88 <_Z8FindDemov+0x10e8>)
1000b974:	701f      	strb	r7, [r3, #0]
			savex = BrickX;
1000b976:	4bc4      	ldr	r3, [pc, #784]	; (1000bc88 <_Z8FindDemov+0x10e8>)
1000b978:	781b      	ldrb	r3, [r3, #0]
1000b97a:	b25b      	sxtb	r3, r3
1000b97c:	469a      	mov	sl, r3
1000b97e:	f7ff fbe4 	bl	1000b14a <_Z8FindDemov+0x5aa>
			if (b != 0)
1000b982:	9807      	ldr	r0, [sp, #28]
1000b984:	2800      	cmp	r0, #0
1000b986:	d100      	bne.n	1000b98a <_Z8FindDemov+0xdea>
1000b988:	e0cc      	b.n	1000bb24 <_Z8FindDemov+0xf84>
				if ((y < 1) || (y >= MAPH-1))
1000b98a:	9801      	ldr	r0, [sp, #4]
1000b98c:	2811      	cmp	r0, #17
1000b98e:	d879      	bhi.n	1000ba84 <_Z8FindDemov+0xee4>
					if (*d != TILE_EMPTY) ok = False;
1000b990:	2037      	movs	r0, #55	; 0x37
1000b992:	5c08      	ldrb	r0, [r1, r0]
1000b994:	3808      	subs	r0, #8
1000b996:	0005      	movs	r5, r0
1000b998:	4268      	negs	r0, r5
1000b99a:	4168      	adcs	r0, r5
1000b99c:	4240      	negs	r0, r0
1000b99e:	4003      	ands	r3, r0
			if (b != 0)
1000b9a0:	9806      	ldr	r0, [sp, #24]
1000b9a2:	2800      	cmp	r0, #0
1000b9a4:	d074      	beq.n	1000ba90 <_Z8FindDemov+0xef0>
					if (*d != TILE_EMPTY) ok = False;
1000b9a6:	2038      	movs	r0, #56	; 0x38
1000b9a8:	5c08      	ldrb	r0, [r1, r0]
1000b9aa:	3808      	subs	r0, #8
1000b9ac:	0005      	movs	r5, r0
1000b9ae:	4268      	negs	r0, r5
1000b9b0:	4168      	adcs	r0, r5
1000b9b2:	4240      	negs	r0, r0
1000b9b4:	4003      	ands	r3, r0
			if (b != 0)
1000b9b6:	7ae0      	ldrb	r0, [r4, #11]
1000b9b8:	2800      	cmp	r0, #0
1000b9ba:	d001      	beq.n	1000b9c0 <_Z8FindDemov+0xe20>
1000b9bc:	f7ff fb90 	bl	1000b0e0 <_Z8FindDemov+0x540>
1000b9c0:	f7ff fb96 	bl	1000b0f0 <_Z8FindDemov+0x550>
1000b9c4:	9808      	ldr	r0, [sp, #32]
1000b9c6:	2800      	cmp	r0, #0
1000b9c8:	d100      	bne.n	1000b9cc <_Z8FindDemov+0xe2c>
1000b9ca:	e0b5      	b.n	1000bb38 <_Z8FindDemov+0xf98>
				if ((y < 1) || (y >= MAPH-1))
1000b9cc:	2e11      	cmp	r6, #17
1000b9ce:	d847      	bhi.n	1000ba60 <_Z8FindDemov+0xec0>
					if (*d != TILE_EMPTY) ok = False;
1000b9d0:	7f08      	ldrb	r0, [r1, #28]
1000b9d2:	3808      	subs	r0, #8
1000b9d4:	0005      	movs	r5, r0
1000b9d6:	4268      	negs	r0, r5
1000b9d8:	4168      	adcs	r0, r5
1000b9da:	4240      	negs	r0, r0
1000b9dc:	4003      	ands	r3, r0
			if (b != 0)
1000b9de:	980a      	ldr	r0, [sp, #40]	; 0x28
1000b9e0:	2800      	cmp	r0, #0
1000b9e2:	d043      	beq.n	1000ba6c <_Z8FindDemov+0xecc>
					if (*d != TILE_EMPTY) ok = False;
1000b9e4:	7f48      	ldrb	r0, [r1, #29]
1000b9e6:	3808      	subs	r0, #8
1000b9e8:	0005      	movs	r5, r0
1000b9ea:	4268      	negs	r0, r5
1000b9ec:	4168      	adcs	r0, r5
1000b9ee:	4240      	negs	r0, r0
1000b9f0:	4003      	ands	r3, r0
			if (b != 0)
1000b9f2:	79e0      	ldrb	r0, [r4, #7]
1000b9f4:	2800      	cmp	r0, #0
1000b9f6:	d001      	beq.n	1000b9fc <_Z8FindDemov+0xe5c>
1000b9f8:	f7ff fb4c 	bl	1000b094 <_Z8FindDemov+0x4f4>
1000b9fc:	f7ff fb51 	bl	1000b0a2 <_Z8FindDemov+0x502>
1000ba00:	9b05      	ldr	r3, [sp, #20]
1000ba02:	2b00      	cmp	r3, #0
1000ba04:	d060      	beq.n	1000bac8 <_Z8FindDemov+0xf28>
				if ((y < 1) || (y >= MAPH-1))
1000ba06:	465b      	mov	r3, fp
1000ba08:	2b11      	cmp	r3, #17
1000ba0a:	d81b      	bhi.n	1000ba44 <_Z8FindDemov+0xea4>
1000ba0c:	9b18      	ldr	r3, [sp, #96]	; 0x60
					if (*d != TILE_EMPTY) ok = False;
1000ba0e:	7848      	ldrb	r0, [r1, #1]
1000ba10:	3808      	subs	r0, #8
1000ba12:	0005      	movs	r5, r0
1000ba14:	4268      	negs	r0, r5
1000ba16:	4168      	adcs	r0, r5
1000ba18:	4240      	negs	r0, r0
1000ba1a:	4003      	ands	r3, r0
			if (b != 0)
1000ba1c:	980b      	ldr	r0, [sp, #44]	; 0x2c
1000ba1e:	2800      	cmp	r0, #0
1000ba20:	d011      	beq.n	1000ba46 <_Z8FindDemov+0xea6>
					if (*d != TILE_EMPTY) ok = False;
1000ba22:	7888      	ldrb	r0, [r1, #2]
1000ba24:	3808      	subs	r0, #8
1000ba26:	0005      	movs	r5, r0
1000ba28:	4268      	negs	r0, r5
1000ba2a:	4168      	adcs	r0, r5
1000ba2c:	4240      	negs	r0, r0
1000ba2e:	4003      	ands	r3, r0
			if (b != 0)
1000ba30:	9814      	ldr	r0, [sp, #80]	; 0x50
1000ba32:	2800      	cmp	r0, #0
1000ba34:	d001      	beq.n	1000ba3a <_Z8FindDemov+0xe9a>
1000ba36:	f7ff fb09 	bl	1000b04c <_Z8FindDemov+0x4ac>
1000ba3a:	f7ff fb0e 	bl	1000b05a <_Z8FindDemov+0x4ba>
1000ba3e:	9b05      	ldr	r3, [sp, #20]
1000ba40:	2b00      	cmp	r3, #0
1000ba42:	d041      	beq.n	1000bac8 <_Z8FindDemov+0xf28>
					ok = False;
1000ba44:	2300      	movs	r3, #0
			if (b != 0)
1000ba46:	9814      	ldr	r0, [sp, #80]	; 0x50
1000ba48:	2800      	cmp	r0, #0
1000ba4a:	d101      	bne.n	1000ba50 <_Z8FindDemov+0xeb0>
1000ba4c:	f7ff fb05 	bl	1000b05a <_Z8FindDemov+0x4ba>
				if ((y < 1) || (y >= MAPH-1))
1000ba50:	4658      	mov	r0, fp
1000ba52:	2811      	cmp	r0, #17
1000ba54:	d801      	bhi.n	1000ba5a <_Z8FindDemov+0xeba>
1000ba56:	f7ff faf9 	bl	1000b04c <_Z8FindDemov+0x4ac>
					ok = False;
1000ba5a:	2300      	movs	r3, #0
1000ba5c:	f7ff fafd 	bl	1000b05a <_Z8FindDemov+0x4ba>
			if (b != 0)
1000ba60:	980a      	ldr	r0, [sp, #40]	; 0x28
					ok = False;
1000ba62:	2300      	movs	r3, #0
			if (b != 0)
1000ba64:	2800      	cmp	r0, #0
1000ba66:	d001      	beq.n	1000ba6c <_Z8FindDemov+0xecc>
1000ba68:	f7ff fb1b 	bl	1000b0a2 <_Z8FindDemov+0x502>
1000ba6c:	79e0      	ldrb	r0, [r4, #7]
1000ba6e:	2800      	cmp	r0, #0
1000ba70:	d101      	bne.n	1000ba76 <_Z8FindDemov+0xed6>
1000ba72:	f7ff fb16 	bl	1000b0a2 <_Z8FindDemov+0x502>
				if ((y < 1) || (y >= MAPH-1))
1000ba76:	2e11      	cmp	r6, #17
1000ba78:	d801      	bhi.n	1000ba7e <_Z8FindDemov+0xede>
1000ba7a:	f7ff fb0b 	bl	1000b094 <_Z8FindDemov+0x4f4>
					ok = False;
1000ba7e:	2300      	movs	r3, #0
1000ba80:	f7ff fb0f 	bl	1000b0a2 <_Z8FindDemov+0x502>
			if (b != 0)
1000ba84:	9806      	ldr	r0, [sp, #24]
					ok = False;
1000ba86:	2300      	movs	r3, #0
			if (b != 0)
1000ba88:	2800      	cmp	r0, #0
1000ba8a:	d001      	beq.n	1000ba90 <_Z8FindDemov+0xef0>
1000ba8c:	f7ff fb30 	bl	1000b0f0 <_Z8FindDemov+0x550>
1000ba90:	7ae0      	ldrb	r0, [r4, #11]
1000ba92:	2800      	cmp	r0, #0
1000ba94:	d101      	bne.n	1000ba9a <_Z8FindDemov+0xefa>
1000ba96:	f7ff fb2b 	bl	1000b0f0 <_Z8FindDemov+0x550>
				if ((y < 1) || (y >= MAPH-1))
1000ba9a:	9801      	ldr	r0, [sp, #4]
1000ba9c:	2811      	cmp	r0, #17
1000ba9e:	d801      	bhi.n	1000baa4 <_Z8FindDemov+0xf04>
1000baa0:	f7ff fb1e 	bl	1000b0e0 <_Z8FindDemov+0x540>
					ok = False;
1000baa4:	2300      	movs	r3, #0
1000baa6:	f7ff fb23 	bl	1000b0f0 <_Z8FindDemov+0x550>
			if (b != 0)
1000baaa:	9806      	ldr	r0, [sp, #24]
					ok = False;
1000baac:	2300      	movs	r3, #0
			if (b != 0)
1000baae:	2800      	cmp	r0, #0
1000bab0:	d000      	beq.n	1000bab4 <_Z8FindDemov+0xf14>
1000bab2:	e497      	b.n	1000b3e4 <_Z8FindDemov+0x844>
1000bab4:	7af0      	ldrb	r0, [r6, #11]
1000bab6:	2800      	cmp	r0, #0
1000bab8:	d100      	bne.n	1000babc <_Z8FindDemov+0xf1c>
1000baba:	e493      	b.n	1000b3e4 <_Z8FindDemov+0x844>
				if ((y < 1) || (y >= MAPH-1))
1000babc:	4650      	mov	r0, sl
1000babe:	2811      	cmp	r0, #17
1000bac0:	d800      	bhi.n	1000bac4 <_Z8FindDemov+0xf24>
1000bac2:	e488      	b.n	1000b3d6 <_Z8FindDemov+0x836>
					ok = False;
1000bac4:	2300      	movs	r3, #0
1000bac6:	e48d      	b.n	1000b3e4 <_Z8FindDemov+0x844>
			if (b != 0)
1000bac8:	980b      	ldr	r0, [sp, #44]	; 0x2c
1000baca:	9b18      	ldr	r3, [sp, #96]	; 0x60
1000bacc:	2800      	cmp	r0, #0
1000bace:	d0ba      	beq.n	1000ba46 <_Z8FindDemov+0xea6>
				if ((y < 1) || (y >= MAPH-1))
1000bad0:	4658      	mov	r0, fp
					ok = False;
1000bad2:	2300      	movs	r3, #0
				if ((y < 1) || (y >= MAPH-1))
1000bad4:	2811      	cmp	r0, #17
1000bad6:	d8b6      	bhi.n	1000ba46 <_Z8FindDemov+0xea6>
1000bad8:	9b18      	ldr	r3, [sp, #96]	; 0x60
1000bada:	e7a2      	b.n	1000ba22 <_Z8FindDemov+0xe82>
			if (b != 0)
1000badc:	9b08      	ldr	r3, [sp, #32]
1000bade:	2b00      	cmp	r3, #0
1000bae0:	d100      	bne.n	1000bae4 <_Z8FindDemov+0xf44>
1000bae2:	e45b      	b.n	1000b39c <_Z8FindDemov+0x7fc>
1000bae4:	980a      	ldr	r0, [sp, #40]	; 0x28
					ok = False;
1000bae6:	2300      	movs	r3, #0
			if (b != 0)
1000bae8:	2800      	cmp	r0, #0
1000baea:	d000      	beq.n	1000baee <_Z8FindDemov+0xf4e>
1000baec:	e456      	b.n	1000b39c <_Z8FindDemov+0x7fc>
1000baee:	79f0      	ldrb	r0, [r6, #7]
1000baf0:	2800      	cmp	r0, #0
1000baf2:	d100      	bne.n	1000baf6 <_Z8FindDemov+0xf56>
1000baf4:	e452      	b.n	1000b39c <_Z8FindDemov+0x7fc>
				if ((y < 1) || (y >= MAPH-1))
1000baf6:	2a11      	cmp	r2, #17
1000baf8:	d800      	bhi.n	1000bafc <_Z8FindDemov+0xf5c>
1000bafa:	e449      	b.n	1000b390 <_Z8FindDemov+0x7f0>
					ok = False;
1000bafc:	2300      	movs	r3, #0
1000bafe:	e44d      	b.n	1000b39c <_Z8FindDemov+0x7fc>
			if (b != 0)
1000bb00:	9806      	ldr	r0, [sp, #24]
1000bb02:	2800      	cmp	r0, #0
1000bb04:	d0d6      	beq.n	1000bab4 <_Z8FindDemov+0xf14>
				if ((y < 1) || (y >= MAPH-1))
1000bb06:	4650      	mov	r0, sl
1000bb08:	2811      	cmp	r0, #17
1000bb0a:	d800      	bhi.n	1000bb0e <_Z8FindDemov+0xf6e>
1000bb0c:	e6da      	b.n	1000b8c4 <_Z8FindDemov+0xd24>
					ok = False;
1000bb0e:	2300      	movs	r3, #0
1000bb10:	e468      	b.n	1000b3e4 <_Z8FindDemov+0x844>
			if (b != 0)
1000bb12:	9809      	ldr	r0, [sp, #36]	; 0x24
1000bb14:	2800      	cmp	r0, #0
1000bb16:	d051      	beq.n	1000bbbc <_Z8FindDemov+0x101c>
				if ((y < 1) || (y >= MAPH-1))
1000bb18:	4640      	mov	r0, r8
1000bb1a:	2811      	cmp	r0, #17
1000bb1c:	d800      	bhi.n	1000bb20 <_Z8FindDemov+0xf80>
1000bb1e:	e71f      	b.n	1000b960 <_Z8FindDemov+0xdc0>
1000bb20:	f7ff fb0d 	bl	1000b13e <_Z8FindDemov+0x59e>
			if (b != 0)
1000bb24:	9806      	ldr	r0, [sp, #24]
1000bb26:	2800      	cmp	r0, #0
1000bb28:	d0b2      	beq.n	1000ba90 <_Z8FindDemov+0xef0>
				if ((y < 1) || (y >= MAPH-1))
1000bb2a:	9801      	ldr	r0, [sp, #4]
1000bb2c:	2811      	cmp	r0, #17
1000bb2e:	d800      	bhi.n	1000bb32 <_Z8FindDemov+0xf92>
1000bb30:	e739      	b.n	1000b9a6 <_Z8FindDemov+0xe06>
					ok = False;
1000bb32:	2300      	movs	r3, #0
1000bb34:	f7ff fadc 	bl	1000b0f0 <_Z8FindDemov+0x550>
			if (b != 0)
1000bb38:	980a      	ldr	r0, [sp, #40]	; 0x28
1000bb3a:	2800      	cmp	r0, #0
1000bb3c:	d096      	beq.n	1000ba6c <_Z8FindDemov+0xecc>
				if ((y < 1) || (y >= MAPH-1))
1000bb3e:	2e11      	cmp	r6, #17
1000bb40:	d800      	bhi.n	1000bb44 <_Z8FindDemov+0xfa4>
1000bb42:	e74f      	b.n	1000b9e4 <_Z8FindDemov+0xe44>
					ok = False;
1000bb44:	2300      	movs	r3, #0
1000bb46:	f7ff faac 	bl	1000b0a2 <_Z8FindDemov+0x502>
			if (b != 0)
1000bb4a:	9809      	ldr	r0, [sp, #36]	; 0x24
1000bb4c:	2800      	cmp	r0, #0
1000bb4e:	d028      	beq.n	1000bba2 <_Z8FindDemov+0x1002>
				if ((y < 1) || (y >= MAPH-1))
1000bb50:	4640      	mov	r0, r8
1000bb52:	2811      	cmp	r0, #17
1000bb54:	d900      	bls.n	1000bb58 <_Z8FindDemov+0xfb8>
1000bb56:	e464      	b.n	1000b422 <_Z8FindDemov+0x882>
1000bb58:	e6d5      	b.n	1000b906 <_Z8FindDemov+0xd66>
					if (*d != TILE_EMPTY) ok = False;
1000bb5a:	7848      	ldrb	r0, [r1, #1]
1000bb5c:	3808      	subs	r0, #8
1000bb5e:	4244      	negs	r4, r0
1000bb60:	4160      	adcs	r0, r4
1000bb62:	4240      	negs	r0, r0
1000bb64:	4003      	ands	r3, r0
			if (b != 0)
1000bb66:	980b      	ldr	r0, [sp, #44]	; 0x2c
1000bb68:	2800      	cmp	r0, #0
1000bb6a:	d001      	beq.n	1000bb70 <_Z8FindDemov+0xfd0>
1000bb6c:	f7ff fbe6 	bl	1000b33c <_Z8FindDemov+0x79c>
1000bb70:	e663      	b.n	1000b83a <_Z8FindDemov+0xc9a>
					ok = False;
1000bb72:	2300      	movs	r3, #0
1000bb74:	e651      	b.n	1000b81a <_Z8FindDemov+0xc7a>
			if (b != 0)
1000bb76:	980a      	ldr	r0, [sp, #40]	; 0x28
1000bb78:	2800      	cmp	r0, #0
1000bb7a:	d0b8      	beq.n	1000baee <_Z8FindDemov+0xf4e>
				if ((y < 1) || (y >= MAPH-1))
1000bb7c:	2a11      	cmp	r2, #17
1000bb7e:	d800      	bhi.n	1000bb82 <_Z8FindDemov+0xfe2>
1000bb80:	e67c      	b.n	1000b87c <_Z8FindDemov+0xcdc>
					ok = False;
1000bb82:	2300      	movs	r3, #0
1000bb84:	f7ff fc0a 	bl	1000b39c <_Z8FindDemov+0x7fc>
		while (CheckBrick(BrickX-1, BrickY, Brick)) BrickX--;
1000bb88:	2b00      	cmp	r3, #0
1000bb8a:	d101      	bne.n	1000bb90 <_Z8FindDemov+0xff0>
1000bb8c:	f7ff fad7 	bl	1000b13e <_Z8FindDemov+0x59e>
1000bb90:	2301      	movs	r3, #1
1000bb92:	0017      	movs	r7, r2
1000bb94:	9312      	str	r3, [sp, #72]	; 0x48
1000bb96:	f7ff fa36 	bl	1000b006 <_Z8FindDemov+0x466>
			if (b != 0)
1000bb9a:	9809      	ldr	r0, [sp, #36]	; 0x24
1000bb9c:	2800      	cmp	r0, #0
1000bb9e:	d000      	beq.n	1000bba2 <_Z8FindDemov+0x1002>
1000bba0:	e6b1      	b.n	1000b906 <_Z8FindDemov+0xd66>
1000bba2:	7bf0      	ldrb	r0, [r6, #15]
1000bba4:	2800      	cmp	r0, #0
1000bba6:	d100      	bne.n	1000bbaa <_Z8FindDemov+0x100a>
1000bba8:	e6b6      	b.n	1000b918 <_Z8FindDemov+0xd78>
				if ((y < 1) || (y >= MAPH-1))
1000bbaa:	4640      	mov	r0, r8
1000bbac:	2811      	cmp	r0, #17
1000bbae:	d800      	bhi.n	1000bbb2 <_Z8FindDemov+0x1012>
1000bbb0:	e432      	b.n	1000b418 <_Z8FindDemov+0x878>
1000bbb2:	e436      	b.n	1000b422 <_Z8FindDemov+0x882>
			if (b != 0)
1000bbb4:	9809      	ldr	r0, [sp, #36]	; 0x24
1000bbb6:	2800      	cmp	r0, #0
1000bbb8:	d000      	beq.n	1000bbbc <_Z8FindDemov+0x101c>
1000bbba:	e6d1      	b.n	1000b960 <_Z8FindDemov+0xdc0>
1000bbbc:	7be0      	ldrb	r0, [r4, #15]
1000bbbe:	2800      	cmp	r0, #0
1000bbc0:	d0e2      	beq.n	1000bb88 <_Z8FindDemov+0xfe8>
				if ((y < 1) || (y >= MAPH-1))
1000bbc2:	4640      	mov	r0, r8
1000bbc4:	2811      	cmp	r0, #17
1000bbc6:	d801      	bhi.n	1000bbcc <_Z8FindDemov+0x102c>
1000bbc8:	f7ff fab3 	bl	1000b132 <_Z8FindDemov+0x592>
1000bbcc:	f7ff fab7 	bl	1000b13e <_Z8FindDemov+0x59e>
			if (!CheckBrick(BrickX+1, BrickY, Brick)) break;
1000bbd0:	2700      	movs	r7, #0
1000bbd2:	482e      	ldr	r0, [pc, #184]	; (1000bc8c <_Z8FindDemov+0x10ec>)
1000bbd4:	f003 fe06 	bl	1000f7e4 <_ZN7cRandom2U8Ev>
1000bbd8:	2100      	movs	r1, #0
1000bbda:	4b2b      	ldr	r3, [pc, #172]	; (1000bc88 <_Z8FindDemov+0x10e8>)
			b = *s++;
1000bbdc:	4a2c      	ldr	r2, [pc, #176]	; (1000bc90 <_Z8FindDemov+0x10f0>)
			if (!CheckBrick(BrickX+1, BrickY, Brick)) break;
1000bbde:	57df      	ldrsb	r7, [r3, r7]
1000bbe0:	4b2c      	ldr	r3, [pc, #176]	; (1000bc94 <_Z8FindDemov+0x10f4>)
	const u8* s = &BrickTemp[brick*BRICKTEMPSIZE];
1000bbe2:	4e2b      	ldr	r6, [pc, #172]	; (1000bc90 <_Z8FindDemov+0x10f0>)
			if (!CheckBrick(BrickX+1, BrickY, Brick)) break;
1000bbe4:	5659      	ldrsb	r1, [r3, r1]
1000bbe6:	4b2c      	ldr	r3, [pc, #176]	; (1000bc98 <_Z8FindDemov+0x10f8>)
1000bbe8:	910d      	str	r1, [sp, #52]	; 0x34
1000bbea:	781b      	ldrb	r3, [r3, #0]
1000bbec:	930e      	str	r3, [sp, #56]	; 0x38
	const u8* s = &BrickTemp[brick*BRICKTEMPSIZE];
1000bbee:	011b      	lsls	r3, r3, #4
1000bbf0:	469c      	mov	ip, r3
1000bbf2:	9310      	str	r3, [sp, #64]	; 0x40
			b = *s++;
1000bbf4:	5cd3      	ldrb	r3, [r2, r3]
	const u8* s = &BrickTemp[brick*BRICKTEMPSIZE];
1000bbf6:	4466      	add	r6, ip
			b = *s++;
1000bbf8:	4699      	mov	r9, r3
1000bbfa:	7933      	ldrb	r3, [r6, #4]
1000bbfc:	9303      	str	r3, [sp, #12]
1000bbfe:	7973      	ldrb	r3, [r6, #5]
1000bc00:	9308      	str	r3, [sp, #32]
1000bc02:	79b3      	ldrb	r3, [r6, #6]
1000bc04:	930a      	str	r3, [sp, #40]	; 0x28
1000bc06:	7a33      	ldrb	r3, [r6, #8]
1000bc08:	9302      	str	r3, [sp, #8]
1000bc0a:	7a73      	ldrb	r3, [r6, #9]
1000bc0c:	9307      	str	r3, [sp, #28]
1000bc0e:	7ab3      	ldrb	r3, [r6, #10]
1000bc10:	9306      	str	r3, [sp, #24]
1000bc12:	7b33      	ldrb	r3, [r6, #12]
1000bc14:	9304      	str	r3, [sp, #16]
1000bc16:	7b73      	ldrb	r3, [r6, #13]
1000bc18:	930c      	str	r3, [sp, #48]	; 0x30
1000bc1a:	7bb3      	ldrb	r3, [r6, #14]
1000bc1c:	9309      	str	r3, [sp, #36]	; 0x24
1000bc1e:	78b3      	ldrb	r3, [r6, #2]
1000bc20:	930b      	str	r3, [sp, #44]	; 0x2c
1000bc22:	7873      	ldrb	r3, [r6, #1]
1000bc24:	9305      	str	r3, [sp, #20]
			if ((score > bestscore) || ((score == bestscore) && (RandU8() < 0x50)))
1000bc26:	284f      	cmp	r0, #79	; 0x4f
1000bc28:	d805      	bhi.n	1000bc36 <_Z8FindDemov+0x1096>
				bestbrick = savebrick;
1000bc2a:	9b14      	ldr	r3, [sp, #80]	; 0x50
1000bc2c:	9317      	str	r3, [sp, #92]	; 0x5c
				besty = savey;
1000bc2e:	9b12      	ldr	r3, [sp, #72]	; 0x48
1000bc30:	9316      	str	r3, [sp, #88]	; 0x58
				bestx = savex;
1000bc32:	9b11      	ldr	r3, [sp, #68]	; 0x44
1000bc34:	9315      	str	r3, [sp, #84]	; 0x54
1000bc36:	004b      	lsls	r3, r1, #1
1000bc38:	930f      	str	r3, [sp, #60]	; 0x3c
1000bc3a:	f7ff fb4e 	bl	1000b2da <_Z8FindDemov+0x73a>
			b = *s++;
1000bc3e:	7ba1      	ldrb	r1, [r4, #14]
1000bc40:	9109      	str	r1, [sp, #36]	; 0x24
			if (b != 0)
1000bc42:	2900      	cmp	r1, #0
1000bc44:	d100      	bne.n	1000bc48 <_Z8FindDemov+0x10a8>
1000bc46:	e13d      	b.n	1000bec4 <_Z8FindDemov+0x1324>
				if ((y < 1) || (y >= MAPH-1))
1000bc48:	4641      	mov	r1, r8
1000bc4a:	2911      	cmp	r1, #17
1000bc4c:	d901      	bls.n	1000bc52 <_Z8FindDemov+0x10b2>
1000bc4e:	f7ff f8dd 	bl	1000ae0c <_Z8FindDemov+0x26c>
					if (*d != TILE_EMPTY) ok = False;
1000bc52:	2153      	movs	r1, #83	; 0x53
1000bc54:	5c51      	ldrb	r1, [r2, r1]
1000bc56:	2908      	cmp	r1, #8
1000bc58:	d001      	beq.n	1000bc5e <_Z8FindDemov+0x10be>
1000bc5a:	f7ff f8d7 	bl	1000ae0c <_Z8FindDemov+0x26c>
			b = *s++;
1000bc5e:	7be1      	ldrb	r1, [r4, #15]
			if (b != 0)
1000bc60:	2900      	cmp	r1, #0
1000bc62:	d000      	beq.n	1000bc66 <_Z8FindDemov+0x10c6>
1000bc64:	e13a      	b.n	1000bedc <_Z8FindDemov+0x133c>
	if (res)
1000bc66:	2b00      	cmp	r3, #0
1000bc68:	d101      	bne.n	1000bc6e <_Z8FindDemov+0x10ce>
1000bc6a:	f7ff f8cf 	bl	1000ae0c <_Z8FindDemov+0x26c>
		Brick = brick;
1000bc6e:	4b0a      	ldr	r3, [pc, #40]	; (1000bc98 <_Z8FindDemov+0x10f8>)
1000bc70:	9a0e      	ldr	r2, [sp, #56]	; 0x38
1000bc72:	701a      	strb	r2, [r3, #0]
				if ((y < 1) || (y >= MAPH-1))
1000bc74:	2301      	movs	r3, #1
1000bc76:	425b      	negs	r3, r3
1000bc78:	469c      	mov	ip, r3
1000bc7a:	44e3      	add	fp, ip
1000bc7c:	465b      	mov	r3, fp
1000bc7e:	b2db      	uxtb	r3, r3
1000bc80:	469b      	mov	fp, r3
1000bc82:	f7ff f9a8 	bl	1000afd6 <_Z8FindDemov+0x436>
1000bc86:	46c0      	nop			; (mov r8, r8)
1000bc88:	20012765 	.word	0x20012765
1000bc8c:	20003050 	.word	0x20003050
1000bc90:	10010bd4 	.word	0x10010bd4
1000bc94:	20012766 	.word	0x20012766
1000bc98:	20012764 	.word	0x20012764
			b = *s++;
1000bc9c:	7a63      	ldrb	r3, [r4, #9]
			if (b != 0)
1000bc9e:	2b00      	cmp	r3, #0
1000bca0:	d101      	bne.n	1000bca6 <_Z8FindDemov+0x1106>
1000bca2:	f7ff f892 	bl	1000adca <_Z8FindDemov+0x22a>
			b = *s++;
1000bca6:	7aa3      	ldrb	r3, [r4, #10]
			if (b != 0)
1000bca8:	2b00      	cmp	r3, #0
1000bcaa:	d109      	bne.n	1000bcc0 <_Z8FindDemov+0x1120>
1000bcac:	7ae1      	ldrb	r1, [r4, #11]
1000bcae:	2900      	cmp	r1, #0
1000bcb0:	d101      	bne.n	1000bcb6 <_Z8FindDemov+0x1116>
1000bcb2:	f7ff f88a 	bl	1000adca <_Z8FindDemov+0x22a>
				if ((y < 1) || (y >= MAPH-1))
1000bcb6:	9901      	ldr	r1, [sp, #4]
1000bcb8:	2911      	cmp	r1, #17
1000bcba:	d801      	bhi.n	1000bcc0 <_Z8FindDemov+0x1120>
1000bcbc:	f7ff f87e 	bl	1000adbc <_Z8FindDemov+0x21c>
					ok = False;
1000bcc0:	2300      	movs	r3, #0
1000bcc2:	f7ff f882 	bl	1000adca <_Z8FindDemov+0x22a>
			if (b != 0)
1000bcc6:	7aa1      	ldrb	r1, [r4, #10]
1000bcc8:	2900      	cmp	r1, #0
1000bcca:	d0ef      	beq.n	1000bcac <_Z8FindDemov+0x110c>
				if ((y < 1) || (y >= MAPH-1))
1000bccc:	9901      	ldr	r1, [sp, #4]
1000bcce:	2911      	cmp	r1, #17
1000bcd0:	d801      	bhi.n	1000bcd6 <_Z8FindDemov+0x1136>
1000bcd2:	f7ff f869 	bl	1000ada8 <_Z8FindDemov+0x208>
					ok = False;
1000bcd6:	2300      	movs	r3, #0
1000bcd8:	f7ff f877 	bl	1000adca <_Z8FindDemov+0x22a>
			b = *s++;
1000bcdc:	7963      	ldrb	r3, [r4, #5]
			if (b != 0)
1000bcde:	2b00      	cmp	r3, #0
1000bce0:	d100      	bne.n	1000bce4 <_Z8FindDemov+0x1144>
1000bce2:	e446      	b.n	1000b572 <_Z8FindDemov+0x9d2>
			b = *s++;
1000bce4:	79a3      	ldrb	r3, [r4, #6]
			if (b != 0)
1000bce6:	2b00      	cmp	r3, #0
1000bce8:	d107      	bne.n	1000bcfa <_Z8FindDemov+0x115a>
1000bcea:	79e1      	ldrb	r1, [r4, #7]
1000bcec:	2900      	cmp	r1, #0
1000bcee:	d100      	bne.n	1000bcf2 <_Z8FindDemov+0x1152>
1000bcf0:	e43f      	b.n	1000b572 <_Z8FindDemov+0x9d2>
				if ((y < 1) || (y >= MAPH-1))
1000bcf2:	4659      	mov	r1, fp
1000bcf4:	2911      	cmp	r1, #17
1000bcf6:	d800      	bhi.n	1000bcfa <_Z8FindDemov+0x115a>
1000bcf8:	e435      	b.n	1000b566 <_Z8FindDemov+0x9c6>
					ok = False;
1000bcfa:	2300      	movs	r3, #0
1000bcfc:	e439      	b.n	1000b572 <_Z8FindDemov+0x9d2>
			if (b != 0)
1000bcfe:	79a1      	ldrb	r1, [r4, #6]
1000bd00:	2900      	cmp	r1, #0
1000bd02:	d0f2      	beq.n	1000bcea <_Z8FindDemov+0x114a>
				if ((y < 1) || (y >= MAPH-1))
1000bd04:	4659      	mov	r1, fp
1000bd06:	2911      	cmp	r1, #17
1000bd08:	d800      	bhi.n	1000bd0c <_Z8FindDemov+0x116c>
1000bd0a:	e423      	b.n	1000b554 <_Z8FindDemov+0x9b4>
					ok = False;
1000bd0c:	2300      	movs	r3, #0
1000bd0e:	e430      	b.n	1000b572 <_Z8FindDemov+0x9d2>
					if (*d != TILE_EMPTY) ok = False;
1000bd10:	7851      	ldrb	r1, [r2, #1]
1000bd12:	3908      	subs	r1, #8
1000bd14:	4248      	negs	r0, r1
1000bd16:	4141      	adcs	r1, r0
1000bd18:	4249      	negs	r1, r1
1000bd1a:	400b      	ands	r3, r1
			if (b != 0)
1000bd1c:	78a1      	ldrb	r1, [r4, #2]
1000bd1e:	2900      	cmp	r1, #0
1000bd20:	d101      	bne.n	1000bd26 <_Z8FindDemov+0x1186>
1000bd22:	f7fe fff3 	bl	1000ad0c <_Z8FindDemov+0x16c>
					if (*d != TILE_EMPTY) ok = False;
1000bd26:	7891      	ldrb	r1, [r2, #2]
1000bd28:	3908      	subs	r1, #8
1000bd2a:	4248      	negs	r0, r1
1000bd2c:	4141      	adcs	r1, r0
1000bd2e:	4249      	negs	r1, r1
1000bd30:	400b      	ands	r3, r1
			if (b != 0)
1000bd32:	78e1      	ldrb	r1, [r4, #3]
1000bd34:	2900      	cmp	r1, #0
1000bd36:	d101      	bne.n	1000bd3c <_Z8FindDemov+0x119c>
1000bd38:	f7fe fff2 	bl	1000ad20 <_Z8FindDemov+0x180>
					if (*d != TILE_EMPTY) ok = False;
1000bd3c:	78d1      	ldrb	r1, [r2, #3]
1000bd3e:	3908      	subs	r1, #8
1000bd40:	4248      	negs	r0, r1
1000bd42:	4141      	adcs	r1, r0
1000bd44:	4249      	negs	r1, r1
1000bd46:	400b      	ands	r3, r1
1000bd48:	f7fe ffea 	bl	1000ad20 <_Z8FindDemov+0x180>
					ok = False;
1000bd4c:	2300      	movs	r3, #0
1000bd4e:	f7ff fbd7 	bl	1000b500 <_Z8FindDemov+0x960>
			b = *s++;
1000bd52:	7863      	ldrb	r3, [r4, #1]
			if (b != 0)
1000bd54:	2b00      	cmp	r3, #0
1000bd56:	d100      	bne.n	1000bd5a <_Z8FindDemov+0x11ba>
1000bd58:	e0c7      	b.n	1000beea <_Z8FindDemov+0x134a>
				if ((y < 1) || (y >= MAPH-1))
1000bd5a:	465b      	mov	r3, fp
1000bd5c:	2b11      	cmp	r3, #17
1000bd5e:	d901      	bls.n	1000bd64 <_Z8FindDemov+0x11c4>
1000bd60:	f7ff f879 	bl	1000ae56 <_Z8FindDemov+0x2b6>
	Bool ok = True;
1000bd64:	2301      	movs	r3, #1
					if (*d != TILE_EMPTY) ok = False;
1000bd66:	7851      	ldrb	r1, [r2, #1]
1000bd68:	3908      	subs	r1, #8
1000bd6a:	4248      	negs	r0, r1
1000bd6c:	4141      	adcs	r1, r0
1000bd6e:	4249      	negs	r1, r1
1000bd70:	400b      	ands	r3, r1
			if (b != 0)
1000bd72:	78a1      	ldrb	r1, [r4, #2]
1000bd74:	2900      	cmp	r1, #0
1000bd76:	d101      	bne.n	1000bd7c <_Z8FindDemov+0x11dc>
1000bd78:	f7ff f870 	bl	1000ae5c <_Z8FindDemov+0x2bc>
					if (*d != TILE_EMPTY) ok = False;
1000bd7c:	7891      	ldrb	r1, [r2, #2]
1000bd7e:	3908      	subs	r1, #8
1000bd80:	4248      	negs	r0, r1
1000bd82:	4141      	adcs	r1, r0
1000bd84:	4249      	negs	r1, r1
1000bd86:	400b      	ands	r3, r1
			if (b != 0)
1000bd88:	78e1      	ldrb	r1, [r4, #3]
1000bd8a:	2900      	cmp	r1, #0
1000bd8c:	d005      	beq.n	1000bd9a <_Z8FindDemov+0x11fa>
					if (*d != TILE_EMPTY) ok = False;
1000bd8e:	78d1      	ldrb	r1, [r2, #3]
					ok = False;
1000bd90:	3908      	subs	r1, #8
1000bd92:	4248      	negs	r0, r1
1000bd94:	4141      	adcs	r1, r0
1000bd96:	4249      	negs	r1, r1
1000bd98:	400b      	ands	r3, r1
			b = *s++;
1000bd9a:	7921      	ldrb	r1, [r4, #4]
1000bd9c:	9103      	str	r1, [sp, #12]
			if (b != 0)
1000bd9e:	2900      	cmp	r1, #0
1000bda0:	d101      	bne.n	1000bda6 <_Z8FindDemov+0x1206>
1000bda2:	f7ff f86c 	bl	1000ae7e <_Z8FindDemov+0x2de>
				if ((y < 1) || (y >= MAPH-1))
1000bda6:	9901      	ldr	r1, [sp, #4]
1000bda8:	2911      	cmp	r1, #17
1000bdaa:	d900      	bls.n	1000bdae <_Z8FindDemov+0x120e>
1000bdac:	e0e0      	b.n	1000bf70 <_Z8FindDemov+0x13d0>
					if (*d != TILE_EMPTY) ok = False;
1000bdae:	7ed1      	ldrb	r1, [r2, #27]
1000bdb0:	3908      	subs	r1, #8
1000bdb2:	4248      	negs	r0, r1
1000bdb4:	4141      	adcs	r1, r0
1000bdb6:	4249      	negs	r1, r1
1000bdb8:	400b      	ands	r3, r1
			if (b != 0)
1000bdba:	7961      	ldrb	r1, [r4, #5]
1000bdbc:	2900      	cmp	r1, #0
1000bdbe:	d001      	beq.n	1000bdc4 <_Z8FindDemov+0x1224>
1000bdc0:	f7ff f867 	bl	1000ae92 <_Z8FindDemov+0x2f2>
1000bdc4:	79a1      	ldrb	r1, [r4, #6]
1000bdc6:	2900      	cmp	r1, #0
1000bdc8:	d100      	bne.n	1000bdcc <_Z8FindDemov+0x122c>
1000bdca:	e115      	b.n	1000bff8 <_Z8FindDemov+0x1458>
					if (*d != TILE_EMPTY) ok = False;
1000bdcc:	7f51      	ldrb	r1, [r2, #29]
1000bdce:	3908      	subs	r1, #8
1000bdd0:	4248      	negs	r0, r1
1000bdd2:	4141      	adcs	r1, r0
1000bdd4:	4249      	negs	r1, r1
1000bdd6:	400b      	ands	r3, r1
			if (b != 0)
1000bdd8:	79e1      	ldrb	r1, [r4, #7]
1000bdda:	2900      	cmp	r1, #0
1000bddc:	d005      	beq.n	1000bdea <_Z8FindDemov+0x124a>
					if (*d != TILE_EMPTY) ok = False;
1000bdde:	7f91      	ldrb	r1, [r2, #30]
					ok = False;
1000bde0:	3908      	subs	r1, #8
1000bde2:	4248      	negs	r0, r1
1000bde4:	4141      	adcs	r1, r0
1000bde6:	4249      	negs	r1, r1
1000bde8:	400b      	ands	r3, r1
			b = *s++;
1000bdea:	7a21      	ldrb	r1, [r4, #8]
1000bdec:	9102      	str	r1, [sp, #8]
			if (b != 0)
1000bdee:	2900      	cmp	r1, #0
1000bdf0:	d101      	bne.n	1000bdf6 <_Z8FindDemov+0x1256>
1000bdf2:	f7ff f86a 	bl	1000aeca <_Z8FindDemov+0x32a>
				if ((y < 1) || (y >= MAPH-1))
1000bdf6:	4641      	mov	r1, r8
1000bdf8:	2911      	cmp	r1, #17
1000bdfa:	d900      	bls.n	1000bdfe <_Z8FindDemov+0x125e>
1000bdfc:	e0a0      	b.n	1000bf40 <_Z8FindDemov+0x13a0>
					if (*d != TILE_EMPTY) ok = False;
1000bdfe:	2136      	movs	r1, #54	; 0x36
1000be00:	5c51      	ldrb	r1, [r2, r1]
1000be02:	3908      	subs	r1, #8
1000be04:	4248      	negs	r0, r1
1000be06:	4141      	adcs	r1, r0
1000be08:	4249      	negs	r1, r1
1000be0a:	400b      	ands	r3, r1
			if (b != 0)
1000be0c:	7a61      	ldrb	r1, [r4, #9]
1000be0e:	2900      	cmp	r1, #0
1000be10:	d001      	beq.n	1000be16 <_Z8FindDemov+0x1276>
1000be12:	f7ff f864 	bl	1000aede <_Z8FindDemov+0x33e>
1000be16:	7aa1      	ldrb	r1, [r4, #10]
1000be18:	2900      	cmp	r1, #0
1000be1a:	d100      	bne.n	1000be1e <_Z8FindDemov+0x127e>
1000be1c:	e0e7      	b.n	1000bfee <_Z8FindDemov+0x144e>
					if (*d != TILE_EMPTY) ok = False;
1000be1e:	2138      	movs	r1, #56	; 0x38
1000be20:	5c51      	ldrb	r1, [r2, r1]
1000be22:	3908      	subs	r1, #8
1000be24:	4248      	negs	r0, r1
1000be26:	4141      	adcs	r1, r0
1000be28:	4249      	negs	r1, r1
1000be2a:	400b      	ands	r3, r1
			if (b != 0)
1000be2c:	7ae1      	ldrb	r1, [r4, #11]
1000be2e:	2900      	cmp	r1, #0
1000be30:	d006      	beq.n	1000be40 <_Z8FindDemov+0x12a0>
					if (*d != TILE_EMPTY) ok = False;
1000be32:	2139      	movs	r1, #57	; 0x39
1000be34:	5c51      	ldrb	r1, [r2, r1]
					ok = False;
1000be36:	3908      	subs	r1, #8
1000be38:	4248      	negs	r0, r1
1000be3a:	4141      	adcs	r1, r0
1000be3c:	4249      	negs	r1, r1
1000be3e:	400b      	ands	r3, r1
		y++;
1000be40:	4659      	mov	r1, fp
1000be42:	1cce      	adds	r6, r1, #3
			b = *s++;
1000be44:	7b21      	ldrb	r1, [r4, #12]
		y++;
1000be46:	b2f6      	uxtb	r6, r6
			b = *s++;
1000be48:	9104      	str	r1, [sp, #16]
			if (b != 0)
1000be4a:	2900      	cmp	r1, #0
1000be4c:	d101      	bne.n	1000be52 <_Z8FindDemov+0x12b2>
1000be4e:	f7ff f866 	bl	1000af1e <_Z8FindDemov+0x37e>
				if ((y < 1) || (y >= MAPH-1))
1000be52:	2e11      	cmp	r6, #17
1000be54:	d901      	bls.n	1000be5a <_Z8FindDemov+0x12ba>
1000be56:	f7ff f883 	bl	1000af60 <_Z8FindDemov+0x3c0>
					if (*d != TILE_EMPTY) ok = False;
1000be5a:	2151      	movs	r1, #81	; 0x51
1000be5c:	5c51      	ldrb	r1, [r2, r1]
1000be5e:	3908      	subs	r1, #8
1000be60:	4248      	negs	r0, r1
1000be62:	4141      	adcs	r1, r0
1000be64:	4249      	negs	r1, r1
1000be66:	400b      	ands	r3, r1
			if (b != 0)
1000be68:	7b61      	ldrb	r1, [r4, #13]
1000be6a:	2900      	cmp	r1, #0
1000be6c:	d001      	beq.n	1000be72 <_Z8FindDemov+0x12d2>
1000be6e:	f7ff f85d 	bl	1000af2c <_Z8FindDemov+0x38c>
			b = *s++;
1000be72:	7ba1      	ldrb	r1, [r4, #14]
			if (b != 0)
1000be74:	2900      	cmp	r1, #0
1000be76:	d100      	bne.n	1000be7a <_Z8FindDemov+0x12da>
1000be78:	e0b4      	b.n	1000bfe4 <_Z8FindDemov+0x1444>
1000be7a:	9109      	str	r1, [sp, #36]	; 0x24
					if (*d != TILE_EMPTY) ok = False;
1000be7c:	2153      	movs	r1, #83	; 0x53
1000be7e:	5c51      	ldrb	r1, [r2, r1]
1000be80:	2908      	cmp	r1, #8
1000be82:	d001      	beq.n	1000be88 <_Z8FindDemov+0x12e8>
1000be84:	f7ff f86c 	bl	1000af60 <_Z8FindDemov+0x3c0>
			if (b != 0)
1000be88:	7be1      	ldrb	r1, [r4, #15]
1000be8a:	2900      	cmp	r1, #0
1000be8c:	d000      	beq.n	1000be90 <_Z8FindDemov+0x12f0>
1000be8e:	e097      	b.n	1000bfc0 <_Z8FindDemov+0x1420>
	if (res)
1000be90:	2b00      	cmp	r3, #0
1000be92:	d101      	bne.n	1000be98 <_Z8FindDemov+0x12f8>
1000be94:	f7ff f864 	bl	1000af60 <_Z8FindDemov+0x3c0>
		BrickX = x;
1000be98:	4652      	mov	r2, sl
1000be9a:	4b5a      	ldr	r3, [pc, #360]	; (1000c004 <_Z8FindDemov+0x1464>)
1000be9c:	701a      	strb	r2, [r3, #0]
		BrickY = y;
1000be9e:	4b5a      	ldr	r3, [pc, #360]	; (1000c008 <_Z8FindDemov+0x1468>)
1000bea0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
1000bea2:	701a      	strb	r2, [r3, #0]
		Brick = brick;
1000bea4:	4b59      	ldr	r3, [pc, #356]	; (1000c00c <_Z8FindDemov+0x146c>)
1000bea6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
1000bea8:	701a      	strb	r2, [r3, #0]
		y++;
1000beaa:	9b01      	ldr	r3, [sp, #4]
1000beac:	001d      	movs	r5, r3
1000beae:	4643      	mov	r3, r8
1000beb0:	46b0      	mov	r8, r6
1000beb2:	9301      	str	r3, [sp, #4]
1000beb4:	f7ff f88f 	bl	1000afd6 <_Z8FindDemov+0x436>
			b = *s++;
1000beb8:	7ba1      	ldrb	r1, [r4, #14]
1000beba:	9109      	str	r1, [sp, #36]	; 0x24
			if (b != 0)
1000bebc:	2900      	cmp	r1, #0
1000bebe:	d001      	beq.n	1000bec4 <_Z8FindDemov+0x1324>
1000bec0:	f7fe ff9e 	bl	1000ae00 <_Z8FindDemov+0x260>
			b = *s++;
1000bec4:	7be1      	ldrb	r1, [r4, #15]
1000bec6:	9109      	str	r1, [sp, #36]	; 0x24
			if (b != 0)
1000bec8:	2900      	cmp	r1, #0
1000beca:	d100      	bne.n	1000bece <_Z8FindDemov+0x132e>
1000becc:	e6cb      	b.n	1000bc66 <_Z8FindDemov+0x10c6>
				if ((y < 1) || (y >= MAPH-1))
1000bece:	4641      	mov	r1, r8
1000bed0:	2911      	cmp	r1, #17
1000bed2:	d901      	bls.n	1000bed8 <_Z8FindDemov+0x1338>
1000bed4:	f7fe ff9a 	bl	1000ae0c <_Z8FindDemov+0x26c>
1000bed8:	2100      	movs	r1, #0
1000beda:	9109      	str	r1, [sp, #36]	; 0x24
					if (*d != TILE_EMPTY) ok = False;
1000bedc:	2154      	movs	r1, #84	; 0x54
1000bede:	5c52      	ldrb	r2, [r2, r1]
1000bee0:	2a08      	cmp	r2, #8
1000bee2:	d001      	beq.n	1000bee8 <_Z8FindDemov+0x1348>
1000bee4:	f7fe ff92 	bl	1000ae0c <_Z8FindDemov+0x26c>
1000bee8:	e6bd      	b.n	1000bc66 <_Z8FindDemov+0x10c6>
			if (b != 0)
1000beea:	78a1      	ldrb	r1, [r4, #2]
1000beec:	2900      	cmp	r1, #0
1000beee:	d06e      	beq.n	1000bfce <_Z8FindDemov+0x142e>
				if ((y < 1) || (y >= MAPH-1))
1000bef0:	4659      	mov	r1, fp
1000bef2:	2911      	cmp	r1, #17
1000bef4:	d900      	bls.n	1000bef8 <_Z8FindDemov+0x1358>
1000bef6:	e750      	b.n	1000bd9a <_Z8FindDemov+0x11fa>
	Bool ok = True;
1000bef8:	2301      	movs	r3, #1
1000befa:	e73f      	b.n	1000bd7c <_Z8FindDemov+0x11dc>
					if (*d != TILE_EMPTY) ok = False;
1000befc:	4944      	ldr	r1, [pc, #272]	; (1000c010 <_Z8FindDemov+0x1470>)
1000befe:	5ccb      	ldrb	r3, [r1, r3]
1000bf00:	3b08      	subs	r3, #8
1000bf02:	4259      	negs	r1, r3
1000bf04:	414b      	adcs	r3, r1
			if (b != 0)
1000bf06:	7861      	ldrb	r1, [r4, #1]
	Bool ok = True;
1000bf08:	b2db      	uxtb	r3, r3
			if (b != 0)
1000bf0a:	2900      	cmp	r1, #0
1000bf0c:	d000      	beq.n	1000bf10 <_Z8FindDemov+0x1370>
1000bf0e:	e72a      	b.n	1000bd66 <_Z8FindDemov+0x11c6>
1000bf10:	78a1      	ldrb	r1, [r4, #2]
1000bf12:	2900      	cmp	r1, #0
1000bf14:	d000      	beq.n	1000bf18 <_Z8FindDemov+0x1378>
1000bf16:	e731      	b.n	1000bd7c <_Z8FindDemov+0x11dc>
1000bf18:	78e1      	ldrb	r1, [r4, #3]
1000bf1a:	2900      	cmp	r1, #0
1000bf1c:	d000      	beq.n	1000bf20 <_Z8FindDemov+0x1380>
1000bf1e:	e736      	b.n	1000bd8e <_Z8FindDemov+0x11ee>
1000bf20:	e73b      	b.n	1000bd9a <_Z8FindDemov+0x11fa>
			b = *s++;
1000bf22:	7ba1      	ldrb	r1, [r4, #14]
1000bf24:	9109      	str	r1, [sp, #36]	; 0x24
			if (b != 0)
1000bf26:	2900      	cmp	r1, #0
1000bf28:	d03f      	beq.n	1000bfaa <_Z8FindDemov+0x140a>
				if ((y < 1) || (y >= MAPH-1))
1000bf2a:	2e11      	cmp	r6, #17
1000bf2c:	d901      	bls.n	1000bf32 <_Z8FindDemov+0x1392>
1000bf2e:	f7ff f817 	bl	1000af60 <_Z8FindDemov+0x3c0>
					if (*d != TILE_EMPTY) ok = False;
1000bf32:	2153      	movs	r1, #83	; 0x53
1000bf34:	5c51      	ldrb	r1, [r2, r1]
1000bf36:	2908      	cmp	r1, #8
1000bf38:	d001      	beq.n	1000bf3e <_Z8FindDemov+0x139e>
1000bf3a:	f7ff f811 	bl	1000af60 <_Z8FindDemov+0x3c0>
1000bf3e:	e7a3      	b.n	1000be88 <_Z8FindDemov+0x12e8>
			b = *s++;
1000bf40:	7a63      	ldrb	r3, [r4, #9]
			if (b != 0)
1000bf42:	2b00      	cmp	r3, #0
1000bf44:	d100      	bne.n	1000bf48 <_Z8FindDemov+0x13a8>
1000bf46:	e77b      	b.n	1000be40 <_Z8FindDemov+0x12a0>
			b = *s++;
1000bf48:	7aa3      	ldrb	r3, [r4, #10]
			if (b != 0)
1000bf4a:	2b00      	cmp	r3, #0
1000bf4c:	d101      	bne.n	1000bf52 <_Z8FindDemov+0x13b2>
1000bf4e:	f7fe ffd2 	bl	1000aef6 <_Z8FindDemov+0x356>
					ok = False;
1000bf52:	2300      	movs	r3, #0
1000bf54:	f7fe ffda 	bl	1000af0c <_Z8FindDemov+0x36c>
			if (b != 0)
1000bf58:	7aa1      	ldrb	r1, [r4, #10]
1000bf5a:	2900      	cmp	r1, #0
1000bf5c:	d101      	bne.n	1000bf62 <_Z8FindDemov+0x13c2>
1000bf5e:	f7fe ffca 	bl	1000aef6 <_Z8FindDemov+0x356>
				if ((y < 1) || (y >= MAPH-1))
1000bf62:	4641      	mov	r1, r8
1000bf64:	2911      	cmp	r1, #17
1000bf66:	d800      	bhi.n	1000bf6a <_Z8FindDemov+0x13ca>
1000bf68:	e759      	b.n	1000be1e <_Z8FindDemov+0x127e>
					ok = False;
1000bf6a:	2300      	movs	r3, #0
1000bf6c:	f7fe ffce 	bl	1000af0c <_Z8FindDemov+0x36c>
			b = *s++;
1000bf70:	7963      	ldrb	r3, [r4, #5]
			if (b != 0)
1000bf72:	2b00      	cmp	r3, #0
1000bf74:	d100      	bne.n	1000bf78 <_Z8FindDemov+0x13d8>
1000bf76:	e738      	b.n	1000bdea <_Z8FindDemov+0x124a>
			b = *s++;
1000bf78:	79a3      	ldrb	r3, [r4, #6]
			if (b != 0)
1000bf7a:	2b00      	cmp	r3, #0
1000bf7c:	d101      	bne.n	1000bf82 <_Z8FindDemov+0x13e2>
1000bf7e:	f7fe ff93 	bl	1000aea8 <_Z8FindDemov+0x308>
					ok = False;
1000bf82:	2300      	movs	r3, #0
1000bf84:	f7fe ff9b 	bl	1000aebe <_Z8FindDemov+0x31e>
			if (b != 0)
1000bf88:	79a1      	ldrb	r1, [r4, #6]
1000bf8a:	2900      	cmp	r1, #0
1000bf8c:	d101      	bne.n	1000bf92 <_Z8FindDemov+0x13f2>
1000bf8e:	f7fe ff8b 	bl	1000aea8 <_Z8FindDemov+0x308>
				if ((y < 1) || (y >= MAPH-1))
1000bf92:	9901      	ldr	r1, [sp, #4]
1000bf94:	2911      	cmp	r1, #17
1000bf96:	d800      	bhi.n	1000bf9a <_Z8FindDemov+0x13fa>
1000bf98:	e718      	b.n	1000bdcc <_Z8FindDemov+0x122c>
					ok = False;
1000bf9a:	2300      	movs	r3, #0
1000bf9c:	f7fe ff8f 	bl	1000aebe <_Z8FindDemov+0x31e>
			b = *s++;
1000bfa0:	7ba1      	ldrb	r1, [r4, #14]
1000bfa2:	9109      	str	r1, [sp, #36]	; 0x24
			if (b != 0)
1000bfa4:	2900      	cmp	r1, #0
1000bfa6:	d000      	beq.n	1000bfaa <_Z8FindDemov+0x140a>
1000bfa8:	e768      	b.n	1000be7c <_Z8FindDemov+0x12dc>
			b = *s++;
1000bfaa:	7be1      	ldrb	r1, [r4, #15]
1000bfac:	9109      	str	r1, [sp, #36]	; 0x24
			if (b != 0)
1000bfae:	2900      	cmp	r1, #0
1000bfb0:	d100      	bne.n	1000bfb4 <_Z8FindDemov+0x1414>
1000bfb2:	e76d      	b.n	1000be90 <_Z8FindDemov+0x12f0>
				if ((y < 1) || (y >= MAPH-1))
1000bfb4:	2e11      	cmp	r6, #17
1000bfb6:	d901      	bls.n	1000bfbc <_Z8FindDemov+0x141c>
1000bfb8:	f7fe ffd2 	bl	1000af60 <_Z8FindDemov+0x3c0>
			if (b != 0)
1000bfbc:	2100      	movs	r1, #0
1000bfbe:	9109      	str	r1, [sp, #36]	; 0x24
					if (*d != TILE_EMPTY) ok = False;
1000bfc0:	2154      	movs	r1, #84	; 0x54
1000bfc2:	5c52      	ldrb	r2, [r2, r1]
1000bfc4:	2a08      	cmp	r2, #8
1000bfc6:	d001      	beq.n	1000bfcc <_Z8FindDemov+0x142c>
1000bfc8:	f7fe ffca 	bl	1000af60 <_Z8FindDemov+0x3c0>
1000bfcc:	e760      	b.n	1000be90 <_Z8FindDemov+0x12f0>
	Bool ok = True;
1000bfce:	2301      	movs	r3, #1
1000bfd0:	f7fe ff44 	bl	1000ae5c <_Z8FindDemov+0x2bc>
					if (*d != TILE_EMPTY) ok = False;
1000bfd4:	2153      	movs	r1, #83	; 0x53
1000bfd6:	5c51      	ldrb	r1, [r2, r1]
1000bfd8:	2300      	movs	r3, #0
1000bfda:	2908      	cmp	r1, #8
1000bfdc:	d001      	beq.n	1000bfe2 <_Z8FindDemov+0x1442>
1000bfde:	f7fe ffbf 	bl	1000af60 <_Z8FindDemov+0x3c0>
1000bfe2:	e751      	b.n	1000be88 <_Z8FindDemov+0x12e8>
			b = *s++;
1000bfe4:	7be1      	ldrb	r1, [r4, #15]
1000bfe6:	9109      	str	r1, [sp, #36]	; 0x24
			if (b != 0)
1000bfe8:	2900      	cmp	r1, #0
1000bfea:	d1e7      	bne.n	1000bfbc <_Z8FindDemov+0x141c>
1000bfec:	e750      	b.n	1000be90 <_Z8FindDemov+0x12f0>
1000bfee:	7ae1      	ldrb	r1, [r4, #11]
1000bff0:	2900      	cmp	r1, #0
1000bff2:	d000      	beq.n	1000bff6 <_Z8FindDemov+0x1456>
1000bff4:	e71d      	b.n	1000be32 <_Z8FindDemov+0x1292>
1000bff6:	e723      	b.n	1000be40 <_Z8FindDemov+0x12a0>
1000bff8:	79e1      	ldrb	r1, [r4, #7]
1000bffa:	2900      	cmp	r1, #0
1000bffc:	d000      	beq.n	1000c000 <_Z8FindDemov+0x1460>
1000bffe:	e6ee      	b.n	1000bdde <_Z8FindDemov+0x123e>
1000c000:	e6f3      	b.n	1000bdea <_Z8FindDemov+0x124a>
1000c002:	46c0      	nop			; (mov r8, r8)
1000c004:	20012765 	.word	0x20012765
1000c008:	20012766 	.word	0x20012766
1000c00c:	20012764 	.word	0x20012764
1000c010:	2000327c 	.word	0x2000327c

1000c014 <_Z8PlayDemov>:

// demo mode
void PlayDemo()
{
1000c014:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c016:	46de      	mov	lr, fp
1000c018:	4657      	mov	r7, sl
1000c01a:	464e      	mov	r6, r9
1000c01c:	4645      	mov	r5, r8
	// start demo moe
	Demo = True;
1000c01e:	2401      	movs	r4, #1
{
1000c020:	b5e0      	push	{r5, r6, r7, lr}
	Demo = True;
1000c022:	4b16      	ldr	r3, [pc, #88]	; (1000c07c <_Z8PlayDemov+0x68>)
{
1000c024:	b093      	sub	sp, #76	; 0x4c
	Demo = True;
1000c026:	701c      	strb	r4, [r3, #0]
	
	// start new game
	NewGame();
1000c028:	f7fc fece 	bl	10008dc8 <_Z7NewGamev>
1000c02c:	23d0      	movs	r3, #208	; 0xd0
1000c02e:	061b      	lsls	r3, r3, #24
1000c030:	685b      	ldr	r3, [r3, #4]
1000c032:	0d1b      	lsrs	r3, r3, #20
	if (!gpio_get(PB_LT))
1000c034:	421c      	tst	r4, r3
1000c036:	d014      	beq.n	1000c062 <_Z8PlayDemov+0x4e>
			if (b != 0) *d = TILE_EMPTY;
1000c038:	3407      	adds	r4, #7
1000c03a:	23d0      	movs	r3, #208	; 0xd0
1000c03c:	061b      	lsls	r3, r3, #24
1000c03e:	6859      	ldr	r1, [r3, #4]
1000c040:	2201      	movs	r2, #1
	else if (!gpio_get(PB_RT))
1000c042:	0389      	lsls	r1, r1, #14
1000c044:	d50d      	bpl.n	1000c062 <_Z8PlayDemov+0x4e>
1000c046:	6859      	ldr	r1, [r3, #4]
1000c048:	0d89      	lsrs	r1, r1, #22
	else if (!gpio_get(PB_DN))
1000c04a:	420a      	tst	r2, r1
1000c04c:	d009      	beq.n	1000c062 <_Z8PlayDemov+0x4e>
1000c04e:	6859      	ldr	r1, [r3, #4]
1000c050:	0d49      	lsrs	r1, r1, #21
	else if (!gpio_get(PB_CF))
1000c052:	420a      	tst	r2, r1
1000c054:	d101      	bne.n	1000c05a <_Z8PlayDemov+0x46>
1000c056:	f000 fd47 	bl	1000cae8 <_Z8PlayDemov+0xad4>
1000c05a:	685b      	ldr	r3, [r3, #4]
1000c05c:	0e9b      	lsrs	r3, r3, #26
	else if (!gpio_get(PB_UR))
1000c05e:	421a      	tst	r2, r3
1000c060:	d10e      	bne.n	1000c080 <_Z8PlayDemov+0x6c>
	sleep_ms(100);
1000c062:	2064      	movs	r0, #100	; 0x64
1000c064:	f7f8 fbe8 	bl	10004838 <sleep_ms>
		// display new brick
		sleep_ms(200);
	}

	// stop demo mode
	Demo = False;
1000c068:	2300      	movs	r3, #0
1000c06a:	4a04      	ldr	r2, [pc, #16]	; (1000c07c <_Z8PlayDemov+0x68>)
1000c06c:	7013      	strb	r3, [r2, #0]
}
1000c06e:	b013      	add	sp, #76	; 0x4c
1000c070:	bcf0      	pop	{r4, r5, r6, r7}
1000c072:	46bb      	mov	fp, r7
1000c074:	46b2      	mov	sl, r6
1000c076:	46a9      	mov	r9, r5
1000c078:	46a0      	mov	r8, r4
1000c07a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c07c:	20012767 	.word	0x20012767
		FindDemo();
1000c080:	f7fe fd8e 	bl	1000aba0 <_Z8FindDemov>
		sleep_ms(200);
1000c084:	20c8      	movs	r0, #200	; 0xc8
1000c086:	f7f8 fbd7 	bl	10004838 <sleep_ms>
1000c08a:	4bca      	ldr	r3, [pc, #808]	; (1000c3b4 <_Z8PlayDemov+0x3a0>)
1000c08c:	469b      	mov	fp, r3
			sleep_ms(5*TIMEDELAY);
1000c08e:	2032      	movs	r0, #50	; 0x32
1000c090:	f7f8 fbd2 	bl	10004838 <sleep_ms>
			ClearBrick(BrickX, BrickY, Brick);
1000c094:	4bc8      	ldr	r3, [pc, #800]	; (1000c3b8 <_Z8PlayDemov+0x3a4>)
	u8* d = &Board[x + y*MAPW];
1000c096:	49c9      	ldr	r1, [pc, #804]	; (1000c3bc <_Z8PlayDemov+0x3a8>)
			ClearBrick(BrickX, BrickY, Brick);
1000c098:	781b      	ldrb	r3, [r3, #0]
	u8* d = &Board[x + y*MAPW];
1000c09a:	7809      	ldrb	r1, [r1, #0]
			ClearBrick(BrickX, BrickY, Brick);
1000c09c:	b25b      	sxtb	r3, r3
	u8* d = &Board[x + y*MAPW];
1000c09e:	0058      	lsls	r0, r3, #1
1000c0a0:	18c0      	adds	r0, r0, r3
1000c0a2:	00c5      	lsls	r5, r0, #3
1000c0a4:	1940      	adds	r0, r0, r5
1000c0a6:	b249      	sxtb	r1, r1
1000c0a8:	1840      	adds	r0, r0, r1
1000c0aa:	0005      	movs	r5, r0
	const u8* s = &BrickTemp[brick*BRICKTEMPSIZE];
1000c0ac:	4ac4      	ldr	r2, [pc, #784]	; (1000c3c0 <_Z8PlayDemov+0x3ac>)
			b = *s++;
1000c0ae:	4fc5      	ldr	r7, [pc, #788]	; (1000c3c4 <_Z8PlayDemov+0x3b0>)
	const u8* s = &BrickTemp[brick*BRICKTEMPSIZE];
1000c0b0:	7816      	ldrb	r6, [r2, #0]
1000c0b2:	4ac4      	ldr	r2, [pc, #784]	; (1000c3c4 <_Z8PlayDemov+0x3b0>)
1000c0b4:	0136      	lsls	r6, r6, #4
1000c0b6:	1992      	adds	r2, r2, r6
			b = *s++;
1000c0b8:	5dbe      	ldrb	r6, [r7, r6]
	u8* d = &Board[x + y*MAPW];
1000c0ba:	9011      	str	r0, [sp, #68]	; 0x44
1000c0bc:	445d      	add	r5, fp
			if (b != 0) *d = TILE_EMPTY;
1000c0be:	2e00      	cmp	r6, #0
1000c0c0:	d001      	beq.n	1000c0c6 <_Z8PlayDemov+0xb2>
1000c0c2:	465f      	mov	r7, fp
1000c0c4:	543c      	strb	r4, [r7, r0]
			b = *s++;
1000c0c6:	7850      	ldrb	r0, [r2, #1]
1000c0c8:	9003      	str	r0, [sp, #12]
			if (b != 0) *d = TILE_EMPTY;
1000c0ca:	2800      	cmp	r0, #0
1000c0cc:	d000      	beq.n	1000c0d0 <_Z8PlayDemov+0xbc>
1000c0ce:	706c      	strb	r4, [r5, #1]
			b = *s++;
1000c0d0:	7890      	ldrb	r0, [r2, #2]
1000c0d2:	9006      	str	r0, [sp, #24]
			if (b != 0) *d = TILE_EMPTY;
1000c0d4:	2800      	cmp	r0, #0
1000c0d6:	d000      	beq.n	1000c0da <_Z8PlayDemov+0xc6>
1000c0d8:	70ac      	strb	r4, [r5, #2]
			b = *s++;
1000c0da:	78d0      	ldrb	r0, [r2, #3]
1000c0dc:	900a      	str	r0, [sp, #40]	; 0x28
			if (b != 0) *d = TILE_EMPTY;
1000c0de:	2800      	cmp	r0, #0
1000c0e0:	d000      	beq.n	1000c0e4 <_Z8PlayDemov+0xd0>
1000c0e2:	70ec      	strb	r4, [r5, #3]
			b = *s++;
1000c0e4:	7910      	ldrb	r0, [r2, #4]
1000c0e6:	9001      	str	r0, [sp, #4]
			if (b != 0) *d = TILE_EMPTY;
1000c0e8:	2800      	cmp	r0, #0
1000c0ea:	d000      	beq.n	1000c0ee <_Z8PlayDemov+0xda>
1000c0ec:	76ec      	strb	r4, [r5, #27]
			b = *s++;
1000c0ee:	7950      	ldrb	r0, [r2, #5]
1000c0f0:	9004      	str	r0, [sp, #16]
			if (b != 0) *d = TILE_EMPTY;
1000c0f2:	2800      	cmp	r0, #0
1000c0f4:	d000      	beq.n	1000c0f8 <_Z8PlayDemov+0xe4>
1000c0f6:	772c      	strb	r4, [r5, #28]
			b = *s++;
1000c0f8:	7990      	ldrb	r0, [r2, #6]
1000c0fa:	9007      	str	r0, [sp, #28]
			if (b != 0) *d = TILE_EMPTY;
1000c0fc:	2800      	cmp	r0, #0
1000c0fe:	d000      	beq.n	1000c102 <_Z8PlayDemov+0xee>
1000c100:	776c      	strb	r4, [r5, #29]
			b = *s++;
1000c102:	79d0      	ldrb	r0, [r2, #7]
1000c104:	900b      	str	r0, [sp, #44]	; 0x2c
			if (b != 0) *d = TILE_EMPTY;
1000c106:	2800      	cmp	r0, #0
1000c108:	d000      	beq.n	1000c10c <_Z8PlayDemov+0xf8>
1000c10a:	77ac      	strb	r4, [r5, #30]
			b = *s++;
1000c10c:	7a10      	ldrb	r0, [r2, #8]
1000c10e:	9002      	str	r0, [sp, #8]
			if (b != 0) *d = TILE_EMPTY;
1000c110:	2800      	cmp	r0, #0
1000c112:	d001      	beq.n	1000c118 <_Z8PlayDemov+0x104>
1000c114:	2036      	movs	r0, #54	; 0x36
1000c116:	542c      	strb	r4, [r5, r0]
			b = *s++;
1000c118:	7a50      	ldrb	r0, [r2, #9]
1000c11a:	9005      	str	r0, [sp, #20]
			if (b != 0) *d = TILE_EMPTY;
1000c11c:	2800      	cmp	r0, #0
1000c11e:	d001      	beq.n	1000c124 <_Z8PlayDemov+0x110>
1000c120:	2037      	movs	r0, #55	; 0x37
1000c122:	542c      	strb	r4, [r5, r0]
			b = *s++;
1000c124:	7a90      	ldrb	r0, [r2, #10]
1000c126:	9008      	str	r0, [sp, #32]
			if (b != 0) *d = TILE_EMPTY;
1000c128:	2800      	cmp	r0, #0
1000c12a:	d001      	beq.n	1000c130 <_Z8PlayDemov+0x11c>
1000c12c:	2038      	movs	r0, #56	; 0x38
1000c12e:	542c      	strb	r4, [r5, r0]
			b = *s++;
1000c130:	7ad0      	ldrb	r0, [r2, #11]
1000c132:	900c      	str	r0, [sp, #48]	; 0x30
			if (b != 0) *d = TILE_EMPTY;
1000c134:	2800      	cmp	r0, #0
1000c136:	d001      	beq.n	1000c13c <_Z8PlayDemov+0x128>
1000c138:	2039      	movs	r0, #57	; 0x39
1000c13a:	542c      	strb	r4, [r5, r0]
			b = *s++;
1000c13c:	7b17      	ldrb	r7, [r2, #12]
			if (b != 0) *d = TILE_EMPTY;
1000c13e:	2f00      	cmp	r7, #0
1000c140:	d001      	beq.n	1000c146 <_Z8PlayDemov+0x132>
1000c142:	2051      	movs	r0, #81	; 0x51
1000c144:	542c      	strb	r4, [r5, r0]
			b = *s++;
1000c146:	7b50      	ldrb	r0, [r2, #13]
1000c148:	9009      	str	r0, [sp, #36]	; 0x24
			if (b != 0) *d = TILE_EMPTY;
1000c14a:	2800      	cmp	r0, #0
1000c14c:	d001      	beq.n	1000c152 <_Z8PlayDemov+0x13e>
1000c14e:	2052      	movs	r0, #82	; 0x52
1000c150:	542c      	strb	r4, [r5, r0]
			b = *s++;
1000c152:	7b90      	ldrb	r0, [r2, #14]
1000c154:	900d      	str	r0, [sp, #52]	; 0x34
			if (b != 0) *d = TILE_EMPTY;
1000c156:	2800      	cmp	r0, #0
1000c158:	d001      	beq.n	1000c15e <_Z8PlayDemov+0x14a>
1000c15a:	2053      	movs	r0, #83	; 0x53
1000c15c:	542c      	strb	r4, [r5, r0]
			b = *s++;
1000c15e:	7bd2      	ldrb	r2, [r2, #15]
1000c160:	920e      	str	r2, [sp, #56]	; 0x38
			if (b != 0) *d = TILE_EMPTY;
1000c162:	2a00      	cmp	r2, #0
1000c164:	d001      	beq.n	1000c16a <_Z8PlayDemov+0x156>
1000c166:	2254      	movs	r2, #84	; 0x54
1000c168:	54ac      	strb	r4, [r5, r2]
			if (!CheckBrick(BrickX, BrickY+1, Brick)) break;
1000c16a:	b2db      	uxtb	r3, r3
1000c16c:	1c58      	adds	r0, r3, #1
1000c16e:	9300      	str	r3, [sp, #0]
1000c170:	b243      	sxtb	r3, r0
	u8* d = &Board[x + y*MAPW];
1000c172:	469c      	mov	ip, r3
			if (!CheckBrick(BrickX, BrickY+1, Brick)) break;
1000c174:	b2c2      	uxtb	r2, r0
1000c176:	4690      	mov	r8, r2
	u8* d = &Board[x + y*MAPW];
1000c178:	005a      	lsls	r2, r3, #1
1000c17a:	4462      	add	r2, ip
1000c17c:	00d0      	lsls	r0, r2, #3
1000c17e:	4684      	mov	ip, r0
1000c180:	4462      	add	r2, ip
1000c182:	4692      	mov	sl, r2
1000c184:	465a      	mov	r2, fp
1000c186:	448a      	add	sl, r1
			if (!CheckBrick(BrickX, BrickY+1, Brick)) break;
1000c188:	9310      	str	r3, [sp, #64]	; 0x40
	u8* d = &Board[x + y*MAPW];
1000c18a:	4452      	add	r2, sl
			if (b != 0)
1000c18c:	2e00      	cmp	r6, #0
1000c18e:	d100      	bne.n	1000c192 <_Z8PlayDemov+0x17e>
1000c190:	e220      	b.n	1000c5d4 <_Z8PlayDemov+0x5c0>
				if ((y < 1) || (y >= MAPH-1))
1000c192:	9b00      	ldr	r3, [sp, #0]
1000c194:	2b11      	cmp	r3, #17
1000c196:	d900      	bls.n	1000c19a <_Z8PlayDemov+0x186>
1000c198:	e2a1      	b.n	1000c6de <_Z8PlayDemov+0x6ca>
					if (*d != TILE_EMPTY) ok = False;
1000c19a:	4650      	mov	r0, sl
1000c19c:	4659      	mov	r1, fp
1000c19e:	5c09      	ldrb	r1, [r1, r0]
1000c1a0:	3908      	subs	r1, #8
1000c1a2:	0008      	movs	r0, r1
1000c1a4:	4241      	negs	r1, r0
1000c1a6:	4141      	adcs	r1, r0
			if (b != 0)
1000c1a8:	9803      	ldr	r0, [sp, #12]
	Bool ok = True;
1000c1aa:	b2c9      	uxtb	r1, r1
			if (b != 0)
1000c1ac:	2800      	cmp	r0, #0
1000c1ae:	d000      	beq.n	1000c1b2 <_Z8PlayDemov+0x19e>
1000c1b0:	e277      	b.n	1000c6a2 <_Z8PlayDemov+0x68e>
1000c1b2:	9b06      	ldr	r3, [sp, #24]
1000c1b4:	2b00      	cmp	r3, #0
1000c1b6:	d000      	beq.n	1000c1ba <_Z8PlayDemov+0x1a6>
1000c1b8:	e281      	b.n	1000c6be <_Z8PlayDemov+0x6aa>
1000c1ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1000c1bc:	2b00      	cmp	r3, #0
1000c1be:	d00a      	beq.n	1000c1d6 <_Z8PlayDemov+0x1c2>
					if (*d != TILE_EMPTY) ok = False;
1000c1c0:	78d3      	ldrb	r3, [r2, #3]
1000c1c2:	469c      	mov	ip, r3
					ok = False;
1000c1c4:	2308      	movs	r3, #8
1000c1c6:	425b      	negs	r3, r3
1000c1c8:	4699      	mov	r9, r3
1000c1ca:	44cc      	add	ip, r9
1000c1cc:	4660      	mov	r0, ip
1000c1ce:	4243      	negs	r3, r0
1000c1d0:	4143      	adcs	r3, r0
1000c1d2:	425b      	negs	r3, r3
1000c1d4:	4019      	ands	r1, r3
		y++;
1000c1d6:	9b00      	ldr	r3, [sp, #0]
1000c1d8:	1c98      	adds	r0, r3, #2
1000c1da:	b2c0      	uxtb	r0, r0
1000c1dc:	900f      	str	r0, [sp, #60]	; 0x3c
			if (b != 0)
1000c1de:	9801      	ldr	r0, [sp, #4]
1000c1e0:	2800      	cmp	r0, #0
1000c1e2:	d100      	bne.n	1000c1e6 <_Z8PlayDemov+0x1d2>
1000c1e4:	e19a      	b.n	1000c51c <_Z8PlayDemov+0x508>
				if ((y < 1) || (y >= MAPH-1))
1000c1e6:	4640      	mov	r0, r8
1000c1e8:	2811      	cmp	r0, #17
1000c1ea:	d900      	bls.n	1000c1ee <_Z8PlayDemov+0x1da>
1000c1ec:	e24c      	b.n	1000c688 <_Z8PlayDemov+0x674>
					if (*d != TILE_EMPTY) ok = False;
1000c1ee:	7ed3      	ldrb	r3, [r2, #27]
1000c1f0:	4699      	mov	r9, r3
1000c1f2:	2308      	movs	r3, #8
1000c1f4:	425b      	negs	r3, r3
1000c1f6:	469c      	mov	ip, r3
1000c1f8:	44e1      	add	r9, ip
1000c1fa:	4648      	mov	r0, r9
1000c1fc:	4243      	negs	r3, r0
1000c1fe:	4143      	adcs	r3, r0
1000c200:	425b      	negs	r3, r3
1000c202:	4019      	ands	r1, r3
			if (b != 0)
1000c204:	9b04      	ldr	r3, [sp, #16]
1000c206:	2b00      	cmp	r3, #0
1000c208:	d000      	beq.n	1000c20c <_Z8PlayDemov+0x1f8>
1000c20a:	e210      	b.n	1000c62e <_Z8PlayDemov+0x61a>
1000c20c:	9b07      	ldr	r3, [sp, #28]
1000c20e:	2b00      	cmp	r3, #0
1000c210:	d000      	beq.n	1000c214 <_Z8PlayDemov+0x200>
1000c212:	e18f      	b.n	1000c534 <_Z8PlayDemov+0x520>
1000c214:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1000c216:	2b00      	cmp	r3, #0
1000c218:	d00a      	beq.n	1000c230 <_Z8PlayDemov+0x21c>
					if (*d != TILE_EMPTY) ok = False;
1000c21a:	7f93      	ldrb	r3, [r2, #30]
1000c21c:	4698      	mov	r8, r3
					ok = False;
1000c21e:	2308      	movs	r3, #8
1000c220:	425b      	negs	r3, r3
1000c222:	469c      	mov	ip, r3
1000c224:	44e0      	add	r8, ip
1000c226:	4640      	mov	r0, r8
1000c228:	4243      	negs	r3, r0
1000c22a:	4143      	adcs	r3, r0
1000c22c:	425b      	negs	r3, r3
1000c22e:	4019      	ands	r1, r3
		y++;
1000c230:	9b00      	ldr	r3, [sp, #0]
			if (b != 0)
1000c232:	9802      	ldr	r0, [sp, #8]
		y++;
1000c234:	3303      	adds	r3, #3
1000c236:	b2db      	uxtb	r3, r3
1000c238:	9300      	str	r3, [sp, #0]
			if (b != 0)
1000c23a:	2800      	cmp	r0, #0
1000c23c:	d100      	bne.n	1000c240 <_Z8PlayDemov+0x22c>
1000c23e:	e190      	b.n	1000c562 <_Z8PlayDemov+0x54e>
				if ((y < 1) || (y >= MAPH-1))
1000c240:	980f      	ldr	r0, [sp, #60]	; 0x3c
1000c242:	2811      	cmp	r0, #17
1000c244:	d900      	bls.n	1000c248 <_Z8PlayDemov+0x234>
1000c246:	e1dd      	b.n	1000c604 <_Z8PlayDemov+0x5f0>
					if (*d != TILE_EMPTY) ok = False;
1000c248:	2036      	movs	r0, #54	; 0x36
1000c24a:	5c10      	ldrb	r0, [r2, r0]
1000c24c:	4680      	mov	r8, r0
1000c24e:	2008      	movs	r0, #8
1000c250:	4240      	negs	r0, r0
1000c252:	4684      	mov	ip, r0
1000c254:	44e0      	add	r8, ip
1000c256:	4643      	mov	r3, r8
1000c258:	4258      	negs	r0, r3
1000c25a:	4158      	adcs	r0, r3
1000c25c:	4243      	negs	r3, r0
1000c25e:	4019      	ands	r1, r3
			if (b != 0)
1000c260:	9b05      	ldr	r3, [sp, #20]
1000c262:	2b00      	cmp	r3, #0
1000c264:	d000      	beq.n	1000c268 <_Z8PlayDemov+0x254>
1000c266:	e1fe      	b.n	1000c666 <_Z8PlayDemov+0x652>
1000c268:	9b08      	ldr	r3, [sp, #32]
1000c26a:	2b00      	cmp	r3, #0
1000c26c:	d000      	beq.n	1000c270 <_Z8PlayDemov+0x25c>
1000c26e:	e181      	b.n	1000c574 <_Z8PlayDemov+0x560>
1000c270:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1000c272:	2b00      	cmp	r3, #0
1000c274:	d00b      	beq.n	1000c28e <_Z8PlayDemov+0x27a>
					if (*d != TILE_EMPTY) ok = False;
1000c276:	2339      	movs	r3, #57	; 0x39
1000c278:	5cd3      	ldrb	r3, [r2, r3]
1000c27a:	469c      	mov	ip, r3
					ok = False;
1000c27c:	2308      	movs	r3, #8
1000c27e:	425b      	negs	r3, r3
1000c280:	4698      	mov	r8, r3
1000c282:	44c4      	add	ip, r8
1000c284:	4660      	mov	r0, ip
1000c286:	4243      	negs	r3, r0
1000c288:	4143      	adcs	r3, r0
1000c28a:	425b      	negs	r3, r3
1000c28c:	4019      	ands	r1, r3
			if (b != 0)
1000c28e:	2f00      	cmp	r7, #0
1000c290:	d100      	bne.n	1000c294 <_Z8PlayDemov+0x280>
1000c292:	e182      	b.n	1000c59a <_Z8PlayDemov+0x586>
				if ((y < 1) || (y >= MAPH-1))
1000c294:	9b00      	ldr	r3, [sp, #0]
1000c296:	2b11      	cmp	r3, #17
1000c298:	d80d      	bhi.n	1000c2b6 <_Z8PlayDemov+0x2a2>
					if (*d != TILE_EMPTY) ok = False;
1000c29a:	2351      	movs	r3, #81	; 0x51
1000c29c:	5cd3      	ldrb	r3, [r2, r3]
1000c29e:	2b08      	cmp	r3, #8
1000c2a0:	d100      	bne.n	1000c2a4 <_Z8PlayDemov+0x290>
1000c2a2:	e0db      	b.n	1000c45c <_Z8PlayDemov+0x448>
			if (b != 0)
1000c2a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1000c2a6:	2b00      	cmp	r3, #0
1000c2a8:	d005      	beq.n	1000c2b6 <_Z8PlayDemov+0x2a2>
1000c2aa:	2100      	movs	r1, #0
					if (*d != TILE_EMPTY) ok = False;
1000c2ac:	2353      	movs	r3, #83	; 0x53
1000c2ae:	5cd3      	ldrb	r3, [r2, r3]
1000c2b0:	2b08      	cmp	r3, #8
1000c2b2:	d100      	bne.n	1000c2b6 <_Z8PlayDemov+0x2a2>
1000c2b4:	e0da      	b.n	1000c46c <_Z8PlayDemov+0x458>
1000c2b6:	46b4      	mov	ip, r6
			if (b != 0) *d = b;
1000c2b8:	4663      	mov	r3, ip
1000c2ba:	2b00      	cmp	r3, #0
1000c2bc:	d003      	beq.n	1000c2c6 <_Z8PlayDemov+0x2b2>
1000c2be:	465b      	mov	r3, fp
1000c2c0:	4661      	mov	r1, ip
1000c2c2:	9a11      	ldr	r2, [sp, #68]	; 0x44
1000c2c4:	5499      	strb	r1, [r3, r2]
1000c2c6:	9b03      	ldr	r3, [sp, #12]
1000c2c8:	2b00      	cmp	r3, #0
1000c2ca:	d000      	beq.n	1000c2ce <_Z8PlayDemov+0x2ba>
1000c2cc:	706b      	strb	r3, [r5, #1]
1000c2ce:	9b06      	ldr	r3, [sp, #24]
1000c2d0:	2b00      	cmp	r3, #0
1000c2d2:	d000      	beq.n	1000c2d6 <_Z8PlayDemov+0x2c2>
1000c2d4:	70ab      	strb	r3, [r5, #2]
1000c2d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1000c2d8:	2b00      	cmp	r3, #0
1000c2da:	d000      	beq.n	1000c2de <_Z8PlayDemov+0x2ca>
1000c2dc:	70eb      	strb	r3, [r5, #3]
1000c2de:	9b01      	ldr	r3, [sp, #4]
1000c2e0:	2b00      	cmp	r3, #0
1000c2e2:	d000      	beq.n	1000c2e6 <_Z8PlayDemov+0x2d2>
1000c2e4:	76eb      	strb	r3, [r5, #27]
1000c2e6:	9b04      	ldr	r3, [sp, #16]
1000c2e8:	2b00      	cmp	r3, #0
1000c2ea:	d000      	beq.n	1000c2ee <_Z8PlayDemov+0x2da>
1000c2ec:	772b      	strb	r3, [r5, #28]
1000c2ee:	9b07      	ldr	r3, [sp, #28]
1000c2f0:	2b00      	cmp	r3, #0
1000c2f2:	d000      	beq.n	1000c2f6 <_Z8PlayDemov+0x2e2>
1000c2f4:	776b      	strb	r3, [r5, #29]
1000c2f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1000c2f8:	2b00      	cmp	r3, #0
1000c2fa:	d000      	beq.n	1000c2fe <_Z8PlayDemov+0x2ea>
1000c2fc:	77ab      	strb	r3, [r5, #30]
1000c2fe:	9a02      	ldr	r2, [sp, #8]
1000c300:	2a00      	cmp	r2, #0
1000c302:	d001      	beq.n	1000c308 <_Z8PlayDemov+0x2f4>
1000c304:	2336      	movs	r3, #54	; 0x36
1000c306:	54ea      	strb	r2, [r5, r3]
1000c308:	9a05      	ldr	r2, [sp, #20]
1000c30a:	2a00      	cmp	r2, #0
1000c30c:	d001      	beq.n	1000c312 <_Z8PlayDemov+0x2fe>
1000c30e:	2337      	movs	r3, #55	; 0x37
1000c310:	54ea      	strb	r2, [r5, r3]
1000c312:	9a08      	ldr	r2, [sp, #32]
1000c314:	2a00      	cmp	r2, #0
1000c316:	d001      	beq.n	1000c31c <_Z8PlayDemov+0x308>
1000c318:	2338      	movs	r3, #56	; 0x38
1000c31a:	54ea      	strb	r2, [r5, r3]
1000c31c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1000c31e:	2a00      	cmp	r2, #0
1000c320:	d001      	beq.n	1000c326 <_Z8PlayDemov+0x312>
1000c322:	2339      	movs	r3, #57	; 0x39
1000c324:	54ea      	strb	r2, [r5, r3]
1000c326:	2f00      	cmp	r7, #0
1000c328:	d001      	beq.n	1000c32e <_Z8PlayDemov+0x31a>
1000c32a:	2351      	movs	r3, #81	; 0x51
1000c32c:	54ef      	strb	r7, [r5, r3]
1000c32e:	9a09      	ldr	r2, [sp, #36]	; 0x24
1000c330:	2a00      	cmp	r2, #0
1000c332:	d001      	beq.n	1000c338 <_Z8PlayDemov+0x324>
1000c334:	2352      	movs	r3, #82	; 0x52
1000c336:	54ea      	strb	r2, [r5, r3]
1000c338:	9a0d      	ldr	r2, [sp, #52]	; 0x34
1000c33a:	2a00      	cmp	r2, #0
1000c33c:	d001      	beq.n	1000c342 <_Z8PlayDemov+0x32e>
1000c33e:	2353      	movs	r3, #83	; 0x53
1000c340:	54ea      	strb	r2, [r5, r3]
1000c342:	9a0e      	ldr	r2, [sp, #56]	; 0x38
1000c344:	2a00      	cmp	r2, #0
1000c346:	d001      	beq.n	1000c34c <_Z8PlayDemov+0x338>
1000c348:	2354      	movs	r3, #84	; 0x54
1000c34a:	54ea      	strb	r2, [r5, r3]
		Score += BrickScore;
1000c34c:	4b1e      	ldr	r3, [pc, #120]	; (1000c3c8 <_Z8PlayDemov+0x3b4>)
1000c34e:	4a1f      	ldr	r2, [pc, #124]	; (1000c3cc <_Z8PlayDemov+0x3b8>)
	DispTileNum(TILE_SCOREV1, Score, COL_WHITE);
1000c350:	202e      	movs	r0, #46	; 0x2e
		Score += BrickScore;
1000c352:	6811      	ldr	r1, [r2, #0]
1000c354:	681a      	ldr	r2, [r3, #0]
	for (y = MAPH-2; y > 1; y--)
1000c356:	2512      	movs	r5, #18
		Score += BrickScore;
1000c358:	4694      	mov	ip, r2
	DispTileNum(TILE_SCOREV1, Score, COL_WHITE);
1000c35a:	22ff      	movs	r2, #255	; 0xff
		Score += BrickScore;
1000c35c:	4461      	add	r1, ip
1000c35e:	6019      	str	r1, [r3, #0]
	DispTileNum(TILE_SCOREV1, Score, COL_WHITE);
1000c360:	f7fb f9c4 	bl	100076ec <_Z11DispTileNumhih>
	DispTileNum(TILE_SCOREV3, ScoreBest, COL_YELLOW);
1000c364:	4b1a      	ldr	r3, [pc, #104]	; (1000c3d0 <_Z8PlayDemov+0x3bc>)
1000c366:	22fc      	movs	r2, #252	; 0xfc
1000c368:	6819      	ldr	r1, [r3, #0]
1000c36a:	2042      	movs	r0, #66	; 0x42
1000c36c:	f7fb f9be 	bl	100076ec <_Z11DispTileNumhih>
	DispTileNum(TILE_LINESV1, Lines, COL_WHITE);
1000c370:	4b18      	ldr	r3, [pc, #96]	; (1000c3d4 <_Z8PlayDemov+0x3c0>)
1000c372:	22ff      	movs	r2, #255	; 0xff
1000c374:	6819      	ldr	r1, [r3, #0]
1000c376:	2030      	movs	r0, #48	; 0x30
1000c378:	f7fb f9b8 	bl	100076ec <_Z11DispTileNumhih>
	DispTileNum(TILE_LINESV3, LinesBest, COL_YELLOW);
1000c37c:	4b16      	ldr	r3, [pc, #88]	; (1000c3d8 <_Z8PlayDemov+0x3c4>)
1000c37e:	22fc      	movs	r2, #252	; 0xfc
1000c380:	6819      	ldr	r1, [r3, #0]
1000c382:	2044      	movs	r0, #68	; 0x44
1000c384:	f7fb f9b2 	bl	100076ec <_Z11DispTileNumhih>
	DispTileNum(TILE_SPEEDV1, Level, COL_WHITE);
1000c388:	4b14      	ldr	r3, [pc, #80]	; (1000c3dc <_Z8PlayDemov+0x3c8>)
1000c38a:	22ff      	movs	r2, #255	; 0xff
1000c38c:	7819      	ldrb	r1, [r3, #0]
1000c38e:	2032      	movs	r0, #50	; 0x32
1000c390:	f7fb f9ac 	bl	100076ec <_Z11DispTileNumhih>
	DispTileNum(TILE_SPEEDV3, LevelBest, COL_YELLOW);
1000c394:	4b12      	ldr	r3, [pc, #72]	; (1000c3e0 <_Z8PlayDemov+0x3cc>)
1000c396:	22fc      	movs	r2, #252	; 0xfc
1000c398:	7819      	ldrb	r1, [r3, #0]
1000c39a:	2046      	movs	r0, #70	; 0x46
1000c39c:	f7fb f9a6 	bl	100076ec <_Z11DispTileNumhih>
		PlaySound(BrickSnd, sizeof(BrickSnd));
1000c3a0:	23fe      	movs	r3, #254	; 0xfe
1000c3a2:	2624      	movs	r6, #36	; 0x24
1000c3a4:	2200      	movs	r2, #0
1000c3a6:	490f      	ldr	r1, [pc, #60]	; (1000c3e4 <_Z8PlayDemov+0x3d0>)
1000c3a8:	480f      	ldr	r0, [pc, #60]	; (1000c3e8 <_Z8PlayDemov+0x3d4>)
1000c3aa:	059b      	lsls	r3, r3, #22
1000c3ac:	f003 fac8 	bl	1000f940 <_Z9PlaySoundPKhihf>
	for (y = MAPH-2; y > 1; y--)
1000c3b0:	4f0e      	ldr	r7, [pc, #56]	; (1000c3ec <_Z8PlayDemov+0x3d8>)
1000c3b2:	e01d      	b.n	1000c3f0 <_Z8PlayDemov+0x3dc>
1000c3b4:	2000327c 	.word	0x2000327c
1000c3b8:	20012766 	.word	0x20012766
1000c3bc:	20012765 	.word	0x20012765
1000c3c0:	20012764 	.word	0x20012764
1000c3c4:	10010bd4 	.word	0x10010bd4
1000c3c8:	20007108 	.word	0x20007108
1000c3cc:	20003498 	.word	0x20003498
1000c3d0:	2000710c 	.word	0x2000710c
1000c3d4:	200061f4 	.word	0x200061f4
1000c3d8:	200061f8 	.word	0x200061f8
1000c3dc:	2001276b 	.word	0x2001276b
1000c3e0:	2001276c 	.word	0x2001276c
1000c3e4:	00000932 	.word	0x00000932
1000c3e8:	1001af04 	.word	0x1001af04
1000c3ec:	200061fc 	.word	0x200061fc
		s = &Board[y*MAPW + 8];
1000c3f0:	1972      	adds	r2, r6, r5
1000c3f2:	00d3      	lsls	r3, r2, #3
1000c3f4:	18d2      	adds	r2, r2, r3
			if (*s == TILE_EMPTY)
1000c3f6:	4659      	mov	r1, fp
		s = &Board[y*MAPW + 8];
1000c3f8:	465b      	mov	r3, fp
1000c3fa:	3208      	adds	r2, #8
1000c3fc:	189b      	adds	r3, r3, r2
			if (*s == TILE_EMPTY)
1000c3fe:	5c8a      	ldrb	r2, [r1, r2]
1000c400:	2a08      	cmp	r2, #8
1000c402:	d100      	bne.n	1000c406 <_Z8PlayDemov+0x3f2>
1000c404:	e0f8      	b.n	1000c5f8 <_Z8PlayDemov+0x5e4>
1000c406:	785a      	ldrb	r2, [r3, #1]
1000c408:	2a08      	cmp	r2, #8
1000c40a:	d100      	bne.n	1000c40e <_Z8PlayDemov+0x3fa>
1000c40c:	e0f4      	b.n	1000c5f8 <_Z8PlayDemov+0x5e4>
1000c40e:	789a      	ldrb	r2, [r3, #2]
1000c410:	2a08      	cmp	r2, #8
1000c412:	d100      	bne.n	1000c416 <_Z8PlayDemov+0x402>
1000c414:	e0f0      	b.n	1000c5f8 <_Z8PlayDemov+0x5e4>
1000c416:	78da      	ldrb	r2, [r3, #3]
1000c418:	2a08      	cmp	r2, #8
1000c41a:	d100      	bne.n	1000c41e <_Z8PlayDemov+0x40a>
1000c41c:	e0ec      	b.n	1000c5f8 <_Z8PlayDemov+0x5e4>
1000c41e:	791a      	ldrb	r2, [r3, #4]
1000c420:	2a08      	cmp	r2, #8
1000c422:	d100      	bne.n	1000c426 <_Z8PlayDemov+0x412>
1000c424:	e0e8      	b.n	1000c5f8 <_Z8PlayDemov+0x5e4>
1000c426:	795a      	ldrb	r2, [r3, #5]
1000c428:	2a08      	cmp	r2, #8
1000c42a:	d100      	bne.n	1000c42e <_Z8PlayDemov+0x41a>
1000c42c:	e0e4      	b.n	1000c5f8 <_Z8PlayDemov+0x5e4>
1000c42e:	799a      	ldrb	r2, [r3, #6]
1000c430:	2a08      	cmp	r2, #8
1000c432:	d100      	bne.n	1000c436 <_Z8PlayDemov+0x422>
1000c434:	e0e0      	b.n	1000c5f8 <_Z8PlayDemov+0x5e4>
1000c436:	79da      	ldrb	r2, [r3, #7]
1000c438:	2a08      	cmp	r2, #8
1000c43a:	d100      	bne.n	1000c43e <_Z8PlayDemov+0x42a>
1000c43c:	e0dc      	b.n	1000c5f8 <_Z8PlayDemov+0x5e4>
1000c43e:	7a1a      	ldrb	r2, [r3, #8]
1000c440:	2a08      	cmp	r2, #8
1000c442:	d100      	bne.n	1000c446 <_Z8PlayDemov+0x432>
1000c444:	e0d8      	b.n	1000c5f8 <_Z8PlayDemov+0x5e4>
1000c446:	7a5b      	ldrb	r3, [r3, #9]
1000c448:	2b08      	cmp	r3, #8
1000c44a:	d100      	bne.n	1000c44e <_Z8PlayDemov+0x43a>
1000c44c:	e0d4      	b.n	1000c5f8 <_Z8PlayDemov+0x5e4>
			DelRow(y);
1000c44e:	b2e8      	uxtb	r0, r5
1000c450:	f7fb fc30 	bl	10007cb4 <_Z6DelRowh>
			NextLevel--;
1000c454:	683b      	ldr	r3, [r7, #0]
1000c456:	3b01      	subs	r3, #1
1000c458:	603b      	str	r3, [r7, #0]
	for (y = MAPH-2; y > 1; y--)
1000c45a:	e7c9      	b.n	1000c3f0 <_Z8PlayDemov+0x3dc>
			if (b != 0)
1000c45c:	9b09      	ldr	r3, [sp, #36]	; 0x24
1000c45e:	2b00      	cmp	r3, #0
1000c460:	d000      	beq.n	1000c464 <_Z8PlayDemov+0x450>
1000c462:	e0a2      	b.n	1000c5aa <_Z8PlayDemov+0x596>
1000c464:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1000c466:	2b00      	cmp	r3, #0
1000c468:	d000      	beq.n	1000c46c <_Z8PlayDemov+0x458>
1000c46a:	e71f      	b.n	1000c2ac <_Z8PlayDemov+0x298>
1000c46c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1000c46e:	2b00      	cmp	r3, #0
1000c470:	d004      	beq.n	1000c47c <_Z8PlayDemov+0x468>
					if (*d != TILE_EMPTY) ok = False;
1000c472:	2354      	movs	r3, #84	; 0x54
1000c474:	5cd3      	ldrb	r3, [r2, r3]
1000c476:	2b08      	cmp	r3, #8
1000c478:	d000      	beq.n	1000c47c <_Z8PlayDemov+0x468>
1000c47a:	e71c      	b.n	1000c2b6 <_Z8PlayDemov+0x2a2>
			if (!CheckBrick(BrickX, BrickY+1, Brick)) break;
1000c47c:	2900      	cmp	r1, #0
1000c47e:	d100      	bne.n	1000c482 <_Z8PlayDemov+0x46e>
1000c480:	e719      	b.n	1000c2b6 <_Z8PlayDemov+0x2a2>
			BrickY++;
1000c482:	4ba3      	ldr	r3, [pc, #652]	; (1000c710 <_Z8PlayDemov+0x6fc>)
1000c484:	9910      	ldr	r1, [sp, #64]	; 0x40
1000c486:	7019      	strb	r1, [r3, #0]
			if (b != 0) *d = b;
1000c488:	2e00      	cmp	r6, #0
1000c48a:	d002      	beq.n	1000c492 <_Z8PlayDemov+0x47e>
1000c48c:	465b      	mov	r3, fp
1000c48e:	4651      	mov	r1, sl
1000c490:	545e      	strb	r6, [r3, r1]
1000c492:	9b03      	ldr	r3, [sp, #12]
1000c494:	2b00      	cmp	r3, #0
1000c496:	d000      	beq.n	1000c49a <_Z8PlayDemov+0x486>
1000c498:	7053      	strb	r3, [r2, #1]
1000c49a:	9b06      	ldr	r3, [sp, #24]
1000c49c:	2b00      	cmp	r3, #0
1000c49e:	d000      	beq.n	1000c4a2 <_Z8PlayDemov+0x48e>
1000c4a0:	7093      	strb	r3, [r2, #2]
1000c4a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1000c4a4:	2b00      	cmp	r3, #0
1000c4a6:	d000      	beq.n	1000c4aa <_Z8PlayDemov+0x496>
1000c4a8:	70d3      	strb	r3, [r2, #3]
1000c4aa:	9b01      	ldr	r3, [sp, #4]
1000c4ac:	2b00      	cmp	r3, #0
1000c4ae:	d000      	beq.n	1000c4b2 <_Z8PlayDemov+0x49e>
1000c4b0:	76d3      	strb	r3, [r2, #27]
1000c4b2:	9b04      	ldr	r3, [sp, #16]
1000c4b4:	2b00      	cmp	r3, #0
1000c4b6:	d000      	beq.n	1000c4ba <_Z8PlayDemov+0x4a6>
1000c4b8:	7713      	strb	r3, [r2, #28]
1000c4ba:	9b07      	ldr	r3, [sp, #28]
1000c4bc:	2b00      	cmp	r3, #0
1000c4be:	d000      	beq.n	1000c4c2 <_Z8PlayDemov+0x4ae>
1000c4c0:	7753      	strb	r3, [r2, #29]
1000c4c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1000c4c4:	2b00      	cmp	r3, #0
1000c4c6:	d000      	beq.n	1000c4ca <_Z8PlayDemov+0x4b6>
1000c4c8:	7793      	strb	r3, [r2, #30]
1000c4ca:	9b02      	ldr	r3, [sp, #8]
1000c4cc:	2b00      	cmp	r3, #0
1000c4ce:	d001      	beq.n	1000c4d4 <_Z8PlayDemov+0x4c0>
1000c4d0:	2136      	movs	r1, #54	; 0x36
1000c4d2:	5453      	strb	r3, [r2, r1]
1000c4d4:	9b05      	ldr	r3, [sp, #20]
1000c4d6:	2b00      	cmp	r3, #0
1000c4d8:	d001      	beq.n	1000c4de <_Z8PlayDemov+0x4ca>
1000c4da:	2137      	movs	r1, #55	; 0x37
1000c4dc:	5453      	strb	r3, [r2, r1]
1000c4de:	9908      	ldr	r1, [sp, #32]
1000c4e0:	2900      	cmp	r1, #0
1000c4e2:	d001      	beq.n	1000c4e8 <_Z8PlayDemov+0x4d4>
1000c4e4:	2338      	movs	r3, #56	; 0x38
1000c4e6:	54d1      	strb	r1, [r2, r3]
1000c4e8:	990c      	ldr	r1, [sp, #48]	; 0x30
1000c4ea:	2900      	cmp	r1, #0
1000c4ec:	d001      	beq.n	1000c4f2 <_Z8PlayDemov+0x4de>
1000c4ee:	2339      	movs	r3, #57	; 0x39
1000c4f0:	54d1      	strb	r1, [r2, r3]
1000c4f2:	2f00      	cmp	r7, #0
1000c4f4:	d001      	beq.n	1000c4fa <_Z8PlayDemov+0x4e6>
1000c4f6:	2351      	movs	r3, #81	; 0x51
1000c4f8:	54d7      	strb	r7, [r2, r3]
1000c4fa:	9909      	ldr	r1, [sp, #36]	; 0x24
1000c4fc:	2900      	cmp	r1, #0
1000c4fe:	d001      	beq.n	1000c504 <_Z8PlayDemov+0x4f0>
1000c500:	2352      	movs	r3, #82	; 0x52
1000c502:	54d1      	strb	r1, [r2, r3]
1000c504:	990d      	ldr	r1, [sp, #52]	; 0x34
1000c506:	2900      	cmp	r1, #0
1000c508:	d001      	beq.n	1000c50e <_Z8PlayDemov+0x4fa>
1000c50a:	2353      	movs	r3, #83	; 0x53
1000c50c:	54d1      	strb	r1, [r2, r3]
1000c50e:	990e      	ldr	r1, [sp, #56]	; 0x38
1000c510:	2900      	cmp	r1, #0
1000c512:	d100      	bne.n	1000c516 <_Z8PlayDemov+0x502>
1000c514:	e5bb      	b.n	1000c08e <_Z8PlayDemov+0x7a>
1000c516:	2354      	movs	r3, #84	; 0x54
1000c518:	54d1      	strb	r1, [r2, r3]
1000c51a:	e5b8      	b.n	1000c08e <_Z8PlayDemov+0x7a>
			if (b != 0)
1000c51c:	9804      	ldr	r0, [sp, #16]
1000c51e:	2800      	cmp	r0, #0
1000c520:	d000      	beq.n	1000c524 <_Z8PlayDemov+0x510>
1000c522:	e081      	b.n	1000c628 <_Z8PlayDemov+0x614>
1000c524:	9b07      	ldr	r3, [sp, #28]
1000c526:	2b00      	cmp	r3, #0
1000c528:	d100      	bne.n	1000c52c <_Z8PlayDemov+0x518>
1000c52a:	e08f      	b.n	1000c64c <_Z8PlayDemov+0x638>
				if ((y < 1) || (y >= MAPH-1))
1000c52c:	4643      	mov	r3, r8
1000c52e:	2b11      	cmp	r3, #17
1000c530:	d900      	bls.n	1000c534 <_Z8PlayDemov+0x520>
1000c532:	e093      	b.n	1000c65c <_Z8PlayDemov+0x648>
					if (*d != TILE_EMPTY) ok = False;
1000c534:	7f53      	ldrb	r3, [r2, #29]
1000c536:	4698      	mov	r8, r3
1000c538:	2308      	movs	r3, #8
1000c53a:	425b      	negs	r3, r3
1000c53c:	469c      	mov	ip, r3
1000c53e:	44e0      	add	r8, ip
1000c540:	4640      	mov	r0, r8
1000c542:	4243      	negs	r3, r0
1000c544:	4143      	adcs	r3, r0
1000c546:	425b      	negs	r3, r3
1000c548:	4019      	ands	r1, r3
			if (b != 0)
1000c54a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1000c54c:	2b00      	cmp	r3, #0
1000c54e:	d000      	beq.n	1000c552 <_Z8PlayDemov+0x53e>
1000c550:	e663      	b.n	1000c21a <_Z8PlayDemov+0x206>
		y++;
1000c552:	9b00      	ldr	r3, [sp, #0]
			if (b != 0)
1000c554:	9802      	ldr	r0, [sp, #8]
		y++;
1000c556:	3303      	adds	r3, #3
1000c558:	b2db      	uxtb	r3, r3
1000c55a:	9300      	str	r3, [sp, #0]
			if (b != 0)
1000c55c:	2800      	cmp	r0, #0
1000c55e:	d000      	beq.n	1000c562 <_Z8PlayDemov+0x54e>
1000c560:	e66e      	b.n	1000c240 <_Z8PlayDemov+0x22c>
1000c562:	9805      	ldr	r0, [sp, #20]
1000c564:	2800      	cmp	r0, #0
1000c566:	d17b      	bne.n	1000c660 <_Z8PlayDemov+0x64c>
1000c568:	9b08      	ldr	r3, [sp, #32]
1000c56a:	2b00      	cmp	r3, #0
1000c56c:	d052      	beq.n	1000c614 <_Z8PlayDemov+0x600>
				if ((y < 1) || (y >= MAPH-1))
1000c56e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1000c570:	2b11      	cmp	r3, #17
1000c572:	d857      	bhi.n	1000c624 <_Z8PlayDemov+0x610>
					if (*d != TILE_EMPTY) ok = False;
1000c574:	2338      	movs	r3, #56	; 0x38
1000c576:	5cd3      	ldrb	r3, [r2, r3]
1000c578:	469c      	mov	ip, r3
1000c57a:	2308      	movs	r3, #8
1000c57c:	425b      	negs	r3, r3
1000c57e:	4698      	mov	r8, r3
1000c580:	44c4      	add	ip, r8
1000c582:	4660      	mov	r0, ip
1000c584:	4243      	negs	r3, r0
1000c586:	4143      	adcs	r3, r0
1000c588:	425b      	negs	r3, r3
1000c58a:	4019      	ands	r1, r3
			if (b != 0)
1000c58c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1000c58e:	2b00      	cmp	r3, #0
1000c590:	d000      	beq.n	1000c594 <_Z8PlayDemov+0x580>
1000c592:	e670      	b.n	1000c276 <_Z8PlayDemov+0x262>
1000c594:	2f00      	cmp	r7, #0
1000c596:	d000      	beq.n	1000c59a <_Z8PlayDemov+0x586>
1000c598:	e67c      	b.n	1000c294 <_Z8PlayDemov+0x280>
1000c59a:	9809      	ldr	r0, [sp, #36]	; 0x24
1000c59c:	2800      	cmp	r0, #0
1000c59e:	d100      	bne.n	1000c5a2 <_Z8PlayDemov+0x58e>
1000c5a0:	e0a6      	b.n	1000c6f0 <_Z8PlayDemov+0x6dc>
				if ((y < 1) || (y >= MAPH-1))
1000c5a2:	9b00      	ldr	r3, [sp, #0]
1000c5a4:	2b11      	cmp	r3, #17
1000c5a6:	d900      	bls.n	1000c5aa <_Z8PlayDemov+0x596>
1000c5a8:	e685      	b.n	1000c2b6 <_Z8PlayDemov+0x2a2>
					if (*d != TILE_EMPTY) ok = False;
1000c5aa:	2352      	movs	r3, #82	; 0x52
1000c5ac:	5cd3      	ldrb	r3, [r2, r3]
1000c5ae:	2b08      	cmp	r3, #8
1000c5b0:	d000      	beq.n	1000c5b4 <_Z8PlayDemov+0x5a0>
1000c5b2:	e677      	b.n	1000c2a4 <_Z8PlayDemov+0x290>
			if (b != 0)
1000c5b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1000c5b6:	2b00      	cmp	r3, #0
1000c5b8:	d000      	beq.n	1000c5bc <_Z8PlayDemov+0x5a8>
1000c5ba:	e677      	b.n	1000c2ac <_Z8PlayDemov+0x298>
1000c5bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1000c5be:	2b00      	cmp	r3, #0
1000c5c0:	d100      	bne.n	1000c5c4 <_Z8PlayDemov+0x5b0>
1000c5c2:	e75b      	b.n	1000c47c <_Z8PlayDemov+0x468>
				if ((y < 1) || (y >= MAPH-1))
1000c5c4:	9b00      	ldr	r3, [sp, #0]
1000c5c6:	2b11      	cmp	r3, #17
1000c5c8:	d800      	bhi.n	1000c5cc <_Z8PlayDemov+0x5b8>
1000c5ca:	e752      	b.n	1000c472 <_Z8PlayDemov+0x45e>
1000c5cc:	2300      	movs	r3, #0
1000c5ce:	46b4      	mov	ip, r6
1000c5d0:	930d      	str	r3, [sp, #52]	; 0x34
1000c5d2:	e671      	b.n	1000c2b8 <_Z8PlayDemov+0x2a4>
			if (b != 0)
1000c5d4:	9903      	ldr	r1, [sp, #12]
1000c5d6:	2900      	cmp	r1, #0
1000c5d8:	d15f      	bne.n	1000c69a <_Z8PlayDemov+0x686>
1000c5da:	9906      	ldr	r1, [sp, #24]
1000c5dc:	2900      	cmp	r1, #0
1000c5de:	d000      	beq.n	1000c5e2 <_Z8PlayDemov+0x5ce>
1000c5e0:	e08f      	b.n	1000c702 <_Z8PlayDemov+0x6ee>
	Bool ok = True;
1000c5e2:	3101      	adds	r1, #1
			if (b != 0)
1000c5e4:	980a      	ldr	r0, [sp, #40]	; 0x28
1000c5e6:	2800      	cmp	r0, #0
1000c5e8:	d100      	bne.n	1000c5ec <_Z8PlayDemov+0x5d8>
1000c5ea:	e5f4      	b.n	1000c1d6 <_Z8PlayDemov+0x1c2>
				if ((y < 1) || (y >= MAPH-1))
1000c5ec:	9b00      	ldr	r3, [sp, #0]
1000c5ee:	2b11      	cmp	r3, #17
1000c5f0:	d800      	bhi.n	1000c5f4 <_Z8PlayDemov+0x5e0>
1000c5f2:	e5e5      	b.n	1000c1c0 <_Z8PlayDemov+0x1ac>
					ok = False;
1000c5f4:	2100      	movs	r1, #0
1000c5f6:	e5ee      	b.n	1000c1d6 <_Z8PlayDemov+0x1c2>
	for (y = MAPH-2; y > 1; y--)
1000c5f8:	3d01      	subs	r5, #1
1000c5fa:	2d01      	cmp	r5, #1
1000c5fc:	d100      	bne.n	1000c600 <_Z8PlayDemov+0x5ec>
1000c5fe:	e089      	b.n	1000c714 <_Z8PlayDemov+0x700>
1000c600:	006e      	lsls	r6, r5, #1
1000c602:	e6f5      	b.n	1000c3f0 <_Z8PlayDemov+0x3dc>
			if (b != 0)
1000c604:	9b05      	ldr	r3, [sp, #20]
1000c606:	2b00      	cmp	r3, #0
1000c608:	d00c      	beq.n	1000c624 <_Z8PlayDemov+0x610>
1000c60a:	9b08      	ldr	r3, [sp, #32]
					ok = False;
1000c60c:	2100      	movs	r1, #0
			if (b != 0)
1000c60e:	2b00      	cmp	r3, #0
1000c610:	d000      	beq.n	1000c614 <_Z8PlayDemov+0x600>
1000c612:	e63c      	b.n	1000c28e <_Z8PlayDemov+0x27a>
1000c614:	980c      	ldr	r0, [sp, #48]	; 0x30
1000c616:	2800      	cmp	r0, #0
1000c618:	d100      	bne.n	1000c61c <_Z8PlayDemov+0x608>
1000c61a:	e638      	b.n	1000c28e <_Z8PlayDemov+0x27a>
				if ((y < 1) || (y >= MAPH-1))
1000c61c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1000c61e:	2b11      	cmp	r3, #17
1000c620:	d800      	bhi.n	1000c624 <_Z8PlayDemov+0x610>
1000c622:	e628      	b.n	1000c276 <_Z8PlayDemov+0x262>
					ok = False;
1000c624:	2100      	movs	r1, #0
1000c626:	e632      	b.n	1000c28e <_Z8PlayDemov+0x27a>
				if ((y < 1) || (y >= MAPH-1))
1000c628:	4643      	mov	r3, r8
1000c62a:	2b11      	cmp	r3, #17
1000c62c:	d82f      	bhi.n	1000c68e <_Z8PlayDemov+0x67a>
					if (*d != TILE_EMPTY) ok = False;
1000c62e:	7f13      	ldrb	r3, [r2, #28]
1000c630:	4699      	mov	r9, r3
1000c632:	2308      	movs	r3, #8
1000c634:	425b      	negs	r3, r3
1000c636:	469c      	mov	ip, r3
1000c638:	44e1      	add	r9, ip
1000c63a:	4648      	mov	r0, r9
1000c63c:	4243      	negs	r3, r0
1000c63e:	4143      	adcs	r3, r0
1000c640:	425b      	negs	r3, r3
1000c642:	4019      	ands	r1, r3
			if (b != 0)
1000c644:	9b07      	ldr	r3, [sp, #28]
1000c646:	2b00      	cmp	r3, #0
1000c648:	d000      	beq.n	1000c64c <_Z8PlayDemov+0x638>
1000c64a:	e773      	b.n	1000c534 <_Z8PlayDemov+0x520>
1000c64c:	980b      	ldr	r0, [sp, #44]	; 0x2c
1000c64e:	2800      	cmp	r0, #0
1000c650:	d100      	bne.n	1000c654 <_Z8PlayDemov+0x640>
1000c652:	e5ed      	b.n	1000c230 <_Z8PlayDemov+0x21c>
				if ((y < 1) || (y >= MAPH-1))
1000c654:	4643      	mov	r3, r8
1000c656:	2b11      	cmp	r3, #17
1000c658:	d800      	bhi.n	1000c65c <_Z8PlayDemov+0x648>
1000c65a:	e5de      	b.n	1000c21a <_Z8PlayDemov+0x206>
					ok = False;
1000c65c:	2100      	movs	r1, #0
1000c65e:	e5e7      	b.n	1000c230 <_Z8PlayDemov+0x21c>
				if ((y < 1) || (y >= MAPH-1))
1000c660:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1000c662:	2b11      	cmp	r3, #17
1000c664:	d8d1      	bhi.n	1000c60a <_Z8PlayDemov+0x5f6>
					if (*d != TILE_EMPTY) ok = False;
1000c666:	2337      	movs	r3, #55	; 0x37
1000c668:	5cd3      	ldrb	r3, [r2, r3]
1000c66a:	4698      	mov	r8, r3
1000c66c:	2308      	movs	r3, #8
1000c66e:	425b      	negs	r3, r3
1000c670:	469c      	mov	ip, r3
1000c672:	44e0      	add	r8, ip
1000c674:	4640      	mov	r0, r8
1000c676:	4243      	negs	r3, r0
1000c678:	4143      	adcs	r3, r0
1000c67a:	425b      	negs	r3, r3
1000c67c:	4019      	ands	r1, r3
			if (b != 0)
1000c67e:	9b08      	ldr	r3, [sp, #32]
1000c680:	2b00      	cmp	r3, #0
1000c682:	d000      	beq.n	1000c686 <_Z8PlayDemov+0x672>
1000c684:	e776      	b.n	1000c574 <_Z8PlayDemov+0x560>
1000c686:	e7c5      	b.n	1000c614 <_Z8PlayDemov+0x600>
1000c688:	9b04      	ldr	r3, [sp, #16]
1000c68a:	2b00      	cmp	r3, #0
1000c68c:	d0e6      	beq.n	1000c65c <_Z8PlayDemov+0x648>
1000c68e:	9b07      	ldr	r3, [sp, #28]
					ok = False;
1000c690:	2100      	movs	r1, #0
			if (b != 0)
1000c692:	2b00      	cmp	r3, #0
1000c694:	d000      	beq.n	1000c698 <_Z8PlayDemov+0x684>
1000c696:	e5cb      	b.n	1000c230 <_Z8PlayDemov+0x21c>
1000c698:	e7d8      	b.n	1000c64c <_Z8PlayDemov+0x638>
				if ((y < 1) || (y >= MAPH-1))
1000c69a:	9b00      	ldr	r3, [sp, #0]
1000c69c:	2b11      	cmp	r3, #17
1000c69e:	d821      	bhi.n	1000c6e4 <_Z8PlayDemov+0x6d0>
	Bool ok = True;
1000c6a0:	2101      	movs	r1, #1
					if (*d != TILE_EMPTY) ok = False;
1000c6a2:	7850      	ldrb	r0, [r2, #1]
1000c6a4:	4684      	mov	ip, r0
1000c6a6:	2008      	movs	r0, #8
1000c6a8:	4240      	negs	r0, r0
1000c6aa:	4681      	mov	r9, r0
1000c6ac:	44cc      	add	ip, r9
1000c6ae:	4663      	mov	r3, ip
1000c6b0:	4258      	negs	r0, r3
1000c6b2:	4158      	adcs	r0, r3
1000c6b4:	4243      	negs	r3, r0
1000c6b6:	4019      	ands	r1, r3
			if (b != 0)
1000c6b8:	9b06      	ldr	r3, [sp, #24]
1000c6ba:	2b00      	cmp	r3, #0
1000c6bc:	d092      	beq.n	1000c5e4 <_Z8PlayDemov+0x5d0>
					if (*d != TILE_EMPTY) ok = False;
1000c6be:	7893      	ldrb	r3, [r2, #2]
1000c6c0:	469c      	mov	ip, r3
1000c6c2:	2308      	movs	r3, #8
1000c6c4:	425b      	negs	r3, r3
1000c6c6:	4699      	mov	r9, r3
1000c6c8:	44cc      	add	ip, r9
1000c6ca:	4660      	mov	r0, ip
1000c6cc:	4243      	negs	r3, r0
1000c6ce:	4143      	adcs	r3, r0
1000c6d0:	425b      	negs	r3, r3
1000c6d2:	4019      	ands	r1, r3
			if (b != 0)
1000c6d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1000c6d6:	2b00      	cmp	r3, #0
1000c6d8:	d000      	beq.n	1000c6dc <_Z8PlayDemov+0x6c8>
1000c6da:	e571      	b.n	1000c1c0 <_Z8PlayDemov+0x1ac>
1000c6dc:	e57b      	b.n	1000c1d6 <_Z8PlayDemov+0x1c2>
1000c6de:	9b03      	ldr	r3, [sp, #12]
1000c6e0:	2b00      	cmp	r3, #0
1000c6e2:	d087      	beq.n	1000c5f4 <_Z8PlayDemov+0x5e0>
1000c6e4:	9b06      	ldr	r3, [sp, #24]
					ok = False;
1000c6e6:	2100      	movs	r1, #0
			if (b != 0)
1000c6e8:	2b00      	cmp	r3, #0
1000c6ea:	d000      	beq.n	1000c6ee <_Z8PlayDemov+0x6da>
1000c6ec:	e573      	b.n	1000c1d6 <_Z8PlayDemov+0x1c2>
1000c6ee:	e779      	b.n	1000c5e4 <_Z8PlayDemov+0x5d0>
1000c6f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1000c6f2:	2b00      	cmp	r3, #0
1000c6f4:	d100      	bne.n	1000c6f8 <_Z8PlayDemov+0x6e4>
1000c6f6:	e761      	b.n	1000c5bc <_Z8PlayDemov+0x5a8>
				if ((y < 1) || (y >= MAPH-1))
1000c6f8:	9b00      	ldr	r3, [sp, #0]
1000c6fa:	2b11      	cmp	r3, #17
1000c6fc:	d900      	bls.n	1000c700 <_Z8PlayDemov+0x6ec>
1000c6fe:	e5da      	b.n	1000c2b6 <_Z8PlayDemov+0x2a2>
1000c700:	e5d4      	b.n	1000c2ac <_Z8PlayDemov+0x298>
1000c702:	9b00      	ldr	r3, [sp, #0]
					ok = False;
1000c704:	2100      	movs	r1, #0
				if ((y < 1) || (y >= MAPH-1))
1000c706:	2b11      	cmp	r3, #17
1000c708:	d900      	bls.n	1000c70c <_Z8PlayDemov+0x6f8>
1000c70a:	e564      	b.n	1000c1d6 <_Z8PlayDemov+0x1c2>
	Bool ok = True;
1000c70c:	3101      	adds	r1, #1
1000c70e:	e7d6      	b.n	1000c6be <_Z8PlayDemov+0x6aa>
1000c710:	20012766 	.word	0x20012766
	if ((NextLevel <= 0) && (Level < LEVELNUM) && !Demo)
1000c714:	683b      	ldr	r3, [r7, #0]
1000c716:	2b00      	cmp	r3, #0
1000c718:	dc01      	bgt.n	1000c71e <_Z8PlayDemov+0x70a>
1000c71a:	f7fb f93d 	bl	10007998 <_Z10DelAllRowsv.part.0>
		sleep_ms(200);
1000c71e:	20c8      	movs	r0, #200	; 0xc8
1000c720:	f7f8 f88a 	bl	10004838 <sleep_ms>
		GenBrick();
1000c724:	f7fb fb68 	bl	10007df8 <_Z8GenBrickv>
	u8* d = &Board[x + y*MAPW];
1000c728:	2100      	movs	r1, #0
	if (!CheckBrick(BrickX, BrickY, Brick))
1000c72a:	2000      	movs	r0, #0
	u8* d = &Board[x + y*MAPW];
1000c72c:	4aca      	ldr	r2, [pc, #808]	; (1000ca58 <_Z8PlayDemov+0xa44>)
	if (!CheckBrick(BrickX, BrickY, Brick))
1000c72e:	4bcb      	ldr	r3, [pc, #812]	; (1000ca5c <_Z8PlayDemov+0xa48>)
	u8* d = &Board[x + y*MAPW];
1000c730:	5651      	ldrsb	r1, [r2, r1]
	if (!CheckBrick(BrickX, BrickY, Brick))
1000c732:	5618      	ldrsb	r0, [r3, r0]
	u8* d = &Board[x + y*MAPW];
1000c734:	468a      	mov	sl, r1
1000c736:	4659      	mov	r1, fp
1000c738:	0042      	lsls	r2, r0, #1
1000c73a:	1812      	adds	r2, r2, r0
	const u8* s = &BrickTemp[brick*BRICKTEMPSIZE];
1000c73c:	4bc8      	ldr	r3, [pc, #800]	; (1000ca60 <_Z8PlayDemov+0xa4c>)
	u8* d = &Board[x + y*MAPW];
1000c73e:	00d6      	lsls	r6, r2, #3
	const u8* s = &BrickTemp[brick*BRICKTEMPSIZE];
1000c740:	781d      	ldrb	r5, [r3, #0]
	u8* d = &Board[x + y*MAPW];
1000c742:	1992      	adds	r2, r2, r6
1000c744:	4492      	add	sl, r2
			b = *s++;
1000c746:	4ac7      	ldr	r2, [pc, #796]	; (1000ca64 <_Z8PlayDemov+0xa50>)
	const u8* s = &BrickTemp[brick*BRICKTEMPSIZE];
1000c748:	012d      	lsls	r5, r5, #4
1000c74a:	4bc6      	ldr	r3, [pc, #792]	; (1000ca64 <_Z8PlayDemov+0xa50>)
			b = *s++;
1000c74c:	5d52      	ldrb	r2, [r2, r5]
	const u8* s = &BrickTemp[brick*BRICKTEMPSIZE];
1000c74e:	195b      	adds	r3, r3, r5
			b = *s++;
1000c750:	4691      	mov	r9, r2
	u8* d = &Board[x + y*MAPW];
1000c752:	4451      	add	r1, sl
				if ((y < 1) || (y >= MAPH-1))
1000c754:	b2c0      	uxtb	r0, r0
			if (b != 0)
1000c756:	2a00      	cmp	r2, #0
1000c758:	d100      	bne.n	1000c75c <_Z8PlayDemov+0x748>
1000c75a:	e163      	b.n	1000ca24 <_Z8PlayDemov+0xa10>
				if ((y < 1) || (y >= MAPH-1))
1000c75c:	1e42      	subs	r2, r0, #1
1000c75e:	2a11      	cmp	r2, #17
1000c760:	d900      	bls.n	1000c764 <_Z8PlayDemov+0x750>
1000c762:	e1a4      	b.n	1000caae <_Z8PlayDemov+0xa9a>
					if (*d != TILE_EMPTY) ok = False;
1000c764:	4655      	mov	r5, sl
1000c766:	465a      	mov	r2, fp
1000c768:	5d52      	ldrb	r2, [r2, r5]
1000c76a:	3a08      	subs	r2, #8
1000c76c:	4255      	negs	r5, r2
1000c76e:	416a      	adcs	r2, r5
			if (b != 0)
1000c770:	785d      	ldrb	r5, [r3, #1]
	Bool ok = True;
1000c772:	b2d2      	uxtb	r2, r2
			if (b != 0)
1000c774:	2d00      	cmp	r5, #0
1000c776:	d000      	beq.n	1000c77a <_Z8PlayDemov+0x766>
1000c778:	e1a4      	b.n	1000cac4 <_Z8PlayDemov+0xab0>
1000c77a:	789d      	ldrb	r5, [r3, #2]
1000c77c:	2d00      	cmp	r5, #0
1000c77e:	d100      	bne.n	1000c782 <_Z8PlayDemov+0x76e>
1000c780:	e160      	b.n	1000ca44 <_Z8PlayDemov+0xa30>
					if (*d != TILE_EMPTY) ok = False;
1000c782:	788d      	ldrb	r5, [r1, #2]
1000c784:	3d08      	subs	r5, #8
1000c786:	426e      	negs	r6, r5
1000c788:	4175      	adcs	r5, r6
1000c78a:	426d      	negs	r5, r5
1000c78c:	402a      	ands	r2, r5
			if (b != 0)
1000c78e:	78dd      	ldrb	r5, [r3, #3]
1000c790:	2d00      	cmp	r5, #0
1000c792:	d005      	beq.n	1000c7a0 <_Z8PlayDemov+0x78c>
					if (*d != TILE_EMPTY) ok = False;
1000c794:	78cd      	ldrb	r5, [r1, #3]
1000c796:	3d08      	subs	r5, #8
1000c798:	426e      	negs	r6, r5
1000c79a:	4175      	adcs	r5, r6
1000c79c:	426d      	negs	r5, r5
1000c79e:	402a      	ands	r2, r5
			b = *s++;
1000c7a0:	791d      	ldrb	r5, [r3, #4]
		y++;
1000c7a2:	1c47      	adds	r7, r0, #1
			b = *s++;
1000c7a4:	46a8      	mov	r8, r5
		y++;
1000c7a6:	b2ff      	uxtb	r7, r7
			if (b != 0)
1000c7a8:	2d00      	cmp	r5, #0
1000c7aa:	d100      	bne.n	1000c7ae <_Z8PlayDemov+0x79a>
1000c7ac:	e114      	b.n	1000c9d8 <_Z8PlayDemov+0x9c4>
				if ((y < 1) || (y >= MAPH-1))
1000c7ae:	2811      	cmp	r0, #17
1000c7b0:	d900      	bls.n	1000c7b4 <_Z8PlayDemov+0x7a0>
1000c7b2:	e165      	b.n	1000ca80 <_Z8PlayDemov+0xa6c>
					if (*d != TILE_EMPTY) ok = False;
1000c7b4:	7ecd      	ldrb	r5, [r1, #27]
1000c7b6:	3d08      	subs	r5, #8
1000c7b8:	426e      	negs	r6, r5
1000c7ba:	4175      	adcs	r5, r6
1000c7bc:	426d      	negs	r5, r5
1000c7be:	402a      	ands	r2, r5
			if (b != 0)
1000c7c0:	795d      	ldrb	r5, [r3, #5]
1000c7c2:	2d00      	cmp	r5, #0
1000c7c4:	d000      	beq.n	1000c7c8 <_Z8PlayDemov+0x7b4>
1000c7c6:	e10d      	b.n	1000c9e4 <_Z8PlayDemov+0x9d0>
1000c7c8:	799d      	ldrb	r5, [r3, #6]
1000c7ca:	2d00      	cmp	r5, #0
1000c7cc:	d000      	beq.n	1000c7d0 <_Z8PlayDemov+0x7bc>
1000c7ce:	e112      	b.n	1000c9f6 <_Z8PlayDemov+0x9e2>
1000c7d0:	79dd      	ldrb	r5, [r3, #7]
1000c7d2:	2d00      	cmp	r5, #0
1000c7d4:	d000      	beq.n	1000c7d8 <_Z8PlayDemov+0x7c4>
1000c7d6:	e118      	b.n	1000ca0a <_Z8PlayDemov+0x9f6>
		y++;
1000c7d8:	3002      	adds	r0, #2
1000c7da:	b2c0      	uxtb	r0, r0
1000c7dc:	9001      	str	r0, [sp, #4]
			b = *s++;
1000c7de:	7a18      	ldrb	r0, [r3, #8]
			if (b != 0)
1000c7e0:	2800      	cmp	r0, #0
1000c7e2:	d100      	bne.n	1000c7e6 <_Z8PlayDemov+0x7d2>
1000c7e4:	e0af      	b.n	1000c946 <_Z8PlayDemov+0x932>
				if ((y < 1) || (y >= MAPH-1))
1000c7e6:	2f11      	cmp	r7, #17
1000c7e8:	d900      	bls.n	1000c7ec <_Z8PlayDemov+0x7d8>
1000c7ea:	e13d      	b.n	1000ca68 <_Z8PlayDemov+0xa54>
					if (*d != TILE_EMPTY) ok = False;
1000c7ec:	2536      	movs	r5, #54	; 0x36
1000c7ee:	5d4d      	ldrb	r5, [r1, r5]
1000c7f0:	3d08      	subs	r5, #8
1000c7f2:	426e      	negs	r6, r5
1000c7f4:	4175      	adcs	r5, r6
1000c7f6:	426d      	negs	r5, r5
1000c7f8:	402a      	ands	r2, r5
			if (b != 0)
1000c7fa:	7a5d      	ldrb	r5, [r3, #9]
1000c7fc:	2d00      	cmp	r5, #0
1000c7fe:	d000      	beq.n	1000c802 <_Z8PlayDemov+0x7ee>
1000c800:	e0a8      	b.n	1000c954 <_Z8PlayDemov+0x940>
1000c802:	7a9d      	ldrb	r5, [r3, #10]
1000c804:	2d00      	cmp	r5, #0
1000c806:	d000      	beq.n	1000c80a <_Z8PlayDemov+0x7f6>
1000c808:	e0af      	b.n	1000c96a <_Z8PlayDemov+0x956>
1000c80a:	7add      	ldrb	r5, [r3, #11]
1000c80c:	2d00      	cmp	r5, #0
1000c80e:	d000      	beq.n	1000c812 <_Z8PlayDemov+0x7fe>
1000c810:	e0b6      	b.n	1000c980 <_Z8PlayDemov+0x96c>
			b = *s++;
1000c812:	7b1d      	ldrb	r5, [r3, #12]
			if (b != 0)
1000c814:	2d00      	cmp	r5, #0
1000c816:	d100      	bne.n	1000c81a <_Z8PlayDemov+0x806>
1000c818:	e0bd      	b.n	1000c996 <_Z8PlayDemov+0x982>
				if ((y < 1) || (y >= MAPH-1))
1000c81a:	9e01      	ldr	r6, [sp, #4]
1000c81c:	2e11      	cmp	r6, #17
1000c81e:	d819      	bhi.n	1000c854 <_Z8PlayDemov+0x840>
					if (*d != TILE_EMPTY) ok = False;
1000c820:	2651      	movs	r6, #81	; 0x51
1000c822:	5d8e      	ldrb	r6, [r1, r6]
1000c824:	3e08      	subs	r6, #8
1000c826:	4277      	negs	r7, r6
1000c828:	417e      	adcs	r6, r7
1000c82a:	4276      	negs	r6, r6
1000c82c:	4032      	ands	r2, r6
			if (b != 0)
1000c82e:	7b5e      	ldrb	r6, [r3, #13]
1000c830:	2e00      	cmp	r6, #0
1000c832:	d000      	beq.n	1000c836 <_Z8PlayDemov+0x822>
1000c834:	e0b7      	b.n	1000c9a6 <_Z8PlayDemov+0x992>
			b = *s++;
1000c836:	7b9e      	ldrb	r6, [r3, #14]
1000c838:	46b4      	mov	ip, r6
			if (b != 0)
1000c83a:	2e00      	cmp	r6, #0
1000c83c:	d000      	beq.n	1000c840 <_Z8PlayDemov+0x82c>
1000c83e:	e0bd      	b.n	1000c9bc <_Z8PlayDemov+0x9a8>
			b = *s++;
1000c840:	7bde      	ldrb	r6, [r3, #15]
1000c842:	9600      	str	r6, [sp, #0]
			if (b != 0)
1000c844:	2e00      	cmp	r6, #0
1000c846:	d100      	bne.n	1000c84a <_Z8PlayDemov+0x836>
1000c848:	e0e7      	b.n	1000ca1a <_Z8PlayDemov+0xa06>
					if (*d != TILE_EMPTY) ok = False;
1000c84a:	2754      	movs	r7, #84	; 0x54
1000c84c:	5dcf      	ldrb	r7, [r1, r7]
1000c84e:	2f08      	cmp	r7, #8
1000c850:	d100      	bne.n	1000c854 <_Z8PlayDemov+0x840>
1000c852:	e165      	b.n	1000cb20 <_Z8PlayDemov+0xb0c>
1000c854:	f7fa ffc6 	bl	100077e4 <_Z8CheckEndv.part.0>
		if (!CheckEnd()) break;
1000c858:	2800      	cmp	r0, #0
1000c85a:	d101      	bne.n	1000c860 <_Z8PlayDemov+0x84c>
1000c85c:	f7ff fc04 	bl	1000c068 <_Z8PlayDemov+0x54>
	u8* d = &Board[x + y*MAPW];
1000c860:	2100      	movs	r1, #0
1000c862:	4a7e      	ldr	r2, [pc, #504]	; (1000ca5c <_Z8PlayDemov+0xa48>)
	const u8* s = &BrickTemp[brick*BRICKTEMPSIZE];
1000c864:	4b7e      	ldr	r3, [pc, #504]	; (1000ca60 <_Z8PlayDemov+0xa4c>)
	u8* d = &Board[x + y*MAPW];
1000c866:	5651      	ldrsb	r1, [r2, r1]
	const u8* s = &BrickTemp[brick*BRICKTEMPSIZE];
1000c868:	7818      	ldrb	r0, [r3, #0]
	u8* d = &Board[x + y*MAPW];
1000c86a:	004a      	lsls	r2, r1, #1
1000c86c:	1852      	adds	r2, r2, r1
1000c86e:	00d1      	lsls	r1, r2, #3
1000c870:	1852      	adds	r2, r2, r1
1000c872:	4692      	mov	sl, r2
1000c874:	4978      	ldr	r1, [pc, #480]	; (1000ca58 <_Z8PlayDemov+0xa44>)
			b = *s++;
1000c876:	4a7b      	ldr	r2, [pc, #492]	; (1000ca64 <_Z8PlayDemov+0xa50>)
	u8* d = &Board[x + y*MAPW];
1000c878:	7809      	ldrb	r1, [r1, #0]
	const u8* s = &BrickTemp[brick*BRICKTEMPSIZE];
1000c87a:	0100      	lsls	r0, r0, #4
	u8* d = &Board[x + y*MAPW];
1000c87c:	b249      	sxtb	r1, r1
1000c87e:	448a      	add	sl, r1
1000c880:	4659      	mov	r1, fp
	const u8* s = &BrickTemp[brick*BRICKTEMPSIZE];
1000c882:	4b78      	ldr	r3, [pc, #480]	; (1000ca64 <_Z8PlayDemov+0xa50>)
			b = *s++;
1000c884:	5c12      	ldrb	r2, [r2, r0]
	const u8* s = &BrickTemp[brick*BRICKTEMPSIZE];
1000c886:	181b      	adds	r3, r3, r0
			b = *s++;
1000c888:	4691      	mov	r9, r2
1000c88a:	791a      	ldrb	r2, [r3, #4]
1000c88c:	7a18      	ldrb	r0, [r3, #8]
1000c88e:	4690      	mov	r8, r2
1000c890:	7b9a      	ldrb	r2, [r3, #14]
1000c892:	7b1d      	ldrb	r5, [r3, #12]
1000c894:	9200      	str	r2, [sp, #0]
1000c896:	7bda      	ldrb	r2, [r3, #15]
	u8* d = &Board[x + y*MAPW];
1000c898:	4451      	add	r1, sl
			b = *s++;
1000c89a:	9201      	str	r2, [sp, #4]
			if (b != 0) *d = b;
1000c89c:	464a      	mov	r2, r9
1000c89e:	2a00      	cmp	r2, #0
1000c8a0:	d003      	beq.n	1000c8aa <_Z8PlayDemov+0x896>
1000c8a2:	465a      	mov	r2, fp
1000c8a4:	4657      	mov	r7, sl
1000c8a6:	464e      	mov	r6, r9
1000c8a8:	55d6      	strb	r6, [r2, r7]
			b = *s++;
1000c8aa:	785a      	ldrb	r2, [r3, #1]
			if (b != 0) *d = b;
1000c8ac:	2a00      	cmp	r2, #0
1000c8ae:	d000      	beq.n	1000c8b2 <_Z8PlayDemov+0x89e>
1000c8b0:	704a      	strb	r2, [r1, #1]
			b = *s++;
1000c8b2:	789a      	ldrb	r2, [r3, #2]
			if (b != 0) *d = b;
1000c8b4:	2a00      	cmp	r2, #0
1000c8b6:	d000      	beq.n	1000c8ba <_Z8PlayDemov+0x8a6>
1000c8b8:	708a      	strb	r2, [r1, #2]
			b = *s++;
1000c8ba:	78da      	ldrb	r2, [r3, #3]
			if (b != 0) *d = b;
1000c8bc:	2a00      	cmp	r2, #0
1000c8be:	d000      	beq.n	1000c8c2 <_Z8PlayDemov+0x8ae>
1000c8c0:	70ca      	strb	r2, [r1, #3]
1000c8c2:	4642      	mov	r2, r8
1000c8c4:	2a00      	cmp	r2, #0
1000c8c6:	d000      	beq.n	1000c8ca <_Z8PlayDemov+0x8b6>
1000c8c8:	76ca      	strb	r2, [r1, #27]
			b = *s++;
1000c8ca:	795a      	ldrb	r2, [r3, #5]
			if (b != 0) *d = b;
1000c8cc:	2a00      	cmp	r2, #0
1000c8ce:	d000      	beq.n	1000c8d2 <_Z8PlayDemov+0x8be>
1000c8d0:	770a      	strb	r2, [r1, #28]
			b = *s++;
1000c8d2:	799a      	ldrb	r2, [r3, #6]
			if (b != 0) *d = b;
1000c8d4:	2a00      	cmp	r2, #0
1000c8d6:	d000      	beq.n	1000c8da <_Z8PlayDemov+0x8c6>
1000c8d8:	774a      	strb	r2, [r1, #29]
			b = *s++;
1000c8da:	79da      	ldrb	r2, [r3, #7]
			if (b != 0) *d = b;
1000c8dc:	2a00      	cmp	r2, #0
1000c8de:	d000      	beq.n	1000c8e2 <_Z8PlayDemov+0x8ce>
1000c8e0:	778a      	strb	r2, [r1, #30]
1000c8e2:	2800      	cmp	r0, #0
1000c8e4:	d001      	beq.n	1000c8ea <_Z8PlayDemov+0x8d6>
1000c8e6:	2236      	movs	r2, #54	; 0x36
1000c8e8:	5488      	strb	r0, [r1, r2]
			b = *s++;
1000c8ea:	7a5a      	ldrb	r2, [r3, #9]
			if (b != 0) *d = b;
1000c8ec:	2a00      	cmp	r2, #0
1000c8ee:	d001      	beq.n	1000c8f4 <_Z8PlayDemov+0x8e0>
1000c8f0:	2037      	movs	r0, #55	; 0x37
1000c8f2:	540a      	strb	r2, [r1, r0]
			b = *s++;
1000c8f4:	7a9a      	ldrb	r2, [r3, #10]
			if (b != 0) *d = b;
1000c8f6:	2a00      	cmp	r2, #0
1000c8f8:	d001      	beq.n	1000c8fe <_Z8PlayDemov+0x8ea>
1000c8fa:	2038      	movs	r0, #56	; 0x38
1000c8fc:	540a      	strb	r2, [r1, r0]
			b = *s++;
1000c8fe:	7ada      	ldrb	r2, [r3, #11]
			if (b != 0) *d = b;
1000c900:	2a00      	cmp	r2, #0
1000c902:	d001      	beq.n	1000c908 <_Z8PlayDemov+0x8f4>
1000c904:	2039      	movs	r0, #57	; 0x39
1000c906:	540a      	strb	r2, [r1, r0]
1000c908:	2d00      	cmp	r5, #0
1000c90a:	d001      	beq.n	1000c910 <_Z8PlayDemov+0x8fc>
1000c90c:	2251      	movs	r2, #81	; 0x51
1000c90e:	548d      	strb	r5, [r1, r2]
			b = *s++;
1000c910:	7b5b      	ldrb	r3, [r3, #13]
			if (b != 0) *d = b;
1000c912:	2b00      	cmp	r3, #0
1000c914:	d001      	beq.n	1000c91a <_Z8PlayDemov+0x906>
1000c916:	2252      	movs	r2, #82	; 0x52
1000c918:	548b      	strb	r3, [r1, r2]
1000c91a:	9a00      	ldr	r2, [sp, #0]
1000c91c:	2a00      	cmp	r2, #0
1000c91e:	d001      	beq.n	1000c924 <_Z8PlayDemov+0x910>
1000c920:	2353      	movs	r3, #83	; 0x53
1000c922:	54ca      	strb	r2, [r1, r3]
1000c924:	9a01      	ldr	r2, [sp, #4]
1000c926:	2a00      	cmp	r2, #0
1000c928:	d001      	beq.n	1000c92e <_Z8PlayDemov+0x91a>
1000c92a:	2354      	movs	r3, #84	; 0x54
1000c92c:	54ca      	strb	r2, [r1, r3]
		sleep_ms(200);
1000c92e:	20c8      	movs	r0, #200	; 0xc8
1000c930:	f7f7 ff82 	bl	10004838 <sleep_ms>
1000c934:	23d0      	movs	r3, #208	; 0xd0
1000c936:	061b      	lsls	r3, r3, #24
1000c938:	685b      	ldr	r3, [r3, #4]
	if (!gpio_get(PB_LT))
1000c93a:	02db      	lsls	r3, r3, #11
1000c93c:	d501      	bpl.n	1000c942 <_Z8PlayDemov+0x92e>
1000c93e:	f7ff fb7c 	bl	1000c03a <_Z8PlayDemov+0x26>
1000c942:	f7ff fb8e 	bl	1000c062 <_Z8PlayDemov+0x4e>
			b = *s++;
1000c946:	7a5d      	ldrb	r5, [r3, #9]
			if (b != 0)
1000c948:	2d00      	cmp	r5, #0
1000c94a:	d100      	bne.n	1000c94e <_Z8PlayDemov+0x93a>
1000c94c:	e0a7      	b.n	1000ca9e <_Z8PlayDemov+0xa8a>
				if ((y < 1) || (y >= MAPH-1))
1000c94e:	2f11      	cmp	r7, #17
1000c950:	d900      	bls.n	1000c954 <_Z8PlayDemov+0x940>
1000c952:	e089      	b.n	1000ca68 <_Z8PlayDemov+0xa54>
					if (*d != TILE_EMPTY) ok = False;
1000c954:	2537      	movs	r5, #55	; 0x37
1000c956:	5d4d      	ldrb	r5, [r1, r5]
1000c958:	3d08      	subs	r5, #8
1000c95a:	426e      	negs	r6, r5
1000c95c:	4175      	adcs	r5, r6
1000c95e:	426d      	negs	r5, r5
1000c960:	402a      	ands	r2, r5
			if (b != 0)
1000c962:	7a9d      	ldrb	r5, [r3, #10]
1000c964:	2d00      	cmp	r5, #0
1000c966:	d100      	bne.n	1000c96a <_Z8PlayDemov+0x956>
1000c968:	e081      	b.n	1000ca6e <_Z8PlayDemov+0xa5a>
					if (*d != TILE_EMPTY) ok = False;
1000c96a:	2538      	movs	r5, #56	; 0x38
1000c96c:	5d4d      	ldrb	r5, [r1, r5]
1000c96e:	3d08      	subs	r5, #8
1000c970:	426e      	negs	r6, r5
1000c972:	4175      	adcs	r5, r6
1000c974:	426d      	negs	r5, r5
1000c976:	402a      	ands	r2, r5
			if (b != 0)
1000c978:	7add      	ldrb	r5, [r3, #11]
1000c97a:	2d00      	cmp	r5, #0
1000c97c:	d100      	bne.n	1000c980 <_Z8PlayDemov+0x96c>
1000c97e:	e748      	b.n	1000c812 <_Z8PlayDemov+0x7fe>
					if (*d != TILE_EMPTY) ok = False;
1000c980:	2539      	movs	r5, #57	; 0x39
1000c982:	5d4d      	ldrb	r5, [r1, r5]
					ok = False;
1000c984:	3d08      	subs	r5, #8
1000c986:	426e      	negs	r6, r5
1000c988:	4175      	adcs	r5, r6
1000c98a:	426d      	negs	r5, r5
1000c98c:	402a      	ands	r2, r5
			b = *s++;
1000c98e:	7b1d      	ldrb	r5, [r3, #12]
			if (b != 0)
1000c990:	2d00      	cmp	r5, #0
1000c992:	d000      	beq.n	1000c996 <_Z8PlayDemov+0x982>
1000c994:	e741      	b.n	1000c81a <_Z8PlayDemov+0x806>
1000c996:	7b5e      	ldrb	r6, [r3, #13]
1000c998:	2e00      	cmp	r6, #0
1000c99a:	d100      	bne.n	1000c99e <_Z8PlayDemov+0x98a>
1000c99c:	e089      	b.n	1000cab2 <_Z8PlayDemov+0xa9e>
				if ((y < 1) || (y >= MAPH-1))
1000c99e:	9e01      	ldr	r6, [sp, #4]
1000c9a0:	2e11      	cmp	r6, #17
1000c9a2:	d900      	bls.n	1000c9a6 <_Z8PlayDemov+0x992>
1000c9a4:	e756      	b.n	1000c854 <_Z8PlayDemov+0x840>
					if (*d != TILE_EMPTY) ok = False;
1000c9a6:	2652      	movs	r6, #82	; 0x52
1000c9a8:	5d8e      	ldrb	r6, [r1, r6]
1000c9aa:	2e08      	cmp	r6, #8
1000c9ac:	d100      	bne.n	1000c9b0 <_Z8PlayDemov+0x99c>
1000c9ae:	e0a3      	b.n	1000caf8 <_Z8PlayDemov+0xae4>
			b = *s++;
1000c9b0:	7b9a      	ldrb	r2, [r3, #14]
1000c9b2:	4694      	mov	ip, r2
			if (b != 0)
1000c9b4:	2a00      	cmp	r2, #0
1000c9b6:	d100      	bne.n	1000c9ba <_Z8PlayDemov+0x9a6>
1000c9b8:	e74c      	b.n	1000c854 <_Z8PlayDemov+0x840>
					if (*d != TILE_EMPTY) ok = False;
1000c9ba:	2200      	movs	r2, #0
1000c9bc:	2653      	movs	r6, #83	; 0x53
1000c9be:	5d8e      	ldrb	r6, [r1, r6]
1000c9c0:	2e08      	cmp	r6, #8
1000c9c2:	d000      	beq.n	1000c9c6 <_Z8PlayDemov+0x9b2>
1000c9c4:	e746      	b.n	1000c854 <_Z8PlayDemov+0x840>
			b = *s++;
1000c9c6:	7bde      	ldrb	r6, [r3, #15]
1000c9c8:	9600      	str	r6, [sp, #0]
			if (b != 0)
1000c9ca:	2e00      	cmp	r6, #0
1000c9cc:	d000      	beq.n	1000c9d0 <_Z8PlayDemov+0x9bc>
1000c9ce:	e73c      	b.n	1000c84a <_Z8PlayDemov+0x836>
1000c9d0:	9601      	str	r6, [sp, #4]
1000c9d2:	4666      	mov	r6, ip
1000c9d4:	9600      	str	r6, [sp, #0]
1000c9d6:	e021      	b.n	1000ca1c <_Z8PlayDemov+0xa08>
			b = *s++;
1000c9d8:	795d      	ldrb	r5, [r3, #5]
			if (b != 0)
1000c9da:	2d00      	cmp	r5, #0
1000c9dc:	d100      	bne.n	1000c9e0 <_Z8PlayDemov+0x9cc>
1000c9de:	e07c      	b.n	1000cada <_Z8PlayDemov+0xac6>
				if ((y < 1) || (y >= MAPH-1))
1000c9e0:	2811      	cmp	r0, #17
1000c9e2:	d851      	bhi.n	1000ca88 <_Z8PlayDemov+0xa74>
					if (*d != TILE_EMPTY) ok = False;
1000c9e4:	7f0d      	ldrb	r5, [r1, #28]
1000c9e6:	3d08      	subs	r5, #8
1000c9e8:	426e      	negs	r6, r5
1000c9ea:	4175      	adcs	r5, r6
1000c9ec:	426d      	negs	r5, r5
1000c9ee:	402a      	ands	r2, r5
			if (b != 0)
1000c9f0:	799d      	ldrb	r5, [r3, #6]
1000c9f2:	2d00      	cmp	r5, #0
1000c9f4:	d04b      	beq.n	1000ca8e <_Z8PlayDemov+0xa7a>
					if (*d != TILE_EMPTY) ok = False;
1000c9f6:	7f4d      	ldrb	r5, [r1, #29]
1000c9f8:	3d08      	subs	r5, #8
1000c9fa:	426e      	negs	r6, r5
1000c9fc:	4175      	adcs	r5, r6
1000c9fe:	426d      	negs	r5, r5
1000ca00:	402a      	ands	r2, r5
			if (b != 0)
1000ca02:	79dd      	ldrb	r5, [r3, #7]
1000ca04:	2d00      	cmp	r5, #0
1000ca06:	d100      	bne.n	1000ca0a <_Z8PlayDemov+0x9f6>
1000ca08:	e6e6      	b.n	1000c7d8 <_Z8PlayDemov+0x7c4>
					if (*d != TILE_EMPTY) ok = False;
1000ca0a:	7f8d      	ldrb	r5, [r1, #30]
					ok = False;
1000ca0c:	3d08      	subs	r5, #8
1000ca0e:	426e      	negs	r6, r5
1000ca10:	4175      	adcs	r5, r6
1000ca12:	426d      	negs	r5, r5
1000ca14:	402a      	ands	r2, r5
1000ca16:	e6df      	b.n	1000c7d8 <_Z8PlayDemov+0x7c4>
			if (b != 0)
1000ca18:	2600      	movs	r6, #0
1000ca1a:	9601      	str	r6, [sp, #4]
	if (!CheckBrick(BrickX, BrickY, Brick))
1000ca1c:	2a00      	cmp	r2, #0
1000ca1e:	d000      	beq.n	1000ca22 <_Z8PlayDemov+0xa0e>
1000ca20:	e73c      	b.n	1000c89c <_Z8PlayDemov+0x888>
1000ca22:	e717      	b.n	1000c854 <_Z8PlayDemov+0x840>
	Bool ok = True;
1000ca24:	2201      	movs	r2, #1
			if (b != 0)
1000ca26:	785d      	ldrb	r5, [r3, #1]
1000ca28:	2d00      	cmp	r5, #0
1000ca2a:	d003      	beq.n	1000ca34 <_Z8PlayDemov+0xa20>
				if ((y < 1) || (y >= MAPH-1))
1000ca2c:	1e45      	subs	r5, r0, #1
1000ca2e:	2d11      	cmp	r5, #17
1000ca30:	d948      	bls.n	1000cac4 <_Z8PlayDemov+0xab0>
					ok = False;
1000ca32:	2200      	movs	r2, #0
			if (b != 0)
1000ca34:	789d      	ldrb	r5, [r3, #2]
1000ca36:	2d00      	cmp	r5, #0
1000ca38:	d004      	beq.n	1000ca44 <_Z8PlayDemov+0xa30>
				if ((y < 1) || (y >= MAPH-1))
1000ca3a:	1e45      	subs	r5, r0, #1
1000ca3c:	2d11      	cmp	r5, #17
1000ca3e:	d800      	bhi.n	1000ca42 <_Z8PlayDemov+0xa2e>
1000ca40:	e69f      	b.n	1000c782 <_Z8PlayDemov+0x76e>
					ok = False;
1000ca42:	2200      	movs	r2, #0
			if (b != 0)
1000ca44:	78dd      	ldrb	r5, [r3, #3]
1000ca46:	2d00      	cmp	r5, #0
1000ca48:	d100      	bne.n	1000ca4c <_Z8PlayDemov+0xa38>
1000ca4a:	e6a9      	b.n	1000c7a0 <_Z8PlayDemov+0x78c>
				if ((y < 1) || (y >= MAPH-1))
1000ca4c:	1e45      	subs	r5, r0, #1
1000ca4e:	2d11      	cmp	r5, #17
1000ca50:	d800      	bhi.n	1000ca54 <_Z8PlayDemov+0xa40>
1000ca52:	e69f      	b.n	1000c794 <_Z8PlayDemov+0x780>
					ok = False;
1000ca54:	2200      	movs	r2, #0
1000ca56:	e6a3      	b.n	1000c7a0 <_Z8PlayDemov+0x78c>
1000ca58:	20012765 	.word	0x20012765
1000ca5c:	20012766 	.word	0x20012766
1000ca60:	20012764 	.word	0x20012764
1000ca64:	10010bd4 	.word	0x10010bd4
			b = *s++;
1000ca68:	7a9a      	ldrb	r2, [r3, #10]
			if (b != 0)
1000ca6a:	2a00      	cmp	r2, #0
1000ca6c:	d106      	bne.n	1000ca7c <_Z8PlayDemov+0xa68>
1000ca6e:	7add      	ldrb	r5, [r3, #11]
1000ca70:	2d00      	cmp	r5, #0
1000ca72:	d100      	bne.n	1000ca76 <_Z8PlayDemov+0xa62>
1000ca74:	e6cd      	b.n	1000c812 <_Z8PlayDemov+0x7fe>
				if ((y < 1) || (y >= MAPH-1))
1000ca76:	2f11      	cmp	r7, #17
1000ca78:	d800      	bhi.n	1000ca7c <_Z8PlayDemov+0xa68>
1000ca7a:	e781      	b.n	1000c980 <_Z8PlayDemov+0x96c>
					ok = False;
1000ca7c:	2200      	movs	r2, #0
1000ca7e:	e6c8      	b.n	1000c812 <_Z8PlayDemov+0x7fe>
			b = *s++;
1000ca80:	795a      	ldrb	r2, [r3, #5]
			if (b != 0)
1000ca82:	2a00      	cmp	r2, #0
1000ca84:	d100      	bne.n	1000ca88 <_Z8PlayDemov+0xa74>
1000ca86:	e6a7      	b.n	1000c7d8 <_Z8PlayDemov+0x7c4>
			b = *s++;
1000ca88:	799a      	ldrb	r2, [r3, #6]
			if (b != 0)
1000ca8a:	2a00      	cmp	r2, #0
1000ca8c:	d105      	bne.n	1000ca9a <_Z8PlayDemov+0xa86>
1000ca8e:	79dd      	ldrb	r5, [r3, #7]
1000ca90:	2d00      	cmp	r5, #0
1000ca92:	d100      	bne.n	1000ca96 <_Z8PlayDemov+0xa82>
1000ca94:	e6a0      	b.n	1000c7d8 <_Z8PlayDemov+0x7c4>
				if ((y < 1) || (y >= MAPH-1))
1000ca96:	2811      	cmp	r0, #17
1000ca98:	d9b7      	bls.n	1000ca0a <_Z8PlayDemov+0x9f6>
					ok = False;
1000ca9a:	2200      	movs	r2, #0
1000ca9c:	e69c      	b.n	1000c7d8 <_Z8PlayDemov+0x7c4>
			if (b != 0)
1000ca9e:	7a9d      	ldrb	r5, [r3, #10]
1000caa0:	2d00      	cmp	r5, #0
1000caa2:	d0e4      	beq.n	1000ca6e <_Z8PlayDemov+0xa5a>
				if ((y < 1) || (y >= MAPH-1))
1000caa4:	2f11      	cmp	r7, #17
1000caa6:	d800      	bhi.n	1000caaa <_Z8PlayDemov+0xa96>
1000caa8:	e75f      	b.n	1000c96a <_Z8PlayDemov+0x956>
					ok = False;
1000caaa:	2200      	movs	r2, #0
1000caac:	e6b1      	b.n	1000c812 <_Z8PlayDemov+0x7fe>
1000caae:	2200      	movs	r2, #0
1000cab0:	e7b9      	b.n	1000ca26 <_Z8PlayDemov+0xa12>
			b = *s++;
1000cab2:	7b9e      	ldrb	r6, [r3, #14]
1000cab4:	46b4      	mov	ip, r6
			if (b != 0)
1000cab6:	2e00      	cmp	r6, #0
1000cab8:	d023      	beq.n	1000cb02 <_Z8PlayDemov+0xaee>
				if ((y < 1) || (y >= MAPH-1))
1000caba:	9e01      	ldr	r6, [sp, #4]
1000cabc:	2e11      	cmp	r6, #17
1000cabe:	d900      	bls.n	1000cac2 <_Z8PlayDemov+0xaae>
1000cac0:	e6c8      	b.n	1000c854 <_Z8PlayDemov+0x840>
1000cac2:	e77b      	b.n	1000c9bc <_Z8PlayDemov+0x9a8>
					if (*d != TILE_EMPTY) ok = False;
1000cac4:	784d      	ldrb	r5, [r1, #1]
1000cac6:	3d08      	subs	r5, #8
1000cac8:	426e      	negs	r6, r5
1000caca:	4175      	adcs	r5, r6
1000cacc:	426d      	negs	r5, r5
1000cace:	402a      	ands	r2, r5
			if (b != 0)
1000cad0:	789d      	ldrb	r5, [r3, #2]
1000cad2:	2d00      	cmp	r5, #0
1000cad4:	d000      	beq.n	1000cad8 <_Z8PlayDemov+0xac4>
1000cad6:	e654      	b.n	1000c782 <_Z8PlayDemov+0x76e>
1000cad8:	e7b4      	b.n	1000ca44 <_Z8PlayDemov+0xa30>
1000cada:	799d      	ldrb	r5, [r3, #6]
1000cadc:	2d00      	cmp	r5, #0
1000cade:	d0d6      	beq.n	1000ca8e <_Z8PlayDemov+0xa7a>
				if ((y < 1) || (y >= MAPH-1))
1000cae0:	2811      	cmp	r0, #17
1000cae2:	d988      	bls.n	1000c9f6 <_Z8PlayDemov+0x9e2>
					ok = False;
1000cae4:	2200      	movs	r2, #0
1000cae6:	e677      	b.n	1000c7d8 <_Z8PlayDemov+0x7c4>
	sleep_ms(100);
1000cae8:	2064      	movs	r0, #100	; 0x64
1000caea:	f7f7 fea5 	bl	10004838 <sleep_ms>
		sleep_ms(150);
1000caee:	2096      	movs	r0, #150	; 0x96
1000caf0:	f7f7 fea2 	bl	10004838 <sleep_ms>
1000caf4:	f7ff fab8 	bl	1000c068 <_Z8PlayDemov+0x54>
			b = *s++;
1000caf8:	7b9e      	ldrb	r6, [r3, #14]
1000cafa:	46b4      	mov	ip, r6
			if (b != 0)
1000cafc:	2e00      	cmp	r6, #0
1000cafe:	d000      	beq.n	1000cb02 <_Z8PlayDemov+0xaee>
1000cb00:	e75c      	b.n	1000c9bc <_Z8PlayDemov+0x9a8>
			b = *s++;
1000cb02:	7bde      	ldrb	r6, [r3, #15]
1000cb04:	9600      	str	r6, [sp, #0]
			if (b != 0)
1000cb06:	2e00      	cmp	r6, #0
1000cb08:	d086      	beq.n	1000ca18 <_Z8PlayDemov+0xa04>
				if ((y < 1) || (y >= MAPH-1))
1000cb0a:	9e01      	ldr	r6, [sp, #4]
1000cb0c:	2e11      	cmp	r6, #17
1000cb0e:	d900      	bls.n	1000cb12 <_Z8PlayDemov+0xafe>
1000cb10:	e6a0      	b.n	1000c854 <_Z8PlayDemov+0x840>
					if (*d != TILE_EMPTY) ok = False;
1000cb12:	2754      	movs	r7, #84	; 0x54
				if ((y < 1) || (y >= MAPH-1))
1000cb14:	2600      	movs	r6, #0
					if (*d != TILE_EMPTY) ok = False;
1000cb16:	5dcf      	ldrb	r7, [r1, r7]
				if ((y < 1) || (y >= MAPH-1))
1000cb18:	46b4      	mov	ip, r6
					if (*d != TILE_EMPTY) ok = False;
1000cb1a:	2f08      	cmp	r7, #8
1000cb1c:	d000      	beq.n	1000cb20 <_Z8PlayDemov+0xb0c>
1000cb1e:	e699      	b.n	1000c854 <_Z8PlayDemov+0x840>
1000cb20:	9e00      	ldr	r6, [sp, #0]
1000cb22:	9601      	str	r6, [sp, #4]
1000cb24:	4666      	mov	r6, ip
1000cb26:	9600      	str	r6, [sp, #0]
1000cb28:	e778      	b.n	1000ca1c <_Z8PlayDemov+0xa08>
1000cb2a:	46c0      	nop			; (mov r8, r8)

1000cb2c <_Z10initJoyPadv>:
// #define PB_DN 22		// Down direction
// #define PB_UR 26		// Upper right
// #define PB_UP 27		// Up direction

void initJoyPad()
{
1000cb2c:	b510      	push	{r4, lr}
	gpio_init(PB_UL);
1000cb2e:	2010      	movs	r0, #16
1000cb30:	f7f4 fe8e 	bl	10001850 <gpio_init>
 *  \ingroup hardware_gpio
 *
 * \param mask Bitmask of GPIO to set to input, as bits 0-29
 */
static inline void gpio_set_dir_in_masked(uint32_t mask) {
    sio_hw->gpio_oe_clr = mask;
1000cb34:	24d0      	movs	r4, #208	; 0xd0
1000cb36:	2380      	movs	r3, #128	; 0x80
1000cb38:	0624      	lsls	r4, r4, #24
1000cb3a:	025b      	lsls	r3, r3, #9
1000cb3c:	62a3      	str	r3, [r4, #40]	; 0x28
    gpio_set_pulls(gpio, true, false);
1000cb3e:	2200      	movs	r2, #0
1000cb40:	2101      	movs	r1, #1
1000cb42:	2010      	movs	r0, #16
1000cb44:	f7f4 fe5a 	bl	100017fc <gpio_set_pulls>
	gpio_set_dir(PB_UL, GPIO_IN);
	gpio_pull_up(PB_UL);
	
	gpio_init(PB_FR);
1000cb48:	2012      	movs	r0, #18
1000cb4a:	f7f4 fe81 	bl	10001850 <gpio_init>
    sio_hw->gpio_oe_clr = mask;
1000cb4e:	2380      	movs	r3, #128	; 0x80
1000cb50:	02db      	lsls	r3, r3, #11
1000cb52:	62a3      	str	r3, [r4, #40]	; 0x28
    gpio_set_pulls(gpio, true, false);
1000cb54:	2200      	movs	r2, #0
1000cb56:	2101      	movs	r1, #1
1000cb58:	2012      	movs	r0, #18
1000cb5a:	f7f4 fe4f 	bl	100017fc <gpio_set_pulls>
	gpio_set_dir(PB_FR, GPIO_IN);
	gpio_pull_up(PB_FR);
	
	gpio_init(PB_UP);
1000cb5e:	201b      	movs	r0, #27
1000cb60:	f7f4 fe76 	bl	10001850 <gpio_init>
    sio_hw->gpio_oe_clr = mask;
1000cb64:	2380      	movs	r3, #128	; 0x80
1000cb66:	051b      	lsls	r3, r3, #20
1000cb68:	62a3      	str	r3, [r4, #40]	; 0x28
    gpio_set_pulls(gpio, true, false);
1000cb6a:	2200      	movs	r2, #0
1000cb6c:	2101      	movs	r1, #1
1000cb6e:	201b      	movs	r0, #27
1000cb70:	f7f4 fe44 	bl	100017fc <gpio_set_pulls>
	gpio_set_dir(PB_UP, GPIO_IN);
	gpio_pull_up(PB_UP);
	
	gpio_init(PB_UR);
1000cb74:	201a      	movs	r0, #26
1000cb76:	f7f4 fe6b 	bl	10001850 <gpio_init>
    sio_hw->gpio_oe_clr = mask;
1000cb7a:	2380      	movs	r3, #128	; 0x80
1000cb7c:	04db      	lsls	r3, r3, #19
1000cb7e:	62a3      	str	r3, [r4, #40]	; 0x28
    gpio_set_pulls(gpio, true, false);
1000cb80:	2200      	movs	r2, #0
1000cb82:	2101      	movs	r1, #1
1000cb84:	201a      	movs	r0, #26
1000cb86:	f7f4 fe39 	bl	100017fc <gpio_set_pulls>
	gpio_set_dir(PB_UR, GPIO_IN);
	gpio_pull_up(PB_UR);
	
	gpio_init(PB_DN);
1000cb8a:	2016      	movs	r0, #22
1000cb8c:	f7f4 fe60 	bl	10001850 <gpio_init>
    sio_hw->gpio_oe_clr = mask;
1000cb90:	2380      	movs	r3, #128	; 0x80
1000cb92:	03db      	lsls	r3, r3, #15
1000cb94:	62a3      	str	r3, [r4, #40]	; 0x28
    gpio_set_pulls(gpio, true, false);
1000cb96:	2200      	movs	r2, #0
1000cb98:	2101      	movs	r1, #1
1000cb9a:	2016      	movs	r0, #22
1000cb9c:	f7f4 fe2e 	bl	100017fc <gpio_set_pulls>
	gpio_set_dir(PB_DN, GPIO_IN);
	gpio_pull_up(PB_DN);
	
	gpio_init(PB_LT);
1000cba0:	2014      	movs	r0, #20
1000cba2:	f7f4 fe55 	bl	10001850 <gpio_init>
    sio_hw->gpio_oe_clr = mask;
1000cba6:	2380      	movs	r3, #128	; 0x80
1000cba8:	035b      	lsls	r3, r3, #13
1000cbaa:	62a3      	str	r3, [r4, #40]	; 0x28
    gpio_set_pulls(gpio, true, false);
1000cbac:	2200      	movs	r2, #0
1000cbae:	2101      	movs	r1, #1
1000cbb0:	2014      	movs	r0, #20
1000cbb2:	f7f4 fe23 	bl	100017fc <gpio_set_pulls>
	gpio_set_dir(PB_LT, GPIO_IN);
	gpio_pull_up(PB_LT);
	
	gpio_init(PB_RT);
1000cbb6:	2011      	movs	r0, #17
1000cbb8:	f7f4 fe4a 	bl	10001850 <gpio_init>
    sio_hw->gpio_oe_clr = mask;
1000cbbc:	2380      	movs	r3, #128	; 0x80
1000cbbe:	029b      	lsls	r3, r3, #10
1000cbc0:	62a3      	str	r3, [r4, #40]	; 0x28
    gpio_set_pulls(gpio, true, false);
1000cbc2:	2200      	movs	r2, #0
1000cbc4:	2101      	movs	r1, #1
1000cbc6:	2011      	movs	r0, #17
1000cbc8:	f7f4 fe18 	bl	100017fc <gpio_set_pulls>
	gpio_set_dir(PB_RT, GPIO_IN);
	gpio_pull_up(PB_RT);
	
	gpio_init(PB_CF);
1000cbcc:	2015      	movs	r0, #21
1000cbce:	f7f4 fe3f 	bl	10001850 <gpio_init>
    sio_hw->gpio_oe_clr = mask;
1000cbd2:	2380      	movs	r3, #128	; 0x80
1000cbd4:	039b      	lsls	r3, r3, #14
    gpio_set_pulls(gpio, true, false);
1000cbd6:	2200      	movs	r2, #0
1000cbd8:	2101      	movs	r1, #1
1000cbda:	2015      	movs	r0, #21
    sio_hw->gpio_oe_clr = mask;
1000cbdc:	62a3      	str	r3, [r4, #40]	; 0x28
    gpio_set_pulls(gpio, true, false);
1000cbde:	f7f4 fe0d 	bl	100017fc <gpio_set_pulls>
	gpio_set_dir(PB_CF, GPIO_IN);
	gpio_pull_up(PB_CF);

}
1000cbe2:	bd10      	pop	{r4, pc}

1000cbe4 <main>:

int main()
{
1000cbe4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000cbe6:	46ce      	mov	lr, r9
1000cbe8:	4647      	mov	r7, r8
1000cbea:	b580      	push	{r7, lr}
inline void RandInitSeed() { Rand.InitSeed(); }
1000cbec:	484c      	ldr	r0, [pc, #304]	; (1000cd20 <main+0x13c>)
1000cbee:	b083      	sub	sp, #12
1000cbf0:	f002 fdc2 	bl	1000f778 <_ZN7cRandom8InitSeedEv>

	// initialize random number generator
	RandInitSeed();

	// copy tiles images to RAM buffer
	memcpy(TilesImg_Copy, TilesImg, sizeof(TilesImg));
1000cbf4:	22a2      	movs	r2, #162	; 0xa2
1000cbf6:	4c4b      	ldr	r4, [pc, #300]	; (1000cd24 <main+0x140>)
1000cbf8:	494b      	ldr	r1, [pc, #300]	; (1000cd28 <main+0x144>)
1000cbfa:	0020      	movs	r0, r4
1000cbfc:	0212      	lsls	r2, r2, #8
1000cbfe:	f7f4 fa77 	bl	100010f0 <__wrap___aeabi_memcpy>

	// initialize videomode
	Video(DEV_VGA, RES_VGA, FORM_TILE24, Board, TilesImg_Copy);
1000cc02:	4e4a      	ldr	r6, [pc, #296]	; (1000cd2c <main+0x148>)
1000cc04:	2002      	movs	r0, #2
1000cc06:	0033      	movs	r3, r6
1000cc08:	2206      	movs	r2, #6
1000cc0a:	2104      	movs	r1, #4
1000cc0c:	9400      	str	r4, [sp, #0]
1000cc0e:	f001 f9ef 	bl	1000dff0 <_Z5VideohhhPhPKv>

	// prepare tile canvas
	Canvas.img = TilesImg_Copy;
1000cc12:	4b47      	ldr	r3, [pc, #284]	; (1000cd30 <main+0x14c>)
	Canvas.w = TILESIZE;
	Canvas.h = sizeof(TilesImg)/TILESIZE;
1000cc14:	21d8      	movs	r1, #216	; 0xd8
	Canvas.w = TILESIZE;
1000cc16:	2218      	movs	r2, #24
	Canvas.img = TilesImg_Copy;
1000cc18:	601c      	str	r4, [r3, #0]
	Canvas.wb = TILESIZE;
	Canvas.format = CANVAS_8;
1000cc1a:	2400      	movs	r4, #0
	Canvas.h = sizeof(TilesImg)/TILESIZE;
1000cc1c:	00c9      	lsls	r1, r1, #3
	Canvas.w = TILESIZE;
1000cc1e:	609a      	str	r2, [r3, #8]
	Canvas.h = sizeof(TilesImg)/TILESIZE;
1000cc20:	60d9      	str	r1, [r3, #12]
	Canvas.wb = TILESIZE;
1000cc22:	611a      	str	r2, [r3, #16]
	Canvas.format = CANVAS_8;
1000cc24:	751c      	strb	r4, [r3, #20]

	// initialize stdio
	stdio_init_all();
1000cc26:	f7f7 f8eb 	bl	10003e00 <stdio_init_all>

	// initialize sound output
	PWMSndInit();
1000cc2a:	f002 fe4d 	bl	1000f8c8 <_Z10PWMSndInitv>

	// display help
	DispHelp();
1000cc2e:	f7fa fd39 	bl	100076a4 <_Z8DispHelpv>

	// best level
	LevelBest = 1;
1000cc32:	2201      	movs	r2, #1
1000cc34:	4b3f      	ldr	r3, [pc, #252]	; (1000cd34 <main+0x150>)
    return !!((1ul << gpio) & sio_hw->gpio_in);
1000cc36:	25d0      	movs	r5, #208	; 0xd0
1000cc38:	701a      	strb	r2, [r3, #0]
	ScoreBest = 0;
1000cc3a:	4b3f      	ldr	r3, [pc, #252]	; (1000cd38 <main+0x154>)
1000cc3c:	062d      	lsls	r5, r5, #24
1000cc3e:	601c      	str	r4, [r3, #0]
	LinesBest = 0;
1000cc40:	4b3e      	ldr	r3, [pc, #248]	; (1000cd3c <main+0x158>)
1000cc42:	601c      	str	r4, [r3, #0]
	Demo = False;
1000cc44:	4b3e      	ldr	r3, [pc, #248]	; (1000cd40 <main+0x15c>)
1000cc46:	701c      	strb	r4, [r3, #0]
	
	initJoyPad();
1000cc48:	f7ff ff70 	bl	1000cb2c <_Z10initJoyPadv>
1000cc4c:	4b3d      	ldr	r3, [pc, #244]	; (1000cd44 <main+0x160>)
1000cc4e:	3401      	adds	r4, #1
1000cc50:	4699      	mov	r9, r3
1000cc52:	4b3d      	ldr	r3, [pc, #244]	; (1000cd48 <main+0x164>)
1000cc54:	4698      	mov	r8, r3
	NewGame();
1000cc56:	f7fc f8b7 	bl	10008dc8 <_Z7NewGamev>
	memcpy(SaveBoard, Board, MAPSIZE);
1000cc5a:	2287      	movs	r2, #135	; 0x87
1000cc5c:	0031      	movs	r1, r6
1000cc5e:	4648      	mov	r0, r9
1000cc60:	0092      	lsls	r2, r2, #2
1000cc62:	f7f4 fa45 	bl	100010f0 <__wrap___aeabi_memcpy>
	memcpy(&Board[MAPW/2-4 + MAPH/2*MAPW], PauseMsg, 8);
1000cc66:	0030      	movs	r0, r6
1000cc68:	3018      	adds	r0, #24
1000cc6a:	2208      	movs	r2, #8
1000cc6c:	4641      	mov	r1, r8
1000cc6e:	30ff      	adds	r0, #255	; 0xff
1000cc70:	f7f4 fa3e 	bl	100010f0 <__wrap___aeabi_memcpy>
void FlushChar()
1000cc74:	e006      	b.n	1000cc84 <main+0xa0>
1000cc76:	686b      	ldr	r3, [r5, #4]
1000cc78:	0e9b      	lsrs	r3, r3, #26
	else if (!gpio_get(PB_UR))
1000cc7a:	421c      	tst	r4, r3
1000cc7c:	d119      	bne.n	1000ccb2 <main+0xce>
	sleep_ms(100);
1000cc7e:	2064      	movs	r0, #100	; 0x64
1000cc80:	f7f7 fdda 	bl	10004838 <sleep_ms>
1000cc84:	686b      	ldr	r3, [r5, #4]
1000cc86:	0d1b      	lsrs	r3, r3, #20
	if (!gpio_get(PB_LT))
1000cc88:	421c      	tst	r4, r3
1000cc8a:	d0f8      	beq.n	1000cc7e <main+0x9a>
1000cc8c:	686b      	ldr	r3, [r5, #4]
1000cc8e:	0c5b      	lsrs	r3, r3, #17
	else if (!gpio_get(PB_RT))
1000cc90:	421c      	tst	r4, r3
1000cc92:	d0f4      	beq.n	1000cc7e <main+0x9a>
1000cc94:	686b      	ldr	r3, [r5, #4]
1000cc96:	0d9b      	lsrs	r3, r3, #22
	else if (!gpio_get(PB_DN))
1000cc98:	421c      	tst	r4, r3
1000cc9a:	d0f0      	beq.n	1000cc7e <main+0x9a>
1000cc9c:	686b      	ldr	r3, [r5, #4]
1000cc9e:	0d5b      	lsrs	r3, r3, #21
	else if (!gpio_get(PB_CF))
1000cca0:	421c      	tst	r4, r3
1000cca2:	d1e8      	bne.n	1000cc76 <main+0x92>
	sleep_ms(100);
1000cca4:	2064      	movs	r0, #100	; 0x64
1000cca6:	f7f7 fdc7 	bl	10004838 <sleep_ms>
		sleep_ms(150);
1000ccaa:	2096      	movs	r0, #150	; 0x96
1000ccac:	f7f7 fdc4 	bl	10004838 <sleep_ms>
1000ccb0:	e7e8      	b.n	1000cc84 <main+0xa0>
1000ccb2:	2764      	movs	r7, #100	; 0x64
1000ccb4:	686b      	ldr	r3, [r5, #4]
1000ccb6:	0d1b      	lsrs	r3, r3, #20
	if (!gpio_get(PB_LT))
1000ccb8:	421c      	tst	r4, r3
1000ccba:	d00f      	beq.n	1000ccdc <main+0xf8>
1000ccbc:	686b      	ldr	r3, [r5, #4]
1000ccbe:	0c5b      	lsrs	r3, r3, #17
	else if (!gpio_get(PB_RT))
1000ccc0:	421c      	tst	r4, r3
1000ccc2:	d00b      	beq.n	1000ccdc <main+0xf8>
1000ccc4:	686b      	ldr	r3, [r5, #4]
1000ccc6:	0d9b      	lsrs	r3, r3, #22
	else if (!gpio_get(PB_DN))
1000ccc8:	421c      	tst	r4, r3
1000ccca:	d007      	beq.n	1000ccdc <main+0xf8>
1000cccc:	686b      	ldr	r3, [r5, #4]
1000ccce:	0d5b      	lsrs	r3, r3, #21
	else if (!gpio_get(PB_CF))
1000ccd0:	421c      	tst	r4, r3
1000ccd2:	d01e      	beq.n	1000cd12 <main+0x12e>
1000ccd4:	686b      	ldr	r3, [r5, #4]
1000ccd6:	0e9b      	lsrs	r3, r3, #26
	else if (!gpio_get(PB_UR))
1000ccd8:	421c      	tst	r4, r3
1000ccda:	d10d      	bne.n	1000ccf8 <main+0x114>
	sleep_ms(100);
1000ccdc:	2064      	movs	r0, #100	; 0x64
1000ccde:	f7f7 fdab 	bl	10004838 <sleep_ms>
	memcpy(Board, SaveBoard, MAPSIZE);
1000cce2:	2287      	movs	r2, #135	; 0x87
1000cce4:	4649      	mov	r1, r9
1000cce6:	0092      	lsls	r2, r2, #2
1000cce8:	0030      	movs	r0, r6
1000ccea:	f7f4 fa01 	bl	100010f0 <__wrap___aeabi_memcpy>
	return i > 0; // i > 0 if continue with user
1000ccee:	f7fc f93f 	bl	10008f70 <_Z4Gamev.part.0>
	{
		// game
		Game();

		// demo mode
		PlayDemo();
1000ccf2:	f7ff f98f 	bl	1000c014 <_Z8PlayDemov>
	while (True)
1000ccf6:	e7ae      	b.n	1000cc56 <main+0x72>
		sleep_ms(100);
1000ccf8:	2064      	movs	r0, #100	; 0x64
	for (i = (timeout ? 100 : 1000000000) ; i > 0; i--)
1000ccfa:	3f01      	subs	r7, #1
		sleep_ms(100);
1000ccfc:	f7f7 fd9c 	bl	10004838 <sleep_ms>
	for (i = (timeout ? 100 : 1000000000) ; i > 0; i--)
1000cd00:	2f00      	cmp	r7, #0
1000cd02:	d1d7      	bne.n	1000ccb4 <main+0xd0>
	memcpy(Board, SaveBoard, MAPSIZE);
1000cd04:	2287      	movs	r2, #135	; 0x87
1000cd06:	4649      	mov	r1, r9
1000cd08:	0030      	movs	r0, r6
1000cd0a:	0092      	lsls	r2, r2, #2
1000cd0c:	f7f4 f9f0 	bl	100010f0 <__wrap___aeabi_memcpy>
	return i > 0; // i > 0 if continue with user
1000cd10:	e7ef      	b.n	1000ccf2 <main+0x10e>
	sleep_ms(100);
1000cd12:	2064      	movs	r0, #100	; 0x64
1000cd14:	f7f7 fd90 	bl	10004838 <sleep_ms>
		sleep_ms(150);
1000cd18:	2096      	movs	r0, #150	; 0x96
1000cd1a:	f7f7 fd8d 	bl	10004838 <sleep_ms>
1000cd1e:	e7e0      	b.n	1000cce2 <main+0xfe>
1000cd20:	20003050 	.word	0x20003050
1000cd24:	20007860 	.word	0x20007860
1000cd28:	10010d04 	.word	0x10010d04
1000cd2c:	2000327c 	.word	0x2000327c
1000cd30:	200034a0 	.word	0x200034a0
1000cd34:	2001276c 	.word	0x2001276c
1000cd38:	2000710c 	.word	0x2000710c
1000cd3c:	200061f8 	.word	0x200061f8
1000cd40:	20012767 	.word	0x20012767
1000cd44:	20006c2c 	.word	0x20006c2c
1000cd48:	10010948 	.word	0x10010948

1000cd4c <_Z10VgaDmaInitv>:
 * \param read_addr Initial read address of transfer.
 * \param trigger True to start the transfer immediately
 */
static inline void dma_channel_set_read_addr(uint channel, const volatile void *read_addr, bool trigger) {
    if (!trigger) {
        dma_channel_hw_addr(channel)->read_addr = (uintptr_t) read_addr;
1000cd4c:	23a0      	movs	r3, #160	; 0xa0
// 0x10 (alias 1):  CTRL        READ_ADDR     WRITE_ADDR    TRANS_COUNT_TRIG
// 0x20 (alias 2):  CTRL        TRANS_COUNT   READ_ADDR     WRITE_ADDR_TRIG
// 0x30 (alias 3):  CTRL        WRITE_ADDR    TRANS_COUNT   READ_ADDR_TRIG ... !

void VgaDmaInit()
{
1000cd4e:	b570      	push	{r4, r5, r6, lr}
 * \param trans_count The number of transfers (not NOT bytes, see channel_config_set_transfer_data_size)
 * \param trigger True to start the transfer immediately
 */
static inline void dma_channel_set_trans_count(uint channel, uint32_t trans_count, bool trigger) {
    if (!trigger) {
        dma_channel_hw_addr(channel)->transfer_count = trans_count;
1000cd50:	2402      	movs	r4, #2
        dma_channel_hw_addr(channel)->write_addr = (uintptr_t) write_addr;
1000cd52:	4a2a      	ldr	r2, [pc, #168]	; (1000cdfc <_Z10VgaDmaInitv+0xb0>)
        dma_channel_hw_addr(channel)->read_addr = (uintptr_t) read_addr;
1000cd54:	492a      	ldr	r1, [pc, #168]	; (1000ce00 <_Z10VgaDmaInitv+0xb4>)
1000cd56:	05db      	lsls	r3, r3, #23
1000cd58:	6019      	str	r1, [r3, #0]
        dma_channel_hw_addr(channel)->write_addr = (uintptr_t) write_addr;
1000cd5a:	605a      	str	r2, [r3, #4]
        dma_channel_hw_addr(channel)->al1_ctrl = channel_config_get_ctrl_value(config);
1000cd5c:	4a29      	ldr	r2, [pc, #164]	; (1000ce04 <_Z10VgaDmaInitv+0xb8>)
        dma_channel_hw_addr(channel)->transfer_count = trans_count;
1000cd5e:	609c      	str	r4, [r3, #8]
        dma_channel_hw_addr(channel)->al1_ctrl = channel_config_get_ctrl_value(config);
1000cd60:	611a      	str	r2, [r3, #16]
        dma_channel_hw_addr(channel)->read_addr = (uintptr_t) read_addr;
1000cd62:	2200      	movs	r2, #0
1000cd64:	4b28      	ldr	r3, [pc, #160]	; (1000ce08 <_Z10VgaDmaInitv+0xbc>)
        dma_channel_hw_addr(channel)->write_addr = (uintptr_t) write_addr;
1000cd66:	4829      	ldr	r0, [pc, #164]	; (1000ce0c <_Z10VgaDmaInitv+0xc0>)
        dma_channel_hw_addr(channel)->read_addr = (uintptr_t) read_addr;
1000cd68:	601a      	str	r2, [r3, #0]
        dma_channel_hw_addr(channel)->write_addr = (uintptr_t) write_addr;
1000cd6a:	6058      	str	r0, [r3, #4]
        dma_channel_hw_addr(channel)->al1_ctrl = channel_config_get_ctrl_value(config);
1000cd6c:	4828      	ldr	r0, [pc, #160]	; (1000ce10 <_Z10VgaDmaInitv+0xc4>)
        dma_channel_hw_addr(channel)->transfer_count = trans_count;
1000cd6e:	609a      	str	r2, [r3, #8]
        dma_channel_hw_addr(channel)->al1_ctrl = channel_config_get_ctrl_value(config);
1000cd70:	6118      	str	r0, [r3, #16]
	dma_channel_config cfg;
	int layer;
	for (layer = 0; layer < LAYERS; layer++)
	{
		// layer is not active
		if ((layer > 0) && (LayerModeInx[layer] == LAYERMODE_BASE)) continue;
1000cd72:	4b28      	ldr	r3, [pc, #160]	; (1000ce14 <_Z10VgaDmaInitv+0xc8>)
1000cd74:	7858      	ldrb	r0, [r3, #1]
1000cd76:	2800      	cmp	r0, #0
1000cd78:	d00d      	beq.n	1000cd96 <_Z10VgaDmaInitv+0x4a>
        dma_channel_hw_addr(channel)->read_addr = (uintptr_t) read_addr;
1000cd7a:	4827      	ldr	r0, [pc, #156]	; (1000ce18 <_Z10VgaDmaInitv+0xcc>)
        dma_channel_hw_addr(channel)->write_addr = (uintptr_t) write_addr;
1000cd7c:	4d27      	ldr	r5, [pc, #156]	; (1000ce1c <_Z10VgaDmaInitv+0xd0>)
        dma_channel_hw_addr(channel)->read_addr = (uintptr_t) read_addr;
1000cd7e:	6001      	str	r1, [r0, #0]
        dma_channel_hw_addr(channel)->write_addr = (uintptr_t) write_addr;
1000cd80:	6045      	str	r5, [r0, #4]
        dma_channel_hw_addr(channel)->transfer_count = trans_count;
1000cd82:	6084      	str	r4, [r0, #8]
        dma_channel_hw_addr(channel)->al1_ctrl = channel_config_get_ctrl_value(config);
1000cd84:	4c26      	ldr	r4, [pc, #152]	; (1000ce20 <_Z10VgaDmaInitv+0xd4>)
1000cd86:	6104      	str	r4, [r0, #16]
        dma_channel_hw_addr(channel)->read_addr = (uintptr_t) read_addr;
1000cd88:	4826      	ldr	r0, [pc, #152]	; (1000ce24 <_Z10VgaDmaInitv+0xd8>)
        dma_channel_hw_addr(channel)->write_addr = (uintptr_t) write_addr;
1000cd8a:	4c27      	ldr	r4, [pc, #156]	; (1000ce28 <_Z10VgaDmaInitv+0xdc>)
        dma_channel_hw_addr(channel)->read_addr = (uintptr_t) read_addr;
1000cd8c:	6002      	str	r2, [r0, #0]
        dma_channel_hw_addr(channel)->write_addr = (uintptr_t) write_addr;
1000cd8e:	6044      	str	r4, [r0, #4]
        dma_channel_hw_addr(channel)->transfer_count = trans_count;
1000cd90:	6082      	str	r2, [r0, #8]
        dma_channel_hw_addr(channel)->al1_ctrl = channel_config_get_ctrl_value(config);
1000cd92:	4a26      	ldr	r2, [pc, #152]	; (1000ce2c <_Z10VgaDmaInitv+0xe0>)
1000cd94:	6102      	str	r2, [r0, #16]
1000cd96:	789a      	ldrb	r2, [r3, #2]
1000cd98:	2a00      	cmp	r2, #0
1000cd9a:	d00f      	beq.n	1000cdbc <_Z10VgaDmaInitv+0x70>
        dma_channel_hw_addr(channel)->read_addr = (uintptr_t) read_addr;
1000cd9c:	4a24      	ldr	r2, [pc, #144]	; (1000ce30 <_Z10VgaDmaInitv+0xe4>)
        dma_channel_hw_addr(channel)->write_addr = (uintptr_t) write_addr;
1000cd9e:	4825      	ldr	r0, [pc, #148]	; (1000ce34 <_Z10VgaDmaInitv+0xe8>)
        dma_channel_hw_addr(channel)->read_addr = (uintptr_t) read_addr;
1000cda0:	6011      	str	r1, [r2, #0]
        dma_channel_hw_addr(channel)->write_addr = (uintptr_t) write_addr;
1000cda2:	6050      	str	r0, [r2, #4]
        dma_channel_hw_addr(channel)->transfer_count = trans_count;
1000cda4:	2002      	movs	r0, #2
1000cda6:	6090      	str	r0, [r2, #8]
        dma_channel_hw_addr(channel)->al1_ctrl = channel_config_get_ctrl_value(config);
1000cda8:	4823      	ldr	r0, [pc, #140]	; (1000ce38 <_Z10VgaDmaInitv+0xec>)
        dma_channel_hw_addr(channel)->write_addr = (uintptr_t) write_addr;
1000cdaa:	4c24      	ldr	r4, [pc, #144]	; (1000ce3c <_Z10VgaDmaInitv+0xf0>)
        dma_channel_hw_addr(channel)->al1_ctrl = channel_config_get_ctrl_value(config);
1000cdac:	6110      	str	r0, [r2, #16]
        dma_channel_hw_addr(channel)->read_addr = (uintptr_t) read_addr;
1000cdae:	2000      	movs	r0, #0
1000cdb0:	4a23      	ldr	r2, [pc, #140]	; (1000ce40 <_Z10VgaDmaInitv+0xf4>)
1000cdb2:	6010      	str	r0, [r2, #0]
        dma_channel_hw_addr(channel)->write_addr = (uintptr_t) write_addr;
1000cdb4:	6054      	str	r4, [r2, #4]
        dma_channel_hw_addr(channel)->transfer_count = trans_count;
1000cdb6:	6090      	str	r0, [r2, #8]
        dma_channel_hw_addr(channel)->al1_ctrl = channel_config_get_ctrl_value(config);
1000cdb8:	4822      	ldr	r0, [pc, #136]	; (1000ce44 <_Z10VgaDmaInitv+0xf8>)
1000cdba:	6110      	str	r0, [r2, #16]
1000cdbc:	78db      	ldrb	r3, [r3, #3]
1000cdbe:	2b00      	cmp	r3, #0
1000cdc0:	d00f      	beq.n	1000cde2 <_Z10VgaDmaInitv+0x96>
        dma_channel_hw_addr(channel)->read_addr = (uintptr_t) read_addr;
1000cdc2:	4b21      	ldr	r3, [pc, #132]	; (1000ce48 <_Z10VgaDmaInitv+0xfc>)
        dma_channel_hw_addr(channel)->write_addr = (uintptr_t) write_addr;
1000cdc4:	4a21      	ldr	r2, [pc, #132]	; (1000ce4c <_Z10VgaDmaInitv+0x100>)
        dma_channel_hw_addr(channel)->read_addr = (uintptr_t) read_addr;
1000cdc6:	6019      	str	r1, [r3, #0]
        dma_channel_hw_addr(channel)->write_addr = (uintptr_t) write_addr;
1000cdc8:	605a      	str	r2, [r3, #4]
        dma_channel_hw_addr(channel)->transfer_count = trans_count;
1000cdca:	2202      	movs	r2, #2
1000cdcc:	609a      	str	r2, [r3, #8]
        dma_channel_hw_addr(channel)->al1_ctrl = channel_config_get_ctrl_value(config);
1000cdce:	4a20      	ldr	r2, [pc, #128]	; (1000ce50 <_Z10VgaDmaInitv+0x104>)
        dma_channel_hw_addr(channel)->write_addr = (uintptr_t) write_addr;
1000cdd0:	4920      	ldr	r1, [pc, #128]	; (1000ce54 <_Z10VgaDmaInitv+0x108>)
        dma_channel_hw_addr(channel)->al1_ctrl = channel_config_get_ctrl_value(config);
1000cdd2:	611a      	str	r2, [r3, #16]
        dma_channel_hw_addr(channel)->read_addr = (uintptr_t) read_addr;
1000cdd4:	2200      	movs	r2, #0
1000cdd6:	4b20      	ldr	r3, [pc, #128]	; (1000ce58 <_Z10VgaDmaInitv+0x10c>)
1000cdd8:	601a      	str	r2, [r3, #0]
        dma_channel_hw_addr(channel)->write_addr = (uintptr_t) write_addr;
1000cdda:	6059      	str	r1, [r3, #4]
        dma_channel_hw_addr(channel)->transfer_count = trans_count;
1000cddc:	609a      	str	r2, [r3, #8]
        dma_channel_hw_addr(channel)->al1_ctrl = channel_config_get_ctrl_value(config);
1000cdde:	4a1f      	ldr	r2, [pc, #124]	; (1000ce5c <_Z10VgaDmaInitv+0x110>)
1000cde0:	611a      	str	r2, [r3, #16]
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
1000cde2:	2202      	movs	r2, #2
1000cde4:	4b1e      	ldr	r3, [pc, #120]	; (1000ce60 <_Z10VgaDmaInitv+0x114>)

	// enable DMA channel IRQ0
	dma_channel_set_irq0_enabled(VGA_DMA_PIO0, true);

	// set DMA IRQ handler
	irq_set_exclusive_handler(DMA_IRQ_0, VgaLine);
1000cde6:	200b      	movs	r0, #11
1000cde8:	601a      	str	r2, [r3, #0]
1000cdea:	491e      	ldr	r1, [pc, #120]	; (1000ce64 <_Z10VgaDmaInitv+0x118>)
1000cdec:	f7f4 fd70 	bl	100018d0 <irq_set_exclusive_handler>

	// set highest IRQ priority
	irq_set_priority(DMA_IRQ_0, 0);
1000cdf0:	2100      	movs	r1, #0
1000cdf2:	200b      	movs	r0, #11
1000cdf4:	f7f4 fe76 	bl	10001ae4 <irq_set_priority>
}
1000cdf8:	bd70      	pop	{r4, r5, r6, pc}
1000cdfa:	46c0      	nop			; (mov r8, r8)
1000cdfc:	50000078 	.word	0x50000078
1000ce00:	200034d8 	.word	0x200034d8
1000ce04:	001f84f9 	.word	0x001f84f9
1000ce08:	50000040 	.word	0x50000040
1000ce0c:	50200010 	.word	0x50200010
1000ce10:	0060001b 	.word	0x0060001b
1000ce14:	20004a5c 	.word	0x20004a5c
1000ce18:	50000080 	.word	0x50000080
1000ce1c:	500000f8 	.word	0x500000f8
1000ce20:	001f94f9 	.word	0x001f94f9
1000ce24:	500000c0 	.word	0x500000c0
1000ce28:	50200014 	.word	0x50200014
1000ce2c:	0060901b 	.word	0x0060901b
1000ce30:	50000100 	.word	0x50000100
1000ce34:	50000178 	.word	0x50000178
1000ce38:	001fa4f9 	.word	0x001fa4f9
1000ce3c:	50200018 	.word	0x50200018
1000ce40:	50000140 	.word	0x50000140
1000ce44:	0061201b 	.word	0x0061201b
1000ce48:	50000180 	.word	0x50000180
1000ce4c:	500001f8 	.word	0x500001f8
1000ce50:	001fb4f9 	.word	0x001fb4f9
1000ce54:	5020001c 	.word	0x5020001c
1000ce58:	500001c0 	.word	0x500001c0
1000ce5c:	0061b01b 	.word	0x0061b01b
1000ce60:	50002404 	.word	0x50002404
1000ce64:	20002531 	.word	0x20002531

1000ce68 <_Z10VgaPioInitv>:

// initialize VGA PIO
void VgaPioInit()
{
1000ce68:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ce6a:	46ce      	mov	lr, r9
1000ce6c:	4647      	mov	r7, r8
1000ce6e:	b580      	push	{r7, lr}
1000ce70:	b099      	sub	sp, #100	; 0x64
	int i;

	// clear PIO instruction memory 
	pio_clear_instruction_memory(VGA_PIO);
1000ce72:	485c      	ldr	r0, [pc, #368]	; (1000cfe4 <_Z10VgaPioInitv+0x17c>)

	// configure main program instructions
	uint16_t ins[32]; // temporary buffer of program instructions
	memcpy(ins, &vga_program_instructions, vga_program.length*sizeof(uint16_t)); // copy program into buffer
1000ce74:	ac08      	add	r4, sp, #32
	pio_clear_instruction_memory(VGA_PIO);
1000ce76:	f7f5 f999 	bl	100021ac <pio_clear_instruction_memory>
	memcpy(ins, &vga_program_instructions, vga_program.length*sizeof(uint16_t)); // copy program into buffer
1000ce7a:	0022      	movs	r2, r4
1000ce7c:	4b5a      	ldr	r3, [pc, #360]	; (1000cfe8 <_Z10VgaPioInitv+0x180>)
1000ce7e:	cb23      	ldmia	r3!, {r0, r1, r5}
1000ce80:	c223      	stmia	r2!, {r0, r1, r5}
1000ce82:	cb23      	ldmia	r3!, {r0, r1, r5}
1000ce84:	c223      	stmia	r2!, {r0, r1, r5}
1000ce86:	6819      	ldr	r1, [r3, #0]
	u16 cpp = (u16)CurVmode.cpp; // number of clocks per pixel
1000ce88:	4d58      	ldr	r5, [pc, #352]	; (1000cfec <_Z10VgaPioInitv+0x184>)
	memcpy(ins, &vga_program_instructions, vga_program.length*sizeof(uint16_t)); // copy program into buffer
1000ce8a:	6011      	str	r1, [r2, #0]
1000ce8c:	889b      	ldrh	r3, [r3, #4]
	// load main program into PIO's instruction memory
	struct pio_program prg;
	prg.instructions = ins;
	prg.length = vga_program.length;
	prg.origin = BASE_OFFSET;
	pio_add_program(VGA_PIO, &prg);
1000ce8e:	4855      	ldr	r0, [pc, #340]	; (1000cfe4 <_Z10VgaPioInitv+0x17c>)
	memcpy(ins, &vga_program_instructions, vga_program.length*sizeof(uint16_t)); // copy program into buffer
1000ce90:	8093      	strh	r3, [r2, #4]
	ins[vga_offset_extra1] |= (cpp-2) << 8; // update waits
1000ce92:	8aee      	ldrh	r6, [r5, #22]
1000ce94:	4b56      	ldr	r3, [pc, #344]	; (1000cff0 <_Z10VgaPioInitv+0x188>)
1000ce96:	1eb2      	subs	r2, r6, #2
1000ce98:	0212      	lsls	r2, r2, #8
1000ce9a:	4313      	orrs	r3, r2
1000ce9c:	b29b      	uxth	r3, r3
	prg.length = vga_program.length;
1000ce9e:	466a      	mov	r2, sp
	ins[vga_offset_extra1] |= (cpp-2) << 8; // update waits
1000cea0:	8323      	strh	r3, [r4, #24]
	ins[vga_offset_extra2] |= (cpp-2) << 8; // update waits
1000cea2:	83a3      	strh	r3, [r4, #28]
	prg.length = vga_program.length;
1000cea4:	230f      	movs	r3, #15
	pio_add_program(VGA_PIO, &prg);
1000cea6:	a902      	add	r1, sp, #8
	prg.length = vga_program.length;
1000cea8:	7313      	strb	r3, [r2, #12]
	prg.origin = BASE_OFFSET;
1000ceaa:	3302      	adds	r3, #2
1000ceac:	7353      	strb	r3, [r2, #13]
	prg.instructions = ins;
1000ceae:	9402      	str	r4, [sp, #8]
	pio_add_program(VGA_PIO, &prg);
1000ceb0:	f7f5 f918 	bl	100020e4 <pio_add_program>

	// load layer program
	if (LayerProgInx != LAYERPROG_BASE)
1000ceb4:	4b4f      	ldr	r3, [pc, #316]	; (1000cff4 <_Z10VgaPioInitv+0x18c>)
1000ceb6:	781b      	ldrb	r3, [r3, #0]
1000ceb8:	2b00      	cmp	r3, #0
1000ceba:	d161      	bne.n	1000cf80 <_Z10VgaPioInitv+0x118>
	{
		// configure layer program instructions
		memcpy(ins, CurLayerProg.ins, CurLayerProg.length*sizeof(uint16_t)); // copy program into buffer
		for (i = 0; i < CurLayerProg.extranum; i++)
1000cebc:	2400      	movs	r4, #0
    gpio_set_function(pin, pio == pio0 ? GPIO_FUNC_PIO0 : GPIO_FUNC_PIO1);
1000cebe:	0020      	movs	r0, r4
1000cec0:	2106      	movs	r1, #6
		prg.origin = LAYER_OFFSET;
		pio_add_program(VGA_PIO, &prg);
	}

	// connect PIO to the pad
	for (i = VGA_GPIO_FIRST; i <= VGA_GPIO_LAST; i++) pio_gpio_init(VGA_PIO, i);
1000cec2:	3401      	adds	r4, #1
1000cec4:	f7f4 fc82 	bl	100017cc <gpio_set_function>
1000cec8:	2c09      	cmp	r4, #9
1000ceca:	d1f8      	bne.n	1000cebe <_Z10VgaPioInitv+0x56>

	// negative HSYNC output
	if (!CurVmode.psync) gpio_set_outover(VGA_GPIO_SYNC, GPIO_OVERRIDE_INVERT);
1000cecc:	2357      	movs	r3, #87	; 0x57
1000cece:	5ceb      	ldrb	r3, [r5, r3]
1000ced0:	2b00      	cmp	r3, #0
1000ced2:	d100      	bne.n	1000ced6 <_Z10VgaPioInitv+0x6e>
1000ced4:	e081      	b.n	1000cfda <_Z10VgaPioInitv+0x172>

		// get default config
		pio_sm_config cfg = pio_get_default_sm_config();

		// map state machine's OUT and MOV pins	
		sm_config_set_out_pins(&cfg, LayerFirstPin[layer], LayerNumPin[layer]);
1000ced6:	4b48      	ldr	r3, [pc, #288]	; (1000cff8 <_Z10VgaPioInitv+0x190>)
		for (i = 0; i < CurLayerProg.extranum; i++)
1000ced8:	2400      	movs	r4, #0
		sm_config_set_out_pins(&cfg, LayerFirstPin[layer], LayerNumPin[layer]);
1000ceda:	4698      	mov	r8, r3
		if ((layer > 0) && (LayerModeInx[layer] == LAYERMODE_BASE)) continue;
1000cedc:	2c00      	cmp	r4, #0
1000cede:	d003      	beq.n	1000cee8 <_Z10VgaPioInitv+0x80>
1000cee0:	4b46      	ldr	r3, [pc, #280]	; (1000cffc <_Z10VgaPioInitv+0x194>)
1000cee2:	5d1b      	ldrb	r3, [r3, r4]
1000cee4:	2b00      	cmp	r3, #0
1000cee6:	d036      	beq.n	1000cf56 <_Z10VgaPioInitv+0xee>
		pio_sm_set_consecutive_pindirs(VGA_PIO, VGA_SM(layer), VGA_GPIO_FIRST, VGA_GPIO_NUM, true);
1000cee8:	2301      	movs	r3, #1
1000ceea:	2200      	movs	r2, #0
1000ceec:	0021      	movs	r1, r4
1000ceee:	483d      	ldr	r0, [pc, #244]	; (1000cfe4 <_Z10VgaPioInitv+0x17c>)
1000cef0:	9300      	str	r3, [sp, #0]
1000cef2:	3308      	adds	r3, #8
1000cef4:	f7f5 f976 	bl	100021e4 <pio_sm_set_consecutive_pindirs>
		sm_config_set_out_pins(&cfg, LayerFirstPin[layer], LayerNumPin[layer]);
1000cef8:	4643      	mov	r3, r8
1000cefa:	5d1e      	ldrb	r6, [r3, r4]
1000cefc:	4b40      	ldr	r3, [pc, #256]	; (1000d000 <_Z10VgaPioInitv+0x198>)
                 (out_count << PIO_SM0_PINCTRL_OUT_COUNT_LSB);
1000cefe:	0536      	lsls	r6, r6, #20
1000cf00:	5d1b      	ldrb	r3, [r3, r4]
                 (out_base << PIO_SM0_PINCTRL_OUT_BASE_LSB) |
1000cf02:	431e      	orrs	r6, r3
    c->pinctrl = (c->pinctrl & ~(PIO_SM0_PINCTRL_OUT_BASE_BITS | PIO_SM0_PINCTRL_OUT_COUNT_BITS)) |
1000cf04:	9607      	str	r6, [sp, #28]

		// join FIFO to send only
		sm_config_set_fifo_join(&cfg, PIO_FIFO_JOIN_TX);

		// PIO clock divider
		sm_config_set_clkdiv(&cfg, CurVmode.div);
1000cf06:	8aaf      	ldrh	r7, [r5, #20]
1000cf08:	0038      	movs	r0, r7
1000cf0a:	f7f4 f861 	bl	10000fd0 <__wrap___aeabi_ui2f>
1000cf0e:	4681      	mov	r9, r0
    uint8_t div_frac = (uint8_t) ((div - div_int) * (1u << 8u));
1000cf10:	0038      	movs	r0, r7
1000cf12:	f7f4 f863 	bl	10000fdc <__wrap___aeabi_i2f>
1000cf16:	1c01      	adds	r1, r0, #0
1000cf18:	4648      	mov	r0, r9
1000cf1a:	f7f4 f84a 	bl	10000fb2 <__wrap___aeabi_fsub>
1000cf1e:	2187      	movs	r1, #135	; 0x87
1000cf20:	05c9      	lsls	r1, r1, #23
1000cf22:	f7f4 f84f 	bl	10000fc4 <__wrap___aeabi_fmul>
1000cf26:	f7f4 f8ad 	bl	10001084 <__wrap___aeabi_f2uiz>
            (div_frac << PIO_SM0_CLKDIV_FRAC_LSB) |
1000cf2a:	b2c0      	uxtb	r0, r0
            (div_int << PIO_SM0_CLKDIV_INT_LSB);
1000cf2c:	043b      	lsls	r3, r7, #16
            (div_frac << PIO_SM0_CLKDIV_FRAC_LSB) |
1000cf2e:	0200      	lsls	r0, r0, #8
1000cf30:	4318      	orrs	r0, r3
    c->shiftctrl = (c->shiftctrl &
1000cf32:	4b34      	ldr	r3, [pc, #208]	; (1000d004 <_Z10VgaPioInitv+0x19c>)
    c->clkdiv =
1000cf34:	9004      	str	r0, [sp, #16]
    c->shiftctrl = (c->shiftctrl &
1000cf36:	9306      	str	r3, [sp, #24]

		// shift left, autopull, pull threshold
		sm_config_set_out_shift(&cfg, false, true, 32);
	
		// base layer 0
		if (layer == 0)
1000cf38:	2c00      	cmp	r4, #0
1000cf3a:	d014      	beq.n	1000cf66 <_Z10VgaPioInitv+0xfe>
			pio_sm_init(VGA_PIO, VGA_SM0, vga_offset_entry+BASE_OFFSET, &cfg);
		}
		else
		{
			// set wrap
			sm_config_set_wrap(&cfg, CurLayerProg.wrap_target+LAYER_OFFSET, CurLayerProg.wrap+LAYER_OFFSET);
1000cf3c:	4a32      	ldr	r2, [pc, #200]	; (1000d008 <_Z10VgaPioInitv+0x1a0>)

			// initialize state machine
			pio_sm_init(VGA_PIO, VGA_SM(layer), CurLayerProg.idle+LAYER_OFFSET, &cfg);
1000cf3e:	4829      	ldr	r0, [pc, #164]	; (1000cfe4 <_Z10VgaPioInitv+0x17c>)
			sm_config_set_wrap(&cfg, CurLayerProg.wrap_target+LAYER_OFFSET, CurLayerProg.wrap+LAYER_OFFSET);
1000cf40:	7a53      	ldrb	r3, [r2, #9]
1000cf42:	7a91      	ldrb	r1, [r2, #10]
                  (wrap_target << PIO_SM0_EXECCTRL_WRAP_BOTTOM_LSB) |
1000cf44:	01db      	lsls	r3, r3, #7
                  (wrap << PIO_SM0_EXECCTRL_WRAP_TOP_LSB);
1000cf46:	0309      	lsls	r1, r1, #12
                  (wrap_target << PIO_SM0_EXECCTRL_WRAP_BOTTOM_LSB) |
1000cf48:	430b      	orrs	r3, r1
    c->execctrl = (c->execctrl & ~(PIO_SM0_EXECCTRL_WRAP_TOP_BITS | PIO_SM0_EXECCTRL_WRAP_BOTTOM_BITS)) |
1000cf4a:	9305      	str	r3, [sp, #20]
			pio_sm_init(VGA_PIO, VGA_SM(layer), CurLayerProg.idle+LAYER_OFFSET, &cfg);
1000cf4c:	0021      	movs	r1, r4
1000cf4e:	7ad2      	ldrb	r2, [r2, #11]
1000cf50:	ab04      	add	r3, sp, #16
1000cf52:	f7f5 f989 	bl	10002268 <pio_sm_init>
	for (layer = 0; layer < LAYERS; layer++)
1000cf56:	3401      	adds	r4, #1
1000cf58:	2c04      	cmp	r4, #4
1000cf5a:	d1bf      	bne.n	1000cedc <_Z10VgaPioInitv+0x74>
		}
	}
}
1000cf5c:	b019      	add	sp, #100	; 0x64
1000cf5e:	bcc0      	pop	{r6, r7}
1000cf60:	46b9      	mov	r9, r7
1000cf62:	46b0      	mov	r8, r6
1000cf64:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000cf66:	4b29      	ldr	r3, [pc, #164]	; (1000d00c <_Z10VgaPioInitv+0x1a4>)
			pio_sm_init(VGA_PIO, VGA_SM0, vga_offset_entry+BASE_OFFSET, &cfg);
1000cf68:	2213      	movs	r2, #19
1000cf6a:	9305      	str	r3, [sp, #20]
    c->pinctrl = (c->pinctrl & ~PIO_SM0_PINCTRL_SIDESET_BASE_BITS) |
1000cf6c:	4b28      	ldr	r3, [pc, #160]	; (1000d010 <_Z10VgaPioInitv+0x1a8>)
1000cf6e:	2100      	movs	r1, #0
1000cf70:	431e      	orrs	r6, r3
1000cf72:	481c      	ldr	r0, [pc, #112]	; (1000cfe4 <_Z10VgaPioInitv+0x17c>)
1000cf74:	ab04      	add	r3, sp, #16
1000cf76:	9607      	str	r6, [sp, #28]
	for (layer = 0; layer < LAYERS; layer++)
1000cf78:	3401      	adds	r4, #1
			pio_sm_init(VGA_PIO, VGA_SM0, vga_offset_entry+BASE_OFFSET, &cfg);
1000cf7a:	f7f5 f975 	bl	10002268 <pio_sm_init>
	for (layer = 0; layer < LAYERS; layer++)
1000cf7e:	e7af      	b.n	1000cee0 <_Z10VgaPioInitv+0x78>
		memcpy(ins, CurLayerProg.ins, CurLayerProg.length*sizeof(uint16_t)); // copy program into buffer
1000cf80:	4b21      	ldr	r3, [pc, #132]	; (1000d008 <_Z10VgaPioInitv+0x1a0>)
1000cf82:	0020      	movs	r0, r4
1000cf84:	4698      	mov	r8, r3
1000cf86:	7a1b      	ldrb	r3, [r3, #8]
1000cf88:	005a      	lsls	r2, r3, #1
1000cf8a:	4699      	mov	r9, r3
1000cf8c:	4643      	mov	r3, r8
1000cf8e:	6819      	ldr	r1, [r3, #0]
1000cf90:	f7f4 f8ae 	bl	100010f0 <__wrap___aeabi_memcpy>
		for (i = 0; i < CurLayerProg.extranum; i++)
1000cf94:	4643      	mov	r3, r8
1000cf96:	7b9b      	ldrb	r3, [r3, #14]
1000cf98:	469c      	mov	ip, r3
1000cf9a:	2b00      	cmp	r3, #0
1000cf9c:	d011      	beq.n	1000cfc2 <_Z10VgaPioInitv+0x15a>
1000cf9e:	4641      	mov	r1, r8
1000cfa0:	2000      	movs	r0, #0
1000cfa2:	310f      	adds	r1, #15
			int extra = (int)cpp - CurLayerProg.extra[i*2+1];
1000cfa4:	784b      	ldrb	r3, [r1, #1]
			ins[CurLayerProg.extra[i*2]] |= extra << 8; // update waits
1000cfa6:	780a      	ldrb	r2, [r1, #0]
			int extra = (int)cpp - CurLayerProg.extra[i*2+1];
1000cfa8:	1af3      	subs	r3, r6, r3
			ins[CurLayerProg.extra[i*2]] |= extra << 8; // update waits
1000cfaa:	43df      	mvns	r7, r3
1000cfac:	0052      	lsls	r2, r2, #1
1000cfae:	17ff      	asrs	r7, r7, #31
1000cfb0:	403b      	ands	r3, r7
1000cfb2:	5aa7      	ldrh	r7, [r4, r2]
1000cfb4:	021b      	lsls	r3, r3, #8
1000cfb6:	433b      	orrs	r3, r7
		for (i = 0; i < CurLayerProg.extranum; i++)
1000cfb8:	3001      	adds	r0, #1
			ins[CurLayerProg.extra[i*2]] |= extra << 8; // update waits
1000cfba:	52a3      	strh	r3, [r4, r2]
		for (i = 0; i < CurLayerProg.extranum; i++)
1000cfbc:	3102      	adds	r1, #2
1000cfbe:	4560      	cmp	r0, ip
1000cfc0:	dbf0      	blt.n	1000cfa4 <_Z10VgaPioInitv+0x13c>
		prg.length = CurLayerProg.length;
1000cfc2:	466b      	mov	r3, sp
1000cfc4:	464a      	mov	r2, r9
1000cfc6:	731a      	strb	r2, [r3, #12]
		prg.origin = LAYER_OFFSET;
1000cfc8:	2300      	movs	r3, #0
1000cfca:	466a      	mov	r2, sp
		pio_add_program(VGA_PIO, &prg);
1000cfcc:	a902      	add	r1, sp, #8
1000cfce:	4805      	ldr	r0, [pc, #20]	; (1000cfe4 <_Z10VgaPioInitv+0x17c>)
		prg.instructions = ins;
1000cfd0:	9402      	str	r4, [sp, #8]
		prg.origin = LAYER_OFFSET;
1000cfd2:	7353      	strb	r3, [r2, #13]
		pio_add_program(VGA_PIO, &prg);
1000cfd4:	f7f5 f886 	bl	100020e4 <pio_add_program>
1000cfd8:	e770      	b.n	1000cebc <_Z10VgaPioInitv+0x54>
	if (!CurVmode.psync) gpio_set_outover(VGA_GPIO_SYNC, GPIO_OVERRIDE_INVERT);
1000cfda:	2101      	movs	r1, #1
1000cfdc:	2008      	movs	r0, #8
1000cfde:	f7f4 fc25 	bl	1000182c <gpio_set_outover>
1000cfe2:	e778      	b.n	1000ced6 <_Z10VgaPioInitv+0x6e>
1000cfe4:	50200000 	.word	0x50200000
1000cfe8:	1002ba4c 	.word	0x1002ba4c
1000cfec:	200049e8 	.word	0x200049e8
1000cff0:	00006008 	.word	0x00006008
1000cff4:	2001276a 	.word	0x2001276a
1000cff8:	20002778 	.word	0x20002778
1000cffc:	20004a5c 	.word	0x20004a5c
1000d000:	20004a58 	.word	0x20004a58
1000d004:	40060000 	.word	0x40060000
1000d008:	200049b4 	.word	0x200049b4
1000d00c:	0001fd80 	.word	0x0001fd80
1000d010:	20002000 	.word	0x20002000

1000d014 <_Z10VgaBufInitv>:

// initialize scanline buffers
void VgaBufInit()
{
1000d014:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d016:	464e      	mov	r6, r9
1000d018:	4645      	mov	r5, r8
1000d01a:	4657      	mov	r7, sl
1000d01c:	46de      	mov	lr, fp
	// init HSYNC..back porch buffer
	//  hsync must be min. 3
	//  hback must be min. 13
	LineBufHsBp[0] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,CurVmode.hsync-3)); // HSYNC
1000d01e:	2388      	movs	r3, #136	; 0x88
{
1000d020:	b5e0      	push	{r5, r6, r7, lr}
	LineBufHsBp[0] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,CurVmode.hsync-3)); // HSYNC
1000d022:	485f      	ldr	r0, [pc, #380]	; (1000d1a0 <_Z10VgaBufInitv+0x18c>)
1000d024:	4f5f      	ldr	r7, [pc, #380]	; (1000d1a4 <_Z10VgaBufInitv+0x190>)
1000d026:	8c41      	ldrh	r1, [r0, #34]	; 0x22
	LineBufHsBp[1] = BYTESWAP(VGADARK(CurVmode.hback-4-1-9,0)); // back porch - 1 - 9
1000d028:	4e5f      	ldr	r6, [pc, #380]	; (1000d1a8 <_Z10VgaBufInitv+0x194>)
	LineBufHsBp[0] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,CurVmode.hsync-3)); // HSYNC
1000d02a:	1eca      	subs	r2, r1, #3
1000d02c:	ba12      	rev	r2, r2
1000d02e:	431a      	orrs	r2, r3
1000d030:	603a      	str	r2, [r7, #0]
	LineBufHsBp[1] = BYTESWAP(VGADARK(CurVmode.hback-4-1-9,0)); // back porch - 1 - 9
1000d032:	8c84      	ldrh	r4, [r0, #36]	; 0x24
	LineBufHsBp[0] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,CurVmode.hsync-3)); // HSYNC
1000d034:	469c      	mov	ip, r3
	LineBufHsBp[1] = BYTESWAP(VGADARK(CurVmode.hback-4-1-9,0)); // back porch - 1 - 9
1000d036:	3c0e      	subs	r4, #14
1000d038:	0423      	lsls	r3, r4, #16
1000d03a:	0225      	lsls	r5, r4, #8
1000d03c:	0e2d      	lsrs	r5, r5, #24
1000d03e:	4033      	ands	r3, r6
1000d040:	432b      	orrs	r3, r5
1000d042:	25ff      	movs	r5, #255	; 0xff
1000d044:	022d      	lsls	r5, r5, #8
1000d046:	402c      	ands	r4, r5
1000d048:	4323      	orrs	r3, r4
1000d04a:	24a0      	movs	r4, #160	; 0xa0
1000d04c:	4323      	orrs	r3, r4
1000d04e:	607b      	str	r3, [r7, #4]
	LineBufHsBp[2] = BYTESWAP(VGACMD(vga_offset_irqset+BASE_OFFSET,0)); // IRQ command (takes 9 clock cycles)
1000d050:	23c0      	movs	r3, #192	; 0xc0
1000d052:	60bb      	str	r3, [r7, #8]
	LineBufHsBp[3] = BYTESWAP(VGACMD(vga_offset_output+BASE_OFFSET, CurVmode.width - 2)); // missing 2 clock cycles after last pixel
1000d054:	8803      	ldrh	r3, [r0, #0]
1000d056:	3440      	adds	r4, #64	; 0x40
1000d058:	3b02      	subs	r3, #2
1000d05a:	ba1b      	rev	r3, r3
1000d05c:	4323      	orrs	r3, r4
1000d05e:	60fb      	str	r3, [r7, #12]

	// init front porch buffer
	//  hfront must be min. 4
	LineBufFp = BYTESWAP(VGADARK(CurVmode.hfront-4,0)); // front porch
1000d060:	8c07      	ldrh	r7, [r0, #32]
{
1000d062:	b083      	sub	sp, #12
	LineBufFp = BYTESWAP(VGADARK(CurVmode.hfront-4,0)); // front porch
1000d064:	3f04      	subs	r7, #4
1000d066:	043b      	lsls	r3, r7, #16
1000d068:	023c      	lsls	r4, r7, #8
1000d06a:	0e24      	lsrs	r4, r4, #24
1000d06c:	4033      	ands	r3, r6
1000d06e:	4323      	orrs	r3, r4
1000d070:	24a0      	movs	r4, #160	; 0xa0
1000d072:	402f      	ands	r7, r5
1000d074:	433b      	orrs	r3, r7
1000d076:	4f4d      	ldr	r7, [pc, #308]	; (1000d1ac <_Z10VgaBufInitv+0x198>)
1000d078:	4323      	orrs	r3, r4
1000d07a:	603b      	str	r3, [r7, #0]

	// init dark line
	LineBufDark[0] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,CurVmode.hsync-3)); // HSYNC
1000d07c:	4b4c      	ldr	r3, [pc, #304]	; (1000d1b0 <_Z10VgaBufInitv+0x19c>)
1000d07e:	601a      	str	r2, [r3, #0]
	LineBufDark[1] = BYTESWAP(VGADARK(CurVmode.htot-CurVmode.hsync-4,0)); // dark line
1000d080:	8bc2      	ldrh	r2, [r0, #30]
	LineBufDark[0] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,CurVmode.hsync-3)); // HSYNC
1000d082:	4698      	mov	r8, r3
	LineBufDark[1] = BYTESWAP(VGADARK(CurVmode.htot-CurVmode.hsync-4,0)); // dark line
1000d084:	1a57      	subs	r7, r2, r1
1000d086:	1f3b      	subs	r3, r7, #4
1000d088:	4699      	mov	r9, r3
1000d08a:	464c      	mov	r4, r9
1000d08c:	041b      	lsls	r3, r3, #16
1000d08e:	0224      	lsls	r4, r4, #8
1000d090:	0e24      	lsrs	r4, r4, #24
1000d092:	4033      	ands	r3, r6
1000d094:	4323      	orrs	r3, r4
1000d096:	464c      	mov	r4, r9
1000d098:	402c      	ands	r4, r5
1000d09a:	4323      	orrs	r3, r4
1000d09c:	24a0      	movs	r4, #160	; 0xa0
1000d09e:	4323      	orrs	r3, r4
1000d0a0:	4644      	mov	r4, r8
1000d0a2:	6063      	str	r3, [r4, #4]

	// TV mode
	if (CurVmode.inter)
1000d0a4:	2356      	movs	r3, #86	; 0x56
1000d0a6:	5cc3      	ldrb	r3, [r0, r3]
1000d0a8:	2b00      	cmp	r3, #0
1000d0aa:	d060      	beq.n	1000d16e <_Z10VgaBufInitv+0x15a>
	{
		// vertical synchronization
		LineBufSync[0] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,CurVmode.hsync/2-3)); // HSYNC
1000d0ac:	4664      	mov	r4, ip
1000d0ae:	0848      	lsrs	r0, r1, #1
1000d0b0:	1ec3      	subs	r3, r0, #3
1000d0b2:	ba1b      	rev	r3, r3
1000d0b4:	431c      	orrs	r4, r3
1000d0b6:	4b3f      	ldr	r3, [pc, #252]	; (1000d1b4 <_Z10VgaBufInitv+0x1a0>)
1000d0b8:	46a0      	mov	r8, r4
1000d0ba:	601c      	str	r4, [r3, #0]
		LineBufSync[1] = BYTESWAP(VGADARK(CurVmode.htot/2-CurVmode.hsync/2-4,0)); // dark line
1000d0bc:	0854      	lsrs	r4, r2, #1
1000d0be:	1a27      	subs	r7, r4, r0
1000d0c0:	46a1      	mov	r9, r4
1000d0c2:	1f3c      	subs	r4, r7, #4
1000d0c4:	46a2      	mov	sl, r4
1000d0c6:	0427      	lsls	r7, r4, #16
1000d0c8:	0224      	lsls	r4, r4, #8
1000d0ca:	4037      	ands	r7, r6
1000d0cc:	0e24      	lsrs	r4, r4, #24
1000d0ce:	4327      	orrs	r7, r4
1000d0d0:	4654      	mov	r4, sl
1000d0d2:	402c      	ands	r4, r5
1000d0d4:	4327      	orrs	r7, r4
1000d0d6:	24a0      	movs	r4, #160	; 0xa0
1000d0d8:	433c      	orrs	r4, r7
1000d0da:	9401      	str	r4, [sp, #4]
1000d0dc:	605c      	str	r4, [r3, #4]
		LineBufSync[2] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,CurVmode.hsync/2-3)); // HSYNC
1000d0de:	4644      	mov	r4, r8
		LineBufSync[3] = BYTESWAP(VGADARK((CurVmode.htot+1)/2-CurVmode.hsync/2-4,0)); // dark line
1000d0e0:	3201      	adds	r2, #1
1000d0e2:	1052      	asrs	r2, r2, #1
1000d0e4:	1a10      	subs	r0, r2, r0
1000d0e6:	3804      	subs	r0, #4
		LineBufSync[2] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,CurVmode.hsync/2-3)); // HSYNC
1000d0e8:	609c      	str	r4, [r3, #8]
		LineBufSync[3] = BYTESWAP(VGADARK((CurVmode.htot+1)/2-CurVmode.hsync/2-4,0)); // dark line
1000d0ea:	0404      	lsls	r4, r0, #16
1000d0ec:	4034      	ands	r4, r6
1000d0ee:	46a2      	mov	sl, r4
1000d0f0:	0204      	lsls	r4, r0, #8
1000d0f2:	0e24      	lsrs	r4, r4, #24
1000d0f4:	46a3      	mov	fp, r4
1000d0f6:	4654      	mov	r4, sl
1000d0f8:	465f      	mov	r7, fp
1000d0fa:	4028      	ands	r0, r5
1000d0fc:	433c      	orrs	r4, r7
1000d0fe:	4320      	orrs	r0, r4
1000d100:	24a0      	movs	r4, #160	; 0xa0
1000d102:	4320      	orrs	r0, r4
1000d104:	60d8      	str	r0, [r3, #12]

		LineBufSync[4] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,CurVmode.htot/2-CurVmode.hsync-3)); // invert dark line
1000d106:	4648      	mov	r0, r9
1000d108:	4664      	mov	r4, ip
1000d10a:	1a40      	subs	r0, r0, r1
1000d10c:	3803      	subs	r0, #3
1000d10e:	ba00      	rev	r0, r0
1000d110:	4320      	orrs	r0, r4
1000d112:	6118      	str	r0, [r3, #16]
		LineBufSync[5] = BYTESWAP(VGADARK(CurVmode.hsync-4,0)); // invert HSYNC
1000d114:	1f08      	subs	r0, r1, #4
1000d116:	4681      	mov	r9, r0
1000d118:	0400      	lsls	r0, r0, #16
1000d11a:	4006      	ands	r6, r0
1000d11c:	4648      	mov	r0, r9
		LineBufSync[6] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,(CurVmode.htot+1)/2-CurVmode.hsync-3)); // invert dark line
1000d11e:	1a52      	subs	r2, r2, r1
1000d120:	4661      	mov	r1, ip
		LineBufSync[5] = BYTESWAP(VGADARK(CurVmode.hsync-4,0)); // invert HSYNC
1000d122:	0200      	lsls	r0, r0, #8
1000d124:	0e00      	lsrs	r0, r0, #24
1000d126:	4306      	orrs	r6, r0
1000d128:	4648      	mov	r0, r9
		LineBufSync[6] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,(CurVmode.htot+1)/2-CurVmode.hsync-3)); // invert dark line
1000d12a:	3a03      	subs	r2, #3
1000d12c:	ba12      	rev	r2, r2
1000d12e:	430a      	orrs	r2, r1
1000d130:	619a      	str	r2, [r3, #24]
		LineBufSync[7] = BYTESWAP(VGADARK(CurVmode.hsync-4,0)); // invert HSYNC

		LineBufSync[8] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,CurVmode.hsync/2-3)); // HSYNC
1000d132:	4642      	mov	r2, r8
		LineBufSync[5] = BYTESWAP(VGADARK(CurVmode.hsync-4,0)); // invert HSYNC
1000d134:	4005      	ands	r5, r0
		LineBufSync[9] = BYTESWAP(VGADARK(CurVmode.htot/2-CurVmode.hsync/2-4,0)); // dark line

		// control blocks - initialize to VSYNC
		CtrlBuf1[0] = 4; // send 4x u32
1000d136:	2004      	movs	r0, #4
		LineBufSync[8] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,CurVmode.hsync/2-3)); // HSYNC
1000d138:	621a      	str	r2, [r3, #32]
		LineBufSync[9] = BYTESWAP(VGADARK(CurVmode.htot/2-CurVmode.hsync/2-4,0)); // dark line
1000d13a:	9a01      	ldr	r2, [sp, #4]
		LineBufSync[5] = BYTESWAP(VGADARK(CurVmode.hsync-4,0)); // invert HSYNC
1000d13c:	4335      	orrs	r5, r6
1000d13e:	3418      	adds	r4, #24
		LineBufSync[9] = BYTESWAP(VGADARK(CurVmode.htot/2-CurVmode.hsync/2-4,0)); // dark line
1000d140:	625a      	str	r2, [r3, #36]	; 0x24
		CtrlBuf1[0] = 4; // send 4x u32
1000d142:	491d      	ldr	r1, [pc, #116]	; (1000d1b8 <_Z10VgaBufInitv+0x1a4>)
		CtrlBuf1[1] = (u32)&LineBufSync[4]; // VSYNC

		CtrlBuf2[0] = 4; // send 4x u32
1000d144:	4a1d      	ldr	r2, [pc, #116]	; (1000d1bc <_Z10VgaBufInitv+0x1a8>)
		LineBufSync[5] = BYTESWAP(VGADARK(CurVmode.hsync-4,0)); // invert HSYNC
1000d146:	432c      	orrs	r4, r5
1000d148:	615c      	str	r4, [r3, #20]
		LineBufSync[7] = BYTESWAP(VGADARK(CurVmode.hsync-4,0)); // invert HSYNC
1000d14a:	61dc      	str	r4, [r3, #28]
		CtrlBuf1[1] = (u32)&LineBufSync[4]; // VSYNC
1000d14c:	3310      	adds	r3, #16
		CtrlBuf1[0] = 4; // send 4x u32
1000d14e:	6008      	str	r0, [r1, #0]
		CtrlBuf1[1] = (u32)&LineBufSync[4]; // VSYNC
1000d150:	604b      	str	r3, [r1, #4]
		CtrlBuf2[0] = 4; // send 4x u32
1000d152:	6010      	str	r0, [r2, #0]
		CtrlBuf2[1] = (u32)&LineBufSync[4]; // VSYNC
1000d154:	6053      	str	r3, [r2, #4]

		CtrlBuf2[0] = 2; // send 2x u32
		CtrlBuf2[1] = (u32)&LineBufSync[0]; // VSYNC
	}

	CtrlBuf1[2] = 0; // stop mark
1000d156:	2300      	movs	r3, #0
1000d158:	608b      	str	r3, [r1, #8]
	CtrlBuf1[3] = 0; // stop mark
1000d15a:	60cb      	str	r3, [r1, #12]

	CtrlBuf2[2] = 0; // stop mark
1000d15c:	6093      	str	r3, [r2, #8]
	CtrlBuf2[3] = 0; // stop mark
1000d15e:	60d3      	str	r3, [r2, #12]
}
1000d160:	b003      	add	sp, #12
1000d162:	bcf0      	pop	{r4, r5, r6, r7}
1000d164:	46bb      	mov	fp, r7
1000d166:	46b2      	mov	sl, r6
1000d168:	46a9      	mov	r9, r5
1000d16a:	46a0      	mov	r8, r4
1000d16c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LineBufSync[0] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,CurVmode.htot-CurVmode.hsync-3)); // invert dark line
1000d16e:	4662      	mov	r2, ip
		LineBufSync[1] = BYTESWAP(VGADARK(CurVmode.hsync-4,0)); // invert HSYNC
1000d170:	24a0      	movs	r4, #160	; 0xa0
		CtrlBuf1[0] = 2; // send 2x u32
1000d172:	2002      	movs	r0, #2
		LineBufSync[0] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,CurVmode.htot-CurVmode.hsync-3)); // invert dark line
1000d174:	3f03      	subs	r7, #3
		LineBufSync[1] = BYTESWAP(VGADARK(CurVmode.hsync-4,0)); // invert HSYNC
1000d176:	3904      	subs	r1, #4
1000d178:	ba3f      	rev	r7, r7
		LineBufSync[0] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,CurVmode.htot-CurVmode.hsync-3)); // invert dark line
1000d17a:	4317      	orrs	r7, r2
		LineBufSync[1] = BYTESWAP(VGADARK(CurVmode.hsync-4,0)); // invert HSYNC
1000d17c:	040a      	lsls	r2, r1, #16
1000d17e:	4016      	ands	r6, r2
1000d180:	020a      	lsls	r2, r1, #8
1000d182:	0e12      	lsrs	r2, r2, #24
1000d184:	4316      	orrs	r6, r2
1000d186:	4029      	ands	r1, r5
1000d188:	4331      	orrs	r1, r6
		LineBufSync[0] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,CurVmode.htot-CurVmode.hsync-3)); // invert dark line
1000d18a:	4b0a      	ldr	r3, [pc, #40]	; (1000d1b4 <_Z10VgaBufInitv+0x1a0>)
		CtrlBuf2[0] = 2; // send 2x u32
1000d18c:	4a0b      	ldr	r2, [pc, #44]	; (1000d1bc <_Z10VgaBufInitv+0x1a8>)
		LineBufSync[1] = BYTESWAP(VGADARK(CurVmode.hsync-4,0)); // invert HSYNC
1000d18e:	430c      	orrs	r4, r1
		CtrlBuf1[0] = 2; // send 2x u32
1000d190:	4909      	ldr	r1, [pc, #36]	; (1000d1b8 <_Z10VgaBufInitv+0x1a4>)
		LineBufSync[0] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,CurVmode.htot-CurVmode.hsync-3)); // invert dark line
1000d192:	601f      	str	r7, [r3, #0]
		LineBufSync[1] = BYTESWAP(VGADARK(CurVmode.hsync-4,0)); // invert HSYNC
1000d194:	605c      	str	r4, [r3, #4]
		CtrlBuf1[0] = 2; // send 2x u32
1000d196:	6008      	str	r0, [r1, #0]
		CtrlBuf1[1] = (u32)&LineBufSync[0]; // VSYNC
1000d198:	604b      	str	r3, [r1, #4]
		CtrlBuf2[0] = 2; // send 2x u32
1000d19a:	6010      	str	r0, [r2, #0]
		CtrlBuf2[1] = (u32)&LineBufSync[0]; // VSYNC
1000d19c:	6053      	str	r3, [r2, #4]
1000d19e:	e7da      	b.n	1000d156 <_Z10VgaBufInitv+0x142>
1000d1a0:	200049e8 	.word	0x200049e8
1000d1a4:	200061bc 	.word	0x200061bc
1000d1a8:	00ffff00 	.word	0x00ffff00
1000d1ac:	200061b8 	.word	0x200061b8
1000d1b0:	200061b0 	.word	0x200061b0
1000d1b4:	200061cc 	.word	0x200061cc
1000d1b8:	200034d8 	.word	0x200034d8
1000d1bc:	20003f38 	.word	0x20003f38

1000d1c0 <_Z7VgaTermv>:
 *
 * \param channel DMA channel
 */
static inline void dma_channel_abort(uint channel) {
    check_dma_channel_param(channel);
    dma_hw->abort = 1u << channel;
1000d1c0:	21a0      	movs	r1, #160	; 0xa0
1000d1c2:	2302      	movs	r3, #2
    // Bit will go 0 once channel has reached safe state
    // (i.e. any in-flight transfers have retired)
    while (dma_hw->abort & (1ul << channel)) tight_loop_contents();
1000d1c4:	2002      	movs	r0, #2
    dma_hw->abort = 1u << channel;
1000d1c6:	4a27      	ldr	r2, [pc, #156]	; (1000d264 <_Z7VgaTermv+0xa4>)
1000d1c8:	05c9      	lsls	r1, r1, #23

// terminate VGA service
void VgaTerm()
{
1000d1ca:	b570      	push	{r4, r5, r6, lr}
1000d1cc:	508b      	str	r3, [r1, r2]
    while (dma_hw->abort & (1ul << channel)) tight_loop_contents();
1000d1ce:	588b      	ldr	r3, [r1, r2]
1000d1d0:	4218      	tst	r0, r3
1000d1d2:	d1fc      	bne.n	1000d1ce <_Z7VgaTermv+0xe>
    dma_hw->abort = 1u << channel;
1000d1d4:	2301      	movs	r3, #1
    while (dma_hw->abort & (1ul << channel)) tight_loop_contents();
1000d1d6:	20a0      	movs	r0, #160	; 0xa0
    dma_hw->abort = 1u << channel;
1000d1d8:	508b      	str	r3, [r1, r2]
    while (dma_hw->abort & (1ul << channel)) tight_loop_contents();
1000d1da:	2201      	movs	r2, #1
1000d1dc:	4921      	ldr	r1, [pc, #132]	; (1000d264 <_Z7VgaTermv+0xa4>)
1000d1de:	05c0      	lsls	r0, r0, #23
1000d1e0:	5843      	ldr	r3, [r0, r1]
1000d1e2:	421a      	tst	r2, r3
1000d1e4:	d1fc      	bne.n	1000d1e0 <_Z7VgaTermv+0x20>
    dma_hw->abort = 1u << channel;
1000d1e6:	24a0      	movs	r4, #160	; 0xa0
1000d1e8:	2001      	movs	r0, #1
1000d1ea:	2601      	movs	r6, #1
1000d1ec:	4a1d      	ldr	r2, [pc, #116]	; (1000d264 <_Z7VgaTermv+0xa4>)
1000d1ee:	05e4      	lsls	r4, r4, #23
1000d1f0:	0031      	movs	r1, r6
1000d1f2:	4081      	lsls	r1, r0
1000d1f4:	50a1      	str	r1, [r4, r2]
    while (dma_hw->abort & (1ul << channel)) tight_loop_contents();
1000d1f6:	58a3      	ldr	r3, [r4, r2]
1000d1f8:	420b      	tst	r3, r1
1000d1fa:	d1fc      	bne.n	1000d1f6 <_Z7VgaTermv+0x36>
    dma_hw->abort = 1u << channel;
1000d1fc:	0031      	movs	r1, r6
1000d1fe:	1e43      	subs	r3, r0, #1
1000d200:	4099      	lsls	r1, r3
1000d202:	50a1      	str	r1, [r4, r2]
    while (dma_hw->abort & (1ul << channel)) tight_loop_contents();
1000d204:	58a3      	ldr	r3, [r4, r2]
1000d206:	001d      	movs	r5, r3
1000d208:	400d      	ands	r5, r1
1000d20a:	420b      	tst	r3, r1
1000d20c:	d1fa      	bne.n	1000d204 <_Z7VgaTermv+0x44>
	int i;

	// abort DMA channels
	dma_channel_abort(VGA_DMA_PIO0); // pre-abort, could be chaining right now
	dma_channel_abort(VGA_DMA_CB0);
	for (i = 0; i < LAYERS; i++)
1000d20e:	3002      	adds	r0, #2
1000d210:	2809      	cmp	r0, #9
1000d212:	d1ed      	bne.n	1000d1f0 <_Z7VgaTermv+0x30>
		dma_channel_abort(VGA_DMA_PIO(i));
		dma_channel_abort(VGA_DMA_CB(i));
	}

	// disable IRQ0 from DMA0
	irq_set_enabled(DMA_IRQ_0, false);
1000d214:	2100      	movs	r1, #0
1000d216:	3002      	adds	r0, #2
1000d218:	f7f4 fb38 	bl	1000188c <irq_set_enabled>
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
1000d21c:	2302      	movs	r3, #2
1000d21e:	4a12      	ldr	r2, [pc, #72]	; (1000d268 <_Z7VgaTermv+0xa8>)
    pio->ctrl = (pio->ctrl & ~mask) | (enabled ? mask : 0u);
1000d220:	4812      	ldr	r0, [pc, #72]	; (1000d26c <_Z7VgaTermv+0xac>)
1000d222:	6013      	str	r3, [r2, #0]
	dma_channel_set_irq0_enabled(VGA_DMA_PIO0, false);

	// Clear the interrupt request for DMA control channel
	dma_hw->ints0 = (1u << VGA_DMA_PIO0);
1000d224:	4a12      	ldr	r2, [pc, #72]	; (1000d270 <_Z7VgaTermv+0xb0>)
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
1000d226:	4913      	ldr	r1, [pc, #76]	; (1000d274 <_Z7VgaTermv+0xb4>)
1000d228:	50a3      	str	r3, [r4, r2]
1000d22a:	220f      	movs	r2, #15
1000d22c:	6803      	ldr	r3, [r0, #0]
1000d22e:	4393      	bics	r3, r2
1000d230:	6003      	str	r3, [r0, #0]
    pio->ctrl |= (mask << PIO_CTRL_SM_RESTART_LSB) & PIO_CTRL_SM_RESTART_BITS;
1000d232:	6803      	ldr	r3, [r0, #0]
1000d234:	32e1      	adds	r2, #225	; 0xe1
1000d236:	4313      	orrs	r3, r2
1000d238:	6003      	str	r3, [r0, #0]
1000d23a:	2380      	movs	r3, #128	; 0x80
1000d23c:	4a0e      	ldr	r2, [pc, #56]	; (1000d278 <_Z7VgaTermv+0xb8>)
1000d23e:	061b      	lsls	r3, r3, #24
1000d240:	6013      	str	r3, [r2, #0]
1000d242:	6013      	str	r3, [r2, #0]

	// clear FIFOs
	for (i = 0; i < LAYERS; i++)
	{
		pio_sm_clear_fifos(VGA_PIO, VGA_SM(i));
		CtrlBufNext[i] = NULL;
1000d244:	4a0d      	ldr	r2, [pc, #52]	; (1000d27c <_Z7VgaTermv+0xbc>)
1000d246:	6015      	str	r5, [r2, #0]
1000d248:	600b      	str	r3, [r1, #0]
1000d24a:	600b      	str	r3, [r1, #0]
1000d24c:	490c      	ldr	r1, [pc, #48]	; (1000d280 <_Z7VgaTermv+0xc0>)
1000d24e:	6055      	str	r5, [r2, #4]
1000d250:	600b      	str	r3, [r1, #0]
1000d252:	600b      	str	r3, [r1, #0]
1000d254:	490b      	ldr	r1, [pc, #44]	; (1000d284 <_Z7VgaTermv+0xc4>)
1000d256:	6095      	str	r5, [r2, #8]
1000d258:	600b      	str	r3, [r1, #0]
1000d25a:	600b      	str	r3, [r1, #0]
1000d25c:	60d5      	str	r5, [r2, #12]
	}

	// clear PIO instruction memory 
	pio_clear_instruction_memory(VGA_PIO);
1000d25e:	f7f4 ffa5 	bl	100021ac <pio_clear_instruction_memory>
}
1000d262:	bd70      	pop	{r4, r5, r6, pc}
1000d264:	00000444 	.word	0x00000444
1000d268:	50003404 	.word	0x50003404
1000d26c:	50200000 	.word	0x50200000
1000d270:	0000040c 	.word	0x0000040c
1000d274:	502010e8 	.word	0x502010e8
1000d278:	502010d0 	.word	0x502010d0
1000d27c:	20004998 	.word	0x20004998
1000d280:	50201100 	.word	0x50201100
1000d284:	50201118 	.word	0x50201118

1000d288 <_Z16ScanlineTypeInitPK6sVmode>:

// initialize scanline type table
void ScanlineTypeInit(const sVmode* v)
{
1000d288:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d28a:	46c6      	mov	lr, r8
	u8* d = ScanlineType;
	int i, k;

	// line 0 is not used
	*d++ = LINE_DARK;
1000d28c:	2305      	movs	r3, #5
{
1000d28e:	b500      	push	{lr}
	*d++ = LINE_DARK;
1000d290:	4c6b      	ldr	r4, [pc, #428]	; (1000d440 <_Z16ScanlineTypeInitPK6sVmode+0x1b8>)
{
1000d292:	0005      	movs	r5, r0
	*d++ = LINE_DARK;
1000d294:	7023      	strb	r3, [r4, #0]

	// progressive mode (VGA 525)
	if (!v->inter)
1000d296:	3351      	adds	r3, #81	; 0x51
1000d298:	5cc3      	ldrb	r3, [r0, r3]
1000d29a:	2b00      	cmp	r3, #0
1000d29c:	d125      	bne.n	1000d2ea <_Z16ScanlineTypeInitPK6sVmode+0x62>
	{
		// vertical sync (VGA 2)
		for (i = v->vsync1; i > 0; i--) *d++ = LINE_VSYNC;
1000d29e:	8e86      	ldrh	r6, [r0, #52]	; 0x34
	*d++ = LINE_DARK;
1000d2a0:	3401      	adds	r4, #1
		for (i = v->vsync1; i > 0; i--) *d++ = LINE_VSYNC;
1000d2a2:	2e00      	cmp	r6, #0
1000d2a4:	d005      	beq.n	1000d2b2 <_Z16ScanlineTypeInitPK6sVmode+0x2a>
1000d2a6:	0020      	movs	r0, r4
1000d2a8:	0032      	movs	r2, r6
1000d2aa:	2100      	movs	r1, #0
1000d2ac:	f7f3 ff1a 	bl	100010e4 <__wrap_memset>
1000d2b0:	1934      	adds	r4, r6, r4

		// dark (VGA 33)
		for (i = v->vback1; i > 0; i--) *d++ = LINE_DARK;
1000d2b2:	8f2e      	ldrh	r6, [r5, #56]	; 0x38
1000d2b4:	2e00      	cmp	r6, #0
1000d2b6:	d005      	beq.n	1000d2c4 <_Z16ScanlineTypeInitPK6sVmode+0x3c>
1000d2b8:	0020      	movs	r0, r4
1000d2ba:	0032      	movs	r2, r6
1000d2bc:	2105      	movs	r1, #5
1000d2be:	f7f3 ff11 	bl	100010e4 <__wrap_memset>
1000d2c2:	19a4      	adds	r4, r4, r6

		// image (VGA 480)
		for (i = v->vact1; i > 0; i--) *d++ = LINE_IMG;
1000d2c4:	8f6e      	ldrh	r6, [r5, #58]	; 0x3a
1000d2c6:	2e00      	cmp	r6, #0
1000d2c8:	d005      	beq.n	1000d2d6 <_Z16ScanlineTypeInitPK6sVmode+0x4e>
1000d2ca:	0020      	movs	r0, r4
1000d2cc:	0032      	movs	r2, r6
1000d2ce:	2106      	movs	r1, #6
1000d2d0:	f7f3 ff08 	bl	100010e4 <__wrap_memset>
1000d2d4:	19a4      	adds	r4, r4, r6

		// dark (VGA 10)
		for (i = v->vfront1; i > 0; i--) *d++ = LINE_DARK;
1000d2d6:	8faa      	ldrh	r2, [r5, #60]	; 0x3c
1000d2d8:	2a00      	cmp	r2, #0
1000d2da:	d003      	beq.n	1000d2e4 <_Z16ScanlineTypeInitPK6sVmode+0x5c>
1000d2dc:	2105      	movs	r1, #5
1000d2de:	0020      	movs	r0, r4
1000d2e0:	f7f3 ff00 	bl	100010e4 <__wrap_memset>
		for (i = v->vfront2; i > 0; i--) *d++ = LINE_DARK;

		// half sync (PAL 3, NTSC 3)
		for (i = v->vpre2/2; i > 0; i--) *d++ = LINE_HHSYNC;
	}
}
1000d2e4:	bc80      	pop	{r7}
1000d2e6:	46b8      	mov	r8, r7
1000d2e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		for (i = v->vsync1/2; i > 0; i--) *d++ = LINE_VVSYNC;
1000d2ea:	8e83      	ldrh	r3, [r0, #52]	; 0x34
	*d++ = LINE_DARK;
1000d2ec:	3401      	adds	r4, #1
		for (i = v->vsync1/2; i > 0; i--) *d++ = LINE_VVSYNC;
1000d2ee:	085e      	lsrs	r6, r3, #1
1000d2f0:	d006      	beq.n	1000d300 <_Z16ScanlineTypeInitPK6sVmode+0x78>
1000d2f2:	0020      	movs	r0, r4
1000d2f4:	0032      	movs	r2, r6
1000d2f6:	2101      	movs	r1, #1
1000d2f8:	f7f3 fef4 	bl	100010e4 <__wrap_memset>
		if ((v->vsync1 & 1) != 0) *d++ = LINE_VHSYNC;
1000d2fc:	8eab      	ldrh	r3, [r5, #52]	; 0x34
		for (i = v->vsync1/2; i > 0; i--) *d++ = LINE_VVSYNC;
1000d2fe:	1934      	adds	r4, r6, r4
		if ((v->vsync1 & 1) != 0) *d++ = LINE_VHSYNC;
1000d300:	07db      	lsls	r3, r3, #31
1000d302:	d502      	bpl.n	1000d30a <_Z16ScanlineTypeInitPK6sVmode+0x82>
1000d304:	2302      	movs	r3, #2
1000d306:	7023      	strb	r3, [r4, #0]
1000d308:	3401      	adds	r4, #1
		for (i = v->vpost1/2; i > 0; i--) *d++ = LINE_HHSYNC;
1000d30a:	8eee      	ldrh	r6, [r5, #54]	; 0x36
1000d30c:	0876      	lsrs	r6, r6, #1
1000d30e:	d005      	beq.n	1000d31c <_Z16ScanlineTypeInitPK6sVmode+0x94>
1000d310:	0020      	movs	r0, r4
1000d312:	0032      	movs	r2, r6
1000d314:	2103      	movs	r1, #3
1000d316:	f7f3 fee5 	bl	100010e4 <__wrap_memset>
1000d31a:	19a4      	adds	r4, r4, r6
		for (i = v->vback1; i > 0; i--) *d++ = LINE_DARK;
1000d31c:	8f2e      	ldrh	r6, [r5, #56]	; 0x38
1000d31e:	2e00      	cmp	r6, #0
1000d320:	d005      	beq.n	1000d32e <_Z16ScanlineTypeInitPK6sVmode+0xa6>
1000d322:	0020      	movs	r0, r4
1000d324:	0032      	movs	r2, r6
1000d326:	2105      	movs	r1, #5
1000d328:	f7f3 fedc 	bl	100010e4 <__wrap_memset>
1000d32c:	19a4      	adds	r4, r4, r6
		if (v->odd)
1000d32e:	2358      	movs	r3, #88	; 0x58
1000d330:	5ceb      	ldrb	r3, [r5, r3]
			for (i = v->vact1; i > 0; i--) *d++ = LINE_IMGODD1; // odd lines 1, 3, 5, ... (PAL)
1000d332:	8f6e      	ldrh	r6, [r5, #58]	; 0x3a
		if (v->odd)
1000d334:	2b00      	cmp	r3, #0
1000d336:	d16e      	bne.n	1000d416 <_Z16ScanlineTypeInitPK6sVmode+0x18e>
			for (i = v->vact1; i > 0; i--) *d++ = LINE_IMGEVEN1; // even lines 0, 2, 4, ... (NTSC)
1000d338:	2e00      	cmp	r6, #0
1000d33a:	d005      	beq.n	1000d348 <_Z16ScanlineTypeInitPK6sVmode+0xc0>
1000d33c:	0020      	movs	r0, r4
1000d33e:	0032      	movs	r2, r6
1000d340:	2107      	movs	r1, #7
1000d342:	f7f3 fecf 	bl	100010e4 <__wrap_memset>
1000d346:	19a4      	adds	r4, r4, r6
		for (i = v->vfront1; i > 0; i--) *d++ = LINE_DARK;
1000d348:	8fae      	ldrh	r6, [r5, #60]	; 0x3c
1000d34a:	2e00      	cmp	r6, #0
1000d34c:	d005      	beq.n	1000d35a <_Z16ScanlineTypeInitPK6sVmode+0xd2>
1000d34e:	0020      	movs	r0, r4
1000d350:	0032      	movs	r2, r6
1000d352:	2105      	movs	r1, #5
1000d354:	f7f3 fec6 	bl	100010e4 <__wrap_memset>
1000d358:	19a4      	adds	r4, r4, r6
		for (i = v->vpre1/2; i > 0; i--) *d++ = LINE_HHSYNC;
1000d35a:	8fef      	ldrh	r7, [r5, #62]	; 0x3e
1000d35c:	087e      	lsrs	r6, r7, #1
1000d35e:	d006      	beq.n	1000d36e <_Z16ScanlineTypeInitPK6sVmode+0xe6>
1000d360:	0020      	movs	r0, r4
1000d362:	0032      	movs	r2, r6
1000d364:	2103      	movs	r1, #3
1000d366:	f7f3 febd 	bl	100010e4 <__wrap_memset>
		k = v->vpre1 & 1;
1000d36a:	8fef      	ldrh	r7, [r5, #62]	; 0x3e
		for (i = v->vpre1/2; i > 0; i--) *d++ = LINE_HHSYNC;
1000d36c:	19a4      	adds	r4, r4, r6
		k = v->vpre1 & 1;
1000d36e:	2301      	movs	r3, #1
1000d370:	001a      	movs	r2, r3
1000d372:	403a      	ands	r2, r7
		if (k != 0) *d++ = LINE_HVSYNC;
1000d374:	423b      	tst	r3, r7
1000d376:	d002      	beq.n	1000d37e <_Z16ScanlineTypeInitPK6sVmode+0xf6>
1000d378:	3303      	adds	r3, #3
1000d37a:	7023      	strb	r3, [r4, #0]
1000d37c:	3401      	adds	r4, #1
		for (i = (v->vsync2 - k)/2; i > 0; i--) *d++ = LINE_VVSYNC;
1000d37e:	2342      	movs	r3, #66	; 0x42
1000d380:	4698      	mov	r8, r3
1000d382:	5aeb      	ldrh	r3, [r5, r3]
1000d384:	1a9a      	subs	r2, r3, r2
1000d386:	0fd6      	lsrs	r6, r2, #31
1000d388:	18b6      	adds	r6, r6, r2
1000d38a:	1076      	asrs	r6, r6, #1
1000d38c:	d007      	beq.n	1000d39e <_Z16ScanlineTypeInitPK6sVmode+0x116>
1000d38e:	0020      	movs	r0, r4
1000d390:	0032      	movs	r2, r6
1000d392:	2101      	movs	r1, #1
1000d394:	f7f3 fea6 	bl	100010e4 <__wrap_memset>
		if (((v->vsync2 - k) & 1) != 0) *d++ = LINE_VHSYNC;
1000d398:	4643      	mov	r3, r8
1000d39a:	5aeb      	ldrh	r3, [r5, r3]
		for (i = (v->vsync2 - k)/2; i > 0; i--) *d++ = LINE_VVSYNC;
1000d39c:	19a4      	adds	r4, r4, r6
		if (((v->vsync2 - k) & 1) != 0) *d++ = LINE_VHSYNC;
1000d39e:	1bdb      	subs	r3, r3, r7
1000d3a0:	07db      	lsls	r3, r3, #31
1000d3a2:	d502      	bpl.n	1000d3aa <_Z16ScanlineTypeInitPK6sVmode+0x122>
1000d3a4:	2302      	movs	r3, #2
1000d3a6:	7023      	strb	r3, [r4, #0]
1000d3a8:	3401      	adds	r4, #1
		for (i = v->vpost2/2; i > 0; i--) *d++ = LINE_HHSYNC;
1000d3aa:	2344      	movs	r3, #68	; 0x44
1000d3ac:	5aee      	ldrh	r6, [r5, r3]
1000d3ae:	0876      	lsrs	r6, r6, #1
1000d3b0:	d005      	beq.n	1000d3be <_Z16ScanlineTypeInitPK6sVmode+0x136>
1000d3b2:	0020      	movs	r0, r4
1000d3b4:	0032      	movs	r2, r6
1000d3b6:	2103      	movs	r1, #3
1000d3b8:	f7f3 fe94 	bl	100010e4 <__wrap_memset>
1000d3bc:	19a4      	adds	r4, r4, r6
		for (i = v->vback2; i > 0; i--) *d++ = LINE_DARK;
1000d3be:	2346      	movs	r3, #70	; 0x46
1000d3c0:	5aee      	ldrh	r6, [r5, r3]
1000d3c2:	2e00      	cmp	r6, #0
1000d3c4:	d005      	beq.n	1000d3d2 <_Z16ScanlineTypeInitPK6sVmode+0x14a>
1000d3c6:	0020      	movs	r0, r4
1000d3c8:	0032      	movs	r2, r6
1000d3ca:	2105      	movs	r1, #5
1000d3cc:	f7f3 fe8a 	bl	100010e4 <__wrap_memset>
1000d3d0:	19a4      	adds	r4, r4, r6
		if (v->odd)
1000d3d2:	2358      	movs	r3, #88	; 0x58
1000d3d4:	5ceb      	ldrb	r3, [r5, r3]
1000d3d6:	2b00      	cmp	r3, #0
1000d3d8:	d026      	beq.n	1000d428 <_Z16ScanlineTypeInitPK6sVmode+0x1a0>
			for (i = v->vact2; i > 0; i--) *d++ = LINE_IMGEVEN2; // even lines 0, 2, 4, ... (PAL)
1000d3da:	2348      	movs	r3, #72	; 0x48
1000d3dc:	5aee      	ldrh	r6, [r5, r3]
1000d3de:	2e00      	cmp	r6, #0
1000d3e0:	d005      	beq.n	1000d3ee <_Z16ScanlineTypeInitPK6sVmode+0x166>
1000d3e2:	0020      	movs	r0, r4
1000d3e4:	0032      	movs	r2, r6
1000d3e6:	2108      	movs	r1, #8
1000d3e8:	f7f3 fe7c 	bl	100010e4 <__wrap_memset>
1000d3ec:	19a4      	adds	r4, r4, r6
		for (i = v->vfront2; i > 0; i--) *d++ = LINE_DARK;
1000d3ee:	234a      	movs	r3, #74	; 0x4a
1000d3f0:	5aee      	ldrh	r6, [r5, r3]
1000d3f2:	2e00      	cmp	r6, #0
1000d3f4:	d005      	beq.n	1000d402 <_Z16ScanlineTypeInitPK6sVmode+0x17a>
1000d3f6:	0020      	movs	r0, r4
1000d3f8:	0032      	movs	r2, r6
1000d3fa:	2105      	movs	r1, #5
1000d3fc:	f7f3 fe72 	bl	100010e4 <__wrap_memset>
1000d400:	19a4      	adds	r4, r4, r6
		for (i = v->vpre2/2; i > 0; i--) *d++ = LINE_HHSYNC;
1000d402:	234c      	movs	r3, #76	; 0x4c
1000d404:	5aea      	ldrh	r2, [r5, r3]
1000d406:	0852      	lsrs	r2, r2, #1
1000d408:	d100      	bne.n	1000d40c <_Z16ScanlineTypeInitPK6sVmode+0x184>
1000d40a:	e76b      	b.n	1000d2e4 <_Z16ScanlineTypeInitPK6sVmode+0x5c>
1000d40c:	2103      	movs	r1, #3
1000d40e:	0020      	movs	r0, r4
1000d410:	f7f3 fe68 	bl	100010e4 <__wrap_memset>
1000d414:	e766      	b.n	1000d2e4 <_Z16ScanlineTypeInitPK6sVmode+0x5c>
			for (i = v->vact1; i > 0; i--) *d++ = LINE_IMGODD1; // odd lines 1, 3, 5, ... (PAL)
1000d416:	2e00      	cmp	r6, #0
1000d418:	d096      	beq.n	1000d348 <_Z16ScanlineTypeInitPK6sVmode+0xc0>
1000d41a:	0020      	movs	r0, r4
1000d41c:	0032      	movs	r2, r6
1000d41e:	2109      	movs	r1, #9
1000d420:	f7f3 fe60 	bl	100010e4 <__wrap_memset>
1000d424:	19a4      	adds	r4, r4, r6
1000d426:	e78f      	b.n	1000d348 <_Z16ScanlineTypeInitPK6sVmode+0xc0>
			for (i = v->vact2; i > 0; i--) *d++ = LINE_IMGODD2; // odd lines 1, 3, 5, ... (NTSC)
1000d428:	2348      	movs	r3, #72	; 0x48
1000d42a:	5aee      	ldrh	r6, [r5, r3]
1000d42c:	2e00      	cmp	r6, #0
1000d42e:	d0de      	beq.n	1000d3ee <_Z16ScanlineTypeInitPK6sVmode+0x166>
1000d430:	0020      	movs	r0, r4
1000d432:	0032      	movs	r2, r6
1000d434:	210a      	movs	r1, #10
1000d436:	f7f3 fe55 	bl	100010e4 <__wrap_memset>
1000d43a:	19a4      	adds	r4, r4, r6
1000d43c:	e7d7      	b.n	1000d3ee <_Z16ScanlineTypeInitPK6sVmode+0x166>
1000d43e:	46c0      	nop			; (mov r8, r8)
1000d440:	20006e4c 	.word	0x20006e4c

1000d444 <_Z7VgaInitPK6sVmode>:
}

// initialize videomode (returns False on bad configuration)
// - All layer modes must use same layer program (LAYERMODE_BASE = overlapped layers are OFF)
void VgaInit(const sVmode* vmode)
{
1000d444:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d446:	46de      	mov	lr, fp
1000d448:	464e      	mov	r6, r9
1000d44a:	4645      	mov	r5, r8
1000d44c:	4657      	mov	r7, sl
1000d44e:	0004      	movs	r4, r0
1000d450:	b5e0      	push	{r5, r6, r7, lr}
1000d452:	b083      	sub	sp, #12
1000d454:	9001      	str	r0, [sp, #4]
	int i;

	// stop old state
	VgaTerm();
1000d456:	f7ff feb3 	bl	1000d1c0 <_Z7VgaTermv>

	// initialize scanline type table
	ScanlineTypeInit(vmode);
1000d45a:	0020      	movs	r0, r4
1000d45c:	f7ff ff14 	bl	1000d288 <_Z16ScanlineTypeInitPK6sVmode>
	// prepare render font pixel mask
	for (i = 0; i < 256; i++)
	{
		// higher 4 bits
		u32 m = 0;
		if ((i & B7) != 0) m |= 0xff;
1000d460:	2280      	movs	r2, #128	; 0x80
1000d462:	4691      	mov	r9, r2
		if ((i & B6) != 0) m |= 0xff << 8;
1000d464:	3a40      	subs	r2, #64	; 0x40
1000d466:	4690      	mov	r8, r2
		if ((i & B5) != 0) m |= 0xff << 16;
		if ((i & B4) != 0) m |= 0xff << 24;
1000d468:	22ff      	movs	r2, #255	; 0xff
		if ((i & B5) != 0) m |= 0xff << 16;
1000d46a:	27ff      	movs	r7, #255	; 0xff
		if ((i & B4) != 0) m |= 0xff << 24;
1000d46c:	0612      	lsls	r2, r2, #24
	for (i = 0; i < 256; i++)
1000d46e:	2300      	movs	r3, #0
		if ((i & B5) != 0) m |= 0xff << 16;
1000d470:	2520      	movs	r5, #32
		if ((i & B4) != 0) m |= 0xff << 24;
1000d472:	2610      	movs	r6, #16
1000d474:	4694      	mov	ip, r2
1000d476:	4956      	ldr	r1, [pc, #344]	; (1000d5d0 <_Z7VgaInitPK6sVmode+0x18c>)
		if ((i & B5) != 0) m |= 0xff << 16;
1000d478:	043f      	lsls	r7, r7, #16
1000d47a:	e024      	b.n	1000d4c6 <_Z7VgaInitPK6sVmode+0x82>
		if ((i & B7) != 0) m |= 0xff;
1000d47c:	20ff      	movs	r0, #255	; 0xff
		u32 m = 0;
1000d47e:	2200      	movs	r2, #0
		if ((i & B7) != 0) m |= 0xff;
1000d480:	0200      	lsls	r0, r0, #8
		if ((i & B6) != 0) m |= 0xff << 8;
1000d482:	4644      	mov	r4, r8
1000d484:	421c      	tst	r4, r3
1000d486:	d000      	beq.n	1000d48a <_Z7VgaInitPK6sVmode+0x46>
1000d488:	0002      	movs	r2, r0
		if ((i & B5) != 0) m |= 0xff << 16;
1000d48a:	421d      	tst	r5, r3
1000d48c:	d000      	beq.n	1000d490 <_Z7VgaInitPK6sVmode+0x4c>
1000d48e:	433a      	orrs	r2, r7
		if ((i & B4) != 0) m |= 0xff << 24;
1000d490:	421e      	tst	r6, r3
1000d492:	d001      	beq.n	1000d498 <_Z7VgaInitPK6sVmode+0x54>
1000d494:	4660      	mov	r0, ip
1000d496:	4302      	orrs	r2, r0
		RenderTextMask[2*i] = m;
1000d498:	600a      	str	r2, [r1, #0]

		// lower 4 bits
		m = 0;
		if ((i & B3) != 0) m |= 0xff;
1000d49a:	071a      	lsls	r2, r3, #28
1000d49c:	d419      	bmi.n	1000d4d2 <_Z7VgaInitPK6sVmode+0x8e>
1000d49e:	20ff      	movs	r0, #255	; 0xff
		m = 0;
1000d4a0:	2200      	movs	r2, #0
		if ((i & B3) != 0) m |= 0xff;
1000d4a2:	0200      	lsls	r0, r0, #8
		if ((i & B2) != 0) m |= 0xff << 8;
1000d4a4:	075c      	lsls	r4, r3, #29
1000d4a6:	d500      	bpl.n	1000d4aa <_Z7VgaInitPK6sVmode+0x66>
1000d4a8:	0002      	movs	r2, r0
		if ((i & B1) != 0) m |= 0xff << 16;
1000d4aa:	0798      	lsls	r0, r3, #30
1000d4ac:	d500      	bpl.n	1000d4b0 <_Z7VgaInitPK6sVmode+0x6c>
1000d4ae:	433a      	orrs	r2, r7
		if ((i & B0) != 0) m |= 0xff << 24;
1000d4b0:	07d8      	lsls	r0, r3, #31
1000d4b2:	d501      	bpl.n	1000d4b8 <_Z7VgaInitPK6sVmode+0x74>
1000d4b4:	4660      	mov	r0, ip
1000d4b6:	4302      	orrs	r2, r0
		RenderTextMask[2*i+1] = m;
1000d4b8:	604a      	str	r2, [r1, #4]
	for (i = 0; i < 256; i++)
1000d4ba:	2280      	movs	r2, #128	; 0x80
1000d4bc:	3301      	adds	r3, #1
1000d4be:	3108      	adds	r1, #8
1000d4c0:	0052      	lsls	r2, r2, #1
1000d4c2:	4293      	cmp	r3, r2
1000d4c4:	d008      	beq.n	1000d4d8 <_Z7VgaInitPK6sVmode+0x94>
		if ((i & B7) != 0) m |= 0xff;
1000d4c6:	464a      	mov	r2, r9
1000d4c8:	421a      	tst	r2, r3
1000d4ca:	d0d7      	beq.n	1000d47c <_Z7VgaInitPK6sVmode+0x38>
1000d4cc:	22ff      	movs	r2, #255	; 0xff
1000d4ce:	4841      	ldr	r0, [pc, #260]	; (1000d5d4 <_Z7VgaInitPK6sVmode+0x190>)
1000d4d0:	e7d7      	b.n	1000d482 <_Z7VgaInitPK6sVmode+0x3e>
		if ((i & B3) != 0) m |= 0xff;
1000d4d2:	22ff      	movs	r2, #255	; 0xff
1000d4d4:	483f      	ldr	r0, [pc, #252]	; (1000d5d4 <_Z7VgaInitPK6sVmode+0x190>)
1000d4d6:	e7e5      	b.n	1000d4a4 <_Z7VgaInitPK6sVmode+0x60>

	// save current videomode
	memcpy(&CurVmode, vmode, sizeof(sVmode));

	// initialize parameters
	ScanLine = 1; // currently processed scanline
1000d4d8:	2401      	movs	r4, #1
	memset(LineBuf0, COL_BLACK, BLACK_MAX);
1000d4da:	3281      	adds	r2, #129	; 0x81
1000d4dc:	2100      	movs	r1, #0
1000d4de:	32ff      	adds	r2, #255	; 0xff
1000d4e0:	483d      	ldr	r0, [pc, #244]	; (1000d5d8 <_Z7VgaInitPK6sVmode+0x194>)
1000d4e2:	f7f3 fdff 	bl	100010e4 <__wrap_memset>
	memcpy(&CurVmode, vmode, sizeof(sVmode));
1000d4e6:	9d01      	ldr	r5, [sp, #4]
1000d4e8:	225c      	movs	r2, #92	; 0x5c
1000d4ea:	0029      	movs	r1, r5
1000d4ec:	483b      	ldr	r0, [pc, #236]	; (1000d5dc <_Z7VgaInitPK6sVmode+0x198>)
1000d4ee:	f7f3 fdff 	bl	100010f0 <__wrap___aeabi_memcpy>
	ScanLine = 1; // currently processed scanline
1000d4f2:	4b3b      	ldr	r3, [pc, #236]	; (1000d5e0 <_Z7VgaInitPK6sVmode+0x19c>)
//	Frame = 0;
	BufInx = 0; // at first, control buffer 1 will be sent out
	CtrlBufNext[0] = CtrlBuf2;

	// initialize base layer
	LayerModeInx[0] = LAYERMODE_BASE;
1000d4f4:	483b      	ldr	r0, [pc, #236]	; (1000d5e4 <_Z7VgaInitPK6sVmode+0x1a0>)
	ScanLine = 1; // currently processed scanline
1000d4f6:	601c      	str	r4, [r3, #0]
	BufInx = 0; // at first, control buffer 1 will be sent out
1000d4f8:	2300      	movs	r3, #0
	LayerModeInx[0] = LAYERMODE_BASE;
1000d4fa:	4681      	mov	r9, r0
	BufInx = 0; // at first, control buffer 1 will be sent out
1000d4fc:	4a3a      	ldr	r2, [pc, #232]	; (1000d5e8 <_Z7VgaInitPK6sVmode+0x1a4>)
	CtrlBufNext[0] = CtrlBuf2;
1000d4fe:	493b      	ldr	r1, [pc, #236]	; (1000d5ec <_Z7VgaInitPK6sVmode+0x1a8>)
	BufInx = 0; // at first, control buffer 1 will be sent out
1000d500:	6013      	str	r3, [r2, #0]
	memcpy(&CurLayerMode[0], &LayerMode[LAYERMODE_BASE], sizeof(sLayerMode));
1000d502:	4f3b      	ldr	r7, [pc, #236]	; (1000d5f0 <_Z7VgaInitPK6sVmode+0x1ac>)
	CtrlBufNext[0] = CtrlBuf2;
1000d504:	4a3b      	ldr	r2, [pc, #236]	; (1000d5f4 <_Z7VgaInitPK6sVmode+0x1b0>)
	LayerModeInx[0] = LAYERMODE_BASE;
1000d506:	7003      	strb	r3, [r0, #0]
	memcpy(&CurLayerMode[0], &LayerMode[LAYERMODE_BASE], sizeof(sLayerMode));
1000d508:	4b3b      	ldr	r3, [pc, #236]	; (1000d5f8 <_Z7VgaInitPK6sVmode+0x1b4>)
	CtrlBufNext[0] = CtrlBuf2;
1000d50a:	6011      	str	r1, [r2, #0]
	memcpy(&CurLayerMode[0], &LayerMode[LAYERMODE_BASE], sizeof(sLayerMode));
1000d50c:	0038      	movs	r0, r7
1000d50e:	0019      	movs	r1, r3
1000d510:	2203      	movs	r2, #3
1000d512:	469a      	mov	sl, r3
1000d514:	f7f3 fdec 	bl	100010f0 <__wrap___aeabi_memcpy>
	memset(&LayerScreen[0], 0, sizeof(sLayer));
1000d518:	2100      	movs	r1, #0
1000d51a:	2224      	movs	r2, #36	; 0x24
1000d51c:	4837      	ldr	r0, [pc, #220]	; (1000d5fc <_Z7VgaInitPK6sVmode+0x1b8>)
1000d51e:	f7f3 fde1 	bl	100010e4 <__wrap_memset>

	// save layer modes
	LayerModeInx[1] = vmode->mode[1];
1000d522:	4649      	mov	r1, r9
1000d524:	7eab      	ldrb	r3, [r5, #26]
	LayerModeInx[2] = vmode->mode[2];
	LayerModeInx[3] = vmode->mode[3];

	LayerMask = B0; // mask of active layers
1000d526:	4e36      	ldr	r6, [pc, #216]	; (1000d600 <_Z7VgaInitPK6sVmode+0x1bc>)
	LayerModeInx[1] = vmode->mode[1];
1000d528:	704b      	strb	r3, [r1, #1]
	LayerModeInx[2] = vmode->mode[2];
1000d52a:	7eeb      	ldrb	r3, [r5, #27]
1000d52c:	3703      	adds	r7, #3
1000d52e:	708b      	strb	r3, [r1, #2]
	LayerModeInx[3] = vmode->mode[3];
1000d530:	7f2b      	ldrb	r3, [r5, #28]
	LayerMask = B0; // mask of active layers
1000d532:	7034      	strb	r4, [r6, #0]
	LayerModeInx[3] = vmode->mode[3];
1000d534:	70cb      	strb	r3, [r1, #3]
	for (i = 1; i < LAYERS; i++)
	{
		memcpy(&CurLayerMode[i], &LayerMode[LayerModeInx[i]], sizeof(sLayerMode));
		if (LayerModeInx[i] != LAYERMODE_BASE) LayerMask |= (1 << i);
1000d536:	2301      	movs	r3, #1
1000d538:	469b      	mov	fp, r3
		memcpy(&CurLayerMode[i], &LayerMode[LayerModeInx[i]], sizeof(sLayerMode));
1000d53a:	464b      	mov	r3, r9
1000d53c:	5d1d      	ldrb	r5, [r3, r4]
1000d53e:	2203      	movs	r2, #3
1000d540:	0069      	lsls	r1, r5, #1
1000d542:	1949      	adds	r1, r1, r5
1000d544:	0038      	movs	r0, r7
1000d546:	4451      	add	r1, sl
1000d548:	f7f3 fdd2 	bl	100010f0 <__wrap___aeabi_memcpy>
		if (LayerModeInx[i] != LAYERMODE_BASE) LayerMask |= (1 << i);
1000d54c:	2d00      	cmp	r5, #0
1000d54e:	d004      	beq.n	1000d55a <_Z7VgaInitPK6sVmode+0x116>
1000d550:	465b      	mov	r3, fp
1000d552:	40a3      	lsls	r3, r4
1000d554:	7832      	ldrb	r2, [r6, #0]
1000d556:	4313      	orrs	r3, r2
1000d558:	7033      	strb	r3, [r6, #0]
	for (i = 1; i < LAYERS; i++)
1000d55a:	3401      	adds	r4, #1
1000d55c:	3703      	adds	r7, #3
1000d55e:	2c04      	cmp	r4, #4
1000d560:	d1eb      	bne.n	1000d53a <_Z7VgaInitPK6sVmode+0xf6>
	}

	// get layer program
	LayerProgInx = vmode->prog;
1000d562:	9b01      	ldr	r3, [sp, #4]
	memcpy(&CurLayerProg, &LayerProg[LayerProgInx], sizeof(sLayerProg));
1000d564:	4927      	ldr	r1, [pc, #156]	; (1000d604 <_Z7VgaInitPK6sVmode+0x1c0>)
	LayerProgInx = vmode->prog;
1000d566:	7e1a      	ldrb	r2, [r3, #24]
1000d568:	4b27      	ldr	r3, [pc, #156]	; (1000d608 <_Z7VgaInitPK6sVmode+0x1c4>)
1000d56a:	701a      	strb	r2, [r3, #0]
	memcpy(&CurLayerProg, &LayerProg[LayerProgInx], sizeof(sLayerProg));
1000d56c:	0053      	lsls	r3, r2, #1
1000d56e:	189b      	adds	r3, r3, r2
1000d570:	4a26      	ldr	r2, [pc, #152]	; (1000d60c <_Z7VgaInitPK6sVmode+0x1c8>)
1000d572:	011b      	lsls	r3, r3, #4
1000d574:	189b      	adds	r3, r3, r2
1000d576:	000a      	movs	r2, r1
1000d578:	cb13      	ldmia	r3!, {r0, r1, r4}
1000d57a:	c213      	stmia	r2!, {r0, r1, r4}
1000d57c:	cb13      	ldmia	r3!, {r0, r1, r4}
1000d57e:	c213      	stmia	r2!, {r0, r1, r4}
1000d580:	cb13      	ldmia	r3!, {r0, r1, r4}
1000d582:	c213      	stmia	r2!, {r0, r1, r4}
1000d584:	cb13      	ldmia	r3!, {r0, r1, r4}
1000d586:	c213      	stmia	r2!, {r0, r1, r4}

	// initialize VGA PIO
	VgaPioInit();
1000d588:	f7ff fc6e 	bl	1000ce68 <_Z10VgaPioInitv>

	// initialize scanline buffers
	VgaBufInit();
1000d58c:	f7ff fd42 	bl	1000d014 <_Z10VgaBufInitv>

	// initialize DMA
	VgaDmaInit();
1000d590:	f7ff fbdc 	bl	1000cd4c <_Z10VgaDmaInitv>

	// enable DMA IRQ
	irq_set_enabled(DMA_IRQ_0, true);
1000d594:	2101      	movs	r1, #1
1000d596:	200b      	movs	r0, #11
1000d598:	f7f4 f978 	bl	1000188c <irq_set_enabled>
    dma_hw->multi_channel_trigger = chan_mask;
1000d59c:	22a0      	movs	r2, #160	; 0xa0
1000d59e:	2386      	movs	r3, #134	; 0x86
1000d5a0:	2101      	movs	r1, #1
1000d5a2:	05d2      	lsls	r2, r2, #23
1000d5a4:	00db      	lsls	r3, r3, #3
1000d5a6:	50d1      	str	r1, [r2, r3]
                 ((mask << PIO_CTRL_SM_ENABLE_LSB) & PIO_CTRL_SM_ENABLE_BITS);
1000d5a8:	230f      	movs	r3, #15
    pio->ctrl |= ((mask << PIO_CTRL_CLKDIV_RESTART_LSB) & PIO_CTRL_CLKDIV_RESTART_BITS) |
1000d5aa:	4919      	ldr	r1, [pc, #100]	; (1000d610 <_Z7VgaInitPK6sVmode+0x1cc>)

	// start DMA with base layer 0
	dma_channel_start(VGA_DMA_CB0);

	// run state machines
	pio_enable_sm_mask_in_sync(VGA_PIO, LayerMask);
1000d5ac:	7832      	ldrb	r2, [r6, #0]
1000d5ae:	6808      	ldr	r0, [r1, #0]
                 ((mask << PIO_CTRL_SM_ENABLE_LSB) & PIO_CTRL_SM_ENABLE_BITS);
1000d5b0:	4013      	ands	r3, r2
    pio->ctrl |= ((mask << PIO_CTRL_CLKDIV_RESTART_LSB) & PIO_CTRL_CLKDIV_RESTART_BITS) |
1000d5b2:	4303      	orrs	r3, r0
1000d5b4:	20f0      	movs	r0, #240	; 0xf0
1000d5b6:	0212      	lsls	r2, r2, #8
1000d5b8:	0100      	lsls	r0, r0, #4
1000d5ba:	4002      	ands	r2, r0
1000d5bc:	4313      	orrs	r3, r2
1000d5be:	600b      	str	r3, [r1, #0]
}
1000d5c0:	b003      	add	sp, #12
1000d5c2:	bcf0      	pop	{r4, r5, r6, r7}
1000d5c4:	46bb      	mov	fp, r7
1000d5c6:	46b2      	mov	sl, r6
1000d5c8:	46a9      	mov	r9, r5
1000d5ca:	46a0      	mov	r8, r4
1000d5cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d5ce:	46c0      	nop			; (mov r8, r8)
1000d5d0:	2000642c 	.word	0x2000642c
1000d5d4:	0000ffff 	.word	0x0000ffff
1000d5d8:	20004af0 	.word	0x20004af0
1000d5dc:	200049e8 	.word	0x200049e8
1000d5e0:	20006e48 	.word	0x20006e48
1000d5e4:	20004a5c 	.word	0x20004a5c
1000d5e8:	2000349c 	.word	0x2000349c
1000d5ec:	20003f38 	.word	0x20003f38
1000d5f0:	200049a8 	.word	0x200049a8
1000d5f4:	20004998 	.word	0x20004998
1000d5f8:	1002bab8 	.word	0x1002bab8
1000d5fc:	20004a60 	.word	0x20004a60
1000d600:	20012769 	.word	0x20012769
1000d604:	200049b4 	.word	0x200049b4
1000d608:	2001276a 	.word	0x2001276a
1000d60c:	1002baf4 	.word	0x1002baf4
1000d610:	50200000 	.word	0x50200000

1000d614 <_Z7VgaCorev>:

void (* volatile Core1Fnc)() = NULL; // core 1 remote function

// VGA core
void VgaCore()
{
1000d614:	b570      	push	{r4, r5, r6, lr}
			if ((u32)v == (u32)1)
				VgaTerm(); // terminate
			else
				VgaInit(v);
			__dmb();
			VgaVmodeReq = NULL;
1000d616:	2600      	movs	r6, #0
1000d618:	4d0f      	ldr	r5, [pc, #60]	; (1000d658 <_Z7VgaCorev+0x44>)
1000d61a:	4c10      	ldr	r4, [pc, #64]	; (1000d65c <_Z7VgaCorev+0x48>)
    __asm volatile ("dmb");
1000d61c:	f3bf 8f5f 	dmb	sy
		v = VgaVmodeReq;
1000d620:	6828      	ldr	r0, [r5, #0]
		if (v != NULL)
1000d622:	2800      	cmp	r0, #0
1000d624:	d006      	beq.n	1000d634 <_Z7VgaCorev+0x20>
			if ((u32)v == (u32)1)
1000d626:	2801      	cmp	r0, #1
1000d628:	d012      	beq.n	1000d650 <_Z7VgaCorev+0x3c>
				VgaInit(v);
1000d62a:	f7ff ff0b 	bl	1000d444 <_Z7VgaInitPK6sVmode>
1000d62e:	f3bf 8f5f 	dmb	sy
			VgaVmodeReq = NULL;
1000d632:	602e      	str	r6, [r5, #0]
		}

		// execute remote function
		fnc = Core1Fnc;
1000d634:	6823      	ldr	r3, [r4, #0]
		if (fnc != NULL)
1000d636:	2b00      	cmp	r3, #0
1000d638:	d0f0      	beq.n	1000d61c <_Z7VgaCorev+0x8>
		{
			fnc();
1000d63a:	4798      	blx	r3
1000d63c:	f3bf 8f5f 	dmb	sy
			__dmb();
			Core1Fnc = NULL;
1000d640:	6026      	str	r6, [r4, #0]
1000d642:	f3bf 8f5f 	dmb	sy
		v = VgaVmodeReq;
1000d646:	6828      	ldr	r0, [r5, #0]
		if (v != NULL)
1000d648:	2800      	cmp	r0, #0
1000d64a:	d0f3      	beq.n	1000d634 <_Z7VgaCorev+0x20>
			if ((u32)v == (u32)1)
1000d64c:	2801      	cmp	r0, #1
1000d64e:	d1ec      	bne.n	1000d62a <_Z7VgaCorev+0x16>
				VgaTerm(); // terminate
1000d650:	f7ff fdb6 	bl	1000d1c0 <_Z7VgaTermv>
1000d654:	e7eb      	b.n	1000d62e <_Z7VgaCorev+0x1a>
1000d656:	46c0      	nop			; (mov r8, r8)
1000d658:	20011a60 	.word	0x20011a60
1000d65c:	200034d4 	.word	0x200034d4

1000d660 <_Z10VgaInitReqPK6sVmode>:
}

// request to initialize VGA videomode, NULL=only stop driver (wait to initialization completes)
void VgaInitReq(const sVmode* vmode)
{
	if (vmode == NULL) vmode = (const sVmode*)1;
1000d660:	2800      	cmp	r0, #0
1000d662:	d00c      	beq.n	1000d67e <_Z10VgaInitReqPK6sVmode+0x1e>
1000d664:	f3bf 8f5f 	dmb	sy
	__dmb();
	VgaVmodeReq = vmode;
1000d668:	4a06      	ldr	r2, [pc, #24]	; (1000d684 <_Z10VgaInitReqPK6sVmode+0x24>)
1000d66a:	6010      	str	r0, [r2, #0]
	while (VgaVmodeReq != NULL) { __dmb(); }
1000d66c:	6813      	ldr	r3, [r2, #0]
1000d66e:	2b00      	cmp	r3, #0
1000d670:	d004      	beq.n	1000d67c <_Z10VgaInitReqPK6sVmode+0x1c>
1000d672:	f3bf 8f5f 	dmb	sy
1000d676:	6813      	ldr	r3, [r2, #0]
1000d678:	2b00      	cmp	r3, #0
1000d67a:	d1fa      	bne.n	1000d672 <_Z10VgaInitReqPK6sVmode+0x12>
}
1000d67c:	4770      	bx	lr
	if (vmode == NULL) vmode = (const sVmode*)1;
1000d67e:	3001      	adds	r0, #1
1000d680:	e7f0      	b.n	1000d664 <_Z10VgaInitReqPK6sVmode+0x4>
1000d682:	46c0      	nop			; (mov r8, r8)
1000d684:	20011a60 	.word	0x20011a60

1000d688 <_Z7LayerOnh>:
// number of pins of overlapped layer (base layer should stay VGA_GPIO_OUTNUM)
u8 LayerNumPin[LAYERS_MAX] = { VGA_GPIO_OUTNUM, VGA_GPIO_OUTNUM, VGA_GPIO_OUTNUM, VGA_GPIO_OUTNUM};

// set overlapped layer 1..3 ON
void LayerOn(u8 inx)
{
1000d688:	0003      	movs	r3, r0
1000d68a:	f3bf 8f5f 	dmb	sy
	__dmb();
	LayerScreen[inx].on = True;
1000d68e:	00c0      	lsls	r0, r0, #3
1000d690:	18c3      	adds	r3, r0, r3
1000d692:	4804      	ldr	r0, [pc, #16]	; (1000d6a4 <_Z7LayerOnh+0x1c>)
1000d694:	009b      	lsls	r3, r3, #2
1000d696:	18c0      	adds	r0, r0, r3
1000d698:	2301      	movs	r3, #1
1000d69a:	3022      	adds	r0, #34	; 0x22
1000d69c:	7003      	strb	r3, [r0, #0]
1000d69e:	f3bf 8f5f 	dmb	sy
	__dmb();
}
1000d6a2:	4770      	bx	lr
1000d6a4:	20004a60 	.word	0x20004a60

1000d6a8 <_Z10LayerSetuphPKhPK6sVmodetthPKv>:
//  h ... image height
//  col ... key color (needed for LAYERMODE_KEY and LAYERMODE_MONO layer mode)
//  par ... additional data (RLE index table, integer transformation matrix)
// Use these functions after layer setup: LayerSetX, LayerSetY, LayerOn
void LayerSetup(u8 inx, const u8* img, const sVmode* vmode, u16 w, u16 h, u8 col /* = 0 */, const void* par /* = NULL */)
{
1000d6a8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d6aa:	46de      	mov	lr, fp
1000d6ac:	464e      	mov	r6, r9
1000d6ae:	4645      	mov	r5, r8
1000d6b0:	4657      	mov	r7, sl
1000d6b2:	b5e0      	push	{r5, r6, r7, lr}
1000d6b4:	b083      	sub	sp, #12
1000d6b6:	4688      	mov	r8, r1
1000d6b8:	a90c      	add	r1, sp, #48	; 0x30
1000d6ba:	4693      	mov	fp, r2
1000d6bc:	880a      	ldrh	r2, [r1, #0]
1000d6be:	a90d      	add	r1, sp, #52	; 0x34
1000d6c0:	4691      	mov	r9, r2
1000d6c2:	7809      	ldrb	r1, [r1, #0]
1000d6c4:	f3bf 8f5f 	dmb	sy
	LayerScreen[inx].on = False;
1000d6c8:	00c2      	lsls	r2, r0, #3
1000d6ca:	1814      	adds	r4, r2, r0
1000d6cc:	4e35      	ldr	r6, [pc, #212]	; (1000d7a4 <_Z10LayerSetuphPKhPK6sVmodetthPKv+0xfc>)
1000d6ce:	9201      	str	r2, [sp, #4]
1000d6d0:	00a2      	lsls	r2, r4, #2
1000d6d2:	18b4      	adds	r4, r6, r2
1000d6d4:	4694      	mov	ip, r2
1000d6d6:	2222      	movs	r2, #34	; 0x22
1000d6d8:	4692      	mov	sl, r2
1000d6da:	44a2      	add	sl, r4
1000d6dc:	2700      	movs	r7, #0
1000d6de:	4652      	mov	r2, sl
1000d6e0:	7017      	strb	r7, [r2, #0]
1000d6e2:	f3bf 8f5f 	dmb	sy
	LayerOff(inx); // set layer OFF
	sLayer* lay = &LayerScreen[inx]; // get pointer to layer
	lay->img = img; // pointer to image data
1000d6e6:	4662      	mov	r2, ip
1000d6e8:	4645      	mov	r5, r8
1000d6ea:	50b5      	str	r5, [r6, r2]
	lay->par = par; // additional parameter
1000d6ec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
	lay->keycol = col | ((u16)col << 8) | ((u32)col << 16) | ((u32)col << 24); // key color
	lay->x = 0; // X coordinate
1000d6ee:	8267      	strh	r7, [r4, #18]
	lay->par = par; // additional parameter
1000d6f0:	6062      	str	r2, [r4, #4]
	lay->keycol = col | ((u16)col << 8) | ((u32)col << 16) | ((u32)col << 24); // key color
1000d6f2:	040a      	lsls	r2, r1, #16
1000d6f4:	4690      	mov	r8, r2
1000d6f6:	060a      	lsls	r2, r1, #24
1000d6f8:	4694      	mov	ip, r2
1000d6fa:	4642      	mov	r2, r8
1000d6fc:	4665      	mov	r5, ip
1000d6fe:	432a      	orrs	r2, r5
1000d700:	4690      	mov	r8, r2
1000d702:	020a      	lsls	r2, r1, #8
1000d704:	4311      	orrs	r1, r2
1000d706:	4642      	mov	r2, r8
1000d708:	4311      	orrs	r1, r2
	lay->y = 0; // Y coordinate
	lay->h = h; // height of image
1000d70a:	464a      	mov	r2, r9
1000d70c:	8322      	strh	r2, [r4, #24]
	lay->spritenum = 0; // number of sprites
	lay->cpp = vmode->cpp; // save clocks per pixel
1000d70e:	465a      	mov	r2, fp
	lay->y = 0; // Y coordinate
1000d710:	82a7      	strh	r7, [r4, #20]
	lay->spritenum = 0; // number of sprites
1000d712:	8427      	strh	r7, [r4, #32]
	lay->cpp = vmode->cpp; // save clocks per pixel
1000d714:	0027      	movs	r7, r4
	lay->keycol = col | ((u16)col << 8) | ((u32)col << 16) | ((u32)col << 24); // key color
1000d716:	60e1      	str	r1, [r4, #12]
	lay->cpp = vmode->cpp; // save clocks per pixel
1000d718:	8ad2      	ldrh	r2, [r2, #22]
1000d71a:	3723      	adds	r7, #35	; 0x23
1000d71c:	703a      	strb	r2, [r7, #0]
	lay->mode = vmode->mode[inx]; // layer mode
1000d71e:	465a      	mov	r2, fp
1000d720:	1812      	adds	r2, r2, r0
1000d722:	7e52      	ldrb	r2, [r2, #25]
	lay->w = w; // image width
1000d724:	82e3      	strh	r3, [r4, #22]
	lay->mode = vmode->mode[inx]; // layer mode
1000d726:	7722      	strb	r2, [r4, #28]
	lay->trans = mono ? (((w/8)+3)/4) : (w/4); // transfer count
1000d728:	2a04      	cmp	r2, #4
1000d72a:	d019      	beq.n	1000d760 <_Z10LayerSetuphPKhPK6sVmodetthPKv+0xb8>
1000d72c:	089f      	lsrs	r7, r3, #2
1000d72e:	8227      	strh	r7, [r4, #16]
	lay->wb = mono ? (w/8) : w; // width bytes
1000d730:	8363      	strh	r3, [r4, #26]
	switch (lay->mode)
1000d732:	2a12      	cmp	r2, #18
1000d734:	d834      	bhi.n	1000d7a0 <_Z10LayerSetuphPKhPK6sVmodetthPKv+0xf8>
1000d736:	4c1c      	ldr	r4, [pc, #112]	; (1000d7a8 <_Z10LayerSetuphPKhPK6sVmodetthPKv+0x100>)
1000d738:	0092      	lsls	r2, r2, #2
1000d73a:	58a2      	ldr	r2, [r4, r2]
1000d73c:	4697      	mov	pc, r2
		init = VGAWHITE(cppx, w);
1000d73e:	1e59      	subs	r1, r3, #1
1000d740:	23c0      	movs	r3, #192	; 0xc0
1000d742:	029b      	lsls	r3, r3, #10
1000d744:	430b      	orrs	r3, r1
	lay->init = init; // init word
1000d746:	9a01      	ldr	r2, [sp, #4]
1000d748:	4694      	mov	ip, r2
1000d74a:	4460      	add	r0, ip
1000d74c:	0080      	lsls	r0, r0, #2
1000d74e:	1830      	adds	r0, r6, r0
1000d750:	6083      	str	r3, [r0, #8]
	LayerSetW(inx, w); // set width of image, update parameters init, trans and wb
}
1000d752:	b003      	add	sp, #12
1000d754:	bcf0      	pop	{r4, r5, r6, r7}
1000d756:	46bb      	mov	fp, r7
1000d758:	46b2      	mov	sl, r6
1000d75a:	46a9      	mov	r9, r5
1000d75c:	46a0      	mov	r8, r4
1000d75e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	lay->trans = mono ? (((w/8)+3)/4) : (w/4); // transfer count
1000d760:	08df      	lsrs	r7, r3, #3
1000d762:	1cfa      	adds	r2, r7, #3
1000d764:	1092      	asrs	r2, r2, #2
1000d766:	8222      	strh	r2, [r4, #16]
		init = VGAMONO(cppx, w, (lay->keycol & 0xff));
1000d768:	22ff      	movs	r2, #255	; 0xff
1000d76a:	0309      	lsls	r1, r1, #12
1000d76c:	0312      	lsls	r2, r2, #12
1000d76e:	3b01      	subs	r3, #1
1000d770:	4011      	ands	r1, r2
1000d772:	005b      	lsls	r3, r3, #1
1000d774:	430b      	orrs	r3, r1
1000d776:	2101      	movs	r1, #1
	lay->wb = mono ? (w/8) : w; // width bytes
1000d778:	8367      	strh	r7, [r4, #26]
		init = VGAMONO(cppx, w, (lay->keycol & 0xff));
1000d77a:	430b      	orrs	r3, r1
		break;
1000d77c:	e7e3      	b.n	1000d746 <_Z10LayerSetuphPKhPK6sVmodetthPKv+0x9e>
		init = VGAKEY(cppx, w, (lay->keycol & 0xff));
1000d77e:	22ff      	movs	r2, #255	; 0xff
1000d780:	02c9      	lsls	r1, r1, #11
1000d782:	02d2      	lsls	r2, r2, #11
1000d784:	3b01      	subs	r3, #1
1000d786:	4011      	ands	r1, r2
1000d788:	4319      	orrs	r1, r3
1000d78a:	2380      	movs	r3, #128	; 0x80
1000d78c:	031b      	lsls	r3, r3, #12
1000d78e:	430b      	orrs	r3, r1
		break;
1000d790:	e7d9      	b.n	1000d746 <_Z10LayerSetuphPKhPK6sVmodetthPKv+0x9e>
		init = VGACOLOR(cppx, w);
1000d792:	4906      	ldr	r1, [pc, #24]	; (1000d7ac <_Z10LayerSetuphPKhPK6sVmodetthPKv+0x104>)
1000d794:	3b01      	subs	r3, #1
1000d796:	005b      	lsls	r3, r3, #1
1000d798:	430b      	orrs	r3, r1
		break;
1000d79a:	e7d4      	b.n	1000d746 <_Z10LayerSetuphPKhPK6sVmodetthPKv+0x9e>
	switch (lay->mode)
1000d79c:	2301      	movs	r3, #1
1000d79e:	e7d2      	b.n	1000d746 <_Z10LayerSetuphPKhPK6sVmodetthPKv+0x9e>
	u32 init = 0; // init word
1000d7a0:	2300      	movs	r3, #0
1000d7a2:	e7d0      	b.n	1000d746 <_Z10LayerSetuphPKhPK6sVmodetthPKv+0x9e>
1000d7a4:	20004a60 	.word	0x20004a60
1000d7a8:	1002ba6c 	.word	0x1002ba6c
1000d7ac:	002ff000 	.word	0x002ff000

1000d7b0 <_Z11ScreenClearP7sScreen>:
1000d7b0:	f3bf 8f5f 	dmb	sy

// clear screen (set 0 strips, does not modify sprites)
void ScreenClear(sScreen* s)
{
	__dmb();
	s->num = 0;
1000d7b4:	2300      	movs	r3, #0
1000d7b6:	8003      	strh	r3, [r0, #0]
1000d7b8:	f3bf 8f5f 	dmb	sy
	__dmb();
}
1000d7bc:	4770      	bx	lr
1000d7be:	46c0      	nop			; (mov r8, r8)

1000d7c0 <_Z14ScreenAddStripP7sScreeni>:

// add empty strip to the screen (returns pointer to the strip)
sStrip* ScreenAddStrip(sScreen* s, int height)
{
	int n = s->num;
1000d7c0:	23e4      	movs	r3, #228	; 0xe4
1000d7c2:	8802      	ldrh	r2, [r0, #0]
{
1000d7c4:	b510      	push	{r4, lr}
1000d7c6:	4353      	muls	r3, r2
	sStrip* t = &s->strip[n];
	t->height = height;
1000d7c8:	18c4      	adds	r4, r0, r3
1000d7ca:	80a1      	strh	r1, [r4, #4]
	t->num = 0;
1000d7cc:	2100      	movs	r1, #0
1000d7ce:	80e1      	strh	r1, [r4, #6]
1000d7d0:	f3bf 8f5f 	dmb	sy
	__dmb();
	s->num = n + 1;
1000d7d4:	3201      	adds	r2, #1
1000d7d6:	8002      	strh	r2, [r0, #0]
1000d7d8:	f3bf 8f5f 	dmb	sy
	sStrip* t = &s->strip[n];
1000d7dc:	3304      	adds	r3, #4
1000d7de:	18c0      	adds	r0, r0, r3
	__dmb();
	return t;
}
1000d7e0:	bd10      	pop	{r4, pc}
1000d7e2:	46c0      	nop			; (mov r8, r8)

1000d7e4 <_Z13ScreenAddSegmP6sStripi>:

// add empty segment to video strip (returns pointer to the segment and initialises is to defaults)
sSegm* ScreenAddSegm(sStrip* strip, int width)
{
1000d7e4:	b5f0      	push	{r4, r5, r6, r7, lr}
	int n = strip->num;
	sSegm* g = &strip->seg[n];
	g->width = width;
1000d7e6:	2500      	movs	r5, #0
	int n = strip->num;
1000d7e8:	8844      	ldrh	r4, [r0, #2]
	g->width = width;
1000d7ea:	040f      	lsls	r7, r1, #16
1000d7ec:	00e3      	lsls	r3, r4, #3
1000d7ee:	1b1b      	subs	r3, r3, r4
1000d7f0:	009b      	lsls	r3, r3, #2
1000d7f2:	0c3e      	lsrs	r6, r7, #16
1000d7f4:	18c2      	adds	r2, r0, r3
1000d7f6:	433e      	orrs	r6, r7
1000d7f8:	6056      	str	r6, [r2, #4]
	g->wb = width;
	g->offx = 0;
1000d7fa:	6095      	str	r5, [r2, #8]
	g->offy = 0;
	g->wrapx = width;
1000d7fc:	8191      	strh	r1, [r2, #12]
	g->wrapy = strip->height;
1000d7fe:	8801      	ldrh	r1, [r0, #0]
	g->data = NULL;
1000d800:	6115      	str	r5, [r2, #16]
	g->wrapy = strip->height;
1000d802:	81d1      	strh	r1, [r2, #14]
	g->form = GF_COLOR;
1000d804:	8295      	strh	r5, [r2, #20]
	g->dbly = false;
	g->par = 0;
1000d806:	6195      	str	r5, [r2, #24]
	g->par2 = 0;
1000d808:	61d5      	str	r5, [r2, #28]
1000d80a:	f3bf 8f5f 	dmb	sy
	__dmb();
	strip->num = n + 1;
1000d80e:	3401      	adds	r4, #1
1000d810:	8044      	strh	r4, [r0, #2]
1000d812:	f3bf 8f5f 	dmb	sy
	sSegm* g = &strip->seg[n];
1000d816:	3304      	adds	r3, #4
1000d818:	18c0      	adds	r0, r0, r3
	__dmb();
	return g;
}
1000d81a:	bdf0      	pop	{r4, r5, r6, r7, pc}

1000d81c <_Z15ScreenSegmColorP5sSegmmm>:
// set video segment to simple color format GF_COLOR
//  col1 = color pattern 4-pixels even line (use macro MULTICOL)
//  col2 = color pattern 4-pixels odd line (use macro MULTICOL)
void ScreenSegmColor(sSegm* segm, u32 col1, u32 col2)
{
	segm->par = col1;
1000d81c:	6141      	str	r1, [r0, #20]
	segm->par2 = col2;
1000d81e:	6182      	str	r2, [r0, #24]
1000d820:	f3bf 8f5f 	dmb	sy
	__dmb();
	segm->form = GF_COLOR;
1000d824:	2300      	movs	r3, #0
1000d826:	7403      	strb	r3, [r0, #16]
1000d828:	f3bf 8f5f 	dmb	sy
	__dmb();
}
1000d82c:	4770      	bx	lr
1000d82e:	46c0      	nop			; (mov r8, r8)

1000d830 <_Z16ScreenSegmGraph8P5sSegmPKvi>:
//   data = pointer to data buffer
//   wb = pitch - number of bytes between lines
// To scroll image, set virtual dimension wrapx and wrapy, then shift offx and offy.
void ScreenSegmGraph8(sSegm* segm, const void* data, int wb)
{
	segm->form = GF_COLOR;
1000d830:	2300      	movs	r3, #0
1000d832:	7403      	strb	r3, [r0, #16]
1000d834:	f3bf 8f5f 	dmb	sy
	__dmb();
	segm->data = data;
1000d838:	60c1      	str	r1, [r0, #12]
	segm->wb = wb;
1000d83a:	8042      	strh	r2, [r0, #2]
1000d83c:	f3bf 8f5f 	dmb	sy
	__dmb();
	segm->form = GF_GRAPH8;
1000d840:	3301      	adds	r3, #1
1000d842:	7403      	strb	r3, [r0, #16]
1000d844:	f3bf 8f5f 	dmb	sy
	__dmb();
}
1000d848:	4770      	bx	lr
1000d84a:	46c0      	nop			; (mov r8, r8)

1000d84c <_Z13GenPal16TransPtPKh>:

// generate 16-color palette translation table for functions ScreenSegmGraph4
//  trans = pointer to destination palette translation table (u16 trans[256])
//  pal = pointer to source palette of 16 colors (u8 pal[16])
void GenPal16Trans(u16* trans, const u8* pal)
{
1000d84c:	b5f0      	push	{r4, r5, r6, r7, lr}
	int i, j;
	u16 k;
	for (i = 0; i < 256; i++)
1000d84e:	2680      	movs	r6, #128	; 0x80
{
1000d850:	0005      	movs	r5, r0
	for (i = 0; i < 256; i++)
1000d852:	2300      	movs	r3, #0
{
1000d854:	0008      	movs	r0, r1
	{
		j = (i >> 4) & 0x0f;
		k = pal[j];

		j = i & 0x0f;
1000d856:	270f      	movs	r7, #15
	for (i = 0; i < 256; i++)
1000d858:	0076      	lsls	r6, r6, #1
		j = i & 0x0f;
1000d85a:	003a      	movs	r2, r7
1000d85c:	401a      	ands	r2, r3
		k |= (u16)pal[j] << 8;
1000d85e:	5c81      	ldrb	r1, [r0, r2]
		j = (i >> 4) & 0x0f;
1000d860:	111a      	asrs	r2, r3, #4
		k |= (u16)pal[j] << 8;
1000d862:	5c82      	ldrb	r2, [r0, r2]
1000d864:	0209      	lsls	r1, r1, #8

		trans[i] = k;
1000d866:	005c      	lsls	r4, r3, #1
		k |= (u16)pal[j] << 8;
1000d868:	430a      	orrs	r2, r1
	for (i = 0; i < 256; i++)
1000d86a:	3301      	adds	r3, #1
		trans[i] = k;
1000d86c:	532a      	strh	r2, [r5, r4]
	for (i = 0; i < 256; i++)
1000d86e:	42b3      	cmp	r3, r6
1000d870:	d1f3      	bne.n	1000d85a <_Z13GenPal16TransPtPKh+0xe>
	}
}
1000d872:	bdf0      	pop	{r4, r5, r6, r7, pc}

1000d874 <_Z16ScreenSegmGraph4P5sSegmPKvS2_i>:
//   data = pointer to data buffer
//   trans = pointer to 16-color palette translation table (generated with GenPal16Trans function)
//   wb = pitch - number of bytes between lines
// To scroll image, set virtual dimension wrapx and wrapy, then shift offx and offy.
void ScreenSegmGraph4(sSegm* segm, const void* data, const void* trans, int wb)
{
1000d874:	b510      	push	{r4, lr}
	segm->form = GF_COLOR;
1000d876:	2400      	movs	r4, #0
1000d878:	7404      	strb	r4, [r0, #16]
1000d87a:	f3bf 8f5f 	dmb	sy
	__dmb();
	segm->data = data;
1000d87e:	60c1      	str	r1, [r0, #12]
	segm->par = (u32)trans;
1000d880:	6142      	str	r2, [r0, #20]
	segm->wb = wb;
1000d882:	8043      	strh	r3, [r0, #2]
1000d884:	f3bf 8f5f 	dmb	sy
	__dmb();
	segm->form = GF_GRAPH4;
1000d888:	2307      	movs	r3, #7
1000d88a:	7403      	strb	r3, [r0, #16]
1000d88c:	f3bf 8f5f 	dmb	sy
	__dmb();
}
1000d890:	bd10      	pop	{r4, pc}
1000d892:	46c0      	nop			; (mov r8, r8)

1000d894 <_Z16ScreenSegmGraph1P5sSegmPKvhhi>:
//   bg = background color
//   fg = foreground color
//   wb = pitch - number of bytes between lines
// To scroll image, set virtual dimension wrapx and wrapy, then shift offx and offy.
void ScreenSegmGraph1(sSegm* segm, const void* data, u8 bg, u8 fg, int wb)
{
1000d894:	b510      	push	{r4, lr}
1000d896:	0014      	movs	r4, r2
	segm->form = GF_COLOR;
1000d898:	2200      	movs	r2, #0
1000d89a:	7402      	strb	r2, [r0, #16]
1000d89c:	f3bf 8f5f 	dmb	sy
	__dmb();
	segm->data = data;
	segm->par = bg | ((u32)fg << 8);
1000d8a0:	021a      	lsls	r2, r3, #8
	segm->wb = wb;
1000d8a2:	9b02      	ldr	r3, [sp, #8]
	segm->par = bg | ((u32)fg << 8);
1000d8a4:	4322      	orrs	r2, r4
	segm->data = data;
1000d8a6:	60c1      	str	r1, [r0, #12]
	segm->par = bg | ((u32)fg << 8);
1000d8a8:	6142      	str	r2, [r0, #20]
	segm->wb = wb;
1000d8aa:	8043      	strh	r3, [r0, #2]
1000d8ac:	f3bf 8f5f 	dmb	sy
	__dmb();
	segm->form = GF_GRAPH1;
1000d8b0:	2309      	movs	r3, #9
1000d8b2:	7403      	strb	r3, [r0, #16]
1000d8b4:	f3bf 8f5f 	dmb	sy
	__dmb();
}
1000d8b8:	bd10      	pop	{r4, pc}
1000d8ba:	46c0      	nop			; (mov r8, r8)

1000d8bc <_Z15ScreenSegmMTextP5sSegmPKvS2_thhi>:
//   fontheight = font height
//   bg = background color
//   fg = foreground color
//   wb = pitch - number of bytes between text lines
void ScreenSegmMText(sSegm* segm, const void* data, const void* font, u16 fontheight, u8 bg, u8 fg, int wb)
{
1000d8bc:	b570      	push	{r4, r5, r6, lr}
	segm->form = GF_COLOR;
1000d8be:	2600      	movs	r6, #0
{
1000d8c0:	ac04      	add	r4, sp, #16
1000d8c2:	7825      	ldrb	r5, [r4, #0]
1000d8c4:	ac05      	add	r4, sp, #20
1000d8c6:	7824      	ldrb	r4, [r4, #0]
	segm->form = GF_COLOR;
1000d8c8:	7406      	strb	r6, [r0, #16]
1000d8ca:	f3bf 8f5f 	dmb	sy
	__dmb();
	segm->data = data;
	segm->par = (u32)font;
1000d8ce:	6142      	str	r2, [r0, #20]
	segm->par2 = bg | ((u32)fg << 8);
	segm->par3 = fontheight;
1000d8d0:	8243      	strh	r3, [r0, #18]
	segm->par2 = bg | ((u32)fg << 8);
1000d8d2:	0222      	lsls	r2, r4, #8
	segm->wb = wb;
1000d8d4:	9b06      	ldr	r3, [sp, #24]
	segm->par2 = bg | ((u32)fg << 8);
1000d8d6:	432a      	orrs	r2, r5
	segm->data = data;
1000d8d8:	60c1      	str	r1, [r0, #12]
	segm->par2 = bg | ((u32)fg << 8);
1000d8da:	6182      	str	r2, [r0, #24]
	segm->wb = wb;
1000d8dc:	8043      	strh	r3, [r0, #2]
1000d8de:	f3bf 8f5f 	dmb	sy
	__dmb();
	segm->form = GF_MTEXT;
1000d8e2:	230a      	movs	r3, #10
1000d8e4:	7403      	strb	r3, [r0, #16]
1000d8e6:	f3bf 8f5f 	dmb	sy
	__dmb();
}
1000d8ea:	bd70      	pop	{r4, r5, r6, pc}

1000d8ec <_Z15ScreenSegmATextP5sSegmPKvS2_tS2_i>:
//   font = pointer to 1-bit font of 256 characters of width 8 (total width of image 2048 pixels)
//   fontheight = font height
//   pal = pointer to palette of 16 colors
//   wb = pitch - number of bytes between text lines
void ScreenSegmAText(sSegm* segm, const void* data, const void* font, u16 fontheight, const void* pal, int wb)
{
1000d8ec:	b510      	push	{r4, lr}
	segm->form = GF_COLOR;
1000d8ee:	2400      	movs	r4, #0
1000d8f0:	7404      	strb	r4, [r0, #16]
1000d8f2:	f3bf 8f5f 	dmb	sy
	__dmb();
	segm->data = data;
	segm->par = (u32)font;
1000d8f6:	6142      	str	r2, [r0, #20]
	segm->par2 = (u32)pal;
	segm->par3 = fontheight;
1000d8f8:	8243      	strh	r3, [r0, #18]
	segm->par2 = (u32)pal;
1000d8fa:	9a02      	ldr	r2, [sp, #8]
	segm->wb = wb;
1000d8fc:	9b03      	ldr	r3, [sp, #12]
	segm->data = data;
1000d8fe:	60c1      	str	r1, [r0, #12]
	segm->par2 = (u32)pal;
1000d900:	6182      	str	r2, [r0, #24]
	segm->wb = wb;
1000d902:	8043      	strh	r3, [r0, #2]
1000d904:	f3bf 8f5f 	dmb	sy
	__dmb();
	segm->form = GF_ATEXT;
1000d908:	230b      	movs	r3, #11
1000d90a:	7403      	strb	r3, [r0, #16]
1000d90c:	f3bf 8f5f 	dmb	sy
	__dmb();
}
1000d910:	bd10      	pop	{r4, pc}
1000d912:	46c0      	nop			; (mov r8, r8)

1000d914 <_Z14ScreenSegmTileP5sSegmPKvS2_iii>:
//   tiles = pointer to 1 column of tiles, 1 pixel = 8 bits
//   w = tile width (must be multiple of 4)
//   h = tile height
//   wb = pitch - number of bytes between tile map rows
void ScreenSegmTile(sSegm* segm, const void* data, const void* tiles, int w, int h, int wb)
{
1000d914:	b570      	push	{r4, r5, r6, lr}
1000d916:	0004      	movs	r4, r0
1000d918:	0008      	movs	r0, r1
1000d91a:	0019      	movs	r1, r3
	segm->form = GF_COLOR;
1000d91c:	2300      	movs	r3, #0
{
1000d91e:	9d04      	ldr	r5, [sp, #16]
	segm->form = GF_COLOR;
1000d920:	7423      	strb	r3, [r4, #16]
1000d922:	f3bf 8f5f 	dmb	sy
	__dmb();
	segm->data = data;
1000d926:	60e0      	str	r0, [r4, #12]
	segm->par = (u32)tiles;
	segm->par2 = (u32)h;
	segm->par3 = (u16)w;
	segm->wb = wb;
	segm->wrapx = (segm->width+w-1)/w*w;
1000d928:	8820      	ldrh	r0, [r4, #0]
	segm->wb = wb;
1000d92a:	9b05      	ldr	r3, [sp, #20]
	segm->par3 = (u16)w;
1000d92c:	b28e      	uxth	r6, r1
	segm->wrapx = (segm->width+w-1)/w*w;
1000d92e:	1840      	adds	r0, r0, r1
	segm->par = (u32)tiles;
1000d930:	6162      	str	r2, [r4, #20]
	segm->par2 = (u32)h;
1000d932:	61a5      	str	r5, [r4, #24]
	segm->wb = wb;
1000d934:	8063      	strh	r3, [r4, #2]
	segm->par3 = (u16)w;
1000d936:	8266      	strh	r6, [r4, #18]
	segm->wrapx = (segm->width+w-1)/w*w;
1000d938:	3801      	subs	r0, #1
1000d93a:	f7f2 fcef 	bl	1000031c <__wrap___aeabi_idiv>
1000d93e:	4370      	muls	r0, r6
1000d940:	8120      	strh	r0, [r4, #8]
	segm->wrapy = (segm->wrapy+h-1)/h*h;
1000d942:	8960      	ldrh	r0, [r4, #10]
1000d944:	0029      	movs	r1, r5
1000d946:	1940      	adds	r0, r0, r5
1000d948:	3801      	subs	r0, #1
1000d94a:	f7f2 fce7 	bl	1000031c <__wrap___aeabi_idiv>
1000d94e:	4345      	muls	r5, r0
1000d950:	8165      	strh	r5, [r4, #10]
1000d952:	f3bf 8f5f 	dmb	sy
	__dmb();
	segm->form = GF_TILE;
1000d956:	2302      	movs	r3, #2
1000d958:	7423      	strb	r3, [r4, #16]
1000d95a:	f3bf 8f5f 	dmb	sy
	__dmb();
}
1000d95e:	bd70      	pop	{r4, r5, r6, pc}

1000d960 <_Z6DecNumPcl>:
	return n;
}

// decode signed number into ASCIIZ text buffer (returns number of digits)
int DecNum(char* buf, s32 num)
{
1000d960:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d962:	46ce      	mov	lr, r9
1000d964:	4647      	mov	r7, r8
1000d966:	b580      	push	{r7, lr}
1000d968:	4681      	mov	r9, r0
1000d96a:	000c      	movs	r4, r1
1000d96c:	b085      	sub	sp, #20
	if (num >= 0) return DecUNum(buf, num);
1000d96e:	2900      	cmp	r1, #0
1000d970:	db21      	blt.n	1000d9b6 <_Z6DecNumPcl+0x56>
	*d = 0;
1000d972:	2200      	movs	r2, #0
	char* d = &b[10];
1000d974:	260e      	movs	r6, #14
	int n = 0;
1000d976:	2500      	movs	r5, #0
	*d = 0;
1000d978:	ab01      	add	r3, sp, #4
1000d97a:	729a      	strb	r2, [r3, #10]
	char* d = &b[10];
1000d97c:	446e      	add	r6, sp
		k = num / 10;
1000d97e:	210a      	movs	r1, #10
1000d980:	0020      	movs	r0, r4
1000d982:	f7f2 fcf7 	bl	10000374 <__wrap___aeabi_uidiv>
1000d986:	0027      	movs	r7, r4
		*d = (char)(num + '0');
1000d988:	210a      	movs	r1, #10
		k = num / 10;
1000d98a:	0004      	movs	r4, r0
		*d = (char)(num + '0');
1000d98c:	0038      	movs	r0, r7
1000d98e:	f7f2 fcf1 	bl	10000374 <__wrap___aeabi_uidiv>
		d--;
1000d992:	3e01      	subs	r6, #1
		*d = (char)(num + '0');
1000d994:	3130      	adds	r1, #48	; 0x30
1000d996:	002a      	movs	r2, r5
1000d998:	7031      	strb	r1, [r6, #0]
		n++;
1000d99a:	3501      	adds	r5, #1
	} while (num != 0);
1000d99c:	2f09      	cmp	r7, #9
1000d99e:	d8ee      	bhi.n	1000d97e <_Z6DecNumPcl+0x1e>
	memcpy(buf, d, n+1);
1000d9a0:	0031      	movs	r1, r6
1000d9a2:	4648      	mov	r0, r9
1000d9a4:	3202      	adds	r2, #2
1000d9a6:	f7f3 fba3 	bl	100010f0 <__wrap___aeabi_memcpy>

	num = -num;
	*buf++ = '-';
	return DecUNum(buf, num)+1;
}
1000d9aa:	0028      	movs	r0, r5
1000d9ac:	b005      	add	sp, #20
1000d9ae:	bcc0      	pop	{r6, r7}
1000d9b0:	46b9      	mov	r9, r7
1000d9b2:	46b0      	mov	r8, r6
1000d9b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*buf++ = '-';
1000d9b6:	2301      	movs	r3, #1
1000d9b8:	444b      	add	r3, r9
1000d9ba:	4698      	mov	r8, r3
1000d9bc:	232d      	movs	r3, #45	; 0x2d
	*d = 0;
1000d9be:	2200      	movs	r2, #0
	*buf++ = '-';
1000d9c0:	7003      	strb	r3, [r0, #0]
	*d = 0;
1000d9c2:	ab01      	add	r3, sp, #4
1000d9c4:	729a      	strb	r2, [r3, #10]
	char* d = &b[10];
1000d9c6:	230e      	movs	r3, #14
1000d9c8:	446b      	add	r3, sp
1000d9ca:	4699      	mov	r9, r3
1000d9cc:	001e      	movs	r6, r3
	num = -num;
1000d9ce:	424c      	negs	r4, r1
	int n = 0;
1000d9d0:	464b      	mov	r3, r9
		k = num / 10;
1000d9d2:	210a      	movs	r1, #10
1000d9d4:	0020      	movs	r0, r4
1000d9d6:	1b9d      	subs	r5, r3, r6
1000d9d8:	0027      	movs	r7, r4
1000d9da:	f7f2 fccb 	bl	10000374 <__wrap___aeabi_uidiv>
		*d = (char)(num + '0');
1000d9de:	210a      	movs	r1, #10
		k = num / 10;
1000d9e0:	0004      	movs	r4, r0
		*d = (char)(num + '0');
1000d9e2:	0038      	movs	r0, r7
1000d9e4:	f7f2 fcc6 	bl	10000374 <__wrap___aeabi_uidiv>
		d--;
1000d9e8:	3e01      	subs	r6, #1
		*d = (char)(num + '0');
1000d9ea:	3130      	adds	r1, #48	; 0x30
1000d9ec:	7031      	strb	r1, [r6, #0]
	} while (num != 0);
1000d9ee:	2f09      	cmp	r7, #9
1000d9f0:	d8ee      	bhi.n	1000d9d0 <_Z6DecNumPcl+0x70>
	memcpy(buf, d, n+1);
1000d9f2:	3502      	adds	r5, #2
1000d9f4:	002a      	movs	r2, r5
1000d9f6:	0031      	movs	r1, r6
1000d9f8:	4640      	mov	r0, r8
1000d9fa:	f7f3 fb79 	bl	100010f0 <__wrap___aeabi_memcpy>
	return DecUNum(buf, num)+1;
1000d9fe:	e7d4      	b.n	1000d9aa <_Z6DecNumPcl+0x4a>

1000da00 <_Z6VgaCfgPK7sVgaCfgP6sVmode>:

// calculate videomode setup
//   cfg ... required configuration
//   vmode ... destination videomode setup for driver
void VgaCfg(const sVgaCfg* cfg, sVmode* vmode)
{
1000da00:	b5f0      	push	{r4, r5, r6, r7, lr}
1000da02:	46de      	mov	lr, fp
1000da04:	4657      	mov	r7, sl
1000da06:	464e      	mov	r6, r9
1000da08:	4645      	mov	r5, r8
	int i;

	// prepare layer program, copy layer modes
	u8 prog = LAYERMODE_BASE;
	vmode->mode[0] = prog;
1000da0a:	2300      	movs	r3, #0
{
1000da0c:	b5e0      	push	{r5, r6, r7, lr}
	vmode->mode[0] = prog;
1000da0e:	764b      	strb	r3, [r1, #25]
	for (i = 1; i < LAYERS; i++)
	{
		if (cfg->mode[i] != LAYERMODE_BASE) prog = LayerMode[cfg->mode[i]].prog;
1000da10:	7d42      	ldrb	r2, [r0, #21]
{
1000da12:	4682      	mov	sl, r0
1000da14:	468b      	mov	fp, r1
1000da16:	b091      	sub	sp, #68	; 0x44
		if (cfg->mode[i] != LAYERMODE_BASE) prog = LayerMode[cfg->mode[i]].prog;
1000da18:	2a00      	cmp	r2, #0
1000da1a:	d100      	bne.n	1000da1e <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x1e>
1000da1c:	e290      	b.n	1000df40 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x540>
1000da1e:	4bdb      	ldr	r3, [pc, #876]	; (1000dd8c <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x38c>)
1000da20:	0051      	lsls	r1, r2, #1
1000da22:	1889      	adds	r1, r1, r2
1000da24:	5c59      	ldrb	r1, [r3, r1]
		vmode->mode[i] = cfg->mode[i];
1000da26:	4658      	mov	r0, fp
1000da28:	7682      	strb	r2, [r0, #26]
		if (cfg->mode[i] != LAYERMODE_BASE) prog = LayerMode[cfg->mode[i]].prog;
1000da2a:	4652      	mov	r2, sl
1000da2c:	7d92      	ldrb	r2, [r2, #22]
1000da2e:	2a00      	cmp	r2, #0
1000da30:	d002      	beq.n	1000da38 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x38>
1000da32:	0051      	lsls	r1, r2, #1
1000da34:	1889      	adds	r1, r1, r2
1000da36:	5c59      	ldrb	r1, [r3, r1]
		vmode->mode[i] = cfg->mode[i];
1000da38:	4658      	mov	r0, fp
1000da3a:	76c2      	strb	r2, [r0, #27]
		if (cfg->mode[i] != LAYERMODE_BASE) prog = LayerMode[cfg->mode[i]].prog;
1000da3c:	4652      	mov	r2, sl
1000da3e:	7dd2      	ldrb	r2, [r2, #23]
1000da40:	2a00      	cmp	r2, #0
1000da42:	d002      	beq.n	1000da4a <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x4a>
1000da44:	0051      	lsls	r1, r2, #1
1000da46:	1889      	adds	r1, r1, r2
1000da48:	5c59      	ldrb	r1, [r3, r1]
		vmode->mode[i] = cfg->mode[i];
1000da4a:	4658      	mov	r0, fp
1000da4c:	7702      	strb	r2, [r0, #28]
	}
	vmode->prog = prog;

	// prepare minimal and maximal clocks per pixel
	int mincpp = LayerMode[LAYERMODE_BASE].mincpp;
1000da4e:	785a      	ldrb	r2, [r3, #1]
	vmode->prog = prog;
1000da50:	7601      	strb	r1, [r0, #24]
	int mincpp = LayerMode[LAYERMODE_BASE].mincpp;
1000da52:	4694      	mov	ip, r2
	int maxcpp = LayerMode[LAYERMODE_BASE].maxcpp;
	int cpp;
	for (i = 1; i < LAYERS; i++)
	{
		cpp = LayerMode[cfg->mode[i]].mincpp;
1000da54:	4652      	mov	r2, sl
1000da56:	7d54      	ldrb	r4, [r2, #21]
1000da58:	7d96      	ldrb	r6, [r2, #22]
1000da5a:	0060      	lsls	r0, r4, #1
1000da5c:	0072      	lsls	r2, r6, #1
1000da5e:	1991      	adds	r1, r2, r6
1000da60:	1907      	adds	r7, r0, r4
1000da62:	1859      	adds	r1, r3, r1
1000da64:	19df      	adds	r7, r3, r7
1000da66:	787f      	ldrb	r7, [r7, #1]
1000da68:	7849      	ldrb	r1, [r1, #1]
	int maxcpp = LayerMode[LAYERMODE_BASE].maxcpp;
1000da6a:	789d      	ldrb	r5, [r3, #2]
		if (cpp > mincpp) mincpp = cpp;
1000da6c:	42b9      	cmp	r1, r7
1000da6e:	da00      	bge.n	1000da72 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x72>
1000da70:	0039      	movs	r1, r7
1000da72:	4561      	cmp	r1, ip
1000da74:	da00      	bge.n	1000da78 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x78>
1000da76:	4661      	mov	r1, ip
		cpp = LayerMode[cfg->mode[i]].maxcpp;
1000da78:	1992      	adds	r2, r2, r6
1000da7a:	1900      	adds	r0, r0, r4
1000da7c:	189a      	adds	r2, r3, r2
1000da7e:	1818      	adds	r0, r3, r0
1000da80:	7880      	ldrb	r0, [r0, #2]
1000da82:	7892      	ldrb	r2, [r2, #2]
1000da84:	4282      	cmp	r2, r0
1000da86:	dd00      	ble.n	1000da8a <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x8a>
1000da88:	0002      	movs	r2, r0
1000da8a:	42aa      	cmp	r2, r5
1000da8c:	dd00      	ble.n	1000da90 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x90>
1000da8e:	002a      	movs	r2, r5
		cpp = LayerMode[cfg->mode[i]].mincpp;
1000da90:	4650      	mov	r0, sl
1000da92:	7dc4      	ldrb	r4, [r0, #23]
1000da94:	0060      	lsls	r0, r4, #1
1000da96:	1905      	adds	r5, r0, r4
1000da98:	195d      	adds	r5, r3, r5
1000da9a:	786e      	ldrb	r6, [r5, #1]
1000da9c:	428e      	cmp	r6, r1
1000da9e:	da00      	bge.n	1000daa2 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0xa2>
1000daa0:	000e      	movs	r6, r1
		cpp = LayerMode[cfg->mode[i]].maxcpp;
1000daa2:	1900      	adds	r0, r0, r4
1000daa4:	181b      	adds	r3, r3, r0
1000daa6:	789c      	ldrb	r4, [r3, #2]
1000daa8:	4294      	cmp	r4, r2
1000daaa:	dd00      	ble.n	1000daae <_Z6VgaCfgPK7sVgaCfgP6sVmode+0xae>
1000daac:	0014      	movs	r4, r2
		if (cpp < maxcpp) maxcpp = cpp;
	}

	// prepare full width
	int w = cfg->width; // required width
1000daae:	4653      	mov	r3, sl
	int wfull = cfg->wfull;	// full width
1000dab0:	4652      	mov	r2, sl
	int w = cfg->width; // required width
1000dab2:	881b      	ldrh	r3, [r3, #0]
1000dab4:	9306      	str	r3, [sp, #24]
	int wfull = cfg->wfull;	// full width
1000dab6:	8897      	ldrh	r7, [r2, #4]
	if (wfull == 0) wfull = w; // use required width as 100% width
1000dab8:	2f00      	cmp	r7, #0
1000daba:	d100      	bne.n	1000dabe <_Z6VgaCfgPK7sVgaCfgP6sVmode+0xbe>
1000dabc:	001f      	movs	r7, r3

	// prepare maximal active time and maximal pixels
	const sVideo* v = cfg->video;
1000dabe:	4653      	mov	r3, sl
1000dac0:	689b      	ldr	r3, [r3, #8]
1000dac2:	4699      	mov	r9, r3
	float hmax = v->htot - v->hfront - v->hsync - v->hback;
1000dac4:	6859      	ldr	r1, [r3, #4]
1000dac6:	6818      	ldr	r0, [r3, #0]
1000dac8:	f7f3 fa73 	bl	10000fb2 <__wrap___aeabi_fsub>
1000dacc:	464b      	mov	r3, r9
1000dace:	6899      	ldr	r1, [r3, #8]
1000dad0:	f7f3 fa6f 	bl	10000fb2 <__wrap___aeabi_fsub>
1000dad4:	464b      	mov	r3, r9
1000dad6:	68d9      	ldr	r1, [r3, #12]
1000dad8:	f7f3 fa6b 	bl	10000fb2 <__wrap___aeabi_fsub>
	float hfull = v->hfull;
1000dadc:	464b      	mov	r3, r9
1000dade:	691b      	ldr	r3, [r3, #16]
	float hmax = v->htot - v->hfront - v->hsync - v->hback;
1000dae0:	9007      	str	r0, [sp, #28]
	int wmax = (int)(wfull*hmax/hfull + 0.001f);
1000dae2:	0038      	movs	r0, r7
	float hfull = v->hfull;
1000dae4:	4698      	mov	r8, r3
	int wmax = (int)(wfull*hmax/hfull + 0.001f);
1000dae6:	f7f3 fa79 	bl	10000fdc <__wrap___aeabi_i2f>

	// calculate cpp from required frequency (rounded down), limit minimal cpp
	u32 freq = cfg->freq;
1000daea:	4653      	mov	r3, sl
1000daec:	68dd      	ldr	r5, [r3, #12]
	int wmax = (int)(wfull*hmax/hfull + 0.001f);
1000daee:	9004      	str	r0, [sp, #16]
	u32 freq = cfg->freq;
1000daf0:	950e      	str	r5, [sp, #56]	; 0x38
	cpp = (int)(freq*hfull/1000/wfull + 0.1f);
	if (cpp < mincpp) cpp = mincpp;

	// recalculate frequency if not locked
	if (!cfg->lockfreq)
1000daf2:	7e5b      	ldrb	r3, [r3, #25]
1000daf4:	2b00      	cmp	r3, #0
1000daf6:	d130      	bne.n	1000db5a <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x15a>
	cpp = (int)(freq*hfull/1000/wfull + 0.1f);
1000daf8:	0028      	movs	r0, r5
1000dafa:	f7f3 fa69 	bl	10000fd0 <__wrap___aeabi_ui2f>
1000dafe:	4641      	mov	r1, r8
1000db00:	f7f3 fa60 	bl	10000fc4 <__wrap___aeabi_fmul>
1000db04:	49a2      	ldr	r1, [pc, #648]	; (1000dd90 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x390>)
1000db06:	f7f3 fa5a 	bl	10000fbe <__wrap___aeabi_fdiv>
1000db0a:	9904      	ldr	r1, [sp, #16]
1000db0c:	f7f3 fa57 	bl	10000fbe <__wrap___aeabi_fdiv>
1000db10:	49a0      	ldr	r1, [pc, #640]	; (1000dd94 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x394>)
1000db12:	f7f3 fa51 	bl	10000fb8 <__wrap___aeabi_fadd>
1000db16:	f7f3 fa83 	bl	10001020 <__wrap___aeabi_f2iz>
	{
		int freq2 = (int)(cpp*wfull*1000/hfull + 0.5f) + 200;
1000db1a:	4286      	cmp	r6, r0
1000db1c:	da00      	bge.n	1000db20 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x120>
1000db1e:	e240      	b.n	1000dfa2 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x5a2>
1000db20:	437e      	muls	r6, r7
1000db22:	0170      	lsls	r0, r6, #5
1000db24:	1b80      	subs	r0, r0, r6
1000db26:	0080      	lsls	r0, r0, #2
1000db28:	1980      	adds	r0, r0, r6
1000db2a:	00c0      	lsls	r0, r0, #3
1000db2c:	f7f3 fa56 	bl	10000fdc <__wrap___aeabi_i2f>
1000db30:	4641      	mov	r1, r8
1000db32:	f7f3 fa44 	bl	10000fbe <__wrap___aeabi_fdiv>
1000db36:	21fc      	movs	r1, #252	; 0xfc
1000db38:	0589      	lsls	r1, r1, #22
1000db3a:	f7f3 fa3d 	bl	10000fb8 <__wrap___aeabi_fadd>
1000db3e:	f7f3 fa6f 	bl	10001020 <__wrap___aeabi_f2iz>
1000db42:	30c8      	adds	r0, #200	; 0xc8
		if (freq2 < freq)
1000db44:	4285      	cmp	r5, r0
1000db46:	d900      	bls.n	1000db4a <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x14a>
1000db48:	e215      	b.n	1000df76 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x576>
		{
			cpp++;
			freq2 = (int)(cpp*wfull*1000/hfull + 0.5f) + 200;
		}
		if (freq2 >= freq) freq = freq2;
1000db4a:	0005      	movs	r5, r0
1000db4c:	900e      	str	r0, [sp, #56]	; 0x38
		if (freq > cfg->fmax) freq = cfg->fmax;
1000db4e:	4653      	mov	r3, sl
1000db50:	691b      	ldr	r3, [r3, #16]
1000db52:	42ab      	cmp	r3, r5
1000db54:	d201      	bcs.n	1000db5a <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x15a>
1000db56:	001d      	movs	r5, r3
1000db58:	930e      	str	r3, [sp, #56]	; 0x38

	// find sysclock setup (use set_sys_clock_pll to set sysclock)
	u32 vco;
	u16 fbdiv;
	u8 pd1, pd2;
	FindSysClock(freq, &freq, &vco, &fbdiv, &pd1, &pd2);
1000db5a:	ab0a      	add	r3, sp, #40	; 0x28
1000db5c:	469c      	mov	ip, r3
1000db5e:	260e      	movs	r6, #14
1000db60:	230d      	movs	r3, #13
1000db62:	4466      	add	r6, ip
1000db64:	4463      	add	r3, ip
1000db66:	af0d      	add	r7, sp, #52	; 0x34
1000db68:	a90e      	add	r1, sp, #56	; 0x38
1000db6a:	0028      	movs	r0, r5
1000db6c:	9301      	str	r3, [sp, #4]
1000db6e:	aa0f      	add	r2, sp, #60	; 0x3c
1000db70:	0033      	movs	r3, r6
1000db72:	9700      	str	r7, [sp, #0]
1000db74:	f001 fc50 	bl	1000f418 <_Z12FindSysClockmPmS_PtPhS1_>

	vmode->freq = freq;
1000db78:	465b      	mov	r3, fp
1000db7a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
	vmode->fbdiv = fbdiv;
	vmode->pd1 = pd1;
	vmode->pd2 = pd2;

	// calculate divisor
	cpp = (int)(freq*hfull/1000/wfull + 0.2f);
1000db7c:	980e      	ldr	r0, [sp, #56]	; 0x38
	vmode->freq = freq;
1000db7e:	609a      	str	r2, [r3, #8]
	vmode->vco = vco;
1000db80:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
1000db82:	60da      	str	r2, [r3, #12]
	vmode->fbdiv = fbdiv;
1000db84:	465a      	mov	r2, fp
1000db86:	8833      	ldrh	r3, [r6, #0]
1000db88:	8213      	strh	r3, [r2, #16]
	vmode->pd1 = pd1;
1000db8a:	783b      	ldrb	r3, [r7, #0]
1000db8c:	7493      	strb	r3, [r2, #18]
	vmode->pd2 = pd2;
1000db8e:	ab0a      	add	r3, sp, #40	; 0x28
1000db90:	7b5b      	ldrb	r3, [r3, #13]
1000db92:	74d3      	strb	r3, [r2, #19]
	cpp = (int)(freq*hfull/1000/wfull + 0.2f);
1000db94:	f7f3 fa1c 	bl	10000fd0 <__wrap___aeabi_ui2f>
1000db98:	4641      	mov	r1, r8
1000db9a:	9003      	str	r0, [sp, #12]
1000db9c:	f7f3 fa12 	bl	10000fc4 <__wrap___aeabi_fmul>
1000dba0:	497b      	ldr	r1, [pc, #492]	; (1000dd90 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x390>)
1000dba2:	f7f3 fa0c 	bl	10000fbe <__wrap___aeabi_fdiv>
1000dba6:	9904      	ldr	r1, [sp, #16]
1000dba8:	9005      	str	r0, [sp, #20]
1000dbaa:	f7f3 fa08 	bl	10000fbe <__wrap___aeabi_fdiv>
1000dbae:	497a      	ldr	r1, [pc, #488]	; (1000dd98 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x398>)
1000dbb0:	4680      	mov	r8, r0
1000dbb2:	f7f3 fa01 	bl	10000fb8 <__wrap___aeabi_fadd>
1000dbb6:	f7f3 fa33 	bl	10001020 <__wrap___aeabi_f2iz>
1000dbba:	0005      	movs	r5, r0
	int div = 1;
	while (cpp > maxcpp)
1000dbbc:	4284      	cmp	r4, r0
1000dbbe:	db00      	blt.n	1000dbc2 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x1c2>
1000dbc0:	e20c      	b.n	1000dfdc <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x5dc>
	int div = 1;
1000dbc2:	2701      	movs	r7, #1
1000dbc4:	4645      	mov	r5, r8
	{
		div++;
1000dbc6:	3701      	adds	r7, #1
		cpp = (int)(freq*hfull/1000/wfull/div + 0.2f);
1000dbc8:	0038      	movs	r0, r7
1000dbca:	f7f3 fa07 	bl	10000fdc <__wrap___aeabi_i2f>
1000dbce:	1c01      	adds	r1, r0, #0
1000dbd0:	1c06      	adds	r6, r0, #0
1000dbd2:	1c28      	adds	r0, r5, #0
1000dbd4:	f7f3 f9f3 	bl	10000fbe <__wrap___aeabi_fdiv>
1000dbd8:	496f      	ldr	r1, [pc, #444]	; (1000dd98 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x398>)
1000dbda:	f7f3 f9ed 	bl	10000fb8 <__wrap___aeabi_fadd>
1000dbde:	f7f3 fa1f 	bl	10001020 <__wrap___aeabi_f2iz>
	while (cpp > maxcpp)
1000dbe2:	4284      	cmp	r4, r0
1000dbe4:	dbef      	blt.n	1000dbc6 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x1c6>
	}

	vmode->div = div;
1000dbe6:	0005      	movs	r5, r0
	vmode->vback2 = v->vback2 - dh/2; // V back porch (after VSYNC, before image) on subframe 2
	vmode->vfront2 = v->vfront2 - ((dh < 0) ? (dh-1)/2 : (dh+1)/2); // V front porch (after image, before VSYNC) on subframe 2
	vmode->vpre2 = v->vpre2; // V sync pre half-pulses on subframe 2

	// frequency
	vmode->hfreq = vmode->freq * 1000.0f / vmode->div / vmode->htot;
1000dbe8:	0438      	lsls	r0, r7, #16
1000dbea:	0c00      	lsrs	r0, r0, #16
1000dbec:	f7f3 f9f6 	bl	10000fdc <__wrap___aeabi_i2f>
	vmode->div = div;
1000dbf0:	b2bc      	uxth	r4, r7
	vmode->hfreq = vmode->freq * 1000.0f / vmode->div / vmode->htot;
1000dbf2:	9008      	str	r0, [sp, #32]
	vmode->div = div;
1000dbf4:	465b      	mov	r3, fp
	wfull = (int)(freq*hfull/1000/cpp/div + 0.4f);
1000dbf6:	0028      	movs	r0, r5
	vmode->div = div;
1000dbf8:	829c      	strh	r4, [r3, #20]
	vmode->cpp = cpp;
1000dbfa:	82dd      	strh	r5, [r3, #22]
	wfull = (int)(freq*hfull/1000/cpp/div + 0.4f);
1000dbfc:	f7f3 f9ee 	bl	10000fdc <__wrap___aeabi_i2f>
	wmax = (int)(freq*hmax/1000/cpp/div + 0.4f);
1000dc00:	9907      	ldr	r1, [sp, #28]
	wfull = (int)(freq*hfull/1000/cpp/div + 0.4f);
1000dc02:	1c04      	adds	r4, r0, #0
	wmax = (int)(freq*hmax/1000/cpp/div + 0.4f);
1000dc04:	9803      	ldr	r0, [sp, #12]
1000dc06:	f7f3 f9dd 	bl	10000fc4 <__wrap___aeabi_fmul>
1000dc0a:	4961      	ldr	r1, [pc, #388]	; (1000dd90 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x390>)
1000dc0c:	f7f3 f9d7 	bl	10000fbe <__wrap___aeabi_fdiv>
1000dc10:	1c21      	adds	r1, r4, #0
1000dc12:	f7f3 f9d4 	bl	10000fbe <__wrap___aeabi_fdiv>
1000dc16:	1c31      	adds	r1, r6, #0
1000dc18:	f7f3 f9d1 	bl	10000fbe <__wrap___aeabi_fdiv>
1000dc1c:	495f      	ldr	r1, [pc, #380]	; (1000dd9c <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x39c>)
1000dc1e:	f7f3 f9cb 	bl	10000fb8 <__wrap___aeabi_fadd>
1000dc22:	f7f3 f9fd 	bl	10001020 <__wrap___aeabi_f2iz>
1000dc26:	0007      	movs	r7, r0
	if (w > wmax) w = wmax;
1000dc28:	9806      	ldr	r0, [sp, #24]
1000dc2a:	42b8      	cmp	r0, r7
1000dc2c:	dd00      	ble.n	1000dc30 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x230>
1000dc2e:	0038      	movs	r0, r7
	w = ALIGN4(w);
1000dc30:	2303      	movs	r3, #3
1000dc32:	4398      	bics	r0, r3
	vmode->width = w; // active width
1000dc34:	465b      	mov	r3, fp
	wfull = (int)(freq*hfull/1000/cpp/div + 0.4f);
1000dc36:	1c21      	adds	r1, r4, #0
	vmode->width = w; // active width
1000dc38:	8018      	strh	r0, [r3, #0]
	w = ALIGN4(w);
1000dc3a:	4680      	mov	r8, r0
	wfull = (int)(freq*hfull/1000/cpp/div + 0.4f);
1000dc3c:	9805      	ldr	r0, [sp, #20]
1000dc3e:	f7f3 f9be 	bl	10000fbe <__wrap___aeabi_fdiv>
1000dc42:	1c31      	adds	r1, r6, #0
1000dc44:	f7f3 f9bb 	bl	10000fbe <__wrap___aeabi_fdiv>
1000dc48:	4954      	ldr	r1, [pc, #336]	; (1000dd9c <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x39c>)
1000dc4a:	f7f3 f9b5 	bl	10000fb8 <__wrap___aeabi_fadd>
1000dc4e:	f7f3 f9e7 	bl	10001020 <__wrap___aeabi_f2iz>
	vmode->wfull = wfull; // width of full screen (image should be full visible)
1000dc52:	465b      	mov	r3, fp
1000dc54:	8098      	strh	r0, [r3, #4]
	vmode->wmax = wmax; // maximal width (can be > wfull)
1000dc56:	80df      	strh	r7, [r3, #6]
	int hwidth = w*cpp; // active width in state machine clocks
1000dc58:	4643      	mov	r3, r8
1000dc5a:	435d      	muls	r5, r3
	int htot = (int)(freq*v->htot/1000/div + 0.5f);  // total state machine clocks per line
1000dc5c:	464b      	mov	r3, r9
1000dc5e:	9f03      	ldr	r7, [sp, #12]
1000dc60:	6819      	ldr	r1, [r3, #0]
1000dc62:	1c38      	adds	r0, r7, #0
1000dc64:	f7f3 f9ae 	bl	10000fc4 <__wrap___aeabi_fmul>
1000dc68:	4949      	ldr	r1, [pc, #292]	; (1000dd90 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x390>)
1000dc6a:	f7f3 f9a8 	bl	10000fbe <__wrap___aeabi_fdiv>
1000dc6e:	1c31      	adds	r1, r6, #0
1000dc70:	f7f3 f9a5 	bl	10000fbe <__wrap___aeabi_fdiv>
1000dc74:	21fc      	movs	r1, #252	; 0xfc
1000dc76:	0589      	lsls	r1, r1, #22
1000dc78:	f7f3 f99e 	bl	10000fb8 <__wrap___aeabi_fadd>
1000dc7c:	f7f3 f9d0 	bl	10001020 <__wrap___aeabi_f2iz>
	int hsync = (int)(freq*v->hsync/1000/div + 0.5f); // H sync pulse in state machine clocks (min. 4)
1000dc80:	464b      	mov	r3, r9
	int htot = (int)(freq*v->htot/1000/div + 0.5f);  // total state machine clocks per line
1000dc82:	0004      	movs	r4, r0
	int hsync = (int)(freq*v->hsync/1000/div + 0.5f); // H sync pulse in state machine clocks (min. 4)
1000dc84:	6899      	ldr	r1, [r3, #8]
1000dc86:	1c38      	adds	r0, r7, #0
1000dc88:	f7f3 f99c 	bl	10000fc4 <__wrap___aeabi_fmul>
1000dc8c:	4940      	ldr	r1, [pc, #256]	; (1000dd90 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x390>)
1000dc8e:	f7f3 f996 	bl	10000fbe <__wrap___aeabi_fdiv>
1000dc92:	1c31      	adds	r1, r6, #0
1000dc94:	f7f3 f993 	bl	10000fbe <__wrap___aeabi_fdiv>
1000dc98:	21fc      	movs	r1, #252	; 0xfc
1000dc9a:	0589      	lsls	r1, r1, #22
1000dc9c:	f7f3 f98c 	bl	10000fb8 <__wrap___aeabi_fadd>
1000dca0:	f7f3 f9be 	bl	10001020 <__wrap___aeabi_f2iz>
1000dca4:	0007      	movs	r7, r0
	if (hsync < 4)
1000dca6:	2803      	cmp	r0, #3
1000dca8:	dc00      	bgt.n	1000dcac <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x2ac>
1000dcaa:	e143      	b.n	1000df34 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x534>
	vmode->hsync = (u16)hsync; // H sync pulse in state machine clocks (min. 4)
1000dcac:	b283      	uxth	r3, r0
1000dcae:	9304      	str	r3, [sp, #16]
	int hfront = (int)(freq*v->hfront/1000/div + 0.5f); // H front porch in state machine clocks (min. 2)
1000dcb0:	464b      	mov	r3, r9
1000dcb2:	9803      	ldr	r0, [sp, #12]
1000dcb4:	6859      	ldr	r1, [r3, #4]
1000dcb6:	f7f3 f985 	bl	10000fc4 <__wrap___aeabi_fmul>
1000dcba:	4935      	ldr	r1, [pc, #212]	; (1000dd90 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x390>)
1000dcbc:	f7f3 f97f 	bl	10000fbe <__wrap___aeabi_fdiv>
1000dcc0:	1c31      	adds	r1, r6, #0
1000dcc2:	f7f3 f97c 	bl	10000fbe <__wrap___aeabi_fdiv>
1000dcc6:	21fc      	movs	r1, #252	; 0xfc
1000dcc8:	0589      	lsls	r1, r1, #22
1000dcca:	f7f3 f975 	bl	10000fb8 <__wrap___aeabi_fadd>
1000dcce:	f7f3 f9a7 	bl	10001020 <__wrap___aeabi_f2iz>
	int hback = (int)(freq*v->hback/1000/div + 0.5f); // H back porch in state machine clocks (min. 13)
1000dcd2:	464b      	mov	r3, r9
	int hfront = (int)(freq*v->hfront/1000/div + 0.5f); // H front porch in state machine clocks (min. 2)
1000dcd4:	4680      	mov	r8, r0
	int hback = (int)(freq*v->hback/1000/div + 0.5f); // H back porch in state machine clocks (min. 13)
1000dcd6:	68d9      	ldr	r1, [r3, #12]
1000dcd8:	9803      	ldr	r0, [sp, #12]
1000dcda:	f7f3 f973 	bl	10000fc4 <__wrap___aeabi_fmul>
1000dcde:	492c      	ldr	r1, [pc, #176]	; (1000dd90 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x390>)
1000dce0:	f7f3 f96d 	bl	10000fbe <__wrap___aeabi_fdiv>
1000dce4:	1c31      	adds	r1, r6, #0
1000dce6:	f7f3 f96a 	bl	10000fbe <__wrap___aeabi_fdiv>
1000dcea:	21fc      	movs	r1, #252	; 0xfc
1000dcec:	0589      	lsls	r1, r1, #22
1000dcee:	f7f3 f963 	bl	10000fb8 <__wrap___aeabi_fadd>
1000dcf2:	f7f3 f995 	bl	10001020 <__wrap___aeabi_f2iz>
	int d = htot - hfront - hsync - hback - hwidth; // difference
1000dcf6:	4643      	mov	r3, r8
1000dcf8:	1ae2      	subs	r2, r4, r3
1000dcfa:	1bd2      	subs	r2, r2, r7
1000dcfc:	1a12      	subs	r2, r2, r0
1000dcfe:	1b52      	subs	r2, r2, r5
	hfront += d/2;
1000dd00:	0fd3      	lsrs	r3, r2, #31
1000dd02:	189b      	adds	r3, r3, r2
1000dd04:	1059      	asrs	r1, r3, #1
1000dd06:	4441      	add	r1, r8
	hback += (d < 0) ? (d-1)/2 : (d+1)/2;
1000dd08:	2a00      	cmp	r2, #0
1000dd0a:	da00      	bge.n	1000dd0e <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x30e>
1000dd0c:	e161      	b.n	1000dfd2 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x5d2>
1000dd0e:	3201      	adds	r2, #1
1000dd10:	1053      	asrs	r3, r2, #1
1000dd12:	181b      	adds	r3, r3, r0
	if (hfront < 4)
1000dd14:	2903      	cmp	r1, #3
1000dd16:	dc02      	bgt.n	1000dd1e <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x31e>
		hback -= 4 - hfront;
1000dd18:	18cb      	adds	r3, r1, r3
		hfront = 4;
1000dd1a:	2104      	movs	r1, #4
		hback -= 4 - hfront;
1000dd1c:	3b04      	subs	r3, #4
	if (hback < 13)
1000dd1e:	2b0c      	cmp	r3, #12
1000dd20:	dc00      	bgt.n	1000dd24 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x324>
1000dd22:	e100      	b.n	1000df26 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x526>
	vmode->hback = (u16)hback; // H back porch in state machine clocks (min. 13)
1000dd24:	b29a      	uxth	r2, r3
	htot = hfront + hsync + hback + hwidth; // total state machine clocks per line
1000dd26:	187f      	adds	r7, r7, r1
1000dd28:	18fb      	adds	r3, r7, r3
	if (v->inter && ((htot & 1) != 0))
1000dd2a:	4648      	mov	r0, r9
	htot = hfront + hsync + hback + hwidth; // total state machine clocks per line
1000dd2c:	195d      	adds	r5, r3, r5
	if (v->inter && ((htot & 1) != 0))
1000dd2e:	2334      	movs	r3, #52	; 0x34
1000dd30:	5cc0      	ldrb	r0, [r0, r3]
1000dd32:	2800      	cmp	r0, #0
1000dd34:	d002      	beq.n	1000dd3c <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x33c>
1000dd36:	07eb      	lsls	r3, r5, #31
1000dd38:	d500      	bpl.n	1000dd3c <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x33c>
1000dd3a:	e119      	b.n	1000df70 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x570>
	vmode->htot = (u16)htot; // total state machine clocks per line
1000dd3c:	465b      	mov	r3, fp
	vmode->hfront = (u16)hfront; // H front porch in state machine clocks (min. 2)
1000dd3e:	8419      	strh	r1, [r3, #32]
	vmode->hback = (u16)hback; // H back porch in state machine clocks (min. 13)
1000dd40:	849a      	strh	r2, [r3, #36]	; 0x24
	vmode->hsync = (u16)hsync; // H sync pulse in state machine clocks (min. 4)
1000dd42:	9904      	ldr	r1, [sp, #16]
	if (cfg->dbly) h *= 2; // use double lines
1000dd44:	4652      	mov	r2, sl
	vmode->htot = (u16)htot; // total state machine clocks per line
1000dd46:	83dd      	strh	r5, [r3, #30]
	vmode->hsync = (u16)hsync; // H sync pulse in state machine clocks (min. 4)
1000dd48:	8459      	strh	r1, [r3, #34]	; 0x22
	int h = cfg->height; // required height
1000dd4a:	4653      	mov	r3, sl
	if (cfg->dbly) h *= 2; // use double lines
1000dd4c:	7e14      	ldrb	r4, [r2, #24]
	int h = cfg->height; // required height
1000dd4e:	885b      	ldrh	r3, [r3, #2]
	if (cfg->dbly) h *= 2; // use double lines
1000dd50:	2c00      	cmp	r4, #0
1000dd52:	d025      	beq.n	1000dda0 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x3a0>
	vmode->vmax = v->vmax; // maximal height
1000dd54:	464a      	mov	r2, r9
1000dd56:	8ad1      	ldrh	r1, [r2, #22]
1000dd58:	465a      	mov	r2, fp
	if (cfg->dbly) h *= 2; // use double lines
1000dd5a:	005b      	lsls	r3, r3, #1
	vmode->vmax = v->vmax; // maximal height
1000dd5c:	85d1      	strh	r1, [r2, #46]	; 0x2e
	if (h > v->vmax) h = v->vmax; // limit height
1000dd5e:	4299      	cmp	r1, r3
1000dd60:	dd00      	ble.n	1000dd64 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x364>
1000dd62:	e0fe      	b.n	1000df62 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x562>
	if (cfg->dbly) h &= ~1; // must be even number if double lines
1000dd64:	2301      	movs	r3, #1
1000dd66:	4399      	bics	r1, r3
	if (v->inter) // interlaced
1000dd68:	2800      	cmp	r0, #0
1000dd6a:	d100      	bne.n	1000dd6e <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x36e>
1000dd6c:	e0f0      	b.n	1000df50 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x550>
		if (v->odd) // first frame is odd lines
1000dd6e:	2336      	movs	r3, #54	; 0x36
1000dd70:	464a      	mov	r2, r9
1000dd72:	5cd3      	ldrb	r3, [r2, r3]
1000dd74:	2b00      	cmp	r3, #0
1000dd76:	d100      	bne.n	1000dd7a <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x37a>
1000dd78:	e0ee      	b.n	1000df58 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x558>
			vact1 = h/2;
1000dd7a:	104a      	asrs	r2, r1, #1
			vact2 = (h+1)/2; // if even lines, even frame will have more lines
1000dd7c:	0016      	movs	r6, r2
1000dd7e:	1c4b      	adds	r3, r1, #1
1000dd80:	105b      	asrs	r3, r3, #1
	vmode->vact2 = vact2; // active scanlines of 2nd subframe
1000dd82:	b298      	uxth	r0, r3
	if (cfg->dbly) h /= 2; // return double lines to single lines
1000dd84:	2c00      	cmp	r4, #0
1000dd86:	d016      	beq.n	1000ddb6 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x3b6>
	vmode->vact2 = vact2; // active scanlines of 2nd subframe
1000dd88:	0031      	movs	r1, r6
	if (cfg->dbly) h /= 2; // return double lines to single lines
1000dd8a:	e014      	b.n	1000ddb6 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x3b6>
1000dd8c:	1002bab8 	.word	0x1002bab8
1000dd90:	447a0000 	.word	0x447a0000
1000dd94:	3dcccccd 	.word	0x3dcccccd
1000dd98:	3e4ccccd 	.word	0x3e4ccccd
1000dd9c:	3ecccccd 	.word	0x3ecccccd
	vmode->vmax = v->vmax; // maximal height
1000dda0:	464a      	mov	r2, r9
1000dda2:	8ad1      	ldrh	r1, [r2, #22]
1000dda4:	465a      	mov	r2, fp
1000dda6:	85d1      	strh	r1, [r2, #46]	; 0x2e
	if (h > v->vmax) h = v->vmax; // limit height
1000dda8:	4299      	cmp	r1, r3
1000ddaa:	dd00      	ble.n	1000ddae <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x3ae>
1000ddac:	e0cb      	b.n	1000df46 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x546>
	if (v->inter) // interlaced
1000ddae:	2800      	cmp	r0, #0
1000ddb0:	d1dd      	bne.n	1000dd6e <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x36e>
1000ddb2:	000a      	movs	r2, r1
	int vact2 = 0;
1000ddb4:	2300      	movs	r3, #0
	vmode->height = h;
1000ddb6:	465c      	mov	r4, fp
1000ddb8:	8061      	strh	r1, [r4, #2]
	vmode->vtot = v->vtot; // total scanlines
1000ddba:	4649      	mov	r1, r9
1000ddbc:	8a8e      	ldrh	r6, [r1, #20]
	vmode->vact1 = vact1; // active scanlines of 1st subframe
1000ddbe:	b291      	uxth	r1, r2
1000ddc0:	8761      	strh	r1, [r4, #58]	; 0x3a
1000ddc2:	9105      	str	r1, [sp, #20]
	int dh = vact1 - v->vact1; // difference
1000ddc4:	4649      	mov	r1, r9
	vmode->vtot = v->vtot; // total scanlines
1000ddc6:	85a6      	strh	r6, [r4, #44]	; 0x2c
	int dh = vact1 - v->vact1; // difference
1000ddc8:	8bc9      	ldrh	r1, [r1, #30]
1000ddca:	1a52      	subs	r2, r2, r1
	vmode->vsync1 = v->vsync1; // V sync (half-)pulses on subframe 1
1000ddcc:	4649      	mov	r1, r9
1000ddce:	8b09      	ldrh	r1, [r1, #24]
1000ddd0:	86a1      	strh	r1, [r4, #52]	; 0x34
1000ddd2:	9104      	str	r1, [sp, #16]
	vmode->vpost1 = v->vpost1; // V sync post (half-)pulses on subframe 1
1000ddd4:	4649      	mov	r1, r9
1000ddd6:	8b49      	ldrh	r1, [r1, #26]
1000ddd8:	86e1      	strh	r1, [r4, #54]	; 0x36
	vmode->vback1 = v->vback1 - dh/2; // V back porch (after VSYNC, before image) on subframe 1
1000ddda:	464c      	mov	r4, r9
	vmode->vpost1 = v->vpost1; // V sync post (half-)pulses on subframe 1
1000dddc:	9106      	str	r1, [sp, #24]
	vmode->vback1 = v->vback1 - dh/2; // V back porch (after VSYNC, before image) on subframe 1
1000ddde:	0fd1      	lsrs	r1, r2, #31
1000dde0:	8ba4      	ldrh	r4, [r4, #28]
1000dde2:	1889      	adds	r1, r1, r2
1000dde4:	1049      	asrs	r1, r1, #1
1000dde6:	1a61      	subs	r1, r4, r1
1000dde8:	b28f      	uxth	r7, r1
1000ddea:	4659      	mov	r1, fp
1000ddec:	870f      	strh	r7, [r1, #56]	; 0x38
	vmode->vfront1 = v->vfront1 - ((dh < 0) ? (dh-1)/2 : (dh+1)/2); // V front porch (after image, before VSYNC) on subframe 1
1000ddee:	4649      	mov	r1, r9
1000ddf0:	8c09      	ldrh	r1, [r1, #32]
1000ddf2:	2a00      	cmp	r2, #0
1000ddf4:	da00      	bge.n	1000ddf8 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x3f8>
1000ddf6:	e0e6      	b.n	1000dfc6 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x5c6>
1000ddf8:	3201      	adds	r2, #1
1000ddfa:	1052      	asrs	r2, r2, #1
1000ddfc:	b292      	uxth	r2, r2
1000ddfe:	1a8a      	subs	r2, r1, r2
1000de00:	4659      	mov	r1, fp
1000de02:	b292      	uxth	r2, r2
1000de04:	878a      	strh	r2, [r1, #60]	; 0x3c
1000de06:	9207      	str	r2, [sp, #28]
	vmode->vpre1 = v->vpre1; // V sync pre (half-)pulses on subframe 1
1000de08:	464a      	mov	r2, r9
1000de0a:	8c52      	ldrh	r2, [r2, #34]	; 0x22
1000de0c:	87ca      	strh	r2, [r1, #62]	; 0x3e
1000de0e:	9209      	str	r2, [sp, #36]	; 0x24
	vmode->vact2 = vact2; // active scanlines of 2nd subframe
1000de10:	2248      	movs	r2, #72	; 0x48
1000de12:	5288      	strh	r0, [r1, r2]
	dh = vact2 - v->vact2; // difference
1000de14:	464a      	mov	r2, r9
1000de16:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
	vmode->vsync2 = v->vsync2; // V sync half-pulses on subframe 2
1000de18:	4658      	mov	r0, fp
	dh = vact2 - v->vact2; // difference
1000de1a:	1a9b      	subs	r3, r3, r2
	vmode->vsync2 = v->vsync2; // V sync half-pulses on subframe 2
1000de1c:	464a      	mov	r2, r9
1000de1e:	8c92      	ldrh	r2, [r2, #36]	; 0x24
1000de20:	920a      	str	r2, [sp, #40]	; 0x28
1000de22:	0011      	movs	r1, r2
1000de24:	2242      	movs	r2, #66	; 0x42
1000de26:	5281      	strh	r1, [r0, r2]
	vmode->vpost2 = v->vpost2; // V sync post half-pulses on subframe 2
1000de28:	464a      	mov	r2, r9
1000de2a:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
1000de2c:	0011      	movs	r1, r2
1000de2e:	920b      	str	r2, [sp, #44]	; 0x2c
1000de30:	2244      	movs	r2, #68	; 0x44
1000de32:	5281      	strh	r1, [r0, r2]
	vmode->vback2 = v->vback2 - dh/2; // V back porch (after VSYNC, before image) on subframe 2
1000de34:	4649      	mov	r1, r9
1000de36:	0fda      	lsrs	r2, r3, #31
1000de38:	8d0c      	ldrh	r4, [r1, #40]	; 0x28
1000de3a:	18d2      	adds	r2, r2, r3
1000de3c:	1052      	asrs	r2, r2, #1
1000de3e:	1aa4      	subs	r4, r4, r2
1000de40:	2246      	movs	r2, #70	; 0x46
1000de42:	b2a4      	uxth	r4, r4
1000de44:	5284      	strh	r4, [r0, r2]
	vmode->vfront2 = v->vfront2 - ((dh < 0) ? (dh-1)/2 : (dh+1)/2); // V front porch (after image, before VSYNC) on subframe 2
1000de46:	8d8a      	ldrh	r2, [r1, #44]	; 0x2c
1000de48:	2b00      	cmp	r3, #0
1000de4a:	da00      	bge.n	1000de4e <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x44e>
1000de4c:	e0b5      	b.n	1000dfba <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x5ba>
1000de4e:	3301      	adds	r3, #1
1000de50:	105b      	asrs	r3, r3, #1
1000de52:	b29b      	uxth	r3, r3
1000de54:	4659      	mov	r1, fp
1000de56:	1ad3      	subs	r3, r2, r3
1000de58:	224a      	movs	r2, #74	; 0x4a
1000de5a:	528b      	strh	r3, [r1, r2]
	vmode->vpre2 = v->vpre2; // V sync pre half-pulses on subframe 2
1000de5c:	464b      	mov	r3, r9
1000de5e:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
1000de60:	234c      	movs	r3, #76	; 0x4c
	vmode->hfreq = vmode->freq * 1000.0f / vmode->div / vmode->htot;
1000de62:	9803      	ldr	r0, [sp, #12]
	vmode->vpre2 = v->vpre2; // V sync pre half-pulses on subframe 2
1000de64:	52ca      	strh	r2, [r1, r3]
	vmode->hfreq = vmode->freq * 1000.0f / vmode->div / vmode->htot;
1000de66:	4960      	ldr	r1, [pc, #384]	; (1000dfe8 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x5e8>)
1000de68:	f7f3 f8ac 	bl	10000fc4 <__wrap___aeabi_fmul>
1000de6c:	9908      	ldr	r1, [sp, #32]
1000de6e:	f7f3 f8a6 	bl	10000fbe <__wrap___aeabi_fdiv>
1000de72:	042d      	lsls	r5, r5, #16
1000de74:	4680      	mov	r8, r0
1000de76:	0c28      	lsrs	r0, r5, #16
1000de78:	f7f3 f8b0 	bl	10000fdc <__wrap___aeabi_i2f>
1000de7c:	1c01      	adds	r1, r0, #0
1000de7e:	4640      	mov	r0, r8
1000de80:	f7f3 f89d 	bl	10000fbe <__wrap___aeabi_fdiv>
1000de84:	465b      	mov	r3, fp
1000de86:	1c05      	adds	r5, r0, #0
1000de88:	6298      	str	r0, [r3, #40]	; 0x28
	vmode->vfreq = vmode->hfreq / vmode->vtot;
1000de8a:	0030      	movs	r0, r6
1000de8c:	f7f3 f8a6 	bl	10000fdc <__wrap___aeabi_i2f>
1000de90:	1c01      	adds	r1, r0, #0
1000de92:	1c28      	adds	r0, r5, #0
1000de94:	f7f3 f893 	bl	10000fbe <__wrap___aeabi_fdiv>

	// name
	vmode->name = v->name;	// video timing name
1000de98:	464a      	mov	r2, r9
	vmode->vfreq = vmode->hfreq / vmode->vtot;
1000de9a:	465b      	mov	r3, fp
	vmode->name = v->name;	// video timing name
1000de9c:	6b12      	ldr	r2, [r2, #48]	; 0x30
	vmode->vfreq = vmode->hfreq / vmode->vtot;
1000de9e:	6318      	str	r0, [r3, #48]	; 0x30
	vmode->name = v->name;	// video timing name
1000dea0:	651a      	str	r2, [r3, #80]	; 0x50

	// flags
	vmode->lockfreq = cfg->lockfreq; // lock current frequency, do not change it
1000dea2:	4653      	mov	r3, sl
1000dea4:	4659      	mov	r1, fp
1000dea6:	7e5a      	ldrb	r2, [r3, #25]
1000dea8:	2354      	movs	r3, #84	; 0x54
1000deaa:	54ca      	strb	r2, [r1, r3]
	vmode->dbly = cfg->dbly; // double scanlines
1000deac:	4653      	mov	r3, sl
1000deae:	7e1a      	ldrb	r2, [r3, #24]
1000deb0:	2355      	movs	r3, #85	; 0x55
1000deb2:	54ca      	strb	r2, [r1, r3]
	vmode->inter = v->inter; // interlaced (use sub-frames)
1000deb4:	464a      	mov	r2, r9
1000deb6:	3b21      	subs	r3, #33	; 0x21
1000deb8:	5cd1      	ldrb	r1, [r2, r3]
1000deba:	4658      	mov	r0, fp
1000debc:	2256      	movs	r2, #86	; 0x56
1000debe:	5481      	strb	r1, [r0, r2]
	vmode->psync = v->psync; // positive synchronization
1000dec0:	4649      	mov	r1, r9
1000dec2:	3a21      	subs	r2, #33	; 0x21
1000dec4:	5c89      	ldrb	r1, [r1, r2]
1000dec6:	3222      	adds	r2, #34	; 0x22
1000dec8:	5481      	strb	r1, [r0, r2]
	vmode->odd = v->odd; // first sub-frame is odd lines 1, 3, 5,... (PAL)
1000deca:	4649      	mov	r1, r9
1000decc:	3a21      	subs	r2, #33	; 0x21
1000dece:	5c89      	ldrb	r1, [r1, r2]
1000ded0:	3222      	adds	r2, #34	; 0x22
1000ded2:	5481      	strb	r1, [r0, r2]

	// first active scanline
	if (v->inter)
1000ded4:	464a      	mov	r2, r9
1000ded6:	5cd3      	ldrb	r3, [r2, r3]
1000ded8:	2b00      	cmp	r3, #0
1000deda:	d068      	beq.n	1000dfae <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x5ae>
	{
		// interlaced
		vmode->vfirst1 = (vmode->vsync1 + vmode->vpost1)/2 + vmode->vback1 + 1; 
1000dedc:	9a06      	ldr	r2, [sp, #24]
		vmode->vfirst2 = vmode->vfirst1 + vmode->vact1 + vmode->vfront1 + 
			(vmode->vpre1 + vmode->vsync2 + vmode->vpost2)/2 + vmode->vback2;
1000dede:	990a      	ldr	r1, [sp, #40]	; 0x28
		vmode->vfirst1 = (vmode->vsync1 + vmode->vpost1)/2 + vmode->vback1 + 1; 
1000dee0:	4694      	mov	ip, r2
1000dee2:	9b04      	ldr	r3, [sp, #16]
			(vmode->vpre1 + vmode->vsync2 + vmode->vpost2)/2 + vmode->vback2;
1000dee4:	9a09      	ldr	r2, [sp, #36]	; 0x24
		vmode->vfirst1 = (vmode->vsync1 + vmode->vpost1)/2 + vmode->vback1 + 1; 
1000dee6:	4463      	add	r3, ip
			(vmode->vpre1 + vmode->vsync2 + vmode->vpost2)/2 + vmode->vback2;
1000dee8:	468c      	mov	ip, r1
1000deea:	990b      	ldr	r1, [sp, #44]	; 0x2c
1000deec:	4462      	add	r2, ip
1000deee:	468c      	mov	ip, r1
1000def0:	9905      	ldr	r1, [sp, #20]
1000def2:	4462      	add	r2, ip
1000def4:	468c      	mov	ip, r1
1000def6:	9907      	ldr	r1, [sp, #28]
1000def8:	1052      	asrs	r2, r2, #1
1000defa:	4462      	add	r2, ip
1000defc:	468c      	mov	ip, r1
		vmode->vfirst1 = (vmode->vsync1 + vmode->vpost1)/2 + vmode->vback1 + 1; 
1000defe:	105b      	asrs	r3, r3, #1
1000df00:	3301      	adds	r3, #1
1000df02:	18fb      	adds	r3, r7, r3
1000df04:	b29b      	uxth	r3, r3
			(vmode->vpre1 + vmode->vsync2 + vmode->vpost2)/2 + vmode->vback2;
1000df06:	18a2      	adds	r2, r4, r2
1000df08:	189a      	adds	r2, r3, r2
1000df0a:	4462      	add	r2, ip
1000df0c:	b292      	uxth	r2, r2
1000df0e:	4658      	mov	r0, fp
1000df10:	214e      	movs	r1, #78	; 0x4e
1000df12:	5242      	strh	r2, [r0, r1]
1000df14:	2240      	movs	r2, #64	; 0x40
1000df16:	5283      	strh	r3, [r0, r2]
	{
		// progressive
		vmode->vfirst1 = vmode->vsync1 + vmode->vback1 + 1;
		vmode->vfirst2 = 0;
	}
}
1000df18:	b011      	add	sp, #68	; 0x44
1000df1a:	bcf0      	pop	{r4, r5, r6, r7}
1000df1c:	46bb      	mov	fp, r7
1000df1e:	46b2      	mov	sl, r6
1000df20:	46a9      	mov	r9, r5
1000df22:	46a0      	mov	r8, r4
1000df24:	bdf0      	pop	{r4, r5, r6, r7, pc}
		hfront -= 13 - hback;
1000df26:	18c9      	adds	r1, r1, r3
1000df28:	390d      	subs	r1, #13
1000df2a:	2902      	cmp	r1, #2
1000df2c:	db3b      	blt.n	1000dfa6 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x5a6>
1000df2e:	220d      	movs	r2, #13
		hback = 13;
1000df30:	230d      	movs	r3, #13
1000df32:	e6f8      	b.n	1000dd26 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x326>
		htot -= 4 - hsync;
1000df34:	2304      	movs	r3, #4
1000df36:	1824      	adds	r4, r4, r0
		hsync = 4;
1000df38:	2704      	movs	r7, #4
		htot -= 4 - hsync;
1000df3a:	3c04      	subs	r4, #4
		hsync = 4;
1000df3c:	9304      	str	r3, [sp, #16]
1000df3e:	e6b7      	b.n	1000dcb0 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x2b0>
	u8 prog = LAYERMODE_BASE;
1000df40:	2100      	movs	r1, #0
1000df42:	4b2a      	ldr	r3, [pc, #168]	; (1000dfec <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x5ec>)
1000df44:	e56f      	b.n	1000da26 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x26>
1000df46:	0019      	movs	r1, r3
	if (v->inter) // interlaced
1000df48:	2800      	cmp	r0, #0
1000df4a:	d000      	beq.n	1000df4e <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x54e>
1000df4c:	e70f      	b.n	1000dd6e <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x36e>
1000df4e:	e730      	b.n	1000ddb2 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x3b2>
	if (cfg->dbly) h &= ~1; // must be even number if double lines
1000df50:	000a      	movs	r2, r1
	int vact2 = 0;
1000df52:	2300      	movs	r3, #0
	if (cfg->dbly) h /= 2; // return double lines to single lines
1000df54:	0849      	lsrs	r1, r1, #1
1000df56:	e72e      	b.n	1000ddb6 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x3b6>
			vact1 = (h+1)/2; // if even lines, even frame will have more lines
1000df58:	1c4a      	adds	r2, r1, #1
			vact2 = h/2;
1000df5a:	104b      	asrs	r3, r1, #1
1000df5c:	001e      	movs	r6, r3
			vact1 = (h+1)/2; // if even lines, even frame will have more lines
1000df5e:	1052      	asrs	r2, r2, #1
			vact2 = h/2;
1000df60:	e70f      	b.n	1000dd82 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x382>
1000df62:	0019      	movs	r1, r3
	if (cfg->dbly) h &= ~1; // must be even number if double lines
1000df64:	2301      	movs	r3, #1
1000df66:	4399      	bics	r1, r3
	if (v->inter) // interlaced
1000df68:	2800      	cmp	r0, #0
1000df6a:	d000      	beq.n	1000df6e <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x56e>
1000df6c:	e6ff      	b.n	1000dd6e <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x36e>
1000df6e:	e7ef      	b.n	1000df50 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x550>
		htot--;
1000df70:	3d01      	subs	r5, #1
		hfront++;
1000df72:	3101      	adds	r1, #1
1000df74:	e6e2      	b.n	1000dd3c <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x33c>
			freq2 = (int)(cpp*wfull*1000/hfull + 0.5f) + 200;
1000df76:	19f6      	adds	r6, r6, r7
1000df78:	0170      	lsls	r0, r6, #5
1000df7a:	1b80      	subs	r0, r0, r6
1000df7c:	0080      	lsls	r0, r0, #2
1000df7e:	1980      	adds	r0, r0, r6
1000df80:	00c0      	lsls	r0, r0, #3
1000df82:	f7f3 f82b 	bl	10000fdc <__wrap___aeabi_i2f>
1000df86:	4641      	mov	r1, r8
1000df88:	f7f3 f819 	bl	10000fbe <__wrap___aeabi_fdiv>
1000df8c:	21fc      	movs	r1, #252	; 0xfc
1000df8e:	0589      	lsls	r1, r1, #22
1000df90:	f7f3 f812 	bl	10000fb8 <__wrap___aeabi_fadd>
1000df94:	f7f3 f844 	bl	10001020 <__wrap___aeabi_f2iz>
1000df98:	30c8      	adds	r0, #200	; 0xc8
		if (freq2 >= freq) freq = freq2;
1000df9a:	4285      	cmp	r5, r0
1000df9c:	d900      	bls.n	1000dfa0 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x5a0>
1000df9e:	e5d6      	b.n	1000db4e <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x14e>
1000dfa0:	e5d3      	b.n	1000db4a <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x14a>
		int freq2 = (int)(cpp*wfull*1000/hfull + 0.5f) + 200;
1000dfa2:	0006      	movs	r6, r0
1000dfa4:	e5bc      	b.n	1000db20 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x120>
1000dfa6:	2102      	movs	r1, #2
1000dfa8:	220d      	movs	r2, #13
		hback = 13;
1000dfaa:	230d      	movs	r3, #13
1000dfac:	e6bb      	b.n	1000dd26 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x326>
		vmode->vfirst1 = vmode->vsync1 + vmode->vback1 + 1;
1000dfae:	9b04      	ldr	r3, [sp, #16]
		vmode->vfirst2 = 0;
1000dfb0:	2200      	movs	r2, #0
		vmode->vfirst1 = vmode->vsync1 + vmode->vback1 + 1;
1000dfb2:	3301      	adds	r3, #1
1000dfb4:	18fb      	adds	r3, r7, r3
1000dfb6:	b29b      	uxth	r3, r3
		vmode->vfirst2 = 0;
1000dfb8:	e7a9      	b.n	1000df0e <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x50e>
	vmode->vfront2 = v->vfront2 - ((dh < 0) ? (dh-1)/2 : (dh+1)/2); // V front porch (after image, before VSYNC) on subframe 2
1000dfba:	1e59      	subs	r1, r3, #1
1000dfbc:	0fcb      	lsrs	r3, r1, #31
1000dfbe:	185b      	adds	r3, r3, r1
1000dfc0:	105b      	asrs	r3, r3, #1
1000dfc2:	b29b      	uxth	r3, r3
1000dfc4:	e746      	b.n	1000de54 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x454>
	vmode->vfront1 = v->vfront1 - ((dh < 0) ? (dh-1)/2 : (dh+1)/2); // V front porch (after image, before VSYNC) on subframe 1
1000dfc6:	1e54      	subs	r4, r2, #1
1000dfc8:	0fe2      	lsrs	r2, r4, #31
1000dfca:	1912      	adds	r2, r2, r4
1000dfcc:	1052      	asrs	r2, r2, #1
1000dfce:	b292      	uxth	r2, r2
1000dfd0:	e715      	b.n	1000ddfe <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x3fe>
	hback += (d < 0) ? (d-1)/2 : (d+1)/2;
1000dfd2:	3a01      	subs	r2, #1
1000dfd4:	0fd3      	lsrs	r3, r2, #31
1000dfd6:	189b      	adds	r3, r3, r2
1000dfd8:	105b      	asrs	r3, r3, #1
1000dfda:	e69a      	b.n	1000dd12 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x312>
	while (cpp > maxcpp)
1000dfdc:	23fe      	movs	r3, #254	; 0xfe
1000dfde:	059b      	lsls	r3, r3, #22
1000dfe0:	2401      	movs	r4, #1
1000dfe2:	9308      	str	r3, [sp, #32]
1000dfe4:	1c1e      	adds	r6, r3, #0
1000dfe6:	e605      	b.n	1000dbf4 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x1f4>
1000dfe8:	447a0000 	.word	0x447a0000
1000dfec:	1002bab8 	.word	0x1002bab8

1000dff0 <_Z5VideohhhPhPKv>:
//	FORM_TEXT: pointer to font 8x16 or 8x8 (size 4 KB or 2 KB, ALIGNED attribute, should be in RAM)
//		- copy font to 4KB or 2 KB RAM buffer with ALIGNED attribute
//		- text uses color attributes PC_*
//	FORM_RLE: pointer to image rows (ALIGNED attribute, should be in RAM)
void Video(u8 dev, u8 res, u8 form, u8* buf, const void* buf2 /* = FontBoldB8x16 */)
{
1000dff0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000dff2:	46d6      	mov	lr, sl
1000dff4:	464f      	mov	r7, r9
1000dff6:	4646      	mov	r6, r8
1000dff8:	b5c0      	push	{r6, r7, lr}
1000dffa:	0016      	movs	r6, r2
1000dffc:	b084      	sub	sp, #16
1000dffe:	4681      	mov	r9, r0
1000e000:	000d      	movs	r5, r1
1000e002:	4698      	mov	r8, r3
	// stop VGA core
	multicore_reset_core1();
1000e004:	f7f3 fe0c 	bl	10001c20 <multicore_reset_core1>

	// run VGA core
	multicore_launch_core1(VgaCore);
1000e008:	489b      	ldr	r0, [pc, #620]	; (1000e278 <_Z5VideohhhPhPKv+0x288>)
1000e00a:	f7f3 fe1b 	bl	10001c44 <multicore_launch_core1>

	// prepare timings structure
	if (dev >= DEV_MAX) dev = DEV_VGA;
	if (res >= RES_MAX) res = RES_MAX-1;
	if (form >= FORM_MAX) form = FORM_MAX-1;
1000e00e:	1c37      	adds	r7, r6, #0
1000e010:	2e0e      	cmp	r6, #14
1000e012:	d900      	bls.n	1000e016 <_Z5VideohhhPhPKv+0x26>
1000e014:	270e      	movs	r7, #14
1000e016:	b2ff      	uxtb	r7, r7
	const sVideo* v = VideoResTab[dev*RES_MAX + res];
1000e018:	1c2c      	adds	r4, r5, #0
1000e01a:	2d07      	cmp	r5, #7
1000e01c:	d900      	bls.n	1000e020 <_Z5VideohhhPhPKv+0x30>
1000e01e:	2407      	movs	r4, #7
1000e020:	464b      	mov	r3, r9
1000e022:	464d      	mov	r5, r9
1000e024:	b2e4      	uxtb	r4, r4
1000e026:	2b02      	cmp	r3, #2
1000e028:	d900      	bls.n	1000e02c <_Z5VideohhhPhPKv+0x3c>
1000e02a:	2502      	movs	r5, #2
1000e02c:	b2ed      	uxtb	r5, r5

	// required resolution
	u16 w = VideoResReq[res*2];
1000e02e:	00a1      	lsls	r1, r4, #2
	const sVideo* v = VideoResTab[dev*RES_MAX + res];
1000e030:	00ed      	lsls	r5, r5, #3
1000e032:	192d      	adds	r5, r5, r4
	u16 h = VideoResReq[res*2+1];
1000e034:	000c      	movs	r4, r1
	const sVideo* v = VideoResTab[dev*RES_MAX + res];
1000e036:	4b91      	ldr	r3, [pc, #580]	; (1000e27c <_Z5VideohhhPhPKv+0x28c>)
1000e038:	00ad      	lsls	r5, r5, #2
	u16 w = VideoResReq[res*2];
1000e03a:	4a91      	ldr	r2, [pc, #580]	; (1000e280 <_Z5VideohhhPhPKv+0x290>)
	const sVideo* v = VideoResTab[dev*RES_MAX + res];
1000e03c:	58eb      	ldr	r3, [r5, r3]
	u16 h = VideoResReq[res*2+1];
1000e03e:	3402      	adds	r4, #2
	u16 w = VideoResReq[res*2];
1000e040:	5a8d      	ldrh	r5, [r1, r2]
	u16 h = VideoResReq[res*2+1];
1000e042:	5aa0      	ldrh	r0, [r4, r2]
	if (h > v->vmax) h = v->vmax;
1000e044:	8ad9      	ldrh	r1, [r3, #22]
1000e046:	1c0a      	adds	r2, r1, #0
1000e048:	4281      	cmp	r1, r0
1000e04a:	d900      	bls.n	1000e04e <_Z5VideohhhPhPKv+0x5e>
1000e04c:	1c02      	adds	r2, r0, #0
1000e04e:	b292      	uxth	r2, r2
1000e050:	4691      	mov	r9, r2

	if ((form == FORM_TEXT8) || (form == FORM_MTEXT8))
1000e052:	0032      	movs	r2, r6
1000e054:	21fd      	movs	r1, #253	; 0xfd
1000e056:	3a0a      	subs	r2, #10
1000e058:	420a      	tst	r2, r1
1000e05a:	d104      	bne.n	1000e066 <_Z5VideohhhPhPKv+0x76>
	{
		w = w/8*8;
1000e05c:	2207      	movs	r2, #7
		h = h/8*8;
1000e05e:	4649      	mov	r1, r9
1000e060:	4391      	bics	r1, r2
1000e062:	4689      	mov	r9, r1
		w = w/8*8;
1000e064:	4395      	bics	r5, r2
	}

	if ((form == FORM_TEXT16) || (form == FORM_MTEXT16))
1000e066:	0032      	movs	r2, r6
1000e068:	21fd      	movs	r1, #253	; 0xfd
1000e06a:	3a0b      	subs	r2, #11
1000e06c:	420a      	tst	r2, r1
1000e06e:	d105      	bne.n	1000e07c <_Z5VideohhhPhPKv+0x8c>
	{
		w = w/8*8;
1000e070:	2207      	movs	r2, #7
		h = h/16*16;
1000e072:	4649      	mov	r1, r9
		w = w/8*8;
1000e074:	4395      	bics	r5, r2
		h = h/16*16;
1000e076:	3208      	adds	r2, #8
1000e078:	4391      	bics	r1, r2
1000e07a:	4689      	mov	r9, r1
	cfg->wfull = 0;			// width of full screen, corresponding to 'hfull' time (0=use 'width' parameter)
1000e07c:	2200      	movs	r2, #0
1000e07e:	4881      	ldr	r0, [pc, #516]	; (1000e284 <_Z5VideohhhPhPKv+0x294>)
	cfg->freq = 120000;		// required minimal system frequency in kHz (real frequency can be higher)
1000e080:	4981      	ldr	r1, [pc, #516]	; (1000e288 <_Z5VideohhhPhPKv+0x298>)
	cfg->wfull = 0;			// width of full screen, corresponding to 'hfull' time (0=use 'width' parameter)
1000e082:	8082      	strh	r2, [r0, #4]
	cfg->mode[0] = LAYERMODE_BASE;	// modes of overlapped layers 0..3 LAYERMODE_* (LAYERMODE_BASE = layer is off)
1000e084:	6142      	str	r2, [r0, #20]
	cfg->lockfreq = False;		// lock required frequency, do not change it
1000e086:	7642      	strb	r2, [r0, #25]
	}

	// setup videomode
	VgaCfgDef(&Cfg); // get default configuration
	Cfg.video = v; // video timings
	Cfg.width = w; // screen width
1000e088:	464a      	mov	r2, r9
	cfg->freq = 120000;		// required minimal system frequency in kHz (real frequency can be higher)
1000e08a:	60c1      	str	r1, [r0, #12]
	Cfg.width = w; // screen width
1000e08c:	0412      	lsls	r2, r2, #16
	cfg->fmax = 270000;		// maximal system frequency in kHz (limit resolution if needed)
1000e08e:	497f      	ldr	r1, [pc, #508]	; (1000e28c <_Z5VideohhhPhPKv+0x29c>)
	Cfg.width = w; // screen width
1000e090:	432a      	orrs	r2, r5
	cfg->fmax = 270000;		// maximal system frequency in kHz (limit resolution if needed)
1000e092:	6101      	str	r1, [r0, #16]
	Cfg.video = v; // video timings
1000e094:	6083      	str	r3, [r0, #8]
	Cfg.width = w; // screen width
1000e096:	6002      	str	r2, [r0, #0]
	Cfg.height = h; // screen height
	if (form == FORM_RLE) Cfg.mode[1] = LAYERMODE_RLE;
1000e098:	2e0d      	cmp	r6, #13
1000e09a:	d901      	bls.n	1000e0a0 <_Z5VideohhhPhPKv+0xb0>
1000e09c:	2206      	movs	r2, #6
1000e09e:	7542      	strb	r2, [r0, #21]
	Cfg.dbly = h <= v->vmax/2; // double scanlines
1000e0a0:	8ada      	ldrh	r2, [r3, #22]
1000e0a2:	4649      	mov	r1, r9
1000e0a4:	2300      	movs	r3, #0
1000e0a6:	0852      	lsrs	r2, r2, #1
1000e0a8:	428a      	cmp	r2, r1
1000e0aa:	415b      	adcs	r3, r3
	VgaCfg(&Cfg, &Vmode); // calculate videomode setup
1000e0ac:	4c78      	ldr	r4, [pc, #480]	; (1000e290 <_Z5VideohhhPhPKv+0x2a0>)
	Cfg.dbly = h <= v->vmax/2; // double scanlines
1000e0ae:	7603      	strb	r3, [r0, #24]
	VgaCfg(&Cfg, &Vmode); // calculate videomode setup
1000e0b0:	0021      	movs	r1, r4
1000e0b2:	f7ff fca5 	bl	1000da00 <_Z6VgaCfgPK7sVgaCfgP6sVmode>

	// initialize base layer 0
	ScreenClear(pScreen);
1000e0b6:	4e77      	ldr	r6, [pc, #476]	; (1000e294 <_Z5VideohhhPhPKv+0x2a4>)
1000e0b8:	6830      	ldr	r0, [r6, #0]
1000e0ba:	f7ff fb79 	bl	1000d7b0 <_Z11ScreenClearP7sScreen>
	sStrip* t = ScreenAddStrip(pScreen, h);
1000e0be:	4649      	mov	r1, r9
1000e0c0:	6830      	ldr	r0, [r6, #0]
1000e0c2:	f7ff fb7d 	bl	1000d7c0 <_Z14ScreenAddStripP7sScreeni>
	sSegm* g = ScreenAddSegm(t, w);
1000e0c6:	0029      	movs	r1, r5
1000e0c8:	f7ff fb8c 	bl	1000d7e4 <_Z13ScreenAddSegmP6sStripi>
1000e0cc:	0006      	movs	r6, r0
	switch (form)
1000e0ce:	2f0e      	cmp	r7, #14
1000e0d0:	d900      	bls.n	1000e0d4 <_Z5VideohhhPhPKv+0xe4>
1000e0d2:	e0c2      	b.n	1000e25a <_Z5VideohhhPhPKv+0x26a>
1000e0d4:	4b70      	ldr	r3, [pc, #448]	; (1000e298 <_Z5VideohhhPhPKv+0x2a8>)
1000e0d6:	00bf      	lsls	r7, r7, #2
1000e0d8:	59db      	ldr	r3, [r3, r7]
1000e0da:	469f      	mov	pc, r3
		PrintSetup(buf, w/8, h/16, w/8*2);
		PrintClear();
		break;

	case FORM_RLE:	// images with RLE compression (on overlapped layer 1)
		ScreenSegmColor(g, 0, 0);
1000e0dc:	2200      	movs	r2, #0
1000e0de:	2100      	movs	r1, #0
1000e0e0:	f7ff fb9c 	bl	1000d81c <_Z15ScreenSegmColorP5sSegmmm>
		LayerSetup(1, buf, &Vmode, w, h, 0, buf2);
1000e0e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1000e0e6:	2001      	movs	r0, #1
1000e0e8:	9302      	str	r3, [sp, #8]
1000e0ea:	2300      	movs	r3, #0
1000e0ec:	9301      	str	r3, [sp, #4]
1000e0ee:	464b      	mov	r3, r9
1000e0f0:	0022      	movs	r2, r4
1000e0f2:	9300      	str	r3, [sp, #0]
1000e0f4:	4641      	mov	r1, r8
1000e0f6:	002b      	movs	r3, r5
1000e0f8:	f7ff fad6 	bl	1000d6a8 <_Z10LayerSetuphPKhPK6sVmodetthPKv>
		LayerOn(1);
1000e0fc:	2001      	movs	r0, #1
1000e0fe:	f7ff fac3 	bl	1000d688 <_Z7LayerOnh>
		break;
	}

	// initialize system clock
	set_sys_clock_pll(Vmode.vco*1000, Vmode.pd1, Vmode.pd2);
1000e102:	68e3      	ldr	r3, [r4, #12]
1000e104:	7ce2      	ldrb	r2, [r4, #19]
1000e106:	0158      	lsls	r0, r3, #5
1000e108:	1ac0      	subs	r0, r0, r3
1000e10a:	0080      	lsls	r0, r0, #2
1000e10c:	18c0      	adds	r0, r0, r3
1000e10e:	7ca1      	ldrb	r1, [r4, #18]
1000e110:	00c0      	lsls	r0, r0, #3
1000e112:	f7f5 ffb7 	bl	10004084 <set_sys_clock_pll>

	// initialize videomode
	VgaInitReq(&Vmode);
1000e116:	0020      	movs	r0, r4
1000e118:	f7ff faa2 	bl	1000d660 <_Z10VgaInitReqPK6sVmode>
}
1000e11c:	b004      	add	sp, #16
1000e11e:	bce0      	pop	{r5, r6, r7}
1000e120:	46ba      	mov	sl, r7
1000e122:	46b1      	mov	r9, r6
1000e124:	46a8      	mov	r8, r5
1000e126:	bdf0      	pop	{r4, r5, r6, r7, pc}
		GenPal16Trans(Pal16Trans, DefPal16); // generate palette translation table
1000e128:	4b5c      	ldr	r3, [pc, #368]	; (1000e29c <_Z5VideohhhPhPKv+0x2ac>)
1000e12a:	495d      	ldr	r1, [pc, #372]	; (1000e2a0 <_Z5VideohhhPhPKv+0x2b0>)
1000e12c:	469a      	mov	sl, r3
1000e12e:	0018      	movs	r0, r3
		ScreenSegmGraph4(g, buf, Pal16Trans, w/2);
1000e130:	086f      	lsrs	r7, r5, #1
		GenPal16Trans(Pal16Trans, DefPal16); // generate palette translation table
1000e132:	f7ff fb8b 	bl	1000d84c <_Z13GenPal16TransPtPKh>
		ScreenSegmGraph4(g, buf, Pal16Trans, w/2);
1000e136:	003b      	movs	r3, r7
1000e138:	4652      	mov	r2, sl
1000e13a:	4641      	mov	r1, r8
1000e13c:	0030      	movs	r0, r6
1000e13e:	f7ff fb99 	bl	1000d874 <_Z16ScreenSegmGraph4P5sSegmPKvS2_i>
		Canvas.img = buf;
1000e142:	4642      	mov	r2, r8
1000e144:	4b57      	ldr	r3, [pc, #348]	; (1000e2a4 <_Z5VideohhhPhPKv+0x2b4>)
1000e146:	601a      	str	r2, [r3, #0]
		Canvas.h = h;
1000e148:	464a      	mov	r2, r9
1000e14a:	60da      	str	r2, [r3, #12]
		Canvas.format = CANVAS_4;
1000e14c:	2201      	movs	r2, #1
		Canvas.w = w;
1000e14e:	609d      	str	r5, [r3, #8]
		Canvas.wb = w/2;
1000e150:	611f      	str	r7, [r3, #16]
		Canvas.format = CANVAS_4;
1000e152:	751a      	strb	r2, [r3, #20]
		break;
1000e154:	e7d5      	b.n	1000e102 <_Z5VideohhhPhPKv+0x112>
		ScreenSegmGraph1(g, buf, COL_BLACK, COL_WHITE, w/8);
1000e156:	08ef      	lsrs	r7, r5, #3
1000e158:	23ff      	movs	r3, #255	; 0xff
1000e15a:	2200      	movs	r2, #0
1000e15c:	4641      	mov	r1, r8
1000e15e:	9700      	str	r7, [sp, #0]
1000e160:	f7ff fb98 	bl	1000d894 <_Z16ScreenSegmGraph1P5sSegmPKvhhi>
		Canvas.img = buf;
1000e164:	4642      	mov	r2, r8
1000e166:	4b4f      	ldr	r3, [pc, #316]	; (1000e2a4 <_Z5VideohhhPhPKv+0x2b4>)
1000e168:	601a      	str	r2, [r3, #0]
		Canvas.h = h;
1000e16a:	464a      	mov	r2, r9
1000e16c:	60da      	str	r2, [r3, #12]
		Canvas.format = CANVAS_1;
1000e16e:	2203      	movs	r2, #3
		Canvas.w = w;
1000e170:	609d      	str	r5, [r3, #8]
		Canvas.wb = w/8;
1000e172:	611f      	str	r7, [r3, #16]
		Canvas.format = CANVAS_1;
1000e174:	751a      	strb	r2, [r3, #20]
		break;
1000e176:	e7c4      	b.n	1000e102 <_Z5VideohhhPhPKv+0x112>
		ScreenSegmTile(g, buf, buf2, 8, 8, (w+7)/8);
1000e178:	2308      	movs	r3, #8
1000e17a:	3507      	adds	r5, #7
1000e17c:	10ed      	asrs	r5, r5, #3
1000e17e:	9501      	str	r5, [sp, #4]
		ScreenSegmTile(g, buf, buf2, 12, 12, (w+11)/12);
1000e180:	4641      	mov	r1, r8
1000e182:	0030      	movs	r0, r6
1000e184:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1000e186:	9300      	str	r3, [sp, #0]
1000e188:	f7ff fbc4 	bl	1000d914 <_Z14ScreenSegmTileP5sSegmPKvS2_iii>
		break;
1000e18c:	e7b9      	b.n	1000e102 <_Z5VideohhhPhPKv+0x112>
		ScreenSegmTile(g, buf, buf2, 12, 12, (w+11)/12);
1000e18e:	0028      	movs	r0, r5
1000e190:	210c      	movs	r1, #12
1000e192:	300b      	adds	r0, #11
1000e194:	f7f2 f8c2 	bl	1000031c <__wrap___aeabi_idiv>
1000e198:	230c      	movs	r3, #12
1000e19a:	9001      	str	r0, [sp, #4]
1000e19c:	e7f0      	b.n	1000e180 <_Z5VideohhhPhPKv+0x190>
		ScreenSegmTile(g, buf, buf2, 16, 16, (w+15)/16);
1000e19e:	350f      	adds	r5, #15
1000e1a0:	112d      	asrs	r5, r5, #4
1000e1a2:	2310      	movs	r3, #16
1000e1a4:	9501      	str	r5, [sp, #4]
1000e1a6:	e7eb      	b.n	1000e180 <_Z5VideohhhPhPKv+0x190>
		ScreenSegmTile(g, buf, buf2, 24, 24, (w+23)/24);
1000e1a8:	0028      	movs	r0, r5
1000e1aa:	2118      	movs	r1, #24
1000e1ac:	3017      	adds	r0, #23
1000e1ae:	f7f2 f8b5 	bl	1000031c <__wrap___aeabi_idiv>
1000e1b2:	2318      	movs	r3, #24
1000e1b4:	9001      	str	r0, [sp, #4]
1000e1b6:	e7e3      	b.n	1000e180 <_Z5VideohhhPhPKv+0x190>
		ScreenSegmTile(g, buf, buf2, 32, 32, (w+31)/32);
1000e1b8:	351f      	adds	r5, #31
1000e1ba:	116d      	asrs	r5, r5, #5
1000e1bc:	2320      	movs	r3, #32
1000e1be:	9501      	str	r5, [sp, #4]
1000e1c0:	e7de      	b.n	1000e180 <_Z5VideohhhPhPKv+0x190>
		ScreenSegmTile(g, buf, buf2, 48, 48, (w+47)/48);
1000e1c2:	0028      	movs	r0, r5
1000e1c4:	2130      	movs	r1, #48	; 0x30
1000e1c6:	302f      	adds	r0, #47	; 0x2f
1000e1c8:	f7f2 f8a8 	bl	1000031c <__wrap___aeabi_idiv>
1000e1cc:	2330      	movs	r3, #48	; 0x30
1000e1ce:	9001      	str	r0, [sp, #4]
1000e1d0:	e7d6      	b.n	1000e180 <_Z5VideohhhPhPKv+0x190>
		ScreenSegmTile(g, buf, buf2, 64, 64, (w+63)/64);
1000e1d2:	353f      	adds	r5, #63	; 0x3f
1000e1d4:	11ad      	asrs	r5, r5, #6
1000e1d6:	2340      	movs	r3, #64	; 0x40
1000e1d8:	9501      	str	r5, [sp, #4]
1000e1da:	e7d1      	b.n	1000e180 <_Z5VideohhhPhPKv+0x190>
		ScreenSegmMText(g, buf, buf2, 8, COL_BLACK, COL_WHITE, w/8);
1000e1dc:	23ff      	movs	r3, #255	; 0xff
1000e1de:	9301      	str	r3, [sp, #4]
1000e1e0:	2300      	movs	r3, #0
1000e1e2:	08ed      	lsrs	r5, r5, #3
1000e1e4:	9300      	str	r3, [sp, #0]
1000e1e6:	9502      	str	r5, [sp, #8]
1000e1e8:	3308      	adds	r3, #8
		ScreenSegmMText(g, buf, buf2, 16, COL_BLACK, COL_WHITE, w/8);
1000e1ea:	4641      	mov	r1, r8
1000e1ec:	0030      	movs	r0, r6
1000e1ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1000e1f0:	f7ff fb64 	bl	1000d8bc <_Z15ScreenSegmMTextP5sSegmPKvS2_thhi>
		PrintSetup(buf, w/8, h/8, w/8);
1000e1f4:	464b      	mov	r3, r9
1000e1f6:	0029      	movs	r1, r5
1000e1f8:	08da      	lsrs	r2, r3, #3
1000e1fa:	4640      	mov	r0, r8
1000e1fc:	002b      	movs	r3, r5
1000e1fe:	f001 fa45 	bl	1000f68c <_Z10PrintSetupPhiii>
		PrintClear();
1000e202:	f001 fa6d 	bl	1000f6e0 <_Z10PrintClearv>
		break;
1000e206:	e77c      	b.n	1000e102 <_Z5VideohhhPhPKv+0x112>
		ScreenSegmMText(g, buf, buf2, 16, COL_BLACK, COL_WHITE, w/8);
1000e208:	23ff      	movs	r3, #255	; 0xff
1000e20a:	9301      	str	r3, [sp, #4]
1000e20c:	2300      	movs	r3, #0
1000e20e:	08ed      	lsrs	r5, r5, #3
1000e210:	9300      	str	r3, [sp, #0]
1000e212:	9502      	str	r5, [sp, #8]
1000e214:	3310      	adds	r3, #16
1000e216:	e7e8      	b.n	1000e1ea <_Z5VideohhhPhPKv+0x1fa>
		ScreenSegmAText(g, buf, buf2, 8, DefPal16, w/8*2);
1000e218:	4b21      	ldr	r3, [pc, #132]	; (1000e2a0 <_Z5VideohhhPhPKv+0x2b0>)
1000e21a:	08ed      	lsrs	r5, r5, #3
1000e21c:	006f      	lsls	r7, r5, #1
1000e21e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1000e220:	9300      	str	r3, [sp, #0]
1000e222:	4641      	mov	r1, r8
1000e224:	2308      	movs	r3, #8
1000e226:	9701      	str	r7, [sp, #4]
1000e228:	f7ff fb60 	bl	1000d8ec <_Z15ScreenSegmATextP5sSegmPKvS2_tS2_i>
		PrintSetup(buf, w/8, h/8, w/8*2);
1000e22c:	464b      	mov	r3, r9
1000e22e:	08da      	lsrs	r2, r3, #3
		PrintSetup(buf, w/8, h/16, w/8*2);
1000e230:	003b      	movs	r3, r7
1000e232:	0029      	movs	r1, r5
1000e234:	4640      	mov	r0, r8
1000e236:	f001 fa29 	bl	1000f68c <_Z10PrintSetupPhiii>
		PrintClear();
1000e23a:	f001 fa51 	bl	1000f6e0 <_Z10PrintClearv>
		break;
1000e23e:	e760      	b.n	1000e102 <_Z5VideohhhPhPKv+0x112>
		ScreenSegmAText(g, buf, buf2, 16, DefPal16, w/8*2);
1000e240:	4b17      	ldr	r3, [pc, #92]	; (1000e2a0 <_Z5VideohhhPhPKv+0x2b0>)
1000e242:	08ed      	lsrs	r5, r5, #3
1000e244:	006f      	lsls	r7, r5, #1
1000e246:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1000e248:	9300      	str	r3, [sp, #0]
1000e24a:	4641      	mov	r1, r8
1000e24c:	2310      	movs	r3, #16
1000e24e:	9701      	str	r7, [sp, #4]
1000e250:	f7ff fb4c 	bl	1000d8ec <_Z15ScreenSegmATextP5sSegmPKvS2_tS2_i>
		PrintSetup(buf, w/8, h/16, w/8*2);
1000e254:	464b      	mov	r3, r9
1000e256:	091a      	lsrs	r2, r3, #4
1000e258:	e7ea      	b.n	1000e230 <_Z5VideohhhPhPKv+0x240>
		ScreenSegmGraph8(g, buf, w);
1000e25a:	002a      	movs	r2, r5
1000e25c:	4641      	mov	r1, r8
1000e25e:	0030      	movs	r0, r6
1000e260:	f7ff fae6 	bl	1000d830 <_Z16ScreenSegmGraph8P5sSegmPKvi>
		Canvas.img = buf;
1000e264:	4642      	mov	r2, r8
1000e266:	4b0f      	ldr	r3, [pc, #60]	; (1000e2a4 <_Z5VideohhhPhPKv+0x2b4>)
1000e268:	601a      	str	r2, [r3, #0]
		Canvas.h = h;
1000e26a:	464a      	mov	r2, r9
1000e26c:	60da      	str	r2, [r3, #12]
		Canvas.format = CANVAS_8;
1000e26e:	2200      	movs	r2, #0
		Canvas.w = w;
1000e270:	609d      	str	r5, [r3, #8]
		Canvas.wb = w;
1000e272:	611d      	str	r5, [r3, #16]
		Canvas.format = CANVAS_8;
1000e274:	751a      	strb	r2, [r3, #20]
		break;
1000e276:	e744      	b.n	1000e102 <_Z5VideohhhPhPKv+0x112>
1000e278:	1000d615 	.word	0x1000d615
1000e27c:	20002790 	.word	0x20002790
1000e280:	1002bf74 	.word	0x1002bf74
1000e284:	200034b8 	.word	0x200034b8
1000e288:	0001d4c0 	.word	0x0001d4c0
1000e28c:	00041eb0 	.word	0x00041eb0
1000e290:	20011a64 	.word	0x20011a64
1000e294:	2000278c 	.word	0x2000278c
1000e298:	1002bcf0 	.word	0x1002bcf0
1000e29c:	20006214 	.word	0x20006214
1000e2a0:	2000277c 	.word	0x2000277c
1000e2a4:	200034a0 	.word	0x200034a0

1000e2a8 <_Z9DrawPointP7sCanvasiih.part.0>:
	DrawRect(canvas, 0, 0, canvas->w, canvas->h, 0);
}

// Draw point
//  col with CANVAS_ATTRIB8 format: bit 0..3 = draw color, bit 4 = draw color is background color
void DrawPoint(sCanvas* canvas, int x, int y, u8 col)
1000e2a8:	b5f0      	push	{r4, r5, r6, r7, lr}
{
	// check coordinates
	if (((u32)x >= (u32)canvas->w) || ((u32)y >= (u32)canvas->h)) return;

	// check format
	switch(canvas->format)
1000e2aa:	7d04      	ldrb	r4, [r0, #20]
1000e2ac:	2c05      	cmp	r4, #5
1000e2ae:	d808      	bhi.n	1000e2c2 <_Z9DrawPointP7sCanvasiih.part.0+0x1a>
1000e2b0:	4d9a      	ldr	r5, [pc, #616]	; (1000e51c <_Z9DrawPointP7sCanvasiih.part.0+0x274>)
1000e2b2:	00a4      	lsls	r4, r4, #2
1000e2b4:	592c      	ldr	r4, [r5, r4]
1000e2b6:	46a7      	mov	pc, r4
	{
	// 8-bit pixels
	case CANVAS_8:
		canvas->img[x + y*canvas->wb] = col;
1000e2b8:	6904      	ldr	r4, [r0, #16]
1000e2ba:	6800      	ldr	r0, [r0, #0]
1000e2bc:	4362      	muls	r2, r4
1000e2be:	1841      	adds	r1, r0, r1
1000e2c0:	548b      	strb	r3, [r1, r2]
				*d2 = (*d2 & 0x0f) | (col << 4);
			}
		}
		break;
	}
}
1000e2c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			u8* d = canvas->img + x/8 + y*wb; // 1st plane
1000e2c4:	2507      	movs	r5, #7
1000e2c6:	6904      	ldr	r4, [r0, #16]
1000e2c8:	4362      	muls	r2, r4
1000e2ca:	17cc      	asrs	r4, r1, #31
1000e2cc:	402c      	ands	r4, r5
1000e2ce:	1864      	adds	r4, r4, r1
1000e2d0:	10e4      	asrs	r4, r4, #3
1000e2d2:	1914      	adds	r4, r2, r4
1000e2d4:	6802      	ldr	r2, [r0, #0]
			switch (x & 7)
1000e2d6:	400d      	ands	r5, r1
			u8* d = canvas->img + x/8 + y*wb; // 1st plane
1000e2d8:	1916      	adds	r6, r2, r4
			u8* d2 = canvas->img2 + x/8 + y*wb; // 2nd plane
1000e2da:	6842      	ldr	r2, [r0, #4]
			col &= 1;
1000e2dc:	2001      	movs	r0, #1
1000e2de:	4990      	ldr	r1, [pc, #576]	; (1000e520 <_Z9DrawPointP7sCanvasiih.part.0+0x278>)
1000e2e0:	00ad      	lsls	r5, r5, #2
1000e2e2:	5949      	ldr	r1, [r1, r5]
			u8* d2 = canvas->img2 + x/8 + y*wb; // 2nd plane
1000e2e4:	1914      	adds	r4, r2, r4
			u8 col2 = col >> 1;
1000e2e6:	085a      	lsrs	r2, r3, #1
			col &= 1;
1000e2e8:	4003      	ands	r3, r0
			switch (x & 7)
1000e2ea:	468f      	mov	pc, r1
			u8* d = canvas->img + x/8 + y*wb; // pixels
1000e2ec:	2707      	movs	r7, #7
1000e2ee:	6906      	ldr	r6, [r0, #16]
1000e2f0:	17cc      	asrs	r4, r1, #31
1000e2f2:	4356      	muls	r6, r2
1000e2f4:	403c      	ands	r4, r7
1000e2f6:	1864      	adds	r4, r4, r1
1000e2f8:	10e4      	asrs	r4, r4, #3
1000e2fa:	6805      	ldr	r5, [r0, #0]
1000e2fc:	1936      	adds	r6, r6, r4
1000e2fe:	19ad      	adds	r5, r5, r6
			u8* d2 = canvas->img2 + x/8 + (y/8)*wb; // attributes
1000e300:	17d6      	asrs	r6, r2, #31
1000e302:	403e      	ands	r6, r7
1000e304:	18b2      	adds	r2, r6, r2
1000e306:	6906      	ldr	r6, [r0, #16]
1000e308:	10d2      	asrs	r2, r2, #3
1000e30a:	4372      	muls	r2, r6
1000e30c:	1914      	adds	r4, r2, r4
1000e30e:	6842      	ldr	r2, [r0, #4]
				*d |= (0x80 >> (x & 7));
1000e310:	4039      	ands	r1, r7
			u8* d2 = canvas->img2 + x/8 + (y/8)*wb; // attributes
1000e312:	1914      	adds	r4, r2, r4
			if ((col & B4) == 0)
1000e314:	06da      	lsls	r2, r3, #27
1000e316:	d445      	bmi.n	1000e3a4 <_Z9DrawPointP7sCanvasiih.part.0+0xfc>
				*d |= (0x80 >> (x & 7));
1000e318:	2280      	movs	r2, #128	; 0x80
1000e31a:	410a      	asrs	r2, r1
1000e31c:	7829      	ldrb	r1, [r5, #0]
1000e31e:	430a      	orrs	r2, r1
				*d2 = (*d2 & 0xf0) | col;
1000e320:	210f      	movs	r1, #15
				*d |= (0x80 >> (x & 7));
1000e322:	702a      	strb	r2, [r5, #0]
				*d2 = (*d2 & 0xf0) | col;
1000e324:	7822      	ldrb	r2, [r4, #0]
1000e326:	438a      	bics	r2, r1
1000e328:	4313      	orrs	r3, r2
1000e32a:	7023      	strb	r3, [r4, #0]
1000e32c:	e7c9      	b.n	1000e2c2 <_Z9DrawPointP7sCanvasiih.part.0+0x1a>
			u8* d = canvas->img + x/4 + y*canvas->wb;
1000e32e:	2503      	movs	r5, #3
1000e330:	6904      	ldr	r4, [r0, #16]
1000e332:	4362      	muls	r2, r4
1000e334:	17cc      	asrs	r4, r1, #31
1000e336:	402c      	ands	r4, r5
1000e338:	1864      	adds	r4, r4, r1
1000e33a:	10a4      	asrs	r4, r4, #2
1000e33c:	1914      	adds	r4, r2, r4
1000e33e:	6802      	ldr	r2, [r0, #0]
			switch (x & 3)
1000e340:	4029      	ands	r1, r5
			u8* d = canvas->img + x/4 + y*canvas->wb;
1000e342:	1914      	adds	r4, r2, r4
			switch (x & 3)
1000e344:	2902      	cmp	r1, #2
1000e346:	d100      	bne.n	1000e34a <_Z9DrawPointP7sCanvasiih.part.0+0xa2>
1000e348:	e0cd      	b.n	1000e4e6 <_Z9DrawPointP7sCanvasiih.part.0+0x23e>
1000e34a:	2903      	cmp	r1, #3
1000e34c:	d100      	bne.n	1000e350 <_Z9DrawPointP7sCanvasiih.part.0+0xa8>
1000e34e:	e0c5      	b.n	1000e4dc <_Z9DrawPointP7sCanvasiih.part.0+0x234>
1000e350:	2901      	cmp	r1, #1
1000e352:	d100      	bne.n	1000e356 <_Z9DrawPointP7sCanvasiih.part.0+0xae>
1000e354:	e0bb      	b.n	1000e4ce <_Z9DrawPointP7sCanvasiih.part.0+0x226>
				*d = (*d & 0x3f) | (col << 6);
1000e356:	223f      	movs	r2, #63	; 0x3f
1000e358:	7821      	ldrb	r1, [r4, #0]
1000e35a:	019b      	lsls	r3, r3, #6
1000e35c:	400a      	ands	r2, r1
1000e35e:	4313      	orrs	r3, r2
1000e360:	7023      	strb	r3, [r4, #0]
				break;
1000e362:	e7ae      	b.n	1000e2c2 <_Z9DrawPointP7sCanvasiih.part.0+0x1a>
			u8* d = canvas->img + x/8 + y*canvas->wb;
1000e364:	2507      	movs	r5, #7
1000e366:	6904      	ldr	r4, [r0, #16]
1000e368:	4362      	muls	r2, r4
1000e36a:	17cc      	asrs	r4, r1, #31
1000e36c:	402c      	ands	r4, r5
1000e36e:	1864      	adds	r4, r4, r1
1000e370:	10e4      	asrs	r4, r4, #3
1000e372:	1914      	adds	r4, r2, r4
1000e374:	6802      	ldr	r2, [r0, #0]
			switch (x & 7)
1000e376:	4029      	ands	r1, r5
			u8* d = canvas->img + x/8 + y*canvas->wb;
1000e378:	1914      	adds	r4, r2, r4
			switch (x & 7)
1000e37a:	4a6a      	ldr	r2, [pc, #424]	; (1000e524 <_Z9DrawPointP7sCanvasiih.part.0+0x27c>)
1000e37c:	0089      	lsls	r1, r1, #2
1000e37e:	5852      	ldr	r2, [r2, r1]
1000e380:	4697      	mov	pc, r2
			u8* d = canvas->img + x/2 + y*canvas->wb;
1000e382:	6904      	ldr	r4, [r0, #16]
1000e384:	6800      	ldr	r0, [r0, #0]
1000e386:	4362      	muls	r2, r4
1000e388:	0fcc      	lsrs	r4, r1, #31
1000e38a:	1864      	adds	r4, r4, r1
1000e38c:	1064      	asrs	r4, r4, #1
1000e38e:	1912      	adds	r2, r2, r4
1000e390:	1882      	adds	r2, r0, r2
			if ((x & 1) == 0)
1000e392:	07c9      	lsls	r1, r1, #31
1000e394:	d413      	bmi.n	1000e3be <_Z9DrawPointP7sCanvasiih.part.0+0x116>
					*d = (*d & 0x0f) | (col << 4);
1000e396:	210f      	movs	r1, #15
1000e398:	7810      	ldrb	r0, [r2, #0]
1000e39a:	011b      	lsls	r3, r3, #4
1000e39c:	4001      	ands	r1, r0
1000e39e:	430b      	orrs	r3, r1
1000e3a0:	7013      	strb	r3, [r2, #0]
1000e3a2:	e78e      	b.n	1000e2c2 <_Z9DrawPointP7sCanvasiih.part.0+0x1a>
				*d &= ~(0x80 >> (x & 7));
1000e3a4:	2280      	movs	r2, #128	; 0x80
1000e3a6:	410a      	asrs	r2, r1
1000e3a8:	0011      	movs	r1, r2
1000e3aa:	782a      	ldrb	r2, [r5, #0]
				*d2 = (*d2 & 0x0f) | (col << 4);
1000e3ac:	011b      	lsls	r3, r3, #4
				*d &= ~(0x80 >> (x & 7));
1000e3ae:	438a      	bics	r2, r1
1000e3b0:	702a      	strb	r2, [r5, #0]
				*d2 = (*d2 & 0x0f) | (col << 4);
1000e3b2:	220f      	movs	r2, #15
1000e3b4:	7821      	ldrb	r1, [r4, #0]
1000e3b6:	400a      	ands	r2, r1
1000e3b8:	4313      	orrs	r3, r2
1000e3ba:	7023      	strb	r3, [r4, #0]
1000e3bc:	e781      	b.n	1000e2c2 <_Z9DrawPointP7sCanvasiih.part.0+0x1a>
					*d = (*d & 0xf0) | col;
1000e3be:	200f      	movs	r0, #15
1000e3c0:	7811      	ldrb	r1, [r2, #0]
1000e3c2:	4381      	bics	r1, r0
1000e3c4:	430b      	orrs	r3, r1
1000e3c6:	7013      	strb	r3, [r2, #0]
1000e3c8:	e77b      	b.n	1000e2c2 <_Z9DrawPointP7sCanvasiih.part.0+0x1a>
				*d = (*d & ~0x01) | col;
1000e3ca:	2101      	movs	r1, #1
1000e3cc:	7822      	ldrb	r2, [r4, #0]
1000e3ce:	438a      	bics	r2, r1
1000e3d0:	4313      	orrs	r3, r2
1000e3d2:	7023      	strb	r3, [r4, #0]
				break;
1000e3d4:	e775      	b.n	1000e2c2 <_Z9DrawPointP7sCanvasiih.part.0+0x1a>
				*d = (*d & ~0x02) | (col << 1);
1000e3d6:	2102      	movs	r1, #2
1000e3d8:	7822      	ldrb	r2, [r4, #0]
1000e3da:	005b      	lsls	r3, r3, #1
1000e3dc:	438a      	bics	r2, r1
1000e3de:	4313      	orrs	r3, r2
1000e3e0:	7023      	strb	r3, [r4, #0]
				break;
1000e3e2:	e76e      	b.n	1000e2c2 <_Z9DrawPointP7sCanvasiih.part.0+0x1a>
				*d = (*d & ~0x04) | (col << 2);
1000e3e4:	2104      	movs	r1, #4
1000e3e6:	7822      	ldrb	r2, [r4, #0]
1000e3e8:	009b      	lsls	r3, r3, #2
1000e3ea:	438a      	bics	r2, r1
1000e3ec:	4313      	orrs	r3, r2
1000e3ee:	7023      	strb	r3, [r4, #0]
				break;
1000e3f0:	e767      	b.n	1000e2c2 <_Z9DrawPointP7sCanvasiih.part.0+0x1a>
				*d = (*d & ~0x08) | (col << 3);
1000e3f2:	2108      	movs	r1, #8
1000e3f4:	7822      	ldrb	r2, [r4, #0]
1000e3f6:	00db      	lsls	r3, r3, #3
1000e3f8:	438a      	bics	r2, r1
1000e3fa:	4313      	orrs	r3, r2
1000e3fc:	7023      	strb	r3, [r4, #0]
				break;
1000e3fe:	e760      	b.n	1000e2c2 <_Z9DrawPointP7sCanvasiih.part.0+0x1a>
				*d = (*d & ~0x10) | (col << 4);
1000e400:	2110      	movs	r1, #16
1000e402:	7822      	ldrb	r2, [r4, #0]
1000e404:	011b      	lsls	r3, r3, #4
1000e406:	438a      	bics	r2, r1
1000e408:	4313      	orrs	r3, r2
1000e40a:	7023      	strb	r3, [r4, #0]
				break;
1000e40c:	e759      	b.n	1000e2c2 <_Z9DrawPointP7sCanvasiih.part.0+0x1a>
				*d = (*d & ~0x20) | (col << 5);
1000e40e:	2120      	movs	r1, #32
1000e410:	7822      	ldrb	r2, [r4, #0]
1000e412:	015b      	lsls	r3, r3, #5
1000e414:	438a      	bics	r2, r1
1000e416:	4313      	orrs	r3, r2
1000e418:	7023      	strb	r3, [r4, #0]
				break;
1000e41a:	e752      	b.n	1000e2c2 <_Z9DrawPointP7sCanvasiih.part.0+0x1a>
				*d = (*d & ~0x40) | (col << 6);
1000e41c:	2140      	movs	r1, #64	; 0x40
1000e41e:	7822      	ldrb	r2, [r4, #0]
1000e420:	019b      	lsls	r3, r3, #6
1000e422:	438a      	bics	r2, r1
1000e424:	4313      	orrs	r3, r2
1000e426:	7023      	strb	r3, [r4, #0]
				break;
1000e428:	e74b      	b.n	1000e2c2 <_Z9DrawPointP7sCanvasiih.part.0+0x1a>
				*d = (*d & ~0x01) | col;
1000e42a:	2101      	movs	r1, #1
1000e42c:	7830      	ldrb	r0, [r6, #0]
1000e42e:	4388      	bics	r0, r1
1000e430:	4303      	orrs	r3, r0
1000e432:	7033      	strb	r3, [r6, #0]
				*d2 = (*d2 & ~0x01) | col2;
1000e434:	7823      	ldrb	r3, [r4, #0]
1000e436:	438b      	bics	r3, r1
1000e438:	431a      	orrs	r2, r3
1000e43a:	7022      	strb	r2, [r4, #0]
				break;
1000e43c:	e741      	b.n	1000e2c2 <_Z9DrawPointP7sCanvasiih.part.0+0x1a>
				*d = (*d & ~0x02) | (col << 1);
1000e43e:	2502      	movs	r5, #2
1000e440:	7831      	ldrb	r1, [r6, #0]
1000e442:	005b      	lsls	r3, r3, #1
1000e444:	43a9      	bics	r1, r5
1000e446:	430b      	orrs	r3, r1
1000e448:	7033      	strb	r3, [r6, #0]
				*d2 = (*d2 & ~0x02) | (col2 << 1);
1000e44a:	7823      	ldrb	r3, [r4, #0]
1000e44c:	0052      	lsls	r2, r2, #1
1000e44e:	43ab      	bics	r3, r5
1000e450:	431a      	orrs	r2, r3
1000e452:	7022      	strb	r2, [r4, #0]
				break;
1000e454:	e735      	b.n	1000e2c2 <_Z9DrawPointP7sCanvasiih.part.0+0x1a>
				*d = (*d & ~0x04) | (col << 2);
1000e456:	2504      	movs	r5, #4
1000e458:	7831      	ldrb	r1, [r6, #0]
1000e45a:	009b      	lsls	r3, r3, #2
1000e45c:	43a9      	bics	r1, r5
1000e45e:	430b      	orrs	r3, r1
1000e460:	7033      	strb	r3, [r6, #0]
				*d2 = (*d2 & ~0x04) | (col2 << 2);
1000e462:	7823      	ldrb	r3, [r4, #0]
1000e464:	0092      	lsls	r2, r2, #2
1000e466:	43ab      	bics	r3, r5
1000e468:	431a      	orrs	r2, r3
1000e46a:	7022      	strb	r2, [r4, #0]
				break;
1000e46c:	e729      	b.n	1000e2c2 <_Z9DrawPointP7sCanvasiih.part.0+0x1a>
				*d = (*d & ~0x08) | (col << 3);
1000e46e:	2508      	movs	r5, #8
1000e470:	7831      	ldrb	r1, [r6, #0]
1000e472:	00db      	lsls	r3, r3, #3
1000e474:	43a9      	bics	r1, r5
1000e476:	430b      	orrs	r3, r1
1000e478:	7033      	strb	r3, [r6, #0]
				*d2 = (*d2 & ~0x08) | (col2 << 3);
1000e47a:	7823      	ldrb	r3, [r4, #0]
1000e47c:	00d2      	lsls	r2, r2, #3
1000e47e:	43ab      	bics	r3, r5
1000e480:	431a      	orrs	r2, r3
1000e482:	7022      	strb	r2, [r4, #0]
				break;
1000e484:	e71d      	b.n	1000e2c2 <_Z9DrawPointP7sCanvasiih.part.0+0x1a>
				*d = (*d & ~0x10) | (col << 4);
1000e486:	2510      	movs	r5, #16
1000e488:	7831      	ldrb	r1, [r6, #0]
1000e48a:	011b      	lsls	r3, r3, #4
1000e48c:	43a9      	bics	r1, r5
1000e48e:	430b      	orrs	r3, r1
1000e490:	7033      	strb	r3, [r6, #0]
				*d2 = (*d2 & ~0x10) | (col2 << 4);
1000e492:	7823      	ldrb	r3, [r4, #0]
1000e494:	0112      	lsls	r2, r2, #4
1000e496:	43ab      	bics	r3, r5
1000e498:	431a      	orrs	r2, r3
1000e49a:	7022      	strb	r2, [r4, #0]
				break;
1000e49c:	e711      	b.n	1000e2c2 <_Z9DrawPointP7sCanvasiih.part.0+0x1a>
				*d = (*d & ~0x20) | (col << 5);
1000e49e:	2520      	movs	r5, #32
1000e4a0:	7831      	ldrb	r1, [r6, #0]
1000e4a2:	015b      	lsls	r3, r3, #5
1000e4a4:	43a9      	bics	r1, r5
1000e4a6:	430b      	orrs	r3, r1
1000e4a8:	7033      	strb	r3, [r6, #0]
				*d2 = (*d2 & ~0x20) | (col2 << 5);
1000e4aa:	7823      	ldrb	r3, [r4, #0]
1000e4ac:	0152      	lsls	r2, r2, #5
1000e4ae:	43ab      	bics	r3, r5
1000e4b0:	431a      	orrs	r2, r3
1000e4b2:	7022      	strb	r2, [r4, #0]
				break;
1000e4b4:	e705      	b.n	1000e2c2 <_Z9DrawPointP7sCanvasiih.part.0+0x1a>
				*d = (*d & ~0x40) | (col << 6);
1000e4b6:	2540      	movs	r5, #64	; 0x40
1000e4b8:	7831      	ldrb	r1, [r6, #0]
1000e4ba:	019b      	lsls	r3, r3, #6
1000e4bc:	43a9      	bics	r1, r5
1000e4be:	430b      	orrs	r3, r1
1000e4c0:	7033      	strb	r3, [r6, #0]
				*d2 = (*d2 & ~0x40) | (col2 << 6);
1000e4c2:	7823      	ldrb	r3, [r4, #0]
1000e4c4:	0192      	lsls	r2, r2, #6
1000e4c6:	43ab      	bics	r3, r5
1000e4c8:	431a      	orrs	r2, r3
1000e4ca:	7022      	strb	r2, [r4, #0]
				break;
1000e4cc:	e6f9      	b.n	1000e2c2 <_Z9DrawPointP7sCanvasiih.part.0+0x1a>
				*d = (*d & 0xcf) | (col << 4);
1000e4ce:	2130      	movs	r1, #48	; 0x30
1000e4d0:	7822      	ldrb	r2, [r4, #0]
1000e4d2:	011b      	lsls	r3, r3, #4
1000e4d4:	438a      	bics	r2, r1
1000e4d6:	4313      	orrs	r3, r2
1000e4d8:	7023      	strb	r3, [r4, #0]
				break;
1000e4da:	e6f2      	b.n	1000e2c2 <_Z9DrawPointP7sCanvasiih.part.0+0x1a>
				*d = (*d & 0xfc) | col;
1000e4dc:	7822      	ldrb	r2, [r4, #0]
1000e4de:	438a      	bics	r2, r1
1000e4e0:	4313      	orrs	r3, r2
1000e4e2:	7023      	strb	r3, [r4, #0]
				break;
1000e4e4:	e6ed      	b.n	1000e2c2 <_Z9DrawPointP7sCanvasiih.part.0+0x1a>
				*d = (*d & 0xf3) | (col << 2);
1000e4e6:	210c      	movs	r1, #12
1000e4e8:	7822      	ldrb	r2, [r4, #0]
1000e4ea:	009b      	lsls	r3, r3, #2
1000e4ec:	438a      	bics	r2, r1
1000e4ee:	4313      	orrs	r3, r2
1000e4f0:	7023      	strb	r3, [r4, #0]
				break;
1000e4f2:	e6e6      	b.n	1000e2c2 <_Z9DrawPointP7sCanvasiih.part.0+0x1a>
				*d = (*d & ~0x80) | (col << 7);
1000e4f4:	217f      	movs	r1, #127	; 0x7f
1000e4f6:	7835      	ldrb	r5, [r6, #0]
1000e4f8:	01db      	lsls	r3, r3, #7
1000e4fa:	400d      	ands	r5, r1
1000e4fc:	432b      	orrs	r3, r5
1000e4fe:	7033      	strb	r3, [r6, #0]
				*d2 = (*d2 & ~0x80) | (col2 << 7);
1000e500:	7823      	ldrb	r3, [r4, #0]
1000e502:	01d2      	lsls	r2, r2, #7
1000e504:	4019      	ands	r1, r3
1000e506:	4311      	orrs	r1, r2
1000e508:	7021      	strb	r1, [r4, #0]
				break;
1000e50a:	e6da      	b.n	1000e2c2 <_Z9DrawPointP7sCanvasiih.part.0+0x1a>
				*d = (*d & ~0x80) | (col << 7);
1000e50c:	227f      	movs	r2, #127	; 0x7f
1000e50e:	7821      	ldrb	r1, [r4, #0]
1000e510:	01db      	lsls	r3, r3, #7
1000e512:	400a      	ands	r2, r1
1000e514:	4313      	orrs	r3, r2
1000e516:	7023      	strb	r3, [r4, #0]
				break;
1000e518:	e6d3      	b.n	1000e2c2 <_Z9DrawPointP7sCanvasiih.part.0+0x1a>
1000e51a:	46c0      	nop			; (mov r8, r8)
1000e51c:	1002bf94 	.word	0x1002bf94
1000e520:	1002bfac 	.word	0x1002bfac
1000e524:	1002bfcc 	.word	0x1002bfcc

1000e528 <_Z8DrawRectP7sCanvasiiiih>:
{
1000e528:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e52a:	4657      	mov	r7, sl
1000e52c:	464e      	mov	r6, r9
1000e52e:	4645      	mov	r5, r8
1000e530:	46de      	mov	lr, fp
1000e532:	b5e0      	push	{r5, r6, r7, lr}
1000e534:	b095      	sub	sp, #84	; 0x54
1000e536:	4699      	mov	r9, r3
1000e538:	ab1e      	add	r3, sp, #120	; 0x78
1000e53a:	cb10      	ldmia	r3!, {r4}
1000e53c:	781b      	ldrb	r3, [r3, #0]
1000e53e:	46a2      	mov	sl, r4
1000e540:	4698      	mov	r8, r3
	if (x < 0)
1000e542:	2900      	cmp	r1, #0
1000e544:	db6a      	blt.n	1000e61c <_Z8DrawRectP7sCanvasiiiih+0xf4>
	if (x + w > canvas->w) w = canvas->w - x;
1000e546:	464b      	mov	r3, r9
1000e548:	18cc      	adds	r4, r1, r3
1000e54a:	6883      	ldr	r3, [r0, #8]
1000e54c:	42a3      	cmp	r3, r4
1000e54e:	da01      	bge.n	1000e554 <_Z8DrawRectP7sCanvasiiiih+0x2c>
1000e550:	1a5b      	subs	r3, r3, r1
1000e552:	4699      	mov	r9, r3
	if (w <= 0) return;
1000e554:	464b      	mov	r3, r9
1000e556:	2b00      	cmp	r3, #0
1000e558:	dd55      	ble.n	1000e606 <_Z8DrawRectP7sCanvasiiiih+0xde>
	if (y < 0)
1000e55a:	2a00      	cmp	r2, #0
1000e55c:	db5a      	blt.n	1000e614 <_Z8DrawRectP7sCanvasiiiih+0xec>
	if (y + h > canvas->h) h = canvas->h - y;
1000e55e:	4653      	mov	r3, sl
1000e560:	18d4      	adds	r4, r2, r3
1000e562:	68c3      	ldr	r3, [r0, #12]
1000e564:	42a3      	cmp	r3, r4
1000e566:	da01      	bge.n	1000e56c <_Z8DrawRectP7sCanvasiiiih+0x44>
1000e568:	1a9b      	subs	r3, r3, r2
1000e56a:	469a      	mov	sl, r3
	if (h <= 0) return;
1000e56c:	4653      	mov	r3, sl
1000e56e:	2b00      	cmp	r3, #0
1000e570:	dd49      	ble.n	1000e606 <_Z8DrawRectP7sCanvasiiiih+0xde>
	switch(canvas->format)
1000e572:	7d03      	ldrb	r3, [r0, #20]
1000e574:	2b05      	cmp	r3, #5
1000e576:	d846      	bhi.n	1000e606 <_Z8DrawRectP7sCanvasiiiih+0xde>
1000e578:	4c4c      	ldr	r4, [pc, #304]	; (1000e6ac <_Z8DrawRectP7sCanvasiiiih+0x184>)
1000e57a:	009b      	lsls	r3, r3, #2
1000e57c:	58e3      	ldr	r3, [r4, r3]
1000e57e:	469f      	mov	pc, r3
			int wb = canvas->wb;
1000e580:	6903      	ldr	r3, [r0, #16]
			u8* d = canvas->img + x/2 + y*wb;
1000e582:	104e      	asrs	r6, r1, #1
1000e584:	435a      	muls	r2, r3
			int wb = canvas->wb;
1000e586:	9301      	str	r3, [sp, #4]
			u8* d = canvas->img + x/2 + y*wb;
1000e588:	18b2      	adds	r2, r6, r2
			u8 col2 = col << 4;
1000e58a:	4643      	mov	r3, r8
			u8* d = canvas->img + x/2 + y*wb;
1000e58c:	6806      	ldr	r6, [r0, #0]
			u8 col2 = col << 4;
1000e58e:	011b      	lsls	r3, r3, #4
			u8* d = canvas->img + x/2 + y*wb;
1000e590:	18b6      	adds	r6, r6, r2
			u8 col3 = col2 | col;
1000e592:	4642      	mov	r2, r8
			u8 col2 = col << 4;
1000e594:	b2db      	uxtb	r3, r3
			u8 col3 = col2 | col;
1000e596:	431a      	orrs	r2, r3
			u8 col2 = col << 4;
1000e598:	9302      	str	r3, [sp, #8]
				if ((x & 1) != 0)
1000e59a:	2301      	movs	r3, #1
1000e59c:	400b      	ands	r3, r1
1000e59e:	9300      	str	r3, [sp, #0]
					i--;
1000e5a0:	464b      	mov	r3, r9
1000e5a2:	3b01      	subs	r3, #1
1000e5a4:	9303      	str	r3, [sp, #12]
1000e5a6:	4643      	mov	r3, r8
1000e5a8:	4693      	mov	fp, r2
1000e5aa:	9304      	str	r3, [sp, #16]
				if ((x & 1) != 0)
1000e5ac:	9b00      	ldr	r3, [sp, #0]
1000e5ae:	464c      	mov	r4, r9
1000e5b0:	0035      	movs	r5, r6
1000e5b2:	2b00      	cmp	r3, #0
1000e5b4:	d007      	beq.n	1000e5c6 <_Z8DrawRectP7sCanvasiiiih+0x9e>
					*d = (*d & 0xf0) | col;
1000e5b6:	220f      	movs	r2, #15
1000e5b8:	7833      	ldrb	r3, [r6, #0]
					i--;
1000e5ba:	9c03      	ldr	r4, [sp, #12]
					*d = (*d & 0xf0) | col;
1000e5bc:	4393      	bics	r3, r2
1000e5be:	9a04      	ldr	r2, [sp, #16]
1000e5c0:	1c75      	adds	r5, r6, #1
1000e5c2:	4313      	orrs	r3, r2
1000e5c4:	7033      	strb	r3, [r6, #0]
				for (; i > 1; i -= 2) *d++ = col3;
1000e5c6:	2c01      	cmp	r4, #1
1000e5c8:	dd0b      	ble.n	1000e5e2 <_Z8DrawRectP7sCanvasiiiih+0xba>
1000e5ca:	3c02      	subs	r4, #2
1000e5cc:	0867      	lsrs	r7, r4, #1
1000e5ce:	1c7b      	adds	r3, r7, #1
1000e5d0:	4698      	mov	r8, r3
1000e5d2:	0028      	movs	r0, r5
1000e5d4:	001a      	movs	r2, r3
1000e5d6:	4659      	mov	r1, fp
1000e5d8:	f7f2 fd84 	bl	100010e4 <__wrap_memset>
1000e5dc:	007f      	lsls	r7, r7, #1
1000e5de:	4445      	add	r5, r8
1000e5e0:	1be4      	subs	r4, r4, r7
				if (i > 0) *d = (*d & 0x0f) | col2;
1000e5e2:	2c01      	cmp	r4, #1
1000e5e4:	d105      	bne.n	1000e5f2 <_Z8DrawRectP7sCanvasiiiih+0xca>
1000e5e6:	220f      	movs	r2, #15
1000e5e8:	782b      	ldrb	r3, [r5, #0]
1000e5ea:	4013      	ands	r3, r2
1000e5ec:	9a02      	ldr	r2, [sp, #8]
1000e5ee:	4313      	orrs	r3, r2
1000e5f0:	702b      	strb	r3, [r5, #0]
				d = d0 + wb;
1000e5f2:	9b01      	ldr	r3, [sp, #4]
1000e5f4:	469c      	mov	ip, r3
			for (; h > 0; h--)
1000e5f6:	2301      	movs	r3, #1
1000e5f8:	425b      	negs	r3, r3
				d = d0 + wb;
1000e5fa:	4466      	add	r6, ip
			for (; h > 0; h--)
1000e5fc:	469c      	mov	ip, r3
1000e5fe:	44e2      	add	sl, ip
1000e600:	4653      	mov	r3, sl
1000e602:	2b00      	cmp	r3, #0
1000e604:	d1d2      	bne.n	1000e5ac <_Z8DrawRectP7sCanvasiiiih+0x84>
}
1000e606:	b015      	add	sp, #84	; 0x54
1000e608:	bcf0      	pop	{r4, r5, r6, r7}
1000e60a:	46bb      	mov	fp, r7
1000e60c:	46b2      	mov	sl, r6
1000e60e:	46a9      	mov	r9, r5
1000e610:	46a0      	mov	r8, r4
1000e612:	bdf0      	pop	{r4, r5, r6, r7, pc}
		h += y;
1000e614:	4492      	add	sl, r2
		y = 0;
1000e616:	4654      	mov	r4, sl
1000e618:	2200      	movs	r2, #0
1000e61a:	e7a2      	b.n	1000e562 <_Z8DrawRectP7sCanvasiiiih+0x3a>
		w += x;
1000e61c:	4489      	add	r9, r1
		x = 0;
1000e61e:	464c      	mov	r4, r9
1000e620:	2100      	movs	r1, #0
1000e622:	e792      	b.n	1000e54a <_Z8DrawRectP7sCanvasiiiih+0x22>
			int wb = canvas->wb;
1000e624:	6903      	ldr	r3, [r0, #16]
1000e626:	001c      	movs	r4, r3
			u8* d = canvas->img + x/8 + y*wb; // 1st plane
1000e628:	4362      	muls	r2, r4
			int wb = canvas->wb;
1000e62a:	9306      	str	r3, [sp, #24]
			u8* d = canvas->img + x/8 + y*wb; // 1st plane
1000e62c:	10cb      	asrs	r3, r1, #3
1000e62e:	189a      	adds	r2, r3, r2
1000e630:	6803      	ldr	r3, [r0, #0]
1000e632:	469c      	mov	ip, r3
			u8* d2 = canvas->img2 + x/8 + y*wb; // 2nd plane
1000e634:	6843      	ldr	r3, [r0, #4]
			u8* d = canvas->img + x/8 + y*wb; // 1st plane
1000e636:	4494      	add	ip, r2
			u8* d2 = canvas->img2 + x/8 + y*wb; // 2nd plane
1000e638:	189d      	adds	r5, r3, r2
			u8 col2 = col >> 1;
1000e63a:	4643      	mov	r3, r8
1000e63c:	085a      	lsrs	r2, r3, #1
			col2 = (col2<<7)|(col2<<6)|(col2<<5)|(col2<<4)|(col2<<3)|(col2<<2)|(col2<<1)|col2;
1000e63e:	0190      	lsls	r0, r2, #6
1000e640:	01d3      	lsls	r3, r2, #7
1000e642:	4303      	orrs	r3, r0
1000e644:	4313      	orrs	r3, r2
1000e646:	0150      	lsls	r0, r2, #5
1000e648:	4303      	orrs	r3, r0
1000e64a:	0110      	lsls	r0, r2, #4
1000e64c:	4303      	orrs	r3, r0
1000e64e:	00d0      	lsls	r0, r2, #3
1000e650:	4303      	orrs	r3, r0
1000e652:	0090      	lsls	r0, r2, #2
1000e654:	4303      	orrs	r3, r0
1000e656:	0052      	lsls	r2, r2, #1
1000e658:	4313      	orrs	r3, r2
1000e65a:	b25a      	sxtb	r2, r3
1000e65c:	b2db      	uxtb	r3, r3
1000e65e:	4693      	mov	fp, r2
1000e660:	9307      	str	r3, [sp, #28]
			col &= 1;
1000e662:	2201      	movs	r2, #1
1000e664:	4643      	mov	r3, r8
1000e666:	401a      	ands	r2, r3
			col = (col<<7)|(col<<6)|(col<<5)|(col<<4)|(col<<3)|(col<<2)|(col<<1)|col;
1000e668:	0190      	lsls	r0, r2, #6
1000e66a:	01d3      	lsls	r3, r2, #7
1000e66c:	4303      	orrs	r3, r0
1000e66e:	4313      	orrs	r3, r2
1000e670:	0150      	lsls	r0, r2, #5
1000e672:	4303      	orrs	r3, r0
1000e674:	0110      	lsls	r0, r2, #4
1000e676:	4303      	orrs	r3, r0
1000e678:	00d0      	lsls	r0, r2, #3
1000e67a:	4303      	orrs	r3, r0
1000e67c:	0090      	lsls	r0, r2, #2
1000e67e:	4303      	orrs	r3, r0
1000e680:	0052      	lsls	r2, r2, #1
1000e682:	4313      	orrs	r3, r2
1000e684:	b25a      	sxtb	r2, r3
1000e686:	9308      	str	r3, [sp, #32]
				dx = x & 7;
1000e688:	2307      	movs	r3, #7
1000e68a:	400b      	ands	r3, r1
			col = (col<<7)|(col<<6)|(col<<5)|(col<<4)|(col<<3)|(col<<2)|(col<<1)|col;
1000e68c:	4690      	mov	r8, r2
				dx = x & 7;
1000e68e:	9303      	str	r3, [sp, #12]
1000e690:	001a      	movs	r2, r3
					m = 0x80 >> dx; // mask of 1 color bit
1000e692:	2380      	movs	r3, #128	; 0x80
1000e694:	4113      	asrs	r3, r2
1000e696:	9309      	str	r3, [sp, #36]	; 0x24
						*d = (*d & ~m) | (col & m); // set 1 pixel
1000e698:	105b      	asrs	r3, r3, #1
1000e69a:	930a      	str	r3, [sp, #40]	; 0x28
1000e69c:	464b      	mov	r3, r9
1000e69e:	9305      	str	r3, [sp, #20]
1000e6a0:	4653      	mov	r3, sl
1000e6a2:	4647      	mov	r7, r8
1000e6a4:	46a9      	mov	r9, r5
1000e6a6:	46e2      	mov	sl, ip
1000e6a8:	9301      	str	r3, [sp, #4]
1000e6aa:	e0b7      	b.n	1000e81c <_Z8DrawRectP7sCanvasiiiih+0x2f4>
1000e6ac:	1002bfec 	.word	0x1002bfec
				for (; i > 7; i -= 8)
1000e6b0:	9c05      	ldr	r4, [sp, #20]
1000e6b2:	2c07      	cmp	r4, #7
1000e6b4:	dc00      	bgt.n	1000e6b8 <_Z8DrawRectP7sCanvasiiiih+0x190>
1000e6b6:	e3e7      	b.n	1000ee88 <_Z8DrawRectP7sCanvasiiiih+0x960>
1000e6b8:	464b      	mov	r3, r9
1000e6ba:	4650      	mov	r0, sl
1000e6bc:	9300      	str	r3, [sp, #0]
1000e6be:	2308      	movs	r3, #8
1000e6c0:	425b      	negs	r3, r3
1000e6c2:	469c      	mov	ip, r3
1000e6c4:	44a4      	add	ip, r4
1000e6c6:	4663      	mov	r3, ip
1000e6c8:	2201      	movs	r2, #1
1000e6ca:	9302      	str	r3, [sp, #8]
1000e6cc:	08db      	lsrs	r3, r3, #3
1000e6ce:	4690      	mov	r8, r2
1000e6d0:	9304      	str	r3, [sp, #16]
1000e6d2:	2c07      	cmp	r4, #7
1000e6d4:	dd01      	ble.n	1000e6da <_Z8DrawRectP7sCanvasiiiih+0x1b2>
1000e6d6:	3301      	adds	r3, #1
1000e6d8:	4698      	mov	r8, r3
1000e6da:	4643      	mov	r3, r8
1000e6dc:	9a00      	ldr	r2, [sp, #0]
1000e6de:	18c6      	adds	r6, r0, r3
1000e6e0:	0015      	movs	r5, r2
1000e6e2:	2300      	movs	r3, #0
1000e6e4:	4445      	add	r5, r8
1000e6e6:	42a8      	cmp	r0, r5
1000e6e8:	415b      	adcs	r3, r3
1000e6ea:	2b00      	cmp	r3, #0
1000e6ec:	d102      	bne.n	1000e6f4 <_Z8DrawRectP7sCanvasiiiih+0x1cc>
1000e6ee:	42b2      	cmp	r2, r6
1000e6f0:	d200      	bcs.n	1000e6f4 <_Z8DrawRectP7sCanvasiiiih+0x1cc>
1000e6f2:	e3b9      	b.n	1000ee68 <_Z8DrawRectP7sCanvasiiiih+0x940>
					*d++ = col;
1000e6f4:	4642      	mov	r2, r8
1000e6f6:	9908      	ldr	r1, [sp, #32]
1000e6f8:	f7f2 fcf4 	bl	100010e4 <__wrap_memset>
					*d2++ = col2;
1000e6fc:	4642      	mov	r2, r8
1000e6fe:	9907      	ldr	r1, [sp, #28]
1000e700:	9800      	ldr	r0, [sp, #0]
1000e702:	f7f2 fcef 	bl	100010e4 <__wrap_memset>
1000e706:	2300      	movs	r3, #0
1000e708:	2c07      	cmp	r4, #7
1000e70a:	dd02      	ble.n	1000e712 <_Z8DrawRectP7sCanvasiiiih+0x1ea>
1000e70c:	9b04      	ldr	r3, [sp, #16]
1000e70e:	00db      	lsls	r3, r3, #3
1000e710:	425b      	negs	r3, r3
				for (; i > 7; i -= 8)
1000e712:	9a02      	ldr	r2, [sp, #8]
1000e714:	189c      	adds	r4, r3, r2
				for (; i > 0; i--)
1000e716:	2c00      	cmp	r4, #0
1000e718:	d100      	bne.n	1000e71c <_Z8DrawRectP7sCanvasiiiih+0x1f4>
1000e71a:	e075      	b.n	1000e808 <_Z8DrawRectP7sCanvasiiiih+0x2e0>
					*d = (*d & ~m) | (col & m); // set 1 pixel
1000e71c:	2300      	movs	r3, #0
1000e71e:	003a      	movs	r2, r7
1000e720:	217f      	movs	r1, #127	; 0x7f
1000e722:	56f3      	ldrsb	r3, [r6, r3]
1000e724:	405a      	eors	r2, r3
1000e726:	438a      	bics	r2, r1
1000e728:	4053      	eors	r3, r2
1000e72a:	7033      	strb	r3, [r6, #0]
					*d2 = (*d2 & ~m) | (col2 & m); // set 1 pixel
1000e72c:	2300      	movs	r3, #0
1000e72e:	465a      	mov	r2, fp
1000e730:	56eb      	ldrsb	r3, [r5, r3]
1000e732:	405a      	eors	r2, r3
1000e734:	438a      	bics	r2, r1
1000e736:	4053      	eors	r3, r2
1000e738:	702b      	strb	r3, [r5, #0]
				for (; i > 0; i--)
1000e73a:	2c01      	cmp	r4, #1
1000e73c:	d064      	beq.n	1000e808 <_Z8DrawRectP7sCanvasiiiih+0x2e0>
					*d = (*d & ~m) | (col & m); // set 1 pixel
1000e73e:	2300      	movs	r3, #0
1000e740:	0039      	movs	r1, r7
1000e742:	2240      	movs	r2, #64	; 0x40
1000e744:	56f3      	ldrsb	r3, [r6, r3]
1000e746:	4059      	eors	r1, r3
1000e748:	4011      	ands	r1, r2
1000e74a:	404b      	eors	r3, r1
1000e74c:	7033      	strb	r3, [r6, #0]
					*d2 = (*d2 & ~m) | (col2 & m); // set 1 pixel
1000e74e:	2300      	movs	r3, #0
1000e750:	4659      	mov	r1, fp
1000e752:	56eb      	ldrsb	r3, [r5, r3]
1000e754:	4059      	eors	r1, r3
1000e756:	400a      	ands	r2, r1
1000e758:	4053      	eors	r3, r2
1000e75a:	702b      	strb	r3, [r5, #0]
				for (; i > 0; i--)
1000e75c:	2c02      	cmp	r4, #2
1000e75e:	d053      	beq.n	1000e808 <_Z8DrawRectP7sCanvasiiiih+0x2e0>
					*d = (*d & ~m) | (col & m); // set 1 pixel
1000e760:	2300      	movs	r3, #0
1000e762:	0039      	movs	r1, r7
1000e764:	2220      	movs	r2, #32
1000e766:	56f3      	ldrsb	r3, [r6, r3]
1000e768:	4059      	eors	r1, r3
1000e76a:	4011      	ands	r1, r2
1000e76c:	404b      	eors	r3, r1
1000e76e:	7033      	strb	r3, [r6, #0]
					*d2 = (*d2 & ~m) | (col2 & m); // set 1 pixel
1000e770:	2300      	movs	r3, #0
1000e772:	4659      	mov	r1, fp
1000e774:	56eb      	ldrsb	r3, [r5, r3]
1000e776:	4059      	eors	r1, r3
1000e778:	400a      	ands	r2, r1
1000e77a:	4053      	eors	r3, r2
1000e77c:	702b      	strb	r3, [r5, #0]
				for (; i > 0; i--)
1000e77e:	2c03      	cmp	r4, #3
1000e780:	d042      	beq.n	1000e808 <_Z8DrawRectP7sCanvasiiiih+0x2e0>
					*d = (*d & ~m) | (col & m); // set 1 pixel
1000e782:	2300      	movs	r3, #0
1000e784:	0039      	movs	r1, r7
1000e786:	2210      	movs	r2, #16
1000e788:	56f3      	ldrsb	r3, [r6, r3]
1000e78a:	4059      	eors	r1, r3
1000e78c:	4011      	ands	r1, r2
1000e78e:	404b      	eors	r3, r1
1000e790:	7033      	strb	r3, [r6, #0]
					*d2 = (*d2 & ~m) | (col2 & m); // set 1 pixel
1000e792:	2300      	movs	r3, #0
1000e794:	4659      	mov	r1, fp
1000e796:	56eb      	ldrsb	r3, [r5, r3]
1000e798:	4059      	eors	r1, r3
1000e79a:	400a      	ands	r2, r1
1000e79c:	4053      	eors	r3, r2
1000e79e:	702b      	strb	r3, [r5, #0]
				for (; i > 0; i--)
1000e7a0:	2c04      	cmp	r4, #4
1000e7a2:	d031      	beq.n	1000e808 <_Z8DrawRectP7sCanvasiiiih+0x2e0>
					*d = (*d & ~m) | (col & m); // set 1 pixel
1000e7a4:	2300      	movs	r3, #0
1000e7a6:	0039      	movs	r1, r7
1000e7a8:	2208      	movs	r2, #8
1000e7aa:	56f3      	ldrsb	r3, [r6, r3]
1000e7ac:	4059      	eors	r1, r3
1000e7ae:	4011      	ands	r1, r2
1000e7b0:	404b      	eors	r3, r1
1000e7b2:	7033      	strb	r3, [r6, #0]
					*d2 = (*d2 & ~m) | (col2 & m); // set 1 pixel
1000e7b4:	2300      	movs	r3, #0
1000e7b6:	4659      	mov	r1, fp
1000e7b8:	56eb      	ldrsb	r3, [r5, r3]
1000e7ba:	4059      	eors	r1, r3
1000e7bc:	400a      	ands	r2, r1
1000e7be:	4053      	eors	r3, r2
1000e7c0:	702b      	strb	r3, [r5, #0]
				for (; i > 0; i--)
1000e7c2:	1f61      	subs	r1, r4, #5
1000e7c4:	2c05      	cmp	r4, #5
1000e7c6:	d01f      	beq.n	1000e808 <_Z8DrawRectP7sCanvasiiiih+0x2e0>
					*d = (*d & ~m) | (col & m); // set 1 pixel
1000e7c8:	2300      	movs	r3, #0
1000e7ca:	0038      	movs	r0, r7
1000e7cc:	2204      	movs	r2, #4
1000e7ce:	56f3      	ldrsb	r3, [r6, r3]
1000e7d0:	4058      	eors	r0, r3
1000e7d2:	4010      	ands	r0, r2
1000e7d4:	4043      	eors	r3, r0
1000e7d6:	7033      	strb	r3, [r6, #0]
					*d2 = (*d2 & ~m) | (col2 & m); // set 1 pixel
1000e7d8:	2300      	movs	r3, #0
1000e7da:	4658      	mov	r0, fp
1000e7dc:	56eb      	ldrsb	r3, [r5, r3]
1000e7de:	4058      	eors	r0, r3
1000e7e0:	4002      	ands	r2, r0
1000e7e2:	4053      	eors	r3, r2
1000e7e4:	702b      	strb	r3, [r5, #0]
				for (; i > 0; i--)
1000e7e6:	2901      	cmp	r1, #1
1000e7e8:	d00e      	beq.n	1000e808 <_Z8DrawRectP7sCanvasiiiih+0x2e0>
					*d = (*d & ~m) | (col & m); // set 1 pixel
1000e7ea:	2300      	movs	r3, #0
1000e7ec:	0039      	movs	r1, r7
1000e7ee:	2202      	movs	r2, #2
1000e7f0:	56f3      	ldrsb	r3, [r6, r3]
1000e7f2:	4059      	eors	r1, r3
1000e7f4:	4011      	ands	r1, r2
1000e7f6:	404b      	eors	r3, r1
1000e7f8:	7033      	strb	r3, [r6, #0]
					*d2 = (*d2 & ~m) | (col2 & m); // set 1 pixel
1000e7fa:	2300      	movs	r3, #0
1000e7fc:	4659      	mov	r1, fp
1000e7fe:	56eb      	ldrsb	r3, [r5, r3]
1000e800:	4059      	eors	r1, r3
1000e802:	400a      	ands	r2, r1
1000e804:	4053      	eors	r3, r2
1000e806:	702b      	strb	r3, [r5, #0]
				d = d0 + wb;
1000e808:	9b06      	ldr	r3, [sp, #24]
1000e80a:	469c      	mov	ip, r3
			for (; h > 0; h--)
1000e80c:	9b01      	ldr	r3, [sp, #4]
				d = d0 + wb;
1000e80e:	44e2      	add	sl, ip
			for (; h > 0; h--)
1000e810:	3b01      	subs	r3, #1
				d2 = d02 + wb;
1000e812:	44e1      	add	r9, ip
			for (; h > 0; h--)
1000e814:	9301      	str	r3, [sp, #4]
1000e816:	2b00      	cmp	r3, #0
1000e818:	d100      	bne.n	1000e81c <_Z8DrawRectP7sCanvasiiiih+0x2f4>
1000e81a:	e6f4      	b.n	1000e606 <_Z8DrawRectP7sCanvasiiiih+0xde>
				if (dx != 0)
1000e81c:	9b03      	ldr	r3, [sp, #12]
1000e81e:	2b00      	cmp	r3, #0
1000e820:	d100      	bne.n	1000e824 <_Z8DrawRectP7sCanvasiiiih+0x2fc>
1000e822:	e745      	b.n	1000e6b0 <_Z8DrawRectP7sCanvasiiiih+0x188>
1000e824:	0018      	movs	r0, r3
						*d = (*d & ~m) | (col & m); // set 1 pixel
1000e826:	2100      	movs	r1, #0
1000e828:	4653      	mov	r3, sl
1000e82a:	5659      	ldrsb	r1, [r3, r1]
1000e82c:	003b      	movs	r3, r7
1000e82e:	9e09      	ldr	r6, [sp, #36]	; 0x24
1000e830:	404b      	eors	r3, r1
1000e832:	b272      	sxtb	r2, r6
1000e834:	4013      	ands	r3, r2
1000e836:	4059      	eors	r1, r3
1000e838:	4653      	mov	r3, sl
1000e83a:	7019      	strb	r1, [r3, #0]
						*d2 = (*d2 & ~m) | (col2 & m); // set 1 pixel
1000e83c:	464b      	mov	r3, r9
1000e83e:	4659      	mov	r1, fp
1000e840:	781b      	ldrb	r3, [r3, #0]
1000e842:	b25b      	sxtb	r3, r3
1000e844:	4059      	eors	r1, r3
1000e846:	400a      	ands	r2, r1
1000e848:	4053      	eors	r3, r2
1000e84a:	464a      	mov	r2, r9
1000e84c:	7013      	strb	r3, [r2, #0]
						if (dx == 8) { i--; break; } // x is aligned
1000e84e:	2807      	cmp	r0, #7
1000e850:	d101      	bne.n	1000e856 <_Z8DrawRectP7sCanvasiiiih+0x32e>
1000e852:	f000 fd13 	bl	1000f27c <_Z8DrawRectP7sCanvasiiiih+0xd54>
					for (; i > 0; i--)
1000e856:	9d05      	ldr	r5, [sp, #20]
1000e858:	1e6c      	subs	r4, r5, #1
1000e85a:	2d01      	cmp	r5, #1
1000e85c:	d0d4      	beq.n	1000e808 <_Z8DrawRectP7sCanvasiiiih+0x2e0>
						*d = (*d & ~m) | (col & m); // set 1 pixel
1000e85e:	4653      	mov	r3, sl
1000e860:	003a      	movs	r2, r7
1000e862:	781b      	ldrb	r3, [r3, #0]
1000e864:	990a      	ldr	r1, [sp, #40]	; 0x28
1000e866:	b25b      	sxtb	r3, r3
1000e868:	405a      	eors	r2, r3
1000e86a:	400a      	ands	r2, r1
1000e86c:	4053      	eors	r3, r2
1000e86e:	4652      	mov	r2, sl
1000e870:	7013      	strb	r3, [r2, #0]
						*d2 = (*d2 & ~m) | (col2 & m); // set 1 pixel
1000e872:	464b      	mov	r3, r9
1000e874:	465a      	mov	r2, fp
1000e876:	781b      	ldrb	r3, [r3, #0]
1000e878:	b25b      	sxtb	r3, r3
1000e87a:	405a      	eors	r2, r3
1000e87c:	400a      	ands	r2, r1
1000e87e:	4053      	eors	r3, r2
1000e880:	464a      	mov	r2, r9
1000e882:	7013      	strb	r3, [r2, #0]
						if (dx == 8) { i--; break; } // x is aligned
1000e884:	2806      	cmp	r0, #6
1000e886:	d078      	beq.n	1000e97a <_Z8DrawRectP7sCanvasiiiih+0x452>
						m >>= 1; // shift mask
1000e888:	10b1      	asrs	r1, r6, #2
					for (; i > 0; i--)
1000e88a:	1eac      	subs	r4, r5, #2
1000e88c:	2d02      	cmp	r5, #2
1000e88e:	d0bb      	beq.n	1000e808 <_Z8DrawRectP7sCanvasiiiih+0x2e0>
						*d = (*d & ~m) | (col & m); // set 1 pixel
1000e890:	4653      	mov	r3, sl
1000e892:	2200      	movs	r2, #0
1000e894:	569a      	ldrsb	r2, [r3, r2]
1000e896:	003b      	movs	r3, r7
1000e898:	4053      	eors	r3, r2
1000e89a:	400b      	ands	r3, r1
1000e89c:	405a      	eors	r2, r3
1000e89e:	4653      	mov	r3, sl
1000e8a0:	701a      	strb	r2, [r3, #0]
						*d2 = (*d2 & ~m) | (col2 & m); // set 1 pixel
1000e8a2:	464b      	mov	r3, r9
1000e8a4:	465a      	mov	r2, fp
1000e8a6:	781b      	ldrb	r3, [r3, #0]
1000e8a8:	b25b      	sxtb	r3, r3
1000e8aa:	405a      	eors	r2, r3
1000e8ac:	400a      	ands	r2, r1
1000e8ae:	4053      	eors	r3, r2
1000e8b0:	464a      	mov	r2, r9
1000e8b2:	7013      	strb	r3, [r2, #0]
						if (dx == 8) { i--; break; } // x is aligned
1000e8b4:	2805      	cmp	r0, #5
1000e8b6:	d060      	beq.n	1000e97a <_Z8DrawRectP7sCanvasiiiih+0x452>
						m >>= 1; // shift mask
1000e8b8:	10f1      	asrs	r1, r6, #3
					for (; i > 0; i--)
1000e8ba:	1eec      	subs	r4, r5, #3
1000e8bc:	2d03      	cmp	r5, #3
1000e8be:	d0a3      	beq.n	1000e808 <_Z8DrawRectP7sCanvasiiiih+0x2e0>
						*d = (*d & ~m) | (col & m); // set 1 pixel
1000e8c0:	4653      	mov	r3, sl
1000e8c2:	2200      	movs	r2, #0
1000e8c4:	569a      	ldrsb	r2, [r3, r2]
1000e8c6:	003b      	movs	r3, r7
1000e8c8:	4053      	eors	r3, r2
1000e8ca:	400b      	ands	r3, r1
1000e8cc:	405a      	eors	r2, r3
1000e8ce:	4653      	mov	r3, sl
1000e8d0:	701a      	strb	r2, [r3, #0]
						*d2 = (*d2 & ~m) | (col2 & m); // set 1 pixel
1000e8d2:	464b      	mov	r3, r9
1000e8d4:	465a      	mov	r2, fp
1000e8d6:	781b      	ldrb	r3, [r3, #0]
1000e8d8:	b25b      	sxtb	r3, r3
1000e8da:	405a      	eors	r2, r3
1000e8dc:	400a      	ands	r2, r1
1000e8de:	4053      	eors	r3, r2
1000e8e0:	464a      	mov	r2, r9
1000e8e2:	7013      	strb	r3, [r2, #0]
						if (dx == 8) { i--; break; } // x is aligned
1000e8e4:	2804      	cmp	r0, #4
1000e8e6:	d048      	beq.n	1000e97a <_Z8DrawRectP7sCanvasiiiih+0x452>
						m >>= 1; // shift mask
1000e8e8:	1131      	asrs	r1, r6, #4
					for (; i > 0; i--)
1000e8ea:	1f2c      	subs	r4, r5, #4
1000e8ec:	2d04      	cmp	r5, #4
1000e8ee:	d08b      	beq.n	1000e808 <_Z8DrawRectP7sCanvasiiiih+0x2e0>
						*d = (*d & ~m) | (col & m); // set 1 pixel
1000e8f0:	4653      	mov	r3, sl
1000e8f2:	2200      	movs	r2, #0
1000e8f4:	569a      	ldrsb	r2, [r3, r2]
1000e8f6:	003b      	movs	r3, r7
1000e8f8:	4053      	eors	r3, r2
1000e8fa:	400b      	ands	r3, r1
1000e8fc:	405a      	eors	r2, r3
1000e8fe:	4653      	mov	r3, sl
1000e900:	701a      	strb	r2, [r3, #0]
						*d2 = (*d2 & ~m) | (col2 & m); // set 1 pixel
1000e902:	464b      	mov	r3, r9
1000e904:	465a      	mov	r2, fp
1000e906:	781b      	ldrb	r3, [r3, #0]
1000e908:	b25b      	sxtb	r3, r3
1000e90a:	405a      	eors	r2, r3
1000e90c:	400a      	ands	r2, r1
1000e90e:	4053      	eors	r3, r2
1000e910:	464a      	mov	r2, r9
						dx++; // shift x position
1000e912:	1d41      	adds	r1, r0, #5
						*d2 = (*d2 & ~m) | (col2 & m); // set 1 pixel
1000e914:	7013      	strb	r3, [r2, #0]
						if (dx == 8) { i--; break; } // x is aligned
1000e916:	2803      	cmp	r0, #3
1000e918:	d02f      	beq.n	1000e97a <_Z8DrawRectP7sCanvasiiiih+0x452>
						m >>= 1; // shift mask
1000e91a:	1170      	asrs	r0, r6, #5
					for (; i > 0; i--)
1000e91c:	1f6c      	subs	r4, r5, #5
1000e91e:	2d05      	cmp	r5, #5
1000e920:	d100      	bne.n	1000e924 <_Z8DrawRectP7sCanvasiiiih+0x3fc>
1000e922:	e771      	b.n	1000e808 <_Z8DrawRectP7sCanvasiiiih+0x2e0>
						*d = (*d & ~m) | (col & m); // set 1 pixel
1000e924:	4653      	mov	r3, sl
1000e926:	2200      	movs	r2, #0
1000e928:	569a      	ldrsb	r2, [r3, r2]
1000e92a:	003b      	movs	r3, r7
1000e92c:	4053      	eors	r3, r2
1000e92e:	4003      	ands	r3, r0
1000e930:	405a      	eors	r2, r3
1000e932:	4653      	mov	r3, sl
1000e934:	701a      	strb	r2, [r3, #0]
						*d2 = (*d2 & ~m) | (col2 & m); // set 1 pixel
1000e936:	464b      	mov	r3, r9
1000e938:	465a      	mov	r2, fp
1000e93a:	781b      	ldrb	r3, [r3, #0]
1000e93c:	b25b      	sxtb	r3, r3
1000e93e:	405a      	eors	r2, r3
1000e940:	4010      	ands	r0, r2
1000e942:	464a      	mov	r2, r9
1000e944:	4043      	eors	r3, r0
1000e946:	7013      	strb	r3, [r2, #0]
						if (dx == 8) { i--; break; } // x is aligned
1000e948:	2906      	cmp	r1, #6
1000e94a:	d116      	bne.n	1000e97a <_Z8DrawRectP7sCanvasiiiih+0x452>
						m >>= 1; // shift mask
1000e94c:	11b1      	asrs	r1, r6, #6
					for (; i > 0; i--)
1000e94e:	1fac      	subs	r4, r5, #6
1000e950:	2d06      	cmp	r5, #6
1000e952:	d100      	bne.n	1000e956 <_Z8DrawRectP7sCanvasiiiih+0x42e>
1000e954:	e758      	b.n	1000e808 <_Z8DrawRectP7sCanvasiiiih+0x2e0>
						*d = (*d & ~m) | (col & m); // set 1 pixel
1000e956:	4653      	mov	r3, sl
1000e958:	2200      	movs	r2, #0
1000e95a:	569a      	ldrsb	r2, [r3, r2]
1000e95c:	003b      	movs	r3, r7
1000e95e:	4053      	eors	r3, r2
1000e960:	400b      	ands	r3, r1
1000e962:	405a      	eors	r2, r3
1000e964:	4653      	mov	r3, sl
1000e966:	701a      	strb	r2, [r3, #0]
						*d2 = (*d2 & ~m) | (col2 & m); // set 1 pixel
1000e968:	464b      	mov	r3, r9
1000e96a:	465a      	mov	r2, fp
1000e96c:	781b      	ldrb	r3, [r3, #0]
1000e96e:	b25b      	sxtb	r3, r3
1000e970:	405a      	eors	r2, r3
1000e972:	400a      	ands	r2, r1
1000e974:	4053      	eors	r3, r2
1000e976:	464a      	mov	r2, r9
1000e978:	7013      	strb	r3, [r2, #0]
						if (dx == 8) { i--; break; } // x is aligned
1000e97a:	4653      	mov	r3, sl
1000e97c:	1c58      	adds	r0, r3, #1
1000e97e:	464b      	mov	r3, r9
1000e980:	3c01      	subs	r4, #1
					d2++;
1000e982:	3301      	adds	r3, #1
1000e984:	9300      	str	r3, [sp, #0]
				for (; i > 7; i -= 8)
1000e986:	2c07      	cmp	r4, #7
1000e988:	dd00      	ble.n	1000e98c <_Z8DrawRectP7sCanvasiiiih+0x464>
1000e98a:	e698      	b.n	1000e6be <_Z8DrawRectP7sCanvasiiiih+0x196>
1000e98c:	001d      	movs	r5, r3
1000e98e:	0006      	movs	r6, r0
1000e990:	e6c1      	b.n	1000e716 <_Z8DrawRectP7sCanvasiiiih+0x1ee>
			int wb = canvas->wb;
1000e992:	6903      	ldr	r3, [r0, #16]
			u8* d = canvas->img + x/4 + y*wb;
1000e994:	108e      	asrs	r6, r1, #2
1000e996:	435a      	muls	r2, r3
1000e998:	18b2      	adds	r2, r6, r2
1000e99a:	6806      	ldr	r6, [r0, #0]
			int wb = canvas->wb;
1000e99c:	9302      	str	r3, [sp, #8]
			u8* d = canvas->img + x/4 + y*wb;
1000e99e:	18b6      	adds	r6, r6, r2
			col = (col << 6) | (col << 4) | (col << 2) | col;
1000e9a0:	4643      	mov	r3, r8
1000e9a2:	4642      	mov	r2, r8
1000e9a4:	019b      	lsls	r3, r3, #6
1000e9a6:	0112      	lsls	r2, r2, #4
1000e9a8:	4313      	orrs	r3, r2
1000e9aa:	4642      	mov	r2, r8
1000e9ac:	4313      	orrs	r3, r2
1000e9ae:	0092      	lsls	r2, r2, #2
1000e9b0:	4313      	orrs	r3, r2
1000e9b2:	b25f      	sxtb	r7, r3
1000e9b4:	b2db      	uxtb	r3, r3
1000e9b6:	9303      	str	r3, [sp, #12]
				dx = x & 3;
1000e9b8:	2303      	movs	r3, #3
					m = 0xc0 >> (dx*2); // mask of 2 color bits
1000e9ba:	22c0      	movs	r2, #192	; 0xc0
				dx = x & 3;
1000e9bc:	400b      	ands	r3, r1
1000e9be:	9300      	str	r3, [sp, #0]
					m = 0xc0 >> (dx*2); // mask of 2 color bits
1000e9c0:	005b      	lsls	r3, r3, #1
1000e9c2:	411a      	asrs	r2, r3
1000e9c4:	0013      	movs	r3, r2
1000e9c6:	9205      	str	r2, [sp, #20]
					for (; i > 0; i--)
1000e9c8:	464a      	mov	r2, r9
1000e9ca:	3a01      	subs	r2, #1
1000e9cc:	9204      	str	r2, [sp, #16]
						*d = (*d & ~m) | (col & m); // set 1 pixel
1000e9ce:	109a      	asrs	r2, r3, #2
1000e9d0:	9206      	str	r2, [sp, #24]
					for (; i > 0; i--)
1000e9d2:	464a      	mov	r2, r9
						*d = (*d & ~m) | (col & m); // set 1 pixel
1000e9d4:	111b      	asrs	r3, r3, #4
1000e9d6:	9308      	str	r3, [sp, #32]
				if (dx != 0)
1000e9d8:	9b00      	ldr	r3, [sp, #0]
					for (; i > 0; i--)
1000e9da:	3a02      	subs	r2, #2
					*d = (*d & ~m) | (col & m); // set 1 pixel
1000e9dc:	46b8      	mov	r8, r7
					for (; i > 0; i--)
1000e9de:	9207      	str	r2, [sp, #28]
				if (dx != 0)
1000e9e0:	2b00      	cmp	r3, #0
1000e9e2:	d144      	bne.n	1000ea6e <_Z8DrawRectP7sCanvasiiiih+0x546>
				for (; i > 3; i -= 4) *d++ = col;
1000e9e4:	464b      	mov	r3, r9
1000e9e6:	0035      	movs	r5, r6
1000e9e8:	464c      	mov	r4, r9
1000e9ea:	2b03      	cmp	r3, #3
1000e9ec:	dd17      	ble.n	1000ea1e <_Z8DrawRectP7sCanvasiiiih+0x4f6>
1000e9ee:	1f23      	subs	r3, r4, #4
1000e9f0:	469b      	mov	fp, r3
1000e9f2:	089b      	lsrs	r3, r3, #2
1000e9f4:	2701      	movs	r7, #1
1000e9f6:	9301      	str	r3, [sp, #4]
1000e9f8:	2c03      	cmp	r4, #3
1000e9fa:	dd00      	ble.n	1000e9fe <_Z8DrawRectP7sCanvasiiiih+0x4d6>
1000e9fc:	1c5f      	adds	r7, r3, #1
1000e9fe:	0028      	movs	r0, r5
1000ea00:	003a      	movs	r2, r7
1000ea02:	9903      	ldr	r1, [sp, #12]
1000ea04:	f7f2 fb6e 	bl	100010e4 <__wrap_memset>
1000ea08:	19ed      	adds	r5, r5, r7
1000ea0a:	2300      	movs	r3, #0
1000ea0c:	2c03      	cmp	r4, #3
1000ea0e:	dd02      	ble.n	1000ea16 <_Z8DrawRectP7sCanvasiiiih+0x4ee>
1000ea10:	9b01      	ldr	r3, [sp, #4]
1000ea12:	009b      	lsls	r3, r3, #2
1000ea14:	425b      	negs	r3, r3
1000ea16:	445b      	add	r3, fp
1000ea18:	001c      	movs	r4, r3
				for (; i > 0; i--)
1000ea1a:	2c00      	cmp	r4, #0
1000ea1c:	d019      	beq.n	1000ea52 <_Z8DrawRectP7sCanvasiiiih+0x52a>
					*d = (*d & ~m) | (col & m); // set 1 pixel
1000ea1e:	2300      	movs	r3, #0
1000ea20:	4642      	mov	r2, r8
1000ea22:	213f      	movs	r1, #63	; 0x3f
1000ea24:	56eb      	ldrsb	r3, [r5, r3]
1000ea26:	405a      	eors	r2, r3
1000ea28:	438a      	bics	r2, r1
1000ea2a:	4053      	eors	r3, r2
1000ea2c:	b2da      	uxtb	r2, r3
				for (; i > 0; i--)
1000ea2e:	1e61      	subs	r1, r4, #1
1000ea30:	2c01      	cmp	r4, #1
1000ea32:	d00d      	beq.n	1000ea50 <_Z8DrawRectP7sCanvasiiiih+0x528>
					*d = (*d & ~m) | (col & m); // set 1 pixel
1000ea34:	4642      	mov	r2, r8
1000ea36:	2030      	movs	r0, #48	; 0x30
1000ea38:	405a      	eors	r2, r3
1000ea3a:	4002      	ands	r2, r0
1000ea3c:	4053      	eors	r3, r2
1000ea3e:	b2da      	uxtb	r2, r3
				for (; i > 0; i--)
1000ea40:	2901      	cmp	r1, #1
1000ea42:	d005      	beq.n	1000ea50 <_Z8DrawRectP7sCanvasiiiih+0x528>
					*d = (*d & ~m) | (col & m); // set 1 pixel
1000ea44:	4641      	mov	r1, r8
1000ea46:	220c      	movs	r2, #12
1000ea48:	4059      	eors	r1, r3
1000ea4a:	400a      	ands	r2, r1
1000ea4c:	405a      	eors	r2, r3
1000ea4e:	b2d2      	uxtb	r2, r2
				for (; i > 0; i--)
1000ea50:	702a      	strb	r2, [r5, #0]
				d = d0 + wb;
1000ea52:	9b02      	ldr	r3, [sp, #8]
1000ea54:	469c      	mov	ip, r3
			for (; h > 0; h--)
1000ea56:	2301      	movs	r3, #1
1000ea58:	425b      	negs	r3, r3
				d = d0 + wb;
1000ea5a:	4466      	add	r6, ip
			for (; h > 0; h--)
1000ea5c:	469c      	mov	ip, r3
1000ea5e:	44e2      	add	sl, ip
1000ea60:	4653      	mov	r3, sl
1000ea62:	2b00      	cmp	r3, #0
1000ea64:	d100      	bne.n	1000ea68 <_Z8DrawRectP7sCanvasiiiih+0x540>
1000ea66:	e5ce      	b.n	1000e606 <_Z8DrawRectP7sCanvasiiiih+0xde>
				if (dx != 0)
1000ea68:	9b00      	ldr	r3, [sp, #0]
1000ea6a:	2b00      	cmp	r3, #0
1000ea6c:	d0ba      	beq.n	1000e9e4 <_Z8DrawRectP7sCanvasiiiih+0x4bc>
						*d = (*d & ~m) | (col & m); // set 1 pixel
1000ea6e:	2300      	movs	r3, #0
1000ea70:	4642      	mov	r2, r8
1000ea72:	56f3      	ldrsb	r3, [r6, r3]
1000ea74:	9905      	ldr	r1, [sp, #20]
1000ea76:	405a      	eors	r2, r3
1000ea78:	400a      	ands	r2, r1
						if (dx == 4) { i--; break; } // x is aligned
1000ea7a:	9900      	ldr	r1, [sp, #0]
						*d = (*d & ~m) | (col & m); // set 1 pixel
1000ea7c:	4053      	eors	r3, r2
1000ea7e:	b25a      	sxtb	r2, r3
1000ea80:	b2db      	uxtb	r3, r3
						if (dx == 4) { i--; break; } // x is aligned
1000ea82:	2903      	cmp	r1, #3
1000ea84:	d100      	bne.n	1000ea88 <_Z8DrawRectP7sCanvasiiiih+0x560>
1000ea86:	e3fc      	b.n	1000f282 <_Z8DrawRectP7sCanvasiiiih+0xd5a>
					for (; i > 0; i--)
1000ea88:	9804      	ldr	r0, [sp, #16]
1000ea8a:	2800      	cmp	r0, #0
1000ea8c:	d100      	bne.n	1000ea90 <_Z8DrawRectP7sCanvasiiiih+0x568>
1000ea8e:	e1e9      	b.n	1000ee64 <_Z8DrawRectP7sCanvasiiiih+0x93c>
						*d = (*d & ~m) | (col & m); // set 1 pixel
1000ea90:	4643      	mov	r3, r8
1000ea92:	9806      	ldr	r0, [sp, #24]
1000ea94:	4053      	eors	r3, r2
1000ea96:	4003      	ands	r3, r0
1000ea98:	405a      	eors	r2, r3
1000ea9a:	b2d3      	uxtb	r3, r2
						if (dx == 4) { i--; break; } // x is aligned
1000ea9c:	2902      	cmp	r1, #2
1000ea9e:	d100      	bne.n	1000eaa2 <_Z8DrawRectP7sCanvasiiiih+0x57a>
1000eaa0:	e3f3      	b.n	1000f28a <_Z8DrawRectP7sCanvasiiiih+0xd62>
					for (; i > 0; i--)
1000eaa2:	9c07      	ldr	r4, [sp, #28]
1000eaa4:	2c00      	cmp	r4, #0
1000eaa6:	d100      	bne.n	1000eaaa <_Z8DrawRectP7sCanvasiiiih+0x582>
1000eaa8:	e1dc      	b.n	1000ee64 <_Z8DrawRectP7sCanvasiiiih+0x93c>
						*d = (*d & ~m) | (col & m); // set 1 pixel
1000eaaa:	4643      	mov	r3, r8
1000eaac:	9908      	ldr	r1, [sp, #32]
1000eaae:	4053      	eors	r3, r2
1000eab0:	400b      	ands	r3, r1
1000eab2:	4053      	eors	r3, r2
1000eab4:	b2db      	uxtb	r3, r3
						if (dx == 4) { i--; break; } // x is aligned
1000eab6:	3c01      	subs	r4, #1
1000eab8:	7033      	strb	r3, [r6, #0]
					d++;
1000eaba:	1c75      	adds	r5, r6, #1
				for (; i > 3; i -= 4) *d++ = col;
1000eabc:	2c03      	cmp	r4, #3
1000eabe:	dc96      	bgt.n	1000e9ee <_Z8DrawRectP7sCanvasiiiih+0x4c6>
1000eac0:	e7ab      	b.n	1000ea1a <_Z8DrawRectP7sCanvasiiiih+0x4f2>
			int wb = canvas->wb;
1000eac2:	6903      	ldr	r3, [r0, #16]
1000eac4:	001c      	movs	r4, r3
			u8* d = canvas->img + x/8 + y*wb;
1000eac6:	4362      	muls	r2, r4
			int wb = canvas->wb;
1000eac8:	9302      	str	r3, [sp, #8]
			u8* d = canvas->img + x/8 + y*wb;
1000eaca:	10cb      	asrs	r3, r1, #3
1000eacc:	189a      	adds	r2, r3, r2
1000eace:	6803      	ldr	r3, [r0, #0]
1000ead0:	469b      	mov	fp, r3
			col = (col<<7)|(col<<6)|(col<<5)|(col<<4)|(col<<3)|(col<<2)|(col<<1)|col;
1000ead2:	4643      	mov	r3, r8
			u8* d = canvas->img + x/8 + y*wb;
1000ead4:	4493      	add	fp, r2
			col = (col<<7)|(col<<6)|(col<<5)|(col<<4)|(col<<3)|(col<<2)|(col<<1)|col;
1000ead6:	4642      	mov	r2, r8
1000ead8:	01db      	lsls	r3, r3, #7
1000eada:	0192      	lsls	r2, r2, #6
1000eadc:	4313      	orrs	r3, r2
1000eade:	4642      	mov	r2, r8
1000eae0:	4313      	orrs	r3, r2
1000eae2:	0152      	lsls	r2, r2, #5
1000eae4:	4313      	orrs	r3, r2
1000eae6:	4642      	mov	r2, r8
1000eae8:	0112      	lsls	r2, r2, #4
1000eaea:	4313      	orrs	r3, r2
1000eaec:	4642      	mov	r2, r8
1000eaee:	00d2      	lsls	r2, r2, #3
1000eaf0:	4313      	orrs	r3, r2
1000eaf2:	4642      	mov	r2, r8
1000eaf4:	0092      	lsls	r2, r2, #2
1000eaf6:	4313      	orrs	r3, r2
1000eaf8:	4642      	mov	r2, r8
1000eafa:	0052      	lsls	r2, r2, #1
1000eafc:	4313      	orrs	r3, r2
1000eafe:	b25d      	sxtb	r5, r3
1000eb00:	b2db      	uxtb	r3, r3
1000eb02:	9303      	str	r3, [sp, #12]
				dx = x & 7;
1000eb04:	2307      	movs	r3, #7
1000eb06:	400b      	ands	r3, r1
1000eb08:	001a      	movs	r2, r3
1000eb0a:	9300      	str	r3, [sp, #0]
					m = 0x80 >> dx; // mask of 1 color bit
1000eb0c:	2380      	movs	r3, #128	; 0x80
1000eb0e:	4113      	asrs	r3, r2
					for (; i > 0; i--)
1000eb10:	464a      	mov	r2, r9
1000eb12:	3a01      	subs	r2, #1
1000eb14:	9205      	str	r2, [sp, #20]
						*d = (*d & ~m) | (col & m); // set 1 pixel
1000eb16:	105a      	asrs	r2, r3, #1
1000eb18:	9206      	str	r2, [sp, #24]
					for (; i > 0; i--)
1000eb1a:	464a      	mov	r2, r9
1000eb1c:	3a02      	subs	r2, #2
1000eb1e:	9207      	str	r2, [sp, #28]
						*d = (*d & ~m) | (col & m); // set 1 pixel
1000eb20:	109a      	asrs	r2, r3, #2
1000eb22:	9208      	str	r2, [sp, #32]
					for (; i > 0; i--)
1000eb24:	464a      	mov	r2, r9
1000eb26:	3a03      	subs	r2, #3
1000eb28:	9209      	str	r2, [sp, #36]	; 0x24
						*d = (*d & ~m) | (col & m); // set 1 pixel
1000eb2a:	10da      	asrs	r2, r3, #3
1000eb2c:	920a      	str	r2, [sp, #40]	; 0x28
					for (; i > 0; i--)
1000eb2e:	464a      	mov	r2, r9
1000eb30:	3a04      	subs	r2, #4
1000eb32:	920b      	str	r2, [sp, #44]	; 0x2c
						*d = (*d & ~m) | (col & m); // set 1 pixel
1000eb34:	111a      	asrs	r2, r3, #4
1000eb36:	920c      	str	r2, [sp, #48]	; 0x30
					for (; i > 0; i--)
1000eb38:	464a      	mov	r2, r9
1000eb3a:	3a05      	subs	r2, #5
1000eb3c:	920d      	str	r2, [sp, #52]	; 0x34
						*d = (*d & ~m) | (col & m); // set 1 pixel
1000eb3e:	115a      	asrs	r2, r3, #5
1000eb40:	920e      	str	r2, [sp, #56]	; 0x38
					for (; i > 0; i--)
1000eb42:	464a      	mov	r2, r9
					m = 0x80 >> dx; // mask of 1 color bit
1000eb44:	9304      	str	r3, [sp, #16]
						*d = (*d & ~m) | (col & m); // set 1 pixel
1000eb46:	119b      	asrs	r3, r3, #6
1000eb48:	9310      	str	r3, [sp, #64]	; 0x40
				if (dx != 0)
1000eb4a:	9b00      	ldr	r3, [sp, #0]
					for (; i > 0; i--)
1000eb4c:	3a06      	subs	r2, #6
					*d = (*d & ~m) | (col & m); // set 1 pixel
1000eb4e:	465f      	mov	r7, fp
					for (; i > 0; i--)
1000eb50:	920f      	str	r2, [sp, #60]	; 0x3c
				if (dx != 0)
1000eb52:	2b00      	cmp	r3, #0
1000eb54:	d169      	bne.n	1000ec2a <_Z8DrawRectP7sCanvasiiiih+0x702>
				for (; i > 7; i -= 8) *d++ = col;
1000eb56:	464b      	mov	r3, r9
1000eb58:	003e      	movs	r6, r7
1000eb5a:	464c      	mov	r4, r9
1000eb5c:	2b07      	cmp	r3, #7
1000eb5e:	dd1c      	ble.n	1000eb9a <_Z8DrawRectP7sCanvasiiiih+0x672>
1000eb60:	2308      	movs	r3, #8
1000eb62:	425b      	negs	r3, r3
1000eb64:	469b      	mov	fp, r3
1000eb66:	44a3      	add	fp, r4
1000eb68:	465b      	mov	r3, fp
1000eb6a:	2201      	movs	r2, #1
1000eb6c:	08db      	lsrs	r3, r3, #3
1000eb6e:	4690      	mov	r8, r2
1000eb70:	9301      	str	r3, [sp, #4]
1000eb72:	2c07      	cmp	r4, #7
1000eb74:	dd01      	ble.n	1000eb7a <_Z8DrawRectP7sCanvasiiiih+0x652>
1000eb76:	3301      	adds	r3, #1
1000eb78:	4698      	mov	r8, r3
1000eb7a:	0030      	movs	r0, r6
1000eb7c:	4642      	mov	r2, r8
1000eb7e:	9903      	ldr	r1, [sp, #12]
1000eb80:	f7f2 fab0 	bl	100010e4 <__wrap_memset>
1000eb84:	4446      	add	r6, r8
1000eb86:	2300      	movs	r3, #0
1000eb88:	2c07      	cmp	r4, #7
1000eb8a:	dd02      	ble.n	1000eb92 <_Z8DrawRectP7sCanvasiiiih+0x66a>
1000eb8c:	9b01      	ldr	r3, [sp, #4]
1000eb8e:	00db      	lsls	r3, r3, #3
1000eb90:	425b      	negs	r3, r3
1000eb92:	445b      	add	r3, fp
1000eb94:	001c      	movs	r4, r3
				for (; i > 0; i--)
1000eb96:	2c00      	cmp	r4, #0
1000eb98:	d039      	beq.n	1000ec0e <_Z8DrawRectP7sCanvasiiiih+0x6e6>
					*d = (*d & ~m) | (col & m); // set 1 pixel
1000eb9a:	2300      	movs	r3, #0
1000eb9c:	002a      	movs	r2, r5
1000eb9e:	217f      	movs	r1, #127	; 0x7f
1000eba0:	56f3      	ldrsb	r3, [r6, r3]
1000eba2:	405a      	eors	r2, r3
1000eba4:	438a      	bics	r2, r1
1000eba6:	4053      	eors	r3, r2
1000eba8:	b2da      	uxtb	r2, r3
				for (; i > 0; i--)
1000ebaa:	2c01      	cmp	r4, #1
1000ebac:	d02e      	beq.n	1000ec0c <_Z8DrawRectP7sCanvasiiiih+0x6e4>
					*d = (*d & ~m) | (col & m); // set 1 pixel
1000ebae:	002a      	movs	r2, r5
1000ebb0:	393f      	subs	r1, #63	; 0x3f
1000ebb2:	405a      	eors	r2, r3
1000ebb4:	400a      	ands	r2, r1
1000ebb6:	4053      	eors	r3, r2
1000ebb8:	b2da      	uxtb	r2, r3
				for (; i > 0; i--)
1000ebba:	2c02      	cmp	r4, #2
1000ebbc:	d026      	beq.n	1000ec0c <_Z8DrawRectP7sCanvasiiiih+0x6e4>
					*d = (*d & ~m) | (col & m); // set 1 pixel
1000ebbe:	0029      	movs	r1, r5
1000ebc0:	2220      	movs	r2, #32
1000ebc2:	4059      	eors	r1, r3
1000ebc4:	400a      	ands	r2, r1
1000ebc6:	4053      	eors	r3, r2
1000ebc8:	b2da      	uxtb	r2, r3
				for (; i > 0; i--)
1000ebca:	2c03      	cmp	r4, #3
1000ebcc:	d01e      	beq.n	1000ec0c <_Z8DrawRectP7sCanvasiiiih+0x6e4>
					*d = (*d & ~m) | (col & m); // set 1 pixel
1000ebce:	0029      	movs	r1, r5
1000ebd0:	2210      	movs	r2, #16
1000ebd2:	4059      	eors	r1, r3
1000ebd4:	400a      	ands	r2, r1
1000ebd6:	4053      	eors	r3, r2
1000ebd8:	b2da      	uxtb	r2, r3
				for (; i > 0; i--)
1000ebda:	2c04      	cmp	r4, #4
1000ebdc:	d016      	beq.n	1000ec0c <_Z8DrawRectP7sCanvasiiiih+0x6e4>
					*d = (*d & ~m) | (col & m); // set 1 pixel
1000ebde:	0029      	movs	r1, r5
1000ebe0:	2208      	movs	r2, #8
1000ebe2:	4059      	eors	r1, r3
1000ebe4:	400a      	ands	r2, r1
1000ebe6:	4053      	eors	r3, r2
1000ebe8:	b2da      	uxtb	r2, r3
				for (; i > 0; i--)
1000ebea:	1f61      	subs	r1, r4, #5
1000ebec:	2c05      	cmp	r4, #5
1000ebee:	d00d      	beq.n	1000ec0c <_Z8DrawRectP7sCanvasiiiih+0x6e4>
					*d = (*d & ~m) | (col & m); // set 1 pixel
1000ebf0:	0028      	movs	r0, r5
1000ebf2:	2204      	movs	r2, #4
1000ebf4:	4058      	eors	r0, r3
1000ebf6:	4002      	ands	r2, r0
1000ebf8:	4053      	eors	r3, r2
1000ebfa:	b2da      	uxtb	r2, r3
				for (; i > 0; i--)
1000ebfc:	2901      	cmp	r1, #1
1000ebfe:	d005      	beq.n	1000ec0c <_Z8DrawRectP7sCanvasiiiih+0x6e4>
					*d = (*d & ~m) | (col & m); // set 1 pixel
1000ec00:	0029      	movs	r1, r5
1000ec02:	2202      	movs	r2, #2
1000ec04:	4059      	eors	r1, r3
1000ec06:	400a      	ands	r2, r1
1000ec08:	405a      	eors	r2, r3
1000ec0a:	b2d2      	uxtb	r2, r2
				for (; i > 0; i--)
1000ec0c:	7032      	strb	r2, [r6, #0]
				d = d0 + wb;
1000ec0e:	9b02      	ldr	r3, [sp, #8]
1000ec10:	469c      	mov	ip, r3
			for (; h > 0; h--)
1000ec12:	2301      	movs	r3, #1
1000ec14:	425b      	negs	r3, r3
				d = d0 + wb;
1000ec16:	4467      	add	r7, ip
			for (; h > 0; h--)
1000ec18:	469c      	mov	ip, r3
1000ec1a:	44e2      	add	sl, ip
1000ec1c:	4653      	mov	r3, sl
1000ec1e:	2b00      	cmp	r3, #0
1000ec20:	d100      	bne.n	1000ec24 <_Z8DrawRectP7sCanvasiiiih+0x6fc>
1000ec22:	e4f0      	b.n	1000e606 <_Z8DrawRectP7sCanvasiiiih+0xde>
				if (dx != 0)
1000ec24:	9b00      	ldr	r3, [sp, #0]
1000ec26:	2b00      	cmp	r3, #0
1000ec28:	d095      	beq.n	1000eb56 <_Z8DrawRectP7sCanvasiiiih+0x62e>
						*d = (*d & ~m) | (col & m); // set 1 pixel
1000ec2a:	2200      	movs	r2, #0
1000ec2c:	002b      	movs	r3, r5
1000ec2e:	56ba      	ldrsb	r2, [r7, r2]
1000ec30:	9904      	ldr	r1, [sp, #16]
1000ec32:	4053      	eors	r3, r2
1000ec34:	400b      	ands	r3, r1
						if (dx == 8) { i--; break; } // x is aligned
1000ec36:	9900      	ldr	r1, [sp, #0]
						*d = (*d & ~m) | (col & m); // set 1 pixel
1000ec38:	405a      	eors	r2, r3
1000ec3a:	b253      	sxtb	r3, r2
1000ec3c:	b2d2      	uxtb	r2, r2
						if (dx == 8) { i--; break; } // x is aligned
1000ec3e:	2907      	cmp	r1, #7
1000ec40:	d100      	bne.n	1000ec44 <_Z8DrawRectP7sCanvasiiiih+0x71c>
1000ec42:	e320      	b.n	1000f286 <_Z8DrawRectP7sCanvasiiiih+0xd5e>
					for (; i > 0; i--)
1000ec44:	9805      	ldr	r0, [sp, #20]
1000ec46:	2800      	cmp	r0, #0
1000ec48:	d100      	bne.n	1000ec4c <_Z8DrawRectP7sCanvasiiiih+0x724>
1000ec4a:	e109      	b.n	1000ee60 <_Z8DrawRectP7sCanvasiiiih+0x938>
						*d = (*d & ~m) | (col & m); // set 1 pixel
1000ec4c:	002a      	movs	r2, r5
1000ec4e:	9806      	ldr	r0, [sp, #24]
1000ec50:	405a      	eors	r2, r3
1000ec52:	4002      	ands	r2, r0
1000ec54:	4053      	eors	r3, r2
1000ec56:	b2da      	uxtb	r2, r3
						if (dx == 8) { i--; break; } // x is aligned
1000ec58:	2906      	cmp	r1, #6
1000ec5a:	d100      	bne.n	1000ec5e <_Z8DrawRectP7sCanvasiiiih+0x736>
1000ec5c:	e317      	b.n	1000f28e <_Z8DrawRectP7sCanvasiiiih+0xd66>
					for (; i > 0; i--)
1000ec5e:	9807      	ldr	r0, [sp, #28]
1000ec60:	2800      	cmp	r0, #0
1000ec62:	d100      	bne.n	1000ec66 <_Z8DrawRectP7sCanvasiiiih+0x73e>
1000ec64:	e0fc      	b.n	1000ee60 <_Z8DrawRectP7sCanvasiiiih+0x938>
						*d = (*d & ~m) | (col & m); // set 1 pixel
1000ec66:	002a      	movs	r2, r5
1000ec68:	9808      	ldr	r0, [sp, #32]
1000ec6a:	405a      	eors	r2, r3
1000ec6c:	4002      	ands	r2, r0
1000ec6e:	4053      	eors	r3, r2
1000ec70:	b2da      	uxtb	r2, r3
						if (dx == 8) { i--; break; } // x is aligned
1000ec72:	2905      	cmp	r1, #5
1000ec74:	d100      	bne.n	1000ec78 <_Z8DrawRectP7sCanvasiiiih+0x750>
1000ec76:	e30c      	b.n	1000f292 <_Z8DrawRectP7sCanvasiiiih+0xd6a>
					for (; i > 0; i--)
1000ec78:	9809      	ldr	r0, [sp, #36]	; 0x24
1000ec7a:	2800      	cmp	r0, #0
1000ec7c:	d100      	bne.n	1000ec80 <_Z8DrawRectP7sCanvasiiiih+0x758>
1000ec7e:	e0ef      	b.n	1000ee60 <_Z8DrawRectP7sCanvasiiiih+0x938>
						*d = (*d & ~m) | (col & m); // set 1 pixel
1000ec80:	002a      	movs	r2, r5
1000ec82:	980a      	ldr	r0, [sp, #40]	; 0x28
1000ec84:	405a      	eors	r2, r3
1000ec86:	4002      	ands	r2, r0
1000ec88:	4053      	eors	r3, r2
1000ec8a:	b2da      	uxtb	r2, r3
						if (dx == 8) { i--; break; } // x is aligned
1000ec8c:	2904      	cmp	r1, #4
1000ec8e:	d100      	bne.n	1000ec92 <_Z8DrawRectP7sCanvasiiiih+0x76a>
1000ec90:	e301      	b.n	1000f296 <_Z8DrawRectP7sCanvasiiiih+0xd6e>
					for (; i > 0; i--)
1000ec92:	980b      	ldr	r0, [sp, #44]	; 0x2c
1000ec94:	2800      	cmp	r0, #0
1000ec96:	d100      	bne.n	1000ec9a <_Z8DrawRectP7sCanvasiiiih+0x772>
1000ec98:	e0e2      	b.n	1000ee60 <_Z8DrawRectP7sCanvasiiiih+0x938>
						*d = (*d & ~m) | (col & m); // set 1 pixel
1000ec9a:	002a      	movs	r2, r5
1000ec9c:	980c      	ldr	r0, [sp, #48]	; 0x30
1000ec9e:	405a      	eors	r2, r3
1000eca0:	4002      	ands	r2, r0
1000eca2:	4053      	eors	r3, r2
1000eca4:	b2da      	uxtb	r2, r3
						if (dx == 8) { i--; break; } // x is aligned
1000eca6:	2903      	cmp	r1, #3
1000eca8:	d100      	bne.n	1000ecac <_Z8DrawRectP7sCanvasiiiih+0x784>
1000ecaa:	e2f6      	b.n	1000f29a <_Z8DrawRectP7sCanvasiiiih+0xd72>
					for (; i > 0; i--)
1000ecac:	980d      	ldr	r0, [sp, #52]	; 0x34
1000ecae:	2800      	cmp	r0, #0
1000ecb0:	d100      	bne.n	1000ecb4 <_Z8DrawRectP7sCanvasiiiih+0x78c>
1000ecb2:	e0d5      	b.n	1000ee60 <_Z8DrawRectP7sCanvasiiiih+0x938>
						*d = (*d & ~m) | (col & m); // set 1 pixel
1000ecb4:	002a      	movs	r2, r5
1000ecb6:	980e      	ldr	r0, [sp, #56]	; 0x38
1000ecb8:	405a      	eors	r2, r3
1000ecba:	4002      	ands	r2, r0
1000ecbc:	4053      	eors	r3, r2
1000ecbe:	b2da      	uxtb	r2, r3
						if (dx == 8) { i--; break; } // x is aligned
1000ecc0:	2902      	cmp	r1, #2
1000ecc2:	d100      	bne.n	1000ecc6 <_Z8DrawRectP7sCanvasiiiih+0x79e>
1000ecc4:	e2eb      	b.n	1000f29e <_Z8DrawRectP7sCanvasiiiih+0xd76>
					for (; i > 0; i--)
1000ecc6:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
1000ecc8:	2c00      	cmp	r4, #0
1000ecca:	d100      	bne.n	1000ecce <_Z8DrawRectP7sCanvasiiiih+0x7a6>
1000eccc:	e0c8      	b.n	1000ee60 <_Z8DrawRectP7sCanvasiiiih+0x938>
						*d = (*d & ~m) | (col & m); // set 1 pixel
1000ecce:	002a      	movs	r2, r5
1000ecd0:	9910      	ldr	r1, [sp, #64]	; 0x40
1000ecd2:	405a      	eors	r2, r3
1000ecd4:	400a      	ands	r2, r1
1000ecd6:	405a      	eors	r2, r3
1000ecd8:	b2d2      	uxtb	r2, r2
						if (dx == 8) { i--; break; } // x is aligned
1000ecda:	3c01      	subs	r4, #1
1000ecdc:	703a      	strb	r2, [r7, #0]
					d++;
1000ecde:	1c7e      	adds	r6, r7, #1
				for (; i > 7; i -= 8) *d++ = col;
1000ece0:	2c07      	cmp	r4, #7
1000ece2:	dd00      	ble.n	1000ece6 <_Z8DrawRectP7sCanvasiiiih+0x7be>
1000ece4:	e73c      	b.n	1000eb60 <_Z8DrawRectP7sCanvasiiiih+0x638>
1000ece6:	e756      	b.n	1000eb96 <_Z8DrawRectP7sCanvasiiiih+0x66e>
			int wb = canvas->wb;
1000ece8:	6905      	ldr	r5, [r0, #16]
			u8* d = canvas->img + x + y*wb;
1000ecea:	464f      	mov	r7, r9
1000ecec:	002b      	movs	r3, r5
1000ecee:	436a      	muls	r2, r5
1000ecf0:	4656      	mov	r6, sl
1000ecf2:	4645      	mov	r5, r8
1000ecf4:	4698      	mov	r8, r3
1000ecf6:	6804      	ldr	r4, [r0, #0]
1000ecf8:	1851      	adds	r1, r2, r1
1000ecfa:	1864      	adds	r4, r4, r1
				for (i = w; i > 0; i--) *d++ = col;
1000ecfc:	0020      	movs	r0, r4
1000ecfe:	003a      	movs	r2, r7
1000ed00:	0029      	movs	r1, r5
			for (; h > 0; h--)
1000ed02:	3e01      	subs	r6, #1
				for (i = w; i > 0; i--) *d++ = col;
1000ed04:	f7f2 f9ee 	bl	100010e4 <__wrap_memset>
				d += wb;
1000ed08:	4444      	add	r4, r8
			for (; h > 0; h--)
1000ed0a:	2e00      	cmp	r6, #0
1000ed0c:	d1f6      	bne.n	1000ecfc <_Z8DrawRectP7sCanvasiiiih+0x7d4>
1000ed0e:	e47a      	b.n	1000e606 <_Z8DrawRectP7sCanvasiiiih+0xde>
			int wb = canvas->wb;
1000ed10:	6906      	ldr	r6, [r0, #16]
			u8* d = canvas->img + x/8 + y*wb; // pixels
1000ed12:	10cb      	asrs	r3, r1, #3
1000ed14:	0035      	movs	r5, r6
1000ed16:	001c      	movs	r4, r3
1000ed18:	4355      	muls	r5, r2
1000ed1a:	18ed      	adds	r5, r5, r3
1000ed1c:	6803      	ldr	r3, [r0, #0]
			u8* d2 = canvas->img2 + x/8 + (y/8)*wb; // attributes
1000ed1e:	6840      	ldr	r0, [r0, #4]
			u8* d = canvas->img + x/8 + y*wb; // pixels
1000ed20:	469c      	mov	ip, r3
			u8* d2 = canvas->img2 + x/8 + (y/8)*wb; // attributes
1000ed22:	10d3      	asrs	r3, r2, #3
1000ed24:	4373      	muls	r3, r6
1000ed26:	191b      	adds	r3, r3, r4
1000ed28:	18c3      	adds	r3, r0, r3
1000ed2a:	9300      	str	r3, [sp, #0]
			if ((col & B4) == 0)
1000ed2c:	4643      	mov	r3, r8
			int wb = canvas->wb;
1000ed2e:	9601      	str	r6, [sp, #4]
			u8* d = canvas->img + x/8 + y*wb; // pixels
1000ed30:	4465      	add	r5, ip
			if ((col & B4) == 0)
1000ed32:	06db      	lsls	r3, r3, #27
1000ed34:	d500      	bpl.n	1000ed38 <_Z8DrawRectP7sCanvasiiiih+0x810>
1000ed36:	e0aa      	b.n	1000ee8e <_Z8DrawRectP7sCanvasiiiih+0x966>
					dx = x & 7;
1000ed38:	2307      	movs	r3, #7
1000ed3a:	400b      	ands	r3, r1
1000ed3c:	0019      	movs	r1, r3
1000ed3e:	9303      	str	r3, [sp, #12]
						m = 0x80 >> dx; // mask of 1 color bit
1000ed40:	2380      	movs	r3, #128	; 0x80
1000ed42:	4492      	add	sl, r2
1000ed44:	410b      	asrs	r3, r1
1000ed46:	4651      	mov	r1, sl
1000ed48:	9104      	str	r1, [sp, #16]
						for (; i > 0; i--)
1000ed4a:	4649      	mov	r1, r9
1000ed4c:	3901      	subs	r1, #1
1000ed4e:	9107      	str	r1, [sp, #28]
							*d = *d | m; // set 1 pixel
1000ed50:	1059      	asrs	r1, r3, #1
1000ed52:	9109      	str	r1, [sp, #36]	; 0x24
						for (; i > 0; i--)
1000ed54:	4649      	mov	r1, r9
1000ed56:	3902      	subs	r1, #2
1000ed58:	910a      	str	r1, [sp, #40]	; 0x28
							*d = *d | m; // set 1 pixel
1000ed5a:	1099      	asrs	r1, r3, #2
1000ed5c:	910c      	str	r1, [sp, #48]	; 0x30
						for (; i > 0; i--)
1000ed5e:	4649      	mov	r1, r9
1000ed60:	3903      	subs	r1, #3
1000ed62:	910b      	str	r1, [sp, #44]	; 0x2c
							*d = *d | m; // set 1 pixel
1000ed64:	10d9      	asrs	r1, r3, #3
1000ed66:	910d      	str	r1, [sp, #52]	; 0x34
						for (; i > 0; i--)
1000ed68:	4649      	mov	r1, r9
1000ed6a:	3904      	subs	r1, #4
1000ed6c:	910e      	str	r1, [sp, #56]	; 0x38
							*d = *d | m; // set 1 pixel
1000ed6e:	1119      	asrs	r1, r3, #4
1000ed70:	910f      	str	r1, [sp, #60]	; 0x3c
						for (; i > 0; i--)
1000ed72:	4649      	mov	r1, r9
1000ed74:	3905      	subs	r1, #5
1000ed76:	9110      	str	r1, [sp, #64]	; 0x40
							*d = *d | m; // set 1 pixel
1000ed78:	1159      	asrs	r1, r3, #5
1000ed7a:	9111      	str	r1, [sp, #68]	; 0x44
						for (; i > 0; i--)
1000ed7c:	4649      	mov	r1, r9
						m = 0x80 >> dx; // mask of 1 color bit
1000ed7e:	9308      	str	r3, [sp, #32]
							*d = *d | m; // set 1 pixel
1000ed80:	119b      	asrs	r3, r3, #6
						for (; i > 0; i--)
1000ed82:	3906      	subs	r1, #6
							*d = *d | m; // set 1 pixel
1000ed84:	9312      	str	r3, [sp, #72]	; 0x48
1000ed86:	4643      	mov	r3, r8
1000ed88:	4640      	mov	r0, r8
						for (; i > 0; i--)
1000ed8a:	9113      	str	r1, [sp, #76]	; 0x4c
1000ed8c:	4641      	mov	r1, r8
1000ed8e:	021b      	lsls	r3, r3, #8
1000ed90:	0409      	lsls	r1, r1, #16
1000ed92:	4303      	orrs	r3, r0
1000ed94:	430b      	orrs	r3, r1
1000ed96:	9306      	str	r3, [sp, #24]
1000ed98:	464b      	mov	r3, r9
1000ed9a:	46aa      	mov	sl, r5
1000ed9c:	4691      	mov	r9, r2
1000ed9e:	9305      	str	r3, [sp, #20]
					if (dx != 0)
1000eda0:	9b03      	ldr	r3, [sp, #12]
1000eda2:	2b00      	cmp	r3, #0
1000eda4:	d000      	beq.n	1000eda8 <_Z8DrawRectP7sCanvasiiiih+0x880>
1000eda6:	e203      	b.n	1000f1b0 <_Z8DrawRectP7sCanvasiiiih+0xc88>
					for (; i > 7; i -= 8)
1000eda8:	9d05      	ldr	r5, [sp, #20]
1000edaa:	2d07      	cmp	r5, #7
1000edac:	dc00      	bgt.n	1000edb0 <_Z8DrawRectP7sCanvasiiiih+0x888>
1000edae:	e25e      	b.n	1000f26e <_Z8DrawRectP7sCanvasiiiih+0xd46>
1000edb0:	4654      	mov	r4, sl
1000edb2:	9800      	ldr	r0, [sp, #0]
1000edb4:	2306      	movs	r3, #6
1000edb6:	1cc2      	adds	r2, r0, #3
1000edb8:	1b12      	subs	r2, r2, r4
1000edba:	0001      	movs	r1, r0
1000edbc:	4293      	cmp	r3, r2
1000edbe:	419b      	sbcs	r3, r3
1000edc0:	2203      	movs	r2, #3
1000edc2:	4321      	orrs	r1, r4
1000edc4:	400a      	ands	r2, r1
1000edc6:	4251      	negs	r1, r2
1000edc8:	414a      	adcs	r2, r1
1000edca:	425b      	negs	r3, r3
1000edcc:	421a      	tst	r2, r3
1000edce:	d002      	beq.n	1000edd6 <_Z8DrawRectP7sCanvasiiiih+0x8ae>
1000edd0:	2d37      	cmp	r5, #55	; 0x37
1000edd2:	dd00      	ble.n	1000edd6 <_Z8DrawRectP7sCanvasiiiih+0x8ae>
1000edd4:	e147      	b.n	1000f066 <_Z8DrawRectP7sCanvasiiiih+0xb3e>
1000edd6:	0029      	movs	r1, r5
						*d2 = (*d2 & 0xf0) | col;
1000edd8:	46ac      	mov	ip, r5
					for (; i > 7; i -= 8)
1000edda:	2200      	movs	r2, #0
						*d++ = 0xff;
1000eddc:	27ff      	movs	r7, #255	; 0xff
						*d2 = (*d2 & 0xf0) | col;
1000edde:	260f      	movs	r6, #15
1000ede0:	4645      	mov	r5, r8
						*d++ = 0xff;
1000ede2:	54a7      	strb	r7, [r4, r2]
						*d2 = (*d2 & 0xf0) | col;
1000ede4:	5c83      	ldrb	r3, [r0, r2]
					for (; i > 7; i -= 8)
1000ede6:	3908      	subs	r1, #8
						*d2 = (*d2 & 0xf0) | col;
1000ede8:	43b3      	bics	r3, r6
1000edea:	432b      	orrs	r3, r5
1000edec:	5483      	strb	r3, [r0, r2]
					for (; i > 7; i -= 8)
1000edee:	3201      	adds	r2, #1
1000edf0:	2907      	cmp	r1, #7
1000edf2:	dcf6      	bgt.n	1000ede2 <_Z8DrawRectP7sCanvasiiiih+0x8ba>
1000edf4:	2308      	movs	r3, #8
1000edf6:	425b      	negs	r3, r3
1000edf8:	469b      	mov	fp, r3
1000edfa:	46a8      	mov	r8, r5
1000edfc:	4665      	mov	r5, ip
1000edfe:	44e3      	add	fp, ip
1000ee00:	465b      	mov	r3, fp
1000ee02:	08da      	lsrs	r2, r3, #3
1000ee04:	2301      	movs	r3, #1
1000ee06:	2d07      	cmp	r5, #7
1000ee08:	dd00      	ble.n	1000ee0c <_Z8DrawRectP7sCanvasiiiih+0x8e4>
1000ee0a:	1c53      	adds	r3, r2, #1
						*d++ = 0xff;
1000ee0c:	18e4      	adds	r4, r4, r3
						d2++;
1000ee0e:	18c0      	adds	r0, r0, r3
1000ee10:	2300      	movs	r3, #0
1000ee12:	2d07      	cmp	r5, #7
1000ee14:	dd01      	ble.n	1000ee1a <_Z8DrawRectP7sCanvasiiiih+0x8f2>
1000ee16:	00d3      	lsls	r3, r2, #3
1000ee18:	425b      	negs	r3, r3
					for (; i > 7; i -= 8)
1000ee1a:	445b      	add	r3, fp
1000ee1c:	001d      	movs	r5, r3
					if (i > 0)
1000ee1e:	2d00      	cmp	r5, #0
1000ee20:	d00c      	beq.n	1000ee3c <_Z8DrawRectP7sCanvasiiiih+0x914>
						m = 0xff << (8-i); // mask
1000ee22:	2308      	movs	r3, #8
1000ee24:	1b5d      	subs	r5, r3, r5
1000ee26:	33f7      	adds	r3, #247	; 0xf7
1000ee28:	40ab      	lsls	r3, r5
						*d = *d | m;
1000ee2a:	7822      	ldrb	r2, [r4, #0]
1000ee2c:	4313      	orrs	r3, r2
						*d2 = (*d2 & 0xf0) | col;
1000ee2e:	220f      	movs	r2, #15
						*d = *d | m;
1000ee30:	7023      	strb	r3, [r4, #0]
						*d2 = (*d2 & 0xf0) | col;
1000ee32:	7803      	ldrb	r3, [r0, #0]
1000ee34:	4393      	bics	r3, r2
1000ee36:	4642      	mov	r2, r8
1000ee38:	4313      	orrs	r3, r2
1000ee3a:	7003      	strb	r3, [r0, #0]
					d = d0 + wb;
1000ee3c:	9b01      	ldr	r3, [sp, #4]
					y++;
1000ee3e:	2201      	movs	r2, #1
					d = d0 + wb;
1000ee40:	469c      	mov	ip, r3
1000ee42:	44e2      	add	sl, ip
					y++;
1000ee44:	4694      	mov	ip, r2
1000ee46:	44e1      	add	r9, ip
					if ((y & 7) == 0) d2 += wb;
1000ee48:	464a      	mov	r2, r9
1000ee4a:	0752      	lsls	r2, r2, #29
1000ee4c:	d103      	bne.n	1000ee56 <_Z8DrawRectP7sCanvasiiiih+0x92e>
1000ee4e:	469c      	mov	ip, r3
1000ee50:	9a00      	ldr	r2, [sp, #0]
1000ee52:	4462      	add	r2, ip
1000ee54:	9200      	str	r2, [sp, #0]
				for (; h > 0; h--)
1000ee56:	9b04      	ldr	r3, [sp, #16]
1000ee58:	4599      	cmp	r9, r3
1000ee5a:	d1a1      	bne.n	1000eda0 <_Z8DrawRectP7sCanvasiiiih+0x878>
1000ee5c:	f7ff fbd3 	bl	1000e606 <_Z8DrawRectP7sCanvasiiiih+0xde>
1000ee60:	703a      	strb	r2, [r7, #0]
				for (; i > 0; i--)
1000ee62:	e6d4      	b.n	1000ec0e <_Z8DrawRectP7sCanvasiiiih+0x6e6>
1000ee64:	7033      	strb	r3, [r6, #0]
				for (; i > 0; i--)
1000ee66:	e5f4      	b.n	1000ea52 <_Z8DrawRectP7sCanvasiiiih+0x52a>
				for (; i > 7; i -= 8)
1000ee68:	2300      	movs	r3, #0
1000ee6a:	0011      	movs	r1, r2
1000ee6c:	46a4      	mov	ip, r4
1000ee6e:	0022      	movs	r2, r4
1000ee70:	46a8      	mov	r8, r5
1000ee72:	9c07      	ldr	r4, [sp, #28]
1000ee74:	9d08      	ldr	r5, [sp, #32]
1000ee76:	3a08      	subs	r2, #8
					*d++ = col;
1000ee78:	54c5      	strb	r5, [r0, r3]
					*d2++ = col2;
1000ee7a:	54cc      	strb	r4, [r1, r3]
				for (; i > 7; i -= 8)
1000ee7c:	3301      	adds	r3, #1
1000ee7e:	2a07      	cmp	r2, #7
1000ee80:	dcf9      	bgt.n	1000ee76 <_Z8DrawRectP7sCanvasiiiih+0x94e>
1000ee82:	4664      	mov	r4, ip
1000ee84:	4645      	mov	r5, r8
1000ee86:	e43e      	b.n	1000e706 <_Z8DrawRectP7sCanvasiiiih+0x1de>
1000ee88:	4656      	mov	r6, sl
1000ee8a:	464d      	mov	r5, r9
1000ee8c:	e446      	b.n	1000e71c <_Z8DrawRectP7sCanvasiiiih+0x1f4>
				col <<= 4;
1000ee8e:	4643      	mov	r3, r8
1000ee90:	011b      	lsls	r3, r3, #4
1000ee92:	b2db      	uxtb	r3, r3
1000ee94:	469b      	mov	fp, r3
					dx = x & 7;
1000ee96:	2307      	movs	r3, #7
1000ee98:	400b      	ands	r3, r1
1000ee9a:	0018      	movs	r0, r3
1000ee9c:	9303      	str	r3, [sp, #12]
						m = 0x80 >> dx; // mask of 1 color bit
1000ee9e:	2380      	movs	r3, #128	; 0x80
1000eea0:	4492      	add	sl, r2
1000eea2:	0019      	movs	r1, r3
1000eea4:	4653      	mov	r3, sl
1000eea6:	9304      	str	r3, [sp, #16]
						for (; i > 0; i--)
1000eea8:	464b      	mov	r3, r9
						m = 0x80 >> dx; // mask of 1 color bit
1000eeaa:	4101      	asrs	r1, r0
						for (; i > 0; i--)
1000eeac:	3b01      	subs	r3, #1
1000eeae:	9307      	str	r3, [sp, #28]
							m >>= 1; // shift mask
1000eeb0:	104b      	asrs	r3, r1, #1
							*d = *d & ~m; // set 1 pixel
1000eeb2:	43db      	mvns	r3, r3
1000eeb4:	9309      	str	r3, [sp, #36]	; 0x24
						for (; i > 0; i--)
1000eeb6:	464b      	mov	r3, r9
1000eeb8:	3b02      	subs	r3, #2
1000eeba:	930a      	str	r3, [sp, #40]	; 0x28
							m >>= 1; // shift mask
1000eebc:	108b      	asrs	r3, r1, #2
							*d = *d & ~m; // set 1 pixel
1000eebe:	43db      	mvns	r3, r3
1000eec0:	930c      	str	r3, [sp, #48]	; 0x30
						for (; i > 0; i--)
1000eec2:	464b      	mov	r3, r9
1000eec4:	3b03      	subs	r3, #3
1000eec6:	930b      	str	r3, [sp, #44]	; 0x2c
							m >>= 1; // shift mask
1000eec8:	10cb      	asrs	r3, r1, #3
							*d = *d & ~m; // set 1 pixel
1000eeca:	43db      	mvns	r3, r3
1000eecc:	930d      	str	r3, [sp, #52]	; 0x34
						for (; i > 0; i--)
1000eece:	464b      	mov	r3, r9
1000eed0:	3b04      	subs	r3, #4
1000eed2:	930e      	str	r3, [sp, #56]	; 0x38
							m >>= 1; // shift mask
1000eed4:	110b      	asrs	r3, r1, #4
							*d = *d & ~m; // set 1 pixel
1000eed6:	43db      	mvns	r3, r3
1000eed8:	930f      	str	r3, [sp, #60]	; 0x3c
						for (; i > 0; i--)
1000eeda:	464b      	mov	r3, r9
1000eedc:	3b05      	subs	r3, #5
1000eede:	9310      	str	r3, [sp, #64]	; 0x40
							m >>= 1; // shift mask
1000eee0:	114b      	asrs	r3, r1, #5
							*d = *d & ~m; // set 1 pixel
1000eee2:	43db      	mvns	r3, r3
1000eee4:	9311      	str	r3, [sp, #68]	; 0x44
						for (; i > 0; i--)
1000eee6:	464b      	mov	r3, r9
1000eee8:	3b06      	subs	r3, #6
1000eeea:	9313      	str	r3, [sp, #76]	; 0x4c
							m >>= 1; // shift mask
1000eeec:	118b      	asrs	r3, r1, #6
							*d = *d & ~m; // set 1 pixel
1000eeee:	43db      	mvns	r3, r3
1000eef0:	9312      	str	r3, [sp, #72]	; 0x48
1000eef2:	465b      	mov	r3, fp
1000eef4:	4658      	mov	r0, fp
						m = 0x80 >> dx; // mask of 1 color bit
1000eef6:	9108      	str	r1, [sp, #32]
1000eef8:	4659      	mov	r1, fp
1000eefa:	021b      	lsls	r3, r3, #8
1000eefc:	0409      	lsls	r1, r1, #16
1000eefe:	4303      	orrs	r3, r0
1000ef00:	430b      	orrs	r3, r1
1000ef02:	9306      	str	r3, [sp, #24]
1000ef04:	464b      	mov	r3, r9
1000ef06:	4690      	mov	r8, r2
1000ef08:	46a9      	mov	r9, r5
1000ef0a:	9305      	str	r3, [sp, #20]
					if (dx != 0)
1000ef0c:	9b03      	ldr	r3, [sp, #12]
1000ef0e:	2b00      	cmp	r3, #0
1000ef10:	d000      	beq.n	1000ef14 <_Z8DrawRectP7sCanvasiiiih+0x9ec>
1000ef12:	e100      	b.n	1000f116 <_Z8DrawRectP7sCanvasiiiih+0xbee>
					for (; i > 7; i -= 8)
1000ef14:	9d05      	ldr	r5, [sp, #20]
1000ef16:	2d07      	cmp	r5, #7
1000ef18:	dc00      	bgt.n	1000ef1c <_Z8DrawRectP7sCanvasiiiih+0x9f4>
1000ef1a:	e1a5      	b.n	1000f268 <_Z8DrawRectP7sCanvasiiiih+0xd40>
1000ef1c:	464c      	mov	r4, r9
1000ef1e:	9800      	ldr	r0, [sp, #0]
1000ef20:	2306      	movs	r3, #6
1000ef22:	1ce2      	adds	r2, r4, #3
1000ef24:	1a12      	subs	r2, r2, r0
1000ef26:	0001      	movs	r1, r0
1000ef28:	4293      	cmp	r3, r2
1000ef2a:	419b      	sbcs	r3, r3
1000ef2c:	2203      	movs	r2, #3
1000ef2e:	4321      	orrs	r1, r4
1000ef30:	400a      	ands	r2, r1
1000ef32:	4251      	negs	r1, r2
1000ef34:	414a      	adcs	r2, r1
1000ef36:	425b      	negs	r3, r3
1000ef38:	421a      	tst	r2, r3
1000ef3a:	d001      	beq.n	1000ef40 <_Z8DrawRectP7sCanvasiiiih+0xa18>
1000ef3c:	2d37      	cmp	r5, #55	; 0x37
1000ef3e:	dc44      	bgt.n	1000efca <_Z8DrawRectP7sCanvasiiiih+0xaa2>
1000ef40:	0029      	movs	r1, r5
						*d2 = (*d2 & 0x0f) | col;
1000ef42:	46ac      	mov	ip, r5
					for (; i > 7; i -= 8)
1000ef44:	2200      	movs	r2, #0
						*d++ = 0;
1000ef46:	2700      	movs	r7, #0
						*d2 = (*d2 & 0x0f) | col;
1000ef48:	260f      	movs	r6, #15
1000ef4a:	465d      	mov	r5, fp
						*d++ = 0;
1000ef4c:	54a7      	strb	r7, [r4, r2]
						*d2 = (*d2 & 0x0f) | col;
1000ef4e:	5c83      	ldrb	r3, [r0, r2]
					for (; i > 7; i -= 8)
1000ef50:	3908      	subs	r1, #8
						*d2 = (*d2 & 0x0f) | col;
1000ef52:	4033      	ands	r3, r6
1000ef54:	432b      	orrs	r3, r5
1000ef56:	5483      	strb	r3, [r0, r2]
					for (; i > 7; i -= 8)
1000ef58:	3201      	adds	r2, #1
1000ef5a:	2907      	cmp	r1, #7
1000ef5c:	dcf6      	bgt.n	1000ef4c <_Z8DrawRectP7sCanvasiiiih+0xa24>
1000ef5e:	2308      	movs	r3, #8
1000ef60:	425b      	negs	r3, r3
1000ef62:	469a      	mov	sl, r3
1000ef64:	46ab      	mov	fp, r5
1000ef66:	4665      	mov	r5, ip
1000ef68:	44e2      	add	sl, ip
1000ef6a:	4653      	mov	r3, sl
1000ef6c:	08da      	lsrs	r2, r3, #3
1000ef6e:	2301      	movs	r3, #1
1000ef70:	2d07      	cmp	r5, #7
1000ef72:	dd00      	ble.n	1000ef76 <_Z8DrawRectP7sCanvasiiiih+0xa4e>
1000ef74:	1c53      	adds	r3, r2, #1
						*d++ = 0;
1000ef76:	18e4      	adds	r4, r4, r3
						d2++;
1000ef78:	18c0      	adds	r0, r0, r3
1000ef7a:	2300      	movs	r3, #0
1000ef7c:	2d07      	cmp	r5, #7
1000ef7e:	dd01      	ble.n	1000ef84 <_Z8DrawRectP7sCanvasiiiih+0xa5c>
1000ef80:	00d3      	lsls	r3, r2, #3
1000ef82:	425b      	negs	r3, r3
					for (; i > 7; i -= 8)
1000ef84:	4453      	add	r3, sl
1000ef86:	001d      	movs	r5, r3
					if (i > 0)
1000ef88:	2d00      	cmp	r5, #0
1000ef8a:	d00c      	beq.n	1000efa6 <_Z8DrawRectP7sCanvasiiiih+0xa7e>
						m = 0xff << (8-i); // mask
1000ef8c:	2308      	movs	r3, #8
1000ef8e:	22ff      	movs	r2, #255	; 0xff
1000ef90:	1b5d      	subs	r5, r3, r5
1000ef92:	40aa      	lsls	r2, r5
						*d = *d & ~m;
1000ef94:	7823      	ldrb	r3, [r4, #0]
1000ef96:	4393      	bics	r3, r2
1000ef98:	7023      	strb	r3, [r4, #0]
						*d2 = (*d2 & 0x0f) | col;
1000ef9a:	230f      	movs	r3, #15
1000ef9c:	7802      	ldrb	r2, [r0, #0]
1000ef9e:	4013      	ands	r3, r2
1000efa0:	465a      	mov	r2, fp
1000efa2:	4313      	orrs	r3, r2
1000efa4:	7003      	strb	r3, [r0, #0]
					d = d0 + wb;
1000efa6:	9b01      	ldr	r3, [sp, #4]
					y++;
1000efa8:	2201      	movs	r2, #1
					d = d0 + wb;
1000efaa:	469c      	mov	ip, r3
1000efac:	44e1      	add	r9, ip
					y++;
1000efae:	4694      	mov	ip, r2
1000efb0:	44e0      	add	r8, ip
					if ((y & 7) == 0) d2 += wb;
1000efb2:	4642      	mov	r2, r8
1000efb4:	0752      	lsls	r2, r2, #29
1000efb6:	d103      	bne.n	1000efc0 <_Z8DrawRectP7sCanvasiiiih+0xa98>
1000efb8:	469c      	mov	ip, r3
1000efba:	9a00      	ldr	r2, [sp, #0]
1000efbc:	4462      	add	r2, ip
1000efbe:	9200      	str	r2, [sp, #0]
				for (; h > 0; h--)
1000efc0:	9b04      	ldr	r3, [sp, #16]
1000efc2:	4598      	cmp	r8, r3
1000efc4:	d1a2      	bne.n	1000ef0c <_Z8DrawRectP7sCanvasiiiih+0x9e4>
1000efc6:	f7ff fb1e 	bl	1000e606 <_Z8DrawRectP7sCanvasiiiih+0xde>
1000efca:	2d07      	cmp	r5, #7
1000efcc:	dc00      	bgt.n	1000efd0 <_Z8DrawRectP7sCanvasiiiih+0xaa8>
1000efce:	e09c      	b.n	1000f10a <_Z8DrawRectP7sCanvasiiiih+0xbe2>
1000efd0:	2308      	movs	r3, #8
1000efd2:	425b      	negs	r3, r3
1000efd4:	469a      	mov	sl, r3
1000efd6:	44aa      	add	sl, r5
1000efd8:	4653      	mov	r3, sl
1000efda:	08db      	lsrs	r3, r3, #3
1000efdc:	3301      	adds	r3, #1
1000efde:	9302      	str	r3, [sp, #8]
1000efe0:	465b      	mov	r3, fp
1000efe2:	061a      	lsls	r2, r3, #24
1000efe4:	9b06      	ldr	r3, [sp, #24]
						*d2 = (*d2 & 0x0f) | col;
1000efe6:	49b1      	ldr	r1, [pc, #708]	; (1000f2ac <_Z8DrawRectP7sCanvasiiiih+0xd84>)
1000efe8:	431a      	orrs	r2, r3
1000efea:	9b02      	ldr	r3, [sp, #8]
1000efec:	468c      	mov	ip, r1
1000efee:	089f      	lsrs	r7, r3, #2
					for (; i > 7; i -= 8)
1000eff0:	2300      	movs	r3, #0
1000eff2:	00bf      	lsls	r7, r7, #2
						*d++ = 0;
1000eff4:	2100      	movs	r1, #0
						*d2 = (*d2 & 0x0f) | col;
1000eff6:	4666      	mov	r6, ip
						*d++ = 0;
1000eff8:	50e1      	str	r1, [r4, r3]
						*d2 = (*d2 & 0x0f) | col;
1000effa:	58c1      	ldr	r1, [r0, r3]
1000effc:	4031      	ands	r1, r6
1000effe:	4311      	orrs	r1, r2
1000f000:	50c1      	str	r1, [r0, r3]
					for (; i > 7; i -= 8)
1000f002:	3304      	adds	r3, #4
1000f004:	429f      	cmp	r7, r3
1000f006:	d1f5      	bne.n	1000eff4 <_Z8DrawRectP7sCanvasiiiih+0xacc>
1000f008:	9e02      	ldr	r6, [sp, #8]
1000f00a:	2303      	movs	r3, #3
1000f00c:	0032      	movs	r2, r6
1000f00e:	439a      	bics	r2, r3
1000f010:	0013      	movs	r3, r2
1000f012:	00d9      	lsls	r1, r3, #3
1000f014:	18a7      	adds	r7, r4, r2
1000f016:	1a69      	subs	r1, r5, r1
1000f018:	1882      	adds	r2, r0, r2
1000f01a:	42b3      	cmp	r3, r6
1000f01c:	d0a5      	beq.n	1000ef6a <_Z8DrawRectP7sCanvasiiiih+0xa42>
						*d++ = 0;
1000f01e:	2300      	movs	r3, #0
1000f020:	703b      	strb	r3, [r7, #0]
						*d2 = (*d2 & 0x0f) | col;
1000f022:	7813      	ldrb	r3, [r2, #0]
1000f024:	001e      	movs	r6, r3
1000f026:	230f      	movs	r3, #15
1000f028:	401e      	ands	r6, r3
1000f02a:	465b      	mov	r3, fp
1000f02c:	431e      	orrs	r6, r3
					for (; i > 7; i -= 8)
1000f02e:	2308      	movs	r3, #8
1000f030:	425b      	negs	r3, r3
1000f032:	469c      	mov	ip, r3
1000f034:	448c      	add	ip, r1
1000f036:	4663      	mov	r3, ip
						*d2 = (*d2 & 0x0f) | col;
1000f038:	7016      	strb	r6, [r2, #0]
					for (; i > 7; i -= 8)
1000f03a:	2b07      	cmp	r3, #7
1000f03c:	dd95      	ble.n	1000ef6a <_Z8DrawRectP7sCanvasiiiih+0xa42>
						*d++ = 0;
1000f03e:	2300      	movs	r3, #0
1000f040:	707b      	strb	r3, [r7, #1]
						*d2 = (*d2 & 0x0f) | col;
1000f042:	7853      	ldrb	r3, [r2, #1]
1000f044:	001e      	movs	r6, r3
1000f046:	230f      	movs	r3, #15
1000f048:	401e      	ands	r6, r3
1000f04a:	465b      	mov	r3, fp
1000f04c:	431e      	orrs	r6, r3
1000f04e:	7056      	strb	r6, [r2, #1]
					for (; i > 7; i -= 8)
1000f050:	2917      	cmp	r1, #23
1000f052:	dd8a      	ble.n	1000ef6a <_Z8DrawRectP7sCanvasiiiih+0xa42>
						*d++ = 0;
1000f054:	2300      	movs	r3, #0
1000f056:	70bb      	strb	r3, [r7, #2]
						*d2 = (*d2 & 0x0f) | col;
1000f058:	7891      	ldrb	r1, [r2, #2]
1000f05a:	330f      	adds	r3, #15
1000f05c:	400b      	ands	r3, r1
1000f05e:	4659      	mov	r1, fp
1000f060:	430b      	orrs	r3, r1
1000f062:	7093      	strb	r3, [r2, #2]
					for (; i > 7; i -= 8)
1000f064:	e781      	b.n	1000ef6a <_Z8DrawRectP7sCanvasiiiih+0xa42>
1000f066:	2d07      	cmp	r5, #7
1000f068:	dd49      	ble.n	1000f0fe <_Z8DrawRectP7sCanvasiiiih+0xbd6>
1000f06a:	2308      	movs	r3, #8
1000f06c:	425b      	negs	r3, r3
1000f06e:	469b      	mov	fp, r3
1000f070:	44ab      	add	fp, r5
1000f072:	465b      	mov	r3, fp
1000f074:	08db      	lsrs	r3, r3, #3
1000f076:	3301      	adds	r3, #1
1000f078:	9302      	str	r3, [sp, #8]
1000f07a:	4643      	mov	r3, r8
1000f07c:	061f      	lsls	r7, r3, #24
1000f07e:	9b06      	ldr	r3, [sp, #24]
						*d2 = (*d2 & 0xf0) | col;
1000f080:	4a8b      	ldr	r2, [pc, #556]	; (1000f2b0 <_Z8DrawRectP7sCanvasiiiih+0xd88>)
1000f082:	431f      	orrs	r7, r3
1000f084:	9b02      	ldr	r3, [sp, #8]
1000f086:	4694      	mov	ip, r2
1000f088:	089e      	lsrs	r6, r3, #2
					for (; i > 7; i -= 8)
1000f08a:	2300      	movs	r3, #0
1000f08c:	00b6      	lsls	r6, r6, #2
						*d++ = 0xff;
1000f08e:	2201      	movs	r2, #1
1000f090:	4252      	negs	r2, r2
1000f092:	50e2      	str	r2, [r4, r3]
						*d2 = (*d2 & 0xf0) | col;
1000f094:	4662      	mov	r2, ip
1000f096:	58c1      	ldr	r1, [r0, r3]
1000f098:	4011      	ands	r1, r2
1000f09a:	4339      	orrs	r1, r7
1000f09c:	50c1      	str	r1, [r0, r3]
					for (; i > 7; i -= 8)
1000f09e:	3304      	adds	r3, #4
1000f0a0:	42b3      	cmp	r3, r6
1000f0a2:	d1f4      	bne.n	1000f08e <_Z8DrawRectP7sCanvasiiiih+0xb66>
1000f0a4:	9a02      	ldr	r2, [sp, #8]
1000f0a6:	2303      	movs	r3, #3
1000f0a8:	0011      	movs	r1, r2
1000f0aa:	4399      	bics	r1, r3
1000f0ac:	00ce      	lsls	r6, r1, #3
1000f0ae:	1867      	adds	r7, r4, r1
1000f0b0:	1843      	adds	r3, r0, r1
1000f0b2:	1bae      	subs	r6, r5, r6
1000f0b4:	428a      	cmp	r2, r1
1000f0b6:	d100      	bne.n	1000f0ba <_Z8DrawRectP7sCanvasiiiih+0xb92>
1000f0b8:	e6a2      	b.n	1000ee00 <_Z8DrawRectP7sCanvasiiiih+0x8d8>
						*d++ = 0xff;
1000f0ba:	22ff      	movs	r2, #255	; 0xff
						*d2 = (*d2 & 0xf0) | col;
1000f0bc:	210f      	movs	r1, #15
						*d++ = 0xff;
1000f0be:	703a      	strb	r2, [r7, #0]
						*d2 = (*d2 & 0xf0) | col;
1000f0c0:	781a      	ldrb	r2, [r3, #0]
1000f0c2:	468c      	mov	ip, r1
1000f0c4:	438a      	bics	r2, r1
1000f0c6:	4641      	mov	r1, r8
1000f0c8:	430a      	orrs	r2, r1
1000f0ca:	701a      	strb	r2, [r3, #0]
					for (; i > 7; i -= 8)
1000f0cc:	0032      	movs	r2, r6
1000f0ce:	3a08      	subs	r2, #8
1000f0d0:	2a07      	cmp	r2, #7
1000f0d2:	dc00      	bgt.n	1000f0d6 <_Z8DrawRectP7sCanvasiiiih+0xbae>
1000f0d4:	e694      	b.n	1000ee00 <_Z8DrawRectP7sCanvasiiiih+0x8d8>
						*d++ = 0xff;
1000f0d6:	22ff      	movs	r2, #255	; 0xff
						*d2 = (*d2 & 0xf0) | col;
1000f0d8:	4661      	mov	r1, ip
						*d++ = 0xff;
1000f0da:	707a      	strb	r2, [r7, #1]
						*d2 = (*d2 & 0xf0) | col;
1000f0dc:	785a      	ldrb	r2, [r3, #1]
1000f0de:	438a      	bics	r2, r1
1000f0e0:	4641      	mov	r1, r8
1000f0e2:	430a      	orrs	r2, r1
1000f0e4:	705a      	strb	r2, [r3, #1]
					for (; i > 7; i -= 8)
1000f0e6:	2e17      	cmp	r6, #23
1000f0e8:	dc00      	bgt.n	1000f0ec <_Z8DrawRectP7sCanvasiiiih+0xbc4>
1000f0ea:	e689      	b.n	1000ee00 <_Z8DrawRectP7sCanvasiiiih+0x8d8>
						*d++ = 0xff;
1000f0ec:	22ff      	movs	r2, #255	; 0xff
						*d2 = (*d2 & 0xf0) | col;
1000f0ee:	4661      	mov	r1, ip
						*d++ = 0xff;
1000f0f0:	70ba      	strb	r2, [r7, #2]
						*d2 = (*d2 & 0xf0) | col;
1000f0f2:	789a      	ldrb	r2, [r3, #2]
1000f0f4:	438a      	bics	r2, r1
1000f0f6:	4641      	mov	r1, r8
1000f0f8:	430a      	orrs	r2, r1
1000f0fa:	709a      	strb	r2, [r3, #2]
					for (; i > 7; i -= 8)
1000f0fc:	e680      	b.n	1000ee00 <_Z8DrawRectP7sCanvasiiiih+0x8d8>
1000f0fe:	2301      	movs	r3, #1
1000f100:	9302      	str	r3, [sp, #8]
1000f102:	3b09      	subs	r3, #9
1000f104:	469b      	mov	fp, r3
1000f106:	44ab      	add	fp, r5
1000f108:	e7b7      	b.n	1000f07a <_Z8DrawRectP7sCanvasiiiih+0xb52>
1000f10a:	2301      	movs	r3, #1
1000f10c:	9302      	str	r3, [sp, #8]
1000f10e:	3b09      	subs	r3, #9
1000f110:	469a      	mov	sl, r3
1000f112:	44aa      	add	sl, r5
1000f114:	e764      	b.n	1000efe0 <_Z8DrawRectP7sCanvasiiiih+0xab8>
1000f116:	0019      	movs	r1, r3
							*d = *d & ~m; // set 1 pixel
1000f118:	464b      	mov	r3, r9
1000f11a:	781a      	ldrb	r2, [r3, #0]
1000f11c:	9b08      	ldr	r3, [sp, #32]
1000f11e:	439a      	bics	r2, r3
1000f120:	b253      	sxtb	r3, r2
							if (dx == 8) { i--; break; } // x is aligned
1000f122:	2907      	cmp	r1, #7
1000f124:	d100      	bne.n	1000f128 <_Z8DrawRectP7sCanvasiiiih+0xc00>
1000f126:	e0bc      	b.n	1000f2a2 <_Z8DrawRectP7sCanvasiiiih+0xd7a>
						for (; i > 0; i--)
1000f128:	9807      	ldr	r0, [sp, #28]
1000f12a:	2800      	cmp	r0, #0
1000f12c:	d100      	bne.n	1000f130 <_Z8DrawRectP7sCanvasiiiih+0xc08>
1000f12e:	e087      	b.n	1000f240 <_Z8DrawRectP7sCanvasiiiih+0xd18>
							*d = *d & ~m; // set 1 pixel
1000f130:	9a09      	ldr	r2, [sp, #36]	; 0x24
1000f132:	4013      	ands	r3, r2
1000f134:	b2da      	uxtb	r2, r3
							if (dx == 8) { i--; break; } // x is aligned
1000f136:	2906      	cmp	r1, #6
1000f138:	d100      	bne.n	1000f13c <_Z8DrawRectP7sCanvasiiiih+0xc14>
1000f13a:	e09b      	b.n	1000f274 <_Z8DrawRectP7sCanvasiiiih+0xd4c>
						for (; i > 0; i--)
1000f13c:	980a      	ldr	r0, [sp, #40]	; 0x28
1000f13e:	2800      	cmp	r0, #0
1000f140:	d07e      	beq.n	1000f240 <_Z8DrawRectP7sCanvasiiiih+0xd18>
							*d = *d & ~m; // set 1 pixel
1000f142:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1000f144:	4013      	ands	r3, r2
1000f146:	b2da      	uxtb	r2, r3
							if (dx == 8) { i--; break; } // x is aligned
1000f148:	2905      	cmp	r1, #5
1000f14a:	d100      	bne.n	1000f14e <_Z8DrawRectP7sCanvasiiiih+0xc26>
1000f14c:	e092      	b.n	1000f274 <_Z8DrawRectP7sCanvasiiiih+0xd4c>
						for (; i > 0; i--)
1000f14e:	980b      	ldr	r0, [sp, #44]	; 0x2c
1000f150:	2800      	cmp	r0, #0
1000f152:	d075      	beq.n	1000f240 <_Z8DrawRectP7sCanvasiiiih+0xd18>
							*d = *d & ~m; // set 1 pixel
1000f154:	9a0d      	ldr	r2, [sp, #52]	; 0x34
1000f156:	4013      	ands	r3, r2
1000f158:	b2da      	uxtb	r2, r3
							if (dx == 8) { i--; break; } // x is aligned
1000f15a:	2904      	cmp	r1, #4
1000f15c:	d100      	bne.n	1000f160 <_Z8DrawRectP7sCanvasiiiih+0xc38>
1000f15e:	e089      	b.n	1000f274 <_Z8DrawRectP7sCanvasiiiih+0xd4c>
						for (; i > 0; i--)
1000f160:	980e      	ldr	r0, [sp, #56]	; 0x38
1000f162:	2800      	cmp	r0, #0
1000f164:	d06c      	beq.n	1000f240 <_Z8DrawRectP7sCanvasiiiih+0xd18>
							*d = *d & ~m; // set 1 pixel
1000f166:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
1000f168:	4013      	ands	r3, r2
1000f16a:	b2da      	uxtb	r2, r3
							if (dx == 8) { i--; break; } // x is aligned
1000f16c:	2903      	cmp	r1, #3
1000f16e:	d100      	bne.n	1000f172 <_Z8DrawRectP7sCanvasiiiih+0xc4a>
1000f170:	e080      	b.n	1000f274 <_Z8DrawRectP7sCanvasiiiih+0xd4c>
						for (; i > 0; i--)
1000f172:	9810      	ldr	r0, [sp, #64]	; 0x40
1000f174:	2800      	cmp	r0, #0
1000f176:	d063      	beq.n	1000f240 <_Z8DrawRectP7sCanvasiiiih+0xd18>
							*d = *d & ~m; // set 1 pixel
1000f178:	9a11      	ldr	r2, [sp, #68]	; 0x44
1000f17a:	4013      	ands	r3, r2
1000f17c:	b2da      	uxtb	r2, r3
							if (dx == 8) { i--; break; } // x is aligned
1000f17e:	2902      	cmp	r1, #2
1000f180:	d078      	beq.n	1000f274 <_Z8DrawRectP7sCanvasiiiih+0xd4c>
						for (; i > 0; i--)
1000f182:	9d13      	ldr	r5, [sp, #76]	; 0x4c
1000f184:	2d00      	cmp	r5, #0
1000f186:	d05b      	beq.n	1000f240 <_Z8DrawRectP7sCanvasiiiih+0xd18>
							*d = *d & ~m; // set 1 pixel
1000f188:	9a12      	ldr	r2, [sp, #72]	; 0x48
1000f18a:	4013      	ands	r3, r2
1000f18c:	b2da      	uxtb	r2, r3
							if (dx == 8) { i--; break; } // x is aligned
1000f18e:	464b      	mov	r3, r9
1000f190:	701a      	strb	r2, [r3, #0]
						*d2 = (*d2 & 0x0f) | col;
1000f192:	230f      	movs	r3, #15
1000f194:	9900      	ldr	r1, [sp, #0]
							if (dx == 8) { i--; break; } // x is aligned
1000f196:	3d01      	subs	r5, #1
						*d2 = (*d2 & 0x0f) | col;
1000f198:	780a      	ldrb	r2, [r1, #0]
						d2++;
1000f19a:	1c48      	adds	r0, r1, #1
						*d2 = (*d2 & 0x0f) | col;
1000f19c:	4013      	ands	r3, r2
1000f19e:	465a      	mov	r2, fp
1000f1a0:	4313      	orrs	r3, r2
1000f1a2:	700b      	strb	r3, [r1, #0]
						d++;
1000f1a4:	464b      	mov	r3, r9
1000f1a6:	1c5c      	adds	r4, r3, #1
					for (; i > 7; i -= 8)
1000f1a8:	2d07      	cmp	r5, #7
1000f1aa:	dd00      	ble.n	1000f1ae <_Z8DrawRectP7sCanvasiiiih+0xc86>
1000f1ac:	e6b8      	b.n	1000ef20 <_Z8DrawRectP7sCanvasiiiih+0x9f8>
1000f1ae:	e6eb      	b.n	1000ef88 <_Z8DrawRectP7sCanvasiiiih+0xa60>
1000f1b0:	0019      	movs	r1, r3
							*d = *d | m; // set 1 pixel
1000f1b2:	4653      	mov	r3, sl
1000f1b4:	781a      	ldrb	r2, [r3, #0]
1000f1b6:	9b08      	ldr	r3, [sp, #32]
1000f1b8:	431a      	orrs	r2, r3
1000f1ba:	b253      	sxtb	r3, r2
1000f1bc:	b2d2      	uxtb	r2, r2
							if (dx == 8) { i--; break; } // x is aligned
1000f1be:	2907      	cmp	r1, #7
1000f1c0:	d071      	beq.n	1000f2a6 <_Z8DrawRectP7sCanvasiiiih+0xd7e>
						for (; i > 0; i--)
1000f1c2:	9807      	ldr	r0, [sp, #28]
1000f1c4:	2800      	cmp	r0, #0
1000f1c6:	d045      	beq.n	1000f254 <_Z8DrawRectP7sCanvasiiiih+0xd2c>
							*d = *d | m; // set 1 pixel
1000f1c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
1000f1ca:	4313      	orrs	r3, r2
1000f1cc:	b2da      	uxtb	r2, r3
							if (dx == 8) { i--; break; } // x is aligned
1000f1ce:	2906      	cmp	r1, #6
1000f1d0:	d052      	beq.n	1000f278 <_Z8DrawRectP7sCanvasiiiih+0xd50>
						for (; i > 0; i--)
1000f1d2:	980a      	ldr	r0, [sp, #40]	; 0x28
1000f1d4:	2800      	cmp	r0, #0
1000f1d6:	d03d      	beq.n	1000f254 <_Z8DrawRectP7sCanvasiiiih+0xd2c>
							*d = *d | m; // set 1 pixel
1000f1d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1000f1da:	4313      	orrs	r3, r2
1000f1dc:	b2da      	uxtb	r2, r3
							if (dx == 8) { i--; break; } // x is aligned
1000f1de:	2905      	cmp	r1, #5
1000f1e0:	d04a      	beq.n	1000f278 <_Z8DrawRectP7sCanvasiiiih+0xd50>
						for (; i > 0; i--)
1000f1e2:	980b      	ldr	r0, [sp, #44]	; 0x2c
1000f1e4:	2800      	cmp	r0, #0
1000f1e6:	d035      	beq.n	1000f254 <_Z8DrawRectP7sCanvasiiiih+0xd2c>
							*d = *d | m; // set 1 pixel
1000f1e8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
1000f1ea:	4313      	orrs	r3, r2
1000f1ec:	b2da      	uxtb	r2, r3
							if (dx == 8) { i--; break; } // x is aligned
1000f1ee:	2904      	cmp	r1, #4
1000f1f0:	d042      	beq.n	1000f278 <_Z8DrawRectP7sCanvasiiiih+0xd50>
						for (; i > 0; i--)
1000f1f2:	980e      	ldr	r0, [sp, #56]	; 0x38
1000f1f4:	2800      	cmp	r0, #0
1000f1f6:	d02d      	beq.n	1000f254 <_Z8DrawRectP7sCanvasiiiih+0xd2c>
							*d = *d | m; // set 1 pixel
1000f1f8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
1000f1fa:	4313      	orrs	r3, r2
1000f1fc:	b2da      	uxtb	r2, r3
							if (dx == 8) { i--; break; } // x is aligned
1000f1fe:	2903      	cmp	r1, #3
1000f200:	d03a      	beq.n	1000f278 <_Z8DrawRectP7sCanvasiiiih+0xd50>
						for (; i > 0; i--)
1000f202:	9810      	ldr	r0, [sp, #64]	; 0x40
1000f204:	2800      	cmp	r0, #0
1000f206:	d025      	beq.n	1000f254 <_Z8DrawRectP7sCanvasiiiih+0xd2c>
							*d = *d | m; // set 1 pixel
1000f208:	9a11      	ldr	r2, [sp, #68]	; 0x44
1000f20a:	4313      	orrs	r3, r2
1000f20c:	b2da      	uxtb	r2, r3
							if (dx == 8) { i--; break; } // x is aligned
1000f20e:	2902      	cmp	r1, #2
1000f210:	d032      	beq.n	1000f278 <_Z8DrawRectP7sCanvasiiiih+0xd50>
						for (; i > 0; i--)
1000f212:	9d13      	ldr	r5, [sp, #76]	; 0x4c
1000f214:	2d00      	cmp	r5, #0
1000f216:	d01d      	beq.n	1000f254 <_Z8DrawRectP7sCanvasiiiih+0xd2c>
							*d = *d | m; // set 1 pixel
1000f218:	9a12      	ldr	r2, [sp, #72]	; 0x48
1000f21a:	4313      	orrs	r3, r2
1000f21c:	b2da      	uxtb	r2, r3
							if (dx == 8) { i--; break; } // x is aligned
1000f21e:	4653      	mov	r3, sl
1000f220:	701a      	strb	r2, [r3, #0]
						*d2 = (*d2 & 0xf0) | col;
1000f222:	220f      	movs	r2, #15
1000f224:	9900      	ldr	r1, [sp, #0]
							if (dx == 8) { i--; break; } // x is aligned
1000f226:	3d01      	subs	r5, #1
						*d2 = (*d2 & 0xf0) | col;
1000f228:	780b      	ldrb	r3, [r1, #0]
						d2++;
1000f22a:	1c48      	adds	r0, r1, #1
						*d2 = (*d2 & 0xf0) | col;
1000f22c:	4393      	bics	r3, r2
1000f22e:	4642      	mov	r2, r8
1000f230:	4313      	orrs	r3, r2
1000f232:	700b      	strb	r3, [r1, #0]
						d++;
1000f234:	4653      	mov	r3, sl
1000f236:	1c5c      	adds	r4, r3, #1
					for (; i > 7; i -= 8)
1000f238:	2d07      	cmp	r5, #7
1000f23a:	dd00      	ble.n	1000f23e <_Z8DrawRectP7sCanvasiiiih+0xd16>
1000f23c:	e5ba      	b.n	1000edb4 <_Z8DrawRectP7sCanvasiiiih+0x88c>
1000f23e:	e5ee      	b.n	1000ee1e <_Z8DrawRectP7sCanvasiiiih+0x8f6>
1000f240:	464b      	mov	r3, r9
1000f242:	701a      	strb	r2, [r3, #0]
						*d2 = (*d2 & 0x0f) | col;
1000f244:	230f      	movs	r3, #15
1000f246:	9900      	ldr	r1, [sp, #0]
1000f248:	780a      	ldrb	r2, [r1, #0]
1000f24a:	4013      	ands	r3, r2
1000f24c:	465a      	mov	r2, fp
1000f24e:	4313      	orrs	r3, r2
1000f250:	700b      	strb	r3, [r1, #0]
					if (i > 0)
1000f252:	e6a8      	b.n	1000efa6 <_Z8DrawRectP7sCanvasiiiih+0xa7e>
1000f254:	4653      	mov	r3, sl
1000f256:	701a      	strb	r2, [r3, #0]
						*d2 = (*d2 & 0xf0) | col;
1000f258:	220f      	movs	r2, #15
1000f25a:	9900      	ldr	r1, [sp, #0]
1000f25c:	780b      	ldrb	r3, [r1, #0]
1000f25e:	4393      	bics	r3, r2
1000f260:	4642      	mov	r2, r8
1000f262:	4313      	orrs	r3, r2
1000f264:	700b      	strb	r3, [r1, #0]
					if (i > 0)
1000f266:	e5e9      	b.n	1000ee3c <_Z8DrawRectP7sCanvasiiiih+0x914>
					for (; i > 7; i -= 8)
1000f268:	464c      	mov	r4, r9
1000f26a:	9800      	ldr	r0, [sp, #0]
1000f26c:	e68e      	b.n	1000ef8c <_Z8DrawRectP7sCanvasiiiih+0xa64>
					for (; i > 7; i -= 8)
1000f26e:	4654      	mov	r4, sl
1000f270:	9800      	ldr	r0, [sp, #0]
1000f272:	e5d6      	b.n	1000ee22 <_Z8DrawRectP7sCanvasiiiih+0x8fa>
1000f274:	0005      	movs	r5, r0
1000f276:	e78a      	b.n	1000f18e <_Z8DrawRectP7sCanvasiiiih+0xc66>
1000f278:	0005      	movs	r5, r0
1000f27a:	e7d0      	b.n	1000f21e <_Z8DrawRectP7sCanvasiiiih+0xcf6>
						if (dx == 8) { i--; break; } // x is aligned
1000f27c:	9c05      	ldr	r4, [sp, #20]
1000f27e:	f7ff fb7c 	bl	1000e97a <_Z8DrawRectP7sCanvasiiiih+0x452>
						if (dx == 4) { i--; break; } // x is aligned
1000f282:	464c      	mov	r4, r9
1000f284:	e417      	b.n	1000eab6 <_Z8DrawRectP7sCanvasiiiih+0x58e>
						if (dx == 8) { i--; break; } // x is aligned
1000f286:	464c      	mov	r4, r9
1000f288:	e527      	b.n	1000ecda <_Z8DrawRectP7sCanvasiiiih+0x7b2>
						if (dx == 4) { i--; break; } // x is aligned
1000f28a:	9c04      	ldr	r4, [sp, #16]
1000f28c:	e413      	b.n	1000eab6 <_Z8DrawRectP7sCanvasiiiih+0x58e>
						if (dx == 8) { i--; break; } // x is aligned
1000f28e:	9c05      	ldr	r4, [sp, #20]
1000f290:	e523      	b.n	1000ecda <_Z8DrawRectP7sCanvasiiiih+0x7b2>
1000f292:	9c07      	ldr	r4, [sp, #28]
1000f294:	e521      	b.n	1000ecda <_Z8DrawRectP7sCanvasiiiih+0x7b2>
1000f296:	9c09      	ldr	r4, [sp, #36]	; 0x24
1000f298:	e51f      	b.n	1000ecda <_Z8DrawRectP7sCanvasiiiih+0x7b2>
1000f29a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
1000f29c:	e51d      	b.n	1000ecda <_Z8DrawRectP7sCanvasiiiih+0x7b2>
1000f29e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
1000f2a0:	e51b      	b.n	1000ecda <_Z8DrawRectP7sCanvasiiiih+0x7b2>
							if (dx == 8) { i--; break; } // x is aligned
1000f2a2:	9d05      	ldr	r5, [sp, #20]
1000f2a4:	e773      	b.n	1000f18e <_Z8DrawRectP7sCanvasiiiih+0xc66>
							if (dx == 8) { i--; break; } // x is aligned
1000f2a6:	9d05      	ldr	r5, [sp, #20]
1000f2a8:	e7b9      	b.n	1000f21e <_Z8DrawRectP7sCanvasiiiih+0xcf6>
1000f2aa:	46c0      	nop			; (mov r8, r8)
1000f2ac:	0f0f0f0f 	.word	0x0f0f0f0f
1000f2b0:	f0f0f0f0 	.word	0xf0f0f0f0

1000f2b4 <_Z10DrawTextBgP7sCanvasPKciihhPKviii>:

// Draw text with background
//   font = pointer to 1-bit font
void DrawTextBg(sCanvas* canvas, const char* text, int x, int y, u8 col, u8 bgcol,
	const void* font, int fontheight /*=8*/, int scalex /*=1*/, int scaley /*=1*/)
{
1000f2b4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f2b6:	464e      	mov	r6, r9
1000f2b8:	46de      	mov	lr, fp
1000f2ba:	4657      	mov	r7, sl
1000f2bc:	4645      	mov	r5, r8
1000f2be:	b5e0      	push	{r5, r6, r7, lr}
1000f2c0:	b091      	sub	sp, #68	; 0x44
1000f2c2:	930f      	str	r3, [sp, #60]	; 0x3c
1000f2c4:	ab1a      	add	r3, sp, #104	; 0x68
1000f2c6:	781b      	ldrb	r3, [r3, #0]
1000f2c8:	9207      	str	r2, [sp, #28]
1000f2ca:	9302      	str	r3, [sp, #8]
1000f2cc:	ab1b      	add	r3, sp, #108	; 0x6c
1000f2ce:	781b      	ldrb	r3, [r3, #0]
1000f2d0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
1000f2d2:	0006      	movs	r6, r0
1000f2d4:	9304      	str	r3, [sp, #16]
	// invalid scale
	if ((scalex == 0) || (scaley == 0)) return;
1000f2d6:	2a00      	cmp	r2, #0
1000f2d8:	d100      	bne.n	1000f2dc <_Z10DrawTextBgP7sCanvasPKciihhPKviii+0x28>
1000f2da:	e08f      	b.n	1000f3fc <_Z10DrawTextBgP7sCanvasPKciihhPKviii+0x148>
1000f2dc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
1000f2de:	2b00      	cmp	r3, #0
1000f2e0:	d100      	bne.n	1000f2e4 <_Z10DrawTextBgP7sCanvasPKciihhPKviii+0x30>
1000f2e2:	e08b      	b.n	1000f3fc <_Z10DrawTextBgP7sCanvasPKciihhPKviii+0x148>

	// prepare coordinate increment
	int sx = (scalex < 0) ? -1 : 1; // increment X coordinate
1000f2e4:	2a00      	cmp	r2, #0
1000f2e6:	da00      	bge.n	1000f2ea <_Z10DrawTextBgP7sCanvasPKciihhPKviii+0x36>
1000f2e8:	e08f      	b.n	1000f40a <_Z10DrawTextBgP7sCanvasPKciihhPKviii+0x156>
1000f2ea:	2301      	movs	r3, #1
1000f2ec:	469a      	mov	sl, r3
1000f2ee:	9203      	str	r2, [sp, #12]
	int sy = (scaley < 0) ? -1 : 1; // increment Y coordinate
1000f2f0:	2301      	movs	r3, #1
1000f2f2:	9306      	str	r3, [sp, #24]
1000f2f4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
1000f2f6:	2b00      	cmp	r3, #0
1000f2f8:	da04      	bge.n	1000f304 <_Z10DrawTextBgP7sCanvasPKciihhPKviii+0x50>
1000f2fa:	425b      	negs	r3, r3
1000f2fc:	931f      	str	r3, [sp, #124]	; 0x7c
1000f2fe:	2301      	movs	r3, #1
1000f300:	425b      	negs	r3, r3
1000f302:	9306      	str	r3, [sp, #24]
	const u8* s;
	const u8* fnt = (const u8*)font;
	u8 c;

	// loop through characters of text
	while ((ch = (u8)*text++) != 0) // until end of text
1000f304:	780b      	ldrb	r3, [r1, #0]
1000f306:	1c48      	adds	r0, r1, #1
1000f308:	2b00      	cmp	r3, #0
1000f30a:	d077      	beq.n	1000f3fc <_Z10DrawTextBgP7sCanvasPKciihhPKviii+0x148>
				y += sy;
			}
		}

		// shift to next character position
		x0 += scalex*8;
1000f30c:	00d2      	lsls	r2, r2, #3
1000f30e:	920d      	str	r2, [sp, #52]	; 0x34
1000f310:	9a1d      	ldr	r2, [sp, #116]	; 0x74
1000f312:	2a00      	cmp	r2, #0
1000f314:	dd72      	ble.n	1000f3fc <_Z10DrawTextBgP7sCanvasPKciihhPKviii+0x148>
1000f316:	4651      	mov	r1, sl
1000f318:	9a03      	ldr	r2, [sp, #12]
1000f31a:	900a      	str	r0, [sp, #40]	; 0x28
1000f31c:	3a01      	subs	r2, #1
1000f31e:	4351      	muls	r1, r2
1000f320:	9a06      	ldr	r2, [sp, #24]
1000f322:	9101      	str	r1, [sp, #4]
1000f324:	991f      	ldr	r1, [sp, #124]	; 0x7c
1000f326:	434a      	muls	r2, r1
1000f328:	920e      	str	r2, [sp, #56]	; 0x38
		s = &fnt[ch];
1000f32a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
1000f32c:	4694      	mov	ip, r2
1000f32e:	4463      	add	r3, ip
1000f330:	930b      	str	r3, [sp, #44]	; 0x2c
1000f332:	9b1d      	ldr	r3, [sp, #116]	; 0x74
1000f334:	930c      	str	r3, [sp, #48]	; 0x30
		y = y0;
1000f336:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1000f338:	9309      	str	r3, [sp, #36]	; 0x24
			s += 256;
1000f33a:	9f09      	ldr	r7, [sp, #36]	; 0x24
			ch0 = *s;
1000f33c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
			s += 256;
1000f33e:	46b8      	mov	r8, r7
1000f340:	4657      	mov	r7, sl
			ch0 = *s;
1000f342:	781a      	ldrb	r2, [r3, #0]
			s += 256;
1000f344:	3301      	adds	r3, #1
1000f346:	33ff      	adds	r3, #255	; 0xff
1000f348:	930b      	str	r3, [sp, #44]	; 0x2c
1000f34a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
			ch0 = *s;
1000f34c:	9208      	str	r2, [sp, #32]
			s += 256;
1000f34e:	9305      	str	r3, [sp, #20]
				ch = ch0;
1000f350:	9b08      	ldr	r3, [sp, #32]
1000f352:	4699      	mov	r9, r3
1000f354:	9b07      	ldr	r3, [sp, #28]
1000f356:	9300      	str	r3, [sp, #0]
1000f358:	2308      	movs	r3, #8
1000f35a:	469b      	mov	fp, r3
					c = ((ch & 0x80) != 0) ? col : bgcol;
1000f35c:	464b      	mov	r3, r9
1000f35e:	9a02      	ldr	r2, [sp, #8]
1000f360:	b25b      	sxtb	r3, r3
1000f362:	4692      	mov	sl, r2
1000f364:	2b00      	cmp	r3, #0
1000f366:	db01      	blt.n	1000f36c <_Z10DrawTextBgP7sCanvasPKciihhPKviii+0xb8>
1000f368:	9b04      	ldr	r3, [sp, #16]
1000f36a:	469a      	mov	sl, r3
					for (k = dx; k > 0; k--)
1000f36c:	4643      	mov	r3, r8
1000f36e:	46b8      	mov	r8, r7
1000f370:	001f      	movs	r7, r3
				ch = ch0;
1000f372:	9d03      	ldr	r5, [sp, #12]
1000f374:	9c00      	ldr	r4, [sp, #0]
	if (((u32)x >= (u32)canvas->w) || ((u32)y >= (u32)canvas->h)) return;
1000f376:	68b3      	ldr	r3, [r6, #8]
1000f378:	42a3      	cmp	r3, r4
1000f37a:	d908      	bls.n	1000f38e <_Z10DrawTextBgP7sCanvasPKciihhPKviii+0xda>
1000f37c:	68f3      	ldr	r3, [r6, #12]
1000f37e:	429f      	cmp	r7, r3
1000f380:	d205      	bcs.n	1000f38e <_Z10DrawTextBgP7sCanvasPKciihhPKviii+0xda>
1000f382:	4653      	mov	r3, sl
1000f384:	003a      	movs	r2, r7
1000f386:	0021      	movs	r1, r4
1000f388:	0030      	movs	r0, r6
1000f38a:	f7fe ff8d 	bl	1000e2a8 <_Z9DrawPointP7sCanvasiih.part.0>
					for (k = dx; k > 0; k--)
1000f38e:	3d01      	subs	r5, #1
						x += sx;
1000f390:	4444      	add	r4, r8
					for (k = dx; k > 0; k--)
1000f392:	2d00      	cmp	r5, #0
1000f394:	d1ef      	bne.n	1000f376 <_Z10DrawTextBgP7sCanvasPKciihhPKviii+0xc2>
1000f396:	003b      	movs	r3, r7
						x += sx;
1000f398:	9a01      	ldr	r2, [sp, #4]
1000f39a:	4647      	mov	r7, r8
1000f39c:	4694      	mov	ip, r2
1000f39e:	4698      	mov	r8, r3
1000f3a0:	9b00      	ldr	r3, [sp, #0]
1000f3a2:	18fb      	adds	r3, r7, r3
1000f3a4:	4463      	add	r3, ip
1000f3a6:	9300      	str	r3, [sp, #0]
					ch <<= 1;
1000f3a8:	464b      	mov	r3, r9
1000f3aa:	005b      	lsls	r3, r3, #1
1000f3ac:	b2db      	uxtb	r3, r3
1000f3ae:	4699      	mov	r9, r3
				for (j = 8; j > 0; j--)
1000f3b0:	2301      	movs	r3, #1
1000f3b2:	425b      	negs	r3, r3
1000f3b4:	469c      	mov	ip, r3
1000f3b6:	44e3      	add	fp, ip
1000f3b8:	465b      	mov	r3, fp
1000f3ba:	2b00      	cmp	r3, #0
1000f3bc:	d1ce      	bne.n	1000f35c <_Z10DrawTextBgP7sCanvasPKciihhPKviii+0xa8>
				y += sy;
1000f3be:	9b06      	ldr	r3, [sp, #24]
1000f3c0:	469c      	mov	ip, r3
			for (m = dy; m > 0; m--)
1000f3c2:	9b05      	ldr	r3, [sp, #20]
				y += sy;
1000f3c4:	44e0      	add	r8, ip
			for (m = dy; m > 0; m--)
1000f3c6:	3b01      	subs	r3, #1
1000f3c8:	9305      	str	r3, [sp, #20]
1000f3ca:	2b00      	cmp	r3, #0
1000f3cc:	d1c0      	bne.n	1000f350 <_Z10DrawTextBgP7sCanvasPKciihhPKviii+0x9c>
1000f3ce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
1000f3d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
1000f3d2:	4694      	mov	ip, r2
1000f3d4:	4463      	add	r3, ip
1000f3d6:	9309      	str	r3, [sp, #36]	; 0x24
		for (i = fontheight; i > 0; i--)
1000f3d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1000f3da:	46ba      	mov	sl, r7
1000f3dc:	3b01      	subs	r3, #1
1000f3de:	930c      	str	r3, [sp, #48]	; 0x30
1000f3e0:	2b00      	cmp	r3, #0
1000f3e2:	d1aa      	bne.n	1000f33a <_Z10DrawTextBgP7sCanvasPKciihhPKviii+0x86>
		x0 += scalex*8;
1000f3e4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
1000f3e6:	9b07      	ldr	r3, [sp, #28]
1000f3e8:	4694      	mov	ip, r2
1000f3ea:	4463      	add	r3, ip
1000f3ec:	9307      	str	r3, [sp, #28]
	while ((ch = (u8)*text++) != 0) // until end of text
1000f3ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1000f3f0:	3301      	adds	r3, #1
1000f3f2:	930a      	str	r3, [sp, #40]	; 0x28
1000f3f4:	3b01      	subs	r3, #1
1000f3f6:	781b      	ldrb	r3, [r3, #0]
1000f3f8:	2b00      	cmp	r3, #0
1000f3fa:	d196      	bne.n	1000f32a <_Z10DrawTextBgP7sCanvasPKciihhPKviii+0x76>
	}
}
1000f3fc:	b011      	add	sp, #68	; 0x44
1000f3fe:	bcf0      	pop	{r4, r5, r6, r7}
1000f400:	46bb      	mov	fp, r7
1000f402:	46b2      	mov	sl, r6
1000f404:	46a9      	mov	r9, r5
1000f406:	46a0      	mov	r8, r4
1000f408:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f40a:	4253      	negs	r3, r2
1000f40c:	9303      	str	r3, [sp, #12]
	int sx = (scalex < 0) ? -1 : 1; // increment X coordinate
1000f40e:	2301      	movs	r3, #1
1000f410:	425b      	negs	r3, r3
1000f412:	469a      	mov	sl, r3
1000f414:	e76c      	b.n	1000f2f0 <_Z10DrawTextBgP7sCanvasPKciihhPKviii+0x3c>
1000f416:	46c0      	nop			; (mov r8, r8)

1000f418 <_Z12FindSysClockmPmS_PtPhS1_>:
//  outfbdiv ... output fbdiv (16..320)
//  outpd1 ... output postdiv1 (1..7)
//  outpd2 ... output postdiv2 (1..7)
// Returns true if precise frequency has been found, or near frequency used otherwise.
bool FindSysClock(u32 reqkhz, u32* outkhz, u32* outvco, u16* outfbdiv, u8* outpd1, u8* outpd2)
{
1000f418:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f41a:	46de      	mov	lr, fp
1000f41c:	464e      	mov	r6, r9
1000f41e:	4657      	mov	r7, sl
1000f420:	4645      	mov	r5, r8
1000f422:	b5e0      	push	{r5, r6, r7, lr}
1000f424:	b087      	sub	sp, #28
1000f426:	9000      	str	r0, [sp, #0]
	// get reference frequency in kHz (should be 12 MHz)
	u32 input = clock_get_hz(clk_ref)/1000;
1000f428:	2004      	movs	r0, #4
{
1000f42a:	468a      	mov	sl, r1
1000f42c:	4691      	mov	r9, r2
1000f42e:	9304      	str	r3, [sp, #16]
	u32 input = clock_get_hz(clk_ref)/1000;
1000f430:	f7f2 f928 	bl	10001684 <clock_get_hz>
1000f434:	21fa      	movs	r1, #250	; 0xfa
1000f436:	0089      	lsls	r1, r1, #2
1000f438:	f7f0 ff9c 	bl	10000374 <__wrap___aeabi_uidiv>
	*outkhz = 0;
1000f43c:	2300      	movs	r3, #0
1000f43e:	4651      	mov	r1, sl
1000f440:	4684      	mov	ip, r0
1000f442:	4a8e      	ldr	r2, [pc, #568]	; (1000f67c <_Z12FindSysClockmPmS_PtPhS1_+0x264>)
1000f444:	600b      	str	r3, [r1, #0]
1000f446:	0083      	lsls	r3, r0, #2
1000f448:	4463      	add	r3, ip
1000f44a:	4694      	mov	ip, r2
1000f44c:	019b      	lsls	r3, r3, #6
1000f44e:	4463      	add	r3, ip
1000f450:	9302      	str	r3, [sp, #8]
						*outpd2 = pd2;
1000f452:	464b      	mov	r3, r9
	*outkhz = 0;
1000f454:	25a0      	movs	r5, #160	; 0xa0
						*outpd2 = pd2;
1000f456:	46d1      	mov	r9, sl
1000f458:	469a      	mov	sl, r3
	*outkhz = 0;
1000f45a:	4e89      	ldr	r6, [pc, #548]	; (1000f680 <_Z12FindSysClockmPmS_PtPhS1_+0x268>)
	u32 input = clock_get_hz(clk_ref)/1000;
1000f45c:	9005      	str	r0, [sp, #20]
	*outkhz = 0;
1000f45e:	006d      	lsls	r5, r5, #1
		vco = fbdiv * input;
1000f460:	4a88      	ldr	r2, [pc, #544]	; (1000f684 <_Z12FindSysClockmPmS_PtPhS1_+0x26c>)
1000f462:	9b02      	ldr	r3, [sp, #8]
1000f464:	4694      	mov	ip, r2
1000f466:	001c      	movs	r4, r3
		if ((vco >= vcomin) && (vco <= vcomax))
1000f468:	4a87      	ldr	r2, [pc, #540]	; (1000f688 <_Z12FindSysClockmPmS_PtPhS1_+0x270>)
1000f46a:	4464      	add	r4, ip
1000f46c:	4293      	cmp	r3, r2
1000f46e:	d900      	bls.n	1000f472 <_Z12FindSysClockmPmS_PtPhS1_+0x5a>
1000f470:	e0dd      	b.n	1000f62e <_Z12FindSysClockmPmS_PtPhS1_+0x216>
1000f472:	2306      	movs	r3, #6
1000f474:	9503      	str	r5, [sp, #12]
1000f476:	4698      	mov	r8, r3
1000f478:	e0b4      	b.n	1000f5e4 <_Z12FindSysClockmPmS_PtPhS1_+0x1cc>
					khz = vco / (pd1 * pd2);
1000f47a:	4641      	mov	r1, r8
1000f47c:	0020      	movs	r0, r4
1000f47e:	4369      	muls	r1, r5
1000f480:	f7f0 ff78 	bl	10000374 <__wrap___aeabi_uidiv>
					margin = abs((int)(khz - reqkhz));
1000f484:	9b00      	ldr	r3, [sp, #0]
1000f486:	1ac3      	subs	r3, r0, r3
1000f488:	17da      	asrs	r2, r3, #31
1000f48a:	189b      	adds	r3, r3, r2
1000f48c:	4053      	eors	r3, r2
					if (margin < margin_best)
1000f48e:	42b3      	cmp	r3, r6
1000f490:	d20c      	bcs.n	1000f4ac <_Z12FindSysClockmPmS_PtPhS1_+0x94>
						*outkhz = khz;
1000f492:	464a      	mov	r2, r9
1000f494:	6010      	str	r0, [r2, #0]
						*outvco = vco;
1000f496:	4652      	mov	r2, sl
						*outpd2 = pd2;
1000f498:	001e      	movs	r6, r3
						*outvco = vco;
1000f49a:	6014      	str	r4, [r2, #0]
						*outfbdiv = fbdiv;
1000f49c:	9903      	ldr	r1, [sp, #12]
1000f49e:	9a04      	ldr	r2, [sp, #16]
1000f4a0:	8011      	strh	r1, [r2, #0]
						*outpd1 = pd1;
1000f4a2:	9a10      	ldr	r2, [sp, #64]	; 0x40
1000f4a4:	9901      	ldr	r1, [sp, #4]
1000f4a6:	7011      	strb	r1, [r2, #0]
						*outpd2 = pd2;
1000f4a8:	9a11      	ldr	r2, [sp, #68]	; 0x44
1000f4aa:	7017      	strb	r7, [r2, #0]
				for (pd2 = pd1; pd2 >= 1; pd2--)
1000f4ac:	1e7b      	subs	r3, r7, #1
1000f4ae:	b2db      	uxtb	r3, r3
1000f4b0:	469b      	mov	fp, r3
1000f4b2:	2b00      	cmp	r3, #0
1000f4b4:	d100      	bne.n	1000f4b8 <_Z12FindSysClockmPmS_PtPhS1_+0xa0>
1000f4b6:	e091      	b.n	1000f5dc <_Z12FindSysClockmPmS_PtPhS1_+0x1c4>
					khz = vco / (pd1 * pd2);
1000f4b8:	0019      	movs	r1, r3
1000f4ba:	0020      	movs	r0, r4
1000f4bc:	4369      	muls	r1, r5
1000f4be:	f7f0 ff59 	bl	10000374 <__wrap___aeabi_uidiv>
					margin = abs((int)(khz - reqkhz));
1000f4c2:	9b00      	ldr	r3, [sp, #0]
1000f4c4:	1ac3      	subs	r3, r0, r3
1000f4c6:	17da      	asrs	r2, r3, #31
1000f4c8:	189b      	adds	r3, r3, r2
1000f4ca:	4053      	eors	r3, r2
					if (margin < margin_best)
1000f4cc:	42b3      	cmp	r3, r6
1000f4ce:	d20d      	bcs.n	1000f4ec <_Z12FindSysClockmPmS_PtPhS1_+0xd4>
						*outkhz = khz;
1000f4d0:	464a      	mov	r2, r9
1000f4d2:	6010      	str	r0, [r2, #0]
						*outvco = vco;
1000f4d4:	4652      	mov	r2, sl
						*outfbdiv = fbdiv;
1000f4d6:	9903      	ldr	r1, [sp, #12]
						*outvco = vco;
1000f4d8:	6014      	str	r4, [r2, #0]
						*outfbdiv = fbdiv;
1000f4da:	9a04      	ldr	r2, [sp, #16]
						*outpd2 = pd2;
1000f4dc:	001e      	movs	r6, r3
						*outfbdiv = fbdiv;
1000f4de:	8011      	strh	r1, [r2, #0]
						*outpd1 = pd1;
1000f4e0:	9a10      	ldr	r2, [sp, #64]	; 0x40
1000f4e2:	9901      	ldr	r1, [sp, #4]
1000f4e4:	7011      	strb	r1, [r2, #0]
						*outpd2 = pd2;
1000f4e6:	4659      	mov	r1, fp
1000f4e8:	9a11      	ldr	r2, [sp, #68]	; 0x44
1000f4ea:	7011      	strb	r1, [r2, #0]
				for (pd2 = pd1; pd2 >= 1; pd2--)
1000f4ec:	1ebb      	subs	r3, r7, #2
1000f4ee:	b2db      	uxtb	r3, r3
1000f4f0:	469b      	mov	fp, r3
1000f4f2:	2b00      	cmp	r3, #0
1000f4f4:	d072      	beq.n	1000f5dc <_Z12FindSysClockmPmS_PtPhS1_+0x1c4>
					khz = vco / (pd1 * pd2);
1000f4f6:	0019      	movs	r1, r3
1000f4f8:	0020      	movs	r0, r4
1000f4fa:	4369      	muls	r1, r5
1000f4fc:	f7f0 ff3a 	bl	10000374 <__wrap___aeabi_uidiv>
					margin = abs((int)(khz - reqkhz));
1000f500:	9b00      	ldr	r3, [sp, #0]
1000f502:	1ac3      	subs	r3, r0, r3
1000f504:	17da      	asrs	r2, r3, #31
1000f506:	189b      	adds	r3, r3, r2
1000f508:	4053      	eors	r3, r2
					if (margin < margin_best)
1000f50a:	429e      	cmp	r6, r3
1000f50c:	d90d      	bls.n	1000f52a <_Z12FindSysClockmPmS_PtPhS1_+0x112>
						*outkhz = khz;
1000f50e:	464a      	mov	r2, r9
1000f510:	6010      	str	r0, [r2, #0]
						*outvco = vco;
1000f512:	4652      	mov	r2, sl
						*outfbdiv = fbdiv;
1000f514:	9903      	ldr	r1, [sp, #12]
						*outvco = vco;
1000f516:	6014      	str	r4, [r2, #0]
						*outfbdiv = fbdiv;
1000f518:	9a04      	ldr	r2, [sp, #16]
						*outpd2 = pd2;
1000f51a:	001e      	movs	r6, r3
						*outfbdiv = fbdiv;
1000f51c:	8011      	strh	r1, [r2, #0]
						*outpd1 = pd1;
1000f51e:	9a10      	ldr	r2, [sp, #64]	; 0x40
1000f520:	9901      	ldr	r1, [sp, #4]
1000f522:	7011      	strb	r1, [r2, #0]
						*outpd2 = pd2;
1000f524:	4659      	mov	r1, fp
1000f526:	9a11      	ldr	r2, [sp, #68]	; 0x44
1000f528:	7011      	strb	r1, [r2, #0]
				for (pd2 = pd1; pd2 >= 1; pd2--)
1000f52a:	1efb      	subs	r3, r7, #3
1000f52c:	b2db      	uxtb	r3, r3
1000f52e:	469b      	mov	fp, r3
1000f530:	2b00      	cmp	r3, #0
1000f532:	d053      	beq.n	1000f5dc <_Z12FindSysClockmPmS_PtPhS1_+0x1c4>
					khz = vco / (pd1 * pd2);
1000f534:	0019      	movs	r1, r3
1000f536:	0020      	movs	r0, r4
1000f538:	4369      	muls	r1, r5
1000f53a:	f7f0 ff1b 	bl	10000374 <__wrap___aeabi_uidiv>
					margin = abs((int)(khz - reqkhz));
1000f53e:	9b00      	ldr	r3, [sp, #0]
1000f540:	1ac3      	subs	r3, r0, r3
1000f542:	17da      	asrs	r2, r3, #31
1000f544:	189b      	adds	r3, r3, r2
1000f546:	4053      	eors	r3, r2
					if (margin < margin_best)
1000f548:	429e      	cmp	r6, r3
1000f54a:	d90d      	bls.n	1000f568 <_Z12FindSysClockmPmS_PtPhS1_+0x150>
						*outkhz = khz;
1000f54c:	464a      	mov	r2, r9
1000f54e:	6010      	str	r0, [r2, #0]
						*outvco = vco;
1000f550:	4652      	mov	r2, sl
						*outfbdiv = fbdiv;
1000f552:	9903      	ldr	r1, [sp, #12]
						*outvco = vco;
1000f554:	6014      	str	r4, [r2, #0]
						*outfbdiv = fbdiv;
1000f556:	9a04      	ldr	r2, [sp, #16]
						*outpd2 = pd2;
1000f558:	001e      	movs	r6, r3
						*outfbdiv = fbdiv;
1000f55a:	8011      	strh	r1, [r2, #0]
						*outpd1 = pd1;
1000f55c:	9a10      	ldr	r2, [sp, #64]	; 0x40
1000f55e:	9901      	ldr	r1, [sp, #4]
1000f560:	7011      	strb	r1, [r2, #0]
						*outpd2 = pd2;
1000f562:	4659      	mov	r1, fp
1000f564:	9a11      	ldr	r2, [sp, #68]	; 0x44
1000f566:	7011      	strb	r1, [r2, #0]
				for (pd2 = pd1; pd2 >= 1; pd2--)
1000f568:	1f3b      	subs	r3, r7, #4
1000f56a:	b2db      	uxtb	r3, r3
1000f56c:	469b      	mov	fp, r3
1000f56e:	2b00      	cmp	r3, #0
1000f570:	d034      	beq.n	1000f5dc <_Z12FindSysClockmPmS_PtPhS1_+0x1c4>
					khz = vco / (pd1 * pd2);
1000f572:	0019      	movs	r1, r3
1000f574:	0020      	movs	r0, r4
1000f576:	4369      	muls	r1, r5
1000f578:	f7f0 fefc 	bl	10000374 <__wrap___aeabi_uidiv>
					margin = abs((int)(khz - reqkhz));
1000f57c:	9b00      	ldr	r3, [sp, #0]
1000f57e:	1ac3      	subs	r3, r0, r3
1000f580:	17da      	asrs	r2, r3, #31
1000f582:	189b      	adds	r3, r3, r2
1000f584:	4053      	eors	r3, r2
					if (margin < margin_best)
1000f586:	429e      	cmp	r6, r3
1000f588:	d90d      	bls.n	1000f5a6 <_Z12FindSysClockmPmS_PtPhS1_+0x18e>
						*outkhz = khz;
1000f58a:	464a      	mov	r2, r9
1000f58c:	6010      	str	r0, [r2, #0]
						*outvco = vco;
1000f58e:	4652      	mov	r2, sl
						*outfbdiv = fbdiv;
1000f590:	9903      	ldr	r1, [sp, #12]
						*outvco = vco;
1000f592:	6014      	str	r4, [r2, #0]
						*outfbdiv = fbdiv;
1000f594:	9a04      	ldr	r2, [sp, #16]
						*outpd2 = pd2;
1000f596:	001e      	movs	r6, r3
						*outfbdiv = fbdiv;
1000f598:	8011      	strh	r1, [r2, #0]
						*outpd1 = pd1;
1000f59a:	9a10      	ldr	r2, [sp, #64]	; 0x40
1000f59c:	9901      	ldr	r1, [sp, #4]
1000f59e:	7011      	strb	r1, [r2, #0]
						*outpd2 = pd2;
1000f5a0:	4659      	mov	r1, fp
1000f5a2:	9a11      	ldr	r2, [sp, #68]	; 0x44
1000f5a4:	7011      	strb	r1, [r2, #0]
				for (pd2 = pd1; pd2 >= 1; pd2--)
1000f5a6:	2f05      	cmp	r7, #5
1000f5a8:	d018      	beq.n	1000f5dc <_Z12FindSysClockmPmS_PtPhS1_+0x1c4>
					khz = vco / (pd1 * pd2);
1000f5aa:	0029      	movs	r1, r5
1000f5ac:	0020      	movs	r0, r4
1000f5ae:	f7f0 fee1 	bl	10000374 <__wrap___aeabi_uidiv>
					margin = abs((int)(khz - reqkhz));
1000f5b2:	9b00      	ldr	r3, [sp, #0]
1000f5b4:	1ac3      	subs	r3, r0, r3
1000f5b6:	17da      	asrs	r2, r3, #31
1000f5b8:	189b      	adds	r3, r3, r2
1000f5ba:	4053      	eors	r3, r2
					if (margin < margin_best)
1000f5bc:	429e      	cmp	r6, r3
1000f5be:	d90d      	bls.n	1000f5dc <_Z12FindSysClockmPmS_PtPhS1_+0x1c4>
						*outkhz = khz;
1000f5c0:	464a      	mov	r2, r9
1000f5c2:	6010      	str	r0, [r2, #0]
						*outvco = vco;
1000f5c4:	4652      	mov	r2, sl
						*outfbdiv = fbdiv;
1000f5c6:	9903      	ldr	r1, [sp, #12]
						*outvco = vco;
1000f5c8:	6014      	str	r4, [r2, #0]
						*outfbdiv = fbdiv;
1000f5ca:	9a04      	ldr	r2, [sp, #16]
						*outpd2 = pd2;
1000f5cc:	001e      	movs	r6, r3
						*outfbdiv = fbdiv;
1000f5ce:	8011      	strh	r1, [r2, #0]
						*outpd1 = pd1;
1000f5d0:	9a10      	ldr	r2, [sp, #64]	; 0x40
1000f5d2:	9901      	ldr	r1, [sp, #4]
1000f5d4:	7011      	strb	r1, [r2, #0]
						*outpd2 = pd2;
1000f5d6:	2101      	movs	r1, #1
1000f5d8:	9a11      	ldr	r2, [sp, #68]	; 0x44
1000f5da:	7011      	strb	r1, [r2, #0]
			for (pd1 = 7; pd1 >= 1; pd1--)
1000f5dc:	2301      	movs	r3, #1
1000f5de:	425b      	negs	r3, r3
1000f5e0:	469c      	mov	ip, r3
1000f5e2:	44e0      	add	r8, ip
				for (pd2 = pd1; pd2 >= 1; pd2--)
1000f5e4:	4643      	mov	r3, r8
1000f5e6:	b2df      	uxtb	r7, r3
1000f5e8:	1c7b      	adds	r3, r7, #1
1000f5ea:	b2da      	uxtb	r2, r3
1000f5ec:	4643      	mov	r3, r8
1000f5ee:	1c5d      	adds	r5, r3, #1
					khz = vco / (pd1 * pd2);
1000f5f0:	0029      	movs	r1, r5
1000f5f2:	0020      	movs	r0, r4
1000f5f4:	4369      	muls	r1, r5
1000f5f6:	9201      	str	r2, [sp, #4]
1000f5f8:	f7f0 febc 	bl	10000374 <__wrap___aeabi_uidiv>
					margin = abs((int)(khz - reqkhz));
1000f5fc:	9b00      	ldr	r3, [sp, #0]
1000f5fe:	1ac3      	subs	r3, r0, r3
1000f600:	17d9      	asrs	r1, r3, #31
1000f602:	185b      	adds	r3, r3, r1
1000f604:	404b      	eors	r3, r1
					if (margin < margin_best)
1000f606:	429e      	cmp	r6, r3
1000f608:	d90c      	bls.n	1000f624 <_Z12FindSysClockmPmS_PtPhS1_+0x20c>
						*outkhz = khz;
1000f60a:	4649      	mov	r1, r9
1000f60c:	6008      	str	r0, [r1, #0]
						*outvco = vco;
1000f60e:	4651      	mov	r1, sl
						*outpd2 = pd2;
1000f610:	001e      	movs	r6, r3
						*outvco = vco;
1000f612:	600c      	str	r4, [r1, #0]
						*outfbdiv = fbdiv;
1000f614:	9803      	ldr	r0, [sp, #12]
1000f616:	9904      	ldr	r1, [sp, #16]
						*outpd1 = pd1;
1000f618:	9a01      	ldr	r2, [sp, #4]
						*outfbdiv = fbdiv;
1000f61a:	8008      	strh	r0, [r1, #0]
						*outpd1 = pd1;
1000f61c:	9910      	ldr	r1, [sp, #64]	; 0x40
1000f61e:	700a      	strb	r2, [r1, #0]
						*outpd2 = pd2;
1000f620:	9911      	ldr	r1, [sp, #68]	; 0x44
1000f622:	700a      	strb	r2, [r1, #0]
				for (pd2 = pd1; pd2 >= 1; pd2--)
1000f624:	4643      	mov	r3, r8
1000f626:	2b00      	cmp	r3, #0
1000f628:	d000      	beq.n	1000f62c <_Z12FindSysClockmPmS_PtPhS1_+0x214>
1000f62a:	e726      	b.n	1000f47a <_Z12FindSysClockmPmS_PtPhS1_+0x62>
1000f62c:	9d03      	ldr	r5, [sp, #12]
			if (fbdiv < 16) break;
1000f62e:	9b02      	ldr	r3, [sp, #8]
1000f630:	9a05      	ldr	r2, [sp, #20]
			fbdiv--;
1000f632:	3d01      	subs	r5, #1
			if (fbdiv < 16) break;
1000f634:	1a9b      	subs	r3, r3, r2
			fbdiv--;
1000f636:	b2ad      	uxth	r5, r5
			if (fbdiv < 16) break;
1000f638:	9302      	str	r3, [sp, #8]
1000f63a:	2d0f      	cmp	r5, #15
1000f63c:	d000      	beq.n	1000f640 <_Z12FindSysClockmPmS_PtPhS1_+0x228>
1000f63e:	e70f      	b.n	1000f460 <_Z12FindSysClockmPmS_PtPhS1_+0x48>
	return (*outkhz == reqkhz) && (*outvco == *outkhz * *outpd1 * *outpd2);
1000f640:	4653      	mov	r3, sl
1000f642:	46ca      	mov	sl, r9
1000f644:	4699      	mov	r9, r3
1000f646:	4653      	mov	r3, sl
1000f648:	9a00      	ldr	r2, [sp, #0]
1000f64a:	681b      	ldr	r3, [r3, #0]
1000f64c:	2000      	movs	r0, #0
1000f64e:	429a      	cmp	r2, r3
1000f650:	d10d      	bne.n	1000f66e <_Z12FindSysClockmPmS_PtPhS1_+0x256>
1000f652:	9b10      	ldr	r3, [sp, #64]	; 0x40
1000f654:	9a11      	ldr	r2, [sp, #68]	; 0x44
1000f656:	781b      	ldrb	r3, [r3, #0]
1000f658:	7810      	ldrb	r0, [r2, #0]
1000f65a:	4358      	muls	r0, r3
1000f65c:	9b00      	ldr	r3, [sp, #0]
1000f65e:	4343      	muls	r3, r0
1000f660:	0018      	movs	r0, r3
1000f662:	464b      	mov	r3, r9
1000f664:	681b      	ldr	r3, [r3, #0]
1000f666:	1ac0      	subs	r0, r0, r3
1000f668:	4243      	negs	r3, r0
1000f66a:	4158      	adcs	r0, r3
1000f66c:	b2c0      	uxtb	r0, r0

	// find PLL setup
	return vcocalc(reqkhz, input, 400000, 1600000, false,  outkhz, outvco, outfbdiv, outpd1, outpd2);
}
1000f66e:	b007      	add	sp, #28
1000f670:	bcf0      	pop	{r4, r5, r6, r7}
1000f672:	46bb      	mov	fp, r7
1000f674:	46b2      	mov	sl, r6
1000f676:	46a9      	mov	r9, r5
1000f678:	46a0      	mov	r8, r4
1000f67a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f67c:	fff9e580 	.word	0xfff9e580
1000f680:	000186a0 	.word	0x000186a0
1000f684:	00061a80 	.word	0x00061a80
1000f688:	00124f80 	.word	0x00124f80

1000f68c <_Z10PrintSetupPhiii>:
// use mono mode
Bool PrintMonoMode;

// setup print service (if bufwb < 2*bufw, use mono text)
void PrintSetup(u8* buf, int bufw, int bufh, int bufwb)
{
1000f68c:	b510      	push	{r4, lr}
	PrintBuf = buf;
1000f68e:	4c0c      	ldr	r4, [pc, #48]	; (1000f6c0 <_Z10PrintSetupPhiii+0x34>)
1000f690:	6020      	str	r0, [r4, #0]
	PrintBufW = bufw;
1000f692:	480c      	ldr	r0, [pc, #48]	; (1000f6c4 <_Z10PrintSetupPhiii+0x38>)
1000f694:	6001      	str	r1, [r0, #0]
	PrintBufH = bufh;
1000f696:	480c      	ldr	r0, [pc, #48]	; (1000f6c8 <_Z10PrintSetupPhiii+0x3c>)
	PrintBufWB = bufwb;
	PrintX = 0;
	PrintY = 0;
	PrintMonoMode = (bufwb < 2*bufw);
1000f698:	0049      	lsls	r1, r1, #1
	PrintBufH = bufh;
1000f69a:	6002      	str	r2, [r0, #0]
	PrintBufWB = bufwb;
1000f69c:	4a0b      	ldr	r2, [pc, #44]	; (1000f6cc <_Z10PrintSetupPhiii+0x40>)
	PrintX = 0;
1000f69e:	480c      	ldr	r0, [pc, #48]	; (1000f6d0 <_Z10PrintSetupPhiii+0x44>)
	PrintBufWB = bufwb;
1000f6a0:	6013      	str	r3, [r2, #0]
	PrintX = 0;
1000f6a2:	2200      	movs	r2, #0
1000f6a4:	6002      	str	r2, [r0, #0]
	PrintY = 0;
1000f6a6:	480b      	ldr	r0, [pc, #44]	; (1000f6d4 <_Z10PrintSetupPhiii+0x48>)
1000f6a8:	6002      	str	r2, [r0, #0]
	PrintMonoMode = (bufwb < 2*bufw);
1000f6aa:	2201      	movs	r2, #1
1000f6ac:	4299      	cmp	r1, r3
1000f6ae:	dc00      	bgt.n	1000f6b2 <_Z10PrintSetupPhiii+0x26>
1000f6b0:	2200      	movs	r2, #0
1000f6b2:	4b09      	ldr	r3, [pc, #36]	; (1000f6d8 <_Z10PrintSetupPhiii+0x4c>)
1000f6b4:	701a      	strb	r2, [r3, #0]
	PrintCol = PC_COLOR(PC_BLACK, PC_WHITE);
1000f6b6:	220f      	movs	r2, #15
1000f6b8:	4b08      	ldr	r3, [pc, #32]	; (1000f6dc <_Z10PrintSetupPhiii+0x50>)
1000f6ba:	701a      	strb	r2, [r3, #0]
}
1000f6bc:	bd10      	pop	{r4, pc}
1000f6be:	46c0      	nop			; (mov r8, r8)
1000f6c0:	20006414 	.word	0x20006414
1000f6c4:	2000641c 	.word	0x2000641c
1000f6c8:	20006418 	.word	0x20006418
1000f6cc:	20006420 	.word	0x20006420
1000f6d0:	20006424 	.word	0x20006424
1000f6d4:	20006428 	.word	0x20006428
1000f6d8:	2001276f 	.word	0x2001276f
1000f6dc:	2001276e 	.word	0x2001276e

1000f6e0 <_Z10PrintClearv>:

// clear text screen, using current color
void PrintClear()
{
1000f6e0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f6e2:	464f      	mov	r7, r9
1000f6e4:	46d6      	mov	lr, sl
1000f6e6:	4646      	mov	r6, r8
1000f6e8:	b5c0      	push	{r6, r7, lr}
	int i, y;
	u8* d;
	u8 col = PrintCol;
1000f6ea:	4b1b      	ldr	r3, [pc, #108]	; (1000f758 <_Z10PrintClearv+0x78>)
	for (y = 0; y < PrintBufH; y++)
1000f6ec:	4f1b      	ldr	r7, [pc, #108]	; (1000f75c <_Z10PrintClearv+0x7c>)
	u8 col = PrintCol;
1000f6ee:	781d      	ldrb	r5, [r3, #0]
	for (y = 0; y < PrintBufH; y++)
1000f6f0:	683b      	ldr	r3, [r7, #0]
1000f6f2:	2b00      	cmp	r3, #0
1000f6f4:	dd25      	ble.n	1000f742 <_Z10PrintClearv+0x62>
1000f6f6:	4b1a      	ldr	r3, [pc, #104]	; (1000f760 <_Z10PrintClearv+0x80>)
1000f6f8:	2600      	movs	r6, #0
1000f6fa:	4699      	mov	r9, r3
1000f6fc:	4b19      	ldr	r3, [pc, #100]	; (1000f764 <_Z10PrintClearv+0x84>)
	{
		d = &PrintBuf[y*PrintBufWB];
		for (i = PrintBufW; i > 0; i--)
		{
			*d++ = ' ';
1000f6fe:	2020      	movs	r0, #32
1000f700:	4698      	mov	r8, r3
1000f702:	4b19      	ldr	r3, [pc, #100]	; (1000f768 <_Z10PrintClearv+0x88>)
1000f704:	4c19      	ldr	r4, [pc, #100]	; (1000f76c <_Z10PrintClearv+0x8c>)
1000f706:	469c      	mov	ip, r3
		d = &PrintBuf[y*PrintBufWB];
1000f708:	464a      	mov	r2, r9
1000f70a:	4643      	mov	r3, r8
1000f70c:	6812      	ldr	r2, [r2, #0]
1000f70e:	681b      	ldr	r3, [r3, #0]
1000f710:	4692      	mov	sl, r2
		for (i = PrintBufW; i > 0; i--)
1000f712:	4662      	mov	r2, ip
		d = &PrintBuf[y*PrintBufWB];
1000f714:	4373      	muls	r3, r6
		for (i = PrintBufW; i > 0; i--)
1000f716:	6812      	ldr	r2, [r2, #0]
		d = &PrintBuf[y*PrintBufWB];
1000f718:	4453      	add	r3, sl
		for (i = PrintBufW; i > 0; i--)
1000f71a:	2a00      	cmp	r2, #0
1000f71c:	dc04      	bgt.n	1000f728 <_Z10PrintClearv+0x48>
1000f71e:	e010      	b.n	1000f742 <_Z10PrintClearv+0x62>
1000f720:	3a01      	subs	r2, #1
			*d++ = ' ';
1000f722:	3301      	adds	r3, #1
		for (i = PrintBufW; i > 0; i--)
1000f724:	2a00      	cmp	r2, #0
1000f726:	d008      	beq.n	1000f73a <_Z10PrintClearv+0x5a>
			*d++ = ' ';
1000f728:	7018      	strb	r0, [r3, #0]
			if (!PrintMonoMode) *d++ = col;
1000f72a:	7821      	ldrb	r1, [r4, #0]
1000f72c:	2900      	cmp	r1, #0
1000f72e:	d1f7      	bne.n	1000f720 <_Z10PrintClearv+0x40>
		for (i = PrintBufW; i > 0; i--)
1000f730:	3a01      	subs	r2, #1
			if (!PrintMonoMode) *d++ = col;
1000f732:	705d      	strb	r5, [r3, #1]
1000f734:	3302      	adds	r3, #2
		for (i = PrintBufW; i > 0; i--)
1000f736:	2a00      	cmp	r2, #0
1000f738:	d1f6      	bne.n	1000f728 <_Z10PrintClearv+0x48>
	for (y = 0; y < PrintBufH; y++)
1000f73a:	683b      	ldr	r3, [r7, #0]
1000f73c:	3601      	adds	r6, #1
1000f73e:	42b3      	cmp	r3, r6
1000f740:	dce2      	bgt.n	1000f708 <_Z10PrintClearv+0x28>
		}
	}
	PrintX = 0;
1000f742:	2300      	movs	r3, #0
1000f744:	4a0a      	ldr	r2, [pc, #40]	; (1000f770 <_Z10PrintClearv+0x90>)
1000f746:	6013      	str	r3, [r2, #0]
	PrintY = 0;
1000f748:	4a0a      	ldr	r2, [pc, #40]	; (1000f774 <_Z10PrintClearv+0x94>)
1000f74a:	6013      	str	r3, [r2, #0]
}
1000f74c:	bce0      	pop	{r5, r6, r7}
1000f74e:	46ba      	mov	sl, r7
1000f750:	46b1      	mov	r9, r6
1000f752:	46a8      	mov	r8, r5
1000f754:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f756:	46c0      	nop			; (mov r8, r8)
1000f758:	2001276e 	.word	0x2001276e
1000f75c:	20006418 	.word	0x20006418
1000f760:	20006414 	.word	0x20006414
1000f764:	20006420 	.word	0x20006420
1000f768:	2000641c 	.word	0x2000641c
1000f76c:	2001276f 	.word	0x2001276f
1000f770:	20006424 	.word	0x20006424
1000f774:	20006428 	.word	0x20006428

1000f778 <_ZN7cRandom8InitSeedEv>:
// ============================================================================
//                   Set random seed from ROSC counter
// ============================================================================

void cRandom::InitSeed()
{
1000f778:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f77a:	46c6      	mov	lr, r8
1000f77c:	2240      	movs	r2, #64	; 0x40
	int i;
	for (i = 64; i > 0; i--) m_Seed = (m_Seed << 1) | (rosc_hw->randombit & 1);
1000f77e:	2701      	movs	r7, #1
{
1000f780:	b500      	push	{lr}
	for (i = 64; i > 0; i--) m_Seed = (m_Seed << 1) | (rosc_hw->randombit & 1);
1000f782:	4e15      	ldr	r6, [pc, #84]	; (1000f7d8 <_ZN7cRandom8InitSeedEv+0x60>)
{
1000f784:	4680      	mov	r8, r0
1000f786:	6841      	ldr	r1, [r0, #4]
1000f788:	6800      	ldr	r0, [r0, #0]
	for (i = 64; i > 0; i--) m_Seed = (m_Seed << 1) | (rosc_hw->randombit & 1);
1000f78a:	0004      	movs	r4, r0
1000f78c:	000d      	movs	r5, r1
1000f78e:	1824      	adds	r4, r4, r0
1000f790:	414d      	adcs	r5, r1
1000f792:	69f3      	ldr	r3, [r6, #28]
1000f794:	3a01      	subs	r2, #1
1000f796:	403b      	ands	r3, r7
1000f798:	4323      	orrs	r3, r4
1000f79a:	0018      	movs	r0, r3
1000f79c:	0029      	movs	r1, r5
1000f79e:	2a00      	cmp	r2, #0
1000f7a0:	d1f3      	bne.n	1000f78a <_ZN7cRandom8InitSeedEv+0x12>
public:

	// shift random generator seed
	inline void Shift()
	{
		m_Seed = m_Seed*214013 + 2531011;
1000f7a2:	2300      	movs	r3, #0
1000f7a4:	4a0d      	ldr	r2, [pc, #52]	; (1000f7dc <_ZN7cRandom8InitSeedEv+0x64>)
1000f7a6:	f7f1 fca9 	bl	100010fc <__wrap___aeabi_lmul>
1000f7aa:	2500      	movs	r5, #0
1000f7ac:	4c0c      	ldr	r4, [pc, #48]	; (1000f7e0 <_ZN7cRandom8InitSeedEv+0x68>)
1000f7ae:	1900      	adds	r0, r0, r4
1000f7b0:	4169      	adcs	r1, r5
	i = (this->U8() & 0x1f) + 5;
1000f7b2:	00cf      	lsls	r7, r1, #3
1000f7b4:	0eff      	lsrs	r7, r7, #27
1000f7b6:	3705      	adds	r7, #5
1000f7b8:	2300      	movs	r3, #0
1000f7ba:	4a08      	ldr	r2, [pc, #32]	; (1000f7dc <_ZN7cRandom8InitSeedEv+0x64>)
1000f7bc:	f7f1 fc9e 	bl	100010fc <__wrap___aeabi_lmul>
	for (; i > 0; i--) this->Shift();
1000f7c0:	3f01      	subs	r7, #1
1000f7c2:	1900      	adds	r0, r0, r4
1000f7c4:	4169      	adcs	r1, r5
1000f7c6:	2f00      	cmp	r7, #0
1000f7c8:	d1f6      	bne.n	1000f7b8 <_ZN7cRandom8InitSeedEv+0x40>
}
1000f7ca:	4643      	mov	r3, r8
1000f7cc:	6018      	str	r0, [r3, #0]
1000f7ce:	6059      	str	r1, [r3, #4]
1000f7d0:	bc80      	pop	{r7}
1000f7d2:	46b8      	mov	r8, r7
1000f7d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f7d6:	46c0      	nop			; (mov r8, r8)
1000f7d8:	40060000 	.word	0x40060000
1000f7dc:	000343fd 	.word	0x000343fd
1000f7e0:	00269ec3 	.word	0x00269ec3

1000f7e4 <_ZN7cRandom2U8Ev>:
// ============================================================================
//            generate random number in full range of BYTE
// ============================================================================

u8 cRandom::U8()
{
1000f7e4:	b510      	push	{r4, lr}
1000f7e6:	2300      	movs	r3, #0
1000f7e8:	0004      	movs	r4, r0
1000f7ea:	6841      	ldr	r1, [r0, #4]
1000f7ec:	6800      	ldr	r0, [r0, #0]
1000f7ee:	4a05      	ldr	r2, [pc, #20]	; (1000f804 <_ZN7cRandom2U8Ev+0x20>)
1000f7f0:	f7f1 fc84 	bl	100010fc <__wrap___aeabi_lmul>
1000f7f4:	2300      	movs	r3, #0
1000f7f6:	4a04      	ldr	r2, [pc, #16]	; (1000f808 <_ZN7cRandom2U8Ev+0x24>)
1000f7f8:	1812      	adds	r2, r2, r0
1000f7fa:	414b      	adcs	r3, r1
	this->Shift();
	return (u8)(m_Seed >> (64-8));
1000f7fc:	0e18      	lsrs	r0, r3, #24
1000f7fe:	6022      	str	r2, [r4, #0]
1000f800:	6063      	str	r3, [r4, #4]
}
1000f802:	bd10      	pop	{r4, pc}
1000f804:	000343fd 	.word	0x000343fd
1000f808:	00269ec3 	.word	0x00269ec3

1000f80c <_ZN7cRandom5U8MaxEh>:
// ============================================================================
//         generate BYTE random number in range 0 to MAX (including)
// ============================================================================

u8 cRandom::U8Max(u8 max)
{
1000f80c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f80e:	46c6      	mov	lr, r8
1000f810:	000f      	movs	r7, r1
1000f812:	4680      	mov	r8, r0
1000f814:	b500      	push	{lr}
	u8 res;
	u8 mask;

	// zero maximal value
	if (max == 0) return 0;
1000f816:	2900      	cmp	r1, #0
1000f818:	d01a      	beq.n	1000f850 <_ZN7cRandom5U8MaxEh+0x44>

	// prepare mask
	res = 0xff;
1000f81a:	23ff      	movs	r3, #255	; 0xff
	do {
		mask = res;
		res >>= 1;
1000f81c:	001e      	movs	r6, r3
1000f81e:	085b      	lsrs	r3, r3, #1
	} while (res >= max);
1000f820:	429f      	cmp	r7, r3
1000f822:	d9fb      	bls.n	1000f81c <_ZN7cRandom5U8MaxEh+0x10>
1000f824:	4643      	mov	r3, r8
1000f826:	2500      	movs	r5, #0
1000f828:	6818      	ldr	r0, [r3, #0]
1000f82a:	6859      	ldr	r1, [r3, #4]
1000f82c:	4c09      	ldr	r4, [pc, #36]	; (1000f854 <_ZN7cRandom5U8MaxEh+0x48>)
1000f82e:	2300      	movs	r3, #0
1000f830:	4a09      	ldr	r2, [pc, #36]	; (1000f858 <_ZN7cRandom5U8MaxEh+0x4c>)
1000f832:	f7f1 fc63 	bl	100010fc <__wrap___aeabi_lmul>
1000f836:	1900      	adds	r0, r0, r4
1000f838:	4169      	adcs	r1, r5
	return (u8)(m_Seed >> (64-8));
1000f83a:	0e0b      	lsrs	r3, r1, #24

	// generate random number
	do {
		res = this->U8() & mask;
1000f83c:	4033      	ands	r3, r6
	} while (res > max);
1000f83e:	429f      	cmp	r7, r3
1000f840:	d3f5      	bcc.n	1000f82e <_ZN7cRandom5U8MaxEh+0x22>
1000f842:	4642      	mov	r2, r8
1000f844:	6010      	str	r0, [r2, #0]
1000f846:	6051      	str	r1, [r2, #4]

	return res;
}
1000f848:	0018      	movs	r0, r3
1000f84a:	bc80      	pop	{r7}
1000f84c:	46b8      	mov	r8, r7
1000f84e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (max == 0) return 0;
1000f850:	2300      	movs	r3, #0
1000f852:	e7f9      	b.n	1000f848 <_ZN7cRandom5U8MaxEh+0x3c>
1000f854:	00269ec3 	.word	0x00269ec3
1000f858:	000343fd 	.word	0x000343fd

1000f85c <_Z9PWMSndIrqv>:
 *  \ingroup hardware_pwm
 *
 * \param slice_num PWM slice number
 */
static inline void pwm_clear_irq(uint slice_num) {
    pwm_hw->intr = 1u << slice_num;
1000f85c:	2102      	movs	r1, #2
1000f85e:	23a4      	movs	r3, #164	; 0xa4
1000f860:	4a11      	ldr	r2, [pc, #68]	; (1000f8a8 <_Z9PWMSndIrqv+0x4c>)
const u8* NextSound = NULL; // next sound to play repeated sound
int NextSoundCnt = 0; // counter of next sound (0=no repeated sound)

// PWM sound interrupt service
void PWMSndIrq()
{
1000f862:	b5f0      	push	{r4, r5, r6, r7, lr}

	// default sample if no sound		
	u8 samp = 128;

	// check if sound is playing
	int cnt = SoundCnt;
1000f864:	4c11      	ldr	r4, [pc, #68]	; (1000f8ac <_Z9PWMSndIrqv+0x50>)
1000f866:	50d1      	str	r1, [r2, r3]
1000f868:	6822      	ldr	r2, [r4, #0]
	if (cnt > 0)
1000f86a:	317e      	adds	r1, #126	; 0x7e
1000f86c:	2a00      	cmp	r2, #0
1000f86e:	dd12      	ble.n	1000f896 <_Z9PWMSndIrqv+0x3a>
		// get next sample
		const u8* snd = CurSound;
		samp = *snd;

		// increment pointer accumulator
		int acc = SoundAcc + SoundInc;
1000f870:	4e0f      	ldr	r6, [pc, #60]	; (1000f8b0 <_Z9PWMSndIrqv+0x54>)
1000f872:	4f10      	ldr	r7, [pc, #64]	; (1000f8b4 <_Z9PWMSndIrqv+0x58>)
		const u8* snd = CurSound;
1000f874:	4d10      	ldr	r5, [pc, #64]	; (1000f8b8 <_Z9PWMSndIrqv+0x5c>)
		int acc = SoundAcc + SoundInc;
1000f876:	683f      	ldr	r7, [r7, #0]
1000f878:	6833      	ldr	r3, [r6, #0]
		const u8* snd = CurSound;
1000f87a:	6828      	ldr	r0, [r5, #0]
		int acc = SoundAcc + SoundInc;
1000f87c:	19db      	adds	r3, r3, r7
		int i = acc >> SNDFRAC; // whole increment
1000f87e:	129f      	asrs	r7, r3, #10
		snd += i;
		cnt -= i;
		acc &= (SNDINT-1);
1000f880:	059b      	lsls	r3, r3, #22
		samp = *snd;
1000f882:	7801      	ldrb	r1, [r0, #0]
		cnt -= i;
1000f884:	1bd2      	subs	r2, r2, r7
		acc &= (SNDINT-1);
1000f886:	0d9b      	lsrs	r3, r3, #22
		snd += i;
1000f888:	19c0      	adds	r0, r0, r7

		// repeated sample
		if (cnt <= 0)
1000f88a:	2a00      	cmp	r2, #0
1000f88c:	dd06      	ble.n	1000f89c <_Z9PWMSndIrqv+0x40>
			cnt = NextSoundCnt;
			snd = NextSound;
		}

		// save new pointer
		SoundCnt = cnt;
1000f88e:	6022      	str	r2, [r4, #0]
		SoundAcc = acc;
		CurSound = snd;
1000f890:	6028      	str	r0, [r5, #0]
		SoundAcc = acc;
1000f892:	6033      	str	r3, [r6, #0]
	}

	// write PWM sample
	((u16*)&pwm_hw->slice[PWMSND_SLICE].cc)[PWMSND_CHAN] = samp;
1000f894:	b289      	uxth	r1, r1
1000f896:	4a09      	ldr	r2, [pc, #36]	; (1000f8bc <_Z9PWMSndIrqv+0x60>)
1000f898:	8011      	strh	r1, [r2, #0]
}
1000f89a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			cnt = NextSoundCnt;
1000f89c:	4a08      	ldr	r2, [pc, #32]	; (1000f8c0 <_Z9PWMSndIrqv+0x64>)
			snd = NextSound;
1000f89e:	4809      	ldr	r0, [pc, #36]	; (1000f8c4 <_Z9PWMSndIrqv+0x68>)
			cnt = NextSoundCnt;
1000f8a0:	6812      	ldr	r2, [r2, #0]
			snd = NextSound;
1000f8a2:	6800      	ldr	r0, [r0, #0]
1000f8a4:	e7f3      	b.n	1000f88e <_Z9PWMSndIrqv+0x32>
1000f8a6:	46c0      	nop			; (mov r8, r8)
1000f8a8:	40050000 	.word	0x40050000
1000f8ac:	20007838 	.word	0x20007838
1000f8b0:	20007834 	.word	0x20007834
1000f8b4:	200027f0 	.word	0x200027f0
1000f8b8:	200049e4 	.word	0x200049e4
1000f8bc:	40050022 	.word	0x40050022
1000f8c0:	20006204 	.word	0x20006204
1000f8c4:	20006200 	.word	0x20006200

1000f8c8 <_Z10PWMSndInitv>:

// initialize PWM sound output
//  GP19 ... MOSI + sound output (PWM1 B)
void PWMSndInit()
{
1000f8c8:	b570      	push	{r4, r5, r6, lr}
	// set GPIO function to PWM
	gpio_set_function(PWMSND_GPIO, GPIO_FUNC_PWM);

	// set IRQ handler
	SoundCnt = 0;
1000f8ca:	2500      	movs	r5, #0
	gpio_set_function(PWMSND_GPIO, GPIO_FUNC_PWM);
1000f8cc:	2104      	movs	r1, #4
1000f8ce:	2013      	movs	r0, #19
1000f8d0:	f7f1 ff7c 	bl	100017cc <gpio_set_function>
	SoundCnt = 0;
1000f8d4:	4b14      	ldr	r3, [pc, #80]	; (1000f928 <_Z10PWMSndInitv+0x60>)
1000f8d6:	22a4      	movs	r2, #164	; 0xa4
1000f8d8:	601d      	str	r5, [r3, #0]
1000f8da:	2302      	movs	r3, #2
1000f8dc:	4c13      	ldr	r4, [pc, #76]	; (1000f92c <_Z10PWMSndInitv+0x64>)
	pwm_clear_irq(PWMSND_SLICE);
	pwm_set_irq_enabled(PWMSND_SLICE, true);
	irq_set_exclusive_handler(PWM_IRQ_WRAP, PWMSndIrq);
1000f8de:	2004      	movs	r0, #4
1000f8e0:	50a3      	str	r3, [r4, r2]
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
1000f8e2:	4a13      	ldr	r2, [pc, #76]	; (1000f930 <_Z10PWMSndInitv+0x68>)
1000f8e4:	4913      	ldr	r1, [pc, #76]	; (1000f934 <_Z10PWMSndInitv+0x6c>)
1000f8e6:	6013      	str	r3, [r2, #0]
1000f8e8:	f7f1 fff2 	bl	100018d0 <irq_set_exclusive_handler>
	irq_set_enabled(PWM_IRQ_WRAP, true);
1000f8ec:	2101      	movs	r1, #1
1000f8ee:	2004      	movs	r0, #4
1000f8f0:	f7f1 ffcc 	bl	1000188c <irq_set_enabled>
	pwm_config cfg = pwm_get_default_config();

	// set clock divider (INT = 0..255, FRAC = 1/16..15/16)
	//  125 MHz: 125000000/5644800 = 22.144, INT=22, FRAC=2,
	//     real sample rate = 125000000/(22+2/16)/256 = 22069Hz
	pwm_config_set_clkdiv(&cfg, (float)clock_get_hz(clk_sys)/PWMSND_CLOCK + 0.03f); // 0.03f = rounding 0.5/16
1000f8f4:	2005      	movs	r0, #5
1000f8f6:	f7f1 fec5 	bl	10001684 <clock_get_hz>
1000f8fa:	f7f1 fb69 	bl	10000fd0 <__wrap___aeabi_ui2f>
1000f8fe:	490e      	ldr	r1, [pc, #56]	; (1000f938 <_Z10PWMSndInitv+0x70>)
1000f900:	f7f1 fb5d 	bl	10000fbe <__wrap___aeabi_fdiv>
1000f904:	490d      	ldr	r1, [pc, #52]	; (1000f93c <_Z10PWMSndInitv+0x74>)
1000f906:	f7f1 fb57 	bl	10000fb8 <__wrap___aeabi_fadd>
    c->div = (uint32_t)(div * (float)(1u << PWM_CH1_DIV_INT_LSB));
1000f90a:	2183      	movs	r1, #131	; 0x83
1000f90c:	05c9      	lsls	r1, r1, #23
1000f90e:	f7f1 fb59 	bl	10000fc4 <__wrap___aeabi_fmul>
1000f912:	f7f1 fbb7 	bl	10001084 <__wrap___aeabi_f2uiz>
    pwm_hw->slice[slice_num].top = c->top;
1000f916:	23ff      	movs	r3, #255	; 0xff
    pwm_hw->slice[slice_num].csr = 0;
1000f918:	6165      	str	r5, [r4, #20]
    pwm_hw->slice[slice_num].ctr = PWM_CH0_CTR_RESET;
1000f91a:	61e5      	str	r5, [r4, #28]
    pwm_hw->slice[slice_num].cc = PWM_CH0_CC_RESET;
1000f91c:	6225      	str	r5, [r4, #32]
    pwm_hw->slice[slice_num].top = c->top;
1000f91e:	6263      	str	r3, [r4, #36]	; 0x24
    pwm_hw->slice[slice_num].csr = c->csr | (!!start << PWM_CH0_CSR_EN_LSB);
1000f920:	3bfe      	subs	r3, #254	; 0xfe
    pwm_hw->slice[slice_num].div = c->div;
1000f922:	61a0      	str	r0, [r4, #24]
    pwm_hw->slice[slice_num].csr = c->csr | (!!start << PWM_CH0_CSR_EN_LSB);
1000f924:	6163      	str	r3, [r4, #20]
	// set period to 256 cycles
	pwm_config_set_wrap(&cfg, PWMSND_TOP);

	// start PWM
	pwm_init(PWMSND_SLICE, &cfg, True);
}
1000f926:	bd70      	pop	{r4, r5, r6, pc}
1000f928:	20007838 	.word	0x20007838
1000f92c:	40050000 	.word	0x40050000
1000f930:	400520a8 	.word	0x400520a8
1000f934:	1000f85d 	.word	0x1000f85d
1000f938:	4aac4400 	.word	0x4aac4400
1000f93c:	3cf5c28f 	.word	0x3cf5c28f

1000f940 <_Z9PlaySoundPKhihf>:
//  snd = pointer to sound
//  len = length of sound in number of samples
//  speed = relative speed (1=normal)
//  rep = True to repeat sample
void PlaySound(const u8* snd, int len, Bool rep /* = False */, float speed /* = 1.0f */)
{
1000f940:	b570      	push	{r4, r5, r6, lr}
1000f942:	0005      	movs	r5, r0
1000f944:	000c      	movs	r4, r1
1000f946:	1c18      	adds	r0, r3, #0
1000f948:	f3bf 8f5f 	dmb	sy
	// stop current sound
	__dmb();
	SoundCnt = 0;
1000f94c:	2300      	movs	r3, #0
1000f94e:	4e11      	ldr	r6, [pc, #68]	; (1000f994 <_Z9PlaySoundPKhihf+0x54>)
1000f950:	6033      	str	r3, [r6, #0]
1000f952:	f3bf 8f5f 	dmb	sy
	__dmb();

	// repeated sound
	NextSoundCnt = 0;
1000f956:	4910      	ldr	r1, [pc, #64]	; (1000f998 <_Z9PlaySoundPKhihf+0x58>)
1000f958:	600b      	str	r3, [r1, #0]
	if (rep)
1000f95a:	2a00      	cmp	r2, #0
1000f95c:	d002      	beq.n	1000f964 <_Z9PlaySoundPKhihf+0x24>
	{
		NextSound = snd;
1000f95e:	4b0f      	ldr	r3, [pc, #60]	; (1000f99c <_Z9PlaySoundPKhihf+0x5c>)
		NextSoundCnt = len;
1000f960:	600c      	str	r4, [r1, #0]
		NextSound = snd;
1000f962:	601d      	str	r5, [r3, #0]
	}

	// sound speed
	SoundInc = (int)(SNDINT*speed + 0.5f);
1000f964:	2189      	movs	r1, #137	; 0x89
1000f966:	05c9      	lsls	r1, r1, #23
1000f968:	f7f1 fb2c 	bl	10000fc4 <__wrap___aeabi_fmul>
1000f96c:	21fc      	movs	r1, #252	; 0xfc
1000f96e:	0589      	lsls	r1, r1, #22
1000f970:	f7f1 fb22 	bl	10000fb8 <__wrap___aeabi_fadd>
1000f974:	f7f1 fb54 	bl	10001020 <__wrap___aeabi_f2iz>
	SoundAcc = 0;
1000f978:	2200      	movs	r2, #0
	SoundInc = (int)(SNDINT*speed + 0.5f);
1000f97a:	4b09      	ldr	r3, [pc, #36]	; (1000f9a0 <_Z9PlaySoundPKhihf+0x60>)
1000f97c:	6018      	str	r0, [r3, #0]
	SoundAcc = 0;
1000f97e:	4b09      	ldr	r3, [pc, #36]	; (1000f9a4 <_Z9PlaySoundPKhihf+0x64>)
1000f980:	601a      	str	r2, [r3, #0]

	// start current sound
	CurSound = snd;
1000f982:	4b09      	ldr	r3, [pc, #36]	; (1000f9a8 <_Z9PlaySoundPKhihf+0x68>)
1000f984:	601d      	str	r5, [r3, #0]
1000f986:	f3bf 8f5f 	dmb	sy
	__dmb();
	SoundCnt = len;
1000f98a:	6034      	str	r4, [r6, #0]
1000f98c:	f3bf 8f5f 	dmb	sy
	__dmb();
}
1000f990:	bd70      	pop	{r4, r5, r6, pc}
1000f992:	46c0      	nop			; (mov r8, r8)
1000f994:	20007838 	.word	0x20007838
1000f998:	20006204 	.word	0x20006204
1000f99c:	20006200 	.word	0x20006200
1000f9a0:	200027f0 	.word	0x200027f0
1000f9a4:	20007834 	.word	0x20007834
1000f9a8:	200049e4 	.word	0x200049e4

1000f9ac <calloc>:
1000f9ac:	0003      	movs	r3, r0
1000f9ae:	b510      	push	{r4, lr}
1000f9b0:	000a      	movs	r2, r1
1000f9b2:	4903      	ldr	r1, [pc, #12]	; (1000f9c0 <calloc+0x14>)
1000f9b4:	6808      	ldr	r0, [r1, #0]
1000f9b6:	0019      	movs	r1, r3
1000f9b8:	f000 f804 	bl	1000f9c4 <_calloc_r>
1000f9bc:	bd10      	pop	{r4, pc}
1000f9be:	46c0      	nop			; (mov r8, r8)
1000f9c0:	200027f4 	.word	0x200027f4

1000f9c4 <_calloc_r>:
1000f9c4:	b570      	push	{r4, r5, r6, lr}
1000f9c6:	0c0b      	lsrs	r3, r1, #16
1000f9c8:	2400      	movs	r4, #0
1000f9ca:	0c15      	lsrs	r5, r2, #16
1000f9cc:	2b00      	cmp	r3, #0
1000f9ce:	d128      	bne.n	1000fa22 <_calloc_r+0x5e>
1000f9d0:	2d00      	cmp	r5, #0
1000f9d2:	d137      	bne.n	1000fa44 <_calloc_r+0x80>
1000f9d4:	b28b      	uxth	r3, r1
1000f9d6:	b291      	uxth	r1, r2
1000f9d8:	4359      	muls	r1, r3
1000f9da:	f000 f851 	bl	1000fa80 <_malloc_r>
1000f9de:	1e05      	subs	r5, r0, #0
1000f9e0:	d019      	beq.n	1000fa16 <_calloc_r+0x52>
1000f9e2:	0003      	movs	r3, r0
1000f9e4:	3b08      	subs	r3, #8
1000f9e6:	685a      	ldr	r2, [r3, #4]
1000f9e8:	2303      	movs	r3, #3
1000f9ea:	439a      	bics	r2, r3
1000f9ec:	3a04      	subs	r2, #4
1000f9ee:	2a24      	cmp	r2, #36	; 0x24
1000f9f0:	d813      	bhi.n	1000fa1a <_calloc_r+0x56>
1000f9f2:	0003      	movs	r3, r0
1000f9f4:	2a13      	cmp	r2, #19
1000f9f6:	d90a      	bls.n	1000fa0e <_calloc_r+0x4a>
1000f9f8:	6004      	str	r4, [r0, #0]
1000f9fa:	6044      	str	r4, [r0, #4]
1000f9fc:	3308      	adds	r3, #8
1000f9fe:	2a1b      	cmp	r2, #27
1000fa00:	d905      	bls.n	1000fa0e <_calloc_r+0x4a>
1000fa02:	6084      	str	r4, [r0, #8]
1000fa04:	60c4      	str	r4, [r0, #12]
1000fa06:	2a24      	cmp	r2, #36	; 0x24
1000fa08:	d025      	beq.n	1000fa56 <_calloc_r+0x92>
1000fa0a:	0003      	movs	r3, r0
1000fa0c:	3310      	adds	r3, #16
1000fa0e:	2200      	movs	r2, #0
1000fa10:	601a      	str	r2, [r3, #0]
1000fa12:	605a      	str	r2, [r3, #4]
1000fa14:	609a      	str	r2, [r3, #8]
1000fa16:	0028      	movs	r0, r5
1000fa18:	bd70      	pop	{r4, r5, r6, pc}
1000fa1a:	2100      	movs	r1, #0
1000fa1c:	f7f1 fb62 	bl	100010e4 <__wrap_memset>
1000fa20:	e7f9      	b.n	1000fa16 <_calloc_r+0x52>
1000fa22:	2d00      	cmp	r5, #0
1000fa24:	d111      	bne.n	1000fa4a <_calloc_r+0x86>
1000fa26:	1c15      	adds	r5, r2, #0
1000fa28:	b289      	uxth	r1, r1
1000fa2a:	b292      	uxth	r2, r2
1000fa2c:	434a      	muls	r2, r1
1000fa2e:	b2ad      	uxth	r5, r5
1000fa30:	b29b      	uxth	r3, r3
1000fa32:	436b      	muls	r3, r5
1000fa34:	0c11      	lsrs	r1, r2, #16
1000fa36:	185b      	adds	r3, r3, r1
1000fa38:	0c19      	lsrs	r1, r3, #16
1000fa3a:	d106      	bne.n	1000fa4a <_calloc_r+0x86>
1000fa3c:	0419      	lsls	r1, r3, #16
1000fa3e:	b292      	uxth	r2, r2
1000fa40:	4311      	orrs	r1, r2
1000fa42:	e7ca      	b.n	1000f9da <_calloc_r+0x16>
1000fa44:	1c2b      	adds	r3, r5, #0
1000fa46:	1c0d      	adds	r5, r1, #0
1000fa48:	e7ee      	b.n	1000fa28 <_calloc_r+0x64>
1000fa4a:	f000 f809 	bl	1000fa60 <__errno>
1000fa4e:	230c      	movs	r3, #12
1000fa50:	2500      	movs	r5, #0
1000fa52:	6003      	str	r3, [r0, #0]
1000fa54:	e7df      	b.n	1000fa16 <_calloc_r+0x52>
1000fa56:	0003      	movs	r3, r0
1000fa58:	6104      	str	r4, [r0, #16]
1000fa5a:	3318      	adds	r3, #24
1000fa5c:	6144      	str	r4, [r0, #20]
1000fa5e:	e7d6      	b.n	1000fa0e <_calloc_r+0x4a>

1000fa60 <__errno>:
1000fa60:	4b01      	ldr	r3, [pc, #4]	; (1000fa68 <__errno+0x8>)
1000fa62:	6818      	ldr	r0, [r3, #0]
1000fa64:	4770      	bx	lr
1000fa66:	46c0      	nop			; (mov r8, r8)
1000fa68:	200027f4 	.word	0x200027f4

1000fa6c <malloc>:
1000fa6c:	b510      	push	{r4, lr}
1000fa6e:	4b03      	ldr	r3, [pc, #12]	; (1000fa7c <malloc+0x10>)
1000fa70:	0001      	movs	r1, r0
1000fa72:	6818      	ldr	r0, [r3, #0]
1000fa74:	f000 f804 	bl	1000fa80 <_malloc_r>
1000fa78:	bd10      	pop	{r4, pc}
1000fa7a:	46c0      	nop			; (mov r8, r8)
1000fa7c:	200027f4 	.word	0x200027f4

1000fa80 <_malloc_r>:
1000fa80:	b5f0      	push	{r4, r5, r6, r7, lr}
1000fa82:	464e      	mov	r6, r9
1000fa84:	4645      	mov	r5, r8
1000fa86:	46de      	mov	lr, fp
1000fa88:	4657      	mov	r7, sl
1000fa8a:	b5e0      	push	{r5, r6, r7, lr}
1000fa8c:	000d      	movs	r5, r1
1000fa8e:	350b      	adds	r5, #11
1000fa90:	0006      	movs	r6, r0
1000fa92:	b083      	sub	sp, #12
1000fa94:	2d16      	cmp	r5, #22
1000fa96:	d822      	bhi.n	1000fade <_malloc_r+0x5e>
1000fa98:	2910      	cmp	r1, #16
1000fa9a:	d900      	bls.n	1000fa9e <_malloc_r+0x1e>
1000fa9c:	e0b2      	b.n	1000fc04 <_malloc_r+0x184>
1000fa9e:	f000 fab1 	bl	10010004 <__malloc_lock>
1000faa2:	2510      	movs	r5, #16
1000faa4:	2318      	movs	r3, #24
1000faa6:	2002      	movs	r0, #2
1000faa8:	4fcc      	ldr	r7, [pc, #816]	; (1000fddc <_malloc_r+0x35c>)
1000faaa:	18fb      	adds	r3, r7, r3
1000faac:	001a      	movs	r2, r3
1000faae:	685c      	ldr	r4, [r3, #4]
1000fab0:	3a08      	subs	r2, #8
1000fab2:	4294      	cmp	r4, r2
1000fab4:	d100      	bne.n	1000fab8 <_malloc_r+0x38>
1000fab6:	e0b5      	b.n	1000fc24 <_malloc_r+0x1a4>
1000fab8:	2303      	movs	r3, #3
1000faba:	6862      	ldr	r2, [r4, #4]
1000fabc:	439a      	bics	r2, r3
1000fabe:	0013      	movs	r3, r2
1000fac0:	68e2      	ldr	r2, [r4, #12]
1000fac2:	68a1      	ldr	r1, [r4, #8]
1000fac4:	60ca      	str	r2, [r1, #12]
1000fac6:	6091      	str	r1, [r2, #8]
1000fac8:	2201      	movs	r2, #1
1000faca:	18e3      	adds	r3, r4, r3
1000facc:	6859      	ldr	r1, [r3, #4]
1000face:	0030      	movs	r0, r6
1000fad0:	430a      	orrs	r2, r1
1000fad2:	605a      	str	r2, [r3, #4]
1000fad4:	f000 fa9e 	bl	10010014 <__malloc_unlock>
1000fad8:	0020      	movs	r0, r4
1000fada:	3008      	adds	r0, #8
1000fadc:	e095      	b.n	1000fc0a <_malloc_r+0x18a>
1000fade:	2307      	movs	r3, #7
1000fae0:	439d      	bics	r5, r3
1000fae2:	d500      	bpl.n	1000fae6 <_malloc_r+0x66>
1000fae4:	e08e      	b.n	1000fc04 <_malloc_r+0x184>
1000fae6:	42a9      	cmp	r1, r5
1000fae8:	d900      	bls.n	1000faec <_malloc_r+0x6c>
1000faea:	e08b      	b.n	1000fc04 <_malloc_r+0x184>
1000faec:	f000 fa8a 	bl	10010004 <__malloc_lock>
1000faf0:	23fc      	movs	r3, #252	; 0xfc
1000faf2:	005b      	lsls	r3, r3, #1
1000faf4:	429d      	cmp	r5, r3
1000faf6:	d200      	bcs.n	1000fafa <_malloc_r+0x7a>
1000faf8:	e1a7      	b.n	1000fe4a <_malloc_r+0x3ca>
1000fafa:	0a68      	lsrs	r0, r5, #9
1000fafc:	d100      	bne.n	1000fb00 <_malloc_r+0x80>
1000fafe:	e08b      	b.n	1000fc18 <_malloc_r+0x198>
1000fb00:	2804      	cmp	r0, #4
1000fb02:	d900      	bls.n	1000fb06 <_malloc_r+0x86>
1000fb04:	e17a      	b.n	1000fdfc <_malloc_r+0x37c>
1000fb06:	2338      	movs	r3, #56	; 0x38
1000fb08:	4698      	mov	r8, r3
1000fb0a:	09a8      	lsrs	r0, r5, #6
1000fb0c:	4480      	add	r8, r0
1000fb0e:	3039      	adds	r0, #57	; 0x39
1000fb10:	00c1      	lsls	r1, r0, #3
1000fb12:	4fb2      	ldr	r7, [pc, #712]	; (1000fddc <_malloc_r+0x35c>)
1000fb14:	1879      	adds	r1, r7, r1
1000fb16:	684c      	ldr	r4, [r1, #4]
1000fb18:	3908      	subs	r1, #8
1000fb1a:	42a1      	cmp	r1, r4
1000fb1c:	d00e      	beq.n	1000fb3c <_malloc_r+0xbc>
1000fb1e:	2303      	movs	r3, #3
1000fb20:	469c      	mov	ip, r3
1000fb22:	e004      	b.n	1000fb2e <_malloc_r+0xae>
1000fb24:	2a00      	cmp	r2, #0
1000fb26:	dacb      	bge.n	1000fac0 <_malloc_r+0x40>
1000fb28:	68e4      	ldr	r4, [r4, #12]
1000fb2a:	42a1      	cmp	r1, r4
1000fb2c:	d006      	beq.n	1000fb3c <_malloc_r+0xbc>
1000fb2e:	4662      	mov	r2, ip
1000fb30:	6863      	ldr	r3, [r4, #4]
1000fb32:	4393      	bics	r3, r2
1000fb34:	1b5a      	subs	r2, r3, r5
1000fb36:	2a0f      	cmp	r2, #15
1000fb38:	ddf4      	ble.n	1000fb24 <_malloc_r+0xa4>
1000fb3a:	4640      	mov	r0, r8
1000fb3c:	003a      	movs	r2, r7
1000fb3e:	693c      	ldr	r4, [r7, #16]
1000fb40:	3208      	adds	r2, #8
1000fb42:	4294      	cmp	r4, r2
1000fb44:	d100      	bne.n	1000fb48 <_malloc_r+0xc8>
1000fb46:	e078      	b.n	1000fc3a <_malloc_r+0x1ba>
1000fb48:	2303      	movs	r3, #3
1000fb4a:	6861      	ldr	r1, [r4, #4]
1000fb4c:	4399      	bics	r1, r3
1000fb4e:	4689      	mov	r9, r1
1000fb50:	000b      	movs	r3, r1
1000fb52:	1b49      	subs	r1, r1, r5
1000fb54:	290f      	cmp	r1, #15
1000fb56:	dd00      	ble.n	1000fb5a <_malloc_r+0xda>
1000fb58:	e17b      	b.n	1000fe52 <_malloc_r+0x3d2>
1000fb5a:	617a      	str	r2, [r7, #20]
1000fb5c:	613a      	str	r2, [r7, #16]
1000fb5e:	2900      	cmp	r1, #0
1000fb60:	dab2      	bge.n	1000fac8 <_malloc_r+0x48>
1000fb62:	2280      	movs	r2, #128	; 0x80
1000fb64:	0092      	lsls	r2, r2, #2
1000fb66:	4591      	cmp	r9, r2
1000fb68:	d300      	bcc.n	1000fb6c <_malloc_r+0xec>
1000fb6a:	e10f      	b.n	1000fd8c <_malloc_r+0x30c>
1000fb6c:	0959      	lsrs	r1, r3, #5
1000fb6e:	08da      	lsrs	r2, r3, #3
1000fb70:	2301      	movs	r3, #1
1000fb72:	408b      	lsls	r3, r1
1000fb74:	00d2      	lsls	r2, r2, #3
1000fb76:	6879      	ldr	r1, [r7, #4]
1000fb78:	19d2      	adds	r2, r2, r7
1000fb7a:	430b      	orrs	r3, r1
1000fb7c:	6891      	ldr	r1, [r2, #8]
1000fb7e:	607b      	str	r3, [r7, #4]
1000fb80:	60e2      	str	r2, [r4, #12]
1000fb82:	60a1      	str	r1, [r4, #8]
1000fb84:	6094      	str	r4, [r2, #8]
1000fb86:	60cc      	str	r4, [r1, #12]
1000fb88:	2101      	movs	r1, #1
1000fb8a:	1082      	asrs	r2, r0, #2
1000fb8c:	4091      	lsls	r1, r2
1000fb8e:	4299      	cmp	r1, r3
1000fb90:	d859      	bhi.n	1000fc46 <_malloc_r+0x1c6>
1000fb92:	420b      	tst	r3, r1
1000fb94:	d105      	bne.n	1000fba2 <_malloc_r+0x122>
1000fb96:	2203      	movs	r2, #3
1000fb98:	4390      	bics	r0, r2
1000fb9a:	0049      	lsls	r1, r1, #1
1000fb9c:	3004      	adds	r0, #4
1000fb9e:	420b      	tst	r3, r1
1000fba0:	d0fb      	beq.n	1000fb9a <_malloc_r+0x11a>
1000fba2:	2303      	movs	r3, #3
1000fba4:	4698      	mov	r8, r3
1000fba6:	00c3      	lsls	r3, r0, #3
1000fba8:	4699      	mov	r9, r3
1000fbaa:	44b9      	add	r9, r7
1000fbac:	46cc      	mov	ip, r9
1000fbae:	4682      	mov	sl, r0
1000fbb0:	4663      	mov	r3, ip
1000fbb2:	68dc      	ldr	r4, [r3, #12]
1000fbb4:	45a4      	cmp	ip, r4
1000fbb6:	d107      	bne.n	1000fbc8 <_malloc_r+0x148>
1000fbb8:	e12c      	b.n	1000fe14 <_malloc_r+0x394>
1000fbba:	2a00      	cmp	r2, #0
1000fbbc:	db00      	blt.n	1000fbc0 <_malloc_r+0x140>
1000fbbe:	e135      	b.n	1000fe2c <_malloc_r+0x3ac>
1000fbc0:	68e4      	ldr	r4, [r4, #12]
1000fbc2:	45a4      	cmp	ip, r4
1000fbc4:	d100      	bne.n	1000fbc8 <_malloc_r+0x148>
1000fbc6:	e125      	b.n	1000fe14 <_malloc_r+0x394>
1000fbc8:	4642      	mov	r2, r8
1000fbca:	6863      	ldr	r3, [r4, #4]
1000fbcc:	4393      	bics	r3, r2
1000fbce:	1b5a      	subs	r2, r3, r5
1000fbd0:	2a0f      	cmp	r2, #15
1000fbd2:	ddf2      	ble.n	1000fbba <_malloc_r+0x13a>
1000fbd4:	2001      	movs	r0, #1
1000fbd6:	4680      	mov	r8, r0
1000fbd8:	1961      	adds	r1, r4, r5
1000fbda:	4305      	orrs	r5, r0
1000fbdc:	6065      	str	r5, [r4, #4]
1000fbde:	68a0      	ldr	r0, [r4, #8]
1000fbe0:	68e5      	ldr	r5, [r4, #12]
1000fbe2:	3708      	adds	r7, #8
1000fbe4:	60c5      	str	r5, [r0, #12]
1000fbe6:	60a8      	str	r0, [r5, #8]
1000fbe8:	4640      	mov	r0, r8
1000fbea:	4310      	orrs	r0, r2
1000fbec:	60f9      	str	r1, [r7, #12]
1000fbee:	60b9      	str	r1, [r7, #8]
1000fbf0:	6048      	str	r0, [r1, #4]
1000fbf2:	60cf      	str	r7, [r1, #12]
1000fbf4:	0030      	movs	r0, r6
1000fbf6:	608f      	str	r7, [r1, #8]
1000fbf8:	50e2      	str	r2, [r4, r3]
1000fbfa:	f000 fa0b 	bl	10010014 <__malloc_unlock>
1000fbfe:	0020      	movs	r0, r4
1000fc00:	3008      	adds	r0, #8
1000fc02:	e002      	b.n	1000fc0a <_malloc_r+0x18a>
1000fc04:	230c      	movs	r3, #12
1000fc06:	2000      	movs	r0, #0
1000fc08:	6033      	str	r3, [r6, #0]
1000fc0a:	b003      	add	sp, #12
1000fc0c:	bcf0      	pop	{r4, r5, r6, r7}
1000fc0e:	46bb      	mov	fp, r7
1000fc10:	46b2      	mov	sl, r6
1000fc12:	46a9      	mov	r9, r5
1000fc14:	46a0      	mov	r8, r4
1000fc16:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000fc18:	2180      	movs	r1, #128	; 0x80
1000fc1a:	233f      	movs	r3, #63	; 0x3f
1000fc1c:	2040      	movs	r0, #64	; 0x40
1000fc1e:	4698      	mov	r8, r3
1000fc20:	0089      	lsls	r1, r1, #2
1000fc22:	e776      	b.n	1000fb12 <_malloc_r+0x92>
1000fc24:	68dc      	ldr	r4, [r3, #12]
1000fc26:	3002      	adds	r0, #2
1000fc28:	42a3      	cmp	r3, r4
1000fc2a:	d000      	beq.n	1000fc2e <_malloc_r+0x1ae>
1000fc2c:	e744      	b.n	1000fab8 <_malloc_r+0x38>
1000fc2e:	003a      	movs	r2, r7
1000fc30:	693c      	ldr	r4, [r7, #16]
1000fc32:	3208      	adds	r2, #8
1000fc34:	4294      	cmp	r4, r2
1000fc36:	d000      	beq.n	1000fc3a <_malloc_r+0x1ba>
1000fc38:	e786      	b.n	1000fb48 <_malloc_r+0xc8>
1000fc3a:	2101      	movs	r1, #1
1000fc3c:	687b      	ldr	r3, [r7, #4]
1000fc3e:	1082      	asrs	r2, r0, #2
1000fc40:	4091      	lsls	r1, r2
1000fc42:	4299      	cmp	r1, r3
1000fc44:	d9a5      	bls.n	1000fb92 <_malloc_r+0x112>
1000fc46:	2303      	movs	r3, #3
1000fc48:	68bc      	ldr	r4, [r7, #8]
1000fc4a:	6862      	ldr	r2, [r4, #4]
1000fc4c:	439a      	bics	r2, r3
1000fc4e:	4691      	mov	r9, r2
1000fc50:	4295      	cmp	r5, r2
1000fc52:	d803      	bhi.n	1000fc5c <_malloc_r+0x1dc>
1000fc54:	1b53      	subs	r3, r2, r5
1000fc56:	2b0f      	cmp	r3, #15
1000fc58:	dd00      	ble.n	1000fc5c <_malloc_r+0x1dc>
1000fc5a:	e089      	b.n	1000fd70 <_malloc_r+0x2f0>
1000fc5c:	0023      	movs	r3, r4
1000fc5e:	444b      	add	r3, r9
1000fc60:	4a5f      	ldr	r2, [pc, #380]	; (1000fde0 <_malloc_r+0x360>)
1000fc62:	9301      	str	r3, [sp, #4]
1000fc64:	4b5f      	ldr	r3, [pc, #380]	; (1000fde4 <_malloc_r+0x364>)
1000fc66:	4693      	mov	fp, r2
1000fc68:	681b      	ldr	r3, [r3, #0]
1000fc6a:	6812      	ldr	r2, [r2, #0]
1000fc6c:	18eb      	adds	r3, r5, r3
1000fc6e:	3201      	adds	r2, #1
1000fc70:	d100      	bne.n	1000fc74 <_malloc_r+0x1f4>
1000fc72:	e13d      	b.n	1000fef0 <_malloc_r+0x470>
1000fc74:	4a5c      	ldr	r2, [pc, #368]	; (1000fde8 <_malloc_r+0x368>)
1000fc76:	4694      	mov	ip, r2
1000fc78:	4463      	add	r3, ip
1000fc7a:	0b1b      	lsrs	r3, r3, #12
1000fc7c:	031b      	lsls	r3, r3, #12
1000fc7e:	9300      	str	r3, [sp, #0]
1000fc80:	0030      	movs	r0, r6
1000fc82:	9900      	ldr	r1, [sp, #0]
1000fc84:	f000 f9ce 	bl	10010024 <_sbrk_r>
1000fc88:	0003      	movs	r3, r0
1000fc8a:	4680      	mov	r8, r0
1000fc8c:	3301      	adds	r3, #1
1000fc8e:	d100      	bne.n	1000fc92 <_malloc_r+0x212>
1000fc90:	e0fa      	b.n	1000fe88 <_malloc_r+0x408>
1000fc92:	9b01      	ldr	r3, [sp, #4]
1000fc94:	4283      	cmp	r3, r0
1000fc96:	d900      	bls.n	1000fc9a <_malloc_r+0x21a>
1000fc98:	e0f4      	b.n	1000fe84 <_malloc_r+0x404>
1000fc9a:	4b54      	ldr	r3, [pc, #336]	; (1000fdec <_malloc_r+0x36c>)
1000fc9c:	9800      	ldr	r0, [sp, #0]
1000fc9e:	001a      	movs	r2, r3
1000fca0:	469a      	mov	sl, r3
1000fca2:	6812      	ldr	r2, [r2, #0]
1000fca4:	0003      	movs	r3, r0
1000fca6:	4694      	mov	ip, r2
1000fca8:	4651      	mov	r1, sl
1000fcaa:	4463      	add	r3, ip
1000fcac:	600b      	str	r3, [r1, #0]
1000fcae:	9901      	ldr	r1, [sp, #4]
1000fcb0:	001a      	movs	r2, r3
1000fcb2:	4541      	cmp	r1, r8
1000fcb4:	d100      	bne.n	1000fcb8 <_malloc_r+0x238>
1000fcb6:	e151      	b.n	1000ff5c <_malloc_r+0x4dc>
1000fcb8:	465b      	mov	r3, fp
1000fcba:	681b      	ldr	r3, [r3, #0]
1000fcbc:	3301      	adds	r3, #1
1000fcbe:	d100      	bne.n	1000fcc2 <_malloc_r+0x242>
1000fcc0:	e156      	b.n	1000ff70 <_malloc_r+0x4f0>
1000fcc2:	4643      	mov	r3, r8
1000fcc4:	9901      	ldr	r1, [sp, #4]
1000fcc6:	1a5b      	subs	r3, r3, r1
1000fcc8:	189a      	adds	r2, r3, r2
1000fcca:	4653      	mov	r3, sl
1000fccc:	601a      	str	r2, [r3, #0]
1000fcce:	2307      	movs	r3, #7
1000fcd0:	4642      	mov	r2, r8
1000fcd2:	4641      	mov	r1, r8
1000fcd4:	401a      	ands	r2, r3
1000fcd6:	9201      	str	r2, [sp, #4]
1000fcd8:	4219      	tst	r1, r3
1000fcda:	d100      	bne.n	1000fcde <_malloc_r+0x25e>
1000fcdc:	e112      	b.n	1000ff04 <_malloc_r+0x484>
1000fcde:	2308      	movs	r3, #8
1000fce0:	4698      	mov	r8, r3
1000fce2:	1a88      	subs	r0, r1, r2
1000fce4:	4b42      	ldr	r3, [pc, #264]	; (1000fdf0 <_malloc_r+0x370>)
1000fce6:	9900      	ldr	r1, [sp, #0]
1000fce8:	4480      	add	r8, r0
1000fcea:	4441      	add	r1, r8
1000fcec:	1a9b      	subs	r3, r3, r2
1000fcee:	1a5b      	subs	r3, r3, r1
1000fcf0:	051b      	lsls	r3, r3, #20
1000fcf2:	0d1b      	lsrs	r3, r3, #20
1000fcf4:	9100      	str	r1, [sp, #0]
1000fcf6:	0030      	movs	r0, r6
1000fcf8:	0019      	movs	r1, r3
1000fcfa:	469b      	mov	fp, r3
1000fcfc:	f000 f992 	bl	10010024 <_sbrk_r>
1000fd00:	1c43      	adds	r3, r0, #1
1000fd02:	d100      	bne.n	1000fd06 <_malloc_r+0x286>
1000fd04:	e150      	b.n	1000ffa8 <_malloc_r+0x528>
1000fd06:	4643      	mov	r3, r8
1000fd08:	1ac0      	subs	r0, r0, r3
1000fd0a:	0003      	movs	r3, r0
1000fd0c:	445b      	add	r3, fp
1000fd0e:	9300      	str	r3, [sp, #0]
1000fd10:	4653      	mov	r3, sl
1000fd12:	4652      	mov	r2, sl
1000fd14:	681b      	ldr	r3, [r3, #0]
1000fd16:	2101      	movs	r1, #1
1000fd18:	445b      	add	r3, fp
1000fd1a:	6013      	str	r3, [r2, #0]
1000fd1c:	4642      	mov	r2, r8
1000fd1e:	4640      	mov	r0, r8
1000fd20:	60ba      	str	r2, [r7, #8]
1000fd22:	9a00      	ldr	r2, [sp, #0]
1000fd24:	430a      	orrs	r2, r1
1000fd26:	6042      	str	r2, [r0, #4]
1000fd28:	42bc      	cmp	r4, r7
1000fd2a:	d100      	bne.n	1000fd2e <_malloc_r+0x2ae>
1000fd2c:	e124      	b.n	1000ff78 <_malloc_r+0x4f8>
1000fd2e:	464a      	mov	r2, r9
1000fd30:	2a0f      	cmp	r2, #15
1000fd32:	d800      	bhi.n	1000fd36 <_malloc_r+0x2b6>
1000fd34:	e122      	b.n	1000ff7c <_malloc_r+0x4fc>
1000fd36:	2007      	movs	r0, #7
1000fd38:	3a0c      	subs	r2, #12
1000fd3a:	4382      	bics	r2, r0
1000fd3c:	6860      	ldr	r0, [r4, #4]
1000fd3e:	4001      	ands	r1, r0
1000fd40:	2005      	movs	r0, #5
1000fd42:	4311      	orrs	r1, r2
1000fd44:	6061      	str	r1, [r4, #4]
1000fd46:	18a1      	adds	r1, r4, r2
1000fd48:	6048      	str	r0, [r1, #4]
1000fd4a:	6088      	str	r0, [r1, #8]
1000fd4c:	2a0f      	cmp	r2, #15
1000fd4e:	d900      	bls.n	1000fd52 <_malloc_r+0x2d2>
1000fd50:	e135      	b.n	1000ffbe <_malloc_r+0x53e>
1000fd52:	4642      	mov	r2, r8
1000fd54:	4644      	mov	r4, r8
1000fd56:	6852      	ldr	r2, [r2, #4]
1000fd58:	4926      	ldr	r1, [pc, #152]	; (1000fdf4 <_malloc_r+0x374>)
1000fd5a:	6808      	ldr	r0, [r1, #0]
1000fd5c:	4298      	cmp	r0, r3
1000fd5e:	d200      	bcs.n	1000fd62 <_malloc_r+0x2e2>
1000fd60:	600b      	str	r3, [r1, #0]
1000fd62:	4925      	ldr	r1, [pc, #148]	; (1000fdf8 <_malloc_r+0x378>)
1000fd64:	6808      	ldr	r0, [r1, #0]
1000fd66:	4298      	cmp	r0, r3
1000fd68:	d300      	bcc.n	1000fd6c <_malloc_r+0x2ec>
1000fd6a:	e08f      	b.n	1000fe8c <_malloc_r+0x40c>
1000fd6c:	600b      	str	r3, [r1, #0]
1000fd6e:	e08d      	b.n	1000fe8c <_malloc_r+0x40c>
1000fd70:	2201      	movs	r2, #1
1000fd72:	0029      	movs	r1, r5
1000fd74:	4313      	orrs	r3, r2
1000fd76:	4311      	orrs	r1, r2
1000fd78:	1965      	adds	r5, r4, r5
1000fd7a:	6061      	str	r1, [r4, #4]
1000fd7c:	0030      	movs	r0, r6
1000fd7e:	60bd      	str	r5, [r7, #8]
1000fd80:	606b      	str	r3, [r5, #4]
1000fd82:	f000 f947 	bl	10010014 <__malloc_unlock>
1000fd86:	0020      	movs	r0, r4
1000fd88:	3008      	adds	r0, #8
1000fd8a:	e73e      	b.n	1000fc0a <_malloc_r+0x18a>
1000fd8c:	0a5a      	lsrs	r2, r3, #9
1000fd8e:	2a04      	cmp	r2, #4
1000fd90:	d972      	bls.n	1000fe78 <_malloc_r+0x3f8>
1000fd92:	2a14      	cmp	r2, #20
1000fd94:	d900      	bls.n	1000fd98 <_malloc_r+0x318>
1000fd96:	e0c5      	b.n	1000ff24 <_malloc_r+0x4a4>
1000fd98:	0011      	movs	r1, r2
1000fd9a:	325c      	adds	r2, #92	; 0x5c
1000fd9c:	315b      	adds	r1, #91	; 0x5b
1000fd9e:	00d2      	lsls	r2, r2, #3
1000fda0:	2308      	movs	r3, #8
1000fda2:	425b      	negs	r3, r3
1000fda4:	469c      	mov	ip, r3
1000fda6:	18ba      	adds	r2, r7, r2
1000fda8:	4494      	add	ip, r2
1000fdaa:	4663      	mov	r3, ip
1000fdac:	689a      	ldr	r2, [r3, #8]
1000fdae:	2303      	movs	r3, #3
1000fdb0:	4698      	mov	r8, r3
1000fdb2:	4594      	cmp	ip, r2
1000fdb4:	d100      	bne.n	1000fdb8 <_malloc_r+0x338>
1000fdb6:	e09e      	b.n	1000fef6 <_malloc_r+0x476>
1000fdb8:	4643      	mov	r3, r8
1000fdba:	6851      	ldr	r1, [r2, #4]
1000fdbc:	4399      	bics	r1, r3
1000fdbe:	4549      	cmp	r1, r9
1000fdc0:	d902      	bls.n	1000fdc8 <_malloc_r+0x348>
1000fdc2:	6892      	ldr	r2, [r2, #8]
1000fdc4:	4594      	cmp	ip, r2
1000fdc6:	d1f7      	bne.n	1000fdb8 <_malloc_r+0x338>
1000fdc8:	68d3      	ldr	r3, [r2, #12]
1000fdca:	469c      	mov	ip, r3
1000fdcc:	687b      	ldr	r3, [r7, #4]
1000fdce:	4661      	mov	r1, ip
1000fdd0:	60a2      	str	r2, [r4, #8]
1000fdd2:	60e1      	str	r1, [r4, #12]
1000fdd4:	608c      	str	r4, [r1, #8]
1000fdd6:	60d4      	str	r4, [r2, #12]
1000fdd8:	e6d6      	b.n	1000fb88 <_malloc_r+0x108>
1000fdda:	46c0      	nop			; (mov r8, r8)
1000fddc:	20002c20 	.word	0x20002c20
1000fde0:	20003028 	.word	0x20003028
1000fde4:	20011af4 	.word	0x20011af4
1000fde8:	0000100f 	.word	0x0000100f
1000fdec:	20011ac4 	.word	0x20011ac4
1000fdf0:	00001008 	.word	0x00001008
1000fdf4:	20011aec 	.word	0x20011aec
1000fdf8:	20011af0 	.word	0x20011af0
1000fdfc:	2814      	cmp	r0, #20
1000fdfe:	d952      	bls.n	1000fea6 <_malloc_r+0x426>
1000fe00:	2854      	cmp	r0, #84	; 0x54
1000fe02:	d900      	bls.n	1000fe06 <_malloc_r+0x386>
1000fe04:	e096      	b.n	1000ff34 <_malloc_r+0x4b4>
1000fe06:	236e      	movs	r3, #110	; 0x6e
1000fe08:	4698      	mov	r8, r3
1000fe0a:	0b28      	lsrs	r0, r5, #12
1000fe0c:	4480      	add	r8, r0
1000fe0e:	306f      	adds	r0, #111	; 0x6f
1000fe10:	00c1      	lsls	r1, r0, #3
1000fe12:	e67e      	b.n	1000fb12 <_malloc_r+0x92>
1000fe14:	2308      	movs	r3, #8
1000fe16:	469b      	mov	fp, r3
1000fe18:	3b07      	subs	r3, #7
1000fe1a:	44dc      	add	ip, fp
1000fe1c:	469b      	mov	fp, r3
1000fe1e:	44da      	add	sl, fp
1000fe20:	4643      	mov	r3, r8
1000fe22:	4652      	mov	r2, sl
1000fe24:	4213      	tst	r3, r2
1000fe26:	d000      	beq.n	1000fe2a <_malloc_r+0x3aa>
1000fe28:	e6c2      	b.n	1000fbb0 <_malloc_r+0x130>
1000fe2a:	e04c      	b.n	1000fec6 <_malloc_r+0x446>
1000fe2c:	2201      	movs	r2, #1
1000fe2e:	18e3      	adds	r3, r4, r3
1000fe30:	6859      	ldr	r1, [r3, #4]
1000fe32:	0030      	movs	r0, r6
1000fe34:	430a      	orrs	r2, r1
1000fe36:	605a      	str	r2, [r3, #4]
1000fe38:	68e3      	ldr	r3, [r4, #12]
1000fe3a:	68a2      	ldr	r2, [r4, #8]
1000fe3c:	60d3      	str	r3, [r2, #12]
1000fe3e:	609a      	str	r2, [r3, #8]
1000fe40:	f000 f8e8 	bl	10010014 <__malloc_unlock>
1000fe44:	0020      	movs	r0, r4
1000fe46:	3008      	adds	r0, #8
1000fe48:	e6df      	b.n	1000fc0a <_malloc_r+0x18a>
1000fe4a:	002b      	movs	r3, r5
1000fe4c:	08e8      	lsrs	r0, r5, #3
1000fe4e:	3308      	adds	r3, #8
1000fe50:	e62a      	b.n	1000faa8 <_malloc_r+0x28>
1000fe52:	2301      	movs	r3, #1
1000fe54:	1960      	adds	r0, r4, r5
1000fe56:	431d      	orrs	r5, r3
1000fe58:	6065      	str	r5, [r4, #4]
1000fe5a:	6178      	str	r0, [r7, #20]
1000fe5c:	6138      	str	r0, [r7, #16]
1000fe5e:	60c2      	str	r2, [r0, #12]
1000fe60:	6082      	str	r2, [r0, #8]
1000fe62:	001a      	movs	r2, r3
1000fe64:	464b      	mov	r3, r9
1000fe66:	430a      	orrs	r2, r1
1000fe68:	6042      	str	r2, [r0, #4]
1000fe6a:	0030      	movs	r0, r6
1000fe6c:	50e1      	str	r1, [r4, r3]
1000fe6e:	f000 f8d1 	bl	10010014 <__malloc_unlock>
1000fe72:	0020      	movs	r0, r4
1000fe74:	3008      	adds	r0, #8
1000fe76:	e6c8      	b.n	1000fc0a <_malloc_r+0x18a>
1000fe78:	099a      	lsrs	r2, r3, #6
1000fe7a:	0011      	movs	r1, r2
1000fe7c:	3239      	adds	r2, #57	; 0x39
1000fe7e:	3138      	adds	r1, #56	; 0x38
1000fe80:	00d2      	lsls	r2, r2, #3
1000fe82:	e78d      	b.n	1000fda0 <_malloc_r+0x320>
1000fe84:	42bc      	cmp	r4, r7
1000fe86:	d060      	beq.n	1000ff4a <_malloc_r+0x4ca>
1000fe88:	68bc      	ldr	r4, [r7, #8]
1000fe8a:	6862      	ldr	r2, [r4, #4]
1000fe8c:	2303      	movs	r3, #3
1000fe8e:	439a      	bics	r2, r3
1000fe90:	1b53      	subs	r3, r2, r5
1000fe92:	4295      	cmp	r5, r2
1000fe94:	d802      	bhi.n	1000fe9c <_malloc_r+0x41c>
1000fe96:	2b0f      	cmp	r3, #15
1000fe98:	dd00      	ble.n	1000fe9c <_malloc_r+0x41c>
1000fe9a:	e769      	b.n	1000fd70 <_malloc_r+0x2f0>
1000fe9c:	0030      	movs	r0, r6
1000fe9e:	f000 f8b9 	bl	10010014 <__malloc_unlock>
1000fea2:	2000      	movs	r0, #0
1000fea4:	e6b1      	b.n	1000fc0a <_malloc_r+0x18a>
1000fea6:	235b      	movs	r3, #91	; 0x5b
1000fea8:	4698      	mov	r8, r3
1000feaa:	4480      	add	r8, r0
1000feac:	305c      	adds	r0, #92	; 0x5c
1000feae:	00c1      	lsls	r1, r0, #3
1000feb0:	e62f      	b.n	1000fb12 <_malloc_r+0x92>
1000feb2:	2308      	movs	r3, #8
1000feb4:	425b      	negs	r3, r3
1000feb6:	469c      	mov	ip, r3
1000feb8:	44e1      	add	r9, ip
1000feba:	464b      	mov	r3, r9
1000febc:	689b      	ldr	r3, [r3, #8]
1000febe:	3801      	subs	r0, #1
1000fec0:	454b      	cmp	r3, r9
1000fec2:	d000      	beq.n	1000fec6 <_malloc_r+0x446>
1000fec4:	e098      	b.n	1000fff8 <_malloc_r+0x578>
1000fec6:	4643      	mov	r3, r8
1000fec8:	4203      	tst	r3, r0
1000feca:	d1f2      	bne.n	1000feb2 <_malloc_r+0x432>
1000fecc:	687b      	ldr	r3, [r7, #4]
1000fece:	438b      	bics	r3, r1
1000fed0:	607b      	str	r3, [r7, #4]
1000fed2:	0049      	lsls	r1, r1, #1
1000fed4:	4299      	cmp	r1, r3
1000fed6:	d900      	bls.n	1000feda <_malloc_r+0x45a>
1000fed8:	e6b5      	b.n	1000fc46 <_malloc_r+0x1c6>
1000feda:	2900      	cmp	r1, #0
1000fedc:	d104      	bne.n	1000fee8 <_malloc_r+0x468>
1000fede:	e6b2      	b.n	1000fc46 <_malloc_r+0x1c6>
1000fee0:	2204      	movs	r2, #4
1000fee2:	4694      	mov	ip, r2
1000fee4:	0049      	lsls	r1, r1, #1
1000fee6:	44e2      	add	sl, ip
1000fee8:	420b      	tst	r3, r1
1000feea:	d0f9      	beq.n	1000fee0 <_malloc_r+0x460>
1000feec:	4650      	mov	r0, sl
1000feee:	e65a      	b.n	1000fba6 <_malloc_r+0x126>
1000fef0:	3310      	adds	r3, #16
1000fef2:	9300      	str	r3, [sp, #0]
1000fef4:	e6c4      	b.n	1000fc80 <_malloc_r+0x200>
1000fef6:	1089      	asrs	r1, r1, #2
1000fef8:	3b02      	subs	r3, #2
1000fefa:	408b      	lsls	r3, r1
1000fefc:	6879      	ldr	r1, [r7, #4]
1000fefe:	430b      	orrs	r3, r1
1000ff00:	607b      	str	r3, [r7, #4]
1000ff02:	e764      	b.n	1000fdce <_malloc_r+0x34e>
1000ff04:	9b00      	ldr	r3, [sp, #0]
1000ff06:	0030      	movs	r0, r6
1000ff08:	4443      	add	r3, r8
1000ff0a:	425b      	negs	r3, r3
1000ff0c:	051b      	lsls	r3, r3, #20
1000ff0e:	0d1b      	lsrs	r3, r3, #20
1000ff10:	0019      	movs	r1, r3
1000ff12:	469b      	mov	fp, r3
1000ff14:	f000 f886 	bl	10010024 <_sbrk_r>
1000ff18:	1c43      	adds	r3, r0, #1
1000ff1a:	d000      	beq.n	1000ff1e <_malloc_r+0x49e>
1000ff1c:	e6f3      	b.n	1000fd06 <_malloc_r+0x286>
1000ff1e:	2300      	movs	r3, #0
1000ff20:	469b      	mov	fp, r3
1000ff22:	e6f5      	b.n	1000fd10 <_malloc_r+0x290>
1000ff24:	2a54      	cmp	r2, #84	; 0x54
1000ff26:	d82b      	bhi.n	1000ff80 <_malloc_r+0x500>
1000ff28:	0b1a      	lsrs	r2, r3, #12
1000ff2a:	0011      	movs	r1, r2
1000ff2c:	326f      	adds	r2, #111	; 0x6f
1000ff2e:	316e      	adds	r1, #110	; 0x6e
1000ff30:	00d2      	lsls	r2, r2, #3
1000ff32:	e735      	b.n	1000fda0 <_malloc_r+0x320>
1000ff34:	23aa      	movs	r3, #170	; 0xaa
1000ff36:	005b      	lsls	r3, r3, #1
1000ff38:	4298      	cmp	r0, r3
1000ff3a:	d82b      	bhi.n	1000ff94 <_malloc_r+0x514>
1000ff3c:	3bdd      	subs	r3, #221	; 0xdd
1000ff3e:	4698      	mov	r8, r3
1000ff40:	0be8      	lsrs	r0, r5, #15
1000ff42:	4480      	add	r8, r0
1000ff44:	3078      	adds	r0, #120	; 0x78
1000ff46:	00c1      	lsls	r1, r0, #3
1000ff48:	e5e3      	b.n	1000fb12 <_malloc_r+0x92>
1000ff4a:	4b2c      	ldr	r3, [pc, #176]	; (1000fffc <_malloc_r+0x57c>)
1000ff4c:	9a00      	ldr	r2, [sp, #0]
1000ff4e:	469a      	mov	sl, r3
1000ff50:	681b      	ldr	r3, [r3, #0]
1000ff52:	469c      	mov	ip, r3
1000ff54:	4653      	mov	r3, sl
1000ff56:	4462      	add	r2, ip
1000ff58:	601a      	str	r2, [r3, #0]
1000ff5a:	e6ad      	b.n	1000fcb8 <_malloc_r+0x238>
1000ff5c:	0509      	lsls	r1, r1, #20
1000ff5e:	d000      	beq.n	1000ff62 <_malloc_r+0x4e2>
1000ff60:	e6aa      	b.n	1000fcb8 <_malloc_r+0x238>
1000ff62:	0002      	movs	r2, r0
1000ff64:	68bc      	ldr	r4, [r7, #8]
1000ff66:	444a      	add	r2, r9
1000ff68:	3101      	adds	r1, #1
1000ff6a:	430a      	orrs	r2, r1
1000ff6c:	6062      	str	r2, [r4, #4]
1000ff6e:	e6f3      	b.n	1000fd58 <_malloc_r+0x2d8>
1000ff70:	465b      	mov	r3, fp
1000ff72:	4642      	mov	r2, r8
1000ff74:	601a      	str	r2, [r3, #0]
1000ff76:	e6aa      	b.n	1000fcce <_malloc_r+0x24e>
1000ff78:	4644      	mov	r4, r8
1000ff7a:	e6ed      	b.n	1000fd58 <_malloc_r+0x2d8>
1000ff7c:	6041      	str	r1, [r0, #4]
1000ff7e:	e78d      	b.n	1000fe9c <_malloc_r+0x41c>
1000ff80:	21aa      	movs	r1, #170	; 0xaa
1000ff82:	0049      	lsls	r1, r1, #1
1000ff84:	428a      	cmp	r2, r1
1000ff86:	d824      	bhi.n	1000ffd2 <_malloc_r+0x552>
1000ff88:	0bda      	lsrs	r2, r3, #15
1000ff8a:	0011      	movs	r1, r2
1000ff8c:	3278      	adds	r2, #120	; 0x78
1000ff8e:	3177      	adds	r1, #119	; 0x77
1000ff90:	00d2      	lsls	r2, r2, #3
1000ff92:	e705      	b.n	1000fda0 <_malloc_r+0x320>
1000ff94:	4b1a      	ldr	r3, [pc, #104]	; (10010000 <_malloc_r+0x580>)
1000ff96:	4298      	cmp	r0, r3
1000ff98:	d824      	bhi.n	1000ffe4 <_malloc_r+0x564>
1000ff9a:	237c      	movs	r3, #124	; 0x7c
1000ff9c:	4698      	mov	r8, r3
1000ff9e:	0ca8      	lsrs	r0, r5, #18
1000ffa0:	4480      	add	r8, r0
1000ffa2:	307d      	adds	r0, #125	; 0x7d
1000ffa4:	00c1      	lsls	r1, r0, #3
1000ffa6:	e5b4      	b.n	1000fb12 <_malloc_r+0x92>
1000ffa8:	9a00      	ldr	r2, [sp, #0]
1000ffaa:	9b01      	ldr	r3, [sp, #4]
1000ffac:	4694      	mov	ip, r2
1000ffae:	4642      	mov	r2, r8
1000ffb0:	3b08      	subs	r3, #8
1000ffb2:	4463      	add	r3, ip
1000ffb4:	1a9b      	subs	r3, r3, r2
1000ffb6:	9300      	str	r3, [sp, #0]
1000ffb8:	2300      	movs	r3, #0
1000ffba:	469b      	mov	fp, r3
1000ffbc:	e6a8      	b.n	1000fd10 <_malloc_r+0x290>
1000ffbe:	0021      	movs	r1, r4
1000ffc0:	0030      	movs	r0, r6
1000ffc2:	3108      	adds	r1, #8
1000ffc4:	f000 f8bc 	bl	10010140 <_free_r>
1000ffc8:	4653      	mov	r3, sl
1000ffca:	68bc      	ldr	r4, [r7, #8]
1000ffcc:	681b      	ldr	r3, [r3, #0]
1000ffce:	6862      	ldr	r2, [r4, #4]
1000ffd0:	e6c2      	b.n	1000fd58 <_malloc_r+0x2d8>
1000ffd2:	490b      	ldr	r1, [pc, #44]	; (10010000 <_malloc_r+0x580>)
1000ffd4:	428a      	cmp	r2, r1
1000ffd6:	d80b      	bhi.n	1000fff0 <_malloc_r+0x570>
1000ffd8:	0c9a      	lsrs	r2, r3, #18
1000ffda:	0011      	movs	r1, r2
1000ffdc:	327d      	adds	r2, #125	; 0x7d
1000ffde:	317c      	adds	r1, #124	; 0x7c
1000ffe0:	00d2      	lsls	r2, r2, #3
1000ffe2:	e6dd      	b.n	1000fda0 <_malloc_r+0x320>
1000ffe4:	21fe      	movs	r1, #254	; 0xfe
1000ffe6:	237e      	movs	r3, #126	; 0x7e
1000ffe8:	207f      	movs	r0, #127	; 0x7f
1000ffea:	4698      	mov	r8, r3
1000ffec:	0089      	lsls	r1, r1, #2
1000ffee:	e590      	b.n	1000fb12 <_malloc_r+0x92>
1000fff0:	22fe      	movs	r2, #254	; 0xfe
1000fff2:	217e      	movs	r1, #126	; 0x7e
1000fff4:	0092      	lsls	r2, r2, #2
1000fff6:	e6d3      	b.n	1000fda0 <_malloc_r+0x320>
1000fff8:	687b      	ldr	r3, [r7, #4]
1000fffa:	e76a      	b.n	1000fed2 <_malloc_r+0x452>
1000fffc:	20011ac4 	.word	0x20011ac4
10010000:	00000554 	.word	0x00000554

10010004 <__malloc_lock>:
10010004:	b510      	push	{r4, lr}
10010006:	4802      	ldr	r0, [pc, #8]	; (10010010 <__malloc_lock+0xc>)
10010008:	f000 f97c 	bl	10010304 <__retarget_lock_acquire_recursive>
1001000c:	bd10      	pop	{r4, pc}
1001000e:	46c0      	nop			; (mov r8, r8)
10010010:	20011ac0 	.word	0x20011ac0

10010014 <__malloc_unlock>:
10010014:	b510      	push	{r4, lr}
10010016:	4802      	ldr	r0, [pc, #8]	; (10010020 <__malloc_unlock+0xc>)
10010018:	f000 f976 	bl	10010308 <__retarget_lock_release_recursive>
1001001c:	bd10      	pop	{r4, pc}
1001001e:	46c0      	nop			; (mov r8, r8)
10010020:	20011ac0 	.word	0x20011ac0

10010024 <_sbrk_r>:
10010024:	2300      	movs	r3, #0
10010026:	b570      	push	{r4, r5, r6, lr}
10010028:	4d06      	ldr	r5, [pc, #24]	; (10010044 <_sbrk_r+0x20>)
1001002a:	0004      	movs	r4, r0
1001002c:	0008      	movs	r0, r1
1001002e:	602b      	str	r3, [r5, #0]
10010030:	f7f3 fcda 	bl	100039e8 <_sbrk>
10010034:	1c43      	adds	r3, r0, #1
10010036:	d000      	beq.n	1001003a <_sbrk_r+0x16>
10010038:	bd70      	pop	{r4, r5, r6, pc}
1001003a:	682b      	ldr	r3, [r5, #0]
1001003c:	2b00      	cmp	r3, #0
1001003e:	d0fb      	beq.n	10010038 <_sbrk_r+0x14>
10010040:	6023      	str	r3, [r4, #0]
10010042:	e7f9      	b.n	10010038 <_sbrk_r+0x14>
10010044:	2001209c 	.word	0x2001209c

10010048 <strlen>:
10010048:	b510      	push	{r4, lr}
1001004a:	0783      	lsls	r3, r0, #30
1001004c:	d00a      	beq.n	10010064 <strlen+0x1c>
1001004e:	0003      	movs	r3, r0
10010050:	2103      	movs	r1, #3
10010052:	e002      	b.n	1001005a <strlen+0x12>
10010054:	3301      	adds	r3, #1
10010056:	420b      	tst	r3, r1
10010058:	d005      	beq.n	10010066 <strlen+0x1e>
1001005a:	781a      	ldrb	r2, [r3, #0]
1001005c:	2a00      	cmp	r2, #0
1001005e:	d1f9      	bne.n	10010054 <strlen+0xc>
10010060:	1a18      	subs	r0, r3, r0
10010062:	bd10      	pop	{r4, pc}
10010064:	0003      	movs	r3, r0
10010066:	6819      	ldr	r1, [r3, #0]
10010068:	4a0c      	ldr	r2, [pc, #48]	; (1001009c <strlen+0x54>)
1001006a:	4c0d      	ldr	r4, [pc, #52]	; (100100a0 <strlen+0x58>)
1001006c:	188a      	adds	r2, r1, r2
1001006e:	438a      	bics	r2, r1
10010070:	4222      	tst	r2, r4
10010072:	d10f      	bne.n	10010094 <strlen+0x4c>
10010074:	6859      	ldr	r1, [r3, #4]
10010076:	4a09      	ldr	r2, [pc, #36]	; (1001009c <strlen+0x54>)
10010078:	3304      	adds	r3, #4
1001007a:	188a      	adds	r2, r1, r2
1001007c:	438a      	bics	r2, r1
1001007e:	4222      	tst	r2, r4
10010080:	d108      	bne.n	10010094 <strlen+0x4c>
10010082:	6859      	ldr	r1, [r3, #4]
10010084:	4a05      	ldr	r2, [pc, #20]	; (1001009c <strlen+0x54>)
10010086:	3304      	adds	r3, #4
10010088:	188a      	adds	r2, r1, r2
1001008a:	438a      	bics	r2, r1
1001008c:	4222      	tst	r2, r4
1001008e:	d0f1      	beq.n	10010074 <strlen+0x2c>
10010090:	e000      	b.n	10010094 <strlen+0x4c>
10010092:	3301      	adds	r3, #1
10010094:	781a      	ldrb	r2, [r3, #0]
10010096:	2a00      	cmp	r2, #0
10010098:	d1fb      	bne.n	10010092 <strlen+0x4a>
1001009a:	e7e1      	b.n	10010060 <strlen+0x18>
1001009c:	fefefeff 	.word	0xfefefeff
100100a0:	80808080 	.word	0x80808080

100100a4 <_malloc_trim_r>:
100100a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100100a6:	000c      	movs	r4, r1
100100a8:	0005      	movs	r5, r0
100100aa:	f7ff ffab 	bl	10010004 <__malloc_lock>
100100ae:	4f20      	ldr	r7, [pc, #128]	; (10010130 <_malloc_trim_r+0x8c>)
100100b0:	68bb      	ldr	r3, [r7, #8]
100100b2:	685e      	ldr	r6, [r3, #4]
100100b4:	2303      	movs	r3, #3
100100b6:	439e      	bics	r6, r3
100100b8:	4b1e      	ldr	r3, [pc, #120]	; (10010134 <_malloc_trim_r+0x90>)
100100ba:	1b34      	subs	r4, r6, r4
100100bc:	469c      	mov	ip, r3
100100be:	4464      	add	r4, ip
100100c0:	0b24      	lsrs	r4, r4, #12
100100c2:	3c01      	subs	r4, #1
100100c4:	3311      	adds	r3, #17
100100c6:	0324      	lsls	r4, r4, #12
100100c8:	429c      	cmp	r4, r3
100100ca:	db07      	blt.n	100100dc <_malloc_trim_r+0x38>
100100cc:	2100      	movs	r1, #0
100100ce:	0028      	movs	r0, r5
100100d0:	f7ff ffa8 	bl	10010024 <_sbrk_r>
100100d4:	68bb      	ldr	r3, [r7, #8]
100100d6:	199b      	adds	r3, r3, r6
100100d8:	4298      	cmp	r0, r3
100100da:	d004      	beq.n	100100e6 <_malloc_trim_r+0x42>
100100dc:	0028      	movs	r0, r5
100100de:	f7ff ff99 	bl	10010014 <__malloc_unlock>
100100e2:	2000      	movs	r0, #0
100100e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100100e6:	0028      	movs	r0, r5
100100e8:	4261      	negs	r1, r4
100100ea:	f7ff ff9b 	bl	10010024 <_sbrk_r>
100100ee:	1c43      	adds	r3, r0, #1
100100f0:	d00d      	beq.n	1001010e <_malloc_trim_r+0x6a>
100100f2:	2201      	movs	r2, #1
100100f4:	68bb      	ldr	r3, [r7, #8]
100100f6:	1b36      	subs	r6, r6, r4
100100f8:	4316      	orrs	r6, r2
100100fa:	605e      	str	r6, [r3, #4]
100100fc:	4b0e      	ldr	r3, [pc, #56]	; (10010138 <_malloc_trim_r+0x94>)
100100fe:	0028      	movs	r0, r5
10010100:	681a      	ldr	r2, [r3, #0]
10010102:	1b14      	subs	r4, r2, r4
10010104:	601c      	str	r4, [r3, #0]
10010106:	f7ff ff85 	bl	10010014 <__malloc_unlock>
1001010a:	2001      	movs	r0, #1
1001010c:	e7ea      	b.n	100100e4 <_malloc_trim_r+0x40>
1001010e:	2100      	movs	r1, #0
10010110:	0028      	movs	r0, r5
10010112:	f7ff ff87 	bl	10010024 <_sbrk_r>
10010116:	68ba      	ldr	r2, [r7, #8]
10010118:	1a83      	subs	r3, r0, r2
1001011a:	2b0f      	cmp	r3, #15
1001011c:	ddde      	ble.n	100100dc <_malloc_trim_r+0x38>
1001011e:	4907      	ldr	r1, [pc, #28]	; (1001013c <_malloc_trim_r+0x98>)
10010120:	6809      	ldr	r1, [r1, #0]
10010122:	1a40      	subs	r0, r0, r1
10010124:	4904      	ldr	r1, [pc, #16]	; (10010138 <_malloc_trim_r+0x94>)
10010126:	6008      	str	r0, [r1, #0]
10010128:	2101      	movs	r1, #1
1001012a:	430b      	orrs	r3, r1
1001012c:	6053      	str	r3, [r2, #4]
1001012e:	e7d5      	b.n	100100dc <_malloc_trim_r+0x38>
10010130:	20002c20 	.word	0x20002c20
10010134:	00000fef 	.word	0x00000fef
10010138:	20011ac4 	.word	0x20011ac4
1001013c:	20003028 	.word	0x20003028

10010140 <_free_r>:
10010140:	b5f0      	push	{r4, r5, r6, r7, lr}
10010142:	46c6      	mov	lr, r8
10010144:	0005      	movs	r5, r0
10010146:	000c      	movs	r4, r1
10010148:	b500      	push	{lr}
1001014a:	2900      	cmp	r1, #0
1001014c:	d04f      	beq.n	100101ee <_free_r+0xae>
1001014e:	f7ff ff59 	bl	10010004 <__malloc_lock>
10010152:	0021      	movs	r1, r4
10010154:	3908      	subs	r1, #8
10010156:	684c      	ldr	r4, [r1, #4]
10010158:	2601      	movs	r6, #1
1001015a:	0022      	movs	r2, r4
1001015c:	2003      	movs	r0, #3
1001015e:	43b2      	bics	r2, r6
10010160:	188f      	adds	r7, r1, r2
10010162:	687b      	ldr	r3, [r7, #4]
10010164:	4383      	bics	r3, r0
10010166:	4862      	ldr	r0, [pc, #392]	; (100102f0 <_free_r+0x1b0>)
10010168:	4698      	mov	r8, r3
1001016a:	6883      	ldr	r3, [r0, #8]
1001016c:	42bb      	cmp	r3, r7
1001016e:	d06a      	beq.n	10010246 <_free_r+0x106>
10010170:	4643      	mov	r3, r8
10010172:	607b      	str	r3, [r7, #4]
10010174:	4226      	tst	r6, r4
10010176:	d11e      	bne.n	100101b6 <_free_r+0x76>
10010178:	2308      	movs	r3, #8
1001017a:	469c      	mov	ip, r3
1001017c:	680c      	ldr	r4, [r1, #0]
1001017e:	4484      	add	ip, r0
10010180:	1b09      	subs	r1, r1, r4
10010182:	1912      	adds	r2, r2, r4
10010184:	688c      	ldr	r4, [r1, #8]
10010186:	4564      	cmp	r4, ip
10010188:	d04f      	beq.n	1001022a <_free_r+0xea>
1001018a:	68cb      	ldr	r3, [r1, #12]
1001018c:	60e3      	str	r3, [r4, #12]
1001018e:	609c      	str	r4, [r3, #8]
10010190:	4643      	mov	r3, r8
10010192:	18fc      	adds	r4, r7, r3
10010194:	6864      	ldr	r4, [r4, #4]
10010196:	4234      	tst	r4, r6
10010198:	d111      	bne.n	100101be <_free_r+0x7e>
1001019a:	68bb      	ldr	r3, [r7, #8]
1001019c:	4c55      	ldr	r4, [pc, #340]	; (100102f4 <_free_r+0x1b4>)
1001019e:	4442      	add	r2, r8
100101a0:	42a3      	cmp	r3, r4
100101a2:	d100      	bne.n	100101a6 <_free_r+0x66>
100101a4:	e07e      	b.n	100102a4 <_free_r+0x164>
100101a6:	68fc      	ldr	r4, [r7, #12]
100101a8:	60dc      	str	r4, [r3, #12]
100101aa:	60a3      	str	r3, [r4, #8]
100101ac:	2301      	movs	r3, #1
100101ae:	4313      	orrs	r3, r2
100101b0:	604b      	str	r3, [r1, #4]
100101b2:	508a      	str	r2, [r1, r2]
100101b4:	e006      	b.n	100101c4 <_free_r+0x84>
100101b6:	18fc      	adds	r4, r7, r3
100101b8:	6864      	ldr	r4, [r4, #4]
100101ba:	4234      	tst	r4, r6
100101bc:	d0ed      	beq.n	1001019a <_free_r+0x5a>
100101be:	4316      	orrs	r6, r2
100101c0:	604e      	str	r6, [r1, #4]
100101c2:	603a      	str	r2, [r7, #0]
100101c4:	2380      	movs	r3, #128	; 0x80
100101c6:	009b      	lsls	r3, r3, #2
100101c8:	429a      	cmp	r2, r3
100101ca:	d213      	bcs.n	100101f4 <_free_r+0xb4>
100101cc:	0954      	lsrs	r4, r2, #5
100101ce:	08d3      	lsrs	r3, r2, #3
100101d0:	2201      	movs	r2, #1
100101d2:	40a2      	lsls	r2, r4
100101d4:	6844      	ldr	r4, [r0, #4]
100101d6:	00db      	lsls	r3, r3, #3
100101d8:	4322      	orrs	r2, r4
100101da:	6042      	str	r2, [r0, #4]
100101dc:	1818      	adds	r0, r3, r0
100101de:	6883      	ldr	r3, [r0, #8]
100101e0:	60c8      	str	r0, [r1, #12]
100101e2:	608b      	str	r3, [r1, #8]
100101e4:	6081      	str	r1, [r0, #8]
100101e6:	60d9      	str	r1, [r3, #12]
100101e8:	0028      	movs	r0, r5
100101ea:	f7ff ff13 	bl	10010014 <__malloc_unlock>
100101ee:	bc80      	pop	{r7}
100101f0:	46b8      	mov	r8, r7
100101f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
100101f4:	0a53      	lsrs	r3, r2, #9
100101f6:	2b04      	cmp	r3, #4
100101f8:	d83e      	bhi.n	10010278 <_free_r+0x138>
100101fa:	0994      	lsrs	r4, r2, #6
100101fc:	0026      	movs	r6, r4
100101fe:	3439      	adds	r4, #57	; 0x39
10010200:	3638      	adds	r6, #56	; 0x38
10010202:	00e4      	lsls	r4, r4, #3
10010204:	1904      	adds	r4, r0, r4
10010206:	6823      	ldr	r3, [r4, #0]
10010208:	3c08      	subs	r4, #8
1001020a:	2703      	movs	r7, #3
1001020c:	429c      	cmp	r4, r3
1001020e:	d042      	beq.n	10010296 <_free_r+0x156>
10010210:	6858      	ldr	r0, [r3, #4]
10010212:	43b8      	bics	r0, r7
10010214:	4290      	cmp	r0, r2
10010216:	d902      	bls.n	1001021e <_free_r+0xde>
10010218:	689b      	ldr	r3, [r3, #8]
1001021a:	429c      	cmp	r4, r3
1001021c:	d1f8      	bne.n	10010210 <_free_r+0xd0>
1001021e:	68dc      	ldr	r4, [r3, #12]
10010220:	60cc      	str	r4, [r1, #12]
10010222:	608b      	str	r3, [r1, #8]
10010224:	60a1      	str	r1, [r4, #8]
10010226:	60d9      	str	r1, [r3, #12]
10010228:	e7de      	b.n	100101e8 <_free_r+0xa8>
1001022a:	4643      	mov	r3, r8
1001022c:	18f8      	adds	r0, r7, r3
1001022e:	6840      	ldr	r0, [r0, #4]
10010230:	4230      	tst	r0, r6
10010232:	d157      	bne.n	100102e4 <_free_r+0x1a4>
10010234:	68fb      	ldr	r3, [r7, #12]
10010236:	68b8      	ldr	r0, [r7, #8]
10010238:	4442      	add	r2, r8
1001023a:	4316      	orrs	r6, r2
1001023c:	60c3      	str	r3, [r0, #12]
1001023e:	6098      	str	r0, [r3, #8]
10010240:	604e      	str	r6, [r1, #4]
10010242:	508a      	str	r2, [r1, r2]
10010244:	e7d0      	b.n	100101e8 <_free_r+0xa8>
10010246:	0013      	movs	r3, r2
10010248:	4443      	add	r3, r8
1001024a:	4226      	tst	r6, r4
1001024c:	d106      	bne.n	1001025c <_free_r+0x11c>
1001024e:	680a      	ldr	r2, [r1, #0]
10010250:	1a89      	subs	r1, r1, r2
10010252:	688c      	ldr	r4, [r1, #8]
10010254:	189b      	adds	r3, r3, r2
10010256:	68ca      	ldr	r2, [r1, #12]
10010258:	60e2      	str	r2, [r4, #12]
1001025a:	6094      	str	r4, [r2, #8]
1001025c:	2201      	movs	r2, #1
1001025e:	431a      	orrs	r2, r3
10010260:	604a      	str	r2, [r1, #4]
10010262:	4a25      	ldr	r2, [pc, #148]	; (100102f8 <_free_r+0x1b8>)
10010264:	6081      	str	r1, [r0, #8]
10010266:	6812      	ldr	r2, [r2, #0]
10010268:	429a      	cmp	r2, r3
1001026a:	d8bd      	bhi.n	100101e8 <_free_r+0xa8>
1001026c:	4b23      	ldr	r3, [pc, #140]	; (100102fc <_free_r+0x1bc>)
1001026e:	0028      	movs	r0, r5
10010270:	6819      	ldr	r1, [r3, #0]
10010272:	f7ff ff17 	bl	100100a4 <_malloc_trim_r>
10010276:	e7b7      	b.n	100101e8 <_free_r+0xa8>
10010278:	2b14      	cmp	r3, #20
1001027a:	d907      	bls.n	1001028c <_free_r+0x14c>
1001027c:	2b54      	cmp	r3, #84	; 0x54
1001027e:	d81a      	bhi.n	100102b6 <_free_r+0x176>
10010280:	0b14      	lsrs	r4, r2, #12
10010282:	0026      	movs	r6, r4
10010284:	346f      	adds	r4, #111	; 0x6f
10010286:	366e      	adds	r6, #110	; 0x6e
10010288:	00e4      	lsls	r4, r4, #3
1001028a:	e7bb      	b.n	10010204 <_free_r+0xc4>
1001028c:	001e      	movs	r6, r3
1001028e:	335c      	adds	r3, #92	; 0x5c
10010290:	365b      	adds	r6, #91	; 0x5b
10010292:	00dc      	lsls	r4, r3, #3
10010294:	e7b6      	b.n	10010204 <_free_r+0xc4>
10010296:	2201      	movs	r2, #1
10010298:	10b6      	asrs	r6, r6, #2
1001029a:	40b2      	lsls	r2, r6
1001029c:	6846      	ldr	r6, [r0, #4]
1001029e:	4332      	orrs	r2, r6
100102a0:	6042      	str	r2, [r0, #4]
100102a2:	e7bd      	b.n	10010220 <_free_r+0xe0>
100102a4:	60d9      	str	r1, [r3, #12]
100102a6:	6099      	str	r1, [r3, #8]
100102a8:	60cb      	str	r3, [r1, #12]
100102aa:	608b      	str	r3, [r1, #8]
100102ac:	2301      	movs	r3, #1
100102ae:	4313      	orrs	r3, r2
100102b0:	604b      	str	r3, [r1, #4]
100102b2:	508a      	str	r2, [r1, r2]
100102b4:	e798      	b.n	100101e8 <_free_r+0xa8>
100102b6:	24aa      	movs	r4, #170	; 0xaa
100102b8:	0064      	lsls	r4, r4, #1
100102ba:	42a3      	cmp	r3, r4
100102bc:	d805      	bhi.n	100102ca <_free_r+0x18a>
100102be:	0bd4      	lsrs	r4, r2, #15
100102c0:	0026      	movs	r6, r4
100102c2:	3478      	adds	r4, #120	; 0x78
100102c4:	3677      	adds	r6, #119	; 0x77
100102c6:	00e4      	lsls	r4, r4, #3
100102c8:	e79c      	b.n	10010204 <_free_r+0xc4>
100102ca:	4c0d      	ldr	r4, [pc, #52]	; (10010300 <_free_r+0x1c0>)
100102cc:	42a3      	cmp	r3, r4
100102ce:	d805      	bhi.n	100102dc <_free_r+0x19c>
100102d0:	0c94      	lsrs	r4, r2, #18
100102d2:	0026      	movs	r6, r4
100102d4:	347d      	adds	r4, #125	; 0x7d
100102d6:	367c      	adds	r6, #124	; 0x7c
100102d8:	00e4      	lsls	r4, r4, #3
100102da:	e793      	b.n	10010204 <_free_r+0xc4>
100102dc:	24fe      	movs	r4, #254	; 0xfe
100102de:	267e      	movs	r6, #126	; 0x7e
100102e0:	00a4      	lsls	r4, r4, #2
100102e2:	e78f      	b.n	10010204 <_free_r+0xc4>
100102e4:	0033      	movs	r3, r6
100102e6:	4313      	orrs	r3, r2
100102e8:	604b      	str	r3, [r1, #4]
100102ea:	603a      	str	r2, [r7, #0]
100102ec:	e77c      	b.n	100101e8 <_free_r+0xa8>
100102ee:	46c0      	nop			; (mov r8, r8)
100102f0:	20002c20 	.word	0x20002c20
100102f4:	20002c28 	.word	0x20002c28
100102f8:	2000302c 	.word	0x2000302c
100102fc:	20011af4 	.word	0x20011af4
10010300:	00000554 	.word	0x00000554

10010304 <__retarget_lock_acquire_recursive>:
10010304:	4770      	bx	lr
10010306:	46c0      	nop			; (mov r8, r8)

10010308 <__retarget_lock_release_recursive>:
10010308:	4770      	bx	lr
1001030a:	46c0      	nop			; (mov r8, r8)

1001030c <_fini>:
1001030c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1001030e:	46c0      	nop			; (mov r8, r8)

10010310 <__mutex_exit_veneer>:
10010310:	b401      	push	{r0}
10010312:	4802      	ldr	r0, [pc, #8]	; (1001031c <__mutex_exit_veneer+0xc>)
10010314:	4684      	mov	ip, r0
10010316:	bc01      	pop	{r0}
10010318:	4760      	bx	ip
1001031a:	bf00      	nop
1001031c:	2000204d 	.word	0x2000204d

10010320 <____aeabi_ldiv0_veneer>:
10010320:	b401      	push	{r0}
10010322:	4802      	ldr	r0, [pc, #8]	; (1001032c <____aeabi_ldiv0_veneer+0xc>)
10010324:	4684      	mov	ip, r0
10010326:	bc01      	pop	{r0}
10010328:	4760      	bx	ip
1001032a:	bf00      	nop
1001032c:	2000264d 	.word	0x2000264d

10010330 <____aeabi_idiv0_veneer>:
10010330:	b401      	push	{r0}
10010332:	4802      	ldr	r0, [pc, #8]	; (1001033c <____aeabi_idiv0_veneer+0xc>)
10010334:	4684      	mov	ip, r0
10010336:	bc01      	pop	{r0}
10010338:	4760      	bx	ip
1001033a:	bf00      	nop
1001033c:	2000264d 	.word	0x2000264d

10010340 <__mutex_try_enter_veneer>:
10010340:	b401      	push	{r0}
10010342:	4802      	ldr	r0, [pc, #8]	; (1001034c <__mutex_try_enter_veneer+0xc>)
10010344:	4684      	mov	ip, r0
10010346:	bc01      	pop	{r0}
10010348:	4760      	bx	ip
1001034a:	bf00      	nop
1001034c:	20001f71 	.word	0x20001f71

10010350 <__mutex_enter_timeout_ms_veneer>:
10010350:	b401      	push	{r0}
10010352:	4802      	ldr	r0, [pc, #8]	; (1001035c <__mutex_enter_timeout_ms_veneer+0xc>)
10010354:	4684      	mov	ip, r0
10010356:	bc01      	pop	{r0}
10010358:	4760      	bx	ip
1001035a:	bf00      	nop
1001035c:	20001fb5 	.word	0x20001fb5

10010360 <__flash_do_cmd.constprop.0_veneer>:
10010360:	b401      	push	{r0}
10010362:	4802      	ldr	r0, [pc, #8]	; (1001036c <__flash_do_cmd.constprop.0_veneer+0xc>)
10010364:	4684      	mov	ip, r0
10010366:	bc01      	pop	{r0}
10010368:	4760      	bx	ip
1001036a:	bf00      	nop
1001036c:	20001e81 	.word	0x20001e81

10010370 <__mutex_enter_blocking_veneer>:
10010370:	b401      	push	{r0}
10010372:	4802      	ldr	r0, [pc, #8]	; (1001037c <__mutex_enter_blocking_veneer+0xc>)
10010374:	4684      	mov	ip, r0
10010376:	bc01      	pop	{r0}
10010378:	4760      	bx	ip
1001037a:	bf00      	nop
1001037c:	20001f25 	.word	0x20001f25

Disassembly of section .data:

200000c0 <RenderAText>:
200000c0:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
200000c2:	4644      	mov	r4, r8
200000c4:	b410      	push	{r4}
200000c6:	9c09      	ldr	r4, [sp, #36]	; 0x24
200000c8:	4e49      	ldr	r6, [pc, #292]	; (200001f0 <RenderAText_pSioBase>)
200000ca:	6632      	str	r2, [r6, #96]	; 0x60
200000cc:	8a62      	ldrh	r2, [r4, #18]
200000ce:	6672      	str	r2, [r6, #100]	; 0x64
200000d0:	8925      	ldrh	r5, [r4, #8]
200000d2:	2703      	movs	r7, #3
200000d4:	43bd      	bics	r5, r7
200000d6:	9509      	str	r5, [sp, #36]	; 0x24
200000d8:	43b9      	bics	r1, r7
200000da:	43bb      	bics	r3, r7
200000dc:	9303      	str	r3, [sp, #12]
200000de:	6f75      	ldr	r5, [r6, #116]	; 0x74
200000e0:	6f32      	ldr	r2, [r6, #112]	; 0x70
200000e2:	022d      	lsls	r5, r5, #8
200000e4:	6963      	ldr	r3, [r4, #20]
200000e6:	442b      	add	r3, r5
200000e8:	8865      	ldrh	r5, [r4, #2]
200000ea:	436a      	muls	r2, r5
200000ec:	68e5      	ldr	r5, [r4, #12]
200000ee:	442a      	add	r2, r5
200000f0:	9202      	str	r2, [sp, #8]
200000f2:	08ce      	lsrs	r6, r1, #3
200000f4:	4432      	add	r2, r6
200000f6:	4432      	add	r2, r6
200000f8:	69a5      	ldr	r5, [r4, #24]
200000fa:	46a8      	mov	r8, r5
200000fc:	4d3b      	ldr	r5, [pc, #236]	; (200001ec <RenderAText_Addr>)
200000fe:	46ae      	mov	lr, r5
20000100:	074e      	lsls	r6, r1, #29
20000102:	d521      	bpl.n	20000148 <RenderAText+0x88>
20000104:	7856      	ldrb	r6, [r2, #1]
20000106:	4645      	mov	r5, r8
20000108:	0934      	lsrs	r4, r6, #4
2000010a:	5d2c      	ldrb	r4, [r5, r4]
2000010c:	0736      	lsls	r6, r6, #28
2000010e:	0f36      	lsrs	r6, r6, #28
20000110:	5dae      	ldrb	r6, [r5, r6]
20000112:	0225      	lsls	r5, r4, #8
20000114:	4325      	orrs	r5, r4
20000116:	042c      	lsls	r4, r5, #16
20000118:	432c      	orrs	r4, r5
2000011a:	0235      	lsls	r5, r6, #8
2000011c:	4335      	orrs	r5, r6
2000011e:	042e      	lsls	r6, r5, #16
20000120:	432e      	orrs	r6, r5
20000122:	4066      	eors	r6, r4
20000124:	7815      	ldrb	r5, [r2, #0]
20000126:	5d5d      	ldrb	r5, [r3, r5]
20000128:	3202      	adds	r2, #2
2000012a:	00ed      	lsls	r5, r5, #3
2000012c:	4475      	add	r5, lr
2000012e:	686f      	ldr	r7, [r5, #4]
20000130:	4037      	ands	r7, r6
20000132:	4067      	eors	r7, r4
20000134:	c080      	stmia	r0!, {r7}
20000136:	3104      	adds	r1, #4
20000138:	9f09      	ldr	r7, [sp, #36]	; 0x24
2000013a:	42b9      	cmp	r1, r7
2000013c:	d301      	bcc.n	20000142 <RenderAText+0x82>
2000013e:	2100      	movs	r1, #0
20000140:	9a02      	ldr	r2, [sp, #8]
20000142:	9f03      	ldr	r7, [sp, #12]
20000144:	3f04      	subs	r7, #4
20000146:	9703      	str	r7, [sp, #12]
20000148:	9f09      	ldr	r7, [sp, #36]	; 0x24
2000014a:	1a7f      	subs	r7, r7, r1

2000014c <RenderAText_OutLoop>:
2000014c:	9e03      	ldr	r6, [sp, #12]
2000014e:	42b7      	cmp	r7, r6
20000150:	d900      	bls.n	20000154 <RenderAText_OutLoop+0x8>
20000152:	4637      	mov	r7, r6
20000154:	2f08      	cmp	r7, #8
20000156:	d220      	bcs.n	2000019a <RenderAText_Last+0x3e>
20000158:	2f04      	cmp	r7, #4
2000015a:	d31b      	bcc.n	20000194 <RenderAText_Last+0x38>

2000015c <RenderAText_Last>:
2000015c:	7856      	ldrb	r6, [r2, #1]
2000015e:	4645      	mov	r5, r8
20000160:	0934      	lsrs	r4, r6, #4
20000162:	5d2c      	ldrb	r4, [r5, r4]
20000164:	0736      	lsls	r6, r6, #28
20000166:	0f36      	lsrs	r6, r6, #28
20000168:	5dae      	ldrb	r6, [r5, r6]
2000016a:	0225      	lsls	r5, r4, #8
2000016c:	4325      	orrs	r5, r4
2000016e:	042c      	lsls	r4, r5, #16
20000170:	432c      	orrs	r4, r5
20000172:	0235      	lsls	r5, r6, #8
20000174:	4335      	orrs	r5, r6
20000176:	042e      	lsls	r6, r5, #16
20000178:	432e      	orrs	r6, r5
2000017a:	4066      	eors	r6, r4
2000017c:	7815      	ldrb	r5, [r2, #0]
2000017e:	5d5d      	ldrb	r5, [r3, r5]
20000180:	3202      	adds	r2, #2
20000182:	00ed      	lsls	r5, r5, #3
20000184:	4475      	add	r5, lr
20000186:	6829      	ldr	r1, [r5, #0]
20000188:	4031      	ands	r1, r6
2000018a:	4061      	eors	r1, r4
2000018c:	c002      	stmia	r0!, {r1}
2000018e:	9a02      	ldr	r2, [sp, #8]
20000190:	2f04      	cmp	r7, #4
20000192:	d8db      	bhi.n	2000014c <RenderAText_OutLoop>
20000194:	bc10      	pop	{r4}
20000196:	46a0      	mov	r8, r4
20000198:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
2000019a:	08b9      	lsrs	r1, r7, #2
2000019c:	008d      	lsls	r5, r1, #2
2000019e:	1b76      	subs	r6, r6, r5
200001a0:	9603      	str	r6, [sp, #12]
200001a2:	3901      	subs	r1, #1

200001a4 <RenderAText_InLoop>:
200001a4:	7856      	ldrb	r6, [r2, #1]
200001a6:	4645      	mov	r5, r8
200001a8:	0934      	lsrs	r4, r6, #4
200001aa:	5d2c      	ldrb	r4, [r5, r4]
200001ac:	0736      	lsls	r6, r6, #28
200001ae:	0f36      	lsrs	r6, r6, #28
200001b0:	5dae      	ldrb	r6, [r5, r6]
200001b2:	0225      	lsls	r5, r4, #8
200001b4:	4325      	orrs	r5, r4
200001b6:	042c      	lsls	r4, r5, #16
200001b8:	432c      	orrs	r4, r5
200001ba:	0235      	lsls	r5, r6, #8
200001bc:	4335      	orrs	r5, r6
200001be:	042e      	lsls	r6, r5, #16
200001c0:	432e      	orrs	r6, r5
200001c2:	4066      	eors	r6, r4
200001c4:	7815      	ldrb	r5, [r2, #0]
200001c6:	5d5d      	ldrb	r5, [r3, r5]
200001c8:	3202      	adds	r2, #2
200001ca:	00ed      	lsls	r5, r5, #3
200001cc:	4475      	add	r5, lr
200001ce:	682f      	ldr	r7, [r5, #0]
200001d0:	4037      	ands	r7, r6
200001d2:	4067      	eors	r7, r4
200001d4:	c080      	stmia	r0!, {r7}
200001d6:	686f      	ldr	r7, [r5, #4]
200001d8:	4037      	ands	r7, r6
200001da:	4067      	eors	r7, r4
200001dc:	c080      	stmia	r0!, {r7}
200001de:	3902      	subs	r1, #2
200001e0:	d8e0      	bhi.n	200001a4 <RenderAText_InLoop>
200001e2:	9f09      	ldr	r7, [sp, #36]	; 0x24
200001e4:	d0ba      	beq.n	2000015c <RenderAText_Last>
200001e6:	9a02      	ldr	r2, [sp, #8]
200001e8:	e7b0      	b.n	2000014c <RenderAText_OutLoop>
200001ea:	46c0      	nop			; (mov r8, r8)

200001ec <RenderAText_Addr>:
200001ec:	2000642c 	.word	0x2000642c

200001f0 <RenderAText_pSioBase>:
200001f0:	d0000000 	.word	0xd0000000

200001f4 <RenderAttrib8>:
200001f4:	b5fc      	push	{r2, r3, r4, r5, r6, r7, lr}
200001f6:	4644      	mov	r4, r8
200001f8:	b410      	push	{r4}
200001fa:	9c08      	ldr	r4, [sp, #32]
200001fc:	8925      	ldrh	r5, [r4, #8]
200001fe:	2703      	movs	r7, #3
20000200:	43bd      	bics	r5, r7
20000202:	9508      	str	r5, [sp, #32]
20000204:	43b9      	bics	r1, r7
20000206:	43bb      	bics	r3, r7
20000208:	9302      	str	r3, [sp, #8]
2000020a:	08d3      	lsrs	r3, r2, #3
2000020c:	8865      	ldrh	r5, [r4, #2]
2000020e:	436b      	muls	r3, r5
20000210:	6967      	ldr	r7, [r4, #20]
20000212:	443b      	add	r3, r7
20000214:	436a      	muls	r2, r5
20000216:	68e5      	ldr	r5, [r4, #12]
20000218:	442a      	add	r2, r5
2000021a:	9201      	str	r2, [sp, #4]
2000021c:	1a9b      	subs	r3, r3, r2
2000021e:	08ce      	lsrs	r6, r1, #3
20000220:	4432      	add	r2, r6
20000222:	69a5      	ldr	r5, [r4, #24]
20000224:	46a8      	mov	r8, r5
20000226:	4d39      	ldr	r5, [pc, #228]	; (2000030c <RenderAttrib8_Addr>)
20000228:	46ae      	mov	lr, r5
2000022a:	074e      	lsls	r6, r1, #29
2000022c:	d520      	bpl.n	20000270 <RenderAttrib8+0x7c>
2000022e:	5cd6      	ldrb	r6, [r2, r3]
20000230:	4645      	mov	r5, r8
20000232:	0934      	lsrs	r4, r6, #4
20000234:	5d2c      	ldrb	r4, [r5, r4]
20000236:	0736      	lsls	r6, r6, #28
20000238:	0f36      	lsrs	r6, r6, #28
2000023a:	5dae      	ldrb	r6, [r5, r6]
2000023c:	0225      	lsls	r5, r4, #8
2000023e:	4325      	orrs	r5, r4
20000240:	042c      	lsls	r4, r5, #16
20000242:	432c      	orrs	r4, r5
20000244:	0235      	lsls	r5, r6, #8
20000246:	4335      	orrs	r5, r6
20000248:	042e      	lsls	r6, r5, #16
2000024a:	432e      	orrs	r6, r5
2000024c:	4066      	eors	r6, r4
2000024e:	7815      	ldrb	r5, [r2, #0]
20000250:	3201      	adds	r2, #1
20000252:	00ed      	lsls	r5, r5, #3
20000254:	4475      	add	r5, lr
20000256:	686f      	ldr	r7, [r5, #4]
20000258:	4037      	ands	r7, r6
2000025a:	4067      	eors	r7, r4
2000025c:	c080      	stmia	r0!, {r7}
2000025e:	3104      	adds	r1, #4
20000260:	9f08      	ldr	r7, [sp, #32]
20000262:	42b9      	cmp	r1, r7
20000264:	d301      	bcc.n	2000026a <RenderAttrib8+0x76>
20000266:	2100      	movs	r1, #0
20000268:	9a01      	ldr	r2, [sp, #4]
2000026a:	9f02      	ldr	r7, [sp, #8]
2000026c:	3f04      	subs	r7, #4
2000026e:	9702      	str	r7, [sp, #8]
20000270:	9f08      	ldr	r7, [sp, #32]
20000272:	1a7f      	subs	r7, r7, r1

20000274 <RenderAttrib8_OutLoop>:
20000274:	9e02      	ldr	r6, [sp, #8]
20000276:	42b7      	cmp	r7, r6
20000278:	d900      	bls.n	2000027c <RenderAttrib8_OutLoop+0x8>
2000027a:	4637      	mov	r7, r6
2000027c:	2f08      	cmp	r7, #8
2000027e:	d21f      	bcs.n	200002c0 <RenderAttrib8_Last+0x3c>
20000280:	2f04      	cmp	r7, #4
20000282:	d31a      	bcc.n	200002ba <RenderAttrib8_Last+0x36>

20000284 <RenderAttrib8_Last>:
20000284:	5cd6      	ldrb	r6, [r2, r3]
20000286:	4645      	mov	r5, r8
20000288:	0934      	lsrs	r4, r6, #4
2000028a:	5d2c      	ldrb	r4, [r5, r4]
2000028c:	0736      	lsls	r6, r6, #28
2000028e:	0f36      	lsrs	r6, r6, #28
20000290:	5dae      	ldrb	r6, [r5, r6]
20000292:	0225      	lsls	r5, r4, #8
20000294:	4325      	orrs	r5, r4
20000296:	042c      	lsls	r4, r5, #16
20000298:	432c      	orrs	r4, r5
2000029a:	0235      	lsls	r5, r6, #8
2000029c:	4335      	orrs	r5, r6
2000029e:	042e      	lsls	r6, r5, #16
200002a0:	432e      	orrs	r6, r5
200002a2:	4066      	eors	r6, r4
200002a4:	7815      	ldrb	r5, [r2, #0]
200002a6:	3201      	adds	r2, #1
200002a8:	00ed      	lsls	r5, r5, #3
200002aa:	4475      	add	r5, lr
200002ac:	6829      	ldr	r1, [r5, #0]
200002ae:	4031      	ands	r1, r6
200002b0:	4061      	eors	r1, r4
200002b2:	c002      	stmia	r0!, {r1}
200002b4:	9a01      	ldr	r2, [sp, #4]
200002b6:	2f04      	cmp	r7, #4
200002b8:	d8dc      	bhi.n	20000274 <RenderAttrib8_OutLoop>
200002ba:	bc10      	pop	{r4}
200002bc:	46a0      	mov	r8, r4
200002be:	bdfc      	pop	{r2, r3, r4, r5, r6, r7, pc}
200002c0:	08b9      	lsrs	r1, r7, #2
200002c2:	008d      	lsls	r5, r1, #2
200002c4:	1b76      	subs	r6, r6, r5
200002c6:	9602      	str	r6, [sp, #8]
200002c8:	3901      	subs	r1, #1

200002ca <RenderAttrib8_InLoop>:
200002ca:	5cd6      	ldrb	r6, [r2, r3]
200002cc:	4645      	mov	r5, r8
200002ce:	0934      	lsrs	r4, r6, #4
200002d0:	5d2c      	ldrb	r4, [r5, r4]
200002d2:	0736      	lsls	r6, r6, #28
200002d4:	0f36      	lsrs	r6, r6, #28
200002d6:	5dae      	ldrb	r6, [r5, r6]
200002d8:	0225      	lsls	r5, r4, #8
200002da:	4325      	orrs	r5, r4
200002dc:	042c      	lsls	r4, r5, #16
200002de:	432c      	orrs	r4, r5
200002e0:	0235      	lsls	r5, r6, #8
200002e2:	4335      	orrs	r5, r6
200002e4:	042e      	lsls	r6, r5, #16
200002e6:	432e      	orrs	r6, r5
200002e8:	4066      	eors	r6, r4
200002ea:	7817      	ldrb	r7, [r2, #0]
200002ec:	3201      	adds	r2, #1
200002ee:	00ff      	lsls	r7, r7, #3
200002f0:	4477      	add	r7, lr
200002f2:	683d      	ldr	r5, [r7, #0]
200002f4:	4035      	ands	r5, r6
200002f6:	4065      	eors	r5, r4
200002f8:	687f      	ldr	r7, [r7, #4]
200002fa:	4037      	ands	r7, r6
200002fc:	4067      	eors	r7, r4
200002fe:	c0a0      	stmia	r0!, {r5, r7}
20000300:	3902      	subs	r1, #2
20000302:	d8e2      	bhi.n	200002ca <RenderAttrib8_InLoop>
20000304:	9f08      	ldr	r7, [sp, #32]
20000306:	d0bd      	beq.n	20000284 <RenderAttrib8_Last>
20000308:	9a01      	ldr	r2, [sp, #4]
2000030a:	e7b3      	b.n	20000274 <RenderAttrib8_OutLoop>

2000030c <RenderAttrib8_Addr>:
2000030c:	2000642c 	.word	0x2000642c

20000310 <MemSet4>:
20000310:	b5f0      	push	{r4, r5, r6, r7, lr}
20000312:	460b      	mov	r3, r1
20000314:	460c      	mov	r4, r1
20000316:	460d      	mov	r5, r1
20000318:	460e      	mov	r6, r1
2000031a:	460f      	mov	r7, r1
2000031c:	e004      	b.n	20000328 <MemSet4+0x18>
2000031e:	c0fa      	stmia	r0!, {r1, r3, r4, r5, r6, r7}
20000320:	c0fa      	stmia	r0!, {r1, r3, r4, r5, r6, r7}
20000322:	c0fa      	stmia	r0!, {r1, r3, r4, r5, r6, r7}
20000324:	c0fa      	stmia	r0!, {r1, r3, r4, r5, r6, r7}
20000326:	c0fa      	stmia	r0!, {r1, r3, r4, r5, r6, r7}
20000328:	3a1e      	subs	r2, #30
2000032a:	daf8      	bge.n	2000031e <MemSet4+0xe>
2000032c:	321e      	adds	r2, #30
2000032e:	e000      	b.n	20000332 <MemSet4+0x22>
20000330:	c0fa      	stmia	r0!, {r1, r3, r4, r5, r6, r7}
20000332:	3a06      	subs	r2, #6
20000334:	dafc      	bge.n	20000330 <MemSet4+0x20>
20000336:	3206      	adds	r2, #6
20000338:	e000      	b.n	2000033c <MemSet4+0x2c>
2000033a:	c002      	stmia	r0!, {r1}
2000033c:	3a01      	subs	r2, #1
2000033e:	dafc      	bge.n	2000033a <MemSet4+0x2a>
20000340:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

20000344 <RenderCText>:
20000344:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
20000346:	9c08      	ldr	r4, [sp, #32]
20000348:	4e40      	ldr	r6, [pc, #256]	; (2000044c <RenderCText_pSioBase>)
2000034a:	6632      	str	r2, [r6, #96]	; 0x60
2000034c:	8a62      	ldrh	r2, [r4, #18]
2000034e:	6672      	str	r2, [r6, #100]	; 0x64
20000350:	8925      	ldrh	r5, [r4, #8]
20000352:	2703      	movs	r7, #3
20000354:	43bd      	bics	r5, r7
20000356:	9508      	str	r5, [sp, #32]
20000358:	43b9      	bics	r1, r7
2000035a:	43bb      	bics	r3, r7
2000035c:	9302      	str	r3, [sp, #8]
2000035e:	6f75      	ldr	r5, [r6, #116]	; 0x74
20000360:	6f32      	ldr	r2, [r6, #112]	; 0x70
20000362:	022d      	lsls	r5, r5, #8
20000364:	6963      	ldr	r3, [r4, #20]
20000366:	442b      	add	r3, r5
20000368:	8865      	ldrh	r5, [r4, #2]
2000036a:	436a      	muls	r2, r5
2000036c:	68e5      	ldr	r5, [r4, #12]
2000036e:	442a      	add	r2, r5
20000370:	9201      	str	r2, [sp, #4]
20000372:	08ce      	lsrs	r6, r1, #3
20000374:	4432      	add	r2, r6
20000376:	4432      	add	r2, r6
20000378:	4432      	add	r2, r6
2000037a:	4d33      	ldr	r5, [pc, #204]	; (20000448 <RenderCText_Addr>)
2000037c:	46ae      	mov	lr, r5
2000037e:	074e      	lsls	r6, r1, #29
20000380:	d51c      	bpl.n	200003bc <RenderCText+0x78>
20000382:	7815      	ldrb	r5, [r2, #0]
20000384:	5d5d      	ldrb	r5, [r3, r5]
20000386:	7854      	ldrb	r4, [r2, #1]
20000388:	0227      	lsls	r7, r4, #8
2000038a:	4327      	orrs	r7, r4
2000038c:	043c      	lsls	r4, r7, #16
2000038e:	433c      	orrs	r4, r7
20000390:	7896      	ldrb	r6, [r2, #2]
20000392:	3203      	adds	r2, #3
20000394:	0237      	lsls	r7, r6, #8
20000396:	4337      	orrs	r7, r6
20000398:	043e      	lsls	r6, r7, #16
2000039a:	433e      	orrs	r6, r7
2000039c:	4066      	eors	r6, r4
2000039e:	00ed      	lsls	r5, r5, #3
200003a0:	4475      	add	r5, lr
200003a2:	686f      	ldr	r7, [r5, #4]
200003a4:	4037      	ands	r7, r6
200003a6:	4067      	eors	r7, r4
200003a8:	c080      	stmia	r0!, {r7}
200003aa:	3104      	adds	r1, #4
200003ac:	9f08      	ldr	r7, [sp, #32]
200003ae:	42b9      	cmp	r1, r7
200003b0:	d301      	bcc.n	200003b6 <RenderCText+0x72>
200003b2:	2100      	movs	r1, #0
200003b4:	9a01      	ldr	r2, [sp, #4]
200003b6:	9f02      	ldr	r7, [sp, #8]
200003b8:	3f04      	subs	r7, #4
200003ba:	9702      	str	r7, [sp, #8]
200003bc:	9f08      	ldr	r7, [sp, #32]
200003be:	1a7f      	subs	r7, r7, r1

200003c0 <RenderCText_OutLoop>:
200003c0:	9e02      	ldr	r6, [sp, #8]
200003c2:	42b7      	cmp	r7, r6
200003c4:	d900      	bls.n	200003c8 <RenderCText_OutLoop+0x8>
200003c6:	4637      	mov	r7, r6
200003c8:	2f08      	cmp	r7, #8
200003ca:	d219      	bcs.n	20000400 <RenderCText_Last+0x30>
200003cc:	2f04      	cmp	r7, #4
200003ce:	d316      	bcc.n	200003fe <RenderCText_Last+0x2e>

200003d0 <RenderCText_Last>:
200003d0:	7815      	ldrb	r5, [r2, #0]
200003d2:	5d5d      	ldrb	r5, [r3, r5]
200003d4:	7854      	ldrb	r4, [r2, #1]
200003d6:	0221      	lsls	r1, r4, #8
200003d8:	4321      	orrs	r1, r4
200003da:	040c      	lsls	r4, r1, #16
200003dc:	430c      	orrs	r4, r1
200003de:	7896      	ldrb	r6, [r2, #2]
200003e0:	3203      	adds	r2, #3
200003e2:	0231      	lsls	r1, r6, #8
200003e4:	4331      	orrs	r1, r6
200003e6:	040e      	lsls	r6, r1, #16
200003e8:	430e      	orrs	r6, r1
200003ea:	4066      	eors	r6, r4
200003ec:	00ed      	lsls	r5, r5, #3
200003ee:	4475      	add	r5, lr
200003f0:	6829      	ldr	r1, [r5, #0]
200003f2:	4031      	ands	r1, r6
200003f4:	4061      	eors	r1, r4
200003f6:	c002      	stmia	r0!, {r1}
200003f8:	9a01      	ldr	r2, [sp, #4]
200003fa:	2f04      	cmp	r7, #4
200003fc:	d8e0      	bhi.n	200003c0 <RenderCText_OutLoop>
200003fe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
20000400:	08b9      	lsrs	r1, r7, #2
20000402:	008d      	lsls	r5, r1, #2
20000404:	1b76      	subs	r6, r6, r5
20000406:	9602      	str	r6, [sp, #8]
20000408:	3901      	subs	r1, #1

2000040a <RenderCText_InLoop>:
2000040a:	7815      	ldrb	r5, [r2, #0]
2000040c:	5d5d      	ldrb	r5, [r3, r5]
2000040e:	7854      	ldrb	r4, [r2, #1]
20000410:	0227      	lsls	r7, r4, #8
20000412:	4327      	orrs	r7, r4
20000414:	043c      	lsls	r4, r7, #16
20000416:	433c      	orrs	r4, r7
20000418:	7896      	ldrb	r6, [r2, #2]
2000041a:	3203      	adds	r2, #3
2000041c:	0237      	lsls	r7, r6, #8
2000041e:	4337      	orrs	r7, r6
20000420:	043e      	lsls	r6, r7, #16
20000422:	433e      	orrs	r6, r7
20000424:	4066      	eors	r6, r4
20000426:	00ed      	lsls	r5, r5, #3
20000428:	4475      	add	r5, lr
2000042a:	682f      	ldr	r7, [r5, #0]
2000042c:	4037      	ands	r7, r6
2000042e:	4067      	eors	r7, r4
20000430:	c080      	stmia	r0!, {r7}
20000432:	686f      	ldr	r7, [r5, #4]
20000434:	4037      	ands	r7, r6
20000436:	4067      	eors	r7, r4
20000438:	c080      	stmia	r0!, {r7}
2000043a:	3902      	subs	r1, #2
2000043c:	d8e5      	bhi.n	2000040a <RenderCText_InLoop>
2000043e:	9f08      	ldr	r7, [sp, #32]
20000440:	d0c6      	beq.n	200003d0 <RenderCText_Last>
20000442:	9a01      	ldr	r2, [sp, #4]
20000444:	e7bc      	b.n	200003c0 <RenderCText_OutLoop>
20000446:	46c0      	nop			; (mov r8, r8)

20000448 <RenderCText_Addr>:
20000448:	2000642c 	.word	0x2000642c

2000044c <RenderCText_pSioBase>:
2000044c:	d0000000 	.word	0xd0000000

20000450 <RenderDText>:
20000450:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
20000452:	4644      	mov	r4, r8
20000454:	b410      	push	{r4}
20000456:	9c09      	ldr	r4, [sp, #36]	; 0x24
20000458:	4e68      	ldr	r6, [pc, #416]	; (200005fc <RenderDText_pSioBase>)
2000045a:	6632      	str	r2, [r6, #96]	; 0x60
2000045c:	7ce2      	ldrb	r2, [r4, #19]
2000045e:	6672      	str	r2, [r6, #100]	; 0x64
20000460:	8925      	ldrh	r5, [r4, #8]
20000462:	2703      	movs	r7, #3
20000464:	43bd      	bics	r5, r7
20000466:	9509      	str	r5, [sp, #36]	; 0x24
20000468:	43b9      	bics	r1, r7
2000046a:	43bb      	bics	r3, r7
2000046c:	9303      	str	r3, [sp, #12]
2000046e:	6f75      	ldr	r5, [r6, #116]	; 0x74
20000470:	6f32      	ldr	r2, [r6, #112]	; 0x70
20000472:	022d      	lsls	r5, r5, #8
20000474:	6963      	ldr	r3, [r4, #20]
20000476:	442b      	add	r3, r5
20000478:	4698      	mov	r8, r3
2000047a:	8865      	ldrh	r5, [r4, #2]
2000047c:	436a      	muls	r2, r5
2000047e:	68e5      	ldr	r5, [r4, #12]
20000480:	442a      	add	r2, r5
20000482:	9202      	str	r2, [sp, #8]
20000484:	69a3      	ldr	r3, [r4, #24]
20000486:	9301      	str	r3, [sp, #4]
20000488:	08ce      	lsrs	r6, r1, #3
2000048a:	00b6      	lsls	r6, r6, #2
2000048c:	4433      	add	r3, r6
2000048e:	090e      	lsrs	r6, r1, #4
20000490:	4432      	add	r2, r6
20000492:	7ca4      	ldrb	r4, [r4, #18]
20000494:	0225      	lsls	r5, r4, #8
20000496:	4325      	orrs	r5, r4
20000498:	042c      	lsls	r4, r5, #16
2000049a:	432c      	orrs	r4, r5
2000049c:	4d56      	ldr	r5, [pc, #344]	; (200005f8 <RenderDText_Addr>)
2000049e:	46ae      	mov	lr, r5
200004a0:	070e      	lsls	r6, r1, #28
200004a2:	d037      	beq.n	20000514 <RenderDText+0xc4>
200004a4:	0f35      	lsrs	r5, r6, #28
200004a6:	2610      	movs	r6, #16
200004a8:	1b76      	subs	r6, r6, r5
200004aa:	1989      	adds	r1, r1, r6
200004ac:	9f03      	ldr	r7, [sp, #12]
200004ae:	1bbf      	subs	r7, r7, r6
200004b0:	9703      	str	r7, [sp, #12]
200004b2:	b402      	push	{r1}
200004b4:	7817      	ldrb	r7, [r2, #0]
200004b6:	3201      	adds	r2, #1
200004b8:	4447      	add	r7, r8
200004ba:	783f      	ldrb	r7, [r7, #0]
200004bc:	cb40      	ldmia	r3!, {r6}
200004be:	4066      	eors	r6, r4
200004c0:	00ff      	lsls	r7, r7, #3
200004c2:	4477      	add	r7, lr
200004c4:	6839      	ldr	r1, [r7, #0]
200004c6:	4031      	ands	r1, r6
200004c8:	4061      	eors	r1, r4
200004ca:	2d04      	cmp	r5, #4
200004cc:	d806      	bhi.n	200004dc <RenderDText+0x8c>
200004ce:	0c09      	lsrs	r1, r1, #16
200004d0:	7001      	strb	r1, [r0, #0]
200004d2:	7041      	strb	r1, [r0, #1]
200004d4:	0a09      	lsrs	r1, r1, #8
200004d6:	7081      	strb	r1, [r0, #2]
200004d8:	70c1      	strb	r1, [r0, #3]
200004da:	3004      	adds	r0, #4
200004dc:	cb40      	ldmia	r3!, {r6}
200004de:	4066      	eors	r6, r4
200004e0:	6879      	ldr	r1, [r7, #4]
200004e2:	4031      	ands	r1, r6
200004e4:	4061      	eors	r1, r4
200004e6:	2d08      	cmp	r5, #8
200004e8:	d806      	bhi.n	200004f8 <RenderDText+0xa8>
200004ea:	7001      	strb	r1, [r0, #0]
200004ec:	7041      	strb	r1, [r0, #1]
200004ee:	0a09      	lsrs	r1, r1, #8
200004f0:	7081      	strb	r1, [r0, #2]
200004f2:	70c1      	strb	r1, [r0, #3]
200004f4:	0209      	lsls	r1, r1, #8
200004f6:	3004      	adds	r0, #4
200004f8:	0c09      	lsrs	r1, r1, #16
200004fa:	7001      	strb	r1, [r0, #0]
200004fc:	7041      	strb	r1, [r0, #1]
200004fe:	0a09      	lsrs	r1, r1, #8
20000500:	7081      	strb	r1, [r0, #2]
20000502:	70c1      	strb	r1, [r0, #3]
20000504:	3004      	adds	r0, #4
20000506:	bc02      	pop	{r1}
20000508:	9f09      	ldr	r7, [sp, #36]	; 0x24
2000050a:	42b9      	cmp	r1, r7
2000050c:	d302      	bcc.n	20000514 <RenderDText+0xc4>
2000050e:	2100      	movs	r1, #0
20000510:	9a02      	ldr	r2, [sp, #8]
20000512:	9b01      	ldr	r3, [sp, #4]
20000514:	9f09      	ldr	r7, [sp, #36]	; 0x24
20000516:	1a7f      	subs	r7, r7, r1

20000518 <RenderDText_OutLoop>:
20000518:	9e03      	ldr	r6, [sp, #12]
2000051a:	42b7      	cmp	r7, r6
2000051c:	d900      	bls.n	20000520 <RenderDText_OutLoop+0x8>
2000051e:	4637      	mov	r7, r6
20000520:	2f10      	cmp	r7, #16
20000522:	d232      	bcs.n	2000058a <RenderDText_Last+0x60>
20000524:	2f04      	cmp	r7, #4
20000526:	d32d      	bcc.n	20000584 <RenderDText_Last+0x5a>
20000528:	4639      	mov	r1, r7

2000052a <RenderDText_Last>:
2000052a:	b480      	push	{r7}
2000052c:	7817      	ldrb	r7, [r2, #0]
2000052e:	3201      	adds	r2, #1
20000530:	4447      	add	r7, r8
20000532:	783f      	ldrb	r7, [r7, #0]
20000534:	cb40      	ldmia	r3!, {r6}
20000536:	4066      	eors	r6, r4
20000538:	00ff      	lsls	r7, r7, #3
2000053a:	4477      	add	r7, lr
2000053c:	683d      	ldr	r5, [r7, #0]
2000053e:	4035      	ands	r5, r6
20000540:	4065      	eors	r5, r4
20000542:	7005      	strb	r5, [r0, #0]
20000544:	7045      	strb	r5, [r0, #1]
20000546:	0a2d      	lsrs	r5, r5, #8
20000548:	7085      	strb	r5, [r0, #2]
2000054a:	70c5      	strb	r5, [r0, #3]
2000054c:	3004      	adds	r0, #4
2000054e:	2904      	cmp	r1, #4
20000550:	d913      	bls.n	2000057a <RenderDText_Last+0x50>
20000552:	0a2d      	lsrs	r5, r5, #8
20000554:	7005      	strb	r5, [r0, #0]
20000556:	7045      	strb	r5, [r0, #1]
20000558:	0a2d      	lsrs	r5, r5, #8
2000055a:	7085      	strb	r5, [r0, #2]
2000055c:	70c5      	strb	r5, [r0, #3]
2000055e:	3004      	adds	r0, #4
20000560:	2908      	cmp	r1, #8
20000562:	d90a      	bls.n	2000057a <RenderDText_Last+0x50>
20000564:	cb40      	ldmia	r3!, {r6}
20000566:	4066      	eors	r6, r4
20000568:	687f      	ldr	r7, [r7, #4]
2000056a:	4037      	ands	r7, r6
2000056c:	4067      	eors	r7, r4
2000056e:	7007      	strb	r7, [r0, #0]
20000570:	7047      	strb	r7, [r0, #1]
20000572:	0a3f      	lsrs	r7, r7, #8
20000574:	7087      	strb	r7, [r0, #2]
20000576:	70c7      	strb	r7, [r0, #3]
20000578:	3004      	adds	r0, #4
2000057a:	bc80      	pop	{r7}
2000057c:	9a02      	ldr	r2, [sp, #8]
2000057e:	9b01      	ldr	r3, [sp, #4]
20000580:	2f10      	cmp	r7, #16
20000582:	d2c9      	bcs.n	20000518 <RenderDText_OutLoop>
20000584:	bc10      	pop	{r4}
20000586:	46a0      	mov	r8, r4
20000588:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
2000058a:	08b9      	lsrs	r1, r7, #2
2000058c:	008d      	lsls	r5, r1, #2
2000058e:	1b76      	subs	r6, r6, r5
20000590:	9603      	str	r6, [sp, #12]
20000592:	3903      	subs	r1, #3

20000594 <RenderDText_InLoop>:
20000594:	7817      	ldrb	r7, [r2, #0]
20000596:	3201      	adds	r2, #1
20000598:	4447      	add	r7, r8
2000059a:	783f      	ldrb	r7, [r7, #0]
2000059c:	cb40      	ldmia	r3!, {r6}
2000059e:	4066      	eors	r6, r4
200005a0:	00ff      	lsls	r7, r7, #3
200005a2:	4477      	add	r7, lr
200005a4:	683d      	ldr	r5, [r7, #0]
200005a6:	4035      	ands	r5, r6
200005a8:	4065      	eors	r5, r4
200005aa:	7005      	strb	r5, [r0, #0]
200005ac:	7045      	strb	r5, [r0, #1]
200005ae:	0a2d      	lsrs	r5, r5, #8
200005b0:	7085      	strb	r5, [r0, #2]
200005b2:	70c5      	strb	r5, [r0, #3]
200005b4:	0a2d      	lsrs	r5, r5, #8
200005b6:	7105      	strb	r5, [r0, #4]
200005b8:	7145      	strb	r5, [r0, #5]
200005ba:	0a2d      	lsrs	r5, r5, #8
200005bc:	7185      	strb	r5, [r0, #6]
200005be:	71c5      	strb	r5, [r0, #7]
200005c0:	3008      	adds	r0, #8
200005c2:	cb40      	ldmia	r3!, {r6}
200005c4:	4066      	eors	r6, r4
200005c6:	687f      	ldr	r7, [r7, #4]
200005c8:	4037      	ands	r7, r6
200005ca:	4067      	eors	r7, r4
200005cc:	7007      	strb	r7, [r0, #0]
200005ce:	7047      	strb	r7, [r0, #1]
200005d0:	0a3f      	lsrs	r7, r7, #8
200005d2:	7087      	strb	r7, [r0, #2]
200005d4:	70c7      	strb	r7, [r0, #3]
200005d6:	0a3f      	lsrs	r7, r7, #8
200005d8:	7107      	strb	r7, [r0, #4]
200005da:	7147      	strb	r7, [r0, #5]
200005dc:	0a3f      	lsrs	r7, r7, #8
200005de:	7187      	strb	r7, [r0, #6]
200005e0:	71c7      	strb	r7, [r0, #7]
200005e2:	3008      	adds	r0, #8
200005e4:	3904      	subs	r1, #4
200005e6:	d8d5      	bhi.n	20000594 <RenderDText_InLoop>
200005e8:	9f09      	ldr	r7, [sp, #36]	; 0x24
200005ea:	3103      	adds	r1, #3
200005ec:	0089      	lsls	r1, r1, #2
200005ee:	d19c      	bne.n	2000052a <RenderDText_Last>
200005f0:	9a02      	ldr	r2, [sp, #8]
200005f2:	9b01      	ldr	r3, [sp, #4]
200005f4:	e790      	b.n	20000518 <RenderDText_OutLoop>
200005f6:	46c0      	nop			; (mov r8, r8)

200005f8 <RenderDText_Addr>:
200005f8:	2000642c 	.word	0x2000642c

200005fc <RenderDText_pSioBase>:
200005fc:	d0000000 	.word	0xd0000000

20000600 <RenderFastSprite>:
20000600:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
20000602:	6817      	ldr	r7, [r2, #0]
20000604:	46be      	mov	lr, r7
20000606:	8c17      	ldrh	r7, [r2, #32]
20000608:	9701      	str	r7, [sp, #4]
2000060a:	8ad2      	ldrh	r2, [r2, #22]
2000060c:	2100      	movs	r1, #0
2000060e:	9f01      	ldr	r7, [sp, #4]
20000610:	3f01      	subs	r7, #1
20000612:	d332      	bcc.n	2000067a <RenderFastSprite+0x7a>
20000614:	9701      	str	r7, [sp, #4]
20000616:	4677      	mov	r7, lr
20000618:	cf08      	ldmia	r7!, {r3}
2000061a:	46be      	mov	lr, r7
2000061c:	8a5f      	ldrh	r7, [r3, #18]
2000061e:	b23f      	sxth	r7, r7
20000620:	9c00      	ldr	r4, [sp, #0]
20000622:	1be4      	subs	r4, r4, r7
20000624:	d4f3      	bmi.n	2000060e <RenderFastSprite+0xe>
20000626:	8adf      	ldrh	r7, [r3, #22]
20000628:	42bc      	cmp	r4, r7
2000062a:	daf0      	bge.n	2000060e <RenderFastSprite+0xe>
2000062c:	685f      	ldr	r7, [r3, #4]
2000062e:	5d3d      	ldrb	r5, [r7, r4]
20000630:	00ad      	lsls	r5, r5, #2
20000632:	689f      	ldr	r7, [r3, #8]
20000634:	5d3e      	ldrb	r6, [r7, r4]
20000636:	00b6      	lsls	r6, r6, #2
20000638:	8b1f      	ldrh	r7, [r3, #24]
2000063a:	437c      	muls	r4, r7
2000063c:	681f      	ldr	r7, [r3, #0]
2000063e:	443c      	add	r4, r7
20000640:	8a1b      	ldrh	r3, [r3, #16]
20000642:	b21b      	sxth	r3, r3
20000644:	195b      	adds	r3, r3, r5
20000646:	1acf      	subs	r7, r1, r3
20000648:	dd02      	ble.n	20000650 <RenderFastSprite+0x50>
2000064a:	19ed      	adds	r5, r5, r7
2000064c:	1bf6      	subs	r6, r6, r7
2000064e:	460b      	mov	r3, r1
20000650:	1ad7      	subs	r7, r2, r3
20000652:	42be      	cmp	r6, r7
20000654:	dd00      	ble.n	20000658 <RenderFastSprite+0x58>
20000656:	463e      	mov	r6, r7
20000658:	2703      	movs	r7, #3
2000065a:	43bb      	bics	r3, r7
2000065c:	43bd      	bics	r5, r7
2000065e:	43be      	bics	r6, r7
20000660:	ddd5      	ble.n	2000060e <RenderFastSprite+0xe>
20000662:	1a5f      	subs	r7, r3, r1
20000664:	dd04      	ble.n	20000670 <RenderFastSprite+0x70>
20000666:	08bf      	lsrs	r7, r7, #2
20000668:	c080      	stmia	r0!, {r7}
2000066a:	9f02      	ldr	r7, [sp, #8]
2000066c:	c080      	stmia	r0!, {r7}
2000066e:	4619      	mov	r1, r3
20000670:	1967      	adds	r7, r4, r5
20000672:	08b4      	lsrs	r4, r6, #2
20000674:	c090      	stmia	r0!, {r4, r7}
20000676:	1989      	adds	r1, r1, r6
20000678:	e7c9      	b.n	2000060e <RenderFastSprite+0xe>
2000067a:	1a52      	subs	r2, r2, r1
2000067c:	d902      	bls.n	20000684 <RenderFastSprite+0x84>
2000067e:	0892      	lsrs	r2, r2, #2
20000680:	9b02      	ldr	r3, [sp, #8]
20000682:	c00c      	stmia	r0!, {r2, r3}
20000684:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

20000688 <RenderFText>:
20000688:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
2000068a:	9c08      	ldr	r4, [sp, #32]
2000068c:	4e3a      	ldr	r6, [pc, #232]	; (20000778 <RenderFText_pSioBase>)
2000068e:	6632      	str	r2, [r6, #96]	; 0x60
20000690:	8a62      	ldrh	r2, [r4, #18]
20000692:	6672      	str	r2, [r6, #100]	; 0x64
20000694:	8925      	ldrh	r5, [r4, #8]
20000696:	2703      	movs	r7, #3
20000698:	43bd      	bics	r5, r7
2000069a:	9508      	str	r5, [sp, #32]
2000069c:	43b9      	bics	r1, r7
2000069e:	43bb      	bics	r3, r7
200006a0:	9302      	str	r3, [sp, #8]
200006a2:	6f75      	ldr	r5, [r6, #116]	; 0x74
200006a4:	6f32      	ldr	r2, [r6, #112]	; 0x70
200006a6:	022d      	lsls	r5, r5, #8
200006a8:	6963      	ldr	r3, [r4, #20]
200006aa:	442b      	add	r3, r5
200006ac:	8865      	ldrh	r5, [r4, #2]
200006ae:	436a      	muls	r2, r5
200006b0:	68e5      	ldr	r5, [r4, #12]
200006b2:	442a      	add	r2, r5
200006b4:	9201      	str	r2, [sp, #4]
200006b6:	08ce      	lsrs	r6, r1, #3
200006b8:	0076      	lsls	r6, r6, #1
200006ba:	4432      	add	r2, r6
200006bc:	7e24      	ldrb	r4, [r4, #24]
200006be:	0225      	lsls	r5, r4, #8
200006c0:	4325      	orrs	r5, r4
200006c2:	042c      	lsls	r4, r5, #16
200006c4:	432c      	orrs	r4, r5
200006c6:	4d2b      	ldr	r5, [pc, #172]	; (20000774 <RenderFText_Addr>)
200006c8:	46ae      	mov	lr, r5
200006ca:	074e      	lsls	r6, r1, #29
200006cc:	d517      	bpl.n	200006fe <RenderFText+0x76>
200006ce:	7815      	ldrb	r5, [r2, #0]
200006d0:	5d5d      	ldrb	r5, [r3, r5]
200006d2:	7856      	ldrb	r6, [r2, #1]
200006d4:	3202      	adds	r2, #2
200006d6:	0237      	lsls	r7, r6, #8
200006d8:	4337      	orrs	r7, r6
200006da:	043e      	lsls	r6, r7, #16
200006dc:	433e      	orrs	r6, r7
200006de:	4066      	eors	r6, r4
200006e0:	00ed      	lsls	r5, r5, #3
200006e2:	4475      	add	r5, lr
200006e4:	686f      	ldr	r7, [r5, #4]
200006e6:	4037      	ands	r7, r6
200006e8:	4067      	eors	r7, r4
200006ea:	c080      	stmia	r0!, {r7}
200006ec:	3104      	adds	r1, #4
200006ee:	9f08      	ldr	r7, [sp, #32]
200006f0:	42b9      	cmp	r1, r7
200006f2:	d301      	bcc.n	200006f8 <RenderFText+0x70>
200006f4:	2100      	movs	r1, #0
200006f6:	9a01      	ldr	r2, [sp, #4]
200006f8:	9f02      	ldr	r7, [sp, #8]
200006fa:	3f04      	subs	r7, #4
200006fc:	9702      	str	r7, [sp, #8]
200006fe:	9f08      	ldr	r7, [sp, #32]
20000700:	1a7f      	subs	r7, r7, r1

20000702 <RenderFText_OutLoop>:
20000702:	9e02      	ldr	r6, [sp, #8]
20000704:	42b7      	cmp	r7, r6
20000706:	d900      	bls.n	2000070a <RenderFText_OutLoop+0x8>
20000708:	4637      	mov	r7, r6
2000070a:	2f08      	cmp	r7, #8
2000070c:	d214      	bcs.n	20000738 <RenderFText_Last+0x26>
2000070e:	2f04      	cmp	r7, #4
20000710:	d311      	bcc.n	20000736 <RenderFText_Last+0x24>

20000712 <RenderFText_Last>:
20000712:	7815      	ldrb	r5, [r2, #0]
20000714:	5d5d      	ldrb	r5, [r3, r5]
20000716:	7856      	ldrb	r6, [r2, #1]
20000718:	3202      	adds	r2, #2
2000071a:	0231      	lsls	r1, r6, #8
2000071c:	4331      	orrs	r1, r6
2000071e:	040e      	lsls	r6, r1, #16
20000720:	430e      	orrs	r6, r1
20000722:	4066      	eors	r6, r4
20000724:	00ed      	lsls	r5, r5, #3
20000726:	4475      	add	r5, lr
20000728:	6829      	ldr	r1, [r5, #0]
2000072a:	4031      	ands	r1, r6
2000072c:	4061      	eors	r1, r4
2000072e:	c002      	stmia	r0!, {r1}
20000730:	9a01      	ldr	r2, [sp, #4]
20000732:	2f04      	cmp	r7, #4
20000734:	d8e5      	bhi.n	20000702 <RenderFText_OutLoop>
20000736:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
20000738:	08b9      	lsrs	r1, r7, #2
2000073a:	008d      	lsls	r5, r1, #2
2000073c:	1b76      	subs	r6, r6, r5
2000073e:	9602      	str	r6, [sp, #8]
20000740:	3901      	subs	r1, #1

20000742 <RenderFText_InLoop>:
20000742:	7815      	ldrb	r5, [r2, #0]
20000744:	5d5d      	ldrb	r5, [r3, r5]
20000746:	7856      	ldrb	r6, [r2, #1]
20000748:	3202      	adds	r2, #2
2000074a:	0237      	lsls	r7, r6, #8
2000074c:	4337      	orrs	r7, r6
2000074e:	043e      	lsls	r6, r7, #16
20000750:	433e      	orrs	r6, r7
20000752:	4066      	eors	r6, r4
20000754:	00ed      	lsls	r5, r5, #3
20000756:	4475      	add	r5, lr
20000758:	682f      	ldr	r7, [r5, #0]
2000075a:	4037      	ands	r7, r6
2000075c:	4067      	eors	r7, r4
2000075e:	c080      	stmia	r0!, {r7}
20000760:	686f      	ldr	r7, [r5, #4]
20000762:	4037      	ands	r7, r6
20000764:	4067      	eors	r7, r4
20000766:	c080      	stmia	r0!, {r7}
20000768:	3902      	subs	r1, #2
2000076a:	d8ea      	bhi.n	20000742 <RenderFText_InLoop>
2000076c:	9f08      	ldr	r7, [sp, #32]
2000076e:	d0d0      	beq.n	20000712 <RenderFText_Last>
20000770:	9a01      	ldr	r2, [sp, #4]
20000772:	e7c6      	b.n	20000702 <RenderFText_OutLoop>

20000774 <RenderFText_Addr>:
20000774:	2000642c 	.word	0x2000642c

20000778 <RenderFText_pSioBase>:
20000778:	d0000000 	.word	0xd0000000

2000077c <RenderGraph1>:
2000077c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2000077e:	9c06      	ldr	r4, [sp, #24]
20000780:	8925      	ldrh	r5, [r4, #8]
20000782:	2703      	movs	r7, #3
20000784:	43bd      	bics	r5, r7
20000786:	9506      	str	r5, [sp, #24]
20000788:	43b9      	bics	r1, r7
2000078a:	43bb      	bics	r3, r7
2000078c:	9300      	str	r3, [sp, #0]
2000078e:	8865      	ldrh	r5, [r4, #2]
20000790:	436a      	muls	r2, r5
20000792:	68e5      	ldr	r5, [r4, #12]
20000794:	442a      	add	r2, r5
20000796:	4696      	mov	lr, r2
20000798:	08ca      	lsrs	r2, r1, #3
2000079a:	4472      	add	r2, lr
2000079c:	7d66      	ldrb	r6, [r4, #21]
2000079e:	0237      	lsls	r7, r6, #8
200007a0:	4337      	orrs	r7, r6
200007a2:	043e      	lsls	r6, r7, #16
200007a4:	433e      	orrs	r6, r7
200007a6:	7d24      	ldrb	r4, [r4, #20]
200007a8:	0225      	lsls	r5, r4, #8
200007aa:	4325      	orrs	r5, r4
200007ac:	042c      	lsls	r4, r5, #16
200007ae:	432c      	orrs	r4, r5
200007b0:	4066      	eors	r6, r4
200007b2:	4b20      	ldr	r3, [pc, #128]	; (20000834 <RenderGraph1_Addr>)
200007b4:	074d      	lsls	r5, r1, #29
200007b6:	d510      	bpl.n	200007da <RenderGraph1+0x5e>
200007b8:	7815      	ldrb	r5, [r2, #0]
200007ba:	3201      	adds	r2, #1
200007bc:	00ed      	lsls	r5, r5, #3
200007be:	441d      	add	r5, r3
200007c0:	686f      	ldr	r7, [r5, #4]
200007c2:	4037      	ands	r7, r6
200007c4:	4067      	eors	r7, r4
200007c6:	c080      	stmia	r0!, {r7}
200007c8:	3104      	adds	r1, #4
200007ca:	9f06      	ldr	r7, [sp, #24]
200007cc:	42b9      	cmp	r1, r7
200007ce:	d301      	bcc.n	200007d4 <RenderGraph1+0x58>
200007d0:	2100      	movs	r1, #0
200007d2:	4672      	mov	r2, lr
200007d4:	9f00      	ldr	r7, [sp, #0]
200007d6:	3f04      	subs	r7, #4
200007d8:	9700      	str	r7, [sp, #0]
200007da:	9f06      	ldr	r7, [sp, #24]
200007dc:	1a7f      	subs	r7, r7, r1

200007de <RenderGraph1_OutLoop>:
200007de:	9d00      	ldr	r5, [sp, #0]
200007e0:	42af      	cmp	r7, r5
200007e2:	d900      	bls.n	200007e6 <RenderGraph1_OutLoop+0x8>
200007e4:	462f      	mov	r7, r5
200007e6:	2f08      	cmp	r7, #8
200007e8:	d20d      	bcs.n	20000806 <RenderGraph1_Last+0x18>
200007ea:	2f04      	cmp	r7, #4
200007ec:	d30a      	bcc.n	20000804 <RenderGraph1_Last+0x16>

200007ee <RenderGraph1_Last>:
200007ee:	7815      	ldrb	r5, [r2, #0]
200007f0:	3201      	adds	r2, #1
200007f2:	00ed      	lsls	r5, r5, #3
200007f4:	441d      	add	r5, r3
200007f6:	6829      	ldr	r1, [r5, #0]
200007f8:	4031      	ands	r1, r6
200007fa:	4061      	eors	r1, r4
200007fc:	c002      	stmia	r0!, {r1}
200007fe:	4672      	mov	r2, lr
20000800:	2f04      	cmp	r7, #4
20000802:	d8ec      	bhi.n	200007de <RenderGraph1_OutLoop>
20000804:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
20000806:	08b9      	lsrs	r1, r7, #2
20000808:	008f      	lsls	r7, r1, #2
2000080a:	1bed      	subs	r5, r5, r7
2000080c:	9500      	str	r5, [sp, #0]
2000080e:	3901      	subs	r1, #1

20000810 <RenderGraph1_InLoop>:
20000810:	7815      	ldrb	r5, [r2, #0]
20000812:	3201      	adds	r2, #1
20000814:	00ed      	lsls	r5, r5, #3
20000816:	441d      	add	r5, r3
20000818:	682f      	ldr	r7, [r5, #0]
2000081a:	4037      	ands	r7, r6
2000081c:	4067      	eors	r7, r4
2000081e:	c080      	stmia	r0!, {r7}
20000820:	686f      	ldr	r7, [r5, #4]
20000822:	4037      	ands	r7, r6
20000824:	4067      	eors	r7, r4
20000826:	c080      	stmia	r0!, {r7}
20000828:	3902      	subs	r1, #2
2000082a:	d8f1      	bhi.n	20000810 <RenderGraph1_InLoop>
2000082c:	9f06      	ldr	r7, [sp, #24]
2000082e:	d0de      	beq.n	200007ee <RenderGraph1_Last>
20000830:	4672      	mov	r2, lr
20000832:	e7d4      	b.n	200007de <RenderGraph1_OutLoop>

20000834 <RenderGraph1_Addr>:
20000834:	2000642c 	.word	0x2000642c

20000838 <RenderGraph2>:
20000838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2000083a:	9c06      	ldr	r4, [sp, #24]
2000083c:	8927      	ldrh	r7, [r4, #8]
2000083e:	2603      	movs	r6, #3
20000840:	43b7      	bics	r7, r6
20000842:	43b1      	bics	r1, r6
20000844:	43b3      	bics	r3, r6
20000846:	9300      	str	r3, [sp, #0]
20000848:	8865      	ldrh	r5, [r4, #2]
2000084a:	436a      	muls	r2, r5
2000084c:	68e5      	ldr	r5, [r4, #12]
2000084e:	442a      	add	r2, r5
20000850:	4696      	mov	lr, r2
20000852:	088e      	lsrs	r6, r1, #2
20000854:	4432      	add	r2, r6
20000856:	6963      	ldr	r3, [r4, #20]
20000858:	1a7e      	subs	r6, r7, r1

2000085a <RenderGraph2_OutLoop>:
2000085a:	9c00      	ldr	r4, [sp, #0]
2000085c:	42a6      	cmp	r6, r4
2000085e:	d900      	bls.n	20000862 <RenderGraph2_OutLoop+0x8>
20000860:	4626      	mov	r6, r4
20000862:	2e04      	cmp	r6, #4
20000864:	d200      	bcs.n	20000868 <RenderGraph2_OutLoop+0xe>
20000866:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
20000868:	08b1      	lsrs	r1, r6, #2
2000086a:	008e      	lsls	r6, r1, #2
2000086c:	1ba4      	subs	r4, r4, r6
2000086e:	9400      	str	r4, [sp, #0]
20000870:	0849      	lsrs	r1, r1, #1
20000872:	d306      	bcc.n	20000882 <RenderGraph2_InLoop>
20000874:	7814      	ldrb	r4, [r2, #0]
20000876:	3201      	adds	r2, #1
20000878:	00a4      	lsls	r4, r4, #2
2000087a:	591d      	ldr	r5, [r3, r4]
2000087c:	c020      	stmia	r0!, {r5}
2000087e:	4209      	tst	r1, r1
20000880:	d009      	beq.n	20000896 <RenderGraph2_EndLoop>

20000882 <RenderGraph2_InLoop>:
20000882:	7814      	ldrb	r4, [r2, #0]
20000884:	00a4      	lsls	r4, r4, #2
20000886:	591d      	ldr	r5, [r3, r4]
20000888:	7854      	ldrb	r4, [r2, #1]
2000088a:	3202      	adds	r2, #2
2000088c:	00a4      	lsls	r4, r4, #2
2000088e:	591e      	ldr	r6, [r3, r4]
20000890:	c060      	stmia	r0!, {r5, r6}
20000892:	3901      	subs	r1, #1
20000894:	d1f5      	bne.n	20000882 <RenderGraph2_InLoop>

20000896 <RenderGraph2_EndLoop>:
20000896:	463e      	mov	r6, r7
20000898:	4672      	mov	r2, lr
2000089a:	e7de      	b.n	2000085a <RenderGraph2_OutLoop>

2000089c <RenderGraph4>:
2000089c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2000089e:	9c06      	ldr	r4, [sp, #24]
200008a0:	8927      	ldrh	r7, [r4, #8]
200008a2:	2603      	movs	r6, #3
200008a4:	43b7      	bics	r7, r6
200008a6:	9706      	str	r7, [sp, #24]
200008a8:	43b1      	bics	r1, r6
200008aa:	43b3      	bics	r3, r6
200008ac:	9300      	str	r3, [sp, #0]
200008ae:	8865      	ldrh	r5, [r4, #2]
200008b0:	436a      	muls	r2, r5
200008b2:	68e5      	ldr	r5, [r4, #12]
200008b4:	442a      	add	r2, r5
200008b6:	4696      	mov	lr, r2
200008b8:	084e      	lsrs	r6, r1, #1
200008ba:	4432      	add	r2, r6
200008bc:	6963      	ldr	r3, [r4, #20]
200008be:	9e06      	ldr	r6, [sp, #24]
200008c0:	1a76      	subs	r6, r6, r1

200008c2 <RenderGraph4_OutLoop>:
200008c2:	9c00      	ldr	r4, [sp, #0]
200008c4:	42a6      	cmp	r6, r4
200008c6:	d900      	bls.n	200008ca <RenderGraph4_OutLoop+0x8>
200008c8:	4626      	mov	r6, r4
200008ca:	2e04      	cmp	r6, #4
200008cc:	d200      	bcs.n	200008d0 <RenderGraph4_OutLoop+0xe>
200008ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
200008d0:	08b1      	lsrs	r1, r6, #2
200008d2:	008e      	lsls	r6, r1, #2
200008d4:	1ba4      	subs	r4, r4, r6
200008d6:	9400      	str	r4, [sp, #0]
200008d8:	0849      	lsrs	r1, r1, #1
200008da:	d30b      	bcc.n	200008f4 <RenderGraph4_InLoop>
200008dc:	7814      	ldrb	r4, [r2, #0]
200008de:	0064      	lsls	r4, r4, #1
200008e0:	5b1d      	ldrh	r5, [r3, r4]
200008e2:	7854      	ldrb	r4, [r2, #1]
200008e4:	3202      	adds	r2, #2
200008e6:	0064      	lsls	r4, r4, #1
200008e8:	5b1e      	ldrh	r6, [r3, r4]
200008ea:	0436      	lsls	r6, r6, #16
200008ec:	4335      	orrs	r5, r6
200008ee:	c020      	stmia	r0!, {r5}
200008f0:	4209      	tst	r1, r1
200008f2:	d013      	beq.n	2000091c <RenderGraph4_EndLoop>

200008f4 <RenderGraph4_InLoop>:
200008f4:	7814      	ldrb	r4, [r2, #0]
200008f6:	0064      	lsls	r4, r4, #1
200008f8:	5b1d      	ldrh	r5, [r3, r4]
200008fa:	7854      	ldrb	r4, [r2, #1]
200008fc:	0064      	lsls	r4, r4, #1
200008fe:	5b1e      	ldrh	r6, [r3, r4]
20000900:	0436      	lsls	r6, r6, #16
20000902:	4335      	orrs	r5, r6
20000904:	7894      	ldrb	r4, [r2, #2]
20000906:	0064      	lsls	r4, r4, #1
20000908:	5b1e      	ldrh	r6, [r3, r4]
2000090a:	78d4      	ldrb	r4, [r2, #3]
2000090c:	3204      	adds	r2, #4
2000090e:	0064      	lsls	r4, r4, #1
20000910:	5b1f      	ldrh	r7, [r3, r4]
20000912:	043f      	lsls	r7, r7, #16
20000914:	433e      	orrs	r6, r7
20000916:	c060      	stmia	r0!, {r5, r6}
20000918:	3901      	subs	r1, #1
2000091a:	d1eb      	bne.n	200008f4 <RenderGraph4_InLoop>

2000091c <RenderGraph4_EndLoop>:
2000091c:	9e06      	ldr	r6, [sp, #24]
2000091e:	4672      	mov	r2, lr
20000920:	e7cf      	b.n	200008c2 <RenderGraph4_OutLoop>

20000922 <RenderGrad1>:
20000922:	2200      	movs	r2, #0

20000924 <RenderGrad2>:
20000924:	07d2      	lsls	r2, r2, #31
20000926:	0fd2      	lsrs	r2, r2, #31

20000928 <RenderGraph8>:
20000928:	b5f0      	push	{r4, r5, r6, r7, lr}
2000092a:	9c05      	ldr	r4, [sp, #20]
2000092c:	8927      	ldrh	r7, [r4, #8]
2000092e:	2603      	movs	r6, #3
20000930:	43b7      	bics	r7, r6
20000932:	43b1      	bics	r1, r6
20000934:	43b3      	bics	r3, r6
20000936:	8865      	ldrh	r5, [r4, #2]
20000938:	436a      	muls	r2, r5
2000093a:	68e5      	ldr	r5, [r4, #12]
2000093c:	1954      	adds	r4, r2, r5
2000093e:	1862      	adds	r2, r4, r1
20000940:	1a79      	subs	r1, r7, r1
20000942:	421b      	tst	r3, r3
20000944:	d008      	beq.n	20000958 <RenderGraph8+0x30>
20000946:	4299      	cmp	r1, r3
20000948:	d900      	bls.n	2000094c <RenderGraph8+0x24>
2000094a:	4619      	mov	r1, r3
2000094c:	1a5b      	subs	r3, r3, r1
2000094e:	0889      	lsrs	r1, r1, #2
20000950:	c006      	stmia	r0!, {r1, r2}
20000952:	4639      	mov	r1, r7
20000954:	4622      	mov	r2, r4
20000956:	e7f4      	b.n	20000942 <RenderGraph8+0x1a>
20000958:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

2000095c <RenderGraph8Mat>:
2000095c:	b5f0      	push	{r4, r5, r6, r7, lr}
2000095e:	0859      	lsrs	r1, r3, #1
20000960:	4249      	negs	r1, r1
20000962:	468e      	mov	lr, r1
20000964:	089f      	lsrs	r7, r3, #2
20000966:	9c05      	ldr	r4, [sp, #20]
20000968:	8961      	ldrh	r1, [r4, #10]
2000096a:	0849      	lsrs	r1, r1, #1
2000096c:	4249      	negs	r1, r1
2000096e:	1889      	adds	r1, r1, r2
20000970:	468c      	mov	ip, r1
20000972:	8b21      	ldrh	r1, [r4, #24]
20000974:	8b62      	ldrh	r2, [r4, #26]
20000976:	4b2c      	ldr	r3, [pc, #176]	; (20000a28 <RenderGraph8Mat_Interp>)
20000978:	68e6      	ldr	r6, [r4, #12]
2000097a:	611e      	str	r6, [r3, #16]
2000097c:	4e2b      	ldr	r6, [pc, #172]	; (20000a2c <RenderGraph8Mat_Ctrl>)
2000097e:	1a76      	subs	r6, r6, r1
20000980:	014d      	lsls	r5, r1, #5
20000982:	432e      	orrs	r6, r5
20000984:	3901      	subs	r1, #1
20000986:	188d      	adds	r5, r1, r2
20000988:	02ad      	lsls	r5, r5, #10
2000098a:	432e      	orrs	r6, r5
2000098c:	631e      	str	r6, [r3, #48]	; 0x30
2000098e:	4e27      	ldr	r6, [pc, #156]	; (20000a2c <RenderGraph8Mat_Ctrl>)
20000990:	0289      	lsls	r1, r1, #10
20000992:	430e      	orrs	r6, r1
20000994:	62de      	str	r6, [r3, #44]	; 0x2c
20000996:	6964      	ldr	r4, [r4, #20]
20000998:	6825      	ldr	r5, [r4, #0]
2000099a:	609d      	str	r5, [r3, #8]
2000099c:	68e6      	ldr	r6, [r4, #12]
2000099e:	60de      	str	r6, [r3, #12]
200009a0:	4672      	mov	r2, lr
200009a2:	4355      	muls	r5, r2
200009a4:	4372      	muls	r2, r6
200009a6:	6861      	ldr	r1, [r4, #4]
200009a8:	4666      	mov	r6, ip
200009aa:	4371      	muls	r1, r6
200009ac:	186d      	adds	r5, r5, r1
200009ae:	68a1      	ldr	r1, [r4, #8]
200009b0:	186d      	adds	r5, r5, r1
200009b2:	601d      	str	r5, [r3, #0]
200009b4:	6921      	ldr	r1, [r4, #16]
200009b6:	4371      	muls	r1, r6
200009b8:	1852      	adds	r2, r2, r1
200009ba:	6961      	ldr	r1, [r4, #20]
200009bc:	1852      	adds	r2, r2, r1
200009be:	605a      	str	r2, [r3, #4]
200009c0:	087f      	lsrs	r7, r7, #1
200009c2:	d30e      	bcc.n	200009e2 <RenderGraph8Mat+0x86>
200009c4:	69dc      	ldr	r4, [r3, #28]
200009c6:	7826      	ldrb	r6, [r4, #0]
200009c8:	69dc      	ldr	r4, [r3, #28]
200009ca:	7825      	ldrb	r5, [r4, #0]
200009cc:	022d      	lsls	r5, r5, #8
200009ce:	432e      	orrs	r6, r5
200009d0:	69dc      	ldr	r4, [r3, #28]
200009d2:	7825      	ldrb	r5, [r4, #0]
200009d4:	042d      	lsls	r5, r5, #16
200009d6:	432e      	orrs	r6, r5
200009d8:	69dc      	ldr	r4, [r3, #28]
200009da:	7825      	ldrb	r5, [r4, #0]
200009dc:	062d      	lsls	r5, r5, #24
200009de:	432e      	orrs	r6, r5
200009e0:	c040      	stmia	r0!, {r6}
200009e2:	423f      	tst	r7, r7
200009e4:	d01e      	beq.n	20000a24 <RenderGraph8Mat+0xc8>
200009e6:	69dc      	ldr	r4, [r3, #28]
200009e8:	7821      	ldrb	r1, [r4, #0]
200009ea:	69dc      	ldr	r4, [r3, #28]
200009ec:	7824      	ldrb	r4, [r4, #0]
200009ee:	0224      	lsls	r4, r4, #8
200009f0:	4321      	orrs	r1, r4
200009f2:	69dc      	ldr	r4, [r3, #28]
200009f4:	7824      	ldrb	r4, [r4, #0]
200009f6:	0424      	lsls	r4, r4, #16
200009f8:	4321      	orrs	r1, r4
200009fa:	69dc      	ldr	r4, [r3, #28]
200009fc:	7824      	ldrb	r4, [r4, #0]
200009fe:	0624      	lsls	r4, r4, #24
20000a00:	4321      	orrs	r1, r4
20000a02:	69dc      	ldr	r4, [r3, #28]
20000a04:	7822      	ldrb	r2, [r4, #0]
20000a06:	69dc      	ldr	r4, [r3, #28]
20000a08:	7824      	ldrb	r4, [r4, #0]
20000a0a:	0224      	lsls	r4, r4, #8
20000a0c:	4322      	orrs	r2, r4
20000a0e:	69dc      	ldr	r4, [r3, #28]
20000a10:	7824      	ldrb	r4, [r4, #0]
20000a12:	0424      	lsls	r4, r4, #16
20000a14:	4322      	orrs	r2, r4
20000a16:	69dc      	ldr	r4, [r3, #28]
20000a18:	7824      	ldrb	r4, [r4, #0]
20000a1a:	0624      	lsls	r4, r4, #24
20000a1c:	4322      	orrs	r2, r4
20000a1e:	c006      	stmia	r0!, {r1, r2}
20000a20:	3f01      	subs	r7, #1
20000a22:	d1e0      	bne.n	200009e6 <RenderGraph8Mat+0x8a>
20000a24:	bdf0      	pop	{r4, r5, r6, r7, pc}
20000a26:	46c0      	nop			; (mov r8, r8)

20000a28 <RenderGraph8Mat_Interp>:
20000a28:	d00000c0 	.word	0xd00000c0

20000a2c <RenderGraph8Mat_Ctrl>:
20000a2c:	0004000c 	.word	0x0004000c

20000a30 <RenderGraph8Persp>:
20000a30:	b5f0      	push	{r4, r5, r6, r7, lr}
20000a32:	9c05      	ldr	r4, [sp, #20]
20000a34:	8961      	ldrh	r1, [r4, #10]
20000a36:	1a52      	subs	r2, r2, r1
20000a38:	4694      	mov	ip, r2
20000a3a:	030e      	lsls	r6, r1, #12
20000a3c:	4d38      	ldr	r5, [pc, #224]	; (20000b20 <RenderGraph8Persp_pSioBase>)
20000a3e:	662e      	str	r6, [r5, #96]	; 0x60
20000a40:	8a66      	ldrh	r6, [r4, #18]
20000a42:	1852      	adds	r2, r2, r1
20000a44:	18b6      	adds	r6, r6, r2
20000a46:	3601      	adds	r6, #1
20000a48:	666e      	str	r6, [r5, #100]	; 0x64
20000a4a:	085d      	lsrs	r5, r3, #1
20000a4c:	426d      	negs	r5, r5
20000a4e:	46ae      	mov	lr, r5
20000a50:	089f      	lsrs	r7, r3, #2
20000a52:	8b21      	ldrh	r1, [r4, #24]
20000a54:	8b62      	ldrh	r2, [r4, #26]
20000a56:	4b33      	ldr	r3, [pc, #204]	; (20000b24 <RenderGraph8Persp_Interp>)
20000a58:	68e6      	ldr	r6, [r4, #12]
20000a5a:	611e      	str	r6, [r3, #16]
20000a5c:	4e32      	ldr	r6, [pc, #200]	; (20000b28 <RenderGraph8Persp_Ctrl>)
20000a5e:	1a76      	subs	r6, r6, r1
20000a60:	014d      	lsls	r5, r1, #5
20000a62:	432e      	orrs	r6, r5
20000a64:	3901      	subs	r1, #1
20000a66:	188d      	adds	r5, r1, r2
20000a68:	02ad      	lsls	r5, r5, #10
20000a6a:	432e      	orrs	r6, r5
20000a6c:	631e      	str	r6, [r3, #48]	; 0x30
20000a6e:	4e2e      	ldr	r6, [pc, #184]	; (20000b28 <RenderGraph8Persp_Ctrl>)
20000a70:	0289      	lsls	r1, r1, #10
20000a72:	430e      	orrs	r6, r1
20000a74:	62de      	str	r6, [r3, #44]	; 0x2c
20000a76:	6964      	ldr	r4, [r4, #20]
20000a78:	4929      	ldr	r1, [pc, #164]	; (20000b20 <RenderGraph8Persp_pSioBase>)
20000a7a:	6f09      	ldr	r1, [r1, #112]	; 0x70
20000a7c:	6825      	ldr	r5, [r4, #0]
20000a7e:	434d      	muls	r5, r1
20000a80:	132d      	asrs	r5, r5, #12
20000a82:	609d      	str	r5, [r3, #8]
20000a84:	68e6      	ldr	r6, [r4, #12]
20000a86:	434e      	muls	r6, r1
20000a88:	1336      	asrs	r6, r6, #12
20000a8a:	60de      	str	r6, [r3, #12]
20000a8c:	4672      	mov	r2, lr
20000a8e:	4355      	muls	r5, r2
20000a90:	4372      	muls	r2, r6
20000a92:	468e      	mov	lr, r1
20000a94:	6866      	ldr	r6, [r4, #4]
20000a96:	4371      	muls	r1, r6
20000a98:	1309      	asrs	r1, r1, #12
20000a9a:	4666      	mov	r6, ip
20000a9c:	4371      	muls	r1, r6
20000a9e:	186d      	adds	r5, r5, r1
20000aa0:	68a1      	ldr	r1, [r4, #8]
20000aa2:	186d      	adds	r5, r5, r1
20000aa4:	601d      	str	r5, [r3, #0]
20000aa6:	6921      	ldr	r1, [r4, #16]
20000aa8:	4675      	mov	r5, lr
20000aaa:	4369      	muls	r1, r5
20000aac:	1309      	asrs	r1, r1, #12
20000aae:	4371      	muls	r1, r6
20000ab0:	1852      	adds	r2, r2, r1
20000ab2:	6961      	ldr	r1, [r4, #20]
20000ab4:	1852      	adds	r2, r2, r1
20000ab6:	605a      	str	r2, [r3, #4]
20000ab8:	087f      	lsrs	r7, r7, #1
20000aba:	d30e      	bcc.n	20000ada <RenderGraph8Persp+0xaa>
20000abc:	69dc      	ldr	r4, [r3, #28]
20000abe:	7826      	ldrb	r6, [r4, #0]
20000ac0:	69dc      	ldr	r4, [r3, #28]
20000ac2:	7825      	ldrb	r5, [r4, #0]
20000ac4:	022d      	lsls	r5, r5, #8
20000ac6:	432e      	orrs	r6, r5
20000ac8:	69dc      	ldr	r4, [r3, #28]
20000aca:	7825      	ldrb	r5, [r4, #0]
20000acc:	042d      	lsls	r5, r5, #16
20000ace:	432e      	orrs	r6, r5
20000ad0:	69dc      	ldr	r4, [r3, #28]
20000ad2:	7825      	ldrb	r5, [r4, #0]
20000ad4:	062d      	lsls	r5, r5, #24
20000ad6:	432e      	orrs	r6, r5
20000ad8:	c040      	stmia	r0!, {r6}
20000ada:	423f      	tst	r7, r7
20000adc:	d01e      	beq.n	20000b1c <RenderGraph8Persp+0xec>
20000ade:	69dc      	ldr	r4, [r3, #28]
20000ae0:	7821      	ldrb	r1, [r4, #0]
20000ae2:	69dc      	ldr	r4, [r3, #28]
20000ae4:	7824      	ldrb	r4, [r4, #0]
20000ae6:	0224      	lsls	r4, r4, #8
20000ae8:	4321      	orrs	r1, r4
20000aea:	69dc      	ldr	r4, [r3, #28]
20000aec:	7824      	ldrb	r4, [r4, #0]
20000aee:	0424      	lsls	r4, r4, #16
20000af0:	4321      	orrs	r1, r4
20000af2:	69dc      	ldr	r4, [r3, #28]
20000af4:	7824      	ldrb	r4, [r4, #0]
20000af6:	0624      	lsls	r4, r4, #24
20000af8:	4321      	orrs	r1, r4
20000afa:	69dc      	ldr	r4, [r3, #28]
20000afc:	7822      	ldrb	r2, [r4, #0]
20000afe:	69dc      	ldr	r4, [r3, #28]
20000b00:	7824      	ldrb	r4, [r4, #0]
20000b02:	0224      	lsls	r4, r4, #8
20000b04:	4322      	orrs	r2, r4
20000b06:	69dc      	ldr	r4, [r3, #28]
20000b08:	7824      	ldrb	r4, [r4, #0]
20000b0a:	0424      	lsls	r4, r4, #16
20000b0c:	4322      	orrs	r2, r4
20000b0e:	69dc      	ldr	r4, [r3, #28]
20000b10:	7824      	ldrb	r4, [r4, #0]
20000b12:	0624      	lsls	r4, r4, #24
20000b14:	4322      	orrs	r2, r4
20000b16:	c006      	stmia	r0!, {r1, r2}
20000b18:	3f01      	subs	r7, #1
20000b1a:	d1e0      	bne.n	20000ade <RenderGraph8Persp+0xae>
20000b1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
20000b1e:	46c0      	nop			; (mov r8, r8)

20000b20 <RenderGraph8Persp_pSioBase>:
20000b20:	d0000000 	.word	0xd0000000

20000b24 <RenderGraph8Persp_Interp>:
20000b24:	d00000c0 	.word	0xd00000c0

20000b28 <RenderGraph8Persp_Ctrl>:
20000b28:	0004000c 	.word	0x0004000c

20000b2c <RenderGText>:
20000b2c:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
20000b2e:	4644      	mov	r4, r8
20000b30:	b410      	push	{r4}
20000b32:	9c09      	ldr	r4, [sp, #36]	; 0x24
20000b34:	4e3a      	ldr	r6, [pc, #232]	; (20000c20 <RenderGText_pSioBase>)
20000b36:	6632      	str	r2, [r6, #96]	; 0x60
20000b38:	8a62      	ldrh	r2, [r4, #18]
20000b3a:	6672      	str	r2, [r6, #100]	; 0x64
20000b3c:	8925      	ldrh	r5, [r4, #8]
20000b3e:	2703      	movs	r7, #3
20000b40:	43bd      	bics	r5, r7
20000b42:	9509      	str	r5, [sp, #36]	; 0x24
20000b44:	43b9      	bics	r1, r7
20000b46:	43bb      	bics	r3, r7
20000b48:	9303      	str	r3, [sp, #12]
20000b4a:	6f75      	ldr	r5, [r6, #116]	; 0x74
20000b4c:	6f32      	ldr	r2, [r6, #112]	; 0x70
20000b4e:	022d      	lsls	r5, r5, #8
20000b50:	6963      	ldr	r3, [r4, #20]
20000b52:	442b      	add	r3, r5
20000b54:	4698      	mov	r8, r3
20000b56:	8865      	ldrh	r5, [r4, #2]
20000b58:	436a      	muls	r2, r5
20000b5a:	68e5      	ldr	r5, [r4, #12]
20000b5c:	442a      	add	r2, r5
20000b5e:	9202      	str	r2, [sp, #8]
20000b60:	69a3      	ldr	r3, [r4, #24]
20000b62:	9301      	str	r3, [sp, #4]
20000b64:	440b      	add	r3, r1
20000b66:	08ce      	lsrs	r6, r1, #3
20000b68:	4432      	add	r2, r6
20000b6a:	7ca4      	ldrb	r4, [r4, #18]
20000b6c:	0225      	lsls	r5, r4, #8
20000b6e:	4325      	orrs	r5, r4
20000b70:	042c      	lsls	r4, r5, #16
20000b72:	432c      	orrs	r4, r5
20000b74:	4d29      	ldr	r5, [pc, #164]	; (20000c1c <RenderGText_Addr>)
20000b76:	46ae      	mov	lr, r5
20000b78:	074e      	lsls	r6, r1, #29
20000b7a:	d515      	bpl.n	20000ba8 <RenderGText+0x7c>
20000b7c:	7815      	ldrb	r5, [r2, #0]
20000b7e:	3201      	adds	r2, #1
20000b80:	4445      	add	r5, r8
20000b82:	782d      	ldrb	r5, [r5, #0]
20000b84:	cb40      	ldmia	r3!, {r6}
20000b86:	4066      	eors	r6, r4
20000b88:	00ed      	lsls	r5, r5, #3
20000b8a:	4475      	add	r5, lr
20000b8c:	686f      	ldr	r7, [r5, #4]
20000b8e:	4037      	ands	r7, r6
20000b90:	4067      	eors	r7, r4
20000b92:	c080      	stmia	r0!, {r7}
20000b94:	3104      	adds	r1, #4
20000b96:	9f09      	ldr	r7, [sp, #36]	; 0x24
20000b98:	42b9      	cmp	r1, r7
20000b9a:	d302      	bcc.n	20000ba2 <RenderGText+0x76>
20000b9c:	2100      	movs	r1, #0
20000b9e:	9a02      	ldr	r2, [sp, #8]
20000ba0:	9b01      	ldr	r3, [sp, #4]
20000ba2:	9f03      	ldr	r7, [sp, #12]
20000ba4:	3f04      	subs	r7, #4
20000ba6:	9703      	str	r7, [sp, #12]
20000ba8:	9f09      	ldr	r7, [sp, #36]	; 0x24
20000baa:	1a7f      	subs	r7, r7, r1

20000bac <RenderGText_OutLoop>:
20000bac:	9e03      	ldr	r6, [sp, #12]
20000bae:	42b7      	cmp	r7, r6
20000bb0:	d900      	bls.n	20000bb4 <RenderGText_OutLoop+0x8>
20000bb2:	4637      	mov	r7, r6
20000bb4:	2f08      	cmp	r7, #8
20000bb6:	d214      	bcs.n	20000be2 <RenderGText_Last+0x26>
20000bb8:	2f04      	cmp	r7, #4
20000bba:	d30f      	bcc.n	20000bdc <RenderGText_Last+0x20>

20000bbc <RenderGText_Last>:
20000bbc:	7815      	ldrb	r5, [r2, #0]
20000bbe:	3201      	adds	r2, #1
20000bc0:	4445      	add	r5, r8
20000bc2:	782d      	ldrb	r5, [r5, #0]
20000bc4:	cb40      	ldmia	r3!, {r6}
20000bc6:	4066      	eors	r6, r4
20000bc8:	00ed      	lsls	r5, r5, #3
20000bca:	4475      	add	r5, lr
20000bcc:	6829      	ldr	r1, [r5, #0]
20000bce:	4031      	ands	r1, r6
20000bd0:	4061      	eors	r1, r4
20000bd2:	c002      	stmia	r0!, {r1}
20000bd4:	9a02      	ldr	r2, [sp, #8]
20000bd6:	9b01      	ldr	r3, [sp, #4]
20000bd8:	2f04      	cmp	r7, #4
20000bda:	d8e7      	bhi.n	20000bac <RenderGText_OutLoop>
20000bdc:	bc10      	pop	{r4}
20000bde:	46a0      	mov	r8, r4
20000be0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
20000be2:	08b9      	lsrs	r1, r7, #2
20000be4:	008d      	lsls	r5, r1, #2
20000be6:	1b76      	subs	r6, r6, r5
20000be8:	9603      	str	r6, [sp, #12]
20000bea:	3901      	subs	r1, #1

20000bec <RenderGText_InLoop>:
20000bec:	7817      	ldrb	r7, [r2, #0]
20000bee:	3201      	adds	r2, #1
20000bf0:	4447      	add	r7, r8
20000bf2:	783f      	ldrb	r7, [r7, #0]
20000bf4:	cb40      	ldmia	r3!, {r6}
20000bf6:	4066      	eors	r6, r4
20000bf8:	00ff      	lsls	r7, r7, #3
20000bfa:	4477      	add	r7, lr
20000bfc:	683d      	ldr	r5, [r7, #0]
20000bfe:	4035      	ands	r5, r6
20000c00:	4065      	eors	r5, r4
20000c02:	cb40      	ldmia	r3!, {r6}
20000c04:	4066      	eors	r6, r4
20000c06:	687f      	ldr	r7, [r7, #4]
20000c08:	4037      	ands	r7, r6
20000c0a:	4067      	eors	r7, r4
20000c0c:	c0a0      	stmia	r0!, {r5, r7}
20000c0e:	3902      	subs	r1, #2
20000c10:	d8ec      	bhi.n	20000bec <RenderGText_InLoop>
20000c12:	9f09      	ldr	r7, [sp, #36]	; 0x24
20000c14:	d0d2      	beq.n	20000bbc <RenderGText_Last>
20000c16:	9a02      	ldr	r2, [sp, #8]
20000c18:	9b01      	ldr	r3, [sp, #4]
20000c1a:	e7c7      	b.n	20000bac <RenderGText_OutLoop>

20000c1c <RenderGText_Addr>:
20000c1c:	2000642c 	.word	0x2000642c

20000c20 <RenderGText_pSioBase>:
20000c20:	d0000000 	.word	0xd0000000

20000c24 <RenderLevel>:
20000c24:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
20000c26:	9c08      	ldr	r4, [sp, #32]
20000c28:	8925      	ldrh	r5, [r4, #8]
20000c2a:	2703      	movs	r7, #3
20000c2c:	43bd      	bics	r5, r7
20000c2e:	9508      	str	r5, [sp, #32]
20000c30:	43b9      	bics	r1, r7
20000c32:	43bb      	bics	r3, r7
20000c34:	9302      	str	r3, [sp, #8]
20000c36:	8965      	ldrh	r5, [r4, #10]
20000c38:	3d01      	subs	r5, #1
20000c3a:	1aad      	subs	r5, r5, r2
20000c3c:	7e23      	ldrb	r3, [r4, #24]
20000c3e:	9300      	str	r3, [sp, #0]
20000c40:	68e2      	ldr	r2, [r4, #12]
20000c42:	9201      	str	r2, [sp, #4]
20000c44:	440a      	add	r2, r1
20000c46:	7d66      	ldrb	r6, [r4, #21]
20000c48:	0233      	lsls	r3, r6, #8
20000c4a:	4333      	orrs	r3, r6
20000c4c:	041e      	lsls	r6, r3, #16
20000c4e:	431e      	orrs	r6, r3
20000c50:	7d24      	ldrb	r4, [r4, #20]
20000c52:	0223      	lsls	r3, r4, #8
20000c54:	4323      	orrs	r3, r4
20000c56:	041c      	lsls	r4, r3, #16
20000c58:	431c      	orrs	r4, r3
20000c5a:	4066      	eors	r6, r4
20000c5c:	4b4c      	ldr	r3, [pc, #304]	; (20000d90 <RenderLevel_Addr>)
20000c5e:	469e      	mov	lr, r3
20000c60:	9f08      	ldr	r7, [sp, #32]
20000c62:	1a7f      	subs	r7, r7, r1
20000c64:	2f04      	cmp	r7, #4
20000c66:	d801      	bhi.n	20000c6c <RenderLevel_OutLoop>
20000c68:	9f08      	ldr	r7, [sp, #32]
20000c6a:	e007      	b.n	20000c7c <RenderLevel_Last>

20000c6c <RenderLevel_OutLoop>:
20000c6c:	9b02      	ldr	r3, [sp, #8]
20000c6e:	429f      	cmp	r7, r3
20000c70:	d900      	bls.n	20000c74 <RenderLevel_OutLoop+0x8>
20000c72:	461f      	mov	r7, r3
20000c74:	2f08      	cmp	r7, #8
20000c76:	d231      	bcs.n	20000cdc <RenderLevel_Last2+0x30>
20000c78:	2f04      	cmp	r7, #4
20000c7a:	d32e      	bcc.n	20000cda <RenderLevel_Last2+0x2e>

20000c7c <RenderLevel_Last>:
20000c7c:	9b00      	ldr	r3, [sp, #0]
20000c7e:	429d      	cmp	r5, r3
20000c80:	d314      	bcc.n	20000cac <RenderLevel_Last2>
20000c82:	2100      	movs	r1, #0
20000c84:	7813      	ldrb	r3, [r2, #0]
20000c86:	42ab      	cmp	r3, r5
20000c88:	4149      	adcs	r1, r1
20000c8a:	7853      	ldrb	r3, [r2, #1]
20000c8c:	42ab      	cmp	r3, r5
20000c8e:	4149      	adcs	r1, r1
20000c90:	7893      	ldrb	r3, [r2, #2]
20000c92:	42ab      	cmp	r3, r5
20000c94:	4149      	adcs	r1, r1
20000c96:	78d3      	ldrb	r3, [r2, #3]
20000c98:	42ab      	cmp	r3, r5
20000c9a:	4149      	adcs	r1, r1
20000c9c:	3204      	adds	r2, #4
20000c9e:	00c9      	lsls	r1, r1, #3
20000ca0:	4471      	add	r1, lr
20000ca2:	6849      	ldr	r1, [r1, #4]
20000ca4:	4031      	ands	r1, r6
20000ca6:	4061      	eors	r1, r4
20000ca8:	c002      	stmia	r0!, {r1}
20000caa:	e013      	b.n	20000cd4 <RenderLevel_Last2+0x28>

20000cac <RenderLevel_Last2>:
20000cac:	2100      	movs	r1, #0
20000cae:	7813      	ldrb	r3, [r2, #0]
20000cb0:	429d      	cmp	r5, r3
20000cb2:	4149      	adcs	r1, r1
20000cb4:	7853      	ldrb	r3, [r2, #1]
20000cb6:	429d      	cmp	r5, r3
20000cb8:	4149      	adcs	r1, r1
20000cba:	7893      	ldrb	r3, [r2, #2]
20000cbc:	429d      	cmp	r5, r3
20000cbe:	4149      	adcs	r1, r1
20000cc0:	78d3      	ldrb	r3, [r2, #3]
20000cc2:	429d      	cmp	r5, r3
20000cc4:	4149      	adcs	r1, r1
20000cc6:	3204      	adds	r2, #4
20000cc8:	00c9      	lsls	r1, r1, #3
20000cca:	4471      	add	r1, lr
20000ccc:	6849      	ldr	r1, [r1, #4]
20000cce:	4031      	ands	r1, r6
20000cd0:	4061      	eors	r1, r4
20000cd2:	c002      	stmia	r0!, {r1}
20000cd4:	9a01      	ldr	r2, [sp, #4]
20000cd6:	2f04      	cmp	r7, #4
20000cd8:	d8c8      	bhi.n	20000c6c <RenderLevel_OutLoop>
20000cda:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
20000cdc:	08b9      	lsrs	r1, r7, #2
20000cde:	008f      	lsls	r7, r1, #2
20000ce0:	1bdb      	subs	r3, r3, r7
20000ce2:	9302      	str	r3, [sp, #8]
20000ce4:	3901      	subs	r1, #1
20000ce6:	9b00      	ldr	r3, [sp, #0]
20000ce8:	429d      	cmp	r5, r3
20000cea:	d328      	bcc.n	20000d3e <RenderLevel_InLoopBot>

20000cec <RenderLevel_InLoopTop>:
20000cec:	2700      	movs	r7, #0
20000cee:	7813      	ldrb	r3, [r2, #0]
20000cf0:	42ab      	cmp	r3, r5
20000cf2:	417f      	adcs	r7, r7
20000cf4:	7853      	ldrb	r3, [r2, #1]
20000cf6:	42ab      	cmp	r3, r5
20000cf8:	417f      	adcs	r7, r7
20000cfa:	7893      	ldrb	r3, [r2, #2]
20000cfc:	42ab      	cmp	r3, r5
20000cfe:	417f      	adcs	r7, r7
20000d00:	78d3      	ldrb	r3, [r2, #3]
20000d02:	42ab      	cmp	r3, r5
20000d04:	417f      	adcs	r7, r7
20000d06:	7913      	ldrb	r3, [r2, #4]
20000d08:	42ab      	cmp	r3, r5
20000d0a:	417f      	adcs	r7, r7
20000d0c:	7953      	ldrb	r3, [r2, #5]
20000d0e:	42ab      	cmp	r3, r5
20000d10:	417f      	adcs	r7, r7
20000d12:	7993      	ldrb	r3, [r2, #6]
20000d14:	42ab      	cmp	r3, r5
20000d16:	417f      	adcs	r7, r7
20000d18:	79d3      	ldrb	r3, [r2, #7]
20000d1a:	42ab      	cmp	r3, r5
20000d1c:	417f      	adcs	r7, r7
20000d1e:	3208      	adds	r2, #8
20000d20:	00ff      	lsls	r7, r7, #3
20000d22:	4477      	add	r7, lr
20000d24:	683b      	ldr	r3, [r7, #0]
20000d26:	4033      	ands	r3, r6
20000d28:	4063      	eors	r3, r4
20000d2a:	687f      	ldr	r7, [r7, #4]
20000d2c:	4037      	ands	r7, r6
20000d2e:	4067      	eors	r7, r4
20000d30:	c088      	stmia	r0!, {r3, r7}
20000d32:	3902      	subs	r1, #2
20000d34:	d8da      	bhi.n	20000cec <RenderLevel_InLoopTop>
20000d36:	9f08      	ldr	r7, [sp, #32]
20000d38:	d0a0      	beq.n	20000c7c <RenderLevel_Last>
20000d3a:	9a01      	ldr	r2, [sp, #4]
20000d3c:	e796      	b.n	20000c6c <RenderLevel_OutLoop>

20000d3e <RenderLevel_InLoopBot>:
20000d3e:	2700      	movs	r7, #0
20000d40:	7813      	ldrb	r3, [r2, #0]
20000d42:	429d      	cmp	r5, r3
20000d44:	417f      	adcs	r7, r7
20000d46:	7853      	ldrb	r3, [r2, #1]
20000d48:	429d      	cmp	r5, r3
20000d4a:	417f      	adcs	r7, r7
20000d4c:	7893      	ldrb	r3, [r2, #2]
20000d4e:	429d      	cmp	r5, r3
20000d50:	417f      	adcs	r7, r7
20000d52:	78d3      	ldrb	r3, [r2, #3]
20000d54:	429d      	cmp	r5, r3
20000d56:	417f      	adcs	r7, r7
20000d58:	7913      	ldrb	r3, [r2, #4]
20000d5a:	429d      	cmp	r5, r3
20000d5c:	417f      	adcs	r7, r7
20000d5e:	7953      	ldrb	r3, [r2, #5]
20000d60:	429d      	cmp	r5, r3
20000d62:	417f      	adcs	r7, r7
20000d64:	7993      	ldrb	r3, [r2, #6]
20000d66:	429d      	cmp	r5, r3
20000d68:	417f      	adcs	r7, r7
20000d6a:	79d3      	ldrb	r3, [r2, #7]
20000d6c:	429d      	cmp	r5, r3
20000d6e:	417f      	adcs	r7, r7
20000d70:	3208      	adds	r2, #8
20000d72:	00ff      	lsls	r7, r7, #3
20000d74:	4477      	add	r7, lr
20000d76:	683b      	ldr	r3, [r7, #0]
20000d78:	4033      	ands	r3, r6
20000d7a:	4063      	eors	r3, r4
20000d7c:	687f      	ldr	r7, [r7, #4]
20000d7e:	4037      	ands	r7, r6
20000d80:	4067      	eors	r7, r4
20000d82:	c088      	stmia	r0!, {r3, r7}
20000d84:	3902      	subs	r1, #2
20000d86:	d8da      	bhi.n	20000d3e <RenderLevel_InLoopBot>
20000d88:	9f08      	ldr	r7, [sp, #32]
20000d8a:	d0d5      	beq.n	20000d38 <RenderLevel_InLoopTop+0x4c>
20000d8c:	9a01      	ldr	r2, [sp, #4]
20000d8e:	e76d      	b.n	20000c6c <RenderLevel_OutLoop>

20000d90 <RenderLevel_Addr>:
20000d90:	2000642c 	.word	0x2000642c

20000d94 <RenderLevelGrad>:
20000d94:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
20000d96:	9c08      	ldr	r4, [sp, #32]
20000d98:	8925      	ldrh	r5, [r4, #8]
20000d9a:	2703      	movs	r7, #3
20000d9c:	43bd      	bics	r5, r7
20000d9e:	9508      	str	r5, [sp, #32]
20000da0:	43b9      	bics	r1, r7
20000da2:	43bb      	bics	r3, r7
20000da4:	9302      	str	r3, [sp, #8]
20000da6:	8965      	ldrh	r5, [r4, #10]
20000da8:	3d01      	subs	r5, #1
20000daa:	1aad      	subs	r5, r5, r2
20000dac:	68e2      	ldr	r2, [r4, #12]
20000dae:	9201      	str	r2, [sp, #4]
20000db0:	440a      	add	r2, r1
20000db2:	6966      	ldr	r6, [r4, #20]
20000db4:	5d76      	ldrb	r6, [r6, r5]
20000db6:	0233      	lsls	r3, r6, #8
20000db8:	4333      	orrs	r3, r6
20000dba:	041e      	lsls	r6, r3, #16
20000dbc:	431e      	orrs	r6, r3
20000dbe:	69a4      	ldr	r4, [r4, #24]
20000dc0:	5d64      	ldrb	r4, [r4, r5]
20000dc2:	0223      	lsls	r3, r4, #8
20000dc4:	4323      	orrs	r3, r4
20000dc6:	041c      	lsls	r4, r3, #16
20000dc8:	431c      	orrs	r4, r3
20000dca:	4066      	eors	r6, r4
20000dcc:	4b2a      	ldr	r3, [pc, #168]	; (20000e78 <RenderLevelGrad_Addr>)
20000dce:	469e      	mov	lr, r3
20000dd0:	9f08      	ldr	r7, [sp, #32]
20000dd2:	1a7f      	subs	r7, r7, r1
20000dd4:	2f04      	cmp	r7, #4
20000dd6:	d801      	bhi.n	20000ddc <RenderLevelGrad_OutLoop>
20000dd8:	9f08      	ldr	r7, [sp, #32]
20000dda:	e007      	b.n	20000dec <RenderLevelGrad_Last>

20000ddc <RenderLevelGrad_OutLoop>:
20000ddc:	9b02      	ldr	r3, [sp, #8]
20000dde:	429f      	cmp	r7, r3
20000de0:	d900      	bls.n	20000de4 <RenderLevelGrad_OutLoop+0x8>
20000de2:	461f      	mov	r7, r3
20000de4:	2f08      	cmp	r7, #8
20000de6:	d219      	bcs.n	20000e1c <RenderLevelGrad_Last+0x30>
20000de8:	2f04      	cmp	r7, #4
20000dea:	d316      	bcc.n	20000e1a <RenderLevelGrad_Last+0x2e>

20000dec <RenderLevelGrad_Last>:
20000dec:	2100      	movs	r1, #0
20000dee:	7813      	ldrb	r3, [r2, #0]
20000df0:	42ab      	cmp	r3, r5
20000df2:	4149      	adcs	r1, r1
20000df4:	7853      	ldrb	r3, [r2, #1]
20000df6:	42ab      	cmp	r3, r5
20000df8:	4149      	adcs	r1, r1
20000dfa:	7893      	ldrb	r3, [r2, #2]
20000dfc:	42ab      	cmp	r3, r5
20000dfe:	4149      	adcs	r1, r1
20000e00:	78d3      	ldrb	r3, [r2, #3]
20000e02:	42ab      	cmp	r3, r5
20000e04:	4149      	adcs	r1, r1
20000e06:	3204      	adds	r2, #4
20000e08:	00c9      	lsls	r1, r1, #3
20000e0a:	4471      	add	r1, lr
20000e0c:	6849      	ldr	r1, [r1, #4]
20000e0e:	4031      	ands	r1, r6
20000e10:	4061      	eors	r1, r4
20000e12:	c002      	stmia	r0!, {r1}
20000e14:	9a01      	ldr	r2, [sp, #4]
20000e16:	2f04      	cmp	r7, #4
20000e18:	d8e0      	bhi.n	20000ddc <RenderLevelGrad_OutLoop>
20000e1a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
20000e1c:	08b9      	lsrs	r1, r7, #2
20000e1e:	008f      	lsls	r7, r1, #2
20000e20:	1bdb      	subs	r3, r3, r7
20000e22:	9302      	str	r3, [sp, #8]
20000e24:	3901      	subs	r1, #1

20000e26 <RenderLevelGrad_InLoopTop>:
20000e26:	2700      	movs	r7, #0
20000e28:	7813      	ldrb	r3, [r2, #0]
20000e2a:	42ab      	cmp	r3, r5
20000e2c:	417f      	adcs	r7, r7
20000e2e:	7853      	ldrb	r3, [r2, #1]
20000e30:	42ab      	cmp	r3, r5
20000e32:	417f      	adcs	r7, r7
20000e34:	7893      	ldrb	r3, [r2, #2]
20000e36:	42ab      	cmp	r3, r5
20000e38:	417f      	adcs	r7, r7
20000e3a:	78d3      	ldrb	r3, [r2, #3]
20000e3c:	42ab      	cmp	r3, r5
20000e3e:	417f      	adcs	r7, r7
20000e40:	7913      	ldrb	r3, [r2, #4]
20000e42:	42ab      	cmp	r3, r5
20000e44:	417f      	adcs	r7, r7
20000e46:	7953      	ldrb	r3, [r2, #5]
20000e48:	42ab      	cmp	r3, r5
20000e4a:	417f      	adcs	r7, r7
20000e4c:	7993      	ldrb	r3, [r2, #6]
20000e4e:	42ab      	cmp	r3, r5
20000e50:	417f      	adcs	r7, r7
20000e52:	79d3      	ldrb	r3, [r2, #7]
20000e54:	42ab      	cmp	r3, r5
20000e56:	417f      	adcs	r7, r7
20000e58:	3208      	adds	r2, #8
20000e5a:	00ff      	lsls	r7, r7, #3
20000e5c:	4477      	add	r7, lr
20000e5e:	683b      	ldr	r3, [r7, #0]
20000e60:	4033      	ands	r3, r6
20000e62:	4063      	eors	r3, r4
20000e64:	687f      	ldr	r7, [r7, #4]
20000e66:	4037      	ands	r7, r6
20000e68:	4067      	eors	r7, r4
20000e6a:	c088      	stmia	r0!, {r3, r7}
20000e6c:	3902      	subs	r1, #2
20000e6e:	d8da      	bhi.n	20000e26 <RenderLevelGrad_InLoopTop>
20000e70:	9f08      	ldr	r7, [sp, #32]
20000e72:	d0bb      	beq.n	20000dec <RenderLevelGrad_Last>
20000e74:	9a01      	ldr	r2, [sp, #4]
20000e76:	e7b1      	b.n	20000ddc <RenderLevelGrad_OutLoop>

20000e78 <RenderLevelGrad_Addr>:
20000e78:	2000642c 	.word	0x2000642c

20000e7c <RenderMText>:
20000e7c:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
20000e7e:	9c08      	ldr	r4, [sp, #32]
20000e80:	4e34      	ldr	r6, [pc, #208]	; (20000f54 <RenderMText_pSioBase>)
20000e82:	6632      	str	r2, [r6, #96]	; 0x60
20000e84:	8a62      	ldrh	r2, [r4, #18]
20000e86:	6672      	str	r2, [r6, #100]	; 0x64
20000e88:	8925      	ldrh	r5, [r4, #8]
20000e8a:	2703      	movs	r7, #3
20000e8c:	43bd      	bics	r5, r7
20000e8e:	9508      	str	r5, [sp, #32]
20000e90:	43b9      	bics	r1, r7
20000e92:	43bb      	bics	r3, r7
20000e94:	9302      	str	r3, [sp, #8]
20000e96:	6f75      	ldr	r5, [r6, #116]	; 0x74
20000e98:	6f32      	ldr	r2, [r6, #112]	; 0x70
20000e9a:	022d      	lsls	r5, r5, #8
20000e9c:	6963      	ldr	r3, [r4, #20]
20000e9e:	442b      	add	r3, r5
20000ea0:	8865      	ldrh	r5, [r4, #2]
20000ea2:	436a      	muls	r2, r5
20000ea4:	68e5      	ldr	r5, [r4, #12]
20000ea6:	442a      	add	r2, r5
20000ea8:	9201      	str	r2, [sp, #4]
20000eaa:	08ce      	lsrs	r6, r1, #3
20000eac:	4432      	add	r2, r6
20000eae:	7e66      	ldrb	r6, [r4, #25]
20000eb0:	0237      	lsls	r7, r6, #8
20000eb2:	4337      	orrs	r7, r6
20000eb4:	043e      	lsls	r6, r7, #16
20000eb6:	433e      	orrs	r6, r7
20000eb8:	7e24      	ldrb	r4, [r4, #24]
20000eba:	0225      	lsls	r5, r4, #8
20000ebc:	4325      	orrs	r5, r4
20000ebe:	042c      	lsls	r4, r5, #16
20000ec0:	432c      	orrs	r4, r5
20000ec2:	4066      	eors	r6, r4
20000ec4:	4d22      	ldr	r5, [pc, #136]	; (20000f50 <RenderMText_Addr>)
20000ec6:	46ae      	mov	lr, r5
20000ec8:	074d      	lsls	r5, r1, #29
20000eca:	d511      	bpl.n	20000ef0 <RenderMText+0x74>
20000ecc:	7815      	ldrb	r5, [r2, #0]
20000ece:	5d5d      	ldrb	r5, [r3, r5]
20000ed0:	3201      	adds	r2, #1
20000ed2:	00ed      	lsls	r5, r5, #3
20000ed4:	4475      	add	r5, lr
20000ed6:	686f      	ldr	r7, [r5, #4]
20000ed8:	4037      	ands	r7, r6
20000eda:	4067      	eors	r7, r4
20000edc:	c080      	stmia	r0!, {r7}
20000ede:	3104      	adds	r1, #4
20000ee0:	9f08      	ldr	r7, [sp, #32]
20000ee2:	42b9      	cmp	r1, r7
20000ee4:	d301      	bcc.n	20000eea <RenderMText+0x6e>
20000ee6:	2100      	movs	r1, #0
20000ee8:	9a01      	ldr	r2, [sp, #4]
20000eea:	9f02      	ldr	r7, [sp, #8]
20000eec:	3f04      	subs	r7, #4
20000eee:	9702      	str	r7, [sp, #8]
20000ef0:	9f08      	ldr	r7, [sp, #32]
20000ef2:	1a7f      	subs	r7, r7, r1

20000ef4 <RenderMText_OutLoop>:
20000ef4:	9d02      	ldr	r5, [sp, #8]
20000ef6:	42af      	cmp	r7, r5
20000ef8:	d900      	bls.n	20000efc <RenderMText_OutLoop+0x8>
20000efa:	462f      	mov	r7, r5
20000efc:	2f08      	cmp	r7, #8
20000efe:	d20e      	bcs.n	20000f1e <RenderMText_Last+0x1a>
20000f00:	2f04      	cmp	r7, #4
20000f02:	d30b      	bcc.n	20000f1c <RenderMText_Last+0x18>

20000f04 <RenderMText_Last>:
20000f04:	7815      	ldrb	r5, [r2, #0]
20000f06:	5d5d      	ldrb	r5, [r3, r5]
20000f08:	3201      	adds	r2, #1
20000f0a:	00ed      	lsls	r5, r5, #3
20000f0c:	4475      	add	r5, lr
20000f0e:	6829      	ldr	r1, [r5, #0]
20000f10:	4031      	ands	r1, r6
20000f12:	4061      	eors	r1, r4
20000f14:	c002      	stmia	r0!, {r1}
20000f16:	9a01      	ldr	r2, [sp, #4]
20000f18:	2f04      	cmp	r7, #4
20000f1a:	d8eb      	bhi.n	20000ef4 <RenderMText_OutLoop>
20000f1c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
20000f1e:	08b9      	lsrs	r1, r7, #2
20000f20:	008f      	lsls	r7, r1, #2
20000f22:	1bed      	subs	r5, r5, r7
20000f24:	9502      	str	r5, [sp, #8]
20000f26:	3901      	subs	r1, #1

20000f28 <RenderMText_InLoop>:
20000f28:	7815      	ldrb	r5, [r2, #0]
20000f2a:	5d5d      	ldrb	r5, [r3, r5]
20000f2c:	3201      	adds	r2, #1
20000f2e:	00ed      	lsls	r5, r5, #3
20000f30:	4475      	add	r5, lr
20000f32:	682f      	ldr	r7, [r5, #0]
20000f34:	4037      	ands	r7, r6
20000f36:	4067      	eors	r7, r4
20000f38:	c080      	stmia	r0!, {r7}
20000f3a:	686f      	ldr	r7, [r5, #4]
20000f3c:	4037      	ands	r7, r6
20000f3e:	4067      	eors	r7, r4
20000f40:	c080      	stmia	r0!, {r7}
20000f42:	3902      	subs	r1, #2
20000f44:	d8f0      	bhi.n	20000f28 <RenderMText_InLoop>
20000f46:	9f08      	ldr	r7, [sp, #32]
20000f48:	d0dc      	beq.n	20000f04 <RenderMText_Last>
20000f4a:	9a01      	ldr	r2, [sp, #4]
20000f4c:	e7d2      	b.n	20000ef4 <RenderMText_OutLoop>
20000f4e:	46c0      	nop			; (mov r8, r8)

20000f50 <RenderMText_Addr>:
20000f50:	2000642c 	.word	0x2000642c

20000f54 <RenderMText_pSioBase>:
20000f54:	d0000000 	.word	0xd0000000

20000f58 <RenderOscil>:
20000f58:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
20000f5a:	9c08      	ldr	r4, [sp, #32]
20000f5c:	8925      	ldrh	r5, [r4, #8]
20000f5e:	2703      	movs	r7, #3
20000f60:	43bd      	bics	r5, r7
20000f62:	9508      	str	r5, [sp, #32]
20000f64:	43b9      	bics	r1, r7
20000f66:	43bb      	bics	r3, r7
20000f68:	9302      	str	r3, [sp, #8]
20000f6a:	8965      	ldrh	r5, [r4, #10]
20000f6c:	3d01      	subs	r5, #1
20000f6e:	1aad      	subs	r5, r5, r2
20000f70:	7e23      	ldrb	r3, [r4, #24]
20000f72:	469e      	mov	lr, r3
20000f74:	68e2      	ldr	r2, [r4, #12]
20000f76:	9201      	str	r2, [sp, #4]
20000f78:	440a      	add	r2, r1
20000f7a:	7d66      	ldrb	r6, [r4, #21]
20000f7c:	0233      	lsls	r3, r6, #8
20000f7e:	4333      	orrs	r3, r6
20000f80:	041e      	lsls	r6, r3, #16
20000f82:	431e      	orrs	r6, r3
20000f84:	7d24      	ldrb	r4, [r4, #20]
20000f86:	0223      	lsls	r3, r4, #8
20000f88:	4323      	orrs	r3, r4
20000f8a:	041c      	lsls	r4, r3, #16
20000f8c:	431c      	orrs	r4, r3
20000f8e:	4066      	eors	r6, r4
20000f90:	9f08      	ldr	r7, [sp, #32]
20000f92:	1a7f      	subs	r7, r7, r1
20000f94:	2f04      	cmp	r7, #4
20000f96:	d801      	bhi.n	20000f9c <RenderOscil_OutLoop>
20000f98:	9f08      	ldr	r7, [sp, #32]
20000f9a:	e007      	b.n	20000fac <RenderOscil_Last>

20000f9c <RenderOscil_OutLoop>:
20000f9c:	9b02      	ldr	r3, [sp, #8]
20000f9e:	429f      	cmp	r7, r3
20000fa0:	d900      	bls.n	20000fa4 <RenderOscil_OutLoop+0x8>
20000fa2:	461f      	mov	r7, r3
20000fa4:	2f08      	cmp	r7, #8
20000fa6:	d21e      	bcs.n	20000fe6 <RenderOscil_Last+0x3a>
20000fa8:	2f04      	cmp	r7, #4
20000faa:	d31b      	bcc.n	20000fe4 <RenderOscil_Last+0x38>

20000fac <RenderOscil_Last>:
20000fac:	2100      	movs	r1, #0
20000fae:	7813      	ldrb	r3, [r2, #0]
20000fb0:	1b5b      	subs	r3, r3, r5
20000fb2:	459e      	cmp	lr, r3
20000fb4:	4149      	adcs	r1, r1
20000fb6:	7853      	ldrb	r3, [r2, #1]
20000fb8:	1b5b      	subs	r3, r3, r5
20000fba:	459e      	cmp	lr, r3
20000fbc:	4149      	adcs	r1, r1
20000fbe:	7893      	ldrb	r3, [r2, #2]
20000fc0:	1b5b      	subs	r3, r3, r5
20000fc2:	459e      	cmp	lr, r3
20000fc4:	4149      	adcs	r1, r1
20000fc6:	78d3      	ldrb	r3, [r2, #3]
20000fc8:	1b5b      	subs	r3, r3, r5
20000fca:	459e      	cmp	lr, r3
20000fcc:	4149      	adcs	r1, r1
20000fce:	3204      	adds	r2, #4
20000fd0:	00c9      	lsls	r1, r1, #3
20000fd2:	4b20      	ldr	r3, [pc, #128]	; (20001054 <RenderOscil_Addr>)
20000fd4:	4419      	add	r1, r3
20000fd6:	6849      	ldr	r1, [r1, #4]
20000fd8:	4031      	ands	r1, r6
20000fda:	4061      	eors	r1, r4
20000fdc:	c002      	stmia	r0!, {r1}
20000fde:	9a01      	ldr	r2, [sp, #4]
20000fe0:	2f04      	cmp	r7, #4
20000fe2:	d8db      	bhi.n	20000f9c <RenderOscil_OutLoop>
20000fe4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
20000fe6:	08b9      	lsrs	r1, r7, #2
20000fe8:	008f      	lsls	r7, r1, #2
20000fea:	1bdb      	subs	r3, r3, r7
20000fec:	9302      	str	r3, [sp, #8]
20000fee:	3901      	subs	r1, #1

20000ff0 <RenderOscil_InLoop>:
20000ff0:	2700      	movs	r7, #0
20000ff2:	7813      	ldrb	r3, [r2, #0]
20000ff4:	1b5b      	subs	r3, r3, r5
20000ff6:	459e      	cmp	lr, r3
20000ff8:	417f      	adcs	r7, r7
20000ffa:	7853      	ldrb	r3, [r2, #1]
20000ffc:	1b5b      	subs	r3, r3, r5
20000ffe:	459e      	cmp	lr, r3
20001000:	417f      	adcs	r7, r7
20001002:	7893      	ldrb	r3, [r2, #2]
20001004:	1b5b      	subs	r3, r3, r5
20001006:	459e      	cmp	lr, r3
20001008:	417f      	adcs	r7, r7
2000100a:	78d3      	ldrb	r3, [r2, #3]
2000100c:	1b5b      	subs	r3, r3, r5
2000100e:	459e      	cmp	lr, r3
20001010:	417f      	adcs	r7, r7
20001012:	7913      	ldrb	r3, [r2, #4]
20001014:	1b5b      	subs	r3, r3, r5
20001016:	459e      	cmp	lr, r3
20001018:	417f      	adcs	r7, r7
2000101a:	7953      	ldrb	r3, [r2, #5]
2000101c:	1b5b      	subs	r3, r3, r5
2000101e:	459e      	cmp	lr, r3
20001020:	417f      	adcs	r7, r7
20001022:	7993      	ldrb	r3, [r2, #6]
20001024:	1b5b      	subs	r3, r3, r5
20001026:	459e      	cmp	lr, r3
20001028:	417f      	adcs	r7, r7
2000102a:	79d3      	ldrb	r3, [r2, #7]
2000102c:	1b5b      	subs	r3, r3, r5
2000102e:	459e      	cmp	lr, r3
20001030:	417f      	adcs	r7, r7
20001032:	3208      	adds	r2, #8
20001034:	00ff      	lsls	r7, r7, #3
20001036:	4b07      	ldr	r3, [pc, #28]	; (20001054 <RenderOscil_Addr>)
20001038:	441f      	add	r7, r3
2000103a:	683b      	ldr	r3, [r7, #0]
2000103c:	4033      	ands	r3, r6
2000103e:	4063      	eors	r3, r4
20001040:	687f      	ldr	r7, [r7, #4]
20001042:	4037      	ands	r7, r6
20001044:	4067      	eors	r7, r4
20001046:	c088      	stmia	r0!, {r3, r7}
20001048:	3902      	subs	r1, #2
2000104a:	d8d1      	bhi.n	20000ff0 <RenderOscil_InLoop>
2000104c:	9f08      	ldr	r7, [sp, #32]
2000104e:	d0ad      	beq.n	20000fac <RenderOscil_Last>
20001050:	9a01      	ldr	r2, [sp, #4]
20001052:	e7a3      	b.n	20000f9c <RenderOscil_OutLoop>

20001054 <RenderOscil_Addr>:
20001054:	2000642c 	.word	0x2000642c

20001058 <RenderOscLine>:
20001058:	b5fc      	push	{r2, r3, r4, r5, r6, r7, lr}
2000105a:	9c07      	ldr	r4, [sp, #28]
2000105c:	8925      	ldrh	r5, [r4, #8]
2000105e:	086d      	lsrs	r5, r5, #1
20001060:	9507      	str	r5, [sp, #28]
20001062:	0849      	lsrs	r1, r1, #1
20001064:	085b      	lsrs	r3, r3, #1
20001066:	9301      	str	r3, [sp, #4]
20001068:	8965      	ldrh	r5, [r4, #10]
2000106a:	3d01      	subs	r5, #1
2000106c:	1aad      	subs	r5, r5, r2
2000106e:	46ae      	mov	lr, r5
20001070:	68e2      	ldr	r2, [r4, #12]
20001072:	9200      	str	r2, [sp, #0]
20001074:	440a      	add	r2, r1
20001076:	7d66      	ldrb	r6, [r4, #21]
20001078:	0237      	lsls	r7, r6, #8
2000107a:	433e      	orrs	r6, r7
2000107c:	7d24      	ldrb	r4, [r4, #20]
2000107e:	0227      	lsls	r7, r4, #8
20001080:	433c      	orrs	r4, r7
20001082:	9f07      	ldr	r7, [sp, #28]
20001084:	1a79      	subs	r1, r7, r1

20001086 <RenderOscLine_OutLoop>:
20001086:	9b01      	ldr	r3, [sp, #4]
20001088:	4299      	cmp	r1, r3
2000108a:	d900      	bls.n	2000108e <RenderOscLine_OutLoop+0x8>
2000108c:	4619      	mov	r1, r3
2000108e:	2900      	cmp	r1, #0
20001090:	d01b      	beq.n	200010ca <RenderOscLine_Stop>
20001092:	1a5b      	subs	r3, r3, r1
20001094:	9301      	str	r3, [sp, #4]
20001096:	7815      	ldrb	r5, [r2, #0]

20001098 <RenderOscLine_InLoop>:
20001098:	7813      	ldrb	r3, [r2, #0]
2000109a:	3201      	adds	r2, #1
2000109c:	4627      	mov	r7, r4
2000109e:	4573      	cmp	r3, lr
200010a0:	d00a      	beq.n	200010b8 <RenderOscLine_InLoop+0x20>
200010a2:	d303      	bcc.n	200010ac <RenderOscLine_InLoop+0x14>
200010a4:	42ab      	cmp	r3, r5
200010a6:	d901      	bls.n	200010ac <RenderOscLine_InLoop+0x14>
200010a8:	45ae      	cmp	lr, r5
200010aa:	d805      	bhi.n	200010b8 <RenderOscLine_InLoop+0x20>
200010ac:	42ab      	cmp	r3, r5
200010ae:	d204      	bcs.n	200010ba <RenderOscLine_InLoop+0x22>
200010b0:	4573      	cmp	r3, lr
200010b2:	d202      	bcs.n	200010ba <RenderOscLine_InLoop+0x22>
200010b4:	45ae      	cmp	lr, r5
200010b6:	d200      	bcs.n	200010ba <RenderOscLine_InLoop+0x22>
200010b8:	4637      	mov	r7, r6
200010ba:	8007      	strh	r7, [r0, #0]
200010bc:	3002      	adds	r0, #2
200010be:	461d      	mov	r5, r3
200010c0:	3901      	subs	r1, #1
200010c2:	d1e9      	bne.n	20001098 <RenderOscLine_InLoop>
200010c4:	9907      	ldr	r1, [sp, #28]
200010c6:	9a00      	ldr	r2, [sp, #0]
200010c8:	e7dd      	b.n	20001086 <RenderOscLine_OutLoop>

200010ca <RenderOscLine_Stop>:
200010ca:	bdfc      	pop	{r2, r3, r4, r5, r6, r7, pc}

200010cc <RenderOscLine_Addr>:
200010cc:	2000642c 	.word	0x2000642c

200010d0 <RenderPersp>:
200010d0:	b5f0      	push	{r4, r5, r6, r7, lr}
200010d2:	4e41      	ldr	r6, [pc, #260]	; (200011d8 <RenderPersp_pSioBase>)
200010d4:	8b15      	ldrh	r5, [r2, #24]
200010d6:	7f54      	ldrb	r4, [r2, #29]
200010d8:	b264      	sxtb	r4, r4
200010da:	00a4      	lsls	r4, r4, #2
200010dc:	d107      	bne.n	200010ee <RenderPersp+0x1e>
200010de:	086d      	lsrs	r5, r5, #1
200010e0:	1b49      	subs	r1, r1, r5
200010e2:	468c      	mov	ip, r1
200010e4:	2501      	movs	r5, #1
200010e6:	6675      	str	r5, [r6, #100]	; 0x64
200010e8:	032d      	lsls	r5, r5, #12
200010ea:	6635      	str	r5, [r6, #96]	; 0x60
200010ec:	e009      	b.n	20001102 <RenderPersp+0x32>
200010ee:	d502      	bpl.n	200010f6 <RenderPersp+0x26>
200010f0:	1a69      	subs	r1, r5, r1
200010f2:	3901      	subs	r1, #1
200010f4:	4264      	negs	r4, r4
200010f6:	1b4f      	subs	r7, r1, r5
200010f8:	46bc      	mov	ip, r7
200010fa:	032d      	lsls	r5, r5, #12
200010fc:	6635      	str	r5, [r6, #96]	; 0x60
200010fe:	1909      	adds	r1, r1, r4
20001100:	6671      	str	r1, [r6, #100]	; 0x64
20001102:	8ad3      	ldrh	r3, [r2, #22]
20001104:	085d      	lsrs	r5, r3, #1
20001106:	426d      	negs	r5, r5
20001108:	46ae      	mov	lr, r5
2000110a:	089f      	lsrs	r7, r3, #2
2000110c:	7f91      	ldrb	r1, [r2, #30]
2000110e:	7fd4      	ldrb	r4, [r2, #31]
20001110:	4b32      	ldr	r3, [pc, #200]	; (200011dc <RenderPersp_Interp>)
20001112:	6816      	ldr	r6, [r2, #0]
20001114:	611e      	str	r6, [r3, #16]
20001116:	4e32      	ldr	r6, [pc, #200]	; (200011e0 <RenderPersp_Ctrl>)
20001118:	1a76      	subs	r6, r6, r1
2000111a:	014d      	lsls	r5, r1, #5
2000111c:	432e      	orrs	r6, r5
2000111e:	3901      	subs	r1, #1
20001120:	190d      	adds	r5, r1, r4
20001122:	02ad      	lsls	r5, r5, #10
20001124:	432e      	orrs	r6, r5
20001126:	631e      	str	r6, [r3, #48]	; 0x30
20001128:	4e2d      	ldr	r6, [pc, #180]	; (200011e0 <RenderPersp_Ctrl>)
2000112a:	0289      	lsls	r1, r1, #10
2000112c:	430e      	orrs	r6, r1
2000112e:	62de      	str	r6, [r3, #44]	; 0x2c
20001130:	6854      	ldr	r4, [r2, #4]
20001132:	4929      	ldr	r1, [pc, #164]	; (200011d8 <RenderPersp_pSioBase>)
20001134:	6f09      	ldr	r1, [r1, #112]	; 0x70
20001136:	6825      	ldr	r5, [r4, #0]
20001138:	434d      	muls	r5, r1
2000113a:	132d      	asrs	r5, r5, #12
2000113c:	609d      	str	r5, [r3, #8]
2000113e:	68e6      	ldr	r6, [r4, #12]
20001140:	434e      	muls	r6, r1
20001142:	1336      	asrs	r6, r6, #12
20001144:	60de      	str	r6, [r3, #12]
20001146:	4672      	mov	r2, lr
20001148:	4355      	muls	r5, r2
2000114a:	4372      	muls	r2, r6
2000114c:	468e      	mov	lr, r1
2000114e:	6866      	ldr	r6, [r4, #4]
20001150:	4371      	muls	r1, r6
20001152:	1309      	asrs	r1, r1, #12
20001154:	4666      	mov	r6, ip
20001156:	4371      	muls	r1, r6
20001158:	186d      	adds	r5, r5, r1
2000115a:	68a1      	ldr	r1, [r4, #8]
2000115c:	186d      	adds	r5, r5, r1
2000115e:	601d      	str	r5, [r3, #0]
20001160:	6921      	ldr	r1, [r4, #16]
20001162:	4675      	mov	r5, lr
20001164:	4369      	muls	r1, r5
20001166:	1309      	asrs	r1, r1, #12
20001168:	4371      	muls	r1, r6
2000116a:	1852      	adds	r2, r2, r1
2000116c:	6961      	ldr	r1, [r4, #20]
2000116e:	1852      	adds	r2, r2, r1
20001170:	605a      	str	r2, [r3, #4]
20001172:	087f      	lsrs	r7, r7, #1
20001174:	d30e      	bcc.n	20001194 <RenderPersp+0xc4>
20001176:	69dc      	ldr	r4, [r3, #28]
20001178:	7826      	ldrb	r6, [r4, #0]
2000117a:	69dc      	ldr	r4, [r3, #28]
2000117c:	7825      	ldrb	r5, [r4, #0]
2000117e:	022d      	lsls	r5, r5, #8
20001180:	432e      	orrs	r6, r5
20001182:	69dc      	ldr	r4, [r3, #28]
20001184:	7825      	ldrb	r5, [r4, #0]
20001186:	042d      	lsls	r5, r5, #16
20001188:	432e      	orrs	r6, r5
2000118a:	69dc      	ldr	r4, [r3, #28]
2000118c:	7825      	ldrb	r5, [r4, #0]
2000118e:	062d      	lsls	r5, r5, #24
20001190:	432e      	orrs	r6, r5
20001192:	c040      	stmia	r0!, {r6}
20001194:	423f      	tst	r7, r7
20001196:	d01e      	beq.n	200011d6 <RenderPersp+0x106>
20001198:	69dc      	ldr	r4, [r3, #28]
2000119a:	7821      	ldrb	r1, [r4, #0]
2000119c:	69dc      	ldr	r4, [r3, #28]
2000119e:	7824      	ldrb	r4, [r4, #0]
200011a0:	0224      	lsls	r4, r4, #8
200011a2:	4321      	orrs	r1, r4
200011a4:	69dc      	ldr	r4, [r3, #28]
200011a6:	7824      	ldrb	r4, [r4, #0]
200011a8:	0424      	lsls	r4, r4, #16
200011aa:	4321      	orrs	r1, r4
200011ac:	69dc      	ldr	r4, [r3, #28]
200011ae:	7824      	ldrb	r4, [r4, #0]
200011b0:	0624      	lsls	r4, r4, #24
200011b2:	4321      	orrs	r1, r4
200011b4:	69dc      	ldr	r4, [r3, #28]
200011b6:	7822      	ldrb	r2, [r4, #0]
200011b8:	69dc      	ldr	r4, [r3, #28]
200011ba:	7824      	ldrb	r4, [r4, #0]
200011bc:	0224      	lsls	r4, r4, #8
200011be:	4322      	orrs	r2, r4
200011c0:	69dc      	ldr	r4, [r3, #28]
200011c2:	7824      	ldrb	r4, [r4, #0]
200011c4:	0424      	lsls	r4, r4, #16
200011c6:	4322      	orrs	r2, r4
200011c8:	69dc      	ldr	r4, [r3, #28]
200011ca:	7824      	ldrb	r4, [r4, #0]
200011cc:	0624      	lsls	r4, r4, #24
200011ce:	4322      	orrs	r2, r4
200011d0:	c006      	stmia	r0!, {r1, r2}
200011d2:	3f01      	subs	r7, #1
200011d4:	d1e0      	bne.n	20001198 <RenderPersp+0xc8>
200011d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

200011d8 <RenderPersp_pSioBase>:
200011d8:	d0000000 	.word	0xd0000000

200011dc <RenderPersp_Interp>:
200011dc:	d00000c0 	.word	0xd00000c0

200011e0 <RenderPersp_Ctrl>:
200011e0:	0004000c 	.word	0x0004000c

200011e4 <RenderPersp2>:
200011e4:	b5f0      	push	{r4, r5, r6, r7, lr}
200011e6:	4e3c      	ldr	r6, [pc, #240]	; (200012d8 <RenderPersp_pSioBase>)
200011e8:	8b15      	ldrh	r5, [r2, #24]
200011ea:	7f54      	ldrb	r4, [r2, #29]
200011ec:	b264      	sxtb	r4, r4
200011ee:	00a4      	lsls	r4, r4, #2
200011f0:	d107      	bne.n	20001202 <RenderPersp2+0x1e>
200011f2:	086d      	lsrs	r5, r5, #1
200011f4:	1b49      	subs	r1, r1, r5
200011f6:	468c      	mov	ip, r1
200011f8:	2501      	movs	r5, #1
200011fa:	6675      	str	r5, [r6, #100]	; 0x64
200011fc:	032d      	lsls	r5, r5, #12
200011fe:	6635      	str	r5, [r6, #96]	; 0x60
20001200:	e009      	b.n	20001216 <RenderPersp2+0x32>
20001202:	d502      	bpl.n	2000120a <RenderPersp2+0x26>
20001204:	1a69      	subs	r1, r5, r1
20001206:	3901      	subs	r1, #1
20001208:	4264      	negs	r4, r4
2000120a:	1b4f      	subs	r7, r1, r5
2000120c:	46bc      	mov	ip, r7
2000120e:	032d      	lsls	r5, r5, #12
20001210:	6635      	str	r5, [r6, #96]	; 0x60
20001212:	1909      	adds	r1, r1, r4
20001214:	6671      	str	r1, [r6, #100]	; 0x64
20001216:	8ad3      	ldrh	r3, [r2, #22]
20001218:	085d      	lsrs	r5, r3, #1
2000121a:	426d      	negs	r5, r5
2000121c:	46ae      	mov	lr, r5
2000121e:	089f      	lsrs	r7, r3, #2
20001220:	7f91      	ldrb	r1, [r2, #30]
20001222:	7fd4      	ldrb	r4, [r2, #31]
20001224:	4b2d      	ldr	r3, [pc, #180]	; (200012dc <RenderPersp_Interp>)
20001226:	6816      	ldr	r6, [r2, #0]
20001228:	611e      	str	r6, [r3, #16]
2000122a:	4e2d      	ldr	r6, [pc, #180]	; (200012e0 <RenderPersp_Ctrl>)
2000122c:	1a76      	subs	r6, r6, r1
2000122e:	014d      	lsls	r5, r1, #5
20001230:	432e      	orrs	r6, r5
20001232:	3901      	subs	r1, #1
20001234:	190d      	adds	r5, r1, r4
20001236:	02ad      	lsls	r5, r5, #10
20001238:	432e      	orrs	r6, r5
2000123a:	631e      	str	r6, [r3, #48]	; 0x30
2000123c:	4e28      	ldr	r6, [pc, #160]	; (200012e0 <RenderPersp_Ctrl>)
2000123e:	0289      	lsls	r1, r1, #10
20001240:	430e      	orrs	r6, r1
20001242:	62de      	str	r6, [r3, #44]	; 0x2c
20001244:	6854      	ldr	r4, [r2, #4]
20001246:	4924      	ldr	r1, [pc, #144]	; (200012d8 <RenderPersp_pSioBase>)
20001248:	6f09      	ldr	r1, [r1, #112]	; 0x70
2000124a:	6825      	ldr	r5, [r4, #0]
2000124c:	434d      	muls	r5, r1
2000124e:	12ed      	asrs	r5, r5, #11
20001250:	609d      	str	r5, [r3, #8]
20001252:	106d      	asrs	r5, r5, #1
20001254:	68e6      	ldr	r6, [r4, #12]
20001256:	434e      	muls	r6, r1
20001258:	12f6      	asrs	r6, r6, #11
2000125a:	60de      	str	r6, [r3, #12]
2000125c:	1076      	asrs	r6, r6, #1
2000125e:	4672      	mov	r2, lr
20001260:	4355      	muls	r5, r2
20001262:	4372      	muls	r2, r6
20001264:	468e      	mov	lr, r1
20001266:	6866      	ldr	r6, [r4, #4]
20001268:	4371      	muls	r1, r6
2000126a:	1309      	asrs	r1, r1, #12
2000126c:	4666      	mov	r6, ip
2000126e:	4371      	muls	r1, r6
20001270:	186d      	adds	r5, r5, r1
20001272:	68a1      	ldr	r1, [r4, #8]
20001274:	186d      	adds	r5, r5, r1
20001276:	601d      	str	r5, [r3, #0]
20001278:	6921      	ldr	r1, [r4, #16]
2000127a:	4675      	mov	r5, lr
2000127c:	4369      	muls	r1, r5
2000127e:	1309      	asrs	r1, r1, #12
20001280:	4371      	muls	r1, r6
20001282:	1852      	adds	r2, r2, r1
20001284:	6961      	ldr	r1, [r4, #20]
20001286:	1852      	adds	r2, r2, r1
20001288:	605a      	str	r2, [r3, #4]
2000128a:	087f      	lsrs	r7, r7, #1
2000128c:	d30a      	bcc.n	200012a4 <RenderPersp2+0xc0>
2000128e:	69dc      	ldr	r4, [r3, #28]
20001290:	7821      	ldrb	r1, [r4, #0]
20001292:	020c      	lsls	r4, r1, #8
20001294:	4321      	orrs	r1, r4
20001296:	69dc      	ldr	r4, [r3, #28]
20001298:	7824      	ldrb	r4, [r4, #0]
2000129a:	0424      	lsls	r4, r4, #16
2000129c:	4321      	orrs	r1, r4
2000129e:	0224      	lsls	r4, r4, #8
200012a0:	4321      	orrs	r1, r4
200012a2:	c002      	stmia	r0!, {r1}
200012a4:	423f      	tst	r7, r7
200012a6:	d016      	beq.n	200012d6 <RenderPersp2+0xf2>
200012a8:	69dc      	ldr	r4, [r3, #28]
200012aa:	7821      	ldrb	r1, [r4, #0]
200012ac:	020c      	lsls	r4, r1, #8
200012ae:	4321      	orrs	r1, r4
200012b0:	69dc      	ldr	r4, [r3, #28]
200012b2:	7824      	ldrb	r4, [r4, #0]
200012b4:	0424      	lsls	r4, r4, #16
200012b6:	4321      	orrs	r1, r4
200012b8:	0224      	lsls	r4, r4, #8
200012ba:	4321      	orrs	r1, r4
200012bc:	69dc      	ldr	r4, [r3, #28]
200012be:	7822      	ldrb	r2, [r4, #0]
200012c0:	0214      	lsls	r4, r2, #8
200012c2:	4322      	orrs	r2, r4
200012c4:	69dc      	ldr	r4, [r3, #28]
200012c6:	7824      	ldrb	r4, [r4, #0]
200012c8:	0424      	lsls	r4, r4, #16
200012ca:	4322      	orrs	r2, r4
200012cc:	0224      	lsls	r4, r4, #8
200012ce:	4322      	orrs	r2, r4
200012d0:	c006      	stmia	r0!, {r1, r2}
200012d2:	3f01      	subs	r7, #1
200012d4:	d1e8      	bne.n	200012a8 <RenderPersp2+0xc4>
200012d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

200012d8 <RenderPersp_pSioBase>:
200012d8:	d0000000 	.word	0xd0000000

200012dc <RenderPersp_Interp>:
200012dc:	d00000c0 	.word	0xd00000c0

200012e0 <RenderPersp_Ctrl>:
200012e0:	0004000c 	.word	0x0004000c

200012e4 <RenderPlane2>:
200012e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
200012e6:	9c06      	ldr	r4, [sp, #24]
200012e8:	8927      	ldrh	r7, [r4, #8]
200012ea:	2603      	movs	r6, #3
200012ec:	43b7      	bics	r7, r6
200012ee:	9706      	str	r7, [sp, #24]
200012f0:	43b1      	bics	r1, r6
200012f2:	43b3      	bics	r3, r6
200012f4:	9300      	str	r3, [sp, #0]
200012f6:	8865      	ldrh	r5, [r4, #2]
200012f8:	436a      	muls	r2, r5
200012fa:	68e5      	ldr	r5, [r4, #12]
200012fc:	442a      	add	r2, r5
200012fe:	4696      	mov	lr, r2
20001300:	08ce      	lsrs	r6, r1, #3
20001302:	4432      	add	r2, r6
20001304:	6963      	ldr	r3, [r4, #20]
20001306:	69a7      	ldr	r7, [r4, #24]
20001308:	074d      	lsls	r5, r1, #29
2000130a:	d512      	bpl.n	20001332 <RenderPlane2+0x4e>
2000130c:	7815      	ldrb	r5, [r2, #0]
2000130e:	5cd6      	ldrb	r6, [r2, r3]
20001310:	3201      	adds	r2, #1
20001312:	0736      	lsls	r6, r6, #28
20001314:	0db6      	lsrs	r6, r6, #22
20001316:	072d      	lsls	r5, r5, #28
20001318:	0ead      	lsrs	r5, r5, #26
2000131a:	4335      	orrs	r5, r6
2000131c:	597d      	ldr	r5, [r7, r5]
2000131e:	c020      	stmia	r0!, {r5}
20001320:	3104      	adds	r1, #4
20001322:	9e06      	ldr	r6, [sp, #24]
20001324:	42b1      	cmp	r1, r6
20001326:	d301      	bcc.n	2000132c <RenderPlane2+0x48>
20001328:	2100      	movs	r1, #0
2000132a:	4672      	mov	r2, lr
2000132c:	9e00      	ldr	r6, [sp, #0]
2000132e:	3e04      	subs	r6, #4
20001330:	9600      	str	r6, [sp, #0]
20001332:	9e06      	ldr	r6, [sp, #24]
20001334:	1a76      	subs	r6, r6, r1

20001336 <RenderPlane2_OutLoop>:
20001336:	9c00      	ldr	r4, [sp, #0]
20001338:	42a6      	cmp	r6, r4
2000133a:	d900      	bls.n	2000133e <RenderPlane2_OutLoop+0x8>
2000133c:	4626      	mov	r6, r4
2000133e:	2e08      	cmp	r6, #8
20001340:	d20f      	bcs.n	20001362 <RenderPlane2_Last+0x1c>
20001342:	2e04      	cmp	r6, #4
20001344:	d30c      	bcc.n	20001360 <RenderPlane2_Last+0x1a>

20001346 <RenderPlane2_Last>:
20001346:	7815      	ldrb	r5, [r2, #0]
20001348:	5cd4      	ldrb	r4, [r2, r3]
2000134a:	3201      	adds	r2, #1
2000134c:	0924      	lsrs	r4, r4, #4
2000134e:	0224      	lsls	r4, r4, #8
20001350:	432c      	orrs	r4, r5
20001352:	0924      	lsrs	r4, r4, #4
20001354:	00a4      	lsls	r4, r4, #2
20001356:	593c      	ldr	r4, [r7, r4]
20001358:	c010      	stmia	r0!, {r4}
2000135a:	4672      	mov	r2, lr
2000135c:	2e04      	cmp	r6, #4
2000135e:	d8ea      	bhi.n	20001336 <RenderPlane2_OutLoop>
20001360:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
20001362:	08b1      	lsrs	r1, r6, #2
20001364:	008e      	lsls	r6, r1, #2
20001366:	1ba4      	subs	r4, r4, r6
20001368:	9400      	str	r4, [sp, #0]
2000136a:	3901      	subs	r1, #1

2000136c <RenderPlane2_InLoop>:
2000136c:	7815      	ldrb	r5, [r2, #0]
2000136e:	5cd6      	ldrb	r6, [r2, r3]
20001370:	3201      	adds	r2, #1
20001372:	0934      	lsrs	r4, r6, #4
20001374:	0224      	lsls	r4, r4, #8
20001376:	432c      	orrs	r4, r5
20001378:	0924      	lsrs	r4, r4, #4
2000137a:	00a4      	lsls	r4, r4, #2
2000137c:	593c      	ldr	r4, [r7, r4]
2000137e:	0736      	lsls	r6, r6, #28
20001380:	0db6      	lsrs	r6, r6, #22
20001382:	072d      	lsls	r5, r5, #28
20001384:	0ead      	lsrs	r5, r5, #26
20001386:	4335      	orrs	r5, r6
20001388:	597d      	ldr	r5, [r7, r5]
2000138a:	c030      	stmia	r0!, {r4, r5}
2000138c:	3902      	subs	r1, #2
2000138e:	d8ed      	bhi.n	2000136c <RenderPlane2_InLoop>

20001390 <RenderPlane2_EndLoop>:
20001390:	9e06      	ldr	r6, [sp, #24]
20001392:	d0d8      	beq.n	20001346 <RenderPlane2_Last>
20001394:	4672      	mov	r2, lr
20001396:	e7ce      	b.n	20001336 <RenderPlane2_OutLoop>

20001398 <RenderProgress>:
20001398:	b5f0      	push	{r4, r5, r6, r7, lr}
2000139a:	9c05      	ldr	r4, [sp, #20]
2000139c:	0889      	lsrs	r1, r1, #2
2000139e:	68e5      	ldr	r5, [r4, #12]
200013a0:	5caa      	ldrb	r2, [r5, r2]
200013a2:	089b      	lsrs	r3, r3, #2
200013a4:	8927      	ldrh	r7, [r4, #8]
200013a6:	08bf      	lsrs	r7, r7, #2
200013a8:	46be      	mov	lr, r7
200013aa:	69a5      	ldr	r5, [r4, #24]
200013ac:	6964      	ldr	r4, [r4, #20]
200013ae:	421b      	tst	r3, r3
200013b0:	d017      	beq.n	200013e2 <RenderProgress+0x4a>
200013b2:	4677      	mov	r7, lr
200013b4:	1a7f      	subs	r7, r7, r1
200013b6:	429f      	cmp	r7, r3
200013b8:	d900      	bls.n	200013bc <RenderProgress+0x24>
200013ba:	461f      	mov	r7, r3
200013bc:	1bdb      	subs	r3, r3, r7
200013be:	4291      	cmp	r1, r2
200013c0:	d208      	bcs.n	200013d4 <RenderProgress+0x3c>
200013c2:	1a56      	subs	r6, r2, r1
200013c4:	42be      	cmp	r6, r7
200013c6:	d900      	bls.n	200013ca <RenderProgress+0x32>
200013c8:	463e      	mov	r6, r7
200013ca:	1bbf      	subs	r7, r7, r6
200013cc:	c040      	stmia	r0!, {r6}
200013ce:	1866      	adds	r6, r4, r1
200013d0:	c040      	stmia	r0!, {r6}
200013d2:	4611      	mov	r1, r2
200013d4:	423f      	tst	r7, r7
200013d6:	d002      	beq.n	200013de <RenderProgress+0x46>
200013d8:	c080      	stmia	r0!, {r7}
200013da:	186e      	adds	r6, r5, r1
200013dc:	c040      	stmia	r0!, {r6}
200013de:	2100      	movs	r1, #0
200013e0:	e7e5      	b.n	200013ae <RenderProgress+0x16>
200013e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

200013e4 <RenderSprite>:
200013e4:	b5f0      	push	{r4, r5, r6, r7, lr}
200013e6:	6817      	ldr	r7, [r2, #0]
200013e8:	8ad6      	ldrh	r6, [r2, #22]
200013ea:	8c12      	ldrh	r2, [r2, #32]
200013ec:	3a01      	subs	r2, #1
200013ee:	d324      	bcc.n	2000143a <RenderSprite+0x56>
200013f0:	b407      	push	{r0, r1, r2}
200013f2:	cf08      	ldmia	r7!, {r3}
200013f4:	8a5c      	ldrh	r4, [r3, #18]
200013f6:	b224      	sxth	r4, r4
200013f8:	1b09      	subs	r1, r1, r4
200013fa:	d41c      	bmi.n	20001436 <RenderSprite+0x52>
200013fc:	8adc      	ldrh	r4, [r3, #22]
200013fe:	42a1      	cmp	r1, r4
20001400:	da19      	bge.n	20001436 <RenderSprite+0x52>
20001402:	685c      	ldr	r4, [r3, #4]
20001404:	5c65      	ldrb	r5, [r4, r1]
20001406:	689c      	ldr	r4, [r3, #8]
20001408:	5c62      	ldrb	r2, [r4, r1]
2000140a:	8b1c      	ldrh	r4, [r3, #24]
2000140c:	4361      	muls	r1, r4
2000140e:	681c      	ldr	r4, [r3, #0]
20001410:	4421      	add	r1, r4
20001412:	8a1c      	ldrh	r4, [r3, #16]
20001414:	b224      	sxth	r4, r4
20001416:	7b1b      	ldrb	r3, [r3, #12]
20001418:	1964      	adds	r4, r4, r5
2000141a:	d502      	bpl.n	20001422 <RenderSprite+0x3e>
2000141c:	1b2d      	subs	r5, r5, r4
2000141e:	1912      	adds	r2, r2, r4
20001420:	2400      	movs	r4, #0
20001422:	1949      	adds	r1, r1, r5
20001424:	1b35      	subs	r5, r6, r4
20001426:	42aa      	cmp	r2, r5
20001428:	dd00      	ble.n	2000142c <RenderSprite+0x48>
2000142a:	462a      	mov	r2, r5
2000142c:	4212      	tst	r2, r2
2000142e:	dd02      	ble.n	20001436 <RenderSprite+0x52>
20001430:	1900      	adds	r0, r0, r4
20001432:	f000 fc11 	bl	20001c58 <BlitKey>
20001436:	bc07      	pop	{r0, r1, r2}
20001438:	e7d8      	b.n	200013ec <RenderSprite+0x8>
2000143a:	bdf0      	pop	{r4, r5, r6, r7, pc}

2000143c <RenderTile>:
2000143c:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
2000143e:	9c08      	ldr	r4, [sp, #32]
20001440:	4d2f      	ldr	r5, [pc, #188]	; (20001500 <RenderTile_pSioBase>)
20001442:	662a      	str	r2, [r5, #96]	; 0x60
20001444:	69a2      	ldr	r2, [r4, #24]
20001446:	666a      	str	r2, [r5, #100]	; 0x64
20001448:	8927      	ldrh	r7, [r4, #8]
2000144a:	2603      	movs	r6, #3
2000144c:	43b7      	bics	r7, r6
2000144e:	9700      	str	r7, [sp, #0]
20001450:	43b1      	bics	r1, r6
20001452:	43b3      	bics	r3, r6
20001454:	9301      	str	r3, [sp, #4]
20001456:	8a63      	ldrh	r3, [r4, #18]
20001458:	9302      	str	r3, [sp, #8]
2000145a:	6f6e      	ldr	r6, [r5, #116]	; 0x74
2000145c:	6f2f      	ldr	r7, [r5, #112]	; 0x70
2000145e:	6629      	str	r1, [r5, #96]	; 0x60
20001460:	666b      	str	r3, [r5, #100]	; 0x64
20001462:	435a      	muls	r2, r3
20001464:	8863      	ldrh	r3, [r4, #2]
20001466:	435f      	muls	r7, r3
20001468:	68e3      	ldr	r3, [r4, #12]
2000146a:	18ff      	adds	r7, r7, r3
2000146c:	46be      	mov	lr, r7
2000146e:	9b02      	ldr	r3, [sp, #8]
20001470:	435e      	muls	r6, r3
20001472:	6964      	ldr	r4, [r4, #20]
20001474:	19a4      	adds	r4, r4, r6
20001476:	6f6e      	ldr	r6, [r5, #116]	; 0x74
20001478:	6f2d      	ldr	r5, [r5, #112]	; 0x70
2000147a:	197f      	adds	r7, r7, r5
2000147c:	4236      	tst	r6, r6
2000147e:	d011      	beq.n	200014a4 <RenderTile+0x68>
20001480:	1b9d      	subs	r5, r3, r6
20001482:	1949      	adds	r1, r1, r5
20001484:	9b01      	ldr	r3, [sp, #4]
20001486:	1b5b      	subs	r3, r3, r5
20001488:	9301      	str	r3, [sp, #4]
2000148a:	08ad      	lsrs	r5, r5, #2
2000148c:	c020      	stmia	r0!, {r5}
2000148e:	783b      	ldrb	r3, [r7, #0]
20001490:	3701      	adds	r7, #1
20001492:	4353      	muls	r3, r2
20001494:	4423      	add	r3, r4
20001496:	4433      	add	r3, r6
20001498:	c008      	stmia	r0!, {r3}
2000149a:	9b00      	ldr	r3, [sp, #0]
2000149c:	4299      	cmp	r1, r3
2000149e:	d301      	bcc.n	200014a4 <RenderTile+0x68>
200014a0:	2100      	movs	r1, #0
200014a2:	4677      	mov	r7, lr
200014a4:	9b00      	ldr	r3, [sp, #0]
200014a6:	1a5d      	subs	r5, r3, r1
200014a8:	9b01      	ldr	r3, [sp, #4]

200014aa <RenderTile_OutLoop>:
200014aa:	429d      	cmp	r5, r3
200014ac:	d900      	bls.n	200014b0 <RenderTile_OutLoop+0x6>
200014ae:	461d      	mov	r5, r3
200014b0:	9902      	ldr	r1, [sp, #8]
200014b2:	428d      	cmp	r5, r1
200014b4:	d20e      	bcs.n	200014d4 <RenderTile_Last+0x18>
200014b6:	2d04      	cmp	r5, #4
200014b8:	d30b      	bcc.n	200014d2 <RenderTile_Last+0x16>
200014ba:	4629      	mov	r1, r5

200014bc <RenderTile_Last>:
200014bc:	088e      	lsrs	r6, r1, #2
200014be:	c040      	stmia	r0!, {r6}
200014c0:	783e      	ldrb	r6, [r7, #0]
200014c2:	3701      	adds	r7, #1
200014c4:	4356      	muls	r6, r2
200014c6:	4426      	add	r6, r4
200014c8:	c040      	stmia	r0!, {r6}
200014ca:	4677      	mov	r7, lr
200014cc:	9e02      	ldr	r6, [sp, #8]
200014ce:	42b5      	cmp	r5, r6
200014d0:	d2eb      	bcs.n	200014aa <RenderTile_OutLoop>
200014d2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
200014d4:	08a9      	lsrs	r1, r5, #2
200014d6:	008d      	lsls	r5, r1, #2
200014d8:	1b5b      	subs	r3, r3, r5
200014da:	9d02      	ldr	r5, [sp, #8]
200014dc:	08ad      	lsrs	r5, r5, #2
200014de:	1b49      	subs	r1, r1, r5
200014e0:	3101      	adds	r1, #1

200014e2 <RenderTile_InLoop>:
200014e2:	783e      	ldrb	r6, [r7, #0]
200014e4:	3701      	adds	r7, #1
200014e6:	4356      	muls	r6, r2
200014e8:	4426      	add	r6, r4
200014ea:	c060      	stmia	r0!, {r5, r6}
200014ec:	1b49      	subs	r1, r1, r5
200014ee:	d8f8      	bhi.n	200014e2 <RenderTile_InLoop>
200014f0:	1949      	adds	r1, r1, r5
200014f2:	3901      	subs	r1, #1
200014f4:	9d00      	ldr	r5, [sp, #0]
200014f6:	0089      	lsls	r1, r1, #2
200014f8:	d1e0      	bne.n	200014bc <RenderTile_Last>
200014fa:	4677      	mov	r7, lr
200014fc:	e7d5      	b.n	200014aa <RenderTile_OutLoop>
200014fe:	46c0      	nop			; (mov r8, r8)

20001500 <RenderTile_pSioBase>:
20001500:	d0000000 	.word	0xd0000000

20001504 <RenderTile2>:
20001504:	b5fc      	push	{r2, r3, r4, r5, r6, r7, lr}
20001506:	9c07      	ldr	r4, [sp, #28]
20001508:	4d2c      	ldr	r5, [pc, #176]	; (200015bc <RenderTile_pSioBase>)
2000150a:	662a      	str	r2, [r5, #96]	; 0x60
2000150c:	8b22      	ldrh	r2, [r4, #24]
2000150e:	666a      	str	r2, [r5, #100]	; 0x64
20001510:	8927      	ldrh	r7, [r4, #8]
20001512:	2603      	movs	r6, #3
20001514:	43b7      	bics	r7, r6
20001516:	9700      	str	r7, [sp, #0]
20001518:	43b1      	bics	r1, r6
2000151a:	43b3      	bics	r3, r6
2000151c:	9301      	str	r3, [sp, #4]
2000151e:	8a63      	ldrh	r3, [r4, #18]
20001520:	6f6e      	ldr	r6, [r5, #116]	; 0x74
20001522:	6f2f      	ldr	r7, [r5, #112]	; 0x70
20001524:	6629      	str	r1, [r5, #96]	; 0x60
20001526:	666b      	str	r3, [r5, #100]	; 0x64
20001528:	8862      	ldrh	r2, [r4, #2]
2000152a:	4357      	muls	r7, r2
2000152c:	68e2      	ldr	r2, [r4, #12]
2000152e:	18bf      	adds	r7, r7, r2
20001530:	46be      	mov	lr, r7
20001532:	8b62      	ldrh	r2, [r4, #26]
20001534:	4356      	muls	r6, r2
20001536:	6964      	ldr	r4, [r4, #20]
20001538:	19a4      	adds	r4, r4, r6
2000153a:	6f6e      	ldr	r6, [r5, #116]	; 0x74
2000153c:	6f2d      	ldr	r5, [r5, #112]	; 0x70
2000153e:	197f      	adds	r7, r7, r5
20001540:	4236      	tst	r6, r6
20001542:	d011      	beq.n	20001568 <RenderTile2+0x64>
20001544:	1b9d      	subs	r5, r3, r6
20001546:	1949      	adds	r1, r1, r5
20001548:	9a01      	ldr	r2, [sp, #4]
2000154a:	1b52      	subs	r2, r2, r5
2000154c:	9201      	str	r2, [sp, #4]
2000154e:	08ad      	lsrs	r5, r5, #2
20001550:	c020      	stmia	r0!, {r5}
20001552:	783a      	ldrb	r2, [r7, #0]
20001554:	3701      	adds	r7, #1
20001556:	435a      	muls	r2, r3
20001558:	4422      	add	r2, r4
2000155a:	4432      	add	r2, r6
2000155c:	c004      	stmia	r0!, {r2}
2000155e:	9a00      	ldr	r2, [sp, #0]
20001560:	4291      	cmp	r1, r2
20001562:	d301      	bcc.n	20001568 <RenderTile2+0x64>
20001564:	2100      	movs	r1, #0
20001566:	4677      	mov	r7, lr
20001568:	9a00      	ldr	r2, [sp, #0]
2000156a:	1a55      	subs	r5, r2, r1
2000156c:	9a01      	ldr	r2, [sp, #4]

2000156e <RenderTile_OutLoop>:
2000156e:	4295      	cmp	r5, r2
20001570:	d900      	bls.n	20001574 <RenderTile_OutLoop+0x6>
20001572:	4615      	mov	r5, r2
20001574:	429d      	cmp	r5, r3
20001576:	d20d      	bcs.n	20001594 <RenderTile_Last+0x16>
20001578:	2d04      	cmp	r5, #4
2000157a:	d30a      	bcc.n	20001592 <RenderTile_Last+0x14>
2000157c:	4629      	mov	r1, r5

2000157e <RenderTile_Last>:
2000157e:	088e      	lsrs	r6, r1, #2
20001580:	c040      	stmia	r0!, {r6}
20001582:	783e      	ldrb	r6, [r7, #0]
20001584:	3701      	adds	r7, #1
20001586:	435e      	muls	r6, r3
20001588:	4426      	add	r6, r4
2000158a:	c040      	stmia	r0!, {r6}
2000158c:	4677      	mov	r7, lr
2000158e:	429d      	cmp	r5, r3
20001590:	d2ed      	bcs.n	2000156e <RenderTile_OutLoop>
20001592:	bdfc      	pop	{r2, r3, r4, r5, r6, r7, pc}
20001594:	08a9      	lsrs	r1, r5, #2
20001596:	008d      	lsls	r5, r1, #2
20001598:	1b52      	subs	r2, r2, r5
2000159a:	089d      	lsrs	r5, r3, #2
2000159c:	1b49      	subs	r1, r1, r5
2000159e:	3101      	adds	r1, #1

200015a0 <RenderTile_InLoop>:
200015a0:	783e      	ldrb	r6, [r7, #0]
200015a2:	3701      	adds	r7, #1
200015a4:	435e      	muls	r6, r3
200015a6:	4426      	add	r6, r4
200015a8:	c060      	stmia	r0!, {r5, r6}
200015aa:	1b49      	subs	r1, r1, r5
200015ac:	d8f8      	bhi.n	200015a0 <RenderTile_InLoop>
200015ae:	1949      	adds	r1, r1, r5
200015b0:	3901      	subs	r1, #1
200015b2:	9d00      	ldr	r5, [sp, #0]
200015b4:	0089      	lsls	r1, r1, #2
200015b6:	d1e2      	bne.n	2000157e <RenderTile_Last>
200015b8:	4677      	mov	r7, lr
200015ba:	e7d8      	b.n	2000156e <RenderTile_OutLoop>

200015bc <RenderTile_pSioBase>:
200015bc:	d0000000 	.word	0xd0000000

200015c0 <RenderTilePersp>:
200015c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
200015c2:	9c06      	ldr	r4, [sp, #24]
200015c4:	4e5c      	ldr	r6, [pc, #368]	; (20001738 <RenderTilePersp_pSioBase>)
200015c6:	8965      	ldrh	r5, [r4, #10]
200015c8:	7ce1      	ldrb	r1, [r4, #19]
200015ca:	b249      	sxtb	r1, r1
200015cc:	0089      	lsls	r1, r1, #2
200015ce:	d107      	bne.n	200015e0 <RenderTilePersp+0x20>
200015d0:	086d      	lsrs	r5, r5, #1
200015d2:	1b52      	subs	r2, r2, r5
200015d4:	4694      	mov	ip, r2
200015d6:	2501      	movs	r5, #1
200015d8:	6675      	str	r5, [r6, #100]	; 0x64
200015da:	032d      	lsls	r5, r5, #12
200015dc:	6635      	str	r5, [r6, #96]	; 0x60
200015de:	e009      	b.n	200015f4 <RenderTilePersp+0x34>
200015e0:	d502      	bpl.n	200015e8 <RenderTilePersp+0x28>
200015e2:	1aaa      	subs	r2, r5, r2
200015e4:	3a01      	subs	r2, #1
200015e6:	4249      	negs	r1, r1
200015e8:	1b57      	subs	r7, r2, r5
200015ea:	46bc      	mov	ip, r7
200015ec:	032d      	lsls	r5, r5, #12
200015ee:	6635      	str	r5, [r6, #96]	; 0x60
200015f0:	1852      	adds	r2, r2, r1
200015f2:	6672      	str	r2, [r6, #100]	; 0x64
200015f4:	085d      	lsrs	r5, r3, #1
200015f6:	426d      	negs	r5, r5
200015f8:	46ae      	mov	lr, r5
200015fa:	089f      	lsrs	r7, r3, #2
200015fc:	4b4f      	ldr	r3, [pc, #316]	; (2000173c <RenderTilePersp_Interp>)
200015fe:	68e6      	ldr	r6, [r4, #12]
20001600:	611e      	str	r6, [r3, #16]
20001602:	4e4f      	ldr	r6, [pc, #316]	; (20001740 <RenderTilePersp_Ctrl>)
20001604:	7ca1      	ldrb	r1, [r4, #18]
20001606:	9100      	str	r1, [sp, #0]
20001608:	1876      	adds	r6, r6, r1
2000160a:	78a2      	ldrb	r2, [r4, #2]
2000160c:	1e55      	subs	r5, r2, #1
2000160e:	02ad      	lsls	r5, r5, #10
20001610:	432e      	orrs	r6, r5
20001612:	62de      	str	r6, [r3, #44]	; 0x2c
20001614:	1ab6      	subs	r6, r6, r2
20001616:	0152      	lsls	r2, r2, #5
20001618:	4316      	orrs	r6, r2
2000161a:	78e2      	ldrb	r2, [r4, #3]
2000161c:	0292      	lsls	r2, r2, #10
2000161e:	18b6      	adds	r6, r6, r2
20001620:	631e      	str	r6, [r3, #48]	; 0x30
20001622:	6966      	ldr	r6, [r4, #20]
20001624:	651e      	str	r6, [r3, #80]	; 0x50
20001626:	4e46      	ldr	r6, [pc, #280]	; (20001740 <RenderTilePersp_Ctrl>)
20001628:	1e4d      	subs	r5, r1, #1
2000162a:	02ad      	lsls	r5, r5, #10
2000162c:	432e      	orrs	r6, r5
2000162e:	66de      	str	r6, [r3, #108]	; 0x6c
20001630:	1a76      	subs	r6, r6, r1
20001632:	014d      	lsls	r5, r1, #5
20001634:	432e      	orrs	r6, r5
20001636:	0289      	lsls	r1, r1, #10
20001638:	1876      	adds	r6, r6, r1
2000163a:	671e      	str	r6, [r3, #112]	; 0x70
2000163c:	69a4      	ldr	r4, [r4, #24]
2000163e:	493e      	ldr	r1, [pc, #248]	; (20001738 <RenderTilePersp_pSioBase>)
20001640:	6f09      	ldr	r1, [r1, #112]	; 0x70
20001642:	6825      	ldr	r5, [r4, #0]
20001644:	434d      	muls	r5, r1
20001646:	132d      	asrs	r5, r5, #12
20001648:	609d      	str	r5, [r3, #8]
2000164a:	649d      	str	r5, [r3, #72]	; 0x48
2000164c:	68e6      	ldr	r6, [r4, #12]
2000164e:	434e      	muls	r6, r1
20001650:	1336      	asrs	r6, r6, #12
20001652:	60de      	str	r6, [r3, #12]
20001654:	64de      	str	r6, [r3, #76]	; 0x4c
20001656:	4672      	mov	r2, lr
20001658:	4355      	muls	r5, r2
2000165a:	4372      	muls	r2, r6
2000165c:	468e      	mov	lr, r1
2000165e:	6866      	ldr	r6, [r4, #4]
20001660:	4371      	muls	r1, r6
20001662:	1309      	asrs	r1, r1, #12
20001664:	4666      	mov	r6, ip
20001666:	4371      	muls	r1, r6
20001668:	186d      	adds	r5, r5, r1
2000166a:	68a1      	ldr	r1, [r4, #8]
2000166c:	186d      	adds	r5, r5, r1
2000166e:	601d      	str	r5, [r3, #0]
20001670:	641d      	str	r5, [r3, #64]	; 0x40
20001672:	6921      	ldr	r1, [r4, #16]
20001674:	4675      	mov	r5, lr
20001676:	4369      	muls	r1, r5
20001678:	1309      	asrs	r1, r1, #12
2000167a:	4371      	muls	r1, r6
2000167c:	1852      	adds	r2, r2, r1
2000167e:	6961      	ldr	r1, [r4, #20]
20001680:	1852      	adds	r2, r2, r1
20001682:	605a      	str	r2, [r3, #4]
20001684:	645a      	str	r2, [r3, #68]	; 0x44
20001686:	9e00      	ldr	r6, [sp, #0]
20001688:	0076      	lsls	r6, r6, #1
2000168a:	087f      	lsrs	r7, r7, #1
2000168c:	d31a      	bcc.n	200016c4 <RenderTilePersp+0x104>
2000168e:	69dc      	ldr	r4, [r3, #28]
20001690:	7824      	ldrb	r4, [r4, #0]
20001692:	40b4      	lsls	r4, r6
20001694:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
20001696:	5d29      	ldrb	r1, [r5, r4]
20001698:	69dc      	ldr	r4, [r3, #28]
2000169a:	7824      	ldrb	r4, [r4, #0]
2000169c:	40b4      	lsls	r4, r6
2000169e:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
200016a0:	5d2c      	ldrb	r4, [r5, r4]
200016a2:	0224      	lsls	r4, r4, #8
200016a4:	4321      	orrs	r1, r4
200016a6:	69dc      	ldr	r4, [r3, #28]
200016a8:	7824      	ldrb	r4, [r4, #0]
200016aa:	40b4      	lsls	r4, r6
200016ac:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
200016ae:	5d2c      	ldrb	r4, [r5, r4]
200016b0:	0424      	lsls	r4, r4, #16
200016b2:	4321      	orrs	r1, r4
200016b4:	69dc      	ldr	r4, [r3, #28]
200016b6:	7824      	ldrb	r4, [r4, #0]
200016b8:	40b4      	lsls	r4, r6
200016ba:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
200016bc:	5d2c      	ldrb	r4, [r5, r4]
200016be:	0624      	lsls	r4, r4, #24
200016c0:	4321      	orrs	r1, r4
200016c2:	c002      	stmia	r0!, {r1}
200016c4:	423f      	tst	r7, r7
200016c6:	d036      	beq.n	20001736 <RenderTilePersp+0x176>
200016c8:	69dc      	ldr	r4, [r3, #28]
200016ca:	7824      	ldrb	r4, [r4, #0]
200016cc:	40b4      	lsls	r4, r6
200016ce:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
200016d0:	5d29      	ldrb	r1, [r5, r4]
200016d2:	69dc      	ldr	r4, [r3, #28]
200016d4:	7824      	ldrb	r4, [r4, #0]
200016d6:	40b4      	lsls	r4, r6
200016d8:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
200016da:	5d2c      	ldrb	r4, [r5, r4]
200016dc:	0224      	lsls	r4, r4, #8
200016de:	4321      	orrs	r1, r4
200016e0:	69dc      	ldr	r4, [r3, #28]
200016e2:	7824      	ldrb	r4, [r4, #0]
200016e4:	40b4      	lsls	r4, r6
200016e6:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
200016e8:	5d2c      	ldrb	r4, [r5, r4]
200016ea:	0424      	lsls	r4, r4, #16
200016ec:	4321      	orrs	r1, r4
200016ee:	69dc      	ldr	r4, [r3, #28]
200016f0:	7824      	ldrb	r4, [r4, #0]
200016f2:	40b4      	lsls	r4, r6
200016f4:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
200016f6:	5d2c      	ldrb	r4, [r5, r4]
200016f8:	0624      	lsls	r4, r4, #24
200016fa:	4321      	orrs	r1, r4
200016fc:	69dc      	ldr	r4, [r3, #28]
200016fe:	7824      	ldrb	r4, [r4, #0]
20001700:	40b4      	lsls	r4, r6
20001702:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
20001704:	5d2a      	ldrb	r2, [r5, r4]
20001706:	69dc      	ldr	r4, [r3, #28]
20001708:	7824      	ldrb	r4, [r4, #0]
2000170a:	40b4      	lsls	r4, r6
2000170c:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
2000170e:	5d2c      	ldrb	r4, [r5, r4]
20001710:	0224      	lsls	r4, r4, #8
20001712:	4322      	orrs	r2, r4
20001714:	69dc      	ldr	r4, [r3, #28]
20001716:	7824      	ldrb	r4, [r4, #0]
20001718:	40b4      	lsls	r4, r6
2000171a:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
2000171c:	5d2c      	ldrb	r4, [r5, r4]
2000171e:	0424      	lsls	r4, r4, #16
20001720:	4322      	orrs	r2, r4
20001722:	69dc      	ldr	r4, [r3, #28]
20001724:	7824      	ldrb	r4, [r4, #0]
20001726:	40b4      	lsls	r4, r6
20001728:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
2000172a:	5d2c      	ldrb	r4, [r5, r4]
2000172c:	0624      	lsls	r4, r4, #24
2000172e:	4322      	orrs	r2, r4
20001730:	c006      	stmia	r0!, {r1, r2}
20001732:	3f01      	subs	r7, #1
20001734:	d1c8      	bne.n	200016c8 <RenderTilePersp+0x108>
20001736:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

20001738 <RenderTilePersp_pSioBase>:
20001738:	d0000000 	.word	0xd0000000

2000173c <RenderTilePersp_Interp>:
2000173c:	d0000080 	.word	0xd0000080

20001740 <RenderTilePersp_Ctrl>:
20001740:	0004000c 	.word	0x0004000c

20001744 <RenderTilePersp15>:
20001744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
20001746:	9c06      	ldr	r4, [sp, #24]
20001748:	4e57      	ldr	r6, [pc, #348]	; (200018a8 <RenderTilePersp_pSioBase>)
2000174a:	8965      	ldrh	r5, [r4, #10]
2000174c:	7ce1      	ldrb	r1, [r4, #19]
2000174e:	b249      	sxtb	r1, r1
20001750:	0089      	lsls	r1, r1, #2
20001752:	d107      	bne.n	20001764 <RenderTilePersp15+0x20>
20001754:	086d      	lsrs	r5, r5, #1
20001756:	1b52      	subs	r2, r2, r5
20001758:	4694      	mov	ip, r2
2000175a:	2501      	movs	r5, #1
2000175c:	6675      	str	r5, [r6, #100]	; 0x64
2000175e:	032d      	lsls	r5, r5, #12
20001760:	6635      	str	r5, [r6, #96]	; 0x60
20001762:	e009      	b.n	20001778 <RenderTilePersp15+0x34>
20001764:	d502      	bpl.n	2000176c <RenderTilePersp15+0x28>
20001766:	1aaa      	subs	r2, r5, r2
20001768:	3a01      	subs	r2, #1
2000176a:	4249      	negs	r1, r1
2000176c:	1b57      	subs	r7, r2, r5
2000176e:	46bc      	mov	ip, r7
20001770:	032d      	lsls	r5, r5, #12
20001772:	6635      	str	r5, [r6, #96]	; 0x60
20001774:	1852      	adds	r2, r2, r1
20001776:	6672      	str	r2, [r6, #100]	; 0x64
20001778:	085d      	lsrs	r5, r3, #1
2000177a:	426d      	negs	r5, r5
2000177c:	46ae      	mov	lr, r5
2000177e:	089f      	lsrs	r7, r3, #2
20001780:	4b4a      	ldr	r3, [pc, #296]	; (200018ac <RenderTilePersp_Interp>)
20001782:	68e6      	ldr	r6, [r4, #12]
20001784:	611e      	str	r6, [r3, #16]
20001786:	4e4a      	ldr	r6, [pc, #296]	; (200018b0 <RenderTilePersp_Ctrl>)
20001788:	7ca1      	ldrb	r1, [r4, #18]
2000178a:	9100      	str	r1, [sp, #0]
2000178c:	1876      	adds	r6, r6, r1
2000178e:	78a2      	ldrb	r2, [r4, #2]
20001790:	1e55      	subs	r5, r2, #1
20001792:	02ad      	lsls	r5, r5, #10
20001794:	432e      	orrs	r6, r5
20001796:	62de      	str	r6, [r3, #44]	; 0x2c
20001798:	1ab6      	subs	r6, r6, r2
2000179a:	0152      	lsls	r2, r2, #5
2000179c:	4316      	orrs	r6, r2
2000179e:	78e2      	ldrb	r2, [r4, #3]
200017a0:	0292      	lsls	r2, r2, #10
200017a2:	18b6      	adds	r6, r6, r2
200017a4:	631e      	str	r6, [r3, #48]	; 0x30
200017a6:	6966      	ldr	r6, [r4, #20]
200017a8:	651e      	str	r6, [r3, #80]	; 0x50
200017aa:	4e41      	ldr	r6, [pc, #260]	; (200018b0 <RenderTilePersp_Ctrl>)
200017ac:	1e4d      	subs	r5, r1, #1
200017ae:	02ad      	lsls	r5, r5, #10
200017b0:	432e      	orrs	r6, r5
200017b2:	66de      	str	r6, [r3, #108]	; 0x6c
200017b4:	1a76      	subs	r6, r6, r1
200017b6:	014d      	lsls	r5, r1, #5
200017b8:	432e      	orrs	r6, r5
200017ba:	0289      	lsls	r1, r1, #10
200017bc:	1876      	adds	r6, r6, r1
200017be:	671e      	str	r6, [r3, #112]	; 0x70
200017c0:	69a4      	ldr	r4, [r4, #24]
200017c2:	4939      	ldr	r1, [pc, #228]	; (200018a8 <RenderTilePersp_pSioBase>)
200017c4:	6f09      	ldr	r1, [r1, #112]	; 0x70
200017c6:	6825      	ldr	r5, [r4, #0]
200017c8:	434d      	muls	r5, r1
200017ca:	132d      	asrs	r5, r5, #12
200017cc:	106a      	asrs	r2, r5, #1
200017ce:	1952      	adds	r2, r2, r5
200017d0:	609a      	str	r2, [r3, #8]
200017d2:	649a      	str	r2, [r3, #72]	; 0x48
200017d4:	68e6      	ldr	r6, [r4, #12]
200017d6:	434e      	muls	r6, r1
200017d8:	1336      	asrs	r6, r6, #12
200017da:	1072      	asrs	r2, r6, #1
200017dc:	1992      	adds	r2, r2, r6
200017de:	60da      	str	r2, [r3, #12]
200017e0:	64da      	str	r2, [r3, #76]	; 0x4c
200017e2:	4672      	mov	r2, lr
200017e4:	4355      	muls	r5, r2
200017e6:	4372      	muls	r2, r6
200017e8:	468e      	mov	lr, r1
200017ea:	6866      	ldr	r6, [r4, #4]
200017ec:	4371      	muls	r1, r6
200017ee:	1309      	asrs	r1, r1, #12
200017f0:	4666      	mov	r6, ip
200017f2:	4371      	muls	r1, r6
200017f4:	186d      	adds	r5, r5, r1
200017f6:	68a1      	ldr	r1, [r4, #8]
200017f8:	186d      	adds	r5, r5, r1
200017fa:	601d      	str	r5, [r3, #0]
200017fc:	641d      	str	r5, [r3, #64]	; 0x40
200017fe:	6921      	ldr	r1, [r4, #16]
20001800:	4675      	mov	r5, lr
20001802:	4369      	muls	r1, r5
20001804:	1309      	asrs	r1, r1, #12
20001806:	4371      	muls	r1, r6
20001808:	1852      	adds	r2, r2, r1
2000180a:	6961      	ldr	r1, [r4, #20]
2000180c:	1852      	adds	r2, r2, r1
2000180e:	605a      	str	r2, [r3, #4]
20001810:	645a      	str	r2, [r3, #68]	; 0x44
20001812:	9e00      	ldr	r6, [sp, #0]
20001814:	0076      	lsls	r6, r6, #1
20001816:	087f      	lsrs	r7, r7, #1
20001818:	d315      	bcc.n	20001846 <RenderTilePersp15+0x102>
2000181a:	69dc      	ldr	r4, [r3, #28]
2000181c:	7824      	ldrb	r4, [r4, #0]
2000181e:	40b4      	lsls	r4, r6
20001820:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
20001822:	5d29      	ldrb	r1, [r5, r4]
20001824:	69dc      	ldr	r4, [r3, #28]
20001826:	7824      	ldrb	r4, [r4, #0]
20001828:	40b4      	lsls	r4, r6
2000182a:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
2000182c:	5d2c      	ldrb	r4, [r5, r4]
2000182e:	0224      	lsls	r4, r4, #8
20001830:	4321      	orrs	r1, r4
20001832:	69dc      	ldr	r4, [r3, #28]
20001834:	7824      	ldrb	r4, [r4, #0]
20001836:	40b4      	lsls	r4, r6
20001838:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
2000183a:	5d2c      	ldrb	r4, [r5, r4]
2000183c:	0424      	lsls	r4, r4, #16
2000183e:	4321      	orrs	r1, r4
20001840:	0224      	lsls	r4, r4, #8
20001842:	4321      	orrs	r1, r4
20001844:	c002      	stmia	r0!, {r1}
20001846:	423f      	tst	r7, r7
20001848:	d02c      	beq.n	200018a4 <RenderTilePersp15+0x160>
2000184a:	69dc      	ldr	r4, [r3, #28]
2000184c:	7824      	ldrb	r4, [r4, #0]
2000184e:	40b4      	lsls	r4, r6
20001850:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
20001852:	5d29      	ldrb	r1, [r5, r4]
20001854:	69dc      	ldr	r4, [r3, #28]
20001856:	7824      	ldrb	r4, [r4, #0]
20001858:	40b4      	lsls	r4, r6
2000185a:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
2000185c:	5d2c      	ldrb	r4, [r5, r4]
2000185e:	0224      	lsls	r4, r4, #8
20001860:	4321      	orrs	r1, r4
20001862:	69dc      	ldr	r4, [r3, #28]
20001864:	7824      	ldrb	r4, [r4, #0]
20001866:	40b4      	lsls	r4, r6
20001868:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
2000186a:	5d2c      	ldrb	r4, [r5, r4]
2000186c:	0424      	lsls	r4, r4, #16
2000186e:	4321      	orrs	r1, r4
20001870:	0224      	lsls	r4, r4, #8
20001872:	4321      	orrs	r1, r4
20001874:	69dc      	ldr	r4, [r3, #28]
20001876:	7824      	ldrb	r4, [r4, #0]
20001878:	40b4      	lsls	r4, r6
2000187a:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
2000187c:	5d2a      	ldrb	r2, [r5, r4]
2000187e:	69dc      	ldr	r4, [r3, #28]
20001880:	7824      	ldrb	r4, [r4, #0]
20001882:	40b4      	lsls	r4, r6
20001884:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
20001886:	5d2c      	ldrb	r4, [r5, r4]
20001888:	0224      	lsls	r4, r4, #8
2000188a:	4322      	orrs	r2, r4
2000188c:	69dc      	ldr	r4, [r3, #28]
2000188e:	7824      	ldrb	r4, [r4, #0]
20001890:	40b4      	lsls	r4, r6
20001892:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
20001894:	5d2c      	ldrb	r4, [r5, r4]
20001896:	0424      	lsls	r4, r4, #16
20001898:	4322      	orrs	r2, r4
2000189a:	0224      	lsls	r4, r4, #8
2000189c:	4322      	orrs	r2, r4
2000189e:	c006      	stmia	r0!, {r1, r2}
200018a0:	3f01      	subs	r7, #1
200018a2:	d1d2      	bne.n	2000184a <RenderTilePersp15+0x106>
200018a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
200018a6:	46c0      	nop			; (mov r8, r8)

200018a8 <RenderTilePersp_pSioBase>:
200018a8:	d0000000 	.word	0xd0000000

200018ac <RenderTilePersp_Interp>:
200018ac:	d0000080 	.word	0xd0000080

200018b0 <RenderTilePersp_Ctrl>:
200018b0:	0004000c 	.word	0x0004000c

200018b4 <RenderTilePersp2>:
200018b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
200018b6:	9c06      	ldr	r4, [sp, #24]
200018b8:	4e4e      	ldr	r6, [pc, #312]	; (200019f4 <RenderTilePersp_pSioBase>)
200018ba:	8965      	ldrh	r5, [r4, #10]
200018bc:	7ce1      	ldrb	r1, [r4, #19]
200018be:	b249      	sxtb	r1, r1
200018c0:	0089      	lsls	r1, r1, #2
200018c2:	d107      	bne.n	200018d4 <RenderTilePersp2+0x20>
200018c4:	086d      	lsrs	r5, r5, #1
200018c6:	1b52      	subs	r2, r2, r5
200018c8:	4694      	mov	ip, r2
200018ca:	2501      	movs	r5, #1
200018cc:	6675      	str	r5, [r6, #100]	; 0x64
200018ce:	032d      	lsls	r5, r5, #12
200018d0:	6635      	str	r5, [r6, #96]	; 0x60
200018d2:	e009      	b.n	200018e8 <RenderTilePersp2+0x34>
200018d4:	d502      	bpl.n	200018dc <RenderTilePersp2+0x28>
200018d6:	1aaa      	subs	r2, r5, r2
200018d8:	3a01      	subs	r2, #1
200018da:	4249      	negs	r1, r1
200018dc:	1b57      	subs	r7, r2, r5
200018de:	46bc      	mov	ip, r7
200018e0:	032d      	lsls	r5, r5, #12
200018e2:	6635      	str	r5, [r6, #96]	; 0x60
200018e4:	1852      	adds	r2, r2, r1
200018e6:	6672      	str	r2, [r6, #100]	; 0x64
200018e8:	085d      	lsrs	r5, r3, #1
200018ea:	426d      	negs	r5, r5
200018ec:	46ae      	mov	lr, r5
200018ee:	089f      	lsrs	r7, r3, #2
200018f0:	4b41      	ldr	r3, [pc, #260]	; (200019f8 <RenderTilePersp_Interp>)
200018f2:	68e6      	ldr	r6, [r4, #12]
200018f4:	611e      	str	r6, [r3, #16]
200018f6:	4e41      	ldr	r6, [pc, #260]	; (200019fc <RenderTilePersp_Ctrl>)
200018f8:	7ca1      	ldrb	r1, [r4, #18]
200018fa:	9100      	str	r1, [sp, #0]
200018fc:	1876      	adds	r6, r6, r1
200018fe:	78a2      	ldrb	r2, [r4, #2]
20001900:	1e55      	subs	r5, r2, #1
20001902:	02ad      	lsls	r5, r5, #10
20001904:	432e      	orrs	r6, r5
20001906:	62de      	str	r6, [r3, #44]	; 0x2c
20001908:	1ab6      	subs	r6, r6, r2
2000190a:	0152      	lsls	r2, r2, #5
2000190c:	4316      	orrs	r6, r2
2000190e:	78e2      	ldrb	r2, [r4, #3]
20001910:	0292      	lsls	r2, r2, #10
20001912:	18b6      	adds	r6, r6, r2
20001914:	631e      	str	r6, [r3, #48]	; 0x30
20001916:	6966      	ldr	r6, [r4, #20]
20001918:	651e      	str	r6, [r3, #80]	; 0x50
2000191a:	4e38      	ldr	r6, [pc, #224]	; (200019fc <RenderTilePersp_Ctrl>)
2000191c:	1e4d      	subs	r5, r1, #1
2000191e:	02ad      	lsls	r5, r5, #10
20001920:	432e      	orrs	r6, r5
20001922:	66de      	str	r6, [r3, #108]	; 0x6c
20001924:	1a76      	subs	r6, r6, r1
20001926:	014d      	lsls	r5, r1, #5
20001928:	432e      	orrs	r6, r5
2000192a:	0289      	lsls	r1, r1, #10
2000192c:	1876      	adds	r6, r6, r1
2000192e:	671e      	str	r6, [r3, #112]	; 0x70
20001930:	69a4      	ldr	r4, [r4, #24]
20001932:	4930      	ldr	r1, [pc, #192]	; (200019f4 <RenderTilePersp_pSioBase>)
20001934:	6f09      	ldr	r1, [r1, #112]	; 0x70
20001936:	6825      	ldr	r5, [r4, #0]
20001938:	434d      	muls	r5, r1
2000193a:	12ed      	asrs	r5, r5, #11
2000193c:	609d      	str	r5, [r3, #8]
2000193e:	649d      	str	r5, [r3, #72]	; 0x48
20001940:	106d      	asrs	r5, r5, #1
20001942:	68e6      	ldr	r6, [r4, #12]
20001944:	434e      	muls	r6, r1
20001946:	12f6      	asrs	r6, r6, #11
20001948:	60de      	str	r6, [r3, #12]
2000194a:	64de      	str	r6, [r3, #76]	; 0x4c
2000194c:	1076      	asrs	r6, r6, #1
2000194e:	4672      	mov	r2, lr
20001950:	4355      	muls	r5, r2
20001952:	4372      	muls	r2, r6
20001954:	468e      	mov	lr, r1
20001956:	6866      	ldr	r6, [r4, #4]
20001958:	4371      	muls	r1, r6
2000195a:	1309      	asrs	r1, r1, #12
2000195c:	4666      	mov	r6, ip
2000195e:	4371      	muls	r1, r6
20001960:	186d      	adds	r5, r5, r1
20001962:	68a1      	ldr	r1, [r4, #8]
20001964:	186d      	adds	r5, r5, r1
20001966:	601d      	str	r5, [r3, #0]
20001968:	641d      	str	r5, [r3, #64]	; 0x40
2000196a:	6921      	ldr	r1, [r4, #16]
2000196c:	4675      	mov	r5, lr
2000196e:	4369      	muls	r1, r5
20001970:	1309      	asrs	r1, r1, #12
20001972:	4371      	muls	r1, r6
20001974:	1852      	adds	r2, r2, r1
20001976:	6961      	ldr	r1, [r4, #20]
20001978:	1852      	adds	r2, r2, r1
2000197a:	605a      	str	r2, [r3, #4]
2000197c:	645a      	str	r2, [r3, #68]	; 0x44
2000197e:	9e00      	ldr	r6, [sp, #0]
20001980:	0076      	lsls	r6, r6, #1
20001982:	087f      	lsrs	r7, r7, #1
20001984:	d310      	bcc.n	200019a8 <RenderTilePersp2+0xf4>
20001986:	69dc      	ldr	r4, [r3, #28]
20001988:	7824      	ldrb	r4, [r4, #0]
2000198a:	40b4      	lsls	r4, r6
2000198c:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
2000198e:	5d29      	ldrb	r1, [r5, r4]
20001990:	020c      	lsls	r4, r1, #8
20001992:	4321      	orrs	r1, r4
20001994:	69dc      	ldr	r4, [r3, #28]
20001996:	7824      	ldrb	r4, [r4, #0]
20001998:	40b4      	lsls	r4, r6
2000199a:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
2000199c:	5d2c      	ldrb	r4, [r5, r4]
2000199e:	0424      	lsls	r4, r4, #16
200019a0:	4321      	orrs	r1, r4
200019a2:	0224      	lsls	r4, r4, #8
200019a4:	4321      	orrs	r1, r4
200019a6:	c002      	stmia	r0!, {r1}
200019a8:	423f      	tst	r7, r7
200019aa:	d022      	beq.n	200019f2 <RenderTilePersp2+0x13e>
200019ac:	69dc      	ldr	r4, [r3, #28]
200019ae:	7824      	ldrb	r4, [r4, #0]
200019b0:	40b4      	lsls	r4, r6
200019b2:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
200019b4:	5d29      	ldrb	r1, [r5, r4]
200019b6:	020c      	lsls	r4, r1, #8
200019b8:	4321      	orrs	r1, r4
200019ba:	69dc      	ldr	r4, [r3, #28]
200019bc:	7824      	ldrb	r4, [r4, #0]
200019be:	40b4      	lsls	r4, r6
200019c0:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
200019c2:	5d2c      	ldrb	r4, [r5, r4]
200019c4:	0424      	lsls	r4, r4, #16
200019c6:	4321      	orrs	r1, r4
200019c8:	0224      	lsls	r4, r4, #8
200019ca:	4321      	orrs	r1, r4
200019cc:	69dc      	ldr	r4, [r3, #28]
200019ce:	7824      	ldrb	r4, [r4, #0]
200019d0:	40b4      	lsls	r4, r6
200019d2:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
200019d4:	5d2a      	ldrb	r2, [r5, r4]
200019d6:	0214      	lsls	r4, r2, #8
200019d8:	4322      	orrs	r2, r4
200019da:	69dc      	ldr	r4, [r3, #28]
200019dc:	7824      	ldrb	r4, [r4, #0]
200019de:	40b4      	lsls	r4, r6
200019e0:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
200019e2:	5d2c      	ldrb	r4, [r5, r4]
200019e4:	0424      	lsls	r4, r4, #16
200019e6:	4322      	orrs	r2, r4
200019e8:	0224      	lsls	r4, r4, #8
200019ea:	4322      	orrs	r2, r4
200019ec:	c006      	stmia	r0!, {r1, r2}
200019ee:	3f01      	subs	r7, #1
200019f0:	d1dc      	bne.n	200019ac <RenderTilePersp2+0xf8>
200019f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

200019f4 <RenderTilePersp_pSioBase>:
200019f4:	d0000000 	.word	0xd0000000

200019f8 <RenderTilePersp_Interp>:
200019f8:	d0000080 	.word	0xd0000080

200019fc <RenderTilePersp_Ctrl>:
200019fc:	0004000c 	.word	0x0004000c

20001a00 <RenderTilePersp3>:
20001a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
20001a02:	9c06      	ldr	r4, [sp, #24]
20001a04:	4e48      	ldr	r6, [pc, #288]	; (20001b28 <RenderTilePersp_pSioBase>)
20001a06:	8965      	ldrh	r5, [r4, #10]
20001a08:	7ce1      	ldrb	r1, [r4, #19]
20001a0a:	b249      	sxtb	r1, r1
20001a0c:	0089      	lsls	r1, r1, #2
20001a0e:	d107      	bne.n	20001a20 <RenderTilePersp3+0x20>
20001a10:	086d      	lsrs	r5, r5, #1
20001a12:	1b52      	subs	r2, r2, r5
20001a14:	4694      	mov	ip, r2
20001a16:	2501      	movs	r5, #1
20001a18:	6675      	str	r5, [r6, #100]	; 0x64
20001a1a:	032d      	lsls	r5, r5, #12
20001a1c:	6635      	str	r5, [r6, #96]	; 0x60
20001a1e:	e009      	b.n	20001a34 <RenderTilePersp3+0x34>
20001a20:	d502      	bpl.n	20001a28 <RenderTilePersp3+0x28>
20001a22:	1aaa      	subs	r2, r5, r2
20001a24:	3a01      	subs	r2, #1
20001a26:	4249      	negs	r1, r1
20001a28:	1b57      	subs	r7, r2, r5
20001a2a:	46bc      	mov	ip, r7
20001a2c:	032d      	lsls	r5, r5, #12
20001a2e:	6635      	str	r5, [r6, #96]	; 0x60
20001a30:	1852      	adds	r2, r2, r1
20001a32:	6672      	str	r2, [r6, #100]	; 0x64
20001a34:	085d      	lsrs	r5, r3, #1
20001a36:	426d      	negs	r5, r5
20001a38:	46ae      	mov	lr, r5
20001a3a:	089f      	lsrs	r7, r3, #2
20001a3c:	4b3b      	ldr	r3, [pc, #236]	; (20001b2c <RenderTilePersp_Interp>)
20001a3e:	68e6      	ldr	r6, [r4, #12]
20001a40:	611e      	str	r6, [r3, #16]
20001a42:	4e3b      	ldr	r6, [pc, #236]	; (20001b30 <RenderTilePersp_Ctrl>)
20001a44:	7ca1      	ldrb	r1, [r4, #18]
20001a46:	9100      	str	r1, [sp, #0]
20001a48:	1876      	adds	r6, r6, r1
20001a4a:	78a2      	ldrb	r2, [r4, #2]
20001a4c:	1e55      	subs	r5, r2, #1
20001a4e:	02ad      	lsls	r5, r5, #10
20001a50:	432e      	orrs	r6, r5
20001a52:	62de      	str	r6, [r3, #44]	; 0x2c
20001a54:	1ab6      	subs	r6, r6, r2
20001a56:	0152      	lsls	r2, r2, #5
20001a58:	4316      	orrs	r6, r2
20001a5a:	78e2      	ldrb	r2, [r4, #3]
20001a5c:	0292      	lsls	r2, r2, #10
20001a5e:	18b6      	adds	r6, r6, r2
20001a60:	631e      	str	r6, [r3, #48]	; 0x30
20001a62:	6966      	ldr	r6, [r4, #20]
20001a64:	651e      	str	r6, [r3, #80]	; 0x50
20001a66:	4e32      	ldr	r6, [pc, #200]	; (20001b30 <RenderTilePersp_Ctrl>)
20001a68:	1e4d      	subs	r5, r1, #1
20001a6a:	02ad      	lsls	r5, r5, #10
20001a6c:	432e      	orrs	r6, r5
20001a6e:	66de      	str	r6, [r3, #108]	; 0x6c
20001a70:	1a76      	subs	r6, r6, r1
20001a72:	014d      	lsls	r5, r1, #5
20001a74:	432e      	orrs	r6, r5
20001a76:	0289      	lsls	r1, r1, #10
20001a78:	1876      	adds	r6, r6, r1
20001a7a:	671e      	str	r6, [r3, #112]	; 0x70
20001a7c:	69a4      	ldr	r4, [r4, #24]
20001a7e:	492a      	ldr	r1, [pc, #168]	; (20001b28 <RenderTilePersp_pSioBase>)
20001a80:	6f09      	ldr	r1, [r1, #112]	; 0x70
20001a82:	6825      	ldr	r5, [r4, #0]
20001a84:	434d      	muls	r5, r1
20001a86:	132d      	asrs	r5, r5, #12
20001a88:	006a      	lsls	r2, r5, #1
20001a8a:	1952      	adds	r2, r2, r5
20001a8c:	609a      	str	r2, [r3, #8]
20001a8e:	649a      	str	r2, [r3, #72]	; 0x48
20001a90:	68e6      	ldr	r6, [r4, #12]
20001a92:	434e      	muls	r6, r1
20001a94:	1336      	asrs	r6, r6, #12
20001a96:	0072      	lsls	r2, r6, #1
20001a98:	1992      	adds	r2, r2, r6
20001a9a:	60da      	str	r2, [r3, #12]
20001a9c:	64da      	str	r2, [r3, #76]	; 0x4c
20001a9e:	4672      	mov	r2, lr
20001aa0:	4355      	muls	r5, r2
20001aa2:	4372      	muls	r2, r6
20001aa4:	468e      	mov	lr, r1
20001aa6:	6866      	ldr	r6, [r4, #4]
20001aa8:	4371      	muls	r1, r6
20001aaa:	1309      	asrs	r1, r1, #12
20001aac:	4666      	mov	r6, ip
20001aae:	4371      	muls	r1, r6
20001ab0:	186d      	adds	r5, r5, r1
20001ab2:	68a1      	ldr	r1, [r4, #8]
20001ab4:	186d      	adds	r5, r5, r1
20001ab6:	601d      	str	r5, [r3, #0]
20001ab8:	641d      	str	r5, [r3, #64]	; 0x40
20001aba:	6921      	ldr	r1, [r4, #16]
20001abc:	4675      	mov	r5, lr
20001abe:	4369      	muls	r1, r5
20001ac0:	1309      	asrs	r1, r1, #12
20001ac2:	4371      	muls	r1, r6
20001ac4:	1852      	adds	r2, r2, r1
20001ac6:	6961      	ldr	r1, [r4, #20]
20001ac8:	1852      	adds	r2, r2, r1
20001aca:	605a      	str	r2, [r3, #4]
20001acc:	645a      	str	r2, [r3, #68]	; 0x44
20001ace:	9e00      	ldr	r6, [sp, #0]
20001ad0:	0076      	lsls	r6, r6, #1
20001ad2:	087f      	lsrs	r7, r7, #1
20001ad4:	d309      	bcc.n	20001aea <RenderTilePersp3+0xea>
20001ad6:	69dc      	ldr	r4, [r3, #28]
20001ad8:	7824      	ldrb	r4, [r4, #0]
20001ada:	40b4      	lsls	r4, r6
20001adc:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
20001ade:	5d29      	ldrb	r1, [r5, r4]
20001ae0:	020c      	lsls	r4, r1, #8
20001ae2:	4321      	orrs	r1, r4
20001ae4:	040c      	lsls	r4, r1, #16
20001ae6:	4321      	orrs	r1, r4
20001ae8:	c002      	stmia	r0!, {r1}
20001aea:	423f      	tst	r7, r7
20001aec:	d01b      	beq.n	20001b26 <RenderTilePersp3+0x126>
20001aee:	69dc      	ldr	r4, [r3, #28]
20001af0:	7824      	ldrb	r4, [r4, #0]
20001af2:	40b4      	lsls	r4, r6
20001af4:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
20001af6:	5d29      	ldrb	r1, [r5, r4]
20001af8:	020c      	lsls	r4, r1, #8
20001afa:	4321      	orrs	r1, r4
20001afc:	69dc      	ldr	r4, [r3, #28]
20001afe:	7824      	ldrb	r4, [r4, #0]
20001b00:	40b4      	lsls	r4, r6
20001b02:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
20001b04:	5d2c      	ldrb	r4, [r5, r4]
20001b06:	0424      	lsls	r4, r4, #16
20001b08:	4321      	orrs	r1, r4
20001b0a:	0224      	lsls	r4, r4, #8
20001b0c:	4321      	orrs	r1, r4
20001b0e:	69dc      	ldr	r4, [r3, #28]
20001b10:	7824      	ldrb	r4, [r4, #0]
20001b12:	40b4      	lsls	r4, r6
20001b14:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
20001b16:	5d2a      	ldrb	r2, [r5, r4]
20001b18:	0214      	lsls	r4, r2, #8
20001b1a:	4322      	orrs	r2, r4
20001b1c:	0414      	lsls	r4, r2, #16
20001b1e:	4322      	orrs	r2, r4
20001b20:	c006      	stmia	r0!, {r1, r2}
20001b22:	3f01      	subs	r7, #1
20001b24:	d1e3      	bne.n	20001aee <RenderTilePersp3+0xee>
20001b26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

20001b28 <RenderTilePersp_pSioBase>:
20001b28:	d0000000 	.word	0xd0000000

20001b2c <RenderTilePersp_Interp>:
20001b2c:	d0000080 	.word	0xd0000080

20001b30 <RenderTilePersp_Ctrl>:
20001b30:	0004000c 	.word	0x0004000c

20001b34 <RenderTilePersp4>:
20001b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
20001b36:	9c06      	ldr	r4, [sp, #24]
20001b38:	4e44      	ldr	r6, [pc, #272]	; (20001c4c <RenderTilePersp_pSioBase>)
20001b3a:	8965      	ldrh	r5, [r4, #10]
20001b3c:	7ce1      	ldrb	r1, [r4, #19]
20001b3e:	b249      	sxtb	r1, r1
20001b40:	0089      	lsls	r1, r1, #2
20001b42:	d107      	bne.n	20001b54 <RenderTilePersp4+0x20>
20001b44:	086d      	lsrs	r5, r5, #1
20001b46:	1b52      	subs	r2, r2, r5
20001b48:	4694      	mov	ip, r2
20001b4a:	2501      	movs	r5, #1
20001b4c:	6675      	str	r5, [r6, #100]	; 0x64
20001b4e:	032d      	lsls	r5, r5, #12
20001b50:	6635      	str	r5, [r6, #96]	; 0x60
20001b52:	e009      	b.n	20001b68 <RenderTilePersp4+0x34>
20001b54:	d502      	bpl.n	20001b5c <RenderTilePersp4+0x28>
20001b56:	1aaa      	subs	r2, r5, r2
20001b58:	3a01      	subs	r2, #1
20001b5a:	4249      	negs	r1, r1
20001b5c:	1b57      	subs	r7, r2, r5
20001b5e:	46bc      	mov	ip, r7
20001b60:	032d      	lsls	r5, r5, #12
20001b62:	6635      	str	r5, [r6, #96]	; 0x60
20001b64:	1852      	adds	r2, r2, r1
20001b66:	6672      	str	r2, [r6, #100]	; 0x64
20001b68:	085d      	lsrs	r5, r3, #1
20001b6a:	426d      	negs	r5, r5
20001b6c:	46ae      	mov	lr, r5
20001b6e:	089f      	lsrs	r7, r3, #2
20001b70:	4b37      	ldr	r3, [pc, #220]	; (20001c50 <RenderTilePersp_Interp>)
20001b72:	68e6      	ldr	r6, [r4, #12]
20001b74:	611e      	str	r6, [r3, #16]
20001b76:	4e37      	ldr	r6, [pc, #220]	; (20001c54 <RenderTilePersp_Ctrl>)
20001b78:	7ca1      	ldrb	r1, [r4, #18]
20001b7a:	9100      	str	r1, [sp, #0]
20001b7c:	1876      	adds	r6, r6, r1
20001b7e:	78a2      	ldrb	r2, [r4, #2]
20001b80:	1e55      	subs	r5, r2, #1
20001b82:	02ad      	lsls	r5, r5, #10
20001b84:	432e      	orrs	r6, r5
20001b86:	62de      	str	r6, [r3, #44]	; 0x2c
20001b88:	1ab6      	subs	r6, r6, r2
20001b8a:	0152      	lsls	r2, r2, #5
20001b8c:	4316      	orrs	r6, r2
20001b8e:	78e2      	ldrb	r2, [r4, #3]
20001b90:	0292      	lsls	r2, r2, #10
20001b92:	18b6      	adds	r6, r6, r2
20001b94:	631e      	str	r6, [r3, #48]	; 0x30
20001b96:	6966      	ldr	r6, [r4, #20]
20001b98:	651e      	str	r6, [r3, #80]	; 0x50
20001b9a:	4e2e      	ldr	r6, [pc, #184]	; (20001c54 <RenderTilePersp_Ctrl>)
20001b9c:	1e4d      	subs	r5, r1, #1
20001b9e:	02ad      	lsls	r5, r5, #10
20001ba0:	432e      	orrs	r6, r5
20001ba2:	66de      	str	r6, [r3, #108]	; 0x6c
20001ba4:	1a76      	subs	r6, r6, r1
20001ba6:	014d      	lsls	r5, r1, #5
20001ba8:	432e      	orrs	r6, r5
20001baa:	0289      	lsls	r1, r1, #10
20001bac:	1876      	adds	r6, r6, r1
20001bae:	671e      	str	r6, [r3, #112]	; 0x70
20001bb0:	69a4      	ldr	r4, [r4, #24]
20001bb2:	4926      	ldr	r1, [pc, #152]	; (20001c4c <RenderTilePersp_pSioBase>)
20001bb4:	6f09      	ldr	r1, [r1, #112]	; 0x70
20001bb6:	6825      	ldr	r5, [r4, #0]
20001bb8:	434d      	muls	r5, r1
20001bba:	12ad      	asrs	r5, r5, #10
20001bbc:	609d      	str	r5, [r3, #8]
20001bbe:	649d      	str	r5, [r3, #72]	; 0x48
20001bc0:	10ad      	asrs	r5, r5, #2
20001bc2:	68e6      	ldr	r6, [r4, #12]
20001bc4:	434e      	muls	r6, r1
20001bc6:	12b6      	asrs	r6, r6, #10
20001bc8:	60de      	str	r6, [r3, #12]
20001bca:	64de      	str	r6, [r3, #76]	; 0x4c
20001bcc:	10b6      	asrs	r6, r6, #2
20001bce:	4672      	mov	r2, lr
20001bd0:	4355      	muls	r5, r2
20001bd2:	4372      	muls	r2, r6
20001bd4:	468e      	mov	lr, r1
20001bd6:	6866      	ldr	r6, [r4, #4]
20001bd8:	4371      	muls	r1, r6
20001bda:	1309      	asrs	r1, r1, #12
20001bdc:	4666      	mov	r6, ip
20001bde:	4371      	muls	r1, r6
20001be0:	186d      	adds	r5, r5, r1
20001be2:	68a1      	ldr	r1, [r4, #8]
20001be4:	186d      	adds	r5, r5, r1
20001be6:	601d      	str	r5, [r3, #0]
20001be8:	641d      	str	r5, [r3, #64]	; 0x40
20001bea:	6921      	ldr	r1, [r4, #16]
20001bec:	4675      	mov	r5, lr
20001bee:	4369      	muls	r1, r5
20001bf0:	1309      	asrs	r1, r1, #12
20001bf2:	4371      	muls	r1, r6
20001bf4:	1852      	adds	r2, r2, r1
20001bf6:	6961      	ldr	r1, [r4, #20]
20001bf8:	1852      	adds	r2, r2, r1
20001bfa:	605a      	str	r2, [r3, #4]
20001bfc:	645a      	str	r2, [r3, #68]	; 0x44
20001bfe:	9e00      	ldr	r6, [sp, #0]
20001c00:	0076      	lsls	r6, r6, #1
20001c02:	087f      	lsrs	r7, r7, #1
20001c04:	d309      	bcc.n	20001c1a <RenderTilePersp4+0xe6>
20001c06:	69dc      	ldr	r4, [r3, #28]
20001c08:	7824      	ldrb	r4, [r4, #0]
20001c0a:	40b4      	lsls	r4, r6
20001c0c:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
20001c0e:	5d29      	ldrb	r1, [r5, r4]
20001c10:	020c      	lsls	r4, r1, #8
20001c12:	4321      	orrs	r1, r4
20001c14:	040c      	lsls	r4, r1, #16
20001c16:	4321      	orrs	r1, r4
20001c18:	c002      	stmia	r0!, {r1}
20001c1a:	423f      	tst	r7, r7
20001c1c:	d014      	beq.n	20001c48 <RenderTilePersp4+0x114>
20001c1e:	69dc      	ldr	r4, [r3, #28]
20001c20:	7824      	ldrb	r4, [r4, #0]
20001c22:	40b4      	lsls	r4, r6
20001c24:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
20001c26:	5d29      	ldrb	r1, [r5, r4]
20001c28:	020c      	lsls	r4, r1, #8
20001c2a:	4321      	orrs	r1, r4
20001c2c:	040c      	lsls	r4, r1, #16
20001c2e:	4321      	orrs	r1, r4
20001c30:	69dc      	ldr	r4, [r3, #28]
20001c32:	7824      	ldrb	r4, [r4, #0]
20001c34:	40b4      	lsls	r4, r6
20001c36:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
20001c38:	5d2a      	ldrb	r2, [r5, r4]
20001c3a:	0214      	lsls	r4, r2, #8
20001c3c:	4322      	orrs	r2, r4
20001c3e:	0414      	lsls	r4, r2, #16
20001c40:	4322      	orrs	r2, r4
20001c42:	c006      	stmia	r0!, {r1, r2}
20001c44:	3f01      	subs	r7, #1
20001c46:	d1ea      	bne.n	20001c1e <RenderTilePersp4+0xea>
20001c48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
20001c4a:	46c0      	nop			; (mov r8, r8)

20001c4c <RenderTilePersp_pSioBase>:
20001c4c:	d0000000 	.word	0xd0000000

20001c50 <RenderTilePersp_Interp>:
20001c50:	d0000080 	.word	0xd0000080

20001c54 <RenderTilePersp_Ctrl>:
20001c54:	0004000c 	.word	0x0004000c

20001c58 <BlitKey>:
20001c58:	b510      	push	{r4, lr}
20001c5a:	4686      	mov	lr, r0
20001c5c:	08d4      	lsrs	r4, r2, #3
20001c5e:	00e4      	lsls	r4, r4, #3
20001c60:	4062      	eors	r2, r4
20001c62:	4420      	add	r0, r4
20001c64:	4421      	add	r1, r4
20001c66:	a413      	add	r4, pc, #76	; (adr r4, 20001cb4 <BlitKey+0x5c>)
20001c68:	00d2      	lsls	r2, r2, #3
20001c6a:	1aa4      	subs	r4, r4, r2
20001c6c:	3401      	adds	r4, #1
20001c6e:	4720      	bx	r4
20001c70:	3808      	subs	r0, #8
20001c72:	3908      	subs	r1, #8
20001c74:	79cc      	ldrb	r4, [r1, #7]
20001c76:	429c      	cmp	r4, r3
20001c78:	d000      	beq.n	20001c7c <BlitKey+0x24>
20001c7a:	71c4      	strb	r4, [r0, #7]
20001c7c:	798c      	ldrb	r4, [r1, #6]
20001c7e:	429c      	cmp	r4, r3
20001c80:	d000      	beq.n	20001c84 <BlitKey+0x2c>
20001c82:	7184      	strb	r4, [r0, #6]
20001c84:	794c      	ldrb	r4, [r1, #5]
20001c86:	429c      	cmp	r4, r3
20001c88:	d000      	beq.n	20001c8c <BlitKey+0x34>
20001c8a:	7144      	strb	r4, [r0, #5]
20001c8c:	790c      	ldrb	r4, [r1, #4]
20001c8e:	429c      	cmp	r4, r3
20001c90:	d000      	beq.n	20001c94 <BlitKey+0x3c>
20001c92:	7104      	strb	r4, [r0, #4]
20001c94:	78cc      	ldrb	r4, [r1, #3]
20001c96:	429c      	cmp	r4, r3
20001c98:	d000      	beq.n	20001c9c <BlitKey+0x44>
20001c9a:	70c4      	strb	r4, [r0, #3]
20001c9c:	788c      	ldrb	r4, [r1, #2]
20001c9e:	429c      	cmp	r4, r3
20001ca0:	d000      	beq.n	20001ca4 <BlitKey+0x4c>
20001ca2:	7084      	strb	r4, [r0, #2]
20001ca4:	784c      	ldrb	r4, [r1, #1]
20001ca6:	429c      	cmp	r4, r3
20001ca8:	d000      	beq.n	20001cac <BlitKey+0x54>
20001caa:	7044      	strb	r4, [r0, #1]
20001cac:	780c      	ldrb	r4, [r1, #0]
20001cae:	429c      	cmp	r4, r3
20001cb0:	d000      	beq.n	20001cb4 <BlitKey+0x5c>
20001cb2:	7004      	strb	r4, [r0, #0]
20001cb4:	4570      	cmp	r0, lr
20001cb6:	d8db      	bhi.n	20001c70 <BlitKey+0x18>
20001cb8:	bd10      	pop	{r4, pc}
20001cba:	46c0      	nop			; (mov r8, r8)

20001cbc <Render>:
20001cbc:	b5f0      	push	{r4, r5, r6, r7, lr}
20001cbe:	b085      	sub	sp, #20
20001cc0:	9001      	str	r0, [sp, #4]
20001cc2:	9102      	str	r1, [sp, #8]
20001cc4:	9304      	str	r3, [sp, #16]
20001cc6:	4c31      	ldr	r4, [pc, #196]	; (20001d8c <Render_pScreenAddr>)
20001cc8:	6824      	ldr	r4, [r4, #0]
20001cca:	2c00      	cmp	r4, #0
20001ccc:	d055      	beq.n	20001d7a <Render_Clear>
20001cce:	8825      	ldrh	r5, [r4, #0]
20001cd0:	422d      	tst	r5, r5
20001cd2:	d052      	beq.n	20001d7a <Render_Clear>
20001cd4:	3404      	adds	r4, #4

20001cd6 <Render_StripLoop>:
20001cd6:	8823      	ldrh	r3, [r4, #0]
20001cd8:	429a      	cmp	r2, r3
20001cda:	d304      	bcc.n	20001ce6 <Render_StripOK>
20001cdc:	1ad2      	subs	r2, r2, r3
20001cde:	34e4      	adds	r4, #228	; 0xe4
20001ce0:	3d01      	subs	r5, #1
20001ce2:	d1f8      	bne.n	20001cd6 <Render_StripLoop>
20001ce4:	e049      	b.n	20001d7a <Render_Clear>

20001ce6 <Render_StripOK>:
20001ce6:	9203      	str	r2, [sp, #12]
20001ce8:	8865      	ldrh	r5, [r4, #2]
20001cea:	422d      	tst	r5, r5
20001cec:	d045      	beq.n	20001d7a <Render_Clear>
20001cee:	3404      	adds	r4, #4

20001cf0 <Render_SegmLoop>:
20001cf0:	9a04      	ldr	r2, [sp, #16]
20001cf2:	4212      	tst	r2, r2
20001cf4:	d041      	beq.n	20001d7a <Render_Clear>
20001cf6:	8823      	ldrh	r3, [r4, #0]
20001cf8:	4293      	cmp	r3, r2
20001cfa:	d300      	bcc.n	20001cfe <Render_SegmLoop+0xe>
20001cfc:	4613      	mov	r3, r2
20001cfe:	421b      	tst	r3, r3
20001d00:	d038      	beq.n	20001d74 <Render_SegmNext>
20001d02:	1ad2      	subs	r2, r2, r3
20001d04:	9204      	str	r2, [sp, #16]
20001d06:	88e2      	ldrh	r2, [r4, #6]
20001d08:	b212      	sxth	r2, r2
20001d0a:	9903      	ldr	r1, [sp, #12]
20001d0c:	440a      	add	r2, r1
20001d0e:	7c61      	ldrb	r1, [r4, #17]
20001d10:	4209      	tst	r1, r1
20001d12:	d000      	beq.n	20001d16 <Render_SegmLoop+0x26>
20001d14:	1052      	asrs	r2, r2, #1
20001d16:	8961      	ldrh	r1, [r4, #10]
20001d18:	1a52      	subs	r2, r2, r1
20001d1a:	d5fd      	bpl.n	20001d18 <Render_SegmLoop+0x28>
20001d1c:	1852      	adds	r2, r2, r1
20001d1e:	d4fd      	bmi.n	20001d1c <Render_SegmLoop+0x2c>
20001d20:	88a1      	ldrh	r1, [r4, #4]
20001d22:	b209      	sxth	r1, r1
20001d24:	8920      	ldrh	r0, [r4, #8]
20001d26:	1a09      	subs	r1, r1, r0
20001d28:	d5fd      	bpl.n	20001d26 <Render_SegmLoop+0x36>
20001d2a:	1809      	adds	r1, r1, r0
20001d2c:	d4fd      	bmi.n	20001d2a <Render_SegmLoop+0x3a>
20001d2e:	7c20      	ldrb	r0, [r4, #16]
20001d30:	4200      	tst	r0, r0
20001d32:	d10d      	bne.n	20001d50 <Render_SegmLoop+0x60>
20001d34:	0852      	lsrs	r2, r2, #1
20001d36:	6961      	ldr	r1, [r4, #20]
20001d38:	d300      	bcc.n	20001d3c <Render_SegmLoop+0x4c>
20001d3a:	69a1      	ldr	r1, [r4, #24]
20001d3c:	089a      	lsrs	r2, r3, #2
20001d3e:	9e01      	ldr	r6, [sp, #4]
20001d40:	c604      	stmia	r6!, {r2}
20001d42:	9802      	ldr	r0, [sp, #8]
20001d44:	c601      	stmia	r6!, {r0}
20001d46:	9601      	str	r6, [sp, #4]
20001d48:	f7fe fae2 	bl	20000310 <MemSet4>
20001d4c:	9002      	str	r0, [sp, #8]
20001d4e:	e011      	b.n	20001d74 <Render_SegmNext>
20001d50:	9400      	str	r4, [sp, #0]
20001d52:	a710      	add	r7, pc, #64	; (adr r7, 20001d94 <Render_FncAddr>)
20001d54:	0086      	lsls	r6, r0, #2
20001d56:	59bf      	ldr	r7, [r7, r6]
20001d58:	2806      	cmp	r0, #6
20001d5a:	d803      	bhi.n	20001d64 <Render_SegmLoop+0x74>
20001d5c:	9801      	ldr	r0, [sp, #4]
20001d5e:	47b8      	blx	r7
20001d60:	9001      	str	r0, [sp, #4]
20001d62:	e007      	b.n	20001d74 <Render_SegmNext>
20001d64:	0898      	lsrs	r0, r3, #2
20001d66:	9e01      	ldr	r6, [sp, #4]
20001d68:	c601      	stmia	r6!, {r0}
20001d6a:	9802      	ldr	r0, [sp, #8]
20001d6c:	c601      	stmia	r6!, {r0}
20001d6e:	9601      	str	r6, [sp, #4]
20001d70:	47b8      	blx	r7
20001d72:	9002      	str	r0, [sp, #8]

20001d74 <Render_SegmNext>:
20001d74:	341c      	adds	r4, #28
20001d76:	3d01      	subs	r5, #1
20001d78:	d1ba      	bne.n	20001cf0 <Render_SegmLoop>

20001d7a <Render_Clear>:
20001d7a:	9801      	ldr	r0, [sp, #4]
20001d7c:	9904      	ldr	r1, [sp, #16]
20001d7e:	0889      	lsrs	r1, r1, #2
20001d80:	d001      	beq.n	20001d86 <Render_Clear+0xc>
20001d82:	4a03      	ldr	r2, [pc, #12]	; (20001d90 <Render_LineBuf0Addr>)
20001d84:	c006      	stmia	r0!, {r1, r2}
20001d86:	b005      	add	sp, #20
20001d88:	bdf0      	pop	{r4, r5, r6, r7, pc}
20001d8a:	46c0      	nop			; (mov r8, r8)

20001d8c <Render_pScreenAddr>:
20001d8c:	2000278c 	.word	0x2000278c

20001d90 <Render_LineBuf0Addr>:
20001d90:	20004af0 	.word	0x20004af0

20001d94 <Render_FncAddr>:
20001d94:	20000311 	.word	0x20000311
20001d98:	20000929 	.word	0x20000929
20001d9c:	2000143d 	.word	0x2000143d
20001da0:	20001505 	.word	0x20001505
20001da4:	20001399 	.word	0x20001399
20001da8:	20000923 	.word	0x20000923
20001dac:	20000925 	.word	0x20000925
20001db0:	2000089d 	.word	0x2000089d
20001db4:	20000839 	.word	0x20000839
20001db8:	2000077d 	.word	0x2000077d
20001dbc:	20000e7d 	.word	0x20000e7d
20001dc0:	200000c1 	.word	0x200000c1
20001dc4:	20000689 	.word	0x20000689
20001dc8:	20000345 	.word	0x20000345
20001dcc:	20000b2d 	.word	0x20000b2d
20001dd0:	20000451 	.word	0x20000451
20001dd4:	20000c25 	.word	0x20000c25
20001dd8:	20000d95 	.word	0x20000d95
20001ddc:	20000f59 	.word	0x20000f59
20001de0:	20001059 	.word	0x20001059
20001de4:	200012e5 	.word	0x200012e5
20001de8:	200001f5 	.word	0x200001f5
20001dec:	2000095d 	.word	0x2000095d
20001df0:	20000a31 	.word	0x20000a31
20001df4:	200015c1 	.word	0x200015c1
20001df8:	20001745 	.word	0x20001745
20001dfc:	200018b5 	.word	0x200018b5
20001e00:	20001a01 	.word	0x20001a01
20001e04:	20001b35 	.word	0x20001b35

20001e08 <flash_init_boot2_copyout>:
    if (boot2_copyout_valid)
20001e08:	4808      	ldr	r0, [pc, #32]	; (20001e2c <flash_init_boot2_copyout+0x24>)
static void __no_inline_not_in_flash_func(flash_init_boot2_copyout)() {
20001e0a:	b510      	push	{r4, lr}
    if (boot2_copyout_valid)
20001e0c:	7803      	ldrb	r3, [r0, #0]
20001e0e:	2b00      	cmp	r3, #0
20001e10:	d10a      	bne.n	20001e28 <flash_init_boot2_copyout+0x20>
20001e12:	2380      	movs	r3, #128	; 0x80
20001e14:	4906      	ldr	r1, [pc, #24]	; (20001e30 <flash_init_boot2_copyout+0x28>)
    for (int i = 0; i < BOOT2_SIZE_WORDS; ++i)
20001e16:	4a07      	ldr	r2, [pc, #28]	; (20001e34 <flash_init_boot2_copyout+0x2c>)
20001e18:	055b      	lsls	r3, r3, #21
        boot2_copyout[i] = ((uint32_t *)XIP_BASE)[i];
20001e1a:	681c      	ldr	r4, [r3, #0]
20001e1c:	50cc      	str	r4, [r1, r3]
    for (int i = 0; i < BOOT2_SIZE_WORDS; ++i)
20001e1e:	3304      	adds	r3, #4
20001e20:	4293      	cmp	r3, r2
20001e22:	d1fa      	bne.n	20001e1a <flash_init_boot2_copyout+0x12>
    boot2_copyout_valid = true;
20001e24:	2301      	movs	r3, #1
20001e26:	7003      	strb	r3, [r0, #0]
}
20001e28:	bd10      	pop	{r4, pc}
20001e2a:	46c0      	nop			; (mov r8, r8)
20001e2c:	20012774 	.word	0x20012774
20001e30:	10011f40 	.word	0x10011f40
20001e34:	10000100 	.word	0x10000100

20001e38 <flash_enable_xip_via_boot2>:
static void __no_inline_not_in_flash_func(flash_enable_xip_via_boot2)() {
20001e38:	b510      	push	{r4, lr}
    ((void (*)(void))boot2_copyout+1)();
20001e3a:	4b02      	ldr	r3, [pc, #8]	; (20001e44 <flash_enable_xip_via_boot2+0xc>)
20001e3c:	3301      	adds	r3, #1
20001e3e:	4798      	blx	r3
}
20001e40:	bd10      	pop	{r4, pc}
20001e42:	46c0      	nop			; (mov r8, r8)
20001e44:	20011f40 	.word	0x20011f40

20001e48 <flash_cs_force.constprop.0>:
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
20001e48:	4b03      	ldr	r3, [pc, #12]	; (20001e58 <flash_cs_force.constprop.0+0x10>)
20001e4a:	681a      	ldr	r2, [r3, #0]
20001e4c:	23c0      	movs	r3, #192	; 0xc0
20001e4e:	009b      	lsls	r3, r3, #2
20001e50:	4393      	bics	r3, r2
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
20001e52:	4a02      	ldr	r2, [pc, #8]	; (20001e5c <flash_cs_force.constprop.0+0x14>)
20001e54:	6013      	str	r3, [r2, #0]
}
20001e56:	4770      	bx	lr
20001e58:	4001800c 	.word	0x4001800c
20001e5c:	4001900c 	.word	0x4001900c

20001e60 <flash_cs_force.constprop.1>:
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
20001e60:	4b05      	ldr	r3, [pc, #20]	; (20001e78 <flash_cs_force.constprop.1+0x18>)
20001e62:	681a      	ldr	r2, [r3, #0]
20001e64:	2380      	movs	r3, #128	; 0x80
20001e66:	009b      	lsls	r3, r3, #2
20001e68:	4053      	eors	r3, r2
20001e6a:	22c0      	movs	r2, #192	; 0xc0
20001e6c:	0092      	lsls	r2, r2, #2
20001e6e:	4013      	ands	r3, r2
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
20001e70:	4a02      	ldr	r2, [pc, #8]	; (20001e7c <flash_cs_force.constprop.1+0x1c>)
20001e72:	6013      	str	r3, [r2, #0]
20001e74:	4770      	bx	lr
20001e76:	46c0      	nop			; (mov r8, r8)
20001e78:	4001800c 	.word	0x4001800c
20001e7c:	4001900c 	.word	0x4001900c

20001e80 <flash_do_cmd.constprop.0>:
static void __no_inline_not_in_flash_func(flash_do_cmd)(const uint8_t *txbuf, uint8_t *rxbuf, size_t count) {
20001e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
20001e82:	46ce      	mov	lr, r9
20001e84:	4647      	mov	r7, r8
20001e86:	4681      	mov	r9, r0
20001e88:	b580      	push	{r7, lr}
    void (*connect_internal_flash)(void) = (void(*)(void))rom_func_lookup(rom_table_code('I', 'F'));
20001e8a:	4823      	ldr	r0, [pc, #140]	; (20001f18 <flash_do_cmd.constprop.0+0x98>)
static void __no_inline_not_in_flash_func(flash_do_cmd)(const uint8_t *txbuf, uint8_t *rxbuf, size_t count) {
20001e8c:	000e      	movs	r6, r1
    void (*connect_internal_flash)(void) = (void(*)(void))rom_func_lookup(rom_table_code('I', 'F'));
20001e8e:	f000 fc07 	bl	200026a0 <__rom_func_lookup_veneer>
20001e92:	0005      	movs	r5, r0
    void (*flash_exit_xip)(void) = (void(*)(void))rom_func_lookup(rom_table_code('E', 'X'));
20001e94:	4821      	ldr	r0, [pc, #132]	; (20001f1c <flash_do_cmd.constprop.0+0x9c>)
20001e96:	f000 fc03 	bl	200026a0 <__rom_func_lookup_veneer>
20001e9a:	0004      	movs	r4, r0
    void (*flash_flush_cache)(void) = (void(*)(void))rom_func_lookup(rom_table_code('F', 'C'));
20001e9c:	4820      	ldr	r0, [pc, #128]	; (20001f20 <flash_do_cmd.constprop.0+0xa0>)
20001e9e:	f000 fbff 	bl	200026a0 <__rom_func_lookup_veneer>
20001ea2:	4680      	mov	r8, r0
    flash_init_boot2_copyout();
20001ea4:	f7ff ffb0 	bl	20001e08 <flash_init_boot2_copyout>
    connect_internal_flash();
20001ea8:	47a8      	blx	r5
    flash_exit_xip();
20001eaa:	47a0      	blx	r4
    flash_cs_force(0);
20001eac:	f7ff ffd8 	bl	20001e60 <flash_cs_force.constprop.1>
        uint32_t flags = ssi_hw->sr;
20001eb0:	21c0      	movs	r1, #192	; 0xc0
    size_t rx_remaining = count;
20001eb2:	240d      	movs	r4, #13
    size_t tx_remaining = count;
20001eb4:	220d      	movs	r2, #13
        bool can_get = !!(flags & SSI_SR_RFNE_BITS);
20001eb6:	2708      	movs	r7, #8
        bool can_put = !!(flags & SSI_SR_TFNF_BITS);
20001eb8:	2002      	movs	r0, #2
        uint32_t flags = ssi_hw->sr;
20001eba:	0549      	lsls	r1, r1, #21
        bool can_get = !!(flags & SSI_SR_RFNE_BITS);
20001ebc:	003d      	movs	r5, r7
        uint32_t flags = ssi_hw->sr;
20001ebe:	6a8b      	ldr	r3, [r1, #40]	; 0x28
        bool can_get = !!(flags & SSI_SR_RFNE_BITS);
20001ec0:	401d      	ands	r5, r3
        if (can_put && tx_remaining && rx_remaining - tx_remaining < max_in_flight) {
20001ec2:	4218      	tst	r0, r3
20001ec4:	d00b      	beq.n	20001ede <flash_do_cmd.constprop.0+0x5e>
20001ec6:	2a00      	cmp	r2, #0
20001ec8:	d009      	beq.n	20001ede <flash_do_cmd.constprop.0+0x5e>
20001eca:	1aa3      	subs	r3, r4, r2
20001ecc:	2b0d      	cmp	r3, #13
20001ece:	d81e      	bhi.n	20001f0e <flash_do_cmd.constprop.0+0x8e>
            ssi_hw->dr0 = *txbuf++;
20001ed0:	464b      	mov	r3, r9
20001ed2:	781b      	ldrb	r3, [r3, #0]
            --tx_remaining;
20001ed4:	3a01      	subs	r2, #1
            ssi_hw->dr0 = *txbuf++;
20001ed6:	660b      	str	r3, [r1, #96]	; 0x60
20001ed8:	2301      	movs	r3, #1
20001eda:	469c      	mov	ip, r3
20001edc:	44e1      	add	r9, ip
        if (can_get && rx_remaining) {
20001ede:	0013      	movs	r3, r2
20001ee0:	2d00      	cmp	r5, #0
20001ee2:	d10b      	bne.n	20001efc <flash_do_cmd.constprop.0+0x7c>
    while (tx_remaining || rx_remaining) {
20001ee4:	4323      	orrs	r3, r4
20001ee6:	2b00      	cmp	r3, #0
20001ee8:	d1e8      	bne.n	20001ebc <flash_do_cmd.constprop.0+0x3c>
    flash_cs_force(1);
20001eea:	f7ff ffad 	bl	20001e48 <flash_cs_force.constprop.0>
    flash_flush_cache();
20001eee:	47c0      	blx	r8
    flash_enable_xip_via_boot2();
20001ef0:	f7ff ffa2 	bl	20001e38 <flash_enable_xip_via_boot2>
}
20001ef4:	bcc0      	pop	{r6, r7}
20001ef6:	46b9      	mov	r9, r7
20001ef8:	46b0      	mov	r8, r6
20001efa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (can_get && rx_remaining) {
20001efc:	2c00      	cmp	r4, #0
20001efe:	d0f2      	beq.n	20001ee6 <flash_do_cmd.constprop.0+0x66>
            *rxbuf++ = ssi_hw->dr0;
20001f00:	6e0b      	ldr	r3, [r1, #96]	; 0x60
            --rx_remaining;
20001f02:	3c01      	subs	r4, #1
            *rxbuf++ = ssi_hw->dr0;
20001f04:	7033      	strb	r3, [r6, #0]
    while (tx_remaining || rx_remaining) {
20001f06:	0023      	movs	r3, r4
            *rxbuf++ = ssi_hw->dr0;
20001f08:	3601      	adds	r6, #1
    while (tx_remaining || rx_remaining) {
20001f0a:	4313      	orrs	r3, r2
20001f0c:	e7eb      	b.n	20001ee6 <flash_do_cmd.constprop.0+0x66>
        if (can_get && rx_remaining) {
20001f0e:	2d00      	cmp	r5, #0
20001f10:	d0d4      	beq.n	20001ebc <flash_do_cmd.constprop.0+0x3c>
20001f12:	2c00      	cmp	r4, #0
20001f14:	d0d2      	beq.n	20001ebc <flash_do_cmd.constprop.0+0x3c>
20001f16:	e7f3      	b.n	20001f00 <flash_do_cmd.constprop.0+0x80>
20001f18:	00004649 	.word	0x00004649
20001f1c:	00005845 	.word	0x00005845
20001f20:	00004346 	.word	0x00004346

20001f24 <mutex_enter_blocking>:

void __time_critical_func(mutex_enter_blocking)(mutex_t *mtx) {
20001f24:	b510      	push	{r4, lr}
    assert(mtx->core.spin_lock);
    bool block = true;
    do {
        uint32_t save = spin_lock_blocking(mtx->core.spin_lock);
20001f26:	6802      	ldr	r2, [r0, #0]
    *lock = 0;
20001f28:	2400      	movs	r4, #0
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
20001f2a:	f3ef 8110 	mrs	r1, PRIMASK
    __asm volatile ("cpsid i");
20001f2e:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
20001f30:	6813      	ldr	r3, [r2, #0]
20001f32:	2b00      	cmp	r3, #0
20001f34:	d0fc      	beq.n	20001f30 <mutex_enter_blocking+0xc>
    __asm volatile ("dmb");
20001f36:	f3bf 8f5f 	dmb	sy
        if (mtx->owner < 0) {
20001f3a:	7903      	ldrb	r3, [r0, #4]
20001f3c:	2b7f      	cmp	r3, #127	; 0x7f
20001f3e:	d80b      	bhi.n	20001f58 <mutex_enter_blocking+0x34>
            mtx->owner = get_core_num();
            block = false;
        }
        spin_unlock(mtx->core.spin_lock, save);
20001f40:	6803      	ldr	r3, [r0, #0]
20001f42:	f3bf 8f5f 	dmb	sy
    *lock = 0;
20001f46:	601c      	str	r4, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
20001f48:	f381 8810 	msr	PRIMASK, r1
    __asm volatile ("wfe");
20001f4c:	bf20      	wfe
        uint32_t save = spin_lock_blocking(mtx->core.spin_lock);
20001f4e:	6802      	ldr	r2, [r0, #0]
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
20001f50:	f3ef 8110 	mrs	r1, PRIMASK
    __asm volatile ("cpsid i");
20001f54:	b672      	cpsid	i
inline static void spin_lock_unsafe_blocking(spin_lock_t *lock) {
20001f56:	e7eb      	b.n	20001f30 <mutex_enter_blocking+0xc>
    return (*(uint32_t *) (SIO_BASE + SIO_CPUID_OFFSET));
20001f58:	23d0      	movs	r3, #208	; 0xd0
20001f5a:	061b      	lsls	r3, r3, #24
            mtx->owner = get_core_num();
20001f5c:	681b      	ldr	r3, [r3, #0]
20001f5e:	7103      	strb	r3, [r0, #4]
        spin_unlock(mtx->core.spin_lock, save);
20001f60:	6803      	ldr	r3, [r0, #0]
    __asm volatile ("dmb");
20001f62:	f3bf 8f5f 	dmb	sy
    *lock = 0;
20001f66:	2200      	movs	r2, #0
20001f68:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
20001f6a:	f381 8810 	msr	PRIMASK, r1
        if (block) {
            __wfe();
        }
    } while (block);
}
20001f6e:	bd10      	pop	{r4, pc}

20001f70 <mutex_try_enter>:

bool __time_critical_func(mutex_try_enter)(mutex_t *mtx, uint32_t *owner_out) {
20001f70:	0003      	movs	r3, r0
    bool entered;
    uint32_t save = spin_lock_blocking(mtx->core.spin_lock);
20001f72:	6800      	ldr	r0, [r0, #0]
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
20001f74:	f3ef 8c10 	mrs	ip, PRIMASK
    __asm volatile ("cpsid i");
20001f78:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
20001f7a:	6802      	ldr	r2, [r0, #0]
20001f7c:	2a00      	cmp	r2, #0
20001f7e:	d0fc      	beq.n	20001f7a <mutex_try_enter+0xa>
    __asm volatile ("dmb");
20001f80:	f3bf 8f5f 	dmb	sy
    if (mtx->owner < 0) {
20001f84:	2204      	movs	r2, #4
20001f86:	569a      	ldrsb	r2, [r3, r2]
20001f88:	2a00      	cmp	r2, #0
20001f8a:	db0b      	blt.n	20001fa4 <mutex_try_enter+0x34>
        mtx->owner = get_core_num();
        entered = true;
    } else {
        if (owner_out) *owner_out = mtx->owner;
20001f8c:	2900      	cmp	r1, #0
20001f8e:	d00f      	beq.n	20001fb0 <mutex_try_enter+0x40>
        entered = false;
20001f90:	2000      	movs	r0, #0
        if (owner_out) *owner_out = mtx->owner;
20001f92:	600a      	str	r2, [r1, #0]
    }
    spin_unlock(mtx->core.spin_lock, save);
20001f94:	681b      	ldr	r3, [r3, #0]
20001f96:	f3bf 8f5f 	dmb	sy
    *lock = 0;
20001f9a:	2200      	movs	r2, #0
20001f9c:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
20001f9e:	f38c 8810 	msr	PRIMASK, ip
    return entered;
}
20001fa2:	4770      	bx	lr
    return (*(uint32_t *) (SIO_BASE + SIO_CPUID_OFFSET));
20001fa4:	22d0      	movs	r2, #208	; 0xd0
20001fa6:	0612      	lsls	r2, r2, #24
        mtx->owner = get_core_num();
20001fa8:	6812      	ldr	r2, [r2, #0]
        entered = true;
20001faa:	2001      	movs	r0, #1
        mtx->owner = get_core_num();
20001fac:	711a      	strb	r2, [r3, #4]
        entered = true;
20001fae:	e7f1      	b.n	20001f94 <mutex_try_enter+0x24>
        entered = false;
20001fb0:	2000      	movs	r0, #0
20001fb2:	e7ef      	b.n	20001f94 <mutex_try_enter+0x24>

20001fb4 <mutex_enter_timeout_ms>:

bool __time_critical_func(mutex_enter_timeout_ms)(mutex_t *mtx, uint32_t timeout_ms) {
20001fb4:	b5f0      	push	{r4, r5, r6, r7, lr}
20001fb6:	46c6      	mov	lr, r8
20001fb8:	b500      	push	{lr}
20001fba:	000c      	movs	r4, r1
20001fbc:	4680      	mov	r8, r0
    update_us_since_boot(&t, time_us_64());
20001fbe:	f000 fb4f 	bl	20002660 <__time_us_64_veneer>
    uint64_t delayed = base + ms * 1000ull;
20001fc2:	22fa      	movs	r2, #250	; 0xfa
    update_us_since_boot(&t, time_us_64());
20001fc4:	0006      	movs	r6, r0
20001fc6:	000f      	movs	r7, r1
    uint64_t delayed = base + ms * 1000ull;
20001fc8:	0020      	movs	r0, r4
20001fca:	2300      	movs	r3, #0
20001fcc:	2100      	movs	r1, #0
20001fce:	0092      	lsls	r2, r2, #2
20001fd0:	f000 fb5e 	bl	20002690 <____wrap___aeabi_lmul_veneer>
20001fd4:	1980      	adds	r0, r0, r6
20001fd6:	4179      	adcs	r1, r7
20001fd8:	0004      	movs	r4, r0
20001fda:	000d      	movs	r5, r1
    if (delayed < base) {
20001fdc:	428f      	cmp	r7, r1
20001fde:	d830      	bhi.n	20002042 <mutex_enter_timeout_ms+0x8e>
20001fe0:	d02d      	beq.n	2000203e <mutex_enter_timeout_ms+0x8a>
    *lock = 0;
20001fe2:	2600      	movs	r6, #0

bool __time_critical_func(mutex_enter_block_until)(mutex_t *mtx, absolute_time_t until) {
    assert(mtx->core.spin_lock);
    bool block = true;
    do {
        uint32_t save = spin_lock_blocking(mtx->core.spin_lock);
20001fe4:	4643      	mov	r3, r8
20001fe6:	681a      	ldr	r2, [r3, #0]
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
20001fe8:	f3ef 8110 	mrs	r1, PRIMASK
    __asm volatile ("cpsid i");
20001fec:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
20001fee:	6813      	ldr	r3, [r2, #0]
20001ff0:	2b00      	cmp	r3, #0
20001ff2:	d0fc      	beq.n	20001fee <mutex_enter_timeout_ms+0x3a>
    __asm volatile ("dmb");
20001ff4:	f3bf 8f5f 	dmb	sy
        if (mtx->owner < 0) {
20001ff8:	4643      	mov	r3, r8
20001ffa:	791b      	ldrb	r3, [r3, #4]
20001ffc:	2b7f      	cmp	r3, #127	; 0x7f
20001ffe:	d80e      	bhi.n	2000201e <mutex_enter_timeout_ms+0x6a>
            mtx->owner = get_core_num();
            block = false;
        }
        spin_unlock(mtx->core.spin_lock, save);
20002000:	4643      	mov	r3, r8
20002002:	681b      	ldr	r3, [r3, #0]
20002004:	f3bf 8f5f 	dmb	sy
    *lock = 0;
20002008:	601e      	str	r6, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
2000200a:	f381 8810 	msr	PRIMASK, r1
        if (block) {
            if (best_effort_wfe_or_timeout(until)) {
2000200e:	0020      	movs	r0, r4
20002010:	0029      	movs	r1, r5
20002012:	f000 fb2d 	bl	20002670 <__best_effort_wfe_or_timeout_veneer>
20002016:	2800      	cmp	r0, #0
20002018:	d0e4      	beq.n	20001fe4 <mutex_enter_timeout_ms+0x30>
                return false;
2000201a:	2000      	movs	r0, #0
2000201c:	e00c      	b.n	20002038 <mutex_enter_timeout_ms+0x84>
    return (*(uint32_t *) (SIO_BASE + SIO_CPUID_OFFSET));
2000201e:	23d0      	movs	r3, #208	; 0xd0
            mtx->owner = get_core_num();
20002020:	4642      	mov	r2, r8
20002022:	061b      	lsls	r3, r3, #24
20002024:	681b      	ldr	r3, [r3, #0]
20002026:	7113      	strb	r3, [r2, #4]
        spin_unlock(mtx->core.spin_lock, save);
20002028:	6813      	ldr	r3, [r2, #0]
    __asm volatile ("dmb");
2000202a:	f3bf 8f5f 	dmb	sy
    *lock = 0;
2000202e:	2200      	movs	r2, #0
20002030:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
20002032:	f381 8810 	msr	PRIMASK, r1
            }
        }
    } while (block);
    return true;
20002036:	2001      	movs	r0, #1
}
20002038:	bc80      	pop	{r7}
2000203a:	46b8      	mov	r8, r7
2000203c:	bdf0      	pop	{r4, r5, r6, r7, pc}
2000203e:	4286      	cmp	r6, r0
20002040:	d9cf      	bls.n	20001fe2 <mutex_enter_timeout_ms+0x2e>
        delayed = (uint64_t)-1;
20002042:	2401      	movs	r4, #1
20002044:	4264      	negs	r4, r4
20002046:	17e5      	asrs	r5, r4, #31
20002048:	e7cb      	b.n	20001fe2 <mutex_enter_timeout_ms+0x2e>
2000204a:	46c0      	nop			; (mov r8, r8)

2000204c <mutex_exit>:
}

void __time_critical_func(mutex_exit)(mutex_t *mtx) {
    uint32_t save = spin_lock_blocking(mtx->core.spin_lock);
2000204c:	6802      	ldr	r2, [r0, #0]
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
2000204e:	f3ef 8110 	mrs	r1, PRIMASK
    __asm volatile ("cpsid i");
20002052:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
20002054:	6813      	ldr	r3, [r2, #0]
20002056:	2b00      	cmp	r3, #0
20002058:	d0fc      	beq.n	20002054 <mutex_exit+0x8>
    __asm volatile ("dmb");
2000205a:	f3bf 8f5f 	dmb	sy
    assert(mtx->owner >= 0);
    mtx->owner = -1;
2000205e:	23ff      	movs	r3, #255	; 0xff
20002060:	7103      	strb	r3, [r0, #4]
    __asm volatile ("sev");
20002062:	bf40      	sev
    __sev();
    spin_unlock(mtx->core.spin_lock, save);
20002064:	6803      	ldr	r3, [r0, #0]
    __asm volatile ("dmb");
20002066:	f3bf 8f5f 	dmb	sy
    *lock = 0;
2000206a:	2200      	movs	r2, #0
2000206c:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
2000206e:	f381 8810 	msr	PRIMASK, r1
}
20002072:	4770      	bx	lr

20002074 <_Z13VgaBufProcessv>:
	dma_hw->ints0 = (1u << VGA_DMA_PIO0);
20002074:	22a0      	movs	r2, #160	; 0xa0
{
20002076:	b5f0      	push	{r4, r5, r6, r7, lr}
	dma_hw->ints0 = (1u << VGA_DMA_PIO0);
20002078:	2102      	movs	r1, #2
{
2000207a:	46de      	mov	lr, fp
2000207c:	4657      	mov	r7, sl
2000207e:	464e      	mov	r6, r9
20002080:	4645      	mov	r5, r8
	dma_hw->ints0 = (1u << VGA_DMA_PIO0);
20002082:	4b7d      	ldr	r3, [pc, #500]	; (20002278 <_Z13VgaBufProcessv+0x204>)
20002084:	05d2      	lsls	r2, r2, #23
{
20002086:	b5e0      	push	{r5, r6, r7, lr}
	dma_hw->ints0 = (1u << VGA_DMA_PIO0);
20002088:	50d1      	str	r1, [r2, r3]
	BufInx = bufinx ^ 1;
2000208a:	2301      	movs	r3, #1
	int bufinx = BufInx;
2000208c:	497b      	ldr	r1, [pc, #492]	; (2000227c <_Z13VgaBufProcessv+0x208>)
	hw_divider_save_state(&DividerState);
2000208e:	487c      	ldr	r0, [pc, #496]	; (20002280 <_Z13VgaBufProcessv+0x20c>)
	int bufinx = BufInx;
20002090:	680f      	ldr	r7, [r1, #0]
{
20002092:	b083      	sub	sp, #12
	BufInx = bufinx ^ 1;
20002094:	407b      	eors	r3, r7
20002096:	600b      	str	r3, [r1, #0]
        dma_channel_hw_addr(channel)->al3_read_addr_trig = (uintptr_t) read_addr;
20002098:	4b7a      	ldr	r3, [pc, #488]	; (20002284 <_Z13VgaBufProcessv+0x210>)
2000209a:	681b      	ldr	r3, [r3, #0]
2000209c:	63d3      	str	r3, [r2, #60]	; 0x3c
	hw_divider_save_state(&DividerState);
2000209e:	f000 fad7 	bl	20002650 <__hw_divider_save_state_veneer>
	int line = ScanLine;	// current scanline
200020a2:	4b79      	ldr	r3, [pc, #484]	; (20002288 <_Z13VgaBufProcessv+0x214>)
	if (line > CurVmode.vtot) // last scanline?
200020a4:	4979      	ldr	r1, [pc, #484]	; (2000228c <_Z13VgaBufProcessv+0x218>)
	int line = ScanLine;	// current scanline
200020a6:	681a      	ldr	r2, [r3, #0]
	if (line > CurVmode.vtot) // last scanline?
200020a8:	8d88      	ldrh	r0, [r1, #44]	; 0x2c
	line++; 		// new current scanline
200020aa:	3201      	adds	r2, #1
	if (line > CurVmode.vtot) // last scanline?
200020ac:	4290      	cmp	r0, r2
200020ae:	da04      	bge.n	200020ba <_Z13VgaBufProcessv+0x46>
		Frame++;	// increment frame counter
200020b0:	4877      	ldr	r0, [pc, #476]	; (20002290 <_Z13VgaBufProcessv+0x21c>)
200020b2:	6802      	ldr	r2, [r0, #0]
200020b4:	3201      	adds	r2, #1
200020b6:	6002      	str	r2, [r0, #0]
		line = 1; 	// restart scanline
200020b8:	2201      	movs	r2, #1
	ScanLine = line;	// store new scanline
200020ba:	601a      	str	r2, [r3, #0]
	u8 linetype = ScanlineType[line];
200020bc:	4b75      	ldr	r3, [pc, #468]	; (20002294 <_Z13VgaBufProcessv+0x220>)
	switch (linetype)
200020be:	5c9b      	ldrb	r3, [r3, r2]
200020c0:	3b06      	subs	r3, #6
200020c2:	b2db      	uxtb	r3, r3
200020c4:	2b04      	cmp	r3, #4
200020c6:	d862      	bhi.n	2000218e <_Z13VgaBufProcessv+0x11a>
200020c8:	4873      	ldr	r0, [pc, #460]	; (20002298 <_Z13VgaBufProcessv+0x224>)
200020ca:	009b      	lsls	r3, r3, #2
200020cc:	58c3      	ldr	r3, [r0, r3]
200020ce:	469f      	mov	pc, r3
		y0 = line - CurVmode.vfirst1;
200020d0:	2340      	movs	r3, #64	; 0x40
		y0 = line - CurVmode.vfirst2;
200020d2:	5acb      	ldrh	r3, [r1, r3]
200020d4:	1ad2      	subs	r2, r2, r3
		if (CurVmode.dbly) y0 >>= 1;
200020d6:	2355      	movs	r3, #85	; 0x55
200020d8:	5ccb      	ldrb	r3, [r1, r3]
200020da:	2b00      	cmp	r3, #0
200020dc:	d000      	beq.n	200020e0 <_Z13VgaBufProcessv+0x6c>
200020de:	1052      	asrs	r2, r2, #1
		y0 = (y0 << 1) + 1;
200020e0:	0052      	lsls	r2, r2, #1
200020e2:	1c53      	adds	r3, r2, #1
		VSync = False;	// not vsync
200020e4:	2200      	movs	r2, #0
		y0 = (y0 << 1) + 1;
200020e6:	9300      	str	r3, [sp, #0]
		VSync = False;	// not vsync
200020e8:	4b6c      	ldr	r3, [pc, #432]	; (2000229c <_Z13VgaBufProcessv+0x228>)
200020ea:	701a      	strb	r2, [r3, #0]
	if (y0 >= 0)
200020ec:	9b00      	ldr	r3, [sp, #0]
200020ee:	2b00      	cmp	r3, #0
200020f0:	db25      	blt.n	2000213e <_Z13VgaBufProcessv+0xca>
    pio->ctrl = (pio->ctrl & ~(1u << sm)) | (!!enabled << sm);
200020f2:	4c6b      	ldr	r4, [pc, #428]	; (200022a0 <_Z13VgaBufProcessv+0x22c>)
    dma_hw->abort = 1u << channel;
200020f4:	21a0      	movs	r1, #160	; 0xa0
		for (layer = 1; layer < LAYERS; layer++)
200020f6:	2301      	movs	r3, #1
200020f8:	46a4      	mov	ip, r4
200020fa:	46bb      	mov	fp, r7
    return timer_hw->timerawl;
200020fc:	4a69      	ldr	r2, [pc, #420]	; (200022a4 <_Z13VgaBufProcessv+0x230>)
200020fe:	486a      	ldr	r0, [pc, #424]	; (200022a8 <_Z13VgaBufProcessv+0x234>)
20002100:	4690      	mov	r8, r2
	if (y0 >= 0)
20002102:	4d6a      	ldr	r5, [pc, #424]	; (200022ac <_Z13VgaBufProcessv+0x238>)
20002104:	4a6a      	ldr	r2, [pc, #424]	; (200022b0 <_Z13VgaBufProcessv+0x23c>)
20002106:	05c9      	lsls	r1, r1, #23
			if (CtrlBufNext[layer] == NULL) continue;
20002108:	4e5e      	ldr	r6, [pc, #376]	; (20002284 <_Z13VgaBufProcessv+0x210>)
2000210a:	009c      	lsls	r4, r3, #2
2000210c:	5934      	ldr	r4, [r6, r4]
2000210e:	9401      	str	r4, [sp, #4]
20002110:	2c00      	cmp	r4, #0
20002112:	d00e      	beq.n	20002132 <_Z13VgaBufProcessv+0xbe>
			if (!s->on || (s->w <= 0) || (y0 < s->y) || (y0 >= s->y + s->h)) continue;
20002114:	7b84      	ldrb	r4, [r0, #14]
20002116:	2c00      	cmp	r4, #0
20002118:	d00b      	beq.n	20002132 <_Z13VgaBufProcessv+0xbe>
2000211a:	8844      	ldrh	r4, [r0, #2]
2000211c:	2c00      	cmp	r4, #0
2000211e:	d008      	beq.n	20002132 <_Z13VgaBufProcessv+0xbe>
20002120:	2400      	movs	r4, #0
20002122:	5f07      	ldrsh	r7, [r0, r4]
20002124:	9e00      	ldr	r6, [sp, #0]
20002126:	42b7      	cmp	r7, r6
20002128:	dc03      	bgt.n	20002132 <_Z13VgaBufProcessv+0xbe>
2000212a:	8884      	ldrh	r4, [r0, #4]
2000212c:	19e4      	adds	r4, r4, r7
2000212e:	42b4      	cmp	r4, r6
20002130:	dc31      	bgt.n	20002196 <_Z13VgaBufProcessv+0x122>
		for (layer = 1; layer < LAYERS; layer++)
20002132:	3301      	adds	r3, #1
20002134:	3518      	adds	r5, #24
20002136:	3024      	adds	r0, #36	; 0x24
20002138:	2b04      	cmp	r3, #4
2000213a:	d1e5      	bne.n	20002108 <_Z13VgaBufProcessv+0x94>
2000213c:	465f      	mov	r7, fp
}
2000213e:	0038      	movs	r0, r7
20002140:	b003      	add	sp, #12
20002142:	bcf0      	pop	{r4, r5, r6, r7}
20002144:	46bb      	mov	fp, r7
20002146:	46b2      	mov	sl, r6
20002148:	46a9      	mov	r9, r5
2000214a:	46a0      	mov	r8, r4
2000214c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		y0 = line - CurVmode.vfirst2;
2000214e:	234e      	movs	r3, #78	; 0x4e
20002150:	e7bf      	b.n	200020d2 <_Z13VgaBufProcessv+0x5e>
		y0 = line - CurVmode.vfirst1;
20002152:	2340      	movs	r3, #64	; 0x40
20002154:	5acb      	ldrh	r3, [r1, r3]
20002156:	1ad2      	subs	r2, r2, r3
		if (CurVmode.dbly) y0 >>= 1;
20002158:	2355      	movs	r3, #85	; 0x55
		y0 = line - CurVmode.vfirst1;
2000215a:	9200      	str	r2, [sp, #0]
		if (CurVmode.dbly) y0 >>= 1;
2000215c:	5ccb      	ldrb	r3, [r1, r3]
2000215e:	2b00      	cmp	r3, #0
20002160:	d001      	beq.n	20002166 <_Z13VgaBufProcessv+0xf2>
20002162:	1053      	asrs	r3, r2, #1
20002164:	9300      	str	r3, [sp, #0]
		VSync = False;	// not vsync
20002166:	2200      	movs	r2, #0
20002168:	4b4c      	ldr	r3, [pc, #304]	; (2000229c <_Z13VgaBufProcessv+0x228>)
2000216a:	701a      	strb	r2, [r3, #0]
		break;
2000216c:	e7be      	b.n	200020ec <_Z13VgaBufProcessv+0x78>
		y0 = line - CurVmode.vfirst1;
2000216e:	2340      	movs	r3, #64	; 0x40
		y0 = line - CurVmode.vfirst2;
20002170:	5acb      	ldrh	r3, [r1, r3]
20002172:	1ad2      	subs	r2, r2, r3
		if (CurVmode.dbly) y0 >>= 1;
20002174:	2355      	movs	r3, #85	; 0x55
20002176:	5ccb      	ldrb	r3, [r1, r3]
20002178:	2b00      	cmp	r3, #0
2000217a:	d000      	beq.n	2000217e <_Z13VgaBufProcessv+0x10a>
2000217c:	1052      	asrs	r2, r2, #1
		y0 <<= 1;
2000217e:	0053      	lsls	r3, r2, #1
		VSync = False;	// not vsync
20002180:	2200      	movs	r2, #0
		y0 <<= 1;
20002182:	9300      	str	r3, [sp, #0]
		VSync = False;	// not vsync
20002184:	4b45      	ldr	r3, [pc, #276]	; (2000229c <_Z13VgaBufProcessv+0x228>)
20002186:	701a      	strb	r2, [r3, #0]
		break;
20002188:	e7b0      	b.n	200020ec <_Z13VgaBufProcessv+0x78>
		y0 = line - CurVmode.vfirst2;
2000218a:	234e      	movs	r3, #78	; 0x4e
2000218c:	e7f0      	b.n	20002170 <_Z13VgaBufProcessv+0xfc>
		VSync = True;	// vsync
2000218e:	2201      	movs	r2, #1
20002190:	4b42      	ldr	r3, [pc, #264]	; (2000229c <_Z13VgaBufProcessv+0x228>)
20002192:	701a      	strb	r2, [r3, #0]
	if (y0 >= 0)
20002194:	e7d3      	b.n	2000213e <_Z13VgaBufProcessv+0xca>
20002196:	4644      	mov	r4, r8
20002198:	6aa4      	ldr	r4, [r4, #40]	; 0x28
2000219a:	46a2      	mov	sl, r4
2000219c:	1d2c      	adds	r4, r5, #4
2000219e:	46a1      	mov	r9, r4
				if (a <= CurLayerProg.maxidle+LAYER_OFFSET) break;
200021a0:	4c44      	ldr	r4, [pc, #272]	; (200022b4 <_Z13VgaBufProcessv+0x240>)
200021a2:	7b67      	ldrb	r7, [r4, #13]
200021a4:	464c      	mov	r4, r9
200021a6:	4699      	mov	r9, r3
200021a8:	0003      	movs	r3, r0
200021aa:	4650      	mov	r0, sl
200021ac:	469a      	mov	sl, r3
200021ae:	0023      	movs	r3, r4
200021b0:	e004      	b.n	200021bc <_Z13VgaBufProcessv+0x148>
200021b2:	4644      	mov	r4, r8
200021b4:	6aa4      	ldr	r4, [r4, #40]	; 0x28
			} while ((u32)(time_us_32() - t1) < (u32)10); // wait max. 10 us, low resolution can take long time
200021b6:	1a24      	subs	r4, r4, r0
200021b8:	2c09      	cmp	r4, #9
200021ba:	d804      	bhi.n	200021c6 <_Z13VgaBufProcessv+0x152>
				if (a <= CurLayerProg.maxidle+LAYER_OFFSET) break;
200021bc:	261f      	movs	r6, #31
				u8 a = *(volatile u8*)&VGA_PIO->sm[sm].addr & 0x1f;
200021be:	781c      	ldrb	r4, [r3, #0]
				if (a <= CurLayerProg.maxidle+LAYER_OFFSET) break;
200021c0:	4034      	ands	r4, r6
200021c2:	42a7      	cmp	r7, r4
200021c4:	d3f5      	bcc.n	200021b2 <_Z13VgaBufProcessv+0x13e>
200021c6:	464b      	mov	r3, r9
200021c8:	2701      	movs	r7, #1
200021ca:	005c      	lsls	r4, r3, #1
200021cc:	4650      	mov	r0, sl
			dma_channel_abort(VGA_DMA_PIO(layer));
200021ce:	46a2      	mov	sl, r4
200021d0:	3401      	adds	r4, #1
200021d2:	40a7      	lsls	r7, r4
200021d4:	508f      	str	r7, [r1, r2]
    while (dma_hw->abort & (1ul << channel)) tight_loop_contents();
200021d6:	588c      	ldr	r4, [r1, r2]
200021d8:	423c      	tst	r4, r7
200021da:	d1fc      	bne.n	200021d6 <_Z13VgaBufProcessv+0x162>
    dma_hw->abort = 1u << channel;
200021dc:	2401      	movs	r4, #1
200021de:	4656      	mov	r6, sl
200021e0:	40b4      	lsls	r4, r6
200021e2:	4699      	mov	r9, r3
200021e4:	508c      	str	r4, [r1, r2]
    while (dma_hw->abort & (1ul << channel)) tight_loop_contents();
200021e6:	588b      	ldr	r3, [r1, r2]
200021e8:	4223      	tst	r3, r4
200021ea:	d1fc      	bne.n	200021e6 <_Z13VgaBufProcessv+0x172>
    dma_hw->abort = 1u << channel;
200021ec:	003b      	movs	r3, r7
200021ee:	508f      	str	r7, [r1, r2]
    while (dma_hw->abort & (1ul << channel)) tight_loop_contents();
200021f0:	588f      	ldr	r7, [r1, r2]
200021f2:	423b      	tst	r3, r7
200021f4:	d1fc      	bne.n	200021f0 <_Z13VgaBufProcessv+0x17c>
    dma_hw->abort = 1u << channel;
200021f6:	464b      	mov	r3, r9
200021f8:	508c      	str	r4, [r1, r2]
    while (dma_hw->abort & (1ul << channel)) tight_loop_contents();
200021fa:	588f      	ldr	r7, [r1, r2]
200021fc:	423c      	tst	r4, r7
200021fe:	d1fc      	bne.n	200021fa <_Z13VgaBufProcessv+0x186>
20002200:	2701      	movs	r7, #1
20002202:	4664      	mov	r4, ip
20002204:	409f      	lsls	r7, r3
20002206:	4666      	mov	r6, ip
20002208:	6824      	ldr	r4, [r4, #0]
    pio->sm[sm].instr = instr;
2000220a:	449a      	add	sl, r3
    pio->ctrl = (pio->ctrl & ~(1u << sm)) | (!!enabled << sm);
2000220c:	43bc      	bics	r4, r7
2000220e:	6034      	str	r4, [r6, #0]
20002210:	2480      	movs	r4, #128	; 0x80
20002212:	2680      	movs	r6, #128	; 0x80
20002214:	0164      	lsls	r4, r4, #5
20002216:	432c      	orrs	r4, r5
20002218:	0636      	lsls	r6, r6, #24
2000221a:	6026      	str	r6, [r4, #0]
2000221c:	6026      	str	r6, [r4, #0]
    pio->ctrl |= 1u << (PIO_CTRL_SM_RESTART_LSB + sm);
2000221e:	4664      	mov	r4, ip
20002220:	2601      	movs	r6, #1
20002222:	6824      	ldr	r4, [r4, #0]
20002224:	46a1      	mov	r9, r4
20002226:	1d1c      	adds	r4, r3, #4
20002228:	40a6      	lsls	r6, r4
2000222a:	0034      	movs	r4, r6
2000222c:	464e      	mov	r6, r9
2000222e:	4334      	orrs	r4, r6
20002230:	4666      	mov	r6, ip
20002232:	6034      	str	r4, [r6, #0]
20002234:	261f      	movs	r6, #31
20002236:	4c1f      	ldr	r4, [pc, #124]	; (200022b4 <_Z13VgaBufProcessv+0x240>)
20002238:	7ae4      	ldrb	r4, [r4, #11]
2000223a:	4034      	ands	r4, r6
2000223c:	0026      	movs	r6, r4
    pio->sm[sm].instr = instr;
2000223e:	4654      	mov	r4, sl
20002240:	00e4      	lsls	r4, r4, #3
20002242:	46a2      	mov	sl, r4
20002244:	4c1c      	ldr	r4, [pc, #112]	; (200022b8 <_Z13VgaBufProcessv+0x244>)
20002246:	46a1      	mov	r9, r4
20002248:	44ca      	add	sl, r9
2000224a:	4654      	mov	r4, sl
2000224c:	6026      	str	r6, [r4, #0]
    pio->ctrl = (pio->ctrl & ~(1u << sm)) | (!!enabled << sm);
2000224e:	4664      	mov	r4, ip
20002250:	6824      	ldr	r4, [r4, #0]
20002252:	261f      	movs	r6, #31
20002254:	43bc      	bics	r4, r7
20002256:	4327      	orrs	r7, r4
20002258:	4664      	mov	r4, ip
2000225a:	6027      	str	r7, [r4, #0]
2000225c:	4c15      	ldr	r4, [pc, #84]	; (200022b4 <_Z13VgaBufProcessv+0x240>)
2000225e:	7b24      	ldrb	r4, [r4, #12]
20002260:	4034      	ands	r4, r6
    pio->sm[sm].instr = instr;
20002262:	4656      	mov	r6, sl
20002264:	6034      	str	r4, [r6, #0]
    return &dma_hw->ch[channel];
20002266:	26a0      	movs	r6, #160	; 0xa0
20002268:	05f6      	lsls	r6, r6, #23
2000226a:	46b1      	mov	r9, r6
2000226c:	01dc      	lsls	r4, r3, #7
        dma_channel_hw_addr(channel)->al3_read_addr_trig = (uintptr_t) read_addr;
2000226e:	9e01      	ldr	r6, [sp, #4]
20002270:	444c      	add	r4, r9
20002272:	63e6      	str	r6, [r4, #60]	; 0x3c
20002274:	e75d      	b.n	20002132 <_Z13VgaBufProcessv+0xbe>
20002276:	46c0      	nop			; (mov r8, r8)
20002278:	0000040c 	.word	0x0000040c
2000227c:	2000349c 	.word	0x2000349c
20002280:	20004a44 	.word	0x20004a44
20002284:	20004998 	.word	0x20004998
20002288:	20006e48 	.word	0x20006e48
2000228c:	200049e8 	.word	0x200049e8
20002290:	20004a54 	.word	0x20004a54
20002294:	20006e4c 	.word	0x20006e4c
20002298:	1002b9d8 	.word	0x1002b9d8
2000229c:	20012770 	.word	0x20012770
200022a0:	50200000 	.word	0x50200000
200022a4:	40054000 	.word	0x40054000
200022a8:	20004a98 	.word	0x20004a98
200022ac:	502000e8 	.word	0x502000e8
200022b0:	00000444 	.word	0x00000444
200022b4:	200049b4 	.word	0x200049b4
200022b8:	502000d8 	.word	0x502000d8

200022bc <_Z12VgaBufRenderPmS_Phi>:
{
200022bc:	b5f0      	push	{r4, r5, r6, r7, lr}
200022be:	46de      	mov	lr, fp
200022c0:	4657      	mov	r7, sl
200022c2:	464e      	mov	r6, r9
200022c4:	4645      	mov	r5, r8
200022c6:	4699      	mov	r9, r3
	*cbuf++ = 4; // send 4x u32
200022c8:	2304      	movs	r3, #4
{
200022ca:	0004      	movs	r4, r0
200022cc:	4693      	mov	fp, r2
200022ce:	b5e0      	push	{r5, r6, r7, lr}
	*cbuf++ = 4; // send 4x u32
200022d0:	6003      	str	r3, [r0, #0]
	*cbuf++ = (u32)LineBufHsBp; // HSYNC + back porch
200022d2:	4b8b      	ldr	r3, [pc, #556]	; (20002500 <_Z12VgaBufRenderPmS_Phi+0x244>)
{
200022d4:	000e      	movs	r6, r1
	*cbuf++ = (u32)LineBufHsBp; // HSYNC + back porch
200022d6:	6063      	str	r3, [r4, #4]
	cbuf = Render(cbuf, dbuf, y0, CurVmode.width);
200022d8:	4b8a      	ldr	r3, [pc, #552]	; (20002504 <_Z12VgaBufRenderPmS_Phi+0x248>)
200022da:	464a      	mov	r2, r9
200022dc:	881b      	ldrh	r3, [r3, #0]
{
200022de:	b085      	sub	sp, #20
	cbuf = Render(cbuf, dbuf, y0, CurVmode.width);
200022e0:	4659      	mov	r1, fp
	*cbuf++ = (u32)LineBufHsBp; // HSYNC + back porch
200022e2:	3008      	adds	r0, #8
	cbuf = Render(cbuf, dbuf, y0, CurVmode.width);
200022e4:	f7ff fcea 	bl	20001cbc <Render>
	*cbuf++ = 1; // send 1x u32
200022e8:	2301      	movs	r3, #1
200022ea:	6003      	str	r3, [r0, #0]
	*cbuf++ = (u32)&LineBufFp; // front porch
200022ec:	3307      	adds	r3, #7
200022ee:	469c      	mov	ip, r3
200022f0:	4484      	add	ip, r0
200022f2:	4663      	mov	r3, ip
200022f4:	9300      	str	r3, [sp, #0]
200022f6:	4b84      	ldr	r3, [pc, #528]	; (20002508 <_Z12VgaBufRenderPmS_Phi+0x24c>)
200022f8:	4c84      	ldr	r4, [pc, #528]	; (2000250c <_Z12VgaBufRenderPmS_Phi+0x250>)
200022fa:	6043      	str	r3, [r0, #4]
	for (layer = 1; layer < LAYERS; layer++)
200022fc:	4b84      	ldr	r3, [pc, #528]	; (20002510 <_Z12VgaBufRenderPmS_Phi+0x254>)
200022fe:	4f85      	ldr	r7, [pc, #532]	; (20002514 <_Z12VgaBufRenderPmS_Phi+0x258>)
20002300:	4698      	mov	r8, r3
20002302:	4b85      	ldr	r3, [pc, #532]	; (20002518 <_Z12VgaBufRenderPmS_Phi+0x25c>)
20002304:	4d85      	ldr	r5, [pc, #532]	; (2000251c <_Z12VgaBufRenderPmS_Phi+0x260>)
20002306:	469a      	mov	sl, r3
		switch(mode)
20002308:	464b      	mov	r3, r9
2000230a:	46b1      	mov	r9, r6
2000230c:	4656      	mov	r6, sl
2000230e:	469a      	mov	sl, r3
		cbuf0 += CtrlBufSize[layer-1];
20002310:	6823      	ldr	r3, [r4, #0]
20002312:	009b      	lsls	r3, r3, #2
20002314:	4499      	add	r9, r3
		dbuf += LineBufSize[layer-1];
20002316:	4643      	mov	r3, r8
20002318:	681b      	ldr	r3, [r3, #0]
2000231a:	469c      	mov	ip, r3
		CtrlBufNext[layer] = NULL;
2000231c:	2300      	movs	r3, #0
2000231e:	607b      	str	r3, [r7, #4]
		int mode = LayerModeInx[layer];
20002320:	7873      	ldrb	r3, [r6, #1]
		dbuf += LineBufSize[layer-1];
20002322:	44e3      	add	fp, ip
		if (mode == LAYERMODE_BASE) continue;
20002324:	2b00      	cmp	r3, #0
20002326:	d038      	beq.n	2000239a <_Z12VgaBufRenderPmS_Phi+0xde>
		if (!s->on || (s->w <= 0) || (y0 < s->y) || (y0 >= s->y + s->h)) continue;
20002328:	2222      	movs	r2, #34	; 0x22
2000232a:	5caa      	ldrb	r2, [r5, r2]
2000232c:	2a00      	cmp	r2, #0
2000232e:	d034      	beq.n	2000239a <_Z12VgaBufRenderPmS_Phi+0xde>
20002330:	8aea      	ldrh	r2, [r5, #22]
20002332:	2a00      	cmp	r2, #0
20002334:	d031      	beq.n	2000239a <_Z12VgaBufRenderPmS_Phi+0xde>
20002336:	2114      	movs	r1, #20
20002338:	5e6a      	ldrsh	r2, [r5, r1]
2000233a:	4552      	cmp	r2, sl
2000233c:	dc2d      	bgt.n	2000239a <_Z12VgaBufRenderPmS_Phi+0xde>
2000233e:	8b29      	ldrh	r1, [r5, #24]
20002340:	1889      	adds	r1, r1, r2
20002342:	4551      	cmp	r1, sl
20002344:	dd29      	ble.n	2000239a <_Z12VgaBufRenderPmS_Phi+0xde>
		int y = y0 - s->y;
20002346:	4651      	mov	r1, sl
20002348:	1a8a      	subs	r2, r1, r2
2000234a:	9203      	str	r2, [sp, #12]
		CtrlBufNext[layer] = cbuf2;
2000234c:	464a      	mov	r2, r9
		*cbuf2++ = 1;
2000234e:	4649      	mov	r1, r9
		CtrlBufNext[layer] = cbuf2;
20002350:	607a      	str	r2, [r7, #4]
		*cbuf2++ = 1;
20002352:	2201      	movs	r2, #1
20002354:	600a      	str	r2, [r1, #0]
		*cbuf2++ = (u32)dbuf2;
20002356:	4659      	mov	r1, fp
20002358:	464a      	mov	r2, r9
2000235a:	6051      	str	r1, [r2, #4]
		*(u32*)dbuf2 = BYTESWAP(s->init);
2000235c:	68aa      	ldr	r2, [r5, #8]
		switch(mode)
2000235e:	3b06      	subs	r3, #6
20002360:	ba12      	rev	r2, r2
		*(u32*)dbuf2 = BYTESWAP(s->init);
20002362:	c104      	stmia	r1!, {r2}
		switch(mode)
20002364:	b2db      	uxtb	r3, r3
		*(u32*)dbuf2 = BYTESWAP(s->init);
20002366:	9101      	str	r1, [sp, #4]
		switch(mode)
20002368:	2b0c      	cmp	r3, #12
2000236a:	d900      	bls.n	2000236e <_Z12VgaBufRenderPmS_Phi+0xb2>
2000236c:	e094      	b.n	20002498 <_Z12VgaBufRenderPmS_Phi+0x1dc>
2000236e:	4a6c      	ldr	r2, [pc, #432]	; (20002520 <_Z12VgaBufRenderPmS_Phi+0x264>)
20002370:	009b      	lsls	r3, r3, #2
20002372:	58d3      	ldr	r3, [r2, r3]
20002374:	469f      	mov	pc, r3
				MemSet4((u32*)dbuf2, s->keycol, s->w/4);
20002376:	8aea      	ldrh	r2, [r5, #22]
20002378:	68e9      	ldr	r1, [r5, #12]
2000237a:	0892      	lsrs	r2, r2, #2
2000237c:	9801      	ldr	r0, [sp, #4]
2000237e:	f7fd ffc7 	bl	20000310 <MemSet4>
				cbuf2 = RenderFastSprite(cbuf2, y, s, dbuf2);
20002382:	4648      	mov	r0, r9
20002384:	002a      	movs	r2, r5
20002386:	9b01      	ldr	r3, [sp, #4]
20002388:	9903      	ldr	r1, [sp, #12]
2000238a:	3008      	adds	r0, #8
2000238c:	f7fe f938 	bl	20000600 <RenderFastSprite>
20002390:	9002      	str	r0, [sp, #8]
		*cbuf2++ = 0; // end mark
20002392:	2200      	movs	r2, #0
20002394:	9b02      	ldr	r3, [sp, #8]
20002396:	601a      	str	r2, [r3, #0]
		*cbuf2++ = 0; // end mark
20002398:	605a      	str	r2, [r3, #4]
	for (layer = 1; layer < LAYERS; layer++)
2000239a:	2304      	movs	r3, #4
2000239c:	469c      	mov	ip, r3
2000239e:	4b61      	ldr	r3, [pc, #388]	; (20002524 <_Z12VgaBufRenderPmS_Phi+0x268>)
200023a0:	3404      	adds	r4, #4
200023a2:	44e0      	add	r8, ip
200023a4:	3704      	adds	r7, #4
200023a6:	3601      	adds	r6, #1
200023a8:	3524      	adds	r5, #36	; 0x24
200023aa:	42a3      	cmp	r3, r4
200023ac:	d1b0      	bne.n	20002310 <_Z12VgaBufRenderPmS_Phi+0x54>
}
200023ae:	9800      	ldr	r0, [sp, #0]
200023b0:	b005      	add	sp, #20
200023b2:	bcf0      	pop	{r4, r5, r6, r7}
200023b4:	46bb      	mov	fp, r7
200023b6:	46b2      	mov	sl, r6
200023b8:	46a9      	mov	r9, r5
200023ba:	46a0      	mov	r8, r4
200023bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
				int x = s->x; // destination coordinate X
200023be:	2112      	movs	r1, #18
200023c0:	5e6b      	ldrsh	r3, [r5, r1]
				int w = s->w; // destination width
200023c2:	8aea      	ldrh	r2, [r5, #22]
				if (x < 0)
200023c4:	2b00      	cmp	r3, #0
200023c6:	da00      	bge.n	200023ca <_Z12VgaBufRenderPmS_Phi+0x10e>
200023c8:	e07d      	b.n	200024c6 <_Z12VgaBufRenderPmS_Phi+0x20a>
					if (x + w > CurVmode.width)
200023ca:	494e      	ldr	r1, [pc, #312]	; (20002504 <_Z12VgaBufRenderPmS_Phi+0x248>)
200023cc:	18d0      	adds	r0, r2, r3
200023ce:	8809      	ldrh	r1, [r1, #0]
200023d0:	468c      	mov	ip, r1
					x = 0;
200023d2:	2100      	movs	r1, #0
					if (x + w > CurVmode.width)
200023d4:	4560      	cmp	r0, ip
200023d6:	dd01      	ble.n	200023dc <_Z12VgaBufRenderPmS_Phi+0x120>
						w = CurVmode.width - x; // limit W
200023d8:	4662      	mov	r2, ip
200023da:	1ad2      	subs	r2, r2, r3
				w = ALIGN4(w);
200023dc:	2303      	movs	r3, #3
200023de:	0010      	movs	r0, r2
200023e0:	4398      	bics	r0, r3
				if (w <= 0)
200023e2:	2800      	cmp	r0, #0
200023e4:	dd36      	ble.n	20002454 <_Z12VgaBufRenderPmS_Phi+0x198>
					*cbuf2++ = w/4;
200023e6:	464b      	mov	r3, r9
200023e8:	1092      	asrs	r2, r2, #2
200023ea:	609a      	str	r2, [r3, #8]
					*cbuf2++ = (u32)&dbuf2[x];
200023ec:	2310      	movs	r3, #16
200023ee:	9801      	ldr	r0, [sp, #4]
200023f0:	444b      	add	r3, r9
200023f2:	4684      	mov	ip, r0
200023f4:	9302      	str	r3, [sp, #8]
200023f6:	464b      	mov	r3, r9
200023f8:	4461      	add	r1, ip
200023fa:	60d9      	str	r1, [r3, #12]
					RenderPersp(dbuf2, y, s);
200023fc:	002a      	movs	r2, r5
200023fe:	9903      	ldr	r1, [sp, #12]
20002400:	f7fe fe66 	bl	200010d0 <RenderPersp>
20002404:	e7c5      	b.n	20002392 <_Z12VgaBufRenderPmS_Phi+0xd6>
				*cbuf2++ = s->trans;
20002406:	464a      	mov	r2, r9
20002408:	8a2b      	ldrh	r3, [r5, #16]
2000240a:	6093      	str	r3, [r2, #8]
				*cbuf2++ = (u32)dbuf2;
2000240c:	2310      	movs	r3, #16
2000240e:	444b      	add	r3, r9
20002410:	9302      	str	r3, [sp, #8]
20002412:	9b01      	ldr	r3, [sp, #4]
20002414:	60d3      	str	r3, [r2, #12]
				MemSet4((u32*)dbuf2, s->keycol, s->w/4);
20002416:	8aea      	ldrh	r2, [r5, #22]
20002418:	68e9      	ldr	r1, [r5, #12]
2000241a:	0018      	movs	r0, r3
2000241c:	0892      	lsrs	r2, r2, #2
2000241e:	f7fd ff77 	bl	20000310 <MemSet4>
				RenderSprite(dbuf2, y, s);
20002422:	002a      	movs	r2, r5
20002424:	9903      	ldr	r1, [sp, #12]
20002426:	9801      	ldr	r0, [sp, #4]
20002428:	f7fe ffdc 	bl	200013e4 <RenderSprite>
			break;
2000242c:	e7b1      	b.n	20002392 <_Z12VgaBufRenderPmS_Phi+0xd6>
				int x = s->x; // destination coordinate X
2000242e:	2112      	movs	r1, #18
20002430:	5e6b      	ldrsh	r3, [r5, r1]
				int w = s->w; // destination width
20002432:	8aea      	ldrh	r2, [r5, #22]
				if (x < 0)
20002434:	2b00      	cmp	r3, #0
20002436:	db3a      	blt.n	200024ae <_Z12VgaBufRenderPmS_Phi+0x1f2>
					if (x + w > CurVmode.width)
20002438:	4932      	ldr	r1, [pc, #200]	; (20002504 <_Z12VgaBufRenderPmS_Phi+0x248>)
2000243a:	18d0      	adds	r0, r2, r3
2000243c:	8809      	ldrh	r1, [r1, #0]
2000243e:	468c      	mov	ip, r1
					x = 0;
20002440:	2100      	movs	r1, #0
					if (x + w > CurVmode.width)
20002442:	4560      	cmp	r0, ip
20002444:	dd01      	ble.n	2000244a <_Z12VgaBufRenderPmS_Phi+0x18e>
						w = CurVmode.width - x; // limit W
20002446:	4662      	mov	r2, ip
20002448:	1ad2      	subs	r2, r2, r3
				w = ALIGN4(w);
2000244a:	2303      	movs	r3, #3
2000244c:	0010      	movs	r0, r2
2000244e:	4398      	bics	r0, r3
				if (w <= 0)
20002450:	2800      	cmp	r0, #0
20002452:	dc44      	bgt.n	200024de <_Z12VgaBufRenderPmS_Phi+0x222>
					*cbuf2++ = 1;
20002454:	2301      	movs	r3, #1
20002456:	464a      	mov	r2, r9
20002458:	6093      	str	r3, [r2, #8]
					*cbuf2++ = (u32)dbuf2;
2000245a:	330f      	adds	r3, #15
2000245c:	444b      	add	r3, r9
2000245e:	9302      	str	r3, [sp, #8]
20002460:	464b      	mov	r3, r9
20002462:	9a01      	ldr	r2, [sp, #4]
20002464:	60da      	str	r2, [r3, #12]
					*(u32*)dbuf2 = s->keycol;
20002466:	465b      	mov	r3, fp
20002468:	68ea      	ldr	r2, [r5, #12]
2000246a:	605a      	str	r2, [r3, #4]
2000246c:	e791      	b.n	20002392 <_Z12VgaBufRenderPmS_Phi+0xd6>
				int n = row[y+1] - row[y];
2000246e:	9a03      	ldr	r2, [sp, #12]
				u16* row = (u16*)s->par;
20002470:	6869      	ldr	r1, [r5, #4]
				int n = row[y+1] - row[y];
20002472:	3201      	adds	r2, #1
20002474:	0052      	lsls	r2, r2, #1
20002476:	188b      	adds	r3, r1, r2
20002478:	5a8a      	ldrh	r2, [r1, r2]
				*cbuf2++ = n;
2000247a:	4649      	mov	r1, r9
				int n = row[y+1] - row[y];
2000247c:	3b02      	subs	r3, #2
2000247e:	881b      	ldrh	r3, [r3, #0]
20002480:	1ad2      	subs	r2, r2, r3
				*cbuf2++ = n;
20002482:	608a      	str	r2, [r1, #8]
				*cbuf2++ = (u32)&s->img[row[y]*4];
20002484:	2210      	movs	r2, #16
20002486:	444a      	add	r2, r9
20002488:	9202      	str	r2, [sp, #8]
2000248a:	009b      	lsls	r3, r3, #2
				*cbuf2++ = (u32)&s->img[y*s->wb];
2000248c:	682a      	ldr	r2, [r5, #0]
2000248e:	4694      	mov	ip, r2
20002490:	464a      	mov	r2, r9
20002492:	4463      	add	r3, ip
20002494:	60d3      	str	r3, [r2, #12]
			break;
20002496:	e77c      	b.n	20002392 <_Z12VgaBufRenderPmS_Phi+0xd6>
				*cbuf2++ = s->trans;
20002498:	464a      	mov	r2, r9
2000249a:	8a2b      	ldrh	r3, [r5, #16]
2000249c:	6093      	str	r3, [r2, #8]
				*cbuf2++ = (u32)&s->img[y*s->wb];
2000249e:	2310      	movs	r3, #16
200024a0:	444b      	add	r3, r9
200024a2:	9a03      	ldr	r2, [sp, #12]
200024a4:	9302      	str	r3, [sp, #8]
200024a6:	8b6b      	ldrh	r3, [r5, #26]
200024a8:	435a      	muls	r2, r3
200024aa:	0013      	movs	r3, r2
200024ac:	e7ee      	b.n	2000248c <_Z12VgaBufRenderPmS_Phi+0x1d0>
					x = ALIGN4(x+4098) - 4096; // round X to 4-pixels
200024ae:	491e      	ldr	r1, [pc, #120]	; (20002528 <_Z12VgaBufRenderPmS_Phi+0x26c>)
200024b0:	468c      	mov	ip, r1
200024b2:	2103      	movs	r1, #3
200024b4:	4463      	add	r3, ip
200024b6:	438b      	bics	r3, r1
200024b8:	491c      	ldr	r1, [pc, #112]	; (2000252c <_Z12VgaBufRenderPmS_Phi+0x270>)
200024ba:	1859      	adds	r1, r3, r1
					w += x;	// decrease W
200024bc:	1852      	adds	r2, r2, r1
					x = -x; // start offset of X
200024be:	2180      	movs	r1, #128	; 0x80
200024c0:	0149      	lsls	r1, r1, #5
200024c2:	1ac9      	subs	r1, r1, r3
200024c4:	e7c1      	b.n	2000244a <_Z12VgaBufRenderPmS_Phi+0x18e>
					x = ALIGN4(x+4098) - 4096; // round X to 4-pixels
200024c6:	4918      	ldr	r1, [pc, #96]	; (20002528 <_Z12VgaBufRenderPmS_Phi+0x26c>)
200024c8:	468c      	mov	ip, r1
200024ca:	2103      	movs	r1, #3
200024cc:	4463      	add	r3, ip
200024ce:	438b      	bics	r3, r1
200024d0:	4916      	ldr	r1, [pc, #88]	; (2000252c <_Z12VgaBufRenderPmS_Phi+0x270>)
200024d2:	1859      	adds	r1, r3, r1
					w += x;	// decrease W
200024d4:	1852      	adds	r2, r2, r1
					x = -x; // start offset of X
200024d6:	2180      	movs	r1, #128	; 0x80
200024d8:	0149      	lsls	r1, r1, #5
200024da:	1ac9      	subs	r1, r1, r3
200024dc:	e77e      	b.n	200023dc <_Z12VgaBufRenderPmS_Phi+0x120>
					*cbuf2++ = w/4;
200024de:	464b      	mov	r3, r9
200024e0:	1092      	asrs	r2, r2, #2
200024e2:	609a      	str	r2, [r3, #8]
					*cbuf2++ = (u32)&dbuf2[x];
200024e4:	2310      	movs	r3, #16
200024e6:	9801      	ldr	r0, [sp, #4]
200024e8:	444b      	add	r3, r9
200024ea:	4684      	mov	ip, r0
200024ec:	9302      	str	r3, [sp, #8]
200024ee:	464b      	mov	r3, r9
200024f0:	4461      	add	r1, ip
200024f2:	60d9      	str	r1, [r3, #12]
					RenderPersp2(dbuf2, y, s);
200024f4:	002a      	movs	r2, r5
200024f6:	9903      	ldr	r1, [sp, #12]
200024f8:	f7fe fe74 	bl	200011e4 <RenderPersp2>
200024fc:	e749      	b.n	20002392 <_Z12VgaBufRenderPmS_Phi+0xd6>
200024fe:	46c0      	nop			; (mov r8, r8)
20002500:	200061bc 	.word	0x200061bc
20002504:	200049e8 	.word	0x200049e8
20002508:	200061b8 	.word	0x200061b8
2000250c:	20002758 	.word	0x20002758
20002510:	20002768 	.word	0x20002768
20002514:	20004998 	.word	0x20004998
20002518:	20004a5c 	.word	0x20004a5c
2000251c:	20004a84 	.word	0x20004a84
20002520:	1002b9ec 	.word	0x1002b9ec
20002524:	20002764 	.word	0x20002764
20002528:	00001002 	.word	0x00001002
2000252c:	fffff000 	.word	0xfffff000

20002530 <VgaLine>:
{
20002530:	b570      	push	{r4, r5, r6, lr}
	int bufinx = VgaBufProcess();
20002532:	f7ff fd9f 	bl	20002074 <_Z13VgaBufProcessv>
	if (bufinx == 0)
20002536:	2800      	cmp	r0, #0
20002538:	d013      	beq.n	20002562 <VgaLine+0x32>
		cbuf = CtrlBuf2;
2000253a:	4838      	ldr	r0, [pc, #224]	; (2000261c <VgaLine+0xec>)
		dbuf = LineBuf2;
2000253c:	4a38      	ldr	r2, [pc, #224]	; (20002620 <VgaLine+0xf0>)
	CtrlBufNext[0] = cbuf;
2000253e:	4b39      	ldr	r3, [pc, #228]	; (20002624 <VgaLine+0xf4>)
	if (line > CurVmode.vtot) line = 1;
20002540:	4d39      	ldr	r5, [pc, #228]	; (20002628 <VgaLine+0xf8>)
	CtrlBufNext[0] = cbuf;
20002542:	6018      	str	r0, [r3, #0]
	int line = ScanLine;	// current scanline
20002544:	4b39      	ldr	r3, [pc, #228]	; (2000262c <VgaLine+0xfc>)
	if (line > CurVmode.vtot) line = 1;
20002546:	8da9      	ldrh	r1, [r5, #44]	; 0x2c
	int line = ScanLine;	// current scanline
20002548:	681b      	ldr	r3, [r3, #0]
	line++; // next line to render
2000254a:	3301      	adds	r3, #1
	if (line > CurVmode.vtot) line = 1;
2000254c:	4299      	cmp	r1, r3
2000254e:	da00      	bge.n	20002552 <VgaLine+0x22>
20002550:	2301      	movs	r3, #1
	u8 linetype = ScanlineType[line];
20002552:	4937      	ldr	r1, [pc, #220]	; (20002630 <VgaLine+0x100>)
	switch (linetype)
20002554:	5ccc      	ldrb	r4, [r1, r3]
20002556:	2c0a      	cmp	r4, #10
20002558:	d85e      	bhi.n	20002618 <VgaLine+0xe8>
2000255a:	4936      	ldr	r1, [pc, #216]	; (20002634 <VgaLine+0x104>)
2000255c:	00a4      	lsls	r4, r4, #2
2000255e:	5909      	ldr	r1, [r1, r4]
20002560:	468f      	mov	pc, r1
		cbuf = CtrlBuf1;
20002562:	4835      	ldr	r0, [pc, #212]	; (20002638 <VgaLine+0x108>)
		dbuf = LineBuf1;
20002564:	4a35      	ldr	r2, [pc, #212]	; (2000263c <VgaLine+0x10c>)
20002566:	e7ea      	b.n	2000253e <VgaLine+0xe>
		y0 = line - CurVmode.vfirst1;
20002568:	2140      	movs	r1, #64	; 0x40
		y0 = line - CurVmode.vfirst2;
2000256a:	5a69      	ldrh	r1, [r5, r1]
2000256c:	1a5b      	subs	r3, r3, r1
		if (CurVmode.dbly) y0 >>= 1;
2000256e:	2155      	movs	r1, #85	; 0x55
20002570:	5c69      	ldrb	r1, [r5, r1]
20002572:	2900      	cmp	r1, #0
20002574:	d000      	beq.n	20002578 <VgaLine+0x48>
20002576:	105b      	asrs	r3, r3, #1
		y0 = (y0 << 1) + 1;
20002578:	005b      	lsls	r3, r3, #1
2000257a:	3301      	adds	r3, #1
		cbuf = VgaBufRender(cbuf, cbuf0, dbuf, y0);
2000257c:	0001      	movs	r1, r0
2000257e:	f7ff fe9d 	bl	200022bc <_Z12VgaBufRenderPmS_Phi>
20002582:	0003      	movs	r3, r0
	*cbuf++ = 0; // end mark
20002584:	2200      	movs	r2, #0
	hw_divider_restore_state(&DividerState);
20002586:	482e      	ldr	r0, [pc, #184]	; (20002640 <VgaLine+0x110>)
	*cbuf++ = 0; // end mark
20002588:	601a      	str	r2, [r3, #0]
	*cbuf++ = 0; // end mark
2000258a:	605a      	str	r2, [r3, #4]
	hw_divider_restore_state(&DividerState);
2000258c:	f000 f878 	bl	20002680 <__hw_divider_restore_state_veneer>
}
20002590:	bd70      	pop	{r4, r5, r6, pc}
		y0 = line - CurVmode.vfirst2;
20002592:	214e      	movs	r1, #78	; 0x4e
20002594:	e7e9      	b.n	2000256a <VgaLine+0x3a>
		*cbuf++ = 2; // send 2x u32
20002596:	2302      	movs	r3, #2
		*cbuf++ = 4;	// send 4x u32
20002598:	6003      	str	r3, [r0, #0]
		*cbuf++ = (u32)&LineBufSync[0]; // half + half
2000259a:	0003      	movs	r3, r0
2000259c:	4a29      	ldr	r2, [pc, #164]	; (20002644 <VgaLine+0x114>)
2000259e:	3308      	adds	r3, #8
200025a0:	6042      	str	r2, [r0, #4]
		break;
200025a2:	e7ef      	b.n	20002584 <VgaLine+0x54>
		*cbuf++ = 4;	// send 4x u32
200025a4:	2304      	movs	r3, #4
200025a6:	6003      	str	r3, [r0, #0]
		*cbuf++ = (u32)&LineBufSync[4]; // VSYNC
200025a8:	0003      	movs	r3, r0
200025aa:	4a26      	ldr	r2, [pc, #152]	; (20002644 <VgaLine+0x114>)
200025ac:	3308      	adds	r3, #8
200025ae:	3210      	adds	r2, #16
200025b0:	6042      	str	r2, [r0, #4]
		break;
200025b2:	e7e7      	b.n	20002584 <VgaLine+0x54>
		*cbuf++ = 4;	// send 4x u32
200025b4:	2304      	movs	r3, #4
200025b6:	6003      	str	r3, [r0, #0]
		*cbuf++ = (u32)&LineBufSync[6]; // VSYNC + half
200025b8:	0003      	movs	r3, r0
200025ba:	4a22      	ldr	r2, [pc, #136]	; (20002644 <VgaLine+0x114>)
200025bc:	3308      	adds	r3, #8
200025be:	3218      	adds	r2, #24
200025c0:	6042      	str	r2, [r0, #4]
		break;
200025c2:	e7df      	b.n	20002584 <VgaLine+0x54>
		*cbuf++ = 4;	// send 4x u32
200025c4:	2304      	movs	r3, #4
200025c6:	e7e7      	b.n	20002598 <VgaLine+0x68>
		*cbuf++ = 4;	// send 4x u32
200025c8:	2304      	movs	r3, #4
200025ca:	6003      	str	r3, [r0, #0]
		*cbuf++ = (u32)&LineBufSync[2]; // half + VSYNC
200025cc:	0003      	movs	r3, r0
200025ce:	4a1d      	ldr	r2, [pc, #116]	; (20002644 <VgaLine+0x114>)
200025d0:	3308      	adds	r3, #8
200025d2:	3208      	adds	r2, #8
200025d4:	6042      	str	r2, [r0, #4]
		break;
200025d6:	e7d5      	b.n	20002584 <VgaLine+0x54>
		*cbuf++ = 2; // send 2x u32
200025d8:	2302      	movs	r3, #2
200025da:	6003      	str	r3, [r0, #0]
		*cbuf++ = (u32)LineBufDark; // dark
200025dc:	0003      	movs	r3, r0
200025de:	4a1a      	ldr	r2, [pc, #104]	; (20002648 <VgaLine+0x118>)
200025e0:	3308      	adds	r3, #8
200025e2:	6042      	str	r2, [r0, #4]
		break;
200025e4:	e7ce      	b.n	20002584 <VgaLine+0x54>
		y0 = line - CurVmode.vfirst1;
200025e6:	2140      	movs	r1, #64	; 0x40
200025e8:	5a69      	ldrh	r1, [r5, r1]
200025ea:	1a5b      	subs	r3, r3, r1
		if (CurVmode.dbly) y0 >>= 1;
200025ec:	2155      	movs	r1, #85	; 0x55
200025ee:	5c69      	ldrb	r1, [r5, r1]
200025f0:	2900      	cmp	r1, #0
200025f2:	d0c3      	beq.n	2000257c <VgaLine+0x4c>
200025f4:	105b      	asrs	r3, r3, #1
		cbuf = VgaBufRender(cbuf, cbuf0, dbuf, y0);
200025f6:	e7c1      	b.n	2000257c <VgaLine+0x4c>
		y0 = line - CurVmode.vfirst1;
200025f8:	2140      	movs	r1, #64	; 0x40
		y0 = line - CurVmode.vfirst2;
200025fa:	5a69      	ldrh	r1, [r5, r1]
200025fc:	1a5b      	subs	r3, r3, r1
		if (CurVmode.dbly) y0 >>= 1;
200025fe:	2155      	movs	r1, #85	; 0x55
20002600:	5c69      	ldrb	r1, [r5, r1]
20002602:	2900      	cmp	r1, #0
20002604:	d000      	beq.n	20002608 <VgaLine+0xd8>
20002606:	105b      	asrs	r3, r3, #1
		y0 <<= 1;
20002608:	005b      	lsls	r3, r3, #1
		cbuf = VgaBufRender(cbuf, cbuf0, dbuf, y0);
2000260a:	0001      	movs	r1, r0
2000260c:	f7ff fe56 	bl	200022bc <_Z12VgaBufRenderPmS_Phi>
20002610:	0003      	movs	r3, r0
		break;
20002612:	e7b7      	b.n	20002584 <VgaLine+0x54>
		y0 = line - CurVmode.vfirst2;
20002614:	214e      	movs	r1, #78	; 0x4e
20002616:	e7f0      	b.n	200025fa <VgaLine+0xca>
	switch (linetype)
20002618:	0003      	movs	r3, r0
2000261a:	e7b3      	b.n	20002584 <VgaLine+0x54>
2000261c:	20003f38 	.word	0x20003f38
20002620:	20005790 	.word	0x20005790
20002624:	20004998 	.word	0x20004998
20002628:	200049e8 	.word	0x200049e8
2000262c:	20006e48 	.word	0x20006e48
20002630:	20006e4c 	.word	0x20006e4c
20002634:	1002ba20 	.word	0x1002ba20
20002638:	200034d8 	.word	0x200034d8
2000263c:	20004d70 	.word	0x20004d70
20002640:	20004a44 	.word	0x20004a44
20002644:	200061cc 	.word	0x200061cc
20002648:	200061b0 	.word	0x200061b0

2000264c <__aeabi_idiv0>:
2000264c:	4770      	bx	lr
2000264e:	46c0      	nop			; (mov r8, r8)

20002650 <__hw_divider_save_state_veneer>:
20002650:	b401      	push	{r0}
20002652:	4802      	ldr	r0, [pc, #8]	; (2000265c <__hw_divider_save_state_veneer+0xc>)
20002654:	4684      	mov	ip, r0
20002656:	bc01      	pop	{r0}
20002658:	4760      	bx	ip
2000265a:	bf00      	nop
2000265c:	100007f9 	.word	0x100007f9

20002660 <__time_us_64_veneer>:
20002660:	b401      	push	{r0}
20002662:	4802      	ldr	r0, [pc, #8]	; (2000266c <__time_us_64_veneer+0xc>)
20002664:	4684      	mov	ip, r0
20002666:	bc01      	pop	{r0}
20002668:	4760      	bx	ip
2000266a:	bf00      	nop
2000266c:	10004a05 	.word	0x10004a05

20002670 <__best_effort_wfe_or_timeout_veneer>:
20002670:	b401      	push	{r0}
20002672:	4802      	ldr	r0, [pc, #8]	; (2000267c <__best_effort_wfe_or_timeout_veneer+0xc>)
20002674:	4684      	mov	ip, r0
20002676:	bc01      	pop	{r0}
20002678:	4760      	bx	ip
2000267a:	bf00      	nop
2000267c:	100048f1 	.word	0x100048f1

20002680 <__hw_divider_restore_state_veneer>:
20002680:	b401      	push	{r0}
20002682:	4802      	ldr	r0, [pc, #8]	; (2000268c <__hw_divider_restore_state_veneer+0xc>)
20002684:	4684      	mov	ip, r0
20002686:	bc01      	pop	{r0}
20002688:	4760      	bx	ip
2000268a:	bf00      	nop
2000268c:	10000815 	.word	0x10000815

20002690 <____wrap___aeabi_lmul_veneer>:
20002690:	b401      	push	{r0}
20002692:	4802      	ldr	r0, [pc, #8]	; (2000269c <____wrap___aeabi_lmul_veneer+0xc>)
20002694:	4684      	mov	ip, r0
20002696:	bc01      	pop	{r0}
20002698:	4760      	bx	ip
2000269a:	bf00      	nop
2000269c:	100010fd 	.word	0x100010fd

200026a0 <__rom_func_lookup_veneer>:
200026a0:	b401      	push	{r0}
200026a2:	4802      	ldr	r0, [pc, #8]	; (200026ac <__rom_func_lookup_veneer+0xc>)
200026a4:	4684      	mov	ip, r0
200026a6:	bc01      	pop	{r0}
200026a8:	4760      	bx	ip
200026aa:	bf00      	nop
200026ac:	10001131 	.word	0x10001131

200026b0 <aeabi_bits_funcs>:
200026b0:	00003350 	.word	0x00003350
200026b4:	0000334c 	.word	0x0000334c
200026b8:	00003354 	.word	0x00003354
200026bc:	00003352 	.word	0x00003352

200026c0 <aeabi_bits_funcs_end>:
200026c0:	00000000 	.word	0x00000000
200026c4:	00010000 	.word	0x00010000
	...
200026d0:	00020000 	.word	0x00020000
	...
200026dc:	00030000 	.word	0x00030000
	...
200026e8:	00ff0000 	.word	0x00ff0000
200026ec:	00000000 	.word	0x00000000

200026f0 <irq_handler_chain_first_slot>:
200026f0:	b500      	push	{lr}
200026f2:	6848      	ldr	r0, [r1, #4]
200026f4:	3101      	adds	r1, #1
200026f6:	468e      	mov	lr, r1
200026f8:	4700      	bx	r0

200026fa <irq_handler_chain_remove_tail>:
200026fa:	4670      	mov	r0, lr
200026fc:	3809      	subs	r0, #9
200026fe:	4901      	ldr	r1, [pc, #4]	; (20002704 <irq_handler_chain_remove_tail+0xa>)
20002700:	4788      	blx	r1
20002702:	bd00      	pop	{pc}
20002704:	10001b0d 	.word	0x10001b0d

20002708 <aeabi_mem_funcs>:
20002708:	0000534d 	.word	0x0000534d
2000270c:	0000434d 	.word	0x0000434d
20002710:	00003453 	.word	0x00003453
20002714:	00003443 	.word	0x00003443

20002718 <stdio_usb>:
20002718:	10003e71 00000000 10003e09 00000000     q>.......>......
20002728:	00000100                                ....

2000272c <striped_spin_lock_num>:
2000272c:	00000010                                ....

20002730 <_usbd_qdef>:
20002730:	20011e68 000c0010 00000000 00000000     h.. ............
	...

20002750 <ep_dir_string>:
20002750:	100108d4 100108d8                       ........

20002758 <CtrlBufSize>:
20002758:	000000a6 000000a6 000000a6 000000a6     ................

20002768 <LineBufSize>:
20002768:	00000288 00000288 00000288 00000288     ................

20002778 <LayerNumPin>:
20002778:	08080808                                ....

2000277c <DefPal16>:
2000277c:	16140200 b6a8a2a0 5f5d4b49 fffdebe9     ........IK]_....

2000278c <pScreen>:
2000278c:	20007110                                .q. 

20002790 <VideoResTab>:
20002790:	1002be94 1002be94 1002be94 1002be5c     ............\...
200027a0:	1002be5c 1002be5c 1002be5c 1002be5c     \...\...\...\...
200027b0:	1002be24 1002be24 1002be24 1002bdec     $...$...$.......
200027c0:	1002bdec 1002bdec 1002bdec 1002bdec     ................
200027d0:	1002bd7c 1002bf04 1002bf04 1002bd7c     |...........|...
200027e0:	1002bf04 1002becc 1002bf3c 1002bdb4     ........<.......

200027f0 <SoundInc>:
200027f0:	00000400                                ....

200027f4 <_impure_ptr>:
200027f4:	200027f8                                .'. 

200027f8 <impure_data>:
200027f8:	00000000 20002ae4 20002b4c 20002bb4     .....*. L+. .+. 
	...
200028a0:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
200028b0:	0005deec 0000000b 00000000 00000000     ................
	...

20002c20 <__malloc_av_>:
	...
20002c28:	20002c20 20002c20 20002c28 20002c28      ,.  ,. (,. (,. 
20002c38:	20002c30 20002c30 20002c38 20002c38     0,. 0,. 8,. 8,. 
20002c48:	20002c40 20002c40 20002c48 20002c48     @,. @,. H,. H,. 
20002c58:	20002c50 20002c50 20002c58 20002c58     P,. P,. X,. X,. 
20002c68:	20002c60 20002c60 20002c68 20002c68     `,. `,. h,. h,. 
20002c78:	20002c70 20002c70 20002c78 20002c78     p,. p,. x,. x,. 
20002c88:	20002c80 20002c80 20002c88 20002c88     .,. .,. .,. .,. 
20002c98:	20002c90 20002c90 20002c98 20002c98     .,. .,. .,. .,. 
20002ca8:	20002ca0 20002ca0 20002ca8 20002ca8     .,. .,. .,. .,. 
20002cb8:	20002cb0 20002cb0 20002cb8 20002cb8     .,. .,. .,. .,. 
20002cc8:	20002cc0 20002cc0 20002cc8 20002cc8     .,. .,. .,. .,. 
20002cd8:	20002cd0 20002cd0 20002cd8 20002cd8     .,. .,. .,. .,. 
20002ce8:	20002ce0 20002ce0 20002ce8 20002ce8     .,. .,. .,. .,. 
20002cf8:	20002cf0 20002cf0 20002cf8 20002cf8     .,. .,. .,. .,. 
20002d08:	20002d00 20002d00 20002d08 20002d08     .-. .-. .-. .-. 
20002d18:	20002d10 20002d10 20002d18 20002d18     .-. .-. .-. .-. 
20002d28:	20002d20 20002d20 20002d28 20002d28      -.  -. (-. (-. 
20002d38:	20002d30 20002d30 20002d38 20002d38     0-. 0-. 8-. 8-. 
20002d48:	20002d40 20002d40 20002d48 20002d48     @-. @-. H-. H-. 
20002d58:	20002d50 20002d50 20002d58 20002d58     P-. P-. X-. X-. 
20002d68:	20002d60 20002d60 20002d68 20002d68     `-. `-. h-. h-. 
20002d78:	20002d70 20002d70 20002d78 20002d78     p-. p-. x-. x-. 
20002d88:	20002d80 20002d80 20002d88 20002d88     .-. .-. .-. .-. 
20002d98:	20002d90 20002d90 20002d98 20002d98     .-. .-. .-. .-. 
20002da8:	20002da0 20002da0 20002da8 20002da8     .-. .-. .-. .-. 
20002db8:	20002db0 20002db0 20002db8 20002db8     .-. .-. .-. .-. 
20002dc8:	20002dc0 20002dc0 20002dc8 20002dc8     .-. .-. .-. .-. 
20002dd8:	20002dd0 20002dd0 20002dd8 20002dd8     .-. .-. .-. .-. 
20002de8:	20002de0 20002de0 20002de8 20002de8     .-. .-. .-. .-. 
20002df8:	20002df0 20002df0 20002df8 20002df8     .-. .-. .-. .-. 
20002e08:	20002e00 20002e00 20002e08 20002e08     ... ... ... ... 
20002e18:	20002e10 20002e10 20002e18 20002e18     ... ... ... ... 
20002e28:	20002e20 20002e20 20002e28 20002e28      ..  .. (.. (.. 
20002e38:	20002e30 20002e30 20002e38 20002e38     0.. 0.. 8.. 8.. 
20002e48:	20002e40 20002e40 20002e48 20002e48     @.. @.. H.. H.. 
20002e58:	20002e50 20002e50 20002e58 20002e58     P.. P.. X.. X.. 
20002e68:	20002e60 20002e60 20002e68 20002e68     `.. `.. h.. h.. 
20002e78:	20002e70 20002e70 20002e78 20002e78     p.. p.. x.. x.. 
20002e88:	20002e80 20002e80 20002e88 20002e88     ... ... ... ... 
20002e98:	20002e90 20002e90 20002e98 20002e98     ... ... ... ... 
20002ea8:	20002ea0 20002ea0 20002ea8 20002ea8     ... ... ... ... 
20002eb8:	20002eb0 20002eb0 20002eb8 20002eb8     ... ... ... ... 
20002ec8:	20002ec0 20002ec0 20002ec8 20002ec8     ... ... ... ... 
20002ed8:	20002ed0 20002ed0 20002ed8 20002ed8     ... ... ... ... 
20002ee8:	20002ee0 20002ee0 20002ee8 20002ee8     ... ... ... ... 
20002ef8:	20002ef0 20002ef0 20002ef8 20002ef8     ... ... ... ... 
20002f08:	20002f00 20002f00 20002f08 20002f08     ./. ./. ./. ./. 
20002f18:	20002f10 20002f10 20002f18 20002f18     ./. ./. ./. ./. 
20002f28:	20002f20 20002f20 20002f28 20002f28      /.  /. (/. (/. 
20002f38:	20002f30 20002f30 20002f38 20002f38     0/. 0/. 8/. 8/. 
20002f48:	20002f40 20002f40 20002f48 20002f48     @/. @/. H/. H/. 
20002f58:	20002f50 20002f50 20002f58 20002f58     P/. P/. X/. X/. 
20002f68:	20002f60 20002f60 20002f68 20002f68     `/. `/. h/. h/. 
20002f78:	20002f70 20002f70 20002f78 20002f78     p/. p/. x/. x/. 
20002f88:	20002f80 20002f80 20002f88 20002f88     ./. ./. ./. ./. 
20002f98:	20002f90 20002f90 20002f98 20002f98     ./. ./. ./. ./. 
20002fa8:	20002fa0 20002fa0 20002fa8 20002fa8     ./. ./. ./. ./. 
20002fb8:	20002fb0 20002fb0 20002fb8 20002fb8     ./. ./. ./. ./. 
20002fc8:	20002fc0 20002fc0 20002fc8 20002fc8     ./. ./. ./. ./. 
20002fd8:	20002fd0 20002fd0 20002fd8 20002fd8     ./. ./. ./. ./. 
20002fe8:	20002fe0 20002fe0 20002fe8 20002fe8     ./. ./. ./. ./. 
20002ff8:	20002ff0 20002ff0 20002ff8 20002ff8     ./. ./. ./. ./. 
20003008:	20003000 20003000 20003008 20003008     .0. .0. .0. .0. 
20003018:	20003010 20003010 20003018 20003018     .0. .0. .0. .0. 

20003028 <__malloc_sbrk_base>:
20003028:	ffffffff                                ....

2000302c <__malloc_trim_threshold>:
2000302c:	00020000                                ....

20003030 <print_mutex>:
	...

20003038 <__mutex_array_end>:
20003038:	100010d5 	.word	0x100010d5
2000303c:	1000030d 	.word	0x1000030d
20003040:	100016a9 	.word	0x100016a9
20003044:	10001769 	.word	0x10001769

20003048 <__frame_dummy_init_array_entry>:
20003048:	100002ed 10004bc5                       .....K..
