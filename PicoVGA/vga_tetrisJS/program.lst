
build/program.elf:     file format elf32-littlearm


Disassembly of section .boot2:

10000000 <__boot2_start__>:
10000000:	4b32b500 	.word	0x4b32b500
10000004:	60582021 	.word	0x60582021
10000008:	21026898 	.word	0x21026898
1000000c:	60984388 	.word	0x60984388
10000010:	611860d8 	.word	0x611860d8
10000014:	4b2e6158 	.word	0x4b2e6158
10000018:	60992100 	.word	0x60992100
1000001c:	61592102 	.word	0x61592102
10000020:	22f02101 	.word	0x22f02101
10000024:	492b5099 	.word	0x492b5099
10000028:	21016019 	.word	0x21016019
1000002c:	20356099 	.word	0x20356099
10000030:	f844f000 	.word	0xf844f000
10000034:	42902202 	.word	0x42902202
10000038:	2106d014 	.word	0x2106d014
1000003c:	f0006619 	.word	0xf0006619
10000040:	6e19f834 	.word	0x6e19f834
10000044:	66192101 	.word	0x66192101
10000048:	66182000 	.word	0x66182000
1000004c:	f000661a 	.word	0xf000661a
10000050:	6e19f82c 	.word	0x6e19f82c
10000054:	6e196e19 	.word	0x6e196e19
10000058:	f0002005 	.word	0xf0002005
1000005c:	2101f82f 	.word	0x2101f82f
10000060:	d1f94208 	.word	0xd1f94208
10000064:	60992100 	.word	0x60992100
10000068:	6019491b 	.word	0x6019491b
1000006c:	60592100 	.word	0x60592100
10000070:	481b491a 	.word	0x481b491a
10000074:	21016001 	.word	0x21016001
10000078:	21eb6099 	.word	0x21eb6099
1000007c:	21a06619 	.word	0x21a06619
10000080:	f0006619 	.word	0xf0006619
10000084:	2100f812 	.word	0x2100f812
10000088:	49166099 	.word	0x49166099
1000008c:	60014814 	.word	0x60014814
10000090:	60992101 	.word	0x60992101
10000094:	2800bc01 	.word	0x2800bc01
10000098:	4700d000 	.word	0x4700d000
1000009c:	49134812 	.word	0x49134812
100000a0:	c8036008 	.word	0xc8036008
100000a4:	8808f380 	.word	0x8808f380
100000a8:	b5034708 	.word	0xb5034708
100000ac:	20046a99 	.word	0x20046a99
100000b0:	d0fb4201 	.word	0xd0fb4201
100000b4:	42012001 	.word	0x42012001
100000b8:	bd03d1f8 	.word	0xbd03d1f8
100000bc:	6618b502 	.word	0x6618b502
100000c0:	f7ff6618 	.word	0xf7ff6618
100000c4:	6e18fff2 	.word	0x6e18fff2
100000c8:	bd026e18 	.word	0xbd026e18
100000cc:	40020000 	.word	0x40020000
100000d0:	18000000 	.word	0x18000000
100000d4:	00070000 	.word	0x00070000
100000d8:	005f0300 	.word	0x005f0300
100000dc:	00002221 	.word	0x00002221
100000e0:	180000f4 	.word	0x180000f4
100000e4:	a0002022 	.word	0xa0002022
100000e8:	10000100 	.word	0x10000100
100000ec:	e000ed08 	.word	0xe000ed08
	...
100000fc:	7a4eb274 	.word	0x7a4eb274

Disassembly of section .text:

10000100 <__logical_binary_start>:
10000100:	20042000 	.word	0x20042000
10000104:	100001f7 	.word	0x100001f7
10000108:	100001c3 	.word	0x100001c3
1000010c:	100001c5 	.word	0x100001c5
10000110:	100001c1 	.word	0x100001c1
10000114:	100001c1 	.word	0x100001c1
10000118:	100001c1 	.word	0x100001c1
1000011c:	100001c1 	.word	0x100001c1
10000120:	100001c1 	.word	0x100001c1
10000124:	100001c1 	.word	0x100001c1
10000128:	100001c1 	.word	0x100001c1
1000012c:	100001c7 	.word	0x100001c7
10000130:	100001c1 	.word	0x100001c1
10000134:	100001c1 	.word	0x100001c1
10000138:	100001c9 	.word	0x100001c9
1000013c:	100001cb 	.word	0x100001cb
10000140:	100001cd 	.word	0x100001cd
10000144:	100001cd 	.word	0x100001cd
10000148:	100001cd 	.word	0x100001cd
1000014c:	100001cd 	.word	0x100001cd
10000150:	100001cd 	.word	0x100001cd
10000154:	100001cd 	.word	0x100001cd
10000158:	100001cd 	.word	0x100001cd
1000015c:	100001cd 	.word	0x100001cd
10000160:	100001cd 	.word	0x100001cd
10000164:	100001cd 	.word	0x100001cd
10000168:	100001cd 	.word	0x100001cd
1000016c:	100001cd 	.word	0x100001cd
10000170:	100001cd 	.word	0x100001cd
10000174:	100001cd 	.word	0x100001cd
10000178:	100001cd 	.word	0x100001cd
1000017c:	100001cd 	.word	0x100001cd
10000180:	100001cd 	.word	0x100001cd
10000184:	100001cd 	.word	0x100001cd
10000188:	100001cd 	.word	0x100001cd
1000018c:	100001cd 	.word	0x100001cd
10000190:	100001cd 	.word	0x100001cd
10000194:	100001cd 	.word	0x100001cd
10000198:	100001cd 	.word	0x100001cd
1000019c:	100001cd 	.word	0x100001cd
100001a0:	100001cd 	.word	0x100001cd
100001a4:	100001cd 	.word	0x100001cd
100001a8:	100001cd 	.word	0x100001cd
100001ac:	100001cd 	.word	0x100001cd
100001b0:	100001cd 	.word	0x100001cd
100001b4:	100001cd 	.word	0x100001cd
100001b8:	100001cd 	.word	0x100001cd
100001bc:	100001cd 	.word	0x100001cd

100001c0 <isr_invalid>:
100001c0:	be00      	bkpt	0x0000

100001c2 <isr_nmi>:
100001c2:	be00      	bkpt	0x0000

100001c4 <isr_hardfault>:
100001c4:	be00      	bkpt	0x0000

100001c6 <isr_svcall>:
100001c6:	be00      	bkpt	0x0000

100001c8 <isr_pendsv>:
100001c8:	be00      	bkpt	0x0000

100001ca <isr_systick>:
100001ca:	be00      	bkpt	0x0000

100001cc <__unhandled_user_irq>:
100001cc:	f000 f84b 	bl	10000266 <__get_current_exception>
100001d0:	3810      	subs	r0, #16

100001d2 <unhandled_user_irq_num_in_r0>:
100001d2:	be00      	bkpt	0x0000

100001d4 <binary_info_header>:
100001d4:	7188ebf2 	.word	0x7188ebf2
100001d8:	1002ae24 	.word	0x1002ae24
100001dc:	1002ae44 	.word	0x1002ae44
100001e0:	10000234 	.word	0x10000234
100001e4:	e71aa390 	.word	0xe71aa390

100001e8 <_entry_point>:
100001e8:	2000      	movs	r0, #0
100001ea:	4921      	ldr	r1, [pc, #132]	; (10000270 <__get_current_exception+0xa>)
100001ec:	6008      	str	r0, [r1, #0]
100001ee:	c806      	ldmia	r0!, {r1, r2}
100001f0:	f381 8808 	msr	MSP, r1
100001f4:	4710      	bx	r2

100001f6 <_reset_handler>:
100001f6:	481f      	ldr	r0, [pc, #124]	; (10000274 <__get_current_exception+0xe>)
100001f8:	6800      	ldr	r0, [r0, #0]
100001fa:	2800      	cmp	r0, #0
100001fc:	d12f      	bne.n	1000025e <hold_non_core0_in_bootrom>
100001fe:	a40d      	add	r4, pc, #52	; (adr r4, 10000234 <data_cpy_table>)
10000200:	cc0e      	ldmia	r4!, {r1, r2, r3}
10000202:	2900      	cmp	r1, #0
10000204:	d002      	beq.n	1000020c <_reset_handler+0x16>
10000206:	f000 f812 	bl	1000022e <data_cpy>
1000020a:	e7f9      	b.n	10000200 <_reset_handler+0xa>
1000020c:	491a      	ldr	r1, [pc, #104]	; (10000278 <__get_current_exception+0x12>)
1000020e:	4a1b      	ldr	r2, [pc, #108]	; (1000027c <__get_current_exception+0x16>)
10000210:	2000      	movs	r0, #0
10000212:	e000      	b.n	10000216 <bss_fill_test>

10000214 <bss_fill_loop>:
10000214:	c101      	stmia	r1!, {r0}

10000216 <bss_fill_test>:
10000216:	4291      	cmp	r1, r2
10000218:	d1fc      	bne.n	10000214 <bss_fill_loop>

1000021a <platform_entry>:
1000021a:	4919      	ldr	r1, [pc, #100]	; (10000280 <__get_current_exception+0x1a>)
1000021c:	4788      	blx	r1
1000021e:	4919      	ldr	r1, [pc, #100]	; (10000284 <__get_current_exception+0x1e>)
10000220:	4788      	blx	r1
10000222:	4919      	ldr	r1, [pc, #100]	; (10000288 <__get_current_exception+0x22>)
10000224:	4788      	blx	r1
10000226:	be00      	bkpt	0x0000
10000228:	e7fd      	b.n	10000226 <platform_entry+0xc>

1000022a <data_cpy_loop>:
1000022a:	c901      	ldmia	r1!, {r0}
1000022c:	c201      	stmia	r2!, {r0}

1000022e <data_cpy>:
1000022e:	429a      	cmp	r2, r3
10000230:	d3fb      	bcc.n	1000022a <data_cpy_loop>
10000232:	4770      	bx	lr

10000234 <data_cpy_table>:
10000234:	1002ae44 	.word	0x1002ae44
10000238:	200000c0 	.word	0x200000c0
1000023c:	20003050 	.word	0x20003050
10000240:	1002ddd4 	.word	0x1002ddd4
10000244:	20040000 	.word	0x20040000
10000248:	20040000 	.word	0x20040000
1000024c:	1002ddd4 	.word	0x1002ddd4
10000250:	20041000 	.word	0x20041000
10000254:	20041000 	.word	0x20041000
10000258:	00000000 	.word	0x00000000
1000025c:	4770      	bx	lr

1000025e <hold_non_core0_in_bootrom>:
1000025e:	480b      	ldr	r0, [pc, #44]	; (1000028c <__get_current_exception+0x26>)
10000260:	f000 fbba 	bl	100009d8 <rom_func_lookup>
10000264:	4700      	bx	r0

10000266 <__get_current_exception>:
10000266:	f3ef 8005 	mrs	r0, IPSR
1000026a:	b2c0      	uxtb	r0, r0
1000026c:	4770      	bx	lr
1000026e:	0000      	.short	0x0000
10000270:	e000ed08 	.word	0xe000ed08
10000274:	d0000000 	.word	0xd0000000
10000278:	20003050 	.word	0x20003050
1000027c:	20012778 	.word	0x20012778
10000280:	10001c4d 	.word	0x10001c4d
10000284:	1000ab65 	.word	0x1000ab65
10000288:	10001d6d 	.word	0x10001d6d
1000028c:	00005657 	.word	0x00005657

10000290 <__bi_46>:
10000290:	50520006 5360b3ab 1000e350              ..RP..`SP...

1000029c <__bi_34>:
1000029c:	50520006 02031c86 1000e358              ..RP....X...

100002a8 <__bi_26>:
100002a8:	50520006 9da22254 1000e360              ..RPT"..`...

100002b4 <__bi_18>:
100002b4:	50520005 68f465de 1002ddd4              ..RP.e.h....

100002c0 <_init>:
100002c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100002c2:	46c0      	nop			; (mov r8, r8)

100002c4 <__do_global_dtors_aux>:
100002c4:	b510      	push	{r4, lr}
100002c6:	4c06      	ldr	r4, [pc, #24]	; (100002e0 <__do_global_dtors_aux+0x1c>)
100002c8:	7823      	ldrb	r3, [r4, #0]
100002ca:	2b00      	cmp	r3, #0
100002cc:	d107      	bne.n	100002de <__do_global_dtors_aux+0x1a>
100002ce:	4b05      	ldr	r3, [pc, #20]	; (100002e4 <__do_global_dtors_aux+0x20>)
100002d0:	2b00      	cmp	r3, #0
100002d2:	d002      	beq.n	100002da <__do_global_dtors_aux+0x16>
100002d4:	4804      	ldr	r0, [pc, #16]	; (100002e8 <__do_global_dtors_aux+0x24>)
100002d6:	e000      	b.n	100002da <__do_global_dtors_aux+0x16>
100002d8:	bf00      	nop
100002da:	2301      	movs	r3, #1
100002dc:	7023      	strb	r3, [r4, #0]
100002de:	bd10      	pop	{r4, pc}
100002e0:	20003260 	.word	0x20003260
100002e4:	00000000 	.word	0x00000000
100002e8:	1000e318 	.word	0x1000e318

100002ec <frame_dummy>:
100002ec:	4b04      	ldr	r3, [pc, #16]	; (10000300 <frame_dummy+0x14>)
100002ee:	b510      	push	{r4, lr}
100002f0:	2b00      	cmp	r3, #0
100002f2:	d003      	beq.n	100002fc <frame_dummy+0x10>
100002f4:	4903      	ldr	r1, [pc, #12]	; (10000304 <frame_dummy+0x18>)
100002f6:	4804      	ldr	r0, [pc, #16]	; (10000308 <frame_dummy+0x1c>)
100002f8:	e000      	b.n	100002fc <frame_dummy+0x10>
100002fa:	bf00      	nop
100002fc:	bd10      	pop	{r4, pc}
100002fe:	46c0      	nop			; (mov r8, r8)
10000300:	00000000 	.word	0x00000000
10000304:	20003264 	.word	0x20003264
10000308:	1000e318 	.word	0x1000e318

1000030c <__aeabi_bits_init>:
1000030c:	4801      	ldr	r0, [pc, #4]	; (10000314 <__aeabi_bits_init+0x8>)
1000030e:	2104      	movs	r1, #4
10000310:	4b01      	ldr	r3, [pc, #4]	; (10000318 <__aeabi_bits_init+0xc>)
10000312:	4718      	bx	r3
10000314:	200026b0 	.word	0x200026b0
10000318:	100009f9 	.word	0x100009f9

1000031c <__wrap___aeabi_idiv>:
1000031c:	4a14      	ldr	r2, [pc, #80]	; (10000370 <divmod_s32s32_savestate+0x20>)
1000031e:	6f93      	ldr	r3, [r2, #120]	; 0x78
10000320:	089b      	lsrs	r3, r3, #2
10000322:	d215      	bcs.n	10000350 <divmod_s32s32_savestate>

10000324 <divmod_s32s32_unsafe>:
10000324:	6690      	str	r0, [r2, #104]	; 0x68
10000326:	66d1      	str	r1, [r2, #108]	; 0x6c
10000328:	2900      	cmp	r1, #0
1000032a:	d005      	beq.n	10000338 <divmod_s32s32_unsafe+0x14>
1000032c:	e7ff      	b.n	1000032e <divmod_s32s32_unsafe+0xa>
1000032e:	e7ff      	b.n	10000330 <divmod_s32s32_unsafe+0xc>
10000330:	e7ff      	b.n	10000332 <divmod_s32s32_unsafe+0xe>
10000332:	6f51      	ldr	r1, [r2, #116]	; 0x74
10000334:	6f10      	ldr	r0, [r2, #112]	; 0x70
10000336:	4770      	bx	lr
10000338:	b504      	push	{r2, lr}
1000033a:	2180      	movs	r1, #128	; 0x80
1000033c:	0609      	lsls	r1, r1, #24
1000033e:	17c2      	asrs	r2, r0, #31
10000340:	4051      	eors	r1, r2
10000342:	2800      	cmp	r0, #0
10000344:	d000      	beq.n	10000348 <divmod_s32s32_unsafe+0x24>
10000346:	43c8      	mvns	r0, r1
10000348:	f00d ffbe 	bl	1000e2c8 <____aeabi_idiv0_veneer>
1000034c:	2100      	movs	r1, #0
1000034e:	bd04      	pop	{r2, pc}

10000350 <divmod_s32s32_savestate>:
10000350:	6f93      	ldr	r3, [r2, #120]	; 0x78
10000352:	085b      	lsrs	r3, r3, #1
10000354:	d3fd      	bcc.n	10000352 <divmod_s32s32_savestate+0x2>
10000356:	b5f0      	push	{r4, r5, r6, r7, lr}
10000358:	6e94      	ldr	r4, [r2, #104]	; 0x68
1000035a:	6ed5      	ldr	r5, [r2, #108]	; 0x6c
1000035c:	6f57      	ldr	r7, [r2, #116]	; 0x74
1000035e:	6f16      	ldr	r6, [r2, #112]	; 0x70
10000360:	f7ff ffe0 	bl	10000324 <divmod_s32s32_unsafe>
10000364:	6694      	str	r4, [r2, #104]	; 0x68
10000366:	66d5      	str	r5, [r2, #108]	; 0x6c
10000368:	6757      	str	r7, [r2, #116]	; 0x74
1000036a:	6716      	str	r6, [r2, #112]	; 0x70
1000036c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000036e:	0000      	.short	0x0000
10000370:	d0000000 	.word	0xd0000000

10000374 <__wrap___aeabi_uidiv>:
10000374:	4a13      	ldr	r2, [pc, #76]	; (100003c4 <divmod_u32u32_savestate+0x20>)
10000376:	6f93      	ldr	r3, [r2, #120]	; 0x78
10000378:	089b      	lsrs	r3, r3, #2
1000037a:	d213      	bcs.n	100003a4 <divmod_u32u32_savestate>

1000037c <divmod_u32u32_unsafe>:
1000037c:	6610      	str	r0, [r2, #96]	; 0x60
1000037e:	6651      	str	r1, [r2, #100]	; 0x64
10000380:	2900      	cmp	r1, #0
10000382:	d005      	beq.n	10000390 <divmod_u32u32_unsafe+0x14>
10000384:	e7ff      	b.n	10000386 <divmod_u32u32_unsafe+0xa>
10000386:	e7ff      	b.n	10000388 <divmod_u32u32_unsafe+0xc>
10000388:	e7ff      	b.n	1000038a <divmod_u32u32_unsafe+0xe>
1000038a:	6f51      	ldr	r1, [r2, #116]	; 0x74
1000038c:	6f10      	ldr	r0, [r2, #112]	; 0x70
1000038e:	4770      	bx	lr
10000390:	b504      	push	{r2, lr}
10000392:	2800      	cmp	r0, #0
10000394:	d001      	beq.n	1000039a <divmod_u32u32_unsafe+0x1e>
10000396:	2000      	movs	r0, #0
10000398:	43c0      	mvns	r0, r0
1000039a:	f00d ff95 	bl	1000e2c8 <____aeabi_idiv0_veneer>
1000039e:	2100      	movs	r1, #0
100003a0:	bd04      	pop	{r2, pc}
100003a2:	46c0      	nop			; (mov r8, r8)

100003a4 <divmod_u32u32_savestate>:
100003a4:	6f93      	ldr	r3, [r2, #120]	; 0x78
100003a6:	085b      	lsrs	r3, r3, #1
100003a8:	d3fd      	bcc.n	100003a6 <divmod_u32u32_savestate+0x2>
100003aa:	b5f0      	push	{r4, r5, r6, r7, lr}
100003ac:	6e94      	ldr	r4, [r2, #104]	; 0x68
100003ae:	6ed5      	ldr	r5, [r2, #108]	; 0x6c
100003b0:	6f57      	ldr	r7, [r2, #116]	; 0x74
100003b2:	6f16      	ldr	r6, [r2, #112]	; 0x70
100003b4:	f7ff ffe2 	bl	1000037c <divmod_u32u32_unsafe>
100003b8:	6694      	str	r4, [r2, #104]	; 0x68
100003ba:	66d5      	str	r5, [r2, #108]	; 0x6c
100003bc:	6757      	str	r7, [r2, #116]	; 0x74
100003be:	6716      	str	r6, [r2, #112]	; 0x70
100003c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
100003c2:	0000      	.short	0x0000
100003c4:	d0000000 	.word	0xd0000000

100003c8 <__wrap___aeabi_ldivmod>:
100003c8:	4694      	mov	ip, r2
100003ca:	4a4e      	ldr	r2, [pc, #312]	; (10000504 <udiv0+0x1a>)
100003cc:	6f92      	ldr	r2, [r2, #120]	; 0x78
100003ce:	0892      	lsrs	r2, r2, #2
100003d0:	4662      	mov	r2, ip
100003d2:	d201      	bcs.n	100003d8 <divmod_s64s64_savestate>
100003d4:	e030      	b.n	10000438 <divmod_s64s64_unsafe>
100003d6:	46c0      	nop			; (mov r8, r8)

100003d8 <divmod_s64s64_savestate>:
100003d8:	b5f0      	push	{r4, r5, r6, r7, lr}
100003da:	4e4a      	ldr	r6, [pc, #296]	; (10000504 <udiv0+0x1a>)
100003dc:	6fb5      	ldr	r5, [r6, #120]	; 0x78
100003de:	086d      	lsrs	r5, r5, #1
100003e0:	d3fc      	bcc.n	100003dc <divmod_s64s64_savestate+0x4>
100003e2:	6e34      	ldr	r4, [r6, #96]	; 0x60
100003e4:	6e75      	ldr	r5, [r6, #100]	; 0x64
100003e6:	6f77      	ldr	r7, [r6, #116]	; 0x74
100003e8:	6f36      	ldr	r6, [r6, #112]	; 0x70
100003ea:	f000 f825 	bl	10000438 <divmod_s64s64_unsafe>
100003ee:	4694      	mov	ip, r2
100003f0:	4a44      	ldr	r2, [pc, #272]	; (10000504 <udiv0+0x1a>)
100003f2:	6614      	str	r4, [r2, #96]	; 0x60
100003f4:	6655      	str	r5, [r2, #100]	; 0x64
100003f6:	6757      	str	r7, [r2, #116]	; 0x74
100003f8:	6716      	str	r6, [r2, #112]	; 0x70
100003fa:	4662      	mov	r2, ip
100003fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
100003fe:	46c0      	nop			; (mov r8, r8)

10000400 <__wrap___aeabi_uldivmod>:
10000400:	4694      	mov	ip, r2
10000402:	4a40      	ldr	r2, [pc, #256]	; (10000504 <udiv0+0x1a>)
10000404:	6f92      	ldr	r2, [r2, #120]	; 0x78
10000406:	0892      	lsrs	r2, r2, #2
10000408:	4662      	mov	r2, ip
1000040a:	d201      	bcs.n	10000410 <divmod_u64u64_savestate>
1000040c:	e058      	b.n	100004c0 <divmod_u64u64_unsafe>
1000040e:	46c0      	nop			; (mov r8, r8)

10000410 <divmod_u64u64_savestate>:
10000410:	b5f0      	push	{r4, r5, r6, r7, lr}
10000412:	4e3c      	ldr	r6, [pc, #240]	; (10000504 <udiv0+0x1a>)
10000414:	6fb5      	ldr	r5, [r6, #120]	; 0x78
10000416:	086d      	lsrs	r5, r5, #1
10000418:	d3fc      	bcc.n	10000414 <divmod_u64u64_savestate+0x4>
1000041a:	6e34      	ldr	r4, [r6, #96]	; 0x60
1000041c:	6e75      	ldr	r5, [r6, #100]	; 0x64
1000041e:	6f77      	ldr	r7, [r6, #116]	; 0x74
10000420:	6f36      	ldr	r6, [r6, #112]	; 0x70
10000422:	f000 f84d 	bl	100004c0 <divmod_u64u64_unsafe>
10000426:	4694      	mov	ip, r2
10000428:	4a36      	ldr	r2, [pc, #216]	; (10000504 <udiv0+0x1a>)
1000042a:	6614      	str	r4, [r2, #96]	; 0x60
1000042c:	6655      	str	r5, [r2, #100]	; 0x64
1000042e:	6757      	str	r7, [r2, #116]	; 0x74
10000430:	6716      	str	r6, [r2, #112]	; 0x70
10000432:	4662      	mov	r2, ip
10000434:	bdf0      	pop	{r4, r5, r6, r7, pc}
10000436:	46c0      	nop			; (mov r8, r8)

10000438 <divmod_s64s64_unsafe>:
10000438:	2b00      	cmp	r3, #0
1000043a:	db24      	blt.n	10000486 <l41_1+0x26>
1000043c:	d011      	beq.n	10000462 <l41_1+0x2>
1000043e:	2900      	cmp	r1, #0
10000440:	da3e      	bge.n	100004c0 <divmod_u64u64_unsafe>
10000442:	b500      	push	{lr}
10000444:	43c9      	mvns	r1, r1
10000446:	4240      	negs	r0, r0
10000448:	d100      	bne.n	1000044c <l39_1>
1000044a:	3101      	adds	r1, #1

1000044c <l39_1>:
1000044c:	f000 f838 	bl	100004c0 <divmod_u64u64_unsafe>
10000450:	43c9      	mvns	r1, r1
10000452:	4240      	negs	r0, r0
10000454:	d100      	bne.n	10000458 <l40_1>
10000456:	3101      	adds	r1, #1

10000458 <l40_1>:
10000458:	43db      	mvns	r3, r3
1000045a:	4252      	negs	r2, r2
1000045c:	d100      	bne.n	10000460 <l41_1>
1000045e:	3301      	adds	r3, #1

10000460 <l41_1>:
10000460:	bd00      	pop	{pc}
10000462:	2a00      	cmp	r2, #0
10000464:	d1eb      	bne.n	1000043e <divmod_s64s64_unsafe+0x6>
10000466:	2800      	cmp	r0, #0
10000468:	d101      	bne.n	1000046e <l41_1+0xe>
1000046a:	2900      	cmp	r1, #0
1000046c:	d005      	beq.n	1000047a <l41_1+0x1a>
1000046e:	2000      	movs	r0, #0
10000470:	0fc9      	lsrs	r1, r1, #31
10000472:	07c9      	lsls	r1, r1, #31
10000474:	d101      	bne.n	1000047a <l41_1+0x1a>
10000476:	43c0      	mvns	r0, r0
10000478:	0841      	lsrs	r1, r0, #1
1000047a:	b500      	push	{lr}
1000047c:	f00d ff1c 	bl	1000e2b8 <____aeabi_ldiv0_veneer>
10000480:	2200      	movs	r2, #0
10000482:	2300      	movs	r3, #0
10000484:	bd00      	pop	{pc}
10000486:	b500      	push	{lr}
10000488:	2900      	cmp	r1, #0
1000048a:	db0a      	blt.n	100004a2 <l43_1+0x2>
1000048c:	43db      	mvns	r3, r3
1000048e:	4252      	negs	r2, r2
10000490:	d100      	bne.n	10000494 <l42_1>
10000492:	3301      	adds	r3, #1

10000494 <l42_1>:
10000494:	f000 f814 	bl	100004c0 <divmod_u64u64_unsafe>
10000498:	43c9      	mvns	r1, r1
1000049a:	4240      	negs	r0, r0
1000049c:	d100      	bne.n	100004a0 <l43_1>
1000049e:	3101      	adds	r1, #1

100004a0 <l43_1>:
100004a0:	bd00      	pop	{pc}
100004a2:	43c9      	mvns	r1, r1
100004a4:	4240      	negs	r0, r0
100004a6:	d100      	bne.n	100004aa <l44_1>
100004a8:	3101      	adds	r1, #1

100004aa <l44_1>:
100004aa:	43db      	mvns	r3, r3
100004ac:	4252      	negs	r2, r2
100004ae:	d100      	bne.n	100004b2 <l45_1>
100004b0:	3301      	adds	r3, #1

100004b2 <l45_1>:
100004b2:	f000 f805 	bl	100004c0 <divmod_u64u64_unsafe>
100004b6:	43db      	mvns	r3, r3
100004b8:	4252      	negs	r2, r2
100004ba:	d100      	bne.n	100004be <l46_1>
100004bc:	3301      	adds	r3, #1

100004be <l46_1>:
100004be:	bd00      	pop	{pc}

100004c0 <divmod_u64u64_unsafe>:
100004c0:	2900      	cmp	r1, #0
100004c2:	d123      	bne.n	1000050c <y64>
100004c4:	2b00      	cmp	r3, #0
100004c6:	d118      	bne.n	100004fa <udiv0+0x10>
100004c8:	2a00      	cmp	r2, #0
100004ca:	d00c      	beq.n	100004e6 <divmod_u64u64_unsafe+0x26>
100004cc:	46bc      	mov	ip, r7
100004ce:	4f0d      	ldr	r7, [pc, #52]	; (10000504 <udiv0+0x1a>)
100004d0:	6638      	str	r0, [r7, #96]	; 0x60
100004d2:	667a      	str	r2, [r7, #100]	; 0x64
100004d4:	2100      	movs	r1, #0
100004d6:	2300      	movs	r3, #0
100004d8:	e7ff      	b.n	100004da <divmod_u64u64_unsafe+0x1a>
100004da:	e7ff      	b.n	100004dc <divmod_u64u64_unsafe+0x1c>
100004dc:	e7ff      	b.n	100004de <divmod_u64u64_unsafe+0x1e>
100004de:	6f7a      	ldr	r2, [r7, #116]	; 0x74
100004e0:	6f38      	ldr	r0, [r7, #112]	; 0x70
100004e2:	4667      	mov	r7, ip
100004e4:	4770      	bx	lr
100004e6:	2800      	cmp	r0, #0
100004e8:	d001      	beq.n	100004ee <udiv0+0x4>

100004ea <udiv0>:
100004ea:	4807      	ldr	r0, [pc, #28]	; (10000508 <udiv0+0x1e>)
100004ec:	0001      	movs	r1, r0
100004ee:	b500      	push	{lr}
100004f0:	f00d fee2 	bl	1000e2b8 <____aeabi_ldiv0_veneer>
100004f4:	2200      	movs	r2, #0
100004f6:	2300      	movs	r3, #0
100004f8:	bd00      	pop	{pc}
100004fa:	0002      	movs	r2, r0
100004fc:	000b      	movs	r3, r1
100004fe:	2000      	movs	r0, #0
10000500:	2100      	movs	r1, #0
10000502:	4770      	bx	lr
10000504:	d0000000 	.word	0xd0000000
10000508:	ffffffff 	.word	0xffffffff

1000050c <y64>:
1000050c:	2b00      	cmp	r3, #0
1000050e:	d000      	beq.n	10000512 <y64+0x6>
10000510:	e0bd      	b.n	1000068e <y64_x48>
10000512:	0c13      	lsrs	r3, r2, #16
10000514:	d126      	bne.n	10000564 <y64_x32>
10000516:	2a00      	cmp	r2, #0
10000518:	d0e7      	beq.n	100004ea <udiv0>
1000051a:	b480      	push	{r7}
1000051c:	4f10      	ldr	r7, [pc, #64]	; (10000560 <y64+0x54>)
1000051e:	6639      	str	r1, [r7, #96]	; 0x60
10000520:	667a      	str	r2, [r7, #100]	; 0x64
10000522:	e7ff      	b.n	10000524 <y64+0x18>
10000524:	e7ff      	b.n	10000526 <y64+0x1a>
10000526:	b430      	push	{r4, r5}
10000528:	0c04      	lsrs	r4, r0, #16
1000052a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
1000052c:	6f39      	ldr	r1, [r7, #112]	; 0x70
1000052e:	041b      	lsls	r3, r3, #16
10000530:	4323      	orrs	r3, r4
10000532:	663b      	str	r3, [r7, #96]	; 0x60
10000534:	e7ff      	b.n	10000536 <y64+0x2a>
10000536:	e7ff      	b.n	10000538 <y64+0x2c>
10000538:	e7ff      	b.n	1000053a <y64+0x2e>
1000053a:	46c0      	nop			; (mov r8, r8)
1000053c:	b284      	uxth	r4, r0
1000053e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
10000540:	6f3d      	ldr	r5, [r7, #112]	; 0x70
10000542:	041b      	lsls	r3, r3, #16
10000544:	4323      	orrs	r3, r4
10000546:	663b      	str	r3, [r7, #96]	; 0x60
10000548:	e7ff      	b.n	1000054a <y64+0x3e>
1000054a:	e7ff      	b.n	1000054c <y64+0x40>
1000054c:	46c0      	nop			; (mov r8, r8)
1000054e:	2300      	movs	r3, #0
10000550:	042c      	lsls	r4, r5, #16
10000552:	0c2d      	lsrs	r5, r5, #16
10000554:	6f7a      	ldr	r2, [r7, #116]	; 0x74
10000556:	6f38      	ldr	r0, [r7, #112]	; 0x70
10000558:	1900      	adds	r0, r0, r4
1000055a:	4169      	adcs	r1, r5
1000055c:	bcb0      	pop	{r4, r5, r7}
1000055e:	4770      	bx	lr
10000560:	d0000000 	.word	0xd0000000

10000564 <y64_x32>:
10000564:	b5f0      	push	{r4, r5, r6, r7, lr}
10000566:	4694      	mov	ip, r2
10000568:	2500      	movs	r5, #0
1000056a:	0e14      	lsrs	r4, r2, #24
1000056c:	d101      	bne.n	10000572 <y64_x32+0xe>
1000056e:	0212      	lsls	r2, r2, #8
10000570:	3508      	adds	r5, #8
10000572:	0f14      	lsrs	r4, r2, #28
10000574:	d101      	bne.n	1000057a <y64_x32+0x16>
10000576:	0112      	lsls	r2, r2, #4
10000578:	3504      	adds	r5, #4
1000057a:	0f94      	lsrs	r4, r2, #30
1000057c:	d101      	bne.n	10000582 <y64_x32+0x1e>
1000057e:	0092      	lsls	r2, r2, #2
10000580:	3502      	adds	r5, #2
10000582:	0fd4      	lsrs	r4, r2, #31
10000584:	d101      	bne.n	1000058a <y64_x32+0x26>
10000586:	0052      	lsls	r2, r2, #1
10000588:	3501      	adds	r5, #1
1000058a:	0bd4      	lsrs	r4, r2, #15
1000058c:	3401      	adds	r4, #1
1000058e:	4f25      	ldr	r7, [pc, #148]	; (10000624 <y64_x32+0xc0>)
10000590:	667c      	str	r4, [r7, #100]	; 0x64
10000592:	4c25      	ldr	r4, [pc, #148]	; (10000628 <y64_x32+0xc4>)
10000594:	663c      	str	r4, [r7, #96]	; 0x60
10000596:	0c0e      	lsrs	r6, r1, #16
10000598:	b293      	uxth	r3, r2
1000059a:	e7ff      	b.n	1000059c <y64_x32+0x38>
1000059c:	e7ff      	b.n	1000059e <y64_x32+0x3a>
1000059e:	e7ff      	b.n	100005a0 <y64_x32+0x3c>
100005a0:	6f3c      	ldr	r4, [r7, #112]	; 0x70
100005a2:	4366      	muls	r6, r4
100005a4:	0c36      	lsrs	r6, r6, #16
100005a6:	0377      	lsls	r7, r6, #13
100005a8:	46be      	mov	lr, r7
100005aa:	4373      	muls	r3, r6
100005ac:	0bdf      	lsrs	r7, r3, #15
100005ae:	045b      	lsls	r3, r3, #17
100005b0:	1ac0      	subs	r0, r0, r3
100005b2:	41b9      	sbcs	r1, r7
100005b4:	0c13      	lsrs	r3, r2, #16
100005b6:	4373      	muls	r3, r6
100005b8:	18db      	adds	r3, r3, r3
100005ba:	1ac9      	subs	r1, r1, r3
100005bc:	08ce      	lsrs	r6, r1, #3
100005be:	4366      	muls	r6, r4
100005c0:	0c36      	lsrs	r6, r6, #16
100005c2:	44b6      	add	lr, r6
100005c4:	b293      	uxth	r3, r2
100005c6:	4373      	muls	r3, r6
100005c8:	0f1f      	lsrs	r7, r3, #28
100005ca:	011b      	lsls	r3, r3, #4
100005cc:	1ac0      	subs	r0, r0, r3
100005ce:	41b9      	sbcs	r1, r7
100005d0:	0c13      	lsrs	r3, r2, #16
100005d2:	4373      	muls	r3, r6
100005d4:	0b1f      	lsrs	r7, r3, #12
100005d6:	051b      	lsls	r3, r3, #20
100005d8:	1ac0      	subs	r0, r0, r3
100005da:	41b9      	sbcs	r1, r7
100005dc:	0d86      	lsrs	r6, r0, #22
100005de:	028f      	lsls	r7, r1, #10
100005e0:	433e      	orrs	r6, r7
100005e2:	4366      	muls	r6, r4
100005e4:	0c36      	lsrs	r6, r6, #16
100005e6:	2d09      	cmp	r5, #9
100005e8:	db24      	blt.n	10000634 <last0>
100005ea:	0a52      	lsrs	r2, r2, #9
100005ec:	4372      	muls	r2, r6
100005ee:	1a80      	subs	r0, r0, r2
100005f0:	0377      	lsls	r7, r6, #13
100005f2:	0a46      	lsrs	r6, r0, #9
100005f4:	4366      	muls	r6, r4
100005f6:	0c36      	lsrs	r6, r6, #16
100005f8:	2316      	movs	r3, #22
100005fa:	1b5b      	subs	r3, r3, r5
100005fc:	40de      	lsrs	r6, r3
100005fe:	40df      	lsrs	r7, r3
10000600:	19bf      	adds	r7, r7, r6
10000602:	4664      	mov	r4, ip
10000604:	4366      	muls	r6, r4
10000606:	1b82      	subs	r2, r0, r6
10000608:	4670      	mov	r0, lr
1000060a:	3504      	adds	r5, #4
1000060c:	3306      	adds	r3, #6
1000060e:	0001      	movs	r1, r0
10000610:	40d9      	lsrs	r1, r3
10000612:	40a8      	lsls	r0, r5
10000614:	19c0      	adds	r0, r0, r7
10000616:	d300      	bcc.n	1000061a <y64_x32+0xb6>
10000618:	3101      	adds	r1, #1
1000061a:	42a2      	cmp	r2, r4
1000061c:	d206      	bcs.n	1000062c <y64_x32+0xc8>
1000061e:	2300      	movs	r3, #0
10000620:	bdf0      	pop	{r4, r5, r6, r7, pc}
10000622:	0000      	.short	0x0000
10000624:	d0000000 	.word	0xd0000000
10000628:	ffffffff 	.word	0xffffffff
1000062c:	1b12      	subs	r2, r2, r4
1000062e:	3001      	adds	r0, #1
10000630:	d3f3      	bcc.n	1000061a <y64_x32+0xb6>
10000632:	e7f1      	b.n	10000618 <y64_x32+0xb4>

10000634 <last0>:
10000634:	2709      	movs	r7, #9
10000636:	1b7f      	subs	r7, r7, r5
10000638:	40fe      	lsrs	r6, r7
1000063a:	4664      	mov	r4, ip
1000063c:	b2a2      	uxth	r2, r4
1000063e:	4372      	muls	r2, r6
10000640:	1a80      	subs	r0, r0, r2
10000642:	d200      	bcs.n	10000646 <last0+0x12>
10000644:	3901      	subs	r1, #1
10000646:	0c22      	lsrs	r2, r4, #16
10000648:	4372      	muls	r2, r6
1000064a:	0c13      	lsrs	r3, r2, #16
1000064c:	0412      	lsls	r2, r2, #16
1000064e:	1a82      	subs	r2, r0, r2
10000650:	4199      	sbcs	r1, r3
10000652:	000b      	movs	r3, r1
10000654:	4670      	mov	r0, lr
10000656:	3504      	adds	r5, #4
10000658:	3713      	adds	r7, #19
1000065a:	0001      	movs	r1, r0
1000065c:	40f9      	lsrs	r1, r7
1000065e:	40a8      	lsls	r0, r5
10000660:	1980      	adds	r0, r0, r6
10000662:	d300      	bcc.n	10000666 <last0+0x32>
10000664:	3101      	adds	r1, #1
10000666:	2b00      	cmp	r3, #0
10000668:	d102      	bne.n	10000670 <last0+0x3c>
1000066a:	42a2      	cmp	r2, r4
1000066c:	d20a      	bcs.n	10000684 <last0+0x50>
1000066e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10000670:	3001      	adds	r0, #1
10000672:	d300      	bcc.n	10000676 <last0+0x42>
10000674:	3101      	adds	r1, #1
10000676:	1b12      	subs	r2, r2, r4
10000678:	d2fa      	bcs.n	10000670 <last0+0x3c>
1000067a:	3b01      	subs	r3, #1
1000067c:	d1f8      	bne.n	10000670 <last0+0x3c>
1000067e:	42a2      	cmp	r2, r4
10000680:	d200      	bcs.n	10000684 <last0+0x50>
10000682:	bdf0      	pop	{r4, r5, r6, r7, pc}
10000684:	3001      	adds	r0, #1
10000686:	d300      	bcc.n	1000068a <last0+0x56>
10000688:	3101      	adds	r1, #1
1000068a:	1b12      	subs	r2, r2, r4
1000068c:	e7f7      	b.n	1000067e <last0+0x4a>

1000068e <y64_x48>:
1000068e:	b5f0      	push	{r4, r5, r6, r7, lr}
10000690:	0c1c      	lsrs	r4, r3, #16
10000692:	d000      	beq.n	10000696 <y64_x48+0x8>
10000694:	e080      	b.n	10000798 <y64_x64>
10000696:	b40c      	push	{r2, r3}
10000698:	2500      	movs	r5, #0
1000069a:	0a1c      	lsrs	r4, r3, #8
1000069c:	d104      	bne.n	100006a8 <y64_x48+0x1a>
1000069e:	021b      	lsls	r3, r3, #8
100006a0:	0e16      	lsrs	r6, r2, #24
100006a2:	4333      	orrs	r3, r6
100006a4:	0212      	lsls	r2, r2, #8
100006a6:	3508      	adds	r5, #8
100006a8:	0b1c      	lsrs	r4, r3, #12
100006aa:	d104      	bne.n	100006b6 <y64_x48+0x28>
100006ac:	011b      	lsls	r3, r3, #4
100006ae:	0f16      	lsrs	r6, r2, #28
100006b0:	4333      	orrs	r3, r6
100006b2:	0112      	lsls	r2, r2, #4
100006b4:	3504      	adds	r5, #4
100006b6:	0b9c      	lsrs	r4, r3, #14
100006b8:	d104      	bne.n	100006c4 <y64_x48+0x36>
100006ba:	009b      	lsls	r3, r3, #2
100006bc:	0f96      	lsrs	r6, r2, #30
100006be:	4333      	orrs	r3, r6
100006c0:	0092      	lsls	r2, r2, #2
100006c2:	3502      	adds	r5, #2
100006c4:	0bdc      	lsrs	r4, r3, #15
100006c6:	d102      	bne.n	100006ce <y64_x48+0x40>
100006c8:	1892      	adds	r2, r2, r2
100006ca:	415b      	adcs	r3, r3
100006cc:	3501      	adds	r5, #1
100006ce:	001c      	movs	r4, r3
100006d0:	1897      	adds	r7, r2, r2
100006d2:	4164      	adcs	r4, r4
100006d4:	3401      	adds	r4, #1
100006d6:	4f46      	ldr	r7, [pc, #280]	; (100007f0 <y64_x64+0x58>)
100006d8:	667c      	str	r4, [r7, #100]	; 0x64
100006da:	4c46      	ldr	r4, [pc, #280]	; (100007f4 <y64_x64+0x5c>)
100006dc:	663c      	str	r4, [r7, #96]	; 0x60
100006de:	0c0e      	lsrs	r6, r1, #16
100006e0:	e7ff      	b.n	100006e2 <y64_x48+0x54>
100006e2:	e7ff      	b.n	100006e4 <y64_x48+0x56>
100006e4:	e7ff      	b.n	100006e6 <y64_x48+0x58>
100006e6:	46c0      	nop			; (mov r8, r8)
100006e8:	6f3c      	ldr	r4, [r7, #112]	; 0x70
100006ea:	4366      	muls	r6, r4
100006ec:	0c36      	lsrs	r6, r6, #16
100006ee:	0377      	lsls	r7, r6, #13
100006f0:	46be      	mov	lr, r7
100006f2:	b297      	uxth	r7, r2
100006f4:	4377      	muls	r7, r6
100006f6:	1bc0      	subs	r0, r0, r7
100006f8:	d200      	bcs.n	100006fc <y64_x48+0x6e>
100006fa:	3901      	subs	r1, #1
100006fc:	1bc0      	subs	r0, r0, r7
100006fe:	d200      	bcs.n	10000702 <y64_x48+0x74>
10000700:	3901      	subs	r1, #1
10000702:	b29f      	uxth	r7, r3
10000704:	4377      	muls	r7, r6
10000706:	1bc9      	subs	r1, r1, r7
10000708:	1bc9      	subs	r1, r1, r7
1000070a:	0c17      	lsrs	r7, r2, #16
1000070c:	4377      	muls	r7, r6
1000070e:	047e      	lsls	r6, r7, #17
10000710:	0bff      	lsrs	r7, r7, #15
10000712:	1b80      	subs	r0, r0, r6
10000714:	41b9      	sbcs	r1, r7
10000716:	08ce      	lsrs	r6, r1, #3
10000718:	4366      	muls	r6, r4
1000071a:	0c36      	lsrs	r6, r6, #16
1000071c:	2d0c      	cmp	r5, #12
1000071e:	db33      	blt.n	10000788 <last1>
10000720:	44b6      	add	lr, r6
10000722:	0b12      	lsrs	r2, r2, #12
10000724:	051f      	lsls	r7, r3, #20
10000726:	433a      	orrs	r2, r7
10000728:	0b1b      	lsrs	r3, r3, #12
1000072a:	b297      	uxth	r7, r2
1000072c:	4377      	muls	r7, r6
1000072e:	1bc0      	subs	r0, r0, r7
10000730:	d200      	bcs.n	10000734 <y64_x48+0xa6>
10000732:	3901      	subs	r1, #1
10000734:	b29f      	uxth	r7, r3
10000736:	4377      	muls	r7, r6
10000738:	1bc9      	subs	r1, r1, r7
1000073a:	0c17      	lsrs	r7, r2, #16
1000073c:	4377      	muls	r7, r6
1000073e:	043e      	lsls	r6, r7, #16
10000740:	0c3f      	lsrs	r7, r7, #16
10000742:	1b80      	subs	r0, r0, r6
10000744:	41b9      	sbcs	r1, r7
10000746:	0d86      	lsrs	r6, r0, #22
10000748:	028f      	lsls	r7, r1, #10
1000074a:	433e      	orrs	r6, r7
1000074c:	4366      	muls	r6, r4
1000074e:	2729      	movs	r7, #41	; 0x29
10000750:	1b7f      	subs	r7, r7, r5
10000752:	40fe      	lsrs	r6, r7
10000754:	3d0c      	subs	r5, #12
10000756:	4677      	mov	r7, lr
10000758:	40af      	lsls	r7, r5
1000075a:	19bf      	adds	r7, r7, r6
1000075c:	bc30      	pop	{r4, r5}
1000075e:	b2a2      	uxth	r2, r4
10000760:	b2ab      	uxth	r3, r5
10000762:	4372      	muls	r2, r6
10000764:	4373      	muls	r3, r6
10000766:	1a80      	subs	r0, r0, r2
10000768:	4199      	sbcs	r1, r3
1000076a:	0c22      	lsrs	r2, r4, #16
1000076c:	4372      	muls	r2, r6
1000076e:	0c13      	lsrs	r3, r2, #16
10000770:	0412      	lsls	r2, r2, #16
10000772:	1a80      	subs	r0, r0, r2
10000774:	4199      	sbcs	r1, r3
10000776:	0002      	movs	r2, r0
10000778:	000b      	movs	r3, r1
1000077a:	3701      	adds	r7, #1
1000077c:	1b00      	subs	r0, r0, r4
1000077e:	41a9      	sbcs	r1, r5
10000780:	d2f9      	bcs.n	10000776 <y64_x48+0xe8>
10000782:	1e78      	subs	r0, r7, #1
10000784:	2100      	movs	r1, #0
10000786:	bdf0      	pop	{r4, r5, r6, r7, pc}

10000788 <last1>:
10000788:	270c      	movs	r7, #12
1000078a:	1b7f      	subs	r7, r7, r5
1000078c:	40fe      	lsrs	r6, r7
1000078e:	4677      	mov	r7, lr
10000790:	0b7f      	lsrs	r7, r7, #13
10000792:	40af      	lsls	r7, r5
10000794:	19ff      	adds	r7, r7, r7
10000796:	e7e0      	b.n	1000075a <y64_x48+0xcc>

10000798 <y64_x64>:
10000798:	2400      	movs	r4, #0
1000079a:	1c5d      	adds	r5, r3, #1
1000079c:	d007      	beq.n	100007ae <y64_x64+0x16>
1000079e:	4f14      	ldr	r7, [pc, #80]	; (100007f0 <y64_x64+0x58>)
100007a0:	667d      	str	r5, [r7, #100]	; 0x64
100007a2:	6639      	str	r1, [r7, #96]	; 0x60
100007a4:	e7ff      	b.n	100007a6 <y64_x64+0xe>
100007a6:	e7ff      	b.n	100007a8 <y64_x64+0x10>
100007a8:	e7ff      	b.n	100007aa <y64_x64+0x12>
100007aa:	e7ff      	b.n	100007ac <y64_x64+0x14>
100007ac:	6f3c      	ldr	r4, [r7, #112]	; 0x70
100007ae:	b295      	uxth	r5, r2
100007b0:	b29e      	uxth	r6, r3
100007b2:	4365      	muls	r5, r4
100007b4:	4366      	muls	r6, r4
100007b6:	1b40      	subs	r0, r0, r5
100007b8:	41b1      	sbcs	r1, r6
100007ba:	0c15      	lsrs	r5, r2, #16
100007bc:	0c1e      	lsrs	r6, r3, #16
100007be:	4365      	muls	r5, r4
100007c0:	4366      	muls	r6, r4
100007c2:	0436      	lsls	r6, r6, #16
100007c4:	0c2f      	lsrs	r7, r5, #16
100007c6:	433e      	orrs	r6, r7
100007c8:	042d      	lsls	r5, r5, #16
100007ca:	1b40      	subs	r0, r0, r5
100007cc:	41b1      	sbcs	r1, r6
100007ce:	4299      	cmp	r1, r3
100007d0:	d204      	bcs.n	100007dc <y64_x64+0x44>
100007d2:	0002      	movs	r2, r0
100007d4:	000b      	movs	r3, r1
100007d6:	0020      	movs	r0, r4
100007d8:	2100      	movs	r1, #0
100007da:	bdf0      	pop	{r4, r5, r6, r7, pc}
100007dc:	d101      	bne.n	100007e2 <y64_x64+0x4a>
100007de:	4290      	cmp	r0, r2
100007e0:	d3f7      	bcc.n	100007d2 <y64_x64+0x3a>
100007e2:	1a80      	subs	r0, r0, r2
100007e4:	4199      	sbcs	r1, r3
100007e6:	3401      	adds	r4, #1
100007e8:	4299      	cmp	r1, r3
100007ea:	d3f2      	bcc.n	100007d2 <y64_x64+0x3a>
100007ec:	e7f6      	b.n	100007dc <y64_x64+0x44>
100007ee:	0000      	.short	0x0000
100007f0:	d0000000 	.word	0xd0000000
100007f4:	ffffffff 	.word	0xffffffff

100007f8 <hw_divider_save_state>:
100007f8:	b530      	push	{r4, r5, lr}
100007fa:	4d05      	ldr	r5, [pc, #20]	; (10000810 <hw_divider_save_state+0x18>)
100007fc:	6fac      	ldr	r4, [r5, #120]	; 0x78
100007fe:	0864      	lsrs	r4, r4, #1
10000800:	d3fd      	bcc.n	100007fe <hw_divider_save_state+0x6>
10000802:	6e29      	ldr	r1, [r5, #96]	; 0x60
10000804:	6e6a      	ldr	r2, [r5, #100]	; 0x64
10000806:	6f6b      	ldr	r3, [r5, #116]	; 0x74
10000808:	6f2c      	ldr	r4, [r5, #112]	; 0x70
1000080a:	c01e      	stmia	r0!, {r1, r2, r3, r4}
1000080c:	bd30      	pop	{r4, r5, pc}
1000080e:	0000      	.short	0x0000
10000810:	d0000000 	.word	0xd0000000

10000814 <hw_divider_restore_state>:
10000814:	b530      	push	{r4, r5, lr}
10000816:	4d03      	ldr	r5, [pc, #12]	; (10000824 <hw_divider_restore_state+0x10>)
10000818:	c81e      	ldmia	r0!, {r1, r2, r3, r4}
1000081a:	6629      	str	r1, [r5, #96]	; 0x60
1000081c:	666a      	str	r2, [r5, #100]	; 0x64
1000081e:	676b      	str	r3, [r5, #116]	; 0x74
10000820:	672c      	str	r4, [r5, #112]	; 0x70
10000822:	bd30      	pop	{r4, r5, pc}
10000824:	d0000000 	.word	0xd0000000

10000828 <double_table_shim_on_use_helper>:
10000828:	b507      	push	{r0, r1, r2, lr}
1000082a:	4660      	mov	r0, ip
1000082c:	8801      	ldrh	r1, [r0, #0]
1000082e:	0a0a      	lsrs	r2, r1, #8
10000830:	3002      	adds	r0, #2
10000832:	2adf      	cmp	r2, #223	; 0xdf
10000834:	d1fa      	bne.n	1000082c <double_table_shim_on_use_helper+0x4>
10000836:	b2c9      	uxtb	r1, r1
10000838:	0882      	lsrs	r2, r0, #2
1000083a:	d304      	bcc.n	10000846 <double_table_shim_on_use_helper+0x1e>
1000083c:	8802      	ldrh	r2, [r0, #0]
1000083e:	8840      	ldrh	r0, [r0, #2]
10000840:	0400      	lsls	r0, r0, #16
10000842:	4310      	orrs	r0, r2
10000844:	e000      	b.n	10000848 <double_table_shim_on_use_helper+0x20>
10000846:	6800      	ldr	r0, [r0, #0]
10000848:	4a01      	ldr	r2, [pc, #4]	; (10000850 <double_table_shim_on_use_helper+0x28>)
1000084a:	5050      	str	r0, [r2, r1]
1000084c:	9003      	str	r0, [sp, #12]
1000084e:	bd07      	pop	{r0, r1, r2, pc}
10000850:	20003060 	.word	0x20003060

10000854 <__wrap___aeabi_frsub>:
10000854:	4048      	eors	r0, r1
10000856:	4041      	eors	r1, r0
10000858:	4048      	eors	r0, r1

1000085a <__wrap___aeabi_fsub>:
1000085a:	4b06      	ldr	r3, [pc, #24]	; (10000874 <__wrap___aeabi_fmul+0x8>)
1000085c:	685b      	ldr	r3, [r3, #4]
1000085e:	4718      	bx	r3

10000860 <__wrap___aeabi_fadd>:
10000860:	4b04      	ldr	r3, [pc, #16]	; (10000874 <__wrap___aeabi_fmul+0x8>)
10000862:	681b      	ldr	r3, [r3, #0]
10000864:	4718      	bx	r3

10000866 <__wrap___aeabi_fdiv>:
10000866:	4b03      	ldr	r3, [pc, #12]	; (10000874 <__wrap___aeabi_fmul+0x8>)
10000868:	68db      	ldr	r3, [r3, #12]
1000086a:	4718      	bx	r3

1000086c <__wrap___aeabi_fmul>:
1000086c:	4b01      	ldr	r3, [pc, #4]	; (10000874 <__wrap___aeabi_fmul+0x8>)
1000086e:	689b      	ldr	r3, [r3, #8]
10000870:	4718      	bx	r3
10000872:	0000      	.short	0x0000
10000874:	20003160 	.word	0x20003160

10000878 <__wrap___aeabi_ui2f>:
10000878:	1a49      	subs	r1, r1, r1
1000087a:	2800      	cmp	r0, #0
1000087c:	d108      	bne.n	10000890 <__aeabi_i2f_main>
1000087e:	4608      	mov	r0, r1
10000880:	4770      	bx	lr
	...

10000884 <__wrap___aeabi_i2f>:
10000884:	0fc1      	lsrs	r1, r0, #31
10000886:	07c9      	lsls	r1, r1, #31
10000888:	d500      	bpl.n	1000088c <__wrap___aeabi_i2f+0x8>
1000088a:	4240      	negs	r0, r0
1000088c:	2800      	cmp	r0, #0
1000088e:	d017      	beq.n	100008c0 <__aeabi_i2f_main+0x30>

10000890 <__aeabi_i2f_main>:
10000890:	46f4      	mov	ip, lr
10000892:	b403      	push	{r0, r1}
10000894:	4b0b      	ldr	r3, [pc, #44]	; (100008c4 <__aeabi_i2f_main+0x34>)
10000896:	681b      	ldr	r3, [r3, #0]
10000898:	4798      	blx	r3
1000089a:	bc06      	pop	{r1, r2}
1000089c:	4081      	lsls	r1, r0
1000089e:	389e      	subs	r0, #158	; 0x9e
100008a0:	4240      	negs	r0, r0
100008a2:	3180      	adds	r1, #128	; 0x80
100008a4:	d207      	bcs.n	100008b6 <__aeabi_i2f_main+0x26>
100008a6:	060b      	lsls	r3, r1, #24
100008a8:	d007      	beq.n	100008ba <__aeabi_i2f_main+0x2a>
100008aa:	0049      	lsls	r1, r1, #1
100008ac:	0a49      	lsrs	r1, r1, #9
100008ae:	05c0      	lsls	r0, r0, #23
100008b0:	4310      	orrs	r0, r2
100008b2:	4308      	orrs	r0, r1
100008b4:	4760      	bx	ip
100008b6:	3001      	adds	r0, #1
100008b8:	e7f8      	b.n	100008ac <__aeabi_i2f_main+0x1c>
100008ba:	0a49      	lsrs	r1, r1, #9
100008bc:	0289      	lsls	r1, r1, #10
100008be:	e7f5      	b.n	100008ac <__aeabi_i2f_main+0x1c>
100008c0:	4770      	bx	lr
100008c2:	0000      	.short	0x0000
100008c4:	20012748 	.word	0x20012748

100008c8 <__wrap___aeabi_f2iz>:
100008c8:	0041      	lsls	r1, r0, #1
100008ca:	0e0a      	lsrs	r2, r1, #24
100008cc:	2380      	movs	r3, #128	; 0x80
100008ce:	061b      	lsls	r3, r3, #24
100008d0:	2a7e      	cmp	r2, #126	; 0x7e
100008d2:	dd0b      	ble.n	100008ec <__wrap___aeabi_f2iz+0x24>
100008d4:	3a9e      	subs	r2, #158	; 0x9e
100008d6:	da0b      	bge.n	100008f0 <__wrap___aeabi_f2iz+0x28>
100008d8:	17c1      	asrs	r1, r0, #31
100008da:	0240      	lsls	r0, r0, #9
100008dc:	0840      	lsrs	r0, r0, #1
100008de:	4318      	orrs	r0, r3
100008e0:	4252      	negs	r2, r2
100008e2:	40d0      	lsrs	r0, r2
100008e4:	0049      	lsls	r1, r1, #1
100008e6:	3101      	adds	r1, #1
100008e8:	4348      	muls	r0, r1
100008ea:	4770      	bx	lr
100008ec:	2000      	movs	r0, #0
100008ee:	4770      	bx	lr
100008f0:	0fc0      	lsrs	r0, r0, #31
100008f2:	18c0      	adds	r0, r0, r3
100008f4:	3801      	subs	r0, #1
100008f6:	4770      	bx	lr
100008f8:	42c0      	cmn	r0, r0
100008fa:	d30d      	bcc.n	10000918 <float2int>
100008fc:	b500      	push	{lr}
100008fe:	0040      	lsls	r0, r0, #1
10000900:	0840      	lsrs	r0, r0, #1
10000902:	2100      	movs	r1, #0
10000904:	f000 f812 	bl	1000092c <__wrap___aeabi_f2uiz>
10000908:	2800      	cmp	r0, #0
1000090a:	d401      	bmi.n	10000910 <__wrap___aeabi_f2iz+0x48>
1000090c:	4240      	negs	r0, r0
1000090e:	bd00      	pop	{pc}
10000910:	2080      	movs	r0, #128	; 0x80
10000912:	0600      	lsls	r0, r0, #24
10000914:	bd00      	pop	{pc}
	...

10000918 <float2int>:
10000918:	4b03      	ldr	r3, [pc, #12]	; (10000928 <float2int+0x10>)
1000091a:	69db      	ldr	r3, [r3, #28]
1000091c:	46fc      	mov	ip, pc
1000091e:	4718      	bx	r3
10000920:	0965df1c 	.word	0x0965df1c
10000924:	00001000 	.word	0x00001000
10000928:	20003160 	.word	0x20003160

1000092c <__wrap___aeabi_f2uiz>:
1000092c:	4b01      	ldr	r3, [pc, #4]	; (10000934 <__wrap___aeabi_f2uiz+0x8>)
1000092e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10000930:	4718      	bx	r3
10000932:	0000      	.short	0x0000
10000934:	20003160 	.word	0x20003160

10000938 <float_table_shim_on_use_helper>:
10000938:	b507      	push	{r0, r1, r2, lr}
1000093a:	4660      	mov	r0, ip
1000093c:	8801      	ldrh	r1, [r0, #0]
1000093e:	0a0a      	lsrs	r2, r1, #8
10000940:	3002      	adds	r0, #2
10000942:	2adf      	cmp	r2, #223	; 0xdf
10000944:	d1fa      	bne.n	1000093c <float_table_shim_on_use_helper+0x4>
10000946:	b2c9      	uxtb	r1, r1
10000948:	0882      	lsrs	r2, r0, #2
1000094a:	d304      	bcc.n	10000956 <float_table_shim_on_use_helper+0x1e>
1000094c:	8802      	ldrh	r2, [r0, #0]
1000094e:	8840      	ldrh	r0, [r0, #2]
10000950:	0400      	lsls	r0, r0, #16
10000952:	4310      	orrs	r0, r2
10000954:	e000      	b.n	10000958 <float_table_shim_on_use_helper+0x20>
10000956:	6800      	ldr	r0, [r0, #0]
10000958:	4a01      	ldr	r2, [pc, #4]	; (10000960 <float_table_shim_on_use_helper+0x28>)
1000095a:	5050      	str	r0, [r2, r1]
1000095c:	9003      	str	r0, [sp, #12]
1000095e:	bd07      	pop	{r0, r1, r2, pc}
10000960:	20003160 	.word	0x20003160

10000964 <float2int_shim>:
10000964:	2100      	movs	r1, #0

10000966 <float2fix_shim>:
10000966:	15c2      	asrs	r2, r0, #23
10000968:	3280      	adds	r2, #128	; 0x80
1000096a:	3280      	adds	r2, #128	; 0x80
1000096c:	d001      	beq.n	10000972 <float2fix_shim+0xc>
1000096e:	4a02      	ldr	r2, [pc, #8]	; (10000978 <float2fix_shim+0x12>)
10000970:	4710      	bx	r2
10000972:	2000      	movs	r0, #0
10000974:	4770      	bx	lr
10000976:	0000      	.short	0x0000
10000978:	00002acd 	.word	0x00002acd

1000097c <__aeabi_mem_init>:
1000097c:	4801      	ldr	r0, [pc, #4]	; (10000984 <__aeabi_mem_init+0x8>)
1000097e:	2104      	movs	r1, #4
10000980:	4b01      	ldr	r3, [pc, #4]	; (10000988 <__aeabi_mem_init+0xc>)
10000982:	4718      	bx	r3
10000984:	20002708 	.word	0x20002708
10000988:	100009f9 	.word	0x100009f9

1000098c <__wrap_memset>:
1000098c:	4b01      	ldr	r3, [pc, #4]	; (10000994 <__wrap_memset+0x8>)
1000098e:	681b      	ldr	r3, [r3, #0]
10000990:	4718      	bx	r3
10000992:	0000      	.short	0x0000
10000994:	20002708 	.word	0x20002708

10000998 <__wrap___aeabi_memcpy>:
10000998:	4b01      	ldr	r3, [pc, #4]	; (100009a0 <__wrap___aeabi_memcpy+0x8>)
1000099a:	685b      	ldr	r3, [r3, #4]
1000099c:	4718      	bx	r3
1000099e:	0000      	.short	0x0000
100009a0:	20002708 	.word	0x20002708

100009a4 <__wrap___aeabi_lmul>:
100009a4:	4351      	muls	r1, r2
100009a6:	4343      	muls	r3, r0
100009a8:	18c9      	adds	r1, r1, r3
100009aa:	468c      	mov	ip, r1
100009ac:	0c11      	lsrs	r1, r2, #16
100009ae:	b283      	uxth	r3, r0
100009b0:	434b      	muls	r3, r1
100009b2:	b410      	push	{r4}
100009b4:	0c04      	lsrs	r4, r0, #16
100009b6:	4361      	muls	r1, r4
100009b8:	b292      	uxth	r2, r2
100009ba:	b280      	uxth	r0, r0
100009bc:	4350      	muls	r0, r2
100009be:	4362      	muls	r2, r4
100009c0:	041c      	lsls	r4, r3, #16
100009c2:	0c1b      	lsrs	r3, r3, #16
100009c4:	1900      	adds	r0, r0, r4
100009c6:	bc10      	pop	{r4}
100009c8:	4159      	adcs	r1, r3
100009ca:	0413      	lsls	r3, r2, #16
100009cc:	0c12      	lsrs	r2, r2, #16
100009ce:	18c0      	adds	r0, r0, r3
100009d0:	4151      	adcs	r1, r2
100009d2:	4461      	add	r1, ip
100009d4:	4770      	bx	lr
	...

100009d8 <rom_func_lookup>:
// Convert a 16 bit pointer stored at the given rom address into a 32 bit pointer
#define rom_hword_as_ptr(rom_address) (void *)(uintptr_t)(*(uint16_t *)rom_address)

void *rom_func_lookup(uint32_t code) {
    rom_table_lookup_fn rom_table_lookup = (rom_table_lookup_fn) rom_hword_as_ptr(0x18);
    uint16_t *func_table = (uint16_t *) rom_hword_as_ptr(0x14);
100009d8:	2314      	movs	r3, #20
void *rom_func_lookup(uint32_t code) {
100009da:	b510      	push	{r4, lr}
100009dc:	0001      	movs	r1, r0
    uint16_t *func_table = (uint16_t *) rom_hword_as_ptr(0x14);
100009de:	8818      	ldrh	r0, [r3, #0]
    rom_table_lookup_fn rom_table_lookup = (rom_table_lookup_fn) rom_hword_as_ptr(0x18);
100009e0:	3304      	adds	r3, #4
100009e2:	881b      	ldrh	r3, [r3, #0]
    return rom_table_lookup(func_table, code);
100009e4:	4798      	blx	r3
}
100009e6:	bd10      	pop	{r4, pc}

100009e8 <rom_data_lookup>:

void *rom_data_lookup(uint32_t code) {
    rom_table_lookup_fn rom_table_lookup = (rom_table_lookup_fn) rom_hword_as_ptr(0x18);
    uint16_t *data_table = (uint16_t *) rom_hword_as_ptr(0x16);
100009e8:	2316      	movs	r3, #22
void *rom_data_lookup(uint32_t code) {
100009ea:	b510      	push	{r4, lr}
100009ec:	0001      	movs	r1, r0
    uint16_t *data_table = (uint16_t *) rom_hword_as_ptr(0x16);
100009ee:	8818      	ldrh	r0, [r3, #0]
    rom_table_lookup_fn rom_table_lookup = (rom_table_lookup_fn) rom_hword_as_ptr(0x18);
100009f0:	3302      	adds	r3, #2
100009f2:	881b      	ldrh	r3, [r3, #0]
    return rom_table_lookup(data_table, code);
100009f4:	4798      	blx	r3
}
100009f6:	bd10      	pop	{r4, pc}

100009f8 <rom_funcs_lookup>:
/// \end::table_lookup[]

bool rom_funcs_lookup(uint32_t *table, unsigned int count) {
100009f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100009fa:	4647      	mov	r7, r8
100009fc:	46ce      	mov	lr, r9
100009fe:	b580      	push	{r7, lr}
10000a00:	1e0f      	subs	r7, r1, #0
    bool ok = true;
    for (unsigned int i = 0; i < count; i++) {
10000a02:	d019      	beq.n	10000a38 <rom_funcs_lookup+0x40>
    uint16_t *func_table = (uint16_t *) rom_hword_as_ptr(0x14);
10000a04:	2314      	movs	r3, #20
10000a06:	4699      	mov	r9, r3
    rom_table_lookup_fn rom_table_lookup = (rom_table_lookup_fn) rom_hword_as_ptr(0x18);
10000a08:	3304      	adds	r3, #4
10000a0a:	0004      	movs	r4, r0
    for (unsigned int i = 0; i < count; i++) {
10000a0c:	2500      	movs	r5, #0
    bool ok = true;
10000a0e:	2601      	movs	r6, #1
    rom_table_lookup_fn rom_table_lookup = (rom_table_lookup_fn) rom_hword_as_ptr(0x18);
10000a10:	4698      	mov	r8, r3
    uint16_t *func_table = (uint16_t *) rom_hword_as_ptr(0x14);
10000a12:	464b      	mov	r3, r9
10000a14:	8818      	ldrh	r0, [r3, #0]
    rom_table_lookup_fn rom_table_lookup = (rom_table_lookup_fn) rom_hword_as_ptr(0x18);
10000a16:	4643      	mov	r3, r8
    return rom_table_lookup(func_table, code);
10000a18:	6821      	ldr	r1, [r4, #0]
    rom_table_lookup_fn rom_table_lookup = (rom_table_lookup_fn) rom_hword_as_ptr(0x18);
10000a1a:	881b      	ldrh	r3, [r3, #0]
    return rom_table_lookup(func_table, code);
10000a1c:	4798      	blx	r3
        table[i] = (uintptr_t) rom_func_lookup(table[i]);
10000a1e:	c401      	stmia	r4!, {r0}
        if (!table[i]) ok = false;
10000a20:	1e43      	subs	r3, r0, #1
10000a22:	4198      	sbcs	r0, r3
    for (unsigned int i = 0; i < count; i++) {
10000a24:	3501      	adds	r5, #1
        if (!table[i]) ok = false;
10000a26:	4240      	negs	r0, r0
10000a28:	4006      	ands	r6, r0
    for (unsigned int i = 0; i < count; i++) {
10000a2a:	42af      	cmp	r7, r5
10000a2c:	d1f1      	bne.n	10000a12 <rom_funcs_lookup+0x1a>
    }
    return ok;
}
10000a2e:	0030      	movs	r0, r6
10000a30:	bcc0      	pop	{r6, r7}
10000a32:	46b9      	mov	r9, r7
10000a34:	46b0      	mov	r8, r6
10000a36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bool ok = true;
10000a38:	2601      	movs	r6, #1
10000a3a:	e7f8      	b.n	10000a2e <rom_funcs_lookup+0x36>

10000a3c <hw_claim_lock>:
 *
 * \return The prior interrupt enable status for restoration later via restore_interrupts()
 */
inline static uint32_t save_and_disable_interrupts() {
    uint32_t status;
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
10000a3c:	f3ef 8010 	mrs	r0, PRIMASK
    __asm volatile ("cpsid i");
10000a40:	b672      	cpsid	i
 */
inline static void spin_lock_unsafe_blocking(spin_lock_t *lock) {
    // Note we don't do a wfe or anything, because by convention these spin_locks are VERY SHORT LIVED and NEVER BLOCK and run
    // with INTERRUPTS disabled (to ensure that)... therefore nothing on our core could be blocking us, so we just need to wait on another core
    // anyway which should be finished soon
    while (__builtin_expect(!*lock, 0));
10000a42:	4a03      	ldr	r2, [pc, #12]	; (10000a50 <hw_claim_lock+0x14>)
10000a44:	6813      	ldr	r3, [r2, #0]
10000a46:	2b00      	cmp	r3, #0
10000a48:	d0fc      	beq.n	10000a44 <hw_claim_lock+0x8>
    __asm volatile ("dmb");
10000a4a:	f3bf 8f5f 	dmb	sy

#include "hardware/claim.h"

uint32_t hw_claim_lock() {
    return spin_lock_blocking(spin_lock_instance(PICO_SPINLOCK_ID_HARDWARE_CLAIM));
}
10000a4e:	4770      	bx	lr
10000a50:	d000012c 	.word	0xd000012c

10000a54 <hw_claim_unlock>:
10000a54:	f3bf 8f5f 	dmb	sy
 *
 * \param lock Spinlock instance
 */
inline static void spin_unlock_unsafe(spin_lock_t *lock) {
    __mem_fence_release();
    *lock = 0;
10000a58:	2200      	movs	r2, #0
10000a5a:	4b02      	ldr	r3, [pc, #8]	; (10000a64 <hw_claim_unlock+0x10>)
10000a5c:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10000a5e:	f380 8810 	msr	PRIMASK, r0

void hw_claim_unlock(uint32_t save) {
    spin_unlock(spin_lock_instance(PICO_SPINLOCK_ID_HARDWARE_CLAIM), save);
}
10000a62:	4770      	bx	lr
10000a64:	d000012c 	.word	0xd000012c

10000a68 <hw_claim_or_assert>:
    }
    hw_claim_unlock(save);
    return rc;
}

void hw_claim_or_assert(uint8_t *bits, uint bit_index, const char *message) {
10000a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10000a6a:	46ce      	mov	lr, r9
10000a6c:	4647      	mov	r7, r8
10000a6e:	4691      	mov	r9, r2
10000a70:	b580      	push	{r7, lr}
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
10000a72:	f3ef 8c10 	mrs	ip, PRIMASK
    __asm volatile ("cpsid i");
10000a76:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
10000a78:	4d10      	ldr	r5, [pc, #64]	; (10000abc <hw_claim_or_assert+0x54>)
10000a7a:	682b      	ldr	r3, [r5, #0]
10000a7c:	2b00      	cmp	r3, #0
10000a7e:	d0fc      	beq.n	10000a7a <hw_claim_or_assert+0x12>
    __asm volatile ("dmb");
10000a80:	f3bf 8f5f 	dmb	sy
    uint32_t save = hw_claim_lock();
    if (bits[bit_index >> 3u] & (1u << (bit_index & 7u))) {
10000a84:	08cb      	lsrs	r3, r1, #3
10000a86:	5cc4      	ldrb	r4, [r0, r3]
10000a88:	18c7      	adds	r7, r0, r3
10000a8a:	2007      	movs	r0, #7
10000a8c:	0026      	movs	r6, r4
10000a8e:	2301      	movs	r3, #1
10000a90:	4008      	ands	r0, r1
10000a92:	40c6      	lsrs	r6, r0
10000a94:	001a      	movs	r2, r3
10000a96:	4032      	ands	r2, r6
10000a98:	4233      	tst	r3, r6
10000a9a:	d10b      	bne.n	10000ab4 <hw_claim_or_assert+0x4c>
        panic(message, bit_index);
    } else {
        bits[bit_index >> 3u] |= (1u << (bit_index & 7u));
10000a9c:	4083      	lsls	r3, r0
10000a9e:	4323      	orrs	r3, r4
10000aa0:	703b      	strb	r3, [r7, #0]
10000aa2:	f3bf 8f5f 	dmb	sy
    *lock = 0;
10000aa6:	602a      	str	r2, [r5, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10000aa8:	f38c 8810 	msr	PRIMASK, ip
    }
    hw_claim_unlock(save);
}
10000aac:	bcc0      	pop	{r6, r7}
10000aae:	46b9      	mov	r9, r7
10000ab0:	46b0      	mov	r8, r6
10000ab2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        panic(message, bit_index);
10000ab4:	4648      	mov	r0, r9
10000ab6:	f001 f95b 	bl	10001d70 <panic>
10000aba:	46c0      	nop			; (mov r8, r8)
10000abc:	d000012c 	.word	0xd000012c

10000ac0 <hw_claim_unused_from_range>:

int hw_claim_unused_from_range(uint8_t *bits, bool required, uint bit_lsb, uint bit_msb, const char *message) {
10000ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10000ac2:	4647      	mov	r7, r8
10000ac4:	46ce      	mov	lr, r9
10000ac6:	4688      	mov	r8, r1
10000ac8:	b580      	push	{r7, lr}
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
10000aca:	f3ef 8c10 	mrs	ip, PRIMASK
    __asm volatile ("cpsid i");
10000ace:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
10000ad0:	4d21      	ldr	r5, [pc, #132]	; (10000b58 <hw_claim_unused_from_range+0x98>)
10000ad2:	682c      	ldr	r4, [r5, #0]
10000ad4:	2c00      	cmp	r4, #0
10000ad6:	d0fc      	beq.n	10000ad2 <hw_claim_unused_from_range+0x12>
    __asm volatile ("dmb");
10000ad8:	f3bf 8f5f 	dmb	sy
    // don't bother check lsb / msb order as if wrong, then it'll fail anyway
    uint32_t save = hw_claim_lock();
    int found_bit = -1;
    for(uint bit=bit_lsb; bit <= bit_msb; bit++) {
10000adc:	429a      	cmp	r2, r3
10000ade:	d82d      	bhi.n	10000b3c <hw_claim_unused_from_range+0x7c>
        if (!(bits[bit >> 3u] & (1u << (bit & 7u)))) {
10000ae0:	08d4      	lsrs	r4, r2, #3
10000ae2:	5d05      	ldrb	r5, [r0, r4]
10000ae4:	1907      	adds	r7, r0, r4
10000ae6:	2407      	movs	r4, #7
10000ae8:	002e      	movs	r6, r5
10000aea:	4014      	ands	r4, r2
10000aec:	40e6      	lsrs	r6, r4
10000aee:	07f1      	lsls	r1, r6, #31
10000af0:	d51e      	bpl.n	10000b30 <hw_claim_unused_from_range+0x70>
10000af2:	2107      	movs	r1, #7
10000af4:	4689      	mov	r9, r1
10000af6:	3906      	subs	r1, #6
10000af8:	e008      	b.n	10000b0c <hw_claim_unused_from_range+0x4c>
10000afa:	08d4      	lsrs	r4, r2, #3
10000afc:	5d05      	ldrb	r5, [r0, r4]
10000afe:	1907      	adds	r7, r0, r4
10000b00:	464c      	mov	r4, r9
10000b02:	002e      	movs	r6, r5
10000b04:	4014      	ands	r4, r2
10000b06:	40e6      	lsrs	r6, r4
10000b08:	4231      	tst	r1, r6
10000b0a:	d011      	beq.n	10000b30 <hw_claim_unused_from_range+0x70>
    for(uint bit=bit_lsb; bit <= bit_msb; bit++) {
10000b0c:	3201      	adds	r2, #1
10000b0e:	4293      	cmp	r3, r2
10000b10:	d2f3      	bcs.n	10000afa <hw_claim_unused_from_range+0x3a>
    int found_bit = -1;
10000b12:	2001      	movs	r0, #1
10000b14:	4240      	negs	r0, r0
10000b16:	f3bf 8f5f 	dmb	sy
    *lock = 0;
10000b1a:	2200      	movs	r2, #0
10000b1c:	4b0e      	ldr	r3, [pc, #56]	; (10000b58 <hw_claim_unused_from_range+0x98>)
10000b1e:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10000b20:	f38c 8810 	msr	PRIMASK, ip
            found_bit = bit;
            break;
        }
    }
    hw_claim_unlock(save);
    if (found_bit < 0 && required) {
10000b24:	2800      	cmp	r0, #0
10000b26:	db11      	blt.n	10000b4c <hw_claim_unused_from_range+0x8c>
        panic(message);
    }
    return found_bit;
}
10000b28:	bcc0      	pop	{r6, r7}
10000b2a:	46b9      	mov	r9, r7
10000b2c:	46b0      	mov	r8, r6
10000b2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            bits[bit >> 3u] |= (1u << (bit & 7u));
10000b30:	2301      	movs	r3, #1
10000b32:	40a3      	lsls	r3, r4
10000b34:	431d      	orrs	r5, r3
            found_bit = bit;
10000b36:	0010      	movs	r0, r2
            bits[bit >> 3u] |= (1u << (bit & 7u));
10000b38:	703d      	strb	r5, [r7, #0]
            break;
10000b3a:	e7ec      	b.n	10000b16 <hw_claim_unused_from_range+0x56>
    __asm volatile ("dmb");
10000b3c:	f3bf 8f5f 	dmb	sy
    *lock = 0;
10000b40:	2300      	movs	r3, #0
10000b42:	602b      	str	r3, [r5, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10000b44:	f38c 8810 	msr	PRIMASK, ip
    int found_bit = -1;
10000b48:	2001      	movs	r0, #1
10000b4a:	4240      	negs	r0, r0
    if (found_bit < 0 && required) {
10000b4c:	4643      	mov	r3, r8
10000b4e:	2b00      	cmp	r3, #0
10000b50:	d0ea      	beq.n	10000b28 <hw_claim_unused_from_range+0x68>
        panic(message);
10000b52:	9808      	ldr	r0, [sp, #32]
10000b54:	f001 f90c 	bl	10001d70 <panic>
10000b58:	d000012c 	.word	0xd000012c

10000b5c <clock_configure>:
    hw_clear_bits(&clock->ctrl, CLOCKS_CLK_USB_CTRL_ENABLE_BITS);
    configured_freq[clk_index] = 0;
}

/// \tag::clock_configure[]
bool clock_configure(enum clock_index clk_index, uint32_t src, uint32_t auxsrc, uint32_t src_freq, uint32_t freq) {
10000b5c:	b5f0      	push	{r4, r5, r6, r7, lr}
10000b5e:	464f      	mov	r7, r9
10000b60:	4646      	mov	r6, r8
10000b62:	46d6      	mov	lr, sl
10000b64:	b5c0      	push	{r6, r7, lr}
10000b66:	0017      	movs	r7, r2
    uint32_t div;

    assert(src_freq >= freq);

    if (freq > src_freq)
10000b68:	9a08      	ldr	r2, [sp, #32]
bool clock_configure(enum clock_index clk_index, uint32_t src, uint32_t auxsrc, uint32_t src_freq, uint32_t freq) {
10000b6a:	0005      	movs	r5, r0
10000b6c:	4688      	mov	r8, r1
    if (freq > src_freq)
10000b6e:	429a      	cmp	r2, r3
10000b70:	d865      	bhi.n	10000c3e <clock_configure+0xe2>
        return false;

    // Div register is 24.8 int.frac divider so multiply by 2^8 (left shift by 8)
    div = (uint32_t) (((uint64_t) src_freq << 8) / freq);
10000b72:	0e19      	lsrs	r1, r3, #24
10000b74:	0218      	lsls	r0, r3, #8
10000b76:	2300      	movs	r3, #0
10000b78:	f7ff fc42 	bl	10000400 <__wrap___aeabi_uldivmod>

    clock_hw_t *clock = &clocks_hw->clk[clk_index];
10000b7c:	4b31      	ldr	r3, [pc, #196]	; (10000c44 <clock_configure+0xe8>)
10000b7e:	006c      	lsls	r4, r5, #1
10000b80:	469c      	mov	ip, r3
10000b82:	1964      	adds	r4, r4, r5
10000b84:	00a4      	lsls	r4, r4, #2
10000b86:	4464      	add	r4, ip

    // If increasing divisor, set divisor before source. Otherwise set source
    // before divisor. This avoids a momentary overspeed when e.g. switching
    // to a faster source and increasing divisor to compensate.
    if (div > clock->div)
10000b88:	6863      	ldr	r3, [r4, #4]
    div = (uint32_t) (((uint64_t) src_freq << 8) / freq);
10000b8a:	4681      	mov	r9, r0
    if (div > clock->div)
10000b8c:	4298      	cmp	r0, r3
10000b8e:	d900      	bls.n	10000b92 <clock_configure+0x36>
        clock->div = div;
10000b90:	6060      	str	r0, [r4, #4]
    return clk_index == clk_sys || clk_index == clk_ref;
10000b92:	1f2b      	subs	r3, r5, #4
10000b94:	b2db      	uxtb	r3, r3
10000b96:	469a      	mov	sl, r3

    // If switching a glitchless slice (ref or sys) to an aux source, switch
    // away from aux *first* to avoid passing glitches when changing aux mux.
    // Assume (!!!) glitchless source 0 is no faster than the aux source.
    if (has_glitchless_mux(clk_index) && src == CLOCKS_CLK_SYS_CTRL_SRC_VALUE_CLKSRC_CLK_SYS_AUX) {
10000b98:	2b01      	cmp	r3, #1
10000b9a:	d92c      	bls.n	10000bf6 <clock_configure+0x9a>
 *
 * \param addr Address of writable register
 * \param mask Bit-mask specifying bits to clear
 */
inline static void hw_clear_bits(io_rw_32 *addr, uint32_t mask) {
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10000b9c:	23c0      	movs	r3, #192	; 0xc0
10000b9e:	2280      	movs	r2, #128	; 0x80
    // If no glitchless mux, cleanly stop the clock to avoid glitches
    // propagating when changing aux mux. Note it would be a really bad idea
    // to do this on one of the glitchless clocks (clk_sys, clk_ref).
    else {
        hw_clear_bits(&clock->ctrl, CLOCKS_CLK_GPOUT0_CTRL_ENABLE_BITS);
        if (configured_freq[clk_index] > 0) {
10000ba0:	4e29      	ldr	r6, [pc, #164]	; (10000c48 <clock_configure+0xec>)
10000ba2:	00ad      	lsls	r5, r5, #2
10000ba4:	019b      	lsls	r3, r3, #6
10000ba6:	5971      	ldr	r1, [r6, r5]
10000ba8:	4323      	orrs	r3, r4
10000baa:	0112      	lsls	r2, r2, #4
10000bac:	601a      	str	r2, [r3, #0]
10000bae:	2900      	cmp	r1, #0
10000bb0:	d005      	beq.n	10000bbe <clock_configure+0x62>
            // Delay for 3 cycles of the target clock, for ENABLE propagation.
            // Note XOSC_COUNT is not helpful here because XOSC is not
            // necessarily running, nor is timer... so, 3 cycles per loop:
            uint delay_cyc = configured_freq[clk_sys] / configured_freq[clk_index] + 1;
10000bb2:	6970      	ldr	r0, [r6, #20]
10000bb4:	f7ff fbde 	bl	10000374 <__wrap___aeabi_uidiv>
10000bb8:	3001      	adds	r0, #1
            asm volatile (
10000bba:	3801      	subs	r0, #1
10000bbc:	d1fd      	bne.n	10000bba <clock_configure+0x5e>
 * \param addr Address of writable register
 * \param values Bits values
 * \param write_mask Mask of bits to change
 */
inline static void hw_write_masked(io_rw_32 *addr, uint32_t values, uint32_t write_mask) {
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10000bbe:	6822      	ldr	r2, [r4, #0]
            );
        }
    }

    // Set aux mux first, and then glitchless mux if this clock has one
    hw_write_masked(&clock->ctrl,
10000bc0:	017f      	lsls	r7, r7, #5
10000bc2:	407a      	eors	r2, r7
10000bc4:	27e0      	movs	r7, #224	; 0xe0
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10000bc6:	2380      	movs	r3, #128	; 0x80
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10000bc8:	4017      	ands	r7, r2
        (auxsrc << CLOCKS_CLK_SYS_CTRL_AUXSRC_LSB),
        CLOCKS_CLK_SYS_CTRL_AUXSRC_BITS
    );

    if (has_glitchless_mux(clk_index)) {
10000bca:	4652      	mov	r2, sl
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10000bcc:	015b      	lsls	r3, r3, #5
10000bce:	4323      	orrs	r3, r4
10000bd0:	601f      	str	r7, [r3, #0]
10000bd2:	2a01      	cmp	r2, #1
10000bd4:	d926      	bls.n	10000c24 <clock_configure+0xc8>
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10000bd6:	2380      	movs	r3, #128	; 0x80
10000bd8:	2280      	movs	r2, #128	; 0x80
10000bda:	019b      	lsls	r3, r3, #6
10000bdc:	4323      	orrs	r3, r4
10000bde:	0112      	lsls	r2, r2, #4
10000be0:	601a      	str	r2, [r3, #0]

    hw_set_bits(&clock->ctrl, CLOCKS_CLK_GPOUT0_CTRL_ENABLE_BITS);

    // Now that the source is configured, we can trust that the user-supplied
    // divisor is a safe value.
    clock->div = div;
10000be2:	464b      	mov	r3, r9

    // Store the configured frequency
    configured_freq[clk_index] = freq;
10000be4:	2001      	movs	r0, #1
    clock->div = div;
10000be6:	6063      	str	r3, [r4, #4]
    configured_freq[clk_index] = freq;
10000be8:	9b08      	ldr	r3, [sp, #32]
10000bea:	5173      	str	r3, [r6, r5]

    return true;
}
10000bec:	bce0      	pop	{r5, r6, r7}
10000bee:	46ba      	mov	sl, r7
10000bf0:	46b1      	mov	r9, r6
10000bf2:	46a8      	mov	r8, r5
10000bf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (has_glitchless_mux(clk_index) && src == CLOCKS_CLK_SYS_CTRL_SRC_VALUE_CLKSRC_CLK_SYS_AUX) {
10000bf6:	4643      	mov	r3, r8
10000bf8:	2b01      	cmp	r3, #1
10000bfa:	d1cf      	bne.n	10000b9c <clock_configure+0x40>
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10000bfc:	23c0      	movs	r3, #192	; 0xc0
10000bfe:	2203      	movs	r2, #3
10000c00:	019b      	lsls	r3, r3, #6
10000c02:	4323      	orrs	r3, r4
10000c04:	601a      	str	r2, [r3, #0]
        while (!(clock->selected & 1u))
10000c06:	3a02      	subs	r2, #2
10000c08:	68a3      	ldr	r3, [r4, #8]
10000c0a:	421a      	tst	r2, r3
10000c0c:	d0fc      	beq.n	10000c08 <clock_configure+0xac>
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10000c0e:	23e0      	movs	r3, #224	; 0xe0
10000c10:	6822      	ldr	r2, [r4, #0]
    hw_write_masked(&clock->ctrl,
10000c12:	017f      	lsls	r7, r7, #5
10000c14:	4057      	eors	r7, r2
10000c16:	401f      	ands	r7, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10000c18:	2380      	movs	r3, #128	; 0x80
10000c1a:	015b      	lsls	r3, r3, #5
10000c1c:	4323      	orrs	r3, r4
10000c1e:	4e0a      	ldr	r6, [pc, #40]	; (10000c48 <clock_configure+0xec>)
10000c20:	601f      	str	r7, [r3, #0]
    return clk_index == clk_sys || clk_index == clk_ref;
10000c22:	00ad      	lsls	r5, r5, #2
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10000c24:	4642      	mov	r2, r8
10000c26:	6821      	ldr	r1, [r4, #0]
10000c28:	4051      	eors	r1, r2
10000c2a:	2203      	movs	r2, #3
10000c2c:	400a      	ands	r2, r1
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10000c2e:	601a      	str	r2, [r3, #0]
        while (!(clock->selected & (1u << src)))
10000c30:	2201      	movs	r2, #1
10000c32:	4643      	mov	r3, r8
10000c34:	409a      	lsls	r2, r3
10000c36:	68a3      	ldr	r3, [r4, #8]
10000c38:	421a      	tst	r2, r3
10000c3a:	d0fc      	beq.n	10000c36 <clock_configure+0xda>
10000c3c:	e7cb      	b.n	10000bd6 <clock_configure+0x7a>
        return false;
10000c3e:	2000      	movs	r0, #0
10000c40:	e7d4      	b.n	10000bec <clock_configure+0x90>
10000c42:	46c0      	nop			; (mov r8, r8)
10000c44:	40008000 	.word	0x40008000
10000c48:	20012044 	.word	0x20012044

10000c4c <clocks_init>:
/// \end::clock_configure[]

void clocks_init(void) {
10000c4c:	b530      	push	{r4, r5, lr}
    // Start tick in watchdog
    watchdog_start_tick(XOSC_MHZ);
10000c4e:	200c      	movs	r0, #12
void clocks_init(void) {
10000c50:	b083      	sub	sp, #12
    watchdog_start_tick(XOSC_MHZ);
10000c52:	f002 f90f 	bl	10002e74 <watchdog_start_tick>

    // Everything is 48MHz on FPGA apart from RTC. Otherwise set to 0 and will be set in clock configure
    if (running_on_fpga()) {
10000c56:	f000 ffa3 	bl	10001ba0 <running_on_fpga>
10000c5a:	2800      	cmp	r0, #0
10000c5c:	d00e      	beq.n	10000c7c <clocks_init+0x30>
        for (uint i = 0; i < CLK_COUNT; i++) {
            configured_freq[i] = 48 * MHZ;
10000c5e:	4b9a      	ldr	r3, [pc, #616]	; (10000ec8 <clocks_init+0x27c>)
10000c60:	4a9a      	ldr	r2, [pc, #616]	; (10000ecc <clocks_init+0x280>)
10000c62:	601a      	str	r2, [r3, #0]
10000c64:	605a      	str	r2, [r3, #4]
10000c66:	609a      	str	r2, [r3, #8]
10000c68:	60da      	str	r2, [r3, #12]
10000c6a:	611a      	str	r2, [r3, #16]
10000c6c:	615a      	str	r2, [r3, #20]
10000c6e:	619a      	str	r2, [r3, #24]
10000c70:	61da      	str	r2, [r3, #28]
10000c72:	621a      	str	r2, [r3, #32]
        }
        configured_freq[clk_rtc] = 46875;
10000c74:	4a96      	ldr	r2, [pc, #600]	; (10000ed0 <clocks_init+0x284>)
10000c76:	625a      	str	r2, [r3, #36]	; 0x24
    clock_configure(clk_peri,
                    0,
                    CLOCKS_CLK_PERI_CTRL_AUXSRC_VALUE_CLK_SYS,
                    125 * MHZ,
                    125 * MHZ);
}
10000c78:	b003      	add	sp, #12
10000c7a:	bd30      	pop	{r4, r5, pc}
    clocks_hw->resus.ctrl = 0;
10000c7c:	4c95      	ldr	r4, [pc, #596]	; (10000ed4 <clocks_init+0x288>)
10000c7e:	67a0      	str	r0, [r4, #120]	; 0x78
    xosc_init();
10000c80:	f002 f900 	bl	10002e84 <xosc_init>
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10000c84:	2201      	movs	r2, #1
10000c86:	4b94      	ldr	r3, [pc, #592]	; (10000ed8 <clocks_init+0x28c>)
10000c88:	601a      	str	r2, [r3, #0]
    while (clocks_hw->clk[clk_sys].selected != 0x1)
10000c8a:	6c63      	ldr	r3, [r4, #68]	; 0x44
10000c8c:	2b01      	cmp	r3, #1
10000c8e:	d1fc      	bne.n	10000c8a <clocks_init+0x3e>
10000c90:	2203      	movs	r2, #3
10000c92:	4b92      	ldr	r3, [pc, #584]	; (10000edc <clocks_init+0x290>)
10000c94:	601a      	str	r2, [r3, #0]
    while (clocks_hw->clk[clk_ref].selected != 0x1)
10000c96:	4a8f      	ldr	r2, [pc, #572]	; (10000ed4 <clocks_init+0x288>)
10000c98:	6b93      	ldr	r3, [r2, #56]	; 0x38
10000c9a:	2b01      	cmp	r3, #1
10000c9c:	d1fc      	bne.n	10000c98 <clocks_init+0x4c>
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10000c9e:	22c0      	movs	r2, #192	; 0xc0
10000ca0:	4b8f      	ldr	r3, [pc, #572]	; (10000ee0 <clocks_init+0x294>)
10000ca2:	0192      	lsls	r2, r2, #6
10000ca4:	601a      	str	r2, [r3, #0]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10000ca6:	4b8f      	ldr	r3, [pc, #572]	; (10000ee4 <clocks_init+0x298>)
 *
 * \param bits Bit pattern indicating blocks to unreset. See \ref reset_bitmask
 */
static inline void unreset_block_wait(uint32_t bits) {
    hw_clear_bits(&resets_hw->reset, bits);
    while (~resets_hw->reset_done & bits)
10000ca8:	498f      	ldr	r1, [pc, #572]	; (10000ee8 <clocks_init+0x29c>)
10000caa:	601a      	str	r2, [r3, #0]
10000cac:	0010      	movs	r0, r2
10000cae:	688b      	ldr	r3, [r1, #8]
10000cb0:	4398      	bics	r0, r3
10000cb2:	1e03      	subs	r3, r0, #0
10000cb4:	d1fa      	bne.n	10000cac <clocks_init+0x60>
    pll_init(pll_sys, 1, 1500 * MHZ, 6, 2);
10000cb6:	2402      	movs	r4, #2
10000cb8:	2101      	movs	r1, #1
10000cba:	4a8c      	ldr	r2, [pc, #560]	; (10000eec <clocks_init+0x2a0>)
10000cbc:	488c      	ldr	r0, [pc, #560]	; (10000ef0 <clocks_init+0x2a4>)
10000cbe:	3306      	adds	r3, #6
10000cc0:	9400      	str	r4, [sp, #0]
10000cc2:	f000 ff75 	bl	10001bb0 <pll_init>
    pll_init(pll_usb, 1, 480 * MHZ, 5, 2);
10000cc6:	2305      	movs	r3, #5
10000cc8:	4a8a      	ldr	r2, [pc, #552]	; (10000ef4 <clocks_init+0x2a8>)
10000cca:	2101      	movs	r1, #1
10000ccc:	488a      	ldr	r0, [pc, #552]	; (10000ef8 <clocks_init+0x2ac>)
10000cce:	9400      	str	r4, [sp, #0]
10000cd0:	f000 ff6e 	bl	10001bb0 <pll_init>
    if (div > clock->div)
10000cd4:	4b89      	ldr	r3, [pc, #548]	; (10000efc <clocks_init+0x2b0>)
10000cd6:	685a      	ldr	r2, [r3, #4]
10000cd8:	2aff      	cmp	r2, #255	; 0xff
10000cda:	d802      	bhi.n	10000ce2 <clocks_init+0x96>
        clock->div = div;
10000cdc:	2280      	movs	r2, #128	; 0x80
10000cde:	0052      	lsls	r2, r2, #1
10000ce0:	605a      	str	r2, [r3, #4]
10000ce2:	2280      	movs	r2, #128	; 0x80
        if (configured_freq[clk_index] > 0) {
10000ce4:	4c78      	ldr	r4, [pc, #480]	; (10000ec8 <clocks_init+0x27c>)
10000ce6:	4b7d      	ldr	r3, [pc, #500]	; (10000edc <clocks_init+0x290>)
10000ce8:	6921      	ldr	r1, [r4, #16]
10000cea:	0112      	lsls	r2, r2, #4
10000cec:	4d83      	ldr	r5, [pc, #524]	; (10000efc <clocks_init+0x2b0>)
10000cee:	601a      	str	r2, [r3, #0]
10000cf0:	2900      	cmp	r1, #0
10000cf2:	d005      	beq.n	10000d00 <clocks_init+0xb4>
            uint delay_cyc = configured_freq[clk_sys] / configured_freq[clk_index] + 1;
10000cf4:	6960      	ldr	r0, [r4, #20]
10000cf6:	f7ff fb3d 	bl	10000374 <__wrap___aeabi_uidiv>
10000cfa:	3001      	adds	r0, #1
            asm volatile (
10000cfc:	3801      	subs	r0, #1
10000cfe:	d1fd      	bne.n	10000cfc <clocks_init+0xb0>
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10000d00:	21e0      	movs	r1, #224	; 0xe0
10000d02:	4b7e      	ldr	r3, [pc, #504]	; (10000efc <clocks_init+0x2b0>)
10000d04:	2002      	movs	r0, #2
10000d06:	681a      	ldr	r2, [r3, #0]
10000d08:	4011      	ands	r1, r2
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10000d0a:	2280      	movs	r2, #128	; 0x80
10000d0c:	0152      	lsls	r2, r2, #5
10000d0e:	432a      	orrs	r2, r5
10000d10:	6011      	str	r1, [r2, #0]
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10000d12:	6819      	ldr	r1, [r3, #0]
10000d14:	4048      	eors	r0, r1
10000d16:	2103      	movs	r1, #3
10000d18:	4001      	ands	r1, r0
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10000d1a:	6011      	str	r1, [r2, #0]
        while (!(clock->selected & (1u << src)))
10000d1c:	2104      	movs	r1, #4
10000d1e:	689a      	ldr	r2, [r3, #8]
10000d20:	4211      	tst	r1, r2
10000d22:	d0fc      	beq.n	10000d1e <clocks_init+0xd2>
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10000d24:	2280      	movs	r2, #128	; 0x80
10000d26:	2180      	movs	r1, #128	; 0x80
10000d28:	0192      	lsls	r2, r2, #6
10000d2a:	432a      	orrs	r2, r5
10000d2c:	0109      	lsls	r1, r1, #4
10000d2e:	6011      	str	r1, [r2, #0]
    clock->div = div;
10000d30:	2280      	movs	r2, #128	; 0x80
10000d32:	0052      	lsls	r2, r2, #1
10000d34:	605a      	str	r2, [r3, #4]
    configured_freq[clk_index] = freq;
10000d36:	4b72      	ldr	r3, [pc, #456]	; (10000f00 <clocks_init+0x2b4>)
10000d38:	6123      	str	r3, [r4, #16]
    if (div > clock->div)
10000d3a:	4b72      	ldr	r3, [pc, #456]	; (10000f04 <clocks_init+0x2b8>)
10000d3c:	6859      	ldr	r1, [r3, #4]
10000d3e:	29ff      	cmp	r1, #255	; 0xff
10000d40:	d800      	bhi.n	10000d44 <clocks_init+0xf8>
        clock->div = div;
10000d42:	605a      	str	r2, [r3, #4]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10000d44:	2103      	movs	r1, #3
10000d46:	4a64      	ldr	r2, [pc, #400]	; (10000ed8 <clocks_init+0x28c>)
10000d48:	4b6e      	ldr	r3, [pc, #440]	; (10000f04 <clocks_init+0x2b8>)
10000d4a:	6011      	str	r1, [r2, #0]
        while (!(clock->selected & 1u))
10000d4c:	3902      	subs	r1, #2
10000d4e:	689a      	ldr	r2, [r3, #8]
10000d50:	4211      	tst	r1, r2
10000d52:	d0fc      	beq.n	10000d4e <clocks_init+0x102>
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10000d54:	20e0      	movs	r0, #224	; 0xe0
10000d56:	681a      	ldr	r2, [r3, #0]
10000d58:	4010      	ands	r0, r2
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10000d5a:	2280      	movs	r2, #128	; 0x80
10000d5c:	0152      	lsls	r2, r2, #5
10000d5e:	431a      	orrs	r2, r3
10000d60:	6010      	str	r0, [r2, #0]
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10000d62:	6818      	ldr	r0, [r3, #0]
10000d64:	4048      	eors	r0, r1
10000d66:	2103      	movs	r1, #3
10000d68:	4001      	ands	r1, r0
        while (!(clock->selected & (1u << src)))
10000d6a:	2002      	movs	r0, #2
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10000d6c:	6011      	str	r1, [r2, #0]
10000d6e:	4965      	ldr	r1, [pc, #404]	; (10000f04 <clocks_init+0x2b8>)
10000d70:	688a      	ldr	r2, [r1, #8]
10000d72:	4210      	tst	r0, r2
10000d74:	d0fc      	beq.n	10000d70 <clocks_init+0x124>
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10000d76:	2280      	movs	r2, #128	; 0x80
10000d78:	0192      	lsls	r2, r2, #6
10000d7a:	4313      	orrs	r3, r2
10000d7c:	2280      	movs	r2, #128	; 0x80
10000d7e:	0112      	lsls	r2, r2, #4
10000d80:	601a      	str	r2, [r3, #0]
    clock->div = div;
10000d82:	2280      	movs	r2, #128	; 0x80
    configured_freq[clk_index] = freq;
10000d84:	4b60      	ldr	r3, [pc, #384]	; (10000f08 <clocks_init+0x2bc>)
    clock->div = div;
10000d86:	0052      	lsls	r2, r2, #1
10000d88:	604a      	str	r2, [r1, #4]
    configured_freq[clk_index] = freq;
10000d8a:	6163      	str	r3, [r4, #20]
    if (div > clock->div)
10000d8c:	4b5f      	ldr	r3, [pc, #380]	; (10000f0c <clocks_init+0x2c0>)
10000d8e:	6859      	ldr	r1, [r3, #4]
10000d90:	29ff      	cmp	r1, #255	; 0xff
10000d92:	d800      	bhi.n	10000d96 <clocks_init+0x14a>
        clock->div = div;
10000d94:	605a      	str	r2, [r3, #4]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10000d96:	2280      	movs	r2, #128	; 0x80
10000d98:	4b5d      	ldr	r3, [pc, #372]	; (10000f10 <clocks_init+0x2c4>)
        if (configured_freq[clk_index] > 0) {
10000d9a:	69e1      	ldr	r1, [r4, #28]
10000d9c:	0112      	lsls	r2, r2, #4
10000d9e:	4d5b      	ldr	r5, [pc, #364]	; (10000f0c <clocks_init+0x2c0>)
10000da0:	601a      	str	r2, [r3, #0]
10000da2:	2900      	cmp	r1, #0
10000da4:	d005      	beq.n	10000db2 <clocks_init+0x166>
            uint delay_cyc = configured_freq[clk_sys] / configured_freq[clk_index] + 1;
10000da6:	6960      	ldr	r0, [r4, #20]
10000da8:	f7ff fae4 	bl	10000374 <__wrap___aeabi_uidiv>
10000dac:	3001      	adds	r0, #1
            asm volatile (
10000dae:	3801      	subs	r0, #1
10000db0:	d1fd      	bne.n	10000dae <clocks_init+0x162>
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10000db2:	22e0      	movs	r2, #224	; 0xe0
10000db4:	4955      	ldr	r1, [pc, #340]	; (10000f0c <clocks_init+0x2c0>)
10000db6:	680b      	ldr	r3, [r1, #0]
10000db8:	401a      	ands	r2, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10000dba:	2380      	movs	r3, #128	; 0x80
10000dbc:	015b      	lsls	r3, r3, #5
10000dbe:	432b      	orrs	r3, r5
10000dc0:	601a      	str	r2, [r3, #0]
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10000dc2:	2380      	movs	r3, #128	; 0x80
10000dc4:	2280      	movs	r2, #128	; 0x80
10000dc6:	019b      	lsls	r3, r3, #6
10000dc8:	432b      	orrs	r3, r5
10000dca:	0112      	lsls	r2, r2, #4
10000dcc:	601a      	str	r2, [r3, #0]
    clock->div = div;
10000dce:	2280      	movs	r2, #128	; 0x80
    configured_freq[clk_index] = freq;
10000dd0:	4b3e      	ldr	r3, [pc, #248]	; (10000ecc <clocks_init+0x280>)
    clock->div = div;
10000dd2:	0052      	lsls	r2, r2, #1
10000dd4:	604a      	str	r2, [r1, #4]
    configured_freq[clk_index] = freq;
10000dd6:	61e3      	str	r3, [r4, #28]
    if (div > clock->div)
10000dd8:	4b4e      	ldr	r3, [pc, #312]	; (10000f14 <clocks_init+0x2c8>)
10000dda:	6859      	ldr	r1, [r3, #4]
10000ddc:	29ff      	cmp	r1, #255	; 0xff
10000dde:	d800      	bhi.n	10000de2 <clocks_init+0x196>
        clock->div = div;
10000de0:	605a      	str	r2, [r3, #4]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10000de2:	2280      	movs	r2, #128	; 0x80
10000de4:	4b4c      	ldr	r3, [pc, #304]	; (10000f18 <clocks_init+0x2cc>)
        if (configured_freq[clk_index] > 0) {
10000de6:	6a21      	ldr	r1, [r4, #32]
10000de8:	0112      	lsls	r2, r2, #4
10000dea:	4d4a      	ldr	r5, [pc, #296]	; (10000f14 <clocks_init+0x2c8>)
10000dec:	601a      	str	r2, [r3, #0]
10000dee:	2900      	cmp	r1, #0
10000df0:	d005      	beq.n	10000dfe <clocks_init+0x1b2>
            uint delay_cyc = configured_freq[clk_sys] / configured_freq[clk_index] + 1;
10000df2:	6960      	ldr	r0, [r4, #20]
10000df4:	f7ff fabe 	bl	10000374 <__wrap___aeabi_uidiv>
10000df8:	3001      	adds	r0, #1
            asm volatile (
10000dfa:	3801      	subs	r0, #1
10000dfc:	d1fd      	bne.n	10000dfa <clocks_init+0x1ae>
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10000dfe:	22e0      	movs	r2, #224	; 0xe0
10000e00:	4944      	ldr	r1, [pc, #272]	; (10000f14 <clocks_init+0x2c8>)
10000e02:	680b      	ldr	r3, [r1, #0]
10000e04:	401a      	ands	r2, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10000e06:	2380      	movs	r3, #128	; 0x80
10000e08:	015b      	lsls	r3, r3, #5
10000e0a:	432b      	orrs	r3, r5
10000e0c:	601a      	str	r2, [r3, #0]
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10000e0e:	2380      	movs	r3, #128	; 0x80
10000e10:	2280      	movs	r2, #128	; 0x80
10000e12:	019b      	lsls	r3, r3, #6
10000e14:	432b      	orrs	r3, r5
10000e16:	0112      	lsls	r2, r2, #4
10000e18:	601a      	str	r2, [r3, #0]
    clock->div = div;
10000e1a:	2380      	movs	r3, #128	; 0x80
    if (div > clock->div)
10000e1c:	2280      	movs	r2, #128	; 0x80
    clock->div = div;
10000e1e:	005b      	lsls	r3, r3, #1
10000e20:	604b      	str	r3, [r1, #4]
    configured_freq[clk_index] = freq;
10000e22:	4b2a      	ldr	r3, [pc, #168]	; (10000ecc <clocks_init+0x280>)
    if (div > clock->div)
10000e24:	02d2      	lsls	r2, r2, #11
    configured_freq[clk_index] = freq;
10000e26:	6223      	str	r3, [r4, #32]
    if (div > clock->div)
10000e28:	4b3c      	ldr	r3, [pc, #240]	; (10000f1c <clocks_init+0x2d0>)
10000e2a:	6859      	ldr	r1, [r3, #4]
10000e2c:	4291      	cmp	r1, r2
10000e2e:	d200      	bcs.n	10000e32 <clocks_init+0x1e6>
        clock->div = div;
10000e30:	605a      	str	r2, [r3, #4]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10000e32:	2280      	movs	r2, #128	; 0x80
10000e34:	4b3a      	ldr	r3, [pc, #232]	; (10000f20 <clocks_init+0x2d4>)
        if (configured_freq[clk_index] > 0) {
10000e36:	6a61      	ldr	r1, [r4, #36]	; 0x24
10000e38:	0112      	lsls	r2, r2, #4
10000e3a:	4d38      	ldr	r5, [pc, #224]	; (10000f1c <clocks_init+0x2d0>)
10000e3c:	601a      	str	r2, [r3, #0]
10000e3e:	2900      	cmp	r1, #0
10000e40:	d005      	beq.n	10000e4e <clocks_init+0x202>
            uint delay_cyc = configured_freq[clk_sys] / configured_freq[clk_index] + 1;
10000e42:	6960      	ldr	r0, [r4, #20]
10000e44:	f7ff fa96 	bl	10000374 <__wrap___aeabi_uidiv>
10000e48:	3001      	adds	r0, #1
            asm volatile (
10000e4a:	3801      	subs	r0, #1
10000e4c:	d1fd      	bne.n	10000e4a <clocks_init+0x1fe>
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10000e4e:	22e0      	movs	r2, #224	; 0xe0
10000e50:	4932      	ldr	r1, [pc, #200]	; (10000f1c <clocks_init+0x2d0>)
10000e52:	680b      	ldr	r3, [r1, #0]
10000e54:	401a      	ands	r2, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10000e56:	2380      	movs	r3, #128	; 0x80
10000e58:	015b      	lsls	r3, r3, #5
10000e5a:	432b      	orrs	r3, r5
10000e5c:	601a      	str	r2, [r3, #0]
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10000e5e:	2380      	movs	r3, #128	; 0x80
10000e60:	2280      	movs	r2, #128	; 0x80
10000e62:	019b      	lsls	r3, r3, #6
10000e64:	432b      	orrs	r3, r5
10000e66:	0112      	lsls	r2, r2, #4
10000e68:	601a      	str	r2, [r3, #0]
    clock->div = div;
10000e6a:	2380      	movs	r3, #128	; 0x80
10000e6c:	02db      	lsls	r3, r3, #11
10000e6e:	604b      	str	r3, [r1, #4]
    configured_freq[clk_index] = freq;
10000e70:	4b17      	ldr	r3, [pc, #92]	; (10000ed0 <clocks_init+0x284>)
10000e72:	6263      	str	r3, [r4, #36]	; 0x24
    if (div > clock->div)
10000e74:	4b2b      	ldr	r3, [pc, #172]	; (10000f24 <clocks_init+0x2d8>)
10000e76:	685a      	ldr	r2, [r3, #4]
10000e78:	2aff      	cmp	r2, #255	; 0xff
10000e7a:	d802      	bhi.n	10000e82 <clocks_init+0x236>
        clock->div = div;
10000e7c:	2280      	movs	r2, #128	; 0x80
10000e7e:	0052      	lsls	r2, r2, #1
10000e80:	605a      	str	r2, [r3, #4]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10000e82:	2280      	movs	r2, #128	; 0x80
10000e84:	4b28      	ldr	r3, [pc, #160]	; (10000f28 <clocks_init+0x2dc>)
        if (configured_freq[clk_index] > 0) {
10000e86:	69a1      	ldr	r1, [r4, #24]
10000e88:	0112      	lsls	r2, r2, #4
10000e8a:	4d26      	ldr	r5, [pc, #152]	; (10000f24 <clocks_init+0x2d8>)
10000e8c:	601a      	str	r2, [r3, #0]
10000e8e:	2900      	cmp	r1, #0
10000e90:	d005      	beq.n	10000e9e <clocks_init+0x252>
            uint delay_cyc = configured_freq[clk_sys] / configured_freq[clk_index] + 1;
10000e92:	6960      	ldr	r0, [r4, #20]
10000e94:	f7ff fa6e 	bl	10000374 <__wrap___aeabi_uidiv>
10000e98:	3001      	adds	r0, #1
            asm volatile (
10000e9a:	3801      	subs	r0, #1
10000e9c:	d1fd      	bne.n	10000e9a <clocks_init+0x24e>
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10000e9e:	22e0      	movs	r2, #224	; 0xe0
10000ea0:	4920      	ldr	r1, [pc, #128]	; (10000f24 <clocks_init+0x2d8>)
10000ea2:	680b      	ldr	r3, [r1, #0]
10000ea4:	401a      	ands	r2, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10000ea6:	2380      	movs	r3, #128	; 0x80
10000ea8:	015b      	lsls	r3, r3, #5
10000eaa:	432b      	orrs	r3, r5
10000eac:	601a      	str	r2, [r3, #0]
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10000eae:	2380      	movs	r3, #128	; 0x80
10000eb0:	2280      	movs	r2, #128	; 0x80
10000eb2:	019b      	lsls	r3, r3, #6
10000eb4:	432b      	orrs	r3, r5
10000eb6:	0112      	lsls	r2, r2, #4
10000eb8:	601a      	str	r2, [r3, #0]
    clock->div = div;
10000eba:	2380      	movs	r3, #128	; 0x80
10000ebc:	005b      	lsls	r3, r3, #1
10000ebe:	604b      	str	r3, [r1, #4]
    configured_freq[clk_index] = freq;
10000ec0:	4b11      	ldr	r3, [pc, #68]	; (10000f08 <clocks_init+0x2bc>)
10000ec2:	61a3      	str	r3, [r4, #24]
    return true;
10000ec4:	e6d8      	b.n	10000c78 <clocks_init+0x2c>
10000ec6:	46c0      	nop			; (mov r8, r8)
10000ec8:	20012044 	.word	0x20012044
10000ecc:	02dc6c00 	.word	0x02dc6c00
10000ed0:	0000b71b 	.word	0x0000b71b
10000ed4:	40008000 	.word	0x40008000
10000ed8:	4000b03c 	.word	0x4000b03c
10000edc:	4000b030 	.word	0x4000b030
10000ee0:	4000e000 	.word	0x4000e000
10000ee4:	4000f000 	.word	0x4000f000
10000ee8:	4000c000 	.word	0x4000c000
10000eec:	59682f00 	.word	0x59682f00
10000ef0:	40028000 	.word	0x40028000
10000ef4:	1c9c3800 	.word	0x1c9c3800
10000ef8:	4002c000 	.word	0x4002c000
10000efc:	40008030 	.word	0x40008030
10000f00:	00b71b00 	.word	0x00b71b00
10000f04:	4000803c 	.word	0x4000803c
10000f08:	07735940 	.word	0x07735940
10000f0c:	40008054 	.word	0x40008054
10000f10:	4000b054 	.word	0x4000b054
10000f14:	40008060 	.word	0x40008060
10000f18:	4000b060 	.word	0x4000b060
10000f1c:	4000806c 	.word	0x4000806c
10000f20:	4000b06c 	.word	0x4000b06c
10000f24:	40008048 	.word	0x40008048
10000f28:	4000b048 	.word	0x4000b048

10000f2c <clock_get_hz>:

/// \tag::clock_get_hz[]
uint32_t clock_get_hz(enum clock_index clk_index) {
    return configured_freq[clk_index];
10000f2c:	4b01      	ldr	r3, [pc, #4]	; (10000f34 <clock_get_hz+0x8>)
10000f2e:	0080      	lsls	r0, r0, #2
10000f30:	58c0      	ldr	r0, [r0, r3]
}
10000f32:	4770      	bx	lr
10000f34:	20012044 	.word	0x20012044

10000f38 <critical_section_init>:

#if !PICO_NO_HARDWARE
static_assert(sizeof(critical_section_t) == 8, "");
#endif

void critical_section_init(critical_section_t *critsec) {
10000f38:	b510      	push	{r4, lr}
10000f3a:	0004      	movs	r4, r0
    critical_section_init_with_lock_num(critsec, spin_lock_claim_unused(true));
10000f3c:	2001      	movs	r0, #1
10000f3e:	f001 fa49 	bl	100023d4 <spin_lock_claim_unused>
10000f42:	0001      	movs	r1, r0
}

void critical_section_init_with_lock_num(critical_section_t *critsec, uint lock_num) {
    lock_init(&critsec->core, lock_num);
10000f44:	0020      	movs	r0, r4
10000f46:	f000 faaf 	bl	100014a8 <lock_init>
    __asm volatile ("dmb");
10000f4a:	f3bf 8f5f 	dmb	sy
}
10000f4e:	bd10      	pop	{r4, pc}

10000f50 <__aeabi_double_init>:

bool running_on_fpga();
uint8_t rp2040_chip_version();

static inline uint8_t rp2040_rom_version() {
    return *(uint8_t*)0x13;
10000f50:	2313      	movs	r3, #19
    panic("missing double function");
}
#endif
extern void double_table_shim_on_use_helper();

void __aeabi_double_init() {
10000f52:	b570      	push	{r4, r5, r6, lr}
    int rom_version = rp2040_rom_version();
10000f54:	781d      	ldrb	r5, [r3, #0]
#if PICO_DOUBLE_SUPPORT_ROM_V1
    if (rom_version == 1) {
10000f56:	2d01      	cmp	r5, #1
10000f58:	d010      	beq.n	10000f7c <__aeabi_double_init+0x2c>
        for(uint i=0;i<SF_TABLE_V2_SIZE/4;i++) {
            sd_table[i] = (uintptr_t)missing_double_func_shim;
        }
    }
#endif
    if (rom_version >= 2) {
10000f5a:	dd0b      	ble.n	10000f74 <__aeabi_double_init+0x24>
        void *rom_table = rom_data_lookup(rom_table_code('S', 'D'));
10000f5c:	4819      	ldr	r0, [pc, #100]	; (10000fc4 <__aeabi_double_init+0x74>)
10000f5e:	f7ff fd43 	bl	100009e8 <rom_data_lookup>
        assert(*((uint8_t *)(((void *)rom_data_lookup(rom_table_code('S', 'F')))-2)) * 4 >= SF_TABLE_V2_SIZE);
        memcpy(&sd_table, rom_table, SF_TABLE_V2_SIZE);
10000f62:	4c19      	ldr	r4, [pc, #100]	; (10000fc8 <__aeabi_double_init+0x78>)
        void *rom_table = rom_data_lookup(rom_table_code('S', 'D'));
10000f64:	0001      	movs	r1, r0
        memcpy(&sd_table, rom_table, SF_TABLE_V2_SIZE);
10000f66:	2280      	movs	r2, #128	; 0x80
10000f68:	0020      	movs	r0, r4
10000f6a:	f7ff fd15 	bl	10000998 <__wrap___aeabi_memcpy>
                panic(NULL);
            }
#endif
        }
    }
    if (rom_version < 3) {
10000f6e:	2d02      	cmp	r5, #2
10000f70:	d001      	beq.n	10000f76 <__aeabi_double_init+0x26>
        // we use the unused entry for SINCOS
        sd_table[SF_TABLE_V3_FSINCOS / 4] = (uintptr_t) double_table_shim_on_use_helper;
    }
}
10000f72:	bd70      	pop	{r4, r5, r6, pc}
10000f74:	4c14      	ldr	r4, [pc, #80]	; (10000fc8 <__aeabi_double_init+0x78>)
        sd_table[SF_TABLE_V3_FSINCOS / 4] = (uintptr_t) double_table_shim_on_use_helper;
10000f76:	4b15      	ldr	r3, [pc, #84]	; (10000fcc <__aeabi_double_init+0x7c>)
10000f78:	64a3      	str	r3, [r4, #72]	; 0x48
}
10000f7a:	e7fa      	b.n	10000f72 <__aeabi_double_init+0x22>
        sd_table[SF_TABLE_V3_FSINCOS / 4] = (uintptr_t) double_table_shim_on_use_helper;
10000f7c:	4b13      	ldr	r3, [pc, #76]	; (10000fcc <__aeabi_double_init+0x7c>)
            sd_table[i] = (uintptr_t)double_table_shim_on_use_helper;
10000f7e:	4c12      	ldr	r4, [pc, #72]	; (10000fc8 <__aeabi_double_init+0x78>)
10000f80:	6023      	str	r3, [r4, #0]
10000f82:	6063      	str	r3, [r4, #4]
10000f84:	60a3      	str	r3, [r4, #8]
10000f86:	60e3      	str	r3, [r4, #12]
10000f88:	6123      	str	r3, [r4, #16]
10000f8a:	6163      	str	r3, [r4, #20]
10000f8c:	61a3      	str	r3, [r4, #24]
10000f8e:	61e3      	str	r3, [r4, #28]
10000f90:	6223      	str	r3, [r4, #32]
10000f92:	6263      	str	r3, [r4, #36]	; 0x24
10000f94:	62a3      	str	r3, [r4, #40]	; 0x28
10000f96:	62e3      	str	r3, [r4, #44]	; 0x2c
10000f98:	6323      	str	r3, [r4, #48]	; 0x30
10000f9a:	6363      	str	r3, [r4, #52]	; 0x34
10000f9c:	63a3      	str	r3, [r4, #56]	; 0x38
10000f9e:	63e3      	str	r3, [r4, #60]	; 0x3c
10000fa0:	6423      	str	r3, [r4, #64]	; 0x40
10000fa2:	6463      	str	r3, [r4, #68]	; 0x44
10000fa4:	64a3      	str	r3, [r4, #72]	; 0x48
10000fa6:	64e3      	str	r3, [r4, #76]	; 0x4c
10000fa8:	6523      	str	r3, [r4, #80]	; 0x50
10000faa:	6563      	str	r3, [r4, #84]	; 0x54
10000fac:	65a3      	str	r3, [r4, #88]	; 0x58
10000fae:	65e3      	str	r3, [r4, #92]	; 0x5c
10000fb0:	6623      	str	r3, [r4, #96]	; 0x60
10000fb2:	6663      	str	r3, [r4, #100]	; 0x64
10000fb4:	66a3      	str	r3, [r4, #104]	; 0x68
10000fb6:	66e3      	str	r3, [r4, #108]	; 0x6c
10000fb8:	6723      	str	r3, [r4, #112]	; 0x70
10000fba:	6763      	str	r3, [r4, #116]	; 0x74
10000fbc:	67a3      	str	r3, [r4, #120]	; 0x78
10000fbe:	67e3      	str	r3, [r4, #124]	; 0x7c
        sd_table[SF_TABLE_V3_FSINCOS / 4] = (uintptr_t) double_table_shim_on_use_helper;
10000fc0:	64a3      	str	r3, [r4, #72]	; 0x48
10000fc2:	e7d6      	b.n	10000f72 <__aeabi_double_init+0x22>
10000fc4:	00004453 	.word	0x00004453
10000fc8:	20003060 	.word	0x20003060
10000fcc:	10000829 	.word	0x10000829

10000fd0 <flash_get_unique_id>:
// Use standard RUID command to get a unique identifier for the flash (and
// hence the board)

static_assert(FLASH_UNIQUE_ID_SIZE_BYTES == FLASH_RUID_DATA_BYTES, "");

void flash_get_unique_id(uint8_t *id_out) {
10000fd0:	b530      	push	{r4, r5, lr}
#if PICO_NO_FLASH
    panic_unsupported();
#else
    uint8_t txbuf[FLASH_RUID_TOTAL_BYTES] = {0};
10000fd2:	2500      	movs	r5, #0
void flash_get_unique_id(uint8_t *id_out) {
10000fd4:	b089      	sub	sp, #36	; 0x24
10000fd6:	0004      	movs	r4, r0
    uint8_t txbuf[FLASH_RUID_TOTAL_BYTES] = {0};
10000fd8:	2209      	movs	r2, #9
10000fda:	2100      	movs	r1, #0
10000fdc:	a801      	add	r0, sp, #4
10000fde:	9500      	str	r5, [sp, #0]
10000fe0:	f7ff fcd4 	bl	1000098c <__wrap_memset>
    uint8_t rxbuf[FLASH_RUID_TOTAL_BYTES] = {0};
10000fe4:	2209      	movs	r2, #9
10000fe6:	2100      	movs	r1, #0
10000fe8:	a805      	add	r0, sp, #20
10000fea:	9504      	str	r5, [sp, #16]
10000fec:	f7ff fcce 	bl	1000098c <__wrap_memset>
    txbuf[0] = FLASH_RUID_CMD;
10000ff0:	234b      	movs	r3, #75	; 0x4b
10000ff2:	466a      	mov	r2, sp
    flash_do_cmd(txbuf, rxbuf, FLASH_RUID_TOTAL_BYTES);
10000ff4:	4668      	mov	r0, sp
    txbuf[0] = FLASH_RUID_CMD;
10000ff6:	7013      	strb	r3, [r2, #0]
    flash_do_cmd(txbuf, rxbuf, FLASH_RUID_TOTAL_BYTES);
10000ff8:	a904      	add	r1, sp, #16
10000ffa:	f00d f97d 	bl	1000e2f8 <__flash_do_cmd.constprop.0_veneer>
    for (int i = 0; i < FLASH_RUID_DATA_BYTES; i++)
        id_out[i] = rxbuf[i + 1 + FLASH_RUID_DUMMY_BYTES];
10000ffe:	2115      	movs	r1, #21
10001000:	2208      	movs	r2, #8
10001002:	0020      	movs	r0, r4
10001004:	4469      	add	r1, sp
10001006:	f7ff fcc7 	bl	10000998 <__wrap___aeabi_memcpy>
#endif
}
1000100a:	b009      	add	sp, #36	; 0x24
1000100c:	bd30      	pop	{r4, r5, pc}
1000100e:	46c0      	nop			; (mov r8, r8)

10001010 <__aeabi_float_init>:
10001010:	2313      	movs	r3, #19
static __attribute__((noreturn)) void missing_float_func_shim() {
    panic("");
}
#endif

void __aeabi_float_init() {
10001012:	b510      	push	{r4, lr}
    int rom_version = rp2040_rom_version();
    void *rom_table = rom_data_lookup(rom_table_code('S', 'F'));
10001014:	4812      	ldr	r0, [pc, #72]	; (10001060 <__aeabi_float_init+0x50>)
    int rom_version = rp2040_rom_version();
10001016:	781c      	ldrb	r4, [r3, #0]
    void *rom_table = rom_data_lookup(rom_table_code('S', 'F'));
10001018:	f7ff fce6 	bl	100009e8 <rom_data_lookup>
1000101c:	0001      	movs	r1, r0
#if PICO_FLOAT_SUPPORT_ROM_V1
    if (rom_version == 1) {
1000101e:	2c01      	cmp	r4, #1
10001020:	d00a      	beq.n	10001038 <__aeabi_float_init+0x28>
        for(uint i=0;i<SF_TABLE_V2_SIZE/4;i++) {
            if (!sf_table[i]) sf_table[i] = (uintptr_t)missing_float_func_shim;
        }
    }
#endif
    if (rom_version >= 2) {
10001022:	dd03      	ble.n	1000102c <__aeabi_float_init+0x1c>
        assert(*((uint8_t *)(rom_table-2)) * 4 >= SF_TABLE_V2_SIZE);
        memcpy(&sf_table, rom_table, SF_TABLE_V2_SIZE);
10001024:	2280      	movs	r2, #128	; 0x80
10001026:	480f      	ldr	r0, [pc, #60]	; (10001064 <__aeabi_float_init+0x54>)
10001028:	f7ff fcb6 	bl	10000998 <__wrap___aeabi_memcpy>
    }
    sf_clz_func = rom_func_lookup(rom_table_code('L', '3'));
1000102c:	480e      	ldr	r0, [pc, #56]	; (10001068 <__aeabi_float_init+0x58>)
1000102e:	f7ff fcd3 	bl	100009d8 <rom_func_lookup>
10001032:	4b0e      	ldr	r3, [pc, #56]	; (1000106c <__aeabi_float_init+0x5c>)
10001034:	6018      	str	r0, [r3, #0]
}
10001036:	bd10      	pop	{r4, pc}
        memcpy(&sf_table, rom_table, SF_TABLE_V1_SIZE);
10001038:	4c0a      	ldr	r4, [pc, #40]	; (10001064 <__aeabi_float_init+0x54>)
1000103a:	2254      	movs	r2, #84	; 0x54
1000103c:	0020      	movs	r0, r4
1000103e:	f7ff fcab 	bl	10000998 <__wrap___aeabi_memcpy>
            sf_table[i] = (uintptr_t)float_table_shim_on_use_helper;
10001042:	4b0b      	ldr	r3, [pc, #44]	; (10001070 <__aeabi_float_init+0x60>)
10001044:	6563      	str	r3, [r4, #84]	; 0x54
10001046:	65a3      	str	r3, [r4, #88]	; 0x58
10001048:	65e3      	str	r3, [r4, #92]	; 0x5c
1000104a:	6623      	str	r3, [r4, #96]	; 0x60
1000104c:	6663      	str	r3, [r4, #100]	; 0x64
1000104e:	66a3      	str	r3, [r4, #104]	; 0x68
10001050:	66e3      	str	r3, [r4, #108]	; 0x6c
10001052:	6723      	str	r3, [r4, #112]	; 0x70
10001054:	6763      	str	r3, [r4, #116]	; 0x74
10001056:	67a3      	str	r3, [r4, #120]	; 0x78
10001058:	67e3      	str	r3, [r4, #124]	; 0x7c
        sf_table[SF_TABLE_FLOAT2INT/4] = sf_table[SF_TABLE_FLOAT2FIX/4] = (uintptr_t)float_table_shim_on_use_helper;
1000105a:	6223      	str	r3, [r4, #32]
1000105c:	61e3      	str	r3, [r4, #28]
    if (rom_version >= 2) {
1000105e:	e7e5      	b.n	1000102c <__aeabi_float_init+0x1c>
10001060:	00004653 	.word	0x00004653
10001064:	20003160 	.word	0x20003160
10001068:	0000334c 	.word	0x0000334c
1000106c:	20012748 	.word	0x20012748
10001070:	10000939 	.word	0x10000939

10001074 <gpio_set_function>:
// This also clears the input/output/irq override bits.
void gpio_set_function(uint gpio, enum gpio_function fn) {
    invalid_params_if(GPIO, gpio >= NUM_BANK0_GPIOS);
    invalid_params_if(GPIO, fn << IO_BANK0_GPIO0_CTRL_FUNCSEL_LSB & ~IO_BANK0_GPIO0_CTRL_FUNCSEL_BITS);
    // Set input enable on, output disable off
    hw_write_masked(&padsbank0_hw->io[gpio],
10001074:	4a09      	ldr	r2, [pc, #36]	; (1000109c <gpio_set_function+0x28>)
10001076:	0083      	lsls	r3, r0, #2
10001078:	4694      	mov	ip, r2
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
1000107a:	2240      	movs	r2, #64	; 0x40
1000107c:	4463      	add	r3, ip
void gpio_set_function(uint gpio, enum gpio_function fn) {
1000107e:	b510      	push	{r4, lr}
10001080:	681c      	ldr	r4, [r3, #0]
                   PADS_BANK0_GPIO0_IE_BITS,
                   PADS_BANK0_GPIO0_IE_BITS | PADS_BANK0_GPIO0_OD_BITS
    );
    // Zero all fields apart from fsel; we want this IO to do what the peripheral tells it.
    // This doesn't affect e.g. pullup/pulldown, as these are in pad controls.
    iobank0_hw->io[gpio].ctrl = fn << IO_BANK0_GPIO0_CTRL_FUNCSEL_LSB;
10001082:	00c0      	lsls	r0, r0, #3
10001084:	4062      	eors	r2, r4
10001086:	24c0      	movs	r4, #192	; 0xc0
10001088:	4014      	ands	r4, r2
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
1000108a:	2280      	movs	r2, #128	; 0x80
1000108c:	0152      	lsls	r2, r2, #5
1000108e:	4313      	orrs	r3, r2
10001090:	601c      	str	r4, [r3, #0]
10001092:	4b03      	ldr	r3, [pc, #12]	; (100010a0 <gpio_set_function+0x2c>)
10001094:	469c      	mov	ip, r3
10001096:	4460      	add	r0, ip
10001098:	6041      	str	r1, [r0, #4]
}
1000109a:	bd10      	pop	{r4, pc}
1000109c:	4001c004 	.word	0x4001c004
100010a0:	40014000 	.word	0x40014000

100010a4 <gpio_set_pulls>:

// Note that, on RP2040, setting both pulls enables a "bus keep" function,
// i.e. weak pull to whatever is current high/low state of GPIO.
void gpio_set_pulls(uint gpio, bool up, bool down) {
    invalid_params_if(GPIO, gpio >= NUM_BANK0_GPIOS);
    hw_write_masked(
100010a4:	4b0a      	ldr	r3, [pc, #40]	; (100010d0 <gpio_set_pulls+0x2c>)
100010a6:	0080      	lsls	r0, r0, #2
100010a8:	469c      	mov	ip, r3
            &padsbank0_hw->io[gpio],
            (!!up << PADS_BANK0_GPIO0_PUE_LSB) | (!!down << PADS_BANK0_GPIO0_PDE_LSB),
100010aa:	2304      	movs	r3, #4
    hw_write_masked(
100010ac:	4460      	add	r0, ip
            (!!up << PADS_BANK0_GPIO0_PUE_LSB) | (!!down << PADS_BANK0_GPIO0_PDE_LSB),
100010ae:	2900      	cmp	r1, #0
100010b0:	d001      	beq.n	100010b6 <gpio_set_pulls+0x12>
100010b2:	2108      	movs	r1, #8
100010b4:	230c      	movs	r3, #12
100010b6:	2a00      	cmp	r2, #0
100010b8:	d100      	bne.n	100010bc <gpio_set_pulls+0x18>
100010ba:	000b      	movs	r3, r1
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
100010bc:	6802      	ldr	r2, [r0, #0]
100010be:	4053      	eors	r3, r2
100010c0:	220c      	movs	r2, #12
100010c2:	401a      	ands	r2, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
100010c4:	2380      	movs	r3, #128	; 0x80
100010c6:	015b      	lsls	r3, r3, #5
100010c8:	4318      	orrs	r0, r3
100010ca:	6002      	str	r2, [r0, #0]
            PADS_BANK0_GPIO0_PUE_BITS | PADS_BANK0_GPIO0_PDE_BITS
    );
}
100010cc:	4770      	bx	lr
100010ce:	46c0      	nop			; (mov r8, r8)
100010d0:	4001c004 	.word	0x4001c004

100010d4 <gpio_set_outover>:
    );
}

void gpio_set_outover(uint gpio, uint value) {
    invalid_params_if(GPIO, gpio >= NUM_BANK0_GPIOS);
    hw_write_masked(&iobank0_hw->io[gpio].ctrl,
100010d4:	4b07      	ldr	r3, [pc, #28]	; (100010f4 <gpio_set_outover+0x20>)
100010d6:	00c0      	lsls	r0, r0, #3
100010d8:	469c      	mov	ip, r3
100010da:	4460      	add	r0, ip
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
100010dc:	6803      	ldr	r3, [r0, #0]
                   value << IO_BANK0_GPIO0_CTRL_OUTOVER_LSB,
100010de:	0209      	lsls	r1, r1, #8
100010e0:	4059      	eors	r1, r3
100010e2:	23c0      	movs	r3, #192	; 0xc0
100010e4:	009b      	lsls	r3, r3, #2
100010e6:	4019      	ands	r1, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
100010e8:	2380      	movs	r3, #128	; 0x80
100010ea:	015b      	lsls	r3, r3, #5
100010ec:	4318      	orrs	r0, r3
100010ee:	6001      	str	r1, [r0, #0]
                   IO_BANK0_GPIO0_CTRL_OUTOVER_BITS
    );
}
100010f0:	4770      	bx	lr
100010f2:	46c0      	nop			; (mov r8, r8)
100010f4:	40014004 	.word	0x40014004

100010f8 <gpio_init>:
    else
        hw_clear_bits(&padsbank0_hw->io[gpio], PADS_BANK0_GPIO0_IE_BITS);
}

void gpio_init(uint gpio) {
    sio_hw->gpio_oe_clr = 1ul << gpio;
100010f8:	2301      	movs	r3, #1
100010fa:	22d0      	movs	r2, #208	; 0xd0
100010fc:	4083      	lsls	r3, r0
100010fe:	0612      	lsls	r2, r2, #24
10001100:	6293      	str	r3, [r2, #40]	; 0x28
    sio_hw->gpio_clr = 1ul << gpio;
10001102:	6193      	str	r3, [r2, #24]
    hw_write_masked(&padsbank0_hw->io[gpio],
10001104:	4a09      	ldr	r2, [pc, #36]	; (1000112c <gpio_init+0x34>)
10001106:	0083      	lsls	r3, r0, #2
10001108:	4694      	mov	ip, r2
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
1000110a:	2240      	movs	r2, #64	; 0x40
1000110c:	4463      	add	r3, ip
1000110e:	6819      	ldr	r1, [r3, #0]
    iobank0_hw->io[gpio].ctrl = fn << IO_BANK0_GPIO0_CTRL_FUNCSEL_LSB;
10001110:	00c0      	lsls	r0, r0, #3
10001112:	404a      	eors	r2, r1
10001114:	21c0      	movs	r1, #192	; 0xc0
10001116:	4011      	ands	r1, r2
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10001118:	2280      	movs	r2, #128	; 0x80
1000111a:	0152      	lsls	r2, r2, #5
1000111c:	4313      	orrs	r3, r2
1000111e:	6019      	str	r1, [r3, #0]
10001120:	4b03      	ldr	r3, [pc, #12]	; (10001130 <gpio_init+0x38>)
10001122:	469c      	mov	ip, r3
10001124:	2305      	movs	r3, #5
10001126:	4460      	add	r0, ip
10001128:	6043      	str	r3, [r0, #4]
    gpio_set_function(gpio, GPIO_FUNC_SIO);
}
1000112a:	4770      	bx	lr
1000112c:	4001c004 	.word	0x4001c004
10001130:	40014000 	.word	0x40014000

10001134 <irq_set_enabled>:
    invalid_params_if(IRQ, num >= NUM_IRQS);
}

void irq_set_enabled(uint num, bool enabled) {
    check_irq_param(num);
    irq_set_mask_enabled(1u << num, enabled);
10001134:	2301      	movs	r3, #1
10001136:	4083      	lsls	r3, r0
    check_irq_param(num);
    return 0 != ((1u << num) & *((io_rw_32 *) (PPB_BASE + M0PLUS_NVIC_ISER_OFFSET)));
}

void irq_set_mask_enabled(uint32_t mask, bool enabled) {
    if (enabled) {
10001138:	2900      	cmp	r1, #0
1000113a:	d004      	beq.n	10001146 <irq_set_enabled+0x12>
        // Clear pending before enable
        // (if IRQ is actually asserted, it will immediately re-pend)
        *((io_rw_32 *) (PPB_BASE + M0PLUS_NVIC_ICPR_OFFSET)) = mask;
1000113c:	4a03      	ldr	r2, [pc, #12]	; (1000114c <irq_set_enabled+0x18>)
1000113e:	6013      	str	r3, [r2, #0]
        *((io_rw_32 *) (PPB_BASE + M0PLUS_NVIC_ISER_OFFSET)) = mask;
10001140:	4a03      	ldr	r2, [pc, #12]	; (10001150 <irq_set_enabled+0x1c>)
10001142:	6013      	str	r3, [r2, #0]
}
10001144:	4770      	bx	lr
    } else {
        *((io_rw_32 *) (PPB_BASE + M0PLUS_NVIC_ICER_OFFSET)) = mask;
10001146:	4a03      	ldr	r2, [pc, #12]	; (10001154 <irq_set_enabled+0x20>)
10001148:	6013      	str	r3, [r2, #0]
}
1000114a:	e7fb      	b.n	10001144 <irq_set_enabled+0x10>
1000114c:	e000e280 	.word	0xe000e280
10001150:	e000e100 	.word	0xe000e100
10001154:	e000e180 	.word	0xe000e180

10001158 <irq_set_pending>:
    }
}

void irq_set_pending(uint num) {
    check_irq_param(num);
    *((io_rw_32 *) (PPB_BASE + M0PLUS_NVIC_ISPR_OFFSET)) = 1u << num;
10001158:	2301      	movs	r3, #1
1000115a:	4083      	lsls	r3, r0
1000115c:	4a01      	ldr	r2, [pc, #4]	; (10001164 <irq_set_pending+0xc>)
1000115e:	6013      	str	r3, [r2, #0]
}
10001160:	4770      	bx	lr
10001162:	46c0      	nop			; (mov r8, r8)
10001164:	e000e200 	.word	0xe000e200

10001168 <irq_get_vtable_handler>:
    return (irq_handler_t *) scb_hw->vtor;
10001168:	4b02      	ldr	r3, [pc, #8]	; (10001174 <irq_get_vtable_handler+0xc>)
    return (uintptr_t)raw_handler - (uintptr_t)irq_handler_chain_slots < sizeof(irq_handler_chain_slots);
}

irq_handler_t irq_get_vtable_handler(uint num) {
    check_irq_param(num);
    return get_vtable()[16 + num];
1000116a:	3010      	adds	r0, #16
    return (irq_handler_t *) scb_hw->vtor;
1000116c:	689b      	ldr	r3, [r3, #8]
    return get_vtable()[16 + num];
1000116e:	0080      	lsls	r0, r0, #2
10001170:	58c0      	ldr	r0, [r0, r3]
}
10001172:	4770      	bx	lr
10001174:	e000ed00 	.word	0xe000ed00

10001178 <irq_set_exclusive_handler>:

void irq_set_exclusive_handler(uint num, irq_handler_t handler) {
10001178:	b570      	push	{r4, r5, r6, lr}
1000117a:	000d      	movs	r5, r1
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
1000117c:	f3ef 8610 	mrs	r6, PRIMASK
    __asm volatile ("cpsid i");
10001180:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
10001182:	4a0f      	ldr	r2, [pc, #60]	; (100011c0 <irq_set_exclusive_handler+0x48>)
10001184:	6813      	ldr	r3, [r2, #0]
10001186:	2b00      	cmp	r3, #0
10001188:	d0fc      	beq.n	10001184 <irq_set_exclusive_handler+0xc>
    __asm volatile ("dmb");
1000118a:	f3bf 8f5f 	dmb	sy
    return (irq_handler_t *) scb_hw->vtor;
1000118e:	4b0d      	ldr	r3, [pc, #52]	; (100011c4 <irq_set_exclusive_handler+0x4c>)
    return get_vtable()[16 + num];
10001190:	3010      	adds	r0, #16
    return (irq_handler_t *) scb_hw->vtor;
10001192:	689b      	ldr	r3, [r3, #8]
    return get_vtable()[16 + num];
10001194:	0084      	lsls	r4, r0, #2
10001196:	591b      	ldr	r3, [r3, r4]
    check_irq_param(num);
#if !PICO_NO_RAM_VECTOR_TABLE
    spin_lock_t *lock = spin_lock_instance(PICO_SPINLOCK_ID_IRQ);
    uint32_t save = spin_lock_blocking(lock);
    __unused irq_handler_t current = irq_get_vtable_handler(num);
    hard_assert(current == __unhandled_user_irq || current == handler);
10001198:	4a0b      	ldr	r2, [pc, #44]	; (100011c8 <irq_set_exclusive_handler+0x50>)
1000119a:	4293      	cmp	r3, r2
1000119c:	d003      	beq.n	100011a6 <irq_set_exclusive_handler+0x2e>
1000119e:	429d      	cmp	r5, r3
100011a0:	d001      	beq.n	100011a6 <irq_set_exclusive_handler+0x2e>

#ifdef NDEBUG
extern void hard_assertion_failure();
static inline void hard_assert(bool condition, ...) {
    if (!condition)
        hard_assertion_failure();
100011a2:	f000 fdfd 	bl	10001da0 <hard_assertion_failure>
    return (irq_handler_t *) scb_hw->vtor;
100011a6:	4b07      	ldr	r3, [pc, #28]	; (100011c4 <irq_set_exclusive_handler+0x4c>)
100011a8:	689b      	ldr	r3, [r3, #8]
    get_vtable()[16 + num] = handler;
100011aa:	511d      	str	r5, [r3, r4]
100011ac:	f3bf 8f5f 	dmb	sy
100011b0:	f3bf 8f5f 	dmb	sy
    *lock = 0;
100011b4:	2200      	movs	r2, #0
100011b6:	4b02      	ldr	r3, [pc, #8]	; (100011c0 <irq_set_exclusive_handler+0x48>)
100011b8:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
100011ba:	f386 8810 	msr	PRIMASK, r6
    set_raw_irq_handler_and_unlock(num, handler, save);
#else
    panic_unsupported();
#endif
}
100011be:	bd70      	pop	{r4, r5, r6, pc}
100011c0:	d0000124 	.word	0xd0000124
100011c4:	e000ed00 	.word	0xe000ed00
100011c8:	100001cd 	.word	0x100001cd

100011cc <irq_remove_handler>:
    }
    set_raw_irq_handler_and_unlock(num, vtable_handler, save);
#endif
}

void irq_remove_handler(uint num, irq_handler_t handler) {
100011cc:	b5f0      	push	{r4, r5, r6, r7, lr}
100011ce:	46de      	mov	lr, fp
100011d0:	4657      	mov	r7, sl
100011d2:	464e      	mov	r6, r9
100011d4:	4645      	mov	r5, r8
100011d6:	b5e0      	push	{r5, r6, r7, lr}
100011d8:	000c      	movs	r4, r1
100011da:	b083      	sub	sp, #12
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
100011dc:	f3ef 8a10 	mrs	sl, PRIMASK
    __asm volatile ("cpsid i");
100011e0:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
100011e2:	4a5e      	ldr	r2, [pc, #376]	; (1000135c <irq_remove_handler+0x190>)
100011e4:	6813      	ldr	r3, [r2, #0]
100011e6:	2b00      	cmp	r3, #0
100011e8:	d0fc      	beq.n	100011e4 <irq_remove_handler+0x18>
    __asm volatile ("dmb");
100011ea:	f3bf 8f5f 	dmb	sy
#if !PICO_NO_RAM_VECTOR_TABLE
    spin_lock_t *lock = spin_lock_instance(PICO_SPINLOCK_ID_IRQ);
    uint32_t save = spin_lock_blocking(lock);
    irq_handler_t vtable_handler = get_vtable()[16 + num];
100011ee:	2210      	movs	r2, #16
100011f0:	4691      	mov	r9, r2
100011f2:	4481      	add	r9, r0
100011f4:	464a      	mov	r2, r9
    return (irq_handler_t *) scb_hw->vtor;
100011f6:	4b5a      	ldr	r3, [pc, #360]	; (10001360 <irq_remove_handler+0x194>)
    irq_handler_t vtable_handler = get_vtable()[16 + num];
100011f8:	0096      	lsls	r6, r2, #2
    return (irq_handler_t *) scb_hw->vtor;
100011fa:	689b      	ldr	r3, [r3, #8]
    irq_handler_t vtable_handler = get_vtable()[16 + num];
100011fc:	599d      	ldr	r5, [r3, r6]
    if (vtable_handler != __unhandled_user_irq && vtable_handler != handler) {
100011fe:	4b59      	ldr	r3, [pc, #356]	; (10001364 <irq_remove_handler+0x198>)
10001200:	4698      	mov	r8, r3
10001202:	429d      	cmp	r5, r3
10001204:	d005      	beq.n	10001212 <irq_remove_handler+0x46>
10001206:	42a5      	cmp	r5, r4
10001208:	d016      	beq.n	10001238 <irq_remove_handler+0x6c>
    return (uintptr_t)raw_handler - (uintptr_t)irq_handler_chain_slots < sizeof(irq_handler_chain_slots);
1000120a:	4f57      	ldr	r7, [pc, #348]	; (10001368 <irq_remove_handler+0x19c>)
1000120c:	1beb      	subs	r3, r5, r7
#if !PICO_DISABLE_SHARED_IRQ_HANDLERS && PICO_MAX_SHARED_IRQ_HANDLERS
        if (is_shared_irq_raw_handler(vtable_handler)) {
1000120e:	2b2f      	cmp	r3, #47	; 0x2f
10001210:	d914      	bls.n	1000123c <irq_remove_handler+0x70>
    return (irq_handler_t *) scb_hw->vtor;
10001212:	4b53      	ldr	r3, [pc, #332]	; (10001360 <irq_remove_handler+0x194>)
10001214:	689b      	ldr	r3, [r3, #8]
    get_vtable()[16 + num] = handler;
10001216:	519d      	str	r5, [r3, r6]
10001218:	f3bf 8f5f 	dmb	sy
1000121c:	f3bf 8f5f 	dmb	sy
    *lock = 0;
10001220:	2200      	movs	r2, #0
10001222:	4b4e      	ldr	r3, [pc, #312]	; (1000135c <irq_remove_handler+0x190>)
10001224:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10001226:	f38a 8810 	msr	PRIMASK, sl
    }
    set_raw_irq_handler_and_unlock(num, vtable_handler, save);
#else
    panic_unsupported();
#endif
}
1000122a:	b003      	add	sp, #12
1000122c:	bcf0      	pop	{r4, r5, r6, r7}
1000122e:	46bb      	mov	fp, r7
10001230:	46b2      	mov	sl, r6
10001232:	46a9      	mov	r9, r5
10001234:	46a0      	mov	r8, r4
10001236:	bdf0      	pop	{r4, r5, r6, r7, pc}
        vtable_handler = __unhandled_user_irq;
10001238:	001d      	movs	r5, r3
1000123a:	e7ea      	b.n	10001212 <irq_remove_handler+0x46>
    return 0 != ((1u << num) & *((io_rw_32 *) (PPB_BASE + M0PLUS_NVIC_ISER_OFFSET)));
1000123c:	2301      	movs	r3, #1
1000123e:	4083      	lsls	r3, r0
10001240:	469b      	mov	fp, r3
10001242:	465a      	mov	r2, fp
10001244:	4b49      	ldr	r3, [pc, #292]	; (1000136c <irq_remove_handler+0x1a0>)
10001246:	681b      	ldr	r3, [r3, #0]
10001248:	401a      	ands	r2, r3
1000124a:	9200      	str	r2, [sp, #0]
        *((io_rw_32 *) (PPB_BASE + M0PLUS_NVIC_ICER_OFFSET)) = mask;
1000124c:	465a      	mov	r2, fp
1000124e:	4b48      	ldr	r3, [pc, #288]	; (10001370 <irq_remove_handler+0x1a4>)
10001250:	601a      	str	r2, [r3, #0]
    __asm volatile ("dmb");
10001252:	f3bf 8f5f 	dmb	sy
            uint exception = __get_current_exception();
10001256:	f7ff f806 	bl	10000266 <__get_current_exception>
1000125a:	9001      	str	r0, [sp, #4]
            hard_assert(!exception || exception == num + 16);
1000125c:	2800      	cmp	r0, #0
1000125e:	d003      	beq.n	10001268 <irq_remove_handler+0x9c>
10001260:	4581      	cmp	r9, r0
10001262:	d001      	beq.n	10001268 <irq_remove_handler+0x9c>
10001264:	f000 fd9c 	bl	10001da0 <hard_assertion_failure>
    return (void *) (((uintptr_t) addr) & ~0x1);
10001268:	2301      	movs	r3, #1
1000126a:	0029      	movs	r1, r5
1000126c:	4399      	bics	r1, r3
            while (to_free_slot->handler != handler) {
1000126e:	688b      	ldr	r3, [r1, #8]
10001270:	42a3      	cmp	r3, r4
10001272:	d068      	beq.n	10001346 <irq_remove_handler+0x17a>
10001274:	000a      	movs	r2, r1
10001276:	e007      	b.n	10001288 <irq_remove_handler+0xbc>
                to_free_slot = &irq_handler_chain_slots[to_free_slot->link];
10001278:	0043      	lsls	r3, r0, #1
1000127a:	181b      	adds	r3, r3, r0
1000127c:	009b      	lsls	r3, r3, #2
1000127e:	18fb      	adds	r3, r7, r3
            while (to_free_slot->handler != handler) {
10001280:	6898      	ldr	r0, [r3, #8]
10001282:	42a0      	cmp	r0, r4
10001284:	d011      	beq.n	100012aa <irq_remove_handler+0xde>
                to_free_slot = &irq_handler_chain_slots[to_free_slot->link];
10001286:	001a      	movs	r2, r3
                if (to_free_slot->link < 0) break;
10001288:	2006      	movs	r0, #6
1000128a:	5610      	ldrsb	r0, [r2, r0]
1000128c:	2800      	cmp	r0, #0
1000128e:	daf3      	bge.n	10001278 <irq_remove_handler+0xac>
    if (enabled) {
10001290:	9b00      	ldr	r3, [sp, #0]
10001292:	2b00      	cmp	r3, #0
10001294:	d005      	beq.n	100012a2 <irq_remove_handler+0xd6>
        *((io_rw_32 *) (PPB_BASE + M0PLUS_NVIC_ICPR_OFFSET)) = mask;
10001296:	465a      	mov	r2, fp
10001298:	4b36      	ldr	r3, [pc, #216]	; (10001374 <irq_remove_handler+0x1a8>)
1000129a:	601a      	str	r2, [r3, #0]
        *((io_rw_32 *) (PPB_BASE + M0PLUS_NVIC_ISER_OFFSET)) = mask;
1000129c:	4b33      	ldr	r3, [pc, #204]	; (1000136c <irq_remove_handler+0x1a0>)
1000129e:	601a      	str	r2, [r3, #0]
100012a0:	e7b7      	b.n	10001212 <irq_remove_handler+0x46>
        *((io_rw_32 *) (PPB_BASE + M0PLUS_NVIC_ICER_OFFSET)) = mask;
100012a2:	465a      	mov	r2, fp
100012a4:	4b32      	ldr	r3, [pc, #200]	; (10001370 <irq_remove_handler+0x1a4>)
100012a6:	601a      	str	r2, [r3, #0]
100012a8:	e7b3      	b.n	10001212 <irq_remove_handler+0x46>
                int next_slot_index = to_free_slot->link;
100012aa:	2006      	movs	r0, #6
100012ac:	5618      	ldrsb	r0, [r3, r0]
                if (next_slot_index >= 0) {
100012ae:	2800      	cmp	r0, #0
100012b0:	db21      	blt.n	100012f6 <irq_remove_handler+0x12a>
                    to_free_slot->handler = next_slot->handler;
100012b2:	0042      	lsls	r2, r0, #1
100012b4:	1811      	adds	r1, r2, r0
100012b6:	0089      	lsls	r1, r1, #2
100012b8:	187c      	adds	r4, r7, r1
100012ba:	4688      	mov	r8, r1
100012bc:	68a1      	ldr	r1, [r4, #8]
100012be:	6099      	str	r1, [r3, #8]
                    to_free_slot->priority = next_slot->priority;
100012c0:	79e1      	ldrb	r1, [r4, #7]
100012c2:	71d9      	strb	r1, [r3, #7]
                    to_free_slot->link = next_slot->link;
100012c4:	2106      	movs	r1, #6
100012c6:	5661      	ldrsb	r1, [r4, r1]
100012c8:	7199      	strb	r1, [r3, #6]
                    to_free_slot->inst3 = next_slot->link >= 0 ?
100012ca:	2900      	cmp	r1, #0
100012cc:	db2b      	blt.n	10001326 <irq_remove_handler+0x15a>
    int32_t i_addr = (*inst) << 21u;
100012ce:	88a4      	ldrh	r4, [r4, #4]
    uint32_t delta = (ui_to - ui_from - 4) / 2;
100012d0:	1af9      	subs	r1, r7, r3
    int32_t i_addr = (*inst) << 21u;
100012d2:	0564      	lsls	r4, r4, #21
    return inst + 2 + i_addr;
100012d4:	1524      	asrs	r4, r4, #20
100012d6:	4444      	add	r4, r8
    uint32_t delta = (ui_to - ui_from - 4) / 2;
100012d8:	1909      	adds	r1, r1, r4
    return 0xe000 | (delta & 0x7ff);
100012da:	24e0      	movs	r4, #224	; 0xe0
100012dc:	0509      	lsls	r1, r1, #20
100012de:	0d49      	lsrs	r1, r1, #21
100012e0:	0224      	lsls	r4, r4, #8
100012e2:	4321      	orrs	r1, r4
                    to_free_slot->inst3 = next_slot->link >= 0 ?
100012e4:	8099      	strh	r1, [r3, #4]
                    next_slot->link = irq_hander_chain_free_slot_head;
100012e6:	1812      	adds	r2, r2, r0
100012e8:	4b23      	ldr	r3, [pc, #140]	; (10001378 <irq_remove_handler+0x1ac>)
100012ea:	0092      	lsls	r2, r2, #2
100012ec:	18bf      	adds	r7, r7, r2
100012ee:	781a      	ldrb	r2, [r3, #0]
                    irq_hander_chain_free_slot_head = next_slot_index;
100012f0:	7018      	strb	r0, [r3, #0]
                    next_slot->link = irq_hander_chain_free_slot_head;
100012f2:	71ba      	strb	r2, [r7, #6]
                    irq_hander_chain_free_slot_head = next_slot_index;
100012f4:	e7cc      	b.n	10001290 <irq_remove_handler+0xc4>
                    if (!exception) {
100012f6:	9801      	ldr	r0, [sp, #4]
100012f8:	2800      	cmp	r0, #0
100012fa:	d117      	bne.n	1000132c <irq_remove_handler+0x160>
                            prev_slot->link = -1;
100012fc:	30ff      	adds	r0, #255	; 0xff
100012fe:	7190      	strb	r0, [r2, #6]
                            prev_slot->inst3 = 0xbd00; // pop {pc}
10001300:	481e      	ldr	r0, [pc, #120]	; (1000137c <irq_remove_handler+0x1b0>)
10001302:	8090      	strh	r0, [r2, #4]
                        to_free_slot->link = irq_hander_chain_free_slot_head;
10001304:	4a1c      	ldr	r2, [pc, #112]	; (10001378 <irq_remove_handler+0x1ac>)
            int to_free_slot_index = to_free_slot - irq_handler_chain_slots;
10001306:	1bc9      	subs	r1, r1, r7
                        to_free_slot->link = irq_hander_chain_free_slot_head;
10001308:	7810      	ldrb	r0, [r2, #0]
            int to_free_slot_index = to_free_slot - irq_handler_chain_slots;
1000130a:	1089      	asrs	r1, r1, #2
                        to_free_slot->link = irq_hander_chain_free_slot_head;
1000130c:	7198      	strb	r0, [r3, #6]
            int to_free_slot_index = to_free_slot - irq_handler_chain_slots;
1000130e:	008b      	lsls	r3, r1, #2
10001310:	185b      	adds	r3, r3, r1
10001312:	0118      	lsls	r0, r3, #4
10001314:	181b      	adds	r3, r3, r0
10001316:	0218      	lsls	r0, r3, #8
10001318:	181b      	adds	r3, r3, r0
1000131a:	0418      	lsls	r0, r3, #16
1000131c:	181b      	adds	r3, r3, r0
1000131e:	005b      	lsls	r3, r3, #1
10001320:	185b      	adds	r3, r3, r1
                        irq_hander_chain_free_slot_head = to_free_slot_index;
10001322:	7013      	strb	r3, [r2, #0]
10001324:	e7b4      	b.n	10001290 <irq_remove_handler+0xc4>
                    to_free_slot->inst3 = next_slot->link >= 0 ?
10001326:	21bd      	movs	r1, #189	; 0xbd
10001328:	0209      	lsls	r1, r1, #8
1000132a:	e7db      	b.n	100012e4 <irq_remove_handler+0x118>
                        insert_branch_and_link(&to_free_slot->inst3, irq_handler_chain_remove_tail);
1000132c:	4a14      	ldr	r2, [pc, #80]	; (10001380 <irq_remove_handler+0x1b4>)
    from[0] = 0xf000 | ((delta >> 11u) & 0x7ffu);
1000132e:	4915      	ldr	r1, [pc, #84]	; (10001384 <irq_remove_handler+0x1b8>)
                        insert_branch_and_link(&to_free_slot->inst3, irq_handler_chain_remove_tail);
10001330:	1ad2      	subs	r2, r2, r3
    uint32_t delta = (ui_to - ui_from - 4) / 2;
10001332:	3a08      	subs	r2, #8
    from[0] = 0xf000 | ((delta >> 11u) & 0x7ffu);
10001334:	0250      	lsls	r0, r2, #9
10001336:	0d40      	lsrs	r0, r0, #21
10001338:	4301      	orrs	r1, r0
1000133a:	8099      	strh	r1, [r3, #4]
    from[1] = 0xf800 | (delta & 0x7ffu);
1000133c:	4912      	ldr	r1, [pc, #72]	; (10001388 <irq_remove_handler+0x1bc>)
    uint32_t delta = (ui_to - ui_from - 4) / 2;
1000133e:	0852      	lsrs	r2, r2, #1
    from[1] = 0xf800 | (delta & 0x7ffu);
10001340:	430a      	orrs	r2, r1
10001342:	80da      	strh	r2, [r3, #6]
}
10001344:	e7a4      	b.n	10001290 <irq_remove_handler+0xc4>
                int next_slot_index = to_free_slot->link;
10001346:	2006      	movs	r0, #6
10001348:	5608      	ldrsb	r0, [r1, r0]
                if (next_slot_index >= 0) {
1000134a:	000b      	movs	r3, r1
1000134c:	2800      	cmp	r0, #0
1000134e:	dab0      	bge.n	100012b2 <irq_remove_handler+0xe6>
                    if (!exception) {
10001350:	9a01      	ldr	r2, [sp, #4]
10001352:	2a00      	cmp	r2, #0
10001354:	d1ea      	bne.n	1000132c <irq_remove_handler+0x160>
                            vtable_handler = __unhandled_user_irq;
10001356:	4645      	mov	r5, r8
10001358:	e7d4      	b.n	10001304 <irq_remove_handler+0x138>
1000135a:	46c0      	nop			; (mov r8, r8)
1000135c:	d0000124 	.word	0xd0000124
10001360:	e000ed00 	.word	0xe000ed00
10001364:	100001cd 	.word	0x100001cd
10001368:	200026c0 	.word	0x200026c0
1000136c:	e000e100 	.word	0xe000e100
10001370:	e000e180 	.word	0xe000e180
10001374:	e000e280 	.word	0xe000e280
10001378:	20012776 	.word	0x20012776
1000137c:	ffffbd00 	.word	0xffffbd00
10001380:	200026fa 	.word	0x200026fa
10001384:	fffff000 	.word	0xfffff000
10001388:	fffff800 	.word	0xfffff800

1000138c <irq_set_priority>:

void irq_set_priority(uint num, uint8_t hardware_priority) {
    check_irq_param(num);

    // note that only 32 bit writes are supported
    io_rw_32 *p = (io_rw_32 *)((PPB_BASE + M0PLUS_NVIC_IPR0_OFFSET) + (num & ~3u));
1000138c:	2303      	movs	r3, #3
void irq_set_priority(uint num, uint8_t hardware_priority) {
1000138e:	b510      	push	{r4, lr}
    io_rw_32 *p = (io_rw_32 *)((PPB_BASE + M0PLUS_NVIC_IPR0_OFFSET) + (num & ~3u));
10001390:	0004      	movs	r4, r0
10001392:	4a07      	ldr	r2, [pc, #28]	; (100013b0 <irq_set_priority+0x24>)
    *p = (*p & ~(0xffu << (8 * (num & 3u)))) | (((uint32_t) hardware_priority) << (8 * (num & 3u)));
10001394:	4018      	ands	r0, r3
    io_rw_32 *p = (io_rw_32 *)((PPB_BASE + M0PLUS_NVIC_IPR0_OFFSET) + (num & ~3u));
10001396:	4694      	mov	ip, r2
    *p = (*p & ~(0xffu << (8 * (num & 3u)))) | (((uint32_t) hardware_priority) << (8 * (num & 3u)));
10001398:	00c0      	lsls	r0, r0, #3
    io_rw_32 *p = (io_rw_32 *)((PPB_BASE + M0PLUS_NVIC_IPR0_OFFSET) + (num & ~3u));
1000139a:	439c      	bics	r4, r3
    *p = (*p & ~(0xffu << (8 * (num & 3u)))) | (((uint32_t) hardware_priority) << (8 * (num & 3u)));
1000139c:	33fc      	adds	r3, #252	; 0xfc
1000139e:	4083      	lsls	r3, r0
    io_rw_32 *p = (io_rw_32 *)((PPB_BASE + M0PLUS_NVIC_IPR0_OFFSET) + (num & ~3u));
100013a0:	4464      	add	r4, ip
    *p = (*p & ~(0xffu << (8 * (num & 3u)))) | (((uint32_t) hardware_priority) << (8 * (num & 3u)));
100013a2:	6822      	ldr	r2, [r4, #0]
100013a4:	4081      	lsls	r1, r0
100013a6:	439a      	bics	r2, r3
100013a8:	0013      	movs	r3, r2
100013aa:	430b      	orrs	r3, r1
100013ac:	6023      	str	r3, [r4, #0]
}
100013ae:	bd10      	pop	{r4, pc}
100013b0:	e000e400 	.word	0xe000e400

100013b4 <irq_add_tail_to_free_list>:

#if !PICO_DISABLE_SHARED_IRQ_HANDLERS && PICO_MAX_SHARED_IRQ_HANDLERS
// used by irq_handler_chain.S to remove the last link in a handler chain after it executes
// note this must be called only with the last slot in a chain (and during the exception)
void irq_add_tail_to_free_list(struct irq_handler_chain_slot *slot) {
100013b4:	b570      	push	{r4, r5, r6, lr}
    return (void *) (((uintptr_t) addr) | 0x1);
100013b6:	2501      	movs	r5, #1
void irq_add_tail_to_free_list(struct irq_handler_chain_slot *slot) {
100013b8:	0004      	movs	r4, r0
    return (void *) (((uintptr_t) addr) | 0x1);
100013ba:	4305      	orrs	r5, r0
    irq_handler_t slot_handler = (irq_handler_t) add_thumb_bit(slot);
    assert(is_shared_irq_raw_handler(slot_handler));

    int exception = __get_current_exception();
100013bc:	f7fe ff53 	bl	10000266 <__get_current_exception>
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
100013c0:	f3ef 8c10 	mrs	ip, PRIMASK
    __asm volatile ("cpsid i");
100013c4:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
100013c6:	4a24      	ldr	r2, [pc, #144]	; (10001458 <irq_add_tail_to_free_list+0xa4>)
100013c8:	6813      	ldr	r3, [r2, #0]
100013ca:	2b00      	cmp	r3, #0
100013cc:	d0fc      	beq.n	100013c8 <irq_add_tail_to_free_list+0x14>
    __asm volatile ("dmb");
100013ce:	f3bf 8f5f 	dmb	sy
    assert(exception);
    spin_lock_t *lock = spin_lock_instance(PICO_SPINLOCK_ID_IRQ);
    uint32_t save = spin_lock_blocking(lock);
    int slot_index = slot - irq_handler_chain_slots;
100013d2:	4e22      	ldr	r6, [pc, #136]	; (1000145c <irq_add_tail_to_free_list+0xa8>)
    if (slot_handler == get_vtable()[exception]) {
100013d4:	0080      	lsls	r0, r0, #2
    int slot_index = slot - irq_handler_chain_slots;
100013d6:	1ba1      	subs	r1, r4, r6
100013d8:	1089      	asrs	r1, r1, #2
100013da:	008a      	lsls	r2, r1, #2
100013dc:	1852      	adds	r2, r2, r1
100013de:	0113      	lsls	r3, r2, #4
100013e0:	18d2      	adds	r2, r2, r3
100013e2:	0213      	lsls	r3, r2, #8
100013e4:	18d2      	adds	r2, r2, r3
100013e6:	0413      	lsls	r3, r2, #16
100013e8:	18d3      	adds	r3, r2, r3
    return (irq_handler_t *) scb_hw->vtor;
100013ea:	4a1d      	ldr	r2, [pc, #116]	; (10001460 <irq_add_tail_to_free_list+0xac>)
    int slot_index = slot - irq_handler_chain_slots;
100013ec:	005b      	lsls	r3, r3, #1
100013ee:	185b      	adds	r3, r3, r1
    return (irq_handler_t *) scb_hw->vtor;
100013f0:	6891      	ldr	r1, [r2, #8]
    if (slot_handler == get_vtable()[exception]) {
100013f2:	5809      	ldr	r1, [r1, r0]
100013f4:	42a9      	cmp	r1, r5
100013f6:	d01c      	beq.n	10001432 <irq_add_tail_to_free_list+0x7e>
        get_vtable()[exception] = __unhandled_user_irq;
    } else {
        bool __unused found = false;
        // need to find who points at the slot and update it
        for(uint i=0;i<count_of(irq_handler_chain_slots);i++) {
            if (irq_handler_chain_slots[i].link == slot_index) {
100013f8:	2206      	movs	r2, #6
100013fa:	56b2      	ldrsb	r2, [r6, r2]
100013fc:	429a      	cmp	r2, r3
100013fe:	d01c      	beq.n	1000143a <irq_add_tail_to_free_list+0x86>
10001400:	2212      	movs	r2, #18
10001402:	56b2      	ldrsb	r2, [r6, r2]
10001404:	4293      	cmp	r3, r2
10001406:	d022      	beq.n	1000144e <irq_add_tail_to_free_list+0x9a>
10001408:	221e      	movs	r2, #30
1000140a:	56b2      	ldrsb	r2, [r6, r2]
1000140c:	4293      	cmp	r3, r2
1000140e:	d020      	beq.n	10001452 <irq_add_tail_to_free_list+0x9e>
10001410:	222a      	movs	r2, #42	; 0x2a
10001412:	56b2      	ldrsb	r2, [r6, r2]
        for(uint i=0;i<count_of(irq_handler_chain_slots);i++) {
10001414:	2103      	movs	r1, #3
            if (irq_handler_chain_slots[i].link == slot_index) {
10001416:	429a      	cmp	r2, r3
10001418:	d010      	beq.n	1000143c <irq_add_tail_to_free_list+0x88>
            }
        }
        assert(found);
    }
    // add slot to free list
    slot->link = irq_hander_chain_free_slot_head;
1000141a:	4a12      	ldr	r2, [pc, #72]	; (10001464 <irq_add_tail_to_free_list+0xb0>)
1000141c:	7811      	ldrb	r1, [r2, #0]
    irq_hander_chain_free_slot_head = slot_index;
1000141e:	7013      	strb	r3, [r2, #0]
    slot->link = irq_hander_chain_free_slot_head;
10001420:	71a1      	strb	r1, [r4, #6]
10001422:	f3bf 8f5f 	dmb	sy
    *lock = 0;
10001426:	2200      	movs	r2, #0
10001428:	4b0b      	ldr	r3, [pc, #44]	; (10001458 <irq_add_tail_to_free_list+0xa4>)
1000142a:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
1000142c:	f38c 8810 	msr	PRIMASK, ip
    spin_unlock(lock, save);
}
10001430:	bd70      	pop	{r4, r5, r6, pc}
    return (irq_handler_t *) scb_hw->vtor;
10001432:	6892      	ldr	r2, [r2, #8]
        get_vtable()[exception] = __unhandled_user_irq;
10001434:	490c      	ldr	r1, [pc, #48]	; (10001468 <irq_add_tail_to_free_list+0xb4>)
10001436:	5011      	str	r1, [r2, r0]
10001438:	e7ef      	b.n	1000141a <irq_add_tail_to_free_list+0x66>
        for(uint i=0;i<count_of(irq_handler_chain_slots);i++) {
1000143a:	2100      	movs	r1, #0
                irq_handler_chain_slots[i].link = -1;
1000143c:	004a      	lsls	r2, r1, #1
1000143e:	1852      	adds	r2, r2, r1
10001440:	21ff      	movs	r1, #255	; 0xff
10001442:	0092      	lsls	r2, r2, #2
10001444:	18b2      	adds	r2, r6, r2
10001446:	7191      	strb	r1, [r2, #6]
                irq_handler_chain_slots[i].inst3 = 0xbd00; // pop {pc}
10001448:	4908      	ldr	r1, [pc, #32]	; (1000146c <irq_add_tail_to_free_list+0xb8>)
1000144a:	8091      	strh	r1, [r2, #4]
                break;
1000144c:	e7e5      	b.n	1000141a <irq_add_tail_to_free_list+0x66>
        for(uint i=0;i<count_of(irq_handler_chain_slots);i++) {
1000144e:	2101      	movs	r1, #1
10001450:	e7f4      	b.n	1000143c <irq_add_tail_to_free_list+0x88>
10001452:	2102      	movs	r1, #2
10001454:	e7f2      	b.n	1000143c <irq_add_tail_to_free_list+0x88>
10001456:	46c0      	nop			; (mov r8, r8)
10001458:	d0000124 	.word	0xd0000124
1000145c:	200026c0 	.word	0x200026c0
10001460:	e000ed00 	.word	0xe000ed00
10001464:	20012776 	.word	0x20012776
10001468:	100001cd 	.word	0x100001cd
1000146c:	ffffbd00 	.word	0xffffbd00

10001470 <irq_init_priorities>:
#endif

void irq_init_priorities() {
10001470:	b5f0      	push	{r4, r5, r6, r7, lr}
#if PICO_DEFAULT_IRQ_PRIORITY != 0
    for (uint irq = 0; irq < NUM_IRQS; irq++) {
10001472:	2200      	movs	r2, #0
    io_rw_32 *p = (io_rw_32 *)((PPB_BASE + M0PLUS_NVIC_IPR0_OFFSET) + (num & ~3u));
10001474:	2403      	movs	r4, #3
    *p = (*p & ~(0xffu << (8 * (num & 3u)))) | (((uint32_t) hardware_priority) << (8 * (num & 3u)));
10001476:	27ff      	movs	r7, #255	; 0xff
10001478:	2680      	movs	r6, #128	; 0x80
1000147a:	0020      	movs	r0, r4
1000147c:	003d      	movs	r5, r7
    io_rw_32 *p = (io_rw_32 *)((PPB_BASE + M0PLUS_NVIC_IPR0_OFFSET) + (num & ~3u));
1000147e:	4b09      	ldr	r3, [pc, #36]	; (100014a4 <irq_init_priorities+0x34>)
10001480:	0011      	movs	r1, r2
10001482:	469c      	mov	ip, r3
    *p = (*p & ~(0xffu << (8 * (num & 3u)))) | (((uint32_t) hardware_priority) << (8 * (num & 3u)));
10001484:	4010      	ands	r0, r2
10001486:	00c0      	lsls	r0, r0, #3
10001488:	4085      	lsls	r5, r0
    io_rw_32 *p = (io_rw_32 *)((PPB_BASE + M0PLUS_NVIC_IPR0_OFFSET) + (num & ~3u));
1000148a:	43a1      	bics	r1, r4
1000148c:	4461      	add	r1, ip
    *p = (*p & ~(0xffu << (8 * (num & 3u)))) | (((uint32_t) hardware_priority) << (8 * (num & 3u)));
1000148e:	680b      	ldr	r3, [r1, #0]
    for (uint irq = 0; irq < NUM_IRQS; irq++) {
10001490:	3201      	adds	r2, #1
    *p = (*p & ~(0xffu << (8 * (num & 3u)))) | (((uint32_t) hardware_priority) << (8 * (num & 3u)));
10001492:	43ab      	bics	r3, r5
10001494:	0035      	movs	r5, r6
10001496:	4085      	lsls	r5, r0
10001498:	432b      	orrs	r3, r5
1000149a:	600b      	str	r3, [r1, #0]
    for (uint irq = 0; irq < NUM_IRQS; irq++) {
1000149c:	2a20      	cmp	r2, #32
1000149e:	d1ec      	bne.n	1000147a <irq_init_priorities+0xa>
        irq_set_priority(irq, PICO_DEFAULT_IRQ_PRIORITY);
    }
#endif
}
100014a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
100014a2:	46c0      	nop			; (mov r8, r8)
100014a4:	e000e400 	.word	0xe000e400

100014a8 <lock_init>:
    return (spin_lock_t *) (SIO_BASE + SIO_SPINLOCK0_OFFSET + lock_num * 4);
100014a8:	4b02      	ldr	r3, [pc, #8]	; (100014b4 <lock_init+0xc>)
100014aa:	469c      	mov	ip, r3
100014ac:	4461      	add	r1, ip
100014ae:	0089      	lsls	r1, r1, #2

#include "pico/lock_core.h"

void lock_init(lock_core_t *core, uint lock_num) {
    assert(lock_num >= 0 && lock_num < NUM_SPIN_LOCKS);
    core->spin_lock = spin_lock_instance(lock_num);
100014b0:	6001      	str	r1, [r0, #0]
}
100014b2:	4770      	bx	lr
100014b4:	34000040 	.word	0x34000040

100014b8 <core1_trampoline>:

// Default stack for core1 ... if multicore_launch_core1 is not included then .stack1 section will be garbage collected
static uint32_t __attribute__((section(".stack1"))) core1_stack[PICO_CORE1_STACK_SIZE / sizeof(uint32_t)];

static void __attribute__ ((naked)) core1_trampoline() {
    __asm("pop {r0, r1, pc}");
100014b8:	bd03      	pop	{r0, r1, pc}
100014ba:	46c0      	nop			; (mov r8, r8)

100014bc <core1_wrapper>:
}

int core1_wrapper(int (*entry)(void), void *stack_base) {
100014bc:	b510      	push	{r4, lr}
100014be:	0004      	movs	r4, r0
#if PICO_USE_STACK_GUARDS
    // install core1 stack guard
    runtime_install_stack_guard(stack_base);
#endif
    irq_init_priorities();
100014c0:	f7ff ffd6 	bl	10001470 <irq_init_priorities>
    return (*entry)();
100014c4:	47a0      	blx	r4
}
100014c6:	bd10      	pop	{r4, pc}

100014c8 <multicore_reset_core1>:
    io_rw_32 *power_off_clr = hw_clear_alias(power_off);

    // Hard-reset core 1.
    // Reading back confirms the core 1 reset is in the correct state, but also
    // forces APB IO bridges to fence on any internal store buffering
    *power_off_set = PSM_FRCE_OFF_PROC1_BITS;
100014c8:	2280      	movs	r2, #128	; 0x80
100014ca:	4b05      	ldr	r3, [pc, #20]	; (100014e0 <multicore_reset_core1+0x18>)
100014cc:	0252      	lsls	r2, r2, #9
    while (!(*power_off & PSM_FRCE_OFF_PROC1_BITS)) tight_loop_contents();
100014ce:	4905      	ldr	r1, [pc, #20]	; (100014e4 <multicore_reset_core1+0x1c>)
    *power_off_set = PSM_FRCE_OFF_PROC1_BITS;
100014d0:	601a      	str	r2, [r3, #0]
    while (!(*power_off & PSM_FRCE_OFF_PROC1_BITS)) tight_loop_contents();
100014d2:	680b      	ldr	r3, [r1, #0]
100014d4:	4213      	tst	r3, r2
100014d6:	d0fc      	beq.n	100014d2 <multicore_reset_core1+0xa>

    // Bring core 1 back out of reset. It will drain its own mailbox FIFO, then push
    // a 0 to our mailbox to tell us it has done this.
    *power_off_clr = PSM_FRCE_OFF_PROC1_BITS;
100014d8:	4b03      	ldr	r3, [pc, #12]	; (100014e8 <multicore_reset_core1+0x20>)
100014da:	601a      	str	r2, [r3, #0]
}
100014dc:	4770      	bx	lr
100014de:	46c0      	nop			; (mov r8, r8)
100014e0:	40012004 	.word	0x40012004
100014e4:	40010004 	.word	0x40010004
100014e8:	40013004 	.word	0x40013004

100014ec <multicore_launch_core1>:
    stack_ptr[1] = (uintptr_t) stack_bottom;
    stack_ptr[2] = (uintptr_t) core1_wrapper;
    multicore_launch_core1_raw(core1_trampoline, stack_ptr, scb_hw->vtor);
}

void multicore_launch_core1(void (*entry)(void)) {
100014ec:	b530      	push	{r4, r5, lr}
    extern char __StackOneBottom;
    uint32_t *stack_limit = (uint32_t *) &__StackOneBottom;
    // hack to reference core1_stack although that pointer is wrong.... core1_stack should always be <= stack_limit, if not boom!
    uint32_t *stack = core1_stack <= stack_limit ? stack_limit : (uint32_t *) -1;
100014ee:	4a22      	ldr	r2, [pc, #136]	; (10001578 <multicore_launch_core1+0x8c>)
100014f0:	4b22      	ldr	r3, [pc, #136]	; (1000157c <multicore_launch_core1+0x90>)
void multicore_launch_core1(void (*entry)(void)) {
100014f2:	b087      	sub	sp, #28
    uint32_t *stack = core1_stack <= stack_limit ? stack_limit : (uint32_t *) -1;
100014f4:	429a      	cmp	r2, r3
100014f6:	d201      	bcs.n	100014fc <multicore_launch_core1+0x10>
100014f8:	2201      	movs	r2, #1
100014fa:	4252      	negs	r2, r2
100014fc:	0013      	movs	r3, r2
    stack_ptr[0] = (uintptr_t) entry;
100014fe:	4920      	ldr	r1, [pc, #128]	; (10001580 <multicore_launch_core1+0x94>)
    multicore_launch_core1_with_stack(entry, stack, sizeof(core1_stack));
}

void multicore_launch_core1_raw(void (*entry)(void), uint32_t *sp, uint32_t vector_table) {
    uint32_t cmd_sequence[] = {0, 0, 1, (uintptr_t) vector_table, (uintptr_t) sp, (uintptr_t) entry};
10001500:	2400      	movs	r4, #0
    stack_ptr[0] = (uintptr_t) entry;
10001502:	5050      	str	r0, [r2, r1]
    stack_ptr[1] = (uintptr_t) stack_bottom;
10001504:	3104      	adds	r1, #4
10001506:	5052      	str	r2, [r2, r1]
    stack_ptr[2] = (uintptr_t) core1_wrapper;
10001508:	4a1e      	ldr	r2, [pc, #120]	; (10001584 <multicore_launch_core1+0x98>)
1000150a:	491f      	ldr	r1, [pc, #124]	; (10001588 <multicore_launch_core1+0x9c>)
    uint32_t cmd_sequence[] = {0, 0, 1, (uintptr_t) vector_table, (uintptr_t) sp, (uintptr_t) entry};
1000150c:	2000      	movs	r0, #0
    stack_ptr[2] = (uintptr_t) core1_wrapper;
1000150e:	5099      	str	r1, [r3, r2]
    multicore_launch_core1_raw(core1_trampoline, stack_ptr, scb_hw->vtor);
10001510:	4a1e      	ldr	r2, [pc, #120]	; (1000158c <multicore_launch_core1+0xa0>)
    uint32_t cmd_sequence[] = {0, 0, 1, (uintptr_t) vector_table, (uintptr_t) sp, (uintptr_t) entry};
10001512:	2100      	movs	r1, #0
    multicore_launch_core1_raw(core1_trampoline, stack_ptr, scb_hw->vtor);
10001514:	6892      	ldr	r2, [r2, #8]
    uint32_t cmd_sequence[] = {0, 0, 1, (uintptr_t) vector_table, (uintptr_t) sp, (uintptr_t) entry};
10001516:	9000      	str	r0, [sp, #0]
10001518:	9101      	str	r1, [sp, #4]
1000151a:	9203      	str	r2, [sp, #12]
    stack_ptr -= 3;
1000151c:	4a18      	ldr	r2, [pc, #96]	; (10001580 <multicore_launch_core1+0x94>)
    uint32_t cmd_sequence[] = {0, 0, 1, (uintptr_t) vector_table, (uintptr_t) sp, (uintptr_t) entry};
1000151e:	2101      	movs	r1, #1
    stack_ptr -= 3;
10001520:	4694      	mov	ip, r2
10001522:	4463      	add	r3, ip
    uint32_t cmd_sequence[] = {0, 0, 1, (uintptr_t) vector_table, (uintptr_t) sp, (uintptr_t) entry};
10001524:	9304      	str	r3, [sp, #16]
10001526:	4b1a      	ldr	r3, [pc, #104]	; (10001590 <multicore_launch_core1+0xa4>)

    uint seq = 0;
10001528:	2500      	movs	r5, #0
    uint32_t cmd_sequence[] = {0, 0, 1, (uintptr_t) vector_table, (uintptr_t) sp, (uintptr_t) entry};
1000152a:	9305      	str	r3, [sp, #20]
 *  \ingroup multicore_fifo
 *
 * \return true if the FIFO has data in it, false otherwise
 */
static inline bool multicore_fifo_rvalid() {
    return !!(sio_hw->fifo_st & SIO_FIFO_ST_VLD_BITS);
1000152c:	23d0      	movs	r3, #208	; 0xd0
1000152e:	9102      	str	r1, [sp, #8]
10001530:	061b      	lsls	r3, r3, #24
 *  \ingroup multicore_fifo
 *
 *  @return true if the FIFO is full, false otherwise
 */
static inline bool multicore_fifo_wready() {
    return !!(sio_hw->fifo_st & SIO_FIFO_ST_RDY_BITS);
10001532:	3002      	adds	r0, #2
    do {
        uint cmd = cmd_sequence[seq];
        // we drain before sending a 0
        if (!cmd) {
10001534:	2c00      	cmp	r4, #0
10001536:	d014      	beq.n	10001562 <multicore_launch_core1+0x76>
10001538:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    while (!multicore_fifo_wready())
1000153a:	4210      	tst	r0, r2
1000153c:	d0fc      	beq.n	10001538 <multicore_launch_core1+0x4c>
    sio_hw->fifo_wr = data;
1000153e:	655c      	str	r4, [r3, #84]	; 0x54
    __asm volatile ("sev");
10001540:	bf40      	sev
    return !!(sio_hw->fifo_st & SIO_FIFO_ST_VLD_BITS);
10001542:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    while (!multicore_fifo_rvalid())
10001544:	4211      	tst	r1, r2
10001546:	d103      	bne.n	10001550 <multicore_launch_core1+0x64>
    __asm volatile ("wfe");
10001548:	bf20      	wfe
1000154a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
1000154c:	4211      	tst	r1, r2
1000154e:	d0fb      	beq.n	10001548 <multicore_launch_core1+0x5c>
    return sio_hw->fifo_rd;
10001550:	6d9a      	ldr	r2, [r3, #88]	; 0x58
            __sev(); // core 1 may be waiting for fifo space
        }
        multicore_fifo_push_blocking(cmd);
        uint32_t response = multicore_fifo_pop_blocking();
        // move to next state on correct response otherwise start over
        seq = cmd == response ? seq + 1 : 0;
10001552:	42a2      	cmp	r2, r4
10001554:	d00a      	beq.n	1000156c <multicore_launch_core1+0x80>
10001556:	2500      	movs	r5, #0
        uint cmd = cmd_sequence[seq];
10001558:	466c      	mov	r4, sp
1000155a:	00aa      	lsls	r2, r5, #2
1000155c:	58a4      	ldr	r4, [r4, r2]
1000155e:	e7e9      	b.n	10001534 <multicore_launch_core1+0x48>
 *  \ingroup multicore_fifo
 *
 */
static inline void multicore_fifo_drain() {
    while (multicore_fifo_rvalid())
        (void) sio_hw->fifo_rd;
10001560:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    return !!(sio_hw->fifo_st & SIO_FIFO_ST_VLD_BITS);
10001562:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    while (multicore_fifo_rvalid())
10001564:	4211      	tst	r1, r2
10001566:	d1fb      	bne.n	10001560 <multicore_launch_core1+0x74>
    __asm volatile ("sev");
10001568:	bf40      	sev
    while (!multicore_fifo_wready())
1000156a:	e7e5      	b.n	10001538 <multicore_launch_core1+0x4c>
        seq = cmd == response ? seq + 1 : 0;
1000156c:	3501      	adds	r5, #1
    } while (seq < count_of(cmd_sequence));
1000156e:	2d05      	cmp	r5, #5
10001570:	d9f2      	bls.n	10001558 <multicore_launch_core1+0x6c>
}
10001572:	b007      	add	sp, #28
10001574:	bd30      	pop	{r4, r5, pc}
10001576:	46c0      	nop			; (mov r8, r8)
10001578:	20040800 	.word	0x20040800
1000157c:	20040000 	.word	0x20040000
10001580:	000007f4 	.word	0x000007f4
10001584:	000007fc 	.word	0x000007fc
10001588:	100014bd 	.word	0x100014bd
1000158c:	e000ed00 	.word	0xe000ed00
10001590:	100014b9 	.word	0x100014b9

10001594 <mutex_init>:

#if !PICO_NO_HARDWARE
static_assert(sizeof(mutex_t) == 8, "");
#endif

void mutex_init(mutex_t *mtx) {
10001594:	b510      	push	{r4, lr}
10001596:	0004      	movs	r4, r0
    lock_init(&mtx->core, next_striped_spin_lock_num());
10001598:	f000 ff10 	bl	100023bc <next_striped_spin_lock_num>
1000159c:	0001      	movs	r1, r0
1000159e:	0020      	movs	r0, r4
100015a0:	f7ff ff82 	bl	100014a8 <lock_init>
    mtx->owner = -1;
100015a4:	23ff      	movs	r3, #255	; 0xff
100015a6:	7123      	strb	r3, [r4, #4]
    __asm volatile ("dmb");
100015a8:	f3bf 8f5f 	dmb	sy
    __mem_fence_release();
}
100015ac:	bd10      	pop	{r4, pc}
100015ae:	46c0      	nop			; (mov r8, r8)

100015b0 <ph_merge_nodes>:
        c->sibling = n->child;
        n->child = child_id;
    }
}

static pheap_node_id_t ph_merge_nodes(pheap_t *heap, pheap_node_id_t a, pheap_node_id_t b) {
100015b0:	b570      	push	{r4, r5, r6, lr}
100015b2:	0005      	movs	r5, r0
100015b4:	0014      	movs	r4, r2
100015b6:	0016      	movs	r6, r2
    if (!a) return b;
100015b8:	2900      	cmp	r1, #0
100015ba:	d015      	beq.n	100015e8 <ph_merge_nodes+0x38>
    if (!b) return a;
100015bc:	000c      	movs	r4, r1
100015be:	2a00      	cmp	r2, #0
100015c0:	d012      	beq.n	100015e8 <ph_merge_nodes+0x38>
    if (heap->comparator(heap->user_data, a, b)) {
100015c2:	6880      	ldr	r0, [r0, #8]
100015c4:	686b      	ldr	r3, [r5, #4]
100015c6:	4798      	blx	r3
100015c8:	6829      	ldr	r1, [r5, #0]
100015ca:	2800      	cmp	r0, #0
100015cc:	d00e      	beq.n	100015ec <ph_merge_nodes+0x3c>
    return heap->nodes + id - 1;
100015ce:	0073      	lsls	r3, r6, #1
100015d0:	199b      	adds	r3, r3, r6
100015d2:	0062      	lsls	r2, r4, #1
100015d4:	3b03      	subs	r3, #3
100015d6:	1912      	adds	r2, r2, r4
100015d8:	18cb      	adds	r3, r1, r3
100015da:	3a03      	subs	r2, #3
    c->parent = parent_id;
100015dc:	709c      	strb	r4, [r3, #2]
    return heap->nodes + id - 1;
100015de:	1888      	adds	r0, r1, r2
    if (!n->child) {
100015e0:	5c8a      	ldrb	r2, [r1, r2]
100015e2:	2a00      	cmp	r2, #0
100015e4:	d115      	bne.n	10001612 <ph_merge_nodes+0x62>
        n->child = child_id;
100015e6:	7006      	strb	r6, [r0, #0]
        return a;
    } else {
        ph_add_child_node(heap, b, a);
        return b;
    }
}
100015e8:	0020      	movs	r0, r4
100015ea:	bd70      	pop	{r4, r5, r6, pc}
    return heap->nodes + id - 1;
100015ec:	0063      	lsls	r3, r4, #1
100015ee:	191b      	adds	r3, r3, r4
100015f0:	0072      	lsls	r2, r6, #1
100015f2:	3b03      	subs	r3, #3
100015f4:	1992      	adds	r2, r2, r6
100015f6:	18cb      	adds	r3, r1, r3
100015f8:	3a03      	subs	r2, #3
    c->parent = parent_id;
100015fa:	709e      	strb	r6, [r3, #2]
    return heap->nodes + id - 1;
100015fc:	1888      	adds	r0, r1, r2
    if (!n->child) {
100015fe:	5c8a      	ldrb	r2, [r1, r2]
10001600:	2a00      	cmp	r2, #0
10001602:	d102      	bne.n	1000160a <ph_merge_nodes+0x5a>
        n->child = child_id;
10001604:	7004      	strb	r4, [r0, #0]
10001606:	0034      	movs	r4, r6
10001608:	e7ee      	b.n	100015e8 <ph_merge_nodes+0x38>
        c->sibling = n->child;
1000160a:	705a      	strb	r2, [r3, #1]
        n->child = child_id;
1000160c:	7004      	strb	r4, [r0, #0]
1000160e:	0034      	movs	r4, r6
10001610:	e7ea      	b.n	100015e8 <ph_merge_nodes+0x38>
        c->sibling = n->child;
10001612:	705a      	strb	r2, [r3, #1]
        n->child = child_id;
10001614:	7006      	strb	r6, [r0, #0]
10001616:	e7e7      	b.n	100015e8 <ph_merge_nodes+0x38>

10001618 <ph_create>:

#include <stdio.h>
#include <stdlib.h>
#include "pico/util/pheap.h"

pheap_t *ph_create(uint max_nodes, pheap_comparator comparator, void *user_data) {
10001618:	b5f0      	push	{r4, r5, r6, r7, lr}
1000161a:	46c6      	mov	lr, r8
1000161c:	0005      	movs	r5, r0
1000161e:	000f      	movs	r7, r1
10001620:	b500      	push	{lr}
    invalid_params_if(PHEAP, !max_nodes || max_nodes >= (1u << sizeof(pheap_node_id_t)));
    pheap_t *heap = calloc(1, sizeof(pheap_t));
10001622:	2110      	movs	r1, #16
10001624:	2001      	movs	r0, #1
pheap_t *ph_create(uint max_nodes, pheap_comparator comparator, void *user_data) {
10001626:	0016      	movs	r6, r2
    pheap_t *heap = calloc(1, sizeof(pheap_t));
10001628:	f000 f9ac 	bl	10001984 <__wrap_calloc>
    heap->max_nodes = max_nodes;
1000162c:	b2eb      	uxtb	r3, r5
    pheap_t *heap = calloc(1, sizeof(pheap_t));
1000162e:	0004      	movs	r4, r0
    heap->max_nodes = max_nodes;
10001630:	7303      	strb	r3, [r0, #12]
    heap->comparator = comparator;
    heap->nodes = calloc(max_nodes, sizeof(pheap_node_t));
10001632:	2103      	movs	r1, #3
    heap->comparator = comparator;
10001634:	6047      	str	r7, [r0, #4]
    heap->nodes = calloc(max_nodes, sizeof(pheap_node_t));
10001636:	0028      	movs	r0, r5
    heap->max_nodes = max_nodes;
10001638:	4698      	mov	r8, r3
    heap->nodes = calloc(max_nodes, sizeof(pheap_node_t));
1000163a:	f000 f9a3 	bl	10001984 <__wrap_calloc>
    ph_clear(heap);
    return heap;
}

void ph_clear(pheap_t *heap) {
    heap->root_id = 0;
1000163e:	2300      	movs	r3, #0
10001640:	7363      	strb	r3, [r4, #13]
    heap->free_head_id = 1;
10001642:	3301      	adds	r3, #1
10001644:	73a3      	strb	r3, [r4, #14]
    heap->free_tail_id = heap->max_nodes;
10001646:	4643      	mov	r3, r8
10001648:	21ff      	movs	r1, #255	; 0xff
1000164a:	73e3      	strb	r3, [r4, #15]
    for(uint i = 1; i < heap->max_nodes; i++) {
1000164c:	23fe      	movs	r3, #254	; 0xfe
    heap->nodes = calloc(max_nodes, sizeof(pheap_node_t));
1000164e:	6020      	str	r0, [r4, #0]
    heap->user_data = user_data;
10001650:	60a6      	str	r6, [r4, #8]
    for(uint i = 1; i < heap->max_nodes; i++) {
10001652:	4029      	ands	r1, r5
10001654:	422b      	tst	r3, r5
10001656:	d006      	beq.n	10001666 <ph_create+0x4e>
10001658:	1c42      	adds	r2, r0, #1
1000165a:	3bfd      	subs	r3, #253	; 0xfd
        ph_get_node(heap, i)->sibling = i + 1;
1000165c:	3301      	adds	r3, #1
1000165e:	7013      	strb	r3, [r2, #0]
    for(uint i = 1; i < heap->max_nodes; i++) {
10001660:	3203      	adds	r2, #3
10001662:	428b      	cmp	r3, r1
10001664:	d3fa      	bcc.n	1000165c <ph_create+0x44>
    }
    ph_get_node(heap, heap->max_nodes)->sibling = 0;
10001666:	004b      	lsls	r3, r1, #1
10001668:	1859      	adds	r1, r3, r1
1000166a:	2300      	movs	r3, #0
1000166c:	1840      	adds	r0, r0, r1
1000166e:	3803      	subs	r0, #3
10001670:	7043      	strb	r3, [r0, #1]
}
10001672:	0020      	movs	r0, r4
10001674:	bc80      	pop	{r7}
10001676:	46b8      	mov	r8, r7
10001678:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000167a:	46c0      	nop			; (mov r8, r8)

1000167c <ph_merge_two_pass>:
void ph_destroy(pheap_t *heap) {
    free(heap->nodes);
    free(heap);
}

pheap_node_id_t ph_merge_two_pass(pheap_t *heap, pheap_node_id_t id) {
1000167c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000167e:	46ce      	mov	lr, r9
10001680:	4647      	mov	r7, r8
10001682:	0006      	movs	r6, r0
10001684:	000c      	movs	r4, r1
10001686:	b580      	push	{r7, lr}
    if (!id || !ph_get_node(heap, id)->sibling) {
10001688:	2900      	cmp	r1, #0
1000168a:	d007      	beq.n	1000169c <ph_merge_two_pass+0x20>
    return heap->nodes + id - 1;
1000168c:	004d      	lsls	r5, r1, #1
1000168e:	6803      	ldr	r3, [r0, #0]
10001690:	186d      	adds	r5, r5, r1
10001692:	3d03      	subs	r5, #3
10001694:	195a      	adds	r2, r3, r5
10001696:	7857      	ldrb	r7, [r2, #1]
10001698:	2f00      	cmp	r7, #0
1000169a:	d104      	bne.n	100016a6 <ph_merge_two_pass+0x2a>
        b = ph_get_node(heap, id)->sibling;
        new_node = ph_get_node(heap, b)->sibling;
        ph_get_node(heap, a)->sibling = ph_get_node(heap, b)->sibling = 0;
        return ph_merge_nodes(heap, ph_merge_nodes(heap, a, b), ph_merge_two_pass(heap, new_node));
    }
}
1000169c:	0020      	movs	r0, r4
1000169e:	bcc0      	pop	{r6, r7}
100016a0:	46b9      	mov	r9, r7
100016a2:	46b0      	mov	r8, r6
100016a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100016a6:	0079      	lsls	r1, r7, #1
100016a8:	19c9      	adds	r1, r1, r7
100016aa:	3903      	subs	r1, #3
100016ac:	4688      	mov	r8, r1
100016ae:	4443      	add	r3, r8
        new_node = ph_get_node(heap, b)->sibling;
100016b0:	7859      	ldrb	r1, [r3, #1]
100016b2:	4689      	mov	r9, r1
        ph_get_node(heap, a)->sibling = ph_get_node(heap, b)->sibling = 0;
100016b4:	2100      	movs	r1, #0
100016b6:	7059      	strb	r1, [r3, #1]
100016b8:	7051      	strb	r1, [r2, #1]
    if (heap->comparator(heap->user_data, a, b)) {
100016ba:	6873      	ldr	r3, [r6, #4]
100016bc:	003a      	movs	r2, r7
100016be:	0021      	movs	r1, r4
100016c0:	6880      	ldr	r0, [r0, #8]
100016c2:	4798      	blx	r3
100016c4:	6833      	ldr	r3, [r6, #0]
100016c6:	2800      	cmp	r0, #0
100016c8:	d014      	beq.n	100016f4 <ph_merge_two_pass+0x78>
    return heap->nodes + id - 1;
100016ca:	4642      	mov	r2, r8
100016cc:	189a      	adds	r2, r3, r2
    c->parent = parent_id;
100016ce:	7094      	strb	r4, [r2, #2]
    return heap->nodes + id - 1;
100016d0:	1959      	adds	r1, r3, r5
    if (!n->child) {
100016d2:	5d5b      	ldrb	r3, [r3, r5]
100016d4:	2b00      	cmp	r3, #0
100016d6:	d000      	beq.n	100016da <ph_merge_two_pass+0x5e>
        c->sibling = n->child;
100016d8:	7053      	strb	r3, [r2, #1]
        n->child = child_id;
100016da:	700f      	strb	r7, [r1, #0]
100016dc:	0027      	movs	r7, r4
        return ph_merge_nodes(heap, ph_merge_nodes(heap, a, b), ph_merge_two_pass(heap, new_node));
100016de:	4649      	mov	r1, r9
100016e0:	0030      	movs	r0, r6
100016e2:	f7ff ffcb 	bl	1000167c <ph_merge_two_pass>
100016e6:	0039      	movs	r1, r7
100016e8:	0002      	movs	r2, r0
100016ea:	0030      	movs	r0, r6
100016ec:	f7ff ff60 	bl	100015b0 <ph_merge_nodes>
100016f0:	0004      	movs	r4, r0
100016f2:	e7d3      	b.n	1000169c <ph_merge_two_pass+0x20>
    return heap->nodes + id - 1;
100016f4:	4642      	mov	r2, r8
    if (!n->child) {
100016f6:	4641      	mov	r1, r8
    return heap->nodes + id - 1;
100016f8:	195d      	adds	r5, r3, r5
    c->parent = parent_id;
100016fa:	70af      	strb	r7, [r5, #2]
    return heap->nodes + id - 1;
100016fc:	189a      	adds	r2, r3, r2
    if (!n->child) {
100016fe:	5c5b      	ldrb	r3, [r3, r1]
10001700:	2b00      	cmp	r3, #0
10001702:	d000      	beq.n	10001706 <ph_merge_two_pass+0x8a>
        c->sibling = n->child;
10001704:	706b      	strb	r3, [r5, #1]
        n->child = child_id;
10001706:	7014      	strb	r4, [r2, #0]
10001708:	e7e9      	b.n	100016de <ph_merge_two_pass+0x62>
1000170a:	46c0      	nop			; (mov r8, r8)

1000170c <ph_remove_any_head>:

static pheap_node_id_t ph_remove_any_head(pheap_t *heap, pheap_node_id_t root_id, bool reserve) {
1000170c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000170e:	4657      	mov	r7, sl
10001710:	4645      	mov	r5, r8
10001712:	46de      	mov	lr, fp
10001714:	464e      	mov	r6, r9
10001716:	b5e0      	push	{r5, r6, r7, lr}
10001718:	000d      	movs	r5, r1
    return heap->nodes + id - 1;
1000171a:	006b      	lsls	r3, r5, #1
1000171c:	6801      	ldr	r1, [r0, #0]
1000171e:	195b      	adds	r3, r3, r5
10001720:	1edf      	subs	r7, r3, #3
10001722:	0004      	movs	r4, r0
    assert(root_id);
//    printf("Removing head %d (parent %d sibling %d)\n", root_id, ph_get_node(heap, root_id)->parent, ph_get_node(heap, root_id)->sibling);
    assert(!ph_get_node(heap, root_id)->sibling);
    assert(!ph_get_node(heap, root_id)->parent);
    pheap_node_id_t new_root_id = ph_merge_two_pass(heap, ph_get_node(heap, root_id)->child);
10001724:	5dc8      	ldrb	r0, [r1, r7]
static pheap_node_id_t ph_remove_any_head(pheap_t *heap, pheap_node_id_t root_id, bool reserve) {
10001726:	b083      	sub	sp, #12
10001728:	9201      	str	r2, [sp, #4]
1000172a:	19ca      	adds	r2, r1, r7
    if (!id || !ph_get_node(heap, id)->sibling) {
1000172c:	2800      	cmp	r0, #0
1000172e:	d04c      	beq.n	100017ca <ph_remove_any_head+0xbe>
10001730:	0043      	lsls	r3, r0, #1
10001732:	181b      	adds	r3, r3, r0
10001734:	3b03      	subs	r3, #3
10001736:	18cb      	adds	r3, r1, r3
10001738:	785e      	ldrb	r6, [r3, #1]
1000173a:	46b4      	mov	ip, r6
1000173c:	2e00      	cmp	r6, #0
1000173e:	d116      	bne.n	1000176e <ph_remove_any_head+0x62>
    if (!reserve) {
10001740:	9e01      	ldr	r6, [sp, #4]
10001742:	2e00      	cmp	r6, #0
10001744:	d13e      	bne.n	100017c4 <ph_remove_any_head+0xb8>
        if (heap->free_tail_id) {
10001746:	7be6      	ldrb	r6, [r4, #15]
10001748:	2e00      	cmp	r6, #0
1000174a:	d004      	beq.n	10001756 <ph_remove_any_head+0x4a>
            ph_get_node(heap, heap->free_tail_id)->sibling = root_id;
1000174c:	0073      	lsls	r3, r6, #1
1000174e:	199b      	adds	r3, r3, r6
10001750:	18cb      	adds	r3, r1, r3
10001752:	3b03      	subs	r3, #3
10001754:	705d      	strb	r5, [r3, #1]
        }
        heap->free_tail_id = root_id;
10001756:	73e5      	strb	r5, [r4, #15]
    }
    if (new_root_id) ph_get_node(heap, new_root_id)->parent = 0;
10001758:	2800      	cmp	r0, #0
1000175a:	d12f      	bne.n	100017bc <ph_remove_any_head+0xb0>
    ph_get_node(heap, root_id)->sibling = 0;
1000175c:	2300      	movs	r3, #0
1000175e:	7053      	strb	r3, [r2, #1]
    return new_root_id;
}
10001760:	b003      	add	sp, #12
10001762:	bcf0      	pop	{r4, r5, r6, r7}
10001764:	46bb      	mov	fp, r7
10001766:	46b2      	mov	sl, r6
10001768:	46a9      	mov	r9, r5
1000176a:	46a0      	mov	r8, r4
1000176c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000176e:	0072      	lsls	r2, r6, #1
10001770:	4462      	add	r2, ip
10001772:	3a03      	subs	r2, #3
10001774:	1889      	adds	r1, r1, r2
        new_node = ph_get_node(heap, b)->sibling;
10001776:	784a      	ldrb	r2, [r1, #1]
10001778:	4690      	mov	r8, r2
        ph_get_node(heap, a)->sibling = ph_get_node(heap, b)->sibling = 0;
1000177a:	2200      	movs	r2, #0
1000177c:	704a      	strb	r2, [r1, #1]
1000177e:	4691      	mov	r9, r2
10001780:	705a      	strb	r2, [r3, #1]
        return ph_merge_nodes(heap, ph_merge_nodes(heap, a, b), ph_merge_two_pass(heap, new_node));
10001782:	0001      	movs	r1, r0
10001784:	0032      	movs	r2, r6
10001786:	0020      	movs	r0, r4
10001788:	f7ff ff12 	bl	100015b0 <ph_merge_nodes>
    if (!id || !ph_get_node(heap, id)->sibling) {
1000178c:	4643      	mov	r3, r8
        return ph_merge_nodes(heap, ph_merge_nodes(heap, a, b), ph_merge_two_pass(heap, new_node));
1000178e:	4682      	mov	sl, r0
    if (!id || !ph_get_node(heap, id)->sibling) {
10001790:	2b00      	cmp	r3, #0
10001792:	d007      	beq.n	100017a4 <ph_remove_any_head+0x98>
10001794:	005b      	lsls	r3, r3, #1
10001796:	6821      	ldr	r1, [r4, #0]
10001798:	4443      	add	r3, r8
1000179a:	3b03      	subs	r3, #3
1000179c:	18cb      	adds	r3, r1, r3
1000179e:	785a      	ldrb	r2, [r3, #1]
100017a0:	2a00      	cmp	r2, #0
100017a2:	d116      	bne.n	100017d2 <ph_remove_any_head+0xc6>
        return ph_merge_nodes(heap, ph_merge_nodes(heap, a, b), ph_merge_two_pass(heap, new_node));
100017a4:	4642      	mov	r2, r8
100017a6:	4651      	mov	r1, sl
100017a8:	0020      	movs	r0, r4
100017aa:	f7ff ff01 	bl	100015b0 <ph_merge_nodes>
100017ae:	6821      	ldr	r1, [r4, #0]
    if (!reserve) {
100017b0:	9b01      	ldr	r3, [sp, #4]
100017b2:	19ca      	adds	r2, r1, r7
100017b4:	2b00      	cmp	r3, #0
100017b6:	d0c6      	beq.n	10001746 <ph_remove_any_head+0x3a>
    if (new_root_id) ph_get_node(heap, new_root_id)->parent = 0;
100017b8:	2800      	cmp	r0, #0
100017ba:	d0cf      	beq.n	1000175c <ph_remove_any_head+0x50>
100017bc:	0043      	lsls	r3, r0, #1
100017be:	181b      	adds	r3, r3, r0
100017c0:	3b03      	subs	r3, #3
100017c2:	18cb      	adds	r3, r1, r3
100017c4:	2100      	movs	r1, #0
100017c6:	7099      	strb	r1, [r3, #2]
100017c8:	e7c8      	b.n	1000175c <ph_remove_any_head+0x50>
    if (!reserve) {
100017ca:	9b01      	ldr	r3, [sp, #4]
100017cc:	2b00      	cmp	r3, #0
100017ce:	d1c5      	bne.n	1000175c <ph_remove_any_head+0x50>
100017d0:	e7b9      	b.n	10001746 <ph_remove_any_head+0x3a>
100017d2:	0050      	lsls	r0, r2, #1
100017d4:	1880      	adds	r0, r0, r2
100017d6:	3803      	subs	r0, #3
100017d8:	1809      	adds	r1, r1, r0
        new_node = ph_get_node(heap, b)->sibling;
100017da:	7848      	ldrb	r0, [r1, #1]
100017dc:	4683      	mov	fp, r0
        ph_get_node(heap, a)->sibling = ph_get_node(heap, b)->sibling = 0;
100017de:	4648      	mov	r0, r9
100017e0:	7048      	strb	r0, [r1, #1]
100017e2:	7058      	strb	r0, [r3, #1]
        return ph_merge_nodes(heap, ph_merge_nodes(heap, a, b), ph_merge_two_pass(heap, new_node));
100017e4:	4641      	mov	r1, r8
100017e6:	0020      	movs	r0, r4
100017e8:	f7ff fee2 	bl	100015b0 <ph_merge_nodes>
100017ec:	4659      	mov	r1, fp
100017ee:	4680      	mov	r8, r0
100017f0:	0020      	movs	r0, r4
100017f2:	f7ff ff43 	bl	1000167c <ph_merge_two_pass>
100017f6:	4641      	mov	r1, r8
100017f8:	0002      	movs	r2, r0
100017fa:	0020      	movs	r0, r4
100017fc:	f7ff fed8 	bl	100015b0 <ph_merge_nodes>
10001800:	4680      	mov	r8, r0
10001802:	e7cf      	b.n	100017a4 <ph_remove_any_head+0x98>

10001804 <ph_remove_head_reserve>:

pheap_node_id_t ph_remove_head_reserve(pheap_t *heap, bool reserve) {
10001804:	b5f0      	push	{r4, r5, r6, r7, lr}
10001806:	4657      	mov	r7, sl
10001808:	4645      	mov	r5, r8
1000180a:	46de      	mov	lr, fp
1000180c:	464e      	mov	r6, r9
1000180e:	b5e0      	push	{r5, r6, r7, lr}
10001810:	b083      	sub	sp, #12
10001812:	9101      	str	r1, [sp, #4]
    heap->root_id = ph_merge_nodes(heap, heap->root_id, id);
    return heap->root_id;
}

static inline pheap_node_id_t ph_peek_head(pheap_t *heap) {
    return heap->root_id;
10001814:	7b45      	ldrb	r5, [r0, #13]
10001816:	0004      	movs	r4, r0
    return heap->nodes + id - 1;
10001818:	006b      	lsls	r3, r5, #1
1000181a:	6800      	ldr	r0, [r0, #0]
1000181c:	195b      	adds	r3, r3, r5
1000181e:	1edf      	subs	r7, r3, #3
    pheap_node_id_t new_root_id = ph_merge_two_pass(heap, ph_get_node(heap, root_id)->child);
10001820:	5dc1      	ldrb	r1, [r0, r7]
10001822:	19c2      	adds	r2, r0, r7
    if (!id || !ph_get_node(heap, id)->sibling) {
10001824:	2900      	cmp	r1, #0
10001826:	d04e      	beq.n	100018c6 <ph_remove_head_reserve+0xc2>
10001828:	004b      	lsls	r3, r1, #1
1000182a:	185b      	adds	r3, r3, r1
1000182c:	3b03      	subs	r3, #3
1000182e:	18c3      	adds	r3, r0, r3
10001830:	785e      	ldrb	r6, [r3, #1]
10001832:	46b4      	mov	ip, r6
10001834:	2e00      	cmp	r6, #0
10001836:	d118      	bne.n	1000186a <ph_remove_head_reserve+0x66>
    if (!reserve) {
10001838:	9e01      	ldr	r6, [sp, #4]
1000183a:	2e00      	cmp	r6, #0
1000183c:	d140      	bne.n	100018c0 <ph_remove_head_reserve+0xbc>
        if (heap->free_tail_id) {
1000183e:	7be6      	ldrb	r6, [r4, #15]
10001840:	2e00      	cmp	r6, #0
10001842:	d004      	beq.n	1000184e <ph_remove_head_reserve+0x4a>
            ph_get_node(heap, heap->free_tail_id)->sibling = root_id;
10001844:	0073      	lsls	r3, r6, #1
10001846:	199b      	adds	r3, r3, r6
10001848:	18c3      	adds	r3, r0, r3
1000184a:	3b03      	subs	r3, #3
1000184c:	705d      	strb	r5, [r3, #1]
        heap->free_tail_id = root_id;
1000184e:	73e5      	strb	r5, [r4, #15]
    if (new_root_id) ph_get_node(heap, new_root_id)->parent = 0;
10001850:	2900      	cmp	r1, #0
10001852:	d131      	bne.n	100018b8 <ph_remove_head_reserve+0xb4>
    ph_get_node(heap, root_id)->sibling = 0;
10001854:	2300      	movs	r3, #0
    pheap_node_id_t old_root_id = ph_peek_head(heap);
    heap->root_id = ph_remove_any_head(heap, old_root_id, reserve);
    return old_root_id;
}
10001856:	0028      	movs	r0, r5
    ph_get_node(heap, root_id)->sibling = 0;
10001858:	7053      	strb	r3, [r2, #1]
    heap->root_id = ph_remove_any_head(heap, old_root_id, reserve);
1000185a:	7361      	strb	r1, [r4, #13]
}
1000185c:	b003      	add	sp, #12
1000185e:	bcf0      	pop	{r4, r5, r6, r7}
10001860:	46bb      	mov	fp, r7
10001862:	46b2      	mov	sl, r6
10001864:	46a9      	mov	r9, r5
10001866:	46a0      	mov	r8, r4
10001868:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000186a:	0072      	lsls	r2, r6, #1
1000186c:	4462      	add	r2, ip
1000186e:	3a03      	subs	r2, #3
10001870:	1880      	adds	r0, r0, r2
        new_node = ph_get_node(heap, b)->sibling;
10001872:	7842      	ldrb	r2, [r0, #1]
10001874:	4690      	mov	r8, r2
        ph_get_node(heap, a)->sibling = ph_get_node(heap, b)->sibling = 0;
10001876:	2200      	movs	r2, #0
10001878:	7042      	strb	r2, [r0, #1]
1000187a:	4691      	mov	r9, r2
1000187c:	705a      	strb	r2, [r3, #1]
        return ph_merge_nodes(heap, ph_merge_nodes(heap, a, b), ph_merge_two_pass(heap, new_node));
1000187e:	0020      	movs	r0, r4
10001880:	0032      	movs	r2, r6
10001882:	f7ff fe95 	bl	100015b0 <ph_merge_nodes>
    if (!id || !ph_get_node(heap, id)->sibling) {
10001886:	4643      	mov	r3, r8
        return ph_merge_nodes(heap, ph_merge_nodes(heap, a, b), ph_merge_two_pass(heap, new_node));
10001888:	4682      	mov	sl, r0
    if (!id || !ph_get_node(heap, id)->sibling) {
1000188a:	2b00      	cmp	r3, #0
1000188c:	d007      	beq.n	1000189e <ph_remove_head_reserve+0x9a>
1000188e:	005b      	lsls	r3, r3, #1
10001890:	6821      	ldr	r1, [r4, #0]
10001892:	4443      	add	r3, r8
10001894:	3b03      	subs	r3, #3
10001896:	18cb      	adds	r3, r1, r3
10001898:	785a      	ldrb	r2, [r3, #1]
1000189a:	2a00      	cmp	r2, #0
1000189c:	d117      	bne.n	100018ce <ph_remove_head_reserve+0xca>
        return ph_merge_nodes(heap, ph_merge_nodes(heap, a, b), ph_merge_two_pass(heap, new_node));
1000189e:	4642      	mov	r2, r8
100018a0:	4651      	mov	r1, sl
100018a2:	0020      	movs	r0, r4
100018a4:	f7ff fe84 	bl	100015b0 <ph_merge_nodes>
    if (!reserve) {
100018a8:	9b01      	ldr	r3, [sp, #4]
        return ph_merge_nodes(heap, ph_merge_nodes(heap, a, b), ph_merge_two_pass(heap, new_node));
100018aa:	0001      	movs	r1, r0
100018ac:	6820      	ldr	r0, [r4, #0]
100018ae:	19c2      	adds	r2, r0, r7
    if (!reserve) {
100018b0:	2b00      	cmp	r3, #0
100018b2:	d0c4      	beq.n	1000183e <ph_remove_head_reserve+0x3a>
    if (new_root_id) ph_get_node(heap, new_root_id)->parent = 0;
100018b4:	2900      	cmp	r1, #0
100018b6:	d0cd      	beq.n	10001854 <ph_remove_head_reserve+0x50>
100018b8:	004b      	lsls	r3, r1, #1
100018ba:	185b      	adds	r3, r3, r1
100018bc:	3b03      	subs	r3, #3
100018be:	18c3      	adds	r3, r0, r3
100018c0:	2000      	movs	r0, #0
100018c2:	7098      	strb	r0, [r3, #2]
100018c4:	e7c6      	b.n	10001854 <ph_remove_head_reserve+0x50>
    if (!reserve) {
100018c6:	9b01      	ldr	r3, [sp, #4]
100018c8:	2b00      	cmp	r3, #0
100018ca:	d1c3      	bne.n	10001854 <ph_remove_head_reserve+0x50>
100018cc:	e7b7      	b.n	1000183e <ph_remove_head_reserve+0x3a>
100018ce:	0050      	lsls	r0, r2, #1
100018d0:	1880      	adds	r0, r0, r2
100018d2:	3803      	subs	r0, #3
100018d4:	1809      	adds	r1, r1, r0
        new_node = ph_get_node(heap, b)->sibling;
100018d6:	7848      	ldrb	r0, [r1, #1]
100018d8:	4683      	mov	fp, r0
        ph_get_node(heap, a)->sibling = ph_get_node(heap, b)->sibling = 0;
100018da:	4648      	mov	r0, r9
100018dc:	7048      	strb	r0, [r1, #1]
100018de:	7058      	strb	r0, [r3, #1]
        return ph_merge_nodes(heap, ph_merge_nodes(heap, a, b), ph_merge_two_pass(heap, new_node));
100018e0:	4641      	mov	r1, r8
100018e2:	0020      	movs	r0, r4
100018e4:	f7ff fe64 	bl	100015b0 <ph_merge_nodes>
100018e8:	4659      	mov	r1, fp
100018ea:	4680      	mov	r8, r0
100018ec:	0020      	movs	r0, r4
100018ee:	f7ff fec5 	bl	1000167c <ph_merge_two_pass>
100018f2:	4641      	mov	r1, r8
100018f4:	0002      	movs	r2, r0
100018f6:	0020      	movs	r0, r4
100018f8:	f7ff fe5a 	bl	100015b0 <ph_merge_nodes>
100018fc:	4680      	mov	r8, r0
100018fe:	e7ce      	b.n	1000189e <ph_remove_head_reserve+0x9a>

10001900 <ph_delete>:

#include <stdio.h>
bool ph_delete(pheap_t *heap, pheap_node_id_t id) {
10001900:	b570      	push	{r4, r5, r6, lr}
10001902:	0004      	movs	r4, r0
    // 1) trivial cases
    if (!id) return false;
10001904:	2900      	cmp	r1, #0
10001906:	d02c      	beq.n	10001962 <ph_delete+0x62>
    if (id == heap->root_id) {
10001908:	7b43      	ldrb	r3, [r0, #13]
1000190a:	428b      	cmp	r3, r1
1000190c:	d02e      	beq.n	1000196c <ph_delete+0x6c>
1000190e:	6805      	ldr	r5, [r0, #0]
10001910:	0048      	lsls	r0, r1, #1
10001912:	1840      	adds	r0, r0, r1
10001914:	3803      	subs	r0, #3
10001916:	1828      	adds	r0, r5, r0
        ph_remove_head(heap);
        return true;
    }
    // 2) unlink the node from the tree
    pheap_node_t *node = ph_get_node(heap, id);
    if (!node->parent) return false; // not in tree
10001918:	7882      	ldrb	r2, [r0, #2]
1000191a:	2a00      	cmp	r2, #0
1000191c:	d021      	beq.n	10001962 <ph_delete+0x62>
1000191e:	0053      	lsls	r3, r2, #1
10001920:	189b      	adds	r3, r3, r2
10001922:	3b03      	subs	r3, #3
    pheap_node_t *parent = ph_get_node(heap, node->parent);
    if (parent->child == id) {
10001924:	5cea      	ldrb	r2, [r5, r3]
10001926:	18ee      	adds	r6, r5, r3
10001928:	428a      	cmp	r2, r1
1000192a:	d102      	bne.n	10001932 <ph_delete+0x32>
1000192c:	e01b      	b.n	10001966 <ph_delete+0x66>
                prev_sibling->sibling = node->sibling;
                found = true;
                break;
            }
            prev_sibling_id = prev_sibling->sibling;
        } while (prev_sibling_id);
1000192e:	2a00      	cmp	r2, #0
10001930:	d008      	beq.n	10001944 <ph_delete+0x44>
10001932:	0053      	lsls	r3, r2, #1
10001934:	189b      	adds	r3, r3, r2
10001936:	3b03      	subs	r3, #3
10001938:	18eb      	adds	r3, r5, r3
            if (prev_sibling->sibling == id) {
1000193a:	785a      	ldrb	r2, [r3, #1]
1000193c:	428a      	cmp	r2, r1
1000193e:	d1f6      	bne.n	1000192e <ph_delete+0x2e>
                prev_sibling->sibling = node->sibling;
10001940:	7842      	ldrb	r2, [r0, #1]
10001942:	705a      	strb	r2, [r3, #1]
        assert(found);
    }
    node->sibling = node->parent = 0;
10001944:	2300      	movs	r3, #0
//    ph_dump(heap, NULL, NULL);
    // 3) remove it from the head of its own subtree
    pheap_node_id_t new_sub_tree = ph_remove_any_head(heap, id, false);
10001946:	2200      	movs	r2, #0
    node->sibling = node->parent = 0;
10001948:	7083      	strb	r3, [r0, #2]
1000194a:	7043      	strb	r3, [r0, #1]
    pheap_node_id_t new_sub_tree = ph_remove_any_head(heap, id, false);
1000194c:	0020      	movs	r0, r4
1000194e:	f7ff fedd 	bl	1000170c <ph_remove_any_head>
    assert(new_sub_tree != heap->root_id);
    heap->root_id = ph_merge_nodes(heap, heap->root_id, new_sub_tree);
10001952:	7b61      	ldrb	r1, [r4, #13]
    pheap_node_id_t new_sub_tree = ph_remove_any_head(heap, id, false);
10001954:	0002      	movs	r2, r0
    heap->root_id = ph_merge_nodes(heap, heap->root_id, new_sub_tree);
10001956:	0020      	movs	r0, r4
10001958:	f7ff fe2a 	bl	100015b0 <ph_merge_nodes>
1000195c:	7360      	strb	r0, [r4, #13]
    return true;
1000195e:	2001      	movs	r0, #1
10001960:	e000      	b.n	10001964 <ph_delete+0x64>
    if (!id) return false;
10001962:	2000      	movs	r0, #0
}
10001964:	bd70      	pop	{r4, r5, r6, pc}
        parent->child = node->sibling;
10001966:	7843      	ldrb	r3, [r0, #1]
10001968:	7033      	strb	r3, [r6, #0]
1000196a:	e7eb      	b.n	10001944 <ph_delete+0x44>
    heap->root_id = ph_remove_any_head(heap, old_root_id, reserve);
1000196c:	2200      	movs	r2, #0
1000196e:	0019      	movs	r1, r3
10001970:	f7ff fecc 	bl	1000170c <ph_remove_any_head>
10001974:	7360      	strb	r0, [r4, #13]
        return true;
10001976:	2001      	movs	r0, #1
10001978:	e7f4      	b.n	10001964 <ph_delete+0x64>
1000197a:	46c0      	nop			; (mov r8, r8)

1000197c <__wrap_malloc>:
        panic("Out of memory");
    }
#endif
}

void *__wrap_malloc(size_t size) {
1000197c:	b510      	push	{r4, lr}
#if PICO_USE_MALLOC_MUTEX
    mutex_enter_blocking(&malloc_mutex);
#endif
    void *rc = __real_malloc(size);
1000197e:	f00c f83f 	bl	1000da00 <malloc>
        printf("malloc %d %p->%p\n", (uint) size, rc, ((uint8_t *) rc) + size);
    }
#endif
    check_alloc(rc, size);
    return rc;
}
10001982:	bd10      	pop	{r4, pc}

10001984 <__wrap_calloc>:

void *__wrap_calloc(size_t count, size_t size) {
10001984:	b510      	push	{r4, lr}
#if PICO_USE_MALLOC_MUTEX
    mutex_enter_blocking(&malloc_mutex);
#endif
    void *rc = __real_calloc(count, size);
10001986:	f00b ffdb 	bl	1000d940 <calloc>
        printf("calloc %d %p->%p\n", (uint) (count * size), rc, ((uint8_t *) rc) + size);
    }
#endif
    check_alloc(rc, size);
    return rc;
}
1000198a:	bd10      	pop	{r4, pc}

1000198c <pio_add_program>:
    uint32_t program_mask = (1u << program->length) - 1;
    _used_instruction_space[pio_get_index(pio)] |= program_mask << offset;
}

// these assert if unable
uint pio_add_program(PIO pio, const pio_program_t *program) {
1000198c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000198e:	46d6      	mov	lr, sl
10001990:	464f      	mov	r7, r9
10001992:	4646      	mov	r6, r8
10001994:	4688      	mov	r8, r1
10001996:	b5c0      	push	{r6, r7, lr}
10001998:	2405      	movs	r4, #5
1000199a:	0006      	movs	r6, r0
    uint32_t save = hw_claim_lock();
1000199c:	f7ff f84e 	bl	10000a3c <hw_claim_lock>
100019a0:	4643      	mov	r3, r8
100019a2:	791f      	ldrb	r7, [r3, #4]
100019a4:	571c      	ldrsb	r4, [r3, r4]
 * \param pio The PIO instance; either \ref pio0 or \ref pio1
 * \return the PIO instance number (either 0 or 1)
 */
static inline uint pio_get_index(PIO pio) {
    assert(pio == pio0 || pio == pio1);
    return pio == pio1 ? 1 : 0;
100019a6:	4b28      	ldr	r3, [pc, #160]	; (10001a48 <pio_add_program+0xbc>)
100019a8:	4681      	mov	r9, r0
100019aa:	18f0      	adds	r0, r6, r3
100019ac:	4243      	negs	r3, r0
100019ae:	4158      	adcs	r0, r3
    uint32_t used_mask = _used_instruction_space[pio_get_index(pio)];
100019b0:	4b26      	ldr	r3, [pc, #152]	; (10001a4c <pio_add_program+0xc0>)
100019b2:	469a      	mov	sl, r3
100019b4:	0083      	lsls	r3, r0, #2
100019b6:	469c      	mov	ip, r3
100019b8:	4653      	mov	r3, sl
100019ba:	4662      	mov	r2, ip
100019bc:	5898      	ldr	r0, [r3, r2]
    uint32_t program_mask = (1u << program->length) - 1;
100019be:	2201      	movs	r2, #1
        if (program->origin > 32 - program->length) return -1;
100019c0:	2320      	movs	r3, #32
    uint32_t program_mask = (1u << program->length) - 1;
100019c2:	40ba      	lsls	r2, r7
        if (program->origin > 32 - program->length) return -1;
100019c4:	1bdb      	subs	r3, r3, r7
    uint32_t program_mask = (1u << program->length) - 1;
100019c6:	3a01      	subs	r2, #1
    if (program->origin >= 0) {
100019c8:	2c00      	cmp	r4, #0
100019ca:	db32      	blt.n	10001a32 <pio_add_program+0xa6>
        if (program->origin > 32 - program->length) return -1;
100019cc:	429c      	cmp	r4, r3
100019ce:	dc2d      	bgt.n	10001a2c <pio_add_program+0xa0>
        return used_mask & (program_mask << program->origin) ? -1 : program->origin;
100019d0:	40a2      	lsls	r2, r4
100019d2:	0015      	movs	r5, r2
100019d4:	4210      	tst	r0, r2
100019d6:	d129      	bne.n	10001a2c <pio_add_program+0xa0>
    for (uint i = 0; i < program->length; ++i) {
100019d8:	2f00      	cmp	r7, #0
100019da:	d01a      	beq.n	10001a12 <pio_add_program+0x86>
        uint16_t instr = program->instructions[i];
100019dc:	4643      	mov	r3, r8
100019de:	785a      	ldrb	r2, [r3, #1]
100019e0:	7819      	ldrb	r1, [r3, #0]
100019e2:	0212      	lsls	r2, r2, #8
100019e4:	4311      	orrs	r1, r2
100019e6:	4642      	mov	r2, r8
100019e8:	789b      	ldrb	r3, [r3, #2]
100019ea:	78d2      	ldrb	r2, [r2, #3]
100019ec:	041b      	lsls	r3, r3, #16
100019ee:	430b      	orrs	r3, r1
100019f0:	0612      	lsls	r2, r2, #24
100019f2:	431a      	orrs	r2, r3
100019f4:	4690      	mov	r8, r2
    for (uint i = 0; i < program->length; ++i) {
100019f6:	2200      	movs	r2, #0
        uint16_t instr = program->instructions[i];
100019f8:	4641      	mov	r1, r8
100019fa:	0053      	lsls	r3, r2, #1
100019fc:	5ac9      	ldrh	r1, [r1, r3]
        pio->instr_mem[offset + i] = pio_instr_bits_jmp != _pio_major_instr_bits(instr) ? instr : instr + offset;
100019fe:	0b4b      	lsrs	r3, r1, #13
10001a00:	d100      	bne.n	10001a04 <pio_add_program+0x78>
10001a02:	1909      	adds	r1, r1, r4
10001a04:	1913      	adds	r3, r2, r4
10001a06:	3312      	adds	r3, #18
10001a08:	009b      	lsls	r3, r3, #2
    for (uint i = 0; i < program->length; ++i) {
10001a0a:	3201      	adds	r2, #1
        pio->instr_mem[offset + i] = pio_instr_bits_jmp != _pio_major_instr_bits(instr) ? instr : instr + offset;
10001a0c:	5199      	str	r1, [r3, r6]
    for (uint i = 0; i < program->length; ++i) {
10001a0e:	4297      	cmp	r7, r2
10001a10:	d8f2      	bhi.n	100019f8 <pio_add_program+0x6c>
    _used_instruction_space[pio_get_index(pio)] |= program_mask << offset;
10001a12:	4653      	mov	r3, sl
10001a14:	4662      	mov	r2, ip
10001a16:	4305      	orrs	r5, r0
10001a18:	509d      	str	r5, [r3, r2]
    int offset = _pio_find_offset_for_program(pio, program);
    if (offset < 0) {
        panic("No program space");
    }
    _pio_add_program_at_offset(pio, program, offset);
    hw_claim_unlock(save);
10001a1a:	4648      	mov	r0, r9
10001a1c:	f7ff f81a 	bl	10000a54 <hw_claim_unlock>
    return offset;
}
10001a20:	0020      	movs	r0, r4
10001a22:	bce0      	pop	{r5, r6, r7}
10001a24:	46ba      	mov	sl, r7
10001a26:	46b1      	mov	r9, r6
10001a28:	46a8      	mov	r8, r5
10001a2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        panic("No program space");
10001a2c:	4808      	ldr	r0, [pc, #32]	; (10001a50 <pio_add_program+0xc4>)
10001a2e:	f000 f99f 	bl	10001d70 <panic>
        for (int i = 32 - program->length; i >= 0; i--) {
10001a32:	2b00      	cmp	r3, #0
10001a34:	da02      	bge.n	10001a3c <pio_add_program+0xb0>
10001a36:	e7f9      	b.n	10001a2c <pio_add_program+0xa0>
10001a38:	3b01      	subs	r3, #1
10001a3a:	d3f7      	bcc.n	10001a2c <pio_add_program+0xa0>
            if (!(used_mask & (program_mask << (uint) i))) {
10001a3c:	0015      	movs	r5, r2
10001a3e:	409d      	lsls	r5, r3
10001a40:	001c      	movs	r4, r3
10001a42:	4205      	tst	r5, r0
10001a44:	d1f8      	bne.n	10001a38 <pio_add_program+0xac>
10001a46:	e7c7      	b.n	100019d8 <pio_add_program+0x4c>
10001a48:	afd00000 	.word	0xafd00000
10001a4c:	20011f28 	.word	0x20011f28
10001a50:	1000e390 	.word	0x1000e390

10001a54 <pio_clear_instruction_memory>:
    assert(program_mask == (_used_instruction_space[pio_get_index(pio)] & program_mask));
    _used_instruction_space[pio_get_index(pio)] &= ~program_mask;
    hw_claim_unlock(save);
}

void pio_clear_instruction_memory(PIO pio) {
10001a54:	b510      	push	{r4, lr}
10001a56:	0004      	movs	r4, r0
    uint32_t save = hw_claim_lock();
10001a58:	f7fe fff0 	bl	10000a3c <hw_claim_lock>
10001a5c:	4b09      	ldr	r3, [pc, #36]	; (10001a84 <pio_clear_instruction_memory+0x30>)
    _used_instruction_space[pio_get_index(pio)] = 0;
10001a5e:	2100      	movs	r1, #0
10001a60:	18e3      	adds	r3, r4, r3
10001a62:	425a      	negs	r2, r3
10001a64:	4153      	adcs	r3, r2
10001a66:	4a08      	ldr	r2, [pc, #32]	; (10001a88 <pio_clear_instruction_memory+0x34>)
10001a68:	009b      	lsls	r3, r3, #2
10001a6a:	5099      	str	r1, [r3, r2]
    for(uint i=0;i<PIO_INSTRUCTION_COUNT;i++) {
10001a6c:	2300      	movs	r3, #0
        pio->instr_mem[i] = pio_encode_jmp(i);
10001a6e:	001a      	movs	r2, r3
10001a70:	3212      	adds	r2, #18
10001a72:	0092      	lsls	r2, r2, #2
10001a74:	5113      	str	r3, [r2, r4]
    for(uint i=0;i<PIO_INSTRUCTION_COUNT;i++) {
10001a76:	3301      	adds	r3, #1
10001a78:	2b20      	cmp	r3, #32
10001a7a:	d1f8      	bne.n	10001a6e <pio_clear_instruction_memory+0x1a>
    }
    hw_claim_unlock(save);
10001a7c:	f7fe ffea 	bl	10000a54 <hw_claim_unlock>
}
10001a80:	bd10      	pop	{r4, pc}
10001a82:	46c0      	nop			; (mov r8, r8)
10001a84:	afd00000 	.word	0xafd00000
10001a88:	20011f28 	.word	0x20011f28

10001a8c <pio_sm_set_consecutive_pindirs>:
        pin_mask &= pin_mask - 1;
    }
    pio->sm[sm].pinctrl = pinctrl_saved;
}

void pio_sm_set_consecutive_pindirs(PIO pio, uint sm, uint pin, uint count, bool is_out) {
10001a8c:	b5f0      	push	{r4, r5, r6, r7, lr}
10001a8e:	464e      	mov	r6, r9
10001a90:	4645      	mov	r5, r8
10001a92:	46de      	mov	lr, fp
10001a94:	4657      	mov	r7, sl
10001a96:	468a      	mov	sl, r1
    assert(pin < 32u);
    uint32_t pinctrl_saved = pio->sm[sm].pinctrl;
10001a98:	0049      	lsls	r1, r1, #1
void pio_sm_set_consecutive_pindirs(PIO pio, uint sm, uint pin, uint count, bool is_out) {
10001a9a:	b5e0      	push	{r5, r6, r7, lr}
    uint32_t pinctrl_saved = pio->sm[sm].pinctrl;
10001a9c:	000d      	movs	r5, r1
void pio_sm_set_consecutive_pindirs(PIO pio, uint sm, uint pin, uint count, bool is_out) {
10001a9e:	4680      	mov	r8, r0
    uint32_t pinctrl_saved = pio->sm[sm].pinctrl;
10001aa0:	4455      	add	r5, sl
10001aa2:	00ed      	lsls	r5, r5, #3
10001aa4:	4445      	add	r5, r8
10001aa6:	4689      	mov	r9, r1
10001aa8:	0029      	movs	r1, r5
void pio_sm_set_consecutive_pindirs(PIO pio, uint sm, uint pin, uint count, bool is_out) {
10001aaa:	ac09      	add	r4, sp, #36	; 0x24
10001aac:	7826      	ldrb	r6, [r4, #0]
    uint32_t pinctrl_saved = pio->sm[sm].pinctrl;
10001aae:	31dc      	adds	r1, #220	; 0xdc
    uint pindir_val = is_out ? 0x1f : 0;
10001ab0:	1e74      	subs	r4, r6, #1
10001ab2:	41a6      	sbcs	r6, r4
    uint32_t pinctrl_saved = pio->sm[sm].pinctrl;
10001ab4:	6808      	ldr	r0, [r1, #0]
    uint pindir_val = is_out ? 0x1f : 0;
10001ab6:	4274      	negs	r4, r6
    uint32_t pinctrl_saved = pio->sm[sm].pinctrl;
10001ab8:	4684      	mov	ip, r0
    uint pindir_val = is_out ? 0x1f : 0;
10001aba:	4814      	ldr	r0, [pc, #80]	; (10001b0c <pio_sm_set_consecutive_pindirs+0x80>)
10001abc:	261f      	movs	r6, #31
10001abe:	4683      	mov	fp, r0
10001ac0:	4026      	ands	r6, r4
10001ac2:	445e      	add	r6, fp
    while (count > 5) {
10001ac4:	2b05      	cmp	r3, #5
10001ac6:	d90c      	bls.n	10001ae2 <pio_sm_set_consecutive_pindirs+0x56>
        pio->sm[sm].pinctrl = (5u << PIO_SM0_PINCTRL_SET_COUNT_LSB) | (pin << PIO_SM0_PINCTRL_SET_BASE_LSB);
10001ac8:	20a0      	movs	r0, #160	; 0xa0
        pio_sm_exec(pio, sm, pio_encode_set(pio_pindirs, pindir_val));
        count -= 5;
        pin = (pin + 5) & 0x1f;
10001aca:	271f      	movs	r7, #31
        pio->sm[sm].pinctrl = (5u << PIO_SM0_PINCTRL_SET_COUNT_LSB) | (pin << PIO_SM0_PINCTRL_SET_BASE_LSB);
10001acc:	0540      	lsls	r0, r0, #21
 * \param sm State machine index (0..3)
 * \param instr the encoded PIO instruction
 */
inline static void pio_sm_exec(PIO pio, uint sm, uint instr) {
    check_sm_param(sm);
    pio->sm[sm].instr = instr;
10001ace:	35d8      	adds	r5, #216	; 0xd8
10001ad0:	0154      	lsls	r4, r2, #5
10001ad2:	4304      	orrs	r4, r0
        pin = (pin + 5) & 0x1f;
10001ad4:	3205      	adds	r2, #5
        count -= 5;
10001ad6:	3b05      	subs	r3, #5
        pio->sm[sm].pinctrl = (5u << PIO_SM0_PINCTRL_SET_COUNT_LSB) | (pin << PIO_SM0_PINCTRL_SET_BASE_LSB);
10001ad8:	600c      	str	r4, [r1, #0]
        pin = (pin + 5) & 0x1f;
10001ada:	403a      	ands	r2, r7
10001adc:	602e      	str	r6, [r5, #0]
    while (count > 5) {
10001ade:	2b05      	cmp	r3, #5
10001ae0:	d8f6      	bhi.n	10001ad0 <pio_sm_set_consecutive_pindirs+0x44>
    }
    pio->sm[sm].pinctrl = (count << PIO_SM0_PINCTRL_SET_COUNT_LSB) | (pin << PIO_SM0_PINCTRL_SET_BASE_LSB);
10001ae2:	4649      	mov	r1, r9
10001ae4:	4451      	add	r1, sl
10001ae6:	00c9      	lsls	r1, r1, #3
10001ae8:	4441      	add	r1, r8
10001aea:	0152      	lsls	r2, r2, #5
10001aec:	069b      	lsls	r3, r3, #26
10001aee:	4313      	orrs	r3, r2
10001af0:	000a      	movs	r2, r1
10001af2:	0008      	movs	r0, r1
10001af4:	32dc      	adds	r2, #220	; 0xdc
10001af6:	6013      	str	r3, [r2, #0]
    pio_sm_exec(pio, sm, pio_encode_set(pio_pindirs, pindir_val));
    pio->sm[sm].pinctrl = pinctrl_saved;
10001af8:	4663      	mov	r3, ip
10001afa:	30d8      	adds	r0, #216	; 0xd8
10001afc:	6006      	str	r6, [r0, #0]
10001afe:	6013      	str	r3, [r2, #0]
}
10001b00:	bcf0      	pop	{r4, r5, r6, r7}
10001b02:	46bb      	mov	fp, r7
10001b04:	46b2      	mov	sl, r6
10001b06:	46a9      	mov	r9, r5
10001b08:	46a0      	mov	r8, r4
10001b0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
10001b0c:	0000e080 	.word	0x0000e080

10001b10 <pio_sm_init>:

void pio_sm_init(PIO pio, uint sm, uint initial_pc, const pio_sm_config *config) {
10001b10:	b5f0      	push	{r4, r5, r6, r7, lr}
    pio->ctrl = (pio->ctrl & ~(1u << sm)) | (!!enabled << sm);
10001b12:	2501      	movs	r5, #1
10001b14:	408d      	lsls	r5, r1
10001b16:	6804      	ldr	r4, [r0, #0]
10001b18:	43ac      	bics	r4, r5
    pio->sm[sm].clkdiv = config->clkdiv;
10001b1a:	004d      	lsls	r5, r1, #1
    pio->ctrl = (pio->ctrl & ~(1u << sm)) | (!!enabled << sm);
10001b1c:	6004      	str	r4, [r0, #0]
    pio->sm[sm].clkdiv = config->clkdiv;
10001b1e:	186c      	adds	r4, r5, r1
10001b20:	00e4      	lsls	r4, r4, #3
10001b22:	1904      	adds	r4, r0, r4
10001b24:	0026      	movs	r6, r4
10001b26:	36c8      	adds	r6, #200	; 0xc8
    // Halt the machine, set some sensible defaults
    pio_sm_set_enabled(pio, sm, false);

    if (config) {
10001b28:	2b00      	cmp	r3, #0
10001b2a:	d02a      	beq.n	10001b82 <pio_sm_init+0x72>
10001b2c:	681f      	ldr	r7, [r3, #0]
    pio->sm[sm].pinctrl = config->pinctrl;
10001b2e:	34dc      	adds	r4, #220	; 0xdc
    pio->sm[sm].clkdiv = config->clkdiv;
10001b30:	6037      	str	r7, [r6, #0]
    pio->sm[sm].execctrl = config->execctrl;
10001b32:	685f      	ldr	r7, [r3, #4]
10001b34:	6077      	str	r7, [r6, #4]
    pio->sm[sm].shiftctrl = config->shiftctrl;
10001b36:	689f      	ldr	r7, [r3, #8]
    pio->sm[sm].pinctrl = config->pinctrl;
10001b38:	68db      	ldr	r3, [r3, #12]
    pio->sm[sm].shiftctrl = config->shiftctrl;
10001b3a:	60b7      	str	r7, [r6, #8]
    pio->sm[sm].pinctrl = config->pinctrl;
10001b3c:	6023      	str	r3, [r4, #0]
 * \param sm State machine index (0..3)
 */
static inline void pio_sm_clear_fifos(PIO pio, uint sm) {
    // changing the FIFO join state clears the fifo
    check_sm_param(sm);
    hw_xor_bits(&pio->sm[sm].shiftctrl, PIO_SM0_SHIFTCTRL_FJOIN_RX_BITS);
10001b3e:	186d      	adds	r5, r5, r1
10001b40:	00eb      	lsls	r3, r5, #3
10001b42:	001d      	movs	r5, r3
10001b44:	2480      	movs	r4, #128	; 0x80
10001b46:	35d0      	adds	r5, #208	; 0xd0
10001b48:	1945      	adds	r5, r0, r5
10001b4a:	0164      	lsls	r4, r4, #5
10001b4c:	432c      	orrs	r4, r5
10001b4e:	2580      	movs	r5, #128	; 0x80
10001b50:	062d      	lsls	r5, r5, #24
10001b52:	6025      	str	r5, [r4, #0]
10001b54:	6025      	str	r5, [r4, #0]
    const uint32_t fdebug_sm_mask =
            (1u << PIO_FDEBUG_TXOVER_LSB) |
            (1u << PIO_FDEBUG_RXUNDER_LSB) |
            (1u << PIO_FDEBUG_TXSTALL_LSB) |
            (1u << PIO_FDEBUG_RXSTALL_LSB);
    pio->fdebug = fdebug_sm_mask << sm;
10001b56:	4c11      	ldr	r4, [pc, #68]	; (10001b9c <pio_sm_init+0x8c>)
    pio->ctrl |= 1u << (PIO_CTRL_SM_RESTART_LSB + sm);
10001b58:	1d0d      	adds	r5, r1, #4
10001b5a:	408c      	lsls	r4, r1
10001b5c:	6084      	str	r4, [r0, #8]
10001b5e:	2401      	movs	r4, #1
10001b60:	0027      	movs	r7, r4
10001b62:	40af      	lsls	r7, r5
10001b64:	003d      	movs	r5, r7
    pio->ctrl |= 1u << (PIO_CTRL_CLKDIV_RESTART_LSB + sm);
10001b66:	3108      	adds	r1, #8
10001b68:	408c      	lsls	r4, r1
        assert(arg2 && arg2 <= 32);
    } else {
        assert(arg2 <= 31);
    }
#endif
    return instr_bits | (arg1 << 5u) | (arg2 & 0x1fu);
10001b6a:	211f      	movs	r1, #31
    pio->ctrl |= 1u << (PIO_CTRL_SM_RESTART_LSB + sm);
10001b6c:	6806      	ldr	r6, [r0, #0]
10001b6e:	400a      	ands	r2, r1
10001b70:	4335      	orrs	r5, r6
10001b72:	6005      	str	r5, [r0, #0]
    pio->ctrl |= 1u << (PIO_CTRL_CLKDIV_RESTART_LSB + sm);
10001b74:	6805      	ldr	r5, [r0, #0]
10001b76:	432c      	orrs	r4, r5
10001b78:	6004      	str	r4, [r0, #0]
    pio->sm[sm].instr = instr;
10001b7a:	18c0      	adds	r0, r0, r3
10001b7c:	30d8      	adds	r0, #216	; 0xd8
10001b7e:	6002      	str	r2, [r0, #0]

    // Finally, clear some internal SM state
    pio_sm_restart(pio, sm);
    pio_sm_clkdiv_restart(pio, sm);
    pio_sm_exec(pio, sm, pio_encode_jmp(initial_pc));
}
10001b80:	bdf0      	pop	{r4, r5, r6, r7, pc}
    pio->sm[sm].clkdiv = config->clkdiv;
10001b82:	2780      	movs	r7, #128	; 0x80
10001b84:	027f      	lsls	r7, r7, #9
10001b86:	6037      	str	r7, [r6, #0]
    pio->sm[sm].execctrl = config->execctrl;
10001b88:	27f8      	movs	r7, #248	; 0xf8
10001b8a:	027f      	lsls	r7, r7, #9
10001b8c:	6077      	str	r7, [r6, #4]
    pio->sm[sm].shiftctrl = config->shiftctrl;
10001b8e:	27c0      	movs	r7, #192	; 0xc0
    pio->sm[sm].pinctrl = config->pinctrl;
10001b90:	34dc      	adds	r4, #220	; 0xdc
    pio->sm[sm].shiftctrl = config->shiftctrl;
10001b92:	033f      	lsls	r7, r7, #12
10001b94:	60b7      	str	r7, [r6, #8]
    pio->sm[sm].pinctrl = config->pinctrl;
10001b96:	6023      	str	r3, [r4, #0]
10001b98:	e7d1      	b.n	10001b3e <pio_sm_init+0x2e>
10001b9a:	46c0      	nop			; (mov r8, r8)
10001b9c:	01010101 	.word	0x01010101

10001ba0 <running_on_fpga>:
#include "hardware/address_mapped.h"
#include "hardware/regs/tbman.h"
#include "hardware/regs/sysinfo.h"

bool running_on_fpga() {
    return !!((*(io_ro_32 *)TBMAN_BASE) & TBMAN_PLATFORM_FPGA_BITS);
10001ba0:	4b02      	ldr	r3, [pc, #8]	; (10001bac <running_on_fpga+0xc>)
10001ba2:	6818      	ldr	r0, [r3, #0]
10001ba4:	0780      	lsls	r0, r0, #30
10001ba6:	0fc0      	lsrs	r0, r0, #31
}
10001ba8:	4770      	bx	lr
10001baa:	46c0      	nop			; (mov r8, r8)
10001bac:	4006c000 	.word	0x4006c000

10001bb0 <pll_init>:
// For MHZ definitions etc
#include "hardware/clocks.h"
#include "hardware/pll.h"

/// \tag::pll_init_calculations[]
void pll_init(PLL pll, uint32_t refdiv, uint32_t vco_freq, uint32_t post_div1, uint8_t post_div2) {
10001bb0:	b5f0      	push	{r4, r5, r6, r7, lr}
10001bb2:	46c6      	mov	lr, r8
10001bb4:	b500      	push	{lr}
10001bb6:	001e      	movs	r6, r3
10001bb8:	ab06      	add	r3, sp, #24
10001bba:	781f      	ldrb	r7, [r3, #0]
    // Turn off PLL in case it is already running
    pll->pwr = 0xffffffff;
10001bbc:	2301      	movs	r3, #1
10001bbe:	425b      	negs	r3, r3
10001bc0:	6043      	str	r3, [r0, #4]
    pll->fbdiv_int = 0;
10001bc2:	2300      	movs	r3, #0
void pll_init(PLL pll, uint32_t refdiv, uint32_t vco_freq, uint32_t post_div1, uint8_t post_div2) {
10001bc4:	0004      	movs	r4, r0
    pll->fbdiv_int = 0;
10001bc6:	6083      	str	r3, [r0, #8]

    uint32_t ref_mhz = XOSC_MHZ / refdiv;
    pll->cs = refdiv;
10001bc8:	6001      	str	r1, [r0, #0]
    uint32_t ref_mhz = XOSC_MHZ / refdiv;
10001bca:	200c      	movs	r0, #12
void pll_init(PLL pll, uint32_t refdiv, uint32_t vco_freq, uint32_t post_div1, uint8_t post_div2) {
10001bcc:	4690      	mov	r8, r2
    uint32_t ref_mhz = XOSC_MHZ / refdiv;
10001bce:	f7fe fbd1 	bl	10000374 <__wrap___aeabi_uidiv>

    // What are we multiplying the reference clock by to get the vco freq
    // (The regs are called div, because you divide the vco output and compare it to the refclk)
    uint32_t fbdiv = vco_freq / (ref_mhz * MHZ);
10001bd2:	0141      	lsls	r1, r0, #5
10001bd4:	1a09      	subs	r1, r1, r0
10001bd6:	018d      	lsls	r5, r1, #6
10001bd8:	1a69      	subs	r1, r5, r1
10001bda:	00c9      	lsls	r1, r1, #3
10001bdc:	1809      	adds	r1, r1, r0
10001bde:	0189      	lsls	r1, r1, #6
10001be0:	4640      	mov	r0, r8
10001be2:	f7fe fbc7 	bl	10000374 <__wrap___aeabi_uidiv>
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10001be6:	21c0      	movs	r1, #192	; 0xc0

    // Turn on PLL
    uint32_t power = PLL_PWR_PD_BITS | // Main power
                     PLL_PWR_VCOPD_BITS; // VCO Power

    hw_clear_bits(&pll->pwr, power);
10001be8:	1d23      	adds	r3, r4, #4
10001bea:	0189      	lsls	r1, r1, #6
10001bec:	4319      	orrs	r1, r3
10001bee:	2321      	movs	r3, #33	; 0x21
    pll->fbdiv_int = fbdiv;
10001bf0:	60a0      	str	r0, [r4, #8]
10001bf2:	600b      	str	r3, [r1, #0]

    // Wait for PLL to lock
    while (!(pll->cs & PLL_CS_LOCK_BITS)) tight_loop_contents();
10001bf4:	6822      	ldr	r2, [r4, #0]
10001bf6:	2a00      	cmp	r2, #0
10001bf8:	dafc      	bge.n	10001bf4 <pll_init+0x44>
10001bfa:	2308      	movs	r3, #8

    // Set up post dividers - div1 feeds into div2 so if div1 is 5 and div2 is 2 then you get a divide by 10
    uint32_t pdiv = (post_div1 << PLL_PRIM_POSTDIV1_LSB) |
                    (post_div2 << PLL_PRIM_POSTDIV2_LSB);
10001bfc:	033f      	lsls	r7, r7, #12
    uint32_t pdiv = (post_div1 << PLL_PRIM_POSTDIV1_LSB) |
10001bfe:	0436      	lsls	r6, r6, #16
10001c00:	433e      	orrs	r6, r7
    pll->prim = pdiv;
10001c02:	60e6      	str	r6, [r4, #12]
10001c04:	600b      	str	r3, [r1, #0]

    // Turn on post divider
    hw_clear_bits(&pll->pwr, PLL_PWR_POSTDIVPD_BITS);
/// \end::pll_init_finish[]
}
10001c06:	bc80      	pop	{r7}
10001c08:	46b8      	mov	r8, r7
10001c0a:	bdf0      	pop	{r4, r5, r6, r7, pc}

10001c0c <_out_char>:
    (void) idx;
    (void) maxlen;
}

// internal _putchar wrapper
static inline void _out_char(char character, void *buffer, size_t idx, size_t maxlen) {
10001c0c:	b510      	push	{r4, lr}
    (void) buffer;
    (void) idx;
    (void) maxlen;
    if (character) {
10001c0e:	2800      	cmp	r0, #0
10001c10:	d100      	bne.n	10001c14 <_out_char+0x8>
        _putchar(character);
    }
}
10001c12:	bd10      	pop	{r4, pc}
    putchar(character);
10001c14:	f000 f996 	bl	10001f44 <__wrap_putchar>
}
10001c18:	e7fb      	b.n	10001c12 <_out_char+0x6>
10001c1a:	46c0      	nop			; (mov r8, r8)

10001c1c <weak_raw_vprintf>:
    bool rc = weak_raw_vprintf(fmt, va);
    va_end(va);
    return rc;
}

bool weak_raw_vprintf(const char *fmt, va_list args) {
10001c1c:	b510      	push	{r4, lr}
    if (lazy_vsnprintf) {
10001c1e:	4a09      	ldr	r2, [pc, #36]	; (10001c44 <weak_raw_vprintf+0x28>)
bool weak_raw_vprintf(const char *fmt, va_list args) {
10001c20:	0003      	movs	r3, r0
    if (lazy_vsnprintf) {
10001c22:	6814      	ldr	r4, [r2, #0]
bool weak_raw_vprintf(const char *fmt, va_list args) {
10001c24:	b084      	sub	sp, #16
    if (lazy_vsnprintf) {
10001c26:	2c00      	cmp	r4, #0
10001c28:	d008      	beq.n	10001c3c <weak_raw_vprintf+0x20>
        char buffer[1];
        lazy_vsnprintf(_out_char, buffer, (size_t) -1, fmt, args);
10001c2a:	2201      	movs	r2, #1
10001c2c:	9100      	str	r1, [sp, #0]
10001c2e:	4806      	ldr	r0, [pc, #24]	; (10001c48 <weak_raw_vprintf+0x2c>)
10001c30:	4252      	negs	r2, r2
10001c32:	a903      	add	r1, sp, #12
10001c34:	47a0      	blx	r4
        return true;
10001c36:	2001      	movs	r0, #1
    } else {
        puts(fmt);
        return false;
    }
}
10001c38:	b004      	add	sp, #16
10001c3a:	bd10      	pop	{r4, pc}
        puts(fmt);
10001c3c:	f000 f990 	bl	10001f60 <__wrap_puts>
        return false;
10001c40:	2000      	movs	r0, #0
10001c42:	e7f9      	b.n	10001c38 <weak_raw_vprintf+0x1c>
10001c44:	20012728 	.word	0x20012728
10001c48:	10001c0d 	.word	0x10001c0d

10001c4c <runtime_init>:
                   | (0x7 << 1) // size 2^(7 + 1) = 256
                   | (subregion_select << 8)
                   | 0x10000000; // XN = disable instruction fetch; no other bits means no permissions
}

void runtime_init(void) {
10001c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10001c4e:	4a2b      	ldr	r2, [pc, #172]	; (10001cfc <runtime_init+0xb0>)
10001c50:	4b2b      	ldr	r3, [pc, #172]	; (10001d00 <runtime_init+0xb4>)
10001c52:	492c      	ldr	r1, [pc, #176]	; (10001d04 <runtime_init+0xb8>)
10001c54:	601a      	str	r2, [r3, #0]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10001c56:	4a2c      	ldr	r2, [pc, #176]	; (10001d08 <runtime_init+0xbc>)
10001c58:	4b2c      	ldr	r3, [pc, #176]	; (10001d0c <runtime_init+0xc0>)
10001c5a:	601a      	str	r2, [r3, #0]
10001c5c:	0014      	movs	r4, r2
10001c5e:	688b      	ldr	r3, [r1, #8]
10001c60:	439c      	bics	r4, r3
10001c62:	d1fb      	bne.n	10001c5c <runtime_init+0x10>
    extern void (*__preinit_array_end)();

    // Call each function in the list.
    // We have to take the address of the symbols, as __preinit_array_start *is*
    // the first function pointer, not the address of it.
    for (void (**p)() = &__preinit_array_start; p < &__preinit_array_end; ++p) {
10001c64:	4d2a      	ldr	r5, [pc, #168]	; (10001d10 <runtime_init+0xc4>)
10001c66:	4e2b      	ldr	r6, [pc, #172]	; (10001d14 <runtime_init+0xc8>)
10001c68:	42b5      	cmp	r5, r6
10001c6a:	d208      	bcs.n	10001c7e <runtime_init+0x32>
10001c6c:	3e01      	subs	r6, #1
10001c6e:	1b76      	subs	r6, r6, r5
10001c70:	08b6      	lsrs	r6, r6, #2
        (*p)();
10001c72:	cd08      	ldmia	r5!, {r3}
10001c74:	4798      	blx	r3
    for (void (**p)() = &__preinit_array_start; p < &__preinit_array_end; ++p) {
10001c76:	0023      	movs	r3, r4
10001c78:	3401      	adds	r4, #1
10001c7a:	42b3      	cmp	r3, r6
10001c7c:	d1f9      	bne.n	10001c72 <runtime_init+0x26>
    }

    // After calling preinit we have enough runtime to do the exciting maths
    // in clocks_init
    clocks_init();
10001c7e:	f7fe ffe5 	bl	10000c4c <clocks_init>
10001c82:	4a25      	ldr	r2, [pc, #148]	; (10001d18 <runtime_init+0xcc>)
10001c84:	4b21      	ldr	r3, [pc, #132]	; (10001d0c <runtime_init+0xc0>)
10001c86:	601a      	str	r2, [r3, #0]
10001c88:	4a1e      	ldr	r2, [pc, #120]	; (10001d04 <runtime_init+0xb8>)
10001c8a:	6893      	ldr	r3, [r2, #8]
10001c8c:	43db      	mvns	r3, r3
10001c8e:	01db      	lsls	r3, r3, #7
10001c90:	09dc      	lsrs	r4, r3, #7
10001c92:	2b00      	cmp	r3, #0
10001c94:	d1f9      	bne.n	10001c8a <runtime_init+0x3e>
    unreset_block_wait(RESETS_RESET_BITS);

#if !PICO_IE_26_29_UNCHANGED_ON_RESET
    // after resetting BANK0 we should disable IE on 26-29
    hw_clear_alias(padsbank0_hw)->io[26] = hw_clear_alias(padsbank0_hw)->io[27] =
            hw_clear_alias(padsbank0_hw)->io[28] = hw_clear_alias(padsbank0_hw)->io[29] = PADS_BANK0_GPIO0_IE_BITS;
10001c96:	2240      	movs	r2, #64	; 0x40
10001c98:	4b20      	ldr	r3, [pc, #128]	; (10001d1c <runtime_init+0xd0>)

    extern mutex_t __mutex_array_start;
    extern mutex_t __mutex_array_end;

    // the first function pointer, not the address of it.
    for (mutex_t *m = &__mutex_array_start; m < &__mutex_array_end; m++) {
10001c9a:	4d21      	ldr	r5, [pc, #132]	; (10001d20 <runtime_init+0xd4>)
10001c9c:	4f21      	ldr	r7, [pc, #132]	; (10001d24 <runtime_init+0xd8>)
            hw_clear_alias(padsbank0_hw)->io[28] = hw_clear_alias(padsbank0_hw)->io[29] = PADS_BANK0_GPIO0_IE_BITS;
10001c9e:	679a      	str	r2, [r3, #120]	; 0x78
10001ca0:	675a      	str	r2, [r3, #116]	; 0x74
    hw_clear_alias(padsbank0_hw)->io[26] = hw_clear_alias(padsbank0_hw)->io[27] =
10001ca2:	671a      	str	r2, [r3, #112]	; 0x70
10001ca4:	66da      	str	r2, [r3, #108]	; 0x6c
    for (mutex_t *m = &__mutex_array_start; m < &__mutex_array_end; m++) {
10001ca6:	42bd      	cmp	r5, r7
10001ca8:	d20b      	bcs.n	10001cc2 <runtime_init+0x76>
10001caa:	2600      	movs	r6, #0
10001cac:	3f01      	subs	r7, #1
10001cae:	1b7f      	subs	r7, r7, r5
10001cb0:	08ff      	lsrs	r7, r7, #3
        mutex_init(m);
10001cb2:	0028      	movs	r0, r5
10001cb4:	f7ff fc6e 	bl	10001594 <mutex_init>
    for (mutex_t *m = &__mutex_array_start; m < &__mutex_array_end; m++) {
10001cb8:	3508      	adds	r5, #8
10001cba:	0033      	movs	r3, r6
10001cbc:	3601      	adds	r6, #1
10001cbe:	42bb      	cmp	r3, r7
10001cc0:	d1f7      	bne.n	10001cb2 <runtime_init+0x66>
    }

#if !(PICO_NO_RAM_VECTOR_TABLE || PICO_NO_FLASH)
    __builtin_memcpy(ram_vector_table, (uint32_t *) scb_hw->vtor, sizeof(ram_vector_table));
10001cc2:	4e19      	ldr	r6, [pc, #100]	; (10001d28 <runtime_init+0xdc>)
10001cc4:	4d19      	ldr	r5, [pc, #100]	; (10001d2c <runtime_init+0xe0>)
10001cc6:	22c0      	movs	r2, #192	; 0xc0
10001cc8:	68a9      	ldr	r1, [r5, #8]
10001cca:	0030      	movs	r0, r6
10001ccc:	f7fe fe64 	bl	10000998 <__wrap___aeabi_memcpy>
    scb_hw->vtor = (intptr_t) ram_vector_table;
10001cd0:	60ae      	str	r6, [r5, #8]
    // install core0 stack guard
    extern char __StackBottom;
    runtime_install_stack_guard(&__StackBottom);
#endif

    spin_locks_reset();
10001cd2:	f000 fb65 	bl	100023a0 <spin_locks_reset>
    irq_init_priorities();
10001cd6:	f7ff fbcb 	bl	10001470 <irq_init_priorities>
    alarm_pool_init_default();
10001cda:	f000 fdab 	bl	10002834 <alarm_pool_init_default>
    extern void (*__init_array_end)();

    // Call each function in the list.
    // We have to take the address of the symbols, as __init_array_start *is*
    // the first function pointer, not the address of it.
    for (void (**p)() = &__init_array_start; p < &__init_array_end; ++p) {
10001cde:	4d14      	ldr	r5, [pc, #80]	; (10001d30 <runtime_init+0xe4>)
10001ce0:	4e14      	ldr	r6, [pc, #80]	; (10001d34 <runtime_init+0xe8>)
10001ce2:	42b5      	cmp	r5, r6
10001ce4:	d208      	bcs.n	10001cf8 <runtime_init+0xac>
10001ce6:	3e01      	subs	r6, #1
10001ce8:	1b76      	subs	r6, r6, r5
10001cea:	08b6      	lsrs	r6, r6, #2
        (*p)();
10001cec:	cd08      	ldmia	r5!, {r3}
10001cee:	4798      	blx	r3
    for (void (**p)() = &__init_array_start; p < &__init_array_end; ++p) {
10001cf0:	0023      	movs	r3, r4
10001cf2:	3401      	adds	r4, #1
10001cf4:	429e      	cmp	r6, r3
10001cf6:	d1f9      	bne.n	10001cec <runtime_init+0xa0>
    }

}
10001cf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10001cfa:	46c0      	nop			; (mov r8, r8)
10001cfc:	ffffcdbf 	.word	0xffffcdbf
10001d00:	4000e000 	.word	0x4000e000
10001d04:	4000c000 	.word	0x4000c000
10001d08:	003c7ffe 	.word	0x003c7ffe
10001d0c:	4000f000 	.word	0x4000f000
10001d10:	20003038 	.word	0x20003038
10001d14:	20003048 	.word	0x20003048
10001d18:	01ffffff 	.word	0x01ffffff
10001d1c:	4001f000 	.word	0x4001f000
10001d20:	20003030 	.word	0x20003030
10001d24:	20003038 	.word	0x20003038
10001d28:	20000000 	.word	0x20000000
10001d2c:	e000ed00 	.word	0xe000ed00
10001d30:	20003048 	.word	0x20003048
10001d34:	20003050 	.word	0x20003050

10001d38 <_sbrk>:
void *_sbrk(int incr) {
    extern char end; /* Set by linker.  */
    static char *heap_end;
    char *prev_heap_end;

    if (heap_end == 0)
10001d38:	4a09      	ldr	r2, [pc, #36]	; (10001d60 <_sbrk+0x28>)
void *_sbrk(int incr) {
10001d3a:	0003      	movs	r3, r0
    if (heap_end == 0)
10001d3c:	6810      	ldr	r0, [r2, #0]
10001d3e:	2800      	cmp	r0, #0
10001d40:	d005      	beq.n	10001d4e <_sbrk+0x16>
        heap_end = &end;

    prev_heap_end = heap_end;
    char *next_heap_end = heap_end + incr;

    if (__builtin_expect(next_heap_end >= (&__StackLimit), false)) {
10001d42:	4908      	ldr	r1, [pc, #32]	; (10001d64 <_sbrk+0x2c>)
    char *next_heap_end = heap_end + incr;
10001d44:	18c3      	adds	r3, r0, r3
    if (__builtin_expect(next_heap_end >= (&__StackLimit), false)) {
10001d46:	428b      	cmp	r3, r1
10001d48:	d207      	bcs.n	10001d5a <_sbrk+0x22>
#else
        return (char *) -1;
#endif
    }

    heap_end = next_heap_end;
10001d4a:	6013      	str	r3, [r2, #0]
    return (void *) prev_heap_end;
}
10001d4c:	4770      	bx	lr
        heap_end = &end;
10001d4e:	4806      	ldr	r0, [pc, #24]	; (10001d68 <_sbrk+0x30>)
    if (__builtin_expect(next_heap_end >= (&__StackLimit), false)) {
10001d50:	4904      	ldr	r1, [pc, #16]	; (10001d64 <_sbrk+0x2c>)
    char *next_heap_end = heap_end + incr;
10001d52:	18c3      	adds	r3, r0, r3
        heap_end = &end;
10001d54:	6010      	str	r0, [r2, #0]
    if (__builtin_expect(next_heap_end >= (&__StackLimit), false)) {
10001d56:	428b      	cmp	r3, r1
10001d58:	d3f7      	bcc.n	10001d4a <_sbrk+0x12>
        return (char *) -1;
10001d5a:	2001      	movs	r0, #1
10001d5c:	4240      	negs	r0, r0
10001d5e:	e7f5      	b.n	10001d4c <_sbrk+0x14>
10001d60:	200120a4 	.word	0x200120a4
10001d64:	20040000 	.word	0x20040000
10001d68:	20012778 	.word	0x20012778

10001d6c <exit>:
    __asm__("bkpt #0");
10001d6c:	be00      	bkpt	0x0000
10001d6e:	e7fd      	b.n	10001d6c <exit>

10001d70 <panic>:
//  right now, print mutex may be uninitialised (in which case it deadlocks - although after printing "PANIC")
//  more importantly there may be no stdout/UART initialized yet
// todo we may want to think about where we print panic messages to; writing to USB appears to work
//  though it doesn't seem like we can expect it to... fine for now
//
void __attribute__((noreturn)) __printflike(1, 0) panic(const char *fmt, ...) {
10001d70:	b40f      	push	{r0, r1, r2, r3}
10001d72:	b500      	push	{lr}
    puts("\n*** PANIC ***\n");
10001d74:	4808      	ldr	r0, [pc, #32]	; (10001d98 <panic+0x28>)
void __attribute__((noreturn)) __printflike(1, 0) panic(const char *fmt, ...) {
10001d76:	b083      	sub	sp, #12
    puts("\n*** PANIC ***\n");
10001d78:	f000 f8f2 	bl	10001f60 <__wrap_puts>
    if (fmt) {
10001d7c:	9b04      	ldr	r3, [sp, #16]
10001d7e:	2b00      	cmp	r3, #0
10001d80:	d007      	beq.n	10001d92 <panic+0x22>
#if PICO_PRINTF_NONE
        puts(fmt);
#else
        va_list args;
        va_start(args, fmt);
10001d82:	a905      	add	r1, sp, #20
#if PICO_PRINTF_ALWAYS_INCLUDED
        vprintf(fmt, args);
#else
        weak_raw_vprintf(fmt, args);
10001d84:	0018      	movs	r0, r3
        va_start(args, fmt);
10001d86:	9101      	str	r1, [sp, #4]
        weak_raw_vprintf(fmt, args);
10001d88:	f7ff ff48 	bl	10001c1c <weak_raw_vprintf>
#endif
        va_end(args);
        puts("\n");
10001d8c:	4803      	ldr	r0, [pc, #12]	; (10001d9c <panic+0x2c>)
10001d8e:	f000 f8e7 	bl	10001f60 <__wrap_puts>
10001d92:	be00      	bkpt	0x0000
10001d94:	e7fd      	b.n	10001d92 <panic+0x22>
10001d96:	46c0      	nop			; (mov r8, r8)
10001d98:	1000e3a4 	.word	0x1000e3a4
10001d9c:	1000e3b4 	.word	0x1000e3b4

10001da0 <hard_assertion_failure>:
    }

    _exit(1);
}

void hard_assertion_failure(void) {
10001da0:	b510      	push	{r4, lr}
    panic("Hard assert");
10001da2:	4801      	ldr	r0, [pc, #4]	; (10001da8 <hard_assertion_failure+0x8>)
10001da4:	f7ff ffe4 	bl	10001d70 <panic>
10001da8:	1000e3b8 	.word	0x1000e3b8

10001dac <stdio_out_chars_crlf.part.0>:
}
static void print_serialize_end() {
}
#endif

static void stdio_out_chars_crlf(stdio_driver_t *driver, const char *s, int len) {
10001dac:	b5f0      	push	{r4, r5, r6, r7, lr}
10001dae:	4646      	mov	r6, r8
10001db0:	464f      	mov	r7, r9
10001db2:	46d6      	mov	lr, sl
10001db4:	4680      	mov	r8, r0
10001db6:	b5c0      	push	{r6, r7, lr}
10001db8:	000e      	movs	r6, r1
10001dba:	1e17      	subs	r7, r2, #0
        driver->out_chars(s, len);
        return;
    }
    int first_of_chunk = 0;
    static const char crlf_str[] = {'\r', '\n'};
    for (int i = 0; i < len; i++) {
10001dbc:	dd3f      	ble.n	10001e3e <stdio_out_chars_crlf.part.0+0x92>
        bool prev_char_was_cr = i > 0 ? s[i - 1] == '\r' : driver->last_ended_with_cr;
10001dbe:	1e4b      	subs	r3, r1, #1
10001dc0:	4699      	mov	r9, r3
        if (s[i] == '\n' && !prev_char_was_cr) {
            if (i > first_of_chunk) {
                driver->out_chars(&s[first_of_chunk], i - first_of_chunk);
            }
            driver->out_chars(crlf_str, 2);
10001dc2:	4b21      	ldr	r3, [pc, #132]	; (10001e48 <stdio_out_chars_crlf.part.0+0x9c>)
    for (int i = 0; i < len; i++) {
10001dc4:	2501      	movs	r5, #1
10001dc6:	2400      	movs	r4, #0
    int first_of_chunk = 0;
10001dc8:	2000      	movs	r0, #0
            driver->out_chars(crlf_str, 2);
10001dca:	469a      	mov	sl, r3
10001dcc:	e00d      	b.n	10001dea <stdio_out_chars_crlf.part.0+0x3e>
        bool prev_char_was_cr = i > 0 ? s[i - 1] == '\r' : driver->last_ended_with_cr;
10001dce:	464b      	mov	r3, r9
10001dd0:	5d1b      	ldrb	r3, [r3, r4]
10001dd2:	3b0d      	subs	r3, #13
10001dd4:	425a      	negs	r2, r3
10001dd6:	4153      	adcs	r3, r2
        if (s[i] == '\n' && !prev_char_was_cr) {
10001dd8:	5d32      	ldrb	r2, [r6, r4]
        bool prev_char_was_cr = i > 0 ? s[i - 1] == '\r' : driver->last_ended_with_cr;
10001dda:	b2db      	uxtb	r3, r3
        if (s[i] == '\n' && !prev_char_was_cr) {
10001ddc:	2a0a      	cmp	r2, #10
10001dde:	d00b      	beq.n	10001df8 <stdio_out_chars_crlf.part.0+0x4c>
            first_of_chunk = i + 1;
10001de0:	002b      	movs	r3, r5
    for (int i = 0; i < len; i++) {
10001de2:	3401      	adds	r4, #1
10001de4:	3501      	adds	r5, #1
10001de6:	429f      	cmp	r7, r3
10001de8:	dd1a      	ble.n	10001e20 <stdio_out_chars_crlf.part.0+0x74>
        bool prev_char_was_cr = i > 0 ? s[i - 1] == '\r' : driver->last_ended_with_cr;
10001dea:	2c00      	cmp	r4, #0
10001dec:	d1ef      	bne.n	10001dce <stdio_out_chars_crlf.part.0+0x22>
10001dee:	4643      	mov	r3, r8
        if (s[i] == '\n' && !prev_char_was_cr) {
10001df0:	5d32      	ldrb	r2, [r6, r4]
        bool prev_char_was_cr = i > 0 ? s[i - 1] == '\r' : driver->last_ended_with_cr;
10001df2:	7c1b      	ldrb	r3, [r3, #16]
        if (s[i] == '\n' && !prev_char_was_cr) {
10001df4:	2a0a      	cmp	r2, #10
10001df6:	d1f3      	bne.n	10001de0 <stdio_out_chars_crlf.part.0+0x34>
10001df8:	2b00      	cmp	r3, #0
10001dfa:	d1f1      	bne.n	10001de0 <stdio_out_chars_crlf.part.0+0x34>
            if (i > first_of_chunk) {
10001dfc:	42a0      	cmp	r0, r4
10001dfe:	da04      	bge.n	10001e0a <stdio_out_chars_crlf.part.0+0x5e>
                driver->out_chars(&s[first_of_chunk], i - first_of_chunk);
10001e00:	4643      	mov	r3, r8
10001e02:	1a21      	subs	r1, r4, r0
10001e04:	681b      	ldr	r3, [r3, #0]
10001e06:	1830      	adds	r0, r6, r0
10001e08:	4798      	blx	r3
            driver->out_chars(crlf_str, 2);
10001e0a:	4643      	mov	r3, r8
10001e0c:	4650      	mov	r0, sl
10001e0e:	681b      	ldr	r3, [r3, #0]
10001e10:	2102      	movs	r1, #2
10001e12:	4798      	blx	r3
    for (int i = 0; i < len; i++) {
10001e14:	3401      	adds	r4, #1
            first_of_chunk = i + 1;
10001e16:	0028      	movs	r0, r5
10001e18:	002b      	movs	r3, r5
    for (int i = 0; i < len; i++) {
10001e1a:	3501      	adds	r5, #1
10001e1c:	429f      	cmp	r7, r3
10001e1e:	dce4      	bgt.n	10001dea <stdio_out_chars_crlf.part.0+0x3e>
        }
    }
    if (first_of_chunk < len) {
10001e20:	4287      	cmp	r7, r0
10001e22:	dd04      	ble.n	10001e2e <stdio_out_chars_crlf.part.0+0x82>
        driver->out_chars(&s[first_of_chunk], len - first_of_chunk);
10001e24:	4643      	mov	r3, r8
10001e26:	1a39      	subs	r1, r7, r0
10001e28:	681b      	ldr	r3, [r3, #0]
10001e2a:	1830      	adds	r0, r6, r0
10001e2c:	4798      	blx	r3
    }
    if (len > 0) {
        driver->last_ended_with_cr = s[len - 1] == '\r';
10001e2e:	19f6      	adds	r6, r6, r7
10001e30:	3e01      	subs	r6, #1
10001e32:	7833      	ldrb	r3, [r6, #0]
10001e34:	3b0d      	subs	r3, #13
10001e36:	425a      	negs	r2, r3
10001e38:	4153      	adcs	r3, r2
10001e3a:	4642      	mov	r2, r8
10001e3c:	7413      	strb	r3, [r2, #16]
    }
#else
    driver->out_chars(s, len);
#endif
}
10001e3e:	bce0      	pop	{r5, r6, r7}
10001e40:	46ba      	mov	sl, r7
10001e42:	46b1      	mov	r9, r6
10001e44:	46a8      	mov	r8, r5
10001e46:	bdf0      	pop	{r4, r5, r6, r7, pc}
10001e48:	1000e3c4 	.word	0x1000e3c4

10001e4c <stdio_put_string.isra.0>:

static bool stdio_put_string(const char *s, int len, bool newline) {
10001e4c:	b5f0      	push	{r4, r5, r6, r7, lr}
10001e4e:	4657      	mov	r7, sl
10001e50:	4645      	mov	r5, r8
10001e52:	46de      	mov	lr, fp
10001e54:	464e      	mov	r6, r9
 *  \ingroup hardware_sync
 *
 * \return The core number the call was made from
 */
static inline uint get_core_num() {
    return (*(uint32_t *) (SIO_BASE + SIO_CPUID_OFFSET));
10001e56:	23d0      	movs	r3, #208	; 0xd0
10001e58:	b5e0      	push	{r5, r6, r7, lr}
10001e5a:	061b      	lsls	r3, r3, #24
10001e5c:	681c      	ldr	r4, [r3, #0]
    if (!mutex_try_enter(&print_mutex, &owner)) {
10001e5e:	4b35      	ldr	r3, [pc, #212]	; (10001f34 <stdio_put_string.isra.0+0xe8>)
static bool stdio_put_string(const char *s, int len, bool newline) {
10001e60:	b083      	sub	sp, #12
10001e62:	0007      	movs	r7, r0
10001e64:	000d      	movs	r5, r1
    if (!mutex_try_enter(&print_mutex, &owner)) {
10001e66:	0018      	movs	r0, r3
10001e68:	a901      	add	r1, sp, #4
static bool stdio_put_string(const char *s, int len, bool newline) {
10001e6a:	4690      	mov	r8, r2
    if (!mutex_try_enter(&print_mutex, &owner)) {
10001e6c:	469a      	mov	sl, r3
10001e6e:	f00c fa33 	bl	1000e2d8 <__mutex_try_enter_veneer>
10001e72:	4681      	mov	r9, r0
10001e74:	2800      	cmp	r0, #0
10001e76:	d107      	bne.n	10001e88 <stdio_put_string.isra.0+0x3c>
        if (owner == core_num) {
10001e78:	9b01      	ldr	r3, [sp, #4]
10001e7a:	429c      	cmp	r4, r3
10001e7c:	d004      	beq.n	10001e88 <stdio_put_string.isra.0+0x3c>
        mutex_enter_blocking(&print_mutex);
10001e7e:	4650      	mov	r0, sl
10001e80:	f00c fa42 	bl	1000e308 <__mutex_enter_blocking_veneer>
    return true;
10001e84:	2301      	movs	r3, #1
10001e86:	4699      	mov	r9, r3
    if (!serialzed) {
#if PICO_STDIO_IGNORE_NESTED_STDOUT
        return false;
#endif
    }
    if (len == -1) len = strlen(s);
10001e88:	1c6b      	adds	r3, r5, #1
10001e8a:	d103      	bne.n	10001e94 <stdio_put_string.isra.0+0x48>
10001e8c:	0038      	movs	r0, r7
10001e8e:	f00c f8a5 	bl	1000dfdc <strlen>
10001e92:	0005      	movs	r5, r0
    for (stdio_driver_t *driver = drivers; driver; driver = driver->next) {
10001e94:	4b28      	ldr	r3, [pc, #160]	; (10001f38 <stdio_put_string.isra.0+0xec>)
10001e96:	681c      	ldr	r4, [r3, #0]
10001e98:	2c00      	cmp	r4, #0
10001e9a:	d02f      	beq.n	10001efc <stdio_put_string.isra.0+0xb0>
        if (!driver->out_chars) continue;
        if (filter && filter != driver) continue;
        stdio_out_chars_crlf(driver, s, len);
        if (newline) {
            const char c = '\n';
10001e9c:	230a      	movs	r3, #10
        if (filter && filter != driver) continue;
10001e9e:	4e27      	ldr	r6, [pc, #156]	; (10001f3c <stdio_put_string.isra.0+0xf0>)
            const char c = '\n';
10001ea0:	469b      	mov	fp, r3
10001ea2:	e002      	b.n	10001eaa <stdio_put_string.isra.0+0x5e>
    for (stdio_driver_t *driver = drivers; driver; driver = driver->next) {
10001ea4:	68e4      	ldr	r4, [r4, #12]
10001ea6:	2c00      	cmp	r4, #0
10001ea8:	d028      	beq.n	10001efc <stdio_put_string.isra.0+0xb0>
        if (!driver->out_chars) continue;
10001eaa:	6822      	ldr	r2, [r4, #0]
10001eac:	2a00      	cmp	r2, #0
10001eae:	d0f9      	beq.n	10001ea4 <stdio_put_string.isra.0+0x58>
        if (filter && filter != driver) continue;
10001eb0:	6833      	ldr	r3, [r6, #0]
10001eb2:	2b00      	cmp	r3, #0
10001eb4:	d001      	beq.n	10001eba <stdio_put_string.isra.0+0x6e>
10001eb6:	42a3      	cmp	r3, r4
10001eb8:	d1f4      	bne.n	10001ea4 <stdio_put_string.isra.0+0x58>
    if (!driver->crlf_enabled) {
10001eba:	7c63      	ldrb	r3, [r4, #17]
10001ebc:	2b00      	cmp	r3, #0
10001ebe:	d027      	beq.n	10001f10 <stdio_put_string.isra.0+0xc4>
10001ec0:	002a      	movs	r2, r5
10001ec2:	0039      	movs	r1, r7
10001ec4:	0020      	movs	r0, r4
10001ec6:	f7ff ff71 	bl	10001dac <stdio_out_chars_crlf.part.0>
        if (newline) {
10001eca:	4643      	mov	r3, r8
10001ecc:	2b00      	cmp	r3, #0
10001ece:	d0e9      	beq.n	10001ea4 <stdio_put_string.isra.0+0x58>
            const char c = '\n';
10001ed0:	466b      	mov	r3, sp
10001ed2:	465a      	mov	r2, fp
10001ed4:	711a      	strb	r2, [r3, #4]
    if (!driver->crlf_enabled) {
10001ed6:	7c63      	ldrb	r3, [r4, #17]
10001ed8:	2b00      	cmp	r3, #0
10001eda:	d01d      	beq.n	10001f18 <stdio_put_string.isra.0+0xcc>
        if (s[i] == '\n' && !prev_char_was_cr) {
10001edc:	7c23      	ldrb	r3, [r4, #16]
10001ede:	2b00      	cmp	r3, #0
10001ee0:	d023      	beq.n	10001f2a <stdio_put_string.isra.0+0xde>
        driver->out_chars(&s[first_of_chunk], len - first_of_chunk);
10001ee2:	2101      	movs	r1, #1
10001ee4:	6823      	ldr	r3, [r4, #0]
10001ee6:	a801      	add	r0, sp, #4
10001ee8:	4798      	blx	r3
        driver->last_ended_with_cr = s[len - 1] == '\r';
10001eea:	466b      	mov	r3, sp
10001eec:	791b      	ldrb	r3, [r3, #4]
10001eee:	3b0d      	subs	r3, #13
10001ef0:	425a      	negs	r2, r3
10001ef2:	4153      	adcs	r3, r2
10001ef4:	7423      	strb	r3, [r4, #16]
    for (stdio_driver_t *driver = drivers; driver; driver = driver->next) {
10001ef6:	68e4      	ldr	r4, [r4, #12]
10001ef8:	2c00      	cmp	r4, #0
10001efa:	d1d6      	bne.n	10001eaa <stdio_put_string.isra.0+0x5e>
            stdio_out_chars_crlf(driver, &c, 1);
        }
    }
    if (serialzed) {
10001efc:	464b      	mov	r3, r9
10001efe:	2b00      	cmp	r3, #0
10001f00:	d10f      	bne.n	10001f22 <stdio_put_string.isra.0+0xd6>
        stdout_serialize_end();
    }
    return len;
}
10001f02:	b003      	add	sp, #12
10001f04:	bcf0      	pop	{r4, r5, r6, r7}
10001f06:	46bb      	mov	fp, r7
10001f08:	46b2      	mov	sl, r6
10001f0a:	46a9      	mov	r9, r5
10001f0c:	46a0      	mov	r8, r4
10001f0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        driver->out_chars(s, len);
10001f10:	0029      	movs	r1, r5
10001f12:	0038      	movs	r0, r7
10001f14:	4790      	blx	r2
        return;
10001f16:	e7d8      	b.n	10001eca <stdio_put_string.isra.0+0x7e>
        driver->out_chars(s, len);
10001f18:	2101      	movs	r1, #1
10001f1a:	6823      	ldr	r3, [r4, #0]
10001f1c:	a801      	add	r0, sp, #4
10001f1e:	4798      	blx	r3
        return;
10001f20:	e7c0      	b.n	10001ea4 <stdio_put_string.isra.0+0x58>
    mutex_exit(&print_mutex);
10001f22:	4650      	mov	r0, sl
10001f24:	f00c f9c0 	bl	1000e2a8 <__mutex_exit_veneer>
    return len;
10001f28:	e7eb      	b.n	10001f02 <stdio_put_string.isra.0+0xb6>
            driver->out_chars(crlf_str, 2);
10001f2a:	2102      	movs	r1, #2
10001f2c:	4804      	ldr	r0, [pc, #16]	; (10001f40 <stdio_put_string.isra.0+0xf4>)
10001f2e:	6823      	ldr	r3, [r4, #0]
10001f30:	4798      	blx	r3
    if (first_of_chunk < len) {
10001f32:	e7da      	b.n	10001eea <stdio_put_string.isra.0+0x9e>
10001f34:	20003030 	.word	0x20003030
10001f38:	20012098 	.word	0x20012098
10001f3c:	200120a0 	.word	0x200120a0
10001f40:	1000e3c4 	.word	0x1000e3c4

10001f44 <__wrap_putchar>:
        // todo maybe a little sleep here?
    } while (!time_reached(until));
    return PICO_ERROR_TIMEOUT;
}

int WRAPPER_FUNC(putchar)(int c) {
10001f44:	b510      	push	{r4, lr}
10001f46:	b082      	sub	sp, #8
    char cc = c;
10001f48:	466b      	mov	r3, sp
int WRAPPER_FUNC(putchar)(int c) {
10001f4a:	0004      	movs	r4, r0
    stdio_put_string(&cc, 1, false);
10001f4c:	2200      	movs	r2, #0
    char cc = c;
10001f4e:	1dd8      	adds	r0, r3, #7
    stdio_put_string(&cc, 1, false);
10001f50:	2101      	movs	r1, #1
    char cc = c;
10001f52:	7004      	strb	r4, [r0, #0]
    stdio_put_string(&cc, 1, false);
10001f54:	f7ff ff7a 	bl	10001e4c <stdio_put_string.isra.0>
    return c;
}
10001f58:	0020      	movs	r0, r4
10001f5a:	b002      	add	sp, #8
10001f5c:	bd10      	pop	{r4, pc}
10001f5e:	46c0      	nop			; (mov r8, r8)

10001f60 <__wrap_puts>:

int WRAPPER_FUNC(puts)(const char *s) {
10001f60:	b570      	push	{r4, r5, r6, lr}
10001f62:	0004      	movs	r4, r0
    int len = strlen(s);
10001f64:	f00c f83a 	bl	1000dfdc <strlen>
    stdio_put_string(s, len, true);
10001f68:	2201      	movs	r2, #1
10001f6a:	0001      	movs	r1, r0
    int len = strlen(s);
10001f6c:	0005      	movs	r5, r0
    stdio_put_string(s, len, true);
10001f6e:	0020      	movs	r0, r4
10001f70:	f7ff ff6c 	bl	10001e4c <stdio_put_string.isra.0>
        else drivers = driver;
    }
}

void stdio_flush() {
    for (stdio_driver_t *d = drivers; d; d = d->next) {
10001f74:	4b08      	ldr	r3, [pc, #32]	; (10001f98 <__wrap_puts+0x38>)
10001f76:	681c      	ldr	r4, [r3, #0]
10001f78:	2c00      	cmp	r4, #0
10001f7a:	d006      	beq.n	10001f8a <__wrap_puts+0x2a>
        if (d->out_flush) d->out_flush();
10001f7c:	6863      	ldr	r3, [r4, #4]
10001f7e:	2b00      	cmp	r3, #0
10001f80:	d005      	beq.n	10001f8e <__wrap_puts+0x2e>
10001f82:	4798      	blx	r3
    for (stdio_driver_t *d = drivers; d; d = d->next) {
10001f84:	68e4      	ldr	r4, [r4, #12]
10001f86:	2c00      	cmp	r4, #0
10001f88:	d1f8      	bne.n	10001f7c <__wrap_puts+0x1c>
}
10001f8a:	0028      	movs	r0, r5
10001f8c:	bd70      	pop	{r4, r5, r6, pc}
    for (stdio_driver_t *d = drivers; d; d = d->next) {
10001f8e:	68e4      	ldr	r4, [r4, #12]
10001f90:	2c00      	cmp	r4, #0
10001f92:	d1f3      	bne.n	10001f7c <__wrap_puts+0x1c>
10001f94:	e7f9      	b.n	10001f8a <__wrap_puts+0x2a>
10001f96:	46c0      	nop			; (mov r8, r8)
10001f98:	20012098 	.word	0x20012098

10001f9c <stdio_set_driver_enabled>:
    stdio_driver_t *prev = drivers;
10001f9c:	4a0d      	ldr	r2, [pc, #52]	; (10001fd4 <stdio_set_driver_enabled+0x38>)
10001f9e:	6813      	ldr	r3, [r2, #0]
    for (stdio_driver_t *d = drivers; d; d = d->next) {
10001fa0:	2b00      	cmp	r3, #0
10001fa2:	d013      	beq.n	10001fcc <stdio_set_driver_enabled+0x30>
        if (d == driver) {
10001fa4:	4283      	cmp	r3, r0
10001fa6:	d102      	bne.n	10001fae <stdio_set_driver_enabled+0x12>
10001fa8:	e009      	b.n	10001fbe <stdio_set_driver_enabled+0x22>
10001faa:	4298      	cmp	r0, r3
10001fac:	d008      	beq.n	10001fc0 <stdio_set_driver_enabled+0x24>
    for (stdio_driver_t *d = drivers; d; d = d->next) {
10001fae:	001a      	movs	r2, r3
10001fb0:	68db      	ldr	r3, [r3, #12]
10001fb2:	2b00      	cmp	r3, #0
10001fb4:	d1f9      	bne.n	10001faa <stdio_set_driver_enabled+0xe>
    if (enable) {
10001fb6:	2900      	cmp	r1, #0
10001fb8:	d000      	beq.n	10001fbc <stdio_set_driver_enabled+0x20>
        if (prev) prev->next = driver;
10001fba:	60d0      	str	r0, [r2, #12]
}
10001fbc:	4770      	bx	lr
        if (d == driver) {
10001fbe:	001a      	movs	r2, r3
            if (!enable) {
10001fc0:	2900      	cmp	r1, #0
10001fc2:	d1fb      	bne.n	10001fbc <stdio_set_driver_enabled+0x20>
                prev->next = d->next;
10001fc4:	68db      	ldr	r3, [r3, #12]
10001fc6:	60d3      	str	r3, [r2, #12]
                driver->next = NULL;
10001fc8:	60c1      	str	r1, [r0, #12]
10001fca:	e7f7      	b.n	10001fbc <stdio_set_driver_enabled+0x20>
    if (enable) {
10001fcc:	2900      	cmp	r1, #0
10001fce:	d0f5      	beq.n	10001fbc <stdio_set_driver_enabled+0x20>
        else drivers = driver;
10001fd0:	6010      	str	r0, [r2, #0]
10001fd2:	e7f3      	b.n	10001fbc <stdio_set_driver_enabled+0x20>
10001fd4:	20012098 	.word	0x20012098

10001fd8 <stdio_init_all>:
    int ret = vprintf(format, va);
    va_end(va);
    return ret;
}

void stdio_init_all() {
10001fd8:	b510      	push	{r4, lr}
#if PICO_STDIO_SEMIHOSTING
    stdio_semihosting_init();
#endif

#if PICO_STDIO_USB
    stdio_usb_init();
10001fda:	f000 f925 	bl	10002228 <stdio_usb_init>
#endif
}
10001fde:	bd10      	pop	{r4, pc}

10001fe0 <getchar_timeout_us>:
        return PICO_ERROR_TIMEOUT;
    }
    return (uint8_t)buf[0];
}

int getchar_timeout_us(uint32_t timeout_us) {
10001fe0:	b5f0      	push	{r4, r5, r6, r7, lr}
10001fe2:	46d6      	mov	lr, sl
10001fe4:	464f      	mov	r7, r9
10001fe6:	4646      	mov	r6, r8
10001fe8:	b5c0      	push	{r6, r7, lr}
10001fea:	b082      	sub	sp, #8
10001fec:	0004      	movs	r4, r0
 * \sa sleep_until()
 * \sa time_us_64()
 */
static inline absolute_time_t get_absolute_time() {
    absolute_time_t t;
    update_us_since_boot(&t, time_us_64());
10001fee:	f000 fe59 	bl	10002ca4 <time_us_64>
    char buf[1];
    int rc = stdio_get_until(buf, sizeof(buf), make_timeout_time_us(timeout_us));
10001ff2:	0026      	movs	r6, r4
10001ff4:	0002      	movs	r2, r0
10001ff6:	000b      	movs	r3, r1
10001ff8:	2700      	movs	r7, #0
 * \return the timestamp representing the resulting time
 */
static inline absolute_time_t delayed_by_us(const absolute_time_t t, uint64_t us) {
    absolute_time_t t2;
    uint64_t base = to_us_since_boot(t);
    uint64_t delayed = base + us;
10001ffa:	18b6      	adds	r6, r6, r2
10001ffc:	415f      	adcs	r7, r3
    if (delayed < base) {
10001ffe:	42b9      	cmp	r1, r7
10002000:	d831      	bhi.n	10002066 <getchar_timeout_us+0x86>
10002002:	d02e      	beq.n	10002062 <getchar_timeout_us+0x82>
 * \param t Absolute time to compare against current time
 * \return true if it is now after the specified timestamp
 */
static inline bool time_reached(absolute_time_t t) {
    uint64_t target = to_us_since_boot(t);
    uint32_t hi_target = target >> 32u;
10002004:	46b9      	mov	r9, r7
static int stdio_get_until(char *buf, int len, absolute_time_t until) {
10002006:	4b25      	ldr	r3, [pc, #148]	; (1000209c <getchar_timeout_us+0xbc>)
10002008:	4d25      	ldr	r5, [pc, #148]	; (100020a0 <getchar_timeout_us+0xc0>)
1000200a:	469a      	mov	sl, r3
        for (stdio_driver_t *driver = drivers; driver; driver = driver->next) {
1000200c:	4653      	mov	r3, sl
1000200e:	681b      	ldr	r3, [r3, #0]
10002010:	4698      	mov	r8, r3
10002012:	1e1c      	subs	r4, r3, #0
10002014:	d103      	bne.n	1000201e <getchar_timeout_us+0x3e>
10002016:	e03c      	b.n	10002092 <getchar_timeout_us+0xb2>
10002018:	68e4      	ldr	r4, [r4, #12]
1000201a:	2c00      	cmp	r4, #0
1000201c:	d014      	beq.n	10002048 <getchar_timeout_us+0x68>
            if (filter && filter != driver) continue;
1000201e:	682b      	ldr	r3, [r5, #0]
10002020:	2b00      	cmp	r3, #0
10002022:	d001      	beq.n	10002028 <getchar_timeout_us+0x48>
10002024:	42a3      	cmp	r3, r4
10002026:	d1f7      	bne.n	10002018 <getchar_timeout_us+0x38>
            if (driver->in_chars) {
10002028:	68a3      	ldr	r3, [r4, #8]
1000202a:	2b00      	cmp	r3, #0
1000202c:	d0f4      	beq.n	10002018 <getchar_timeout_us+0x38>
                int read = driver->in_chars(buf, len);
1000202e:	2101      	movs	r1, #1
10002030:	a801      	add	r0, sp, #4
10002032:	4798      	blx	r3
                if (read > 0) {
10002034:	2800      	cmp	r0, #0
10002036:	ddef      	ble.n	10002018 <getchar_timeout_us+0x38>
    if (rc < 0) return rc;
    assert(rc);
    return (uint8_t)buf[0];
10002038:	466b      	mov	r3, sp
1000203a:	7918      	ldrb	r0, [r3, #4]
}
1000203c:	b002      	add	sp, #8
1000203e:	bce0      	pop	{r5, r6, r7}
10002040:	46ba      	mov	sl, r7
10002042:	46b1      	mov	r9, r6
10002044:	46a8      	mov	r8, r5
10002046:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint32_t hi = timer_hw->timerawh;
10002048:	4b16      	ldr	r3, [pc, #88]	; (100020a4 <getchar_timeout_us+0xc4>)
1000204a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    return (hi >= hi_target && (timer_hw->timerawl >= (uint32_t) target || hi != hi_target));
1000204c:	4599      	cmp	r9, r3
1000204e:	d8dd      	bhi.n	1000200c <getchar_timeout_us+0x2c>
10002050:	4a14      	ldr	r2, [pc, #80]	; (100020a4 <getchar_timeout_us+0xc4>)
10002052:	6a92      	ldr	r2, [r2, #40]	; 0x28
10002054:	42b2      	cmp	r2, r6
10002056:	d201      	bcs.n	1000205c <getchar_timeout_us+0x7c>
10002058:	4599      	cmp	r9, r3
1000205a:	d00b      	beq.n	10002074 <getchar_timeout_us+0x94>
1000205c:	2001      	movs	r0, #1
1000205e:	4240      	negs	r0, r0
10002060:	e7ec      	b.n	1000203c <getchar_timeout_us+0x5c>
10002062:	42b0      	cmp	r0, r6
10002064:	d9ce      	bls.n	10002004 <getchar_timeout_us+0x24>
10002066:	2301      	movs	r3, #1
10002068:	425b      	negs	r3, r3
1000206a:	4699      	mov	r9, r3
        delayed = (uint64_t)-1;
1000206c:	2601      	movs	r6, #1
1000206e:	4276      	negs	r6, r6
10002070:	17f7      	asrs	r7, r6, #31
10002072:	e7c8      	b.n	10002006 <getchar_timeout_us+0x26>
10002074:	4643      	mov	r3, r8
10002076:	2b00      	cmp	r3, #0
10002078:	d1c8      	bne.n	1000200c <getchar_timeout_us+0x2c>
    uint32_t hi = timer_hw->timerawh;
1000207a:	4a0a      	ldr	r2, [pc, #40]	; (100020a4 <getchar_timeout_us+0xc4>)
1000207c:	6a53      	ldr	r3, [r2, #36]	; 0x24
    return (hi >= hi_target && (timer_hw->timerawl >= (uint32_t) target || hi != hi_target));
1000207e:	4599      	cmp	r9, r3
10002080:	d8fc      	bhi.n	1000207c <getchar_timeout_us+0x9c>
10002082:	6a91      	ldr	r1, [r2, #40]	; 0x28
10002084:	42b1      	cmp	r1, r6
10002086:	d2e9      	bcs.n	1000205c <getchar_timeout_us+0x7c>
10002088:	4599      	cmp	r9, r3
1000208a:	d0f7      	beq.n	1000207c <getchar_timeout_us+0x9c>
1000208c:	2001      	movs	r0, #1
1000208e:	4240      	negs	r0, r0
10002090:	e7d4      	b.n	1000203c <getchar_timeout_us+0x5c>
    uint32_t hi = timer_hw->timerawh;
10002092:	4b04      	ldr	r3, [pc, #16]	; (100020a4 <getchar_timeout_us+0xc4>)
10002094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    return (hi >= hi_target && (timer_hw->timerawl >= (uint32_t) target || hi != hi_target));
10002096:	454b      	cmp	r3, r9
10002098:	d2da      	bcs.n	10002050 <getchar_timeout_us+0x70>
1000209a:	e7ee      	b.n	1000207a <getchar_timeout_us+0x9a>
1000209c:	20012098 	.word	0x20012098
100020a0:	200120a0 	.word	0x200120a0
100020a4:	40054000 	.word	0x40054000

100020a8 <stdio_usb_in_chars>:
        last_avail_time = 0;
    }
    mutex_exit(&stdio_usb_mutex);
}

int stdio_usb_in_chars(char *buf, int length) {
100020a8:	b570      	push	{r4, r5, r6, lr}
    uint32_t owner;
    if (!mutex_try_enter(&stdio_usb_mutex, &owner)) {
100020aa:	4c18      	ldr	r4, [pc, #96]	; (1000210c <stdio_usb_in_chars+0x64>)
int stdio_usb_in_chars(char *buf, int length) {
100020ac:	b082      	sub	sp, #8
100020ae:	0006      	movs	r6, r0
100020b0:	000d      	movs	r5, r1
    if (!mutex_try_enter(&stdio_usb_mutex, &owner)) {
100020b2:	0020      	movs	r0, r4
100020b4:	a901      	add	r1, sp, #4
100020b6:	f00c f90f 	bl	1000e2d8 <__mutex_try_enter_veneer>
100020ba:	2800      	cmp	r0, #0
100020bc:	d108      	bne.n	100020d0 <stdio_usb_in_chars+0x28>
        if (owner == get_core_num()) return PICO_ERROR_NO_DATA; // would deadlock otherwise
100020be:	23d0      	movs	r3, #208	; 0xd0
100020c0:	061b      	lsls	r3, r3, #24
100020c2:	681b      	ldr	r3, [r3, #0]
100020c4:	9a01      	ldr	r2, [sp, #4]
100020c6:	429a      	cmp	r2, r3
100020c8:	d01c      	beq.n	10002104 <stdio_usb_in_chars+0x5c>
        mutex_enter_blocking(&stdio_usb_mutex);
100020ca:	0020      	movs	r0, r4
100020cc:	f00c f91c 	bl	1000e308 <__mutex_enter_blocking_veneer>
  return tud_cdc_n_write(itf, str, strlen(str));
}

static inline bool tud_cdc_connected (void)
{
  return tud_cdc_n_connected(0);
100020d0:	2000      	movs	r0, #0
100020d2:	f000 feeb 	bl	10002eac <tud_cdc_n_connected>
    }
    int rc = PICO_ERROR_NO_DATA;
    if (tud_cdc_connected() && tud_cdc_available()) {
100020d6:	2800      	cmp	r0, #0
100020d8:	d107      	bne.n	100020ea <stdio_usb_in_chars+0x42>
    int rc = PICO_ERROR_NO_DATA;
100020da:	2503      	movs	r5, #3
100020dc:	426d      	negs	r5, r5
        int count = tud_cdc_read(buf, length);
        rc =  count ? count : PICO_ERROR_NO_DATA;
    }
    mutex_exit(&stdio_usb_mutex);
100020de:	0020      	movs	r0, r4
100020e0:	f00c f8e2 	bl	1000e2a8 <__mutex_exit_veneer>
    return rc;
}
100020e4:	0028      	movs	r0, r5
100020e6:	b002      	add	sp, #8
100020e8:	bd70      	pop	{r4, r5, r6, pc}
  tud_cdc_n_set_wanted_char(0, wanted);
}

static inline uint32_t tud_cdc_available (void)
{
  return tud_cdc_n_available(0);
100020ea:	2000      	movs	r0, #0
100020ec:	f000 fef8 	bl	10002ee0 <tud_cdc_n_available>
    if (tud_cdc_connected() && tud_cdc_available()) {
100020f0:	2800      	cmp	r0, #0
100020f2:	d0f2      	beq.n	100020da <stdio_usb_in_chars+0x32>
  return tud_cdc_n_read_char(0);
}

static inline uint32_t tud_cdc_read (void* buffer, uint32_t bufsize)
{
  return tud_cdc_n_read(0, buffer, bufsize);
100020f4:	002a      	movs	r2, r5
100020f6:	0031      	movs	r1, r6
100020f8:	2000      	movs	r0, #0
100020fa:	f000 feff 	bl	10002efc <tud_cdc_n_read>
100020fe:	1e05      	subs	r5, r0, #0
        rc =  count ? count : PICO_ERROR_NO_DATA;
10002100:	d0eb      	beq.n	100020da <stdio_usb_in_chars+0x32>
10002102:	e7ec      	b.n	100020de <stdio_usb_in_chars+0x36>
        if (owner == get_core_num()) return PICO_ERROR_NO_DATA; // would deadlock otherwise
10002104:	2503      	movs	r5, #3
10002106:	426d      	negs	r5, r5
10002108:	e7ec      	b.n	100020e4 <stdio_usb_in_chars+0x3c>
1000210a:	46c0      	nop			; (mov r8, r8)
1000210c:	2001274c 	.word	0x2001274c

10002110 <stdio_usb_out_chars>:
static void stdio_usb_out_chars(const char *buf, int length) {
10002110:	b5f0      	push	{r4, r5, r6, r7, lr}
10002112:	46de      	mov	lr, fp
10002114:	464f      	mov	r7, r9
10002116:	4646      	mov	r6, r8
10002118:	b5c0      	push	{r6, r7, lr}
    if (!mutex_try_enter(&stdio_usb_mutex, &owner)) {
1000211a:	4b33      	ldr	r3, [pc, #204]	; (100021e8 <stdio_usb_out_chars+0xd8>)
static void stdio_usb_out_chars(const char *buf, int length) {
1000211c:	b082      	sub	sp, #8
1000211e:	4681      	mov	r9, r0
10002120:	000d      	movs	r5, r1
    if (!mutex_try_enter(&stdio_usb_mutex, &owner)) {
10002122:	0018      	movs	r0, r3
10002124:	a901      	add	r1, sp, #4
10002126:	469b      	mov	fp, r3
10002128:	f00c f8d6 	bl	1000e2d8 <__mutex_try_enter_veneer>
1000212c:	2800      	cmp	r0, #0
1000212e:	d108      	bne.n	10002142 <stdio_usb_out_chars+0x32>
        if (owner == get_core_num()) return; // would deadlock otherwise
10002130:	23d0      	movs	r3, #208	; 0xd0
10002132:	061b      	lsls	r3, r3, #24
10002134:	681b      	ldr	r3, [r3, #0]
10002136:	9a01      	ldr	r2, [sp, #4]
10002138:	429a      	cmp	r2, r3
1000213a:	d04f      	beq.n	100021dc <stdio_usb_out_chars+0xcc>
        mutex_enter_blocking(&stdio_usb_mutex);
1000213c:	4658      	mov	r0, fp
1000213e:	f00c f8e3 	bl	1000e308 <__mutex_enter_blocking_veneer>
  return tud_cdc_n_connected(0);
10002142:	2000      	movs	r0, #0
10002144:	f000 feb2 	bl	10002eac <tud_cdc_n_connected>
    if (tud_cdc_connected()) {
10002148:	2800      	cmp	r0, #0
1000214a:	d03f      	beq.n	100021cc <stdio_usb_out_chars+0xbc>
        for (int i = 0; i < length;) {
1000214c:	2400      	movs	r4, #0
1000214e:	2d00      	cmp	r5, #0
10002150:	dd41      	ble.n	100021d6 <stdio_usb_out_chars+0xc6>
                    (!tud_cdc_write_available() && time_us_64() > last_avail_time + PICO_STDIO_USB_STDOUT_TIMEOUT_US)) {
10002152:	4e26      	ldr	r6, [pc, #152]	; (100021ec <stdio_usb_out_chars+0xdc>)
10002154:	e011      	b.n	1000217a <stdio_usb_out_chars+0x6a>
                int n2 = tud_cdc_write(buf + i, n);
10002156:	464b      	mov	r3, r9
  return tud_cdc_n_write_char(0, ch);
}

static inline uint32_t tud_cdc_write (void const* buffer, uint32_t bufsize)
{
  return tud_cdc_n_write(0, buffer, bufsize);
10002158:	2000      	movs	r0, #0
1000215a:	1919      	adds	r1, r3, r4
1000215c:	f000 ff5a 	bl	10003014 <tud_cdc_n_write>
10002160:	4680      	mov	r8, r0
                tud_task();
10002162:	f001 fbab 	bl	100038bc <tud_task>
  return tud_cdc_n_write_str(0, str);
}

static inline uint32_t tud_cdc_write_flush (void)
{
  return tud_cdc_n_write_flush(0);
10002166:	2000      	movs	r0, #0
10002168:	f000 ff02 	bl	10002f70 <tud_cdc_n_write_flush>
                last_avail_time = time_us_64();
1000216c:	f000 fd9a 	bl	10002ca4 <time_us_64>
10002170:	6030      	str	r0, [r6, #0]
10002172:	6071      	str	r1, [r6, #4]
                i += n2;
10002174:	4444      	add	r4, r8
        for (int i = 0; i < length;) {
10002176:	42ac      	cmp	r4, r5
10002178:	da2d      	bge.n	100021d6 <stdio_usb_out_chars+0xc6>
}

static inline uint32_t tud_cdc_write_available(void)
{
  return tud_cdc_n_write_available(0);
1000217a:	2000      	movs	r0, #0
1000217c:	f000 ff66 	bl	1000304c <tud_cdc_n_write_available>
            int n = length - i;
10002180:	1b2f      	subs	r7, r5, r4
10002182:	0002      	movs	r2, r0
            if (n > avail) n = avail;
10002184:	42b8      	cmp	r0, r7
10002186:	dd00      	ble.n	1000218a <stdio_usb_out_chars+0x7a>
10002188:	003a      	movs	r2, r7
            if (n) {
1000218a:	2a00      	cmp	r2, #0
1000218c:	d1e3      	bne.n	10002156 <stdio_usb_out_chars+0x46>
                tud_task();
1000218e:	f001 fb95 	bl	100038bc <tud_task>
  return tud_cdc_n_write_flush(0);
10002192:	2000      	movs	r0, #0
10002194:	f000 feec 	bl	10002f70 <tud_cdc_n_write_flush>
  return tud_cdc_n_connected(0);
10002198:	2000      	movs	r0, #0
1000219a:	f000 fe87 	bl	10002eac <tud_cdc_n_connected>
                if (!tud_cdc_connected() ||
1000219e:	2800      	cmp	r0, #0
100021a0:	d019      	beq.n	100021d6 <stdio_usb_out_chars+0xc6>
  return tud_cdc_n_write_available(0);
100021a2:	2000      	movs	r0, #0
100021a4:	f000 ff52 	bl	1000304c <tud_cdc_n_write_available>
100021a8:	2800      	cmp	r0, #0
100021aa:	d1e4      	bne.n	10002176 <stdio_usb_out_chars+0x66>
                    (!tud_cdc_write_available() && time_us_64() > last_avail_time + PICO_STDIO_USB_STDOUT_TIMEOUT_US)) {
100021ac:	f000 fd7a 	bl	10002ca4 <time_us_64>
100021b0:	6832      	ldr	r2, [r6, #0]
100021b2:	6873      	ldr	r3, [r6, #4]
100021b4:	000f      	movs	r7, r1
100021b6:	2100      	movs	r1, #0
100021b8:	4684      	mov	ip, r0
100021ba:	480d      	ldr	r0, [pc, #52]	; (100021f0 <stdio_usb_out_chars+0xe0>)
100021bc:	1812      	adds	r2, r2, r0
100021be:	414b      	adcs	r3, r1
100021c0:	429f      	cmp	r7, r3
100021c2:	d808      	bhi.n	100021d6 <stdio_usb_out_chars+0xc6>
100021c4:	d1d7      	bne.n	10002176 <stdio_usb_out_chars+0x66>
100021c6:	4594      	cmp	ip, r2
100021c8:	d9d5      	bls.n	10002176 <stdio_usb_out_chars+0x66>
100021ca:	e004      	b.n	100021d6 <stdio_usb_out_chars+0xc6>
        last_avail_time = 0;
100021cc:	2000      	movs	r0, #0
100021ce:	2100      	movs	r1, #0
100021d0:	4b06      	ldr	r3, [pc, #24]	; (100021ec <stdio_usb_out_chars+0xdc>)
100021d2:	6018      	str	r0, [r3, #0]
100021d4:	6059      	str	r1, [r3, #4]
    mutex_exit(&stdio_usb_mutex);
100021d6:	4658      	mov	r0, fp
100021d8:	f00c f866 	bl	1000e2a8 <__mutex_exit_veneer>
}
100021dc:	b002      	add	sp, #8
100021de:	bce0      	pop	{r5, r6, r7}
100021e0:	46bb      	mov	fp, r7
100021e2:	46b1      	mov	r9, r6
100021e4:	46a8      	mov	r8, r5
100021e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
100021e8:	2001274c 	.word	0x2001274c
100021ec:	20003058 	.word	0x20003058
100021f0:	0007a120 	.word	0x0007a120

100021f4 <timer_task>:
    irq_set_pending(PICO_STDIO_USB_LOW_PRIORITY_IRQ);
100021f4:	201f      	movs	r0, #31
static int64_t timer_task(__unused alarm_id_t id, __unused void *user_data) {
100021f6:	b510      	push	{r4, lr}
    irq_set_pending(PICO_STDIO_USB_LOW_PRIORITY_IRQ);
100021f8:	f7fe ffae 	bl	10001158 <irq_set_pending>
}
100021fc:	20fa      	movs	r0, #250	; 0xfa
100021fe:	2100      	movs	r1, #0
10002200:	0080      	lsls	r0, r0, #2
10002202:	bd10      	pop	{r4, pc}

10002204 <low_priority_worker_irq>:
static void low_priority_worker_irq() {
10002204:	b510      	push	{r4, lr}
    if (mutex_try_enter(&stdio_usb_mutex, NULL)) {
10002206:	4c07      	ldr	r4, [pc, #28]	; (10002224 <low_priority_worker_irq+0x20>)
10002208:	2100      	movs	r1, #0
1000220a:	0020      	movs	r0, r4
1000220c:	f00c f864 	bl	1000e2d8 <__mutex_try_enter_veneer>
10002210:	2800      	cmp	r0, #0
10002212:	d100      	bne.n	10002216 <low_priority_worker_irq+0x12>
}
10002214:	bd10      	pop	{r4, pc}
        tud_task();
10002216:	f001 fb51 	bl	100038bc <tud_task>
        mutex_exit(&stdio_usb_mutex);
1000221a:	0020      	movs	r0, r4
1000221c:	f00c f844 	bl	1000e2a8 <__mutex_exit_veneer>
}
10002220:	e7f8      	b.n	10002214 <low_priority_worker_irq+0x10>
10002222:	46c0      	nop			; (mov r8, r8)
10002224:	2001274c 	.word	0x2001274c

10002228 <stdio_usb_init>:
#if PICO_STDIO_ENABLE_CRLF_SUPPORT
    .crlf_enabled = PICO_STDIO_USB_DEFAULT_CRLF
#endif
};

bool stdio_usb_init(void) {
10002228:	b570      	push	{r4, r5, r6, lr}
#if !PICO_NO_BI_STDIO_USB
    bi_decl_if_func_used(bi_program_feature("USB stdin / stdout"));
1000222a:	4b1e      	ldr	r3, [pc, #120]	; (100022a4 <stdio_usb_init+0x7c>)
bool stdio_usb_init(void) {
1000222c:	b084      	sub	sp, #16
    bi_decl_if_func_used(bi_program_feature("USB stdin / stdout"));
1000222e:	781b      	ldrb	r3, [r3, #0]
#endif

    // initialize TinyUSB
    tusb_init();
10002230:	f002 fd42 	bl	10004cb8 <tusb_init>

    irq_set_exclusive_handler(PICO_STDIO_USB_LOW_PRIORITY_IRQ, low_priority_worker_irq);
10002234:	201f      	movs	r0, #31
10002236:	491c      	ldr	r1, [pc, #112]	; (100022a8 <stdio_usb_init+0x80>)
10002238:	f7fe ff9e 	bl	10001178 <irq_set_exclusive_handler>
    irq_set_enabled(PICO_STDIO_USB_LOW_PRIORITY_IRQ, true);
1000223c:	2101      	movs	r1, #1
1000223e:	201f      	movs	r0, #31
10002240:	f7fe ff78 	bl	10001134 <irq_set_enabled>

    mutex_init(&stdio_usb_mutex);
10002244:	4819      	ldr	r0, [pc, #100]	; (100022ac <stdio_usb_init+0x84>)
10002246:	f7ff f9a5 	bl	10001594 <mutex_init>
 * @return >0 the alarm id
 * @return 0 the target timestamp was during or before this method call (whether the callback was called depends on fire_if_past)
 * @return -1 if there were no alarm slots available
 */
static inline alarm_id_t add_alarm_in_us(uint64_t us, alarm_callback_t callback, void *user_data, bool fire_if_past) {
    return alarm_pool_add_alarm_in_us(alarm_pool_get_default(), us, callback, user_data, fire_if_past);
1000224a:	f000 fb2f 	bl	100028ac <alarm_pool_get_default>
1000224e:	0006      	movs	r6, r0
    update_us_since_boot(&t, time_us_64());
10002250:	f000 fd28 	bl	10002ca4 <time_us_64>
    uint64_t delayed = base + us;
10002254:	22fa      	movs	r2, #250	; 0xfa
    update_us_since_boot(&t, time_us_64());
10002256:	0004      	movs	r4, r0
10002258:	000d      	movs	r5, r1
    uint64_t delayed = base + us;
1000225a:	2300      	movs	r3, #0
1000225c:	0092      	lsls	r2, r2, #2
1000225e:	1912      	adds	r2, r2, r4
10002260:	416b      	adcs	r3, r5
    if (delayed < base) {
10002262:	4299      	cmp	r1, r3
10002264:	d814      	bhi.n	10002290 <stdio_usb_init+0x68>
10002266:	d011      	beq.n	1000228c <stdio_usb_init+0x64>
    return alarm_pool_add_alarm_at(pool, delayed_by_us(get_absolute_time(), us), callback, user_data, fire_if_past);
10002268:	2101      	movs	r1, #1
1000226a:	9102      	str	r1, [sp, #8]
1000226c:	2100      	movs	r1, #0
1000226e:	9101      	str	r1, [sp, #4]
10002270:	490f      	ldr	r1, [pc, #60]	; (100022b0 <stdio_usb_init+0x88>)
10002272:	0030      	movs	r0, r6
10002274:	9100      	str	r1, [sp, #0]
10002276:	f000 fb1f 	bl	100028b8 <alarm_pool_add_alarm_at>
    bool rc = add_alarm_in_us(PICO_STDIO_USB_TASK_INTERVAL_US, timer_task, NULL, true);
1000227a:	0004      	movs	r4, r0
1000227c:	1e63      	subs	r3, r4, #1
1000227e:	419c      	sbcs	r4, r3
10002280:	b2e4      	uxtb	r4, r4
    if (rc) {
10002282:	2800      	cmp	r0, #0
10002284:	d108      	bne.n	10002298 <stdio_usb_init+0x70>
        stdio_set_driver_enabled(&stdio_usb, true);
    }
    return rc;
}
10002286:	0020      	movs	r0, r4
10002288:	b004      	add	sp, #16
1000228a:	bd70      	pop	{r4, r5, r6, pc}
    if (delayed < base) {
1000228c:	4290      	cmp	r0, r2
1000228e:	d9eb      	bls.n	10002268 <stdio_usb_init+0x40>
        delayed = (uint64_t)-1;
10002290:	2201      	movs	r2, #1
10002292:	4252      	negs	r2, r2
10002294:	17d3      	asrs	r3, r2, #31
10002296:	e7e7      	b.n	10002268 <stdio_usb_init+0x40>
        stdio_set_driver_enabled(&stdio_usb, true);
10002298:	2101      	movs	r1, #1
1000229a:	4806      	ldr	r0, [pc, #24]	; (100022b4 <stdio_usb_init+0x8c>)
1000229c:	f7ff fe7e 	bl	10001f9c <stdio_set_driver_enabled>
100022a0:	e7f1      	b.n	10002286 <stdio_usb_init+0x5e>
100022a2:	46c0      	nop			; (mov r8, r8)
100022a4:	1002ae40 	.word	0x1002ae40
100022a8:	10002205 	.word	0x10002205
100022ac:	2001274c 	.word	0x2001274c
100022b0:	100021f5 	.word	0x100021f5
100022b4:	20002718 	.word	0x20002718

100022b8 <tud_descriptor_device_cb>:
    [USBD_STR_CDC] = "Board CDC",
};

const uint8_t *tud_descriptor_device_cb(void) {
    return (const uint8_t *)&usbd_desc_device;
}
100022b8:	4800      	ldr	r0, [pc, #0]	; (100022bc <tud_descriptor_device_cb+0x4>)
100022ba:	4770      	bx	lr
100022bc:	1000e468 	.word	0x1000e468

100022c0 <tud_descriptor_configuration_cb>:

const uint8_t *tud_descriptor_configuration_cb(uint8_t index) {
    (void)index;
    return usbd_desc_cfg;
}
100022c0:	4800      	ldr	r0, [pc, #0]	; (100022c4 <tud_descriptor_configuration_cb+0x4>)
100022c2:	4770      	bx	lr
100022c4:	1000e41c 	.word	0x1000e41c

100022c8 <tud_descriptor_string_cb>:

const uint16_t *tud_descriptor_string_cb(uint8_t index, uint16_t langid) {
100022c8:	b530      	push	{r4, r5, lr}
    #define DESC_STR_MAX (20)
    static uint16_t desc_str[DESC_STR_MAX];

    uint8_t len;
    if (index == 0) {
100022ca:	2800      	cmp	r0, #0
100022cc:	d106      	bne.n	100022dc <tud_descriptor_string_cb+0x14>
        desc_str[1] = 0x0409; // supported language is English
100022ce:	24c1      	movs	r4, #193	; 0xc1
100022d0:	4811      	ldr	r0, [pc, #68]	; (10002318 <tud_descriptor_string_cb+0x50>)
100022d2:	4b12      	ldr	r3, [pc, #72]	; (1000231c <tud_descriptor_string_cb+0x54>)
100022d4:	00a4      	lsls	r4, r4, #2
100022d6:	8043      	strh	r3, [r0, #2]
            desc_str[1 + len] = str[len];
        }
    }

    // first byte is length (including header), second byte is string type
    desc_str[0] = (TUSB_DESC_STRING << 8) | (2 * len + 2);
100022d8:	8004      	strh	r4, [r0, #0]

    return desc_str;
}
100022da:	bd30      	pop	{r4, r5, pc}
        if (index >= sizeof(usbd_desc_str) / sizeof(usbd_desc_str[0])) {
100022dc:	2804      	cmp	r0, #4
100022de:	d819      	bhi.n	10002314 <tud_descriptor_string_cb+0x4c>
        const char *str = usbd_desc_str[index];
100022e0:	4b0f      	ldr	r3, [pc, #60]	; (10002320 <tud_descriptor_string_cb+0x58>)
100022e2:	0080      	lsls	r0, r0, #2
100022e4:	58c5      	ldr	r5, [r0, r3]
        for (len = 0; len < DESC_STR_MAX - 1 && str[len]; ++len) {
100022e6:	480c      	ldr	r0, [pc, #48]	; (10002318 <tud_descriptor_string_cb+0x50>)
        const char *str = usbd_desc_str[index];
100022e8:	2300      	movs	r3, #0
100022ea:	1c81      	adds	r1, r0, #2
100022ec:	e004      	b.n	100022f8 <tud_descriptor_string_cb+0x30>
        for (len = 0; len < DESC_STR_MAX - 1 && str[len]; ++len) {
100022ee:	3301      	adds	r3, #1
            desc_str[1 + len] = str[len];
100022f0:	800a      	strh	r2, [r1, #0]
        for (len = 0; len < DESC_STR_MAX - 1 && str[len]; ++len) {
100022f2:	3102      	adds	r1, #2
100022f4:	2b13      	cmp	r3, #19
100022f6:	d00a      	beq.n	1000230e <tud_descriptor_string_cb+0x46>
100022f8:	5cea      	ldrb	r2, [r5, r3]
100022fa:	b2dc      	uxtb	r4, r3
100022fc:	2a00      	cmp	r2, #0
100022fe:	d1f6      	bne.n	100022ee <tud_descriptor_string_cb+0x26>
    desc_str[0] = (TUSB_DESC_STRING << 8) | (2 * len + 2);
10002300:	23c0      	movs	r3, #192	; 0xc0
10002302:	3401      	adds	r4, #1
10002304:	b2e4      	uxtb	r4, r4
10002306:	0064      	lsls	r4, r4, #1
10002308:	009b      	lsls	r3, r3, #2
1000230a:	431c      	orrs	r4, r3
1000230c:	e7e4      	b.n	100022d8 <tud_descriptor_string_cb+0x10>
1000230e:	24ca      	movs	r4, #202	; 0xca
10002310:	00a4      	lsls	r4, r4, #2
10002312:	e7e1      	b.n	100022d8 <tud_descriptor_string_cb+0x10>
            return NULL;
10002314:	2000      	movs	r0, #0
10002316:	e7e0      	b.n	100022da <tud_descriptor_string_cb+0x12>
10002318:	20012070 	.word	0x20012070
1000231c:	00000409 	.word	0x00000409
10002320:	1000e47c 	.word	0x1000e47c

10002324 <set_sys_clock_pll>:
                        48 * MHZ,
                        48 * MHZ);
    }
}

void set_sys_clock_pll(uint32_t vco_freq, uint post_div1, uint post_div2) {
10002324:	b5f0      	push	{r4, r5, r6, r7, lr}
10002326:	b083      	sub	sp, #12
10002328:	0006      	movs	r6, r0
1000232a:	000c      	movs	r4, r1
1000232c:	0015      	movs	r5, r2
    if (!running_on_fpga()) {
1000232e:	f7ff fc37 	bl	10001ba0 <running_on_fpga>
10002332:	2800      	cmp	r0, #0
10002334:	d001      	beq.n	1000233a <set_sys_clock_pll+0x16>
                        0, // Only AUX mux on ADC
                        CLOCKS_CLK_PERI_CTRL_AUXSRC_VALUE_CLKSRC_PLL_USB,
                        48 * MHZ,
                        48 * MHZ);
    }
}
10002336:	b003      	add	sp, #12
10002338:	bdf0      	pop	{r4, r5, r6, r7, pc}
        clock_configure(clk_sys,
1000233a:	4f16      	ldr	r7, [pc, #88]	; (10002394 <set_sys_clock_pll+0x70>)
1000233c:	2201      	movs	r2, #1
1000233e:	003b      	movs	r3, r7
10002340:	2101      	movs	r1, #1
10002342:	9700      	str	r7, [sp, #0]
10002344:	3005      	adds	r0, #5
10002346:	f7fe fc09 	bl	10000b5c <clock_configure>
        pll_init(pll_sys, 1, vco_freq, post_div1, post_div2);
1000234a:	b2eb      	uxtb	r3, r5
1000234c:	0032      	movs	r2, r6
1000234e:	9300      	str	r3, [sp, #0]
10002350:	2101      	movs	r1, #1
10002352:	0023      	movs	r3, r4
10002354:	4810      	ldr	r0, [pc, #64]	; (10002398 <set_sys_clock_pll+0x74>)
10002356:	f7ff fc2b 	bl	10001bb0 <pll_init>
        uint32_t freq = vco_freq / (post_div1 * post_div2);
1000235a:	0021      	movs	r1, r4
1000235c:	0030      	movs	r0, r6
1000235e:	4369      	muls	r1, r5
10002360:	f7fe f808 	bl	10000374 <__wrap___aeabi_uidiv>
10002364:	0004      	movs	r4, r0
        clock_configure(clk_ref,
10002366:	4b0d      	ldr	r3, [pc, #52]	; (1000239c <set_sys_clock_pll+0x78>)
10002368:	2200      	movs	r2, #0
1000236a:	9300      	str	r3, [sp, #0]
1000236c:	2102      	movs	r1, #2
1000236e:	2004      	movs	r0, #4
10002370:	f7fe fbf4 	bl	10000b5c <clock_configure>
        clock_configure(clk_sys,
10002374:	0023      	movs	r3, r4
10002376:	2200      	movs	r2, #0
10002378:	2101      	movs	r1, #1
1000237a:	9400      	str	r4, [sp, #0]
1000237c:	2005      	movs	r0, #5
1000237e:	f7fe fbed 	bl	10000b5c <clock_configure>
        clock_configure(clk_peri,
10002382:	003b      	movs	r3, r7
10002384:	2202      	movs	r2, #2
10002386:	2100      	movs	r1, #0
10002388:	9700      	str	r7, [sp, #0]
1000238a:	2006      	movs	r0, #6
1000238c:	f7fe fbe6 	bl	10000b5c <clock_configure>
}
10002390:	e7d1      	b.n	10002336 <set_sys_clock_pll+0x12>
10002392:	46c0      	nop			; (mov r8, r8)
10002394:	02dc6c00 	.word	0x02dc6c00
10002398:	40028000 	.word	0x40028000
1000239c:	00b71b00 	.word	0x00b71b00

100023a0 <spin_locks_reset>:
    *lock = 0;
100023a0:	2100      	movs	r1, #0

static void check_lock_num(uint __unused lock_num) {
    invalid_params_if(SYNC, lock_num >= 32);
}

void spin_locks_reset(void) {
100023a2:	4b04      	ldr	r3, [pc, #16]	; (100023b4 <spin_locks_reset+0x14>)
    for (uint i = 0; i < NUM_SPIN_LOCKS; i++) {
100023a4:	4a04      	ldr	r2, [pc, #16]	; (100023b8 <spin_locks_reset+0x18>)
    __asm volatile ("dmb");
100023a6:	f3bf 8f5f 	dmb	sy
    *lock = 0;
100023aa:	c302      	stmia	r3!, {r1}
100023ac:	4293      	cmp	r3, r2
100023ae:	d1fa      	bne.n	100023a6 <spin_locks_reset+0x6>
        spin_unlock_unsafe(spin_lock_instance(i));
    }
}
100023b0:	4770      	bx	lr
100023b2:	46c0      	nop			; (mov r8, r8)
100023b4:	d0000100 	.word	0xd0000100
100023b8:	d0000180 	.word	0xd0000180

100023bc <next_striped_spin_lock_num>:
    spin_unlock_unsafe(lock);
    return lock;
}

uint next_striped_spin_lock_num() {
    uint rc = striped_spin_lock_num++;
100023bc:	4a04      	ldr	r2, [pc, #16]	; (100023d0 <next_striped_spin_lock_num+0x14>)
100023be:	7810      	ldrb	r0, [r2, #0]
100023c0:	1c43      	adds	r3, r0, #1
100023c2:	b2db      	uxtb	r3, r3
    if (striped_spin_lock_num > PICO_SPINLOCK_ID_STRIPED_LAST) {
100023c4:	2b17      	cmp	r3, #23
100023c6:	d900      	bls.n	100023ca <next_striped_spin_lock_num+0xe>
        striped_spin_lock_num = PICO_SPINLOCK_ID_STRIPED_FIRST;
100023c8:	2310      	movs	r3, #16
100023ca:	7013      	strb	r3, [r2, #0]
    }
    return rc;
}
100023cc:	4770      	bx	lr
100023ce:	46c0      	nop			; (mov r8, r8)
100023d0:	2000272c 	.word	0x2000272c

100023d4 <spin_lock_claim_unused>:
void spin_lock_unclaim(uint lock_num) {
    check_lock_num(lock_num);
    hw_claim_clear((uint8_t *) &claimed, lock_num);
}

int spin_lock_claim_unused(bool required) {
100023d4:	b500      	push	{lr}
    return hw_claim_unused_from_range((uint8_t*)&claimed, required, PICO_SPINLOCK_ID_CLAIM_FREE_FIRST, PICO_SPINLOCK_ID_CLAIM_FREE_END, "No spinlocks are available");
100023d6:	4b05      	ldr	r3, [pc, #20]	; (100023ec <spin_lock_claim_unused+0x18>)
int spin_lock_claim_unused(bool required) {
100023d8:	b083      	sub	sp, #12
100023da:	0001      	movs	r1, r0
    return hw_claim_unused_from_range((uint8_t*)&claimed, required, PICO_SPINLOCK_ID_CLAIM_FREE_FIRST, PICO_SPINLOCK_ID_CLAIM_FREE_END, "No spinlocks are available");
100023dc:	9300      	str	r3, [sp, #0]
100023de:	2218      	movs	r2, #24
100023e0:	231f      	movs	r3, #31
100023e2:	4803      	ldr	r0, [pc, #12]	; (100023f0 <spin_lock_claim_unused+0x1c>)
100023e4:	f7fe fb6c 	bl	10000ac0 <hw_claim_unused_from_range>
}
100023e8:	b003      	add	sp, #12
100023ea:	bd00      	pop	{pc}
100023ec:	1000e490 	.word	0x1000e490
100023f0:	20012040 	.word	0x20012040

100023f4 <timer_pool_entry_comparator>:
}
#endif

static inline alarm_pool_entry_t *get_entry(alarm_pool_t *pool, pheap_node_id_t id) {
    assert(id && id <= pool->heap->max_nodes);
    return pool->entries + id - 1;
100023f4:	6883      	ldr	r3, [r0, #8]
100023f6:	480b      	ldr	r0, [pc, #44]	; (10002424 <timer_pool_entry_comparator+0x30>)
static inline uint8_t *get_entry_id_high(alarm_pool_t *pool, pheap_node_id_t id) {
    assert(id && id <= pool->heap->max_nodes);
    return pool->entry_ids_high + id - 1;
}

bool timer_pool_entry_comparator(void *user_data, pheap_node_id_t a, pheap_node_id_t b) {
100023f8:	b510      	push	{r4, lr}
    return pool->entries + id - 1;
100023fa:	4684      	mov	ip, r0
100023fc:	4461      	add	r1, ip
100023fe:	4462      	add	r2, ip
    alarm_pool_t *pool = (alarm_pool_t *)user_data;
    return to_us_since_boot(get_entry(pool, a)->target) < to_us_since_boot(get_entry(pool, b)->target);
10002400:	0109      	lsls	r1, r1, #4
10002402:	0112      	lsls	r2, r2, #4
10002404:	189a      	adds	r2, r3, r2
10002406:	1859      	adds	r1, r3, r1
10002408:	6854      	ldr	r4, [r2, #4]
1000240a:	684b      	ldr	r3, [r1, #4]
1000240c:	2001      	movs	r0, #1
1000240e:	429c      	cmp	r4, r3
10002410:	d801      	bhi.n	10002416 <timer_pool_entry_comparator+0x22>
10002412:	d002      	beq.n	1000241a <timer_pool_entry_comparator+0x26>
10002414:	2000      	movs	r0, #0
10002416:	b2c0      	uxtb	r0, r0
}
10002418:	bd10      	pop	{r4, pc}
    return to_us_since_boot(get_entry(pool, a)->target) < to_us_since_boot(get_entry(pool, b)->target);
1000241a:	6812      	ldr	r2, [r2, #0]
1000241c:	680b      	ldr	r3, [r1, #0]
1000241e:	429a      	cmp	r2, r3
10002420:	d8f9      	bhi.n	10002416 <timer_pool_entry_comparator+0x22>
10002422:	e7f7      	b.n	10002414 <timer_pool_entry_comparator+0x20>
10002424:	0fffffff 	.word	0x0fffffff

10002428 <sev_callback>:
    __asm volatile ("sev");
10002428:	bf40      	sev

#if !PICO_TIME_DEFAULT_ALARM_POOL_DISABLED
static int64_t sev_callback(alarm_id_t id, void *user_data) {
    __sev();
    return 0;
}
1000242a:	2000      	movs	r0, #0
1000242c:	2100      	movs	r1, #0
1000242e:	4770      	bx	lr

10002430 <add_alarm_under_lock.isra.0>:
static alarm_id_t add_alarm_under_lock(alarm_pool_t *pool, absolute_time_t time, alarm_callback_t callback,
10002430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10002432:	46de      	mov	lr, fp
10002434:	4657      	mov	r7, sl
10002436:	464e      	mov	r6, r9
10002438:	4645      	mov	r5, r8
1000243a:	b5e0      	push	{r5, r6, r7, lr}
1000243c:	001f      	movs	r7, r3
1000243e:	ab0d      	add	r3, sp, #52	; 0x34
10002440:	781b      	ldrb	r3, [r3, #0]
10002442:	0005      	movs	r5, r0
10002444:	469b      	mov	fp, r3
    if (reuse_id) {
10002446:	9b0c      	ldr	r3, [sp, #48]	; 0x30
static alarm_id_t add_alarm_under_lock(alarm_pool_t *pool, absolute_time_t time, alarm_callback_t callback,
10002448:	0016      	movs	r6, r2
    if (reuse_id) {
1000244a:	2b00      	cmp	r3, #0
1000244c:	d045      	beq.n	100024da <add_alarm_under_lock.isra.0+0xaa>
    return pool->entries + id - 1;
1000244e:	4a3f      	ldr	r2, [pc, #252]	; (1000254c <add_alarm_under_lock.isra.0+0x11c>)
        alarm_pool_entry_t *entry = get_entry(pool, id);
10002450:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    return pool->entries + id - 1;
10002452:	4694      	mov	ip, r2
        alarm_pool_entry_t *entry = get_entry(pool, id);
10002454:	b2db      	uxtb	r3, r3
    return pool->entries + id - 1;
10002456:	68aa      	ldr	r2, [r5, #8]
        alarm_pool_entry_t *entry = get_entry(pool, id);
10002458:	469a      	mov	sl, r3
    return pool->entries + id - 1;
1000245a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
        if (id == ph_insert(pool->heap, id)) {
1000245c:	682c      	ldr	r4, [r5, #0]
    return pool->entries + id - 1;
1000245e:	4463      	add	r3, ip
10002460:	4694      	mov	ip, r2
10002462:	011b      	lsls	r3, r3, #4
        entry->callback = callback;
10002464:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    return pool->entries + id - 1;
10002466:	4463      	add	r3, ip
        entry->callback = callback;
10002468:	609a      	str	r2, [r3, #8]
        entry->user_data = user_data;
1000246a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
        entry->target = time;
1000246c:	601e      	str	r6, [r3, #0]
        entry->user_data = user_data;
1000246e:	60da      	str	r2, [r3, #12]
10002470:	9a0c      	ldr	r2, [sp, #48]	; 0x30
        entry->target = time;
10002472:	605f      	str	r7, [r3, #4]
10002474:	4694      	mov	ip, r2
10002476:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    hn->child = hn->sibling = hn->parent = 0;
10002478:	2200      	movs	r2, #0
    return heap->nodes + id - 1;
1000247a:	005b      	lsls	r3, r3, #1
1000247c:	4463      	add	r3, ip
1000247e:	3b03      	subs	r3, #3
10002480:	4698      	mov	r8, r3
10002482:	6823      	ldr	r3, [r4, #0]
10002484:	4443      	add	r3, r8
    hn->child = hn->sibling = hn->parent = 0;
10002486:	709a      	strb	r2, [r3, #2]
10002488:	705a      	strb	r2, [r3, #1]
1000248a:	701a      	strb	r2, [r3, #0]
    heap->root_id = ph_merge_nodes(heap, heap->root_id, id);
1000248c:	7b63      	ldrb	r3, [r4, #13]
1000248e:	4699      	mov	r9, r3
    if (!a) return b;
10002490:	2b00      	cmp	r3, #0
10002492:	d042      	beq.n	1000251a <add_alarm_under_lock.isra.0+0xea>
    if (heap->comparator(heap->user_data, a, b)) {
10002494:	4652      	mov	r2, sl
10002496:	0019      	movs	r1, r3
10002498:	68a0      	ldr	r0, [r4, #8]
1000249a:	6863      	ldr	r3, [r4, #4]
1000249c:	4798      	blx	r3
    return heap->nodes + id - 1;
1000249e:	6822      	ldr	r2, [r4, #0]
    if (heap->comparator(heap->user_data, a, b)) {
100024a0:	2800      	cmp	r0, #0
100024a2:	d02b      	beq.n	100024fc <add_alarm_under_lock.isra.0+0xcc>
    return heap->nodes + id - 1;
100024a4:	464b      	mov	r3, r9
100024a6:	005b      	lsls	r3, r3, #1
100024a8:	444b      	add	r3, r9
100024aa:	3b03      	subs	r3, #3
100024ac:	18d1      	adds	r1, r2, r3
100024ae:	468c      	mov	ip, r1
100024b0:	4641      	mov	r1, r8
    c->parent = parent_id;
100024b2:	4648      	mov	r0, r9
    return heap->nodes + id - 1;
100024b4:	1851      	adds	r1, r2, r1
    c->parent = parent_id;
100024b6:	7088      	strb	r0, [r1, #2]
    if (!n->child) {
100024b8:	5cd3      	ldrb	r3, [r2, r3]
100024ba:	2b00      	cmp	r3, #0
100024bc:	d142      	bne.n	10002544 <add_alarm_under_lock.isra.0+0x114>
        n->child = child_id;
100024be:	4653      	mov	r3, sl
100024c0:	4662      	mov	r2, ip
100024c2:	7013      	strb	r3, [r2, #0]
    heap->root_id = ph_merge_nodes(heap, heap->root_id, id);
100024c4:	464b      	mov	r3, r9
100024c6:	7363      	strb	r3, [r4, #13]
        if (id == ph_insert(pool->heap, id)) {
100024c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
100024ca:	4599      	cmp	r9, r3
100024cc:	d027      	beq.n	1000251e <add_alarm_under_lock.isra.0+0xee>
}
100024ce:	bcf0      	pop	{r4, r5, r6, r7}
100024d0:	46bb      	mov	fp, r7
100024d2:	46b2      	mov	sl, r6
100024d4:	46a9      	mov	r9, r5
100024d6:	46a0      	mov	r8, r4
100024d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        id = ph_new_node(pool->heap);
100024da:	6802      	ldr	r2, [r0, #0]
    if (!heap->free_head_id) return 0;
100024dc:	7b94      	ldrb	r4, [r2, #14]
100024de:	2c00      	cmp	r4, #0
100024e0:	d0f5      	beq.n	100024ce <add_alarm_under_lock.isra.0+0x9e>
    heap->free_head_id = ph_get_node(heap, id)->sibling;
100024e2:	6811      	ldr	r1, [r2, #0]
100024e4:	0063      	lsls	r3, r4, #1
100024e6:	468c      	mov	ip, r1
100024e8:	191b      	adds	r3, r3, r4
100024ea:	4463      	add	r3, ip
100024ec:	3b03      	subs	r3, #3
100024ee:	785b      	ldrb	r3, [r3, #1]
100024f0:	7393      	strb	r3, [r2, #14]
    if (!heap->free_head_id) heap->free_tail_id = 0;
100024f2:	2b00      	cmp	r3, #0
100024f4:	d100      	bne.n	100024f8 <add_alarm_under_lock.isra.0+0xc8>
100024f6:	73d3      	strb	r3, [r2, #15]
100024f8:	940c      	str	r4, [sp, #48]	; 0x30
    if (id) {
100024fa:	e7a8      	b.n	1000244e <add_alarm_under_lock.isra.0+0x1e>
    return heap->nodes + id - 1;
100024fc:	4643      	mov	r3, r8
100024fe:	18d1      	adds	r1, r2, r3
10002500:	464b      	mov	r3, r9
    c->parent = parent_id;
10002502:	4650      	mov	r0, sl
    return heap->nodes + id - 1;
10002504:	005b      	lsls	r3, r3, #1
10002506:	444b      	add	r3, r9
10002508:	3b03      	subs	r3, #3
1000250a:	18d3      	adds	r3, r2, r3
    c->parent = parent_id;
1000250c:	7098      	strb	r0, [r3, #2]
    if (!n->child) {
1000250e:	4640      	mov	r0, r8
10002510:	5c12      	ldrb	r2, [r2, r0]
10002512:	2a00      	cmp	r2, #0
10002514:	d118      	bne.n	10002548 <add_alarm_under_lock.isra.0+0x118>
        n->child = child_id;
10002516:	464b      	mov	r3, r9
10002518:	700b      	strb	r3, [r1, #0]
    heap->root_id = ph_merge_nodes(heap, heap->root_id, id);
1000251a:	4653      	mov	r3, sl
1000251c:	7363      	strb	r3, [r4, #13]
            bool is_missed = hardware_alarm_set_target(pool->hardware_alarm_num, time);
1000251e:	0032      	movs	r2, r6
10002520:	003b      	movs	r3, r7
10002522:	7d28      	ldrb	r0, [r5, #20]
10002524:	f000 fc1e 	bl	10002d64 <hardware_alarm_set_target>
10002528:	1e04      	subs	r4, r0, #0
            if (is_missed && !create_if_past) {
1000252a:	d006      	beq.n	1000253a <add_alarm_under_lock.isra.0+0x10a>
1000252c:	465b      	mov	r3, fp
1000252e:	2b00      	cmp	r3, #0
10002530:	d103      	bne.n	1000253a <add_alarm_under_lock.isra.0+0x10a>
                ph_delete(pool->heap, id);
10002532:	4651      	mov	r1, sl
10002534:	6828      	ldr	r0, [r5, #0]
10002536:	f7ff f9e3 	bl	10001900 <ph_delete>
            if (missed) *missed = is_missed;
1000253a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1000253c:	2b00      	cmp	r3, #0
1000253e:	d0c6      	beq.n	100024ce <add_alarm_under_lock.isra.0+0x9e>
10002540:	701c      	strb	r4, [r3, #0]
    return id;
10002542:	e7c4      	b.n	100024ce <add_alarm_under_lock.isra.0+0x9e>
        c->sibling = n->child;
10002544:	704b      	strb	r3, [r1, #1]
10002546:	e7ba      	b.n	100024be <add_alarm_under_lock.isra.0+0x8e>
10002548:	705a      	strb	r2, [r3, #1]
1000254a:	e7e4      	b.n	10002516 <add_alarm_under_lock.isra.0+0xe6>
1000254c:	0fffffff 	.word	0x0fffffff

10002550 <alarm_pool_alarm_callback>:
static void alarm_pool_alarm_callback(uint alarm_num) {
10002550:	b5f0      	push	{r4, r5, r6, r7, lr}
10002552:	46de      	mov	lr, fp
10002554:	464e      	mov	r6, r9
10002556:	4657      	mov	r7, sl
10002558:	4645      	mov	r5, r8
1000255a:	2300      	movs	r3, #0
1000255c:	b5e0      	push	{r5, r6, r7, lr}
1000255e:	b08d      	sub	sp, #52	; 0x34
10002560:	930a      	str	r3, [sp, #40]	; 0x28
    alarm_pool_t *pool = pools[alarm_num];
10002562:	4b6b      	ldr	r3, [pc, #428]	; (10002710 <alarm_pool_alarm_callback+0x1c0>)
10002564:	0082      	lsls	r2, r0, #2
10002566:	58d3      	ldr	r3, [r2, r3]
static void alarm_pool_alarm_callback(uint alarm_num) {
10002568:	900b      	str	r0, [sp, #44]	; 0x2c
    alarm_pool_t *pool = pools[alarm_num];
1000256a:	4699      	mov	r9, r3
        void *user_data = NULL;
1000256c:	2300      	movs	r3, #0
1000256e:	469b      	mov	fp, r3
10002570:	464b      	mov	r3, r9
10002572:	9307      	str	r3, [sp, #28]
    update_us_since_boot(&t, time_us_64());
10002574:	f000 fb96 	bl	10002ca4 <time_us_64>
        uint32_t save = spin_lock_blocking(pool->lock);
10002578:	9c07      	ldr	r4, [sp, #28]
1000257a:	0006      	movs	r6, r0
1000257c:	000f      	movs	r7, r1
1000257e:	6862      	ldr	r2, [r4, #4]
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
10002580:	f3ef 8510 	mrs	r5, PRIMASK
    __asm volatile ("cpsid i");
10002584:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
10002586:	6813      	ldr	r3, [r2, #0]
10002588:	2b00      	cmp	r3, #0
1000258a:	d0fc      	beq.n	10002586 <alarm_pool_alarm_callback+0x36>
    __asm volatile ("dmb");
1000258c:	0022      	movs	r2, r4
1000258e:	9407      	str	r4, [sp, #28]
10002590:	f3bf 8f5f 	dmb	sy
        pheap_node_id_t next_id = ph_peek_head(pool->heap);
10002594:	6824      	ldr	r4, [r4, #0]
    return heap->root_id;
10002596:	7b63      	ldrb	r3, [r4, #13]
10002598:	4699      	mov	r9, r3
        if (next_id) {
1000259a:	2b00      	cmp	r3, #0
1000259c:	d067      	beq.n	1000266e <alarm_pool_alarm_callback+0x11e>
    return pool->entries + id - 1;
1000259e:	6892      	ldr	r2, [r2, #8]
100025a0:	4b5c      	ldr	r3, [pc, #368]	; (10002714 <alarm_pool_alarm_callback+0x1c4>)
100025a2:	4690      	mov	r8, r2
100025a4:	444b      	add	r3, r9
100025a6:	011b      	lsls	r3, r3, #4
100025a8:	4498      	add	r8, r3
            if (absolute_time_diff_us(now, entry->target) <= 0) {
100025aa:	4643      	mov	r3, r8
100025ac:	681a      	ldr	r2, [r3, #0]
100025ae:	685b      	ldr	r3, [r3, #4]
    return to_us_since_boot(to) - to_us_since_boot(from);
100025b0:	0010      	movs	r0, r2
100025b2:	0019      	movs	r1, r3
100025b4:	1b80      	subs	r0, r0, r6
100025b6:	41b9      	sbcs	r1, r7
100025b8:	2900      	cmp	r1, #0
100025ba:	dd5f      	ble.n	1000267c <alarm_pool_alarm_callback+0x12c>
                if (hardware_alarm_set_target(alarm_num, entry->target)) {
100025bc:	980b      	ldr	r0, [sp, #44]	; 0x2c
100025be:	f000 fbd1 	bl	10002d64 <hardware_alarm_set_target>
        void *user_data = NULL;
100025c2:	2300      	movs	r3, #0
        absolute_time_t target = nil_time;
100025c4:	2600      	movs	r6, #0
        void *user_data = NULL;
100025c6:	4698      	mov	r8, r3
        absolute_time_t target = nil_time;
100025c8:	2700      	movs	r7, #0
        alarm_callback_t callback = NULL;
100025ca:	469a      	mov	sl, r3
        spin_unlock(pool->lock, save);
100025cc:	9c07      	ldr	r4, [sp, #28]
100025ce:	6863      	ldr	r3, [r4, #4]
100025d0:	f3bf 8f5f 	dmb	sy
    *lock = 0;
100025d4:	465a      	mov	r2, fp
100025d6:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
100025d8:	f385 8810 	msr	PRIMASK, r5
        if (callback) {
100025dc:	4653      	mov	r3, sl
100025de:	2b00      	cmp	r3, #0
100025e0:	d108      	bne.n	100025f4 <alarm_pool_alarm_callback+0xa4>
    } while (again);
100025e2:	2800      	cmp	r0, #0
100025e4:	d1c6      	bne.n	10002574 <alarm_pool_alarm_callback+0x24>
}
100025e6:	b00d      	add	sp, #52	; 0x34
100025e8:	bcf0      	pop	{r4, r5, r6, r7}
100025ea:	46bb      	mov	fp, r7
100025ec:	46b2      	mov	sl, r6
100025ee:	46a9      	mov	r9, r5
100025f0:	46a0      	mov	r8, r4
100025f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return ((uint)id_high << 8u * sizeof(id)) | id;
100025f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
            int64_t repeat = callback(make_public_id(id_high, next_id), user_data);
100025f6:	4641      	mov	r1, r8
    return ((uint)id_high << 8u * sizeof(id)) | id;
100025f8:	0218      	lsls	r0, r3, #8
100025fa:	464b      	mov	r3, r9
100025fc:	4318      	orrs	r0, r3
            int64_t repeat = callback(make_public_id(id_high, next_id), user_data);
100025fe:	47d0      	blx	sl
10002600:	9008      	str	r0, [sp, #32]
10002602:	9109      	str	r1, [sp, #36]	; 0x24
            save = spin_lock_blocking(pool->lock);
10002604:	6862      	ldr	r2, [r4, #4]
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
10002606:	f3ef 8510 	mrs	r5, PRIMASK
    __asm volatile ("cpsid i");
1000260a:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
1000260c:	6813      	ldr	r3, [r2, #0]
1000260e:	2b00      	cmp	r3, #0
10002610:	d0fc      	beq.n	1000260c <alarm_pool_alarm_callback+0xbc>
    __asm volatile ("dmb");
10002612:	9407      	str	r4, [sp, #28]
10002614:	f3bf 8f5f 	dmb	sy
            if (repeat < 0 && pool->alarm_in_progress) {
10002618:	9908      	ldr	r1, [sp, #32]
1000261a:	9a09      	ldr	r2, [sp, #36]	; 0x24
1000261c:	2a00      	cmp	r2, #0
1000261e:	db48      	blt.n	100026b2 <alarm_pool_alarm_callback+0x162>
            } else if (repeat > 0 && pool->alarm_in_progress) {
10002620:	4311      	orrs	r1, r2
10002622:	d003      	beq.n	1000262c <alarm_pool_alarm_callback+0xdc>
10002624:	9b07      	ldr	r3, [sp, #28]
10002626:	691b      	ldr	r3, [r3, #16]
10002628:	2b00      	cmp	r3, #0
1000262a:	d15d      	bne.n	100026e8 <alarm_pool_alarm_callback+0x198>
                ph_add_to_free_list(pool->heap, next_id);
1000262c:	9b07      	ldr	r3, [sp, #28]
1000262e:	681b      	ldr	r3, [r3, #0]

bool ph_delete(pheap_t *heap, pheap_node_id_t id);

static inline void ph_add_to_free_list(pheap_t *heap, pheap_node_id_t id) {
    assert(id && !ph_contains(heap, id));
    if (heap->free_tail_id) {
10002630:	7bd9      	ldrb	r1, [r3, #15]
10002632:	2900      	cmp	r1, #0
10002634:	d007      	beq.n	10002646 <alarm_pool_alarm_callback+0xf6>
        ph_get_node(heap, heap->free_tail_id)->sibling = id;
10002636:	004a      	lsls	r2, r1, #1
10002638:	1852      	adds	r2, r2, r1
1000263a:	6819      	ldr	r1, [r3, #0]
1000263c:	468c      	mov	ip, r1
1000263e:	4649      	mov	r1, r9
10002640:	4462      	add	r2, ip
10002642:	3a03      	subs	r2, #3
10002644:	7051      	strb	r1, [r2, #1]
    }
    heap->free_tail_id = id;
10002646:	464a      	mov	r2, r9
10002648:	73da      	strb	r2, [r3, #15]
    return pool->entry_ids_high + id - 1;
1000264a:	464b      	mov	r3, r9
1000264c:	9a07      	ldr	r2, [sp, #28]
1000264e:	3b01      	subs	r3, #1
10002650:	68d1      	ldr	r1, [r2, #12]
                (*get_entry_id_high(pool, next_id))++; // we bump it for next use of id
10002652:	5cca      	ldrb	r2, [r1, r3]
10002654:	3201      	adds	r2, #1
10002656:	54ca      	strb	r2, [r1, r3]
            pool->alarm_in_progress = 0;
10002658:	465b      	mov	r3, fp
1000265a:	9a07      	ldr	r2, [sp, #28]
1000265c:	6113      	str	r3, [r2, #16]
            spin_unlock(pool->lock, save);
1000265e:	6853      	ldr	r3, [r2, #4]
10002660:	f3bf 8f5f 	dmb	sy
    *lock = 0;
10002664:	465a      	mov	r2, fp
10002666:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10002668:	f385 8810 	msr	PRIMASK, r5
    } while (again);
1000266c:	e782      	b.n	10002574 <alarm_pool_alarm_callback+0x24>
        void *user_data = NULL;
1000266e:	2300      	movs	r3, #0
        absolute_time_t target = nil_time;
10002670:	2600      	movs	r6, #0
        void *user_data = NULL;
10002672:	4698      	mov	r8, r3
        absolute_time_t target = nil_time;
10002674:	2700      	movs	r7, #0
        alarm_callback_t callback = NULL;
10002676:	469a      	mov	sl, r3
        again = false;
10002678:	2000      	movs	r0, #0
1000267a:	e7a7      	b.n	100025cc <alarm_pool_alarm_callback+0x7c>
            if (absolute_time_diff_us(now, entry->target) <= 0) {
1000267c:	2900      	cmp	r1, #0
1000267e:	d101      	bne.n	10002684 <alarm_pool_alarm_callback+0x134>
10002680:	2800      	cmp	r0, #0
10002682:	d19b      	bne.n	100025bc <alarm_pool_alarm_callback+0x6c>
                pheap_node_id_t __unused removed_id = ph_remove_head_reserve(pool->heap, true);
10002684:	2101      	movs	r1, #1
10002686:	0020      	movs	r0, r4
10002688:	f7ff f8bc 	bl	10001804 <ph_remove_head_reserve>
                target = entry->target;
1000268c:	4643      	mov	r3, r8
1000268e:	681e      	ldr	r6, [r3, #0]
10002690:	685f      	ldr	r7, [r3, #4]
                callback = entry->callback;
10002692:	689b      	ldr	r3, [r3, #8]
                id_high = *get_entry_id_high(pool, next_id);
10002694:	9a07      	ldr	r2, [sp, #28]
                callback = entry->callback;
10002696:	469a      	mov	sl, r3
                user_data = entry->user_data;
10002698:	4643      	mov	r3, r8
1000269a:	68db      	ldr	r3, [r3, #12]
1000269c:	4698      	mov	r8, r3
                id_high = *get_entry_id_high(pool, next_id);
1000269e:	68d3      	ldr	r3, [r2, #12]
100026a0:	444b      	add	r3, r9
100026a2:	3b01      	subs	r3, #1
100026a4:	781b      	ldrb	r3, [r3, #0]
100026a6:	930a      	str	r3, [sp, #40]	; 0x28
    return ((uint)id_high << 8u * sizeof(id)) | id;
100026a8:	021b      	lsls	r3, r3, #8
100026aa:	4303      	orrs	r3, r0
                pool->alarm_in_progress = make_public_id(id_high, removed_id);
100026ac:	6113      	str	r3, [r2, #16]
        again = false;
100026ae:	2000      	movs	r0, #0
100026b0:	e78c      	b.n	100025cc <alarm_pool_alarm_callback+0x7c>
            if (repeat < 0 && pool->alarm_in_progress) {
100026b2:	6923      	ldr	r3, [r4, #16]
100026b4:	2b00      	cmp	r3, #0
100026b6:	d0b9      	beq.n	1000262c <alarm_pool_alarm_callback+0xdc>
    uint64_t delayed = base + us;
100026b8:	0033      	movs	r3, r6
100026ba:	003c      	movs	r4, r7
100026bc:	1a5b      	subs	r3, r3, r1
100026be:	4194      	sbcs	r4, r2
100026c0:	001a      	movs	r2, r3
100026c2:	0023      	movs	r3, r4
    if (delayed < base) {
100026c4:	42a7      	cmp	r7, r4
100026c6:	d819      	bhi.n	100026fc <alarm_pool_alarm_callback+0x1ac>
100026c8:	429f      	cmp	r7, r3
100026ca:	d01b      	beq.n	10002704 <alarm_pool_alarm_callback+0x1b4>
                add_alarm_under_lock(pool, delayed_by_us(get_absolute_time(), repeat), callback, user_data, next_id,
100026cc:	4659      	mov	r1, fp
100026ce:	9104      	str	r1, [sp, #16]
100026d0:	2101      	movs	r1, #1
100026d2:	9103      	str	r1, [sp, #12]
100026d4:	4649      	mov	r1, r9
100026d6:	9102      	str	r1, [sp, #8]
100026d8:	4641      	mov	r1, r8
100026da:	9101      	str	r1, [sp, #4]
100026dc:	4651      	mov	r1, sl
100026de:	9807      	ldr	r0, [sp, #28]
100026e0:	9100      	str	r1, [sp, #0]
100026e2:	f7ff fea5 	bl	10002430 <add_alarm_under_lock.isra.0>
100026e6:	e7b7      	b.n	10002658 <alarm_pool_alarm_callback+0x108>
    update_us_since_boot(&t, time_us_64());
100026e8:	f000 fadc 	bl	10002ca4 <time_us_64>
    uint64_t delayed = base + us;
100026ec:	9a08      	ldr	r2, [sp, #32]
100026ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
    update_us_since_boot(&t, time_us_64());
100026f0:	0006      	movs	r6, r0
100026f2:	000f      	movs	r7, r1
    uint64_t delayed = base + us;
100026f4:	1992      	adds	r2, r2, r6
100026f6:	417b      	adcs	r3, r7
    if (delayed < base) {
100026f8:	4299      	cmp	r1, r3
100026fa:	d9e5      	bls.n	100026c8 <alarm_pool_alarm_callback+0x178>
        delayed = (uint64_t)-1;
100026fc:	2201      	movs	r2, #1
100026fe:	4252      	negs	r2, r2
10002700:	17d3      	asrs	r3, r2, #31
10002702:	e7e3      	b.n	100026cc <alarm_pool_alarm_callback+0x17c>
    if (delayed < base) {
10002704:	4296      	cmp	r6, r2
10002706:	d9e1      	bls.n	100026cc <alarm_pool_alarm_callback+0x17c>
        delayed = (uint64_t)-1;
10002708:	2201      	movs	r2, #1
1000270a:	4252      	negs	r2, r2
1000270c:	17d3      	asrs	r3, r2, #31
1000270e:	e7dd      	b.n	100026cc <alarm_pool_alarm_callback+0x17c>
10002710:	20012730 	.word	0x20012730
10002714:	0fffffff 	.word	0x0fffffff

10002718 <alarm_pool_add_alarm_at.constprop.0>:
alarm_id_t alarm_pool_add_alarm_at(alarm_pool_t *pool, absolute_time_t time, alarm_callback_t callback,
10002718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000271a:	4657      	mov	r7, sl
1000271c:	464e      	mov	r6, r9
1000271e:	46de      	mov	lr, fp
10002720:	4645      	mov	r5, r8
10002722:	4691      	mov	r9, r2
10002724:	b5e0      	push	{r5, r6, r7, lr}
10002726:	0004      	movs	r4, r0
10002728:	469a      	mov	sl, r3
        uint32_t save = spin_lock_blocking(pool->lock);
1000272a:	6842      	ldr	r2, [r0, #4]
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
1000272c:	f3ef 8810 	mrs	r8, PRIMASK
    __asm volatile ("cpsid i");
10002730:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
10002732:	6813      	ldr	r3, [r2, #0]
10002734:	2b00      	cmp	r3, #0
10002736:	d0fc      	beq.n	10002732 <alarm_pool_add_alarm_at.constprop.0+0x1a>
    __asm volatile ("dmb");
10002738:	f3bf 8f5f 	dmb	sy
        id = ph_new_node(pool->heap);
1000273c:	6826      	ldr	r6, [r4, #0]
    if (!heap->free_head_id) return 0;
1000273e:	7bb5      	ldrb	r5, [r6, #14]
10002740:	2d00      	cmp	r5, #0
10002742:	d048      	beq.n	100027d6 <alarm_pool_add_alarm_at.constprop.0+0xbe>
    return heap->nodes + id - 1;
10002744:	006f      	lsls	r7, r5, #1
10002746:	6833      	ldr	r3, [r6, #0]
10002748:	197f      	adds	r7, r7, r5
1000274a:	3f03      	subs	r7, #3
1000274c:	19d9      	adds	r1, r3, r7
    heap->free_head_id = ph_get_node(heap, id)->sibling;
1000274e:	784b      	ldrb	r3, [r1, #1]
10002750:	73b3      	strb	r3, [r6, #14]
    if (!heap->free_head_id) heap->free_tail_id = 0;
10002752:	2b00      	cmp	r3, #0
10002754:	d100      	bne.n	10002758 <alarm_pool_add_alarm_at.constprop.0+0x40>
10002756:	73f3      	strb	r3, [r6, #15]
    return pool->entries + id - 1;
10002758:	68a2      	ldr	r2, [r4, #8]
1000275a:	4b34      	ldr	r3, [pc, #208]	; (1000282c <alarm_pool_add_alarm_at.constprop.0+0x114>)
1000275c:	4694      	mov	ip, r2
        entry->target = time;
1000275e:	464a      	mov	r2, r9
    return pool->entries + id - 1;
10002760:	18eb      	adds	r3, r5, r3
10002762:	011b      	lsls	r3, r3, #4
10002764:	4463      	add	r3, ip
        entry->target = time;
10002766:	601a      	str	r2, [r3, #0]
10002768:	4652      	mov	r2, sl
1000276a:	605a      	str	r2, [r3, #4]
        entry->callback = callback;
1000276c:	4a30      	ldr	r2, [pc, #192]	; (10002830 <alarm_pool_add_alarm_at.constprop.0+0x118>)
1000276e:	609a      	str	r2, [r3, #8]
        entry->user_data = user_data;
10002770:	2200      	movs	r2, #0
10002772:	60da      	str	r2, [r3, #12]
    hn->child = hn->sibling = hn->parent = 0;
10002774:	708a      	strb	r2, [r1, #2]
10002776:	704a      	strb	r2, [r1, #1]
10002778:	700a      	strb	r2, [r1, #0]
    heap->root_id = ph_merge_nodes(heap, heap->root_id, id);
1000277a:	7b73      	ldrb	r3, [r6, #13]
1000277c:	469b      	mov	fp, r3
    if (!a) return b;
1000277e:	2b00      	cmp	r3, #0
10002780:	d043      	beq.n	1000280a <alarm_pool_add_alarm_at.constprop.0+0xf2>
    if (heap->comparator(heap->user_data, a, b)) {
10002782:	002a      	movs	r2, r5
10002784:	0019      	movs	r1, r3
10002786:	68b0      	ldr	r0, [r6, #8]
10002788:	6873      	ldr	r3, [r6, #4]
1000278a:	4798      	blx	r3
    return heap->nodes + id - 1;
1000278c:	6832      	ldr	r2, [r6, #0]
    if (heap->comparator(heap->user_data, a, b)) {
1000278e:	2800      	cmp	r0, #0
10002790:	d02f      	beq.n	100027f2 <alarm_pool_add_alarm_at.constprop.0+0xda>
    return heap->nodes + id - 1;
10002792:	465b      	mov	r3, fp
    c->parent = parent_id;
10002794:	4658      	mov	r0, fp
    return heap->nodes + id - 1;
10002796:	005b      	lsls	r3, r3, #1
10002798:	445b      	add	r3, fp
1000279a:	19d7      	adds	r7, r2, r7
1000279c:	3b03      	subs	r3, #3
    c->parent = parent_id;
1000279e:	70b8      	strb	r0, [r7, #2]
    return heap->nodes + id - 1;
100027a0:	18d1      	adds	r1, r2, r3
    if (!n->child) {
100027a2:	5cd3      	ldrb	r3, [r2, r3]
100027a4:	2b00      	cmp	r3, #0
100027a6:	d13f      	bne.n	10002828 <alarm_pool_add_alarm_at.constprop.0+0x110>
    heap->root_id = ph_merge_nodes(heap, heap->root_id, id);
100027a8:	465b      	mov	r3, fp
        n->child = child_id;
100027aa:	700d      	strb	r5, [r1, #0]
    heap->root_id = ph_merge_nodes(heap, heap->root_id, id);
100027ac:	7373      	strb	r3, [r6, #13]
        if (id == ph_insert(pool->heap, id)) {
100027ae:	455d      	cmp	r5, fp
100027b0:	d02c      	beq.n	1000280c <alarm_pool_add_alarm_at.constprop.0+0xf4>
    bool missed = false;
100027b2:	2600      	movs	r6, #0
        if (id) id_high = *get_entry_id_high(pool, id);
100027b4:	68e3      	ldr	r3, [r4, #12]
100027b6:	195b      	adds	r3, r3, r5
100027b8:	3b01      	subs	r3, #1
100027ba:	7819      	ldrb	r1, [r3, #0]
        spin_unlock(pool->lock, save);
100027bc:	6863      	ldr	r3, [r4, #4]
100027be:	f3bf 8f5f 	dmb	sy
    *lock = 0;
100027c2:	2200      	movs	r2, #0
100027c4:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
100027c6:	f388 8810 	msr	PRIMASK, r8
        public_id = missed ? 0 : make_public_id(id_high, id);
100027ca:	2000      	movs	r0, #0
100027cc:	2e00      	cmp	r6, #0
100027ce:	d10a      	bne.n	100027e6 <alarm_pool_add_alarm_at.constprop.0+0xce>
    return ((uint)id_high << 8u * sizeof(id)) | id;
100027d0:	0208      	lsls	r0, r1, #8
100027d2:	4328      	orrs	r0, r5
100027d4:	e007      	b.n	100027e6 <alarm_pool_add_alarm_at.constprop.0+0xce>
        spin_unlock(pool->lock, save);
100027d6:	6863      	ldr	r3, [r4, #4]
    __asm volatile ("dmb");
100027d8:	f3bf 8f5f 	dmb	sy
    *lock = 0;
100027dc:	601d      	str	r5, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
100027de:	f388 8810 	msr	PRIMASK, r8
            return -1;
100027e2:	2001      	movs	r0, #1
100027e4:	4240      	negs	r0, r0
}
100027e6:	bcf0      	pop	{r4, r5, r6, r7}
100027e8:	46bb      	mov	fp, r7
100027ea:	46b2      	mov	sl, r6
100027ec:	46a9      	mov	r9, r5
100027ee:	46a0      	mov	r8, r4
100027f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return heap->nodes + id - 1;
100027f2:	465b      	mov	r3, fp
100027f4:	005b      	lsls	r3, r3, #1
100027f6:	445b      	add	r3, fp
100027f8:	3b03      	subs	r3, #3
100027fa:	18d3      	adds	r3, r2, r3
    c->parent = parent_id;
100027fc:	709d      	strb	r5, [r3, #2]
    return heap->nodes + id - 1;
100027fe:	19d1      	adds	r1, r2, r7
    if (!n->child) {
10002800:	5dd2      	ldrb	r2, [r2, r7]
10002802:	2a00      	cmp	r2, #0
10002804:	d10e      	bne.n	10002824 <alarm_pool_add_alarm_at.constprop.0+0x10c>
        n->child = child_id;
10002806:	465b      	mov	r3, fp
10002808:	700b      	strb	r3, [r1, #0]
    heap->root_id = ph_merge_nodes(heap, heap->root_id, id);
1000280a:	7375      	strb	r5, [r6, #13]
            bool is_missed = hardware_alarm_set_target(pool->hardware_alarm_num, time);
1000280c:	464a      	mov	r2, r9
1000280e:	4653      	mov	r3, sl
10002810:	7d20      	ldrb	r0, [r4, #20]
10002812:	f000 faa7 	bl	10002d64 <hardware_alarm_set_target>
10002816:	1e06      	subs	r6, r0, #0
            if (is_missed && !create_if_past) {
10002818:	d0cb      	beq.n	100027b2 <alarm_pool_add_alarm_at.constprop.0+0x9a>
                ph_delete(pool->heap, id);
1000281a:	0029      	movs	r1, r5
1000281c:	6820      	ldr	r0, [r4, #0]
1000281e:	f7ff f86f 	bl	10001900 <ph_delete>
10002822:	e7c7      	b.n	100027b4 <alarm_pool_add_alarm_at.constprop.0+0x9c>
        c->sibling = n->child;
10002824:	705a      	strb	r2, [r3, #1]
10002826:	e7ee      	b.n	10002806 <alarm_pool_add_alarm_at.constprop.0+0xee>
10002828:	707b      	strb	r3, [r7, #1]
1000282a:	e7bd      	b.n	100027a8 <alarm_pool_add_alarm_at.constprop.0+0x90>
1000282c:	0fffffff 	.word	0x0fffffff
10002830:	10002429 	.word	0x10002429

10002834 <alarm_pool_init_default>:
void alarm_pool_init_default() {
10002834:	b570      	push	{r4, r5, r6, lr}
    if (!default_alarm_pool) {
10002836:	4c18      	ldr	r4, [pc, #96]	; (10002898 <alarm_pool_init_default+0x64>)
10002838:	6823      	ldr	r3, [r4, #0]
1000283a:	2b00      	cmp	r3, #0
1000283c:	d000      	beq.n	10002840 <alarm_pool_init_default+0xc>
}
1000283e:	bd70      	pop	{r4, r5, r6, pc}
    hardware_alarm_claim(hardware_alarm_num);
10002840:	2003      	movs	r0, #3
10002842:	f000 fa23 	bl	10002c8c <hardware_alarm_claim>
    hardware_alarm_cancel(hardware_alarm_num);
10002846:	2003      	movs	r0, #3
10002848:	f000 faee 	bl	10002e28 <hardware_alarm_cancel>
    hardware_alarm_set_callback(hardware_alarm_num, alarm_pool_alarm_callback);
1000284c:	4913      	ldr	r1, [pc, #76]	; (1000289c <alarm_pool_init_default+0x68>)
1000284e:	2003      	movs	r0, #3
10002850:	f000 fa42 	bl	10002cd8 <hardware_alarm_set_callback>
    alarm_pool_t *pool = (alarm_pool_t *)malloc(sizeof(alarm_pool_t));
10002854:	2018      	movs	r0, #24
10002856:	f7ff f891 	bl	1000197c <__wrap_malloc>
1000285a:	0005      	movs	r5, r0
    pool->lock = spin_lock_instance(next_striped_spin_lock_num());
1000285c:	f7ff fdae 	bl	100023bc <next_striped_spin_lock_num>
    return (spin_lock_t *) (SIO_BASE + SIO_SPINLOCK0_OFFSET + lock_num * 4);
10002860:	4b0f      	ldr	r3, [pc, #60]	; (100028a0 <alarm_pool_init_default+0x6c>)
    pool->heap = ph_create(max_timers, timer_pool_entry_comparator, pool);
10002862:	002a      	movs	r2, r5
10002864:	469c      	mov	ip, r3
10002866:	4460      	add	r0, ip
10002868:	0080      	lsls	r0, r0, #2
1000286a:	490e      	ldr	r1, [pc, #56]	; (100028a4 <alarm_pool_init_default+0x70>)
    pool->lock = spin_lock_instance(next_striped_spin_lock_num());
1000286c:	6068      	str	r0, [r5, #4]
    pool->heap = ph_create(max_timers, timer_pool_entry_comparator, pool);
1000286e:	2010      	movs	r0, #16
10002870:	f7fe fed2 	bl	10001618 <ph_create>
    pool->entries = (alarm_pool_entry_t *)calloc(max_timers, sizeof(alarm_pool_entry_t));
10002874:	2110      	movs	r1, #16
    pool->heap = ph_create(max_timers, timer_pool_entry_comparator, pool);
10002876:	6028      	str	r0, [r5, #0]
    pool->entries = (alarm_pool_entry_t *)calloc(max_timers, sizeof(alarm_pool_entry_t));
10002878:	2010      	movs	r0, #16
1000287a:	f7ff f883 	bl	10001984 <__wrap_calloc>
    pool->entry_ids_high = (uint8_t *)calloc(max_timers, sizeof(uint8_t));
1000287e:	2101      	movs	r1, #1
    pool->entries = (alarm_pool_entry_t *)calloc(max_timers, sizeof(alarm_pool_entry_t));
10002880:	60a8      	str	r0, [r5, #8]
    pool->entry_ids_high = (uint8_t *)calloc(max_timers, sizeof(uint8_t));
10002882:	2010      	movs	r0, #16
10002884:	f7ff f87e 	bl	10001984 <__wrap_calloc>
    pool->hardware_alarm_num = hardware_alarm_num;
10002888:	2303      	movs	r3, #3
1000288a:	752b      	strb	r3, [r5, #20]
    pools[hardware_alarm_num] = pool;
1000288c:	4b06      	ldr	r3, [pc, #24]	; (100028a8 <alarm_pool_init_default+0x74>)
    pool->entry_ids_high = (uint8_t *)calloc(max_timers, sizeof(uint8_t));
1000288e:	60e8      	str	r0, [r5, #12]
    pools[hardware_alarm_num] = pool;
10002890:	60dd      	str	r5, [r3, #12]
        default_alarm_pool = alarm_pool_create(PICO_TIME_DEFAULT_ALARM_POOL_HARDWARE_ALARM_NUM,
10002892:	6025      	str	r5, [r4, #0]
}
10002894:	e7d3      	b.n	1000283e <alarm_pool_init_default+0xa>
10002896:	46c0      	nop			; (mov r8, r8)
10002898:	2001206c 	.word	0x2001206c
1000289c:	10002551 	.word	0x10002551
100028a0:	34000040 	.word	0x34000040
100028a4:	100023f5 	.word	0x100023f5
100028a8:	20012730 	.word	0x20012730

100028ac <alarm_pool_get_default>:
    return default_alarm_pool;
100028ac:	4b01      	ldr	r3, [pc, #4]	; (100028b4 <alarm_pool_get_default+0x8>)
100028ae:	6818      	ldr	r0, [r3, #0]
}
100028b0:	4770      	bx	lr
100028b2:	46c0      	nop			; (mov r8, r8)
100028b4:	2001206c 	.word	0x2001206c

100028b8 <alarm_pool_add_alarm_at>:
                                   void *user_data, bool fire_if_past) {
100028b8:	b5f0      	push	{r4, r5, r6, r7, lr}
100028ba:	46de      	mov	lr, fp
100028bc:	464e      	mov	r6, r9
100028be:	4645      	mov	r5, r8
100028c0:	4657      	mov	r7, sl
100028c2:	b5e0      	push	{r5, r6, r7, lr}
100028c4:	b085      	sub	sp, #20
100028c6:	9301      	str	r3, [sp, #4]
100028c8:	ab10      	add	r3, sp, #64	; 0x40
100028ca:	781b      	ldrb	r3, [r3, #0]
100028cc:	0006      	movs	r6, r0
100028ce:	9303      	str	r3, [sp, #12]
    bool missed = false;
100028d0:	2300      	movs	r3, #0
100028d2:	469b      	mov	fp, r3
    hn->child = hn->sibling = hn->parent = 0;
100028d4:	4698      	mov	r8, r3
                                   void *user_data, bool fire_if_past) {
100028d6:	9200      	str	r2, [sp, #0]
        uint32_t save = spin_lock_blocking(pool->lock);
100028d8:	6872      	ldr	r2, [r6, #4]
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
100028da:	f3ef 8a10 	mrs	sl, PRIMASK
    __asm volatile ("cpsid i");
100028de:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
100028e0:	6813      	ldr	r3, [r2, #0]
100028e2:	2b00      	cmp	r3, #0
100028e4:	d0fc      	beq.n	100028e0 <alarm_pool_add_alarm_at+0x28>
    __asm volatile ("dmb");
100028e6:	f3bf 8f5f 	dmb	sy
        id = ph_new_node(pool->heap);
100028ea:	6835      	ldr	r5, [r6, #0]
    if (!heap->free_head_id) return 0;
100028ec:	7bac      	ldrb	r4, [r5, #14]
100028ee:	2c00      	cmp	r4, #0
100028f0:	d100      	bne.n	100028f4 <alarm_pool_add_alarm_at+0x3c>
100028f2:	e080      	b.n	100029f6 <alarm_pool_add_alarm_at+0x13e>
    return heap->nodes + id - 1;
100028f4:	0067      	lsls	r7, r4, #1
100028f6:	682b      	ldr	r3, [r5, #0]
100028f8:	193f      	adds	r7, r7, r4
100028fa:	3f03      	subs	r7, #3
100028fc:	19db      	adds	r3, r3, r7
    heap->free_head_id = ph_get_node(heap, id)->sibling;
100028fe:	785a      	ldrb	r2, [r3, #1]
10002900:	73aa      	strb	r2, [r5, #14]
    if (!heap->free_head_id) heap->free_tail_id = 0;
10002902:	2a00      	cmp	r2, #0
10002904:	d100      	bne.n	10002908 <alarm_pool_add_alarm_at+0x50>
10002906:	73ea      	strb	r2, [r5, #15]
    return pool->entries + id - 1;
10002908:	68b1      	ldr	r1, [r6, #8]
1000290a:	4a55      	ldr	r2, [pc, #340]	; (10002a60 <alarm_pool_add_alarm_at+0x1a8>)
1000290c:	468c      	mov	ip, r1
        entry->target = time;
1000290e:	9800      	ldr	r0, [sp, #0]
10002910:	9901      	ldr	r1, [sp, #4]
    return pool->entries + id - 1;
10002912:	18a2      	adds	r2, r4, r2
10002914:	0112      	lsls	r2, r2, #4
10002916:	4462      	add	r2, ip
        entry->target = time;
10002918:	6010      	str	r0, [r2, #0]
1000291a:	6051      	str	r1, [r2, #4]
        entry->callback = callback;
1000291c:	990e      	ldr	r1, [sp, #56]	; 0x38
1000291e:	6091      	str	r1, [r2, #8]
        entry->user_data = user_data;
10002920:	990f      	ldr	r1, [sp, #60]	; 0x3c
10002922:	60d1      	str	r1, [r2, #12]
    hn->child = hn->sibling = hn->parent = 0;
10002924:	4642      	mov	r2, r8
10002926:	709a      	strb	r2, [r3, #2]
10002928:	705a      	strb	r2, [r3, #1]
1000292a:	701a      	strb	r2, [r3, #0]
    heap->root_id = ph_merge_nodes(heap, heap->root_id, id);
1000292c:	7b6b      	ldrb	r3, [r5, #13]
1000292e:	4699      	mov	r9, r3
    if (!a) return b;
10002930:	2b00      	cmp	r3, #0
10002932:	d100      	bne.n	10002936 <alarm_pool_add_alarm_at+0x7e>
10002934:	e07d      	b.n	10002a32 <alarm_pool_add_alarm_at+0x17a>
    if (heap->comparator(heap->user_data, a, b)) {
10002936:	0022      	movs	r2, r4
10002938:	0019      	movs	r1, r3
1000293a:	68a8      	ldr	r0, [r5, #8]
1000293c:	686b      	ldr	r3, [r5, #4]
1000293e:	4798      	blx	r3
    return heap->nodes + id - 1;
10002940:	682a      	ldr	r2, [r5, #0]
    if (heap->comparator(heap->user_data, a, b)) {
10002942:	2800      	cmp	r0, #0
10002944:	d069      	beq.n	10002a1a <alarm_pool_add_alarm_at+0x162>
    return heap->nodes + id - 1;
10002946:	464b      	mov	r3, r9
    c->parent = parent_id;
10002948:	4648      	mov	r0, r9
    return heap->nodes + id - 1;
1000294a:	005b      	lsls	r3, r3, #1
1000294c:	444b      	add	r3, r9
1000294e:	19d7      	adds	r7, r2, r7
10002950:	3b03      	subs	r3, #3
    c->parent = parent_id;
10002952:	70b8      	strb	r0, [r7, #2]
    return heap->nodes + id - 1;
10002954:	18d1      	adds	r1, r2, r3
    if (!n->child) {
10002956:	5cd3      	ldrb	r3, [r2, r3]
10002958:	2b00      	cmp	r3, #0
1000295a:	d000      	beq.n	1000295e <alarm_pool_add_alarm_at+0xa6>
1000295c:	e07c      	b.n	10002a58 <alarm_pool_add_alarm_at+0x1a0>
    heap->root_id = ph_merge_nodes(heap, heap->root_id, id);
1000295e:	464b      	mov	r3, r9
        n->child = child_id;
10002960:	700c      	strb	r4, [r1, #0]
    heap->root_id = ph_merge_nodes(heap, heap->root_id, id);
10002962:	736b      	strb	r3, [r5, #13]
        if (id == ph_insert(pool->heap, id)) {
10002964:	454c      	cmp	r4, r9
10002966:	d065      	beq.n	10002a34 <alarm_pool_add_alarm_at+0x17c>
        if (id) id_high = *get_entry_id_high(pool, id);
10002968:	68f3      	ldr	r3, [r6, #12]
1000296a:	191b      	adds	r3, r3, r4
1000296c:	3b01      	subs	r3, #1
1000296e:	7818      	ldrb	r0, [r3, #0]
        spin_unlock(pool->lock, save);
10002970:	6873      	ldr	r3, [r6, #4]
10002972:	f3bf 8f5f 	dmb	sy
    *lock = 0;
10002976:	4642      	mov	r2, r8
10002978:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
1000297a:	f38a 8810 	msr	PRIMASK, sl
        public_id = missed ? 0 : make_public_id(id_high, id);
1000297e:	465b      	mov	r3, fp
10002980:	2b00      	cmp	r3, #0
10002982:	d108      	bne.n	10002996 <alarm_pool_add_alarm_at+0xde>
    return ((uint)id_high << 8u * sizeof(id)) | id;
10002984:	0200      	lsls	r0, r0, #8
10002986:	4320      	orrs	r0, r4
}
10002988:	b005      	add	sp, #20
1000298a:	bcf0      	pop	{r4, r5, r6, r7}
1000298c:	46bb      	mov	fp, r7
1000298e:	46b2      	mov	sl, r6
10002990:	46a9      	mov	r9, r5
10002992:	46a0      	mov	r8, r4
10002994:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (missed && fire_if_past) {
10002996:	9b03      	ldr	r3, [sp, #12]
10002998:	2b00      	cmp	r3, #0
1000299a:	d05f      	beq.n	10002a5c <alarm_pool_add_alarm_at+0x1a4>
            int64_t repeat = callback(public_id, user_data);
1000299c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1000299e:	2000      	movs	r0, #0
100029a0:	990f      	ldr	r1, [sp, #60]	; 0x3c
100029a2:	4798      	blx	r3
            if (!repeat) {
100029a4:	0003      	movs	r3, r0
            int64_t repeat = callback(public_id, user_data);
100029a6:	0004      	movs	r4, r0
100029a8:	000d      	movs	r5, r1
            if (!repeat) {
100029aa:	430b      	orrs	r3, r1
100029ac:	d056      	beq.n	10002a5c <alarm_pool_add_alarm_at+0x1a4>
            } else if (repeat < 0) {
100029ae:	2900      	cmp	r1, #0
100029b0:	da0d      	bge.n	100029ce <alarm_pool_add_alarm_at+0x116>
    uint64_t delayed = base + us;
100029b2:	9800      	ldr	r0, [sp, #0]
100029b4:	9901      	ldr	r1, [sp, #4]
100029b6:	0002      	movs	r2, r0
100029b8:	000b      	movs	r3, r1
100029ba:	1b12      	subs	r2, r2, r4
100029bc:	41ab      	sbcs	r3, r5
    if (delayed < base) {
100029be:	4299      	cmp	r1, r3
100029c0:	d813      	bhi.n	100029ea <alarm_pool_add_alarm_at+0x132>
100029c2:	d021      	beq.n	10002a08 <alarm_pool_add_alarm_at+0x150>
100029c4:	9200      	str	r2, [sp, #0]
100029c6:	9301      	str	r3, [sp, #4]
        delayed = (uint64_t)-1;
100029c8:	9b03      	ldr	r3, [sp, #12]
100029ca:	469b      	mov	fp, r3
100029cc:	e784      	b.n	100028d8 <alarm_pool_add_alarm_at+0x20>
    update_us_since_boot(&t, time_us_64());
100029ce:	f000 f969 	bl	10002ca4 <time_us_64>
100029d2:	0002      	movs	r2, r0
100029d4:	000b      	movs	r3, r1
    uint64_t delayed = base + us;
100029d6:	18a4      	adds	r4, r4, r2
100029d8:	415d      	adcs	r5, r3
100029da:	9400      	str	r4, [sp, #0]
100029dc:	9501      	str	r5, [sp, #4]
    if (delayed < base) {
100029de:	42a9      	cmp	r1, r5
100029e0:	d803      	bhi.n	100029ea <alarm_pool_add_alarm_at+0x132>
100029e2:	d1f1      	bne.n	100029c8 <alarm_pool_add_alarm_at+0x110>
100029e4:	9900      	ldr	r1, [sp, #0]
100029e6:	428a      	cmp	r2, r1
100029e8:	d9ee      	bls.n	100029c8 <alarm_pool_add_alarm_at+0x110>
        delayed = (uint64_t)-1;
100029ea:	2301      	movs	r3, #1
100029ec:	425b      	negs	r3, r3
100029ee:	17dc      	asrs	r4, r3, #31
100029f0:	9300      	str	r3, [sp, #0]
100029f2:	9401      	str	r4, [sp, #4]
100029f4:	e7e8      	b.n	100029c8 <alarm_pool_add_alarm_at+0x110>
        spin_unlock(pool->lock, save);
100029f6:	6873      	ldr	r3, [r6, #4]
    __asm volatile ("dmb");
100029f8:	f3bf 8f5f 	dmb	sy
    *lock = 0;
100029fc:	601c      	str	r4, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
100029fe:	f38a 8810 	msr	PRIMASK, sl
            return -1;
10002a02:	2001      	movs	r0, #1
10002a04:	4240      	negs	r0, r0
10002a06:	e7bf      	b.n	10002988 <alarm_pool_add_alarm_at+0xd0>
    if (delayed < base) {
10002a08:	9900      	ldr	r1, [sp, #0]
10002a0a:	4291      	cmp	r1, r2
10002a0c:	d9da      	bls.n	100029c4 <alarm_pool_add_alarm_at+0x10c>
        delayed = (uint64_t)-1;
10002a0e:	2301      	movs	r3, #1
10002a10:	425b      	negs	r3, r3
10002a12:	17dc      	asrs	r4, r3, #31
10002a14:	9300      	str	r3, [sp, #0]
10002a16:	9401      	str	r4, [sp, #4]
10002a18:	e7d6      	b.n	100029c8 <alarm_pool_add_alarm_at+0x110>
    return heap->nodes + id - 1;
10002a1a:	464b      	mov	r3, r9
10002a1c:	005b      	lsls	r3, r3, #1
10002a1e:	444b      	add	r3, r9
10002a20:	3b03      	subs	r3, #3
10002a22:	18d3      	adds	r3, r2, r3
    c->parent = parent_id;
10002a24:	709c      	strb	r4, [r3, #2]
    return heap->nodes + id - 1;
10002a26:	19d1      	adds	r1, r2, r7
    if (!n->child) {
10002a28:	5dd2      	ldrb	r2, [r2, r7]
10002a2a:	2a00      	cmp	r2, #0
10002a2c:	d110      	bne.n	10002a50 <alarm_pool_add_alarm_at+0x198>
        n->child = child_id;
10002a2e:	464b      	mov	r3, r9
10002a30:	700b      	strb	r3, [r1, #0]
    heap->root_id = ph_merge_nodes(heap, heap->root_id, id);
10002a32:	736c      	strb	r4, [r5, #13]
            bool is_missed = hardware_alarm_set_target(pool->hardware_alarm_num, time);
10002a34:	7d30      	ldrb	r0, [r6, #20]
10002a36:	9a00      	ldr	r2, [sp, #0]
10002a38:	9b01      	ldr	r3, [sp, #4]
10002a3a:	f000 f993 	bl	10002d64 <hardware_alarm_set_target>
10002a3e:	4683      	mov	fp, r0
            if (is_missed && !create_if_past) {
10002a40:	2800      	cmp	r0, #0
10002a42:	d100      	bne.n	10002a46 <alarm_pool_add_alarm_at+0x18e>
10002a44:	e790      	b.n	10002968 <alarm_pool_add_alarm_at+0xb0>
                ph_delete(pool->heap, id);
10002a46:	0021      	movs	r1, r4
10002a48:	6830      	ldr	r0, [r6, #0]
10002a4a:	f7fe ff59 	bl	10001900 <ph_delete>
10002a4e:	e78b      	b.n	10002968 <alarm_pool_add_alarm_at+0xb0>
        c->sibling = n->child;
10002a50:	705a      	strb	r2, [r3, #1]
        n->child = child_id;
10002a52:	464b      	mov	r3, r9
10002a54:	700b      	strb	r3, [r1, #0]
10002a56:	e7ec      	b.n	10002a32 <alarm_pool_add_alarm_at+0x17a>
        c->sibling = n->child;
10002a58:	707b      	strb	r3, [r7, #1]
10002a5a:	e780      	b.n	1000295e <alarm_pool_add_alarm_at+0xa6>
    bool missed = false;
10002a5c:	2000      	movs	r0, #0
    return public_id;
10002a5e:	e793      	b.n	10002988 <alarm_pool_add_alarm_at+0xd0>
10002a60:	0fffffff 	.word	0x0fffffff

10002a64 <alarm_pool_cancel_alarm>:
bool alarm_pool_cancel_alarm(alarm_pool_t *pool, alarm_id_t alarm_id) {
10002a64:	b570      	push	{r4, r5, r6, lr}
    uint32_t save = spin_lock_blocking(pool->lock);
10002a66:	6842      	ldr	r2, [r0, #4]
bool alarm_pool_cancel_alarm(alarm_pool_t *pool, alarm_id_t alarm_id) {
10002a68:	0004      	movs	r4, r0
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
10002a6a:	f3ef 8510 	mrs	r5, PRIMASK
    __asm volatile ("cpsid i");
10002a6e:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
10002a70:	6813      	ldr	r3, [r2, #0]
10002a72:	2b00      	cmp	r3, #0
10002a74:	d0fc      	beq.n	10002a70 <alarm_pool_cancel_alarm+0xc>
    __asm volatile ("dmb");
10002a76:	f3bf 8f5f 	dmb	sy
    if (ph_contains(pool->heap, id)) {
10002a7a:	6820      	ldr	r0, [r4, #0]
    pheap_node_id_t id = (pheap_node_id_t) alarm_id;
10002a7c:	b2ce      	uxtb	r6, r1
    return id == heap->root_id || ph_get_node(heap, id)->parent;
10002a7e:	7b43      	ldrb	r3, [r0, #13]
10002a80:	42b3      	cmp	r3, r6
10002a82:	d00a      	beq.n	10002a9a <alarm_pool_cancel_alarm+0x36>
    return heap->nodes + id - 1;
10002a84:	23ff      	movs	r3, #255	; 0xff
10002a86:	400b      	ands	r3, r1
    return id == heap->root_id || ph_get_node(heap, id)->parent;
10002a88:	005a      	lsls	r2, r3, #1
10002a8a:	18d3      	adds	r3, r2, r3
10002a8c:	6802      	ldr	r2, [r0, #0]
10002a8e:	4694      	mov	ip, r2
10002a90:	4463      	add	r3, ip
10002a92:	3b03      	subs	r3, #3
10002a94:	789b      	ldrb	r3, [r3, #2]
10002a96:	2b00      	cmp	r3, #0
10002a98:	d013      	beq.n	10002ac2 <alarm_pool_cancel_alarm+0x5e>
        if (id_high == *get_entry_id_high(pool, id)) {
10002a9a:	68e2      	ldr	r2, [r4, #12]
    return heap->nodes + id - 1;
10002a9c:	23ff      	movs	r3, #255	; 0xff
10002a9e:	4694      	mov	ip, r2
10002aa0:	400b      	ands	r3, r1
10002aa2:	4463      	add	r3, ip
10002aa4:	3b01      	subs	r3, #1
        uint8_t id_high = (uint8_t)((uint)alarm_id >> 8u * sizeof(pheap_node_id_t));
10002aa6:	0a0a      	lsrs	r2, r1, #8
        if (id_high == *get_entry_id_high(pool, id)) {
10002aa8:	7819      	ldrb	r1, [r3, #0]
10002aaa:	b2d2      	uxtb	r2, r2
10002aac:	4291      	cmp	r1, r2
10002aae:	d00e      	beq.n	10002ace <alarm_pool_cancel_alarm+0x6a>
    bool rc = false;
10002ab0:	2000      	movs	r0, #0
    spin_unlock(pool->lock, save);
10002ab2:	6863      	ldr	r3, [r4, #4]
10002ab4:	f3bf 8f5f 	dmb	sy
    *lock = 0;
10002ab8:	2200      	movs	r2, #0
10002aba:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10002abc:	f385 8810 	msr	PRIMASK, r5
}
10002ac0:	bd70      	pop	{r4, r5, r6, pc}
        if (alarm_id == pool->alarm_in_progress) {
10002ac2:	6922      	ldr	r2, [r4, #16]
10002ac4:	428a      	cmp	r2, r1
10002ac6:	d1f3      	bne.n	10002ab0 <alarm_pool_cancel_alarm+0x4c>
    bool rc = false;
10002ac8:	2000      	movs	r0, #0
            pool->alarm_in_progress = 0;
10002aca:	6123      	str	r3, [r4, #16]
10002acc:	e7f1      	b.n	10002ab2 <alarm_pool_cancel_alarm+0x4e>
            rc = ph_delete(pool->heap, id);
10002ace:	0031      	movs	r1, r6
10002ad0:	f7fe ff16 	bl	10001900 <ph_delete>
10002ad4:	e7ed      	b.n	10002ab2 <alarm_pool_cancel_alarm+0x4e>
10002ad6:	46c0      	nop			; (mov r8, r8)

10002ad8 <sleep_ms>:
    }
#endif

}

void sleep_ms(uint32_t ms) {
10002ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10002ada:	0004      	movs	r4, r0
    update_us_since_boot(&t, time_us_64());
10002adc:	f000 f8e2 	bl	10002ca4 <time_us_64>
    sleep_us(ms * 1000ull);
10002ae0:	22fa      	movs	r2, #250	; 0xfa
10002ae2:	0006      	movs	r6, r0
10002ae4:	000f      	movs	r7, r1
10002ae6:	0020      	movs	r0, r4
10002ae8:	2300      	movs	r3, #0
10002aea:	2100      	movs	r1, #0
10002aec:	0092      	lsls	r2, r2, #2
10002aee:	f7fd ff59 	bl	100009a4 <__wrap___aeabi_lmul>
    uint64_t delayed = base + us;
10002af2:	1980      	adds	r0, r0, r6
10002af4:	4179      	adcs	r1, r7
10002af6:	0004      	movs	r4, r0
10002af8:	000d      	movs	r5, r1
    if (delayed < base) {
10002afa:	428f      	cmp	r7, r1
10002afc:	d81a      	bhi.n	10002b34 <sleep_ms+0x5c>
10002afe:	d017      	beq.n	10002b30 <sleep_ms+0x58>
    uint64_t t_before_us = t_us - PICO_TIME_SLEEP_OVERHEAD_ADJUST_US;
10002b00:	2606      	movs	r6, #6
10002b02:	4276      	negs	r6, r6
10002b04:	17f7      	asrs	r7, r6, #31
10002b06:	1936      	adds	r6, r6, r4
10002b08:	416f      	adcs	r7, r5
    if (t_before_us > t_us) t_before_us = 0;
10002b0a:	42af      	cmp	r7, r5
10002b0c:	d937      	bls.n	10002b7e <sleep_ms+0xa6>
10002b0e:	2600      	movs	r6, #0
10002b10:	2700      	movs	r7, #0
    update_us_since_boot(&t, time_us_64());
10002b12:	f000 f8c7 	bl	10002ca4 <time_us_64>
    return to_us_since_boot(to) - to_us_since_boot(from);
10002b16:	0032      	movs	r2, r6
10002b18:	003b      	movs	r3, r7
10002b1a:	1a12      	subs	r2, r2, r0
10002b1c:	418b      	sbcs	r3, r1
    if (absolute_time_diff_us(get_absolute_time(), t_before) > 0) {
10002b1e:	2b00      	cmp	r3, #0
10002b20:	dc16      	bgt.n	10002b50 <sleep_ms+0x78>
10002b22:	2b00      	cmp	r3, #0
10002b24:	d028      	beq.n	10002b78 <sleep_ms+0xa0>
    busy_wait_until(t);
10002b26:	0029      	movs	r1, r5
10002b28:	0020      	movs	r0, r4
10002b2a:	f000 f8c5 	bl	10002cb8 <busy_wait_until>
}
10002b2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (delayed < base) {
10002b30:	4286      	cmp	r6, r0
10002b32:	d9e5      	bls.n	10002b00 <sleep_ms+0x28>
    uint64_t t_before_us = t_us - PICO_TIME_SLEEP_OVERHEAD_ADJUST_US;
10002b34:	2607      	movs	r6, #7
10002b36:	4276      	negs	r6, r6
10002b38:	17f7      	asrs	r7, r6, #31
    update_us_since_boot(&t, time_us_64());
10002b3a:	f000 f8b3 	bl	10002ca4 <time_us_64>
    return to_us_since_boot(to) - to_us_since_boot(from);
10002b3e:	0032      	movs	r2, r6
10002b40:	003b      	movs	r3, r7
10002b42:	1a12      	subs	r2, r2, r0
10002b44:	418b      	sbcs	r3, r1
        delayed = (uint64_t)-1;
10002b46:	2401      	movs	r4, #1
10002b48:	4264      	negs	r4, r4
10002b4a:	17e5      	asrs	r5, r4, #31
    if (absolute_time_diff_us(get_absolute_time(), t_before) > 0) {
10002b4c:	2b00      	cmp	r3, #0
10002b4e:	dde8      	ble.n	10002b22 <sleep_ms+0x4a>
    return default_alarm_pool;
10002b50:	4b0d      	ldr	r3, [pc, #52]	; (10002b88 <sleep_ms+0xb0>)
    return alarm_pool_add_alarm_at(alarm_pool_get_default(), time, callback, user_data, fire_if_past);
10002b52:	0032      	movs	r2, r6
10002b54:	6818      	ldr	r0, [r3, #0]
10002b56:	003b      	movs	r3, r7
10002b58:	f7ff fdde 	bl	10002718 <alarm_pool_add_alarm_at.constprop.0>
        if (add_alarm_at(t_before, sev_callback, NULL, false) >= 0) {
10002b5c:	2800      	cmp	r0, #0
10002b5e:	dbe2      	blt.n	10002b26 <sleep_ms+0x4e>
    uint32_t hi_target = target >> 32u;
10002b60:	0039      	movs	r1, r7
    uint32_t hi = timer_hw->timerawh;
10002b62:	4a0a      	ldr	r2, [pc, #40]	; (10002b8c <sleep_ms+0xb4>)
10002b64:	6a53      	ldr	r3, [r2, #36]	; 0x24
    return (hi >= hi_target && (timer_hw->timerawl >= (uint32_t) target || hi != hi_target));
10002b66:	4299      	cmp	r1, r3
10002b68:	d804      	bhi.n	10002b74 <sleep_ms+0x9c>
10002b6a:	6a90      	ldr	r0, [r2, #40]	; 0x28
10002b6c:	4286      	cmp	r6, r0
10002b6e:	d9da      	bls.n	10002b26 <sleep_ms+0x4e>
10002b70:	4299      	cmp	r1, r3
10002b72:	d1d8      	bne.n	10002b26 <sleep_ms+0x4e>
    __asm volatile ("wfe");
10002b74:	bf20      	wfe
}
10002b76:	e7f5      	b.n	10002b64 <sleep_ms+0x8c>
    if (absolute_time_diff_us(get_absolute_time(), t_before) > 0) {
10002b78:	2a00      	cmp	r2, #0
10002b7a:	d0d4      	beq.n	10002b26 <sleep_ms+0x4e>
10002b7c:	e7e8      	b.n	10002b50 <sleep_ms+0x78>
    if (t_before_us > t_us) t_before_us = 0;
10002b7e:	42af      	cmp	r7, r5
10002b80:	d1c7      	bne.n	10002b12 <sleep_ms+0x3a>
10002b82:	42a6      	cmp	r6, r4
10002b84:	d8c3      	bhi.n	10002b0e <sleep_ms+0x36>
10002b86:	e7c4      	b.n	10002b12 <sleep_ms+0x3a>
10002b88:	2001206c 	.word	0x2001206c
10002b8c:	40054000 	.word	0x40054000

10002b90 <best_effort_wfe_or_timeout>:

bool best_effort_wfe_or_timeout(absolute_time_t timeout_timestamp) {
10002b90:	b570      	push	{r4, r5, r6, lr}
    return default_alarm_pool;
10002b92:	4d0e      	ldr	r5, [pc, #56]	; (10002bcc <best_effort_wfe_or_timeout+0x3c>)
10002b94:	0002      	movs	r2, r0
10002b96:	000b      	movs	r3, r1
bool best_effort_wfe_or_timeout(absolute_time_t timeout_timestamp) {
10002b98:	0006      	movs	r6, r0
10002b9a:	6828      	ldr	r0, [r5, #0]
10002b9c:	000c      	movs	r4, r1
10002b9e:	f7ff fdbb 	bl	10002718 <alarm_pool_add_alarm_at.constprop.0>
10002ba2:	1e01      	subs	r1, r0, #0
#if !PICO_TIME_DEFAULT_ALARM_POOL_DISABLED
    alarm_id_t id;
    id = add_alarm_at(timeout_timestamp, sev_callback, NULL, false);
    if (id <= 0) {
10002ba4:	dd03      	ble.n	10002bae <best_effort_wfe_or_timeout+0x1e>
    __asm volatile ("wfe");
10002ba6:	bf20      	wfe
 * \param alarm_id the alarm
 * \return true if the alarm was cancelled, false if it didn't exist
 * \sa alarm_id_t for a note on reuse of IDs
 */
static inline bool cancel_alarm(alarm_id_t alarm_id) {
    return alarm_pool_cancel_alarm(alarm_pool_get_default(), alarm_id);
10002ba8:	6828      	ldr	r0, [r5, #0]
10002baa:	f7ff ff5b 	bl	10002a64 <alarm_pool_cancel_alarm>
    uint32_t hi = timer_hw->timerawh;
10002bae:	4b08      	ldr	r3, [pc, #32]	; (10002bd0 <best_effort_wfe_or_timeout+0x40>)
10002bb0:	2000      	movs	r0, #0
10002bb2:	6a59      	ldr	r1, [r3, #36]	; 0x24
    return (hi >= hi_target && (timer_hw->timerawl >= (uint32_t) target || hi != hi_target));
10002bb4:	428c      	cmp	r4, r1
10002bb6:	d803      	bhi.n	10002bc0 <best_effort_wfe_or_timeout+0x30>
10002bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10002bba:	3001      	adds	r0, #1
10002bbc:	42b3      	cmp	r3, r6
10002bbe:	d300      	bcc.n	10002bc2 <best_effort_wfe_or_timeout+0x32>
    }
#else
    tight_loop_contents();
    return time_reached(timeout_timestamp);
#endif
}
10002bc0:	bd70      	pop	{r4, r5, r6, pc}
10002bc2:	1a64      	subs	r4, r4, r1
10002bc4:	1e63      	subs	r3, r4, #1
10002bc6:	419c      	sbcs	r4, r3
10002bc8:	b2e0      	uxtb	r0, r4
10002bca:	e7f9      	b.n	10002bc0 <best_effort_wfe_or_timeout+0x30>
10002bcc:	2001206c 	.word	0x2001206c
10002bd0:	40054000 	.word	0x40054000

10002bd4 <hardware_alarm_irq_handler>:

static inline uint harware_alarm_irq_number(uint alarm_num) {
    return TIMER_IRQ_0 + alarm_num;
}

static void hardware_alarm_irq_handler() {
10002bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
10002bd6:	46d6      	mov	lr, sl
10002bd8:	464f      	mov	r7, r9
10002bda:	4646      	mov	r6, r8
10002bdc:	b5c0      	push	{r6, r7, lr}
    // Determine which timer this IRQ is for
    uint32_t ipsr;
    __asm volatile ("mrs %0, ipsr" : "=r" (ipsr)::);
10002bde:	f3ef 8305 	mrs	r3, IPSR
    uint alarm_num = (ipsr & 0x3fu) - 16 - TIMER_IRQ_0;
10002be2:	223f      	movs	r2, #63	; 0x3f
10002be4:	4013      	ands	r3, r2
10002be6:	0018      	movs	r0, r3
10002be8:	3810      	subs	r0, #16
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
10002bea:	f3ef 8c10 	mrs	ip, PRIMASK
    __asm volatile ("cpsid i");
10002bee:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
10002bf0:	4d20      	ldr	r5, [pc, #128]	; (10002c74 <hardware_alarm_irq_handler+0xa0>)
10002bf2:	682a      	ldr	r2, [r5, #0]
10002bf4:	2a00      	cmp	r2, #0
10002bf6:	d0fc      	beq.n	10002bf2 <hardware_alarm_irq_handler+0x1e>
    __asm volatile ("dmb");
10002bf8:	f3bf 8f5f 	dmb	sy
    hardware_alarm_callback_t callback = NULL;

    spin_lock_t *lock = spin_lock_instance(PICO_SPINLOCK_ID_TIMER);
    uint32_t save = spin_lock_blocking(lock);
    // Clear the timer IRQ (inside lock, because we check whether we have handled the IRQ yet in alarm_set by looking at the interrupt status
    timer_hw->intr = 1u << alarm_num;
10002bfc:	2201      	movs	r2, #1
10002bfe:	0011      	movs	r1, r2
10002c00:	4081      	lsls	r1, r0
10002c02:	4c1d      	ldr	r4, [pc, #116]	; (10002c78 <hardware_alarm_irq_handler+0xa4>)
10002c04:	4688      	mov	r8, r1
10002c06:	6361      	str	r1, [r4, #52]	; 0x34

    // make sure the IRQ is still valid
    if (timer_callbacks_pending & (1u << alarm_num)) {
10002c08:	491c      	ldr	r1, [pc, #112]	; (10002c7c <hardware_alarm_irq_handler+0xa8>)
10002c0a:	0017      	movs	r7, r2
10002c0c:	780e      	ldrb	r6, [r1, #0]
10002c0e:	468a      	mov	sl, r1
10002c10:	0031      	movs	r1, r6
10002c12:	40c1      	lsrs	r1, r0
10002c14:	400f      	ands	r7, r1
10002c16:	420a      	tst	r2, r1
10002c18:	d109      	bne.n	10002c2e <hardware_alarm_irq_handler+0x5a>
10002c1a:	f3bf 8f5f 	dmb	sy
    *lock = 0;
10002c1e:	602f      	str	r7, [r5, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10002c20:	f38c 8810 	msr	PRIMASK, ip
    spin_unlock(lock, save);

    if (callback) {
        callback(alarm_num);
    }
}
10002c24:	bce0      	pop	{r5, r6, r7}
10002c26:	46ba      	mov	sl, r7
10002c28:	46b1      	mov	r9, r6
10002c2a:	46a8      	mov	r8, r5
10002c2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (timer_hw->timerawh >= target_hi[alarm_num]) {
10002c2e:	4914      	ldr	r1, [pc, #80]	; (10002c80 <hardware_alarm_irq_handler+0xac>)
10002c30:	0082      	lsls	r2, r0, #2
10002c32:	6a64      	ldr	r4, [r4, #36]	; 0x24
10002c34:	5851      	ldr	r1, [r2, r1]
10002c36:	428c      	cmp	r4, r1
10002c38:	d30f      	bcc.n	10002c5a <hardware_alarm_irq_handler+0x86>
            callback = alarm_callbacks[alarm_num];
10002c3a:	4b12      	ldr	r3, [pc, #72]	; (10002c84 <hardware_alarm_irq_handler+0xb0>)
10002c3c:	58d2      	ldr	r2, [r2, r3]
            timer_callbacks_pending &= ~(1u << alarm_num);
10002c3e:	4643      	mov	r3, r8
10002c40:	439e      	bics	r6, r3
10002c42:	4653      	mov	r3, sl
10002c44:	701e      	strb	r6, [r3, #0]
    __asm volatile ("dmb");
10002c46:	f3bf 8f5f 	dmb	sy
    *lock = 0;
10002c4a:	2300      	movs	r3, #0
10002c4c:	602b      	str	r3, [r5, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10002c4e:	f38c 8810 	msr	PRIMASK, ip
    if (callback) {
10002c52:	2a00      	cmp	r2, #0
10002c54:	d0e6      	beq.n	10002c24 <hardware_alarm_irq_handler+0x50>
        callback(alarm_num);
10002c56:	4790      	blx	r2
}
10002c58:	e7e4      	b.n	10002c24 <hardware_alarm_irq_handler+0x50>
            timer_hw->alarm[alarm_num] = timer_hw->alarm[alarm_num]; // re-arm the timer
10002c5a:	4a0b      	ldr	r2, [pc, #44]	; (10002c88 <hardware_alarm_irq_handler+0xb4>)
10002c5c:	009b      	lsls	r3, r3, #2
10002c5e:	4690      	mov	r8, r2
10002c60:	4443      	add	r3, r8
10002c62:	681a      	ldr	r2, [r3, #0]
10002c64:	601a      	str	r2, [r3, #0]
    __asm volatile ("dmb");
10002c66:	f3bf 8f5f 	dmb	sy
    *lock = 0;
10002c6a:	2300      	movs	r3, #0
10002c6c:	602b      	str	r3, [r5, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10002c6e:	f38c 8810 	msr	PRIMASK, ip
    if (callback) {
10002c72:	e7d7      	b.n	10002c24 <hardware_alarm_irq_handler+0x50>
10002c74:	d0000128 	.word	0xd0000128
10002c78:	40054000 	.word	0x40054000
10002c7c:	20012777 	.word	0x20012777
10002c80:	20012754 	.word	0x20012754
10002c84:	20011f30 	.word	0x20011f30
10002c88:	40053fd0 	.word	0x40053fd0

10002c8c <hardware_alarm_claim>:
void hardware_alarm_claim(uint alarm_num) {
10002c8c:	b510      	push	{r4, lr}
10002c8e:	0001      	movs	r1, r0
    hw_claim_or_assert(&claimed, alarm_num, "Hardware alarm %d already claimed");
10002c90:	4a02      	ldr	r2, [pc, #8]	; (10002c9c <hardware_alarm_claim+0x10>)
10002c92:	4803      	ldr	r0, [pc, #12]	; (10002ca0 <hardware_alarm_claim+0x14>)
10002c94:	f7fd fee8 	bl	10000a68 <hw_claim_or_assert>
}
10002c98:	bd10      	pop	{r4, pc}
10002c9a:	46c0      	nop			; (mov r8, r8)
10002c9c:	1000e4ac 	.word	0x1000e4ac
10002ca0:	20012775 	.word	0x20012775

10002ca4 <time_us_64>:
    uint32_t hi = timer_hw->timerawh;
10002ca4:	4b03      	ldr	r3, [pc, #12]	; (10002cb4 <time_us_64+0x10>)
10002ca6:	6a59      	ldr	r1, [r3, #36]	; 0x24
        lo = timer_hw->timerawl;
10002ca8:	000a      	movs	r2, r1
10002caa:	6a98      	ldr	r0, [r3, #40]	; 0x28
        uint32_t next_hi = timer_hw->timerawh;
10002cac:	6a59      	ldr	r1, [r3, #36]	; 0x24
        if (hi == next_hi) break;
10002cae:	428a      	cmp	r2, r1
10002cb0:	d1fa      	bne.n	10002ca8 <time_us_64+0x4>
}
10002cb2:	4770      	bx	lr
10002cb4:	40054000 	.word	0x40054000

10002cb8 <busy_wait_until>:
    uint32_t hi = timer_hw->timerawh;
10002cb8:	4a06      	ldr	r2, [pc, #24]	; (10002cd4 <busy_wait_until+0x1c>)
10002cba:	6a53      	ldr	r3, [r2, #36]	; 0x24
    while (hi < hi_target) {
10002cbc:	4299      	cmp	r1, r3
10002cbe:	d8fc      	bhi.n	10002cba <busy_wait_until+0x2>
    while (hi == hi_target && timer_hw->timerawl < (uint32_t) target) {
10002cc0:	d107      	bne.n	10002cd2 <busy_wait_until+0x1a>
10002cc2:	4b04      	ldr	r3, [pc, #16]	; (10002cd4 <busy_wait_until+0x1c>)
10002cc4:	e002      	b.n	10002ccc <busy_wait_until+0x14>
        hi = timer_hw->timerawh;
10002cc6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    while (hi == hi_target && timer_hw->timerawl < (uint32_t) target) {
10002cc8:	4291      	cmp	r1, r2
10002cca:	d102      	bne.n	10002cd2 <busy_wait_until+0x1a>
10002ccc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
10002cce:	4282      	cmp	r2, r0
10002cd0:	d3f9      	bcc.n	10002cc6 <busy_wait_until+0xe>
}
10002cd2:	4770      	bx	lr
10002cd4:	40054000 	.word	0x40054000

10002cd8 <hardware_alarm_set_callback>:

void hardware_alarm_set_callback(uint alarm_num, hardware_alarm_callback_t callback) {
10002cd8:	b570      	push	{r4, r5, r6, lr}
10002cda:	0004      	movs	r4, r0
10002cdc:	000d      	movs	r5, r1
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
10002cde:	f3ef 8610 	mrs	r6, PRIMASK
    __asm volatile ("cpsid i");
10002ce2:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
10002ce4:	4a1a      	ldr	r2, [pc, #104]	; (10002d50 <hardware_alarm_set_callback+0x78>)
10002ce6:	6813      	ldr	r3, [r2, #0]
10002ce8:	2b00      	cmp	r3, #0
10002cea:	d0fc      	beq.n	10002ce6 <hardware_alarm_set_callback+0xe>
    __asm volatile ("dmb");
10002cec:	f3bf 8f5f 	dmb	sy
    //  should disallow IRQ handlers on both cores
    check_hardware_alarm_num_param(alarm_num);
    uint irq_num = harware_alarm_irq_number(alarm_num);
    spin_lock_t *lock = spin_lock_instance(PICO_SPINLOCK_ID_TIMER);
    uint32_t save = spin_lock_blocking(lock);
    if (callback) {
10002cf0:	2d00      	cmp	r5, #0
10002cf2:	d01b      	beq.n	10002d2c <hardware_alarm_set_callback+0x54>
        if (hardware_alarm_irq_handler != irq_get_vtable_handler(irq_num)) {
10002cf4:	0020      	movs	r0, r4
10002cf6:	f7fe fa37 	bl	10001168 <irq_get_vtable_handler>
10002cfa:	4916      	ldr	r1, [pc, #88]	; (10002d54 <hardware_alarm_set_callback+0x7c>)
10002cfc:	4281      	cmp	r1, r0
10002cfe:	d00a      	beq.n	10002d16 <hardware_alarm_set_callback+0x3e>
            // note that set_exclusive will silently allow you to set the handler to the same thing
            // since it is idempotent, which means we don't need to worry about locking ourselves
            irq_set_exclusive_handler(irq_num, hardware_alarm_irq_handler);
10002d00:	0020      	movs	r0, r4
10002d02:	f7fe fa39 	bl	10001178 <irq_set_exclusive_handler>
            irq_set_enabled(irq_num, true);
10002d06:	2101      	movs	r1, #1
10002d08:	0020      	movs	r0, r4
10002d0a:	f7fe fa13 	bl	10001134 <irq_set_enabled>
            // Enable interrupt in block and at processor
            hw_set_bits(&timer_hw->inte, 1u << alarm_num);
10002d0e:	2301      	movs	r3, #1
10002d10:	40a3      	lsls	r3, r4
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10002d12:	4a11      	ldr	r2, [pc, #68]	; (10002d58 <hardware_alarm_set_callback+0x80>)
10002d14:	6013      	str	r3, [r2, #0]
        }
        alarm_callbacks[alarm_num] = callback;
10002d16:	4b11      	ldr	r3, [pc, #68]	; (10002d5c <hardware_alarm_set_callback+0x84>)
10002d18:	00a4      	lsls	r4, r4, #2
10002d1a:	50e5      	str	r5, [r4, r3]
10002d1c:	f3bf 8f5f 	dmb	sy
    *lock = 0;
10002d20:	2200      	movs	r2, #0
10002d22:	4b0b      	ldr	r3, [pc, #44]	; (10002d50 <hardware_alarm_set_callback+0x78>)
10002d24:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10002d26:	f386 8810 	msr	PRIMASK, r6
        timer_callbacks_pending &= ~(1u << alarm_num);
        irq_remove_handler(irq_num, hardware_alarm_irq_handler);
        irq_set_enabled(irq_num, false);
    }
    spin_unlock(lock, save);
}
10002d2a:	bd70      	pop	{r4, r5, r6, pc}
        alarm_callbacks[alarm_num] = NULL;
10002d2c:	4b0b      	ldr	r3, [pc, #44]	; (10002d5c <hardware_alarm_set_callback+0x84>)
10002d2e:	00a2      	lsls	r2, r4, #2
10002d30:	50d5      	str	r5, [r2, r3]
        timer_callbacks_pending &= ~(1u << alarm_num);
10002d32:	2201      	movs	r2, #1
10002d34:	40a2      	lsls	r2, r4
10002d36:	490a      	ldr	r1, [pc, #40]	; (10002d60 <hardware_alarm_set_callback+0x88>)
        irq_remove_handler(irq_num, hardware_alarm_irq_handler);
10002d38:	0020      	movs	r0, r4
        timer_callbacks_pending &= ~(1u << alarm_num);
10002d3a:	780b      	ldrb	r3, [r1, #0]
10002d3c:	4393      	bics	r3, r2
10002d3e:	700b      	strb	r3, [r1, #0]
        irq_remove_handler(irq_num, hardware_alarm_irq_handler);
10002d40:	4904      	ldr	r1, [pc, #16]	; (10002d54 <hardware_alarm_set_callback+0x7c>)
10002d42:	f7fe fa43 	bl	100011cc <irq_remove_handler>
        irq_set_enabled(irq_num, false);
10002d46:	2100      	movs	r1, #0
10002d48:	0020      	movs	r0, r4
10002d4a:	f7fe f9f3 	bl	10001134 <irq_set_enabled>
10002d4e:	e7e5      	b.n	10002d1c <hardware_alarm_set_callback+0x44>
10002d50:	d0000128 	.word	0xd0000128
10002d54:	10002bd5 	.word	0x10002bd5
10002d58:	40056038 	.word	0x40056038
10002d5c:	20011f30 	.word	0x20011f30
10002d60:	20012777 	.word	0x20012777

10002d64 <hardware_alarm_set_target>:

bool hardware_alarm_set_target(uint alarm_num, absolute_time_t target) {
10002d64:	b5f0      	push	{r4, r5, r6, r7, lr}
10002d66:	46ce      	mov	lr, r9
10002d68:	4647      	mov	r7, r8
10002d6a:	b580      	push	{r7, lr}
    uint32_t hi = timer_hw->timerawh;
10002d6c:	4c2a      	ldr	r4, [pc, #168]	; (10002e18 <hardware_alarm_set_target+0xb4>)
10002d6e:	6a61      	ldr	r1, [r4, #36]	; 0x24
        lo = timer_hw->timerawl;
10002d70:	000d      	movs	r5, r1
10002d72:	6aa6      	ldr	r6, [r4, #40]	; 0x28
        uint32_t next_hi = timer_hw->timerawh;
10002d74:	6a61      	ldr	r1, [r4, #36]	; 0x24
        if (hi == next_hi) break;
10002d76:	42a9      	cmp	r1, r5
10002d78:	d1fa      	bne.n	10002d70 <hardware_alarm_set_target+0xc>
    bool missed;
    uint64_t now = time_us_64();
    uint64_t t = to_us_since_boot(target);
    if (now >= t) {
10002d7a:	428b      	cmp	r3, r1
10002d7c:	d807      	bhi.n	10002d8e <hardware_alarm_set_target+0x2a>
10002d7e:	d004      	beq.n	10002d8a <hardware_alarm_set_target+0x26>
        missed = true;
10002d80:	2001      	movs	r0, #1
            }
        }
        spin_unlock(lock, save);
    }
    return missed;
}
10002d82:	bcc0      	pop	{r6, r7}
10002d84:	46b9      	mov	r9, r7
10002d86:	46b0      	mov	r8, r6
10002d88:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (now >= t) {
10002d8a:	42b2      	cmp	r2, r6
10002d8c:	d9f8      	bls.n	10002d80 <hardware_alarm_set_target+0x1c>
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
10002d8e:	f3ef 8910 	mrs	r9, PRIMASK
    __asm volatile ("cpsid i");
10002d92:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
10002d94:	4c21      	ldr	r4, [pc, #132]	; (10002e1c <hardware_alarm_set_target+0xb8>)
10002d96:	6821      	ldr	r1, [r4, #0]
10002d98:	2900      	cmp	r1, #0
10002d9a:	d0fc      	beq.n	10002d96 <hardware_alarm_set_target+0x32>
    __asm volatile ("dmb");
10002d9c:	f3bf 8f5f 	dmb	sy
        timer_hw->intr = 1u << alarm_num;
10002da0:	2501      	movs	r5, #1
10002da2:	4085      	lsls	r5, r0
10002da4:	4c1c      	ldr	r4, [pc, #112]	; (10002e18 <hardware_alarm_set_target+0xb4>)
        timer_callbacks_pending |= 1u << alarm_num;
10002da6:	4f1e      	ldr	r7, [pc, #120]	; (10002e20 <hardware_alarm_set_target+0xbc>)
        timer_hw->intr = 1u << alarm_num;
10002da8:	6365      	str	r5, [r4, #52]	; 0x34
        timer_callbacks_pending |= 1u << alarm_num;
10002daa:	b2e9      	uxtb	r1, r5
10002dac:	4688      	mov	r8, r1
10002dae:	7839      	ldrb	r1, [r7, #0]
10002db0:	468c      	mov	ip, r1
10002db2:	4641      	mov	r1, r8
10002db4:	4666      	mov	r6, ip
10002db6:	4331      	orrs	r1, r6
10002db8:	7039      	strb	r1, [r7, #0]
        timer_hw->alarm[alarm_num] = (uint32_t) t;
10002dba:	1d01      	adds	r1, r0, #4
10002dbc:	0089      	lsls	r1, r1, #2
10002dbe:	510a      	str	r2, [r1, r4]
        target_hi[alarm_num] = t >> 32u;
10002dc0:	4918      	ldr	r1, [pc, #96]	; (10002e24 <hardware_alarm_set_target+0xc0>)
10002dc2:	0080      	lsls	r0, r0, #2
10002dc4:	5043      	str	r3, [r0, r1]
        if (!(timer_hw->armed & 1u << alarm_num)) {
10002dc6:	6a21      	ldr	r1, [r4, #32]
        missed = false;
10002dc8:	2000      	movs	r0, #0
        if (!(timer_hw->armed & 1u << alarm_num)) {
10002dca:	4229      	tst	r1, r5
10002dcc:	d00b      	beq.n	10002de6 <hardware_alarm_set_target+0x82>
    uint32_t hi = timer_hw->timerawh;
10002dce:	6a61      	ldr	r1, [r4, #36]	; 0x24
        lo = timer_hw->timerawl;
10002dd0:	0008      	movs	r0, r1
10002dd2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
        uint32_t next_hi = timer_hw->timerawh;
10002dd4:	6a61      	ldr	r1, [r4, #36]	; 0x24
        if (hi == next_hi) break;
10002dd6:	4281      	cmp	r1, r0
10002dd8:	d1fa      	bne.n	10002dd0 <hardware_alarm_set_target+0x6c>
            if (time_us_64() >= t) {
10002dda:	428b      	cmp	r3, r1
10002ddc:	d802      	bhi.n	10002de4 <hardware_alarm_set_target+0x80>
10002dde:	d10a      	bne.n	10002df6 <hardware_alarm_set_target+0x92>
10002de0:	42b2      	cmp	r2, r6
10002de2:	d908      	bls.n	10002df6 <hardware_alarm_set_target+0x92>
        missed = false;
10002de4:	2000      	movs	r0, #0
10002de6:	f3bf 8f5f 	dmb	sy
    *lock = 0;
10002dea:	2200      	movs	r2, #0
10002dec:	4b0b      	ldr	r3, [pc, #44]	; (10002e1c <hardware_alarm_set_target+0xb8>)
10002dee:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10002df0:	f389 8810 	msr	PRIMASK, r9
}
10002df4:	e7c5      	b.n	10002d82 <hardware_alarm_set_target+0x1e>
                timer_hw->armed = 1u << alarm_num;
10002df6:	4b08      	ldr	r3, [pc, #32]	; (10002e18 <hardware_alarm_set_target+0xb4>)
                timer_callbacks_pending &= ~(1u << alarm_num);
10002df8:	4642      	mov	r2, r8
                timer_hw->armed = 1u << alarm_num;
10002dfa:	621d      	str	r5, [r3, #32]
                timer_hw->intr = 1u << alarm_num; // clear the IRQ too
10002dfc:	635d      	str	r5, [r3, #52]	; 0x34
                timer_callbacks_pending &= ~(1u << alarm_num);
10002dfe:	4663      	mov	r3, ip
10002e00:	4393      	bics	r3, r2
                missed = true;
10002e02:	2001      	movs	r0, #1
                timer_callbacks_pending &= ~(1u << alarm_num);
10002e04:	703b      	strb	r3, [r7, #0]
    __asm volatile ("dmb");
10002e06:	f3bf 8f5f 	dmb	sy
    *lock = 0;
10002e0a:	2200      	movs	r2, #0
10002e0c:	4b03      	ldr	r3, [pc, #12]	; (10002e1c <hardware_alarm_set_target+0xb8>)
10002e0e:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10002e10:	f389 8810 	msr	PRIMASK, r9
10002e14:	e7b5      	b.n	10002d82 <hardware_alarm_set_target+0x1e>
10002e16:	46c0      	nop			; (mov r8, r8)
10002e18:	40054000 	.word	0x40054000
10002e1c:	d0000128 	.word	0xd0000128
10002e20:	20012777 	.word	0x20012777
10002e24:	20012754 	.word	0x20012754

10002e28 <hardware_alarm_cancel>:
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
10002e28:	f3ef 8c10 	mrs	ip, PRIMASK
    __asm volatile ("cpsid i");
10002e2c:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
10002e2e:	490a      	ldr	r1, [pc, #40]	; (10002e58 <hardware_alarm_cancel+0x30>)
10002e30:	680b      	ldr	r3, [r1, #0]
10002e32:	2b00      	cmp	r3, #0
10002e34:	d0fc      	beq.n	10002e30 <hardware_alarm_cancel+0x8>
    __asm volatile ("dmb");
10002e36:	f3bf 8f5f 	dmb	sy
void hardware_alarm_cancel(uint alarm_num) {
    check_hardware_alarm_num_param(alarm_num);

    spin_lock_t *lock = spin_lock_instance(PICO_SPINLOCK_ID_TIMER);
    uint32_t save = spin_lock_blocking(lock);
    timer_hw->armed = 1u << alarm_num;
10002e3a:	2301      	movs	r3, #1
10002e3c:	4083      	lsls	r3, r0
10002e3e:	4a07      	ldr	r2, [pc, #28]	; (10002e5c <hardware_alarm_cancel+0x34>)
    timer_callbacks_pending &= ~(1u << alarm_num);
10002e40:	4807      	ldr	r0, [pc, #28]	; (10002e60 <hardware_alarm_cancel+0x38>)
    timer_hw->armed = 1u << alarm_num;
10002e42:	6213      	str	r3, [r2, #32]
    timer_callbacks_pending &= ~(1u << alarm_num);
10002e44:	7802      	ldrb	r2, [r0, #0]
10002e46:	439a      	bics	r2, r3
10002e48:	7002      	strb	r2, [r0, #0]
10002e4a:	f3bf 8f5f 	dmb	sy
    *lock = 0;
10002e4e:	2300      	movs	r3, #0
10002e50:	600b      	str	r3, [r1, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10002e52:	f38c 8810 	msr	PRIMASK, ip
    spin_unlock(lock, save);
}
10002e56:	4770      	bx	lr
10002e58:	d0000128 	.word	0xd0000128
10002e5c:	40054000 	.word	0x40054000
10002e60:	20012777 	.word	0x20012777

10002e64 <_retrieve_unique_id_on_boot>:

static_assert(PICO_UNIQUE_BOARD_ID_SIZE_BYTES == FLASH_UNIQUE_ID_SIZE_BYTES, "Board ID size must match flash ID size");

static pico_unique_board_id_t retrieved_id;

static void __attribute__((constructor)) _retrieve_unique_id_on_boot() {
10002e64:	b510      	push	{r4, lr}
    // build. Since this constructor is pre-main it would be annoying to
    // debug, so just produce something well-defined and obviously wrong.
    for (int i = 0; i < PICO_UNIQUE_BOARD_ID_SIZE_BYTES; i++)
        retrieved_id.id[i] = 0xee;
#else
    flash_get_unique_id(retrieved_id.id);
10002e66:	4802      	ldr	r0, [pc, #8]	; (10002e70 <_retrieve_unique_id_on_boot+0xc>)
10002e68:	f7fe f8b2 	bl	10000fd0 <flash_get_unique_id>
#endif
}
10002e6c:	bd10      	pop	{r4, pc}
10002e6e:	46c0      	nop			; (mov r8, r8)
10002e70:	20012740 	.word	0x20012740

10002e74 <watchdog_start_tick>:
#include "hardware/structs/psm.h"

/// \tag::watchdog_start_tick[]
void watchdog_start_tick(uint cycles) {
    // Important: This function also provides a tick reference to the timer
    watchdog_hw->tick = cycles | WATCHDOG_TICK_ENABLE_BITS;
10002e74:	2380      	movs	r3, #128	; 0x80
10002e76:	4a02      	ldr	r2, [pc, #8]	; (10002e80 <watchdog_start_tick+0xc>)
10002e78:	009b      	lsls	r3, r3, #2
10002e7a:	4303      	orrs	r3, r0
10002e7c:	62d3      	str	r3, [r2, #44]	; 0x2c
}
10002e7e:	4770      	bx	lr
10002e80:	40058000 	.word	0x40058000

10002e84 <xosc_init>:
#include "hardware/structs/xosc.h"

void xosc_init(void) {
    // Assumes 1-15 MHz input
    assert(XOSC_MHZ <= 15);
    xosc_hw->ctrl = XOSC_CTRL_FREQ_RANGE_VALUE_1_15MHZ;
10002e84:	23aa      	movs	r3, #170	; 0xaa
10002e86:	4a06      	ldr	r2, [pc, #24]	; (10002ea0 <xosc_init+0x1c>)
10002e88:	011b      	lsls	r3, r3, #4
10002e8a:	6013      	str	r3, [r2, #0]

    // Set xosc startup delay
    uint32_t startup_delay = (((12 * MHZ) / 1000) + 128) / 256;
    xosc_hw->startup = startup_delay;
10002e8c:	232f      	movs	r3, #47	; 0x2f
10002e8e:	4905      	ldr	r1, [pc, #20]	; (10002ea4 <xosc_init+0x20>)
10002e90:	60d3      	str	r3, [r2, #12]
10002e92:	4b05      	ldr	r3, [pc, #20]	; (10002ea8 <xosc_init+0x24>)
10002e94:	6019      	str	r1, [r3, #0]

    // Set the enable bit now that we have set freq range and startup delay
    hw_set_bits(&xosc_hw->ctrl, XOSC_CTRL_ENABLE_VALUE_ENABLE << XOSC_CTRL_ENABLE_LSB);

    // Wait for XOSC to be stable
    while(!(xosc_hw->status & XOSC_STATUS_STABLE_BITS));
10002e96:	6853      	ldr	r3, [r2, #4]
10002e98:	2b00      	cmp	r3, #0
10002e9a:	dafc      	bge.n	10002e96 <xosc_init+0x12>
}
10002e9c:	4770      	bx	lr
10002e9e:	46c0      	nop			; (mov r8, r8)
10002ea0:	40024000 	.word	0x40024000
10002ea4:	00fab000 	.word	0x00fab000
10002ea8:	40026000 	.word	0x40026000

10002eac <tud_cdc_n_connected>:

//--------------------------------------------------------------------+
// APPLICATION API
//--------------------------------------------------------------------+
bool tud_cdc_n_connected(uint8_t itf)
{
10002eac:	b510      	push	{r4, lr}
10002eae:	0004      	movs	r4, r0
bool tud_suspended(void);

// Check if device is ready to transfer
static inline bool tud_ready(void)
{
  return tud_mounted() && !tud_suspended();
10002eb0:	f000 fc9c 	bl	100037ec <tud_mounted>
10002eb4:	2800      	cmp	r0, #0
10002eb6:	d101      	bne.n	10002ebc <tud_cdc_n_connected+0x10>
10002eb8:	2000      	movs	r0, #0
  // DTR (bit 0) active  is considered as connected
  return tud_ready() && tu_bit_test(_cdcd_itf[itf].line_state, 0);
}
10002eba:	bd10      	pop	{r4, pc}
10002ebc:	f000 fc9e 	bl	100037fc <tud_suspended>
10002ec0:	2800      	cmp	r0, #0
10002ec2:	d1f9      	bne.n	10002eb8 <tud_cdc_n_connected+0xc>
  return tud_ready() && tu_bit_test(_cdcd_itf[itf].line_state, 0);
10002ec4:	0060      	lsls	r0, r4, #1
10002ec6:	1904      	adds	r4, r0, r4
10002ec8:	0123      	lsls	r3, r4, #4
10002eca:	4804      	ldr	r0, [pc, #16]	; (10002edc <tud_cdc_n_connected+0x30>)
10002ecc:	1b1c      	subs	r4, r3, r4
10002ece:	0124      	lsls	r4, r4, #4
10002ed0:	1904      	adds	r4, r0, r4
10002ed2:	2001      	movs	r0, #1
10002ed4:	7923      	ldrb	r3, [r4, #4]
10002ed6:	4018      	ands	r0, r3
10002ed8:	e7ef      	b.n	10002eba <tud_cdc_n_connected+0xe>
10002eda:	46c0      	nop			; (mov r8, r8)
10002edc:	20011afc 	.word	0x20011afc

10002ee0 <tud_cdc_n_available>:
//--------------------------------------------------------------------+
// READ API
//--------------------------------------------------------------------+
uint32_t tud_cdc_n_available(uint8_t itf)
{
  return tu_fifo_count(&_cdcd_itf[itf].rx_ff);
10002ee0:	0043      	lsls	r3, r0, #1
10002ee2:	181b      	adds	r3, r3, r0
{
10002ee4:	b510      	push	{r4, lr}
  return tu_fifo_count(&_cdcd_itf[itf].rx_ff);
10002ee6:	0118      	lsls	r0, r3, #4
10002ee8:	1ac0      	subs	r0, r0, r3
10002eea:	0100      	lsls	r0, r0, #4
10002eec:	4b02      	ldr	r3, [pc, #8]	; (10002ef8 <tud_cdc_n_available+0x18>)
10002eee:	3010      	adds	r0, #16
10002ef0:	18c0      	adds	r0, r0, r3
10002ef2:	f000 fab9 	bl	10003468 <tu_fifo_count>
}
10002ef6:	bd10      	pop	{r4, pc}
10002ef8:	20011afc 	.word	0x20011afc

10002efc <tud_cdc_n_read>:

uint32_t tud_cdc_n_read(uint8_t itf, void* buffer, uint32_t bufsize)
{
10002efc:	b5f0      	push	{r4, r5, r6, r7, lr}
10002efe:	0044      	lsls	r4, r0, #1
10002f00:	1820      	adds	r0, r4, r0
10002f02:	0104      	lsls	r4, r0, #4
10002f04:	1a24      	subs	r4, r4, r0
10002f06:	0124      	lsls	r4, r4, #4
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
  uint32_t num_read = tu_fifo_read_n(&p_cdc->rx_ff, buffer, bufsize);
10002f08:	0026      	movs	r6, r4
{
10002f0a:	46c6      	mov	lr, r8
  uint32_t num_read = tu_fifo_read_n(&p_cdc->rx_ff, buffer, bufsize);
10002f0c:	4f17      	ldr	r7, [pc, #92]	; (10002f6c <tud_cdc_n_read+0x70>)
10002f0e:	3610      	adds	r6, #16
10002f10:	19f6      	adds	r6, r6, r7
{
10002f12:	b500      	push	{lr}
  uint32_t num_read = tu_fifo_read_n(&p_cdc->rx_ff, buffer, bufsize);
10002f14:	0030      	movs	r0, r6
10002f16:	b292      	uxth	r2, r2
10002f18:	f000 fb14 	bl	10003544 <tu_fifo_read_n>
10002f1c:	0005      	movs	r5, r0
  uint16_t available = tu_fifo_remaining(&p_cdc->rx_ff);
10002f1e:	0030      	movs	r0, r6
10002f20:	f000 faae 	bl	10003480 <tu_fifo_remaining>
  TU_VERIFY(available >= sizeof(p_cdc->epout_buf), );
10002f24:	283f      	cmp	r0, #63	; 0x3f
10002f26:	d803      	bhi.n	10002f30 <tud_cdc_n_read+0x34>
  _prep_out_transaction(p_cdc);
  return num_read;
}
10002f28:	0028      	movs	r0, r5
10002f2a:	bc80      	pop	{r7}
10002f2c:	46b8      	mov	r8, r7
10002f2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  TU_VERIFY(usbd_edpt_claim(rhport, p_cdc->ep_out), );
10002f30:	193b      	adds	r3, r7, r4
10002f32:	2000      	movs	r0, #0
10002f34:	78d9      	ldrb	r1, [r3, #3]
10002f36:	4698      	mov	r8, r3
10002f38:	f001 f9c6 	bl	100042c8 <usbd_edpt_claim>
10002f3c:	2800      	cmp	r0, #0
10002f3e:	d0f3      	beq.n	10002f28 <tud_cdc_n_read+0x2c>
  available = tu_fifo_remaining(&p_cdc->rx_ff);
10002f40:	0030      	movs	r0, r6
10002f42:	f000 fa9d 	bl	10003480 <tu_fifo_remaining>
  if ( available >= sizeof(p_cdc->epout_buf) )  {
10002f46:	283f      	cmp	r0, #63	; 0x3f
10002f48:	d90a      	bls.n	10002f60 <tud_cdc_n_read+0x64>
    usbd_edpt_xfer(rhport, p_cdc->ep_out, p_cdc->epout_buf, sizeof(p_cdc->epout_buf));
10002f4a:	2394      	movs	r3, #148	; 0x94
10002f4c:	009b      	lsls	r3, r3, #2
10002f4e:	18e2      	adds	r2, r4, r3
10002f50:	4643      	mov	r3, r8
10002f52:	19d2      	adds	r2, r2, r7
10002f54:	78d9      	ldrb	r1, [r3, #3]
10002f56:	2000      	movs	r0, #0
10002f58:	2340      	movs	r3, #64	; 0x40
10002f5a:	f001 fa0d 	bl	10004378 <usbd_edpt_xfer>
10002f5e:	e7e3      	b.n	10002f28 <tud_cdc_n_read+0x2c>
    usbd_edpt_release(rhport, p_cdc->ep_out);
10002f60:	4643      	mov	r3, r8
10002f62:	2000      	movs	r0, #0
10002f64:	78d9      	ldrb	r1, [r3, #3]
10002f66:	f001 f9e1 	bl	1000432c <usbd_edpt_release>
  return num_read;
10002f6a:	e7dd      	b.n	10002f28 <tud_cdc_n_read+0x2c>
10002f6c:	20011afc 	.word	0x20011afc

10002f70 <tud_cdc_n_write_flush>:

  return ret;
}

uint32_t tud_cdc_n_write_flush (uint8_t itf)
{
10002f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10002f72:	4647      	mov	r7, r8
10002f74:	46ce      	mov	lr, r9
10002f76:	b580      	push	{r7, lr}
10002f78:	0047      	lsls	r7, r0, #1
10002f7a:	183b      	adds	r3, r7, r0
10002f7c:	011c      	lsls	r4, r3, #4
10002f7e:	1ae4      	subs	r4, r4, r3
10002f80:	0124      	lsls	r4, r4, #4
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];

  // No data to send
  if ( !tu_fifo_count(&p_cdc->tx_ff) ) return 0;
10002f82:	4b23      	ldr	r3, [pc, #140]	; (10003010 <tud_cdc_n_write_flush+0xa0>)
10002f84:	0026      	movs	r6, r4
10002f86:	4698      	mov	r8, r3
10002f88:	3628      	adds	r6, #40	; 0x28
10002f8a:	4446      	add	r6, r8
{
10002f8c:	0005      	movs	r5, r0
  if ( !tu_fifo_count(&p_cdc->tx_ff) ) return 0;
10002f8e:	0030      	movs	r0, r6
10002f90:	f000 fa6a 	bl	10003468 <tu_fifo_count>
10002f94:	2800      	cmp	r0, #0
10002f96:	d104      	bne.n	10002fa2 <tud_cdc_n_write_flush+0x32>
  }else
  {
    // Release endpoint since we don't make any transfer
    // Note: data is dropped if terminal is not connected
    usbd_edpt_release(rhport, p_cdc->ep_in);
    return 0;
10002f98:	2000      	movs	r0, #0
  }
}
10002f9a:	bcc0      	pop	{r6, r7}
10002f9c:	46b9      	mov	r9, r7
10002f9e:	46b0      	mov	r8, r6
10002fa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  TU_VERIFY( usbd_edpt_claim(rhport, p_cdc->ep_in), 0 );
10002fa2:	46a1      	mov	r9, r4
10002fa4:	44c1      	add	r9, r8
10002fa6:	464b      	mov	r3, r9
10002fa8:	2000      	movs	r0, #0
10002faa:	7899      	ldrb	r1, [r3, #2]
10002fac:	f001 f98c 	bl	100042c8 <usbd_edpt_claim>
10002fb0:	2800      	cmp	r0, #0
10002fb2:	d0f1      	beq.n	10002f98 <tud_cdc_n_write_flush+0x28>
  uint16_t const count = tu_fifo_read_n(&p_cdc->tx_ff, p_cdc->epin_buf, sizeof(p_cdc->epin_buf));
10002fb4:	23a4      	movs	r3, #164	; 0xa4
10002fb6:	009b      	lsls	r3, r3, #2
10002fb8:	469c      	mov	ip, r3
10002fba:	4464      	add	r4, ip
10002fbc:	4444      	add	r4, r8
10002fbe:	0030      	movs	r0, r6
10002fc0:	2240      	movs	r2, #64	; 0x40
10002fc2:	0021      	movs	r1, r4
10002fc4:	f000 fabe 	bl	10003544 <tu_fifo_read_n>
10002fc8:	1e06      	subs	r6, r0, #0
  if ( count && tud_cdc_n_connected(itf) )
10002fca:	d016      	beq.n	10002ffa <tud_cdc_n_write_flush+0x8a>
10002fcc:	f000 fc0e 	bl	100037ec <tud_mounted>
10002fd0:	2800      	cmp	r0, #0
10002fd2:	d012      	beq.n	10002ffa <tud_cdc_n_write_flush+0x8a>
10002fd4:	f000 fc12 	bl	100037fc <tud_suspended>
10002fd8:	2800      	cmp	r0, #0
10002fda:	d10e      	bne.n	10002ffa <tud_cdc_n_write_flush+0x8a>
10002fdc:	464b      	mov	r3, r9
10002fde:	791b      	ldrb	r3, [r3, #4]
10002fe0:	07db      	lsls	r3, r3, #31
10002fe2:	d50a      	bpl.n	10002ffa <tud_cdc_n_write_flush+0x8a>
    TU_ASSERT( usbd_edpt_xfer(rhport, p_cdc->ep_in, p_cdc->epin_buf, count), 0 );
10002fe4:	464b      	mov	r3, r9
10002fe6:	0022      	movs	r2, r4
10002fe8:	7899      	ldrb	r1, [r3, #2]
10002fea:	2000      	movs	r0, #0
10002fec:	0033      	movs	r3, r6
10002fee:	f001 f9c3 	bl	10004378 <usbd_edpt_xfer>
10002ff2:	2800      	cmp	r0, #0
10002ff4:	d0d0      	beq.n	10002f98 <tud_cdc_n_write_flush+0x28>
    return count;
10002ff6:	0030      	movs	r0, r6
10002ff8:	e7cf      	b.n	10002f9a <tud_cdc_n_write_flush+0x2a>
    usbd_edpt_release(rhport, p_cdc->ep_in);
10002ffa:	197d      	adds	r5, r7, r5
10002ffc:	012b      	lsls	r3, r5, #4
10002ffe:	1b5d      	subs	r5, r3, r5
10003000:	012d      	lsls	r5, r5, #4
10003002:	4445      	add	r5, r8
10003004:	78a9      	ldrb	r1, [r5, #2]
10003006:	2000      	movs	r0, #0
10003008:	f001 f990 	bl	1000432c <usbd_edpt_release>
1000300c:	e7c4      	b.n	10002f98 <tud_cdc_n_write_flush+0x28>
1000300e:	46c0      	nop			; (mov r8, r8)
10003010:	20011afc 	.word	0x20011afc

10003014 <tud_cdc_n_write>:
  uint16_t ret = tu_fifo_write_n(&p_cdc->tx_ff, buffer, bufsize);
10003014:	0043      	lsls	r3, r0, #1
10003016:	181b      	adds	r3, r3, r0
{
10003018:	b570      	push	{r4, r5, r6, lr}
  uint16_t ret = tu_fifo_write_n(&p_cdc->tx_ff, buffer, bufsize);
1000301a:	011c      	lsls	r4, r3, #4
1000301c:	1ae4      	subs	r4, r4, r3
1000301e:	0124      	lsls	r4, r4, #4
10003020:	4b09      	ldr	r3, [pc, #36]	; (10003048 <tud_cdc_n_write+0x34>)
10003022:	3428      	adds	r4, #40	; 0x28
10003024:	18e4      	adds	r4, r4, r3
{
10003026:	0005      	movs	r5, r0
  uint16_t ret = tu_fifo_write_n(&p_cdc->tx_ff, buffer, bufsize);
10003028:	b292      	uxth	r2, r2
1000302a:	0020      	movs	r0, r4
1000302c:	f000 fb4a 	bl	100036c4 <tu_fifo_write_n>
10003030:	0006      	movs	r6, r0
  if ( tu_fifo_count(&p_cdc->tx_ff) >= BULK_PACKET_SIZE )
10003032:	0020      	movs	r0, r4
10003034:	f000 fa18 	bl	10003468 <tu_fifo_count>
10003038:	283f      	cmp	r0, #63	; 0x3f
1000303a:	d801      	bhi.n	10003040 <tud_cdc_n_write+0x2c>
}
1000303c:	0030      	movs	r0, r6
1000303e:	bd70      	pop	{r4, r5, r6, pc}
    tud_cdc_n_write_flush(itf);
10003040:	0028      	movs	r0, r5
10003042:	f7ff ff95 	bl	10002f70 <tud_cdc_n_write_flush>
10003046:	e7f9      	b.n	1000303c <tud_cdc_n_write+0x28>
10003048:	20011afc 	.word	0x20011afc

1000304c <tud_cdc_n_write_available>:

uint32_t tud_cdc_n_write_available (uint8_t itf)
{
  return tu_fifo_remaining(&_cdcd_itf[itf].tx_ff);
1000304c:	0043      	lsls	r3, r0, #1
1000304e:	181b      	adds	r3, r3, r0
{
10003050:	b510      	push	{r4, lr}
  return tu_fifo_remaining(&_cdcd_itf[itf].tx_ff);
10003052:	0118      	lsls	r0, r3, #4
10003054:	1ac0      	subs	r0, r0, r3
10003056:	0100      	lsls	r0, r0, #4
10003058:	4b02      	ldr	r3, [pc, #8]	; (10003064 <tud_cdc_n_write_available+0x18>)
1000305a:	3028      	adds	r0, #40	; 0x28
1000305c:	18c0      	adds	r0, r0, r3
1000305e:	f000 fa0f 	bl	10003480 <tu_fifo_remaining>
}
10003062:	bd10      	pop	{r4, pc}
10003064:	20011afc 	.word	0x20011afc

10003068 <cdcd_init>:
//--------------------------------------------------------------------+
// USBD Driver API
//--------------------------------------------------------------------+
void cdcd_init(void)
{
  tu_memclr(_cdcd_itf, sizeof(_cdcd_itf));
10003068:	22b4      	movs	r2, #180	; 0xb4
{
1000306a:	b570      	push	{r4, r5, r6, lr}
  tu_memclr(_cdcd_itf, sizeof(_cdcd_itf));
1000306c:	4c1a      	ldr	r4, [pc, #104]	; (100030d8 <cdcd_init+0x70>)
{
1000306e:	b082      	sub	sp, #8
  tu_memclr(_cdcd_itf, sizeof(_cdcd_itf));
10003070:	2100      	movs	r1, #0
10003072:	0020      	movs	r0, r4
10003074:	0092      	lsls	r2, r2, #2
10003076:	f7fd fc89 	bl	1000098c <__wrap_memset>

  for(uint8_t i=0; i<CFG_TUD_CDC; i++)
  {
    cdcd_interface_t* p_cdc = &_cdcd_itf[i];

    p_cdc->wanted_char = -1;
1000307a:	23ff      	movs	r3, #255	; 0xff
1000307c:	7163      	strb	r3, [r4, #5]

    // default line coding is : stop bit = 1, parity = none, data bits = 8
    p_cdc->line_coding.bit_rate  = 115200;
1000307e:	4b17      	ldr	r3, [pc, #92]	; (100030dc <cdcd_init+0x74>)
    p_cdc->line_coding.stop_bits = 0;
    p_cdc->line_coding.parity    = 0;
    p_cdc->line_coding.data_bits = 8;

    // config fifo
    tu_fifo_config(&p_cdc->rx_ff, p_cdc->rx_ff_buf, TU_ARRAY_SIZE(p_cdc->rx_ff_buf), 1, false);
10003080:	2580      	movs	r5, #128	; 0x80
    p_cdc->line_coding.bit_rate  = 115200;
10003082:	80e3      	strh	r3, [r4, #6]
10003084:	2301      	movs	r3, #1
10003086:	2600      	movs	r6, #0
    tu_fifo_config(&p_cdc->rx_ff, p_cdc->rx_ff_buf, TU_ARRAY_SIZE(p_cdc->rx_ff_buf), 1, false);
10003088:	0021      	movs	r1, r4
1000308a:	0020      	movs	r0, r4
    p_cdc->line_coding.bit_rate  = 115200;
1000308c:	8123      	strh	r3, [r4, #8]
    tu_fifo_config(&p_cdc->rx_ff, p_cdc->rx_ff_buf, TU_ARRAY_SIZE(p_cdc->rx_ff_buf), 1, false);
1000308e:	006d      	lsls	r5, r5, #1
    p_cdc->line_coding.data_bits = 8;
10003090:	3307      	adds	r3, #7
10003092:	7323      	strb	r3, [r4, #12]
    tu_fifo_config(&p_cdc->rx_ff, p_cdc->rx_ff_buf, TU_ARRAY_SIZE(p_cdc->rx_ff_buf), 1, false);
10003094:	002a      	movs	r2, r5
10003096:	3140      	adds	r1, #64	; 0x40
10003098:	9600      	str	r6, [sp, #0]
1000309a:	3b07      	subs	r3, #7
1000309c:	3010      	adds	r0, #16
1000309e:	f000 f9a7 	bl	100033f0 <tu_fifo_config>
    tu_fifo_config(&p_cdc->tx_ff, p_cdc->tx_ff_buf, TU_ARRAY_SIZE(p_cdc->tx_ff_buf), 1, false);
100030a2:	0021      	movs	r1, r4
100030a4:	0020      	movs	r0, r4
100030a6:	3141      	adds	r1, #65	; 0x41
100030a8:	002a      	movs	r2, r5
100030aa:	31ff      	adds	r1, #255	; 0xff
100030ac:	2301      	movs	r3, #1
100030ae:	9600      	str	r6, [sp, #0]
100030b0:	3028      	adds	r0, #40	; 0x28
100030b2:	f000 f99d 	bl	100033f0 <tu_fifo_config>
//--------------------------------------------------------------------+
typedef struct mutex osal_mutex_def_t, *osal_mutex_t;

static inline osal_mutex_t osal_mutex_create(osal_mutex_def_t* mdef)
{
    mutex_init(mdef);
100030b6:	2390      	movs	r3, #144	; 0x90
100030b8:	009b      	lsls	r3, r3, #2
100030ba:	18e5      	adds	r5, r4, r3
100030bc:	0028      	movs	r0, r5
100030be:	f7fe fa69 	bl	10001594 <mutex_init>
100030c2:	2392      	movs	r3, #146	; 0x92
100030c4:	009b      	lsls	r3, r3, #2
bool tu_fifo_config(tu_fifo_t *f, void* buffer, uint16_t depth, uint16_t item_size, bool overwritable);

#if CFG_FIFO_MUTEX
static inline void tu_fifo_config_mutex(tu_fifo_t *f, tu_fifo_mutex_t mutex_hdl)
{
  f->mutex = mutex_hdl;
100030c6:	6265      	str	r5, [r4, #36]	; 0x24
100030c8:	18e5      	adds	r5, r4, r3
100030ca:	0028      	movs	r0, r5
100030cc:	f7fe fa62 	bl	10001594 <mutex_init>
100030d0:	63e5      	str	r5, [r4, #60]	; 0x3c
#if CFG_FIFO_MUTEX
    tu_fifo_config_mutex(&p_cdc->rx_ff, osal_mutex_create(&p_cdc->rx_ff_mutex));
    tu_fifo_config_mutex(&p_cdc->tx_ff, osal_mutex_create(&p_cdc->tx_ff_mutex));
#endif
  }
}
100030d2:	b002      	add	sp, #8
100030d4:	bd70      	pop	{r4, r5, r6, pc}
100030d6:	46c0      	nop			; (mov r8, r8)
100030d8:	20011afc 	.word	0x20011afc
100030dc:	ffffc200 	.word	0xffffc200

100030e0 <cdcd_reset>:

void cdcd_reset(uint8_t rhport)
{
100030e0:	b510      	push	{r4, lr}
  (void) rhport;

  for(uint8_t i=0; i<CFG_TUD_CDC; i++)
  {
    tu_memclr(&_cdcd_itf[i], ITF_MEM_RESET_SIZE);
100030e2:	4c07      	ldr	r4, [pc, #28]	; (10003100 <cdcd_reset+0x20>)
100030e4:	2205      	movs	r2, #5
100030e6:	2100      	movs	r1, #0
100030e8:	0020      	movs	r0, r4
100030ea:	f7fd fc4f 	bl	1000098c <__wrap_memset>
    tu_fifo_clear(&_cdcd_itf[i].rx_ff);
100030ee:	0020      	movs	r0, r4
100030f0:	3010      	adds	r0, #16
100030f2:	f000 fb65 	bl	100037c0 <tu_fifo_clear>
    tu_fifo_clear(&_cdcd_itf[i].tx_ff);
100030f6:	0020      	movs	r0, r4
100030f8:	3028      	adds	r0, #40	; 0x28
100030fa:	f000 fb61 	bl	100037c0 <tu_fifo_clear>
  }
}
100030fe:	bd10      	pop	{r4, pc}
10003100:	20011afc 	.word	0x20011afc

10003104 <cdcd_open>:

uint16_t cdcd_open(uint8_t rhport, tusb_desc_interface_t const * itf_desc, uint16_t max_len)
{
10003104:	b5f0      	push	{r4, r5, r6, r7, lr}
  // Only support ACM subclass
  TU_VERIFY( TUSB_CLASS_CDC                           == itf_desc->bInterfaceClass &&
10003106:	794b      	ldrb	r3, [r1, #5]
{
10003108:	0006      	movs	r6, r0
1000310a:	b083      	sub	sp, #12
  TU_VERIFY( TUSB_CLASS_CDC                           == itf_desc->bInterfaceClass &&
1000310c:	2b02      	cmp	r3, #2
1000310e:	d102      	bne.n	10003116 <cdcd_open+0x12>
10003110:	798b      	ldrb	r3, [r1, #6]
10003112:	2b02      	cmp	r3, #2
10003114:	d003      	beq.n	1000311e <cdcd_open+0x1a>
10003116:	2500      	movs	r5, #0

  // Prepare for incoming data
  _prep_out_transaction(p_cdc);

  return drv_len;
}
10003118:	0028      	movs	r0, r5
1000311a:	b003      	add	sp, #12
1000311c:	bdf0      	pop	{r4, r5, r6, r7, pc}
static inline uint32_t tu_abs(int32_t value) { return (uint32_t)((value < 0) ? (-value) : value); }

/// inclusive range checking
static inline bool tu_within(uint32_t lower, uint32_t value, uint32_t upper)
{
  return (lower <= value) && (value <= upper);
1000311e:	79cb      	ldrb	r3, [r1, #7]
10003120:	2b06      	cmp	r3, #6
10003122:	d8f8      	bhi.n	10003116 <cdcd_open+0x12>
    if ( _cdcd_itf[cdc_id].ep_in == 0 )
10003124:	4f2f      	ldr	r7, [pc, #188]	; (100031e4 <cdcd_open+0xe0>)
10003126:	78bb      	ldrb	r3, [r7, #2]
10003128:	2b00      	cmp	r3, #0
1000312a:	d1f4      	bne.n	10003116 <cdcd_open+0x12>
  p_cdc->itf_num = itf_desc->bInterfaceNumber;
1000312c:	788b      	ldrb	r3, [r1, #2]
  uint16_t drv_len = sizeof(tusb_desc_interface_t);
1000312e:	2509      	movs	r5, #9
  p_cdc->itf_num = itf_desc->bInterfaceNumber;
10003130:	703b      	strb	r3, [r7, #0]
// Descriptor helper
//--------------------------------------------------------------------+
static inline uint8_t const * tu_desc_next(void const* desc)
{
  uint8_t const* desc8 = (uint8_t const*) desc;
  return desc8 + desc8[DESC_OFFSET_LEN];
10003132:	780c      	ldrb	r4, [r1, #0]
10003134:	190c      	adds	r4, r1, r4
}

static inline uint8_t tu_desc_type(void const* desc)
{
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
10003136:	7863      	ldrb	r3, [r4, #1]
  while ( TUSB_DESC_CS_INTERFACE == tu_desc_type(p_desc) && drv_len <= max_len )
10003138:	2b24      	cmp	r3, #36	; 0x24
1000313a:	d10b      	bne.n	10003154 <cdcd_open+0x50>
1000313c:	2a08      	cmp	r2, #8
1000313e:	d802      	bhi.n	10003146 <cdcd_open+0x42>
10003140:	e00f      	b.n	10003162 <cdcd_open+0x5e>
10003142:	42aa      	cmp	r2, r5
10003144:	d30d      	bcc.n	10003162 <cdcd_open+0x5e>
}

static inline uint8_t tu_desc_len(void const* desc)
{
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
10003146:	7823      	ldrb	r3, [r4, #0]
  return desc8 + desc8[DESC_OFFSET_LEN];
10003148:	18e4      	adds	r4, r4, r3
    drv_len += tu_desc_len(p_desc);
1000314a:	18ed      	adds	r5, r5, r3
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
1000314c:	7863      	ldrb	r3, [r4, #1]
1000314e:	b2ad      	uxth	r5, r5
  while ( TUSB_DESC_CS_INTERFACE == tu_desc_type(p_desc) && drv_len <= max_len )
10003150:	2b24      	cmp	r3, #36	; 0x24
10003152:	d0f6      	beq.n	10003142 <cdcd_open+0x3e>
  if ( TUSB_DESC_ENDPOINT == tu_desc_type(p_desc) )
10003154:	2b05      	cmp	r3, #5
10003156:	d020      	beq.n	1000319a <cdcd_open+0x96>
  if ( (TUSB_DESC_INTERFACE == tu_desc_type(p_desc)) &&
10003158:	2b04      	cmp	r3, #4
1000315a:	d102      	bne.n	10003162 <cdcd_open+0x5e>
1000315c:	7963      	ldrb	r3, [r4, #5]
1000315e:	2b0a      	cmp	r3, #10
10003160:	d02e      	beq.n	100031c0 <cdcd_open+0xbc>
  uint16_t available = tu_fifo_remaining(&p_cdc->rx_ff);
10003162:	4c21      	ldr	r4, [pc, #132]	; (100031e8 <cdcd_open+0xe4>)
10003164:	0020      	movs	r0, r4
10003166:	f000 f98b 	bl	10003480 <tu_fifo_remaining>
  TU_VERIFY(available >= sizeof(p_cdc->epout_buf), );
1000316a:	283f      	cmp	r0, #63	; 0x3f
1000316c:	d9d4      	bls.n	10003118 <cdcd_open+0x14>
  TU_VERIFY(usbd_edpt_claim(rhport, p_cdc->ep_out), );
1000316e:	0026      	movs	r6, r4
10003170:	3e10      	subs	r6, #16
10003172:	2000      	movs	r0, #0
10003174:	78f1      	ldrb	r1, [r6, #3]
10003176:	f001 f8a7 	bl	100042c8 <usbd_edpt_claim>
1000317a:	2800      	cmp	r0, #0
1000317c:	d0cc      	beq.n	10003118 <cdcd_open+0x14>
  available = tu_fifo_remaining(&p_cdc->rx_ff);
1000317e:	0020      	movs	r0, r4
10003180:	f000 f97e 	bl	10003480 <tu_fifo_remaining>
  if ( available >= sizeof(p_cdc->epout_buf) )  {
10003184:	283f      	cmp	r0, #63	; 0x3f
10003186:	d916      	bls.n	100031b6 <cdcd_open+0xb2>
    usbd_edpt_xfer(rhport, p_cdc->ep_out, p_cdc->epout_buf, sizeof(p_cdc->epout_buf));
10003188:	2390      	movs	r3, #144	; 0x90
1000318a:	009b      	lsls	r3, r3, #2
1000318c:	18e2      	adds	r2, r4, r3
1000318e:	78f1      	ldrb	r1, [r6, #3]
10003190:	2340      	movs	r3, #64	; 0x40
10003192:	2000      	movs	r0, #0
10003194:	f001 f8f0 	bl	10004378 <usbd_edpt_xfer>
10003198:	e7be      	b.n	10003118 <cdcd_open+0x14>
    TU_ASSERT( usbd_edpt_open(rhport, (tusb_desc_endpoint_t const *) p_desc), 0 );
1000319a:	0021      	movs	r1, r4
1000319c:	0030      	movs	r0, r6
1000319e:	f001 f88f 	bl	100042c0 <usbd_edpt_open>
100031a2:	2800      	cmp	r0, #0
100031a4:	d0b7      	beq.n	10003116 <cdcd_open+0x12>
    p_cdc->ep_notif = ((tusb_desc_endpoint_t const *) p_desc)->bEndpointAddress;
100031a6:	78a3      	ldrb	r3, [r4, #2]
100031a8:	707b      	strb	r3, [r7, #1]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
100031aa:	7823      	ldrb	r3, [r4, #0]
    drv_len += tu_desc_len(p_desc);
100031ac:	18ed      	adds	r5, r5, r3
  return desc8 + desc8[DESC_OFFSET_LEN];
100031ae:	18e4      	adds	r4, r4, r3
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
100031b0:	7863      	ldrb	r3, [r4, #1]
100031b2:	b2ad      	uxth	r5, r5
  return desc8 + desc8[DESC_OFFSET_LEN];
100031b4:	e7d0      	b.n	10003158 <cdcd_open+0x54>
    usbd_edpt_release(rhport, p_cdc->ep_out);
100031b6:	78f1      	ldrb	r1, [r6, #3]
100031b8:	2000      	movs	r0, #0
100031ba:	f001 f8b7 	bl	1000432c <usbd_edpt_release>
100031be:	e7ab      	b.n	10003118 <cdcd_open+0x14>
    TU_ASSERT( usbd_open_edpt_pair(rhport, p_desc, 2, TUSB_XFER_BULK, &p_cdc->ep_out, &p_cdc->ep_in), 0 );
100031c0:	4b0a      	ldr	r3, [pc, #40]	; (100031ec <cdcd_open+0xe8>)
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
100031c2:	7827      	ldrb	r7, [r4, #0]
100031c4:	9301      	str	r3, [sp, #4]
100031c6:	3301      	adds	r3, #1
100031c8:	9300      	str	r3, [sp, #0]
100031ca:	2202      	movs	r2, #2
100031cc:	2302      	movs	r3, #2
100031ce:	0030      	movs	r0, r6
  return desc8 + desc8[DESC_OFFSET_LEN];
100031d0:	19e1      	adds	r1, r4, r7
100031d2:	f001 f841 	bl	10004258 <usbd_open_edpt_pair>
100031d6:	2800      	cmp	r0, #0
100031d8:	d09d      	beq.n	10003116 <cdcd_open+0x12>
    drv_len += 2*sizeof(tusb_desc_endpoint_t);
100031da:	350e      	adds	r5, #14
100031dc:	19ed      	adds	r5, r5, r7
100031de:	b2ad      	uxth	r5, r5
100031e0:	e7bf      	b.n	10003162 <cdcd_open+0x5e>
100031e2:	46c0      	nop			; (mov r8, r8)
100031e4:	20011afc 	.word	0x20011afc
100031e8:	20011b0c 	.word	0x20011b0c
100031ec:	20011afe 	.word	0x20011afe

100031f0 <cdcd_control_complete>:
bool cdcd_control_complete(uint8_t rhport, tusb_control_request_t const * request)
{
  (void) rhport;

  //------------- Class Specific Request -------------//
  TU_VERIFY (request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS);
100031f0:	2360      	movs	r3, #96	; 0x60
100031f2:	780a      	ldrb	r2, [r1, #0]
{
100031f4:	b570      	push	{r4, r5, r6, lr}
  TU_VERIFY (request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS);
100031f6:	4013      	ands	r3, r2
100031f8:	2400      	movs	r4, #0
100031fa:	2b20      	cmp	r3, #32
100031fc:	d10b      	bne.n	10003216 <cdcd_control_complete+0x26>
  // Identify which interface to use
  for ( ; ; itf++, p_cdc++)
  {
    if (itf >= TU_ARRAY_SIZE(_cdcd_itf)) return false;

    if ( p_cdc->itf_num == request->wIndex ) break;
100031fe:	4a0b      	ldr	r2, [pc, #44]	; (1000322c <cdcd_control_complete+0x3c>)
10003200:	794b      	ldrb	r3, [r1, #5]
10003202:	790d      	ldrb	r5, [r1, #4]
10003204:	7810      	ldrb	r0, [r2, #0]
10003206:	021b      	lsls	r3, r3, #8
10003208:	432b      	orrs	r3, r5
1000320a:	4298      	cmp	r0, r3
1000320c:	d103      	bne.n	10003216 <cdcd_control_complete+0x26>
  }

  // Invoke callback
  if ( CDC_REQUEST_SET_LINE_CODING == request->bRequest )
1000320e:	784b      	ldrb	r3, [r1, #1]
  {
    if ( tud_cdc_line_coding_cb ) tud_cdc_line_coding_cb(itf, &p_cdc->line_coding);
  }

  return true;
10003210:	3401      	adds	r4, #1
  if ( CDC_REQUEST_SET_LINE_CODING == request->bRequest )
10003212:	2b20      	cmp	r3, #32
10003214:	d001      	beq.n	1000321a <cdcd_control_complete+0x2a>
}
10003216:	0020      	movs	r0, r4
10003218:	bd70      	pop	{r4, r5, r6, pc}
    if ( tud_cdc_line_coding_cb ) tud_cdc_line_coding_cb(itf, &p_cdc->line_coding);
1000321a:	4b05      	ldr	r3, [pc, #20]	; (10003230 <cdcd_control_complete+0x40>)
1000321c:	2b00      	cmp	r3, #0
1000321e:	d0fa      	beq.n	10003216 <cdcd_control_complete+0x26>
10003220:	2000      	movs	r0, #0
10003222:	1d91      	adds	r1, r2, #6
10003224:	e000      	b.n	10003228 <cdcd_control_complete+0x38>
10003226:	bf00      	nop
10003228:	e7f5      	b.n	10003216 <cdcd_control_complete+0x26>
1000322a:	46c0      	nop			; (mov r8, r8)
1000322c:	20011afc 	.word	0x20011afc
10003230:	00000000 	.word	0x00000000

10003234 <cdcd_control_request>:
// Handle class control request
// return false to stall control endpoint (e.g unsupported request)
bool cdcd_control_request(uint8_t rhport, tusb_control_request_t const * request)
{
  // Handle class request only
  TU_VERIFY(request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS);
10003234:	2360      	movs	r3, #96	; 0x60
10003236:	780a      	ldrb	r2, [r1, #0]
{
10003238:	b570      	push	{r4, r5, r6, lr}
  TU_VERIFY(request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS);
1000323a:	4013      	ands	r3, r2
1000323c:	2400      	movs	r4, #0
1000323e:	2b20      	cmp	r3, #32
10003240:	d111      	bne.n	10003266 <cdcd_control_request+0x32>
  // Identify which interface to use
  for ( ; ; itf++, p_cdc++)
  {
    if (itf >= TU_ARRAY_SIZE(_cdcd_itf)) return false;

    if ( p_cdc->itf_num == request->wIndex ) break;
10003242:	4a14      	ldr	r2, [pc, #80]	; (10003294 <cdcd_control_request+0x60>)
10003244:	794b      	ldrb	r3, [r1, #5]
10003246:	790e      	ldrb	r6, [r1, #4]
10003248:	7815      	ldrb	r5, [r2, #0]
1000324a:	021b      	lsls	r3, r3, #8
1000324c:	4333      	orrs	r3, r6
1000324e:	429d      	cmp	r5, r3
10003250:	d109      	bne.n	10003266 <cdcd_control_request+0x32>
  }

  switch ( request->bRequest )
10003252:	784b      	ldrb	r3, [r1, #1]
10003254:	2b21      	cmp	r3, #33	; 0x21
10003256:	d808      	bhi.n	1000326a <cdcd_control_request+0x36>
10003258:	2b1f      	cmp	r3, #31
1000325a:	d904      	bls.n	10003266 <cdcd_control_request+0x32>
  {
    case CDC_REQUEST_SET_LINE_CODING:
      TU_LOG2("  Set Line Coding\r\n");
      tud_control_xfer(rhport, request, &p_cdc->line_coding, sizeof(cdc_line_coding_t));
1000325c:	2307      	movs	r3, #7
1000325e:	3206      	adds	r2, #6
10003260:	f001 f8c6 	bl	100043f0 <tud_control_xfer>
    break;

    default: return false; // stall unsupported request
  }

  return true;
10003264:	2401      	movs	r4, #1
}
10003266:	0020      	movs	r0, r4
10003268:	bd70      	pop	{r4, r5, r6, pc}
  switch ( request->bRequest )
1000326a:	2b22      	cmp	r3, #34	; 0x22
1000326c:	d1fb      	bne.n	10003266 <cdcd_control_request+0x32>
      bool const dtr = tu_bit_test(request->wValue, 0);
1000326e:	78cd      	ldrb	r5, [r1, #3]
10003270:	788b      	ldrb	r3, [r1, #2]
10003272:	022d      	lsls	r5, r5, #8
10003274:	431d      	orrs	r5, r3
      p_cdc->line_state = (uint8_t) request->wValue;
10003276:	7115      	strb	r5, [r2, #4]
      tud_control_status(rhport, request);
10003278:	f001 f8a2 	bl	100043c0 <tud_control_status>
      if ( tud_cdc_line_state_cb ) tud_cdc_line_state_cb(itf, dtr, rts);
1000327c:	4b06      	ldr	r3, [pc, #24]	; (10003298 <cdcd_control_request+0x64>)
  return true;
1000327e:	2401      	movs	r4, #1
      if ( tud_cdc_line_state_cb ) tud_cdc_line_state_cb(itf, dtr, rts);
10003280:	2b00      	cmp	r3, #0
10003282:	d0f0      	beq.n	10003266 <cdcd_control_request+0x32>
10003284:	0029      	movs	r1, r5
}

// Bit
static inline uint32_t tu_bit_set  (uint32_t value, uint8_t pos) { return value | TU_BIT(pos);                  }
static inline uint32_t tu_bit_clear(uint32_t value, uint8_t pos) { return value & (~TU_BIT(pos));               }
static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
10003286:	086a      	lsrs	r2, r5, #1
10003288:	2000      	movs	r0, #0
1000328a:	4022      	ands	r2, r4
1000328c:	4021      	ands	r1, r4
1000328e:	e000      	b.n	10003292 <cdcd_control_request+0x5e>
10003290:	bf00      	nop
10003292:	e7e8      	b.n	10003266 <cdcd_control_request+0x32>
10003294:	20011afc 	.word	0x20011afc
10003298:	00000000 	.word	0x00000000

1000329c <cdcd_xfer_cb>:

bool cdcd_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes)
{
1000329c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000329e:	4646      	mov	r6, r8
100032a0:	464f      	mov	r7, r9
100032a2:	46d6      	mov	lr, sl
100032a4:	b5c0      	push	{r6, r7, lr}

  // Identify which interface to use
  for (itf = 0; itf < CFG_TUD_CDC; itf++)
  {
    p_cdc = &_cdcd_itf[itf];
    if ( ( ep_addr == p_cdc->ep_out ) || ( ep_addr == p_cdc->ep_in ) ) break;
100032a6:	4e4d      	ldr	r6, [pc, #308]	; (100033dc <cdcd_xfer_cb+0x140>)
{
100032a8:	4699      	mov	r9, r3
    if ( ( ep_addr == p_cdc->ep_out ) || ( ep_addr == p_cdc->ep_in ) ) break;
100032aa:	78f3      	ldrb	r3, [r6, #3]
{
100032ac:	4680      	mov	r8, r0
100032ae:	000d      	movs	r5, r1
    if ( ( ep_addr == p_cdc->ep_out ) || ( ep_addr == p_cdc->ep_in ) ) break;
100032b0:	428b      	cmp	r3, r1
100032b2:	d157      	bne.n	10003364 <cdcd_xfer_cb+0xc8>

  // Received new data
  if ( ep_addr == p_cdc->ep_out )
  {
    // TODO search for wanted char first for better performance
    for(uint32_t i=0; i<xferred_bytes; i++)
100032b4:	464b      	mov	r3, r9
100032b6:	2b00      	cmp	r3, #0
100032b8:	d100      	bne.n	100032bc <cdcd_xfer_cb+0x20>
100032ba:	e088      	b.n	100033ce <cdcd_xfer_cb+0x132>
100032bc:	4b48      	ldr	r3, [pc, #288]	; (100033e0 <cdcd_xfer_cb+0x144>)
100032be:	2b00      	cmp	r3, #0
100032c0:	d100      	bne.n	100032c4 <cdcd_xfer_cb+0x28>
100032c2:	e075      	b.n	100033b0 <cdcd_xfer_cb+0x114>
100032c4:	2394      	movs	r3, #148	; 0x94
100032c6:	009b      	lsls	r3, r3, #2
100032c8:	18f4      	adds	r4, r6, r3
100032ca:	46a2      	mov	sl, r4
100032cc:	0037      	movs	r7, r6
100032ce:	44ca      	add	sl, r9
100032d0:	3710      	adds	r7, #16
    {
      tu_fifo_write(&p_cdc->rx_ff, &p_cdc->epout_buf[i]);
100032d2:	0021      	movs	r1, r4
100032d4:	0038      	movs	r0, r7
100032d6:	f000 f9b3 	bl	10003640 <tu_fifo_write>

      // Check for wanted char and invoke callback if needed
      if ( tud_cdc_rx_wanted_cb && ( ((signed char) p_cdc->wanted_char) != -1 ) && ( p_cdc->wanted_char == p_cdc->epout_buf[i] ) )
100032da:	7973      	ldrb	r3, [r6, #5]
100032dc:	2bff      	cmp	r3, #255	; 0xff
100032de:	d002      	beq.n	100032e6 <cdcd_xfer_cb+0x4a>
100032e0:	7821      	ldrb	r1, [r4, #0]
100032e2:	4299      	cmp	r1, r3
100032e4:	d043      	beq.n	1000336e <cdcd_xfer_cb+0xd2>
    for(uint32_t i=0; i<xferred_bytes; i++)
100032e6:	3401      	adds	r4, #1
100032e8:	4554      	cmp	r4, sl
100032ea:	d1f2      	bne.n	100032d2 <cdcd_xfer_cb+0x36>
        tud_cdc_rx_wanted_cb(itf, p_cdc->wanted_char);
      }
    }

    // invoke receive callback (if there is still data)
    if (tud_cdc_rx_cb && tu_fifo_count(&p_cdc->rx_ff) ) tud_cdc_rx_cb(itf);
100032ec:	4b3d      	ldr	r3, [pc, #244]	; (100033e4 <cdcd_xfer_cb+0x148>)
100032ee:	2b00      	cmp	r3, #0
100032f0:	d004      	beq.n	100032fc <cdcd_xfer_cb+0x60>
100032f2:	0038      	movs	r0, r7
100032f4:	f000 f8b8 	bl	10003468 <tu_fifo_count>
100032f8:	2800      	cmp	r0, #0
100032fa:	d16b      	bne.n	100033d4 <cdcd_xfer_cb+0x138>
  uint16_t available = tu_fifo_remaining(&p_cdc->rx_ff);
100032fc:	0038      	movs	r0, r7
100032fe:	f000 f8bf 	bl	10003480 <tu_fifo_remaining>
  TU_VERIFY(available >= sizeof(p_cdc->epout_buf), );
10003302:	283f      	cmp	r0, #63	; 0x3f
10003304:	d837      	bhi.n	10003376 <cdcd_xfer_cb+0xda>
  }

  // Data sent to host, we continue to fetch from tx fifo to send.
  // Note: This will cause incorrect baudrate set in line coding.
  //       Though maybe the baudrate is not really important !!!
  if ( ep_addr == p_cdc->ep_in )
10003306:	3f10      	subs	r7, #16
10003308:	78bb      	ldrb	r3, [r7, #2]
1000330a:	429d      	cmp	r5, r3
1000330c:	d006      	beq.n	1000331c <cdcd_xfer_cb+0x80>
    }
  }

  // nothing to do with notif endpoint for now

  return true;
1000330e:	2401      	movs	r4, #1
}
10003310:	0020      	movs	r0, r4
10003312:	bce0      	pop	{r5, r6, r7}
10003314:	46ba      	mov	sl, r7
10003316:	46b1      	mov	r9, r6
10003318:	46a8      	mov	r8, r5
1000331a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ( tud_cdc_tx_complete_cb ) tud_cdc_tx_complete_cb(itf);
1000331c:	4b32      	ldr	r3, [pc, #200]	; (100033e8 <cdcd_xfer_cb+0x14c>)
1000331e:	2b00      	cmp	r3, #0
10003320:	d002      	beq.n	10003328 <cdcd_xfer_cb+0x8c>
10003322:	2000      	movs	r0, #0
10003324:	e000      	b.n	10003328 <cdcd_xfer_cb+0x8c>
10003326:	bf00      	nop
    if ( 0 == tud_cdc_n_write_flush(itf) )
10003328:	2000      	movs	r0, #0
1000332a:	f7ff fe21 	bl	10002f70 <tud_cdc_n_write_flush>
1000332e:	2800      	cmp	r0, #0
10003330:	d1ed      	bne.n	1000330e <cdcd_xfer_cb+0x72>
      if ( !tu_fifo_count(&p_cdc->tx_ff) && xferred_bytes && (0 == (xferred_bytes & (BULK_PACKET_SIZE-1))) )
10003332:	4d2e      	ldr	r5, [pc, #184]	; (100033ec <cdcd_xfer_cb+0x150>)
10003334:	0028      	movs	r0, r5
10003336:	f000 f897 	bl	10003468 <tu_fifo_count>
1000333a:	2800      	cmp	r0, #0
1000333c:	d1e7      	bne.n	1000330e <cdcd_xfer_cb+0x72>
1000333e:	464b      	mov	r3, r9
10003340:	2b00      	cmp	r3, #0
10003342:	d0e4      	beq.n	1000330e <cdcd_xfer_cb+0x72>
10003344:	069b      	lsls	r3, r3, #26
10003346:	d1e2      	bne.n	1000330e <cdcd_xfer_cb+0x72>
        if ( usbd_edpt_claim(rhport, p_cdc->ep_in) )
10003348:	3d28      	subs	r5, #40	; 0x28
1000334a:	4640      	mov	r0, r8
1000334c:	78a9      	ldrb	r1, [r5, #2]
1000334e:	f000 ffbb 	bl	100042c8 <usbd_edpt_claim>
10003352:	1e04      	subs	r4, r0, #0
10003354:	d0db      	beq.n	1000330e <cdcd_xfer_cb+0x72>
          usbd_edpt_xfer(rhport, p_cdc->ep_in, NULL, 0);
10003356:	2300      	movs	r3, #0
10003358:	2200      	movs	r2, #0
1000335a:	4640      	mov	r0, r8
1000335c:	78a9      	ldrb	r1, [r5, #2]
1000335e:	f001 f80b 	bl	10004378 <usbd_edpt_xfer>
10003362:	e7d5      	b.n	10003310 <cdcd_xfer_cb+0x74>
    if ( ( ep_addr == p_cdc->ep_out ) || ( ep_addr == p_cdc->ep_in ) ) break;
10003364:	78b3      	ldrb	r3, [r6, #2]
10003366:	428b      	cmp	r3, r1
10003368:	d0d8      	beq.n	1000331c <cdcd_xfer_cb+0x80>
  TU_ASSERT(itf < CFG_TUD_CDC);
1000336a:	2400      	movs	r4, #0
1000336c:	e7d0      	b.n	10003310 <cdcd_xfer_cb+0x74>
        tud_cdc_rx_wanted_cb(itf, p_cdc->wanted_char);
1000336e:	2000      	movs	r0, #0
10003370:	e000      	b.n	10003374 <cdcd_xfer_cb+0xd8>
10003372:	bf00      	nop
10003374:	e7b7      	b.n	100032e6 <cdcd_xfer_cb+0x4a>
  TU_VERIFY(usbd_edpt_claim(rhport, p_cdc->ep_out), );
10003376:	003c      	movs	r4, r7
10003378:	3c10      	subs	r4, #16
1000337a:	2000      	movs	r0, #0
1000337c:	78e1      	ldrb	r1, [r4, #3]
1000337e:	f000 ffa3 	bl	100042c8 <usbd_edpt_claim>
10003382:	2800      	cmp	r0, #0
10003384:	d012      	beq.n	100033ac <cdcd_xfer_cb+0x110>
  available = tu_fifo_remaining(&p_cdc->rx_ff);
10003386:	0038      	movs	r0, r7
10003388:	f000 f87a 	bl	10003480 <tu_fifo_remaining>
  if ( available >= sizeof(p_cdc->epout_buf) )  {
1000338c:	283f      	cmp	r0, #63	; 0x3f
1000338e:	d909      	bls.n	100033a4 <cdcd_xfer_cb+0x108>
    usbd_edpt_xfer(rhport, p_cdc->ep_out, p_cdc->epout_buf, sizeof(p_cdc->epout_buf));
10003390:	2390      	movs	r3, #144	; 0x90
10003392:	009b      	lsls	r3, r3, #2
10003394:	18fa      	adds	r2, r7, r3
10003396:	2000      	movs	r0, #0
10003398:	2340      	movs	r3, #64	; 0x40
1000339a:	78e1      	ldrb	r1, [r4, #3]
1000339c:	f000 ffec 	bl	10004378 <usbd_edpt_xfer>
  if ( ep_addr == p_cdc->ep_in )
100033a0:	78a3      	ldrb	r3, [r4, #2]
100033a2:	e7b2      	b.n	1000330a <cdcd_xfer_cb+0x6e>
    usbd_edpt_release(rhport, p_cdc->ep_out);
100033a4:	2000      	movs	r0, #0
100033a6:	78e1      	ldrb	r1, [r4, #3]
100033a8:	f000 ffc0 	bl	1000432c <usbd_edpt_release>
  if ( ep_addr == p_cdc->ep_in )
100033ac:	78a3      	ldrb	r3, [r4, #2]
100033ae:	e7ac      	b.n	1000330a <cdcd_xfer_cb+0x6e>
100033b0:	2394      	movs	r3, #148	; 0x94
100033b2:	009b      	lsls	r3, r3, #2
100033b4:	18f4      	adds	r4, r6, r3
100033b6:	46a2      	mov	sl, r4
100033b8:	3610      	adds	r6, #16
100033ba:	0037      	movs	r7, r6
100033bc:	44ca      	add	sl, r9
      tu_fifo_write(&p_cdc->rx_ff, &p_cdc->epout_buf[i]);
100033be:	0021      	movs	r1, r4
100033c0:	0038      	movs	r0, r7
    for(uint32_t i=0; i<xferred_bytes; i++)
100033c2:	3401      	adds	r4, #1
      tu_fifo_write(&p_cdc->rx_ff, &p_cdc->epout_buf[i]);
100033c4:	f000 f93c 	bl	10003640 <tu_fifo_write>
    for(uint32_t i=0; i<xferred_bytes; i++)
100033c8:	4554      	cmp	r4, sl
100033ca:	d1f8      	bne.n	100033be <cdcd_xfer_cb+0x122>
100033cc:	e78e      	b.n	100032ec <cdcd_xfer_cb+0x50>
100033ce:	3610      	adds	r6, #16
100033d0:	0037      	movs	r7, r6
100033d2:	e78b      	b.n	100032ec <cdcd_xfer_cb+0x50>
    if (tud_cdc_rx_cb && tu_fifo_count(&p_cdc->rx_ff) ) tud_cdc_rx_cb(itf);
100033d4:	2000      	movs	r0, #0
100033d6:	e000      	b.n	100033da <cdcd_xfer_cb+0x13e>
100033d8:	bf00      	nop
100033da:	e78f      	b.n	100032fc <cdcd_xfer_cb+0x60>
100033dc:	20011afc 	.word	0x20011afc
	...
100033ec:	20011b24 	.word	0x20011b24

100033f0 <tu_fifo_config>:
#define tu_fifo_unlock(_ff)

#endif

bool tu_fifo_config(tu_fifo_t *f, void* buffer, uint16_t depth, uint16_t item_size, bool overwritable)
{
100033f0:	b5f0      	push	{r4, r5, r6, r7, lr}
100033f2:	46c6      	mov	lr, r8
100033f4:	b500      	push	{lr}
100033f6:	0014      	movs	r4, r2
100033f8:	aa06      	add	r2, sp, #24
100033fa:	001e      	movs	r6, r3
100033fc:	7813      	ldrb	r3, [r2, #0]
  if (depth > 0x8000) return false;               // Maximum depth is 2^15 items
100033fe:	2280      	movs	r2, #128	; 0x80
{
10003400:	0005      	movs	r5, r0
10003402:	000f      	movs	r7, r1
10003404:	4698      	mov	r8, r3
  if (depth > 0x8000) return false;               // Maximum depth is 2^15 items
10003406:	0212      	lsls	r2, r2, #8
10003408:	4294      	cmp	r4, r2
1000340a:	d82b      	bhi.n	10003464 <tu_fifo_config+0x74>
  if (f->mutex)
1000340c:	6940      	ldr	r0, [r0, #20]
1000340e:	2800      	cmp	r0, #0
10003410:	d01a      	beq.n	10003448 <tu_fifo_config+0x58>
    return mdef;
}

static inline bool osal_mutex_lock (osal_mutex_t mutex_hdl, uint32_t msec)
{
    return mutex_enter_timeout_ms(mutex_hdl, msec);
10003412:	2101      	movs	r1, #1
10003414:	4249      	negs	r1, r1
10003416:	f00a ff67 	bl	1000e2e8 <__mutex_enter_timeout_ms_veneer>
  tu_fifo_lock(f);

  f->buffer = (uint8_t*) buffer;
  f->depth  = depth;
  f->item_size = item_size;
  f->overwritable = overwritable;
1000341a:	4643      	mov	r3, r8
  f->depth  = depth;
1000341c:	80ac      	strh	r4, [r5, #4]

  f->max_pointer_idx = 2*depth - 1;               // Limit index space to 2*depth - this allows for a fast "modulo" calculation but limits the maximum depth to 2^16/2 = 2^15 and buffer overflows are detectable only if overflow happens once (important for unsupervised DMA applications)
1000341e:	0064      	lsls	r4, r4, #1
10003420:	b2a4      	uxth	r4, r4
  f->overwritable = overwritable;
10003422:	722b      	strb	r3, [r5, #8]
  f->max_pointer_idx = 2*depth - 1;               // Limit index space to 2*depth - this allows for a fast "modulo" calculation but limits the maximum depth to 2^16/2 = 2^15 and buffer overflows are detectable only if overflow happens once (important for unsupervised DMA applications)
10003424:	1e63      	subs	r3, r4, #1
10003426:	81ab      	strh	r3, [r5, #12]
  f->non_used_index_space = 0xFFFF - f->max_pointer_idx;

  f->rd_idx = f->wr_idx = 0;
10003428:	2300      	movs	r3, #0
  if (f->mutex)
1000342a:	6968      	ldr	r0, [r5, #20]
  f->non_used_index_space = 0xFFFF - f->max_pointer_idx;
1000342c:	4264      	negs	r4, r4
  f->rd_idx = f->wr_idx = 0;
1000342e:	81eb      	strh	r3, [r5, #14]
  f->buffer = (uint8_t*) buffer;
10003430:	602f      	str	r7, [r5, #0]
  f->item_size = item_size;
10003432:	80ee      	strh	r6, [r5, #6]
  f->non_used_index_space = 0xFFFF - f->max_pointer_idx;
10003434:	816c      	strh	r4, [r5, #10]
  f->rd_idx = f->wr_idx = 0;
10003436:	822b      	strh	r3, [r5, #16]
  if (f->mutex)
10003438:	2800      	cmp	r0, #0
1000343a:	d011      	beq.n	10003460 <tu_fifo_config+0x70>
}

static inline bool osal_mutex_unlock(osal_mutex_t mutex_hdl)
{
    mutex_exit(mutex_hdl);
1000343c:	f00a ff34 	bl	1000e2a8 <__mutex_exit_veneer>

  tu_fifo_unlock(f);

  return true;
10003440:	2001      	movs	r0, #1
}
10003442:	bc80      	pop	{r7}
10003444:	46b8      	mov	r8, r7
10003446:	bdf0      	pop	{r4, r5, r6, r7, pc}
  f->depth  = depth;
10003448:	80ac      	strh	r4, [r5, #4]
  f->max_pointer_idx = 2*depth - 1;               // Limit index space to 2*depth - this allows for a fast "modulo" calculation but limits the maximum depth to 2^16/2 = 2^15 and buffer overflows are detectable only if overflow happens once (important for unsupervised DMA applications)
1000344a:	0064      	lsls	r4, r4, #1
1000344c:	b2a4      	uxth	r4, r4
  f->overwritable = overwritable;
1000344e:	722b      	strb	r3, [r5, #8]
  f->max_pointer_idx = 2*depth - 1;               // Limit index space to 2*depth - this allows for a fast "modulo" calculation but limits the maximum depth to 2^16/2 = 2^15 and buffer overflows are detectable only if overflow happens once (important for unsupervised DMA applications)
10003450:	1e63      	subs	r3, r4, #1
  f->non_used_index_space = 0xFFFF - f->max_pointer_idx;
10003452:	4264      	negs	r4, r4
  f->rd_idx = f->wr_idx = 0;
10003454:	81e8      	strh	r0, [r5, #14]
  f->buffer = (uint8_t*) buffer;
10003456:	6029      	str	r1, [r5, #0]
  f->item_size = item_size;
10003458:	80ee      	strh	r6, [r5, #6]
  f->max_pointer_idx = 2*depth - 1;               // Limit index space to 2*depth - this allows for a fast "modulo" calculation but limits the maximum depth to 2^16/2 = 2^15 and buffer overflows are detectable only if overflow happens once (important for unsupervised DMA applications)
1000345a:	81ab      	strh	r3, [r5, #12]
  f->non_used_index_space = 0xFFFF - f->max_pointer_idx;
1000345c:	816c      	strh	r4, [r5, #10]
  f->rd_idx = f->wr_idx = 0;
1000345e:	8228      	strh	r0, [r5, #16]
  return true;
10003460:	2001      	movs	r0, #1
10003462:	e7ee      	b.n	10003442 <tu_fifo_config+0x52>
  if (depth > 0x8000) return false;               // Maximum depth is 2^15 items
10003464:	2000      	movs	r0, #0
10003466:	e7ec      	b.n	10003442 <tu_fifo_config+0x52>

10003468 <tu_fifo_count>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_count(tu_fifo_t* f)
{
10003468:	b510      	push	{r4, lr}
  return _tu_fifo_count(f, f->wr_idx, f->rd_idx);
1000346a:	89c4      	ldrh	r4, [r0, #14]
1000346c:	8a01      	ldrh	r1, [r0, #16]
{
1000346e:	0002      	movs	r2, r0
  uint16_t cnt = wAbs-rAbs;
10003470:	1a60      	subs	r0, r4, r1
10003472:	b280      	uxth	r0, r0
  if (rAbs > wAbs) cnt -= f->non_used_index_space;
10003474:	428c      	cmp	r4, r1
10003476:	d202      	bcs.n	1000347e <tu_fifo_count+0x16>
10003478:	8953      	ldrh	r3, [r2, #10]
1000347a:	1ac0      	subs	r0, r0, r3
1000347c:	b280      	uxth	r0, r0
}
1000347e:	bd10      	pop	{r4, pc}

10003480 <tu_fifo_remaining>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_remaining(tu_fifo_t* f)
{
10003480:	b510      	push	{r4, lr}
  return _tu_fifo_remaining(f, f->wr_idx, f->rd_idx);
10003482:	89c4      	ldrh	r4, [r0, #14]
10003484:	8a01      	ldrh	r1, [r0, #16]
  return f->depth - _tu_fifo_count(f, wAbs, rAbs);
10003486:	8883      	ldrh	r3, [r0, #4]
  uint16_t cnt = wAbs-rAbs;
10003488:	1a62      	subs	r2, r4, r1
1000348a:	b292      	uxth	r2, r2
  if (rAbs > wAbs) cnt -= f->non_used_index_space;
1000348c:	428c      	cmp	r4, r1
1000348e:	d202      	bcs.n	10003496 <tu_fifo_remaining+0x16>
10003490:	8940      	ldrh	r0, [r0, #10]
10003492:	1a12      	subs	r2, r2, r0
10003494:	b292      	uxth	r2, r2
  return f->depth - _tu_fifo_count(f, wAbs, rAbs);
10003496:	1a98      	subs	r0, r3, r2
  return _tu_fifo_remaining(f, f->wr_idx, f->rd_idx);
10003498:	b280      	uxth	r0, r0
}
1000349a:	bd10      	pop	{r4, pc}

1000349c <tu_fifo_read>:

    @returns TRUE if the queue is not empty
 */
/******************************************************************************/
bool tu_fifo_read(tu_fifo_t* f, void * buffer)
{
1000349c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000349e:	0004      	movs	r4, r0
  if (f->mutex)
100034a0:	6940      	ldr	r0, [r0, #20]
{
100034a2:	000e      	movs	r6, r1
  if (f->mutex)
100034a4:	2800      	cmp	r0, #0
100034a6:	d003      	beq.n	100034b0 <tu_fifo_read+0x14>
    return mutex_enter_timeout_ms(mutex_hdl, msec);
100034a8:	2101      	movs	r1, #1
100034aa:	4249      	negs	r1, r1
100034ac:	f00a ff1c 	bl	1000e2e8 <__mutex_enter_timeout_ms_veneer>
  tu_fifo_lock(f);                                          // TODO: Here we may distinguish for read and write pointer mutexes!

  // Peek the data
  bool ret = _tu_fifo_peek_at(f, 0, buffer, f->wr_idx, f->rd_idx);    // f->rd_idx might get modified in case of an overflow so we can not use a local variable
100034b0:	89e1      	ldrh	r1, [r4, #14]
100034b2:	8a22      	ldrh	r2, [r4, #16]
100034b4:	b28f      	uxth	r7, r1
  uint16_t cnt = wAbs-rAbs;
100034b6:	1a8d      	subs	r5, r1, r2
  bool ret = _tu_fifo_peek_at(f, 0, buffer, f->wr_idx, f->rd_idx);    // f->rd_idx might get modified in case of an overflow so we can not use a local variable
100034b8:	b293      	uxth	r3, r2
  uint16_t cnt = wAbs-rAbs;
100034ba:	b2ad      	uxth	r5, r5
  if (rAbs > wAbs) cnt -= f->non_used_index_space;
100034bc:	4291      	cmp	r1, r2
100034be:	d202      	bcs.n	100034c6 <tu_fifo_read+0x2a>
100034c0:	8962      	ldrh	r2, [r4, #10]
100034c2:	1aad      	subs	r5, r5, r2
100034c4:	b2ad      	uxth	r5, r5
  if (cnt > f->depth)
100034c6:	88a2      	ldrh	r2, [r4, #4]
  if ((p < p - offset) || (p - offset > f->max_pointer_idx))
100034c8:	89a1      	ldrh	r1, [r4, #12]
  if (cnt > f->depth)
100034ca:	42aa      	cmp	r2, r5
100034cc:	d205      	bcs.n	100034da <tu_fifo_read+0x3e>
  if ((p < p - offset) || (p - offset > f->max_pointer_idx))
100034ce:	1ab8      	subs	r0, r7, r2
100034d0:	4288      	cmp	r0, r1
100034d2:	dc2b      	bgt.n	1000352c <tu_fifo_read+0x90>
    p -= offset;
100034d4:	b280      	uxth	r0, r0
  f->rd_idx = backward_pointer(f, wAbs, f->depth);
100034d6:	0015      	movs	r5, r2
100034d8:	8220      	strh	r0, [r4, #16]
  if (cnt == 0 || offset >= cnt) return false;
100034da:	2d00      	cmp	r5, #0
100034dc:	d02e      	beq.n	1000353c <tu_fifo_read+0xa0>
  if ((p > p + offset) || (p + offset > f->max_pointer_idx))
100034de:	428b      	cmp	r3, r1
100034e0:	d906      	bls.n	100034f0 <tu_fifo_read+0x54>
    p = (p + offset) + f->non_used_index_space;
100034e2:	8961      	ldrh	r1, [r4, #10]
100034e4:	185b      	adds	r3, r3, r1
100034e6:	b29b      	uxth	r3, r3
  while ( idx >= depth) idx -= depth;
100034e8:	429a      	cmp	r2, r3
100034ea:	d803      	bhi.n	100034f4 <tu_fifo_read+0x58>
100034ec:	1a9b      	subs	r3, r3, r2
100034ee:	b29b      	uxth	r3, r3
100034f0:	429a      	cmp	r2, r3
100034f2:	d9fb      	bls.n	100034ec <tu_fifo_read+0x50>
  memcpy(p_buffer, f->buffer + (rRel * f->item_size), f->item_size);
100034f4:	88e2      	ldrh	r2, [r4, #6]
100034f6:	6821      	ldr	r1, [r4, #0]
100034f8:	4353      	muls	r3, r2
100034fa:	0030      	movs	r0, r6
100034fc:	18c9      	adds	r1, r1, r3
100034fe:	f7fd fa4b 	bl	10000998 <__wrap___aeabi_memcpy>
  return true;
10003502:	2501      	movs	r5, #1
10003504:	2001      	movs	r0, #1
10003506:	2601      	movs	r6, #1
  if ((p > p + offset) || (p + offset > f->max_pointer_idx))
10003508:	89a1      	ldrh	r1, [r4, #12]

  // Advance pointer
  f->rd_idx = advance_pointer(f, f->rd_idx, ret);
1000350a:	8a22      	ldrh	r2, [r4, #16]
1000350c:	b293      	uxth	r3, r2
  if ((p > p + offset) || (p + offset > f->max_pointer_idx))
1000350e:	1812      	adds	r2, r2, r0
10003510:	428a      	cmp	r2, r1
10003512:	dd10      	ble.n	10003536 <tu_fifo_read+0x9a>
    p = (p + offset) + f->non_used_index_space;
10003514:	8962      	ldrh	r2, [r4, #10]
10003516:	189b      	adds	r3, r3, r2
10003518:	18ed      	adds	r5, r5, r3
1000351a:	b2ad      	uxth	r5, r5
  if (f->mutex)
1000351c:	6960      	ldr	r0, [r4, #20]
  f->rd_idx = advance_pointer(f, f->rd_idx, ret);
1000351e:	8225      	strh	r5, [r4, #16]
  if (f->mutex)
10003520:	2800      	cmp	r0, #0
10003522:	d001      	beq.n	10003528 <tu_fifo_read+0x8c>
    mutex_exit(mutex_hdl);
10003524:	f00a fec0 	bl	1000e2a8 <__mutex_exit_veneer>

  tu_fifo_unlock(f);
  return ret;
}
10003528:	0030      	movs	r0, r6
1000352a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    p = (p - offset) - f->non_used_index_space;
1000352c:	8960      	ldrh	r0, [r4, #10]
1000352e:	1810      	adds	r0, r2, r0
10003530:	1a38      	subs	r0, r7, r0
10003532:	b280      	uxth	r0, r0
10003534:	e7cf      	b.n	100034d6 <tu_fifo_read+0x3a>
    p += offset;
10003536:	195d      	adds	r5, r3, r5
10003538:	b2ad      	uxth	r5, r5
1000353a:	e7ef      	b.n	1000351c <tu_fifo_read+0x80>
1000353c:	2000      	movs	r0, #0
  if (cnt == 0 || offset >= cnt) return false;
1000353e:	2600      	movs	r6, #0
10003540:	e7e3      	b.n	1000350a <tu_fifo_read+0x6e>
10003542:	46c0      	nop			; (mov r8, r8)

10003544 <tu_fifo_read_n>:

    @returns number of items read from the FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_read_n(tu_fifo_t* f, void * buffer, uint16_t count)
{
10003544:	b5f0      	push	{r4, r5, r6, r7, lr}
10003546:	46c6      	mov	lr, r8
10003548:	0004      	movs	r4, r0
  if (f->mutex)
1000354a:	6940      	ldr	r0, [r0, #20]
{
1000354c:	4688      	mov	r8, r1
1000354e:	0017      	movs	r7, r2
10003550:	b500      	push	{lr}
  if (f->mutex)
10003552:	2800      	cmp	r0, #0
10003554:	d003      	beq.n	1000355e <tu_fifo_read_n+0x1a>
    return mutex_enter_timeout_ms(mutex_hdl, msec);
10003556:	2101      	movs	r1, #1
10003558:	4249      	negs	r1, r1
1000355a:	f00a fec5 	bl	1000e2e8 <__mutex_enter_timeout_ms_veneer>
  tu_fifo_lock(f);                                          // TODO: Here we may distinguish for read and write pointer mutexes!

  // Peek the data
  count = _tu_fifo_peek_at_n(f, 0, buffer, count, f->wr_idx, f->rd_idx);        // f->rd_idx might get modified in case of an overflow so we can not use a local variable
1000355e:	89e0      	ldrh	r0, [r4, #14]
10003560:	8a21      	ldrh	r1, [r4, #16]
10003562:	b282      	uxth	r2, r0
  uint16_t cnt = wAbs-rAbs;
10003564:	1a46      	subs	r6, r0, r1
  count = _tu_fifo_peek_at_n(f, 0, buffer, count, f->wr_idx, f->rd_idx);        // f->rd_idx might get modified in case of an overflow so we can not use a local variable
10003566:	b28b      	uxth	r3, r1
  uint16_t cnt = wAbs-rAbs;
10003568:	b2b6      	uxth	r6, r6
  if (rAbs > wAbs) cnt -= f->non_used_index_space;
1000356a:	4288      	cmp	r0, r1
1000356c:	d202      	bcs.n	10003574 <tu_fifo_read_n+0x30>
1000356e:	8961      	ldrh	r1, [r4, #10]
10003570:	1a76      	subs	r6, r6, r1
10003572:	b2b6      	uxth	r6, r6
  if (cnt > f->depth)
10003574:	88a5      	ldrh	r5, [r4, #4]
  if ((p < p - offset) || (p - offset > f->max_pointer_idx))
10003576:	89a0      	ldrh	r0, [r4, #12]
  if (cnt > f->depth)
10003578:	42b5      	cmp	r5, r6
1000357a:	d207      	bcs.n	1000358c <tu_fifo_read_n+0x48>
  if ((p < p - offset) || (p - offset > f->max_pointer_idx))
1000357c:	1b53      	subs	r3, r2, r5
1000357e:	4283      	cmp	r3, r0
10003580:	dc2c      	bgt.n	100035dc <tu_fifo_read_n+0x98>
    p -= offset;
10003582:	b29b      	uxth	r3, r3
    rAbs = f->rd_idx;
10003584:	002e      	movs	r6, r5
  f->rd_idx = backward_pointer(f, wAbs, f->depth);
10003586:	8223      	strh	r3, [r4, #16]
    rAbs = f->rd_idx;
10003588:	8a23      	ldrh	r3, [r4, #16]
1000358a:	b29b      	uxth	r3, r3
  if (cnt == 0 || offset >= cnt) return 0;
1000358c:	2e00      	cmp	r6, #0
1000358e:	d02c      	beq.n	100035ea <tu_fifo_read_n+0xa6>
  if (cnt < n) {
10003590:	1c3a      	adds	r2, r7, #0
10003592:	42b7      	cmp	r7, r6
10003594:	d827      	bhi.n	100035e6 <tu_fifo_read_n+0xa2>
10003596:	b296      	uxth	r6, r2
  if ((p > p + offset) || (p + offset > f->max_pointer_idx))
10003598:	4283      	cmp	r3, r0
1000359a:	d902      	bls.n	100035a2 <tu_fifo_read_n+0x5e>
    p = (p + offset) + f->non_used_index_space;
1000359c:	8961      	ldrh	r1, [r4, #10]
1000359e:	185b      	adds	r3, r3, r1
100035a0:	b29b      	uxth	r3, r3
  while ( idx >= depth) idx -= depth;
100035a2:	429d      	cmp	r5, r3
100035a4:	d803      	bhi.n	100035ae <tu_fifo_read_n+0x6a>
100035a6:	1b5b      	subs	r3, r3, r5
100035a8:	b29b      	uxth	r3, r3
100035aa:	429d      	cmp	r5, r3
100035ac:	d9fb      	bls.n	100035a6 <tu_fifo_read_n+0x62>
  if(rRel + n <= f->depth)       // Linear mode only
100035ae:	199a      	adds	r2, r3, r6
100035b0:	0037      	movs	r7, r6
    memcpy(p_buffer, f->buffer + (rRel * f->item_size), n*f->item_size);
100035b2:	88e1      	ldrh	r1, [r4, #6]
  if(rRel + n <= f->depth)       // Linear mode only
100035b4:	42aa      	cmp	r2, r5
100035b6:	dc2c      	bgt.n	10003612 <tu_fifo_read_n+0xce>
    memcpy(p_buffer, f->buffer + (rRel * f->item_size), n*f->item_size);
100035b8:	000a      	movs	r2, r1
100035ba:	4359      	muls	r1, r3
100035bc:	6823      	ldr	r3, [r4, #0]
100035be:	4372      	muls	r2, r6
100035c0:	469c      	mov	ip, r3
100035c2:	4640      	mov	r0, r8
100035c4:	4461      	add	r1, ip
100035c6:	f7fd f9e7 	bl	10000998 <__wrap___aeabi_memcpy>

  // Advance read pointer
  f->rd_idx = advance_pointer(f, f->rd_idx, count);
100035ca:	8a22      	ldrh	r2, [r4, #16]
  if ((p > p + offset) || (p + offset > f->max_pointer_idx))
100035cc:	89a0      	ldrh	r0, [r4, #12]
  f->rd_idx = advance_pointer(f, f->rd_idx, count);
100035ce:	b293      	uxth	r3, r2
  if ((p > p + offset) || (p + offset > f->max_pointer_idx))
100035d0:	19d2      	adds	r2, r2, r7
100035d2:	4282      	cmp	r2, r0
100035d4:	dc0f      	bgt.n	100035f6 <tu_fifo_read_n+0xb2>
    p += offset;
100035d6:	199b      	adds	r3, r3, r6
100035d8:	b29b      	uxth	r3, r3
100035da:	e010      	b.n	100035fe <tu_fifo_read_n+0xba>
    p = (p - offset) - f->non_used_index_space;
100035dc:	8963      	ldrh	r3, [r4, #10]
100035de:	18eb      	adds	r3, r5, r3
100035e0:	1ad3      	subs	r3, r2, r3
100035e2:	b29b      	uxth	r3, r3
100035e4:	e7ce      	b.n	10003584 <tu_fifo_read_n+0x40>
100035e6:	1c32      	adds	r2, r6, #0
100035e8:	e7d5      	b.n	10003596 <tu_fifo_read_n+0x52>
100035ea:	2700      	movs	r7, #0
  f->rd_idx = advance_pointer(f, f->rd_idx, count);
100035ec:	8a22      	ldrh	r2, [r4, #16]
100035ee:	b293      	uxth	r3, r2
  if ((p > p + offset) || (p + offset > f->max_pointer_idx))
100035f0:	19d2      	adds	r2, r2, r7
100035f2:	4282      	cmp	r2, r0
100035f4:	ddef      	ble.n	100035d6 <tu_fifo_read_n+0x92>
    p = (p + offset) + f->non_used_index_space;
100035f6:	8962      	ldrh	r2, [r4, #10]
100035f8:	189b      	adds	r3, r3, r2
100035fa:	18f3      	adds	r3, r6, r3
100035fc:	b29b      	uxth	r3, r3
  if (f->mutex)
100035fe:	6960      	ldr	r0, [r4, #20]
  f->rd_idx = advance_pointer(f, f->rd_idx, count);
10003600:	8223      	strh	r3, [r4, #16]
  if (f->mutex)
10003602:	2800      	cmp	r0, #0
10003604:	d001      	beq.n	1000360a <tu_fifo_read_n+0xc6>
    mutex_exit(mutex_hdl);
10003606:	f00a fe4f 	bl	1000e2a8 <__mutex_exit_veneer>

  tu_fifo_unlock(f);
  return count;
}
1000360a:	0030      	movs	r0, r6
1000360c:	bc80      	pop	{r7}
1000360e:	46b8      	mov	r8, r7
10003610:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint16_t nLin = f->depth - rRel;
10003612:	1aed      	subs	r5, r5, r3
    memcpy(p_buffer, f->buffer + (rRel * f->item_size), nLin*f->item_size);
10003614:	b2ad      	uxth	r5, r5
10003616:	002a      	movs	r2, r5
10003618:	434a      	muls	r2, r1
1000361a:	4359      	muls	r1, r3
1000361c:	6823      	ldr	r3, [r4, #0]
1000361e:	4640      	mov	r0, r8
10003620:	469c      	mov	ip, r3
10003622:	4461      	add	r1, ip
10003624:	f7fd f9b8 	bl	10000998 <__wrap___aeabi_memcpy>
    memcpy(p_buffer + nLin*f->item_size, f->buffer, (n - nLin) * f->item_size);
10003628:	88e3      	ldrh	r3, [r4, #6]
1000362a:	1b72      	subs	r2, r6, r5
1000362c:	0018      	movs	r0, r3
1000362e:	4368      	muls	r0, r5
10003630:	435a      	muls	r2, r3
10003632:	6821      	ldr	r1, [r4, #0]
10003634:	4440      	add	r0, r8
10003636:	f7fd f9af 	bl	10000998 <__wrap___aeabi_memcpy>
  if ((p > p + offset) || (p + offset > f->max_pointer_idx))
1000363a:	89a0      	ldrh	r0, [r4, #12]
1000363c:	e7d6      	b.n	100035ec <tu_fifo_read_n+0xa8>
1000363e:	46c0      	nop			; (mov r8, r8)

10003640 <tu_fifo_write>:
    @returns TRUE if the data was written to the FIFO (overwrittable
             FIFO will always return TRUE)
 */
/******************************************************************************/
bool tu_fifo_write(tu_fifo_t* f, const void * data)
{
10003640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10003642:	0004      	movs	r4, r0
  if (f->mutex)
10003644:	6940      	ldr	r0, [r0, #20]
{
10003646:	000e      	movs	r6, r1
  if (f->mutex)
10003648:	2800      	cmp	r0, #0
1000364a:	d003      	beq.n	10003654 <tu_fifo_write+0x14>
    return mutex_enter_timeout_ms(mutex_hdl, msec);
1000364c:	2101      	movs	r1, #1
1000364e:	4249      	negs	r1, r1
10003650:	f00a fe4a 	bl	1000e2e8 <__mutex_enter_timeout_ms_veneer>
  tu_fifo_lock(f);

  uint16_t w = f->wr_idx;
10003654:	89e2      	ldrh	r2, [r4, #14]

  if ( _tu_fifo_full(f, w, f->rd_idx) && !f->overwritable ) return false;
10003656:	8a21      	ldrh	r1, [r4, #16]
  uint16_t w = f->wr_idx;
10003658:	b295      	uxth	r5, r2
  uint16_t cnt = wAbs-rAbs;
1000365a:	1a53      	subs	r3, r2, r1
1000365c:	b29b      	uxth	r3, r3
  if (rAbs > wAbs) cnt -= f->non_used_index_space;
1000365e:	4291      	cmp	r1, r2
10003660:	d902      	bls.n	10003668 <tu_fifo_write+0x28>
10003662:	8962      	ldrh	r2, [r4, #10]
10003664:	1a9b      	subs	r3, r3, r2
10003666:	b29b      	uxth	r3, r3
  return (_tu_fifo_count(f, wAbs, rAbs) == f->depth);
10003668:	88a2      	ldrh	r2, [r4, #4]
  if ( _tu_fifo_full(f, w, f->rd_idx) && !f->overwritable ) return false;
1000366a:	429a      	cmp	r2, r3
1000366c:	d026      	beq.n	100036bc <tu_fifo_write+0x7c>
  if ((p > p + offset) || (p + offset > f->max_pointer_idx))
1000366e:	89a1      	ldrh	r1, [r4, #12]
10003670:	002b      	movs	r3, r5
10003672:	42a9      	cmp	r1, r5
10003674:	d206      	bcs.n	10003684 <tu_fifo_write+0x44>
    p = (p + offset) + f->non_used_index_space;
10003676:	8963      	ldrh	r3, [r4, #10]
10003678:	18eb      	adds	r3, r5, r3
1000367a:	b29b      	uxth	r3, r3
  while ( idx >= depth) idx -= depth;
1000367c:	429a      	cmp	r2, r3
1000367e:	d803      	bhi.n	10003688 <tu_fifo_write+0x48>
10003680:	1a9b      	subs	r3, r3, r2
10003682:	b29b      	uxth	r3, r3
10003684:	429a      	cmp	r2, r3
10003686:	d9fb      	bls.n	10003680 <tu_fifo_write+0x40>
  memcpy(f->buffer + (wRel * f->item_size), data, f->item_size);
10003688:	88e2      	ldrh	r2, [r4, #6]
1000368a:	6821      	ldr	r1, [r4, #0]
1000368c:	4353      	muls	r3, r2
1000368e:	18c8      	adds	r0, r1, r3
10003690:	0031      	movs	r1, r6
10003692:	f7fd f981 	bl	10000998 <__wrap___aeabi_memcpy>
  if ((p > p + offset) || (p + offset > f->max_pointer_idx))
10003696:	89a3      	ldrh	r3, [r4, #12]
10003698:	42ab      	cmp	r3, r5
1000369a:	d90a      	bls.n	100036b2 <tu_fifo_write+0x72>
    p += offset;
1000369c:	3501      	adds	r5, #1
1000369e:	b2ad      	uxth	r5, r5
  if (f->mutex)
100036a0:	6960      	ldr	r0, [r4, #20]
  // Advance pointer
  f->wr_idx = advance_pointer(f, w, 1);

  tu_fifo_unlock(f);

  return true;
100036a2:	2701      	movs	r7, #1
  f->wr_idx = advance_pointer(f, w, 1);
100036a4:	81e5      	strh	r5, [r4, #14]
  if (f->mutex)
100036a6:	2800      	cmp	r0, #0
100036a8:	d001      	beq.n	100036ae <tu_fifo_write+0x6e>
    mutex_exit(mutex_hdl);
100036aa:	f00a fdfd 	bl	1000e2a8 <__mutex_exit_veneer>
}
100036ae:	0038      	movs	r0, r7
100036b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    p = (p + offset) + f->non_used_index_space;
100036b2:	8963      	ldrh	r3, [r4, #10]
100036b4:	18ed      	adds	r5, r5, r3
100036b6:	3501      	adds	r5, #1
100036b8:	b2ad      	uxth	r5, r5
100036ba:	e7f1      	b.n	100036a0 <tu_fifo_write+0x60>
  if ( _tu_fifo_full(f, w, f->rd_idx) && !f->overwritable ) return false;
100036bc:	7a27      	ldrb	r7, [r4, #8]
100036be:	2f00      	cmp	r7, #0
100036c0:	d1d5      	bne.n	1000366e <tu_fifo_write+0x2e>
100036c2:	e7f4      	b.n	100036ae <tu_fifo_write+0x6e>

100036c4 <tu_fifo_write_n>:
                Number of element
    @return Number of written elements
 */
/******************************************************************************/
uint16_t tu_fifo_write_n(tu_fifo_t* f, const void * data, uint16_t count)
{
100036c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100036c6:	4647      	mov	r7, r8
100036c8:	46ce      	mov	lr, r9
100036ca:	0004      	movs	r4, r0
100036cc:	b580      	push	{r7, lr}
100036ce:	0015      	movs	r5, r2
100036d0:	000f      	movs	r7, r1
  if ( count == 0 ) return 0;
100036d2:	2a00      	cmp	r2, #0
100036d4:	d052      	beq.n	1000377c <tu_fifo_write_n+0xb8>
  if (f->mutex)
100036d6:	6940      	ldr	r0, [r0, #20]
100036d8:	2800      	cmp	r0, #0
100036da:	d003      	beq.n	100036e4 <tu_fifo_write_n+0x20>
    return mutex_enter_timeout_ms(mutex_hdl, msec);
100036dc:	2101      	movs	r1, #1
100036de:	4249      	negs	r1, r1
100036e0:	f00a fe02 	bl	1000e2e8 <__mutex_enter_timeout_ms_veneer>

  tu_fifo_lock(f);

  uint16_t w = f->wr_idx, r = f->rd_idx;
100036e4:	89e6      	ldrh	r6, [r4, #14]
  uint8_t const* buf8 = (uint8_t const*) data;

  if (!f->overwritable)
100036e6:	7a23      	ldrb	r3, [r4, #8]
  uint16_t w = f->wr_idx, r = f->rd_idx;
100036e8:	8a20      	ldrh	r0, [r4, #16]
  return f->depth - _tu_fifo_count(f, wAbs, rAbs);
100036ea:	88a1      	ldrh	r1, [r4, #4]
  uint16_t w = f->wr_idx, r = f->rd_idx;
100036ec:	b2b6      	uxth	r6, r6
100036ee:	b280      	uxth	r0, r0
  if (!f->overwritable)
100036f0:	2b00      	cmp	r3, #0
100036f2:	d138      	bne.n	10003766 <tu_fifo_write_n+0xa2>
  uint16_t cnt = wAbs-rAbs;
100036f4:	1a33      	subs	r3, r6, r0
100036f6:	b29b      	uxth	r3, r3
  if (rAbs > wAbs) cnt -= f->non_used_index_space;
100036f8:	4286      	cmp	r6, r0
100036fa:	d202      	bcs.n	10003702 <tu_fifo_write_n+0x3e>
100036fc:	8962      	ldrh	r2, [r4, #10]
100036fe:	1a9b      	subs	r3, r3, r2
10003700:	b29b      	uxth	r3, r3
  return f->depth - _tu_fifo_count(f, wAbs, rAbs);
10003702:	1acb      	subs	r3, r1, r3
static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
10003704:	1c1a      	adds	r2, r3, #0
10003706:	b29b      	uxth	r3, r3
10003708:	42ab      	cmp	r3, r5
1000370a:	d852      	bhi.n	100037b2 <tu_fifo_write_n+0xee>
1000370c:	b293      	uxth	r3, r2
1000370e:	4698      	mov	r8, r3
  if(wRel + n <= f->depth)  // Linear mode only
10003710:	001d      	movs	r5, r3
    count = tu_min16(count, _tu_fifo_remaining(f, w, r));
  }
  else if (count > f->depth)
  {
    // Only copy last part
    buf8 = buf8 + (count - f->depth) * f->item_size;
10003712:	88e2      	ldrh	r2, [r4, #6]
  if ((p > p + offset) || (p + offset > f->max_pointer_idx))
10003714:	89a0      	ldrh	r0, [r4, #12]
  uint16_t w = f->wr_idx, r = f->rd_idx;
10003716:	0033      	movs	r3, r6
  if ((p > p + offset) || (p + offset > f->max_pointer_idx))
10003718:	4286      	cmp	r6, r0
1000371a:	dd05      	ble.n	10003728 <tu_fifo_write_n+0x64>
    p = (p + offset) + f->non_used_index_space;
1000371c:	8963      	ldrh	r3, [r4, #10]
1000371e:	18f3      	adds	r3, r6, r3
10003720:	b29b      	uxth	r3, r3
  while ( idx >= depth) idx -= depth;
10003722:	e001      	b.n	10003728 <tu_fifo_write_n+0x64>
10003724:	1a5b      	subs	r3, r3, r1
10003726:	b29b      	uxth	r3, r3
10003728:	428b      	cmp	r3, r1
1000372a:	d2fb      	bcs.n	10003724 <tu_fifo_write_n+0x60>
  if(wRel + n <= f->depth)  // Linear mode only
1000372c:	1958      	adds	r0, r3, r5
1000372e:	4288      	cmp	r0, r1
10003730:	dc2a      	bgt.n	10003788 <tu_fifo_write_n+0xc4>
    memcpy(f->buffer + (wRel * f->item_size), data, n*f->item_size);
10003732:	4353      	muls	r3, r2
10003734:	6821      	ldr	r1, [r4, #0]
10003736:	436a      	muls	r2, r5
10003738:	18c8      	adds	r0, r1, r3
1000373a:	0039      	movs	r1, r7
1000373c:	f7fd f92c 	bl	10000998 <__wrap___aeabi_memcpy>
  if ((p > p + offset) || (p + offset > f->max_pointer_idx))
10003740:	89a3      	ldrh	r3, [r4, #12]
10003742:	1975      	adds	r5, r6, r5
10003744:	429d      	cmp	r5, r3
10003746:	dd1c      	ble.n	10003782 <tu_fifo_write_n+0xbe>
    p = (p + offset) + f->non_used_index_space;
10003748:	8963      	ldrh	r3, [r4, #10]
1000374a:	18f6      	adds	r6, r6, r3
1000374c:	4446      	add	r6, r8
1000374e:	b2b6      	uxth	r6, r6
  if (f->mutex)
10003750:	6960      	ldr	r0, [r4, #20]

  // Write data
  _ff_push_n(f, buf8, count, wRel);

  // Advance pointer
  f->wr_idx = advance_pointer(f, w, count);
10003752:	81e6      	strh	r6, [r4, #14]
  if (f->mutex)
10003754:	2800      	cmp	r0, #0
10003756:	d001      	beq.n	1000375c <tu_fifo_write_n+0x98>
    mutex_exit(mutex_hdl);
10003758:	f00a fda6 	bl	1000e2a8 <__mutex_exit_veneer>

  tu_fifo_unlock(f);

  return count;
}
1000375c:	4640      	mov	r0, r8
1000375e:	bcc0      	pop	{r6, r7}
10003760:	46b9      	mov	r9, r7
10003762:	46b0      	mov	r8, r6
10003764:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if(wRel + n <= f->depth)  // Linear mode only
10003766:	46a8      	mov	r8, r5
    buf8 = buf8 + (count - f->depth) * f->item_size;
10003768:	88e2      	ldrh	r2, [r4, #6]
  else if (count > f->depth)
1000376a:	42a9      	cmp	r1, r5
1000376c:	d2d2      	bcs.n	10003714 <tu_fifo_write_n+0x50>
    buf8 = buf8 + (count - f->depth) * f->item_size;
1000376e:	1a6d      	subs	r5, r5, r1
10003770:	4355      	muls	r5, r2
    f->wr_idx = r;
10003772:	4688      	mov	r8, r1
    buf8 = buf8 + (count - f->depth) * f->item_size;
10003774:	197f      	adds	r7, r7, r5
    f->wr_idx = r;
10003776:	81e0      	strh	r0, [r4, #14]
10003778:	000d      	movs	r5, r1
1000377a:	e7cb      	b.n	10003714 <tu_fifo_write_n+0x50>
  if ( count == 0 ) return 0;
1000377c:	2300      	movs	r3, #0
1000377e:	4698      	mov	r8, r3
10003780:	e7ec      	b.n	1000375c <tu_fifo_write_n+0x98>
    p += offset;
10003782:	4446      	add	r6, r8
10003784:	b2b6      	uxth	r6, r6
10003786:	e7e3      	b.n	10003750 <tu_fifo_write_n+0x8c>
    uint16_t nLin = f->depth - wRel;
10003788:	1ac9      	subs	r1, r1, r3
    memcpy(f->buffer + (wRel * f->item_size), data, nLin*f->item_size);
1000378a:	b289      	uxth	r1, r1
1000378c:	4689      	mov	r9, r1
1000378e:	4353      	muls	r3, r2
10003790:	6821      	ldr	r1, [r4, #0]
10003792:	18c8      	adds	r0, r1, r3
10003794:	464b      	mov	r3, r9
10003796:	0039      	movs	r1, r7
10003798:	435a      	muls	r2, r3
1000379a:	f7fd f8fd 	bl	10000998 <__wrap___aeabi_memcpy>
    memcpy(f->buffer, data + nLin*f->item_size, (n - nLin) * f->item_size);
1000379e:	464b      	mov	r3, r9
100037a0:	88e1      	ldrh	r1, [r4, #6]
100037a2:	1aea      	subs	r2, r5, r3
100037a4:	434a      	muls	r2, r1
100037a6:	4359      	muls	r1, r3
100037a8:	6820      	ldr	r0, [r4, #0]
100037aa:	1879      	adds	r1, r7, r1
100037ac:	f7fd f8f4 	bl	10000998 <__wrap___aeabi_memcpy>
100037b0:	e7c6      	b.n	10003740 <tu_fifo_write_n+0x7c>
100037b2:	1c2a      	adds	r2, r5, #0
100037b4:	b293      	uxth	r3, r2
100037b6:	4698      	mov	r8, r3
  if(wRel + n <= f->depth)  // Linear mode only
100037b8:	001d      	movs	r5, r3
    buf8 = buf8 + (count - f->depth) * f->item_size;
100037ba:	88e2      	ldrh	r2, [r4, #6]
100037bc:	e7aa      	b.n	10003714 <tu_fifo_write_n+0x50>
100037be:	46c0      	nop			; (mov r8, r8)

100037c0 <tu_fifo_clear>:
    @param[in]  f
                Pointer to the FIFO buffer to manipulate
 */
/******************************************************************************/
bool tu_fifo_clear(tu_fifo_t *f)
{
100037c0:	b510      	push	{r4, lr}
100037c2:	0004      	movs	r4, r0
  if (f->mutex)
100037c4:	6940      	ldr	r0, [r0, #20]
100037c6:	2800      	cmp	r0, #0
100037c8:	d00d      	beq.n	100037e6 <tu_fifo_clear+0x26>
    return mutex_enter_timeout_ms(mutex_hdl, msec);
100037ca:	2101      	movs	r1, #1
100037cc:	4249      	negs	r1, r1
100037ce:	f00a fd8b 	bl	1000e2e8 <__mutex_enter_timeout_ms_veneer>
  tu_fifo_lock(f);
  f->rd_idx = f->wr_idx = 0;
100037d2:	2300      	movs	r3, #0
  if (f->mutex)
100037d4:	6960      	ldr	r0, [r4, #20]
  f->rd_idx = f->wr_idx = 0;
100037d6:	81e3      	strh	r3, [r4, #14]
100037d8:	8223      	strh	r3, [r4, #16]
  if (f->mutex)
100037da:	2800      	cmp	r0, #0
100037dc:	d001      	beq.n	100037e2 <tu_fifo_clear+0x22>
    mutex_exit(mutex_hdl);
100037de:	f00a fd63 	bl	1000e2a8 <__mutex_exit_veneer>
  tu_fifo_unlock(f);

  return true;
}
100037e2:	2001      	movs	r0, #1
100037e4:	bd10      	pop	{r4, pc}
  f->rd_idx = f->wr_idx = 0;
100037e6:	81e0      	strh	r0, [r4, #14]
100037e8:	8220      	strh	r0, [r4, #16]
  return true;
100037ea:	e7fa      	b.n	100037e2 <tu_fifo_clear+0x22>

100037ec <tud_mounted>:
  return (tusb_speed_t) _usbd_dev.speed;
}

bool tud_mounted(void)
{
  return _usbd_dev.cfg_num ? 1 : 0;
100037ec:	4b02      	ldr	r3, [pc, #8]	; (100037f8 <tud_mounted+0xc>)
100037ee:	7858      	ldrb	r0, [r3, #1]
100037f0:	1e43      	subs	r3, r0, #1
100037f2:	4198      	sbcs	r0, r3
100037f4:	b2c0      	uxtb	r0, r0
}
100037f6:	4770      	bx	lr
100037f8:	20011e28 	.word	0x20011e28

100037fc <tud_suspended>:

bool tud_suspended(void)
{
  return _usbd_dev.suspended;
100037fc:	4b02      	ldr	r3, [pc, #8]	; (10003808 <tud_suspended+0xc>)
100037fe:	7818      	ldrb	r0, [r3, #0]
10003800:	0740      	lsls	r0, r0, #29
10003802:	0fc0      	lsrs	r0, r0, #31
}
10003804:	4770      	bx	lr
10003806:	46c0      	nop			; (mov r8, r8)
10003808:	20011e28 	.word	0x20011e28

1000380c <tud_init>:

//--------------------------------------------------------------------+
// USBD Task
//--------------------------------------------------------------------+
bool tud_init (void)
{
1000380c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  TU_LOG2("USBD init\r\n");

  tu_varclr(&_usbd_dev);
1000380e:	2237      	movs	r2, #55	; 0x37
10003810:	2100      	movs	r1, #0
10003812:	4821      	ldr	r0, [pc, #132]	; (10003898 <tud_init+0x8c>)
10003814:	f7fd f8ba 	bl	1000098c <__wrap_memset>
    mutex_init(mdef);
10003818:	4c20      	ldr	r4, [pc, #128]	; (1000389c <tud_init+0x90>)
1000381a:	0020      	movs	r0, r4
1000381c:	f7fd feba 	bl	10001594 <mutex_init>

#if CFG_TUSB_OS != OPT_OS_NONE
  // Init device mutex
  _usbd_mutex = osal_mutex_create(&_ubsd_mutexdef);
10003820:	4b1f      	ldr	r3, [pc, #124]	; (100038a0 <tud_init+0x94>)
10003822:	601c      	str	r4, [r3, #0]
    critical_section_exit(&qhdl->critsec);
}

static inline osal_queue_t osal_queue_create(osal_queue_def_t* qdef)
{
  critical_section_init(&qdef->critsec);
10003824:	4c1f      	ldr	r4, [pc, #124]	; (100038a4 <tud_init+0x98>)
10003826:	0020      	movs	r0, r4
10003828:	3018      	adds	r0, #24
1000382a:	f7fd fb85 	bl	10000f38 <critical_section_init>
  tu_fifo_clear(&qdef->ff);
1000382e:	0020      	movs	r0, r4
10003830:	f7ff ffc6 	bl	100037c0 <tu_fifo_clear>
  TU_ASSERT(_usbd_mutex);
#endif

  // Init device queue & task
  _usbd_q = osal_queue_create(&_usbd_qdef);
10003834:	4b1c      	ldr	r3, [pc, #112]	; (100038a8 <tud_init+0x9c>)
  TU_ASSERT(_usbd_q);

  // Get application driver if available
  if ( usbd_app_driver_get_cb )
10003836:	4e1d      	ldr	r6, [pc, #116]	; (100038ac <tud_init+0xa0>)
  {
    _app_driver = usbd_app_driver_get_cb(&_app_driver_count);
10003838:	4d1d      	ldr	r5, [pc, #116]	; (100038b0 <tud_init+0xa4>)
  _usbd_q = osal_queue_create(&_usbd_qdef);
1000383a:	601c      	str	r4, [r3, #0]
  if ( usbd_app_driver_get_cb )
1000383c:	2e00      	cmp	r6, #0
1000383e:	d004      	beq.n	1000384a <tud_init+0x3e>
    _app_driver = usbd_app_driver_get_cb(&_app_driver_count);
10003840:	0028      	movs	r0, r5
10003842:	e000      	b.n	10003846 <tud_init+0x3a>
10003844:	bf00      	nop
10003846:	4b1b      	ldr	r3, [pc, #108]	; (100038b4 <tud_init+0xa8>)
10003848:	6018      	str	r0, [r3, #0]
  }

  // Init class drivers
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
1000384a:	2400      	movs	r4, #0
1000384c:	782b      	ldrb	r3, [r5, #0]
1000384e:	2e00      	cmp	r6, #0
10003850:	d019      	beq.n	10003886 <tud_init+0x7a>
10003852:	4e19      	ldr	r6, [pc, #100]	; (100038b8 <tud_init+0xac>)
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
10003854:	4f17      	ldr	r7, [pc, #92]	; (100038b4 <tud_init+0xa8>)
10003856:	429c      	cmp	r4, r3
10003858:	d30f      	bcc.n	1000387a <tud_init+0x6e>
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
1000385a:	d119      	bne.n	10003890 <tud_init+0x84>
1000385c:	0033      	movs	r3, r6
  {
    usbd_class_driver_t const * driver = get_driver(i);
    TU_LOG2("%s init\r\n", driver->name);
    driver->init();
1000385e:	4798      	blx	r3
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
10003860:	3401      	adds	r4, #1
10003862:	782b      	ldrb	r3, [r5, #0]
10003864:	b2e4      	uxtb	r4, r4
10003866:	42a3      	cmp	r3, r4
10003868:	d2f5      	bcs.n	10003856 <tud_init+0x4a>
  }

  // Init device controller driver
  dcd_init(TUD_OPT_RHPORT);
1000386a:	2000      	movs	r0, #0
1000386c:	f000 ff72 	bl	10004754 <dcd_init>
  dcd_int_enable(TUD_OPT_RHPORT);
10003870:	2000      	movs	r0, #0
10003872:	f000 ff49 	bl	10004708 <dcd_int_enable>

  return true;
}
10003876:	2001      	movs	r0, #1
10003878:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    driver->init();
1000387a:	00e3      	lsls	r3, r4, #3
1000387c:	683a      	ldr	r2, [r7, #0]
1000387e:	1b1b      	subs	r3, r3, r4
10003880:	009b      	lsls	r3, r3, #2
10003882:	589b      	ldr	r3, [r3, r2]
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
10003884:	e7eb      	b.n	1000385e <tud_init+0x52>
    driver->init();
10003886:	f7ff fbef 	bl	10003068 <cdcd_init>
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
1000388a:	782b      	ldrb	r3, [r5, #0]
1000388c:	2b00      	cmp	r3, #0
1000388e:	d0ec      	beq.n	1000386a <tud_init+0x5e>
    driver->init();
10003890:	2300      	movs	r3, #0
10003892:	681b      	ldr	r3, [r3, #0]
10003894:	deff      	udf	#255	; 0xff
10003896:	46c0      	nop			; (mov r8, r8)
10003898:	20011e28 	.word	0x20011e28
1000389c:	20011de0 	.word	0x20011de0
100038a0:	20011e60 	.word	0x20011e60
100038a4:	20002730 	.word	0x20002730
100038a8:	20011e64 	.word	0x20011e64
100038ac:	00000000 	.word	0x00000000
100038b0:	20012771 	.word	0x20012771
100038b4:	20011af8 	.word	0x20011af8
100038b8:	10003069 	.word	0x10003069

100038bc <tud_task>:
      }
    }
    @endcode
 */
void tud_task (void)
{
100038bc:	b5f0      	push	{r4, r5, r6, r7, lr}
100038be:	46de      	mov	lr, fp
100038c0:	4657      	mov	r7, sl
100038c2:	464e      	mov	r6, r9
100038c4:	4645      	mov	r5, r8
100038c6:	b5e0      	push	{r5, r6, r7, lr}
100038c8:	b08b      	sub	sp, #44	; 0x2c
  // Skip if stack is not initialized
  if ( !tusb_inited() ) return;
100038ca:	f001 fa05 	bl	10004cd8 <tusb_inited>
100038ce:	2800      	cmp	r0, #0
100038d0:	d100      	bne.n	100038d4 <tud_task+0x18>
100038d2:	e123      	b.n	10003b1c <tud_task+0x260>
100038d4:	4bb3      	ldr	r3, [pc, #716]	; (10003ba4 <tud_task+0x2e8>)
100038d6:	af07      	add	r7, sp, #28
100038d8:	469a      	mov	sl, r3
#if CFG_TUSB_DEBUG >= 2
    if (event.event_id == DCD_EVENT_SETUP_RECEIVED) TU_LOG2("\r\n"); // extra line for setup
    TU_LOG2("USBD %s ", event.event_id < DCD_EVENT_COUNT ? _usbd_event_str[event.event_id] : "CORRUPTED");
#endif

    switch ( event.event_id )
100038da:	4bb3      	ldr	r3, [pc, #716]	; (10003ba8 <tud_task+0x2ec>)
100038dc:	469b      	mov	fp, r3
    if ( !osal_queue_receive(_usbd_q, &event) ) return;
100038de:	4653      	mov	r3, sl
100038e0:	681d      	ldr	r5, [r3, #0]
 * method will block until it is released.
 *
 * \param critsec Pointer to critical_section structure
 */
static inline void critical_section_enter_blocking(critical_section_t *critsec) {
    critsec->save = spin_lock_blocking(critsec->core.spin_lock);
100038e2:	69aa      	ldr	r2, [r5, #24]
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
100038e4:	f3ef 8110 	mrs	r1, PRIMASK
    __asm volatile ("cpsid i");
100038e8:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
100038ea:	6813      	ldr	r3, [r2, #0]
100038ec:	2b00      	cmp	r3, #0
100038ee:	d0fc      	beq.n	100038ea <tud_task+0x2e>
    __asm volatile ("dmb");
100038f0:	f3bf 8f5f 	dmb	sy
100038f4:	61e9      	str	r1, [r5, #28]
  //  however osal_queue_recieve may be. therefore my assumption is that
  //  the fifo mutex is not populated for queues used from an IRQ context
  assert(!qhdl->ff.mutex);

  _osal_q_lock(qhdl);
  bool success = tu_fifo_read(&qhdl->ff, data);
100038f6:	0028      	movs	r0, r5
100038f8:	0039      	movs	r1, r7
100038fa:	f7ff fdcf 	bl	1000349c <tu_fifo_read>
 *  \ingroup critical_section
 *
 * \param critsec Pointer to critical_section structure
 */
static inline void critical_section_exit(critical_section_t *critsec) {
    spin_unlock(critsec->core.spin_lock, critsec->save);
100038fe:	69aa      	ldr	r2, [r5, #24]
10003900:	0004      	movs	r4, r0
10003902:	69eb      	ldr	r3, [r5, #28]
10003904:	f3bf 8f5f 	dmb	sy
    *lock = 0;
10003908:	2100      	movs	r1, #0
1000390a:	6011      	str	r1, [r2, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
1000390c:	f383 8810 	msr	PRIMASK, r3
10003910:	2800      	cmp	r0, #0
10003912:	d100      	bne.n	10003916 <tud_task+0x5a>
10003914:	e102      	b.n	10003b1c <tud_task+0x260>
    switch ( event.event_id )
10003916:	787b      	ldrb	r3, [r7, #1]
10003918:	2b08      	cmp	r3, #8
1000391a:	d8e0      	bhi.n	100038de <tud_task+0x22>
1000391c:	465a      	mov	r2, fp
1000391e:	009b      	lsls	r3, r3, #2
10003920:	58d3      	ldr	r3, [r2, r3]
10003922:	469f      	mov	pc, r3
        }
      break;

      case USBD_EVENT_FUNC_CALL:
        TU_LOG2("\r\n");
        if ( event.func_call.func ) event.func_call.func(event.func_call.param);
10003924:	687b      	ldr	r3, [r7, #4]
10003926:	2b00      	cmp	r3, #0
10003928:	d0d9      	beq.n	100038de <tud_task+0x22>
1000392a:	68b8      	ldr	r0, [r7, #8]
1000392c:	4798      	blx	r3
  {
1000392e:	e7d6      	b.n	100038de <tud_task+0x22>
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
10003930:	227f      	movs	r2, #127	; 0x7f
        uint8_t const ep_addr = event.xfer_complete.ep_addr;
10003932:	7939      	ldrb	r1, [r7, #4]
        _usbd_dev.ep_status[epnum][ep_dir].busy = false;
10003934:	4b9d      	ldr	r3, [pc, #628]	; (10003bac <tud_task+0x2f0>)
10003936:	400a      	ands	r2, r1
10003938:	0054      	lsls	r4, r2, #1
1000393a:	09c8      	lsrs	r0, r1, #7
1000393c:	191b      	adds	r3, r3, r4
1000393e:	181b      	adds	r3, r3, r0
10003940:	0018      	movs	r0, r3
10003942:	2501      	movs	r5, #1
10003944:	3020      	adds	r0, #32
10003946:	7944      	ldrb	r4, [r0, #5]
10003948:	43ac      	bics	r4, r5
1000394a:	7144      	strb	r4, [r0, #5]
        _usbd_dev.ep_status[epnum][ep_dir].claimed = 0;
1000394c:	7944      	ldrb	r4, [r0, #5]
1000394e:	3503      	adds	r5, #3
10003950:	43ac      	bics	r4, r5
10003952:	7144      	strb	r4, [r0, #5]
        if ( 0 == epnum )
10003954:	2a00      	cmp	r2, #0
10003956:	d100      	bne.n	1000395a <tud_task+0x9e>
10003958:	e0e7      	b.n	10003b2a <tud_task+0x26e>
  if ( usbd_app_driver_get_cb )
1000395a:	4a95      	ldr	r2, [pc, #596]	; (10003bb0 <tud_task+0x2f4>)
          usbd_class_driver_t const * driver = get_driver( _usbd_dev.ep2drv[epnum][ep_dir] );
1000395c:	7cdb      	ldrb	r3, [r3, #19]
  if ( usbd_app_driver_get_cb )
1000395e:	2a00      	cmp	r2, #0
10003960:	d006      	beq.n	10003970 <tud_task+0xb4>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
10003962:	4a94      	ldr	r2, [pc, #592]	; (10003bb4 <tud_task+0x2f8>)
10003964:	7812      	ldrb	r2, [r2, #0]
10003966:	4293      	cmp	r3, r2
10003968:	d200      	bcs.n	1000396c <tud_task+0xb0>
1000396a:	e16f      	b.n	10003c4c <tud_task+0x390>
    drvid -= _app_driver_count;
1000396c:	1a9b      	subs	r3, r3, r2
1000396e:	b2db      	uxtb	r3, r3
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
10003970:	2b00      	cmp	r3, #0
10003972:	d000      	beq.n	10003976 <tud_task+0xba>
10003974:	e0d2      	b.n	10003b1c <tud_task+0x260>
10003976:	4c90      	ldr	r4, [pc, #576]	; (10003bb8 <tud_task+0x2fc>)
          driver->xfer_cb(event.rhport, ep_addr, event.xfer_complete.result, event.xfer_complete.len);
10003978:	797a      	ldrb	r2, [r7, #5]
1000397a:	7838      	ldrb	r0, [r7, #0]
1000397c:	68bb      	ldr	r3, [r7, #8]
1000397e:	47a0      	blx	r4
10003980:	e7ad      	b.n	100038de <tud_task+0x22>
        _usbd_dev.connected = 1;
10003982:	4b8a      	ldr	r3, [pc, #552]	; (10003bac <tud_task+0x2f0>)
10003984:	2601      	movs	r6, #1
10003986:	4698      	mov	r8, r3
10003988:	4642      	mov	r2, r8
1000398a:	781b      	ldrb	r3, [r3, #0]

// This handles the actual request and its response.
// return false will cause its caller to stall control endpoint
static bool process_control_request(uint8_t rhport, tusb_control_request_t const * p_request)
{
  usbd_control_set_complete_callback(NULL);
1000398c:	2000      	movs	r0, #0
        _usbd_dev.connected = 1;
1000398e:	4333      	orrs	r3, r6
10003990:	7013      	strb	r3, [r2, #0]
        if ( !process_control_request(event.rhport, &event.setup_received) )
10003992:	783b      	ldrb	r3, [r7, #0]
10003994:	4699      	mov	r9, r3
  usbd_control_set_complete_callback(NULL);
10003996:	f000 fd93 	bl	100044c0 <usbd_control_set_complete_callback>

  TU_ASSERT(p_request->bmRequestType_bit.type < TUSB_REQ_TYPE_INVALID);
1000399a:	2360      	movs	r3, #96	; 0x60
1000399c:	793d      	ldrb	r5, [r7, #4]
1000399e:	402b      	ands	r3, r5
100039a0:	2b60      	cmp	r3, #96	; 0x60
100039a2:	d00d      	beq.n	100039c0 <tud_task+0x104>

  // Vendor request
  if ( p_request->bmRequestType_bit.type == TUSB_REQ_TYPE_VENDOR )
100039a4:	2b40      	cmp	r3, #64	; 0x40
100039a6:	d100      	bne.n	100039aa <tud_task+0xee>
100039a8:	e0db      	b.n	10003b62 <tud_task+0x2a6>
    TU_LOG2("  %s", _tusb_std_request_str[p_request->bRequest]);
    if (TUSB_REQ_GET_DESCRIPTOR != p_request->bRequest) TU_LOG2("\r\n");
  }
#endif

  switch ( p_request->bmRequestType_bit.recipient )
100039aa:	06ed      	lsls	r5, r5, #27
100039ac:	0eed      	lsrs	r5, r5, #27
100039ae:	2d01      	cmp	r5, #1
100039b0:	d100      	bne.n	100039b4 <tud_task+0xf8>
100039b2:	e156      	b.n	10003c62 <tud_task+0x3a6>
100039b4:	2d02      	cmp	r5, #2
100039b6:	d100      	bne.n	100039ba <tud_task+0xfe>
100039b8:	e112      	b.n	10003be0 <tud_task+0x324>
100039ba:	2d00      	cmp	r5, #0
100039bc:	d100      	bne.n	100039c0 <tud_task+0x104>
100039be:	e0e2      	b.n	10003b86 <tud_task+0x2ca>
          dcd_edpt_stall(event.rhport, 0);
100039c0:	7838      	ldrb	r0, [r7, #0]
100039c2:	2100      	movs	r1, #0
100039c4:	f000 fff0 	bl	100049a8 <dcd_edpt_stall>
          dcd_edpt_stall(event.rhport, 0 | TUSB_DIR_IN_MASK);
100039c8:	2180      	movs	r1, #128	; 0x80
100039ca:	7838      	ldrb	r0, [r7, #0]
100039cc:	f000 ffec 	bl	100049a8 <dcd_edpt_stall>
100039d0:	e785      	b.n	100038de <tud_task+0x22>
        if (tud_resume_cb) tud_resume_cb();
100039d2:	4b7a      	ldr	r3, [pc, #488]	; (10003bbc <tud_task+0x300>)
100039d4:	2b00      	cmp	r3, #0
100039d6:	d082      	beq.n	100038de <tud_task+0x22>
100039d8:	e000      	b.n	100039dc <tud_task+0x120>
100039da:	bf00      	nop
100039dc:	e77f      	b.n	100038de <tud_task+0x22>
        if (tud_suspend_cb) tud_suspend_cb(_usbd_dev.remote_wakeup_en);
100039de:	4b78      	ldr	r3, [pc, #480]	; (10003bc0 <tud_task+0x304>)
100039e0:	2b00      	cmp	r3, #0
100039e2:	d100      	bne.n	100039e6 <tud_task+0x12a>
100039e4:	e77b      	b.n	100038de <tud_task+0x22>
100039e6:	4b71      	ldr	r3, [pc, #452]	; (10003bac <tud_task+0x2f0>)
100039e8:	7818      	ldrb	r0, [r3, #0]
100039ea:	0700      	lsls	r0, r0, #28
100039ec:	0fc0      	lsrs	r0, r0, #31
100039ee:	e000      	b.n	100039f2 <tud_task+0x136>
100039f0:	bf00      	nop
100039f2:	e774      	b.n	100038de <tud_task+0x22>
        for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
100039f4:	4d6f      	ldr	r5, [pc, #444]	; (10003bb4 <tud_task+0x2f8>)
100039f6:	4a6e      	ldr	r2, [pc, #440]	; (10003bb0 <tud_task+0x2f4>)
100039f8:	2400      	movs	r4, #0
100039fa:	782b      	ldrb	r3, [r5, #0]
100039fc:	2a00      	cmp	r2, #0
100039fe:	d100      	bne.n	10003a02 <tud_task+0x146>
10003a00:	e099      	b.n	10003b36 <tud_task+0x27a>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
10003a02:	4e70      	ldr	r6, [pc, #448]	; (10003bc4 <tud_task+0x308>)
10003a04:	42a3      	cmp	r3, r4
10003a06:	d809      	bhi.n	10003a1c <tud_task+0x160>
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
10003a08:	42a3      	cmp	r3, r4
10003a0a:	d000      	beq.n	10003a0e <tud_task+0x152>
10003a0c:	e096      	b.n	10003b3c <tud_task+0x280>
        for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
10003a0e:	3401      	adds	r4, #1
10003a10:	b2e4      	uxtb	r4, r4
10003a12:	429c      	cmp	r4, r3
10003a14:	d900      	bls.n	10003a18 <tud_task+0x15c>
10003a16:	e762      	b.n	100038de <tud_task+0x22>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
10003a18:	42a3      	cmp	r3, r4
10003a1a:	d9f5      	bls.n	10003a08 <tud_task+0x14c>
          if ( driver->sof ) driver->sof(event.rhport);
10003a1c:	6831      	ldr	r1, [r6, #0]
10003a1e:	00e2      	lsls	r2, r4, #3
10003a20:	468c      	mov	ip, r1
10003a22:	1b12      	subs	r2, r2, r4
10003a24:	0092      	lsls	r2, r2, #2
10003a26:	4462      	add	r2, ip
10003a28:	6992      	ldr	r2, [r2, #24]
10003a2a:	2a00      	cmp	r2, #0
10003a2c:	d0ef      	beq.n	10003a0e <tud_task+0x152>
10003a2e:	7838      	ldrb	r0, [r7, #0]
10003a30:	4790      	blx	r2
        for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
10003a32:	3401      	adds	r4, #1
10003a34:	782b      	ldrb	r3, [r5, #0]
10003a36:	b2e4      	uxtb	r4, r4
10003a38:	429c      	cmp	r4, r3
10003a3a:	d9e3      	bls.n	10003a04 <tud_task+0x148>
10003a3c:	e74f      	b.n	100038de <tud_task+0x22>
  tu_varclr(&_usbd_dev);
10003a3e:	2237      	movs	r2, #55	; 0x37
10003a40:	2100      	movs	r1, #0
10003a42:	485a      	ldr	r0, [pc, #360]	; (10003bac <tud_task+0x2f0>)
        usbd_reset(event.rhport);
10003a44:	783e      	ldrb	r6, [r7, #0]
  tu_varclr(&_usbd_dev);
10003a46:	f7fc ffa1 	bl	1000098c <__wrap_memset>
  memset(_usbd_dev.itf2drv, DRVID_INVALID, sizeof(_usbd_dev.itf2drv)); // invalid mapping
10003a4a:	2210      	movs	r2, #16
10003a4c:	21ff      	movs	r1, #255	; 0xff
10003a4e:	485e      	ldr	r0, [pc, #376]	; (10003bc8 <tud_task+0x30c>)
10003a50:	f7fc ff9c 	bl	1000098c <__wrap_memset>
  memset(_usbd_dev.ep2drv , DRVID_INVALID, sizeof(_usbd_dev.ep2drv )); // invalid mapping
10003a54:	4855      	ldr	r0, [pc, #340]	; (10003bac <tud_task+0x2f0>)
10003a56:	2212      	movs	r2, #18
10003a58:	21ff      	movs	r1, #255	; 0xff
10003a5a:	3013      	adds	r0, #19
10003a5c:	f7fc ff96 	bl	1000098c <__wrap_memset>
  usbd_control_reset();
10003a60:	f000 fd24 	bl	100044ac <usbd_control_reset>
  for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
10003a64:	4d53      	ldr	r5, [pc, #332]	; (10003bb4 <tud_task+0x2f8>)
10003a66:	4a52      	ldr	r2, [pc, #328]	; (10003bb0 <tud_task+0x2f4>)
10003a68:	2400      	movs	r4, #0
10003a6a:	782b      	ldrb	r3, [r5, #0]
10003a6c:	2a00      	cmp	r2, #0
10003a6e:	d100      	bne.n	10003a72 <tud_task+0x1b6>
10003a70:	e070      	b.n	10003b54 <tud_task+0x298>
10003a72:	4a56      	ldr	r2, [pc, #344]	; (10003bcc <tud_task+0x310>)
10003a74:	4690      	mov	r8, r2
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
10003a76:	4a53      	ldr	r2, [pc, #332]	; (10003bc4 <tud_task+0x308>)
10003a78:	4691      	mov	r9, r2
10003a7a:	42a3      	cmp	r3, r4
10003a7c:	d845      	bhi.n	10003b0a <tud_task+0x24e>
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
10003a7e:	d166      	bne.n	10003b4e <tud_task+0x292>
10003a80:	4643      	mov	r3, r8
    get_driver(i)->reset(rhport);
10003a82:	0030      	movs	r0, r6
10003a84:	4798      	blx	r3
  for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
10003a86:	3401      	adds	r4, #1
10003a88:	782b      	ldrb	r3, [r5, #0]
10003a8a:	b2e4      	uxtb	r4, r4
10003a8c:	42a3      	cmp	r3, r4
10003a8e:	d2f4      	bcs.n	10003a7a <tud_task+0x1be>
        if (tud_umount_cb) tud_umount_cb();
10003a90:	4b4f      	ldr	r3, [pc, #316]	; (10003bd0 <tud_task+0x314>)
10003a92:	2b00      	cmp	r3, #0
10003a94:	d100      	bne.n	10003a98 <tud_task+0x1dc>
10003a96:	e722      	b.n	100038de <tud_task+0x22>
10003a98:	e000      	b.n	10003a9c <tud_task+0x1e0>
10003a9a:	bf00      	nop
10003a9c:	e71f      	b.n	100038de <tud_task+0x22>
  tu_varclr(&_usbd_dev);
10003a9e:	4b43      	ldr	r3, [pc, #268]	; (10003bac <tud_task+0x2f0>)
10003aa0:	2237      	movs	r2, #55	; 0x37
10003aa2:	4698      	mov	r8, r3
10003aa4:	2100      	movs	r1, #0
10003aa6:	0018      	movs	r0, r3
        usbd_reset(event.rhport);
10003aa8:	783e      	ldrb	r6, [r7, #0]
  tu_varclr(&_usbd_dev);
10003aaa:	f7fc ff6f 	bl	1000098c <__wrap_memset>
  memset(_usbd_dev.itf2drv, DRVID_INVALID, sizeof(_usbd_dev.itf2drv)); // invalid mapping
10003aae:	4643      	mov	r3, r8
10003ab0:	2210      	movs	r2, #16
10003ab2:	1cd8      	adds	r0, r3, #3
10003ab4:	21ff      	movs	r1, #255	; 0xff
10003ab6:	f7fc ff69 	bl	1000098c <__wrap_memset>
  memset(_usbd_dev.ep2drv , DRVID_INVALID, sizeof(_usbd_dev.ep2drv )); // invalid mapping
10003aba:	4640      	mov	r0, r8
10003abc:	2212      	movs	r2, #18
10003abe:	21ff      	movs	r1, #255	; 0xff
10003ac0:	3013      	adds	r0, #19
10003ac2:	f7fc ff63 	bl	1000098c <__wrap_memset>
  usbd_control_reset();
10003ac6:	f000 fcf1 	bl	100044ac <usbd_control_reset>
  for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
10003aca:	4d3a      	ldr	r5, [pc, #232]	; (10003bb4 <tud_task+0x2f8>)
10003acc:	4a38      	ldr	r2, [pc, #224]	; (10003bb0 <tud_task+0x2f4>)
10003ace:	2400      	movs	r4, #0
10003ad0:	782b      	ldrb	r3, [r5, #0]
10003ad2:	2a00      	cmp	r2, #0
10003ad4:	d035      	beq.n	10003b42 <tud_task+0x286>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
10003ad6:	4a3b      	ldr	r2, [pc, #236]	; (10003bc4 <tud_task+0x308>)
10003ad8:	4691      	mov	r9, r2
10003ada:	429c      	cmp	r4, r3
10003adc:	d30c      	bcc.n	10003af8 <tud_task+0x23c>
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
10003ade:	d136      	bne.n	10003b4e <tud_task+0x292>
10003ae0:	4b3a      	ldr	r3, [pc, #232]	; (10003bcc <tud_task+0x310>)
    get_driver(i)->reset(rhport);
10003ae2:	0030      	movs	r0, r6
10003ae4:	4798      	blx	r3
  for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
10003ae6:	3401      	adds	r4, #1
10003ae8:	782b      	ldrb	r3, [r5, #0]
10003aea:	b2e4      	uxtb	r4, r4
10003aec:	42a3      	cmp	r3, r4
10003aee:	d2f4      	bcs.n	10003ada <tud_task+0x21e>
        _usbd_dev.speed = event.bus_reset.speed;
10003af0:	4642      	mov	r2, r8
10003af2:	793b      	ldrb	r3, [r7, #4]
10003af4:	7093      	strb	r3, [r2, #2]
      break;
10003af6:	e6f2      	b.n	100038de <tud_task+0x22>
    get_driver(i)->reset(rhport);
10003af8:	464a      	mov	r2, r9
10003afa:	6812      	ldr	r2, [r2, #0]
10003afc:	00e3      	lsls	r3, r4, #3
10003afe:	4694      	mov	ip, r2
10003b00:	1b1b      	subs	r3, r3, r4
10003b02:	009b      	lsls	r3, r3, #2
10003b04:	4463      	add	r3, ip
10003b06:	685b      	ldr	r3, [r3, #4]
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
10003b08:	e7eb      	b.n	10003ae2 <tud_task+0x226>
    get_driver(i)->reset(rhport);
10003b0a:	464a      	mov	r2, r9
10003b0c:	6812      	ldr	r2, [r2, #0]
10003b0e:	00e3      	lsls	r3, r4, #3
10003b10:	4694      	mov	ip, r2
10003b12:	1b1b      	subs	r3, r3, r4
10003b14:	009b      	lsls	r3, r3, #2
10003b16:	4463      	add	r3, ip
10003b18:	685b      	ldr	r3, [r3, #4]
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
10003b1a:	e7b2      	b.n	10003a82 <tud_task+0x1c6>
}
10003b1c:	b00b      	add	sp, #44	; 0x2c
10003b1e:	bcf0      	pop	{r4, r5, r6, r7}
10003b20:	46bb      	mov	fp, r7
10003b22:	46b2      	mov	sl, r6
10003b24:	46a9      	mov	r9, r5
10003b26:	46a0      	mov	r8, r4
10003b28:	bdf0      	pop	{r4, r5, r6, r7, pc}
          usbd_control_xfer_cb(event.rhport, ep_addr, (xfer_result_t)event.xfer_complete.result, event.xfer_complete.len);
10003b2a:	797a      	ldrb	r2, [r7, #5]
10003b2c:	7838      	ldrb	r0, [r7, #0]
10003b2e:	68bb      	ldr	r3, [r7, #8]
10003b30:	f000 fcda 	bl	100044e8 <usbd_control_xfer_cb>
10003b34:	e6d3      	b.n	100038de <tud_task+0x22>
        for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
10003b36:	2b00      	cmp	r3, #0
10003b38:	d100      	bne.n	10003b3c <tud_task+0x280>
10003b3a:	e6d0      	b.n	100038de <tud_task+0x22>
          if ( driver->sof ) driver->sof(event.rhport);
10003b3c:	2300      	movs	r3, #0
10003b3e:	699b      	ldr	r3, [r3, #24]
10003b40:	deff      	udf	#255	; 0xff
    get_driver(i)->reset(rhport);
10003b42:	0030      	movs	r0, r6
10003b44:	f7ff facc 	bl	100030e0 <cdcd_reset>
  for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
10003b48:	782b      	ldrb	r3, [r5, #0]
10003b4a:	2b00      	cmp	r3, #0
10003b4c:	d0d0      	beq.n	10003af0 <tud_task+0x234>
    get_driver(i)->reset(rhport);
10003b4e:	2300      	movs	r3, #0
10003b50:	685b      	ldr	r3, [r3, #4]
10003b52:	deff      	udf	#255	; 0xff
10003b54:	0030      	movs	r0, r6
10003b56:	f7ff fac3 	bl	100030e0 <cdcd_reset>
  for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
10003b5a:	782b      	ldrb	r3, [r5, #0]
10003b5c:	2b00      	cmp	r3, #0
10003b5e:	d097      	beq.n	10003a90 <tud_task+0x1d4>
10003b60:	e7f5      	b.n	10003b4e <tud_task+0x292>
    TU_VERIFY(tud_vendor_control_request_cb);
10003b62:	4b1c      	ldr	r3, [pc, #112]	; (10003bd4 <tud_task+0x318>)
10003b64:	2b00      	cmp	r3, #0
10003b66:	d100      	bne.n	10003b6a <tud_task+0x2ae>
10003b68:	e72a      	b.n	100039c0 <tud_task+0x104>
    if (tud_vendor_control_complete_cb) usbd_control_set_complete_callback(tud_vendor_control_complete_cb);
10003b6a:	481b      	ldr	r0, [pc, #108]	; (10003bd8 <tud_task+0x31c>)
10003b6c:	2800      	cmp	r0, #0
10003b6e:	d001      	beq.n	10003b74 <tud_task+0x2b8>
10003b70:	f000 fca6 	bl	100044c0 <usbd_control_set_complete_callback>
    return tud_vendor_control_request_cb(rhport, p_request);
10003b74:	4648      	mov	r0, r9
10003b76:	a908      	add	r1, sp, #32
10003b78:	e000      	b.n	10003b7c <tud_task+0x2c0>
10003b7a:	bf00      	nop
10003b7c:	0004      	movs	r4, r0
        if ( !process_control_request(event.rhport, &event.setup_received) )
10003b7e:	2c00      	cmp	r4, #0
10003b80:	d000      	beq.n	10003b84 <tud_task+0x2c8>
10003b82:	e6ac      	b.n	100038de <tud_task+0x22>
10003b84:	e71c      	b.n	100039c0 <tud_task+0x104>
  {
    //------------- Device Requests e.g in enumeration -------------//
    case TUSB_REQ_RCPT_DEVICE:
      if ( TUSB_REQ_TYPE_CLASS == p_request->bmRequestType_bit.type )
10003b86:	2b20      	cmp	r3, #32
10003b88:	d100      	bne.n	10003b8c <tud_task+0x2d0>
10003b8a:	e09b      	b.n	10003cc4 <tud_task+0x408>
        TU_VERIFY(driver);

        // forward to class driver: "non-STD request to Interface"
        return invoke_class_control(rhport, driver, p_request);
      }
      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type )
10003b8c:	2b00      	cmp	r3, #0
10003b8e:	d000      	beq.n	10003b92 <tud_task+0x2d6>
10003b90:	e716      	b.n	100039c0 <tud_task+0x104>
        // Non standard request is not supported
        TU_BREAKPOINT();
        return false;
      }

      switch ( p_request->bRequest )
10003b92:	797b      	ldrb	r3, [r7, #5]
10003b94:	2b09      	cmp	r3, #9
10003b96:	d900      	bls.n	10003b9a <tud_task+0x2de>
10003b98:	e712      	b.n	100039c0 <tud_task+0x104>
10003b9a:	4a10      	ldr	r2, [pc, #64]	; (10003bdc <tud_task+0x320>)
10003b9c:	009b      	lsls	r3, r3, #2
10003b9e:	58d3      	ldr	r3, [r2, r3]
10003ba0:	469f      	mov	pc, r3
10003ba2:	46c0      	nop			; (mov r8, r8)
10003ba4:	20011e64 	.word	0x20011e64
10003ba8:	1000e4d0 	.word	0x1000e4d0
10003bac:	20011e28 	.word	0x20011e28
10003bb0:	00000000 	.word	0x00000000
10003bb4:	20012771 	.word	0x20012771
10003bb8:	1000329d 	.word	0x1000329d
	...
10003bc4:	20011af8 	.word	0x20011af8
10003bc8:	20011e2b 	.word	0x20011e2b
10003bcc:	100030e1 	.word	0x100030e1
	...
10003bdc:	1000e4f4 	.word	0x1000e4f4
10003be0:	227f      	movs	r2, #127	; 0x7f
static inline uint8_t tu_u16_low (uint16_t u16) { return (uint8_t) (u16 & 0x00ff); }
10003be2:	7a39      	ldrb	r1, [r7, #8]
10003be4:	400a      	ands	r2, r1
10003be6:	9202      	str	r2, [sp, #8]
    {
      uint8_t const ep_addr = tu_u16_low(p_request->wIndex);
      uint8_t const ep_num  = tu_edpt_number(ep_addr);
      uint8_t const ep_dir  = tu_edpt_dir(ep_addr);

      TU_ASSERT(ep_num < TU_ARRAY_SIZE(_usbd_dev.ep2drv) );
10003be8:	2a08      	cmp	r2, #8
10003bea:	d900      	bls.n	10003bee <tud_task+0x332>
10003bec:	e6e8      	b.n	100039c0 <tud_task+0x104>
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
10003bee:	09c8      	lsrs	r0, r1, #7
10003bf0:	9001      	str	r0, [sp, #4]

      bool ret = false;

      // Handle STD request to endpoint
      if ( TUSB_REQ_TYPE_STANDARD == p_request->bmRequestType_bit.type )
10003bf2:	2b00      	cmp	r3, #0
10003bf4:	d100      	bne.n	10003bf8 <tud_task+0x33c>
10003bf6:	e082      	b.n	10003cfe <tud_task+0x442>
      bool ret = false;
10003bf8:	2400      	movs	r4, #0
10003bfa:	0053      	lsls	r3, r2, #1
10003bfc:	9302      	str	r3, [sp, #8]
          // Unknown/Unsupported request
          default: TU_BREAKPOINT(); return false;
        }
      }

      usbd_class_driver_t const * driver = get_driver(_usbd_dev.ep2drv[ep_num][ep_dir]);
10003bfe:	9a01      	ldr	r2, [sp, #4]
10003c00:	9b02      	ldr	r3, [sp, #8]
10003c02:	4694      	mov	ip, r2
10003c04:	4443      	add	r3, r8
  if ( usbd_app_driver_get_cb )
10003c06:	4ac9      	ldr	r2, [pc, #804]	; (10003f2c <tud_task+0x670>)
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.ep2drv[ep_num][ep_dir]);
10003c08:	4463      	add	r3, ip
10003c0a:	7cdb      	ldrb	r3, [r3, #19]
  if ( usbd_app_driver_get_cb )
10003c0c:	2a00      	cmp	r2, #0
10003c0e:	d006      	beq.n	10003c1e <tud_task+0x362>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
10003c10:	4ac7      	ldr	r2, [pc, #796]	; (10003f30 <tud_task+0x674>)
10003c12:	7812      	ldrb	r2, [r2, #0]
10003c14:	4293      	cmp	r3, r2
10003c16:	d200      	bcs.n	10003c1a <tud_task+0x35e>
10003c18:	e100      	b.n	10003e1c <tud_task+0x560>
    drvid -= _app_driver_count;
10003c1a:	1a9b      	subs	r3, r3, r2
10003c1c:	b2db      	uxtb	r3, r3
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
10003c1e:	2b00      	cmp	r3, #0
10003c20:	d000      	beq.n	10003c24 <tud_task+0x368>
10003c22:	e0f2      	b.n	10003e0a <tud_task+0x54e>
10003c24:	48c3      	ldr	r0, [pc, #780]	; (10003f34 <tud_task+0x678>)
10003c26:	4dc4      	ldr	r5, [pc, #784]	; (10003f38 <tud_task+0x67c>)
  usbd_control_set_complete_callback(driver->control_complete);
10003c28:	f000 fc4a 	bl	100044c0 <usbd_control_set_complete_callback>
  return driver->control_request(rhport, request);
10003c2c:	4648      	mov	r0, r9
10003c2e:	68eb      	ldr	r3, [r5, #12]
10003c30:	a908      	add	r1, sp, #32
10003c32:	4798      	blx	r3
        // We will forward all request targeted endpoint to class drivers after
        // - For class-type requests: driver is fully responsible to reply to host
        // - For std-type requests  : driver init/re-init internal variable/buffer only, and
        //                            must not call tud_control_status(), driver's return value will have no effect.
        //                            EP state has already affected (stalled/cleared)
        if ( invoke_class_control(rhport, driver, p_request) ) ret = true;
10003c34:	2800      	cmp	r0, #0
10003c36:	d100      	bne.n	10003c3a <tud_task+0x37e>
10003c38:	e0e7      	b.n	10003e0a <tud_task+0x54e>
      }

      if ( TUSB_REQ_TYPE_STANDARD == p_request->bmRequestType_bit.type )
10003c3a:	2260      	movs	r2, #96	; 0x60
10003c3c:	793b      	ldrb	r3, [r7, #4]
10003c3e:	421a      	tst	r2, r3
10003c40:	d000      	beq.n	10003c44 <tud_task+0x388>
10003c42:	e64c      	b.n	100038de <tud_task+0x22>
      {
        // Set complete callback = NULL since it can also stall the request.
        usbd_control_set_complete_callback(NULL);
10003c44:	2000      	movs	r0, #0
10003c46:	f000 fc3b 	bl	100044c0 <usbd_control_set_complete_callback>
10003c4a:	e648      	b.n	100038de <tud_task+0x22>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
10003c4c:	00da      	lsls	r2, r3, #3
10003c4e:	1ad3      	subs	r3, r2, r3
10003c50:	4aba      	ldr	r2, [pc, #744]	; (10003f3c <tud_task+0x680>)
10003c52:	009b      	lsls	r3, r3, #2
10003c54:	6812      	ldr	r2, [r2, #0]
10003c56:	18d3      	adds	r3, r2, r3
          TU_ASSERT(driver, );
10003c58:	2b00      	cmp	r3, #0
10003c5a:	d100      	bne.n	10003c5e <tud_task+0x3a2>
10003c5c:	e75e      	b.n	10003b1c <tud_task+0x260>
          driver->xfer_cb(event.rhport, ep_addr, event.xfer_complete.result, event.xfer_complete.len);
10003c5e:	695c      	ldr	r4, [r3, #20]
10003c60:	e68a      	b.n	10003978 <tud_task+0xbc>
10003c62:	7a3b      	ldrb	r3, [r7, #8]
      TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
10003c64:	2b0f      	cmp	r3, #15
10003c66:	d900      	bls.n	10003c6a <tud_task+0x3ae>
10003c68:	e6aa      	b.n	100039c0 <tud_task+0x104>
  if ( usbd_app_driver_get_cb )
10003c6a:	4ab0      	ldr	r2, [pc, #704]	; (10003f2c <tud_task+0x670>)
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
10003c6c:	4443      	add	r3, r8
10003c6e:	78db      	ldrb	r3, [r3, #3]
  if ( usbd_app_driver_get_cb )
10003c70:	2a00      	cmp	r2, #0
10003c72:	d005      	beq.n	10003c80 <tud_task+0x3c4>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
10003c74:	4aae      	ldr	r2, [pc, #696]	; (10003f30 <tud_task+0x674>)
10003c76:	7812      	ldrb	r2, [r2, #0]
10003c78:	4293      	cmp	r3, r2
10003c7a:	d35e      	bcc.n	10003d3a <tud_task+0x47e>
    drvid -= _app_driver_count;
10003c7c:	1a9b      	subs	r3, r3, r2
10003c7e:	b2db      	uxtb	r3, r3
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
10003c80:	2b00      	cmp	r3, #0
10003c82:	d000      	beq.n	10003c86 <tud_task+0x3ca>
10003c84:	e69c      	b.n	100039c0 <tud_task+0x104>
10003c86:	48ab      	ldr	r0, [pc, #684]	; (10003f34 <tud_task+0x678>)
10003c88:	4cab      	ldr	r4, [pc, #684]	; (10003f38 <tud_task+0x67c>)
  usbd_control_set_complete_callback(driver->control_complete);
10003c8a:	f000 fc19 	bl	100044c0 <usbd_control_set_complete_callback>
  return driver->control_request(rhport, request);
10003c8e:	4648      	mov	r0, r9
10003c90:	68e3      	ldr	r3, [r4, #12]
10003c92:	a908      	add	r1, sp, #32
10003c94:	4798      	blx	r3
      if ( !invoke_class_control(rhport, driver, p_request) )
10003c96:	2800      	cmp	r0, #0
10003c98:	d000      	beq.n	10003c9c <tud_task+0x3e0>
10003c9a:	e620      	b.n	100038de <tud_task+0x22>
        TU_VERIFY( TUSB_REQ_TYPE_STANDARD == p_request->bmRequestType_bit.type &&
10003c9c:	2260      	movs	r2, #96	; 0x60
10003c9e:	0011      	movs	r1, r2
10003ca0:	793b      	ldrb	r3, [r7, #4]
10003ca2:	4019      	ands	r1, r3
10003ca4:	421a      	tst	r2, r3
10003ca6:	d000      	beq.n	10003caa <tud_task+0x3ee>
10003ca8:	e68a      	b.n	100039c0 <tud_task+0x104>
10003caa:	797b      	ldrb	r3, [r7, #5]
10003cac:	2b0a      	cmp	r3, #10
10003cae:	d000      	beq.n	10003cb2 <tud_task+0x3f6>
10003cb0:	e686      	b.n	100039c0 <tud_task+0x104>
        uint8_t alternate = 0;
10003cb2:	ab06      	add	r3, sp, #24
10003cb4:	1c9a      	adds	r2, r3, #2
10003cb6:	7011      	strb	r1, [r2, #0]
        tud_control_xfer(rhport, p_request, &alternate, 1);
10003cb8:	2301      	movs	r3, #1
10003cba:	4648      	mov	r0, r9
10003cbc:	a908      	add	r1, sp, #32
10003cbe:	f000 fb97 	bl	100043f0 <tud_control_xfer>
10003cc2:	e60c      	b.n	100038de <tud_task+0x22>
10003cc4:	7a3b      	ldrb	r3, [r7, #8]
        TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
10003cc6:	2b0f      	cmp	r3, #15
10003cc8:	d900      	bls.n	10003ccc <tud_task+0x410>
10003cca:	e679      	b.n	100039c0 <tud_task+0x104>
  if ( usbd_app_driver_get_cb )
10003ccc:	4a97      	ldr	r2, [pc, #604]	; (10003f2c <tud_task+0x670>)
        usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
10003cce:	4443      	add	r3, r8
10003cd0:	78db      	ldrb	r3, [r3, #3]
  if ( usbd_app_driver_get_cb )
10003cd2:	2a00      	cmp	r2, #0
10003cd4:	d006      	beq.n	10003ce4 <tud_task+0x428>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
10003cd6:	4a96      	ldr	r2, [pc, #600]	; (10003f30 <tud_task+0x674>)
10003cd8:	7812      	ldrb	r2, [r2, #0]
10003cda:	4293      	cmp	r3, r2
10003cdc:	d200      	bcs.n	10003ce0 <tud_task+0x424>
10003cde:	e0c7      	b.n	10003e70 <tud_task+0x5b4>
    drvid -= _app_driver_count;
10003ce0:	1a9b      	subs	r3, r3, r2
10003ce2:	b2db      	uxtb	r3, r3
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
10003ce4:	2b00      	cmp	r3, #0
10003ce6:	d000      	beq.n	10003cea <tud_task+0x42e>
10003ce8:	e66a      	b.n	100039c0 <tud_task+0x104>
10003cea:	4892      	ldr	r0, [pc, #584]	; (10003f34 <tud_task+0x678>)
10003cec:	4c92      	ldr	r4, [pc, #584]	; (10003f38 <tud_task+0x67c>)
  usbd_control_set_complete_callback(driver->control_complete);
10003cee:	f000 fbe7 	bl	100044c0 <usbd_control_set_complete_callback>
  return driver->control_request(rhport, request);
10003cf2:	68e3      	ldr	r3, [r4, #12]
10003cf4:	4648      	mov	r0, r9
10003cf6:	a908      	add	r1, sp, #32
10003cf8:	4798      	blx	r3
10003cfa:	0004      	movs	r4, r0
        return invoke_class_control(rhport, driver, p_request);
10003cfc:	e73f      	b.n	10003b7e <tud_task+0x2c2>
        switch ( p_request->bRequest )
10003cfe:	797b      	ldrb	r3, [r7, #5]
10003d00:	9303      	str	r3, [sp, #12]
10003d02:	2b01      	cmp	r3, #1
10003d04:	d100      	bne.n	10003d08 <tud_task+0x44c>
10003d06:	e09d      	b.n	10003e44 <tud_task+0x588>
10003d08:	2b03      	cmp	r3, #3
10003d0a:	d100      	bne.n	10003d0e <tud_task+0x452>
10003d0c:	e090      	b.n	10003e30 <tud_task+0x574>
10003d0e:	2b00      	cmp	r3, #0
10003d10:	d000      	beq.n	10003d14 <tud_task+0x458>
10003d12:	e655      	b.n	100039c0 <tud_task+0x104>
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
  uint8_t const dir   = tu_edpt_dir(ep_addr);

  return _usbd_dev.ep_status[epnum][dir].stalled;
10003d14:	0053      	lsls	r3, r2, #1
10003d16:	9a01      	ldr	r2, [sp, #4]
10003d18:	9302      	str	r3, [sp, #8]
10003d1a:	4694      	mov	ip, r2
10003d1c:	4443      	add	r3, r8
10003d1e:	4463      	add	r3, ip
10003d20:	3320      	adds	r3, #32
10003d22:	795b      	ldrb	r3, [r3, #5]
            uint16_t status = usbd_edpt_stalled(rhport, ep_addr) ? 0x0001 : 0x0000;
10003d24:	aa06      	add	r2, sp, #24
  return _usbd_dev.ep_status[epnum][dir].stalled;
10003d26:	079b      	lsls	r3, r3, #30
10003d28:	0fdb      	lsrs	r3, r3, #31
            uint16_t status = usbd_edpt_stalled(rhport, ep_addr) ? 0x0001 : 0x0000;
10003d2a:	3202      	adds	r2, #2
10003d2c:	8013      	strh	r3, [r2, #0]
            tud_control_xfer(rhport, p_request, &status, 2);
10003d2e:	4648      	mov	r0, r9
10003d30:	2302      	movs	r3, #2
10003d32:	a908      	add	r1, sp, #32
10003d34:	f000 fb5c 	bl	100043f0 <tud_control_xfer>
          break;
10003d38:	e761      	b.n	10003bfe <tud_task+0x342>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
10003d3a:	4a80      	ldr	r2, [pc, #512]	; (10003f3c <tud_task+0x680>)
10003d3c:	00dc      	lsls	r4, r3, #3
10003d3e:	1ae3      	subs	r3, r4, r3
10003d40:	6814      	ldr	r4, [r2, #0]
10003d42:	009b      	lsls	r3, r3, #2
10003d44:	18e4      	adds	r4, r4, r3
      TU_VERIFY(driver);
10003d46:	2c00      	cmp	r4, #0
10003d48:	d100      	bne.n	10003d4c <tud_task+0x490>
10003d4a:	e639      	b.n	100039c0 <tud_task+0x104>
  usbd_control_set_complete_callback(driver->control_complete);
10003d4c:	6920      	ldr	r0, [r4, #16]
10003d4e:	e79c      	b.n	10003c8a <tud_task+0x3ce>
          TU_VERIFY(TUSB_REQ_FEATURE_REMOTE_WAKEUP == p_request->wValue);
10003d50:	88fb      	ldrh	r3, [r7, #6]
10003d52:	2b01      	cmp	r3, #1
10003d54:	d000      	beq.n	10003d58 <tud_task+0x49c>
10003d56:	e633      	b.n	100039c0 <tud_task+0x104>
          _usbd_dev.remote_wakeup_en = false;
10003d58:	4643      	mov	r3, r8
10003d5a:	2208      	movs	r2, #8
10003d5c:	781b      	ldrb	r3, [r3, #0]
10003d5e:	4393      	bics	r3, r2
10003d60:	4642      	mov	r2, r8
          tud_control_status(rhport, p_request);
10003d62:	4648      	mov	r0, r9
10003d64:	a908      	add	r1, sp, #32
          _usbd_dev.remote_wakeup_en = false;
10003d66:	7013      	strb	r3, [r2, #0]
          tud_control_status(rhport, p_request);
10003d68:	f000 fb2a 	bl	100043c0 <tud_control_status>
        break;
10003d6c:	e5b7      	b.n	100038de <tud_task+0x22>
          uint16_t status = (_usbd_dev.self_powered ? 1 : 0) | (_usbd_dev.remote_wakeup_en ? 2 : 0);
10003d6e:	4643      	mov	r3, r8
10003d70:	2002      	movs	r0, #2
10003d72:	7819      	ldrb	r1, [r3, #0]
10003d74:	ab06      	add	r3, sp, #24
10003d76:	1c9a      	adds	r2, r3, #2
10003d78:	068b      	lsls	r3, r1, #26
10003d7a:	0889      	lsrs	r1, r1, #2
10003d7c:	4001      	ands	r1, r0
10003d7e:	0fdb      	lsrs	r3, r3, #31
10003d80:	430b      	orrs	r3, r1
10003d82:	8013      	strh	r3, [r2, #0]
          tud_control_xfer(rhport, p_request, &status, 2);
10003d84:	4648      	mov	r0, r9
10003d86:	2302      	movs	r3, #2
10003d88:	a908      	add	r1, sp, #32
10003d8a:	f000 fb31 	bl	100043f0 <tud_control_xfer>
        break;
10003d8e:	e5a6      	b.n	100038de <tud_task+0x22>
          if ( !_usbd_dev.cfg_num && cfg_num ) TU_ASSERT( process_set_config(rhport, cfg_num) );
10003d90:	4643      	mov	r3, r8
          uint8_t const cfg_num = (uint8_t) p_request->wValue;
10003d92:	79ba      	ldrb	r2, [r7, #6]
10003d94:	9203      	str	r2, [sp, #12]
          if ( !_usbd_dev.cfg_num && cfg_num ) TU_ASSERT( process_set_config(rhport, cfg_num) );
10003d96:	785b      	ldrb	r3, [r3, #1]
10003d98:	2b00      	cmp	r3, #0
10003d9a:	d102      	bne.n	10003da2 <tud_task+0x4e6>
10003d9c:	2a00      	cmp	r2, #0
10003d9e:	d000      	beq.n	10003da2 <tud_task+0x4e6>
10003da0:	e084      	b.n	10003eac <tud_task+0x5f0>
          _usbd_dev.cfg_num = cfg_num;
10003da2:	4643      	mov	r3, r8
10003da4:	9a03      	ldr	r2, [sp, #12]
          tud_control_status(rhport, p_request);
10003da6:	4648      	mov	r0, r9
10003da8:	a908      	add	r1, sp, #32
          _usbd_dev.cfg_num = cfg_num;
10003daa:	705a      	strb	r2, [r3, #1]
          tud_control_status(rhport, p_request);
10003dac:	f000 fb08 	bl	100043c0 <tud_control_status>
        break;
10003db0:	e595      	b.n	100038de <tud_task+0x22>
          uint8_t cfg_num = _usbd_dev.cfg_num;
10003db2:	4643      	mov	r3, r8
10003db4:	aa06      	add	r2, sp, #24
10003db6:	785b      	ldrb	r3, [r3, #1]
10003db8:	3202      	adds	r2, #2
10003dba:	7013      	strb	r3, [r2, #0]
          tud_control_xfer(rhport, p_request, &cfg_num, 1);
10003dbc:	4648      	mov	r0, r9
10003dbe:	2301      	movs	r3, #1
10003dc0:	a908      	add	r1, sp, #32
10003dc2:	f000 fb15 	bl	100043f0 <tud_control_xfer>
        break;
10003dc6:	e58a      	b.n	100038de <tud_task+0x22>
  tusb_desc_type_t const desc_type = (tusb_desc_type_t) tu_u16_high(p_request->wValue);
10003dc8:	88fb      	ldrh	r3, [r7, #6]
10003dca:	79b8      	ldrb	r0, [r7, #6]
  switch(desc_type)
10003dcc:	0a1b      	lsrs	r3, r3, #8
10003dce:	2b0f      	cmp	r3, #15
10003dd0:	d900      	bls.n	10003dd4 <tud_task+0x518>
10003dd2:	e5f5      	b.n	100039c0 <tud_task+0x104>
10003dd4:	4a5a      	ldr	r2, [pc, #360]	; (10003f40 <tud_task+0x684>)
10003dd6:	009b      	lsls	r3, r3, #2
10003dd8:	58d3      	ldr	r3, [r2, r3]
10003dda:	469f      	mov	pc, r3
          usbd_control_set_request(p_request); // set request since DCD has no access to tud_control_status() API
10003ddc:	a808      	add	r0, sp, #32
10003dde:	f000 fb75 	bl	100044cc <usbd_control_set_request>
          dcd_set_address(rhport, (uint8_t) p_request->wValue);
10003de2:	4648      	mov	r0, r9
10003de4:	79b9      	ldrb	r1, [r7, #6]
10003de6:	f000 fc95 	bl	10004714 <dcd_set_address>
          _usbd_dev.addressed = 1;
10003dea:	4643      	mov	r3, r8
10003dec:	2202      	movs	r2, #2
10003dee:	781b      	ldrb	r3, [r3, #0]
10003df0:	4313      	orrs	r3, r2
10003df2:	4642      	mov	r2, r8
10003df4:	7013      	strb	r3, [r2, #0]
        break;
10003df6:	e572      	b.n	100038de <tud_task+0x22>
          TU_VERIFY(TUSB_REQ_FEATURE_REMOTE_WAKEUP == p_request->wValue);
10003df8:	88fb      	ldrh	r3, [r7, #6]
10003dfa:	2b01      	cmp	r3, #1
10003dfc:	d000      	beq.n	10003e00 <tud_task+0x544>
10003dfe:	e5df      	b.n	100039c0 <tud_task+0x104>
          _usbd_dev.remote_wakeup_en = true;
10003e00:	4643      	mov	r3, r8
10003e02:	2208      	movs	r2, #8
10003e04:	781b      	ldrb	r3, [r3, #0]
10003e06:	4313      	orrs	r3, r2
10003e08:	e7aa      	b.n	10003d60 <tud_task+0x4a4>
      if ( TUSB_REQ_TYPE_STANDARD == p_request->bmRequestType_bit.type )
10003e0a:	2260      	movs	r2, #96	; 0x60
10003e0c:	793b      	ldrb	r3, [r7, #4]
10003e0e:	421a      	tst	r2, r3
10003e10:	d000      	beq.n	10003e14 <tud_task+0x558>
10003e12:	e6b4      	b.n	10003b7e <tud_task+0x2c2>
        usbd_control_set_complete_callback(NULL);
10003e14:	2000      	movs	r0, #0
10003e16:	f000 fb53 	bl	100044c0 <usbd_control_set_complete_callback>
10003e1a:	e6b0      	b.n	10003b7e <tud_task+0x2c2>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
10003e1c:	4a47      	ldr	r2, [pc, #284]	; (10003f3c <tud_task+0x680>)
10003e1e:	00dd      	lsls	r5, r3, #3
10003e20:	1aeb      	subs	r3, r5, r3
10003e22:	6815      	ldr	r5, [r2, #0]
10003e24:	009b      	lsls	r3, r3, #2
10003e26:	18ed      	adds	r5, r5, r3
      if (driver)
10003e28:	2d00      	cmp	r5, #0
10003e2a:	d0ee      	beq.n	10003e0a <tud_task+0x54e>
  usbd_control_set_complete_callback(driver->control_complete);
10003e2c:	6928      	ldr	r0, [r5, #16]
10003e2e:	e6fb      	b.n	10003c28 <tud_task+0x36c>
            if ( TUSB_REQ_FEATURE_EDPT_HALT == p_request->wValue ) usbd_edpt_stall(rhport, ep_addr);
10003e30:	88fb      	ldrh	r3, [r7, #6]
10003e32:	2b00      	cmp	r3, #0
10003e34:	d027      	beq.n	10003e86 <tud_task+0x5ca>
10003e36:	0053      	lsls	r3, r2, #1
10003e38:	9302      	str	r3, [sp, #8]
            tud_control_status(rhport, p_request);
10003e3a:	4648      	mov	r0, r9
10003e3c:	a908      	add	r1, sp, #32
10003e3e:	f000 fabf 	bl	100043c0 <tud_control_status>
          break;
10003e42:	e6dc      	b.n	10003bfe <tud_task+0x342>
            if ( TUSB_REQ_FEATURE_EDPT_HALT == p_request->wValue ) usbd_edpt_clear_stall(rhport, ep_addr);
10003e44:	88fb      	ldrh	r3, [r7, #6]
10003e46:	2b00      	cmp	r3, #0
10003e48:	d1f5      	bne.n	10003e36 <tud_task+0x57a>
  dcd_edpt_clear_stall(rhport, ep_addr);
10003e4a:	4648      	mov	r0, r9
10003e4c:	f000 fdd4 	bl	100049f8 <dcd_edpt_clear_stall>
  _usbd_dev.ep_status[epnum][dir].stalled = false;
10003e50:	9a01      	ldr	r2, [sp, #4]
10003e52:	9b02      	ldr	r3, [sp, #8]
10003e54:	4694      	mov	ip, r2
10003e56:	005b      	lsls	r3, r3, #1
10003e58:	9302      	str	r3, [sp, #8]
10003e5a:	4443      	add	r3, r8
10003e5c:	4463      	add	r3, ip
10003e5e:	3320      	adds	r3, #32
10003e60:	795a      	ldrb	r2, [r3, #5]
  _usbd_dev.ep_status[epnum][dir].busy = false;
10003e62:	9903      	ldr	r1, [sp, #12]
  _usbd_dev.ep_status[epnum][dir].stalled = false;
10003e64:	43aa      	bics	r2, r5
10003e66:	715a      	strb	r2, [r3, #5]
  _usbd_dev.ep_status[epnum][dir].busy = false;
10003e68:	795a      	ldrb	r2, [r3, #5]
10003e6a:	438a      	bics	r2, r1
10003e6c:	715a      	strb	r2, [r3, #5]
}
10003e6e:	e7e4      	b.n	10003e3a <tud_task+0x57e>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
10003e70:	4a32      	ldr	r2, [pc, #200]	; (10003f3c <tud_task+0x680>)
10003e72:	00dc      	lsls	r4, r3, #3
10003e74:	1ae3      	subs	r3, r4, r3
10003e76:	6814      	ldr	r4, [r2, #0]
10003e78:	009b      	lsls	r3, r3, #2
10003e7a:	18e4      	adds	r4, r4, r3
        TU_VERIFY(driver);
10003e7c:	2c00      	cmp	r4, #0
10003e7e:	d100      	bne.n	10003e82 <tud_task+0x5c6>
10003e80:	e59e      	b.n	100039c0 <tud_task+0x104>
  usbd_control_set_complete_callback(driver->control_complete);
10003e82:	6920      	ldr	r0, [r4, #16]
10003e84:	e733      	b.n	10003cee <tud_task+0x432>
  dcd_edpt_stall(rhport, ep_addr);
10003e86:	4648      	mov	r0, r9
10003e88:	f000 fd8e 	bl	100049a8 <dcd_edpt_stall>
  _usbd_dev.ep_status[epnum][dir].stalled = true;
10003e8c:	9a01      	ldr	r2, [sp, #4]
10003e8e:	2102      	movs	r1, #2
10003e90:	4694      	mov	ip, r2
10003e92:	9b02      	ldr	r3, [sp, #8]
10003e94:	005b      	lsls	r3, r3, #1
10003e96:	9302      	str	r3, [sp, #8]
10003e98:	4443      	add	r3, r8
10003e9a:	4463      	add	r3, ip
10003e9c:	3320      	adds	r3, #32
10003e9e:	795a      	ldrb	r2, [r3, #5]
10003ea0:	430a      	orrs	r2, r1
10003ea2:	715a      	strb	r2, [r3, #5]
  _usbd_dev.ep_status[epnum][dir].busy = true;
10003ea4:	795a      	ldrb	r2, [r3, #5]
10003ea6:	4316      	orrs	r6, r2
10003ea8:	715e      	strb	r6, [r3, #5]
}
10003eaa:	e7c6      	b.n	10003e3a <tud_task+0x57e>
  tusb_desc_configuration_t const * desc_cfg = (tusb_desc_configuration_t const *) tud_descriptor_configuration_cb(cfg_num-1); // index is cfg_num-1
10003eac:	1e50      	subs	r0, r2, #1
10003eae:	b2c0      	uxtb	r0, r0
10003eb0:	f7fe fa06 	bl	100022c0 <tud_descriptor_configuration_cb>
  TU_ASSERT(desc_cfg != NULL && desc_cfg->bDescriptorType == TUSB_DESC_CONFIGURATION);
10003eb4:	2800      	cmp	r0, #0
10003eb6:	d100      	bne.n	10003eba <tud_task+0x5fe>
10003eb8:	e582      	b.n	100039c0 <tud_task+0x104>
10003eba:	7843      	ldrb	r3, [r0, #1]
10003ebc:	2b02      	cmp	r3, #2
10003ebe:	d000      	beq.n	10003ec2 <tud_task+0x606>
10003ec0:	e57e      	b.n	100039c0 <tud_task+0x104>
  _usbd_dev.remote_wakeup_support = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_REMOTE_WAKEUP) ? 1 : 0;
10003ec2:	2101      	movs	r1, #1
10003ec4:	79c2      	ldrb	r2, [r0, #7]
  uint8_t const * p_desc   = ((uint8_t const*) desc_cfg) + sizeof(tusb_desc_configuration_t);
10003ec6:	0005      	movs	r5, r0
  _usbd_dev.self_powered = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_SELF_POWERED) ? 1 : 0;
10003ec8:	1193      	asrs	r3, r2, #6
  _usbd_dev.remote_wakeup_support = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_REMOTE_WAKEUP) ? 1 : 0;
10003eca:	1152      	asrs	r2, r2, #5
10003ecc:	400b      	ands	r3, r1
10003ece:	400a      	ands	r2, r1
10003ed0:	0112      	lsls	r2, r2, #4
10003ed2:	015b      	lsls	r3, r3, #5
10003ed4:	4313      	orrs	r3, r2
10003ed6:	4642      	mov	r2, r8
10003ed8:	7812      	ldrb	r2, [r2, #0]
10003eda:	312f      	adds	r1, #47	; 0x2f
10003edc:	438a      	bics	r2, r1
10003ede:	4313      	orrs	r3, r2
10003ee0:	4642      	mov	r2, r8
10003ee2:	7013      	strb	r3, [r2, #0]
  uint8_t const * desc_end = ((uint8_t const*) desc_cfg) + desc_cfg->wTotalLength;
10003ee4:	78c3      	ldrb	r3, [r0, #3]
10003ee6:	7882      	ldrb	r2, [r0, #2]
10003ee8:	021b      	lsls	r3, r3, #8
10003eea:	4313      	orrs	r3, r2
10003eec:	18c3      	adds	r3, r0, r3
  uint8_t const * p_desc   = ((uint8_t const*) desc_cfg) + sizeof(tusb_desc_configuration_t);
10003eee:	3509      	adds	r5, #9
  uint8_t const * desc_end = ((uint8_t const*) desc_cfg) + desc_cfg->wTotalLength;
10003ef0:	9304      	str	r3, [sp, #16]
  while( p_desc < desc_end )
10003ef2:	9b04      	ldr	r3, [sp, #16]
10003ef4:	42ab      	cmp	r3, r5
10003ef6:	d800      	bhi.n	10003efa <tud_task+0x63e>
10003ef8:	e0cf      	b.n	1000409a <tud_task+0x7de>
    tusb_desc_interface_assoc_t const * desc_itf_assoc = NULL;
10003efa:	2300      	movs	r3, #0
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
10003efc:	786a      	ldrb	r2, [r5, #1]
10003efe:	9302      	str	r3, [sp, #8]
    if ( TUSB_DESC_INTERFACE_ASSOCIATION == tu_desc_type(p_desc) )
10003f00:	2a0b      	cmp	r2, #11
10003f02:	d104      	bne.n	10003f0e <tud_task+0x652>
  return desc8 + desc8[DESC_OFFSET_LEN];
10003f04:	782b      	ldrb	r3, [r5, #0]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
10003f06:	9502      	str	r5, [sp, #8]
  return desc8 + desc8[DESC_OFFSET_LEN];
10003f08:	18eb      	adds	r3, r5, r3
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
10003f0a:	001d      	movs	r5, r3
10003f0c:	785a      	ldrb	r2, [r3, #1]
    TU_ASSERT( TUSB_DESC_INTERFACE == tu_desc_type(p_desc) );
10003f0e:	2a04      	cmp	r2, #4
10003f10:	d000      	beq.n	10003f14 <tud_task+0x658>
10003f12:	e555      	b.n	100039c0 <tud_task+0x104>
    uint16_t const remaining_len = desc_end-p_desc;
10003f14:	9b04      	ldr	r3, [sp, #16]
10003f16:	4a05      	ldr	r2, [pc, #20]	; (10003f2c <tud_task+0x670>)
10003f18:	1b5b      	subs	r3, r3, r5
10003f1a:	b29b      	uxth	r3, r3
10003f1c:	9301      	str	r3, [sp, #4]
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
10003f1e:	4b04      	ldr	r3, [pc, #16]	; (10003f30 <tud_task+0x674>)
10003f20:	2400      	movs	r4, #0
10003f22:	781b      	ldrb	r3, [r3, #0]
10003f24:	2a00      	cmp	r2, #0
10003f26:	d11d      	bne.n	10003f64 <tud_task+0x6a8>
10003f28:	e029      	b.n	10003f7e <tud_task+0x6c2>
10003f2a:	46c0      	nop			; (mov r8, r8)
10003f2c:	00000000 	.word	0x00000000
10003f30:	20012771 	.word	0x20012771
10003f34:	100031f1 	.word	0x100031f1
10003f38:	1000e55c 	.word	0x1000e55c
10003f3c:	20011af8 	.word	0x20011af8
10003f40:	1000e51c 	.word	0x1000e51c
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
10003f44:	429c      	cmp	r4, r3
10003f46:	d126      	bne.n	10003f96 <tud_task+0x6da>
10003f48:	4b57      	ldr	r3, [pc, #348]	; (100040a8 <tud_task+0x7ec>)
      uint16_t const drv_len = driver->open(rhport, desc_itf, remaining_len);
10003f4a:	0029      	movs	r1, r5
10003f4c:	4648      	mov	r0, r9
10003f4e:	9a01      	ldr	r2, [sp, #4]
10003f50:	4798      	blx	r3
      if ( drv_len > 0 )
10003f52:	2800      	cmp	r0, #0
10003f54:	d122      	bne.n	10003f9c <tud_task+0x6e0>
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
10003f56:	4b55      	ldr	r3, [pc, #340]	; (100040ac <tud_task+0x7f0>)
10003f58:	3401      	adds	r4, #1
10003f5a:	781b      	ldrb	r3, [r3, #0]
10003f5c:	b2e4      	uxtb	r4, r4
10003f5e:	42a3      	cmp	r3, r4
10003f60:	d200      	bcs.n	10003f64 <tud_task+0x6a8>
10003f62:	e52d      	b.n	100039c0 <tud_task+0x104>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
10003f64:	429c      	cmp	r4, r3
10003f66:	d2ed      	bcs.n	10003f44 <tud_task+0x688>
      uint16_t const drv_len = driver->open(rhport, desc_itf, remaining_len);
10003f68:	4b51      	ldr	r3, [pc, #324]	; (100040b0 <tud_task+0x7f4>)
10003f6a:	681b      	ldr	r3, [r3, #0]
10003f6c:	9305      	str	r3, [sp, #20]
10003f6e:	9a05      	ldr	r2, [sp, #20]
10003f70:	00e3      	lsls	r3, r4, #3
10003f72:	4694      	mov	ip, r2
10003f74:	1b1b      	subs	r3, r3, r4
10003f76:	009b      	lsls	r3, r3, #2
10003f78:	4463      	add	r3, ip
10003f7a:	689b      	ldr	r3, [r3, #8]
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
10003f7c:	e7e5      	b.n	10003f4a <tud_task+0x68e>
      uint16_t const drv_len = driver->open(rhport, desc_itf, remaining_len);
10003f7e:	0029      	movs	r1, r5
10003f80:	4648      	mov	r0, r9
10003f82:	9a01      	ldr	r2, [sp, #4]
10003f84:	f7ff f8be 	bl	10003104 <cdcd_open>
10003f88:	1e06      	subs	r6, r0, #0
      if ( drv_len > 0 )
10003f8a:	d108      	bne.n	10003f9e <tud_task+0x6e2>
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
10003f8c:	4b47      	ldr	r3, [pc, #284]	; (100040ac <tud_task+0x7f0>)
10003f8e:	781b      	ldrb	r3, [r3, #0]
10003f90:	2b00      	cmp	r3, #0
10003f92:	d100      	bne.n	10003f96 <tud_task+0x6da>
10003f94:	e514      	b.n	100039c0 <tud_task+0x104>
      uint16_t const drv_len = driver->open(rhport, desc_itf, remaining_len);
10003f96:	2300      	movs	r3, #0
10003f98:	689b      	ldr	r3, [r3, #8]
10003f9a:	deff      	udf	#255	; 0xff
10003f9c:	0006      	movs	r6, r0
        TU_ASSERT( sizeof(tusb_desc_interface_t) <= drv_len && drv_len <= remaining_len);
10003f9e:	2e08      	cmp	r6, #8
10003fa0:	d800      	bhi.n	10003fa4 <tud_task+0x6e8>
10003fa2:	e50d      	b.n	100039c0 <tud_task+0x104>
10003fa4:	9b01      	ldr	r3, [sp, #4]
10003fa6:	42b3      	cmp	r3, r6
10003fa8:	d200      	bcs.n	10003fac <tud_task+0x6f0>
10003faa:	e509      	b.n	100039c0 <tud_task+0x104>
        TU_ASSERT(DRVID_INVALID == _usbd_dev.itf2drv[desc_itf->bInterfaceNumber]);
10003fac:	4643      	mov	r3, r8
10003fae:	78aa      	ldrb	r2, [r5, #2]
10003fb0:	189b      	adds	r3, r3, r2
10003fb2:	78d9      	ldrb	r1, [r3, #3]
10003fb4:	29ff      	cmp	r1, #255	; 0xff
10003fb6:	d000      	beq.n	10003fba <tud_task+0x6fe>
10003fb8:	e502      	b.n	100039c0 <tud_task+0x104>
        _usbd_dev.itf2drv[desc_itf->bInterfaceNumber] = drv_id;
10003fba:	70dc      	strb	r4, [r3, #3]
        if (desc_itf_assoc)
10003fbc:	9b02      	ldr	r3, [sp, #8]
10003fbe:	2b00      	cmp	r3, #0
10003fc0:	d014      	beq.n	10003fec <tud_task+0x730>
10003fc2:	0018      	movs	r0, r3
          TU_ASSERT(desc_itf_assoc->bFirstInterface == desc_itf->bInterfaceNumber &&
10003fc4:	789b      	ldrb	r3, [r3, #2]
10003fc6:	4293      	cmp	r3, r2
10003fc8:	d000      	beq.n	10003fcc <tud_task+0x710>
10003fca:	e4f9      	b.n	100039c0 <tud_task+0x104>
10003fcc:	7901      	ldrb	r1, [r0, #4]
10003fce:	796a      	ldrb	r2, [r5, #5]
10003fd0:	4291      	cmp	r1, r2
10003fd2:	d000      	beq.n	10003fd6 <tud_task+0x71a>
10003fd4:	e4f4      	b.n	100039c0 <tud_task+0x104>
          for(uint8_t i=1; i<desc_itf_assoc->bInterfaceCount; i++)
10003fd6:	78c2      	ldrb	r2, [r0, #3]
10003fd8:	2a01      	cmp	r2, #1
10003fda:	d907      	bls.n	10003fec <tud_task+0x730>
            _usbd_dev.itf2drv[desc_itf->bInterfaceNumber+i] = drv_id;
10003fdc:	3304      	adds	r3, #4
10003fde:	3a01      	subs	r2, #1
10003fe0:	4443      	add	r3, r8
10003fe2:	0018      	movs	r0, r3
10003fe4:	0021      	movs	r1, r4
10003fe6:	b2d2      	uxtb	r2, r2
10003fe8:	f7fc fcd0 	bl	1000098c <__wrap_memset>
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
10003fec:	217f      	movs	r1, #127	; 0x7f
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
10003fee:	002a      	movs	r2, r5
10003ff0:	2300      	movs	r3, #0
10003ff2:	468c      	mov	ip, r1
    if ( TUSB_DESC_ENDPOINT == tu_desc_type(p_desc) )
10003ff4:	7851      	ldrb	r1, [r2, #1]
10003ff6:	2905      	cmp	r1, #5
10003ff8:	d107      	bne.n	1000400a <tud_task+0x74e>
      ep2drv[tu_edpt_number(ep_addr)][tu_edpt_dir(ep_addr)] = driver_id;
10003ffa:	4661      	mov	r1, ip
      uint8_t const ep_addr = ((tusb_desc_endpoint_t const*) p_desc)->bEndpointAddress;
10003ffc:	7890      	ldrb	r0, [r2, #2]
      ep2drv[tu_edpt_number(ep_addr)][tu_edpt_dir(ep_addr)] = driver_id;
10003ffe:	4001      	ands	r1, r0
10004000:	0049      	lsls	r1, r1, #1
10004002:	4441      	add	r1, r8
10004004:	3113      	adds	r1, #19
10004006:	09c0      	lsrs	r0, r0, #7
10004008:	540c      	strb	r4, [r1, r0]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
1000400a:	7811      	ldrb	r1, [r2, #0]
    len   = (uint16_t)(len + tu_desc_len(p_desc));
1000400c:	185b      	adds	r3, r3, r1
1000400e:	b29b      	uxth	r3, r3
  return desc8 + desc8[DESC_OFFSET_LEN];
10004010:	1852      	adds	r2, r2, r1
  while( len < desc_len )
10004012:	42b3      	cmp	r3, r6
10004014:	d3ee      	bcc.n	10003ff4 <tud_task+0x738>
    TU_ASSERT(drv_id < TOTAL_DRIVER_COUNT);
10004016:	4b25      	ldr	r3, [pc, #148]	; (100040ac <tud_task+0x7f0>)
        p_desc += drv_len; // next interface
10004018:	19ad      	adds	r5, r5, r6
    TU_ASSERT(drv_id < TOTAL_DRIVER_COUNT);
1000401a:	781b      	ldrb	r3, [r3, #0]
1000401c:	42a3      	cmp	r3, r4
1000401e:	d300      	bcc.n	10004022 <tud_task+0x766>
10004020:	e767      	b.n	10003ef2 <tud_task+0x636>
10004022:	e4cd      	b.n	100039c0 <tud_task+0x104>
      if (!tud_descriptor_bos_cb) return false;
10004024:	4b23      	ldr	r3, [pc, #140]	; (100040b4 <tud_task+0x7f8>)
10004026:	2b00      	cmp	r3, #0
10004028:	d100      	bne.n	1000402c <tud_task+0x770>
1000402a:	e4c9      	b.n	100039c0 <tud_task+0x104>
      tusb_desc_bos_t const* desc_bos = (tusb_desc_bos_t const*) tud_descriptor_bos_cb();
1000402c:	e000      	b.n	10004030 <tud_task+0x774>
1000402e:	bf00      	nop
10004030:	0004      	movs	r4, r0
      memcpy(&total_len, (uint8_t*) desc_config + offsetof(tusb_desc_configuration_t, wTotalLength), 2);
10004032:	ab06      	add	r3, sp, #24
10004034:	1c9d      	adds	r5, r3, #2
10004036:	2202      	movs	r2, #2
10004038:	1ca1      	adds	r1, r4, #2
1000403a:	0028      	movs	r0, r5
1000403c:	f7fc fcac 	bl	10000998 <__wrap___aeabi_memcpy>
      return tud_control_xfer(rhport, p_request, (void*) desc_config, total_len);
10004040:	0022      	movs	r2, r4
10004042:	4648      	mov	r0, r9
10004044:	882b      	ldrh	r3, [r5, #0]
10004046:	a908      	add	r1, sp, #32
10004048:	f000 f9d2 	bl	100043f0 <tud_control_xfer>
          TU_VERIFY( process_get_descriptor(rhport, p_request) );
1000404c:	2800      	cmp	r0, #0
1000404e:	d000      	beq.n	10004052 <tud_task+0x796>
10004050:	e445      	b.n	100038de <tud_task+0x22>
10004052:	e4b5      	b.n	100039c0 <tud_task+0x104>
      if ( tud_descriptor_device_qualifier_cb )
10004054:	4b18      	ldr	r3, [pc, #96]	; (100040b8 <tud_task+0x7fc>)
10004056:	2b00      	cmp	r3, #0
10004058:	d100      	bne.n	1000405c <tud_task+0x7a0>
1000405a:	e4b1      	b.n	100039c0 <tud_task+0x104>
        uint8_t const* desc_qualifier = tud_descriptor_device_qualifier_cb();
1000405c:	e000      	b.n	10004060 <tud_task+0x7a4>
1000405e:	bf00      	nop
10004060:	1e02      	subs	r2, r0, #0
        TU_ASSERT(desc_qualifier);
10004062:	d100      	bne.n	10004066 <tud_task+0x7aa>
10004064:	e4ac      	b.n	100039c0 <tud_task+0x104>
        return tud_control_xfer(rhport, p_request, (void*) desc_qualifier, desc_qualifier[0]);
10004066:	4648      	mov	r0, r9
10004068:	7813      	ldrb	r3, [r2, #0]
1000406a:	a908      	add	r1, sp, #32
1000406c:	f000 f9c0 	bl	100043f0 <tud_control_xfer>
10004070:	e7ec      	b.n	1000404c <tud_task+0x790>
      uint8_t const* desc_str = (uint8_t const*) tud_descriptor_string_cb(desc_index, p_request->wIndex);
10004072:	8939      	ldrh	r1, [r7, #8]
10004074:	f7fe f928 	bl	100022c8 <tud_descriptor_string_cb>
10004078:	1e02      	subs	r2, r0, #0
      TU_VERIFY(desc_str);
1000407a:	d1f4      	bne.n	10004066 <tud_task+0x7aa>
1000407c:	e4a0      	b.n	100039c0 <tud_task+0x104>
      tusb_desc_configuration_t const* desc_config = (tusb_desc_configuration_t const*) tud_descriptor_configuration_cb(desc_index);
1000407e:	f7fe f91f 	bl	100022c0 <tud_descriptor_configuration_cb>
10004082:	1e04      	subs	r4, r0, #0
      TU_ASSERT(desc_config);
10004084:	d1d5      	bne.n	10004032 <tud_task+0x776>
10004086:	e49b      	b.n	100039c0 <tud_task+0x104>
      return tud_control_xfer(rhport, p_request, (void*) tud_descriptor_device_cb(), len);
10004088:	f7fe f916 	bl	100022b8 <tud_descriptor_device_cb>
1000408c:	2312      	movs	r3, #18
1000408e:	0002      	movs	r2, r0
10004090:	a908      	add	r1, sp, #32
10004092:	4648      	mov	r0, r9
10004094:	f000 f9ac 	bl	100043f0 <tud_control_xfer>
10004098:	e7d8      	b.n	1000404c <tud_task+0x790>
  if (tud_mount_cb) tud_mount_cb();
1000409a:	4b08      	ldr	r3, [pc, #32]	; (100040bc <tud_task+0x800>)
1000409c:	2b00      	cmp	r3, #0
1000409e:	d100      	bne.n	100040a2 <tud_task+0x7e6>
100040a0:	e67f      	b.n	10003da2 <tud_task+0x4e6>
100040a2:	e000      	b.n	100040a6 <tud_task+0x7ea>
100040a4:	bf00      	nop
100040a6:	e67c      	b.n	10003da2 <tud_task+0x4e6>
100040a8:	10003105 	.word	0x10003105
100040ac:	20012771 	.word	0x20012771
100040b0:	20011af8 	.word	0x20011af8
	...

100040c0 <dcd_event_bus_signal>:
{
100040c0:	b530      	push	{r4, r5, lr}
100040c2:	b085      	sub	sp, #20
100040c4:	0005      	movs	r5, r0
100040c6:	000c      	movs	r4, r1
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
100040c8:	220c      	movs	r2, #12
100040ca:	2100      	movs	r1, #0
100040cc:	a801      	add	r0, sp, #4
100040ce:	f7fc fc5d 	bl	1000098c <__wrap_memset>
100040d2:	466b      	mov	r3, sp
100040d4:	711d      	strb	r5, [r3, #4]
100040d6:	715c      	strb	r4, [r3, #5]
  switch (event->event_id)
100040d8:	2c04      	cmp	r4, #4
100040da:	d04b      	beq.n	10004174 <dcd_event_bus_signal+0xb4>
100040dc:	d805      	bhi.n	100040ea <dcd_event_bus_signal+0x2a>
100040de:	2c02      	cmp	r4, #2
100040e0:	d030      	beq.n	10004144 <dcd_event_bus_signal+0x84>
100040e2:	2c03      	cmp	r4, #3
100040e4:	d115      	bne.n	10004112 <dcd_event_bus_signal+0x52>
}
100040e6:	b005      	add	sp, #20
100040e8:	bd30      	pop	{r4, r5, pc}
  switch (event->event_id)
100040ea:	2c05      	cmp	r4, #5
100040ec:	d111      	bne.n	10004112 <dcd_event_bus_signal+0x52>
      if ( _usbd_dev.connected )
100040ee:	4b2a      	ldr	r3, [pc, #168]	; (10004198 <dcd_event_bus_signal+0xd8>)
100040f0:	781a      	ldrb	r2, [r3, #0]
100040f2:	07d2      	lsls	r2, r2, #31
100040f4:	d5f7      	bpl.n	100040e6 <dcd_event_bus_signal+0x26>
        _usbd_dev.suspended = 0;
100040f6:	2104      	movs	r1, #4
100040f8:	781a      	ldrb	r2, [r3, #0]
100040fa:	438a      	bics	r2, r1
100040fc:	701a      	strb	r2, [r3, #0]
        osal_queue_send(_usbd_q, event, in_isr);
100040fe:	4b27      	ldr	r3, [pc, #156]	; (1000419c <dcd_event_bus_signal+0xdc>)
10004100:	681c      	ldr	r4, [r3, #0]
    critsec->save = spin_lock_blocking(critsec->core.spin_lock);
10004102:	69a2      	ldr	r2, [r4, #24]
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
10004104:	f3ef 8110 	mrs	r1, PRIMASK
    __asm volatile ("cpsid i");
10004108:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
1000410a:	6813      	ldr	r3, [r2, #0]
1000410c:	2b00      	cmp	r3, #0
1000410e:	d109      	bne.n	10004124 <dcd_event_bus_signal+0x64>
10004110:	e7fb      	b.n	1000410a <dcd_event_bus_signal+0x4a>
      osal_queue_send(_usbd_q, event, in_isr);
10004112:	4b22      	ldr	r3, [pc, #136]	; (1000419c <dcd_event_bus_signal+0xdc>)
10004114:	681c      	ldr	r4, [r3, #0]
10004116:	69a2      	ldr	r2, [r4, #24]
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
10004118:	f3ef 8110 	mrs	r1, PRIMASK
    __asm volatile ("cpsid i");
1000411c:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
1000411e:	6813      	ldr	r3, [r2, #0]
10004120:	2b00      	cmp	r3, #0
10004122:	d0fc      	beq.n	1000411e <dcd_event_bus_signal+0x5e>
    __asm volatile ("dmb");
10004124:	f3bf 8f5f 	dmb	sy
10004128:	61e1      	str	r1, [r4, #28]
  //  however osal_queue_recieve may be. therefore my assumption is that
  //  the fifo mutex is not populated for queues used from an IRQ context
  assert(!qhdl->ff.mutex);

  _osal_q_lock(qhdl);
  bool success = tu_fifo_write(&qhdl->ff, data);
1000412a:	0020      	movs	r0, r4
1000412c:	a901      	add	r1, sp, #4
1000412e:	f7ff fa87 	bl	10003640 <tu_fifo_write>
    spin_unlock(critsec->core.spin_lock, critsec->save);
10004132:	69a2      	ldr	r2, [r4, #24]
10004134:	69e3      	ldr	r3, [r4, #28]
10004136:	f3bf 8f5f 	dmb	sy
    *lock = 0;
1000413a:	2100      	movs	r1, #0
1000413c:	6011      	str	r1, [r2, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
1000413e:	f383 8810 	msr	PRIMASK, r3
}
10004142:	e7d0      	b.n	100040e6 <dcd_event_bus_signal+0x26>
      _usbd_dev.connected  = 0;
10004144:	2101      	movs	r1, #1
10004146:	4b14      	ldr	r3, [pc, #80]	; (10004198 <dcd_event_bus_signal+0xd8>)
10004148:	781a      	ldrb	r2, [r3, #0]
1000414a:	438a      	bics	r2, r1
1000414c:	701a      	strb	r2, [r3, #0]
      _usbd_dev.addressed  = 0;
1000414e:	781a      	ldrb	r2, [r3, #0]
      _usbd_dev.suspended  = 0;
10004150:	3103      	adds	r1, #3
      _usbd_dev.addressed  = 0;
10004152:	43a2      	bics	r2, r4
10004154:	701a      	strb	r2, [r3, #0]
      _usbd_dev.cfg_num    = 0;
10004156:	2200      	movs	r2, #0
10004158:	705a      	strb	r2, [r3, #1]
      _usbd_dev.suspended  = 0;
1000415a:	781a      	ldrb	r2, [r3, #0]
1000415c:	438a      	bics	r2, r1
1000415e:	701a      	strb	r2, [r3, #0]
      osal_queue_send(_usbd_q, event, in_isr);
10004160:	4b0e      	ldr	r3, [pc, #56]	; (1000419c <dcd_event_bus_signal+0xdc>)
10004162:	681c      	ldr	r4, [r3, #0]
    critsec->save = spin_lock_blocking(critsec->core.spin_lock);
10004164:	69a2      	ldr	r2, [r4, #24]
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
10004166:	f3ef 8110 	mrs	r1, PRIMASK
    __asm volatile ("cpsid i");
1000416a:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
1000416c:	6813      	ldr	r3, [r2, #0]
1000416e:	2b00      	cmp	r3, #0
10004170:	d1d8      	bne.n	10004124 <dcd_event_bus_signal+0x64>
10004172:	e7fb      	b.n	1000416c <dcd_event_bus_signal+0xac>
      if ( _usbd_dev.connected )
10004174:	4b08      	ldr	r3, [pc, #32]	; (10004198 <dcd_event_bus_signal+0xd8>)
10004176:	781a      	ldrb	r2, [r3, #0]
10004178:	07d2      	lsls	r2, r2, #31
1000417a:	d5b4      	bpl.n	100040e6 <dcd_event_bus_signal+0x26>
        _usbd_dev.suspended = 1;
1000417c:	2104      	movs	r1, #4
1000417e:	781a      	ldrb	r2, [r3, #0]
10004180:	430a      	orrs	r2, r1
10004182:	701a      	strb	r2, [r3, #0]
        osal_queue_send(_usbd_q, event, in_isr);
10004184:	4b05      	ldr	r3, [pc, #20]	; (1000419c <dcd_event_bus_signal+0xdc>)
10004186:	681c      	ldr	r4, [r3, #0]
10004188:	69a2      	ldr	r2, [r4, #24]
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
1000418a:	f3ef 8110 	mrs	r1, PRIMASK
    __asm volatile ("cpsid i");
1000418e:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
10004190:	6813      	ldr	r3, [r2, #0]
10004192:	2b00      	cmp	r3, #0
10004194:	d1c6      	bne.n	10004124 <dcd_event_bus_signal+0x64>
10004196:	e7fb      	b.n	10004190 <dcd_event_bus_signal+0xd0>
10004198:	20011e28 	.word	0x20011e28
1000419c:	20011e64 	.word	0x20011e64

100041a0 <dcd_event_setup_received>:
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_SETUP_RECEIVED };
100041a0:	2300      	movs	r3, #0
{
100041a2:	b530      	push	{r4, r5, lr}
100041a4:	b085      	sub	sp, #20
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_SETUP_RECEIVED };
100041a6:	ad01      	add	r5, sp, #4
100041a8:	806b      	strh	r3, [r5, #2]
100041aa:	7028      	strb	r0, [r5, #0]
100041ac:	3306      	adds	r3, #6
  memcpy(&event.setup_received, setup, 8);
100041ae:	2208      	movs	r2, #8
100041b0:	a802      	add	r0, sp, #8
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_SETUP_RECEIVED };
100041b2:	706b      	strb	r3, [r5, #1]
  memcpy(&event.setup_received, setup, 8);
100041b4:	f7fc fbf0 	bl	10000998 <__wrap___aeabi_memcpy>
      osal_queue_send(_usbd_q, event, in_isr);
100041b8:	4b0c      	ldr	r3, [pc, #48]	; (100041ec <dcd_event_setup_received+0x4c>)
100041ba:	681c      	ldr	r4, [r3, #0]
100041bc:	69a2      	ldr	r2, [r4, #24]
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
100041be:	f3ef 8310 	mrs	r3, PRIMASK
    __asm volatile ("cpsid i");
100041c2:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
100041c4:	6811      	ldr	r1, [r2, #0]
100041c6:	2900      	cmp	r1, #0
100041c8:	d0fc      	beq.n	100041c4 <dcd_event_setup_received+0x24>
    __asm volatile ("dmb");
100041ca:	f3bf 8f5f 	dmb	sy
100041ce:	61e3      	str	r3, [r4, #28]
100041d0:	0029      	movs	r1, r5
100041d2:	0020      	movs	r0, r4
100041d4:	f7ff fa34 	bl	10003640 <tu_fifo_write>
    spin_unlock(critsec->core.spin_lock, critsec->save);
100041d8:	69a2      	ldr	r2, [r4, #24]
100041da:	69e3      	ldr	r3, [r4, #28]
100041dc:	f3bf 8f5f 	dmb	sy
    *lock = 0;
100041e0:	2100      	movs	r1, #0
100041e2:	6011      	str	r1, [r2, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
100041e4:	f383 8810 	msr	PRIMASK, r3
}
100041e8:	b005      	add	sp, #20
100041ea:	bd30      	pop	{r4, r5, pc}
100041ec:	20011e64 	.word	0x20011e64

100041f0 <dcd_event_xfer_complete>:
{
100041f0:	b5f0      	push	{r4, r5, r6, r7, lr}
100041f2:	46c6      	mov	lr, r8
100041f4:	4680      	mov	r8, r0
100041f6:	b500      	push	{lr}
100041f8:	b084      	sub	sp, #16
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
100041fa:	ac01      	add	r4, sp, #4
{
100041fc:	000f      	movs	r7, r1
100041fe:	0016      	movs	r6, r2
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
10004200:	2100      	movs	r1, #0
10004202:	2208      	movs	r2, #8
10004204:	0020      	movs	r0, r4
{
10004206:	001d      	movs	r5, r3
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
10004208:	f7fc fbc0 	bl	1000098c <__wrap_memset>
1000420c:	4643      	mov	r3, r8
1000420e:	7023      	strb	r3, [r4, #0]
10004210:	2307      	movs	r3, #7
10004212:	7063      	strb	r3, [r4, #1]
      osal_queue_send(_usbd_q, event, in_isr);
10004214:	4b0f      	ldr	r3, [pc, #60]	; (10004254 <dcd_event_xfer_complete+0x64>)
  event.xfer_complete.result  = result;
10004216:	7165      	strb	r5, [r4, #5]
      osal_queue_send(_usbd_q, event, in_isr);
10004218:	681d      	ldr	r5, [r3, #0]
  event.xfer_complete.ep_addr = ep_addr;
1000421a:	7127      	strb	r7, [r4, #4]
  event.xfer_complete.len     = xferred_bytes;
1000421c:	60a6      	str	r6, [r4, #8]
    critsec->save = spin_lock_blocking(critsec->core.spin_lock);
1000421e:	69aa      	ldr	r2, [r5, #24]
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
10004220:	f3ef 8310 	mrs	r3, PRIMASK
    __asm volatile ("cpsid i");
10004224:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
10004226:	6811      	ldr	r1, [r2, #0]
10004228:	2900      	cmp	r1, #0
1000422a:	d0fc      	beq.n	10004226 <dcd_event_xfer_complete+0x36>
    __asm volatile ("dmb");
1000422c:	f3bf 8f5f 	dmb	sy
10004230:	61eb      	str	r3, [r5, #28]
10004232:	0021      	movs	r1, r4
10004234:	0028      	movs	r0, r5
10004236:	f7ff fa03 	bl	10003640 <tu_fifo_write>
    spin_unlock(critsec->core.spin_lock, critsec->save);
1000423a:	69aa      	ldr	r2, [r5, #24]
1000423c:	69eb      	ldr	r3, [r5, #28]
1000423e:	f3bf 8f5f 	dmb	sy
    *lock = 0;
10004242:	2100      	movs	r1, #0
10004244:	6011      	str	r1, [r2, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10004246:	f383 8810 	msr	PRIMASK, r3
}
1000424a:	b004      	add	sp, #16
1000424c:	bc80      	pop	{r7}
1000424e:	46b8      	mov	r8, r7
10004250:	bdf0      	pop	{r4, r5, r6, r7, pc}
10004252:	46c0      	nop			; (mov r8, r8)
10004254:	20011e64 	.word	0x20011e64

10004258 <usbd_open_edpt_pair>:
{
10004258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000425a:	4647      	mov	r7, r8
1000425c:	46d6      	mov	lr, sl
1000425e:	b580      	push	{r7, lr}
10004260:	4698      	mov	r8, r3
10004262:	9b08      	ldr	r3, [sp, #32]
10004264:	0006      	movs	r6, r0
10004266:	000c      	movs	r4, r1
10004268:	1e17      	subs	r7, r2, #0
1000426a:	469a      	mov	sl, r3
  for(int i=0; i<ep_count; i++)
1000426c:	d021      	beq.n	100042b2 <usbd_open_edpt_pair+0x5a>
1000426e:	2500      	movs	r5, #0
10004270:	e006      	b.n	10004280 <usbd_open_edpt_pair+0x28>
      (*ep_out) = desc_ep->bEndpointAddress;
10004272:	4652      	mov	r2, sl
10004274:	7013      	strb	r3, [r2, #0]
10004276:	7823      	ldrb	r3, [r4, #0]
  for(int i=0; i<ep_count; i++)
10004278:	3501      	adds	r5, #1
1000427a:	18e4      	adds	r4, r4, r3
1000427c:	42bd      	cmp	r5, r7
1000427e:	da18      	bge.n	100042b2 <usbd_open_edpt_pair+0x5a>
    TU_ASSERT(TUSB_DESC_ENDPOINT == desc_ep->bDescriptorType && xfer_type == desc_ep->bmAttributes.xfer);
10004280:	7863      	ldrb	r3, [r4, #1]
10004282:	2b05      	cmp	r3, #5
10004284:	d117      	bne.n	100042b6 <usbd_open_edpt_pair+0x5e>
10004286:	78e1      	ldrb	r1, [r4, #3]
10004288:	0789      	lsls	r1, r1, #30
1000428a:	0f89      	lsrs	r1, r1, #30
1000428c:	4541      	cmp	r1, r8
1000428e:	d112      	bne.n	100042b6 <usbd_open_edpt_pair+0x5e>
  return dcd_edpt_open(rhport, desc_ep);
10004290:	0021      	movs	r1, r4
10004292:	0030      	movs	r0, r6
10004294:	f000 facc 	bl	10004830 <dcd_edpt_open>
    TU_ASSERT(usbd_edpt_open(rhport, desc_ep));
10004298:	2800      	cmp	r0, #0
1000429a:	d00c      	beq.n	100042b6 <usbd_open_edpt_pair+0x5e>
    if ( tu_edpt_dir(desc_ep->bEndpointAddress) == TUSB_DIR_IN )
1000429c:	78a3      	ldrb	r3, [r4, #2]
1000429e:	09da      	lsrs	r2, r3, #7
100042a0:	2a01      	cmp	r2, #1
100042a2:	d1e6      	bne.n	10004272 <usbd_open_edpt_pair+0x1a>
      (*ep_in) = desc_ep->bEndpointAddress;
100042a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
  for(int i=0; i<ep_count; i++)
100042a6:	3501      	adds	r5, #1
      (*ep_out) = desc_ep->bEndpointAddress;
100042a8:	7013      	strb	r3, [r2, #0]
100042aa:	7823      	ldrb	r3, [r4, #0]
100042ac:	18e4      	adds	r4, r4, r3
  for(int i=0; i<ep_count; i++)
100042ae:	42bd      	cmp	r5, r7
100042b0:	dbe6      	blt.n	10004280 <usbd_open_edpt_pair+0x28>
  return true;
100042b2:	2001      	movs	r0, #1
100042b4:	e000      	b.n	100042b8 <usbd_open_edpt_pair+0x60>
    TU_ASSERT(TUSB_DESC_ENDPOINT == desc_ep->bDescriptorType && xfer_type == desc_ep->bmAttributes.xfer);
100042b6:	2000      	movs	r0, #0
}
100042b8:	bcc0      	pop	{r6, r7}
100042ba:	46ba      	mov	sl, r7
100042bc:	46b0      	mov	r8, r6
100042be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

100042c0 <usbd_edpt_open>:
{
100042c0:	b510      	push	{r4, lr}
  return dcd_edpt_open(rhport, desc_ep);
100042c2:	f000 fab5 	bl	10004830 <dcd_edpt_open>
}
100042c6:	bd10      	pop	{r4, pc}

100042c8 <usbd_edpt_claim>:
{
100042c8:	b570      	push	{r4, r5, r6, lr}
  TU_VERIFY((_usbd_dev.ep_status[epnum][dir].busy == 0) && (_usbd_dev.ep_status[epnum][dir].claimed == 0));
100042ca:	247f      	movs	r4, #127	; 0x7f
100042cc:	400c      	ands	r4, r1
100042ce:	0063      	lsls	r3, r4, #1
100042d0:	4c14      	ldr	r4, [pc, #80]	; (10004324 <usbd_edpt_claim+0x5c>)
100042d2:	09c9      	lsrs	r1, r1, #7
100042d4:	18e4      	adds	r4, r4, r3
100042d6:	1864      	adds	r4, r4, r1
100042d8:	3420      	adds	r4, #32
100042da:	7963      	ldrb	r3, [r4, #5]
100042dc:	07db      	lsls	r3, r3, #31
100042de:	0fdd      	lsrs	r5, r3, #31
100042e0:	2b00      	cmp	r3, #0
100042e2:	d118      	bne.n	10004316 <usbd_edpt_claim+0x4e>
100042e4:	7963      	ldrb	r3, [r4, #5]
100042e6:	075b      	lsls	r3, r3, #29
100042e8:	d501      	bpl.n	100042ee <usbd_edpt_claim+0x26>
}
100042ea:	0028      	movs	r0, r5
100042ec:	bd70      	pop	{r4, r5, r6, pc}
    return mutex_enter_timeout_ms(mutex_hdl, msec);
100042ee:	2101      	movs	r1, #1
  osal_mutex_lock(_usbd_mutex, OSAL_TIMEOUT_WAIT_FOREVER);
100042f0:	4e0d      	ldr	r6, [pc, #52]	; (10004328 <usbd_edpt_claim+0x60>)
100042f2:	4249      	negs	r1, r1
100042f4:	6830      	ldr	r0, [r6, #0]
100042f6:	f009 fff7 	bl	1000e2e8 <__mutex_enter_timeout_ms_veneer>
  bool const ret = (_usbd_dev.ep_status[epnum][dir].busy == 0) && (_usbd_dev.ep_status[epnum][dir].claimed == 0);
100042fa:	7963      	ldrb	r3, [r4, #5]
100042fc:	07db      	lsls	r3, r3, #31
100042fe:	0fdd      	lsrs	r5, r3, #31
10004300:	2b00      	cmp	r3, #0
10004302:	d10a      	bne.n	1000431a <usbd_edpt_claim+0x52>
10004304:	7963      	ldrb	r3, [r4, #5]
10004306:	075b      	lsls	r3, r3, #29
10004308:	d408      	bmi.n	1000431c <usbd_edpt_claim+0x54>
    _usbd_dev.ep_status[epnum][dir].claimed = 1;
1000430a:	2204      	movs	r2, #4
1000430c:	7963      	ldrb	r3, [r4, #5]
  bool const ret = (_usbd_dev.ep_status[epnum][dir].busy == 0) && (_usbd_dev.ep_status[epnum][dir].claimed == 0);
1000430e:	2501      	movs	r5, #1
    _usbd_dev.ep_status[epnum][dir].claimed = 1;
10004310:	4313      	orrs	r3, r2
10004312:	7163      	strb	r3, [r4, #5]
10004314:	e002      	b.n	1000431c <usbd_edpt_claim+0x54>
  TU_VERIFY((_usbd_dev.ep_status[epnum][dir].busy == 0) && (_usbd_dev.ep_status[epnum][dir].claimed == 0));
10004316:	2500      	movs	r5, #0
10004318:	e7e7      	b.n	100042ea <usbd_edpt_claim+0x22>
  bool const ret = (_usbd_dev.ep_status[epnum][dir].busy == 0) && (_usbd_dev.ep_status[epnum][dir].claimed == 0);
1000431a:	2500      	movs	r5, #0
    mutex_exit(mutex_hdl);
1000431c:	6830      	ldr	r0, [r6, #0]
1000431e:	f009 ffc3 	bl	1000e2a8 <__mutex_exit_veneer>
  return ret;
10004322:	e7e2      	b.n	100042ea <usbd_edpt_claim+0x22>
10004324:	20011e28 	.word	0x20011e28
10004328:	20011e60 	.word	0x20011e60

1000432c <usbd_edpt_release>:
{
1000432c:	b570      	push	{r4, r5, r6, lr}
1000432e:	000c      	movs	r4, r1
    return mutex_enter_timeout_ms(mutex_hdl, msec);
10004330:	2101      	movs	r1, #1
  osal_mutex_lock(_usbd_mutex, OSAL_TIMEOUT_WAIT_FOREVER);
10004332:	4d0f      	ldr	r5, [pc, #60]	; (10004370 <usbd_edpt_release+0x44>)
10004334:	4249      	negs	r1, r1
10004336:	6828      	ldr	r0, [r5, #0]
10004338:	f009 ffd6 	bl	1000e2e8 <__mutex_enter_timeout_ms_veneer>
  bool const ret = (_usbd_dev.ep_status[epnum][dir].busy == 0) && (_usbd_dev.ep_status[epnum][dir].claimed == 1);
1000433c:	217f      	movs	r1, #127	; 0x7f
1000433e:	4021      	ands	r1, r4
10004340:	004b      	lsls	r3, r1, #1
10004342:	490c      	ldr	r1, [pc, #48]	; (10004374 <usbd_edpt_release+0x48>)
10004344:	09e4      	lsrs	r4, r4, #7
10004346:	18c9      	adds	r1, r1, r3
10004348:	1909      	adds	r1, r1, r4
1000434a:	3120      	adds	r1, #32
1000434c:	794b      	ldrb	r3, [r1, #5]
1000434e:	2400      	movs	r4, #0
10004350:	07db      	lsls	r3, r3, #31
10004352:	d408      	bmi.n	10004366 <usbd_edpt_release+0x3a>
10004354:	794b      	ldrb	r3, [r1, #5]
10004356:	075b      	lsls	r3, r3, #29
10004358:	0fdc      	lsrs	r4, r3, #31
1000435a:	2b00      	cmp	r3, #0
1000435c:	da03      	bge.n	10004366 <usbd_edpt_release+0x3a>
    _usbd_dev.ep_status[epnum][dir].claimed = 0;
1000435e:	2204      	movs	r2, #4
10004360:	794b      	ldrb	r3, [r1, #5]
10004362:	4393      	bics	r3, r2
10004364:	714b      	strb	r3, [r1, #5]
    mutex_exit(mutex_hdl);
10004366:	6828      	ldr	r0, [r5, #0]
10004368:	f009 ff9e 	bl	1000e2a8 <__mutex_exit_veneer>
}
1000436c:	0020      	movs	r0, r4
1000436e:	bd70      	pop	{r4, r5, r6, pc}
10004370:	20011e60 	.word	0x20011e60
10004374:	20011e28 	.word	0x20011e28

10004378 <usbd_edpt_xfer>:
{
10004378:	b570      	push	{r4, r5, r6, lr}
  TU_ASSERT(_usbd_dev.ep_status[epnum][dir].busy == 0);
1000437a:	257f      	movs	r5, #127	; 0x7f
1000437c:	4c0f      	ldr	r4, [pc, #60]	; (100043bc <usbd_edpt_xfer+0x44>)
1000437e:	400d      	ands	r5, r1
10004380:	006d      	lsls	r5, r5, #1
10004382:	1964      	adds	r4, r4, r5
{
10004384:	0006      	movs	r6, r0
  TU_ASSERT(_usbd_dev.ep_status[epnum][dir].busy == 0);
10004386:	09c8      	lsrs	r0, r1, #7
10004388:	1824      	adds	r4, r4, r0
1000438a:	3420      	adds	r4, #32
1000438c:	7965      	ldrb	r5, [r4, #5]
1000438e:	2000      	movs	r0, #0
10004390:	07ed      	lsls	r5, r5, #31
10004392:	d500      	bpl.n	10004396 <usbd_edpt_xfer+0x1e>
}
10004394:	bd70      	pop	{r4, r5, r6, pc}
  _usbd_dev.ep_status[epnum][dir].busy = true;
10004396:	2501      	movs	r5, #1
10004398:	7960      	ldrb	r0, [r4, #5]
1000439a:	4328      	orrs	r0, r5
1000439c:	7160      	strb	r0, [r4, #5]
  if ( dcd_edpt_xfer(rhport, ep_addr, buffer, total_bytes) )
1000439e:	0030      	movs	r0, r6
100043a0:	f000 faec 	bl	1000497c <dcd_edpt_xfer>
100043a4:	2800      	cmp	r0, #0
100043a6:	d1f5      	bne.n	10004394 <usbd_edpt_xfer+0x1c>
    _usbd_dev.ep_status[epnum][dir].busy = false;
100043a8:	2201      	movs	r2, #1
100043aa:	7963      	ldrb	r3, [r4, #5]
100043ac:	4393      	bics	r3, r2
100043ae:	7163      	strb	r3, [r4, #5]
    _usbd_dev.ep_status[epnum][dir].claimed = 0;
100043b0:	7963      	ldrb	r3, [r4, #5]
100043b2:	3203      	adds	r2, #3
100043b4:	4393      	bics	r3, r2
100043b6:	7163      	strb	r3, [r4, #5]
    return false;
100043b8:	e7ec      	b.n	10004394 <usbd_edpt_xfer+0x1c>
100043ba:	46c0      	nop			; (mov r8, r8)
100043bc:	20011e28 	.word	0x20011e28

100043c0 <tud_control_status>:
  return dcd_edpt_xfer(rhport, ep_addr, NULL, 0);
}

// Status phase
bool tud_control_status(uint8_t rhport, tusb_control_request_t const * request)
{
100043c0:	b570      	push	{r4, r5, r6, lr}
  _ctrl_xfer.request       = (*request);
100043c2:	4e0a      	ldr	r6, [pc, #40]	; (100043ec <tud_control_status+0x2c>)
{
100043c4:	0005      	movs	r5, r0
  _ctrl_xfer.request       = (*request);
100043c6:	0030      	movs	r0, r6
100043c8:	2208      	movs	r2, #8
{
100043ca:	000c      	movs	r4, r1
  _ctrl_xfer.request       = (*request);
100043cc:	f7fc fae4 	bl	10000998 <__wrap___aeabi_memcpy>
  _ctrl_xfer.buffer        = NULL;
100043d0:	2300      	movs	r3, #0
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
100043d2:	217f      	movs	r1, #127	; 0x7f
  _ctrl_xfer.total_xferred = 0;
  _ctrl_xfer.data_len      = 0;
100043d4:	60f3      	str	r3, [r6, #12]
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
100043d6:	7822      	ldrb	r2, [r4, #0]
  _ctrl_xfer.buffer        = NULL;
100043d8:	60b3      	str	r3, [r6, #8]
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
100043da:	4291      	cmp	r1, r2
100043dc:	415b      	adcs	r3, r3
  return dcd_edpt_xfer(rhport, ep_addr, NULL, 0);
100043de:	0028      	movs	r0, r5
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
100043e0:	01d9      	lsls	r1, r3, #7
  return dcd_edpt_xfer(rhport, ep_addr, NULL, 0);
100043e2:	2200      	movs	r2, #0
100043e4:	2300      	movs	r3, #0
100043e6:	f000 fac9 	bl	1000497c <dcd_edpt_xfer>

  return _status_stage_xact(rhport, request);
}
100043ea:	bd70      	pop	{r4, r5, r6, pc}
100043ec:	20011dcc 	.word	0x20011dcc

100043f0 <tud_control_xfer>:
}

// Transmit data to/from the control endpoint.
// If the request's wLength is zero, a status packet is sent instead.
bool tud_control_xfer(uint8_t rhport, tusb_control_request_t const * request, void* buffer, uint16_t len)
{
100043f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100043f2:	46ce      	mov	lr, r9
100043f4:	4647      	mov	r7, r8
100043f6:	4691      	mov	r9, r2
  _ctrl_xfer.request       = (*request);
100043f8:	4e2a      	ldr	r6, [pc, #168]	; (100044a4 <tud_control_xfer+0xb4>)
{
100043fa:	b580      	push	{r7, lr}
  _ctrl_xfer.request       = (*request);
100043fc:	2208      	movs	r2, #8
{
100043fe:	0007      	movs	r7, r0
  _ctrl_xfer.request       = (*request);
10004400:	0030      	movs	r0, r6
{
10004402:	000d      	movs	r5, r1
10004404:	4698      	mov	r8, r3
  _ctrl_xfer.request       = (*request);
10004406:	f7fc fac7 	bl	10000998 <__wrap___aeabi_memcpy>
  _ctrl_xfer.buffer        = (uint8_t*) buffer;
1000440a:	464b      	mov	r3, r9
1000440c:	60b3      	str	r3, [r6, #8]
  _ctrl_xfer.total_xferred = 0U;
1000440e:	2300      	movs	r3, #0
10004410:	81f3      	strh	r3, [r6, #14]
  _ctrl_xfer.data_len      = tu_min16(len, request->wLength);
10004412:	79ec      	ldrb	r4, [r5, #7]
10004414:	79a9      	ldrb	r1, [r5, #6]
10004416:	0224      	lsls	r4, r4, #8
10004418:	430c      	orrs	r4, r1
static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
1000441a:	1c23      	adds	r3, r4, #0
1000441c:	4544      	cmp	r4, r8
1000441e:	d900      	bls.n	10004422 <tud_control_xfer+0x32>
10004420:	4643      	mov	r3, r8
10004422:	b29a      	uxth	r2, r3
10004424:	4690      	mov	r8, r2
10004426:	81b3      	strh	r3, [r6, #12]
  
  if (request->wLength > 0U)
10004428:	2c00      	cmp	r4, #0
1000442a:	d013      	beq.n	10004454 <tud_control_xfer+0x64>
  {
    if(_ctrl_xfer.data_len > 0U)
1000442c:	2a00      	cmp	r2, #0
1000442e:	d01f      	beq.n	10004470 <tud_control_xfer+0x80>
    {
      TU_ASSERT(buffer);
10004430:	464b      	mov	r3, r9
10004432:	2b00      	cmp	r3, #0
10004434:	d034      	beq.n	100044a0 <tud_control_xfer+0xb0>
10004436:	1c13      	adds	r3, r2, #0
10004438:	2a40      	cmp	r2, #64	; 0x40
1000443a:	d81f      	bhi.n	1000447c <tud_control_xfer+0x8c>
1000443c:	b29b      	uxth	r3, r3
1000443e:	4698      	mov	r8, r3
  if ( _ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_IN )
10004440:	7833      	ldrb	r3, [r6, #0]
10004442:	2b7f      	cmp	r3, #127	; 0x7f
10004444:	d820      	bhi.n	10004488 <tud_control_xfer+0x98>
10004446:	2100      	movs	r1, #0
  return dcd_edpt_xfer(rhport, ep_addr, xact_len ? _usbd_ctrl_buf : NULL, xact_len);
10004448:	4a17      	ldr	r2, [pc, #92]	; (100044a8 <tud_control_xfer+0xb8>)
1000444a:	4643      	mov	r3, r8
1000444c:	0038      	movs	r0, r7
1000444e:	f000 fa95 	bl	1000497c <dcd_edpt_xfer>
10004452:	e009      	b.n	10004468 <tud_control_xfer+0x78>
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
10004454:	227f      	movs	r2, #127	; 0x7f
10004456:	782b      	ldrb	r3, [r5, #0]
  return dcd_edpt_xfer(rhport, ep_addr, NULL, 0);
10004458:	0038      	movs	r0, r7
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
1000445a:	429a      	cmp	r2, r3
1000445c:	4164      	adcs	r4, r4
  return dcd_edpt_xfer(rhport, ep_addr, NULL, 0);
1000445e:	2300      	movs	r3, #0
10004460:	2200      	movs	r2, #0
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
10004462:	01e1      	lsls	r1, r4, #7
  return dcd_edpt_xfer(rhport, ep_addr, NULL, 0);
10004464:	f000 fa8a 	bl	1000497c <dcd_edpt_xfer>
    // Status stage
    TU_ASSERT( _status_stage_xact(rhport, request) );
  }

  return true;
}
10004468:	bcc0      	pop	{r6, r7}
1000446a:	46b9      	mov	r9, r7
1000446c:	46b0      	mov	r8, r6
1000446e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ( _ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_IN )
10004470:	7833      	ldrb	r3, [r6, #0]
10004472:	2b7f      	cmp	r3, #127	; 0x7f
10004474:	d911      	bls.n	1000449a <tud_control_xfer+0xaa>
    ep_addr = EDPT_CTRL_IN;
10004476:	2180      	movs	r1, #128	; 0x80
  return dcd_edpt_xfer(rhport, ep_addr, xact_len ? _usbd_ctrl_buf : NULL, xact_len);
10004478:	2200      	movs	r2, #0
1000447a:	e7e6      	b.n	1000444a <tud_control_xfer+0x5a>
1000447c:	2340      	movs	r3, #64	; 0x40
1000447e:	b29b      	uxth	r3, r3
10004480:	4698      	mov	r8, r3
  if ( _ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_IN )
10004482:	7833      	ldrb	r3, [r6, #0]
10004484:	2b7f      	cmp	r3, #127	; 0x7f
10004486:	d9de      	bls.n	10004446 <tud_control_xfer+0x56>
    if ( xact_len ) memcpy(_usbd_ctrl_buf, _ctrl_xfer.buffer, xact_len);
10004488:	4c07      	ldr	r4, [pc, #28]	; (100044a8 <tud_control_xfer+0xb8>)
1000448a:	4642      	mov	r2, r8
1000448c:	4649      	mov	r1, r9
1000448e:	0020      	movs	r0, r4
10004490:	f7fc fa82 	bl	10000998 <__wrap___aeabi_memcpy>
    ep_addr = EDPT_CTRL_IN;
10004494:	2180      	movs	r1, #128	; 0x80
  return dcd_edpt_xfer(rhport, ep_addr, xact_len ? _usbd_ctrl_buf : NULL, xact_len);
10004496:	0022      	movs	r2, r4
10004498:	e7d7      	b.n	1000444a <tud_control_xfer+0x5a>
  if ( _ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_IN )
1000449a:	2100      	movs	r1, #0
  return dcd_edpt_xfer(rhport, ep_addr, xact_len ? _usbd_ctrl_buf : NULL, xact_len);
1000449c:	2200      	movs	r2, #0
1000449e:	e7d4      	b.n	1000444a <tud_control_xfer+0x5a>
      TU_ASSERT(buffer);
100044a0:	2000      	movs	r0, #0
100044a2:	e7e1      	b.n	10004468 <tud_control_xfer+0x78>
100044a4:	20011dcc 	.word	0x20011dcc
100044a8:	20011de8 	.word	0x20011de8

100044ac <usbd_control_reset>:
//--------------------------------------------------------------------+
// USBD API
//--------------------------------------------------------------------+

void usbd_control_reset(void)
{
100044ac:	b510      	push	{r4, lr}
  tu_varclr(&_ctrl_xfer);
100044ae:	2214      	movs	r2, #20
100044b0:	2100      	movs	r1, #0
100044b2:	4802      	ldr	r0, [pc, #8]	; (100044bc <usbd_control_reset+0x10>)
100044b4:	f7fc fa6a 	bl	1000098c <__wrap_memset>
}
100044b8:	bd10      	pop	{r4, pc}
100044ba:	46c0      	nop			; (mov r8, r8)
100044bc:	20011dcc 	.word	0x20011dcc

100044c0 <usbd_control_set_complete_callback>:

// TODO may find a better way
void usbd_control_set_complete_callback( bool (*fp) (uint8_t, tusb_control_request_t const * ) )
{
  _ctrl_xfer.complete_cb = fp;
100044c0:	4b01      	ldr	r3, [pc, #4]	; (100044c8 <usbd_control_set_complete_callback+0x8>)
100044c2:	6118      	str	r0, [r3, #16]
}
100044c4:	4770      	bx	lr
100044c6:	46c0      	nop			; (mov r8, r8)
100044c8:	20011dcc 	.word	0x20011dcc

100044cc <usbd_control_set_request>:

// useful for dcd_set_address where DCD is responsible for status response
void usbd_control_set_request(tusb_control_request_t const *request)
{
100044cc:	b510      	push	{r4, lr}
  _ctrl_xfer.request       = (*request);
100044ce:	4c05      	ldr	r4, [pc, #20]	; (100044e4 <usbd_control_set_request+0x18>)
{
100044d0:	0001      	movs	r1, r0
  _ctrl_xfer.request       = (*request);
100044d2:	2208      	movs	r2, #8
100044d4:	0020      	movs	r0, r4
100044d6:	f7fc fa5f 	bl	10000998 <__wrap___aeabi_memcpy>
  _ctrl_xfer.buffer        = NULL;
100044da:	2300      	movs	r3, #0
100044dc:	60a3      	str	r3, [r4, #8]
  _ctrl_xfer.total_xferred = 0;
  _ctrl_xfer.data_len      = 0;
100044de:	60e3      	str	r3, [r4, #12]
}
100044e0:	bd10      	pop	{r4, pc}
100044e2:	46c0      	nop			; (mov r8, r8)
100044e4:	20011dcc 	.word	0x20011dcc

100044e8 <usbd_control_xfer_cb>:

// callback when a transaction complete on
// - DATA stage of control endpoint or
// - Status stage
bool usbd_control_xfer_cb (uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes)
{
100044e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  (void) result;

  // Endpoint Address is opposite to direction bit, this is Status Stage complete event
  if ( tu_edpt_dir(ep_addr) != _ctrl_xfer.request.bmRequestType_bit.direction )
100044ea:	4d37      	ldr	r5, [pc, #220]	; (100045c8 <usbd_control_xfer_cb+0xe0>)
{
100044ec:	001c      	movs	r4, r3
  if ( tu_edpt_dir(ep_addr) != _ctrl_xfer.request.bmRequestType_bit.direction )
100044ee:	782b      	ldrb	r3, [r5, #0]
{
100044f0:	0006      	movs	r6, r0
  if ( tu_edpt_dir(ep_addr) != _ctrl_xfer.request.bmRequestType_bit.direction )
100044f2:	09da      	lsrs	r2, r3, #7
100044f4:	09c9      	lsrs	r1, r1, #7
100044f6:	428a      	cmp	r2, r1
100044f8:	d00c      	beq.n	10004514 <usbd_control_xfer_cb+0x2c>
  {
    TU_ASSERT(0 == xferred_bytes);
100044fa:	2700      	movs	r7, #0
100044fc:	2c00      	cmp	r4, #0
100044fe:	d001      	beq.n	10004504 <usbd_control_xfer_cb+0x1c>
    // More data to transfer
    TU_ASSERT( _data_stage_xact(rhport) );
  }

  return true;
}
10004500:	0038      	movs	r0, r7
10004502:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (dcd_edpt0_status_complete) dcd_edpt0_status_complete(rhport, &_ctrl_xfer.request);
10004504:	4b31      	ldr	r3, [pc, #196]	; (100045cc <usbd_control_xfer_cb+0xe4>)
    return true;
10004506:	3701      	adds	r7, #1
    if (dcd_edpt0_status_complete) dcd_edpt0_status_complete(rhport, &_ctrl_xfer.request);
10004508:	2b00      	cmp	r3, #0
1000450a:	d0f9      	beq.n	10004500 <usbd_control_xfer_cb+0x18>
1000450c:	0029      	movs	r1, r5
1000450e:	f000 f973 	bl	100047f8 <dcd_edpt0_status_complete>
10004512:	e7f5      	b.n	10004500 <usbd_control_xfer_cb+0x18>
  if ( _ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_OUT )
10004514:	2b7f      	cmp	r3, #127	; 0x7f
10004516:	d806      	bhi.n	10004526 <usbd_control_xfer_cb+0x3e>
    TU_VERIFY(_ctrl_xfer.buffer);
10004518:	68a8      	ldr	r0, [r5, #8]
1000451a:	2800      	cmp	r0, #0
1000451c:	d038      	beq.n	10004590 <usbd_control_xfer_cb+0xa8>
    memcpy(_ctrl_xfer.buffer, _usbd_ctrl_buf, xferred_bytes);
1000451e:	0022      	movs	r2, r4
10004520:	492b      	ldr	r1, [pc, #172]	; (100045d0 <usbd_control_xfer_cb+0xe8>)
10004522:	f7fc fa39 	bl	10000998 <__wrap___aeabi_memcpy>
  _ctrl_xfer.buffer += xferred_bytes;
10004526:	68ab      	ldr	r3, [r5, #8]
  _ctrl_xfer.total_xferred += xferred_bytes;
10004528:	89ea      	ldrh	r2, [r5, #14]
  _ctrl_xfer.buffer += xferred_bytes;
1000452a:	1919      	adds	r1, r3, r4
  _ctrl_xfer.total_xferred += xferred_bytes;
1000452c:	1912      	adds	r2, r2, r4
  if ( (_ctrl_xfer.request.wLength == _ctrl_xfer.total_xferred) || (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE) )
1000452e:	88eb      	ldrh	r3, [r5, #6]
  _ctrl_xfer.total_xferred += xferred_bytes;
10004530:	b292      	uxth	r2, r2
10004532:	81ea      	strh	r2, [r5, #14]
  _ctrl_xfer.buffer += xferred_bytes;
10004534:	60a9      	str	r1, [r5, #8]
  if ( (_ctrl_xfer.request.wLength == _ctrl_xfer.total_xferred) || (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE) )
10004536:	4293      	cmp	r3, r2
10004538:	d015      	beq.n	10004566 <usbd_control_xfer_cb+0x7e>
1000453a:	2c3f      	cmp	r4, #63	; 0x3f
1000453c:	d913      	bls.n	10004566 <usbd_control_xfer_cb+0x7e>
  uint16_t const xact_len = tu_min16(_ctrl_xfer.data_len - _ctrl_xfer.total_xferred, CFG_TUD_ENDPOINT0_SIZE);
1000453e:	89ac      	ldrh	r4, [r5, #12]
10004540:	1aa0      	subs	r0, r4, r2
10004542:	1c07      	adds	r7, r0, #0
10004544:	b280      	uxth	r0, r0
10004546:	2840      	cmp	r0, #64	; 0x40
10004548:	d82e      	bhi.n	100045a8 <usbd_control_xfer_cb+0xc0>
  if ( _ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_IN )
1000454a:	782b      	ldrb	r3, [r5, #0]
1000454c:	b2bf      	uxth	r7, r7
1000454e:	2b7f      	cmp	r3, #127	; 0x7f
10004550:	d82c      	bhi.n	100045ac <usbd_control_xfer_cb+0xc4>
  uint8_t ep_addr = EDPT_CTRL_OUT;
10004552:	2100      	movs	r1, #0
  return dcd_edpt_xfer(rhport, ep_addr, xact_len ? _usbd_ctrl_buf : NULL, xact_len);
10004554:	42a2      	cmp	r2, r4
10004556:	d034      	beq.n	100045c2 <usbd_control_xfer_cb+0xda>
10004558:	4a1d      	ldr	r2, [pc, #116]	; (100045d0 <usbd_control_xfer_cb+0xe8>)
1000455a:	003b      	movs	r3, r7
1000455c:	0030      	movs	r0, r6
1000455e:	f000 fa0d 	bl	1000497c <dcd_edpt_xfer>
10004562:	0007      	movs	r7, r0
10004564:	e7cc      	b.n	10004500 <usbd_control_xfer_cb+0x18>
    if ( _ctrl_xfer.complete_cb )
10004566:	692b      	ldr	r3, [r5, #16]
10004568:	2b00      	cmp	r3, #0
1000456a:	d004      	beq.n	10004576 <usbd_control_xfer_cb+0x8e>
      is_ok = _ctrl_xfer.complete_cb(rhport, &_ctrl_xfer.request);
1000456c:	0029      	movs	r1, r5
1000456e:	0030      	movs	r0, r6
10004570:	4798      	blx	r3
    if ( is_ok )
10004572:	2800      	cmp	r0, #0
10004574:	d00e      	beq.n	10004594 <usbd_control_xfer_cb+0xac>
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
10004576:	227f      	movs	r2, #127	; 0x7f
10004578:	2100      	movs	r1, #0
1000457a:	782b      	ldrb	r3, [r5, #0]
  return dcd_edpt_xfer(rhport, ep_addr, NULL, 0);
1000457c:	0030      	movs	r0, r6
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
1000457e:	429a      	cmp	r2, r3
10004580:	4149      	adcs	r1, r1
  return dcd_edpt_xfer(rhport, ep_addr, NULL, 0);
10004582:	2300      	movs	r3, #0
10004584:	2200      	movs	r2, #0
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
10004586:	01c9      	lsls	r1, r1, #7
  return dcd_edpt_xfer(rhport, ep_addr, NULL, 0);
10004588:	f000 f9f8 	bl	1000497c <dcd_edpt_xfer>
1000458c:	0007      	movs	r7, r0
1000458e:	e7b7      	b.n	10004500 <usbd_control_xfer_cb+0x18>
    TU_ASSERT(0 == xferred_bytes);
10004590:	2700      	movs	r7, #0
10004592:	e7b5      	b.n	10004500 <usbd_control_xfer_cb+0x18>
      dcd_edpt_stall(rhport, EDPT_CTRL_OUT);
10004594:	2100      	movs	r1, #0
10004596:	0030      	movs	r0, r6
10004598:	f000 fa06 	bl	100049a8 <dcd_edpt_stall>
      dcd_edpt_stall(rhport, EDPT_CTRL_IN);
1000459c:	2180      	movs	r1, #128	; 0x80
1000459e:	0030      	movs	r0, r6
100045a0:	f000 fa02 	bl	100049a8 <dcd_edpt_stall>
  return true;
100045a4:	2701      	movs	r7, #1
100045a6:	e7ab      	b.n	10004500 <usbd_control_xfer_cb+0x18>
100045a8:	2740      	movs	r7, #64	; 0x40
100045aa:	e7ce      	b.n	1000454a <usbd_control_xfer_cb+0x62>
    if ( xact_len ) memcpy(_usbd_ctrl_buf, _ctrl_xfer.buffer, xact_len);
100045ac:	42a2      	cmp	r2, r4
100045ae:	d007      	beq.n	100045c0 <usbd_control_xfer_cb+0xd8>
100045b0:	4c07      	ldr	r4, [pc, #28]	; (100045d0 <usbd_control_xfer_cb+0xe8>)
100045b2:	003a      	movs	r2, r7
100045b4:	0020      	movs	r0, r4
100045b6:	f7fc f9ef 	bl	10000998 <__wrap___aeabi_memcpy>
    ep_addr = EDPT_CTRL_IN;
100045ba:	2180      	movs	r1, #128	; 0x80
  return dcd_edpt_xfer(rhport, ep_addr, xact_len ? _usbd_ctrl_buf : NULL, xact_len);
100045bc:	0022      	movs	r2, r4
100045be:	e7cc      	b.n	1000455a <usbd_control_xfer_cb+0x72>
    ep_addr = EDPT_CTRL_IN;
100045c0:	2180      	movs	r1, #128	; 0x80
  return dcd_edpt_xfer(rhport, ep_addr, xact_len ? _usbd_ctrl_buf : NULL, xact_len);
100045c2:	2200      	movs	r2, #0
100045c4:	e7c9      	b.n	1000455a <usbd_control_xfer_cb+0x72>
100045c6:	46c0      	nop			; (mov r8, r8)
100045c8:	20011dcc 	.word	0x20011dcc
100045cc:	100047f9 	.word	0x100047f9
100045d0:	20011de8 	.word	0x20011de8

100045d4 <dcd_rp2040_irq>:
    _hw_endpoint_clear_stall(ep);
}

static void dcd_rp2040_irq(void)
{
    uint32_t status = usb_hw->ints;
100045d4:	2398      	movs	r3, #152	; 0x98
{
100045d6:	b5f0      	push	{r4, r5, r6, r7, lr}
100045d8:	4645      	mov	r5, r8
100045da:	46de      	mov	lr, fp
100045dc:	4657      	mov	r7, sl
100045de:	464e      	mov	r6, r9
    uint32_t status = usb_hw->ints;
100045e0:	4a42      	ldr	r2, [pc, #264]	; (100046ec <dcd_rp2040_irq+0x118>)
{
100045e2:	b5e0      	push	{r5, r6, r7, lr}
    uint32_t status = usb_hw->ints;
100045e4:	58d3      	ldr	r3, [r2, r3]
    uint32_t handled = 0;

    if (status & USB_INTS_SETUP_REQ_BITS)
100045e6:	2480      	movs	r4, #128	; 0x80
    uint32_t status = usb_hw->ints;
100045e8:	4698      	mov	r8, r3
    if (status & USB_INTS_SETUP_REQ_BITS)
100045ea:	001d      	movs	r5, r3
100045ec:	2310      	movs	r3, #16
{
100045ee:	b085      	sub	sp, #20
100045f0:	9303      	str	r3, [sp, #12]
    if (status & USB_INTS_SETUP_REQ_BITS)
100045f2:	4643      	mov	r3, r8
100045f4:	0264      	lsls	r4, r4, #9
100045f6:	4025      	ands	r5, r4
100045f8:	4223      	tst	r3, r4
100045fa:	d014      	beq.n	10004626 <dcd_rp2040_irq+0x52>
        ep->next_pid = 1u;
100045fc:	2101      	movs	r1, #1
100045fe:	2039      	movs	r0, #57	; 0x39
        ep->stalled  = 0;
10004600:	2200      	movs	r2, #0
        ep->next_pid = 1u;
10004602:	4b3b      	ldr	r3, [pc, #236]	; (100046f0 <dcd_rp2040_irq+0x11c>)
    {
        handled |= USB_INTS_SETUP_REQ_BITS;
10004604:	0025      	movs	r5, r4
        ep->next_pid = 1u;
10004606:	5419      	strb	r1, [r3, r0]
10004608:	7159      	strb	r1, [r3, #5]
        ep->stalled  = 0;
1000460a:	3147      	adds	r1, #71	; 0x47
1000460c:	545a      	strb	r2, [r3, r1]
1000460e:	751a      	strb	r2, [r3, #20]
        uint8_t const *setup = (uint8_t const *)&usb_dpram->setup_packet;
        // Clear stall bits and reset pid
        reset_ep0();
        // Pass setup packet to tiny usb
        dcd_event_setup_received(0, setup, true);
10004610:	2000      	movs	r0, #0
10004612:	3201      	adds	r2, #1
10004614:	4937      	ldr	r1, [pc, #220]	; (100046f4 <dcd_rp2040_irq+0x120>)
10004616:	f7ff fdc3 	bl	100041a0 <dcd_event_setup_received>
        usb_hw_clear->sie_status = USB_SIE_STATUS_SETUP_REC_BITS;
1000461a:	2280      	movs	r2, #128	; 0x80
1000461c:	4b36      	ldr	r3, [pc, #216]	; (100046f8 <dcd_rp2040_irq+0x124>)
1000461e:	0292      	lsls	r2, r2, #10
10004620:	651a      	str	r2, [r3, #80]	; 0x50
10004622:	4b36      	ldr	r3, [pc, #216]	; (100046fc <dcd_rp2040_irq+0x128>)
10004624:	9303      	str	r3, [sp, #12]
    }

    if (status & USB_INTS_BUFF_STATUS_BITS)
10004626:	4643      	mov	r3, r8
10004628:	06db      	lsls	r3, r3, #27
1000462a:	d40d      	bmi.n	10004648 <dcd_rp2040_irq+0x74>
    {
        handled |= USB_INTS_BUFF_STATUS_BITS;
        hw_handle_buff_status();
    }

    if (status & USB_INTS_BUS_RESET_BITS)
1000462c:	2380      	movs	r3, #128	; 0x80
1000462e:	4642      	mov	r2, r8
10004630:	015b      	lsls	r3, r3, #5
10004632:	421a      	tst	r2, r3
10004634:	d138      	bne.n	100046a8 <dcd_rp2040_irq+0xd4>
#if TUD_OPT_RP2040_USB_DEVICE_ENUMERATION_FIX
        rp2040_usb_device_enumeration_fix();
#endif
    }

    if (status ^ handled)
10004636:	4545      	cmp	r5, r8
10004638:	d152      	bne.n	100046e0 <dcd_rp2040_irq+0x10c>
    {
        panic("Unhandled IRQ 0x%x\n", (uint) (status ^ handled));
    }
}
1000463a:	b005      	add	sp, #20
1000463c:	bcf0      	pop	{r4, r5, r6, r7}
1000463e:	46bb      	mov	fp, r7
10004640:	46b2      	mov	sl, r6
10004642:	46a9      	mov	r9, r5
10004644:	46a0      	mov	r8, r4
10004646:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint32_t remaining_buffers = usb_hw->buf_status;
10004648:	4b28      	ldr	r3, [pc, #160]	; (100046ec <dcd_rp2040_irq+0x118>)
1000464a:	6d9f      	ldr	r7, [r3, #88]	; 0x58
1000464c:	469a      	mov	sl, r3
    for (uint i = 0; remaining_buffers && i < USB_MAX_ENDPOINTS * 2; i++)
1000464e:	2f00      	cmp	r7, #0
10004650:	d024      	beq.n	1000469c <dcd_rp2040_irq+0xc8>
            usb_hw_clear->buf_status = bit;
10004652:	4b29      	ldr	r3, [pc, #164]	; (100046f8 <dcd_rp2040_irq+0x124>)
    for (uint i = 0; remaining_buffers && i < USB_MAX_ENDPOINTS * 2; i++)
10004654:	2500      	movs	r5, #0
    uint bit = 1u;
10004656:	2401      	movs	r4, #1
            usb_hw_clear->buf_status = bit;
10004658:	469b      	mov	fp, r3
1000465a:	e003      	b.n	10004664 <dcd_rp2040_irq+0x90>
        bit <<= 1u;
1000465c:	0064      	lsls	r4, r4, #1
    for (uint i = 0; remaining_buffers && i < USB_MAX_ENDPOINTS * 2; i++)
1000465e:	3501      	adds	r5, #1
10004660:	2d20      	cmp	r5, #32
10004662:	d01b      	beq.n	1000469c <dcd_rp2040_irq+0xc8>
        if (remaining_buffers & bit)
10004664:	4227      	tst	r7, r4
10004666:	d0f9      	beq.n	1000465c <dcd_rp2040_irq+0x88>
            uint __unused which = (usb_hw->buf_cpu_should_handle & bit) ? 1 : 0;
10004668:	4653      	mov	r3, sl
1000466a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
            usb_hw_clear->buf_status = bit;
1000466c:	465b      	mov	r3, fp
    return &hw_endpoints[num][in];
1000466e:	2668      	movs	r6, #104	; 0x68
10004670:	2201      	movs	r2, #1
            usb_hw_clear->buf_status = bit;
10004672:	659c      	str	r4, [r3, #88]	; 0x58
            struct hw_endpoint *ep = hw_endpoint_get_by_num(i >> 1u, !(i & 1u));
10004674:	086b      	lsrs	r3, r5, #1
    return &hw_endpoints[num][in];
10004676:	435e      	muls	r6, r3
10004678:	2334      	movs	r3, #52	; 0x34
1000467a:	4691      	mov	r9, r2
1000467c:	43aa      	bics	r2, r5
1000467e:	4353      	muls	r3, r2
10004680:	18f6      	adds	r6, r6, r3
10004682:	4b1b      	ldr	r3, [pc, #108]	; (100046f0 <dcd_rp2040_irq+0x11c>)
10004684:	469c      	mov	ip, r3
10004686:	4466      	add	r6, ip
            bool done = _hw_endpoint_xfer_continue(ep);
10004688:	0030      	movs	r0, r6
1000468a:	f000 fa3d 	bl	10004b08 <_hw_endpoint_xfer_continue>
            if (done)
1000468e:	2800      	cmp	r0, #0
10004690:	d11a      	bne.n	100046c8 <dcd_rp2040_irq+0xf4>
            remaining_buffers &= ~bit;
10004692:	43a7      	bics	r7, r4
    for (uint i = 0; remaining_buffers && i < USB_MAX_ENDPOINTS * 2; i++)
10004694:	3501      	adds	r5, #1
        bit <<= 1u;
10004696:	0064      	lsls	r4, r4, #1
    for (uint i = 0; remaining_buffers && i < USB_MAX_ENDPOINTS * 2; i++)
10004698:	2f00      	cmp	r7, #0
1000469a:	d1e1      	bne.n	10004660 <dcd_rp2040_irq+0x8c>
    if (status & USB_INTS_BUS_RESET_BITS)
1000469c:	2380      	movs	r3, #128	; 0x80
1000469e:	4642      	mov	r2, r8
100046a0:	015b      	lsls	r3, r3, #5
        handled |= USB_INTS_BUFF_STATUS_BITS;
100046a2:	9d03      	ldr	r5, [sp, #12]
    if (status & USB_INTS_BUS_RESET_BITS)
100046a4:	421a      	tst	r2, r3
100046a6:	d0c6      	beq.n	10004636 <dcd_rp2040_irq+0x62>
        assigned_address = 0;
100046a8:	2200      	movs	r2, #0
100046aa:	4915      	ldr	r1, [pc, #84]	; (10004700 <dcd_rp2040_irq+0x12c>)
        dcd_event_bus_signal(0, DCD_EVENT_BUS_RESET, true);
100046ac:	2000      	movs	r0, #0
        assigned_address = 0;
100046ae:	700a      	strb	r2, [r1, #0]
        usb_hw->dev_addr_ctrl = assigned_address;
100046b0:	490e      	ldr	r1, [pc, #56]	; (100046ec <dcd_rp2040_irq+0x118>)
        handled |= USB_INTS_BUS_RESET_BITS;
100046b2:	431d      	orrs	r5, r3
        usb_hw->dev_addr_ctrl = assigned_address;
100046b4:	600a      	str	r2, [r1, #0]
        dcd_event_bus_signal(0, DCD_EVENT_BUS_RESET, true);
100046b6:	3201      	adds	r2, #1
100046b8:	2101      	movs	r1, #1
100046ba:	f7ff fd01 	bl	100040c0 <dcd_event_bus_signal>
        usb_hw_clear->sie_status = USB_SIE_STATUS_BUS_RESET_BITS;
100046be:	2280      	movs	r2, #128	; 0x80
100046c0:	4b0d      	ldr	r3, [pc, #52]	; (100046f8 <dcd_rp2040_irq+0x124>)
100046c2:	0312      	lsls	r2, r2, #12
100046c4:	651a      	str	r2, [r3, #80]	; 0x50
100046c6:	e7b6      	b.n	10004636 <dcd_rp2040_irq+0x62>
                dcd_event_xfer_complete(0, ep->ep_addr, ep->len, XFER_RESULT_SUCCESS, true);
100046c8:	464b      	mov	r3, r9
100046ca:	69f2      	ldr	r2, [r6, #28]
100046cc:	7931      	ldrb	r1, [r6, #4]
100046ce:	2000      	movs	r0, #0
100046d0:	9300      	str	r3, [sp, #0]
100046d2:	2300      	movs	r3, #0
100046d4:	f7ff fd8c 	bl	100041f0 <dcd_event_xfer_complete>
                hw_endpoint_reset_transfer(ep);
100046d8:	0030      	movs	r0, r6
100046da:	f000 f9e9 	bl	10004ab0 <hw_endpoint_reset_transfer>
100046de:	e7d8      	b.n	10004692 <dcd_rp2040_irq+0xbe>
        panic("Unhandled IRQ 0x%x\n", (uint) (status ^ handled));
100046e0:	4641      	mov	r1, r8
100046e2:	4808      	ldr	r0, [pc, #32]	; (10004704 <dcd_rp2040_irq+0x130>)
100046e4:	4069      	eors	r1, r5
100046e6:	f7fd fb43 	bl	10001d70 <panic>
100046ea:	46c0      	nop			; (mov r8, r8)
100046ec:	50110000 	.word	0x50110000
100046f0:	200120a8 	.word	0x200120a8
100046f4:	50100000 	.word	0x50100000
100046f8:	50113000 	.word	0x50113000
100046fc:	00010010 	.word	0x00010010
10004700:	20012773 	.word	0x20012773
10004704:	1000e578 	.word	0x1000e578

10004708 <dcd_int_enable>:

    dcd_connect(rhport);
}

void dcd_int_enable(uint8_t rhport)
{
10004708:	b510      	push	{r4, lr}
    assert(rhport == 0);
    irq_set_enabled(USBCTRL_IRQ, true);
1000470a:	2101      	movs	r1, #1
1000470c:	2005      	movs	r0, #5
1000470e:	f7fc fd11 	bl	10001134 <irq_set_enabled>
}
10004712:	bd10      	pop	{r4, pc}

10004714 <dcd_set_address>:
{
    pico_trace("dcd_set_address %d %d\n", rhport, dev_addr);
    assert(rhport == 0);

    // Can't set device address in hardware until status xfer has complete
    assigned_address = dev_addr;
10004714:	4b09      	ldr	r3, [pc, #36]	; (1000473c <dcd_set_address+0x28>)
{
10004716:	b510      	push	{r4, lr}
        ep->next_pid = 1u;
10004718:	2201      	movs	r2, #1
    assigned_address = dev_addr;
1000471a:	7019      	strb	r1, [r3, #0]
        ep->next_pid = 1u;
1000471c:	2139      	movs	r1, #57	; 0x39
        ep->stalled  = 0;
1000471e:	2300      	movs	r3, #0
        ep->next_pid = 1u;
10004720:	4807      	ldr	r0, [pc, #28]	; (10004740 <dcd_set_address+0x2c>)
10004722:	5442      	strb	r2, [r0, r1]
10004724:	7142      	strb	r2, [r0, #5]
        ep->stalled  = 0;
10004726:	3247      	adds	r2, #71	; 0x47
10004728:	5483      	strb	r3, [r0, r2]
1000472a:	7503      	strb	r3, [r0, #20]
    _hw_endpoint_xfer(ep, buffer, total_bytes, start);
1000472c:	2200      	movs	r2, #0
1000472e:	2100      	movs	r1, #0
10004730:	3034      	adds	r0, #52	; 0x34
10004732:	3301      	adds	r3, #1
10004734:	f000 fa68 	bl	10004c08 <_hw_endpoint_xfer>

    ep0_0len_status();
}
10004738:	bd10      	pop	{r4, pc}
1000473a:	46c0      	nop			; (mov r8, r8)
1000473c:	20012773 	.word	0x20012773
10004740:	200120a8 	.word	0x200120a8

10004744 <dcd_connect>:
// connect by enabling internal pull-up resistor on D+/D-
void dcd_connect(uint8_t rhport)
{
    pico_info("dcd_connect %d\n", rhport);
    assert(rhport == 0);
    usb_hw_set->sie_ctrl = USB_SIE_CTRL_PULLUP_EN_BITS;
10004744:	2280      	movs	r2, #128	; 0x80
10004746:	4b02      	ldr	r3, [pc, #8]	; (10004750 <dcd_connect+0xc>)
10004748:	0252      	lsls	r2, r2, #9
1000474a:	64da      	str	r2, [r3, #76]	; 0x4c
}
1000474c:	4770      	bx	lr
1000474e:	46c0      	nop			; (mov r8, r8)
10004750:	50112000 	.word	0x50112000

10004754 <dcd_init>:
{
10004754:	b570      	push	{r4, r5, r6, lr}
10004756:	0005      	movs	r5, r0
    rp2040_usb_init();
10004758:	f000 f982 	bl	10004a60 <rp2040_usb_init>
    irq_set_exclusive_handler(USBCTRL_IRQ, dcd_rp2040_irq);
1000475c:	2005      	movs	r0, #5
1000475e:	491c      	ldr	r1, [pc, #112]	; (100047d0 <dcd_init+0x7c>)
10004760:	f7fc fd0a 	bl	10001178 <irq_set_exclusive_handler>
    memset(hw_endpoints, 0, sizeof(hw_endpoints));
10004764:	22d0      	movs	r2, #208	; 0xd0
10004766:	4c1b      	ldr	r4, [pc, #108]	; (100047d4 <dcd_init+0x80>)
10004768:	2100      	movs	r1, #0
1000476a:	0020      	movs	r0, r4
1000476c:	00d2      	lsls	r2, r2, #3
1000476e:	f7fc f90d 	bl	1000098c <__wrap_memset>
    assigned_address = 0;
10004772:	2200      	movs	r2, #0
10004774:	4b18      	ldr	r3, [pc, #96]	; (100047d8 <dcd_init+0x84>)
    next_buffer_ptr = &usb_dpram->epx_data[0];
10004776:	4919      	ldr	r1, [pc, #100]	; (100047dc <dcd_init+0x88>)
    assigned_address = 0;
10004778:	701a      	strb	r2, [r3, #0]
    next_buffer_ptr = &usb_dpram->epx_data[0];
1000477a:	4b19      	ldr	r3, [pc, #100]	; (100047e0 <dcd_init+0x8c>)
    ep->wMaxPacketSize = wMaxPacketSize;
1000477c:	2040      	movs	r0, #64	; 0x40
    next_buffer_ptr = &usb_dpram->epx_data[0];
1000477e:	6019      	str	r1, [r3, #0]
    ep->in = in;
10004780:	2635      	movs	r6, #53	; 0x35
    ep->rx = in == false;
10004782:	2301      	movs	r3, #1
        ep->buffer_control = &usb_dpram->ep_buf_ctrl[num].out;
10004784:	4917      	ldr	r1, [pc, #92]	; (100047e4 <dcd_init+0x90>)
    ep->rx = in == false;
10004786:	70e3      	strb	r3, [r4, #3]
    ep->next_pid = num == 0 ? 1u : 0u;
10004788:	7163      	strb	r3, [r4, #5]
    ep->wMaxPacketSize = wMaxPacketSize;
1000478a:	62e0      	str	r0, [r4, #44]	; 0x2c
        ep->buffer_control = &usb_dpram->ep_buf_ctrl[num].out;
1000478c:	60e1      	str	r1, [r4, #12]
    *ep->buffer_control = 0;
1000478e:	600a      	str	r2, [r1, #0]
    ep->in = in;
10004790:	55a3      	strb	r3, [r4, r6]
    ep->ep_addr = ep_addr;
10004792:	364c      	adds	r6, #76	; 0x4c
10004794:	36ff      	adds	r6, #255	; 0xff
10004796:	8726      	strh	r6, [r4, #56]	; 0x38
    ep->transfer_type = transfer_type;
10004798:	2600      	movs	r6, #0
    ep->wMaxPacketSize = wMaxPacketSize;
1000479a:	6620      	str	r0, [r4, #96]	; 0x60
    ep->transfer_type = transfer_type;
1000479c:	3024      	adds	r0, #36	; 0x24
1000479e:	5426      	strb	r6, [r4, r0]
        ep->hw_data_buf = (uint8_t*)&usb_dpram->ep0_buf_a[0];
100047a0:	4911      	ldr	r1, [pc, #68]	; (100047e8 <dcd_init+0x94>)
        ep->buffer_control = &usb_dpram->ep_buf_ctrl[num].in;
100047a2:	4812      	ldr	r0, [pc, #72]	; (100047ec <dcd_init+0x98>)
        ep->endpoint_control = NULL;
100047a4:	60a2      	str	r2, [r4, #8]
        ep->hw_data_buf = (uint8_t*)&usb_dpram->ep0_buf_a[0];
100047a6:	6121      	str	r1, [r4, #16]
    ep->configured = true;
100047a8:	7023      	strb	r3, [r4, #0]
    ep->num = num;
100047aa:	86e2      	strh	r2, [r4, #54]	; 0x36
        ep->buffer_control = &usb_dpram->ep_buf_ctrl[num].in;
100047ac:	6420      	str	r0, [r4, #64]	; 0x40
    *ep->buffer_control = 0;
100047ae:	6002      	str	r2, [r0, #0]
        ep->endpoint_control = NULL;
100047b0:	63e2      	str	r2, [r4, #60]	; 0x3c
    ep->configured = true;
100047b2:	3234      	adds	r2, #52	; 0x34
100047b4:	54a3      	strb	r3, [r4, r2]
    usb_hw->main_ctrl = USB_MAIN_CTRL_CONTROLLER_EN_BITS;
100047b6:	4a0e      	ldr	r2, [pc, #56]	; (100047f0 <dcd_init+0x9c>)
        ep->hw_data_buf = (uint8_t*)&usb_dpram->ep0_buf_a[0];
100047b8:	6461      	str	r1, [r4, #68]	; 0x44
    usb_hw->main_ctrl = USB_MAIN_CTRL_CONTROLLER_EN_BITS;
100047ba:	6413      	str	r3, [r2, #64]	; 0x40
    usb_hw->sie_ctrl = USB_SIE_CTRL_EP0_INT_1BUF_BITS; 
100047bc:	2380      	movs	r3, #128	; 0x80
100047be:	059b      	lsls	r3, r3, #22
100047c0:	64d3      	str	r3, [r2, #76]	; 0x4c
    usb_hw->inte     = USB_INTS_BUFF_STATUS_BITS | USB_INTS_BUS_RESET_BITS | USB_INTS_SETUP_REQ_BITS;
100047c2:	2390      	movs	r3, #144	; 0x90
100047c4:	490b      	ldr	r1, [pc, #44]	; (100047f4 <dcd_init+0xa0>)
    dcd_connect(rhport);
100047c6:	0028      	movs	r0, r5
    usb_hw->inte     = USB_INTS_BUFF_STATUS_BITS | USB_INTS_BUS_RESET_BITS | USB_INTS_SETUP_REQ_BITS;
100047c8:	50d1      	str	r1, [r2, r3]
    dcd_connect(rhport);
100047ca:	f7ff ffbb 	bl	10004744 <dcd_connect>
}
100047ce:	bd70      	pop	{r4, r5, r6, pc}
100047d0:	100045d5 	.word	0x100045d5
100047d4:	200120a8 	.word	0x200120a8
100047d8:	20012773 	.word	0x20012773
100047dc:	50100180 	.word	0x50100180
100047e0:	2001272c 	.word	0x2001272c
100047e4:	50100084 	.word	0x50100084
100047e8:	50100100 	.word	0x50100100
100047ec:	50100080 	.word	0x50100080
100047f0:	50110000 	.word	0x50110000
100047f4:	00011010 	.word	0x00011010

100047f8 <dcd_edpt0_status_complete>:
void dcd_edpt0_status_complete(uint8_t rhport, tusb_control_request_t const * request)
{
    pico_trace("dcd_edpt0_status_complete %d\n", rhport);
    assert(rhport == 0);

    if (request->bmRequestType_bit.recipient == TUSB_REQ_RCPT_DEVICE &&
100047f8:	780b      	ldrb	r3, [r1, #0]
100047fa:	065b      	lsls	r3, r3, #25
100047fc:	d102      	bne.n	10004804 <dcd_edpt0_status_complete+0xc>
        request->bmRequestType_bit.type == TUSB_REQ_TYPE_STANDARD &&
100047fe:	784b      	ldrb	r3, [r1, #1]
10004800:	2b05      	cmp	r3, #5
10004802:	d009      	beq.n	10004818 <dcd_edpt0_status_complete+0x20>
        ep->next_pid = 1u;
10004804:	2101      	movs	r1, #1
10004806:	2039      	movs	r0, #57	; 0x39
        ep->stalled  = 0;
10004808:	2200      	movs	r2, #0
        ep->next_pid = 1u;
1000480a:	4b06      	ldr	r3, [pc, #24]	; (10004824 <dcd_edpt0_status_complete+0x2c>)
1000480c:	7159      	strb	r1, [r3, #5]
1000480e:	5419      	strb	r1, [r3, r0]
        ep->stalled  = 0;
10004810:	3147      	adds	r1, #71	; 0x47
10004812:	751a      	strb	r2, [r3, #20]
10004814:	545a      	strb	r2, [r3, r1]
        pico_trace("Set HW address %d\n", assigned_address);
        usb_hw->dev_addr_ctrl = assigned_address;
    }

    reset_ep0();
}
10004816:	4770      	bx	lr
        usb_hw->dev_addr_ctrl = assigned_address;
10004818:	4b03      	ldr	r3, [pc, #12]	; (10004828 <dcd_edpt0_status_complete+0x30>)
1000481a:	781a      	ldrb	r2, [r3, #0]
1000481c:	4b03      	ldr	r3, [pc, #12]	; (1000482c <dcd_edpt0_status_complete+0x34>)
1000481e:	601a      	str	r2, [r3, #0]
10004820:	e7f0      	b.n	10004804 <dcd_edpt0_status_complete+0xc>
10004822:	46c0      	nop			; (mov r8, r8)
10004824:	200120a8 	.word	0x200120a8
10004828:	20012773 	.word	0x20012773
1000482c:	50110000 	.word	0x50110000

10004830 <dcd_edpt_open>:

bool dcd_edpt_open (uint8_t rhport, tusb_desc_endpoint_t const * desc_edpt)
{
10004830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10004832:	4647      	mov	r7, r8
10004834:	46ce      	mov	lr, r9
    pico_info("dcd_edpt_open %d %02x\n", rhport, desc_edpt->bEndpointAddress);
    assert(rhport == 0);
    hw_endpoint_init(desc_edpt->bEndpointAddress, desc_edpt->wMaxPacketSize.size, desc_edpt->bmAttributes.xfer);
10004836:	2307      	movs	r3, #7
{
10004838:	b580      	push	{r7, lr}
    hw_endpoint_init(desc_edpt->bEndpointAddress, desc_edpt->wMaxPacketSize.size, desc_edpt->bmAttributes.xfer);
1000483a:	7948      	ldrb	r0, [r1, #5]
1000483c:	78cc      	ldrb	r4, [r1, #3]
1000483e:	790a      	ldrb	r2, [r1, #4]
10004840:	4003      	ands	r3, r0
10004842:	788f      	ldrb	r7, [r1, #2]
10004844:	07a4      	lsls	r4, r4, #30
10004846:	021b      	lsls	r3, r3, #8
10004848:	4313      	orrs	r3, r2
1000484a:	0fa2      	lsrs	r2, r4, #30
1000484c:	4694      	mov	ip, r2
1000484e:	0014      	movs	r4, r2
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
10004850:	207f      	movs	r0, #127	; 0x7f
10004852:	b27a      	sxtb	r2, r7
10004854:	4691      	mov	r9, r2
    ep->ep_addr = ep_addr;
10004856:	2168      	movs	r1, #104	; 0x68
10004858:	2234      	movs	r2, #52	; 0x34
1000485a:	4038      	ands	r0, r7
    return &hw_endpoints[num][in];
1000485c:	09fe      	lsrs	r6, r7, #7
    ep->ep_addr = ep_addr;
1000485e:	4341      	muls	r1, r0
10004860:	4372      	muls	r2, r6
10004862:	1852      	adds	r2, r2, r1
    ep->rx = in == false;
10004864:	4649      	mov	r1, r9
10004866:	43c9      	mvns	r1, r1
    ep->ep_addr = ep_addr;
10004868:	4d3c      	ldr	r5, [pc, #240]	; (1000495c <dcd_edpt_open+0x12c>)
    ep->rx = in == false;
1000486a:	0fc9      	lsrs	r1, r1, #31
    ep->ep_addr = ep_addr;
1000486c:	18aa      	adds	r2, r5, r2
    ep->rx = in == false;
1000486e:	70d1      	strb	r1, [r2, #3]
    ep->next_pid = num == 0 ? 1u : 0u;
10004870:	4241      	negs	r1, r0
10004872:	4141      	adcs	r1, r0
    ep->ep_addr = ep_addr;
10004874:	7117      	strb	r7, [r2, #4]
    ep->in = in;
10004876:	7056      	strb	r6, [r2, #1]
    ep->num = num;
10004878:	7090      	strb	r0, [r2, #2]
    ep->next_pid = num == 0 ? 1u : 0u;
1000487a:	7151      	strb	r1, [r2, #5]
    if (transfer_type == TUSB_XFER_ISOCHRONOUS)
1000487c:	2c01      	cmp	r4, #1
1000487e:	d05f      	beq.n	10004940 <dcd_edpt_open+0x110>
        if (wMaxPacketSize > USB_MAX_PACKET_SIZE)
10004880:	2b40      	cmp	r3, #64	; 0x40
10004882:	d861      	bhi.n	10004948 <dcd_edpt_open+0x118>
    ep->wMaxPacketSize = wMaxPacketSize;
10004884:	2234      	movs	r2, #52	; 0x34
10004886:	2168      	movs	r1, #104	; 0x68
10004888:	4372      	muls	r2, r6
1000488a:	4341      	muls	r1, r0
1000488c:	1852      	adds	r2, r2, r1
1000488e:	18aa      	adds	r2, r5, r2
    ep->transfer_type = transfer_type;
10004890:	0011      	movs	r1, r2
10004892:	4667      	mov	r7, ip
10004894:	3130      	adds	r1, #48	; 0x30
10004896:	700f      	strb	r7, [r1, #0]
    if (ep->in)
10004898:	4649      	mov	r1, r9
    ep->wMaxPacketSize = wMaxPacketSize;
1000489a:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ep->in)
1000489c:	2900      	cmp	r1, #0
1000489e:	db3e      	blt.n	1000491e <dcd_edpt_open+0xee>
        ep->buffer_control = &usb_dpram->ep_buf_ctrl[num].out;
100048a0:	4f2f      	ldr	r7, [pc, #188]	; (10004960 <dcd_edpt_open+0x130>)
100048a2:	00c1      	lsls	r1, r0, #3
100048a4:	46bc      	mov	ip, r7
    *ep->buffer_control = 0;
100048a6:	2700      	movs	r7, #0
        ep->buffer_control = &usb_dpram->ep_buf_ctrl[num].out;
100048a8:	4461      	add	r1, ip
100048aa:	60d1      	str	r1, [r2, #12]
    *ep->buffer_control = 0;
100048ac:	600f      	str	r7, [r1, #0]
    if (ep->num == 0)
100048ae:	2800      	cmp	r0, #0
100048b0:	d03e      	beq.n	10004930 <dcd_edpt_open+0x100>
            ep->endpoint_control = &usb_dpram->ep_ctrl[num-1].out;
100048b2:	4f2c      	ldr	r7, [pc, #176]	; (10004964 <dcd_edpt_open+0x134>)
100048b4:	00c1      	lsls	r1, r0, #3
100048b6:	46bc      	mov	ip, r7
100048b8:	4461      	add	r1, ip
100048ba:	6091      	str	r1, [r2, #8]
    ep->hw_data_buf = next_buffer_ptr;
100048bc:	2768      	movs	r7, #104	; 0x68
100048be:	4a2a      	ldr	r2, [pc, #168]	; (10004968 <dcd_edpt_open+0x138>)
100048c0:	4347      	muls	r7, r0
100048c2:	6811      	ldr	r1, [r2, #0]
100048c4:	4690      	mov	r8, r2
100048c6:	2234      	movs	r2, #52	; 0x34
100048c8:	46bc      	mov	ip, r7
100048ca:	4372      	muls	r2, r6
100048cc:	4462      	add	r2, ip
100048ce:	18aa      	adds	r2, r5, r2
100048d0:	6111      	str	r1, [r2, #16]
    next_buffer_ptr += size;
100048d2:	2b40      	cmp	r3, #64	; 0x40
100048d4:	d200      	bcs.n	100048d8 <dcd_edpt_open+0xa8>
100048d6:	2340      	movs	r3, #64	; 0x40
    if ((uintptr_t)next_buffer_ptr & 0b111111u)
100048d8:	223f      	movs	r2, #63	; 0x3f
    next_buffer_ptr += size;
100048da:	18cb      	adds	r3, r1, r3
    if ((uintptr_t)next_buffer_ptr & 0b111111u)
100048dc:	4213      	tst	r3, r2
100048de:	d001      	beq.n	100048e4 <dcd_edpt_open+0xb4>
        fixptr &= ~0b111111u;
100048e0:	4393      	bics	r3, r2
        fixptr += 64;
100048e2:	3340      	adds	r3, #64	; 0x40
        next_buffer_ptr = (uint8_t*)fixptr;
100048e4:	4642      	mov	r2, r8
100048e6:	6013      	str	r3, [r2, #0]
}

static inline uintptr_t hw_data_offset(uint8_t *buf)
{
    // Remove usb base from buffer pointer
    return (uintptr_t)buf ^ (uintptr_t)usb_dpram;
100048e8:	4b20      	ldr	r3, [pc, #128]	; (1000496c <dcd_edpt_open+0x13c>)
    *ep->endpoint_control = reg;
100048ea:	2268      	movs	r2, #104	; 0x68
100048ec:	4059      	eors	r1, r3
100048ee:	2334      	movs	r3, #52	; 0x34
                  | (ep->transfer_type << EP_CTRL_BUFFER_TYPE_LSB)
100048f0:	06a4      	lsls	r4, r4, #26
                  | dpram_offset;
100048f2:	430c      	orrs	r4, r1
    uint32_t reg =  EP_CTRL_ENABLE_BITS
100048f4:	21a0      	movs	r1, #160	; 0xa0
    *ep->endpoint_control = reg;
100048f6:	4373      	muls	r3, r6
100048f8:	4342      	muls	r2, r0
100048fa:	189b      	adds	r3, r3, r2
100048fc:	18eb      	adds	r3, r5, r3
100048fe:	689b      	ldr	r3, [r3, #8]
    uint32_t reg =  EP_CTRL_ENABLE_BITS
10004900:	0609      	lsls	r1, r1, #24
10004902:	430c      	orrs	r4, r1
    *ep->endpoint_control = reg;
10004904:	601c      	str	r4, [r3, #0]
    ep->configured = true;
10004906:	2334      	movs	r3, #52	; 0x34
10004908:	435e      	muls	r6, r3
1000490a:	3334      	adds	r3, #52	; 0x34
1000490c:	4358      	muls	r0, r3
1000490e:	3b67      	subs	r3, #103	; 0x67
10004910:	1836      	adds	r6, r6, r0
10004912:	55ab      	strb	r3, [r5, r6]
    return true;
}
10004914:	2001      	movs	r0, #1
10004916:	bcc0      	pop	{r6, r7}
10004918:	46b9      	mov	r9, r7
1000491a:	46b0      	mov	r8, r6
1000491c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ep->buffer_control = &usb_dpram->ep_buf_ctrl[num].in;
1000491e:	4f14      	ldr	r7, [pc, #80]	; (10004970 <dcd_edpt_open+0x140>)
10004920:	00c1      	lsls	r1, r0, #3
10004922:	46bc      	mov	ip, r7
    *ep->buffer_control = 0;
10004924:	2700      	movs	r7, #0
        ep->buffer_control = &usb_dpram->ep_buf_ctrl[num].in;
10004926:	4461      	add	r1, ip
10004928:	60d1      	str	r1, [r2, #12]
    *ep->buffer_control = 0;
1000492a:	600f      	str	r7, [r1, #0]
    if (ep->num == 0)
1000492c:	2800      	cmp	r0, #0
1000492e:	d10f      	bne.n	10004950 <dcd_edpt_open+0x120>
        ep->endpoint_control = NULL;
10004930:	2334      	movs	r3, #52	; 0x34
10004932:	2200      	movs	r2, #0
10004934:	4373      	muls	r3, r6
10004936:	18eb      	adds	r3, r5, r3
10004938:	609a      	str	r2, [r3, #8]
        ep->hw_data_buf = (uint8_t*)&usb_dpram->ep0_buf_a[0];
1000493a:	4a0e      	ldr	r2, [pc, #56]	; (10004974 <dcd_edpt_open+0x144>)
1000493c:	611a      	str	r2, [r3, #16]
1000493e:	e7e2      	b.n	10004906 <dcd_edpt_open+0xd6>
        if (wMaxPacketSize > USB_MAX_ISO_PACKET_SIZE)
10004940:	2280      	movs	r2, #128	; 0x80
10004942:	00d2      	lsls	r2, r2, #3
10004944:	4293      	cmp	r3, r2
10004946:	d39d      	bcc.n	10004884 <dcd_edpt_open+0x54>
            panic("Isochronous wMaxPacketSize %d too large", wMaxPacketSize);
10004948:	0019      	movs	r1, r3
1000494a:	480b      	ldr	r0, [pc, #44]	; (10004978 <dcd_edpt_open+0x148>)
1000494c:	f7fd fa10 	bl	10001d70 <panic>
            ep->endpoint_control = &usb_dpram->ep_ctrl[num-1].in;
10004950:	4f06      	ldr	r7, [pc, #24]	; (1000496c <dcd_edpt_open+0x13c>)
10004952:	00c1      	lsls	r1, r0, #3
10004954:	46bc      	mov	ip, r7
10004956:	4461      	add	r1, ip
10004958:	6091      	str	r1, [r2, #8]
1000495a:	e7af      	b.n	100048bc <dcd_edpt_open+0x8c>
1000495c:	200120a8 	.word	0x200120a8
10004960:	50100084 	.word	0x50100084
10004964:	50100004 	.word	0x50100004
10004968:	2001272c 	.word	0x2001272c
1000496c:	50100000 	.word	0x50100000
10004970:	50100080 	.word	0x50100080
10004974:	50100100 	.word	0x50100100
10004978:	1000e58c 	.word	0x1000e58c

1000497c <dcd_edpt_xfer>:

bool dcd_edpt_xfer(uint8_t rhport, uint8_t ep_addr, uint8_t * buffer, uint16_t total_bytes)
{
1000497c:	b510      	push	{r4, lr}
1000497e:	000c      	movs	r4, r1
    return &hw_endpoints[num][in];
10004980:	2034      	movs	r0, #52	; 0x34
{
10004982:	0011      	movs	r1, r2
10004984:	001a      	movs	r2, r3
    return &hw_endpoints[num][in];
10004986:	09e3      	lsrs	r3, r4, #7
10004988:	4358      	muls	r0, r3
1000498a:	237f      	movs	r3, #127	; 0x7f
1000498c:	4023      	ands	r3, r4
1000498e:	2468      	movs	r4, #104	; 0x68
10004990:	435c      	muls	r4, r3
10004992:	4b04      	ldr	r3, [pc, #16]	; (100049a4 <dcd_edpt_xfer+0x28>)
10004994:	1900      	adds	r0, r0, r4
10004996:	18c0      	adds	r0, r0, r3
    _hw_endpoint_xfer(ep, buffer, total_bytes, start);
10004998:	2301      	movs	r3, #1
1000499a:	f000 f935 	bl	10004c08 <_hw_endpoint_xfer>
    assert(rhport == 0);
    // True means start new xfer
    hw_endpoint_xfer(ep_addr, buffer, total_bytes, true);
    return true;
}
1000499e:	2001      	movs	r0, #1
100049a0:	bd10      	pop	{r4, pc}
100049a2:	46c0      	nop			; (mov r8, r8)
100049a4:	200120a8 	.word	0x200120a8

100049a8 <dcd_edpt_stall>:

void dcd_edpt_stall (uint8_t rhport, uint8_t ep_addr)
{
100049a8:	b570      	push	{r4, r5, r6, lr}
100049aa:	257f      	movs	r5, #127	; 0x7f
    return &hw_endpoints[num][in];
100049ac:	2034      	movs	r0, #52	; 0x34
100049ae:	2368      	movs	r3, #104	; 0x68
100049b0:	400d      	ands	r5, r1
    uint8_t in = (ep_addr & TUSB_DIR_IN_MASK) ? 1 : 0;
100049b2:	09cc      	lsrs	r4, r1, #7
    return &hw_endpoints[num][in];
100049b4:	436b      	muls	r3, r5
100049b6:	4360      	muls	r0, r4
100049b8:	4e0c      	ldr	r6, [pc, #48]	; (100049ec <dcd_edpt_stall+0x44>)
100049ba:	18c0      	adds	r0, r0, r3
100049bc:	1830      	adds	r0, r6, r0
    if (ep->num == 0)
100049be:	7883      	ldrb	r3, [r0, #2]
100049c0:	2b00      	cmp	r3, #0
100049c2:	d105      	bne.n	100049d0 <dcd_edpt_stall+0x28>
        usb_hw_set->ep_stall_arm = ep->in ? USB_EP_STALL_ARM_EP0_IN_BITS : USB_EP_STALL_ARM_EP0_OUT_BITS;
100049c4:	7843      	ldrb	r3, [r0, #1]
100049c6:	425a      	negs	r2, r3
100049c8:	4153      	adcs	r3, r2
100049ca:	4a09      	ldr	r2, [pc, #36]	; (100049f0 <dcd_edpt_stall+0x48>)
100049cc:	3301      	adds	r3, #1
100049ce:	6693      	str	r3, [r2, #104]	; 0x68
    return _hw_endpoint_buffer_control_update32(ep, ~value, value);
100049d0:	2280      	movs	r2, #128	; 0x80
100049d2:	4908      	ldr	r1, [pc, #32]	; (100049f4 <dcd_edpt_stall+0x4c>)
100049d4:	0112      	lsls	r2, r2, #4
100049d6:	f000 f875 	bl	10004ac4 <_hw_endpoint_buffer_control_update32>
    ep->stalled = true;
100049da:	2134      	movs	r1, #52	; 0x34
100049dc:	2301      	movs	r3, #1
100049de:	434c      	muls	r4, r1
100049e0:	3134      	adds	r1, #52	; 0x34
100049e2:	434d      	muls	r5, r1
100049e4:	1964      	adds	r4, r4, r5
100049e6:	1934      	adds	r4, r6, r4
100049e8:	7523      	strb	r3, [r4, #20]
    pico_trace("dcd_edpt_stall %d %02x\n", rhport, ep_addr);
    assert(rhport == 0);
    hw_endpoint_stall(ep_addr);
}
100049ea:	bd70      	pop	{r4, r5, r6, pc}
100049ec:	200120a8 	.word	0x200120a8
100049f0:	50112000 	.word	0x50112000
100049f4:	fffff7ff 	.word	0xfffff7ff

100049f8 <dcd_edpt_clear_stall>:

void dcd_edpt_clear_stall (uint8_t rhport, uint8_t ep_addr)
{
100049f8:	b570      	push	{r4, r5, r6, lr}
100049fa:	257f      	movs	r5, #127	; 0x7f
    return &hw_endpoints[num][in];
100049fc:	2034      	movs	r0, #52	; 0x34
100049fe:	2368      	movs	r3, #104	; 0x68
10004a00:	400d      	ands	r5, r1
    uint8_t in = (ep_addr & TUSB_DIR_IN_MASK) ? 1 : 0;
10004a02:	09cc      	lsrs	r4, r1, #7
    return &hw_endpoints[num][in];
10004a04:	436b      	muls	r3, r5
10004a06:	4360      	muls	r0, r4
10004a08:	4e0c      	ldr	r6, [pc, #48]	; (10004a3c <dcd_edpt_clear_stall+0x44>)
10004a0a:	18c0      	adds	r0, r0, r3
10004a0c:	1830      	adds	r0, r6, r0
    if (ep->num == 0)
10004a0e:	7883      	ldrb	r3, [r0, #2]
10004a10:	2b00      	cmp	r3, #0
10004a12:	d105      	bne.n	10004a20 <dcd_edpt_clear_stall+0x28>
        usb_hw_clear->ep_stall_arm = ep->in ? USB_EP_STALL_ARM_EP0_IN_BITS : USB_EP_STALL_ARM_EP0_OUT_BITS;
10004a14:	7843      	ldrb	r3, [r0, #1]
10004a16:	425a      	negs	r2, r3
10004a18:	4153      	adcs	r3, r2
10004a1a:	4a09      	ldr	r2, [pc, #36]	; (10004a40 <dcd_edpt_clear_stall+0x48>)
10004a1c:	3301      	adds	r3, #1
10004a1e:	6693      	str	r3, [r2, #104]	; 0x68
    return _hw_endpoint_buffer_control_update32(ep, ~value, 0);
10004a20:	2200      	movs	r2, #0
10004a22:	4908      	ldr	r1, [pc, #32]	; (10004a44 <dcd_edpt_clear_stall+0x4c>)
10004a24:	f000 f84e 	bl	10004ac4 <_hw_endpoint_buffer_control_update32>
    ep->stalled = false;
10004a28:	2134      	movs	r1, #52	; 0x34
10004a2a:	2300      	movs	r3, #0
10004a2c:	434c      	muls	r4, r1
10004a2e:	3134      	adds	r1, #52	; 0x34
10004a30:	434d      	muls	r5, r1
10004a32:	1964      	adds	r4, r4, r5
10004a34:	1934      	adds	r4, r6, r4
10004a36:	7523      	strb	r3, [r4, #20]
    pico_trace("dcd_edpt_clear_stall %d %02x\n", rhport, ep_addr);
    assert(rhport == 0);
    hw_endpoint_clear_stall(ep_addr);
}
10004a38:	bd70      	pop	{r4, r5, r6, pc}
10004a3a:	46c0      	nop			; (mov r8, r8)
10004a3c:	200120a8 	.word	0x200120a8
10004a40:	50113000 	.word	0x50113000
10004a44:	fffff7ff 	.word	0xfffff7ff

10004a48 <_hw_endpoint_buffer_control_update32.part.0.isra.0>:
    }
    if (or_mask) {
        value |= or_mask;
        if (or_mask & USB_BUF_CTRL_AVAIL) {
            if (*ep->buffer_control & USB_BUF_CTRL_AVAIL) {
                panic("ep %d %s was already available", ep->num, ep_dir_string[ep->in]);
10004a48:	4b03      	ldr	r3, [pc, #12]	; (10004a58 <_hw_endpoint_buffer_control_update32.part.0.isra.0+0x10>)
10004a4a:	0080      	lsls	r0, r0, #2
10004a4c:	58c2      	ldr	r2, [r0, r3]
void _hw_endpoint_buffer_control_update32(struct hw_endpoint *ep, uint32_t and_mask, uint32_t or_mask) {
10004a4e:	b510      	push	{r4, lr}
                panic("ep %d %s was already available", ep->num, ep_dir_string[ep->in]);
10004a50:	4802      	ldr	r0, [pc, #8]	; (10004a5c <_hw_endpoint_buffer_control_update32.part.0.isra.0+0x14>)
10004a52:	f7fd f98d 	bl	10001d70 <panic>
10004a56:	46c0      	nop			; (mov r8, r8)
10004a58:	20002750 	.word	0x20002750
10004a5c:	1000e5b4 	.word	0x1000e5b4

10004a60 <rp2040_usb_init>:
10004a60:	2280      	movs	r2, #128	; 0x80
10004a62:	4b0e      	ldr	r3, [pc, #56]	; (10004a9c <rp2040_usb_init+0x3c>)
10004a64:	0452      	lsls	r2, r2, #17
{
10004a66:	b510      	push	{r4, lr}
10004a68:	601a      	str	r2, [r3, #0]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10004a6a:	4b0d      	ldr	r3, [pc, #52]	; (10004aa0 <rp2040_usb_init+0x40>)
10004a6c:	490d      	ldr	r1, [pc, #52]	; (10004aa4 <rp2040_usb_init+0x44>)
10004a6e:	601a      	str	r2, [r3, #0]
10004a70:	0010      	movs	r0, r2
10004a72:	688b      	ldr	r3, [r1, #8]
10004a74:	4398      	bics	r0, r3
10004a76:	d1fb      	bne.n	10004a70 <rp2040_usb_init+0x10>
    memset(usb_hw, 0, sizeof(*usb_hw));
10004a78:	4c0b      	ldr	r4, [pc, #44]	; (10004aa8 <rp2040_usb_init+0x48>)
10004a7a:	229c      	movs	r2, #156	; 0x9c
10004a7c:	2100      	movs	r1, #0
10004a7e:	0020      	movs	r0, r4
10004a80:	f7fb ff84 	bl	1000098c <__wrap_memset>
    memset(usb_dpram, 0, sizeof(*usb_dpram));
10004a84:	2280      	movs	r2, #128	; 0x80
10004a86:	2100      	movs	r1, #0
10004a88:	0152      	lsls	r2, r2, #5
10004a8a:	4808      	ldr	r0, [pc, #32]	; (10004aac <rp2040_usb_init+0x4c>)
10004a8c:	f7fb ff7e 	bl	1000098c <__wrap_memset>
    usb_hw->muxing    = USB_USB_MUXING_TO_PHY_BITS    | USB_USB_MUXING_SOFTCON_BITS;
10004a90:	2309      	movs	r3, #9
10004a92:	6763      	str	r3, [r4, #116]	; 0x74
    usb_hw->pwr       = USB_USB_PWR_VBUS_DETECT_BITS  | USB_USB_PWR_VBUS_DETECT_OVERRIDE_EN_BITS;
10004a94:	3303      	adds	r3, #3
10004a96:	67a3      	str	r3, [r4, #120]	; 0x78
}
10004a98:	bd10      	pop	{r4, pc}
10004a9a:	46c0      	nop			; (mov r8, r8)
10004a9c:	4000e000 	.word	0x4000e000
10004aa0:	4000f000 	.word	0x4000f000
10004aa4:	4000c000 	.word	0x4000c000
10004aa8:	50110000 	.word	0x50110000
10004aac:	50100000 	.word	0x50100000

10004ab0 <hw_endpoint_reset_transfer>:
    ep->stalled = false;
10004ab0:	2300      	movs	r3, #0
    ep->sent_setup = false;
10004ab2:	2100      	movs	r1, #0
10004ab4:	2232      	movs	r2, #50	; 0x32
    ep->stalled = false;
10004ab6:	8283      	strh	r3, [r0, #20]
    ep->sent_setup = false;
10004ab8:	5481      	strb	r1, [r0, r2]
    ep->total_len = 0;
10004aba:	6183      	str	r3, [r0, #24]
    ep->len = 0;
10004abc:	61c3      	str	r3, [r0, #28]
    ep->transfer_size = 0;
10004abe:	6203      	str	r3, [r0, #32]
    ep->user_buf = 0;
10004ac0:	6283      	str	r3, [r0, #40]	; 0x28
}
10004ac2:	4770      	bx	lr

10004ac4 <_hw_endpoint_buffer_control_update32>:
void _hw_endpoint_buffer_control_update32(struct hw_endpoint *ep, uint32_t and_mask, uint32_t or_mask) {
10004ac4:	b510      	push	{r4, lr}
        value = *ep->buffer_control & and_mask;
10004ac6:	68c3      	ldr	r3, [r0, #12]
    if (and_mask) {
10004ac8:	2900      	cmp	r1, #0
10004aca:	d001      	beq.n	10004ad0 <_hw_endpoint_buffer_control_update32+0xc>
        value = *ep->buffer_control & and_mask;
10004acc:	681c      	ldr	r4, [r3, #0]
10004ace:	4021      	ands	r1, r4
    if (or_mask) {
10004ad0:	2a00      	cmp	r2, #0
10004ad2:	d011      	beq.n	10004af8 <_hw_endpoint_buffer_control_update32+0x34>
        if (or_mask & USB_BUF_CTRL_AVAIL) {
10004ad4:	2480      	movs	r4, #128	; 0x80
10004ad6:	00e4      	lsls	r4, r4, #3
        value |= or_mask;
10004ad8:	4311      	orrs	r1, r2
        if (or_mask & USB_BUF_CTRL_AVAIL) {
10004ada:	4222      	tst	r2, r4
10004adc:	d00c      	beq.n	10004af8 <_hw_endpoint_buffer_control_update32+0x34>
            if (*ep->buffer_control & USB_BUF_CTRL_AVAIL) {
10004ade:	681a      	ldr	r2, [r3, #0]
10004ae0:	4222      	tst	r2, r4
10004ae2:	d10b      	bne.n	10004afc <_hw_endpoint_buffer_control_update32+0x38>
            }
            *ep->buffer_control = value & ~USB_BUF_CTRL_AVAIL;
10004ae4:	4a07      	ldr	r2, [pc, #28]	; (10004b04 <_hw_endpoint_buffer_control_update32+0x40>)
10004ae6:	400a      	ands	r2, r1
10004ae8:	601a      	str	r2, [r3, #0]
            // 12 cycle delay.. (should be good for 48*12Mhz = 576Mhz)
            // Don't need delay in host mode as host is in charge
#ifndef RP2040_USB_HOST_MODE
            __asm volatile (
10004aea:	e7ff      	b.n	10004aec <_hw_endpoint_buffer_control_update32+0x28>
10004aec:	e7ff      	b.n	10004aee <_hw_endpoint_buffer_control_update32+0x2a>
10004aee:	e7ff      	b.n	10004af0 <_hw_endpoint_buffer_control_update32+0x2c>
10004af0:	e7ff      	b.n	10004af2 <_hw_endpoint_buffer_control_update32+0x2e>
10004af2:	e7ff      	b.n	10004af4 <_hw_endpoint_buffer_control_update32+0x30>
10004af4:	e7ff      	b.n	10004af6 <_hw_endpoint_buffer_control_update32+0x32>
                    "1:\n"
                    : : : "memory");
#endif
        }
    }
    *ep->buffer_control = value;
10004af6:	68c3      	ldr	r3, [r0, #12]
10004af8:	6019      	str	r1, [r3, #0]
}
10004afa:	bd10      	pop	{r4, pc}
10004afc:	7881      	ldrb	r1, [r0, #2]
10004afe:	7840      	ldrb	r0, [r0, #1]
10004b00:	f7ff ffa2 	bl	10004a48 <_hw_endpoint_buffer_control_update32.part.0.isra.0>
10004b04:	fffffbff 	.word	0xfffffbff

10004b08 <_hw_endpoint_xfer_continue>:
    }
}

// Returns true if transfer is complete
bool _hw_endpoint_xfer_continue(struct hw_endpoint *ep)
{
10004b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _hw_endpoint_lock_update(ep, 1);
    // Part way through a transfer
    if (!ep->active)
10004b0a:	7d46      	ldrb	r6, [r0, #21]
{
10004b0c:	0004      	movs	r4, r0
    if (!ep->active)
10004b0e:	2e00      	cmp	r6, #0
10004b10:	d100      	bne.n	10004b14 <_hw_endpoint_xfer_continue+0xc>
10004b12:	e067      	b.n	10004be4 <_hw_endpoint_xfer_continue+0xdc>
    return *ep->buffer_control;
10004b14:	68c3      	ldr	r3, [r0, #12]
    if (!ep->rx)
10004b16:	78c0      	ldrb	r0, [r0, #3]
10004b18:	681d      	ldr	r5, [r3, #0]
    uint transferred_bytes = buf_ctrl & USB_BUF_CTRL_LEN_MASK;
10004b1a:	05ad      	lsls	r5, r5, #22
10004b1c:	0dad      	lsrs	r5, r5, #22
    if (!ep->rx)
10004b1e:	2800      	cmp	r0, #0
10004b20:	d143      	bne.n	10004baa <_hw_endpoint_xfer_continue+0xa2>
        ep->len += transferred_bytes;
10004b22:	69e3      	ldr	r3, [r4, #28]
10004b24:	18e9      	adds	r1, r5, r3
10004b26:	61e1      	str	r1, [r4, #28]

    // Update EP struct from hardware state
    _hw_endpoint_xfer_sync(ep);

    // Now we have synced our state with the hardware. Is there more data to transfer?
    uint remaining_bytes = ep->total_len - ep->len;
10004b28:	69a2      	ldr	r2, [r4, #24]
10004b2a:	1a55      	subs	r5, r2, r1
    ep->transfer_size = remaining_bytes > 64 ? 64 : remaining_bytes;
10004b2c:	2d40      	cmp	r5, #64	; 0x40
10004b2e:	d82e      	bhi.n	10004b8e <_hw_endpoint_xfer_continue+0x86>
    ep->last_buf = ep->len + ep->transfer_size == ep->total_len;
10004b30:	186b      	adds	r3, r5, r1
10004b32:	1a9b      	subs	r3, r3, r2
10004b34:	425f      	negs	r7, r3
10004b36:	417b      	adcs	r3, r7
10004b38:	2724      	movs	r7, #36	; 0x24
10004b3a:	b2db      	uxtb	r3, r3
    ep->transfer_size = remaining_bytes > 64 ? 64 : remaining_bytes;
10004b3c:	6225      	str	r5, [r4, #32]
    ep->last_buf = ep->len + ep->transfer_size == ep->total_len;
10004b3e:	55e3      	strb	r3, [r4, r7]
    _hw_endpoint_update_last_buf(ep);

    // Can happen because of programmer error so check for it
    if (ep->len > ep->total_len)
10004b40:	428a      	cmp	r2, r1
10004b42:	d34c      	bcc.n	10004bde <_hw_endpoint_xfer_continue+0xd6>
    {
        panic("Transferred more data than expected");
    }

    // If we are done then notify tinyusb
    if (ep->len == ep->total_len)
10004b44:	d049      	beq.n	10004bda <_hw_endpoint_xfer_continue+0xd2>
    if (!ep->rx)
10004b46:	2800      	cmp	r0, #0
10004b48:	d023      	beq.n	10004b92 <_hw_endpoint_xfer_continue+0x8a>
    uint32_t val = ep->transfer_size | USB_BUF_CTRL_AVAIL;
10004b4a:	2280      	movs	r2, #128	; 0x80
10004b4c:	00d2      	lsls	r2, r2, #3
10004b4e:	432a      	orrs	r2, r5
    val |= ep->next_pid ? USB_BUF_CTRL_DATA1_PID : USB_BUF_CTRL_DATA0_PID;
10004b50:	7961      	ldrb	r1, [r4, #5]
10004b52:	2900      	cmp	r1, #0
10004b54:	d002      	beq.n	10004b5c <_hw_endpoint_xfer_continue+0x54>
10004b56:	2080      	movs	r0, #128	; 0x80
10004b58:	0180      	lsls	r0, r0, #6
10004b5a:	4302      	orrs	r2, r0
    ep->next_pid ^= 1u;
10004b5c:	2001      	movs	r0, #1
10004b5e:	4041      	eors	r1, r0
10004b60:	7161      	strb	r1, [r4, #5]
    if (ep->last_buf)
10004b62:	2b00      	cmp	r3, #0
10004b64:	d002      	beq.n	10004b6c <_hw_endpoint_xfer_continue+0x64>
        val |= USB_BUF_CTRL_LAST;
10004b66:	2380      	movs	r3, #128	; 0x80
10004b68:	01db      	lsls	r3, r3, #7
10004b6a:	431a      	orrs	r2, r3
            if (*ep->buffer_control & USB_BUF_CTRL_AVAIL) {
10004b6c:	68e1      	ldr	r1, [r4, #12]
10004b6e:	680b      	ldr	r3, [r1, #0]
10004b70:	055b      	lsls	r3, r3, #21
10004b72:	d43c      	bmi.n	10004bee <_hw_endpoint_xfer_continue+0xe6>
            *ep->buffer_control = value & ~USB_BUF_CTRL_AVAIL;
10004b74:	4b20      	ldr	r3, [pc, #128]	; (10004bf8 <_hw_endpoint_xfer_continue+0xf0>)
10004b76:	4013      	ands	r3, r2
10004b78:	600b      	str	r3, [r1, #0]
            __asm volatile (
10004b7a:	e7ff      	b.n	10004b7c <_hw_endpoint_xfer_continue+0x74>
10004b7c:	e7ff      	b.n	10004b7e <_hw_endpoint_xfer_continue+0x76>
10004b7e:	e7ff      	b.n	10004b80 <_hw_endpoint_xfer_continue+0x78>
10004b80:	e7ff      	b.n	10004b82 <_hw_endpoint_xfer_continue+0x7a>
10004b82:	e7ff      	b.n	10004b84 <_hw_endpoint_xfer_continue+0x7c>
10004b84:	e7ff      	b.n	10004b86 <_hw_endpoint_xfer_continue+0x7e>
        _hw_endpoint_start_next_buffer(ep);
    }

    _hw_endpoint_lock_update(ep, -1);
    // More work to do
    return false;
10004b86:	2000      	movs	r0, #0
    *ep->buffer_control = value;
10004b88:	68e3      	ldr	r3, [r4, #12]
10004b8a:	601a      	str	r2, [r3, #0]
}
10004b8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ep->transfer_size = remaining_bytes > 64 ? 64 : remaining_bytes;
10004b8e:	2540      	movs	r5, #64	; 0x40
10004b90:	e7ce      	b.n	10004b30 <_hw_endpoint_xfer_continue+0x28>
        memcpy(ep->hw_data_buf, &ep->user_buf[ep->len], ep->transfer_size);
10004b92:	6aa3      	ldr	r3, [r4, #40]	; 0x28
10004b94:	002a      	movs	r2, r5
10004b96:	469c      	mov	ip, r3
10004b98:	6920      	ldr	r0, [r4, #16]
10004b9a:	4461      	add	r1, ip
10004b9c:	f7fb fefc 	bl	10000998 <__wrap___aeabi_memcpy>
        val |= USB_BUF_CTRL_FULL;
10004ba0:	2284      	movs	r2, #132	; 0x84
10004ba2:	0212      	lsls	r2, r2, #8
    if (ep->last_buf)
10004ba4:	5de3      	ldrb	r3, [r4, r7]
        val |= USB_BUF_CTRL_FULL;
10004ba6:	432a      	orrs	r2, r5
10004ba8:	e7d2      	b.n	10004b50 <_hw_endpoint_xfer_continue+0x48>
        memcpy(&ep->user_buf[ep->len], ep->hw_data_buf, transferred_bytes);
10004baa:	69e3      	ldr	r3, [r4, #28]
10004bac:	6aa0      	ldr	r0, [r4, #40]	; 0x28
10004bae:	469c      	mov	ip, r3
10004bb0:	6921      	ldr	r1, [r4, #16]
10004bb2:	002a      	movs	r2, r5
10004bb4:	4460      	add	r0, ip
10004bb6:	f7fb feef 	bl	10000998 <__wrap___aeabi_memcpy>
        ep->len += transferred_bytes;
10004bba:	69e3      	ldr	r3, [r4, #28]
    if ((ep->rx) && (transferred_bytes < ep->transfer_size))
10004bbc:	78e0      	ldrb	r0, [r4, #3]
        ep->len += transferred_bytes;
10004bbe:	18e9      	adds	r1, r5, r3
10004bc0:	61e1      	str	r1, [r4, #28]
    if ((ep->rx) && (transferred_bytes < ep->transfer_size))
10004bc2:	2800      	cmp	r0, #0
10004bc4:	d0b0      	beq.n	10004b28 <_hw_endpoint_xfer_continue+0x20>
10004bc6:	6a23      	ldr	r3, [r4, #32]
10004bc8:	429d      	cmp	r5, r3
10004bca:	d2ad      	bcs.n	10004b28 <_hw_endpoint_xfer_continue+0x20>
    ep->transfer_size = remaining_bytes > 64 ? 64 : remaining_bytes;
10004bcc:	2300      	movs	r3, #0
    ep->last_buf = ep->len + ep->transfer_size == ep->total_len;
10004bce:	2201      	movs	r2, #1
    ep->transfer_size = remaining_bytes > 64 ? 64 : remaining_bytes;
10004bd0:	6223      	str	r3, [r4, #32]
    ep->last_buf = ep->len + ep->transfer_size == ep->total_len;
10004bd2:	3324      	adds	r3, #36	; 0x24
        ep->total_len = ep->len;
10004bd4:	61a1      	str	r1, [r4, #24]
    ep->last_buf = ep->len + ep->transfer_size == ep->total_len;
10004bd6:	54e2      	strb	r2, [r4, r3]
    if (ep->len > ep->total_len)
10004bd8:	e7d8      	b.n	10004b8c <_hw_endpoint_xfer_continue+0x84>
        return true;
10004bda:	0030      	movs	r0, r6
10004bdc:	e7d6      	b.n	10004b8c <_hw_endpoint_xfer_continue+0x84>
        panic("Transferred more data than expected");
10004bde:	4807      	ldr	r0, [pc, #28]	; (10004bfc <_hw_endpoint_xfer_continue+0xf4>)
10004be0:	f7fd f8c6 	bl	10001d70 <panic>
        panic("Can't continue xfer on inactive ep %d %s", ep->num, ep_dir_string);
10004be4:	7881      	ldrb	r1, [r0, #2]
10004be6:	4a06      	ldr	r2, [pc, #24]	; (10004c00 <_hw_endpoint_xfer_continue+0xf8>)
10004be8:	4806      	ldr	r0, [pc, #24]	; (10004c04 <_hw_endpoint_xfer_continue+0xfc>)
10004bea:	f7fd f8c1 	bl	10001d70 <panic>
10004bee:	78a1      	ldrb	r1, [r4, #2]
10004bf0:	7860      	ldrb	r0, [r4, #1]
10004bf2:	f7ff ff29 	bl	10004a48 <_hw_endpoint_buffer_control_update32.part.0.isra.0>
10004bf6:	46c0      	nop			; (mov r8, r8)
10004bf8:	fffffbff 	.word	0xfffffbff
10004bfc:	1000e600 	.word	0x1000e600
10004c00:	20002750 	.word	0x20002750
10004c04:	1000e5d4 	.word	0x1000e5d4

10004c08 <_hw_endpoint_xfer>:

void _hw_endpoint_xfer(struct hw_endpoint *ep, uint8_t *buffer, uint16_t total_len, bool start)
{
10004c08:	b570      	push	{r4, r5, r6, lr}
10004c0a:	0004      	movs	r4, r0
    pico_trace(" total_len %d, start=%d\n", total_len, start);

    assert(ep->configured);


    if (start)
10004c0c:	2b00      	cmp	r3, #0
10004c0e:	d049      	beq.n	10004ca4 <_hw_endpoint_xfer+0x9c>
    if (ep->active)
10004c10:	7d43      	ldrb	r3, [r0, #21]
10004c12:	2b00      	cmp	r3, #0
10004c14:	d003      	beq.n	10004c1e <_hw_endpoint_xfer+0x16>
    ep->stalled = false;
10004c16:	2300      	movs	r3, #0
10004c18:	7503      	strb	r3, [r0, #20]
    ep->sent_setup = false;
10004c1a:	2032      	movs	r0, #50	; 0x32
10004c1c:	5423      	strb	r3, [r4, r0]
    ep->len = 0;
10004c1e:	2300      	movs	r3, #0
    ep->total_len = total_len;
10004c20:	61a2      	str	r2, [r4, #24]
    ep->len = 0;
10004c22:	61e3      	str	r3, [r4, #28]
    ep->transfer_size = total_len > 64 ? 64 : total_len;
10004c24:	1c15      	adds	r5, r2, #0
10004c26:	2a40      	cmp	r2, #64	; 0x40
10004c28:	d831      	bhi.n	10004c8e <_hw_endpoint_xfer+0x86>
    ep->active = true;
10004c2a:	2301      	movs	r3, #1
    ep->transfer_size = total_len > 64 ? 64 : total_len;
10004c2c:	b2ad      	uxth	r5, r5
    ep->last_buf = ep->len + ep->transfer_size == ep->total_len;
10004c2e:	1b52      	subs	r2, r2, r5
    ep->active = true;
10004c30:	7563      	strb	r3, [r4, #21]
    ep->last_buf = ep->len + ep->transfer_size == ep->total_len;
10004c32:	4253      	negs	r3, r2
10004c34:	415a      	adcs	r2, r3
10004c36:	2624      	movs	r6, #36	; 0x24
    ep->buf_sel = 0;
10004c38:	2325      	movs	r3, #37	; 0x25
10004c3a:	2000      	movs	r0, #0
    ep->last_buf = ep->len + ep->transfer_size == ep->total_len;
10004c3c:	b2d2      	uxtb	r2, r2
    ep->transfer_size = total_len > 64 ? 64 : total_len;
10004c3e:	6225      	str	r5, [r4, #32]
    ep->user_buf = buffer;
10004c40:	62a1      	str	r1, [r4, #40]	; 0x28
    ep->last_buf = ep->len + ep->transfer_size == ep->total_len;
10004c42:	55a2      	strb	r2, [r4, r6]
    ep->buf_sel = 0;
10004c44:	54e0      	strb	r0, [r4, r3]
    if (!ep->rx)
10004c46:	78e3      	ldrb	r3, [r4, #3]
10004c48:	2b00      	cmp	r3, #0
10004c4a:	d022      	beq.n	10004c92 <_hw_endpoint_xfer+0x8a>
    uint32_t val = ep->transfer_size | USB_BUF_CTRL_AVAIL;
10004c4c:	2380      	movs	r3, #128	; 0x80
10004c4e:	00db      	lsls	r3, r3, #3
10004c50:	432b      	orrs	r3, r5
    val |= ep->next_pid ? USB_BUF_CTRL_DATA1_PID : USB_BUF_CTRL_DATA0_PID;
10004c52:	7961      	ldrb	r1, [r4, #5]
10004c54:	2900      	cmp	r1, #0
10004c56:	d002      	beq.n	10004c5e <_hw_endpoint_xfer+0x56>
10004c58:	2080      	movs	r0, #128	; 0x80
10004c5a:	0180      	lsls	r0, r0, #6
10004c5c:	4303      	orrs	r3, r0
    ep->next_pid ^= 1u;
10004c5e:	2001      	movs	r0, #1
10004c60:	4041      	eors	r1, r0
10004c62:	7161      	strb	r1, [r4, #5]
    if (ep->last_buf)
10004c64:	2a00      	cmp	r2, #0
10004c66:	d002      	beq.n	10004c6e <_hw_endpoint_xfer+0x66>
        val |= USB_BUF_CTRL_LAST;
10004c68:	2280      	movs	r2, #128	; 0x80
10004c6a:	01d2      	lsls	r2, r2, #7
10004c6c:	4313      	orrs	r3, r2
            if (*ep->buffer_control & USB_BUF_CTRL_AVAIL) {
10004c6e:	68e1      	ldr	r1, [r4, #12]
10004c70:	680a      	ldr	r2, [r1, #0]
10004c72:	0552      	lsls	r2, r2, #21
10004c74:	d419      	bmi.n	10004caa <_hw_endpoint_xfer+0xa2>
            *ep->buffer_control = value & ~USB_BUF_CTRL_AVAIL;
10004c76:	4a0f      	ldr	r2, [pc, #60]	; (10004cb4 <_hw_endpoint_xfer+0xac>)
10004c78:	401a      	ands	r2, r3
10004c7a:	600a      	str	r2, [r1, #0]
            __asm volatile (
10004c7c:	e7ff      	b.n	10004c7e <_hw_endpoint_xfer+0x76>
10004c7e:	e7ff      	b.n	10004c80 <_hw_endpoint_xfer+0x78>
10004c80:	e7ff      	b.n	10004c82 <_hw_endpoint_xfer+0x7a>
10004c82:	e7ff      	b.n	10004c84 <_hw_endpoint_xfer+0x7c>
10004c84:	e7ff      	b.n	10004c86 <_hw_endpoint_xfer+0x7e>
10004c86:	e7ff      	b.n	10004c88 <_hw_endpoint_xfer+0x80>
    *ep->buffer_control = value;
10004c88:	68e2      	ldr	r2, [r4, #12]
10004c8a:	6013      	str	r3, [r2, #0]
    }
    else
    {
        _hw_endpoint_xfer_continue(ep);
    }
}
10004c8c:	bd70      	pop	{r4, r5, r6, pc}
    ep->transfer_size = total_len > 64 ? 64 : total_len;
10004c8e:	2540      	movs	r5, #64	; 0x40
10004c90:	e7cb      	b.n	10004c2a <_hw_endpoint_xfer+0x22>
        memcpy(ep->hw_data_buf, &ep->user_buf[ep->len], ep->transfer_size);
10004c92:	002a      	movs	r2, r5
10004c94:	6920      	ldr	r0, [r4, #16]
10004c96:	f7fb fe7f 	bl	10000998 <__wrap___aeabi_memcpy>
        val |= USB_BUF_CTRL_FULL;
10004c9a:	2384      	movs	r3, #132	; 0x84
10004c9c:	021b      	lsls	r3, r3, #8
    if (ep->last_buf)
10004c9e:	5da2      	ldrb	r2, [r4, r6]
        val |= USB_BUF_CTRL_FULL;
10004ca0:	432b      	orrs	r3, r5
10004ca2:	e7d6      	b.n	10004c52 <_hw_endpoint_xfer+0x4a>
        _hw_endpoint_xfer_continue(ep);
10004ca4:	f7ff ff30 	bl	10004b08 <_hw_endpoint_xfer_continue>
}
10004ca8:	e7f0      	b.n	10004c8c <_hw_endpoint_xfer+0x84>
10004caa:	78a1      	ldrb	r1, [r4, #2]
10004cac:	7860      	ldrb	r0, [r4, #1]
10004cae:	f7ff fecb 	bl	10004a48 <_hw_endpoint_buffer_control_update32.part.0.isra.0>
10004cb2:	46c0      	nop			; (mov r8, r8)
10004cb4:	fffffbff 	.word	0xfffffbff

10004cb8 <tusb_init>:
#if TUSB_OPT_DEVICE_ENABLED
#include "device/usbd_pvt.h"
#endif

bool tusb_init(void)
{
10004cb8:	b570      	push	{r4, r5, r6, lr}
  // skip if already initialized
  if (_initialized) return true;
10004cba:	4d06      	ldr	r5, [pc, #24]	; (10004cd4 <tusb_init+0x1c>)
10004cbc:	782c      	ldrb	r4, [r5, #0]
10004cbe:	2c00      	cmp	r4, #0
10004cc0:	d001      	beq.n	10004cc6 <tusb_init+0xe>
#endif

  _initialized = true;

  return TUSB_ERROR_NONE;
}
10004cc2:	0020      	movs	r0, r4
10004cc4:	bd70      	pop	{r4, r5, r6, pc}
  TU_ASSERT ( tud_init() ); // init device stack
10004cc6:	f7fe fda1 	bl	1000380c <tud_init>
10004cca:	2800      	cmp	r0, #0
10004ccc:	d0f9      	beq.n	10004cc2 <tusb_init+0xa>
  _initialized = true;
10004cce:	2301      	movs	r3, #1
10004cd0:	702b      	strb	r3, [r5, #0]
  return TUSB_ERROR_NONE;
10004cd2:	e7f6      	b.n	10004cc2 <tusb_init+0xa>
10004cd4:	20012772 	.word	0x20012772

10004cd8 <tusb_inited>:

bool tusb_inited(void)
{
  return _initialized;
10004cd8:	4b01      	ldr	r3, [pc, #4]	; (10004ce0 <tusb_inited+0x8>)
10004cda:	7818      	ldrb	r0, [r3, #0]
}
10004cdc:	4770      	bx	lr
10004cde:	46c0      	nop			; (mov r8, r8)
10004ce0:	20012772 	.word	0x20012772

10004ce4 <_Z11CheckBrickXaah.part.0>:
	}
	return res;
}

// check brick with moving to left and right
Bool CheckBrickX(s8 x, s8 y, u8 brick)
10004ce4:	b5f0      	push	{r4, r5, r6, r7, lr}
10004ce6:	464e      	mov	r6, r9
10004ce8:	4645      	mov	r5, r8
10004cea:	46de      	mov	lr, fp
10004cec:	4657      	mov	r7, sl
10004cee:	b5e0      	push	{r5, r6, r7, lr}
{
	if (CheckBrickSave(x, y, brick)) return True;
	if (CheckBrickSave(x-1, y, brick)) return True;
10004cf0:	b2c3      	uxtb	r3, r0
Bool CheckBrickX(s8 x, s8 y, u8 brick)
10004cf2:	b091      	sub	sp, #68	; 0x44
	if (CheckBrickSave(x-1, y, brick)) return True;
10004cf4:	1e5e      	subs	r6, r3, #1
Bool CheckBrickX(s8 x, s8 y, u8 brick)
10004cf6:	920c      	str	r2, [sp, #48]	; 0x30
	if (CheckBrickSave(x-1, y, brick)) return True;
10004cf8:	9302      	str	r3, [sp, #8]
	const u8* s = &BrickTemp[brick*BRICKTEMPSIZE];
10004cfa:	0113      	lsls	r3, r2, #4
	u8* d = &Board[x + y*MAPW];
10004cfc:	004a      	lsls	r2, r1, #1
10004cfe:	1852      	adds	r2, r2, r1
10004d00:	00d5      	lsls	r5, r2, #3
10004d02:	1955      	adds	r5, r2, r5
	if (CheckBrickSave(x-1, y, brick)) return True;
10004d04:	b276      	sxtb	r6, r6
	u8* d = &Board[x + y*MAPW];
10004d06:	46ac      	mov	ip, r5
10004d08:	0032      	movs	r2, r6
10004d0a:	9503      	str	r5, [sp, #12]
10004d0c:	4dc0      	ldr	r5, [pc, #768]	; (10005010 <_Z11CheckBrickXaah.part.0+0x32c>)
10004d0e:	4462      	add	r2, ip
10004d10:	46ac      	mov	ip, r5
	const u8* s = &BrickTemp[brick*BRICKTEMPSIZE];
10004d12:	48c0      	ldr	r0, [pc, #768]	; (10005014 <_Z11CheckBrickXaah.part.0+0x330>)
	if (CheckBrickSave(x-1, y, brick)) return True;
10004d14:	960f      	str	r6, [sp, #60]	; 0x3c
	const u8* s = &BrickTemp[brick*BRICKTEMPSIZE];
10004d16:	181c      	adds	r4, r3, r0
			b = *s++;
10004d18:	5cc3      	ldrb	r3, [r0, r3]
	u8* d = &Board[x + y*MAPW];
10004d1a:	4462      	add	r2, ip
			b = *s++;
10004d1c:	9304      	str	r3, [sp, #16]
			if (b != 0)
10004d1e:	2b00      	cmp	r3, #0
10004d20:	d000      	beq.n	10004d24 <_Z11CheckBrickXaah.part.0+0x40>
10004d22:	e1eb      	b.n	100050fc <_Z11CheckBrickXaah.part.0+0x418>
10004d24:	7865      	ldrb	r5, [r4, #1]
	Bool ok = True;
10004d26:	2001      	movs	r0, #1
				if ((y < 1) || (y >= MAPH-1))
10004d28:	b2cb      	uxtb	r3, r1
			if (b != 0)
10004d2a:	9506      	str	r5, [sp, #24]
10004d2c:	2d00      	cmp	r5, #0
10004d2e:	d004      	beq.n	10004d3a <_Z11CheckBrickXaah.part.0+0x56>
				if ((y < 1) || (y >= MAPH-1))
10004d30:	1e5d      	subs	r5, r3, #1
10004d32:	2d11      	cmp	r5, #17
10004d34:	d800      	bhi.n	10004d38 <_Z11CheckBrickXaah.part.0+0x54>
10004d36:	e1f0      	b.n	1000511a <_Z11CheckBrickXaah.part.0+0x436>
					ok = False;
10004d38:	2000      	movs	r0, #0
			if (b != 0)
10004d3a:	78a5      	ldrb	r5, [r4, #2]
10004d3c:	9508      	str	r5, [sp, #32]
10004d3e:	2d00      	cmp	r5, #0
10004d40:	d004      	beq.n	10004d4c <_Z11CheckBrickXaah.part.0+0x68>
				if ((y < 1) || (y >= MAPH-1))
10004d42:	1e5d      	subs	r5, r3, #1
10004d44:	2d11      	cmp	r5, #17
10004d46:	d800      	bhi.n	10004d4a <_Z11CheckBrickXaah.part.0+0x66>
10004d48:	e1f2      	b.n	10005130 <_Z11CheckBrickXaah.part.0+0x44c>
					ok = False;
10004d4a:	2000      	movs	r0, #0
			b = *s++;
10004d4c:	1d25      	adds	r5, r4, #4
			if (b != 0)
10004d4e:	78e4      	ldrb	r4, [r4, #3]
10004d50:	9407      	str	r4, [sp, #28]
10004d52:	2c00      	cmp	r4, #0
10004d54:	d004      	beq.n	10004d60 <_Z11CheckBrickXaah.part.0+0x7c>
				if ((y < 1) || (y >= MAPH-1))
10004d56:	1e5c      	subs	r4, r3, #1
10004d58:	2c11      	cmp	r4, #17
10004d5a:	d800      	bhi.n	10004d5e <_Z11CheckBrickXaah.part.0+0x7a>
10004d5c:	e1f4      	b.n	10005148 <_Z11CheckBrickXaah.part.0+0x464>
					ok = False;
10004d5e:	2000      	movs	r0, #0
			b = *s++;
10004d60:	782e      	ldrb	r6, [r5, #0]
		y++;
10004d62:	1c5c      	adds	r4, r3, #1
10004d64:	b2e4      	uxtb	r4, r4
10004d66:	9400      	str	r4, [sp, #0]
			b = *s++;
10004d68:	9605      	str	r6, [sp, #20]
			if (b != 0)
10004d6a:	2e00      	cmp	r6, #0
10004d6c:	d066      	beq.n	10004e3c <_Z11CheckBrickXaah.part.0+0x158>
				if ((y < 1) || (y >= MAPH-1))
10004d6e:	2b11      	cmp	r3, #17
10004d70:	d900      	bls.n	10004d74 <_Z11CheckBrickXaah.part.0+0x90>
10004d72:	e17f      	b.n	10005074 <_Z11CheckBrickXaah.part.0+0x390>
					if (*d != TILE_EMPTY) ok = False;
10004d74:	7ed7      	ldrb	r7, [r2, #27]
			if (b != 0)
10004d76:	786c      	ldrb	r4, [r5, #1]
					if (*d != TILE_EMPTY) ok = False;
10004d78:	3f08      	subs	r7, #8
10004d7a:	427e      	negs	r6, r7
10004d7c:	4177      	adcs	r7, r6
10004d7e:	427f      	negs	r7, r7
10004d80:	4038      	ands	r0, r7
			if (b != 0)
10004d82:	9409      	str	r4, [sp, #36]	; 0x24
10004d84:	2c00      	cmp	r4, #0
10004d86:	d000      	beq.n	10004d8a <_Z11CheckBrickXaah.part.0+0xa6>
10004d88:	e117      	b.n	10004fba <_Z11CheckBrickXaah.part.0+0x2d6>
10004d8a:	78af      	ldrb	r7, [r5, #2]
10004d8c:	2f00      	cmp	r7, #0
10004d8e:	d000      	beq.n	10004d92 <_Z11CheckBrickXaah.part.0+0xae>
10004d90:	e17b      	b.n	1000508a <_Z11CheckBrickXaah.part.0+0x3a6>
10004d92:	78ec      	ldrb	r4, [r5, #3]
			b = *s++;
10004d94:	1d2e      	adds	r6, r5, #4
			if (b != 0)
10004d96:	940d      	str	r4, [sp, #52]	; 0x34
10004d98:	2c00      	cmp	r4, #0
10004d9a:	d061      	beq.n	10004e60 <_Z11CheckBrickXaah.part.0+0x17c>
					if (*d != TILE_EMPTY) ok = False;
10004d9c:	7f95      	ldrb	r5, [r2, #30]
10004d9e:	3d08      	subs	r5, #8
10004da0:	002c      	movs	r4, r5
10004da2:	4265      	negs	r5, r4
10004da4:	4165      	adcs	r5, r4
10004da6:	426d      	negs	r5, r5
10004da8:	4028      	ands	r0, r5
		y++;
10004daa:	1c9d      	adds	r5, r3, #2
10004dac:	b2ed      	uxtb	r5, r5
10004dae:	9501      	str	r5, [sp, #4]
			b = *s++;
10004db0:	7835      	ldrb	r5, [r6, #0]
10004db2:	46a8      	mov	r8, r5
			if (b != 0)
10004db4:	2d00      	cmp	r5, #0
10004db6:	d15a      	bne.n	10004e6e <_Z11CheckBrickXaah.part.0+0x18a>
10004db8:	7875      	ldrb	r5, [r6, #1]
10004dba:	950a      	str	r5, [sp, #40]	; 0x28
10004dbc:	2d00      	cmp	r5, #0
10004dbe:	d100      	bne.n	10004dc2 <_Z11CheckBrickXaah.part.0+0xde>
10004dc0:	e17d      	b.n	100050be <_Z11CheckBrickXaah.part.0+0x3da>
				if ((y < 1) || (y >= MAPH-1))
10004dc2:	9c00      	ldr	r4, [sp, #0]
10004dc4:	2c11      	cmp	r4, #17
10004dc6:	d800      	bhi.n	10004dca <_Z11CheckBrickXaah.part.0+0xe6>
10004dc8:	e10a      	b.n	10004fe0 <_Z11CheckBrickXaah.part.0+0x2fc>
			b = *s++;
10004dca:	78b0      	ldrb	r0, [r6, #2]
10004dcc:	4684      	mov	ip, r0
			if (b != 0)
10004dce:	2800      	cmp	r0, #0
10004dd0:	d100      	bne.n	10004dd4 <_Z11CheckBrickXaah.part.0+0xf0>
10004dd2:	e111      	b.n	10004ff8 <_Z11CheckBrickXaah.part.0+0x314>
			b = *s++;
10004dd4:	78f0      	ldrb	r0, [r6, #3]
10004dd6:	1d35      	adds	r5, r6, #4
10004dd8:	900e      	str	r0, [sp, #56]	; 0x38
			if (b != 0)
10004dda:	2800      	cmp	r0, #0
10004ddc:	d000      	beq.n	10004de0 <_Z11CheckBrickXaah.part.0+0xfc>
					ok = False;
10004dde:	2000      	movs	r0, #0
			b = *s++;
10004de0:	782e      	ldrb	r6, [r5, #0]
10004de2:	46b1      	mov	r9, r6
			if (b != 0)
10004de4:	2e00      	cmp	r6, #0
10004de6:	d069      	beq.n	10004ebc <_Z11CheckBrickXaah.part.0+0x1d8>
				if ((y < 1) || (y >= MAPH-1))
10004de8:	9c01      	ldr	r4, [sp, #4]
10004dea:	2c11      	cmp	r4, #17
10004dec:	d900      	bls.n	10004df0 <_Z11CheckBrickXaah.part.0+0x10c>
10004dee:	e12a      	b.n	10005046 <_Z11CheckBrickXaah.part.0+0x362>
					if (*d != TILE_EMPTY) ok = False;
10004df0:	2651      	movs	r6, #81	; 0x51
10004df2:	5d96      	ldrb	r6, [r2, r6]
10004df4:	3e08      	subs	r6, #8
10004df6:	0034      	movs	r4, r6
10004df8:	4266      	negs	r6, r4
10004dfa:	4166      	adcs	r6, r4
			if (b != 0)
10004dfc:	786c      	ldrb	r4, [r5, #1]
					if (*d != TILE_EMPTY) ok = False;
10004dfe:	4276      	negs	r6, r6
10004e00:	4030      	ands	r0, r6
			if (b != 0)
10004e02:	940b      	str	r4, [sp, #44]	; 0x2c
10004e04:	2c00      	cmp	r4, #0
10004e06:	d000      	beq.n	10004e0a <_Z11CheckBrickXaah.part.0+0x126>
10004e08:	e10c      	b.n	10005024 <_Z11CheckBrickXaah.part.0+0x340>
10004e0a:	78ae      	ldrb	r6, [r5, #2]
10004e0c:	2e00      	cmp	r6, #0
10004e0e:	d000      	beq.n	10004e12 <_Z11CheckBrickXaah.part.0+0x12e>
10004e10:	e113      	b.n	1000503a <_Z11CheckBrickXaah.part.0+0x356>
10004e12:	78ee      	ldrb	r6, [r5, #3]
10004e14:	2e00      	cmp	r6, #0
10004e16:	d000      	beq.n	10004e1a <_Z11CheckBrickXaah.part.0+0x136>
10004e18:	e126      	b.n	10005068 <_Z11CheckBrickXaah.part.0+0x384>
	if (res)
10004e1a:	2800      	cmp	r0, #0
10004e1c:	d057      	beq.n	10004ece <_Z11CheckBrickXaah.part.0+0x1ea>
		BrickX = x;
10004e1e:	4b7e      	ldr	r3, [pc, #504]	; (10005018 <_Z11CheckBrickXaah.part.0+0x334>)
10004e20:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
10004e22:	701a      	strb	r2, [r3, #0]
		BrickY = y;
10004e24:	4b7d      	ldr	r3, [pc, #500]	; (1000501c <_Z11CheckBrickXaah.part.0+0x338>)
		Brick = brick;
10004e26:	9a0c      	ldr	r2, [sp, #48]	; 0x30
		BrickY = y;
10004e28:	7019      	strb	r1, [r3, #0]
		Brick = brick;
10004e2a:	4b7d      	ldr	r3, [pc, #500]	; (10005020 <_Z11CheckBrickXaah.part.0+0x33c>)
10004e2c:	701a      	strb	r2, [r3, #0]
	if (CheckBrickSave(x+1, y, brick)) return True;
	if (CheckBrickSave(x-2, y, brick)) return True;
	return CheckBrickSave(x+2, y, brick);
}
10004e2e:	b011      	add	sp, #68	; 0x44
10004e30:	bcf0      	pop	{r4, r5, r6, r7}
10004e32:	46bb      	mov	fp, r7
10004e34:	46b2      	mov	sl, r6
10004e36:	46a9      	mov	r9, r5
10004e38:	46a0      	mov	r8, r4
10004e3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (b != 0)
10004e3c:	786e      	ldrb	r6, [r5, #1]
10004e3e:	9609      	str	r6, [sp, #36]	; 0x24
10004e40:	2e00      	cmp	r6, #0
10004e42:	d100      	bne.n	10004e46 <_Z11CheckBrickXaah.part.0+0x162>
10004e44:	e11b      	b.n	1000507e <_Z11CheckBrickXaah.part.0+0x39a>
				if ((y < 1) || (y >= MAPH-1))
10004e46:	2b11      	cmp	r3, #17
10004e48:	d800      	bhi.n	10004e4c <_Z11CheckBrickXaah.part.0+0x168>
10004e4a:	e0b6      	b.n	10004fba <_Z11CheckBrickXaah.part.0+0x2d6>
			b = *s++;
10004e4c:	78af      	ldrb	r7, [r5, #2]
10004e4e:	1e38      	subs	r0, r7, #0
			if (b != 0)
10004e50:	d100      	bne.n	10004e54 <_Z11CheckBrickXaah.part.0+0x170>
10004e52:	e0bb      	b.n	10004fcc <_Z11CheckBrickXaah.part.0+0x2e8>
			b = *s++;
10004e54:	78e8      	ldrb	r0, [r5, #3]
10004e56:	1d2e      	adds	r6, r5, #4
10004e58:	900d      	str	r0, [sp, #52]	; 0x34
			if (b != 0)
10004e5a:	2800      	cmp	r0, #0
10004e5c:	d000      	beq.n	10004e60 <_Z11CheckBrickXaah.part.0+0x17c>
					ok = False;
10004e5e:	2000      	movs	r0, #0
		y++;
10004e60:	1c9d      	adds	r5, r3, #2
10004e62:	b2ed      	uxtb	r5, r5
10004e64:	9501      	str	r5, [sp, #4]
			b = *s++;
10004e66:	7835      	ldrb	r5, [r6, #0]
10004e68:	46a8      	mov	r8, r5
			if (b != 0)
10004e6a:	2d00      	cmp	r5, #0
10004e6c:	d0a4      	beq.n	10004db8 <_Z11CheckBrickXaah.part.0+0xd4>
				if ((y < 1) || (y >= MAPH-1))
10004e6e:	9c00      	ldr	r4, [sp, #0]
10004e70:	2c11      	cmp	r4, #17
10004e72:	d900      	bls.n	10004e76 <_Z11CheckBrickXaah.part.0+0x192>
10004e74:	e11e      	b.n	100050b4 <_Z11CheckBrickXaah.part.0+0x3d0>
					if (*d != TILE_EMPTY) ok = False;
10004e76:	2536      	movs	r5, #54	; 0x36
10004e78:	5d55      	ldrb	r5, [r2, r5]
10004e7a:	3d08      	subs	r5, #8
10004e7c:	002c      	movs	r4, r5
10004e7e:	4265      	negs	r5, r4
10004e80:	4165      	adcs	r5, r4
			if (b != 0)
10004e82:	7874      	ldrb	r4, [r6, #1]
					if (*d != TILE_EMPTY) ok = False;
10004e84:	426d      	negs	r5, r5
10004e86:	4028      	ands	r0, r5
			if (b != 0)
10004e88:	940a      	str	r4, [sp, #40]	; 0x28
10004e8a:	2c00      	cmp	r4, #0
10004e8c:	d000      	beq.n	10004e90 <_Z11CheckBrickXaah.part.0+0x1ac>
10004e8e:	e0a7      	b.n	10004fe0 <_Z11CheckBrickXaah.part.0+0x2fc>
10004e90:	78b4      	ldrb	r4, [r6, #2]
10004e92:	46a4      	mov	ip, r4
10004e94:	2c00      	cmp	r4, #0
10004e96:	d000      	beq.n	10004e9a <_Z11CheckBrickXaah.part.0+0x1b6>
10004e98:	e119      	b.n	100050ce <_Z11CheckBrickXaah.part.0+0x3ea>
10004e9a:	78f4      	ldrb	r4, [r6, #3]
			b = *s++;
10004e9c:	1d35      	adds	r5, r6, #4
			if (b != 0)
10004e9e:	940e      	str	r4, [sp, #56]	; 0x38
10004ea0:	2c00      	cmp	r4, #0
10004ea2:	d09d      	beq.n	10004de0 <_Z11CheckBrickXaah.part.0+0xfc>
					if (*d != TILE_EMPTY) ok = False;
10004ea4:	2639      	movs	r6, #57	; 0x39
10004ea6:	5d96      	ldrb	r6, [r2, r6]
10004ea8:	3e08      	subs	r6, #8
10004eaa:	0034      	movs	r4, r6
10004eac:	4266      	negs	r6, r4
10004eae:	4166      	adcs	r6, r4
10004eb0:	4276      	negs	r6, r6
10004eb2:	4030      	ands	r0, r6
			b = *s++;
10004eb4:	782e      	ldrb	r6, [r5, #0]
10004eb6:	46b1      	mov	r9, r6
			if (b != 0)
10004eb8:	2e00      	cmp	r6, #0
10004eba:	d195      	bne.n	10004de8 <_Z11CheckBrickXaah.part.0+0x104>
10004ebc:	786e      	ldrb	r6, [r5, #1]
10004ebe:	960b      	str	r6, [sp, #44]	; 0x2c
10004ec0:	2e00      	cmp	r6, #0
10004ec2:	d100      	bne.n	10004ec6 <_Z11CheckBrickXaah.part.0+0x1e2>
10004ec4:	e0c4      	b.n	10005050 <_Z11CheckBrickXaah.part.0+0x36c>
				if ((y < 1) || (y >= MAPH-1))
10004ec6:	9c01      	ldr	r4, [sp, #4]
10004ec8:	2c11      	cmp	r4, #17
10004eca:	d800      	bhi.n	10004ece <_Z11CheckBrickXaah.part.0+0x1ea>
10004ecc:	e0aa      	b.n	10005024 <_Z11CheckBrickXaah.part.0+0x340>
	if (CheckBrickSave(x+1, y, brick)) return True;
10004ece:	9a02      	ldr	r2, [sp, #8]
10004ed0:	1c56      	adds	r6, r2, #1
10004ed2:	b270      	sxtb	r0, r6
	u8* d = &Board[x + y*MAPW];
10004ed4:	4682      	mov	sl, r0
10004ed6:	9a03      	ldr	r2, [sp, #12]
	if (CheckBrickSave(x+1, y, brick)) return True;
10004ed8:	900f      	str	r0, [sp, #60]	; 0x3c
	u8* d = &Board[x + y*MAPW];
10004eda:	484d      	ldr	r0, [pc, #308]	; (10005010 <_Z11CheckBrickXaah.part.0+0x32c>)
10004edc:	4452      	add	r2, sl
10004ede:	4682      	mov	sl, r0
			if (b != 0)
10004ee0:	9804      	ldr	r0, [sp, #16]
	u8* d = &Board[x + y*MAPW];
10004ee2:	4452      	add	r2, sl
			if (b != 0)
10004ee4:	2800      	cmp	r0, #0
10004ee6:	d000      	beq.n	10004eea <_Z11CheckBrickXaah.part.0+0x206>
10004ee8:	e1d9      	b.n	1000529e <_Z11CheckBrickXaah.part.0+0x5ba>
	Bool ok = True;
10004eea:	3001      	adds	r0, #1
			if (b != 0)
10004eec:	9c06      	ldr	r4, [sp, #24]
10004eee:	2c00      	cmp	r4, #0
10004ef0:	d004      	beq.n	10004efc <_Z11CheckBrickXaah.part.0+0x218>
				if ((y < 1) || (y >= MAPH-1))
10004ef2:	1e5c      	subs	r4, r3, #1
10004ef4:	2c11      	cmp	r4, #17
10004ef6:	d800      	bhi.n	10004efa <_Z11CheckBrickXaah.part.0+0x216>
10004ef8:	e273      	b.n	100053e2 <_Z11CheckBrickXaah.part.0+0x6fe>
					ok = False;
10004efa:	2000      	movs	r0, #0
			if (b != 0)
10004efc:	9c08      	ldr	r4, [sp, #32]
10004efe:	2c00      	cmp	r4, #0
10004f00:	d004      	beq.n	10004f0c <_Z11CheckBrickXaah.part.0+0x228>
				if ((y < 1) || (y >= MAPH-1))
10004f02:	1e5c      	subs	r4, r3, #1
10004f04:	2c11      	cmp	r4, #17
10004f06:	d800      	bhi.n	10004f0a <_Z11CheckBrickXaah.part.0+0x226>
10004f08:	e27a      	b.n	10005400 <_Z11CheckBrickXaah.part.0+0x71c>
					ok = False;
10004f0a:	2000      	movs	r0, #0
			if (b != 0)
10004f0c:	9c07      	ldr	r4, [sp, #28]
10004f0e:	2c00      	cmp	r4, #0
10004f10:	d004      	beq.n	10004f1c <_Z11CheckBrickXaah.part.0+0x238>
				if ((y < 1) || (y >= MAPH-1))
10004f12:	1e5c      	subs	r4, r3, #1
10004f14:	2c11      	cmp	r4, #17
10004f16:	d800      	bhi.n	10004f1a <_Z11CheckBrickXaah.part.0+0x236>
10004f18:	e281      	b.n	1000541e <_Z11CheckBrickXaah.part.0+0x73a>
					ok = False;
10004f1a:	2000      	movs	r0, #0
			if (b != 0)
10004f1c:	9c05      	ldr	r4, [sp, #20]
10004f1e:	2c00      	cmp	r4, #0
10004f20:	d100      	bne.n	10004f24 <_Z11CheckBrickXaah.part.0+0x240>
10004f22:	e120      	b.n	10005166 <_Z11CheckBrickXaah.part.0+0x482>
				if ((y < 1) || (y >= MAPH-1))
10004f24:	2b11      	cmp	r3, #17
10004f26:	d800      	bhi.n	10004f2a <_Z11CheckBrickXaah.part.0+0x246>
10004f28:	e216      	b.n	10005358 <_Z11CheckBrickXaah.part.0+0x674>
			b = *s++;
10004f2a:	9c09      	ldr	r4, [sp, #36]	; 0x24
10004f2c:	1e20      	subs	r0, r4, #0
			if (b != 0)
10004f2e:	d100      	bne.n	10004f32 <_Z11CheckBrickXaah.part.0+0x24e>
10004f30:	e1a7      	b.n	10005282 <_Z11CheckBrickXaah.part.0+0x59e>
			b = *s++;
10004f32:	1e38      	subs	r0, r7, #0
			if (b != 0)
10004f34:	d100      	bne.n	10004f38 <_Z11CheckBrickXaah.part.0+0x254>
10004f36:	e1aa      	b.n	1000528e <_Z11CheckBrickXaah.part.0+0x5aa>
					ok = False;
10004f38:	2000      	movs	r0, #0
			if (b != 0)
10004f3a:	4644      	mov	r4, r8
10004f3c:	2c00      	cmp	r4, #0
10004f3e:	d100      	bne.n	10004f42 <_Z11CheckBrickXaah.part.0+0x25e>
10004f40:	e143      	b.n	100051ca <_Z11CheckBrickXaah.part.0+0x4e6>
				if ((y < 1) || (y >= MAPH-1))
10004f42:	9c00      	ldr	r4, [sp, #0]
10004f44:	2c11      	cmp	r4, #17
10004f46:	d900      	bls.n	10004f4a <_Z11CheckBrickXaah.part.0+0x266>
10004f48:	e1bc      	b.n	100052c4 <_Z11CheckBrickXaah.part.0+0x5e0>
					if (*d != TILE_EMPTY) ok = False;
10004f4a:	2436      	movs	r4, #54	; 0x36
10004f4c:	5d14      	ldrb	r4, [r2, r4]
10004f4e:	46a2      	mov	sl, r4
10004f50:	2408      	movs	r4, #8
10004f52:	4264      	negs	r4, r4
10004f54:	46a3      	mov	fp, r4
10004f56:	44da      	add	sl, fp
10004f58:	4656      	mov	r6, sl
10004f5a:	4274      	negs	r4, r6
10004f5c:	4174      	adcs	r4, r6
10004f5e:	4264      	negs	r4, r4
10004f60:	4020      	ands	r0, r4
			if (b != 0)
10004f62:	9c0a      	ldr	r4, [sp, #40]	; 0x28
10004f64:	2c00      	cmp	r4, #0
10004f66:	d000      	beq.n	10004f6a <_Z11CheckBrickXaah.part.0+0x286>
10004f68:	e1d2      	b.n	10005310 <_Z11CheckBrickXaah.part.0+0x62c>
10004f6a:	4664      	mov	r4, ip
10004f6c:	2c00      	cmp	r4, #0
10004f6e:	d000      	beq.n	10004f72 <_Z11CheckBrickXaah.part.0+0x28e>
10004f70:	e1b1      	b.n	100052d6 <_Z11CheckBrickXaah.part.0+0x5f2>
10004f72:	9c0e      	ldr	r4, [sp, #56]	; 0x38
10004f74:	2c00      	cmp	r4, #0
10004f76:	d000      	beq.n	10004f7a <_Z11CheckBrickXaah.part.0+0x296>
10004f78:	e1bd      	b.n	100052f6 <_Z11CheckBrickXaah.part.0+0x612>
10004f7a:	464c      	mov	r4, r9
10004f7c:	2c00      	cmp	r4, #0
10004f7e:	d100      	bne.n	10004f82 <_Z11CheckBrickXaah.part.0+0x29e>
10004f80:	e133      	b.n	100051ea <_Z11CheckBrickXaah.part.0+0x506>
				if ((y < 1) || (y >= MAPH-1))
10004f82:	9c01      	ldr	r4, [sp, #4]
10004f84:	2c11      	cmp	r4, #17
10004f86:	d800      	bhi.n	10004f8a <_Z11CheckBrickXaah.part.0+0x2a6>
10004f88:	e20f      	b.n	100053aa <_Z11CheckBrickXaah.part.0+0x6c6>
			if (b != 0)
10004f8a:	980b      	ldr	r0, [sp, #44]	; 0x2c
10004f8c:	2800      	cmp	r0, #0
10004f8e:	d000      	beq.n	10004f92 <_Z11CheckBrickXaah.part.0+0x2ae>
10004f90:	e137      	b.n	10005202 <_Z11CheckBrickXaah.part.0+0x51e>
			b = *s++;
10004f92:	78a8      	ldrb	r0, [r5, #2]
			if (b != 0)
10004f94:	2800      	cmp	r0, #0
10004f96:	d000      	beq.n	10004f9a <_Z11CheckBrickXaah.part.0+0x2b6>
10004f98:	e133      	b.n	10005202 <_Z11CheckBrickXaah.part.0+0x51e>
10004f9a:	78ec      	ldrb	r4, [r5, #3]
10004f9c:	2c00      	cmp	r4, #0
10004f9e:	d008      	beq.n	10004fb2 <_Z11CheckBrickXaah.part.0+0x2ce>
				if ((y < 1) || (y >= MAPH-1))
10004fa0:	9c01      	ldr	r4, [sp, #4]
10004fa2:	2c11      	cmp	r4, #17
10004fa4:	d900      	bls.n	10004fa8 <_Z11CheckBrickXaah.part.0+0x2c4>
10004fa6:	e12c      	b.n	10005202 <_Z11CheckBrickXaah.part.0+0x51e>
					if (*d != TILE_EMPTY) ok = False;
10004fa8:	2454      	movs	r4, #84	; 0x54
10004faa:	5d12      	ldrb	r2, [r2, r4]
10004fac:	2a08      	cmp	r2, #8
10004fae:	d000      	beq.n	10004fb2 <_Z11CheckBrickXaah.part.0+0x2ce>
10004fb0:	e127      	b.n	10005202 <_Z11CheckBrickXaah.part.0+0x51e>
	if (res)
10004fb2:	2800      	cmp	r0, #0
10004fb4:	d000      	beq.n	10004fb8 <_Z11CheckBrickXaah.part.0+0x2d4>
10004fb6:	e732      	b.n	10004e1e <_Z11CheckBrickXaah.part.0+0x13a>
10004fb8:	e123      	b.n	10005202 <_Z11CheckBrickXaah.part.0+0x51e>
					if (*d != TILE_EMPTY) ok = False;
10004fba:	7f17      	ldrb	r7, [r2, #28]
10004fbc:	3f08      	subs	r7, #8
10004fbe:	427e      	negs	r6, r7
10004fc0:	4177      	adcs	r7, r6
10004fc2:	427f      	negs	r7, r7
10004fc4:	4038      	ands	r0, r7
			if (b != 0)
10004fc6:	78af      	ldrb	r7, [r5, #2]
10004fc8:	2f00      	cmp	r7, #0
10004fca:	d15e      	bne.n	1000508a <_Z11CheckBrickXaah.part.0+0x3a6>
10004fcc:	78ec      	ldrb	r4, [r5, #3]
			b = *s++;
10004fce:	1d2e      	adds	r6, r5, #4
			if (b != 0)
10004fd0:	940d      	str	r4, [sp, #52]	; 0x34
10004fd2:	2c00      	cmp	r4, #0
10004fd4:	d100      	bne.n	10004fd8 <_Z11CheckBrickXaah.part.0+0x2f4>
10004fd6:	e743      	b.n	10004e60 <_Z11CheckBrickXaah.part.0+0x17c>
				if ((y < 1) || (y >= MAPH-1))
10004fd8:	2b11      	cmp	r3, #17
10004fda:	d900      	bls.n	10004fde <_Z11CheckBrickXaah.part.0+0x2fa>
10004fdc:	e73f      	b.n	10004e5e <_Z11CheckBrickXaah.part.0+0x17a>
10004fde:	e6dd      	b.n	10004d9c <_Z11CheckBrickXaah.part.0+0xb8>
					if (*d != TILE_EMPTY) ok = False;
10004fe0:	2537      	movs	r5, #55	; 0x37
10004fe2:	5d55      	ldrb	r5, [r2, r5]
10004fe4:	3d08      	subs	r5, #8
10004fe6:	002c      	movs	r4, r5
10004fe8:	4265      	negs	r5, r4
10004fea:	4165      	adcs	r5, r4
			if (b != 0)
10004fec:	78b4      	ldrb	r4, [r6, #2]
					if (*d != TILE_EMPTY) ok = False;
10004fee:	426d      	negs	r5, r5
			if (b != 0)
10004ff0:	46a4      	mov	ip, r4
					if (*d != TILE_EMPTY) ok = False;
10004ff2:	4028      	ands	r0, r5
			if (b != 0)
10004ff4:	2c00      	cmp	r4, #0
10004ff6:	d16a      	bne.n	100050ce <_Z11CheckBrickXaah.part.0+0x3ea>
10004ff8:	78f4      	ldrb	r4, [r6, #3]
			b = *s++;
10004ffa:	1d35      	adds	r5, r6, #4
			if (b != 0)
10004ffc:	940e      	str	r4, [sp, #56]	; 0x38
10004ffe:	2c00      	cmp	r4, #0
10005000:	d100      	bne.n	10005004 <_Z11CheckBrickXaah.part.0+0x320>
10005002:	e6ed      	b.n	10004de0 <_Z11CheckBrickXaah.part.0+0xfc>
				if ((y < 1) || (y >= MAPH-1))
10005004:	9c00      	ldr	r4, [sp, #0]
10005006:	2c11      	cmp	r4, #17
10005008:	d900      	bls.n	1000500c <_Z11CheckBrickXaah.part.0+0x328>
1000500a:	e6e8      	b.n	10004dde <_Z11CheckBrickXaah.part.0+0xfa>
1000500c:	e74a      	b.n	10004ea4 <_Z11CheckBrickXaah.part.0+0x1c0>
1000500e:	46c0      	nop			; (mov r8, r8)
10005010:	2000327c 	.word	0x2000327c
10005014:	1000e9f4 	.word	0x1000e9f4
10005018:	20012765 	.word	0x20012765
1000501c:	20012766 	.word	0x20012766
10005020:	20012764 	.word	0x20012764
					if (*d != TILE_EMPTY) ok = False;
10005024:	2652      	movs	r6, #82	; 0x52
10005026:	5d96      	ldrb	r6, [r2, r6]
10005028:	3e08      	subs	r6, #8
1000502a:	0034      	movs	r4, r6
1000502c:	4266      	negs	r6, r4
1000502e:	4166      	adcs	r6, r4
10005030:	4276      	negs	r6, r6
10005032:	4030      	ands	r0, r6
			if (b != 0)
10005034:	78ae      	ldrb	r6, [r5, #2]
10005036:	2e00      	cmp	r6, #0
10005038:	d00e      	beq.n	10005058 <_Z11CheckBrickXaah.part.0+0x374>
					if (*d != TILE_EMPTY) ok = False;
1000503a:	2653      	movs	r6, #83	; 0x53
1000503c:	5d96      	ldrb	r6, [r2, r6]
1000503e:	2e08      	cmp	r6, #8
10005040:	d000      	beq.n	10005044 <_Z11CheckBrickXaah.part.0+0x360>
10005042:	e744      	b.n	10004ece <_Z11CheckBrickXaah.part.0+0x1ea>
10005044:	e6e5      	b.n	10004e12 <_Z11CheckBrickXaah.part.0+0x12e>
			b = *s++;
10005046:	7868      	ldrb	r0, [r5, #1]
10005048:	900b      	str	r0, [sp, #44]	; 0x2c
			if (b != 0)
1000504a:	2800      	cmp	r0, #0
1000504c:	d000      	beq.n	10005050 <_Z11CheckBrickXaah.part.0+0x36c>
1000504e:	e73e      	b.n	10004ece <_Z11CheckBrickXaah.part.0+0x1ea>
10005050:	78ae      	ldrb	r6, [r5, #2]
10005052:	2e00      	cmp	r6, #0
10005054:	d000      	beq.n	10005058 <_Z11CheckBrickXaah.part.0+0x374>
10005056:	e17a      	b.n	1000534e <_Z11CheckBrickXaah.part.0+0x66a>
10005058:	78ee      	ldrb	r6, [r5, #3]
1000505a:	2e00      	cmp	r6, #0
1000505c:	d100      	bne.n	10005060 <_Z11CheckBrickXaah.part.0+0x37c>
1000505e:	e6dc      	b.n	10004e1a <_Z11CheckBrickXaah.part.0+0x136>
				if ((y < 1) || (y >= MAPH-1))
10005060:	9c01      	ldr	r4, [sp, #4]
10005062:	2c11      	cmp	r4, #17
10005064:	d900      	bls.n	10005068 <_Z11CheckBrickXaah.part.0+0x384>
10005066:	e732      	b.n	10004ece <_Z11CheckBrickXaah.part.0+0x1ea>
					if (*d != TILE_EMPTY) ok = False;
10005068:	2654      	movs	r6, #84	; 0x54
1000506a:	5d92      	ldrb	r2, [r2, r6]
1000506c:	2a08      	cmp	r2, #8
1000506e:	d000      	beq.n	10005072 <_Z11CheckBrickXaah.part.0+0x38e>
10005070:	e72d      	b.n	10004ece <_Z11CheckBrickXaah.part.0+0x1ea>
10005072:	e6d2      	b.n	10004e1a <_Z11CheckBrickXaah.part.0+0x136>
			b = *s++;
10005074:	7868      	ldrb	r0, [r5, #1]
10005076:	9009      	str	r0, [sp, #36]	; 0x24
			if (b != 0)
10005078:	2800      	cmp	r0, #0
1000507a:	d000      	beq.n	1000507e <_Z11CheckBrickXaah.part.0+0x39a>
1000507c:	e6e6      	b.n	10004e4c <_Z11CheckBrickXaah.part.0+0x168>
1000507e:	78af      	ldrb	r7, [r5, #2]
10005080:	2f00      	cmp	r7, #0
10005082:	d0a3      	beq.n	10004fcc <_Z11CheckBrickXaah.part.0+0x2e8>
				if ((y < 1) || (y >= MAPH-1))
10005084:	2b11      	cmp	r3, #17
10005086:	d900      	bls.n	1000508a <_Z11CheckBrickXaah.part.0+0x3a6>
10005088:	e6e4      	b.n	10004e54 <_Z11CheckBrickXaah.part.0+0x170>
					if (*d != TILE_EMPTY) ok = False;
1000508a:	7f56      	ldrb	r6, [r2, #29]
1000508c:	3e08      	subs	r6, #8
1000508e:	0034      	movs	r4, r6
10005090:	4266      	negs	r6, r4
10005092:	4166      	adcs	r6, r4
			if (b != 0)
10005094:	78ec      	ldrb	r4, [r5, #3]
					if (*d != TILE_EMPTY) ok = False;
10005096:	4276      	negs	r6, r6
10005098:	4030      	ands	r0, r6
			if (b != 0)
1000509a:	940d      	str	r4, [sp, #52]	; 0x34
			b = *s++;
1000509c:	1d2e      	adds	r6, r5, #4
			if (b != 0)
1000509e:	2c00      	cmp	r4, #0
100050a0:	d100      	bne.n	100050a4 <_Z11CheckBrickXaah.part.0+0x3c0>
100050a2:	e6dd      	b.n	10004e60 <_Z11CheckBrickXaah.part.0+0x17c>
					if (*d != TILE_EMPTY) ok = False;
100050a4:	7f95      	ldrb	r5, [r2, #30]
100050a6:	3d08      	subs	r5, #8
100050a8:	002c      	movs	r4, r5
100050aa:	4265      	negs	r5, r4
100050ac:	4165      	adcs	r5, r4
100050ae:	426d      	negs	r5, r5
100050b0:	4028      	ands	r0, r5
100050b2:	e67a      	b.n	10004daa <_Z11CheckBrickXaah.part.0+0xc6>
			b = *s++;
100050b4:	7870      	ldrb	r0, [r6, #1]
100050b6:	900a      	str	r0, [sp, #40]	; 0x28
			if (b != 0)
100050b8:	2800      	cmp	r0, #0
100050ba:	d000      	beq.n	100050be <_Z11CheckBrickXaah.part.0+0x3da>
100050bc:	e685      	b.n	10004dca <_Z11CheckBrickXaah.part.0+0xe6>
100050be:	78b4      	ldrb	r4, [r6, #2]
100050c0:	46a4      	mov	ip, r4
100050c2:	2c00      	cmp	r4, #0
100050c4:	d098      	beq.n	10004ff8 <_Z11CheckBrickXaah.part.0+0x314>
				if ((y < 1) || (y >= MAPH-1))
100050c6:	9c00      	ldr	r4, [sp, #0]
100050c8:	2c11      	cmp	r4, #17
100050ca:	d900      	bls.n	100050ce <_Z11CheckBrickXaah.part.0+0x3ea>
100050cc:	e682      	b.n	10004dd4 <_Z11CheckBrickXaah.part.0+0xf0>
					if (*d != TILE_EMPTY) ok = False;
100050ce:	2538      	movs	r5, #56	; 0x38
100050d0:	5d55      	ldrb	r5, [r2, r5]
100050d2:	3d08      	subs	r5, #8
100050d4:	002c      	movs	r4, r5
100050d6:	4265      	negs	r5, r4
100050d8:	4165      	adcs	r5, r4
			if (b != 0)
100050da:	78f4      	ldrb	r4, [r6, #3]
					if (*d != TILE_EMPTY) ok = False;
100050dc:	426d      	negs	r5, r5
100050de:	4028      	ands	r0, r5
			if (b != 0)
100050e0:	940e      	str	r4, [sp, #56]	; 0x38
			b = *s++;
100050e2:	1d35      	adds	r5, r6, #4
			if (b != 0)
100050e4:	2c00      	cmp	r4, #0
100050e6:	d100      	bne.n	100050ea <_Z11CheckBrickXaah.part.0+0x406>
100050e8:	e67a      	b.n	10004de0 <_Z11CheckBrickXaah.part.0+0xfc>
					if (*d != TILE_EMPTY) ok = False;
100050ea:	2639      	movs	r6, #57	; 0x39
100050ec:	5d96      	ldrb	r6, [r2, r6]
100050ee:	3e08      	subs	r6, #8
100050f0:	0034      	movs	r4, r6
100050f2:	4266      	negs	r6, r4
100050f4:	4166      	adcs	r6, r4
100050f6:	4276      	negs	r6, r6
100050f8:	4030      	ands	r0, r6
100050fa:	e6db      	b.n	10004eb4 <_Z11CheckBrickXaah.part.0+0x1d0>
				if ((y < 1) || (y >= MAPH-1))
100050fc:	b2cb      	uxtb	r3, r1
100050fe:	1e58      	subs	r0, r3, #1
10005100:	2811      	cmp	r0, #17
10005102:	d900      	bls.n	10005106 <_Z11CheckBrickXaah.part.0+0x422>
10005104:	e11c      	b.n	10005340 <_Z11CheckBrickXaah.part.0+0x65c>
					if (*d != TILE_EMPTY) ok = False;
10005106:	7810      	ldrb	r0, [r2, #0]
10005108:	3808      	subs	r0, #8
1000510a:	4245      	negs	r5, r0
1000510c:	4168      	adcs	r0, r5
			if (b != 0)
1000510e:	7865      	ldrb	r5, [r4, #1]
					if (*d != TILE_EMPTY) ok = False;
10005110:	b2c0      	uxtb	r0, r0
			if (b != 0)
10005112:	9506      	str	r5, [sp, #24]
10005114:	2d00      	cmp	r5, #0
10005116:	d100      	bne.n	1000511a <_Z11CheckBrickXaah.part.0+0x436>
10005118:	e15d      	b.n	100053d6 <_Z11CheckBrickXaah.part.0+0x6f2>
					if (*d != TILE_EMPTY) ok = False;
1000511a:	7855      	ldrb	r5, [r2, #1]
1000511c:	3d08      	subs	r5, #8
1000511e:	426f      	negs	r7, r5
10005120:	417d      	adcs	r5, r7
10005122:	426d      	negs	r5, r5
10005124:	4028      	ands	r0, r5
			if (b != 0)
10005126:	78a5      	ldrb	r5, [r4, #2]
10005128:	9508      	str	r5, [sp, #32]
1000512a:	2d00      	cmp	r5, #0
1000512c:	d100      	bne.n	10005130 <_Z11CheckBrickXaah.part.0+0x44c>
1000512e:	e60d      	b.n	10004d4c <_Z11CheckBrickXaah.part.0+0x68>
					if (*d != TILE_EMPTY) ok = False;
10005130:	7895      	ldrb	r5, [r2, #2]
10005132:	3d08      	subs	r5, #8
10005134:	426f      	negs	r7, r5
10005136:	417d      	adcs	r5, r7
10005138:	426d      	negs	r5, r5
1000513a:	4028      	ands	r0, r5
			b = *s++;
1000513c:	1d25      	adds	r5, r4, #4
			if (b != 0)
1000513e:	78e4      	ldrb	r4, [r4, #3]
10005140:	9407      	str	r4, [sp, #28]
10005142:	2c00      	cmp	r4, #0
10005144:	d100      	bne.n	10005148 <_Z11CheckBrickXaah.part.0+0x464>
10005146:	e60b      	b.n	10004d60 <_Z11CheckBrickXaah.part.0+0x7c>
					if (*d != TILE_EMPTY) ok = False;
10005148:	78d4      	ldrb	r4, [r2, #3]
			b = *s++;
1000514a:	782e      	ldrb	r6, [r5, #0]
					if (*d != TILE_EMPTY) ok = False;
1000514c:	3c08      	subs	r4, #8
1000514e:	4267      	negs	r7, r4
10005150:	417c      	adcs	r4, r7
10005152:	4264      	negs	r4, r4
10005154:	4020      	ands	r0, r4
		y++;
10005156:	1c5c      	adds	r4, r3, #1
10005158:	b2e4      	uxtb	r4, r4
1000515a:	9400      	str	r4, [sp, #0]
			b = *s++;
1000515c:	9605      	str	r6, [sp, #20]
			if (b != 0)
1000515e:	2e00      	cmp	r6, #0
10005160:	d000      	beq.n	10005164 <_Z11CheckBrickXaah.part.0+0x480>
10005162:	e604      	b.n	10004d6e <_Z11CheckBrickXaah.part.0+0x8a>
10005164:	e66a      	b.n	10004e3c <_Z11CheckBrickXaah.part.0+0x158>
10005166:	9c09      	ldr	r4, [sp, #36]	; 0x24
10005168:	2c00      	cmp	r4, #0
1000516a:	d100      	bne.n	1000516e <_Z11CheckBrickXaah.part.0+0x48a>
1000516c:	e089      	b.n	10005282 <_Z11CheckBrickXaah.part.0+0x59e>
				if ((y < 1) || (y >= MAPH-1))
1000516e:	2b11      	cmp	r3, #17
10005170:	d900      	bls.n	10005174 <_Z11CheckBrickXaah.part.0+0x490>
10005172:	e6de      	b.n	10004f32 <_Z11CheckBrickXaah.part.0+0x24e>
					if (*d != TILE_EMPTY) ok = False;
10005174:	7f14      	ldrb	r4, [r2, #28]
10005176:	46a2      	mov	sl, r4
10005178:	2408      	movs	r4, #8
1000517a:	4264      	negs	r4, r4
1000517c:	46a3      	mov	fp, r4
1000517e:	44da      	add	sl, fp
10005180:	4656      	mov	r6, sl
10005182:	4274      	negs	r4, r6
10005184:	4174      	adcs	r4, r6
10005186:	4264      	negs	r4, r4
10005188:	4020      	ands	r0, r4
			if (b != 0)
1000518a:	2f00      	cmp	r7, #0
1000518c:	d07f      	beq.n	1000528e <_Z11CheckBrickXaah.part.0+0x5aa>
					if (*d != TILE_EMPTY) ok = False;
1000518e:	7f54      	ldrb	r4, [r2, #29]
10005190:	46a2      	mov	sl, r4
10005192:	2408      	movs	r4, #8
10005194:	4264      	negs	r4, r4
10005196:	46a3      	mov	fp, r4
10005198:	44da      	add	sl, fp
1000519a:	4656      	mov	r6, sl
1000519c:	4274      	negs	r4, r6
1000519e:	4174      	adcs	r4, r6
100051a0:	4264      	negs	r4, r4
100051a2:	4020      	ands	r0, r4
			if (b != 0)
100051a4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
100051a6:	2c00      	cmp	r4, #0
100051a8:	d100      	bne.n	100051ac <_Z11CheckBrickXaah.part.0+0x4c8>
100051aa:	e6c6      	b.n	10004f3a <_Z11CheckBrickXaah.part.0+0x256>
					if (*d != TILE_EMPTY) ok = False;
100051ac:	7f94      	ldrb	r4, [r2, #30]
100051ae:	46a2      	mov	sl, r4
100051b0:	2408      	movs	r4, #8
100051b2:	4264      	negs	r4, r4
100051b4:	46a3      	mov	fp, r4
100051b6:	44da      	add	sl, fp
100051b8:	4656      	mov	r6, sl
100051ba:	4274      	negs	r4, r6
100051bc:	4174      	adcs	r4, r6
100051be:	4264      	negs	r4, r4
100051c0:	4020      	ands	r0, r4
			if (b != 0)
100051c2:	4644      	mov	r4, r8
100051c4:	2c00      	cmp	r4, #0
100051c6:	d000      	beq.n	100051ca <_Z11CheckBrickXaah.part.0+0x4e6>
100051c8:	e6bb      	b.n	10004f42 <_Z11CheckBrickXaah.part.0+0x25e>
100051ca:	9c0a      	ldr	r4, [sp, #40]	; 0x28
100051cc:	2c00      	cmp	r4, #0
100051ce:	d07c      	beq.n	100052ca <_Z11CheckBrickXaah.part.0+0x5e6>
				if ((y < 1) || (y >= MAPH-1))
100051d0:	9c00      	ldr	r4, [sp, #0]
100051d2:	2c11      	cmp	r4, #17
100051d4:	d800      	bhi.n	100051d8 <_Z11CheckBrickXaah.part.0+0x4f4>
100051d6:	e09b      	b.n	10005310 <_Z11CheckBrickXaah.part.0+0x62c>
			b = *s++;
100051d8:	4660      	mov	r0, ip
			if (b != 0)
100051da:	2800      	cmp	r0, #0
100051dc:	d100      	bne.n	100051e0 <_Z11CheckBrickXaah.part.0+0x4fc>
100051de:	e0a6      	b.n	1000532e <_Z11CheckBrickXaah.part.0+0x64a>
					ok = False;
100051e0:	2000      	movs	r0, #0
			if (b != 0)
100051e2:	464c      	mov	r4, r9
100051e4:	2c00      	cmp	r4, #0
100051e6:	d000      	beq.n	100051ea <_Z11CheckBrickXaah.part.0+0x506>
100051e8:	e6cb      	b.n	10004f82 <_Z11CheckBrickXaah.part.0+0x29e>
100051ea:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
100051ec:	2c00      	cmp	r4, #0
100051ee:	d100      	bne.n	100051f2 <_Z11CheckBrickXaah.part.0+0x50e>
100051f0:	e0c9      	b.n	10005386 <_Z11CheckBrickXaah.part.0+0x6a2>
				if ((y < 1) || (y >= MAPH-1))
100051f2:	9c01      	ldr	r4, [sp, #4]
100051f4:	2c11      	cmp	r4, #17
100051f6:	d804      	bhi.n	10005202 <_Z11CheckBrickXaah.part.0+0x51e>
					if (*d != TILE_EMPTY) ok = False;
100051f8:	2452      	movs	r4, #82	; 0x52
100051fa:	5d14      	ldrb	r4, [r2, r4]
100051fc:	2c08      	cmp	r4, #8
100051fe:	d100      	bne.n	10005202 <_Z11CheckBrickXaah.part.0+0x51e>
10005200:	e38c      	b.n	1000591c <_Z11CheckBrickXaah.part.0+0xc38>
	if (CheckBrickSave(x-2, y, brick)) return True;
10005202:	9a02      	ldr	r2, [sp, #8]
	u8* d = &Board[x + y*MAPW];
10005204:	48a6      	ldr	r0, [pc, #664]	; (100054a0 <_Z11CheckBrickXaah.part.0+0x7bc>)
	if (CheckBrickSave(x-2, y, brick)) return True;
10005206:	3a02      	subs	r2, #2
10005208:	b252      	sxtb	r2, r2
1000520a:	4693      	mov	fp, r2
	u8* d = &Board[x + y*MAPW];
1000520c:	4682      	mov	sl, r0
1000520e:	9a03      	ldr	r2, [sp, #12]
			if (b != 0)
10005210:	9804      	ldr	r0, [sp, #16]
	u8* d = &Board[x + y*MAPW];
10005212:	445a      	add	r2, fp
10005214:	4452      	add	r2, sl
			if (b != 0)
10005216:	2800      	cmp	r0, #0
10005218:	d000      	beq.n	1000521c <_Z11CheckBrickXaah.part.0+0x538>
1000521a:	e2b7      	b.n	1000578c <_Z11CheckBrickXaah.part.0+0xaa8>
	Bool ok = True;
1000521c:	3001      	adds	r0, #1
			if (b != 0)
1000521e:	9c06      	ldr	r4, [sp, #24]
10005220:	2c00      	cmp	r4, #0
10005222:	d004      	beq.n	1000522e <_Z11CheckBrickXaah.part.0+0x54a>
				if ((y < 1) || (y >= MAPH-1))
10005224:	1e5e      	subs	r6, r3, #1
10005226:	2e11      	cmp	r6, #17
10005228:	d800      	bhi.n	1000522c <_Z11CheckBrickXaah.part.0+0x548>
1000522a:	e33c      	b.n	100058a6 <_Z11CheckBrickXaah.part.0+0xbc2>
					ok = False;
1000522c:	2000      	movs	r0, #0
			if (b != 0)
1000522e:	9c08      	ldr	r4, [sp, #32]
10005230:	2c00      	cmp	r4, #0
10005232:	d004      	beq.n	1000523e <_Z11CheckBrickXaah.part.0+0x55a>
				if ((y < 1) || (y >= MAPH-1))
10005234:	1e5e      	subs	r6, r3, #1
10005236:	2e11      	cmp	r6, #17
10005238:	d800      	bhi.n	1000523c <_Z11CheckBrickXaah.part.0+0x558>
1000523a:	e2b8      	b.n	100057ae <_Z11CheckBrickXaah.part.0+0xaca>
					ok = False;
1000523c:	2000      	movs	r0, #0
			if (b != 0)
1000523e:	9c07      	ldr	r4, [sp, #28]
10005240:	2c00      	cmp	r4, #0
10005242:	d004      	beq.n	1000524e <_Z11CheckBrickXaah.part.0+0x56a>
				if ((y < 1) || (y >= MAPH-1))
10005244:	1e5e      	subs	r6, r3, #1
10005246:	2e11      	cmp	r6, #17
10005248:	d800      	bhi.n	1000524c <_Z11CheckBrickXaah.part.0+0x568>
1000524a:	e2bb      	b.n	100057c4 <_Z11CheckBrickXaah.part.0+0xae0>
					ok = False;
1000524c:	2000      	movs	r0, #0
			if (b != 0)
1000524e:	9c05      	ldr	r4, [sp, #20]
10005250:	2c00      	cmp	r4, #0
10005252:	d100      	bne.n	10005256 <_Z11CheckBrickXaah.part.0+0x572>
10005254:	e289      	b.n	1000576a <_Z11CheckBrickXaah.part.0+0xa86>
				if ((y < 1) || (y >= MAPH-1))
10005256:	2b11      	cmp	r3, #17
10005258:	d900      	bls.n	1000525c <_Z11CheckBrickXaah.part.0+0x578>
1000525a:	e2bb      	b.n	100057d4 <_Z11CheckBrickXaah.part.0+0xaf0>
					if (*d != TILE_EMPTY) ok = False;
1000525c:	7ed6      	ldrb	r6, [r2, #27]
1000525e:	3e08      	subs	r6, #8
10005260:	0034      	movs	r4, r6
10005262:	4266      	negs	r6, r4
10005264:	4166      	adcs	r6, r4
			if (b != 0)
10005266:	9c09      	ldr	r4, [sp, #36]	; 0x24
					if (*d != TILE_EMPTY) ok = False;
10005268:	4276      	negs	r6, r6
1000526a:	4030      	ands	r0, r6
			if (b != 0)
1000526c:	2c00      	cmp	r4, #0
1000526e:	d000      	beq.n	10005272 <_Z11CheckBrickXaah.part.0+0x58e>
10005270:	e0e1      	b.n	10005436 <_Z11CheckBrickXaah.part.0+0x752>
10005272:	2f00      	cmp	r7, #0
10005274:	d000      	beq.n	10005278 <_Z11CheckBrickXaah.part.0+0x594>
10005276:	e0e8      	b.n	1000544a <_Z11CheckBrickXaah.part.0+0x766>
10005278:	9c0d      	ldr	r4, [sp, #52]	; 0x34
1000527a:	2c00      	cmp	r4, #0
1000527c:	d000      	beq.n	10005280 <_Z11CheckBrickXaah.part.0+0x59c>
1000527e:	e0ee      	b.n	1000545e <_Z11CheckBrickXaah.part.0+0x77a>
10005280:	e0f4      	b.n	1000546c <_Z11CheckBrickXaah.part.0+0x788>
10005282:	2f00      	cmp	r7, #0
10005284:	d003      	beq.n	1000528e <_Z11CheckBrickXaah.part.0+0x5aa>
				if ((y < 1) || (y >= MAPH-1))
10005286:	2b11      	cmp	r3, #17
10005288:	d981      	bls.n	1000518e <_Z11CheckBrickXaah.part.0+0x4aa>
					ok = False;
1000528a:	2000      	movs	r0, #0
1000528c:	e655      	b.n	10004f3a <_Z11CheckBrickXaah.part.0+0x256>
			if (b != 0)
1000528e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
10005290:	2c00      	cmp	r4, #0
10005292:	d100      	bne.n	10005296 <_Z11CheckBrickXaah.part.0+0x5b2>
10005294:	e651      	b.n	10004f3a <_Z11CheckBrickXaah.part.0+0x256>
				if ((y < 1) || (y >= MAPH-1))
10005296:	2b11      	cmp	r3, #17
10005298:	d988      	bls.n	100051ac <_Z11CheckBrickXaah.part.0+0x4c8>
					ok = False;
1000529a:	2000      	movs	r0, #0
1000529c:	e64d      	b.n	10004f3a <_Z11CheckBrickXaah.part.0+0x256>
				if ((y < 1) || (y >= MAPH-1))
1000529e:	1e58      	subs	r0, r3, #1
100052a0:	2811      	cmp	r0, #17
100052a2:	d900      	bls.n	100052a6 <_Z11CheckBrickXaah.part.0+0x5c2>
100052a4:	e095      	b.n	100053d2 <_Z11CheckBrickXaah.part.0+0x6ee>
					if (*d != TILE_EMPTY) ok = False;
100052a6:	7810      	ldrb	r0, [r2, #0]
100052a8:	3808      	subs	r0, #8
100052aa:	0004      	movs	r4, r0
100052ac:	4260      	negs	r0, r4
100052ae:	4160      	adcs	r0, r4
			if (b != 0)
100052b0:	9c06      	ldr	r4, [sp, #24]
					if (*d != TILE_EMPTY) ok = False;
100052b2:	b2c0      	uxtb	r0, r0
			if (b != 0)
100052b4:	2c00      	cmp	r4, #0
100052b6:	d000      	beq.n	100052ba <_Z11CheckBrickXaah.part.0+0x5d6>
100052b8:	e093      	b.n	100053e2 <_Z11CheckBrickXaah.part.0+0x6fe>
100052ba:	9c08      	ldr	r4, [sp, #32]
100052bc:	2c00      	cmp	r4, #0
100052be:	d100      	bne.n	100052c2 <_Z11CheckBrickXaah.part.0+0x5de>
100052c0:	e624      	b.n	10004f0c <_Z11CheckBrickXaah.part.0+0x228>
100052c2:	e09d      	b.n	10005400 <_Z11CheckBrickXaah.part.0+0x71c>
			b = *s++;
100052c4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
100052c6:	1e20      	subs	r0, r4, #0
			if (b != 0)
100052c8:	d186      	bne.n	100051d8 <_Z11CheckBrickXaah.part.0+0x4f4>
100052ca:	4664      	mov	r4, ip
100052cc:	2c00      	cmp	r4, #0
100052ce:	d02e      	beq.n	1000532e <_Z11CheckBrickXaah.part.0+0x64a>
				if ((y < 1) || (y >= MAPH-1))
100052d0:	9c00      	ldr	r4, [sp, #0]
100052d2:	2c11      	cmp	r4, #17
100052d4:	d884      	bhi.n	100051e0 <_Z11CheckBrickXaah.part.0+0x4fc>
					if (*d != TILE_EMPTY) ok = False;
100052d6:	2438      	movs	r4, #56	; 0x38
100052d8:	5d14      	ldrb	r4, [r2, r4]
100052da:	46a2      	mov	sl, r4
100052dc:	2408      	movs	r4, #8
100052de:	4264      	negs	r4, r4
100052e0:	46a3      	mov	fp, r4
100052e2:	44da      	add	sl, fp
100052e4:	4656      	mov	r6, sl
100052e6:	4274      	negs	r4, r6
100052e8:	4174      	adcs	r4, r6
100052ea:	4264      	negs	r4, r4
100052ec:	4020      	ands	r0, r4
			if (b != 0)
100052ee:	9c0e      	ldr	r4, [sp, #56]	; 0x38
100052f0:	2c00      	cmp	r4, #0
100052f2:	d100      	bne.n	100052f6 <_Z11CheckBrickXaah.part.0+0x612>
100052f4:	e641      	b.n	10004f7a <_Z11CheckBrickXaah.part.0+0x296>
					if (*d != TILE_EMPTY) ok = False;
100052f6:	2439      	movs	r4, #57	; 0x39
100052f8:	5d14      	ldrb	r4, [r2, r4]
100052fa:	46a2      	mov	sl, r4
100052fc:	2408      	movs	r4, #8
100052fe:	4264      	negs	r4, r4
10005300:	46a3      	mov	fp, r4
10005302:	44da      	add	sl, fp
10005304:	4656      	mov	r6, sl
10005306:	4274      	negs	r4, r6
10005308:	4174      	adcs	r4, r6
1000530a:	4264      	negs	r4, r4
1000530c:	4020      	ands	r0, r4
1000530e:	e634      	b.n	10004f7a <_Z11CheckBrickXaah.part.0+0x296>
10005310:	2437      	movs	r4, #55	; 0x37
10005312:	5d14      	ldrb	r4, [r2, r4]
10005314:	46a2      	mov	sl, r4
10005316:	2408      	movs	r4, #8
10005318:	4264      	negs	r4, r4
1000531a:	46a3      	mov	fp, r4
1000531c:	44da      	add	sl, fp
1000531e:	4656      	mov	r6, sl
10005320:	4274      	negs	r4, r6
10005322:	4174      	adcs	r4, r6
10005324:	4264      	negs	r4, r4
10005326:	4020      	ands	r0, r4
			if (b != 0)
10005328:	4664      	mov	r4, ip
1000532a:	2c00      	cmp	r4, #0
1000532c:	d1d3      	bne.n	100052d6 <_Z11CheckBrickXaah.part.0+0x5f2>
1000532e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
10005330:	2c00      	cmp	r4, #0
10005332:	d100      	bne.n	10005336 <_Z11CheckBrickXaah.part.0+0x652>
10005334:	e621      	b.n	10004f7a <_Z11CheckBrickXaah.part.0+0x296>
				if ((y < 1) || (y >= MAPH-1))
10005336:	9c00      	ldr	r4, [sp, #0]
10005338:	2c11      	cmp	r4, #17
1000533a:	d9dc      	bls.n	100052f6 <_Z11CheckBrickXaah.part.0+0x612>
					ok = False;
1000533c:	2000      	movs	r0, #0
1000533e:	e750      	b.n	100051e2 <_Z11CheckBrickXaah.part.0+0x4fe>
			if (b != 0)
10005340:	7865      	ldrb	r5, [r4, #1]
					ok = False;
10005342:	2000      	movs	r0, #0
			if (b != 0)
10005344:	9506      	str	r5, [sp, #24]
10005346:	2d00      	cmp	r5, #0
10005348:	d100      	bne.n	1000534c <_Z11CheckBrickXaah.part.0+0x668>
1000534a:	e4f6      	b.n	10004d3a <_Z11CheckBrickXaah.part.0+0x56>
1000534c:	e4f0      	b.n	10004d30 <_Z11CheckBrickXaah.part.0+0x4c>
				if ((y < 1) || (y >= MAPH-1))
1000534e:	9c01      	ldr	r4, [sp, #4]
10005350:	2c11      	cmp	r4, #17
10005352:	d900      	bls.n	10005356 <_Z11CheckBrickXaah.part.0+0x672>
10005354:	e5bb      	b.n	10004ece <_Z11CheckBrickXaah.part.0+0x1ea>
10005356:	e670      	b.n	1000503a <_Z11CheckBrickXaah.part.0+0x356>
					if (*d != TILE_EMPTY) ok = False;
10005358:	7ed4      	ldrb	r4, [r2, #27]
1000535a:	46a2      	mov	sl, r4
1000535c:	2408      	movs	r4, #8
1000535e:	4264      	negs	r4, r4
10005360:	46a3      	mov	fp, r4
10005362:	44da      	add	sl, fp
10005364:	4656      	mov	r6, sl
10005366:	4274      	negs	r4, r6
10005368:	4174      	adcs	r4, r6
1000536a:	4264      	negs	r4, r4
1000536c:	4020      	ands	r0, r4
			if (b != 0)
1000536e:	9c09      	ldr	r4, [sp, #36]	; 0x24
10005370:	2c00      	cmp	r4, #0
10005372:	d000      	beq.n	10005376 <_Z11CheckBrickXaah.part.0+0x692>
10005374:	e6fe      	b.n	10005174 <_Z11CheckBrickXaah.part.0+0x490>
10005376:	2f00      	cmp	r7, #0
10005378:	d000      	beq.n	1000537c <_Z11CheckBrickXaah.part.0+0x698>
1000537a:	e708      	b.n	1000518e <_Z11CheckBrickXaah.part.0+0x4aa>
1000537c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
1000537e:	2c00      	cmp	r4, #0
10005380:	d000      	beq.n	10005384 <_Z11CheckBrickXaah.part.0+0x6a0>
10005382:	e713      	b.n	100051ac <_Z11CheckBrickXaah.part.0+0x4c8>
10005384:	e5d9      	b.n	10004f3a <_Z11CheckBrickXaah.part.0+0x256>
10005386:	78ac      	ldrb	r4, [r5, #2]
10005388:	2c00      	cmp	r4, #0
1000538a:	d100      	bne.n	1000538e <_Z11CheckBrickXaah.part.0+0x6aa>
1000538c:	e605      	b.n	10004f9a <_Z11CheckBrickXaah.part.0+0x2b6>
				if ((y < 1) || (y >= MAPH-1))
1000538e:	9c01      	ldr	r4, [sp, #4]
10005390:	2c11      	cmp	r4, #17
10005392:	d900      	bls.n	10005396 <_Z11CheckBrickXaah.part.0+0x6b2>
10005394:	e735      	b.n	10005202 <_Z11CheckBrickXaah.part.0+0x51e>
					if (*d != TILE_EMPTY) ok = False;
10005396:	2453      	movs	r4, #83	; 0x53
10005398:	5d14      	ldrb	r4, [r2, r4]
1000539a:	2c08      	cmp	r4, #8
1000539c:	d000      	beq.n	100053a0 <_Z11CheckBrickXaah.part.0+0x6bc>
1000539e:	e730      	b.n	10005202 <_Z11CheckBrickXaah.part.0+0x51e>
			if (b != 0)
100053a0:	78ec      	ldrb	r4, [r5, #3]
100053a2:	2c00      	cmp	r4, #0
100053a4:	d100      	bne.n	100053a8 <_Z11CheckBrickXaah.part.0+0x6c4>
100053a6:	e604      	b.n	10004fb2 <_Z11CheckBrickXaah.part.0+0x2ce>
100053a8:	e5fe      	b.n	10004fa8 <_Z11CheckBrickXaah.part.0+0x2c4>
					if (*d != TILE_EMPTY) ok = False;
100053aa:	2451      	movs	r4, #81	; 0x51
100053ac:	5d14      	ldrb	r4, [r2, r4]
100053ae:	46a2      	mov	sl, r4
100053b0:	2408      	movs	r4, #8
100053b2:	4264      	negs	r4, r4
100053b4:	46a3      	mov	fp, r4
100053b6:	44da      	add	sl, fp
100053b8:	4656      	mov	r6, sl
100053ba:	4274      	negs	r4, r6
100053bc:	4174      	adcs	r4, r6
100053be:	4264      	negs	r4, r4
100053c0:	4020      	ands	r0, r4
			if (b != 0)
100053c2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
100053c4:	2c00      	cmp	r4, #0
100053c6:	d000      	beq.n	100053ca <_Z11CheckBrickXaah.part.0+0x6e6>
100053c8:	e716      	b.n	100051f8 <_Z11CheckBrickXaah.part.0+0x514>
100053ca:	78ac      	ldrb	r4, [r5, #2]
100053cc:	2c00      	cmp	r4, #0
100053ce:	d1e2      	bne.n	10005396 <_Z11CheckBrickXaah.part.0+0x6b2>
100053d0:	e7e6      	b.n	100053a0 <_Z11CheckBrickXaah.part.0+0x6bc>
					ok = False;
100053d2:	2000      	movs	r0, #0
100053d4:	e58a      	b.n	10004eec <_Z11CheckBrickXaah.part.0+0x208>
			if (b != 0)
100053d6:	78a5      	ldrb	r5, [r4, #2]
100053d8:	9508      	str	r5, [sp, #32]
100053da:	2d00      	cmp	r5, #0
100053dc:	d100      	bne.n	100053e0 <_Z11CheckBrickXaah.part.0+0x6fc>
100053de:	e4b5      	b.n	10004d4c <_Z11CheckBrickXaah.part.0+0x68>
100053e0:	e6a6      	b.n	10005130 <_Z11CheckBrickXaah.part.0+0x44c>
					if (*d != TILE_EMPTY) ok = False;
100053e2:	7854      	ldrb	r4, [r2, #1]
100053e4:	46a2      	mov	sl, r4
100053e6:	2408      	movs	r4, #8
100053e8:	4264      	negs	r4, r4
100053ea:	46a3      	mov	fp, r4
100053ec:	44da      	add	sl, fp
100053ee:	4656      	mov	r6, sl
100053f0:	4274      	negs	r4, r6
100053f2:	4174      	adcs	r4, r6
100053f4:	4264      	negs	r4, r4
100053f6:	4020      	ands	r0, r4
			if (b != 0)
100053f8:	9c08      	ldr	r4, [sp, #32]
100053fa:	2c00      	cmp	r4, #0
100053fc:	d100      	bne.n	10005400 <_Z11CheckBrickXaah.part.0+0x71c>
100053fe:	e585      	b.n	10004f0c <_Z11CheckBrickXaah.part.0+0x228>
					if (*d != TILE_EMPTY) ok = False;
10005400:	7894      	ldrb	r4, [r2, #2]
10005402:	46a2      	mov	sl, r4
10005404:	2408      	movs	r4, #8
10005406:	4264      	negs	r4, r4
10005408:	46a3      	mov	fp, r4
1000540a:	44da      	add	sl, fp
1000540c:	4656      	mov	r6, sl
1000540e:	4274      	negs	r4, r6
10005410:	4174      	adcs	r4, r6
10005412:	4264      	negs	r4, r4
10005414:	4020      	ands	r0, r4
			if (b != 0)
10005416:	9c07      	ldr	r4, [sp, #28]
10005418:	2c00      	cmp	r4, #0
1000541a:	d100      	bne.n	1000541e <_Z11CheckBrickXaah.part.0+0x73a>
1000541c:	e57e      	b.n	10004f1c <_Z11CheckBrickXaah.part.0+0x238>
					if (*d != TILE_EMPTY) ok = False;
1000541e:	78d4      	ldrb	r4, [r2, #3]
10005420:	46a2      	mov	sl, r4
10005422:	2408      	movs	r4, #8
10005424:	4264      	negs	r4, r4
10005426:	46a3      	mov	fp, r4
10005428:	44da      	add	sl, fp
1000542a:	4656      	mov	r6, sl
1000542c:	4274      	negs	r4, r6
1000542e:	4174      	adcs	r4, r6
10005430:	4264      	negs	r4, r4
10005432:	4020      	ands	r0, r4
10005434:	e572      	b.n	10004f1c <_Z11CheckBrickXaah.part.0+0x238>
10005436:	7f16      	ldrb	r6, [r2, #28]
10005438:	3e08      	subs	r6, #8
1000543a:	0034      	movs	r4, r6
1000543c:	4266      	negs	r6, r4
1000543e:	4166      	adcs	r6, r4
10005440:	4276      	negs	r6, r6
10005442:	4030      	ands	r0, r6
			if (b != 0)
10005444:	2f00      	cmp	r7, #0
10005446:	d100      	bne.n	1000544a <_Z11CheckBrickXaah.part.0+0x766>
10005448:	e197      	b.n	1000577a <_Z11CheckBrickXaah.part.0+0xa96>
					if (*d != TILE_EMPTY) ok = False;
1000544a:	7f56      	ldrb	r6, [r2, #29]
1000544c:	3e08      	subs	r6, #8
1000544e:	0034      	movs	r4, r6
10005450:	4266      	negs	r6, r4
10005452:	4166      	adcs	r6, r4
			if (b != 0)
10005454:	9c0d      	ldr	r4, [sp, #52]	; 0x34
					if (*d != TILE_EMPTY) ok = False;
10005456:	4276      	negs	r6, r6
10005458:	4030      	ands	r0, r6
			if (b != 0)
1000545a:	2c00      	cmp	r4, #0
1000545c:	d006      	beq.n	1000546c <_Z11CheckBrickXaah.part.0+0x788>
					if (*d != TILE_EMPTY) ok = False;
1000545e:	7f96      	ldrb	r6, [r2, #30]
10005460:	3e08      	subs	r6, #8
10005462:	0034      	movs	r4, r6
10005464:	4266      	negs	r6, r4
10005466:	4166      	adcs	r6, r4
10005468:	4276      	negs	r6, r6
1000546a:	4030      	ands	r0, r6
			if (b != 0)
1000546c:	4644      	mov	r4, r8
1000546e:	2c00      	cmp	r4, #0
10005470:	d100      	bne.n	10005474 <_Z11CheckBrickXaah.part.0+0x790>
10005472:	e166      	b.n	10005742 <_Z11CheckBrickXaah.part.0+0xa5e>
				if ((y < 1) || (y >= MAPH-1))
10005474:	9c00      	ldr	r4, [sp, #0]
10005476:	2c11      	cmp	r4, #17
10005478:	d900      	bls.n	1000547c <_Z11CheckBrickXaah.part.0+0x798>
1000547a:	e1b5      	b.n	100057e8 <_Z11CheckBrickXaah.part.0+0xb04>
					if (*d != TILE_EMPTY) ok = False;
1000547c:	2636      	movs	r6, #54	; 0x36
1000547e:	5d96      	ldrb	r6, [r2, r6]
10005480:	3e08      	subs	r6, #8
10005482:	0034      	movs	r4, r6
10005484:	4266      	negs	r6, r4
10005486:	4166      	adcs	r6, r4
			if (b != 0)
10005488:	9c0a      	ldr	r4, [sp, #40]	; 0x28
					if (*d != TILE_EMPTY) ok = False;
1000548a:	4276      	negs	r6, r6
1000548c:	4030      	ands	r0, r6
			if (b != 0)
1000548e:	2c00      	cmp	r4, #0
10005490:	d108      	bne.n	100054a4 <_Z11CheckBrickXaah.part.0+0x7c0>
10005492:	4664      	mov	r4, ip
10005494:	2c00      	cmp	r4, #0
10005496:	d111      	bne.n	100054bc <_Z11CheckBrickXaah.part.0+0x7d8>
10005498:	9c0e      	ldr	r4, [sp, #56]	; 0x38
1000549a:	2c00      	cmp	r4, #0
1000549c:	d119      	bne.n	100054d2 <_Z11CheckBrickXaah.part.0+0x7ee>
1000549e:	e020      	b.n	100054e2 <_Z11CheckBrickXaah.part.0+0x7fe>
100054a0:	2000327c 	.word	0x2000327c
					if (*d != TILE_EMPTY) ok = False;
100054a4:	2637      	movs	r6, #55	; 0x37
100054a6:	5d96      	ldrb	r6, [r2, r6]
100054a8:	3e08      	subs	r6, #8
100054aa:	0034      	movs	r4, r6
100054ac:	4266      	negs	r6, r4
100054ae:	4166      	adcs	r6, r4
			if (b != 0)
100054b0:	4664      	mov	r4, ip
					if (*d != TILE_EMPTY) ok = False;
100054b2:	4276      	negs	r6, r6
100054b4:	4030      	ands	r0, r6
			if (b != 0)
100054b6:	2c00      	cmp	r4, #0
100054b8:	d100      	bne.n	100054bc <_Z11CheckBrickXaah.part.0+0x7d8>
100054ba:	e14c      	b.n	10005756 <_Z11CheckBrickXaah.part.0+0xa72>
					if (*d != TILE_EMPTY) ok = False;
100054bc:	2638      	movs	r6, #56	; 0x38
100054be:	5d96      	ldrb	r6, [r2, r6]
100054c0:	3e08      	subs	r6, #8
100054c2:	0034      	movs	r4, r6
100054c4:	4266      	negs	r6, r4
100054c6:	4166      	adcs	r6, r4
			if (b != 0)
100054c8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
					if (*d != TILE_EMPTY) ok = False;
100054ca:	4276      	negs	r6, r6
100054cc:	4030      	ands	r0, r6
			if (b != 0)
100054ce:	2c00      	cmp	r4, #0
100054d0:	d007      	beq.n	100054e2 <_Z11CheckBrickXaah.part.0+0x7fe>
					if (*d != TILE_EMPTY) ok = False;
100054d2:	2639      	movs	r6, #57	; 0x39
100054d4:	5d96      	ldrb	r6, [r2, r6]
100054d6:	3e08      	subs	r6, #8
100054d8:	0034      	movs	r4, r6
100054da:	4266      	negs	r6, r4
100054dc:	4166      	adcs	r6, r4
100054de:	4276      	negs	r6, r6
100054e0:	4030      	ands	r0, r6
			if (b != 0)
100054e2:	464c      	mov	r4, r9
100054e4:	2c00      	cmp	r4, #0
100054e6:	d100      	bne.n	100054ea <_Z11CheckBrickXaah.part.0+0x806>
100054e8:	e119      	b.n	1000571e <_Z11CheckBrickXaah.part.0+0xa3a>
				if ((y < 1) || (y >= MAPH-1))
100054ea:	9c01      	ldr	r4, [sp, #4]
100054ec:	2c11      	cmp	r4, #17
100054ee:	d900      	bls.n	100054f2 <_Z11CheckBrickXaah.part.0+0x80e>
100054f0:	e100      	b.n	100056f4 <_Z11CheckBrickXaah.part.0+0xa10>
					if (*d != TILE_EMPTY) ok = False;
100054f2:	2651      	movs	r6, #81	; 0x51
100054f4:	5d96      	ldrb	r6, [r2, r6]
100054f6:	3e08      	subs	r6, #8
100054f8:	0034      	movs	r4, r6
100054fa:	4266      	negs	r6, r4
100054fc:	4166      	adcs	r6, r4
			if (b != 0)
100054fe:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
					if (*d != TILE_EMPTY) ok = False;
10005500:	4276      	negs	r6, r6
10005502:	4030      	ands	r0, r6
			if (b != 0)
10005504:	2c00      	cmp	r4, #0
10005506:	d000      	beq.n	1000550a <_Z11CheckBrickXaah.part.0+0x826>
10005508:	e111      	b.n	1000572e <_Z11CheckBrickXaah.part.0+0xa4a>
1000550a:	78ae      	ldrb	r6, [r5, #2]
1000550c:	2e00      	cmp	r6, #0
1000550e:	d100      	bne.n	10005512 <_Z11CheckBrickXaah.part.0+0x82e>
10005510:	e0e6      	b.n	100056e0 <_Z11CheckBrickXaah.part.0+0x9fc>
					if (*d != TILE_EMPTY) ok = False;
10005512:	2653      	movs	r6, #83	; 0x53
10005514:	5d96      	ldrb	r6, [r2, r6]
10005516:	2e08      	cmp	r6, #8
10005518:	d100      	bne.n	1000551c <_Z11CheckBrickXaah.part.0+0x838>
1000551a:	e0e1      	b.n	100056e0 <_Z11CheckBrickXaah.part.0+0x9fc>
	return CheckBrickSave(x+2, y, brick);
1000551c:	9e02      	ldr	r6, [sp, #8]
	u8* d = &Board[x + y*MAPW];
1000551e:	9a03      	ldr	r2, [sp, #12]
	return CheckBrickSave(x+2, y, brick);
10005520:	3602      	adds	r6, #2
10005522:	b270      	sxtb	r0, r6
	u8* d = &Board[x + y*MAPW];
10005524:	4682      	mov	sl, r0
	return CheckBrickSave(x+2, y, brick);
10005526:	9002      	str	r0, [sp, #8]
	u8* d = &Board[x + y*MAPW];
10005528:	48bc      	ldr	r0, [pc, #752]	; (1000581c <_Z11CheckBrickXaah.part.0+0xb38>)
1000552a:	4452      	add	r2, sl
1000552c:	4682      	mov	sl, r0
			if (b != 0)
1000552e:	9804      	ldr	r0, [sp, #16]
	u8* d = &Board[x + y*MAPW];
10005530:	4452      	add	r2, sl
			if (b != 0)
10005532:	2800      	cmp	r0, #0
10005534:	d000      	beq.n	10005538 <_Z11CheckBrickXaah.part.0+0x854>
10005536:	e175      	b.n	10005824 <_Z11CheckBrickXaah.part.0+0xb40>
	Bool ok = True;
10005538:	3001      	adds	r0, #1
			if (b != 0)
1000553a:	9c06      	ldr	r4, [sp, #24]
1000553c:	2c00      	cmp	r4, #0
1000553e:	d004      	beq.n	1000554a <_Z11CheckBrickXaah.part.0+0x866>
				if ((y < 1) || (y >= MAPH-1))
10005540:	1e5c      	subs	r4, r3, #1
10005542:	2c11      	cmp	r4, #17
10005544:	d800      	bhi.n	10005548 <_Z11CheckBrickXaah.part.0+0x864>
10005546:	e179      	b.n	1000583c <_Z11CheckBrickXaah.part.0+0xb58>
					ok = False;
10005548:	2000      	movs	r0, #0
			if (b != 0)
1000554a:	9c08      	ldr	r4, [sp, #32]
1000554c:	2c00      	cmp	r4, #0
1000554e:	d004      	beq.n	1000555a <_Z11CheckBrickXaah.part.0+0x876>
				if ((y < 1) || (y >= MAPH-1))
10005550:	1e5c      	subs	r4, r3, #1
10005552:	2c11      	cmp	r4, #17
10005554:	d800      	bhi.n	10005558 <_Z11CheckBrickXaah.part.0+0x874>
10005556:	e180      	b.n	1000585a <_Z11CheckBrickXaah.part.0+0xb76>
					ok = False;
10005558:	2000      	movs	r0, #0
			if (b != 0)
1000555a:	9c07      	ldr	r4, [sp, #28]
1000555c:	2c00      	cmp	r4, #0
1000555e:	d004      	beq.n	1000556a <_Z11CheckBrickXaah.part.0+0x886>
				if ((y < 1) || (y >= MAPH-1))
10005560:	1e5c      	subs	r4, r3, #1
10005562:	2c11      	cmp	r4, #17
10005564:	d800      	bhi.n	10005568 <_Z11CheckBrickXaah.part.0+0x884>
10005566:	e187      	b.n	10005878 <_Z11CheckBrickXaah.part.0+0xb94>
					ok = False;
10005568:	2000      	movs	r0, #0
			if (b != 0)
1000556a:	9c05      	ldr	r4, [sp, #20]
1000556c:	2c00      	cmp	r4, #0
1000556e:	d01d      	beq.n	100055ac <_Z11CheckBrickXaah.part.0+0x8c8>
				if ((y < 1) || (y >= MAPH-1))
10005570:	2b11      	cmp	r3, #17
10005572:	d900      	bls.n	10005576 <_Z11CheckBrickXaah.part.0+0x892>
10005574:	e0a0      	b.n	100056b8 <_Z11CheckBrickXaah.part.0+0x9d4>
					if (*d != TILE_EMPTY) ok = False;
10005576:	7ed4      	ldrb	r4, [r2, #27]
10005578:	46a2      	mov	sl, r4
1000557a:	2408      	movs	r4, #8
1000557c:	4264      	negs	r4, r4
1000557e:	46a3      	mov	fp, r4
10005580:	44da      	add	sl, fp
10005582:	4656      	mov	r6, sl
10005584:	4274      	negs	r4, r6
10005586:	4174      	adcs	r4, r6
10005588:	4264      	negs	r4, r4
1000558a:	4020      	ands	r0, r4
			if (b != 0)
1000558c:	9c09      	ldr	r4, [sp, #36]	; 0x24
1000558e:	2c00      	cmp	r4, #0
10005590:	d113      	bne.n	100055ba <_Z11CheckBrickXaah.part.0+0x8d6>
10005592:	2f00      	cmp	r7, #0
10005594:	d000      	beq.n	10005598 <_Z11CheckBrickXaah.part.0+0x8b4>
10005596:	e098      	b.n	100056ca <_Z11CheckBrickXaah.part.0+0x9e6>
10005598:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1000559a:	2b00      	cmp	r3, #0
1000559c:	d020      	beq.n	100055e0 <_Z11CheckBrickXaah.part.0+0x8fc>
					if (*d != TILE_EMPTY) ok = False;
1000559e:	7f93      	ldrb	r3, [r2, #30]
100055a0:	3b08      	subs	r3, #8
100055a2:	425f      	negs	r7, r3
100055a4:	417b      	adcs	r3, r7
100055a6:	425b      	negs	r3, r3
100055a8:	4018      	ands	r0, r3
100055aa:	e019      	b.n	100055e0 <_Z11CheckBrickXaah.part.0+0x8fc>
			if (b != 0)
100055ac:	9c09      	ldr	r4, [sp, #36]	; 0x24
100055ae:	2c00      	cmp	r4, #0
100055b0:	d100      	bne.n	100055b4 <_Z11CheckBrickXaah.part.0+0x8d0>
100055b2:	e085      	b.n	100056c0 <_Z11CheckBrickXaah.part.0+0x9dc>
				if ((y < 1) || (y >= MAPH-1))
100055b4:	2b11      	cmp	r3, #17
100055b6:	d900      	bls.n	100055ba <_Z11CheckBrickXaah.part.0+0x8d6>
100055b8:	e122      	b.n	10005800 <_Z11CheckBrickXaah.part.0+0xb1c>
					if (*d != TILE_EMPTY) ok = False;
100055ba:	7f14      	ldrb	r4, [r2, #28]
100055bc:	46a2      	mov	sl, r4
100055be:	2408      	movs	r4, #8
100055c0:	4264      	negs	r4, r4
100055c2:	46a3      	mov	fp, r4
100055c4:	44da      	add	sl, fp
100055c6:	4656      	mov	r6, sl
100055c8:	4274      	negs	r4, r6
100055ca:	4174      	adcs	r4, r6
100055cc:	4264      	negs	r4, r4
100055ce:	4020      	ands	r0, r4
			if (b != 0)
100055d0:	2f00      	cmp	r7, #0
100055d2:	d17a      	bne.n	100056ca <_Z11CheckBrickXaah.part.0+0x9e6>
100055d4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
100055d6:	2c00      	cmp	r4, #0
100055d8:	d002      	beq.n	100055e0 <_Z11CheckBrickXaah.part.0+0x8fc>
				if ((y < 1) || (y >= MAPH-1))
100055da:	2b11      	cmp	r3, #17
100055dc:	d9df      	bls.n	1000559e <_Z11CheckBrickXaah.part.0+0x8ba>
					ok = False;
100055de:	2000      	movs	r0, #0
			if (b != 0)
100055e0:	4643      	mov	r3, r8
100055e2:	2b00      	cmp	r3, #0
100055e4:	d01a      	beq.n	1000561c <_Z11CheckBrickXaah.part.0+0x938>
				if ((y < 1) || (y >= MAPH-1))
100055e6:	9b00      	ldr	r3, [sp, #0]
100055e8:	2b11      	cmp	r3, #17
100055ea:	d84f      	bhi.n	1000568c <_Z11CheckBrickXaah.part.0+0x9a8>
					if (*d != TILE_EMPTY) ok = False;
100055ec:	2336      	movs	r3, #54	; 0x36
100055ee:	5cd3      	ldrb	r3, [r2, r3]
100055f0:	3b08      	subs	r3, #8
100055f2:	425f      	negs	r7, r3
100055f4:	417b      	adcs	r3, r7
100055f6:	425b      	negs	r3, r3
100055f8:	4018      	ands	r0, r3
			if (b != 0)
100055fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
100055fc:	2b00      	cmp	r3, #0
100055fe:	d114      	bne.n	1000562a <_Z11CheckBrickXaah.part.0+0x946>
10005600:	4663      	mov	r3, ip
10005602:	2b00      	cmp	r3, #0
10005604:	d14d      	bne.n	100056a2 <_Z11CheckBrickXaah.part.0+0x9be>
10005606:	9b0e      	ldr	r3, [sp, #56]	; 0x38
10005608:	2b00      	cmp	r3, #0
1000560a:	d01f      	beq.n	1000564c <_Z11CheckBrickXaah.part.0+0x968>
					if (*d != TILE_EMPTY) ok = False;
1000560c:	2339      	movs	r3, #57	; 0x39
1000560e:	5cd3      	ldrb	r3, [r2, r3]
10005610:	3b08      	subs	r3, #8
10005612:	425c      	negs	r4, r3
10005614:	4163      	adcs	r3, r4
10005616:	425b      	negs	r3, r3
10005618:	4018      	ands	r0, r3
1000561a:	e017      	b.n	1000564c <_Z11CheckBrickXaah.part.0+0x968>
			if (b != 0)
1000561c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1000561e:	2b00      	cmp	r3, #0
10005620:	d038      	beq.n	10005694 <_Z11CheckBrickXaah.part.0+0x9b0>
				if ((y < 1) || (y >= MAPH-1))
10005622:	9b00      	ldr	r3, [sp, #0]
10005624:	2b11      	cmp	r3, #17
10005626:	d900      	bls.n	1000562a <_Z11CheckBrickXaah.part.0+0x946>
10005628:	e0f6      	b.n	10005818 <_Z11CheckBrickXaah.part.0+0xb34>
					if (*d != TILE_EMPTY) ok = False;
1000562a:	2337      	movs	r3, #55	; 0x37
1000562c:	5cd3      	ldrb	r3, [r2, r3]
1000562e:	3b08      	subs	r3, #8
10005630:	425f      	negs	r7, r3
10005632:	417b      	adcs	r3, r7
10005634:	425b      	negs	r3, r3
10005636:	4018      	ands	r0, r3
			if (b != 0)
10005638:	4663      	mov	r3, ip
1000563a:	2b00      	cmp	r3, #0
1000563c:	d131      	bne.n	100056a2 <_Z11CheckBrickXaah.part.0+0x9be>
1000563e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
10005640:	2b00      	cmp	r3, #0
10005642:	d003      	beq.n	1000564c <_Z11CheckBrickXaah.part.0+0x968>
				if ((y < 1) || (y >= MAPH-1))
10005644:	9b00      	ldr	r3, [sp, #0]
10005646:	2b11      	cmp	r3, #17
10005648:	d9e0      	bls.n	1000560c <_Z11CheckBrickXaah.part.0+0x928>
					ok = False;
1000564a:	2000      	movs	r0, #0
			if (b != 0)
1000564c:	464b      	mov	r3, r9
1000564e:	2b00      	cmp	r3, #0
10005650:	d100      	bne.n	10005654 <_Z11CheckBrickXaah.part.0+0x970>
10005652:	e0d7      	b.n	10005804 <_Z11CheckBrickXaah.part.0+0xb20>
				if ((y < 1) || (y >= MAPH-1))
10005654:	9b01      	ldr	r3, [sp, #4]
10005656:	2b11      	cmp	r3, #17
10005658:	d900      	bls.n	1000565c <_Z11CheckBrickXaah.part.0+0x978>
1000565a:	e132      	b.n	100058c2 <_Z11CheckBrickXaah.part.0+0xbde>
					if (*d != TILE_EMPTY) ok = False;
1000565c:	2351      	movs	r3, #81	; 0x51
1000565e:	5cd3      	ldrb	r3, [r2, r3]
10005660:	3b08      	subs	r3, #8
10005662:	425c      	negs	r4, r3
10005664:	4163      	adcs	r3, r4
10005666:	425b      	negs	r3, r3
10005668:	4018      	ands	r0, r3
			if (b != 0)
1000566a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1000566c:	2b00      	cmp	r3, #0
1000566e:	d100      	bne.n	10005672 <_Z11CheckBrickXaah.part.0+0x98e>
10005670:	e15e      	b.n	10005930 <_Z11CheckBrickXaah.part.0+0xc4c>
					if (*d != TILE_EMPTY) ok = False;
10005672:	2352      	movs	r3, #82	; 0x52
10005674:	5cd3      	ldrb	r3, [r2, r3]
10005676:	2b08      	cmp	r3, #8
10005678:	d100      	bne.n	1000567c <_Z11CheckBrickXaah.part.0+0x998>
1000567a:	e15d      	b.n	10005938 <_Z11CheckBrickXaah.part.0+0xc54>
			b = *s++;
1000567c:	78a8      	ldrb	r0, [r5, #2]
			if (b != 0)
1000567e:	2800      	cmp	r0, #0
10005680:	d101      	bne.n	10005686 <_Z11CheckBrickXaah.part.0+0x9a2>
10005682:	f7ff fbd4 	bl	10004e2e <_Z11CheckBrickXaah.part.0+0x14a>
10005686:	2000      	movs	r0, #0
10005688:	f7ff fbd1 	bl	10004e2e <_Z11CheckBrickXaah.part.0+0x14a>
			b = *s++;
1000568c:	980a      	ldr	r0, [sp, #40]	; 0x28
			if (b != 0)
1000568e:	2800      	cmp	r0, #0
10005690:	d000      	beq.n	10005694 <_Z11CheckBrickXaah.part.0+0x9b0>
10005692:	e0c1      	b.n	10005818 <_Z11CheckBrickXaah.part.0+0xb34>
10005694:	4663      	mov	r3, ip
10005696:	2b00      	cmp	r3, #0
10005698:	d0d1      	beq.n	1000563e <_Z11CheckBrickXaah.part.0+0x95a>
				if ((y < 1) || (y >= MAPH-1))
1000569a:	9b00      	ldr	r3, [sp, #0]
1000569c:	2b11      	cmp	r3, #17
1000569e:	d900      	bls.n	100056a2 <_Z11CheckBrickXaah.part.0+0x9be>
100056a0:	e0ba      	b.n	10005818 <_Z11CheckBrickXaah.part.0+0xb34>
					if (*d != TILE_EMPTY) ok = False;
100056a2:	2338      	movs	r3, #56	; 0x38
100056a4:	5cd3      	ldrb	r3, [r2, r3]
100056a6:	3b08      	subs	r3, #8
100056a8:	425c      	negs	r4, r3
100056aa:	4163      	adcs	r3, r4
100056ac:	425b      	negs	r3, r3
100056ae:	4018      	ands	r0, r3
			if (b != 0)
100056b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
100056b2:	2b00      	cmp	r3, #0
100056b4:	d1aa      	bne.n	1000560c <_Z11CheckBrickXaah.part.0+0x928>
100056b6:	e7c9      	b.n	1000564c <_Z11CheckBrickXaah.part.0+0x968>
			b = *s++;
100056b8:	9809      	ldr	r0, [sp, #36]	; 0x24
			if (b != 0)
100056ba:	2800      	cmp	r0, #0
100056bc:	d000      	beq.n	100056c0 <_Z11CheckBrickXaah.part.0+0x9dc>
100056be:	e09f      	b.n	10005800 <_Z11CheckBrickXaah.part.0+0xb1c>
100056c0:	2f00      	cmp	r7, #0
100056c2:	d087      	beq.n	100055d4 <_Z11CheckBrickXaah.part.0+0x8f0>
				if ((y < 1) || (y >= MAPH-1))
100056c4:	2b11      	cmp	r3, #17
100056c6:	d900      	bls.n	100056ca <_Z11CheckBrickXaah.part.0+0x9e6>
100056c8:	e09a      	b.n	10005800 <_Z11CheckBrickXaah.part.0+0xb1c>
					if (*d != TILE_EMPTY) ok = False;
100056ca:	7f53      	ldrb	r3, [r2, #29]
100056cc:	3b08      	subs	r3, #8
100056ce:	425f      	negs	r7, r3
100056d0:	417b      	adcs	r3, r7
100056d2:	425b      	negs	r3, r3
100056d4:	4018      	ands	r0, r3
			if (b != 0)
100056d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
100056d8:	2b00      	cmp	r3, #0
100056da:	d000      	beq.n	100056de <_Z11CheckBrickXaah.part.0+0x9fa>
100056dc:	e75f      	b.n	1000559e <_Z11CheckBrickXaah.part.0+0x8ba>
100056de:	e77f      	b.n	100055e0 <_Z11CheckBrickXaah.part.0+0x8fc>
100056e0:	78ee      	ldrb	r6, [r5, #3]
100056e2:	2e00      	cmp	r6, #0
100056e4:	d115      	bne.n	10005712 <_Z11CheckBrickXaah.part.0+0xa2e>
	if (res)
100056e6:	2800      	cmp	r0, #0
100056e8:	d100      	bne.n	100056ec <_Z11CheckBrickXaah.part.0+0xa08>
100056ea:	e717      	b.n	1000551c <_Z11CheckBrickXaah.part.0+0x838>
		BrickX = x;
100056ec:	465a      	mov	r2, fp
100056ee:	4b4c      	ldr	r3, [pc, #304]	; (10005820 <_Z11CheckBrickXaah.part.0+0xb3c>)
100056f0:	f7ff fb97 	bl	10004e22 <_Z11CheckBrickXaah.part.0+0x13e>
			if (b != 0)
100056f4:	980b      	ldr	r0, [sp, #44]	; 0x2c
100056f6:	2800      	cmp	r0, #0
100056f8:	d000      	beq.n	100056fc <_Z11CheckBrickXaah.part.0+0xa18>
100056fa:	e70f      	b.n	1000551c <_Z11CheckBrickXaah.part.0+0x838>
			b = *s++;
100056fc:	78a8      	ldrb	r0, [r5, #2]
			if (b != 0)
100056fe:	2800      	cmp	r0, #0
10005700:	d000      	beq.n	10005704 <_Z11CheckBrickXaah.part.0+0xa20>
10005702:	e70b      	b.n	1000551c <_Z11CheckBrickXaah.part.0+0x838>
10005704:	78ee      	ldrb	r6, [r5, #3]
10005706:	2e00      	cmp	r6, #0
10005708:	d0ed      	beq.n	100056e6 <_Z11CheckBrickXaah.part.0+0xa02>
				if ((y < 1) || (y >= MAPH-1))
1000570a:	9c01      	ldr	r4, [sp, #4]
1000570c:	2c11      	cmp	r4, #17
1000570e:	d900      	bls.n	10005712 <_Z11CheckBrickXaah.part.0+0xa2e>
10005710:	e704      	b.n	1000551c <_Z11CheckBrickXaah.part.0+0x838>
					if (*d != TILE_EMPTY) ok = False;
10005712:	2654      	movs	r6, #84	; 0x54
10005714:	5d92      	ldrb	r2, [r2, r6]
10005716:	2a08      	cmp	r2, #8
10005718:	d000      	beq.n	1000571c <_Z11CheckBrickXaah.part.0+0xa38>
1000571a:	e6ff      	b.n	1000551c <_Z11CheckBrickXaah.part.0+0x838>
1000571c:	e7e3      	b.n	100056e6 <_Z11CheckBrickXaah.part.0+0xa02>
			if (b != 0)
1000571e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
10005720:	2c00      	cmp	r4, #0
10005722:	d100      	bne.n	10005726 <_Z11CheckBrickXaah.part.0+0xa42>
10005724:	e0b4      	b.n	10005890 <_Z11CheckBrickXaah.part.0+0xbac>
				if ((y < 1) || (y >= MAPH-1))
10005726:	9c01      	ldr	r4, [sp, #4]
10005728:	2c11      	cmp	r4, #17
1000572a:	d900      	bls.n	1000572e <_Z11CheckBrickXaah.part.0+0xa4a>
1000572c:	e6f6      	b.n	1000551c <_Z11CheckBrickXaah.part.0+0x838>
					if (*d != TILE_EMPTY) ok = False;
1000572e:	2652      	movs	r6, #82	; 0x52
10005730:	5d96      	ldrb	r6, [r2, r6]
10005732:	2e08      	cmp	r6, #8
10005734:	d000      	beq.n	10005738 <_Z11CheckBrickXaah.part.0+0xa54>
10005736:	e6f1      	b.n	1000551c <_Z11CheckBrickXaah.part.0+0x838>
			if (b != 0)
10005738:	78ae      	ldrb	r6, [r5, #2]
1000573a:	2e00      	cmp	r6, #0
1000573c:	d000      	beq.n	10005740 <_Z11CheckBrickXaah.part.0+0xa5c>
1000573e:	e6e8      	b.n	10005512 <_Z11CheckBrickXaah.part.0+0x82e>
10005740:	e7e0      	b.n	10005704 <_Z11CheckBrickXaah.part.0+0xa20>
10005742:	9c0a      	ldr	r4, [sp, #40]	; 0x28
10005744:	2c00      	cmp	r4, #0
10005746:	d052      	beq.n	100057ee <_Z11CheckBrickXaah.part.0+0xb0a>
				if ((y < 1) || (y >= MAPH-1))
10005748:	9c00      	ldr	r4, [sp, #0]
1000574a:	2c11      	cmp	r4, #17
1000574c:	d800      	bhi.n	10005750 <_Z11CheckBrickXaah.part.0+0xa6c>
1000574e:	e6a9      	b.n	100054a4 <_Z11CheckBrickXaah.part.0+0x7c0>
			b = *s++;
10005750:	4660      	mov	r0, ip
			if (b != 0)
10005752:	2800      	cmp	r0, #0
10005754:	d107      	bne.n	10005766 <_Z11CheckBrickXaah.part.0+0xa82>
10005756:	9c0e      	ldr	r4, [sp, #56]	; 0x38
10005758:	2c00      	cmp	r4, #0
1000575a:	d100      	bne.n	1000575e <_Z11CheckBrickXaah.part.0+0xa7a>
1000575c:	e6c1      	b.n	100054e2 <_Z11CheckBrickXaah.part.0+0x7fe>
				if ((y < 1) || (y >= MAPH-1))
1000575e:	9c00      	ldr	r4, [sp, #0]
10005760:	2c11      	cmp	r4, #17
10005762:	d800      	bhi.n	10005766 <_Z11CheckBrickXaah.part.0+0xa82>
10005764:	e6b5      	b.n	100054d2 <_Z11CheckBrickXaah.part.0+0x7ee>
					ok = False;
10005766:	2000      	movs	r0, #0
10005768:	e6bb      	b.n	100054e2 <_Z11CheckBrickXaah.part.0+0x7fe>
			if (b != 0)
1000576a:	9c09      	ldr	r4, [sp, #36]	; 0x24
1000576c:	2c00      	cmp	r4, #0
1000576e:	d034      	beq.n	100057da <_Z11CheckBrickXaah.part.0+0xaf6>
				if ((y < 1) || (y >= MAPH-1))
10005770:	2b11      	cmp	r3, #17
10005772:	d800      	bhi.n	10005776 <_Z11CheckBrickXaah.part.0+0xa92>
10005774:	e65f      	b.n	10005436 <_Z11CheckBrickXaah.part.0+0x752>
			b = *s++;
10005776:	1e38      	subs	r0, r7, #0
			if (b != 0)
10005778:	d106      	bne.n	10005788 <_Z11CheckBrickXaah.part.0+0xaa4>
1000577a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
1000577c:	2c00      	cmp	r4, #0
1000577e:	d100      	bne.n	10005782 <_Z11CheckBrickXaah.part.0+0xa9e>
10005780:	e674      	b.n	1000546c <_Z11CheckBrickXaah.part.0+0x788>
				if ((y < 1) || (y >= MAPH-1))
10005782:	2b11      	cmp	r3, #17
10005784:	d800      	bhi.n	10005788 <_Z11CheckBrickXaah.part.0+0xaa4>
10005786:	e66a      	b.n	1000545e <_Z11CheckBrickXaah.part.0+0x77a>
					ok = False;
10005788:	2000      	movs	r0, #0
1000578a:	e66f      	b.n	1000546c <_Z11CheckBrickXaah.part.0+0x788>
				if ((y < 1) || (y >= MAPH-1))
1000578c:	1e58      	subs	r0, r3, #1
1000578e:	2811      	cmp	r0, #17
10005790:	d900      	bls.n	10005794 <_Z11CheckBrickXaah.part.0+0xab0>
10005792:	e086      	b.n	100058a2 <_Z11CheckBrickXaah.part.0+0xbbe>
					if (*d != TILE_EMPTY) ok = False;
10005794:	7810      	ldrb	r0, [r2, #0]
			if (b != 0)
10005796:	9c06      	ldr	r4, [sp, #24]
					if (*d != TILE_EMPTY) ok = False;
10005798:	3808      	subs	r0, #8
1000579a:	4246      	negs	r6, r0
1000579c:	4170      	adcs	r0, r6
1000579e:	b2c0      	uxtb	r0, r0
			if (b != 0)
100057a0:	2c00      	cmp	r4, #0
100057a2:	d000      	beq.n	100057a6 <_Z11CheckBrickXaah.part.0+0xac2>
100057a4:	e07f      	b.n	100058a6 <_Z11CheckBrickXaah.part.0+0xbc2>
100057a6:	9c08      	ldr	r4, [sp, #32]
100057a8:	2c00      	cmp	r4, #0
100057aa:	d100      	bne.n	100057ae <_Z11CheckBrickXaah.part.0+0xaca>
100057ac:	e547      	b.n	1000523e <_Z11CheckBrickXaah.part.0+0x55a>
					if (*d != TILE_EMPTY) ok = False;
100057ae:	7896      	ldrb	r6, [r2, #2]
100057b0:	3e08      	subs	r6, #8
100057b2:	0034      	movs	r4, r6
100057b4:	4266      	negs	r6, r4
100057b6:	4166      	adcs	r6, r4
			if (b != 0)
100057b8:	9c07      	ldr	r4, [sp, #28]
					if (*d != TILE_EMPTY) ok = False;
100057ba:	4276      	negs	r6, r6
100057bc:	4030      	ands	r0, r6
			if (b != 0)
100057be:	2c00      	cmp	r4, #0
100057c0:	d100      	bne.n	100057c4 <_Z11CheckBrickXaah.part.0+0xae0>
100057c2:	e544      	b.n	1000524e <_Z11CheckBrickXaah.part.0+0x56a>
					if (*d != TILE_EMPTY) ok = False;
100057c4:	78d6      	ldrb	r6, [r2, #3]
100057c6:	3e08      	subs	r6, #8
100057c8:	0034      	movs	r4, r6
100057ca:	4266      	negs	r6, r4
100057cc:	4166      	adcs	r6, r4
100057ce:	4276      	negs	r6, r6
100057d0:	4030      	ands	r0, r6
100057d2:	e53c      	b.n	1000524e <_Z11CheckBrickXaah.part.0+0x56a>
			b = *s++;
100057d4:	9c09      	ldr	r4, [sp, #36]	; 0x24
100057d6:	1e20      	subs	r0, r4, #0
			if (b != 0)
100057d8:	d1cd      	bne.n	10005776 <_Z11CheckBrickXaah.part.0+0xa92>
100057da:	2f00      	cmp	r7, #0
100057dc:	d0cd      	beq.n	1000577a <_Z11CheckBrickXaah.part.0+0xa96>
				if ((y < 1) || (y >= MAPH-1))
100057de:	2b11      	cmp	r3, #17
100057e0:	d800      	bhi.n	100057e4 <_Z11CheckBrickXaah.part.0+0xb00>
100057e2:	e632      	b.n	1000544a <_Z11CheckBrickXaah.part.0+0x766>
					ok = False;
100057e4:	2000      	movs	r0, #0
100057e6:	e641      	b.n	1000546c <_Z11CheckBrickXaah.part.0+0x788>
			b = *s++;
100057e8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
100057ea:	1e20      	subs	r0, r4, #0
			if (b != 0)
100057ec:	d1b0      	bne.n	10005750 <_Z11CheckBrickXaah.part.0+0xa6c>
100057ee:	4664      	mov	r4, ip
100057f0:	2c00      	cmp	r4, #0
100057f2:	d0b0      	beq.n	10005756 <_Z11CheckBrickXaah.part.0+0xa72>
				if ((y < 1) || (y >= MAPH-1))
100057f4:	9c00      	ldr	r4, [sp, #0]
100057f6:	2c11      	cmp	r4, #17
100057f8:	d800      	bhi.n	100057fc <_Z11CheckBrickXaah.part.0+0xb18>
100057fa:	e65f      	b.n	100054bc <_Z11CheckBrickXaah.part.0+0x7d8>
					ok = False;
100057fc:	2000      	movs	r0, #0
100057fe:	e670      	b.n	100054e2 <_Z11CheckBrickXaah.part.0+0x7fe>
10005800:	2000      	movs	r0, #0
10005802:	e6e7      	b.n	100055d4 <_Z11CheckBrickXaah.part.0+0x8f0>
			if (b != 0)
10005804:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
10005806:	2b00      	cmp	r3, #0
10005808:	d06c      	beq.n	100058e4 <_Z11CheckBrickXaah.part.0+0xc00>
				if ((y < 1) || (y >= MAPH-1))
1000580a:	9b01      	ldr	r3, [sp, #4]
1000580c:	2b11      	cmp	r3, #17
1000580e:	d800      	bhi.n	10005812 <_Z11CheckBrickXaah.part.0+0xb2e>
10005810:	e72f      	b.n	10005672 <_Z11CheckBrickXaah.part.0+0x98e>
			if (b != 0)
10005812:	2000      	movs	r0, #0
10005814:	f7ff fb0b 	bl	10004e2e <_Z11CheckBrickXaah.part.0+0x14a>
					ok = False;
10005818:	2000      	movs	r0, #0
1000581a:	e710      	b.n	1000563e <_Z11CheckBrickXaah.part.0+0x95a>
1000581c:	2000327c 	.word	0x2000327c
10005820:	20012765 	.word	0x20012765
				if ((y < 1) || (y >= MAPH-1))
10005824:	1e58      	subs	r0, r3, #1
10005826:	2811      	cmp	r0, #17
10005828:	d849      	bhi.n	100058be <_Z11CheckBrickXaah.part.0+0xbda>
					if (*d != TILE_EMPTY) ok = False;
1000582a:	7810      	ldrb	r0, [r2, #0]
1000582c:	3808      	subs	r0, #8
1000582e:	0004      	movs	r4, r0
10005830:	4260      	negs	r0, r4
10005832:	4160      	adcs	r0, r4
			if (b != 0)
10005834:	9c06      	ldr	r4, [sp, #24]
					if (*d != TILE_EMPTY) ok = False;
10005836:	b2c0      	uxtb	r0, r0
			if (b != 0)
10005838:	2c00      	cmp	r4, #0
1000583a:	d075      	beq.n	10005928 <_Z11CheckBrickXaah.part.0+0xc44>
					if (*d != TILE_EMPTY) ok = False;
1000583c:	7854      	ldrb	r4, [r2, #1]
1000583e:	46a2      	mov	sl, r4
10005840:	2408      	movs	r4, #8
10005842:	4264      	negs	r4, r4
10005844:	46a3      	mov	fp, r4
10005846:	44da      	add	sl, fp
10005848:	4656      	mov	r6, sl
1000584a:	4274      	negs	r4, r6
1000584c:	4174      	adcs	r4, r6
1000584e:	4264      	negs	r4, r4
10005850:	4020      	ands	r0, r4
			if (b != 0)
10005852:	9c08      	ldr	r4, [sp, #32]
10005854:	2c00      	cmp	r4, #0
10005856:	d100      	bne.n	1000585a <_Z11CheckBrickXaah.part.0+0xb76>
10005858:	e67f      	b.n	1000555a <_Z11CheckBrickXaah.part.0+0x876>
					if (*d != TILE_EMPTY) ok = False;
1000585a:	7894      	ldrb	r4, [r2, #2]
1000585c:	46a2      	mov	sl, r4
1000585e:	2408      	movs	r4, #8
10005860:	4264      	negs	r4, r4
10005862:	46a3      	mov	fp, r4
10005864:	44da      	add	sl, fp
10005866:	4656      	mov	r6, sl
10005868:	4274      	negs	r4, r6
1000586a:	4174      	adcs	r4, r6
1000586c:	4264      	negs	r4, r4
1000586e:	4020      	ands	r0, r4
			if (b != 0)
10005870:	9c07      	ldr	r4, [sp, #28]
10005872:	2c00      	cmp	r4, #0
10005874:	d100      	bne.n	10005878 <_Z11CheckBrickXaah.part.0+0xb94>
10005876:	e678      	b.n	1000556a <_Z11CheckBrickXaah.part.0+0x886>
					if (*d != TILE_EMPTY) ok = False;
10005878:	78d4      	ldrb	r4, [r2, #3]
1000587a:	46a2      	mov	sl, r4
1000587c:	2408      	movs	r4, #8
1000587e:	4264      	negs	r4, r4
10005880:	46a3      	mov	fp, r4
10005882:	44da      	add	sl, fp
10005884:	4656      	mov	r6, sl
10005886:	4274      	negs	r4, r6
10005888:	4174      	adcs	r4, r6
1000588a:	4264      	negs	r4, r4
1000588c:	4020      	ands	r0, r4
1000588e:	e66c      	b.n	1000556a <_Z11CheckBrickXaah.part.0+0x886>
			if (b != 0)
10005890:	78ae      	ldrb	r6, [r5, #2]
10005892:	2e00      	cmp	r6, #0
10005894:	d100      	bne.n	10005898 <_Z11CheckBrickXaah.part.0+0xbb4>
10005896:	e735      	b.n	10005704 <_Z11CheckBrickXaah.part.0+0xa20>
				if ((y < 1) || (y >= MAPH-1))
10005898:	9c01      	ldr	r4, [sp, #4]
1000589a:	2c11      	cmp	r4, #17
1000589c:	d900      	bls.n	100058a0 <_Z11CheckBrickXaah.part.0+0xbbc>
1000589e:	e63d      	b.n	1000551c <_Z11CheckBrickXaah.part.0+0x838>
100058a0:	e637      	b.n	10005512 <_Z11CheckBrickXaah.part.0+0x82e>
					ok = False;
100058a2:	2000      	movs	r0, #0
100058a4:	e4bb      	b.n	1000521e <_Z11CheckBrickXaah.part.0+0x53a>
					if (*d != TILE_EMPTY) ok = False;
100058a6:	7856      	ldrb	r6, [r2, #1]
100058a8:	3e08      	subs	r6, #8
100058aa:	0034      	movs	r4, r6
100058ac:	4266      	negs	r6, r4
100058ae:	4166      	adcs	r6, r4
			if (b != 0)
100058b0:	9c08      	ldr	r4, [sp, #32]
					if (*d != TILE_EMPTY) ok = False;
100058b2:	4276      	negs	r6, r6
100058b4:	4030      	ands	r0, r6
			if (b != 0)
100058b6:	2c00      	cmp	r4, #0
100058b8:	d000      	beq.n	100058bc <_Z11CheckBrickXaah.part.0+0xbd8>
100058ba:	e778      	b.n	100057ae <_Z11CheckBrickXaah.part.0+0xaca>
100058bc:	e4bf      	b.n	1000523e <_Z11CheckBrickXaah.part.0+0x55a>
					ok = False;
100058be:	2000      	movs	r0, #0
100058c0:	e63b      	b.n	1000553a <_Z11CheckBrickXaah.part.0+0x856>
			if (b != 0)
100058c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
100058c4:	2b00      	cmp	r3, #0
100058c6:	d000      	beq.n	100058ca <_Z11CheckBrickXaah.part.0+0xbe6>
100058c8:	e6dd      	b.n	10005686 <_Z11CheckBrickXaah.part.0+0x9a2>
			b = *s++;
100058ca:	78a8      	ldrb	r0, [r5, #2]
			if (b != 0)
100058cc:	2800      	cmp	r0, #0
100058ce:	d000      	beq.n	100058d2 <_Z11CheckBrickXaah.part.0+0xbee>
100058d0:	e6d9      	b.n	10005686 <_Z11CheckBrickXaah.part.0+0x9a2>
100058d2:	78eb      	ldrb	r3, [r5, #3]
100058d4:	2b00      	cmp	r3, #0
100058d6:	d019      	beq.n	1000590c <_Z11CheckBrickXaah.part.0+0xc28>
				if ((y < 1) || (y >= MAPH-1))
100058d8:	9b01      	ldr	r3, [sp, #4]
100058da:	2b11      	cmp	r3, #17
100058dc:	d911      	bls.n	10005902 <_Z11CheckBrickXaah.part.0+0xc1e>
			if (b != 0)
100058de:	2000      	movs	r0, #0
100058e0:	f7ff faa5 	bl	10004e2e <_Z11CheckBrickXaah.part.0+0x14a>
100058e4:	78ab      	ldrb	r3, [r5, #2]
100058e6:	2b00      	cmp	r3, #0
100058e8:	d0f3      	beq.n	100058d2 <_Z11CheckBrickXaah.part.0+0xbee>
				if ((y < 1) || (y >= MAPH-1))
100058ea:	9b01      	ldr	r3, [sp, #4]
100058ec:	2b11      	cmp	r3, #17
100058ee:	d900      	bls.n	100058f2 <_Z11CheckBrickXaah.part.0+0xc0e>
100058f0:	e6c9      	b.n	10005686 <_Z11CheckBrickXaah.part.0+0x9a2>
					if (*d != TILE_EMPTY) ok = False;
100058f2:	2353      	movs	r3, #83	; 0x53
100058f4:	5cd3      	ldrb	r3, [r2, r3]
100058f6:	2b08      	cmp	r3, #8
100058f8:	d000      	beq.n	100058fc <_Z11CheckBrickXaah.part.0+0xc18>
100058fa:	e6c4      	b.n	10005686 <_Z11CheckBrickXaah.part.0+0x9a2>
			if (b != 0)
100058fc:	78eb      	ldrb	r3, [r5, #3]
100058fe:	2b00      	cmp	r3, #0
10005900:	d004      	beq.n	1000590c <_Z11CheckBrickXaah.part.0+0xc28>
					if (*d != TILE_EMPTY) ok = False;
10005902:	2354      	movs	r3, #84	; 0x54
10005904:	5cd3      	ldrb	r3, [r2, r3]
10005906:	2b08      	cmp	r3, #8
10005908:	d000      	beq.n	1000590c <_Z11CheckBrickXaah.part.0+0xc28>
1000590a:	e6bc      	b.n	10005686 <_Z11CheckBrickXaah.part.0+0x9a2>
	if (res)
1000590c:	2800      	cmp	r0, #0
1000590e:	d101      	bne.n	10005914 <_Z11CheckBrickXaah.part.0+0xc30>
10005910:	f7ff fa8d 	bl	10004e2e <_Z11CheckBrickXaah.part.0+0x14a>
		BrickX = x;
10005914:	4b0a      	ldr	r3, [pc, #40]	; (10005940 <_Z11CheckBrickXaah.part.0+0xc5c>)
10005916:	9a02      	ldr	r2, [sp, #8]
10005918:	f7ff fa83 	bl	10004e22 <_Z11CheckBrickXaah.part.0+0x13e>
			if (b != 0)
1000591c:	78ac      	ldrb	r4, [r5, #2]
1000591e:	2c00      	cmp	r4, #0
10005920:	d000      	beq.n	10005924 <_Z11CheckBrickXaah.part.0+0xc40>
10005922:	e538      	b.n	10005396 <_Z11CheckBrickXaah.part.0+0x6b2>
10005924:	f7ff fb39 	bl	10004f9a <_Z11CheckBrickXaah.part.0+0x2b6>
10005928:	9c08      	ldr	r4, [sp, #32]
1000592a:	2c00      	cmp	r4, #0
1000592c:	d195      	bne.n	1000585a <_Z11CheckBrickXaah.part.0+0xb76>
1000592e:	e614      	b.n	1000555a <_Z11CheckBrickXaah.part.0+0x876>
10005930:	78ab      	ldrb	r3, [r5, #2]
10005932:	2b00      	cmp	r3, #0
10005934:	d1dd      	bne.n	100058f2 <_Z11CheckBrickXaah.part.0+0xc0e>
10005936:	e7e1      	b.n	100058fc <_Z11CheckBrickXaah.part.0+0xc18>
10005938:	78ab      	ldrb	r3, [r5, #2]
1000593a:	2b00      	cmp	r3, #0
1000593c:	d1d9      	bne.n	100058f2 <_Z11CheckBrickXaah.part.0+0xc0e>
1000593e:	e7c8      	b.n	100058d2 <_Z11CheckBrickXaah.part.0+0xbee>
10005940:	20012765 	.word	0x20012765

10005944 <_Z8DispHelpv>:
{
10005944:	b510      	push	{r4, lr}
	printf("\n");
10005946:	200a      	movs	r0, #10
10005948:	f7fc fafc 	bl	10001f44 <__wrap_putchar>
	printf("JoyStick ... right\n");
1000594c:	4807      	ldr	r0, [pc, #28]	; (1000596c <_Z8DispHelpv+0x28>)
1000594e:	f7fc fb07 	bl	10001f60 <__wrap_puts>
	printf("JoyStick ... up\n");
10005952:	4807      	ldr	r0, [pc, #28]	; (10005970 <_Z8DispHelpv+0x2c>)
10005954:	f7fc fb04 	bl	10001f60 <__wrap_puts>
	printf("JoyStick ... left\n");
10005958:	4806      	ldr	r0, [pc, #24]	; (10005974 <_Z8DispHelpv+0x30>)
1000595a:	f7fc fb01 	bl	10001f60 <__wrap_puts>
	printf("JoyStick ... down\n");
1000595e:	4806      	ldr	r0, [pc, #24]	; (10005978 <_Z8DispHelpv+0x34>)
10005960:	f7fc fafe 	bl	10001f60 <__wrap_puts>
	printf("JoyStick fire ... pause\n");
10005964:	4805      	ldr	r0, [pc, #20]	; (1000597c <_Z8DispHelpv+0x38>)
10005966:	f7fc fafb 	bl	10001f60 <__wrap_puts>
}
1000596a:	bd10      	pop	{r4, pc}
1000596c:	1000e62c 	.word	0x1000e62c
10005970:	1000e640 	.word	0x1000e640
10005974:	1000e650 	.word	0x1000e650
10005978:	1000e664 	.word	0x1000e664
1000597c:	1000e678 	.word	0x1000e678

10005980 <_Z11DispTileNumhih>:
{
10005980:	b5f0      	push	{r4, r5, r6, r7, lr}
10005982:	46de      	mov	lr, fp
10005984:	4657      	mov	r7, sl
10005986:	464e      	mov	r6, r9
10005988:	4645      	mov	r5, r8
1000598a:	b5e0      	push	{r5, r6, r7, lr}
	int n = DecNum(NumBuf, num);
1000598c:	4f37      	ldr	r7, [pc, #220]	; (10005a6c <_Z11DispTileNumhih+0xec>)
{
1000598e:	b089      	sub	sp, #36	; 0x24
10005990:	0006      	movs	r6, r0
	int n = DecNum(NumBuf, num);
10005992:	0038      	movs	r0, r7
{
10005994:	4693      	mov	fp, r2
10005996:	9207      	str	r2, [sp, #28]
	int n = DecNum(NumBuf, num);
10005998:	f005 ffac 	bl	1000b8f4 <_Z6DecNumPcl>
	int n1 = n/2;
1000599c:	0fc4      	lsrs	r4, r0, #31
1000599e:	1824      	adds	r4, r4, r0
100059a0:	1064      	asrs	r4, r4, #1
	int n2 = n - n1;
100059a2:	1b03      	subs	r3, r0, r4
100059a4:	9306      	str	r3, [sp, #24]
	DrawTextBg(&Canvas, &NumBuf[n1], 0, TILENUM_Y + (tile+1)*TILESIZE, col, COL_BLACK, FontBold8x16, 16);
100059a6:	4b32      	ldr	r3, [pc, #200]	; (10005a70 <_Z11DispTileNumhih+0xf0>)
	int n = DecNum(NumBuf, num);
100059a8:	0005      	movs	r5, r0
	DrawTextBg(&Canvas, &NumBuf[n1], 0, TILENUM_Y + (tile+1)*TILESIZE, col, COL_BLACK, FontBold8x16, 16);
100059aa:	4699      	mov	r9, r3
100059ac:	2301      	movs	r3, #1
100059ae:	4698      	mov	r8, r3
100059b0:	9305      	str	r3, [sp, #20]
100059b2:	9304      	str	r3, [sp, #16]
100059b4:	330f      	adds	r3, #15
100059b6:	9303      	str	r3, [sp, #12]
100059b8:	4b2e      	ldr	r3, [pc, #184]	; (10005a74 <_Z11DispTileNumhih+0xf4>)
100059ba:	1c70      	adds	r0, r6, #1
100059bc:	9302      	str	r3, [sp, #8]
100059be:	2300      	movs	r3, #0
100059c0:	469a      	mov	sl, r3
100059c2:	9301      	str	r3, [sp, #4]
100059c4:	465b      	mov	r3, fp
100059c6:	0046      	lsls	r6, r0, #1
100059c8:	1836      	adds	r6, r6, r0
100059ca:	00f6      	lsls	r6, r6, #3
100059cc:	9300      	str	r3, [sp, #0]
100059ce:	2200      	movs	r2, #0
100059d0:	0033      	movs	r3, r6
100059d2:	4648      	mov	r0, r9
100059d4:	1939      	adds	r1, r7, r4
100059d6:	f007 fc37 	bl	1000d248 <_Z10DrawTextBgP7sCanvasPKciihhPKviii>
	if (n1 > 0)
100059da:	2d01      	cmp	r5, #1
100059dc:	dc19      	bgt.n	10005a12 <_Z11DispTileNumhih+0x92>
100059de:	2318      	movs	r3, #24
100059e0:	425b      	negs	r3, r3
100059e2:	469b      	mov	fp, r3
100059e4:	44b3      	add	fp, r6
	if (n1 < 3) DrawRect(&Canvas, 0, TILENUM_Y + tile*TILESIZE, (3-n1)*8, 16, COL_BLACK);
100059e6:	2200      	movs	r2, #0
100059e8:	2303      	movs	r3, #3
100059ea:	9201      	str	r2, [sp, #4]
100059ec:	1b1b      	subs	r3, r3, r4
100059ee:	3210      	adds	r2, #16
100059f0:	00db      	lsls	r3, r3, #3
100059f2:	9200      	str	r2, [sp, #0]
100059f4:	2100      	movs	r1, #0
100059f6:	465a      	mov	r2, fp
100059f8:	4648      	mov	r0, r9
100059fa:	f006 fd5f 	bl	1000c4bc <_Z8DrawRectP7sCanvasiiiih>
	if (n2 < 3) DrawRect(&Canvas, n2*8, TILENUM_Y + (tile+1)*TILESIZE, (3-n2)*8, 16, COL_BLACK);
100059fe:	9b06      	ldr	r3, [sp, #24]
10005a00:	2b02      	cmp	r3, #2
10005a02:	dd24      	ble.n	10005a4e <_Z11DispTileNumhih+0xce>
}
10005a04:	b009      	add	sp, #36	; 0x24
10005a06:	bcf0      	pop	{r4, r5, r6, r7}
10005a08:	46bb      	mov	fp, r7
10005a0a:	46b2      	mov	sl, r6
10005a0c:	46a9      	mov	r9, r5
10005a0e:	46a0      	mov	r8, r4
10005a10:	bdf0      	pop	{r4, r5, r6, r7, pc}
		NumBuf[n1] = 0;
10005a12:	4653      	mov	r3, sl
10005a14:	553b      	strb	r3, [r7, r4]
		DrawTextBg(&Canvas, NumBuf, TILESIZE-n1*8, TILENUM_Y + tile*TILESIZE, col, COL_BLACK, FontBold8x16, 16);
10005a16:	2318      	movs	r3, #24
10005a18:	425b      	negs	r3, r3
10005a1a:	469b      	mov	fp, r3
10005a1c:	4643      	mov	r3, r8
10005a1e:	9305      	str	r3, [sp, #20]
10005a20:	9304      	str	r3, [sp, #16]
10005a22:	2310      	movs	r3, #16
10005a24:	9303      	str	r3, [sp, #12]
10005a26:	4b13      	ldr	r3, [pc, #76]	; (10005a74 <_Z11DispTileNumhih+0xf4>)
10005a28:	2203      	movs	r2, #3
10005a2a:	9302      	str	r3, [sp, #8]
10005a2c:	4653      	mov	r3, sl
10005a2e:	9301      	str	r3, [sp, #4]
10005a30:	9b07      	ldr	r3, [sp, #28]
10005a32:	44b3      	add	fp, r6
10005a34:	1b12      	subs	r2, r2, r4
10005a36:	9300      	str	r3, [sp, #0]
10005a38:	0039      	movs	r1, r7
10005a3a:	465b      	mov	r3, fp
10005a3c:	4648      	mov	r0, r9
10005a3e:	00d2      	lsls	r2, r2, #3
10005a40:	f007 fc02 	bl	1000d248 <_Z10DrawTextBgP7sCanvasPKciihhPKviii>
	if (n1 < 3) DrawRect(&Canvas, 0, TILENUM_Y + tile*TILESIZE, (3-n1)*8, 16, COL_BLACK);
10005a44:	2d05      	cmp	r5, #5
10005a46:	ddce      	ble.n	100059e6 <_Z11DispTileNumhih+0x66>
	if (n2 < 3) DrawRect(&Canvas, n2*8, TILENUM_Y + (tile+1)*TILESIZE, (3-n2)*8, 16, COL_BLACK);
10005a48:	9b06      	ldr	r3, [sp, #24]
10005a4a:	2b02      	cmp	r3, #2
10005a4c:	dcda      	bgt.n	10005a04 <_Z11DispTileNumhih+0x84>
10005a4e:	001a      	movs	r2, r3
10005a50:	2303      	movs	r3, #3
10005a52:	00d1      	lsls	r1, r2, #3
10005a54:	1a9b      	subs	r3, r3, r2
10005a56:	2200      	movs	r2, #0
10005a58:	9201      	str	r2, [sp, #4]
10005a5a:	3210      	adds	r2, #16
10005a5c:	9200      	str	r2, [sp, #0]
10005a5e:	4648      	mov	r0, r9
10005a60:	0032      	movs	r2, r6
10005a62:	00db      	lsls	r3, r3, #3
10005a64:	f006 fd2a 	bl	1000c4bc <_Z8DrawRectP7sCanvasiiiih>
}
10005a68:	e7cc      	b.n	10005a04 <_Z11DispTileNumhih+0x84>
10005a6a:	46c0      	nop			; (mov r8, r8)
10005a6c:	20006208 	.word	0x20006208
10005a70:	200034a0 	.word	0x200034a0
10005a74:	10029e24 	.word	0x10029e24

10005a78 <_Z8CheckEndv.part.0>:
	// display current brick
	DispBrick(BrickX, BrickY, Brick);
}

// check end game (returns True to continue)
Bool CheckEnd()
10005a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10005a7a:	46ce      	mov	lr, r9
10005a7c:	4647      	mov	r7, r8
10005a7e:	b580      	push	{r7, lr}

	// check new brick on start position
	if (!CheckBrick(BrickX, BrickY, Brick))
	{
		// best score
		if (!Demo)
10005a80:	4b5f      	ldr	r3, [pc, #380]	; (10005c00 <_Z8CheckEndv.part.0+0x188>)
10005a82:	4699      	mov	r9, r3
10005a84:	781b      	ldrb	r3, [r3, #0]
10005a86:	2b00      	cmp	r3, #0
10005a88:	d133      	bne.n	10005af2 <_Z8CheckEndv.part.0+0x7a>
		{
			if (Level > LevelBest) LevelBest = Level;
10005a8a:	4f5e      	ldr	r7, [pc, #376]	; (10005c04 <_Z8CheckEndv.part.0+0x18c>)
10005a8c:	4c5e      	ldr	r4, [pc, #376]	; (10005c08 <_Z8CheckEndv.part.0+0x190>)
10005a8e:	783b      	ldrb	r3, [r7, #0]
10005a90:	7822      	ldrb	r2, [r4, #0]
10005a92:	429a      	cmp	r2, r3
10005a94:	d200      	bcs.n	10005a98 <_Z8CheckEndv.part.0+0x20>
10005a96:	7023      	strb	r3, [r4, #0]
			if (Score > ScoreBest) ScoreBest = Score;
10005a98:	4b5c      	ldr	r3, [pc, #368]	; (10005c0c <_Z8CheckEndv.part.0+0x194>)
10005a9a:	4e5d      	ldr	r6, [pc, #372]	; (10005c10 <_Z8CheckEndv.part.0+0x198>)
10005a9c:	6819      	ldr	r1, [r3, #0]
10005a9e:	6833      	ldr	r3, [r6, #0]
10005aa0:	4299      	cmp	r1, r3
10005aa2:	d900      	bls.n	10005aa6 <_Z8CheckEndv.part.0+0x2e>
10005aa4:	6031      	str	r1, [r6, #0]
			if (Lines > LinesBest) LinesBest = Lines;
10005aa6:	4b5b      	ldr	r3, [pc, #364]	; (10005c14 <_Z8CheckEndv.part.0+0x19c>)
10005aa8:	4d5b      	ldr	r5, [pc, #364]	; (10005c18 <_Z8CheckEndv.part.0+0x1a0>)
10005aaa:	4698      	mov	r8, r3
10005aac:	682a      	ldr	r2, [r5, #0]
10005aae:	681b      	ldr	r3, [r3, #0]
10005ab0:	4293      	cmp	r3, r2
10005ab2:	dd00      	ble.n	10005ab6 <_Z8CheckEndv.part.0+0x3e>
10005ab4:	e0a2      	b.n	10005bfc <_Z8CheckEndv.part.0+0x184>
	DispTileNum(TILE_SCOREV1, Score, COL_WHITE);
10005ab6:	22ff      	movs	r2, #255	; 0xff
10005ab8:	202e      	movs	r0, #46	; 0x2e
10005aba:	f7ff ff61 	bl	10005980 <_Z11DispTileNumhih>
	DispTileNum(TILE_SCOREV3, ScoreBest, COL_YELLOW);
10005abe:	22fc      	movs	r2, #252	; 0xfc
10005ac0:	2042      	movs	r0, #66	; 0x42
10005ac2:	6831      	ldr	r1, [r6, #0]
10005ac4:	f7ff ff5c 	bl	10005980 <_Z11DispTileNumhih>
	DispTileNum(TILE_LINESV1, Lines, COL_WHITE);
10005ac8:	4643      	mov	r3, r8
10005aca:	22ff      	movs	r2, #255	; 0xff
10005acc:	6819      	ldr	r1, [r3, #0]
10005ace:	2030      	movs	r0, #48	; 0x30
10005ad0:	f7ff ff56 	bl	10005980 <_Z11DispTileNumhih>
	DispTileNum(TILE_LINESV3, LinesBest, COL_YELLOW);
10005ad4:	22fc      	movs	r2, #252	; 0xfc
10005ad6:	2044      	movs	r0, #68	; 0x44
10005ad8:	6829      	ldr	r1, [r5, #0]
10005ada:	f7ff ff51 	bl	10005980 <_Z11DispTileNumhih>
	DispTileNum(TILE_SPEEDV1, Level, COL_WHITE);
10005ade:	22ff      	movs	r2, #255	; 0xff
10005ae0:	2032      	movs	r0, #50	; 0x32
10005ae2:	7839      	ldrb	r1, [r7, #0]
10005ae4:	f7ff ff4c 	bl	10005980 <_Z11DispTileNumhih>
	DispTileNum(TILE_SPEEDV3, LevelBest, COL_YELLOW);
10005ae8:	22fc      	movs	r2, #252	; 0xfc
10005aea:	2046      	movs	r0, #70	; 0x46
10005aec:	7821      	ldrb	r1, [r4, #0]
10005aee:	f7ff ff47 	bl	10005980 <_Z11DispTileNumhih>
			DispScore();
		}

		// play sound
		PlaySound(GameOverSnd, sizeof(GameOverSnd));
10005af2:	23fe      	movs	r3, #254	; 0xfe
10005af4:	2200      	movs	r2, #0
10005af6:	059b      	lsls	r3, r3, #22
10005af8:	4948      	ldr	r1, [pc, #288]	; (10005c1c <_Z8CheckEndv.part.0+0x1a4>)
10005afa:	4849      	ldr	r0, [pc, #292]	; (10005c20 <_Z8CheckEndv.part.0+0x1a8>)
10005afc:	f007 feea 	bl	1000d8d4 <_Z9PlaySoundPKhihf>

		// save board
		memcpy(SaveBoard, Board, MAPSIZE);
10005b00:	2287      	movs	r2, #135	; 0x87
10005b02:	4d48      	ldr	r5, [pc, #288]	; (10005c24 <_Z8CheckEndv.part.0+0x1ac>)
10005b04:	4e48      	ldr	r6, [pc, #288]	; (10005c28 <_Z8CheckEndv.part.0+0x1b0>)
10005b06:	0029      	movs	r1, r5
10005b08:	0030      	movs	r0, r6
10005b0a:	0092      	lsls	r2, r2, #2
10005b0c:	f7fa ff44 	bl	10000998 <__wrap___aeabi_memcpy>

		// loop 2 seconds
		for (i = 10; i > 0; i--)
		{
			// display message
			memcpy(&Board[MAPW/2-5 + MAPH/2*MAPW], OverMsg, 10);
10005b10:	002f      	movs	r7, r5
10005b12:	4b46      	ldr	r3, [pc, #280]	; (10005c2c <_Z8CheckEndv.part.0+0x1b4>)
		memcpy(SaveBoard, Board, MAPSIZE);
10005b14:	240a      	movs	r4, #10
10005b16:	4698      	mov	r8, r3
			memcpy(&Board[MAPW/2-5 + MAPH/2*MAPW], OverMsg, 10);
10005b18:	3717      	adds	r7, #23
10005b1a:	37ff      	adds	r7, #255	; 0xff
10005b1c:	220a      	movs	r2, #10
10005b1e:	4641      	mov	r1, r8
10005b20:	0038      	movs	r0, r7
10005b22:	f7fa ff39 	bl	10000998 <__wrap___aeabi_memcpy>

			// wait
			sleep_ms(100);
10005b26:	2064      	movs	r0, #100	; 0x64
10005b28:	f7fc ffd6 	bl	10002ad8 <sleep_ms>

			// restore board
			memcpy(Board, SaveBoard, MAPSIZE);
10005b2c:	2287      	movs	r2, #135	; 0x87
10005b2e:	0031      	movs	r1, r6
10005b30:	0092      	lsls	r2, r2, #2
10005b32:	0028      	movs	r0, r5
10005b34:	f7fa ff30 	bl	10000998 <__wrap___aeabi_memcpy>
		for (i = 10; i > 0; i--)
10005b38:	3c01      	subs	r4, #1

			// wait
			sleep_ms(100);
10005b3a:	2064      	movs	r0, #100	; 0x64
10005b3c:	f7fc ffcc 	bl	10002ad8 <sleep_ms>
		for (i = 10; i > 0; i--)
10005b40:	2c00      	cmp	r4, #0
10005b42:	d1eb      	bne.n	10005b1c <_Z8CheckEndv.part.0+0xa4>
		}

		if (Demo) return False;
10005b44:	464b      	mov	r3, r9
10005b46:	781b      	ldrb	r3, [r3, #0]
10005b48:	2b00      	cmp	r3, #0
10005b4a:	d14e      	bne.n	10005bea <_Z8CheckEndv.part.0+0x172>

		// display message
		memcpy(&Board[MAPW/2-5 + MAPH/2*MAPW], OverMsg, 10);
10005b4c:	0038      	movs	r0, r7
10005b4e:	220a      	movs	r2, #10
10005b50:	4641      	mov	r1, r8
 *
 * \param gpio GPIO number
 * \return Current state of the GPIO. 0 for low, non-zero for high
 */
static inline bool gpio_get(uint gpio) {
    return !!((1ul << gpio) & sio_hw->gpio_in);
10005b52:	27d0      	movs	r7, #208	; 0xd0
10005b54:	f7fa ff20 	bl	10000998 <__wrap___aeabi_memcpy>
10005b58:	063f      	lsls	r7, r7, #24
10005b5a:	3401      	adds	r4, #1
10005b5c:	687b      	ldr	r3, [r7, #4]
10005b5e:	0d5b      	lsrs	r3, r3, #21
	if (!gpio_get(PB_RT))		// RIGHT
10005b60:	421c      	tst	r4, r3
10005b62:	d047      	beq.n	10005bf4 <_Z8CheckEndv.part.0+0x17c>
10005b64:	687b      	ldr	r3, [r7, #4]
10005b66:	0c1b      	lsrs	r3, r3, #16
	else if (!gpio_get(PB_UP))	// ROTATE=UP
10005b68:	421c      	tst	r4, r3
10005b6a:	d043      	beq.n	10005bf4 <_Z8CheckEndv.part.0+0x17c>
10005b6c:	687b      	ldr	r3, [r7, #4]
10005b6e:	0d1b      	lsrs	r3, r3, #20
	else if (!gpio_get(PB_LT))	// LEFT
10005b70:	421c      	tst	r4, r3
10005b72:	d03f      	beq.n	10005bf4 <_Z8CheckEndv.part.0+0x17c>
10005b74:	687b      	ldr	r3, [r7, #4]
10005b76:	0c9b      	lsrs	r3, r3, #18
	else if (!gpio_get(PB_DN))	// DROP=DOWN
10005b78:	421c      	tst	r4, r3
10005b7a:	d03b      	beq.n	10005bf4 <_Z8CheckEndv.part.0+0x17c>
10005b7c:	687b      	ldr	r3, [r7, #4]
10005b7e:	0c5b      	lsrs	r3, r3, #17
	else if (!gpio_get(PB_FR))	// PAUSE=FIRE
10005b80:	421c      	tst	r4, r3
10005b82:	d037      	beq.n	10005bf4 <_Z8CheckEndv.part.0+0x17c>
	char c = getchar_timeout_us(0);
10005b84:	2000      	movs	r0, #0
10005b86:	f7fc fa2b 	bl	10001fe0 <getchar_timeout_us>
	while (GetChar() != 0) {}
10005b8a:	3801      	subs	r0, #1
10005b8c:	b2c0      	uxtb	r0, r0
10005b8e:	28fd      	cmp	r0, #253	; 0xfd
10005b90:	d9e4      	bls.n	10005b5c <_Z8CheckEndv.part.0+0xe4>
10005b92:	687b      	ldr	r3, [r7, #4]
10005b94:	0d5b      	lsrs	r3, r3, #21
	if (!gpio_get(PB_RT))		// RIGHT
10005b96:	421c      	tst	r4, r3
10005b98:	d01e      	beq.n	10005bd8 <_Z8CheckEndv.part.0+0x160>
10005b9a:	27d0      	movs	r7, #208	; 0xd0
10005b9c:	2401      	movs	r4, #1
10005b9e:	063f      	lsls	r7, r7, #24
10005ba0:	e016      	b.n	10005bd0 <_Z8CheckEndv.part.0+0x158>
10005ba2:	687b      	ldr	r3, [r7, #4]
10005ba4:	0d1b      	lsrs	r3, r3, #20
	else if (!gpio_get(PB_LT))	// LEFT
10005ba6:	421c      	tst	r4, r3
10005ba8:	d016      	beq.n	10005bd8 <_Z8CheckEndv.part.0+0x160>
10005baa:	687b      	ldr	r3, [r7, #4]
10005bac:	0c9b      	lsrs	r3, r3, #18
	else if (!gpio_get(PB_DN))	// DROP=DOWN
10005bae:	421c      	tst	r4, r3
10005bb0:	d012      	beq.n	10005bd8 <_Z8CheckEndv.part.0+0x160>
10005bb2:	687b      	ldr	r3, [r7, #4]
10005bb4:	0c5b      	lsrs	r3, r3, #17
	else if (!gpio_get(PB_FR))	// PAUSE=FIRE
10005bb6:	421c      	tst	r4, r3
10005bb8:	d00e      	beq.n	10005bd8 <_Z8CheckEndv.part.0+0x160>
	char c = getchar_timeout_us(0);
10005bba:	2000      	movs	r0, #0
10005bbc:	f7fc fa10 	bl	10001fe0 <getchar_timeout_us>

		// wait for a key
		FlushChar();
		while (GetChar() == 0) {}
10005bc0:	3801      	subs	r0, #1
10005bc2:	b2c0      	uxtb	r0, r0
10005bc4:	28fd      	cmp	r0, #253	; 0xfd
10005bc6:	d90a      	bls.n	10005bde <_Z8CheckEndv.part.0+0x166>
10005bc8:	687b      	ldr	r3, [r7, #4]
10005bca:	0d5b      	lsrs	r3, r3, #21
	if (!gpio_get(PB_RT))		// RIGHT
10005bcc:	421c      	tst	r4, r3
10005bce:	d003      	beq.n	10005bd8 <_Z8CheckEndv.part.0+0x160>
10005bd0:	687b      	ldr	r3, [r7, #4]
10005bd2:	0c1b      	lsrs	r3, r3, #16
	else if (!gpio_get(PB_UP))	// ROTATE=UP
10005bd4:	421c      	tst	r4, r3
10005bd6:	d1e4      	bne.n	10005ba2 <_Z8CheckEndv.part.0+0x12a>
		sleep_ms(250);
10005bd8:	20fa      	movs	r0, #250	; 0xfa
10005bda:	f7fc ff7d 	bl	10002ad8 <sleep_ms>

		// restore board
		memcpy(Board, SaveBoard, MAPSIZE);
10005bde:	2287      	movs	r2, #135	; 0x87
10005be0:	0031      	movs	r1, r6
10005be2:	0028      	movs	r0, r5
10005be4:	0092      	lsls	r2, r2, #2
10005be6:	f7fa fed7 	bl	10000998 <__wrap___aeabi_memcpy>
		return False;
	}

	// game is OK
	return True;
}
10005bea:	2000      	movs	r0, #0
10005bec:	bcc0      	pop	{r6, r7}
10005bee:	46b9      	mov	r9, r7
10005bf0:	46b0      	mov	r8, r6
10005bf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		sleep_ms(250);
10005bf4:	20fa      	movs	r0, #250	; 0xfa
10005bf6:	f7fc ff6f 	bl	10002ad8 <sleep_ms>
		return (rVal);
10005bfa:	e7af      	b.n	10005b5c <_Z8CheckEndv.part.0+0xe4>
			if (Lines > LinesBest) LinesBest = Lines;
10005bfc:	602b      	str	r3, [r5, #0]
10005bfe:	e75a      	b.n	10005ab6 <_Z8CheckEndv.part.0+0x3e>
10005c00:	20012767 	.word	0x20012767
10005c04:	2001276b 	.word	0x2001276b
10005c08:	2001276c 	.word	0x2001276c
10005c0c:	20007108 	.word	0x20007108
10005c10:	2000710c 	.word	0x2000710c
10005c14:	200061f4 	.word	0x200061f4
10005c18:	200061f8 	.word	0x200061f8
10005c1c:	00003938 	.word	0x00003938
10005c20:	10019658 	.word	0x10019658
10005c24:	2000327c 	.word	0x2000327c
10005c28:	20006c2c 	.word	0x20006c2c
10005c2c:	1000e690 	.word	0x1000e690

10005c30 <_Z10DelAllRowsv.part.0>:
void DelAllRows()
10005c30:	b570      	push	{r4, r5, r6, lr}
	if ((NextLevel <= 0) && (Level < LEVELNUM) && !Demo)
10005c32:	4c3d      	ldr	r4, [pc, #244]	; (10005d28 <_Z10DelAllRowsv.part.0+0xf8>)
10005c34:	7823      	ldrb	r3, [r4, #0]
10005c36:	2b09      	cmp	r3, #9
10005c38:	d803      	bhi.n	10005c42 <_Z10DelAllRowsv.part.0+0x12>
10005c3a:	4a3c      	ldr	r2, [pc, #240]	; (10005d2c <_Z10DelAllRowsv.part.0+0xfc>)
10005c3c:	7812      	ldrb	r2, [r2, #0]
10005c3e:	2a00      	cmp	r2, #0
10005c40:	d000      	beq.n	10005c44 <_Z10DelAllRowsv.part.0+0x14>
}
10005c42:	bd70      	pop	{r4, r5, r6, pc}
		Level++;
10005c44:	3301      	adds	r3, #1
10005c46:	7023      	strb	r3, [r4, #0]
	DispTileNum(TILE_SCOREV1, Score, COL_WHITE);
10005c48:	4b39      	ldr	r3, [pc, #228]	; (10005d30 <_Z10DelAllRowsv.part.0+0x100>)
10005c4a:	202e      	movs	r0, #46	; 0x2e
10005c4c:	6819      	ldr	r1, [r3, #0]
10005c4e:	32ff      	adds	r2, #255	; 0xff
10005c50:	f7ff fe96 	bl	10005980 <_Z11DispTileNumhih>
	DispTileNum(TILE_SCOREV3, ScoreBest, COL_YELLOW);
10005c54:	4b37      	ldr	r3, [pc, #220]	; (10005d34 <_Z10DelAllRowsv.part.0+0x104>)
10005c56:	22fc      	movs	r2, #252	; 0xfc
10005c58:	6819      	ldr	r1, [r3, #0]
10005c5a:	2042      	movs	r0, #66	; 0x42
10005c5c:	f7ff fe90 	bl	10005980 <_Z11DispTileNumhih>
	DispTileNum(TILE_LINESV1, Lines, COL_WHITE);
10005c60:	4b35      	ldr	r3, [pc, #212]	; (10005d38 <_Z10DelAllRowsv.part.0+0x108>)
10005c62:	22ff      	movs	r2, #255	; 0xff
10005c64:	6819      	ldr	r1, [r3, #0]
10005c66:	2030      	movs	r0, #48	; 0x30
10005c68:	f7ff fe8a 	bl	10005980 <_Z11DispTileNumhih>
	DispTileNum(TILE_LINESV3, LinesBest, COL_YELLOW);
10005c6c:	4b33      	ldr	r3, [pc, #204]	; (10005d3c <_Z10DelAllRowsv.part.0+0x10c>)
10005c6e:	22fc      	movs	r2, #252	; 0xfc
10005c70:	6819      	ldr	r1, [r3, #0]
10005c72:	2044      	movs	r0, #68	; 0x44
10005c74:	f7ff fe84 	bl	10005980 <_Z11DispTileNumhih>
	DispTileNum(TILE_SPEEDV1, Level, COL_WHITE);
10005c78:	7821      	ldrb	r1, [r4, #0]
10005c7a:	22ff      	movs	r2, #255	; 0xff
10005c7c:	2032      	movs	r0, #50	; 0x32
10005c7e:	f7ff fe7f 	bl	10005980 <_Z11DispTileNumhih>
	DispTileNum(TILE_SPEEDV3, LevelBest, COL_YELLOW);
10005c82:	4b2f      	ldr	r3, [pc, #188]	; (10005d40 <_Z10DelAllRowsv.part.0+0x110>)
10005c84:	22fc      	movs	r2, #252	; 0xfc
10005c86:	7819      	ldrb	r1, [r3, #0]
10005c88:	2046      	movs	r0, #70	; 0x46
10005c8a:	f7ff fe79 	bl	10005980 <_Z11DispTileNumhih>
		NextLevel = NextLevelTab[Level-1];
10005c8e:	7823      	ldrb	r3, [r4, #0]
10005c90:	4a2c      	ldr	r2, [pc, #176]	; (10005d44 <_Z10DelAllRowsv.part.0+0x114>)
10005c92:	3b01      	subs	r3, #1
10005c94:	009b      	lsls	r3, r3, #2
10005c96:	589a      	ldr	r2, [r3, r2]
10005c98:	4b2b      	ldr	r3, [pc, #172]	; (10005d48 <_Z10DelAllRowsv.part.0+0x118>)
		PlaySound(LevelUpSnd, sizeof(LevelUpSnd));
10005c9a:	492c      	ldr	r1, [pc, #176]	; (10005d4c <_Z10DelAllRowsv.part.0+0x11c>)
		NextLevel = NextLevelTab[Level-1];
10005c9c:	601a      	str	r2, [r3, #0]
		PlaySound(LevelUpSnd, sizeof(LevelUpSnd));
10005c9e:	23fe      	movs	r3, #254	; 0xfe
10005ca0:	2200      	movs	r2, #0
10005ca2:	059b      	lsls	r3, r3, #22
10005ca4:	482a      	ldr	r0, [pc, #168]	; (10005d50 <_Z10DelAllRowsv.part.0+0x120>)
10005ca6:	f007 fe15 	bl	1000d8d4 <_Z9PlaySoundPKhihf>
		memcpy(SaveBoard, Board, MAPSIZE);
10005caa:	2287      	movs	r2, #135	; 0x87
10005cac:	4c29      	ldr	r4, [pc, #164]	; (10005d54 <_Z10DelAllRowsv.part.0+0x124>)
10005cae:	4d2a      	ldr	r5, [pc, #168]	; (10005d58 <_Z10DelAllRowsv.part.0+0x128>)
10005cb0:	0021      	movs	r1, r4
10005cb2:	0028      	movs	r0, r5
10005cb4:	0092      	lsls	r2, r2, #2
10005cb6:	f7fa fe6f 	bl	10000998 <__wrap___aeabi_memcpy>
		memcpy(&Board[MAPW/2-4 + MAPH/2*MAPW], LevelMsg, 8);
10005cba:	0020      	movs	r0, r4
10005cbc:	3018      	adds	r0, #24
10005cbe:	2208      	movs	r2, #8
10005cc0:	4926      	ldr	r1, [pc, #152]	; (10005d5c <_Z10DelAllRowsv.part.0+0x12c>)
10005cc2:	30ff      	adds	r0, #255	; 0xff
10005cc4:	f7fa fe68 	bl	10000998 <__wrap___aeabi_memcpy>
		sleep_ms(1000);
10005cc8:	20fa      	movs	r0, #250	; 0xfa
10005cca:	0080      	lsls	r0, r0, #2
10005ccc:	f7fc ff04 	bl	10002ad8 <sleep_ms>
		memcpy(Board, SaveBoard, MAPSIZE);
10005cd0:	2287      	movs	r2, #135	; 0x87
10005cd2:	0029      	movs	r1, r5
10005cd4:	0020      	movs	r0, r4
10005cd6:	25d0      	movs	r5, #208	; 0xd0
10005cd8:	0092      	lsls	r2, r2, #2
10005cda:	f7fa fe5d 	bl	10000998 <__wrap___aeabi_memcpy>
10005cde:	2401      	movs	r4, #1
10005ce0:	062d      	lsls	r5, r5, #24
10005ce2:	686b      	ldr	r3, [r5, #4]
10005ce4:	0d5b      	lsrs	r3, r3, #21
	if (!gpio_get(PB_RT))		// RIGHT
10005ce6:	421c      	tst	r4, r3
10005ce8:	d01a      	beq.n	10005d20 <_Z10DelAllRowsv.part.0+0xf0>
10005cea:	686b      	ldr	r3, [r5, #4]
10005cec:	0c1b      	lsrs	r3, r3, #16
	else if (!gpio_get(PB_UP))	// ROTATE=UP
10005cee:	421c      	tst	r4, r3
10005cf0:	d016      	beq.n	10005d20 <_Z10DelAllRowsv.part.0+0xf0>
10005cf2:	686b      	ldr	r3, [r5, #4]
10005cf4:	0d1b      	lsrs	r3, r3, #20
	else if (!gpio_get(PB_LT))	// LEFT
10005cf6:	421c      	tst	r4, r3
10005cf8:	d012      	beq.n	10005d20 <_Z10DelAllRowsv.part.0+0xf0>
10005cfa:	686b      	ldr	r3, [r5, #4]
10005cfc:	0c9b      	lsrs	r3, r3, #18
	else if (!gpio_get(PB_DN))	// DROP=DOWN
10005cfe:	421c      	tst	r4, r3
10005d00:	d00e      	beq.n	10005d20 <_Z10DelAllRowsv.part.0+0xf0>
10005d02:	686b      	ldr	r3, [r5, #4]
10005d04:	0c5b      	lsrs	r3, r3, #17
	else if (!gpio_get(PB_FR))	// PAUSE=FIRE
10005d06:	421c      	tst	r4, r3
10005d08:	d00a      	beq.n	10005d20 <_Z10DelAllRowsv.part.0+0xf0>
	char c = getchar_timeout_us(0);
10005d0a:	2000      	movs	r0, #0
10005d0c:	f7fc f968 	bl	10001fe0 <getchar_timeout_us>
	while (GetChar() != 0) {}
10005d10:	3801      	subs	r0, #1
10005d12:	b2c0      	uxtb	r0, r0
10005d14:	28fd      	cmp	r0, #253	; 0xfd
10005d16:	d9e4      	bls.n	10005ce2 <_Z10DelAllRowsv.part.0+0xb2>
		sleep_ms(200);
10005d18:	20c8      	movs	r0, #200	; 0xc8
10005d1a:	f7fc fedd 	bl	10002ad8 <sleep_ms>
}
10005d1e:	e790      	b.n	10005c42 <_Z10DelAllRowsv.part.0+0x12>
		sleep_ms(250);
10005d20:	20fa      	movs	r0, #250	; 0xfa
10005d22:	f7fc fed9 	bl	10002ad8 <sleep_ms>
		return (rVal);
10005d26:	e7dc      	b.n	10005ce2 <_Z10DelAllRowsv.part.0+0xb2>
10005d28:	2001276b 	.word	0x2001276b
10005d2c:	20012767 	.word	0x20012767
10005d30:	20007108 	.word	0x20007108
10005d34:	2000710c 	.word	0x2000710c
10005d38:	200061f4 	.word	0x200061f4
10005d3c:	200061f8 	.word	0x200061f8
10005d40:	2001276c 	.word	0x2001276c
10005d44:	1000e990 	.word	0x1000e990
10005d48:	200061fc 	.word	0x200061fc
10005d4c:	0000abc3 	.word	0x0000abc3
10005d50:	1001cf90 	.word	0x1001cf90
10005d54:	2000327c 	.word	0x2000327c
10005d58:	20006c2c 	.word	0x20006c2c
10005d5c:	1000e69c 	.word	0x1000e69c

10005d60 <_Z10ScoreBrickaah>:
{
10005d60:	b5f0      	push	{r4, r5, r6, r7, lr}
	const u8* s = &BrickTemp[brick*BRICKTEMPSIZE];
10005d62:	0116      	lsls	r6, r2, #4
10005d64:	4a77      	ldr	r2, [pc, #476]	; (10005f44 <_Z10ScoreBrickaah+0x1e4>)
{
10005d66:	46ce      	mov	lr, r9
	const u8* s = &BrickTemp[brick*BRICKTEMPSIZE];
10005d68:	18b6      	adds	r6, r6, r2
	u8* d = &Board[x + y*MAPW];
10005d6a:	004a      	lsls	r2, r1, #1
10005d6c:	1852      	adds	r2, r2, r1
{
10005d6e:	4647      	mov	r7, r8
	u8* d = &Board[x + y*MAPW];
10005d70:	00d3      	lsls	r3, r2, #3
10005d72:	18d2      	adds	r2, r2, r3
10005d74:	1812      	adds	r2, r2, r0
10005d76:	4b74      	ldr	r3, [pc, #464]	; (10005f48 <_Z10ScoreBrickaah+0x1e8>)
10005d78:	3a01      	subs	r2, #1
10005d7a:	18d3      	adds	r3, r2, r3
	int score = 0;
10005d7c:	2000      	movs	r0, #0
	u8* d = &Board[x + y*MAPW];
10005d7e:	2204      	movs	r2, #4
{
10005d80:	b580      	push	{r7, lr}
			b = *s;
10005d82:	7835      	ldrb	r5, [r6, #0]
			if (b != 0)
10005d84:	2d00      	cmp	r5, #0
10005d86:	d055      	beq.n	10005e34 <_Z10ScoreBrickaah+0xd4>
				score += (int)y*y;
10005d88:	000c      	movs	r4, r1
10005d8a:	434c      	muls	r4, r1
10005d8c:	1900      	adds	r0, r0, r4
				if (y > 2)
10005d8e:	2902      	cmp	r1, #2
10005d90:	dc00      	bgt.n	10005d94 <_Z10ScoreBrickaah+0x34>
10005d92:	e08d      	b.n	10005eb0 <_Z10ScoreBrickaah+0x150>
					if ((y < MAPH-2) &&
10005d94:	2911      	cmp	r1, #17
10005d96:	dc03      	bgt.n	10005da0 <_Z10ScoreBrickaah+0x40>
10005d98:	7f1f      	ldrb	r7, [r3, #28]
10005d9a:	2f08      	cmp	r7, #8
10005d9c:	d100      	bne.n	10005da0 <_Z10ScoreBrickaah+0x40>
10005d9e:	e0b1      	b.n	10005f04 <_Z10ScoreBrickaah+0x1a4>
					if ((d[-1] == TILE_EMPTY) &&
10005da0:	781f      	ldrb	r7, [r3, #0]
10005da2:	2f08      	cmp	r7, #8
10005da4:	d100      	bne.n	10005da8 <_Z10ScoreBrickaah+0x48>
10005da6:	e0ab      	b.n	10005f00 <_Z10ScoreBrickaah+0x1a0>
					if ((d[1] == TILE_EMPTY) &&
10005da8:	789f      	ldrb	r7, [r3, #2]
10005daa:	46bc      	mov	ip, r7
10005dac:	2f08      	cmp	r7, #8
10005dae:	d057      	beq.n	10005e60 <_Z10ScoreBrickaah+0x100>
			b = *s;
10005db0:	7877      	ldrb	r7, [r6, #1]
10005db2:	46b9      	mov	r9, r7
			if (b != 0)
10005db4:	2f00      	cmp	r7, #0
10005db6:	d058      	beq.n	10005e6a <_Z10ScoreBrickaah+0x10a>
				score += (int)y*y;
10005db8:	1900      	adds	r0, r0, r4
					if ((y < MAPH-2) &&
10005dba:	2911      	cmp	r1, #17
10005dbc:	dc03      	bgt.n	10005dc6 <_Z10ScoreBrickaah+0x66>
10005dbe:	7f5f      	ldrb	r7, [r3, #29]
10005dc0:	2f08      	cmp	r7, #8
10005dc2:	d100      	bne.n	10005dc6 <_Z10ScoreBrickaah+0x66>
10005dc4:	e0a6      	b.n	10005f14 <_Z10ScoreBrickaah+0x1b4>
					if ((d[-1] == TILE_EMPTY) &&
10005dc6:	785f      	ldrb	r7, [r3, #1]
10005dc8:	2f08      	cmp	r7, #8
10005dca:	d100      	bne.n	10005dce <_Z10ScoreBrickaah+0x6e>
10005dcc:	e088      	b.n	10005ee0 <_Z10ScoreBrickaah+0x180>
					if ((d[1] == TILE_EMPTY) &&
10005dce:	78dd      	ldrb	r5, [r3, #3]
10005dd0:	2d08      	cmp	r5, #8
10005dd2:	d100      	bne.n	10005dd6 <_Z10ScoreBrickaah+0x76>
10005dd4:	e07e      	b.n	10005ed4 <_Z10ScoreBrickaah+0x174>
			b = *s;
10005dd6:	78b5      	ldrb	r5, [r6, #2]
			if (b != 0)
10005dd8:	2d00      	cmp	r5, #0
10005dda:	d037      	beq.n	10005e4c <_Z10ScoreBrickaah+0xec>
					if ((d[1] == TILE_EMPTY) &&
10005ddc:	789f      	ldrb	r7, [r3, #2]
				score += (int)y*y;
10005dde:	1900      	adds	r0, r0, r4
					if ((d[1] == TILE_EMPTY) &&
10005de0:	46bc      	mov	ip, r7
					if ((y < MAPH-2) &&
10005de2:	2911      	cmp	r1, #17
10005de4:	dc03      	bgt.n	10005dee <_Z10ScoreBrickaah+0x8e>
10005de6:	7f9f      	ldrb	r7, [r3, #30]
10005de8:	2f08      	cmp	r7, #8
10005dea:	d100      	bne.n	10005dee <_Z10ScoreBrickaah+0x8e>
10005dec:	e09a      	b.n	10005f24 <_Z10ScoreBrickaah+0x1c4>
					if ((d[-1] == TILE_EMPTY) &&
10005dee:	4667      	mov	r7, ip
10005df0:	2f08      	cmp	r7, #8
10005df2:	d100      	bne.n	10005df6 <_Z10ScoreBrickaah+0x96>
10005df4:	e079      	b.n	10005eea <_Z10ScoreBrickaah+0x18a>
					if ((d[1] == TILE_EMPTY) &&
10005df6:	791f      	ldrb	r7, [r3, #4]
10005df8:	2f08      	cmp	r7, #8
10005dfa:	d05e      	beq.n	10005eba <_Z10ScoreBrickaah+0x15a>
			if (b != 0)
10005dfc:	78f7      	ldrb	r7, [r6, #3]
10005dfe:	2f00      	cmp	r7, #0
10005e00:	d00d      	beq.n	10005e1e <_Z10ScoreBrickaah+0xbe>
				score += (int)y*y;
10005e02:	1900      	adds	r0, r0, r4
					if ((y < MAPH-2) &&
10005e04:	2911      	cmp	r1, #17
10005e06:	dc03      	bgt.n	10005e10 <_Z10ScoreBrickaah+0xb0>
10005e08:	7fdc      	ldrb	r4, [r3, #31]
10005e0a:	2c08      	cmp	r4, #8
10005e0c:	d100      	bne.n	10005e10 <_Z10ScoreBrickaah+0xb0>
10005e0e:	e091      	b.n	10005f34 <_Z10ScoreBrickaah+0x1d4>
					if ((d[-1] == TILE_EMPTY) &&
10005e10:	78dc      	ldrb	r4, [r3, #3]
10005e12:	2c08      	cmp	r4, #8
10005e14:	d100      	bne.n	10005e18 <_Z10ScoreBrickaah+0xb8>
10005e16:	e06e      	b.n	10005ef6 <_Z10ScoreBrickaah+0x196>
					if ((d[1] == TILE_EMPTY) &&
10005e18:	795c      	ldrb	r4, [r3, #5]
10005e1a:	2c08      	cmp	r4, #8
10005e1c:	d050      	beq.n	10005ec0 <_Z10ScoreBrickaah+0x160>
			s++;
10005e1e:	3101      	adds	r1, #1
	for (i = 4; i > 0; i--)
10005e20:	3a01      	subs	r2, #1
10005e22:	3604      	adds	r6, #4
		y++;
10005e24:	b249      	sxtb	r1, r1
	for (i = 4; i > 0; i--)
10005e26:	331b      	adds	r3, #27
10005e28:	2a00      	cmp	r2, #0
10005e2a:	d1aa      	bne.n	10005d82 <_Z10ScoreBrickaah+0x22>
}
10005e2c:	bcc0      	pop	{r6, r7}
10005e2e:	46b9      	mov	r9, r7
10005e30:	46b0      	mov	r8, r6
10005e32:	bdf0      	pop	{r4, r5, r6, r7, pc}
			b = *s;
10005e34:	7874      	ldrb	r4, [r6, #1]
10005e36:	46a1      	mov	r9, r4
			if (b != 0)
10005e38:	2c00      	cmp	r4, #0
10005e3a:	d02e      	beq.n	10005e9a <_Z10ScoreBrickaah+0x13a>
				score += (int)y*y;
10005e3c:	000c      	movs	r4, r1
10005e3e:	434c      	muls	r4, r1
10005e40:	1900      	adds	r0, r0, r4
				if (y > 2)
10005e42:	2902      	cmp	r1, #2
10005e44:	dcb9      	bgt.n	10005dba <_Z10ScoreBrickaah+0x5a>
			if (b != 0)
10005e46:	78b5      	ldrb	r5, [r6, #2]
10005e48:	2d00      	cmp	r5, #0
10005e4a:	d118      	bne.n	10005e7e <_Z10ScoreBrickaah+0x11e>
10005e4c:	78f4      	ldrb	r4, [r6, #3]
10005e4e:	2c00      	cmp	r4, #0
10005e50:	d0e5      	beq.n	10005e1e <_Z10ScoreBrickaah+0xbe>
				score += (int)y*y;
10005e52:	000c      	movs	r4, r1
10005e54:	434c      	muls	r4, r1
10005e56:	1900      	adds	r0, r0, r4
				if (y > 2)
10005e58:	2902      	cmp	r1, #2
10005e5a:	dde0      	ble.n	10005e1e <_Z10ScoreBrickaah+0xbe>
10005e5c:	2500      	movs	r5, #0
10005e5e:	e7d1      	b.n	10005e04 <_Z10ScoreBrickaah+0xa4>
						((j == 1) || (s[1] == 0)))
10005e60:	7877      	ldrb	r7, [r6, #1]
10005e62:	46b9      	mov	r9, r7
10005e64:	2f00      	cmp	r7, #0
10005e66:	d1a7      	bne.n	10005db8 <_Z10ScoreBrickaah+0x58>
						score -= 2;
10005e68:	3802      	subs	r0, #2
			b = *s;
10005e6a:	78b5      	ldrb	r5, [r6, #2]
			if (b != 0)
10005e6c:	2d00      	cmp	r5, #0
10005e6e:	d0c5      	beq.n	10005dfc <_Z10ScoreBrickaah+0x9c>
				score += (int)y*y;
10005e70:	2700      	movs	r7, #0
10005e72:	1900      	adds	r0, r0, r4
10005e74:	46b9      	mov	r9, r7
10005e76:	e7b4      	b.n	10005de2 <_Z10ScoreBrickaah+0x82>
			if (b != 0)
10005e78:	78b5      	ldrb	r5, [r6, #2]
10005e7a:	2d00      	cmp	r5, #0
10005e7c:	d000      	beq.n	10005e80 <_Z10ScoreBrickaah+0x120>
				score += (int)y*y;
10005e7e:	1900      	adds	r0, r0, r4
			if (b != 0)
10005e80:	78f5      	ldrb	r5, [r6, #3]
10005e82:	2d00      	cmp	r5, #0
10005e84:	d0cb      	beq.n	10005e1e <_Z10ScoreBrickaah+0xbe>
				score += (int)y*y;
10005e86:	3101      	adds	r1, #1
	for (i = 4; i > 0; i--)
10005e88:	3a01      	subs	r2, #1
				score += (int)y*y;
10005e8a:	1900      	adds	r0, r0, r4
			s++;
10005e8c:	3604      	adds	r6, #4
		y++;
10005e8e:	b249      	sxtb	r1, r1
	for (i = 4; i > 0; i--)
10005e90:	331b      	adds	r3, #27
10005e92:	2a00      	cmp	r2, #0
10005e94:	d000      	beq.n	10005e98 <_Z10ScoreBrickaah+0x138>
10005e96:	e774      	b.n	10005d82 <_Z10ScoreBrickaah+0x22>
10005e98:	e7c8      	b.n	10005e2c <_Z10ScoreBrickaah+0xcc>
			b = *s;
10005e9a:	78b5      	ldrb	r5, [r6, #2]
			if (b != 0)
10005e9c:	2d00      	cmp	r5, #0
10005e9e:	d0d5      	beq.n	10005e4c <_Z10ScoreBrickaah+0xec>
				score += (int)y*y;
10005ea0:	000c      	movs	r4, r1
10005ea2:	434c      	muls	r4, r1
10005ea4:	1900      	adds	r0, r0, r4
				if (y > 2)
10005ea6:	2902      	cmp	r1, #2
10005ea8:	ddea      	ble.n	10005e80 <_Z10ScoreBrickaah+0x120>
					if ((d[1] == TILE_EMPTY) &&
10005eaa:	789f      	ldrb	r7, [r3, #2]
10005eac:	46bc      	mov	ip, r7
10005eae:	e798      	b.n	10005de2 <_Z10ScoreBrickaah+0x82>
			if (b != 0)
10005eb0:	7875      	ldrb	r5, [r6, #1]
10005eb2:	2d00      	cmp	r5, #0
10005eb4:	d0e0      	beq.n	10005e78 <_Z10ScoreBrickaah+0x118>
				score += (int)y*y;
10005eb6:	1900      	adds	r0, r0, r4
				if (y > 2)
10005eb8:	e7c5      	b.n	10005e46 <_Z10ScoreBrickaah+0xe6>
						((j == 1) || (s[1] == 0)))
10005eba:	78f7      	ldrb	r7, [r6, #3]
10005ebc:	2f00      	cmp	r7, #0
10005ebe:	d1a0      	bne.n	10005e02 <_Z10ScoreBrickaah+0xa2>
						score -= 2;
10005ec0:	3101      	adds	r1, #1
	for (i = 4; i > 0; i--)
10005ec2:	3a01      	subs	r2, #1
						score -= 2;
10005ec4:	3802      	subs	r0, #2
			s++;
10005ec6:	3604      	adds	r6, #4
		y++;
10005ec8:	b249      	sxtb	r1, r1
	for (i = 4; i > 0; i--)
10005eca:	331b      	adds	r3, #27
10005ecc:	2a00      	cmp	r2, #0
10005ece:	d000      	beq.n	10005ed2 <_Z10ScoreBrickaah+0x172>
10005ed0:	e757      	b.n	10005d82 <_Z10ScoreBrickaah+0x22>
10005ed2:	e7ab      	b.n	10005e2c <_Z10ScoreBrickaah+0xcc>
						((j == 1) || (s[1] == 0)))
10005ed4:	78b5      	ldrb	r5, [r6, #2]
10005ed6:	2d00      	cmp	r5, #0
10005ed8:	d000      	beq.n	10005edc <_Z10ScoreBrickaah+0x17c>
10005eda:	e77f      	b.n	10005ddc <_Z10ScoreBrickaah+0x7c>
						score -= 2;
10005edc:	3802      	subs	r0, #2
			if (b != 0)
10005ede:	e7b5      	b.n	10005e4c <_Z10ScoreBrickaah+0xec>
						((j == 4) || (s[-1] == 0)))
10005ee0:	2d00      	cmp	r5, #0
10005ee2:	d000      	beq.n	10005ee6 <_Z10ScoreBrickaah+0x186>
10005ee4:	e773      	b.n	10005dce <_Z10ScoreBrickaah+0x6e>
						score -= 2;
10005ee6:	3802      	subs	r0, #2
10005ee8:	e771      	b.n	10005dce <_Z10ScoreBrickaah+0x6e>
						((j == 4) || (s[-1] == 0)))
10005eea:	464f      	mov	r7, r9
10005eec:	2f00      	cmp	r7, #0
10005eee:	d000      	beq.n	10005ef2 <_Z10ScoreBrickaah+0x192>
10005ef0:	e781      	b.n	10005df6 <_Z10ScoreBrickaah+0x96>
						score -= 2;
10005ef2:	3802      	subs	r0, #2
10005ef4:	e77f      	b.n	10005df6 <_Z10ScoreBrickaah+0x96>
						((j == 4) || (s[-1] == 0)))
10005ef6:	2d00      	cmp	r5, #0
10005ef8:	d000      	beq.n	10005efc <_Z10ScoreBrickaah+0x19c>
10005efa:	e78d      	b.n	10005e18 <_Z10ScoreBrickaah+0xb8>
						score -= 2;
10005efc:	3802      	subs	r0, #2
10005efe:	e78b      	b.n	10005e18 <_Z10ScoreBrickaah+0xb8>
10005f00:	3802      	subs	r0, #2
10005f02:	e751      	b.n	10005da8 <_Z10ScoreBrickaah+0x48>
						(d[MAPW] == TILE_EMPTY) &&
10005f04:	2a01      	cmp	r2, #1
10005f06:	d003      	beq.n	10005f10 <_Z10ScoreBrickaah+0x1b0>
						((i == 1) || (s[4] == 0)))
10005f08:	7937      	ldrb	r7, [r6, #4]
10005f0a:	2f00      	cmp	r7, #0
10005f0c:	d000      	beq.n	10005f10 <_Z10ScoreBrickaah+0x1b0>
10005f0e:	e747      	b.n	10005da0 <_Z10ScoreBrickaah+0x40>
						score -= 10;
10005f10:	380a      	subs	r0, #10
10005f12:	e745      	b.n	10005da0 <_Z10ScoreBrickaah+0x40>
						(d[MAPW] == TILE_EMPTY) &&
10005f14:	2a01      	cmp	r2, #1
10005f16:	d003      	beq.n	10005f20 <_Z10ScoreBrickaah+0x1c0>
						((i == 1) || (s[4] == 0)))
10005f18:	7977      	ldrb	r7, [r6, #5]
10005f1a:	2f00      	cmp	r7, #0
10005f1c:	d000      	beq.n	10005f20 <_Z10ScoreBrickaah+0x1c0>
10005f1e:	e752      	b.n	10005dc6 <_Z10ScoreBrickaah+0x66>
						score -= 10;
10005f20:	380a      	subs	r0, #10
10005f22:	e750      	b.n	10005dc6 <_Z10ScoreBrickaah+0x66>
						(d[MAPW] == TILE_EMPTY) &&
10005f24:	2a01      	cmp	r2, #1
10005f26:	d003      	beq.n	10005f30 <_Z10ScoreBrickaah+0x1d0>
						((i == 1) || (s[4] == 0)))
10005f28:	79b7      	ldrb	r7, [r6, #6]
10005f2a:	2f00      	cmp	r7, #0
10005f2c:	d000      	beq.n	10005f30 <_Z10ScoreBrickaah+0x1d0>
10005f2e:	e75e      	b.n	10005dee <_Z10ScoreBrickaah+0x8e>
						score -= 10;
10005f30:	380a      	subs	r0, #10
10005f32:	e75c      	b.n	10005dee <_Z10ScoreBrickaah+0x8e>
						(d[MAPW] == TILE_EMPTY) &&
10005f34:	2a01      	cmp	r2, #1
10005f36:	d003      	beq.n	10005f40 <_Z10ScoreBrickaah+0x1e0>
						((i == 1) || (s[4] == 0)))
10005f38:	79f4      	ldrb	r4, [r6, #7]
10005f3a:	2c00      	cmp	r4, #0
10005f3c:	d000      	beq.n	10005f40 <_Z10ScoreBrickaah+0x1e0>
10005f3e:	e767      	b.n	10005e10 <_Z10ScoreBrickaah+0xb0>
						score -= 10;
10005f40:	380a      	subs	r0, #10
10005f42:	e765      	b.n	10005e10 <_Z10ScoreBrickaah+0xb0>
10005f44:	1000e9f4 	.word	0x1000e9f4
10005f48:	2000327c 	.word	0x2000327c

10005f4c <_Z6DelRowh>:
{
10005f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
10005f4e:	46d6      	mov	lr, sl
10005f50:	464f      	mov	r7, r9
10005f52:	4646      	mov	r6, r8
	PlaySound(LineSnd, sizeof(LineSnd));
10005f54:	23fe      	movs	r3, #254	; 0xfe
{
10005f56:	b5c0      	push	{r6, r7, lr}
10005f58:	0007      	movs	r7, r0
	PlaySound(LineSnd, sizeof(LineSnd));
10005f5a:	2200      	movs	r2, #0
10005f5c:	4942      	ldr	r1, [pc, #264]	; (10006068 <_Z6DelRowh+0x11c>)
10005f5e:	4843      	ldr	r0, [pc, #268]	; (1000606c <_Z6DelRowh+0x120>)
10005f60:	059b      	lsls	r3, r3, #22
10005f62:	f007 fcb7 	bl	1000d8d4 <_Z9PlaySoundPKhihf>
	Lines++;
10005f66:	4c42      	ldr	r4, [pc, #264]	; (10006070 <_Z6DelRowh+0x124>)
	DispTileNum(TILE_SCOREV1, Score, COL_WHITE);
10005f68:	22ff      	movs	r2, #255	; 0xff
	Lines++;
10005f6a:	6823      	ldr	r3, [r4, #0]
	DispTileNum(TILE_SCOREV1, Score, COL_WHITE);
10005f6c:	202e      	movs	r0, #46	; 0x2e
	Lines++;
10005f6e:	3301      	adds	r3, #1
10005f70:	6023      	str	r3, [r4, #0]
	DispTileNum(TILE_SCOREV1, Score, COL_WHITE);
10005f72:	4b40      	ldr	r3, [pc, #256]	; (10006074 <_Z6DelRowh+0x128>)
		s = &Board[y*MAPW + 8];
10005f74:	260a      	movs	r6, #10
	DispTileNum(TILE_SCOREV1, Score, COL_WHITE);
10005f76:	6819      	ldr	r1, [r3, #0]
10005f78:	f7ff fd02 	bl	10005980 <_Z11DispTileNumhih>
	DispTileNum(TILE_SCOREV3, ScoreBest, COL_YELLOW);
10005f7c:	4b3e      	ldr	r3, [pc, #248]	; (10006078 <_Z6DelRowh+0x12c>)
10005f7e:	22fc      	movs	r2, #252	; 0xfc
10005f80:	6819      	ldr	r1, [r3, #0]
10005f82:	2042      	movs	r0, #66	; 0x42
10005f84:	f7ff fcfc 	bl	10005980 <_Z11DispTileNumhih>
	DispTileNum(TILE_LINESV1, Lines, COL_WHITE);
10005f88:	6821      	ldr	r1, [r4, #0]
10005f8a:	22ff      	movs	r2, #255	; 0xff
10005f8c:	2030      	movs	r0, #48	; 0x30
10005f8e:	f7ff fcf7 	bl	10005980 <_Z11DispTileNumhih>
	DispTileNum(TILE_LINESV3, LinesBest, COL_YELLOW);
10005f92:	4b3a      	ldr	r3, [pc, #232]	; (1000607c <_Z6DelRowh+0x130>)
10005f94:	22fc      	movs	r2, #252	; 0xfc
10005f96:	6819      	ldr	r1, [r3, #0]
10005f98:	2044      	movs	r0, #68	; 0x44
10005f9a:	f7ff fcf1 	bl	10005980 <_Z11DispTileNumhih>
	DispTileNum(TILE_SPEEDV1, Level, COL_WHITE);
10005f9e:	4b38      	ldr	r3, [pc, #224]	; (10006080 <_Z6DelRowh+0x134>)
10005fa0:	22ff      	movs	r2, #255	; 0xff
10005fa2:	7819      	ldrb	r1, [r3, #0]
10005fa4:	2032      	movs	r0, #50	; 0x32
10005fa6:	f7ff fceb 	bl	10005980 <_Z11DispTileNumhih>
	DispTileNum(TILE_SPEEDV3, LevelBest, COL_YELLOW);
10005faa:	4b36      	ldr	r3, [pc, #216]	; (10006084 <_Z6DelRowh+0x138>)
10005fac:	22fc      	movs	r2, #252	; 0xfc
10005fae:	7819      	ldrb	r1, [r3, #0]
10005fb0:	2046      	movs	r0, #70	; 0x46
10005fb2:	f7ff fce5 	bl	10005980 <_Z11DispTileNumhih>
		s = &Board[y*MAPW + 8];
10005fb6:	007b      	lsls	r3, r7, #1
10005fb8:	4699      	mov	r9, r3
10005fba:	19db      	adds	r3, r3, r7
10005fbc:	00da      	lsls	r2, r3, #3
10005fbe:	189b      	adds	r3, r3, r2
10005fc0:	2208      	movs	r2, #8
10005fc2:	4690      	mov	r8, r2
10005fc4:	4498      	add	r8, r3
10005fc6:	4643      	mov	r3, r8
10005fc8:	4d2f      	ldr	r5, [pc, #188]	; (10006088 <_Z6DelRowh+0x13c>)
10005fca:	18ec      	adds	r4, r5, r3
		s[0] = TILE_EMPTY;
10005fcc:	2308      	movs	r3, #8
10005fce:	469a      	mov	sl, r3
			s[0] = s[1];
10005fd0:	4642      	mov	r2, r8
10005fd2:	7863      	ldrb	r3, [r4, #1]
	for (i = 10; i > 0; i--)
10005fd4:	3e01      	subs	r6, #1
			s[0] = s[1];
10005fd6:	54ab      	strb	r3, [r5, r2]
10005fd8:	78a3      	ldrb	r3, [r4, #2]
		sleep_ms(50);
10005fda:	2032      	movs	r0, #50	; 0x32
			s[0] = s[1];
10005fdc:	7063      	strb	r3, [r4, #1]
10005fde:	78e3      	ldrb	r3, [r4, #3]
	for (i = 10; i > 0; i--)
10005fe0:	b2f6      	uxtb	r6, r6
			s[0] = s[1];
10005fe2:	70a3      	strb	r3, [r4, #2]
10005fe4:	7923      	ldrb	r3, [r4, #4]
10005fe6:	70e3      	strb	r3, [r4, #3]
10005fe8:	7963      	ldrb	r3, [r4, #5]
10005fea:	7123      	strb	r3, [r4, #4]
10005fec:	79a3      	ldrb	r3, [r4, #6]
10005fee:	7163      	strb	r3, [r4, #5]
10005ff0:	79e3      	ldrb	r3, [r4, #7]
10005ff2:	71a3      	strb	r3, [r4, #6]
10005ff4:	7a23      	ldrb	r3, [r4, #8]
10005ff6:	71e3      	strb	r3, [r4, #7]
10005ff8:	7a63      	ldrb	r3, [r4, #9]
10005ffa:	7223      	strb	r3, [r4, #8]
		s[0] = TILE_EMPTY;
10005ffc:	4653      	mov	r3, sl
10005ffe:	7263      	strb	r3, [r4, #9]
		sleep_ms(50);
10006000:	f7fc fd6a 	bl	10002ad8 <sleep_ms>
	for (i = 10; i > 0; i--)
10006004:	2e00      	cmp	r6, #0
10006006:	d1e3      	bne.n	10005fd0 <_Z6DelRowh+0x84>
	for (; y > 1; y--)
10006008:	2f01      	cmp	r7, #1
1000600a:	d923      	bls.n	10006054 <_Z6DelRowh+0x108>
1000600c:	464b      	mov	r3, r9
1000600e:	19da      	adds	r2, r3, r7
10006010:	00d3      	lsls	r3, r2, #3
10006012:	18d3      	adds	r3, r2, r3
10006014:	001a      	movs	r2, r3
10006016:	3b13      	subs	r3, #19
10006018:	3208      	adds	r2, #8
1000601a:	18aa      	adds	r2, r5, r2
1000601c:	18eb      	adds	r3, r5, r3
			*s = s[-MAPW];
1000601e:	7819      	ldrb	r1, [r3, #0]
	for (; y > 1; y--)
10006020:	3f01      	subs	r7, #1
			*s = s[-MAPW];
10006022:	7011      	strb	r1, [r2, #0]
10006024:	7859      	ldrb	r1, [r3, #1]
	for (; y > 1; y--)
10006026:	b2ff      	uxtb	r7, r7
			*s = s[-MAPW];
10006028:	7051      	strb	r1, [r2, #1]
1000602a:	7899      	ldrb	r1, [r3, #2]
1000602c:	7091      	strb	r1, [r2, #2]
1000602e:	78d9      	ldrb	r1, [r3, #3]
10006030:	70d1      	strb	r1, [r2, #3]
10006032:	7919      	ldrb	r1, [r3, #4]
10006034:	7111      	strb	r1, [r2, #4]
10006036:	7959      	ldrb	r1, [r3, #5]
10006038:	7151      	strb	r1, [r2, #5]
1000603a:	7999      	ldrb	r1, [r3, #6]
1000603c:	7191      	strb	r1, [r2, #6]
1000603e:	79d9      	ldrb	r1, [r3, #7]
10006040:	71d1      	strb	r1, [r2, #7]
10006042:	7a19      	ldrb	r1, [r3, #8]
10006044:	7211      	strb	r1, [r2, #8]
10006046:	7a59      	ldrb	r1, [r3, #9]
	for (; y > 1; y--)
10006048:	3b1b      	subs	r3, #27
			*s = s[-MAPW];
1000604a:	7251      	strb	r1, [r2, #9]
	for (; y > 1; y--)
1000604c:	3a1b      	subs	r2, #27
1000604e:	2f01      	cmp	r7, #1
10006050:	d1e5      	bne.n	1000601e <_Z6DelRowh+0xd2>
10006052:	4c0e      	ldr	r4, [pc, #56]	; (1000608c <_Z6DelRowh+0x140>)
		*s = TILE_EMPTY;
10006054:	220a      	movs	r2, #10
10006056:	2108      	movs	r1, #8
10006058:	0020      	movs	r0, r4
1000605a:	f7fa fc97 	bl	1000098c <__wrap_memset>
}
1000605e:	bce0      	pop	{r5, r6, r7}
10006060:	46ba      	mov	sl, r7
10006062:	46b1      	mov	r9, r6
10006064:	46a8      	mov	r8, r5
10006066:	bdf0      	pop	{r4, r5, r6, r7, pc}
10006068:	00001ca2 	.word	0x00001ca2
1000606c:	10027b54 	.word	0x10027b54
10006070:	200061f4 	.word	0x200061f4
10006074:	20007108 	.word	0x20007108
10006078:	2000710c 	.word	0x2000710c
1000607c:	200061f8 	.word	0x200061f8
10006080:	2001276b 	.word	0x2001276b
10006084:	2001276c 	.word	0x2001276c
10006088:	2000327c 	.word	0x2000327c
1000608c:	2000329f 	.word	0x2000329f

10006090 <_Z8GenBrickv>:
{
10006090:	b570      	push	{r4, r5, r6, lr}
	Stat[Brick]++;
10006092:	2434      	movs	r4, #52	; 0x34
	Brick = NextBrick;
10006094:	4e1d      	ldr	r6, [pc, #116]	; (1000610c <_Z8GenBrickv+0x7c>)
10006096:	4a1e      	ldr	r2, [pc, #120]	; (10006110 <_Z8GenBrickv+0x80>)
10006098:	7833      	ldrb	r3, [r6, #0]
	Stat[Brick]++;
1000609a:	4d1e      	ldr	r5, [pc, #120]	; (10006114 <_Z8GenBrickv+0x84>)
	Brick = NextBrick;
1000609c:	7013      	strb	r3, [r2, #0]
	Stat[Brick]++;
1000609e:	009b      	lsls	r3, r3, #2
100060a0:	595a      	ldr	r2, [r3, r5]
100060a2:	3201      	adds	r2, #1
100060a4:	515a      	str	r2, [r3, r5]
	for (i = 0; i < BASEBRICKNUM; i++) DispTileNum(TILE_STAT1 + i*2, Stat[i], COL_WHITE);
100060a6:	0020      	movs	r0, r4
100060a8:	3402      	adds	r4, #2
100060aa:	22ff      	movs	r2, #255	; 0xff
100060ac:	cd02      	ldmia	r5!, {r1}
100060ae:	b2e4      	uxtb	r4, r4
100060b0:	f7ff fc66 	bl	10005980 <_Z11DispTileNumhih>
100060b4:	2c42      	cmp	r4, #66	; 0x42
100060b6:	d1f6      	bne.n	100060a6 <_Z8GenBrickv+0x16>

// generate double random number in range 0 (including) to 1 (excluding)
inline double RandDouble() { return Rand.Double(); }

// generate random number in range 0 to MAX (including)
inline u8 RandU8Max(u8 max) { return Rand.U8Max(max); }
100060b8:	2106      	movs	r1, #6
100060ba:	4817      	ldr	r0, [pc, #92]	; (10006118 <_Z8GenBrickv+0x88>)
100060bc:	f007 fb70 	bl	1000d7a0 <_ZN7cRandom5U8MaxEh>
	NextBrick = RandU8Max(BASEBRICKNUM-1);
100060c0:	7030      	strb	r0, [r6, #0]
	const u8* s = &BrickTemp[NextBrick*BRICKTEMPSIZE];
100060c2:	0104      	lsls	r4, r0, #4
100060c4:	4815      	ldr	r0, [pc, #84]	; (1000611c <_Z8GenBrickv+0x8c>)
	u8* d = &Board[2 + 2*MAPW];
100060c6:	4d16      	ldr	r5, [pc, #88]	; (10006120 <_Z8GenBrickv+0x90>)
	const u8* s = &BrickTemp[NextBrick*BRICKTEMPSIZE];
100060c8:	1824      	adds	r4, r4, r0
	for (i = 4; i > 0; i--)
100060ca:	0026      	movs	r6, r4
100060cc:	3610      	adds	r6, #16
		memcpy(d, s, 4);
100060ce:	0021      	movs	r1, r4
100060d0:	0028      	movs	r0, r5
100060d2:	2204      	movs	r2, #4
		s += 4;
100060d4:	3404      	adds	r4, #4
		memcpy(d, s, 4);
100060d6:	f7fa fc5f 	bl	10000998 <__wrap___aeabi_memcpy>
		d += MAPW;
100060da:	351b      	adds	r5, #27
	for (i = 4; i > 0; i--)
100060dc:	42b4      	cmp	r4, r6
100060de:	d1f6      	bne.n	100060ce <_Z8GenBrickv+0x3e>
	BrickX = MAPW/2-2;
100060e0:	220b      	movs	r2, #11
100060e2:	4b10      	ldr	r3, [pc, #64]	; (10006124 <_Z8GenBrickv+0x94>)
	BrickScore = LevScore[Level-1];
100060e4:	4910      	ldr	r1, [pc, #64]	; (10006128 <_Z8GenBrickv+0x98>)
	BrickX = MAPW/2-2;
100060e6:	701a      	strb	r2, [r3, #0]
	BrickY = 0;
100060e8:	2200      	movs	r2, #0
100060ea:	4b10      	ldr	r3, [pc, #64]	; (1000612c <_Z8GenBrickv+0x9c>)
100060ec:	701a      	strb	r2, [r3, #0]
	BrickScore = LevScore[Level-1];
100060ee:	4b10      	ldr	r3, [pc, #64]	; (10006130 <_Z8GenBrickv+0xa0>)
100060f0:	781b      	ldrb	r3, [r3, #0]
100060f2:	3b01      	subs	r3, #1
100060f4:	009b      	lsls	r3, r3, #2
100060f6:	5859      	ldr	r1, [r3, r1]
100060f8:	4b0e      	ldr	r3, [pc, #56]	; (10006134 <_Z8GenBrickv+0xa4>)
100060fa:	6019      	str	r1, [r3, #0]
	SpeedCnt = StepSpeed;
100060fc:	4b0e      	ldr	r3, [pc, #56]	; (10006138 <_Z8GenBrickv+0xa8>)
100060fe:	6819      	ldr	r1, [r3, #0]
10006100:	4b0e      	ldr	r3, [pc, #56]	; (1000613c <_Z8GenBrickv+0xac>)
10006102:	6019      	str	r1, [r3, #0]
	Falling = False;
10006104:	4b0e      	ldr	r3, [pc, #56]	; (10006140 <_Z8GenBrickv+0xb0>)
10006106:	701a      	strb	r2, [r3, #0]
}
10006108:	bd70      	pop	{r4, r5, r6, pc}
1000610a:	46c0      	nop			; (mov r8, r8)
1000610c:	2001276d 	.word	0x2001276d
10006110:	20012764 	.word	0x20012764
10006114:	20007840 	.word	0x20007840
10006118:	20003050 	.word	0x20003050
1000611c:	1000e9f4 	.word	0x1000e9f4
10006120:	200032b4 	.word	0x200032b4
10006124:	20012765 	.word	0x20012765
10006128:	1000e9cc 	.word	0x1000e9cc
1000612c:	20012766 	.word	0x20012766
10006130:	2001276b 	.word	0x2001276b
10006134:	20003498 	.word	0x20003498
10006138:	2000785c 	.word	0x2000785c
1000613c:	2000783c 	.word	0x2000783c
10006140:	20012768 	.word	0x20012768

10006144 <_Z11CheckBrickXaah>:
{
10006144:	b5f0      	push	{r4, r5, r6, r7, lr}
10006146:	464e      	mov	r6, r9
10006148:	4645      	mov	r5, r8
1000614a:	46de      	mov	lr, fp
1000614c:	4657      	mov	r7, sl
1000614e:	b5e0      	push	{r5, r6, r7, lr}
10006150:	0006      	movs	r6, r0
	u8* d = &Board[x + y*MAPW];
10006152:	004b      	lsls	r3, r1, #1
{
10006154:	b091      	sub	sp, #68	; 0x44
	u8* d = &Board[x + y*MAPW];
10006156:	185b      	adds	r3, r3, r1
{
10006158:	900c      	str	r0, [sp, #48]	; 0x30
1000615a:	920b      	str	r2, [sp, #44]	; 0x2c
	const u8* s = &BrickTemp[brick*BRICKTEMPSIZE];
1000615c:	0110      	lsls	r0, r2, #4
	u8* d = &Board[x + y*MAPW];
1000615e:	00da      	lsls	r2, r3, #3
10006160:	189b      	adds	r3, r3, r2
10006162:	18f2      	adds	r2, r6, r3
10006164:	9302      	str	r3, [sp, #8]
10006166:	4bca      	ldr	r3, [pc, #808]	; (10006490 <_Z11CheckBrickXaah+0x34c>)
	const u8* s = &BrickTemp[brick*BRICKTEMPSIZE];
10006168:	4dca      	ldr	r5, [pc, #808]	; (10006494 <_Z11CheckBrickXaah+0x350>)
	u8* d = &Board[x + y*MAPW];
1000616a:	469c      	mov	ip, r3
			b = *s++;
1000616c:	5c2b      	ldrb	r3, [r5, r0]
	const u8* s = &BrickTemp[brick*BRICKTEMPSIZE];
1000616e:	1944      	adds	r4, r0, r5
	u8* d = &Board[x + y*MAPW];
10006170:	4462      	add	r2, ip
			b = *s++;
10006172:	9303      	str	r3, [sp, #12]
			if (b != 0)
10006174:	2b00      	cmp	r3, #0
10006176:	d000      	beq.n	1000617a <_Z11CheckBrickXaah+0x36>
10006178:	e1ec      	b.n	10006554 <_Z11CheckBrickXaah+0x410>
1000617a:	7865      	ldrb	r5, [r4, #1]
	Bool ok = True;
1000617c:	2001      	movs	r0, #1
				if ((y < 1) || (y >= MAPH-1))
1000617e:	b2cb      	uxtb	r3, r1
			if (b != 0)
10006180:	9505      	str	r5, [sp, #20]
10006182:	2d00      	cmp	r5, #0
10006184:	d004      	beq.n	10006190 <_Z11CheckBrickXaah+0x4c>
				if ((y < 1) || (y >= MAPH-1))
10006186:	1e5d      	subs	r5, r3, #1
10006188:	2d11      	cmp	r5, #17
1000618a:	d800      	bhi.n	1000618e <_Z11CheckBrickXaah+0x4a>
1000618c:	e1f1      	b.n	10006572 <_Z11CheckBrickXaah+0x42e>
					ok = False;
1000618e:	2000      	movs	r0, #0
			if (b != 0)
10006190:	78a5      	ldrb	r5, [r4, #2]
10006192:	9507      	str	r5, [sp, #28]
10006194:	2d00      	cmp	r5, #0
10006196:	d004      	beq.n	100061a2 <_Z11CheckBrickXaah+0x5e>
				if ((y < 1) || (y >= MAPH-1))
10006198:	1e5d      	subs	r5, r3, #1
1000619a:	2d11      	cmp	r5, #17
1000619c:	d800      	bhi.n	100061a0 <_Z11CheckBrickXaah+0x5c>
1000619e:	e1f3      	b.n	10006588 <_Z11CheckBrickXaah+0x444>
					ok = False;
100061a0:	2000      	movs	r0, #0
			b = *s++;
100061a2:	1d25      	adds	r5, r4, #4
			if (b != 0)
100061a4:	78e4      	ldrb	r4, [r4, #3]
100061a6:	9406      	str	r4, [sp, #24]
100061a8:	2c00      	cmp	r4, #0
100061aa:	d004      	beq.n	100061b6 <_Z11CheckBrickXaah+0x72>
				if ((y < 1) || (y >= MAPH-1))
100061ac:	1e5c      	subs	r4, r3, #1
100061ae:	2c11      	cmp	r4, #17
100061b0:	d800      	bhi.n	100061b4 <_Z11CheckBrickXaah+0x70>
100061b2:	e1f5      	b.n	100065a0 <_Z11CheckBrickXaah+0x45c>
					ok = False;
100061b4:	2000      	movs	r0, #0
			b = *s++;
100061b6:	782f      	ldrb	r7, [r5, #0]
		y++;
100061b8:	1c5c      	adds	r4, r3, #1
100061ba:	b2e4      	uxtb	r4, r4
100061bc:	9400      	str	r4, [sp, #0]
			b = *s++;
100061be:	9704      	str	r7, [sp, #16]
			if (b != 0)
100061c0:	2f00      	cmp	r7, #0
100061c2:	d100      	bne.n	100061c6 <_Z11CheckBrickXaah+0x82>
100061c4:	e083      	b.n	100062ce <_Z11CheckBrickXaah+0x18a>
				if ((y < 1) || (y >= MAPH-1))
100061c6:	2b11      	cmp	r3, #17
100061c8:	d900      	bls.n	100061cc <_Z11CheckBrickXaah+0x88>
100061ca:	e16b      	b.n	100064a4 <_Z11CheckBrickXaah+0x360>
					if (*d != TILE_EMPTY) ok = False;
100061cc:	7ed7      	ldrb	r7, [r2, #27]
100061ce:	3f08      	subs	r7, #8
100061d0:	003c      	movs	r4, r7
100061d2:	4267      	negs	r7, r4
100061d4:	4167      	adcs	r7, r4
			if (b != 0)
100061d6:	786c      	ldrb	r4, [r5, #1]
					if (*d != TILE_EMPTY) ok = False;
100061d8:	427f      	negs	r7, r7
100061da:	4038      	ands	r0, r7
			if (b != 0)
100061dc:	9408      	str	r4, [sp, #32]
100061de:	2c00      	cmp	r4, #0
100061e0:	d100      	bne.n	100061e4 <_Z11CheckBrickXaah+0xa0>
100061e2:	e34a      	b.n	1000687a <_Z11CheckBrickXaah+0x736>
					if (*d != TILE_EMPTY) ok = False;
100061e4:	7f17      	ldrb	r7, [r2, #28]
100061e6:	3f08      	subs	r7, #8
100061e8:	003c      	movs	r4, r7
100061ea:	4267      	negs	r7, r4
100061ec:	4167      	adcs	r7, r4
100061ee:	427f      	negs	r7, r7
100061f0:	4038      	ands	r0, r7
			if (b != 0)
100061f2:	78af      	ldrb	r7, [r5, #2]
100061f4:	2f00      	cmp	r7, #0
100061f6:	d100      	bne.n	100061fa <_Z11CheckBrickXaah+0xb6>
100061f8:	e15d      	b.n	100064b6 <_Z11CheckBrickXaah+0x372>
					if (*d != TILE_EMPTY) ok = False;
100061fa:	7f54      	ldrb	r4, [r2, #29]
100061fc:	46a4      	mov	ip, r4
100061fe:	2408      	movs	r4, #8
10006200:	4264      	negs	r4, r4
10006202:	46a0      	mov	r8, r4
10006204:	44c4      	add	ip, r8
10006206:	4666      	mov	r6, ip
10006208:	4274      	negs	r4, r6
1000620a:	4174      	adcs	r4, r6
1000620c:	4264      	negs	r4, r4
1000620e:	4020      	ands	r0, r4
			b = *s++;
10006210:	1d2c      	adds	r4, r5, #4
10006212:	46a1      	mov	r9, r4
			if (b != 0)
10006214:	78ec      	ldrb	r4, [r5, #3]
10006216:	940d      	str	r4, [sp, #52]	; 0x34
10006218:	2c00      	cmp	r4, #0
1000621a:	d06b      	beq.n	100062f4 <_Z11CheckBrickXaah+0x1b0>
					if (*d != TILE_EMPTY) ok = False;
1000621c:	7f95      	ldrb	r5, [r2, #30]
1000621e:	3d08      	subs	r5, #8
10006220:	002c      	movs	r4, r5
10006222:	4265      	negs	r5, r4
10006224:	4165      	adcs	r5, r4
10006226:	426d      	negs	r5, r5
10006228:	4028      	ands	r0, r5
		y++;
1000622a:	1c9d      	adds	r5, r3, #2
1000622c:	b2ed      	uxtb	r5, r5
1000622e:	9501      	str	r5, [sp, #4]
			b = *s++;
10006230:	464d      	mov	r5, r9
10006232:	782d      	ldrb	r5, [r5, #0]
10006234:	46a8      	mov	r8, r5
			if (b != 0)
10006236:	2d00      	cmp	r5, #0
10006238:	d164      	bne.n	10006304 <_Z11CheckBrickXaah+0x1c0>
1000623a:	464c      	mov	r4, r9
1000623c:	7864      	ldrb	r4, [r4, #1]
1000623e:	9409      	str	r4, [sp, #36]	; 0x24
10006240:	2c00      	cmp	r4, #0
10006242:	d100      	bne.n	10006246 <_Z11CheckBrickXaah+0x102>
10006244:	e148      	b.n	100064d8 <_Z11CheckBrickXaah+0x394>
				if ((y < 1) || (y >= MAPH-1))
10006246:	9c00      	ldr	r4, [sp, #0]
10006248:	2c11      	cmp	r4, #17
1000624a:	d96d      	bls.n	10006328 <_Z11CheckBrickXaah+0x1e4>
			b = *s++;
1000624c:	4648      	mov	r0, r9
1000624e:	7880      	ldrb	r0, [r0, #2]
10006250:	4684      	mov	ip, r0
			if (b != 0)
10006252:	2800      	cmp	r0, #0
10006254:	d100      	bne.n	10006258 <_Z11CheckBrickXaah+0x114>
10006256:	e145      	b.n	100064e4 <_Z11CheckBrickXaah+0x3a0>
			b = *s++;
10006258:	4648      	mov	r0, r9
1000625a:	1d05      	adds	r5, r0, #4
1000625c:	78c0      	ldrb	r0, [r0, #3]
1000625e:	900e      	str	r0, [sp, #56]	; 0x38
			if (b != 0)
10006260:	2800      	cmp	r0, #0
10006262:	d000      	beq.n	10006266 <_Z11CheckBrickXaah+0x122>
					ok = False;
10006264:	2000      	movs	r0, #0
			b = *s++;
10006266:	782c      	ldrb	r4, [r5, #0]
10006268:	46a1      	mov	r9, r4
			if (b != 0)
1000626a:	2c00      	cmp	r4, #0
1000626c:	d100      	bne.n	10006270 <_Z11CheckBrickXaah+0x12c>
1000626e:	e089      	b.n	10006384 <_Z11CheckBrickXaah+0x240>
				if ((y < 1) || (y >= MAPH-1))
10006270:	9c01      	ldr	r4, [sp, #4]
10006272:	2c11      	cmp	r4, #17
10006274:	d900      	bls.n	10006278 <_Z11CheckBrickXaah+0x134>
10006276:	e156      	b.n	10006526 <_Z11CheckBrickXaah+0x3e2>
					if (*d != TILE_EMPTY) ok = False;
10006278:	2451      	movs	r4, #81	; 0x51
1000627a:	5d14      	ldrb	r4, [r2, r4]
1000627c:	46a2      	mov	sl, r4
1000627e:	2408      	movs	r4, #8
10006280:	4264      	negs	r4, r4
10006282:	46a3      	mov	fp, r4
10006284:	44da      	add	sl, fp
10006286:	4656      	mov	r6, sl
10006288:	4274      	negs	r4, r6
1000628a:	4174      	adcs	r4, r6
1000628c:	4264      	negs	r4, r4
1000628e:	4020      	ands	r0, r4
			if (b != 0)
10006290:	786c      	ldrb	r4, [r5, #1]
10006292:	940a      	str	r4, [sp, #40]	; 0x28
10006294:	2c00      	cmp	r4, #0
10006296:	d000      	beq.n	1000629a <_Z11CheckBrickXaah+0x156>
10006298:	e130      	b.n	100064fc <_Z11CheckBrickXaah+0x3b8>
1000629a:	78ac      	ldrb	r4, [r5, #2]
1000629c:	2c00      	cmp	r4, #0
1000629e:	d000      	beq.n	100062a2 <_Z11CheckBrickXaah+0x15e>
100062a0:	e13b      	b.n	1000651a <_Z11CheckBrickXaah+0x3d6>
100062a2:	78ec      	ldrb	r4, [r5, #3]
100062a4:	2c00      	cmp	r4, #0
100062a6:	d000      	beq.n	100062aa <_Z11CheckBrickXaah+0x166>
100062a8:	e14e      	b.n	10006548 <_Z11CheckBrickXaah+0x404>
	if (res)
100062aa:	2800      	cmp	r0, #0
100062ac:	d100      	bne.n	100062b0 <_Z11CheckBrickXaah+0x16c>
100062ae:	e072      	b.n	10006396 <_Z11CheckBrickXaah+0x252>
		BrickX = x;
100062b0:	4b79      	ldr	r3, [pc, #484]	; (10006498 <_Z11CheckBrickXaah+0x354>)
100062b2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
100062b4:	701a      	strb	r2, [r3, #0]
		BrickY = y;
100062b6:	4b79      	ldr	r3, [pc, #484]	; (1000649c <_Z11CheckBrickXaah+0x358>)
		Brick = brick;
100062b8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
		BrickY = y;
100062ba:	7019      	strb	r1, [r3, #0]
		Brick = brick;
100062bc:	4b78      	ldr	r3, [pc, #480]	; (100064a0 <_Z11CheckBrickXaah+0x35c>)
100062be:	701a      	strb	r2, [r3, #0]
}
100062c0:	b011      	add	sp, #68	; 0x44
100062c2:	bcf0      	pop	{r4, r5, r6, r7}
100062c4:	46bb      	mov	fp, r7
100062c6:	46b2      	mov	sl, r6
100062c8:	46a9      	mov	r9, r5
100062ca:	46a0      	mov	r8, r4
100062cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (b != 0)
100062ce:	786c      	ldrb	r4, [r5, #1]
100062d0:	9408      	str	r4, [sp, #32]
100062d2:	2c00      	cmp	r4, #0
100062d4:	d100      	bne.n	100062d8 <_Z11CheckBrickXaah+0x194>
100062d6:	e0ea      	b.n	100064ae <_Z11CheckBrickXaah+0x36a>
				if ((y < 1) || (y >= MAPH-1))
100062d8:	2b11      	cmp	r3, #17
100062da:	d800      	bhi.n	100062de <_Z11CheckBrickXaah+0x19a>
100062dc:	e782      	b.n	100061e4 <_Z11CheckBrickXaah+0xa0>
			b = *s++;
100062de:	78af      	ldrb	r7, [r5, #2]
100062e0:	1e38      	subs	r0, r7, #0
			if (b != 0)
100062e2:	d100      	bne.n	100062e6 <_Z11CheckBrickXaah+0x1a2>
100062e4:	e0e7      	b.n	100064b6 <_Z11CheckBrickXaah+0x372>
			b = *s++;
100062e6:	1d28      	adds	r0, r5, #4
100062e8:	4681      	mov	r9, r0
100062ea:	78e8      	ldrb	r0, [r5, #3]
100062ec:	900d      	str	r0, [sp, #52]	; 0x34
			if (b != 0)
100062ee:	2800      	cmp	r0, #0
100062f0:	d000      	beq.n	100062f4 <_Z11CheckBrickXaah+0x1b0>
					ok = False;
100062f2:	2000      	movs	r0, #0
		y++;
100062f4:	1c9d      	adds	r5, r3, #2
100062f6:	b2ed      	uxtb	r5, r5
100062f8:	9501      	str	r5, [sp, #4]
			b = *s++;
100062fa:	464d      	mov	r5, r9
100062fc:	782d      	ldrb	r5, [r5, #0]
100062fe:	46a8      	mov	r8, r5
			if (b != 0)
10006300:	2d00      	cmp	r5, #0
10006302:	d09a      	beq.n	1000623a <_Z11CheckBrickXaah+0xf6>
				if ((y < 1) || (y >= MAPH-1))
10006304:	9c00      	ldr	r4, [sp, #0]
10006306:	2c11      	cmp	r4, #17
10006308:	d900      	bls.n	1000630c <_Z11CheckBrickXaah+0x1c8>
1000630a:	e0df      	b.n	100064cc <_Z11CheckBrickXaah+0x388>
					if (*d != TILE_EMPTY) ok = False;
1000630c:	2536      	movs	r5, #54	; 0x36
1000630e:	5d55      	ldrb	r5, [r2, r5]
10006310:	3d08      	subs	r5, #8
10006312:	002c      	movs	r4, r5
10006314:	4265      	negs	r5, r4
10006316:	4165      	adcs	r5, r4
			if (b != 0)
10006318:	464c      	mov	r4, r9
1000631a:	7864      	ldrb	r4, [r4, #1]
					if (*d != TILE_EMPTY) ok = False;
1000631c:	426d      	negs	r5, r5
1000631e:	4028      	ands	r0, r5
			if (b != 0)
10006320:	9409      	str	r4, [sp, #36]	; 0x24
10006322:	2c00      	cmp	r4, #0
10006324:	d100      	bne.n	10006328 <_Z11CheckBrickXaah+0x1e4>
10006326:	e2a1      	b.n	1000686c <_Z11CheckBrickXaah+0x728>
					if (*d != TILE_EMPTY) ok = False;
10006328:	2537      	movs	r5, #55	; 0x37
1000632a:	5d55      	ldrb	r5, [r2, r5]
1000632c:	3d08      	subs	r5, #8
1000632e:	002c      	movs	r4, r5
10006330:	4265      	negs	r5, r4
10006332:	4165      	adcs	r5, r4
			if (b != 0)
10006334:	464c      	mov	r4, r9
10006336:	78a4      	ldrb	r4, [r4, #2]
					if (*d != TILE_EMPTY) ok = False;
10006338:	426d      	negs	r5, r5
			if (b != 0)
1000633a:	46a4      	mov	ip, r4
					if (*d != TILE_EMPTY) ok = False;
1000633c:	4028      	ands	r0, r5
			if (b != 0)
1000633e:	2c00      	cmp	r4, #0
10006340:	d100      	bne.n	10006344 <_Z11CheckBrickXaah+0x200>
10006342:	e0cf      	b.n	100064e4 <_Z11CheckBrickXaah+0x3a0>
					if (*d != TILE_EMPTY) ok = False;
10006344:	2538      	movs	r5, #56	; 0x38
10006346:	5d55      	ldrb	r5, [r2, r5]
10006348:	3d08      	subs	r5, #8
1000634a:	002c      	movs	r4, r5
1000634c:	4265      	negs	r5, r4
1000634e:	4165      	adcs	r5, r4
10006350:	426d      	negs	r5, r5
10006352:	4028      	ands	r0, r5
			b = *s++;
10006354:	464c      	mov	r4, r9
10006356:	1d25      	adds	r5, r4, #4
			if (b != 0)
10006358:	78e4      	ldrb	r4, [r4, #3]
1000635a:	940e      	str	r4, [sp, #56]	; 0x38
1000635c:	2c00      	cmp	r4, #0
1000635e:	d100      	bne.n	10006362 <_Z11CheckBrickXaah+0x21e>
10006360:	e781      	b.n	10006266 <_Z11CheckBrickXaah+0x122>
					if (*d != TILE_EMPTY) ok = False;
10006362:	2439      	movs	r4, #57	; 0x39
10006364:	5d14      	ldrb	r4, [r2, r4]
10006366:	46a1      	mov	r9, r4
10006368:	2408      	movs	r4, #8
1000636a:	4264      	negs	r4, r4
1000636c:	46a2      	mov	sl, r4
1000636e:	44d1      	add	r9, sl
10006370:	464e      	mov	r6, r9
10006372:	4274      	negs	r4, r6
10006374:	4174      	adcs	r4, r6
10006376:	4264      	negs	r4, r4
10006378:	4020      	ands	r0, r4
			b = *s++;
1000637a:	782c      	ldrb	r4, [r5, #0]
1000637c:	46a1      	mov	r9, r4
			if (b != 0)
1000637e:	2c00      	cmp	r4, #0
10006380:	d000      	beq.n	10006384 <_Z11CheckBrickXaah+0x240>
10006382:	e775      	b.n	10006270 <_Z11CheckBrickXaah+0x12c>
10006384:	786c      	ldrb	r4, [r5, #1]
10006386:	940a      	str	r4, [sp, #40]	; 0x28
10006388:	2c00      	cmp	r4, #0
1000638a:	d100      	bne.n	1000638e <_Z11CheckBrickXaah+0x24a>
1000638c:	e0d0      	b.n	10006530 <_Z11CheckBrickXaah+0x3ec>
				if ((y < 1) || (y >= MAPH-1))
1000638e:	9c01      	ldr	r4, [sp, #4]
10006390:	2c11      	cmp	r4, #17
10006392:	d800      	bhi.n	10006396 <_Z11CheckBrickXaah+0x252>
10006394:	e0b2      	b.n	100064fc <_Z11CheckBrickXaah+0x3b8>
	if (CheckBrickSave(x-1, y, brick)) return True;
10006396:	2030      	movs	r0, #48	; 0x30
10006398:	466a      	mov	r2, sp
1000639a:	1812      	adds	r2, r2, r0
1000639c:	7812      	ldrb	r2, [r2, #0]
1000639e:	1e56      	subs	r6, r2, #1
100063a0:	b270      	sxtb	r0, r6
	u8* d = &Board[x + y*MAPW];
100063a2:	4682      	mov	sl, r0
	if (CheckBrickSave(x-1, y, brick)) return True;
100063a4:	920c      	str	r2, [sp, #48]	; 0x30
100063a6:	900f      	str	r0, [sp, #60]	; 0x3c
	u8* d = &Board[x + y*MAPW];
100063a8:	9a02      	ldr	r2, [sp, #8]
100063aa:	4839      	ldr	r0, [pc, #228]	; (10006490 <_Z11CheckBrickXaah+0x34c>)
100063ac:	4452      	add	r2, sl
100063ae:	4682      	mov	sl, r0
			if (b != 0)
100063b0:	9803      	ldr	r0, [sp, #12]
	u8* d = &Board[x + y*MAPW];
100063b2:	4452      	add	r2, sl
			if (b != 0)
100063b4:	2800      	cmp	r0, #0
100063b6:	d000      	beq.n	100063ba <_Z11CheckBrickXaah+0x276>
100063b8:	e19f      	b.n	100066fa <_Z11CheckBrickXaah+0x5b6>
	Bool ok = True;
100063ba:	3001      	adds	r0, #1
			if (b != 0)
100063bc:	9c05      	ldr	r4, [sp, #20]
100063be:	2c00      	cmp	r4, #0
100063c0:	d004      	beq.n	100063cc <_Z11CheckBrickXaah+0x288>
				if ((y < 1) || (y >= MAPH-1))
100063c2:	1e5c      	subs	r4, r3, #1
100063c4:	2c11      	cmp	r4, #17
100063c6:	d800      	bhi.n	100063ca <_Z11CheckBrickXaah+0x286>
100063c8:	e25c      	b.n	10006884 <_Z11CheckBrickXaah+0x740>
					ok = False;
100063ca:	2000      	movs	r0, #0
			if (b != 0)
100063cc:	9c07      	ldr	r4, [sp, #28]
100063ce:	2c00      	cmp	r4, #0
100063d0:	d004      	beq.n	100063dc <_Z11CheckBrickXaah+0x298>
				if ((y < 1) || (y >= MAPH-1))
100063d2:	1e5c      	subs	r4, r3, #1
100063d4:	2c11      	cmp	r4, #17
100063d6:	d800      	bhi.n	100063da <_Z11CheckBrickXaah+0x296>
100063d8:	e263      	b.n	100068a2 <_Z11CheckBrickXaah+0x75e>
					ok = False;
100063da:	2000      	movs	r0, #0
			if (b != 0)
100063dc:	9c06      	ldr	r4, [sp, #24]
100063de:	2c00      	cmp	r4, #0
100063e0:	d004      	beq.n	100063ec <_Z11CheckBrickXaah+0x2a8>
				if ((y < 1) || (y >= MAPH-1))
100063e2:	1e5c      	subs	r4, r3, #1
100063e4:	2c11      	cmp	r4, #17
100063e6:	d800      	bhi.n	100063ea <_Z11CheckBrickXaah+0x2a6>
100063e8:	e26a      	b.n	100068c0 <_Z11CheckBrickXaah+0x77c>
					ok = False;
100063ea:	2000      	movs	r0, #0
			if (b != 0)
100063ec:	9c04      	ldr	r4, [sp, #16]
100063ee:	2c00      	cmp	r4, #0
100063f0:	d100      	bne.n	100063f4 <_Z11CheckBrickXaah+0x2b0>
100063f2:	e0e4      	b.n	100065be <_Z11CheckBrickXaah+0x47a>
				if ((y < 1) || (y >= MAPH-1))
100063f4:	2b11      	cmp	r3, #17
100063f6:	d800      	bhi.n	100063fa <_Z11CheckBrickXaah+0x2b6>
100063f8:	e1f3      	b.n	100067e2 <_Z11CheckBrickXaah+0x69e>
			b = *s++;
100063fa:	9c08      	ldr	r4, [sp, #32]
100063fc:	1e20      	subs	r0, r4, #0
			if (b != 0)
100063fe:	d100      	bne.n	10006402 <_Z11CheckBrickXaah+0x2be>
10006400:	e16d      	b.n	100066de <_Z11CheckBrickXaah+0x59a>
			b = *s++;
10006402:	1e38      	subs	r0, r7, #0
			if (b != 0)
10006404:	d100      	bne.n	10006408 <_Z11CheckBrickXaah+0x2c4>
10006406:	e170      	b.n	100066ea <_Z11CheckBrickXaah+0x5a6>
					ok = False;
10006408:	2000      	movs	r0, #0
			if (b != 0)
1000640a:	4644      	mov	r4, r8
1000640c:	2c00      	cmp	r4, #0
1000640e:	d100      	bne.n	10006412 <_Z11CheckBrickXaah+0x2ce>
10006410:	e108      	b.n	10006624 <_Z11CheckBrickXaah+0x4e0>
				if ((y < 1) || (y >= MAPH-1))
10006412:	9c00      	ldr	r4, [sp, #0]
10006414:	2c11      	cmp	r4, #17
10006416:	d900      	bls.n	1000641a <_Z11CheckBrickXaah+0x2d6>
10006418:	e182      	b.n	10006720 <_Z11CheckBrickXaah+0x5dc>
					if (*d != TILE_EMPTY) ok = False;
1000641a:	2436      	movs	r4, #54	; 0x36
1000641c:	5d14      	ldrb	r4, [r2, r4]
1000641e:	46a2      	mov	sl, r4
10006420:	2408      	movs	r4, #8
10006422:	4264      	negs	r4, r4
10006424:	46a3      	mov	fp, r4
10006426:	44da      	add	sl, fp
10006428:	4656      	mov	r6, sl
1000642a:	4274      	negs	r4, r6
1000642c:	4174      	adcs	r4, r6
1000642e:	4264      	negs	r4, r4
10006430:	4020      	ands	r0, r4
			if (b != 0)
10006432:	9c09      	ldr	r4, [sp, #36]	; 0x24
10006434:	2c00      	cmp	r4, #0
10006436:	d000      	beq.n	1000643a <_Z11CheckBrickXaah+0x2f6>
10006438:	e198      	b.n	1000676c <_Z11CheckBrickXaah+0x628>
1000643a:	4664      	mov	r4, ip
1000643c:	2c00      	cmp	r4, #0
1000643e:	d000      	beq.n	10006442 <_Z11CheckBrickXaah+0x2fe>
10006440:	e177      	b.n	10006732 <_Z11CheckBrickXaah+0x5ee>
10006442:	9c0e      	ldr	r4, [sp, #56]	; 0x38
10006444:	2c00      	cmp	r4, #0
10006446:	d000      	beq.n	1000644a <_Z11CheckBrickXaah+0x306>
10006448:	e183      	b.n	10006752 <_Z11CheckBrickXaah+0x60e>
1000644a:	464c      	mov	r4, r9
1000644c:	2c00      	cmp	r4, #0
1000644e:	d100      	bne.n	10006452 <_Z11CheckBrickXaah+0x30e>
10006450:	e0f8      	b.n	10006644 <_Z11CheckBrickXaah+0x500>
				if ((y < 1) || (y >= MAPH-1))
10006452:	9c01      	ldr	r4, [sp, #4]
10006454:	2c11      	cmp	r4, #17
10006456:	d800      	bhi.n	1000645a <_Z11CheckBrickXaah+0x316>
10006458:	e1ec      	b.n	10006834 <_Z11CheckBrickXaah+0x6f0>
			if (b != 0)
1000645a:	980a      	ldr	r0, [sp, #40]	; 0x28
1000645c:	2800      	cmp	r0, #0
1000645e:	d000      	beq.n	10006462 <_Z11CheckBrickXaah+0x31e>
10006460:	e0fd      	b.n	1000665e <_Z11CheckBrickXaah+0x51a>
			b = *s++;
10006462:	78a8      	ldrb	r0, [r5, #2]
			if (b != 0)
10006464:	2800      	cmp	r0, #0
10006466:	d000      	beq.n	1000646a <_Z11CheckBrickXaah+0x326>
10006468:	e0f9      	b.n	1000665e <_Z11CheckBrickXaah+0x51a>
1000646a:	78ec      	ldrb	r4, [r5, #3]
1000646c:	2c00      	cmp	r4, #0
1000646e:	d008      	beq.n	10006482 <_Z11CheckBrickXaah+0x33e>
				if ((y < 1) || (y >= MAPH-1))
10006470:	9c01      	ldr	r4, [sp, #4]
10006472:	2c11      	cmp	r4, #17
10006474:	d900      	bls.n	10006478 <_Z11CheckBrickXaah+0x334>
10006476:	e0f2      	b.n	1000665e <_Z11CheckBrickXaah+0x51a>
					if (*d != TILE_EMPTY) ok = False;
10006478:	2454      	movs	r4, #84	; 0x54
1000647a:	5d12      	ldrb	r2, [r2, r4]
1000647c:	2a08      	cmp	r2, #8
1000647e:	d000      	beq.n	10006482 <_Z11CheckBrickXaah+0x33e>
10006480:	e0ed      	b.n	1000665e <_Z11CheckBrickXaah+0x51a>
	if (res)
10006482:	2800      	cmp	r0, #0
10006484:	d100      	bne.n	10006488 <_Z11CheckBrickXaah+0x344>
10006486:	e0ea      	b.n	1000665e <_Z11CheckBrickXaah+0x51a>
		BrickX = x;
10006488:	4b03      	ldr	r3, [pc, #12]	; (10006498 <_Z11CheckBrickXaah+0x354>)
1000648a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
1000648c:	e712      	b.n	100062b4 <_Z11CheckBrickXaah+0x170>
1000648e:	46c0      	nop			; (mov r8, r8)
10006490:	2000327c 	.word	0x2000327c
10006494:	1000e9f4 	.word	0x1000e9f4
10006498:	20012765 	.word	0x20012765
1000649c:	20012766 	.word	0x20012766
100064a0:	20012764 	.word	0x20012764
			b = *s++;
100064a4:	7868      	ldrb	r0, [r5, #1]
100064a6:	9008      	str	r0, [sp, #32]
			if (b != 0)
100064a8:	2800      	cmp	r0, #0
100064aa:	d000      	beq.n	100064ae <_Z11CheckBrickXaah+0x36a>
100064ac:	e717      	b.n	100062de <_Z11CheckBrickXaah+0x19a>
100064ae:	78af      	ldrb	r7, [r5, #2]
100064b0:	2f00      	cmp	r7, #0
100064b2:	d000      	beq.n	100064b6 <_Z11CheckBrickXaah+0x372>
100064b4:	e18a      	b.n	100067cc <_Z11CheckBrickXaah+0x688>
			b = *s++;
100064b6:	1d2c      	adds	r4, r5, #4
100064b8:	46a1      	mov	r9, r4
			if (b != 0)
100064ba:	78ec      	ldrb	r4, [r5, #3]
100064bc:	940d      	str	r4, [sp, #52]	; 0x34
100064be:	2c00      	cmp	r4, #0
100064c0:	d100      	bne.n	100064c4 <_Z11CheckBrickXaah+0x380>
100064c2:	e717      	b.n	100062f4 <_Z11CheckBrickXaah+0x1b0>
				if ((y < 1) || (y >= MAPH-1))
100064c4:	2b11      	cmp	r3, #17
100064c6:	d900      	bls.n	100064ca <_Z11CheckBrickXaah+0x386>
100064c8:	e713      	b.n	100062f2 <_Z11CheckBrickXaah+0x1ae>
100064ca:	e6a7      	b.n	1000621c <_Z11CheckBrickXaah+0xd8>
			b = *s++;
100064cc:	4648      	mov	r0, r9
100064ce:	7840      	ldrb	r0, [r0, #1]
100064d0:	9009      	str	r0, [sp, #36]	; 0x24
			if (b != 0)
100064d2:	2800      	cmp	r0, #0
100064d4:	d000      	beq.n	100064d8 <_Z11CheckBrickXaah+0x394>
100064d6:	e6b9      	b.n	1000624c <_Z11CheckBrickXaah+0x108>
100064d8:	464c      	mov	r4, r9
100064da:	78a4      	ldrb	r4, [r4, #2]
100064dc:	46a4      	mov	ip, r4
100064de:	2c00      	cmp	r4, #0
100064e0:	d000      	beq.n	100064e4 <_Z11CheckBrickXaah+0x3a0>
100064e2:	e167      	b.n	100067b4 <_Z11CheckBrickXaah+0x670>
			b = *s++;
100064e4:	464c      	mov	r4, r9
100064e6:	1d25      	adds	r5, r4, #4
			if (b != 0)
100064e8:	78e4      	ldrb	r4, [r4, #3]
100064ea:	940e      	str	r4, [sp, #56]	; 0x38
100064ec:	2c00      	cmp	r4, #0
100064ee:	d100      	bne.n	100064f2 <_Z11CheckBrickXaah+0x3ae>
100064f0:	e6b9      	b.n	10006266 <_Z11CheckBrickXaah+0x122>
				if ((y < 1) || (y >= MAPH-1))
100064f2:	9c00      	ldr	r4, [sp, #0]
100064f4:	2c11      	cmp	r4, #17
100064f6:	d900      	bls.n	100064fa <_Z11CheckBrickXaah+0x3b6>
100064f8:	e6b4      	b.n	10006264 <_Z11CheckBrickXaah+0x120>
100064fa:	e732      	b.n	10006362 <_Z11CheckBrickXaah+0x21e>
					if (*d != TILE_EMPTY) ok = False;
100064fc:	2452      	movs	r4, #82	; 0x52
100064fe:	5d14      	ldrb	r4, [r2, r4]
10006500:	46a2      	mov	sl, r4
10006502:	2408      	movs	r4, #8
10006504:	4264      	negs	r4, r4
10006506:	46a3      	mov	fp, r4
10006508:	44da      	add	sl, fp
1000650a:	4656      	mov	r6, sl
1000650c:	4274      	negs	r4, r6
1000650e:	4174      	adcs	r4, r6
10006510:	4264      	negs	r4, r4
10006512:	4020      	ands	r0, r4
			if (b != 0)
10006514:	78ac      	ldrb	r4, [r5, #2]
10006516:	2c00      	cmp	r4, #0
10006518:	d00e      	beq.n	10006538 <_Z11CheckBrickXaah+0x3f4>
					if (*d != TILE_EMPTY) ok = False;
1000651a:	2453      	movs	r4, #83	; 0x53
1000651c:	5d14      	ldrb	r4, [r2, r4]
1000651e:	2c08      	cmp	r4, #8
10006520:	d000      	beq.n	10006524 <_Z11CheckBrickXaah+0x3e0>
10006522:	e738      	b.n	10006396 <_Z11CheckBrickXaah+0x252>
10006524:	e6bd      	b.n	100062a2 <_Z11CheckBrickXaah+0x15e>
			b = *s++;
10006526:	7868      	ldrb	r0, [r5, #1]
10006528:	900a      	str	r0, [sp, #40]	; 0x28
			if (b != 0)
1000652a:	2800      	cmp	r0, #0
1000652c:	d000      	beq.n	10006530 <_Z11CheckBrickXaah+0x3ec>
1000652e:	e732      	b.n	10006396 <_Z11CheckBrickXaah+0x252>
10006530:	78ac      	ldrb	r4, [r5, #2]
10006532:	2c00      	cmp	r4, #0
10006534:	d000      	beq.n	10006538 <_Z11CheckBrickXaah+0x3f4>
10006536:	e138      	b.n	100067aa <_Z11CheckBrickXaah+0x666>
10006538:	78ec      	ldrb	r4, [r5, #3]
1000653a:	2c00      	cmp	r4, #0
1000653c:	d100      	bne.n	10006540 <_Z11CheckBrickXaah+0x3fc>
1000653e:	e6b4      	b.n	100062aa <_Z11CheckBrickXaah+0x166>
				if ((y < 1) || (y >= MAPH-1))
10006540:	9c01      	ldr	r4, [sp, #4]
10006542:	2c11      	cmp	r4, #17
10006544:	d900      	bls.n	10006548 <_Z11CheckBrickXaah+0x404>
10006546:	e726      	b.n	10006396 <_Z11CheckBrickXaah+0x252>
					if (*d != TILE_EMPTY) ok = False;
10006548:	2454      	movs	r4, #84	; 0x54
1000654a:	5d12      	ldrb	r2, [r2, r4]
1000654c:	2a08      	cmp	r2, #8
1000654e:	d000      	beq.n	10006552 <_Z11CheckBrickXaah+0x40e>
10006550:	e721      	b.n	10006396 <_Z11CheckBrickXaah+0x252>
10006552:	e6aa      	b.n	100062aa <_Z11CheckBrickXaah+0x166>
				if ((y < 1) || (y >= MAPH-1))
10006554:	b2cb      	uxtb	r3, r1
10006556:	1e58      	subs	r0, r3, #1
10006558:	2811      	cmp	r0, #17
1000655a:	d900      	bls.n	1000655e <_Z11CheckBrickXaah+0x41a>
1000655c:	e11e      	b.n	1000679c <_Z11CheckBrickXaah+0x658>
					if (*d != TILE_EMPTY) ok = False;
1000655e:	7810      	ldrb	r0, [r2, #0]
10006560:	3808      	subs	r0, #8
10006562:	4245      	negs	r5, r0
10006564:	4168      	adcs	r0, r5
			if (b != 0)
10006566:	7865      	ldrb	r5, [r4, #1]
					if (*d != TILE_EMPTY) ok = False;
10006568:	b2c0      	uxtb	r0, r0
			if (b != 0)
1000656a:	9505      	str	r5, [sp, #20]
1000656c:	2d00      	cmp	r5, #0
1000656e:	d100      	bne.n	10006572 <_Z11CheckBrickXaah+0x42e>
10006570:	e176      	b.n	10006860 <_Z11CheckBrickXaah+0x71c>
					if (*d != TILE_EMPTY) ok = False;
10006572:	7855      	ldrb	r5, [r2, #1]
10006574:	3d08      	subs	r5, #8
10006576:	426f      	negs	r7, r5
10006578:	417d      	adcs	r5, r7
1000657a:	426d      	negs	r5, r5
1000657c:	4028      	ands	r0, r5
			if (b != 0)
1000657e:	78a5      	ldrb	r5, [r4, #2]
10006580:	9507      	str	r5, [sp, #28]
10006582:	2d00      	cmp	r5, #0
10006584:	d100      	bne.n	10006588 <_Z11CheckBrickXaah+0x444>
10006586:	e60c      	b.n	100061a2 <_Z11CheckBrickXaah+0x5e>
					if (*d != TILE_EMPTY) ok = False;
10006588:	7895      	ldrb	r5, [r2, #2]
1000658a:	3d08      	subs	r5, #8
1000658c:	426f      	negs	r7, r5
1000658e:	417d      	adcs	r5, r7
10006590:	426d      	negs	r5, r5
10006592:	4028      	ands	r0, r5
			b = *s++;
10006594:	1d25      	adds	r5, r4, #4
			if (b != 0)
10006596:	78e4      	ldrb	r4, [r4, #3]
10006598:	9406      	str	r4, [sp, #24]
1000659a:	2c00      	cmp	r4, #0
1000659c:	d100      	bne.n	100065a0 <_Z11CheckBrickXaah+0x45c>
1000659e:	e60a      	b.n	100061b6 <_Z11CheckBrickXaah+0x72>
					if (*d != TILE_EMPTY) ok = False;
100065a0:	78d4      	ldrb	r4, [r2, #3]
100065a2:	3c08      	subs	r4, #8
100065a4:	4267      	negs	r7, r4
100065a6:	417c      	adcs	r4, r7
100065a8:	4264      	negs	r4, r4
			b = *s++;
100065aa:	782f      	ldrb	r7, [r5, #0]
					if (*d != TILE_EMPTY) ok = False;
100065ac:	4020      	ands	r0, r4
		y++;
100065ae:	1c5c      	adds	r4, r3, #1
100065b0:	b2e4      	uxtb	r4, r4
100065b2:	9400      	str	r4, [sp, #0]
			b = *s++;
100065b4:	9704      	str	r7, [sp, #16]
			if (b != 0)
100065b6:	2f00      	cmp	r7, #0
100065b8:	d000      	beq.n	100065bc <_Z11CheckBrickXaah+0x478>
100065ba:	e604      	b.n	100061c6 <_Z11CheckBrickXaah+0x82>
100065bc:	e687      	b.n	100062ce <_Z11CheckBrickXaah+0x18a>
100065be:	9c08      	ldr	r4, [sp, #32]
100065c0:	2c00      	cmp	r4, #0
100065c2:	d100      	bne.n	100065c6 <_Z11CheckBrickXaah+0x482>
100065c4:	e08b      	b.n	100066de <_Z11CheckBrickXaah+0x59a>
				if ((y < 1) || (y >= MAPH-1))
100065c6:	2b11      	cmp	r3, #17
100065c8:	d900      	bls.n	100065cc <_Z11CheckBrickXaah+0x488>
100065ca:	e71a      	b.n	10006402 <_Z11CheckBrickXaah+0x2be>
					if (*d != TILE_EMPTY) ok = False;
100065cc:	7f14      	ldrb	r4, [r2, #28]
100065ce:	46a2      	mov	sl, r4
100065d0:	2408      	movs	r4, #8
100065d2:	4264      	negs	r4, r4
100065d4:	46a3      	mov	fp, r4
100065d6:	44da      	add	sl, fp
100065d8:	4656      	mov	r6, sl
100065da:	4274      	negs	r4, r6
100065dc:	4174      	adcs	r4, r6
100065de:	4264      	negs	r4, r4
100065e0:	4020      	ands	r0, r4
			if (b != 0)
100065e2:	2f00      	cmp	r7, #0
100065e4:	d100      	bne.n	100065e8 <_Z11CheckBrickXaah+0x4a4>
100065e6:	e080      	b.n	100066ea <_Z11CheckBrickXaah+0x5a6>
					if (*d != TILE_EMPTY) ok = False;
100065e8:	7f54      	ldrb	r4, [r2, #29]
100065ea:	46a2      	mov	sl, r4
100065ec:	2408      	movs	r4, #8
100065ee:	4264      	negs	r4, r4
100065f0:	46a3      	mov	fp, r4
100065f2:	44da      	add	sl, fp
100065f4:	4656      	mov	r6, sl
100065f6:	4274      	negs	r4, r6
100065f8:	4174      	adcs	r4, r6
100065fa:	4264      	negs	r4, r4
100065fc:	4020      	ands	r0, r4
			if (b != 0)
100065fe:	9c0d      	ldr	r4, [sp, #52]	; 0x34
10006600:	2c00      	cmp	r4, #0
10006602:	d100      	bne.n	10006606 <_Z11CheckBrickXaah+0x4c2>
10006604:	e701      	b.n	1000640a <_Z11CheckBrickXaah+0x2c6>
					if (*d != TILE_EMPTY) ok = False;
10006606:	7f94      	ldrb	r4, [r2, #30]
10006608:	46a2      	mov	sl, r4
1000660a:	2408      	movs	r4, #8
1000660c:	4264      	negs	r4, r4
1000660e:	46a3      	mov	fp, r4
10006610:	44da      	add	sl, fp
10006612:	4656      	mov	r6, sl
10006614:	4274      	negs	r4, r6
10006616:	4174      	adcs	r4, r6
10006618:	4264      	negs	r4, r4
1000661a:	4020      	ands	r0, r4
			if (b != 0)
1000661c:	4644      	mov	r4, r8
1000661e:	2c00      	cmp	r4, #0
10006620:	d000      	beq.n	10006624 <_Z11CheckBrickXaah+0x4e0>
10006622:	e6f6      	b.n	10006412 <_Z11CheckBrickXaah+0x2ce>
10006624:	9c09      	ldr	r4, [sp, #36]	; 0x24
10006626:	2c00      	cmp	r4, #0
10006628:	d07d      	beq.n	10006726 <_Z11CheckBrickXaah+0x5e2>
				if ((y < 1) || (y >= MAPH-1))
1000662a:	9c00      	ldr	r4, [sp, #0]
1000662c:	2c11      	cmp	r4, #17
1000662e:	d800      	bhi.n	10006632 <_Z11CheckBrickXaah+0x4ee>
10006630:	e09c      	b.n	1000676c <_Z11CheckBrickXaah+0x628>
			b = *s++;
10006632:	4660      	mov	r0, ip
			if (b != 0)
10006634:	2800      	cmp	r0, #0
10006636:	d100      	bne.n	1000663a <_Z11CheckBrickXaah+0x4f6>
10006638:	e0a7      	b.n	1000678a <_Z11CheckBrickXaah+0x646>
					ok = False;
1000663a:	2000      	movs	r0, #0
			if (b != 0)
1000663c:	464c      	mov	r4, r9
1000663e:	2c00      	cmp	r4, #0
10006640:	d000      	beq.n	10006644 <_Z11CheckBrickXaah+0x500>
10006642:	e706      	b.n	10006452 <_Z11CheckBrickXaah+0x30e>
10006644:	9c0a      	ldr	r4, [sp, #40]	; 0x28
10006646:	2c00      	cmp	r4, #0
10006648:	d100      	bne.n	1000664c <_Z11CheckBrickXaah+0x508>
1000664a:	e0e1      	b.n	10006810 <_Z11CheckBrickXaah+0x6cc>
				if ((y < 1) || (y >= MAPH-1))
1000664c:	9c01      	ldr	r4, [sp, #4]
1000664e:	2c11      	cmp	r4, #17
10006650:	d805      	bhi.n	1000665e <_Z11CheckBrickXaah+0x51a>
					if (*d != TILE_EMPTY) ok = False;
10006652:	2452      	movs	r4, #82	; 0x52
10006654:	5d14      	ldrb	r4, [r2, r4]
10006656:	2c08      	cmp	r4, #8
10006658:	d101      	bne.n	1000665e <_Z11CheckBrickXaah+0x51a>
1000665a:	f000 fcbc 	bl	10006fd6 <_Z11CheckBrickXaah+0xe92>
	if (CheckBrickSave(x+1, y, brick)) return True;
1000665e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	u8* d = &Board[x + y*MAPW];
10006660:	48b8      	ldr	r0, [pc, #736]	; (10006944 <_Z11CheckBrickXaah+0x800>)
	if (CheckBrickSave(x+1, y, brick)) return True;
10006662:	3201      	adds	r2, #1
10006664:	b252      	sxtb	r2, r2
10006666:	4693      	mov	fp, r2
	u8* d = &Board[x + y*MAPW];
10006668:	4682      	mov	sl, r0
1000666a:	9a02      	ldr	r2, [sp, #8]
			if (b != 0)
1000666c:	9803      	ldr	r0, [sp, #12]
	u8* d = &Board[x + y*MAPW];
1000666e:	445a      	add	r2, fp
10006670:	4452      	add	r2, sl
			if (b != 0)
10006672:	2800      	cmp	r0, #0
10006674:	d000      	beq.n	10006678 <_Z11CheckBrickXaah+0x534>
10006676:	e376      	b.n	10006d66 <_Z11CheckBrickXaah+0xc22>
	Bool ok = True;
10006678:	3001      	adds	r0, #1
			if (b != 0)
1000667a:	9c05      	ldr	r4, [sp, #20]
1000667c:	2c00      	cmp	r4, #0
1000667e:	d004      	beq.n	1000668a <_Z11CheckBrickXaah+0x546>
				if ((y < 1) || (y >= MAPH-1))
10006680:	1e5e      	subs	r6, r3, #1
10006682:	2e11      	cmp	r6, #17
10006684:	d800      	bhi.n	10006688 <_Z11CheckBrickXaah+0x544>
10006686:	e3d6      	b.n	10006e36 <_Z11CheckBrickXaah+0xcf2>
					ok = False;
10006688:	2000      	movs	r0, #0
			if (b != 0)
1000668a:	9c07      	ldr	r4, [sp, #28]
1000668c:	2c00      	cmp	r4, #0
1000668e:	d004      	beq.n	1000669a <_Z11CheckBrickXaah+0x556>
				if ((y < 1) || (y >= MAPH-1))
10006690:	1e5e      	subs	r6, r3, #1
10006692:	2e11      	cmp	r6, #17
10006694:	d800      	bhi.n	10006698 <_Z11CheckBrickXaah+0x554>
10006696:	e375      	b.n	10006d84 <_Z11CheckBrickXaah+0xc40>
					ok = False;
10006698:	2000      	movs	r0, #0
			if (b != 0)
1000669a:	9c06      	ldr	r4, [sp, #24]
1000669c:	2c00      	cmp	r4, #0
1000669e:	d004      	beq.n	100066aa <_Z11CheckBrickXaah+0x566>
				if ((y < 1) || (y >= MAPH-1))
100066a0:	1e5e      	subs	r6, r3, #1
100066a2:	2e11      	cmp	r6, #17
100066a4:	d800      	bhi.n	100066a8 <_Z11CheckBrickXaah+0x564>
100066a6:	e378      	b.n	10006d9a <_Z11CheckBrickXaah+0xc56>
					ok = False;
100066a8:	2000      	movs	r0, #0
			if (b != 0)
100066aa:	9c04      	ldr	r4, [sp, #16]
100066ac:	2c00      	cmp	r4, #0
100066ae:	d100      	bne.n	100066b2 <_Z11CheckBrickXaah+0x56e>
100066b0:	e348      	b.n	10006d44 <_Z11CheckBrickXaah+0xc00>
				if ((y < 1) || (y >= MAPH-1))
100066b2:	2b11      	cmp	r3, #17
100066b4:	d900      	bls.n	100066b8 <_Z11CheckBrickXaah+0x574>
100066b6:	e38b      	b.n	10006dd0 <_Z11CheckBrickXaah+0xc8c>
					if (*d != TILE_EMPTY) ok = False;
100066b8:	7ed6      	ldrb	r6, [r2, #27]
100066ba:	3e08      	subs	r6, #8
100066bc:	0034      	movs	r4, r6
100066be:	4266      	negs	r6, r4
100066c0:	4166      	adcs	r6, r4
			if (b != 0)
100066c2:	9c08      	ldr	r4, [sp, #32]
					if (*d != TILE_EMPTY) ok = False;
100066c4:	4276      	negs	r6, r6
100066c6:	4030      	ands	r0, r6
			if (b != 0)
100066c8:	2c00      	cmp	r4, #0
100066ca:	d000      	beq.n	100066ce <_Z11CheckBrickXaah+0x58a>
100066cc:	e104      	b.n	100068d8 <_Z11CheckBrickXaah+0x794>
100066ce:	2f00      	cmp	r7, #0
100066d0:	d000      	beq.n	100066d4 <_Z11CheckBrickXaah+0x590>
100066d2:	e10b      	b.n	100068ec <_Z11CheckBrickXaah+0x7a8>
100066d4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
100066d6:	2c00      	cmp	r4, #0
100066d8:	d000      	beq.n	100066dc <_Z11CheckBrickXaah+0x598>
100066da:	e111      	b.n	10006900 <_Z11CheckBrickXaah+0x7bc>
100066dc:	e117      	b.n	1000690e <_Z11CheckBrickXaah+0x7ca>
100066de:	2f00      	cmp	r7, #0
100066e0:	d003      	beq.n	100066ea <_Z11CheckBrickXaah+0x5a6>
				if ((y < 1) || (y >= MAPH-1))
100066e2:	2b11      	cmp	r3, #17
100066e4:	d980      	bls.n	100065e8 <_Z11CheckBrickXaah+0x4a4>
					ok = False;
100066e6:	2000      	movs	r0, #0
100066e8:	e68f      	b.n	1000640a <_Z11CheckBrickXaah+0x2c6>
			if (b != 0)
100066ea:	9c0d      	ldr	r4, [sp, #52]	; 0x34
100066ec:	2c00      	cmp	r4, #0
100066ee:	d100      	bne.n	100066f2 <_Z11CheckBrickXaah+0x5ae>
100066f0:	e68b      	b.n	1000640a <_Z11CheckBrickXaah+0x2c6>
				if ((y < 1) || (y >= MAPH-1))
100066f2:	2b11      	cmp	r3, #17
100066f4:	d987      	bls.n	10006606 <_Z11CheckBrickXaah+0x4c2>
					ok = False;
100066f6:	2000      	movs	r0, #0
100066f8:	e687      	b.n	1000640a <_Z11CheckBrickXaah+0x2c6>
				if ((y < 1) || (y >= MAPH-1))
100066fa:	1e58      	subs	r0, r3, #1
100066fc:	2811      	cmp	r0, #17
100066fe:	d900      	bls.n	10006702 <_Z11CheckBrickXaah+0x5be>
10006700:	e0ac      	b.n	1000685c <_Z11CheckBrickXaah+0x718>
					if (*d != TILE_EMPTY) ok = False;
10006702:	7810      	ldrb	r0, [r2, #0]
10006704:	3808      	subs	r0, #8
10006706:	0004      	movs	r4, r0
10006708:	4260      	negs	r0, r4
1000670a:	4160      	adcs	r0, r4
			if (b != 0)
1000670c:	9c05      	ldr	r4, [sp, #20]
					if (*d != TILE_EMPTY) ok = False;
1000670e:	b2c0      	uxtb	r0, r0
			if (b != 0)
10006710:	2c00      	cmp	r4, #0
10006712:	d000      	beq.n	10006716 <_Z11CheckBrickXaah+0x5d2>
10006714:	e0b6      	b.n	10006884 <_Z11CheckBrickXaah+0x740>
10006716:	9c07      	ldr	r4, [sp, #28]
10006718:	2c00      	cmp	r4, #0
1000671a:	d100      	bne.n	1000671e <_Z11CheckBrickXaah+0x5da>
1000671c:	e65e      	b.n	100063dc <_Z11CheckBrickXaah+0x298>
1000671e:	e0c0      	b.n	100068a2 <_Z11CheckBrickXaah+0x75e>
			b = *s++;
10006720:	9c09      	ldr	r4, [sp, #36]	; 0x24
10006722:	1e20      	subs	r0, r4, #0
			if (b != 0)
10006724:	d185      	bne.n	10006632 <_Z11CheckBrickXaah+0x4ee>
10006726:	4664      	mov	r4, ip
10006728:	2c00      	cmp	r4, #0
1000672a:	d02e      	beq.n	1000678a <_Z11CheckBrickXaah+0x646>
				if ((y < 1) || (y >= MAPH-1))
1000672c:	9c00      	ldr	r4, [sp, #0]
1000672e:	2c11      	cmp	r4, #17
10006730:	d883      	bhi.n	1000663a <_Z11CheckBrickXaah+0x4f6>
					if (*d != TILE_EMPTY) ok = False;
10006732:	2438      	movs	r4, #56	; 0x38
10006734:	5d14      	ldrb	r4, [r2, r4]
10006736:	46a2      	mov	sl, r4
10006738:	2408      	movs	r4, #8
1000673a:	4264      	negs	r4, r4
1000673c:	46a3      	mov	fp, r4
1000673e:	44da      	add	sl, fp
10006740:	4656      	mov	r6, sl
10006742:	4274      	negs	r4, r6
10006744:	4174      	adcs	r4, r6
10006746:	4264      	negs	r4, r4
10006748:	4020      	ands	r0, r4
			if (b != 0)
1000674a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
1000674c:	2c00      	cmp	r4, #0
1000674e:	d100      	bne.n	10006752 <_Z11CheckBrickXaah+0x60e>
10006750:	e67b      	b.n	1000644a <_Z11CheckBrickXaah+0x306>
					if (*d != TILE_EMPTY) ok = False;
10006752:	2439      	movs	r4, #57	; 0x39
10006754:	5d14      	ldrb	r4, [r2, r4]
10006756:	46a2      	mov	sl, r4
10006758:	2408      	movs	r4, #8
1000675a:	4264      	negs	r4, r4
1000675c:	46a3      	mov	fp, r4
1000675e:	44da      	add	sl, fp
10006760:	4656      	mov	r6, sl
10006762:	4274      	negs	r4, r6
10006764:	4174      	adcs	r4, r6
10006766:	4264      	negs	r4, r4
10006768:	4020      	ands	r0, r4
1000676a:	e66e      	b.n	1000644a <_Z11CheckBrickXaah+0x306>
1000676c:	2437      	movs	r4, #55	; 0x37
1000676e:	5d14      	ldrb	r4, [r2, r4]
10006770:	46a2      	mov	sl, r4
10006772:	2408      	movs	r4, #8
10006774:	4264      	negs	r4, r4
10006776:	46a3      	mov	fp, r4
10006778:	44da      	add	sl, fp
1000677a:	4656      	mov	r6, sl
1000677c:	4274      	negs	r4, r6
1000677e:	4174      	adcs	r4, r6
10006780:	4264      	negs	r4, r4
10006782:	4020      	ands	r0, r4
			if (b != 0)
10006784:	4664      	mov	r4, ip
10006786:	2c00      	cmp	r4, #0
10006788:	d1d3      	bne.n	10006732 <_Z11CheckBrickXaah+0x5ee>
1000678a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
1000678c:	2c00      	cmp	r4, #0
1000678e:	d100      	bne.n	10006792 <_Z11CheckBrickXaah+0x64e>
10006790:	e65b      	b.n	1000644a <_Z11CheckBrickXaah+0x306>
				if ((y < 1) || (y >= MAPH-1))
10006792:	9c00      	ldr	r4, [sp, #0]
10006794:	2c11      	cmp	r4, #17
10006796:	d9dc      	bls.n	10006752 <_Z11CheckBrickXaah+0x60e>
					ok = False;
10006798:	2000      	movs	r0, #0
1000679a:	e74f      	b.n	1000663c <_Z11CheckBrickXaah+0x4f8>
			if (b != 0)
1000679c:	7865      	ldrb	r5, [r4, #1]
					ok = False;
1000679e:	2000      	movs	r0, #0
			if (b != 0)
100067a0:	9505      	str	r5, [sp, #20]
100067a2:	2d00      	cmp	r5, #0
100067a4:	d100      	bne.n	100067a8 <_Z11CheckBrickXaah+0x664>
100067a6:	e4f3      	b.n	10006190 <_Z11CheckBrickXaah+0x4c>
100067a8:	e4ed      	b.n	10006186 <_Z11CheckBrickXaah+0x42>
				if ((y < 1) || (y >= MAPH-1))
100067aa:	9c01      	ldr	r4, [sp, #4]
100067ac:	2c11      	cmp	r4, #17
100067ae:	d900      	bls.n	100067b2 <_Z11CheckBrickXaah+0x66e>
100067b0:	e5f1      	b.n	10006396 <_Z11CheckBrickXaah+0x252>
100067b2:	e6b2      	b.n	1000651a <_Z11CheckBrickXaah+0x3d6>
100067b4:	9c00      	ldr	r4, [sp, #0]
100067b6:	2c11      	cmp	r4, #17
100067b8:	d800      	bhi.n	100067bc <_Z11CheckBrickXaah+0x678>
100067ba:	e5c3      	b.n	10006344 <_Z11CheckBrickXaah+0x200>
			b = *s++;
100067bc:	4648      	mov	r0, r9
100067be:	1d05      	adds	r5, r0, #4
100067c0:	78c0      	ldrb	r0, [r0, #3]
100067c2:	900e      	str	r0, [sp, #56]	; 0x38
			if (b != 0)
100067c4:	2800      	cmp	r0, #0
100067c6:	d100      	bne.n	100067ca <_Z11CheckBrickXaah+0x686>
100067c8:	e54d      	b.n	10006266 <_Z11CheckBrickXaah+0x122>
100067ca:	e54b      	b.n	10006264 <_Z11CheckBrickXaah+0x120>
				if ((y < 1) || (y >= MAPH-1))
100067cc:	2b11      	cmp	r3, #17
100067ce:	d800      	bhi.n	100067d2 <_Z11CheckBrickXaah+0x68e>
100067d0:	e513      	b.n	100061fa <_Z11CheckBrickXaah+0xb6>
			b = *s++;
100067d2:	1d28      	adds	r0, r5, #4
100067d4:	4681      	mov	r9, r0
100067d6:	78e8      	ldrb	r0, [r5, #3]
100067d8:	900d      	str	r0, [sp, #52]	; 0x34
			if (b != 0)
100067da:	2800      	cmp	r0, #0
100067dc:	d100      	bne.n	100067e0 <_Z11CheckBrickXaah+0x69c>
100067de:	e589      	b.n	100062f4 <_Z11CheckBrickXaah+0x1b0>
100067e0:	e587      	b.n	100062f2 <_Z11CheckBrickXaah+0x1ae>
					if (*d != TILE_EMPTY) ok = False;
100067e2:	7ed4      	ldrb	r4, [r2, #27]
100067e4:	46a2      	mov	sl, r4
100067e6:	2408      	movs	r4, #8
100067e8:	4264      	negs	r4, r4
100067ea:	46a3      	mov	fp, r4
100067ec:	44da      	add	sl, fp
100067ee:	4656      	mov	r6, sl
100067f0:	4274      	negs	r4, r6
100067f2:	4174      	adcs	r4, r6
100067f4:	4264      	negs	r4, r4
100067f6:	4020      	ands	r0, r4
			if (b != 0)
100067f8:	9c08      	ldr	r4, [sp, #32]
100067fa:	2c00      	cmp	r4, #0
100067fc:	d000      	beq.n	10006800 <_Z11CheckBrickXaah+0x6bc>
100067fe:	e6e5      	b.n	100065cc <_Z11CheckBrickXaah+0x488>
10006800:	2f00      	cmp	r7, #0
10006802:	d000      	beq.n	10006806 <_Z11CheckBrickXaah+0x6c2>
10006804:	e6f0      	b.n	100065e8 <_Z11CheckBrickXaah+0x4a4>
10006806:	9c0d      	ldr	r4, [sp, #52]	; 0x34
10006808:	2c00      	cmp	r4, #0
1000680a:	d000      	beq.n	1000680e <_Z11CheckBrickXaah+0x6ca>
1000680c:	e6fb      	b.n	10006606 <_Z11CheckBrickXaah+0x4c2>
1000680e:	e5fc      	b.n	1000640a <_Z11CheckBrickXaah+0x2c6>
10006810:	78ac      	ldrb	r4, [r5, #2]
10006812:	2c00      	cmp	r4, #0
10006814:	d100      	bne.n	10006818 <_Z11CheckBrickXaah+0x6d4>
10006816:	e628      	b.n	1000646a <_Z11CheckBrickXaah+0x326>
				if ((y < 1) || (y >= MAPH-1))
10006818:	9c01      	ldr	r4, [sp, #4]
1000681a:	2c11      	cmp	r4, #17
1000681c:	d900      	bls.n	10006820 <_Z11CheckBrickXaah+0x6dc>
1000681e:	e71e      	b.n	1000665e <_Z11CheckBrickXaah+0x51a>
					if (*d != TILE_EMPTY) ok = False;
10006820:	2453      	movs	r4, #83	; 0x53
10006822:	5d14      	ldrb	r4, [r2, r4]
10006824:	2c08      	cmp	r4, #8
10006826:	d000      	beq.n	1000682a <_Z11CheckBrickXaah+0x6e6>
10006828:	e719      	b.n	1000665e <_Z11CheckBrickXaah+0x51a>
			if (b != 0)
1000682a:	78ec      	ldrb	r4, [r5, #3]
1000682c:	2c00      	cmp	r4, #0
1000682e:	d100      	bne.n	10006832 <_Z11CheckBrickXaah+0x6ee>
10006830:	e627      	b.n	10006482 <_Z11CheckBrickXaah+0x33e>
10006832:	e621      	b.n	10006478 <_Z11CheckBrickXaah+0x334>
					if (*d != TILE_EMPTY) ok = False;
10006834:	2451      	movs	r4, #81	; 0x51
10006836:	5d14      	ldrb	r4, [r2, r4]
10006838:	46a2      	mov	sl, r4
1000683a:	2408      	movs	r4, #8
1000683c:	4264      	negs	r4, r4
1000683e:	46a3      	mov	fp, r4
10006840:	44da      	add	sl, fp
10006842:	4656      	mov	r6, sl
10006844:	4274      	negs	r4, r6
10006846:	4174      	adcs	r4, r6
10006848:	4264      	negs	r4, r4
1000684a:	4020      	ands	r0, r4
			if (b != 0)
1000684c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
1000684e:	2c00      	cmp	r4, #0
10006850:	d000      	beq.n	10006854 <_Z11CheckBrickXaah+0x710>
10006852:	e6fe      	b.n	10006652 <_Z11CheckBrickXaah+0x50e>
10006854:	78ac      	ldrb	r4, [r5, #2]
10006856:	2c00      	cmp	r4, #0
10006858:	d1e2      	bne.n	10006820 <_Z11CheckBrickXaah+0x6dc>
1000685a:	e7e6      	b.n	1000682a <_Z11CheckBrickXaah+0x6e6>
					ok = False;
1000685c:	2000      	movs	r0, #0
1000685e:	e5ad      	b.n	100063bc <_Z11CheckBrickXaah+0x278>
			if (b != 0)
10006860:	78a5      	ldrb	r5, [r4, #2]
10006862:	9507      	str	r5, [sp, #28]
10006864:	2d00      	cmp	r5, #0
10006866:	d100      	bne.n	1000686a <_Z11CheckBrickXaah+0x726>
10006868:	e49b      	b.n	100061a2 <_Z11CheckBrickXaah+0x5e>
1000686a:	e68d      	b.n	10006588 <_Z11CheckBrickXaah+0x444>
1000686c:	464c      	mov	r4, r9
1000686e:	78a4      	ldrb	r4, [r4, #2]
10006870:	46a4      	mov	ip, r4
10006872:	2c00      	cmp	r4, #0
10006874:	d100      	bne.n	10006878 <_Z11CheckBrickXaah+0x734>
10006876:	e56d      	b.n	10006354 <_Z11CheckBrickXaah+0x210>
10006878:	e564      	b.n	10006344 <_Z11CheckBrickXaah+0x200>
1000687a:	78af      	ldrb	r7, [r5, #2]
1000687c:	2f00      	cmp	r7, #0
1000687e:	d100      	bne.n	10006882 <_Z11CheckBrickXaah+0x73e>
10006880:	e4c6      	b.n	10006210 <_Z11CheckBrickXaah+0xcc>
10006882:	e4ba      	b.n	100061fa <_Z11CheckBrickXaah+0xb6>
					if (*d != TILE_EMPTY) ok = False;
10006884:	7854      	ldrb	r4, [r2, #1]
10006886:	46a2      	mov	sl, r4
10006888:	2408      	movs	r4, #8
1000688a:	4264      	negs	r4, r4
1000688c:	46a3      	mov	fp, r4
1000688e:	44da      	add	sl, fp
10006890:	4656      	mov	r6, sl
10006892:	4274      	negs	r4, r6
10006894:	4174      	adcs	r4, r6
10006896:	4264      	negs	r4, r4
10006898:	4020      	ands	r0, r4
			if (b != 0)
1000689a:	9c07      	ldr	r4, [sp, #28]
1000689c:	2c00      	cmp	r4, #0
1000689e:	d100      	bne.n	100068a2 <_Z11CheckBrickXaah+0x75e>
100068a0:	e59c      	b.n	100063dc <_Z11CheckBrickXaah+0x298>
					if (*d != TILE_EMPTY) ok = False;
100068a2:	7894      	ldrb	r4, [r2, #2]
100068a4:	46a2      	mov	sl, r4
100068a6:	2408      	movs	r4, #8
100068a8:	4264      	negs	r4, r4
100068aa:	46a3      	mov	fp, r4
100068ac:	44da      	add	sl, fp
100068ae:	4656      	mov	r6, sl
100068b0:	4274      	negs	r4, r6
100068b2:	4174      	adcs	r4, r6
100068b4:	4264      	negs	r4, r4
100068b6:	4020      	ands	r0, r4
			if (b != 0)
100068b8:	9c06      	ldr	r4, [sp, #24]
100068ba:	2c00      	cmp	r4, #0
100068bc:	d100      	bne.n	100068c0 <_Z11CheckBrickXaah+0x77c>
100068be:	e595      	b.n	100063ec <_Z11CheckBrickXaah+0x2a8>
					if (*d != TILE_EMPTY) ok = False;
100068c0:	78d4      	ldrb	r4, [r2, #3]
100068c2:	46a2      	mov	sl, r4
100068c4:	2408      	movs	r4, #8
100068c6:	4264      	negs	r4, r4
100068c8:	46a3      	mov	fp, r4
100068ca:	44da      	add	sl, fp
100068cc:	4656      	mov	r6, sl
100068ce:	4274      	negs	r4, r6
100068d0:	4174      	adcs	r4, r6
100068d2:	4264      	negs	r4, r4
100068d4:	4020      	ands	r0, r4
100068d6:	e589      	b.n	100063ec <_Z11CheckBrickXaah+0x2a8>
100068d8:	7f16      	ldrb	r6, [r2, #28]
100068da:	3e08      	subs	r6, #8
100068dc:	0034      	movs	r4, r6
100068de:	4266      	negs	r6, r4
100068e0:	4166      	adcs	r6, r4
100068e2:	4276      	negs	r6, r6
100068e4:	4030      	ands	r0, r6
			if (b != 0)
100068e6:	2f00      	cmp	r7, #0
100068e8:	d100      	bne.n	100068ec <_Z11CheckBrickXaah+0x7a8>
100068ea:	e233      	b.n	10006d54 <_Z11CheckBrickXaah+0xc10>
					if (*d != TILE_EMPTY) ok = False;
100068ec:	7f56      	ldrb	r6, [r2, #29]
100068ee:	3e08      	subs	r6, #8
100068f0:	0034      	movs	r4, r6
100068f2:	4266      	negs	r6, r4
100068f4:	4166      	adcs	r6, r4
			if (b != 0)
100068f6:	9c0d      	ldr	r4, [sp, #52]	; 0x34
					if (*d != TILE_EMPTY) ok = False;
100068f8:	4276      	negs	r6, r6
100068fa:	4030      	ands	r0, r6
			if (b != 0)
100068fc:	2c00      	cmp	r4, #0
100068fe:	d006      	beq.n	1000690e <_Z11CheckBrickXaah+0x7ca>
					if (*d != TILE_EMPTY) ok = False;
10006900:	7f96      	ldrb	r6, [r2, #30]
10006902:	3e08      	subs	r6, #8
10006904:	0034      	movs	r4, r6
10006906:	4266      	negs	r6, r4
10006908:	4166      	adcs	r6, r4
1000690a:	4276      	negs	r6, r6
1000690c:	4030      	ands	r0, r6
			if (b != 0)
1000690e:	4644      	mov	r4, r8
10006910:	2c00      	cmp	r4, #0
10006912:	d100      	bne.n	10006916 <_Z11CheckBrickXaah+0x7d2>
10006914:	e202      	b.n	10006d1c <_Z11CheckBrickXaah+0xbd8>
				if ((y < 1) || (y >= MAPH-1))
10006916:	9c00      	ldr	r4, [sp, #0]
10006918:	2c11      	cmp	r4, #17
1000691a:	d900      	bls.n	1000691e <_Z11CheckBrickXaah+0x7da>
1000691c:	e262      	b.n	10006de4 <_Z11CheckBrickXaah+0xca0>
					if (*d != TILE_EMPTY) ok = False;
1000691e:	2636      	movs	r6, #54	; 0x36
10006920:	5d96      	ldrb	r6, [r2, r6]
10006922:	3e08      	subs	r6, #8
10006924:	0034      	movs	r4, r6
10006926:	4266      	negs	r6, r4
10006928:	4166      	adcs	r6, r4
			if (b != 0)
1000692a:	9c09      	ldr	r4, [sp, #36]	; 0x24
					if (*d != TILE_EMPTY) ok = False;
1000692c:	4276      	negs	r6, r6
1000692e:	4030      	ands	r0, r6
			if (b != 0)
10006930:	2c00      	cmp	r4, #0
10006932:	d109      	bne.n	10006948 <_Z11CheckBrickXaah+0x804>
10006934:	4664      	mov	r4, ip
10006936:	2c00      	cmp	r4, #0
10006938:	d112      	bne.n	10006960 <_Z11CheckBrickXaah+0x81c>
1000693a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
1000693c:	2c00      	cmp	r4, #0
1000693e:	d11a      	bne.n	10006976 <_Z11CheckBrickXaah+0x832>
10006940:	e021      	b.n	10006986 <_Z11CheckBrickXaah+0x842>
10006942:	46c0      	nop			; (mov r8, r8)
10006944:	2000327c 	.word	0x2000327c
					if (*d != TILE_EMPTY) ok = False;
10006948:	2637      	movs	r6, #55	; 0x37
1000694a:	5d96      	ldrb	r6, [r2, r6]
1000694c:	3e08      	subs	r6, #8
1000694e:	0034      	movs	r4, r6
10006950:	4266      	negs	r6, r4
10006952:	4166      	adcs	r6, r4
			if (b != 0)
10006954:	4664      	mov	r4, ip
					if (*d != TILE_EMPTY) ok = False;
10006956:	4276      	negs	r6, r6
10006958:	4030      	ands	r0, r6
			if (b != 0)
1000695a:	2c00      	cmp	r4, #0
1000695c:	d100      	bne.n	10006960 <_Z11CheckBrickXaah+0x81c>
1000695e:	e1e7      	b.n	10006d30 <_Z11CheckBrickXaah+0xbec>
					if (*d != TILE_EMPTY) ok = False;
10006960:	2638      	movs	r6, #56	; 0x38
10006962:	5d96      	ldrb	r6, [r2, r6]
10006964:	3e08      	subs	r6, #8
10006966:	0034      	movs	r4, r6
10006968:	4266      	negs	r6, r4
1000696a:	4166      	adcs	r6, r4
			if (b != 0)
1000696c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
					if (*d != TILE_EMPTY) ok = False;
1000696e:	4276      	negs	r6, r6
10006970:	4030      	ands	r0, r6
			if (b != 0)
10006972:	2c00      	cmp	r4, #0
10006974:	d007      	beq.n	10006986 <_Z11CheckBrickXaah+0x842>
					if (*d != TILE_EMPTY) ok = False;
10006976:	2639      	movs	r6, #57	; 0x39
10006978:	5d96      	ldrb	r6, [r2, r6]
1000697a:	3e08      	subs	r6, #8
1000697c:	0034      	movs	r4, r6
1000697e:	4266      	negs	r6, r4
10006980:	4166      	adcs	r6, r4
10006982:	4276      	negs	r6, r6
10006984:	4030      	ands	r0, r6
			if (b != 0)
10006986:	464c      	mov	r4, r9
10006988:	2c00      	cmp	r4, #0
1000698a:	d100      	bne.n	1000698e <_Z11CheckBrickXaah+0x84a>
1000698c:	e1b4      	b.n	10006cf8 <_Z11CheckBrickXaah+0xbb4>
				if ((y < 1) || (y >= MAPH-1))
1000698e:	9c01      	ldr	r4, [sp, #4]
10006990:	2c11      	cmp	r4, #17
10006992:	d900      	bls.n	10006996 <_Z11CheckBrickXaah+0x852>
10006994:	e196      	b.n	10006cc4 <_Z11CheckBrickXaah+0xb80>
					if (*d != TILE_EMPTY) ok = False;
10006996:	2651      	movs	r6, #81	; 0x51
10006998:	5d96      	ldrb	r6, [r2, r6]
1000699a:	3e08      	subs	r6, #8
1000699c:	0034      	movs	r4, r6
1000699e:	4266      	negs	r6, r4
100069a0:	4166      	adcs	r6, r4
			if (b != 0)
100069a2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
					if (*d != TILE_EMPTY) ok = False;
100069a4:	4276      	negs	r6, r6
100069a6:	4030      	ands	r0, r6
			if (b != 0)
100069a8:	2c00      	cmp	r4, #0
100069aa:	d000      	beq.n	100069ae <_Z11CheckBrickXaah+0x86a>
100069ac:	e1ac      	b.n	10006d08 <_Z11CheckBrickXaah+0xbc4>
100069ae:	78ae      	ldrb	r6, [r5, #2]
100069b0:	2e00      	cmp	r6, #0
100069b2:	d100      	bne.n	100069b6 <_Z11CheckBrickXaah+0x872>
100069b4:	e17c      	b.n	10006cb0 <_Z11CheckBrickXaah+0xb6c>
					if (*d != TILE_EMPTY) ok = False;
100069b6:	2653      	movs	r6, #83	; 0x53
100069b8:	5d96      	ldrb	r6, [r2, r6]
100069ba:	2e08      	cmp	r6, #8
100069bc:	d100      	bne.n	100069c0 <_Z11CheckBrickXaah+0x87c>
100069be:	e177      	b.n	10006cb0 <_Z11CheckBrickXaah+0xb6c>
	if (CheckBrickSave(x-2, y, brick)) return True;
100069c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	u8* d = &Board[x + y*MAPW];
100069c2:	48cb      	ldr	r0, [pc, #812]	; (10006cf0 <_Z11CheckBrickXaah+0xbac>)
	if (CheckBrickSave(x-2, y, brick)) return True;
100069c4:	3a02      	subs	r2, #2
100069c6:	b252      	sxtb	r2, r2
100069c8:	4693      	mov	fp, r2
	u8* d = &Board[x + y*MAPW];
100069ca:	4682      	mov	sl, r0
100069cc:	9a02      	ldr	r2, [sp, #8]
	Bool ok = True;
100069ce:	2001      	movs	r0, #1
	u8* d = &Board[x + y*MAPW];
100069d0:	445a      	add	r2, fp
100069d2:	4492      	add	sl, r2
			if (b != 0)
100069d4:	9a03      	ldr	r2, [sp, #12]
100069d6:	2a00      	cmp	r2, #0
100069d8:	d100      	bne.n	100069dc <_Z11CheckBrickXaah+0x898>
100069da:	e1e7      	b.n	10006dac <_Z11CheckBrickXaah+0xc68>
				if ((y < 1) || (y >= MAPH-1))
100069dc:	1e5a      	subs	r2, r3, #1
100069de:	2a11      	cmp	r2, #17
100069e0:	d900      	bls.n	100069e4 <_Z11CheckBrickXaah+0x8a0>
100069e2:	e1e2      	b.n	10006daa <_Z11CheckBrickXaah+0xc66>
					if (*d != TILE_EMPTY) ok = False;
100069e4:	4652      	mov	r2, sl
100069e6:	7810      	ldrb	r0, [r2, #0]
100069e8:	3808      	subs	r0, #8
100069ea:	4242      	negs	r2, r0
100069ec:	4150      	adcs	r0, r2
			if (b != 0)
100069ee:	9a05      	ldr	r2, [sp, #20]
					if (*d != TILE_EMPTY) ok = False;
100069f0:	b2c0      	uxtb	r0, r0
			if (b != 0)
100069f2:	2a00      	cmp	r2, #0
100069f4:	d100      	bne.n	100069f8 <_Z11CheckBrickXaah+0x8b4>
100069f6:	e12e      	b.n	10006c56 <_Z11CheckBrickXaah+0xb12>
					if (*d != TILE_EMPTY) ok = False;
100069f8:	4652      	mov	r2, sl
100069fa:	7852      	ldrb	r2, [r2, #1]
100069fc:	3a08      	subs	r2, #8
100069fe:	4256      	negs	r6, r2
10006a00:	4172      	adcs	r2, r6
10006a02:	4252      	negs	r2, r2
10006a04:	4010      	ands	r0, r2
			if (b != 0)
10006a06:	9a07      	ldr	r2, [sp, #28]
10006a08:	2a00      	cmp	r2, #0
10006a0a:	d000      	beq.n	10006a0e <_Z11CheckBrickXaah+0x8ca>
10006a0c:	e127      	b.n	10006c5e <_Z11CheckBrickXaah+0xb1a>
10006a0e:	9a06      	ldr	r2, [sp, #24]
10006a10:	2a00      	cmp	r2, #0
10006a12:	d004      	beq.n	10006a1e <_Z11CheckBrickXaah+0x8da>
				if ((y < 1) || (y >= MAPH-1))
10006a14:	1e5a      	subs	r2, r3, #1
10006a16:	2a11      	cmp	r2, #17
10006a18:	d800      	bhi.n	10006a1c <_Z11CheckBrickXaah+0x8d8>
10006a1a:	e12b      	b.n	10006c74 <_Z11CheckBrickXaah+0xb30>
					ok = False;
10006a1c:	2000      	movs	r0, #0
			if (b != 0)
10006a1e:	9a04      	ldr	r2, [sp, #16]
10006a20:	2a00      	cmp	r2, #0
10006a22:	d01a      	beq.n	10006a5a <_Z11CheckBrickXaah+0x916>
				if ((y < 1) || (y >= MAPH-1))
10006a24:	2b11      	cmp	r3, #17
10006a26:	d900      	bls.n	10006a2a <_Z11CheckBrickXaah+0x8e6>
10006a28:	e12c      	b.n	10006c84 <_Z11CheckBrickXaah+0xb40>
					if (*d != TILE_EMPTY) ok = False;
10006a2a:	4652      	mov	r2, sl
10006a2c:	7ed2      	ldrb	r2, [r2, #27]
10006a2e:	3a08      	subs	r2, #8
10006a30:	4256      	negs	r6, r2
10006a32:	4172      	adcs	r2, r6
10006a34:	4252      	negs	r2, r2
10006a36:	4010      	ands	r0, r2
			if (b != 0)
10006a38:	9a08      	ldr	r2, [sp, #32]
10006a3a:	2a00      	cmp	r2, #0
10006a3c:	d114      	bne.n	10006a68 <_Z11CheckBrickXaah+0x924>
10006a3e:	2f00      	cmp	r7, #0
10006a40:	d000      	beq.n	10006a44 <_Z11CheckBrickXaah+0x900>
10006a42:	e129      	b.n	10006c98 <_Z11CheckBrickXaah+0xb54>
10006a44:	9a0d      	ldr	r2, [sp, #52]	; 0x34
10006a46:	2a00      	cmp	r2, #0
10006a48:	d01e      	beq.n	10006a88 <_Z11CheckBrickXaah+0x944>
					if (*d != TILE_EMPTY) ok = False;
10006a4a:	4652      	mov	r2, sl
10006a4c:	7f92      	ldrb	r2, [r2, #30]
10006a4e:	3a08      	subs	r2, #8
10006a50:	4256      	negs	r6, r2
10006a52:	4172      	adcs	r2, r6
10006a54:	4252      	negs	r2, r2
10006a56:	4010      	ands	r0, r2
10006a58:	e016      	b.n	10006a88 <_Z11CheckBrickXaah+0x944>
			if (b != 0)
10006a5a:	9a08      	ldr	r2, [sp, #32]
10006a5c:	2a00      	cmp	r2, #0
10006a5e:	d100      	bne.n	10006a62 <_Z11CheckBrickXaah+0x91e>
10006a60:	e114      	b.n	10006c8c <_Z11CheckBrickXaah+0xb48>
				if ((y < 1) || (y >= MAPH-1))
10006a62:	2b11      	cmp	r3, #17
10006a64:	d900      	bls.n	10006a68 <_Z11CheckBrickXaah+0x924>
10006a66:	e1d2      	b.n	10006e0e <_Z11CheckBrickXaah+0xcca>
					if (*d != TILE_EMPTY) ok = False;
10006a68:	4652      	mov	r2, sl
10006a6a:	7f12      	ldrb	r2, [r2, #28]
10006a6c:	3a08      	subs	r2, #8
10006a6e:	4256      	negs	r6, r2
10006a70:	4172      	adcs	r2, r6
10006a72:	4252      	negs	r2, r2
10006a74:	4010      	ands	r0, r2
			if (b != 0)
10006a76:	2f00      	cmp	r7, #0
10006a78:	d000      	beq.n	10006a7c <_Z11CheckBrickXaah+0x938>
10006a7a:	e10d      	b.n	10006c98 <_Z11CheckBrickXaah+0xb54>
10006a7c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
10006a7e:	2a00      	cmp	r2, #0
10006a80:	d002      	beq.n	10006a88 <_Z11CheckBrickXaah+0x944>
				if ((y < 1) || (y >= MAPH-1))
10006a82:	2b11      	cmp	r3, #17
10006a84:	d9e1      	bls.n	10006a4a <_Z11CheckBrickXaah+0x906>
					ok = False;
10006a86:	2000      	movs	r0, #0
			if (b != 0)
10006a88:	4642      	mov	r2, r8
10006a8a:	2a00      	cmp	r2, #0
10006a8c:	d01e      	beq.n	10006acc <_Z11CheckBrickXaah+0x988>
				if ((y < 1) || (y >= MAPH-1))
10006a8e:	9a00      	ldr	r2, [sp, #0]
10006a90:	2a11      	cmp	r2, #17
10006a92:	d900      	bls.n	10006a96 <_Z11CheckBrickXaah+0x952>
10006a94:	e0c6      	b.n	10006c24 <_Z11CheckBrickXaah+0xae0>
					if (*d != TILE_EMPTY) ok = False;
10006a96:	2236      	movs	r2, #54	; 0x36
10006a98:	4654      	mov	r4, sl
10006a9a:	5ca2      	ldrb	r2, [r4, r2]
10006a9c:	3a08      	subs	r2, #8
10006a9e:	4256      	negs	r6, r2
10006aa0:	4172      	adcs	r2, r6
10006aa2:	4252      	negs	r2, r2
10006aa4:	4010      	ands	r0, r2
			if (b != 0)
10006aa6:	9a09      	ldr	r2, [sp, #36]	; 0x24
10006aa8:	2a00      	cmp	r2, #0
10006aaa:	d117      	bne.n	10006adc <_Z11CheckBrickXaah+0x998>
10006aac:	4662      	mov	r2, ip
10006aae:	2a00      	cmp	r2, #0
10006ab0:	d000      	beq.n	10006ab4 <_Z11CheckBrickXaah+0x970>
10006ab2:	e0c3      	b.n	10006c3c <_Z11CheckBrickXaah+0xaf8>
10006ab4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
10006ab6:	2a00      	cmp	r2, #0
10006ab8:	d023      	beq.n	10006b02 <_Z11CheckBrickXaah+0x9be>
					if (*d != TILE_EMPTY) ok = False;
10006aba:	2239      	movs	r2, #57	; 0x39
10006abc:	4654      	mov	r4, sl
10006abe:	5ca2      	ldrb	r2, [r4, r2]
10006ac0:	3a08      	subs	r2, #8
10006ac2:	4256      	negs	r6, r2
10006ac4:	4172      	adcs	r2, r6
10006ac6:	4252      	negs	r2, r2
10006ac8:	4010      	ands	r0, r2
10006aca:	e01a      	b.n	10006b02 <_Z11CheckBrickXaah+0x9be>
			if (b != 0)
10006acc:	9a09      	ldr	r2, [sp, #36]	; 0x24
10006ace:	2a00      	cmp	r2, #0
10006ad0:	d100      	bne.n	10006ad4 <_Z11CheckBrickXaah+0x990>
10006ad2:	e0ab      	b.n	10006c2c <_Z11CheckBrickXaah+0xae8>
				if ((y < 1) || (y >= MAPH-1))
10006ad4:	9a00      	ldr	r2, [sp, #0]
10006ad6:	2a11      	cmp	r2, #17
10006ad8:	d900      	bls.n	10006adc <_Z11CheckBrickXaah+0x998>
10006ada:	e19c      	b.n	10006e16 <_Z11CheckBrickXaah+0xcd2>
					if (*d != TILE_EMPTY) ok = False;
10006adc:	2237      	movs	r2, #55	; 0x37
10006ade:	4654      	mov	r4, sl
10006ae0:	5ca2      	ldrb	r2, [r4, r2]
10006ae2:	3a08      	subs	r2, #8
10006ae4:	4256      	negs	r6, r2
10006ae6:	4172      	adcs	r2, r6
10006ae8:	4252      	negs	r2, r2
10006aea:	4010      	ands	r0, r2
			if (b != 0)
10006aec:	4662      	mov	r2, ip
10006aee:	2a00      	cmp	r2, #0
10006af0:	d000      	beq.n	10006af4 <_Z11CheckBrickXaah+0x9b0>
10006af2:	e0a3      	b.n	10006c3c <_Z11CheckBrickXaah+0xaf8>
10006af4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
10006af6:	2a00      	cmp	r2, #0
10006af8:	d003      	beq.n	10006b02 <_Z11CheckBrickXaah+0x9be>
				if ((y < 1) || (y >= MAPH-1))
10006afa:	9a00      	ldr	r2, [sp, #0]
10006afc:	2a11      	cmp	r2, #17
10006afe:	d9dc      	bls.n	10006aba <_Z11CheckBrickXaah+0x976>
					ok = False;
10006b00:	2000      	movs	r0, #0
			if (b != 0)
10006b02:	464a      	mov	r2, r9
10006b04:	2a00      	cmp	r2, #0
10006b06:	d100      	bne.n	10006b0a <_Z11CheckBrickXaah+0x9c6>
10006b08:	e178      	b.n	10006dfc <_Z11CheckBrickXaah+0xcb8>
				if ((y < 1) || (y >= MAPH-1))
10006b0a:	9a01      	ldr	r2, [sp, #4]
10006b0c:	2a11      	cmp	r2, #17
10006b0e:	d900      	bls.n	10006b12 <_Z11CheckBrickXaah+0x9ce>
10006b10:	e238      	b.n	10006f84 <_Z11CheckBrickXaah+0xe40>
					if (*d != TILE_EMPTY) ok = False;
10006b12:	2251      	movs	r2, #81	; 0x51
10006b14:	4654      	mov	r4, sl
10006b16:	5ca2      	ldrb	r2, [r4, r2]
10006b18:	3a08      	subs	r2, #8
10006b1a:	4256      	negs	r6, r2
10006b1c:	4172      	adcs	r2, r6
10006b1e:	4252      	negs	r2, r2
10006b20:	4010      	ands	r0, r2
			if (b != 0)
10006b22:	9a0a      	ldr	r2, [sp, #40]	; 0x28
10006b24:	2a00      	cmp	r2, #0
10006b26:	d100      	bne.n	10006b2a <_Z11CheckBrickXaah+0x9e6>
10006b28:	e282      	b.n	10007030 <_Z11CheckBrickXaah+0xeec>
					if (*d != TILE_EMPTY) ok = False;
10006b2a:	2252      	movs	r2, #82	; 0x52
10006b2c:	4654      	mov	r4, sl
10006b2e:	5ca2      	ldrb	r2, [r4, r2]
10006b30:	2a08      	cmp	r2, #8
10006b32:	d100      	bne.n	10006b36 <_Z11CheckBrickXaah+0x9f2>
10006b34:	e28c      	b.n	10007050 <_Z11CheckBrickXaah+0xf0c>
	return CheckBrickSave(x+2, y, brick);
10006b36:	9e0c      	ldr	r6, [sp, #48]	; 0x30
	u8* d = &Board[x + y*MAPW];
10006b38:	486d      	ldr	r0, [pc, #436]	; (10006cf0 <_Z11CheckBrickXaah+0xbac>)
	return CheckBrickSave(x+2, y, brick);
10006b3a:	3602      	adds	r6, #2
10006b3c:	b272      	sxtb	r2, r6
10006b3e:	4693      	mov	fp, r2
	u8* d = &Board[x + y*MAPW];
10006b40:	4682      	mov	sl, r0
10006b42:	9a02      	ldr	r2, [sp, #8]
			if (b != 0)
10006b44:	9803      	ldr	r0, [sp, #12]
	u8* d = &Board[x + y*MAPW];
10006b46:	445a      	add	r2, fp
10006b48:	4452      	add	r2, sl
			if (b != 0)
10006b4a:	2800      	cmp	r0, #0
10006b4c:	d000      	beq.n	10006b50 <_Z11CheckBrickXaah+0xa0c>
10006b4e:	e17d      	b.n	10006e4c <_Z11CheckBrickXaah+0xd08>
	Bool ok = True;
10006b50:	3001      	adds	r0, #1
			if (b != 0)
10006b52:	9c05      	ldr	r4, [sp, #20]
10006b54:	2c00      	cmp	r4, #0
10006b56:	d004      	beq.n	10006b62 <_Z11CheckBrickXaah+0xa1e>
				if ((y < 1) || (y >= MAPH-1))
10006b58:	1e5e      	subs	r6, r3, #1
10006b5a:	2e11      	cmp	r6, #17
10006b5c:	d800      	bhi.n	10006b60 <_Z11CheckBrickXaah+0xa1c>
10006b5e:	e26b      	b.n	10007038 <_Z11CheckBrickXaah+0xef4>
					ok = False;
10006b60:	2000      	movs	r0, #0
			if (b != 0)
10006b62:	9c07      	ldr	r4, [sp, #28]
10006b64:	2c00      	cmp	r4, #0
10006b66:	d004      	beq.n	10006b72 <_Z11CheckBrickXaah+0xa2e>
				if ((y < 1) || (y >= MAPH-1))
10006b68:	1e5e      	subs	r6, r3, #1
10006b6a:	2e11      	cmp	r6, #17
10006b6c:	d800      	bhi.n	10006b70 <_Z11CheckBrickXaah+0xa2c>
10006b6e:	e17e      	b.n	10006e6e <_Z11CheckBrickXaah+0xd2a>
					ok = False;
10006b70:	2000      	movs	r0, #0
			if (b != 0)
10006b72:	9c06      	ldr	r4, [sp, #24]
10006b74:	2c00      	cmp	r4, #0
10006b76:	d004      	beq.n	10006b82 <_Z11CheckBrickXaah+0xa3e>
				if ((y < 1) || (y >= MAPH-1))
10006b78:	1e5e      	subs	r6, r3, #1
10006b7a:	2e11      	cmp	r6, #17
10006b7c:	d800      	bhi.n	10006b80 <_Z11CheckBrickXaah+0xa3c>
10006b7e:	e181      	b.n	10006e84 <_Z11CheckBrickXaah+0xd40>
					ok = False;
10006b80:	2000      	movs	r0, #0
			if (b != 0)
10006b82:	9c04      	ldr	r4, [sp, #16]
10006b84:	2c00      	cmp	r4, #0
10006b86:	d100      	bne.n	10006b8a <_Z11CheckBrickXaah+0xa46>
10006b88:	e184      	b.n	10006e94 <_Z11CheckBrickXaah+0xd50>
				if ((y < 1) || (y >= MAPH-1))
10006b8a:	2b11      	cmp	r3, #17
10006b8c:	d900      	bls.n	10006b90 <_Z11CheckBrickXaah+0xa4c>
10006b8e:	e1a0      	b.n	10006ed2 <_Z11CheckBrickXaah+0xd8e>
					if (*d != TILE_EMPTY) ok = False;
10006b90:	7ed6      	ldrb	r6, [r2, #27]
10006b92:	3e08      	subs	r6, #8
10006b94:	0034      	movs	r4, r6
10006b96:	4266      	negs	r6, r4
10006b98:	4166      	adcs	r6, r4
			if (b != 0)
10006b9a:	9c08      	ldr	r4, [sp, #32]
					if (*d != TILE_EMPTY) ok = False;
10006b9c:	4276      	negs	r6, r6
10006b9e:	4030      	ands	r0, r6
			if (b != 0)
10006ba0:	2c00      	cmp	r4, #0
10006ba2:	d000      	beq.n	10006ba6 <_Z11CheckBrickXaah+0xa62>
10006ba4:	e17b      	b.n	10006e9e <_Z11CheckBrickXaah+0xd5a>
10006ba6:	2f00      	cmp	r7, #0
10006ba8:	d000      	beq.n	10006bac <_Z11CheckBrickXaah+0xa68>
10006baa:	e181      	b.n	10006eb0 <_Z11CheckBrickXaah+0xd6c>
10006bac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
10006bae:	2b00      	cmp	r3, #0
10006bb0:	d000      	beq.n	10006bb4 <_Z11CheckBrickXaah+0xa70>
10006bb2:	e187      	b.n	10006ec4 <_Z11CheckBrickXaah+0xd80>
10006bb4:	4643      	mov	r3, r8
10006bb6:	2b00      	cmp	r3, #0
10006bb8:	d100      	bne.n	10006bbc <_Z11CheckBrickXaah+0xa78>
10006bba:	e19a      	b.n	10006ef2 <_Z11CheckBrickXaah+0xdae>
				if ((y < 1) || (y >= MAPH-1))
10006bbc:	9b00      	ldr	r3, [sp, #0]
10006bbe:	2b11      	cmp	r3, #17
10006bc0:	d900      	bls.n	10006bc4 <_Z11CheckBrickXaah+0xa80>
10006bc2:	e1b9      	b.n	10006f38 <_Z11CheckBrickXaah+0xdf4>
					if (*d != TILE_EMPTY) ok = False;
10006bc4:	2336      	movs	r3, #54	; 0x36
10006bc6:	5cd3      	ldrb	r3, [r2, r3]
10006bc8:	3b08      	subs	r3, #8
10006bca:	425e      	negs	r6, r3
10006bcc:	4173      	adcs	r3, r6
10006bce:	425b      	negs	r3, r3
10006bd0:	4018      	ands	r0, r3
			if (b != 0)
10006bd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
10006bd4:	2b00      	cmp	r3, #0
10006bd6:	d000      	beq.n	10006bda <_Z11CheckBrickXaah+0xa96>
10006bd8:	e191      	b.n	10006efe <_Z11CheckBrickXaah+0xdba>
10006bda:	4663      	mov	r3, ip
10006bdc:	2b00      	cmp	r3, #0
10006bde:	d000      	beq.n	10006be2 <_Z11CheckBrickXaah+0xa9e>
10006be0:	e197      	b.n	10006f12 <_Z11CheckBrickXaah+0xdce>
10006be2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
10006be4:	2b00      	cmp	r3, #0
10006be6:	d000      	beq.n	10006bea <_Z11CheckBrickXaah+0xaa6>
10006be8:	e19e      	b.n	10006f28 <_Z11CheckBrickXaah+0xde4>
10006bea:	464b      	mov	r3, r9
10006bec:	2b00      	cmp	r3, #0
10006bee:	d100      	bne.n	10006bf2 <_Z11CheckBrickXaah+0xaae>
10006bf0:	e1b5      	b.n	10006f5e <_Z11CheckBrickXaah+0xe1a>
				if ((y < 1) || (y >= MAPH-1))
10006bf2:	9b01      	ldr	r3, [sp, #4]
10006bf4:	2b11      	cmp	r3, #17
10006bf6:	d800      	bhi.n	10006bfa <_Z11CheckBrickXaah+0xab6>
10006bf8:	e202      	b.n	10007000 <_Z11CheckBrickXaah+0xebc>
			if (b != 0)
10006bfa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10006bfc:	2b00      	cmp	r3, #0
10006bfe:	d10e      	bne.n	10006c1e <_Z11CheckBrickXaah+0xada>
			b = *s++;
10006c00:	78a8      	ldrb	r0, [r5, #2]
			if (b != 0)
10006c02:	2800      	cmp	r0, #0
10006c04:	d10b      	bne.n	10006c1e <_Z11CheckBrickXaah+0xada>
10006c06:	78eb      	ldrb	r3, [r5, #3]
10006c08:	2b00      	cmp	r3, #0
10006c0a:	d100      	bne.n	10006c0e <_Z11CheckBrickXaah+0xaca>
10006c0c:	e209      	b.n	10007022 <_Z11CheckBrickXaah+0xede>
				if ((y < 1) || (y >= MAPH-1))
10006c0e:	9b01      	ldr	r3, [sp, #4]
10006c10:	2b11      	cmp	r3, #17
10006c12:	d804      	bhi.n	10006c1e <_Z11CheckBrickXaah+0xada>
					if (*d != TILE_EMPTY) ok = False;
10006c14:	2354      	movs	r3, #84	; 0x54
10006c16:	5cd3      	ldrb	r3, [r2, r3]
10006c18:	2b08      	cmp	r3, #8
10006c1a:	d100      	bne.n	10006c1e <_Z11CheckBrickXaah+0xada>
10006c1c:	e201      	b.n	10007022 <_Z11CheckBrickXaah+0xede>
			if (b != 0)
10006c1e:	2000      	movs	r0, #0
10006c20:	f7ff fb4e 	bl	100062c0 <_Z11CheckBrickXaah+0x17c>
			b = *s++;
10006c24:	9a09      	ldr	r2, [sp, #36]	; 0x24
10006c26:	1e10      	subs	r0, r2, #0
			if (b != 0)
10006c28:	d000      	beq.n	10006c2c <_Z11CheckBrickXaah+0xae8>
10006c2a:	e0f4      	b.n	10006e16 <_Z11CheckBrickXaah+0xcd2>
10006c2c:	4662      	mov	r2, ip
10006c2e:	2a00      	cmp	r2, #0
10006c30:	d100      	bne.n	10006c34 <_Z11CheckBrickXaah+0xaf0>
10006c32:	e75f      	b.n	10006af4 <_Z11CheckBrickXaah+0x9b0>
				if ((y < 1) || (y >= MAPH-1))
10006c34:	9a00      	ldr	r2, [sp, #0]
10006c36:	2a11      	cmp	r2, #17
10006c38:	d900      	bls.n	10006c3c <_Z11CheckBrickXaah+0xaf8>
10006c3a:	e761      	b.n	10006b00 <_Z11CheckBrickXaah+0x9bc>
					if (*d != TILE_EMPTY) ok = False;
10006c3c:	2238      	movs	r2, #56	; 0x38
10006c3e:	4654      	mov	r4, sl
10006c40:	5ca2      	ldrb	r2, [r4, r2]
10006c42:	3a08      	subs	r2, #8
10006c44:	4256      	negs	r6, r2
10006c46:	4172      	adcs	r2, r6
10006c48:	4252      	negs	r2, r2
10006c4a:	4010      	ands	r0, r2
			if (b != 0)
10006c4c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
10006c4e:	2a00      	cmp	r2, #0
10006c50:	d000      	beq.n	10006c54 <_Z11CheckBrickXaah+0xb10>
10006c52:	e732      	b.n	10006aba <_Z11CheckBrickXaah+0x976>
10006c54:	e755      	b.n	10006b02 <_Z11CheckBrickXaah+0x9be>
10006c56:	9a07      	ldr	r2, [sp, #28]
10006c58:	2a00      	cmp	r2, #0
10006c5a:	d100      	bne.n	10006c5e <_Z11CheckBrickXaah+0xb1a>
10006c5c:	e6d7      	b.n	10006a0e <_Z11CheckBrickXaah+0x8ca>
					if (*d != TILE_EMPTY) ok = False;
10006c5e:	4652      	mov	r2, sl
10006c60:	7892      	ldrb	r2, [r2, #2]
10006c62:	3a08      	subs	r2, #8
10006c64:	4256      	negs	r6, r2
10006c66:	4172      	adcs	r2, r6
10006c68:	4252      	negs	r2, r2
10006c6a:	4010      	ands	r0, r2
			if (b != 0)
10006c6c:	9a06      	ldr	r2, [sp, #24]
10006c6e:	2a00      	cmp	r2, #0
10006c70:	d100      	bne.n	10006c74 <_Z11CheckBrickXaah+0xb30>
10006c72:	e6d4      	b.n	10006a1e <_Z11CheckBrickXaah+0x8da>
					if (*d != TILE_EMPTY) ok = False;
10006c74:	4652      	mov	r2, sl
10006c76:	78d2      	ldrb	r2, [r2, #3]
10006c78:	3a08      	subs	r2, #8
10006c7a:	4256      	negs	r6, r2
10006c7c:	4172      	adcs	r2, r6
10006c7e:	4252      	negs	r2, r2
10006c80:	4010      	ands	r0, r2
10006c82:	e6cc      	b.n	10006a1e <_Z11CheckBrickXaah+0x8da>
			b = *s++;
10006c84:	9a08      	ldr	r2, [sp, #32]
10006c86:	1e10      	subs	r0, r2, #0
			if (b != 0)
10006c88:	d000      	beq.n	10006c8c <_Z11CheckBrickXaah+0xb48>
10006c8a:	e0c0      	b.n	10006e0e <_Z11CheckBrickXaah+0xcca>
10006c8c:	2f00      	cmp	r7, #0
10006c8e:	d100      	bne.n	10006c92 <_Z11CheckBrickXaah+0xb4e>
10006c90:	e6f4      	b.n	10006a7c <_Z11CheckBrickXaah+0x938>
				if ((y < 1) || (y >= MAPH-1))
10006c92:	2b11      	cmp	r3, #17
10006c94:	d900      	bls.n	10006c98 <_Z11CheckBrickXaah+0xb54>
10006c96:	e6f6      	b.n	10006a86 <_Z11CheckBrickXaah+0x942>
					if (*d != TILE_EMPTY) ok = False;
10006c98:	4652      	mov	r2, sl
10006c9a:	7f52      	ldrb	r2, [r2, #29]
10006c9c:	3a08      	subs	r2, #8
10006c9e:	4256      	negs	r6, r2
10006ca0:	4172      	adcs	r2, r6
10006ca2:	4252      	negs	r2, r2
10006ca4:	4010      	ands	r0, r2
			if (b != 0)
10006ca6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
10006ca8:	2a00      	cmp	r2, #0
10006caa:	d000      	beq.n	10006cae <_Z11CheckBrickXaah+0xb6a>
10006cac:	e6cd      	b.n	10006a4a <_Z11CheckBrickXaah+0x906>
10006cae:	e6eb      	b.n	10006a88 <_Z11CheckBrickXaah+0x944>
10006cb0:	78ee      	ldrb	r6, [r5, #3]
10006cb2:	2e00      	cmp	r6, #0
10006cb4:	d115      	bne.n	10006ce2 <_Z11CheckBrickXaah+0xb9e>
	if (res)
10006cb6:	2800      	cmp	r0, #0
10006cb8:	d100      	bne.n	10006cbc <_Z11CheckBrickXaah+0xb78>
10006cba:	e681      	b.n	100069c0 <_Z11CheckBrickXaah+0x87c>
		BrickX = x;
10006cbc:	465a      	mov	r2, fp
10006cbe:	4b0d      	ldr	r3, [pc, #52]	; (10006cf4 <_Z11CheckBrickXaah+0xbb0>)
10006cc0:	f7ff faf8 	bl	100062b4 <_Z11CheckBrickXaah+0x170>
			if (b != 0)
10006cc4:	980a      	ldr	r0, [sp, #40]	; 0x28
10006cc6:	2800      	cmp	r0, #0
10006cc8:	d000      	beq.n	10006ccc <_Z11CheckBrickXaah+0xb88>
10006cca:	e679      	b.n	100069c0 <_Z11CheckBrickXaah+0x87c>
			b = *s++;
10006ccc:	78a8      	ldrb	r0, [r5, #2]
			if (b != 0)
10006cce:	2800      	cmp	r0, #0
10006cd0:	d000      	beq.n	10006cd4 <_Z11CheckBrickXaah+0xb90>
10006cd2:	e675      	b.n	100069c0 <_Z11CheckBrickXaah+0x87c>
10006cd4:	78ee      	ldrb	r6, [r5, #3]
10006cd6:	2e00      	cmp	r6, #0
10006cd8:	d0ed      	beq.n	10006cb6 <_Z11CheckBrickXaah+0xb72>
				if ((y < 1) || (y >= MAPH-1))
10006cda:	9c01      	ldr	r4, [sp, #4]
10006cdc:	2c11      	cmp	r4, #17
10006cde:	d900      	bls.n	10006ce2 <_Z11CheckBrickXaah+0xb9e>
10006ce0:	e66e      	b.n	100069c0 <_Z11CheckBrickXaah+0x87c>
					if (*d != TILE_EMPTY) ok = False;
10006ce2:	2654      	movs	r6, #84	; 0x54
10006ce4:	5d92      	ldrb	r2, [r2, r6]
10006ce6:	2a08      	cmp	r2, #8
10006ce8:	d000      	beq.n	10006cec <_Z11CheckBrickXaah+0xba8>
10006cea:	e669      	b.n	100069c0 <_Z11CheckBrickXaah+0x87c>
10006cec:	e7e3      	b.n	10006cb6 <_Z11CheckBrickXaah+0xb72>
10006cee:	46c0      	nop			; (mov r8, r8)
10006cf0:	2000327c 	.word	0x2000327c
10006cf4:	20012765 	.word	0x20012765
			if (b != 0)
10006cf8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
10006cfa:	2c00      	cmp	r4, #0
10006cfc:	d100      	bne.n	10006d00 <_Z11CheckBrickXaah+0xbbc>
10006cfe:	e08f      	b.n	10006e20 <_Z11CheckBrickXaah+0xcdc>
				if ((y < 1) || (y >= MAPH-1))
10006d00:	9c01      	ldr	r4, [sp, #4]
10006d02:	2c11      	cmp	r4, #17
10006d04:	d900      	bls.n	10006d08 <_Z11CheckBrickXaah+0xbc4>
10006d06:	e65b      	b.n	100069c0 <_Z11CheckBrickXaah+0x87c>
					if (*d != TILE_EMPTY) ok = False;
10006d08:	2652      	movs	r6, #82	; 0x52
10006d0a:	5d96      	ldrb	r6, [r2, r6]
10006d0c:	2e08      	cmp	r6, #8
10006d0e:	d000      	beq.n	10006d12 <_Z11CheckBrickXaah+0xbce>
10006d10:	e656      	b.n	100069c0 <_Z11CheckBrickXaah+0x87c>
			if (b != 0)
10006d12:	78ae      	ldrb	r6, [r5, #2]
10006d14:	2e00      	cmp	r6, #0
10006d16:	d000      	beq.n	10006d1a <_Z11CheckBrickXaah+0xbd6>
10006d18:	e64d      	b.n	100069b6 <_Z11CheckBrickXaah+0x872>
10006d1a:	e7db      	b.n	10006cd4 <_Z11CheckBrickXaah+0xb90>
10006d1c:	9c09      	ldr	r4, [sp, #36]	; 0x24
10006d1e:	2c00      	cmp	r4, #0
10006d20:	d063      	beq.n	10006dea <_Z11CheckBrickXaah+0xca6>
				if ((y < 1) || (y >= MAPH-1))
10006d22:	9c00      	ldr	r4, [sp, #0]
10006d24:	2c11      	cmp	r4, #17
10006d26:	d800      	bhi.n	10006d2a <_Z11CheckBrickXaah+0xbe6>
10006d28:	e60e      	b.n	10006948 <_Z11CheckBrickXaah+0x804>
			b = *s++;
10006d2a:	4660      	mov	r0, ip
			if (b != 0)
10006d2c:	2800      	cmp	r0, #0
10006d2e:	d107      	bne.n	10006d40 <_Z11CheckBrickXaah+0xbfc>
10006d30:	9c0e      	ldr	r4, [sp, #56]	; 0x38
10006d32:	2c00      	cmp	r4, #0
10006d34:	d100      	bne.n	10006d38 <_Z11CheckBrickXaah+0xbf4>
10006d36:	e626      	b.n	10006986 <_Z11CheckBrickXaah+0x842>
				if ((y < 1) || (y >= MAPH-1))
10006d38:	9c00      	ldr	r4, [sp, #0]
10006d3a:	2c11      	cmp	r4, #17
10006d3c:	d800      	bhi.n	10006d40 <_Z11CheckBrickXaah+0xbfc>
10006d3e:	e61a      	b.n	10006976 <_Z11CheckBrickXaah+0x832>
					ok = False;
10006d40:	2000      	movs	r0, #0
10006d42:	e620      	b.n	10006986 <_Z11CheckBrickXaah+0x842>
			if (b != 0)
10006d44:	9c08      	ldr	r4, [sp, #32]
10006d46:	2c00      	cmp	r4, #0
10006d48:	d045      	beq.n	10006dd6 <_Z11CheckBrickXaah+0xc92>
				if ((y < 1) || (y >= MAPH-1))
10006d4a:	2b11      	cmp	r3, #17
10006d4c:	d800      	bhi.n	10006d50 <_Z11CheckBrickXaah+0xc0c>
10006d4e:	e5c3      	b.n	100068d8 <_Z11CheckBrickXaah+0x794>
			b = *s++;
10006d50:	1e38      	subs	r0, r7, #0
			if (b != 0)
10006d52:	d106      	bne.n	10006d62 <_Z11CheckBrickXaah+0xc1e>
10006d54:	9c0d      	ldr	r4, [sp, #52]	; 0x34
10006d56:	2c00      	cmp	r4, #0
10006d58:	d100      	bne.n	10006d5c <_Z11CheckBrickXaah+0xc18>
10006d5a:	e5d8      	b.n	1000690e <_Z11CheckBrickXaah+0x7ca>
				if ((y < 1) || (y >= MAPH-1))
10006d5c:	2b11      	cmp	r3, #17
10006d5e:	d800      	bhi.n	10006d62 <_Z11CheckBrickXaah+0xc1e>
10006d60:	e5ce      	b.n	10006900 <_Z11CheckBrickXaah+0x7bc>
					ok = False;
10006d62:	2000      	movs	r0, #0
10006d64:	e5d3      	b.n	1000690e <_Z11CheckBrickXaah+0x7ca>
				if ((y < 1) || (y >= MAPH-1))
10006d66:	1e58      	subs	r0, r3, #1
10006d68:	2811      	cmp	r0, #17
10006d6a:	d862      	bhi.n	10006e32 <_Z11CheckBrickXaah+0xcee>
					if (*d != TILE_EMPTY) ok = False;
10006d6c:	7810      	ldrb	r0, [r2, #0]
			if (b != 0)
10006d6e:	9c05      	ldr	r4, [sp, #20]
					if (*d != TILE_EMPTY) ok = False;
10006d70:	3808      	subs	r0, #8
10006d72:	4246      	negs	r6, r0
10006d74:	4170      	adcs	r0, r6
10006d76:	b2c0      	uxtb	r0, r0
			if (b != 0)
10006d78:	2c00      	cmp	r4, #0
10006d7a:	d15c      	bne.n	10006e36 <_Z11CheckBrickXaah+0xcf2>
10006d7c:	9c07      	ldr	r4, [sp, #28]
10006d7e:	2c00      	cmp	r4, #0
10006d80:	d100      	bne.n	10006d84 <_Z11CheckBrickXaah+0xc40>
10006d82:	e48a      	b.n	1000669a <_Z11CheckBrickXaah+0x556>
					if (*d != TILE_EMPTY) ok = False;
10006d84:	7896      	ldrb	r6, [r2, #2]
10006d86:	3e08      	subs	r6, #8
10006d88:	0034      	movs	r4, r6
10006d8a:	4266      	negs	r6, r4
10006d8c:	4166      	adcs	r6, r4
			if (b != 0)
10006d8e:	9c06      	ldr	r4, [sp, #24]
					if (*d != TILE_EMPTY) ok = False;
10006d90:	4276      	negs	r6, r6
10006d92:	4030      	ands	r0, r6
			if (b != 0)
10006d94:	2c00      	cmp	r4, #0
10006d96:	d100      	bne.n	10006d9a <_Z11CheckBrickXaah+0xc56>
10006d98:	e487      	b.n	100066aa <_Z11CheckBrickXaah+0x566>
					if (*d != TILE_EMPTY) ok = False;
10006d9a:	78d6      	ldrb	r6, [r2, #3]
10006d9c:	3e08      	subs	r6, #8
10006d9e:	0034      	movs	r4, r6
10006da0:	4266      	negs	r6, r4
10006da2:	4166      	adcs	r6, r4
10006da4:	4276      	negs	r6, r6
10006da6:	4030      	ands	r0, r6
10006da8:	e47f      	b.n	100066aa <_Z11CheckBrickXaah+0x566>
					ok = False;
10006daa:	2000      	movs	r0, #0
			if (b != 0)
10006dac:	9a05      	ldr	r2, [sp, #20]
10006dae:	2a00      	cmp	r2, #0
10006db0:	d004      	beq.n	10006dbc <_Z11CheckBrickXaah+0xc78>
				if ((y < 1) || (y >= MAPH-1))
10006db2:	1e5a      	subs	r2, r3, #1
10006db4:	2a11      	cmp	r2, #17
10006db6:	d800      	bhi.n	10006dba <_Z11CheckBrickXaah+0xc76>
10006db8:	e61e      	b.n	100069f8 <_Z11CheckBrickXaah+0x8b4>
					ok = False;
10006dba:	2000      	movs	r0, #0
			if (b != 0)
10006dbc:	9a07      	ldr	r2, [sp, #28]
10006dbe:	2a00      	cmp	r2, #0
10006dc0:	d100      	bne.n	10006dc4 <_Z11CheckBrickXaah+0xc80>
10006dc2:	e624      	b.n	10006a0e <_Z11CheckBrickXaah+0x8ca>
				if ((y < 1) || (y >= MAPH-1))
10006dc4:	1e5a      	subs	r2, r3, #1
10006dc6:	2a11      	cmp	r2, #17
10006dc8:	d800      	bhi.n	10006dcc <_Z11CheckBrickXaah+0xc88>
10006dca:	e748      	b.n	10006c5e <_Z11CheckBrickXaah+0xb1a>
					ok = False;
10006dcc:	2000      	movs	r0, #0
10006dce:	e61e      	b.n	10006a0e <_Z11CheckBrickXaah+0x8ca>
			b = *s++;
10006dd0:	9c08      	ldr	r4, [sp, #32]
10006dd2:	1e20      	subs	r0, r4, #0
			if (b != 0)
10006dd4:	d1bc      	bne.n	10006d50 <_Z11CheckBrickXaah+0xc0c>
10006dd6:	2f00      	cmp	r7, #0
10006dd8:	d0bc      	beq.n	10006d54 <_Z11CheckBrickXaah+0xc10>
				if ((y < 1) || (y >= MAPH-1))
10006dda:	2b11      	cmp	r3, #17
10006ddc:	d800      	bhi.n	10006de0 <_Z11CheckBrickXaah+0xc9c>
10006dde:	e585      	b.n	100068ec <_Z11CheckBrickXaah+0x7a8>
					ok = False;
10006de0:	2000      	movs	r0, #0
10006de2:	e594      	b.n	1000690e <_Z11CheckBrickXaah+0x7ca>
			b = *s++;
10006de4:	9c09      	ldr	r4, [sp, #36]	; 0x24
10006de6:	1e20      	subs	r0, r4, #0
			if (b != 0)
10006de8:	d19f      	bne.n	10006d2a <_Z11CheckBrickXaah+0xbe6>
10006dea:	4664      	mov	r4, ip
10006dec:	2c00      	cmp	r4, #0
10006dee:	d09f      	beq.n	10006d30 <_Z11CheckBrickXaah+0xbec>
				if ((y < 1) || (y >= MAPH-1))
10006df0:	9c00      	ldr	r4, [sp, #0]
10006df2:	2c11      	cmp	r4, #17
10006df4:	d800      	bhi.n	10006df8 <_Z11CheckBrickXaah+0xcb4>
10006df6:	e5b3      	b.n	10006960 <_Z11CheckBrickXaah+0x81c>
					ok = False;
10006df8:	2000      	movs	r0, #0
10006dfa:	e5c4      	b.n	10006986 <_Z11CheckBrickXaah+0x842>
			if (b != 0)
10006dfc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
10006dfe:	2a00      	cmp	r2, #0
10006e00:	d100      	bne.n	10006e04 <_Z11CheckBrickXaah+0xcc0>
10006e02:	e0ce      	b.n	10006fa2 <_Z11CheckBrickXaah+0xe5e>
				if ((y < 1) || (y >= MAPH-1))
10006e04:	9a01      	ldr	r2, [sp, #4]
10006e06:	2a11      	cmp	r2, #17
10006e08:	d900      	bls.n	10006e0c <_Z11CheckBrickXaah+0xcc8>
10006e0a:	e694      	b.n	10006b36 <_Z11CheckBrickXaah+0x9f2>
10006e0c:	e68d      	b.n	10006b2a <_Z11CheckBrickXaah+0x9e6>
			b = *s++;
10006e0e:	1e38      	subs	r0, r7, #0
			if (b != 0)
10006e10:	d000      	beq.n	10006e14 <_Z11CheckBrickXaah+0xcd0>
10006e12:	e638      	b.n	10006a86 <_Z11CheckBrickXaah+0x942>
10006e14:	e632      	b.n	10006a7c <_Z11CheckBrickXaah+0x938>
			b = *s++;
10006e16:	4660      	mov	r0, ip
			if (b != 0)
10006e18:	2800      	cmp	r0, #0
10006e1a:	d000      	beq.n	10006e1e <_Z11CheckBrickXaah+0xcda>
10006e1c:	e670      	b.n	10006b00 <_Z11CheckBrickXaah+0x9bc>
10006e1e:	e669      	b.n	10006af4 <_Z11CheckBrickXaah+0x9b0>
10006e20:	78ae      	ldrb	r6, [r5, #2]
10006e22:	2e00      	cmp	r6, #0
10006e24:	d100      	bne.n	10006e28 <_Z11CheckBrickXaah+0xce4>
10006e26:	e755      	b.n	10006cd4 <_Z11CheckBrickXaah+0xb90>
				if ((y < 1) || (y >= MAPH-1))
10006e28:	9c01      	ldr	r4, [sp, #4]
10006e2a:	2c11      	cmp	r4, #17
10006e2c:	d900      	bls.n	10006e30 <_Z11CheckBrickXaah+0xcec>
10006e2e:	e5c7      	b.n	100069c0 <_Z11CheckBrickXaah+0x87c>
10006e30:	e5c1      	b.n	100069b6 <_Z11CheckBrickXaah+0x872>
					ok = False;
10006e32:	2000      	movs	r0, #0
10006e34:	e421      	b.n	1000667a <_Z11CheckBrickXaah+0x536>
					if (*d != TILE_EMPTY) ok = False;
10006e36:	7856      	ldrb	r6, [r2, #1]
10006e38:	3e08      	subs	r6, #8
10006e3a:	0034      	movs	r4, r6
10006e3c:	4266      	negs	r6, r4
10006e3e:	4166      	adcs	r6, r4
			if (b != 0)
10006e40:	9c07      	ldr	r4, [sp, #28]
					if (*d != TILE_EMPTY) ok = False;
10006e42:	4276      	negs	r6, r6
10006e44:	4030      	ands	r0, r6
			if (b != 0)
10006e46:	2c00      	cmp	r4, #0
10006e48:	d19c      	bne.n	10006d84 <_Z11CheckBrickXaah+0xc40>
10006e4a:	e426      	b.n	1000669a <_Z11CheckBrickXaah+0x556>
				if ((y < 1) || (y >= MAPH-1))
10006e4c:	1e58      	subs	r0, r3, #1
10006e4e:	2811      	cmp	r0, #17
10006e50:	d900      	bls.n	10006e54 <_Z11CheckBrickXaah+0xd10>
10006e52:	e0eb      	b.n	1000702c <_Z11CheckBrickXaah+0xee8>
					if (*d != TILE_EMPTY) ok = False;
10006e54:	7810      	ldrb	r0, [r2, #0]
			if (b != 0)
10006e56:	9c05      	ldr	r4, [sp, #20]
					if (*d != TILE_EMPTY) ok = False;
10006e58:	3808      	subs	r0, #8
10006e5a:	4246      	negs	r6, r0
10006e5c:	4170      	adcs	r0, r6
10006e5e:	b2c0      	uxtb	r0, r0
			if (b != 0)
10006e60:	2c00      	cmp	r4, #0
10006e62:	d000      	beq.n	10006e66 <_Z11CheckBrickXaah+0xd22>
10006e64:	e0e8      	b.n	10007038 <_Z11CheckBrickXaah+0xef4>
10006e66:	9c07      	ldr	r4, [sp, #28]
10006e68:	2c00      	cmp	r4, #0
10006e6a:	d100      	bne.n	10006e6e <_Z11CheckBrickXaah+0xd2a>
10006e6c:	e681      	b.n	10006b72 <_Z11CheckBrickXaah+0xa2e>
					if (*d != TILE_EMPTY) ok = False;
10006e6e:	7896      	ldrb	r6, [r2, #2]
10006e70:	3e08      	subs	r6, #8
10006e72:	0034      	movs	r4, r6
10006e74:	4266      	negs	r6, r4
10006e76:	4166      	adcs	r6, r4
			if (b != 0)
10006e78:	9c06      	ldr	r4, [sp, #24]
					if (*d != TILE_EMPTY) ok = False;
10006e7a:	4276      	negs	r6, r6
10006e7c:	4030      	ands	r0, r6
			if (b != 0)
10006e7e:	2c00      	cmp	r4, #0
10006e80:	d100      	bne.n	10006e84 <_Z11CheckBrickXaah+0xd40>
10006e82:	e67e      	b.n	10006b82 <_Z11CheckBrickXaah+0xa3e>
					if (*d != TILE_EMPTY) ok = False;
10006e84:	78d6      	ldrb	r6, [r2, #3]
10006e86:	3e08      	subs	r6, #8
10006e88:	0034      	movs	r4, r6
10006e8a:	4266      	negs	r6, r4
10006e8c:	4166      	adcs	r6, r4
10006e8e:	4276      	negs	r6, r6
10006e90:	4030      	ands	r0, r6
10006e92:	e676      	b.n	10006b82 <_Z11CheckBrickXaah+0xa3e>
			if (b != 0)
10006e94:	9c08      	ldr	r4, [sp, #32]
10006e96:	2c00      	cmp	r4, #0
10006e98:	d01e      	beq.n	10006ed8 <_Z11CheckBrickXaah+0xd94>
				if ((y < 1) || (y >= MAPH-1))
10006e9a:	2b11      	cmp	r3, #17
10006e9c:	d820      	bhi.n	10006ee0 <_Z11CheckBrickXaah+0xd9c>
					if (*d != TILE_EMPTY) ok = False;
10006e9e:	7f16      	ldrb	r6, [r2, #28]
10006ea0:	3e08      	subs	r6, #8
10006ea2:	0034      	movs	r4, r6
10006ea4:	4266      	negs	r6, r4
10006ea6:	4166      	adcs	r6, r4
10006ea8:	4276      	negs	r6, r6
10006eaa:	4030      	ands	r0, r6
			if (b != 0)
10006eac:	2f00      	cmp	r7, #0
10006eae:	d018      	beq.n	10006ee2 <_Z11CheckBrickXaah+0xd9e>
					if (*d != TILE_EMPTY) ok = False;
10006eb0:	7f53      	ldrb	r3, [r2, #29]
10006eb2:	3b08      	subs	r3, #8
10006eb4:	425e      	negs	r6, r3
10006eb6:	4173      	adcs	r3, r6
10006eb8:	425b      	negs	r3, r3
10006eba:	4018      	ands	r0, r3
			if (b != 0)
10006ebc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
10006ebe:	2b00      	cmp	r3, #0
10006ec0:	d100      	bne.n	10006ec4 <_Z11CheckBrickXaah+0xd80>
10006ec2:	e677      	b.n	10006bb4 <_Z11CheckBrickXaah+0xa70>
					if (*d != TILE_EMPTY) ok = False;
10006ec4:	7f93      	ldrb	r3, [r2, #30]
10006ec6:	3b08      	subs	r3, #8
10006ec8:	425e      	negs	r6, r3
10006eca:	4173      	adcs	r3, r6
10006ecc:	425b      	negs	r3, r3
10006ece:	4018      	ands	r0, r3
10006ed0:	e670      	b.n	10006bb4 <_Z11CheckBrickXaah+0xa70>
			b = *s++;
10006ed2:	9808      	ldr	r0, [sp, #32]
			if (b != 0)
10006ed4:	2800      	cmp	r0, #0
10006ed6:	d103      	bne.n	10006ee0 <_Z11CheckBrickXaah+0xd9c>
10006ed8:	2f00      	cmp	r7, #0
10006eda:	d002      	beq.n	10006ee2 <_Z11CheckBrickXaah+0xd9e>
				if ((y < 1) || (y >= MAPH-1))
10006edc:	2b11      	cmp	r3, #17
10006ede:	d9e7      	bls.n	10006eb0 <_Z11CheckBrickXaah+0xd6c>
					ok = False;
10006ee0:	2000      	movs	r0, #0
			if (b != 0)
10006ee2:	9c0d      	ldr	r4, [sp, #52]	; 0x34
10006ee4:	2c00      	cmp	r4, #0
10006ee6:	d100      	bne.n	10006eea <_Z11CheckBrickXaah+0xda6>
10006ee8:	e664      	b.n	10006bb4 <_Z11CheckBrickXaah+0xa70>
				if ((y < 1) || (y >= MAPH-1))
10006eea:	2b11      	cmp	r3, #17
10006eec:	d9ea      	bls.n	10006ec4 <_Z11CheckBrickXaah+0xd80>
					ok = False;
10006eee:	2000      	movs	r0, #0
10006ef0:	e660      	b.n	10006bb4 <_Z11CheckBrickXaah+0xa70>
			if (b != 0)
10006ef2:	9b09      	ldr	r3, [sp, #36]	; 0x24
10006ef4:	2b00      	cmp	r3, #0
10006ef6:	d022      	beq.n	10006f3e <_Z11CheckBrickXaah+0xdfa>
				if ((y < 1) || (y >= MAPH-1))
10006ef8:	9b00      	ldr	r3, [sp, #0]
10006efa:	2b11      	cmp	r3, #17
10006efc:	d825      	bhi.n	10006f4a <_Z11CheckBrickXaah+0xe06>
					if (*d != TILE_EMPTY) ok = False;
10006efe:	2337      	movs	r3, #55	; 0x37
10006f00:	5cd3      	ldrb	r3, [r2, r3]
10006f02:	3b08      	subs	r3, #8
10006f04:	425e      	negs	r6, r3
10006f06:	4173      	adcs	r3, r6
10006f08:	425b      	negs	r3, r3
10006f0a:	4018      	ands	r0, r3
			if (b != 0)
10006f0c:	4663      	mov	r3, ip
10006f0e:	2b00      	cmp	r3, #0
10006f10:	d01c      	beq.n	10006f4c <_Z11CheckBrickXaah+0xe08>
					if (*d != TILE_EMPTY) ok = False;
10006f12:	2338      	movs	r3, #56	; 0x38
10006f14:	5cd3      	ldrb	r3, [r2, r3]
10006f16:	3b08      	subs	r3, #8
10006f18:	425c      	negs	r4, r3
10006f1a:	4163      	adcs	r3, r4
10006f1c:	425b      	negs	r3, r3
10006f1e:	4018      	ands	r0, r3
			if (b != 0)
10006f20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
10006f22:	2b00      	cmp	r3, #0
10006f24:	d100      	bne.n	10006f28 <_Z11CheckBrickXaah+0xde4>
10006f26:	e660      	b.n	10006bea <_Z11CheckBrickXaah+0xaa6>
					if (*d != TILE_EMPTY) ok = False;
10006f28:	2339      	movs	r3, #57	; 0x39
10006f2a:	5cd3      	ldrb	r3, [r2, r3]
10006f2c:	3b08      	subs	r3, #8
10006f2e:	425c      	negs	r4, r3
10006f30:	4163      	adcs	r3, r4
10006f32:	425b      	negs	r3, r3
10006f34:	4018      	ands	r0, r3
10006f36:	e658      	b.n	10006bea <_Z11CheckBrickXaah+0xaa6>
			b = *s++;
10006f38:	9809      	ldr	r0, [sp, #36]	; 0x24
			if (b != 0)
10006f3a:	2800      	cmp	r0, #0
10006f3c:	d105      	bne.n	10006f4a <_Z11CheckBrickXaah+0xe06>
10006f3e:	4663      	mov	r3, ip
10006f40:	2b00      	cmp	r3, #0
10006f42:	d003      	beq.n	10006f4c <_Z11CheckBrickXaah+0xe08>
				if ((y < 1) || (y >= MAPH-1))
10006f44:	9b00      	ldr	r3, [sp, #0]
10006f46:	2b11      	cmp	r3, #17
10006f48:	d9e3      	bls.n	10006f12 <_Z11CheckBrickXaah+0xdce>
					ok = False;
10006f4a:	2000      	movs	r0, #0
			if (b != 0)
10006f4c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
10006f4e:	2b00      	cmp	r3, #0
10006f50:	d100      	bne.n	10006f54 <_Z11CheckBrickXaah+0xe10>
10006f52:	e64a      	b.n	10006bea <_Z11CheckBrickXaah+0xaa6>
				if ((y < 1) || (y >= MAPH-1))
10006f54:	9b00      	ldr	r3, [sp, #0]
10006f56:	2b11      	cmp	r3, #17
10006f58:	d9e6      	bls.n	10006f28 <_Z11CheckBrickXaah+0xde4>
					ok = False;
10006f5a:	2000      	movs	r0, #0
10006f5c:	e645      	b.n	10006bea <_Z11CheckBrickXaah+0xaa6>
			if (b != 0)
10006f5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10006f60:	2b00      	cmp	r3, #0
10006f62:	d03e      	beq.n	10006fe2 <_Z11CheckBrickXaah+0xe9e>
				if ((y < 1) || (y >= MAPH-1))
10006f64:	9b01      	ldr	r3, [sp, #4]
10006f66:	2b11      	cmp	r3, #17
10006f68:	d900      	bls.n	10006f6c <_Z11CheckBrickXaah+0xe28>
10006f6a:	e658      	b.n	10006c1e <_Z11CheckBrickXaah+0xada>
					if (*d != TILE_EMPTY) ok = False;
10006f6c:	2352      	movs	r3, #82	; 0x52
10006f6e:	5cd3      	ldrb	r3, [r2, r3]
10006f70:	2b08      	cmp	r3, #8
10006f72:	d071      	beq.n	10007058 <_Z11CheckBrickXaah+0xf14>
			b = *s++;
10006f74:	78a8      	ldrb	r0, [r5, #2]
			if (b != 0)
10006f76:	2800      	cmp	r0, #0
10006f78:	d101      	bne.n	10006f7e <_Z11CheckBrickXaah+0xe3a>
10006f7a:	f7ff f9a1 	bl	100062c0 <_Z11CheckBrickXaah+0x17c>
10006f7e:	2000      	movs	r0, #0
10006f80:	f7ff f99e 	bl	100062c0 <_Z11CheckBrickXaah+0x17c>
10006f84:	9a0a      	ldr	r2, [sp, #40]	; 0x28
10006f86:	2a00      	cmp	r2, #0
10006f88:	d000      	beq.n	10006f8c <_Z11CheckBrickXaah+0xe48>
10006f8a:	e5d4      	b.n	10006b36 <_Z11CheckBrickXaah+0x9f2>
			b = *s++;
10006f8c:	78a8      	ldrb	r0, [r5, #2]
			if (b != 0)
10006f8e:	2800      	cmp	r0, #0
10006f90:	d000      	beq.n	10006f94 <_Z11CheckBrickXaah+0xe50>
10006f92:	e5d0      	b.n	10006b36 <_Z11CheckBrickXaah+0x9f2>
10006f94:	78ea      	ldrb	r2, [r5, #3]
10006f96:	2a00      	cmp	r2, #0
10006f98:	d019      	beq.n	10006fce <_Z11CheckBrickXaah+0xe8a>
				if ((y < 1) || (y >= MAPH-1))
10006f9a:	9a01      	ldr	r2, [sp, #4]
10006f9c:	2a11      	cmp	r2, #17
10006f9e:	d910      	bls.n	10006fc2 <_Z11CheckBrickXaah+0xe7e>
10006fa0:	e5c9      	b.n	10006b36 <_Z11CheckBrickXaah+0x9f2>
			if (b != 0)
10006fa2:	78aa      	ldrb	r2, [r5, #2]
10006fa4:	2a00      	cmp	r2, #0
10006fa6:	d0f5      	beq.n	10006f94 <_Z11CheckBrickXaah+0xe50>
				if ((y < 1) || (y >= MAPH-1))
10006fa8:	9a01      	ldr	r2, [sp, #4]
10006faa:	2a11      	cmp	r2, #17
10006fac:	d900      	bls.n	10006fb0 <_Z11CheckBrickXaah+0xe6c>
10006fae:	e5c2      	b.n	10006b36 <_Z11CheckBrickXaah+0x9f2>
					if (*d != TILE_EMPTY) ok = False;
10006fb0:	2253      	movs	r2, #83	; 0x53
10006fb2:	4654      	mov	r4, sl
10006fb4:	5ca2      	ldrb	r2, [r4, r2]
10006fb6:	2a08      	cmp	r2, #8
10006fb8:	d000      	beq.n	10006fbc <_Z11CheckBrickXaah+0xe78>
10006fba:	e5bc      	b.n	10006b36 <_Z11CheckBrickXaah+0x9f2>
			if (b != 0)
10006fbc:	78ea      	ldrb	r2, [r5, #3]
10006fbe:	2a00      	cmp	r2, #0
10006fc0:	d005      	beq.n	10006fce <_Z11CheckBrickXaah+0xe8a>
					if (*d != TILE_EMPTY) ok = False;
10006fc2:	2254      	movs	r2, #84	; 0x54
10006fc4:	4654      	mov	r4, sl
10006fc6:	5ca2      	ldrb	r2, [r4, r2]
10006fc8:	2a08      	cmp	r2, #8
10006fca:	d000      	beq.n	10006fce <_Z11CheckBrickXaah+0xe8a>
10006fcc:	e5b3      	b.n	10006b36 <_Z11CheckBrickXaah+0x9f2>
	if (res)
10006fce:	2800      	cmp	r0, #0
10006fd0:	d000      	beq.n	10006fd4 <_Z11CheckBrickXaah+0xe90>
10006fd2:	e673      	b.n	10006cbc <_Z11CheckBrickXaah+0xb78>
10006fd4:	e5af      	b.n	10006b36 <_Z11CheckBrickXaah+0x9f2>
			if (b != 0)
10006fd6:	78ac      	ldrb	r4, [r5, #2]
10006fd8:	2c00      	cmp	r4, #0
10006fda:	d000      	beq.n	10006fde <_Z11CheckBrickXaah+0xe9a>
10006fdc:	e420      	b.n	10006820 <_Z11CheckBrickXaah+0x6dc>
10006fde:	f7ff fa44 	bl	1000646a <_Z11CheckBrickXaah+0x326>
10006fe2:	78ab      	ldrb	r3, [r5, #2]
10006fe4:	2b00      	cmp	r3, #0
10006fe6:	d100      	bne.n	10006fea <_Z11CheckBrickXaah+0xea6>
10006fe8:	e60d      	b.n	10006c06 <_Z11CheckBrickXaah+0xac2>
				if ((y < 1) || (y >= MAPH-1))
10006fea:	9b01      	ldr	r3, [sp, #4]
10006fec:	2b11      	cmp	r3, #17
10006fee:	d900      	bls.n	10006ff2 <_Z11CheckBrickXaah+0xeae>
10006ff0:	e615      	b.n	10006c1e <_Z11CheckBrickXaah+0xada>
					if (*d != TILE_EMPTY) ok = False;
10006ff2:	2353      	movs	r3, #83	; 0x53
10006ff4:	5cd3      	ldrb	r3, [r2, r3]
10006ff6:	2b08      	cmp	r3, #8
10006ff8:	d00f      	beq.n	1000701a <_Z11CheckBrickXaah+0xed6>
			if (b != 0)
10006ffa:	2000      	movs	r0, #0
10006ffc:	f7ff f960 	bl	100062c0 <_Z11CheckBrickXaah+0x17c>
					if (*d != TILE_EMPTY) ok = False;
10007000:	2351      	movs	r3, #81	; 0x51
10007002:	5cd3      	ldrb	r3, [r2, r3]
10007004:	3b08      	subs	r3, #8
10007006:	425c      	negs	r4, r3
10007008:	4163      	adcs	r3, r4
1000700a:	425b      	negs	r3, r3
1000700c:	4018      	ands	r0, r3
			if (b != 0)
1000700e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10007010:	2b00      	cmp	r3, #0
10007012:	d1ab      	bne.n	10006f6c <_Z11CheckBrickXaah+0xe28>
10007014:	78ab      	ldrb	r3, [r5, #2]
10007016:	2b00      	cmp	r3, #0
10007018:	d1eb      	bne.n	10006ff2 <_Z11CheckBrickXaah+0xeae>
1000701a:	78eb      	ldrb	r3, [r5, #3]
1000701c:	2b00      	cmp	r3, #0
1000701e:	d000      	beq.n	10007022 <_Z11CheckBrickXaah+0xede>
10007020:	e5f8      	b.n	10006c14 <_Z11CheckBrickXaah+0xad0>
	if (res)
10007022:	2800      	cmp	r0, #0
10007024:	d000      	beq.n	10007028 <_Z11CheckBrickXaah+0xee4>
10007026:	e649      	b.n	10006cbc <_Z11CheckBrickXaah+0xb78>
10007028:	f7ff f94a 	bl	100062c0 <_Z11CheckBrickXaah+0x17c>
					ok = False;
1000702c:	2000      	movs	r0, #0
1000702e:	e590      	b.n	10006b52 <_Z11CheckBrickXaah+0xa0e>
			if (b != 0)
10007030:	78aa      	ldrb	r2, [r5, #2]
10007032:	2a00      	cmp	r2, #0
10007034:	d1bc      	bne.n	10006fb0 <_Z11CheckBrickXaah+0xe6c>
10007036:	e7c1      	b.n	10006fbc <_Z11CheckBrickXaah+0xe78>
					if (*d != TILE_EMPTY) ok = False;
10007038:	7856      	ldrb	r6, [r2, #1]
1000703a:	3e08      	subs	r6, #8
1000703c:	0034      	movs	r4, r6
1000703e:	4266      	negs	r6, r4
10007040:	4166      	adcs	r6, r4
			if (b != 0)
10007042:	9c07      	ldr	r4, [sp, #28]
					if (*d != TILE_EMPTY) ok = False;
10007044:	4276      	negs	r6, r6
10007046:	4030      	ands	r0, r6
			if (b != 0)
10007048:	2c00      	cmp	r4, #0
1000704a:	d000      	beq.n	1000704e <_Z11CheckBrickXaah+0xf0a>
1000704c:	e70f      	b.n	10006e6e <_Z11CheckBrickXaah+0xd2a>
1000704e:	e590      	b.n	10006b72 <_Z11CheckBrickXaah+0xa2e>
10007050:	78aa      	ldrb	r2, [r5, #2]
10007052:	2a00      	cmp	r2, #0
10007054:	d1ac      	bne.n	10006fb0 <_Z11CheckBrickXaah+0xe6c>
10007056:	e79d      	b.n	10006f94 <_Z11CheckBrickXaah+0xe50>
10007058:	78ab      	ldrb	r3, [r5, #2]
1000705a:	2b00      	cmp	r3, #0
1000705c:	d1c9      	bne.n	10006ff2 <_Z11CheckBrickXaah+0xeae>
1000705e:	e5d2      	b.n	10006c06 <_Z11CheckBrickXaah+0xac2>

10007060 <_Z7NewGamev>:
{
10007060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	memcpy(Board, BoardTemp, MAPSIZE);
10007062:	2287      	movs	r2, #135	; 0x87
{
10007064:	46ce      	mov	lr, r9
10007066:	4647      	mov	r7, r8
	NextBrick = 0;
10007068:	2400      	movs	r4, #0
	memcpy(Board, BoardTemp, MAPSIZE);
1000706a:	4e57      	ldr	r6, [pc, #348]	; (100071c8 <_Z7NewGamev+0x168>)
{
1000706c:	b580      	push	{r7, lr}
	memcpy(Board, BoardTemp, MAPSIZE);
1000706e:	4957      	ldr	r1, [pc, #348]	; (100071cc <_Z7NewGamev+0x16c>)
10007070:	0092      	lsls	r2, r2, #2
10007072:	0030      	movs	r0, r6
10007074:	f7f9 fc90 	bl	10000998 <__wrap___aeabi_memcpy>
	NextBrick = 0;
10007078:	4b55      	ldr	r3, [pc, #340]	; (100071d0 <_Z7NewGamev+0x170>)
1000707a:	701c      	strb	r4, [r3, #0]
	GenBrick();
1000707c:	f7ff f808 	bl	10006090 <_Z8GenBrickv>
	Level = 1; // current level (1..)
10007080:	2301      	movs	r3, #1
	NextLevel = NextLevelTab[0]; // next level counter
10007082:	220a      	movs	r2, #10
	Level = 1; // current level (1..)
10007084:	4f53      	ldr	r7, [pc, #332]	; (100071d4 <_Z7NewGamev+0x174>)
	for (i = 0; i < BASEBRICKNUM; i++) Stat[i] = 0;
10007086:	4d54      	ldr	r5, [pc, #336]	; (100071d8 <_Z7NewGamev+0x178>)
	Level = 1; // current level (1..)
10007088:	703b      	strb	r3, [r7, #0]
	NextLevel = NextLevelTab[0]; // next level counter
1000708a:	4b54      	ldr	r3, [pc, #336]	; (100071dc <_Z7NewGamev+0x17c>)
	for (i = 0; i < BASEBRICKNUM; i++) Stat[i] = 0;
1000708c:	602c      	str	r4, [r5, #0]
	NextLevel = NextLevelTab[0]; // next level counter
1000708e:	601a      	str	r2, [r3, #0]
	Score = 0;	// game score
10007090:	4b53      	ldr	r3, [pc, #332]	; (100071e0 <_Z7NewGamev+0x180>)
	StepSpeed = LevSpeed[Level-1];
10007092:	22fa      	movs	r2, #250	; 0xfa
	Score = 0;	// game score
10007094:	4699      	mov	r9, r3
10007096:	601c      	str	r4, [r3, #0]
	Lines = 0;	// lines
10007098:	4b52      	ldr	r3, [pc, #328]	; (100071e4 <_Z7NewGamev+0x184>)
	StepSpeed = LevSpeed[Level-1];
1000709a:	0092      	lsls	r2, r2, #2
	Lines = 0;	// lines
1000709c:	601c      	str	r4, [r3, #0]
1000709e:	4698      	mov	r8, r3
	StepSpeed = LevSpeed[Level-1];
100070a0:	4b51      	ldr	r3, [pc, #324]	; (100071e8 <_Z7NewGamev+0x188>)
	for (i = 0; i < BASEBRICKNUM; i++) Stat[i] = 0;
100070a2:	606c      	str	r4, [r5, #4]
100070a4:	60ac      	str	r4, [r5, #8]
100070a6:	60ec      	str	r4, [r5, #12]
100070a8:	612c      	str	r4, [r5, #16]
100070aa:	616c      	str	r4, [r5, #20]
100070ac:	61ac      	str	r4, [r5, #24]
	StepSpeed = LevSpeed[Level-1];
100070ae:	601a      	str	r2, [r3, #0]
	GenBrick();
100070b0:	f7fe ffee 	bl	10006090 <_Z8GenBrickv>
	DispTileNum(TILE_SCOREV1, Score, COL_WHITE);
100070b4:	464b      	mov	r3, r9
100070b6:	22ff      	movs	r2, #255	; 0xff
100070b8:	6819      	ldr	r1, [r3, #0]
100070ba:	202e      	movs	r0, #46	; 0x2e
100070bc:	f7fe fc60 	bl	10005980 <_Z11DispTileNumhih>
	DispTileNum(TILE_SCOREV3, ScoreBest, COL_YELLOW);
100070c0:	4b4a      	ldr	r3, [pc, #296]	; (100071ec <_Z7NewGamev+0x18c>)
100070c2:	22fc      	movs	r2, #252	; 0xfc
100070c4:	6819      	ldr	r1, [r3, #0]
100070c6:	2042      	movs	r0, #66	; 0x42
100070c8:	f7fe fc5a 	bl	10005980 <_Z11DispTileNumhih>
	DispTileNum(TILE_LINESV1, Lines, COL_WHITE);
100070cc:	4643      	mov	r3, r8
100070ce:	22ff      	movs	r2, #255	; 0xff
100070d0:	6819      	ldr	r1, [r3, #0]
100070d2:	2030      	movs	r0, #48	; 0x30
100070d4:	f7fe fc54 	bl	10005980 <_Z11DispTileNumhih>
	DispTileNum(TILE_LINESV3, LinesBest, COL_YELLOW);
100070d8:	4b45      	ldr	r3, [pc, #276]	; (100071f0 <_Z7NewGamev+0x190>)
100070da:	22fc      	movs	r2, #252	; 0xfc
100070dc:	6819      	ldr	r1, [r3, #0]
100070de:	2044      	movs	r0, #68	; 0x44
100070e0:	f7fe fc4e 	bl	10005980 <_Z11DispTileNumhih>
	DispTileNum(TILE_SPEEDV1, Level, COL_WHITE);
100070e4:	22ff      	movs	r2, #255	; 0xff
100070e6:	2032      	movs	r0, #50	; 0x32
100070e8:	7839      	ldrb	r1, [r7, #0]
100070ea:	f7fe fc49 	bl	10005980 <_Z11DispTileNumhih>
	DispTileNum(TILE_SPEEDV3, LevelBest, COL_YELLOW);
100070ee:	4b41      	ldr	r3, [pc, #260]	; (100071f4 <_Z7NewGamev+0x194>)
100070f0:	22fc      	movs	r2, #252	; 0xfc
100070f2:	2046      	movs	r0, #70	; 0x46
100070f4:	7819      	ldrb	r1, [r3, #0]
100070f6:	f7fe fc43 	bl	10005980 <_Z11DispTileNumhih>
100070fa:	3434      	adds	r4, #52	; 0x34
	for (i = 0; i < BASEBRICKNUM; i++) DispTileNum(TILE_STAT1 + i*2, Stat[i], COL_WHITE);
100070fc:	0020      	movs	r0, r4
100070fe:	3402      	adds	r4, #2
10007100:	22ff      	movs	r2, #255	; 0xff
10007102:	cd02      	ldmia	r5!, {r1}
10007104:	b2e4      	uxtb	r4, r4
10007106:	f7fe fc3b 	bl	10005980 <_Z11DispTileNumhih>
1000710a:	2c42      	cmp	r4, #66	; 0x42
1000710c:	d1f6      	bne.n	100070fc <_Z7NewGamev+0x9c>
	u8* d = &Board[x + y*MAPW];
1000710e:	2400      	movs	r4, #0
	DispBrick(BrickX, BrickY, Brick);
10007110:	4839      	ldr	r0, [pc, #228]	; (100071f8 <_Z7NewGamev+0x198>)
10007112:	4b3a      	ldr	r3, [pc, #232]	; (100071fc <_Z7NewGamev+0x19c>)
	u8* d = &Board[x + y*MAPW];
10007114:	5704      	ldrsb	r4, [r0, r4]
	const u8* s = &BrickTemp[brick*BRICKTEMPSIZE];
10007116:	781a      	ldrb	r2, [r3, #0]
	u8* d = &Board[x + y*MAPW];
10007118:	0060      	lsls	r0, r4, #1
1000711a:	1900      	adds	r0, r0, r4
1000711c:	00c4      	lsls	r4, r0, #3
1000711e:	1900      	adds	r0, r0, r4
	DispBrick(BrickX, BrickY, Brick);
10007120:	4c37      	ldr	r4, [pc, #220]	; (10007200 <_Z7NewGamev+0x1a0>)
	const u8* s = &BrickTemp[brick*BRICKTEMPSIZE];
10007122:	4938      	ldr	r1, [pc, #224]	; (10007204 <_Z7NewGamev+0x1a4>)
	u8* d = &Board[x + y*MAPW];
10007124:	7824      	ldrb	r4, [r4, #0]
	const u8* s = &BrickTemp[brick*BRICKTEMPSIZE];
10007126:	0112      	lsls	r2, r2, #4
10007128:	1853      	adds	r3, r2, r1
	u8* d = &Board[x + y*MAPW];
1000712a:	b264      	sxtb	r4, r4
			b = *s++;
1000712c:	5c8a      	ldrb	r2, [r1, r2]
	u8* d = &Board[x + y*MAPW];
1000712e:	1900      	adds	r0, r0, r4
10007130:	1830      	adds	r0, r6, r0
			if (b != 0) *d = b;
10007132:	2a00      	cmp	r2, #0
10007134:	d000      	beq.n	10007138 <_Z7NewGamev+0xd8>
10007136:	7002      	strb	r2, [r0, #0]
			b = *s++;
10007138:	785a      	ldrb	r2, [r3, #1]
			if (b != 0) *d = b;
1000713a:	2a00      	cmp	r2, #0
1000713c:	d000      	beq.n	10007140 <_Z7NewGamev+0xe0>
1000713e:	7042      	strb	r2, [r0, #1]
			b = *s++;
10007140:	789a      	ldrb	r2, [r3, #2]
			if (b != 0) *d = b;
10007142:	2a00      	cmp	r2, #0
10007144:	d000      	beq.n	10007148 <_Z7NewGamev+0xe8>
10007146:	7082      	strb	r2, [r0, #2]
			b = *s++;
10007148:	78da      	ldrb	r2, [r3, #3]
			if (b != 0) *d = b;
1000714a:	2a00      	cmp	r2, #0
1000714c:	d000      	beq.n	10007150 <_Z7NewGamev+0xf0>
1000714e:	70c2      	strb	r2, [r0, #3]
			b = *s++;
10007150:	791a      	ldrb	r2, [r3, #4]
			if (b != 0) *d = b;
10007152:	2a00      	cmp	r2, #0
10007154:	d000      	beq.n	10007158 <_Z7NewGamev+0xf8>
10007156:	76c2      	strb	r2, [r0, #27]
			b = *s++;
10007158:	795a      	ldrb	r2, [r3, #5]
			if (b != 0) *d = b;
1000715a:	2a00      	cmp	r2, #0
1000715c:	d000      	beq.n	10007160 <_Z7NewGamev+0x100>
1000715e:	7702      	strb	r2, [r0, #28]
			b = *s++;
10007160:	799a      	ldrb	r2, [r3, #6]
			if (b != 0) *d = b;
10007162:	2a00      	cmp	r2, #0
10007164:	d000      	beq.n	10007168 <_Z7NewGamev+0x108>
10007166:	7742      	strb	r2, [r0, #29]
			b = *s++;
10007168:	79da      	ldrb	r2, [r3, #7]
			if (b != 0) *d = b;
1000716a:	2a00      	cmp	r2, #0
1000716c:	d000      	beq.n	10007170 <_Z7NewGamev+0x110>
1000716e:	7782      	strb	r2, [r0, #30]
			b = *s++;
10007170:	7a1a      	ldrb	r2, [r3, #8]
			if (b != 0) *d = b;
10007172:	2a00      	cmp	r2, #0
10007174:	d001      	beq.n	1000717a <_Z7NewGamev+0x11a>
10007176:	2136      	movs	r1, #54	; 0x36
10007178:	5442      	strb	r2, [r0, r1]
			b = *s++;
1000717a:	7a5a      	ldrb	r2, [r3, #9]
			if (b != 0) *d = b;
1000717c:	2a00      	cmp	r2, #0
1000717e:	d001      	beq.n	10007184 <_Z7NewGamev+0x124>
10007180:	2137      	movs	r1, #55	; 0x37
10007182:	5442      	strb	r2, [r0, r1]
			b = *s++;
10007184:	7a9a      	ldrb	r2, [r3, #10]
			if (b != 0) *d = b;
10007186:	2a00      	cmp	r2, #0
10007188:	d001      	beq.n	1000718e <_Z7NewGamev+0x12e>
1000718a:	2138      	movs	r1, #56	; 0x38
1000718c:	5442      	strb	r2, [r0, r1]
			b = *s++;
1000718e:	7ada      	ldrb	r2, [r3, #11]
			if (b != 0) *d = b;
10007190:	2a00      	cmp	r2, #0
10007192:	d001      	beq.n	10007198 <_Z7NewGamev+0x138>
10007194:	2139      	movs	r1, #57	; 0x39
10007196:	5442      	strb	r2, [r0, r1]
			b = *s++;
10007198:	7b1a      	ldrb	r2, [r3, #12]
			if (b != 0) *d = b;
1000719a:	2a00      	cmp	r2, #0
1000719c:	d001      	beq.n	100071a2 <_Z7NewGamev+0x142>
1000719e:	2151      	movs	r1, #81	; 0x51
100071a0:	5442      	strb	r2, [r0, r1]
			b = *s++;
100071a2:	7b5a      	ldrb	r2, [r3, #13]
			if (b != 0) *d = b;
100071a4:	2a00      	cmp	r2, #0
100071a6:	d001      	beq.n	100071ac <_Z7NewGamev+0x14c>
100071a8:	2152      	movs	r1, #82	; 0x52
100071aa:	5442      	strb	r2, [r0, r1]
			b = *s++;
100071ac:	7b9a      	ldrb	r2, [r3, #14]
			if (b != 0) *d = b;
100071ae:	2a00      	cmp	r2, #0
100071b0:	d001      	beq.n	100071b6 <_Z7NewGamev+0x156>
100071b2:	2153      	movs	r1, #83	; 0x53
100071b4:	5442      	strb	r2, [r0, r1]
			b = *s++;
100071b6:	7bdb      	ldrb	r3, [r3, #15]
			if (b != 0) *d = b;
100071b8:	2b00      	cmp	r3, #0
100071ba:	d001      	beq.n	100071c0 <_Z7NewGamev+0x160>
100071bc:	2254      	movs	r2, #84	; 0x54
100071be:	5483      	strb	r3, [r0, r2]
}
100071c0:	bcc0      	pop	{r6, r7}
100071c2:	46b9      	mov	r9, r7
100071c4:	46b0      	mov	r8, r6
100071c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100071c8:	2000327c 	.word	0x2000327c
100071cc:	1000e774 	.word	0x1000e774
100071d0:	2001276d 	.word	0x2001276d
100071d4:	2001276b 	.word	0x2001276b
100071d8:	20007840 	.word	0x20007840
100071dc:	200061fc 	.word	0x200061fc
100071e0:	20007108 	.word	0x20007108
100071e4:	200061f4 	.word	0x200061f4
100071e8:	2000785c 	.word	0x2000785c
100071ec:	2000710c 	.word	0x2000710c
100071f0:	200061f8 	.word	0x200061f8
100071f4:	2001276c 	.word	0x2001276c
100071f8:	20012766 	.word	0x20012766
100071fc:	20012764 	.word	0x20012764
10007200:	20012765 	.word	0x20012765
10007204:	1000e9f4 	.word	0x1000e9f4

10007208 <_Z4Gamev.part.0>:

	return i > 0; // i > 0 if continue with user
}

// process game
void Game()
10007208:	b5f0      	push	{r4, r5, r6, r7, lr}
1000720a:	46de      	mov	lr, fp
1000720c:	464e      	mov	r6, r9
1000720e:	4645      	mov	r5, r8
10007210:	4657      	mov	r7, sl
10007212:	4b04      	ldr	r3, [pc, #16]	; (10007224 <_Z4Gamev.part.0+0x1c>)
10007214:	b5e0      	push	{r5, r6, r7, lr}
10007216:	4698      	mov	r8, r3
10007218:	4b03      	ldr	r3, [pc, #12]	; (10007228 <_Z4Gamev.part.0+0x20>)
1000721a:	b095      	sub	sp, #84	; 0x54
1000721c:	469b      	mov	fp, r3
1000721e:	4b03      	ldr	r3, [pc, #12]	; (1000722c <_Z4Gamev.part.0+0x24>)
10007220:	4699      	mov	r9, r3
10007222:	e00b      	b.n	1000723c <_Z4Gamev.part.0+0x34>
10007224:	2000783c 	.word	0x2000783c
10007228:	2000327c 	.word	0x2000327c
1000722c:	200061fc 	.word	0x200061fc
				if (!Falling && (BrickScore > 0)) BrickScore--;
			}
		}

		// key service if not falling
		if (!Falling)
10007230:	4cd3      	ldr	r4, [pc, #844]	; (10007580 <_Z4Gamev.part.0+0x378>)
10007232:	7823      	ldrb	r3, [r4, #0]
10007234:	2b00      	cmp	r3, #0
10007236:	d101      	bne.n	1000723c <_Z4Gamev.part.0+0x34>
10007238:	f000 fc51 	bl	10007ade <_Z4Gamev.part.0+0x8d6>
		sleep_ms(TIMEDELAY);
1000723c:	200a      	movs	r0, #10
1000723e:	f7fb fc4b 	bl	10002ad8 <sleep_ms>
		SpeedCnt -= TIMEDELAY;
10007242:	4643      	mov	r3, r8
10007244:	4642      	mov	r2, r8
10007246:	681b      	ldr	r3, [r3, #0]
10007248:	3b0a      	subs	r3, #10
1000724a:	6013      	str	r3, [r2, #0]
		if (SpeedCnt <= 0)
1000724c:	2b00      	cmp	r3, #0
1000724e:	dcef      	bgt.n	10007230 <_Z4Gamev.part.0+0x28>
			ClearBrick(BrickX, BrickY, Brick);
10007250:	2100      	movs	r1, #0
	u8* d = &Board[x + y*MAPW];
10007252:	2000      	movs	r0, #0
			ClearBrick(BrickX, BrickY, Brick);
10007254:	4bcb      	ldr	r3, [pc, #812]	; (10007584 <_Z4Gamev.part.0+0x37c>)
	u8* d = &Board[x + y*MAPW];
10007256:	4acc      	ldr	r2, [pc, #816]	; (10007588 <_Z4Gamev.part.0+0x380>)
			ClearBrick(BrickX, BrickY, Brick);
10007258:	5659      	ldrsb	r1, [r3, r1]
	u8* d = &Board[x + y*MAPW];
1000725a:	5610      	ldrsb	r0, [r2, r0]
1000725c:	004a      	lsls	r2, r1, #1
1000725e:	1852      	adds	r2, r2, r1
10007260:	00d5      	lsls	r5, r2, #3
10007262:	1952      	adds	r2, r2, r5
10007264:	1815      	adds	r5, r2, r0
10007266:	002a      	movs	r2, r5
	const u8* s = &BrickTemp[brick*BRICKTEMPSIZE];
10007268:	4bc8      	ldr	r3, [pc, #800]	; (1000758c <_Z4Gamev.part.0+0x384>)
			b = *s++;
1000726a:	4ec9      	ldr	r6, [pc, #804]	; (10007590 <_Z4Gamev.part.0+0x388>)
	const u8* s = &BrickTemp[brick*BRICKTEMPSIZE];
1000726c:	781c      	ldrb	r4, [r3, #0]
1000726e:	4bc8      	ldr	r3, [pc, #800]	; (10007590 <_Z4Gamev.part.0+0x388>)
10007270:	0124      	lsls	r4, r4, #4
10007272:	191b      	adds	r3, r3, r4
			b = *s++;
10007274:	5d34      	ldrb	r4, [r6, r4]
	u8* d = &Board[x + y*MAPW];
10007276:	9010      	str	r0, [sp, #64]	; 0x40
10007278:	9511      	str	r5, [sp, #68]	; 0x44
1000727a:	445a      	add	r2, fp
			b = *s++;
1000727c:	9401      	str	r4, [sp, #4]
			if (b != 0) *d = TILE_EMPTY;
1000727e:	2c00      	cmp	r4, #0
10007280:	d002      	beq.n	10007288 <_Z4Gamev.part.0+0x80>
10007282:	2408      	movs	r4, #8
10007284:	465e      	mov	r6, fp
10007286:	5574      	strb	r4, [r6, r5]
			b = *s++;
10007288:	785c      	ldrb	r4, [r3, #1]
1000728a:	9402      	str	r4, [sp, #8]
			if (b != 0) *d = TILE_EMPTY;
1000728c:	2c00      	cmp	r4, #0
1000728e:	d001      	beq.n	10007294 <_Z4Gamev.part.0+0x8c>
10007290:	2408      	movs	r4, #8
10007292:	7054      	strb	r4, [r2, #1]
			b = *s++;
10007294:	789c      	ldrb	r4, [r3, #2]
10007296:	9406      	str	r4, [sp, #24]
			if (b != 0) *d = TILE_EMPTY;
10007298:	2c00      	cmp	r4, #0
1000729a:	d001      	beq.n	100072a0 <_Z4Gamev.part.0+0x98>
1000729c:	2408      	movs	r4, #8
1000729e:	7094      	strb	r4, [r2, #2]
			b = *s++;
100072a0:	78dc      	ldrb	r4, [r3, #3]
100072a2:	940a      	str	r4, [sp, #40]	; 0x28
			if (b != 0) *d = TILE_EMPTY;
100072a4:	2c00      	cmp	r4, #0
100072a6:	d001      	beq.n	100072ac <_Z4Gamev.part.0+0xa4>
100072a8:	2408      	movs	r4, #8
100072aa:	70d4      	strb	r4, [r2, #3]
			b = *s++;
100072ac:	791c      	ldrb	r4, [r3, #4]
100072ae:	9403      	str	r4, [sp, #12]
			if (b != 0) *d = TILE_EMPTY;
100072b0:	2c00      	cmp	r4, #0
100072b2:	d001      	beq.n	100072b8 <_Z4Gamev.part.0+0xb0>
100072b4:	2408      	movs	r4, #8
100072b6:	76d4      	strb	r4, [r2, #27]
			b = *s++;
100072b8:	7958      	ldrb	r0, [r3, #5]
100072ba:	9004      	str	r0, [sp, #16]
			if (b != 0) *d = TILE_EMPTY;
100072bc:	2800      	cmp	r0, #0
100072be:	d001      	beq.n	100072c4 <_Z4Gamev.part.0+0xbc>
100072c0:	2508      	movs	r5, #8
100072c2:	7715      	strb	r5, [r2, #28]
			b = *s++;
100072c4:	799c      	ldrb	r4, [r3, #6]
100072c6:	9407      	str	r4, [sp, #28]
			if (b != 0) *d = TILE_EMPTY;
100072c8:	2c00      	cmp	r4, #0
100072ca:	d001      	beq.n	100072d0 <_Z4Gamev.part.0+0xc8>
100072cc:	2508      	movs	r5, #8
100072ce:	7755      	strb	r5, [r2, #29]
			b = *s++;
100072d0:	79dc      	ldrb	r4, [r3, #7]
100072d2:	940b      	str	r4, [sp, #44]	; 0x2c
			if (b != 0) *d = TILE_EMPTY;
100072d4:	2c00      	cmp	r4, #0
100072d6:	d001      	beq.n	100072dc <_Z4Gamev.part.0+0xd4>
100072d8:	2508      	movs	r5, #8
100072da:	7795      	strb	r5, [r2, #30]
			b = *s++;
100072dc:	7a18      	ldrb	r0, [r3, #8]
100072de:	9005      	str	r0, [sp, #20]
			if (b != 0) *d = TILE_EMPTY;
100072e0:	2800      	cmp	r0, #0
100072e2:	d002      	beq.n	100072ea <_Z4Gamev.part.0+0xe2>
100072e4:	2636      	movs	r6, #54	; 0x36
100072e6:	2708      	movs	r7, #8
100072e8:	5597      	strb	r7, [r2, r6]
			b = *s++;
100072ea:	7a5e      	ldrb	r6, [r3, #9]
			if (b != 0) *d = TILE_EMPTY;
100072ec:	2e00      	cmp	r6, #0
100072ee:	d002      	beq.n	100072f6 <_Z4Gamev.part.0+0xee>
100072f0:	2737      	movs	r7, #55	; 0x37
100072f2:	2408      	movs	r4, #8
100072f4:	55d4      	strb	r4, [r2, r7]
			b = *s++;
100072f6:	7a9c      	ldrb	r4, [r3, #10]
100072f8:	9408      	str	r4, [sp, #32]
			if (b != 0) *d = TILE_EMPTY;
100072fa:	2c00      	cmp	r4, #0
100072fc:	d002      	beq.n	10007304 <_Z4Gamev.part.0+0xfc>
100072fe:	2738      	movs	r7, #56	; 0x38
10007300:	2408      	movs	r4, #8
10007302:	55d4      	strb	r4, [r2, r7]
			b = *s++;
10007304:	7adc      	ldrb	r4, [r3, #11]
10007306:	940c      	str	r4, [sp, #48]	; 0x30
			if (b != 0) *d = TILE_EMPTY;
10007308:	2c00      	cmp	r4, #0
1000730a:	d002      	beq.n	10007312 <_Z4Gamev.part.0+0x10a>
1000730c:	2739      	movs	r7, #57	; 0x39
1000730e:	2408      	movs	r4, #8
10007310:	55d4      	strb	r4, [r2, r7]
			b = *s++;
10007312:	7b1f      	ldrb	r7, [r3, #12]
			if (b != 0) *d = TILE_EMPTY;
10007314:	2f00      	cmp	r7, #0
10007316:	d006      	beq.n	10007326 <_Z4Gamev.part.0+0x11e>
10007318:	2451      	movs	r4, #81	; 0x51
1000731a:	46a4      	mov	ip, r4
1000731c:	3c49      	subs	r4, #73	; 0x49
1000731e:	46a2      	mov	sl, r4
10007320:	4664      	mov	r4, ip
10007322:	4650      	mov	r0, sl
10007324:	5510      	strb	r0, [r2, r4]
			b = *s++;
10007326:	7b5c      	ldrb	r4, [r3, #13]
10007328:	9409      	str	r4, [sp, #36]	; 0x24
			if (b != 0) *d = TILE_EMPTY;
1000732a:	2c00      	cmp	r4, #0
1000732c:	d006      	beq.n	1000733c <_Z4Gamev.part.0+0x134>
1000732e:	2052      	movs	r0, #82	; 0x52
10007330:	4684      	mov	ip, r0
10007332:	384a      	subs	r0, #74	; 0x4a
10007334:	4682      	mov	sl, r0
10007336:	4660      	mov	r0, ip
10007338:	4654      	mov	r4, sl
1000733a:	5414      	strb	r4, [r2, r0]
			b = *s++;
1000733c:	7b9c      	ldrb	r4, [r3, #14]
1000733e:	940d      	str	r4, [sp, #52]	; 0x34
			if (b != 0) *d = TILE_EMPTY;
10007340:	2c00      	cmp	r4, #0
10007342:	d006      	beq.n	10007352 <_Z4Gamev.part.0+0x14a>
10007344:	2053      	movs	r0, #83	; 0x53
10007346:	4684      	mov	ip, r0
10007348:	384b      	subs	r0, #75	; 0x4b
1000734a:	4682      	mov	sl, r0
1000734c:	4660      	mov	r0, ip
1000734e:	4654      	mov	r4, sl
10007350:	5414      	strb	r4, [r2, r0]
			b = *s++;
10007352:	7bdb      	ldrb	r3, [r3, #15]
10007354:	930e      	str	r3, [sp, #56]	; 0x38
			if (b != 0) *d = TILE_EMPTY;
10007356:	2b00      	cmp	r3, #0
10007358:	d002      	beq.n	10007360 <_Z4Gamev.part.0+0x158>
1000735a:	2354      	movs	r3, #84	; 0x54
1000735c:	2008      	movs	r0, #8
1000735e:	54d0      	strb	r0, [r2, r3]
			if (!CheckBrick(BrickX, BrickY+1, Brick))
10007360:	b2cb      	uxtb	r3, r1
10007362:	1c59      	adds	r1, r3, #1
10007364:	b2cc      	uxtb	r4, r1
10007366:	b249      	sxtb	r1, r1
10007368:	940f      	str	r4, [sp, #60]	; 0x3c
1000736a:	000c      	movs	r4, r1
	u8* d = &Board[x + y*MAPW];
1000736c:	46a4      	mov	ip, r4
			if (!CheckBrick(BrickX, BrickY+1, Brick))
1000736e:	9112      	str	r1, [sp, #72]	; 0x48
	u8* d = &Board[x + y*MAPW];
10007370:	0049      	lsls	r1, r1, #1
10007372:	4461      	add	r1, ip
10007374:	00cc      	lsls	r4, r1, #3
10007376:	46a4      	mov	ip, r4
10007378:	9810      	ldr	r0, [sp, #64]	; 0x40
1000737a:	4461      	add	r1, ip
1000737c:	4684      	mov	ip, r0
1000737e:	4461      	add	r1, ip
10007380:	0008      	movs	r0, r1
			if (b != 0)
10007382:	9c01      	ldr	r4, [sp, #4]
	u8* d = &Board[x + y*MAPW];
10007384:	9113      	str	r1, [sp, #76]	; 0x4c
10007386:	4458      	add	r0, fp
			if (b != 0)
10007388:	2c00      	cmp	r4, #0
1000738a:	d101      	bne.n	10007390 <_Z4Gamev.part.0+0x188>
1000738c:	f000 fc0c 	bl	10007ba8 <_Z4Gamev.part.0+0x9a0>
				if ((y < 1) || (y >= MAPH-1))
10007390:	2b11      	cmp	r3, #17
10007392:	d901      	bls.n	10007398 <_Z4Gamev.part.0+0x190>
10007394:	f000 fc8e 	bl	10007cb4 <_Z4Gamev.part.0+0xaac>
					if (*d != TILE_EMPTY) ok = False;
10007398:	465c      	mov	r4, fp
1000739a:	5c61      	ldrb	r1, [r4, r1]
1000739c:	3908      	subs	r1, #8
1000739e:	000c      	movs	r4, r1
100073a0:	4261      	negs	r1, r4
100073a2:	4161      	adcs	r1, r4
			if (b != 0)
100073a4:	9c02      	ldr	r4, [sp, #8]
	Bool ok = True;
100073a6:	b2c9      	uxtb	r1, r1
			if (b != 0)
100073a8:	2c00      	cmp	r4, #0
100073aa:	d001      	beq.n	100073b0 <_Z4Gamev.part.0+0x1a8>
100073ac:	f000 fc62 	bl	10007c74 <_Z4Gamev.part.0+0xa6c>
100073b0:	9c06      	ldr	r4, [sp, #24]
100073b2:	2c00      	cmp	r4, #0
100073b4:	d001      	beq.n	100073ba <_Z4Gamev.part.0+0x1b2>
100073b6:	f000 fc6b 	bl	10007c90 <_Z4Gamev.part.0+0xa88>
100073ba:	9c0a      	ldr	r4, [sp, #40]	; 0x28
100073bc:	2c00      	cmp	r4, #0
100073be:	d00a      	beq.n	100073d6 <_Z4Gamev.part.0+0x1ce>
					if (*d != TILE_EMPTY) ok = False;
100073c0:	78c4      	ldrb	r4, [r0, #3]
100073c2:	46a4      	mov	ip, r4
					ok = False;
100073c4:	2408      	movs	r4, #8
100073c6:	4264      	negs	r4, r4
100073c8:	46a2      	mov	sl, r4
100073ca:	44d4      	add	ip, sl
100073cc:	4665      	mov	r5, ip
100073ce:	426c      	negs	r4, r5
100073d0:	416c      	adcs	r4, r5
100073d2:	4264      	negs	r4, r4
100073d4:	4021      	ands	r1, r4
		y++;
100073d6:	1c9c      	adds	r4, r3, #2
100073d8:	b2e4      	uxtb	r4, r4
100073da:	9410      	str	r4, [sp, #64]	; 0x40
			if (b != 0)
100073dc:	9c03      	ldr	r4, [sp, #12]
100073de:	2c00      	cmp	r4, #0
100073e0:	d100      	bne.n	100073e4 <_Z4Gamev.part.0+0x1dc>
100073e2:	e3c8      	b.n	10007b76 <_Z4Gamev.part.0+0x96e>
				if ((y < 1) || (y >= MAPH-1))
100073e4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
100073e6:	2c11      	cmp	r4, #17
100073e8:	d901      	bls.n	100073ee <_Z4Gamev.part.0+0x1e6>
100073ea:	f000 fc87 	bl	10007cfc <_Z4Gamev.part.0+0xaf4>
					if (*d != TILE_EMPTY) ok = False;
100073ee:	7ec4      	ldrb	r4, [r0, #27]
100073f0:	46a4      	mov	ip, r4
100073f2:	2408      	movs	r4, #8
100073f4:	4264      	negs	r4, r4
100073f6:	46a2      	mov	sl, r4
100073f8:	44d4      	add	ip, sl
100073fa:	4665      	mov	r5, ip
100073fc:	426c      	negs	r4, r5
100073fe:	416c      	adcs	r4, r5
10007400:	4264      	negs	r4, r4
10007402:	4021      	ands	r1, r4
			if (b != 0)
10007404:	9c04      	ldr	r4, [sp, #16]
10007406:	2c00      	cmp	r4, #0
10007408:	d000      	beq.n	1000740c <_Z4Gamev.part.0+0x204>
1000740a:	e3e4      	b.n	10007bd6 <_Z4Gamev.part.0+0x9ce>
1000740c:	9c07      	ldr	r4, [sp, #28]
1000740e:	2c00      	cmp	r4, #0
10007410:	d000      	beq.n	10007414 <_Z4Gamev.part.0+0x20c>
10007412:	e3b9      	b.n	10007b88 <_Z4Gamev.part.0+0x980>
10007414:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
10007416:	2c00      	cmp	r4, #0
10007418:	d00a      	beq.n	10007430 <_Z4Gamev.part.0+0x228>
					if (*d != TILE_EMPTY) ok = False;
1000741a:	7f84      	ldrb	r4, [r0, #30]
1000741c:	46a4      	mov	ip, r4
					ok = False;
1000741e:	2408      	movs	r4, #8
10007420:	4264      	negs	r4, r4
10007422:	46a2      	mov	sl, r4
10007424:	44d4      	add	ip, sl
10007426:	4665      	mov	r5, ip
10007428:	426c      	negs	r4, r5
1000742a:	416c      	adcs	r4, r5
1000742c:	4264      	negs	r4, r4
1000742e:	4021      	ands	r1, r4
		y++;
10007430:	3303      	adds	r3, #3
10007432:	b2db      	uxtb	r3, r3
10007434:	469a      	mov	sl, r3
			if (b != 0)
10007436:	9b05      	ldr	r3, [sp, #20]
10007438:	2b00      	cmp	r3, #0
1000743a:	d100      	bne.n	1000743e <_Z4Gamev.part.0+0x236>
1000743c:	e386      	b.n	10007b4c <_Z4Gamev.part.0+0x944>
				if ((y < 1) || (y >= MAPH-1))
1000743e:	9b10      	ldr	r3, [sp, #64]	; 0x40
10007440:	2b11      	cmp	r3, #17
10007442:	d901      	bls.n	10007448 <_Z4Gamev.part.0+0x240>
10007444:	f000 fc40 	bl	10007cc8 <_Z4Gamev.part.0+0xac0>
					if (*d != TILE_EMPTY) ok = False;
10007448:	2336      	movs	r3, #54	; 0x36
1000744a:	5cc3      	ldrb	r3, [r0, r3]
1000744c:	3b08      	subs	r3, #8
1000744e:	001c      	movs	r4, r3
10007450:	4263      	negs	r3, r4
10007452:	4163      	adcs	r3, r4
10007454:	425b      	negs	r3, r3
10007456:	4019      	ands	r1, r3
			if (b != 0)
10007458:	2e00      	cmp	r6, #0
1000745a:	d000      	beq.n	1000745e <_Z4Gamev.part.0+0x256>
1000745c:	e3d6      	b.n	10007c0c <_Z4Gamev.part.0+0xa04>
1000745e:	9b08      	ldr	r3, [sp, #32]
10007460:	2b00      	cmp	r3, #0
10007462:	d000      	beq.n	10007466 <_Z4Gamev.part.0+0x25e>
10007464:	e37a      	b.n	10007b5c <_Z4Gamev.part.0+0x954>
10007466:	9b0c      	ldr	r3, [sp, #48]	; 0x30
10007468:	2b00      	cmp	r3, #0
1000746a:	d007      	beq.n	1000747c <_Z4Gamev.part.0+0x274>
					if (*d != TILE_EMPTY) ok = False;
1000746c:	2339      	movs	r3, #57	; 0x39
1000746e:	5cc3      	ldrb	r3, [r0, r3]
					ok = False;
10007470:	3b08      	subs	r3, #8
10007472:	001c      	movs	r4, r3
10007474:	4263      	negs	r3, r4
10007476:	4163      	adcs	r3, r4
10007478:	425b      	negs	r3, r3
1000747a:	4019      	ands	r1, r3
			if (b != 0)
1000747c:	2f00      	cmp	r7, #0
1000747e:	d100      	bne.n	10007482 <_Z4Gamev.part.0+0x27a>
10007480:	e2b2      	b.n	100079e8 <_Z4Gamev.part.0+0x7e0>
				if ((y < 1) || (y >= MAPH-1))
10007482:	4653      	mov	r3, sl
10007484:	2b11      	cmp	r3, #17
10007486:	d80f      	bhi.n	100074a8 <_Z4Gamev.part.0+0x2a0>
					if (*d != TILE_EMPTY) ok = False;
10007488:	2351      	movs	r3, #81	; 0x51
1000748a:	5cc3      	ldrb	r3, [r0, r3]
1000748c:	2b08      	cmp	r3, #8
1000748e:	d101      	bne.n	10007494 <_Z4Gamev.part.0+0x28c>
10007490:	f000 fcea 	bl	10007e68 <_Z4Gamev.part.0+0xc60>
			if (b != 0)
10007494:	9b0d      	ldr	r3, [sp, #52]	; 0x34
10007496:	2b00      	cmp	r3, #0
10007498:	d006      	beq.n	100074a8 <_Z4Gamev.part.0+0x2a0>
1000749a:	2100      	movs	r1, #0
					if (*d != TILE_EMPTY) ok = False;
1000749c:	2353      	movs	r3, #83	; 0x53
1000749e:	5cc3      	ldrb	r3, [r0, r3]
100074a0:	2b08      	cmp	r3, #8
100074a2:	d101      	bne.n	100074a8 <_Z4Gamev.part.0+0x2a0>
100074a4:	f000 fc44 	bl	10007d30 <_Z4Gamev.part.0+0xb28>
			if (b != 0) *d = b;
100074a8:	9b01      	ldr	r3, [sp, #4]
100074aa:	2b00      	cmp	r3, #0
100074ac:	d002      	beq.n	100074b4 <_Z4Gamev.part.0+0x2ac>
100074ae:	4659      	mov	r1, fp
100074b0:	9811      	ldr	r0, [sp, #68]	; 0x44
100074b2:	540b      	strb	r3, [r1, r0]
100074b4:	9b02      	ldr	r3, [sp, #8]
100074b6:	2b00      	cmp	r3, #0
100074b8:	d000      	beq.n	100074bc <_Z4Gamev.part.0+0x2b4>
100074ba:	7053      	strb	r3, [r2, #1]
100074bc:	9b06      	ldr	r3, [sp, #24]
100074be:	2b00      	cmp	r3, #0
100074c0:	d000      	beq.n	100074c4 <_Z4Gamev.part.0+0x2bc>
100074c2:	7093      	strb	r3, [r2, #2]
100074c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
100074c6:	2b00      	cmp	r3, #0
100074c8:	d000      	beq.n	100074cc <_Z4Gamev.part.0+0x2c4>
100074ca:	70d3      	strb	r3, [r2, #3]
100074cc:	9b03      	ldr	r3, [sp, #12]
100074ce:	2b00      	cmp	r3, #0
100074d0:	d000      	beq.n	100074d4 <_Z4Gamev.part.0+0x2cc>
100074d2:	76d3      	strb	r3, [r2, #27]
100074d4:	9b04      	ldr	r3, [sp, #16]
100074d6:	2b00      	cmp	r3, #0
100074d8:	d000      	beq.n	100074dc <_Z4Gamev.part.0+0x2d4>
100074da:	7713      	strb	r3, [r2, #28]
100074dc:	9b07      	ldr	r3, [sp, #28]
100074de:	2b00      	cmp	r3, #0
100074e0:	d000      	beq.n	100074e4 <_Z4Gamev.part.0+0x2dc>
100074e2:	7753      	strb	r3, [r2, #29]
100074e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
100074e6:	2b00      	cmp	r3, #0
100074e8:	d000      	beq.n	100074ec <_Z4Gamev.part.0+0x2e4>
100074ea:	7793      	strb	r3, [r2, #30]
100074ec:	9905      	ldr	r1, [sp, #20]
100074ee:	2900      	cmp	r1, #0
100074f0:	d001      	beq.n	100074f6 <_Z4Gamev.part.0+0x2ee>
100074f2:	2336      	movs	r3, #54	; 0x36
100074f4:	54d1      	strb	r1, [r2, r3]
100074f6:	2e00      	cmp	r6, #0
100074f8:	d001      	beq.n	100074fe <_Z4Gamev.part.0+0x2f6>
100074fa:	2337      	movs	r3, #55	; 0x37
100074fc:	54d6      	strb	r6, [r2, r3]
100074fe:	9908      	ldr	r1, [sp, #32]
10007500:	2900      	cmp	r1, #0
10007502:	d001      	beq.n	10007508 <_Z4Gamev.part.0+0x300>
10007504:	2338      	movs	r3, #56	; 0x38
10007506:	54d1      	strb	r1, [r2, r3]
10007508:	990c      	ldr	r1, [sp, #48]	; 0x30
1000750a:	2900      	cmp	r1, #0
1000750c:	d001      	beq.n	10007512 <_Z4Gamev.part.0+0x30a>
1000750e:	2339      	movs	r3, #57	; 0x39
10007510:	54d1      	strb	r1, [r2, r3]
10007512:	2f00      	cmp	r7, #0
10007514:	d001      	beq.n	1000751a <_Z4Gamev.part.0+0x312>
10007516:	2351      	movs	r3, #81	; 0x51
10007518:	54d7      	strb	r7, [r2, r3]
1000751a:	9909      	ldr	r1, [sp, #36]	; 0x24
1000751c:	2900      	cmp	r1, #0
1000751e:	d001      	beq.n	10007524 <_Z4Gamev.part.0+0x31c>
10007520:	2352      	movs	r3, #82	; 0x52
10007522:	54d1      	strb	r1, [r2, r3]
10007524:	990d      	ldr	r1, [sp, #52]	; 0x34
10007526:	2900      	cmp	r1, #0
10007528:	d001      	beq.n	1000752e <_Z4Gamev.part.0+0x326>
1000752a:	2353      	movs	r3, #83	; 0x53
1000752c:	54d1      	strb	r1, [r2, r3]
1000752e:	990e      	ldr	r1, [sp, #56]	; 0x38
10007530:	2900      	cmp	r1, #0
10007532:	d001      	beq.n	10007538 <_Z4Gamev.part.0+0x330>
10007534:	2354      	movs	r3, #84	; 0x54
10007536:	54d1      	strb	r1, [r2, r3]
				Score += BrickScore;
10007538:	4b16      	ldr	r3, [pc, #88]	; (10007594 <_Z4Gamev.part.0+0x38c>)
	DispTileNum(TILE_SCOREV1, Score, COL_WHITE);
1000753a:	22ff      	movs	r2, #255	; 0xff
				Score += BrickScore;
1000753c:	681b      	ldr	r3, [r3, #0]
	DispTileNum(TILE_SCOREV1, Score, COL_WHITE);
1000753e:	202e      	movs	r0, #46	; 0x2e
				Score += BrickScore;
10007540:	9301      	str	r3, [sp, #4]
10007542:	4b15      	ldr	r3, [pc, #84]	; (10007598 <_Z4Gamev.part.0+0x390>)
10007544:	9901      	ldr	r1, [sp, #4]
10007546:	681b      	ldr	r3, [r3, #0]
	for (y = MAPH-2; y > 1; y--)
10007548:	2412      	movs	r4, #18
				Score += BrickScore;
1000754a:	469c      	mov	ip, r3
1000754c:	9302      	str	r3, [sp, #8]
1000754e:	4b11      	ldr	r3, [pc, #68]	; (10007594 <_Z4Gamev.part.0+0x38c>)
10007550:	4461      	add	r1, ip
10007552:	6019      	str	r1, [r3, #0]
	DispTileNum(TILE_SCOREV1, Score, COL_WHITE);
10007554:	f7fe fa14 	bl	10005980 <_Z11DispTileNumhih>
	DispTileNum(TILE_SCOREV3, ScoreBest, COL_YELLOW);
10007558:	4b10      	ldr	r3, [pc, #64]	; (1000759c <_Z4Gamev.part.0+0x394>)
1000755a:	22fc      	movs	r2, #252	; 0xfc
1000755c:	681b      	ldr	r3, [r3, #0]
1000755e:	2042      	movs	r0, #66	; 0x42
10007560:	0019      	movs	r1, r3
10007562:	9301      	str	r3, [sp, #4]
10007564:	f7fe fa0c 	bl	10005980 <_Z11DispTileNumhih>
	DispTileNum(TILE_LINESV1, Lines, COL_WHITE);
10007568:	4b0d      	ldr	r3, [pc, #52]	; (100075a0 <_Z4Gamev.part.0+0x398>)
1000756a:	22ff      	movs	r2, #255	; 0xff
1000756c:	681b      	ldr	r3, [r3, #0]
1000756e:	2030      	movs	r0, #48	; 0x30
10007570:	0019      	movs	r1, r3
10007572:	9301      	str	r3, [sp, #4]
10007574:	f7fe fa04 	bl	10005980 <_Z11DispTileNumhih>
	DispTileNum(TILE_LINESV3, LinesBest, COL_YELLOW);
10007578:	4b0a      	ldr	r3, [pc, #40]	; (100075a4 <_Z4Gamev.part.0+0x39c>)
1000757a:	22fc      	movs	r2, #252	; 0xfc
1000757c:	681b      	ldr	r3, [r3, #0]
1000757e:	e013      	b.n	100075a8 <_Z4Gamev.part.0+0x3a0>
10007580:	20012768 	.word	0x20012768
10007584:	20012766 	.word	0x20012766
10007588:	20012765 	.word	0x20012765
1000758c:	20012764 	.word	0x20012764
10007590:	1000e9f4 	.word	0x1000e9f4
10007594:	20007108 	.word	0x20007108
10007598:	20003498 	.word	0x20003498
1000759c:	2000710c 	.word	0x2000710c
100075a0:	200061f4 	.word	0x200061f4
100075a4:	200061f8 	.word	0x200061f8
100075a8:	2044      	movs	r0, #68	; 0x44
100075aa:	0019      	movs	r1, r3
100075ac:	9301      	str	r3, [sp, #4]
100075ae:	f7fe f9e7 	bl	10005980 <_Z11DispTileNumhih>
	DispTileNum(TILE_SPEEDV1, Level, COL_WHITE);
100075b2:	4bb2      	ldr	r3, [pc, #712]	; (1000787c <_Z4Gamev.part.0+0x674>)
100075b4:	22ff      	movs	r2, #255	; 0xff
100075b6:	7819      	ldrb	r1, [r3, #0]
100075b8:	2032      	movs	r0, #50	; 0x32
100075ba:	f7fe f9e1 	bl	10005980 <_Z11DispTileNumhih>
	DispTileNum(TILE_SPEEDV3, LevelBest, COL_YELLOW);
100075be:	4bb0      	ldr	r3, [pc, #704]	; (10007880 <_Z4Gamev.part.0+0x678>)
100075c0:	22fc      	movs	r2, #252	; 0xfc
100075c2:	7819      	ldrb	r1, [r3, #0]
100075c4:	2046      	movs	r0, #70	; 0x46
100075c6:	f7fe f9db 	bl	10005980 <_Z11DispTileNumhih>
				PlaySound(BrickSnd, sizeof(BrickSnd));
100075ca:	23fe      	movs	r3, #254	; 0xfe
100075cc:	2200      	movs	r2, #0
100075ce:	49ad      	ldr	r1, [pc, #692]	; (10007884 <_Z4Gamev.part.0+0x67c>)
100075d0:	48ad      	ldr	r0, [pc, #692]	; (10007888 <_Z4Gamev.part.0+0x680>)
100075d2:	059b      	lsls	r3, r3, #22
100075d4:	f006 f97e 	bl	1000d8d4 <_Z9PlaySoundPKhihf>
	for (y = MAPH-2; y > 1; y--)
100075d8:	2524      	movs	r5, #36	; 0x24
		s = &Board[y*MAPW + 8];
100075da:	192a      	adds	r2, r5, r4
100075dc:	00d3      	lsls	r3, r2, #3
100075de:	18d2      	adds	r2, r2, r3
			if (*s == TILE_EMPTY)
100075e0:	4659      	mov	r1, fp
		s = &Board[y*MAPW + 8];
100075e2:	465b      	mov	r3, fp
100075e4:	3208      	adds	r2, #8
100075e6:	189b      	adds	r3, r3, r2
			if (*s == TILE_EMPTY)
100075e8:	5c8a      	ldrb	r2, [r1, r2]
100075ea:	2a08      	cmp	r2, #8
100075ec:	d023      	beq.n	10007636 <_Z4Gamev.part.0+0x42e>
100075ee:	785a      	ldrb	r2, [r3, #1]
100075f0:	2a08      	cmp	r2, #8
100075f2:	d020      	beq.n	10007636 <_Z4Gamev.part.0+0x42e>
100075f4:	789a      	ldrb	r2, [r3, #2]
100075f6:	2a08      	cmp	r2, #8
100075f8:	d01d      	beq.n	10007636 <_Z4Gamev.part.0+0x42e>
100075fa:	78da      	ldrb	r2, [r3, #3]
100075fc:	2a08      	cmp	r2, #8
100075fe:	d01a      	beq.n	10007636 <_Z4Gamev.part.0+0x42e>
10007600:	791a      	ldrb	r2, [r3, #4]
10007602:	2a08      	cmp	r2, #8
10007604:	d017      	beq.n	10007636 <_Z4Gamev.part.0+0x42e>
10007606:	795a      	ldrb	r2, [r3, #5]
10007608:	2a08      	cmp	r2, #8
1000760a:	d014      	beq.n	10007636 <_Z4Gamev.part.0+0x42e>
1000760c:	799a      	ldrb	r2, [r3, #6]
1000760e:	2a08      	cmp	r2, #8
10007610:	d011      	beq.n	10007636 <_Z4Gamev.part.0+0x42e>
10007612:	79da      	ldrb	r2, [r3, #7]
10007614:	2a08      	cmp	r2, #8
10007616:	d00e      	beq.n	10007636 <_Z4Gamev.part.0+0x42e>
10007618:	7a1a      	ldrb	r2, [r3, #8]
1000761a:	2a08      	cmp	r2, #8
1000761c:	d00b      	beq.n	10007636 <_Z4Gamev.part.0+0x42e>
1000761e:	7a5b      	ldrb	r3, [r3, #9]
10007620:	2b08      	cmp	r3, #8
10007622:	d008      	beq.n	10007636 <_Z4Gamev.part.0+0x42e>
			DelRow(y);
10007624:	b2e0      	uxtb	r0, r4
10007626:	f7fe fc91 	bl	10005f4c <_Z6DelRowh>
			NextLevel--;
1000762a:	464b      	mov	r3, r9
1000762c:	464a      	mov	r2, r9
1000762e:	681b      	ldr	r3, [r3, #0]
10007630:	3b01      	subs	r3, #1
10007632:	6013      	str	r3, [r2, #0]
	for (y = MAPH-2; y > 1; y--)
10007634:	e7d1      	b.n	100075da <_Z4Gamev.part.0+0x3d2>
10007636:	3c01      	subs	r4, #1
10007638:	2c01      	cmp	r4, #1
1000763a:	d001      	beq.n	10007640 <_Z4Gamev.part.0+0x438>
1000763c:	0065      	lsls	r5, r4, #1
1000763e:	e7cc      	b.n	100075da <_Z4Gamev.part.0+0x3d2>
	if ((NextLevel <= 0) && (Level < LEVELNUM) && !Demo)
10007640:	464b      	mov	r3, r9
10007642:	681b      	ldr	r3, [r3, #0]
10007644:	2b00      	cmp	r3, #0
10007646:	dc01      	bgt.n	1000764c <_Z4Gamev.part.0+0x444>
10007648:	f7fe faf2 	bl	10005c30 <_Z10DelAllRowsv.part.0>
				sleep_ms(50);
1000764c:	2032      	movs	r0, #50	; 0x32
1000764e:	f7fb fa43 	bl	10002ad8 <sleep_ms>
				GenBrick();
10007652:	f7fe fd1d 	bl	10006090 <_Z8GenBrickv>
	if (!CheckBrick(BrickX, BrickY, Brick))
10007656:	2200      	movs	r2, #0
	u8* d = &Board[x + y*MAPW];
10007658:	2400      	movs	r4, #0
	if (!CheckBrick(BrickX, BrickY, Brick))
1000765a:	4b8c      	ldr	r3, [pc, #560]	; (1000788c <_Z4Gamev.part.0+0x684>)
	u8* d = &Board[x + y*MAPW];
1000765c:	498c      	ldr	r1, [pc, #560]	; (10007890 <_Z4Gamev.part.0+0x688>)
	if (!CheckBrick(BrickX, BrickY, Brick))
1000765e:	569a      	ldrsb	r2, [r3, r2]
	u8* d = &Board[x + y*MAPW];
10007660:	570c      	ldrsb	r4, [r1, r4]
10007662:	0051      	lsls	r1, r2, #1
10007664:	1889      	adds	r1, r1, r2
10007666:	00c8      	lsls	r0, r1, #3
10007668:	1809      	adds	r1, r1, r0
1000766a:	1864      	adds	r4, r4, r1
1000766c:	4659      	mov	r1, fp
	const u8* s = &BrickTemp[brick*BRICKTEMPSIZE];
1000766e:	4b89      	ldr	r3, [pc, #548]	; (10007894 <_Z4Gamev.part.0+0x68c>)
	u8* d = &Board[x + y*MAPW];
10007670:	1908      	adds	r0, r1, r4
	const u8* s = &BrickTemp[brick*BRICKTEMPSIZE];
10007672:	781d      	ldrb	r5, [r3, #0]
			b = *s++;
10007674:	4988      	ldr	r1, [pc, #544]	; (10007898 <_Z4Gamev.part.0+0x690>)
	const u8* s = &BrickTemp[brick*BRICKTEMPSIZE];
10007676:	012d      	lsls	r5, r5, #4
10007678:	4b87      	ldr	r3, [pc, #540]	; (10007898 <_Z4Gamev.part.0+0x690>)
			b = *s++;
1000767a:	5d49      	ldrb	r1, [r1, r5]
	const u8* s = &BrickTemp[brick*BRICKTEMPSIZE];
1000767c:	195b      	adds	r3, r3, r5
			b = *s++;
1000767e:	9103      	str	r1, [sp, #12]
				if ((y < 1) || (y >= MAPH-1))
10007680:	b2d2      	uxtb	r2, r2
			if (b != 0)
10007682:	2900      	cmp	r1, #0
10007684:	d100      	bne.n	10007688 <_Z4Gamev.part.0+0x480>
10007686:	e10d      	b.n	100078a4 <_Z4Gamev.part.0+0x69c>
				if ((y < 1) || (y >= MAPH-1))
10007688:	1e51      	subs	r1, r2, #1
1000768a:	2911      	cmp	r1, #17
1000768c:	d900      	bls.n	10007690 <_Z4Gamev.part.0+0x488>
1000768e:	e378      	b.n	10007d82 <_Z4Gamev.part.0+0xb7a>
					if (*d != TILE_EMPTY) ok = False;
10007690:	4659      	mov	r1, fp
10007692:	5d09      	ldrb	r1, [r1, r4]
10007694:	3908      	subs	r1, #8
10007696:	424d      	negs	r5, r1
10007698:	4169      	adcs	r1, r5
			if (b != 0)
1000769a:	785d      	ldrb	r5, [r3, #1]
	Bool ok = True;
1000769c:	b2c9      	uxtb	r1, r1
			if (b != 0)
1000769e:	2d00      	cmp	r5, #0
100076a0:	d000      	beq.n	100076a4 <_Z4Gamev.part.0+0x49c>
100076a2:	e363      	b.n	10007d6c <_Z4Gamev.part.0+0xb64>
100076a4:	789d      	ldrb	r5, [r3, #2]
100076a6:	2d00      	cmp	r5, #0
100076a8:	d100      	bne.n	100076ac <_Z4Gamev.part.0+0x4a4>
100076aa:	e10c      	b.n	100078c6 <_Z4Gamev.part.0+0x6be>
					if (*d != TILE_EMPTY) ok = False;
100076ac:	7885      	ldrb	r5, [r0, #2]
100076ae:	3d08      	subs	r5, #8
100076b0:	426e      	negs	r6, r5
100076b2:	4175      	adcs	r5, r6
100076b4:	426d      	negs	r5, r5
100076b6:	4029      	ands	r1, r5
			if (b != 0)
100076b8:	78dd      	ldrb	r5, [r3, #3]
100076ba:	2d00      	cmp	r5, #0
100076bc:	d005      	beq.n	100076ca <_Z4Gamev.part.0+0x4c2>
					if (*d != TILE_EMPTY) ok = False;
100076be:	78c5      	ldrb	r5, [r0, #3]
100076c0:	3d08      	subs	r5, #8
100076c2:	426e      	negs	r6, r5
100076c4:	4175      	adcs	r5, r6
100076c6:	426d      	negs	r5, r5
100076c8:	4029      	ands	r1, r5
			b = *s++;
100076ca:	791e      	ldrb	r6, [r3, #4]
		y++;
100076cc:	1c55      	adds	r5, r2, #1
100076ce:	b2ed      	uxtb	r5, r5
			b = *s++;
100076d0:	9602      	str	r6, [sp, #8]
			if (b != 0)
100076d2:	2e00      	cmp	r6, #0
100076d4:	d100      	bne.n	100076d8 <_Z4Gamev.part.0+0x4d0>
100076d6:	e106      	b.n	100078e6 <_Z4Gamev.part.0+0x6de>
				if ((y < 1) || (y >= MAPH-1))
100076d8:	2a11      	cmp	r2, #17
100076da:	d900      	bls.n	100076de <_Z4Gamev.part.0+0x4d6>
100076dc:	e2b7      	b.n	10007c4e <_Z4Gamev.part.0+0xa46>
					if (*d != TILE_EMPTY) ok = False;
100076de:	7ec7      	ldrb	r7, [r0, #27]
100076e0:	3f08      	subs	r7, #8
100076e2:	003e      	movs	r6, r7
100076e4:	4277      	negs	r7, r6
100076e6:	4177      	adcs	r7, r6
100076e8:	427f      	negs	r7, r7
100076ea:	4039      	ands	r1, r7
			if (b != 0)
100076ec:	795f      	ldrb	r7, [r3, #5]
100076ee:	2f00      	cmp	r7, #0
100076f0:	d000      	beq.n	100076f4 <_Z4Gamev.part.0+0x4ec>
100076f2:	e0ff      	b.n	100078f4 <_Z4Gamev.part.0+0x6ec>
100076f4:	799f      	ldrb	r7, [r3, #6]
100076f6:	2f00      	cmp	r7, #0
100076f8:	d000      	beq.n	100076fc <_Z4Gamev.part.0+0x4f4>
100076fa:	e106      	b.n	1000790a <_Z4Gamev.part.0+0x702>
100076fc:	79df      	ldrb	r7, [r3, #7]
100076fe:	2f00      	cmp	r7, #0
10007700:	d006      	beq.n	10007710 <_Z4Gamev.part.0+0x508>
					if (*d != TILE_EMPTY) ok = False;
10007702:	7f87      	ldrb	r7, [r0, #30]
					ok = False;
10007704:	3f08      	subs	r7, #8
10007706:	003e      	movs	r6, r7
10007708:	4277      	negs	r7, r6
1000770a:	4177      	adcs	r7, r6
1000770c:	427f      	negs	r7, r7
1000770e:	4039      	ands	r1, r7
		y++;
10007710:	3202      	adds	r2, #2
			b = *s++;
10007712:	7a1f      	ldrb	r7, [r3, #8]
		y++;
10007714:	b2d2      	uxtb	r2, r2
10007716:	9201      	str	r2, [sp, #4]
			if (b != 0)
10007718:	2f00      	cmp	r7, #0
1000771a:	d100      	bne.n	1000771e <_Z4Gamev.part.0+0x516>
1000771c:	e107      	b.n	1000792e <_Z4Gamev.part.0+0x726>
				if ((y < 1) || (y >= MAPH-1))
1000771e:	2d11      	cmp	r5, #17
10007720:	d900      	bls.n	10007724 <_Z4Gamev.part.0+0x51c>
10007722:	e288      	b.n	10007c36 <_Z4Gamev.part.0+0xa2e>
					if (*d != TILE_EMPTY) ok = False;
10007724:	2636      	movs	r6, #54	; 0x36
10007726:	5d86      	ldrb	r6, [r0, r6]
10007728:	46b4      	mov	ip, r6
1000772a:	2608      	movs	r6, #8
1000772c:	4276      	negs	r6, r6
1000772e:	46b2      	mov	sl, r6
10007730:	44d4      	add	ip, sl
10007732:	4662      	mov	r2, ip
10007734:	4256      	negs	r6, r2
10007736:	4156      	adcs	r6, r2
10007738:	4272      	negs	r2, r6
1000773a:	4011      	ands	r1, r2
			if (b != 0)
1000773c:	7a5a      	ldrb	r2, [r3, #9]
1000773e:	2a00      	cmp	r2, #0
10007740:	d000      	beq.n	10007744 <_Z4Gamev.part.0+0x53c>
10007742:	e0fb      	b.n	1000793c <_Z4Gamev.part.0+0x734>
10007744:	7a9d      	ldrb	r5, [r3, #10]
10007746:	2d00      	cmp	r5, #0
10007748:	d000      	beq.n	1000774c <_Z4Gamev.part.0+0x544>
1000774a:	e107      	b.n	1000795c <_Z4Gamev.part.0+0x754>
1000774c:	7add      	ldrb	r5, [r3, #11]
1000774e:	2d00      	cmp	r5, #0
10007750:	d007      	beq.n	10007762 <_Z4Gamev.part.0+0x55a>
					if (*d != TILE_EMPTY) ok = False;
10007752:	2539      	movs	r5, #57	; 0x39
10007754:	5d45      	ldrb	r5, [r0, r5]
					ok = False;
10007756:	3d08      	subs	r5, #8
10007758:	002a      	movs	r2, r5
1000775a:	4255      	negs	r5, r2
1000775c:	4155      	adcs	r5, r2
1000775e:	426d      	negs	r5, r5
10007760:	4029      	ands	r1, r5
			b = *s++;
10007762:	7b1d      	ldrb	r5, [r3, #12]
			if (b != 0)
10007764:	2d00      	cmp	r5, #0
10007766:	d100      	bne.n	1000776a <_Z4Gamev.part.0+0x562>
10007768:	e108      	b.n	1000797c <_Z4Gamev.part.0+0x774>
				if ((y < 1) || (y >= MAPH-1))
1000776a:	9a01      	ldr	r2, [sp, #4]
1000776c:	2a11      	cmp	r2, #17
1000776e:	d81c      	bhi.n	100077aa <_Z4Gamev.part.0+0x5a2>
					if (*d != TILE_EMPTY) ok = False;
10007770:	2251      	movs	r2, #81	; 0x51
10007772:	5c82      	ldrb	r2, [r0, r2]
10007774:	4694      	mov	ip, r2
10007776:	2208      	movs	r2, #8
10007778:	4252      	negs	r2, r2
1000777a:	4692      	mov	sl, r2
1000777c:	44d4      	add	ip, sl
1000777e:	4666      	mov	r6, ip
10007780:	4272      	negs	r2, r6
10007782:	4172      	adcs	r2, r6
10007784:	4252      	negs	r2, r2
10007786:	4011      	ands	r1, r2
			if (b != 0)
10007788:	7b5a      	ldrb	r2, [r3, #13]
1000778a:	2a00      	cmp	r2, #0
1000778c:	d000      	beq.n	10007790 <_Z4Gamev.part.0+0x588>
1000778e:	e0fd      	b.n	1000798c <_Z4Gamev.part.0+0x784>
10007790:	7b9a      	ldrb	r2, [r3, #14]
10007792:	2a00      	cmp	r2, #0
10007794:	d000      	beq.n	10007798 <_Z4Gamev.part.0+0x590>
10007796:	e103      	b.n	100079a0 <_Z4Gamev.part.0+0x798>
10007798:	7bda      	ldrb	r2, [r3, #15]
1000779a:	2a00      	cmp	r2, #0
1000779c:	d100      	bne.n	100077a0 <_Z4Gamev.part.0+0x598>
1000779e:	e2f2      	b.n	10007d86 <_Z4Gamev.part.0+0xb7e>
					if (*d != TILE_EMPTY) ok = False;
100077a0:	2254      	movs	r2, #84	; 0x54
100077a2:	5c82      	ldrb	r2, [r0, r2]
100077a4:	2a08      	cmp	r2, #8
100077a6:	d100      	bne.n	100077aa <_Z4Gamev.part.0+0x5a2>
100077a8:	e2ed      	b.n	10007d86 <_Z4Gamev.part.0+0xb7e>
100077aa:	f7fe f965 	bl	10005a78 <_Z8CheckEndv.part.0>
				if (!CheckEnd())
100077ae:	2800      	cmp	r0, #0
100077b0:	d000      	beq.n	100077b4 <_Z4Gamev.part.0+0x5ac>
100077b2:	e0ff      	b.n	100079b4 <_Z4Gamev.part.0+0x7ac>
					NewGame();
100077b4:	f7ff fc54 	bl	10007060 <_Z7NewGamev>
	memcpy(SaveBoard, Board, MAPSIZE);
100077b8:	2287      	movs	r2, #135	; 0x87
100077ba:	4659      	mov	r1, fp
100077bc:	0092      	lsls	r2, r2, #2
100077be:	4837      	ldr	r0, [pc, #220]	; (1000789c <_Z4Gamev.part.0+0x694>)
100077c0:	f7f9 f8ea 	bl	10000998 <__wrap___aeabi_memcpy>
	memcpy(&Board[MAPW/2-4 + MAPH/2*MAPW], PauseMsg, 8);
100077c4:	4658      	mov	r0, fp
100077c6:	3018      	adds	r0, #24
100077c8:	2208      	movs	r2, #8
100077ca:	25d0      	movs	r5, #208	; 0xd0
100077cc:	4934      	ldr	r1, [pc, #208]	; (100078a0 <_Z4Gamev.part.0+0x698>)
100077ce:	30ff      	adds	r0, #255	; 0xff
100077d0:	f7f9 f8e2 	bl	10000998 <__wrap___aeabi_memcpy>
100077d4:	2401      	movs	r4, #1
100077d6:	062d      	lsls	r5, r5, #24
100077d8:	686b      	ldr	r3, [r5, #4]
100077da:	0d5b      	lsrs	r3, r3, #21
	if (!gpio_get(PB_RT))		// RIGHT
100077dc:	421c      	tst	r4, r3
100077de:	d048      	beq.n	10007872 <_Z4Gamev.part.0+0x66a>
100077e0:	686b      	ldr	r3, [r5, #4]
100077e2:	0c1b      	lsrs	r3, r3, #16
	else if (!gpio_get(PB_UP))	// ROTATE=UP
100077e4:	421c      	tst	r4, r3
100077e6:	d044      	beq.n	10007872 <_Z4Gamev.part.0+0x66a>
100077e8:	686b      	ldr	r3, [r5, #4]
100077ea:	0d1b      	lsrs	r3, r3, #20
	else if (!gpio_get(PB_LT))	// LEFT
100077ec:	421c      	tst	r4, r3
100077ee:	d040      	beq.n	10007872 <_Z4Gamev.part.0+0x66a>
100077f0:	686b      	ldr	r3, [r5, #4]
100077f2:	0c9b      	lsrs	r3, r3, #18
	else if (!gpio_get(PB_DN))	// DROP=DOWN
100077f4:	421c      	tst	r4, r3
100077f6:	d03c      	beq.n	10007872 <_Z4Gamev.part.0+0x66a>
100077f8:	686b      	ldr	r3, [r5, #4]
100077fa:	0c5b      	lsrs	r3, r3, #17
	else if (!gpio_get(PB_FR))	// PAUSE=FIRE
100077fc:	421c      	tst	r4, r3
100077fe:	d038      	beq.n	10007872 <_Z4Gamev.part.0+0x66a>
	char c = getchar_timeout_us(0);
10007800:	2000      	movs	r0, #0
10007802:	f7fa fbed 	bl	10001fe0 <getchar_timeout_us>
	while (GetChar() != 0) {}
10007806:	3801      	subs	r0, #1
10007808:	b2c0      	uxtb	r0, r0
1000780a:	28fd      	cmp	r0, #253	; 0xfd
1000780c:	d9e4      	bls.n	100077d8 <_Z4Gamev.part.0+0x5d0>
1000780e:	25d0      	movs	r5, #208	; 0xd0
10007810:	2664      	movs	r6, #100	; 0x64
10007812:	2401      	movs	r4, #1
10007814:	062d      	lsls	r5, r5, #24
10007816:	e01a      	b.n	1000784e <_Z4Gamev.part.0+0x646>
10007818:	686b      	ldr	r3, [r5, #4]
1000781a:	0d1b      	lsrs	r3, r3, #20
	else if (!gpio_get(PB_LT))	// LEFT
1000781c:	421c      	tst	r4, r3
1000781e:	d01e      	beq.n	1000785e <_Z4Gamev.part.0+0x656>
10007820:	686b      	ldr	r3, [r5, #4]
10007822:	0c9b      	lsrs	r3, r3, #18
	else if (!gpio_get(PB_DN))	// DROP=DOWN
10007824:	421c      	tst	r4, r3
10007826:	d01a      	beq.n	1000785e <_Z4Gamev.part.0+0x656>
10007828:	686b      	ldr	r3, [r5, #4]
1000782a:	0c5b      	lsrs	r3, r3, #17
	else if (!gpio_get(PB_FR))	// PAUSE=FIRE
1000782c:	421c      	tst	r4, r3
1000782e:	d016      	beq.n	1000785e <_Z4Gamev.part.0+0x656>
	char c = getchar_timeout_us(0);
10007830:	2000      	movs	r0, #0
10007832:	f7fa fbd5 	bl	10001fe0 <getchar_timeout_us>
		if (GetChar() != 0) break;
10007836:	3801      	subs	r0, #1
10007838:	b2c0      	uxtb	r0, r0
1000783a:	28fd      	cmp	r0, #253	; 0xfd
1000783c:	d912      	bls.n	10007864 <_Z4Gamev.part.0+0x65c>
		sleep_ms(100);
1000783e:	2064      	movs	r0, #100	; 0x64
	for (i = (timeout ? 100 : 1000000000) ; i > 0; i--)
10007840:	3e01      	subs	r6, #1
		sleep_ms(100);
10007842:	f7fb f949 	bl	10002ad8 <sleep_ms>
	for (i = (timeout ? 100 : 1000000000) ; i > 0; i--)
10007846:	2e00      	cmp	r6, #0
10007848:	d101      	bne.n	1000784e <_Z4Gamev.part.0+0x646>
1000784a:	f000 fcab 	bl	100081a4 <_Z4Gamev.part.0+0xf9c>
1000784e:	686b      	ldr	r3, [r5, #4]
10007850:	0d5b      	lsrs	r3, r3, #21
	if (!gpio_get(PB_RT))		// RIGHT
10007852:	421c      	tst	r4, r3
10007854:	d003      	beq.n	1000785e <_Z4Gamev.part.0+0x656>
10007856:	686b      	ldr	r3, [r5, #4]
10007858:	0c1b      	lsrs	r3, r3, #16
	else if (!gpio_get(PB_UP))	// ROTATE=UP
1000785a:	421c      	tst	r4, r3
1000785c:	d1dc      	bne.n	10007818 <_Z4Gamev.part.0+0x610>
		sleep_ms(250);
1000785e:	20fa      	movs	r0, #250	; 0xfa
10007860:	f7fb f93a 	bl	10002ad8 <sleep_ms>
	memcpy(Board, SaveBoard, MAPSIZE);
10007864:	2287      	movs	r2, #135	; 0x87
10007866:	4658      	mov	r0, fp
10007868:	490c      	ldr	r1, [pc, #48]	; (1000789c <_Z4Gamev.part.0+0x694>)
1000786a:	0092      	lsls	r2, r2, #2
1000786c:	f7f9 f894 	bl	10000998 <__wrap___aeabi_memcpy>
	return i > 0; // i > 0 if continue with user
10007870:	e4de      	b.n	10007230 <_Z4Gamev.part.0+0x28>
		sleep_ms(250);
10007872:	20fa      	movs	r0, #250	; 0xfa
10007874:	f7fb f930 	bl	10002ad8 <sleep_ms>
		return (rVal);
10007878:	e7ae      	b.n	100077d8 <_Z4Gamev.part.0+0x5d0>
1000787a:	46c0      	nop			; (mov r8, r8)
1000787c:	2001276b 	.word	0x2001276b
10007880:	2001276c 	.word	0x2001276c
10007884:	00000932 	.word	0x00000932
10007888:	10018d24 	.word	0x10018d24
1000788c:	20012766 	.word	0x20012766
10007890:	20012765 	.word	0x20012765
10007894:	20012764 	.word	0x20012764
10007898:	1000e9f4 	.word	0x1000e9f4
1000789c:	20006c2c 	.word	0x20006c2c
100078a0:	1000e6a8 	.word	0x1000e6a8
	Bool ok = True;
100078a4:	2101      	movs	r1, #1
			if (b != 0)
100078a6:	785d      	ldrb	r5, [r3, #1]
100078a8:	2d00      	cmp	r5, #0
100078aa:	d004      	beq.n	100078b6 <_Z4Gamev.part.0+0x6ae>
				if ((y < 1) || (y >= MAPH-1))
100078ac:	1e55      	subs	r5, r2, #1
100078ae:	2d11      	cmp	r5, #17
100078b0:	d800      	bhi.n	100078b4 <_Z4Gamev.part.0+0x6ac>
100078b2:	e25b      	b.n	10007d6c <_Z4Gamev.part.0+0xb64>
					ok = False;
100078b4:	2100      	movs	r1, #0
			if (b != 0)
100078b6:	789d      	ldrb	r5, [r3, #2]
100078b8:	2d00      	cmp	r5, #0
100078ba:	d004      	beq.n	100078c6 <_Z4Gamev.part.0+0x6be>
				if ((y < 1) || (y >= MAPH-1))
100078bc:	1e55      	subs	r5, r2, #1
100078be:	2d11      	cmp	r5, #17
100078c0:	d800      	bhi.n	100078c4 <_Z4Gamev.part.0+0x6bc>
100078c2:	e6f3      	b.n	100076ac <_Z4Gamev.part.0+0x4a4>
					ok = False;
100078c4:	2100      	movs	r1, #0
			if (b != 0)
100078c6:	78dd      	ldrb	r5, [r3, #3]
100078c8:	2d00      	cmp	r5, #0
100078ca:	d100      	bne.n	100078ce <_Z4Gamev.part.0+0x6c6>
100078cc:	e6fd      	b.n	100076ca <_Z4Gamev.part.0+0x4c2>
				if ((y < 1) || (y >= MAPH-1))
100078ce:	1e55      	subs	r5, r2, #1
100078d0:	2d11      	cmp	r5, #17
100078d2:	d800      	bhi.n	100078d6 <_Z4Gamev.part.0+0x6ce>
100078d4:	e6f3      	b.n	100076be <_Z4Gamev.part.0+0x4b6>
			b = *s++;
100078d6:	791e      	ldrb	r6, [r3, #4]
		y++;
100078d8:	1c55      	adds	r5, r2, #1
					ok = False;
100078da:	2100      	movs	r1, #0
		y++;
100078dc:	b2ed      	uxtb	r5, r5
			b = *s++;
100078de:	9602      	str	r6, [sp, #8]
			if (b != 0)
100078e0:	2e00      	cmp	r6, #0
100078e2:	d000      	beq.n	100078e6 <_Z4Gamev.part.0+0x6de>
100078e4:	e6f8      	b.n	100076d8 <_Z4Gamev.part.0+0x4d0>
			b = *s++;
100078e6:	795f      	ldrb	r7, [r3, #5]
			if (b != 0)
100078e8:	2f00      	cmp	r7, #0
100078ea:	d100      	bne.n	100078ee <_Z4Gamev.part.0+0x6e6>
100078ec:	e225      	b.n	10007d3a <_Z4Gamev.part.0+0xb32>
				if ((y < 1) || (y >= MAPH-1))
100078ee:	2a11      	cmp	r2, #17
100078f0:	d900      	bls.n	100078f4 <_Z4Gamev.part.0+0x6ec>
100078f2:	e1b0      	b.n	10007c56 <_Z4Gamev.part.0+0xa4e>
					if (*d != TILE_EMPTY) ok = False;
100078f4:	7f07      	ldrb	r7, [r0, #28]
100078f6:	3f08      	subs	r7, #8
100078f8:	003e      	movs	r6, r7
100078fa:	4277      	negs	r7, r6
100078fc:	4177      	adcs	r7, r6
100078fe:	427f      	negs	r7, r7
10007900:	4039      	ands	r1, r7
			if (b != 0)
10007902:	799f      	ldrb	r7, [r3, #6]
10007904:	2f00      	cmp	r7, #0
10007906:	d100      	bne.n	1000790a <_Z4Gamev.part.0+0x702>
10007908:	e1a8      	b.n	10007c5c <_Z4Gamev.part.0+0xa54>
					if (*d != TILE_EMPTY) ok = False;
1000790a:	7f47      	ldrb	r7, [r0, #29]
1000790c:	3f08      	subs	r7, #8
1000790e:	003e      	movs	r6, r7
10007910:	4277      	negs	r7, r6
10007912:	4177      	adcs	r7, r6
10007914:	427f      	negs	r7, r7
10007916:	4039      	ands	r1, r7
			if (b != 0)
10007918:	79df      	ldrb	r7, [r3, #7]
1000791a:	2f00      	cmp	r7, #0
1000791c:	d000      	beq.n	10007920 <_Z4Gamev.part.0+0x718>
1000791e:	e6f0      	b.n	10007702 <_Z4Gamev.part.0+0x4fa>
		y++;
10007920:	3202      	adds	r2, #2
			b = *s++;
10007922:	7a1f      	ldrb	r7, [r3, #8]
		y++;
10007924:	b2d2      	uxtb	r2, r2
10007926:	9201      	str	r2, [sp, #4]
			if (b != 0)
10007928:	2f00      	cmp	r7, #0
1000792a:	d000      	beq.n	1000792e <_Z4Gamev.part.0+0x726>
1000792c:	e6f7      	b.n	1000771e <_Z4Gamev.part.0+0x516>
			b = *s++;
1000792e:	7a5e      	ldrb	r6, [r3, #9]
			if (b != 0)
10007930:	2e00      	cmp	r6, #0
10007932:	d100      	bne.n	10007936 <_Z4Gamev.part.0+0x72e>
10007934:	e209      	b.n	10007d4a <_Z4Gamev.part.0+0xb42>
				if ((y < 1) || (y >= MAPH-1))
10007936:	2d11      	cmp	r5, #17
10007938:	d900      	bls.n	1000793c <_Z4Gamev.part.0+0x734>
1000793a:	e17c      	b.n	10007c36 <_Z4Gamev.part.0+0xa2e>
					if (*d != TILE_EMPTY) ok = False;
1000793c:	2237      	movs	r2, #55	; 0x37
1000793e:	5c82      	ldrb	r2, [r0, r2]
10007940:	4694      	mov	ip, r2
10007942:	2208      	movs	r2, #8
10007944:	4252      	negs	r2, r2
10007946:	4692      	mov	sl, r2
10007948:	44d4      	add	ip, sl
1000794a:	4666      	mov	r6, ip
1000794c:	4272      	negs	r2, r6
1000794e:	4172      	adcs	r2, r6
10007950:	4252      	negs	r2, r2
10007952:	4011      	ands	r1, r2
			if (b != 0)
10007954:	7a9a      	ldrb	r2, [r3, #10]
10007956:	2a00      	cmp	r2, #0
10007958:	d100      	bne.n	1000795c <_Z4Gamev.part.0+0x754>
1000795a:	e16f      	b.n	10007c3c <_Z4Gamev.part.0+0xa34>
					if (*d != TILE_EMPTY) ok = False;
1000795c:	2538      	movs	r5, #56	; 0x38
1000795e:	5d45      	ldrb	r5, [r0, r5]
10007960:	3d08      	subs	r5, #8
10007962:	002a      	movs	r2, r5
10007964:	4255      	negs	r5, r2
10007966:	4155      	adcs	r5, r2
10007968:	426d      	negs	r5, r5
1000796a:	4029      	ands	r1, r5
			if (b != 0)
1000796c:	7add      	ldrb	r5, [r3, #11]
1000796e:	2d00      	cmp	r5, #0
10007970:	d000      	beq.n	10007974 <_Z4Gamev.part.0+0x76c>
10007972:	e6ee      	b.n	10007752 <_Z4Gamev.part.0+0x54a>
			b = *s++;
10007974:	7b1d      	ldrb	r5, [r3, #12]
			if (b != 0)
10007976:	2d00      	cmp	r5, #0
10007978:	d000      	beq.n	1000797c <_Z4Gamev.part.0+0x774>
1000797a:	e6f6      	b.n	1000776a <_Z4Gamev.part.0+0x562>
1000797c:	7b5e      	ldrb	r6, [r3, #13]
1000797e:	2e00      	cmp	r6, #0
10007980:	d100      	bne.n	10007984 <_Z4Gamev.part.0+0x77c>
10007982:	e1eb      	b.n	10007d5c <_Z4Gamev.part.0+0xb54>
				if ((y < 1) || (y >= MAPH-1))
10007984:	9a01      	ldr	r2, [sp, #4]
10007986:	2a11      	cmp	r2, #17
10007988:	d900      	bls.n	1000798c <_Z4Gamev.part.0+0x784>
1000798a:	e70e      	b.n	100077aa <_Z4Gamev.part.0+0x5a2>
					if (*d != TILE_EMPTY) ok = False;
1000798c:	2252      	movs	r2, #82	; 0x52
1000798e:	5c82      	ldrb	r2, [r0, r2]
10007990:	2a08      	cmp	r2, #8
10007992:	d100      	bne.n	10007996 <_Z4Gamev.part.0+0x78e>
10007994:	e25c      	b.n	10007e50 <_Z4Gamev.part.0+0xc48>
			if (b != 0)
10007996:	7b9a      	ldrb	r2, [r3, #14]
10007998:	2a00      	cmp	r2, #0
1000799a:	d100      	bne.n	1000799e <_Z4Gamev.part.0+0x796>
1000799c:	e705      	b.n	100077aa <_Z4Gamev.part.0+0x5a2>
					if (*d != TILE_EMPTY) ok = False;
1000799e:	2100      	movs	r1, #0
100079a0:	2253      	movs	r2, #83	; 0x53
100079a2:	5c82      	ldrb	r2, [r0, r2]
100079a4:	2a08      	cmp	r2, #8
100079a6:	d100      	bne.n	100079aa <_Z4Gamev.part.0+0x7a2>
100079a8:	e6f6      	b.n	10007798 <_Z4Gamev.part.0+0x590>
100079aa:	f7fe f865 	bl	10005a78 <_Z8CheckEndv.part.0>
				if (!CheckEnd())
100079ae:	2800      	cmp	r0, #0
100079b0:	d100      	bne.n	100079b4 <_Z4Gamev.part.0+0x7ac>
100079b2:	e6ff      	b.n	100077b4 <_Z4Gamev.part.0+0x5ac>
	u8* d = &Board[x + y*MAPW];
100079b4:	49c9      	ldr	r1, [pc, #804]	; (10007cdc <_Z4Gamev.part.0+0xad4>)
	const u8* s = &BrickTemp[brick*BRICKTEMPSIZE];
100079b6:	4bca      	ldr	r3, [pc, #808]	; (10007ce0 <_Z4Gamev.part.0+0xad8>)
	u8* d = &Board[x + y*MAPW];
100079b8:	7809      	ldrb	r1, [r1, #0]
	const u8* s = &BrickTemp[brick*BRICKTEMPSIZE];
100079ba:	781a      	ldrb	r2, [r3, #0]
	u8* d = &Board[x + y*MAPW];
100079bc:	b249      	sxtb	r1, r1
100079be:	004c      	lsls	r4, r1, #1
100079c0:	1864      	adds	r4, r4, r1
100079c2:	00e1      	lsls	r1, r4, #3
100079c4:	1864      	adds	r4, r4, r1
100079c6:	49c7      	ldr	r1, [pc, #796]	; (10007ce4 <_Z4Gamev.part.0+0xadc>)
	const u8* s = &BrickTemp[brick*BRICKTEMPSIZE];
100079c8:	4bc7      	ldr	r3, [pc, #796]	; (10007ce8 <_Z4Gamev.part.0+0xae0>)
	u8* d = &Board[x + y*MAPW];
100079ca:	7809      	ldrb	r1, [r1, #0]
	const u8* s = &BrickTemp[brick*BRICKTEMPSIZE];
100079cc:	0112      	lsls	r2, r2, #4
	u8* d = &Board[x + y*MAPW];
100079ce:	b249      	sxtb	r1, r1
100079d0:	1864      	adds	r4, r4, r1
100079d2:	4659      	mov	r1, fp
100079d4:	1908      	adds	r0, r1, r4
			b = *s++;
100079d6:	49c4      	ldr	r1, [pc, #784]	; (10007ce8 <_Z4Gamev.part.0+0xae0>)
	const u8* s = &BrickTemp[brick*BRICKTEMPSIZE];
100079d8:	189b      	adds	r3, r3, r2
			b = *s++;
100079da:	5c8a      	ldrb	r2, [r1, r2]
100079dc:	7a1f      	ldrb	r7, [r3, #8]
100079de:	9203      	str	r2, [sp, #12]
100079e0:	791a      	ldrb	r2, [r3, #4]
100079e2:	7b1d      	ldrb	r5, [r3, #12]
100079e4:	9202      	str	r2, [sp, #8]
100079e6:	e1d1      	b.n	10007d8c <_Z4Gamev.part.0+0xb84>
			if (b != 0)
100079e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
100079ea:	2b00      	cmp	r3, #0
100079ec:	d100      	bne.n	100079f0 <_Z4Gamev.part.0+0x7e8>
100079ee:	e190      	b.n	10007d12 <_Z4Gamev.part.0+0xb0a>
				if ((y < 1) || (y >= MAPH-1))
100079f0:	4653      	mov	r3, sl
100079f2:	2b11      	cmp	r3, #17
100079f4:	d900      	bls.n	100079f8 <_Z4Gamev.part.0+0x7f0>
100079f6:	e557      	b.n	100074a8 <_Z4Gamev.part.0+0x2a0>
					if (*d != TILE_EMPTY) ok = False;
100079f8:	2352      	movs	r3, #82	; 0x52
100079fa:	5cc3      	ldrb	r3, [r0, r3]
100079fc:	2b08      	cmp	r3, #8
100079fe:	d000      	beq.n	10007a02 <_Z4Gamev.part.0+0x7fa>
10007a00:	e548      	b.n	10007494 <_Z4Gamev.part.0+0x28c>
			if (b != 0)
10007a02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
10007a04:	2b00      	cmp	r3, #0
10007a06:	d000      	beq.n	10007a0a <_Z4Gamev.part.0+0x802>
10007a08:	e548      	b.n	1000749c <_Z4Gamev.part.0+0x294>
10007a0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
10007a0c:	2b00      	cmp	r3, #0
10007a0e:	d008      	beq.n	10007a22 <_Z4Gamev.part.0+0x81a>
				if ((y < 1) || (y >= MAPH-1))
10007a10:	4653      	mov	r3, sl
10007a12:	2b11      	cmp	r3, #17
10007a14:	d900      	bls.n	10007a18 <_Z4Gamev.part.0+0x810>
10007a16:	e547      	b.n	100074a8 <_Z4Gamev.part.0+0x2a0>
					if (*d != TILE_EMPTY) ok = False;
10007a18:	2354      	movs	r3, #84	; 0x54
10007a1a:	5cc3      	ldrb	r3, [r0, r3]
10007a1c:	2b08      	cmp	r3, #8
10007a1e:	d000      	beq.n	10007a22 <_Z4Gamev.part.0+0x81a>
10007a20:	e542      	b.n	100074a8 <_Z4Gamev.part.0+0x2a0>
			if (!CheckBrick(BrickX, BrickY+1, Brick))
10007a22:	2900      	cmp	r1, #0
10007a24:	d100      	bne.n	10007a28 <_Z4Gamev.part.0+0x820>
10007a26:	e53f      	b.n	100074a8 <_Z4Gamev.part.0+0x2a0>
				BrickY++;
10007a28:	4bac      	ldr	r3, [pc, #688]	; (10007cdc <_Z4Gamev.part.0+0xad4>)
10007a2a:	9a12      	ldr	r2, [sp, #72]	; 0x48
10007a2c:	701a      	strb	r2, [r3, #0]
			if (b != 0) *d = b;
10007a2e:	9b01      	ldr	r3, [sp, #4]
10007a30:	2b00      	cmp	r3, #0
10007a32:	d002      	beq.n	10007a3a <_Z4Gamev.part.0+0x832>
10007a34:	465a      	mov	r2, fp
10007a36:	9913      	ldr	r1, [sp, #76]	; 0x4c
10007a38:	5453      	strb	r3, [r2, r1]
10007a3a:	9b02      	ldr	r3, [sp, #8]
10007a3c:	2b00      	cmp	r3, #0
10007a3e:	d000      	beq.n	10007a42 <_Z4Gamev.part.0+0x83a>
10007a40:	7043      	strb	r3, [r0, #1]
10007a42:	9b06      	ldr	r3, [sp, #24]
10007a44:	2b00      	cmp	r3, #0
10007a46:	d000      	beq.n	10007a4a <_Z4Gamev.part.0+0x842>
10007a48:	7083      	strb	r3, [r0, #2]
10007a4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10007a4c:	2b00      	cmp	r3, #0
10007a4e:	d000      	beq.n	10007a52 <_Z4Gamev.part.0+0x84a>
10007a50:	70c3      	strb	r3, [r0, #3]
10007a52:	9b03      	ldr	r3, [sp, #12]
10007a54:	2b00      	cmp	r3, #0
10007a56:	d000      	beq.n	10007a5a <_Z4Gamev.part.0+0x852>
10007a58:	76c3      	strb	r3, [r0, #27]
10007a5a:	9b04      	ldr	r3, [sp, #16]
10007a5c:	2b00      	cmp	r3, #0
10007a5e:	d000      	beq.n	10007a62 <_Z4Gamev.part.0+0x85a>
10007a60:	7703      	strb	r3, [r0, #28]
10007a62:	9b07      	ldr	r3, [sp, #28]
10007a64:	2b00      	cmp	r3, #0
10007a66:	d000      	beq.n	10007a6a <_Z4Gamev.part.0+0x862>
10007a68:	7743      	strb	r3, [r0, #29]
10007a6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
10007a6c:	2b00      	cmp	r3, #0
10007a6e:	d000      	beq.n	10007a72 <_Z4Gamev.part.0+0x86a>
10007a70:	7783      	strb	r3, [r0, #30]
10007a72:	9a05      	ldr	r2, [sp, #20]
10007a74:	2a00      	cmp	r2, #0
10007a76:	d001      	beq.n	10007a7c <_Z4Gamev.part.0+0x874>
10007a78:	2336      	movs	r3, #54	; 0x36
10007a7a:	54c2      	strb	r2, [r0, r3]
10007a7c:	2e00      	cmp	r6, #0
10007a7e:	d001      	beq.n	10007a84 <_Z4Gamev.part.0+0x87c>
10007a80:	2337      	movs	r3, #55	; 0x37
10007a82:	54c6      	strb	r6, [r0, r3]
10007a84:	9a08      	ldr	r2, [sp, #32]
10007a86:	2a00      	cmp	r2, #0
10007a88:	d001      	beq.n	10007a8e <_Z4Gamev.part.0+0x886>
10007a8a:	2338      	movs	r3, #56	; 0x38
10007a8c:	54c2      	strb	r2, [r0, r3]
10007a8e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
10007a90:	2a00      	cmp	r2, #0
10007a92:	d001      	beq.n	10007a98 <_Z4Gamev.part.0+0x890>
10007a94:	2339      	movs	r3, #57	; 0x39
10007a96:	54c2      	strb	r2, [r0, r3]
10007a98:	2f00      	cmp	r7, #0
10007a9a:	d001      	beq.n	10007aa0 <_Z4Gamev.part.0+0x898>
10007a9c:	2351      	movs	r3, #81	; 0x51
10007a9e:	54c7      	strb	r7, [r0, r3]
10007aa0:	9a09      	ldr	r2, [sp, #36]	; 0x24
10007aa2:	2a00      	cmp	r2, #0
10007aa4:	d001      	beq.n	10007aaa <_Z4Gamev.part.0+0x8a2>
10007aa6:	2352      	movs	r3, #82	; 0x52
10007aa8:	54c2      	strb	r2, [r0, r3]
10007aaa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
10007aac:	2a00      	cmp	r2, #0
10007aae:	d001      	beq.n	10007ab4 <_Z4Gamev.part.0+0x8ac>
10007ab0:	2353      	movs	r3, #83	; 0x53
10007ab2:	54c2      	strb	r2, [r0, r3]
10007ab4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
10007ab6:	2a00      	cmp	r2, #0
10007ab8:	d001      	beq.n	10007abe <_Z4Gamev.part.0+0x8b6>
10007aba:	2354      	movs	r3, #84	; 0x54
10007abc:	54c2      	strb	r2, [r0, r3]
				SpeedCnt = Falling ? SPEEDFALL : StepSpeed;
10007abe:	4c8b      	ldr	r4, [pc, #556]	; (10007cec <_Z4Gamev.part.0+0xae4>)
10007ac0:	7823      	ldrb	r3, [r4, #0]
10007ac2:	2b00      	cmp	r3, #0
10007ac4:	d000      	beq.n	10007ac8 <_Z4Gamev.part.0+0x8c0>
10007ac6:	e1b7      	b.n	10007e38 <_Z4Gamev.part.0+0xc30>
10007ac8:	4642      	mov	r2, r8
10007aca:	4b89      	ldr	r3, [pc, #548]	; (10007cf0 <_Z4Gamev.part.0+0xae8>)
10007acc:	681b      	ldr	r3, [r3, #0]
10007ace:	6013      	str	r3, [r2, #0]
				if (!Falling && (BrickScore > 0)) BrickScore--;
10007ad0:	4b88      	ldr	r3, [pc, #544]	; (10007cf4 <_Z4Gamev.part.0+0xaec>)
10007ad2:	681b      	ldr	r3, [r3, #0]
10007ad4:	2b00      	cmp	r3, #0
10007ad6:	dd02      	ble.n	10007ade <_Z4Gamev.part.0+0x8d6>
10007ad8:	4a86      	ldr	r2, [pc, #536]	; (10007cf4 <_Z4Gamev.part.0+0xaec>)
10007ada:	3b01      	subs	r3, #1
10007adc:	6013      	str	r3, [r2, #0]
10007ade:	23d0      	movs	r3, #208	; 0xd0
10007ae0:	061b      	lsls	r3, r3, #24
10007ae2:	6859      	ldr	r1, [r3, #4]
10007ae4:	2201      	movs	r2, #1
	if (!gpio_get(PB_RT))		// RIGHT
10007ae6:	0289      	lsls	r1, r1, #10
10007ae8:	d400      	bmi.n	10007aec <_Z4Gamev.part.0+0x8e4>
10007aea:	e375      	b.n	100081d8 <_Z4Gamev.part.0+0xfd0>
10007aec:	6859      	ldr	r1, [r3, #4]
10007aee:	0c09      	lsrs	r1, r1, #16
	else if (!gpio_get(PB_UP))	// ROTATE=UP
10007af0:	420a      	tst	r2, r1
10007af2:	d100      	bne.n	10007af6 <_Z4Gamev.part.0+0x8ee>
10007af4:	e1c6      	b.n	10007e84 <_Z4Gamev.part.0+0xc7c>
10007af6:	6859      	ldr	r1, [r3, #4]
10007af8:	0d09      	lsrs	r1, r1, #20
	else if (!gpio_get(PB_LT))	// LEFT
10007afa:	420a      	tst	r2, r1
10007afc:	d101      	bne.n	10007b02 <_Z4Gamev.part.0+0x8fa>
10007afe:	f000 fcb9 	bl	10008474 <_Z4Gamev.part.0+0x126c>
10007b02:	6859      	ldr	r1, [r3, #4]
10007b04:	0c89      	lsrs	r1, r1, #18
	else if (!gpio_get(PB_DN))	// DROP=DOWN
10007b06:	420a      	tst	r2, r1
10007b08:	d100      	bne.n	10007b0c <_Z4Gamev.part.0+0x904>
10007b0a:	e18a      	b.n	10007e22 <_Z4Gamev.part.0+0xc1a>
10007b0c:	685b      	ldr	r3, [r3, #4]
10007b0e:	0c5b      	lsrs	r3, r3, #17
	else if (!gpio_get(PB_FR))	// PAUSE=FIRE
10007b10:	421a      	tst	r2, r3
10007b12:	d101      	bne.n	10007b18 <_Z4Gamev.part.0+0x910>
10007b14:	f000 fdb0 	bl	10008678 <_Z4Gamev.part.0+0x1470>
	char c = getchar_timeout_us(0);
10007b18:	2000      	movs	r0, #0
10007b1a:	f7fa fa61 	bl	10001fe0 <getchar_timeout_us>
10007b1e:	b2c0      	uxtb	r0, r0
	if (c == (char)PICO_ERROR_TIMEOUT) c = 0;
10007b20:	28ff      	cmp	r0, #255	; 0xff
10007b22:	d101      	bne.n	10007b28 <_Z4Gamev.part.0+0x920>
10007b24:	f7ff fb8a 	bl	1000723c <_Z4Gamev.part.0+0x34>
	if ((c >= 'a') && (c <= 'z')) c -= 32;
10007b28:	0003      	movs	r3, r0
10007b2a:	3b61      	subs	r3, #97	; 0x61
10007b2c:	2b19      	cmp	r3, #25
10007b2e:	d901      	bls.n	10007b34 <_Z4Gamev.part.0+0x92c>
10007b30:	f000 ff7d 	bl	10008a2e <_Z4Gamev.part.0+0x1826>
10007b34:	3820      	subs	r0, #32
10007b36:	b2c0      	uxtb	r0, r0
		{
			// keyboard
			ch = GetChar();
			switch (ch)
10007b38:	3820      	subs	r0, #32
10007b3a:	b2c0      	uxtb	r0, r0
10007b3c:	282c      	cmp	r0, #44	; 0x2c
10007b3e:	d901      	bls.n	10007b44 <_Z4Gamev.part.0+0x93c>
10007b40:	f000 fe64 	bl	1000880c <_Z4Gamev.part.0+0x1604>
10007b44:	4b6c      	ldr	r3, [pc, #432]	; (10007cf8 <_Z4Gamev.part.0+0xaf0>)
10007b46:	0080      	lsls	r0, r0, #2
10007b48:	581b      	ldr	r3, [r3, r0]
10007b4a:	469f      	mov	pc, r3
			if (b != 0)
10007b4c:	2e00      	cmp	r6, #0
10007b4e:	d15a      	bne.n	10007c06 <_Z4Gamev.part.0+0x9fe>
10007b50:	9b08      	ldr	r3, [sp, #32]
10007b52:	2b00      	cmp	r3, #0
10007b54:	d065      	beq.n	10007c22 <_Z4Gamev.part.0+0xa1a>
				if ((y < 1) || (y >= MAPH-1))
10007b56:	9b10      	ldr	r3, [sp, #64]	; 0x40
10007b58:	2b11      	cmp	r3, #17
10007b5a:	d86a      	bhi.n	10007c32 <_Z4Gamev.part.0+0xa2a>
					if (*d != TILE_EMPTY) ok = False;
10007b5c:	2338      	movs	r3, #56	; 0x38
10007b5e:	5cc3      	ldrb	r3, [r0, r3]
10007b60:	3b08      	subs	r3, #8
10007b62:	001c      	movs	r4, r3
10007b64:	4263      	negs	r3, r4
10007b66:	4163      	adcs	r3, r4
10007b68:	425b      	negs	r3, r3
10007b6a:	4019      	ands	r1, r3
			if (b != 0)
10007b6c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
10007b6e:	2b00      	cmp	r3, #0
10007b70:	d000      	beq.n	10007b74 <_Z4Gamev.part.0+0x96c>
10007b72:	e47b      	b.n	1000746c <_Z4Gamev.part.0+0x264>
10007b74:	e482      	b.n	1000747c <_Z4Gamev.part.0+0x274>
10007b76:	9c04      	ldr	r4, [sp, #16]
10007b78:	2c00      	cmp	r4, #0
10007b7a:	d128      	bne.n	10007bce <_Z4Gamev.part.0+0x9c6>
10007b7c:	9c07      	ldr	r4, [sp, #28]
10007b7e:	2c00      	cmp	r4, #0
10007b80:	d037      	beq.n	10007bf2 <_Z4Gamev.part.0+0x9ea>
				if ((y < 1) || (y >= MAPH-1))
10007b82:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
10007b84:	2c11      	cmp	r4, #17
10007b86:	d83c      	bhi.n	10007c02 <_Z4Gamev.part.0+0x9fa>
					if (*d != TILE_EMPTY) ok = False;
10007b88:	7f44      	ldrb	r4, [r0, #29]
10007b8a:	46a4      	mov	ip, r4
10007b8c:	2408      	movs	r4, #8
10007b8e:	4264      	negs	r4, r4
10007b90:	46a2      	mov	sl, r4
10007b92:	44d4      	add	ip, sl
10007b94:	4665      	mov	r5, ip
10007b96:	426c      	negs	r4, r5
10007b98:	416c      	adcs	r4, r5
10007b9a:	4264      	negs	r4, r4
10007b9c:	4021      	ands	r1, r4
			if (b != 0)
10007b9e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
10007ba0:	2c00      	cmp	r4, #0
10007ba2:	d000      	beq.n	10007ba6 <_Z4Gamev.part.0+0x99e>
10007ba4:	e439      	b.n	1000741a <_Z4Gamev.part.0+0x212>
10007ba6:	e443      	b.n	10007430 <_Z4Gamev.part.0+0x228>
10007ba8:	9902      	ldr	r1, [sp, #8]
10007baa:	2900      	cmp	r1, #0
10007bac:	d15f      	bne.n	10007c6e <_Z4Gamev.part.0+0xa66>
10007bae:	9906      	ldr	r1, [sp, #24]
10007bb0:	2900      	cmp	r1, #0
10007bb2:	d000      	beq.n	10007bb6 <_Z4Gamev.part.0+0x9ae>
10007bb4:	e145      	b.n	10007e42 <_Z4Gamev.part.0+0xc3a>
	Bool ok = True;
10007bb6:	3101      	adds	r1, #1
			if (b != 0)
10007bb8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
10007bba:	2c00      	cmp	r4, #0
10007bbc:	d100      	bne.n	10007bc0 <_Z4Gamev.part.0+0x9b8>
10007bbe:	e40a      	b.n	100073d6 <_Z4Gamev.part.0+0x1ce>
				if ((y < 1) || (y >= MAPH-1))
10007bc0:	2b11      	cmp	r3, #17
10007bc2:	d801      	bhi.n	10007bc8 <_Z4Gamev.part.0+0x9c0>
10007bc4:	f7ff fbfc 	bl	100073c0 <_Z4Gamev.part.0+0x1b8>
					ok = False;
10007bc8:	2100      	movs	r1, #0
10007bca:	f7ff fc04 	bl	100073d6 <_Z4Gamev.part.0+0x1ce>
				if ((y < 1) || (y >= MAPH-1))
10007bce:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
10007bd0:	2c11      	cmp	r4, #17
10007bd2:	d900      	bls.n	10007bd6 <_Z4Gamev.part.0+0x9ce>
10007bd4:	e096      	b.n	10007d04 <_Z4Gamev.part.0+0xafc>
					if (*d != TILE_EMPTY) ok = False;
10007bd6:	7f04      	ldrb	r4, [r0, #28]
10007bd8:	46a4      	mov	ip, r4
10007bda:	2408      	movs	r4, #8
10007bdc:	4264      	negs	r4, r4
10007bde:	46a2      	mov	sl, r4
10007be0:	44d4      	add	ip, sl
10007be2:	4665      	mov	r5, ip
10007be4:	426c      	negs	r4, r5
10007be6:	416c      	adcs	r4, r5
10007be8:	4264      	negs	r4, r4
10007bea:	4021      	ands	r1, r4
			if (b != 0)
10007bec:	9c07      	ldr	r4, [sp, #28]
10007bee:	2c00      	cmp	r4, #0
10007bf0:	d1ca      	bne.n	10007b88 <_Z4Gamev.part.0+0x980>
10007bf2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
10007bf4:	2c00      	cmp	r4, #0
10007bf6:	d100      	bne.n	10007bfa <_Z4Gamev.part.0+0x9f2>
10007bf8:	e41a      	b.n	10007430 <_Z4Gamev.part.0+0x228>
				if ((y < 1) || (y >= MAPH-1))
10007bfa:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
10007bfc:	2c11      	cmp	r4, #17
10007bfe:	d800      	bhi.n	10007c02 <_Z4Gamev.part.0+0x9fa>
10007c00:	e40b      	b.n	1000741a <_Z4Gamev.part.0+0x212>
					ok = False;
10007c02:	2100      	movs	r1, #0
10007c04:	e414      	b.n	10007430 <_Z4Gamev.part.0+0x228>
				if ((y < 1) || (y >= MAPH-1))
10007c06:	9b10      	ldr	r3, [sp, #64]	; 0x40
10007c08:	2b11      	cmp	r3, #17
10007c0a:	d85f      	bhi.n	10007ccc <_Z4Gamev.part.0+0xac4>
					if (*d != TILE_EMPTY) ok = False;
10007c0c:	2337      	movs	r3, #55	; 0x37
10007c0e:	5cc3      	ldrb	r3, [r0, r3]
10007c10:	3b08      	subs	r3, #8
10007c12:	001c      	movs	r4, r3
10007c14:	4263      	negs	r3, r4
10007c16:	4163      	adcs	r3, r4
10007c18:	425b      	negs	r3, r3
10007c1a:	4019      	ands	r1, r3
			if (b != 0)
10007c1c:	9b08      	ldr	r3, [sp, #32]
10007c1e:	2b00      	cmp	r3, #0
10007c20:	d19c      	bne.n	10007b5c <_Z4Gamev.part.0+0x954>
10007c22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
10007c24:	2b00      	cmp	r3, #0
10007c26:	d100      	bne.n	10007c2a <_Z4Gamev.part.0+0xa22>
10007c28:	e428      	b.n	1000747c <_Z4Gamev.part.0+0x274>
				if ((y < 1) || (y >= MAPH-1))
10007c2a:	9b10      	ldr	r3, [sp, #64]	; 0x40
10007c2c:	2b11      	cmp	r3, #17
10007c2e:	d800      	bhi.n	10007c32 <_Z4Gamev.part.0+0xa2a>
10007c30:	e41c      	b.n	1000746c <_Z4Gamev.part.0+0x264>
					ok = False;
10007c32:	2100      	movs	r1, #0
10007c34:	e422      	b.n	1000747c <_Z4Gamev.part.0+0x274>
			b = *s++;
10007c36:	7a99      	ldrb	r1, [r3, #10]
			if (b != 0)
10007c38:	2900      	cmp	r1, #0
10007c3a:	d106      	bne.n	10007c4a <_Z4Gamev.part.0+0xa42>
10007c3c:	7ade      	ldrb	r6, [r3, #11]
10007c3e:	2e00      	cmp	r6, #0
10007c40:	d100      	bne.n	10007c44 <_Z4Gamev.part.0+0xa3c>
10007c42:	e58e      	b.n	10007762 <_Z4Gamev.part.0+0x55a>
				if ((y < 1) || (y >= MAPH-1))
10007c44:	2d11      	cmp	r5, #17
10007c46:	d800      	bhi.n	10007c4a <_Z4Gamev.part.0+0xa42>
10007c48:	e583      	b.n	10007752 <_Z4Gamev.part.0+0x54a>
					ok = False;
10007c4a:	2100      	movs	r1, #0
10007c4c:	e589      	b.n	10007762 <_Z4Gamev.part.0+0x55a>
			b = *s++;
10007c4e:	7959      	ldrb	r1, [r3, #5]
			if (b != 0)
10007c50:	2900      	cmp	r1, #0
10007c52:	d100      	bne.n	10007c56 <_Z4Gamev.part.0+0xa4e>
10007c54:	e55c      	b.n	10007710 <_Z4Gamev.part.0+0x508>
			b = *s++;
10007c56:	7999      	ldrb	r1, [r3, #6]
			if (b != 0)
10007c58:	2900      	cmp	r1, #0
10007c5a:	d106      	bne.n	10007c6a <_Z4Gamev.part.0+0xa62>
10007c5c:	79df      	ldrb	r7, [r3, #7]
10007c5e:	2f00      	cmp	r7, #0
10007c60:	d100      	bne.n	10007c64 <_Z4Gamev.part.0+0xa5c>
10007c62:	e555      	b.n	10007710 <_Z4Gamev.part.0+0x508>
				if ((y < 1) || (y >= MAPH-1))
10007c64:	2a11      	cmp	r2, #17
10007c66:	d800      	bhi.n	10007c6a <_Z4Gamev.part.0+0xa62>
10007c68:	e54b      	b.n	10007702 <_Z4Gamev.part.0+0x4fa>
					ok = False;
10007c6a:	2100      	movs	r1, #0
10007c6c:	e550      	b.n	10007710 <_Z4Gamev.part.0+0x508>
				if ((y < 1) || (y >= MAPH-1))
10007c6e:	2b11      	cmp	r3, #17
10007c70:	d823      	bhi.n	10007cba <_Z4Gamev.part.0+0xab2>
	Bool ok = True;
10007c72:	2101      	movs	r1, #1
					if (*d != TILE_EMPTY) ok = False;
10007c74:	7844      	ldrb	r4, [r0, #1]
10007c76:	46a4      	mov	ip, r4
10007c78:	2408      	movs	r4, #8
10007c7a:	4264      	negs	r4, r4
10007c7c:	46a2      	mov	sl, r4
10007c7e:	44d4      	add	ip, sl
10007c80:	4665      	mov	r5, ip
10007c82:	426c      	negs	r4, r5
10007c84:	416c      	adcs	r4, r5
10007c86:	4264      	negs	r4, r4
10007c88:	4021      	ands	r1, r4
			if (b != 0)
10007c8a:	9c06      	ldr	r4, [sp, #24]
10007c8c:	2c00      	cmp	r4, #0
10007c8e:	d093      	beq.n	10007bb8 <_Z4Gamev.part.0+0x9b0>
					if (*d != TILE_EMPTY) ok = False;
10007c90:	7884      	ldrb	r4, [r0, #2]
10007c92:	46a4      	mov	ip, r4
10007c94:	2408      	movs	r4, #8
10007c96:	4264      	negs	r4, r4
10007c98:	46a2      	mov	sl, r4
10007c9a:	44d4      	add	ip, sl
10007c9c:	4665      	mov	r5, ip
10007c9e:	426c      	negs	r4, r5
10007ca0:	416c      	adcs	r4, r5
10007ca2:	4264      	negs	r4, r4
10007ca4:	4021      	ands	r1, r4
			if (b != 0)
10007ca6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
10007ca8:	2c00      	cmp	r4, #0
10007caa:	d001      	beq.n	10007cb0 <_Z4Gamev.part.0+0xaa8>
10007cac:	f7ff fb88 	bl	100073c0 <_Z4Gamev.part.0+0x1b8>
10007cb0:	f7ff fb91 	bl	100073d6 <_Z4Gamev.part.0+0x1ce>
10007cb4:	9902      	ldr	r1, [sp, #8]
10007cb6:	2900      	cmp	r1, #0
10007cb8:	d086      	beq.n	10007bc8 <_Z4Gamev.part.0+0x9c0>
10007cba:	9c06      	ldr	r4, [sp, #24]
					ok = False;
10007cbc:	2100      	movs	r1, #0
			if (b != 0)
10007cbe:	2c00      	cmp	r4, #0
10007cc0:	d001      	beq.n	10007cc6 <_Z4Gamev.part.0+0xabe>
10007cc2:	f7ff fb88 	bl	100073d6 <_Z4Gamev.part.0+0x1ce>
10007cc6:	e777      	b.n	10007bb8 <_Z4Gamev.part.0+0x9b0>
10007cc8:	2e00      	cmp	r6, #0
10007cca:	d0b2      	beq.n	10007c32 <_Z4Gamev.part.0+0xa2a>
10007ccc:	9b08      	ldr	r3, [sp, #32]
					ok = False;
10007cce:	2100      	movs	r1, #0
			if (b != 0)
10007cd0:	2b00      	cmp	r3, #0
10007cd2:	d001      	beq.n	10007cd8 <_Z4Gamev.part.0+0xad0>
10007cd4:	f7ff fbd2 	bl	1000747c <_Z4Gamev.part.0+0x274>
10007cd8:	e7a3      	b.n	10007c22 <_Z4Gamev.part.0+0xa1a>
10007cda:	46c0      	nop			; (mov r8, r8)
10007cdc:	20012766 	.word	0x20012766
10007ce0:	20012764 	.word	0x20012764
10007ce4:	20012765 	.word	0x20012765
10007ce8:	1000e9f4 	.word	0x1000e9f4
10007cec:	20012768 	.word	0x20012768
10007cf0:	2000785c 	.word	0x2000785c
10007cf4:	20003498 	.word	0x20003498
10007cf8:	1000e6b4 	.word	0x1000e6b4
10007cfc:	9904      	ldr	r1, [sp, #16]
10007cfe:	2900      	cmp	r1, #0
10007d00:	d100      	bne.n	10007d04 <_Z4Gamev.part.0+0xafc>
10007d02:	e77e      	b.n	10007c02 <_Z4Gamev.part.0+0x9fa>
10007d04:	9c07      	ldr	r4, [sp, #28]
					ok = False;
10007d06:	2100      	movs	r1, #0
			if (b != 0)
10007d08:	2c00      	cmp	r4, #0
10007d0a:	d001      	beq.n	10007d10 <_Z4Gamev.part.0+0xb08>
10007d0c:	f7ff fb90 	bl	10007430 <_Z4Gamev.part.0+0x228>
10007d10:	e76f      	b.n	10007bf2 <_Z4Gamev.part.0+0x9ea>
10007d12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
10007d14:	2b00      	cmp	r3, #0
10007d16:	d100      	bne.n	10007d1a <_Z4Gamev.part.0+0xb12>
10007d18:	e677      	b.n	10007a0a <_Z4Gamev.part.0+0x802>
				if ((y < 1) || (y >= MAPH-1))
10007d1a:	4653      	mov	r3, sl
10007d1c:	2b11      	cmp	r3, #17
10007d1e:	d901      	bls.n	10007d24 <_Z4Gamev.part.0+0xb1c>
10007d20:	f7ff fbc2 	bl	100074a8 <_Z4Gamev.part.0+0x2a0>
					if (*d != TILE_EMPTY) ok = False;
10007d24:	2353      	movs	r3, #83	; 0x53
10007d26:	5cc3      	ldrb	r3, [r0, r3]
10007d28:	2b08      	cmp	r3, #8
10007d2a:	d001      	beq.n	10007d30 <_Z4Gamev.part.0+0xb28>
10007d2c:	f7ff fbbc 	bl	100074a8 <_Z4Gamev.part.0+0x2a0>
			if (b != 0)
10007d30:	9b0e      	ldr	r3, [sp, #56]	; 0x38
10007d32:	2b00      	cmp	r3, #0
10007d34:	d000      	beq.n	10007d38 <_Z4Gamev.part.0+0xb30>
10007d36:	e66f      	b.n	10007a18 <_Z4Gamev.part.0+0x810>
10007d38:	e673      	b.n	10007a22 <_Z4Gamev.part.0+0x81a>
10007d3a:	799f      	ldrb	r7, [r3, #6]
10007d3c:	2f00      	cmp	r7, #0
10007d3e:	d08d      	beq.n	10007c5c <_Z4Gamev.part.0+0xa54>
				if ((y < 1) || (y >= MAPH-1))
10007d40:	2a11      	cmp	r2, #17
10007d42:	d800      	bhi.n	10007d46 <_Z4Gamev.part.0+0xb3e>
10007d44:	e5e1      	b.n	1000790a <_Z4Gamev.part.0+0x702>
					ok = False;
10007d46:	2100      	movs	r1, #0
10007d48:	e4e2      	b.n	10007710 <_Z4Gamev.part.0+0x508>
			if (b != 0)
10007d4a:	7a9a      	ldrb	r2, [r3, #10]
10007d4c:	2a00      	cmp	r2, #0
10007d4e:	d100      	bne.n	10007d52 <_Z4Gamev.part.0+0xb4a>
10007d50:	e774      	b.n	10007c3c <_Z4Gamev.part.0+0xa34>
				if ((y < 1) || (y >= MAPH-1))
10007d52:	2d11      	cmp	r5, #17
10007d54:	d800      	bhi.n	10007d58 <_Z4Gamev.part.0+0xb50>
10007d56:	e601      	b.n	1000795c <_Z4Gamev.part.0+0x754>
					ok = False;
10007d58:	2100      	movs	r1, #0
10007d5a:	e502      	b.n	10007762 <_Z4Gamev.part.0+0x55a>
			if (b != 0)
10007d5c:	7b9a      	ldrb	r2, [r3, #14]
10007d5e:	2a00      	cmp	r2, #0
10007d60:	d07a      	beq.n	10007e58 <_Z4Gamev.part.0+0xc50>
				if ((y < 1) || (y >= MAPH-1))
10007d62:	9a01      	ldr	r2, [sp, #4]
10007d64:	2a11      	cmp	r2, #17
10007d66:	d900      	bls.n	10007d6a <_Z4Gamev.part.0+0xb62>
10007d68:	e51f      	b.n	100077aa <_Z4Gamev.part.0+0x5a2>
10007d6a:	e619      	b.n	100079a0 <_Z4Gamev.part.0+0x798>
					if (*d != TILE_EMPTY) ok = False;
10007d6c:	7845      	ldrb	r5, [r0, #1]
10007d6e:	3d08      	subs	r5, #8
10007d70:	426e      	negs	r6, r5
10007d72:	4175      	adcs	r5, r6
10007d74:	426d      	negs	r5, r5
10007d76:	4029      	ands	r1, r5
			if (b != 0)
10007d78:	789d      	ldrb	r5, [r3, #2]
10007d7a:	2d00      	cmp	r5, #0
10007d7c:	d000      	beq.n	10007d80 <_Z4Gamev.part.0+0xb78>
10007d7e:	e495      	b.n	100076ac <_Z4Gamev.part.0+0x4a4>
10007d80:	e5a1      	b.n	100078c6 <_Z4Gamev.part.0+0x6be>
					ok = False;
10007d82:	2100      	movs	r1, #0
10007d84:	e58f      	b.n	100078a6 <_Z4Gamev.part.0+0x69e>
	if (!CheckBrick(BrickX, BrickY, Brick))
10007d86:	2900      	cmp	r1, #0
10007d88:	d100      	bne.n	10007d8c <_Z4Gamev.part.0+0xb84>
10007d8a:	e50e      	b.n	100077aa <_Z4Gamev.part.0+0x5a2>
			if (b != 0) *d = b;
10007d8c:	9903      	ldr	r1, [sp, #12]
10007d8e:	2900      	cmp	r1, #0
10007d90:	d001      	beq.n	10007d96 <_Z4Gamev.part.0+0xb8e>
10007d92:	465a      	mov	r2, fp
10007d94:	5511      	strb	r1, [r2, r4]
			b = *s++;
10007d96:	785a      	ldrb	r2, [r3, #1]
			if (b != 0) *d = b;
10007d98:	2a00      	cmp	r2, #0
10007d9a:	d000      	beq.n	10007d9e <_Z4Gamev.part.0+0xb96>
10007d9c:	7042      	strb	r2, [r0, #1]
			b = *s++;
10007d9e:	789a      	ldrb	r2, [r3, #2]
			if (b != 0) *d = b;
10007da0:	2a00      	cmp	r2, #0
10007da2:	d000      	beq.n	10007da6 <_Z4Gamev.part.0+0xb9e>
10007da4:	7082      	strb	r2, [r0, #2]
			b = *s++;
10007da6:	78da      	ldrb	r2, [r3, #3]
			if (b != 0) *d = b;
10007da8:	2a00      	cmp	r2, #0
10007daa:	d000      	beq.n	10007dae <_Z4Gamev.part.0+0xba6>
10007dac:	70c2      	strb	r2, [r0, #3]
10007dae:	9a02      	ldr	r2, [sp, #8]
10007db0:	2a00      	cmp	r2, #0
10007db2:	d000      	beq.n	10007db6 <_Z4Gamev.part.0+0xbae>
10007db4:	76c2      	strb	r2, [r0, #27]
			b = *s++;
10007db6:	795a      	ldrb	r2, [r3, #5]
			if (b != 0) *d = b;
10007db8:	2a00      	cmp	r2, #0
10007dba:	d000      	beq.n	10007dbe <_Z4Gamev.part.0+0xbb6>
10007dbc:	7702      	strb	r2, [r0, #28]
			b = *s++;
10007dbe:	799a      	ldrb	r2, [r3, #6]
			if (b != 0) *d = b;
10007dc0:	2a00      	cmp	r2, #0
10007dc2:	d000      	beq.n	10007dc6 <_Z4Gamev.part.0+0xbbe>
10007dc4:	7742      	strb	r2, [r0, #29]
			b = *s++;
10007dc6:	79da      	ldrb	r2, [r3, #7]
			if (b != 0) *d = b;
10007dc8:	2a00      	cmp	r2, #0
10007dca:	d000      	beq.n	10007dce <_Z4Gamev.part.0+0xbc6>
10007dcc:	7782      	strb	r2, [r0, #30]
10007dce:	2f00      	cmp	r7, #0
10007dd0:	d001      	beq.n	10007dd6 <_Z4Gamev.part.0+0xbce>
10007dd2:	2236      	movs	r2, #54	; 0x36
10007dd4:	5487      	strb	r7, [r0, r2]
			b = *s++;
10007dd6:	7a5a      	ldrb	r2, [r3, #9]
			if (b != 0) *d = b;
10007dd8:	2a00      	cmp	r2, #0
10007dda:	d001      	beq.n	10007de0 <_Z4Gamev.part.0+0xbd8>
10007ddc:	2137      	movs	r1, #55	; 0x37
10007dde:	5442      	strb	r2, [r0, r1]
			b = *s++;
10007de0:	7a9a      	ldrb	r2, [r3, #10]
			if (b != 0) *d = b;
10007de2:	2a00      	cmp	r2, #0
10007de4:	d001      	beq.n	10007dea <_Z4Gamev.part.0+0xbe2>
10007de6:	2138      	movs	r1, #56	; 0x38
10007de8:	5442      	strb	r2, [r0, r1]
			b = *s++;
10007dea:	7ada      	ldrb	r2, [r3, #11]
			if (b != 0) *d = b;
10007dec:	2a00      	cmp	r2, #0
10007dee:	d001      	beq.n	10007df4 <_Z4Gamev.part.0+0xbec>
10007df0:	2139      	movs	r1, #57	; 0x39
10007df2:	5442      	strb	r2, [r0, r1]
10007df4:	2d00      	cmp	r5, #0
10007df6:	d001      	beq.n	10007dfc <_Z4Gamev.part.0+0xbf4>
10007df8:	2251      	movs	r2, #81	; 0x51
10007dfa:	5485      	strb	r5, [r0, r2]
			b = *s++;
10007dfc:	7b5a      	ldrb	r2, [r3, #13]
			if (b != 0) *d = b;
10007dfe:	2a00      	cmp	r2, #0
10007e00:	d001      	beq.n	10007e06 <_Z4Gamev.part.0+0xbfe>
10007e02:	2152      	movs	r1, #82	; 0x52
10007e04:	5442      	strb	r2, [r0, r1]
			b = *s++;
10007e06:	7b9a      	ldrb	r2, [r3, #14]
			if (b != 0) *d = b;
10007e08:	2a00      	cmp	r2, #0
10007e0a:	d001      	beq.n	10007e10 <_Z4Gamev.part.0+0xc08>
10007e0c:	2153      	movs	r1, #83	; 0x53
10007e0e:	5442      	strb	r2, [r0, r1]
			b = *s++;
10007e10:	7bdb      	ldrb	r3, [r3, #15]
			if (b != 0) *d = b;
10007e12:	2b00      	cmp	r3, #0
10007e14:	d101      	bne.n	10007e1a <_Z4Gamev.part.0+0xc12>
10007e16:	f7ff fa0b 	bl	10007230 <_Z4Gamev.part.0+0x28>
10007e1a:	2254      	movs	r2, #84	; 0x54
10007e1c:	5483      	strb	r3, [r0, r2]
10007e1e:	f7ff fa07 	bl	10007230 <_Z4Gamev.part.0+0x28>
		sleep_ms(250);
10007e22:	20fa      	movs	r0, #250	; 0xfa
10007e24:	f7fa fe58 	bl	10002ad8 <sleep_ms>
				break;

			// down - falling
			case KEY_D:
			case ' ':
				Falling = True;
10007e28:	2301      	movs	r3, #1
10007e2a:	7023      	strb	r3, [r4, #0]
				if (SpeedCnt > SPEEDFALL) SpeedCnt = SPEEDFALL;
10007e2c:	4643      	mov	r3, r8
10007e2e:	681b      	ldr	r3, [r3, #0]
10007e30:	2b0a      	cmp	r3, #10
10007e32:	dc01      	bgt.n	10007e38 <_Z4Gamev.part.0+0xc30>
10007e34:	f7ff fa02 	bl	1000723c <_Z4Gamev.part.0+0x34>
				SpeedCnt = Falling ? SPEEDFALL : StepSpeed;
10007e38:	230a      	movs	r3, #10
10007e3a:	4642      	mov	r2, r8
10007e3c:	6013      	str	r3, [r2, #0]
		if (!Falling)
10007e3e:	f7ff f9fd 	bl	1000723c <_Z4Gamev.part.0+0x34>
					ok = False;
10007e42:	2100      	movs	r1, #0
				if ((y < 1) || (y >= MAPH-1))
10007e44:	2b11      	cmp	r3, #17
10007e46:	d901      	bls.n	10007e4c <_Z4Gamev.part.0+0xc44>
10007e48:	f7ff fac5 	bl	100073d6 <_Z4Gamev.part.0+0x1ce>
	Bool ok = True;
10007e4c:	3101      	adds	r1, #1
10007e4e:	e71f      	b.n	10007c90 <_Z4Gamev.part.0+0xa88>
			if (b != 0)
10007e50:	7b9a      	ldrb	r2, [r3, #14]
10007e52:	2a00      	cmp	r2, #0
10007e54:	d000      	beq.n	10007e58 <_Z4Gamev.part.0+0xc50>
10007e56:	e5a3      	b.n	100079a0 <_Z4Gamev.part.0+0x798>
10007e58:	7bda      	ldrb	r2, [r3, #15]
10007e5a:	2a00      	cmp	r2, #0
10007e5c:	d093      	beq.n	10007d86 <_Z4Gamev.part.0+0xb7e>
				if ((y < 1) || (y >= MAPH-1))
10007e5e:	9a01      	ldr	r2, [sp, #4]
10007e60:	2a11      	cmp	r2, #17
10007e62:	d800      	bhi.n	10007e66 <_Z4Gamev.part.0+0xc5e>
10007e64:	e49c      	b.n	100077a0 <_Z4Gamev.part.0+0x598>
10007e66:	e4a0      	b.n	100077aa <_Z4Gamev.part.0+0x5a2>
			if (b != 0)
10007e68:	9b09      	ldr	r3, [sp, #36]	; 0x24
10007e6a:	2b00      	cmp	r3, #0
10007e6c:	d000      	beq.n	10007e70 <_Z4Gamev.part.0+0xc68>
10007e6e:	e5c3      	b.n	100079f8 <_Z4Gamev.part.0+0x7f0>
10007e70:	9b0d      	ldr	r3, [sp, #52]	; 0x34
10007e72:	2b00      	cmp	r3, #0
10007e74:	d001      	beq.n	10007e7a <_Z4Gamev.part.0+0xc72>
10007e76:	f7ff fb11 	bl	1000749c <_Z4Gamev.part.0+0x294>
10007e7a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
10007e7c:	2b00      	cmp	r3, #0
10007e7e:	d000      	beq.n	10007e82 <_Z4Gamev.part.0+0xc7a>
10007e80:	e5ca      	b.n	10007a18 <_Z4Gamev.part.0+0x810>
10007e82:	e5ce      	b.n	10007a22 <_Z4Gamev.part.0+0x81a>
		sleep_ms(250);
10007e84:	20fa      	movs	r0, #250	; 0xfa
10007e86:	f7fa fe27 	bl	10002ad8 <sleep_ms>
				break;

			// up - rotate
			case KEY_U:
				// clear current brick
				ClearBrick(BrickX, BrickY, Brick);
10007e8a:	2400      	movs	r4, #0
10007e8c:	4bcc      	ldr	r3, [pc, #816]	; (100081c0 <_Z4Gamev.part.0+0xfb8>)
10007e8e:	571c      	ldrsb	r4, [r3, r4]
10007e90:	4bcc      	ldr	r3, [pc, #816]	; (100081c4 <_Z4Gamev.part.0+0xfbc>)
	u8* d = &Board[x + y*MAPW];
10007e92:	46a2      	mov	sl, r4
				ClearBrick(BrickX, BrickY, Brick);
10007e94:	781b      	ldrb	r3, [r3, #0]
10007e96:	9406      	str	r4, [sp, #24]
10007e98:	b25b      	sxtb	r3, r3
10007e9a:	469c      	mov	ip, r3
	u8* d = &Board[x + y*MAPW];
10007e9c:	4660      	mov	r0, ip
10007e9e:	0046      	lsls	r6, r0, #1
10007ea0:	4466      	add	r6, ip
10007ea2:	00f0      	lsls	r0, r6, #3
10007ea4:	1836      	adds	r6, r6, r0
10007ea6:	4658      	mov	r0, fp
	const u8* s = &BrickTemp[brick*BRICKTEMPSIZE];
10007ea8:	4bc7      	ldr	r3, [pc, #796]	; (100081c8 <_Z4Gamev.part.0+0xfc0>)
			if (b != 0) *d = TILE_EMPTY;
10007eaa:	4cc8      	ldr	r4, [pc, #800]	; (100081cc <_Z4Gamev.part.0+0xfc4>)
	const u8* s = &BrickTemp[brick*BRICKTEMPSIZE];
10007eac:	781a      	ldrb	r2, [r3, #0]
10007eae:	4bc7      	ldr	r3, [pc, #796]	; (100081cc <_Z4Gamev.part.0+0xfc4>)
10007eb0:	0111      	lsls	r1, r2, #4
10007eb2:	185b      	adds	r3, r3, r1
			if (b != 0) *d = TILE_EMPTY;
10007eb4:	5c61      	ldrb	r1, [r4, r1]
	u8* d = &Board[x + y*MAPW];
10007eb6:	4456      	add	r6, sl
10007eb8:	1980      	adds	r0, r0, r6
			if (b != 0) *d = TILE_EMPTY;
10007eba:	2900      	cmp	r1, #0
10007ebc:	d002      	beq.n	10007ec4 <_Z4Gamev.part.0+0xcbc>
10007ebe:	2108      	movs	r1, #8
10007ec0:	465c      	mov	r4, fp
10007ec2:	55a1      	strb	r1, [r4, r6]
10007ec4:	7859      	ldrb	r1, [r3, #1]
10007ec6:	2900      	cmp	r1, #0
10007ec8:	d001      	beq.n	10007ece <_Z4Gamev.part.0+0xcc6>
10007eca:	2108      	movs	r1, #8
10007ecc:	7041      	strb	r1, [r0, #1]
10007ece:	7899      	ldrb	r1, [r3, #2]
10007ed0:	2900      	cmp	r1, #0
10007ed2:	d001      	beq.n	10007ed8 <_Z4Gamev.part.0+0xcd0>
10007ed4:	2108      	movs	r1, #8
10007ed6:	7081      	strb	r1, [r0, #2]
10007ed8:	78d9      	ldrb	r1, [r3, #3]
10007eda:	2900      	cmp	r1, #0
10007edc:	d001      	beq.n	10007ee2 <_Z4Gamev.part.0+0xcda>
10007ede:	2108      	movs	r1, #8
10007ee0:	70c1      	strb	r1, [r0, #3]
10007ee2:	7919      	ldrb	r1, [r3, #4]
10007ee4:	2900      	cmp	r1, #0
10007ee6:	d001      	beq.n	10007eec <_Z4Gamev.part.0+0xce4>
10007ee8:	2108      	movs	r1, #8
10007eea:	76c1      	strb	r1, [r0, #27]
10007eec:	7959      	ldrb	r1, [r3, #5]
10007eee:	2900      	cmp	r1, #0
10007ef0:	d001      	beq.n	10007ef6 <_Z4Gamev.part.0+0xcee>
10007ef2:	2108      	movs	r1, #8
10007ef4:	7701      	strb	r1, [r0, #28]
10007ef6:	7999      	ldrb	r1, [r3, #6]
10007ef8:	2900      	cmp	r1, #0
10007efa:	d001      	beq.n	10007f00 <_Z4Gamev.part.0+0xcf8>
10007efc:	2108      	movs	r1, #8
10007efe:	7741      	strb	r1, [r0, #29]
10007f00:	79d9      	ldrb	r1, [r3, #7]
10007f02:	2900      	cmp	r1, #0
10007f04:	d001      	beq.n	10007f0a <_Z4Gamev.part.0+0xd02>
10007f06:	2108      	movs	r1, #8
10007f08:	7781      	strb	r1, [r0, #30]
10007f0a:	7a19      	ldrb	r1, [r3, #8]
10007f0c:	2900      	cmp	r1, #0
10007f0e:	d002      	beq.n	10007f16 <_Z4Gamev.part.0+0xd0e>
10007f10:	2136      	movs	r1, #54	; 0x36
10007f12:	2408      	movs	r4, #8
10007f14:	5444      	strb	r4, [r0, r1]
10007f16:	7a59      	ldrb	r1, [r3, #9]
10007f18:	2900      	cmp	r1, #0
10007f1a:	d002      	beq.n	10007f22 <_Z4Gamev.part.0+0xd1a>
10007f1c:	2137      	movs	r1, #55	; 0x37
10007f1e:	2408      	movs	r4, #8
10007f20:	5444      	strb	r4, [r0, r1]
10007f22:	7a99      	ldrb	r1, [r3, #10]
10007f24:	2900      	cmp	r1, #0
10007f26:	d002      	beq.n	10007f2e <_Z4Gamev.part.0+0xd26>
10007f28:	2138      	movs	r1, #56	; 0x38
10007f2a:	2408      	movs	r4, #8
10007f2c:	5444      	strb	r4, [r0, r1]
10007f2e:	7ad9      	ldrb	r1, [r3, #11]
10007f30:	2900      	cmp	r1, #0
10007f32:	d002      	beq.n	10007f3a <_Z4Gamev.part.0+0xd32>
10007f34:	2139      	movs	r1, #57	; 0x39
10007f36:	2408      	movs	r4, #8
10007f38:	5444      	strb	r4, [r0, r1]
10007f3a:	7b19      	ldrb	r1, [r3, #12]
10007f3c:	2900      	cmp	r1, #0
10007f3e:	d002      	beq.n	10007f46 <_Z4Gamev.part.0+0xd3e>
10007f40:	2151      	movs	r1, #81	; 0x51
10007f42:	2408      	movs	r4, #8
10007f44:	5444      	strb	r4, [r0, r1]
10007f46:	7b59      	ldrb	r1, [r3, #13]
10007f48:	2900      	cmp	r1, #0
10007f4a:	d002      	beq.n	10007f52 <_Z4Gamev.part.0+0xd4a>
10007f4c:	2152      	movs	r1, #82	; 0x52
10007f4e:	2408      	movs	r4, #8
10007f50:	5444      	strb	r4, [r0, r1]
10007f52:	7b99      	ldrb	r1, [r3, #14]
10007f54:	2900      	cmp	r1, #0
10007f56:	d002      	beq.n	10007f5e <_Z4Gamev.part.0+0xd56>
10007f58:	2153      	movs	r1, #83	; 0x53
10007f5a:	2408      	movs	r4, #8
10007f5c:	5444      	strb	r4, [r0, r1]
10007f5e:	7bdb      	ldrb	r3, [r3, #15]
10007f60:	2b00      	cmp	r3, #0
10007f62:	d002      	beq.n	10007f6a <_Z4Gamev.part.0+0xd62>
10007f64:	2354      	movs	r3, #84	; 0x54
10007f66:	2108      	movs	r1, #8
10007f68:	54c1      	strb	r1, [r0, r3]

				// get new brick
				b = BrickRot[Brick];
10007f6a:	4b99      	ldr	r3, [pc, #612]	; (100081d0 <_Z4Gamev.part.0+0xfc8>)
			b = *s++;
10007f6c:	4997      	ldr	r1, [pc, #604]	; (100081cc <_Z4Gamev.part.0+0xfc4>)
				b = BrickRot[Brick];
10007f6e:	5c9c      	ldrb	r4, [r3, r2]
	const u8* s = &BrickTemp[brick*BRICKTEMPSIZE];
10007f70:	4b96      	ldr	r3, [pc, #600]	; (100081cc <_Z4Gamev.part.0+0xfc4>)
10007f72:	0122      	lsls	r2, r4, #4
10007f74:	189b      	adds	r3, r3, r2
			b = *s++;
10007f76:	5c8a      	ldrb	r2, [r1, r2]
10007f78:	9202      	str	r2, [sp, #8]
			if (b != 0)
10007f7a:	2a00      	cmp	r2, #0
10007f7c:	d001      	beq.n	10007f82 <_Z4Gamev.part.0+0xd7a>
10007f7e:	f000 fbf1 	bl	10008764 <_Z4Gamev.part.0+0x155c>
				if ((y < 1) || (y >= MAPH-1))
10007f82:	4662      	mov	r2, ip
10007f84:	b2d1      	uxtb	r1, r2
	Bool ok = True;
10007f86:	2201      	movs	r2, #1
			if (b != 0)
10007f88:	785f      	ldrb	r7, [r3, #1]
10007f8a:	2f00      	cmp	r7, #0
10007f8c:	d005      	beq.n	10007f9a <_Z4Gamev.part.0+0xd92>
				if ((y < 1) || (y >= MAPH-1))
10007f8e:	1e4f      	subs	r7, r1, #1
10007f90:	2f11      	cmp	r7, #17
10007f92:	d801      	bhi.n	10007f98 <_Z4Gamev.part.0+0xd90>
10007f94:	f000 fd22 	bl	100089dc <_Z4Gamev.part.0+0x17d4>
					ok = False;
10007f98:	2200      	movs	r2, #0
			if (b != 0)
10007f9a:	789f      	ldrb	r7, [r3, #2]
10007f9c:	2f00      	cmp	r7, #0
10007f9e:	d005      	beq.n	10007fac <_Z4Gamev.part.0+0xda4>
				if ((y < 1) || (y >= MAPH-1))
10007fa0:	1e4f      	subs	r7, r1, #1
10007fa2:	2f11      	cmp	r7, #17
10007fa4:	d801      	bhi.n	10007faa <_Z4Gamev.part.0+0xda2>
10007fa6:	f000 fd25 	bl	100089f4 <_Z4Gamev.part.0+0x17ec>
					ok = False;
10007faa:	2200      	movs	r2, #0
			if (b != 0)
10007fac:	78df      	ldrb	r7, [r3, #3]
10007fae:	2f00      	cmp	r7, #0
10007fb0:	d005      	beq.n	10007fbe <_Z4Gamev.part.0+0xdb6>
				if ((y < 1) || (y >= MAPH-1))
10007fb2:	1e4f      	subs	r7, r1, #1
10007fb4:	2f11      	cmp	r7, #17
10007fb6:	d801      	bhi.n	10007fbc <_Z4Gamev.part.0+0xdb4>
10007fb8:	f000 fd28 	bl	10008a0c <_Z4Gamev.part.0+0x1804>
					ok = False;
10007fbc:	2200      	movs	r2, #0
		y++;
10007fbe:	1c4f      	adds	r7, r1, #1
10007fc0:	b2fd      	uxtb	r5, r7
			b = *s++;
10007fc2:	791f      	ldrb	r7, [r3, #4]
		y++;
10007fc4:	9501      	str	r5, [sp, #4]
			b = *s++;
10007fc6:	9704      	str	r7, [sp, #16]
			if (b != 0)
10007fc8:	2f00      	cmp	r7, #0
10007fca:	d101      	bne.n	10007fd0 <_Z4Gamev.part.0+0xdc8>
10007fcc:	f000 fc8a 	bl	100088e4 <_Z4Gamev.part.0+0x16dc>
				if ((y < 1) || (y >= MAPH-1))
10007fd0:	2911      	cmp	r1, #17
10007fd2:	d801      	bhi.n	10007fd8 <_Z4Gamev.part.0+0xdd0>
10007fd4:	f000 fcf1 	bl	100089ba <_Z4Gamev.part.0+0x17b2>
			b = *s++;
10007fd8:	795a      	ldrb	r2, [r3, #5]
			if (b != 0)
10007fda:	2a00      	cmp	r2, #0
10007fdc:	d101      	bne.n	10007fe2 <_Z4Gamev.part.0+0xdda>
10007fde:	f000 fca5 	bl	1000892c <_Z4Gamev.part.0+0x1724>
			b = *s++;
10007fe2:	799a      	ldrb	r2, [r3, #6]
			if (b != 0)
10007fe4:	2a00      	cmp	r2, #0
10007fe6:	d108      	bne.n	10007ffa <_Z4Gamev.part.0+0xdf2>
10007fe8:	79df      	ldrb	r7, [r3, #7]
10007fea:	2f00      	cmp	r7, #0
10007fec:	d101      	bne.n	10007ff2 <_Z4Gamev.part.0+0xdea>
10007fee:	f000 fc9d 	bl	1000892c <_Z4Gamev.part.0+0x1724>
				if ((y < 1) || (y >= MAPH-1))
10007ff2:	2911      	cmp	r1, #17
10007ff4:	d801      	bhi.n	10007ffa <_Z4Gamev.part.0+0xdf2>
10007ff6:	f000 fc92 	bl	1000891e <_Z4Gamev.part.0+0x1716>
					ok = False;
10007ffa:	2200      	movs	r2, #0
		y++;
10007ffc:	3102      	adds	r1, #2
10007ffe:	b2c9      	uxtb	r1, r1
10008000:	000d      	movs	r5, r1
			b = *s++;
10008002:	7a19      	ldrb	r1, [r3, #8]
10008004:	9105      	str	r1, [sp, #20]
			if (b != 0)
10008006:	2900      	cmp	r1, #0
10008008:	d001      	beq.n	1000800e <_Z4Gamev.part.0+0xe06>
1000800a:	f000 fc98 	bl	1000893e <_Z4Gamev.part.0+0x1736>
			b = *s++;
1000800e:	7a59      	ldrb	r1, [r3, #9]
			if (b != 0)
10008010:	2900      	cmp	r1, #0
10008012:	d101      	bne.n	10008018 <_Z4Gamev.part.0+0xe10>
10008014:	f000 fd67 	bl	10008ae6 <_Z4Gamev.part.0+0x18de>
				if ((y < 1) || (y >= MAPH-1))
10008018:	9901      	ldr	r1, [sp, #4]
1000801a:	2911      	cmp	r1, #17
1000801c:	d901      	bls.n	10008022 <_Z4Gamev.part.0+0xe1a>
1000801e:	f000 fd33 	bl	10008a88 <_Z4Gamev.part.0+0x1880>
					if (*d != TILE_EMPTY) ok = False;
10008022:	2137      	movs	r1, #55	; 0x37
10008024:	5c41      	ldrb	r1, [r0, r1]
10008026:	3908      	subs	r1, #8
10008028:	424f      	negs	r7, r1
1000802a:	4179      	adcs	r1, r7
1000802c:	4249      	negs	r1, r1
1000802e:	400a      	ands	r2, r1
			if (b != 0)
10008030:	7a99      	ldrb	r1, [r3, #10]
10008032:	2900      	cmp	r1, #0
10008034:	d101      	bne.n	1000803a <_Z4Gamev.part.0+0xe32>
10008036:	f000 fd2a 	bl	10008a8e <_Z4Gamev.part.0+0x1886>
					if (*d != TILE_EMPTY) ok = False;
1000803a:	2138      	movs	r1, #56	; 0x38
1000803c:	5c41      	ldrb	r1, [r0, r1]
1000803e:	3908      	subs	r1, #8
10008040:	424f      	negs	r7, r1
10008042:	4179      	adcs	r1, r7
10008044:	4249      	negs	r1, r1
10008046:	400a      	ands	r2, r1
			if (b != 0)
10008048:	7ad9      	ldrb	r1, [r3, #11]
1000804a:	2900      	cmp	r1, #0
1000804c:	d006      	beq.n	1000805c <_Z4Gamev.part.0+0xe54>
					if (*d != TILE_EMPTY) ok = False;
1000804e:	2139      	movs	r1, #57	; 0x39
10008050:	5c41      	ldrb	r1, [r0, r1]
					ok = False;
10008052:	3908      	subs	r1, #8
10008054:	424f      	negs	r7, r1
10008056:	4179      	adcs	r1, r7
10008058:	4249      	negs	r1, r1
1000805a:	400a      	ands	r2, r1
			b = *s++;
1000805c:	7b19      	ldrb	r1, [r3, #12]
1000805e:	9103      	str	r1, [sp, #12]
			if (b != 0)
10008060:	2900      	cmp	r1, #0
10008062:	d101      	bne.n	10008068 <_Z4Gamev.part.0+0xe60>
10008064:	f000 fcec 	bl	10008a40 <_Z4Gamev.part.0+0x1838>
				if ((y < 1) || (y >= MAPH-1))
10008068:	2d11      	cmp	r5, #17
1000806a:	d81e      	bhi.n	100080aa <_Z4Gamev.part.0+0xea2>
					if (*d != TILE_EMPTY) ok = False;
1000806c:	2151      	movs	r1, #81	; 0x51
1000806e:	5c41      	ldrb	r1, [r0, r1]
10008070:	3908      	subs	r1, #8
10008072:	424f      	negs	r7, r1
10008074:	4179      	adcs	r1, r7
10008076:	4249      	negs	r1, r1
10008078:	400a      	ands	r2, r1
			if (b != 0)
1000807a:	7b59      	ldrb	r1, [r3, #13]
1000807c:	2900      	cmp	r1, #0
1000807e:	d001      	beq.n	10008084 <_Z4Gamev.part.0+0xe7c>
10008080:	f000 fce5 	bl	10008a4e <_Z4Gamev.part.0+0x1846>
			b = *s++;
10008084:	7b99      	ldrb	r1, [r3, #14]
10008086:	468a      	mov	sl, r1
			if (b != 0)
10008088:	2900      	cmp	r1, #0
1000808a:	d001      	beq.n	10008090 <_Z4Gamev.part.0+0xe88>
1000808c:	f000 fcea 	bl	10008a64 <_Z4Gamev.part.0+0x185c>
			b = *s++;
10008090:	7bd9      	ldrb	r1, [r3, #15]
			if (b != 0)
10008092:	2700      	movs	r7, #0
10008094:	2900      	cmp	r1, #0
10008096:	d101      	bne.n	1000809c <_Z4Gamev.part.0+0xe94>
10008098:	f000 fd31 	bl	10008afe <_Z4Gamev.part.0+0x18f6>
1000809c:	000f      	movs	r7, r1
					if (*d != TILE_EMPTY) ok = False;
1000809e:	2154      	movs	r1, #84	; 0x54
100080a0:	5c41      	ldrb	r1, [r0, r1]
100080a2:	2908      	cmp	r1, #8
100080a4:	d101      	bne.n	100080aa <_Z4Gamev.part.0+0xea2>
100080a6:	f000 fd32 	bl	10008b0e <_Z4Gamev.part.0+0x1906>
	return res;
100080aa:	0022      	movs	r2, r4
100080ac:	4661      	mov	r1, ip
100080ae:	9806      	ldr	r0, [sp, #24]
100080b0:	f7fc fe18 	bl	10004ce4 <_Z11CheckBrickXaah.part.0>
	if (CheckBrickX(x, y, brick)) return True;
100080b4:	2800      	cmp	r0, #0
100080b6:	d10d      	bne.n	100080d4 <_Z4Gamev.part.0+0xecc>
	if (CheckBrickX(x, y+1, brick)) return True;
100080b8:	466b      	mov	r3, sp
100080ba:	2104      	movs	r1, #4
100080bc:	0022      	movs	r2, r4
100080be:	5659      	ldrsb	r1, [r3, r1]
100080c0:	9806      	ldr	r0, [sp, #24]
100080c2:	f7fe f83f 	bl	10006144 <_Z11CheckBrickXaah>
100080c6:	2800      	cmp	r0, #0
100080c8:	d104      	bne.n	100080d4 <_Z4Gamev.part.0+0xecc>
	return CheckBrickX(x, y+2, brick);
100080ca:	0022      	movs	r2, r4
100080cc:	9806      	ldr	r0, [sp, #24]
100080ce:	b269      	sxtb	r1, r5
100080d0:	f7fe f838 	bl	10006144 <_Z11CheckBrickXaah>
	u8* d = &Board[x + y*MAPW];
100080d4:	493b      	ldr	r1, [pc, #236]	; (100081c4 <_Z4Gamev.part.0+0xfbc>)
	const u8* s = &BrickTemp[brick*BRICKTEMPSIZE];
100080d6:	4b3c      	ldr	r3, [pc, #240]	; (100081c8 <_Z4Gamev.part.0+0xfc0>)
	u8* d = &Board[x + y*MAPW];
100080d8:	7809      	ldrb	r1, [r1, #0]
	const u8* s = &BrickTemp[brick*BRICKTEMPSIZE];
100080da:	781a      	ldrb	r2, [r3, #0]
	u8* d = &Board[x + y*MAPW];
100080dc:	b249      	sxtb	r1, r1
100080de:	004e      	lsls	r6, r1, #1
100080e0:	1876      	adds	r6, r6, r1
100080e2:	00f1      	lsls	r1, r6, #3
100080e4:	1876      	adds	r6, r6, r1
100080e6:	4936      	ldr	r1, [pc, #216]	; (100081c0 <_Z4Gamev.part.0+0xfb8>)
	const u8* s = &BrickTemp[brick*BRICKTEMPSIZE];
100080e8:	4b38      	ldr	r3, [pc, #224]	; (100081cc <_Z4Gamev.part.0+0xfc4>)
	u8* d = &Board[x + y*MAPW];
100080ea:	7809      	ldrb	r1, [r1, #0]
	const u8* s = &BrickTemp[brick*BRICKTEMPSIZE];
100080ec:	0112      	lsls	r2, r2, #4
	u8* d = &Board[x + y*MAPW];
100080ee:	b249      	sxtb	r1, r1
100080f0:	1876      	adds	r6, r6, r1
100080f2:	4659      	mov	r1, fp
100080f4:	1988      	adds	r0, r1, r6
			b = *s++;
100080f6:	4935      	ldr	r1, [pc, #212]	; (100081cc <_Z4Gamev.part.0+0xfc4>)
	const u8* s = &BrickTemp[brick*BRICKTEMPSIZE];
100080f8:	189b      	adds	r3, r3, r2
			b = *s++;
100080fa:	5c8a      	ldrb	r2, [r1, r2]
100080fc:	9202      	str	r2, [sp, #8]
100080fe:	791a      	ldrb	r2, [r3, #4]
10008100:	9204      	str	r2, [sp, #16]
10008102:	7a1a      	ldrb	r2, [r3, #8]
10008104:	9205      	str	r2, [sp, #20]
10008106:	7b1a      	ldrb	r2, [r3, #12]
10008108:	9203      	str	r2, [sp, #12]
1000810a:	7b9f      	ldrb	r7, [r3, #14]
1000810c:	7bd9      	ldrb	r1, [r3, #15]
			if (b != 0) *d = b;
1000810e:	9a02      	ldr	r2, [sp, #8]
10008110:	2a00      	cmp	r2, #0
10008112:	d001      	beq.n	10008118 <_Z4Gamev.part.0+0xf10>
10008114:	465c      	mov	r4, fp
10008116:	55a2      	strb	r2, [r4, r6]
			b = *s++;
10008118:	785a      	ldrb	r2, [r3, #1]
			if (b != 0) *d = b;
1000811a:	2a00      	cmp	r2, #0
1000811c:	d000      	beq.n	10008120 <_Z4Gamev.part.0+0xf18>
1000811e:	7042      	strb	r2, [r0, #1]
			b = *s++;
10008120:	789a      	ldrb	r2, [r3, #2]
			if (b != 0) *d = b;
10008122:	2a00      	cmp	r2, #0
10008124:	d000      	beq.n	10008128 <_Z4Gamev.part.0+0xf20>
10008126:	7082      	strb	r2, [r0, #2]
			b = *s++;
10008128:	78da      	ldrb	r2, [r3, #3]
			if (b != 0) *d = b;
1000812a:	2a00      	cmp	r2, #0
1000812c:	d000      	beq.n	10008130 <_Z4Gamev.part.0+0xf28>
1000812e:	70c2      	strb	r2, [r0, #3]
10008130:	9a04      	ldr	r2, [sp, #16]
10008132:	2a00      	cmp	r2, #0
10008134:	d000      	beq.n	10008138 <_Z4Gamev.part.0+0xf30>
10008136:	76c2      	strb	r2, [r0, #27]
			b = *s++;
10008138:	795a      	ldrb	r2, [r3, #5]
			if (b != 0) *d = b;
1000813a:	2a00      	cmp	r2, #0
1000813c:	d000      	beq.n	10008140 <_Z4Gamev.part.0+0xf38>
1000813e:	7702      	strb	r2, [r0, #28]
			b = *s++;
10008140:	799a      	ldrb	r2, [r3, #6]
			if (b != 0) *d = b;
10008142:	2a00      	cmp	r2, #0
10008144:	d000      	beq.n	10008148 <_Z4Gamev.part.0+0xf40>
10008146:	7742      	strb	r2, [r0, #29]
			b = *s++;
10008148:	79da      	ldrb	r2, [r3, #7]
			if (b != 0) *d = b;
1000814a:	2a00      	cmp	r2, #0
1000814c:	d000      	beq.n	10008150 <_Z4Gamev.part.0+0xf48>
1000814e:	7782      	strb	r2, [r0, #30]
10008150:	9c05      	ldr	r4, [sp, #20]
10008152:	2c00      	cmp	r4, #0
10008154:	d001      	beq.n	1000815a <_Z4Gamev.part.0+0xf52>
10008156:	2236      	movs	r2, #54	; 0x36
10008158:	5484      	strb	r4, [r0, r2]
			b = *s++;
1000815a:	7a5a      	ldrb	r2, [r3, #9]
			if (b != 0) *d = b;
1000815c:	2a00      	cmp	r2, #0
1000815e:	d001      	beq.n	10008164 <_Z4Gamev.part.0+0xf5c>
10008160:	2437      	movs	r4, #55	; 0x37
10008162:	5502      	strb	r2, [r0, r4]
			b = *s++;
10008164:	7a9a      	ldrb	r2, [r3, #10]
			if (b != 0) *d = b;
10008166:	2a00      	cmp	r2, #0
10008168:	d001      	beq.n	1000816e <_Z4Gamev.part.0+0xf66>
1000816a:	2438      	movs	r4, #56	; 0x38
1000816c:	5502      	strb	r2, [r0, r4]
			b = *s++;
1000816e:	7ada      	ldrb	r2, [r3, #11]
			if (b != 0) *d = b;
10008170:	2a00      	cmp	r2, #0
10008172:	d001      	beq.n	10008178 <_Z4Gamev.part.0+0xf70>
10008174:	2439      	movs	r4, #57	; 0x39
10008176:	5502      	strb	r2, [r0, r4]
10008178:	9c03      	ldr	r4, [sp, #12]
1000817a:	2c00      	cmp	r4, #0
1000817c:	d001      	beq.n	10008182 <_Z4Gamev.part.0+0xf7a>
1000817e:	2251      	movs	r2, #81	; 0x51
10008180:	5484      	strb	r4, [r0, r2]
			b = *s++;
10008182:	7b5b      	ldrb	r3, [r3, #13]
			if (b != 0) *d = b;
10008184:	2b00      	cmp	r3, #0
10008186:	d001      	beq.n	1000818c <_Z4Gamev.part.0+0xf84>
10008188:	2252      	movs	r2, #82	; 0x52
1000818a:	5483      	strb	r3, [r0, r2]
1000818c:	2f00      	cmp	r7, #0
1000818e:	d001      	beq.n	10008194 <_Z4Gamev.part.0+0xf8c>
10008190:	2353      	movs	r3, #83	; 0x53
10008192:	54c7      	strb	r7, [r0, r3]
10008194:	2900      	cmp	r1, #0
10008196:	d101      	bne.n	1000819c <_Z4Gamev.part.0+0xf94>
10008198:	f7ff f850 	bl	1000723c <_Z4Gamev.part.0+0x34>
1000819c:	2354      	movs	r3, #84	; 0x54
1000819e:	54c1      	strb	r1, [r0, r3]
100081a0:	f7ff f84c 	bl	1000723c <_Z4Gamev.part.0+0x34>
	memcpy(Board, SaveBoard, MAPSIZE);
100081a4:	2287      	movs	r2, #135	; 0x87
100081a6:	4658      	mov	r0, fp
100081a8:	490a      	ldr	r1, [pc, #40]	; (100081d4 <_Z4Gamev.part.0+0xfcc>)
100081aa:	0092      	lsls	r2, r2, #2
100081ac:	f7f8 fbf4 	bl	10000998 <__wrap___aeabi_memcpy>
				FlushChar();
				break;
			}
		}
	}
}
100081b0:	b015      	add	sp, #84	; 0x54
100081b2:	bcf0      	pop	{r4, r5, r6, r7}
100081b4:	46bb      	mov	fp, r7
100081b6:	46b2      	mov	sl, r6
100081b8:	46a9      	mov	r9, r5
100081ba:	46a0      	mov	r8, r4
100081bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
100081be:	46c0      	nop			; (mov r8, r8)
100081c0:	20012765 	.word	0x20012765
100081c4:	20012766 	.word	0x20012766
100081c8:	20012764 	.word	0x20012764
100081cc:	1000e9f4 	.word	0x1000e9f4
100081d0:	1000e9b8 	.word	0x1000e9b8
100081d4:	20006c2c 	.word	0x20006c2c
		sleep_ms(250);
100081d8:	20fa      	movs	r0, #250	; 0xfa
100081da:	f7fa fc7d 	bl	10002ad8 <sleep_ms>
				ClearBrick(BrickX, BrickY, Brick);
100081de:	2700      	movs	r7, #0
100081e0:	4ba0      	ldr	r3, [pc, #640]	; (10008464 <_Z4Gamev.part.0+0x125c>)
			b = *s++;
100081e2:	4ca1      	ldr	r4, [pc, #644]	; (10008468 <_Z4Gamev.part.0+0x1260>)
				ClearBrick(BrickX, BrickY, Brick);
100081e4:	781b      	ldrb	r3, [r3, #0]
100081e6:	b25b      	sxtb	r3, r3
100081e8:	469a      	mov	sl, r3
100081ea:	4ba0      	ldr	r3, [pc, #640]	; (1000846c <_Z4Gamev.part.0+0x1264>)
100081ec:	57df      	ldrsb	r7, [r3, r7]
	const u8* s = &BrickTemp[brick*BRICKTEMPSIZE];
100081ee:	4ba0      	ldr	r3, [pc, #640]	; (10008470 <_Z4Gamev.part.0+0x1268>)
	u8* d = &Board[x + y*MAPW];
100081f0:	007a      	lsls	r2, r7, #1
100081f2:	19d2      	adds	r2, r2, r7
100081f4:	00d0      	lsls	r0, r2, #3
100081f6:	1810      	adds	r0, r2, r0
100081f8:	0005      	movs	r5, r0
100081fa:	4450      	add	r0, sl
100081fc:	0002      	movs	r2, r0
	const u8* s = &BrickTemp[brick*BRICKTEMPSIZE];
100081fe:	7819      	ldrb	r1, [r3, #0]
10008200:	4b99      	ldr	r3, [pc, #612]	; (10008468 <_Z4Gamev.part.0+0x1260>)
10008202:	0109      	lsls	r1, r1, #4
10008204:	185b      	adds	r3, r3, r1
			b = *s++;
10008206:	5c61      	ldrb	r1, [r4, r1]
	u8* d = &Board[x + y*MAPW];
10008208:	900b      	str	r0, [sp, #44]	; 0x2c
1000820a:	445a      	add	r2, fp
			b = *s++;
1000820c:	910c      	str	r1, [sp, #48]	; 0x30
			if (b != 0) *d = TILE_EMPTY;
1000820e:	2900      	cmp	r1, #0
10008210:	d002      	beq.n	10008218 <_Z4Gamev.part.0+0x1010>
10008212:	2108      	movs	r1, #8
10008214:	465c      	mov	r4, fp
10008216:	5421      	strb	r1, [r4, r0]
			b = *s++;
10008218:	7859      	ldrb	r1, [r3, #1]
1000821a:	9109      	str	r1, [sp, #36]	; 0x24
			if (b != 0) *d = TILE_EMPTY;
1000821c:	2900      	cmp	r1, #0
1000821e:	d001      	beq.n	10008224 <_Z4Gamev.part.0+0x101c>
10008220:	2108      	movs	r1, #8
10008222:	7051      	strb	r1, [r2, #1]
			b = *s++;
10008224:	7899      	ldrb	r1, [r3, #2]
10008226:	9103      	str	r1, [sp, #12]
			if (b != 0) *d = TILE_EMPTY;
10008228:	2900      	cmp	r1, #0
1000822a:	d001      	beq.n	10008230 <_Z4Gamev.part.0+0x1028>
1000822c:	2108      	movs	r1, #8
1000822e:	7091      	strb	r1, [r2, #2]
			b = *s++;
10008230:	78d9      	ldrb	r1, [r3, #3]
10008232:	910a      	str	r1, [sp, #40]	; 0x28
			if (b != 0) *d = TILE_EMPTY;
10008234:	2900      	cmp	r1, #0
10008236:	d001      	beq.n	1000823c <_Z4Gamev.part.0+0x1034>
10008238:	2108      	movs	r1, #8
1000823a:	70d1      	strb	r1, [r2, #3]
			b = *s++;
1000823c:	7919      	ldrb	r1, [r3, #4]
1000823e:	910d      	str	r1, [sp, #52]	; 0x34
			if (b != 0) *d = TILE_EMPTY;
10008240:	2900      	cmp	r1, #0
10008242:	d001      	beq.n	10008248 <_Z4Gamev.part.0+0x1040>
10008244:	2108      	movs	r1, #8
10008246:	76d1      	strb	r1, [r2, #27]
			b = *s++;
10008248:	7959      	ldrb	r1, [r3, #5]
1000824a:	9104      	str	r1, [sp, #16]
			if (b != 0) *d = TILE_EMPTY;
1000824c:	2900      	cmp	r1, #0
1000824e:	d001      	beq.n	10008254 <_Z4Gamev.part.0+0x104c>
10008250:	2108      	movs	r1, #8
10008252:	7711      	strb	r1, [r2, #28]
			b = *s++;
10008254:	7999      	ldrb	r1, [r3, #6]
10008256:	9101      	str	r1, [sp, #4]
			if (b != 0) *d = TILE_EMPTY;
10008258:	2900      	cmp	r1, #0
1000825a:	d001      	beq.n	10008260 <_Z4Gamev.part.0+0x1058>
1000825c:	2108      	movs	r1, #8
1000825e:	7751      	strb	r1, [r2, #29]
			b = *s++;
10008260:	79d9      	ldrb	r1, [r3, #7]
10008262:	9105      	str	r1, [sp, #20]
			if (b != 0) *d = TILE_EMPTY;
10008264:	2900      	cmp	r1, #0
10008266:	d001      	beq.n	1000826c <_Z4Gamev.part.0+0x1064>
10008268:	2108      	movs	r1, #8
1000826a:	7791      	strb	r1, [r2, #30]
			b = *s++;
1000826c:	7a19      	ldrb	r1, [r3, #8]
1000826e:	910e      	str	r1, [sp, #56]	; 0x38
			if (b != 0) *d = TILE_EMPTY;
10008270:	2900      	cmp	r1, #0
10008272:	d002      	beq.n	1000827a <_Z4Gamev.part.0+0x1072>
10008274:	2136      	movs	r1, #54	; 0x36
10008276:	2008      	movs	r0, #8
10008278:	5450      	strb	r0, [r2, r1]
			b = *s++;
1000827a:	7a59      	ldrb	r1, [r3, #9]
1000827c:	9106      	str	r1, [sp, #24]
			if (b != 0) *d = TILE_EMPTY;
1000827e:	2900      	cmp	r1, #0
10008280:	d002      	beq.n	10008288 <_Z4Gamev.part.0+0x1080>
10008282:	2137      	movs	r1, #55	; 0x37
10008284:	2008      	movs	r0, #8
10008286:	5450      	strb	r0, [r2, r1]
			b = *s++;
10008288:	7a9e      	ldrb	r6, [r3, #10]
			if (b != 0) *d = TILE_EMPTY;
1000828a:	2e00      	cmp	r6, #0
1000828c:	d002      	beq.n	10008294 <_Z4Gamev.part.0+0x108c>
1000828e:	2138      	movs	r1, #56	; 0x38
10008290:	2008      	movs	r0, #8
10008292:	5450      	strb	r0, [r2, r1]
			b = *s++;
10008294:	7ad9      	ldrb	r1, [r3, #11]
10008296:	9107      	str	r1, [sp, #28]
			if (b != 0) *d = TILE_EMPTY;
10008298:	2900      	cmp	r1, #0
1000829a:	d002      	beq.n	100082a2 <_Z4Gamev.part.0+0x109a>
1000829c:	2139      	movs	r1, #57	; 0x39
1000829e:	2008      	movs	r0, #8
100082a0:	5450      	strb	r0, [r2, r1]
			b = *s++;
100082a2:	7b19      	ldrb	r1, [r3, #12]
100082a4:	910f      	str	r1, [sp, #60]	; 0x3c
			if (b != 0) *d = TILE_EMPTY;
100082a6:	2900      	cmp	r1, #0
100082a8:	d002      	beq.n	100082b0 <_Z4Gamev.part.0+0x10a8>
100082aa:	2151      	movs	r1, #81	; 0x51
100082ac:	2008      	movs	r0, #8
100082ae:	5450      	strb	r0, [r2, r1]
			b = *s++;
100082b0:	7b59      	ldrb	r1, [r3, #13]
100082b2:	9108      	str	r1, [sp, #32]
			if (b != 0) *d = TILE_EMPTY;
100082b4:	2900      	cmp	r1, #0
100082b6:	d002      	beq.n	100082be <_Z4Gamev.part.0+0x10b6>
100082b8:	2152      	movs	r1, #82	; 0x52
100082ba:	2008      	movs	r0, #8
100082bc:	5450      	strb	r0, [r2, r1]
			b = *s++;
100082be:	7b9c      	ldrb	r4, [r3, #14]
			if (b != 0) *d = TILE_EMPTY;
100082c0:	2c00      	cmp	r4, #0
100082c2:	d002      	beq.n	100082ca <_Z4Gamev.part.0+0x10c2>
100082c4:	2153      	movs	r1, #83	; 0x53
100082c6:	2008      	movs	r0, #8
100082c8:	5450      	strb	r0, [r2, r1]
			b = *s++;
100082ca:	7bdb      	ldrb	r3, [r3, #15]
100082cc:	469c      	mov	ip, r3
			if (b != 0) *d = TILE_EMPTY;
100082ce:	2b00      	cmp	r3, #0
100082d0:	d000      	beq.n	100082d4 <_Z4Gamev.part.0+0x10cc>
100082d2:	e243      	b.n	1000875c <_Z4Gamev.part.0+0x1554>
				if (CheckBrick(BrickX+1, BrickY, Brick)) BrickX++;
100082d4:	4653      	mov	r3, sl
100082d6:	3301      	adds	r3, #1
				if (CheckBrick(BrickX-1, BrickY, Brick)) BrickX--;
100082d8:	b259      	sxtb	r1, r3
	u8* d = &Board[x + y*MAPW];
100082da:	468a      	mov	sl, r1
100082dc:	002b      	movs	r3, r5
100082de:	4453      	add	r3, sl
				if (CheckBrick(BrickX-1, BrickY, Brick)) BrickX--;
100082e0:	9110      	str	r1, [sp, #64]	; 0x40
	u8* d = &Board[x + y*MAPW];
100082e2:	0019      	movs	r1, r3
			if (b != 0)
100082e4:	980c      	ldr	r0, [sp, #48]	; 0x30
	u8* d = &Board[x + y*MAPW];
100082e6:	001d      	movs	r5, r3
100082e8:	9311      	str	r3, [sp, #68]	; 0x44
100082ea:	4459      	add	r1, fp
			if (b != 0)
100082ec:	2800      	cmp	r0, #0
100082ee:	d100      	bne.n	100082f2 <_Z4Gamev.part.0+0x10ea>
100082f0:	e143      	b.n	1000857a <_Z4Gamev.part.0+0x1372>
				if ((y < 1) || (y >= MAPH-1))
100082f2:	b2f8      	uxtb	r0, r7
100082f4:	1e43      	subs	r3, r0, #1
100082f6:	2b11      	cmp	r3, #17
100082f8:	d800      	bhi.n	100082fc <_Z4Gamev.part.0+0x10f4>
100082fa:	e220      	b.n	1000873e <_Z4Gamev.part.0+0x1536>
			if (b != 0)
100082fc:	9f09      	ldr	r7, [sp, #36]	; 0x24
					ok = False;
100082fe:	2300      	movs	r3, #0
			if (b != 0)
10008300:	2f00      	cmp	r7, #0
10008302:	d004      	beq.n	1000830e <_Z4Gamev.part.0+0x1106>
				if ((y < 1) || (y >= MAPH-1))
10008304:	1e47      	subs	r7, r0, #1
10008306:	2f11      	cmp	r7, #17
10008308:	d800      	bhi.n	1000830c <_Z4Gamev.part.0+0x1104>
1000830a:	e140      	b.n	1000858e <_Z4Gamev.part.0+0x1386>
					ok = False;
1000830c:	2300      	movs	r3, #0
			if (b != 0)
1000830e:	9d03      	ldr	r5, [sp, #12]
10008310:	2d00      	cmp	r5, #0
10008312:	d004      	beq.n	1000831e <_Z4Gamev.part.0+0x1116>
				if ((y < 1) || (y >= MAPH-1))
10008314:	1e47      	subs	r7, r0, #1
10008316:	2f11      	cmp	r7, #17
10008318:	d800      	bhi.n	1000831c <_Z4Gamev.part.0+0x1114>
1000831a:	e143      	b.n	100085a4 <_Z4Gamev.part.0+0x139c>
					ok = False;
1000831c:	2300      	movs	r3, #0
			if (b != 0)
1000831e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
10008320:	2d00      	cmp	r5, #0
10008322:	d004      	beq.n	1000832e <_Z4Gamev.part.0+0x1126>
				if ((y < 1) || (y >= MAPH-1))
10008324:	1e47      	subs	r7, r0, #1
10008326:	2f11      	cmp	r7, #17
10008328:	d800      	bhi.n	1000832c <_Z4Gamev.part.0+0x1124>
1000832a:	e146      	b.n	100085ba <_Z4Gamev.part.0+0x13b2>
					ok = False;
1000832c:	2300      	movs	r3, #0
		y++;
1000832e:	1c47      	adds	r7, r0, #1
10008330:	b2fd      	uxtb	r5, r7
10008332:	9502      	str	r5, [sp, #8]
			if (b != 0)
10008334:	9d0d      	ldr	r5, [sp, #52]	; 0x34
10008336:	2d00      	cmp	r5, #0
10008338:	d100      	bne.n	1000833c <_Z4Gamev.part.0+0x1134>
1000833a:	e14c      	b.n	100085d6 <_Z4Gamev.part.0+0x13ce>
				if ((y < 1) || (y >= MAPH-1))
1000833c:	2811      	cmp	r0, #17
1000833e:	d800      	bhi.n	10008342 <_Z4Gamev.part.0+0x113a>
10008340:	e23c      	b.n	100087bc <_Z4Gamev.part.0+0x15b4>
			if (b != 0)
10008342:	9b04      	ldr	r3, [sp, #16]
10008344:	2b00      	cmp	r3, #0
10008346:	d000      	beq.n	1000834a <_Z4Gamev.part.0+0x1142>
10008348:	e24c      	b.n	100087e4 <_Z4Gamev.part.0+0x15dc>
					ok = False;
1000834a:	2300      	movs	r3, #0
		y++;
1000834c:	3002      	adds	r0, #2
1000834e:	b2c0      	uxtb	r0, r0
10008350:	4682      	mov	sl, r0
			if (b != 0)
10008352:	980e      	ldr	r0, [sp, #56]	; 0x38
10008354:	2800      	cmp	r0, #0
10008356:	d100      	bne.n	1000835a <_Z4Gamev.part.0+0x1152>
10008358:	e168      	b.n	1000862c <_Z4Gamev.part.0+0x1424>
				if ((y < 1) || (y >= MAPH-1))
1000835a:	9802      	ldr	r0, [sp, #8]
1000835c:	2811      	cmp	r0, #17
1000835e:	d900      	bls.n	10008362 <_Z4Gamev.part.0+0x115a>
10008360:	e2b7      	b.n	100088d2 <_Z4Gamev.part.0+0x16ca>
					if (*d != TILE_EMPTY) ok = False;
10008362:	2036      	movs	r0, #54	; 0x36
10008364:	5c08      	ldrb	r0, [r1, r0]
10008366:	3808      	subs	r0, #8
10008368:	4247      	negs	r7, r0
1000836a:	4178      	adcs	r0, r7
1000836c:	4240      	negs	r0, r0
1000836e:	4003      	ands	r3, r0
			if (b != 0)
10008370:	9806      	ldr	r0, [sp, #24]
10008372:	2800      	cmp	r0, #0
10008374:	d100      	bne.n	10008378 <_Z4Gamev.part.0+0x1170>
10008376:	e352      	b.n	10008a1e <_Z4Gamev.part.0+0x1816>
					if (*d != TILE_EMPTY) ok = False;
10008378:	2037      	movs	r0, #55	; 0x37
1000837a:	5c08      	ldrb	r0, [r1, r0]
1000837c:	3808      	subs	r0, #8
1000837e:	4247      	negs	r7, r0
10008380:	4178      	adcs	r0, r7
10008382:	4240      	negs	r0, r0
10008384:	4003      	ands	r3, r0
			if (b != 0)
10008386:	2e00      	cmp	r6, #0
10008388:	d100      	bne.n	1000838c <_Z4Gamev.part.0+0x1184>
1000838a:	e27a      	b.n	10008882 <_Z4Gamev.part.0+0x167a>
					if (*d != TILE_EMPTY) ok = False;
1000838c:	2038      	movs	r0, #56	; 0x38
1000838e:	5c08      	ldrb	r0, [r1, r0]
10008390:	3808      	subs	r0, #8
10008392:	4247      	negs	r7, r0
10008394:	4178      	adcs	r0, r7
10008396:	4240      	negs	r0, r0
10008398:	4003      	ands	r3, r0
			if (b != 0)
1000839a:	9807      	ldr	r0, [sp, #28]
1000839c:	2800      	cmp	r0, #0
1000839e:	d100      	bne.n	100083a2 <_Z4Gamev.part.0+0x119a>
100083a0:	e150      	b.n	10008644 <_Z4Gamev.part.0+0x143c>
					if (*d != TILE_EMPTY) ok = False;
100083a2:	2039      	movs	r0, #57	; 0x39
100083a4:	5c08      	ldrb	r0, [r1, r0]
					ok = False;
100083a6:	3808      	subs	r0, #8
100083a8:	4247      	negs	r7, r0
100083aa:	4178      	adcs	r0, r7
100083ac:	4240      	negs	r0, r0
100083ae:	4003      	ands	r3, r0
			if (b != 0)
100083b0:	980f      	ldr	r0, [sp, #60]	; 0x3c
100083b2:	2800      	cmp	r0, #0
100083b4:	d000      	beq.n	100083b8 <_Z4Gamev.part.0+0x11b0>
100083b6:	e149      	b.n	1000864c <_Z4Gamev.part.0+0x1444>
100083b8:	9808      	ldr	r0, [sp, #32]
100083ba:	2800      	cmp	r0, #0
100083bc:	d100      	bne.n	100083c0 <_Z4Gamev.part.0+0x11b8>
100083be:	e2da      	b.n	10008976 <_Z4Gamev.part.0+0x176e>
				if ((y < 1) || (y >= MAPH-1))
100083c0:	4650      	mov	r0, sl
100083c2:	2811      	cmp	r0, #17
100083c4:	d800      	bhi.n	100083c8 <_Z4Gamev.part.0+0x11c0>
100083c6:	e270      	b.n	100088aa <_Z4Gamev.part.0+0x16a2>
			if (b != 0) *d = b;
100083c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
100083ca:	2b00      	cmp	r3, #0
100083cc:	d002      	beq.n	100083d4 <_Z4Gamev.part.0+0x11cc>
100083ce:	4659      	mov	r1, fp
100083d0:	980b      	ldr	r0, [sp, #44]	; 0x2c
100083d2:	540b      	strb	r3, [r1, r0]
100083d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
100083d6:	2b00      	cmp	r3, #0
100083d8:	d000      	beq.n	100083dc <_Z4Gamev.part.0+0x11d4>
100083da:	7053      	strb	r3, [r2, #1]
100083dc:	9b03      	ldr	r3, [sp, #12]
100083de:	2b00      	cmp	r3, #0
100083e0:	d000      	beq.n	100083e4 <_Z4Gamev.part.0+0x11dc>
100083e2:	7093      	strb	r3, [r2, #2]
100083e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
100083e6:	2b00      	cmp	r3, #0
100083e8:	d000      	beq.n	100083ec <_Z4Gamev.part.0+0x11e4>
100083ea:	70d3      	strb	r3, [r2, #3]
100083ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
100083ee:	2b00      	cmp	r3, #0
100083f0:	d000      	beq.n	100083f4 <_Z4Gamev.part.0+0x11ec>
100083f2:	76d3      	strb	r3, [r2, #27]
100083f4:	9b04      	ldr	r3, [sp, #16]
100083f6:	2b00      	cmp	r3, #0
100083f8:	d000      	beq.n	100083fc <_Z4Gamev.part.0+0x11f4>
100083fa:	7713      	strb	r3, [r2, #28]
100083fc:	9b01      	ldr	r3, [sp, #4]
100083fe:	2b00      	cmp	r3, #0
10008400:	d000      	beq.n	10008404 <_Z4Gamev.part.0+0x11fc>
10008402:	7753      	strb	r3, [r2, #29]
10008404:	9b05      	ldr	r3, [sp, #20]
10008406:	2b00      	cmp	r3, #0
10008408:	d000      	beq.n	1000840c <_Z4Gamev.part.0+0x1204>
1000840a:	7793      	strb	r3, [r2, #30]
1000840c:	990e      	ldr	r1, [sp, #56]	; 0x38
1000840e:	2900      	cmp	r1, #0
10008410:	d001      	beq.n	10008416 <_Z4Gamev.part.0+0x120e>
10008412:	2336      	movs	r3, #54	; 0x36
10008414:	54d1      	strb	r1, [r2, r3]
10008416:	9906      	ldr	r1, [sp, #24]
10008418:	2900      	cmp	r1, #0
1000841a:	d001      	beq.n	10008420 <_Z4Gamev.part.0+0x1218>
1000841c:	2337      	movs	r3, #55	; 0x37
1000841e:	54d1      	strb	r1, [r2, r3]
10008420:	2e00      	cmp	r6, #0
10008422:	d001      	beq.n	10008428 <_Z4Gamev.part.0+0x1220>
10008424:	2338      	movs	r3, #56	; 0x38
10008426:	54d6      	strb	r6, [r2, r3]
10008428:	9907      	ldr	r1, [sp, #28]
1000842a:	2900      	cmp	r1, #0
1000842c:	d001      	beq.n	10008432 <_Z4Gamev.part.0+0x122a>
1000842e:	2339      	movs	r3, #57	; 0x39
10008430:	54d1      	strb	r1, [r2, r3]
10008432:	990f      	ldr	r1, [sp, #60]	; 0x3c
10008434:	2900      	cmp	r1, #0
10008436:	d001      	beq.n	1000843c <_Z4Gamev.part.0+0x1234>
10008438:	2351      	movs	r3, #81	; 0x51
1000843a:	54d1      	strb	r1, [r2, r3]
1000843c:	9908      	ldr	r1, [sp, #32]
1000843e:	2900      	cmp	r1, #0
10008440:	d001      	beq.n	10008446 <_Z4Gamev.part.0+0x123e>
10008442:	2352      	movs	r3, #82	; 0x52
10008444:	54d1      	strb	r1, [r2, r3]
10008446:	2c00      	cmp	r4, #0
10008448:	d001      	beq.n	1000844e <_Z4Gamev.part.0+0x1246>
1000844a:	2353      	movs	r3, #83	; 0x53
1000844c:	54d4      	strb	r4, [r2, r3]
1000844e:	4663      	mov	r3, ip
10008450:	2b00      	cmp	r3, #0
10008452:	d101      	bne.n	10008458 <_Z4Gamev.part.0+0x1250>
10008454:	f7fe fef2 	bl	1000723c <_Z4Gamev.part.0+0x34>
10008458:	2354      	movs	r3, #84	; 0x54
1000845a:	4661      	mov	r1, ip
1000845c:	54d1      	strb	r1, [r2, r3]
1000845e:	f7fe feed 	bl	1000723c <_Z4Gamev.part.0+0x34>
10008462:	46c0      	nop			; (mov r8, r8)
10008464:	20012765 	.word	0x20012765
10008468:	1000e9f4 	.word	0x1000e9f4
1000846c:	20012766 	.word	0x20012766
10008470:	20012764 	.word	0x20012764
		sleep_ms(250);
10008474:	20fa      	movs	r0, #250	; 0xfa
10008476:	f7fa fb2f 	bl	10002ad8 <sleep_ms>
				ClearBrick(BrickX, BrickY, Brick);
1000847a:	2700      	movs	r7, #0
1000847c:	4bc8      	ldr	r3, [pc, #800]	; (100087a0 <_Z4Gamev.part.0+0x1598>)
			b = *s++;
1000847e:	4cc9      	ldr	r4, [pc, #804]	; (100087a4 <_Z4Gamev.part.0+0x159c>)
				ClearBrick(BrickX, BrickY, Brick);
10008480:	781b      	ldrb	r3, [r3, #0]
10008482:	b25b      	sxtb	r3, r3
10008484:	469a      	mov	sl, r3
10008486:	4bc8      	ldr	r3, [pc, #800]	; (100087a8 <_Z4Gamev.part.0+0x15a0>)
10008488:	57df      	ldrsb	r7, [r3, r7]
	const u8* s = &BrickTemp[brick*BRICKTEMPSIZE];
1000848a:	4bc8      	ldr	r3, [pc, #800]	; (100087ac <_Z4Gamev.part.0+0x15a4>)
	u8* d = &Board[x + y*MAPW];
1000848c:	007a      	lsls	r2, r7, #1
1000848e:	19d2      	adds	r2, r2, r7
10008490:	00d0      	lsls	r0, r2, #3
10008492:	1810      	adds	r0, r2, r0
10008494:	0005      	movs	r5, r0
10008496:	4450      	add	r0, sl
10008498:	0002      	movs	r2, r0
	const u8* s = &BrickTemp[brick*BRICKTEMPSIZE];
1000849a:	7819      	ldrb	r1, [r3, #0]
1000849c:	4bc1      	ldr	r3, [pc, #772]	; (100087a4 <_Z4Gamev.part.0+0x159c>)
1000849e:	0109      	lsls	r1, r1, #4
100084a0:	185b      	adds	r3, r3, r1
			b = *s++;
100084a2:	5c61      	ldrb	r1, [r4, r1]
	u8* d = &Board[x + y*MAPW];
100084a4:	900b      	str	r0, [sp, #44]	; 0x2c
100084a6:	445a      	add	r2, fp
			b = *s++;
100084a8:	910c      	str	r1, [sp, #48]	; 0x30
			if (b != 0) *d = TILE_EMPTY;
100084aa:	2900      	cmp	r1, #0
100084ac:	d002      	beq.n	100084b4 <_Z4Gamev.part.0+0x12ac>
100084ae:	2108      	movs	r1, #8
100084b0:	465c      	mov	r4, fp
100084b2:	5421      	strb	r1, [r4, r0]
			b = *s++;
100084b4:	7859      	ldrb	r1, [r3, #1]
100084b6:	9109      	str	r1, [sp, #36]	; 0x24
			if (b != 0) *d = TILE_EMPTY;
100084b8:	2900      	cmp	r1, #0
100084ba:	d001      	beq.n	100084c0 <_Z4Gamev.part.0+0x12b8>
100084bc:	2108      	movs	r1, #8
100084be:	7051      	strb	r1, [r2, #1]
			b = *s++;
100084c0:	7899      	ldrb	r1, [r3, #2]
100084c2:	9103      	str	r1, [sp, #12]
			if (b != 0) *d = TILE_EMPTY;
100084c4:	2900      	cmp	r1, #0
100084c6:	d001      	beq.n	100084cc <_Z4Gamev.part.0+0x12c4>
100084c8:	2108      	movs	r1, #8
100084ca:	7091      	strb	r1, [r2, #2]
			b = *s++;
100084cc:	78d9      	ldrb	r1, [r3, #3]
100084ce:	910a      	str	r1, [sp, #40]	; 0x28
			if (b != 0) *d = TILE_EMPTY;
100084d0:	2900      	cmp	r1, #0
100084d2:	d001      	beq.n	100084d8 <_Z4Gamev.part.0+0x12d0>
100084d4:	2108      	movs	r1, #8
100084d6:	70d1      	strb	r1, [r2, #3]
			b = *s++;
100084d8:	7919      	ldrb	r1, [r3, #4]
100084da:	910d      	str	r1, [sp, #52]	; 0x34
			if (b != 0) *d = TILE_EMPTY;
100084dc:	2900      	cmp	r1, #0
100084de:	d001      	beq.n	100084e4 <_Z4Gamev.part.0+0x12dc>
100084e0:	2108      	movs	r1, #8
100084e2:	76d1      	strb	r1, [r2, #27]
			b = *s++;
100084e4:	7959      	ldrb	r1, [r3, #5]
100084e6:	9104      	str	r1, [sp, #16]
			if (b != 0) *d = TILE_EMPTY;
100084e8:	2900      	cmp	r1, #0
100084ea:	d001      	beq.n	100084f0 <_Z4Gamev.part.0+0x12e8>
100084ec:	2108      	movs	r1, #8
100084ee:	7711      	strb	r1, [r2, #28]
			b = *s++;
100084f0:	7999      	ldrb	r1, [r3, #6]
100084f2:	9101      	str	r1, [sp, #4]
			if (b != 0) *d = TILE_EMPTY;
100084f4:	2900      	cmp	r1, #0
100084f6:	d001      	beq.n	100084fc <_Z4Gamev.part.0+0x12f4>
100084f8:	2108      	movs	r1, #8
100084fa:	7751      	strb	r1, [r2, #29]
			b = *s++;
100084fc:	79d9      	ldrb	r1, [r3, #7]
100084fe:	9105      	str	r1, [sp, #20]
			if (b != 0) *d = TILE_EMPTY;
10008500:	2900      	cmp	r1, #0
10008502:	d001      	beq.n	10008508 <_Z4Gamev.part.0+0x1300>
10008504:	2108      	movs	r1, #8
10008506:	7791      	strb	r1, [r2, #30]
			b = *s++;
10008508:	7a19      	ldrb	r1, [r3, #8]
1000850a:	910e      	str	r1, [sp, #56]	; 0x38
			if (b != 0) *d = TILE_EMPTY;
1000850c:	2900      	cmp	r1, #0
1000850e:	d002      	beq.n	10008516 <_Z4Gamev.part.0+0x130e>
10008510:	2136      	movs	r1, #54	; 0x36
10008512:	2008      	movs	r0, #8
10008514:	5450      	strb	r0, [r2, r1]
			b = *s++;
10008516:	7a59      	ldrb	r1, [r3, #9]
10008518:	9106      	str	r1, [sp, #24]
			if (b != 0) *d = TILE_EMPTY;
1000851a:	2900      	cmp	r1, #0
1000851c:	d002      	beq.n	10008524 <_Z4Gamev.part.0+0x131c>
1000851e:	2137      	movs	r1, #55	; 0x37
10008520:	2008      	movs	r0, #8
10008522:	5450      	strb	r0, [r2, r1]
			b = *s++;
10008524:	7a9e      	ldrb	r6, [r3, #10]
			if (b != 0) *d = TILE_EMPTY;
10008526:	2e00      	cmp	r6, #0
10008528:	d002      	beq.n	10008530 <_Z4Gamev.part.0+0x1328>
1000852a:	2138      	movs	r1, #56	; 0x38
1000852c:	2008      	movs	r0, #8
1000852e:	5450      	strb	r0, [r2, r1]
			b = *s++;
10008530:	7ad9      	ldrb	r1, [r3, #11]
10008532:	9107      	str	r1, [sp, #28]
			if (b != 0) *d = TILE_EMPTY;
10008534:	2900      	cmp	r1, #0
10008536:	d002      	beq.n	1000853e <_Z4Gamev.part.0+0x1336>
10008538:	2139      	movs	r1, #57	; 0x39
1000853a:	2008      	movs	r0, #8
1000853c:	5450      	strb	r0, [r2, r1]
			b = *s++;
1000853e:	7b19      	ldrb	r1, [r3, #12]
10008540:	910f      	str	r1, [sp, #60]	; 0x3c
			if (b != 0) *d = TILE_EMPTY;
10008542:	2900      	cmp	r1, #0
10008544:	d002      	beq.n	1000854c <_Z4Gamev.part.0+0x1344>
10008546:	2151      	movs	r1, #81	; 0x51
10008548:	2008      	movs	r0, #8
1000854a:	5450      	strb	r0, [r2, r1]
			b = *s++;
1000854c:	7b59      	ldrb	r1, [r3, #13]
1000854e:	9108      	str	r1, [sp, #32]
			if (b != 0) *d = TILE_EMPTY;
10008550:	2900      	cmp	r1, #0
10008552:	d002      	beq.n	1000855a <_Z4Gamev.part.0+0x1352>
10008554:	2152      	movs	r1, #82	; 0x52
10008556:	2008      	movs	r0, #8
10008558:	5450      	strb	r0, [r2, r1]
			b = *s++;
1000855a:	7b9c      	ldrb	r4, [r3, #14]
			if (b != 0) *d = TILE_EMPTY;
1000855c:	2c00      	cmp	r4, #0
1000855e:	d002      	beq.n	10008566 <_Z4Gamev.part.0+0x135e>
10008560:	2153      	movs	r1, #83	; 0x53
10008562:	2008      	movs	r0, #8
10008564:	5450      	strb	r0, [r2, r1]
			b = *s++;
10008566:	7bdb      	ldrb	r3, [r3, #15]
10008568:	469c      	mov	ip, r3
			if (b != 0) *d = TILE_EMPTY;
1000856a:	2b00      	cmp	r3, #0
1000856c:	d002      	beq.n	10008574 <_Z4Gamev.part.0+0x136c>
1000856e:	2354      	movs	r3, #84	; 0x54
10008570:	2108      	movs	r1, #8
10008572:	54d1      	strb	r1, [r2, r3]
				if (CheckBrick(BrickX-1, BrickY, Brick)) BrickX--;
10008574:	4653      	mov	r3, sl
10008576:	3b01      	subs	r3, #1
10008578:	e6ae      	b.n	100082d8 <_Z4Gamev.part.0+0x10d0>
				if ((y < 1) || (y >= MAPH-1))
1000857a:	b2f8      	uxtb	r0, r7
			if (b != 0)
1000857c:	9f09      	ldr	r7, [sp, #36]	; 0x24
	Bool ok = True;
1000857e:	2301      	movs	r3, #1
			if (b != 0)
10008580:	2f00      	cmp	r7, #0
10008582:	d100      	bne.n	10008586 <_Z4Gamev.part.0+0x137e>
10008584:	e6c3      	b.n	1000830e <_Z4Gamev.part.0+0x1106>
				if ((y < 1) || (y >= MAPH-1))
10008586:	1e47      	subs	r7, r0, #1
10008588:	2f11      	cmp	r7, #17
1000858a:	d900      	bls.n	1000858e <_Z4Gamev.part.0+0x1386>
1000858c:	e6be      	b.n	1000830c <_Z4Gamev.part.0+0x1104>
					if (*d != TILE_EMPTY) ok = False;
1000858e:	784f      	ldrb	r7, [r1, #1]
10008590:	3f08      	subs	r7, #8
10008592:	003d      	movs	r5, r7
10008594:	426f      	negs	r7, r5
10008596:	416f      	adcs	r7, r5
			if (b != 0)
10008598:	9d03      	ldr	r5, [sp, #12]
					if (*d != TILE_EMPTY) ok = False;
1000859a:	427f      	negs	r7, r7
1000859c:	403b      	ands	r3, r7
			if (b != 0)
1000859e:	2d00      	cmp	r5, #0
100085a0:	d100      	bne.n	100085a4 <_Z4Gamev.part.0+0x139c>
100085a2:	e6bc      	b.n	1000831e <_Z4Gamev.part.0+0x1116>
					if (*d != TILE_EMPTY) ok = False;
100085a4:	788f      	ldrb	r7, [r1, #2]
100085a6:	3f08      	subs	r7, #8
100085a8:	003d      	movs	r5, r7
100085aa:	426f      	negs	r7, r5
100085ac:	416f      	adcs	r7, r5
			if (b != 0)
100085ae:	9d0a      	ldr	r5, [sp, #40]	; 0x28
					if (*d != TILE_EMPTY) ok = False;
100085b0:	427f      	negs	r7, r7
100085b2:	403b      	ands	r3, r7
			if (b != 0)
100085b4:	2d00      	cmp	r5, #0
100085b6:	d100      	bne.n	100085ba <_Z4Gamev.part.0+0x13b2>
100085b8:	e6b9      	b.n	1000832e <_Z4Gamev.part.0+0x1126>
					if (*d != TILE_EMPTY) ok = False;
100085ba:	78cf      	ldrb	r7, [r1, #3]
100085bc:	3f08      	subs	r7, #8
100085be:	003d      	movs	r5, r7
100085c0:	426f      	negs	r7, r5
100085c2:	416f      	adcs	r7, r5
100085c4:	427f      	negs	r7, r7
100085c6:	403b      	ands	r3, r7
		y++;
100085c8:	1c47      	adds	r7, r0, #1
100085ca:	b2fd      	uxtb	r5, r7
100085cc:	9502      	str	r5, [sp, #8]
			if (b != 0)
100085ce:	9d0d      	ldr	r5, [sp, #52]	; 0x34
100085d0:	2d00      	cmp	r5, #0
100085d2:	d000      	beq.n	100085d6 <_Z4Gamev.part.0+0x13ce>
100085d4:	e6b2      	b.n	1000833c <_Z4Gamev.part.0+0x1134>
100085d6:	9d04      	ldr	r5, [sp, #16]
100085d8:	2d00      	cmp	r5, #0
100085da:	d100      	bne.n	100085de <_Z4Gamev.part.0+0x13d6>
100085dc:	e0d8      	b.n	10008790 <_Z4Gamev.part.0+0x1588>
				if ((y < 1) || (y >= MAPH-1))
100085de:	2811      	cmp	r0, #17
100085e0:	d900      	bls.n	100085e4 <_Z4Gamev.part.0+0x13dc>
100085e2:	e0ff      	b.n	100087e4 <_Z4Gamev.part.0+0x15dc>
					if (*d != TILE_EMPTY) ok = False;
100085e4:	7f0f      	ldrb	r7, [r1, #28]
100085e6:	3f08      	subs	r7, #8
100085e8:	003d      	movs	r5, r7
100085ea:	426f      	negs	r7, r5
100085ec:	416f      	adcs	r7, r5
			if (b != 0)
100085ee:	9d01      	ldr	r5, [sp, #4]
					if (*d != TILE_EMPTY) ok = False;
100085f0:	427f      	negs	r7, r7
100085f2:	403b      	ands	r3, r7
			if (b != 0)
100085f4:	2d00      	cmp	r5, #0
100085f6:	d100      	bne.n	100085fa <_Z4Gamev.part.0+0x13f2>
100085f8:	e0f9      	b.n	100087ee <_Z4Gamev.part.0+0x15e6>
					if (*d != TILE_EMPTY) ok = False;
100085fa:	7f4f      	ldrb	r7, [r1, #29]
100085fc:	3f08      	subs	r7, #8
100085fe:	003d      	movs	r5, r7
10008600:	426f      	negs	r7, r5
10008602:	416f      	adcs	r7, r5
			if (b != 0)
10008604:	9d05      	ldr	r5, [sp, #20]
					if (*d != TILE_EMPTY) ok = False;
10008606:	427f      	negs	r7, r7
10008608:	403b      	ands	r3, r7
			if (b != 0)
1000860a:	2d00      	cmp	r5, #0
1000860c:	d100      	bne.n	10008610 <_Z4Gamev.part.0+0x1408>
1000860e:	e69d      	b.n	1000834c <_Z4Gamev.part.0+0x1144>
					if (*d != TILE_EMPTY) ok = False;
10008610:	7f8f      	ldrb	r7, [r1, #30]
					ok = False;
10008612:	3f08      	subs	r7, #8
10008614:	003d      	movs	r5, r7
10008616:	426f      	negs	r7, r5
10008618:	416f      	adcs	r7, r5
1000861a:	427f      	negs	r7, r7
1000861c:	403b      	ands	r3, r7
		y++;
1000861e:	3002      	adds	r0, #2
10008620:	b2c0      	uxtb	r0, r0
10008622:	4682      	mov	sl, r0
			if (b != 0)
10008624:	980e      	ldr	r0, [sp, #56]	; 0x38
10008626:	2800      	cmp	r0, #0
10008628:	d000      	beq.n	1000862c <_Z4Gamev.part.0+0x1424>
1000862a:	e696      	b.n	1000835a <_Z4Gamev.part.0+0x1152>
1000862c:	9806      	ldr	r0, [sp, #24]
1000862e:	2800      	cmp	r0, #0
10008630:	d000      	beq.n	10008634 <_Z4Gamev.part.0+0x142c>
10008632:	e11e      	b.n	10008872 <_Z4Gamev.part.0+0x166a>
10008634:	2e00      	cmp	r6, #0
10008636:	d100      	bne.n	1000863a <_Z4Gamev.part.0+0x1432>
10008638:	e123      	b.n	10008882 <_Z4Gamev.part.0+0x167a>
				if ((y < 1) || (y >= MAPH-1))
1000863a:	9802      	ldr	r0, [sp, #8]
1000863c:	2811      	cmp	r0, #17
1000863e:	d800      	bhi.n	10008642 <_Z4Gamev.part.0+0x143a>
10008640:	e6a4      	b.n	1000838c <_Z4Gamev.part.0+0x1184>
					ok = False;
10008642:	2300      	movs	r3, #0
			if (b != 0)
10008644:	980f      	ldr	r0, [sp, #60]	; 0x3c
10008646:	2800      	cmp	r0, #0
10008648:	d100      	bne.n	1000864c <_Z4Gamev.part.0+0x1444>
1000864a:	e6b5      	b.n	100083b8 <_Z4Gamev.part.0+0x11b0>
				if ((y < 1) || (y >= MAPH-1))
1000864c:	4650      	mov	r0, sl
1000864e:	2811      	cmp	r0, #17
10008650:	d900      	bls.n	10008654 <_Z4Gamev.part.0+0x144c>
10008652:	e6b9      	b.n	100083c8 <_Z4Gamev.part.0+0x11c0>
					if (*d != TILE_EMPTY) ok = False;
10008654:	2051      	movs	r0, #81	; 0x51
10008656:	5c08      	ldrb	r0, [r1, r0]
10008658:	2808      	cmp	r0, #8
1000865a:	d100      	bne.n	1000865e <_Z4Gamev.part.0+0x1456>
1000865c:	e23b      	b.n	10008ad6 <_Z4Gamev.part.0+0x18ce>
			if (b != 0)
1000865e:	9b08      	ldr	r3, [sp, #32]
10008660:	2b00      	cmp	r3, #0
10008662:	d004      	beq.n	1000866e <_Z4Gamev.part.0+0x1466>
					if (*d != TILE_EMPTY) ok = False;
10008664:	2352      	movs	r3, #82	; 0x52
10008666:	5ccb      	ldrb	r3, [r1, r3]
10008668:	2b08      	cmp	r3, #8
1000866a:	d100      	bne.n	1000866e <_Z4Gamev.part.0+0x1466>
1000866c:	e252      	b.n	10008b14 <_Z4Gamev.part.0+0x190c>
			if (b != 0)
1000866e:	2c00      	cmp	r4, #0
10008670:	d100      	bne.n	10008674 <_Z4Gamev.part.0+0x146c>
10008672:	e6a9      	b.n	100083c8 <_Z4Gamev.part.0+0x11c0>
10008674:	2300      	movs	r3, #0
10008676:	e184      	b.n	10008982 <_Z4Gamev.part.0+0x177a>
		sleep_ms(250);
10008678:	20fa      	movs	r0, #250	; 0xfa
1000867a:	f7fa fa2d 	bl	10002ad8 <sleep_ms>
	memcpy(SaveBoard, Board, MAPSIZE);
1000867e:	2287      	movs	r2, #135	; 0x87
10008680:	4659      	mov	r1, fp
10008682:	0092      	lsls	r2, r2, #2
10008684:	484a      	ldr	r0, [pc, #296]	; (100087b0 <_Z4Gamev.part.0+0x15a8>)
10008686:	f7f8 f987 	bl	10000998 <__wrap___aeabi_memcpy>
	memcpy(&Board[MAPW/2-4 + MAPH/2*MAPW], PauseMsg, 8);
1000868a:	4658      	mov	r0, fp
1000868c:	3018      	adds	r0, #24
1000868e:	2208      	movs	r2, #8
10008690:	25d0      	movs	r5, #208	; 0xd0
10008692:	4948      	ldr	r1, [pc, #288]	; (100087b4 <_Z4Gamev.part.0+0x15ac>)
10008694:	30ff      	adds	r0, #255	; 0xff
10008696:	f7f8 f97f 	bl	10000998 <__wrap___aeabi_memcpy>
1000869a:	2401      	movs	r4, #1
1000869c:	062d      	lsls	r5, r5, #24
1000869e:	686b      	ldr	r3, [r5, #4]
100086a0:	0d5b      	lsrs	r3, r3, #21
	if (!gpio_get(PB_RT))		// RIGHT
100086a2:	421c      	tst	r4, r3
100086a4:	d047      	beq.n	10008736 <_Z4Gamev.part.0+0x152e>
100086a6:	686b      	ldr	r3, [r5, #4]
100086a8:	0c1b      	lsrs	r3, r3, #16
	else if (!gpio_get(PB_UP))	// ROTATE=UP
100086aa:	421c      	tst	r4, r3
100086ac:	d043      	beq.n	10008736 <_Z4Gamev.part.0+0x152e>
100086ae:	686b      	ldr	r3, [r5, #4]
100086b0:	0d1b      	lsrs	r3, r3, #20
	else if (!gpio_get(PB_LT))	// LEFT
100086b2:	421c      	tst	r4, r3
100086b4:	d03f      	beq.n	10008736 <_Z4Gamev.part.0+0x152e>
100086b6:	686b      	ldr	r3, [r5, #4]
100086b8:	0c9b      	lsrs	r3, r3, #18
	else if (!gpio_get(PB_DN))	// DROP=DOWN
100086ba:	421c      	tst	r4, r3
100086bc:	d03b      	beq.n	10008736 <_Z4Gamev.part.0+0x152e>
100086be:	686b      	ldr	r3, [r5, #4]
100086c0:	0c5b      	lsrs	r3, r3, #17
	else if (!gpio_get(PB_FR))	// PAUSE=FIRE
100086c2:	421c      	tst	r4, r3
100086c4:	d037      	beq.n	10008736 <_Z4Gamev.part.0+0x152e>
	char c = getchar_timeout_us(0);
100086c6:	2000      	movs	r0, #0
100086c8:	f7f9 fc8a 	bl	10001fe0 <getchar_timeout_us>
	while (GetChar() != 0) {}
100086cc:	1e43      	subs	r3, r0, #1
100086ce:	b2db      	uxtb	r3, r3
100086d0:	2bfd      	cmp	r3, #253	; 0xfd
100086d2:	d9e4      	bls.n	1000869e <_Z4Gamev.part.0+0x1496>
100086d4:	25d0      	movs	r5, #208	; 0xd0
100086d6:	2401      	movs	r4, #1
100086d8:	4e37      	ldr	r6, [pc, #220]	; (100087b8 <_Z4Gamev.part.0+0x15b0>)
100086da:	062d      	lsls	r5, r5, #24
100086dc:	e018      	b.n	10008710 <_Z4Gamev.part.0+0x1508>
100086de:	686b      	ldr	r3, [r5, #4]
100086e0:	0d1b      	lsrs	r3, r3, #20
	else if (!gpio_get(PB_LT))	// LEFT
100086e2:	421c      	tst	r4, r3
100086e4:	d01c      	beq.n	10008720 <_Z4Gamev.part.0+0x1518>
100086e6:	686b      	ldr	r3, [r5, #4]
100086e8:	0c9b      	lsrs	r3, r3, #18
	else if (!gpio_get(PB_DN))	// DROP=DOWN
100086ea:	421c      	tst	r4, r3
100086ec:	d018      	beq.n	10008720 <_Z4Gamev.part.0+0x1518>
100086ee:	686b      	ldr	r3, [r5, #4]
100086f0:	0c5b      	lsrs	r3, r3, #17
	else if (!gpio_get(PB_FR))	// PAUSE=FIRE
100086f2:	421c      	tst	r4, r3
100086f4:	d014      	beq.n	10008720 <_Z4Gamev.part.0+0x1518>
	char c = getchar_timeout_us(0);
100086f6:	2000      	movs	r0, #0
100086f8:	f7f9 fc72 	bl	10001fe0 <getchar_timeout_us>
		if (GetChar() != 0) break;
100086fc:	1e43      	subs	r3, r0, #1
100086fe:	b2db      	uxtb	r3, r3
10008700:	2bfd      	cmp	r3, #253	; 0xfd
10008702:	d910      	bls.n	10008726 <_Z4Gamev.part.0+0x151e>
		sleep_ms(100);
10008704:	2064      	movs	r0, #100	; 0x64
	for (i = (timeout ? 100 : 1000000000) ; i > 0; i--)
10008706:	3e01      	subs	r6, #1
		sleep_ms(100);
10008708:	f7fa f9e6 	bl	10002ad8 <sleep_ms>
	for (i = (timeout ? 100 : 1000000000) ; i > 0; i--)
1000870c:	2e00      	cmp	r6, #0
1000870e:	d00a      	beq.n	10008726 <_Z4Gamev.part.0+0x151e>
10008710:	686b      	ldr	r3, [r5, #4]
10008712:	0d5b      	lsrs	r3, r3, #21
	if (!gpio_get(PB_RT))		// RIGHT
10008714:	421c      	tst	r4, r3
10008716:	d003      	beq.n	10008720 <_Z4Gamev.part.0+0x1518>
10008718:	686b      	ldr	r3, [r5, #4]
1000871a:	0c1b      	lsrs	r3, r3, #16
	else if (!gpio_get(PB_UP))	// ROTATE=UP
1000871c:	421c      	tst	r4, r3
1000871e:	d1de      	bne.n	100086de <_Z4Gamev.part.0+0x14d6>
		sleep_ms(250);
10008720:	20fa      	movs	r0, #250	; 0xfa
10008722:	f7fa f9d9 	bl	10002ad8 <sleep_ms>
	memcpy(Board, SaveBoard, MAPSIZE);
10008726:	2287      	movs	r2, #135	; 0x87
10008728:	4658      	mov	r0, fp
1000872a:	4921      	ldr	r1, [pc, #132]	; (100087b0 <_Z4Gamev.part.0+0x15a8>)
1000872c:	0092      	lsls	r2, r2, #2
1000872e:	f7f8 f933 	bl	10000998 <__wrap___aeabi_memcpy>
	return i > 0; // i > 0 if continue with user
10008732:	f7fe fd83 	bl	1000723c <_Z4Gamev.part.0+0x34>
		sleep_ms(250);
10008736:	20fa      	movs	r0, #250	; 0xfa
10008738:	f7fa f9ce 	bl	10002ad8 <sleep_ms>
		return (rVal);
1000873c:	e7af      	b.n	1000869e <_Z4Gamev.part.0+0x1496>
					if (*d != TILE_EMPTY) ok = False;
1000873e:	465f      	mov	r7, fp
10008740:	5d7b      	ldrb	r3, [r7, r5]
10008742:	3b08      	subs	r3, #8
10008744:	425f      	negs	r7, r3
10008746:	417b      	adcs	r3, r7
			if (b != 0)
10008748:	9f09      	ldr	r7, [sp, #36]	; 0x24
					if (*d != TILE_EMPTY) ok = False;
1000874a:	b2db      	uxtb	r3, r3
			if (b != 0)
1000874c:	2f00      	cmp	r7, #0
1000874e:	d000      	beq.n	10008752 <_Z4Gamev.part.0+0x154a>
10008750:	e71d      	b.n	1000858e <_Z4Gamev.part.0+0x1386>
10008752:	9d03      	ldr	r5, [sp, #12]
10008754:	2d00      	cmp	r5, #0
10008756:	d100      	bne.n	1000875a <_Z4Gamev.part.0+0x1552>
10008758:	e5e1      	b.n	1000831e <_Z4Gamev.part.0+0x1116>
1000875a:	e723      	b.n	100085a4 <_Z4Gamev.part.0+0x139c>
			if (b != 0) *d = TILE_EMPTY;
1000875c:	2354      	movs	r3, #84	; 0x54
1000875e:	2108      	movs	r1, #8
10008760:	54d1      	strb	r1, [r2, r3]
10008762:	e5b7      	b.n	100082d4 <_Z4Gamev.part.0+0x10cc>
				if ((y < 1) || (y >= MAPH-1))
10008764:	4662      	mov	r2, ip
10008766:	b2d1      	uxtb	r1, r2
10008768:	1e4a      	subs	r2, r1, #1
1000876a:	2a11      	cmp	r2, #17
1000876c:	d900      	bls.n	10008770 <_Z4Gamev.part.0+0x1568>
1000876e:	e164      	b.n	10008a3a <_Z4Gamev.part.0+0x1832>
					if (*d != TILE_EMPTY) ok = False;
10008770:	465a      	mov	r2, fp
10008772:	5d92      	ldrb	r2, [r2, r6]
10008774:	3a08      	subs	r2, #8
10008776:	4257      	negs	r7, r2
10008778:	417a      	adcs	r2, r7
			if (b != 0)
1000877a:	785f      	ldrb	r7, [r3, #1]
	Bool ok = True;
1000877c:	b2d2      	uxtb	r2, r2
			if (b != 0)
1000877e:	2f00      	cmp	r7, #0
10008780:	d000      	beq.n	10008784 <_Z4Gamev.part.0+0x157c>
10008782:	e12b      	b.n	100089dc <_Z4Gamev.part.0+0x17d4>
10008784:	789f      	ldrb	r7, [r3, #2]
10008786:	2f00      	cmp	r7, #0
10008788:	d101      	bne.n	1000878e <_Z4Gamev.part.0+0x1586>
1000878a:	f7ff fc0f 	bl	10007fac <_Z4Gamev.part.0+0xda4>
1000878e:	e131      	b.n	100089f4 <_Z4Gamev.part.0+0x17ec>
10008790:	9d01      	ldr	r5, [sp, #4]
10008792:	2d00      	cmp	r5, #0
10008794:	d02b      	beq.n	100087ee <_Z4Gamev.part.0+0x15e6>
				if ((y < 1) || (y >= MAPH-1))
10008796:	2811      	cmp	r0, #17
10008798:	d800      	bhi.n	1000879c <_Z4Gamev.part.0+0x1594>
1000879a:	e72e      	b.n	100085fa <_Z4Gamev.part.0+0x13f2>
1000879c:	e5d5      	b.n	1000834a <_Z4Gamev.part.0+0x1142>
1000879e:	46c0      	nop			; (mov r8, r8)
100087a0:	20012765 	.word	0x20012765
100087a4:	1000e9f4 	.word	0x1000e9f4
100087a8:	20012766 	.word	0x20012766
100087ac:	20012764 	.word	0x20012764
100087b0:	20006c2c 	.word	0x20006c2c
100087b4:	1000e6a8 	.word	0x1000e6a8
100087b8:	3b9aca00 	.word	0x3b9aca00
					if (*d != TILE_EMPTY) ok = False;
100087bc:	7ecf      	ldrb	r7, [r1, #27]
100087be:	3f08      	subs	r7, #8
100087c0:	003d      	movs	r5, r7
100087c2:	426f      	negs	r7, r5
100087c4:	416f      	adcs	r7, r5
			if (b != 0)
100087c6:	9d04      	ldr	r5, [sp, #16]
					if (*d != TILE_EMPTY) ok = False;
100087c8:	427f      	negs	r7, r7
100087ca:	403b      	ands	r3, r7
			if (b != 0)
100087cc:	2d00      	cmp	r5, #0
100087ce:	d000      	beq.n	100087d2 <_Z4Gamev.part.0+0x15ca>
100087d0:	e708      	b.n	100085e4 <_Z4Gamev.part.0+0x13dc>
100087d2:	9d01      	ldr	r5, [sp, #4]
100087d4:	2d00      	cmp	r5, #0
100087d6:	d000      	beq.n	100087da <_Z4Gamev.part.0+0x15d2>
100087d8:	e70f      	b.n	100085fa <_Z4Gamev.part.0+0x13f2>
100087da:	9d05      	ldr	r5, [sp, #20]
100087dc:	2d00      	cmp	r5, #0
100087de:	d000      	beq.n	100087e2 <_Z4Gamev.part.0+0x15da>
100087e0:	e716      	b.n	10008610 <_Z4Gamev.part.0+0x1408>
100087e2:	e5b3      	b.n	1000834c <_Z4Gamev.part.0+0x1144>
100087e4:	9d01      	ldr	r5, [sp, #4]
					ok = False;
100087e6:	2300      	movs	r3, #0
			if (b != 0)
100087e8:	2d00      	cmp	r5, #0
100087ea:	d000      	beq.n	100087ee <_Z4Gamev.part.0+0x15e6>
100087ec:	e5ae      	b.n	1000834c <_Z4Gamev.part.0+0x1144>
100087ee:	9d05      	ldr	r5, [sp, #20]
100087f0:	2d00      	cmp	r5, #0
100087f2:	d100      	bne.n	100087f6 <_Z4Gamev.part.0+0x15ee>
100087f4:	e5aa      	b.n	1000834c <_Z4Gamev.part.0+0x1144>
				if ((y < 1) || (y >= MAPH-1))
100087f6:	2811      	cmp	r0, #17
100087f8:	d900      	bls.n	100087fc <_Z4Gamev.part.0+0x15f4>
100087fa:	e5a6      	b.n	1000834a <_Z4Gamev.part.0+0x1142>
					if (*d != TILE_EMPTY) ok = False;
100087fc:	7f8f      	ldrb	r7, [r1, #30]
					ok = False;
100087fe:	3f08      	subs	r7, #8
10008800:	003d      	movs	r5, r7
10008802:	426f      	negs	r7, r5
10008804:	416f      	adcs	r7, r5
10008806:	427f      	negs	r7, r7
10008808:	403b      	ands	r3, r7
1000880a:	e708      	b.n	1000861e <_Z4Gamev.part.0+0x1416>
	printf("\n");
1000880c:	200a      	movs	r0, #10
1000880e:	f7f9 fb99 	bl	10001f44 <__wrap_putchar>
	printf("JoyStick ... right\n");
10008812:	48c3      	ldr	r0, [pc, #780]	; (10008b20 <_Z4Gamev.part.0+0x1918>)
10008814:	f7f9 fba4 	bl	10001f60 <__wrap_puts>
	printf("JoyStick ... up\n");
10008818:	48c2      	ldr	r0, [pc, #776]	; (10008b24 <_Z4Gamev.part.0+0x191c>)
1000881a:	f7f9 fba1 	bl	10001f60 <__wrap_puts>
	printf("JoyStick ... left\n");
1000881e:	48c2      	ldr	r0, [pc, #776]	; (10008b28 <_Z4Gamev.part.0+0x1920>)
10008820:	f7f9 fb9e 	bl	10001f60 <__wrap_puts>
	printf("JoyStick ... down\n");
10008824:	48c1      	ldr	r0, [pc, #772]	; (10008b2c <_Z4Gamev.part.0+0x1924>)
10008826:	f7f9 fb9b 	bl	10001f60 <__wrap_puts>
1000882a:	25d0      	movs	r5, #208	; 0xd0
	printf("JoyStick fire ... pause\n");
1000882c:	48c0      	ldr	r0, [pc, #768]	; (10008b30 <_Z4Gamev.part.0+0x1928>)
1000882e:	f7f9 fb97 	bl	10001f60 <__wrap_puts>
10008832:	2401      	movs	r4, #1
10008834:	062d      	lsls	r5, r5, #24
10008836:	686b      	ldr	r3, [r5, #4]
10008838:	0d5b      	lsrs	r3, r3, #21
	if (!gpio_get(PB_RT))		// RIGHT
1000883a:	421c      	tst	r4, r3
1000883c:	d031      	beq.n	100088a2 <_Z4Gamev.part.0+0x169a>
1000883e:	686b      	ldr	r3, [r5, #4]
10008840:	0c1b      	lsrs	r3, r3, #16
	else if (!gpio_get(PB_UP))	// ROTATE=UP
10008842:	421c      	tst	r4, r3
10008844:	d02d      	beq.n	100088a2 <_Z4Gamev.part.0+0x169a>
10008846:	686b      	ldr	r3, [r5, #4]
10008848:	0d1b      	lsrs	r3, r3, #20
	else if (!gpio_get(PB_LT))	// LEFT
1000884a:	421c      	tst	r4, r3
1000884c:	d029      	beq.n	100088a2 <_Z4Gamev.part.0+0x169a>
1000884e:	686b      	ldr	r3, [r5, #4]
10008850:	0c9b      	lsrs	r3, r3, #18
	else if (!gpio_get(PB_DN))	// DROP=DOWN
10008852:	421c      	tst	r4, r3
10008854:	d025      	beq.n	100088a2 <_Z4Gamev.part.0+0x169a>
10008856:	686b      	ldr	r3, [r5, #4]
10008858:	0c5b      	lsrs	r3, r3, #17
	else if (!gpio_get(PB_FR))	// PAUSE=FIRE
1000885a:	421c      	tst	r4, r3
1000885c:	d021      	beq.n	100088a2 <_Z4Gamev.part.0+0x169a>
	char c = getchar_timeout_us(0);
1000885e:	2000      	movs	r0, #0
10008860:	f7f9 fbbe 	bl	10001fe0 <getchar_timeout_us>
	while (GetChar() != 0) {}
10008864:	1e43      	subs	r3, r0, #1
10008866:	b2db      	uxtb	r3, r3
10008868:	2bfd      	cmp	r3, #253	; 0xfd
1000886a:	d901      	bls.n	10008870 <_Z4Gamev.part.0+0x1668>
1000886c:	f7fe fce6 	bl	1000723c <_Z4Gamev.part.0+0x34>
10008870:	e7e1      	b.n	10008836 <_Z4Gamev.part.0+0x162e>
				if ((y < 1) || (y >= MAPH-1))
10008872:	9802      	ldr	r0, [sp, #8]
10008874:	2811      	cmp	r0, #17
10008876:	d800      	bhi.n	1000887a <_Z4Gamev.part.0+0x1672>
10008878:	e57e      	b.n	10008378 <_Z4Gamev.part.0+0x1170>
					ok = False;
1000887a:	2300      	movs	r3, #0
			if (b != 0)
1000887c:	2e00      	cmp	r6, #0
1000887e:	d000      	beq.n	10008882 <_Z4Gamev.part.0+0x167a>
10008880:	e6e0      	b.n	10008644 <_Z4Gamev.part.0+0x143c>
10008882:	9807      	ldr	r0, [sp, #28]
10008884:	2800      	cmp	r0, #0
10008886:	d100      	bne.n	1000888a <_Z4Gamev.part.0+0x1682>
10008888:	e6dc      	b.n	10008644 <_Z4Gamev.part.0+0x143c>
				if ((y < 1) || (y >= MAPH-1))
1000888a:	9802      	ldr	r0, [sp, #8]
1000888c:	2811      	cmp	r0, #17
1000888e:	d900      	bls.n	10008892 <_Z4Gamev.part.0+0x168a>
10008890:	e6d7      	b.n	10008642 <_Z4Gamev.part.0+0x143a>
					if (*d != TILE_EMPTY) ok = False;
10008892:	2039      	movs	r0, #57	; 0x39
10008894:	5c08      	ldrb	r0, [r1, r0]
					ok = False;
10008896:	3808      	subs	r0, #8
10008898:	4247      	negs	r7, r0
1000889a:	4178      	adcs	r0, r7
1000889c:	4240      	negs	r0, r0
1000889e:	4003      	ands	r3, r0
100088a0:	e586      	b.n	100083b0 <_Z4Gamev.part.0+0x11a8>
		sleep_ms(250);
100088a2:	20fa      	movs	r0, #250	; 0xfa
100088a4:	f7fa f918 	bl	10002ad8 <sleep_ms>
		return (rVal);
100088a8:	e7c5      	b.n	10008836 <_Z4Gamev.part.0+0x162e>
					if (*d != TILE_EMPTY) ok = False;
100088aa:	2052      	movs	r0, #82	; 0x52
100088ac:	5c08      	ldrb	r0, [r1, r0]
100088ae:	2808      	cmp	r0, #8
100088b0:	d000      	beq.n	100088b4 <_Z4Gamev.part.0+0x16ac>
100088b2:	e6dc      	b.n	1000866e <_Z4Gamev.part.0+0x1466>
			if (b != 0)
100088b4:	2c00      	cmp	r4, #0
100088b6:	d164      	bne.n	10008982 <_Z4Gamev.part.0+0x177a>
100088b8:	4660      	mov	r0, ip
100088ba:	2800      	cmp	r0, #0
100088bc:	d069      	beq.n	10008992 <_Z4Gamev.part.0+0x178a>
				if ((y < 1) || (y >= MAPH-1))
100088be:	4650      	mov	r0, sl
100088c0:	2811      	cmp	r0, #17
100088c2:	d900      	bls.n	100088c6 <_Z4Gamev.part.0+0x16be>
100088c4:	e580      	b.n	100083c8 <_Z4Gamev.part.0+0x11c0>
					if (*d != TILE_EMPTY) ok = False;
100088c6:	2054      	movs	r0, #84	; 0x54
100088c8:	5c08      	ldrb	r0, [r1, r0]
100088ca:	2808      	cmp	r0, #8
100088cc:	d000      	beq.n	100088d0 <_Z4Gamev.part.0+0x16c8>
100088ce:	e57b      	b.n	100083c8 <_Z4Gamev.part.0+0x11c0>
100088d0:	e05f      	b.n	10008992 <_Z4Gamev.part.0+0x178a>
			if (b != 0)
100088d2:	9b06      	ldr	r3, [sp, #24]
100088d4:	2b00      	cmp	r3, #0
100088d6:	d100      	bne.n	100088da <_Z4Gamev.part.0+0x16d2>
100088d8:	e6b3      	b.n	10008642 <_Z4Gamev.part.0+0x143a>
					ok = False;
100088da:	2300      	movs	r3, #0
			if (b != 0)
100088dc:	2e00      	cmp	r6, #0
100088de:	d000      	beq.n	100088e2 <_Z4Gamev.part.0+0x16da>
100088e0:	e6b0      	b.n	10008644 <_Z4Gamev.part.0+0x143c>
100088e2:	e7ce      	b.n	10008882 <_Z4Gamev.part.0+0x167a>
			b = *s++;
100088e4:	795f      	ldrb	r7, [r3, #5]
			if (b != 0)
100088e6:	2f00      	cmp	r7, #0
100088e8:	d05d      	beq.n	100089a6 <_Z4Gamev.part.0+0x179e>
				if ((y < 1) || (y >= MAPH-1))
100088ea:	2911      	cmp	r1, #17
100088ec:	d901      	bls.n	100088f2 <_Z4Gamev.part.0+0x16ea>
100088ee:	f7ff fb78 	bl	10007fe2 <_Z4Gamev.part.0+0xdda>
					if (*d != TILE_EMPTY) ok = False;
100088f2:	7f07      	ldrb	r7, [r0, #28]
100088f4:	3f08      	subs	r7, #8
100088f6:	003d      	movs	r5, r7
100088f8:	426f      	negs	r7, r5
100088fa:	416f      	adcs	r7, r5
100088fc:	427f      	negs	r7, r7
100088fe:	403a      	ands	r2, r7
			if (b != 0)
10008900:	799f      	ldrb	r7, [r3, #6]
10008902:	2f00      	cmp	r7, #0
10008904:	d101      	bne.n	1000890a <_Z4Gamev.part.0+0x1702>
10008906:	f7ff fb6f 	bl	10007fe8 <_Z4Gamev.part.0+0xde0>
					if (*d != TILE_EMPTY) ok = False;
1000890a:	7f47      	ldrb	r7, [r0, #29]
1000890c:	3f08      	subs	r7, #8
1000890e:	003d      	movs	r5, r7
10008910:	426f      	negs	r7, r5
10008912:	416f      	adcs	r7, r5
10008914:	427f      	negs	r7, r7
10008916:	403a      	ands	r2, r7
			if (b != 0)
10008918:	79df      	ldrb	r7, [r3, #7]
1000891a:	2f00      	cmp	r7, #0
1000891c:	d006      	beq.n	1000892c <_Z4Gamev.part.0+0x1724>
					if (*d != TILE_EMPTY) ok = False;
1000891e:	7f87      	ldrb	r7, [r0, #30]
					ok = False;
10008920:	3f08      	subs	r7, #8
10008922:	003d      	movs	r5, r7
10008924:	426f      	negs	r7, r5
10008926:	416f      	adcs	r7, r5
10008928:	427f      	negs	r7, r7
1000892a:	403a      	ands	r2, r7
		y++;
1000892c:	3102      	adds	r1, #2
1000892e:	b2c9      	uxtb	r1, r1
10008930:	000d      	movs	r5, r1
			b = *s++;
10008932:	7a19      	ldrb	r1, [r3, #8]
10008934:	9105      	str	r1, [sp, #20]
			if (b != 0)
10008936:	2900      	cmp	r1, #0
10008938:	d101      	bne.n	1000893e <_Z4Gamev.part.0+0x1736>
1000893a:	f7ff fb68 	bl	1000800e <_Z4Gamev.part.0+0xe06>
				if ((y < 1) || (y >= MAPH-1))
1000893e:	9901      	ldr	r1, [sp, #4]
10008940:	2911      	cmp	r1, #17
10008942:	d900      	bls.n	10008946 <_Z4Gamev.part.0+0x173e>
10008944:	e09b      	b.n	10008a7e <_Z4Gamev.part.0+0x1876>
					if (*d != TILE_EMPTY) ok = False;
10008946:	2136      	movs	r1, #54	; 0x36
10008948:	5c41      	ldrb	r1, [r0, r1]
1000894a:	3908      	subs	r1, #8
1000894c:	424f      	negs	r7, r1
1000894e:	4179      	adcs	r1, r7
10008950:	4249      	negs	r1, r1
10008952:	400a      	ands	r2, r1
			if (b != 0)
10008954:	7a59      	ldrb	r1, [r3, #9]
10008956:	2900      	cmp	r1, #0
10008958:	d001      	beq.n	1000895e <_Z4Gamev.part.0+0x1756>
1000895a:	f7ff fb62 	bl	10008022 <_Z4Gamev.part.0+0xe1a>
1000895e:	7a99      	ldrb	r1, [r3, #10]
10008960:	2900      	cmp	r1, #0
10008962:	d001      	beq.n	10008968 <_Z4Gamev.part.0+0x1760>
10008964:	f7ff fb69 	bl	1000803a <_Z4Gamev.part.0+0xe32>
10008968:	7ad9      	ldrb	r1, [r3, #11]
1000896a:	2900      	cmp	r1, #0
1000896c:	d001      	beq.n	10008972 <_Z4Gamev.part.0+0x176a>
1000896e:	f7ff fb6e 	bl	1000804e <_Z4Gamev.part.0+0xe46>
10008972:	f7ff fb73 	bl	1000805c <_Z4Gamev.part.0+0xe54>
10008976:	2c00      	cmp	r4, #0
10008978:	d09e      	beq.n	100088b8 <_Z4Gamev.part.0+0x16b0>
				if ((y < 1) || (y >= MAPH-1))
1000897a:	4650      	mov	r0, sl
1000897c:	2811      	cmp	r0, #17
1000897e:	d900      	bls.n	10008982 <_Z4Gamev.part.0+0x177a>
10008980:	e522      	b.n	100083c8 <_Z4Gamev.part.0+0x11c0>
					if (*d != TILE_EMPTY) ok = False;
10008982:	2053      	movs	r0, #83	; 0x53
10008984:	5c08      	ldrb	r0, [r1, r0]
10008986:	2808      	cmp	r0, #8
10008988:	d000      	beq.n	1000898c <_Z4Gamev.part.0+0x1784>
1000898a:	e51d      	b.n	100083c8 <_Z4Gamev.part.0+0x11c0>
			if (b != 0)
1000898c:	4660      	mov	r0, ip
1000898e:	2800      	cmp	r0, #0
10008990:	d199      	bne.n	100088c6 <_Z4Gamev.part.0+0x16be>
				if (CheckBrick(BrickX-1, BrickY, Brick)) BrickX--;
10008992:	2b00      	cmp	r3, #0
10008994:	d100      	bne.n	10008998 <_Z4Gamev.part.0+0x1790>
10008996:	e517      	b.n	100083c8 <_Z4Gamev.part.0+0x11c0>
10008998:	4b66      	ldr	r3, [pc, #408]	; (10008b34 <_Z4Gamev.part.0+0x192c>)
1000899a:	9a10      	ldr	r2, [sp, #64]	; 0x40
1000899c:	701a      	strb	r2, [r3, #0]
1000899e:	9b11      	ldr	r3, [sp, #68]	; 0x44
	u8* d = &Board[x + y*MAPW];
100089a0:	000a      	movs	r2, r1
100089a2:	930b      	str	r3, [sp, #44]	; 0x2c
100089a4:	e510      	b.n	100083c8 <_Z4Gamev.part.0+0x11c0>
			if (b != 0)
100089a6:	799f      	ldrb	r7, [r3, #6]
100089a8:	2f00      	cmp	r7, #0
100089aa:	d101      	bne.n	100089b0 <_Z4Gamev.part.0+0x17a8>
100089ac:	f7ff fb1c 	bl	10007fe8 <_Z4Gamev.part.0+0xde0>
				if ((y < 1) || (y >= MAPH-1))
100089b0:	2911      	cmp	r1, #17
100089b2:	d9aa      	bls.n	1000890a <_Z4Gamev.part.0+0x1702>
					ok = False;
100089b4:	2200      	movs	r2, #0
100089b6:	f7ff fb21 	bl	10007ffc <_Z4Gamev.part.0+0xdf4>
					if (*d != TILE_EMPTY) ok = False;
100089ba:	7ec7      	ldrb	r7, [r0, #27]
100089bc:	3f08      	subs	r7, #8
100089be:	003d      	movs	r5, r7
100089c0:	426f      	negs	r7, r5
100089c2:	416f      	adcs	r7, r5
100089c4:	427f      	negs	r7, r7
100089c6:	403a      	ands	r2, r7
			if (b != 0)
100089c8:	795f      	ldrb	r7, [r3, #5]
100089ca:	2f00      	cmp	r7, #0
100089cc:	d191      	bne.n	100088f2 <_Z4Gamev.part.0+0x16ea>
100089ce:	799f      	ldrb	r7, [r3, #6]
100089d0:	2f00      	cmp	r7, #0
100089d2:	d19a      	bne.n	1000890a <_Z4Gamev.part.0+0x1702>
100089d4:	79df      	ldrb	r7, [r3, #7]
100089d6:	2f00      	cmp	r7, #0
100089d8:	d1a1      	bne.n	1000891e <_Z4Gamev.part.0+0x1716>
100089da:	e7a7      	b.n	1000892c <_Z4Gamev.part.0+0x1724>
					if (*d != TILE_EMPTY) ok = False;
100089dc:	7847      	ldrb	r7, [r0, #1]
100089de:	3f08      	subs	r7, #8
100089e0:	003d      	movs	r5, r7
100089e2:	426f      	negs	r7, r5
100089e4:	416f      	adcs	r7, r5
100089e6:	427f      	negs	r7, r7
100089e8:	403a      	ands	r2, r7
			if (b != 0)
100089ea:	789f      	ldrb	r7, [r3, #2]
100089ec:	2f00      	cmp	r7, #0
100089ee:	d101      	bne.n	100089f4 <_Z4Gamev.part.0+0x17ec>
100089f0:	f7ff fadc 	bl	10007fac <_Z4Gamev.part.0+0xda4>
					if (*d != TILE_EMPTY) ok = False;
100089f4:	7887      	ldrb	r7, [r0, #2]
100089f6:	3f08      	subs	r7, #8
100089f8:	003d      	movs	r5, r7
100089fa:	426f      	negs	r7, r5
100089fc:	416f      	adcs	r7, r5
100089fe:	427f      	negs	r7, r7
10008a00:	403a      	ands	r2, r7
			if (b != 0)
10008a02:	78df      	ldrb	r7, [r3, #3]
10008a04:	2f00      	cmp	r7, #0
10008a06:	d101      	bne.n	10008a0c <_Z4Gamev.part.0+0x1804>
10008a08:	f7ff fad9 	bl	10007fbe <_Z4Gamev.part.0+0xdb6>
					if (*d != TILE_EMPTY) ok = False;
10008a0c:	78c7      	ldrb	r7, [r0, #3]
10008a0e:	3f08      	subs	r7, #8
10008a10:	003d      	movs	r5, r7
10008a12:	426f      	negs	r7, r5
10008a14:	416f      	adcs	r7, r5
10008a16:	427f      	negs	r7, r7
10008a18:	403a      	ands	r2, r7
10008a1a:	f7ff fad0 	bl	10007fbe <_Z4Gamev.part.0+0xdb6>
			if (b != 0)
10008a1e:	2e00      	cmp	r6, #0
10008a20:	d000      	beq.n	10008a24 <_Z4Gamev.part.0+0x181c>
10008a22:	e4b3      	b.n	1000838c <_Z4Gamev.part.0+0x1184>
10008a24:	9807      	ldr	r0, [sp, #28]
10008a26:	2800      	cmp	r0, #0
10008a28:	d000      	beq.n	10008a2c <_Z4Gamev.part.0+0x1824>
10008a2a:	e4ba      	b.n	100083a2 <_Z4Gamev.part.0+0x119a>
10008a2c:	e60a      	b.n	10008644 <_Z4Gamev.part.0+0x143c>
			switch (ch)
10008a2e:	2800      	cmp	r0, #0
10008a30:	d101      	bne.n	10008a36 <_Z4Gamev.part.0+0x182e>
10008a32:	f7fe fc03 	bl	1000723c <_Z4Gamev.part.0+0x34>
10008a36:	f7ff f87f 	bl	10007b38 <_Z4Gamev.part.0+0x930>
					ok = False;
10008a3a:	2200      	movs	r2, #0
10008a3c:	f7ff faa4 	bl	10007f88 <_Z4Gamev.part.0+0xd80>
			if (b != 0)
10008a40:	7b59      	ldrb	r1, [r3, #13]
10008a42:	2900      	cmp	r1, #0
10008a44:	d030      	beq.n	10008aa8 <_Z4Gamev.part.0+0x18a0>
				if ((y < 1) || (y >= MAPH-1))
10008a46:	2d11      	cmp	r5, #17
10008a48:	d901      	bls.n	10008a4e <_Z4Gamev.part.0+0x1846>
10008a4a:	f7ff fb2e 	bl	100080aa <_Z4Gamev.part.0+0xea2>
					if (*d != TILE_EMPTY) ok = False;
10008a4e:	2152      	movs	r1, #82	; 0x52
10008a50:	5c41      	ldrb	r1, [r0, r1]
10008a52:	2908      	cmp	r1, #8
10008a54:	d030      	beq.n	10008ab8 <_Z4Gamev.part.0+0x18b0>
			b = *s++;
10008a56:	7b9a      	ldrb	r2, [r3, #14]
10008a58:	4692      	mov	sl, r2
			if (b != 0)
10008a5a:	2a00      	cmp	r2, #0
10008a5c:	d101      	bne.n	10008a62 <_Z4Gamev.part.0+0x185a>
10008a5e:	f7ff fb24 	bl	100080aa <_Z4Gamev.part.0+0xea2>
					if (*d != TILE_EMPTY) ok = False;
10008a62:	2200      	movs	r2, #0
10008a64:	2153      	movs	r1, #83	; 0x53
10008a66:	5c41      	ldrb	r1, [r0, r1]
10008a68:	2908      	cmp	r1, #8
10008a6a:	d001      	beq.n	10008a70 <_Z4Gamev.part.0+0x1868>
10008a6c:	f7ff fb1d 	bl	100080aa <_Z4Gamev.part.0+0xea2>
			b = *s++;
10008a70:	7bd9      	ldrb	r1, [r3, #15]
			if (b != 0)
10008a72:	1e0f      	subs	r7, r1, #0
10008a74:	d001      	beq.n	10008a7a <_Z4Gamev.part.0+0x1872>
10008a76:	f7ff fb12 	bl	1000809e <_Z4Gamev.part.0+0xe96>
10008a7a:	4657      	mov	r7, sl
10008a7c:	e03f      	b.n	10008afe <_Z4Gamev.part.0+0x18f6>
			b = *s++;
10008a7e:	7a5a      	ldrb	r2, [r3, #9]
			if (b != 0)
10008a80:	2a00      	cmp	r2, #0
10008a82:	d101      	bne.n	10008a88 <_Z4Gamev.part.0+0x1880>
10008a84:	f7ff faea 	bl	1000805c <_Z4Gamev.part.0+0xe54>
			b = *s++;
10008a88:	7a9a      	ldrb	r2, [r3, #10]
			if (b != 0)
10008a8a:	2a00      	cmp	r2, #0
10008a8c:	d109      	bne.n	10008aa2 <_Z4Gamev.part.0+0x189a>
10008a8e:	7ad9      	ldrb	r1, [r3, #11]
10008a90:	2900      	cmp	r1, #0
10008a92:	d101      	bne.n	10008a98 <_Z4Gamev.part.0+0x1890>
10008a94:	f7ff fae2 	bl	1000805c <_Z4Gamev.part.0+0xe54>
				if ((y < 1) || (y >= MAPH-1))
10008a98:	9901      	ldr	r1, [sp, #4]
10008a9a:	2911      	cmp	r1, #17
10008a9c:	d801      	bhi.n	10008aa2 <_Z4Gamev.part.0+0x189a>
10008a9e:	f7ff fad6 	bl	1000804e <_Z4Gamev.part.0+0xe46>
					ok = False;
10008aa2:	2200      	movs	r2, #0
10008aa4:	f7ff fada 	bl	1000805c <_Z4Gamev.part.0+0xe54>
			b = *s++;
10008aa8:	7b99      	ldrb	r1, [r3, #14]
10008aaa:	468a      	mov	sl, r1
			if (b != 0)
10008aac:	2900      	cmp	r1, #0
10008aae:	d007      	beq.n	10008ac0 <_Z4Gamev.part.0+0x18b8>
				if ((y < 1) || (y >= MAPH-1))
10008ab0:	2d11      	cmp	r5, #17
10008ab2:	d9d7      	bls.n	10008a64 <_Z4Gamev.part.0+0x185c>
10008ab4:	f7ff faf9 	bl	100080aa <_Z4Gamev.part.0+0xea2>
			b = *s++;
10008ab8:	7b99      	ldrb	r1, [r3, #14]
10008aba:	468a      	mov	sl, r1
			if (b != 0)
10008abc:	2900      	cmp	r1, #0
10008abe:	d1d1      	bne.n	10008a64 <_Z4Gamev.part.0+0x185c>
			b = *s++;
10008ac0:	7bdf      	ldrb	r7, [r3, #15]
			if (b != 0)
10008ac2:	2f00      	cmp	r7, #0
10008ac4:	d01a      	beq.n	10008afc <_Z4Gamev.part.0+0x18f4>
				if ((y < 1) || (y >= MAPH-1))
10008ac6:	2d11      	cmp	r5, #17
10008ac8:	d901      	bls.n	10008ace <_Z4Gamev.part.0+0x18c6>
10008aca:	f7ff faee 	bl	100080aa <_Z4Gamev.part.0+0xea2>
10008ace:	2100      	movs	r1, #0
10008ad0:	468a      	mov	sl, r1
10008ad2:	f7ff fae4 	bl	1000809e <_Z4Gamev.part.0+0xe96>
			if (b != 0)
10008ad6:	9808      	ldr	r0, [sp, #32]
10008ad8:	2800      	cmp	r0, #0
10008ada:	d000      	beq.n	10008ade <_Z4Gamev.part.0+0x18d6>
10008adc:	e6e5      	b.n	100088aa <_Z4Gamev.part.0+0x16a2>
10008ade:	2c00      	cmp	r4, #0
10008ae0:	d000      	beq.n	10008ae4 <_Z4Gamev.part.0+0x18dc>
10008ae2:	e74e      	b.n	10008982 <_Z4Gamev.part.0+0x177a>
10008ae4:	e752      	b.n	1000898c <_Z4Gamev.part.0+0x1784>
10008ae6:	7a99      	ldrb	r1, [r3, #10]
10008ae8:	2900      	cmp	r1, #0
10008aea:	d0d0      	beq.n	10008a8e <_Z4Gamev.part.0+0x1886>
				if ((y < 1) || (y >= MAPH-1))
10008aec:	9901      	ldr	r1, [sp, #4]
10008aee:	2911      	cmp	r1, #17
10008af0:	d801      	bhi.n	10008af6 <_Z4Gamev.part.0+0x18ee>
10008af2:	f7ff faa2 	bl	1000803a <_Z4Gamev.part.0+0xe32>
					ok = False;
10008af6:	2200      	movs	r2, #0
10008af8:	f7ff fab0 	bl	1000805c <_Z4Gamev.part.0+0xe54>
			if (b != 0)
10008afc:	2100      	movs	r1, #0
	if (res)
10008afe:	2a00      	cmp	r2, #0
10008b00:	d101      	bne.n	10008b06 <_Z4Gamev.part.0+0x18fe>
10008b02:	f7ff fad2 	bl	100080aa <_Z4Gamev.part.0+0xea2>
		Brick = brick;
10008b06:	4a0c      	ldr	r2, [pc, #48]	; (10008b38 <_Z4Gamev.part.0+0x1930>)
10008b08:	7014      	strb	r4, [r2, #0]
	return res;
10008b0a:	f7ff fb00 	bl	1000810e <_Z4Gamev.part.0+0xf06>
					if (*d != TILE_EMPTY) ok = False;
10008b0e:	0039      	movs	r1, r7
10008b10:	4657      	mov	r7, sl
10008b12:	e7f4      	b.n	10008afe <_Z4Gamev.part.0+0x18f6>
10008b14:	2300      	movs	r3, #0
			if (b != 0)
10008b16:	2c00      	cmp	r4, #0
10008b18:	d000      	beq.n	10008b1c <_Z4Gamev.part.0+0x1914>
10008b1a:	e732      	b.n	10008982 <_Z4Gamev.part.0+0x177a>
10008b1c:	e454      	b.n	100083c8 <_Z4Gamev.part.0+0x11c0>
10008b1e:	46c0      	nop			; (mov r8, r8)
10008b20:	1000e62c 	.word	0x1000e62c
10008b24:	1000e640 	.word	0x1000e640
10008b28:	1000e650 	.word	0x1000e650
10008b2c:	1000e664 	.word	0x1000e664
10008b30:	1000e678 	.word	0x1000e678
10008b34:	20012765 	.word	0x20012765
10008b38:	20012764 	.word	0x20012764

10008b3c <_Z8FindDemov>:

// find demo move
void FindDemo()
{
10008b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
10008b3e:	464e      	mov	r6, r9
10008b40:	46de      	mov	lr, fp
10008b42:	4657      	mov	r7, sl
10008b44:	4645      	mov	r5, r8
10008b46:	b5e0      	push	{r5, r6, r7, lr}
	int bestscore, bestx, besty, bestbrick; // best move
	int savex, savey, savebrick; // save state

	// clear best score
	bestscore = 0;
	bestx = BrickX;
10008b48:	2600      	movs	r6, #0
10008b4a:	4be6      	ldr	r3, [pc, #920]	; (10008ee4 <_Z8FindDemov+0x3a8>)
{
10008b4c:	b09b      	sub	sp, #108	; 0x6c
	bestx = BrickX;
10008b4e:	579e      	ldrsb	r6, [r3, r6]
	besty = BrickY;
10008b50:	4be5      	ldr	r3, [pc, #916]	; (10008ee8 <_Z8FindDemov+0x3ac>)
	bestbrick = Brick;
10008b52:	4ae6      	ldr	r2, [pc, #920]	; (10008eec <_Z8FindDemov+0x3b0>)
	besty = BrickY;
10008b54:	781b      	ldrb	r3, [r3, #0]
	bestbrick = Brick;
10008b56:	7812      	ldrb	r2, [r2, #0]
	besty = BrickY;
10008b58:	b25b      	sxtb	r3, r3
	u8* d = &Board[x + y*MAPW];
10008b5a:	469c      	mov	ip, r3
10008b5c:	0058      	lsls	r0, r3, #1
10008b5e:	900f      	str	r0, [sp, #60]	; 0x3c
10008b60:	4460      	add	r0, ip
	besty = BrickY;
10008b62:	930d      	str	r3, [sp, #52]	; 0x34
10008b64:	9316      	str	r3, [sp, #88]	; 0x58
	u8* d = &Board[x + y*MAPW];
10008b66:	0003      	movs	r3, r0
10008b68:	00c0      	lsls	r0, r0, #3
10008b6a:	181b      	adds	r3, r3, r0
10008b6c:	48e0      	ldr	r0, [pc, #896]	; (10008ef0 <_Z8FindDemov+0x3b4>)
	const u8* s = &BrickTemp[brick*BRICKTEMPSIZE];
10008b6e:	0111      	lsls	r1, r2, #4
	u8* d = &Board[x + y*MAPW];
10008b70:	4684      	mov	ip, r0
	bestbrick = Brick;
10008b72:	920e      	str	r2, [sp, #56]	; 0x38
			if (b != 0) *d = TILE_EMPTY;
10008b74:	48df      	ldr	r0, [pc, #892]	; (10008ef4 <_Z8FindDemov+0x3b8>)
	bestbrick = Brick;
10008b76:	9217      	str	r2, [sp, #92]	; 0x5c
	const u8* s = &BrickTemp[brick*BRICKTEMPSIZE];
10008b78:	4ade      	ldr	r2, [pc, #888]	; (10008ef4 <_Z8FindDemov+0x3b8>)
	u8* d = &Board[x + y*MAPW];
10008b7a:	199b      	adds	r3, r3, r6
	const u8* s = &BrickTemp[brick*BRICKTEMPSIZE];
10008b7c:	1852      	adds	r2, r2, r1
			if (b != 0) *d = TILE_EMPTY;
10008b7e:	5c41      	ldrb	r1, [r0, r1]
	bestx = BrickX;
10008b80:	9615      	str	r6, [sp, #84]	; 0x54
	u8* d = &Board[x + y*MAPW];
10008b82:	4463      	add	r3, ip
			if (b != 0) *d = TILE_EMPTY;
10008b84:	2900      	cmp	r1, #0
10008b86:	d001      	beq.n	10008b8c <_Z8FindDemov+0x50>
10008b88:	2108      	movs	r1, #8
10008b8a:	7019      	strb	r1, [r3, #0]
10008b8c:	7851      	ldrb	r1, [r2, #1]
10008b8e:	2900      	cmp	r1, #0
10008b90:	d001      	beq.n	10008b96 <_Z8FindDemov+0x5a>
10008b92:	2108      	movs	r1, #8
10008b94:	7059      	strb	r1, [r3, #1]
10008b96:	7891      	ldrb	r1, [r2, #2]
10008b98:	2900      	cmp	r1, #0
10008b9a:	d001      	beq.n	10008ba0 <_Z8FindDemov+0x64>
10008b9c:	2108      	movs	r1, #8
10008b9e:	7099      	strb	r1, [r3, #2]
10008ba0:	78d1      	ldrb	r1, [r2, #3]
10008ba2:	2900      	cmp	r1, #0
10008ba4:	d001      	beq.n	10008baa <_Z8FindDemov+0x6e>
10008ba6:	2108      	movs	r1, #8
10008ba8:	70d9      	strb	r1, [r3, #3]
10008baa:	7911      	ldrb	r1, [r2, #4]
10008bac:	2900      	cmp	r1, #0
10008bae:	d001      	beq.n	10008bb4 <_Z8FindDemov+0x78>
10008bb0:	2108      	movs	r1, #8
10008bb2:	76d9      	strb	r1, [r3, #27]
10008bb4:	7951      	ldrb	r1, [r2, #5]
10008bb6:	2900      	cmp	r1, #0
10008bb8:	d001      	beq.n	10008bbe <_Z8FindDemov+0x82>
10008bba:	2108      	movs	r1, #8
10008bbc:	7719      	strb	r1, [r3, #28]
10008bbe:	7991      	ldrb	r1, [r2, #6]
10008bc0:	2900      	cmp	r1, #0
10008bc2:	d001      	beq.n	10008bc8 <_Z8FindDemov+0x8c>
10008bc4:	2108      	movs	r1, #8
10008bc6:	7759      	strb	r1, [r3, #29]
10008bc8:	79d1      	ldrb	r1, [r2, #7]
10008bca:	2900      	cmp	r1, #0
10008bcc:	d001      	beq.n	10008bd2 <_Z8FindDemov+0x96>
10008bce:	2108      	movs	r1, #8
10008bd0:	7799      	strb	r1, [r3, #30]
10008bd2:	7a11      	ldrb	r1, [r2, #8]
10008bd4:	2900      	cmp	r1, #0
10008bd6:	d002      	beq.n	10008bde <_Z8FindDemov+0xa2>
10008bd8:	2136      	movs	r1, #54	; 0x36
10008bda:	2008      	movs	r0, #8
10008bdc:	5458      	strb	r0, [r3, r1]
10008bde:	7a51      	ldrb	r1, [r2, #9]
10008be0:	2900      	cmp	r1, #0
10008be2:	d002      	beq.n	10008bea <_Z8FindDemov+0xae>
10008be4:	2137      	movs	r1, #55	; 0x37
10008be6:	2008      	movs	r0, #8
10008be8:	5458      	strb	r0, [r3, r1]
10008bea:	7a91      	ldrb	r1, [r2, #10]
10008bec:	2900      	cmp	r1, #0
10008bee:	d002      	beq.n	10008bf6 <_Z8FindDemov+0xba>
10008bf0:	2138      	movs	r1, #56	; 0x38
10008bf2:	2008      	movs	r0, #8
10008bf4:	5458      	strb	r0, [r3, r1]
10008bf6:	7ad1      	ldrb	r1, [r2, #11]
10008bf8:	2900      	cmp	r1, #0
10008bfa:	d002      	beq.n	10008c02 <_Z8FindDemov+0xc6>
10008bfc:	2139      	movs	r1, #57	; 0x39
10008bfe:	2008      	movs	r0, #8
10008c00:	5458      	strb	r0, [r3, r1]
10008c02:	7b11      	ldrb	r1, [r2, #12]
10008c04:	2900      	cmp	r1, #0
10008c06:	d002      	beq.n	10008c0e <_Z8FindDemov+0xd2>
10008c08:	2151      	movs	r1, #81	; 0x51
10008c0a:	2008      	movs	r0, #8
10008c0c:	5458      	strb	r0, [r3, r1]
10008c0e:	7b51      	ldrb	r1, [r2, #13]
10008c10:	2900      	cmp	r1, #0
10008c12:	d002      	beq.n	10008c1a <_Z8FindDemov+0xde>
10008c14:	2152      	movs	r1, #82	; 0x52
10008c16:	2008      	movs	r0, #8
10008c18:	5458      	strb	r0, [r3, r1]
10008c1a:	7b91      	ldrb	r1, [r2, #14]
10008c1c:	2900      	cmp	r1, #0
10008c1e:	d002      	beq.n	10008c26 <_Z8FindDemov+0xea>
10008c20:	2153      	movs	r1, #83	; 0x53
10008c22:	2008      	movs	r0, #8
10008c24:	5458      	strb	r0, [r3, r1]
10008c26:	7bd2      	ldrb	r2, [r2, #15]
10008c28:	2a00      	cmp	r2, #0
10008c2a:	d002      	beq.n	10008c32 <_Z8FindDemov+0xf6>
10008c2c:	2254      	movs	r2, #84	; 0x54
10008c2e:	2108      	movs	r1, #8
10008c30:	5499      	strb	r1, [r3, r2]
{
10008c32:	2304      	movs	r3, #4
10008c34:	9319      	str	r3, [sp, #100]	; 0x64
	bestscore = 0;
10008c36:	2300      	movs	r3, #0
10008c38:	2234      	movs	r2, #52	; 0x34
10008c3a:	9313      	str	r3, [sp, #76]	; 0x4c
10008c3c:	466b      	mov	r3, sp
10008c3e:	189b      	adds	r3, r3, r2
10008c40:	781b      	ldrb	r3, [r3, #0]
					if (*d != TILE_EMPTY) ok = False;
10008c42:	46b2      	mov	sl, r6
10008c44:	469b      	mov	fp, r3

	// rotations
	for (rot = 4; rot > 0; rot--)
	{
		// get new brick
		newbrick = BrickRot[Brick];
10008c46:	9a0e      	ldr	r2, [sp, #56]	; 0x38
10008c48:	4bab      	ldr	r3, [pc, #684]	; (10008ef8 <_Z8FindDemov+0x3bc>)
	const u8* s = &BrickTemp[brick*BRICKTEMPSIZE];
10008c4a:	4caa      	ldr	r4, [pc, #680]	; (10008ef4 <_Z8FindDemov+0x3b8>)
		newbrick = BrickRot[Brick];
10008c4c:	5c9b      	ldrb	r3, [r3, r2]
	u8* d = &Board[x + y*MAPW];
10008c4e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
	const u8* s = &BrickTemp[brick*BRICKTEMPSIZE];
10008c50:	0119      	lsls	r1, r3, #4
10008c52:	468c      	mov	ip, r1
10008c54:	4464      	add	r4, ip
	u8* d = &Board[x + y*MAPW];
10008c56:	4694      	mov	ip, r2
		newbrick = BrickRot[Brick];
10008c58:	930e      	str	r3, [sp, #56]	; 0x38
	u8* d = &Board[x + y*MAPW];
10008c5a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
			b = *s++;
10008c5c:	48a5      	ldr	r0, [pc, #660]	; (10008ef4 <_Z8FindDemov+0x3b8>)
	u8* d = &Board[x + y*MAPW];
10008c5e:	4463      	add	r3, ip
10008c60:	00da      	lsls	r2, r3, #3
10008c62:	189b      	adds	r3, r3, r2
	const u8* s = &BrickTemp[brick*BRICKTEMPSIZE];
10008c64:	9110      	str	r1, [sp, #64]	; 0x40
	u8* d = &Board[x + y*MAPW];
10008c66:	4aa2      	ldr	r2, [pc, #648]	; (10008ef0 <_Z8FindDemov+0x3b4>)
			b = *s++;
10008c68:	5c41      	ldrb	r1, [r0, r1]
	u8* d = &Board[x + y*MAPW];
10008c6a:	9311      	str	r3, [sp, #68]	; 0x44
10008c6c:	4453      	add	r3, sl
			b = *s++;
10008c6e:	4689      	mov	r9, r1
				if ((y < 1) || (y >= MAPH-1))
10008c70:	465d      	mov	r5, fp
	u8* d = &Board[x + y*MAPW];
10008c72:	18d2      	adds	r2, r2, r3
			if (b != 0)
10008c74:	2900      	cmp	r1, #0
10008c76:	d101      	bne.n	10008c7c <_Z8FindDemov+0x140>
10008c78:	f000 fc0f 	bl	1000949a <_Z8FindDemov+0x95e>
				if ((y < 1) || (y >= MAPH-1))
10008c7c:	4659      	mov	r1, fp
10008c7e:	3901      	subs	r1, #1
10008c80:	2911      	cmp	r1, #17
10008c82:	d901      	bls.n	10008c88 <_Z8FindDemov+0x14c>
10008c84:	f001 f830 	bl	10009ce8 <_Z8FindDemov+0x11ac>
					if (*d != TILE_EMPTY) ok = False;
10008c88:	4999      	ldr	r1, [pc, #612]	; (10008ef0 <_Z8FindDemov+0x3b4>)
10008c8a:	5ccb      	ldrb	r3, [r1, r3]
10008c8c:	3b08      	subs	r3, #8
10008c8e:	4259      	negs	r1, r3
10008c90:	414b      	adcs	r3, r1
			if (b != 0)
10008c92:	7861      	ldrb	r1, [r4, #1]
					if (*d != TILE_EMPTY) ok = False;
10008c94:	b2db      	uxtb	r3, r3
			if (b != 0)
10008c96:	2900      	cmp	r1, #0
10008c98:	d001      	beq.n	10008c9e <_Z8FindDemov+0x162>
10008c9a:	f001 f807 	bl	10009cac <_Z8FindDemov+0x1170>
10008c9e:	78a1      	ldrb	r1, [r4, #2]
10008ca0:	2900      	cmp	r1, #0
10008ca2:	d001      	beq.n	10008ca8 <_Z8FindDemov+0x16c>
10008ca4:	f001 f80d 	bl	10009cc2 <_Z8FindDemov+0x1186>
10008ca8:	78e1      	ldrb	r1, [r4, #3]
10008caa:	2900      	cmp	r1, #0
10008cac:	d006      	beq.n	10008cbc <_Z8FindDemov+0x180>
				if ((y < 1) || (y >= MAPH-1))
10008cae:	4659      	mov	r1, fp
10008cb0:	3901      	subs	r1, #1
10008cb2:	2911      	cmp	r1, #17
10008cb4:	d801      	bhi.n	10008cba <_Z8FindDemov+0x17e>
10008cb6:	f001 f80f 	bl	10009cd8 <_Z8FindDemov+0x119c>
					ok = False;
10008cba:	2300      	movs	r3, #0
		y++;
10008cbc:	4659      	mov	r1, fp
10008cbe:	3101      	adds	r1, #1
10008cc0:	b2c9      	uxtb	r1, r1
10008cc2:	9101      	str	r1, [sp, #4]
			b = *s++;
10008cc4:	7921      	ldrb	r1, [r4, #4]
10008cc6:	9103      	str	r1, [sp, #12]
			if (b != 0)
10008cc8:	2900      	cmp	r1, #0
10008cca:	d101      	bne.n	10008cd0 <_Z8FindDemov+0x194>
10008ccc:	f000 fbfe 	bl	100094cc <_Z8FindDemov+0x990>
				if ((y < 1) || (y >= MAPH-1))
10008cd0:	4659      	mov	r1, fp
10008cd2:	2911      	cmp	r1, #17
10008cd4:	d901      	bls.n	10008cda <_Z8FindDemov+0x19e>
10008cd6:	f000 ffcf 	bl	10009c78 <_Z8FindDemov+0x113c>
					if (*d != TILE_EMPTY) ok = False;
10008cda:	7ed1      	ldrb	r1, [r2, #27]
10008cdc:	3908      	subs	r1, #8
10008cde:	4248      	negs	r0, r1
10008ce0:	4141      	adcs	r1, r0
10008ce2:	4249      	negs	r1, r1
10008ce4:	400b      	ands	r3, r1
			if (b != 0)
10008ce6:	7961      	ldrb	r1, [r4, #5]
10008ce8:	2900      	cmp	r1, #0
10008cea:	d001      	beq.n	10008cf0 <_Z8FindDemov+0x1b4>
10008cec:	f000 fbf6 	bl	100094dc <_Z8FindDemov+0x9a0>
10008cf0:	79a1      	ldrb	r1, [r4, #6]
10008cf2:	2900      	cmp	r1, #0
10008cf4:	d001      	beq.n	10008cfa <_Z8FindDemov+0x1be>
10008cf6:	f000 fbfb 	bl	100094f0 <_Z8FindDemov+0x9b4>
10008cfa:	79e1      	ldrb	r1, [r4, #7]
10008cfc:	2900      	cmp	r1, #0
10008cfe:	d001      	beq.n	10008d04 <_Z8FindDemov+0x1c8>
10008d00:	f000 fbff 	bl	10009502 <_Z8FindDemov+0x9c6>
		y++;
10008d04:	4659      	mov	r1, fp
10008d06:	3102      	adds	r1, #2
10008d08:	b2c9      	uxtb	r1, r1
10008d0a:	4688      	mov	r8, r1
			b = *s++;
10008d0c:	7a21      	ldrb	r1, [r4, #8]
10008d0e:	9102      	str	r1, [sp, #8]
			if (b != 0)
10008d10:	2900      	cmp	r1, #0
10008d12:	d001      	beq.n	10008d18 <_Z8FindDemov+0x1dc>
10008d14:	f000 fc05 	bl	10009522 <_Z8FindDemov+0x9e6>
			b = *s++;
10008d18:	7a61      	ldrb	r1, [r4, #9]
			if (b != 0)
10008d1a:	2900      	cmp	r1, #0
10008d1c:	d101      	bne.n	10008d22 <_Z8FindDemov+0x1e6>
10008d1e:	f000 ffa0 	bl	10009c62 <_Z8FindDemov+0x1126>
				if ((y < 1) || (y >= MAPH-1))
10008d22:	9901      	ldr	r1, [sp, #4]
10008d24:	2911      	cmp	r1, #17
10008d26:	d901      	bls.n	10008d2c <_Z8FindDemov+0x1f0>
10008d28:	f000 ff8b 	bl	10009c42 <_Z8FindDemov+0x1106>
					if (*d != TILE_EMPTY) ok = False;
10008d2c:	2137      	movs	r1, #55	; 0x37
10008d2e:	5c51      	ldrb	r1, [r2, r1]
10008d30:	3908      	subs	r1, #8
10008d32:	4248      	negs	r0, r1
10008d34:	4141      	adcs	r1, r0
10008d36:	4249      	negs	r1, r1
10008d38:	400b      	ands	r3, r1
			if (b != 0)
10008d3a:	7aa1      	ldrb	r1, [r4, #10]
10008d3c:	2900      	cmp	r1, #0
10008d3e:	d101      	bne.n	10008d44 <_Z8FindDemov+0x208>
10008d40:	f000 ff82 	bl	10009c48 <_Z8FindDemov+0x110c>
					if (*d != TILE_EMPTY) ok = False;
10008d44:	2138      	movs	r1, #56	; 0x38
10008d46:	5c51      	ldrb	r1, [r2, r1]
10008d48:	3908      	subs	r1, #8
10008d4a:	4248      	negs	r0, r1
10008d4c:	4141      	adcs	r1, r0
10008d4e:	4249      	negs	r1, r1
10008d50:	400b      	ands	r3, r1
			if (b != 0)
10008d52:	7ae1      	ldrb	r1, [r4, #11]
10008d54:	2900      	cmp	r1, #0
10008d56:	d006      	beq.n	10008d66 <_Z8FindDemov+0x22a>
					if (*d != TILE_EMPTY) ok = False;
10008d58:	2139      	movs	r1, #57	; 0x39
10008d5a:	5c51      	ldrb	r1, [r2, r1]
					ok = False;
10008d5c:	3908      	subs	r1, #8
10008d5e:	4248      	negs	r0, r1
10008d60:	4141      	adcs	r1, r0
10008d62:	4249      	negs	r1, r1
10008d64:	400b      	ands	r3, r1
			b = *s++;
10008d66:	7b21      	ldrb	r1, [r4, #12]
10008d68:	9104      	str	r1, [sp, #16]
			if (b != 0)
10008d6a:	2900      	cmp	r1, #0
10008d6c:	d101      	bne.n	10008d72 <_Z8FindDemov+0x236>
10008d6e:	f000 fbf8 	bl	10009562 <_Z8FindDemov+0xa26>
				if ((y < 1) || (y >= MAPH-1))
10008d72:	4641      	mov	r1, r8
10008d74:	2911      	cmp	r1, #17
10008d76:	d817      	bhi.n	10008da8 <_Z8FindDemov+0x26c>
					if (*d != TILE_EMPTY) ok = False;
10008d78:	2151      	movs	r1, #81	; 0x51
10008d7a:	5c51      	ldrb	r1, [r2, r1]
10008d7c:	3908      	subs	r1, #8
10008d7e:	4248      	negs	r0, r1
10008d80:	4141      	adcs	r1, r0
10008d82:	4249      	negs	r1, r1
10008d84:	400b      	ands	r3, r1
			if (b != 0)
10008d86:	7b61      	ldrb	r1, [r4, #13]
10008d88:	2900      	cmp	r1, #0
10008d8a:	d001      	beq.n	10008d90 <_Z8FindDemov+0x254>
10008d8c:	f000 fbf1 	bl	10009572 <_Z8FindDemov+0xa36>
			b = *s++;
10008d90:	7ba1      	ldrb	r1, [r4, #14]
10008d92:	9109      	str	r1, [sp, #36]	; 0x24
			if (b != 0)
10008d94:	2900      	cmp	r1, #0
10008d96:	d101      	bne.n	10008d9c <_Z8FindDemov+0x260>
10008d98:	f000 ff2f 	bl	10009bfa <_Z8FindDemov+0x10be>
					if (*d != TILE_EMPTY) ok = False;
10008d9c:	2153      	movs	r1, #83	; 0x53
10008d9e:	5c51      	ldrb	r1, [r2, r1]
10008da0:	2908      	cmp	r1, #8
10008da2:	d101      	bne.n	10008da8 <_Z8FindDemov+0x26c>
10008da4:	f000 ff29 	bl	10009bfa <_Z8FindDemov+0x10be>
	return res;
10008da8:	4650      	mov	r0, sl
10008daa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
10008dac:	990d      	ldr	r1, [sp, #52]	; 0x34
10008dae:	f7fb ff99 	bl	10004ce4 <_Z11CheckBrickXaah.part.0>
	if (CheckBrickX(x, y, brick)) return True;
10008db2:	2800      	cmp	r0, #0
10008db4:	d000      	beq.n	10008db8 <_Z8FindDemov+0x27c>
10008db6:	e0ae      	b.n	10008f16 <_Z8FindDemov+0x3da>
		y++;
10008db8:	466b      	mov	r3, sp
10008dba:	2204      	movs	r2, #4
10008dbc:	569a      	ldrsb	r2, [r3, r2]
			if (b != 0)
10008dbe:	4649      	mov	r1, r9
	u8* d = &Board[x + y*MAPW];
10008dc0:	4694      	mov	ip, r2
10008dc2:	0053      	lsls	r3, r2, #1
10008dc4:	930f      	str	r3, [sp, #60]	; 0x3c
10008dc6:	4463      	add	r3, ip
		y++;
10008dc8:	920d      	str	r2, [sp, #52]	; 0x34
	u8* d = &Board[x + y*MAPW];
10008dca:	00da      	lsls	r2, r3, #3
10008dcc:	189b      	adds	r3, r3, r2
10008dce:	4a48      	ldr	r2, [pc, #288]	; (10008ef0 <_Z8FindDemov+0x3b4>)
10008dd0:	9311      	str	r3, [sp, #68]	; 0x44
10008dd2:	4453      	add	r3, sl
10008dd4:	18d2      	adds	r2, r2, r3
			if (b != 0)
10008dd6:	2900      	cmp	r1, #0
10008dd8:	d101      	bne.n	10008dde <_Z8FindDemov+0x2a2>
10008dda:	f000 ff88 	bl	10009cee <_Z8FindDemov+0x11b2>
				if ((y < 1) || (y >= MAPH-1))
10008dde:	4659      	mov	r1, fp
10008de0:	2911      	cmp	r1, #17
10008de2:	d801      	bhi.n	10008de8 <_Z8FindDemov+0x2ac>
10008de4:	f001 f858 	bl	10009e98 <_Z8FindDemov+0x135c>
			b = *s++;
10008de8:	7863      	ldrb	r3, [r4, #1]
			if (b != 0)
10008dea:	2b00      	cmp	r3, #0
10008dec:	d101      	bne.n	10008df2 <_Z8FindDemov+0x2b6>
10008dee:	f000 ffa2 	bl	10009d36 <_Z8FindDemov+0x11fa>
			b = *s++;
10008df2:	78a3      	ldrb	r3, [r4, #2]
			if (b != 0)
10008df4:	2b00      	cmp	r3, #0
10008df6:	d109      	bne.n	10008e0c <_Z8FindDemov+0x2d0>
10008df8:	78e1      	ldrb	r1, [r4, #3]
10008dfa:	2900      	cmp	r1, #0
10008dfc:	d101      	bne.n	10008e02 <_Z8FindDemov+0x2c6>
10008dfe:	f000 ff9a 	bl	10009d36 <_Z8FindDemov+0x11fa>
				if ((y < 1) || (y >= MAPH-1))
10008e02:	4659      	mov	r1, fp
10008e04:	2911      	cmp	r1, #17
10008e06:	d801      	bhi.n	10008e0c <_Z8FindDemov+0x2d0>
10008e08:	f000 ff8f 	bl	10009d2a <_Z8FindDemov+0x11ee>
			b = *s++;
10008e0c:	7921      	ldrb	r1, [r4, #4]
					ok = False;
10008e0e:	2300      	movs	r3, #0
			b = *s++;
10008e10:	9103      	str	r1, [sp, #12]
			if (b != 0)
10008e12:	2900      	cmp	r1, #0
10008e14:	d001      	beq.n	10008e1a <_Z8FindDemov+0x2de>
10008e16:	f000 ff94 	bl	10009d42 <_Z8FindDemov+0x1206>
			b = *s++;
10008e1a:	7961      	ldrb	r1, [r4, #5]
			if (b != 0)
10008e1c:	2900      	cmp	r1, #0
10008e1e:	d101      	bne.n	10008e24 <_Z8FindDemov+0x2e8>
10008e20:	f001 f880 	bl	10009f24 <_Z8FindDemov+0x13e8>
				if ((y < 1) || (y >= MAPH-1))
10008e24:	9901      	ldr	r1, [sp, #4]
10008e26:	2911      	cmp	r1, #17
10008e28:	d901      	bls.n	10008e2e <_Z8FindDemov+0x2f2>
10008e2a:	f001 f873 	bl	10009f14 <_Z8FindDemov+0x13d8>
					if (*d != TILE_EMPTY) ok = False;
10008e2e:	7f11      	ldrb	r1, [r2, #28]
10008e30:	3908      	subs	r1, #8
10008e32:	4248      	negs	r0, r1
10008e34:	4141      	adcs	r1, r0
10008e36:	4249      	negs	r1, r1
10008e38:	400b      	ands	r3, r1
			if (b != 0)
10008e3a:	79a1      	ldrb	r1, [r4, #6]
10008e3c:	2900      	cmp	r1, #0
10008e3e:	d001      	beq.n	10008e44 <_Z8FindDemov+0x308>
10008e40:	f000 ff92 	bl	10009d68 <_Z8FindDemov+0x122c>
10008e44:	79e1      	ldrb	r1, [r4, #7]
10008e46:	2900      	cmp	r1, #0
10008e48:	d101      	bne.n	10008e4e <_Z8FindDemov+0x312>
10008e4a:	f000 ff9c 	bl	10009d86 <_Z8FindDemov+0x124a>
				if ((y < 1) || (y >= MAPH-1))
10008e4e:	9901      	ldr	r1, [sp, #4]
10008e50:	2911      	cmp	r1, #17
10008e52:	d801      	bhi.n	10008e58 <_Z8FindDemov+0x31c>
10008e54:	f000 ff91 	bl	10009d7a <_Z8FindDemov+0x123e>
					ok = False;
10008e58:	2300      	movs	r3, #0
			b = *s++;
10008e5a:	7a21      	ldrb	r1, [r4, #8]
10008e5c:	9102      	str	r1, [sp, #8]
			if (b != 0)
10008e5e:	2900      	cmp	r1, #0
10008e60:	d001      	beq.n	10008e66 <_Z8FindDemov+0x32a>
10008e62:	f000 ff96 	bl	10009d92 <_Z8FindDemov+0x1256>
			b = *s++;
10008e66:	7a61      	ldrb	r1, [r4, #9]
			if (b != 0)
10008e68:	2900      	cmp	r1, #0
10008e6a:	d101      	bne.n	10008e70 <_Z8FindDemov+0x334>
10008e6c:	f001 f842 	bl	10009ef4 <_Z8FindDemov+0x13b8>
				if ((y < 1) || (y >= MAPH-1))
10008e70:	4641      	mov	r1, r8
10008e72:	2911      	cmp	r1, #17
10008e74:	d901      	bls.n	10008e7a <_Z8FindDemov+0x33e>
10008e76:	f001 f835 	bl	10009ee4 <_Z8FindDemov+0x13a8>
					if (*d != TILE_EMPTY) ok = False;
10008e7a:	2137      	movs	r1, #55	; 0x37
10008e7c:	5c51      	ldrb	r1, [r2, r1]
10008e7e:	3908      	subs	r1, #8
10008e80:	4248      	negs	r0, r1
10008e82:	4141      	adcs	r1, r0
10008e84:	4249      	negs	r1, r1
10008e86:	400b      	ands	r3, r1
			if (b != 0)
10008e88:	7aa1      	ldrb	r1, [r4, #10]
10008e8a:	2900      	cmp	r1, #0
10008e8c:	d001      	beq.n	10008e92 <_Z8FindDemov+0x356>
10008e8e:	f000 ff94 	bl	10009dba <_Z8FindDemov+0x127e>
10008e92:	7ae1      	ldrb	r1, [r4, #11]
10008e94:	2900      	cmp	r1, #0
10008e96:	d101      	bne.n	10008e9c <_Z8FindDemov+0x360>
10008e98:	f000 ffa0 	bl	10009ddc <_Z8FindDemov+0x12a0>
				if ((y < 1) || (y >= MAPH-1))
10008e9c:	4641      	mov	r1, r8
10008e9e:	2911      	cmp	r1, #17
10008ea0:	d801      	bhi.n	10008ea6 <_Z8FindDemov+0x36a>
10008ea2:	f000 ff94 	bl	10009dce <_Z8FindDemov+0x1292>
					ok = False;
10008ea6:	2300      	movs	r3, #0
		y++;
10008ea8:	4659      	mov	r1, fp
10008eaa:	1cce      	adds	r6, r1, #3
			b = *s++;
10008eac:	7b21      	ldrb	r1, [r4, #12]
		y++;
10008eae:	b2f6      	uxtb	r6, r6
			b = *s++;
10008eb0:	9104      	str	r1, [sp, #16]
			if (b != 0)
10008eb2:	2900      	cmp	r1, #0
10008eb4:	d001      	beq.n	10008eba <_Z8FindDemov+0x37e>
10008eb6:	f000 ff9a 	bl	10009dee <_Z8FindDemov+0x12b2>
10008eba:	7b61      	ldrb	r1, [r4, #13]
10008ebc:	2900      	cmp	r1, #0
10008ebe:	d101      	bne.n	10008ec4 <_Z8FindDemov+0x388>
10008ec0:	f000 fffd 	bl	10009ebe <_Z8FindDemov+0x1382>
				if ((y < 1) || (y >= MAPH-1))
10008ec4:	2e11      	cmp	r6, #17
10008ec6:	d819      	bhi.n	10008efc <_Z8FindDemov+0x3c0>
					if (*d != TILE_EMPTY) ok = False;
10008ec8:	2152      	movs	r1, #82	; 0x52
10008eca:	5c51      	ldrb	r1, [r2, r1]
10008ecc:	2908      	cmp	r1, #8
10008ece:	d101      	bne.n	10008ed4 <_Z8FindDemov+0x398>
10008ed0:	f001 f834 	bl	10009f3c <_Z8FindDemov+0x1400>
			b = *s++;
10008ed4:	7ba3      	ldrb	r3, [r4, #14]
10008ed6:	9309      	str	r3, [sp, #36]	; 0x24
			if (b != 0)
10008ed8:	2b00      	cmp	r3, #0
10008eda:	d001      	beq.n	10008ee0 <_Z8FindDemov+0x3a4>
10008edc:	f001 f848 	bl	10009f70 <_Z8FindDemov+0x1434>
10008ee0:	e00c      	b.n	10008efc <_Z8FindDemov+0x3c0>
10008ee2:	46c0      	nop			; (mov r8, r8)
10008ee4:	20012765 	.word	0x20012765
10008ee8:	20012766 	.word	0x20012766
10008eec:	20012764 	.word	0x20012764
10008ef0:	2000327c 	.word	0x2000327c
10008ef4:	1000e9f4 	.word	0x1000e9f4
10008ef8:	1000e9b8 	.word	0x1000e9b8
	return res;
10008efc:	4650      	mov	r0, sl
10008efe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
10008f00:	990d      	ldr	r1, [sp, #52]	; 0x34
10008f02:	f7fb feef 	bl	10004ce4 <_Z11CheckBrickXaah.part.0>
	if (CheckBrickX(x, y+1, brick)) return True;
10008f06:	2800      	cmp	r0, #0
10008f08:	d105      	bne.n	10008f16 <_Z8FindDemov+0x3da>
	return CheckBrickX(x, y+2, brick);
10008f0a:	4643      	mov	r3, r8
10008f0c:	4650      	mov	r0, sl
10008f0e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
10008f10:	b259      	sxtb	r1, r3
10008f12:	f7fd f917 	bl	10006144 <_Z11CheckBrickXaah>

		// try rotate brick, find nearest free space
		CheckBrickY(BrickX, BrickY, newbrick);

		// move brick left
		while (CheckBrick(BrickX-1, BrickY, Brick)) BrickX--;
10008f16:	2100      	movs	r1, #0
10008f18:	4be8      	ldr	r3, [pc, #928]	; (100092bc <_Z8FindDemov+0x780>)
	const u8* s = &BrickTemp[brick*BRICKTEMPSIZE];
10008f1a:	4ce9      	ldr	r4, [pc, #932]	; (100092c0 <_Z8FindDemov+0x784>)
		while (CheckBrick(BrickX-1, BrickY, Brick)) BrickX--;
10008f1c:	5659      	ldrsb	r1, [r3, r1]
10008f1e:	4be9      	ldr	r3, [pc, #932]	; (100092c4 <_Z8FindDemov+0x788>)
10008f20:	910d      	str	r1, [sp, #52]	; 0x34
10008f22:	781b      	ldrb	r3, [r3, #0]
	const u8* s = &BrickTemp[brick*BRICKTEMPSIZE];
10008f24:	0118      	lsls	r0, r3, #4
10008f26:	4684      	mov	ip, r0
10008f28:	4464      	add	r4, ip
	u8* d = &Board[x + y*MAPW];
10008f2a:	468c      	mov	ip, r1
		while (CheckBrick(BrickX-1, BrickY, Brick)) BrickX--;
10008f2c:	930e      	str	r3, [sp, #56]	; 0x38
	u8* d = &Board[x + y*MAPW];
10008f2e:	004b      	lsls	r3, r1, #1
10008f30:	930f      	str	r3, [sp, #60]	; 0x3c
10008f32:	4463      	add	r3, ip
10008f34:	00da      	lsls	r2, r3, #3
10008f36:	189b      	adds	r3, r3, r2
10008f38:	9311      	str	r3, [sp, #68]	; 0x44
10008f3a:	4be3      	ldr	r3, [pc, #908]	; (100092c8 <_Z8FindDemov+0x78c>)
	const u8* s = &BrickTemp[brick*BRICKTEMPSIZE];
10008f3c:	9010      	str	r0, [sp, #64]	; 0x40
10008f3e:	781b      	ldrb	r3, [r3, #0]
10008f40:	b25b      	sxtb	r3, r3
10008f42:	469a      	mov	sl, r3
			b = *s++;
10008f44:	4bde      	ldr	r3, [pc, #888]	; (100092c0 <_Z8FindDemov+0x784>)
10008f46:	5c1b      	ldrb	r3, [r3, r0]
10008f48:	4699      	mov	r9, r3
				if ((y < 1) || (y >= MAPH-1))
10008f4a:	b2cb      	uxtb	r3, r1
10008f4c:	001d      	movs	r5, r3
10008f4e:	3b01      	subs	r3, #1
10008f50:	b2db      	uxtb	r3, r3
10008f52:	469b      	mov	fp, r3
		y++;
10008f54:	002b      	movs	r3, r5
10008f56:	3301      	adds	r3, #1
10008f58:	b2db      	uxtb	r3, r3
10008f5a:	9301      	str	r3, [sp, #4]
			b = *s++;
10008f5c:	7923      	ldrb	r3, [r4, #4]
		y++;
10008f5e:	1ca9      	adds	r1, r5, #2
			b = *s++;
10008f60:	9303      	str	r3, [sp, #12]
		y++;
10008f62:	b2cb      	uxtb	r3, r1
10008f64:	4698      	mov	r8, r3
			b = *s++;
10008f66:	7a23      	ldrb	r3, [r4, #8]
10008f68:	9302      	str	r3, [sp, #8]
10008f6a:	7b23      	ldrb	r3, [r4, #12]
10008f6c:	9304      	str	r3, [sp, #16]
10008f6e:	7ba3      	ldrb	r3, [r4, #14]
10008f70:	9309      	str	r3, [sp, #36]	; 0x24
10008f72:	464b      	mov	r3, r9
10008f74:	425a      	negs	r2, r3
10008f76:	415a      	adcs	r2, r3
10008f78:	78a3      	ldrb	r3, [r4, #2]
10008f7a:	4657      	mov	r7, sl
10008f7c:	930b      	str	r3, [sp, #44]	; 0x2c
10008f7e:	7963      	ldrb	r3, [r4, #5]
10008f80:	002e      	movs	r6, r5
10008f82:	9308      	str	r3, [sp, #32]
10008f84:	79a3      	ldrb	r3, [r4, #6]
10008f86:	9218      	str	r2, [sp, #96]	; 0x60
10008f88:	930a      	str	r3, [sp, #40]	; 0x28
10008f8a:	7a63      	ldrb	r3, [r4, #9]
10008f8c:	9307      	str	r3, [sp, #28]
10008f8e:	7aa3      	ldrb	r3, [r4, #10]
10008f90:	9306      	str	r3, [sp, #24]
10008f92:	7b63      	ldrb	r3, [r4, #13]
10008f94:	930c      	str	r3, [sp, #48]	; 0x30
10008f96:	7863      	ldrb	r3, [r4, #1]
10008f98:	9305      	str	r3, [sp, #20]
10008f9a:	2300      	movs	r3, #0
10008f9c:	9312      	str	r3, [sp, #72]	; 0x48
10008f9e:	78e3      	ldrb	r3, [r4, #3]
10008fa0:	9314      	str	r3, [sp, #80]	; 0x50
			if (b != 0)
10008fa2:	4648      	mov	r0, r9
	u8* d = &Board[x + y*MAPW];
10008fa4:	9b11      	ldr	r3, [sp, #68]	; 0x44
10008fa6:	1e7a      	subs	r2, r7, #1
10008fa8:	49c8      	ldr	r1, [pc, #800]	; (100092cc <_Z8FindDemov+0x790>)
10008faa:	b252      	sxtb	r2, r2
10008fac:	18d3      	adds	r3, r2, r3
10008fae:	18c9      	adds	r1, r1, r3
			if (b != 0)
10008fb0:	2800      	cmp	r0, #0
10008fb2:	d101      	bne.n	10008fb8 <_Z8FindDemov+0x47c>
10008fb4:	f000 fcf2 	bl	1000999c <_Z8FindDemov+0xe60>
				if ((y < 1) || (y >= MAPH-1))
10008fb8:	4658      	mov	r0, fp
10008fba:	2811      	cmp	r0, #17
10008fbc:	d901      	bls.n	10008fc2 <_Z8FindDemov+0x486>
10008fbe:	f000 fd0c 	bl	100099da <_Z8FindDemov+0xe9e>
					if (*d != TILE_EMPTY) ok = False;
10008fc2:	48c2      	ldr	r0, [pc, #776]	; (100092cc <_Z8FindDemov+0x790>)
10008fc4:	5cc3      	ldrb	r3, [r0, r3]
10008fc6:	3b08      	subs	r3, #8
10008fc8:	4258      	negs	r0, r3
10008fca:	4143      	adcs	r3, r0
			if (b != 0)
10008fcc:	9805      	ldr	r0, [sp, #20]
	Bool ok = True;
10008fce:	b2db      	uxtb	r3, r3
			if (b != 0)
10008fd0:	2800      	cmp	r0, #0
10008fd2:	d001      	beq.n	10008fd8 <_Z8FindDemov+0x49c>
10008fd4:	f000 fce9 	bl	100099aa <_Z8FindDemov+0xe6e>
10008fd8:	980b      	ldr	r0, [sp, #44]	; 0x2c
10008fda:	2800      	cmp	r0, #0
10008fdc:	d001      	beq.n	10008fe2 <_Z8FindDemov+0x4a6>
10008fde:	f000 fcee 	bl	100099be <_Z8FindDemov+0xe82>
10008fe2:	9814      	ldr	r0, [sp, #80]	; 0x50
10008fe4:	2800      	cmp	r0, #0
10008fe6:	d006      	beq.n	10008ff6 <_Z8FindDemov+0x4ba>
					if (*d != TILE_EMPTY) ok = False;
10008fe8:	78c8      	ldrb	r0, [r1, #3]
					ok = False;
10008fea:	3808      	subs	r0, #8
10008fec:	0005      	movs	r5, r0
10008fee:	4268      	negs	r0, r5
10008ff0:	4168      	adcs	r0, r5
10008ff2:	4240      	negs	r0, r0
10008ff4:	4003      	ands	r3, r0
			if (b != 0)
10008ff6:	9803      	ldr	r0, [sp, #12]
10008ff8:	2800      	cmp	r0, #0
10008ffa:	d101      	bne.n	10009000 <_Z8FindDemov+0x4c4>
10008ffc:	f000 fcb0 	bl	10009960 <_Z8FindDemov+0xe24>
				if ((y < 1) || (y >= MAPH-1))
10009000:	2e11      	cmp	r6, #17
10009002:	d901      	bls.n	10009008 <_Z8FindDemov+0x4cc>
10009004:	f000 fcfa 	bl	100099fc <_Z8FindDemov+0xec0>
					if (*d != TILE_EMPTY) ok = False;
10009008:	7ec8      	ldrb	r0, [r1, #27]
1000900a:	3808      	subs	r0, #8
1000900c:	0005      	movs	r5, r0
1000900e:	4268      	negs	r0, r5
10009010:	4168      	adcs	r0, r5
10009012:	4240      	negs	r0, r0
10009014:	4003      	ands	r3, r0
			if (b != 0)
10009016:	9808      	ldr	r0, [sp, #32]
10009018:	2800      	cmp	r0, #0
1000901a:	d001      	beq.n	10009020 <_Z8FindDemov+0x4e4>
1000901c:	f000 fca6 	bl	1000996c <_Z8FindDemov+0xe30>
10009020:	980a      	ldr	r0, [sp, #40]	; 0x28
10009022:	2800      	cmp	r0, #0
10009024:	d001      	beq.n	1000902a <_Z8FindDemov+0x4ee>
10009026:	f000 fcab 	bl	10009980 <_Z8FindDemov+0xe44>
1000902a:	79e0      	ldrb	r0, [r4, #7]
1000902c:	2800      	cmp	r0, #0
1000902e:	d006      	beq.n	1000903e <_Z8FindDemov+0x502>
					if (*d != TILE_EMPTY) ok = False;
10009030:	7f88      	ldrb	r0, [r1, #30]
					ok = False;
10009032:	3808      	subs	r0, #8
10009034:	0005      	movs	r5, r0
10009036:	4268      	negs	r0, r5
10009038:	4168      	adcs	r0, r5
1000903a:	4240      	negs	r0, r0
1000903c:	4003      	ands	r3, r0
			if (b != 0)
1000903e:	9802      	ldr	r0, [sp, #8]
10009040:	2800      	cmp	r0, #0
10009042:	d101      	bne.n	10009048 <_Z8FindDemov+0x50c>
10009044:	f000 fc6b 	bl	1000991e <_Z8FindDemov+0xde2>
				if ((y < 1) || (y >= MAPH-1))
10009048:	9801      	ldr	r0, [sp, #4]
1000904a:	2811      	cmp	r0, #17
1000904c:	d901      	bls.n	10009052 <_Z8FindDemov+0x516>
1000904e:	f000 fce7 	bl	10009a20 <_Z8FindDemov+0xee4>
					if (*d != TILE_EMPTY) ok = False;
10009052:	2036      	movs	r0, #54	; 0x36
10009054:	5c08      	ldrb	r0, [r1, r0]
10009056:	3808      	subs	r0, #8
10009058:	0005      	movs	r5, r0
1000905a:	4268      	negs	r0, r5
1000905c:	4168      	adcs	r0, r5
1000905e:	4240      	negs	r0, r0
10009060:	4003      	ands	r3, r0
			if (b != 0)
10009062:	9807      	ldr	r0, [sp, #28]
10009064:	2800      	cmp	r0, #0
10009066:	d001      	beq.n	1000906c <_Z8FindDemov+0x530>
10009068:	f000 fc60 	bl	1000992c <_Z8FindDemov+0xdf0>
1000906c:	9806      	ldr	r0, [sp, #24]
1000906e:	2800      	cmp	r0, #0
10009070:	d001      	beq.n	10009076 <_Z8FindDemov+0x53a>
10009072:	f000 fc66 	bl	10009942 <_Z8FindDemov+0xe06>
10009076:	7ae0      	ldrb	r0, [r4, #11]
10009078:	2800      	cmp	r0, #0
1000907a:	d007      	beq.n	1000908c <_Z8FindDemov+0x550>
					if (*d != TILE_EMPTY) ok = False;
1000907c:	2039      	movs	r0, #57	; 0x39
1000907e:	5c08      	ldrb	r0, [r1, r0]
					ok = False;
10009080:	3808      	subs	r0, #8
10009082:	0005      	movs	r5, r0
10009084:	4268      	negs	r0, r5
10009086:	4168      	adcs	r0, r5
10009088:	4240      	negs	r0, r0
1000908a:	4003      	ands	r3, r0
			if (b != 0)
1000908c:	9804      	ldr	r0, [sp, #16]
1000908e:	2800      	cmp	r0, #0
10009090:	d101      	bne.n	10009096 <_Z8FindDemov+0x55a>
10009092:	f000 fc1f 	bl	100098d4 <_Z8FindDemov+0xd98>
				if ((y < 1) || (y >= MAPH-1))
10009096:	4640      	mov	r0, r8
10009098:	2811      	cmp	r0, #17
1000909a:	d901      	bls.n	100090a0 <_Z8FindDemov+0x564>
1000909c:	f000 fc34 	bl	10009908 <_Z8FindDemov+0xdcc>
					if (*d != TILE_EMPTY) ok = False;
100090a0:	2051      	movs	r0, #81	; 0x51
100090a2:	5c08      	ldrb	r0, [r1, r0]
100090a4:	3808      	subs	r0, #8
100090a6:	0005      	movs	r5, r0
100090a8:	4268      	negs	r0, r5
100090aa:	4168      	adcs	r0, r5
100090ac:	4240      	negs	r0, r0
100090ae:	4003      	ands	r3, r0
			if (b != 0)
100090b0:	980c      	ldr	r0, [sp, #48]	; 0x30
100090b2:	2800      	cmp	r0, #0
100090b4:	d001      	beq.n	100090ba <_Z8FindDemov+0x57e>
100090b6:	f000 fc16 	bl	100098e6 <_Z8FindDemov+0xdaa>
100090ba:	9809      	ldr	r0, [sp, #36]	; 0x24
100090bc:	2800      	cmp	r0, #0
100090be:	d001      	beq.n	100090c4 <_Z8FindDemov+0x588>
100090c0:	f000 fc1c 	bl	100098fc <_Z8FindDemov+0xdc0>
100090c4:	7be0      	ldrb	r0, [r4, #15]
100090c6:	2800      	cmp	r0, #0
100090c8:	d101      	bne.n	100090ce <_Z8FindDemov+0x592>
100090ca:	f000 fd2b 	bl	10009b24 <_Z8FindDemov+0xfe8>
					if (*d != TILE_EMPTY) ok = False;
100090ce:	2054      	movs	r0, #84	; 0x54
100090d0:	5c09      	ldrb	r1, [r1, r0]
100090d2:	2908      	cmp	r1, #8
100090d4:	d101      	bne.n	100090da <_Z8FindDemov+0x59e>
100090d6:	f000 fd25 	bl	10009b24 <_Z8FindDemov+0xfe8>
100090da:	9b12      	ldr	r3, [sp, #72]	; 0x48
100090dc:	2b00      	cmp	r3, #0
100090de:	d002      	beq.n	100090e6 <_Z8FindDemov+0x5aa>
		while (CheckBrick(BrickX-1, BrickY, Brick)) BrickX--;
100090e0:	46ba      	mov	sl, r7
100090e2:	4b79      	ldr	r3, [pc, #484]	; (100092c8 <_Z8FindDemov+0x78c>)
100090e4:	701f      	strb	r7, [r3, #0]
inline u8 RandU8() { return Rand.U8(); }
100090e6:	4657      	mov	r7, sl
		// loop all positions
		while (True)
		{
			// save current state
			savex = BrickX;
			savey = BrickY;
100090e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
			savebrick = Brick;
100090ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
	const u8* s = &BrickTemp[brick*BRICKTEMPSIZE];
100090ec:	4698      	mov	r8, r3
			savey = BrickY;
100090ee:	9312      	str	r3, [sp, #72]	; 0x48
	const u8* s = &BrickTemp[brick*BRICKTEMPSIZE];
100090f0:	2300      	movs	r3, #0
			savebrick = Brick;
100090f2:	9214      	str	r2, [sp, #80]	; 0x50
	const u8* s = &BrickTemp[brick*BRICKTEMPSIZE];
100090f4:	9a10      	ldr	r2, [sp, #64]	; 0x40
100090f6:	469a      	mov	sl, r3
100090f8:	4694      	mov	ip, r2
100090fa:	4644      	mov	r4, r8
100090fc:	4e70      	ldr	r6, [pc, #448]	; (100092c0 <_Z8FindDemov+0x784>)
			savex = BrickX;
100090fe:	9711      	str	r7, [sp, #68]	; 0x44
	const u8* s = &BrickTemp[brick*BRICKTEMPSIZE];
10009100:	4466      	add	r6, ip
10009102:	9701      	str	r7, [sp, #4]

			// move down
			while (CheckBrick(BrickX, BrickY+1, Brick)) BrickY++;
10009104:	b2e1      	uxtb	r1, r4
10009106:	1c4a      	adds	r2, r1, #1
10009108:	b2d0      	uxtb	r0, r2
1000910a:	b252      	sxtb	r2, r2
	u8* d = &Board[x + y*MAPW];
1000910c:	0053      	lsls	r3, r2, #1
1000910e:	189b      	adds	r3, r3, r2
10009110:	00df      	lsls	r7, r3, #3
10009112:	46bc      	mov	ip, r7
10009114:	9d01      	ldr	r5, [sp, #4]
10009116:	4463      	add	r3, ip
10009118:	46ac      	mov	ip, r5
1000911a:	4d6c      	ldr	r5, [pc, #432]	; (100092cc <_Z8FindDemov+0x790>)
1000911c:	4463      	add	r3, ip
1000911e:	18ef      	adds	r7, r5, r3
10009120:	46bc      	mov	ip, r7
			if (b != 0)
10009122:	464f      	mov	r7, r9
10009124:	2f00      	cmp	r7, #0
10009126:	d100      	bne.n	1000912a <_Z8FindDemov+0x5ee>
10009128:	e2a8      	b.n	1000967c <_Z8FindDemov+0xb40>
				if ((y < 1) || (y >= MAPH-1))
1000912a:	2911      	cmp	r1, #17
1000912c:	d900      	bls.n	10009130 <_Z8FindDemov+0x5f4>
1000912e:	e30a      	b.n	10009746 <_Z8FindDemov+0xc0a>
					if (*d != TILE_EMPTY) ok = False;
10009130:	5ceb      	ldrb	r3, [r5, r3]
10009132:	3b08      	subs	r3, #8
10009134:	001f      	movs	r7, r3
10009136:	427b      	negs	r3, r7
10009138:	417b      	adcs	r3, r7
			if (b != 0)
1000913a:	9f05      	ldr	r7, [sp, #20]
	Bool ok = True;
1000913c:	b2db      	uxtb	r3, r3
			if (b != 0)
1000913e:	2f00      	cmp	r7, #0
10009140:	d000      	beq.n	10009144 <_Z8FindDemov+0x608>
10009142:	e2a1      	b.n	10009688 <_Z8FindDemov+0xb4c>
10009144:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
10009146:	2d00      	cmp	r5, #0
10009148:	d000      	beq.n	1000914c <_Z8FindDemov+0x610>
1000914a:	e2ac      	b.n	100096a6 <_Z8FindDemov+0xb6a>
1000914c:	78f5      	ldrb	r5, [r6, #3]
1000914e:	2d00      	cmp	r5, #0
10009150:	d00b      	beq.n	1000916a <_Z8FindDemov+0x62e>
					if (*d != TILE_EMPTY) ok = False;
10009152:	4665      	mov	r5, ip
10009154:	78ed      	ldrb	r5, [r5, #3]
10009156:	46a8      	mov	r8, r5
					ok = False;
10009158:	2508      	movs	r5, #8
1000915a:	426d      	negs	r5, r5
1000915c:	46ab      	mov	fp, r5
1000915e:	44d8      	add	r8, fp
10009160:	4647      	mov	r7, r8
10009162:	427d      	negs	r5, r7
10009164:	417d      	adcs	r5, r7
10009166:	426d      	negs	r5, r5
10009168:	402b      	ands	r3, r5
			if (b != 0)
1000916a:	9f03      	ldr	r7, [sp, #12]
1000916c:	2f00      	cmp	r7, #0
1000916e:	d100      	bne.n	10009172 <_Z8FindDemov+0x636>
10009170:	e213      	b.n	1000959a <_Z8FindDemov+0xa5e>
				if ((y < 1) || (y >= MAPH-1))
10009172:	2811      	cmp	r0, #17
10009174:	d900      	bls.n	10009178 <_Z8FindDemov+0x63c>
10009176:	e2cb      	b.n	10009710 <_Z8FindDemov+0xbd4>
					if (*d != TILE_EMPTY) ok = False;
10009178:	4665      	mov	r5, ip
1000917a:	7eed      	ldrb	r5, [r5, #27]
1000917c:	46a8      	mov	r8, r5
1000917e:	2508      	movs	r5, #8
10009180:	426d      	negs	r5, r5
10009182:	46ab      	mov	fp, r5
10009184:	44d8      	add	r8, fp
10009186:	4647      	mov	r7, r8
10009188:	427d      	negs	r5, r7
1000918a:	417d      	adcs	r5, r7
1000918c:	426d      	negs	r5, r5
1000918e:	402b      	ands	r3, r5
			if (b != 0)
10009190:	9d08      	ldr	r5, [sp, #32]
10009192:	2d00      	cmp	r5, #0
10009194:	d000      	beq.n	10009198 <_Z8FindDemov+0x65c>
10009196:	e207      	b.n	100095a8 <_Z8FindDemov+0xa6c>
10009198:	980a      	ldr	r0, [sp, #40]	; 0x28
1000919a:	2800      	cmp	r0, #0
1000919c:	d000      	beq.n	100091a0 <_Z8FindDemov+0x664>
1000919e:	e213      	b.n	100095c8 <_Z8FindDemov+0xa8c>
100091a0:	79f0      	ldrb	r0, [r6, #7]
100091a2:	2800      	cmp	r0, #0
100091a4:	d007      	beq.n	100091b6 <_Z8FindDemov+0x67a>
					if (*d != TILE_EMPTY) ok = False;
100091a6:	4660      	mov	r0, ip
100091a8:	7f80      	ldrb	r0, [r0, #30]
					ok = False;
100091aa:	3808      	subs	r0, #8
100091ac:	0005      	movs	r5, r0
100091ae:	4268      	negs	r0, r5
100091b0:	4168      	adcs	r0, r5
100091b2:	4240      	negs	r0, r0
100091b4:	4003      	ands	r3, r0
			if (b != 0)
100091b6:	9802      	ldr	r0, [sp, #8]
100091b8:	2800      	cmp	r0, #0
100091ba:	d100      	bne.n	100091be <_Z8FindDemov+0x682>
100091bc:	e214      	b.n	100095e8 <_Z8FindDemov+0xaac>
				if ((y < 1) || (y >= MAPH-1))
100091be:	1c88      	adds	r0, r1, #2
100091c0:	b2c0      	uxtb	r0, r0
100091c2:	2811      	cmp	r0, #17
100091c4:	d900      	bls.n	100091c8 <_Z8FindDemov+0x68c>
100091c6:	e27f      	b.n	100096c8 <_Z8FindDemov+0xb8c>
					if (*d != TILE_EMPTY) ok = False;
100091c8:	2536      	movs	r5, #54	; 0x36
100091ca:	4660      	mov	r0, ip
100091cc:	5d40      	ldrb	r0, [r0, r5]
100091ce:	3808      	subs	r0, #8
100091d0:	0005      	movs	r5, r0
100091d2:	4268      	negs	r0, r5
100091d4:	4168      	adcs	r0, r5
100091d6:	4240      	negs	r0, r0
100091d8:	4003      	ands	r3, r0
			if (b != 0)
100091da:	9807      	ldr	r0, [sp, #28]
100091dc:	2800      	cmp	r0, #0
100091de:	d000      	beq.n	100091e2 <_Z8FindDemov+0x6a6>
100091e0:	e20a      	b.n	100095f8 <_Z8FindDemov+0xabc>
100091e2:	9806      	ldr	r0, [sp, #24]
100091e4:	2800      	cmp	r0, #0
100091e6:	d000      	beq.n	100091ea <_Z8FindDemov+0x6ae>
100091e8:	e212      	b.n	10009610 <_Z8FindDemov+0xad4>
100091ea:	7af0      	ldrb	r0, [r6, #11]
100091ec:	2800      	cmp	r0, #0
100091ee:	d008      	beq.n	10009202 <_Z8FindDemov+0x6c6>
					if (*d != TILE_EMPTY) ok = False;
100091f0:	2539      	movs	r5, #57	; 0x39
100091f2:	4660      	mov	r0, ip
100091f4:	5d40      	ldrb	r0, [r0, r5]
					ok = False;
100091f6:	3808      	subs	r0, #8
100091f8:	0005      	movs	r5, r0
100091fa:	4268      	negs	r0, r5
100091fc:	4168      	adcs	r0, r5
100091fe:	4240      	negs	r0, r0
10009200:	4003      	ands	r3, r0
			if (b != 0)
10009202:	9804      	ldr	r0, [sp, #16]
10009204:	2800      	cmp	r0, #0
10009206:	d100      	bne.n	1000920a <_Z8FindDemov+0x6ce>
10009208:	e213      	b.n	10009632 <_Z8FindDemov+0xaf6>
				if ((y < 1) || (y >= MAPH-1))
1000920a:	1cc8      	adds	r0, r1, #3
1000920c:	b2c0      	uxtb	r0, r0
1000920e:	2811      	cmp	r0, #17
10009210:	d81a      	bhi.n	10009248 <_Z8FindDemov+0x70c>
					if (*d != TILE_EMPTY) ok = False;
10009212:	2551      	movs	r5, #81	; 0x51
10009214:	4660      	mov	r0, ip
10009216:	5d40      	ldrb	r0, [r0, r5]
10009218:	3808      	subs	r0, #8
1000921a:	0005      	movs	r5, r0
1000921c:	4268      	negs	r0, r5
1000921e:	4168      	adcs	r0, r5
10009220:	4240      	negs	r0, r0
10009222:	4003      	ands	r3, r0
			if (b != 0)
10009224:	980c      	ldr	r0, [sp, #48]	; 0x30
10009226:	2800      	cmp	r0, #0
10009228:	d000      	beq.n	1000922c <_Z8FindDemov+0x6f0>
1000922a:	e20b      	b.n	10009644 <_Z8FindDemov+0xb08>
1000922c:	9909      	ldr	r1, [sp, #36]	; 0x24
1000922e:	2900      	cmp	r1, #0
10009230:	d000      	beq.n	10009234 <_Z8FindDemov+0x6f8>
10009232:	e212      	b.n	1000965a <_Z8FindDemov+0xb1e>
10009234:	7bf1      	ldrb	r1, [r6, #15]
10009236:	2900      	cmp	r1, #0
10009238:	d100      	bne.n	1000923c <_Z8FindDemov+0x700>
1000923a:	e218      	b.n	1000966e <_Z8FindDemov+0xb32>
					if (*d != TILE_EMPTY) ok = False;
1000923c:	4661      	mov	r1, ip
1000923e:	2054      	movs	r0, #84	; 0x54
10009240:	5c09      	ldrb	r1, [r1, r0]
10009242:	2908      	cmp	r1, #8
10009244:	d100      	bne.n	10009248 <_Z8FindDemov+0x70c>
10009246:	e212      	b.n	1000966e <_Z8FindDemov+0xb32>
10009248:	4653      	mov	r3, sl
1000924a:	46a0      	mov	r8, r4
1000924c:	9f01      	ldr	r7, [sp, #4]
1000924e:	2b00      	cmp	r3, #0
10009250:	d002      	beq.n	10009258 <_Z8FindDemov+0x71c>
10009252:	4642      	mov	r2, r8
10009254:	4b19      	ldr	r3, [pc, #100]	; (100092bc <_Z8FindDemov+0x780>)
10009256:	701a      	strb	r2, [r3, #0]

			// calculate score
			score = ScoreBrick(BrickX, BrickY, Brick);
10009258:	9a0e      	ldr	r2, [sp, #56]	; 0x38
1000925a:	4641      	mov	r1, r8
1000925c:	0038      	movs	r0, r7
1000925e:	f7fc fd7f 	bl	10005d60 <_Z10ScoreBrickaah>

			// restore state
			Brick = savebrick;
			BrickX = savex;
			BrickY = savey;
10009262:	4b16      	ldr	r3, [pc, #88]	; (100092bc <_Z8FindDemov+0x780>)
10009264:	9a0d      	ldr	r2, [sp, #52]	; 0x34
10009266:	701a      	strb	r2, [r3, #0]

			// found better score
			if ((score > bestscore) || ((score == bestscore) && (RandU8() < 0x50)))
10009268:	9b13      	ldr	r3, [sp, #76]	; 0x4c
1000926a:	4283      	cmp	r3, r0
1000926c:	da00      	bge.n	10009270 <_Z8FindDemov+0x734>
1000926e:	e32a      	b.n	100098c6 <_Z8FindDemov+0xd8a>
10009270:	d101      	bne.n	10009276 <_Z8FindDemov+0x73a>
10009272:	f000 fc7b 	bl	10009b6c <_Z8FindDemov+0x1030>
	u8* d = &Board[x + y*MAPW];
10009276:	980d      	ldr	r0, [sp, #52]	; 0x34
				besty = savey;
				bestbrick = savebrick;
			}

			// increment X position
			if (!CheckBrick(BrickX+1, BrickY, Brick)) break;
10009278:	1c7b      	adds	r3, r7, #1
	u8* d = &Board[x + y*MAPW];
1000927a:	4680      	mov	r8, r0
			if (!CheckBrick(BrickX+1, BrickY, Brick)) break;
1000927c:	b25b      	sxtb	r3, r3
1000927e:	469c      	mov	ip, r3
	u8* d = &Board[x + y*MAPW];
10009280:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
10009282:	4443      	add	r3, r8
10009284:	00da      	lsls	r2, r3, #3
10009286:	189b      	adds	r3, r3, r2
10009288:	4a10      	ldr	r2, [pc, #64]	; (100092cc <_Z8FindDemov+0x790>)
1000928a:	4463      	add	r3, ip
1000928c:	18d1      	adds	r1, r2, r3
			if (b != 0)
1000928e:	464a      	mov	r2, r9
10009290:	2a00      	cmp	r2, #0
10009292:	d100      	bne.n	10009296 <_Z8FindDemov+0x75a>
10009294:	e28a      	b.n	100097ac <_Z8FindDemov+0xc70>
				if ((y < 1) || (y >= MAPH-1))
10009296:	b2c2      	uxtb	r2, r0
10009298:	1e50      	subs	r0, r2, #1
1000929a:	2811      	cmp	r0, #17
1000929c:	d901      	bls.n	100092a2 <_Z8FindDemov+0x766>
1000929e:	f000 fc36 	bl	10009b0e <_Z8FindDemov+0xfd2>
					if (*d != TILE_EMPTY) ok = False;
100092a2:	480a      	ldr	r0, [pc, #40]	; (100092cc <_Z8FindDemov+0x790>)
100092a4:	5cc3      	ldrb	r3, [r0, r3]
100092a6:	3b08      	subs	r3, #8
100092a8:	4258      	negs	r0, r3
100092aa:	4143      	adcs	r3, r0
			if (b != 0)
100092ac:	9805      	ldr	r0, [sp, #20]
	Bool ok = True;
100092ae:	b2db      	uxtb	r3, r3
			if (b != 0)
100092b0:	2800      	cmp	r0, #0
100092b2:	d001      	beq.n	100092b8 <_Z8FindDemov+0x77c>
100092b4:	f000 fc1f 	bl	10009af6 <_Z8FindDemov+0xfba>
100092b8:	e00a      	b.n	100092d0 <_Z8FindDemov+0x794>
100092ba:	46c0      	nop			; (mov r8, r8)
100092bc:	20012766 	.word	0x20012766
100092c0:	1000e9f4 	.word	0x1000e9f4
100092c4:	20012764 	.word	0x20012764
100092c8:	20012765 	.word	0x20012765
100092cc:	2000327c 	.word	0x2000327c
100092d0:	980b      	ldr	r0, [sp, #44]	; 0x2c
100092d2:	2800      	cmp	r0, #0
100092d4:	d100      	bne.n	100092d8 <_Z8FindDemov+0x79c>
100092d6:	e27e      	b.n	100097d6 <_Z8FindDemov+0xc9a>
					if (*d != TILE_EMPTY) ok = False;
100092d8:	7888      	ldrb	r0, [r1, #2]
100092da:	3808      	subs	r0, #8
100092dc:	4244      	negs	r4, r0
100092de:	4160      	adcs	r0, r4
100092e0:	4240      	negs	r0, r0
100092e2:	4003      	ands	r3, r0
			if (b != 0)
100092e4:	78f0      	ldrb	r0, [r6, #3]
100092e6:	2800      	cmp	r0, #0
100092e8:	d005      	beq.n	100092f6 <_Z8FindDemov+0x7ba>
					if (*d != TILE_EMPTY) ok = False;
100092ea:	78c8      	ldrb	r0, [r1, #3]
100092ec:	3808      	subs	r0, #8
100092ee:	4244      	negs	r4, r0
100092f0:	4160      	adcs	r0, r4
100092f2:	4240      	negs	r0, r0
100092f4:	4003      	ands	r3, r0
		y++;
100092f6:	1c50      	adds	r0, r2, #1
100092f8:	b2c0      	uxtb	r0, r0
100092fa:	4682      	mov	sl, r0
			if (b != 0)
100092fc:	9803      	ldr	r0, [sp, #12]
100092fe:	2800      	cmp	r0, #0
10009300:	d100      	bne.n	10009304 <_Z8FindDemov+0x7c8>
10009302:	e278      	b.n	100097f6 <_Z8FindDemov+0xcba>
				if ((y < 1) || (y >= MAPH-1))
10009304:	2a11      	cmp	r2, #17
10009306:	d900      	bls.n	1000930a <_Z8FindDemov+0x7ce>
10009308:	e3b6      	b.n	10009a78 <_Z8FindDemov+0xf3c>
					if (*d != TILE_EMPTY) ok = False;
1000930a:	7ec8      	ldrb	r0, [r1, #27]
1000930c:	3808      	subs	r0, #8
1000930e:	4244      	negs	r4, r0
10009310:	4160      	adcs	r0, r4
10009312:	4240      	negs	r0, r0
10009314:	4003      	ands	r3, r0
			if (b != 0)
10009316:	9808      	ldr	r0, [sp, #32]
10009318:	2800      	cmp	r0, #0
1000931a:	d000      	beq.n	1000931e <_Z8FindDemov+0x7e2>
1000931c:	e272      	b.n	10009804 <_Z8FindDemov+0xcc8>
1000931e:	980a      	ldr	r0, [sp, #40]	; 0x28
10009320:	2800      	cmp	r0, #0
10009322:	d000      	beq.n	10009326 <_Z8FindDemov+0x7ea>
10009324:	e278      	b.n	10009818 <_Z8FindDemov+0xcdc>
10009326:	79f0      	ldrb	r0, [r6, #7]
10009328:	2800      	cmp	r0, #0
1000932a:	d005      	beq.n	10009338 <_Z8FindDemov+0x7fc>
					if (*d != TILE_EMPTY) ok = False;
1000932c:	7f88      	ldrb	r0, [r1, #30]
					ok = False;
1000932e:	3808      	subs	r0, #8
10009330:	4244      	negs	r4, r0
10009332:	4160      	adcs	r0, r4
10009334:	4240      	negs	r0, r0
10009336:	4003      	ands	r3, r0
		y++;
10009338:	1c90      	adds	r0, r2, #2
1000933a:	b2c0      	uxtb	r0, r0
1000933c:	4680      	mov	r8, r0
			if (b != 0)
1000933e:	9802      	ldr	r0, [sp, #8]
10009340:	2800      	cmp	r0, #0
10009342:	d100      	bne.n	10009346 <_Z8FindDemov+0x80a>
10009344:	e279      	b.n	1000983a <_Z8FindDemov+0xcfe>
				if ((y < 1) || (y >= MAPH-1))
10009346:	4650      	mov	r0, sl
10009348:	2811      	cmp	r0, #17
1000934a:	d900      	bls.n	1000934e <_Z8FindDemov+0x812>
1000934c:	e37b      	b.n	10009a46 <_Z8FindDemov+0xf0a>
					if (*d != TILE_EMPTY) ok = False;
1000934e:	2036      	movs	r0, #54	; 0x36
10009350:	5c08      	ldrb	r0, [r1, r0]
10009352:	3808      	subs	r0, #8
10009354:	4244      	negs	r4, r0
10009356:	4160      	adcs	r0, r4
10009358:	4240      	negs	r0, r0
1000935a:	4003      	ands	r3, r0
			if (b != 0)
1000935c:	9807      	ldr	r0, [sp, #28]
1000935e:	2800      	cmp	r0, #0
10009360:	d000      	beq.n	10009364 <_Z8FindDemov+0x828>
10009362:	e272      	b.n	1000984a <_Z8FindDemov+0xd0e>
10009364:	9806      	ldr	r0, [sp, #24]
10009366:	2800      	cmp	r0, #0
10009368:	d000      	beq.n	1000936c <_Z8FindDemov+0x830>
1000936a:	e279      	b.n	10009860 <_Z8FindDemov+0xd24>
1000936c:	7af0      	ldrb	r0, [r6, #11]
1000936e:	2800      	cmp	r0, #0
10009370:	d006      	beq.n	10009380 <_Z8FindDemov+0x844>
					if (*d != TILE_EMPTY) ok = False;
10009372:	2039      	movs	r0, #57	; 0x39
10009374:	5c08      	ldrb	r0, [r1, r0]
					ok = False;
10009376:	3808      	subs	r0, #8
10009378:	4244      	negs	r4, r0
1000937a:	4160      	adcs	r0, r4
1000937c:	4240      	negs	r0, r0
1000937e:	4003      	ands	r3, r0
			if (b != 0)
10009380:	9804      	ldr	r0, [sp, #16]
10009382:	2800      	cmp	r0, #0
10009384:	d100      	bne.n	10009388 <_Z8FindDemov+0x84c>
10009386:	e27a      	b.n	1000987e <_Z8FindDemov+0xd42>
				if ((y < 1) || (y >= MAPH-1))
10009388:	4640      	mov	r0, r8
1000938a:	2811      	cmp	r0, #17
1000938c:	d817      	bhi.n	100093be <_Z8FindDemov+0x882>
					if (*d != TILE_EMPTY) ok = False;
1000938e:	2051      	movs	r0, #81	; 0x51
10009390:	5c08      	ldrb	r0, [r1, r0]
10009392:	3808      	subs	r0, #8
10009394:	4244      	negs	r4, r0
10009396:	4160      	adcs	r0, r4
10009398:	4240      	negs	r0, r0
1000939a:	4003      	ands	r3, r0
			if (b != 0)
1000939c:	980c      	ldr	r0, [sp, #48]	; 0x30
1000939e:	2800      	cmp	r0, #0
100093a0:	d000      	beq.n	100093a4 <_Z8FindDemov+0x868>
100093a2:	e274      	b.n	1000988e <_Z8FindDemov+0xd52>
100093a4:	9809      	ldr	r0, [sp, #36]	; 0x24
100093a6:	2800      	cmp	r0, #0
100093a8:	d000      	beq.n	100093ac <_Z8FindDemov+0x870>
100093aa:	e27a      	b.n	100098a2 <_Z8FindDemov+0xd66>
100093ac:	7bf0      	ldrb	r0, [r6, #15]
100093ae:	2800      	cmp	r0, #0
100093b0:	d100      	bne.n	100093b4 <_Z8FindDemov+0x878>
100093b2:	e27f      	b.n	100098b4 <_Z8FindDemov+0xd78>
					if (*d != TILE_EMPTY) ok = False;
100093b4:	2054      	movs	r0, #84	; 0x54
100093b6:	5c09      	ldrb	r1, [r1, r0]
100093b8:	2908      	cmp	r1, #8
100093ba:	d100      	bne.n	100093be <_Z8FindDemov+0x882>
100093bc:	e27a      	b.n	100098b4 <_Z8FindDemov+0xd78>
	for (rot = 4; rot > 0; rot--)
100093be:	9b19      	ldr	r3, [sp, #100]	; 0x64
100093c0:	46ba      	mov	sl, r7
100093c2:	3b01      	subs	r3, #1
100093c4:	4693      	mov	fp, r2
100093c6:	9319      	str	r3, [sp, #100]	; 0x64
100093c8:	2b00      	cmp	r3, #0
100093ca:	d000      	beq.n	100093ce <_Z8FindDemov+0x892>
100093cc:	e43b      	b.n	10008c46 <_Z8FindDemov+0x10a>
		}
	}

	// display brick on new best position
	BrickX = bestx;
	BrickY = besty;
100093ce:	9816      	ldr	r0, [sp, #88]	; 0x58
	BrickX = bestx;
100093d0:	4bca      	ldr	r3, [pc, #808]	; (100096fc <_Z8FindDemov+0xbc0>)
	u8* d = &Board[x + y*MAPW];
100093d2:	4684      	mov	ip, r0
	BrickX = bestx;
100093d4:	9c15      	ldr	r4, [sp, #84]	; 0x54
	BrickY = besty;
100093d6:	4aca      	ldr	r2, [pc, #808]	; (10009700 <_Z8FindDemov+0xbc4>)
	BrickX = bestx;
100093d8:	701c      	strb	r4, [r3, #0]
	u8* d = &Board[x + y*MAPW];
100093da:	0043      	lsls	r3, r0, #1
100093dc:	4463      	add	r3, ip
100093de:	46a4      	mov	ip, r4
	BrickY = besty;
100093e0:	7010      	strb	r0, [r2, #0]
	u8* d = &Board[x + y*MAPW];
100093e2:	00d8      	lsls	r0, r3, #3
100093e4:	181b      	adds	r3, r3, r0
100093e6:	48c7      	ldr	r0, [pc, #796]	; (10009704 <_Z8FindDemov+0xbc8>)
100093e8:	4463      	add	r3, ip
100093ea:	4684      	mov	ip, r0
	Brick = bestbrick;
100093ec:	49c6      	ldr	r1, [pc, #792]	; (10009708 <_Z8FindDemov+0xbcc>)
100093ee:	9a17      	ldr	r2, [sp, #92]	; 0x5c
			b = *s++;
100093f0:	48c6      	ldr	r0, [pc, #792]	; (1000970c <_Z8FindDemov+0xbd0>)
	Brick = bestbrick;
100093f2:	700a      	strb	r2, [r1, #0]
	const u8* s = &BrickTemp[brick*BRICKTEMPSIZE];
100093f4:	49c5      	ldr	r1, [pc, #788]	; (1000970c <_Z8FindDemov+0xbd0>)
100093f6:	0112      	lsls	r2, r2, #4
100093f8:	1889      	adds	r1, r1, r2
			b = *s++;
100093fa:	5c82      	ldrb	r2, [r0, r2]
	u8* d = &Board[x + y*MAPW];
100093fc:	4463      	add	r3, ip
			if (b != 0) *d = b;
100093fe:	2a00      	cmp	r2, #0
10009400:	d000      	beq.n	10009404 <_Z8FindDemov+0x8c8>
10009402:	701a      	strb	r2, [r3, #0]
			b = *s++;
10009404:	784a      	ldrb	r2, [r1, #1]
			if (b != 0) *d = b;
10009406:	2a00      	cmp	r2, #0
10009408:	d000      	beq.n	1000940c <_Z8FindDemov+0x8d0>
1000940a:	705a      	strb	r2, [r3, #1]
			b = *s++;
1000940c:	788a      	ldrb	r2, [r1, #2]
			if (b != 0) *d = b;
1000940e:	2a00      	cmp	r2, #0
10009410:	d000      	beq.n	10009414 <_Z8FindDemov+0x8d8>
10009412:	709a      	strb	r2, [r3, #2]
			b = *s++;
10009414:	78ca      	ldrb	r2, [r1, #3]
			if (b != 0) *d = b;
10009416:	2a00      	cmp	r2, #0
10009418:	d000      	beq.n	1000941c <_Z8FindDemov+0x8e0>
1000941a:	70da      	strb	r2, [r3, #3]
			b = *s++;
1000941c:	790a      	ldrb	r2, [r1, #4]
			if (b != 0) *d = b;
1000941e:	2a00      	cmp	r2, #0
10009420:	d000      	beq.n	10009424 <_Z8FindDemov+0x8e8>
10009422:	76da      	strb	r2, [r3, #27]
			b = *s++;
10009424:	794a      	ldrb	r2, [r1, #5]
			if (b != 0) *d = b;
10009426:	2a00      	cmp	r2, #0
10009428:	d000      	beq.n	1000942c <_Z8FindDemov+0x8f0>
1000942a:	771a      	strb	r2, [r3, #28]
			b = *s++;
1000942c:	798a      	ldrb	r2, [r1, #6]
			if (b != 0) *d = b;
1000942e:	2a00      	cmp	r2, #0
10009430:	d000      	beq.n	10009434 <_Z8FindDemov+0x8f8>
10009432:	775a      	strb	r2, [r3, #29]
			b = *s++;
10009434:	79ca      	ldrb	r2, [r1, #7]
			if (b != 0) *d = b;
10009436:	2a00      	cmp	r2, #0
10009438:	d000      	beq.n	1000943c <_Z8FindDemov+0x900>
1000943a:	779a      	strb	r2, [r3, #30]
			b = *s++;
1000943c:	7a0a      	ldrb	r2, [r1, #8]
			if (b != 0) *d = b;
1000943e:	2a00      	cmp	r2, #0
10009440:	d001      	beq.n	10009446 <_Z8FindDemov+0x90a>
10009442:	2036      	movs	r0, #54	; 0x36
10009444:	541a      	strb	r2, [r3, r0]
			b = *s++;
10009446:	7a4a      	ldrb	r2, [r1, #9]
			if (b != 0) *d = b;
10009448:	2a00      	cmp	r2, #0
1000944a:	d001      	beq.n	10009450 <_Z8FindDemov+0x914>
1000944c:	2037      	movs	r0, #55	; 0x37
1000944e:	541a      	strb	r2, [r3, r0]
			b = *s++;
10009450:	7a8a      	ldrb	r2, [r1, #10]
			if (b != 0) *d = b;
10009452:	2a00      	cmp	r2, #0
10009454:	d001      	beq.n	1000945a <_Z8FindDemov+0x91e>
10009456:	2038      	movs	r0, #56	; 0x38
10009458:	541a      	strb	r2, [r3, r0]
			b = *s++;
1000945a:	7aca      	ldrb	r2, [r1, #11]
			if (b != 0) *d = b;
1000945c:	2a00      	cmp	r2, #0
1000945e:	d001      	beq.n	10009464 <_Z8FindDemov+0x928>
10009460:	2039      	movs	r0, #57	; 0x39
10009462:	541a      	strb	r2, [r3, r0]
			b = *s++;
10009464:	7b0a      	ldrb	r2, [r1, #12]
			if (b != 0) *d = b;
10009466:	2a00      	cmp	r2, #0
10009468:	d001      	beq.n	1000946e <_Z8FindDemov+0x932>
1000946a:	2051      	movs	r0, #81	; 0x51
1000946c:	541a      	strb	r2, [r3, r0]
			b = *s++;
1000946e:	7b4a      	ldrb	r2, [r1, #13]
			if (b != 0) *d = b;
10009470:	2a00      	cmp	r2, #0
10009472:	d001      	beq.n	10009478 <_Z8FindDemov+0x93c>
10009474:	2052      	movs	r0, #82	; 0x52
10009476:	541a      	strb	r2, [r3, r0]
			b = *s++;
10009478:	7b8a      	ldrb	r2, [r1, #14]
			if (b != 0) *d = b;
1000947a:	2a00      	cmp	r2, #0
1000947c:	d001      	beq.n	10009482 <_Z8FindDemov+0x946>
1000947e:	2053      	movs	r0, #83	; 0x53
10009480:	541a      	strb	r2, [r3, r0]
			b = *s++;
10009482:	7bca      	ldrb	r2, [r1, #15]
			if (b != 0) *d = b;
10009484:	2a00      	cmp	r2, #0
10009486:	d001      	beq.n	1000948c <_Z8FindDemov+0x950>
10009488:	2154      	movs	r1, #84	; 0x54
1000948a:	545a      	strb	r2, [r3, r1]
	DispBrick(BrickX, BrickY, Brick);
}
1000948c:	b01b      	add	sp, #108	; 0x6c
1000948e:	bcf0      	pop	{r4, r5, r6, r7}
10009490:	46bb      	mov	fp, r7
10009492:	46b2      	mov	sl, r6
10009494:	46a9      	mov	r9, r5
10009496:	46a0      	mov	r8, r4
10009498:	bdf0      	pop	{r4, r5, r6, r7, pc}
	Bool ok = True;
1000949a:	2301      	movs	r3, #1
			if (b != 0)
1000949c:	7861      	ldrb	r1, [r4, #1]
1000949e:	2900      	cmp	r1, #0
100094a0:	d006      	beq.n	100094b0 <_Z8FindDemov+0x974>
				if ((y < 1) || (y >= MAPH-1))
100094a2:	4659      	mov	r1, fp
100094a4:	3901      	subs	r1, #1
100094a6:	2911      	cmp	r1, #17
100094a8:	d801      	bhi.n	100094ae <_Z8FindDemov+0x972>
100094aa:	f000 fbff 	bl	10009cac <_Z8FindDemov+0x1170>
					ok = False;
100094ae:	2300      	movs	r3, #0
			if (b != 0)
100094b0:	78a1      	ldrb	r1, [r4, #2]
100094b2:	2900      	cmp	r1, #0
100094b4:	d101      	bne.n	100094ba <_Z8FindDemov+0x97e>
100094b6:	f7ff fbf7 	bl	10008ca8 <_Z8FindDemov+0x16c>
				if ((y < 1) || (y >= MAPH-1))
100094ba:	4659      	mov	r1, fp
100094bc:	3901      	subs	r1, #1
100094be:	2911      	cmp	r1, #17
100094c0:	d801      	bhi.n	100094c6 <_Z8FindDemov+0x98a>
100094c2:	f000 fbfe 	bl	10009cc2 <_Z8FindDemov+0x1186>
					ok = False;
100094c6:	2300      	movs	r3, #0
100094c8:	f7ff fbee 	bl	10008ca8 <_Z8FindDemov+0x16c>
			b = *s++;
100094cc:	7961      	ldrb	r1, [r4, #5]
			if (b != 0)
100094ce:	2900      	cmp	r1, #0
100094d0:	d100      	bne.n	100094d4 <_Z8FindDemov+0x998>
100094d2:	e3e2      	b.n	10009c9a <_Z8FindDemov+0x115e>
				if ((y < 1) || (y >= MAPH-1))
100094d4:	4659      	mov	r1, fp
100094d6:	2911      	cmp	r1, #17
100094d8:	d900      	bls.n	100094dc <_Z8FindDemov+0x9a0>
100094da:	e3d1      	b.n	10009c80 <_Z8FindDemov+0x1144>
					if (*d != TILE_EMPTY) ok = False;
100094dc:	7f11      	ldrb	r1, [r2, #28]
100094de:	3908      	subs	r1, #8
100094e0:	4248      	negs	r0, r1
100094e2:	4141      	adcs	r1, r0
100094e4:	4249      	negs	r1, r1
100094e6:	400b      	ands	r3, r1
			if (b != 0)
100094e8:	79a1      	ldrb	r1, [r4, #6]
100094ea:	2900      	cmp	r1, #0
100094ec:	d100      	bne.n	100094f0 <_Z8FindDemov+0x9b4>
100094ee:	e3ca      	b.n	10009c86 <_Z8FindDemov+0x114a>
					if (*d != TILE_EMPTY) ok = False;
100094f0:	7f51      	ldrb	r1, [r2, #29]
100094f2:	3908      	subs	r1, #8
100094f4:	4248      	negs	r0, r1
100094f6:	4141      	adcs	r1, r0
100094f8:	4249      	negs	r1, r1
100094fa:	400b      	ands	r3, r1
			if (b != 0)
100094fc:	79e1      	ldrb	r1, [r4, #7]
100094fe:	2900      	cmp	r1, #0
10009500:	d005      	beq.n	1000950e <_Z8FindDemov+0x9d2>
					if (*d != TILE_EMPTY) ok = False;
10009502:	7f91      	ldrb	r1, [r2, #30]
					ok = False;
10009504:	3908      	subs	r1, #8
10009506:	4248      	negs	r0, r1
10009508:	4141      	adcs	r1, r0
1000950a:	4249      	negs	r1, r1
1000950c:	400b      	ands	r3, r1
		y++;
1000950e:	4659      	mov	r1, fp
10009510:	3102      	adds	r1, #2
10009512:	b2c9      	uxtb	r1, r1
10009514:	4688      	mov	r8, r1
			b = *s++;
10009516:	7a21      	ldrb	r1, [r4, #8]
10009518:	9102      	str	r1, [sp, #8]
			if (b != 0)
1000951a:	2900      	cmp	r1, #0
1000951c:	d101      	bne.n	10009522 <_Z8FindDemov+0x9e6>
1000951e:	f7ff fbfb 	bl	10008d18 <_Z8FindDemov+0x1dc>
				if ((y < 1) || (y >= MAPH-1))
10009522:	9901      	ldr	r1, [sp, #4]
10009524:	2911      	cmp	r1, #17
10009526:	d900      	bls.n	1000952a <_Z8FindDemov+0x9ee>
10009528:	e386      	b.n	10009c38 <_Z8FindDemov+0x10fc>
					if (*d != TILE_EMPTY) ok = False;
1000952a:	2136      	movs	r1, #54	; 0x36
1000952c:	5c51      	ldrb	r1, [r2, r1]
1000952e:	3908      	subs	r1, #8
10009530:	4248      	negs	r0, r1
10009532:	4141      	adcs	r1, r0
10009534:	4249      	negs	r1, r1
10009536:	400b      	ands	r3, r1
			if (b != 0)
10009538:	7a61      	ldrb	r1, [r4, #9]
1000953a:	2900      	cmp	r1, #0
1000953c:	d001      	beq.n	10009542 <_Z8FindDemov+0xa06>
1000953e:	f7ff fbf5 	bl	10008d2c <_Z8FindDemov+0x1f0>
10009542:	7aa1      	ldrb	r1, [r4, #10]
10009544:	2900      	cmp	r1, #0
10009546:	d001      	beq.n	1000954c <_Z8FindDemov+0xa10>
10009548:	f7ff fbfc 	bl	10008d44 <_Z8FindDemov+0x208>
1000954c:	7ae1      	ldrb	r1, [r4, #11]
1000954e:	2900      	cmp	r1, #0
10009550:	d001      	beq.n	10009556 <_Z8FindDemov+0xa1a>
10009552:	f7ff fc01 	bl	10008d58 <_Z8FindDemov+0x21c>
			b = *s++;
10009556:	7b21      	ldrb	r1, [r4, #12]
10009558:	9104      	str	r1, [sp, #16]
			if (b != 0)
1000955a:	2900      	cmp	r1, #0
1000955c:	d001      	beq.n	10009562 <_Z8FindDemov+0xa26>
1000955e:	f7ff fc08 	bl	10008d72 <_Z8FindDemov+0x236>
10009562:	7b61      	ldrb	r1, [r4, #13]
10009564:	2900      	cmp	r1, #0
10009566:	d100      	bne.n	1000956a <_Z8FindDemov+0xa2e>
10009568:	e337      	b.n	10009bda <_Z8FindDemov+0x109e>
				if ((y < 1) || (y >= MAPH-1))
1000956a:	4641      	mov	r1, r8
1000956c:	2911      	cmp	r1, #17
1000956e:	d900      	bls.n	10009572 <_Z8FindDemov+0xa36>
10009570:	e41a      	b.n	10008da8 <_Z8FindDemov+0x26c>
					if (*d != TILE_EMPTY) ok = False;
10009572:	2152      	movs	r1, #82	; 0x52
10009574:	5c51      	ldrb	r1, [r2, r1]
10009576:	2908      	cmp	r1, #8
10009578:	d101      	bne.n	1000957e <_Z8FindDemov+0xa42>
1000957a:	f000 fc6b 	bl	10009e54 <_Z8FindDemov+0x1318>
			b = *s++;
1000957e:	7ba3      	ldrb	r3, [r4, #14]
10009580:	9309      	str	r3, [sp, #36]	; 0x24
			if (b != 0)
10009582:	2b00      	cmp	r3, #0
10009584:	d101      	bne.n	1000958a <_Z8FindDemov+0xa4e>
10009586:	f7ff fc0f 	bl	10008da8 <_Z8FindDemov+0x26c>
					if (*d != TILE_EMPTY) ok = False;
1000958a:	2153      	movs	r1, #83	; 0x53
1000958c:	5c51      	ldrb	r1, [r2, r1]
1000958e:	2300      	movs	r3, #0
10009590:	2908      	cmp	r1, #8
10009592:	d001      	beq.n	10009598 <_Z8FindDemov+0xa5c>
10009594:	f7ff fc08 	bl	10008da8 <_Z8FindDemov+0x26c>
10009598:	e32f      	b.n	10009bfa <_Z8FindDemov+0x10be>
			if (b != 0)
1000959a:	9f08      	ldr	r7, [sp, #32]
1000959c:	2f00      	cmp	r7, #0
1000959e:	d100      	bne.n	100095a2 <_Z8FindDemov+0xa66>
100095a0:	e0ee      	b.n	10009780 <_Z8FindDemov+0xc44>
				if ((y < 1) || (y >= MAPH-1))
100095a2:	2811      	cmp	r0, #17
100095a4:	d900      	bls.n	100095a8 <_Z8FindDemov+0xa6c>
100095a6:	e0b7      	b.n	10009718 <_Z8FindDemov+0xbdc>
					if (*d != TILE_EMPTY) ok = False;
100095a8:	4665      	mov	r5, ip
100095aa:	7f2d      	ldrb	r5, [r5, #28]
100095ac:	46a8      	mov	r8, r5
100095ae:	2508      	movs	r5, #8
100095b0:	426d      	negs	r5, r5
100095b2:	46ab      	mov	fp, r5
100095b4:	44d8      	add	r8, fp
100095b6:	4647      	mov	r7, r8
100095b8:	427d      	negs	r5, r7
100095ba:	417d      	adcs	r5, r7
100095bc:	426d      	negs	r5, r5
100095be:	402b      	ands	r3, r5
			if (b != 0)
100095c0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
100095c2:	2d00      	cmp	r5, #0
100095c4:	d100      	bne.n	100095c8 <_Z8FindDemov+0xa8c>
100095c6:	e0ac      	b.n	10009722 <_Z8FindDemov+0xbe6>
					if (*d != TILE_EMPTY) ok = False;
100095c8:	4660      	mov	r0, ip
100095ca:	7f40      	ldrb	r0, [r0, #29]
100095cc:	3808      	subs	r0, #8
100095ce:	0005      	movs	r5, r0
100095d0:	4268      	negs	r0, r5
100095d2:	4168      	adcs	r0, r5
100095d4:	4240      	negs	r0, r0
100095d6:	4003      	ands	r3, r0
			if (b != 0)
100095d8:	79f0      	ldrb	r0, [r6, #7]
100095da:	2800      	cmp	r0, #0
100095dc:	d000      	beq.n	100095e0 <_Z8FindDemov+0xaa4>
100095de:	e5e2      	b.n	100091a6 <_Z8FindDemov+0x66a>
100095e0:	9802      	ldr	r0, [sp, #8]
100095e2:	2800      	cmp	r0, #0
100095e4:	d000      	beq.n	100095e8 <_Z8FindDemov+0xaac>
100095e6:	e5ea      	b.n	100091be <_Z8FindDemov+0x682>
100095e8:	9807      	ldr	r0, [sp, #28]
100095ea:	2800      	cmp	r0, #0
100095ec:	d100      	bne.n	100095f0 <_Z8FindDemov+0xab4>
100095ee:	e0bd      	b.n	1000976c <_Z8FindDemov+0xc30>
				if ((y < 1) || (y >= MAPH-1))
100095f0:	1c88      	adds	r0, r1, #2
100095f2:	b2c0      	uxtb	r0, r0
100095f4:	2811      	cmp	r0, #17
100095f6:	d867      	bhi.n	100096c8 <_Z8FindDemov+0xb8c>
					if (*d != TILE_EMPTY) ok = False;
100095f8:	2537      	movs	r5, #55	; 0x37
100095fa:	4660      	mov	r0, ip
100095fc:	5d40      	ldrb	r0, [r0, r5]
100095fe:	3808      	subs	r0, #8
10009600:	0005      	movs	r5, r0
10009602:	4268      	negs	r0, r5
10009604:	4168      	adcs	r0, r5
10009606:	4240      	negs	r0, r0
10009608:	4003      	ands	r3, r0
			if (b != 0)
1000960a:	9806      	ldr	r0, [sp, #24]
1000960c:	2800      	cmp	r0, #0
1000960e:	d060      	beq.n	100096d2 <_Z8FindDemov+0xb96>
					if (*d != TILE_EMPTY) ok = False;
10009610:	2538      	movs	r5, #56	; 0x38
10009612:	4660      	mov	r0, ip
10009614:	5d40      	ldrb	r0, [r0, r5]
10009616:	3808      	subs	r0, #8
10009618:	0005      	movs	r5, r0
1000961a:	4268      	negs	r0, r5
1000961c:	4168      	adcs	r0, r5
1000961e:	4240      	negs	r0, r0
10009620:	4003      	ands	r3, r0
			if (b != 0)
10009622:	7af0      	ldrb	r0, [r6, #11]
10009624:	2800      	cmp	r0, #0
10009626:	d000      	beq.n	1000962a <_Z8FindDemov+0xaee>
10009628:	e5e2      	b.n	100091f0 <_Z8FindDemov+0x6b4>
1000962a:	9804      	ldr	r0, [sp, #16]
1000962c:	2800      	cmp	r0, #0
1000962e:	d000      	beq.n	10009632 <_Z8FindDemov+0xaf6>
10009630:	e5eb      	b.n	1000920a <_Z8FindDemov+0x6ce>
10009632:	980c      	ldr	r0, [sp, #48]	; 0x30
10009634:	2800      	cmp	r0, #0
10009636:	d100      	bne.n	1000963a <_Z8FindDemov+0xafe>
10009638:	e07c      	b.n	10009734 <_Z8FindDemov+0xbf8>
				if ((y < 1) || (y >= MAPH-1))
1000963a:	1cc8      	adds	r0, r1, #3
1000963c:	b2c0      	uxtb	r0, r0
1000963e:	2811      	cmp	r0, #17
10009640:	d900      	bls.n	10009644 <_Z8FindDemov+0xb08>
10009642:	e601      	b.n	10009248 <_Z8FindDemov+0x70c>
					if (*d != TILE_EMPTY) ok = False;
10009644:	4660      	mov	r0, ip
10009646:	2552      	movs	r5, #82	; 0x52
10009648:	5d40      	ldrb	r0, [r0, r5]
1000964a:	2808      	cmp	r0, #8
1000964c:	d100      	bne.n	10009650 <_Z8FindDemov+0xb14>
1000964e:	e09f      	b.n	10009790 <_Z8FindDemov+0xc54>
			if (b != 0)
10009650:	9b09      	ldr	r3, [sp, #36]	; 0x24
10009652:	2b00      	cmp	r3, #0
10009654:	d100      	bne.n	10009658 <_Z8FindDemov+0xb1c>
10009656:	e5f7      	b.n	10009248 <_Z8FindDemov+0x70c>
					if (*d != TILE_EMPTY) ok = False;
10009658:	2300      	movs	r3, #0
1000965a:	4661      	mov	r1, ip
1000965c:	2053      	movs	r0, #83	; 0x53
1000965e:	5c09      	ldrb	r1, [r1, r0]
10009660:	2908      	cmp	r1, #8
10009662:	d000      	beq.n	10009666 <_Z8FindDemov+0xb2a>
10009664:	e5f0      	b.n	10009248 <_Z8FindDemov+0x70c>
			if (b != 0)
10009666:	7bf1      	ldrb	r1, [r6, #15]
10009668:	2900      	cmp	r1, #0
1000966a:	d000      	beq.n	1000966e <_Z8FindDemov+0xb32>
1000966c:	e5e6      	b.n	1000923c <_Z8FindDemov+0x700>
			while (CheckBrick(BrickX, BrickY+1, Brick)) BrickY++;
1000966e:	2b00      	cmp	r3, #0
10009670:	d100      	bne.n	10009674 <_Z8FindDemov+0xb38>
10009672:	e5e9      	b.n	10009248 <_Z8FindDemov+0x70c>
10009674:	2301      	movs	r3, #1
10009676:	0014      	movs	r4, r2
10009678:	469a      	mov	sl, r3
1000967a:	e543      	b.n	10009104 <_Z8FindDemov+0x5c8>
			if (b != 0)
1000967c:	9b05      	ldr	r3, [sp, #20]
1000967e:	2b00      	cmp	r3, #0
10009680:	d06b      	beq.n	1000975a <_Z8FindDemov+0xc1e>
				if ((y < 1) || (y >= MAPH-1))
10009682:	2911      	cmp	r1, #17
10009684:	d863      	bhi.n	1000974e <_Z8FindDemov+0xc12>
	Bool ok = True;
10009686:	2301      	movs	r3, #1
					if (*d != TILE_EMPTY) ok = False;
10009688:	4667      	mov	r7, ip
1000968a:	787f      	ldrb	r7, [r7, #1]
1000968c:	46b8      	mov	r8, r7
1000968e:	2708      	movs	r7, #8
10009690:	427f      	negs	r7, r7
10009692:	46bb      	mov	fp, r7
10009694:	44d8      	add	r8, fp
10009696:	4645      	mov	r5, r8
10009698:	426f      	negs	r7, r5
1000969a:	416f      	adcs	r7, r5
1000969c:	427d      	negs	r5, r7
1000969e:	402b      	ands	r3, r5
			if (b != 0)
100096a0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
100096a2:	2d00      	cmp	r5, #0
100096a4:	d021      	beq.n	100096ea <_Z8FindDemov+0xbae>
					if (*d != TILE_EMPTY) ok = False;
100096a6:	4665      	mov	r5, ip
100096a8:	78ad      	ldrb	r5, [r5, #2]
100096aa:	46a8      	mov	r8, r5
100096ac:	2508      	movs	r5, #8
100096ae:	426d      	negs	r5, r5
100096b0:	46ab      	mov	fp, r5
100096b2:	44d8      	add	r8, fp
100096b4:	4647      	mov	r7, r8
100096b6:	427d      	negs	r5, r7
100096b8:	417d      	adcs	r5, r7
100096ba:	426d      	negs	r5, r5
100096bc:	402b      	ands	r3, r5
			if (b != 0)
100096be:	78f5      	ldrb	r5, [r6, #3]
100096c0:	2d00      	cmp	r5, #0
100096c2:	d000      	beq.n	100096c6 <_Z8FindDemov+0xb8a>
100096c4:	e545      	b.n	10009152 <_Z8FindDemov+0x616>
100096c6:	e550      	b.n	1000916a <_Z8FindDemov+0x62e>
100096c8:	9806      	ldr	r0, [sp, #24]
					ok = False;
100096ca:	2300      	movs	r3, #0
			if (b != 0)
100096cc:	2800      	cmp	r0, #0
100096ce:	d000      	beq.n	100096d2 <_Z8FindDemov+0xb96>
100096d0:	e597      	b.n	10009202 <_Z8FindDemov+0x6c6>
100096d2:	7af0      	ldrb	r0, [r6, #11]
100096d4:	2800      	cmp	r0, #0
100096d6:	d100      	bne.n	100096da <_Z8FindDemov+0xb9e>
100096d8:	e593      	b.n	10009202 <_Z8FindDemov+0x6c6>
				if ((y < 1) || (y >= MAPH-1))
100096da:	1c88      	adds	r0, r1, #2
100096dc:	b2c0      	uxtb	r0, r0
100096de:	2811      	cmp	r0, #17
100096e0:	d800      	bhi.n	100096e4 <_Z8FindDemov+0xba8>
100096e2:	e585      	b.n	100091f0 <_Z8FindDemov+0x6b4>
					ok = False;
100096e4:	2300      	movs	r3, #0
100096e6:	e58c      	b.n	10009202 <_Z8FindDemov+0x6c6>
	Bool ok = True;
100096e8:	2301      	movs	r3, #1
			if (b != 0)
100096ea:	78f7      	ldrb	r7, [r6, #3]
100096ec:	2f00      	cmp	r7, #0
100096ee:	d100      	bne.n	100096f2 <_Z8FindDemov+0xbb6>
100096f0:	e53b      	b.n	1000916a <_Z8FindDemov+0x62e>
				if ((y < 1) || (y >= MAPH-1))
100096f2:	2911      	cmp	r1, #17
100096f4:	d800      	bhi.n	100096f8 <_Z8FindDemov+0xbbc>
100096f6:	e52c      	b.n	10009152 <_Z8FindDemov+0x616>
					ok = False;
100096f8:	2300      	movs	r3, #0
100096fa:	e536      	b.n	1000916a <_Z8FindDemov+0x62e>
100096fc:	20012765 	.word	0x20012765
10009700:	20012766 	.word	0x20012766
10009704:	2000327c 	.word	0x2000327c
10009708:	20012764 	.word	0x20012764
1000970c:	1000e9f4 	.word	0x1000e9f4
			if (b != 0)
10009710:	9b08      	ldr	r3, [sp, #32]
10009712:	2b00      	cmp	r3, #0
10009714:	d100      	bne.n	10009718 <_Z8FindDemov+0xbdc>
10009716:	e54e      	b.n	100091b6 <_Z8FindDemov+0x67a>
10009718:	9d0a      	ldr	r5, [sp, #40]	; 0x28
					ok = False;
1000971a:	2300      	movs	r3, #0
			if (b != 0)
1000971c:	2d00      	cmp	r5, #0
1000971e:	d000      	beq.n	10009722 <_Z8FindDemov+0xbe6>
10009720:	e549      	b.n	100091b6 <_Z8FindDemov+0x67a>
10009722:	79f7      	ldrb	r7, [r6, #7]
10009724:	2f00      	cmp	r7, #0
10009726:	d100      	bne.n	1000972a <_Z8FindDemov+0xbee>
10009728:	e545      	b.n	100091b6 <_Z8FindDemov+0x67a>
				if ((y < 1) || (y >= MAPH-1))
1000972a:	2811      	cmp	r0, #17
1000972c:	d800      	bhi.n	10009730 <_Z8FindDemov+0xbf4>
1000972e:	e53a      	b.n	100091a6 <_Z8FindDemov+0x66a>
					ok = False;
10009730:	2300      	movs	r3, #0
10009732:	e540      	b.n	100091b6 <_Z8FindDemov+0x67a>
			if (b != 0)
10009734:	9809      	ldr	r0, [sp, #36]	; 0x24
10009736:	2800      	cmp	r0, #0
10009738:	d02e      	beq.n	10009798 <_Z8FindDemov+0xc5c>
				if ((y < 1) || (y >= MAPH-1))
1000973a:	3103      	adds	r1, #3
1000973c:	b2c9      	uxtb	r1, r1
1000973e:	2911      	cmp	r1, #17
10009740:	d900      	bls.n	10009744 <_Z8FindDemov+0xc08>
10009742:	e581      	b.n	10009248 <_Z8FindDemov+0x70c>
10009744:	e789      	b.n	1000965a <_Z8FindDemov+0xb1e>
			if (b != 0)
10009746:	9b05      	ldr	r3, [sp, #20]
10009748:	2b00      	cmp	r3, #0
1000974a:	d100      	bne.n	1000974e <_Z8FindDemov+0xc12>
1000974c:	e50d      	b.n	1000916a <_Z8FindDemov+0x62e>
1000974e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
					ok = False;
10009750:	2300      	movs	r3, #0
			if (b != 0)
10009752:	2d00      	cmp	r5, #0
10009754:	d000      	beq.n	10009758 <_Z8FindDemov+0xc1c>
10009756:	e508      	b.n	1000916a <_Z8FindDemov+0x62e>
10009758:	e7c7      	b.n	100096ea <_Z8FindDemov+0xbae>
1000975a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1000975c:	2b00      	cmp	r3, #0
1000975e:	d0c3      	beq.n	100096e8 <_Z8FindDemov+0xbac>
					ok = False;
10009760:	2300      	movs	r3, #0
				if ((y < 1) || (y >= MAPH-1))
10009762:	2911      	cmp	r1, #17
10009764:	d900      	bls.n	10009768 <_Z8FindDemov+0xc2c>
10009766:	e500      	b.n	1000916a <_Z8FindDemov+0x62e>
	Bool ok = True;
10009768:	3301      	adds	r3, #1
1000976a:	e79c      	b.n	100096a6 <_Z8FindDemov+0xb6a>
			if (b != 0)
1000976c:	9806      	ldr	r0, [sp, #24]
1000976e:	2800      	cmp	r0, #0
10009770:	d0af      	beq.n	100096d2 <_Z8FindDemov+0xb96>
				if ((y < 1) || (y >= MAPH-1))
10009772:	1c88      	adds	r0, r1, #2
10009774:	b2c0      	uxtb	r0, r0
10009776:	2811      	cmp	r0, #17
10009778:	d800      	bhi.n	1000977c <_Z8FindDemov+0xc40>
1000977a:	e749      	b.n	10009610 <_Z8FindDemov+0xad4>
					ok = False;
1000977c:	2300      	movs	r3, #0
1000977e:	e540      	b.n	10009202 <_Z8FindDemov+0x6c6>
			if (b != 0)
10009780:	9d0a      	ldr	r5, [sp, #40]	; 0x28
10009782:	2d00      	cmp	r5, #0
10009784:	d0cd      	beq.n	10009722 <_Z8FindDemov+0xbe6>
				if ((y < 1) || (y >= MAPH-1))
10009786:	2811      	cmp	r0, #17
10009788:	d800      	bhi.n	1000978c <_Z8FindDemov+0xc50>
1000978a:	e71d      	b.n	100095c8 <_Z8FindDemov+0xa8c>
					ok = False;
1000978c:	2300      	movs	r3, #0
1000978e:	e512      	b.n	100091b6 <_Z8FindDemov+0x67a>
			if (b != 0)
10009790:	9809      	ldr	r0, [sp, #36]	; 0x24
10009792:	2800      	cmp	r0, #0
10009794:	d000      	beq.n	10009798 <_Z8FindDemov+0xc5c>
10009796:	e760      	b.n	1000965a <_Z8FindDemov+0xb1e>
10009798:	7bf0      	ldrb	r0, [r6, #15]
1000979a:	2800      	cmp	r0, #0
1000979c:	d100      	bne.n	100097a0 <_Z8FindDemov+0xc64>
1000979e:	e766      	b.n	1000966e <_Z8FindDemov+0xb32>
				if ((y < 1) || (y >= MAPH-1))
100097a0:	3103      	adds	r1, #3
100097a2:	b2c9      	uxtb	r1, r1
100097a4:	2911      	cmp	r1, #17
100097a6:	d800      	bhi.n	100097aa <_Z8FindDemov+0xc6e>
100097a8:	e548      	b.n	1000923c <_Z8FindDemov+0x700>
100097aa:	e54d      	b.n	10009248 <_Z8FindDemov+0x70c>
100097ac:	2234      	movs	r2, #52	; 0x34
100097ae:	466b      	mov	r3, sp
100097b0:	189b      	adds	r3, r3, r2
100097b2:	781a      	ldrb	r2, [r3, #0]
	Bool ok = True;
100097b4:	2301      	movs	r3, #1
			if (b != 0)
100097b6:	9805      	ldr	r0, [sp, #20]
100097b8:	2800      	cmp	r0, #0
100097ba:	d004      	beq.n	100097c6 <_Z8FindDemov+0xc8a>
				if ((y < 1) || (y >= MAPH-1))
100097bc:	1e50      	subs	r0, r2, #1
100097be:	2811      	cmp	r0, #17
100097c0:	d800      	bhi.n	100097c4 <_Z8FindDemov+0xc88>
100097c2:	e198      	b.n	10009af6 <_Z8FindDemov+0xfba>
					ok = False;
100097c4:	2300      	movs	r3, #0
			if (b != 0)
100097c6:	980b      	ldr	r0, [sp, #44]	; 0x2c
100097c8:	2800      	cmp	r0, #0
100097ca:	d004      	beq.n	100097d6 <_Z8FindDemov+0xc9a>
				if ((y < 1) || (y >= MAPH-1))
100097cc:	1e50      	subs	r0, r2, #1
100097ce:	2811      	cmp	r0, #17
100097d0:	d800      	bhi.n	100097d4 <_Z8FindDemov+0xc98>
100097d2:	e581      	b.n	100092d8 <_Z8FindDemov+0x79c>
					ok = False;
100097d4:	2300      	movs	r3, #0
			if (b != 0)
100097d6:	78f0      	ldrb	r0, [r6, #3]
100097d8:	2800      	cmp	r0, #0
100097da:	d100      	bne.n	100097de <_Z8FindDemov+0xca2>
100097dc:	e58b      	b.n	100092f6 <_Z8FindDemov+0x7ba>
				if ((y < 1) || (y >= MAPH-1))
100097de:	1e50      	subs	r0, r2, #1
100097e0:	2811      	cmp	r0, #17
100097e2:	d800      	bhi.n	100097e6 <_Z8FindDemov+0xcaa>
100097e4:	e581      	b.n	100092ea <_Z8FindDemov+0x7ae>
		y++;
100097e6:	1c50      	adds	r0, r2, #1
100097e8:	b2c0      	uxtb	r0, r0
100097ea:	4682      	mov	sl, r0
			if (b != 0)
100097ec:	9803      	ldr	r0, [sp, #12]
					ok = False;
100097ee:	2300      	movs	r3, #0
			if (b != 0)
100097f0:	2800      	cmp	r0, #0
100097f2:	d000      	beq.n	100097f6 <_Z8FindDemov+0xcba>
100097f4:	e586      	b.n	10009304 <_Z8FindDemov+0x7c8>
100097f6:	9808      	ldr	r0, [sp, #32]
100097f8:	2800      	cmp	r0, #0
100097fa:	d100      	bne.n	100097fe <_Z8FindDemov+0xcc2>
100097fc:	e189      	b.n	10009b12 <_Z8FindDemov+0xfd6>
				if ((y < 1) || (y >= MAPH-1))
100097fe:	2a11      	cmp	r2, #17
10009800:	d900      	bls.n	10009804 <_Z8FindDemov+0xcc8>
10009802:	e13d      	b.n	10009a80 <_Z8FindDemov+0xf44>
					if (*d != TILE_EMPTY) ok = False;
10009804:	7f08      	ldrb	r0, [r1, #28]
10009806:	3808      	subs	r0, #8
10009808:	4244      	negs	r4, r0
1000980a:	4160      	adcs	r0, r4
1000980c:	4240      	negs	r0, r0
1000980e:	4003      	ands	r3, r0
			if (b != 0)
10009810:	980a      	ldr	r0, [sp, #40]	; 0x28
10009812:	2800      	cmp	r0, #0
10009814:	d100      	bne.n	10009818 <_Z8FindDemov+0xcdc>
10009816:	e138      	b.n	10009a8a <_Z8FindDemov+0xf4e>
					if (*d != TILE_EMPTY) ok = False;
10009818:	7f48      	ldrb	r0, [r1, #29]
1000981a:	3808      	subs	r0, #8
1000981c:	4244      	negs	r4, r0
1000981e:	4160      	adcs	r0, r4
10009820:	4240      	negs	r0, r0
10009822:	4003      	ands	r3, r0
			if (b != 0)
10009824:	79f0      	ldrb	r0, [r6, #7]
10009826:	2800      	cmp	r0, #0
10009828:	d000      	beq.n	1000982c <_Z8FindDemov+0xcf0>
1000982a:	e57f      	b.n	1000932c <_Z8FindDemov+0x7f0>
		y++;
1000982c:	1c90      	adds	r0, r2, #2
1000982e:	b2c0      	uxtb	r0, r0
10009830:	4680      	mov	r8, r0
			if (b != 0)
10009832:	9802      	ldr	r0, [sp, #8]
10009834:	2800      	cmp	r0, #0
10009836:	d000      	beq.n	1000983a <_Z8FindDemov+0xcfe>
10009838:	e585      	b.n	10009346 <_Z8FindDemov+0x80a>
1000983a:	9807      	ldr	r0, [sp, #28]
1000983c:	2800      	cmp	r0, #0
1000983e:	d100      	bne.n	10009842 <_Z8FindDemov+0xd06>
10009840:	e12c      	b.n	10009a9c <_Z8FindDemov+0xf60>
				if ((y < 1) || (y >= MAPH-1))
10009842:	4650      	mov	r0, sl
10009844:	2811      	cmp	r0, #17
10009846:	d900      	bls.n	1000984a <_Z8FindDemov+0xd0e>
10009848:	e0fd      	b.n	10009a46 <_Z8FindDemov+0xf0a>
					if (*d != TILE_EMPTY) ok = False;
1000984a:	2037      	movs	r0, #55	; 0x37
1000984c:	5c08      	ldrb	r0, [r1, r0]
1000984e:	3808      	subs	r0, #8
10009850:	4244      	negs	r4, r0
10009852:	4160      	adcs	r0, r4
10009854:	4240      	negs	r0, r0
10009856:	4003      	ands	r3, r0
			if (b != 0)
10009858:	9806      	ldr	r0, [sp, #24]
1000985a:	2800      	cmp	r0, #0
1000985c:	d100      	bne.n	10009860 <_Z8FindDemov+0xd24>
1000985e:	e0f7      	b.n	10009a50 <_Z8FindDemov+0xf14>
					if (*d != TILE_EMPTY) ok = False;
10009860:	2038      	movs	r0, #56	; 0x38
10009862:	5c08      	ldrb	r0, [r1, r0]
10009864:	3808      	subs	r0, #8
10009866:	4244      	negs	r4, r0
10009868:	4160      	adcs	r0, r4
1000986a:	4240      	negs	r0, r0
1000986c:	4003      	ands	r3, r0
			if (b != 0)
1000986e:	7af0      	ldrb	r0, [r6, #11]
10009870:	2800      	cmp	r0, #0
10009872:	d000      	beq.n	10009876 <_Z8FindDemov+0xd3a>
10009874:	e57d      	b.n	10009372 <_Z8FindDemov+0x836>
10009876:	9804      	ldr	r0, [sp, #16]
10009878:	2800      	cmp	r0, #0
1000987a:	d000      	beq.n	1000987e <_Z8FindDemov+0xd42>
1000987c:	e584      	b.n	10009388 <_Z8FindDemov+0x84c>
1000987e:	980c      	ldr	r0, [sp, #48]	; 0x30
10009880:	2800      	cmp	r0, #0
10009882:	d100      	bne.n	10009886 <_Z8FindDemov+0xd4a>
10009884:	e12f      	b.n	10009ae6 <_Z8FindDemov+0xfaa>
				if ((y < 1) || (y >= MAPH-1))
10009886:	4640      	mov	r0, r8
10009888:	2811      	cmp	r0, #17
1000988a:	d900      	bls.n	1000988e <_Z8FindDemov+0xd52>
1000988c:	e597      	b.n	100093be <_Z8FindDemov+0x882>
					if (*d != TILE_EMPTY) ok = False;
1000988e:	2052      	movs	r0, #82	; 0x52
10009890:	5c08      	ldrb	r0, [r1, r0]
10009892:	2808      	cmp	r0, #8
10009894:	d100      	bne.n	10009898 <_Z8FindDemov+0xd5c>
10009896:	e14e      	b.n	10009b36 <_Z8FindDemov+0xffa>
			if (b != 0)
10009898:	9b09      	ldr	r3, [sp, #36]	; 0x24
1000989a:	2b00      	cmp	r3, #0
1000989c:	d100      	bne.n	100098a0 <_Z8FindDemov+0xd64>
1000989e:	e58e      	b.n	100093be <_Z8FindDemov+0x882>
					if (*d != TILE_EMPTY) ok = False;
100098a0:	2300      	movs	r3, #0
100098a2:	2053      	movs	r0, #83	; 0x53
100098a4:	5c08      	ldrb	r0, [r1, r0]
100098a6:	2808      	cmp	r0, #8
100098a8:	d000      	beq.n	100098ac <_Z8FindDemov+0xd70>
100098aa:	e588      	b.n	100093be <_Z8FindDemov+0x882>
			if (b != 0)
100098ac:	7bf0      	ldrb	r0, [r6, #15]
100098ae:	2800      	cmp	r0, #0
100098b0:	d000      	beq.n	100098b4 <_Z8FindDemov+0xd78>
100098b2:	e57f      	b.n	100093b4 <_Z8FindDemov+0x878>
			if (!CheckBrick(BrickX+1, BrickY, Brick)) break;
100098b4:	2b00      	cmp	r3, #0
100098b6:	d100      	bne.n	100098ba <_Z8FindDemov+0xd7e>
100098b8:	e581      	b.n	100093be <_Z8FindDemov+0x882>
			BrickX++;
100098ba:	4662      	mov	r2, ip
100098bc:	4bd9      	ldr	r3, [pc, #868]	; (10009c24 <_Z8FindDemov+0x10e8>)
			savex = BrickX;
100098be:	4667      	mov	r7, ip
			BrickX++;
100098c0:	701a      	strb	r2, [r3, #0]
			savex = BrickX;
100098c2:	f7ff fc11 	bl	100090e8 <_Z8FindDemov+0x5ac>
				bestbrick = savebrick;
100098c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
				bestx = savex;
100098c8:	9715      	str	r7, [sp, #84]	; 0x54
				bestbrick = savebrick;
100098ca:	9317      	str	r3, [sp, #92]	; 0x5c
				besty = savey;
100098cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
100098ce:	9013      	str	r0, [sp, #76]	; 0x4c
100098d0:	9316      	str	r3, [sp, #88]	; 0x58
100098d2:	e4d0      	b.n	10009276 <_Z8FindDemov+0x73a>
			if (b != 0)
100098d4:	980c      	ldr	r0, [sp, #48]	; 0x30
100098d6:	2800      	cmp	r0, #0
100098d8:	d100      	bne.n	100098dc <_Z8FindDemov+0xda0>
100098da:	e0e8      	b.n	10009aae <_Z8FindDemov+0xf72>
				if ((y < 1) || (y >= MAPH-1))
100098dc:	4640      	mov	r0, r8
100098de:	2811      	cmp	r0, #17
100098e0:	d901      	bls.n	100098e6 <_Z8FindDemov+0xdaa>
100098e2:	f7ff fbfa 	bl	100090da <_Z8FindDemov+0x59e>
					if (*d != TILE_EMPTY) ok = False;
100098e6:	2052      	movs	r0, #82	; 0x52
100098e8:	5c08      	ldrb	r0, [r1, r0]
100098ea:	2808      	cmp	r0, #8
100098ec:	d100      	bne.n	100098f0 <_Z8FindDemov+0xdb4>
100098ee:	e12f      	b.n	10009b50 <_Z8FindDemov+0x1014>
			if (b != 0)
100098f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
100098f2:	2b00      	cmp	r3, #0
100098f4:	d101      	bne.n	100098fa <_Z8FindDemov+0xdbe>
100098f6:	f7ff fbf0 	bl	100090da <_Z8FindDemov+0x59e>
					if (*d != TILE_EMPTY) ok = False;
100098fa:	2300      	movs	r3, #0
100098fc:	2053      	movs	r0, #83	; 0x53
100098fe:	5c08      	ldrb	r0, [r1, r0]
10009900:	2808      	cmp	r0, #8
10009902:	d101      	bne.n	10009908 <_Z8FindDemov+0xdcc>
10009904:	f7ff fbde 	bl	100090c4 <_Z8FindDemov+0x588>
10009908:	9b12      	ldr	r3, [sp, #72]	; 0x48
1000990a:	2b00      	cmp	r3, #0
1000990c:	d001      	beq.n	10009912 <_Z8FindDemov+0xdd6>
1000990e:	4bc5      	ldr	r3, [pc, #788]	; (10009c24 <_Z8FindDemov+0x10e8>)
10009910:	701f      	strb	r7, [r3, #0]
			savex = BrickX;
10009912:	4bc4      	ldr	r3, [pc, #784]	; (10009c24 <_Z8FindDemov+0x10e8>)
10009914:	781b      	ldrb	r3, [r3, #0]
10009916:	b25b      	sxtb	r3, r3
10009918:	469a      	mov	sl, r3
1000991a:	f7ff fbe4 	bl	100090e6 <_Z8FindDemov+0x5aa>
			if (b != 0)
1000991e:	9807      	ldr	r0, [sp, #28]
10009920:	2800      	cmp	r0, #0
10009922:	d100      	bne.n	10009926 <_Z8FindDemov+0xdea>
10009924:	e0cc      	b.n	10009ac0 <_Z8FindDemov+0xf84>
				if ((y < 1) || (y >= MAPH-1))
10009926:	9801      	ldr	r0, [sp, #4]
10009928:	2811      	cmp	r0, #17
1000992a:	d879      	bhi.n	10009a20 <_Z8FindDemov+0xee4>
					if (*d != TILE_EMPTY) ok = False;
1000992c:	2037      	movs	r0, #55	; 0x37
1000992e:	5c08      	ldrb	r0, [r1, r0]
10009930:	3808      	subs	r0, #8
10009932:	0005      	movs	r5, r0
10009934:	4268      	negs	r0, r5
10009936:	4168      	adcs	r0, r5
10009938:	4240      	negs	r0, r0
1000993a:	4003      	ands	r3, r0
			if (b != 0)
1000993c:	9806      	ldr	r0, [sp, #24]
1000993e:	2800      	cmp	r0, #0
10009940:	d074      	beq.n	10009a2c <_Z8FindDemov+0xef0>
					if (*d != TILE_EMPTY) ok = False;
10009942:	2038      	movs	r0, #56	; 0x38
10009944:	5c08      	ldrb	r0, [r1, r0]
10009946:	3808      	subs	r0, #8
10009948:	0005      	movs	r5, r0
1000994a:	4268      	negs	r0, r5
1000994c:	4168      	adcs	r0, r5
1000994e:	4240      	negs	r0, r0
10009950:	4003      	ands	r3, r0
			if (b != 0)
10009952:	7ae0      	ldrb	r0, [r4, #11]
10009954:	2800      	cmp	r0, #0
10009956:	d001      	beq.n	1000995c <_Z8FindDemov+0xe20>
10009958:	f7ff fb90 	bl	1000907c <_Z8FindDemov+0x540>
1000995c:	f7ff fb96 	bl	1000908c <_Z8FindDemov+0x550>
10009960:	9808      	ldr	r0, [sp, #32]
10009962:	2800      	cmp	r0, #0
10009964:	d100      	bne.n	10009968 <_Z8FindDemov+0xe2c>
10009966:	e0b5      	b.n	10009ad4 <_Z8FindDemov+0xf98>
				if ((y < 1) || (y >= MAPH-1))
10009968:	2e11      	cmp	r6, #17
1000996a:	d847      	bhi.n	100099fc <_Z8FindDemov+0xec0>
					if (*d != TILE_EMPTY) ok = False;
1000996c:	7f08      	ldrb	r0, [r1, #28]
1000996e:	3808      	subs	r0, #8
10009970:	0005      	movs	r5, r0
10009972:	4268      	negs	r0, r5
10009974:	4168      	adcs	r0, r5
10009976:	4240      	negs	r0, r0
10009978:	4003      	ands	r3, r0
			if (b != 0)
1000997a:	980a      	ldr	r0, [sp, #40]	; 0x28
1000997c:	2800      	cmp	r0, #0
1000997e:	d043      	beq.n	10009a08 <_Z8FindDemov+0xecc>
					if (*d != TILE_EMPTY) ok = False;
10009980:	7f48      	ldrb	r0, [r1, #29]
10009982:	3808      	subs	r0, #8
10009984:	0005      	movs	r5, r0
10009986:	4268      	negs	r0, r5
10009988:	4168      	adcs	r0, r5
1000998a:	4240      	negs	r0, r0
1000998c:	4003      	ands	r3, r0
			if (b != 0)
1000998e:	79e0      	ldrb	r0, [r4, #7]
10009990:	2800      	cmp	r0, #0
10009992:	d001      	beq.n	10009998 <_Z8FindDemov+0xe5c>
10009994:	f7ff fb4c 	bl	10009030 <_Z8FindDemov+0x4f4>
10009998:	f7ff fb51 	bl	1000903e <_Z8FindDemov+0x502>
1000999c:	9b05      	ldr	r3, [sp, #20]
1000999e:	2b00      	cmp	r3, #0
100099a0:	d060      	beq.n	10009a64 <_Z8FindDemov+0xf28>
				if ((y < 1) || (y >= MAPH-1))
100099a2:	465b      	mov	r3, fp
100099a4:	2b11      	cmp	r3, #17
100099a6:	d81b      	bhi.n	100099e0 <_Z8FindDemov+0xea4>
100099a8:	9b18      	ldr	r3, [sp, #96]	; 0x60
					if (*d != TILE_EMPTY) ok = False;
100099aa:	7848      	ldrb	r0, [r1, #1]
100099ac:	3808      	subs	r0, #8
100099ae:	0005      	movs	r5, r0
100099b0:	4268      	negs	r0, r5
100099b2:	4168      	adcs	r0, r5
100099b4:	4240      	negs	r0, r0
100099b6:	4003      	ands	r3, r0
			if (b != 0)
100099b8:	980b      	ldr	r0, [sp, #44]	; 0x2c
100099ba:	2800      	cmp	r0, #0
100099bc:	d011      	beq.n	100099e2 <_Z8FindDemov+0xea6>
					if (*d != TILE_EMPTY) ok = False;
100099be:	7888      	ldrb	r0, [r1, #2]
100099c0:	3808      	subs	r0, #8
100099c2:	0005      	movs	r5, r0
100099c4:	4268      	negs	r0, r5
100099c6:	4168      	adcs	r0, r5
100099c8:	4240      	negs	r0, r0
100099ca:	4003      	ands	r3, r0
			if (b != 0)
100099cc:	9814      	ldr	r0, [sp, #80]	; 0x50
100099ce:	2800      	cmp	r0, #0
100099d0:	d001      	beq.n	100099d6 <_Z8FindDemov+0xe9a>
100099d2:	f7ff fb09 	bl	10008fe8 <_Z8FindDemov+0x4ac>
100099d6:	f7ff fb0e 	bl	10008ff6 <_Z8FindDemov+0x4ba>
100099da:	9b05      	ldr	r3, [sp, #20]
100099dc:	2b00      	cmp	r3, #0
100099de:	d041      	beq.n	10009a64 <_Z8FindDemov+0xf28>
					ok = False;
100099e0:	2300      	movs	r3, #0
			if (b != 0)
100099e2:	9814      	ldr	r0, [sp, #80]	; 0x50
100099e4:	2800      	cmp	r0, #0
100099e6:	d101      	bne.n	100099ec <_Z8FindDemov+0xeb0>
100099e8:	f7ff fb05 	bl	10008ff6 <_Z8FindDemov+0x4ba>
				if ((y < 1) || (y >= MAPH-1))
100099ec:	4658      	mov	r0, fp
100099ee:	2811      	cmp	r0, #17
100099f0:	d801      	bhi.n	100099f6 <_Z8FindDemov+0xeba>
100099f2:	f7ff faf9 	bl	10008fe8 <_Z8FindDemov+0x4ac>
					ok = False;
100099f6:	2300      	movs	r3, #0
100099f8:	f7ff fafd 	bl	10008ff6 <_Z8FindDemov+0x4ba>
			if (b != 0)
100099fc:	980a      	ldr	r0, [sp, #40]	; 0x28
					ok = False;
100099fe:	2300      	movs	r3, #0
			if (b != 0)
10009a00:	2800      	cmp	r0, #0
10009a02:	d001      	beq.n	10009a08 <_Z8FindDemov+0xecc>
10009a04:	f7ff fb1b 	bl	1000903e <_Z8FindDemov+0x502>
10009a08:	79e0      	ldrb	r0, [r4, #7]
10009a0a:	2800      	cmp	r0, #0
10009a0c:	d101      	bne.n	10009a12 <_Z8FindDemov+0xed6>
10009a0e:	f7ff fb16 	bl	1000903e <_Z8FindDemov+0x502>
				if ((y < 1) || (y >= MAPH-1))
10009a12:	2e11      	cmp	r6, #17
10009a14:	d801      	bhi.n	10009a1a <_Z8FindDemov+0xede>
10009a16:	f7ff fb0b 	bl	10009030 <_Z8FindDemov+0x4f4>
					ok = False;
10009a1a:	2300      	movs	r3, #0
10009a1c:	f7ff fb0f 	bl	1000903e <_Z8FindDemov+0x502>
			if (b != 0)
10009a20:	9806      	ldr	r0, [sp, #24]
					ok = False;
10009a22:	2300      	movs	r3, #0
			if (b != 0)
10009a24:	2800      	cmp	r0, #0
10009a26:	d001      	beq.n	10009a2c <_Z8FindDemov+0xef0>
10009a28:	f7ff fb30 	bl	1000908c <_Z8FindDemov+0x550>
10009a2c:	7ae0      	ldrb	r0, [r4, #11]
10009a2e:	2800      	cmp	r0, #0
10009a30:	d101      	bne.n	10009a36 <_Z8FindDemov+0xefa>
10009a32:	f7ff fb2b 	bl	1000908c <_Z8FindDemov+0x550>
				if ((y < 1) || (y >= MAPH-1))
10009a36:	9801      	ldr	r0, [sp, #4]
10009a38:	2811      	cmp	r0, #17
10009a3a:	d801      	bhi.n	10009a40 <_Z8FindDemov+0xf04>
10009a3c:	f7ff fb1e 	bl	1000907c <_Z8FindDemov+0x540>
					ok = False;
10009a40:	2300      	movs	r3, #0
10009a42:	f7ff fb23 	bl	1000908c <_Z8FindDemov+0x550>
			if (b != 0)
10009a46:	9806      	ldr	r0, [sp, #24]
					ok = False;
10009a48:	2300      	movs	r3, #0
			if (b != 0)
10009a4a:	2800      	cmp	r0, #0
10009a4c:	d000      	beq.n	10009a50 <_Z8FindDemov+0xf14>
10009a4e:	e497      	b.n	10009380 <_Z8FindDemov+0x844>
10009a50:	7af0      	ldrb	r0, [r6, #11]
10009a52:	2800      	cmp	r0, #0
10009a54:	d100      	bne.n	10009a58 <_Z8FindDemov+0xf1c>
10009a56:	e493      	b.n	10009380 <_Z8FindDemov+0x844>
				if ((y < 1) || (y >= MAPH-1))
10009a58:	4650      	mov	r0, sl
10009a5a:	2811      	cmp	r0, #17
10009a5c:	d800      	bhi.n	10009a60 <_Z8FindDemov+0xf24>
10009a5e:	e488      	b.n	10009372 <_Z8FindDemov+0x836>
					ok = False;
10009a60:	2300      	movs	r3, #0
10009a62:	e48d      	b.n	10009380 <_Z8FindDemov+0x844>
			if (b != 0)
10009a64:	980b      	ldr	r0, [sp, #44]	; 0x2c
10009a66:	9b18      	ldr	r3, [sp, #96]	; 0x60
10009a68:	2800      	cmp	r0, #0
10009a6a:	d0ba      	beq.n	100099e2 <_Z8FindDemov+0xea6>
				if ((y < 1) || (y >= MAPH-1))
10009a6c:	4658      	mov	r0, fp
					ok = False;
10009a6e:	2300      	movs	r3, #0
				if ((y < 1) || (y >= MAPH-1))
10009a70:	2811      	cmp	r0, #17
10009a72:	d8b6      	bhi.n	100099e2 <_Z8FindDemov+0xea6>
10009a74:	9b18      	ldr	r3, [sp, #96]	; 0x60
10009a76:	e7a2      	b.n	100099be <_Z8FindDemov+0xe82>
			if (b != 0)
10009a78:	9b08      	ldr	r3, [sp, #32]
10009a7a:	2b00      	cmp	r3, #0
10009a7c:	d100      	bne.n	10009a80 <_Z8FindDemov+0xf44>
10009a7e:	e45b      	b.n	10009338 <_Z8FindDemov+0x7fc>
10009a80:	980a      	ldr	r0, [sp, #40]	; 0x28
					ok = False;
10009a82:	2300      	movs	r3, #0
			if (b != 0)
10009a84:	2800      	cmp	r0, #0
10009a86:	d000      	beq.n	10009a8a <_Z8FindDemov+0xf4e>
10009a88:	e456      	b.n	10009338 <_Z8FindDemov+0x7fc>
10009a8a:	79f0      	ldrb	r0, [r6, #7]
10009a8c:	2800      	cmp	r0, #0
10009a8e:	d100      	bne.n	10009a92 <_Z8FindDemov+0xf56>
10009a90:	e452      	b.n	10009338 <_Z8FindDemov+0x7fc>
				if ((y < 1) || (y >= MAPH-1))
10009a92:	2a11      	cmp	r2, #17
10009a94:	d800      	bhi.n	10009a98 <_Z8FindDemov+0xf5c>
10009a96:	e449      	b.n	1000932c <_Z8FindDemov+0x7f0>
					ok = False;
10009a98:	2300      	movs	r3, #0
10009a9a:	e44d      	b.n	10009338 <_Z8FindDemov+0x7fc>
			if (b != 0)
10009a9c:	9806      	ldr	r0, [sp, #24]
10009a9e:	2800      	cmp	r0, #0
10009aa0:	d0d6      	beq.n	10009a50 <_Z8FindDemov+0xf14>
				if ((y < 1) || (y >= MAPH-1))
10009aa2:	4650      	mov	r0, sl
10009aa4:	2811      	cmp	r0, #17
10009aa6:	d800      	bhi.n	10009aaa <_Z8FindDemov+0xf6e>
10009aa8:	e6da      	b.n	10009860 <_Z8FindDemov+0xd24>
					ok = False;
10009aaa:	2300      	movs	r3, #0
10009aac:	e468      	b.n	10009380 <_Z8FindDemov+0x844>
			if (b != 0)
10009aae:	9809      	ldr	r0, [sp, #36]	; 0x24
10009ab0:	2800      	cmp	r0, #0
10009ab2:	d051      	beq.n	10009b58 <_Z8FindDemov+0x101c>
				if ((y < 1) || (y >= MAPH-1))
10009ab4:	4640      	mov	r0, r8
10009ab6:	2811      	cmp	r0, #17
10009ab8:	d800      	bhi.n	10009abc <_Z8FindDemov+0xf80>
10009aba:	e71f      	b.n	100098fc <_Z8FindDemov+0xdc0>
10009abc:	f7ff fb0d 	bl	100090da <_Z8FindDemov+0x59e>
			if (b != 0)
10009ac0:	9806      	ldr	r0, [sp, #24]
10009ac2:	2800      	cmp	r0, #0
10009ac4:	d0b2      	beq.n	10009a2c <_Z8FindDemov+0xef0>
				if ((y < 1) || (y >= MAPH-1))
10009ac6:	9801      	ldr	r0, [sp, #4]
10009ac8:	2811      	cmp	r0, #17
10009aca:	d800      	bhi.n	10009ace <_Z8FindDemov+0xf92>
10009acc:	e739      	b.n	10009942 <_Z8FindDemov+0xe06>
					ok = False;
10009ace:	2300      	movs	r3, #0
10009ad0:	f7ff fadc 	bl	1000908c <_Z8FindDemov+0x550>
			if (b != 0)
10009ad4:	980a      	ldr	r0, [sp, #40]	; 0x28
10009ad6:	2800      	cmp	r0, #0
10009ad8:	d096      	beq.n	10009a08 <_Z8FindDemov+0xecc>
				if ((y < 1) || (y >= MAPH-1))
10009ada:	2e11      	cmp	r6, #17
10009adc:	d800      	bhi.n	10009ae0 <_Z8FindDemov+0xfa4>
10009ade:	e74f      	b.n	10009980 <_Z8FindDemov+0xe44>
					ok = False;
10009ae0:	2300      	movs	r3, #0
10009ae2:	f7ff faac 	bl	1000903e <_Z8FindDemov+0x502>
			if (b != 0)
10009ae6:	9809      	ldr	r0, [sp, #36]	; 0x24
10009ae8:	2800      	cmp	r0, #0
10009aea:	d028      	beq.n	10009b3e <_Z8FindDemov+0x1002>
				if ((y < 1) || (y >= MAPH-1))
10009aec:	4640      	mov	r0, r8
10009aee:	2811      	cmp	r0, #17
10009af0:	d900      	bls.n	10009af4 <_Z8FindDemov+0xfb8>
10009af2:	e464      	b.n	100093be <_Z8FindDemov+0x882>
10009af4:	e6d5      	b.n	100098a2 <_Z8FindDemov+0xd66>
					if (*d != TILE_EMPTY) ok = False;
10009af6:	7848      	ldrb	r0, [r1, #1]
10009af8:	3808      	subs	r0, #8
10009afa:	4244      	negs	r4, r0
10009afc:	4160      	adcs	r0, r4
10009afe:	4240      	negs	r0, r0
10009b00:	4003      	ands	r3, r0
			if (b != 0)
10009b02:	980b      	ldr	r0, [sp, #44]	; 0x2c
10009b04:	2800      	cmp	r0, #0
10009b06:	d001      	beq.n	10009b0c <_Z8FindDemov+0xfd0>
10009b08:	f7ff fbe6 	bl	100092d8 <_Z8FindDemov+0x79c>
10009b0c:	e663      	b.n	100097d6 <_Z8FindDemov+0xc9a>
					ok = False;
10009b0e:	2300      	movs	r3, #0
10009b10:	e651      	b.n	100097b6 <_Z8FindDemov+0xc7a>
			if (b != 0)
10009b12:	980a      	ldr	r0, [sp, #40]	; 0x28
10009b14:	2800      	cmp	r0, #0
10009b16:	d0b8      	beq.n	10009a8a <_Z8FindDemov+0xf4e>
				if ((y < 1) || (y >= MAPH-1))
10009b18:	2a11      	cmp	r2, #17
10009b1a:	d800      	bhi.n	10009b1e <_Z8FindDemov+0xfe2>
10009b1c:	e67c      	b.n	10009818 <_Z8FindDemov+0xcdc>
					ok = False;
10009b1e:	2300      	movs	r3, #0
10009b20:	f7ff fc0a 	bl	10009338 <_Z8FindDemov+0x7fc>
		while (CheckBrick(BrickX-1, BrickY, Brick)) BrickX--;
10009b24:	2b00      	cmp	r3, #0
10009b26:	d101      	bne.n	10009b2c <_Z8FindDemov+0xff0>
10009b28:	f7ff fad7 	bl	100090da <_Z8FindDemov+0x59e>
10009b2c:	2301      	movs	r3, #1
10009b2e:	0017      	movs	r7, r2
10009b30:	9312      	str	r3, [sp, #72]	; 0x48
10009b32:	f7ff fa36 	bl	10008fa2 <_Z8FindDemov+0x466>
			if (b != 0)
10009b36:	9809      	ldr	r0, [sp, #36]	; 0x24
10009b38:	2800      	cmp	r0, #0
10009b3a:	d000      	beq.n	10009b3e <_Z8FindDemov+0x1002>
10009b3c:	e6b1      	b.n	100098a2 <_Z8FindDemov+0xd66>
10009b3e:	7bf0      	ldrb	r0, [r6, #15]
10009b40:	2800      	cmp	r0, #0
10009b42:	d100      	bne.n	10009b46 <_Z8FindDemov+0x100a>
10009b44:	e6b6      	b.n	100098b4 <_Z8FindDemov+0xd78>
				if ((y < 1) || (y >= MAPH-1))
10009b46:	4640      	mov	r0, r8
10009b48:	2811      	cmp	r0, #17
10009b4a:	d800      	bhi.n	10009b4e <_Z8FindDemov+0x1012>
10009b4c:	e432      	b.n	100093b4 <_Z8FindDemov+0x878>
10009b4e:	e436      	b.n	100093be <_Z8FindDemov+0x882>
			if (b != 0)
10009b50:	9809      	ldr	r0, [sp, #36]	; 0x24
10009b52:	2800      	cmp	r0, #0
10009b54:	d000      	beq.n	10009b58 <_Z8FindDemov+0x101c>
10009b56:	e6d1      	b.n	100098fc <_Z8FindDemov+0xdc0>
10009b58:	7be0      	ldrb	r0, [r4, #15]
10009b5a:	2800      	cmp	r0, #0
10009b5c:	d0e2      	beq.n	10009b24 <_Z8FindDemov+0xfe8>
				if ((y < 1) || (y >= MAPH-1))
10009b5e:	4640      	mov	r0, r8
10009b60:	2811      	cmp	r0, #17
10009b62:	d801      	bhi.n	10009b68 <_Z8FindDemov+0x102c>
10009b64:	f7ff fab3 	bl	100090ce <_Z8FindDemov+0x592>
10009b68:	f7ff fab7 	bl	100090da <_Z8FindDemov+0x59e>
			if (!CheckBrick(BrickX+1, BrickY, Brick)) break;
10009b6c:	2700      	movs	r7, #0
10009b6e:	482e      	ldr	r0, [pc, #184]	; (10009c28 <_Z8FindDemov+0x10ec>)
10009b70:	f003 fe02 	bl	1000d778 <_ZN7cRandom2U8Ev>
10009b74:	2100      	movs	r1, #0
10009b76:	4b2b      	ldr	r3, [pc, #172]	; (10009c24 <_Z8FindDemov+0x10e8>)
			b = *s++;
10009b78:	4a2c      	ldr	r2, [pc, #176]	; (10009c2c <_Z8FindDemov+0x10f0>)
			if (!CheckBrick(BrickX+1, BrickY, Brick)) break;
10009b7a:	57df      	ldrsb	r7, [r3, r7]
10009b7c:	4b2c      	ldr	r3, [pc, #176]	; (10009c30 <_Z8FindDemov+0x10f4>)
	const u8* s = &BrickTemp[brick*BRICKTEMPSIZE];
10009b7e:	4e2b      	ldr	r6, [pc, #172]	; (10009c2c <_Z8FindDemov+0x10f0>)
			if (!CheckBrick(BrickX+1, BrickY, Brick)) break;
10009b80:	5659      	ldrsb	r1, [r3, r1]
10009b82:	4b2c      	ldr	r3, [pc, #176]	; (10009c34 <_Z8FindDemov+0x10f8>)
10009b84:	910d      	str	r1, [sp, #52]	; 0x34
10009b86:	781b      	ldrb	r3, [r3, #0]
10009b88:	930e      	str	r3, [sp, #56]	; 0x38
	const u8* s = &BrickTemp[brick*BRICKTEMPSIZE];
10009b8a:	011b      	lsls	r3, r3, #4
10009b8c:	469c      	mov	ip, r3
10009b8e:	9310      	str	r3, [sp, #64]	; 0x40
			b = *s++;
10009b90:	5cd3      	ldrb	r3, [r2, r3]
	const u8* s = &BrickTemp[brick*BRICKTEMPSIZE];
10009b92:	4466      	add	r6, ip
			b = *s++;
10009b94:	4699      	mov	r9, r3
10009b96:	7933      	ldrb	r3, [r6, #4]
10009b98:	9303      	str	r3, [sp, #12]
10009b9a:	7973      	ldrb	r3, [r6, #5]
10009b9c:	9308      	str	r3, [sp, #32]
10009b9e:	79b3      	ldrb	r3, [r6, #6]
10009ba0:	930a      	str	r3, [sp, #40]	; 0x28
10009ba2:	7a33      	ldrb	r3, [r6, #8]
10009ba4:	9302      	str	r3, [sp, #8]
10009ba6:	7a73      	ldrb	r3, [r6, #9]
10009ba8:	9307      	str	r3, [sp, #28]
10009baa:	7ab3      	ldrb	r3, [r6, #10]
10009bac:	9306      	str	r3, [sp, #24]
10009bae:	7b33      	ldrb	r3, [r6, #12]
10009bb0:	9304      	str	r3, [sp, #16]
10009bb2:	7b73      	ldrb	r3, [r6, #13]
10009bb4:	930c      	str	r3, [sp, #48]	; 0x30
10009bb6:	7bb3      	ldrb	r3, [r6, #14]
10009bb8:	9309      	str	r3, [sp, #36]	; 0x24
10009bba:	78b3      	ldrb	r3, [r6, #2]
10009bbc:	930b      	str	r3, [sp, #44]	; 0x2c
10009bbe:	7873      	ldrb	r3, [r6, #1]
10009bc0:	9305      	str	r3, [sp, #20]
			if ((score > bestscore) || ((score == bestscore) && (RandU8() < 0x50)))
10009bc2:	284f      	cmp	r0, #79	; 0x4f
10009bc4:	d805      	bhi.n	10009bd2 <_Z8FindDemov+0x1096>
				bestbrick = savebrick;
10009bc6:	9b14      	ldr	r3, [sp, #80]	; 0x50
10009bc8:	9317      	str	r3, [sp, #92]	; 0x5c
				besty = savey;
10009bca:	9b12      	ldr	r3, [sp, #72]	; 0x48
10009bcc:	9316      	str	r3, [sp, #88]	; 0x58
				bestx = savex;
10009bce:	9b11      	ldr	r3, [sp, #68]	; 0x44
10009bd0:	9315      	str	r3, [sp, #84]	; 0x54
10009bd2:	004b      	lsls	r3, r1, #1
10009bd4:	930f      	str	r3, [sp, #60]	; 0x3c
10009bd6:	f7ff fb4e 	bl	10009276 <_Z8FindDemov+0x73a>
			b = *s++;
10009bda:	7ba1      	ldrb	r1, [r4, #14]
10009bdc:	9109      	str	r1, [sp, #36]	; 0x24
			if (b != 0)
10009bde:	2900      	cmp	r1, #0
10009be0:	d100      	bne.n	10009be4 <_Z8FindDemov+0x10a8>
10009be2:	e13d      	b.n	10009e60 <_Z8FindDemov+0x1324>
				if ((y < 1) || (y >= MAPH-1))
10009be4:	4641      	mov	r1, r8
10009be6:	2911      	cmp	r1, #17
10009be8:	d901      	bls.n	10009bee <_Z8FindDemov+0x10b2>
10009bea:	f7ff f8dd 	bl	10008da8 <_Z8FindDemov+0x26c>
					if (*d != TILE_EMPTY) ok = False;
10009bee:	2153      	movs	r1, #83	; 0x53
10009bf0:	5c51      	ldrb	r1, [r2, r1]
10009bf2:	2908      	cmp	r1, #8
10009bf4:	d001      	beq.n	10009bfa <_Z8FindDemov+0x10be>
10009bf6:	f7ff f8d7 	bl	10008da8 <_Z8FindDemov+0x26c>
			b = *s++;
10009bfa:	7be1      	ldrb	r1, [r4, #15]
			if (b != 0)
10009bfc:	2900      	cmp	r1, #0
10009bfe:	d000      	beq.n	10009c02 <_Z8FindDemov+0x10c6>
10009c00:	e13a      	b.n	10009e78 <_Z8FindDemov+0x133c>
	if (res)
10009c02:	2b00      	cmp	r3, #0
10009c04:	d101      	bne.n	10009c0a <_Z8FindDemov+0x10ce>
10009c06:	f7ff f8cf 	bl	10008da8 <_Z8FindDemov+0x26c>
		Brick = brick;
10009c0a:	4b0a      	ldr	r3, [pc, #40]	; (10009c34 <_Z8FindDemov+0x10f8>)
10009c0c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
10009c0e:	701a      	strb	r2, [r3, #0]
				if ((y < 1) || (y >= MAPH-1))
10009c10:	2301      	movs	r3, #1
10009c12:	425b      	negs	r3, r3
10009c14:	469c      	mov	ip, r3
10009c16:	44e3      	add	fp, ip
10009c18:	465b      	mov	r3, fp
10009c1a:	b2db      	uxtb	r3, r3
10009c1c:	469b      	mov	fp, r3
10009c1e:	f7ff f9a8 	bl	10008f72 <_Z8FindDemov+0x436>
10009c22:	46c0      	nop			; (mov r8, r8)
10009c24:	20012765 	.word	0x20012765
10009c28:	20003050 	.word	0x20003050
10009c2c:	1000e9f4 	.word	0x1000e9f4
10009c30:	20012766 	.word	0x20012766
10009c34:	20012764 	.word	0x20012764
			b = *s++;
10009c38:	7a63      	ldrb	r3, [r4, #9]
			if (b != 0)
10009c3a:	2b00      	cmp	r3, #0
10009c3c:	d101      	bne.n	10009c42 <_Z8FindDemov+0x1106>
10009c3e:	f7ff f892 	bl	10008d66 <_Z8FindDemov+0x22a>
			b = *s++;
10009c42:	7aa3      	ldrb	r3, [r4, #10]
			if (b != 0)
10009c44:	2b00      	cmp	r3, #0
10009c46:	d109      	bne.n	10009c5c <_Z8FindDemov+0x1120>
10009c48:	7ae1      	ldrb	r1, [r4, #11]
10009c4a:	2900      	cmp	r1, #0
10009c4c:	d101      	bne.n	10009c52 <_Z8FindDemov+0x1116>
10009c4e:	f7ff f88a 	bl	10008d66 <_Z8FindDemov+0x22a>
				if ((y < 1) || (y >= MAPH-1))
10009c52:	9901      	ldr	r1, [sp, #4]
10009c54:	2911      	cmp	r1, #17
10009c56:	d801      	bhi.n	10009c5c <_Z8FindDemov+0x1120>
10009c58:	f7ff f87e 	bl	10008d58 <_Z8FindDemov+0x21c>
					ok = False;
10009c5c:	2300      	movs	r3, #0
10009c5e:	f7ff f882 	bl	10008d66 <_Z8FindDemov+0x22a>
			if (b != 0)
10009c62:	7aa1      	ldrb	r1, [r4, #10]
10009c64:	2900      	cmp	r1, #0
10009c66:	d0ef      	beq.n	10009c48 <_Z8FindDemov+0x110c>
				if ((y < 1) || (y >= MAPH-1))
10009c68:	9901      	ldr	r1, [sp, #4]
10009c6a:	2911      	cmp	r1, #17
10009c6c:	d801      	bhi.n	10009c72 <_Z8FindDemov+0x1136>
10009c6e:	f7ff f869 	bl	10008d44 <_Z8FindDemov+0x208>
					ok = False;
10009c72:	2300      	movs	r3, #0
10009c74:	f7ff f877 	bl	10008d66 <_Z8FindDemov+0x22a>
			b = *s++;
10009c78:	7963      	ldrb	r3, [r4, #5]
			if (b != 0)
10009c7a:	2b00      	cmp	r3, #0
10009c7c:	d100      	bne.n	10009c80 <_Z8FindDemov+0x1144>
10009c7e:	e446      	b.n	1000950e <_Z8FindDemov+0x9d2>
			b = *s++;
10009c80:	79a3      	ldrb	r3, [r4, #6]
			if (b != 0)
10009c82:	2b00      	cmp	r3, #0
10009c84:	d107      	bne.n	10009c96 <_Z8FindDemov+0x115a>
10009c86:	79e1      	ldrb	r1, [r4, #7]
10009c88:	2900      	cmp	r1, #0
10009c8a:	d100      	bne.n	10009c8e <_Z8FindDemov+0x1152>
10009c8c:	e43f      	b.n	1000950e <_Z8FindDemov+0x9d2>
				if ((y < 1) || (y >= MAPH-1))
10009c8e:	4659      	mov	r1, fp
10009c90:	2911      	cmp	r1, #17
10009c92:	d800      	bhi.n	10009c96 <_Z8FindDemov+0x115a>
10009c94:	e435      	b.n	10009502 <_Z8FindDemov+0x9c6>
					ok = False;
10009c96:	2300      	movs	r3, #0
10009c98:	e439      	b.n	1000950e <_Z8FindDemov+0x9d2>
			if (b != 0)
10009c9a:	79a1      	ldrb	r1, [r4, #6]
10009c9c:	2900      	cmp	r1, #0
10009c9e:	d0f2      	beq.n	10009c86 <_Z8FindDemov+0x114a>
				if ((y < 1) || (y >= MAPH-1))
10009ca0:	4659      	mov	r1, fp
10009ca2:	2911      	cmp	r1, #17
10009ca4:	d800      	bhi.n	10009ca8 <_Z8FindDemov+0x116c>
10009ca6:	e423      	b.n	100094f0 <_Z8FindDemov+0x9b4>
					ok = False;
10009ca8:	2300      	movs	r3, #0
10009caa:	e430      	b.n	1000950e <_Z8FindDemov+0x9d2>
					if (*d != TILE_EMPTY) ok = False;
10009cac:	7851      	ldrb	r1, [r2, #1]
10009cae:	3908      	subs	r1, #8
10009cb0:	4248      	negs	r0, r1
10009cb2:	4141      	adcs	r1, r0
10009cb4:	4249      	negs	r1, r1
10009cb6:	400b      	ands	r3, r1
			if (b != 0)
10009cb8:	78a1      	ldrb	r1, [r4, #2]
10009cba:	2900      	cmp	r1, #0
10009cbc:	d101      	bne.n	10009cc2 <_Z8FindDemov+0x1186>
10009cbe:	f7fe fff3 	bl	10008ca8 <_Z8FindDemov+0x16c>
					if (*d != TILE_EMPTY) ok = False;
10009cc2:	7891      	ldrb	r1, [r2, #2]
10009cc4:	3908      	subs	r1, #8
10009cc6:	4248      	negs	r0, r1
10009cc8:	4141      	adcs	r1, r0
10009cca:	4249      	negs	r1, r1
10009ccc:	400b      	ands	r3, r1
			if (b != 0)
10009cce:	78e1      	ldrb	r1, [r4, #3]
10009cd0:	2900      	cmp	r1, #0
10009cd2:	d101      	bne.n	10009cd8 <_Z8FindDemov+0x119c>
10009cd4:	f7fe fff2 	bl	10008cbc <_Z8FindDemov+0x180>
					if (*d != TILE_EMPTY) ok = False;
10009cd8:	78d1      	ldrb	r1, [r2, #3]
10009cda:	3908      	subs	r1, #8
10009cdc:	4248      	negs	r0, r1
10009cde:	4141      	adcs	r1, r0
10009ce0:	4249      	negs	r1, r1
10009ce2:	400b      	ands	r3, r1
10009ce4:	f7fe ffea 	bl	10008cbc <_Z8FindDemov+0x180>
					ok = False;
10009ce8:	2300      	movs	r3, #0
10009cea:	f7ff fbd7 	bl	1000949c <_Z8FindDemov+0x960>
			b = *s++;
10009cee:	7863      	ldrb	r3, [r4, #1]
			if (b != 0)
10009cf0:	2b00      	cmp	r3, #0
10009cf2:	d100      	bne.n	10009cf6 <_Z8FindDemov+0x11ba>
10009cf4:	e0c7      	b.n	10009e86 <_Z8FindDemov+0x134a>
				if ((y < 1) || (y >= MAPH-1))
10009cf6:	465b      	mov	r3, fp
10009cf8:	2b11      	cmp	r3, #17
10009cfa:	d901      	bls.n	10009d00 <_Z8FindDemov+0x11c4>
10009cfc:	f7ff f879 	bl	10008df2 <_Z8FindDemov+0x2b6>
	Bool ok = True;
10009d00:	2301      	movs	r3, #1
					if (*d != TILE_EMPTY) ok = False;
10009d02:	7851      	ldrb	r1, [r2, #1]
10009d04:	3908      	subs	r1, #8
10009d06:	4248      	negs	r0, r1
10009d08:	4141      	adcs	r1, r0
10009d0a:	4249      	negs	r1, r1
10009d0c:	400b      	ands	r3, r1
			if (b != 0)
10009d0e:	78a1      	ldrb	r1, [r4, #2]
10009d10:	2900      	cmp	r1, #0
10009d12:	d101      	bne.n	10009d18 <_Z8FindDemov+0x11dc>
10009d14:	f7ff f870 	bl	10008df8 <_Z8FindDemov+0x2bc>
					if (*d != TILE_EMPTY) ok = False;
10009d18:	7891      	ldrb	r1, [r2, #2]
10009d1a:	3908      	subs	r1, #8
10009d1c:	4248      	negs	r0, r1
10009d1e:	4141      	adcs	r1, r0
10009d20:	4249      	negs	r1, r1
10009d22:	400b      	ands	r3, r1
			if (b != 0)
10009d24:	78e1      	ldrb	r1, [r4, #3]
10009d26:	2900      	cmp	r1, #0
10009d28:	d005      	beq.n	10009d36 <_Z8FindDemov+0x11fa>
					if (*d != TILE_EMPTY) ok = False;
10009d2a:	78d1      	ldrb	r1, [r2, #3]
					ok = False;
10009d2c:	3908      	subs	r1, #8
10009d2e:	4248      	negs	r0, r1
10009d30:	4141      	adcs	r1, r0
10009d32:	4249      	negs	r1, r1
10009d34:	400b      	ands	r3, r1
			b = *s++;
10009d36:	7921      	ldrb	r1, [r4, #4]
10009d38:	9103      	str	r1, [sp, #12]
			if (b != 0)
10009d3a:	2900      	cmp	r1, #0
10009d3c:	d101      	bne.n	10009d42 <_Z8FindDemov+0x1206>
10009d3e:	f7ff f86c 	bl	10008e1a <_Z8FindDemov+0x2de>
				if ((y < 1) || (y >= MAPH-1))
10009d42:	9901      	ldr	r1, [sp, #4]
10009d44:	2911      	cmp	r1, #17
10009d46:	d900      	bls.n	10009d4a <_Z8FindDemov+0x120e>
10009d48:	e0e0      	b.n	10009f0c <_Z8FindDemov+0x13d0>
					if (*d != TILE_EMPTY) ok = False;
10009d4a:	7ed1      	ldrb	r1, [r2, #27]
10009d4c:	3908      	subs	r1, #8
10009d4e:	4248      	negs	r0, r1
10009d50:	4141      	adcs	r1, r0
10009d52:	4249      	negs	r1, r1
10009d54:	400b      	ands	r3, r1
			if (b != 0)
10009d56:	7961      	ldrb	r1, [r4, #5]
10009d58:	2900      	cmp	r1, #0
10009d5a:	d001      	beq.n	10009d60 <_Z8FindDemov+0x1224>
10009d5c:	f7ff f867 	bl	10008e2e <_Z8FindDemov+0x2f2>
10009d60:	79a1      	ldrb	r1, [r4, #6]
10009d62:	2900      	cmp	r1, #0
10009d64:	d100      	bne.n	10009d68 <_Z8FindDemov+0x122c>
10009d66:	e115      	b.n	10009f94 <_Z8FindDemov+0x1458>
					if (*d != TILE_EMPTY) ok = False;
10009d68:	7f51      	ldrb	r1, [r2, #29]
10009d6a:	3908      	subs	r1, #8
10009d6c:	4248      	negs	r0, r1
10009d6e:	4141      	adcs	r1, r0
10009d70:	4249      	negs	r1, r1
10009d72:	400b      	ands	r3, r1
			if (b != 0)
10009d74:	79e1      	ldrb	r1, [r4, #7]
10009d76:	2900      	cmp	r1, #0
10009d78:	d005      	beq.n	10009d86 <_Z8FindDemov+0x124a>
					if (*d != TILE_EMPTY) ok = False;
10009d7a:	7f91      	ldrb	r1, [r2, #30]
					ok = False;
10009d7c:	3908      	subs	r1, #8
10009d7e:	4248      	negs	r0, r1
10009d80:	4141      	adcs	r1, r0
10009d82:	4249      	negs	r1, r1
10009d84:	400b      	ands	r3, r1
			b = *s++;
10009d86:	7a21      	ldrb	r1, [r4, #8]
10009d88:	9102      	str	r1, [sp, #8]
			if (b != 0)
10009d8a:	2900      	cmp	r1, #0
10009d8c:	d101      	bne.n	10009d92 <_Z8FindDemov+0x1256>
10009d8e:	f7ff f86a 	bl	10008e66 <_Z8FindDemov+0x32a>
				if ((y < 1) || (y >= MAPH-1))
10009d92:	4641      	mov	r1, r8
10009d94:	2911      	cmp	r1, #17
10009d96:	d900      	bls.n	10009d9a <_Z8FindDemov+0x125e>
10009d98:	e0a0      	b.n	10009edc <_Z8FindDemov+0x13a0>
					if (*d != TILE_EMPTY) ok = False;
10009d9a:	2136      	movs	r1, #54	; 0x36
10009d9c:	5c51      	ldrb	r1, [r2, r1]
10009d9e:	3908      	subs	r1, #8
10009da0:	4248      	negs	r0, r1
10009da2:	4141      	adcs	r1, r0
10009da4:	4249      	negs	r1, r1
10009da6:	400b      	ands	r3, r1
			if (b != 0)
10009da8:	7a61      	ldrb	r1, [r4, #9]
10009daa:	2900      	cmp	r1, #0
10009dac:	d001      	beq.n	10009db2 <_Z8FindDemov+0x1276>
10009dae:	f7ff f864 	bl	10008e7a <_Z8FindDemov+0x33e>
10009db2:	7aa1      	ldrb	r1, [r4, #10]
10009db4:	2900      	cmp	r1, #0
10009db6:	d100      	bne.n	10009dba <_Z8FindDemov+0x127e>
10009db8:	e0e7      	b.n	10009f8a <_Z8FindDemov+0x144e>
					if (*d != TILE_EMPTY) ok = False;
10009dba:	2138      	movs	r1, #56	; 0x38
10009dbc:	5c51      	ldrb	r1, [r2, r1]
10009dbe:	3908      	subs	r1, #8
10009dc0:	4248      	negs	r0, r1
10009dc2:	4141      	adcs	r1, r0
10009dc4:	4249      	negs	r1, r1
10009dc6:	400b      	ands	r3, r1
			if (b != 0)
10009dc8:	7ae1      	ldrb	r1, [r4, #11]
10009dca:	2900      	cmp	r1, #0
10009dcc:	d006      	beq.n	10009ddc <_Z8FindDemov+0x12a0>
					if (*d != TILE_EMPTY) ok = False;
10009dce:	2139      	movs	r1, #57	; 0x39
10009dd0:	5c51      	ldrb	r1, [r2, r1]
					ok = False;
10009dd2:	3908      	subs	r1, #8
10009dd4:	4248      	negs	r0, r1
10009dd6:	4141      	adcs	r1, r0
10009dd8:	4249      	negs	r1, r1
10009dda:	400b      	ands	r3, r1
		y++;
10009ddc:	4659      	mov	r1, fp
10009dde:	1cce      	adds	r6, r1, #3
			b = *s++;
10009de0:	7b21      	ldrb	r1, [r4, #12]
		y++;
10009de2:	b2f6      	uxtb	r6, r6
			b = *s++;
10009de4:	9104      	str	r1, [sp, #16]
			if (b != 0)
10009de6:	2900      	cmp	r1, #0
10009de8:	d101      	bne.n	10009dee <_Z8FindDemov+0x12b2>
10009dea:	f7ff f866 	bl	10008eba <_Z8FindDemov+0x37e>
				if ((y < 1) || (y >= MAPH-1))
10009dee:	2e11      	cmp	r6, #17
10009df0:	d901      	bls.n	10009df6 <_Z8FindDemov+0x12ba>
10009df2:	f7ff f883 	bl	10008efc <_Z8FindDemov+0x3c0>
					if (*d != TILE_EMPTY) ok = False;
10009df6:	2151      	movs	r1, #81	; 0x51
10009df8:	5c51      	ldrb	r1, [r2, r1]
10009dfa:	3908      	subs	r1, #8
10009dfc:	4248      	negs	r0, r1
10009dfe:	4141      	adcs	r1, r0
10009e00:	4249      	negs	r1, r1
10009e02:	400b      	ands	r3, r1
			if (b != 0)
10009e04:	7b61      	ldrb	r1, [r4, #13]
10009e06:	2900      	cmp	r1, #0
10009e08:	d001      	beq.n	10009e0e <_Z8FindDemov+0x12d2>
10009e0a:	f7ff f85d 	bl	10008ec8 <_Z8FindDemov+0x38c>
			b = *s++;
10009e0e:	7ba1      	ldrb	r1, [r4, #14]
			if (b != 0)
10009e10:	2900      	cmp	r1, #0
10009e12:	d100      	bne.n	10009e16 <_Z8FindDemov+0x12da>
10009e14:	e0b4      	b.n	10009f80 <_Z8FindDemov+0x1444>
10009e16:	9109      	str	r1, [sp, #36]	; 0x24
					if (*d != TILE_EMPTY) ok = False;
10009e18:	2153      	movs	r1, #83	; 0x53
10009e1a:	5c51      	ldrb	r1, [r2, r1]
10009e1c:	2908      	cmp	r1, #8
10009e1e:	d001      	beq.n	10009e24 <_Z8FindDemov+0x12e8>
10009e20:	f7ff f86c 	bl	10008efc <_Z8FindDemov+0x3c0>
			if (b != 0)
10009e24:	7be1      	ldrb	r1, [r4, #15]
10009e26:	2900      	cmp	r1, #0
10009e28:	d000      	beq.n	10009e2c <_Z8FindDemov+0x12f0>
10009e2a:	e097      	b.n	10009f5c <_Z8FindDemov+0x1420>
	if (res)
10009e2c:	2b00      	cmp	r3, #0
10009e2e:	d101      	bne.n	10009e34 <_Z8FindDemov+0x12f8>
10009e30:	f7ff f864 	bl	10008efc <_Z8FindDemov+0x3c0>
		BrickX = x;
10009e34:	4652      	mov	r2, sl
10009e36:	4b5a      	ldr	r3, [pc, #360]	; (10009fa0 <_Z8FindDemov+0x1464>)
10009e38:	701a      	strb	r2, [r3, #0]
		BrickY = y;
10009e3a:	4b5a      	ldr	r3, [pc, #360]	; (10009fa4 <_Z8FindDemov+0x1468>)
10009e3c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
10009e3e:	701a      	strb	r2, [r3, #0]
		Brick = brick;
10009e40:	4b59      	ldr	r3, [pc, #356]	; (10009fa8 <_Z8FindDemov+0x146c>)
10009e42:	9a0e      	ldr	r2, [sp, #56]	; 0x38
10009e44:	701a      	strb	r2, [r3, #0]
		y++;
10009e46:	9b01      	ldr	r3, [sp, #4]
10009e48:	001d      	movs	r5, r3
10009e4a:	4643      	mov	r3, r8
10009e4c:	46b0      	mov	r8, r6
10009e4e:	9301      	str	r3, [sp, #4]
10009e50:	f7ff f88f 	bl	10008f72 <_Z8FindDemov+0x436>
			b = *s++;
10009e54:	7ba1      	ldrb	r1, [r4, #14]
10009e56:	9109      	str	r1, [sp, #36]	; 0x24
			if (b != 0)
10009e58:	2900      	cmp	r1, #0
10009e5a:	d001      	beq.n	10009e60 <_Z8FindDemov+0x1324>
10009e5c:	f7fe ff9e 	bl	10008d9c <_Z8FindDemov+0x260>
			b = *s++;
10009e60:	7be1      	ldrb	r1, [r4, #15]
10009e62:	9109      	str	r1, [sp, #36]	; 0x24
			if (b != 0)
10009e64:	2900      	cmp	r1, #0
10009e66:	d100      	bne.n	10009e6a <_Z8FindDemov+0x132e>
10009e68:	e6cb      	b.n	10009c02 <_Z8FindDemov+0x10c6>
				if ((y < 1) || (y >= MAPH-1))
10009e6a:	4641      	mov	r1, r8
10009e6c:	2911      	cmp	r1, #17
10009e6e:	d901      	bls.n	10009e74 <_Z8FindDemov+0x1338>
10009e70:	f7fe ff9a 	bl	10008da8 <_Z8FindDemov+0x26c>
10009e74:	2100      	movs	r1, #0
10009e76:	9109      	str	r1, [sp, #36]	; 0x24
					if (*d != TILE_EMPTY) ok = False;
10009e78:	2154      	movs	r1, #84	; 0x54
10009e7a:	5c52      	ldrb	r2, [r2, r1]
10009e7c:	2a08      	cmp	r2, #8
10009e7e:	d001      	beq.n	10009e84 <_Z8FindDemov+0x1348>
10009e80:	f7fe ff92 	bl	10008da8 <_Z8FindDemov+0x26c>
10009e84:	e6bd      	b.n	10009c02 <_Z8FindDemov+0x10c6>
			if (b != 0)
10009e86:	78a1      	ldrb	r1, [r4, #2]
10009e88:	2900      	cmp	r1, #0
10009e8a:	d06e      	beq.n	10009f6a <_Z8FindDemov+0x142e>
				if ((y < 1) || (y >= MAPH-1))
10009e8c:	4659      	mov	r1, fp
10009e8e:	2911      	cmp	r1, #17
10009e90:	d900      	bls.n	10009e94 <_Z8FindDemov+0x1358>
10009e92:	e750      	b.n	10009d36 <_Z8FindDemov+0x11fa>
	Bool ok = True;
10009e94:	2301      	movs	r3, #1
10009e96:	e73f      	b.n	10009d18 <_Z8FindDemov+0x11dc>
					if (*d != TILE_EMPTY) ok = False;
10009e98:	4944      	ldr	r1, [pc, #272]	; (10009fac <_Z8FindDemov+0x1470>)
10009e9a:	5ccb      	ldrb	r3, [r1, r3]
10009e9c:	3b08      	subs	r3, #8
10009e9e:	4259      	negs	r1, r3
10009ea0:	414b      	adcs	r3, r1
			if (b != 0)
10009ea2:	7861      	ldrb	r1, [r4, #1]
	Bool ok = True;
10009ea4:	b2db      	uxtb	r3, r3
			if (b != 0)
10009ea6:	2900      	cmp	r1, #0
10009ea8:	d000      	beq.n	10009eac <_Z8FindDemov+0x1370>
10009eaa:	e72a      	b.n	10009d02 <_Z8FindDemov+0x11c6>
10009eac:	78a1      	ldrb	r1, [r4, #2]
10009eae:	2900      	cmp	r1, #0
10009eb0:	d000      	beq.n	10009eb4 <_Z8FindDemov+0x1378>
10009eb2:	e731      	b.n	10009d18 <_Z8FindDemov+0x11dc>
10009eb4:	78e1      	ldrb	r1, [r4, #3]
10009eb6:	2900      	cmp	r1, #0
10009eb8:	d000      	beq.n	10009ebc <_Z8FindDemov+0x1380>
10009eba:	e736      	b.n	10009d2a <_Z8FindDemov+0x11ee>
10009ebc:	e73b      	b.n	10009d36 <_Z8FindDemov+0x11fa>
			b = *s++;
10009ebe:	7ba1      	ldrb	r1, [r4, #14]
10009ec0:	9109      	str	r1, [sp, #36]	; 0x24
			if (b != 0)
10009ec2:	2900      	cmp	r1, #0
10009ec4:	d03f      	beq.n	10009f46 <_Z8FindDemov+0x140a>
				if ((y < 1) || (y >= MAPH-1))
10009ec6:	2e11      	cmp	r6, #17
10009ec8:	d901      	bls.n	10009ece <_Z8FindDemov+0x1392>
10009eca:	f7ff f817 	bl	10008efc <_Z8FindDemov+0x3c0>
					if (*d != TILE_EMPTY) ok = False;
10009ece:	2153      	movs	r1, #83	; 0x53
10009ed0:	5c51      	ldrb	r1, [r2, r1]
10009ed2:	2908      	cmp	r1, #8
10009ed4:	d001      	beq.n	10009eda <_Z8FindDemov+0x139e>
10009ed6:	f7ff f811 	bl	10008efc <_Z8FindDemov+0x3c0>
10009eda:	e7a3      	b.n	10009e24 <_Z8FindDemov+0x12e8>
			b = *s++;
10009edc:	7a63      	ldrb	r3, [r4, #9]
			if (b != 0)
10009ede:	2b00      	cmp	r3, #0
10009ee0:	d100      	bne.n	10009ee4 <_Z8FindDemov+0x13a8>
10009ee2:	e77b      	b.n	10009ddc <_Z8FindDemov+0x12a0>
			b = *s++;
10009ee4:	7aa3      	ldrb	r3, [r4, #10]
			if (b != 0)
10009ee6:	2b00      	cmp	r3, #0
10009ee8:	d101      	bne.n	10009eee <_Z8FindDemov+0x13b2>
10009eea:	f7fe ffd2 	bl	10008e92 <_Z8FindDemov+0x356>
					ok = False;
10009eee:	2300      	movs	r3, #0
10009ef0:	f7fe ffda 	bl	10008ea8 <_Z8FindDemov+0x36c>
			if (b != 0)
10009ef4:	7aa1      	ldrb	r1, [r4, #10]
10009ef6:	2900      	cmp	r1, #0
10009ef8:	d101      	bne.n	10009efe <_Z8FindDemov+0x13c2>
10009efa:	f7fe ffca 	bl	10008e92 <_Z8FindDemov+0x356>
				if ((y < 1) || (y >= MAPH-1))
10009efe:	4641      	mov	r1, r8
10009f00:	2911      	cmp	r1, #17
10009f02:	d800      	bhi.n	10009f06 <_Z8FindDemov+0x13ca>
10009f04:	e759      	b.n	10009dba <_Z8FindDemov+0x127e>
					ok = False;
10009f06:	2300      	movs	r3, #0
10009f08:	f7fe ffce 	bl	10008ea8 <_Z8FindDemov+0x36c>
			b = *s++;
10009f0c:	7963      	ldrb	r3, [r4, #5]
			if (b != 0)
10009f0e:	2b00      	cmp	r3, #0
10009f10:	d100      	bne.n	10009f14 <_Z8FindDemov+0x13d8>
10009f12:	e738      	b.n	10009d86 <_Z8FindDemov+0x124a>
			b = *s++;
10009f14:	79a3      	ldrb	r3, [r4, #6]
			if (b != 0)
10009f16:	2b00      	cmp	r3, #0
10009f18:	d101      	bne.n	10009f1e <_Z8FindDemov+0x13e2>
10009f1a:	f7fe ff93 	bl	10008e44 <_Z8FindDemov+0x308>
					ok = False;
10009f1e:	2300      	movs	r3, #0
10009f20:	f7fe ff9b 	bl	10008e5a <_Z8FindDemov+0x31e>
			if (b != 0)
10009f24:	79a1      	ldrb	r1, [r4, #6]
10009f26:	2900      	cmp	r1, #0
10009f28:	d101      	bne.n	10009f2e <_Z8FindDemov+0x13f2>
10009f2a:	f7fe ff8b 	bl	10008e44 <_Z8FindDemov+0x308>
				if ((y < 1) || (y >= MAPH-1))
10009f2e:	9901      	ldr	r1, [sp, #4]
10009f30:	2911      	cmp	r1, #17
10009f32:	d800      	bhi.n	10009f36 <_Z8FindDemov+0x13fa>
10009f34:	e718      	b.n	10009d68 <_Z8FindDemov+0x122c>
					ok = False;
10009f36:	2300      	movs	r3, #0
10009f38:	f7fe ff8f 	bl	10008e5a <_Z8FindDemov+0x31e>
			b = *s++;
10009f3c:	7ba1      	ldrb	r1, [r4, #14]
10009f3e:	9109      	str	r1, [sp, #36]	; 0x24
			if (b != 0)
10009f40:	2900      	cmp	r1, #0
10009f42:	d000      	beq.n	10009f46 <_Z8FindDemov+0x140a>
10009f44:	e768      	b.n	10009e18 <_Z8FindDemov+0x12dc>
			b = *s++;
10009f46:	7be1      	ldrb	r1, [r4, #15]
10009f48:	9109      	str	r1, [sp, #36]	; 0x24
			if (b != 0)
10009f4a:	2900      	cmp	r1, #0
10009f4c:	d100      	bne.n	10009f50 <_Z8FindDemov+0x1414>
10009f4e:	e76d      	b.n	10009e2c <_Z8FindDemov+0x12f0>
				if ((y < 1) || (y >= MAPH-1))
10009f50:	2e11      	cmp	r6, #17
10009f52:	d901      	bls.n	10009f58 <_Z8FindDemov+0x141c>
10009f54:	f7fe ffd2 	bl	10008efc <_Z8FindDemov+0x3c0>
			if (b != 0)
10009f58:	2100      	movs	r1, #0
10009f5a:	9109      	str	r1, [sp, #36]	; 0x24
					if (*d != TILE_EMPTY) ok = False;
10009f5c:	2154      	movs	r1, #84	; 0x54
10009f5e:	5c52      	ldrb	r2, [r2, r1]
10009f60:	2a08      	cmp	r2, #8
10009f62:	d001      	beq.n	10009f68 <_Z8FindDemov+0x142c>
10009f64:	f7fe ffca 	bl	10008efc <_Z8FindDemov+0x3c0>
10009f68:	e760      	b.n	10009e2c <_Z8FindDemov+0x12f0>
	Bool ok = True;
10009f6a:	2301      	movs	r3, #1
10009f6c:	f7fe ff44 	bl	10008df8 <_Z8FindDemov+0x2bc>
					if (*d != TILE_EMPTY) ok = False;
10009f70:	2153      	movs	r1, #83	; 0x53
10009f72:	5c51      	ldrb	r1, [r2, r1]
10009f74:	2300      	movs	r3, #0
10009f76:	2908      	cmp	r1, #8
10009f78:	d001      	beq.n	10009f7e <_Z8FindDemov+0x1442>
10009f7a:	f7fe ffbf 	bl	10008efc <_Z8FindDemov+0x3c0>
10009f7e:	e751      	b.n	10009e24 <_Z8FindDemov+0x12e8>
			b = *s++;
10009f80:	7be1      	ldrb	r1, [r4, #15]
10009f82:	9109      	str	r1, [sp, #36]	; 0x24
			if (b != 0)
10009f84:	2900      	cmp	r1, #0
10009f86:	d1e7      	bne.n	10009f58 <_Z8FindDemov+0x141c>
10009f88:	e750      	b.n	10009e2c <_Z8FindDemov+0x12f0>
10009f8a:	7ae1      	ldrb	r1, [r4, #11]
10009f8c:	2900      	cmp	r1, #0
10009f8e:	d000      	beq.n	10009f92 <_Z8FindDemov+0x1456>
10009f90:	e71d      	b.n	10009dce <_Z8FindDemov+0x1292>
10009f92:	e723      	b.n	10009ddc <_Z8FindDemov+0x12a0>
10009f94:	79e1      	ldrb	r1, [r4, #7]
10009f96:	2900      	cmp	r1, #0
10009f98:	d000      	beq.n	10009f9c <_Z8FindDemov+0x1460>
10009f9a:	e6ee      	b.n	10009d7a <_Z8FindDemov+0x123e>
10009f9c:	e6f3      	b.n	10009d86 <_Z8FindDemov+0x124a>
10009f9e:	46c0      	nop			; (mov r8, r8)
10009fa0:	20012765 	.word	0x20012765
10009fa4:	20012766 	.word	0x20012766
10009fa8:	20012764 	.word	0x20012764
10009fac:	2000327c 	.word	0x2000327c

10009fb0 <_Z8PlayDemov>:

// demo mode
void PlayDemo()
{
10009fb0:	b5f0      	push	{r4, r5, r6, r7, lr}
10009fb2:	46de      	mov	lr, fp
10009fb4:	4657      	mov	r7, sl
10009fb6:	464e      	mov	r6, r9
10009fb8:	4645      	mov	r5, r8
	// start demo moe
	Demo = True;
10009fba:	2401      	movs	r4, #1
{
10009fbc:	b5e0      	push	{r5, r6, r7, lr}
	Demo = True;
10009fbe:	4bd2      	ldr	r3, [pc, #840]	; (1000a308 <_Z8PlayDemov+0x358>)
{
10009fc0:	b093      	sub	sp, #76	; 0x4c
	Demo = True;
10009fc2:	701c      	strb	r4, [r3, #0]
	
	// start new game
	NewGame();
10009fc4:	f7fd f84c 	bl	10007060 <_Z7NewGamev>
10009fc8:	23d0      	movs	r3, #208	; 0xd0
10009fca:	061b      	lsls	r3, r3, #24
10009fcc:	685b      	ldr	r3, [r3, #4]
10009fce:	0d5b      	lsrs	r3, r3, #21
	if (!gpio_get(PB_RT))		// RIGHT
10009fd0:	421c      	tst	r4, r3
10009fd2:	d101      	bne.n	10009fd8 <_Z8PlayDemov+0x28>
10009fd4:	f000 fc5b 	bl	1000a88e <_Z8PlayDemov+0x8de>
			if (b != 0) *d = TILE_EMPTY;
10009fd8:	3407      	adds	r4, #7
10009fda:	23d0      	movs	r3, #208	; 0xd0
10009fdc:	061b      	lsls	r3, r3, #24
10009fde:	685a      	ldr	r2, [r3, #4]
10009fe0:	2101      	movs	r1, #1
	else if (!gpio_get(PB_UP))	// ROTATE=UP
10009fe2:	03d2      	lsls	r2, r2, #15
10009fe4:	d401      	bmi.n	10009fea <_Z8PlayDemov+0x3a>
10009fe6:	f000 fc52 	bl	1000a88e <_Z8PlayDemov+0x8de>
10009fea:	685a      	ldr	r2, [r3, #4]
10009fec:	0d12      	lsrs	r2, r2, #20
	else if (!gpio_get(PB_LT))	// LEFT
10009fee:	4211      	tst	r1, r2
10009ff0:	d101      	bne.n	10009ff6 <_Z8PlayDemov+0x46>
10009ff2:	f000 fc4c 	bl	1000a88e <_Z8PlayDemov+0x8de>
10009ff6:	685a      	ldr	r2, [r3, #4]
10009ff8:	0c92      	lsrs	r2, r2, #18
	else if (!gpio_get(PB_DN))	// DROP=DOWN
10009ffa:	4211      	tst	r1, r2
10009ffc:	d101      	bne.n	1000a002 <_Z8PlayDemov+0x52>
10009ffe:	f000 fc46 	bl	1000a88e <_Z8PlayDemov+0x8de>
1000a002:	685b      	ldr	r3, [r3, #4]
1000a004:	0c5b      	lsrs	r3, r3, #17
	else if (!gpio_get(PB_FR))	// PAUSE=FIRE
1000a006:	4219      	tst	r1, r3
1000a008:	d101      	bne.n	1000a00e <_Z8PlayDemov+0x5e>
1000a00a:	f000 fc40 	bl	1000a88e <_Z8PlayDemov+0x8de>
	char c = getchar_timeout_us(0);
1000a00e:	2000      	movs	r0, #0
1000a010:	f7f7 ffe6 	bl	10001fe0 <getchar_timeout_us>

	// game loop
	while (True)
	{
		// break
		if (GetChar() != 0) break;
1000a014:	1e43      	subs	r3, r0, #1
1000a016:	b2db      	uxtb	r3, r3
1000a018:	2bfd      	cmp	r3, #253	; 0xfd
1000a01a:	d801      	bhi.n	1000a020 <_Z8PlayDemov+0x70>
1000a01c:	f000 fc3a 	bl	1000a894 <_Z8PlayDemov+0x8e4>

		// find demo move
		FindDemo();
1000a020:	f7fe fd8c 	bl	10008b3c <_Z8FindDemov>

		// display new brick
		sleep_ms(200);
1000a024:	20c8      	movs	r0, #200	; 0xc8
1000a026:	f7f8 fd57 	bl	10002ad8 <sleep_ms>
1000a02a:	4bb8      	ldr	r3, [pc, #736]	; (1000a30c <_Z8PlayDemov+0x35c>)
1000a02c:	469b      	mov	fp, r3

		// move brick down
		while (True)
		{
			// delay
			sleep_ms(5*TIMEDELAY);
1000a02e:	2032      	movs	r0, #50	; 0x32
1000a030:	f7f8 fd52 	bl	10002ad8 <sleep_ms>

			// clear current brick
			ClearBrick(BrickX, BrickY, Brick);
1000a034:	4bb6      	ldr	r3, [pc, #728]	; (1000a310 <_Z8PlayDemov+0x360>)
	u8* d = &Board[x + y*MAPW];
1000a036:	49b7      	ldr	r1, [pc, #732]	; (1000a314 <_Z8PlayDemov+0x364>)
			ClearBrick(BrickX, BrickY, Brick);
1000a038:	781b      	ldrb	r3, [r3, #0]
	u8* d = &Board[x + y*MAPW];
1000a03a:	7809      	ldrb	r1, [r1, #0]
			ClearBrick(BrickX, BrickY, Brick);
1000a03c:	b25b      	sxtb	r3, r3
	u8* d = &Board[x + y*MAPW];
1000a03e:	0058      	lsls	r0, r3, #1
1000a040:	18c0      	adds	r0, r0, r3
1000a042:	00c5      	lsls	r5, r0, #3
1000a044:	1940      	adds	r0, r0, r5
1000a046:	b249      	sxtb	r1, r1
1000a048:	1840      	adds	r0, r0, r1
1000a04a:	0005      	movs	r5, r0
	const u8* s = &BrickTemp[brick*BRICKTEMPSIZE];
1000a04c:	4ab2      	ldr	r2, [pc, #712]	; (1000a318 <_Z8PlayDemov+0x368>)
			b = *s++;
1000a04e:	4fb3      	ldr	r7, [pc, #716]	; (1000a31c <_Z8PlayDemov+0x36c>)
	const u8* s = &BrickTemp[brick*BRICKTEMPSIZE];
1000a050:	7816      	ldrb	r6, [r2, #0]
1000a052:	4ab2      	ldr	r2, [pc, #712]	; (1000a31c <_Z8PlayDemov+0x36c>)
1000a054:	0136      	lsls	r6, r6, #4
1000a056:	1992      	adds	r2, r2, r6
			b = *s++;
1000a058:	5dbe      	ldrb	r6, [r7, r6]
	u8* d = &Board[x + y*MAPW];
1000a05a:	9011      	str	r0, [sp, #68]	; 0x44
1000a05c:	445d      	add	r5, fp
			if (b != 0) *d = TILE_EMPTY;
1000a05e:	2e00      	cmp	r6, #0
1000a060:	d001      	beq.n	1000a066 <_Z8PlayDemov+0xb6>
1000a062:	465f      	mov	r7, fp
1000a064:	543c      	strb	r4, [r7, r0]
			b = *s++;
1000a066:	7850      	ldrb	r0, [r2, #1]
1000a068:	9003      	str	r0, [sp, #12]
			if (b != 0) *d = TILE_EMPTY;
1000a06a:	2800      	cmp	r0, #0
1000a06c:	d000      	beq.n	1000a070 <_Z8PlayDemov+0xc0>
1000a06e:	706c      	strb	r4, [r5, #1]
			b = *s++;
1000a070:	7890      	ldrb	r0, [r2, #2]
1000a072:	9006      	str	r0, [sp, #24]
			if (b != 0) *d = TILE_EMPTY;
1000a074:	2800      	cmp	r0, #0
1000a076:	d000      	beq.n	1000a07a <_Z8PlayDemov+0xca>
1000a078:	70ac      	strb	r4, [r5, #2]
			b = *s++;
1000a07a:	78d0      	ldrb	r0, [r2, #3]
1000a07c:	900a      	str	r0, [sp, #40]	; 0x28
			if (b != 0) *d = TILE_EMPTY;
1000a07e:	2800      	cmp	r0, #0
1000a080:	d000      	beq.n	1000a084 <_Z8PlayDemov+0xd4>
1000a082:	70ec      	strb	r4, [r5, #3]
			b = *s++;
1000a084:	7910      	ldrb	r0, [r2, #4]
1000a086:	9001      	str	r0, [sp, #4]
			if (b != 0) *d = TILE_EMPTY;
1000a088:	2800      	cmp	r0, #0
1000a08a:	d000      	beq.n	1000a08e <_Z8PlayDemov+0xde>
1000a08c:	76ec      	strb	r4, [r5, #27]
			b = *s++;
1000a08e:	7950      	ldrb	r0, [r2, #5]
1000a090:	9004      	str	r0, [sp, #16]
			if (b != 0) *d = TILE_EMPTY;
1000a092:	2800      	cmp	r0, #0
1000a094:	d000      	beq.n	1000a098 <_Z8PlayDemov+0xe8>
1000a096:	772c      	strb	r4, [r5, #28]
			b = *s++;
1000a098:	7990      	ldrb	r0, [r2, #6]
1000a09a:	9007      	str	r0, [sp, #28]
			if (b != 0) *d = TILE_EMPTY;
1000a09c:	2800      	cmp	r0, #0
1000a09e:	d000      	beq.n	1000a0a2 <_Z8PlayDemov+0xf2>
1000a0a0:	776c      	strb	r4, [r5, #29]
			b = *s++;
1000a0a2:	79d0      	ldrb	r0, [r2, #7]
1000a0a4:	900b      	str	r0, [sp, #44]	; 0x2c
			if (b != 0) *d = TILE_EMPTY;
1000a0a6:	2800      	cmp	r0, #0
1000a0a8:	d000      	beq.n	1000a0ac <_Z8PlayDemov+0xfc>
1000a0aa:	77ac      	strb	r4, [r5, #30]
			b = *s++;
1000a0ac:	7a10      	ldrb	r0, [r2, #8]
1000a0ae:	9002      	str	r0, [sp, #8]
			if (b != 0) *d = TILE_EMPTY;
1000a0b0:	2800      	cmp	r0, #0
1000a0b2:	d001      	beq.n	1000a0b8 <_Z8PlayDemov+0x108>
1000a0b4:	2036      	movs	r0, #54	; 0x36
1000a0b6:	542c      	strb	r4, [r5, r0]
			b = *s++;
1000a0b8:	7a50      	ldrb	r0, [r2, #9]
1000a0ba:	9005      	str	r0, [sp, #20]
			if (b != 0) *d = TILE_EMPTY;
1000a0bc:	2800      	cmp	r0, #0
1000a0be:	d001      	beq.n	1000a0c4 <_Z8PlayDemov+0x114>
1000a0c0:	2037      	movs	r0, #55	; 0x37
1000a0c2:	542c      	strb	r4, [r5, r0]
			b = *s++;
1000a0c4:	7a90      	ldrb	r0, [r2, #10]
1000a0c6:	9008      	str	r0, [sp, #32]
			if (b != 0) *d = TILE_EMPTY;
1000a0c8:	2800      	cmp	r0, #0
1000a0ca:	d001      	beq.n	1000a0d0 <_Z8PlayDemov+0x120>
1000a0cc:	2038      	movs	r0, #56	; 0x38
1000a0ce:	542c      	strb	r4, [r5, r0]
			b = *s++;
1000a0d0:	7ad0      	ldrb	r0, [r2, #11]
1000a0d2:	900c      	str	r0, [sp, #48]	; 0x30
			if (b != 0) *d = TILE_EMPTY;
1000a0d4:	2800      	cmp	r0, #0
1000a0d6:	d001      	beq.n	1000a0dc <_Z8PlayDemov+0x12c>
1000a0d8:	2039      	movs	r0, #57	; 0x39
1000a0da:	542c      	strb	r4, [r5, r0]
			b = *s++;
1000a0dc:	7b17      	ldrb	r7, [r2, #12]
			if (b != 0) *d = TILE_EMPTY;
1000a0de:	2f00      	cmp	r7, #0
1000a0e0:	d001      	beq.n	1000a0e6 <_Z8PlayDemov+0x136>
1000a0e2:	2051      	movs	r0, #81	; 0x51
1000a0e4:	542c      	strb	r4, [r5, r0]
			b = *s++;
1000a0e6:	7b50      	ldrb	r0, [r2, #13]
1000a0e8:	9009      	str	r0, [sp, #36]	; 0x24
			if (b != 0) *d = TILE_EMPTY;
1000a0ea:	2800      	cmp	r0, #0
1000a0ec:	d001      	beq.n	1000a0f2 <_Z8PlayDemov+0x142>
1000a0ee:	2052      	movs	r0, #82	; 0x52
1000a0f0:	542c      	strb	r4, [r5, r0]
			b = *s++;
1000a0f2:	7b90      	ldrb	r0, [r2, #14]
1000a0f4:	900d      	str	r0, [sp, #52]	; 0x34
			if (b != 0) *d = TILE_EMPTY;
1000a0f6:	2800      	cmp	r0, #0
1000a0f8:	d001      	beq.n	1000a0fe <_Z8PlayDemov+0x14e>
1000a0fa:	2053      	movs	r0, #83	; 0x53
1000a0fc:	542c      	strb	r4, [r5, r0]
			b = *s++;
1000a0fe:	7bd2      	ldrb	r2, [r2, #15]
1000a100:	920e      	str	r2, [sp, #56]	; 0x38
			if (b != 0) *d = TILE_EMPTY;
1000a102:	2a00      	cmp	r2, #0
1000a104:	d001      	beq.n	1000a10a <_Z8PlayDemov+0x15a>
1000a106:	2254      	movs	r2, #84	; 0x54
1000a108:	54ac      	strb	r4, [r5, r2]

			// check new position
			if (!CheckBrick(BrickX, BrickY+1, Brick)) break;
1000a10a:	b2db      	uxtb	r3, r3
1000a10c:	1c58      	adds	r0, r3, #1
1000a10e:	9300      	str	r3, [sp, #0]
1000a110:	b243      	sxtb	r3, r0
	u8* d = &Board[x + y*MAPW];
1000a112:	469c      	mov	ip, r3
			if (!CheckBrick(BrickX, BrickY+1, Brick)) break;
1000a114:	b2c2      	uxtb	r2, r0
1000a116:	4690      	mov	r8, r2
	u8* d = &Board[x + y*MAPW];
1000a118:	005a      	lsls	r2, r3, #1
1000a11a:	4462      	add	r2, ip
1000a11c:	00d0      	lsls	r0, r2, #3
1000a11e:	4684      	mov	ip, r0
1000a120:	4462      	add	r2, ip
1000a122:	4692      	mov	sl, r2
1000a124:	465a      	mov	r2, fp
1000a126:	448a      	add	sl, r1
			if (!CheckBrick(BrickX, BrickY+1, Brick)) break;
1000a128:	9310      	str	r3, [sp, #64]	; 0x40
	u8* d = &Board[x + y*MAPW];
1000a12a:	4452      	add	r2, sl
			if (b != 0)
1000a12c:	2e00      	cmp	r6, #0
1000a12e:	d100      	bne.n	1000a132 <_Z8PlayDemov+0x182>
1000a130:	e20b      	b.n	1000a54a <_Z8PlayDemov+0x59a>
				if ((y < 1) || (y >= MAPH-1))
1000a132:	9b00      	ldr	r3, [sp, #0]
1000a134:	2b11      	cmp	r3, #17
1000a136:	d900      	bls.n	1000a13a <_Z8PlayDemov+0x18a>
1000a138:	e294      	b.n	1000a664 <_Z8PlayDemov+0x6b4>
					if (*d != TILE_EMPTY) ok = False;
1000a13a:	4650      	mov	r0, sl
1000a13c:	4659      	mov	r1, fp
1000a13e:	5c09      	ldrb	r1, [r1, r0]
1000a140:	3908      	subs	r1, #8
1000a142:	0008      	movs	r0, r1
1000a144:	4241      	negs	r1, r0
1000a146:	4141      	adcs	r1, r0
			if (b != 0)
1000a148:	9803      	ldr	r0, [sp, #12]
	Bool ok = True;
1000a14a:	b2c9      	uxtb	r1, r1
			if (b != 0)
1000a14c:	2800      	cmp	r0, #0
1000a14e:	d000      	beq.n	1000a152 <_Z8PlayDemov+0x1a2>
1000a150:	e258      	b.n	1000a604 <_Z8PlayDemov+0x654>
1000a152:	9b06      	ldr	r3, [sp, #24]
1000a154:	2b00      	cmp	r3, #0
1000a156:	d000      	beq.n	1000a15a <_Z8PlayDemov+0x1aa>
1000a158:	e262      	b.n	1000a620 <_Z8PlayDemov+0x670>
1000a15a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1000a15c:	2b00      	cmp	r3, #0
1000a15e:	d00a      	beq.n	1000a176 <_Z8PlayDemov+0x1c6>
					if (*d != TILE_EMPTY) ok = False;
1000a160:	78d3      	ldrb	r3, [r2, #3]
1000a162:	469c      	mov	ip, r3
					ok = False;
1000a164:	2308      	movs	r3, #8
1000a166:	425b      	negs	r3, r3
1000a168:	4699      	mov	r9, r3
1000a16a:	44cc      	add	ip, r9
1000a16c:	4660      	mov	r0, ip
1000a16e:	4243      	negs	r3, r0
1000a170:	4143      	adcs	r3, r0
1000a172:	425b      	negs	r3, r3
1000a174:	4019      	ands	r1, r3
		y++;
1000a176:	9b00      	ldr	r3, [sp, #0]
1000a178:	1c98      	adds	r0, r3, #2
1000a17a:	b2c0      	uxtb	r0, r0
1000a17c:	900f      	str	r0, [sp, #60]	; 0x3c
			if (b != 0)
1000a17e:	9801      	ldr	r0, [sp, #4]
1000a180:	2800      	cmp	r0, #0
1000a182:	d100      	bne.n	1000a186 <_Z8PlayDemov+0x1d6>
1000a184:	e1a7      	b.n	1000a4d6 <_Z8PlayDemov+0x526>
				if ((y < 1) || (y >= MAPH-1))
1000a186:	4640      	mov	r0, r8
1000a188:	2811      	cmp	r0, #17
1000a18a:	d900      	bls.n	1000a18e <_Z8PlayDemov+0x1de>
1000a18c:	e22d      	b.n	1000a5ea <_Z8PlayDemov+0x63a>
					if (*d != TILE_EMPTY) ok = False;
1000a18e:	7ed3      	ldrb	r3, [r2, #27]
1000a190:	4699      	mov	r9, r3
1000a192:	2308      	movs	r3, #8
1000a194:	425b      	negs	r3, r3
1000a196:	469c      	mov	ip, r3
1000a198:	44e1      	add	r9, ip
1000a19a:	4648      	mov	r0, r9
1000a19c:	4243      	negs	r3, r0
1000a19e:	4143      	adcs	r3, r0
1000a1a0:	425b      	negs	r3, r3
1000a1a2:	4019      	ands	r1, r3
			if (b != 0)
1000a1a4:	9b04      	ldr	r3, [sp, #16]
1000a1a6:	2b00      	cmp	r3, #0
1000a1a8:	d000      	beq.n	1000a1ac <_Z8PlayDemov+0x1fc>
1000a1aa:	e206      	b.n	1000a5ba <_Z8PlayDemov+0x60a>
1000a1ac:	9b07      	ldr	r3, [sp, #28]
1000a1ae:	2b00      	cmp	r3, #0
1000a1b0:	d000      	beq.n	1000a1b4 <_Z8PlayDemov+0x204>
1000a1b2:	e199      	b.n	1000a4e8 <_Z8PlayDemov+0x538>
1000a1b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1000a1b6:	2b00      	cmp	r3, #0
1000a1b8:	d00a      	beq.n	1000a1d0 <_Z8PlayDemov+0x220>
					if (*d != TILE_EMPTY) ok = False;
1000a1ba:	7f93      	ldrb	r3, [r2, #30]
1000a1bc:	4698      	mov	r8, r3
					ok = False;
1000a1be:	2308      	movs	r3, #8
1000a1c0:	425b      	negs	r3, r3
1000a1c2:	469c      	mov	ip, r3
1000a1c4:	44e0      	add	r8, ip
1000a1c6:	4640      	mov	r0, r8
1000a1c8:	4243      	negs	r3, r0
1000a1ca:	4143      	adcs	r3, r0
1000a1cc:	425b      	negs	r3, r3
1000a1ce:	4019      	ands	r1, r3
		y++;
1000a1d0:	9b00      	ldr	r3, [sp, #0]
			if (b != 0)
1000a1d2:	9802      	ldr	r0, [sp, #8]
		y++;
1000a1d4:	3303      	adds	r3, #3
1000a1d6:	b2db      	uxtb	r3, r3
1000a1d8:	9300      	str	r3, [sp, #0]
			if (b != 0)
1000a1da:	2800      	cmp	r0, #0
1000a1dc:	d100      	bne.n	1000a1e0 <_Z8PlayDemov+0x230>
1000a1de:	e19a      	b.n	1000a516 <_Z8PlayDemov+0x566>
				if ((y < 1) || (y >= MAPH-1))
1000a1e0:	980f      	ldr	r0, [sp, #60]	; 0x3c
1000a1e2:	2811      	cmp	r0, #17
1000a1e4:	d900      	bls.n	1000a1e8 <_Z8PlayDemov+0x238>
1000a1e6:	e247      	b.n	1000a678 <_Z8PlayDemov+0x6c8>
					if (*d != TILE_EMPTY) ok = False;
1000a1e8:	2036      	movs	r0, #54	; 0x36
1000a1ea:	5c10      	ldrb	r0, [r2, r0]
1000a1ec:	4680      	mov	r8, r0
1000a1ee:	2008      	movs	r0, #8
1000a1f0:	4240      	negs	r0, r0
1000a1f2:	4684      	mov	ip, r0
1000a1f4:	44e0      	add	r8, ip
1000a1f6:	4643      	mov	r3, r8
1000a1f8:	4258      	negs	r0, r3
1000a1fa:	4158      	adcs	r0, r3
1000a1fc:	4243      	negs	r3, r0
1000a1fe:	4019      	ands	r1, r3
			if (b != 0)
1000a200:	9b05      	ldr	r3, [sp, #20]
1000a202:	2b00      	cmp	r3, #0
1000a204:	d000      	beq.n	1000a208 <_Z8PlayDemov+0x258>
1000a206:	e1bc      	b.n	1000a582 <_Z8PlayDemov+0x5d2>
1000a208:	9b08      	ldr	r3, [sp, #32]
1000a20a:	2b00      	cmp	r3, #0
1000a20c:	d000      	beq.n	1000a210 <_Z8PlayDemov+0x260>
1000a20e:	e18b      	b.n	1000a528 <_Z8PlayDemov+0x578>
1000a210:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1000a212:	2b00      	cmp	r3, #0
1000a214:	d00b      	beq.n	1000a22e <_Z8PlayDemov+0x27e>
					if (*d != TILE_EMPTY) ok = False;
1000a216:	2339      	movs	r3, #57	; 0x39
1000a218:	5cd3      	ldrb	r3, [r2, r3]
1000a21a:	469c      	mov	ip, r3
					ok = False;
1000a21c:	2308      	movs	r3, #8
1000a21e:	425b      	negs	r3, r3
1000a220:	4698      	mov	r8, r3
1000a222:	44c4      	add	ip, r8
1000a224:	4660      	mov	r0, ip
1000a226:	4243      	negs	r3, r0
1000a228:	4143      	adcs	r3, r0
1000a22a:	425b      	negs	r3, r3
1000a22c:	4019      	ands	r1, r3
			if (b != 0)
1000a22e:	2f00      	cmp	r7, #0
1000a230:	d100      	bne.n	1000a234 <_Z8PlayDemov+0x284>
1000a232:	e135      	b.n	1000a4a0 <_Z8PlayDemov+0x4f0>
				if ((y < 1) || (y >= MAPH-1))
1000a234:	9b00      	ldr	r3, [sp, #0]
1000a236:	2b11      	cmp	r3, #17
1000a238:	d80d      	bhi.n	1000a256 <_Z8PlayDemov+0x2a6>
					if (*d != TILE_EMPTY) ok = False;
1000a23a:	2351      	movs	r3, #81	; 0x51
1000a23c:	5cd3      	ldrb	r3, [r2, r3]
1000a23e:	2b08      	cmp	r3, #8
1000a240:	d100      	bne.n	1000a244 <_Z8PlayDemov+0x294>
1000a242:	e0ce      	b.n	1000a3e2 <_Z8PlayDemov+0x432>
			if (b != 0)
1000a244:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1000a246:	2b00      	cmp	r3, #0
1000a248:	d005      	beq.n	1000a256 <_Z8PlayDemov+0x2a6>
1000a24a:	2100      	movs	r1, #0
					if (*d != TILE_EMPTY) ok = False;
1000a24c:	2353      	movs	r3, #83	; 0x53
1000a24e:	5cd3      	ldrb	r3, [r2, r3]
1000a250:	2b08      	cmp	r3, #8
1000a252:	d100      	bne.n	1000a256 <_Z8PlayDemov+0x2a6>
1000a254:	e0cc      	b.n	1000a3f0 <_Z8PlayDemov+0x440>
1000a256:	46b4      	mov	ip, r6
			if (b != 0) *d = b;
1000a258:	4663      	mov	r3, ip
1000a25a:	2b00      	cmp	r3, #0
1000a25c:	d003      	beq.n	1000a266 <_Z8PlayDemov+0x2b6>
1000a25e:	465b      	mov	r3, fp
1000a260:	4661      	mov	r1, ip
1000a262:	9a11      	ldr	r2, [sp, #68]	; 0x44
1000a264:	5499      	strb	r1, [r3, r2]
1000a266:	9b03      	ldr	r3, [sp, #12]
1000a268:	2b00      	cmp	r3, #0
1000a26a:	d000      	beq.n	1000a26e <_Z8PlayDemov+0x2be>
1000a26c:	706b      	strb	r3, [r5, #1]
1000a26e:	9b06      	ldr	r3, [sp, #24]
1000a270:	2b00      	cmp	r3, #0
1000a272:	d000      	beq.n	1000a276 <_Z8PlayDemov+0x2c6>
1000a274:	70ab      	strb	r3, [r5, #2]
1000a276:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1000a278:	2b00      	cmp	r3, #0
1000a27a:	d000      	beq.n	1000a27e <_Z8PlayDemov+0x2ce>
1000a27c:	70eb      	strb	r3, [r5, #3]
1000a27e:	9b01      	ldr	r3, [sp, #4]
1000a280:	2b00      	cmp	r3, #0
1000a282:	d000      	beq.n	1000a286 <_Z8PlayDemov+0x2d6>
1000a284:	76eb      	strb	r3, [r5, #27]
1000a286:	9b04      	ldr	r3, [sp, #16]
1000a288:	2b00      	cmp	r3, #0
1000a28a:	d000      	beq.n	1000a28e <_Z8PlayDemov+0x2de>
1000a28c:	772b      	strb	r3, [r5, #28]
1000a28e:	9b07      	ldr	r3, [sp, #28]
1000a290:	2b00      	cmp	r3, #0
1000a292:	d000      	beq.n	1000a296 <_Z8PlayDemov+0x2e6>
1000a294:	776b      	strb	r3, [r5, #29]
1000a296:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1000a298:	2b00      	cmp	r3, #0
1000a29a:	d000      	beq.n	1000a29e <_Z8PlayDemov+0x2ee>
1000a29c:	77ab      	strb	r3, [r5, #30]
1000a29e:	9a02      	ldr	r2, [sp, #8]
1000a2a0:	2a00      	cmp	r2, #0
1000a2a2:	d001      	beq.n	1000a2a8 <_Z8PlayDemov+0x2f8>
1000a2a4:	2336      	movs	r3, #54	; 0x36
1000a2a6:	54ea      	strb	r2, [r5, r3]
1000a2a8:	9a05      	ldr	r2, [sp, #20]
1000a2aa:	2a00      	cmp	r2, #0
1000a2ac:	d001      	beq.n	1000a2b2 <_Z8PlayDemov+0x302>
1000a2ae:	2337      	movs	r3, #55	; 0x37
1000a2b0:	54ea      	strb	r2, [r5, r3]
1000a2b2:	9a08      	ldr	r2, [sp, #32]
1000a2b4:	2a00      	cmp	r2, #0
1000a2b6:	d001      	beq.n	1000a2bc <_Z8PlayDemov+0x30c>
1000a2b8:	2338      	movs	r3, #56	; 0x38
1000a2ba:	54ea      	strb	r2, [r5, r3]
1000a2bc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1000a2be:	2a00      	cmp	r2, #0
1000a2c0:	d001      	beq.n	1000a2c6 <_Z8PlayDemov+0x316>
1000a2c2:	2339      	movs	r3, #57	; 0x39
1000a2c4:	54ea      	strb	r2, [r5, r3]
1000a2c6:	2f00      	cmp	r7, #0
1000a2c8:	d001      	beq.n	1000a2ce <_Z8PlayDemov+0x31e>
1000a2ca:	2351      	movs	r3, #81	; 0x51
1000a2cc:	54ef      	strb	r7, [r5, r3]
1000a2ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
1000a2d0:	2a00      	cmp	r2, #0
1000a2d2:	d001      	beq.n	1000a2d8 <_Z8PlayDemov+0x328>
1000a2d4:	2352      	movs	r3, #82	; 0x52
1000a2d6:	54ea      	strb	r2, [r5, r3]
1000a2d8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
1000a2da:	2a00      	cmp	r2, #0
1000a2dc:	d001      	beq.n	1000a2e2 <_Z8PlayDemov+0x332>
1000a2de:	2353      	movs	r3, #83	; 0x53
1000a2e0:	54ea      	strb	r2, [r5, r3]
1000a2e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
1000a2e4:	2a00      	cmp	r2, #0
1000a2e6:	d001      	beq.n	1000a2ec <_Z8PlayDemov+0x33c>
1000a2e8:	2354      	movs	r3, #84	; 0x54
1000a2ea:	54ea      	strb	r2, [r5, r3]

		// display brick
		DispBrick(BrickX, BrickY, Brick);

		// update score
		Score += BrickScore;
1000a2ec:	4b0c      	ldr	r3, [pc, #48]	; (1000a320 <_Z8PlayDemov+0x370>)
1000a2ee:	4a0d      	ldr	r2, [pc, #52]	; (1000a324 <_Z8PlayDemov+0x374>)
	DispTileNum(TILE_SCOREV1, Score, COL_WHITE);
1000a2f0:	202e      	movs	r0, #46	; 0x2e
		Score += BrickScore;
1000a2f2:	6811      	ldr	r1, [r2, #0]
1000a2f4:	681a      	ldr	r2, [r3, #0]
	for (y = MAPH-2; y > 1; y--)
1000a2f6:	2512      	movs	r5, #18
		Score += BrickScore;
1000a2f8:	4694      	mov	ip, r2
	DispTileNum(TILE_SCOREV1, Score, COL_WHITE);
1000a2fa:	22ff      	movs	r2, #255	; 0xff
		Score += BrickScore;
1000a2fc:	4461      	add	r1, ip
1000a2fe:	6019      	str	r1, [r3, #0]
	DispTileNum(TILE_SCOREV1, Score, COL_WHITE);
1000a300:	f7fb fb3e 	bl	10005980 <_Z11DispTileNumhih>
1000a304:	e010      	b.n	1000a328 <_Z8PlayDemov+0x378>
1000a306:	46c0      	nop			; (mov r8, r8)
1000a308:	20012767 	.word	0x20012767
1000a30c:	2000327c 	.word	0x2000327c
1000a310:	20012766 	.word	0x20012766
1000a314:	20012765 	.word	0x20012765
1000a318:	20012764 	.word	0x20012764
1000a31c:	1000e9f4 	.word	0x1000e9f4
1000a320:	20007108 	.word	0x20007108
1000a324:	20003498 	.word	0x20003498
	DispTileNum(TILE_SCOREV3, ScoreBest, COL_YELLOW);
1000a328:	4bc5      	ldr	r3, [pc, #788]	; (1000a640 <_Z8PlayDemov+0x690>)
1000a32a:	22fc      	movs	r2, #252	; 0xfc
1000a32c:	6819      	ldr	r1, [r3, #0]
1000a32e:	2042      	movs	r0, #66	; 0x42
1000a330:	f7fb fb26 	bl	10005980 <_Z11DispTileNumhih>
	DispTileNum(TILE_LINESV1, Lines, COL_WHITE);
1000a334:	4bc3      	ldr	r3, [pc, #780]	; (1000a644 <_Z8PlayDemov+0x694>)
1000a336:	22ff      	movs	r2, #255	; 0xff
1000a338:	6819      	ldr	r1, [r3, #0]
1000a33a:	2030      	movs	r0, #48	; 0x30
1000a33c:	f7fb fb20 	bl	10005980 <_Z11DispTileNumhih>
	DispTileNum(TILE_LINESV3, LinesBest, COL_YELLOW);
1000a340:	4bc1      	ldr	r3, [pc, #772]	; (1000a648 <_Z8PlayDemov+0x698>)
1000a342:	22fc      	movs	r2, #252	; 0xfc
1000a344:	6819      	ldr	r1, [r3, #0]
1000a346:	2044      	movs	r0, #68	; 0x44
1000a348:	f7fb fb1a 	bl	10005980 <_Z11DispTileNumhih>
	DispTileNum(TILE_SPEEDV1, Level, COL_WHITE);
1000a34c:	4bbf      	ldr	r3, [pc, #764]	; (1000a64c <_Z8PlayDemov+0x69c>)
1000a34e:	22ff      	movs	r2, #255	; 0xff
1000a350:	7819      	ldrb	r1, [r3, #0]
1000a352:	2032      	movs	r0, #50	; 0x32
1000a354:	f7fb fb14 	bl	10005980 <_Z11DispTileNumhih>
	DispTileNum(TILE_SPEEDV3, LevelBest, COL_YELLOW);
1000a358:	4bbd      	ldr	r3, [pc, #756]	; (1000a650 <_Z8PlayDemov+0x6a0>)
1000a35a:	22fc      	movs	r2, #252	; 0xfc
1000a35c:	7819      	ldrb	r1, [r3, #0]
1000a35e:	2046      	movs	r0, #70	; 0x46
1000a360:	f7fb fb0e 	bl	10005980 <_Z11DispTileNumhih>
		DispScore();

		// sound
		PlaySound(BrickSnd, sizeof(BrickSnd));
1000a364:	23fe      	movs	r3, #254	; 0xfe
1000a366:	2624      	movs	r6, #36	; 0x24
1000a368:	2200      	movs	r2, #0
1000a36a:	49ba      	ldr	r1, [pc, #744]	; (1000a654 <_Z8PlayDemov+0x6a4>)
1000a36c:	48ba      	ldr	r0, [pc, #744]	; (1000a658 <_Z8PlayDemov+0x6a8>)
1000a36e:	059b      	lsls	r3, r3, #22
1000a370:	f003 fab0 	bl	1000d8d4 <_Z9PlaySoundPKhihf>
	for (y = MAPH-2; y > 1; y--)
1000a374:	4fb9      	ldr	r7, [pc, #740]	; (1000a65c <_Z8PlayDemov+0x6ac>)
		s = &Board[y*MAPW + 8];
1000a376:	1972      	adds	r2, r6, r5
1000a378:	00d3      	lsls	r3, r2, #3
1000a37a:	18d2      	adds	r2, r2, r3
			if (*s == TILE_EMPTY)
1000a37c:	4659      	mov	r1, fp
		s = &Board[y*MAPW + 8];
1000a37e:	465b      	mov	r3, fp
1000a380:	3208      	adds	r2, #8
1000a382:	189b      	adds	r3, r3, r2
			if (*s == TILE_EMPTY)
1000a384:	5c8a      	ldrb	r2, [r1, r2]
1000a386:	2a08      	cmp	r2, #8
1000a388:	d100      	bne.n	1000a38c <_Z8PlayDemov+0x3dc>
1000a38a:	e0f0      	b.n	1000a56e <_Z8PlayDemov+0x5be>
1000a38c:	785a      	ldrb	r2, [r3, #1]
1000a38e:	2a08      	cmp	r2, #8
1000a390:	d100      	bne.n	1000a394 <_Z8PlayDemov+0x3e4>
1000a392:	e0ec      	b.n	1000a56e <_Z8PlayDemov+0x5be>
1000a394:	789a      	ldrb	r2, [r3, #2]
1000a396:	2a08      	cmp	r2, #8
1000a398:	d100      	bne.n	1000a39c <_Z8PlayDemov+0x3ec>
1000a39a:	e0e8      	b.n	1000a56e <_Z8PlayDemov+0x5be>
1000a39c:	78da      	ldrb	r2, [r3, #3]
1000a39e:	2a08      	cmp	r2, #8
1000a3a0:	d100      	bne.n	1000a3a4 <_Z8PlayDemov+0x3f4>
1000a3a2:	e0e4      	b.n	1000a56e <_Z8PlayDemov+0x5be>
1000a3a4:	791a      	ldrb	r2, [r3, #4]
1000a3a6:	2a08      	cmp	r2, #8
1000a3a8:	d100      	bne.n	1000a3ac <_Z8PlayDemov+0x3fc>
1000a3aa:	e0e0      	b.n	1000a56e <_Z8PlayDemov+0x5be>
1000a3ac:	795a      	ldrb	r2, [r3, #5]
1000a3ae:	2a08      	cmp	r2, #8
1000a3b0:	d100      	bne.n	1000a3b4 <_Z8PlayDemov+0x404>
1000a3b2:	e0dc      	b.n	1000a56e <_Z8PlayDemov+0x5be>
1000a3b4:	799a      	ldrb	r2, [r3, #6]
1000a3b6:	2a08      	cmp	r2, #8
1000a3b8:	d100      	bne.n	1000a3bc <_Z8PlayDemov+0x40c>
1000a3ba:	e0d8      	b.n	1000a56e <_Z8PlayDemov+0x5be>
1000a3bc:	79da      	ldrb	r2, [r3, #7]
1000a3be:	2a08      	cmp	r2, #8
1000a3c0:	d100      	bne.n	1000a3c4 <_Z8PlayDemov+0x414>
1000a3c2:	e0d4      	b.n	1000a56e <_Z8PlayDemov+0x5be>
1000a3c4:	7a1a      	ldrb	r2, [r3, #8]
1000a3c6:	2a08      	cmp	r2, #8
1000a3c8:	d100      	bne.n	1000a3cc <_Z8PlayDemov+0x41c>
1000a3ca:	e0d0      	b.n	1000a56e <_Z8PlayDemov+0x5be>
1000a3cc:	7a5b      	ldrb	r3, [r3, #9]
1000a3ce:	2b08      	cmp	r3, #8
1000a3d0:	d100      	bne.n	1000a3d4 <_Z8PlayDemov+0x424>
1000a3d2:	e0cc      	b.n	1000a56e <_Z8PlayDemov+0x5be>
			DelRow(y);
1000a3d4:	b2e8      	uxtb	r0, r5
1000a3d6:	f7fb fdb9 	bl	10005f4c <_Z6DelRowh>
			NextLevel--;
1000a3da:	683b      	ldr	r3, [r7, #0]
1000a3dc:	3b01      	subs	r3, #1
1000a3de:	603b      	str	r3, [r7, #0]
	for (y = MAPH-2; y > 1; y--)
1000a3e0:	e7c9      	b.n	1000a376 <_Z8PlayDemov+0x3c6>
			if (b != 0)
1000a3e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
1000a3e4:	2b00      	cmp	r3, #0
1000a3e6:	d163      	bne.n	1000a4b0 <_Z8PlayDemov+0x500>
1000a3e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1000a3ea:	2b00      	cmp	r3, #0
1000a3ec:	d000      	beq.n	1000a3f0 <_Z8PlayDemov+0x440>
1000a3ee:	e72d      	b.n	1000a24c <_Z8PlayDemov+0x29c>
1000a3f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1000a3f2:	2b00      	cmp	r3, #0
1000a3f4:	d004      	beq.n	1000a400 <_Z8PlayDemov+0x450>
					if (*d != TILE_EMPTY) ok = False;
1000a3f6:	2354      	movs	r3, #84	; 0x54
1000a3f8:	5cd3      	ldrb	r3, [r2, r3]
1000a3fa:	2b08      	cmp	r3, #8
1000a3fc:	d000      	beq.n	1000a400 <_Z8PlayDemov+0x450>
1000a3fe:	e72a      	b.n	1000a256 <_Z8PlayDemov+0x2a6>
			if (!CheckBrick(BrickX, BrickY+1, Brick)) break;
1000a400:	2900      	cmp	r1, #0
1000a402:	d100      	bne.n	1000a406 <_Z8PlayDemov+0x456>
1000a404:	e727      	b.n	1000a256 <_Z8PlayDemov+0x2a6>
			BrickY++;
1000a406:	4b96      	ldr	r3, [pc, #600]	; (1000a660 <_Z8PlayDemov+0x6b0>)
1000a408:	9910      	ldr	r1, [sp, #64]	; 0x40
1000a40a:	7019      	strb	r1, [r3, #0]
			if (b != 0) *d = b;
1000a40c:	2e00      	cmp	r6, #0
1000a40e:	d002      	beq.n	1000a416 <_Z8PlayDemov+0x466>
1000a410:	465b      	mov	r3, fp
1000a412:	4651      	mov	r1, sl
1000a414:	545e      	strb	r6, [r3, r1]
1000a416:	9b03      	ldr	r3, [sp, #12]
1000a418:	2b00      	cmp	r3, #0
1000a41a:	d000      	beq.n	1000a41e <_Z8PlayDemov+0x46e>
1000a41c:	7053      	strb	r3, [r2, #1]
1000a41e:	9b06      	ldr	r3, [sp, #24]
1000a420:	2b00      	cmp	r3, #0
1000a422:	d000      	beq.n	1000a426 <_Z8PlayDemov+0x476>
1000a424:	7093      	strb	r3, [r2, #2]
1000a426:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1000a428:	2b00      	cmp	r3, #0
1000a42a:	d000      	beq.n	1000a42e <_Z8PlayDemov+0x47e>
1000a42c:	70d3      	strb	r3, [r2, #3]
1000a42e:	9b01      	ldr	r3, [sp, #4]
1000a430:	2b00      	cmp	r3, #0
1000a432:	d000      	beq.n	1000a436 <_Z8PlayDemov+0x486>
1000a434:	76d3      	strb	r3, [r2, #27]
1000a436:	9b04      	ldr	r3, [sp, #16]
1000a438:	2b00      	cmp	r3, #0
1000a43a:	d000      	beq.n	1000a43e <_Z8PlayDemov+0x48e>
1000a43c:	7713      	strb	r3, [r2, #28]
1000a43e:	9b07      	ldr	r3, [sp, #28]
1000a440:	2b00      	cmp	r3, #0
1000a442:	d000      	beq.n	1000a446 <_Z8PlayDemov+0x496>
1000a444:	7753      	strb	r3, [r2, #29]
1000a446:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1000a448:	2b00      	cmp	r3, #0
1000a44a:	d000      	beq.n	1000a44e <_Z8PlayDemov+0x49e>
1000a44c:	7793      	strb	r3, [r2, #30]
1000a44e:	9b02      	ldr	r3, [sp, #8]
1000a450:	2b00      	cmp	r3, #0
1000a452:	d001      	beq.n	1000a458 <_Z8PlayDemov+0x4a8>
1000a454:	2136      	movs	r1, #54	; 0x36
1000a456:	5453      	strb	r3, [r2, r1]
1000a458:	9b05      	ldr	r3, [sp, #20]
1000a45a:	2b00      	cmp	r3, #0
1000a45c:	d001      	beq.n	1000a462 <_Z8PlayDemov+0x4b2>
1000a45e:	2137      	movs	r1, #55	; 0x37
1000a460:	5453      	strb	r3, [r2, r1]
1000a462:	9908      	ldr	r1, [sp, #32]
1000a464:	2900      	cmp	r1, #0
1000a466:	d001      	beq.n	1000a46c <_Z8PlayDemov+0x4bc>
1000a468:	2338      	movs	r3, #56	; 0x38
1000a46a:	54d1      	strb	r1, [r2, r3]
1000a46c:	990c      	ldr	r1, [sp, #48]	; 0x30
1000a46e:	2900      	cmp	r1, #0
1000a470:	d001      	beq.n	1000a476 <_Z8PlayDemov+0x4c6>
1000a472:	2339      	movs	r3, #57	; 0x39
1000a474:	54d1      	strb	r1, [r2, r3]
1000a476:	2f00      	cmp	r7, #0
1000a478:	d001      	beq.n	1000a47e <_Z8PlayDemov+0x4ce>
1000a47a:	2351      	movs	r3, #81	; 0x51
1000a47c:	54d7      	strb	r7, [r2, r3]
1000a47e:	9909      	ldr	r1, [sp, #36]	; 0x24
1000a480:	2900      	cmp	r1, #0
1000a482:	d001      	beq.n	1000a488 <_Z8PlayDemov+0x4d8>
1000a484:	2352      	movs	r3, #82	; 0x52
1000a486:	54d1      	strb	r1, [r2, r3]
1000a488:	990d      	ldr	r1, [sp, #52]	; 0x34
1000a48a:	2900      	cmp	r1, #0
1000a48c:	d001      	beq.n	1000a492 <_Z8PlayDemov+0x4e2>
1000a48e:	2353      	movs	r3, #83	; 0x53
1000a490:	54d1      	strb	r1, [r2, r3]
1000a492:	990e      	ldr	r1, [sp, #56]	; 0x38
1000a494:	2900      	cmp	r1, #0
1000a496:	d100      	bne.n	1000a49a <_Z8PlayDemov+0x4ea>
1000a498:	e5c9      	b.n	1000a02e <_Z8PlayDemov+0x7e>
1000a49a:	2354      	movs	r3, #84	; 0x54
1000a49c:	54d1      	strb	r1, [r2, r3]
1000a49e:	e5c6      	b.n	1000a02e <_Z8PlayDemov+0x7e>
			if (b != 0)
1000a4a0:	9809      	ldr	r0, [sp, #36]	; 0x24
1000a4a2:	2800      	cmp	r0, #0
1000a4a4:	d100      	bne.n	1000a4a8 <_Z8PlayDemov+0x4f8>
1000a4a6:	e0f0      	b.n	1000a68a <_Z8PlayDemov+0x6da>
				if ((y < 1) || (y >= MAPH-1))
1000a4a8:	9b00      	ldr	r3, [sp, #0]
1000a4aa:	2b11      	cmp	r3, #17
1000a4ac:	d900      	bls.n	1000a4b0 <_Z8PlayDemov+0x500>
1000a4ae:	e6d2      	b.n	1000a256 <_Z8PlayDemov+0x2a6>
					if (*d != TILE_EMPTY) ok = False;
1000a4b0:	2352      	movs	r3, #82	; 0x52
1000a4b2:	5cd3      	ldrb	r3, [r2, r3]
1000a4b4:	2b08      	cmp	r3, #8
1000a4b6:	d000      	beq.n	1000a4ba <_Z8PlayDemov+0x50a>
1000a4b8:	e6c4      	b.n	1000a244 <_Z8PlayDemov+0x294>
			if (b != 0)
1000a4ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1000a4bc:	2b00      	cmp	r3, #0
1000a4be:	d000      	beq.n	1000a4c2 <_Z8PlayDemov+0x512>
1000a4c0:	e6c4      	b.n	1000a24c <_Z8PlayDemov+0x29c>
1000a4c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1000a4c4:	2b00      	cmp	r3, #0
1000a4c6:	d09b      	beq.n	1000a400 <_Z8PlayDemov+0x450>
				if ((y < 1) || (y >= MAPH-1))
1000a4c8:	9b00      	ldr	r3, [sp, #0]
1000a4ca:	2b11      	cmp	r3, #17
1000a4cc:	d993      	bls.n	1000a3f6 <_Z8PlayDemov+0x446>
1000a4ce:	2300      	movs	r3, #0
1000a4d0:	46b4      	mov	ip, r6
1000a4d2:	930d      	str	r3, [sp, #52]	; 0x34
1000a4d4:	e6c0      	b.n	1000a258 <_Z8PlayDemov+0x2a8>
			if (b != 0)
1000a4d6:	9804      	ldr	r0, [sp, #16]
1000a4d8:	2800      	cmp	r0, #0
1000a4da:	d16b      	bne.n	1000a5b4 <_Z8PlayDemov+0x604>
1000a4dc:	9b07      	ldr	r3, [sp, #28]
1000a4de:	2b00      	cmp	r3, #0
1000a4e0:	d079      	beq.n	1000a5d6 <_Z8PlayDemov+0x626>
				if ((y < 1) || (y >= MAPH-1))
1000a4e2:	4643      	mov	r3, r8
1000a4e4:	2b11      	cmp	r3, #17
1000a4e6:	d87e      	bhi.n	1000a5e6 <_Z8PlayDemov+0x636>
					if (*d != TILE_EMPTY) ok = False;
1000a4e8:	7f53      	ldrb	r3, [r2, #29]
1000a4ea:	4698      	mov	r8, r3
1000a4ec:	2308      	movs	r3, #8
1000a4ee:	425b      	negs	r3, r3
1000a4f0:	469c      	mov	ip, r3
1000a4f2:	44e0      	add	r8, ip
1000a4f4:	4640      	mov	r0, r8
1000a4f6:	4243      	negs	r3, r0
1000a4f8:	4143      	adcs	r3, r0
1000a4fa:	425b      	negs	r3, r3
1000a4fc:	4019      	ands	r1, r3
			if (b != 0)
1000a4fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1000a500:	2b00      	cmp	r3, #0
1000a502:	d000      	beq.n	1000a506 <_Z8PlayDemov+0x556>
1000a504:	e659      	b.n	1000a1ba <_Z8PlayDemov+0x20a>
		y++;
1000a506:	9b00      	ldr	r3, [sp, #0]
			if (b != 0)
1000a508:	9802      	ldr	r0, [sp, #8]
		y++;
1000a50a:	3303      	adds	r3, #3
1000a50c:	b2db      	uxtb	r3, r3
1000a50e:	9300      	str	r3, [sp, #0]
			if (b != 0)
1000a510:	2800      	cmp	r0, #0
1000a512:	d000      	beq.n	1000a516 <_Z8PlayDemov+0x566>
1000a514:	e664      	b.n	1000a1e0 <_Z8PlayDemov+0x230>
1000a516:	9805      	ldr	r0, [sp, #20]
1000a518:	2800      	cmp	r0, #0
1000a51a:	d12e      	bne.n	1000a57a <_Z8PlayDemov+0x5ca>
1000a51c:	9b08      	ldr	r3, [sp, #32]
1000a51e:	2b00      	cmp	r3, #0
1000a520:	d03e      	beq.n	1000a5a0 <_Z8PlayDemov+0x5f0>
				if ((y < 1) || (y >= MAPH-1))
1000a522:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1000a524:	2b11      	cmp	r3, #17
1000a526:	d843      	bhi.n	1000a5b0 <_Z8PlayDemov+0x600>
					if (*d != TILE_EMPTY) ok = False;
1000a528:	2338      	movs	r3, #56	; 0x38
1000a52a:	5cd3      	ldrb	r3, [r2, r3]
1000a52c:	469c      	mov	ip, r3
1000a52e:	2308      	movs	r3, #8
1000a530:	425b      	negs	r3, r3
1000a532:	4698      	mov	r8, r3
1000a534:	44c4      	add	ip, r8
1000a536:	4660      	mov	r0, ip
1000a538:	4243      	negs	r3, r0
1000a53a:	4143      	adcs	r3, r0
1000a53c:	425b      	negs	r3, r3
1000a53e:	4019      	ands	r1, r3
			if (b != 0)
1000a540:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1000a542:	2b00      	cmp	r3, #0
1000a544:	d100      	bne.n	1000a548 <_Z8PlayDemov+0x598>
1000a546:	e672      	b.n	1000a22e <_Z8PlayDemov+0x27e>
1000a548:	e665      	b.n	1000a216 <_Z8PlayDemov+0x266>
1000a54a:	9903      	ldr	r1, [sp, #12]
1000a54c:	2900      	cmp	r1, #0
1000a54e:	d155      	bne.n	1000a5fc <_Z8PlayDemov+0x64c>
1000a550:	9906      	ldr	r1, [sp, #24]
1000a552:	2900      	cmp	r1, #0
1000a554:	d000      	beq.n	1000a558 <_Z8PlayDemov+0x5a8>
1000a556:	e0a1      	b.n	1000a69c <_Z8PlayDemov+0x6ec>
	Bool ok = True;
1000a558:	3101      	adds	r1, #1
			if (b != 0)
1000a55a:	980a      	ldr	r0, [sp, #40]	; 0x28
1000a55c:	2800      	cmp	r0, #0
1000a55e:	d100      	bne.n	1000a562 <_Z8PlayDemov+0x5b2>
1000a560:	e609      	b.n	1000a176 <_Z8PlayDemov+0x1c6>
				if ((y < 1) || (y >= MAPH-1))
1000a562:	9b00      	ldr	r3, [sp, #0]
1000a564:	2b11      	cmp	r3, #17
1000a566:	d800      	bhi.n	1000a56a <_Z8PlayDemov+0x5ba>
1000a568:	e5fa      	b.n	1000a160 <_Z8PlayDemov+0x1b0>
					ok = False;
1000a56a:	2100      	movs	r1, #0
1000a56c:	e603      	b.n	1000a176 <_Z8PlayDemov+0x1c6>
	for (y = MAPH-2; y > 1; y--)
1000a56e:	3d01      	subs	r5, #1
1000a570:	2d01      	cmp	r5, #1
1000a572:	d100      	bne.n	1000a576 <_Z8PlayDemov+0x5c6>
1000a574:	e099      	b.n	1000a6aa <_Z8PlayDemov+0x6fa>
1000a576:	006e      	lsls	r6, r5, #1
1000a578:	e6fd      	b.n	1000a376 <_Z8PlayDemov+0x3c6>
				if ((y < 1) || (y >= MAPH-1))
1000a57a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1000a57c:	2b11      	cmp	r3, #17
1000a57e:	d900      	bls.n	1000a582 <_Z8PlayDemov+0x5d2>
1000a580:	e07d      	b.n	1000a67e <_Z8PlayDemov+0x6ce>
					if (*d != TILE_EMPTY) ok = False;
1000a582:	2337      	movs	r3, #55	; 0x37
1000a584:	5cd3      	ldrb	r3, [r2, r3]
1000a586:	4698      	mov	r8, r3
1000a588:	2308      	movs	r3, #8
1000a58a:	425b      	negs	r3, r3
1000a58c:	469c      	mov	ip, r3
1000a58e:	44e0      	add	r8, ip
1000a590:	4640      	mov	r0, r8
1000a592:	4243      	negs	r3, r0
1000a594:	4143      	adcs	r3, r0
1000a596:	425b      	negs	r3, r3
1000a598:	4019      	ands	r1, r3
			if (b != 0)
1000a59a:	9b08      	ldr	r3, [sp, #32]
1000a59c:	2b00      	cmp	r3, #0
1000a59e:	d1c3      	bne.n	1000a528 <_Z8PlayDemov+0x578>
1000a5a0:	980c      	ldr	r0, [sp, #48]	; 0x30
1000a5a2:	2800      	cmp	r0, #0
1000a5a4:	d100      	bne.n	1000a5a8 <_Z8PlayDemov+0x5f8>
1000a5a6:	e642      	b.n	1000a22e <_Z8PlayDemov+0x27e>
				if ((y < 1) || (y >= MAPH-1))
1000a5a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1000a5aa:	2b11      	cmp	r3, #17
1000a5ac:	d800      	bhi.n	1000a5b0 <_Z8PlayDemov+0x600>
1000a5ae:	e632      	b.n	1000a216 <_Z8PlayDemov+0x266>
					ok = False;
1000a5b0:	2100      	movs	r1, #0
1000a5b2:	e63c      	b.n	1000a22e <_Z8PlayDemov+0x27e>
				if ((y < 1) || (y >= MAPH-1))
1000a5b4:	4643      	mov	r3, r8
1000a5b6:	2b11      	cmp	r3, #17
1000a5b8:	d81a      	bhi.n	1000a5f0 <_Z8PlayDemov+0x640>
					if (*d != TILE_EMPTY) ok = False;
1000a5ba:	7f13      	ldrb	r3, [r2, #28]
1000a5bc:	4699      	mov	r9, r3
1000a5be:	2308      	movs	r3, #8
1000a5c0:	425b      	negs	r3, r3
1000a5c2:	469c      	mov	ip, r3
1000a5c4:	44e1      	add	r9, ip
1000a5c6:	4648      	mov	r0, r9
1000a5c8:	4243      	negs	r3, r0
1000a5ca:	4143      	adcs	r3, r0
1000a5cc:	425b      	negs	r3, r3
1000a5ce:	4019      	ands	r1, r3
			if (b != 0)
1000a5d0:	9b07      	ldr	r3, [sp, #28]
1000a5d2:	2b00      	cmp	r3, #0
1000a5d4:	d188      	bne.n	1000a4e8 <_Z8PlayDemov+0x538>
1000a5d6:	980b      	ldr	r0, [sp, #44]	; 0x2c
1000a5d8:	2800      	cmp	r0, #0
1000a5da:	d100      	bne.n	1000a5de <_Z8PlayDemov+0x62e>
1000a5dc:	e5f8      	b.n	1000a1d0 <_Z8PlayDemov+0x220>
				if ((y < 1) || (y >= MAPH-1))
1000a5de:	4643      	mov	r3, r8
1000a5e0:	2b11      	cmp	r3, #17
1000a5e2:	d800      	bhi.n	1000a5e6 <_Z8PlayDemov+0x636>
1000a5e4:	e5e9      	b.n	1000a1ba <_Z8PlayDemov+0x20a>
					ok = False;
1000a5e6:	2100      	movs	r1, #0
1000a5e8:	e5f2      	b.n	1000a1d0 <_Z8PlayDemov+0x220>
			if (b != 0)
1000a5ea:	9b04      	ldr	r3, [sp, #16]
1000a5ec:	2b00      	cmp	r3, #0
1000a5ee:	d0fa      	beq.n	1000a5e6 <_Z8PlayDemov+0x636>
1000a5f0:	9b07      	ldr	r3, [sp, #28]
					ok = False;
1000a5f2:	2100      	movs	r1, #0
			if (b != 0)
1000a5f4:	2b00      	cmp	r3, #0
1000a5f6:	d000      	beq.n	1000a5fa <_Z8PlayDemov+0x64a>
1000a5f8:	e5ea      	b.n	1000a1d0 <_Z8PlayDemov+0x220>
1000a5fa:	e7ec      	b.n	1000a5d6 <_Z8PlayDemov+0x626>
				if ((y < 1) || (y >= MAPH-1))
1000a5fc:	9b00      	ldr	r3, [sp, #0]
1000a5fe:	2b11      	cmp	r3, #17
1000a600:	d834      	bhi.n	1000a66c <_Z8PlayDemov+0x6bc>
	Bool ok = True;
1000a602:	2101      	movs	r1, #1
					if (*d != TILE_EMPTY) ok = False;
1000a604:	7850      	ldrb	r0, [r2, #1]
1000a606:	4684      	mov	ip, r0
1000a608:	2008      	movs	r0, #8
1000a60a:	4240      	negs	r0, r0
1000a60c:	4681      	mov	r9, r0
1000a60e:	44cc      	add	ip, r9
1000a610:	4663      	mov	r3, ip
1000a612:	4258      	negs	r0, r3
1000a614:	4158      	adcs	r0, r3
1000a616:	4243      	negs	r3, r0
1000a618:	4019      	ands	r1, r3
			if (b != 0)
1000a61a:	9b06      	ldr	r3, [sp, #24]
1000a61c:	2b00      	cmp	r3, #0
1000a61e:	d09c      	beq.n	1000a55a <_Z8PlayDemov+0x5aa>
					if (*d != TILE_EMPTY) ok = False;
1000a620:	7893      	ldrb	r3, [r2, #2]
1000a622:	469c      	mov	ip, r3
1000a624:	2308      	movs	r3, #8
1000a626:	425b      	negs	r3, r3
1000a628:	4699      	mov	r9, r3
1000a62a:	44cc      	add	ip, r9
1000a62c:	4660      	mov	r0, ip
1000a62e:	4243      	negs	r3, r0
1000a630:	4143      	adcs	r3, r0
1000a632:	425b      	negs	r3, r3
1000a634:	4019      	ands	r1, r3
			if (b != 0)
1000a636:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1000a638:	2b00      	cmp	r3, #0
1000a63a:	d100      	bne.n	1000a63e <_Z8PlayDemov+0x68e>
1000a63c:	e59b      	b.n	1000a176 <_Z8PlayDemov+0x1c6>
1000a63e:	e58f      	b.n	1000a160 <_Z8PlayDemov+0x1b0>
1000a640:	2000710c 	.word	0x2000710c
1000a644:	200061f4 	.word	0x200061f4
1000a648:	200061f8 	.word	0x200061f8
1000a64c:	2001276b 	.word	0x2001276b
1000a650:	2001276c 	.word	0x2001276c
1000a654:	00000932 	.word	0x00000932
1000a658:	10018d24 	.word	0x10018d24
1000a65c:	200061fc 	.word	0x200061fc
1000a660:	20012766 	.word	0x20012766
1000a664:	9b03      	ldr	r3, [sp, #12]
1000a666:	2b00      	cmp	r3, #0
1000a668:	d100      	bne.n	1000a66c <_Z8PlayDemov+0x6bc>
1000a66a:	e77e      	b.n	1000a56a <_Z8PlayDemov+0x5ba>
1000a66c:	9b06      	ldr	r3, [sp, #24]
					ok = False;
1000a66e:	2100      	movs	r1, #0
			if (b != 0)
1000a670:	2b00      	cmp	r3, #0
1000a672:	d000      	beq.n	1000a676 <_Z8PlayDemov+0x6c6>
1000a674:	e57f      	b.n	1000a176 <_Z8PlayDemov+0x1c6>
1000a676:	e770      	b.n	1000a55a <_Z8PlayDemov+0x5aa>
1000a678:	9b05      	ldr	r3, [sp, #20]
1000a67a:	2b00      	cmp	r3, #0
1000a67c:	d098      	beq.n	1000a5b0 <_Z8PlayDemov+0x600>
1000a67e:	9b08      	ldr	r3, [sp, #32]
					ok = False;
1000a680:	2100      	movs	r1, #0
			if (b != 0)
1000a682:	2b00      	cmp	r3, #0
1000a684:	d000      	beq.n	1000a688 <_Z8PlayDemov+0x6d8>
1000a686:	e5d2      	b.n	1000a22e <_Z8PlayDemov+0x27e>
1000a688:	e78a      	b.n	1000a5a0 <_Z8PlayDemov+0x5f0>
1000a68a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1000a68c:	2b00      	cmp	r3, #0
1000a68e:	d100      	bne.n	1000a692 <_Z8PlayDemov+0x6e2>
1000a690:	e717      	b.n	1000a4c2 <_Z8PlayDemov+0x512>
				if ((y < 1) || (y >= MAPH-1))
1000a692:	9b00      	ldr	r3, [sp, #0]
1000a694:	2b11      	cmp	r3, #17
1000a696:	d900      	bls.n	1000a69a <_Z8PlayDemov+0x6ea>
1000a698:	e5dd      	b.n	1000a256 <_Z8PlayDemov+0x2a6>
1000a69a:	e5d7      	b.n	1000a24c <_Z8PlayDemov+0x29c>
1000a69c:	9b00      	ldr	r3, [sp, #0]
					ok = False;
1000a69e:	2100      	movs	r1, #0
				if ((y < 1) || (y >= MAPH-1))
1000a6a0:	2b11      	cmp	r3, #17
1000a6a2:	d900      	bls.n	1000a6a6 <_Z8PlayDemov+0x6f6>
1000a6a4:	e567      	b.n	1000a176 <_Z8PlayDemov+0x1c6>
	Bool ok = True;
1000a6a6:	3101      	adds	r1, #1
1000a6a8:	e7ba      	b.n	1000a620 <_Z8PlayDemov+0x670>
	if ((NextLevel <= 0) && (Level < LEVELNUM) && !Demo)
1000a6aa:	683b      	ldr	r3, [r7, #0]
1000a6ac:	2b00      	cmp	r3, #0
1000a6ae:	dc01      	bgt.n	1000a6b4 <_Z8PlayDemov+0x704>
1000a6b0:	f7fb fabe 	bl	10005c30 <_Z10DelAllRowsv.part.0>

		// delete rows
		DelAllRows();

		// short delay
		sleep_ms(200);
1000a6b4:	20c8      	movs	r0, #200	; 0xc8
1000a6b6:	f7f8 fa0f 	bl	10002ad8 <sleep_ms>

		// generate new brick
		GenBrick();
1000a6ba:	f7fb fce9 	bl	10006090 <_Z8GenBrickv>
	u8* d = &Board[x + y*MAPW];
1000a6be:	2100      	movs	r1, #0
	if (!CheckBrick(BrickX, BrickY, Brick))
1000a6c0:	2000      	movs	r0, #0
	u8* d = &Board[x + y*MAPW];
1000a6c2:	4ac5      	ldr	r2, [pc, #788]	; (1000a9d8 <_Z8PlayDemov+0xa28>)
	if (!CheckBrick(BrickX, BrickY, Brick))
1000a6c4:	4bc5      	ldr	r3, [pc, #788]	; (1000a9dc <_Z8PlayDemov+0xa2c>)
	u8* d = &Board[x + y*MAPW];
1000a6c6:	5651      	ldrsb	r1, [r2, r1]
	if (!CheckBrick(BrickX, BrickY, Brick))
1000a6c8:	5618      	ldrsb	r0, [r3, r0]
	u8* d = &Board[x + y*MAPW];
1000a6ca:	468a      	mov	sl, r1
1000a6cc:	4659      	mov	r1, fp
1000a6ce:	0042      	lsls	r2, r0, #1
1000a6d0:	1812      	adds	r2, r2, r0
	const u8* s = &BrickTemp[brick*BRICKTEMPSIZE];
1000a6d2:	4bc3      	ldr	r3, [pc, #780]	; (1000a9e0 <_Z8PlayDemov+0xa30>)
	u8* d = &Board[x + y*MAPW];
1000a6d4:	00d6      	lsls	r6, r2, #3
	const u8* s = &BrickTemp[brick*BRICKTEMPSIZE];
1000a6d6:	781d      	ldrb	r5, [r3, #0]
	u8* d = &Board[x + y*MAPW];
1000a6d8:	1992      	adds	r2, r2, r6
1000a6da:	4492      	add	sl, r2
			b = *s++;
1000a6dc:	4ac1      	ldr	r2, [pc, #772]	; (1000a9e4 <_Z8PlayDemov+0xa34>)
	const u8* s = &BrickTemp[brick*BRICKTEMPSIZE];
1000a6de:	012d      	lsls	r5, r5, #4
1000a6e0:	4bc0      	ldr	r3, [pc, #768]	; (1000a9e4 <_Z8PlayDemov+0xa34>)
			b = *s++;
1000a6e2:	5d52      	ldrb	r2, [r2, r5]
	const u8* s = &BrickTemp[brick*BRICKTEMPSIZE];
1000a6e4:	195b      	adds	r3, r3, r5
			b = *s++;
1000a6e6:	4691      	mov	r9, r2
	u8* d = &Board[x + y*MAPW];
1000a6e8:	4451      	add	r1, sl
				if ((y < 1) || (y >= MAPH-1))
1000a6ea:	b2c0      	uxtb	r0, r0
			if (b != 0)
1000a6ec:	2a00      	cmp	r2, #0
1000a6ee:	d100      	bne.n	1000a6f2 <_Z8PlayDemov+0x742>
1000a6f0:	e158      	b.n	1000a9a4 <_Z8PlayDemov+0x9f4>
				if ((y < 1) || (y >= MAPH-1))
1000a6f2:	1e42      	subs	r2, r0, #1
1000a6f4:	2a11      	cmp	r2, #17
1000a6f6:	d900      	bls.n	1000a6fa <_Z8PlayDemov+0x74a>
1000a6f8:	e1c3      	b.n	1000aa82 <_Z8PlayDemov+0xad2>
					if (*d != TILE_EMPTY) ok = False;
1000a6fa:	4655      	mov	r5, sl
1000a6fc:	465a      	mov	r2, fp
1000a6fe:	5d52      	ldrb	r2, [r2, r5]
1000a700:	3a08      	subs	r2, #8
1000a702:	4255      	negs	r5, r2
1000a704:	416a      	adcs	r2, r5
			if (b != 0)
1000a706:	785d      	ldrb	r5, [r3, #1]
	Bool ok = True;
1000a708:	b2d2      	uxtb	r2, r2
			if (b != 0)
1000a70a:	2d00      	cmp	r5, #0
1000a70c:	d000      	beq.n	1000a710 <_Z8PlayDemov+0x760>
1000a70e:	e1ad      	b.n	1000aa6c <_Z8PlayDemov+0xabc>
1000a710:	789d      	ldrb	r5, [r3, #2]
1000a712:	2d00      	cmp	r5, #0
1000a714:	d100      	bne.n	1000a718 <_Z8PlayDemov+0x768>
1000a716:	e155      	b.n	1000a9c4 <_Z8PlayDemov+0xa14>
					if (*d != TILE_EMPTY) ok = False;
1000a718:	788d      	ldrb	r5, [r1, #2]
1000a71a:	3d08      	subs	r5, #8
1000a71c:	426e      	negs	r6, r5
1000a71e:	4175      	adcs	r5, r6
1000a720:	426d      	negs	r5, r5
1000a722:	402a      	ands	r2, r5
			if (b != 0)
1000a724:	78dd      	ldrb	r5, [r3, #3]
1000a726:	2d00      	cmp	r5, #0
1000a728:	d005      	beq.n	1000a736 <_Z8PlayDemov+0x786>
					if (*d != TILE_EMPTY) ok = False;
1000a72a:	78cd      	ldrb	r5, [r1, #3]
1000a72c:	3d08      	subs	r5, #8
1000a72e:	426e      	negs	r6, r5
1000a730:	4175      	adcs	r5, r6
1000a732:	426d      	negs	r5, r5
1000a734:	402a      	ands	r2, r5
			b = *s++;
1000a736:	791d      	ldrb	r5, [r3, #4]
		y++;
1000a738:	1c47      	adds	r7, r0, #1
			b = *s++;
1000a73a:	46a8      	mov	r8, r5
		y++;
1000a73c:	b2ff      	uxtb	r7, r7
			if (b != 0)
1000a73e:	2d00      	cmp	r5, #0
1000a740:	d100      	bne.n	1000a744 <_Z8PlayDemov+0x794>
1000a742:	e110      	b.n	1000a966 <_Z8PlayDemov+0x9b6>
				if ((y < 1) || (y >= MAPH-1))
1000a744:	2811      	cmp	r0, #17
1000a746:	d900      	bls.n	1000a74a <_Z8PlayDemov+0x79a>
1000a748:	e16a      	b.n	1000aa20 <_Z8PlayDemov+0xa70>
					if (*d != TILE_EMPTY) ok = False;
1000a74a:	7ecd      	ldrb	r5, [r1, #27]
1000a74c:	3d08      	subs	r5, #8
1000a74e:	426e      	negs	r6, r5
1000a750:	4175      	adcs	r5, r6
1000a752:	426d      	negs	r5, r5
1000a754:	402a      	ands	r2, r5
			if (b != 0)
1000a756:	795d      	ldrb	r5, [r3, #5]
1000a758:	2d00      	cmp	r5, #0
1000a75a:	d000      	beq.n	1000a75e <_Z8PlayDemov+0x7ae>
1000a75c:	e108      	b.n	1000a970 <_Z8PlayDemov+0x9c0>
1000a75e:	799d      	ldrb	r5, [r3, #6]
1000a760:	2d00      	cmp	r5, #0
1000a762:	d000      	beq.n	1000a766 <_Z8PlayDemov+0x7b6>
1000a764:	e10d      	b.n	1000a982 <_Z8PlayDemov+0x9d2>
1000a766:	79dd      	ldrb	r5, [r3, #7]
1000a768:	2d00      	cmp	r5, #0
1000a76a:	d000      	beq.n	1000a76e <_Z8PlayDemov+0x7be>
1000a76c:	e113      	b.n	1000a996 <_Z8PlayDemov+0x9e6>
		y++;
1000a76e:	3002      	adds	r0, #2
1000a770:	b2c0      	uxtb	r0, r0
1000a772:	4684      	mov	ip, r0
			b = *s++;
1000a774:	7a18      	ldrb	r0, [r3, #8]
1000a776:	9001      	str	r0, [sp, #4]
			if (b != 0)
1000a778:	2800      	cmp	r0, #0
1000a77a:	d100      	bne.n	1000a77e <_Z8PlayDemov+0x7ce>
1000a77c:	e094      	b.n	1000a8a8 <_Z8PlayDemov+0x8f8>
				if ((y < 1) || (y >= MAPH-1))
1000a77e:	2f11      	cmp	r7, #17
1000a780:	d900      	bls.n	1000a784 <_Z8PlayDemov+0x7d4>
1000a782:	e141      	b.n	1000aa08 <_Z8PlayDemov+0xa58>
					if (*d != TILE_EMPTY) ok = False;
1000a784:	2036      	movs	r0, #54	; 0x36
1000a786:	5c08      	ldrb	r0, [r1, r0]
1000a788:	3808      	subs	r0, #8
1000a78a:	4246      	negs	r6, r0
1000a78c:	4170      	adcs	r0, r6
1000a78e:	4240      	negs	r0, r0
1000a790:	4002      	ands	r2, r0
			if (b != 0)
1000a792:	7a58      	ldrb	r0, [r3, #9]
1000a794:	2800      	cmp	r0, #0
1000a796:	d000      	beq.n	1000a79a <_Z8PlayDemov+0x7ea>
1000a798:	e08d      	b.n	1000a8b6 <_Z8PlayDemov+0x906>
1000a79a:	7a98      	ldrb	r0, [r3, #10]
1000a79c:	2800      	cmp	r0, #0
1000a79e:	d000      	beq.n	1000a7a2 <_Z8PlayDemov+0x7f2>
1000a7a0:	e094      	b.n	1000a8cc <_Z8PlayDemov+0x91c>
1000a7a2:	7ad8      	ldrb	r0, [r3, #11]
1000a7a4:	2800      	cmp	r0, #0
1000a7a6:	d000      	beq.n	1000a7aa <_Z8PlayDemov+0x7fa>
1000a7a8:	e09b      	b.n	1000a8e2 <_Z8PlayDemov+0x932>
			b = *s++;
1000a7aa:	7b1e      	ldrb	r6, [r3, #12]
			if (b != 0)
1000a7ac:	2e00      	cmp	r6, #0
1000a7ae:	d100      	bne.n	1000a7b2 <_Z8PlayDemov+0x802>
1000a7b0:	e0a2      	b.n	1000a8f8 <_Z8PlayDemov+0x948>
				if ((y < 1) || (y >= MAPH-1))
1000a7b2:	4660      	mov	r0, ip
1000a7b4:	2811      	cmp	r0, #17
1000a7b6:	d900      	bls.n	1000a7ba <_Z8PlayDemov+0x80a>
1000a7b8:	e0b2      	b.n	1000a920 <_Z8PlayDemov+0x970>
					if (*d != TILE_EMPTY) ok = False;
1000a7ba:	2051      	movs	r0, #81	; 0x51
1000a7bc:	5c08      	ldrb	r0, [r1, r0]
1000a7be:	3808      	subs	r0, #8
1000a7c0:	4247      	negs	r7, r0
1000a7c2:	4178      	adcs	r0, r7
1000a7c4:	4240      	negs	r0, r0
1000a7c6:	4002      	ands	r2, r0
			if (b != 0)
1000a7c8:	7b58      	ldrb	r0, [r3, #13]
1000a7ca:	2800      	cmp	r0, #0
1000a7cc:	d000      	beq.n	1000a7d0 <_Z8PlayDemov+0x820>
1000a7ce:	e09a      	b.n	1000a906 <_Z8PlayDemov+0x956>
			b = *s++;
1000a7d0:	7b98      	ldrb	r0, [r3, #14]
			if (b != 0)
1000a7d2:	2800      	cmp	r0, #0
1000a7d4:	d000      	beq.n	1000a7d8 <_Z8PlayDemov+0x828>
1000a7d6:	e09f      	b.n	1000a918 <_Z8PlayDemov+0x968>
			b = *s++;
1000a7d8:	7bdd      	ldrb	r5, [r3, #15]
1000a7da:	9500      	str	r5, [sp, #0]
			if (b != 0)
1000a7dc:	2d00      	cmp	r5, #0
1000a7de:	d000      	beq.n	1000a7e2 <_Z8PlayDemov+0x832>
1000a7e0:	e162      	b.n	1000aaa8 <_Z8PlayDemov+0xaf8>
	if (!CheckBrick(BrickX, BrickY, Brick))
1000a7e2:	2a00      	cmp	r2, #0
1000a7e4:	d100      	bne.n	1000a7e8 <_Z8PlayDemov+0x838>
1000a7e6:	e09b      	b.n	1000a920 <_Z8PlayDemov+0x970>
			if (b != 0) *d = b;
1000a7e8:	464a      	mov	r2, r9
1000a7ea:	2a00      	cmp	r2, #0
1000a7ec:	d003      	beq.n	1000a7f6 <_Z8PlayDemov+0x846>
1000a7ee:	465a      	mov	r2, fp
1000a7f0:	4657      	mov	r7, sl
1000a7f2:	464d      	mov	r5, r9
1000a7f4:	55d5      	strb	r5, [r2, r7]
			b = *s++;
1000a7f6:	785a      	ldrb	r2, [r3, #1]
			if (b != 0) *d = b;
1000a7f8:	2a00      	cmp	r2, #0
1000a7fa:	d000      	beq.n	1000a7fe <_Z8PlayDemov+0x84e>
1000a7fc:	704a      	strb	r2, [r1, #1]
			b = *s++;
1000a7fe:	789a      	ldrb	r2, [r3, #2]
			if (b != 0) *d = b;
1000a800:	2a00      	cmp	r2, #0
1000a802:	d000      	beq.n	1000a806 <_Z8PlayDemov+0x856>
1000a804:	708a      	strb	r2, [r1, #2]
			b = *s++;
1000a806:	78da      	ldrb	r2, [r3, #3]
			if (b != 0) *d = b;
1000a808:	2a00      	cmp	r2, #0
1000a80a:	d000      	beq.n	1000a80e <_Z8PlayDemov+0x85e>
1000a80c:	70ca      	strb	r2, [r1, #3]
1000a80e:	4642      	mov	r2, r8
1000a810:	2a00      	cmp	r2, #0
1000a812:	d000      	beq.n	1000a816 <_Z8PlayDemov+0x866>
1000a814:	76ca      	strb	r2, [r1, #27]
			b = *s++;
1000a816:	795a      	ldrb	r2, [r3, #5]
			if (b != 0) *d = b;
1000a818:	2a00      	cmp	r2, #0
1000a81a:	d000      	beq.n	1000a81e <_Z8PlayDemov+0x86e>
1000a81c:	770a      	strb	r2, [r1, #28]
			b = *s++;
1000a81e:	799a      	ldrb	r2, [r3, #6]
			if (b != 0) *d = b;
1000a820:	2a00      	cmp	r2, #0
1000a822:	d000      	beq.n	1000a826 <_Z8PlayDemov+0x876>
1000a824:	774a      	strb	r2, [r1, #29]
			b = *s++;
1000a826:	79da      	ldrb	r2, [r3, #7]
			if (b != 0) *d = b;
1000a828:	2a00      	cmp	r2, #0
1000a82a:	d000      	beq.n	1000a82e <_Z8PlayDemov+0x87e>
1000a82c:	778a      	strb	r2, [r1, #30]
1000a82e:	9d01      	ldr	r5, [sp, #4]
1000a830:	2d00      	cmp	r5, #0
1000a832:	d001      	beq.n	1000a838 <_Z8PlayDemov+0x888>
1000a834:	2236      	movs	r2, #54	; 0x36
1000a836:	548d      	strb	r5, [r1, r2]
			b = *s++;
1000a838:	7a5a      	ldrb	r2, [r3, #9]
			if (b != 0) *d = b;
1000a83a:	2a00      	cmp	r2, #0
1000a83c:	d001      	beq.n	1000a842 <_Z8PlayDemov+0x892>
1000a83e:	2537      	movs	r5, #55	; 0x37
1000a840:	554a      	strb	r2, [r1, r5]
			b = *s++;
1000a842:	7a9a      	ldrb	r2, [r3, #10]
			if (b != 0) *d = b;
1000a844:	2a00      	cmp	r2, #0
1000a846:	d001      	beq.n	1000a84c <_Z8PlayDemov+0x89c>
1000a848:	2538      	movs	r5, #56	; 0x38
1000a84a:	554a      	strb	r2, [r1, r5]
			b = *s++;
1000a84c:	7ada      	ldrb	r2, [r3, #11]
			if (b != 0) *d = b;
1000a84e:	2a00      	cmp	r2, #0
1000a850:	d001      	beq.n	1000a856 <_Z8PlayDemov+0x8a6>
1000a852:	2539      	movs	r5, #57	; 0x39
1000a854:	554a      	strb	r2, [r1, r5]
1000a856:	2e00      	cmp	r6, #0
1000a858:	d001      	beq.n	1000a85e <_Z8PlayDemov+0x8ae>
1000a85a:	2251      	movs	r2, #81	; 0x51
1000a85c:	548e      	strb	r6, [r1, r2]
			b = *s++;
1000a85e:	7b5b      	ldrb	r3, [r3, #13]
			if (b != 0) *d = b;
1000a860:	2b00      	cmp	r3, #0
1000a862:	d001      	beq.n	1000a868 <_Z8PlayDemov+0x8b8>
1000a864:	2252      	movs	r2, #82	; 0x52
1000a866:	548b      	strb	r3, [r1, r2]
1000a868:	2800      	cmp	r0, #0
1000a86a:	d001      	beq.n	1000a870 <_Z8PlayDemov+0x8c0>
1000a86c:	2353      	movs	r3, #83	; 0x53
1000a86e:	54c8      	strb	r0, [r1, r3]
1000a870:	9a00      	ldr	r2, [sp, #0]
1000a872:	2a00      	cmp	r2, #0
1000a874:	d001      	beq.n	1000a87a <_Z8PlayDemov+0x8ca>
1000a876:	2354      	movs	r3, #84	; 0x54
1000a878:	54ca      	strb	r2, [r1, r3]

		// display new brick
		DispBrick(BrickX, BrickY, Brick);

		// display new brick
		sleep_ms(200);
1000a87a:	20c8      	movs	r0, #200	; 0xc8
1000a87c:	f7f8 f92c 	bl	10002ad8 <sleep_ms>
1000a880:	23d0      	movs	r3, #208	; 0xd0
1000a882:	061b      	lsls	r3, r3, #24
1000a884:	685b      	ldr	r3, [r3, #4]
	if (!gpio_get(PB_RT))		// RIGHT
1000a886:	029b      	lsls	r3, r3, #10
1000a888:	d501      	bpl.n	1000a88e <_Z8PlayDemov+0x8de>
1000a88a:	f7ff fba6 	bl	10009fda <_Z8PlayDemov+0x2a>
		sleep_ms(250);
1000a88e:	20fa      	movs	r0, #250	; 0xfa
1000a890:	f7f8 f922 	bl	10002ad8 <sleep_ms>
	}

	// stop demo mode
	Demo = False;
1000a894:	2300      	movs	r3, #0
1000a896:	4a54      	ldr	r2, [pc, #336]	; (1000a9e8 <_Z8PlayDemov+0xa38>)
1000a898:	7013      	strb	r3, [r2, #0]
}
1000a89a:	b013      	add	sp, #76	; 0x4c
1000a89c:	bcf0      	pop	{r4, r5, r6, r7}
1000a89e:	46bb      	mov	fp, r7
1000a8a0:	46b2      	mov	sl, r6
1000a8a2:	46a9      	mov	r9, r5
1000a8a4:	46a0      	mov	r8, r4
1000a8a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
			b = *s++;
1000a8a8:	7a58      	ldrb	r0, [r3, #9]
			if (b != 0)
1000a8aa:	2800      	cmp	r0, #0
1000a8ac:	d100      	bne.n	1000a8b0 <_Z8PlayDemov+0x900>
1000a8ae:	e0c6      	b.n	1000aa3e <_Z8PlayDemov+0xa8e>
				if ((y < 1) || (y >= MAPH-1))
1000a8b0:	2f11      	cmp	r7, #17
1000a8b2:	d900      	bls.n	1000a8b6 <_Z8PlayDemov+0x906>
1000a8b4:	e0a8      	b.n	1000aa08 <_Z8PlayDemov+0xa58>
					if (*d != TILE_EMPTY) ok = False;
1000a8b6:	2037      	movs	r0, #55	; 0x37
1000a8b8:	5c08      	ldrb	r0, [r1, r0]
1000a8ba:	3808      	subs	r0, #8
1000a8bc:	4246      	negs	r6, r0
1000a8be:	4170      	adcs	r0, r6
1000a8c0:	4240      	negs	r0, r0
1000a8c2:	4002      	ands	r2, r0
			if (b != 0)
1000a8c4:	7a98      	ldrb	r0, [r3, #10]
1000a8c6:	2800      	cmp	r0, #0
1000a8c8:	d100      	bne.n	1000a8cc <_Z8PlayDemov+0x91c>
1000a8ca:	e0a0      	b.n	1000aa0e <_Z8PlayDemov+0xa5e>
					if (*d != TILE_EMPTY) ok = False;
1000a8cc:	2038      	movs	r0, #56	; 0x38
1000a8ce:	5c08      	ldrb	r0, [r1, r0]
1000a8d0:	3808      	subs	r0, #8
1000a8d2:	4246      	negs	r6, r0
1000a8d4:	4170      	adcs	r0, r6
1000a8d6:	4240      	negs	r0, r0
1000a8d8:	4002      	ands	r2, r0
			if (b != 0)
1000a8da:	7ad8      	ldrb	r0, [r3, #11]
1000a8dc:	2800      	cmp	r0, #0
1000a8de:	d100      	bne.n	1000a8e2 <_Z8PlayDemov+0x932>
1000a8e0:	e763      	b.n	1000a7aa <_Z8PlayDemov+0x7fa>
					if (*d != TILE_EMPTY) ok = False;
1000a8e2:	2039      	movs	r0, #57	; 0x39
1000a8e4:	5c08      	ldrb	r0, [r1, r0]
					ok = False;
1000a8e6:	3808      	subs	r0, #8
1000a8e8:	4246      	negs	r6, r0
1000a8ea:	4170      	adcs	r0, r6
			b = *s++;
1000a8ec:	7b1e      	ldrb	r6, [r3, #12]
					ok = False;
1000a8ee:	4240      	negs	r0, r0
1000a8f0:	4002      	ands	r2, r0
			if (b != 0)
1000a8f2:	2e00      	cmp	r6, #0
1000a8f4:	d000      	beq.n	1000a8f8 <_Z8PlayDemov+0x948>
1000a8f6:	e75c      	b.n	1000a7b2 <_Z8PlayDemov+0x802>
1000a8f8:	7b58      	ldrb	r0, [r3, #13]
1000a8fa:	2800      	cmp	r0, #0
1000a8fc:	d100      	bne.n	1000a900 <_Z8PlayDemov+0x950>
1000a8fe:	e0a6      	b.n	1000aa4e <_Z8PlayDemov+0xa9e>
				if ((y < 1) || (y >= MAPH-1))
1000a900:	4660      	mov	r0, ip
1000a902:	2811      	cmp	r0, #17
1000a904:	d80c      	bhi.n	1000a920 <_Z8PlayDemov+0x970>
					if (*d != TILE_EMPTY) ok = False;
1000a906:	2052      	movs	r0, #82	; 0x52
1000a908:	5c08      	ldrb	r0, [r1, r0]
1000a90a:	2808      	cmp	r0, #8
1000a90c:	d100      	bne.n	1000a910 <_Z8PlayDemov+0x960>
1000a90e:	e0ba      	b.n	1000aa86 <_Z8PlayDemov+0xad6>
			b = *s++;
1000a910:	7b98      	ldrb	r0, [r3, #14]
			if (b != 0)
1000a912:	2800      	cmp	r0, #0
1000a914:	d004      	beq.n	1000a920 <_Z8PlayDemov+0x970>
					if (*d != TILE_EMPTY) ok = False;
1000a916:	2200      	movs	r2, #0
1000a918:	2753      	movs	r7, #83	; 0x53
1000a91a:	5dcf      	ldrb	r7, [r1, r7]
1000a91c:	2f08      	cmp	r7, #8
1000a91e:	d065      	beq.n	1000a9ec <_Z8PlayDemov+0xa3c>
1000a920:	f7fb f8aa 	bl	10005a78 <_Z8CheckEndv.part.0>
		if (!CheckEnd()) break;
1000a924:	2800      	cmp	r0, #0
1000a926:	d0b5      	beq.n	1000a894 <_Z8PlayDemov+0x8e4>
	u8* d = &Board[x + y*MAPW];
1000a928:	2200      	movs	r2, #0
1000a92a:	4b2c      	ldr	r3, [pc, #176]	; (1000a9dc <_Z8PlayDemov+0xa2c>)
1000a92c:	4659      	mov	r1, fp
1000a92e:	569a      	ldrsb	r2, [r3, r2]
			b = *s++;
1000a930:	482c      	ldr	r0, [pc, #176]	; (1000a9e4 <_Z8PlayDemov+0xa34>)
	u8* d = &Board[x + y*MAPW];
1000a932:	0053      	lsls	r3, r2, #1
1000a934:	189b      	adds	r3, r3, r2
1000a936:	00da      	lsls	r2, r3, #3
1000a938:	189b      	adds	r3, r3, r2
1000a93a:	469a      	mov	sl, r3
1000a93c:	4a26      	ldr	r2, [pc, #152]	; (1000a9d8 <_Z8PlayDemov+0xa28>)
	const u8* s = &BrickTemp[brick*BRICKTEMPSIZE];
1000a93e:	4b28      	ldr	r3, [pc, #160]	; (1000a9e0 <_Z8PlayDemov+0xa30>)
	u8* d = &Board[x + y*MAPW];
1000a940:	7812      	ldrb	r2, [r2, #0]
1000a942:	b252      	sxtb	r2, r2
1000a944:	4492      	add	sl, r2
	const u8* s = &BrickTemp[brick*BRICKTEMPSIZE];
1000a946:	781a      	ldrb	r2, [r3, #0]
1000a948:	4b26      	ldr	r3, [pc, #152]	; (1000a9e4 <_Z8PlayDemov+0xa34>)
1000a94a:	0112      	lsls	r2, r2, #4
1000a94c:	189b      	adds	r3, r3, r2
			b = *s++;
1000a94e:	5c82      	ldrb	r2, [r0, r2]
1000a950:	7b1e      	ldrb	r6, [r3, #12]
1000a952:	4691      	mov	r9, r2
1000a954:	791a      	ldrb	r2, [r3, #4]
1000a956:	7b98      	ldrb	r0, [r3, #14]
1000a958:	4690      	mov	r8, r2
1000a95a:	7a1a      	ldrb	r2, [r3, #8]
	u8* d = &Board[x + y*MAPW];
1000a95c:	4451      	add	r1, sl
			b = *s++;
1000a95e:	9201      	str	r2, [sp, #4]
1000a960:	7bda      	ldrb	r2, [r3, #15]
1000a962:	9200      	str	r2, [sp, #0]
1000a964:	e740      	b.n	1000a7e8 <_Z8PlayDemov+0x838>
			b = *s++;
1000a966:	795d      	ldrb	r5, [r3, #5]
			if (b != 0)
1000a968:	2d00      	cmp	r5, #0
1000a96a:	d078      	beq.n	1000aa5e <_Z8PlayDemov+0xaae>
				if ((y < 1) || (y >= MAPH-1))
1000a96c:	2811      	cmp	r0, #17
1000a96e:	d85b      	bhi.n	1000aa28 <_Z8PlayDemov+0xa78>
					if (*d != TILE_EMPTY) ok = False;
1000a970:	7f0d      	ldrb	r5, [r1, #28]
1000a972:	3d08      	subs	r5, #8
1000a974:	426e      	negs	r6, r5
1000a976:	4175      	adcs	r5, r6
1000a978:	426d      	negs	r5, r5
1000a97a:	402a      	ands	r2, r5
			if (b != 0)
1000a97c:	799d      	ldrb	r5, [r3, #6]
1000a97e:	2d00      	cmp	r5, #0
1000a980:	d055      	beq.n	1000aa2e <_Z8PlayDemov+0xa7e>
					if (*d != TILE_EMPTY) ok = False;
1000a982:	7f4d      	ldrb	r5, [r1, #29]
1000a984:	3d08      	subs	r5, #8
1000a986:	426e      	negs	r6, r5
1000a988:	4175      	adcs	r5, r6
1000a98a:	426d      	negs	r5, r5
1000a98c:	402a      	ands	r2, r5
			if (b != 0)
1000a98e:	79dd      	ldrb	r5, [r3, #7]
1000a990:	2d00      	cmp	r5, #0
1000a992:	d100      	bne.n	1000a996 <_Z8PlayDemov+0x9e6>
1000a994:	e6eb      	b.n	1000a76e <_Z8PlayDemov+0x7be>
					if (*d != TILE_EMPTY) ok = False;
1000a996:	7f8d      	ldrb	r5, [r1, #30]
					ok = False;
1000a998:	3d08      	subs	r5, #8
1000a99a:	426e      	negs	r6, r5
1000a99c:	4175      	adcs	r5, r6
1000a99e:	426d      	negs	r5, r5
1000a9a0:	402a      	ands	r2, r5
1000a9a2:	e6e4      	b.n	1000a76e <_Z8PlayDemov+0x7be>
	Bool ok = True;
1000a9a4:	2201      	movs	r2, #1
			if (b != 0)
1000a9a6:	785d      	ldrb	r5, [r3, #1]
1000a9a8:	2d00      	cmp	r5, #0
1000a9aa:	d003      	beq.n	1000a9b4 <_Z8PlayDemov+0xa04>
				if ((y < 1) || (y >= MAPH-1))
1000a9ac:	1e45      	subs	r5, r0, #1
1000a9ae:	2d11      	cmp	r5, #17
1000a9b0:	d95c      	bls.n	1000aa6c <_Z8PlayDemov+0xabc>
					ok = False;
1000a9b2:	2200      	movs	r2, #0
			if (b != 0)
1000a9b4:	789d      	ldrb	r5, [r3, #2]
1000a9b6:	2d00      	cmp	r5, #0
1000a9b8:	d004      	beq.n	1000a9c4 <_Z8PlayDemov+0xa14>
				if ((y < 1) || (y >= MAPH-1))
1000a9ba:	1e45      	subs	r5, r0, #1
1000a9bc:	2d11      	cmp	r5, #17
1000a9be:	d800      	bhi.n	1000a9c2 <_Z8PlayDemov+0xa12>
1000a9c0:	e6aa      	b.n	1000a718 <_Z8PlayDemov+0x768>
					ok = False;
1000a9c2:	2200      	movs	r2, #0
			if (b != 0)
1000a9c4:	78dd      	ldrb	r5, [r3, #3]
1000a9c6:	2d00      	cmp	r5, #0
1000a9c8:	d100      	bne.n	1000a9cc <_Z8PlayDemov+0xa1c>
1000a9ca:	e6b4      	b.n	1000a736 <_Z8PlayDemov+0x786>
				if ((y < 1) || (y >= MAPH-1))
1000a9cc:	1e45      	subs	r5, r0, #1
1000a9ce:	2d11      	cmp	r5, #17
1000a9d0:	d800      	bhi.n	1000a9d4 <_Z8PlayDemov+0xa24>
1000a9d2:	e6aa      	b.n	1000a72a <_Z8PlayDemov+0x77a>
					ok = False;
1000a9d4:	2200      	movs	r2, #0
1000a9d6:	e6ae      	b.n	1000a736 <_Z8PlayDemov+0x786>
1000a9d8:	20012765 	.word	0x20012765
1000a9dc:	20012766 	.word	0x20012766
1000a9e0:	20012764 	.word	0x20012764
1000a9e4:	1000e9f4 	.word	0x1000e9f4
1000a9e8:	20012767 	.word	0x20012767
			b = *s++;
1000a9ec:	7bdd      	ldrb	r5, [r3, #15]
1000a9ee:	9500      	str	r5, [sp, #0]
			if (b != 0)
1000a9f0:	2d00      	cmp	r5, #0
1000a9f2:	d100      	bne.n	1000a9f6 <_Z8PlayDemov+0xa46>
1000a9f4:	e6f5      	b.n	1000a7e2 <_Z8PlayDemov+0x832>
1000a9f6:	4684      	mov	ip, r0
1000a9f8:	9800      	ldr	r0, [sp, #0]
					if (*d != TILE_EMPTY) ok = False;
1000a9fa:	2754      	movs	r7, #84	; 0x54
1000a9fc:	5dcf      	ldrb	r7, [r1, r7]
1000a9fe:	2f08      	cmp	r7, #8
1000aa00:	d18e      	bne.n	1000a920 <_Z8PlayDemov+0x970>
1000aa02:	9000      	str	r0, [sp, #0]
1000aa04:	4660      	mov	r0, ip
1000aa06:	e6ec      	b.n	1000a7e2 <_Z8PlayDemov+0x832>
			b = *s++;
1000aa08:	7a9a      	ldrb	r2, [r3, #10]
			if (b != 0)
1000aa0a:	2a00      	cmp	r2, #0
1000aa0c:	d106      	bne.n	1000aa1c <_Z8PlayDemov+0xa6c>
1000aa0e:	7ad8      	ldrb	r0, [r3, #11]
1000aa10:	2800      	cmp	r0, #0
1000aa12:	d100      	bne.n	1000aa16 <_Z8PlayDemov+0xa66>
1000aa14:	e6c9      	b.n	1000a7aa <_Z8PlayDemov+0x7fa>
				if ((y < 1) || (y >= MAPH-1))
1000aa16:	2f11      	cmp	r7, #17
1000aa18:	d800      	bhi.n	1000aa1c <_Z8PlayDemov+0xa6c>
1000aa1a:	e762      	b.n	1000a8e2 <_Z8PlayDemov+0x932>
					ok = False;
1000aa1c:	2200      	movs	r2, #0
1000aa1e:	e6c4      	b.n	1000a7aa <_Z8PlayDemov+0x7fa>
			b = *s++;
1000aa20:	795a      	ldrb	r2, [r3, #5]
			if (b != 0)
1000aa22:	2a00      	cmp	r2, #0
1000aa24:	d100      	bne.n	1000aa28 <_Z8PlayDemov+0xa78>
1000aa26:	e6a2      	b.n	1000a76e <_Z8PlayDemov+0x7be>
			b = *s++;
1000aa28:	799a      	ldrb	r2, [r3, #6]
			if (b != 0)
1000aa2a:	2a00      	cmp	r2, #0
1000aa2c:	d105      	bne.n	1000aa3a <_Z8PlayDemov+0xa8a>
1000aa2e:	79dd      	ldrb	r5, [r3, #7]
1000aa30:	2d00      	cmp	r5, #0
1000aa32:	d100      	bne.n	1000aa36 <_Z8PlayDemov+0xa86>
1000aa34:	e69b      	b.n	1000a76e <_Z8PlayDemov+0x7be>
				if ((y < 1) || (y >= MAPH-1))
1000aa36:	2811      	cmp	r0, #17
1000aa38:	d9ad      	bls.n	1000a996 <_Z8PlayDemov+0x9e6>
					ok = False;
1000aa3a:	2200      	movs	r2, #0
1000aa3c:	e697      	b.n	1000a76e <_Z8PlayDemov+0x7be>
			if (b != 0)
1000aa3e:	7a98      	ldrb	r0, [r3, #10]
1000aa40:	2800      	cmp	r0, #0
1000aa42:	d0e4      	beq.n	1000aa0e <_Z8PlayDemov+0xa5e>
				if ((y < 1) || (y >= MAPH-1))
1000aa44:	2f11      	cmp	r7, #17
1000aa46:	d800      	bhi.n	1000aa4a <_Z8PlayDemov+0xa9a>
1000aa48:	e740      	b.n	1000a8cc <_Z8PlayDemov+0x91c>
					ok = False;
1000aa4a:	2200      	movs	r2, #0
1000aa4c:	e6ad      	b.n	1000a7aa <_Z8PlayDemov+0x7fa>
			b = *s++;
1000aa4e:	7b98      	ldrb	r0, [r3, #14]
			if (b != 0)
1000aa50:	2800      	cmp	r0, #0
1000aa52:	d01c      	beq.n	1000aa8e <_Z8PlayDemov+0xade>
				if ((y < 1) || (y >= MAPH-1))
1000aa54:	4665      	mov	r5, ip
1000aa56:	2d11      	cmp	r5, #17
1000aa58:	d900      	bls.n	1000aa5c <_Z8PlayDemov+0xaac>
1000aa5a:	e761      	b.n	1000a920 <_Z8PlayDemov+0x970>
1000aa5c:	e75c      	b.n	1000a918 <_Z8PlayDemov+0x968>
			if (b != 0)
1000aa5e:	799d      	ldrb	r5, [r3, #6]
1000aa60:	2d00      	cmp	r5, #0
1000aa62:	d0e4      	beq.n	1000aa2e <_Z8PlayDemov+0xa7e>
				if ((y < 1) || (y >= MAPH-1))
1000aa64:	2811      	cmp	r0, #17
1000aa66:	d98c      	bls.n	1000a982 <_Z8PlayDemov+0x9d2>
					ok = False;
1000aa68:	2200      	movs	r2, #0
1000aa6a:	e680      	b.n	1000a76e <_Z8PlayDemov+0x7be>
					if (*d != TILE_EMPTY) ok = False;
1000aa6c:	784d      	ldrb	r5, [r1, #1]
1000aa6e:	3d08      	subs	r5, #8
1000aa70:	426e      	negs	r6, r5
1000aa72:	4175      	adcs	r5, r6
1000aa74:	426d      	negs	r5, r5
1000aa76:	402a      	ands	r2, r5
			if (b != 0)
1000aa78:	789d      	ldrb	r5, [r3, #2]
1000aa7a:	2d00      	cmp	r5, #0
1000aa7c:	d000      	beq.n	1000aa80 <_Z8PlayDemov+0xad0>
1000aa7e:	e64b      	b.n	1000a718 <_Z8PlayDemov+0x768>
1000aa80:	e7a0      	b.n	1000a9c4 <_Z8PlayDemov+0xa14>
					ok = False;
1000aa82:	2200      	movs	r2, #0
1000aa84:	e78f      	b.n	1000a9a6 <_Z8PlayDemov+0x9f6>
			b = *s++;
1000aa86:	7b98      	ldrb	r0, [r3, #14]
			if (b != 0)
1000aa88:	2800      	cmp	r0, #0
1000aa8a:	d000      	beq.n	1000aa8e <_Z8PlayDemov+0xade>
1000aa8c:	e744      	b.n	1000a918 <_Z8PlayDemov+0x968>
			b = *s++;
1000aa8e:	7bd8      	ldrb	r0, [r3, #15]
			if (b != 0)
1000aa90:	2800      	cmp	r0, #0
1000aa92:	d006      	beq.n	1000aaa2 <_Z8PlayDemov+0xaf2>
				if ((y < 1) || (y >= MAPH-1))
1000aa94:	4665      	mov	r5, ip
1000aa96:	2d11      	cmp	r5, #17
1000aa98:	d900      	bls.n	1000aa9c <_Z8PlayDemov+0xaec>
1000aa9a:	e741      	b.n	1000a920 <_Z8PlayDemov+0x970>
1000aa9c:	2500      	movs	r5, #0
1000aa9e:	46ac      	mov	ip, r5
1000aaa0:	e7ab      	b.n	1000a9fa <_Z8PlayDemov+0xa4a>
			if (b != 0)
1000aaa2:	2500      	movs	r5, #0
1000aaa4:	9500      	str	r5, [sp, #0]
1000aaa6:	e69c      	b.n	1000a7e2 <_Z8PlayDemov+0x832>
1000aaa8:	2000      	movs	r0, #0
1000aaaa:	e7a4      	b.n	1000a9f6 <_Z8PlayDemov+0xa46>

1000aaac <_Z12initJoyStickv>:
// #define PB_LT 20		// Left direction
// #define PB_RT 21		// Right direction
// #define PB_FR 17		// Fire

void initJoyStick()
{
1000aaac:	b510      	push	{r4, lr}
	gpio_init(PB_UP);
1000aaae:	2010      	movs	r0, #16
1000aab0:	f7f6 fb22 	bl	100010f8 <gpio_init>
 *  \ingroup hardware_gpio
 *
 * \param mask Bitmask of GPIO to set to input, as bits 0-29
 */
static inline void gpio_set_dir_in_masked(uint32_t mask) {
    sio_hw->gpio_oe_clr = mask;
1000aab4:	24d0      	movs	r4, #208	; 0xd0
1000aab6:	2380      	movs	r3, #128	; 0x80
1000aab8:	0624      	lsls	r4, r4, #24
1000aaba:	025b      	lsls	r3, r3, #9
1000aabc:	62a3      	str	r3, [r4, #40]	; 0x28
    gpio_set_pulls(gpio, true, false);
1000aabe:	2200      	movs	r2, #0
1000aac0:	2101      	movs	r1, #1
1000aac2:	2010      	movs	r0, #16
1000aac4:	f7f6 faee 	bl	100010a4 <gpio_set_pulls>
	gpio_set_dir(PB_UP, GPIO_IN);
	gpio_pull_up(PB_UP);
	
	gpio_init(PB_DN);
1000aac8:	2012      	movs	r0, #18
1000aaca:	f7f6 fb15 	bl	100010f8 <gpio_init>
    sio_hw->gpio_oe_clr = mask;
1000aace:	2380      	movs	r3, #128	; 0x80
1000aad0:	02db      	lsls	r3, r3, #11
1000aad2:	62a3      	str	r3, [r4, #40]	; 0x28
    gpio_set_pulls(gpio, true, false);
1000aad4:	2200      	movs	r2, #0
1000aad6:	2101      	movs	r1, #1
1000aad8:	2012      	movs	r0, #18
1000aada:	f7f6 fae3 	bl	100010a4 <gpio_set_pulls>
	gpio_set_dir(PB_DN, GPIO_IN);
	gpio_pull_up(PB_DN);
	
	gpio_init(PB_LT);
1000aade:	2014      	movs	r0, #20
1000aae0:	f7f6 fb0a 	bl	100010f8 <gpio_init>
    sio_hw->gpio_oe_clr = mask;
1000aae4:	2380      	movs	r3, #128	; 0x80
1000aae6:	035b      	lsls	r3, r3, #13
1000aae8:	62a3      	str	r3, [r4, #40]	; 0x28
    gpio_set_pulls(gpio, true, false);
1000aaea:	2200      	movs	r2, #0
1000aaec:	2101      	movs	r1, #1
1000aaee:	2014      	movs	r0, #20
1000aaf0:	f7f6 fad8 	bl	100010a4 <gpio_set_pulls>
	gpio_set_dir(PB_LT, GPIO_IN);
	gpio_pull_up(PB_LT);
	
	gpio_init(PB_RT);
1000aaf4:	2015      	movs	r0, #21
1000aaf6:	f7f6 faff 	bl	100010f8 <gpio_init>
    sio_hw->gpio_oe_clr = mask;
1000aafa:	2380      	movs	r3, #128	; 0x80
1000aafc:	039b      	lsls	r3, r3, #14
1000aafe:	62a3      	str	r3, [r4, #40]	; 0x28
    gpio_set_pulls(gpio, true, false);
1000ab00:	2200      	movs	r2, #0
1000ab02:	2101      	movs	r1, #1
1000ab04:	2015      	movs	r0, #21
1000ab06:	f7f6 facd 	bl	100010a4 <gpio_set_pulls>
	gpio_set_dir(PB_RT, GPIO_IN);
	gpio_pull_up(PB_RT);

	gpio_init(PB_FR);
1000ab0a:	2011      	movs	r0, #17
1000ab0c:	f7f6 faf4 	bl	100010f8 <gpio_init>
    sio_hw->gpio_oe_clr = mask;
1000ab10:	2380      	movs	r3, #128	; 0x80
1000ab12:	029b      	lsls	r3, r3, #10
1000ab14:	62a3      	str	r3, [r4, #40]	; 0x28
    gpio_set_pulls(gpio, true, false);
1000ab16:	2200      	movs	r2, #0
1000ab18:	2101      	movs	r1, #1
1000ab1a:	2011      	movs	r0, #17
1000ab1c:	f7f6 fac2 	bl	100010a4 <gpio_set_pulls>
	gpio_set_dir(PB_FR, GPIO_IN);
	gpio_pull_up(PB_FR);

	gpio_init(26);
1000ab20:	201a      	movs	r0, #26
1000ab22:	f7f6 fae9 	bl	100010f8 <gpio_init>
    sio_hw->gpio_oe_clr = mask;
1000ab26:	2380      	movs	r3, #128	; 0x80
1000ab28:	04db      	lsls	r3, r3, #19
1000ab2a:	62a3      	str	r3, [r4, #40]	; 0x28
    gpio_set_pulls(gpio, true, false);
1000ab2c:	2200      	movs	r2, #0
1000ab2e:	2101      	movs	r1, #1
1000ab30:	201a      	movs	r0, #26
1000ab32:	f7f6 fab7 	bl	100010a4 <gpio_set_pulls>
	gpio_set_dir(26, GPIO_IN);
	gpio_pull_up(26);

	gpio_init(27);
1000ab36:	201b      	movs	r0, #27
1000ab38:	f7f6 fade 	bl	100010f8 <gpio_init>
    sio_hw->gpio_oe_clr = mask;
1000ab3c:	2380      	movs	r3, #128	; 0x80
1000ab3e:	051b      	lsls	r3, r3, #20
1000ab40:	62a3      	str	r3, [r4, #40]	; 0x28
    gpio_set_pulls(gpio, true, false);
1000ab42:	2200      	movs	r2, #0
1000ab44:	2101      	movs	r1, #1
1000ab46:	201b      	movs	r0, #27
1000ab48:	f7f6 faac 	bl	100010a4 <gpio_set_pulls>
	gpio_set_dir(27, GPIO_IN);
	gpio_pull_up(27);

	gpio_init(22);
1000ab4c:	2016      	movs	r0, #22
1000ab4e:	f7f6 fad3 	bl	100010f8 <gpio_init>
    sio_hw->gpio_oe_clr = mask;
1000ab52:	2380      	movs	r3, #128	; 0x80
1000ab54:	03db      	lsls	r3, r3, #15
    gpio_set_pulls(gpio, true, false);
1000ab56:	2200      	movs	r2, #0
1000ab58:	2101      	movs	r1, #1
1000ab5a:	2016      	movs	r0, #22
    sio_hw->gpio_oe_clr = mask;
1000ab5c:	62a3      	str	r3, [r4, #40]	; 0x28
    gpio_set_pulls(gpio, true, false);
1000ab5e:	f7f6 faa1 	bl	100010a4 <gpio_set_pulls>
	gpio_set_dir(22, GPIO_IN);
	gpio_pull_up(22);
}
1000ab62:	bd10      	pop	{r4, pc}

1000ab64 <main>:

int main()
{
1000ab64:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ab66:	46d6      	mov	lr, sl
1000ab68:	4646      	mov	r6, r8
1000ab6a:	464f      	mov	r7, r9
1000ab6c:	b5c0      	push	{r6, r7, lr}
inline void RandInitSeed() { Rand.InitSeed(); }
1000ab6e:	4850      	ldr	r0, [pc, #320]	; (1000acb0 <main+0x14c>)
1000ab70:	b082      	sub	sp, #8
1000ab72:	f002 fdcb 	bl	1000d70c <_ZN7cRandom8InitSeedEv>

	// initialize random number generator
	RandInitSeed();

	// copy tiles images to RAM buffer
	memcpy(TilesImg_Copy, TilesImg, sizeof(TilesImg));
1000ab76:	22a2      	movs	r2, #162	; 0xa2
1000ab78:	4c4e      	ldr	r4, [pc, #312]	; (1000acb4 <main+0x150>)
1000ab7a:	494f      	ldr	r1, [pc, #316]	; (1000acb8 <main+0x154>)
1000ab7c:	0020      	movs	r0, r4
1000ab7e:	0212      	lsls	r2, r2, #8
1000ab80:	f7f5 ff0a 	bl	10000998 <__wrap___aeabi_memcpy>

	// initialize videomode
	Video(DEV_VGA, RES_VGA, FORM_TILE24, Board, TilesImg_Copy);
1000ab84:	4e4d      	ldr	r6, [pc, #308]	; (1000acbc <main+0x158>)
1000ab86:	2002      	movs	r0, #2
1000ab88:	0033      	movs	r3, r6
1000ab8a:	2206      	movs	r2, #6
1000ab8c:	2104      	movs	r1, #4
1000ab8e:	9400      	str	r4, [sp, #0]
1000ab90:	f001 f9f8 	bl	1000bf84 <_Z5VideohhhPhPKv>

	// prepare tile canvas
	Canvas.img = TilesImg_Copy;
1000ab94:	4b4a      	ldr	r3, [pc, #296]	; (1000acc0 <main+0x15c>)
	Canvas.w = TILESIZE;
	Canvas.h = sizeof(TilesImg)/TILESIZE;
1000ab96:	21d8      	movs	r1, #216	; 0xd8
	Canvas.w = TILESIZE;
1000ab98:	2218      	movs	r2, #24
	Canvas.img = TilesImg_Copy;
1000ab9a:	601c      	str	r4, [r3, #0]
	Canvas.wb = TILESIZE;
	Canvas.format = CANVAS_8;
1000ab9c:	2400      	movs	r4, #0
	Canvas.h = sizeof(TilesImg)/TILESIZE;
1000ab9e:	00c9      	lsls	r1, r1, #3
	Canvas.w = TILESIZE;
1000aba0:	609a      	str	r2, [r3, #8]
	Canvas.wb = TILESIZE;
1000aba2:	611a      	str	r2, [r3, #16]
	Canvas.format = CANVAS_8;
1000aba4:	751c      	strb	r4, [r3, #20]
	Canvas.h = sizeof(TilesImg)/TILESIZE;
1000aba6:	60d9      	str	r1, [r3, #12]

	// initialize stdio
	stdio_init_all();
1000aba8:	f7f7 fa16 	bl	10001fd8 <stdio_init_all>
	initJoyStick();
1000abac:	f7ff ff7e 	bl	1000aaac <_Z12initJoyStickv>

	// initialize sound output
	PWMSndInit();
1000abb0:	f002 fe54 	bl	1000d85c <_Z10PWMSndInitv>

	// display help
	DispHelp();
1000abb4:	f7fa fec6 	bl	10005944 <_Z8DispHelpv>

	// best level
	LevelBest = 1;
1000abb8:	2201      	movs	r2, #1
1000abba:	4b42      	ldr	r3, [pc, #264]	; (1000acc4 <main+0x160>)
    return !!((1ul << gpio) & sio_hw->gpio_in);
1000abbc:	25d0      	movs	r5, #208	; 0xd0
1000abbe:	701a      	strb	r2, [r3, #0]
	ScoreBest = 0;
1000abc0:	4b41      	ldr	r3, [pc, #260]	; (1000acc8 <main+0x164>)
1000abc2:	062d      	lsls	r5, r5, #24
1000abc4:	601c      	str	r4, [r3, #0]
	LinesBest = 0;
1000abc6:	4b41      	ldr	r3, [pc, #260]	; (1000accc <main+0x168>)
1000abc8:	601c      	str	r4, [r3, #0]
	Demo = False;
1000abca:	4b41      	ldr	r3, [pc, #260]	; (1000acd0 <main+0x16c>)
1000abcc:	701c      	strb	r4, [r3, #0]
1000abce:	4b41      	ldr	r3, [pc, #260]	; (1000acd4 <main+0x170>)
1000abd0:	3401      	adds	r4, #1
1000abd2:	4699      	mov	r9, r3
1000abd4:	4b40      	ldr	r3, [pc, #256]	; (1000acd8 <main+0x174>)
1000abd6:	469a      	mov	sl, r3
1000abd8:	4b40      	ldr	r3, [pc, #256]	; (1000acdc <main+0x178>)
1000abda:	4698      	mov	r8, r3
	printf("start game\n");
1000abdc:	4648      	mov	r0, r9
1000abde:	f7f7 f9bf 	bl	10001f60 <__wrap_puts>
	NewGame();
1000abe2:	f7fc fa3d 	bl	10007060 <_Z7NewGamev>
	memcpy(SaveBoard, Board, MAPSIZE);
1000abe6:	2287      	movs	r2, #135	; 0x87
1000abe8:	0031      	movs	r1, r6
1000abea:	0092      	lsls	r2, r2, #2
1000abec:	4650      	mov	r0, sl
1000abee:	f7f5 fed3 	bl	10000998 <__wrap___aeabi_memcpy>
	memcpy(&Board[MAPW/2-4 + MAPH/2*MAPW], PauseMsg, 8);
1000abf2:	0030      	movs	r0, r6
1000abf4:	3018      	adds	r0, #24
1000abf6:	2208      	movs	r2, #8
1000abf8:	4641      	mov	r1, r8
1000abfa:	30ff      	adds	r0, #255	; 0xff
1000abfc:	f7f5 fecc 	bl	10000998 <__wrap___aeabi_memcpy>
1000ac00:	686b      	ldr	r3, [r5, #4]
1000ac02:	0d5b      	lsrs	r3, r3, #21
	if (!gpio_get(PB_RT))		// RIGHT
1000ac04:	421c      	tst	r4, r3
1000ac06:	d047      	beq.n	1000ac98 <main+0x134>
1000ac08:	686b      	ldr	r3, [r5, #4]
1000ac0a:	0c1b      	lsrs	r3, r3, #16
	else if (!gpio_get(PB_UP))	// ROTATE=UP
1000ac0c:	421c      	tst	r4, r3
1000ac0e:	d043      	beq.n	1000ac98 <main+0x134>
1000ac10:	686b      	ldr	r3, [r5, #4]
1000ac12:	0d1b      	lsrs	r3, r3, #20
	else if (!gpio_get(PB_LT))	// LEFT
1000ac14:	421c      	tst	r4, r3
1000ac16:	d03f      	beq.n	1000ac98 <main+0x134>
1000ac18:	686b      	ldr	r3, [r5, #4]
1000ac1a:	0c9b      	lsrs	r3, r3, #18
	else if (!gpio_get(PB_DN))	// DROP=DOWN
1000ac1c:	421c      	tst	r4, r3
1000ac1e:	d03b      	beq.n	1000ac98 <main+0x134>
1000ac20:	686b      	ldr	r3, [r5, #4]
1000ac22:	0c5b      	lsrs	r3, r3, #17
	else if (!gpio_get(PB_FR))	// PAUSE=FIRE
1000ac24:	421c      	tst	r4, r3
1000ac26:	d037      	beq.n	1000ac98 <main+0x134>
	char c = getchar_timeout_us(0);
1000ac28:	2000      	movs	r0, #0
1000ac2a:	f7f7 f9d9 	bl	10001fe0 <getchar_timeout_us>
	while (GetChar() != 0) {}
1000ac2e:	3801      	subs	r0, #1
1000ac30:	b2c0      	uxtb	r0, r0
1000ac32:	28fd      	cmp	r0, #253	; 0xfd
1000ac34:	d9e4      	bls.n	1000ac00 <main+0x9c>
1000ac36:	2764      	movs	r7, #100	; 0x64
1000ac38:	e018      	b.n	1000ac6c <main+0x108>
1000ac3a:	686b      	ldr	r3, [r5, #4]
1000ac3c:	0d1b      	lsrs	r3, r3, #20
	else if (!gpio_get(PB_LT))	// LEFT
1000ac3e:	421c      	tst	r4, r3
1000ac40:	d01c      	beq.n	1000ac7c <main+0x118>
1000ac42:	686b      	ldr	r3, [r5, #4]
1000ac44:	0c9b      	lsrs	r3, r3, #18
	else if (!gpio_get(PB_DN))	// DROP=DOWN
1000ac46:	421c      	tst	r4, r3
1000ac48:	d018      	beq.n	1000ac7c <main+0x118>
1000ac4a:	686b      	ldr	r3, [r5, #4]
1000ac4c:	0c5b      	lsrs	r3, r3, #17
	else if (!gpio_get(PB_FR))	// PAUSE=FIRE
1000ac4e:	421c      	tst	r4, r3
1000ac50:	d014      	beq.n	1000ac7c <main+0x118>
	char c = getchar_timeout_us(0);
1000ac52:	2000      	movs	r0, #0
1000ac54:	f7f7 f9c4 	bl	10001fe0 <getchar_timeout_us>
		if (GetChar() != 0) break;
1000ac58:	3801      	subs	r0, #1
1000ac5a:	b2c0      	uxtb	r0, r0
1000ac5c:	28fd      	cmp	r0, #253	; 0xfd
1000ac5e:	d910      	bls.n	1000ac82 <main+0x11e>
		sleep_ms(100);
1000ac60:	2064      	movs	r0, #100	; 0x64
	for (i = (timeout ? 100 : 1000000000) ; i > 0; i--)
1000ac62:	3f01      	subs	r7, #1
		sleep_ms(100);
1000ac64:	f7f7 ff38 	bl	10002ad8 <sleep_ms>
	for (i = (timeout ? 100 : 1000000000) ; i > 0; i--)
1000ac68:	2f00      	cmp	r7, #0
1000ac6a:	d019      	beq.n	1000aca0 <main+0x13c>
1000ac6c:	686b      	ldr	r3, [r5, #4]
1000ac6e:	0d5b      	lsrs	r3, r3, #21
	if (!gpio_get(PB_RT))		// RIGHT
1000ac70:	421c      	tst	r4, r3
1000ac72:	d003      	beq.n	1000ac7c <main+0x118>
1000ac74:	686b      	ldr	r3, [r5, #4]
1000ac76:	0c1b      	lsrs	r3, r3, #16
	else if (!gpio_get(PB_UP))	// ROTATE=UP
1000ac78:	421c      	tst	r4, r3
1000ac7a:	d1de      	bne.n	1000ac3a <main+0xd6>
		sleep_ms(250);
1000ac7c:	20fa      	movs	r0, #250	; 0xfa
1000ac7e:	f7f7 ff2b 	bl	10002ad8 <sleep_ms>
	memcpy(Board, SaveBoard, MAPSIZE);
1000ac82:	2287      	movs	r2, #135	; 0x87
1000ac84:	4651      	mov	r1, sl
1000ac86:	0092      	lsls	r2, r2, #2
1000ac88:	0030      	movs	r0, r6
1000ac8a:	f7f5 fe85 	bl	10000998 <__wrap___aeabi_memcpy>
	return i > 0; // i > 0 if continue with user
1000ac8e:	f7fc fabb 	bl	10007208 <_Z4Gamev.part.0>
	{
		// game
		Game();

		// demo mode
		PlayDemo();
1000ac92:	f7ff f98d 	bl	10009fb0 <_Z8PlayDemov>
	while (True)
1000ac96:	e7a1      	b.n	1000abdc <main+0x78>
		sleep_ms(250);
1000ac98:	20fa      	movs	r0, #250	; 0xfa
1000ac9a:	f7f7 ff1d 	bl	10002ad8 <sleep_ms>
		return (rVal);
1000ac9e:	e7af      	b.n	1000ac00 <main+0x9c>
	memcpy(Board, SaveBoard, MAPSIZE);
1000aca0:	2287      	movs	r2, #135	; 0x87
1000aca2:	4651      	mov	r1, sl
1000aca4:	0030      	movs	r0, r6
1000aca6:	0092      	lsls	r2, r2, #2
1000aca8:	f7f5 fe76 	bl	10000998 <__wrap___aeabi_memcpy>
	return i > 0; // i > 0 if continue with user
1000acac:	e7f1      	b.n	1000ac92 <main+0x12e>
1000acae:	46c0      	nop			; (mov r8, r8)
1000acb0:	20003050 	.word	0x20003050
1000acb4:	20007860 	.word	0x20007860
1000acb8:	1000eb24 	.word	0x1000eb24
1000acbc:	2000327c 	.word	0x2000327c
1000acc0:	200034a0 	.word	0x200034a0
1000acc4:	2001276c 	.word	0x2001276c
1000acc8:	2000710c 	.word	0x2000710c
1000accc:	200061f8 	.word	0x200061f8
1000acd0:	20012767 	.word	0x20012767
1000acd4:	1000e768 	.word	0x1000e768
1000acd8:	20006c2c 	.word	0x20006c2c
1000acdc:	1000e6a8 	.word	0x1000e6a8

1000ace0 <_Z10VgaDmaInitv>:
 * \param read_addr Initial read address of transfer.
 * \param trigger True to start the transfer immediately
 */
static inline void dma_channel_set_read_addr(uint channel, const volatile void *read_addr, bool trigger) {
    if (!trigger) {
        dma_channel_hw_addr(channel)->read_addr = (uintptr_t) read_addr;
1000ace0:	23a0      	movs	r3, #160	; 0xa0
// 0x10 (alias 1):  CTRL        READ_ADDR     WRITE_ADDR    TRANS_COUNT_TRIG
// 0x20 (alias 2):  CTRL        TRANS_COUNT   READ_ADDR     WRITE_ADDR_TRIG
// 0x30 (alias 3):  CTRL        WRITE_ADDR    TRANS_COUNT   READ_ADDR_TRIG ... !

void VgaDmaInit()
{
1000ace2:	b570      	push	{r4, r5, r6, lr}
 * \param trans_count The number of transfers (not NOT bytes, see channel_config_set_transfer_data_size)
 * \param trigger True to start the transfer immediately
 */
static inline void dma_channel_set_trans_count(uint channel, uint32_t trans_count, bool trigger) {
    if (!trigger) {
        dma_channel_hw_addr(channel)->transfer_count = trans_count;
1000ace4:	2402      	movs	r4, #2
        dma_channel_hw_addr(channel)->write_addr = (uintptr_t) write_addr;
1000ace6:	4a2a      	ldr	r2, [pc, #168]	; (1000ad90 <_Z10VgaDmaInitv+0xb0>)
        dma_channel_hw_addr(channel)->read_addr = (uintptr_t) read_addr;
1000ace8:	492a      	ldr	r1, [pc, #168]	; (1000ad94 <_Z10VgaDmaInitv+0xb4>)
1000acea:	05db      	lsls	r3, r3, #23
1000acec:	6019      	str	r1, [r3, #0]
        dma_channel_hw_addr(channel)->write_addr = (uintptr_t) write_addr;
1000acee:	605a      	str	r2, [r3, #4]
        dma_channel_hw_addr(channel)->al1_ctrl = channel_config_get_ctrl_value(config);
1000acf0:	4a29      	ldr	r2, [pc, #164]	; (1000ad98 <_Z10VgaDmaInitv+0xb8>)
        dma_channel_hw_addr(channel)->transfer_count = trans_count;
1000acf2:	609c      	str	r4, [r3, #8]
        dma_channel_hw_addr(channel)->al1_ctrl = channel_config_get_ctrl_value(config);
1000acf4:	611a      	str	r2, [r3, #16]
        dma_channel_hw_addr(channel)->read_addr = (uintptr_t) read_addr;
1000acf6:	2200      	movs	r2, #0
1000acf8:	4b28      	ldr	r3, [pc, #160]	; (1000ad9c <_Z10VgaDmaInitv+0xbc>)
        dma_channel_hw_addr(channel)->write_addr = (uintptr_t) write_addr;
1000acfa:	4829      	ldr	r0, [pc, #164]	; (1000ada0 <_Z10VgaDmaInitv+0xc0>)
        dma_channel_hw_addr(channel)->read_addr = (uintptr_t) read_addr;
1000acfc:	601a      	str	r2, [r3, #0]
        dma_channel_hw_addr(channel)->write_addr = (uintptr_t) write_addr;
1000acfe:	6058      	str	r0, [r3, #4]
        dma_channel_hw_addr(channel)->al1_ctrl = channel_config_get_ctrl_value(config);
1000ad00:	4828      	ldr	r0, [pc, #160]	; (1000ada4 <_Z10VgaDmaInitv+0xc4>)
        dma_channel_hw_addr(channel)->transfer_count = trans_count;
1000ad02:	609a      	str	r2, [r3, #8]
        dma_channel_hw_addr(channel)->al1_ctrl = channel_config_get_ctrl_value(config);
1000ad04:	6118      	str	r0, [r3, #16]
	dma_channel_config cfg;
	int layer;
	for (layer = 0; layer < LAYERS; layer++)
	{
		// layer is not active
		if ((layer > 0) && (LayerModeInx[layer] == LAYERMODE_BASE)) continue;
1000ad06:	4b28      	ldr	r3, [pc, #160]	; (1000ada8 <_Z10VgaDmaInitv+0xc8>)
1000ad08:	7858      	ldrb	r0, [r3, #1]
1000ad0a:	2800      	cmp	r0, #0
1000ad0c:	d00d      	beq.n	1000ad2a <_Z10VgaDmaInitv+0x4a>
        dma_channel_hw_addr(channel)->read_addr = (uintptr_t) read_addr;
1000ad0e:	4827      	ldr	r0, [pc, #156]	; (1000adac <_Z10VgaDmaInitv+0xcc>)
        dma_channel_hw_addr(channel)->write_addr = (uintptr_t) write_addr;
1000ad10:	4d27      	ldr	r5, [pc, #156]	; (1000adb0 <_Z10VgaDmaInitv+0xd0>)
        dma_channel_hw_addr(channel)->read_addr = (uintptr_t) read_addr;
1000ad12:	6001      	str	r1, [r0, #0]
        dma_channel_hw_addr(channel)->write_addr = (uintptr_t) write_addr;
1000ad14:	6045      	str	r5, [r0, #4]
        dma_channel_hw_addr(channel)->transfer_count = trans_count;
1000ad16:	6084      	str	r4, [r0, #8]
        dma_channel_hw_addr(channel)->al1_ctrl = channel_config_get_ctrl_value(config);
1000ad18:	4c26      	ldr	r4, [pc, #152]	; (1000adb4 <_Z10VgaDmaInitv+0xd4>)
1000ad1a:	6104      	str	r4, [r0, #16]
        dma_channel_hw_addr(channel)->read_addr = (uintptr_t) read_addr;
1000ad1c:	4826      	ldr	r0, [pc, #152]	; (1000adb8 <_Z10VgaDmaInitv+0xd8>)
        dma_channel_hw_addr(channel)->write_addr = (uintptr_t) write_addr;
1000ad1e:	4c27      	ldr	r4, [pc, #156]	; (1000adbc <_Z10VgaDmaInitv+0xdc>)
        dma_channel_hw_addr(channel)->read_addr = (uintptr_t) read_addr;
1000ad20:	6002      	str	r2, [r0, #0]
        dma_channel_hw_addr(channel)->write_addr = (uintptr_t) write_addr;
1000ad22:	6044      	str	r4, [r0, #4]
        dma_channel_hw_addr(channel)->transfer_count = trans_count;
1000ad24:	6082      	str	r2, [r0, #8]
        dma_channel_hw_addr(channel)->al1_ctrl = channel_config_get_ctrl_value(config);
1000ad26:	4a26      	ldr	r2, [pc, #152]	; (1000adc0 <_Z10VgaDmaInitv+0xe0>)
1000ad28:	6102      	str	r2, [r0, #16]
1000ad2a:	789a      	ldrb	r2, [r3, #2]
1000ad2c:	2a00      	cmp	r2, #0
1000ad2e:	d00f      	beq.n	1000ad50 <_Z10VgaDmaInitv+0x70>
        dma_channel_hw_addr(channel)->read_addr = (uintptr_t) read_addr;
1000ad30:	4a24      	ldr	r2, [pc, #144]	; (1000adc4 <_Z10VgaDmaInitv+0xe4>)
        dma_channel_hw_addr(channel)->write_addr = (uintptr_t) write_addr;
1000ad32:	4825      	ldr	r0, [pc, #148]	; (1000adc8 <_Z10VgaDmaInitv+0xe8>)
        dma_channel_hw_addr(channel)->read_addr = (uintptr_t) read_addr;
1000ad34:	6011      	str	r1, [r2, #0]
        dma_channel_hw_addr(channel)->write_addr = (uintptr_t) write_addr;
1000ad36:	6050      	str	r0, [r2, #4]
        dma_channel_hw_addr(channel)->transfer_count = trans_count;
1000ad38:	2002      	movs	r0, #2
1000ad3a:	6090      	str	r0, [r2, #8]
        dma_channel_hw_addr(channel)->al1_ctrl = channel_config_get_ctrl_value(config);
1000ad3c:	4823      	ldr	r0, [pc, #140]	; (1000adcc <_Z10VgaDmaInitv+0xec>)
        dma_channel_hw_addr(channel)->write_addr = (uintptr_t) write_addr;
1000ad3e:	4c24      	ldr	r4, [pc, #144]	; (1000add0 <_Z10VgaDmaInitv+0xf0>)
        dma_channel_hw_addr(channel)->al1_ctrl = channel_config_get_ctrl_value(config);
1000ad40:	6110      	str	r0, [r2, #16]
        dma_channel_hw_addr(channel)->read_addr = (uintptr_t) read_addr;
1000ad42:	2000      	movs	r0, #0
1000ad44:	4a23      	ldr	r2, [pc, #140]	; (1000add4 <_Z10VgaDmaInitv+0xf4>)
1000ad46:	6010      	str	r0, [r2, #0]
        dma_channel_hw_addr(channel)->write_addr = (uintptr_t) write_addr;
1000ad48:	6054      	str	r4, [r2, #4]
        dma_channel_hw_addr(channel)->transfer_count = trans_count;
1000ad4a:	6090      	str	r0, [r2, #8]
        dma_channel_hw_addr(channel)->al1_ctrl = channel_config_get_ctrl_value(config);
1000ad4c:	4822      	ldr	r0, [pc, #136]	; (1000add8 <_Z10VgaDmaInitv+0xf8>)
1000ad4e:	6110      	str	r0, [r2, #16]
1000ad50:	78db      	ldrb	r3, [r3, #3]
1000ad52:	2b00      	cmp	r3, #0
1000ad54:	d00f      	beq.n	1000ad76 <_Z10VgaDmaInitv+0x96>
        dma_channel_hw_addr(channel)->read_addr = (uintptr_t) read_addr;
1000ad56:	4b21      	ldr	r3, [pc, #132]	; (1000addc <_Z10VgaDmaInitv+0xfc>)
        dma_channel_hw_addr(channel)->write_addr = (uintptr_t) write_addr;
1000ad58:	4a21      	ldr	r2, [pc, #132]	; (1000ade0 <_Z10VgaDmaInitv+0x100>)
        dma_channel_hw_addr(channel)->read_addr = (uintptr_t) read_addr;
1000ad5a:	6019      	str	r1, [r3, #0]
        dma_channel_hw_addr(channel)->write_addr = (uintptr_t) write_addr;
1000ad5c:	605a      	str	r2, [r3, #4]
        dma_channel_hw_addr(channel)->transfer_count = trans_count;
1000ad5e:	2202      	movs	r2, #2
1000ad60:	609a      	str	r2, [r3, #8]
        dma_channel_hw_addr(channel)->al1_ctrl = channel_config_get_ctrl_value(config);
1000ad62:	4a20      	ldr	r2, [pc, #128]	; (1000ade4 <_Z10VgaDmaInitv+0x104>)
        dma_channel_hw_addr(channel)->write_addr = (uintptr_t) write_addr;
1000ad64:	4920      	ldr	r1, [pc, #128]	; (1000ade8 <_Z10VgaDmaInitv+0x108>)
        dma_channel_hw_addr(channel)->al1_ctrl = channel_config_get_ctrl_value(config);
1000ad66:	611a      	str	r2, [r3, #16]
        dma_channel_hw_addr(channel)->read_addr = (uintptr_t) read_addr;
1000ad68:	2200      	movs	r2, #0
1000ad6a:	4b20      	ldr	r3, [pc, #128]	; (1000adec <_Z10VgaDmaInitv+0x10c>)
1000ad6c:	601a      	str	r2, [r3, #0]
        dma_channel_hw_addr(channel)->write_addr = (uintptr_t) write_addr;
1000ad6e:	6059      	str	r1, [r3, #4]
        dma_channel_hw_addr(channel)->transfer_count = trans_count;
1000ad70:	609a      	str	r2, [r3, #8]
        dma_channel_hw_addr(channel)->al1_ctrl = channel_config_get_ctrl_value(config);
1000ad72:	4a1f      	ldr	r2, [pc, #124]	; (1000adf0 <_Z10VgaDmaInitv+0x110>)
1000ad74:	611a      	str	r2, [r3, #16]
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
1000ad76:	2202      	movs	r2, #2
1000ad78:	4b1e      	ldr	r3, [pc, #120]	; (1000adf4 <_Z10VgaDmaInitv+0x114>)

	// enable DMA channel IRQ0
	dma_channel_set_irq0_enabled(VGA_DMA_PIO0, true);

	// set DMA IRQ handler
	irq_set_exclusive_handler(DMA_IRQ_0, VgaLine);
1000ad7a:	200b      	movs	r0, #11
1000ad7c:	601a      	str	r2, [r3, #0]
1000ad7e:	491e      	ldr	r1, [pc, #120]	; (1000adf8 <_Z10VgaDmaInitv+0x118>)
1000ad80:	f7f6 f9fa 	bl	10001178 <irq_set_exclusive_handler>

	// set highest IRQ priority
	irq_set_priority(DMA_IRQ_0, 0);
1000ad84:	2100      	movs	r1, #0
1000ad86:	200b      	movs	r0, #11
1000ad88:	f7f6 fb00 	bl	1000138c <irq_set_priority>
}
1000ad8c:	bd70      	pop	{r4, r5, r6, pc}
1000ad8e:	46c0      	nop			; (mov r8, r8)
1000ad90:	50000078 	.word	0x50000078
1000ad94:	200034d8 	.word	0x200034d8
1000ad98:	001f84f9 	.word	0x001f84f9
1000ad9c:	50000040 	.word	0x50000040
1000ada0:	50200010 	.word	0x50200010
1000ada4:	0060001b 	.word	0x0060001b
1000ada8:	20004a5c 	.word	0x20004a5c
1000adac:	50000080 	.word	0x50000080
1000adb0:	500000f8 	.word	0x500000f8
1000adb4:	001f94f9 	.word	0x001f94f9
1000adb8:	500000c0 	.word	0x500000c0
1000adbc:	50200014 	.word	0x50200014
1000adc0:	0060901b 	.word	0x0060901b
1000adc4:	50000100 	.word	0x50000100
1000adc8:	50000178 	.word	0x50000178
1000adcc:	001fa4f9 	.word	0x001fa4f9
1000add0:	50200018 	.word	0x50200018
1000add4:	50000140 	.word	0x50000140
1000add8:	0061201b 	.word	0x0061201b
1000addc:	50000180 	.word	0x50000180
1000ade0:	500001f8 	.word	0x500001f8
1000ade4:	001fb4f9 	.word	0x001fb4f9
1000ade8:	5020001c 	.word	0x5020001c
1000adec:	500001c0 	.word	0x500001c0
1000adf0:	0061b01b 	.word	0x0061b01b
1000adf4:	50002404 	.word	0x50002404
1000adf8:	20002531 	.word	0x20002531

1000adfc <_Z10VgaPioInitv>:

// initialize VGA PIO
void VgaPioInit()
{
1000adfc:	b5f0      	push	{r4, r5, r6, r7, lr}
1000adfe:	46ce      	mov	lr, r9
1000ae00:	4647      	mov	r7, r8
1000ae02:	b580      	push	{r7, lr}
1000ae04:	b099      	sub	sp, #100	; 0x64
	int i;

	// clear PIO instruction memory 
	pio_clear_instruction_memory(VGA_PIO);
1000ae06:	485c      	ldr	r0, [pc, #368]	; (1000af78 <_Z10VgaPioInitv+0x17c>)

	// configure main program instructions
	uint16_t ins[32]; // temporary buffer of program instructions
	memcpy(ins, &vga_program_instructions, vga_program.length*sizeof(uint16_t)); // copy program into buffer
1000ae08:	ac08      	add	r4, sp, #32
	pio_clear_instruction_memory(VGA_PIO);
1000ae0a:	f7f6 fe23 	bl	10001a54 <pio_clear_instruction_memory>
	memcpy(ins, &vga_program_instructions, vga_program.length*sizeof(uint16_t)); // copy program into buffer
1000ae0e:	0022      	movs	r2, r4
1000ae10:	4b5a      	ldr	r3, [pc, #360]	; (1000af7c <_Z10VgaPioInitv+0x180>)
1000ae12:	cb23      	ldmia	r3!, {r0, r1, r5}
1000ae14:	c223      	stmia	r2!, {r0, r1, r5}
1000ae16:	cb23      	ldmia	r3!, {r0, r1, r5}
1000ae18:	c223      	stmia	r2!, {r0, r1, r5}
1000ae1a:	6819      	ldr	r1, [r3, #0]
	u16 cpp = (u16)CurVmode.cpp; // number of clocks per pixel
1000ae1c:	4d58      	ldr	r5, [pc, #352]	; (1000af80 <_Z10VgaPioInitv+0x184>)
	memcpy(ins, &vga_program_instructions, vga_program.length*sizeof(uint16_t)); // copy program into buffer
1000ae1e:	6011      	str	r1, [r2, #0]
1000ae20:	889b      	ldrh	r3, [r3, #4]
	// load main program into PIO's instruction memory
	struct pio_program prg;
	prg.instructions = ins;
	prg.length = vga_program.length;
	prg.origin = BASE_OFFSET;
	pio_add_program(VGA_PIO, &prg);
1000ae22:	4855      	ldr	r0, [pc, #340]	; (1000af78 <_Z10VgaPioInitv+0x17c>)
	memcpy(ins, &vga_program_instructions, vga_program.length*sizeof(uint16_t)); // copy program into buffer
1000ae24:	8093      	strh	r3, [r2, #4]
	ins[vga_offset_extra1] |= (cpp-2) << 8; // update waits
1000ae26:	8aee      	ldrh	r6, [r5, #22]
1000ae28:	4b56      	ldr	r3, [pc, #344]	; (1000af84 <_Z10VgaPioInitv+0x188>)
1000ae2a:	1eb2      	subs	r2, r6, #2
1000ae2c:	0212      	lsls	r2, r2, #8
1000ae2e:	4313      	orrs	r3, r2
1000ae30:	b29b      	uxth	r3, r3
	prg.length = vga_program.length;
1000ae32:	466a      	mov	r2, sp
	ins[vga_offset_extra1] |= (cpp-2) << 8; // update waits
1000ae34:	8323      	strh	r3, [r4, #24]
	ins[vga_offset_extra2] |= (cpp-2) << 8; // update waits
1000ae36:	83a3      	strh	r3, [r4, #28]
	prg.length = vga_program.length;
1000ae38:	230f      	movs	r3, #15
	pio_add_program(VGA_PIO, &prg);
1000ae3a:	a902      	add	r1, sp, #8
	prg.length = vga_program.length;
1000ae3c:	7313      	strb	r3, [r2, #12]
	prg.origin = BASE_OFFSET;
1000ae3e:	3302      	adds	r3, #2
1000ae40:	7353      	strb	r3, [r2, #13]
	prg.instructions = ins;
1000ae42:	9402      	str	r4, [sp, #8]
	pio_add_program(VGA_PIO, &prg);
1000ae44:	f7f6 fda2 	bl	1000198c <pio_add_program>

	// load layer program
	if (LayerProgInx != LAYERPROG_BASE)
1000ae48:	4b4f      	ldr	r3, [pc, #316]	; (1000af88 <_Z10VgaPioInitv+0x18c>)
1000ae4a:	781b      	ldrb	r3, [r3, #0]
1000ae4c:	2b00      	cmp	r3, #0
1000ae4e:	d161      	bne.n	1000af14 <_Z10VgaPioInitv+0x118>
	{
		// configure layer program instructions
		memcpy(ins, CurLayerProg.ins, CurLayerProg.length*sizeof(uint16_t)); // copy program into buffer
		for (i = 0; i < CurLayerProg.extranum; i++)
1000ae50:	2400      	movs	r4, #0
    gpio_set_function(pin, pio == pio0 ? GPIO_FUNC_PIO0 : GPIO_FUNC_PIO1);
1000ae52:	0020      	movs	r0, r4
1000ae54:	2106      	movs	r1, #6
		prg.origin = LAYER_OFFSET;
		pio_add_program(VGA_PIO, &prg);
	}

	// connect PIO to the pad
	for (i = VGA_GPIO_FIRST; i <= VGA_GPIO_LAST; i++) pio_gpio_init(VGA_PIO, i);
1000ae56:	3401      	adds	r4, #1
1000ae58:	f7f6 f90c 	bl	10001074 <gpio_set_function>
1000ae5c:	2c09      	cmp	r4, #9
1000ae5e:	d1f8      	bne.n	1000ae52 <_Z10VgaPioInitv+0x56>

	// negative HSYNC output
	if (!CurVmode.psync) gpio_set_outover(VGA_GPIO_SYNC, GPIO_OVERRIDE_INVERT);
1000ae60:	2357      	movs	r3, #87	; 0x57
1000ae62:	5ceb      	ldrb	r3, [r5, r3]
1000ae64:	2b00      	cmp	r3, #0
1000ae66:	d100      	bne.n	1000ae6a <_Z10VgaPioInitv+0x6e>
1000ae68:	e081      	b.n	1000af6e <_Z10VgaPioInitv+0x172>

		// get default config
		pio_sm_config cfg = pio_get_default_sm_config();

		// map state machine's OUT and MOV pins	
		sm_config_set_out_pins(&cfg, LayerFirstPin[layer], LayerNumPin[layer]);
1000ae6a:	4b48      	ldr	r3, [pc, #288]	; (1000af8c <_Z10VgaPioInitv+0x190>)
		for (i = 0; i < CurLayerProg.extranum; i++)
1000ae6c:	2400      	movs	r4, #0
		sm_config_set_out_pins(&cfg, LayerFirstPin[layer], LayerNumPin[layer]);
1000ae6e:	4698      	mov	r8, r3
		if ((layer > 0) && (LayerModeInx[layer] == LAYERMODE_BASE)) continue;
1000ae70:	2c00      	cmp	r4, #0
1000ae72:	d003      	beq.n	1000ae7c <_Z10VgaPioInitv+0x80>
1000ae74:	4b46      	ldr	r3, [pc, #280]	; (1000af90 <_Z10VgaPioInitv+0x194>)
1000ae76:	5d1b      	ldrb	r3, [r3, r4]
1000ae78:	2b00      	cmp	r3, #0
1000ae7a:	d036      	beq.n	1000aeea <_Z10VgaPioInitv+0xee>
		pio_sm_set_consecutive_pindirs(VGA_PIO, VGA_SM(layer), VGA_GPIO_FIRST, VGA_GPIO_NUM, true);
1000ae7c:	2301      	movs	r3, #1
1000ae7e:	2200      	movs	r2, #0
1000ae80:	0021      	movs	r1, r4
1000ae82:	483d      	ldr	r0, [pc, #244]	; (1000af78 <_Z10VgaPioInitv+0x17c>)
1000ae84:	9300      	str	r3, [sp, #0]
1000ae86:	3308      	adds	r3, #8
1000ae88:	f7f6 fe00 	bl	10001a8c <pio_sm_set_consecutive_pindirs>
		sm_config_set_out_pins(&cfg, LayerFirstPin[layer], LayerNumPin[layer]);
1000ae8c:	4643      	mov	r3, r8
1000ae8e:	5d1e      	ldrb	r6, [r3, r4]
1000ae90:	4b40      	ldr	r3, [pc, #256]	; (1000af94 <_Z10VgaPioInitv+0x198>)
                 (out_count << PIO_SM0_PINCTRL_OUT_COUNT_LSB);
1000ae92:	0536      	lsls	r6, r6, #20
1000ae94:	5d1b      	ldrb	r3, [r3, r4]
                 (out_base << PIO_SM0_PINCTRL_OUT_BASE_LSB) |
1000ae96:	431e      	orrs	r6, r3
    c->pinctrl = (c->pinctrl & ~(PIO_SM0_PINCTRL_OUT_BASE_BITS | PIO_SM0_PINCTRL_OUT_COUNT_BITS)) |
1000ae98:	9607      	str	r6, [sp, #28]

		// join FIFO to send only
		sm_config_set_fifo_join(&cfg, PIO_FIFO_JOIN_TX);

		// PIO clock divider
		sm_config_set_clkdiv(&cfg, CurVmode.div);
1000ae9a:	8aaf      	ldrh	r7, [r5, #20]
1000ae9c:	0038      	movs	r0, r7
1000ae9e:	f7f5 fceb 	bl	10000878 <__wrap___aeabi_ui2f>
1000aea2:	4681      	mov	r9, r0
    uint8_t div_frac = (uint8_t) ((div - div_int) * (1u << 8u));
1000aea4:	0038      	movs	r0, r7
1000aea6:	f7f5 fced 	bl	10000884 <__wrap___aeabi_i2f>
1000aeaa:	1c01      	adds	r1, r0, #0
1000aeac:	4648      	mov	r0, r9
1000aeae:	f7f5 fcd4 	bl	1000085a <__wrap___aeabi_fsub>
1000aeb2:	2187      	movs	r1, #135	; 0x87
1000aeb4:	05c9      	lsls	r1, r1, #23
1000aeb6:	f7f5 fcd9 	bl	1000086c <__wrap___aeabi_fmul>
1000aeba:	f7f5 fd37 	bl	1000092c <__wrap___aeabi_f2uiz>
            (div_frac << PIO_SM0_CLKDIV_FRAC_LSB) |
1000aebe:	b2c0      	uxtb	r0, r0
            (div_int << PIO_SM0_CLKDIV_INT_LSB);
1000aec0:	043b      	lsls	r3, r7, #16
            (div_frac << PIO_SM0_CLKDIV_FRAC_LSB) |
1000aec2:	0200      	lsls	r0, r0, #8
1000aec4:	4318      	orrs	r0, r3
    c->shiftctrl = (c->shiftctrl &
1000aec6:	4b34      	ldr	r3, [pc, #208]	; (1000af98 <_Z10VgaPioInitv+0x19c>)
    c->clkdiv =
1000aec8:	9004      	str	r0, [sp, #16]
    c->shiftctrl = (c->shiftctrl &
1000aeca:	9306      	str	r3, [sp, #24]

		// shift left, autopull, pull threshold
		sm_config_set_out_shift(&cfg, false, true, 32);
	
		// base layer 0
		if (layer == 0)
1000aecc:	2c00      	cmp	r4, #0
1000aece:	d014      	beq.n	1000aefa <_Z10VgaPioInitv+0xfe>
			pio_sm_init(VGA_PIO, VGA_SM0, vga_offset_entry+BASE_OFFSET, &cfg);
		}
		else
		{
			// set wrap
			sm_config_set_wrap(&cfg, CurLayerProg.wrap_target+LAYER_OFFSET, CurLayerProg.wrap+LAYER_OFFSET);
1000aed0:	4a32      	ldr	r2, [pc, #200]	; (1000af9c <_Z10VgaPioInitv+0x1a0>)

			// initialize state machine
			pio_sm_init(VGA_PIO, VGA_SM(layer), CurLayerProg.idle+LAYER_OFFSET, &cfg);
1000aed2:	4829      	ldr	r0, [pc, #164]	; (1000af78 <_Z10VgaPioInitv+0x17c>)
			sm_config_set_wrap(&cfg, CurLayerProg.wrap_target+LAYER_OFFSET, CurLayerProg.wrap+LAYER_OFFSET);
1000aed4:	7a53      	ldrb	r3, [r2, #9]
1000aed6:	7a91      	ldrb	r1, [r2, #10]
                  (wrap_target << PIO_SM0_EXECCTRL_WRAP_BOTTOM_LSB) |
1000aed8:	01db      	lsls	r3, r3, #7
                  (wrap << PIO_SM0_EXECCTRL_WRAP_TOP_LSB);
1000aeda:	0309      	lsls	r1, r1, #12
                  (wrap_target << PIO_SM0_EXECCTRL_WRAP_BOTTOM_LSB) |
1000aedc:	430b      	orrs	r3, r1
    c->execctrl = (c->execctrl & ~(PIO_SM0_EXECCTRL_WRAP_TOP_BITS | PIO_SM0_EXECCTRL_WRAP_BOTTOM_BITS)) |
1000aede:	9305      	str	r3, [sp, #20]
			pio_sm_init(VGA_PIO, VGA_SM(layer), CurLayerProg.idle+LAYER_OFFSET, &cfg);
1000aee0:	0021      	movs	r1, r4
1000aee2:	7ad2      	ldrb	r2, [r2, #11]
1000aee4:	ab04      	add	r3, sp, #16
1000aee6:	f7f6 fe13 	bl	10001b10 <pio_sm_init>
	for (layer = 0; layer < LAYERS; layer++)
1000aeea:	3401      	adds	r4, #1
1000aeec:	2c04      	cmp	r4, #4
1000aeee:	d1bf      	bne.n	1000ae70 <_Z10VgaPioInitv+0x74>
		}
	}
}
1000aef0:	b019      	add	sp, #100	; 0x64
1000aef2:	bcc0      	pop	{r6, r7}
1000aef4:	46b9      	mov	r9, r7
1000aef6:	46b0      	mov	r8, r6
1000aef8:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000aefa:	4b29      	ldr	r3, [pc, #164]	; (1000afa0 <_Z10VgaPioInitv+0x1a4>)
			pio_sm_init(VGA_PIO, VGA_SM0, vga_offset_entry+BASE_OFFSET, &cfg);
1000aefc:	2213      	movs	r2, #19
1000aefe:	9305      	str	r3, [sp, #20]
    c->pinctrl = (c->pinctrl & ~PIO_SM0_PINCTRL_SIDESET_BASE_BITS) |
1000af00:	4b28      	ldr	r3, [pc, #160]	; (1000afa4 <_Z10VgaPioInitv+0x1a8>)
1000af02:	2100      	movs	r1, #0
1000af04:	431e      	orrs	r6, r3
1000af06:	481c      	ldr	r0, [pc, #112]	; (1000af78 <_Z10VgaPioInitv+0x17c>)
1000af08:	ab04      	add	r3, sp, #16
1000af0a:	9607      	str	r6, [sp, #28]
	for (layer = 0; layer < LAYERS; layer++)
1000af0c:	3401      	adds	r4, #1
			pio_sm_init(VGA_PIO, VGA_SM0, vga_offset_entry+BASE_OFFSET, &cfg);
1000af0e:	f7f6 fdff 	bl	10001b10 <pio_sm_init>
	for (layer = 0; layer < LAYERS; layer++)
1000af12:	e7af      	b.n	1000ae74 <_Z10VgaPioInitv+0x78>
		memcpy(ins, CurLayerProg.ins, CurLayerProg.length*sizeof(uint16_t)); // copy program into buffer
1000af14:	4b21      	ldr	r3, [pc, #132]	; (1000af9c <_Z10VgaPioInitv+0x1a0>)
1000af16:	0020      	movs	r0, r4
1000af18:	4698      	mov	r8, r3
1000af1a:	7a1b      	ldrb	r3, [r3, #8]
1000af1c:	005a      	lsls	r2, r3, #1
1000af1e:	4699      	mov	r9, r3
1000af20:	4643      	mov	r3, r8
1000af22:	6819      	ldr	r1, [r3, #0]
1000af24:	f7f5 fd38 	bl	10000998 <__wrap___aeabi_memcpy>
		for (i = 0; i < CurLayerProg.extranum; i++)
1000af28:	4643      	mov	r3, r8
1000af2a:	7b9b      	ldrb	r3, [r3, #14]
1000af2c:	469c      	mov	ip, r3
1000af2e:	2b00      	cmp	r3, #0
1000af30:	d011      	beq.n	1000af56 <_Z10VgaPioInitv+0x15a>
1000af32:	4641      	mov	r1, r8
1000af34:	2000      	movs	r0, #0
1000af36:	310f      	adds	r1, #15
			int extra = (int)cpp - CurLayerProg.extra[i*2+1];
1000af38:	784b      	ldrb	r3, [r1, #1]
			ins[CurLayerProg.extra[i*2]] |= extra << 8; // update waits
1000af3a:	780a      	ldrb	r2, [r1, #0]
			int extra = (int)cpp - CurLayerProg.extra[i*2+1];
1000af3c:	1af3      	subs	r3, r6, r3
			ins[CurLayerProg.extra[i*2]] |= extra << 8; // update waits
1000af3e:	43df      	mvns	r7, r3
1000af40:	0052      	lsls	r2, r2, #1
1000af42:	17ff      	asrs	r7, r7, #31
1000af44:	403b      	ands	r3, r7
1000af46:	5aa7      	ldrh	r7, [r4, r2]
1000af48:	021b      	lsls	r3, r3, #8
1000af4a:	433b      	orrs	r3, r7
		for (i = 0; i < CurLayerProg.extranum; i++)
1000af4c:	3001      	adds	r0, #1
			ins[CurLayerProg.extra[i*2]] |= extra << 8; // update waits
1000af4e:	52a3      	strh	r3, [r4, r2]
		for (i = 0; i < CurLayerProg.extranum; i++)
1000af50:	3102      	adds	r1, #2
1000af52:	4560      	cmp	r0, ip
1000af54:	dbf0      	blt.n	1000af38 <_Z10VgaPioInitv+0x13c>
		prg.length = CurLayerProg.length;
1000af56:	466b      	mov	r3, sp
1000af58:	464a      	mov	r2, r9
1000af5a:	731a      	strb	r2, [r3, #12]
		prg.origin = LAYER_OFFSET;
1000af5c:	2300      	movs	r3, #0
1000af5e:	466a      	mov	r2, sp
		pio_add_program(VGA_PIO, &prg);
1000af60:	a902      	add	r1, sp, #8
1000af62:	4805      	ldr	r0, [pc, #20]	; (1000af78 <_Z10VgaPioInitv+0x17c>)
		prg.instructions = ins;
1000af64:	9402      	str	r4, [sp, #8]
		prg.origin = LAYER_OFFSET;
1000af66:	7353      	strb	r3, [r2, #13]
		pio_add_program(VGA_PIO, &prg);
1000af68:	f7f6 fd10 	bl	1000198c <pio_add_program>
1000af6c:	e770      	b.n	1000ae50 <_Z10VgaPioInitv+0x54>
	if (!CurVmode.psync) gpio_set_outover(VGA_GPIO_SYNC, GPIO_OVERRIDE_INVERT);
1000af6e:	2101      	movs	r1, #1
1000af70:	2008      	movs	r0, #8
1000af72:	f7f6 f8af 	bl	100010d4 <gpio_set_outover>
1000af76:	e778      	b.n	1000ae6a <_Z10VgaPioInitv+0x6e>
1000af78:	50200000 	.word	0x50200000
1000af7c:	1002986c 	.word	0x1002986c
1000af80:	200049e8 	.word	0x200049e8
1000af84:	00006008 	.word	0x00006008
1000af88:	2001276a 	.word	0x2001276a
1000af8c:	20002778 	.word	0x20002778
1000af90:	20004a5c 	.word	0x20004a5c
1000af94:	20004a58 	.word	0x20004a58
1000af98:	40060000 	.word	0x40060000
1000af9c:	200049b4 	.word	0x200049b4
1000afa0:	0001fd80 	.word	0x0001fd80
1000afa4:	20002000 	.word	0x20002000

1000afa8 <_Z10VgaBufInitv>:

// initialize scanline buffers
void VgaBufInit()
{
1000afa8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000afaa:	464e      	mov	r6, r9
1000afac:	4645      	mov	r5, r8
1000afae:	4657      	mov	r7, sl
1000afb0:	46de      	mov	lr, fp
	// init HSYNC..back porch buffer
	//  hsync must be min. 3
	//  hback must be min. 13
	LineBufHsBp[0] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,CurVmode.hsync-3)); // HSYNC
1000afb2:	2388      	movs	r3, #136	; 0x88
{
1000afb4:	b5e0      	push	{r5, r6, r7, lr}
	LineBufHsBp[0] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,CurVmode.hsync-3)); // HSYNC
1000afb6:	485f      	ldr	r0, [pc, #380]	; (1000b134 <_Z10VgaBufInitv+0x18c>)
1000afb8:	4f5f      	ldr	r7, [pc, #380]	; (1000b138 <_Z10VgaBufInitv+0x190>)
1000afba:	8c41      	ldrh	r1, [r0, #34]	; 0x22
	LineBufHsBp[1] = BYTESWAP(VGADARK(CurVmode.hback-4-1-9,0)); // back porch - 1 - 9
1000afbc:	4e5f      	ldr	r6, [pc, #380]	; (1000b13c <_Z10VgaBufInitv+0x194>)
	LineBufHsBp[0] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,CurVmode.hsync-3)); // HSYNC
1000afbe:	1eca      	subs	r2, r1, #3
1000afc0:	ba12      	rev	r2, r2
1000afc2:	431a      	orrs	r2, r3
1000afc4:	603a      	str	r2, [r7, #0]
	LineBufHsBp[1] = BYTESWAP(VGADARK(CurVmode.hback-4-1-9,0)); // back porch - 1 - 9
1000afc6:	8c84      	ldrh	r4, [r0, #36]	; 0x24
	LineBufHsBp[0] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,CurVmode.hsync-3)); // HSYNC
1000afc8:	469c      	mov	ip, r3
	LineBufHsBp[1] = BYTESWAP(VGADARK(CurVmode.hback-4-1-9,0)); // back porch - 1 - 9
1000afca:	3c0e      	subs	r4, #14
1000afcc:	0423      	lsls	r3, r4, #16
1000afce:	0225      	lsls	r5, r4, #8
1000afd0:	0e2d      	lsrs	r5, r5, #24
1000afd2:	4033      	ands	r3, r6
1000afd4:	432b      	orrs	r3, r5
1000afd6:	25ff      	movs	r5, #255	; 0xff
1000afd8:	022d      	lsls	r5, r5, #8
1000afda:	402c      	ands	r4, r5
1000afdc:	4323      	orrs	r3, r4
1000afde:	24a0      	movs	r4, #160	; 0xa0
1000afe0:	4323      	orrs	r3, r4
1000afe2:	607b      	str	r3, [r7, #4]
	LineBufHsBp[2] = BYTESWAP(VGACMD(vga_offset_irqset+BASE_OFFSET,0)); // IRQ command (takes 9 clock cycles)
1000afe4:	23c0      	movs	r3, #192	; 0xc0
1000afe6:	60bb      	str	r3, [r7, #8]
	LineBufHsBp[3] = BYTESWAP(VGACMD(vga_offset_output+BASE_OFFSET, CurVmode.width - 2)); // missing 2 clock cycles after last pixel
1000afe8:	8803      	ldrh	r3, [r0, #0]
1000afea:	3440      	adds	r4, #64	; 0x40
1000afec:	3b02      	subs	r3, #2
1000afee:	ba1b      	rev	r3, r3
1000aff0:	4323      	orrs	r3, r4
1000aff2:	60fb      	str	r3, [r7, #12]

	// init front porch buffer
	//  hfront must be min. 4
	LineBufFp = BYTESWAP(VGADARK(CurVmode.hfront-4,0)); // front porch
1000aff4:	8c07      	ldrh	r7, [r0, #32]
{
1000aff6:	b083      	sub	sp, #12
	LineBufFp = BYTESWAP(VGADARK(CurVmode.hfront-4,0)); // front porch
1000aff8:	3f04      	subs	r7, #4
1000affa:	043b      	lsls	r3, r7, #16
1000affc:	023c      	lsls	r4, r7, #8
1000affe:	0e24      	lsrs	r4, r4, #24
1000b000:	4033      	ands	r3, r6
1000b002:	4323      	orrs	r3, r4
1000b004:	24a0      	movs	r4, #160	; 0xa0
1000b006:	402f      	ands	r7, r5
1000b008:	433b      	orrs	r3, r7
1000b00a:	4f4d      	ldr	r7, [pc, #308]	; (1000b140 <_Z10VgaBufInitv+0x198>)
1000b00c:	4323      	orrs	r3, r4
1000b00e:	603b      	str	r3, [r7, #0]

	// init dark line
	LineBufDark[0] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,CurVmode.hsync-3)); // HSYNC
1000b010:	4b4c      	ldr	r3, [pc, #304]	; (1000b144 <_Z10VgaBufInitv+0x19c>)
1000b012:	601a      	str	r2, [r3, #0]
	LineBufDark[1] = BYTESWAP(VGADARK(CurVmode.htot-CurVmode.hsync-4,0)); // dark line
1000b014:	8bc2      	ldrh	r2, [r0, #30]
	LineBufDark[0] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,CurVmode.hsync-3)); // HSYNC
1000b016:	4698      	mov	r8, r3
	LineBufDark[1] = BYTESWAP(VGADARK(CurVmode.htot-CurVmode.hsync-4,0)); // dark line
1000b018:	1a57      	subs	r7, r2, r1
1000b01a:	1f3b      	subs	r3, r7, #4
1000b01c:	4699      	mov	r9, r3
1000b01e:	464c      	mov	r4, r9
1000b020:	041b      	lsls	r3, r3, #16
1000b022:	0224      	lsls	r4, r4, #8
1000b024:	0e24      	lsrs	r4, r4, #24
1000b026:	4033      	ands	r3, r6
1000b028:	4323      	orrs	r3, r4
1000b02a:	464c      	mov	r4, r9
1000b02c:	402c      	ands	r4, r5
1000b02e:	4323      	orrs	r3, r4
1000b030:	24a0      	movs	r4, #160	; 0xa0
1000b032:	4323      	orrs	r3, r4
1000b034:	4644      	mov	r4, r8
1000b036:	6063      	str	r3, [r4, #4]

	// TV mode
	if (CurVmode.inter)
1000b038:	2356      	movs	r3, #86	; 0x56
1000b03a:	5cc3      	ldrb	r3, [r0, r3]
1000b03c:	2b00      	cmp	r3, #0
1000b03e:	d060      	beq.n	1000b102 <_Z10VgaBufInitv+0x15a>
	{
		// vertical synchronization
		LineBufSync[0] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,CurVmode.hsync/2-3)); // HSYNC
1000b040:	4664      	mov	r4, ip
1000b042:	0848      	lsrs	r0, r1, #1
1000b044:	1ec3      	subs	r3, r0, #3
1000b046:	ba1b      	rev	r3, r3
1000b048:	431c      	orrs	r4, r3
1000b04a:	4b3f      	ldr	r3, [pc, #252]	; (1000b148 <_Z10VgaBufInitv+0x1a0>)
1000b04c:	46a0      	mov	r8, r4
1000b04e:	601c      	str	r4, [r3, #0]
		LineBufSync[1] = BYTESWAP(VGADARK(CurVmode.htot/2-CurVmode.hsync/2-4,0)); // dark line
1000b050:	0854      	lsrs	r4, r2, #1
1000b052:	1a27      	subs	r7, r4, r0
1000b054:	46a1      	mov	r9, r4
1000b056:	1f3c      	subs	r4, r7, #4
1000b058:	46a2      	mov	sl, r4
1000b05a:	0427      	lsls	r7, r4, #16
1000b05c:	0224      	lsls	r4, r4, #8
1000b05e:	4037      	ands	r7, r6
1000b060:	0e24      	lsrs	r4, r4, #24
1000b062:	4327      	orrs	r7, r4
1000b064:	4654      	mov	r4, sl
1000b066:	402c      	ands	r4, r5
1000b068:	4327      	orrs	r7, r4
1000b06a:	24a0      	movs	r4, #160	; 0xa0
1000b06c:	433c      	orrs	r4, r7
1000b06e:	9401      	str	r4, [sp, #4]
1000b070:	605c      	str	r4, [r3, #4]
		LineBufSync[2] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,CurVmode.hsync/2-3)); // HSYNC
1000b072:	4644      	mov	r4, r8
		LineBufSync[3] = BYTESWAP(VGADARK((CurVmode.htot+1)/2-CurVmode.hsync/2-4,0)); // dark line
1000b074:	3201      	adds	r2, #1
1000b076:	1052      	asrs	r2, r2, #1
1000b078:	1a10      	subs	r0, r2, r0
1000b07a:	3804      	subs	r0, #4
		LineBufSync[2] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,CurVmode.hsync/2-3)); // HSYNC
1000b07c:	609c      	str	r4, [r3, #8]
		LineBufSync[3] = BYTESWAP(VGADARK((CurVmode.htot+1)/2-CurVmode.hsync/2-4,0)); // dark line
1000b07e:	0404      	lsls	r4, r0, #16
1000b080:	4034      	ands	r4, r6
1000b082:	46a2      	mov	sl, r4
1000b084:	0204      	lsls	r4, r0, #8
1000b086:	0e24      	lsrs	r4, r4, #24
1000b088:	46a3      	mov	fp, r4
1000b08a:	4654      	mov	r4, sl
1000b08c:	465f      	mov	r7, fp
1000b08e:	4028      	ands	r0, r5
1000b090:	433c      	orrs	r4, r7
1000b092:	4320      	orrs	r0, r4
1000b094:	24a0      	movs	r4, #160	; 0xa0
1000b096:	4320      	orrs	r0, r4
1000b098:	60d8      	str	r0, [r3, #12]

		LineBufSync[4] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,CurVmode.htot/2-CurVmode.hsync-3)); // invert dark line
1000b09a:	4648      	mov	r0, r9
1000b09c:	4664      	mov	r4, ip
1000b09e:	1a40      	subs	r0, r0, r1
1000b0a0:	3803      	subs	r0, #3
1000b0a2:	ba00      	rev	r0, r0
1000b0a4:	4320      	orrs	r0, r4
1000b0a6:	6118      	str	r0, [r3, #16]
		LineBufSync[5] = BYTESWAP(VGADARK(CurVmode.hsync-4,0)); // invert HSYNC
1000b0a8:	1f08      	subs	r0, r1, #4
1000b0aa:	4681      	mov	r9, r0
1000b0ac:	0400      	lsls	r0, r0, #16
1000b0ae:	4006      	ands	r6, r0
1000b0b0:	4648      	mov	r0, r9
		LineBufSync[6] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,(CurVmode.htot+1)/2-CurVmode.hsync-3)); // invert dark line
1000b0b2:	1a52      	subs	r2, r2, r1
1000b0b4:	4661      	mov	r1, ip
		LineBufSync[5] = BYTESWAP(VGADARK(CurVmode.hsync-4,0)); // invert HSYNC
1000b0b6:	0200      	lsls	r0, r0, #8
1000b0b8:	0e00      	lsrs	r0, r0, #24
1000b0ba:	4306      	orrs	r6, r0
1000b0bc:	4648      	mov	r0, r9
		LineBufSync[6] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,(CurVmode.htot+1)/2-CurVmode.hsync-3)); // invert dark line
1000b0be:	3a03      	subs	r2, #3
1000b0c0:	ba12      	rev	r2, r2
1000b0c2:	430a      	orrs	r2, r1
1000b0c4:	619a      	str	r2, [r3, #24]
		LineBufSync[7] = BYTESWAP(VGADARK(CurVmode.hsync-4,0)); // invert HSYNC

		LineBufSync[8] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,CurVmode.hsync/2-3)); // HSYNC
1000b0c6:	4642      	mov	r2, r8
		LineBufSync[5] = BYTESWAP(VGADARK(CurVmode.hsync-4,0)); // invert HSYNC
1000b0c8:	4005      	ands	r5, r0
		LineBufSync[9] = BYTESWAP(VGADARK(CurVmode.htot/2-CurVmode.hsync/2-4,0)); // dark line

		// control blocks - initialize to VSYNC
		CtrlBuf1[0] = 4; // send 4x u32
1000b0ca:	2004      	movs	r0, #4
		LineBufSync[8] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,CurVmode.hsync/2-3)); // HSYNC
1000b0cc:	621a      	str	r2, [r3, #32]
		LineBufSync[9] = BYTESWAP(VGADARK(CurVmode.htot/2-CurVmode.hsync/2-4,0)); // dark line
1000b0ce:	9a01      	ldr	r2, [sp, #4]
		LineBufSync[5] = BYTESWAP(VGADARK(CurVmode.hsync-4,0)); // invert HSYNC
1000b0d0:	4335      	orrs	r5, r6
1000b0d2:	3418      	adds	r4, #24
		LineBufSync[9] = BYTESWAP(VGADARK(CurVmode.htot/2-CurVmode.hsync/2-4,0)); // dark line
1000b0d4:	625a      	str	r2, [r3, #36]	; 0x24
		CtrlBuf1[0] = 4; // send 4x u32
1000b0d6:	491d      	ldr	r1, [pc, #116]	; (1000b14c <_Z10VgaBufInitv+0x1a4>)
		CtrlBuf1[1] = (u32)&LineBufSync[4]; // VSYNC

		CtrlBuf2[0] = 4; // send 4x u32
1000b0d8:	4a1d      	ldr	r2, [pc, #116]	; (1000b150 <_Z10VgaBufInitv+0x1a8>)
		LineBufSync[5] = BYTESWAP(VGADARK(CurVmode.hsync-4,0)); // invert HSYNC
1000b0da:	432c      	orrs	r4, r5
1000b0dc:	615c      	str	r4, [r3, #20]
		LineBufSync[7] = BYTESWAP(VGADARK(CurVmode.hsync-4,0)); // invert HSYNC
1000b0de:	61dc      	str	r4, [r3, #28]
		CtrlBuf1[1] = (u32)&LineBufSync[4]; // VSYNC
1000b0e0:	3310      	adds	r3, #16
		CtrlBuf1[0] = 4; // send 4x u32
1000b0e2:	6008      	str	r0, [r1, #0]
		CtrlBuf1[1] = (u32)&LineBufSync[4]; // VSYNC
1000b0e4:	604b      	str	r3, [r1, #4]
		CtrlBuf2[0] = 4; // send 4x u32
1000b0e6:	6010      	str	r0, [r2, #0]
		CtrlBuf2[1] = (u32)&LineBufSync[4]; // VSYNC
1000b0e8:	6053      	str	r3, [r2, #4]

		CtrlBuf2[0] = 2; // send 2x u32
		CtrlBuf2[1] = (u32)&LineBufSync[0]; // VSYNC
	}

	CtrlBuf1[2] = 0; // stop mark
1000b0ea:	2300      	movs	r3, #0
1000b0ec:	608b      	str	r3, [r1, #8]
	CtrlBuf1[3] = 0; // stop mark
1000b0ee:	60cb      	str	r3, [r1, #12]

	CtrlBuf2[2] = 0; // stop mark
1000b0f0:	6093      	str	r3, [r2, #8]
	CtrlBuf2[3] = 0; // stop mark
1000b0f2:	60d3      	str	r3, [r2, #12]
}
1000b0f4:	b003      	add	sp, #12
1000b0f6:	bcf0      	pop	{r4, r5, r6, r7}
1000b0f8:	46bb      	mov	fp, r7
1000b0fa:	46b2      	mov	sl, r6
1000b0fc:	46a9      	mov	r9, r5
1000b0fe:	46a0      	mov	r8, r4
1000b100:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LineBufSync[0] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,CurVmode.htot-CurVmode.hsync-3)); // invert dark line
1000b102:	4662      	mov	r2, ip
		LineBufSync[1] = BYTESWAP(VGADARK(CurVmode.hsync-4,0)); // invert HSYNC
1000b104:	24a0      	movs	r4, #160	; 0xa0
		CtrlBuf1[0] = 2; // send 2x u32
1000b106:	2002      	movs	r0, #2
		LineBufSync[0] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,CurVmode.htot-CurVmode.hsync-3)); // invert dark line
1000b108:	3f03      	subs	r7, #3
		LineBufSync[1] = BYTESWAP(VGADARK(CurVmode.hsync-4,0)); // invert HSYNC
1000b10a:	3904      	subs	r1, #4
1000b10c:	ba3f      	rev	r7, r7
		LineBufSync[0] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,CurVmode.htot-CurVmode.hsync-3)); // invert dark line
1000b10e:	4317      	orrs	r7, r2
		LineBufSync[1] = BYTESWAP(VGADARK(CurVmode.hsync-4,0)); // invert HSYNC
1000b110:	040a      	lsls	r2, r1, #16
1000b112:	4016      	ands	r6, r2
1000b114:	020a      	lsls	r2, r1, #8
1000b116:	0e12      	lsrs	r2, r2, #24
1000b118:	4316      	orrs	r6, r2
1000b11a:	4029      	ands	r1, r5
1000b11c:	4331      	orrs	r1, r6
		LineBufSync[0] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,CurVmode.htot-CurVmode.hsync-3)); // invert dark line
1000b11e:	4b0a      	ldr	r3, [pc, #40]	; (1000b148 <_Z10VgaBufInitv+0x1a0>)
		CtrlBuf2[0] = 2; // send 2x u32
1000b120:	4a0b      	ldr	r2, [pc, #44]	; (1000b150 <_Z10VgaBufInitv+0x1a8>)
		LineBufSync[1] = BYTESWAP(VGADARK(CurVmode.hsync-4,0)); // invert HSYNC
1000b122:	430c      	orrs	r4, r1
		CtrlBuf1[0] = 2; // send 2x u32
1000b124:	4909      	ldr	r1, [pc, #36]	; (1000b14c <_Z10VgaBufInitv+0x1a4>)
		LineBufSync[0] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,CurVmode.htot-CurVmode.hsync-3)); // invert dark line
1000b126:	601f      	str	r7, [r3, #0]
		LineBufSync[1] = BYTESWAP(VGADARK(CurVmode.hsync-4,0)); // invert HSYNC
1000b128:	605c      	str	r4, [r3, #4]
		CtrlBuf1[0] = 2; // send 2x u32
1000b12a:	6008      	str	r0, [r1, #0]
		CtrlBuf1[1] = (u32)&LineBufSync[0]; // VSYNC
1000b12c:	604b      	str	r3, [r1, #4]
		CtrlBuf2[0] = 2; // send 2x u32
1000b12e:	6010      	str	r0, [r2, #0]
		CtrlBuf2[1] = (u32)&LineBufSync[0]; // VSYNC
1000b130:	6053      	str	r3, [r2, #4]
1000b132:	e7da      	b.n	1000b0ea <_Z10VgaBufInitv+0x142>
1000b134:	200049e8 	.word	0x200049e8
1000b138:	200061bc 	.word	0x200061bc
1000b13c:	00ffff00 	.word	0x00ffff00
1000b140:	200061b8 	.word	0x200061b8
1000b144:	200061b0 	.word	0x200061b0
1000b148:	200061cc 	.word	0x200061cc
1000b14c:	200034d8 	.word	0x200034d8
1000b150:	20003f38 	.word	0x20003f38

1000b154 <_Z7VgaTermv>:
 *
 * \param channel DMA channel
 */
static inline void dma_channel_abort(uint channel) {
    check_dma_channel_param(channel);
    dma_hw->abort = 1u << channel;
1000b154:	21a0      	movs	r1, #160	; 0xa0
1000b156:	2302      	movs	r3, #2
    // Bit will go 0 once channel has reached safe state
    // (i.e. any in-flight transfers have retired)
    while (dma_hw->abort & (1ul << channel)) tight_loop_contents();
1000b158:	2002      	movs	r0, #2
    dma_hw->abort = 1u << channel;
1000b15a:	4a27      	ldr	r2, [pc, #156]	; (1000b1f8 <_Z7VgaTermv+0xa4>)
1000b15c:	05c9      	lsls	r1, r1, #23

// terminate VGA service
void VgaTerm()
{
1000b15e:	b570      	push	{r4, r5, r6, lr}
1000b160:	508b      	str	r3, [r1, r2]
    while (dma_hw->abort & (1ul << channel)) tight_loop_contents();
1000b162:	588b      	ldr	r3, [r1, r2]
1000b164:	4218      	tst	r0, r3
1000b166:	d1fc      	bne.n	1000b162 <_Z7VgaTermv+0xe>
    dma_hw->abort = 1u << channel;
1000b168:	2301      	movs	r3, #1
    while (dma_hw->abort & (1ul << channel)) tight_loop_contents();
1000b16a:	20a0      	movs	r0, #160	; 0xa0
    dma_hw->abort = 1u << channel;
1000b16c:	508b      	str	r3, [r1, r2]
    while (dma_hw->abort & (1ul << channel)) tight_loop_contents();
1000b16e:	2201      	movs	r2, #1
1000b170:	4921      	ldr	r1, [pc, #132]	; (1000b1f8 <_Z7VgaTermv+0xa4>)
1000b172:	05c0      	lsls	r0, r0, #23
1000b174:	5843      	ldr	r3, [r0, r1]
1000b176:	421a      	tst	r2, r3
1000b178:	d1fc      	bne.n	1000b174 <_Z7VgaTermv+0x20>
    dma_hw->abort = 1u << channel;
1000b17a:	24a0      	movs	r4, #160	; 0xa0
1000b17c:	2001      	movs	r0, #1
1000b17e:	2601      	movs	r6, #1
1000b180:	4a1d      	ldr	r2, [pc, #116]	; (1000b1f8 <_Z7VgaTermv+0xa4>)
1000b182:	05e4      	lsls	r4, r4, #23
1000b184:	0031      	movs	r1, r6
1000b186:	4081      	lsls	r1, r0
1000b188:	50a1      	str	r1, [r4, r2]
    while (dma_hw->abort & (1ul << channel)) tight_loop_contents();
1000b18a:	58a3      	ldr	r3, [r4, r2]
1000b18c:	420b      	tst	r3, r1
1000b18e:	d1fc      	bne.n	1000b18a <_Z7VgaTermv+0x36>
    dma_hw->abort = 1u << channel;
1000b190:	0031      	movs	r1, r6
1000b192:	1e43      	subs	r3, r0, #1
1000b194:	4099      	lsls	r1, r3
1000b196:	50a1      	str	r1, [r4, r2]
    while (dma_hw->abort & (1ul << channel)) tight_loop_contents();
1000b198:	58a3      	ldr	r3, [r4, r2]
1000b19a:	001d      	movs	r5, r3
1000b19c:	400d      	ands	r5, r1
1000b19e:	420b      	tst	r3, r1
1000b1a0:	d1fa      	bne.n	1000b198 <_Z7VgaTermv+0x44>
	int i;

	// abort DMA channels
	dma_channel_abort(VGA_DMA_PIO0); // pre-abort, could be chaining right now
	dma_channel_abort(VGA_DMA_CB0);
	for (i = 0; i < LAYERS; i++)
1000b1a2:	3002      	adds	r0, #2
1000b1a4:	2809      	cmp	r0, #9
1000b1a6:	d1ed      	bne.n	1000b184 <_Z7VgaTermv+0x30>
		dma_channel_abort(VGA_DMA_PIO(i));
		dma_channel_abort(VGA_DMA_CB(i));
	}

	// disable IRQ0 from DMA0
	irq_set_enabled(DMA_IRQ_0, false);
1000b1a8:	2100      	movs	r1, #0
1000b1aa:	3002      	adds	r0, #2
1000b1ac:	f7f5 ffc2 	bl	10001134 <irq_set_enabled>
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
1000b1b0:	2302      	movs	r3, #2
1000b1b2:	4a12      	ldr	r2, [pc, #72]	; (1000b1fc <_Z7VgaTermv+0xa8>)
    pio->ctrl = (pio->ctrl & ~mask) | (enabled ? mask : 0u);
1000b1b4:	4812      	ldr	r0, [pc, #72]	; (1000b200 <_Z7VgaTermv+0xac>)
1000b1b6:	6013      	str	r3, [r2, #0]
	dma_channel_set_irq0_enabled(VGA_DMA_PIO0, false);

	// Clear the interrupt request for DMA control channel
	dma_hw->ints0 = (1u << VGA_DMA_PIO0);
1000b1b8:	4a12      	ldr	r2, [pc, #72]	; (1000b204 <_Z7VgaTermv+0xb0>)
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
1000b1ba:	4913      	ldr	r1, [pc, #76]	; (1000b208 <_Z7VgaTermv+0xb4>)
1000b1bc:	50a3      	str	r3, [r4, r2]
1000b1be:	220f      	movs	r2, #15
1000b1c0:	6803      	ldr	r3, [r0, #0]
1000b1c2:	4393      	bics	r3, r2
1000b1c4:	6003      	str	r3, [r0, #0]
    pio->ctrl |= (mask << PIO_CTRL_SM_RESTART_LSB) & PIO_CTRL_SM_RESTART_BITS;
1000b1c6:	6803      	ldr	r3, [r0, #0]
1000b1c8:	32e1      	adds	r2, #225	; 0xe1
1000b1ca:	4313      	orrs	r3, r2
1000b1cc:	6003      	str	r3, [r0, #0]
1000b1ce:	2380      	movs	r3, #128	; 0x80
1000b1d0:	4a0e      	ldr	r2, [pc, #56]	; (1000b20c <_Z7VgaTermv+0xb8>)
1000b1d2:	061b      	lsls	r3, r3, #24
1000b1d4:	6013      	str	r3, [r2, #0]
1000b1d6:	6013      	str	r3, [r2, #0]

	// clear FIFOs
	for (i = 0; i < LAYERS; i++)
	{
		pio_sm_clear_fifos(VGA_PIO, VGA_SM(i));
		CtrlBufNext[i] = NULL;
1000b1d8:	4a0d      	ldr	r2, [pc, #52]	; (1000b210 <_Z7VgaTermv+0xbc>)
1000b1da:	6015      	str	r5, [r2, #0]
1000b1dc:	600b      	str	r3, [r1, #0]
1000b1de:	600b      	str	r3, [r1, #0]
1000b1e0:	490c      	ldr	r1, [pc, #48]	; (1000b214 <_Z7VgaTermv+0xc0>)
1000b1e2:	6055      	str	r5, [r2, #4]
1000b1e4:	600b      	str	r3, [r1, #0]
1000b1e6:	600b      	str	r3, [r1, #0]
1000b1e8:	490b      	ldr	r1, [pc, #44]	; (1000b218 <_Z7VgaTermv+0xc4>)
1000b1ea:	6095      	str	r5, [r2, #8]
1000b1ec:	600b      	str	r3, [r1, #0]
1000b1ee:	600b      	str	r3, [r1, #0]
1000b1f0:	60d5      	str	r5, [r2, #12]
	}

	// clear PIO instruction memory 
	pio_clear_instruction_memory(VGA_PIO);
1000b1f2:	f7f6 fc2f 	bl	10001a54 <pio_clear_instruction_memory>
}
1000b1f6:	bd70      	pop	{r4, r5, r6, pc}
1000b1f8:	00000444 	.word	0x00000444
1000b1fc:	50003404 	.word	0x50003404
1000b200:	50200000 	.word	0x50200000
1000b204:	0000040c 	.word	0x0000040c
1000b208:	502010e8 	.word	0x502010e8
1000b20c:	502010d0 	.word	0x502010d0
1000b210:	20004998 	.word	0x20004998
1000b214:	50201100 	.word	0x50201100
1000b218:	50201118 	.word	0x50201118

1000b21c <_Z16ScanlineTypeInitPK6sVmode>:

// initialize scanline type table
void ScanlineTypeInit(const sVmode* v)
{
1000b21c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b21e:	46c6      	mov	lr, r8
	u8* d = ScanlineType;
	int i, k;

	// line 0 is not used
	*d++ = LINE_DARK;
1000b220:	2305      	movs	r3, #5
{
1000b222:	b500      	push	{lr}
	*d++ = LINE_DARK;
1000b224:	4c6b      	ldr	r4, [pc, #428]	; (1000b3d4 <_Z16ScanlineTypeInitPK6sVmode+0x1b8>)
{
1000b226:	0005      	movs	r5, r0
	*d++ = LINE_DARK;
1000b228:	7023      	strb	r3, [r4, #0]

	// progressive mode (VGA 525)
	if (!v->inter)
1000b22a:	3351      	adds	r3, #81	; 0x51
1000b22c:	5cc3      	ldrb	r3, [r0, r3]
1000b22e:	2b00      	cmp	r3, #0
1000b230:	d125      	bne.n	1000b27e <_Z16ScanlineTypeInitPK6sVmode+0x62>
	{
		// vertical sync (VGA 2)
		for (i = v->vsync1; i > 0; i--) *d++ = LINE_VSYNC;
1000b232:	8e86      	ldrh	r6, [r0, #52]	; 0x34
	*d++ = LINE_DARK;
1000b234:	3401      	adds	r4, #1
		for (i = v->vsync1; i > 0; i--) *d++ = LINE_VSYNC;
1000b236:	2e00      	cmp	r6, #0
1000b238:	d005      	beq.n	1000b246 <_Z16ScanlineTypeInitPK6sVmode+0x2a>
1000b23a:	0020      	movs	r0, r4
1000b23c:	0032      	movs	r2, r6
1000b23e:	2100      	movs	r1, #0
1000b240:	f7f5 fba4 	bl	1000098c <__wrap_memset>
1000b244:	1934      	adds	r4, r6, r4

		// dark (VGA 33)
		for (i = v->vback1; i > 0; i--) *d++ = LINE_DARK;
1000b246:	8f2e      	ldrh	r6, [r5, #56]	; 0x38
1000b248:	2e00      	cmp	r6, #0
1000b24a:	d005      	beq.n	1000b258 <_Z16ScanlineTypeInitPK6sVmode+0x3c>
1000b24c:	0020      	movs	r0, r4
1000b24e:	0032      	movs	r2, r6
1000b250:	2105      	movs	r1, #5
1000b252:	f7f5 fb9b 	bl	1000098c <__wrap_memset>
1000b256:	19a4      	adds	r4, r4, r6

		// image (VGA 480)
		for (i = v->vact1; i > 0; i--) *d++ = LINE_IMG;
1000b258:	8f6e      	ldrh	r6, [r5, #58]	; 0x3a
1000b25a:	2e00      	cmp	r6, #0
1000b25c:	d005      	beq.n	1000b26a <_Z16ScanlineTypeInitPK6sVmode+0x4e>
1000b25e:	0020      	movs	r0, r4
1000b260:	0032      	movs	r2, r6
1000b262:	2106      	movs	r1, #6
1000b264:	f7f5 fb92 	bl	1000098c <__wrap_memset>
1000b268:	19a4      	adds	r4, r4, r6

		// dark (VGA 10)
		for (i = v->vfront1; i > 0; i--) *d++ = LINE_DARK;
1000b26a:	8faa      	ldrh	r2, [r5, #60]	; 0x3c
1000b26c:	2a00      	cmp	r2, #0
1000b26e:	d003      	beq.n	1000b278 <_Z16ScanlineTypeInitPK6sVmode+0x5c>
1000b270:	2105      	movs	r1, #5
1000b272:	0020      	movs	r0, r4
1000b274:	f7f5 fb8a 	bl	1000098c <__wrap_memset>
		for (i = v->vfront2; i > 0; i--) *d++ = LINE_DARK;

		// half sync (PAL 3, NTSC 3)
		for (i = v->vpre2/2; i > 0; i--) *d++ = LINE_HHSYNC;
	}
}
1000b278:	bc80      	pop	{r7}
1000b27a:	46b8      	mov	r8, r7
1000b27c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		for (i = v->vsync1/2; i > 0; i--) *d++ = LINE_VVSYNC;
1000b27e:	8e83      	ldrh	r3, [r0, #52]	; 0x34
	*d++ = LINE_DARK;
1000b280:	3401      	adds	r4, #1
		for (i = v->vsync1/2; i > 0; i--) *d++ = LINE_VVSYNC;
1000b282:	085e      	lsrs	r6, r3, #1
1000b284:	d006      	beq.n	1000b294 <_Z16ScanlineTypeInitPK6sVmode+0x78>
1000b286:	0020      	movs	r0, r4
1000b288:	0032      	movs	r2, r6
1000b28a:	2101      	movs	r1, #1
1000b28c:	f7f5 fb7e 	bl	1000098c <__wrap_memset>
		if ((v->vsync1 & 1) != 0) *d++ = LINE_VHSYNC;
1000b290:	8eab      	ldrh	r3, [r5, #52]	; 0x34
		for (i = v->vsync1/2; i > 0; i--) *d++ = LINE_VVSYNC;
1000b292:	1934      	adds	r4, r6, r4
		if ((v->vsync1 & 1) != 0) *d++ = LINE_VHSYNC;
1000b294:	07db      	lsls	r3, r3, #31
1000b296:	d502      	bpl.n	1000b29e <_Z16ScanlineTypeInitPK6sVmode+0x82>
1000b298:	2302      	movs	r3, #2
1000b29a:	7023      	strb	r3, [r4, #0]
1000b29c:	3401      	adds	r4, #1
		for (i = v->vpost1/2; i > 0; i--) *d++ = LINE_HHSYNC;
1000b29e:	8eee      	ldrh	r6, [r5, #54]	; 0x36
1000b2a0:	0876      	lsrs	r6, r6, #1
1000b2a2:	d005      	beq.n	1000b2b0 <_Z16ScanlineTypeInitPK6sVmode+0x94>
1000b2a4:	0020      	movs	r0, r4
1000b2a6:	0032      	movs	r2, r6
1000b2a8:	2103      	movs	r1, #3
1000b2aa:	f7f5 fb6f 	bl	1000098c <__wrap_memset>
1000b2ae:	19a4      	adds	r4, r4, r6
		for (i = v->vback1; i > 0; i--) *d++ = LINE_DARK;
1000b2b0:	8f2e      	ldrh	r6, [r5, #56]	; 0x38
1000b2b2:	2e00      	cmp	r6, #0
1000b2b4:	d005      	beq.n	1000b2c2 <_Z16ScanlineTypeInitPK6sVmode+0xa6>
1000b2b6:	0020      	movs	r0, r4
1000b2b8:	0032      	movs	r2, r6
1000b2ba:	2105      	movs	r1, #5
1000b2bc:	f7f5 fb66 	bl	1000098c <__wrap_memset>
1000b2c0:	19a4      	adds	r4, r4, r6
		if (v->odd)
1000b2c2:	2358      	movs	r3, #88	; 0x58
1000b2c4:	5ceb      	ldrb	r3, [r5, r3]
			for (i = v->vact1; i > 0; i--) *d++ = LINE_IMGODD1; // odd lines 1, 3, 5, ... (PAL)
1000b2c6:	8f6e      	ldrh	r6, [r5, #58]	; 0x3a
		if (v->odd)
1000b2c8:	2b00      	cmp	r3, #0
1000b2ca:	d16e      	bne.n	1000b3aa <_Z16ScanlineTypeInitPK6sVmode+0x18e>
			for (i = v->vact1; i > 0; i--) *d++ = LINE_IMGEVEN1; // even lines 0, 2, 4, ... (NTSC)
1000b2cc:	2e00      	cmp	r6, #0
1000b2ce:	d005      	beq.n	1000b2dc <_Z16ScanlineTypeInitPK6sVmode+0xc0>
1000b2d0:	0020      	movs	r0, r4
1000b2d2:	0032      	movs	r2, r6
1000b2d4:	2107      	movs	r1, #7
1000b2d6:	f7f5 fb59 	bl	1000098c <__wrap_memset>
1000b2da:	19a4      	adds	r4, r4, r6
		for (i = v->vfront1; i > 0; i--) *d++ = LINE_DARK;
1000b2dc:	8fae      	ldrh	r6, [r5, #60]	; 0x3c
1000b2de:	2e00      	cmp	r6, #0
1000b2e0:	d005      	beq.n	1000b2ee <_Z16ScanlineTypeInitPK6sVmode+0xd2>
1000b2e2:	0020      	movs	r0, r4
1000b2e4:	0032      	movs	r2, r6
1000b2e6:	2105      	movs	r1, #5
1000b2e8:	f7f5 fb50 	bl	1000098c <__wrap_memset>
1000b2ec:	19a4      	adds	r4, r4, r6
		for (i = v->vpre1/2; i > 0; i--) *d++ = LINE_HHSYNC;
1000b2ee:	8fef      	ldrh	r7, [r5, #62]	; 0x3e
1000b2f0:	087e      	lsrs	r6, r7, #1
1000b2f2:	d006      	beq.n	1000b302 <_Z16ScanlineTypeInitPK6sVmode+0xe6>
1000b2f4:	0020      	movs	r0, r4
1000b2f6:	0032      	movs	r2, r6
1000b2f8:	2103      	movs	r1, #3
1000b2fa:	f7f5 fb47 	bl	1000098c <__wrap_memset>
		k = v->vpre1 & 1;
1000b2fe:	8fef      	ldrh	r7, [r5, #62]	; 0x3e
		for (i = v->vpre1/2; i > 0; i--) *d++ = LINE_HHSYNC;
1000b300:	19a4      	adds	r4, r4, r6
		k = v->vpre1 & 1;
1000b302:	2301      	movs	r3, #1
1000b304:	001a      	movs	r2, r3
1000b306:	403a      	ands	r2, r7
		if (k != 0) *d++ = LINE_HVSYNC;
1000b308:	423b      	tst	r3, r7
1000b30a:	d002      	beq.n	1000b312 <_Z16ScanlineTypeInitPK6sVmode+0xf6>
1000b30c:	3303      	adds	r3, #3
1000b30e:	7023      	strb	r3, [r4, #0]
1000b310:	3401      	adds	r4, #1
		for (i = (v->vsync2 - k)/2; i > 0; i--) *d++ = LINE_VVSYNC;
1000b312:	2342      	movs	r3, #66	; 0x42
1000b314:	4698      	mov	r8, r3
1000b316:	5aeb      	ldrh	r3, [r5, r3]
1000b318:	1a9a      	subs	r2, r3, r2
1000b31a:	0fd6      	lsrs	r6, r2, #31
1000b31c:	18b6      	adds	r6, r6, r2
1000b31e:	1076      	asrs	r6, r6, #1
1000b320:	d007      	beq.n	1000b332 <_Z16ScanlineTypeInitPK6sVmode+0x116>
1000b322:	0020      	movs	r0, r4
1000b324:	0032      	movs	r2, r6
1000b326:	2101      	movs	r1, #1
1000b328:	f7f5 fb30 	bl	1000098c <__wrap_memset>
		if (((v->vsync2 - k) & 1) != 0) *d++ = LINE_VHSYNC;
1000b32c:	4643      	mov	r3, r8
1000b32e:	5aeb      	ldrh	r3, [r5, r3]
		for (i = (v->vsync2 - k)/2; i > 0; i--) *d++ = LINE_VVSYNC;
1000b330:	19a4      	adds	r4, r4, r6
		if (((v->vsync2 - k) & 1) != 0) *d++ = LINE_VHSYNC;
1000b332:	1bdb      	subs	r3, r3, r7
1000b334:	07db      	lsls	r3, r3, #31
1000b336:	d502      	bpl.n	1000b33e <_Z16ScanlineTypeInitPK6sVmode+0x122>
1000b338:	2302      	movs	r3, #2
1000b33a:	7023      	strb	r3, [r4, #0]
1000b33c:	3401      	adds	r4, #1
		for (i = v->vpost2/2; i > 0; i--) *d++ = LINE_HHSYNC;
1000b33e:	2344      	movs	r3, #68	; 0x44
1000b340:	5aee      	ldrh	r6, [r5, r3]
1000b342:	0876      	lsrs	r6, r6, #1
1000b344:	d005      	beq.n	1000b352 <_Z16ScanlineTypeInitPK6sVmode+0x136>
1000b346:	0020      	movs	r0, r4
1000b348:	0032      	movs	r2, r6
1000b34a:	2103      	movs	r1, #3
1000b34c:	f7f5 fb1e 	bl	1000098c <__wrap_memset>
1000b350:	19a4      	adds	r4, r4, r6
		for (i = v->vback2; i > 0; i--) *d++ = LINE_DARK;
1000b352:	2346      	movs	r3, #70	; 0x46
1000b354:	5aee      	ldrh	r6, [r5, r3]
1000b356:	2e00      	cmp	r6, #0
1000b358:	d005      	beq.n	1000b366 <_Z16ScanlineTypeInitPK6sVmode+0x14a>
1000b35a:	0020      	movs	r0, r4
1000b35c:	0032      	movs	r2, r6
1000b35e:	2105      	movs	r1, #5
1000b360:	f7f5 fb14 	bl	1000098c <__wrap_memset>
1000b364:	19a4      	adds	r4, r4, r6
		if (v->odd)
1000b366:	2358      	movs	r3, #88	; 0x58
1000b368:	5ceb      	ldrb	r3, [r5, r3]
1000b36a:	2b00      	cmp	r3, #0
1000b36c:	d026      	beq.n	1000b3bc <_Z16ScanlineTypeInitPK6sVmode+0x1a0>
			for (i = v->vact2; i > 0; i--) *d++ = LINE_IMGEVEN2; // even lines 0, 2, 4, ... (PAL)
1000b36e:	2348      	movs	r3, #72	; 0x48
1000b370:	5aee      	ldrh	r6, [r5, r3]
1000b372:	2e00      	cmp	r6, #0
1000b374:	d005      	beq.n	1000b382 <_Z16ScanlineTypeInitPK6sVmode+0x166>
1000b376:	0020      	movs	r0, r4
1000b378:	0032      	movs	r2, r6
1000b37a:	2108      	movs	r1, #8
1000b37c:	f7f5 fb06 	bl	1000098c <__wrap_memset>
1000b380:	19a4      	adds	r4, r4, r6
		for (i = v->vfront2; i > 0; i--) *d++ = LINE_DARK;
1000b382:	234a      	movs	r3, #74	; 0x4a
1000b384:	5aee      	ldrh	r6, [r5, r3]
1000b386:	2e00      	cmp	r6, #0
1000b388:	d005      	beq.n	1000b396 <_Z16ScanlineTypeInitPK6sVmode+0x17a>
1000b38a:	0020      	movs	r0, r4
1000b38c:	0032      	movs	r2, r6
1000b38e:	2105      	movs	r1, #5
1000b390:	f7f5 fafc 	bl	1000098c <__wrap_memset>
1000b394:	19a4      	adds	r4, r4, r6
		for (i = v->vpre2/2; i > 0; i--) *d++ = LINE_HHSYNC;
1000b396:	234c      	movs	r3, #76	; 0x4c
1000b398:	5aea      	ldrh	r2, [r5, r3]
1000b39a:	0852      	lsrs	r2, r2, #1
1000b39c:	d100      	bne.n	1000b3a0 <_Z16ScanlineTypeInitPK6sVmode+0x184>
1000b39e:	e76b      	b.n	1000b278 <_Z16ScanlineTypeInitPK6sVmode+0x5c>
1000b3a0:	2103      	movs	r1, #3
1000b3a2:	0020      	movs	r0, r4
1000b3a4:	f7f5 faf2 	bl	1000098c <__wrap_memset>
1000b3a8:	e766      	b.n	1000b278 <_Z16ScanlineTypeInitPK6sVmode+0x5c>
			for (i = v->vact1; i > 0; i--) *d++ = LINE_IMGODD1; // odd lines 1, 3, 5, ... (PAL)
1000b3aa:	2e00      	cmp	r6, #0
1000b3ac:	d096      	beq.n	1000b2dc <_Z16ScanlineTypeInitPK6sVmode+0xc0>
1000b3ae:	0020      	movs	r0, r4
1000b3b0:	0032      	movs	r2, r6
1000b3b2:	2109      	movs	r1, #9
1000b3b4:	f7f5 faea 	bl	1000098c <__wrap_memset>
1000b3b8:	19a4      	adds	r4, r4, r6
1000b3ba:	e78f      	b.n	1000b2dc <_Z16ScanlineTypeInitPK6sVmode+0xc0>
			for (i = v->vact2; i > 0; i--) *d++ = LINE_IMGODD2; // odd lines 1, 3, 5, ... (NTSC)
1000b3bc:	2348      	movs	r3, #72	; 0x48
1000b3be:	5aee      	ldrh	r6, [r5, r3]
1000b3c0:	2e00      	cmp	r6, #0
1000b3c2:	d0de      	beq.n	1000b382 <_Z16ScanlineTypeInitPK6sVmode+0x166>
1000b3c4:	0020      	movs	r0, r4
1000b3c6:	0032      	movs	r2, r6
1000b3c8:	210a      	movs	r1, #10
1000b3ca:	f7f5 fadf 	bl	1000098c <__wrap_memset>
1000b3ce:	19a4      	adds	r4, r4, r6
1000b3d0:	e7d7      	b.n	1000b382 <_Z16ScanlineTypeInitPK6sVmode+0x166>
1000b3d2:	46c0      	nop			; (mov r8, r8)
1000b3d4:	20006e4c 	.word	0x20006e4c

1000b3d8 <_Z7VgaInitPK6sVmode>:
}

// initialize videomode (returns False on bad configuration)
// - All layer modes must use same layer program (LAYERMODE_BASE = overlapped layers are OFF)
void VgaInit(const sVmode* vmode)
{
1000b3d8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b3da:	46de      	mov	lr, fp
1000b3dc:	464e      	mov	r6, r9
1000b3de:	4645      	mov	r5, r8
1000b3e0:	4657      	mov	r7, sl
1000b3e2:	0004      	movs	r4, r0
1000b3e4:	b5e0      	push	{r5, r6, r7, lr}
1000b3e6:	b083      	sub	sp, #12
1000b3e8:	9001      	str	r0, [sp, #4]
	int i;

	// stop old state
	VgaTerm();
1000b3ea:	f7ff feb3 	bl	1000b154 <_Z7VgaTermv>

	// initialize scanline type table
	ScanlineTypeInit(vmode);
1000b3ee:	0020      	movs	r0, r4
1000b3f0:	f7ff ff14 	bl	1000b21c <_Z16ScanlineTypeInitPK6sVmode>
	// prepare render font pixel mask
	for (i = 0; i < 256; i++)
	{
		// higher 4 bits
		u32 m = 0;
		if ((i & B7) != 0) m |= 0xff;
1000b3f4:	2280      	movs	r2, #128	; 0x80
1000b3f6:	4691      	mov	r9, r2
		if ((i & B6) != 0) m |= 0xff << 8;
1000b3f8:	3a40      	subs	r2, #64	; 0x40
1000b3fa:	4690      	mov	r8, r2
		if ((i & B5) != 0) m |= 0xff << 16;
		if ((i & B4) != 0) m |= 0xff << 24;
1000b3fc:	22ff      	movs	r2, #255	; 0xff
		if ((i & B5) != 0) m |= 0xff << 16;
1000b3fe:	27ff      	movs	r7, #255	; 0xff
		if ((i & B4) != 0) m |= 0xff << 24;
1000b400:	0612      	lsls	r2, r2, #24
	for (i = 0; i < 256; i++)
1000b402:	2300      	movs	r3, #0
		if ((i & B5) != 0) m |= 0xff << 16;
1000b404:	2520      	movs	r5, #32
		if ((i & B4) != 0) m |= 0xff << 24;
1000b406:	2610      	movs	r6, #16
1000b408:	4694      	mov	ip, r2
1000b40a:	4956      	ldr	r1, [pc, #344]	; (1000b564 <_Z7VgaInitPK6sVmode+0x18c>)
		if ((i & B5) != 0) m |= 0xff << 16;
1000b40c:	043f      	lsls	r7, r7, #16
1000b40e:	e024      	b.n	1000b45a <_Z7VgaInitPK6sVmode+0x82>
		if ((i & B7) != 0) m |= 0xff;
1000b410:	20ff      	movs	r0, #255	; 0xff
		u32 m = 0;
1000b412:	2200      	movs	r2, #0
		if ((i & B7) != 0) m |= 0xff;
1000b414:	0200      	lsls	r0, r0, #8
		if ((i & B6) != 0) m |= 0xff << 8;
1000b416:	4644      	mov	r4, r8
1000b418:	421c      	tst	r4, r3
1000b41a:	d000      	beq.n	1000b41e <_Z7VgaInitPK6sVmode+0x46>
1000b41c:	0002      	movs	r2, r0
		if ((i & B5) != 0) m |= 0xff << 16;
1000b41e:	421d      	tst	r5, r3
1000b420:	d000      	beq.n	1000b424 <_Z7VgaInitPK6sVmode+0x4c>
1000b422:	433a      	orrs	r2, r7
		if ((i & B4) != 0) m |= 0xff << 24;
1000b424:	421e      	tst	r6, r3
1000b426:	d001      	beq.n	1000b42c <_Z7VgaInitPK6sVmode+0x54>
1000b428:	4660      	mov	r0, ip
1000b42a:	4302      	orrs	r2, r0
		RenderTextMask[2*i] = m;
1000b42c:	600a      	str	r2, [r1, #0]

		// lower 4 bits
		m = 0;
		if ((i & B3) != 0) m |= 0xff;
1000b42e:	071a      	lsls	r2, r3, #28
1000b430:	d419      	bmi.n	1000b466 <_Z7VgaInitPK6sVmode+0x8e>
1000b432:	20ff      	movs	r0, #255	; 0xff
		m = 0;
1000b434:	2200      	movs	r2, #0
		if ((i & B3) != 0) m |= 0xff;
1000b436:	0200      	lsls	r0, r0, #8
		if ((i & B2) != 0) m |= 0xff << 8;
1000b438:	075c      	lsls	r4, r3, #29
1000b43a:	d500      	bpl.n	1000b43e <_Z7VgaInitPK6sVmode+0x66>
1000b43c:	0002      	movs	r2, r0
		if ((i & B1) != 0) m |= 0xff << 16;
1000b43e:	0798      	lsls	r0, r3, #30
1000b440:	d500      	bpl.n	1000b444 <_Z7VgaInitPK6sVmode+0x6c>
1000b442:	433a      	orrs	r2, r7
		if ((i & B0) != 0) m |= 0xff << 24;
1000b444:	07d8      	lsls	r0, r3, #31
1000b446:	d501      	bpl.n	1000b44c <_Z7VgaInitPK6sVmode+0x74>
1000b448:	4660      	mov	r0, ip
1000b44a:	4302      	orrs	r2, r0
		RenderTextMask[2*i+1] = m;
1000b44c:	604a      	str	r2, [r1, #4]
	for (i = 0; i < 256; i++)
1000b44e:	2280      	movs	r2, #128	; 0x80
1000b450:	3301      	adds	r3, #1
1000b452:	3108      	adds	r1, #8
1000b454:	0052      	lsls	r2, r2, #1
1000b456:	4293      	cmp	r3, r2
1000b458:	d008      	beq.n	1000b46c <_Z7VgaInitPK6sVmode+0x94>
		if ((i & B7) != 0) m |= 0xff;
1000b45a:	464a      	mov	r2, r9
1000b45c:	421a      	tst	r2, r3
1000b45e:	d0d7      	beq.n	1000b410 <_Z7VgaInitPK6sVmode+0x38>
1000b460:	22ff      	movs	r2, #255	; 0xff
1000b462:	4841      	ldr	r0, [pc, #260]	; (1000b568 <_Z7VgaInitPK6sVmode+0x190>)
1000b464:	e7d7      	b.n	1000b416 <_Z7VgaInitPK6sVmode+0x3e>
		if ((i & B3) != 0) m |= 0xff;
1000b466:	22ff      	movs	r2, #255	; 0xff
1000b468:	483f      	ldr	r0, [pc, #252]	; (1000b568 <_Z7VgaInitPK6sVmode+0x190>)
1000b46a:	e7e5      	b.n	1000b438 <_Z7VgaInitPK6sVmode+0x60>

	// save current videomode
	memcpy(&CurVmode, vmode, sizeof(sVmode));

	// initialize parameters
	ScanLine = 1; // currently processed scanline
1000b46c:	2401      	movs	r4, #1
	memset(LineBuf0, COL_BLACK, BLACK_MAX);
1000b46e:	3281      	adds	r2, #129	; 0x81
1000b470:	2100      	movs	r1, #0
1000b472:	32ff      	adds	r2, #255	; 0xff
1000b474:	483d      	ldr	r0, [pc, #244]	; (1000b56c <_Z7VgaInitPK6sVmode+0x194>)
1000b476:	f7f5 fa89 	bl	1000098c <__wrap_memset>
	memcpy(&CurVmode, vmode, sizeof(sVmode));
1000b47a:	9d01      	ldr	r5, [sp, #4]
1000b47c:	225c      	movs	r2, #92	; 0x5c
1000b47e:	0029      	movs	r1, r5
1000b480:	483b      	ldr	r0, [pc, #236]	; (1000b570 <_Z7VgaInitPK6sVmode+0x198>)
1000b482:	f7f5 fa89 	bl	10000998 <__wrap___aeabi_memcpy>
	ScanLine = 1; // currently processed scanline
1000b486:	4b3b      	ldr	r3, [pc, #236]	; (1000b574 <_Z7VgaInitPK6sVmode+0x19c>)
//	Frame = 0;
	BufInx = 0; // at first, control buffer 1 will be sent out
	CtrlBufNext[0] = CtrlBuf2;

	// initialize base layer
	LayerModeInx[0] = LAYERMODE_BASE;
1000b488:	483b      	ldr	r0, [pc, #236]	; (1000b578 <_Z7VgaInitPK6sVmode+0x1a0>)
	ScanLine = 1; // currently processed scanline
1000b48a:	601c      	str	r4, [r3, #0]
	BufInx = 0; // at first, control buffer 1 will be sent out
1000b48c:	2300      	movs	r3, #0
	LayerModeInx[0] = LAYERMODE_BASE;
1000b48e:	4681      	mov	r9, r0
	BufInx = 0; // at first, control buffer 1 will be sent out
1000b490:	4a3a      	ldr	r2, [pc, #232]	; (1000b57c <_Z7VgaInitPK6sVmode+0x1a4>)
	CtrlBufNext[0] = CtrlBuf2;
1000b492:	493b      	ldr	r1, [pc, #236]	; (1000b580 <_Z7VgaInitPK6sVmode+0x1a8>)
	BufInx = 0; // at first, control buffer 1 will be sent out
1000b494:	6013      	str	r3, [r2, #0]
	memcpy(&CurLayerMode[0], &LayerMode[LAYERMODE_BASE], sizeof(sLayerMode));
1000b496:	4f3b      	ldr	r7, [pc, #236]	; (1000b584 <_Z7VgaInitPK6sVmode+0x1ac>)
	CtrlBufNext[0] = CtrlBuf2;
1000b498:	4a3b      	ldr	r2, [pc, #236]	; (1000b588 <_Z7VgaInitPK6sVmode+0x1b0>)
	LayerModeInx[0] = LAYERMODE_BASE;
1000b49a:	7003      	strb	r3, [r0, #0]
	memcpy(&CurLayerMode[0], &LayerMode[LAYERMODE_BASE], sizeof(sLayerMode));
1000b49c:	4b3b      	ldr	r3, [pc, #236]	; (1000b58c <_Z7VgaInitPK6sVmode+0x1b4>)
	CtrlBufNext[0] = CtrlBuf2;
1000b49e:	6011      	str	r1, [r2, #0]
	memcpy(&CurLayerMode[0], &LayerMode[LAYERMODE_BASE], sizeof(sLayerMode));
1000b4a0:	0038      	movs	r0, r7
1000b4a2:	0019      	movs	r1, r3
1000b4a4:	2203      	movs	r2, #3
1000b4a6:	469a      	mov	sl, r3
1000b4a8:	f7f5 fa76 	bl	10000998 <__wrap___aeabi_memcpy>
	memset(&LayerScreen[0], 0, sizeof(sLayer));
1000b4ac:	2100      	movs	r1, #0
1000b4ae:	2224      	movs	r2, #36	; 0x24
1000b4b0:	4837      	ldr	r0, [pc, #220]	; (1000b590 <_Z7VgaInitPK6sVmode+0x1b8>)
1000b4b2:	f7f5 fa6b 	bl	1000098c <__wrap_memset>

	// save layer modes
	LayerModeInx[1] = vmode->mode[1];
1000b4b6:	4649      	mov	r1, r9
1000b4b8:	7eab      	ldrb	r3, [r5, #26]
	LayerModeInx[2] = vmode->mode[2];
	LayerModeInx[3] = vmode->mode[3];

	LayerMask = B0; // mask of active layers
1000b4ba:	4e36      	ldr	r6, [pc, #216]	; (1000b594 <_Z7VgaInitPK6sVmode+0x1bc>)
	LayerModeInx[1] = vmode->mode[1];
1000b4bc:	704b      	strb	r3, [r1, #1]
	LayerModeInx[2] = vmode->mode[2];
1000b4be:	7eeb      	ldrb	r3, [r5, #27]
1000b4c0:	3703      	adds	r7, #3
1000b4c2:	708b      	strb	r3, [r1, #2]
	LayerModeInx[3] = vmode->mode[3];
1000b4c4:	7f2b      	ldrb	r3, [r5, #28]
	LayerMask = B0; // mask of active layers
1000b4c6:	7034      	strb	r4, [r6, #0]
	LayerModeInx[3] = vmode->mode[3];
1000b4c8:	70cb      	strb	r3, [r1, #3]
	for (i = 1; i < LAYERS; i++)
	{
		memcpy(&CurLayerMode[i], &LayerMode[LayerModeInx[i]], sizeof(sLayerMode));
		if (LayerModeInx[i] != LAYERMODE_BASE) LayerMask |= (1 << i);
1000b4ca:	2301      	movs	r3, #1
1000b4cc:	469b      	mov	fp, r3
		memcpy(&CurLayerMode[i], &LayerMode[LayerModeInx[i]], sizeof(sLayerMode));
1000b4ce:	464b      	mov	r3, r9
1000b4d0:	5d1d      	ldrb	r5, [r3, r4]
1000b4d2:	2203      	movs	r2, #3
1000b4d4:	0069      	lsls	r1, r5, #1
1000b4d6:	1949      	adds	r1, r1, r5
1000b4d8:	0038      	movs	r0, r7
1000b4da:	4451      	add	r1, sl
1000b4dc:	f7f5 fa5c 	bl	10000998 <__wrap___aeabi_memcpy>
		if (LayerModeInx[i] != LAYERMODE_BASE) LayerMask |= (1 << i);
1000b4e0:	2d00      	cmp	r5, #0
1000b4e2:	d004      	beq.n	1000b4ee <_Z7VgaInitPK6sVmode+0x116>
1000b4e4:	465b      	mov	r3, fp
1000b4e6:	40a3      	lsls	r3, r4
1000b4e8:	7832      	ldrb	r2, [r6, #0]
1000b4ea:	4313      	orrs	r3, r2
1000b4ec:	7033      	strb	r3, [r6, #0]
	for (i = 1; i < LAYERS; i++)
1000b4ee:	3401      	adds	r4, #1
1000b4f0:	3703      	adds	r7, #3
1000b4f2:	2c04      	cmp	r4, #4
1000b4f4:	d1eb      	bne.n	1000b4ce <_Z7VgaInitPK6sVmode+0xf6>
	}

	// get layer program
	LayerProgInx = vmode->prog;
1000b4f6:	9b01      	ldr	r3, [sp, #4]
	memcpy(&CurLayerProg, &LayerProg[LayerProgInx], sizeof(sLayerProg));
1000b4f8:	4927      	ldr	r1, [pc, #156]	; (1000b598 <_Z7VgaInitPK6sVmode+0x1c0>)
	LayerProgInx = vmode->prog;
1000b4fa:	7e1a      	ldrb	r2, [r3, #24]
1000b4fc:	4b27      	ldr	r3, [pc, #156]	; (1000b59c <_Z7VgaInitPK6sVmode+0x1c4>)
1000b4fe:	701a      	strb	r2, [r3, #0]
	memcpy(&CurLayerProg, &LayerProg[LayerProgInx], sizeof(sLayerProg));
1000b500:	0053      	lsls	r3, r2, #1
1000b502:	189b      	adds	r3, r3, r2
1000b504:	4a26      	ldr	r2, [pc, #152]	; (1000b5a0 <_Z7VgaInitPK6sVmode+0x1c8>)
1000b506:	011b      	lsls	r3, r3, #4
1000b508:	189b      	adds	r3, r3, r2
1000b50a:	000a      	movs	r2, r1
1000b50c:	cb13      	ldmia	r3!, {r0, r1, r4}
1000b50e:	c213      	stmia	r2!, {r0, r1, r4}
1000b510:	cb13      	ldmia	r3!, {r0, r1, r4}
1000b512:	c213      	stmia	r2!, {r0, r1, r4}
1000b514:	cb13      	ldmia	r3!, {r0, r1, r4}
1000b516:	c213      	stmia	r2!, {r0, r1, r4}
1000b518:	cb13      	ldmia	r3!, {r0, r1, r4}
1000b51a:	c213      	stmia	r2!, {r0, r1, r4}

	// initialize VGA PIO
	VgaPioInit();
1000b51c:	f7ff fc6e 	bl	1000adfc <_Z10VgaPioInitv>

	// initialize scanline buffers
	VgaBufInit();
1000b520:	f7ff fd42 	bl	1000afa8 <_Z10VgaBufInitv>

	// initialize DMA
	VgaDmaInit();
1000b524:	f7ff fbdc 	bl	1000ace0 <_Z10VgaDmaInitv>

	// enable DMA IRQ
	irq_set_enabled(DMA_IRQ_0, true);
1000b528:	2101      	movs	r1, #1
1000b52a:	200b      	movs	r0, #11
1000b52c:	f7f5 fe02 	bl	10001134 <irq_set_enabled>
    dma_hw->multi_channel_trigger = chan_mask;
1000b530:	22a0      	movs	r2, #160	; 0xa0
1000b532:	2386      	movs	r3, #134	; 0x86
1000b534:	2101      	movs	r1, #1
1000b536:	05d2      	lsls	r2, r2, #23
1000b538:	00db      	lsls	r3, r3, #3
1000b53a:	50d1      	str	r1, [r2, r3]
                 ((mask << PIO_CTRL_SM_ENABLE_LSB) & PIO_CTRL_SM_ENABLE_BITS);
1000b53c:	230f      	movs	r3, #15
    pio->ctrl |= ((mask << PIO_CTRL_CLKDIV_RESTART_LSB) & PIO_CTRL_CLKDIV_RESTART_BITS) |
1000b53e:	4919      	ldr	r1, [pc, #100]	; (1000b5a4 <_Z7VgaInitPK6sVmode+0x1cc>)

	// start DMA with base layer 0
	dma_channel_start(VGA_DMA_CB0);

	// run state machines
	pio_enable_sm_mask_in_sync(VGA_PIO, LayerMask);
1000b540:	7832      	ldrb	r2, [r6, #0]
1000b542:	6808      	ldr	r0, [r1, #0]
                 ((mask << PIO_CTRL_SM_ENABLE_LSB) & PIO_CTRL_SM_ENABLE_BITS);
1000b544:	4013      	ands	r3, r2
    pio->ctrl |= ((mask << PIO_CTRL_CLKDIV_RESTART_LSB) & PIO_CTRL_CLKDIV_RESTART_BITS) |
1000b546:	4303      	orrs	r3, r0
1000b548:	20f0      	movs	r0, #240	; 0xf0
1000b54a:	0212      	lsls	r2, r2, #8
1000b54c:	0100      	lsls	r0, r0, #4
1000b54e:	4002      	ands	r2, r0
1000b550:	4313      	orrs	r3, r2
1000b552:	600b      	str	r3, [r1, #0]
}
1000b554:	b003      	add	sp, #12
1000b556:	bcf0      	pop	{r4, r5, r6, r7}
1000b558:	46bb      	mov	fp, r7
1000b55a:	46b2      	mov	sl, r6
1000b55c:	46a9      	mov	r9, r5
1000b55e:	46a0      	mov	r8, r4
1000b560:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000b562:	46c0      	nop			; (mov r8, r8)
1000b564:	2000642c 	.word	0x2000642c
1000b568:	0000ffff 	.word	0x0000ffff
1000b56c:	20004af0 	.word	0x20004af0
1000b570:	200049e8 	.word	0x200049e8
1000b574:	20006e48 	.word	0x20006e48
1000b578:	20004a5c 	.word	0x20004a5c
1000b57c:	2000349c 	.word	0x2000349c
1000b580:	20003f38 	.word	0x20003f38
1000b584:	200049a8 	.word	0x200049a8
1000b588:	20004998 	.word	0x20004998
1000b58c:	100298d8 	.word	0x100298d8
1000b590:	20004a60 	.word	0x20004a60
1000b594:	20012769 	.word	0x20012769
1000b598:	200049b4 	.word	0x200049b4
1000b59c:	2001276a 	.word	0x2001276a
1000b5a0:	10029914 	.word	0x10029914
1000b5a4:	50200000 	.word	0x50200000

1000b5a8 <_Z7VgaCorev>:

void (* volatile Core1Fnc)() = NULL; // core 1 remote function

// VGA core
void VgaCore()
{
1000b5a8:	b570      	push	{r4, r5, r6, lr}
			if ((u32)v == (u32)1)
				VgaTerm(); // terminate
			else
				VgaInit(v);
			__dmb();
			VgaVmodeReq = NULL;
1000b5aa:	2600      	movs	r6, #0
1000b5ac:	4d0f      	ldr	r5, [pc, #60]	; (1000b5ec <_Z7VgaCorev+0x44>)
1000b5ae:	4c10      	ldr	r4, [pc, #64]	; (1000b5f0 <_Z7VgaCorev+0x48>)
    __asm volatile ("dmb");
1000b5b0:	f3bf 8f5f 	dmb	sy
		v = VgaVmodeReq;
1000b5b4:	6828      	ldr	r0, [r5, #0]
		if (v != NULL)
1000b5b6:	2800      	cmp	r0, #0
1000b5b8:	d006      	beq.n	1000b5c8 <_Z7VgaCorev+0x20>
			if ((u32)v == (u32)1)
1000b5ba:	2801      	cmp	r0, #1
1000b5bc:	d012      	beq.n	1000b5e4 <_Z7VgaCorev+0x3c>
				VgaInit(v);
1000b5be:	f7ff ff0b 	bl	1000b3d8 <_Z7VgaInitPK6sVmode>
1000b5c2:	f3bf 8f5f 	dmb	sy
			VgaVmodeReq = NULL;
1000b5c6:	602e      	str	r6, [r5, #0]
		}

		// execute remote function
		fnc = Core1Fnc;
1000b5c8:	6823      	ldr	r3, [r4, #0]
		if (fnc != NULL)
1000b5ca:	2b00      	cmp	r3, #0
1000b5cc:	d0f0      	beq.n	1000b5b0 <_Z7VgaCorev+0x8>
		{
			fnc();
1000b5ce:	4798      	blx	r3
1000b5d0:	f3bf 8f5f 	dmb	sy
			__dmb();
			Core1Fnc = NULL;
1000b5d4:	6026      	str	r6, [r4, #0]
1000b5d6:	f3bf 8f5f 	dmb	sy
		v = VgaVmodeReq;
1000b5da:	6828      	ldr	r0, [r5, #0]
		if (v != NULL)
1000b5dc:	2800      	cmp	r0, #0
1000b5de:	d0f3      	beq.n	1000b5c8 <_Z7VgaCorev+0x20>
			if ((u32)v == (u32)1)
1000b5e0:	2801      	cmp	r0, #1
1000b5e2:	d1ec      	bne.n	1000b5be <_Z7VgaCorev+0x16>
				VgaTerm(); // terminate
1000b5e4:	f7ff fdb6 	bl	1000b154 <_Z7VgaTermv>
1000b5e8:	e7eb      	b.n	1000b5c2 <_Z7VgaCorev+0x1a>
1000b5ea:	46c0      	nop			; (mov r8, r8)
1000b5ec:	20011a60 	.word	0x20011a60
1000b5f0:	200034d4 	.word	0x200034d4

1000b5f4 <_Z10VgaInitReqPK6sVmode>:
}

// request to initialize VGA videomode, NULL=only stop driver (wait to initialization completes)
void VgaInitReq(const sVmode* vmode)
{
	if (vmode == NULL) vmode = (const sVmode*)1;
1000b5f4:	2800      	cmp	r0, #0
1000b5f6:	d00c      	beq.n	1000b612 <_Z10VgaInitReqPK6sVmode+0x1e>
1000b5f8:	f3bf 8f5f 	dmb	sy
	__dmb();
	VgaVmodeReq = vmode;
1000b5fc:	4a06      	ldr	r2, [pc, #24]	; (1000b618 <_Z10VgaInitReqPK6sVmode+0x24>)
1000b5fe:	6010      	str	r0, [r2, #0]
	while (VgaVmodeReq != NULL) { __dmb(); }
1000b600:	6813      	ldr	r3, [r2, #0]
1000b602:	2b00      	cmp	r3, #0
1000b604:	d004      	beq.n	1000b610 <_Z10VgaInitReqPK6sVmode+0x1c>
1000b606:	f3bf 8f5f 	dmb	sy
1000b60a:	6813      	ldr	r3, [r2, #0]
1000b60c:	2b00      	cmp	r3, #0
1000b60e:	d1fa      	bne.n	1000b606 <_Z10VgaInitReqPK6sVmode+0x12>
}
1000b610:	4770      	bx	lr
	if (vmode == NULL) vmode = (const sVmode*)1;
1000b612:	3001      	adds	r0, #1
1000b614:	e7f0      	b.n	1000b5f8 <_Z10VgaInitReqPK6sVmode+0x4>
1000b616:	46c0      	nop			; (mov r8, r8)
1000b618:	20011a60 	.word	0x20011a60

1000b61c <_Z7LayerOnh>:
// number of pins of overlapped layer (base layer should stay VGA_GPIO_OUTNUM)
u8 LayerNumPin[LAYERS_MAX] = { VGA_GPIO_OUTNUM, VGA_GPIO_OUTNUM, VGA_GPIO_OUTNUM, VGA_GPIO_OUTNUM};

// set overlapped layer 1..3 ON
void LayerOn(u8 inx)
{
1000b61c:	0003      	movs	r3, r0
1000b61e:	f3bf 8f5f 	dmb	sy
	__dmb();
	LayerScreen[inx].on = True;
1000b622:	00c0      	lsls	r0, r0, #3
1000b624:	18c3      	adds	r3, r0, r3
1000b626:	4804      	ldr	r0, [pc, #16]	; (1000b638 <_Z7LayerOnh+0x1c>)
1000b628:	009b      	lsls	r3, r3, #2
1000b62a:	18c0      	adds	r0, r0, r3
1000b62c:	2301      	movs	r3, #1
1000b62e:	3022      	adds	r0, #34	; 0x22
1000b630:	7003      	strb	r3, [r0, #0]
1000b632:	f3bf 8f5f 	dmb	sy
	__dmb();
}
1000b636:	4770      	bx	lr
1000b638:	20004a60 	.word	0x20004a60

1000b63c <_Z10LayerSetuphPKhPK6sVmodetthPKv>:
//  h ... image height
//  col ... key color (needed for LAYERMODE_KEY and LAYERMODE_MONO layer mode)
//  par ... additional data (RLE index table, integer transformation matrix)
// Use these functions after layer setup: LayerSetX, LayerSetY, LayerOn
void LayerSetup(u8 inx, const u8* img, const sVmode* vmode, u16 w, u16 h, u8 col /* = 0 */, const void* par /* = NULL */)
{
1000b63c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b63e:	46de      	mov	lr, fp
1000b640:	464e      	mov	r6, r9
1000b642:	4645      	mov	r5, r8
1000b644:	4657      	mov	r7, sl
1000b646:	b5e0      	push	{r5, r6, r7, lr}
1000b648:	b083      	sub	sp, #12
1000b64a:	4688      	mov	r8, r1
1000b64c:	a90c      	add	r1, sp, #48	; 0x30
1000b64e:	4693      	mov	fp, r2
1000b650:	880a      	ldrh	r2, [r1, #0]
1000b652:	a90d      	add	r1, sp, #52	; 0x34
1000b654:	4691      	mov	r9, r2
1000b656:	7809      	ldrb	r1, [r1, #0]
1000b658:	f3bf 8f5f 	dmb	sy
	LayerScreen[inx].on = False;
1000b65c:	00c2      	lsls	r2, r0, #3
1000b65e:	1814      	adds	r4, r2, r0
1000b660:	4e35      	ldr	r6, [pc, #212]	; (1000b738 <_Z10LayerSetuphPKhPK6sVmodetthPKv+0xfc>)
1000b662:	9201      	str	r2, [sp, #4]
1000b664:	00a2      	lsls	r2, r4, #2
1000b666:	18b4      	adds	r4, r6, r2
1000b668:	4694      	mov	ip, r2
1000b66a:	2222      	movs	r2, #34	; 0x22
1000b66c:	4692      	mov	sl, r2
1000b66e:	44a2      	add	sl, r4
1000b670:	2700      	movs	r7, #0
1000b672:	4652      	mov	r2, sl
1000b674:	7017      	strb	r7, [r2, #0]
1000b676:	f3bf 8f5f 	dmb	sy
	LayerOff(inx); // set layer OFF
	sLayer* lay = &LayerScreen[inx]; // get pointer to layer
	lay->img = img; // pointer to image data
1000b67a:	4662      	mov	r2, ip
1000b67c:	4645      	mov	r5, r8
1000b67e:	50b5      	str	r5, [r6, r2]
	lay->par = par; // additional parameter
1000b680:	9a0e      	ldr	r2, [sp, #56]	; 0x38
	lay->keycol = col | ((u16)col << 8) | ((u32)col << 16) | ((u32)col << 24); // key color
	lay->x = 0; // X coordinate
1000b682:	8267      	strh	r7, [r4, #18]
	lay->par = par; // additional parameter
1000b684:	6062      	str	r2, [r4, #4]
	lay->keycol = col | ((u16)col << 8) | ((u32)col << 16) | ((u32)col << 24); // key color
1000b686:	040a      	lsls	r2, r1, #16
1000b688:	4690      	mov	r8, r2
1000b68a:	060a      	lsls	r2, r1, #24
1000b68c:	4694      	mov	ip, r2
1000b68e:	4642      	mov	r2, r8
1000b690:	4665      	mov	r5, ip
1000b692:	432a      	orrs	r2, r5
1000b694:	4690      	mov	r8, r2
1000b696:	020a      	lsls	r2, r1, #8
1000b698:	4311      	orrs	r1, r2
1000b69a:	4642      	mov	r2, r8
1000b69c:	4311      	orrs	r1, r2
	lay->y = 0; // Y coordinate
	lay->h = h; // height of image
1000b69e:	464a      	mov	r2, r9
1000b6a0:	8322      	strh	r2, [r4, #24]
	lay->spritenum = 0; // number of sprites
	lay->cpp = vmode->cpp; // save clocks per pixel
1000b6a2:	465a      	mov	r2, fp
	lay->y = 0; // Y coordinate
1000b6a4:	82a7      	strh	r7, [r4, #20]
	lay->spritenum = 0; // number of sprites
1000b6a6:	8427      	strh	r7, [r4, #32]
	lay->cpp = vmode->cpp; // save clocks per pixel
1000b6a8:	0027      	movs	r7, r4
	lay->keycol = col | ((u16)col << 8) | ((u32)col << 16) | ((u32)col << 24); // key color
1000b6aa:	60e1      	str	r1, [r4, #12]
	lay->cpp = vmode->cpp; // save clocks per pixel
1000b6ac:	8ad2      	ldrh	r2, [r2, #22]
1000b6ae:	3723      	adds	r7, #35	; 0x23
1000b6b0:	703a      	strb	r2, [r7, #0]
	lay->mode = vmode->mode[inx]; // layer mode
1000b6b2:	465a      	mov	r2, fp
1000b6b4:	1812      	adds	r2, r2, r0
1000b6b6:	7e52      	ldrb	r2, [r2, #25]
	lay->w = w; // image width
1000b6b8:	82e3      	strh	r3, [r4, #22]
	lay->mode = vmode->mode[inx]; // layer mode
1000b6ba:	7722      	strb	r2, [r4, #28]
	lay->trans = mono ? (((w/8)+3)/4) : (w/4); // transfer count
1000b6bc:	2a04      	cmp	r2, #4
1000b6be:	d019      	beq.n	1000b6f4 <_Z10LayerSetuphPKhPK6sVmodetthPKv+0xb8>
1000b6c0:	089f      	lsrs	r7, r3, #2
1000b6c2:	8227      	strh	r7, [r4, #16]
	lay->wb = mono ? (w/8) : w; // width bytes
1000b6c4:	8363      	strh	r3, [r4, #26]
	switch (lay->mode)
1000b6c6:	2a12      	cmp	r2, #18
1000b6c8:	d834      	bhi.n	1000b734 <_Z10LayerSetuphPKhPK6sVmodetthPKv+0xf8>
1000b6ca:	4c1c      	ldr	r4, [pc, #112]	; (1000b73c <_Z10LayerSetuphPKhPK6sVmodetthPKv+0x100>)
1000b6cc:	0092      	lsls	r2, r2, #2
1000b6ce:	58a2      	ldr	r2, [r4, r2]
1000b6d0:	4697      	mov	pc, r2
		init = VGAWHITE(cppx, w);
1000b6d2:	1e59      	subs	r1, r3, #1
1000b6d4:	23c0      	movs	r3, #192	; 0xc0
1000b6d6:	029b      	lsls	r3, r3, #10
1000b6d8:	430b      	orrs	r3, r1
	lay->init = init; // init word
1000b6da:	9a01      	ldr	r2, [sp, #4]
1000b6dc:	4694      	mov	ip, r2
1000b6de:	4460      	add	r0, ip
1000b6e0:	0080      	lsls	r0, r0, #2
1000b6e2:	1830      	adds	r0, r6, r0
1000b6e4:	6083      	str	r3, [r0, #8]
	LayerSetW(inx, w); // set width of image, update parameters init, trans and wb
}
1000b6e6:	b003      	add	sp, #12
1000b6e8:	bcf0      	pop	{r4, r5, r6, r7}
1000b6ea:	46bb      	mov	fp, r7
1000b6ec:	46b2      	mov	sl, r6
1000b6ee:	46a9      	mov	r9, r5
1000b6f0:	46a0      	mov	r8, r4
1000b6f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	lay->trans = mono ? (((w/8)+3)/4) : (w/4); // transfer count
1000b6f4:	08df      	lsrs	r7, r3, #3
1000b6f6:	1cfa      	adds	r2, r7, #3
1000b6f8:	1092      	asrs	r2, r2, #2
1000b6fa:	8222      	strh	r2, [r4, #16]
		init = VGAMONO(cppx, w, (lay->keycol & 0xff));
1000b6fc:	22ff      	movs	r2, #255	; 0xff
1000b6fe:	0309      	lsls	r1, r1, #12
1000b700:	0312      	lsls	r2, r2, #12
1000b702:	3b01      	subs	r3, #1
1000b704:	4011      	ands	r1, r2
1000b706:	005b      	lsls	r3, r3, #1
1000b708:	430b      	orrs	r3, r1
1000b70a:	2101      	movs	r1, #1
	lay->wb = mono ? (w/8) : w; // width bytes
1000b70c:	8367      	strh	r7, [r4, #26]
		init = VGAMONO(cppx, w, (lay->keycol & 0xff));
1000b70e:	430b      	orrs	r3, r1
		break;
1000b710:	e7e3      	b.n	1000b6da <_Z10LayerSetuphPKhPK6sVmodetthPKv+0x9e>
		init = VGAKEY(cppx, w, (lay->keycol & 0xff));
1000b712:	22ff      	movs	r2, #255	; 0xff
1000b714:	02c9      	lsls	r1, r1, #11
1000b716:	02d2      	lsls	r2, r2, #11
1000b718:	3b01      	subs	r3, #1
1000b71a:	4011      	ands	r1, r2
1000b71c:	4319      	orrs	r1, r3
1000b71e:	2380      	movs	r3, #128	; 0x80
1000b720:	031b      	lsls	r3, r3, #12
1000b722:	430b      	orrs	r3, r1
		break;
1000b724:	e7d9      	b.n	1000b6da <_Z10LayerSetuphPKhPK6sVmodetthPKv+0x9e>
		init = VGACOLOR(cppx, w);
1000b726:	4906      	ldr	r1, [pc, #24]	; (1000b740 <_Z10LayerSetuphPKhPK6sVmodetthPKv+0x104>)
1000b728:	3b01      	subs	r3, #1
1000b72a:	005b      	lsls	r3, r3, #1
1000b72c:	430b      	orrs	r3, r1
		break;
1000b72e:	e7d4      	b.n	1000b6da <_Z10LayerSetuphPKhPK6sVmodetthPKv+0x9e>
	switch (lay->mode)
1000b730:	2301      	movs	r3, #1
1000b732:	e7d2      	b.n	1000b6da <_Z10LayerSetuphPKhPK6sVmodetthPKv+0x9e>
	u32 init = 0; // init word
1000b734:	2300      	movs	r3, #0
1000b736:	e7d0      	b.n	1000b6da <_Z10LayerSetuphPKhPK6sVmodetthPKv+0x9e>
1000b738:	20004a60 	.word	0x20004a60
1000b73c:	1002988c 	.word	0x1002988c
1000b740:	002ff000 	.word	0x002ff000

1000b744 <_Z11ScreenClearP7sScreen>:
1000b744:	f3bf 8f5f 	dmb	sy

// clear screen (set 0 strips, does not modify sprites)
void ScreenClear(sScreen* s)
{
	__dmb();
	s->num = 0;
1000b748:	2300      	movs	r3, #0
1000b74a:	8003      	strh	r3, [r0, #0]
1000b74c:	f3bf 8f5f 	dmb	sy
	__dmb();
}
1000b750:	4770      	bx	lr
1000b752:	46c0      	nop			; (mov r8, r8)

1000b754 <_Z14ScreenAddStripP7sScreeni>:

// add empty strip to the screen (returns pointer to the strip)
sStrip* ScreenAddStrip(sScreen* s, int height)
{
	int n = s->num;
1000b754:	23e4      	movs	r3, #228	; 0xe4
1000b756:	8802      	ldrh	r2, [r0, #0]
{
1000b758:	b510      	push	{r4, lr}
1000b75a:	4353      	muls	r3, r2
	sStrip* t = &s->strip[n];
	t->height = height;
1000b75c:	18c4      	adds	r4, r0, r3
1000b75e:	80a1      	strh	r1, [r4, #4]
	t->num = 0;
1000b760:	2100      	movs	r1, #0
1000b762:	80e1      	strh	r1, [r4, #6]
1000b764:	f3bf 8f5f 	dmb	sy
	__dmb();
	s->num = n + 1;
1000b768:	3201      	adds	r2, #1
1000b76a:	8002      	strh	r2, [r0, #0]
1000b76c:	f3bf 8f5f 	dmb	sy
	sStrip* t = &s->strip[n];
1000b770:	3304      	adds	r3, #4
1000b772:	18c0      	adds	r0, r0, r3
	__dmb();
	return t;
}
1000b774:	bd10      	pop	{r4, pc}
1000b776:	46c0      	nop			; (mov r8, r8)

1000b778 <_Z13ScreenAddSegmP6sStripi>:

// add empty segment to video strip (returns pointer to the segment and initialises is to defaults)
sSegm* ScreenAddSegm(sStrip* strip, int width)
{
1000b778:	b5f0      	push	{r4, r5, r6, r7, lr}
	int n = strip->num;
	sSegm* g = &strip->seg[n];
	g->width = width;
1000b77a:	2500      	movs	r5, #0
	int n = strip->num;
1000b77c:	8844      	ldrh	r4, [r0, #2]
	g->width = width;
1000b77e:	040f      	lsls	r7, r1, #16
1000b780:	00e3      	lsls	r3, r4, #3
1000b782:	1b1b      	subs	r3, r3, r4
1000b784:	009b      	lsls	r3, r3, #2
1000b786:	0c3e      	lsrs	r6, r7, #16
1000b788:	18c2      	adds	r2, r0, r3
1000b78a:	433e      	orrs	r6, r7
1000b78c:	6056      	str	r6, [r2, #4]
	g->wb = width;
	g->offx = 0;
1000b78e:	6095      	str	r5, [r2, #8]
	g->offy = 0;
	g->wrapx = width;
1000b790:	8191      	strh	r1, [r2, #12]
	g->wrapy = strip->height;
1000b792:	8801      	ldrh	r1, [r0, #0]
	g->data = NULL;
1000b794:	6115      	str	r5, [r2, #16]
	g->wrapy = strip->height;
1000b796:	81d1      	strh	r1, [r2, #14]
	g->form = GF_COLOR;
1000b798:	8295      	strh	r5, [r2, #20]
	g->dbly = false;
	g->par = 0;
1000b79a:	6195      	str	r5, [r2, #24]
	g->par2 = 0;
1000b79c:	61d5      	str	r5, [r2, #28]
1000b79e:	f3bf 8f5f 	dmb	sy
	__dmb();
	strip->num = n + 1;
1000b7a2:	3401      	adds	r4, #1
1000b7a4:	8044      	strh	r4, [r0, #2]
1000b7a6:	f3bf 8f5f 	dmb	sy
	sSegm* g = &strip->seg[n];
1000b7aa:	3304      	adds	r3, #4
1000b7ac:	18c0      	adds	r0, r0, r3
	__dmb();
	return g;
}
1000b7ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

1000b7b0 <_Z15ScreenSegmColorP5sSegmmm>:
// set video segment to simple color format GF_COLOR
//  col1 = color pattern 4-pixels even line (use macro MULTICOL)
//  col2 = color pattern 4-pixels odd line (use macro MULTICOL)
void ScreenSegmColor(sSegm* segm, u32 col1, u32 col2)
{
	segm->par = col1;
1000b7b0:	6141      	str	r1, [r0, #20]
	segm->par2 = col2;
1000b7b2:	6182      	str	r2, [r0, #24]
1000b7b4:	f3bf 8f5f 	dmb	sy
	__dmb();
	segm->form = GF_COLOR;
1000b7b8:	2300      	movs	r3, #0
1000b7ba:	7403      	strb	r3, [r0, #16]
1000b7bc:	f3bf 8f5f 	dmb	sy
	__dmb();
}
1000b7c0:	4770      	bx	lr
1000b7c2:	46c0      	nop			; (mov r8, r8)

1000b7c4 <_Z16ScreenSegmGraph8P5sSegmPKvi>:
//   data = pointer to data buffer
//   wb = pitch - number of bytes between lines
// To scroll image, set virtual dimension wrapx and wrapy, then shift offx and offy.
void ScreenSegmGraph8(sSegm* segm, const void* data, int wb)
{
	segm->form = GF_COLOR;
1000b7c4:	2300      	movs	r3, #0
1000b7c6:	7403      	strb	r3, [r0, #16]
1000b7c8:	f3bf 8f5f 	dmb	sy
	__dmb();
	segm->data = data;
1000b7cc:	60c1      	str	r1, [r0, #12]
	segm->wb = wb;
1000b7ce:	8042      	strh	r2, [r0, #2]
1000b7d0:	f3bf 8f5f 	dmb	sy
	__dmb();
	segm->form = GF_GRAPH8;
1000b7d4:	3301      	adds	r3, #1
1000b7d6:	7403      	strb	r3, [r0, #16]
1000b7d8:	f3bf 8f5f 	dmb	sy
	__dmb();
}
1000b7dc:	4770      	bx	lr
1000b7de:	46c0      	nop			; (mov r8, r8)

1000b7e0 <_Z13GenPal16TransPtPKh>:

// generate 16-color palette translation table for functions ScreenSegmGraph4
//  trans = pointer to destination palette translation table (u16 trans[256])
//  pal = pointer to source palette of 16 colors (u8 pal[16])
void GenPal16Trans(u16* trans, const u8* pal)
{
1000b7e0:	b5f0      	push	{r4, r5, r6, r7, lr}
	int i, j;
	u16 k;
	for (i = 0; i < 256; i++)
1000b7e2:	2680      	movs	r6, #128	; 0x80
{
1000b7e4:	0005      	movs	r5, r0
	for (i = 0; i < 256; i++)
1000b7e6:	2300      	movs	r3, #0
{
1000b7e8:	0008      	movs	r0, r1
	{
		j = (i >> 4) & 0x0f;
		k = pal[j];

		j = i & 0x0f;
1000b7ea:	270f      	movs	r7, #15
	for (i = 0; i < 256; i++)
1000b7ec:	0076      	lsls	r6, r6, #1
		j = i & 0x0f;
1000b7ee:	003a      	movs	r2, r7
1000b7f0:	401a      	ands	r2, r3
		k |= (u16)pal[j] << 8;
1000b7f2:	5c81      	ldrb	r1, [r0, r2]
		j = (i >> 4) & 0x0f;
1000b7f4:	111a      	asrs	r2, r3, #4
		k |= (u16)pal[j] << 8;
1000b7f6:	5c82      	ldrb	r2, [r0, r2]
1000b7f8:	0209      	lsls	r1, r1, #8

		trans[i] = k;
1000b7fa:	005c      	lsls	r4, r3, #1
		k |= (u16)pal[j] << 8;
1000b7fc:	430a      	orrs	r2, r1
	for (i = 0; i < 256; i++)
1000b7fe:	3301      	adds	r3, #1
		trans[i] = k;
1000b800:	532a      	strh	r2, [r5, r4]
	for (i = 0; i < 256; i++)
1000b802:	42b3      	cmp	r3, r6
1000b804:	d1f3      	bne.n	1000b7ee <_Z13GenPal16TransPtPKh+0xe>
	}
}
1000b806:	bdf0      	pop	{r4, r5, r6, r7, pc}

1000b808 <_Z16ScreenSegmGraph4P5sSegmPKvS2_i>:
//   data = pointer to data buffer
//   trans = pointer to 16-color palette translation table (generated with GenPal16Trans function)
//   wb = pitch - number of bytes between lines
// To scroll image, set virtual dimension wrapx and wrapy, then shift offx and offy.
void ScreenSegmGraph4(sSegm* segm, const void* data, const void* trans, int wb)
{
1000b808:	b510      	push	{r4, lr}
	segm->form = GF_COLOR;
1000b80a:	2400      	movs	r4, #0
1000b80c:	7404      	strb	r4, [r0, #16]
1000b80e:	f3bf 8f5f 	dmb	sy
	__dmb();
	segm->data = data;
1000b812:	60c1      	str	r1, [r0, #12]
	segm->par = (u32)trans;
1000b814:	6142      	str	r2, [r0, #20]
	segm->wb = wb;
1000b816:	8043      	strh	r3, [r0, #2]
1000b818:	f3bf 8f5f 	dmb	sy
	__dmb();
	segm->form = GF_GRAPH4;
1000b81c:	2307      	movs	r3, #7
1000b81e:	7403      	strb	r3, [r0, #16]
1000b820:	f3bf 8f5f 	dmb	sy
	__dmb();
}
1000b824:	bd10      	pop	{r4, pc}
1000b826:	46c0      	nop			; (mov r8, r8)

1000b828 <_Z16ScreenSegmGraph1P5sSegmPKvhhi>:
//   bg = background color
//   fg = foreground color
//   wb = pitch - number of bytes between lines
// To scroll image, set virtual dimension wrapx and wrapy, then shift offx and offy.
void ScreenSegmGraph1(sSegm* segm, const void* data, u8 bg, u8 fg, int wb)
{
1000b828:	b510      	push	{r4, lr}
1000b82a:	0014      	movs	r4, r2
	segm->form = GF_COLOR;
1000b82c:	2200      	movs	r2, #0
1000b82e:	7402      	strb	r2, [r0, #16]
1000b830:	f3bf 8f5f 	dmb	sy
	__dmb();
	segm->data = data;
	segm->par = bg | ((u32)fg << 8);
1000b834:	021a      	lsls	r2, r3, #8
	segm->wb = wb;
1000b836:	9b02      	ldr	r3, [sp, #8]
	segm->par = bg | ((u32)fg << 8);
1000b838:	4322      	orrs	r2, r4
	segm->data = data;
1000b83a:	60c1      	str	r1, [r0, #12]
	segm->par = bg | ((u32)fg << 8);
1000b83c:	6142      	str	r2, [r0, #20]
	segm->wb = wb;
1000b83e:	8043      	strh	r3, [r0, #2]
1000b840:	f3bf 8f5f 	dmb	sy
	__dmb();
	segm->form = GF_GRAPH1;
1000b844:	2309      	movs	r3, #9
1000b846:	7403      	strb	r3, [r0, #16]
1000b848:	f3bf 8f5f 	dmb	sy
	__dmb();
}
1000b84c:	bd10      	pop	{r4, pc}
1000b84e:	46c0      	nop			; (mov r8, r8)

1000b850 <_Z15ScreenSegmMTextP5sSegmPKvS2_thhi>:
//   fontheight = font height
//   bg = background color
//   fg = foreground color
//   wb = pitch - number of bytes between text lines
void ScreenSegmMText(sSegm* segm, const void* data, const void* font, u16 fontheight, u8 bg, u8 fg, int wb)
{
1000b850:	b570      	push	{r4, r5, r6, lr}
	segm->form = GF_COLOR;
1000b852:	2600      	movs	r6, #0
{
1000b854:	ac04      	add	r4, sp, #16
1000b856:	7825      	ldrb	r5, [r4, #0]
1000b858:	ac05      	add	r4, sp, #20
1000b85a:	7824      	ldrb	r4, [r4, #0]
	segm->form = GF_COLOR;
1000b85c:	7406      	strb	r6, [r0, #16]
1000b85e:	f3bf 8f5f 	dmb	sy
	__dmb();
	segm->data = data;
	segm->par = (u32)font;
1000b862:	6142      	str	r2, [r0, #20]
	segm->par2 = bg | ((u32)fg << 8);
	segm->par3 = fontheight;
1000b864:	8243      	strh	r3, [r0, #18]
	segm->par2 = bg | ((u32)fg << 8);
1000b866:	0222      	lsls	r2, r4, #8
	segm->wb = wb;
1000b868:	9b06      	ldr	r3, [sp, #24]
	segm->par2 = bg | ((u32)fg << 8);
1000b86a:	432a      	orrs	r2, r5
	segm->data = data;
1000b86c:	60c1      	str	r1, [r0, #12]
	segm->par2 = bg | ((u32)fg << 8);
1000b86e:	6182      	str	r2, [r0, #24]
	segm->wb = wb;
1000b870:	8043      	strh	r3, [r0, #2]
1000b872:	f3bf 8f5f 	dmb	sy
	__dmb();
	segm->form = GF_MTEXT;
1000b876:	230a      	movs	r3, #10
1000b878:	7403      	strb	r3, [r0, #16]
1000b87a:	f3bf 8f5f 	dmb	sy
	__dmb();
}
1000b87e:	bd70      	pop	{r4, r5, r6, pc}

1000b880 <_Z15ScreenSegmATextP5sSegmPKvS2_tS2_i>:
//   font = pointer to 1-bit font of 256 characters of width 8 (total width of image 2048 pixels)
//   fontheight = font height
//   pal = pointer to palette of 16 colors
//   wb = pitch - number of bytes between text lines
void ScreenSegmAText(sSegm* segm, const void* data, const void* font, u16 fontheight, const void* pal, int wb)
{
1000b880:	b510      	push	{r4, lr}
	segm->form = GF_COLOR;
1000b882:	2400      	movs	r4, #0
1000b884:	7404      	strb	r4, [r0, #16]
1000b886:	f3bf 8f5f 	dmb	sy
	__dmb();
	segm->data = data;
	segm->par = (u32)font;
1000b88a:	6142      	str	r2, [r0, #20]
	segm->par2 = (u32)pal;
	segm->par3 = fontheight;
1000b88c:	8243      	strh	r3, [r0, #18]
	segm->par2 = (u32)pal;
1000b88e:	9a02      	ldr	r2, [sp, #8]
	segm->wb = wb;
1000b890:	9b03      	ldr	r3, [sp, #12]
	segm->data = data;
1000b892:	60c1      	str	r1, [r0, #12]
	segm->par2 = (u32)pal;
1000b894:	6182      	str	r2, [r0, #24]
	segm->wb = wb;
1000b896:	8043      	strh	r3, [r0, #2]
1000b898:	f3bf 8f5f 	dmb	sy
	__dmb();
	segm->form = GF_ATEXT;
1000b89c:	230b      	movs	r3, #11
1000b89e:	7403      	strb	r3, [r0, #16]
1000b8a0:	f3bf 8f5f 	dmb	sy
	__dmb();
}
1000b8a4:	bd10      	pop	{r4, pc}
1000b8a6:	46c0      	nop			; (mov r8, r8)

1000b8a8 <_Z14ScreenSegmTileP5sSegmPKvS2_iii>:
//   tiles = pointer to 1 column of tiles, 1 pixel = 8 bits
//   w = tile width (must be multiple of 4)
//   h = tile height
//   wb = pitch - number of bytes between tile map rows
void ScreenSegmTile(sSegm* segm, const void* data, const void* tiles, int w, int h, int wb)
{
1000b8a8:	b570      	push	{r4, r5, r6, lr}
1000b8aa:	0004      	movs	r4, r0
1000b8ac:	0008      	movs	r0, r1
1000b8ae:	0019      	movs	r1, r3
	segm->form = GF_COLOR;
1000b8b0:	2300      	movs	r3, #0
{
1000b8b2:	9d04      	ldr	r5, [sp, #16]
	segm->form = GF_COLOR;
1000b8b4:	7423      	strb	r3, [r4, #16]
1000b8b6:	f3bf 8f5f 	dmb	sy
	__dmb();
	segm->data = data;
1000b8ba:	60e0      	str	r0, [r4, #12]
	segm->par = (u32)tiles;
	segm->par2 = (u32)h;
	segm->par3 = (u16)w;
	segm->wb = wb;
	segm->wrapx = (segm->width+w-1)/w*w;
1000b8bc:	8820      	ldrh	r0, [r4, #0]
	segm->wb = wb;
1000b8be:	9b05      	ldr	r3, [sp, #20]
	segm->par3 = (u16)w;
1000b8c0:	b28e      	uxth	r6, r1
	segm->wrapx = (segm->width+w-1)/w*w;
1000b8c2:	1840      	adds	r0, r0, r1
	segm->par = (u32)tiles;
1000b8c4:	6162      	str	r2, [r4, #20]
	segm->par2 = (u32)h;
1000b8c6:	61a5      	str	r5, [r4, #24]
	segm->wb = wb;
1000b8c8:	8063      	strh	r3, [r4, #2]
	segm->par3 = (u16)w;
1000b8ca:	8266      	strh	r6, [r4, #18]
	segm->wrapx = (segm->width+w-1)/w*w;
1000b8cc:	3801      	subs	r0, #1
1000b8ce:	f7f4 fd25 	bl	1000031c <__wrap___aeabi_idiv>
1000b8d2:	4370      	muls	r0, r6
1000b8d4:	8120      	strh	r0, [r4, #8]
	segm->wrapy = (segm->wrapy+h-1)/h*h;
1000b8d6:	8960      	ldrh	r0, [r4, #10]
1000b8d8:	0029      	movs	r1, r5
1000b8da:	1940      	adds	r0, r0, r5
1000b8dc:	3801      	subs	r0, #1
1000b8de:	f7f4 fd1d 	bl	1000031c <__wrap___aeabi_idiv>
1000b8e2:	4345      	muls	r5, r0
1000b8e4:	8165      	strh	r5, [r4, #10]
1000b8e6:	f3bf 8f5f 	dmb	sy
	__dmb();
	segm->form = GF_TILE;
1000b8ea:	2302      	movs	r3, #2
1000b8ec:	7423      	strb	r3, [r4, #16]
1000b8ee:	f3bf 8f5f 	dmb	sy
	__dmb();
}
1000b8f2:	bd70      	pop	{r4, r5, r6, pc}

1000b8f4 <_Z6DecNumPcl>:
	return n;
}

// decode signed number into ASCIIZ text buffer (returns number of digits)
int DecNum(char* buf, s32 num)
{
1000b8f4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b8f6:	46ce      	mov	lr, r9
1000b8f8:	4647      	mov	r7, r8
1000b8fa:	b580      	push	{r7, lr}
1000b8fc:	4681      	mov	r9, r0
1000b8fe:	000c      	movs	r4, r1
1000b900:	b085      	sub	sp, #20
	if (num >= 0) return DecUNum(buf, num);
1000b902:	2900      	cmp	r1, #0
1000b904:	db21      	blt.n	1000b94a <_Z6DecNumPcl+0x56>
	*d = 0;
1000b906:	2200      	movs	r2, #0
	char* d = &b[10];
1000b908:	260e      	movs	r6, #14
	int n = 0;
1000b90a:	2500      	movs	r5, #0
	*d = 0;
1000b90c:	ab01      	add	r3, sp, #4
1000b90e:	729a      	strb	r2, [r3, #10]
	char* d = &b[10];
1000b910:	446e      	add	r6, sp
		k = num / 10;
1000b912:	210a      	movs	r1, #10
1000b914:	0020      	movs	r0, r4
1000b916:	f7f4 fd2d 	bl	10000374 <__wrap___aeabi_uidiv>
1000b91a:	0027      	movs	r7, r4
		*d = (char)(num + '0');
1000b91c:	210a      	movs	r1, #10
		k = num / 10;
1000b91e:	0004      	movs	r4, r0
		*d = (char)(num + '0');
1000b920:	0038      	movs	r0, r7
1000b922:	f7f4 fd27 	bl	10000374 <__wrap___aeabi_uidiv>
		d--;
1000b926:	3e01      	subs	r6, #1
		*d = (char)(num + '0');
1000b928:	3130      	adds	r1, #48	; 0x30
1000b92a:	002a      	movs	r2, r5
1000b92c:	7031      	strb	r1, [r6, #0]
		n++;
1000b92e:	3501      	adds	r5, #1
	} while (num != 0);
1000b930:	2f09      	cmp	r7, #9
1000b932:	d8ee      	bhi.n	1000b912 <_Z6DecNumPcl+0x1e>
	memcpy(buf, d, n+1);
1000b934:	0031      	movs	r1, r6
1000b936:	4648      	mov	r0, r9
1000b938:	3202      	adds	r2, #2
1000b93a:	f7f5 f82d 	bl	10000998 <__wrap___aeabi_memcpy>

	num = -num;
	*buf++ = '-';
	return DecUNum(buf, num)+1;
}
1000b93e:	0028      	movs	r0, r5
1000b940:	b005      	add	sp, #20
1000b942:	bcc0      	pop	{r6, r7}
1000b944:	46b9      	mov	r9, r7
1000b946:	46b0      	mov	r8, r6
1000b948:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*buf++ = '-';
1000b94a:	2301      	movs	r3, #1
1000b94c:	444b      	add	r3, r9
1000b94e:	4698      	mov	r8, r3
1000b950:	232d      	movs	r3, #45	; 0x2d
	*d = 0;
1000b952:	2200      	movs	r2, #0
	*buf++ = '-';
1000b954:	7003      	strb	r3, [r0, #0]
	*d = 0;
1000b956:	ab01      	add	r3, sp, #4
1000b958:	729a      	strb	r2, [r3, #10]
	char* d = &b[10];
1000b95a:	230e      	movs	r3, #14
1000b95c:	446b      	add	r3, sp
1000b95e:	4699      	mov	r9, r3
1000b960:	001e      	movs	r6, r3
	num = -num;
1000b962:	424c      	negs	r4, r1
	int n = 0;
1000b964:	464b      	mov	r3, r9
		k = num / 10;
1000b966:	210a      	movs	r1, #10
1000b968:	0020      	movs	r0, r4
1000b96a:	1b9d      	subs	r5, r3, r6
1000b96c:	0027      	movs	r7, r4
1000b96e:	f7f4 fd01 	bl	10000374 <__wrap___aeabi_uidiv>
		*d = (char)(num + '0');
1000b972:	210a      	movs	r1, #10
		k = num / 10;
1000b974:	0004      	movs	r4, r0
		*d = (char)(num + '0');
1000b976:	0038      	movs	r0, r7
1000b978:	f7f4 fcfc 	bl	10000374 <__wrap___aeabi_uidiv>
		d--;
1000b97c:	3e01      	subs	r6, #1
		*d = (char)(num + '0');
1000b97e:	3130      	adds	r1, #48	; 0x30
1000b980:	7031      	strb	r1, [r6, #0]
	} while (num != 0);
1000b982:	2f09      	cmp	r7, #9
1000b984:	d8ee      	bhi.n	1000b964 <_Z6DecNumPcl+0x70>
	memcpy(buf, d, n+1);
1000b986:	3502      	adds	r5, #2
1000b988:	002a      	movs	r2, r5
1000b98a:	0031      	movs	r1, r6
1000b98c:	4640      	mov	r0, r8
1000b98e:	f7f5 f803 	bl	10000998 <__wrap___aeabi_memcpy>
	return DecUNum(buf, num)+1;
1000b992:	e7d4      	b.n	1000b93e <_Z6DecNumPcl+0x4a>

1000b994 <_Z6VgaCfgPK7sVgaCfgP6sVmode>:

// calculate videomode setup
//   cfg ... required configuration
//   vmode ... destination videomode setup for driver
void VgaCfg(const sVgaCfg* cfg, sVmode* vmode)
{
1000b994:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b996:	46de      	mov	lr, fp
1000b998:	4657      	mov	r7, sl
1000b99a:	464e      	mov	r6, r9
1000b99c:	4645      	mov	r5, r8
	int i;

	// prepare layer program, copy layer modes
	u8 prog = LAYERMODE_BASE;
	vmode->mode[0] = prog;
1000b99e:	2300      	movs	r3, #0
{
1000b9a0:	b5e0      	push	{r5, r6, r7, lr}
	vmode->mode[0] = prog;
1000b9a2:	764b      	strb	r3, [r1, #25]
	for (i = 1; i < LAYERS; i++)
	{
		if (cfg->mode[i] != LAYERMODE_BASE) prog = LayerMode[cfg->mode[i]].prog;
1000b9a4:	7d42      	ldrb	r2, [r0, #21]
{
1000b9a6:	4682      	mov	sl, r0
1000b9a8:	468b      	mov	fp, r1
1000b9aa:	b091      	sub	sp, #68	; 0x44
		if (cfg->mode[i] != LAYERMODE_BASE) prog = LayerMode[cfg->mode[i]].prog;
1000b9ac:	2a00      	cmp	r2, #0
1000b9ae:	d100      	bne.n	1000b9b2 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x1e>
1000b9b0:	e290      	b.n	1000bed4 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x540>
1000b9b2:	4bdb      	ldr	r3, [pc, #876]	; (1000bd20 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x38c>)
1000b9b4:	0051      	lsls	r1, r2, #1
1000b9b6:	1889      	adds	r1, r1, r2
1000b9b8:	5c59      	ldrb	r1, [r3, r1]
		vmode->mode[i] = cfg->mode[i];
1000b9ba:	4658      	mov	r0, fp
1000b9bc:	7682      	strb	r2, [r0, #26]
		if (cfg->mode[i] != LAYERMODE_BASE) prog = LayerMode[cfg->mode[i]].prog;
1000b9be:	4652      	mov	r2, sl
1000b9c0:	7d92      	ldrb	r2, [r2, #22]
1000b9c2:	2a00      	cmp	r2, #0
1000b9c4:	d002      	beq.n	1000b9cc <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x38>
1000b9c6:	0051      	lsls	r1, r2, #1
1000b9c8:	1889      	adds	r1, r1, r2
1000b9ca:	5c59      	ldrb	r1, [r3, r1]
		vmode->mode[i] = cfg->mode[i];
1000b9cc:	4658      	mov	r0, fp
1000b9ce:	76c2      	strb	r2, [r0, #27]
		if (cfg->mode[i] != LAYERMODE_BASE) prog = LayerMode[cfg->mode[i]].prog;
1000b9d0:	4652      	mov	r2, sl
1000b9d2:	7dd2      	ldrb	r2, [r2, #23]
1000b9d4:	2a00      	cmp	r2, #0
1000b9d6:	d002      	beq.n	1000b9de <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x4a>
1000b9d8:	0051      	lsls	r1, r2, #1
1000b9da:	1889      	adds	r1, r1, r2
1000b9dc:	5c59      	ldrb	r1, [r3, r1]
		vmode->mode[i] = cfg->mode[i];
1000b9de:	4658      	mov	r0, fp
1000b9e0:	7702      	strb	r2, [r0, #28]
	}
	vmode->prog = prog;

	// prepare minimal and maximal clocks per pixel
	int mincpp = LayerMode[LAYERMODE_BASE].mincpp;
1000b9e2:	785a      	ldrb	r2, [r3, #1]
	vmode->prog = prog;
1000b9e4:	7601      	strb	r1, [r0, #24]
	int mincpp = LayerMode[LAYERMODE_BASE].mincpp;
1000b9e6:	4694      	mov	ip, r2
	int maxcpp = LayerMode[LAYERMODE_BASE].maxcpp;
	int cpp;
	for (i = 1; i < LAYERS; i++)
	{
		cpp = LayerMode[cfg->mode[i]].mincpp;
1000b9e8:	4652      	mov	r2, sl
1000b9ea:	7d54      	ldrb	r4, [r2, #21]
1000b9ec:	7d96      	ldrb	r6, [r2, #22]
1000b9ee:	0060      	lsls	r0, r4, #1
1000b9f0:	0072      	lsls	r2, r6, #1
1000b9f2:	1991      	adds	r1, r2, r6
1000b9f4:	1907      	adds	r7, r0, r4
1000b9f6:	1859      	adds	r1, r3, r1
1000b9f8:	19df      	adds	r7, r3, r7
1000b9fa:	787f      	ldrb	r7, [r7, #1]
1000b9fc:	7849      	ldrb	r1, [r1, #1]
	int maxcpp = LayerMode[LAYERMODE_BASE].maxcpp;
1000b9fe:	789d      	ldrb	r5, [r3, #2]
		if (cpp > mincpp) mincpp = cpp;
1000ba00:	42b9      	cmp	r1, r7
1000ba02:	da00      	bge.n	1000ba06 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x72>
1000ba04:	0039      	movs	r1, r7
1000ba06:	4561      	cmp	r1, ip
1000ba08:	da00      	bge.n	1000ba0c <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x78>
1000ba0a:	4661      	mov	r1, ip
		cpp = LayerMode[cfg->mode[i]].maxcpp;
1000ba0c:	1992      	adds	r2, r2, r6
1000ba0e:	1900      	adds	r0, r0, r4
1000ba10:	189a      	adds	r2, r3, r2
1000ba12:	1818      	adds	r0, r3, r0
1000ba14:	7880      	ldrb	r0, [r0, #2]
1000ba16:	7892      	ldrb	r2, [r2, #2]
1000ba18:	4282      	cmp	r2, r0
1000ba1a:	dd00      	ble.n	1000ba1e <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x8a>
1000ba1c:	0002      	movs	r2, r0
1000ba1e:	42aa      	cmp	r2, r5
1000ba20:	dd00      	ble.n	1000ba24 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x90>
1000ba22:	002a      	movs	r2, r5
		cpp = LayerMode[cfg->mode[i]].mincpp;
1000ba24:	4650      	mov	r0, sl
1000ba26:	7dc4      	ldrb	r4, [r0, #23]
1000ba28:	0060      	lsls	r0, r4, #1
1000ba2a:	1905      	adds	r5, r0, r4
1000ba2c:	195d      	adds	r5, r3, r5
1000ba2e:	786e      	ldrb	r6, [r5, #1]
1000ba30:	428e      	cmp	r6, r1
1000ba32:	da00      	bge.n	1000ba36 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0xa2>
1000ba34:	000e      	movs	r6, r1
		cpp = LayerMode[cfg->mode[i]].maxcpp;
1000ba36:	1900      	adds	r0, r0, r4
1000ba38:	181b      	adds	r3, r3, r0
1000ba3a:	789c      	ldrb	r4, [r3, #2]
1000ba3c:	4294      	cmp	r4, r2
1000ba3e:	dd00      	ble.n	1000ba42 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0xae>
1000ba40:	0014      	movs	r4, r2
		if (cpp < maxcpp) maxcpp = cpp;
	}

	// prepare full width
	int w = cfg->width; // required width
1000ba42:	4653      	mov	r3, sl
	int wfull = cfg->wfull;	// full width
1000ba44:	4652      	mov	r2, sl
	int w = cfg->width; // required width
1000ba46:	881b      	ldrh	r3, [r3, #0]
1000ba48:	9306      	str	r3, [sp, #24]
	int wfull = cfg->wfull;	// full width
1000ba4a:	8897      	ldrh	r7, [r2, #4]
	if (wfull == 0) wfull = w; // use required width as 100% width
1000ba4c:	2f00      	cmp	r7, #0
1000ba4e:	d100      	bne.n	1000ba52 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0xbe>
1000ba50:	001f      	movs	r7, r3

	// prepare maximal active time and maximal pixels
	const sVideo* v = cfg->video;
1000ba52:	4653      	mov	r3, sl
1000ba54:	689b      	ldr	r3, [r3, #8]
1000ba56:	4699      	mov	r9, r3
	float hmax = v->htot - v->hfront - v->hsync - v->hback;
1000ba58:	6859      	ldr	r1, [r3, #4]
1000ba5a:	6818      	ldr	r0, [r3, #0]
1000ba5c:	f7f4 fefd 	bl	1000085a <__wrap___aeabi_fsub>
1000ba60:	464b      	mov	r3, r9
1000ba62:	6899      	ldr	r1, [r3, #8]
1000ba64:	f7f4 fef9 	bl	1000085a <__wrap___aeabi_fsub>
1000ba68:	464b      	mov	r3, r9
1000ba6a:	68d9      	ldr	r1, [r3, #12]
1000ba6c:	f7f4 fef5 	bl	1000085a <__wrap___aeabi_fsub>
	float hfull = v->hfull;
1000ba70:	464b      	mov	r3, r9
1000ba72:	691b      	ldr	r3, [r3, #16]
	float hmax = v->htot - v->hfront - v->hsync - v->hback;
1000ba74:	9007      	str	r0, [sp, #28]
	int wmax = (int)(wfull*hmax/hfull + 0.001f);
1000ba76:	0038      	movs	r0, r7
	float hfull = v->hfull;
1000ba78:	4698      	mov	r8, r3
	int wmax = (int)(wfull*hmax/hfull + 0.001f);
1000ba7a:	f7f4 ff03 	bl	10000884 <__wrap___aeabi_i2f>

	// calculate cpp from required frequency (rounded down), limit minimal cpp
	u32 freq = cfg->freq;
1000ba7e:	4653      	mov	r3, sl
1000ba80:	68dd      	ldr	r5, [r3, #12]
	int wmax = (int)(wfull*hmax/hfull + 0.001f);
1000ba82:	9004      	str	r0, [sp, #16]
	u32 freq = cfg->freq;
1000ba84:	950e      	str	r5, [sp, #56]	; 0x38
	cpp = (int)(freq*hfull/1000/wfull + 0.1f);
	if (cpp < mincpp) cpp = mincpp;

	// recalculate frequency if not locked
	if (!cfg->lockfreq)
1000ba86:	7e5b      	ldrb	r3, [r3, #25]
1000ba88:	2b00      	cmp	r3, #0
1000ba8a:	d130      	bne.n	1000baee <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x15a>
	cpp = (int)(freq*hfull/1000/wfull + 0.1f);
1000ba8c:	0028      	movs	r0, r5
1000ba8e:	f7f4 fef3 	bl	10000878 <__wrap___aeabi_ui2f>
1000ba92:	4641      	mov	r1, r8
1000ba94:	f7f4 feea 	bl	1000086c <__wrap___aeabi_fmul>
1000ba98:	49a2      	ldr	r1, [pc, #648]	; (1000bd24 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x390>)
1000ba9a:	f7f4 fee4 	bl	10000866 <__wrap___aeabi_fdiv>
1000ba9e:	9904      	ldr	r1, [sp, #16]
1000baa0:	f7f4 fee1 	bl	10000866 <__wrap___aeabi_fdiv>
1000baa4:	49a0      	ldr	r1, [pc, #640]	; (1000bd28 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x394>)
1000baa6:	f7f4 fedb 	bl	10000860 <__wrap___aeabi_fadd>
1000baaa:	f7f4 ff0d 	bl	100008c8 <__wrap___aeabi_f2iz>
	{
		int freq2 = (int)(cpp*wfull*1000/hfull + 0.5f) + 200;
1000baae:	4286      	cmp	r6, r0
1000bab0:	da00      	bge.n	1000bab4 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x120>
1000bab2:	e240      	b.n	1000bf36 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x5a2>
1000bab4:	437e      	muls	r6, r7
1000bab6:	0170      	lsls	r0, r6, #5
1000bab8:	1b80      	subs	r0, r0, r6
1000baba:	0080      	lsls	r0, r0, #2
1000babc:	1980      	adds	r0, r0, r6
1000babe:	00c0      	lsls	r0, r0, #3
1000bac0:	f7f4 fee0 	bl	10000884 <__wrap___aeabi_i2f>
1000bac4:	4641      	mov	r1, r8
1000bac6:	f7f4 fece 	bl	10000866 <__wrap___aeabi_fdiv>
1000baca:	21fc      	movs	r1, #252	; 0xfc
1000bacc:	0589      	lsls	r1, r1, #22
1000bace:	f7f4 fec7 	bl	10000860 <__wrap___aeabi_fadd>
1000bad2:	f7f4 fef9 	bl	100008c8 <__wrap___aeabi_f2iz>
1000bad6:	30c8      	adds	r0, #200	; 0xc8
		if (freq2 < freq)
1000bad8:	4285      	cmp	r5, r0
1000bada:	d900      	bls.n	1000bade <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x14a>
1000badc:	e215      	b.n	1000bf0a <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x576>
		{
			cpp++;
			freq2 = (int)(cpp*wfull*1000/hfull + 0.5f) + 200;
		}
		if (freq2 >= freq) freq = freq2;
1000bade:	0005      	movs	r5, r0
1000bae0:	900e      	str	r0, [sp, #56]	; 0x38
		if (freq > cfg->fmax) freq = cfg->fmax;
1000bae2:	4653      	mov	r3, sl
1000bae4:	691b      	ldr	r3, [r3, #16]
1000bae6:	42ab      	cmp	r3, r5
1000bae8:	d201      	bcs.n	1000baee <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x15a>
1000baea:	001d      	movs	r5, r3
1000baec:	930e      	str	r3, [sp, #56]	; 0x38

	// find sysclock setup (use set_sys_clock_pll to set sysclock)
	u32 vco;
	u16 fbdiv;
	u8 pd1, pd2;
	FindSysClock(freq, &freq, &vco, &fbdiv, &pd1, &pd2);
1000baee:	ab0a      	add	r3, sp, #40	; 0x28
1000baf0:	469c      	mov	ip, r3
1000baf2:	260e      	movs	r6, #14
1000baf4:	230d      	movs	r3, #13
1000baf6:	4466      	add	r6, ip
1000baf8:	4463      	add	r3, ip
1000bafa:	af0d      	add	r7, sp, #52	; 0x34
1000bafc:	a90e      	add	r1, sp, #56	; 0x38
1000bafe:	0028      	movs	r0, r5
1000bb00:	9301      	str	r3, [sp, #4]
1000bb02:	aa0f      	add	r2, sp, #60	; 0x3c
1000bb04:	0033      	movs	r3, r6
1000bb06:	9700      	str	r7, [sp, #0]
1000bb08:	f001 fc50 	bl	1000d3ac <_Z12FindSysClockmPmS_PtPhS1_>

	vmode->freq = freq;
1000bb0c:	465b      	mov	r3, fp
1000bb0e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
	vmode->fbdiv = fbdiv;
	vmode->pd1 = pd1;
	vmode->pd2 = pd2;

	// calculate divisor
	cpp = (int)(freq*hfull/1000/wfull + 0.2f);
1000bb10:	980e      	ldr	r0, [sp, #56]	; 0x38
	vmode->freq = freq;
1000bb12:	609a      	str	r2, [r3, #8]
	vmode->vco = vco;
1000bb14:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
1000bb16:	60da      	str	r2, [r3, #12]
	vmode->fbdiv = fbdiv;
1000bb18:	465a      	mov	r2, fp
1000bb1a:	8833      	ldrh	r3, [r6, #0]
1000bb1c:	8213      	strh	r3, [r2, #16]
	vmode->pd1 = pd1;
1000bb1e:	783b      	ldrb	r3, [r7, #0]
1000bb20:	7493      	strb	r3, [r2, #18]
	vmode->pd2 = pd2;
1000bb22:	ab0a      	add	r3, sp, #40	; 0x28
1000bb24:	7b5b      	ldrb	r3, [r3, #13]
1000bb26:	74d3      	strb	r3, [r2, #19]
	cpp = (int)(freq*hfull/1000/wfull + 0.2f);
1000bb28:	f7f4 fea6 	bl	10000878 <__wrap___aeabi_ui2f>
1000bb2c:	4641      	mov	r1, r8
1000bb2e:	9003      	str	r0, [sp, #12]
1000bb30:	f7f4 fe9c 	bl	1000086c <__wrap___aeabi_fmul>
1000bb34:	497b      	ldr	r1, [pc, #492]	; (1000bd24 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x390>)
1000bb36:	f7f4 fe96 	bl	10000866 <__wrap___aeabi_fdiv>
1000bb3a:	9904      	ldr	r1, [sp, #16]
1000bb3c:	9005      	str	r0, [sp, #20]
1000bb3e:	f7f4 fe92 	bl	10000866 <__wrap___aeabi_fdiv>
1000bb42:	497a      	ldr	r1, [pc, #488]	; (1000bd2c <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x398>)
1000bb44:	4680      	mov	r8, r0
1000bb46:	f7f4 fe8b 	bl	10000860 <__wrap___aeabi_fadd>
1000bb4a:	f7f4 febd 	bl	100008c8 <__wrap___aeabi_f2iz>
1000bb4e:	0005      	movs	r5, r0
	int div = 1;
	while (cpp > maxcpp)
1000bb50:	4284      	cmp	r4, r0
1000bb52:	db00      	blt.n	1000bb56 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x1c2>
1000bb54:	e20c      	b.n	1000bf70 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x5dc>
	int div = 1;
1000bb56:	2701      	movs	r7, #1
1000bb58:	4645      	mov	r5, r8
	{
		div++;
1000bb5a:	3701      	adds	r7, #1
		cpp = (int)(freq*hfull/1000/wfull/div + 0.2f);
1000bb5c:	0038      	movs	r0, r7
1000bb5e:	f7f4 fe91 	bl	10000884 <__wrap___aeabi_i2f>
1000bb62:	1c01      	adds	r1, r0, #0
1000bb64:	1c06      	adds	r6, r0, #0
1000bb66:	1c28      	adds	r0, r5, #0
1000bb68:	f7f4 fe7d 	bl	10000866 <__wrap___aeabi_fdiv>
1000bb6c:	496f      	ldr	r1, [pc, #444]	; (1000bd2c <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x398>)
1000bb6e:	f7f4 fe77 	bl	10000860 <__wrap___aeabi_fadd>
1000bb72:	f7f4 fea9 	bl	100008c8 <__wrap___aeabi_f2iz>
	while (cpp > maxcpp)
1000bb76:	4284      	cmp	r4, r0
1000bb78:	dbef      	blt.n	1000bb5a <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x1c6>
	}

	vmode->div = div;
1000bb7a:	0005      	movs	r5, r0
	vmode->vback2 = v->vback2 - dh/2; // V back porch (after VSYNC, before image) on subframe 2
	vmode->vfront2 = v->vfront2 - ((dh < 0) ? (dh-1)/2 : (dh+1)/2); // V front porch (after image, before VSYNC) on subframe 2
	vmode->vpre2 = v->vpre2; // V sync pre half-pulses on subframe 2

	// frequency
	vmode->hfreq = vmode->freq * 1000.0f / vmode->div / vmode->htot;
1000bb7c:	0438      	lsls	r0, r7, #16
1000bb7e:	0c00      	lsrs	r0, r0, #16
1000bb80:	f7f4 fe80 	bl	10000884 <__wrap___aeabi_i2f>
	vmode->div = div;
1000bb84:	b2bc      	uxth	r4, r7
	vmode->hfreq = vmode->freq * 1000.0f / vmode->div / vmode->htot;
1000bb86:	9008      	str	r0, [sp, #32]
	vmode->div = div;
1000bb88:	465b      	mov	r3, fp
	wfull = (int)(freq*hfull/1000/cpp/div + 0.4f);
1000bb8a:	0028      	movs	r0, r5
	vmode->div = div;
1000bb8c:	829c      	strh	r4, [r3, #20]
	vmode->cpp = cpp;
1000bb8e:	82dd      	strh	r5, [r3, #22]
	wfull = (int)(freq*hfull/1000/cpp/div + 0.4f);
1000bb90:	f7f4 fe78 	bl	10000884 <__wrap___aeabi_i2f>
	wmax = (int)(freq*hmax/1000/cpp/div + 0.4f);
1000bb94:	9907      	ldr	r1, [sp, #28]
	wfull = (int)(freq*hfull/1000/cpp/div + 0.4f);
1000bb96:	1c04      	adds	r4, r0, #0
	wmax = (int)(freq*hmax/1000/cpp/div + 0.4f);
1000bb98:	9803      	ldr	r0, [sp, #12]
1000bb9a:	f7f4 fe67 	bl	1000086c <__wrap___aeabi_fmul>
1000bb9e:	4961      	ldr	r1, [pc, #388]	; (1000bd24 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x390>)
1000bba0:	f7f4 fe61 	bl	10000866 <__wrap___aeabi_fdiv>
1000bba4:	1c21      	adds	r1, r4, #0
1000bba6:	f7f4 fe5e 	bl	10000866 <__wrap___aeabi_fdiv>
1000bbaa:	1c31      	adds	r1, r6, #0
1000bbac:	f7f4 fe5b 	bl	10000866 <__wrap___aeabi_fdiv>
1000bbb0:	495f      	ldr	r1, [pc, #380]	; (1000bd30 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x39c>)
1000bbb2:	f7f4 fe55 	bl	10000860 <__wrap___aeabi_fadd>
1000bbb6:	f7f4 fe87 	bl	100008c8 <__wrap___aeabi_f2iz>
1000bbba:	0007      	movs	r7, r0
	if (w > wmax) w = wmax;
1000bbbc:	9806      	ldr	r0, [sp, #24]
1000bbbe:	42b8      	cmp	r0, r7
1000bbc0:	dd00      	ble.n	1000bbc4 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x230>
1000bbc2:	0038      	movs	r0, r7
	w = ALIGN4(w);
1000bbc4:	2303      	movs	r3, #3
1000bbc6:	4398      	bics	r0, r3
	vmode->width = w; // active width
1000bbc8:	465b      	mov	r3, fp
	wfull = (int)(freq*hfull/1000/cpp/div + 0.4f);
1000bbca:	1c21      	adds	r1, r4, #0
	vmode->width = w; // active width
1000bbcc:	8018      	strh	r0, [r3, #0]
	w = ALIGN4(w);
1000bbce:	4680      	mov	r8, r0
	wfull = (int)(freq*hfull/1000/cpp/div + 0.4f);
1000bbd0:	9805      	ldr	r0, [sp, #20]
1000bbd2:	f7f4 fe48 	bl	10000866 <__wrap___aeabi_fdiv>
1000bbd6:	1c31      	adds	r1, r6, #0
1000bbd8:	f7f4 fe45 	bl	10000866 <__wrap___aeabi_fdiv>
1000bbdc:	4954      	ldr	r1, [pc, #336]	; (1000bd30 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x39c>)
1000bbde:	f7f4 fe3f 	bl	10000860 <__wrap___aeabi_fadd>
1000bbe2:	f7f4 fe71 	bl	100008c8 <__wrap___aeabi_f2iz>
	vmode->wfull = wfull; // width of full screen (image should be full visible)
1000bbe6:	465b      	mov	r3, fp
1000bbe8:	8098      	strh	r0, [r3, #4]
	vmode->wmax = wmax; // maximal width (can be > wfull)
1000bbea:	80df      	strh	r7, [r3, #6]
	int hwidth = w*cpp; // active width in state machine clocks
1000bbec:	4643      	mov	r3, r8
1000bbee:	435d      	muls	r5, r3
	int htot = (int)(freq*v->htot/1000/div + 0.5f);  // total state machine clocks per line
1000bbf0:	464b      	mov	r3, r9
1000bbf2:	9f03      	ldr	r7, [sp, #12]
1000bbf4:	6819      	ldr	r1, [r3, #0]
1000bbf6:	1c38      	adds	r0, r7, #0
1000bbf8:	f7f4 fe38 	bl	1000086c <__wrap___aeabi_fmul>
1000bbfc:	4949      	ldr	r1, [pc, #292]	; (1000bd24 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x390>)
1000bbfe:	f7f4 fe32 	bl	10000866 <__wrap___aeabi_fdiv>
1000bc02:	1c31      	adds	r1, r6, #0
1000bc04:	f7f4 fe2f 	bl	10000866 <__wrap___aeabi_fdiv>
1000bc08:	21fc      	movs	r1, #252	; 0xfc
1000bc0a:	0589      	lsls	r1, r1, #22
1000bc0c:	f7f4 fe28 	bl	10000860 <__wrap___aeabi_fadd>
1000bc10:	f7f4 fe5a 	bl	100008c8 <__wrap___aeabi_f2iz>
	int hsync = (int)(freq*v->hsync/1000/div + 0.5f); // H sync pulse in state machine clocks (min. 4)
1000bc14:	464b      	mov	r3, r9
	int htot = (int)(freq*v->htot/1000/div + 0.5f);  // total state machine clocks per line
1000bc16:	0004      	movs	r4, r0
	int hsync = (int)(freq*v->hsync/1000/div + 0.5f); // H sync pulse in state machine clocks (min. 4)
1000bc18:	6899      	ldr	r1, [r3, #8]
1000bc1a:	1c38      	adds	r0, r7, #0
1000bc1c:	f7f4 fe26 	bl	1000086c <__wrap___aeabi_fmul>
1000bc20:	4940      	ldr	r1, [pc, #256]	; (1000bd24 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x390>)
1000bc22:	f7f4 fe20 	bl	10000866 <__wrap___aeabi_fdiv>
1000bc26:	1c31      	adds	r1, r6, #0
1000bc28:	f7f4 fe1d 	bl	10000866 <__wrap___aeabi_fdiv>
1000bc2c:	21fc      	movs	r1, #252	; 0xfc
1000bc2e:	0589      	lsls	r1, r1, #22
1000bc30:	f7f4 fe16 	bl	10000860 <__wrap___aeabi_fadd>
1000bc34:	f7f4 fe48 	bl	100008c8 <__wrap___aeabi_f2iz>
1000bc38:	0007      	movs	r7, r0
	if (hsync < 4)
1000bc3a:	2803      	cmp	r0, #3
1000bc3c:	dc00      	bgt.n	1000bc40 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x2ac>
1000bc3e:	e143      	b.n	1000bec8 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x534>
	vmode->hsync = (u16)hsync; // H sync pulse in state machine clocks (min. 4)
1000bc40:	b283      	uxth	r3, r0
1000bc42:	9304      	str	r3, [sp, #16]
	int hfront = (int)(freq*v->hfront/1000/div + 0.5f); // H front porch in state machine clocks (min. 2)
1000bc44:	464b      	mov	r3, r9
1000bc46:	9803      	ldr	r0, [sp, #12]
1000bc48:	6859      	ldr	r1, [r3, #4]
1000bc4a:	f7f4 fe0f 	bl	1000086c <__wrap___aeabi_fmul>
1000bc4e:	4935      	ldr	r1, [pc, #212]	; (1000bd24 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x390>)
1000bc50:	f7f4 fe09 	bl	10000866 <__wrap___aeabi_fdiv>
1000bc54:	1c31      	adds	r1, r6, #0
1000bc56:	f7f4 fe06 	bl	10000866 <__wrap___aeabi_fdiv>
1000bc5a:	21fc      	movs	r1, #252	; 0xfc
1000bc5c:	0589      	lsls	r1, r1, #22
1000bc5e:	f7f4 fdff 	bl	10000860 <__wrap___aeabi_fadd>
1000bc62:	f7f4 fe31 	bl	100008c8 <__wrap___aeabi_f2iz>
	int hback = (int)(freq*v->hback/1000/div + 0.5f); // H back porch in state machine clocks (min. 13)
1000bc66:	464b      	mov	r3, r9
	int hfront = (int)(freq*v->hfront/1000/div + 0.5f); // H front porch in state machine clocks (min. 2)
1000bc68:	4680      	mov	r8, r0
	int hback = (int)(freq*v->hback/1000/div + 0.5f); // H back porch in state machine clocks (min. 13)
1000bc6a:	68d9      	ldr	r1, [r3, #12]
1000bc6c:	9803      	ldr	r0, [sp, #12]
1000bc6e:	f7f4 fdfd 	bl	1000086c <__wrap___aeabi_fmul>
1000bc72:	492c      	ldr	r1, [pc, #176]	; (1000bd24 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x390>)
1000bc74:	f7f4 fdf7 	bl	10000866 <__wrap___aeabi_fdiv>
1000bc78:	1c31      	adds	r1, r6, #0
1000bc7a:	f7f4 fdf4 	bl	10000866 <__wrap___aeabi_fdiv>
1000bc7e:	21fc      	movs	r1, #252	; 0xfc
1000bc80:	0589      	lsls	r1, r1, #22
1000bc82:	f7f4 fded 	bl	10000860 <__wrap___aeabi_fadd>
1000bc86:	f7f4 fe1f 	bl	100008c8 <__wrap___aeabi_f2iz>
	int d = htot - hfront - hsync - hback - hwidth; // difference
1000bc8a:	4643      	mov	r3, r8
1000bc8c:	1ae2      	subs	r2, r4, r3
1000bc8e:	1bd2      	subs	r2, r2, r7
1000bc90:	1a12      	subs	r2, r2, r0
1000bc92:	1b52      	subs	r2, r2, r5
	hfront += d/2;
1000bc94:	0fd3      	lsrs	r3, r2, #31
1000bc96:	189b      	adds	r3, r3, r2
1000bc98:	1059      	asrs	r1, r3, #1
1000bc9a:	4441      	add	r1, r8
	hback += (d < 0) ? (d-1)/2 : (d+1)/2;
1000bc9c:	2a00      	cmp	r2, #0
1000bc9e:	da00      	bge.n	1000bca2 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x30e>
1000bca0:	e161      	b.n	1000bf66 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x5d2>
1000bca2:	3201      	adds	r2, #1
1000bca4:	1053      	asrs	r3, r2, #1
1000bca6:	181b      	adds	r3, r3, r0
	if (hfront < 4)
1000bca8:	2903      	cmp	r1, #3
1000bcaa:	dc02      	bgt.n	1000bcb2 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x31e>
		hback -= 4 - hfront;
1000bcac:	18cb      	adds	r3, r1, r3
		hfront = 4;
1000bcae:	2104      	movs	r1, #4
		hback -= 4 - hfront;
1000bcb0:	3b04      	subs	r3, #4
	if (hback < 13)
1000bcb2:	2b0c      	cmp	r3, #12
1000bcb4:	dc00      	bgt.n	1000bcb8 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x324>
1000bcb6:	e100      	b.n	1000beba <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x526>
	vmode->hback = (u16)hback; // H back porch in state machine clocks (min. 13)
1000bcb8:	b29a      	uxth	r2, r3
	htot = hfront + hsync + hback + hwidth; // total state machine clocks per line
1000bcba:	187f      	adds	r7, r7, r1
1000bcbc:	18fb      	adds	r3, r7, r3
	if (v->inter && ((htot & 1) != 0))
1000bcbe:	4648      	mov	r0, r9
	htot = hfront + hsync + hback + hwidth; // total state machine clocks per line
1000bcc0:	195d      	adds	r5, r3, r5
	if (v->inter && ((htot & 1) != 0))
1000bcc2:	2334      	movs	r3, #52	; 0x34
1000bcc4:	5cc0      	ldrb	r0, [r0, r3]
1000bcc6:	2800      	cmp	r0, #0
1000bcc8:	d002      	beq.n	1000bcd0 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x33c>
1000bcca:	07eb      	lsls	r3, r5, #31
1000bccc:	d500      	bpl.n	1000bcd0 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x33c>
1000bcce:	e119      	b.n	1000bf04 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x570>
	vmode->htot = (u16)htot; // total state machine clocks per line
1000bcd0:	465b      	mov	r3, fp
	vmode->hfront = (u16)hfront; // H front porch in state machine clocks (min. 2)
1000bcd2:	8419      	strh	r1, [r3, #32]
	vmode->hback = (u16)hback; // H back porch in state machine clocks (min. 13)
1000bcd4:	849a      	strh	r2, [r3, #36]	; 0x24
	vmode->hsync = (u16)hsync; // H sync pulse in state machine clocks (min. 4)
1000bcd6:	9904      	ldr	r1, [sp, #16]
	if (cfg->dbly) h *= 2; // use double lines
1000bcd8:	4652      	mov	r2, sl
	vmode->htot = (u16)htot; // total state machine clocks per line
1000bcda:	83dd      	strh	r5, [r3, #30]
	vmode->hsync = (u16)hsync; // H sync pulse in state machine clocks (min. 4)
1000bcdc:	8459      	strh	r1, [r3, #34]	; 0x22
	int h = cfg->height; // required height
1000bcde:	4653      	mov	r3, sl
	if (cfg->dbly) h *= 2; // use double lines
1000bce0:	7e14      	ldrb	r4, [r2, #24]
	int h = cfg->height; // required height
1000bce2:	885b      	ldrh	r3, [r3, #2]
	if (cfg->dbly) h *= 2; // use double lines
1000bce4:	2c00      	cmp	r4, #0
1000bce6:	d025      	beq.n	1000bd34 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x3a0>
	vmode->vmax = v->vmax; // maximal height
1000bce8:	464a      	mov	r2, r9
1000bcea:	8ad1      	ldrh	r1, [r2, #22]
1000bcec:	465a      	mov	r2, fp
	if (cfg->dbly) h *= 2; // use double lines
1000bcee:	005b      	lsls	r3, r3, #1
	vmode->vmax = v->vmax; // maximal height
1000bcf0:	85d1      	strh	r1, [r2, #46]	; 0x2e
	if (h > v->vmax) h = v->vmax; // limit height
1000bcf2:	4299      	cmp	r1, r3
1000bcf4:	dd00      	ble.n	1000bcf8 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x364>
1000bcf6:	e0fe      	b.n	1000bef6 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x562>
	if (cfg->dbly) h &= ~1; // must be even number if double lines
1000bcf8:	2301      	movs	r3, #1
1000bcfa:	4399      	bics	r1, r3
	if (v->inter) // interlaced
1000bcfc:	2800      	cmp	r0, #0
1000bcfe:	d100      	bne.n	1000bd02 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x36e>
1000bd00:	e0f0      	b.n	1000bee4 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x550>
		if (v->odd) // first frame is odd lines
1000bd02:	2336      	movs	r3, #54	; 0x36
1000bd04:	464a      	mov	r2, r9
1000bd06:	5cd3      	ldrb	r3, [r2, r3]
1000bd08:	2b00      	cmp	r3, #0
1000bd0a:	d100      	bne.n	1000bd0e <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x37a>
1000bd0c:	e0ee      	b.n	1000beec <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x558>
			vact1 = h/2;
1000bd0e:	104a      	asrs	r2, r1, #1
			vact2 = (h+1)/2; // if even lines, even frame will have more lines
1000bd10:	0016      	movs	r6, r2
1000bd12:	1c4b      	adds	r3, r1, #1
1000bd14:	105b      	asrs	r3, r3, #1
	vmode->vact2 = vact2; // active scanlines of 2nd subframe
1000bd16:	b298      	uxth	r0, r3
	if (cfg->dbly) h /= 2; // return double lines to single lines
1000bd18:	2c00      	cmp	r4, #0
1000bd1a:	d016      	beq.n	1000bd4a <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x3b6>
	vmode->vact2 = vact2; // active scanlines of 2nd subframe
1000bd1c:	0031      	movs	r1, r6
	if (cfg->dbly) h /= 2; // return double lines to single lines
1000bd1e:	e014      	b.n	1000bd4a <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x3b6>
1000bd20:	100298d8 	.word	0x100298d8
1000bd24:	447a0000 	.word	0x447a0000
1000bd28:	3dcccccd 	.word	0x3dcccccd
1000bd2c:	3e4ccccd 	.word	0x3e4ccccd
1000bd30:	3ecccccd 	.word	0x3ecccccd
	vmode->vmax = v->vmax; // maximal height
1000bd34:	464a      	mov	r2, r9
1000bd36:	8ad1      	ldrh	r1, [r2, #22]
1000bd38:	465a      	mov	r2, fp
1000bd3a:	85d1      	strh	r1, [r2, #46]	; 0x2e
	if (h > v->vmax) h = v->vmax; // limit height
1000bd3c:	4299      	cmp	r1, r3
1000bd3e:	dd00      	ble.n	1000bd42 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x3ae>
1000bd40:	e0cb      	b.n	1000beda <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x546>
	if (v->inter) // interlaced
1000bd42:	2800      	cmp	r0, #0
1000bd44:	d1dd      	bne.n	1000bd02 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x36e>
1000bd46:	000a      	movs	r2, r1
	int vact2 = 0;
1000bd48:	2300      	movs	r3, #0
	vmode->height = h;
1000bd4a:	465c      	mov	r4, fp
1000bd4c:	8061      	strh	r1, [r4, #2]
	vmode->vtot = v->vtot; // total scanlines
1000bd4e:	4649      	mov	r1, r9
1000bd50:	8a8e      	ldrh	r6, [r1, #20]
	vmode->vact1 = vact1; // active scanlines of 1st subframe
1000bd52:	b291      	uxth	r1, r2
1000bd54:	8761      	strh	r1, [r4, #58]	; 0x3a
1000bd56:	9105      	str	r1, [sp, #20]
	int dh = vact1 - v->vact1; // difference
1000bd58:	4649      	mov	r1, r9
	vmode->vtot = v->vtot; // total scanlines
1000bd5a:	85a6      	strh	r6, [r4, #44]	; 0x2c
	int dh = vact1 - v->vact1; // difference
1000bd5c:	8bc9      	ldrh	r1, [r1, #30]
1000bd5e:	1a52      	subs	r2, r2, r1
	vmode->vsync1 = v->vsync1; // V sync (half-)pulses on subframe 1
1000bd60:	4649      	mov	r1, r9
1000bd62:	8b09      	ldrh	r1, [r1, #24]
1000bd64:	86a1      	strh	r1, [r4, #52]	; 0x34
1000bd66:	9104      	str	r1, [sp, #16]
	vmode->vpost1 = v->vpost1; // V sync post (half-)pulses on subframe 1
1000bd68:	4649      	mov	r1, r9
1000bd6a:	8b49      	ldrh	r1, [r1, #26]
1000bd6c:	86e1      	strh	r1, [r4, #54]	; 0x36
	vmode->vback1 = v->vback1 - dh/2; // V back porch (after VSYNC, before image) on subframe 1
1000bd6e:	464c      	mov	r4, r9
	vmode->vpost1 = v->vpost1; // V sync post (half-)pulses on subframe 1
1000bd70:	9106      	str	r1, [sp, #24]
	vmode->vback1 = v->vback1 - dh/2; // V back porch (after VSYNC, before image) on subframe 1
1000bd72:	0fd1      	lsrs	r1, r2, #31
1000bd74:	8ba4      	ldrh	r4, [r4, #28]
1000bd76:	1889      	adds	r1, r1, r2
1000bd78:	1049      	asrs	r1, r1, #1
1000bd7a:	1a61      	subs	r1, r4, r1
1000bd7c:	b28f      	uxth	r7, r1
1000bd7e:	4659      	mov	r1, fp
1000bd80:	870f      	strh	r7, [r1, #56]	; 0x38
	vmode->vfront1 = v->vfront1 - ((dh < 0) ? (dh-1)/2 : (dh+1)/2); // V front porch (after image, before VSYNC) on subframe 1
1000bd82:	4649      	mov	r1, r9
1000bd84:	8c09      	ldrh	r1, [r1, #32]
1000bd86:	2a00      	cmp	r2, #0
1000bd88:	da00      	bge.n	1000bd8c <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x3f8>
1000bd8a:	e0e6      	b.n	1000bf5a <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x5c6>
1000bd8c:	3201      	adds	r2, #1
1000bd8e:	1052      	asrs	r2, r2, #1
1000bd90:	b292      	uxth	r2, r2
1000bd92:	1a8a      	subs	r2, r1, r2
1000bd94:	4659      	mov	r1, fp
1000bd96:	b292      	uxth	r2, r2
1000bd98:	878a      	strh	r2, [r1, #60]	; 0x3c
1000bd9a:	9207      	str	r2, [sp, #28]
	vmode->vpre1 = v->vpre1; // V sync pre (half-)pulses on subframe 1
1000bd9c:	464a      	mov	r2, r9
1000bd9e:	8c52      	ldrh	r2, [r2, #34]	; 0x22
1000bda0:	87ca      	strh	r2, [r1, #62]	; 0x3e
1000bda2:	9209      	str	r2, [sp, #36]	; 0x24
	vmode->vact2 = vact2; // active scanlines of 2nd subframe
1000bda4:	2248      	movs	r2, #72	; 0x48
1000bda6:	5288      	strh	r0, [r1, r2]
	dh = vact2 - v->vact2; // difference
1000bda8:	464a      	mov	r2, r9
1000bdaa:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
	vmode->vsync2 = v->vsync2; // V sync half-pulses on subframe 2
1000bdac:	4658      	mov	r0, fp
	dh = vact2 - v->vact2; // difference
1000bdae:	1a9b      	subs	r3, r3, r2
	vmode->vsync2 = v->vsync2; // V sync half-pulses on subframe 2
1000bdb0:	464a      	mov	r2, r9
1000bdb2:	8c92      	ldrh	r2, [r2, #36]	; 0x24
1000bdb4:	920a      	str	r2, [sp, #40]	; 0x28
1000bdb6:	0011      	movs	r1, r2
1000bdb8:	2242      	movs	r2, #66	; 0x42
1000bdba:	5281      	strh	r1, [r0, r2]
	vmode->vpost2 = v->vpost2; // V sync post half-pulses on subframe 2
1000bdbc:	464a      	mov	r2, r9
1000bdbe:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
1000bdc0:	0011      	movs	r1, r2
1000bdc2:	920b      	str	r2, [sp, #44]	; 0x2c
1000bdc4:	2244      	movs	r2, #68	; 0x44
1000bdc6:	5281      	strh	r1, [r0, r2]
	vmode->vback2 = v->vback2 - dh/2; // V back porch (after VSYNC, before image) on subframe 2
1000bdc8:	4649      	mov	r1, r9
1000bdca:	0fda      	lsrs	r2, r3, #31
1000bdcc:	8d0c      	ldrh	r4, [r1, #40]	; 0x28
1000bdce:	18d2      	adds	r2, r2, r3
1000bdd0:	1052      	asrs	r2, r2, #1
1000bdd2:	1aa4      	subs	r4, r4, r2
1000bdd4:	2246      	movs	r2, #70	; 0x46
1000bdd6:	b2a4      	uxth	r4, r4
1000bdd8:	5284      	strh	r4, [r0, r2]
	vmode->vfront2 = v->vfront2 - ((dh < 0) ? (dh-1)/2 : (dh+1)/2); // V front porch (after image, before VSYNC) on subframe 2
1000bdda:	8d8a      	ldrh	r2, [r1, #44]	; 0x2c
1000bddc:	2b00      	cmp	r3, #0
1000bdde:	da00      	bge.n	1000bde2 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x44e>
1000bde0:	e0b5      	b.n	1000bf4e <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x5ba>
1000bde2:	3301      	adds	r3, #1
1000bde4:	105b      	asrs	r3, r3, #1
1000bde6:	b29b      	uxth	r3, r3
1000bde8:	4659      	mov	r1, fp
1000bdea:	1ad3      	subs	r3, r2, r3
1000bdec:	224a      	movs	r2, #74	; 0x4a
1000bdee:	528b      	strh	r3, [r1, r2]
	vmode->vpre2 = v->vpre2; // V sync pre half-pulses on subframe 2
1000bdf0:	464b      	mov	r3, r9
1000bdf2:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
1000bdf4:	234c      	movs	r3, #76	; 0x4c
	vmode->hfreq = vmode->freq * 1000.0f / vmode->div / vmode->htot;
1000bdf6:	9803      	ldr	r0, [sp, #12]
	vmode->vpre2 = v->vpre2; // V sync pre half-pulses on subframe 2
1000bdf8:	52ca      	strh	r2, [r1, r3]
	vmode->hfreq = vmode->freq * 1000.0f / vmode->div / vmode->htot;
1000bdfa:	4960      	ldr	r1, [pc, #384]	; (1000bf7c <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x5e8>)
1000bdfc:	f7f4 fd36 	bl	1000086c <__wrap___aeabi_fmul>
1000be00:	9908      	ldr	r1, [sp, #32]
1000be02:	f7f4 fd30 	bl	10000866 <__wrap___aeabi_fdiv>
1000be06:	042d      	lsls	r5, r5, #16
1000be08:	4680      	mov	r8, r0
1000be0a:	0c28      	lsrs	r0, r5, #16
1000be0c:	f7f4 fd3a 	bl	10000884 <__wrap___aeabi_i2f>
1000be10:	1c01      	adds	r1, r0, #0
1000be12:	4640      	mov	r0, r8
1000be14:	f7f4 fd27 	bl	10000866 <__wrap___aeabi_fdiv>
1000be18:	465b      	mov	r3, fp
1000be1a:	1c05      	adds	r5, r0, #0
1000be1c:	6298      	str	r0, [r3, #40]	; 0x28
	vmode->vfreq = vmode->hfreq / vmode->vtot;
1000be1e:	0030      	movs	r0, r6
1000be20:	f7f4 fd30 	bl	10000884 <__wrap___aeabi_i2f>
1000be24:	1c01      	adds	r1, r0, #0
1000be26:	1c28      	adds	r0, r5, #0
1000be28:	f7f4 fd1d 	bl	10000866 <__wrap___aeabi_fdiv>

	// name
	vmode->name = v->name;	// video timing name
1000be2c:	464a      	mov	r2, r9
	vmode->vfreq = vmode->hfreq / vmode->vtot;
1000be2e:	465b      	mov	r3, fp
	vmode->name = v->name;	// video timing name
1000be30:	6b12      	ldr	r2, [r2, #48]	; 0x30
	vmode->vfreq = vmode->hfreq / vmode->vtot;
1000be32:	6318      	str	r0, [r3, #48]	; 0x30
	vmode->name = v->name;	// video timing name
1000be34:	651a      	str	r2, [r3, #80]	; 0x50

	// flags
	vmode->lockfreq = cfg->lockfreq; // lock current frequency, do not change it
1000be36:	4653      	mov	r3, sl
1000be38:	4659      	mov	r1, fp
1000be3a:	7e5a      	ldrb	r2, [r3, #25]
1000be3c:	2354      	movs	r3, #84	; 0x54
1000be3e:	54ca      	strb	r2, [r1, r3]
	vmode->dbly = cfg->dbly; // double scanlines
1000be40:	4653      	mov	r3, sl
1000be42:	7e1a      	ldrb	r2, [r3, #24]
1000be44:	2355      	movs	r3, #85	; 0x55
1000be46:	54ca      	strb	r2, [r1, r3]
	vmode->inter = v->inter; // interlaced (use sub-frames)
1000be48:	464a      	mov	r2, r9
1000be4a:	3b21      	subs	r3, #33	; 0x21
1000be4c:	5cd1      	ldrb	r1, [r2, r3]
1000be4e:	4658      	mov	r0, fp
1000be50:	2256      	movs	r2, #86	; 0x56
1000be52:	5481      	strb	r1, [r0, r2]
	vmode->psync = v->psync; // positive synchronization
1000be54:	4649      	mov	r1, r9
1000be56:	3a21      	subs	r2, #33	; 0x21
1000be58:	5c89      	ldrb	r1, [r1, r2]
1000be5a:	3222      	adds	r2, #34	; 0x22
1000be5c:	5481      	strb	r1, [r0, r2]
	vmode->odd = v->odd; // first sub-frame is odd lines 1, 3, 5,... (PAL)
1000be5e:	4649      	mov	r1, r9
1000be60:	3a21      	subs	r2, #33	; 0x21
1000be62:	5c89      	ldrb	r1, [r1, r2]
1000be64:	3222      	adds	r2, #34	; 0x22
1000be66:	5481      	strb	r1, [r0, r2]

	// first active scanline
	if (v->inter)
1000be68:	464a      	mov	r2, r9
1000be6a:	5cd3      	ldrb	r3, [r2, r3]
1000be6c:	2b00      	cmp	r3, #0
1000be6e:	d068      	beq.n	1000bf42 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x5ae>
	{
		// interlaced
		vmode->vfirst1 = (vmode->vsync1 + vmode->vpost1)/2 + vmode->vback1 + 1; 
1000be70:	9a06      	ldr	r2, [sp, #24]
		vmode->vfirst2 = vmode->vfirst1 + vmode->vact1 + vmode->vfront1 + 
			(vmode->vpre1 + vmode->vsync2 + vmode->vpost2)/2 + vmode->vback2;
1000be72:	990a      	ldr	r1, [sp, #40]	; 0x28
		vmode->vfirst1 = (vmode->vsync1 + vmode->vpost1)/2 + vmode->vback1 + 1; 
1000be74:	4694      	mov	ip, r2
1000be76:	9b04      	ldr	r3, [sp, #16]
			(vmode->vpre1 + vmode->vsync2 + vmode->vpost2)/2 + vmode->vback2;
1000be78:	9a09      	ldr	r2, [sp, #36]	; 0x24
		vmode->vfirst1 = (vmode->vsync1 + vmode->vpost1)/2 + vmode->vback1 + 1; 
1000be7a:	4463      	add	r3, ip
			(vmode->vpre1 + vmode->vsync2 + vmode->vpost2)/2 + vmode->vback2;
1000be7c:	468c      	mov	ip, r1
1000be7e:	990b      	ldr	r1, [sp, #44]	; 0x2c
1000be80:	4462      	add	r2, ip
1000be82:	468c      	mov	ip, r1
1000be84:	9905      	ldr	r1, [sp, #20]
1000be86:	4462      	add	r2, ip
1000be88:	468c      	mov	ip, r1
1000be8a:	9907      	ldr	r1, [sp, #28]
1000be8c:	1052      	asrs	r2, r2, #1
1000be8e:	4462      	add	r2, ip
1000be90:	468c      	mov	ip, r1
		vmode->vfirst1 = (vmode->vsync1 + vmode->vpost1)/2 + vmode->vback1 + 1; 
1000be92:	105b      	asrs	r3, r3, #1
1000be94:	3301      	adds	r3, #1
1000be96:	18fb      	adds	r3, r7, r3
1000be98:	b29b      	uxth	r3, r3
			(vmode->vpre1 + vmode->vsync2 + vmode->vpost2)/2 + vmode->vback2;
1000be9a:	18a2      	adds	r2, r4, r2
1000be9c:	189a      	adds	r2, r3, r2
1000be9e:	4462      	add	r2, ip
1000bea0:	b292      	uxth	r2, r2
1000bea2:	4658      	mov	r0, fp
1000bea4:	214e      	movs	r1, #78	; 0x4e
1000bea6:	5242      	strh	r2, [r0, r1]
1000bea8:	2240      	movs	r2, #64	; 0x40
1000beaa:	5283      	strh	r3, [r0, r2]
	{
		// progressive
		vmode->vfirst1 = vmode->vsync1 + vmode->vback1 + 1;
		vmode->vfirst2 = 0;
	}
}
1000beac:	b011      	add	sp, #68	; 0x44
1000beae:	bcf0      	pop	{r4, r5, r6, r7}
1000beb0:	46bb      	mov	fp, r7
1000beb2:	46b2      	mov	sl, r6
1000beb4:	46a9      	mov	r9, r5
1000beb6:	46a0      	mov	r8, r4
1000beb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		hfront -= 13 - hback;
1000beba:	18c9      	adds	r1, r1, r3
1000bebc:	390d      	subs	r1, #13
1000bebe:	2902      	cmp	r1, #2
1000bec0:	db3b      	blt.n	1000bf3a <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x5a6>
1000bec2:	220d      	movs	r2, #13
		hback = 13;
1000bec4:	230d      	movs	r3, #13
1000bec6:	e6f8      	b.n	1000bcba <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x326>
		htot -= 4 - hsync;
1000bec8:	2304      	movs	r3, #4
1000beca:	1824      	adds	r4, r4, r0
		hsync = 4;
1000becc:	2704      	movs	r7, #4
		htot -= 4 - hsync;
1000bece:	3c04      	subs	r4, #4
		hsync = 4;
1000bed0:	9304      	str	r3, [sp, #16]
1000bed2:	e6b7      	b.n	1000bc44 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x2b0>
	u8 prog = LAYERMODE_BASE;
1000bed4:	2100      	movs	r1, #0
1000bed6:	4b2a      	ldr	r3, [pc, #168]	; (1000bf80 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x5ec>)
1000bed8:	e56f      	b.n	1000b9ba <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x26>
1000beda:	0019      	movs	r1, r3
	if (v->inter) // interlaced
1000bedc:	2800      	cmp	r0, #0
1000bede:	d000      	beq.n	1000bee2 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x54e>
1000bee0:	e70f      	b.n	1000bd02 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x36e>
1000bee2:	e730      	b.n	1000bd46 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x3b2>
	if (cfg->dbly) h &= ~1; // must be even number if double lines
1000bee4:	000a      	movs	r2, r1
	int vact2 = 0;
1000bee6:	2300      	movs	r3, #0
	if (cfg->dbly) h /= 2; // return double lines to single lines
1000bee8:	0849      	lsrs	r1, r1, #1
1000beea:	e72e      	b.n	1000bd4a <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x3b6>
			vact1 = (h+1)/2; // if even lines, even frame will have more lines
1000beec:	1c4a      	adds	r2, r1, #1
			vact2 = h/2;
1000beee:	104b      	asrs	r3, r1, #1
1000bef0:	001e      	movs	r6, r3
			vact1 = (h+1)/2; // if even lines, even frame will have more lines
1000bef2:	1052      	asrs	r2, r2, #1
			vact2 = h/2;
1000bef4:	e70f      	b.n	1000bd16 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x382>
1000bef6:	0019      	movs	r1, r3
	if (cfg->dbly) h &= ~1; // must be even number if double lines
1000bef8:	2301      	movs	r3, #1
1000befa:	4399      	bics	r1, r3
	if (v->inter) // interlaced
1000befc:	2800      	cmp	r0, #0
1000befe:	d000      	beq.n	1000bf02 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x56e>
1000bf00:	e6ff      	b.n	1000bd02 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x36e>
1000bf02:	e7ef      	b.n	1000bee4 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x550>
		htot--;
1000bf04:	3d01      	subs	r5, #1
		hfront++;
1000bf06:	3101      	adds	r1, #1
1000bf08:	e6e2      	b.n	1000bcd0 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x33c>
			freq2 = (int)(cpp*wfull*1000/hfull + 0.5f) + 200;
1000bf0a:	19f6      	adds	r6, r6, r7
1000bf0c:	0170      	lsls	r0, r6, #5
1000bf0e:	1b80      	subs	r0, r0, r6
1000bf10:	0080      	lsls	r0, r0, #2
1000bf12:	1980      	adds	r0, r0, r6
1000bf14:	00c0      	lsls	r0, r0, #3
1000bf16:	f7f4 fcb5 	bl	10000884 <__wrap___aeabi_i2f>
1000bf1a:	4641      	mov	r1, r8
1000bf1c:	f7f4 fca3 	bl	10000866 <__wrap___aeabi_fdiv>
1000bf20:	21fc      	movs	r1, #252	; 0xfc
1000bf22:	0589      	lsls	r1, r1, #22
1000bf24:	f7f4 fc9c 	bl	10000860 <__wrap___aeabi_fadd>
1000bf28:	f7f4 fcce 	bl	100008c8 <__wrap___aeabi_f2iz>
1000bf2c:	30c8      	adds	r0, #200	; 0xc8
		if (freq2 >= freq) freq = freq2;
1000bf2e:	4285      	cmp	r5, r0
1000bf30:	d900      	bls.n	1000bf34 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x5a0>
1000bf32:	e5d6      	b.n	1000bae2 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x14e>
1000bf34:	e5d3      	b.n	1000bade <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x14a>
		int freq2 = (int)(cpp*wfull*1000/hfull + 0.5f) + 200;
1000bf36:	0006      	movs	r6, r0
1000bf38:	e5bc      	b.n	1000bab4 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x120>
1000bf3a:	2102      	movs	r1, #2
1000bf3c:	220d      	movs	r2, #13
		hback = 13;
1000bf3e:	230d      	movs	r3, #13
1000bf40:	e6bb      	b.n	1000bcba <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x326>
		vmode->vfirst1 = vmode->vsync1 + vmode->vback1 + 1;
1000bf42:	9b04      	ldr	r3, [sp, #16]
		vmode->vfirst2 = 0;
1000bf44:	2200      	movs	r2, #0
		vmode->vfirst1 = vmode->vsync1 + vmode->vback1 + 1;
1000bf46:	3301      	adds	r3, #1
1000bf48:	18fb      	adds	r3, r7, r3
1000bf4a:	b29b      	uxth	r3, r3
		vmode->vfirst2 = 0;
1000bf4c:	e7a9      	b.n	1000bea2 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x50e>
	vmode->vfront2 = v->vfront2 - ((dh < 0) ? (dh-1)/2 : (dh+1)/2); // V front porch (after image, before VSYNC) on subframe 2
1000bf4e:	1e59      	subs	r1, r3, #1
1000bf50:	0fcb      	lsrs	r3, r1, #31
1000bf52:	185b      	adds	r3, r3, r1
1000bf54:	105b      	asrs	r3, r3, #1
1000bf56:	b29b      	uxth	r3, r3
1000bf58:	e746      	b.n	1000bde8 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x454>
	vmode->vfront1 = v->vfront1 - ((dh < 0) ? (dh-1)/2 : (dh+1)/2); // V front porch (after image, before VSYNC) on subframe 1
1000bf5a:	1e54      	subs	r4, r2, #1
1000bf5c:	0fe2      	lsrs	r2, r4, #31
1000bf5e:	1912      	adds	r2, r2, r4
1000bf60:	1052      	asrs	r2, r2, #1
1000bf62:	b292      	uxth	r2, r2
1000bf64:	e715      	b.n	1000bd92 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x3fe>
	hback += (d < 0) ? (d-1)/2 : (d+1)/2;
1000bf66:	3a01      	subs	r2, #1
1000bf68:	0fd3      	lsrs	r3, r2, #31
1000bf6a:	189b      	adds	r3, r3, r2
1000bf6c:	105b      	asrs	r3, r3, #1
1000bf6e:	e69a      	b.n	1000bca6 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x312>
	while (cpp > maxcpp)
1000bf70:	23fe      	movs	r3, #254	; 0xfe
1000bf72:	059b      	lsls	r3, r3, #22
1000bf74:	2401      	movs	r4, #1
1000bf76:	9308      	str	r3, [sp, #32]
1000bf78:	1c1e      	adds	r6, r3, #0
1000bf7a:	e605      	b.n	1000bb88 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x1f4>
1000bf7c:	447a0000 	.word	0x447a0000
1000bf80:	100298d8 	.word	0x100298d8

1000bf84 <_Z5VideohhhPhPKv>:
//	FORM_TEXT: pointer to font 8x16 or 8x8 (size 4 KB or 2 KB, ALIGNED attribute, should be in RAM)
//		- copy font to 4KB or 2 KB RAM buffer with ALIGNED attribute
//		- text uses color attributes PC_*
//	FORM_RLE: pointer to image rows (ALIGNED attribute, should be in RAM)
void Video(u8 dev, u8 res, u8 form, u8* buf, const void* buf2 /* = FontBoldB8x16 */)
{
1000bf84:	b5f0      	push	{r4, r5, r6, r7, lr}
1000bf86:	46d6      	mov	lr, sl
1000bf88:	464f      	mov	r7, r9
1000bf8a:	4646      	mov	r6, r8
1000bf8c:	b5c0      	push	{r6, r7, lr}
1000bf8e:	0016      	movs	r6, r2
1000bf90:	b084      	sub	sp, #16
1000bf92:	4681      	mov	r9, r0
1000bf94:	000d      	movs	r5, r1
1000bf96:	4698      	mov	r8, r3
	// stop VGA core
	multicore_reset_core1();
1000bf98:	f7f5 fa96 	bl	100014c8 <multicore_reset_core1>

	// run VGA core
	multicore_launch_core1(VgaCore);
1000bf9c:	489b      	ldr	r0, [pc, #620]	; (1000c20c <_Z5VideohhhPhPKv+0x288>)
1000bf9e:	f7f5 faa5 	bl	100014ec <multicore_launch_core1>

	// prepare timings structure
	if (dev >= DEV_MAX) dev = DEV_VGA;
	if (res >= RES_MAX) res = RES_MAX-1;
	if (form >= FORM_MAX) form = FORM_MAX-1;
1000bfa2:	1c37      	adds	r7, r6, #0
1000bfa4:	2e0e      	cmp	r6, #14
1000bfa6:	d900      	bls.n	1000bfaa <_Z5VideohhhPhPKv+0x26>
1000bfa8:	270e      	movs	r7, #14
1000bfaa:	b2ff      	uxtb	r7, r7
	const sVideo* v = VideoResTab[dev*RES_MAX + res];
1000bfac:	1c2c      	adds	r4, r5, #0
1000bfae:	2d07      	cmp	r5, #7
1000bfb0:	d900      	bls.n	1000bfb4 <_Z5VideohhhPhPKv+0x30>
1000bfb2:	2407      	movs	r4, #7
1000bfb4:	464b      	mov	r3, r9
1000bfb6:	464d      	mov	r5, r9
1000bfb8:	b2e4      	uxtb	r4, r4
1000bfba:	2b02      	cmp	r3, #2
1000bfbc:	d900      	bls.n	1000bfc0 <_Z5VideohhhPhPKv+0x3c>
1000bfbe:	2502      	movs	r5, #2
1000bfc0:	b2ed      	uxtb	r5, r5

	// required resolution
	u16 w = VideoResReq[res*2];
1000bfc2:	00a1      	lsls	r1, r4, #2
	const sVideo* v = VideoResTab[dev*RES_MAX + res];
1000bfc4:	00ed      	lsls	r5, r5, #3
1000bfc6:	192d      	adds	r5, r5, r4
	u16 h = VideoResReq[res*2+1];
1000bfc8:	000c      	movs	r4, r1
	const sVideo* v = VideoResTab[dev*RES_MAX + res];
1000bfca:	4b91      	ldr	r3, [pc, #580]	; (1000c210 <_Z5VideohhhPhPKv+0x28c>)
1000bfcc:	00ad      	lsls	r5, r5, #2
	u16 w = VideoResReq[res*2];
1000bfce:	4a91      	ldr	r2, [pc, #580]	; (1000c214 <_Z5VideohhhPhPKv+0x290>)
	const sVideo* v = VideoResTab[dev*RES_MAX + res];
1000bfd0:	58eb      	ldr	r3, [r5, r3]
	u16 h = VideoResReq[res*2+1];
1000bfd2:	3402      	adds	r4, #2
	u16 w = VideoResReq[res*2];
1000bfd4:	5a8d      	ldrh	r5, [r1, r2]
	u16 h = VideoResReq[res*2+1];
1000bfd6:	5aa0      	ldrh	r0, [r4, r2]
	if (h > v->vmax) h = v->vmax;
1000bfd8:	8ad9      	ldrh	r1, [r3, #22]
1000bfda:	1c0a      	adds	r2, r1, #0
1000bfdc:	4281      	cmp	r1, r0
1000bfde:	d900      	bls.n	1000bfe2 <_Z5VideohhhPhPKv+0x5e>
1000bfe0:	1c02      	adds	r2, r0, #0
1000bfe2:	b292      	uxth	r2, r2
1000bfe4:	4691      	mov	r9, r2

	if ((form == FORM_TEXT8) || (form == FORM_MTEXT8))
1000bfe6:	0032      	movs	r2, r6
1000bfe8:	21fd      	movs	r1, #253	; 0xfd
1000bfea:	3a0a      	subs	r2, #10
1000bfec:	420a      	tst	r2, r1
1000bfee:	d104      	bne.n	1000bffa <_Z5VideohhhPhPKv+0x76>
	{
		w = w/8*8;
1000bff0:	2207      	movs	r2, #7
		h = h/8*8;
1000bff2:	4649      	mov	r1, r9
1000bff4:	4391      	bics	r1, r2
1000bff6:	4689      	mov	r9, r1
		w = w/8*8;
1000bff8:	4395      	bics	r5, r2
	}

	if ((form == FORM_TEXT16) || (form == FORM_MTEXT16))
1000bffa:	0032      	movs	r2, r6
1000bffc:	21fd      	movs	r1, #253	; 0xfd
1000bffe:	3a0b      	subs	r2, #11
1000c000:	420a      	tst	r2, r1
1000c002:	d105      	bne.n	1000c010 <_Z5VideohhhPhPKv+0x8c>
	{
		w = w/8*8;
1000c004:	2207      	movs	r2, #7
		h = h/16*16;
1000c006:	4649      	mov	r1, r9
		w = w/8*8;
1000c008:	4395      	bics	r5, r2
		h = h/16*16;
1000c00a:	3208      	adds	r2, #8
1000c00c:	4391      	bics	r1, r2
1000c00e:	4689      	mov	r9, r1
	cfg->wfull = 0;			// width of full screen, corresponding to 'hfull' time (0=use 'width' parameter)
1000c010:	2200      	movs	r2, #0
1000c012:	4881      	ldr	r0, [pc, #516]	; (1000c218 <_Z5VideohhhPhPKv+0x294>)
	cfg->freq = 120000;		// required minimal system frequency in kHz (real frequency can be higher)
1000c014:	4981      	ldr	r1, [pc, #516]	; (1000c21c <_Z5VideohhhPhPKv+0x298>)
	cfg->wfull = 0;			// width of full screen, corresponding to 'hfull' time (0=use 'width' parameter)
1000c016:	8082      	strh	r2, [r0, #4]
	cfg->mode[0] = LAYERMODE_BASE;	// modes of overlapped layers 0..3 LAYERMODE_* (LAYERMODE_BASE = layer is off)
1000c018:	6142      	str	r2, [r0, #20]
	cfg->lockfreq = False;		// lock required frequency, do not change it
1000c01a:	7642      	strb	r2, [r0, #25]
	}

	// setup videomode
	VgaCfgDef(&Cfg); // get default configuration
	Cfg.video = v; // video timings
	Cfg.width = w; // screen width
1000c01c:	464a      	mov	r2, r9
	cfg->freq = 120000;		// required minimal system frequency in kHz (real frequency can be higher)
1000c01e:	60c1      	str	r1, [r0, #12]
	Cfg.width = w; // screen width
1000c020:	0412      	lsls	r2, r2, #16
	cfg->fmax = 270000;		// maximal system frequency in kHz (limit resolution if needed)
1000c022:	497f      	ldr	r1, [pc, #508]	; (1000c220 <_Z5VideohhhPhPKv+0x29c>)
	Cfg.width = w; // screen width
1000c024:	432a      	orrs	r2, r5
	cfg->fmax = 270000;		// maximal system frequency in kHz (limit resolution if needed)
1000c026:	6101      	str	r1, [r0, #16]
	Cfg.video = v; // video timings
1000c028:	6083      	str	r3, [r0, #8]
	Cfg.width = w; // screen width
1000c02a:	6002      	str	r2, [r0, #0]
	Cfg.height = h; // screen height
	if (form == FORM_RLE) Cfg.mode[1] = LAYERMODE_RLE;
1000c02c:	2e0d      	cmp	r6, #13
1000c02e:	d901      	bls.n	1000c034 <_Z5VideohhhPhPKv+0xb0>
1000c030:	2206      	movs	r2, #6
1000c032:	7542      	strb	r2, [r0, #21]
	Cfg.dbly = h <= v->vmax/2; // double scanlines
1000c034:	8ada      	ldrh	r2, [r3, #22]
1000c036:	4649      	mov	r1, r9
1000c038:	2300      	movs	r3, #0
1000c03a:	0852      	lsrs	r2, r2, #1
1000c03c:	428a      	cmp	r2, r1
1000c03e:	415b      	adcs	r3, r3
	VgaCfg(&Cfg, &Vmode); // calculate videomode setup
1000c040:	4c78      	ldr	r4, [pc, #480]	; (1000c224 <_Z5VideohhhPhPKv+0x2a0>)
	Cfg.dbly = h <= v->vmax/2; // double scanlines
1000c042:	7603      	strb	r3, [r0, #24]
	VgaCfg(&Cfg, &Vmode); // calculate videomode setup
1000c044:	0021      	movs	r1, r4
1000c046:	f7ff fca5 	bl	1000b994 <_Z6VgaCfgPK7sVgaCfgP6sVmode>

	// initialize base layer 0
	ScreenClear(pScreen);
1000c04a:	4e77      	ldr	r6, [pc, #476]	; (1000c228 <_Z5VideohhhPhPKv+0x2a4>)
1000c04c:	6830      	ldr	r0, [r6, #0]
1000c04e:	f7ff fb79 	bl	1000b744 <_Z11ScreenClearP7sScreen>
	sStrip* t = ScreenAddStrip(pScreen, h);
1000c052:	4649      	mov	r1, r9
1000c054:	6830      	ldr	r0, [r6, #0]
1000c056:	f7ff fb7d 	bl	1000b754 <_Z14ScreenAddStripP7sScreeni>
	sSegm* g = ScreenAddSegm(t, w);
1000c05a:	0029      	movs	r1, r5
1000c05c:	f7ff fb8c 	bl	1000b778 <_Z13ScreenAddSegmP6sStripi>
1000c060:	0006      	movs	r6, r0
	switch (form)
1000c062:	2f0e      	cmp	r7, #14
1000c064:	d900      	bls.n	1000c068 <_Z5VideohhhPhPKv+0xe4>
1000c066:	e0c2      	b.n	1000c1ee <_Z5VideohhhPhPKv+0x26a>
1000c068:	4b70      	ldr	r3, [pc, #448]	; (1000c22c <_Z5VideohhhPhPKv+0x2a8>)
1000c06a:	00bf      	lsls	r7, r7, #2
1000c06c:	59db      	ldr	r3, [r3, r7]
1000c06e:	469f      	mov	pc, r3
		PrintSetup(buf, w/8, h/16, w/8*2);
		PrintClear();
		break;

	case FORM_RLE:	// images with RLE compression (on overlapped layer 1)
		ScreenSegmColor(g, 0, 0);
1000c070:	2200      	movs	r2, #0
1000c072:	2100      	movs	r1, #0
1000c074:	f7ff fb9c 	bl	1000b7b0 <_Z15ScreenSegmColorP5sSegmmm>
		LayerSetup(1, buf, &Vmode, w, h, 0, buf2);
1000c078:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1000c07a:	2001      	movs	r0, #1
1000c07c:	9302      	str	r3, [sp, #8]
1000c07e:	2300      	movs	r3, #0
1000c080:	9301      	str	r3, [sp, #4]
1000c082:	464b      	mov	r3, r9
1000c084:	0022      	movs	r2, r4
1000c086:	9300      	str	r3, [sp, #0]
1000c088:	4641      	mov	r1, r8
1000c08a:	002b      	movs	r3, r5
1000c08c:	f7ff fad6 	bl	1000b63c <_Z10LayerSetuphPKhPK6sVmodetthPKv>
		LayerOn(1);
1000c090:	2001      	movs	r0, #1
1000c092:	f7ff fac3 	bl	1000b61c <_Z7LayerOnh>
		break;
	}

	// initialize system clock
	set_sys_clock_pll(Vmode.vco*1000, Vmode.pd1, Vmode.pd2);
1000c096:	68e3      	ldr	r3, [r4, #12]
1000c098:	7ce2      	ldrb	r2, [r4, #19]
1000c09a:	0158      	lsls	r0, r3, #5
1000c09c:	1ac0      	subs	r0, r0, r3
1000c09e:	0080      	lsls	r0, r0, #2
1000c0a0:	18c0      	adds	r0, r0, r3
1000c0a2:	7ca1      	ldrb	r1, [r4, #18]
1000c0a4:	00c0      	lsls	r0, r0, #3
1000c0a6:	f7f6 f93d 	bl	10002324 <set_sys_clock_pll>

	// initialize videomode
	VgaInitReq(&Vmode);
1000c0aa:	0020      	movs	r0, r4
1000c0ac:	f7ff faa2 	bl	1000b5f4 <_Z10VgaInitReqPK6sVmode>
}
1000c0b0:	b004      	add	sp, #16
1000c0b2:	bce0      	pop	{r5, r6, r7}
1000c0b4:	46ba      	mov	sl, r7
1000c0b6:	46b1      	mov	r9, r6
1000c0b8:	46a8      	mov	r8, r5
1000c0ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
		GenPal16Trans(Pal16Trans, DefPal16); // generate palette translation table
1000c0bc:	4b5c      	ldr	r3, [pc, #368]	; (1000c230 <_Z5VideohhhPhPKv+0x2ac>)
1000c0be:	495d      	ldr	r1, [pc, #372]	; (1000c234 <_Z5VideohhhPhPKv+0x2b0>)
1000c0c0:	469a      	mov	sl, r3
1000c0c2:	0018      	movs	r0, r3
		ScreenSegmGraph4(g, buf, Pal16Trans, w/2);
1000c0c4:	086f      	lsrs	r7, r5, #1
		GenPal16Trans(Pal16Trans, DefPal16); // generate palette translation table
1000c0c6:	f7ff fb8b 	bl	1000b7e0 <_Z13GenPal16TransPtPKh>
		ScreenSegmGraph4(g, buf, Pal16Trans, w/2);
1000c0ca:	003b      	movs	r3, r7
1000c0cc:	4652      	mov	r2, sl
1000c0ce:	4641      	mov	r1, r8
1000c0d0:	0030      	movs	r0, r6
1000c0d2:	f7ff fb99 	bl	1000b808 <_Z16ScreenSegmGraph4P5sSegmPKvS2_i>
		Canvas.img = buf;
1000c0d6:	4642      	mov	r2, r8
1000c0d8:	4b57      	ldr	r3, [pc, #348]	; (1000c238 <_Z5VideohhhPhPKv+0x2b4>)
1000c0da:	601a      	str	r2, [r3, #0]
		Canvas.h = h;
1000c0dc:	464a      	mov	r2, r9
1000c0de:	60da      	str	r2, [r3, #12]
		Canvas.format = CANVAS_4;
1000c0e0:	2201      	movs	r2, #1
		Canvas.w = w;
1000c0e2:	609d      	str	r5, [r3, #8]
		Canvas.wb = w/2;
1000c0e4:	611f      	str	r7, [r3, #16]
		Canvas.format = CANVAS_4;
1000c0e6:	751a      	strb	r2, [r3, #20]
		break;
1000c0e8:	e7d5      	b.n	1000c096 <_Z5VideohhhPhPKv+0x112>
		ScreenSegmGraph1(g, buf, COL_BLACK, COL_WHITE, w/8);
1000c0ea:	08ef      	lsrs	r7, r5, #3
1000c0ec:	23ff      	movs	r3, #255	; 0xff
1000c0ee:	2200      	movs	r2, #0
1000c0f0:	4641      	mov	r1, r8
1000c0f2:	9700      	str	r7, [sp, #0]
1000c0f4:	f7ff fb98 	bl	1000b828 <_Z16ScreenSegmGraph1P5sSegmPKvhhi>
		Canvas.img = buf;
1000c0f8:	4642      	mov	r2, r8
1000c0fa:	4b4f      	ldr	r3, [pc, #316]	; (1000c238 <_Z5VideohhhPhPKv+0x2b4>)
1000c0fc:	601a      	str	r2, [r3, #0]
		Canvas.h = h;
1000c0fe:	464a      	mov	r2, r9
1000c100:	60da      	str	r2, [r3, #12]
		Canvas.format = CANVAS_1;
1000c102:	2203      	movs	r2, #3
		Canvas.w = w;
1000c104:	609d      	str	r5, [r3, #8]
		Canvas.wb = w/8;
1000c106:	611f      	str	r7, [r3, #16]
		Canvas.format = CANVAS_1;
1000c108:	751a      	strb	r2, [r3, #20]
		break;
1000c10a:	e7c4      	b.n	1000c096 <_Z5VideohhhPhPKv+0x112>
		ScreenSegmTile(g, buf, buf2, 8, 8, (w+7)/8);
1000c10c:	2308      	movs	r3, #8
1000c10e:	3507      	adds	r5, #7
1000c110:	10ed      	asrs	r5, r5, #3
1000c112:	9501      	str	r5, [sp, #4]
		ScreenSegmTile(g, buf, buf2, 12, 12, (w+11)/12);
1000c114:	4641      	mov	r1, r8
1000c116:	0030      	movs	r0, r6
1000c118:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1000c11a:	9300      	str	r3, [sp, #0]
1000c11c:	f7ff fbc4 	bl	1000b8a8 <_Z14ScreenSegmTileP5sSegmPKvS2_iii>
		break;
1000c120:	e7b9      	b.n	1000c096 <_Z5VideohhhPhPKv+0x112>
		ScreenSegmTile(g, buf, buf2, 12, 12, (w+11)/12);
1000c122:	0028      	movs	r0, r5
1000c124:	210c      	movs	r1, #12
1000c126:	300b      	adds	r0, #11
1000c128:	f7f4 f8f8 	bl	1000031c <__wrap___aeabi_idiv>
1000c12c:	230c      	movs	r3, #12
1000c12e:	9001      	str	r0, [sp, #4]
1000c130:	e7f0      	b.n	1000c114 <_Z5VideohhhPhPKv+0x190>
		ScreenSegmTile(g, buf, buf2, 16, 16, (w+15)/16);
1000c132:	350f      	adds	r5, #15
1000c134:	112d      	asrs	r5, r5, #4
1000c136:	2310      	movs	r3, #16
1000c138:	9501      	str	r5, [sp, #4]
1000c13a:	e7eb      	b.n	1000c114 <_Z5VideohhhPhPKv+0x190>
		ScreenSegmTile(g, buf, buf2, 24, 24, (w+23)/24);
1000c13c:	0028      	movs	r0, r5
1000c13e:	2118      	movs	r1, #24
1000c140:	3017      	adds	r0, #23
1000c142:	f7f4 f8eb 	bl	1000031c <__wrap___aeabi_idiv>
1000c146:	2318      	movs	r3, #24
1000c148:	9001      	str	r0, [sp, #4]
1000c14a:	e7e3      	b.n	1000c114 <_Z5VideohhhPhPKv+0x190>
		ScreenSegmTile(g, buf, buf2, 32, 32, (w+31)/32);
1000c14c:	351f      	adds	r5, #31
1000c14e:	116d      	asrs	r5, r5, #5
1000c150:	2320      	movs	r3, #32
1000c152:	9501      	str	r5, [sp, #4]
1000c154:	e7de      	b.n	1000c114 <_Z5VideohhhPhPKv+0x190>
		ScreenSegmTile(g, buf, buf2, 48, 48, (w+47)/48);
1000c156:	0028      	movs	r0, r5
1000c158:	2130      	movs	r1, #48	; 0x30
1000c15a:	302f      	adds	r0, #47	; 0x2f
1000c15c:	f7f4 f8de 	bl	1000031c <__wrap___aeabi_idiv>
1000c160:	2330      	movs	r3, #48	; 0x30
1000c162:	9001      	str	r0, [sp, #4]
1000c164:	e7d6      	b.n	1000c114 <_Z5VideohhhPhPKv+0x190>
		ScreenSegmTile(g, buf, buf2, 64, 64, (w+63)/64);
1000c166:	353f      	adds	r5, #63	; 0x3f
1000c168:	11ad      	asrs	r5, r5, #6
1000c16a:	2340      	movs	r3, #64	; 0x40
1000c16c:	9501      	str	r5, [sp, #4]
1000c16e:	e7d1      	b.n	1000c114 <_Z5VideohhhPhPKv+0x190>
		ScreenSegmMText(g, buf, buf2, 8, COL_BLACK, COL_WHITE, w/8);
1000c170:	23ff      	movs	r3, #255	; 0xff
1000c172:	9301      	str	r3, [sp, #4]
1000c174:	2300      	movs	r3, #0
1000c176:	08ed      	lsrs	r5, r5, #3
1000c178:	9300      	str	r3, [sp, #0]
1000c17a:	9502      	str	r5, [sp, #8]
1000c17c:	3308      	adds	r3, #8
		ScreenSegmMText(g, buf, buf2, 16, COL_BLACK, COL_WHITE, w/8);
1000c17e:	4641      	mov	r1, r8
1000c180:	0030      	movs	r0, r6
1000c182:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1000c184:	f7ff fb64 	bl	1000b850 <_Z15ScreenSegmMTextP5sSegmPKvS2_thhi>
		PrintSetup(buf, w/8, h/8, w/8);
1000c188:	464b      	mov	r3, r9
1000c18a:	0029      	movs	r1, r5
1000c18c:	08da      	lsrs	r2, r3, #3
1000c18e:	4640      	mov	r0, r8
1000c190:	002b      	movs	r3, r5
1000c192:	f001 fa45 	bl	1000d620 <_Z10PrintSetupPhiii>
		PrintClear();
1000c196:	f001 fa6d 	bl	1000d674 <_Z10PrintClearv>
		break;
1000c19a:	e77c      	b.n	1000c096 <_Z5VideohhhPhPKv+0x112>
		ScreenSegmMText(g, buf, buf2, 16, COL_BLACK, COL_WHITE, w/8);
1000c19c:	23ff      	movs	r3, #255	; 0xff
1000c19e:	9301      	str	r3, [sp, #4]
1000c1a0:	2300      	movs	r3, #0
1000c1a2:	08ed      	lsrs	r5, r5, #3
1000c1a4:	9300      	str	r3, [sp, #0]
1000c1a6:	9502      	str	r5, [sp, #8]
1000c1a8:	3310      	adds	r3, #16
1000c1aa:	e7e8      	b.n	1000c17e <_Z5VideohhhPhPKv+0x1fa>
		ScreenSegmAText(g, buf, buf2, 8, DefPal16, w/8*2);
1000c1ac:	4b21      	ldr	r3, [pc, #132]	; (1000c234 <_Z5VideohhhPhPKv+0x2b0>)
1000c1ae:	08ed      	lsrs	r5, r5, #3
1000c1b0:	006f      	lsls	r7, r5, #1
1000c1b2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1000c1b4:	9300      	str	r3, [sp, #0]
1000c1b6:	4641      	mov	r1, r8
1000c1b8:	2308      	movs	r3, #8
1000c1ba:	9701      	str	r7, [sp, #4]
1000c1bc:	f7ff fb60 	bl	1000b880 <_Z15ScreenSegmATextP5sSegmPKvS2_tS2_i>
		PrintSetup(buf, w/8, h/8, w/8*2);
1000c1c0:	464b      	mov	r3, r9
1000c1c2:	08da      	lsrs	r2, r3, #3
		PrintSetup(buf, w/8, h/16, w/8*2);
1000c1c4:	003b      	movs	r3, r7
1000c1c6:	0029      	movs	r1, r5
1000c1c8:	4640      	mov	r0, r8
1000c1ca:	f001 fa29 	bl	1000d620 <_Z10PrintSetupPhiii>
		PrintClear();
1000c1ce:	f001 fa51 	bl	1000d674 <_Z10PrintClearv>
		break;
1000c1d2:	e760      	b.n	1000c096 <_Z5VideohhhPhPKv+0x112>
		ScreenSegmAText(g, buf, buf2, 16, DefPal16, w/8*2);
1000c1d4:	4b17      	ldr	r3, [pc, #92]	; (1000c234 <_Z5VideohhhPhPKv+0x2b0>)
1000c1d6:	08ed      	lsrs	r5, r5, #3
1000c1d8:	006f      	lsls	r7, r5, #1
1000c1da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1000c1dc:	9300      	str	r3, [sp, #0]
1000c1de:	4641      	mov	r1, r8
1000c1e0:	2310      	movs	r3, #16
1000c1e2:	9701      	str	r7, [sp, #4]
1000c1e4:	f7ff fb4c 	bl	1000b880 <_Z15ScreenSegmATextP5sSegmPKvS2_tS2_i>
		PrintSetup(buf, w/8, h/16, w/8*2);
1000c1e8:	464b      	mov	r3, r9
1000c1ea:	091a      	lsrs	r2, r3, #4
1000c1ec:	e7ea      	b.n	1000c1c4 <_Z5VideohhhPhPKv+0x240>
		ScreenSegmGraph8(g, buf, w);
1000c1ee:	002a      	movs	r2, r5
1000c1f0:	4641      	mov	r1, r8
1000c1f2:	0030      	movs	r0, r6
1000c1f4:	f7ff fae6 	bl	1000b7c4 <_Z16ScreenSegmGraph8P5sSegmPKvi>
		Canvas.img = buf;
1000c1f8:	4642      	mov	r2, r8
1000c1fa:	4b0f      	ldr	r3, [pc, #60]	; (1000c238 <_Z5VideohhhPhPKv+0x2b4>)
1000c1fc:	601a      	str	r2, [r3, #0]
		Canvas.h = h;
1000c1fe:	464a      	mov	r2, r9
1000c200:	60da      	str	r2, [r3, #12]
		Canvas.format = CANVAS_8;
1000c202:	2200      	movs	r2, #0
		Canvas.w = w;
1000c204:	609d      	str	r5, [r3, #8]
		Canvas.wb = w;
1000c206:	611d      	str	r5, [r3, #16]
		Canvas.format = CANVAS_8;
1000c208:	751a      	strb	r2, [r3, #20]
		break;
1000c20a:	e744      	b.n	1000c096 <_Z5VideohhhPhPKv+0x112>
1000c20c:	1000b5a9 	.word	0x1000b5a9
1000c210:	20002790 	.word	0x20002790
1000c214:	10029d94 	.word	0x10029d94
1000c218:	200034b8 	.word	0x200034b8
1000c21c:	0001d4c0 	.word	0x0001d4c0
1000c220:	00041eb0 	.word	0x00041eb0
1000c224:	20011a64 	.word	0x20011a64
1000c228:	2000278c 	.word	0x2000278c
1000c22c:	10029b10 	.word	0x10029b10
1000c230:	20006214 	.word	0x20006214
1000c234:	2000277c 	.word	0x2000277c
1000c238:	200034a0 	.word	0x200034a0

1000c23c <_Z9DrawPointP7sCanvasiih.part.0>:
	DrawRect(canvas, 0, 0, canvas->w, canvas->h, 0);
}

// Draw point
//  col with CANVAS_ATTRIB8 format: bit 0..3 = draw color, bit 4 = draw color is background color
void DrawPoint(sCanvas* canvas, int x, int y, u8 col)
1000c23c:	b5f0      	push	{r4, r5, r6, r7, lr}
{
	// check coordinates
	if (((u32)x >= (u32)canvas->w) || ((u32)y >= (u32)canvas->h)) return;

	// check format
	switch(canvas->format)
1000c23e:	7d04      	ldrb	r4, [r0, #20]
1000c240:	2c05      	cmp	r4, #5
1000c242:	d808      	bhi.n	1000c256 <_Z9DrawPointP7sCanvasiih.part.0+0x1a>
1000c244:	4d9a      	ldr	r5, [pc, #616]	; (1000c4b0 <_Z9DrawPointP7sCanvasiih.part.0+0x274>)
1000c246:	00a4      	lsls	r4, r4, #2
1000c248:	592c      	ldr	r4, [r5, r4]
1000c24a:	46a7      	mov	pc, r4
	{
	// 8-bit pixels
	case CANVAS_8:
		canvas->img[x + y*canvas->wb] = col;
1000c24c:	6904      	ldr	r4, [r0, #16]
1000c24e:	6800      	ldr	r0, [r0, #0]
1000c250:	4362      	muls	r2, r4
1000c252:	1841      	adds	r1, r0, r1
1000c254:	548b      	strb	r3, [r1, r2]
				*d2 = (*d2 & 0x0f) | (col << 4);
			}
		}
		break;
	}
}
1000c256:	bdf0      	pop	{r4, r5, r6, r7, pc}
			u8* d = canvas->img + x/8 + y*wb; // 1st plane
1000c258:	2507      	movs	r5, #7
1000c25a:	6904      	ldr	r4, [r0, #16]
1000c25c:	4362      	muls	r2, r4
1000c25e:	17cc      	asrs	r4, r1, #31
1000c260:	402c      	ands	r4, r5
1000c262:	1864      	adds	r4, r4, r1
1000c264:	10e4      	asrs	r4, r4, #3
1000c266:	1914      	adds	r4, r2, r4
1000c268:	6802      	ldr	r2, [r0, #0]
			switch (x & 7)
1000c26a:	400d      	ands	r5, r1
			u8* d = canvas->img + x/8 + y*wb; // 1st plane
1000c26c:	1916      	adds	r6, r2, r4
			u8* d2 = canvas->img2 + x/8 + y*wb; // 2nd plane
1000c26e:	6842      	ldr	r2, [r0, #4]
			col &= 1;
1000c270:	2001      	movs	r0, #1
1000c272:	4990      	ldr	r1, [pc, #576]	; (1000c4b4 <_Z9DrawPointP7sCanvasiih.part.0+0x278>)
1000c274:	00ad      	lsls	r5, r5, #2
1000c276:	5949      	ldr	r1, [r1, r5]
			u8* d2 = canvas->img2 + x/8 + y*wb; // 2nd plane
1000c278:	1914      	adds	r4, r2, r4
			u8 col2 = col >> 1;
1000c27a:	085a      	lsrs	r2, r3, #1
			col &= 1;
1000c27c:	4003      	ands	r3, r0
			switch (x & 7)
1000c27e:	468f      	mov	pc, r1
			u8* d = canvas->img + x/8 + y*wb; // pixels
1000c280:	2707      	movs	r7, #7
1000c282:	6906      	ldr	r6, [r0, #16]
1000c284:	17cc      	asrs	r4, r1, #31
1000c286:	4356      	muls	r6, r2
1000c288:	403c      	ands	r4, r7
1000c28a:	1864      	adds	r4, r4, r1
1000c28c:	10e4      	asrs	r4, r4, #3
1000c28e:	6805      	ldr	r5, [r0, #0]
1000c290:	1936      	adds	r6, r6, r4
1000c292:	19ad      	adds	r5, r5, r6
			u8* d2 = canvas->img2 + x/8 + (y/8)*wb; // attributes
1000c294:	17d6      	asrs	r6, r2, #31
1000c296:	403e      	ands	r6, r7
1000c298:	18b2      	adds	r2, r6, r2
1000c29a:	6906      	ldr	r6, [r0, #16]
1000c29c:	10d2      	asrs	r2, r2, #3
1000c29e:	4372      	muls	r2, r6
1000c2a0:	1914      	adds	r4, r2, r4
1000c2a2:	6842      	ldr	r2, [r0, #4]
				*d |= (0x80 >> (x & 7));
1000c2a4:	4039      	ands	r1, r7
			u8* d2 = canvas->img2 + x/8 + (y/8)*wb; // attributes
1000c2a6:	1914      	adds	r4, r2, r4
			if ((col & B4) == 0)
1000c2a8:	06da      	lsls	r2, r3, #27
1000c2aa:	d445      	bmi.n	1000c338 <_Z9DrawPointP7sCanvasiih.part.0+0xfc>
				*d |= (0x80 >> (x & 7));
1000c2ac:	2280      	movs	r2, #128	; 0x80
1000c2ae:	410a      	asrs	r2, r1
1000c2b0:	7829      	ldrb	r1, [r5, #0]
1000c2b2:	430a      	orrs	r2, r1
				*d2 = (*d2 & 0xf0) | col;
1000c2b4:	210f      	movs	r1, #15
				*d |= (0x80 >> (x & 7));
1000c2b6:	702a      	strb	r2, [r5, #0]
				*d2 = (*d2 & 0xf0) | col;
1000c2b8:	7822      	ldrb	r2, [r4, #0]
1000c2ba:	438a      	bics	r2, r1
1000c2bc:	4313      	orrs	r3, r2
1000c2be:	7023      	strb	r3, [r4, #0]
1000c2c0:	e7c9      	b.n	1000c256 <_Z9DrawPointP7sCanvasiih.part.0+0x1a>
			u8* d = canvas->img + x/4 + y*canvas->wb;
1000c2c2:	2503      	movs	r5, #3
1000c2c4:	6904      	ldr	r4, [r0, #16]
1000c2c6:	4362      	muls	r2, r4
1000c2c8:	17cc      	asrs	r4, r1, #31
1000c2ca:	402c      	ands	r4, r5
1000c2cc:	1864      	adds	r4, r4, r1
1000c2ce:	10a4      	asrs	r4, r4, #2
1000c2d0:	1914      	adds	r4, r2, r4
1000c2d2:	6802      	ldr	r2, [r0, #0]
			switch (x & 3)
1000c2d4:	4029      	ands	r1, r5
			u8* d = canvas->img + x/4 + y*canvas->wb;
1000c2d6:	1914      	adds	r4, r2, r4
			switch (x & 3)
1000c2d8:	2902      	cmp	r1, #2
1000c2da:	d100      	bne.n	1000c2de <_Z9DrawPointP7sCanvasiih.part.0+0xa2>
1000c2dc:	e0cd      	b.n	1000c47a <_Z9DrawPointP7sCanvasiih.part.0+0x23e>
1000c2de:	2903      	cmp	r1, #3
1000c2e0:	d100      	bne.n	1000c2e4 <_Z9DrawPointP7sCanvasiih.part.0+0xa8>
1000c2e2:	e0c5      	b.n	1000c470 <_Z9DrawPointP7sCanvasiih.part.0+0x234>
1000c2e4:	2901      	cmp	r1, #1
1000c2e6:	d100      	bne.n	1000c2ea <_Z9DrawPointP7sCanvasiih.part.0+0xae>
1000c2e8:	e0bb      	b.n	1000c462 <_Z9DrawPointP7sCanvasiih.part.0+0x226>
				*d = (*d & 0x3f) | (col << 6);
1000c2ea:	223f      	movs	r2, #63	; 0x3f
1000c2ec:	7821      	ldrb	r1, [r4, #0]
1000c2ee:	019b      	lsls	r3, r3, #6
1000c2f0:	400a      	ands	r2, r1
1000c2f2:	4313      	orrs	r3, r2
1000c2f4:	7023      	strb	r3, [r4, #0]
				break;
1000c2f6:	e7ae      	b.n	1000c256 <_Z9DrawPointP7sCanvasiih.part.0+0x1a>
			u8* d = canvas->img + x/8 + y*canvas->wb;
1000c2f8:	2507      	movs	r5, #7
1000c2fa:	6904      	ldr	r4, [r0, #16]
1000c2fc:	4362      	muls	r2, r4
1000c2fe:	17cc      	asrs	r4, r1, #31
1000c300:	402c      	ands	r4, r5
1000c302:	1864      	adds	r4, r4, r1
1000c304:	10e4      	asrs	r4, r4, #3
1000c306:	1914      	adds	r4, r2, r4
1000c308:	6802      	ldr	r2, [r0, #0]
			switch (x & 7)
1000c30a:	4029      	ands	r1, r5
			u8* d = canvas->img + x/8 + y*canvas->wb;
1000c30c:	1914      	adds	r4, r2, r4
			switch (x & 7)
1000c30e:	4a6a      	ldr	r2, [pc, #424]	; (1000c4b8 <_Z9DrawPointP7sCanvasiih.part.0+0x27c>)
1000c310:	0089      	lsls	r1, r1, #2
1000c312:	5852      	ldr	r2, [r2, r1]
1000c314:	4697      	mov	pc, r2
			u8* d = canvas->img + x/2 + y*canvas->wb;
1000c316:	6904      	ldr	r4, [r0, #16]
1000c318:	6800      	ldr	r0, [r0, #0]
1000c31a:	4362      	muls	r2, r4
1000c31c:	0fcc      	lsrs	r4, r1, #31
1000c31e:	1864      	adds	r4, r4, r1
1000c320:	1064      	asrs	r4, r4, #1
1000c322:	1912      	adds	r2, r2, r4
1000c324:	1882      	adds	r2, r0, r2
			if ((x & 1) == 0)
1000c326:	07c9      	lsls	r1, r1, #31
1000c328:	d413      	bmi.n	1000c352 <_Z9DrawPointP7sCanvasiih.part.0+0x116>
					*d = (*d & 0x0f) | (col << 4);
1000c32a:	210f      	movs	r1, #15
1000c32c:	7810      	ldrb	r0, [r2, #0]
1000c32e:	011b      	lsls	r3, r3, #4
1000c330:	4001      	ands	r1, r0
1000c332:	430b      	orrs	r3, r1
1000c334:	7013      	strb	r3, [r2, #0]
1000c336:	e78e      	b.n	1000c256 <_Z9DrawPointP7sCanvasiih.part.0+0x1a>
				*d &= ~(0x80 >> (x & 7));
1000c338:	2280      	movs	r2, #128	; 0x80
1000c33a:	410a      	asrs	r2, r1
1000c33c:	0011      	movs	r1, r2
1000c33e:	782a      	ldrb	r2, [r5, #0]
				*d2 = (*d2 & 0x0f) | (col << 4);
1000c340:	011b      	lsls	r3, r3, #4
				*d &= ~(0x80 >> (x & 7));
1000c342:	438a      	bics	r2, r1
1000c344:	702a      	strb	r2, [r5, #0]
				*d2 = (*d2 & 0x0f) | (col << 4);
1000c346:	220f      	movs	r2, #15
1000c348:	7821      	ldrb	r1, [r4, #0]
1000c34a:	400a      	ands	r2, r1
1000c34c:	4313      	orrs	r3, r2
1000c34e:	7023      	strb	r3, [r4, #0]
1000c350:	e781      	b.n	1000c256 <_Z9DrawPointP7sCanvasiih.part.0+0x1a>
					*d = (*d & 0xf0) | col;
1000c352:	200f      	movs	r0, #15
1000c354:	7811      	ldrb	r1, [r2, #0]
1000c356:	4381      	bics	r1, r0
1000c358:	430b      	orrs	r3, r1
1000c35a:	7013      	strb	r3, [r2, #0]
1000c35c:	e77b      	b.n	1000c256 <_Z9DrawPointP7sCanvasiih.part.0+0x1a>
				*d = (*d & ~0x01) | col;
1000c35e:	2101      	movs	r1, #1
1000c360:	7822      	ldrb	r2, [r4, #0]
1000c362:	438a      	bics	r2, r1
1000c364:	4313      	orrs	r3, r2
1000c366:	7023      	strb	r3, [r4, #0]
				break;
1000c368:	e775      	b.n	1000c256 <_Z9DrawPointP7sCanvasiih.part.0+0x1a>
				*d = (*d & ~0x02) | (col << 1);
1000c36a:	2102      	movs	r1, #2
1000c36c:	7822      	ldrb	r2, [r4, #0]
1000c36e:	005b      	lsls	r3, r3, #1
1000c370:	438a      	bics	r2, r1
1000c372:	4313      	orrs	r3, r2
1000c374:	7023      	strb	r3, [r4, #0]
				break;
1000c376:	e76e      	b.n	1000c256 <_Z9DrawPointP7sCanvasiih.part.0+0x1a>
				*d = (*d & ~0x04) | (col << 2);
1000c378:	2104      	movs	r1, #4
1000c37a:	7822      	ldrb	r2, [r4, #0]
1000c37c:	009b      	lsls	r3, r3, #2
1000c37e:	438a      	bics	r2, r1
1000c380:	4313      	orrs	r3, r2
1000c382:	7023      	strb	r3, [r4, #0]
				break;
1000c384:	e767      	b.n	1000c256 <_Z9DrawPointP7sCanvasiih.part.0+0x1a>
				*d = (*d & ~0x08) | (col << 3);
1000c386:	2108      	movs	r1, #8
1000c388:	7822      	ldrb	r2, [r4, #0]
1000c38a:	00db      	lsls	r3, r3, #3
1000c38c:	438a      	bics	r2, r1
1000c38e:	4313      	orrs	r3, r2
1000c390:	7023      	strb	r3, [r4, #0]
				break;
1000c392:	e760      	b.n	1000c256 <_Z9DrawPointP7sCanvasiih.part.0+0x1a>
				*d = (*d & ~0x10) | (col << 4);
1000c394:	2110      	movs	r1, #16
1000c396:	7822      	ldrb	r2, [r4, #0]
1000c398:	011b      	lsls	r3, r3, #4
1000c39a:	438a      	bics	r2, r1
1000c39c:	4313      	orrs	r3, r2
1000c39e:	7023      	strb	r3, [r4, #0]
				break;
1000c3a0:	e759      	b.n	1000c256 <_Z9DrawPointP7sCanvasiih.part.0+0x1a>
				*d = (*d & ~0x20) | (col << 5);
1000c3a2:	2120      	movs	r1, #32
1000c3a4:	7822      	ldrb	r2, [r4, #0]
1000c3a6:	015b      	lsls	r3, r3, #5
1000c3a8:	438a      	bics	r2, r1
1000c3aa:	4313      	orrs	r3, r2
1000c3ac:	7023      	strb	r3, [r4, #0]
				break;
1000c3ae:	e752      	b.n	1000c256 <_Z9DrawPointP7sCanvasiih.part.0+0x1a>
				*d = (*d & ~0x40) | (col << 6);
1000c3b0:	2140      	movs	r1, #64	; 0x40
1000c3b2:	7822      	ldrb	r2, [r4, #0]
1000c3b4:	019b      	lsls	r3, r3, #6
1000c3b6:	438a      	bics	r2, r1
1000c3b8:	4313      	orrs	r3, r2
1000c3ba:	7023      	strb	r3, [r4, #0]
				break;
1000c3bc:	e74b      	b.n	1000c256 <_Z9DrawPointP7sCanvasiih.part.0+0x1a>
				*d = (*d & ~0x01) | col;
1000c3be:	2101      	movs	r1, #1
1000c3c0:	7830      	ldrb	r0, [r6, #0]
1000c3c2:	4388      	bics	r0, r1
1000c3c4:	4303      	orrs	r3, r0
1000c3c6:	7033      	strb	r3, [r6, #0]
				*d2 = (*d2 & ~0x01) | col2;
1000c3c8:	7823      	ldrb	r3, [r4, #0]
1000c3ca:	438b      	bics	r3, r1
1000c3cc:	431a      	orrs	r2, r3
1000c3ce:	7022      	strb	r2, [r4, #0]
				break;
1000c3d0:	e741      	b.n	1000c256 <_Z9DrawPointP7sCanvasiih.part.0+0x1a>
				*d = (*d & ~0x02) | (col << 1);
1000c3d2:	2502      	movs	r5, #2
1000c3d4:	7831      	ldrb	r1, [r6, #0]
1000c3d6:	005b      	lsls	r3, r3, #1
1000c3d8:	43a9      	bics	r1, r5
1000c3da:	430b      	orrs	r3, r1
1000c3dc:	7033      	strb	r3, [r6, #0]
				*d2 = (*d2 & ~0x02) | (col2 << 1);
1000c3de:	7823      	ldrb	r3, [r4, #0]
1000c3e0:	0052      	lsls	r2, r2, #1
1000c3e2:	43ab      	bics	r3, r5
1000c3e4:	431a      	orrs	r2, r3
1000c3e6:	7022      	strb	r2, [r4, #0]
				break;
1000c3e8:	e735      	b.n	1000c256 <_Z9DrawPointP7sCanvasiih.part.0+0x1a>
				*d = (*d & ~0x04) | (col << 2);
1000c3ea:	2504      	movs	r5, #4
1000c3ec:	7831      	ldrb	r1, [r6, #0]
1000c3ee:	009b      	lsls	r3, r3, #2
1000c3f0:	43a9      	bics	r1, r5
1000c3f2:	430b      	orrs	r3, r1
1000c3f4:	7033      	strb	r3, [r6, #0]
				*d2 = (*d2 & ~0x04) | (col2 << 2);
1000c3f6:	7823      	ldrb	r3, [r4, #0]
1000c3f8:	0092      	lsls	r2, r2, #2
1000c3fa:	43ab      	bics	r3, r5
1000c3fc:	431a      	orrs	r2, r3
1000c3fe:	7022      	strb	r2, [r4, #0]
				break;
1000c400:	e729      	b.n	1000c256 <_Z9DrawPointP7sCanvasiih.part.0+0x1a>
				*d = (*d & ~0x08) | (col << 3);
1000c402:	2508      	movs	r5, #8
1000c404:	7831      	ldrb	r1, [r6, #0]
1000c406:	00db      	lsls	r3, r3, #3
1000c408:	43a9      	bics	r1, r5
1000c40a:	430b      	orrs	r3, r1
1000c40c:	7033      	strb	r3, [r6, #0]
				*d2 = (*d2 & ~0x08) | (col2 << 3);
1000c40e:	7823      	ldrb	r3, [r4, #0]
1000c410:	00d2      	lsls	r2, r2, #3
1000c412:	43ab      	bics	r3, r5
1000c414:	431a      	orrs	r2, r3
1000c416:	7022      	strb	r2, [r4, #0]
				break;
1000c418:	e71d      	b.n	1000c256 <_Z9DrawPointP7sCanvasiih.part.0+0x1a>
				*d = (*d & ~0x10) | (col << 4);
1000c41a:	2510      	movs	r5, #16
1000c41c:	7831      	ldrb	r1, [r6, #0]
1000c41e:	011b      	lsls	r3, r3, #4
1000c420:	43a9      	bics	r1, r5
1000c422:	430b      	orrs	r3, r1
1000c424:	7033      	strb	r3, [r6, #0]
				*d2 = (*d2 & ~0x10) | (col2 << 4);
1000c426:	7823      	ldrb	r3, [r4, #0]
1000c428:	0112      	lsls	r2, r2, #4
1000c42a:	43ab      	bics	r3, r5
1000c42c:	431a      	orrs	r2, r3
1000c42e:	7022      	strb	r2, [r4, #0]
				break;
1000c430:	e711      	b.n	1000c256 <_Z9DrawPointP7sCanvasiih.part.0+0x1a>
				*d = (*d & ~0x20) | (col << 5);
1000c432:	2520      	movs	r5, #32
1000c434:	7831      	ldrb	r1, [r6, #0]
1000c436:	015b      	lsls	r3, r3, #5
1000c438:	43a9      	bics	r1, r5
1000c43a:	430b      	orrs	r3, r1
1000c43c:	7033      	strb	r3, [r6, #0]
				*d2 = (*d2 & ~0x20) | (col2 << 5);
1000c43e:	7823      	ldrb	r3, [r4, #0]
1000c440:	0152      	lsls	r2, r2, #5
1000c442:	43ab      	bics	r3, r5
1000c444:	431a      	orrs	r2, r3
1000c446:	7022      	strb	r2, [r4, #0]
				break;
1000c448:	e705      	b.n	1000c256 <_Z9DrawPointP7sCanvasiih.part.0+0x1a>
				*d = (*d & ~0x40) | (col << 6);
1000c44a:	2540      	movs	r5, #64	; 0x40
1000c44c:	7831      	ldrb	r1, [r6, #0]
1000c44e:	019b      	lsls	r3, r3, #6
1000c450:	43a9      	bics	r1, r5
1000c452:	430b      	orrs	r3, r1
1000c454:	7033      	strb	r3, [r6, #0]
				*d2 = (*d2 & ~0x40) | (col2 << 6);
1000c456:	7823      	ldrb	r3, [r4, #0]
1000c458:	0192      	lsls	r2, r2, #6
1000c45a:	43ab      	bics	r3, r5
1000c45c:	431a      	orrs	r2, r3
1000c45e:	7022      	strb	r2, [r4, #0]
				break;
1000c460:	e6f9      	b.n	1000c256 <_Z9DrawPointP7sCanvasiih.part.0+0x1a>
				*d = (*d & 0xcf) | (col << 4);
1000c462:	2130      	movs	r1, #48	; 0x30
1000c464:	7822      	ldrb	r2, [r4, #0]
1000c466:	011b      	lsls	r3, r3, #4
1000c468:	438a      	bics	r2, r1
1000c46a:	4313      	orrs	r3, r2
1000c46c:	7023      	strb	r3, [r4, #0]
				break;
1000c46e:	e6f2      	b.n	1000c256 <_Z9DrawPointP7sCanvasiih.part.0+0x1a>
				*d = (*d & 0xfc) | col;
1000c470:	7822      	ldrb	r2, [r4, #0]
1000c472:	438a      	bics	r2, r1
1000c474:	4313      	orrs	r3, r2
1000c476:	7023      	strb	r3, [r4, #0]
				break;
1000c478:	e6ed      	b.n	1000c256 <_Z9DrawPointP7sCanvasiih.part.0+0x1a>
				*d = (*d & 0xf3) | (col << 2);
1000c47a:	210c      	movs	r1, #12
1000c47c:	7822      	ldrb	r2, [r4, #0]
1000c47e:	009b      	lsls	r3, r3, #2
1000c480:	438a      	bics	r2, r1
1000c482:	4313      	orrs	r3, r2
1000c484:	7023      	strb	r3, [r4, #0]
				break;
1000c486:	e6e6      	b.n	1000c256 <_Z9DrawPointP7sCanvasiih.part.0+0x1a>
				*d = (*d & ~0x80) | (col << 7);
1000c488:	217f      	movs	r1, #127	; 0x7f
1000c48a:	7835      	ldrb	r5, [r6, #0]
1000c48c:	01db      	lsls	r3, r3, #7
1000c48e:	400d      	ands	r5, r1
1000c490:	432b      	orrs	r3, r5
1000c492:	7033      	strb	r3, [r6, #0]
				*d2 = (*d2 & ~0x80) | (col2 << 7);
1000c494:	7823      	ldrb	r3, [r4, #0]
1000c496:	01d2      	lsls	r2, r2, #7
1000c498:	4019      	ands	r1, r3
1000c49a:	4311      	orrs	r1, r2
1000c49c:	7021      	strb	r1, [r4, #0]
				break;
1000c49e:	e6da      	b.n	1000c256 <_Z9DrawPointP7sCanvasiih.part.0+0x1a>
				*d = (*d & ~0x80) | (col << 7);
1000c4a0:	227f      	movs	r2, #127	; 0x7f
1000c4a2:	7821      	ldrb	r1, [r4, #0]
1000c4a4:	01db      	lsls	r3, r3, #7
1000c4a6:	400a      	ands	r2, r1
1000c4a8:	4313      	orrs	r3, r2
1000c4aa:	7023      	strb	r3, [r4, #0]
				break;
1000c4ac:	e6d3      	b.n	1000c256 <_Z9DrawPointP7sCanvasiih.part.0+0x1a>
1000c4ae:	46c0      	nop			; (mov r8, r8)
1000c4b0:	10029db4 	.word	0x10029db4
1000c4b4:	10029dcc 	.word	0x10029dcc
1000c4b8:	10029dec 	.word	0x10029dec

1000c4bc <_Z8DrawRectP7sCanvasiiiih>:
{
1000c4bc:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c4be:	4657      	mov	r7, sl
1000c4c0:	464e      	mov	r6, r9
1000c4c2:	4645      	mov	r5, r8
1000c4c4:	46de      	mov	lr, fp
1000c4c6:	b5e0      	push	{r5, r6, r7, lr}
1000c4c8:	b095      	sub	sp, #84	; 0x54
1000c4ca:	4699      	mov	r9, r3
1000c4cc:	ab1e      	add	r3, sp, #120	; 0x78
1000c4ce:	cb10      	ldmia	r3!, {r4}
1000c4d0:	781b      	ldrb	r3, [r3, #0]
1000c4d2:	46a2      	mov	sl, r4
1000c4d4:	4698      	mov	r8, r3
	if (x < 0)
1000c4d6:	2900      	cmp	r1, #0
1000c4d8:	db6a      	blt.n	1000c5b0 <_Z8DrawRectP7sCanvasiiiih+0xf4>
	if (x + w > canvas->w) w = canvas->w - x;
1000c4da:	464b      	mov	r3, r9
1000c4dc:	18cc      	adds	r4, r1, r3
1000c4de:	6883      	ldr	r3, [r0, #8]
1000c4e0:	42a3      	cmp	r3, r4
1000c4e2:	da01      	bge.n	1000c4e8 <_Z8DrawRectP7sCanvasiiiih+0x2c>
1000c4e4:	1a5b      	subs	r3, r3, r1
1000c4e6:	4699      	mov	r9, r3
	if (w <= 0) return;
1000c4e8:	464b      	mov	r3, r9
1000c4ea:	2b00      	cmp	r3, #0
1000c4ec:	dd55      	ble.n	1000c59a <_Z8DrawRectP7sCanvasiiiih+0xde>
	if (y < 0)
1000c4ee:	2a00      	cmp	r2, #0
1000c4f0:	db5a      	blt.n	1000c5a8 <_Z8DrawRectP7sCanvasiiiih+0xec>
	if (y + h > canvas->h) h = canvas->h - y;
1000c4f2:	4653      	mov	r3, sl
1000c4f4:	18d4      	adds	r4, r2, r3
1000c4f6:	68c3      	ldr	r3, [r0, #12]
1000c4f8:	42a3      	cmp	r3, r4
1000c4fa:	da01      	bge.n	1000c500 <_Z8DrawRectP7sCanvasiiiih+0x44>
1000c4fc:	1a9b      	subs	r3, r3, r2
1000c4fe:	469a      	mov	sl, r3
	if (h <= 0) return;
1000c500:	4653      	mov	r3, sl
1000c502:	2b00      	cmp	r3, #0
1000c504:	dd49      	ble.n	1000c59a <_Z8DrawRectP7sCanvasiiiih+0xde>
	switch(canvas->format)
1000c506:	7d03      	ldrb	r3, [r0, #20]
1000c508:	2b05      	cmp	r3, #5
1000c50a:	d846      	bhi.n	1000c59a <_Z8DrawRectP7sCanvasiiiih+0xde>
1000c50c:	4c4c      	ldr	r4, [pc, #304]	; (1000c640 <_Z8DrawRectP7sCanvasiiiih+0x184>)
1000c50e:	009b      	lsls	r3, r3, #2
1000c510:	58e3      	ldr	r3, [r4, r3]
1000c512:	469f      	mov	pc, r3
			int wb = canvas->wb;
1000c514:	6903      	ldr	r3, [r0, #16]
			u8* d = canvas->img + x/2 + y*wb;
1000c516:	104e      	asrs	r6, r1, #1
1000c518:	435a      	muls	r2, r3
			int wb = canvas->wb;
1000c51a:	9301      	str	r3, [sp, #4]
			u8* d = canvas->img + x/2 + y*wb;
1000c51c:	18b2      	adds	r2, r6, r2
			u8 col2 = col << 4;
1000c51e:	4643      	mov	r3, r8
			u8* d = canvas->img + x/2 + y*wb;
1000c520:	6806      	ldr	r6, [r0, #0]
			u8 col2 = col << 4;
1000c522:	011b      	lsls	r3, r3, #4
			u8* d = canvas->img + x/2 + y*wb;
1000c524:	18b6      	adds	r6, r6, r2
			u8 col3 = col2 | col;
1000c526:	4642      	mov	r2, r8
			u8 col2 = col << 4;
1000c528:	b2db      	uxtb	r3, r3
			u8 col3 = col2 | col;
1000c52a:	431a      	orrs	r2, r3
			u8 col2 = col << 4;
1000c52c:	9302      	str	r3, [sp, #8]
				if ((x & 1) != 0)
1000c52e:	2301      	movs	r3, #1
1000c530:	400b      	ands	r3, r1
1000c532:	9300      	str	r3, [sp, #0]
					i--;
1000c534:	464b      	mov	r3, r9
1000c536:	3b01      	subs	r3, #1
1000c538:	9303      	str	r3, [sp, #12]
1000c53a:	4643      	mov	r3, r8
1000c53c:	4693      	mov	fp, r2
1000c53e:	9304      	str	r3, [sp, #16]
				if ((x & 1) != 0)
1000c540:	9b00      	ldr	r3, [sp, #0]
1000c542:	464c      	mov	r4, r9
1000c544:	0035      	movs	r5, r6
1000c546:	2b00      	cmp	r3, #0
1000c548:	d007      	beq.n	1000c55a <_Z8DrawRectP7sCanvasiiiih+0x9e>
					*d = (*d & 0xf0) | col;
1000c54a:	220f      	movs	r2, #15
1000c54c:	7833      	ldrb	r3, [r6, #0]
					i--;
1000c54e:	9c03      	ldr	r4, [sp, #12]
					*d = (*d & 0xf0) | col;
1000c550:	4393      	bics	r3, r2
1000c552:	9a04      	ldr	r2, [sp, #16]
1000c554:	1c75      	adds	r5, r6, #1
1000c556:	4313      	orrs	r3, r2
1000c558:	7033      	strb	r3, [r6, #0]
				for (; i > 1; i -= 2) *d++ = col3;
1000c55a:	2c01      	cmp	r4, #1
1000c55c:	dd0b      	ble.n	1000c576 <_Z8DrawRectP7sCanvasiiiih+0xba>
1000c55e:	3c02      	subs	r4, #2
1000c560:	0867      	lsrs	r7, r4, #1
1000c562:	1c7b      	adds	r3, r7, #1
1000c564:	4698      	mov	r8, r3
1000c566:	0028      	movs	r0, r5
1000c568:	001a      	movs	r2, r3
1000c56a:	4659      	mov	r1, fp
1000c56c:	f7f4 fa0e 	bl	1000098c <__wrap_memset>
1000c570:	007f      	lsls	r7, r7, #1
1000c572:	4445      	add	r5, r8
1000c574:	1be4      	subs	r4, r4, r7
				if (i > 0) *d = (*d & 0x0f) | col2;
1000c576:	2c01      	cmp	r4, #1
1000c578:	d105      	bne.n	1000c586 <_Z8DrawRectP7sCanvasiiiih+0xca>
1000c57a:	220f      	movs	r2, #15
1000c57c:	782b      	ldrb	r3, [r5, #0]
1000c57e:	4013      	ands	r3, r2
1000c580:	9a02      	ldr	r2, [sp, #8]
1000c582:	4313      	orrs	r3, r2
1000c584:	702b      	strb	r3, [r5, #0]
				d = d0 + wb;
1000c586:	9b01      	ldr	r3, [sp, #4]
1000c588:	469c      	mov	ip, r3
			for (; h > 0; h--)
1000c58a:	2301      	movs	r3, #1
1000c58c:	425b      	negs	r3, r3
				d = d0 + wb;
1000c58e:	4466      	add	r6, ip
			for (; h > 0; h--)
1000c590:	469c      	mov	ip, r3
1000c592:	44e2      	add	sl, ip
1000c594:	4653      	mov	r3, sl
1000c596:	2b00      	cmp	r3, #0
1000c598:	d1d2      	bne.n	1000c540 <_Z8DrawRectP7sCanvasiiiih+0x84>
}
1000c59a:	b015      	add	sp, #84	; 0x54
1000c59c:	bcf0      	pop	{r4, r5, r6, r7}
1000c59e:	46bb      	mov	fp, r7
1000c5a0:	46b2      	mov	sl, r6
1000c5a2:	46a9      	mov	r9, r5
1000c5a4:	46a0      	mov	r8, r4
1000c5a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		h += y;
1000c5a8:	4492      	add	sl, r2
		y = 0;
1000c5aa:	4654      	mov	r4, sl
1000c5ac:	2200      	movs	r2, #0
1000c5ae:	e7a2      	b.n	1000c4f6 <_Z8DrawRectP7sCanvasiiiih+0x3a>
		w += x;
1000c5b0:	4489      	add	r9, r1
		x = 0;
1000c5b2:	464c      	mov	r4, r9
1000c5b4:	2100      	movs	r1, #0
1000c5b6:	e792      	b.n	1000c4de <_Z8DrawRectP7sCanvasiiiih+0x22>
			int wb = canvas->wb;
1000c5b8:	6903      	ldr	r3, [r0, #16]
1000c5ba:	001c      	movs	r4, r3
			u8* d = canvas->img + x/8 + y*wb; // 1st plane
1000c5bc:	4362      	muls	r2, r4
			int wb = canvas->wb;
1000c5be:	9306      	str	r3, [sp, #24]
			u8* d = canvas->img + x/8 + y*wb; // 1st plane
1000c5c0:	10cb      	asrs	r3, r1, #3
1000c5c2:	189a      	adds	r2, r3, r2
1000c5c4:	6803      	ldr	r3, [r0, #0]
1000c5c6:	469c      	mov	ip, r3
			u8* d2 = canvas->img2 + x/8 + y*wb; // 2nd plane
1000c5c8:	6843      	ldr	r3, [r0, #4]
			u8* d = canvas->img + x/8 + y*wb; // 1st plane
1000c5ca:	4494      	add	ip, r2
			u8* d2 = canvas->img2 + x/8 + y*wb; // 2nd plane
1000c5cc:	189d      	adds	r5, r3, r2
			u8 col2 = col >> 1;
1000c5ce:	4643      	mov	r3, r8
1000c5d0:	085a      	lsrs	r2, r3, #1
			col2 = (col2<<7)|(col2<<6)|(col2<<5)|(col2<<4)|(col2<<3)|(col2<<2)|(col2<<1)|col2;
1000c5d2:	0190      	lsls	r0, r2, #6
1000c5d4:	01d3      	lsls	r3, r2, #7
1000c5d6:	4303      	orrs	r3, r0
1000c5d8:	4313      	orrs	r3, r2
1000c5da:	0150      	lsls	r0, r2, #5
1000c5dc:	4303      	orrs	r3, r0
1000c5de:	0110      	lsls	r0, r2, #4
1000c5e0:	4303      	orrs	r3, r0
1000c5e2:	00d0      	lsls	r0, r2, #3
1000c5e4:	4303      	orrs	r3, r0
1000c5e6:	0090      	lsls	r0, r2, #2
1000c5e8:	4303      	orrs	r3, r0
1000c5ea:	0052      	lsls	r2, r2, #1
1000c5ec:	4313      	orrs	r3, r2
1000c5ee:	b25a      	sxtb	r2, r3
1000c5f0:	b2db      	uxtb	r3, r3
1000c5f2:	4693      	mov	fp, r2
1000c5f4:	9307      	str	r3, [sp, #28]
			col &= 1;
1000c5f6:	2201      	movs	r2, #1
1000c5f8:	4643      	mov	r3, r8
1000c5fa:	401a      	ands	r2, r3
			col = (col<<7)|(col<<6)|(col<<5)|(col<<4)|(col<<3)|(col<<2)|(col<<1)|col;
1000c5fc:	0190      	lsls	r0, r2, #6
1000c5fe:	01d3      	lsls	r3, r2, #7
1000c600:	4303      	orrs	r3, r0
1000c602:	4313      	orrs	r3, r2
1000c604:	0150      	lsls	r0, r2, #5
1000c606:	4303      	orrs	r3, r0
1000c608:	0110      	lsls	r0, r2, #4
1000c60a:	4303      	orrs	r3, r0
1000c60c:	00d0      	lsls	r0, r2, #3
1000c60e:	4303      	orrs	r3, r0
1000c610:	0090      	lsls	r0, r2, #2
1000c612:	4303      	orrs	r3, r0
1000c614:	0052      	lsls	r2, r2, #1
1000c616:	4313      	orrs	r3, r2
1000c618:	b25a      	sxtb	r2, r3
1000c61a:	9308      	str	r3, [sp, #32]
				dx = x & 7;
1000c61c:	2307      	movs	r3, #7
1000c61e:	400b      	ands	r3, r1
			col = (col<<7)|(col<<6)|(col<<5)|(col<<4)|(col<<3)|(col<<2)|(col<<1)|col;
1000c620:	4690      	mov	r8, r2
				dx = x & 7;
1000c622:	9303      	str	r3, [sp, #12]
1000c624:	001a      	movs	r2, r3
					m = 0x80 >> dx; // mask of 1 color bit
1000c626:	2380      	movs	r3, #128	; 0x80
1000c628:	4113      	asrs	r3, r2
1000c62a:	9309      	str	r3, [sp, #36]	; 0x24
						*d = (*d & ~m) | (col & m); // set 1 pixel
1000c62c:	105b      	asrs	r3, r3, #1
1000c62e:	930a      	str	r3, [sp, #40]	; 0x28
1000c630:	464b      	mov	r3, r9
1000c632:	9305      	str	r3, [sp, #20]
1000c634:	4653      	mov	r3, sl
1000c636:	4647      	mov	r7, r8
1000c638:	46a9      	mov	r9, r5
1000c63a:	46e2      	mov	sl, ip
1000c63c:	9301      	str	r3, [sp, #4]
1000c63e:	e0b7      	b.n	1000c7b0 <_Z8DrawRectP7sCanvasiiiih+0x2f4>
1000c640:	10029e0c 	.word	0x10029e0c
				for (; i > 7; i -= 8)
1000c644:	9c05      	ldr	r4, [sp, #20]
1000c646:	2c07      	cmp	r4, #7
1000c648:	dc00      	bgt.n	1000c64c <_Z8DrawRectP7sCanvasiiiih+0x190>
1000c64a:	e3e7      	b.n	1000ce1c <_Z8DrawRectP7sCanvasiiiih+0x960>
1000c64c:	464b      	mov	r3, r9
1000c64e:	4650      	mov	r0, sl
1000c650:	9300      	str	r3, [sp, #0]
1000c652:	2308      	movs	r3, #8
1000c654:	425b      	negs	r3, r3
1000c656:	469c      	mov	ip, r3
1000c658:	44a4      	add	ip, r4
1000c65a:	4663      	mov	r3, ip
1000c65c:	2201      	movs	r2, #1
1000c65e:	9302      	str	r3, [sp, #8]
1000c660:	08db      	lsrs	r3, r3, #3
1000c662:	4690      	mov	r8, r2
1000c664:	9304      	str	r3, [sp, #16]
1000c666:	2c07      	cmp	r4, #7
1000c668:	dd01      	ble.n	1000c66e <_Z8DrawRectP7sCanvasiiiih+0x1b2>
1000c66a:	3301      	adds	r3, #1
1000c66c:	4698      	mov	r8, r3
1000c66e:	4643      	mov	r3, r8
1000c670:	9a00      	ldr	r2, [sp, #0]
1000c672:	18c6      	adds	r6, r0, r3
1000c674:	0015      	movs	r5, r2
1000c676:	2300      	movs	r3, #0
1000c678:	4445      	add	r5, r8
1000c67a:	42a8      	cmp	r0, r5
1000c67c:	415b      	adcs	r3, r3
1000c67e:	2b00      	cmp	r3, #0
1000c680:	d102      	bne.n	1000c688 <_Z8DrawRectP7sCanvasiiiih+0x1cc>
1000c682:	42b2      	cmp	r2, r6
1000c684:	d200      	bcs.n	1000c688 <_Z8DrawRectP7sCanvasiiiih+0x1cc>
1000c686:	e3b9      	b.n	1000cdfc <_Z8DrawRectP7sCanvasiiiih+0x940>
					*d++ = col;
1000c688:	4642      	mov	r2, r8
1000c68a:	9908      	ldr	r1, [sp, #32]
1000c68c:	f7f4 f97e 	bl	1000098c <__wrap_memset>
					*d2++ = col2;
1000c690:	4642      	mov	r2, r8
1000c692:	9907      	ldr	r1, [sp, #28]
1000c694:	9800      	ldr	r0, [sp, #0]
1000c696:	f7f4 f979 	bl	1000098c <__wrap_memset>
1000c69a:	2300      	movs	r3, #0
1000c69c:	2c07      	cmp	r4, #7
1000c69e:	dd02      	ble.n	1000c6a6 <_Z8DrawRectP7sCanvasiiiih+0x1ea>
1000c6a0:	9b04      	ldr	r3, [sp, #16]
1000c6a2:	00db      	lsls	r3, r3, #3
1000c6a4:	425b      	negs	r3, r3
				for (; i > 7; i -= 8)
1000c6a6:	9a02      	ldr	r2, [sp, #8]
1000c6a8:	189c      	adds	r4, r3, r2
				for (; i > 0; i--)
1000c6aa:	2c00      	cmp	r4, #0
1000c6ac:	d100      	bne.n	1000c6b0 <_Z8DrawRectP7sCanvasiiiih+0x1f4>
1000c6ae:	e075      	b.n	1000c79c <_Z8DrawRectP7sCanvasiiiih+0x2e0>
					*d = (*d & ~m) | (col & m); // set 1 pixel
1000c6b0:	2300      	movs	r3, #0
1000c6b2:	003a      	movs	r2, r7
1000c6b4:	217f      	movs	r1, #127	; 0x7f
1000c6b6:	56f3      	ldrsb	r3, [r6, r3]
1000c6b8:	405a      	eors	r2, r3
1000c6ba:	438a      	bics	r2, r1
1000c6bc:	4053      	eors	r3, r2
1000c6be:	7033      	strb	r3, [r6, #0]
					*d2 = (*d2 & ~m) | (col2 & m); // set 1 pixel
1000c6c0:	2300      	movs	r3, #0
1000c6c2:	465a      	mov	r2, fp
1000c6c4:	56eb      	ldrsb	r3, [r5, r3]
1000c6c6:	405a      	eors	r2, r3
1000c6c8:	438a      	bics	r2, r1
1000c6ca:	4053      	eors	r3, r2
1000c6cc:	702b      	strb	r3, [r5, #0]
				for (; i > 0; i--)
1000c6ce:	2c01      	cmp	r4, #1
1000c6d0:	d064      	beq.n	1000c79c <_Z8DrawRectP7sCanvasiiiih+0x2e0>
					*d = (*d & ~m) | (col & m); // set 1 pixel
1000c6d2:	2300      	movs	r3, #0
1000c6d4:	0039      	movs	r1, r7
1000c6d6:	2240      	movs	r2, #64	; 0x40
1000c6d8:	56f3      	ldrsb	r3, [r6, r3]
1000c6da:	4059      	eors	r1, r3
1000c6dc:	4011      	ands	r1, r2
1000c6de:	404b      	eors	r3, r1
1000c6e0:	7033      	strb	r3, [r6, #0]
					*d2 = (*d2 & ~m) | (col2 & m); // set 1 pixel
1000c6e2:	2300      	movs	r3, #0
1000c6e4:	4659      	mov	r1, fp
1000c6e6:	56eb      	ldrsb	r3, [r5, r3]
1000c6e8:	4059      	eors	r1, r3
1000c6ea:	400a      	ands	r2, r1
1000c6ec:	4053      	eors	r3, r2
1000c6ee:	702b      	strb	r3, [r5, #0]
				for (; i > 0; i--)
1000c6f0:	2c02      	cmp	r4, #2
1000c6f2:	d053      	beq.n	1000c79c <_Z8DrawRectP7sCanvasiiiih+0x2e0>
					*d = (*d & ~m) | (col & m); // set 1 pixel
1000c6f4:	2300      	movs	r3, #0
1000c6f6:	0039      	movs	r1, r7
1000c6f8:	2220      	movs	r2, #32
1000c6fa:	56f3      	ldrsb	r3, [r6, r3]
1000c6fc:	4059      	eors	r1, r3
1000c6fe:	4011      	ands	r1, r2
1000c700:	404b      	eors	r3, r1
1000c702:	7033      	strb	r3, [r6, #0]
					*d2 = (*d2 & ~m) | (col2 & m); // set 1 pixel
1000c704:	2300      	movs	r3, #0
1000c706:	4659      	mov	r1, fp
1000c708:	56eb      	ldrsb	r3, [r5, r3]
1000c70a:	4059      	eors	r1, r3
1000c70c:	400a      	ands	r2, r1
1000c70e:	4053      	eors	r3, r2
1000c710:	702b      	strb	r3, [r5, #0]
				for (; i > 0; i--)
1000c712:	2c03      	cmp	r4, #3
1000c714:	d042      	beq.n	1000c79c <_Z8DrawRectP7sCanvasiiiih+0x2e0>
					*d = (*d & ~m) | (col & m); // set 1 pixel
1000c716:	2300      	movs	r3, #0
1000c718:	0039      	movs	r1, r7
1000c71a:	2210      	movs	r2, #16
1000c71c:	56f3      	ldrsb	r3, [r6, r3]
1000c71e:	4059      	eors	r1, r3
1000c720:	4011      	ands	r1, r2
1000c722:	404b      	eors	r3, r1
1000c724:	7033      	strb	r3, [r6, #0]
					*d2 = (*d2 & ~m) | (col2 & m); // set 1 pixel
1000c726:	2300      	movs	r3, #0
1000c728:	4659      	mov	r1, fp
1000c72a:	56eb      	ldrsb	r3, [r5, r3]
1000c72c:	4059      	eors	r1, r3
1000c72e:	400a      	ands	r2, r1
1000c730:	4053      	eors	r3, r2
1000c732:	702b      	strb	r3, [r5, #0]
				for (; i > 0; i--)
1000c734:	2c04      	cmp	r4, #4
1000c736:	d031      	beq.n	1000c79c <_Z8DrawRectP7sCanvasiiiih+0x2e0>
					*d = (*d & ~m) | (col & m); // set 1 pixel
1000c738:	2300      	movs	r3, #0
1000c73a:	0039      	movs	r1, r7
1000c73c:	2208      	movs	r2, #8
1000c73e:	56f3      	ldrsb	r3, [r6, r3]
1000c740:	4059      	eors	r1, r3
1000c742:	4011      	ands	r1, r2
1000c744:	404b      	eors	r3, r1
1000c746:	7033      	strb	r3, [r6, #0]
					*d2 = (*d2 & ~m) | (col2 & m); // set 1 pixel
1000c748:	2300      	movs	r3, #0
1000c74a:	4659      	mov	r1, fp
1000c74c:	56eb      	ldrsb	r3, [r5, r3]
1000c74e:	4059      	eors	r1, r3
1000c750:	400a      	ands	r2, r1
1000c752:	4053      	eors	r3, r2
1000c754:	702b      	strb	r3, [r5, #0]
				for (; i > 0; i--)
1000c756:	1f61      	subs	r1, r4, #5
1000c758:	2c05      	cmp	r4, #5
1000c75a:	d01f      	beq.n	1000c79c <_Z8DrawRectP7sCanvasiiiih+0x2e0>
					*d = (*d & ~m) | (col & m); // set 1 pixel
1000c75c:	2300      	movs	r3, #0
1000c75e:	0038      	movs	r0, r7
1000c760:	2204      	movs	r2, #4
1000c762:	56f3      	ldrsb	r3, [r6, r3]
1000c764:	4058      	eors	r0, r3
1000c766:	4010      	ands	r0, r2
1000c768:	4043      	eors	r3, r0
1000c76a:	7033      	strb	r3, [r6, #0]
					*d2 = (*d2 & ~m) | (col2 & m); // set 1 pixel
1000c76c:	2300      	movs	r3, #0
1000c76e:	4658      	mov	r0, fp
1000c770:	56eb      	ldrsb	r3, [r5, r3]
1000c772:	4058      	eors	r0, r3
1000c774:	4002      	ands	r2, r0
1000c776:	4053      	eors	r3, r2
1000c778:	702b      	strb	r3, [r5, #0]
				for (; i > 0; i--)
1000c77a:	2901      	cmp	r1, #1
1000c77c:	d00e      	beq.n	1000c79c <_Z8DrawRectP7sCanvasiiiih+0x2e0>
					*d = (*d & ~m) | (col & m); // set 1 pixel
1000c77e:	2300      	movs	r3, #0
1000c780:	0039      	movs	r1, r7
1000c782:	2202      	movs	r2, #2
1000c784:	56f3      	ldrsb	r3, [r6, r3]
1000c786:	4059      	eors	r1, r3
1000c788:	4011      	ands	r1, r2
1000c78a:	404b      	eors	r3, r1
1000c78c:	7033      	strb	r3, [r6, #0]
					*d2 = (*d2 & ~m) | (col2 & m); // set 1 pixel
1000c78e:	2300      	movs	r3, #0
1000c790:	4659      	mov	r1, fp
1000c792:	56eb      	ldrsb	r3, [r5, r3]
1000c794:	4059      	eors	r1, r3
1000c796:	400a      	ands	r2, r1
1000c798:	4053      	eors	r3, r2
1000c79a:	702b      	strb	r3, [r5, #0]
				d = d0 + wb;
1000c79c:	9b06      	ldr	r3, [sp, #24]
1000c79e:	469c      	mov	ip, r3
			for (; h > 0; h--)
1000c7a0:	9b01      	ldr	r3, [sp, #4]
				d = d0 + wb;
1000c7a2:	44e2      	add	sl, ip
			for (; h > 0; h--)
1000c7a4:	3b01      	subs	r3, #1
				d2 = d02 + wb;
1000c7a6:	44e1      	add	r9, ip
			for (; h > 0; h--)
1000c7a8:	9301      	str	r3, [sp, #4]
1000c7aa:	2b00      	cmp	r3, #0
1000c7ac:	d100      	bne.n	1000c7b0 <_Z8DrawRectP7sCanvasiiiih+0x2f4>
1000c7ae:	e6f4      	b.n	1000c59a <_Z8DrawRectP7sCanvasiiiih+0xde>
				if (dx != 0)
1000c7b0:	9b03      	ldr	r3, [sp, #12]
1000c7b2:	2b00      	cmp	r3, #0
1000c7b4:	d100      	bne.n	1000c7b8 <_Z8DrawRectP7sCanvasiiiih+0x2fc>
1000c7b6:	e745      	b.n	1000c644 <_Z8DrawRectP7sCanvasiiiih+0x188>
1000c7b8:	0018      	movs	r0, r3
						*d = (*d & ~m) | (col & m); // set 1 pixel
1000c7ba:	2100      	movs	r1, #0
1000c7bc:	4653      	mov	r3, sl
1000c7be:	5659      	ldrsb	r1, [r3, r1]
1000c7c0:	003b      	movs	r3, r7
1000c7c2:	9e09      	ldr	r6, [sp, #36]	; 0x24
1000c7c4:	404b      	eors	r3, r1
1000c7c6:	b272      	sxtb	r2, r6
1000c7c8:	4013      	ands	r3, r2
1000c7ca:	4059      	eors	r1, r3
1000c7cc:	4653      	mov	r3, sl
1000c7ce:	7019      	strb	r1, [r3, #0]
						*d2 = (*d2 & ~m) | (col2 & m); // set 1 pixel
1000c7d0:	464b      	mov	r3, r9
1000c7d2:	4659      	mov	r1, fp
1000c7d4:	781b      	ldrb	r3, [r3, #0]
1000c7d6:	b25b      	sxtb	r3, r3
1000c7d8:	4059      	eors	r1, r3
1000c7da:	400a      	ands	r2, r1
1000c7dc:	4053      	eors	r3, r2
1000c7de:	464a      	mov	r2, r9
1000c7e0:	7013      	strb	r3, [r2, #0]
						if (dx == 8) { i--; break; } // x is aligned
1000c7e2:	2807      	cmp	r0, #7
1000c7e4:	d101      	bne.n	1000c7ea <_Z8DrawRectP7sCanvasiiiih+0x32e>
1000c7e6:	f000 fd13 	bl	1000d210 <_Z8DrawRectP7sCanvasiiiih+0xd54>
					for (; i > 0; i--)
1000c7ea:	9d05      	ldr	r5, [sp, #20]
1000c7ec:	1e6c      	subs	r4, r5, #1
1000c7ee:	2d01      	cmp	r5, #1
1000c7f0:	d0d4      	beq.n	1000c79c <_Z8DrawRectP7sCanvasiiiih+0x2e0>
						*d = (*d & ~m) | (col & m); // set 1 pixel
1000c7f2:	4653      	mov	r3, sl
1000c7f4:	003a      	movs	r2, r7
1000c7f6:	781b      	ldrb	r3, [r3, #0]
1000c7f8:	990a      	ldr	r1, [sp, #40]	; 0x28
1000c7fa:	b25b      	sxtb	r3, r3
1000c7fc:	405a      	eors	r2, r3
1000c7fe:	400a      	ands	r2, r1
1000c800:	4053      	eors	r3, r2
1000c802:	4652      	mov	r2, sl
1000c804:	7013      	strb	r3, [r2, #0]
						*d2 = (*d2 & ~m) | (col2 & m); // set 1 pixel
1000c806:	464b      	mov	r3, r9
1000c808:	465a      	mov	r2, fp
1000c80a:	781b      	ldrb	r3, [r3, #0]
1000c80c:	b25b      	sxtb	r3, r3
1000c80e:	405a      	eors	r2, r3
1000c810:	400a      	ands	r2, r1
1000c812:	4053      	eors	r3, r2
1000c814:	464a      	mov	r2, r9
1000c816:	7013      	strb	r3, [r2, #0]
						if (dx == 8) { i--; break; } // x is aligned
1000c818:	2806      	cmp	r0, #6
1000c81a:	d078      	beq.n	1000c90e <_Z8DrawRectP7sCanvasiiiih+0x452>
						m >>= 1; // shift mask
1000c81c:	10b1      	asrs	r1, r6, #2
					for (; i > 0; i--)
1000c81e:	1eac      	subs	r4, r5, #2
1000c820:	2d02      	cmp	r5, #2
1000c822:	d0bb      	beq.n	1000c79c <_Z8DrawRectP7sCanvasiiiih+0x2e0>
						*d = (*d & ~m) | (col & m); // set 1 pixel
1000c824:	4653      	mov	r3, sl
1000c826:	2200      	movs	r2, #0
1000c828:	569a      	ldrsb	r2, [r3, r2]
1000c82a:	003b      	movs	r3, r7
1000c82c:	4053      	eors	r3, r2
1000c82e:	400b      	ands	r3, r1
1000c830:	405a      	eors	r2, r3
1000c832:	4653      	mov	r3, sl
1000c834:	701a      	strb	r2, [r3, #0]
						*d2 = (*d2 & ~m) | (col2 & m); // set 1 pixel
1000c836:	464b      	mov	r3, r9
1000c838:	465a      	mov	r2, fp
1000c83a:	781b      	ldrb	r3, [r3, #0]
1000c83c:	b25b      	sxtb	r3, r3
1000c83e:	405a      	eors	r2, r3
1000c840:	400a      	ands	r2, r1
1000c842:	4053      	eors	r3, r2
1000c844:	464a      	mov	r2, r9
1000c846:	7013      	strb	r3, [r2, #0]
						if (dx == 8) { i--; break; } // x is aligned
1000c848:	2805      	cmp	r0, #5
1000c84a:	d060      	beq.n	1000c90e <_Z8DrawRectP7sCanvasiiiih+0x452>
						m >>= 1; // shift mask
1000c84c:	10f1      	asrs	r1, r6, #3
					for (; i > 0; i--)
1000c84e:	1eec      	subs	r4, r5, #3
1000c850:	2d03      	cmp	r5, #3
1000c852:	d0a3      	beq.n	1000c79c <_Z8DrawRectP7sCanvasiiiih+0x2e0>
						*d = (*d & ~m) | (col & m); // set 1 pixel
1000c854:	4653      	mov	r3, sl
1000c856:	2200      	movs	r2, #0
1000c858:	569a      	ldrsb	r2, [r3, r2]
1000c85a:	003b      	movs	r3, r7
1000c85c:	4053      	eors	r3, r2
1000c85e:	400b      	ands	r3, r1
1000c860:	405a      	eors	r2, r3
1000c862:	4653      	mov	r3, sl
1000c864:	701a      	strb	r2, [r3, #0]
						*d2 = (*d2 & ~m) | (col2 & m); // set 1 pixel
1000c866:	464b      	mov	r3, r9
1000c868:	465a      	mov	r2, fp
1000c86a:	781b      	ldrb	r3, [r3, #0]
1000c86c:	b25b      	sxtb	r3, r3
1000c86e:	405a      	eors	r2, r3
1000c870:	400a      	ands	r2, r1
1000c872:	4053      	eors	r3, r2
1000c874:	464a      	mov	r2, r9
1000c876:	7013      	strb	r3, [r2, #0]
						if (dx == 8) { i--; break; } // x is aligned
1000c878:	2804      	cmp	r0, #4
1000c87a:	d048      	beq.n	1000c90e <_Z8DrawRectP7sCanvasiiiih+0x452>
						m >>= 1; // shift mask
1000c87c:	1131      	asrs	r1, r6, #4
					for (; i > 0; i--)
1000c87e:	1f2c      	subs	r4, r5, #4
1000c880:	2d04      	cmp	r5, #4
1000c882:	d08b      	beq.n	1000c79c <_Z8DrawRectP7sCanvasiiiih+0x2e0>
						*d = (*d & ~m) | (col & m); // set 1 pixel
1000c884:	4653      	mov	r3, sl
1000c886:	2200      	movs	r2, #0
1000c888:	569a      	ldrsb	r2, [r3, r2]
1000c88a:	003b      	movs	r3, r7
1000c88c:	4053      	eors	r3, r2
1000c88e:	400b      	ands	r3, r1
1000c890:	405a      	eors	r2, r3
1000c892:	4653      	mov	r3, sl
1000c894:	701a      	strb	r2, [r3, #0]
						*d2 = (*d2 & ~m) | (col2 & m); // set 1 pixel
1000c896:	464b      	mov	r3, r9
1000c898:	465a      	mov	r2, fp
1000c89a:	781b      	ldrb	r3, [r3, #0]
1000c89c:	b25b      	sxtb	r3, r3
1000c89e:	405a      	eors	r2, r3
1000c8a0:	400a      	ands	r2, r1
1000c8a2:	4053      	eors	r3, r2
1000c8a4:	464a      	mov	r2, r9
						dx++; // shift x position
1000c8a6:	1d41      	adds	r1, r0, #5
						*d2 = (*d2 & ~m) | (col2 & m); // set 1 pixel
1000c8a8:	7013      	strb	r3, [r2, #0]
						if (dx == 8) { i--; break; } // x is aligned
1000c8aa:	2803      	cmp	r0, #3
1000c8ac:	d02f      	beq.n	1000c90e <_Z8DrawRectP7sCanvasiiiih+0x452>
						m >>= 1; // shift mask
1000c8ae:	1170      	asrs	r0, r6, #5
					for (; i > 0; i--)
1000c8b0:	1f6c      	subs	r4, r5, #5
1000c8b2:	2d05      	cmp	r5, #5
1000c8b4:	d100      	bne.n	1000c8b8 <_Z8DrawRectP7sCanvasiiiih+0x3fc>
1000c8b6:	e771      	b.n	1000c79c <_Z8DrawRectP7sCanvasiiiih+0x2e0>
						*d = (*d & ~m) | (col & m); // set 1 pixel
1000c8b8:	4653      	mov	r3, sl
1000c8ba:	2200      	movs	r2, #0
1000c8bc:	569a      	ldrsb	r2, [r3, r2]
1000c8be:	003b      	movs	r3, r7
1000c8c0:	4053      	eors	r3, r2
1000c8c2:	4003      	ands	r3, r0
1000c8c4:	405a      	eors	r2, r3
1000c8c6:	4653      	mov	r3, sl
1000c8c8:	701a      	strb	r2, [r3, #0]
						*d2 = (*d2 & ~m) | (col2 & m); // set 1 pixel
1000c8ca:	464b      	mov	r3, r9
1000c8cc:	465a      	mov	r2, fp
1000c8ce:	781b      	ldrb	r3, [r3, #0]
1000c8d0:	b25b      	sxtb	r3, r3
1000c8d2:	405a      	eors	r2, r3
1000c8d4:	4010      	ands	r0, r2
1000c8d6:	464a      	mov	r2, r9
1000c8d8:	4043      	eors	r3, r0
1000c8da:	7013      	strb	r3, [r2, #0]
						if (dx == 8) { i--; break; } // x is aligned
1000c8dc:	2906      	cmp	r1, #6
1000c8de:	d116      	bne.n	1000c90e <_Z8DrawRectP7sCanvasiiiih+0x452>
						m >>= 1; // shift mask
1000c8e0:	11b1      	asrs	r1, r6, #6
					for (; i > 0; i--)
1000c8e2:	1fac      	subs	r4, r5, #6
1000c8e4:	2d06      	cmp	r5, #6
1000c8e6:	d100      	bne.n	1000c8ea <_Z8DrawRectP7sCanvasiiiih+0x42e>
1000c8e8:	e758      	b.n	1000c79c <_Z8DrawRectP7sCanvasiiiih+0x2e0>
						*d = (*d & ~m) | (col & m); // set 1 pixel
1000c8ea:	4653      	mov	r3, sl
1000c8ec:	2200      	movs	r2, #0
1000c8ee:	569a      	ldrsb	r2, [r3, r2]
1000c8f0:	003b      	movs	r3, r7
1000c8f2:	4053      	eors	r3, r2
1000c8f4:	400b      	ands	r3, r1
1000c8f6:	405a      	eors	r2, r3
1000c8f8:	4653      	mov	r3, sl
1000c8fa:	701a      	strb	r2, [r3, #0]
						*d2 = (*d2 & ~m) | (col2 & m); // set 1 pixel
1000c8fc:	464b      	mov	r3, r9
1000c8fe:	465a      	mov	r2, fp
1000c900:	781b      	ldrb	r3, [r3, #0]
1000c902:	b25b      	sxtb	r3, r3
1000c904:	405a      	eors	r2, r3
1000c906:	400a      	ands	r2, r1
1000c908:	4053      	eors	r3, r2
1000c90a:	464a      	mov	r2, r9
1000c90c:	7013      	strb	r3, [r2, #0]
						if (dx == 8) { i--; break; } // x is aligned
1000c90e:	4653      	mov	r3, sl
1000c910:	1c58      	adds	r0, r3, #1
1000c912:	464b      	mov	r3, r9
1000c914:	3c01      	subs	r4, #1
					d2++;
1000c916:	3301      	adds	r3, #1
1000c918:	9300      	str	r3, [sp, #0]
				for (; i > 7; i -= 8)
1000c91a:	2c07      	cmp	r4, #7
1000c91c:	dd00      	ble.n	1000c920 <_Z8DrawRectP7sCanvasiiiih+0x464>
1000c91e:	e698      	b.n	1000c652 <_Z8DrawRectP7sCanvasiiiih+0x196>
1000c920:	001d      	movs	r5, r3
1000c922:	0006      	movs	r6, r0
1000c924:	e6c1      	b.n	1000c6aa <_Z8DrawRectP7sCanvasiiiih+0x1ee>
			int wb = canvas->wb;
1000c926:	6903      	ldr	r3, [r0, #16]
			u8* d = canvas->img + x/4 + y*wb;
1000c928:	108e      	asrs	r6, r1, #2
1000c92a:	435a      	muls	r2, r3
1000c92c:	18b2      	adds	r2, r6, r2
1000c92e:	6806      	ldr	r6, [r0, #0]
			int wb = canvas->wb;
1000c930:	9302      	str	r3, [sp, #8]
			u8* d = canvas->img + x/4 + y*wb;
1000c932:	18b6      	adds	r6, r6, r2
			col = (col << 6) | (col << 4) | (col << 2) | col;
1000c934:	4643      	mov	r3, r8
1000c936:	4642      	mov	r2, r8
1000c938:	019b      	lsls	r3, r3, #6
1000c93a:	0112      	lsls	r2, r2, #4
1000c93c:	4313      	orrs	r3, r2
1000c93e:	4642      	mov	r2, r8
1000c940:	4313      	orrs	r3, r2
1000c942:	0092      	lsls	r2, r2, #2
1000c944:	4313      	orrs	r3, r2
1000c946:	b25f      	sxtb	r7, r3
1000c948:	b2db      	uxtb	r3, r3
1000c94a:	9303      	str	r3, [sp, #12]
				dx = x & 3;
1000c94c:	2303      	movs	r3, #3
					m = 0xc0 >> (dx*2); // mask of 2 color bits
1000c94e:	22c0      	movs	r2, #192	; 0xc0
				dx = x & 3;
1000c950:	400b      	ands	r3, r1
1000c952:	9300      	str	r3, [sp, #0]
					m = 0xc0 >> (dx*2); // mask of 2 color bits
1000c954:	005b      	lsls	r3, r3, #1
1000c956:	411a      	asrs	r2, r3
1000c958:	0013      	movs	r3, r2
1000c95a:	9205      	str	r2, [sp, #20]
					for (; i > 0; i--)
1000c95c:	464a      	mov	r2, r9
1000c95e:	3a01      	subs	r2, #1
1000c960:	9204      	str	r2, [sp, #16]
						*d = (*d & ~m) | (col & m); // set 1 pixel
1000c962:	109a      	asrs	r2, r3, #2
1000c964:	9206      	str	r2, [sp, #24]
					for (; i > 0; i--)
1000c966:	464a      	mov	r2, r9
						*d = (*d & ~m) | (col & m); // set 1 pixel
1000c968:	111b      	asrs	r3, r3, #4
1000c96a:	9308      	str	r3, [sp, #32]
				if (dx != 0)
1000c96c:	9b00      	ldr	r3, [sp, #0]
					for (; i > 0; i--)
1000c96e:	3a02      	subs	r2, #2
					*d = (*d & ~m) | (col & m); // set 1 pixel
1000c970:	46b8      	mov	r8, r7
					for (; i > 0; i--)
1000c972:	9207      	str	r2, [sp, #28]
				if (dx != 0)
1000c974:	2b00      	cmp	r3, #0
1000c976:	d144      	bne.n	1000ca02 <_Z8DrawRectP7sCanvasiiiih+0x546>
				for (; i > 3; i -= 4) *d++ = col;
1000c978:	464b      	mov	r3, r9
1000c97a:	0035      	movs	r5, r6
1000c97c:	464c      	mov	r4, r9
1000c97e:	2b03      	cmp	r3, #3
1000c980:	dd17      	ble.n	1000c9b2 <_Z8DrawRectP7sCanvasiiiih+0x4f6>
1000c982:	1f23      	subs	r3, r4, #4
1000c984:	469b      	mov	fp, r3
1000c986:	089b      	lsrs	r3, r3, #2
1000c988:	2701      	movs	r7, #1
1000c98a:	9301      	str	r3, [sp, #4]
1000c98c:	2c03      	cmp	r4, #3
1000c98e:	dd00      	ble.n	1000c992 <_Z8DrawRectP7sCanvasiiiih+0x4d6>
1000c990:	1c5f      	adds	r7, r3, #1
1000c992:	0028      	movs	r0, r5
1000c994:	003a      	movs	r2, r7
1000c996:	9903      	ldr	r1, [sp, #12]
1000c998:	f7f3 fff8 	bl	1000098c <__wrap_memset>
1000c99c:	19ed      	adds	r5, r5, r7
1000c99e:	2300      	movs	r3, #0
1000c9a0:	2c03      	cmp	r4, #3
1000c9a2:	dd02      	ble.n	1000c9aa <_Z8DrawRectP7sCanvasiiiih+0x4ee>
1000c9a4:	9b01      	ldr	r3, [sp, #4]
1000c9a6:	009b      	lsls	r3, r3, #2
1000c9a8:	425b      	negs	r3, r3
1000c9aa:	445b      	add	r3, fp
1000c9ac:	001c      	movs	r4, r3
				for (; i > 0; i--)
1000c9ae:	2c00      	cmp	r4, #0
1000c9b0:	d019      	beq.n	1000c9e6 <_Z8DrawRectP7sCanvasiiiih+0x52a>
					*d = (*d & ~m) | (col & m); // set 1 pixel
1000c9b2:	2300      	movs	r3, #0
1000c9b4:	4642      	mov	r2, r8
1000c9b6:	213f      	movs	r1, #63	; 0x3f
1000c9b8:	56eb      	ldrsb	r3, [r5, r3]
1000c9ba:	405a      	eors	r2, r3
1000c9bc:	438a      	bics	r2, r1
1000c9be:	4053      	eors	r3, r2
1000c9c0:	b2da      	uxtb	r2, r3
				for (; i > 0; i--)
1000c9c2:	1e61      	subs	r1, r4, #1
1000c9c4:	2c01      	cmp	r4, #1
1000c9c6:	d00d      	beq.n	1000c9e4 <_Z8DrawRectP7sCanvasiiiih+0x528>
					*d = (*d & ~m) | (col & m); // set 1 pixel
1000c9c8:	4642      	mov	r2, r8
1000c9ca:	2030      	movs	r0, #48	; 0x30
1000c9cc:	405a      	eors	r2, r3
1000c9ce:	4002      	ands	r2, r0
1000c9d0:	4053      	eors	r3, r2
1000c9d2:	b2da      	uxtb	r2, r3
				for (; i > 0; i--)
1000c9d4:	2901      	cmp	r1, #1
1000c9d6:	d005      	beq.n	1000c9e4 <_Z8DrawRectP7sCanvasiiiih+0x528>
					*d = (*d & ~m) | (col & m); // set 1 pixel
1000c9d8:	4641      	mov	r1, r8
1000c9da:	220c      	movs	r2, #12
1000c9dc:	4059      	eors	r1, r3
1000c9de:	400a      	ands	r2, r1
1000c9e0:	405a      	eors	r2, r3
1000c9e2:	b2d2      	uxtb	r2, r2
				for (; i > 0; i--)
1000c9e4:	702a      	strb	r2, [r5, #0]
				d = d0 + wb;
1000c9e6:	9b02      	ldr	r3, [sp, #8]
1000c9e8:	469c      	mov	ip, r3
			for (; h > 0; h--)
1000c9ea:	2301      	movs	r3, #1
1000c9ec:	425b      	negs	r3, r3
				d = d0 + wb;
1000c9ee:	4466      	add	r6, ip
			for (; h > 0; h--)
1000c9f0:	469c      	mov	ip, r3
1000c9f2:	44e2      	add	sl, ip
1000c9f4:	4653      	mov	r3, sl
1000c9f6:	2b00      	cmp	r3, #0
1000c9f8:	d100      	bne.n	1000c9fc <_Z8DrawRectP7sCanvasiiiih+0x540>
1000c9fa:	e5ce      	b.n	1000c59a <_Z8DrawRectP7sCanvasiiiih+0xde>
				if (dx != 0)
1000c9fc:	9b00      	ldr	r3, [sp, #0]
1000c9fe:	2b00      	cmp	r3, #0
1000ca00:	d0ba      	beq.n	1000c978 <_Z8DrawRectP7sCanvasiiiih+0x4bc>
						*d = (*d & ~m) | (col & m); // set 1 pixel
1000ca02:	2300      	movs	r3, #0
1000ca04:	4642      	mov	r2, r8
1000ca06:	56f3      	ldrsb	r3, [r6, r3]
1000ca08:	9905      	ldr	r1, [sp, #20]
1000ca0a:	405a      	eors	r2, r3
1000ca0c:	400a      	ands	r2, r1
						if (dx == 4) { i--; break; } // x is aligned
1000ca0e:	9900      	ldr	r1, [sp, #0]
						*d = (*d & ~m) | (col & m); // set 1 pixel
1000ca10:	4053      	eors	r3, r2
1000ca12:	b25a      	sxtb	r2, r3
1000ca14:	b2db      	uxtb	r3, r3
						if (dx == 4) { i--; break; } // x is aligned
1000ca16:	2903      	cmp	r1, #3
1000ca18:	d100      	bne.n	1000ca1c <_Z8DrawRectP7sCanvasiiiih+0x560>
1000ca1a:	e3fc      	b.n	1000d216 <_Z8DrawRectP7sCanvasiiiih+0xd5a>
					for (; i > 0; i--)
1000ca1c:	9804      	ldr	r0, [sp, #16]
1000ca1e:	2800      	cmp	r0, #0
1000ca20:	d100      	bne.n	1000ca24 <_Z8DrawRectP7sCanvasiiiih+0x568>
1000ca22:	e1e9      	b.n	1000cdf8 <_Z8DrawRectP7sCanvasiiiih+0x93c>
						*d = (*d & ~m) | (col & m); // set 1 pixel
1000ca24:	4643      	mov	r3, r8
1000ca26:	9806      	ldr	r0, [sp, #24]
1000ca28:	4053      	eors	r3, r2
1000ca2a:	4003      	ands	r3, r0
1000ca2c:	405a      	eors	r2, r3
1000ca2e:	b2d3      	uxtb	r3, r2
						if (dx == 4) { i--; break; } // x is aligned
1000ca30:	2902      	cmp	r1, #2
1000ca32:	d100      	bne.n	1000ca36 <_Z8DrawRectP7sCanvasiiiih+0x57a>
1000ca34:	e3f3      	b.n	1000d21e <_Z8DrawRectP7sCanvasiiiih+0xd62>
					for (; i > 0; i--)
1000ca36:	9c07      	ldr	r4, [sp, #28]
1000ca38:	2c00      	cmp	r4, #0
1000ca3a:	d100      	bne.n	1000ca3e <_Z8DrawRectP7sCanvasiiiih+0x582>
1000ca3c:	e1dc      	b.n	1000cdf8 <_Z8DrawRectP7sCanvasiiiih+0x93c>
						*d = (*d & ~m) | (col & m); // set 1 pixel
1000ca3e:	4643      	mov	r3, r8
1000ca40:	9908      	ldr	r1, [sp, #32]
1000ca42:	4053      	eors	r3, r2
1000ca44:	400b      	ands	r3, r1
1000ca46:	4053      	eors	r3, r2
1000ca48:	b2db      	uxtb	r3, r3
						if (dx == 4) { i--; break; } // x is aligned
1000ca4a:	3c01      	subs	r4, #1
1000ca4c:	7033      	strb	r3, [r6, #0]
					d++;
1000ca4e:	1c75      	adds	r5, r6, #1
				for (; i > 3; i -= 4) *d++ = col;
1000ca50:	2c03      	cmp	r4, #3
1000ca52:	dc96      	bgt.n	1000c982 <_Z8DrawRectP7sCanvasiiiih+0x4c6>
1000ca54:	e7ab      	b.n	1000c9ae <_Z8DrawRectP7sCanvasiiiih+0x4f2>
			int wb = canvas->wb;
1000ca56:	6903      	ldr	r3, [r0, #16]
1000ca58:	001c      	movs	r4, r3
			u8* d = canvas->img + x/8 + y*wb;
1000ca5a:	4362      	muls	r2, r4
			int wb = canvas->wb;
1000ca5c:	9302      	str	r3, [sp, #8]
			u8* d = canvas->img + x/8 + y*wb;
1000ca5e:	10cb      	asrs	r3, r1, #3
1000ca60:	189a      	adds	r2, r3, r2
1000ca62:	6803      	ldr	r3, [r0, #0]
1000ca64:	469b      	mov	fp, r3
			col = (col<<7)|(col<<6)|(col<<5)|(col<<4)|(col<<3)|(col<<2)|(col<<1)|col;
1000ca66:	4643      	mov	r3, r8
			u8* d = canvas->img + x/8 + y*wb;
1000ca68:	4493      	add	fp, r2
			col = (col<<7)|(col<<6)|(col<<5)|(col<<4)|(col<<3)|(col<<2)|(col<<1)|col;
1000ca6a:	4642      	mov	r2, r8
1000ca6c:	01db      	lsls	r3, r3, #7
1000ca6e:	0192      	lsls	r2, r2, #6
1000ca70:	4313      	orrs	r3, r2
1000ca72:	4642      	mov	r2, r8
1000ca74:	4313      	orrs	r3, r2
1000ca76:	0152      	lsls	r2, r2, #5
1000ca78:	4313      	orrs	r3, r2
1000ca7a:	4642      	mov	r2, r8
1000ca7c:	0112      	lsls	r2, r2, #4
1000ca7e:	4313      	orrs	r3, r2
1000ca80:	4642      	mov	r2, r8
1000ca82:	00d2      	lsls	r2, r2, #3
1000ca84:	4313      	orrs	r3, r2
1000ca86:	4642      	mov	r2, r8
1000ca88:	0092      	lsls	r2, r2, #2
1000ca8a:	4313      	orrs	r3, r2
1000ca8c:	4642      	mov	r2, r8
1000ca8e:	0052      	lsls	r2, r2, #1
1000ca90:	4313      	orrs	r3, r2
1000ca92:	b25d      	sxtb	r5, r3
1000ca94:	b2db      	uxtb	r3, r3
1000ca96:	9303      	str	r3, [sp, #12]
				dx = x & 7;
1000ca98:	2307      	movs	r3, #7
1000ca9a:	400b      	ands	r3, r1
1000ca9c:	001a      	movs	r2, r3
1000ca9e:	9300      	str	r3, [sp, #0]
					m = 0x80 >> dx; // mask of 1 color bit
1000caa0:	2380      	movs	r3, #128	; 0x80
1000caa2:	4113      	asrs	r3, r2
					for (; i > 0; i--)
1000caa4:	464a      	mov	r2, r9
1000caa6:	3a01      	subs	r2, #1
1000caa8:	9205      	str	r2, [sp, #20]
						*d = (*d & ~m) | (col & m); // set 1 pixel
1000caaa:	105a      	asrs	r2, r3, #1
1000caac:	9206      	str	r2, [sp, #24]
					for (; i > 0; i--)
1000caae:	464a      	mov	r2, r9
1000cab0:	3a02      	subs	r2, #2
1000cab2:	9207      	str	r2, [sp, #28]
						*d = (*d & ~m) | (col & m); // set 1 pixel
1000cab4:	109a      	asrs	r2, r3, #2
1000cab6:	9208      	str	r2, [sp, #32]
					for (; i > 0; i--)
1000cab8:	464a      	mov	r2, r9
1000caba:	3a03      	subs	r2, #3
1000cabc:	9209      	str	r2, [sp, #36]	; 0x24
						*d = (*d & ~m) | (col & m); // set 1 pixel
1000cabe:	10da      	asrs	r2, r3, #3
1000cac0:	920a      	str	r2, [sp, #40]	; 0x28
					for (; i > 0; i--)
1000cac2:	464a      	mov	r2, r9
1000cac4:	3a04      	subs	r2, #4
1000cac6:	920b      	str	r2, [sp, #44]	; 0x2c
						*d = (*d & ~m) | (col & m); // set 1 pixel
1000cac8:	111a      	asrs	r2, r3, #4
1000caca:	920c      	str	r2, [sp, #48]	; 0x30
					for (; i > 0; i--)
1000cacc:	464a      	mov	r2, r9
1000cace:	3a05      	subs	r2, #5
1000cad0:	920d      	str	r2, [sp, #52]	; 0x34
						*d = (*d & ~m) | (col & m); // set 1 pixel
1000cad2:	115a      	asrs	r2, r3, #5
1000cad4:	920e      	str	r2, [sp, #56]	; 0x38
					for (; i > 0; i--)
1000cad6:	464a      	mov	r2, r9
					m = 0x80 >> dx; // mask of 1 color bit
1000cad8:	9304      	str	r3, [sp, #16]
						*d = (*d & ~m) | (col & m); // set 1 pixel
1000cada:	119b      	asrs	r3, r3, #6
1000cadc:	9310      	str	r3, [sp, #64]	; 0x40
				if (dx != 0)
1000cade:	9b00      	ldr	r3, [sp, #0]
					for (; i > 0; i--)
1000cae0:	3a06      	subs	r2, #6
					*d = (*d & ~m) | (col & m); // set 1 pixel
1000cae2:	465f      	mov	r7, fp
					for (; i > 0; i--)
1000cae4:	920f      	str	r2, [sp, #60]	; 0x3c
				if (dx != 0)
1000cae6:	2b00      	cmp	r3, #0
1000cae8:	d169      	bne.n	1000cbbe <_Z8DrawRectP7sCanvasiiiih+0x702>
				for (; i > 7; i -= 8) *d++ = col;
1000caea:	464b      	mov	r3, r9
1000caec:	003e      	movs	r6, r7
1000caee:	464c      	mov	r4, r9
1000caf0:	2b07      	cmp	r3, #7
1000caf2:	dd1c      	ble.n	1000cb2e <_Z8DrawRectP7sCanvasiiiih+0x672>
1000caf4:	2308      	movs	r3, #8
1000caf6:	425b      	negs	r3, r3
1000caf8:	469b      	mov	fp, r3
1000cafa:	44a3      	add	fp, r4
1000cafc:	465b      	mov	r3, fp
1000cafe:	2201      	movs	r2, #1
1000cb00:	08db      	lsrs	r3, r3, #3
1000cb02:	4690      	mov	r8, r2
1000cb04:	9301      	str	r3, [sp, #4]
1000cb06:	2c07      	cmp	r4, #7
1000cb08:	dd01      	ble.n	1000cb0e <_Z8DrawRectP7sCanvasiiiih+0x652>
1000cb0a:	3301      	adds	r3, #1
1000cb0c:	4698      	mov	r8, r3
1000cb0e:	0030      	movs	r0, r6
1000cb10:	4642      	mov	r2, r8
1000cb12:	9903      	ldr	r1, [sp, #12]
1000cb14:	f7f3 ff3a 	bl	1000098c <__wrap_memset>
1000cb18:	4446      	add	r6, r8
1000cb1a:	2300      	movs	r3, #0
1000cb1c:	2c07      	cmp	r4, #7
1000cb1e:	dd02      	ble.n	1000cb26 <_Z8DrawRectP7sCanvasiiiih+0x66a>
1000cb20:	9b01      	ldr	r3, [sp, #4]
1000cb22:	00db      	lsls	r3, r3, #3
1000cb24:	425b      	negs	r3, r3
1000cb26:	445b      	add	r3, fp
1000cb28:	001c      	movs	r4, r3
				for (; i > 0; i--)
1000cb2a:	2c00      	cmp	r4, #0
1000cb2c:	d039      	beq.n	1000cba2 <_Z8DrawRectP7sCanvasiiiih+0x6e6>
					*d = (*d & ~m) | (col & m); // set 1 pixel
1000cb2e:	2300      	movs	r3, #0
1000cb30:	002a      	movs	r2, r5
1000cb32:	217f      	movs	r1, #127	; 0x7f
1000cb34:	56f3      	ldrsb	r3, [r6, r3]
1000cb36:	405a      	eors	r2, r3
1000cb38:	438a      	bics	r2, r1
1000cb3a:	4053      	eors	r3, r2
1000cb3c:	b2da      	uxtb	r2, r3
				for (; i > 0; i--)
1000cb3e:	2c01      	cmp	r4, #1
1000cb40:	d02e      	beq.n	1000cba0 <_Z8DrawRectP7sCanvasiiiih+0x6e4>
					*d = (*d & ~m) | (col & m); // set 1 pixel
1000cb42:	002a      	movs	r2, r5
1000cb44:	393f      	subs	r1, #63	; 0x3f
1000cb46:	405a      	eors	r2, r3
1000cb48:	400a      	ands	r2, r1
1000cb4a:	4053      	eors	r3, r2
1000cb4c:	b2da      	uxtb	r2, r3
				for (; i > 0; i--)
1000cb4e:	2c02      	cmp	r4, #2
1000cb50:	d026      	beq.n	1000cba0 <_Z8DrawRectP7sCanvasiiiih+0x6e4>
					*d = (*d & ~m) | (col & m); // set 1 pixel
1000cb52:	0029      	movs	r1, r5
1000cb54:	2220      	movs	r2, #32
1000cb56:	4059      	eors	r1, r3
1000cb58:	400a      	ands	r2, r1
1000cb5a:	4053      	eors	r3, r2
1000cb5c:	b2da      	uxtb	r2, r3
				for (; i > 0; i--)
1000cb5e:	2c03      	cmp	r4, #3
1000cb60:	d01e      	beq.n	1000cba0 <_Z8DrawRectP7sCanvasiiiih+0x6e4>
					*d = (*d & ~m) | (col & m); // set 1 pixel
1000cb62:	0029      	movs	r1, r5
1000cb64:	2210      	movs	r2, #16
1000cb66:	4059      	eors	r1, r3
1000cb68:	400a      	ands	r2, r1
1000cb6a:	4053      	eors	r3, r2
1000cb6c:	b2da      	uxtb	r2, r3
				for (; i > 0; i--)
1000cb6e:	2c04      	cmp	r4, #4
1000cb70:	d016      	beq.n	1000cba0 <_Z8DrawRectP7sCanvasiiiih+0x6e4>
					*d = (*d & ~m) | (col & m); // set 1 pixel
1000cb72:	0029      	movs	r1, r5
1000cb74:	2208      	movs	r2, #8
1000cb76:	4059      	eors	r1, r3
1000cb78:	400a      	ands	r2, r1
1000cb7a:	4053      	eors	r3, r2
1000cb7c:	b2da      	uxtb	r2, r3
				for (; i > 0; i--)
1000cb7e:	1f61      	subs	r1, r4, #5
1000cb80:	2c05      	cmp	r4, #5
1000cb82:	d00d      	beq.n	1000cba0 <_Z8DrawRectP7sCanvasiiiih+0x6e4>
					*d = (*d & ~m) | (col & m); // set 1 pixel
1000cb84:	0028      	movs	r0, r5
1000cb86:	2204      	movs	r2, #4
1000cb88:	4058      	eors	r0, r3
1000cb8a:	4002      	ands	r2, r0
1000cb8c:	4053      	eors	r3, r2
1000cb8e:	b2da      	uxtb	r2, r3
				for (; i > 0; i--)
1000cb90:	2901      	cmp	r1, #1
1000cb92:	d005      	beq.n	1000cba0 <_Z8DrawRectP7sCanvasiiiih+0x6e4>
					*d = (*d & ~m) | (col & m); // set 1 pixel
1000cb94:	0029      	movs	r1, r5
1000cb96:	2202      	movs	r2, #2
1000cb98:	4059      	eors	r1, r3
1000cb9a:	400a      	ands	r2, r1
1000cb9c:	405a      	eors	r2, r3
1000cb9e:	b2d2      	uxtb	r2, r2
				for (; i > 0; i--)
1000cba0:	7032      	strb	r2, [r6, #0]
				d = d0 + wb;
1000cba2:	9b02      	ldr	r3, [sp, #8]
1000cba4:	469c      	mov	ip, r3
			for (; h > 0; h--)
1000cba6:	2301      	movs	r3, #1
1000cba8:	425b      	negs	r3, r3
				d = d0 + wb;
1000cbaa:	4467      	add	r7, ip
			for (; h > 0; h--)
1000cbac:	469c      	mov	ip, r3
1000cbae:	44e2      	add	sl, ip
1000cbb0:	4653      	mov	r3, sl
1000cbb2:	2b00      	cmp	r3, #0
1000cbb4:	d100      	bne.n	1000cbb8 <_Z8DrawRectP7sCanvasiiiih+0x6fc>
1000cbb6:	e4f0      	b.n	1000c59a <_Z8DrawRectP7sCanvasiiiih+0xde>
				if (dx != 0)
1000cbb8:	9b00      	ldr	r3, [sp, #0]
1000cbba:	2b00      	cmp	r3, #0
1000cbbc:	d095      	beq.n	1000caea <_Z8DrawRectP7sCanvasiiiih+0x62e>
						*d = (*d & ~m) | (col & m); // set 1 pixel
1000cbbe:	2200      	movs	r2, #0
1000cbc0:	002b      	movs	r3, r5
1000cbc2:	56ba      	ldrsb	r2, [r7, r2]
1000cbc4:	9904      	ldr	r1, [sp, #16]
1000cbc6:	4053      	eors	r3, r2
1000cbc8:	400b      	ands	r3, r1
						if (dx == 8) { i--; break; } // x is aligned
1000cbca:	9900      	ldr	r1, [sp, #0]
						*d = (*d & ~m) | (col & m); // set 1 pixel
1000cbcc:	405a      	eors	r2, r3
1000cbce:	b253      	sxtb	r3, r2
1000cbd0:	b2d2      	uxtb	r2, r2
						if (dx == 8) { i--; break; } // x is aligned
1000cbd2:	2907      	cmp	r1, #7
1000cbd4:	d100      	bne.n	1000cbd8 <_Z8DrawRectP7sCanvasiiiih+0x71c>
1000cbd6:	e320      	b.n	1000d21a <_Z8DrawRectP7sCanvasiiiih+0xd5e>
					for (; i > 0; i--)
1000cbd8:	9805      	ldr	r0, [sp, #20]
1000cbda:	2800      	cmp	r0, #0
1000cbdc:	d100      	bne.n	1000cbe0 <_Z8DrawRectP7sCanvasiiiih+0x724>
1000cbde:	e109      	b.n	1000cdf4 <_Z8DrawRectP7sCanvasiiiih+0x938>
						*d = (*d & ~m) | (col & m); // set 1 pixel
1000cbe0:	002a      	movs	r2, r5
1000cbe2:	9806      	ldr	r0, [sp, #24]
1000cbe4:	405a      	eors	r2, r3
1000cbe6:	4002      	ands	r2, r0
1000cbe8:	4053      	eors	r3, r2
1000cbea:	b2da      	uxtb	r2, r3
						if (dx == 8) { i--; break; } // x is aligned
1000cbec:	2906      	cmp	r1, #6
1000cbee:	d100      	bne.n	1000cbf2 <_Z8DrawRectP7sCanvasiiiih+0x736>
1000cbf0:	e317      	b.n	1000d222 <_Z8DrawRectP7sCanvasiiiih+0xd66>
					for (; i > 0; i--)
1000cbf2:	9807      	ldr	r0, [sp, #28]
1000cbf4:	2800      	cmp	r0, #0
1000cbf6:	d100      	bne.n	1000cbfa <_Z8DrawRectP7sCanvasiiiih+0x73e>
1000cbf8:	e0fc      	b.n	1000cdf4 <_Z8DrawRectP7sCanvasiiiih+0x938>
						*d = (*d & ~m) | (col & m); // set 1 pixel
1000cbfa:	002a      	movs	r2, r5
1000cbfc:	9808      	ldr	r0, [sp, #32]
1000cbfe:	405a      	eors	r2, r3
1000cc00:	4002      	ands	r2, r0
1000cc02:	4053      	eors	r3, r2
1000cc04:	b2da      	uxtb	r2, r3
						if (dx == 8) { i--; break; } // x is aligned
1000cc06:	2905      	cmp	r1, #5
1000cc08:	d100      	bne.n	1000cc0c <_Z8DrawRectP7sCanvasiiiih+0x750>
1000cc0a:	e30c      	b.n	1000d226 <_Z8DrawRectP7sCanvasiiiih+0xd6a>
					for (; i > 0; i--)
1000cc0c:	9809      	ldr	r0, [sp, #36]	; 0x24
1000cc0e:	2800      	cmp	r0, #0
1000cc10:	d100      	bne.n	1000cc14 <_Z8DrawRectP7sCanvasiiiih+0x758>
1000cc12:	e0ef      	b.n	1000cdf4 <_Z8DrawRectP7sCanvasiiiih+0x938>
						*d = (*d & ~m) | (col & m); // set 1 pixel
1000cc14:	002a      	movs	r2, r5
1000cc16:	980a      	ldr	r0, [sp, #40]	; 0x28
1000cc18:	405a      	eors	r2, r3
1000cc1a:	4002      	ands	r2, r0
1000cc1c:	4053      	eors	r3, r2
1000cc1e:	b2da      	uxtb	r2, r3
						if (dx == 8) { i--; break; } // x is aligned
1000cc20:	2904      	cmp	r1, #4
1000cc22:	d100      	bne.n	1000cc26 <_Z8DrawRectP7sCanvasiiiih+0x76a>
1000cc24:	e301      	b.n	1000d22a <_Z8DrawRectP7sCanvasiiiih+0xd6e>
					for (; i > 0; i--)
1000cc26:	980b      	ldr	r0, [sp, #44]	; 0x2c
1000cc28:	2800      	cmp	r0, #0
1000cc2a:	d100      	bne.n	1000cc2e <_Z8DrawRectP7sCanvasiiiih+0x772>
1000cc2c:	e0e2      	b.n	1000cdf4 <_Z8DrawRectP7sCanvasiiiih+0x938>
						*d = (*d & ~m) | (col & m); // set 1 pixel
1000cc2e:	002a      	movs	r2, r5
1000cc30:	980c      	ldr	r0, [sp, #48]	; 0x30
1000cc32:	405a      	eors	r2, r3
1000cc34:	4002      	ands	r2, r0
1000cc36:	4053      	eors	r3, r2
1000cc38:	b2da      	uxtb	r2, r3
						if (dx == 8) { i--; break; } // x is aligned
1000cc3a:	2903      	cmp	r1, #3
1000cc3c:	d100      	bne.n	1000cc40 <_Z8DrawRectP7sCanvasiiiih+0x784>
1000cc3e:	e2f6      	b.n	1000d22e <_Z8DrawRectP7sCanvasiiiih+0xd72>
					for (; i > 0; i--)
1000cc40:	980d      	ldr	r0, [sp, #52]	; 0x34
1000cc42:	2800      	cmp	r0, #0
1000cc44:	d100      	bne.n	1000cc48 <_Z8DrawRectP7sCanvasiiiih+0x78c>
1000cc46:	e0d5      	b.n	1000cdf4 <_Z8DrawRectP7sCanvasiiiih+0x938>
						*d = (*d & ~m) | (col & m); // set 1 pixel
1000cc48:	002a      	movs	r2, r5
1000cc4a:	980e      	ldr	r0, [sp, #56]	; 0x38
1000cc4c:	405a      	eors	r2, r3
1000cc4e:	4002      	ands	r2, r0
1000cc50:	4053      	eors	r3, r2
1000cc52:	b2da      	uxtb	r2, r3
						if (dx == 8) { i--; break; } // x is aligned
1000cc54:	2902      	cmp	r1, #2
1000cc56:	d100      	bne.n	1000cc5a <_Z8DrawRectP7sCanvasiiiih+0x79e>
1000cc58:	e2eb      	b.n	1000d232 <_Z8DrawRectP7sCanvasiiiih+0xd76>
					for (; i > 0; i--)
1000cc5a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
1000cc5c:	2c00      	cmp	r4, #0
1000cc5e:	d100      	bne.n	1000cc62 <_Z8DrawRectP7sCanvasiiiih+0x7a6>
1000cc60:	e0c8      	b.n	1000cdf4 <_Z8DrawRectP7sCanvasiiiih+0x938>
						*d = (*d & ~m) | (col & m); // set 1 pixel
1000cc62:	002a      	movs	r2, r5
1000cc64:	9910      	ldr	r1, [sp, #64]	; 0x40
1000cc66:	405a      	eors	r2, r3
1000cc68:	400a      	ands	r2, r1
1000cc6a:	405a      	eors	r2, r3
1000cc6c:	b2d2      	uxtb	r2, r2
						if (dx == 8) { i--; break; } // x is aligned
1000cc6e:	3c01      	subs	r4, #1
1000cc70:	703a      	strb	r2, [r7, #0]
					d++;
1000cc72:	1c7e      	adds	r6, r7, #1
				for (; i > 7; i -= 8) *d++ = col;
1000cc74:	2c07      	cmp	r4, #7
1000cc76:	dd00      	ble.n	1000cc7a <_Z8DrawRectP7sCanvasiiiih+0x7be>
1000cc78:	e73c      	b.n	1000caf4 <_Z8DrawRectP7sCanvasiiiih+0x638>
1000cc7a:	e756      	b.n	1000cb2a <_Z8DrawRectP7sCanvasiiiih+0x66e>
			int wb = canvas->wb;
1000cc7c:	6905      	ldr	r5, [r0, #16]
			u8* d = canvas->img + x + y*wb;
1000cc7e:	464f      	mov	r7, r9
1000cc80:	002b      	movs	r3, r5
1000cc82:	436a      	muls	r2, r5
1000cc84:	4656      	mov	r6, sl
1000cc86:	4645      	mov	r5, r8
1000cc88:	4698      	mov	r8, r3
1000cc8a:	6804      	ldr	r4, [r0, #0]
1000cc8c:	1851      	adds	r1, r2, r1
1000cc8e:	1864      	adds	r4, r4, r1
				for (i = w; i > 0; i--) *d++ = col;
1000cc90:	0020      	movs	r0, r4
1000cc92:	003a      	movs	r2, r7
1000cc94:	0029      	movs	r1, r5
			for (; h > 0; h--)
1000cc96:	3e01      	subs	r6, #1
				for (i = w; i > 0; i--) *d++ = col;
1000cc98:	f7f3 fe78 	bl	1000098c <__wrap_memset>
				d += wb;
1000cc9c:	4444      	add	r4, r8
			for (; h > 0; h--)
1000cc9e:	2e00      	cmp	r6, #0
1000cca0:	d1f6      	bne.n	1000cc90 <_Z8DrawRectP7sCanvasiiiih+0x7d4>
1000cca2:	e47a      	b.n	1000c59a <_Z8DrawRectP7sCanvasiiiih+0xde>
			int wb = canvas->wb;
1000cca4:	6906      	ldr	r6, [r0, #16]
			u8* d = canvas->img + x/8 + y*wb; // pixels
1000cca6:	10cb      	asrs	r3, r1, #3
1000cca8:	0035      	movs	r5, r6
1000ccaa:	001c      	movs	r4, r3
1000ccac:	4355      	muls	r5, r2
1000ccae:	18ed      	adds	r5, r5, r3
1000ccb0:	6803      	ldr	r3, [r0, #0]
			u8* d2 = canvas->img2 + x/8 + (y/8)*wb; // attributes
1000ccb2:	6840      	ldr	r0, [r0, #4]
			u8* d = canvas->img + x/8 + y*wb; // pixels
1000ccb4:	469c      	mov	ip, r3
			u8* d2 = canvas->img2 + x/8 + (y/8)*wb; // attributes
1000ccb6:	10d3      	asrs	r3, r2, #3
1000ccb8:	4373      	muls	r3, r6
1000ccba:	191b      	adds	r3, r3, r4
1000ccbc:	18c3      	adds	r3, r0, r3
1000ccbe:	9300      	str	r3, [sp, #0]
			if ((col & B4) == 0)
1000ccc0:	4643      	mov	r3, r8
			int wb = canvas->wb;
1000ccc2:	9601      	str	r6, [sp, #4]
			u8* d = canvas->img + x/8 + y*wb; // pixels
1000ccc4:	4465      	add	r5, ip
			if ((col & B4) == 0)
1000ccc6:	06db      	lsls	r3, r3, #27
1000ccc8:	d500      	bpl.n	1000cccc <_Z8DrawRectP7sCanvasiiiih+0x810>
1000ccca:	e0aa      	b.n	1000ce22 <_Z8DrawRectP7sCanvasiiiih+0x966>
					dx = x & 7;
1000cccc:	2307      	movs	r3, #7
1000ccce:	400b      	ands	r3, r1
1000ccd0:	0019      	movs	r1, r3
1000ccd2:	9303      	str	r3, [sp, #12]
						m = 0x80 >> dx; // mask of 1 color bit
1000ccd4:	2380      	movs	r3, #128	; 0x80
1000ccd6:	4492      	add	sl, r2
1000ccd8:	410b      	asrs	r3, r1
1000ccda:	4651      	mov	r1, sl
1000ccdc:	9104      	str	r1, [sp, #16]
						for (; i > 0; i--)
1000ccde:	4649      	mov	r1, r9
1000cce0:	3901      	subs	r1, #1
1000cce2:	9107      	str	r1, [sp, #28]
							*d = *d | m; // set 1 pixel
1000cce4:	1059      	asrs	r1, r3, #1
1000cce6:	9109      	str	r1, [sp, #36]	; 0x24
						for (; i > 0; i--)
1000cce8:	4649      	mov	r1, r9
1000ccea:	3902      	subs	r1, #2
1000ccec:	910a      	str	r1, [sp, #40]	; 0x28
							*d = *d | m; // set 1 pixel
1000ccee:	1099      	asrs	r1, r3, #2
1000ccf0:	910c      	str	r1, [sp, #48]	; 0x30
						for (; i > 0; i--)
1000ccf2:	4649      	mov	r1, r9
1000ccf4:	3903      	subs	r1, #3
1000ccf6:	910b      	str	r1, [sp, #44]	; 0x2c
							*d = *d | m; // set 1 pixel
1000ccf8:	10d9      	asrs	r1, r3, #3
1000ccfa:	910d      	str	r1, [sp, #52]	; 0x34
						for (; i > 0; i--)
1000ccfc:	4649      	mov	r1, r9
1000ccfe:	3904      	subs	r1, #4
1000cd00:	910e      	str	r1, [sp, #56]	; 0x38
							*d = *d | m; // set 1 pixel
1000cd02:	1119      	asrs	r1, r3, #4
1000cd04:	910f      	str	r1, [sp, #60]	; 0x3c
						for (; i > 0; i--)
1000cd06:	4649      	mov	r1, r9
1000cd08:	3905      	subs	r1, #5
1000cd0a:	9110      	str	r1, [sp, #64]	; 0x40
							*d = *d | m; // set 1 pixel
1000cd0c:	1159      	asrs	r1, r3, #5
1000cd0e:	9111      	str	r1, [sp, #68]	; 0x44
						for (; i > 0; i--)
1000cd10:	4649      	mov	r1, r9
						m = 0x80 >> dx; // mask of 1 color bit
1000cd12:	9308      	str	r3, [sp, #32]
							*d = *d | m; // set 1 pixel
1000cd14:	119b      	asrs	r3, r3, #6
						for (; i > 0; i--)
1000cd16:	3906      	subs	r1, #6
							*d = *d | m; // set 1 pixel
1000cd18:	9312      	str	r3, [sp, #72]	; 0x48
1000cd1a:	4643      	mov	r3, r8
1000cd1c:	4640      	mov	r0, r8
						for (; i > 0; i--)
1000cd1e:	9113      	str	r1, [sp, #76]	; 0x4c
1000cd20:	4641      	mov	r1, r8
1000cd22:	021b      	lsls	r3, r3, #8
1000cd24:	0409      	lsls	r1, r1, #16
1000cd26:	4303      	orrs	r3, r0
1000cd28:	430b      	orrs	r3, r1
1000cd2a:	9306      	str	r3, [sp, #24]
1000cd2c:	464b      	mov	r3, r9
1000cd2e:	46aa      	mov	sl, r5
1000cd30:	4691      	mov	r9, r2
1000cd32:	9305      	str	r3, [sp, #20]
					if (dx != 0)
1000cd34:	9b03      	ldr	r3, [sp, #12]
1000cd36:	2b00      	cmp	r3, #0
1000cd38:	d000      	beq.n	1000cd3c <_Z8DrawRectP7sCanvasiiiih+0x880>
1000cd3a:	e203      	b.n	1000d144 <_Z8DrawRectP7sCanvasiiiih+0xc88>
					for (; i > 7; i -= 8)
1000cd3c:	9d05      	ldr	r5, [sp, #20]
1000cd3e:	2d07      	cmp	r5, #7
1000cd40:	dc00      	bgt.n	1000cd44 <_Z8DrawRectP7sCanvasiiiih+0x888>
1000cd42:	e25e      	b.n	1000d202 <_Z8DrawRectP7sCanvasiiiih+0xd46>
1000cd44:	4654      	mov	r4, sl
1000cd46:	9800      	ldr	r0, [sp, #0]
1000cd48:	2306      	movs	r3, #6
1000cd4a:	1cc2      	adds	r2, r0, #3
1000cd4c:	1b12      	subs	r2, r2, r4
1000cd4e:	0001      	movs	r1, r0
1000cd50:	4293      	cmp	r3, r2
1000cd52:	419b      	sbcs	r3, r3
1000cd54:	2203      	movs	r2, #3
1000cd56:	4321      	orrs	r1, r4
1000cd58:	400a      	ands	r2, r1
1000cd5a:	4251      	negs	r1, r2
1000cd5c:	414a      	adcs	r2, r1
1000cd5e:	425b      	negs	r3, r3
1000cd60:	421a      	tst	r2, r3
1000cd62:	d002      	beq.n	1000cd6a <_Z8DrawRectP7sCanvasiiiih+0x8ae>
1000cd64:	2d37      	cmp	r5, #55	; 0x37
1000cd66:	dd00      	ble.n	1000cd6a <_Z8DrawRectP7sCanvasiiiih+0x8ae>
1000cd68:	e147      	b.n	1000cffa <_Z8DrawRectP7sCanvasiiiih+0xb3e>
1000cd6a:	0029      	movs	r1, r5
						*d2 = (*d2 & 0xf0) | col;
1000cd6c:	46ac      	mov	ip, r5
					for (; i > 7; i -= 8)
1000cd6e:	2200      	movs	r2, #0
						*d++ = 0xff;
1000cd70:	27ff      	movs	r7, #255	; 0xff
						*d2 = (*d2 & 0xf0) | col;
1000cd72:	260f      	movs	r6, #15
1000cd74:	4645      	mov	r5, r8
						*d++ = 0xff;
1000cd76:	54a7      	strb	r7, [r4, r2]
						*d2 = (*d2 & 0xf0) | col;
1000cd78:	5c83      	ldrb	r3, [r0, r2]
					for (; i > 7; i -= 8)
1000cd7a:	3908      	subs	r1, #8
						*d2 = (*d2 & 0xf0) | col;
1000cd7c:	43b3      	bics	r3, r6
1000cd7e:	432b      	orrs	r3, r5
1000cd80:	5483      	strb	r3, [r0, r2]
					for (; i > 7; i -= 8)
1000cd82:	3201      	adds	r2, #1
1000cd84:	2907      	cmp	r1, #7
1000cd86:	dcf6      	bgt.n	1000cd76 <_Z8DrawRectP7sCanvasiiiih+0x8ba>
1000cd88:	2308      	movs	r3, #8
1000cd8a:	425b      	negs	r3, r3
1000cd8c:	469b      	mov	fp, r3
1000cd8e:	46a8      	mov	r8, r5
1000cd90:	4665      	mov	r5, ip
1000cd92:	44e3      	add	fp, ip
1000cd94:	465b      	mov	r3, fp
1000cd96:	08da      	lsrs	r2, r3, #3
1000cd98:	2301      	movs	r3, #1
1000cd9a:	2d07      	cmp	r5, #7
1000cd9c:	dd00      	ble.n	1000cda0 <_Z8DrawRectP7sCanvasiiiih+0x8e4>
1000cd9e:	1c53      	adds	r3, r2, #1
						*d++ = 0xff;
1000cda0:	18e4      	adds	r4, r4, r3
						d2++;
1000cda2:	18c0      	adds	r0, r0, r3
1000cda4:	2300      	movs	r3, #0
1000cda6:	2d07      	cmp	r5, #7
1000cda8:	dd01      	ble.n	1000cdae <_Z8DrawRectP7sCanvasiiiih+0x8f2>
1000cdaa:	00d3      	lsls	r3, r2, #3
1000cdac:	425b      	negs	r3, r3
					for (; i > 7; i -= 8)
1000cdae:	445b      	add	r3, fp
1000cdb0:	001d      	movs	r5, r3
					if (i > 0)
1000cdb2:	2d00      	cmp	r5, #0
1000cdb4:	d00c      	beq.n	1000cdd0 <_Z8DrawRectP7sCanvasiiiih+0x914>
						m = 0xff << (8-i); // mask
1000cdb6:	2308      	movs	r3, #8
1000cdb8:	1b5d      	subs	r5, r3, r5
1000cdba:	33f7      	adds	r3, #247	; 0xf7
1000cdbc:	40ab      	lsls	r3, r5
						*d = *d | m;
1000cdbe:	7822      	ldrb	r2, [r4, #0]
1000cdc0:	4313      	orrs	r3, r2
						*d2 = (*d2 & 0xf0) | col;
1000cdc2:	220f      	movs	r2, #15
						*d = *d | m;
1000cdc4:	7023      	strb	r3, [r4, #0]
						*d2 = (*d2 & 0xf0) | col;
1000cdc6:	7803      	ldrb	r3, [r0, #0]
1000cdc8:	4393      	bics	r3, r2
1000cdca:	4642      	mov	r2, r8
1000cdcc:	4313      	orrs	r3, r2
1000cdce:	7003      	strb	r3, [r0, #0]
					d = d0 + wb;
1000cdd0:	9b01      	ldr	r3, [sp, #4]
					y++;
1000cdd2:	2201      	movs	r2, #1
					d = d0 + wb;
1000cdd4:	469c      	mov	ip, r3
1000cdd6:	44e2      	add	sl, ip
					y++;
1000cdd8:	4694      	mov	ip, r2
1000cdda:	44e1      	add	r9, ip
					if ((y & 7) == 0) d2 += wb;
1000cddc:	464a      	mov	r2, r9
1000cdde:	0752      	lsls	r2, r2, #29
1000cde0:	d103      	bne.n	1000cdea <_Z8DrawRectP7sCanvasiiiih+0x92e>
1000cde2:	469c      	mov	ip, r3
1000cde4:	9a00      	ldr	r2, [sp, #0]
1000cde6:	4462      	add	r2, ip
1000cde8:	9200      	str	r2, [sp, #0]
				for (; h > 0; h--)
1000cdea:	9b04      	ldr	r3, [sp, #16]
1000cdec:	4599      	cmp	r9, r3
1000cdee:	d1a1      	bne.n	1000cd34 <_Z8DrawRectP7sCanvasiiiih+0x878>
1000cdf0:	f7ff fbd3 	bl	1000c59a <_Z8DrawRectP7sCanvasiiiih+0xde>
1000cdf4:	703a      	strb	r2, [r7, #0]
				for (; i > 0; i--)
1000cdf6:	e6d4      	b.n	1000cba2 <_Z8DrawRectP7sCanvasiiiih+0x6e6>
1000cdf8:	7033      	strb	r3, [r6, #0]
				for (; i > 0; i--)
1000cdfa:	e5f4      	b.n	1000c9e6 <_Z8DrawRectP7sCanvasiiiih+0x52a>
				for (; i > 7; i -= 8)
1000cdfc:	2300      	movs	r3, #0
1000cdfe:	0011      	movs	r1, r2
1000ce00:	46a4      	mov	ip, r4
1000ce02:	0022      	movs	r2, r4
1000ce04:	46a8      	mov	r8, r5
1000ce06:	9c07      	ldr	r4, [sp, #28]
1000ce08:	9d08      	ldr	r5, [sp, #32]
1000ce0a:	3a08      	subs	r2, #8
					*d++ = col;
1000ce0c:	54c5      	strb	r5, [r0, r3]
					*d2++ = col2;
1000ce0e:	54cc      	strb	r4, [r1, r3]
				for (; i > 7; i -= 8)
1000ce10:	3301      	adds	r3, #1
1000ce12:	2a07      	cmp	r2, #7
1000ce14:	dcf9      	bgt.n	1000ce0a <_Z8DrawRectP7sCanvasiiiih+0x94e>
1000ce16:	4664      	mov	r4, ip
1000ce18:	4645      	mov	r5, r8
1000ce1a:	e43e      	b.n	1000c69a <_Z8DrawRectP7sCanvasiiiih+0x1de>
1000ce1c:	4656      	mov	r6, sl
1000ce1e:	464d      	mov	r5, r9
1000ce20:	e446      	b.n	1000c6b0 <_Z8DrawRectP7sCanvasiiiih+0x1f4>
				col <<= 4;
1000ce22:	4643      	mov	r3, r8
1000ce24:	011b      	lsls	r3, r3, #4
1000ce26:	b2db      	uxtb	r3, r3
1000ce28:	469b      	mov	fp, r3
					dx = x & 7;
1000ce2a:	2307      	movs	r3, #7
1000ce2c:	400b      	ands	r3, r1
1000ce2e:	0018      	movs	r0, r3
1000ce30:	9303      	str	r3, [sp, #12]
						m = 0x80 >> dx; // mask of 1 color bit
1000ce32:	2380      	movs	r3, #128	; 0x80
1000ce34:	4492      	add	sl, r2
1000ce36:	0019      	movs	r1, r3
1000ce38:	4653      	mov	r3, sl
1000ce3a:	9304      	str	r3, [sp, #16]
						for (; i > 0; i--)
1000ce3c:	464b      	mov	r3, r9
						m = 0x80 >> dx; // mask of 1 color bit
1000ce3e:	4101      	asrs	r1, r0
						for (; i > 0; i--)
1000ce40:	3b01      	subs	r3, #1
1000ce42:	9307      	str	r3, [sp, #28]
							m >>= 1; // shift mask
1000ce44:	104b      	asrs	r3, r1, #1
							*d = *d & ~m; // set 1 pixel
1000ce46:	43db      	mvns	r3, r3
1000ce48:	9309      	str	r3, [sp, #36]	; 0x24
						for (; i > 0; i--)
1000ce4a:	464b      	mov	r3, r9
1000ce4c:	3b02      	subs	r3, #2
1000ce4e:	930a      	str	r3, [sp, #40]	; 0x28
							m >>= 1; // shift mask
1000ce50:	108b      	asrs	r3, r1, #2
							*d = *d & ~m; // set 1 pixel
1000ce52:	43db      	mvns	r3, r3
1000ce54:	930c      	str	r3, [sp, #48]	; 0x30
						for (; i > 0; i--)
1000ce56:	464b      	mov	r3, r9
1000ce58:	3b03      	subs	r3, #3
1000ce5a:	930b      	str	r3, [sp, #44]	; 0x2c
							m >>= 1; // shift mask
1000ce5c:	10cb      	asrs	r3, r1, #3
							*d = *d & ~m; // set 1 pixel
1000ce5e:	43db      	mvns	r3, r3
1000ce60:	930d      	str	r3, [sp, #52]	; 0x34
						for (; i > 0; i--)
1000ce62:	464b      	mov	r3, r9
1000ce64:	3b04      	subs	r3, #4
1000ce66:	930e      	str	r3, [sp, #56]	; 0x38
							m >>= 1; // shift mask
1000ce68:	110b      	asrs	r3, r1, #4
							*d = *d & ~m; // set 1 pixel
1000ce6a:	43db      	mvns	r3, r3
1000ce6c:	930f      	str	r3, [sp, #60]	; 0x3c
						for (; i > 0; i--)
1000ce6e:	464b      	mov	r3, r9
1000ce70:	3b05      	subs	r3, #5
1000ce72:	9310      	str	r3, [sp, #64]	; 0x40
							m >>= 1; // shift mask
1000ce74:	114b      	asrs	r3, r1, #5
							*d = *d & ~m; // set 1 pixel
1000ce76:	43db      	mvns	r3, r3
1000ce78:	9311      	str	r3, [sp, #68]	; 0x44
						for (; i > 0; i--)
1000ce7a:	464b      	mov	r3, r9
1000ce7c:	3b06      	subs	r3, #6
1000ce7e:	9313      	str	r3, [sp, #76]	; 0x4c
							m >>= 1; // shift mask
1000ce80:	118b      	asrs	r3, r1, #6
							*d = *d & ~m; // set 1 pixel
1000ce82:	43db      	mvns	r3, r3
1000ce84:	9312      	str	r3, [sp, #72]	; 0x48
1000ce86:	465b      	mov	r3, fp
1000ce88:	4658      	mov	r0, fp
						m = 0x80 >> dx; // mask of 1 color bit
1000ce8a:	9108      	str	r1, [sp, #32]
1000ce8c:	4659      	mov	r1, fp
1000ce8e:	021b      	lsls	r3, r3, #8
1000ce90:	0409      	lsls	r1, r1, #16
1000ce92:	4303      	orrs	r3, r0
1000ce94:	430b      	orrs	r3, r1
1000ce96:	9306      	str	r3, [sp, #24]
1000ce98:	464b      	mov	r3, r9
1000ce9a:	4690      	mov	r8, r2
1000ce9c:	46a9      	mov	r9, r5
1000ce9e:	9305      	str	r3, [sp, #20]
					if (dx != 0)
1000cea0:	9b03      	ldr	r3, [sp, #12]
1000cea2:	2b00      	cmp	r3, #0
1000cea4:	d000      	beq.n	1000cea8 <_Z8DrawRectP7sCanvasiiiih+0x9ec>
1000cea6:	e100      	b.n	1000d0aa <_Z8DrawRectP7sCanvasiiiih+0xbee>
					for (; i > 7; i -= 8)
1000cea8:	9d05      	ldr	r5, [sp, #20]
1000ceaa:	2d07      	cmp	r5, #7
1000ceac:	dc00      	bgt.n	1000ceb0 <_Z8DrawRectP7sCanvasiiiih+0x9f4>
1000ceae:	e1a5      	b.n	1000d1fc <_Z8DrawRectP7sCanvasiiiih+0xd40>
1000ceb0:	464c      	mov	r4, r9
1000ceb2:	9800      	ldr	r0, [sp, #0]
1000ceb4:	2306      	movs	r3, #6
1000ceb6:	1ce2      	adds	r2, r4, #3
1000ceb8:	1a12      	subs	r2, r2, r0
1000ceba:	0001      	movs	r1, r0
1000cebc:	4293      	cmp	r3, r2
1000cebe:	419b      	sbcs	r3, r3
1000cec0:	2203      	movs	r2, #3
1000cec2:	4321      	orrs	r1, r4
1000cec4:	400a      	ands	r2, r1
1000cec6:	4251      	negs	r1, r2
1000cec8:	414a      	adcs	r2, r1
1000ceca:	425b      	negs	r3, r3
1000cecc:	421a      	tst	r2, r3
1000cece:	d001      	beq.n	1000ced4 <_Z8DrawRectP7sCanvasiiiih+0xa18>
1000ced0:	2d37      	cmp	r5, #55	; 0x37
1000ced2:	dc44      	bgt.n	1000cf5e <_Z8DrawRectP7sCanvasiiiih+0xaa2>
1000ced4:	0029      	movs	r1, r5
						*d2 = (*d2 & 0x0f) | col;
1000ced6:	46ac      	mov	ip, r5
					for (; i > 7; i -= 8)
1000ced8:	2200      	movs	r2, #0
						*d++ = 0;
1000ceda:	2700      	movs	r7, #0
						*d2 = (*d2 & 0x0f) | col;
1000cedc:	260f      	movs	r6, #15
1000cede:	465d      	mov	r5, fp
						*d++ = 0;
1000cee0:	54a7      	strb	r7, [r4, r2]
						*d2 = (*d2 & 0x0f) | col;
1000cee2:	5c83      	ldrb	r3, [r0, r2]
					for (; i > 7; i -= 8)
1000cee4:	3908      	subs	r1, #8
						*d2 = (*d2 & 0x0f) | col;
1000cee6:	4033      	ands	r3, r6
1000cee8:	432b      	orrs	r3, r5
1000ceea:	5483      	strb	r3, [r0, r2]
					for (; i > 7; i -= 8)
1000ceec:	3201      	adds	r2, #1
1000ceee:	2907      	cmp	r1, #7
1000cef0:	dcf6      	bgt.n	1000cee0 <_Z8DrawRectP7sCanvasiiiih+0xa24>
1000cef2:	2308      	movs	r3, #8
1000cef4:	425b      	negs	r3, r3
1000cef6:	469a      	mov	sl, r3
1000cef8:	46ab      	mov	fp, r5
1000cefa:	4665      	mov	r5, ip
1000cefc:	44e2      	add	sl, ip
1000cefe:	4653      	mov	r3, sl
1000cf00:	08da      	lsrs	r2, r3, #3
1000cf02:	2301      	movs	r3, #1
1000cf04:	2d07      	cmp	r5, #7
1000cf06:	dd00      	ble.n	1000cf0a <_Z8DrawRectP7sCanvasiiiih+0xa4e>
1000cf08:	1c53      	adds	r3, r2, #1
						*d++ = 0;
1000cf0a:	18e4      	adds	r4, r4, r3
						d2++;
1000cf0c:	18c0      	adds	r0, r0, r3
1000cf0e:	2300      	movs	r3, #0
1000cf10:	2d07      	cmp	r5, #7
1000cf12:	dd01      	ble.n	1000cf18 <_Z8DrawRectP7sCanvasiiiih+0xa5c>
1000cf14:	00d3      	lsls	r3, r2, #3
1000cf16:	425b      	negs	r3, r3
					for (; i > 7; i -= 8)
1000cf18:	4453      	add	r3, sl
1000cf1a:	001d      	movs	r5, r3
					if (i > 0)
1000cf1c:	2d00      	cmp	r5, #0
1000cf1e:	d00c      	beq.n	1000cf3a <_Z8DrawRectP7sCanvasiiiih+0xa7e>
						m = 0xff << (8-i); // mask
1000cf20:	2308      	movs	r3, #8
1000cf22:	22ff      	movs	r2, #255	; 0xff
1000cf24:	1b5d      	subs	r5, r3, r5
1000cf26:	40aa      	lsls	r2, r5
						*d = *d & ~m;
1000cf28:	7823      	ldrb	r3, [r4, #0]
1000cf2a:	4393      	bics	r3, r2
1000cf2c:	7023      	strb	r3, [r4, #0]
						*d2 = (*d2 & 0x0f) | col;
1000cf2e:	230f      	movs	r3, #15
1000cf30:	7802      	ldrb	r2, [r0, #0]
1000cf32:	4013      	ands	r3, r2
1000cf34:	465a      	mov	r2, fp
1000cf36:	4313      	orrs	r3, r2
1000cf38:	7003      	strb	r3, [r0, #0]
					d = d0 + wb;
1000cf3a:	9b01      	ldr	r3, [sp, #4]
					y++;
1000cf3c:	2201      	movs	r2, #1
					d = d0 + wb;
1000cf3e:	469c      	mov	ip, r3
1000cf40:	44e1      	add	r9, ip
					y++;
1000cf42:	4694      	mov	ip, r2
1000cf44:	44e0      	add	r8, ip
					if ((y & 7) == 0) d2 += wb;
1000cf46:	4642      	mov	r2, r8
1000cf48:	0752      	lsls	r2, r2, #29
1000cf4a:	d103      	bne.n	1000cf54 <_Z8DrawRectP7sCanvasiiiih+0xa98>
1000cf4c:	469c      	mov	ip, r3
1000cf4e:	9a00      	ldr	r2, [sp, #0]
1000cf50:	4462      	add	r2, ip
1000cf52:	9200      	str	r2, [sp, #0]
				for (; h > 0; h--)
1000cf54:	9b04      	ldr	r3, [sp, #16]
1000cf56:	4598      	cmp	r8, r3
1000cf58:	d1a2      	bne.n	1000cea0 <_Z8DrawRectP7sCanvasiiiih+0x9e4>
1000cf5a:	f7ff fb1e 	bl	1000c59a <_Z8DrawRectP7sCanvasiiiih+0xde>
1000cf5e:	2d07      	cmp	r5, #7
1000cf60:	dc00      	bgt.n	1000cf64 <_Z8DrawRectP7sCanvasiiiih+0xaa8>
1000cf62:	e09c      	b.n	1000d09e <_Z8DrawRectP7sCanvasiiiih+0xbe2>
1000cf64:	2308      	movs	r3, #8
1000cf66:	425b      	negs	r3, r3
1000cf68:	469a      	mov	sl, r3
1000cf6a:	44aa      	add	sl, r5
1000cf6c:	4653      	mov	r3, sl
1000cf6e:	08db      	lsrs	r3, r3, #3
1000cf70:	3301      	adds	r3, #1
1000cf72:	9302      	str	r3, [sp, #8]
1000cf74:	465b      	mov	r3, fp
1000cf76:	061a      	lsls	r2, r3, #24
1000cf78:	9b06      	ldr	r3, [sp, #24]
						*d2 = (*d2 & 0x0f) | col;
1000cf7a:	49b1      	ldr	r1, [pc, #708]	; (1000d240 <_Z8DrawRectP7sCanvasiiiih+0xd84>)
1000cf7c:	431a      	orrs	r2, r3
1000cf7e:	9b02      	ldr	r3, [sp, #8]
1000cf80:	468c      	mov	ip, r1
1000cf82:	089f      	lsrs	r7, r3, #2
					for (; i > 7; i -= 8)
1000cf84:	2300      	movs	r3, #0
1000cf86:	00bf      	lsls	r7, r7, #2
						*d++ = 0;
1000cf88:	2100      	movs	r1, #0
						*d2 = (*d2 & 0x0f) | col;
1000cf8a:	4666      	mov	r6, ip
						*d++ = 0;
1000cf8c:	50e1      	str	r1, [r4, r3]
						*d2 = (*d2 & 0x0f) | col;
1000cf8e:	58c1      	ldr	r1, [r0, r3]
1000cf90:	4031      	ands	r1, r6
1000cf92:	4311      	orrs	r1, r2
1000cf94:	50c1      	str	r1, [r0, r3]
					for (; i > 7; i -= 8)
1000cf96:	3304      	adds	r3, #4
1000cf98:	429f      	cmp	r7, r3
1000cf9a:	d1f5      	bne.n	1000cf88 <_Z8DrawRectP7sCanvasiiiih+0xacc>
1000cf9c:	9e02      	ldr	r6, [sp, #8]
1000cf9e:	2303      	movs	r3, #3
1000cfa0:	0032      	movs	r2, r6
1000cfa2:	439a      	bics	r2, r3
1000cfa4:	0013      	movs	r3, r2
1000cfa6:	00d9      	lsls	r1, r3, #3
1000cfa8:	18a7      	adds	r7, r4, r2
1000cfaa:	1a69      	subs	r1, r5, r1
1000cfac:	1882      	adds	r2, r0, r2
1000cfae:	42b3      	cmp	r3, r6
1000cfb0:	d0a5      	beq.n	1000cefe <_Z8DrawRectP7sCanvasiiiih+0xa42>
						*d++ = 0;
1000cfb2:	2300      	movs	r3, #0
1000cfb4:	703b      	strb	r3, [r7, #0]
						*d2 = (*d2 & 0x0f) | col;
1000cfb6:	7813      	ldrb	r3, [r2, #0]
1000cfb8:	001e      	movs	r6, r3
1000cfba:	230f      	movs	r3, #15
1000cfbc:	401e      	ands	r6, r3
1000cfbe:	465b      	mov	r3, fp
1000cfc0:	431e      	orrs	r6, r3
					for (; i > 7; i -= 8)
1000cfc2:	2308      	movs	r3, #8
1000cfc4:	425b      	negs	r3, r3
1000cfc6:	469c      	mov	ip, r3
1000cfc8:	448c      	add	ip, r1
1000cfca:	4663      	mov	r3, ip
						*d2 = (*d2 & 0x0f) | col;
1000cfcc:	7016      	strb	r6, [r2, #0]
					for (; i > 7; i -= 8)
1000cfce:	2b07      	cmp	r3, #7
1000cfd0:	dd95      	ble.n	1000cefe <_Z8DrawRectP7sCanvasiiiih+0xa42>
						*d++ = 0;
1000cfd2:	2300      	movs	r3, #0
1000cfd4:	707b      	strb	r3, [r7, #1]
						*d2 = (*d2 & 0x0f) | col;
1000cfd6:	7853      	ldrb	r3, [r2, #1]
1000cfd8:	001e      	movs	r6, r3
1000cfda:	230f      	movs	r3, #15
1000cfdc:	401e      	ands	r6, r3
1000cfde:	465b      	mov	r3, fp
1000cfe0:	431e      	orrs	r6, r3
1000cfe2:	7056      	strb	r6, [r2, #1]
					for (; i > 7; i -= 8)
1000cfe4:	2917      	cmp	r1, #23
1000cfe6:	dd8a      	ble.n	1000cefe <_Z8DrawRectP7sCanvasiiiih+0xa42>
						*d++ = 0;
1000cfe8:	2300      	movs	r3, #0
1000cfea:	70bb      	strb	r3, [r7, #2]
						*d2 = (*d2 & 0x0f) | col;
1000cfec:	7891      	ldrb	r1, [r2, #2]
1000cfee:	330f      	adds	r3, #15
1000cff0:	400b      	ands	r3, r1
1000cff2:	4659      	mov	r1, fp
1000cff4:	430b      	orrs	r3, r1
1000cff6:	7093      	strb	r3, [r2, #2]
					for (; i > 7; i -= 8)
1000cff8:	e781      	b.n	1000cefe <_Z8DrawRectP7sCanvasiiiih+0xa42>
1000cffa:	2d07      	cmp	r5, #7
1000cffc:	dd49      	ble.n	1000d092 <_Z8DrawRectP7sCanvasiiiih+0xbd6>
1000cffe:	2308      	movs	r3, #8
1000d000:	425b      	negs	r3, r3
1000d002:	469b      	mov	fp, r3
1000d004:	44ab      	add	fp, r5
1000d006:	465b      	mov	r3, fp
1000d008:	08db      	lsrs	r3, r3, #3
1000d00a:	3301      	adds	r3, #1
1000d00c:	9302      	str	r3, [sp, #8]
1000d00e:	4643      	mov	r3, r8
1000d010:	061f      	lsls	r7, r3, #24
1000d012:	9b06      	ldr	r3, [sp, #24]
						*d2 = (*d2 & 0xf0) | col;
1000d014:	4a8b      	ldr	r2, [pc, #556]	; (1000d244 <_Z8DrawRectP7sCanvasiiiih+0xd88>)
1000d016:	431f      	orrs	r7, r3
1000d018:	9b02      	ldr	r3, [sp, #8]
1000d01a:	4694      	mov	ip, r2
1000d01c:	089e      	lsrs	r6, r3, #2
					for (; i > 7; i -= 8)
1000d01e:	2300      	movs	r3, #0
1000d020:	00b6      	lsls	r6, r6, #2
						*d++ = 0xff;
1000d022:	2201      	movs	r2, #1
1000d024:	4252      	negs	r2, r2
1000d026:	50e2      	str	r2, [r4, r3]
						*d2 = (*d2 & 0xf0) | col;
1000d028:	4662      	mov	r2, ip
1000d02a:	58c1      	ldr	r1, [r0, r3]
1000d02c:	4011      	ands	r1, r2
1000d02e:	4339      	orrs	r1, r7
1000d030:	50c1      	str	r1, [r0, r3]
					for (; i > 7; i -= 8)
1000d032:	3304      	adds	r3, #4
1000d034:	42b3      	cmp	r3, r6
1000d036:	d1f4      	bne.n	1000d022 <_Z8DrawRectP7sCanvasiiiih+0xb66>
1000d038:	9a02      	ldr	r2, [sp, #8]
1000d03a:	2303      	movs	r3, #3
1000d03c:	0011      	movs	r1, r2
1000d03e:	4399      	bics	r1, r3
1000d040:	00ce      	lsls	r6, r1, #3
1000d042:	1867      	adds	r7, r4, r1
1000d044:	1843      	adds	r3, r0, r1
1000d046:	1bae      	subs	r6, r5, r6
1000d048:	428a      	cmp	r2, r1
1000d04a:	d100      	bne.n	1000d04e <_Z8DrawRectP7sCanvasiiiih+0xb92>
1000d04c:	e6a2      	b.n	1000cd94 <_Z8DrawRectP7sCanvasiiiih+0x8d8>
						*d++ = 0xff;
1000d04e:	22ff      	movs	r2, #255	; 0xff
						*d2 = (*d2 & 0xf0) | col;
1000d050:	210f      	movs	r1, #15
						*d++ = 0xff;
1000d052:	703a      	strb	r2, [r7, #0]
						*d2 = (*d2 & 0xf0) | col;
1000d054:	781a      	ldrb	r2, [r3, #0]
1000d056:	468c      	mov	ip, r1
1000d058:	438a      	bics	r2, r1
1000d05a:	4641      	mov	r1, r8
1000d05c:	430a      	orrs	r2, r1
1000d05e:	701a      	strb	r2, [r3, #0]
					for (; i > 7; i -= 8)
1000d060:	0032      	movs	r2, r6
1000d062:	3a08      	subs	r2, #8
1000d064:	2a07      	cmp	r2, #7
1000d066:	dc00      	bgt.n	1000d06a <_Z8DrawRectP7sCanvasiiiih+0xbae>
1000d068:	e694      	b.n	1000cd94 <_Z8DrawRectP7sCanvasiiiih+0x8d8>
						*d++ = 0xff;
1000d06a:	22ff      	movs	r2, #255	; 0xff
						*d2 = (*d2 & 0xf0) | col;
1000d06c:	4661      	mov	r1, ip
						*d++ = 0xff;
1000d06e:	707a      	strb	r2, [r7, #1]
						*d2 = (*d2 & 0xf0) | col;
1000d070:	785a      	ldrb	r2, [r3, #1]
1000d072:	438a      	bics	r2, r1
1000d074:	4641      	mov	r1, r8
1000d076:	430a      	orrs	r2, r1
1000d078:	705a      	strb	r2, [r3, #1]
					for (; i > 7; i -= 8)
1000d07a:	2e17      	cmp	r6, #23
1000d07c:	dc00      	bgt.n	1000d080 <_Z8DrawRectP7sCanvasiiiih+0xbc4>
1000d07e:	e689      	b.n	1000cd94 <_Z8DrawRectP7sCanvasiiiih+0x8d8>
						*d++ = 0xff;
1000d080:	22ff      	movs	r2, #255	; 0xff
						*d2 = (*d2 & 0xf0) | col;
1000d082:	4661      	mov	r1, ip
						*d++ = 0xff;
1000d084:	70ba      	strb	r2, [r7, #2]
						*d2 = (*d2 & 0xf0) | col;
1000d086:	789a      	ldrb	r2, [r3, #2]
1000d088:	438a      	bics	r2, r1
1000d08a:	4641      	mov	r1, r8
1000d08c:	430a      	orrs	r2, r1
1000d08e:	709a      	strb	r2, [r3, #2]
					for (; i > 7; i -= 8)
1000d090:	e680      	b.n	1000cd94 <_Z8DrawRectP7sCanvasiiiih+0x8d8>
1000d092:	2301      	movs	r3, #1
1000d094:	9302      	str	r3, [sp, #8]
1000d096:	3b09      	subs	r3, #9
1000d098:	469b      	mov	fp, r3
1000d09a:	44ab      	add	fp, r5
1000d09c:	e7b7      	b.n	1000d00e <_Z8DrawRectP7sCanvasiiiih+0xb52>
1000d09e:	2301      	movs	r3, #1
1000d0a0:	9302      	str	r3, [sp, #8]
1000d0a2:	3b09      	subs	r3, #9
1000d0a4:	469a      	mov	sl, r3
1000d0a6:	44aa      	add	sl, r5
1000d0a8:	e764      	b.n	1000cf74 <_Z8DrawRectP7sCanvasiiiih+0xab8>
1000d0aa:	0019      	movs	r1, r3
							*d = *d & ~m; // set 1 pixel
1000d0ac:	464b      	mov	r3, r9
1000d0ae:	781a      	ldrb	r2, [r3, #0]
1000d0b0:	9b08      	ldr	r3, [sp, #32]
1000d0b2:	439a      	bics	r2, r3
1000d0b4:	b253      	sxtb	r3, r2
							if (dx == 8) { i--; break; } // x is aligned
1000d0b6:	2907      	cmp	r1, #7
1000d0b8:	d100      	bne.n	1000d0bc <_Z8DrawRectP7sCanvasiiiih+0xc00>
1000d0ba:	e0bc      	b.n	1000d236 <_Z8DrawRectP7sCanvasiiiih+0xd7a>
						for (; i > 0; i--)
1000d0bc:	9807      	ldr	r0, [sp, #28]
1000d0be:	2800      	cmp	r0, #0
1000d0c0:	d100      	bne.n	1000d0c4 <_Z8DrawRectP7sCanvasiiiih+0xc08>
1000d0c2:	e087      	b.n	1000d1d4 <_Z8DrawRectP7sCanvasiiiih+0xd18>
							*d = *d & ~m; // set 1 pixel
1000d0c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
1000d0c6:	4013      	ands	r3, r2
1000d0c8:	b2da      	uxtb	r2, r3
							if (dx == 8) { i--; break; } // x is aligned
1000d0ca:	2906      	cmp	r1, #6
1000d0cc:	d100      	bne.n	1000d0d0 <_Z8DrawRectP7sCanvasiiiih+0xc14>
1000d0ce:	e09b      	b.n	1000d208 <_Z8DrawRectP7sCanvasiiiih+0xd4c>
						for (; i > 0; i--)
1000d0d0:	980a      	ldr	r0, [sp, #40]	; 0x28
1000d0d2:	2800      	cmp	r0, #0
1000d0d4:	d07e      	beq.n	1000d1d4 <_Z8DrawRectP7sCanvasiiiih+0xd18>
							*d = *d & ~m; // set 1 pixel
1000d0d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1000d0d8:	4013      	ands	r3, r2
1000d0da:	b2da      	uxtb	r2, r3
							if (dx == 8) { i--; break; } // x is aligned
1000d0dc:	2905      	cmp	r1, #5
1000d0de:	d100      	bne.n	1000d0e2 <_Z8DrawRectP7sCanvasiiiih+0xc26>
1000d0e0:	e092      	b.n	1000d208 <_Z8DrawRectP7sCanvasiiiih+0xd4c>
						for (; i > 0; i--)
1000d0e2:	980b      	ldr	r0, [sp, #44]	; 0x2c
1000d0e4:	2800      	cmp	r0, #0
1000d0e6:	d075      	beq.n	1000d1d4 <_Z8DrawRectP7sCanvasiiiih+0xd18>
							*d = *d & ~m; // set 1 pixel
1000d0e8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
1000d0ea:	4013      	ands	r3, r2
1000d0ec:	b2da      	uxtb	r2, r3
							if (dx == 8) { i--; break; } // x is aligned
1000d0ee:	2904      	cmp	r1, #4
1000d0f0:	d100      	bne.n	1000d0f4 <_Z8DrawRectP7sCanvasiiiih+0xc38>
1000d0f2:	e089      	b.n	1000d208 <_Z8DrawRectP7sCanvasiiiih+0xd4c>
						for (; i > 0; i--)
1000d0f4:	980e      	ldr	r0, [sp, #56]	; 0x38
1000d0f6:	2800      	cmp	r0, #0
1000d0f8:	d06c      	beq.n	1000d1d4 <_Z8DrawRectP7sCanvasiiiih+0xd18>
							*d = *d & ~m; // set 1 pixel
1000d0fa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
1000d0fc:	4013      	ands	r3, r2
1000d0fe:	b2da      	uxtb	r2, r3
							if (dx == 8) { i--; break; } // x is aligned
1000d100:	2903      	cmp	r1, #3
1000d102:	d100      	bne.n	1000d106 <_Z8DrawRectP7sCanvasiiiih+0xc4a>
1000d104:	e080      	b.n	1000d208 <_Z8DrawRectP7sCanvasiiiih+0xd4c>
						for (; i > 0; i--)
1000d106:	9810      	ldr	r0, [sp, #64]	; 0x40
1000d108:	2800      	cmp	r0, #0
1000d10a:	d063      	beq.n	1000d1d4 <_Z8DrawRectP7sCanvasiiiih+0xd18>
							*d = *d & ~m; // set 1 pixel
1000d10c:	9a11      	ldr	r2, [sp, #68]	; 0x44
1000d10e:	4013      	ands	r3, r2
1000d110:	b2da      	uxtb	r2, r3
							if (dx == 8) { i--; break; } // x is aligned
1000d112:	2902      	cmp	r1, #2
1000d114:	d078      	beq.n	1000d208 <_Z8DrawRectP7sCanvasiiiih+0xd4c>
						for (; i > 0; i--)
1000d116:	9d13      	ldr	r5, [sp, #76]	; 0x4c
1000d118:	2d00      	cmp	r5, #0
1000d11a:	d05b      	beq.n	1000d1d4 <_Z8DrawRectP7sCanvasiiiih+0xd18>
							*d = *d & ~m; // set 1 pixel
1000d11c:	9a12      	ldr	r2, [sp, #72]	; 0x48
1000d11e:	4013      	ands	r3, r2
1000d120:	b2da      	uxtb	r2, r3
							if (dx == 8) { i--; break; } // x is aligned
1000d122:	464b      	mov	r3, r9
1000d124:	701a      	strb	r2, [r3, #0]
						*d2 = (*d2 & 0x0f) | col;
1000d126:	230f      	movs	r3, #15
1000d128:	9900      	ldr	r1, [sp, #0]
							if (dx == 8) { i--; break; } // x is aligned
1000d12a:	3d01      	subs	r5, #1
						*d2 = (*d2 & 0x0f) | col;
1000d12c:	780a      	ldrb	r2, [r1, #0]
						d2++;
1000d12e:	1c48      	adds	r0, r1, #1
						*d2 = (*d2 & 0x0f) | col;
1000d130:	4013      	ands	r3, r2
1000d132:	465a      	mov	r2, fp
1000d134:	4313      	orrs	r3, r2
1000d136:	700b      	strb	r3, [r1, #0]
						d++;
1000d138:	464b      	mov	r3, r9
1000d13a:	1c5c      	adds	r4, r3, #1
					for (; i > 7; i -= 8)
1000d13c:	2d07      	cmp	r5, #7
1000d13e:	dd00      	ble.n	1000d142 <_Z8DrawRectP7sCanvasiiiih+0xc86>
1000d140:	e6b8      	b.n	1000ceb4 <_Z8DrawRectP7sCanvasiiiih+0x9f8>
1000d142:	e6eb      	b.n	1000cf1c <_Z8DrawRectP7sCanvasiiiih+0xa60>
1000d144:	0019      	movs	r1, r3
							*d = *d | m; // set 1 pixel
1000d146:	4653      	mov	r3, sl
1000d148:	781a      	ldrb	r2, [r3, #0]
1000d14a:	9b08      	ldr	r3, [sp, #32]
1000d14c:	431a      	orrs	r2, r3
1000d14e:	b253      	sxtb	r3, r2
1000d150:	b2d2      	uxtb	r2, r2
							if (dx == 8) { i--; break; } // x is aligned
1000d152:	2907      	cmp	r1, #7
1000d154:	d071      	beq.n	1000d23a <_Z8DrawRectP7sCanvasiiiih+0xd7e>
						for (; i > 0; i--)
1000d156:	9807      	ldr	r0, [sp, #28]
1000d158:	2800      	cmp	r0, #0
1000d15a:	d045      	beq.n	1000d1e8 <_Z8DrawRectP7sCanvasiiiih+0xd2c>
							*d = *d | m; // set 1 pixel
1000d15c:	9a09      	ldr	r2, [sp, #36]	; 0x24
1000d15e:	4313      	orrs	r3, r2
1000d160:	b2da      	uxtb	r2, r3
							if (dx == 8) { i--; break; } // x is aligned
1000d162:	2906      	cmp	r1, #6
1000d164:	d052      	beq.n	1000d20c <_Z8DrawRectP7sCanvasiiiih+0xd50>
						for (; i > 0; i--)
1000d166:	980a      	ldr	r0, [sp, #40]	; 0x28
1000d168:	2800      	cmp	r0, #0
1000d16a:	d03d      	beq.n	1000d1e8 <_Z8DrawRectP7sCanvasiiiih+0xd2c>
							*d = *d | m; // set 1 pixel
1000d16c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1000d16e:	4313      	orrs	r3, r2
1000d170:	b2da      	uxtb	r2, r3
							if (dx == 8) { i--; break; } // x is aligned
1000d172:	2905      	cmp	r1, #5
1000d174:	d04a      	beq.n	1000d20c <_Z8DrawRectP7sCanvasiiiih+0xd50>
						for (; i > 0; i--)
1000d176:	980b      	ldr	r0, [sp, #44]	; 0x2c
1000d178:	2800      	cmp	r0, #0
1000d17a:	d035      	beq.n	1000d1e8 <_Z8DrawRectP7sCanvasiiiih+0xd2c>
							*d = *d | m; // set 1 pixel
1000d17c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
1000d17e:	4313      	orrs	r3, r2
1000d180:	b2da      	uxtb	r2, r3
							if (dx == 8) { i--; break; } // x is aligned
1000d182:	2904      	cmp	r1, #4
1000d184:	d042      	beq.n	1000d20c <_Z8DrawRectP7sCanvasiiiih+0xd50>
						for (; i > 0; i--)
1000d186:	980e      	ldr	r0, [sp, #56]	; 0x38
1000d188:	2800      	cmp	r0, #0
1000d18a:	d02d      	beq.n	1000d1e8 <_Z8DrawRectP7sCanvasiiiih+0xd2c>
							*d = *d | m; // set 1 pixel
1000d18c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
1000d18e:	4313      	orrs	r3, r2
1000d190:	b2da      	uxtb	r2, r3
							if (dx == 8) { i--; break; } // x is aligned
1000d192:	2903      	cmp	r1, #3
1000d194:	d03a      	beq.n	1000d20c <_Z8DrawRectP7sCanvasiiiih+0xd50>
						for (; i > 0; i--)
1000d196:	9810      	ldr	r0, [sp, #64]	; 0x40
1000d198:	2800      	cmp	r0, #0
1000d19a:	d025      	beq.n	1000d1e8 <_Z8DrawRectP7sCanvasiiiih+0xd2c>
							*d = *d | m; // set 1 pixel
1000d19c:	9a11      	ldr	r2, [sp, #68]	; 0x44
1000d19e:	4313      	orrs	r3, r2
1000d1a0:	b2da      	uxtb	r2, r3
							if (dx == 8) { i--; break; } // x is aligned
1000d1a2:	2902      	cmp	r1, #2
1000d1a4:	d032      	beq.n	1000d20c <_Z8DrawRectP7sCanvasiiiih+0xd50>
						for (; i > 0; i--)
1000d1a6:	9d13      	ldr	r5, [sp, #76]	; 0x4c
1000d1a8:	2d00      	cmp	r5, #0
1000d1aa:	d01d      	beq.n	1000d1e8 <_Z8DrawRectP7sCanvasiiiih+0xd2c>
							*d = *d | m; // set 1 pixel
1000d1ac:	9a12      	ldr	r2, [sp, #72]	; 0x48
1000d1ae:	4313      	orrs	r3, r2
1000d1b0:	b2da      	uxtb	r2, r3
							if (dx == 8) { i--; break; } // x is aligned
1000d1b2:	4653      	mov	r3, sl
1000d1b4:	701a      	strb	r2, [r3, #0]
						*d2 = (*d2 & 0xf0) | col;
1000d1b6:	220f      	movs	r2, #15
1000d1b8:	9900      	ldr	r1, [sp, #0]
							if (dx == 8) { i--; break; } // x is aligned
1000d1ba:	3d01      	subs	r5, #1
						*d2 = (*d2 & 0xf0) | col;
1000d1bc:	780b      	ldrb	r3, [r1, #0]
						d2++;
1000d1be:	1c48      	adds	r0, r1, #1
						*d2 = (*d2 & 0xf0) | col;
1000d1c0:	4393      	bics	r3, r2
1000d1c2:	4642      	mov	r2, r8
1000d1c4:	4313      	orrs	r3, r2
1000d1c6:	700b      	strb	r3, [r1, #0]
						d++;
1000d1c8:	4653      	mov	r3, sl
1000d1ca:	1c5c      	adds	r4, r3, #1
					for (; i > 7; i -= 8)
1000d1cc:	2d07      	cmp	r5, #7
1000d1ce:	dd00      	ble.n	1000d1d2 <_Z8DrawRectP7sCanvasiiiih+0xd16>
1000d1d0:	e5ba      	b.n	1000cd48 <_Z8DrawRectP7sCanvasiiiih+0x88c>
1000d1d2:	e5ee      	b.n	1000cdb2 <_Z8DrawRectP7sCanvasiiiih+0x8f6>
1000d1d4:	464b      	mov	r3, r9
1000d1d6:	701a      	strb	r2, [r3, #0]
						*d2 = (*d2 & 0x0f) | col;
1000d1d8:	230f      	movs	r3, #15
1000d1da:	9900      	ldr	r1, [sp, #0]
1000d1dc:	780a      	ldrb	r2, [r1, #0]
1000d1de:	4013      	ands	r3, r2
1000d1e0:	465a      	mov	r2, fp
1000d1e2:	4313      	orrs	r3, r2
1000d1e4:	700b      	strb	r3, [r1, #0]
					if (i > 0)
1000d1e6:	e6a8      	b.n	1000cf3a <_Z8DrawRectP7sCanvasiiiih+0xa7e>
1000d1e8:	4653      	mov	r3, sl
1000d1ea:	701a      	strb	r2, [r3, #0]
						*d2 = (*d2 & 0xf0) | col;
1000d1ec:	220f      	movs	r2, #15
1000d1ee:	9900      	ldr	r1, [sp, #0]
1000d1f0:	780b      	ldrb	r3, [r1, #0]
1000d1f2:	4393      	bics	r3, r2
1000d1f4:	4642      	mov	r2, r8
1000d1f6:	4313      	orrs	r3, r2
1000d1f8:	700b      	strb	r3, [r1, #0]
					if (i > 0)
1000d1fa:	e5e9      	b.n	1000cdd0 <_Z8DrawRectP7sCanvasiiiih+0x914>
					for (; i > 7; i -= 8)
1000d1fc:	464c      	mov	r4, r9
1000d1fe:	9800      	ldr	r0, [sp, #0]
1000d200:	e68e      	b.n	1000cf20 <_Z8DrawRectP7sCanvasiiiih+0xa64>
					for (; i > 7; i -= 8)
1000d202:	4654      	mov	r4, sl
1000d204:	9800      	ldr	r0, [sp, #0]
1000d206:	e5d6      	b.n	1000cdb6 <_Z8DrawRectP7sCanvasiiiih+0x8fa>
1000d208:	0005      	movs	r5, r0
1000d20a:	e78a      	b.n	1000d122 <_Z8DrawRectP7sCanvasiiiih+0xc66>
1000d20c:	0005      	movs	r5, r0
1000d20e:	e7d0      	b.n	1000d1b2 <_Z8DrawRectP7sCanvasiiiih+0xcf6>
						if (dx == 8) { i--; break; } // x is aligned
1000d210:	9c05      	ldr	r4, [sp, #20]
1000d212:	f7ff fb7c 	bl	1000c90e <_Z8DrawRectP7sCanvasiiiih+0x452>
						if (dx == 4) { i--; break; } // x is aligned
1000d216:	464c      	mov	r4, r9
1000d218:	e417      	b.n	1000ca4a <_Z8DrawRectP7sCanvasiiiih+0x58e>
						if (dx == 8) { i--; break; } // x is aligned
1000d21a:	464c      	mov	r4, r9
1000d21c:	e527      	b.n	1000cc6e <_Z8DrawRectP7sCanvasiiiih+0x7b2>
						if (dx == 4) { i--; break; } // x is aligned
1000d21e:	9c04      	ldr	r4, [sp, #16]
1000d220:	e413      	b.n	1000ca4a <_Z8DrawRectP7sCanvasiiiih+0x58e>
						if (dx == 8) { i--; break; } // x is aligned
1000d222:	9c05      	ldr	r4, [sp, #20]
1000d224:	e523      	b.n	1000cc6e <_Z8DrawRectP7sCanvasiiiih+0x7b2>
1000d226:	9c07      	ldr	r4, [sp, #28]
1000d228:	e521      	b.n	1000cc6e <_Z8DrawRectP7sCanvasiiiih+0x7b2>
1000d22a:	9c09      	ldr	r4, [sp, #36]	; 0x24
1000d22c:	e51f      	b.n	1000cc6e <_Z8DrawRectP7sCanvasiiiih+0x7b2>
1000d22e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
1000d230:	e51d      	b.n	1000cc6e <_Z8DrawRectP7sCanvasiiiih+0x7b2>
1000d232:	9c0d      	ldr	r4, [sp, #52]	; 0x34
1000d234:	e51b      	b.n	1000cc6e <_Z8DrawRectP7sCanvasiiiih+0x7b2>
							if (dx == 8) { i--; break; } // x is aligned
1000d236:	9d05      	ldr	r5, [sp, #20]
1000d238:	e773      	b.n	1000d122 <_Z8DrawRectP7sCanvasiiiih+0xc66>
							if (dx == 8) { i--; break; } // x is aligned
1000d23a:	9d05      	ldr	r5, [sp, #20]
1000d23c:	e7b9      	b.n	1000d1b2 <_Z8DrawRectP7sCanvasiiiih+0xcf6>
1000d23e:	46c0      	nop			; (mov r8, r8)
1000d240:	0f0f0f0f 	.word	0x0f0f0f0f
1000d244:	f0f0f0f0 	.word	0xf0f0f0f0

1000d248 <_Z10DrawTextBgP7sCanvasPKciihhPKviii>:

// Draw text with background
//   font = pointer to 1-bit font
void DrawTextBg(sCanvas* canvas, const char* text, int x, int y, u8 col, u8 bgcol,
	const void* font, int fontheight /*=8*/, int scalex /*=1*/, int scaley /*=1*/)
{
1000d248:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d24a:	464e      	mov	r6, r9
1000d24c:	46de      	mov	lr, fp
1000d24e:	4657      	mov	r7, sl
1000d250:	4645      	mov	r5, r8
1000d252:	b5e0      	push	{r5, r6, r7, lr}
1000d254:	b091      	sub	sp, #68	; 0x44
1000d256:	930f      	str	r3, [sp, #60]	; 0x3c
1000d258:	ab1a      	add	r3, sp, #104	; 0x68
1000d25a:	781b      	ldrb	r3, [r3, #0]
1000d25c:	9207      	str	r2, [sp, #28]
1000d25e:	9302      	str	r3, [sp, #8]
1000d260:	ab1b      	add	r3, sp, #108	; 0x6c
1000d262:	781b      	ldrb	r3, [r3, #0]
1000d264:	9a1e      	ldr	r2, [sp, #120]	; 0x78
1000d266:	0006      	movs	r6, r0
1000d268:	9304      	str	r3, [sp, #16]
	// invalid scale
	if ((scalex == 0) || (scaley == 0)) return;
1000d26a:	2a00      	cmp	r2, #0
1000d26c:	d100      	bne.n	1000d270 <_Z10DrawTextBgP7sCanvasPKciihhPKviii+0x28>
1000d26e:	e08f      	b.n	1000d390 <_Z10DrawTextBgP7sCanvasPKciihhPKviii+0x148>
1000d270:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
1000d272:	2b00      	cmp	r3, #0
1000d274:	d100      	bne.n	1000d278 <_Z10DrawTextBgP7sCanvasPKciihhPKviii+0x30>
1000d276:	e08b      	b.n	1000d390 <_Z10DrawTextBgP7sCanvasPKciihhPKviii+0x148>

	// prepare coordinate increment
	int sx = (scalex < 0) ? -1 : 1; // increment X coordinate
1000d278:	2a00      	cmp	r2, #0
1000d27a:	da00      	bge.n	1000d27e <_Z10DrawTextBgP7sCanvasPKciihhPKviii+0x36>
1000d27c:	e08f      	b.n	1000d39e <_Z10DrawTextBgP7sCanvasPKciihhPKviii+0x156>
1000d27e:	2301      	movs	r3, #1
1000d280:	469a      	mov	sl, r3
1000d282:	9203      	str	r2, [sp, #12]
	int sy = (scaley < 0) ? -1 : 1; // increment Y coordinate
1000d284:	2301      	movs	r3, #1
1000d286:	9306      	str	r3, [sp, #24]
1000d288:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
1000d28a:	2b00      	cmp	r3, #0
1000d28c:	da04      	bge.n	1000d298 <_Z10DrawTextBgP7sCanvasPKciihhPKviii+0x50>
1000d28e:	425b      	negs	r3, r3
1000d290:	931f      	str	r3, [sp, #124]	; 0x7c
1000d292:	2301      	movs	r3, #1
1000d294:	425b      	negs	r3, r3
1000d296:	9306      	str	r3, [sp, #24]
	const u8* s;
	const u8* fnt = (const u8*)font;
	u8 c;

	// loop through characters of text
	while ((ch = (u8)*text++) != 0) // until end of text
1000d298:	780b      	ldrb	r3, [r1, #0]
1000d29a:	1c48      	adds	r0, r1, #1
1000d29c:	2b00      	cmp	r3, #0
1000d29e:	d077      	beq.n	1000d390 <_Z10DrawTextBgP7sCanvasPKciihhPKviii+0x148>
				y += sy;
			}
		}

		// shift to next character position
		x0 += scalex*8;
1000d2a0:	00d2      	lsls	r2, r2, #3
1000d2a2:	920d      	str	r2, [sp, #52]	; 0x34
1000d2a4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
1000d2a6:	2a00      	cmp	r2, #0
1000d2a8:	dd72      	ble.n	1000d390 <_Z10DrawTextBgP7sCanvasPKciihhPKviii+0x148>
1000d2aa:	4651      	mov	r1, sl
1000d2ac:	9a03      	ldr	r2, [sp, #12]
1000d2ae:	900a      	str	r0, [sp, #40]	; 0x28
1000d2b0:	3a01      	subs	r2, #1
1000d2b2:	4351      	muls	r1, r2
1000d2b4:	9a06      	ldr	r2, [sp, #24]
1000d2b6:	9101      	str	r1, [sp, #4]
1000d2b8:	991f      	ldr	r1, [sp, #124]	; 0x7c
1000d2ba:	434a      	muls	r2, r1
1000d2bc:	920e      	str	r2, [sp, #56]	; 0x38
		s = &fnt[ch];
1000d2be:	9a1c      	ldr	r2, [sp, #112]	; 0x70
1000d2c0:	4694      	mov	ip, r2
1000d2c2:	4463      	add	r3, ip
1000d2c4:	930b      	str	r3, [sp, #44]	; 0x2c
1000d2c6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
1000d2c8:	930c      	str	r3, [sp, #48]	; 0x30
		y = y0;
1000d2ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1000d2cc:	9309      	str	r3, [sp, #36]	; 0x24
			s += 256;
1000d2ce:	9f09      	ldr	r7, [sp, #36]	; 0x24
			ch0 = *s;
1000d2d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
			s += 256;
1000d2d2:	46b8      	mov	r8, r7
1000d2d4:	4657      	mov	r7, sl
			ch0 = *s;
1000d2d6:	781a      	ldrb	r2, [r3, #0]
			s += 256;
1000d2d8:	3301      	adds	r3, #1
1000d2da:	33ff      	adds	r3, #255	; 0xff
1000d2dc:	930b      	str	r3, [sp, #44]	; 0x2c
1000d2de:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
			ch0 = *s;
1000d2e0:	9208      	str	r2, [sp, #32]
			s += 256;
1000d2e2:	9305      	str	r3, [sp, #20]
				ch = ch0;
1000d2e4:	9b08      	ldr	r3, [sp, #32]
1000d2e6:	4699      	mov	r9, r3
1000d2e8:	9b07      	ldr	r3, [sp, #28]
1000d2ea:	9300      	str	r3, [sp, #0]
1000d2ec:	2308      	movs	r3, #8
1000d2ee:	469b      	mov	fp, r3
					c = ((ch & 0x80) != 0) ? col : bgcol;
1000d2f0:	464b      	mov	r3, r9
1000d2f2:	9a02      	ldr	r2, [sp, #8]
1000d2f4:	b25b      	sxtb	r3, r3
1000d2f6:	4692      	mov	sl, r2
1000d2f8:	2b00      	cmp	r3, #0
1000d2fa:	db01      	blt.n	1000d300 <_Z10DrawTextBgP7sCanvasPKciihhPKviii+0xb8>
1000d2fc:	9b04      	ldr	r3, [sp, #16]
1000d2fe:	469a      	mov	sl, r3
					for (k = dx; k > 0; k--)
1000d300:	4643      	mov	r3, r8
1000d302:	46b8      	mov	r8, r7
1000d304:	001f      	movs	r7, r3
				ch = ch0;
1000d306:	9d03      	ldr	r5, [sp, #12]
1000d308:	9c00      	ldr	r4, [sp, #0]
	if (((u32)x >= (u32)canvas->w) || ((u32)y >= (u32)canvas->h)) return;
1000d30a:	68b3      	ldr	r3, [r6, #8]
1000d30c:	42a3      	cmp	r3, r4
1000d30e:	d908      	bls.n	1000d322 <_Z10DrawTextBgP7sCanvasPKciihhPKviii+0xda>
1000d310:	68f3      	ldr	r3, [r6, #12]
1000d312:	429f      	cmp	r7, r3
1000d314:	d205      	bcs.n	1000d322 <_Z10DrawTextBgP7sCanvasPKciihhPKviii+0xda>
1000d316:	4653      	mov	r3, sl
1000d318:	003a      	movs	r2, r7
1000d31a:	0021      	movs	r1, r4
1000d31c:	0030      	movs	r0, r6
1000d31e:	f7fe ff8d 	bl	1000c23c <_Z9DrawPointP7sCanvasiih.part.0>
					for (k = dx; k > 0; k--)
1000d322:	3d01      	subs	r5, #1
						x += sx;
1000d324:	4444      	add	r4, r8
					for (k = dx; k > 0; k--)
1000d326:	2d00      	cmp	r5, #0
1000d328:	d1ef      	bne.n	1000d30a <_Z10DrawTextBgP7sCanvasPKciihhPKviii+0xc2>
1000d32a:	003b      	movs	r3, r7
						x += sx;
1000d32c:	9a01      	ldr	r2, [sp, #4]
1000d32e:	4647      	mov	r7, r8
1000d330:	4694      	mov	ip, r2
1000d332:	4698      	mov	r8, r3
1000d334:	9b00      	ldr	r3, [sp, #0]
1000d336:	18fb      	adds	r3, r7, r3
1000d338:	4463      	add	r3, ip
1000d33a:	9300      	str	r3, [sp, #0]
					ch <<= 1;
1000d33c:	464b      	mov	r3, r9
1000d33e:	005b      	lsls	r3, r3, #1
1000d340:	b2db      	uxtb	r3, r3
1000d342:	4699      	mov	r9, r3
				for (j = 8; j > 0; j--)
1000d344:	2301      	movs	r3, #1
1000d346:	425b      	negs	r3, r3
1000d348:	469c      	mov	ip, r3
1000d34a:	44e3      	add	fp, ip
1000d34c:	465b      	mov	r3, fp
1000d34e:	2b00      	cmp	r3, #0
1000d350:	d1ce      	bne.n	1000d2f0 <_Z10DrawTextBgP7sCanvasPKciihhPKviii+0xa8>
				y += sy;
1000d352:	9b06      	ldr	r3, [sp, #24]
1000d354:	469c      	mov	ip, r3
			for (m = dy; m > 0; m--)
1000d356:	9b05      	ldr	r3, [sp, #20]
				y += sy;
1000d358:	44e0      	add	r8, ip
			for (m = dy; m > 0; m--)
1000d35a:	3b01      	subs	r3, #1
1000d35c:	9305      	str	r3, [sp, #20]
1000d35e:	2b00      	cmp	r3, #0
1000d360:	d1c0      	bne.n	1000d2e4 <_Z10DrawTextBgP7sCanvasPKciihhPKviii+0x9c>
1000d362:	9a0e      	ldr	r2, [sp, #56]	; 0x38
1000d364:	9b09      	ldr	r3, [sp, #36]	; 0x24
1000d366:	4694      	mov	ip, r2
1000d368:	4463      	add	r3, ip
1000d36a:	9309      	str	r3, [sp, #36]	; 0x24
		for (i = fontheight; i > 0; i--)
1000d36c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1000d36e:	46ba      	mov	sl, r7
1000d370:	3b01      	subs	r3, #1
1000d372:	930c      	str	r3, [sp, #48]	; 0x30
1000d374:	2b00      	cmp	r3, #0
1000d376:	d1aa      	bne.n	1000d2ce <_Z10DrawTextBgP7sCanvasPKciihhPKviii+0x86>
		x0 += scalex*8;
1000d378:	9a0d      	ldr	r2, [sp, #52]	; 0x34
1000d37a:	9b07      	ldr	r3, [sp, #28]
1000d37c:	4694      	mov	ip, r2
1000d37e:	4463      	add	r3, ip
1000d380:	9307      	str	r3, [sp, #28]
	while ((ch = (u8)*text++) != 0) // until end of text
1000d382:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1000d384:	3301      	adds	r3, #1
1000d386:	930a      	str	r3, [sp, #40]	; 0x28
1000d388:	3b01      	subs	r3, #1
1000d38a:	781b      	ldrb	r3, [r3, #0]
1000d38c:	2b00      	cmp	r3, #0
1000d38e:	d196      	bne.n	1000d2be <_Z10DrawTextBgP7sCanvasPKciihhPKviii+0x76>
	}
}
1000d390:	b011      	add	sp, #68	; 0x44
1000d392:	bcf0      	pop	{r4, r5, r6, r7}
1000d394:	46bb      	mov	fp, r7
1000d396:	46b2      	mov	sl, r6
1000d398:	46a9      	mov	r9, r5
1000d39a:	46a0      	mov	r8, r4
1000d39c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d39e:	4253      	negs	r3, r2
1000d3a0:	9303      	str	r3, [sp, #12]
	int sx = (scalex < 0) ? -1 : 1; // increment X coordinate
1000d3a2:	2301      	movs	r3, #1
1000d3a4:	425b      	negs	r3, r3
1000d3a6:	469a      	mov	sl, r3
1000d3a8:	e76c      	b.n	1000d284 <_Z10DrawTextBgP7sCanvasPKciihhPKviii+0x3c>
1000d3aa:	46c0      	nop			; (mov r8, r8)

1000d3ac <_Z12FindSysClockmPmS_PtPhS1_>:
//  outfbdiv ... output fbdiv (16..320)
//  outpd1 ... output postdiv1 (1..7)
//  outpd2 ... output postdiv2 (1..7)
// Returns true if precise frequency has been found, or near frequency used otherwise.
bool FindSysClock(u32 reqkhz, u32* outkhz, u32* outvco, u16* outfbdiv, u8* outpd1, u8* outpd2)
{
1000d3ac:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d3ae:	46de      	mov	lr, fp
1000d3b0:	464e      	mov	r6, r9
1000d3b2:	4657      	mov	r7, sl
1000d3b4:	4645      	mov	r5, r8
1000d3b6:	b5e0      	push	{r5, r6, r7, lr}
1000d3b8:	b087      	sub	sp, #28
1000d3ba:	9000      	str	r0, [sp, #0]
	// get reference frequency in kHz (should be 12 MHz)
	u32 input = clock_get_hz(clk_ref)/1000;
1000d3bc:	2004      	movs	r0, #4
{
1000d3be:	468a      	mov	sl, r1
1000d3c0:	4691      	mov	r9, r2
1000d3c2:	9304      	str	r3, [sp, #16]
	u32 input = clock_get_hz(clk_ref)/1000;
1000d3c4:	f7f3 fdb2 	bl	10000f2c <clock_get_hz>
1000d3c8:	21fa      	movs	r1, #250	; 0xfa
1000d3ca:	0089      	lsls	r1, r1, #2
1000d3cc:	f7f2 ffd2 	bl	10000374 <__wrap___aeabi_uidiv>
	*outkhz = 0;
1000d3d0:	2300      	movs	r3, #0
1000d3d2:	4651      	mov	r1, sl
1000d3d4:	4684      	mov	ip, r0
1000d3d6:	4a8e      	ldr	r2, [pc, #568]	; (1000d610 <_Z12FindSysClockmPmS_PtPhS1_+0x264>)
1000d3d8:	600b      	str	r3, [r1, #0]
1000d3da:	0083      	lsls	r3, r0, #2
1000d3dc:	4463      	add	r3, ip
1000d3de:	4694      	mov	ip, r2
1000d3e0:	019b      	lsls	r3, r3, #6
1000d3e2:	4463      	add	r3, ip
1000d3e4:	9302      	str	r3, [sp, #8]
						*outpd2 = pd2;
1000d3e6:	464b      	mov	r3, r9
	*outkhz = 0;
1000d3e8:	25a0      	movs	r5, #160	; 0xa0
						*outpd2 = pd2;
1000d3ea:	46d1      	mov	r9, sl
1000d3ec:	469a      	mov	sl, r3
	*outkhz = 0;
1000d3ee:	4e89      	ldr	r6, [pc, #548]	; (1000d614 <_Z12FindSysClockmPmS_PtPhS1_+0x268>)
	u32 input = clock_get_hz(clk_ref)/1000;
1000d3f0:	9005      	str	r0, [sp, #20]
	*outkhz = 0;
1000d3f2:	006d      	lsls	r5, r5, #1
		vco = fbdiv * input;
1000d3f4:	4a88      	ldr	r2, [pc, #544]	; (1000d618 <_Z12FindSysClockmPmS_PtPhS1_+0x26c>)
1000d3f6:	9b02      	ldr	r3, [sp, #8]
1000d3f8:	4694      	mov	ip, r2
1000d3fa:	001c      	movs	r4, r3
		if ((vco >= vcomin) && (vco <= vcomax))
1000d3fc:	4a87      	ldr	r2, [pc, #540]	; (1000d61c <_Z12FindSysClockmPmS_PtPhS1_+0x270>)
1000d3fe:	4464      	add	r4, ip
1000d400:	4293      	cmp	r3, r2
1000d402:	d900      	bls.n	1000d406 <_Z12FindSysClockmPmS_PtPhS1_+0x5a>
1000d404:	e0dd      	b.n	1000d5c2 <_Z12FindSysClockmPmS_PtPhS1_+0x216>
1000d406:	2306      	movs	r3, #6
1000d408:	9503      	str	r5, [sp, #12]
1000d40a:	4698      	mov	r8, r3
1000d40c:	e0b4      	b.n	1000d578 <_Z12FindSysClockmPmS_PtPhS1_+0x1cc>
					khz = vco / (pd1 * pd2);
1000d40e:	4641      	mov	r1, r8
1000d410:	0020      	movs	r0, r4
1000d412:	4369      	muls	r1, r5
1000d414:	f7f2 ffae 	bl	10000374 <__wrap___aeabi_uidiv>
					margin = abs((int)(khz - reqkhz));
1000d418:	9b00      	ldr	r3, [sp, #0]
1000d41a:	1ac3      	subs	r3, r0, r3
1000d41c:	17da      	asrs	r2, r3, #31
1000d41e:	189b      	adds	r3, r3, r2
1000d420:	4053      	eors	r3, r2
					if (margin < margin_best)
1000d422:	42b3      	cmp	r3, r6
1000d424:	d20c      	bcs.n	1000d440 <_Z12FindSysClockmPmS_PtPhS1_+0x94>
						*outkhz = khz;
1000d426:	464a      	mov	r2, r9
1000d428:	6010      	str	r0, [r2, #0]
						*outvco = vco;
1000d42a:	4652      	mov	r2, sl
						*outpd2 = pd2;
1000d42c:	001e      	movs	r6, r3
						*outvco = vco;
1000d42e:	6014      	str	r4, [r2, #0]
						*outfbdiv = fbdiv;
1000d430:	9903      	ldr	r1, [sp, #12]
1000d432:	9a04      	ldr	r2, [sp, #16]
1000d434:	8011      	strh	r1, [r2, #0]
						*outpd1 = pd1;
1000d436:	9a10      	ldr	r2, [sp, #64]	; 0x40
1000d438:	9901      	ldr	r1, [sp, #4]
1000d43a:	7011      	strb	r1, [r2, #0]
						*outpd2 = pd2;
1000d43c:	9a11      	ldr	r2, [sp, #68]	; 0x44
1000d43e:	7017      	strb	r7, [r2, #0]
				for (pd2 = pd1; pd2 >= 1; pd2--)
1000d440:	1e7b      	subs	r3, r7, #1
1000d442:	b2db      	uxtb	r3, r3
1000d444:	469b      	mov	fp, r3
1000d446:	2b00      	cmp	r3, #0
1000d448:	d100      	bne.n	1000d44c <_Z12FindSysClockmPmS_PtPhS1_+0xa0>
1000d44a:	e091      	b.n	1000d570 <_Z12FindSysClockmPmS_PtPhS1_+0x1c4>
					khz = vco / (pd1 * pd2);
1000d44c:	0019      	movs	r1, r3
1000d44e:	0020      	movs	r0, r4
1000d450:	4369      	muls	r1, r5
1000d452:	f7f2 ff8f 	bl	10000374 <__wrap___aeabi_uidiv>
					margin = abs((int)(khz - reqkhz));
1000d456:	9b00      	ldr	r3, [sp, #0]
1000d458:	1ac3      	subs	r3, r0, r3
1000d45a:	17da      	asrs	r2, r3, #31
1000d45c:	189b      	adds	r3, r3, r2
1000d45e:	4053      	eors	r3, r2
					if (margin < margin_best)
1000d460:	42b3      	cmp	r3, r6
1000d462:	d20d      	bcs.n	1000d480 <_Z12FindSysClockmPmS_PtPhS1_+0xd4>
						*outkhz = khz;
1000d464:	464a      	mov	r2, r9
1000d466:	6010      	str	r0, [r2, #0]
						*outvco = vco;
1000d468:	4652      	mov	r2, sl
						*outfbdiv = fbdiv;
1000d46a:	9903      	ldr	r1, [sp, #12]
						*outvco = vco;
1000d46c:	6014      	str	r4, [r2, #0]
						*outfbdiv = fbdiv;
1000d46e:	9a04      	ldr	r2, [sp, #16]
						*outpd2 = pd2;
1000d470:	001e      	movs	r6, r3
						*outfbdiv = fbdiv;
1000d472:	8011      	strh	r1, [r2, #0]
						*outpd1 = pd1;
1000d474:	9a10      	ldr	r2, [sp, #64]	; 0x40
1000d476:	9901      	ldr	r1, [sp, #4]
1000d478:	7011      	strb	r1, [r2, #0]
						*outpd2 = pd2;
1000d47a:	4659      	mov	r1, fp
1000d47c:	9a11      	ldr	r2, [sp, #68]	; 0x44
1000d47e:	7011      	strb	r1, [r2, #0]
				for (pd2 = pd1; pd2 >= 1; pd2--)
1000d480:	1ebb      	subs	r3, r7, #2
1000d482:	b2db      	uxtb	r3, r3
1000d484:	469b      	mov	fp, r3
1000d486:	2b00      	cmp	r3, #0
1000d488:	d072      	beq.n	1000d570 <_Z12FindSysClockmPmS_PtPhS1_+0x1c4>
					khz = vco / (pd1 * pd2);
1000d48a:	0019      	movs	r1, r3
1000d48c:	0020      	movs	r0, r4
1000d48e:	4369      	muls	r1, r5
1000d490:	f7f2 ff70 	bl	10000374 <__wrap___aeabi_uidiv>
					margin = abs((int)(khz - reqkhz));
1000d494:	9b00      	ldr	r3, [sp, #0]
1000d496:	1ac3      	subs	r3, r0, r3
1000d498:	17da      	asrs	r2, r3, #31
1000d49a:	189b      	adds	r3, r3, r2
1000d49c:	4053      	eors	r3, r2
					if (margin < margin_best)
1000d49e:	429e      	cmp	r6, r3
1000d4a0:	d90d      	bls.n	1000d4be <_Z12FindSysClockmPmS_PtPhS1_+0x112>
						*outkhz = khz;
1000d4a2:	464a      	mov	r2, r9
1000d4a4:	6010      	str	r0, [r2, #0]
						*outvco = vco;
1000d4a6:	4652      	mov	r2, sl
						*outfbdiv = fbdiv;
1000d4a8:	9903      	ldr	r1, [sp, #12]
						*outvco = vco;
1000d4aa:	6014      	str	r4, [r2, #0]
						*outfbdiv = fbdiv;
1000d4ac:	9a04      	ldr	r2, [sp, #16]
						*outpd2 = pd2;
1000d4ae:	001e      	movs	r6, r3
						*outfbdiv = fbdiv;
1000d4b0:	8011      	strh	r1, [r2, #0]
						*outpd1 = pd1;
1000d4b2:	9a10      	ldr	r2, [sp, #64]	; 0x40
1000d4b4:	9901      	ldr	r1, [sp, #4]
1000d4b6:	7011      	strb	r1, [r2, #0]
						*outpd2 = pd2;
1000d4b8:	4659      	mov	r1, fp
1000d4ba:	9a11      	ldr	r2, [sp, #68]	; 0x44
1000d4bc:	7011      	strb	r1, [r2, #0]
				for (pd2 = pd1; pd2 >= 1; pd2--)
1000d4be:	1efb      	subs	r3, r7, #3
1000d4c0:	b2db      	uxtb	r3, r3
1000d4c2:	469b      	mov	fp, r3
1000d4c4:	2b00      	cmp	r3, #0
1000d4c6:	d053      	beq.n	1000d570 <_Z12FindSysClockmPmS_PtPhS1_+0x1c4>
					khz = vco / (pd1 * pd2);
1000d4c8:	0019      	movs	r1, r3
1000d4ca:	0020      	movs	r0, r4
1000d4cc:	4369      	muls	r1, r5
1000d4ce:	f7f2 ff51 	bl	10000374 <__wrap___aeabi_uidiv>
					margin = abs((int)(khz - reqkhz));
1000d4d2:	9b00      	ldr	r3, [sp, #0]
1000d4d4:	1ac3      	subs	r3, r0, r3
1000d4d6:	17da      	asrs	r2, r3, #31
1000d4d8:	189b      	adds	r3, r3, r2
1000d4da:	4053      	eors	r3, r2
					if (margin < margin_best)
1000d4dc:	429e      	cmp	r6, r3
1000d4de:	d90d      	bls.n	1000d4fc <_Z12FindSysClockmPmS_PtPhS1_+0x150>
						*outkhz = khz;
1000d4e0:	464a      	mov	r2, r9
1000d4e2:	6010      	str	r0, [r2, #0]
						*outvco = vco;
1000d4e4:	4652      	mov	r2, sl
						*outfbdiv = fbdiv;
1000d4e6:	9903      	ldr	r1, [sp, #12]
						*outvco = vco;
1000d4e8:	6014      	str	r4, [r2, #0]
						*outfbdiv = fbdiv;
1000d4ea:	9a04      	ldr	r2, [sp, #16]
						*outpd2 = pd2;
1000d4ec:	001e      	movs	r6, r3
						*outfbdiv = fbdiv;
1000d4ee:	8011      	strh	r1, [r2, #0]
						*outpd1 = pd1;
1000d4f0:	9a10      	ldr	r2, [sp, #64]	; 0x40
1000d4f2:	9901      	ldr	r1, [sp, #4]
1000d4f4:	7011      	strb	r1, [r2, #0]
						*outpd2 = pd2;
1000d4f6:	4659      	mov	r1, fp
1000d4f8:	9a11      	ldr	r2, [sp, #68]	; 0x44
1000d4fa:	7011      	strb	r1, [r2, #0]
				for (pd2 = pd1; pd2 >= 1; pd2--)
1000d4fc:	1f3b      	subs	r3, r7, #4
1000d4fe:	b2db      	uxtb	r3, r3
1000d500:	469b      	mov	fp, r3
1000d502:	2b00      	cmp	r3, #0
1000d504:	d034      	beq.n	1000d570 <_Z12FindSysClockmPmS_PtPhS1_+0x1c4>
					khz = vco / (pd1 * pd2);
1000d506:	0019      	movs	r1, r3
1000d508:	0020      	movs	r0, r4
1000d50a:	4369      	muls	r1, r5
1000d50c:	f7f2 ff32 	bl	10000374 <__wrap___aeabi_uidiv>
					margin = abs((int)(khz - reqkhz));
1000d510:	9b00      	ldr	r3, [sp, #0]
1000d512:	1ac3      	subs	r3, r0, r3
1000d514:	17da      	asrs	r2, r3, #31
1000d516:	189b      	adds	r3, r3, r2
1000d518:	4053      	eors	r3, r2
					if (margin < margin_best)
1000d51a:	429e      	cmp	r6, r3
1000d51c:	d90d      	bls.n	1000d53a <_Z12FindSysClockmPmS_PtPhS1_+0x18e>
						*outkhz = khz;
1000d51e:	464a      	mov	r2, r9
1000d520:	6010      	str	r0, [r2, #0]
						*outvco = vco;
1000d522:	4652      	mov	r2, sl
						*outfbdiv = fbdiv;
1000d524:	9903      	ldr	r1, [sp, #12]
						*outvco = vco;
1000d526:	6014      	str	r4, [r2, #0]
						*outfbdiv = fbdiv;
1000d528:	9a04      	ldr	r2, [sp, #16]
						*outpd2 = pd2;
1000d52a:	001e      	movs	r6, r3
						*outfbdiv = fbdiv;
1000d52c:	8011      	strh	r1, [r2, #0]
						*outpd1 = pd1;
1000d52e:	9a10      	ldr	r2, [sp, #64]	; 0x40
1000d530:	9901      	ldr	r1, [sp, #4]
1000d532:	7011      	strb	r1, [r2, #0]
						*outpd2 = pd2;
1000d534:	4659      	mov	r1, fp
1000d536:	9a11      	ldr	r2, [sp, #68]	; 0x44
1000d538:	7011      	strb	r1, [r2, #0]
				for (pd2 = pd1; pd2 >= 1; pd2--)
1000d53a:	2f05      	cmp	r7, #5
1000d53c:	d018      	beq.n	1000d570 <_Z12FindSysClockmPmS_PtPhS1_+0x1c4>
					khz = vco / (pd1 * pd2);
1000d53e:	0029      	movs	r1, r5
1000d540:	0020      	movs	r0, r4
1000d542:	f7f2 ff17 	bl	10000374 <__wrap___aeabi_uidiv>
					margin = abs((int)(khz - reqkhz));
1000d546:	9b00      	ldr	r3, [sp, #0]
1000d548:	1ac3      	subs	r3, r0, r3
1000d54a:	17da      	asrs	r2, r3, #31
1000d54c:	189b      	adds	r3, r3, r2
1000d54e:	4053      	eors	r3, r2
					if (margin < margin_best)
1000d550:	429e      	cmp	r6, r3
1000d552:	d90d      	bls.n	1000d570 <_Z12FindSysClockmPmS_PtPhS1_+0x1c4>
						*outkhz = khz;
1000d554:	464a      	mov	r2, r9
1000d556:	6010      	str	r0, [r2, #0]
						*outvco = vco;
1000d558:	4652      	mov	r2, sl
						*outfbdiv = fbdiv;
1000d55a:	9903      	ldr	r1, [sp, #12]
						*outvco = vco;
1000d55c:	6014      	str	r4, [r2, #0]
						*outfbdiv = fbdiv;
1000d55e:	9a04      	ldr	r2, [sp, #16]
						*outpd2 = pd2;
1000d560:	001e      	movs	r6, r3
						*outfbdiv = fbdiv;
1000d562:	8011      	strh	r1, [r2, #0]
						*outpd1 = pd1;
1000d564:	9a10      	ldr	r2, [sp, #64]	; 0x40
1000d566:	9901      	ldr	r1, [sp, #4]
1000d568:	7011      	strb	r1, [r2, #0]
						*outpd2 = pd2;
1000d56a:	2101      	movs	r1, #1
1000d56c:	9a11      	ldr	r2, [sp, #68]	; 0x44
1000d56e:	7011      	strb	r1, [r2, #0]
			for (pd1 = 7; pd1 >= 1; pd1--)
1000d570:	2301      	movs	r3, #1
1000d572:	425b      	negs	r3, r3
1000d574:	469c      	mov	ip, r3
1000d576:	44e0      	add	r8, ip
				for (pd2 = pd1; pd2 >= 1; pd2--)
1000d578:	4643      	mov	r3, r8
1000d57a:	b2df      	uxtb	r7, r3
1000d57c:	1c7b      	adds	r3, r7, #1
1000d57e:	b2da      	uxtb	r2, r3
1000d580:	4643      	mov	r3, r8
1000d582:	1c5d      	adds	r5, r3, #1
					khz = vco / (pd1 * pd2);
1000d584:	0029      	movs	r1, r5
1000d586:	0020      	movs	r0, r4
1000d588:	4369      	muls	r1, r5
1000d58a:	9201      	str	r2, [sp, #4]
1000d58c:	f7f2 fef2 	bl	10000374 <__wrap___aeabi_uidiv>
					margin = abs((int)(khz - reqkhz));
1000d590:	9b00      	ldr	r3, [sp, #0]
1000d592:	1ac3      	subs	r3, r0, r3
1000d594:	17d9      	asrs	r1, r3, #31
1000d596:	185b      	adds	r3, r3, r1
1000d598:	404b      	eors	r3, r1
					if (margin < margin_best)
1000d59a:	429e      	cmp	r6, r3
1000d59c:	d90c      	bls.n	1000d5b8 <_Z12FindSysClockmPmS_PtPhS1_+0x20c>
						*outkhz = khz;
1000d59e:	4649      	mov	r1, r9
1000d5a0:	6008      	str	r0, [r1, #0]
						*outvco = vco;
1000d5a2:	4651      	mov	r1, sl
						*outpd2 = pd2;
1000d5a4:	001e      	movs	r6, r3
						*outvco = vco;
1000d5a6:	600c      	str	r4, [r1, #0]
						*outfbdiv = fbdiv;
1000d5a8:	9803      	ldr	r0, [sp, #12]
1000d5aa:	9904      	ldr	r1, [sp, #16]
						*outpd1 = pd1;
1000d5ac:	9a01      	ldr	r2, [sp, #4]
						*outfbdiv = fbdiv;
1000d5ae:	8008      	strh	r0, [r1, #0]
						*outpd1 = pd1;
1000d5b0:	9910      	ldr	r1, [sp, #64]	; 0x40
1000d5b2:	700a      	strb	r2, [r1, #0]
						*outpd2 = pd2;
1000d5b4:	9911      	ldr	r1, [sp, #68]	; 0x44
1000d5b6:	700a      	strb	r2, [r1, #0]
				for (pd2 = pd1; pd2 >= 1; pd2--)
1000d5b8:	4643      	mov	r3, r8
1000d5ba:	2b00      	cmp	r3, #0
1000d5bc:	d000      	beq.n	1000d5c0 <_Z12FindSysClockmPmS_PtPhS1_+0x214>
1000d5be:	e726      	b.n	1000d40e <_Z12FindSysClockmPmS_PtPhS1_+0x62>
1000d5c0:	9d03      	ldr	r5, [sp, #12]
			if (fbdiv < 16) break;
1000d5c2:	9b02      	ldr	r3, [sp, #8]
1000d5c4:	9a05      	ldr	r2, [sp, #20]
			fbdiv--;
1000d5c6:	3d01      	subs	r5, #1
			if (fbdiv < 16) break;
1000d5c8:	1a9b      	subs	r3, r3, r2
			fbdiv--;
1000d5ca:	b2ad      	uxth	r5, r5
			if (fbdiv < 16) break;
1000d5cc:	9302      	str	r3, [sp, #8]
1000d5ce:	2d0f      	cmp	r5, #15
1000d5d0:	d000      	beq.n	1000d5d4 <_Z12FindSysClockmPmS_PtPhS1_+0x228>
1000d5d2:	e70f      	b.n	1000d3f4 <_Z12FindSysClockmPmS_PtPhS1_+0x48>
	return (*outkhz == reqkhz) && (*outvco == *outkhz * *outpd1 * *outpd2);
1000d5d4:	4653      	mov	r3, sl
1000d5d6:	46ca      	mov	sl, r9
1000d5d8:	4699      	mov	r9, r3
1000d5da:	4653      	mov	r3, sl
1000d5dc:	9a00      	ldr	r2, [sp, #0]
1000d5de:	681b      	ldr	r3, [r3, #0]
1000d5e0:	2000      	movs	r0, #0
1000d5e2:	429a      	cmp	r2, r3
1000d5e4:	d10d      	bne.n	1000d602 <_Z12FindSysClockmPmS_PtPhS1_+0x256>
1000d5e6:	9b10      	ldr	r3, [sp, #64]	; 0x40
1000d5e8:	9a11      	ldr	r2, [sp, #68]	; 0x44
1000d5ea:	781b      	ldrb	r3, [r3, #0]
1000d5ec:	7810      	ldrb	r0, [r2, #0]
1000d5ee:	4358      	muls	r0, r3
1000d5f0:	9b00      	ldr	r3, [sp, #0]
1000d5f2:	4343      	muls	r3, r0
1000d5f4:	0018      	movs	r0, r3
1000d5f6:	464b      	mov	r3, r9
1000d5f8:	681b      	ldr	r3, [r3, #0]
1000d5fa:	1ac0      	subs	r0, r0, r3
1000d5fc:	4243      	negs	r3, r0
1000d5fe:	4158      	adcs	r0, r3
1000d600:	b2c0      	uxtb	r0, r0

	// find PLL setup
	return vcocalc(reqkhz, input, 400000, 1600000, false,  outkhz, outvco, outfbdiv, outpd1, outpd2);
}
1000d602:	b007      	add	sp, #28
1000d604:	bcf0      	pop	{r4, r5, r6, r7}
1000d606:	46bb      	mov	fp, r7
1000d608:	46b2      	mov	sl, r6
1000d60a:	46a9      	mov	r9, r5
1000d60c:	46a0      	mov	r8, r4
1000d60e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d610:	fff9e580 	.word	0xfff9e580
1000d614:	000186a0 	.word	0x000186a0
1000d618:	00061a80 	.word	0x00061a80
1000d61c:	00124f80 	.word	0x00124f80

1000d620 <_Z10PrintSetupPhiii>:
// use mono mode
Bool PrintMonoMode;

// setup print service (if bufwb < 2*bufw, use mono text)
void PrintSetup(u8* buf, int bufw, int bufh, int bufwb)
{
1000d620:	b510      	push	{r4, lr}
	PrintBuf = buf;
1000d622:	4c0c      	ldr	r4, [pc, #48]	; (1000d654 <_Z10PrintSetupPhiii+0x34>)
1000d624:	6020      	str	r0, [r4, #0]
	PrintBufW = bufw;
1000d626:	480c      	ldr	r0, [pc, #48]	; (1000d658 <_Z10PrintSetupPhiii+0x38>)
1000d628:	6001      	str	r1, [r0, #0]
	PrintBufH = bufh;
1000d62a:	480c      	ldr	r0, [pc, #48]	; (1000d65c <_Z10PrintSetupPhiii+0x3c>)
	PrintBufWB = bufwb;
	PrintX = 0;
	PrintY = 0;
	PrintMonoMode = (bufwb < 2*bufw);
1000d62c:	0049      	lsls	r1, r1, #1
	PrintBufH = bufh;
1000d62e:	6002      	str	r2, [r0, #0]
	PrintBufWB = bufwb;
1000d630:	4a0b      	ldr	r2, [pc, #44]	; (1000d660 <_Z10PrintSetupPhiii+0x40>)
	PrintX = 0;
1000d632:	480c      	ldr	r0, [pc, #48]	; (1000d664 <_Z10PrintSetupPhiii+0x44>)
	PrintBufWB = bufwb;
1000d634:	6013      	str	r3, [r2, #0]
	PrintX = 0;
1000d636:	2200      	movs	r2, #0
1000d638:	6002      	str	r2, [r0, #0]
	PrintY = 0;
1000d63a:	480b      	ldr	r0, [pc, #44]	; (1000d668 <_Z10PrintSetupPhiii+0x48>)
1000d63c:	6002      	str	r2, [r0, #0]
	PrintMonoMode = (bufwb < 2*bufw);
1000d63e:	2201      	movs	r2, #1
1000d640:	4299      	cmp	r1, r3
1000d642:	dc00      	bgt.n	1000d646 <_Z10PrintSetupPhiii+0x26>
1000d644:	2200      	movs	r2, #0
1000d646:	4b09      	ldr	r3, [pc, #36]	; (1000d66c <_Z10PrintSetupPhiii+0x4c>)
1000d648:	701a      	strb	r2, [r3, #0]
	PrintCol = PC_COLOR(PC_BLACK, PC_WHITE);
1000d64a:	220f      	movs	r2, #15
1000d64c:	4b08      	ldr	r3, [pc, #32]	; (1000d670 <_Z10PrintSetupPhiii+0x50>)
1000d64e:	701a      	strb	r2, [r3, #0]
}
1000d650:	bd10      	pop	{r4, pc}
1000d652:	46c0      	nop			; (mov r8, r8)
1000d654:	20006414 	.word	0x20006414
1000d658:	2000641c 	.word	0x2000641c
1000d65c:	20006418 	.word	0x20006418
1000d660:	20006420 	.word	0x20006420
1000d664:	20006424 	.word	0x20006424
1000d668:	20006428 	.word	0x20006428
1000d66c:	2001276f 	.word	0x2001276f
1000d670:	2001276e 	.word	0x2001276e

1000d674 <_Z10PrintClearv>:

// clear text screen, using current color
void PrintClear()
{
1000d674:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d676:	464f      	mov	r7, r9
1000d678:	46d6      	mov	lr, sl
1000d67a:	4646      	mov	r6, r8
1000d67c:	b5c0      	push	{r6, r7, lr}
	int i, y;
	u8* d;
	u8 col = PrintCol;
1000d67e:	4b1b      	ldr	r3, [pc, #108]	; (1000d6ec <_Z10PrintClearv+0x78>)
	for (y = 0; y < PrintBufH; y++)
1000d680:	4f1b      	ldr	r7, [pc, #108]	; (1000d6f0 <_Z10PrintClearv+0x7c>)
	u8 col = PrintCol;
1000d682:	781d      	ldrb	r5, [r3, #0]
	for (y = 0; y < PrintBufH; y++)
1000d684:	683b      	ldr	r3, [r7, #0]
1000d686:	2b00      	cmp	r3, #0
1000d688:	dd25      	ble.n	1000d6d6 <_Z10PrintClearv+0x62>
1000d68a:	4b1a      	ldr	r3, [pc, #104]	; (1000d6f4 <_Z10PrintClearv+0x80>)
1000d68c:	2600      	movs	r6, #0
1000d68e:	4699      	mov	r9, r3
1000d690:	4b19      	ldr	r3, [pc, #100]	; (1000d6f8 <_Z10PrintClearv+0x84>)
	{
		d = &PrintBuf[y*PrintBufWB];
		for (i = PrintBufW; i > 0; i--)
		{
			*d++ = ' ';
1000d692:	2020      	movs	r0, #32
1000d694:	4698      	mov	r8, r3
1000d696:	4b19      	ldr	r3, [pc, #100]	; (1000d6fc <_Z10PrintClearv+0x88>)
1000d698:	4c19      	ldr	r4, [pc, #100]	; (1000d700 <_Z10PrintClearv+0x8c>)
1000d69a:	469c      	mov	ip, r3
		d = &PrintBuf[y*PrintBufWB];
1000d69c:	464a      	mov	r2, r9
1000d69e:	4643      	mov	r3, r8
1000d6a0:	6812      	ldr	r2, [r2, #0]
1000d6a2:	681b      	ldr	r3, [r3, #0]
1000d6a4:	4692      	mov	sl, r2
		for (i = PrintBufW; i > 0; i--)
1000d6a6:	4662      	mov	r2, ip
		d = &PrintBuf[y*PrintBufWB];
1000d6a8:	4373      	muls	r3, r6
		for (i = PrintBufW; i > 0; i--)
1000d6aa:	6812      	ldr	r2, [r2, #0]
		d = &PrintBuf[y*PrintBufWB];
1000d6ac:	4453      	add	r3, sl
		for (i = PrintBufW; i > 0; i--)
1000d6ae:	2a00      	cmp	r2, #0
1000d6b0:	dc04      	bgt.n	1000d6bc <_Z10PrintClearv+0x48>
1000d6b2:	e010      	b.n	1000d6d6 <_Z10PrintClearv+0x62>
1000d6b4:	3a01      	subs	r2, #1
			*d++ = ' ';
1000d6b6:	3301      	adds	r3, #1
		for (i = PrintBufW; i > 0; i--)
1000d6b8:	2a00      	cmp	r2, #0
1000d6ba:	d008      	beq.n	1000d6ce <_Z10PrintClearv+0x5a>
			*d++ = ' ';
1000d6bc:	7018      	strb	r0, [r3, #0]
			if (!PrintMonoMode) *d++ = col;
1000d6be:	7821      	ldrb	r1, [r4, #0]
1000d6c0:	2900      	cmp	r1, #0
1000d6c2:	d1f7      	bne.n	1000d6b4 <_Z10PrintClearv+0x40>
		for (i = PrintBufW; i > 0; i--)
1000d6c4:	3a01      	subs	r2, #1
			if (!PrintMonoMode) *d++ = col;
1000d6c6:	705d      	strb	r5, [r3, #1]
1000d6c8:	3302      	adds	r3, #2
		for (i = PrintBufW; i > 0; i--)
1000d6ca:	2a00      	cmp	r2, #0
1000d6cc:	d1f6      	bne.n	1000d6bc <_Z10PrintClearv+0x48>
	for (y = 0; y < PrintBufH; y++)
1000d6ce:	683b      	ldr	r3, [r7, #0]
1000d6d0:	3601      	adds	r6, #1
1000d6d2:	42b3      	cmp	r3, r6
1000d6d4:	dce2      	bgt.n	1000d69c <_Z10PrintClearv+0x28>
		}
	}
	PrintX = 0;
1000d6d6:	2300      	movs	r3, #0
1000d6d8:	4a0a      	ldr	r2, [pc, #40]	; (1000d704 <_Z10PrintClearv+0x90>)
1000d6da:	6013      	str	r3, [r2, #0]
	PrintY = 0;
1000d6dc:	4a0a      	ldr	r2, [pc, #40]	; (1000d708 <_Z10PrintClearv+0x94>)
1000d6de:	6013      	str	r3, [r2, #0]
}
1000d6e0:	bce0      	pop	{r5, r6, r7}
1000d6e2:	46ba      	mov	sl, r7
1000d6e4:	46b1      	mov	r9, r6
1000d6e6:	46a8      	mov	r8, r5
1000d6e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d6ea:	46c0      	nop			; (mov r8, r8)
1000d6ec:	2001276e 	.word	0x2001276e
1000d6f0:	20006418 	.word	0x20006418
1000d6f4:	20006414 	.word	0x20006414
1000d6f8:	20006420 	.word	0x20006420
1000d6fc:	2000641c 	.word	0x2000641c
1000d700:	2001276f 	.word	0x2001276f
1000d704:	20006424 	.word	0x20006424
1000d708:	20006428 	.word	0x20006428

1000d70c <_ZN7cRandom8InitSeedEv>:
// ============================================================================
//                   Set random seed from ROSC counter
// ============================================================================

void cRandom::InitSeed()
{
1000d70c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d70e:	46c6      	mov	lr, r8
1000d710:	2240      	movs	r2, #64	; 0x40
	int i;
	for (i = 64; i > 0; i--) m_Seed = (m_Seed << 1) | (rosc_hw->randombit & 1);
1000d712:	2701      	movs	r7, #1
{
1000d714:	b500      	push	{lr}
	for (i = 64; i > 0; i--) m_Seed = (m_Seed << 1) | (rosc_hw->randombit & 1);
1000d716:	4e15      	ldr	r6, [pc, #84]	; (1000d76c <_ZN7cRandom8InitSeedEv+0x60>)
{
1000d718:	4680      	mov	r8, r0
1000d71a:	6841      	ldr	r1, [r0, #4]
1000d71c:	6800      	ldr	r0, [r0, #0]
	for (i = 64; i > 0; i--) m_Seed = (m_Seed << 1) | (rosc_hw->randombit & 1);
1000d71e:	0004      	movs	r4, r0
1000d720:	000d      	movs	r5, r1
1000d722:	1824      	adds	r4, r4, r0
1000d724:	414d      	adcs	r5, r1
1000d726:	69f3      	ldr	r3, [r6, #28]
1000d728:	3a01      	subs	r2, #1
1000d72a:	403b      	ands	r3, r7
1000d72c:	4323      	orrs	r3, r4
1000d72e:	0018      	movs	r0, r3
1000d730:	0029      	movs	r1, r5
1000d732:	2a00      	cmp	r2, #0
1000d734:	d1f3      	bne.n	1000d71e <_ZN7cRandom8InitSeedEv+0x12>
public:

	// shift random generator seed
	inline void Shift()
	{
		m_Seed = m_Seed*214013 + 2531011;
1000d736:	2300      	movs	r3, #0
1000d738:	4a0d      	ldr	r2, [pc, #52]	; (1000d770 <_ZN7cRandom8InitSeedEv+0x64>)
1000d73a:	f7f3 f933 	bl	100009a4 <__wrap___aeabi_lmul>
1000d73e:	2500      	movs	r5, #0
1000d740:	4c0c      	ldr	r4, [pc, #48]	; (1000d774 <_ZN7cRandom8InitSeedEv+0x68>)
1000d742:	1900      	adds	r0, r0, r4
1000d744:	4169      	adcs	r1, r5
	i = (this->U8() & 0x1f) + 5;
1000d746:	00cf      	lsls	r7, r1, #3
1000d748:	0eff      	lsrs	r7, r7, #27
1000d74a:	3705      	adds	r7, #5
1000d74c:	2300      	movs	r3, #0
1000d74e:	4a08      	ldr	r2, [pc, #32]	; (1000d770 <_ZN7cRandom8InitSeedEv+0x64>)
1000d750:	f7f3 f928 	bl	100009a4 <__wrap___aeabi_lmul>
	for (; i > 0; i--) this->Shift();
1000d754:	3f01      	subs	r7, #1
1000d756:	1900      	adds	r0, r0, r4
1000d758:	4169      	adcs	r1, r5
1000d75a:	2f00      	cmp	r7, #0
1000d75c:	d1f6      	bne.n	1000d74c <_ZN7cRandom8InitSeedEv+0x40>
}
1000d75e:	4643      	mov	r3, r8
1000d760:	6018      	str	r0, [r3, #0]
1000d762:	6059      	str	r1, [r3, #4]
1000d764:	bc80      	pop	{r7}
1000d766:	46b8      	mov	r8, r7
1000d768:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d76a:	46c0      	nop			; (mov r8, r8)
1000d76c:	40060000 	.word	0x40060000
1000d770:	000343fd 	.word	0x000343fd
1000d774:	00269ec3 	.word	0x00269ec3

1000d778 <_ZN7cRandom2U8Ev>:
// ============================================================================
//            generate random number in full range of BYTE
// ============================================================================

u8 cRandom::U8()
{
1000d778:	b510      	push	{r4, lr}
1000d77a:	2300      	movs	r3, #0
1000d77c:	0004      	movs	r4, r0
1000d77e:	6841      	ldr	r1, [r0, #4]
1000d780:	6800      	ldr	r0, [r0, #0]
1000d782:	4a05      	ldr	r2, [pc, #20]	; (1000d798 <_ZN7cRandom2U8Ev+0x20>)
1000d784:	f7f3 f90e 	bl	100009a4 <__wrap___aeabi_lmul>
1000d788:	2300      	movs	r3, #0
1000d78a:	4a04      	ldr	r2, [pc, #16]	; (1000d79c <_ZN7cRandom2U8Ev+0x24>)
1000d78c:	1812      	adds	r2, r2, r0
1000d78e:	414b      	adcs	r3, r1
	this->Shift();
	return (u8)(m_Seed >> (64-8));
1000d790:	0e18      	lsrs	r0, r3, #24
1000d792:	6022      	str	r2, [r4, #0]
1000d794:	6063      	str	r3, [r4, #4]
}
1000d796:	bd10      	pop	{r4, pc}
1000d798:	000343fd 	.word	0x000343fd
1000d79c:	00269ec3 	.word	0x00269ec3

1000d7a0 <_ZN7cRandom5U8MaxEh>:
// ============================================================================
//         generate BYTE random number in range 0 to MAX (including)
// ============================================================================

u8 cRandom::U8Max(u8 max)
{
1000d7a0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d7a2:	46c6      	mov	lr, r8
1000d7a4:	000f      	movs	r7, r1
1000d7a6:	4680      	mov	r8, r0
1000d7a8:	b500      	push	{lr}
	u8 res;
	u8 mask;

	// zero maximal value
	if (max == 0) return 0;
1000d7aa:	2900      	cmp	r1, #0
1000d7ac:	d01a      	beq.n	1000d7e4 <_ZN7cRandom5U8MaxEh+0x44>

	// prepare mask
	res = 0xff;
1000d7ae:	23ff      	movs	r3, #255	; 0xff
	do {
		mask = res;
		res >>= 1;
1000d7b0:	001e      	movs	r6, r3
1000d7b2:	085b      	lsrs	r3, r3, #1
	} while (res >= max);
1000d7b4:	429f      	cmp	r7, r3
1000d7b6:	d9fb      	bls.n	1000d7b0 <_ZN7cRandom5U8MaxEh+0x10>
1000d7b8:	4643      	mov	r3, r8
1000d7ba:	2500      	movs	r5, #0
1000d7bc:	6818      	ldr	r0, [r3, #0]
1000d7be:	6859      	ldr	r1, [r3, #4]
1000d7c0:	4c09      	ldr	r4, [pc, #36]	; (1000d7e8 <_ZN7cRandom5U8MaxEh+0x48>)
1000d7c2:	2300      	movs	r3, #0
1000d7c4:	4a09      	ldr	r2, [pc, #36]	; (1000d7ec <_ZN7cRandom5U8MaxEh+0x4c>)
1000d7c6:	f7f3 f8ed 	bl	100009a4 <__wrap___aeabi_lmul>
1000d7ca:	1900      	adds	r0, r0, r4
1000d7cc:	4169      	adcs	r1, r5
	return (u8)(m_Seed >> (64-8));
1000d7ce:	0e0b      	lsrs	r3, r1, #24

	// generate random number
	do {
		res = this->U8() & mask;
1000d7d0:	4033      	ands	r3, r6
	} while (res > max);
1000d7d2:	429f      	cmp	r7, r3
1000d7d4:	d3f5      	bcc.n	1000d7c2 <_ZN7cRandom5U8MaxEh+0x22>
1000d7d6:	4642      	mov	r2, r8
1000d7d8:	6010      	str	r0, [r2, #0]
1000d7da:	6051      	str	r1, [r2, #4]

	return res;
}
1000d7dc:	0018      	movs	r0, r3
1000d7de:	bc80      	pop	{r7}
1000d7e0:	46b8      	mov	r8, r7
1000d7e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (max == 0) return 0;
1000d7e4:	2300      	movs	r3, #0
1000d7e6:	e7f9      	b.n	1000d7dc <_ZN7cRandom5U8MaxEh+0x3c>
1000d7e8:	00269ec3 	.word	0x00269ec3
1000d7ec:	000343fd 	.word	0x000343fd

1000d7f0 <_Z9PWMSndIrqv>:
 *  \ingroup hardware_pwm
 *
 * \param slice_num PWM slice number
 */
static inline void pwm_clear_irq(uint slice_num) {
    pwm_hw->intr = 1u << slice_num;
1000d7f0:	2102      	movs	r1, #2
1000d7f2:	23a4      	movs	r3, #164	; 0xa4
1000d7f4:	4a11      	ldr	r2, [pc, #68]	; (1000d83c <_Z9PWMSndIrqv+0x4c>)
const u8* NextSound = NULL; // next sound to play repeated sound
int NextSoundCnt = 0; // counter of next sound (0=no repeated sound)

// PWM sound interrupt service
void PWMSndIrq()
{
1000d7f6:	b5f0      	push	{r4, r5, r6, r7, lr}

	// default sample if no sound		
	u8 samp = 128;

	// check if sound is playing
	int cnt = SoundCnt;
1000d7f8:	4c11      	ldr	r4, [pc, #68]	; (1000d840 <_Z9PWMSndIrqv+0x50>)
1000d7fa:	50d1      	str	r1, [r2, r3]
1000d7fc:	6822      	ldr	r2, [r4, #0]
	if (cnt > 0)
1000d7fe:	317e      	adds	r1, #126	; 0x7e
1000d800:	2a00      	cmp	r2, #0
1000d802:	dd12      	ble.n	1000d82a <_Z9PWMSndIrqv+0x3a>
		// get next sample
		const u8* snd = CurSound;
		samp = *snd;

		// increment pointer accumulator
		int acc = SoundAcc + SoundInc;
1000d804:	4e0f      	ldr	r6, [pc, #60]	; (1000d844 <_Z9PWMSndIrqv+0x54>)
1000d806:	4f10      	ldr	r7, [pc, #64]	; (1000d848 <_Z9PWMSndIrqv+0x58>)
		const u8* snd = CurSound;
1000d808:	4d10      	ldr	r5, [pc, #64]	; (1000d84c <_Z9PWMSndIrqv+0x5c>)
		int acc = SoundAcc + SoundInc;
1000d80a:	683f      	ldr	r7, [r7, #0]
1000d80c:	6833      	ldr	r3, [r6, #0]
		const u8* snd = CurSound;
1000d80e:	6828      	ldr	r0, [r5, #0]
		int acc = SoundAcc + SoundInc;
1000d810:	19db      	adds	r3, r3, r7
		int i = acc >> SNDFRAC; // whole increment
1000d812:	129f      	asrs	r7, r3, #10
		snd += i;
		cnt -= i;
		acc &= (SNDINT-1);
1000d814:	059b      	lsls	r3, r3, #22
		samp = *snd;
1000d816:	7801      	ldrb	r1, [r0, #0]
		cnt -= i;
1000d818:	1bd2      	subs	r2, r2, r7
		acc &= (SNDINT-1);
1000d81a:	0d9b      	lsrs	r3, r3, #22
		snd += i;
1000d81c:	19c0      	adds	r0, r0, r7

		// repeated sample
		if (cnt <= 0)
1000d81e:	2a00      	cmp	r2, #0
1000d820:	dd06      	ble.n	1000d830 <_Z9PWMSndIrqv+0x40>
			cnt = NextSoundCnt;
			snd = NextSound;
		}

		// save new pointer
		SoundCnt = cnt;
1000d822:	6022      	str	r2, [r4, #0]
		SoundAcc = acc;
		CurSound = snd;
1000d824:	6028      	str	r0, [r5, #0]
		SoundAcc = acc;
1000d826:	6033      	str	r3, [r6, #0]
	}

	// write PWM sample
	((u16*)&pwm_hw->slice[PWMSND_SLICE].cc)[PWMSND_CHAN] = samp;
1000d828:	b289      	uxth	r1, r1
1000d82a:	4a09      	ldr	r2, [pc, #36]	; (1000d850 <_Z9PWMSndIrqv+0x60>)
1000d82c:	8011      	strh	r1, [r2, #0]
}
1000d82e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			cnt = NextSoundCnt;
1000d830:	4a08      	ldr	r2, [pc, #32]	; (1000d854 <_Z9PWMSndIrqv+0x64>)
			snd = NextSound;
1000d832:	4809      	ldr	r0, [pc, #36]	; (1000d858 <_Z9PWMSndIrqv+0x68>)
			cnt = NextSoundCnt;
1000d834:	6812      	ldr	r2, [r2, #0]
			snd = NextSound;
1000d836:	6800      	ldr	r0, [r0, #0]
1000d838:	e7f3      	b.n	1000d822 <_Z9PWMSndIrqv+0x32>
1000d83a:	46c0      	nop			; (mov r8, r8)
1000d83c:	40050000 	.word	0x40050000
1000d840:	20007838 	.word	0x20007838
1000d844:	20007834 	.word	0x20007834
1000d848:	200027f0 	.word	0x200027f0
1000d84c:	200049e4 	.word	0x200049e4
1000d850:	40050022 	.word	0x40050022
1000d854:	20006204 	.word	0x20006204
1000d858:	20006200 	.word	0x20006200

1000d85c <_Z10PWMSndInitv>:

// initialize PWM sound output
//  GP19 ... MOSI + sound output (PWM1 B)
void PWMSndInit()
{
1000d85c:	b570      	push	{r4, r5, r6, lr}
	// set GPIO function to PWM
	gpio_set_function(PWMSND_GPIO, GPIO_FUNC_PWM);

	// set IRQ handler
	SoundCnt = 0;
1000d85e:	2500      	movs	r5, #0
	gpio_set_function(PWMSND_GPIO, GPIO_FUNC_PWM);
1000d860:	2104      	movs	r1, #4
1000d862:	2013      	movs	r0, #19
1000d864:	f7f3 fc06 	bl	10001074 <gpio_set_function>
	SoundCnt = 0;
1000d868:	4b14      	ldr	r3, [pc, #80]	; (1000d8bc <_Z10PWMSndInitv+0x60>)
1000d86a:	22a4      	movs	r2, #164	; 0xa4
1000d86c:	601d      	str	r5, [r3, #0]
1000d86e:	2302      	movs	r3, #2
1000d870:	4c13      	ldr	r4, [pc, #76]	; (1000d8c0 <_Z10PWMSndInitv+0x64>)
	pwm_clear_irq(PWMSND_SLICE);
	pwm_set_irq_enabled(PWMSND_SLICE, true);
	irq_set_exclusive_handler(PWM_IRQ_WRAP, PWMSndIrq);
1000d872:	2004      	movs	r0, #4
1000d874:	50a3      	str	r3, [r4, r2]
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
1000d876:	4a13      	ldr	r2, [pc, #76]	; (1000d8c4 <_Z10PWMSndInitv+0x68>)
1000d878:	4913      	ldr	r1, [pc, #76]	; (1000d8c8 <_Z10PWMSndInitv+0x6c>)
1000d87a:	6013      	str	r3, [r2, #0]
1000d87c:	f7f3 fc7c 	bl	10001178 <irq_set_exclusive_handler>
	irq_set_enabled(PWM_IRQ_WRAP, true);
1000d880:	2101      	movs	r1, #1
1000d882:	2004      	movs	r0, #4
1000d884:	f7f3 fc56 	bl	10001134 <irq_set_enabled>
	pwm_config cfg = pwm_get_default_config();

	// set clock divider (INT = 0..255, FRAC = 1/16..15/16)
	//  125 MHz: 125000000/5644800 = 22.144, INT=22, FRAC=2,
	//     real sample rate = 125000000/(22+2/16)/256 = 22069Hz
	pwm_config_set_clkdiv(&cfg, (float)clock_get_hz(clk_sys)/PWMSND_CLOCK + 0.03f); // 0.03f = rounding 0.5/16
1000d888:	2005      	movs	r0, #5
1000d88a:	f7f3 fb4f 	bl	10000f2c <clock_get_hz>
1000d88e:	f7f2 fff3 	bl	10000878 <__wrap___aeabi_ui2f>
1000d892:	490e      	ldr	r1, [pc, #56]	; (1000d8cc <_Z10PWMSndInitv+0x70>)
1000d894:	f7f2 ffe7 	bl	10000866 <__wrap___aeabi_fdiv>
1000d898:	490d      	ldr	r1, [pc, #52]	; (1000d8d0 <_Z10PWMSndInitv+0x74>)
1000d89a:	f7f2 ffe1 	bl	10000860 <__wrap___aeabi_fadd>
    c->div = (uint32_t)(div * (float)(1u << PWM_CH1_DIV_INT_LSB));
1000d89e:	2183      	movs	r1, #131	; 0x83
1000d8a0:	05c9      	lsls	r1, r1, #23
1000d8a2:	f7f2 ffe3 	bl	1000086c <__wrap___aeabi_fmul>
1000d8a6:	f7f3 f841 	bl	1000092c <__wrap___aeabi_f2uiz>
    pwm_hw->slice[slice_num].top = c->top;
1000d8aa:	23ff      	movs	r3, #255	; 0xff
    pwm_hw->slice[slice_num].csr = 0;
1000d8ac:	6165      	str	r5, [r4, #20]
    pwm_hw->slice[slice_num].ctr = PWM_CH0_CTR_RESET;
1000d8ae:	61e5      	str	r5, [r4, #28]
    pwm_hw->slice[slice_num].cc = PWM_CH0_CC_RESET;
1000d8b0:	6225      	str	r5, [r4, #32]
    pwm_hw->slice[slice_num].top = c->top;
1000d8b2:	6263      	str	r3, [r4, #36]	; 0x24
    pwm_hw->slice[slice_num].csr = c->csr | (!!start << PWM_CH0_CSR_EN_LSB);
1000d8b4:	3bfe      	subs	r3, #254	; 0xfe
    pwm_hw->slice[slice_num].div = c->div;
1000d8b6:	61a0      	str	r0, [r4, #24]
    pwm_hw->slice[slice_num].csr = c->csr | (!!start << PWM_CH0_CSR_EN_LSB);
1000d8b8:	6163      	str	r3, [r4, #20]
	// set period to 256 cycles
	pwm_config_set_wrap(&cfg, PWMSND_TOP);

	// start PWM
	pwm_init(PWMSND_SLICE, &cfg, True);
}
1000d8ba:	bd70      	pop	{r4, r5, r6, pc}
1000d8bc:	20007838 	.word	0x20007838
1000d8c0:	40050000 	.word	0x40050000
1000d8c4:	400520a8 	.word	0x400520a8
1000d8c8:	1000d7f1 	.word	0x1000d7f1
1000d8cc:	4aac4400 	.word	0x4aac4400
1000d8d0:	3cf5c28f 	.word	0x3cf5c28f

1000d8d4 <_Z9PlaySoundPKhihf>:
//  snd = pointer to sound
//  len = length of sound in number of samples
//  speed = relative speed (1=normal)
//  rep = True to repeat sample
void PlaySound(const u8* snd, int len, Bool rep /* = False */, float speed /* = 1.0f */)
{
1000d8d4:	b570      	push	{r4, r5, r6, lr}
1000d8d6:	0005      	movs	r5, r0
1000d8d8:	000c      	movs	r4, r1
1000d8da:	1c18      	adds	r0, r3, #0
1000d8dc:	f3bf 8f5f 	dmb	sy
	// stop current sound
	__dmb();
	SoundCnt = 0;
1000d8e0:	2300      	movs	r3, #0
1000d8e2:	4e11      	ldr	r6, [pc, #68]	; (1000d928 <_Z9PlaySoundPKhihf+0x54>)
1000d8e4:	6033      	str	r3, [r6, #0]
1000d8e6:	f3bf 8f5f 	dmb	sy
	__dmb();

	// repeated sound
	NextSoundCnt = 0;
1000d8ea:	4910      	ldr	r1, [pc, #64]	; (1000d92c <_Z9PlaySoundPKhihf+0x58>)
1000d8ec:	600b      	str	r3, [r1, #0]
	if (rep)
1000d8ee:	2a00      	cmp	r2, #0
1000d8f0:	d002      	beq.n	1000d8f8 <_Z9PlaySoundPKhihf+0x24>
	{
		NextSound = snd;
1000d8f2:	4b0f      	ldr	r3, [pc, #60]	; (1000d930 <_Z9PlaySoundPKhihf+0x5c>)
		NextSoundCnt = len;
1000d8f4:	600c      	str	r4, [r1, #0]
		NextSound = snd;
1000d8f6:	601d      	str	r5, [r3, #0]
	}

	// sound speed
	SoundInc = (int)(SNDINT*speed + 0.5f);
1000d8f8:	2189      	movs	r1, #137	; 0x89
1000d8fa:	05c9      	lsls	r1, r1, #23
1000d8fc:	f7f2 ffb6 	bl	1000086c <__wrap___aeabi_fmul>
1000d900:	21fc      	movs	r1, #252	; 0xfc
1000d902:	0589      	lsls	r1, r1, #22
1000d904:	f7f2 ffac 	bl	10000860 <__wrap___aeabi_fadd>
1000d908:	f7f2 ffde 	bl	100008c8 <__wrap___aeabi_f2iz>
	SoundAcc = 0;
1000d90c:	2200      	movs	r2, #0
	SoundInc = (int)(SNDINT*speed + 0.5f);
1000d90e:	4b09      	ldr	r3, [pc, #36]	; (1000d934 <_Z9PlaySoundPKhihf+0x60>)
1000d910:	6018      	str	r0, [r3, #0]
	SoundAcc = 0;
1000d912:	4b09      	ldr	r3, [pc, #36]	; (1000d938 <_Z9PlaySoundPKhihf+0x64>)
1000d914:	601a      	str	r2, [r3, #0]

	// start current sound
	CurSound = snd;
1000d916:	4b09      	ldr	r3, [pc, #36]	; (1000d93c <_Z9PlaySoundPKhihf+0x68>)
1000d918:	601d      	str	r5, [r3, #0]
1000d91a:	f3bf 8f5f 	dmb	sy
	__dmb();
	SoundCnt = len;
1000d91e:	6034      	str	r4, [r6, #0]
1000d920:	f3bf 8f5f 	dmb	sy
	__dmb();
}
1000d924:	bd70      	pop	{r4, r5, r6, pc}
1000d926:	46c0      	nop			; (mov r8, r8)
1000d928:	20007838 	.word	0x20007838
1000d92c:	20006204 	.word	0x20006204
1000d930:	20006200 	.word	0x20006200
1000d934:	200027f0 	.word	0x200027f0
1000d938:	20007834 	.word	0x20007834
1000d93c:	200049e4 	.word	0x200049e4

1000d940 <calloc>:
1000d940:	0003      	movs	r3, r0
1000d942:	b510      	push	{r4, lr}
1000d944:	000a      	movs	r2, r1
1000d946:	4903      	ldr	r1, [pc, #12]	; (1000d954 <calloc+0x14>)
1000d948:	6808      	ldr	r0, [r1, #0]
1000d94a:	0019      	movs	r1, r3
1000d94c:	f000 f804 	bl	1000d958 <_calloc_r>
1000d950:	bd10      	pop	{r4, pc}
1000d952:	46c0      	nop			; (mov r8, r8)
1000d954:	200027f4 	.word	0x200027f4

1000d958 <_calloc_r>:
1000d958:	b570      	push	{r4, r5, r6, lr}
1000d95a:	0c0b      	lsrs	r3, r1, #16
1000d95c:	2400      	movs	r4, #0
1000d95e:	0c15      	lsrs	r5, r2, #16
1000d960:	2b00      	cmp	r3, #0
1000d962:	d128      	bne.n	1000d9b6 <_calloc_r+0x5e>
1000d964:	2d00      	cmp	r5, #0
1000d966:	d137      	bne.n	1000d9d8 <_calloc_r+0x80>
1000d968:	b28b      	uxth	r3, r1
1000d96a:	b291      	uxth	r1, r2
1000d96c:	4359      	muls	r1, r3
1000d96e:	f000 f851 	bl	1000da14 <_malloc_r>
1000d972:	1e05      	subs	r5, r0, #0
1000d974:	d019      	beq.n	1000d9aa <_calloc_r+0x52>
1000d976:	0003      	movs	r3, r0
1000d978:	3b08      	subs	r3, #8
1000d97a:	685a      	ldr	r2, [r3, #4]
1000d97c:	2303      	movs	r3, #3
1000d97e:	439a      	bics	r2, r3
1000d980:	3a04      	subs	r2, #4
1000d982:	2a24      	cmp	r2, #36	; 0x24
1000d984:	d813      	bhi.n	1000d9ae <_calloc_r+0x56>
1000d986:	0003      	movs	r3, r0
1000d988:	2a13      	cmp	r2, #19
1000d98a:	d90a      	bls.n	1000d9a2 <_calloc_r+0x4a>
1000d98c:	6004      	str	r4, [r0, #0]
1000d98e:	6044      	str	r4, [r0, #4]
1000d990:	3308      	adds	r3, #8
1000d992:	2a1b      	cmp	r2, #27
1000d994:	d905      	bls.n	1000d9a2 <_calloc_r+0x4a>
1000d996:	6084      	str	r4, [r0, #8]
1000d998:	60c4      	str	r4, [r0, #12]
1000d99a:	2a24      	cmp	r2, #36	; 0x24
1000d99c:	d025      	beq.n	1000d9ea <_calloc_r+0x92>
1000d99e:	0003      	movs	r3, r0
1000d9a0:	3310      	adds	r3, #16
1000d9a2:	2200      	movs	r2, #0
1000d9a4:	601a      	str	r2, [r3, #0]
1000d9a6:	605a      	str	r2, [r3, #4]
1000d9a8:	609a      	str	r2, [r3, #8]
1000d9aa:	0028      	movs	r0, r5
1000d9ac:	bd70      	pop	{r4, r5, r6, pc}
1000d9ae:	2100      	movs	r1, #0
1000d9b0:	f7f2 ffec 	bl	1000098c <__wrap_memset>
1000d9b4:	e7f9      	b.n	1000d9aa <_calloc_r+0x52>
1000d9b6:	2d00      	cmp	r5, #0
1000d9b8:	d111      	bne.n	1000d9de <_calloc_r+0x86>
1000d9ba:	1c15      	adds	r5, r2, #0
1000d9bc:	b289      	uxth	r1, r1
1000d9be:	b292      	uxth	r2, r2
1000d9c0:	434a      	muls	r2, r1
1000d9c2:	b2ad      	uxth	r5, r5
1000d9c4:	b29b      	uxth	r3, r3
1000d9c6:	436b      	muls	r3, r5
1000d9c8:	0c11      	lsrs	r1, r2, #16
1000d9ca:	185b      	adds	r3, r3, r1
1000d9cc:	0c19      	lsrs	r1, r3, #16
1000d9ce:	d106      	bne.n	1000d9de <_calloc_r+0x86>
1000d9d0:	0419      	lsls	r1, r3, #16
1000d9d2:	b292      	uxth	r2, r2
1000d9d4:	4311      	orrs	r1, r2
1000d9d6:	e7ca      	b.n	1000d96e <_calloc_r+0x16>
1000d9d8:	1c2b      	adds	r3, r5, #0
1000d9da:	1c0d      	adds	r5, r1, #0
1000d9dc:	e7ee      	b.n	1000d9bc <_calloc_r+0x64>
1000d9de:	f000 f809 	bl	1000d9f4 <__errno>
1000d9e2:	230c      	movs	r3, #12
1000d9e4:	2500      	movs	r5, #0
1000d9e6:	6003      	str	r3, [r0, #0]
1000d9e8:	e7df      	b.n	1000d9aa <_calloc_r+0x52>
1000d9ea:	0003      	movs	r3, r0
1000d9ec:	6104      	str	r4, [r0, #16]
1000d9ee:	3318      	adds	r3, #24
1000d9f0:	6144      	str	r4, [r0, #20]
1000d9f2:	e7d6      	b.n	1000d9a2 <_calloc_r+0x4a>

1000d9f4 <__errno>:
1000d9f4:	4b01      	ldr	r3, [pc, #4]	; (1000d9fc <__errno+0x8>)
1000d9f6:	6818      	ldr	r0, [r3, #0]
1000d9f8:	4770      	bx	lr
1000d9fa:	46c0      	nop			; (mov r8, r8)
1000d9fc:	200027f4 	.word	0x200027f4

1000da00 <malloc>:
1000da00:	b510      	push	{r4, lr}
1000da02:	4b03      	ldr	r3, [pc, #12]	; (1000da10 <malloc+0x10>)
1000da04:	0001      	movs	r1, r0
1000da06:	6818      	ldr	r0, [r3, #0]
1000da08:	f000 f804 	bl	1000da14 <_malloc_r>
1000da0c:	bd10      	pop	{r4, pc}
1000da0e:	46c0      	nop			; (mov r8, r8)
1000da10:	200027f4 	.word	0x200027f4

1000da14 <_malloc_r>:
1000da14:	b5f0      	push	{r4, r5, r6, r7, lr}
1000da16:	464e      	mov	r6, r9
1000da18:	4645      	mov	r5, r8
1000da1a:	46de      	mov	lr, fp
1000da1c:	4657      	mov	r7, sl
1000da1e:	b5e0      	push	{r5, r6, r7, lr}
1000da20:	000d      	movs	r5, r1
1000da22:	350b      	adds	r5, #11
1000da24:	0006      	movs	r6, r0
1000da26:	b083      	sub	sp, #12
1000da28:	2d16      	cmp	r5, #22
1000da2a:	d822      	bhi.n	1000da72 <_malloc_r+0x5e>
1000da2c:	2910      	cmp	r1, #16
1000da2e:	d900      	bls.n	1000da32 <_malloc_r+0x1e>
1000da30:	e0b2      	b.n	1000db98 <_malloc_r+0x184>
1000da32:	f000 fab1 	bl	1000df98 <__malloc_lock>
1000da36:	2510      	movs	r5, #16
1000da38:	2318      	movs	r3, #24
1000da3a:	2002      	movs	r0, #2
1000da3c:	4fcc      	ldr	r7, [pc, #816]	; (1000dd70 <_malloc_r+0x35c>)
1000da3e:	18fb      	adds	r3, r7, r3
1000da40:	001a      	movs	r2, r3
1000da42:	685c      	ldr	r4, [r3, #4]
1000da44:	3a08      	subs	r2, #8
1000da46:	4294      	cmp	r4, r2
1000da48:	d100      	bne.n	1000da4c <_malloc_r+0x38>
1000da4a:	e0b5      	b.n	1000dbb8 <_malloc_r+0x1a4>
1000da4c:	2303      	movs	r3, #3
1000da4e:	6862      	ldr	r2, [r4, #4]
1000da50:	439a      	bics	r2, r3
1000da52:	0013      	movs	r3, r2
1000da54:	68e2      	ldr	r2, [r4, #12]
1000da56:	68a1      	ldr	r1, [r4, #8]
1000da58:	60ca      	str	r2, [r1, #12]
1000da5a:	6091      	str	r1, [r2, #8]
1000da5c:	2201      	movs	r2, #1
1000da5e:	18e3      	adds	r3, r4, r3
1000da60:	6859      	ldr	r1, [r3, #4]
1000da62:	0030      	movs	r0, r6
1000da64:	430a      	orrs	r2, r1
1000da66:	605a      	str	r2, [r3, #4]
1000da68:	f000 fa9e 	bl	1000dfa8 <__malloc_unlock>
1000da6c:	0020      	movs	r0, r4
1000da6e:	3008      	adds	r0, #8
1000da70:	e095      	b.n	1000db9e <_malloc_r+0x18a>
1000da72:	2307      	movs	r3, #7
1000da74:	439d      	bics	r5, r3
1000da76:	d500      	bpl.n	1000da7a <_malloc_r+0x66>
1000da78:	e08e      	b.n	1000db98 <_malloc_r+0x184>
1000da7a:	42a9      	cmp	r1, r5
1000da7c:	d900      	bls.n	1000da80 <_malloc_r+0x6c>
1000da7e:	e08b      	b.n	1000db98 <_malloc_r+0x184>
1000da80:	f000 fa8a 	bl	1000df98 <__malloc_lock>
1000da84:	23fc      	movs	r3, #252	; 0xfc
1000da86:	005b      	lsls	r3, r3, #1
1000da88:	429d      	cmp	r5, r3
1000da8a:	d200      	bcs.n	1000da8e <_malloc_r+0x7a>
1000da8c:	e1a7      	b.n	1000ddde <_malloc_r+0x3ca>
1000da8e:	0a68      	lsrs	r0, r5, #9
1000da90:	d100      	bne.n	1000da94 <_malloc_r+0x80>
1000da92:	e08b      	b.n	1000dbac <_malloc_r+0x198>
1000da94:	2804      	cmp	r0, #4
1000da96:	d900      	bls.n	1000da9a <_malloc_r+0x86>
1000da98:	e17a      	b.n	1000dd90 <_malloc_r+0x37c>
1000da9a:	2338      	movs	r3, #56	; 0x38
1000da9c:	4698      	mov	r8, r3
1000da9e:	09a8      	lsrs	r0, r5, #6
1000daa0:	4480      	add	r8, r0
1000daa2:	3039      	adds	r0, #57	; 0x39
1000daa4:	00c1      	lsls	r1, r0, #3
1000daa6:	4fb2      	ldr	r7, [pc, #712]	; (1000dd70 <_malloc_r+0x35c>)
1000daa8:	1879      	adds	r1, r7, r1
1000daaa:	684c      	ldr	r4, [r1, #4]
1000daac:	3908      	subs	r1, #8
1000daae:	42a1      	cmp	r1, r4
1000dab0:	d00e      	beq.n	1000dad0 <_malloc_r+0xbc>
1000dab2:	2303      	movs	r3, #3
1000dab4:	469c      	mov	ip, r3
1000dab6:	e004      	b.n	1000dac2 <_malloc_r+0xae>
1000dab8:	2a00      	cmp	r2, #0
1000daba:	dacb      	bge.n	1000da54 <_malloc_r+0x40>
1000dabc:	68e4      	ldr	r4, [r4, #12]
1000dabe:	42a1      	cmp	r1, r4
1000dac0:	d006      	beq.n	1000dad0 <_malloc_r+0xbc>
1000dac2:	4662      	mov	r2, ip
1000dac4:	6863      	ldr	r3, [r4, #4]
1000dac6:	4393      	bics	r3, r2
1000dac8:	1b5a      	subs	r2, r3, r5
1000daca:	2a0f      	cmp	r2, #15
1000dacc:	ddf4      	ble.n	1000dab8 <_malloc_r+0xa4>
1000dace:	4640      	mov	r0, r8
1000dad0:	003a      	movs	r2, r7
1000dad2:	693c      	ldr	r4, [r7, #16]
1000dad4:	3208      	adds	r2, #8
1000dad6:	4294      	cmp	r4, r2
1000dad8:	d100      	bne.n	1000dadc <_malloc_r+0xc8>
1000dada:	e078      	b.n	1000dbce <_malloc_r+0x1ba>
1000dadc:	2303      	movs	r3, #3
1000dade:	6861      	ldr	r1, [r4, #4]
1000dae0:	4399      	bics	r1, r3
1000dae2:	4689      	mov	r9, r1
1000dae4:	000b      	movs	r3, r1
1000dae6:	1b49      	subs	r1, r1, r5
1000dae8:	290f      	cmp	r1, #15
1000daea:	dd00      	ble.n	1000daee <_malloc_r+0xda>
1000daec:	e17b      	b.n	1000dde6 <_malloc_r+0x3d2>
1000daee:	617a      	str	r2, [r7, #20]
1000daf0:	613a      	str	r2, [r7, #16]
1000daf2:	2900      	cmp	r1, #0
1000daf4:	dab2      	bge.n	1000da5c <_malloc_r+0x48>
1000daf6:	2280      	movs	r2, #128	; 0x80
1000daf8:	0092      	lsls	r2, r2, #2
1000dafa:	4591      	cmp	r9, r2
1000dafc:	d300      	bcc.n	1000db00 <_malloc_r+0xec>
1000dafe:	e10f      	b.n	1000dd20 <_malloc_r+0x30c>
1000db00:	0959      	lsrs	r1, r3, #5
1000db02:	08da      	lsrs	r2, r3, #3
1000db04:	2301      	movs	r3, #1
1000db06:	408b      	lsls	r3, r1
1000db08:	00d2      	lsls	r2, r2, #3
1000db0a:	6879      	ldr	r1, [r7, #4]
1000db0c:	19d2      	adds	r2, r2, r7
1000db0e:	430b      	orrs	r3, r1
1000db10:	6891      	ldr	r1, [r2, #8]
1000db12:	607b      	str	r3, [r7, #4]
1000db14:	60e2      	str	r2, [r4, #12]
1000db16:	60a1      	str	r1, [r4, #8]
1000db18:	6094      	str	r4, [r2, #8]
1000db1a:	60cc      	str	r4, [r1, #12]
1000db1c:	2101      	movs	r1, #1
1000db1e:	1082      	asrs	r2, r0, #2
1000db20:	4091      	lsls	r1, r2
1000db22:	4299      	cmp	r1, r3
1000db24:	d859      	bhi.n	1000dbda <_malloc_r+0x1c6>
1000db26:	420b      	tst	r3, r1
1000db28:	d105      	bne.n	1000db36 <_malloc_r+0x122>
1000db2a:	2203      	movs	r2, #3
1000db2c:	4390      	bics	r0, r2
1000db2e:	0049      	lsls	r1, r1, #1
1000db30:	3004      	adds	r0, #4
1000db32:	420b      	tst	r3, r1
1000db34:	d0fb      	beq.n	1000db2e <_malloc_r+0x11a>
1000db36:	2303      	movs	r3, #3
1000db38:	4698      	mov	r8, r3
1000db3a:	00c3      	lsls	r3, r0, #3
1000db3c:	4699      	mov	r9, r3
1000db3e:	44b9      	add	r9, r7
1000db40:	46cc      	mov	ip, r9
1000db42:	4682      	mov	sl, r0
1000db44:	4663      	mov	r3, ip
1000db46:	68dc      	ldr	r4, [r3, #12]
1000db48:	45a4      	cmp	ip, r4
1000db4a:	d107      	bne.n	1000db5c <_malloc_r+0x148>
1000db4c:	e12c      	b.n	1000dda8 <_malloc_r+0x394>
1000db4e:	2a00      	cmp	r2, #0
1000db50:	db00      	blt.n	1000db54 <_malloc_r+0x140>
1000db52:	e135      	b.n	1000ddc0 <_malloc_r+0x3ac>
1000db54:	68e4      	ldr	r4, [r4, #12]
1000db56:	45a4      	cmp	ip, r4
1000db58:	d100      	bne.n	1000db5c <_malloc_r+0x148>
1000db5a:	e125      	b.n	1000dda8 <_malloc_r+0x394>
1000db5c:	4642      	mov	r2, r8
1000db5e:	6863      	ldr	r3, [r4, #4]
1000db60:	4393      	bics	r3, r2
1000db62:	1b5a      	subs	r2, r3, r5
1000db64:	2a0f      	cmp	r2, #15
1000db66:	ddf2      	ble.n	1000db4e <_malloc_r+0x13a>
1000db68:	2001      	movs	r0, #1
1000db6a:	4680      	mov	r8, r0
1000db6c:	1961      	adds	r1, r4, r5
1000db6e:	4305      	orrs	r5, r0
1000db70:	6065      	str	r5, [r4, #4]
1000db72:	68a0      	ldr	r0, [r4, #8]
1000db74:	68e5      	ldr	r5, [r4, #12]
1000db76:	3708      	adds	r7, #8
1000db78:	60c5      	str	r5, [r0, #12]
1000db7a:	60a8      	str	r0, [r5, #8]
1000db7c:	4640      	mov	r0, r8
1000db7e:	4310      	orrs	r0, r2
1000db80:	60f9      	str	r1, [r7, #12]
1000db82:	60b9      	str	r1, [r7, #8]
1000db84:	6048      	str	r0, [r1, #4]
1000db86:	60cf      	str	r7, [r1, #12]
1000db88:	0030      	movs	r0, r6
1000db8a:	608f      	str	r7, [r1, #8]
1000db8c:	50e2      	str	r2, [r4, r3]
1000db8e:	f000 fa0b 	bl	1000dfa8 <__malloc_unlock>
1000db92:	0020      	movs	r0, r4
1000db94:	3008      	adds	r0, #8
1000db96:	e002      	b.n	1000db9e <_malloc_r+0x18a>
1000db98:	230c      	movs	r3, #12
1000db9a:	2000      	movs	r0, #0
1000db9c:	6033      	str	r3, [r6, #0]
1000db9e:	b003      	add	sp, #12
1000dba0:	bcf0      	pop	{r4, r5, r6, r7}
1000dba2:	46bb      	mov	fp, r7
1000dba4:	46b2      	mov	sl, r6
1000dba6:	46a9      	mov	r9, r5
1000dba8:	46a0      	mov	r8, r4
1000dbaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000dbac:	2180      	movs	r1, #128	; 0x80
1000dbae:	233f      	movs	r3, #63	; 0x3f
1000dbb0:	2040      	movs	r0, #64	; 0x40
1000dbb2:	4698      	mov	r8, r3
1000dbb4:	0089      	lsls	r1, r1, #2
1000dbb6:	e776      	b.n	1000daa6 <_malloc_r+0x92>
1000dbb8:	68dc      	ldr	r4, [r3, #12]
1000dbba:	3002      	adds	r0, #2
1000dbbc:	42a3      	cmp	r3, r4
1000dbbe:	d000      	beq.n	1000dbc2 <_malloc_r+0x1ae>
1000dbc0:	e744      	b.n	1000da4c <_malloc_r+0x38>
1000dbc2:	003a      	movs	r2, r7
1000dbc4:	693c      	ldr	r4, [r7, #16]
1000dbc6:	3208      	adds	r2, #8
1000dbc8:	4294      	cmp	r4, r2
1000dbca:	d000      	beq.n	1000dbce <_malloc_r+0x1ba>
1000dbcc:	e786      	b.n	1000dadc <_malloc_r+0xc8>
1000dbce:	2101      	movs	r1, #1
1000dbd0:	687b      	ldr	r3, [r7, #4]
1000dbd2:	1082      	asrs	r2, r0, #2
1000dbd4:	4091      	lsls	r1, r2
1000dbd6:	4299      	cmp	r1, r3
1000dbd8:	d9a5      	bls.n	1000db26 <_malloc_r+0x112>
1000dbda:	2303      	movs	r3, #3
1000dbdc:	68bc      	ldr	r4, [r7, #8]
1000dbde:	6862      	ldr	r2, [r4, #4]
1000dbe0:	439a      	bics	r2, r3
1000dbe2:	4691      	mov	r9, r2
1000dbe4:	4295      	cmp	r5, r2
1000dbe6:	d803      	bhi.n	1000dbf0 <_malloc_r+0x1dc>
1000dbe8:	1b53      	subs	r3, r2, r5
1000dbea:	2b0f      	cmp	r3, #15
1000dbec:	dd00      	ble.n	1000dbf0 <_malloc_r+0x1dc>
1000dbee:	e089      	b.n	1000dd04 <_malloc_r+0x2f0>
1000dbf0:	0023      	movs	r3, r4
1000dbf2:	444b      	add	r3, r9
1000dbf4:	4a5f      	ldr	r2, [pc, #380]	; (1000dd74 <_malloc_r+0x360>)
1000dbf6:	9301      	str	r3, [sp, #4]
1000dbf8:	4b5f      	ldr	r3, [pc, #380]	; (1000dd78 <_malloc_r+0x364>)
1000dbfa:	4693      	mov	fp, r2
1000dbfc:	681b      	ldr	r3, [r3, #0]
1000dbfe:	6812      	ldr	r2, [r2, #0]
1000dc00:	18eb      	adds	r3, r5, r3
1000dc02:	3201      	adds	r2, #1
1000dc04:	d100      	bne.n	1000dc08 <_malloc_r+0x1f4>
1000dc06:	e13d      	b.n	1000de84 <_malloc_r+0x470>
1000dc08:	4a5c      	ldr	r2, [pc, #368]	; (1000dd7c <_malloc_r+0x368>)
1000dc0a:	4694      	mov	ip, r2
1000dc0c:	4463      	add	r3, ip
1000dc0e:	0b1b      	lsrs	r3, r3, #12
1000dc10:	031b      	lsls	r3, r3, #12
1000dc12:	9300      	str	r3, [sp, #0]
1000dc14:	0030      	movs	r0, r6
1000dc16:	9900      	ldr	r1, [sp, #0]
1000dc18:	f000 f9ce 	bl	1000dfb8 <_sbrk_r>
1000dc1c:	0003      	movs	r3, r0
1000dc1e:	4680      	mov	r8, r0
1000dc20:	3301      	adds	r3, #1
1000dc22:	d100      	bne.n	1000dc26 <_malloc_r+0x212>
1000dc24:	e0fa      	b.n	1000de1c <_malloc_r+0x408>
1000dc26:	9b01      	ldr	r3, [sp, #4]
1000dc28:	4283      	cmp	r3, r0
1000dc2a:	d900      	bls.n	1000dc2e <_malloc_r+0x21a>
1000dc2c:	e0f4      	b.n	1000de18 <_malloc_r+0x404>
1000dc2e:	4b54      	ldr	r3, [pc, #336]	; (1000dd80 <_malloc_r+0x36c>)
1000dc30:	9800      	ldr	r0, [sp, #0]
1000dc32:	001a      	movs	r2, r3
1000dc34:	469a      	mov	sl, r3
1000dc36:	6812      	ldr	r2, [r2, #0]
1000dc38:	0003      	movs	r3, r0
1000dc3a:	4694      	mov	ip, r2
1000dc3c:	4651      	mov	r1, sl
1000dc3e:	4463      	add	r3, ip
1000dc40:	600b      	str	r3, [r1, #0]
1000dc42:	9901      	ldr	r1, [sp, #4]
1000dc44:	001a      	movs	r2, r3
1000dc46:	4541      	cmp	r1, r8
1000dc48:	d100      	bne.n	1000dc4c <_malloc_r+0x238>
1000dc4a:	e151      	b.n	1000def0 <_malloc_r+0x4dc>
1000dc4c:	465b      	mov	r3, fp
1000dc4e:	681b      	ldr	r3, [r3, #0]
1000dc50:	3301      	adds	r3, #1
1000dc52:	d100      	bne.n	1000dc56 <_malloc_r+0x242>
1000dc54:	e156      	b.n	1000df04 <_malloc_r+0x4f0>
1000dc56:	4643      	mov	r3, r8
1000dc58:	9901      	ldr	r1, [sp, #4]
1000dc5a:	1a5b      	subs	r3, r3, r1
1000dc5c:	189a      	adds	r2, r3, r2
1000dc5e:	4653      	mov	r3, sl
1000dc60:	601a      	str	r2, [r3, #0]
1000dc62:	2307      	movs	r3, #7
1000dc64:	4642      	mov	r2, r8
1000dc66:	4641      	mov	r1, r8
1000dc68:	401a      	ands	r2, r3
1000dc6a:	9201      	str	r2, [sp, #4]
1000dc6c:	4219      	tst	r1, r3
1000dc6e:	d100      	bne.n	1000dc72 <_malloc_r+0x25e>
1000dc70:	e112      	b.n	1000de98 <_malloc_r+0x484>
1000dc72:	2308      	movs	r3, #8
1000dc74:	4698      	mov	r8, r3
1000dc76:	1a88      	subs	r0, r1, r2
1000dc78:	4b42      	ldr	r3, [pc, #264]	; (1000dd84 <_malloc_r+0x370>)
1000dc7a:	9900      	ldr	r1, [sp, #0]
1000dc7c:	4480      	add	r8, r0
1000dc7e:	4441      	add	r1, r8
1000dc80:	1a9b      	subs	r3, r3, r2
1000dc82:	1a5b      	subs	r3, r3, r1
1000dc84:	051b      	lsls	r3, r3, #20
1000dc86:	0d1b      	lsrs	r3, r3, #20
1000dc88:	9100      	str	r1, [sp, #0]
1000dc8a:	0030      	movs	r0, r6
1000dc8c:	0019      	movs	r1, r3
1000dc8e:	469b      	mov	fp, r3
1000dc90:	f000 f992 	bl	1000dfb8 <_sbrk_r>
1000dc94:	1c43      	adds	r3, r0, #1
1000dc96:	d100      	bne.n	1000dc9a <_malloc_r+0x286>
1000dc98:	e150      	b.n	1000df3c <_malloc_r+0x528>
1000dc9a:	4643      	mov	r3, r8
1000dc9c:	1ac0      	subs	r0, r0, r3
1000dc9e:	0003      	movs	r3, r0
1000dca0:	445b      	add	r3, fp
1000dca2:	9300      	str	r3, [sp, #0]
1000dca4:	4653      	mov	r3, sl
1000dca6:	4652      	mov	r2, sl
1000dca8:	681b      	ldr	r3, [r3, #0]
1000dcaa:	2101      	movs	r1, #1
1000dcac:	445b      	add	r3, fp
1000dcae:	6013      	str	r3, [r2, #0]
1000dcb0:	4642      	mov	r2, r8
1000dcb2:	4640      	mov	r0, r8
1000dcb4:	60ba      	str	r2, [r7, #8]
1000dcb6:	9a00      	ldr	r2, [sp, #0]
1000dcb8:	430a      	orrs	r2, r1
1000dcba:	6042      	str	r2, [r0, #4]
1000dcbc:	42bc      	cmp	r4, r7
1000dcbe:	d100      	bne.n	1000dcc2 <_malloc_r+0x2ae>
1000dcc0:	e124      	b.n	1000df0c <_malloc_r+0x4f8>
1000dcc2:	464a      	mov	r2, r9
1000dcc4:	2a0f      	cmp	r2, #15
1000dcc6:	d800      	bhi.n	1000dcca <_malloc_r+0x2b6>
1000dcc8:	e122      	b.n	1000df10 <_malloc_r+0x4fc>
1000dcca:	2007      	movs	r0, #7
1000dccc:	3a0c      	subs	r2, #12
1000dcce:	4382      	bics	r2, r0
1000dcd0:	6860      	ldr	r0, [r4, #4]
1000dcd2:	4001      	ands	r1, r0
1000dcd4:	2005      	movs	r0, #5
1000dcd6:	4311      	orrs	r1, r2
1000dcd8:	6061      	str	r1, [r4, #4]
1000dcda:	18a1      	adds	r1, r4, r2
1000dcdc:	6048      	str	r0, [r1, #4]
1000dcde:	6088      	str	r0, [r1, #8]
1000dce0:	2a0f      	cmp	r2, #15
1000dce2:	d900      	bls.n	1000dce6 <_malloc_r+0x2d2>
1000dce4:	e135      	b.n	1000df52 <_malloc_r+0x53e>
1000dce6:	4642      	mov	r2, r8
1000dce8:	4644      	mov	r4, r8
1000dcea:	6852      	ldr	r2, [r2, #4]
1000dcec:	4926      	ldr	r1, [pc, #152]	; (1000dd88 <_malloc_r+0x374>)
1000dcee:	6808      	ldr	r0, [r1, #0]
1000dcf0:	4298      	cmp	r0, r3
1000dcf2:	d200      	bcs.n	1000dcf6 <_malloc_r+0x2e2>
1000dcf4:	600b      	str	r3, [r1, #0]
1000dcf6:	4925      	ldr	r1, [pc, #148]	; (1000dd8c <_malloc_r+0x378>)
1000dcf8:	6808      	ldr	r0, [r1, #0]
1000dcfa:	4298      	cmp	r0, r3
1000dcfc:	d300      	bcc.n	1000dd00 <_malloc_r+0x2ec>
1000dcfe:	e08f      	b.n	1000de20 <_malloc_r+0x40c>
1000dd00:	600b      	str	r3, [r1, #0]
1000dd02:	e08d      	b.n	1000de20 <_malloc_r+0x40c>
1000dd04:	2201      	movs	r2, #1
1000dd06:	0029      	movs	r1, r5
1000dd08:	4313      	orrs	r3, r2
1000dd0a:	4311      	orrs	r1, r2
1000dd0c:	1965      	adds	r5, r4, r5
1000dd0e:	6061      	str	r1, [r4, #4]
1000dd10:	0030      	movs	r0, r6
1000dd12:	60bd      	str	r5, [r7, #8]
1000dd14:	606b      	str	r3, [r5, #4]
1000dd16:	f000 f947 	bl	1000dfa8 <__malloc_unlock>
1000dd1a:	0020      	movs	r0, r4
1000dd1c:	3008      	adds	r0, #8
1000dd1e:	e73e      	b.n	1000db9e <_malloc_r+0x18a>
1000dd20:	0a5a      	lsrs	r2, r3, #9
1000dd22:	2a04      	cmp	r2, #4
1000dd24:	d972      	bls.n	1000de0c <_malloc_r+0x3f8>
1000dd26:	2a14      	cmp	r2, #20
1000dd28:	d900      	bls.n	1000dd2c <_malloc_r+0x318>
1000dd2a:	e0c5      	b.n	1000deb8 <_malloc_r+0x4a4>
1000dd2c:	0011      	movs	r1, r2
1000dd2e:	325c      	adds	r2, #92	; 0x5c
1000dd30:	315b      	adds	r1, #91	; 0x5b
1000dd32:	00d2      	lsls	r2, r2, #3
1000dd34:	2308      	movs	r3, #8
1000dd36:	425b      	negs	r3, r3
1000dd38:	469c      	mov	ip, r3
1000dd3a:	18ba      	adds	r2, r7, r2
1000dd3c:	4494      	add	ip, r2
1000dd3e:	4663      	mov	r3, ip
1000dd40:	689a      	ldr	r2, [r3, #8]
1000dd42:	2303      	movs	r3, #3
1000dd44:	4698      	mov	r8, r3
1000dd46:	4594      	cmp	ip, r2
1000dd48:	d100      	bne.n	1000dd4c <_malloc_r+0x338>
1000dd4a:	e09e      	b.n	1000de8a <_malloc_r+0x476>
1000dd4c:	4643      	mov	r3, r8
1000dd4e:	6851      	ldr	r1, [r2, #4]
1000dd50:	4399      	bics	r1, r3
1000dd52:	4549      	cmp	r1, r9
1000dd54:	d902      	bls.n	1000dd5c <_malloc_r+0x348>
1000dd56:	6892      	ldr	r2, [r2, #8]
1000dd58:	4594      	cmp	ip, r2
1000dd5a:	d1f7      	bne.n	1000dd4c <_malloc_r+0x338>
1000dd5c:	68d3      	ldr	r3, [r2, #12]
1000dd5e:	469c      	mov	ip, r3
1000dd60:	687b      	ldr	r3, [r7, #4]
1000dd62:	4661      	mov	r1, ip
1000dd64:	60a2      	str	r2, [r4, #8]
1000dd66:	60e1      	str	r1, [r4, #12]
1000dd68:	608c      	str	r4, [r1, #8]
1000dd6a:	60d4      	str	r4, [r2, #12]
1000dd6c:	e6d6      	b.n	1000db1c <_malloc_r+0x108>
1000dd6e:	46c0      	nop			; (mov r8, r8)
1000dd70:	20002c20 	.word	0x20002c20
1000dd74:	20003028 	.word	0x20003028
1000dd78:	20011af4 	.word	0x20011af4
1000dd7c:	0000100f 	.word	0x0000100f
1000dd80:	20011ac4 	.word	0x20011ac4
1000dd84:	00001008 	.word	0x00001008
1000dd88:	20011aec 	.word	0x20011aec
1000dd8c:	20011af0 	.word	0x20011af0
1000dd90:	2814      	cmp	r0, #20
1000dd92:	d952      	bls.n	1000de3a <_malloc_r+0x426>
1000dd94:	2854      	cmp	r0, #84	; 0x54
1000dd96:	d900      	bls.n	1000dd9a <_malloc_r+0x386>
1000dd98:	e096      	b.n	1000dec8 <_malloc_r+0x4b4>
1000dd9a:	236e      	movs	r3, #110	; 0x6e
1000dd9c:	4698      	mov	r8, r3
1000dd9e:	0b28      	lsrs	r0, r5, #12
1000dda0:	4480      	add	r8, r0
1000dda2:	306f      	adds	r0, #111	; 0x6f
1000dda4:	00c1      	lsls	r1, r0, #3
1000dda6:	e67e      	b.n	1000daa6 <_malloc_r+0x92>
1000dda8:	2308      	movs	r3, #8
1000ddaa:	469b      	mov	fp, r3
1000ddac:	3b07      	subs	r3, #7
1000ddae:	44dc      	add	ip, fp
1000ddb0:	469b      	mov	fp, r3
1000ddb2:	44da      	add	sl, fp
1000ddb4:	4643      	mov	r3, r8
1000ddb6:	4652      	mov	r2, sl
1000ddb8:	4213      	tst	r3, r2
1000ddba:	d000      	beq.n	1000ddbe <_malloc_r+0x3aa>
1000ddbc:	e6c2      	b.n	1000db44 <_malloc_r+0x130>
1000ddbe:	e04c      	b.n	1000de5a <_malloc_r+0x446>
1000ddc0:	2201      	movs	r2, #1
1000ddc2:	18e3      	adds	r3, r4, r3
1000ddc4:	6859      	ldr	r1, [r3, #4]
1000ddc6:	0030      	movs	r0, r6
1000ddc8:	430a      	orrs	r2, r1
1000ddca:	605a      	str	r2, [r3, #4]
1000ddcc:	68e3      	ldr	r3, [r4, #12]
1000ddce:	68a2      	ldr	r2, [r4, #8]
1000ddd0:	60d3      	str	r3, [r2, #12]
1000ddd2:	609a      	str	r2, [r3, #8]
1000ddd4:	f000 f8e8 	bl	1000dfa8 <__malloc_unlock>
1000ddd8:	0020      	movs	r0, r4
1000ddda:	3008      	adds	r0, #8
1000dddc:	e6df      	b.n	1000db9e <_malloc_r+0x18a>
1000ddde:	002b      	movs	r3, r5
1000dde0:	08e8      	lsrs	r0, r5, #3
1000dde2:	3308      	adds	r3, #8
1000dde4:	e62a      	b.n	1000da3c <_malloc_r+0x28>
1000dde6:	2301      	movs	r3, #1
1000dde8:	1960      	adds	r0, r4, r5
1000ddea:	431d      	orrs	r5, r3
1000ddec:	6065      	str	r5, [r4, #4]
1000ddee:	6178      	str	r0, [r7, #20]
1000ddf0:	6138      	str	r0, [r7, #16]
1000ddf2:	60c2      	str	r2, [r0, #12]
1000ddf4:	6082      	str	r2, [r0, #8]
1000ddf6:	001a      	movs	r2, r3
1000ddf8:	464b      	mov	r3, r9
1000ddfa:	430a      	orrs	r2, r1
1000ddfc:	6042      	str	r2, [r0, #4]
1000ddfe:	0030      	movs	r0, r6
1000de00:	50e1      	str	r1, [r4, r3]
1000de02:	f000 f8d1 	bl	1000dfa8 <__malloc_unlock>
1000de06:	0020      	movs	r0, r4
1000de08:	3008      	adds	r0, #8
1000de0a:	e6c8      	b.n	1000db9e <_malloc_r+0x18a>
1000de0c:	099a      	lsrs	r2, r3, #6
1000de0e:	0011      	movs	r1, r2
1000de10:	3239      	adds	r2, #57	; 0x39
1000de12:	3138      	adds	r1, #56	; 0x38
1000de14:	00d2      	lsls	r2, r2, #3
1000de16:	e78d      	b.n	1000dd34 <_malloc_r+0x320>
1000de18:	42bc      	cmp	r4, r7
1000de1a:	d060      	beq.n	1000dede <_malloc_r+0x4ca>
1000de1c:	68bc      	ldr	r4, [r7, #8]
1000de1e:	6862      	ldr	r2, [r4, #4]
1000de20:	2303      	movs	r3, #3
1000de22:	439a      	bics	r2, r3
1000de24:	1b53      	subs	r3, r2, r5
1000de26:	4295      	cmp	r5, r2
1000de28:	d802      	bhi.n	1000de30 <_malloc_r+0x41c>
1000de2a:	2b0f      	cmp	r3, #15
1000de2c:	dd00      	ble.n	1000de30 <_malloc_r+0x41c>
1000de2e:	e769      	b.n	1000dd04 <_malloc_r+0x2f0>
1000de30:	0030      	movs	r0, r6
1000de32:	f000 f8b9 	bl	1000dfa8 <__malloc_unlock>
1000de36:	2000      	movs	r0, #0
1000de38:	e6b1      	b.n	1000db9e <_malloc_r+0x18a>
1000de3a:	235b      	movs	r3, #91	; 0x5b
1000de3c:	4698      	mov	r8, r3
1000de3e:	4480      	add	r8, r0
1000de40:	305c      	adds	r0, #92	; 0x5c
1000de42:	00c1      	lsls	r1, r0, #3
1000de44:	e62f      	b.n	1000daa6 <_malloc_r+0x92>
1000de46:	2308      	movs	r3, #8
1000de48:	425b      	negs	r3, r3
1000de4a:	469c      	mov	ip, r3
1000de4c:	44e1      	add	r9, ip
1000de4e:	464b      	mov	r3, r9
1000de50:	689b      	ldr	r3, [r3, #8]
1000de52:	3801      	subs	r0, #1
1000de54:	454b      	cmp	r3, r9
1000de56:	d000      	beq.n	1000de5a <_malloc_r+0x446>
1000de58:	e098      	b.n	1000df8c <_malloc_r+0x578>
1000de5a:	4643      	mov	r3, r8
1000de5c:	4203      	tst	r3, r0
1000de5e:	d1f2      	bne.n	1000de46 <_malloc_r+0x432>
1000de60:	687b      	ldr	r3, [r7, #4]
1000de62:	438b      	bics	r3, r1
1000de64:	607b      	str	r3, [r7, #4]
1000de66:	0049      	lsls	r1, r1, #1
1000de68:	4299      	cmp	r1, r3
1000de6a:	d900      	bls.n	1000de6e <_malloc_r+0x45a>
1000de6c:	e6b5      	b.n	1000dbda <_malloc_r+0x1c6>
1000de6e:	2900      	cmp	r1, #0
1000de70:	d104      	bne.n	1000de7c <_malloc_r+0x468>
1000de72:	e6b2      	b.n	1000dbda <_malloc_r+0x1c6>
1000de74:	2204      	movs	r2, #4
1000de76:	4694      	mov	ip, r2
1000de78:	0049      	lsls	r1, r1, #1
1000de7a:	44e2      	add	sl, ip
1000de7c:	420b      	tst	r3, r1
1000de7e:	d0f9      	beq.n	1000de74 <_malloc_r+0x460>
1000de80:	4650      	mov	r0, sl
1000de82:	e65a      	b.n	1000db3a <_malloc_r+0x126>
1000de84:	3310      	adds	r3, #16
1000de86:	9300      	str	r3, [sp, #0]
1000de88:	e6c4      	b.n	1000dc14 <_malloc_r+0x200>
1000de8a:	1089      	asrs	r1, r1, #2
1000de8c:	3b02      	subs	r3, #2
1000de8e:	408b      	lsls	r3, r1
1000de90:	6879      	ldr	r1, [r7, #4]
1000de92:	430b      	orrs	r3, r1
1000de94:	607b      	str	r3, [r7, #4]
1000de96:	e764      	b.n	1000dd62 <_malloc_r+0x34e>
1000de98:	9b00      	ldr	r3, [sp, #0]
1000de9a:	0030      	movs	r0, r6
1000de9c:	4443      	add	r3, r8
1000de9e:	425b      	negs	r3, r3
1000dea0:	051b      	lsls	r3, r3, #20
1000dea2:	0d1b      	lsrs	r3, r3, #20
1000dea4:	0019      	movs	r1, r3
1000dea6:	469b      	mov	fp, r3
1000dea8:	f000 f886 	bl	1000dfb8 <_sbrk_r>
1000deac:	1c43      	adds	r3, r0, #1
1000deae:	d000      	beq.n	1000deb2 <_malloc_r+0x49e>
1000deb0:	e6f3      	b.n	1000dc9a <_malloc_r+0x286>
1000deb2:	2300      	movs	r3, #0
1000deb4:	469b      	mov	fp, r3
1000deb6:	e6f5      	b.n	1000dca4 <_malloc_r+0x290>
1000deb8:	2a54      	cmp	r2, #84	; 0x54
1000deba:	d82b      	bhi.n	1000df14 <_malloc_r+0x500>
1000debc:	0b1a      	lsrs	r2, r3, #12
1000debe:	0011      	movs	r1, r2
1000dec0:	326f      	adds	r2, #111	; 0x6f
1000dec2:	316e      	adds	r1, #110	; 0x6e
1000dec4:	00d2      	lsls	r2, r2, #3
1000dec6:	e735      	b.n	1000dd34 <_malloc_r+0x320>
1000dec8:	23aa      	movs	r3, #170	; 0xaa
1000deca:	005b      	lsls	r3, r3, #1
1000decc:	4298      	cmp	r0, r3
1000dece:	d82b      	bhi.n	1000df28 <_malloc_r+0x514>
1000ded0:	3bdd      	subs	r3, #221	; 0xdd
1000ded2:	4698      	mov	r8, r3
1000ded4:	0be8      	lsrs	r0, r5, #15
1000ded6:	4480      	add	r8, r0
1000ded8:	3078      	adds	r0, #120	; 0x78
1000deda:	00c1      	lsls	r1, r0, #3
1000dedc:	e5e3      	b.n	1000daa6 <_malloc_r+0x92>
1000dede:	4b2c      	ldr	r3, [pc, #176]	; (1000df90 <_malloc_r+0x57c>)
1000dee0:	9a00      	ldr	r2, [sp, #0]
1000dee2:	469a      	mov	sl, r3
1000dee4:	681b      	ldr	r3, [r3, #0]
1000dee6:	469c      	mov	ip, r3
1000dee8:	4653      	mov	r3, sl
1000deea:	4462      	add	r2, ip
1000deec:	601a      	str	r2, [r3, #0]
1000deee:	e6ad      	b.n	1000dc4c <_malloc_r+0x238>
1000def0:	0509      	lsls	r1, r1, #20
1000def2:	d000      	beq.n	1000def6 <_malloc_r+0x4e2>
1000def4:	e6aa      	b.n	1000dc4c <_malloc_r+0x238>
1000def6:	0002      	movs	r2, r0
1000def8:	68bc      	ldr	r4, [r7, #8]
1000defa:	444a      	add	r2, r9
1000defc:	3101      	adds	r1, #1
1000defe:	430a      	orrs	r2, r1
1000df00:	6062      	str	r2, [r4, #4]
1000df02:	e6f3      	b.n	1000dcec <_malloc_r+0x2d8>
1000df04:	465b      	mov	r3, fp
1000df06:	4642      	mov	r2, r8
1000df08:	601a      	str	r2, [r3, #0]
1000df0a:	e6aa      	b.n	1000dc62 <_malloc_r+0x24e>
1000df0c:	4644      	mov	r4, r8
1000df0e:	e6ed      	b.n	1000dcec <_malloc_r+0x2d8>
1000df10:	6041      	str	r1, [r0, #4]
1000df12:	e78d      	b.n	1000de30 <_malloc_r+0x41c>
1000df14:	21aa      	movs	r1, #170	; 0xaa
1000df16:	0049      	lsls	r1, r1, #1
1000df18:	428a      	cmp	r2, r1
1000df1a:	d824      	bhi.n	1000df66 <_malloc_r+0x552>
1000df1c:	0bda      	lsrs	r2, r3, #15
1000df1e:	0011      	movs	r1, r2
1000df20:	3278      	adds	r2, #120	; 0x78
1000df22:	3177      	adds	r1, #119	; 0x77
1000df24:	00d2      	lsls	r2, r2, #3
1000df26:	e705      	b.n	1000dd34 <_malloc_r+0x320>
1000df28:	4b1a      	ldr	r3, [pc, #104]	; (1000df94 <_malloc_r+0x580>)
1000df2a:	4298      	cmp	r0, r3
1000df2c:	d824      	bhi.n	1000df78 <_malloc_r+0x564>
1000df2e:	237c      	movs	r3, #124	; 0x7c
1000df30:	4698      	mov	r8, r3
1000df32:	0ca8      	lsrs	r0, r5, #18
1000df34:	4480      	add	r8, r0
1000df36:	307d      	adds	r0, #125	; 0x7d
1000df38:	00c1      	lsls	r1, r0, #3
1000df3a:	e5b4      	b.n	1000daa6 <_malloc_r+0x92>
1000df3c:	9a00      	ldr	r2, [sp, #0]
1000df3e:	9b01      	ldr	r3, [sp, #4]
1000df40:	4694      	mov	ip, r2
1000df42:	4642      	mov	r2, r8
1000df44:	3b08      	subs	r3, #8
1000df46:	4463      	add	r3, ip
1000df48:	1a9b      	subs	r3, r3, r2
1000df4a:	9300      	str	r3, [sp, #0]
1000df4c:	2300      	movs	r3, #0
1000df4e:	469b      	mov	fp, r3
1000df50:	e6a8      	b.n	1000dca4 <_malloc_r+0x290>
1000df52:	0021      	movs	r1, r4
1000df54:	0030      	movs	r0, r6
1000df56:	3108      	adds	r1, #8
1000df58:	f000 f8bc 	bl	1000e0d4 <_free_r>
1000df5c:	4653      	mov	r3, sl
1000df5e:	68bc      	ldr	r4, [r7, #8]
1000df60:	681b      	ldr	r3, [r3, #0]
1000df62:	6862      	ldr	r2, [r4, #4]
1000df64:	e6c2      	b.n	1000dcec <_malloc_r+0x2d8>
1000df66:	490b      	ldr	r1, [pc, #44]	; (1000df94 <_malloc_r+0x580>)
1000df68:	428a      	cmp	r2, r1
1000df6a:	d80b      	bhi.n	1000df84 <_malloc_r+0x570>
1000df6c:	0c9a      	lsrs	r2, r3, #18
1000df6e:	0011      	movs	r1, r2
1000df70:	327d      	adds	r2, #125	; 0x7d
1000df72:	317c      	adds	r1, #124	; 0x7c
1000df74:	00d2      	lsls	r2, r2, #3
1000df76:	e6dd      	b.n	1000dd34 <_malloc_r+0x320>
1000df78:	21fe      	movs	r1, #254	; 0xfe
1000df7a:	237e      	movs	r3, #126	; 0x7e
1000df7c:	207f      	movs	r0, #127	; 0x7f
1000df7e:	4698      	mov	r8, r3
1000df80:	0089      	lsls	r1, r1, #2
1000df82:	e590      	b.n	1000daa6 <_malloc_r+0x92>
1000df84:	22fe      	movs	r2, #254	; 0xfe
1000df86:	217e      	movs	r1, #126	; 0x7e
1000df88:	0092      	lsls	r2, r2, #2
1000df8a:	e6d3      	b.n	1000dd34 <_malloc_r+0x320>
1000df8c:	687b      	ldr	r3, [r7, #4]
1000df8e:	e76a      	b.n	1000de66 <_malloc_r+0x452>
1000df90:	20011ac4 	.word	0x20011ac4
1000df94:	00000554 	.word	0x00000554

1000df98 <__malloc_lock>:
1000df98:	b510      	push	{r4, lr}
1000df9a:	4802      	ldr	r0, [pc, #8]	; (1000dfa4 <__malloc_lock+0xc>)
1000df9c:	f000 f97c 	bl	1000e298 <__retarget_lock_acquire_recursive>
1000dfa0:	bd10      	pop	{r4, pc}
1000dfa2:	46c0      	nop			; (mov r8, r8)
1000dfa4:	20011ac0 	.word	0x20011ac0

1000dfa8 <__malloc_unlock>:
1000dfa8:	b510      	push	{r4, lr}
1000dfaa:	4802      	ldr	r0, [pc, #8]	; (1000dfb4 <__malloc_unlock+0xc>)
1000dfac:	f000 f976 	bl	1000e29c <__retarget_lock_release_recursive>
1000dfb0:	bd10      	pop	{r4, pc}
1000dfb2:	46c0      	nop			; (mov r8, r8)
1000dfb4:	20011ac0 	.word	0x20011ac0

1000dfb8 <_sbrk_r>:
1000dfb8:	2300      	movs	r3, #0
1000dfba:	b570      	push	{r4, r5, r6, lr}
1000dfbc:	4d06      	ldr	r5, [pc, #24]	; (1000dfd8 <_sbrk_r+0x20>)
1000dfbe:	0004      	movs	r4, r0
1000dfc0:	0008      	movs	r0, r1
1000dfc2:	602b      	str	r3, [r5, #0]
1000dfc4:	f7f3 feb8 	bl	10001d38 <_sbrk>
1000dfc8:	1c43      	adds	r3, r0, #1
1000dfca:	d000      	beq.n	1000dfce <_sbrk_r+0x16>
1000dfcc:	bd70      	pop	{r4, r5, r6, pc}
1000dfce:	682b      	ldr	r3, [r5, #0]
1000dfd0:	2b00      	cmp	r3, #0
1000dfd2:	d0fb      	beq.n	1000dfcc <_sbrk_r+0x14>
1000dfd4:	6023      	str	r3, [r4, #0]
1000dfd6:	e7f9      	b.n	1000dfcc <_sbrk_r+0x14>
1000dfd8:	2001209c 	.word	0x2001209c

1000dfdc <strlen>:
1000dfdc:	b510      	push	{r4, lr}
1000dfde:	0783      	lsls	r3, r0, #30
1000dfe0:	d00a      	beq.n	1000dff8 <strlen+0x1c>
1000dfe2:	0003      	movs	r3, r0
1000dfe4:	2103      	movs	r1, #3
1000dfe6:	e002      	b.n	1000dfee <strlen+0x12>
1000dfe8:	3301      	adds	r3, #1
1000dfea:	420b      	tst	r3, r1
1000dfec:	d005      	beq.n	1000dffa <strlen+0x1e>
1000dfee:	781a      	ldrb	r2, [r3, #0]
1000dff0:	2a00      	cmp	r2, #0
1000dff2:	d1f9      	bne.n	1000dfe8 <strlen+0xc>
1000dff4:	1a18      	subs	r0, r3, r0
1000dff6:	bd10      	pop	{r4, pc}
1000dff8:	0003      	movs	r3, r0
1000dffa:	6819      	ldr	r1, [r3, #0]
1000dffc:	4a0c      	ldr	r2, [pc, #48]	; (1000e030 <strlen+0x54>)
1000dffe:	4c0d      	ldr	r4, [pc, #52]	; (1000e034 <strlen+0x58>)
1000e000:	188a      	adds	r2, r1, r2
1000e002:	438a      	bics	r2, r1
1000e004:	4222      	tst	r2, r4
1000e006:	d10f      	bne.n	1000e028 <strlen+0x4c>
1000e008:	6859      	ldr	r1, [r3, #4]
1000e00a:	4a09      	ldr	r2, [pc, #36]	; (1000e030 <strlen+0x54>)
1000e00c:	3304      	adds	r3, #4
1000e00e:	188a      	adds	r2, r1, r2
1000e010:	438a      	bics	r2, r1
1000e012:	4222      	tst	r2, r4
1000e014:	d108      	bne.n	1000e028 <strlen+0x4c>
1000e016:	6859      	ldr	r1, [r3, #4]
1000e018:	4a05      	ldr	r2, [pc, #20]	; (1000e030 <strlen+0x54>)
1000e01a:	3304      	adds	r3, #4
1000e01c:	188a      	adds	r2, r1, r2
1000e01e:	438a      	bics	r2, r1
1000e020:	4222      	tst	r2, r4
1000e022:	d0f1      	beq.n	1000e008 <strlen+0x2c>
1000e024:	e000      	b.n	1000e028 <strlen+0x4c>
1000e026:	3301      	adds	r3, #1
1000e028:	781a      	ldrb	r2, [r3, #0]
1000e02a:	2a00      	cmp	r2, #0
1000e02c:	d1fb      	bne.n	1000e026 <strlen+0x4a>
1000e02e:	e7e1      	b.n	1000dff4 <strlen+0x18>
1000e030:	fefefeff 	.word	0xfefefeff
1000e034:	80808080 	.word	0x80808080

1000e038 <_malloc_trim_r>:
1000e038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000e03a:	000c      	movs	r4, r1
1000e03c:	0005      	movs	r5, r0
1000e03e:	f7ff ffab 	bl	1000df98 <__malloc_lock>
1000e042:	4f20      	ldr	r7, [pc, #128]	; (1000e0c4 <_malloc_trim_r+0x8c>)
1000e044:	68bb      	ldr	r3, [r7, #8]
1000e046:	685e      	ldr	r6, [r3, #4]
1000e048:	2303      	movs	r3, #3
1000e04a:	439e      	bics	r6, r3
1000e04c:	4b1e      	ldr	r3, [pc, #120]	; (1000e0c8 <_malloc_trim_r+0x90>)
1000e04e:	1b34      	subs	r4, r6, r4
1000e050:	469c      	mov	ip, r3
1000e052:	4464      	add	r4, ip
1000e054:	0b24      	lsrs	r4, r4, #12
1000e056:	3c01      	subs	r4, #1
1000e058:	3311      	adds	r3, #17
1000e05a:	0324      	lsls	r4, r4, #12
1000e05c:	429c      	cmp	r4, r3
1000e05e:	db07      	blt.n	1000e070 <_malloc_trim_r+0x38>
1000e060:	2100      	movs	r1, #0
1000e062:	0028      	movs	r0, r5
1000e064:	f7ff ffa8 	bl	1000dfb8 <_sbrk_r>
1000e068:	68bb      	ldr	r3, [r7, #8]
1000e06a:	199b      	adds	r3, r3, r6
1000e06c:	4298      	cmp	r0, r3
1000e06e:	d004      	beq.n	1000e07a <_malloc_trim_r+0x42>
1000e070:	0028      	movs	r0, r5
1000e072:	f7ff ff99 	bl	1000dfa8 <__malloc_unlock>
1000e076:	2000      	movs	r0, #0
1000e078:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000e07a:	0028      	movs	r0, r5
1000e07c:	4261      	negs	r1, r4
1000e07e:	f7ff ff9b 	bl	1000dfb8 <_sbrk_r>
1000e082:	1c43      	adds	r3, r0, #1
1000e084:	d00d      	beq.n	1000e0a2 <_malloc_trim_r+0x6a>
1000e086:	2201      	movs	r2, #1
1000e088:	68bb      	ldr	r3, [r7, #8]
1000e08a:	1b36      	subs	r6, r6, r4
1000e08c:	4316      	orrs	r6, r2
1000e08e:	605e      	str	r6, [r3, #4]
1000e090:	4b0e      	ldr	r3, [pc, #56]	; (1000e0cc <_malloc_trim_r+0x94>)
1000e092:	0028      	movs	r0, r5
1000e094:	681a      	ldr	r2, [r3, #0]
1000e096:	1b14      	subs	r4, r2, r4
1000e098:	601c      	str	r4, [r3, #0]
1000e09a:	f7ff ff85 	bl	1000dfa8 <__malloc_unlock>
1000e09e:	2001      	movs	r0, #1
1000e0a0:	e7ea      	b.n	1000e078 <_malloc_trim_r+0x40>
1000e0a2:	2100      	movs	r1, #0
1000e0a4:	0028      	movs	r0, r5
1000e0a6:	f7ff ff87 	bl	1000dfb8 <_sbrk_r>
1000e0aa:	68ba      	ldr	r2, [r7, #8]
1000e0ac:	1a83      	subs	r3, r0, r2
1000e0ae:	2b0f      	cmp	r3, #15
1000e0b0:	ddde      	ble.n	1000e070 <_malloc_trim_r+0x38>
1000e0b2:	4907      	ldr	r1, [pc, #28]	; (1000e0d0 <_malloc_trim_r+0x98>)
1000e0b4:	6809      	ldr	r1, [r1, #0]
1000e0b6:	1a40      	subs	r0, r0, r1
1000e0b8:	4904      	ldr	r1, [pc, #16]	; (1000e0cc <_malloc_trim_r+0x94>)
1000e0ba:	6008      	str	r0, [r1, #0]
1000e0bc:	2101      	movs	r1, #1
1000e0be:	430b      	orrs	r3, r1
1000e0c0:	6053      	str	r3, [r2, #4]
1000e0c2:	e7d5      	b.n	1000e070 <_malloc_trim_r+0x38>
1000e0c4:	20002c20 	.word	0x20002c20
1000e0c8:	00000fef 	.word	0x00000fef
1000e0cc:	20011ac4 	.word	0x20011ac4
1000e0d0:	20003028 	.word	0x20003028

1000e0d4 <_free_r>:
1000e0d4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e0d6:	46c6      	mov	lr, r8
1000e0d8:	0005      	movs	r5, r0
1000e0da:	000c      	movs	r4, r1
1000e0dc:	b500      	push	{lr}
1000e0de:	2900      	cmp	r1, #0
1000e0e0:	d04f      	beq.n	1000e182 <_free_r+0xae>
1000e0e2:	f7ff ff59 	bl	1000df98 <__malloc_lock>
1000e0e6:	0021      	movs	r1, r4
1000e0e8:	3908      	subs	r1, #8
1000e0ea:	684c      	ldr	r4, [r1, #4]
1000e0ec:	2601      	movs	r6, #1
1000e0ee:	0022      	movs	r2, r4
1000e0f0:	2003      	movs	r0, #3
1000e0f2:	43b2      	bics	r2, r6
1000e0f4:	188f      	adds	r7, r1, r2
1000e0f6:	687b      	ldr	r3, [r7, #4]
1000e0f8:	4383      	bics	r3, r0
1000e0fa:	4862      	ldr	r0, [pc, #392]	; (1000e284 <_free_r+0x1b0>)
1000e0fc:	4698      	mov	r8, r3
1000e0fe:	6883      	ldr	r3, [r0, #8]
1000e100:	42bb      	cmp	r3, r7
1000e102:	d06a      	beq.n	1000e1da <_free_r+0x106>
1000e104:	4643      	mov	r3, r8
1000e106:	607b      	str	r3, [r7, #4]
1000e108:	4226      	tst	r6, r4
1000e10a:	d11e      	bne.n	1000e14a <_free_r+0x76>
1000e10c:	2308      	movs	r3, #8
1000e10e:	469c      	mov	ip, r3
1000e110:	680c      	ldr	r4, [r1, #0]
1000e112:	4484      	add	ip, r0
1000e114:	1b09      	subs	r1, r1, r4
1000e116:	1912      	adds	r2, r2, r4
1000e118:	688c      	ldr	r4, [r1, #8]
1000e11a:	4564      	cmp	r4, ip
1000e11c:	d04f      	beq.n	1000e1be <_free_r+0xea>
1000e11e:	68cb      	ldr	r3, [r1, #12]
1000e120:	60e3      	str	r3, [r4, #12]
1000e122:	609c      	str	r4, [r3, #8]
1000e124:	4643      	mov	r3, r8
1000e126:	18fc      	adds	r4, r7, r3
1000e128:	6864      	ldr	r4, [r4, #4]
1000e12a:	4234      	tst	r4, r6
1000e12c:	d111      	bne.n	1000e152 <_free_r+0x7e>
1000e12e:	68bb      	ldr	r3, [r7, #8]
1000e130:	4c55      	ldr	r4, [pc, #340]	; (1000e288 <_free_r+0x1b4>)
1000e132:	4442      	add	r2, r8
1000e134:	42a3      	cmp	r3, r4
1000e136:	d100      	bne.n	1000e13a <_free_r+0x66>
1000e138:	e07e      	b.n	1000e238 <_free_r+0x164>
1000e13a:	68fc      	ldr	r4, [r7, #12]
1000e13c:	60dc      	str	r4, [r3, #12]
1000e13e:	60a3      	str	r3, [r4, #8]
1000e140:	2301      	movs	r3, #1
1000e142:	4313      	orrs	r3, r2
1000e144:	604b      	str	r3, [r1, #4]
1000e146:	508a      	str	r2, [r1, r2]
1000e148:	e006      	b.n	1000e158 <_free_r+0x84>
1000e14a:	18fc      	adds	r4, r7, r3
1000e14c:	6864      	ldr	r4, [r4, #4]
1000e14e:	4234      	tst	r4, r6
1000e150:	d0ed      	beq.n	1000e12e <_free_r+0x5a>
1000e152:	4316      	orrs	r6, r2
1000e154:	604e      	str	r6, [r1, #4]
1000e156:	603a      	str	r2, [r7, #0]
1000e158:	2380      	movs	r3, #128	; 0x80
1000e15a:	009b      	lsls	r3, r3, #2
1000e15c:	429a      	cmp	r2, r3
1000e15e:	d213      	bcs.n	1000e188 <_free_r+0xb4>
1000e160:	0954      	lsrs	r4, r2, #5
1000e162:	08d3      	lsrs	r3, r2, #3
1000e164:	2201      	movs	r2, #1
1000e166:	40a2      	lsls	r2, r4
1000e168:	6844      	ldr	r4, [r0, #4]
1000e16a:	00db      	lsls	r3, r3, #3
1000e16c:	4322      	orrs	r2, r4
1000e16e:	6042      	str	r2, [r0, #4]
1000e170:	1818      	adds	r0, r3, r0
1000e172:	6883      	ldr	r3, [r0, #8]
1000e174:	60c8      	str	r0, [r1, #12]
1000e176:	608b      	str	r3, [r1, #8]
1000e178:	6081      	str	r1, [r0, #8]
1000e17a:	60d9      	str	r1, [r3, #12]
1000e17c:	0028      	movs	r0, r5
1000e17e:	f7ff ff13 	bl	1000dfa8 <__malloc_unlock>
1000e182:	bc80      	pop	{r7}
1000e184:	46b8      	mov	r8, r7
1000e186:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e188:	0a53      	lsrs	r3, r2, #9
1000e18a:	2b04      	cmp	r3, #4
1000e18c:	d83e      	bhi.n	1000e20c <_free_r+0x138>
1000e18e:	0994      	lsrs	r4, r2, #6
1000e190:	0026      	movs	r6, r4
1000e192:	3439      	adds	r4, #57	; 0x39
1000e194:	3638      	adds	r6, #56	; 0x38
1000e196:	00e4      	lsls	r4, r4, #3
1000e198:	1904      	adds	r4, r0, r4
1000e19a:	6823      	ldr	r3, [r4, #0]
1000e19c:	3c08      	subs	r4, #8
1000e19e:	2703      	movs	r7, #3
1000e1a0:	429c      	cmp	r4, r3
1000e1a2:	d042      	beq.n	1000e22a <_free_r+0x156>
1000e1a4:	6858      	ldr	r0, [r3, #4]
1000e1a6:	43b8      	bics	r0, r7
1000e1a8:	4290      	cmp	r0, r2
1000e1aa:	d902      	bls.n	1000e1b2 <_free_r+0xde>
1000e1ac:	689b      	ldr	r3, [r3, #8]
1000e1ae:	429c      	cmp	r4, r3
1000e1b0:	d1f8      	bne.n	1000e1a4 <_free_r+0xd0>
1000e1b2:	68dc      	ldr	r4, [r3, #12]
1000e1b4:	60cc      	str	r4, [r1, #12]
1000e1b6:	608b      	str	r3, [r1, #8]
1000e1b8:	60a1      	str	r1, [r4, #8]
1000e1ba:	60d9      	str	r1, [r3, #12]
1000e1bc:	e7de      	b.n	1000e17c <_free_r+0xa8>
1000e1be:	4643      	mov	r3, r8
1000e1c0:	18f8      	adds	r0, r7, r3
1000e1c2:	6840      	ldr	r0, [r0, #4]
1000e1c4:	4230      	tst	r0, r6
1000e1c6:	d157      	bne.n	1000e278 <_free_r+0x1a4>
1000e1c8:	68fb      	ldr	r3, [r7, #12]
1000e1ca:	68b8      	ldr	r0, [r7, #8]
1000e1cc:	4442      	add	r2, r8
1000e1ce:	4316      	orrs	r6, r2
1000e1d0:	60c3      	str	r3, [r0, #12]
1000e1d2:	6098      	str	r0, [r3, #8]
1000e1d4:	604e      	str	r6, [r1, #4]
1000e1d6:	508a      	str	r2, [r1, r2]
1000e1d8:	e7d0      	b.n	1000e17c <_free_r+0xa8>
1000e1da:	0013      	movs	r3, r2
1000e1dc:	4443      	add	r3, r8
1000e1de:	4226      	tst	r6, r4
1000e1e0:	d106      	bne.n	1000e1f0 <_free_r+0x11c>
1000e1e2:	680a      	ldr	r2, [r1, #0]
1000e1e4:	1a89      	subs	r1, r1, r2
1000e1e6:	688c      	ldr	r4, [r1, #8]
1000e1e8:	189b      	adds	r3, r3, r2
1000e1ea:	68ca      	ldr	r2, [r1, #12]
1000e1ec:	60e2      	str	r2, [r4, #12]
1000e1ee:	6094      	str	r4, [r2, #8]
1000e1f0:	2201      	movs	r2, #1
1000e1f2:	431a      	orrs	r2, r3
1000e1f4:	604a      	str	r2, [r1, #4]
1000e1f6:	4a25      	ldr	r2, [pc, #148]	; (1000e28c <_free_r+0x1b8>)
1000e1f8:	6081      	str	r1, [r0, #8]
1000e1fa:	6812      	ldr	r2, [r2, #0]
1000e1fc:	429a      	cmp	r2, r3
1000e1fe:	d8bd      	bhi.n	1000e17c <_free_r+0xa8>
1000e200:	4b23      	ldr	r3, [pc, #140]	; (1000e290 <_free_r+0x1bc>)
1000e202:	0028      	movs	r0, r5
1000e204:	6819      	ldr	r1, [r3, #0]
1000e206:	f7ff ff17 	bl	1000e038 <_malloc_trim_r>
1000e20a:	e7b7      	b.n	1000e17c <_free_r+0xa8>
1000e20c:	2b14      	cmp	r3, #20
1000e20e:	d907      	bls.n	1000e220 <_free_r+0x14c>
1000e210:	2b54      	cmp	r3, #84	; 0x54
1000e212:	d81a      	bhi.n	1000e24a <_free_r+0x176>
1000e214:	0b14      	lsrs	r4, r2, #12
1000e216:	0026      	movs	r6, r4
1000e218:	346f      	adds	r4, #111	; 0x6f
1000e21a:	366e      	adds	r6, #110	; 0x6e
1000e21c:	00e4      	lsls	r4, r4, #3
1000e21e:	e7bb      	b.n	1000e198 <_free_r+0xc4>
1000e220:	001e      	movs	r6, r3
1000e222:	335c      	adds	r3, #92	; 0x5c
1000e224:	365b      	adds	r6, #91	; 0x5b
1000e226:	00dc      	lsls	r4, r3, #3
1000e228:	e7b6      	b.n	1000e198 <_free_r+0xc4>
1000e22a:	2201      	movs	r2, #1
1000e22c:	10b6      	asrs	r6, r6, #2
1000e22e:	40b2      	lsls	r2, r6
1000e230:	6846      	ldr	r6, [r0, #4]
1000e232:	4332      	orrs	r2, r6
1000e234:	6042      	str	r2, [r0, #4]
1000e236:	e7bd      	b.n	1000e1b4 <_free_r+0xe0>
1000e238:	60d9      	str	r1, [r3, #12]
1000e23a:	6099      	str	r1, [r3, #8]
1000e23c:	60cb      	str	r3, [r1, #12]
1000e23e:	608b      	str	r3, [r1, #8]
1000e240:	2301      	movs	r3, #1
1000e242:	4313      	orrs	r3, r2
1000e244:	604b      	str	r3, [r1, #4]
1000e246:	508a      	str	r2, [r1, r2]
1000e248:	e798      	b.n	1000e17c <_free_r+0xa8>
1000e24a:	24aa      	movs	r4, #170	; 0xaa
1000e24c:	0064      	lsls	r4, r4, #1
1000e24e:	42a3      	cmp	r3, r4
1000e250:	d805      	bhi.n	1000e25e <_free_r+0x18a>
1000e252:	0bd4      	lsrs	r4, r2, #15
1000e254:	0026      	movs	r6, r4
1000e256:	3478      	adds	r4, #120	; 0x78
1000e258:	3677      	adds	r6, #119	; 0x77
1000e25a:	00e4      	lsls	r4, r4, #3
1000e25c:	e79c      	b.n	1000e198 <_free_r+0xc4>
1000e25e:	4c0d      	ldr	r4, [pc, #52]	; (1000e294 <_free_r+0x1c0>)
1000e260:	42a3      	cmp	r3, r4
1000e262:	d805      	bhi.n	1000e270 <_free_r+0x19c>
1000e264:	0c94      	lsrs	r4, r2, #18
1000e266:	0026      	movs	r6, r4
1000e268:	347d      	adds	r4, #125	; 0x7d
1000e26a:	367c      	adds	r6, #124	; 0x7c
1000e26c:	00e4      	lsls	r4, r4, #3
1000e26e:	e793      	b.n	1000e198 <_free_r+0xc4>
1000e270:	24fe      	movs	r4, #254	; 0xfe
1000e272:	267e      	movs	r6, #126	; 0x7e
1000e274:	00a4      	lsls	r4, r4, #2
1000e276:	e78f      	b.n	1000e198 <_free_r+0xc4>
1000e278:	0033      	movs	r3, r6
1000e27a:	4313      	orrs	r3, r2
1000e27c:	604b      	str	r3, [r1, #4]
1000e27e:	603a      	str	r2, [r7, #0]
1000e280:	e77c      	b.n	1000e17c <_free_r+0xa8>
1000e282:	46c0      	nop			; (mov r8, r8)
1000e284:	20002c20 	.word	0x20002c20
1000e288:	20002c28 	.word	0x20002c28
1000e28c:	2000302c 	.word	0x2000302c
1000e290:	20011af4 	.word	0x20011af4
1000e294:	00000554 	.word	0x00000554

1000e298 <__retarget_lock_acquire_recursive>:
1000e298:	4770      	bx	lr
1000e29a:	46c0      	nop			; (mov r8, r8)

1000e29c <__retarget_lock_release_recursive>:
1000e29c:	4770      	bx	lr
1000e29e:	46c0      	nop			; (mov r8, r8)

1000e2a0 <_fini>:
1000e2a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000e2a2:	46c0      	nop			; (mov r8, r8)
1000e2a4:	0000      	movs	r0, r0
	...

1000e2a8 <__mutex_exit_veneer>:
1000e2a8:	b401      	push	{r0}
1000e2aa:	4802      	ldr	r0, [pc, #8]	; (1000e2b4 <__mutex_exit_veneer+0xc>)
1000e2ac:	4684      	mov	ip, r0
1000e2ae:	bc01      	pop	{r0}
1000e2b0:	4760      	bx	ip
1000e2b2:	bf00      	nop
1000e2b4:	2000204d 	.word	0x2000204d

1000e2b8 <____aeabi_ldiv0_veneer>:
1000e2b8:	b401      	push	{r0}
1000e2ba:	4802      	ldr	r0, [pc, #8]	; (1000e2c4 <____aeabi_ldiv0_veneer+0xc>)
1000e2bc:	4684      	mov	ip, r0
1000e2be:	bc01      	pop	{r0}
1000e2c0:	4760      	bx	ip
1000e2c2:	bf00      	nop
1000e2c4:	2000264d 	.word	0x2000264d

1000e2c8 <____aeabi_idiv0_veneer>:
1000e2c8:	b401      	push	{r0}
1000e2ca:	4802      	ldr	r0, [pc, #8]	; (1000e2d4 <____aeabi_idiv0_veneer+0xc>)
1000e2cc:	4684      	mov	ip, r0
1000e2ce:	bc01      	pop	{r0}
1000e2d0:	4760      	bx	ip
1000e2d2:	bf00      	nop
1000e2d4:	2000264d 	.word	0x2000264d

1000e2d8 <__mutex_try_enter_veneer>:
1000e2d8:	b401      	push	{r0}
1000e2da:	4802      	ldr	r0, [pc, #8]	; (1000e2e4 <__mutex_try_enter_veneer+0xc>)
1000e2dc:	4684      	mov	ip, r0
1000e2de:	bc01      	pop	{r0}
1000e2e0:	4760      	bx	ip
1000e2e2:	bf00      	nop
1000e2e4:	20001f71 	.word	0x20001f71

1000e2e8 <__mutex_enter_timeout_ms_veneer>:
1000e2e8:	b401      	push	{r0}
1000e2ea:	4802      	ldr	r0, [pc, #8]	; (1000e2f4 <__mutex_enter_timeout_ms_veneer+0xc>)
1000e2ec:	4684      	mov	ip, r0
1000e2ee:	bc01      	pop	{r0}
1000e2f0:	4760      	bx	ip
1000e2f2:	bf00      	nop
1000e2f4:	20001fb5 	.word	0x20001fb5

1000e2f8 <__flash_do_cmd.constprop.0_veneer>:
1000e2f8:	b401      	push	{r0}
1000e2fa:	4802      	ldr	r0, [pc, #8]	; (1000e304 <__flash_do_cmd.constprop.0_veneer+0xc>)
1000e2fc:	4684      	mov	ip, r0
1000e2fe:	bc01      	pop	{r0}
1000e300:	4760      	bx	ip
1000e302:	bf00      	nop
1000e304:	20001e81 	.word	0x20001e81

1000e308 <__mutex_enter_blocking_veneer>:
1000e308:	b401      	push	{r0}
1000e30a:	4802      	ldr	r0, [pc, #8]	; (1000e314 <__mutex_enter_blocking_veneer+0xc>)
1000e30c:	4684      	mov	ip, r0
1000e30e:	bc01      	pop	{r0}
1000e310:	4760      	bx	ip
1000e312:	bf00      	nop
1000e314:	20001f25 	.word	0x20001f25

Disassembly of section .data:

200000c0 <RenderAText>:
200000c0:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
200000c2:	4644      	mov	r4, r8
200000c4:	b410      	push	{r4}
200000c6:	9c09      	ldr	r4, [sp, #36]	; 0x24
200000c8:	4e49      	ldr	r6, [pc, #292]	; (200001f0 <RenderAText_pSioBase>)
200000ca:	6632      	str	r2, [r6, #96]	; 0x60
200000cc:	8a62      	ldrh	r2, [r4, #18]
200000ce:	6672      	str	r2, [r6, #100]	; 0x64
200000d0:	8925      	ldrh	r5, [r4, #8]
200000d2:	2703      	movs	r7, #3
200000d4:	43bd      	bics	r5, r7
200000d6:	9509      	str	r5, [sp, #36]	; 0x24
200000d8:	43b9      	bics	r1, r7
200000da:	43bb      	bics	r3, r7
200000dc:	9303      	str	r3, [sp, #12]
200000de:	6f75      	ldr	r5, [r6, #116]	; 0x74
200000e0:	6f32      	ldr	r2, [r6, #112]	; 0x70
200000e2:	022d      	lsls	r5, r5, #8
200000e4:	6963      	ldr	r3, [r4, #20]
200000e6:	442b      	add	r3, r5
200000e8:	8865      	ldrh	r5, [r4, #2]
200000ea:	436a      	muls	r2, r5
200000ec:	68e5      	ldr	r5, [r4, #12]
200000ee:	442a      	add	r2, r5
200000f0:	9202      	str	r2, [sp, #8]
200000f2:	08ce      	lsrs	r6, r1, #3
200000f4:	4432      	add	r2, r6
200000f6:	4432      	add	r2, r6
200000f8:	69a5      	ldr	r5, [r4, #24]
200000fa:	46a8      	mov	r8, r5
200000fc:	4d3b      	ldr	r5, [pc, #236]	; (200001ec <RenderAText_Addr>)
200000fe:	46ae      	mov	lr, r5
20000100:	074e      	lsls	r6, r1, #29
20000102:	d521      	bpl.n	20000148 <RenderAText+0x88>
20000104:	7856      	ldrb	r6, [r2, #1]
20000106:	4645      	mov	r5, r8
20000108:	0934      	lsrs	r4, r6, #4
2000010a:	5d2c      	ldrb	r4, [r5, r4]
2000010c:	0736      	lsls	r6, r6, #28
2000010e:	0f36      	lsrs	r6, r6, #28
20000110:	5dae      	ldrb	r6, [r5, r6]
20000112:	0225      	lsls	r5, r4, #8
20000114:	4325      	orrs	r5, r4
20000116:	042c      	lsls	r4, r5, #16
20000118:	432c      	orrs	r4, r5
2000011a:	0235      	lsls	r5, r6, #8
2000011c:	4335      	orrs	r5, r6
2000011e:	042e      	lsls	r6, r5, #16
20000120:	432e      	orrs	r6, r5
20000122:	4066      	eors	r6, r4
20000124:	7815      	ldrb	r5, [r2, #0]
20000126:	5d5d      	ldrb	r5, [r3, r5]
20000128:	3202      	adds	r2, #2
2000012a:	00ed      	lsls	r5, r5, #3
2000012c:	4475      	add	r5, lr
2000012e:	686f      	ldr	r7, [r5, #4]
20000130:	4037      	ands	r7, r6
20000132:	4067      	eors	r7, r4
20000134:	c080      	stmia	r0!, {r7}
20000136:	3104      	adds	r1, #4
20000138:	9f09      	ldr	r7, [sp, #36]	; 0x24
2000013a:	42b9      	cmp	r1, r7
2000013c:	d301      	bcc.n	20000142 <RenderAText+0x82>
2000013e:	2100      	movs	r1, #0
20000140:	9a02      	ldr	r2, [sp, #8]
20000142:	9f03      	ldr	r7, [sp, #12]
20000144:	3f04      	subs	r7, #4
20000146:	9703      	str	r7, [sp, #12]
20000148:	9f09      	ldr	r7, [sp, #36]	; 0x24
2000014a:	1a7f      	subs	r7, r7, r1

2000014c <RenderAText_OutLoop>:
2000014c:	9e03      	ldr	r6, [sp, #12]
2000014e:	42b7      	cmp	r7, r6
20000150:	d900      	bls.n	20000154 <RenderAText_OutLoop+0x8>
20000152:	4637      	mov	r7, r6
20000154:	2f08      	cmp	r7, #8
20000156:	d220      	bcs.n	2000019a <RenderAText_Last+0x3e>
20000158:	2f04      	cmp	r7, #4
2000015a:	d31b      	bcc.n	20000194 <RenderAText_Last+0x38>

2000015c <RenderAText_Last>:
2000015c:	7856      	ldrb	r6, [r2, #1]
2000015e:	4645      	mov	r5, r8
20000160:	0934      	lsrs	r4, r6, #4
20000162:	5d2c      	ldrb	r4, [r5, r4]
20000164:	0736      	lsls	r6, r6, #28
20000166:	0f36      	lsrs	r6, r6, #28
20000168:	5dae      	ldrb	r6, [r5, r6]
2000016a:	0225      	lsls	r5, r4, #8
2000016c:	4325      	orrs	r5, r4
2000016e:	042c      	lsls	r4, r5, #16
20000170:	432c      	orrs	r4, r5
20000172:	0235      	lsls	r5, r6, #8
20000174:	4335      	orrs	r5, r6
20000176:	042e      	lsls	r6, r5, #16
20000178:	432e      	orrs	r6, r5
2000017a:	4066      	eors	r6, r4
2000017c:	7815      	ldrb	r5, [r2, #0]
2000017e:	5d5d      	ldrb	r5, [r3, r5]
20000180:	3202      	adds	r2, #2
20000182:	00ed      	lsls	r5, r5, #3
20000184:	4475      	add	r5, lr
20000186:	6829      	ldr	r1, [r5, #0]
20000188:	4031      	ands	r1, r6
2000018a:	4061      	eors	r1, r4
2000018c:	c002      	stmia	r0!, {r1}
2000018e:	9a02      	ldr	r2, [sp, #8]
20000190:	2f04      	cmp	r7, #4
20000192:	d8db      	bhi.n	2000014c <RenderAText_OutLoop>
20000194:	bc10      	pop	{r4}
20000196:	46a0      	mov	r8, r4
20000198:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
2000019a:	08b9      	lsrs	r1, r7, #2
2000019c:	008d      	lsls	r5, r1, #2
2000019e:	1b76      	subs	r6, r6, r5
200001a0:	9603      	str	r6, [sp, #12]
200001a2:	3901      	subs	r1, #1

200001a4 <RenderAText_InLoop>:
200001a4:	7856      	ldrb	r6, [r2, #1]
200001a6:	4645      	mov	r5, r8
200001a8:	0934      	lsrs	r4, r6, #4
200001aa:	5d2c      	ldrb	r4, [r5, r4]
200001ac:	0736      	lsls	r6, r6, #28
200001ae:	0f36      	lsrs	r6, r6, #28
200001b0:	5dae      	ldrb	r6, [r5, r6]
200001b2:	0225      	lsls	r5, r4, #8
200001b4:	4325      	orrs	r5, r4
200001b6:	042c      	lsls	r4, r5, #16
200001b8:	432c      	orrs	r4, r5
200001ba:	0235      	lsls	r5, r6, #8
200001bc:	4335      	orrs	r5, r6
200001be:	042e      	lsls	r6, r5, #16
200001c0:	432e      	orrs	r6, r5
200001c2:	4066      	eors	r6, r4
200001c4:	7815      	ldrb	r5, [r2, #0]
200001c6:	5d5d      	ldrb	r5, [r3, r5]
200001c8:	3202      	adds	r2, #2
200001ca:	00ed      	lsls	r5, r5, #3
200001cc:	4475      	add	r5, lr
200001ce:	682f      	ldr	r7, [r5, #0]
200001d0:	4037      	ands	r7, r6
200001d2:	4067      	eors	r7, r4
200001d4:	c080      	stmia	r0!, {r7}
200001d6:	686f      	ldr	r7, [r5, #4]
200001d8:	4037      	ands	r7, r6
200001da:	4067      	eors	r7, r4
200001dc:	c080      	stmia	r0!, {r7}
200001de:	3902      	subs	r1, #2
200001e0:	d8e0      	bhi.n	200001a4 <RenderAText_InLoop>
200001e2:	9f09      	ldr	r7, [sp, #36]	; 0x24
200001e4:	d0ba      	beq.n	2000015c <RenderAText_Last>
200001e6:	9a02      	ldr	r2, [sp, #8]
200001e8:	e7b0      	b.n	2000014c <RenderAText_OutLoop>
200001ea:	46c0      	nop			; (mov r8, r8)

200001ec <RenderAText_Addr>:
200001ec:	2000642c 	.word	0x2000642c

200001f0 <RenderAText_pSioBase>:
200001f0:	d0000000 	.word	0xd0000000

200001f4 <RenderAttrib8>:
200001f4:	b5fc      	push	{r2, r3, r4, r5, r6, r7, lr}
200001f6:	4644      	mov	r4, r8
200001f8:	b410      	push	{r4}
200001fa:	9c08      	ldr	r4, [sp, #32]
200001fc:	8925      	ldrh	r5, [r4, #8]
200001fe:	2703      	movs	r7, #3
20000200:	43bd      	bics	r5, r7
20000202:	9508      	str	r5, [sp, #32]
20000204:	43b9      	bics	r1, r7
20000206:	43bb      	bics	r3, r7
20000208:	9302      	str	r3, [sp, #8]
2000020a:	08d3      	lsrs	r3, r2, #3
2000020c:	8865      	ldrh	r5, [r4, #2]
2000020e:	436b      	muls	r3, r5
20000210:	6967      	ldr	r7, [r4, #20]
20000212:	443b      	add	r3, r7
20000214:	436a      	muls	r2, r5
20000216:	68e5      	ldr	r5, [r4, #12]
20000218:	442a      	add	r2, r5
2000021a:	9201      	str	r2, [sp, #4]
2000021c:	1a9b      	subs	r3, r3, r2
2000021e:	08ce      	lsrs	r6, r1, #3
20000220:	4432      	add	r2, r6
20000222:	69a5      	ldr	r5, [r4, #24]
20000224:	46a8      	mov	r8, r5
20000226:	4d39      	ldr	r5, [pc, #228]	; (2000030c <RenderAttrib8_Addr>)
20000228:	46ae      	mov	lr, r5
2000022a:	074e      	lsls	r6, r1, #29
2000022c:	d520      	bpl.n	20000270 <RenderAttrib8+0x7c>
2000022e:	5cd6      	ldrb	r6, [r2, r3]
20000230:	4645      	mov	r5, r8
20000232:	0934      	lsrs	r4, r6, #4
20000234:	5d2c      	ldrb	r4, [r5, r4]
20000236:	0736      	lsls	r6, r6, #28
20000238:	0f36      	lsrs	r6, r6, #28
2000023a:	5dae      	ldrb	r6, [r5, r6]
2000023c:	0225      	lsls	r5, r4, #8
2000023e:	4325      	orrs	r5, r4
20000240:	042c      	lsls	r4, r5, #16
20000242:	432c      	orrs	r4, r5
20000244:	0235      	lsls	r5, r6, #8
20000246:	4335      	orrs	r5, r6
20000248:	042e      	lsls	r6, r5, #16
2000024a:	432e      	orrs	r6, r5
2000024c:	4066      	eors	r6, r4
2000024e:	7815      	ldrb	r5, [r2, #0]
20000250:	3201      	adds	r2, #1
20000252:	00ed      	lsls	r5, r5, #3
20000254:	4475      	add	r5, lr
20000256:	686f      	ldr	r7, [r5, #4]
20000258:	4037      	ands	r7, r6
2000025a:	4067      	eors	r7, r4
2000025c:	c080      	stmia	r0!, {r7}
2000025e:	3104      	adds	r1, #4
20000260:	9f08      	ldr	r7, [sp, #32]
20000262:	42b9      	cmp	r1, r7
20000264:	d301      	bcc.n	2000026a <RenderAttrib8+0x76>
20000266:	2100      	movs	r1, #0
20000268:	9a01      	ldr	r2, [sp, #4]
2000026a:	9f02      	ldr	r7, [sp, #8]
2000026c:	3f04      	subs	r7, #4
2000026e:	9702      	str	r7, [sp, #8]
20000270:	9f08      	ldr	r7, [sp, #32]
20000272:	1a7f      	subs	r7, r7, r1

20000274 <RenderAttrib8_OutLoop>:
20000274:	9e02      	ldr	r6, [sp, #8]
20000276:	42b7      	cmp	r7, r6
20000278:	d900      	bls.n	2000027c <RenderAttrib8_OutLoop+0x8>
2000027a:	4637      	mov	r7, r6
2000027c:	2f08      	cmp	r7, #8
2000027e:	d21f      	bcs.n	200002c0 <RenderAttrib8_Last+0x3c>
20000280:	2f04      	cmp	r7, #4
20000282:	d31a      	bcc.n	200002ba <RenderAttrib8_Last+0x36>

20000284 <RenderAttrib8_Last>:
20000284:	5cd6      	ldrb	r6, [r2, r3]
20000286:	4645      	mov	r5, r8
20000288:	0934      	lsrs	r4, r6, #4
2000028a:	5d2c      	ldrb	r4, [r5, r4]
2000028c:	0736      	lsls	r6, r6, #28
2000028e:	0f36      	lsrs	r6, r6, #28
20000290:	5dae      	ldrb	r6, [r5, r6]
20000292:	0225      	lsls	r5, r4, #8
20000294:	4325      	orrs	r5, r4
20000296:	042c      	lsls	r4, r5, #16
20000298:	432c      	orrs	r4, r5
2000029a:	0235      	lsls	r5, r6, #8
2000029c:	4335      	orrs	r5, r6
2000029e:	042e      	lsls	r6, r5, #16
200002a0:	432e      	orrs	r6, r5
200002a2:	4066      	eors	r6, r4
200002a4:	7815      	ldrb	r5, [r2, #0]
200002a6:	3201      	adds	r2, #1
200002a8:	00ed      	lsls	r5, r5, #3
200002aa:	4475      	add	r5, lr
200002ac:	6829      	ldr	r1, [r5, #0]
200002ae:	4031      	ands	r1, r6
200002b0:	4061      	eors	r1, r4
200002b2:	c002      	stmia	r0!, {r1}
200002b4:	9a01      	ldr	r2, [sp, #4]
200002b6:	2f04      	cmp	r7, #4
200002b8:	d8dc      	bhi.n	20000274 <RenderAttrib8_OutLoop>
200002ba:	bc10      	pop	{r4}
200002bc:	46a0      	mov	r8, r4
200002be:	bdfc      	pop	{r2, r3, r4, r5, r6, r7, pc}
200002c0:	08b9      	lsrs	r1, r7, #2
200002c2:	008d      	lsls	r5, r1, #2
200002c4:	1b76      	subs	r6, r6, r5
200002c6:	9602      	str	r6, [sp, #8]
200002c8:	3901      	subs	r1, #1

200002ca <RenderAttrib8_InLoop>:
200002ca:	5cd6      	ldrb	r6, [r2, r3]
200002cc:	4645      	mov	r5, r8
200002ce:	0934      	lsrs	r4, r6, #4
200002d0:	5d2c      	ldrb	r4, [r5, r4]
200002d2:	0736      	lsls	r6, r6, #28
200002d4:	0f36      	lsrs	r6, r6, #28
200002d6:	5dae      	ldrb	r6, [r5, r6]
200002d8:	0225      	lsls	r5, r4, #8
200002da:	4325      	orrs	r5, r4
200002dc:	042c      	lsls	r4, r5, #16
200002de:	432c      	orrs	r4, r5
200002e0:	0235      	lsls	r5, r6, #8
200002e2:	4335      	orrs	r5, r6
200002e4:	042e      	lsls	r6, r5, #16
200002e6:	432e      	orrs	r6, r5
200002e8:	4066      	eors	r6, r4
200002ea:	7817      	ldrb	r7, [r2, #0]
200002ec:	3201      	adds	r2, #1
200002ee:	00ff      	lsls	r7, r7, #3
200002f0:	4477      	add	r7, lr
200002f2:	683d      	ldr	r5, [r7, #0]
200002f4:	4035      	ands	r5, r6
200002f6:	4065      	eors	r5, r4
200002f8:	687f      	ldr	r7, [r7, #4]
200002fa:	4037      	ands	r7, r6
200002fc:	4067      	eors	r7, r4
200002fe:	c0a0      	stmia	r0!, {r5, r7}
20000300:	3902      	subs	r1, #2
20000302:	d8e2      	bhi.n	200002ca <RenderAttrib8_InLoop>
20000304:	9f08      	ldr	r7, [sp, #32]
20000306:	d0bd      	beq.n	20000284 <RenderAttrib8_Last>
20000308:	9a01      	ldr	r2, [sp, #4]
2000030a:	e7b3      	b.n	20000274 <RenderAttrib8_OutLoop>

2000030c <RenderAttrib8_Addr>:
2000030c:	2000642c 	.word	0x2000642c

20000310 <MemSet4>:
20000310:	b5f0      	push	{r4, r5, r6, r7, lr}
20000312:	460b      	mov	r3, r1
20000314:	460c      	mov	r4, r1
20000316:	460d      	mov	r5, r1
20000318:	460e      	mov	r6, r1
2000031a:	460f      	mov	r7, r1
2000031c:	e004      	b.n	20000328 <MemSet4+0x18>
2000031e:	c0fa      	stmia	r0!, {r1, r3, r4, r5, r6, r7}
20000320:	c0fa      	stmia	r0!, {r1, r3, r4, r5, r6, r7}
20000322:	c0fa      	stmia	r0!, {r1, r3, r4, r5, r6, r7}
20000324:	c0fa      	stmia	r0!, {r1, r3, r4, r5, r6, r7}
20000326:	c0fa      	stmia	r0!, {r1, r3, r4, r5, r6, r7}
20000328:	3a1e      	subs	r2, #30
2000032a:	daf8      	bge.n	2000031e <MemSet4+0xe>
2000032c:	321e      	adds	r2, #30
2000032e:	e000      	b.n	20000332 <MemSet4+0x22>
20000330:	c0fa      	stmia	r0!, {r1, r3, r4, r5, r6, r7}
20000332:	3a06      	subs	r2, #6
20000334:	dafc      	bge.n	20000330 <MemSet4+0x20>
20000336:	3206      	adds	r2, #6
20000338:	e000      	b.n	2000033c <MemSet4+0x2c>
2000033a:	c002      	stmia	r0!, {r1}
2000033c:	3a01      	subs	r2, #1
2000033e:	dafc      	bge.n	2000033a <MemSet4+0x2a>
20000340:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

20000344 <RenderCText>:
20000344:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
20000346:	9c08      	ldr	r4, [sp, #32]
20000348:	4e40      	ldr	r6, [pc, #256]	; (2000044c <RenderCText_pSioBase>)
2000034a:	6632      	str	r2, [r6, #96]	; 0x60
2000034c:	8a62      	ldrh	r2, [r4, #18]
2000034e:	6672      	str	r2, [r6, #100]	; 0x64
20000350:	8925      	ldrh	r5, [r4, #8]
20000352:	2703      	movs	r7, #3
20000354:	43bd      	bics	r5, r7
20000356:	9508      	str	r5, [sp, #32]
20000358:	43b9      	bics	r1, r7
2000035a:	43bb      	bics	r3, r7
2000035c:	9302      	str	r3, [sp, #8]
2000035e:	6f75      	ldr	r5, [r6, #116]	; 0x74
20000360:	6f32      	ldr	r2, [r6, #112]	; 0x70
20000362:	022d      	lsls	r5, r5, #8
20000364:	6963      	ldr	r3, [r4, #20]
20000366:	442b      	add	r3, r5
20000368:	8865      	ldrh	r5, [r4, #2]
2000036a:	436a      	muls	r2, r5
2000036c:	68e5      	ldr	r5, [r4, #12]
2000036e:	442a      	add	r2, r5
20000370:	9201      	str	r2, [sp, #4]
20000372:	08ce      	lsrs	r6, r1, #3
20000374:	4432      	add	r2, r6
20000376:	4432      	add	r2, r6
20000378:	4432      	add	r2, r6
2000037a:	4d33      	ldr	r5, [pc, #204]	; (20000448 <RenderCText_Addr>)
2000037c:	46ae      	mov	lr, r5
2000037e:	074e      	lsls	r6, r1, #29
20000380:	d51c      	bpl.n	200003bc <RenderCText+0x78>
20000382:	7815      	ldrb	r5, [r2, #0]
20000384:	5d5d      	ldrb	r5, [r3, r5]
20000386:	7854      	ldrb	r4, [r2, #1]
20000388:	0227      	lsls	r7, r4, #8
2000038a:	4327      	orrs	r7, r4
2000038c:	043c      	lsls	r4, r7, #16
2000038e:	433c      	orrs	r4, r7
20000390:	7896      	ldrb	r6, [r2, #2]
20000392:	3203      	adds	r2, #3
20000394:	0237      	lsls	r7, r6, #8
20000396:	4337      	orrs	r7, r6
20000398:	043e      	lsls	r6, r7, #16
2000039a:	433e      	orrs	r6, r7
2000039c:	4066      	eors	r6, r4
2000039e:	00ed      	lsls	r5, r5, #3
200003a0:	4475      	add	r5, lr
200003a2:	686f      	ldr	r7, [r5, #4]
200003a4:	4037      	ands	r7, r6
200003a6:	4067      	eors	r7, r4
200003a8:	c080      	stmia	r0!, {r7}
200003aa:	3104      	adds	r1, #4
200003ac:	9f08      	ldr	r7, [sp, #32]
200003ae:	42b9      	cmp	r1, r7
200003b0:	d301      	bcc.n	200003b6 <RenderCText+0x72>
200003b2:	2100      	movs	r1, #0
200003b4:	9a01      	ldr	r2, [sp, #4]
200003b6:	9f02      	ldr	r7, [sp, #8]
200003b8:	3f04      	subs	r7, #4
200003ba:	9702      	str	r7, [sp, #8]
200003bc:	9f08      	ldr	r7, [sp, #32]
200003be:	1a7f      	subs	r7, r7, r1

200003c0 <RenderCText_OutLoop>:
200003c0:	9e02      	ldr	r6, [sp, #8]
200003c2:	42b7      	cmp	r7, r6
200003c4:	d900      	bls.n	200003c8 <RenderCText_OutLoop+0x8>
200003c6:	4637      	mov	r7, r6
200003c8:	2f08      	cmp	r7, #8
200003ca:	d219      	bcs.n	20000400 <RenderCText_Last+0x30>
200003cc:	2f04      	cmp	r7, #4
200003ce:	d316      	bcc.n	200003fe <RenderCText_Last+0x2e>

200003d0 <RenderCText_Last>:
200003d0:	7815      	ldrb	r5, [r2, #0]
200003d2:	5d5d      	ldrb	r5, [r3, r5]
200003d4:	7854      	ldrb	r4, [r2, #1]
200003d6:	0221      	lsls	r1, r4, #8
200003d8:	4321      	orrs	r1, r4
200003da:	040c      	lsls	r4, r1, #16
200003dc:	430c      	orrs	r4, r1
200003de:	7896      	ldrb	r6, [r2, #2]
200003e0:	3203      	adds	r2, #3
200003e2:	0231      	lsls	r1, r6, #8
200003e4:	4331      	orrs	r1, r6
200003e6:	040e      	lsls	r6, r1, #16
200003e8:	430e      	orrs	r6, r1
200003ea:	4066      	eors	r6, r4
200003ec:	00ed      	lsls	r5, r5, #3
200003ee:	4475      	add	r5, lr
200003f0:	6829      	ldr	r1, [r5, #0]
200003f2:	4031      	ands	r1, r6
200003f4:	4061      	eors	r1, r4
200003f6:	c002      	stmia	r0!, {r1}
200003f8:	9a01      	ldr	r2, [sp, #4]
200003fa:	2f04      	cmp	r7, #4
200003fc:	d8e0      	bhi.n	200003c0 <RenderCText_OutLoop>
200003fe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
20000400:	08b9      	lsrs	r1, r7, #2
20000402:	008d      	lsls	r5, r1, #2
20000404:	1b76      	subs	r6, r6, r5
20000406:	9602      	str	r6, [sp, #8]
20000408:	3901      	subs	r1, #1

2000040a <RenderCText_InLoop>:
2000040a:	7815      	ldrb	r5, [r2, #0]
2000040c:	5d5d      	ldrb	r5, [r3, r5]
2000040e:	7854      	ldrb	r4, [r2, #1]
20000410:	0227      	lsls	r7, r4, #8
20000412:	4327      	orrs	r7, r4
20000414:	043c      	lsls	r4, r7, #16
20000416:	433c      	orrs	r4, r7
20000418:	7896      	ldrb	r6, [r2, #2]
2000041a:	3203      	adds	r2, #3
2000041c:	0237      	lsls	r7, r6, #8
2000041e:	4337      	orrs	r7, r6
20000420:	043e      	lsls	r6, r7, #16
20000422:	433e      	orrs	r6, r7
20000424:	4066      	eors	r6, r4
20000426:	00ed      	lsls	r5, r5, #3
20000428:	4475      	add	r5, lr
2000042a:	682f      	ldr	r7, [r5, #0]
2000042c:	4037      	ands	r7, r6
2000042e:	4067      	eors	r7, r4
20000430:	c080      	stmia	r0!, {r7}
20000432:	686f      	ldr	r7, [r5, #4]
20000434:	4037      	ands	r7, r6
20000436:	4067      	eors	r7, r4
20000438:	c080      	stmia	r0!, {r7}
2000043a:	3902      	subs	r1, #2
2000043c:	d8e5      	bhi.n	2000040a <RenderCText_InLoop>
2000043e:	9f08      	ldr	r7, [sp, #32]
20000440:	d0c6      	beq.n	200003d0 <RenderCText_Last>
20000442:	9a01      	ldr	r2, [sp, #4]
20000444:	e7bc      	b.n	200003c0 <RenderCText_OutLoop>
20000446:	46c0      	nop			; (mov r8, r8)

20000448 <RenderCText_Addr>:
20000448:	2000642c 	.word	0x2000642c

2000044c <RenderCText_pSioBase>:
2000044c:	d0000000 	.word	0xd0000000

20000450 <RenderDText>:
20000450:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
20000452:	4644      	mov	r4, r8
20000454:	b410      	push	{r4}
20000456:	9c09      	ldr	r4, [sp, #36]	; 0x24
20000458:	4e68      	ldr	r6, [pc, #416]	; (200005fc <RenderDText_pSioBase>)
2000045a:	6632      	str	r2, [r6, #96]	; 0x60
2000045c:	7ce2      	ldrb	r2, [r4, #19]
2000045e:	6672      	str	r2, [r6, #100]	; 0x64
20000460:	8925      	ldrh	r5, [r4, #8]
20000462:	2703      	movs	r7, #3
20000464:	43bd      	bics	r5, r7
20000466:	9509      	str	r5, [sp, #36]	; 0x24
20000468:	43b9      	bics	r1, r7
2000046a:	43bb      	bics	r3, r7
2000046c:	9303      	str	r3, [sp, #12]
2000046e:	6f75      	ldr	r5, [r6, #116]	; 0x74
20000470:	6f32      	ldr	r2, [r6, #112]	; 0x70
20000472:	022d      	lsls	r5, r5, #8
20000474:	6963      	ldr	r3, [r4, #20]
20000476:	442b      	add	r3, r5
20000478:	4698      	mov	r8, r3
2000047a:	8865      	ldrh	r5, [r4, #2]
2000047c:	436a      	muls	r2, r5
2000047e:	68e5      	ldr	r5, [r4, #12]
20000480:	442a      	add	r2, r5
20000482:	9202      	str	r2, [sp, #8]
20000484:	69a3      	ldr	r3, [r4, #24]
20000486:	9301      	str	r3, [sp, #4]
20000488:	08ce      	lsrs	r6, r1, #3
2000048a:	00b6      	lsls	r6, r6, #2
2000048c:	4433      	add	r3, r6
2000048e:	090e      	lsrs	r6, r1, #4
20000490:	4432      	add	r2, r6
20000492:	7ca4      	ldrb	r4, [r4, #18]
20000494:	0225      	lsls	r5, r4, #8
20000496:	4325      	orrs	r5, r4
20000498:	042c      	lsls	r4, r5, #16
2000049a:	432c      	orrs	r4, r5
2000049c:	4d56      	ldr	r5, [pc, #344]	; (200005f8 <RenderDText_Addr>)
2000049e:	46ae      	mov	lr, r5
200004a0:	070e      	lsls	r6, r1, #28
200004a2:	d037      	beq.n	20000514 <RenderDText+0xc4>
200004a4:	0f35      	lsrs	r5, r6, #28
200004a6:	2610      	movs	r6, #16
200004a8:	1b76      	subs	r6, r6, r5
200004aa:	1989      	adds	r1, r1, r6
200004ac:	9f03      	ldr	r7, [sp, #12]
200004ae:	1bbf      	subs	r7, r7, r6
200004b0:	9703      	str	r7, [sp, #12]
200004b2:	b402      	push	{r1}
200004b4:	7817      	ldrb	r7, [r2, #0]
200004b6:	3201      	adds	r2, #1
200004b8:	4447      	add	r7, r8
200004ba:	783f      	ldrb	r7, [r7, #0]
200004bc:	cb40      	ldmia	r3!, {r6}
200004be:	4066      	eors	r6, r4
200004c0:	00ff      	lsls	r7, r7, #3
200004c2:	4477      	add	r7, lr
200004c4:	6839      	ldr	r1, [r7, #0]
200004c6:	4031      	ands	r1, r6
200004c8:	4061      	eors	r1, r4
200004ca:	2d04      	cmp	r5, #4
200004cc:	d806      	bhi.n	200004dc <RenderDText+0x8c>
200004ce:	0c09      	lsrs	r1, r1, #16
200004d0:	7001      	strb	r1, [r0, #0]
200004d2:	7041      	strb	r1, [r0, #1]
200004d4:	0a09      	lsrs	r1, r1, #8
200004d6:	7081      	strb	r1, [r0, #2]
200004d8:	70c1      	strb	r1, [r0, #3]
200004da:	3004      	adds	r0, #4
200004dc:	cb40      	ldmia	r3!, {r6}
200004de:	4066      	eors	r6, r4
200004e0:	6879      	ldr	r1, [r7, #4]
200004e2:	4031      	ands	r1, r6
200004e4:	4061      	eors	r1, r4
200004e6:	2d08      	cmp	r5, #8
200004e8:	d806      	bhi.n	200004f8 <RenderDText+0xa8>
200004ea:	7001      	strb	r1, [r0, #0]
200004ec:	7041      	strb	r1, [r0, #1]
200004ee:	0a09      	lsrs	r1, r1, #8
200004f0:	7081      	strb	r1, [r0, #2]
200004f2:	70c1      	strb	r1, [r0, #3]
200004f4:	0209      	lsls	r1, r1, #8
200004f6:	3004      	adds	r0, #4
200004f8:	0c09      	lsrs	r1, r1, #16
200004fa:	7001      	strb	r1, [r0, #0]
200004fc:	7041      	strb	r1, [r0, #1]
200004fe:	0a09      	lsrs	r1, r1, #8
20000500:	7081      	strb	r1, [r0, #2]
20000502:	70c1      	strb	r1, [r0, #3]
20000504:	3004      	adds	r0, #4
20000506:	bc02      	pop	{r1}
20000508:	9f09      	ldr	r7, [sp, #36]	; 0x24
2000050a:	42b9      	cmp	r1, r7
2000050c:	d302      	bcc.n	20000514 <RenderDText+0xc4>
2000050e:	2100      	movs	r1, #0
20000510:	9a02      	ldr	r2, [sp, #8]
20000512:	9b01      	ldr	r3, [sp, #4]
20000514:	9f09      	ldr	r7, [sp, #36]	; 0x24
20000516:	1a7f      	subs	r7, r7, r1

20000518 <RenderDText_OutLoop>:
20000518:	9e03      	ldr	r6, [sp, #12]
2000051a:	42b7      	cmp	r7, r6
2000051c:	d900      	bls.n	20000520 <RenderDText_OutLoop+0x8>
2000051e:	4637      	mov	r7, r6
20000520:	2f10      	cmp	r7, #16
20000522:	d232      	bcs.n	2000058a <RenderDText_Last+0x60>
20000524:	2f04      	cmp	r7, #4
20000526:	d32d      	bcc.n	20000584 <RenderDText_Last+0x5a>
20000528:	4639      	mov	r1, r7

2000052a <RenderDText_Last>:
2000052a:	b480      	push	{r7}
2000052c:	7817      	ldrb	r7, [r2, #0]
2000052e:	3201      	adds	r2, #1
20000530:	4447      	add	r7, r8
20000532:	783f      	ldrb	r7, [r7, #0]
20000534:	cb40      	ldmia	r3!, {r6}
20000536:	4066      	eors	r6, r4
20000538:	00ff      	lsls	r7, r7, #3
2000053a:	4477      	add	r7, lr
2000053c:	683d      	ldr	r5, [r7, #0]
2000053e:	4035      	ands	r5, r6
20000540:	4065      	eors	r5, r4
20000542:	7005      	strb	r5, [r0, #0]
20000544:	7045      	strb	r5, [r0, #1]
20000546:	0a2d      	lsrs	r5, r5, #8
20000548:	7085      	strb	r5, [r0, #2]
2000054a:	70c5      	strb	r5, [r0, #3]
2000054c:	3004      	adds	r0, #4
2000054e:	2904      	cmp	r1, #4
20000550:	d913      	bls.n	2000057a <RenderDText_Last+0x50>
20000552:	0a2d      	lsrs	r5, r5, #8
20000554:	7005      	strb	r5, [r0, #0]
20000556:	7045      	strb	r5, [r0, #1]
20000558:	0a2d      	lsrs	r5, r5, #8
2000055a:	7085      	strb	r5, [r0, #2]
2000055c:	70c5      	strb	r5, [r0, #3]
2000055e:	3004      	adds	r0, #4
20000560:	2908      	cmp	r1, #8
20000562:	d90a      	bls.n	2000057a <RenderDText_Last+0x50>
20000564:	cb40      	ldmia	r3!, {r6}
20000566:	4066      	eors	r6, r4
20000568:	687f      	ldr	r7, [r7, #4]
2000056a:	4037      	ands	r7, r6
2000056c:	4067      	eors	r7, r4
2000056e:	7007      	strb	r7, [r0, #0]
20000570:	7047      	strb	r7, [r0, #1]
20000572:	0a3f      	lsrs	r7, r7, #8
20000574:	7087      	strb	r7, [r0, #2]
20000576:	70c7      	strb	r7, [r0, #3]
20000578:	3004      	adds	r0, #4
2000057a:	bc80      	pop	{r7}
2000057c:	9a02      	ldr	r2, [sp, #8]
2000057e:	9b01      	ldr	r3, [sp, #4]
20000580:	2f10      	cmp	r7, #16
20000582:	d2c9      	bcs.n	20000518 <RenderDText_OutLoop>
20000584:	bc10      	pop	{r4}
20000586:	46a0      	mov	r8, r4
20000588:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
2000058a:	08b9      	lsrs	r1, r7, #2
2000058c:	008d      	lsls	r5, r1, #2
2000058e:	1b76      	subs	r6, r6, r5
20000590:	9603      	str	r6, [sp, #12]
20000592:	3903      	subs	r1, #3

20000594 <RenderDText_InLoop>:
20000594:	7817      	ldrb	r7, [r2, #0]
20000596:	3201      	adds	r2, #1
20000598:	4447      	add	r7, r8
2000059a:	783f      	ldrb	r7, [r7, #0]
2000059c:	cb40      	ldmia	r3!, {r6}
2000059e:	4066      	eors	r6, r4
200005a0:	00ff      	lsls	r7, r7, #3
200005a2:	4477      	add	r7, lr
200005a4:	683d      	ldr	r5, [r7, #0]
200005a6:	4035      	ands	r5, r6
200005a8:	4065      	eors	r5, r4
200005aa:	7005      	strb	r5, [r0, #0]
200005ac:	7045      	strb	r5, [r0, #1]
200005ae:	0a2d      	lsrs	r5, r5, #8
200005b0:	7085      	strb	r5, [r0, #2]
200005b2:	70c5      	strb	r5, [r0, #3]
200005b4:	0a2d      	lsrs	r5, r5, #8
200005b6:	7105      	strb	r5, [r0, #4]
200005b8:	7145      	strb	r5, [r0, #5]
200005ba:	0a2d      	lsrs	r5, r5, #8
200005bc:	7185      	strb	r5, [r0, #6]
200005be:	71c5      	strb	r5, [r0, #7]
200005c0:	3008      	adds	r0, #8
200005c2:	cb40      	ldmia	r3!, {r6}
200005c4:	4066      	eors	r6, r4
200005c6:	687f      	ldr	r7, [r7, #4]
200005c8:	4037      	ands	r7, r6
200005ca:	4067      	eors	r7, r4
200005cc:	7007      	strb	r7, [r0, #0]
200005ce:	7047      	strb	r7, [r0, #1]
200005d0:	0a3f      	lsrs	r7, r7, #8
200005d2:	7087      	strb	r7, [r0, #2]
200005d4:	70c7      	strb	r7, [r0, #3]
200005d6:	0a3f      	lsrs	r7, r7, #8
200005d8:	7107      	strb	r7, [r0, #4]
200005da:	7147      	strb	r7, [r0, #5]
200005dc:	0a3f      	lsrs	r7, r7, #8
200005de:	7187      	strb	r7, [r0, #6]
200005e0:	71c7      	strb	r7, [r0, #7]
200005e2:	3008      	adds	r0, #8
200005e4:	3904      	subs	r1, #4
200005e6:	d8d5      	bhi.n	20000594 <RenderDText_InLoop>
200005e8:	9f09      	ldr	r7, [sp, #36]	; 0x24
200005ea:	3103      	adds	r1, #3
200005ec:	0089      	lsls	r1, r1, #2
200005ee:	d19c      	bne.n	2000052a <RenderDText_Last>
200005f0:	9a02      	ldr	r2, [sp, #8]
200005f2:	9b01      	ldr	r3, [sp, #4]
200005f4:	e790      	b.n	20000518 <RenderDText_OutLoop>
200005f6:	46c0      	nop			; (mov r8, r8)

200005f8 <RenderDText_Addr>:
200005f8:	2000642c 	.word	0x2000642c

200005fc <RenderDText_pSioBase>:
200005fc:	d0000000 	.word	0xd0000000

20000600 <RenderFastSprite>:
20000600:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
20000602:	6817      	ldr	r7, [r2, #0]
20000604:	46be      	mov	lr, r7
20000606:	8c17      	ldrh	r7, [r2, #32]
20000608:	9701      	str	r7, [sp, #4]
2000060a:	8ad2      	ldrh	r2, [r2, #22]
2000060c:	2100      	movs	r1, #0
2000060e:	9f01      	ldr	r7, [sp, #4]
20000610:	3f01      	subs	r7, #1
20000612:	d332      	bcc.n	2000067a <RenderFastSprite+0x7a>
20000614:	9701      	str	r7, [sp, #4]
20000616:	4677      	mov	r7, lr
20000618:	cf08      	ldmia	r7!, {r3}
2000061a:	46be      	mov	lr, r7
2000061c:	8a5f      	ldrh	r7, [r3, #18]
2000061e:	b23f      	sxth	r7, r7
20000620:	9c00      	ldr	r4, [sp, #0]
20000622:	1be4      	subs	r4, r4, r7
20000624:	d4f3      	bmi.n	2000060e <RenderFastSprite+0xe>
20000626:	8adf      	ldrh	r7, [r3, #22]
20000628:	42bc      	cmp	r4, r7
2000062a:	daf0      	bge.n	2000060e <RenderFastSprite+0xe>
2000062c:	685f      	ldr	r7, [r3, #4]
2000062e:	5d3d      	ldrb	r5, [r7, r4]
20000630:	00ad      	lsls	r5, r5, #2
20000632:	689f      	ldr	r7, [r3, #8]
20000634:	5d3e      	ldrb	r6, [r7, r4]
20000636:	00b6      	lsls	r6, r6, #2
20000638:	8b1f      	ldrh	r7, [r3, #24]
2000063a:	437c      	muls	r4, r7
2000063c:	681f      	ldr	r7, [r3, #0]
2000063e:	443c      	add	r4, r7
20000640:	8a1b      	ldrh	r3, [r3, #16]
20000642:	b21b      	sxth	r3, r3
20000644:	195b      	adds	r3, r3, r5
20000646:	1acf      	subs	r7, r1, r3
20000648:	dd02      	ble.n	20000650 <RenderFastSprite+0x50>
2000064a:	19ed      	adds	r5, r5, r7
2000064c:	1bf6      	subs	r6, r6, r7
2000064e:	460b      	mov	r3, r1
20000650:	1ad7      	subs	r7, r2, r3
20000652:	42be      	cmp	r6, r7
20000654:	dd00      	ble.n	20000658 <RenderFastSprite+0x58>
20000656:	463e      	mov	r6, r7
20000658:	2703      	movs	r7, #3
2000065a:	43bb      	bics	r3, r7
2000065c:	43bd      	bics	r5, r7
2000065e:	43be      	bics	r6, r7
20000660:	ddd5      	ble.n	2000060e <RenderFastSprite+0xe>
20000662:	1a5f      	subs	r7, r3, r1
20000664:	dd04      	ble.n	20000670 <RenderFastSprite+0x70>
20000666:	08bf      	lsrs	r7, r7, #2
20000668:	c080      	stmia	r0!, {r7}
2000066a:	9f02      	ldr	r7, [sp, #8]
2000066c:	c080      	stmia	r0!, {r7}
2000066e:	4619      	mov	r1, r3
20000670:	1967      	adds	r7, r4, r5
20000672:	08b4      	lsrs	r4, r6, #2
20000674:	c090      	stmia	r0!, {r4, r7}
20000676:	1989      	adds	r1, r1, r6
20000678:	e7c9      	b.n	2000060e <RenderFastSprite+0xe>
2000067a:	1a52      	subs	r2, r2, r1
2000067c:	d902      	bls.n	20000684 <RenderFastSprite+0x84>
2000067e:	0892      	lsrs	r2, r2, #2
20000680:	9b02      	ldr	r3, [sp, #8]
20000682:	c00c      	stmia	r0!, {r2, r3}
20000684:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

20000688 <RenderFText>:
20000688:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
2000068a:	9c08      	ldr	r4, [sp, #32]
2000068c:	4e3a      	ldr	r6, [pc, #232]	; (20000778 <RenderFText_pSioBase>)
2000068e:	6632      	str	r2, [r6, #96]	; 0x60
20000690:	8a62      	ldrh	r2, [r4, #18]
20000692:	6672      	str	r2, [r6, #100]	; 0x64
20000694:	8925      	ldrh	r5, [r4, #8]
20000696:	2703      	movs	r7, #3
20000698:	43bd      	bics	r5, r7
2000069a:	9508      	str	r5, [sp, #32]
2000069c:	43b9      	bics	r1, r7
2000069e:	43bb      	bics	r3, r7
200006a0:	9302      	str	r3, [sp, #8]
200006a2:	6f75      	ldr	r5, [r6, #116]	; 0x74
200006a4:	6f32      	ldr	r2, [r6, #112]	; 0x70
200006a6:	022d      	lsls	r5, r5, #8
200006a8:	6963      	ldr	r3, [r4, #20]
200006aa:	442b      	add	r3, r5
200006ac:	8865      	ldrh	r5, [r4, #2]
200006ae:	436a      	muls	r2, r5
200006b0:	68e5      	ldr	r5, [r4, #12]
200006b2:	442a      	add	r2, r5
200006b4:	9201      	str	r2, [sp, #4]
200006b6:	08ce      	lsrs	r6, r1, #3
200006b8:	0076      	lsls	r6, r6, #1
200006ba:	4432      	add	r2, r6
200006bc:	7e24      	ldrb	r4, [r4, #24]
200006be:	0225      	lsls	r5, r4, #8
200006c0:	4325      	orrs	r5, r4
200006c2:	042c      	lsls	r4, r5, #16
200006c4:	432c      	orrs	r4, r5
200006c6:	4d2b      	ldr	r5, [pc, #172]	; (20000774 <RenderFText_Addr>)
200006c8:	46ae      	mov	lr, r5
200006ca:	074e      	lsls	r6, r1, #29
200006cc:	d517      	bpl.n	200006fe <RenderFText+0x76>
200006ce:	7815      	ldrb	r5, [r2, #0]
200006d0:	5d5d      	ldrb	r5, [r3, r5]
200006d2:	7856      	ldrb	r6, [r2, #1]
200006d4:	3202      	adds	r2, #2
200006d6:	0237      	lsls	r7, r6, #8
200006d8:	4337      	orrs	r7, r6
200006da:	043e      	lsls	r6, r7, #16
200006dc:	433e      	orrs	r6, r7
200006de:	4066      	eors	r6, r4
200006e0:	00ed      	lsls	r5, r5, #3
200006e2:	4475      	add	r5, lr
200006e4:	686f      	ldr	r7, [r5, #4]
200006e6:	4037      	ands	r7, r6
200006e8:	4067      	eors	r7, r4
200006ea:	c080      	stmia	r0!, {r7}
200006ec:	3104      	adds	r1, #4
200006ee:	9f08      	ldr	r7, [sp, #32]
200006f0:	42b9      	cmp	r1, r7
200006f2:	d301      	bcc.n	200006f8 <RenderFText+0x70>
200006f4:	2100      	movs	r1, #0
200006f6:	9a01      	ldr	r2, [sp, #4]
200006f8:	9f02      	ldr	r7, [sp, #8]
200006fa:	3f04      	subs	r7, #4
200006fc:	9702      	str	r7, [sp, #8]
200006fe:	9f08      	ldr	r7, [sp, #32]
20000700:	1a7f      	subs	r7, r7, r1

20000702 <RenderFText_OutLoop>:
20000702:	9e02      	ldr	r6, [sp, #8]
20000704:	42b7      	cmp	r7, r6
20000706:	d900      	bls.n	2000070a <RenderFText_OutLoop+0x8>
20000708:	4637      	mov	r7, r6
2000070a:	2f08      	cmp	r7, #8
2000070c:	d214      	bcs.n	20000738 <RenderFText_Last+0x26>
2000070e:	2f04      	cmp	r7, #4
20000710:	d311      	bcc.n	20000736 <RenderFText_Last+0x24>

20000712 <RenderFText_Last>:
20000712:	7815      	ldrb	r5, [r2, #0]
20000714:	5d5d      	ldrb	r5, [r3, r5]
20000716:	7856      	ldrb	r6, [r2, #1]
20000718:	3202      	adds	r2, #2
2000071a:	0231      	lsls	r1, r6, #8
2000071c:	4331      	orrs	r1, r6
2000071e:	040e      	lsls	r6, r1, #16
20000720:	430e      	orrs	r6, r1
20000722:	4066      	eors	r6, r4
20000724:	00ed      	lsls	r5, r5, #3
20000726:	4475      	add	r5, lr
20000728:	6829      	ldr	r1, [r5, #0]
2000072a:	4031      	ands	r1, r6
2000072c:	4061      	eors	r1, r4
2000072e:	c002      	stmia	r0!, {r1}
20000730:	9a01      	ldr	r2, [sp, #4]
20000732:	2f04      	cmp	r7, #4
20000734:	d8e5      	bhi.n	20000702 <RenderFText_OutLoop>
20000736:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
20000738:	08b9      	lsrs	r1, r7, #2
2000073a:	008d      	lsls	r5, r1, #2
2000073c:	1b76      	subs	r6, r6, r5
2000073e:	9602      	str	r6, [sp, #8]
20000740:	3901      	subs	r1, #1

20000742 <RenderFText_InLoop>:
20000742:	7815      	ldrb	r5, [r2, #0]
20000744:	5d5d      	ldrb	r5, [r3, r5]
20000746:	7856      	ldrb	r6, [r2, #1]
20000748:	3202      	adds	r2, #2
2000074a:	0237      	lsls	r7, r6, #8
2000074c:	4337      	orrs	r7, r6
2000074e:	043e      	lsls	r6, r7, #16
20000750:	433e      	orrs	r6, r7
20000752:	4066      	eors	r6, r4
20000754:	00ed      	lsls	r5, r5, #3
20000756:	4475      	add	r5, lr
20000758:	682f      	ldr	r7, [r5, #0]
2000075a:	4037      	ands	r7, r6
2000075c:	4067      	eors	r7, r4
2000075e:	c080      	stmia	r0!, {r7}
20000760:	686f      	ldr	r7, [r5, #4]
20000762:	4037      	ands	r7, r6
20000764:	4067      	eors	r7, r4
20000766:	c080      	stmia	r0!, {r7}
20000768:	3902      	subs	r1, #2
2000076a:	d8ea      	bhi.n	20000742 <RenderFText_InLoop>
2000076c:	9f08      	ldr	r7, [sp, #32]
2000076e:	d0d0      	beq.n	20000712 <RenderFText_Last>
20000770:	9a01      	ldr	r2, [sp, #4]
20000772:	e7c6      	b.n	20000702 <RenderFText_OutLoop>

20000774 <RenderFText_Addr>:
20000774:	2000642c 	.word	0x2000642c

20000778 <RenderFText_pSioBase>:
20000778:	d0000000 	.word	0xd0000000

2000077c <RenderGraph1>:
2000077c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2000077e:	9c06      	ldr	r4, [sp, #24]
20000780:	8925      	ldrh	r5, [r4, #8]
20000782:	2703      	movs	r7, #3
20000784:	43bd      	bics	r5, r7
20000786:	9506      	str	r5, [sp, #24]
20000788:	43b9      	bics	r1, r7
2000078a:	43bb      	bics	r3, r7
2000078c:	9300      	str	r3, [sp, #0]
2000078e:	8865      	ldrh	r5, [r4, #2]
20000790:	436a      	muls	r2, r5
20000792:	68e5      	ldr	r5, [r4, #12]
20000794:	442a      	add	r2, r5
20000796:	4696      	mov	lr, r2
20000798:	08ca      	lsrs	r2, r1, #3
2000079a:	4472      	add	r2, lr
2000079c:	7d66      	ldrb	r6, [r4, #21]
2000079e:	0237      	lsls	r7, r6, #8
200007a0:	4337      	orrs	r7, r6
200007a2:	043e      	lsls	r6, r7, #16
200007a4:	433e      	orrs	r6, r7
200007a6:	7d24      	ldrb	r4, [r4, #20]
200007a8:	0225      	lsls	r5, r4, #8
200007aa:	4325      	orrs	r5, r4
200007ac:	042c      	lsls	r4, r5, #16
200007ae:	432c      	orrs	r4, r5
200007b0:	4066      	eors	r6, r4
200007b2:	4b20      	ldr	r3, [pc, #128]	; (20000834 <RenderGraph1_Addr>)
200007b4:	074d      	lsls	r5, r1, #29
200007b6:	d510      	bpl.n	200007da <RenderGraph1+0x5e>
200007b8:	7815      	ldrb	r5, [r2, #0]
200007ba:	3201      	adds	r2, #1
200007bc:	00ed      	lsls	r5, r5, #3
200007be:	441d      	add	r5, r3
200007c0:	686f      	ldr	r7, [r5, #4]
200007c2:	4037      	ands	r7, r6
200007c4:	4067      	eors	r7, r4
200007c6:	c080      	stmia	r0!, {r7}
200007c8:	3104      	adds	r1, #4
200007ca:	9f06      	ldr	r7, [sp, #24]
200007cc:	42b9      	cmp	r1, r7
200007ce:	d301      	bcc.n	200007d4 <RenderGraph1+0x58>
200007d0:	2100      	movs	r1, #0
200007d2:	4672      	mov	r2, lr
200007d4:	9f00      	ldr	r7, [sp, #0]
200007d6:	3f04      	subs	r7, #4
200007d8:	9700      	str	r7, [sp, #0]
200007da:	9f06      	ldr	r7, [sp, #24]
200007dc:	1a7f      	subs	r7, r7, r1

200007de <RenderGraph1_OutLoop>:
200007de:	9d00      	ldr	r5, [sp, #0]
200007e0:	42af      	cmp	r7, r5
200007e2:	d900      	bls.n	200007e6 <RenderGraph1_OutLoop+0x8>
200007e4:	462f      	mov	r7, r5
200007e6:	2f08      	cmp	r7, #8
200007e8:	d20d      	bcs.n	20000806 <RenderGraph1_Last+0x18>
200007ea:	2f04      	cmp	r7, #4
200007ec:	d30a      	bcc.n	20000804 <RenderGraph1_Last+0x16>

200007ee <RenderGraph1_Last>:
200007ee:	7815      	ldrb	r5, [r2, #0]
200007f0:	3201      	adds	r2, #1
200007f2:	00ed      	lsls	r5, r5, #3
200007f4:	441d      	add	r5, r3
200007f6:	6829      	ldr	r1, [r5, #0]
200007f8:	4031      	ands	r1, r6
200007fa:	4061      	eors	r1, r4
200007fc:	c002      	stmia	r0!, {r1}
200007fe:	4672      	mov	r2, lr
20000800:	2f04      	cmp	r7, #4
20000802:	d8ec      	bhi.n	200007de <RenderGraph1_OutLoop>
20000804:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
20000806:	08b9      	lsrs	r1, r7, #2
20000808:	008f      	lsls	r7, r1, #2
2000080a:	1bed      	subs	r5, r5, r7
2000080c:	9500      	str	r5, [sp, #0]
2000080e:	3901      	subs	r1, #1

20000810 <RenderGraph1_InLoop>:
20000810:	7815      	ldrb	r5, [r2, #0]
20000812:	3201      	adds	r2, #1
20000814:	00ed      	lsls	r5, r5, #3
20000816:	441d      	add	r5, r3
20000818:	682f      	ldr	r7, [r5, #0]
2000081a:	4037      	ands	r7, r6
2000081c:	4067      	eors	r7, r4
2000081e:	c080      	stmia	r0!, {r7}
20000820:	686f      	ldr	r7, [r5, #4]
20000822:	4037      	ands	r7, r6
20000824:	4067      	eors	r7, r4
20000826:	c080      	stmia	r0!, {r7}
20000828:	3902      	subs	r1, #2
2000082a:	d8f1      	bhi.n	20000810 <RenderGraph1_InLoop>
2000082c:	9f06      	ldr	r7, [sp, #24]
2000082e:	d0de      	beq.n	200007ee <RenderGraph1_Last>
20000830:	4672      	mov	r2, lr
20000832:	e7d4      	b.n	200007de <RenderGraph1_OutLoop>

20000834 <RenderGraph1_Addr>:
20000834:	2000642c 	.word	0x2000642c

20000838 <RenderGraph2>:
20000838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2000083a:	9c06      	ldr	r4, [sp, #24]
2000083c:	8927      	ldrh	r7, [r4, #8]
2000083e:	2603      	movs	r6, #3
20000840:	43b7      	bics	r7, r6
20000842:	43b1      	bics	r1, r6
20000844:	43b3      	bics	r3, r6
20000846:	9300      	str	r3, [sp, #0]
20000848:	8865      	ldrh	r5, [r4, #2]
2000084a:	436a      	muls	r2, r5
2000084c:	68e5      	ldr	r5, [r4, #12]
2000084e:	442a      	add	r2, r5
20000850:	4696      	mov	lr, r2
20000852:	088e      	lsrs	r6, r1, #2
20000854:	4432      	add	r2, r6
20000856:	6963      	ldr	r3, [r4, #20]
20000858:	1a7e      	subs	r6, r7, r1

2000085a <RenderGraph2_OutLoop>:
2000085a:	9c00      	ldr	r4, [sp, #0]
2000085c:	42a6      	cmp	r6, r4
2000085e:	d900      	bls.n	20000862 <RenderGraph2_OutLoop+0x8>
20000860:	4626      	mov	r6, r4
20000862:	2e04      	cmp	r6, #4
20000864:	d200      	bcs.n	20000868 <RenderGraph2_OutLoop+0xe>
20000866:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
20000868:	08b1      	lsrs	r1, r6, #2
2000086a:	008e      	lsls	r6, r1, #2
2000086c:	1ba4      	subs	r4, r4, r6
2000086e:	9400      	str	r4, [sp, #0]
20000870:	0849      	lsrs	r1, r1, #1
20000872:	d306      	bcc.n	20000882 <RenderGraph2_InLoop>
20000874:	7814      	ldrb	r4, [r2, #0]
20000876:	3201      	adds	r2, #1
20000878:	00a4      	lsls	r4, r4, #2
2000087a:	591d      	ldr	r5, [r3, r4]
2000087c:	c020      	stmia	r0!, {r5}
2000087e:	4209      	tst	r1, r1
20000880:	d009      	beq.n	20000896 <RenderGraph2_EndLoop>

20000882 <RenderGraph2_InLoop>:
20000882:	7814      	ldrb	r4, [r2, #0]
20000884:	00a4      	lsls	r4, r4, #2
20000886:	591d      	ldr	r5, [r3, r4]
20000888:	7854      	ldrb	r4, [r2, #1]
2000088a:	3202      	adds	r2, #2
2000088c:	00a4      	lsls	r4, r4, #2
2000088e:	591e      	ldr	r6, [r3, r4]
20000890:	c060      	stmia	r0!, {r5, r6}
20000892:	3901      	subs	r1, #1
20000894:	d1f5      	bne.n	20000882 <RenderGraph2_InLoop>

20000896 <RenderGraph2_EndLoop>:
20000896:	463e      	mov	r6, r7
20000898:	4672      	mov	r2, lr
2000089a:	e7de      	b.n	2000085a <RenderGraph2_OutLoop>

2000089c <RenderGraph4>:
2000089c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2000089e:	9c06      	ldr	r4, [sp, #24]
200008a0:	8927      	ldrh	r7, [r4, #8]
200008a2:	2603      	movs	r6, #3
200008a4:	43b7      	bics	r7, r6
200008a6:	9706      	str	r7, [sp, #24]
200008a8:	43b1      	bics	r1, r6
200008aa:	43b3      	bics	r3, r6
200008ac:	9300      	str	r3, [sp, #0]
200008ae:	8865      	ldrh	r5, [r4, #2]
200008b0:	436a      	muls	r2, r5
200008b2:	68e5      	ldr	r5, [r4, #12]
200008b4:	442a      	add	r2, r5
200008b6:	4696      	mov	lr, r2
200008b8:	084e      	lsrs	r6, r1, #1
200008ba:	4432      	add	r2, r6
200008bc:	6963      	ldr	r3, [r4, #20]
200008be:	9e06      	ldr	r6, [sp, #24]
200008c0:	1a76      	subs	r6, r6, r1

200008c2 <RenderGraph4_OutLoop>:
200008c2:	9c00      	ldr	r4, [sp, #0]
200008c4:	42a6      	cmp	r6, r4
200008c6:	d900      	bls.n	200008ca <RenderGraph4_OutLoop+0x8>
200008c8:	4626      	mov	r6, r4
200008ca:	2e04      	cmp	r6, #4
200008cc:	d200      	bcs.n	200008d0 <RenderGraph4_OutLoop+0xe>
200008ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
200008d0:	08b1      	lsrs	r1, r6, #2
200008d2:	008e      	lsls	r6, r1, #2
200008d4:	1ba4      	subs	r4, r4, r6
200008d6:	9400      	str	r4, [sp, #0]
200008d8:	0849      	lsrs	r1, r1, #1
200008da:	d30b      	bcc.n	200008f4 <RenderGraph4_InLoop>
200008dc:	7814      	ldrb	r4, [r2, #0]
200008de:	0064      	lsls	r4, r4, #1
200008e0:	5b1d      	ldrh	r5, [r3, r4]
200008e2:	7854      	ldrb	r4, [r2, #1]
200008e4:	3202      	adds	r2, #2
200008e6:	0064      	lsls	r4, r4, #1
200008e8:	5b1e      	ldrh	r6, [r3, r4]
200008ea:	0436      	lsls	r6, r6, #16
200008ec:	4335      	orrs	r5, r6
200008ee:	c020      	stmia	r0!, {r5}
200008f0:	4209      	tst	r1, r1
200008f2:	d013      	beq.n	2000091c <RenderGraph4_EndLoop>

200008f4 <RenderGraph4_InLoop>:
200008f4:	7814      	ldrb	r4, [r2, #0]
200008f6:	0064      	lsls	r4, r4, #1
200008f8:	5b1d      	ldrh	r5, [r3, r4]
200008fa:	7854      	ldrb	r4, [r2, #1]
200008fc:	0064      	lsls	r4, r4, #1
200008fe:	5b1e      	ldrh	r6, [r3, r4]
20000900:	0436      	lsls	r6, r6, #16
20000902:	4335      	orrs	r5, r6
20000904:	7894      	ldrb	r4, [r2, #2]
20000906:	0064      	lsls	r4, r4, #1
20000908:	5b1e      	ldrh	r6, [r3, r4]
2000090a:	78d4      	ldrb	r4, [r2, #3]
2000090c:	3204      	adds	r2, #4
2000090e:	0064      	lsls	r4, r4, #1
20000910:	5b1f      	ldrh	r7, [r3, r4]
20000912:	043f      	lsls	r7, r7, #16
20000914:	433e      	orrs	r6, r7
20000916:	c060      	stmia	r0!, {r5, r6}
20000918:	3901      	subs	r1, #1
2000091a:	d1eb      	bne.n	200008f4 <RenderGraph4_InLoop>

2000091c <RenderGraph4_EndLoop>:
2000091c:	9e06      	ldr	r6, [sp, #24]
2000091e:	4672      	mov	r2, lr
20000920:	e7cf      	b.n	200008c2 <RenderGraph4_OutLoop>

20000922 <RenderGrad1>:
20000922:	2200      	movs	r2, #0

20000924 <RenderGrad2>:
20000924:	07d2      	lsls	r2, r2, #31
20000926:	0fd2      	lsrs	r2, r2, #31

20000928 <RenderGraph8>:
20000928:	b5f0      	push	{r4, r5, r6, r7, lr}
2000092a:	9c05      	ldr	r4, [sp, #20]
2000092c:	8927      	ldrh	r7, [r4, #8]
2000092e:	2603      	movs	r6, #3
20000930:	43b7      	bics	r7, r6
20000932:	43b1      	bics	r1, r6
20000934:	43b3      	bics	r3, r6
20000936:	8865      	ldrh	r5, [r4, #2]
20000938:	436a      	muls	r2, r5
2000093a:	68e5      	ldr	r5, [r4, #12]
2000093c:	1954      	adds	r4, r2, r5
2000093e:	1862      	adds	r2, r4, r1
20000940:	1a79      	subs	r1, r7, r1
20000942:	421b      	tst	r3, r3
20000944:	d008      	beq.n	20000958 <RenderGraph8+0x30>
20000946:	4299      	cmp	r1, r3
20000948:	d900      	bls.n	2000094c <RenderGraph8+0x24>
2000094a:	4619      	mov	r1, r3
2000094c:	1a5b      	subs	r3, r3, r1
2000094e:	0889      	lsrs	r1, r1, #2
20000950:	c006      	stmia	r0!, {r1, r2}
20000952:	4639      	mov	r1, r7
20000954:	4622      	mov	r2, r4
20000956:	e7f4      	b.n	20000942 <RenderGraph8+0x1a>
20000958:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

2000095c <RenderGraph8Mat>:
2000095c:	b5f0      	push	{r4, r5, r6, r7, lr}
2000095e:	0859      	lsrs	r1, r3, #1
20000960:	4249      	negs	r1, r1
20000962:	468e      	mov	lr, r1
20000964:	089f      	lsrs	r7, r3, #2
20000966:	9c05      	ldr	r4, [sp, #20]
20000968:	8961      	ldrh	r1, [r4, #10]
2000096a:	0849      	lsrs	r1, r1, #1
2000096c:	4249      	negs	r1, r1
2000096e:	1889      	adds	r1, r1, r2
20000970:	468c      	mov	ip, r1
20000972:	8b21      	ldrh	r1, [r4, #24]
20000974:	8b62      	ldrh	r2, [r4, #26]
20000976:	4b2c      	ldr	r3, [pc, #176]	; (20000a28 <RenderGraph8Mat_Interp>)
20000978:	68e6      	ldr	r6, [r4, #12]
2000097a:	611e      	str	r6, [r3, #16]
2000097c:	4e2b      	ldr	r6, [pc, #172]	; (20000a2c <RenderGraph8Mat_Ctrl>)
2000097e:	1a76      	subs	r6, r6, r1
20000980:	014d      	lsls	r5, r1, #5
20000982:	432e      	orrs	r6, r5
20000984:	3901      	subs	r1, #1
20000986:	188d      	adds	r5, r1, r2
20000988:	02ad      	lsls	r5, r5, #10
2000098a:	432e      	orrs	r6, r5
2000098c:	631e      	str	r6, [r3, #48]	; 0x30
2000098e:	4e27      	ldr	r6, [pc, #156]	; (20000a2c <RenderGraph8Mat_Ctrl>)
20000990:	0289      	lsls	r1, r1, #10
20000992:	430e      	orrs	r6, r1
20000994:	62de      	str	r6, [r3, #44]	; 0x2c
20000996:	6964      	ldr	r4, [r4, #20]
20000998:	6825      	ldr	r5, [r4, #0]
2000099a:	609d      	str	r5, [r3, #8]
2000099c:	68e6      	ldr	r6, [r4, #12]
2000099e:	60de      	str	r6, [r3, #12]
200009a0:	4672      	mov	r2, lr
200009a2:	4355      	muls	r5, r2
200009a4:	4372      	muls	r2, r6
200009a6:	6861      	ldr	r1, [r4, #4]
200009a8:	4666      	mov	r6, ip
200009aa:	4371      	muls	r1, r6
200009ac:	186d      	adds	r5, r5, r1
200009ae:	68a1      	ldr	r1, [r4, #8]
200009b0:	186d      	adds	r5, r5, r1
200009b2:	601d      	str	r5, [r3, #0]
200009b4:	6921      	ldr	r1, [r4, #16]
200009b6:	4371      	muls	r1, r6
200009b8:	1852      	adds	r2, r2, r1
200009ba:	6961      	ldr	r1, [r4, #20]
200009bc:	1852      	adds	r2, r2, r1
200009be:	605a      	str	r2, [r3, #4]
200009c0:	087f      	lsrs	r7, r7, #1
200009c2:	d30e      	bcc.n	200009e2 <RenderGraph8Mat+0x86>
200009c4:	69dc      	ldr	r4, [r3, #28]
200009c6:	7826      	ldrb	r6, [r4, #0]
200009c8:	69dc      	ldr	r4, [r3, #28]
200009ca:	7825      	ldrb	r5, [r4, #0]
200009cc:	022d      	lsls	r5, r5, #8
200009ce:	432e      	orrs	r6, r5
200009d0:	69dc      	ldr	r4, [r3, #28]
200009d2:	7825      	ldrb	r5, [r4, #0]
200009d4:	042d      	lsls	r5, r5, #16
200009d6:	432e      	orrs	r6, r5
200009d8:	69dc      	ldr	r4, [r3, #28]
200009da:	7825      	ldrb	r5, [r4, #0]
200009dc:	062d      	lsls	r5, r5, #24
200009de:	432e      	orrs	r6, r5
200009e0:	c040      	stmia	r0!, {r6}
200009e2:	423f      	tst	r7, r7
200009e4:	d01e      	beq.n	20000a24 <RenderGraph8Mat+0xc8>
200009e6:	69dc      	ldr	r4, [r3, #28]
200009e8:	7821      	ldrb	r1, [r4, #0]
200009ea:	69dc      	ldr	r4, [r3, #28]
200009ec:	7824      	ldrb	r4, [r4, #0]
200009ee:	0224      	lsls	r4, r4, #8
200009f0:	4321      	orrs	r1, r4
200009f2:	69dc      	ldr	r4, [r3, #28]
200009f4:	7824      	ldrb	r4, [r4, #0]
200009f6:	0424      	lsls	r4, r4, #16
200009f8:	4321      	orrs	r1, r4
200009fa:	69dc      	ldr	r4, [r3, #28]
200009fc:	7824      	ldrb	r4, [r4, #0]
200009fe:	0624      	lsls	r4, r4, #24
20000a00:	4321      	orrs	r1, r4
20000a02:	69dc      	ldr	r4, [r3, #28]
20000a04:	7822      	ldrb	r2, [r4, #0]
20000a06:	69dc      	ldr	r4, [r3, #28]
20000a08:	7824      	ldrb	r4, [r4, #0]
20000a0a:	0224      	lsls	r4, r4, #8
20000a0c:	4322      	orrs	r2, r4
20000a0e:	69dc      	ldr	r4, [r3, #28]
20000a10:	7824      	ldrb	r4, [r4, #0]
20000a12:	0424      	lsls	r4, r4, #16
20000a14:	4322      	orrs	r2, r4
20000a16:	69dc      	ldr	r4, [r3, #28]
20000a18:	7824      	ldrb	r4, [r4, #0]
20000a1a:	0624      	lsls	r4, r4, #24
20000a1c:	4322      	orrs	r2, r4
20000a1e:	c006      	stmia	r0!, {r1, r2}
20000a20:	3f01      	subs	r7, #1
20000a22:	d1e0      	bne.n	200009e6 <RenderGraph8Mat+0x8a>
20000a24:	bdf0      	pop	{r4, r5, r6, r7, pc}
20000a26:	46c0      	nop			; (mov r8, r8)

20000a28 <RenderGraph8Mat_Interp>:
20000a28:	d00000c0 	.word	0xd00000c0

20000a2c <RenderGraph8Mat_Ctrl>:
20000a2c:	0004000c 	.word	0x0004000c

20000a30 <RenderGraph8Persp>:
20000a30:	b5f0      	push	{r4, r5, r6, r7, lr}
20000a32:	9c05      	ldr	r4, [sp, #20]
20000a34:	8961      	ldrh	r1, [r4, #10]
20000a36:	1a52      	subs	r2, r2, r1
20000a38:	4694      	mov	ip, r2
20000a3a:	030e      	lsls	r6, r1, #12
20000a3c:	4d38      	ldr	r5, [pc, #224]	; (20000b20 <RenderGraph8Persp_pSioBase>)
20000a3e:	662e      	str	r6, [r5, #96]	; 0x60
20000a40:	8a66      	ldrh	r6, [r4, #18]
20000a42:	1852      	adds	r2, r2, r1
20000a44:	18b6      	adds	r6, r6, r2
20000a46:	3601      	adds	r6, #1
20000a48:	666e      	str	r6, [r5, #100]	; 0x64
20000a4a:	085d      	lsrs	r5, r3, #1
20000a4c:	426d      	negs	r5, r5
20000a4e:	46ae      	mov	lr, r5
20000a50:	089f      	lsrs	r7, r3, #2
20000a52:	8b21      	ldrh	r1, [r4, #24]
20000a54:	8b62      	ldrh	r2, [r4, #26]
20000a56:	4b33      	ldr	r3, [pc, #204]	; (20000b24 <RenderGraph8Persp_Interp>)
20000a58:	68e6      	ldr	r6, [r4, #12]
20000a5a:	611e      	str	r6, [r3, #16]
20000a5c:	4e32      	ldr	r6, [pc, #200]	; (20000b28 <RenderGraph8Persp_Ctrl>)
20000a5e:	1a76      	subs	r6, r6, r1
20000a60:	014d      	lsls	r5, r1, #5
20000a62:	432e      	orrs	r6, r5
20000a64:	3901      	subs	r1, #1
20000a66:	188d      	adds	r5, r1, r2
20000a68:	02ad      	lsls	r5, r5, #10
20000a6a:	432e      	orrs	r6, r5
20000a6c:	631e      	str	r6, [r3, #48]	; 0x30
20000a6e:	4e2e      	ldr	r6, [pc, #184]	; (20000b28 <RenderGraph8Persp_Ctrl>)
20000a70:	0289      	lsls	r1, r1, #10
20000a72:	430e      	orrs	r6, r1
20000a74:	62de      	str	r6, [r3, #44]	; 0x2c
20000a76:	6964      	ldr	r4, [r4, #20]
20000a78:	4929      	ldr	r1, [pc, #164]	; (20000b20 <RenderGraph8Persp_pSioBase>)
20000a7a:	6f09      	ldr	r1, [r1, #112]	; 0x70
20000a7c:	6825      	ldr	r5, [r4, #0]
20000a7e:	434d      	muls	r5, r1
20000a80:	132d      	asrs	r5, r5, #12
20000a82:	609d      	str	r5, [r3, #8]
20000a84:	68e6      	ldr	r6, [r4, #12]
20000a86:	434e      	muls	r6, r1
20000a88:	1336      	asrs	r6, r6, #12
20000a8a:	60de      	str	r6, [r3, #12]
20000a8c:	4672      	mov	r2, lr
20000a8e:	4355      	muls	r5, r2
20000a90:	4372      	muls	r2, r6
20000a92:	468e      	mov	lr, r1
20000a94:	6866      	ldr	r6, [r4, #4]
20000a96:	4371      	muls	r1, r6
20000a98:	1309      	asrs	r1, r1, #12
20000a9a:	4666      	mov	r6, ip
20000a9c:	4371      	muls	r1, r6
20000a9e:	186d      	adds	r5, r5, r1
20000aa0:	68a1      	ldr	r1, [r4, #8]
20000aa2:	186d      	adds	r5, r5, r1
20000aa4:	601d      	str	r5, [r3, #0]
20000aa6:	6921      	ldr	r1, [r4, #16]
20000aa8:	4675      	mov	r5, lr
20000aaa:	4369      	muls	r1, r5
20000aac:	1309      	asrs	r1, r1, #12
20000aae:	4371      	muls	r1, r6
20000ab0:	1852      	adds	r2, r2, r1
20000ab2:	6961      	ldr	r1, [r4, #20]
20000ab4:	1852      	adds	r2, r2, r1
20000ab6:	605a      	str	r2, [r3, #4]
20000ab8:	087f      	lsrs	r7, r7, #1
20000aba:	d30e      	bcc.n	20000ada <RenderGraph8Persp+0xaa>
20000abc:	69dc      	ldr	r4, [r3, #28]
20000abe:	7826      	ldrb	r6, [r4, #0]
20000ac0:	69dc      	ldr	r4, [r3, #28]
20000ac2:	7825      	ldrb	r5, [r4, #0]
20000ac4:	022d      	lsls	r5, r5, #8
20000ac6:	432e      	orrs	r6, r5
20000ac8:	69dc      	ldr	r4, [r3, #28]
20000aca:	7825      	ldrb	r5, [r4, #0]
20000acc:	042d      	lsls	r5, r5, #16
20000ace:	432e      	orrs	r6, r5
20000ad0:	69dc      	ldr	r4, [r3, #28]
20000ad2:	7825      	ldrb	r5, [r4, #0]
20000ad4:	062d      	lsls	r5, r5, #24
20000ad6:	432e      	orrs	r6, r5
20000ad8:	c040      	stmia	r0!, {r6}
20000ada:	423f      	tst	r7, r7
20000adc:	d01e      	beq.n	20000b1c <RenderGraph8Persp+0xec>
20000ade:	69dc      	ldr	r4, [r3, #28]
20000ae0:	7821      	ldrb	r1, [r4, #0]
20000ae2:	69dc      	ldr	r4, [r3, #28]
20000ae4:	7824      	ldrb	r4, [r4, #0]
20000ae6:	0224      	lsls	r4, r4, #8
20000ae8:	4321      	orrs	r1, r4
20000aea:	69dc      	ldr	r4, [r3, #28]
20000aec:	7824      	ldrb	r4, [r4, #0]
20000aee:	0424      	lsls	r4, r4, #16
20000af0:	4321      	orrs	r1, r4
20000af2:	69dc      	ldr	r4, [r3, #28]
20000af4:	7824      	ldrb	r4, [r4, #0]
20000af6:	0624      	lsls	r4, r4, #24
20000af8:	4321      	orrs	r1, r4
20000afa:	69dc      	ldr	r4, [r3, #28]
20000afc:	7822      	ldrb	r2, [r4, #0]
20000afe:	69dc      	ldr	r4, [r3, #28]
20000b00:	7824      	ldrb	r4, [r4, #0]
20000b02:	0224      	lsls	r4, r4, #8
20000b04:	4322      	orrs	r2, r4
20000b06:	69dc      	ldr	r4, [r3, #28]
20000b08:	7824      	ldrb	r4, [r4, #0]
20000b0a:	0424      	lsls	r4, r4, #16
20000b0c:	4322      	orrs	r2, r4
20000b0e:	69dc      	ldr	r4, [r3, #28]
20000b10:	7824      	ldrb	r4, [r4, #0]
20000b12:	0624      	lsls	r4, r4, #24
20000b14:	4322      	orrs	r2, r4
20000b16:	c006      	stmia	r0!, {r1, r2}
20000b18:	3f01      	subs	r7, #1
20000b1a:	d1e0      	bne.n	20000ade <RenderGraph8Persp+0xae>
20000b1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
20000b1e:	46c0      	nop			; (mov r8, r8)

20000b20 <RenderGraph8Persp_pSioBase>:
20000b20:	d0000000 	.word	0xd0000000

20000b24 <RenderGraph8Persp_Interp>:
20000b24:	d00000c0 	.word	0xd00000c0

20000b28 <RenderGraph8Persp_Ctrl>:
20000b28:	0004000c 	.word	0x0004000c

20000b2c <RenderGText>:
20000b2c:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
20000b2e:	4644      	mov	r4, r8
20000b30:	b410      	push	{r4}
20000b32:	9c09      	ldr	r4, [sp, #36]	; 0x24
20000b34:	4e3a      	ldr	r6, [pc, #232]	; (20000c20 <RenderGText_pSioBase>)
20000b36:	6632      	str	r2, [r6, #96]	; 0x60
20000b38:	8a62      	ldrh	r2, [r4, #18]
20000b3a:	6672      	str	r2, [r6, #100]	; 0x64
20000b3c:	8925      	ldrh	r5, [r4, #8]
20000b3e:	2703      	movs	r7, #3
20000b40:	43bd      	bics	r5, r7
20000b42:	9509      	str	r5, [sp, #36]	; 0x24
20000b44:	43b9      	bics	r1, r7
20000b46:	43bb      	bics	r3, r7
20000b48:	9303      	str	r3, [sp, #12]
20000b4a:	6f75      	ldr	r5, [r6, #116]	; 0x74
20000b4c:	6f32      	ldr	r2, [r6, #112]	; 0x70
20000b4e:	022d      	lsls	r5, r5, #8
20000b50:	6963      	ldr	r3, [r4, #20]
20000b52:	442b      	add	r3, r5
20000b54:	4698      	mov	r8, r3
20000b56:	8865      	ldrh	r5, [r4, #2]
20000b58:	436a      	muls	r2, r5
20000b5a:	68e5      	ldr	r5, [r4, #12]
20000b5c:	442a      	add	r2, r5
20000b5e:	9202      	str	r2, [sp, #8]
20000b60:	69a3      	ldr	r3, [r4, #24]
20000b62:	9301      	str	r3, [sp, #4]
20000b64:	440b      	add	r3, r1
20000b66:	08ce      	lsrs	r6, r1, #3
20000b68:	4432      	add	r2, r6
20000b6a:	7ca4      	ldrb	r4, [r4, #18]
20000b6c:	0225      	lsls	r5, r4, #8
20000b6e:	4325      	orrs	r5, r4
20000b70:	042c      	lsls	r4, r5, #16
20000b72:	432c      	orrs	r4, r5
20000b74:	4d29      	ldr	r5, [pc, #164]	; (20000c1c <RenderGText_Addr>)
20000b76:	46ae      	mov	lr, r5
20000b78:	074e      	lsls	r6, r1, #29
20000b7a:	d515      	bpl.n	20000ba8 <RenderGText+0x7c>
20000b7c:	7815      	ldrb	r5, [r2, #0]
20000b7e:	3201      	adds	r2, #1
20000b80:	4445      	add	r5, r8
20000b82:	782d      	ldrb	r5, [r5, #0]
20000b84:	cb40      	ldmia	r3!, {r6}
20000b86:	4066      	eors	r6, r4
20000b88:	00ed      	lsls	r5, r5, #3
20000b8a:	4475      	add	r5, lr
20000b8c:	686f      	ldr	r7, [r5, #4]
20000b8e:	4037      	ands	r7, r6
20000b90:	4067      	eors	r7, r4
20000b92:	c080      	stmia	r0!, {r7}
20000b94:	3104      	adds	r1, #4
20000b96:	9f09      	ldr	r7, [sp, #36]	; 0x24
20000b98:	42b9      	cmp	r1, r7
20000b9a:	d302      	bcc.n	20000ba2 <RenderGText+0x76>
20000b9c:	2100      	movs	r1, #0
20000b9e:	9a02      	ldr	r2, [sp, #8]
20000ba0:	9b01      	ldr	r3, [sp, #4]
20000ba2:	9f03      	ldr	r7, [sp, #12]
20000ba4:	3f04      	subs	r7, #4
20000ba6:	9703      	str	r7, [sp, #12]
20000ba8:	9f09      	ldr	r7, [sp, #36]	; 0x24
20000baa:	1a7f      	subs	r7, r7, r1

20000bac <RenderGText_OutLoop>:
20000bac:	9e03      	ldr	r6, [sp, #12]
20000bae:	42b7      	cmp	r7, r6
20000bb0:	d900      	bls.n	20000bb4 <RenderGText_OutLoop+0x8>
20000bb2:	4637      	mov	r7, r6
20000bb4:	2f08      	cmp	r7, #8
20000bb6:	d214      	bcs.n	20000be2 <RenderGText_Last+0x26>
20000bb8:	2f04      	cmp	r7, #4
20000bba:	d30f      	bcc.n	20000bdc <RenderGText_Last+0x20>

20000bbc <RenderGText_Last>:
20000bbc:	7815      	ldrb	r5, [r2, #0]
20000bbe:	3201      	adds	r2, #1
20000bc0:	4445      	add	r5, r8
20000bc2:	782d      	ldrb	r5, [r5, #0]
20000bc4:	cb40      	ldmia	r3!, {r6}
20000bc6:	4066      	eors	r6, r4
20000bc8:	00ed      	lsls	r5, r5, #3
20000bca:	4475      	add	r5, lr
20000bcc:	6829      	ldr	r1, [r5, #0]
20000bce:	4031      	ands	r1, r6
20000bd0:	4061      	eors	r1, r4
20000bd2:	c002      	stmia	r0!, {r1}
20000bd4:	9a02      	ldr	r2, [sp, #8]
20000bd6:	9b01      	ldr	r3, [sp, #4]
20000bd8:	2f04      	cmp	r7, #4
20000bda:	d8e7      	bhi.n	20000bac <RenderGText_OutLoop>
20000bdc:	bc10      	pop	{r4}
20000bde:	46a0      	mov	r8, r4
20000be0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
20000be2:	08b9      	lsrs	r1, r7, #2
20000be4:	008d      	lsls	r5, r1, #2
20000be6:	1b76      	subs	r6, r6, r5
20000be8:	9603      	str	r6, [sp, #12]
20000bea:	3901      	subs	r1, #1

20000bec <RenderGText_InLoop>:
20000bec:	7817      	ldrb	r7, [r2, #0]
20000bee:	3201      	adds	r2, #1
20000bf0:	4447      	add	r7, r8
20000bf2:	783f      	ldrb	r7, [r7, #0]
20000bf4:	cb40      	ldmia	r3!, {r6}
20000bf6:	4066      	eors	r6, r4
20000bf8:	00ff      	lsls	r7, r7, #3
20000bfa:	4477      	add	r7, lr
20000bfc:	683d      	ldr	r5, [r7, #0]
20000bfe:	4035      	ands	r5, r6
20000c00:	4065      	eors	r5, r4
20000c02:	cb40      	ldmia	r3!, {r6}
20000c04:	4066      	eors	r6, r4
20000c06:	687f      	ldr	r7, [r7, #4]
20000c08:	4037      	ands	r7, r6
20000c0a:	4067      	eors	r7, r4
20000c0c:	c0a0      	stmia	r0!, {r5, r7}
20000c0e:	3902      	subs	r1, #2
20000c10:	d8ec      	bhi.n	20000bec <RenderGText_InLoop>
20000c12:	9f09      	ldr	r7, [sp, #36]	; 0x24
20000c14:	d0d2      	beq.n	20000bbc <RenderGText_Last>
20000c16:	9a02      	ldr	r2, [sp, #8]
20000c18:	9b01      	ldr	r3, [sp, #4]
20000c1a:	e7c7      	b.n	20000bac <RenderGText_OutLoop>

20000c1c <RenderGText_Addr>:
20000c1c:	2000642c 	.word	0x2000642c

20000c20 <RenderGText_pSioBase>:
20000c20:	d0000000 	.word	0xd0000000

20000c24 <RenderLevel>:
20000c24:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
20000c26:	9c08      	ldr	r4, [sp, #32]
20000c28:	8925      	ldrh	r5, [r4, #8]
20000c2a:	2703      	movs	r7, #3
20000c2c:	43bd      	bics	r5, r7
20000c2e:	9508      	str	r5, [sp, #32]
20000c30:	43b9      	bics	r1, r7
20000c32:	43bb      	bics	r3, r7
20000c34:	9302      	str	r3, [sp, #8]
20000c36:	8965      	ldrh	r5, [r4, #10]
20000c38:	3d01      	subs	r5, #1
20000c3a:	1aad      	subs	r5, r5, r2
20000c3c:	7e23      	ldrb	r3, [r4, #24]
20000c3e:	9300      	str	r3, [sp, #0]
20000c40:	68e2      	ldr	r2, [r4, #12]
20000c42:	9201      	str	r2, [sp, #4]
20000c44:	440a      	add	r2, r1
20000c46:	7d66      	ldrb	r6, [r4, #21]
20000c48:	0233      	lsls	r3, r6, #8
20000c4a:	4333      	orrs	r3, r6
20000c4c:	041e      	lsls	r6, r3, #16
20000c4e:	431e      	orrs	r6, r3
20000c50:	7d24      	ldrb	r4, [r4, #20]
20000c52:	0223      	lsls	r3, r4, #8
20000c54:	4323      	orrs	r3, r4
20000c56:	041c      	lsls	r4, r3, #16
20000c58:	431c      	orrs	r4, r3
20000c5a:	4066      	eors	r6, r4
20000c5c:	4b4c      	ldr	r3, [pc, #304]	; (20000d90 <RenderLevel_Addr>)
20000c5e:	469e      	mov	lr, r3
20000c60:	9f08      	ldr	r7, [sp, #32]
20000c62:	1a7f      	subs	r7, r7, r1
20000c64:	2f04      	cmp	r7, #4
20000c66:	d801      	bhi.n	20000c6c <RenderLevel_OutLoop>
20000c68:	9f08      	ldr	r7, [sp, #32]
20000c6a:	e007      	b.n	20000c7c <RenderLevel_Last>

20000c6c <RenderLevel_OutLoop>:
20000c6c:	9b02      	ldr	r3, [sp, #8]
20000c6e:	429f      	cmp	r7, r3
20000c70:	d900      	bls.n	20000c74 <RenderLevel_OutLoop+0x8>
20000c72:	461f      	mov	r7, r3
20000c74:	2f08      	cmp	r7, #8
20000c76:	d231      	bcs.n	20000cdc <RenderLevel_Last2+0x30>
20000c78:	2f04      	cmp	r7, #4
20000c7a:	d32e      	bcc.n	20000cda <RenderLevel_Last2+0x2e>

20000c7c <RenderLevel_Last>:
20000c7c:	9b00      	ldr	r3, [sp, #0]
20000c7e:	429d      	cmp	r5, r3
20000c80:	d314      	bcc.n	20000cac <RenderLevel_Last2>
20000c82:	2100      	movs	r1, #0
20000c84:	7813      	ldrb	r3, [r2, #0]
20000c86:	42ab      	cmp	r3, r5
20000c88:	4149      	adcs	r1, r1
20000c8a:	7853      	ldrb	r3, [r2, #1]
20000c8c:	42ab      	cmp	r3, r5
20000c8e:	4149      	adcs	r1, r1
20000c90:	7893      	ldrb	r3, [r2, #2]
20000c92:	42ab      	cmp	r3, r5
20000c94:	4149      	adcs	r1, r1
20000c96:	78d3      	ldrb	r3, [r2, #3]
20000c98:	42ab      	cmp	r3, r5
20000c9a:	4149      	adcs	r1, r1
20000c9c:	3204      	adds	r2, #4
20000c9e:	00c9      	lsls	r1, r1, #3
20000ca0:	4471      	add	r1, lr
20000ca2:	6849      	ldr	r1, [r1, #4]
20000ca4:	4031      	ands	r1, r6
20000ca6:	4061      	eors	r1, r4
20000ca8:	c002      	stmia	r0!, {r1}
20000caa:	e013      	b.n	20000cd4 <RenderLevel_Last2+0x28>

20000cac <RenderLevel_Last2>:
20000cac:	2100      	movs	r1, #0
20000cae:	7813      	ldrb	r3, [r2, #0]
20000cb0:	429d      	cmp	r5, r3
20000cb2:	4149      	adcs	r1, r1
20000cb4:	7853      	ldrb	r3, [r2, #1]
20000cb6:	429d      	cmp	r5, r3
20000cb8:	4149      	adcs	r1, r1
20000cba:	7893      	ldrb	r3, [r2, #2]
20000cbc:	429d      	cmp	r5, r3
20000cbe:	4149      	adcs	r1, r1
20000cc0:	78d3      	ldrb	r3, [r2, #3]
20000cc2:	429d      	cmp	r5, r3
20000cc4:	4149      	adcs	r1, r1
20000cc6:	3204      	adds	r2, #4
20000cc8:	00c9      	lsls	r1, r1, #3
20000cca:	4471      	add	r1, lr
20000ccc:	6849      	ldr	r1, [r1, #4]
20000cce:	4031      	ands	r1, r6
20000cd0:	4061      	eors	r1, r4
20000cd2:	c002      	stmia	r0!, {r1}
20000cd4:	9a01      	ldr	r2, [sp, #4]
20000cd6:	2f04      	cmp	r7, #4
20000cd8:	d8c8      	bhi.n	20000c6c <RenderLevel_OutLoop>
20000cda:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
20000cdc:	08b9      	lsrs	r1, r7, #2
20000cde:	008f      	lsls	r7, r1, #2
20000ce0:	1bdb      	subs	r3, r3, r7
20000ce2:	9302      	str	r3, [sp, #8]
20000ce4:	3901      	subs	r1, #1
20000ce6:	9b00      	ldr	r3, [sp, #0]
20000ce8:	429d      	cmp	r5, r3
20000cea:	d328      	bcc.n	20000d3e <RenderLevel_InLoopBot>

20000cec <RenderLevel_InLoopTop>:
20000cec:	2700      	movs	r7, #0
20000cee:	7813      	ldrb	r3, [r2, #0]
20000cf0:	42ab      	cmp	r3, r5
20000cf2:	417f      	adcs	r7, r7
20000cf4:	7853      	ldrb	r3, [r2, #1]
20000cf6:	42ab      	cmp	r3, r5
20000cf8:	417f      	adcs	r7, r7
20000cfa:	7893      	ldrb	r3, [r2, #2]
20000cfc:	42ab      	cmp	r3, r5
20000cfe:	417f      	adcs	r7, r7
20000d00:	78d3      	ldrb	r3, [r2, #3]
20000d02:	42ab      	cmp	r3, r5
20000d04:	417f      	adcs	r7, r7
20000d06:	7913      	ldrb	r3, [r2, #4]
20000d08:	42ab      	cmp	r3, r5
20000d0a:	417f      	adcs	r7, r7
20000d0c:	7953      	ldrb	r3, [r2, #5]
20000d0e:	42ab      	cmp	r3, r5
20000d10:	417f      	adcs	r7, r7
20000d12:	7993      	ldrb	r3, [r2, #6]
20000d14:	42ab      	cmp	r3, r5
20000d16:	417f      	adcs	r7, r7
20000d18:	79d3      	ldrb	r3, [r2, #7]
20000d1a:	42ab      	cmp	r3, r5
20000d1c:	417f      	adcs	r7, r7
20000d1e:	3208      	adds	r2, #8
20000d20:	00ff      	lsls	r7, r7, #3
20000d22:	4477      	add	r7, lr
20000d24:	683b      	ldr	r3, [r7, #0]
20000d26:	4033      	ands	r3, r6
20000d28:	4063      	eors	r3, r4
20000d2a:	687f      	ldr	r7, [r7, #4]
20000d2c:	4037      	ands	r7, r6
20000d2e:	4067      	eors	r7, r4
20000d30:	c088      	stmia	r0!, {r3, r7}
20000d32:	3902      	subs	r1, #2
20000d34:	d8da      	bhi.n	20000cec <RenderLevel_InLoopTop>
20000d36:	9f08      	ldr	r7, [sp, #32]
20000d38:	d0a0      	beq.n	20000c7c <RenderLevel_Last>
20000d3a:	9a01      	ldr	r2, [sp, #4]
20000d3c:	e796      	b.n	20000c6c <RenderLevel_OutLoop>

20000d3e <RenderLevel_InLoopBot>:
20000d3e:	2700      	movs	r7, #0
20000d40:	7813      	ldrb	r3, [r2, #0]
20000d42:	429d      	cmp	r5, r3
20000d44:	417f      	adcs	r7, r7
20000d46:	7853      	ldrb	r3, [r2, #1]
20000d48:	429d      	cmp	r5, r3
20000d4a:	417f      	adcs	r7, r7
20000d4c:	7893      	ldrb	r3, [r2, #2]
20000d4e:	429d      	cmp	r5, r3
20000d50:	417f      	adcs	r7, r7
20000d52:	78d3      	ldrb	r3, [r2, #3]
20000d54:	429d      	cmp	r5, r3
20000d56:	417f      	adcs	r7, r7
20000d58:	7913      	ldrb	r3, [r2, #4]
20000d5a:	429d      	cmp	r5, r3
20000d5c:	417f      	adcs	r7, r7
20000d5e:	7953      	ldrb	r3, [r2, #5]
20000d60:	429d      	cmp	r5, r3
20000d62:	417f      	adcs	r7, r7
20000d64:	7993      	ldrb	r3, [r2, #6]
20000d66:	429d      	cmp	r5, r3
20000d68:	417f      	adcs	r7, r7
20000d6a:	79d3      	ldrb	r3, [r2, #7]
20000d6c:	429d      	cmp	r5, r3
20000d6e:	417f      	adcs	r7, r7
20000d70:	3208      	adds	r2, #8
20000d72:	00ff      	lsls	r7, r7, #3
20000d74:	4477      	add	r7, lr
20000d76:	683b      	ldr	r3, [r7, #0]
20000d78:	4033      	ands	r3, r6
20000d7a:	4063      	eors	r3, r4
20000d7c:	687f      	ldr	r7, [r7, #4]
20000d7e:	4037      	ands	r7, r6
20000d80:	4067      	eors	r7, r4
20000d82:	c088      	stmia	r0!, {r3, r7}
20000d84:	3902      	subs	r1, #2
20000d86:	d8da      	bhi.n	20000d3e <RenderLevel_InLoopBot>
20000d88:	9f08      	ldr	r7, [sp, #32]
20000d8a:	d0d5      	beq.n	20000d38 <RenderLevel_InLoopTop+0x4c>
20000d8c:	9a01      	ldr	r2, [sp, #4]
20000d8e:	e76d      	b.n	20000c6c <RenderLevel_OutLoop>

20000d90 <RenderLevel_Addr>:
20000d90:	2000642c 	.word	0x2000642c

20000d94 <RenderLevelGrad>:
20000d94:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
20000d96:	9c08      	ldr	r4, [sp, #32]
20000d98:	8925      	ldrh	r5, [r4, #8]
20000d9a:	2703      	movs	r7, #3
20000d9c:	43bd      	bics	r5, r7
20000d9e:	9508      	str	r5, [sp, #32]
20000da0:	43b9      	bics	r1, r7
20000da2:	43bb      	bics	r3, r7
20000da4:	9302      	str	r3, [sp, #8]
20000da6:	8965      	ldrh	r5, [r4, #10]
20000da8:	3d01      	subs	r5, #1
20000daa:	1aad      	subs	r5, r5, r2
20000dac:	68e2      	ldr	r2, [r4, #12]
20000dae:	9201      	str	r2, [sp, #4]
20000db0:	440a      	add	r2, r1
20000db2:	6966      	ldr	r6, [r4, #20]
20000db4:	5d76      	ldrb	r6, [r6, r5]
20000db6:	0233      	lsls	r3, r6, #8
20000db8:	4333      	orrs	r3, r6
20000dba:	041e      	lsls	r6, r3, #16
20000dbc:	431e      	orrs	r6, r3
20000dbe:	69a4      	ldr	r4, [r4, #24]
20000dc0:	5d64      	ldrb	r4, [r4, r5]
20000dc2:	0223      	lsls	r3, r4, #8
20000dc4:	4323      	orrs	r3, r4
20000dc6:	041c      	lsls	r4, r3, #16
20000dc8:	431c      	orrs	r4, r3
20000dca:	4066      	eors	r6, r4
20000dcc:	4b2a      	ldr	r3, [pc, #168]	; (20000e78 <RenderLevelGrad_Addr>)
20000dce:	469e      	mov	lr, r3
20000dd0:	9f08      	ldr	r7, [sp, #32]
20000dd2:	1a7f      	subs	r7, r7, r1
20000dd4:	2f04      	cmp	r7, #4
20000dd6:	d801      	bhi.n	20000ddc <RenderLevelGrad_OutLoop>
20000dd8:	9f08      	ldr	r7, [sp, #32]
20000dda:	e007      	b.n	20000dec <RenderLevelGrad_Last>

20000ddc <RenderLevelGrad_OutLoop>:
20000ddc:	9b02      	ldr	r3, [sp, #8]
20000dde:	429f      	cmp	r7, r3
20000de0:	d900      	bls.n	20000de4 <RenderLevelGrad_OutLoop+0x8>
20000de2:	461f      	mov	r7, r3
20000de4:	2f08      	cmp	r7, #8
20000de6:	d219      	bcs.n	20000e1c <RenderLevelGrad_Last+0x30>
20000de8:	2f04      	cmp	r7, #4
20000dea:	d316      	bcc.n	20000e1a <RenderLevelGrad_Last+0x2e>

20000dec <RenderLevelGrad_Last>:
20000dec:	2100      	movs	r1, #0
20000dee:	7813      	ldrb	r3, [r2, #0]
20000df0:	42ab      	cmp	r3, r5
20000df2:	4149      	adcs	r1, r1
20000df4:	7853      	ldrb	r3, [r2, #1]
20000df6:	42ab      	cmp	r3, r5
20000df8:	4149      	adcs	r1, r1
20000dfa:	7893      	ldrb	r3, [r2, #2]
20000dfc:	42ab      	cmp	r3, r5
20000dfe:	4149      	adcs	r1, r1
20000e00:	78d3      	ldrb	r3, [r2, #3]
20000e02:	42ab      	cmp	r3, r5
20000e04:	4149      	adcs	r1, r1
20000e06:	3204      	adds	r2, #4
20000e08:	00c9      	lsls	r1, r1, #3
20000e0a:	4471      	add	r1, lr
20000e0c:	6849      	ldr	r1, [r1, #4]
20000e0e:	4031      	ands	r1, r6
20000e10:	4061      	eors	r1, r4
20000e12:	c002      	stmia	r0!, {r1}
20000e14:	9a01      	ldr	r2, [sp, #4]
20000e16:	2f04      	cmp	r7, #4
20000e18:	d8e0      	bhi.n	20000ddc <RenderLevelGrad_OutLoop>
20000e1a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
20000e1c:	08b9      	lsrs	r1, r7, #2
20000e1e:	008f      	lsls	r7, r1, #2
20000e20:	1bdb      	subs	r3, r3, r7
20000e22:	9302      	str	r3, [sp, #8]
20000e24:	3901      	subs	r1, #1

20000e26 <RenderLevelGrad_InLoopTop>:
20000e26:	2700      	movs	r7, #0
20000e28:	7813      	ldrb	r3, [r2, #0]
20000e2a:	42ab      	cmp	r3, r5
20000e2c:	417f      	adcs	r7, r7
20000e2e:	7853      	ldrb	r3, [r2, #1]
20000e30:	42ab      	cmp	r3, r5
20000e32:	417f      	adcs	r7, r7
20000e34:	7893      	ldrb	r3, [r2, #2]
20000e36:	42ab      	cmp	r3, r5
20000e38:	417f      	adcs	r7, r7
20000e3a:	78d3      	ldrb	r3, [r2, #3]
20000e3c:	42ab      	cmp	r3, r5
20000e3e:	417f      	adcs	r7, r7
20000e40:	7913      	ldrb	r3, [r2, #4]
20000e42:	42ab      	cmp	r3, r5
20000e44:	417f      	adcs	r7, r7
20000e46:	7953      	ldrb	r3, [r2, #5]
20000e48:	42ab      	cmp	r3, r5
20000e4a:	417f      	adcs	r7, r7
20000e4c:	7993      	ldrb	r3, [r2, #6]
20000e4e:	42ab      	cmp	r3, r5
20000e50:	417f      	adcs	r7, r7
20000e52:	79d3      	ldrb	r3, [r2, #7]
20000e54:	42ab      	cmp	r3, r5
20000e56:	417f      	adcs	r7, r7
20000e58:	3208      	adds	r2, #8
20000e5a:	00ff      	lsls	r7, r7, #3
20000e5c:	4477      	add	r7, lr
20000e5e:	683b      	ldr	r3, [r7, #0]
20000e60:	4033      	ands	r3, r6
20000e62:	4063      	eors	r3, r4
20000e64:	687f      	ldr	r7, [r7, #4]
20000e66:	4037      	ands	r7, r6
20000e68:	4067      	eors	r7, r4
20000e6a:	c088      	stmia	r0!, {r3, r7}
20000e6c:	3902      	subs	r1, #2
20000e6e:	d8da      	bhi.n	20000e26 <RenderLevelGrad_InLoopTop>
20000e70:	9f08      	ldr	r7, [sp, #32]
20000e72:	d0bb      	beq.n	20000dec <RenderLevelGrad_Last>
20000e74:	9a01      	ldr	r2, [sp, #4]
20000e76:	e7b1      	b.n	20000ddc <RenderLevelGrad_OutLoop>

20000e78 <RenderLevelGrad_Addr>:
20000e78:	2000642c 	.word	0x2000642c

20000e7c <RenderMText>:
20000e7c:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
20000e7e:	9c08      	ldr	r4, [sp, #32]
20000e80:	4e34      	ldr	r6, [pc, #208]	; (20000f54 <RenderMText_pSioBase>)
20000e82:	6632      	str	r2, [r6, #96]	; 0x60
20000e84:	8a62      	ldrh	r2, [r4, #18]
20000e86:	6672      	str	r2, [r6, #100]	; 0x64
20000e88:	8925      	ldrh	r5, [r4, #8]
20000e8a:	2703      	movs	r7, #3
20000e8c:	43bd      	bics	r5, r7
20000e8e:	9508      	str	r5, [sp, #32]
20000e90:	43b9      	bics	r1, r7
20000e92:	43bb      	bics	r3, r7
20000e94:	9302      	str	r3, [sp, #8]
20000e96:	6f75      	ldr	r5, [r6, #116]	; 0x74
20000e98:	6f32      	ldr	r2, [r6, #112]	; 0x70
20000e9a:	022d      	lsls	r5, r5, #8
20000e9c:	6963      	ldr	r3, [r4, #20]
20000e9e:	442b      	add	r3, r5
20000ea0:	8865      	ldrh	r5, [r4, #2]
20000ea2:	436a      	muls	r2, r5
20000ea4:	68e5      	ldr	r5, [r4, #12]
20000ea6:	442a      	add	r2, r5
20000ea8:	9201      	str	r2, [sp, #4]
20000eaa:	08ce      	lsrs	r6, r1, #3
20000eac:	4432      	add	r2, r6
20000eae:	7e66      	ldrb	r6, [r4, #25]
20000eb0:	0237      	lsls	r7, r6, #8
20000eb2:	4337      	orrs	r7, r6
20000eb4:	043e      	lsls	r6, r7, #16
20000eb6:	433e      	orrs	r6, r7
20000eb8:	7e24      	ldrb	r4, [r4, #24]
20000eba:	0225      	lsls	r5, r4, #8
20000ebc:	4325      	orrs	r5, r4
20000ebe:	042c      	lsls	r4, r5, #16
20000ec0:	432c      	orrs	r4, r5
20000ec2:	4066      	eors	r6, r4
20000ec4:	4d22      	ldr	r5, [pc, #136]	; (20000f50 <RenderMText_Addr>)
20000ec6:	46ae      	mov	lr, r5
20000ec8:	074d      	lsls	r5, r1, #29
20000eca:	d511      	bpl.n	20000ef0 <RenderMText+0x74>
20000ecc:	7815      	ldrb	r5, [r2, #0]
20000ece:	5d5d      	ldrb	r5, [r3, r5]
20000ed0:	3201      	adds	r2, #1
20000ed2:	00ed      	lsls	r5, r5, #3
20000ed4:	4475      	add	r5, lr
20000ed6:	686f      	ldr	r7, [r5, #4]
20000ed8:	4037      	ands	r7, r6
20000eda:	4067      	eors	r7, r4
20000edc:	c080      	stmia	r0!, {r7}
20000ede:	3104      	adds	r1, #4
20000ee0:	9f08      	ldr	r7, [sp, #32]
20000ee2:	42b9      	cmp	r1, r7
20000ee4:	d301      	bcc.n	20000eea <RenderMText+0x6e>
20000ee6:	2100      	movs	r1, #0
20000ee8:	9a01      	ldr	r2, [sp, #4]
20000eea:	9f02      	ldr	r7, [sp, #8]
20000eec:	3f04      	subs	r7, #4
20000eee:	9702      	str	r7, [sp, #8]
20000ef0:	9f08      	ldr	r7, [sp, #32]
20000ef2:	1a7f      	subs	r7, r7, r1

20000ef4 <RenderMText_OutLoop>:
20000ef4:	9d02      	ldr	r5, [sp, #8]
20000ef6:	42af      	cmp	r7, r5
20000ef8:	d900      	bls.n	20000efc <RenderMText_OutLoop+0x8>
20000efa:	462f      	mov	r7, r5
20000efc:	2f08      	cmp	r7, #8
20000efe:	d20e      	bcs.n	20000f1e <RenderMText_Last+0x1a>
20000f00:	2f04      	cmp	r7, #4
20000f02:	d30b      	bcc.n	20000f1c <RenderMText_Last+0x18>

20000f04 <RenderMText_Last>:
20000f04:	7815      	ldrb	r5, [r2, #0]
20000f06:	5d5d      	ldrb	r5, [r3, r5]
20000f08:	3201      	adds	r2, #1
20000f0a:	00ed      	lsls	r5, r5, #3
20000f0c:	4475      	add	r5, lr
20000f0e:	6829      	ldr	r1, [r5, #0]
20000f10:	4031      	ands	r1, r6
20000f12:	4061      	eors	r1, r4
20000f14:	c002      	stmia	r0!, {r1}
20000f16:	9a01      	ldr	r2, [sp, #4]
20000f18:	2f04      	cmp	r7, #4
20000f1a:	d8eb      	bhi.n	20000ef4 <RenderMText_OutLoop>
20000f1c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
20000f1e:	08b9      	lsrs	r1, r7, #2
20000f20:	008f      	lsls	r7, r1, #2
20000f22:	1bed      	subs	r5, r5, r7
20000f24:	9502      	str	r5, [sp, #8]
20000f26:	3901      	subs	r1, #1

20000f28 <RenderMText_InLoop>:
20000f28:	7815      	ldrb	r5, [r2, #0]
20000f2a:	5d5d      	ldrb	r5, [r3, r5]
20000f2c:	3201      	adds	r2, #1
20000f2e:	00ed      	lsls	r5, r5, #3
20000f30:	4475      	add	r5, lr
20000f32:	682f      	ldr	r7, [r5, #0]
20000f34:	4037      	ands	r7, r6
20000f36:	4067      	eors	r7, r4
20000f38:	c080      	stmia	r0!, {r7}
20000f3a:	686f      	ldr	r7, [r5, #4]
20000f3c:	4037      	ands	r7, r6
20000f3e:	4067      	eors	r7, r4
20000f40:	c080      	stmia	r0!, {r7}
20000f42:	3902      	subs	r1, #2
20000f44:	d8f0      	bhi.n	20000f28 <RenderMText_InLoop>
20000f46:	9f08      	ldr	r7, [sp, #32]
20000f48:	d0dc      	beq.n	20000f04 <RenderMText_Last>
20000f4a:	9a01      	ldr	r2, [sp, #4]
20000f4c:	e7d2      	b.n	20000ef4 <RenderMText_OutLoop>
20000f4e:	46c0      	nop			; (mov r8, r8)

20000f50 <RenderMText_Addr>:
20000f50:	2000642c 	.word	0x2000642c

20000f54 <RenderMText_pSioBase>:
20000f54:	d0000000 	.word	0xd0000000

20000f58 <RenderOscil>:
20000f58:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
20000f5a:	9c08      	ldr	r4, [sp, #32]
20000f5c:	8925      	ldrh	r5, [r4, #8]
20000f5e:	2703      	movs	r7, #3
20000f60:	43bd      	bics	r5, r7
20000f62:	9508      	str	r5, [sp, #32]
20000f64:	43b9      	bics	r1, r7
20000f66:	43bb      	bics	r3, r7
20000f68:	9302      	str	r3, [sp, #8]
20000f6a:	8965      	ldrh	r5, [r4, #10]
20000f6c:	3d01      	subs	r5, #1
20000f6e:	1aad      	subs	r5, r5, r2
20000f70:	7e23      	ldrb	r3, [r4, #24]
20000f72:	469e      	mov	lr, r3
20000f74:	68e2      	ldr	r2, [r4, #12]
20000f76:	9201      	str	r2, [sp, #4]
20000f78:	440a      	add	r2, r1
20000f7a:	7d66      	ldrb	r6, [r4, #21]
20000f7c:	0233      	lsls	r3, r6, #8
20000f7e:	4333      	orrs	r3, r6
20000f80:	041e      	lsls	r6, r3, #16
20000f82:	431e      	orrs	r6, r3
20000f84:	7d24      	ldrb	r4, [r4, #20]
20000f86:	0223      	lsls	r3, r4, #8
20000f88:	4323      	orrs	r3, r4
20000f8a:	041c      	lsls	r4, r3, #16
20000f8c:	431c      	orrs	r4, r3
20000f8e:	4066      	eors	r6, r4
20000f90:	9f08      	ldr	r7, [sp, #32]
20000f92:	1a7f      	subs	r7, r7, r1
20000f94:	2f04      	cmp	r7, #4
20000f96:	d801      	bhi.n	20000f9c <RenderOscil_OutLoop>
20000f98:	9f08      	ldr	r7, [sp, #32]
20000f9a:	e007      	b.n	20000fac <RenderOscil_Last>

20000f9c <RenderOscil_OutLoop>:
20000f9c:	9b02      	ldr	r3, [sp, #8]
20000f9e:	429f      	cmp	r7, r3
20000fa0:	d900      	bls.n	20000fa4 <RenderOscil_OutLoop+0x8>
20000fa2:	461f      	mov	r7, r3
20000fa4:	2f08      	cmp	r7, #8
20000fa6:	d21e      	bcs.n	20000fe6 <RenderOscil_Last+0x3a>
20000fa8:	2f04      	cmp	r7, #4
20000faa:	d31b      	bcc.n	20000fe4 <RenderOscil_Last+0x38>

20000fac <RenderOscil_Last>:
20000fac:	2100      	movs	r1, #0
20000fae:	7813      	ldrb	r3, [r2, #0]
20000fb0:	1b5b      	subs	r3, r3, r5
20000fb2:	459e      	cmp	lr, r3
20000fb4:	4149      	adcs	r1, r1
20000fb6:	7853      	ldrb	r3, [r2, #1]
20000fb8:	1b5b      	subs	r3, r3, r5
20000fba:	459e      	cmp	lr, r3
20000fbc:	4149      	adcs	r1, r1
20000fbe:	7893      	ldrb	r3, [r2, #2]
20000fc0:	1b5b      	subs	r3, r3, r5
20000fc2:	459e      	cmp	lr, r3
20000fc4:	4149      	adcs	r1, r1
20000fc6:	78d3      	ldrb	r3, [r2, #3]
20000fc8:	1b5b      	subs	r3, r3, r5
20000fca:	459e      	cmp	lr, r3
20000fcc:	4149      	adcs	r1, r1
20000fce:	3204      	adds	r2, #4
20000fd0:	00c9      	lsls	r1, r1, #3
20000fd2:	4b20      	ldr	r3, [pc, #128]	; (20001054 <RenderOscil_Addr>)
20000fd4:	4419      	add	r1, r3
20000fd6:	6849      	ldr	r1, [r1, #4]
20000fd8:	4031      	ands	r1, r6
20000fda:	4061      	eors	r1, r4
20000fdc:	c002      	stmia	r0!, {r1}
20000fde:	9a01      	ldr	r2, [sp, #4]
20000fe0:	2f04      	cmp	r7, #4
20000fe2:	d8db      	bhi.n	20000f9c <RenderOscil_OutLoop>
20000fe4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
20000fe6:	08b9      	lsrs	r1, r7, #2
20000fe8:	008f      	lsls	r7, r1, #2
20000fea:	1bdb      	subs	r3, r3, r7
20000fec:	9302      	str	r3, [sp, #8]
20000fee:	3901      	subs	r1, #1

20000ff0 <RenderOscil_InLoop>:
20000ff0:	2700      	movs	r7, #0
20000ff2:	7813      	ldrb	r3, [r2, #0]
20000ff4:	1b5b      	subs	r3, r3, r5
20000ff6:	459e      	cmp	lr, r3
20000ff8:	417f      	adcs	r7, r7
20000ffa:	7853      	ldrb	r3, [r2, #1]
20000ffc:	1b5b      	subs	r3, r3, r5
20000ffe:	459e      	cmp	lr, r3
20001000:	417f      	adcs	r7, r7
20001002:	7893      	ldrb	r3, [r2, #2]
20001004:	1b5b      	subs	r3, r3, r5
20001006:	459e      	cmp	lr, r3
20001008:	417f      	adcs	r7, r7
2000100a:	78d3      	ldrb	r3, [r2, #3]
2000100c:	1b5b      	subs	r3, r3, r5
2000100e:	459e      	cmp	lr, r3
20001010:	417f      	adcs	r7, r7
20001012:	7913      	ldrb	r3, [r2, #4]
20001014:	1b5b      	subs	r3, r3, r5
20001016:	459e      	cmp	lr, r3
20001018:	417f      	adcs	r7, r7
2000101a:	7953      	ldrb	r3, [r2, #5]
2000101c:	1b5b      	subs	r3, r3, r5
2000101e:	459e      	cmp	lr, r3
20001020:	417f      	adcs	r7, r7
20001022:	7993      	ldrb	r3, [r2, #6]
20001024:	1b5b      	subs	r3, r3, r5
20001026:	459e      	cmp	lr, r3
20001028:	417f      	adcs	r7, r7
2000102a:	79d3      	ldrb	r3, [r2, #7]
2000102c:	1b5b      	subs	r3, r3, r5
2000102e:	459e      	cmp	lr, r3
20001030:	417f      	adcs	r7, r7
20001032:	3208      	adds	r2, #8
20001034:	00ff      	lsls	r7, r7, #3
20001036:	4b07      	ldr	r3, [pc, #28]	; (20001054 <RenderOscil_Addr>)
20001038:	441f      	add	r7, r3
2000103a:	683b      	ldr	r3, [r7, #0]
2000103c:	4033      	ands	r3, r6
2000103e:	4063      	eors	r3, r4
20001040:	687f      	ldr	r7, [r7, #4]
20001042:	4037      	ands	r7, r6
20001044:	4067      	eors	r7, r4
20001046:	c088      	stmia	r0!, {r3, r7}
20001048:	3902      	subs	r1, #2
2000104a:	d8d1      	bhi.n	20000ff0 <RenderOscil_InLoop>
2000104c:	9f08      	ldr	r7, [sp, #32]
2000104e:	d0ad      	beq.n	20000fac <RenderOscil_Last>
20001050:	9a01      	ldr	r2, [sp, #4]
20001052:	e7a3      	b.n	20000f9c <RenderOscil_OutLoop>

20001054 <RenderOscil_Addr>:
20001054:	2000642c 	.word	0x2000642c

20001058 <RenderOscLine>:
20001058:	b5fc      	push	{r2, r3, r4, r5, r6, r7, lr}
2000105a:	9c07      	ldr	r4, [sp, #28]
2000105c:	8925      	ldrh	r5, [r4, #8]
2000105e:	086d      	lsrs	r5, r5, #1
20001060:	9507      	str	r5, [sp, #28]
20001062:	0849      	lsrs	r1, r1, #1
20001064:	085b      	lsrs	r3, r3, #1
20001066:	9301      	str	r3, [sp, #4]
20001068:	8965      	ldrh	r5, [r4, #10]
2000106a:	3d01      	subs	r5, #1
2000106c:	1aad      	subs	r5, r5, r2
2000106e:	46ae      	mov	lr, r5
20001070:	68e2      	ldr	r2, [r4, #12]
20001072:	9200      	str	r2, [sp, #0]
20001074:	440a      	add	r2, r1
20001076:	7d66      	ldrb	r6, [r4, #21]
20001078:	0237      	lsls	r7, r6, #8
2000107a:	433e      	orrs	r6, r7
2000107c:	7d24      	ldrb	r4, [r4, #20]
2000107e:	0227      	lsls	r7, r4, #8
20001080:	433c      	orrs	r4, r7
20001082:	9f07      	ldr	r7, [sp, #28]
20001084:	1a79      	subs	r1, r7, r1

20001086 <RenderOscLine_OutLoop>:
20001086:	9b01      	ldr	r3, [sp, #4]
20001088:	4299      	cmp	r1, r3
2000108a:	d900      	bls.n	2000108e <RenderOscLine_OutLoop+0x8>
2000108c:	4619      	mov	r1, r3
2000108e:	2900      	cmp	r1, #0
20001090:	d01b      	beq.n	200010ca <RenderOscLine_Stop>
20001092:	1a5b      	subs	r3, r3, r1
20001094:	9301      	str	r3, [sp, #4]
20001096:	7815      	ldrb	r5, [r2, #0]

20001098 <RenderOscLine_InLoop>:
20001098:	7813      	ldrb	r3, [r2, #0]
2000109a:	3201      	adds	r2, #1
2000109c:	4627      	mov	r7, r4
2000109e:	4573      	cmp	r3, lr
200010a0:	d00a      	beq.n	200010b8 <RenderOscLine_InLoop+0x20>
200010a2:	d303      	bcc.n	200010ac <RenderOscLine_InLoop+0x14>
200010a4:	42ab      	cmp	r3, r5
200010a6:	d901      	bls.n	200010ac <RenderOscLine_InLoop+0x14>
200010a8:	45ae      	cmp	lr, r5
200010aa:	d805      	bhi.n	200010b8 <RenderOscLine_InLoop+0x20>
200010ac:	42ab      	cmp	r3, r5
200010ae:	d204      	bcs.n	200010ba <RenderOscLine_InLoop+0x22>
200010b0:	4573      	cmp	r3, lr
200010b2:	d202      	bcs.n	200010ba <RenderOscLine_InLoop+0x22>
200010b4:	45ae      	cmp	lr, r5
200010b6:	d200      	bcs.n	200010ba <RenderOscLine_InLoop+0x22>
200010b8:	4637      	mov	r7, r6
200010ba:	8007      	strh	r7, [r0, #0]
200010bc:	3002      	adds	r0, #2
200010be:	461d      	mov	r5, r3
200010c0:	3901      	subs	r1, #1
200010c2:	d1e9      	bne.n	20001098 <RenderOscLine_InLoop>
200010c4:	9907      	ldr	r1, [sp, #28]
200010c6:	9a00      	ldr	r2, [sp, #0]
200010c8:	e7dd      	b.n	20001086 <RenderOscLine_OutLoop>

200010ca <RenderOscLine_Stop>:
200010ca:	bdfc      	pop	{r2, r3, r4, r5, r6, r7, pc}

200010cc <RenderOscLine_Addr>:
200010cc:	2000642c 	.word	0x2000642c

200010d0 <RenderPersp>:
200010d0:	b5f0      	push	{r4, r5, r6, r7, lr}
200010d2:	4e41      	ldr	r6, [pc, #260]	; (200011d8 <RenderPersp_pSioBase>)
200010d4:	8b15      	ldrh	r5, [r2, #24]
200010d6:	7f54      	ldrb	r4, [r2, #29]
200010d8:	b264      	sxtb	r4, r4
200010da:	00a4      	lsls	r4, r4, #2
200010dc:	d107      	bne.n	200010ee <RenderPersp+0x1e>
200010de:	086d      	lsrs	r5, r5, #1
200010e0:	1b49      	subs	r1, r1, r5
200010e2:	468c      	mov	ip, r1
200010e4:	2501      	movs	r5, #1
200010e6:	6675      	str	r5, [r6, #100]	; 0x64
200010e8:	032d      	lsls	r5, r5, #12
200010ea:	6635      	str	r5, [r6, #96]	; 0x60
200010ec:	e009      	b.n	20001102 <RenderPersp+0x32>
200010ee:	d502      	bpl.n	200010f6 <RenderPersp+0x26>
200010f0:	1a69      	subs	r1, r5, r1
200010f2:	3901      	subs	r1, #1
200010f4:	4264      	negs	r4, r4
200010f6:	1b4f      	subs	r7, r1, r5
200010f8:	46bc      	mov	ip, r7
200010fa:	032d      	lsls	r5, r5, #12
200010fc:	6635      	str	r5, [r6, #96]	; 0x60
200010fe:	1909      	adds	r1, r1, r4
20001100:	6671      	str	r1, [r6, #100]	; 0x64
20001102:	8ad3      	ldrh	r3, [r2, #22]
20001104:	085d      	lsrs	r5, r3, #1
20001106:	426d      	negs	r5, r5
20001108:	46ae      	mov	lr, r5
2000110a:	089f      	lsrs	r7, r3, #2
2000110c:	7f91      	ldrb	r1, [r2, #30]
2000110e:	7fd4      	ldrb	r4, [r2, #31]
20001110:	4b32      	ldr	r3, [pc, #200]	; (200011dc <RenderPersp_Interp>)
20001112:	6816      	ldr	r6, [r2, #0]
20001114:	611e      	str	r6, [r3, #16]
20001116:	4e32      	ldr	r6, [pc, #200]	; (200011e0 <RenderPersp_Ctrl>)
20001118:	1a76      	subs	r6, r6, r1
2000111a:	014d      	lsls	r5, r1, #5
2000111c:	432e      	orrs	r6, r5
2000111e:	3901      	subs	r1, #1
20001120:	190d      	adds	r5, r1, r4
20001122:	02ad      	lsls	r5, r5, #10
20001124:	432e      	orrs	r6, r5
20001126:	631e      	str	r6, [r3, #48]	; 0x30
20001128:	4e2d      	ldr	r6, [pc, #180]	; (200011e0 <RenderPersp_Ctrl>)
2000112a:	0289      	lsls	r1, r1, #10
2000112c:	430e      	orrs	r6, r1
2000112e:	62de      	str	r6, [r3, #44]	; 0x2c
20001130:	6854      	ldr	r4, [r2, #4]
20001132:	4929      	ldr	r1, [pc, #164]	; (200011d8 <RenderPersp_pSioBase>)
20001134:	6f09      	ldr	r1, [r1, #112]	; 0x70
20001136:	6825      	ldr	r5, [r4, #0]
20001138:	434d      	muls	r5, r1
2000113a:	132d      	asrs	r5, r5, #12
2000113c:	609d      	str	r5, [r3, #8]
2000113e:	68e6      	ldr	r6, [r4, #12]
20001140:	434e      	muls	r6, r1
20001142:	1336      	asrs	r6, r6, #12
20001144:	60de      	str	r6, [r3, #12]
20001146:	4672      	mov	r2, lr
20001148:	4355      	muls	r5, r2
2000114a:	4372      	muls	r2, r6
2000114c:	468e      	mov	lr, r1
2000114e:	6866      	ldr	r6, [r4, #4]
20001150:	4371      	muls	r1, r6
20001152:	1309      	asrs	r1, r1, #12
20001154:	4666      	mov	r6, ip
20001156:	4371      	muls	r1, r6
20001158:	186d      	adds	r5, r5, r1
2000115a:	68a1      	ldr	r1, [r4, #8]
2000115c:	186d      	adds	r5, r5, r1
2000115e:	601d      	str	r5, [r3, #0]
20001160:	6921      	ldr	r1, [r4, #16]
20001162:	4675      	mov	r5, lr
20001164:	4369      	muls	r1, r5
20001166:	1309      	asrs	r1, r1, #12
20001168:	4371      	muls	r1, r6
2000116a:	1852      	adds	r2, r2, r1
2000116c:	6961      	ldr	r1, [r4, #20]
2000116e:	1852      	adds	r2, r2, r1
20001170:	605a      	str	r2, [r3, #4]
20001172:	087f      	lsrs	r7, r7, #1
20001174:	d30e      	bcc.n	20001194 <RenderPersp+0xc4>
20001176:	69dc      	ldr	r4, [r3, #28]
20001178:	7826      	ldrb	r6, [r4, #0]
2000117a:	69dc      	ldr	r4, [r3, #28]
2000117c:	7825      	ldrb	r5, [r4, #0]
2000117e:	022d      	lsls	r5, r5, #8
20001180:	432e      	orrs	r6, r5
20001182:	69dc      	ldr	r4, [r3, #28]
20001184:	7825      	ldrb	r5, [r4, #0]
20001186:	042d      	lsls	r5, r5, #16
20001188:	432e      	orrs	r6, r5
2000118a:	69dc      	ldr	r4, [r3, #28]
2000118c:	7825      	ldrb	r5, [r4, #0]
2000118e:	062d      	lsls	r5, r5, #24
20001190:	432e      	orrs	r6, r5
20001192:	c040      	stmia	r0!, {r6}
20001194:	423f      	tst	r7, r7
20001196:	d01e      	beq.n	200011d6 <RenderPersp+0x106>
20001198:	69dc      	ldr	r4, [r3, #28]
2000119a:	7821      	ldrb	r1, [r4, #0]
2000119c:	69dc      	ldr	r4, [r3, #28]
2000119e:	7824      	ldrb	r4, [r4, #0]
200011a0:	0224      	lsls	r4, r4, #8
200011a2:	4321      	orrs	r1, r4
200011a4:	69dc      	ldr	r4, [r3, #28]
200011a6:	7824      	ldrb	r4, [r4, #0]
200011a8:	0424      	lsls	r4, r4, #16
200011aa:	4321      	orrs	r1, r4
200011ac:	69dc      	ldr	r4, [r3, #28]
200011ae:	7824      	ldrb	r4, [r4, #0]
200011b0:	0624      	lsls	r4, r4, #24
200011b2:	4321      	orrs	r1, r4
200011b4:	69dc      	ldr	r4, [r3, #28]
200011b6:	7822      	ldrb	r2, [r4, #0]
200011b8:	69dc      	ldr	r4, [r3, #28]
200011ba:	7824      	ldrb	r4, [r4, #0]
200011bc:	0224      	lsls	r4, r4, #8
200011be:	4322      	orrs	r2, r4
200011c0:	69dc      	ldr	r4, [r3, #28]
200011c2:	7824      	ldrb	r4, [r4, #0]
200011c4:	0424      	lsls	r4, r4, #16
200011c6:	4322      	orrs	r2, r4
200011c8:	69dc      	ldr	r4, [r3, #28]
200011ca:	7824      	ldrb	r4, [r4, #0]
200011cc:	0624      	lsls	r4, r4, #24
200011ce:	4322      	orrs	r2, r4
200011d0:	c006      	stmia	r0!, {r1, r2}
200011d2:	3f01      	subs	r7, #1
200011d4:	d1e0      	bne.n	20001198 <RenderPersp+0xc8>
200011d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

200011d8 <RenderPersp_pSioBase>:
200011d8:	d0000000 	.word	0xd0000000

200011dc <RenderPersp_Interp>:
200011dc:	d00000c0 	.word	0xd00000c0

200011e0 <RenderPersp_Ctrl>:
200011e0:	0004000c 	.word	0x0004000c

200011e4 <RenderPersp2>:
200011e4:	b5f0      	push	{r4, r5, r6, r7, lr}
200011e6:	4e3c      	ldr	r6, [pc, #240]	; (200012d8 <RenderPersp_pSioBase>)
200011e8:	8b15      	ldrh	r5, [r2, #24]
200011ea:	7f54      	ldrb	r4, [r2, #29]
200011ec:	b264      	sxtb	r4, r4
200011ee:	00a4      	lsls	r4, r4, #2
200011f0:	d107      	bne.n	20001202 <RenderPersp2+0x1e>
200011f2:	086d      	lsrs	r5, r5, #1
200011f4:	1b49      	subs	r1, r1, r5
200011f6:	468c      	mov	ip, r1
200011f8:	2501      	movs	r5, #1
200011fa:	6675      	str	r5, [r6, #100]	; 0x64
200011fc:	032d      	lsls	r5, r5, #12
200011fe:	6635      	str	r5, [r6, #96]	; 0x60
20001200:	e009      	b.n	20001216 <RenderPersp2+0x32>
20001202:	d502      	bpl.n	2000120a <RenderPersp2+0x26>
20001204:	1a69      	subs	r1, r5, r1
20001206:	3901      	subs	r1, #1
20001208:	4264      	negs	r4, r4
2000120a:	1b4f      	subs	r7, r1, r5
2000120c:	46bc      	mov	ip, r7
2000120e:	032d      	lsls	r5, r5, #12
20001210:	6635      	str	r5, [r6, #96]	; 0x60
20001212:	1909      	adds	r1, r1, r4
20001214:	6671      	str	r1, [r6, #100]	; 0x64
20001216:	8ad3      	ldrh	r3, [r2, #22]
20001218:	085d      	lsrs	r5, r3, #1
2000121a:	426d      	negs	r5, r5
2000121c:	46ae      	mov	lr, r5
2000121e:	089f      	lsrs	r7, r3, #2
20001220:	7f91      	ldrb	r1, [r2, #30]
20001222:	7fd4      	ldrb	r4, [r2, #31]
20001224:	4b2d      	ldr	r3, [pc, #180]	; (200012dc <RenderPersp_Interp>)
20001226:	6816      	ldr	r6, [r2, #0]
20001228:	611e      	str	r6, [r3, #16]
2000122a:	4e2d      	ldr	r6, [pc, #180]	; (200012e0 <RenderPersp_Ctrl>)
2000122c:	1a76      	subs	r6, r6, r1
2000122e:	014d      	lsls	r5, r1, #5
20001230:	432e      	orrs	r6, r5
20001232:	3901      	subs	r1, #1
20001234:	190d      	adds	r5, r1, r4
20001236:	02ad      	lsls	r5, r5, #10
20001238:	432e      	orrs	r6, r5
2000123a:	631e      	str	r6, [r3, #48]	; 0x30
2000123c:	4e28      	ldr	r6, [pc, #160]	; (200012e0 <RenderPersp_Ctrl>)
2000123e:	0289      	lsls	r1, r1, #10
20001240:	430e      	orrs	r6, r1
20001242:	62de      	str	r6, [r3, #44]	; 0x2c
20001244:	6854      	ldr	r4, [r2, #4]
20001246:	4924      	ldr	r1, [pc, #144]	; (200012d8 <RenderPersp_pSioBase>)
20001248:	6f09      	ldr	r1, [r1, #112]	; 0x70
2000124a:	6825      	ldr	r5, [r4, #0]
2000124c:	434d      	muls	r5, r1
2000124e:	12ed      	asrs	r5, r5, #11
20001250:	609d      	str	r5, [r3, #8]
20001252:	106d      	asrs	r5, r5, #1
20001254:	68e6      	ldr	r6, [r4, #12]
20001256:	434e      	muls	r6, r1
20001258:	12f6      	asrs	r6, r6, #11
2000125a:	60de      	str	r6, [r3, #12]
2000125c:	1076      	asrs	r6, r6, #1
2000125e:	4672      	mov	r2, lr
20001260:	4355      	muls	r5, r2
20001262:	4372      	muls	r2, r6
20001264:	468e      	mov	lr, r1
20001266:	6866      	ldr	r6, [r4, #4]
20001268:	4371      	muls	r1, r6
2000126a:	1309      	asrs	r1, r1, #12
2000126c:	4666      	mov	r6, ip
2000126e:	4371      	muls	r1, r6
20001270:	186d      	adds	r5, r5, r1
20001272:	68a1      	ldr	r1, [r4, #8]
20001274:	186d      	adds	r5, r5, r1
20001276:	601d      	str	r5, [r3, #0]
20001278:	6921      	ldr	r1, [r4, #16]
2000127a:	4675      	mov	r5, lr
2000127c:	4369      	muls	r1, r5
2000127e:	1309      	asrs	r1, r1, #12
20001280:	4371      	muls	r1, r6
20001282:	1852      	adds	r2, r2, r1
20001284:	6961      	ldr	r1, [r4, #20]
20001286:	1852      	adds	r2, r2, r1
20001288:	605a      	str	r2, [r3, #4]
2000128a:	087f      	lsrs	r7, r7, #1
2000128c:	d30a      	bcc.n	200012a4 <RenderPersp2+0xc0>
2000128e:	69dc      	ldr	r4, [r3, #28]
20001290:	7821      	ldrb	r1, [r4, #0]
20001292:	020c      	lsls	r4, r1, #8
20001294:	4321      	orrs	r1, r4
20001296:	69dc      	ldr	r4, [r3, #28]
20001298:	7824      	ldrb	r4, [r4, #0]
2000129a:	0424      	lsls	r4, r4, #16
2000129c:	4321      	orrs	r1, r4
2000129e:	0224      	lsls	r4, r4, #8
200012a0:	4321      	orrs	r1, r4
200012a2:	c002      	stmia	r0!, {r1}
200012a4:	423f      	tst	r7, r7
200012a6:	d016      	beq.n	200012d6 <RenderPersp2+0xf2>
200012a8:	69dc      	ldr	r4, [r3, #28]
200012aa:	7821      	ldrb	r1, [r4, #0]
200012ac:	020c      	lsls	r4, r1, #8
200012ae:	4321      	orrs	r1, r4
200012b0:	69dc      	ldr	r4, [r3, #28]
200012b2:	7824      	ldrb	r4, [r4, #0]
200012b4:	0424      	lsls	r4, r4, #16
200012b6:	4321      	orrs	r1, r4
200012b8:	0224      	lsls	r4, r4, #8
200012ba:	4321      	orrs	r1, r4
200012bc:	69dc      	ldr	r4, [r3, #28]
200012be:	7822      	ldrb	r2, [r4, #0]
200012c0:	0214      	lsls	r4, r2, #8
200012c2:	4322      	orrs	r2, r4
200012c4:	69dc      	ldr	r4, [r3, #28]
200012c6:	7824      	ldrb	r4, [r4, #0]
200012c8:	0424      	lsls	r4, r4, #16
200012ca:	4322      	orrs	r2, r4
200012cc:	0224      	lsls	r4, r4, #8
200012ce:	4322      	orrs	r2, r4
200012d0:	c006      	stmia	r0!, {r1, r2}
200012d2:	3f01      	subs	r7, #1
200012d4:	d1e8      	bne.n	200012a8 <RenderPersp2+0xc4>
200012d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

200012d8 <RenderPersp_pSioBase>:
200012d8:	d0000000 	.word	0xd0000000

200012dc <RenderPersp_Interp>:
200012dc:	d00000c0 	.word	0xd00000c0

200012e0 <RenderPersp_Ctrl>:
200012e0:	0004000c 	.word	0x0004000c

200012e4 <RenderPlane2>:
200012e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
200012e6:	9c06      	ldr	r4, [sp, #24]
200012e8:	8927      	ldrh	r7, [r4, #8]
200012ea:	2603      	movs	r6, #3
200012ec:	43b7      	bics	r7, r6
200012ee:	9706      	str	r7, [sp, #24]
200012f0:	43b1      	bics	r1, r6
200012f2:	43b3      	bics	r3, r6
200012f4:	9300      	str	r3, [sp, #0]
200012f6:	8865      	ldrh	r5, [r4, #2]
200012f8:	436a      	muls	r2, r5
200012fa:	68e5      	ldr	r5, [r4, #12]
200012fc:	442a      	add	r2, r5
200012fe:	4696      	mov	lr, r2
20001300:	08ce      	lsrs	r6, r1, #3
20001302:	4432      	add	r2, r6
20001304:	6963      	ldr	r3, [r4, #20]
20001306:	69a7      	ldr	r7, [r4, #24]
20001308:	074d      	lsls	r5, r1, #29
2000130a:	d512      	bpl.n	20001332 <RenderPlane2+0x4e>
2000130c:	7815      	ldrb	r5, [r2, #0]
2000130e:	5cd6      	ldrb	r6, [r2, r3]
20001310:	3201      	adds	r2, #1
20001312:	0736      	lsls	r6, r6, #28
20001314:	0db6      	lsrs	r6, r6, #22
20001316:	072d      	lsls	r5, r5, #28
20001318:	0ead      	lsrs	r5, r5, #26
2000131a:	4335      	orrs	r5, r6
2000131c:	597d      	ldr	r5, [r7, r5]
2000131e:	c020      	stmia	r0!, {r5}
20001320:	3104      	adds	r1, #4
20001322:	9e06      	ldr	r6, [sp, #24]
20001324:	42b1      	cmp	r1, r6
20001326:	d301      	bcc.n	2000132c <RenderPlane2+0x48>
20001328:	2100      	movs	r1, #0
2000132a:	4672      	mov	r2, lr
2000132c:	9e00      	ldr	r6, [sp, #0]
2000132e:	3e04      	subs	r6, #4
20001330:	9600      	str	r6, [sp, #0]
20001332:	9e06      	ldr	r6, [sp, #24]
20001334:	1a76      	subs	r6, r6, r1

20001336 <RenderPlane2_OutLoop>:
20001336:	9c00      	ldr	r4, [sp, #0]
20001338:	42a6      	cmp	r6, r4
2000133a:	d900      	bls.n	2000133e <RenderPlane2_OutLoop+0x8>
2000133c:	4626      	mov	r6, r4
2000133e:	2e08      	cmp	r6, #8
20001340:	d20f      	bcs.n	20001362 <RenderPlane2_Last+0x1c>
20001342:	2e04      	cmp	r6, #4
20001344:	d30c      	bcc.n	20001360 <RenderPlane2_Last+0x1a>

20001346 <RenderPlane2_Last>:
20001346:	7815      	ldrb	r5, [r2, #0]
20001348:	5cd4      	ldrb	r4, [r2, r3]
2000134a:	3201      	adds	r2, #1
2000134c:	0924      	lsrs	r4, r4, #4
2000134e:	0224      	lsls	r4, r4, #8
20001350:	432c      	orrs	r4, r5
20001352:	0924      	lsrs	r4, r4, #4
20001354:	00a4      	lsls	r4, r4, #2
20001356:	593c      	ldr	r4, [r7, r4]
20001358:	c010      	stmia	r0!, {r4}
2000135a:	4672      	mov	r2, lr
2000135c:	2e04      	cmp	r6, #4
2000135e:	d8ea      	bhi.n	20001336 <RenderPlane2_OutLoop>
20001360:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
20001362:	08b1      	lsrs	r1, r6, #2
20001364:	008e      	lsls	r6, r1, #2
20001366:	1ba4      	subs	r4, r4, r6
20001368:	9400      	str	r4, [sp, #0]
2000136a:	3901      	subs	r1, #1

2000136c <RenderPlane2_InLoop>:
2000136c:	7815      	ldrb	r5, [r2, #0]
2000136e:	5cd6      	ldrb	r6, [r2, r3]
20001370:	3201      	adds	r2, #1
20001372:	0934      	lsrs	r4, r6, #4
20001374:	0224      	lsls	r4, r4, #8
20001376:	432c      	orrs	r4, r5
20001378:	0924      	lsrs	r4, r4, #4
2000137a:	00a4      	lsls	r4, r4, #2
2000137c:	593c      	ldr	r4, [r7, r4]
2000137e:	0736      	lsls	r6, r6, #28
20001380:	0db6      	lsrs	r6, r6, #22
20001382:	072d      	lsls	r5, r5, #28
20001384:	0ead      	lsrs	r5, r5, #26
20001386:	4335      	orrs	r5, r6
20001388:	597d      	ldr	r5, [r7, r5]
2000138a:	c030      	stmia	r0!, {r4, r5}
2000138c:	3902      	subs	r1, #2
2000138e:	d8ed      	bhi.n	2000136c <RenderPlane2_InLoop>

20001390 <RenderPlane2_EndLoop>:
20001390:	9e06      	ldr	r6, [sp, #24]
20001392:	d0d8      	beq.n	20001346 <RenderPlane2_Last>
20001394:	4672      	mov	r2, lr
20001396:	e7ce      	b.n	20001336 <RenderPlane2_OutLoop>

20001398 <RenderProgress>:
20001398:	b5f0      	push	{r4, r5, r6, r7, lr}
2000139a:	9c05      	ldr	r4, [sp, #20]
2000139c:	0889      	lsrs	r1, r1, #2
2000139e:	68e5      	ldr	r5, [r4, #12]
200013a0:	5caa      	ldrb	r2, [r5, r2]
200013a2:	089b      	lsrs	r3, r3, #2
200013a4:	8927      	ldrh	r7, [r4, #8]
200013a6:	08bf      	lsrs	r7, r7, #2
200013a8:	46be      	mov	lr, r7
200013aa:	69a5      	ldr	r5, [r4, #24]
200013ac:	6964      	ldr	r4, [r4, #20]
200013ae:	421b      	tst	r3, r3
200013b0:	d017      	beq.n	200013e2 <RenderProgress+0x4a>
200013b2:	4677      	mov	r7, lr
200013b4:	1a7f      	subs	r7, r7, r1
200013b6:	429f      	cmp	r7, r3
200013b8:	d900      	bls.n	200013bc <RenderProgress+0x24>
200013ba:	461f      	mov	r7, r3
200013bc:	1bdb      	subs	r3, r3, r7
200013be:	4291      	cmp	r1, r2
200013c0:	d208      	bcs.n	200013d4 <RenderProgress+0x3c>
200013c2:	1a56      	subs	r6, r2, r1
200013c4:	42be      	cmp	r6, r7
200013c6:	d900      	bls.n	200013ca <RenderProgress+0x32>
200013c8:	463e      	mov	r6, r7
200013ca:	1bbf      	subs	r7, r7, r6
200013cc:	c040      	stmia	r0!, {r6}
200013ce:	1866      	adds	r6, r4, r1
200013d0:	c040      	stmia	r0!, {r6}
200013d2:	4611      	mov	r1, r2
200013d4:	423f      	tst	r7, r7
200013d6:	d002      	beq.n	200013de <RenderProgress+0x46>
200013d8:	c080      	stmia	r0!, {r7}
200013da:	186e      	adds	r6, r5, r1
200013dc:	c040      	stmia	r0!, {r6}
200013de:	2100      	movs	r1, #0
200013e0:	e7e5      	b.n	200013ae <RenderProgress+0x16>
200013e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

200013e4 <RenderSprite>:
200013e4:	b5f0      	push	{r4, r5, r6, r7, lr}
200013e6:	6817      	ldr	r7, [r2, #0]
200013e8:	8ad6      	ldrh	r6, [r2, #22]
200013ea:	8c12      	ldrh	r2, [r2, #32]
200013ec:	3a01      	subs	r2, #1
200013ee:	d324      	bcc.n	2000143a <RenderSprite+0x56>
200013f0:	b407      	push	{r0, r1, r2}
200013f2:	cf08      	ldmia	r7!, {r3}
200013f4:	8a5c      	ldrh	r4, [r3, #18]
200013f6:	b224      	sxth	r4, r4
200013f8:	1b09      	subs	r1, r1, r4
200013fa:	d41c      	bmi.n	20001436 <RenderSprite+0x52>
200013fc:	8adc      	ldrh	r4, [r3, #22]
200013fe:	42a1      	cmp	r1, r4
20001400:	da19      	bge.n	20001436 <RenderSprite+0x52>
20001402:	685c      	ldr	r4, [r3, #4]
20001404:	5c65      	ldrb	r5, [r4, r1]
20001406:	689c      	ldr	r4, [r3, #8]
20001408:	5c62      	ldrb	r2, [r4, r1]
2000140a:	8b1c      	ldrh	r4, [r3, #24]
2000140c:	4361      	muls	r1, r4
2000140e:	681c      	ldr	r4, [r3, #0]
20001410:	4421      	add	r1, r4
20001412:	8a1c      	ldrh	r4, [r3, #16]
20001414:	b224      	sxth	r4, r4
20001416:	7b1b      	ldrb	r3, [r3, #12]
20001418:	1964      	adds	r4, r4, r5
2000141a:	d502      	bpl.n	20001422 <RenderSprite+0x3e>
2000141c:	1b2d      	subs	r5, r5, r4
2000141e:	1912      	adds	r2, r2, r4
20001420:	2400      	movs	r4, #0
20001422:	1949      	adds	r1, r1, r5
20001424:	1b35      	subs	r5, r6, r4
20001426:	42aa      	cmp	r2, r5
20001428:	dd00      	ble.n	2000142c <RenderSprite+0x48>
2000142a:	462a      	mov	r2, r5
2000142c:	4212      	tst	r2, r2
2000142e:	dd02      	ble.n	20001436 <RenderSprite+0x52>
20001430:	1900      	adds	r0, r0, r4
20001432:	f000 fc11 	bl	20001c58 <BlitKey>
20001436:	bc07      	pop	{r0, r1, r2}
20001438:	e7d8      	b.n	200013ec <RenderSprite+0x8>
2000143a:	bdf0      	pop	{r4, r5, r6, r7, pc}

2000143c <RenderTile>:
2000143c:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
2000143e:	9c08      	ldr	r4, [sp, #32]
20001440:	4d2f      	ldr	r5, [pc, #188]	; (20001500 <RenderTile_pSioBase>)
20001442:	662a      	str	r2, [r5, #96]	; 0x60
20001444:	69a2      	ldr	r2, [r4, #24]
20001446:	666a      	str	r2, [r5, #100]	; 0x64
20001448:	8927      	ldrh	r7, [r4, #8]
2000144a:	2603      	movs	r6, #3
2000144c:	43b7      	bics	r7, r6
2000144e:	9700      	str	r7, [sp, #0]
20001450:	43b1      	bics	r1, r6
20001452:	43b3      	bics	r3, r6
20001454:	9301      	str	r3, [sp, #4]
20001456:	8a63      	ldrh	r3, [r4, #18]
20001458:	9302      	str	r3, [sp, #8]
2000145a:	6f6e      	ldr	r6, [r5, #116]	; 0x74
2000145c:	6f2f      	ldr	r7, [r5, #112]	; 0x70
2000145e:	6629      	str	r1, [r5, #96]	; 0x60
20001460:	666b      	str	r3, [r5, #100]	; 0x64
20001462:	435a      	muls	r2, r3
20001464:	8863      	ldrh	r3, [r4, #2]
20001466:	435f      	muls	r7, r3
20001468:	68e3      	ldr	r3, [r4, #12]
2000146a:	18ff      	adds	r7, r7, r3
2000146c:	46be      	mov	lr, r7
2000146e:	9b02      	ldr	r3, [sp, #8]
20001470:	435e      	muls	r6, r3
20001472:	6964      	ldr	r4, [r4, #20]
20001474:	19a4      	adds	r4, r4, r6
20001476:	6f6e      	ldr	r6, [r5, #116]	; 0x74
20001478:	6f2d      	ldr	r5, [r5, #112]	; 0x70
2000147a:	197f      	adds	r7, r7, r5
2000147c:	4236      	tst	r6, r6
2000147e:	d011      	beq.n	200014a4 <RenderTile+0x68>
20001480:	1b9d      	subs	r5, r3, r6
20001482:	1949      	adds	r1, r1, r5
20001484:	9b01      	ldr	r3, [sp, #4]
20001486:	1b5b      	subs	r3, r3, r5
20001488:	9301      	str	r3, [sp, #4]
2000148a:	08ad      	lsrs	r5, r5, #2
2000148c:	c020      	stmia	r0!, {r5}
2000148e:	783b      	ldrb	r3, [r7, #0]
20001490:	3701      	adds	r7, #1
20001492:	4353      	muls	r3, r2
20001494:	4423      	add	r3, r4
20001496:	4433      	add	r3, r6
20001498:	c008      	stmia	r0!, {r3}
2000149a:	9b00      	ldr	r3, [sp, #0]
2000149c:	4299      	cmp	r1, r3
2000149e:	d301      	bcc.n	200014a4 <RenderTile+0x68>
200014a0:	2100      	movs	r1, #0
200014a2:	4677      	mov	r7, lr
200014a4:	9b00      	ldr	r3, [sp, #0]
200014a6:	1a5d      	subs	r5, r3, r1
200014a8:	9b01      	ldr	r3, [sp, #4]

200014aa <RenderTile_OutLoop>:
200014aa:	429d      	cmp	r5, r3
200014ac:	d900      	bls.n	200014b0 <RenderTile_OutLoop+0x6>
200014ae:	461d      	mov	r5, r3
200014b0:	9902      	ldr	r1, [sp, #8]
200014b2:	428d      	cmp	r5, r1
200014b4:	d20e      	bcs.n	200014d4 <RenderTile_Last+0x18>
200014b6:	2d04      	cmp	r5, #4
200014b8:	d30b      	bcc.n	200014d2 <RenderTile_Last+0x16>
200014ba:	4629      	mov	r1, r5

200014bc <RenderTile_Last>:
200014bc:	088e      	lsrs	r6, r1, #2
200014be:	c040      	stmia	r0!, {r6}
200014c0:	783e      	ldrb	r6, [r7, #0]
200014c2:	3701      	adds	r7, #1
200014c4:	4356      	muls	r6, r2
200014c6:	4426      	add	r6, r4
200014c8:	c040      	stmia	r0!, {r6}
200014ca:	4677      	mov	r7, lr
200014cc:	9e02      	ldr	r6, [sp, #8]
200014ce:	42b5      	cmp	r5, r6
200014d0:	d2eb      	bcs.n	200014aa <RenderTile_OutLoop>
200014d2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
200014d4:	08a9      	lsrs	r1, r5, #2
200014d6:	008d      	lsls	r5, r1, #2
200014d8:	1b5b      	subs	r3, r3, r5
200014da:	9d02      	ldr	r5, [sp, #8]
200014dc:	08ad      	lsrs	r5, r5, #2
200014de:	1b49      	subs	r1, r1, r5
200014e0:	3101      	adds	r1, #1

200014e2 <RenderTile_InLoop>:
200014e2:	783e      	ldrb	r6, [r7, #0]
200014e4:	3701      	adds	r7, #1
200014e6:	4356      	muls	r6, r2
200014e8:	4426      	add	r6, r4
200014ea:	c060      	stmia	r0!, {r5, r6}
200014ec:	1b49      	subs	r1, r1, r5
200014ee:	d8f8      	bhi.n	200014e2 <RenderTile_InLoop>
200014f0:	1949      	adds	r1, r1, r5
200014f2:	3901      	subs	r1, #1
200014f4:	9d00      	ldr	r5, [sp, #0]
200014f6:	0089      	lsls	r1, r1, #2
200014f8:	d1e0      	bne.n	200014bc <RenderTile_Last>
200014fa:	4677      	mov	r7, lr
200014fc:	e7d5      	b.n	200014aa <RenderTile_OutLoop>
200014fe:	46c0      	nop			; (mov r8, r8)

20001500 <RenderTile_pSioBase>:
20001500:	d0000000 	.word	0xd0000000

20001504 <RenderTile2>:
20001504:	b5fc      	push	{r2, r3, r4, r5, r6, r7, lr}
20001506:	9c07      	ldr	r4, [sp, #28]
20001508:	4d2c      	ldr	r5, [pc, #176]	; (200015bc <RenderTile_pSioBase>)
2000150a:	662a      	str	r2, [r5, #96]	; 0x60
2000150c:	8b22      	ldrh	r2, [r4, #24]
2000150e:	666a      	str	r2, [r5, #100]	; 0x64
20001510:	8927      	ldrh	r7, [r4, #8]
20001512:	2603      	movs	r6, #3
20001514:	43b7      	bics	r7, r6
20001516:	9700      	str	r7, [sp, #0]
20001518:	43b1      	bics	r1, r6
2000151a:	43b3      	bics	r3, r6
2000151c:	9301      	str	r3, [sp, #4]
2000151e:	8a63      	ldrh	r3, [r4, #18]
20001520:	6f6e      	ldr	r6, [r5, #116]	; 0x74
20001522:	6f2f      	ldr	r7, [r5, #112]	; 0x70
20001524:	6629      	str	r1, [r5, #96]	; 0x60
20001526:	666b      	str	r3, [r5, #100]	; 0x64
20001528:	8862      	ldrh	r2, [r4, #2]
2000152a:	4357      	muls	r7, r2
2000152c:	68e2      	ldr	r2, [r4, #12]
2000152e:	18bf      	adds	r7, r7, r2
20001530:	46be      	mov	lr, r7
20001532:	8b62      	ldrh	r2, [r4, #26]
20001534:	4356      	muls	r6, r2
20001536:	6964      	ldr	r4, [r4, #20]
20001538:	19a4      	adds	r4, r4, r6
2000153a:	6f6e      	ldr	r6, [r5, #116]	; 0x74
2000153c:	6f2d      	ldr	r5, [r5, #112]	; 0x70
2000153e:	197f      	adds	r7, r7, r5
20001540:	4236      	tst	r6, r6
20001542:	d011      	beq.n	20001568 <RenderTile2+0x64>
20001544:	1b9d      	subs	r5, r3, r6
20001546:	1949      	adds	r1, r1, r5
20001548:	9a01      	ldr	r2, [sp, #4]
2000154a:	1b52      	subs	r2, r2, r5
2000154c:	9201      	str	r2, [sp, #4]
2000154e:	08ad      	lsrs	r5, r5, #2
20001550:	c020      	stmia	r0!, {r5}
20001552:	783a      	ldrb	r2, [r7, #0]
20001554:	3701      	adds	r7, #1
20001556:	435a      	muls	r2, r3
20001558:	4422      	add	r2, r4
2000155a:	4432      	add	r2, r6
2000155c:	c004      	stmia	r0!, {r2}
2000155e:	9a00      	ldr	r2, [sp, #0]
20001560:	4291      	cmp	r1, r2
20001562:	d301      	bcc.n	20001568 <RenderTile2+0x64>
20001564:	2100      	movs	r1, #0
20001566:	4677      	mov	r7, lr
20001568:	9a00      	ldr	r2, [sp, #0]
2000156a:	1a55      	subs	r5, r2, r1
2000156c:	9a01      	ldr	r2, [sp, #4]

2000156e <RenderTile_OutLoop>:
2000156e:	4295      	cmp	r5, r2
20001570:	d900      	bls.n	20001574 <RenderTile_OutLoop+0x6>
20001572:	4615      	mov	r5, r2
20001574:	429d      	cmp	r5, r3
20001576:	d20d      	bcs.n	20001594 <RenderTile_Last+0x16>
20001578:	2d04      	cmp	r5, #4
2000157a:	d30a      	bcc.n	20001592 <RenderTile_Last+0x14>
2000157c:	4629      	mov	r1, r5

2000157e <RenderTile_Last>:
2000157e:	088e      	lsrs	r6, r1, #2
20001580:	c040      	stmia	r0!, {r6}
20001582:	783e      	ldrb	r6, [r7, #0]
20001584:	3701      	adds	r7, #1
20001586:	435e      	muls	r6, r3
20001588:	4426      	add	r6, r4
2000158a:	c040      	stmia	r0!, {r6}
2000158c:	4677      	mov	r7, lr
2000158e:	429d      	cmp	r5, r3
20001590:	d2ed      	bcs.n	2000156e <RenderTile_OutLoop>
20001592:	bdfc      	pop	{r2, r3, r4, r5, r6, r7, pc}
20001594:	08a9      	lsrs	r1, r5, #2
20001596:	008d      	lsls	r5, r1, #2
20001598:	1b52      	subs	r2, r2, r5
2000159a:	089d      	lsrs	r5, r3, #2
2000159c:	1b49      	subs	r1, r1, r5
2000159e:	3101      	adds	r1, #1

200015a0 <RenderTile_InLoop>:
200015a0:	783e      	ldrb	r6, [r7, #0]
200015a2:	3701      	adds	r7, #1
200015a4:	435e      	muls	r6, r3
200015a6:	4426      	add	r6, r4
200015a8:	c060      	stmia	r0!, {r5, r6}
200015aa:	1b49      	subs	r1, r1, r5
200015ac:	d8f8      	bhi.n	200015a0 <RenderTile_InLoop>
200015ae:	1949      	adds	r1, r1, r5
200015b0:	3901      	subs	r1, #1
200015b2:	9d00      	ldr	r5, [sp, #0]
200015b4:	0089      	lsls	r1, r1, #2
200015b6:	d1e2      	bne.n	2000157e <RenderTile_Last>
200015b8:	4677      	mov	r7, lr
200015ba:	e7d8      	b.n	2000156e <RenderTile_OutLoop>

200015bc <RenderTile_pSioBase>:
200015bc:	d0000000 	.word	0xd0000000

200015c0 <RenderTilePersp>:
200015c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
200015c2:	9c06      	ldr	r4, [sp, #24]
200015c4:	4e5c      	ldr	r6, [pc, #368]	; (20001738 <RenderTilePersp_pSioBase>)
200015c6:	8965      	ldrh	r5, [r4, #10]
200015c8:	7ce1      	ldrb	r1, [r4, #19]
200015ca:	b249      	sxtb	r1, r1
200015cc:	0089      	lsls	r1, r1, #2
200015ce:	d107      	bne.n	200015e0 <RenderTilePersp+0x20>
200015d0:	086d      	lsrs	r5, r5, #1
200015d2:	1b52      	subs	r2, r2, r5
200015d4:	4694      	mov	ip, r2
200015d6:	2501      	movs	r5, #1
200015d8:	6675      	str	r5, [r6, #100]	; 0x64
200015da:	032d      	lsls	r5, r5, #12
200015dc:	6635      	str	r5, [r6, #96]	; 0x60
200015de:	e009      	b.n	200015f4 <RenderTilePersp+0x34>
200015e0:	d502      	bpl.n	200015e8 <RenderTilePersp+0x28>
200015e2:	1aaa      	subs	r2, r5, r2
200015e4:	3a01      	subs	r2, #1
200015e6:	4249      	negs	r1, r1
200015e8:	1b57      	subs	r7, r2, r5
200015ea:	46bc      	mov	ip, r7
200015ec:	032d      	lsls	r5, r5, #12
200015ee:	6635      	str	r5, [r6, #96]	; 0x60
200015f0:	1852      	adds	r2, r2, r1
200015f2:	6672      	str	r2, [r6, #100]	; 0x64
200015f4:	085d      	lsrs	r5, r3, #1
200015f6:	426d      	negs	r5, r5
200015f8:	46ae      	mov	lr, r5
200015fa:	089f      	lsrs	r7, r3, #2
200015fc:	4b4f      	ldr	r3, [pc, #316]	; (2000173c <RenderTilePersp_Interp>)
200015fe:	68e6      	ldr	r6, [r4, #12]
20001600:	611e      	str	r6, [r3, #16]
20001602:	4e4f      	ldr	r6, [pc, #316]	; (20001740 <RenderTilePersp_Ctrl>)
20001604:	7ca1      	ldrb	r1, [r4, #18]
20001606:	9100      	str	r1, [sp, #0]
20001608:	1876      	adds	r6, r6, r1
2000160a:	78a2      	ldrb	r2, [r4, #2]
2000160c:	1e55      	subs	r5, r2, #1
2000160e:	02ad      	lsls	r5, r5, #10
20001610:	432e      	orrs	r6, r5
20001612:	62de      	str	r6, [r3, #44]	; 0x2c
20001614:	1ab6      	subs	r6, r6, r2
20001616:	0152      	lsls	r2, r2, #5
20001618:	4316      	orrs	r6, r2
2000161a:	78e2      	ldrb	r2, [r4, #3]
2000161c:	0292      	lsls	r2, r2, #10
2000161e:	18b6      	adds	r6, r6, r2
20001620:	631e      	str	r6, [r3, #48]	; 0x30
20001622:	6966      	ldr	r6, [r4, #20]
20001624:	651e      	str	r6, [r3, #80]	; 0x50
20001626:	4e46      	ldr	r6, [pc, #280]	; (20001740 <RenderTilePersp_Ctrl>)
20001628:	1e4d      	subs	r5, r1, #1
2000162a:	02ad      	lsls	r5, r5, #10
2000162c:	432e      	orrs	r6, r5
2000162e:	66de      	str	r6, [r3, #108]	; 0x6c
20001630:	1a76      	subs	r6, r6, r1
20001632:	014d      	lsls	r5, r1, #5
20001634:	432e      	orrs	r6, r5
20001636:	0289      	lsls	r1, r1, #10
20001638:	1876      	adds	r6, r6, r1
2000163a:	671e      	str	r6, [r3, #112]	; 0x70
2000163c:	69a4      	ldr	r4, [r4, #24]
2000163e:	493e      	ldr	r1, [pc, #248]	; (20001738 <RenderTilePersp_pSioBase>)
20001640:	6f09      	ldr	r1, [r1, #112]	; 0x70
20001642:	6825      	ldr	r5, [r4, #0]
20001644:	434d      	muls	r5, r1
20001646:	132d      	asrs	r5, r5, #12
20001648:	609d      	str	r5, [r3, #8]
2000164a:	649d      	str	r5, [r3, #72]	; 0x48
2000164c:	68e6      	ldr	r6, [r4, #12]
2000164e:	434e      	muls	r6, r1
20001650:	1336      	asrs	r6, r6, #12
20001652:	60de      	str	r6, [r3, #12]
20001654:	64de      	str	r6, [r3, #76]	; 0x4c
20001656:	4672      	mov	r2, lr
20001658:	4355      	muls	r5, r2
2000165a:	4372      	muls	r2, r6
2000165c:	468e      	mov	lr, r1
2000165e:	6866      	ldr	r6, [r4, #4]
20001660:	4371      	muls	r1, r6
20001662:	1309      	asrs	r1, r1, #12
20001664:	4666      	mov	r6, ip
20001666:	4371      	muls	r1, r6
20001668:	186d      	adds	r5, r5, r1
2000166a:	68a1      	ldr	r1, [r4, #8]
2000166c:	186d      	adds	r5, r5, r1
2000166e:	601d      	str	r5, [r3, #0]
20001670:	641d      	str	r5, [r3, #64]	; 0x40
20001672:	6921      	ldr	r1, [r4, #16]
20001674:	4675      	mov	r5, lr
20001676:	4369      	muls	r1, r5
20001678:	1309      	asrs	r1, r1, #12
2000167a:	4371      	muls	r1, r6
2000167c:	1852      	adds	r2, r2, r1
2000167e:	6961      	ldr	r1, [r4, #20]
20001680:	1852      	adds	r2, r2, r1
20001682:	605a      	str	r2, [r3, #4]
20001684:	645a      	str	r2, [r3, #68]	; 0x44
20001686:	9e00      	ldr	r6, [sp, #0]
20001688:	0076      	lsls	r6, r6, #1
2000168a:	087f      	lsrs	r7, r7, #1
2000168c:	d31a      	bcc.n	200016c4 <RenderTilePersp+0x104>
2000168e:	69dc      	ldr	r4, [r3, #28]
20001690:	7824      	ldrb	r4, [r4, #0]
20001692:	40b4      	lsls	r4, r6
20001694:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
20001696:	5d29      	ldrb	r1, [r5, r4]
20001698:	69dc      	ldr	r4, [r3, #28]
2000169a:	7824      	ldrb	r4, [r4, #0]
2000169c:	40b4      	lsls	r4, r6
2000169e:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
200016a0:	5d2c      	ldrb	r4, [r5, r4]
200016a2:	0224      	lsls	r4, r4, #8
200016a4:	4321      	orrs	r1, r4
200016a6:	69dc      	ldr	r4, [r3, #28]
200016a8:	7824      	ldrb	r4, [r4, #0]
200016aa:	40b4      	lsls	r4, r6
200016ac:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
200016ae:	5d2c      	ldrb	r4, [r5, r4]
200016b0:	0424      	lsls	r4, r4, #16
200016b2:	4321      	orrs	r1, r4
200016b4:	69dc      	ldr	r4, [r3, #28]
200016b6:	7824      	ldrb	r4, [r4, #0]
200016b8:	40b4      	lsls	r4, r6
200016ba:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
200016bc:	5d2c      	ldrb	r4, [r5, r4]
200016be:	0624      	lsls	r4, r4, #24
200016c0:	4321      	orrs	r1, r4
200016c2:	c002      	stmia	r0!, {r1}
200016c4:	423f      	tst	r7, r7
200016c6:	d036      	beq.n	20001736 <RenderTilePersp+0x176>
200016c8:	69dc      	ldr	r4, [r3, #28]
200016ca:	7824      	ldrb	r4, [r4, #0]
200016cc:	40b4      	lsls	r4, r6
200016ce:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
200016d0:	5d29      	ldrb	r1, [r5, r4]
200016d2:	69dc      	ldr	r4, [r3, #28]
200016d4:	7824      	ldrb	r4, [r4, #0]
200016d6:	40b4      	lsls	r4, r6
200016d8:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
200016da:	5d2c      	ldrb	r4, [r5, r4]
200016dc:	0224      	lsls	r4, r4, #8
200016de:	4321      	orrs	r1, r4
200016e0:	69dc      	ldr	r4, [r3, #28]
200016e2:	7824      	ldrb	r4, [r4, #0]
200016e4:	40b4      	lsls	r4, r6
200016e6:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
200016e8:	5d2c      	ldrb	r4, [r5, r4]
200016ea:	0424      	lsls	r4, r4, #16
200016ec:	4321      	orrs	r1, r4
200016ee:	69dc      	ldr	r4, [r3, #28]
200016f0:	7824      	ldrb	r4, [r4, #0]
200016f2:	40b4      	lsls	r4, r6
200016f4:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
200016f6:	5d2c      	ldrb	r4, [r5, r4]
200016f8:	0624      	lsls	r4, r4, #24
200016fa:	4321      	orrs	r1, r4
200016fc:	69dc      	ldr	r4, [r3, #28]
200016fe:	7824      	ldrb	r4, [r4, #0]
20001700:	40b4      	lsls	r4, r6
20001702:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
20001704:	5d2a      	ldrb	r2, [r5, r4]
20001706:	69dc      	ldr	r4, [r3, #28]
20001708:	7824      	ldrb	r4, [r4, #0]
2000170a:	40b4      	lsls	r4, r6
2000170c:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
2000170e:	5d2c      	ldrb	r4, [r5, r4]
20001710:	0224      	lsls	r4, r4, #8
20001712:	4322      	orrs	r2, r4
20001714:	69dc      	ldr	r4, [r3, #28]
20001716:	7824      	ldrb	r4, [r4, #0]
20001718:	40b4      	lsls	r4, r6
2000171a:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
2000171c:	5d2c      	ldrb	r4, [r5, r4]
2000171e:	0424      	lsls	r4, r4, #16
20001720:	4322      	orrs	r2, r4
20001722:	69dc      	ldr	r4, [r3, #28]
20001724:	7824      	ldrb	r4, [r4, #0]
20001726:	40b4      	lsls	r4, r6
20001728:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
2000172a:	5d2c      	ldrb	r4, [r5, r4]
2000172c:	0624      	lsls	r4, r4, #24
2000172e:	4322      	orrs	r2, r4
20001730:	c006      	stmia	r0!, {r1, r2}
20001732:	3f01      	subs	r7, #1
20001734:	d1c8      	bne.n	200016c8 <RenderTilePersp+0x108>
20001736:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

20001738 <RenderTilePersp_pSioBase>:
20001738:	d0000000 	.word	0xd0000000

2000173c <RenderTilePersp_Interp>:
2000173c:	d0000080 	.word	0xd0000080

20001740 <RenderTilePersp_Ctrl>:
20001740:	0004000c 	.word	0x0004000c

20001744 <RenderTilePersp15>:
20001744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
20001746:	9c06      	ldr	r4, [sp, #24]
20001748:	4e57      	ldr	r6, [pc, #348]	; (200018a8 <RenderTilePersp_pSioBase>)
2000174a:	8965      	ldrh	r5, [r4, #10]
2000174c:	7ce1      	ldrb	r1, [r4, #19]
2000174e:	b249      	sxtb	r1, r1
20001750:	0089      	lsls	r1, r1, #2
20001752:	d107      	bne.n	20001764 <RenderTilePersp15+0x20>
20001754:	086d      	lsrs	r5, r5, #1
20001756:	1b52      	subs	r2, r2, r5
20001758:	4694      	mov	ip, r2
2000175a:	2501      	movs	r5, #1
2000175c:	6675      	str	r5, [r6, #100]	; 0x64
2000175e:	032d      	lsls	r5, r5, #12
20001760:	6635      	str	r5, [r6, #96]	; 0x60
20001762:	e009      	b.n	20001778 <RenderTilePersp15+0x34>
20001764:	d502      	bpl.n	2000176c <RenderTilePersp15+0x28>
20001766:	1aaa      	subs	r2, r5, r2
20001768:	3a01      	subs	r2, #1
2000176a:	4249      	negs	r1, r1
2000176c:	1b57      	subs	r7, r2, r5
2000176e:	46bc      	mov	ip, r7
20001770:	032d      	lsls	r5, r5, #12
20001772:	6635      	str	r5, [r6, #96]	; 0x60
20001774:	1852      	adds	r2, r2, r1
20001776:	6672      	str	r2, [r6, #100]	; 0x64
20001778:	085d      	lsrs	r5, r3, #1
2000177a:	426d      	negs	r5, r5
2000177c:	46ae      	mov	lr, r5
2000177e:	089f      	lsrs	r7, r3, #2
20001780:	4b4a      	ldr	r3, [pc, #296]	; (200018ac <RenderTilePersp_Interp>)
20001782:	68e6      	ldr	r6, [r4, #12]
20001784:	611e      	str	r6, [r3, #16]
20001786:	4e4a      	ldr	r6, [pc, #296]	; (200018b0 <RenderTilePersp_Ctrl>)
20001788:	7ca1      	ldrb	r1, [r4, #18]
2000178a:	9100      	str	r1, [sp, #0]
2000178c:	1876      	adds	r6, r6, r1
2000178e:	78a2      	ldrb	r2, [r4, #2]
20001790:	1e55      	subs	r5, r2, #1
20001792:	02ad      	lsls	r5, r5, #10
20001794:	432e      	orrs	r6, r5
20001796:	62de      	str	r6, [r3, #44]	; 0x2c
20001798:	1ab6      	subs	r6, r6, r2
2000179a:	0152      	lsls	r2, r2, #5
2000179c:	4316      	orrs	r6, r2
2000179e:	78e2      	ldrb	r2, [r4, #3]
200017a0:	0292      	lsls	r2, r2, #10
200017a2:	18b6      	adds	r6, r6, r2
200017a4:	631e      	str	r6, [r3, #48]	; 0x30
200017a6:	6966      	ldr	r6, [r4, #20]
200017a8:	651e      	str	r6, [r3, #80]	; 0x50
200017aa:	4e41      	ldr	r6, [pc, #260]	; (200018b0 <RenderTilePersp_Ctrl>)
200017ac:	1e4d      	subs	r5, r1, #1
200017ae:	02ad      	lsls	r5, r5, #10
200017b0:	432e      	orrs	r6, r5
200017b2:	66de      	str	r6, [r3, #108]	; 0x6c
200017b4:	1a76      	subs	r6, r6, r1
200017b6:	014d      	lsls	r5, r1, #5
200017b8:	432e      	orrs	r6, r5
200017ba:	0289      	lsls	r1, r1, #10
200017bc:	1876      	adds	r6, r6, r1
200017be:	671e      	str	r6, [r3, #112]	; 0x70
200017c0:	69a4      	ldr	r4, [r4, #24]
200017c2:	4939      	ldr	r1, [pc, #228]	; (200018a8 <RenderTilePersp_pSioBase>)
200017c4:	6f09      	ldr	r1, [r1, #112]	; 0x70
200017c6:	6825      	ldr	r5, [r4, #0]
200017c8:	434d      	muls	r5, r1
200017ca:	132d      	asrs	r5, r5, #12
200017cc:	106a      	asrs	r2, r5, #1
200017ce:	1952      	adds	r2, r2, r5
200017d0:	609a      	str	r2, [r3, #8]
200017d2:	649a      	str	r2, [r3, #72]	; 0x48
200017d4:	68e6      	ldr	r6, [r4, #12]
200017d6:	434e      	muls	r6, r1
200017d8:	1336      	asrs	r6, r6, #12
200017da:	1072      	asrs	r2, r6, #1
200017dc:	1992      	adds	r2, r2, r6
200017de:	60da      	str	r2, [r3, #12]
200017e0:	64da      	str	r2, [r3, #76]	; 0x4c
200017e2:	4672      	mov	r2, lr
200017e4:	4355      	muls	r5, r2
200017e6:	4372      	muls	r2, r6
200017e8:	468e      	mov	lr, r1
200017ea:	6866      	ldr	r6, [r4, #4]
200017ec:	4371      	muls	r1, r6
200017ee:	1309      	asrs	r1, r1, #12
200017f0:	4666      	mov	r6, ip
200017f2:	4371      	muls	r1, r6
200017f4:	186d      	adds	r5, r5, r1
200017f6:	68a1      	ldr	r1, [r4, #8]
200017f8:	186d      	adds	r5, r5, r1
200017fa:	601d      	str	r5, [r3, #0]
200017fc:	641d      	str	r5, [r3, #64]	; 0x40
200017fe:	6921      	ldr	r1, [r4, #16]
20001800:	4675      	mov	r5, lr
20001802:	4369      	muls	r1, r5
20001804:	1309      	asrs	r1, r1, #12
20001806:	4371      	muls	r1, r6
20001808:	1852      	adds	r2, r2, r1
2000180a:	6961      	ldr	r1, [r4, #20]
2000180c:	1852      	adds	r2, r2, r1
2000180e:	605a      	str	r2, [r3, #4]
20001810:	645a      	str	r2, [r3, #68]	; 0x44
20001812:	9e00      	ldr	r6, [sp, #0]
20001814:	0076      	lsls	r6, r6, #1
20001816:	087f      	lsrs	r7, r7, #1
20001818:	d315      	bcc.n	20001846 <RenderTilePersp15+0x102>
2000181a:	69dc      	ldr	r4, [r3, #28]
2000181c:	7824      	ldrb	r4, [r4, #0]
2000181e:	40b4      	lsls	r4, r6
20001820:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
20001822:	5d29      	ldrb	r1, [r5, r4]
20001824:	69dc      	ldr	r4, [r3, #28]
20001826:	7824      	ldrb	r4, [r4, #0]
20001828:	40b4      	lsls	r4, r6
2000182a:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
2000182c:	5d2c      	ldrb	r4, [r5, r4]
2000182e:	0224      	lsls	r4, r4, #8
20001830:	4321      	orrs	r1, r4
20001832:	69dc      	ldr	r4, [r3, #28]
20001834:	7824      	ldrb	r4, [r4, #0]
20001836:	40b4      	lsls	r4, r6
20001838:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
2000183a:	5d2c      	ldrb	r4, [r5, r4]
2000183c:	0424      	lsls	r4, r4, #16
2000183e:	4321      	orrs	r1, r4
20001840:	0224      	lsls	r4, r4, #8
20001842:	4321      	orrs	r1, r4
20001844:	c002      	stmia	r0!, {r1}
20001846:	423f      	tst	r7, r7
20001848:	d02c      	beq.n	200018a4 <RenderTilePersp15+0x160>
2000184a:	69dc      	ldr	r4, [r3, #28]
2000184c:	7824      	ldrb	r4, [r4, #0]
2000184e:	40b4      	lsls	r4, r6
20001850:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
20001852:	5d29      	ldrb	r1, [r5, r4]
20001854:	69dc      	ldr	r4, [r3, #28]
20001856:	7824      	ldrb	r4, [r4, #0]
20001858:	40b4      	lsls	r4, r6
2000185a:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
2000185c:	5d2c      	ldrb	r4, [r5, r4]
2000185e:	0224      	lsls	r4, r4, #8
20001860:	4321      	orrs	r1, r4
20001862:	69dc      	ldr	r4, [r3, #28]
20001864:	7824      	ldrb	r4, [r4, #0]
20001866:	40b4      	lsls	r4, r6
20001868:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
2000186a:	5d2c      	ldrb	r4, [r5, r4]
2000186c:	0424      	lsls	r4, r4, #16
2000186e:	4321      	orrs	r1, r4
20001870:	0224      	lsls	r4, r4, #8
20001872:	4321      	orrs	r1, r4
20001874:	69dc      	ldr	r4, [r3, #28]
20001876:	7824      	ldrb	r4, [r4, #0]
20001878:	40b4      	lsls	r4, r6
2000187a:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
2000187c:	5d2a      	ldrb	r2, [r5, r4]
2000187e:	69dc      	ldr	r4, [r3, #28]
20001880:	7824      	ldrb	r4, [r4, #0]
20001882:	40b4      	lsls	r4, r6
20001884:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
20001886:	5d2c      	ldrb	r4, [r5, r4]
20001888:	0224      	lsls	r4, r4, #8
2000188a:	4322      	orrs	r2, r4
2000188c:	69dc      	ldr	r4, [r3, #28]
2000188e:	7824      	ldrb	r4, [r4, #0]
20001890:	40b4      	lsls	r4, r6
20001892:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
20001894:	5d2c      	ldrb	r4, [r5, r4]
20001896:	0424      	lsls	r4, r4, #16
20001898:	4322      	orrs	r2, r4
2000189a:	0224      	lsls	r4, r4, #8
2000189c:	4322      	orrs	r2, r4
2000189e:	c006      	stmia	r0!, {r1, r2}
200018a0:	3f01      	subs	r7, #1
200018a2:	d1d2      	bne.n	2000184a <RenderTilePersp15+0x106>
200018a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
200018a6:	46c0      	nop			; (mov r8, r8)

200018a8 <RenderTilePersp_pSioBase>:
200018a8:	d0000000 	.word	0xd0000000

200018ac <RenderTilePersp_Interp>:
200018ac:	d0000080 	.word	0xd0000080

200018b0 <RenderTilePersp_Ctrl>:
200018b0:	0004000c 	.word	0x0004000c

200018b4 <RenderTilePersp2>:
200018b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
200018b6:	9c06      	ldr	r4, [sp, #24]
200018b8:	4e4e      	ldr	r6, [pc, #312]	; (200019f4 <RenderTilePersp_pSioBase>)
200018ba:	8965      	ldrh	r5, [r4, #10]
200018bc:	7ce1      	ldrb	r1, [r4, #19]
200018be:	b249      	sxtb	r1, r1
200018c0:	0089      	lsls	r1, r1, #2
200018c2:	d107      	bne.n	200018d4 <RenderTilePersp2+0x20>
200018c4:	086d      	lsrs	r5, r5, #1
200018c6:	1b52      	subs	r2, r2, r5
200018c8:	4694      	mov	ip, r2
200018ca:	2501      	movs	r5, #1
200018cc:	6675      	str	r5, [r6, #100]	; 0x64
200018ce:	032d      	lsls	r5, r5, #12
200018d0:	6635      	str	r5, [r6, #96]	; 0x60
200018d2:	e009      	b.n	200018e8 <RenderTilePersp2+0x34>
200018d4:	d502      	bpl.n	200018dc <RenderTilePersp2+0x28>
200018d6:	1aaa      	subs	r2, r5, r2
200018d8:	3a01      	subs	r2, #1
200018da:	4249      	negs	r1, r1
200018dc:	1b57      	subs	r7, r2, r5
200018de:	46bc      	mov	ip, r7
200018e0:	032d      	lsls	r5, r5, #12
200018e2:	6635      	str	r5, [r6, #96]	; 0x60
200018e4:	1852      	adds	r2, r2, r1
200018e6:	6672      	str	r2, [r6, #100]	; 0x64
200018e8:	085d      	lsrs	r5, r3, #1
200018ea:	426d      	negs	r5, r5
200018ec:	46ae      	mov	lr, r5
200018ee:	089f      	lsrs	r7, r3, #2
200018f0:	4b41      	ldr	r3, [pc, #260]	; (200019f8 <RenderTilePersp_Interp>)
200018f2:	68e6      	ldr	r6, [r4, #12]
200018f4:	611e      	str	r6, [r3, #16]
200018f6:	4e41      	ldr	r6, [pc, #260]	; (200019fc <RenderTilePersp_Ctrl>)
200018f8:	7ca1      	ldrb	r1, [r4, #18]
200018fa:	9100      	str	r1, [sp, #0]
200018fc:	1876      	adds	r6, r6, r1
200018fe:	78a2      	ldrb	r2, [r4, #2]
20001900:	1e55      	subs	r5, r2, #1
20001902:	02ad      	lsls	r5, r5, #10
20001904:	432e      	orrs	r6, r5
20001906:	62de      	str	r6, [r3, #44]	; 0x2c
20001908:	1ab6      	subs	r6, r6, r2
2000190a:	0152      	lsls	r2, r2, #5
2000190c:	4316      	orrs	r6, r2
2000190e:	78e2      	ldrb	r2, [r4, #3]
20001910:	0292      	lsls	r2, r2, #10
20001912:	18b6      	adds	r6, r6, r2
20001914:	631e      	str	r6, [r3, #48]	; 0x30
20001916:	6966      	ldr	r6, [r4, #20]
20001918:	651e      	str	r6, [r3, #80]	; 0x50
2000191a:	4e38      	ldr	r6, [pc, #224]	; (200019fc <RenderTilePersp_Ctrl>)
2000191c:	1e4d      	subs	r5, r1, #1
2000191e:	02ad      	lsls	r5, r5, #10
20001920:	432e      	orrs	r6, r5
20001922:	66de      	str	r6, [r3, #108]	; 0x6c
20001924:	1a76      	subs	r6, r6, r1
20001926:	014d      	lsls	r5, r1, #5
20001928:	432e      	orrs	r6, r5
2000192a:	0289      	lsls	r1, r1, #10
2000192c:	1876      	adds	r6, r6, r1
2000192e:	671e      	str	r6, [r3, #112]	; 0x70
20001930:	69a4      	ldr	r4, [r4, #24]
20001932:	4930      	ldr	r1, [pc, #192]	; (200019f4 <RenderTilePersp_pSioBase>)
20001934:	6f09      	ldr	r1, [r1, #112]	; 0x70
20001936:	6825      	ldr	r5, [r4, #0]
20001938:	434d      	muls	r5, r1
2000193a:	12ed      	asrs	r5, r5, #11
2000193c:	609d      	str	r5, [r3, #8]
2000193e:	649d      	str	r5, [r3, #72]	; 0x48
20001940:	106d      	asrs	r5, r5, #1
20001942:	68e6      	ldr	r6, [r4, #12]
20001944:	434e      	muls	r6, r1
20001946:	12f6      	asrs	r6, r6, #11
20001948:	60de      	str	r6, [r3, #12]
2000194a:	64de      	str	r6, [r3, #76]	; 0x4c
2000194c:	1076      	asrs	r6, r6, #1
2000194e:	4672      	mov	r2, lr
20001950:	4355      	muls	r5, r2
20001952:	4372      	muls	r2, r6
20001954:	468e      	mov	lr, r1
20001956:	6866      	ldr	r6, [r4, #4]
20001958:	4371      	muls	r1, r6
2000195a:	1309      	asrs	r1, r1, #12
2000195c:	4666      	mov	r6, ip
2000195e:	4371      	muls	r1, r6
20001960:	186d      	adds	r5, r5, r1
20001962:	68a1      	ldr	r1, [r4, #8]
20001964:	186d      	adds	r5, r5, r1
20001966:	601d      	str	r5, [r3, #0]
20001968:	641d      	str	r5, [r3, #64]	; 0x40
2000196a:	6921      	ldr	r1, [r4, #16]
2000196c:	4675      	mov	r5, lr
2000196e:	4369      	muls	r1, r5
20001970:	1309      	asrs	r1, r1, #12
20001972:	4371      	muls	r1, r6
20001974:	1852      	adds	r2, r2, r1
20001976:	6961      	ldr	r1, [r4, #20]
20001978:	1852      	adds	r2, r2, r1
2000197a:	605a      	str	r2, [r3, #4]
2000197c:	645a      	str	r2, [r3, #68]	; 0x44
2000197e:	9e00      	ldr	r6, [sp, #0]
20001980:	0076      	lsls	r6, r6, #1
20001982:	087f      	lsrs	r7, r7, #1
20001984:	d310      	bcc.n	200019a8 <RenderTilePersp2+0xf4>
20001986:	69dc      	ldr	r4, [r3, #28]
20001988:	7824      	ldrb	r4, [r4, #0]
2000198a:	40b4      	lsls	r4, r6
2000198c:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
2000198e:	5d29      	ldrb	r1, [r5, r4]
20001990:	020c      	lsls	r4, r1, #8
20001992:	4321      	orrs	r1, r4
20001994:	69dc      	ldr	r4, [r3, #28]
20001996:	7824      	ldrb	r4, [r4, #0]
20001998:	40b4      	lsls	r4, r6
2000199a:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
2000199c:	5d2c      	ldrb	r4, [r5, r4]
2000199e:	0424      	lsls	r4, r4, #16
200019a0:	4321      	orrs	r1, r4
200019a2:	0224      	lsls	r4, r4, #8
200019a4:	4321      	orrs	r1, r4
200019a6:	c002      	stmia	r0!, {r1}
200019a8:	423f      	tst	r7, r7
200019aa:	d022      	beq.n	200019f2 <RenderTilePersp2+0x13e>
200019ac:	69dc      	ldr	r4, [r3, #28]
200019ae:	7824      	ldrb	r4, [r4, #0]
200019b0:	40b4      	lsls	r4, r6
200019b2:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
200019b4:	5d29      	ldrb	r1, [r5, r4]
200019b6:	020c      	lsls	r4, r1, #8
200019b8:	4321      	orrs	r1, r4
200019ba:	69dc      	ldr	r4, [r3, #28]
200019bc:	7824      	ldrb	r4, [r4, #0]
200019be:	40b4      	lsls	r4, r6
200019c0:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
200019c2:	5d2c      	ldrb	r4, [r5, r4]
200019c4:	0424      	lsls	r4, r4, #16
200019c6:	4321      	orrs	r1, r4
200019c8:	0224      	lsls	r4, r4, #8
200019ca:	4321      	orrs	r1, r4
200019cc:	69dc      	ldr	r4, [r3, #28]
200019ce:	7824      	ldrb	r4, [r4, #0]
200019d0:	40b4      	lsls	r4, r6
200019d2:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
200019d4:	5d2a      	ldrb	r2, [r5, r4]
200019d6:	0214      	lsls	r4, r2, #8
200019d8:	4322      	orrs	r2, r4
200019da:	69dc      	ldr	r4, [r3, #28]
200019dc:	7824      	ldrb	r4, [r4, #0]
200019de:	40b4      	lsls	r4, r6
200019e0:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
200019e2:	5d2c      	ldrb	r4, [r5, r4]
200019e4:	0424      	lsls	r4, r4, #16
200019e6:	4322      	orrs	r2, r4
200019e8:	0224      	lsls	r4, r4, #8
200019ea:	4322      	orrs	r2, r4
200019ec:	c006      	stmia	r0!, {r1, r2}
200019ee:	3f01      	subs	r7, #1
200019f0:	d1dc      	bne.n	200019ac <RenderTilePersp2+0xf8>
200019f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

200019f4 <RenderTilePersp_pSioBase>:
200019f4:	d0000000 	.word	0xd0000000

200019f8 <RenderTilePersp_Interp>:
200019f8:	d0000080 	.word	0xd0000080

200019fc <RenderTilePersp_Ctrl>:
200019fc:	0004000c 	.word	0x0004000c

20001a00 <RenderTilePersp3>:
20001a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
20001a02:	9c06      	ldr	r4, [sp, #24]
20001a04:	4e48      	ldr	r6, [pc, #288]	; (20001b28 <RenderTilePersp_pSioBase>)
20001a06:	8965      	ldrh	r5, [r4, #10]
20001a08:	7ce1      	ldrb	r1, [r4, #19]
20001a0a:	b249      	sxtb	r1, r1
20001a0c:	0089      	lsls	r1, r1, #2
20001a0e:	d107      	bne.n	20001a20 <RenderTilePersp3+0x20>
20001a10:	086d      	lsrs	r5, r5, #1
20001a12:	1b52      	subs	r2, r2, r5
20001a14:	4694      	mov	ip, r2
20001a16:	2501      	movs	r5, #1
20001a18:	6675      	str	r5, [r6, #100]	; 0x64
20001a1a:	032d      	lsls	r5, r5, #12
20001a1c:	6635      	str	r5, [r6, #96]	; 0x60
20001a1e:	e009      	b.n	20001a34 <RenderTilePersp3+0x34>
20001a20:	d502      	bpl.n	20001a28 <RenderTilePersp3+0x28>
20001a22:	1aaa      	subs	r2, r5, r2
20001a24:	3a01      	subs	r2, #1
20001a26:	4249      	negs	r1, r1
20001a28:	1b57      	subs	r7, r2, r5
20001a2a:	46bc      	mov	ip, r7
20001a2c:	032d      	lsls	r5, r5, #12
20001a2e:	6635      	str	r5, [r6, #96]	; 0x60
20001a30:	1852      	adds	r2, r2, r1
20001a32:	6672      	str	r2, [r6, #100]	; 0x64
20001a34:	085d      	lsrs	r5, r3, #1
20001a36:	426d      	negs	r5, r5
20001a38:	46ae      	mov	lr, r5
20001a3a:	089f      	lsrs	r7, r3, #2
20001a3c:	4b3b      	ldr	r3, [pc, #236]	; (20001b2c <RenderTilePersp_Interp>)
20001a3e:	68e6      	ldr	r6, [r4, #12]
20001a40:	611e      	str	r6, [r3, #16]
20001a42:	4e3b      	ldr	r6, [pc, #236]	; (20001b30 <RenderTilePersp_Ctrl>)
20001a44:	7ca1      	ldrb	r1, [r4, #18]
20001a46:	9100      	str	r1, [sp, #0]
20001a48:	1876      	adds	r6, r6, r1
20001a4a:	78a2      	ldrb	r2, [r4, #2]
20001a4c:	1e55      	subs	r5, r2, #1
20001a4e:	02ad      	lsls	r5, r5, #10
20001a50:	432e      	orrs	r6, r5
20001a52:	62de      	str	r6, [r3, #44]	; 0x2c
20001a54:	1ab6      	subs	r6, r6, r2
20001a56:	0152      	lsls	r2, r2, #5
20001a58:	4316      	orrs	r6, r2
20001a5a:	78e2      	ldrb	r2, [r4, #3]
20001a5c:	0292      	lsls	r2, r2, #10
20001a5e:	18b6      	adds	r6, r6, r2
20001a60:	631e      	str	r6, [r3, #48]	; 0x30
20001a62:	6966      	ldr	r6, [r4, #20]
20001a64:	651e      	str	r6, [r3, #80]	; 0x50
20001a66:	4e32      	ldr	r6, [pc, #200]	; (20001b30 <RenderTilePersp_Ctrl>)
20001a68:	1e4d      	subs	r5, r1, #1
20001a6a:	02ad      	lsls	r5, r5, #10
20001a6c:	432e      	orrs	r6, r5
20001a6e:	66de      	str	r6, [r3, #108]	; 0x6c
20001a70:	1a76      	subs	r6, r6, r1
20001a72:	014d      	lsls	r5, r1, #5
20001a74:	432e      	orrs	r6, r5
20001a76:	0289      	lsls	r1, r1, #10
20001a78:	1876      	adds	r6, r6, r1
20001a7a:	671e      	str	r6, [r3, #112]	; 0x70
20001a7c:	69a4      	ldr	r4, [r4, #24]
20001a7e:	492a      	ldr	r1, [pc, #168]	; (20001b28 <RenderTilePersp_pSioBase>)
20001a80:	6f09      	ldr	r1, [r1, #112]	; 0x70
20001a82:	6825      	ldr	r5, [r4, #0]
20001a84:	434d      	muls	r5, r1
20001a86:	132d      	asrs	r5, r5, #12
20001a88:	006a      	lsls	r2, r5, #1
20001a8a:	1952      	adds	r2, r2, r5
20001a8c:	609a      	str	r2, [r3, #8]
20001a8e:	649a      	str	r2, [r3, #72]	; 0x48
20001a90:	68e6      	ldr	r6, [r4, #12]
20001a92:	434e      	muls	r6, r1
20001a94:	1336      	asrs	r6, r6, #12
20001a96:	0072      	lsls	r2, r6, #1
20001a98:	1992      	adds	r2, r2, r6
20001a9a:	60da      	str	r2, [r3, #12]
20001a9c:	64da      	str	r2, [r3, #76]	; 0x4c
20001a9e:	4672      	mov	r2, lr
20001aa0:	4355      	muls	r5, r2
20001aa2:	4372      	muls	r2, r6
20001aa4:	468e      	mov	lr, r1
20001aa6:	6866      	ldr	r6, [r4, #4]
20001aa8:	4371      	muls	r1, r6
20001aaa:	1309      	asrs	r1, r1, #12
20001aac:	4666      	mov	r6, ip
20001aae:	4371      	muls	r1, r6
20001ab0:	186d      	adds	r5, r5, r1
20001ab2:	68a1      	ldr	r1, [r4, #8]
20001ab4:	186d      	adds	r5, r5, r1
20001ab6:	601d      	str	r5, [r3, #0]
20001ab8:	641d      	str	r5, [r3, #64]	; 0x40
20001aba:	6921      	ldr	r1, [r4, #16]
20001abc:	4675      	mov	r5, lr
20001abe:	4369      	muls	r1, r5
20001ac0:	1309      	asrs	r1, r1, #12
20001ac2:	4371      	muls	r1, r6
20001ac4:	1852      	adds	r2, r2, r1
20001ac6:	6961      	ldr	r1, [r4, #20]
20001ac8:	1852      	adds	r2, r2, r1
20001aca:	605a      	str	r2, [r3, #4]
20001acc:	645a      	str	r2, [r3, #68]	; 0x44
20001ace:	9e00      	ldr	r6, [sp, #0]
20001ad0:	0076      	lsls	r6, r6, #1
20001ad2:	087f      	lsrs	r7, r7, #1
20001ad4:	d309      	bcc.n	20001aea <RenderTilePersp3+0xea>
20001ad6:	69dc      	ldr	r4, [r3, #28]
20001ad8:	7824      	ldrb	r4, [r4, #0]
20001ada:	40b4      	lsls	r4, r6
20001adc:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
20001ade:	5d29      	ldrb	r1, [r5, r4]
20001ae0:	020c      	lsls	r4, r1, #8
20001ae2:	4321      	orrs	r1, r4
20001ae4:	040c      	lsls	r4, r1, #16
20001ae6:	4321      	orrs	r1, r4
20001ae8:	c002      	stmia	r0!, {r1}
20001aea:	423f      	tst	r7, r7
20001aec:	d01b      	beq.n	20001b26 <RenderTilePersp3+0x126>
20001aee:	69dc      	ldr	r4, [r3, #28]
20001af0:	7824      	ldrb	r4, [r4, #0]
20001af2:	40b4      	lsls	r4, r6
20001af4:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
20001af6:	5d29      	ldrb	r1, [r5, r4]
20001af8:	020c      	lsls	r4, r1, #8
20001afa:	4321      	orrs	r1, r4
20001afc:	69dc      	ldr	r4, [r3, #28]
20001afe:	7824      	ldrb	r4, [r4, #0]
20001b00:	40b4      	lsls	r4, r6
20001b02:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
20001b04:	5d2c      	ldrb	r4, [r5, r4]
20001b06:	0424      	lsls	r4, r4, #16
20001b08:	4321      	orrs	r1, r4
20001b0a:	0224      	lsls	r4, r4, #8
20001b0c:	4321      	orrs	r1, r4
20001b0e:	69dc      	ldr	r4, [r3, #28]
20001b10:	7824      	ldrb	r4, [r4, #0]
20001b12:	40b4      	lsls	r4, r6
20001b14:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
20001b16:	5d2a      	ldrb	r2, [r5, r4]
20001b18:	0214      	lsls	r4, r2, #8
20001b1a:	4322      	orrs	r2, r4
20001b1c:	0414      	lsls	r4, r2, #16
20001b1e:	4322      	orrs	r2, r4
20001b20:	c006      	stmia	r0!, {r1, r2}
20001b22:	3f01      	subs	r7, #1
20001b24:	d1e3      	bne.n	20001aee <RenderTilePersp3+0xee>
20001b26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

20001b28 <RenderTilePersp_pSioBase>:
20001b28:	d0000000 	.word	0xd0000000

20001b2c <RenderTilePersp_Interp>:
20001b2c:	d0000080 	.word	0xd0000080

20001b30 <RenderTilePersp_Ctrl>:
20001b30:	0004000c 	.word	0x0004000c

20001b34 <RenderTilePersp4>:
20001b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
20001b36:	9c06      	ldr	r4, [sp, #24]
20001b38:	4e44      	ldr	r6, [pc, #272]	; (20001c4c <RenderTilePersp_pSioBase>)
20001b3a:	8965      	ldrh	r5, [r4, #10]
20001b3c:	7ce1      	ldrb	r1, [r4, #19]
20001b3e:	b249      	sxtb	r1, r1
20001b40:	0089      	lsls	r1, r1, #2
20001b42:	d107      	bne.n	20001b54 <RenderTilePersp4+0x20>
20001b44:	086d      	lsrs	r5, r5, #1
20001b46:	1b52      	subs	r2, r2, r5
20001b48:	4694      	mov	ip, r2
20001b4a:	2501      	movs	r5, #1
20001b4c:	6675      	str	r5, [r6, #100]	; 0x64
20001b4e:	032d      	lsls	r5, r5, #12
20001b50:	6635      	str	r5, [r6, #96]	; 0x60
20001b52:	e009      	b.n	20001b68 <RenderTilePersp4+0x34>
20001b54:	d502      	bpl.n	20001b5c <RenderTilePersp4+0x28>
20001b56:	1aaa      	subs	r2, r5, r2
20001b58:	3a01      	subs	r2, #1
20001b5a:	4249      	negs	r1, r1
20001b5c:	1b57      	subs	r7, r2, r5
20001b5e:	46bc      	mov	ip, r7
20001b60:	032d      	lsls	r5, r5, #12
20001b62:	6635      	str	r5, [r6, #96]	; 0x60
20001b64:	1852      	adds	r2, r2, r1
20001b66:	6672      	str	r2, [r6, #100]	; 0x64
20001b68:	085d      	lsrs	r5, r3, #1
20001b6a:	426d      	negs	r5, r5
20001b6c:	46ae      	mov	lr, r5
20001b6e:	089f      	lsrs	r7, r3, #2
20001b70:	4b37      	ldr	r3, [pc, #220]	; (20001c50 <RenderTilePersp_Interp>)
20001b72:	68e6      	ldr	r6, [r4, #12]
20001b74:	611e      	str	r6, [r3, #16]
20001b76:	4e37      	ldr	r6, [pc, #220]	; (20001c54 <RenderTilePersp_Ctrl>)
20001b78:	7ca1      	ldrb	r1, [r4, #18]
20001b7a:	9100      	str	r1, [sp, #0]
20001b7c:	1876      	adds	r6, r6, r1
20001b7e:	78a2      	ldrb	r2, [r4, #2]
20001b80:	1e55      	subs	r5, r2, #1
20001b82:	02ad      	lsls	r5, r5, #10
20001b84:	432e      	orrs	r6, r5
20001b86:	62de      	str	r6, [r3, #44]	; 0x2c
20001b88:	1ab6      	subs	r6, r6, r2
20001b8a:	0152      	lsls	r2, r2, #5
20001b8c:	4316      	orrs	r6, r2
20001b8e:	78e2      	ldrb	r2, [r4, #3]
20001b90:	0292      	lsls	r2, r2, #10
20001b92:	18b6      	adds	r6, r6, r2
20001b94:	631e      	str	r6, [r3, #48]	; 0x30
20001b96:	6966      	ldr	r6, [r4, #20]
20001b98:	651e      	str	r6, [r3, #80]	; 0x50
20001b9a:	4e2e      	ldr	r6, [pc, #184]	; (20001c54 <RenderTilePersp_Ctrl>)
20001b9c:	1e4d      	subs	r5, r1, #1
20001b9e:	02ad      	lsls	r5, r5, #10
20001ba0:	432e      	orrs	r6, r5
20001ba2:	66de      	str	r6, [r3, #108]	; 0x6c
20001ba4:	1a76      	subs	r6, r6, r1
20001ba6:	014d      	lsls	r5, r1, #5
20001ba8:	432e      	orrs	r6, r5
20001baa:	0289      	lsls	r1, r1, #10
20001bac:	1876      	adds	r6, r6, r1
20001bae:	671e      	str	r6, [r3, #112]	; 0x70
20001bb0:	69a4      	ldr	r4, [r4, #24]
20001bb2:	4926      	ldr	r1, [pc, #152]	; (20001c4c <RenderTilePersp_pSioBase>)
20001bb4:	6f09      	ldr	r1, [r1, #112]	; 0x70
20001bb6:	6825      	ldr	r5, [r4, #0]
20001bb8:	434d      	muls	r5, r1
20001bba:	12ad      	asrs	r5, r5, #10
20001bbc:	609d      	str	r5, [r3, #8]
20001bbe:	649d      	str	r5, [r3, #72]	; 0x48
20001bc0:	10ad      	asrs	r5, r5, #2
20001bc2:	68e6      	ldr	r6, [r4, #12]
20001bc4:	434e      	muls	r6, r1
20001bc6:	12b6      	asrs	r6, r6, #10
20001bc8:	60de      	str	r6, [r3, #12]
20001bca:	64de      	str	r6, [r3, #76]	; 0x4c
20001bcc:	10b6      	asrs	r6, r6, #2
20001bce:	4672      	mov	r2, lr
20001bd0:	4355      	muls	r5, r2
20001bd2:	4372      	muls	r2, r6
20001bd4:	468e      	mov	lr, r1
20001bd6:	6866      	ldr	r6, [r4, #4]
20001bd8:	4371      	muls	r1, r6
20001bda:	1309      	asrs	r1, r1, #12
20001bdc:	4666      	mov	r6, ip
20001bde:	4371      	muls	r1, r6
20001be0:	186d      	adds	r5, r5, r1
20001be2:	68a1      	ldr	r1, [r4, #8]
20001be4:	186d      	adds	r5, r5, r1
20001be6:	601d      	str	r5, [r3, #0]
20001be8:	641d      	str	r5, [r3, #64]	; 0x40
20001bea:	6921      	ldr	r1, [r4, #16]
20001bec:	4675      	mov	r5, lr
20001bee:	4369      	muls	r1, r5
20001bf0:	1309      	asrs	r1, r1, #12
20001bf2:	4371      	muls	r1, r6
20001bf4:	1852      	adds	r2, r2, r1
20001bf6:	6961      	ldr	r1, [r4, #20]
20001bf8:	1852      	adds	r2, r2, r1
20001bfa:	605a      	str	r2, [r3, #4]
20001bfc:	645a      	str	r2, [r3, #68]	; 0x44
20001bfe:	9e00      	ldr	r6, [sp, #0]
20001c00:	0076      	lsls	r6, r6, #1
20001c02:	087f      	lsrs	r7, r7, #1
20001c04:	d309      	bcc.n	20001c1a <RenderTilePersp4+0xe6>
20001c06:	69dc      	ldr	r4, [r3, #28]
20001c08:	7824      	ldrb	r4, [r4, #0]
20001c0a:	40b4      	lsls	r4, r6
20001c0c:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
20001c0e:	5d29      	ldrb	r1, [r5, r4]
20001c10:	020c      	lsls	r4, r1, #8
20001c12:	4321      	orrs	r1, r4
20001c14:	040c      	lsls	r4, r1, #16
20001c16:	4321      	orrs	r1, r4
20001c18:	c002      	stmia	r0!, {r1}
20001c1a:	423f      	tst	r7, r7
20001c1c:	d014      	beq.n	20001c48 <RenderTilePersp4+0x114>
20001c1e:	69dc      	ldr	r4, [r3, #28]
20001c20:	7824      	ldrb	r4, [r4, #0]
20001c22:	40b4      	lsls	r4, r6
20001c24:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
20001c26:	5d29      	ldrb	r1, [r5, r4]
20001c28:	020c      	lsls	r4, r1, #8
20001c2a:	4321      	orrs	r1, r4
20001c2c:	040c      	lsls	r4, r1, #16
20001c2e:	4321      	orrs	r1, r4
20001c30:	69dc      	ldr	r4, [r3, #28]
20001c32:	7824      	ldrb	r4, [r4, #0]
20001c34:	40b4      	lsls	r4, r6
20001c36:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
20001c38:	5d2a      	ldrb	r2, [r5, r4]
20001c3a:	0214      	lsls	r4, r2, #8
20001c3c:	4322      	orrs	r2, r4
20001c3e:	0414      	lsls	r4, r2, #16
20001c40:	4322      	orrs	r2, r4
20001c42:	c006      	stmia	r0!, {r1, r2}
20001c44:	3f01      	subs	r7, #1
20001c46:	d1ea      	bne.n	20001c1e <RenderTilePersp4+0xea>
20001c48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
20001c4a:	46c0      	nop			; (mov r8, r8)

20001c4c <RenderTilePersp_pSioBase>:
20001c4c:	d0000000 	.word	0xd0000000

20001c50 <RenderTilePersp_Interp>:
20001c50:	d0000080 	.word	0xd0000080

20001c54 <RenderTilePersp_Ctrl>:
20001c54:	0004000c 	.word	0x0004000c

20001c58 <BlitKey>:
20001c58:	b510      	push	{r4, lr}
20001c5a:	4686      	mov	lr, r0
20001c5c:	08d4      	lsrs	r4, r2, #3
20001c5e:	00e4      	lsls	r4, r4, #3
20001c60:	4062      	eors	r2, r4
20001c62:	4420      	add	r0, r4
20001c64:	4421      	add	r1, r4
20001c66:	a413      	add	r4, pc, #76	; (adr r4, 20001cb4 <BlitKey+0x5c>)
20001c68:	00d2      	lsls	r2, r2, #3
20001c6a:	1aa4      	subs	r4, r4, r2
20001c6c:	3401      	adds	r4, #1
20001c6e:	4720      	bx	r4
20001c70:	3808      	subs	r0, #8
20001c72:	3908      	subs	r1, #8
20001c74:	79cc      	ldrb	r4, [r1, #7]
20001c76:	429c      	cmp	r4, r3
20001c78:	d000      	beq.n	20001c7c <BlitKey+0x24>
20001c7a:	71c4      	strb	r4, [r0, #7]
20001c7c:	798c      	ldrb	r4, [r1, #6]
20001c7e:	429c      	cmp	r4, r3
20001c80:	d000      	beq.n	20001c84 <BlitKey+0x2c>
20001c82:	7184      	strb	r4, [r0, #6]
20001c84:	794c      	ldrb	r4, [r1, #5]
20001c86:	429c      	cmp	r4, r3
20001c88:	d000      	beq.n	20001c8c <BlitKey+0x34>
20001c8a:	7144      	strb	r4, [r0, #5]
20001c8c:	790c      	ldrb	r4, [r1, #4]
20001c8e:	429c      	cmp	r4, r3
20001c90:	d000      	beq.n	20001c94 <BlitKey+0x3c>
20001c92:	7104      	strb	r4, [r0, #4]
20001c94:	78cc      	ldrb	r4, [r1, #3]
20001c96:	429c      	cmp	r4, r3
20001c98:	d000      	beq.n	20001c9c <BlitKey+0x44>
20001c9a:	70c4      	strb	r4, [r0, #3]
20001c9c:	788c      	ldrb	r4, [r1, #2]
20001c9e:	429c      	cmp	r4, r3
20001ca0:	d000      	beq.n	20001ca4 <BlitKey+0x4c>
20001ca2:	7084      	strb	r4, [r0, #2]
20001ca4:	784c      	ldrb	r4, [r1, #1]
20001ca6:	429c      	cmp	r4, r3
20001ca8:	d000      	beq.n	20001cac <BlitKey+0x54>
20001caa:	7044      	strb	r4, [r0, #1]
20001cac:	780c      	ldrb	r4, [r1, #0]
20001cae:	429c      	cmp	r4, r3
20001cb0:	d000      	beq.n	20001cb4 <BlitKey+0x5c>
20001cb2:	7004      	strb	r4, [r0, #0]
20001cb4:	4570      	cmp	r0, lr
20001cb6:	d8db      	bhi.n	20001c70 <BlitKey+0x18>
20001cb8:	bd10      	pop	{r4, pc}
20001cba:	46c0      	nop			; (mov r8, r8)

20001cbc <Render>:
20001cbc:	b5f0      	push	{r4, r5, r6, r7, lr}
20001cbe:	b085      	sub	sp, #20
20001cc0:	9001      	str	r0, [sp, #4]
20001cc2:	9102      	str	r1, [sp, #8]
20001cc4:	9304      	str	r3, [sp, #16]
20001cc6:	4c31      	ldr	r4, [pc, #196]	; (20001d8c <Render_pScreenAddr>)
20001cc8:	6824      	ldr	r4, [r4, #0]
20001cca:	2c00      	cmp	r4, #0
20001ccc:	d055      	beq.n	20001d7a <Render_Clear>
20001cce:	8825      	ldrh	r5, [r4, #0]
20001cd0:	422d      	tst	r5, r5
20001cd2:	d052      	beq.n	20001d7a <Render_Clear>
20001cd4:	3404      	adds	r4, #4

20001cd6 <Render_StripLoop>:
20001cd6:	8823      	ldrh	r3, [r4, #0]
20001cd8:	429a      	cmp	r2, r3
20001cda:	d304      	bcc.n	20001ce6 <Render_StripOK>
20001cdc:	1ad2      	subs	r2, r2, r3
20001cde:	34e4      	adds	r4, #228	; 0xe4
20001ce0:	3d01      	subs	r5, #1
20001ce2:	d1f8      	bne.n	20001cd6 <Render_StripLoop>
20001ce4:	e049      	b.n	20001d7a <Render_Clear>

20001ce6 <Render_StripOK>:
20001ce6:	9203      	str	r2, [sp, #12]
20001ce8:	8865      	ldrh	r5, [r4, #2]
20001cea:	422d      	tst	r5, r5
20001cec:	d045      	beq.n	20001d7a <Render_Clear>
20001cee:	3404      	adds	r4, #4

20001cf0 <Render_SegmLoop>:
20001cf0:	9a04      	ldr	r2, [sp, #16]
20001cf2:	4212      	tst	r2, r2
20001cf4:	d041      	beq.n	20001d7a <Render_Clear>
20001cf6:	8823      	ldrh	r3, [r4, #0]
20001cf8:	4293      	cmp	r3, r2
20001cfa:	d300      	bcc.n	20001cfe <Render_SegmLoop+0xe>
20001cfc:	4613      	mov	r3, r2
20001cfe:	421b      	tst	r3, r3
20001d00:	d038      	beq.n	20001d74 <Render_SegmNext>
20001d02:	1ad2      	subs	r2, r2, r3
20001d04:	9204      	str	r2, [sp, #16]
20001d06:	88e2      	ldrh	r2, [r4, #6]
20001d08:	b212      	sxth	r2, r2
20001d0a:	9903      	ldr	r1, [sp, #12]
20001d0c:	440a      	add	r2, r1
20001d0e:	7c61      	ldrb	r1, [r4, #17]
20001d10:	4209      	tst	r1, r1
20001d12:	d000      	beq.n	20001d16 <Render_SegmLoop+0x26>
20001d14:	1052      	asrs	r2, r2, #1
20001d16:	8961      	ldrh	r1, [r4, #10]
20001d18:	1a52      	subs	r2, r2, r1
20001d1a:	d5fd      	bpl.n	20001d18 <Render_SegmLoop+0x28>
20001d1c:	1852      	adds	r2, r2, r1
20001d1e:	d4fd      	bmi.n	20001d1c <Render_SegmLoop+0x2c>
20001d20:	88a1      	ldrh	r1, [r4, #4]
20001d22:	b209      	sxth	r1, r1
20001d24:	8920      	ldrh	r0, [r4, #8]
20001d26:	1a09      	subs	r1, r1, r0
20001d28:	d5fd      	bpl.n	20001d26 <Render_SegmLoop+0x36>
20001d2a:	1809      	adds	r1, r1, r0
20001d2c:	d4fd      	bmi.n	20001d2a <Render_SegmLoop+0x3a>
20001d2e:	7c20      	ldrb	r0, [r4, #16]
20001d30:	4200      	tst	r0, r0
20001d32:	d10d      	bne.n	20001d50 <Render_SegmLoop+0x60>
20001d34:	0852      	lsrs	r2, r2, #1
20001d36:	6961      	ldr	r1, [r4, #20]
20001d38:	d300      	bcc.n	20001d3c <Render_SegmLoop+0x4c>
20001d3a:	69a1      	ldr	r1, [r4, #24]
20001d3c:	089a      	lsrs	r2, r3, #2
20001d3e:	9e01      	ldr	r6, [sp, #4]
20001d40:	c604      	stmia	r6!, {r2}
20001d42:	9802      	ldr	r0, [sp, #8]
20001d44:	c601      	stmia	r6!, {r0}
20001d46:	9601      	str	r6, [sp, #4]
20001d48:	f7fe fae2 	bl	20000310 <MemSet4>
20001d4c:	9002      	str	r0, [sp, #8]
20001d4e:	e011      	b.n	20001d74 <Render_SegmNext>
20001d50:	9400      	str	r4, [sp, #0]
20001d52:	a710      	add	r7, pc, #64	; (adr r7, 20001d94 <Render_FncAddr>)
20001d54:	0086      	lsls	r6, r0, #2
20001d56:	59bf      	ldr	r7, [r7, r6]
20001d58:	2806      	cmp	r0, #6
20001d5a:	d803      	bhi.n	20001d64 <Render_SegmLoop+0x74>
20001d5c:	9801      	ldr	r0, [sp, #4]
20001d5e:	47b8      	blx	r7
20001d60:	9001      	str	r0, [sp, #4]
20001d62:	e007      	b.n	20001d74 <Render_SegmNext>
20001d64:	0898      	lsrs	r0, r3, #2
20001d66:	9e01      	ldr	r6, [sp, #4]
20001d68:	c601      	stmia	r6!, {r0}
20001d6a:	9802      	ldr	r0, [sp, #8]
20001d6c:	c601      	stmia	r6!, {r0}
20001d6e:	9601      	str	r6, [sp, #4]
20001d70:	47b8      	blx	r7
20001d72:	9002      	str	r0, [sp, #8]

20001d74 <Render_SegmNext>:
20001d74:	341c      	adds	r4, #28
20001d76:	3d01      	subs	r5, #1
20001d78:	d1ba      	bne.n	20001cf0 <Render_SegmLoop>

20001d7a <Render_Clear>:
20001d7a:	9801      	ldr	r0, [sp, #4]
20001d7c:	9904      	ldr	r1, [sp, #16]
20001d7e:	0889      	lsrs	r1, r1, #2
20001d80:	d001      	beq.n	20001d86 <Render_Clear+0xc>
20001d82:	4a03      	ldr	r2, [pc, #12]	; (20001d90 <Render_LineBuf0Addr>)
20001d84:	c006      	stmia	r0!, {r1, r2}
20001d86:	b005      	add	sp, #20
20001d88:	bdf0      	pop	{r4, r5, r6, r7, pc}
20001d8a:	46c0      	nop			; (mov r8, r8)

20001d8c <Render_pScreenAddr>:
20001d8c:	2000278c 	.word	0x2000278c

20001d90 <Render_LineBuf0Addr>:
20001d90:	20004af0 	.word	0x20004af0

20001d94 <Render_FncAddr>:
20001d94:	20000311 	.word	0x20000311
20001d98:	20000929 	.word	0x20000929
20001d9c:	2000143d 	.word	0x2000143d
20001da0:	20001505 	.word	0x20001505
20001da4:	20001399 	.word	0x20001399
20001da8:	20000923 	.word	0x20000923
20001dac:	20000925 	.word	0x20000925
20001db0:	2000089d 	.word	0x2000089d
20001db4:	20000839 	.word	0x20000839
20001db8:	2000077d 	.word	0x2000077d
20001dbc:	20000e7d 	.word	0x20000e7d
20001dc0:	200000c1 	.word	0x200000c1
20001dc4:	20000689 	.word	0x20000689
20001dc8:	20000345 	.word	0x20000345
20001dcc:	20000b2d 	.word	0x20000b2d
20001dd0:	20000451 	.word	0x20000451
20001dd4:	20000c25 	.word	0x20000c25
20001dd8:	20000d95 	.word	0x20000d95
20001ddc:	20000f59 	.word	0x20000f59
20001de0:	20001059 	.word	0x20001059
20001de4:	200012e5 	.word	0x200012e5
20001de8:	200001f5 	.word	0x200001f5
20001dec:	2000095d 	.word	0x2000095d
20001df0:	20000a31 	.word	0x20000a31
20001df4:	200015c1 	.word	0x200015c1
20001df8:	20001745 	.word	0x20001745
20001dfc:	200018b5 	.word	0x200018b5
20001e00:	20001a01 	.word	0x20001a01
20001e04:	20001b35 	.word	0x20001b35

20001e08 <flash_init_boot2_copyout>:
    if (boot2_copyout_valid)
20001e08:	4808      	ldr	r0, [pc, #32]	; (20001e2c <flash_init_boot2_copyout+0x24>)
static void __no_inline_not_in_flash_func(flash_init_boot2_copyout)() {
20001e0a:	b510      	push	{r4, lr}
    if (boot2_copyout_valid)
20001e0c:	7803      	ldrb	r3, [r0, #0]
20001e0e:	2b00      	cmp	r3, #0
20001e10:	d10a      	bne.n	20001e28 <flash_init_boot2_copyout+0x20>
20001e12:	2380      	movs	r3, #128	; 0x80
20001e14:	4906      	ldr	r1, [pc, #24]	; (20001e30 <flash_init_boot2_copyout+0x28>)
    for (int i = 0; i < BOOT2_SIZE_WORDS; ++i)
20001e16:	4a07      	ldr	r2, [pc, #28]	; (20001e34 <flash_init_boot2_copyout+0x2c>)
20001e18:	055b      	lsls	r3, r3, #21
        boot2_copyout[i] = ((uint32_t *)XIP_BASE)[i];
20001e1a:	681c      	ldr	r4, [r3, #0]
20001e1c:	50cc      	str	r4, [r1, r3]
    for (int i = 0; i < BOOT2_SIZE_WORDS; ++i)
20001e1e:	3304      	adds	r3, #4
20001e20:	4293      	cmp	r3, r2
20001e22:	d1fa      	bne.n	20001e1a <flash_init_boot2_copyout+0x12>
    boot2_copyout_valid = true;
20001e24:	2301      	movs	r3, #1
20001e26:	7003      	strb	r3, [r0, #0]
}
20001e28:	bd10      	pop	{r4, pc}
20001e2a:	46c0      	nop			; (mov r8, r8)
20001e2c:	20012774 	.word	0x20012774
20001e30:	10011f40 	.word	0x10011f40
20001e34:	10000100 	.word	0x10000100

20001e38 <flash_enable_xip_via_boot2>:
static void __no_inline_not_in_flash_func(flash_enable_xip_via_boot2)() {
20001e38:	b510      	push	{r4, lr}
    ((void (*)(void))boot2_copyout+1)();
20001e3a:	4b02      	ldr	r3, [pc, #8]	; (20001e44 <flash_enable_xip_via_boot2+0xc>)
20001e3c:	3301      	adds	r3, #1
20001e3e:	4798      	blx	r3
}
20001e40:	bd10      	pop	{r4, pc}
20001e42:	46c0      	nop			; (mov r8, r8)
20001e44:	20011f40 	.word	0x20011f40

20001e48 <flash_cs_force.constprop.0>:
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
20001e48:	4b03      	ldr	r3, [pc, #12]	; (20001e58 <flash_cs_force.constprop.0+0x10>)
20001e4a:	681a      	ldr	r2, [r3, #0]
20001e4c:	23c0      	movs	r3, #192	; 0xc0
20001e4e:	009b      	lsls	r3, r3, #2
20001e50:	4393      	bics	r3, r2
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
20001e52:	4a02      	ldr	r2, [pc, #8]	; (20001e5c <flash_cs_force.constprop.0+0x14>)
20001e54:	6013      	str	r3, [r2, #0]
}
20001e56:	4770      	bx	lr
20001e58:	4001800c 	.word	0x4001800c
20001e5c:	4001900c 	.word	0x4001900c

20001e60 <flash_cs_force.constprop.1>:
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
20001e60:	4b05      	ldr	r3, [pc, #20]	; (20001e78 <flash_cs_force.constprop.1+0x18>)
20001e62:	681a      	ldr	r2, [r3, #0]
20001e64:	2380      	movs	r3, #128	; 0x80
20001e66:	009b      	lsls	r3, r3, #2
20001e68:	4053      	eors	r3, r2
20001e6a:	22c0      	movs	r2, #192	; 0xc0
20001e6c:	0092      	lsls	r2, r2, #2
20001e6e:	4013      	ands	r3, r2
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
20001e70:	4a02      	ldr	r2, [pc, #8]	; (20001e7c <flash_cs_force.constprop.1+0x1c>)
20001e72:	6013      	str	r3, [r2, #0]
20001e74:	4770      	bx	lr
20001e76:	46c0      	nop			; (mov r8, r8)
20001e78:	4001800c 	.word	0x4001800c
20001e7c:	4001900c 	.word	0x4001900c

20001e80 <flash_do_cmd.constprop.0>:
static void __no_inline_not_in_flash_func(flash_do_cmd)(const uint8_t *txbuf, uint8_t *rxbuf, size_t count) {
20001e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
20001e82:	46ce      	mov	lr, r9
20001e84:	4647      	mov	r7, r8
20001e86:	4681      	mov	r9, r0
20001e88:	b580      	push	{r7, lr}
    void (*connect_internal_flash)(void) = (void(*)(void))rom_func_lookup(rom_table_code('I', 'F'));
20001e8a:	4823      	ldr	r0, [pc, #140]	; (20001f18 <flash_do_cmd.constprop.0+0x98>)
static void __no_inline_not_in_flash_func(flash_do_cmd)(const uint8_t *txbuf, uint8_t *rxbuf, size_t count) {
20001e8c:	000e      	movs	r6, r1
    void (*connect_internal_flash)(void) = (void(*)(void))rom_func_lookup(rom_table_code('I', 'F'));
20001e8e:	f000 fbef 	bl	20002670 <__rom_func_lookup_veneer>
20001e92:	0005      	movs	r5, r0
    void (*flash_exit_xip)(void) = (void(*)(void))rom_func_lookup(rom_table_code('E', 'X'));
20001e94:	4821      	ldr	r0, [pc, #132]	; (20001f1c <flash_do_cmd.constprop.0+0x9c>)
20001e96:	f000 fbeb 	bl	20002670 <__rom_func_lookup_veneer>
20001e9a:	0004      	movs	r4, r0
    void (*flash_flush_cache)(void) = (void(*)(void))rom_func_lookup(rom_table_code('F', 'C'));
20001e9c:	4820      	ldr	r0, [pc, #128]	; (20001f20 <flash_do_cmd.constprop.0+0xa0>)
20001e9e:	f000 fbe7 	bl	20002670 <__rom_func_lookup_veneer>
20001ea2:	4680      	mov	r8, r0
    flash_init_boot2_copyout();
20001ea4:	f7ff ffb0 	bl	20001e08 <flash_init_boot2_copyout>
    connect_internal_flash();
20001ea8:	47a8      	blx	r5
    flash_exit_xip();
20001eaa:	47a0      	blx	r4
    flash_cs_force(0);
20001eac:	f7ff ffd8 	bl	20001e60 <flash_cs_force.constprop.1>
        uint32_t flags = ssi_hw->sr;
20001eb0:	21c0      	movs	r1, #192	; 0xc0
    size_t rx_remaining = count;
20001eb2:	240d      	movs	r4, #13
    size_t tx_remaining = count;
20001eb4:	220d      	movs	r2, #13
        bool can_get = !!(flags & SSI_SR_RFNE_BITS);
20001eb6:	2708      	movs	r7, #8
        bool can_put = !!(flags & SSI_SR_TFNF_BITS);
20001eb8:	2002      	movs	r0, #2
        uint32_t flags = ssi_hw->sr;
20001eba:	0549      	lsls	r1, r1, #21
        bool can_get = !!(flags & SSI_SR_RFNE_BITS);
20001ebc:	003d      	movs	r5, r7
        uint32_t flags = ssi_hw->sr;
20001ebe:	6a8b      	ldr	r3, [r1, #40]	; 0x28
        bool can_get = !!(flags & SSI_SR_RFNE_BITS);
20001ec0:	401d      	ands	r5, r3
        if (can_put && tx_remaining && rx_remaining - tx_remaining < max_in_flight) {
20001ec2:	4218      	tst	r0, r3
20001ec4:	d00b      	beq.n	20001ede <flash_do_cmd.constprop.0+0x5e>
20001ec6:	2a00      	cmp	r2, #0
20001ec8:	d009      	beq.n	20001ede <flash_do_cmd.constprop.0+0x5e>
20001eca:	1aa3      	subs	r3, r4, r2
20001ecc:	2b0d      	cmp	r3, #13
20001ece:	d81e      	bhi.n	20001f0e <flash_do_cmd.constprop.0+0x8e>
            ssi_hw->dr0 = *txbuf++;
20001ed0:	464b      	mov	r3, r9
20001ed2:	781b      	ldrb	r3, [r3, #0]
            --tx_remaining;
20001ed4:	3a01      	subs	r2, #1
            ssi_hw->dr0 = *txbuf++;
20001ed6:	660b      	str	r3, [r1, #96]	; 0x60
20001ed8:	2301      	movs	r3, #1
20001eda:	469c      	mov	ip, r3
20001edc:	44e1      	add	r9, ip
        if (can_get && rx_remaining) {
20001ede:	0013      	movs	r3, r2
20001ee0:	2d00      	cmp	r5, #0
20001ee2:	d10b      	bne.n	20001efc <flash_do_cmd.constprop.0+0x7c>
    while (tx_remaining || rx_remaining) {
20001ee4:	4323      	orrs	r3, r4
20001ee6:	2b00      	cmp	r3, #0
20001ee8:	d1e8      	bne.n	20001ebc <flash_do_cmd.constprop.0+0x3c>
    flash_cs_force(1);
20001eea:	f7ff ffad 	bl	20001e48 <flash_cs_force.constprop.0>
    flash_flush_cache();
20001eee:	47c0      	blx	r8
    flash_enable_xip_via_boot2();
20001ef0:	f7ff ffa2 	bl	20001e38 <flash_enable_xip_via_boot2>
}
20001ef4:	bcc0      	pop	{r6, r7}
20001ef6:	46b9      	mov	r9, r7
20001ef8:	46b0      	mov	r8, r6
20001efa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (can_get && rx_remaining) {
20001efc:	2c00      	cmp	r4, #0
20001efe:	d0f2      	beq.n	20001ee6 <flash_do_cmd.constprop.0+0x66>
            *rxbuf++ = ssi_hw->dr0;
20001f00:	6e0b      	ldr	r3, [r1, #96]	; 0x60
            --rx_remaining;
20001f02:	3c01      	subs	r4, #1
            *rxbuf++ = ssi_hw->dr0;
20001f04:	7033      	strb	r3, [r6, #0]
    while (tx_remaining || rx_remaining) {
20001f06:	0023      	movs	r3, r4
            *rxbuf++ = ssi_hw->dr0;
20001f08:	3601      	adds	r6, #1
    while (tx_remaining || rx_remaining) {
20001f0a:	4313      	orrs	r3, r2
20001f0c:	e7eb      	b.n	20001ee6 <flash_do_cmd.constprop.0+0x66>
        if (can_get && rx_remaining) {
20001f0e:	2d00      	cmp	r5, #0
20001f10:	d0d4      	beq.n	20001ebc <flash_do_cmd.constprop.0+0x3c>
20001f12:	2c00      	cmp	r4, #0
20001f14:	d0d2      	beq.n	20001ebc <flash_do_cmd.constprop.0+0x3c>
20001f16:	e7f3      	b.n	20001f00 <flash_do_cmd.constprop.0+0x80>
20001f18:	00004649 	.word	0x00004649
20001f1c:	00005845 	.word	0x00005845
20001f20:	00004346 	.word	0x00004346

20001f24 <mutex_enter_blocking>:

void __time_critical_func(mutex_enter_blocking)(mutex_t *mtx) {
20001f24:	b510      	push	{r4, lr}
    assert(mtx->core.spin_lock);
    bool block = true;
    do {
        uint32_t save = spin_lock_blocking(mtx->core.spin_lock);
20001f26:	6802      	ldr	r2, [r0, #0]
    *lock = 0;
20001f28:	2400      	movs	r4, #0
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
20001f2a:	f3ef 8110 	mrs	r1, PRIMASK
    __asm volatile ("cpsid i");
20001f2e:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
20001f30:	6813      	ldr	r3, [r2, #0]
20001f32:	2b00      	cmp	r3, #0
20001f34:	d0fc      	beq.n	20001f30 <mutex_enter_blocking+0xc>
    __asm volatile ("dmb");
20001f36:	f3bf 8f5f 	dmb	sy
        if (mtx->owner < 0) {
20001f3a:	7903      	ldrb	r3, [r0, #4]
20001f3c:	2b7f      	cmp	r3, #127	; 0x7f
20001f3e:	d80b      	bhi.n	20001f58 <mutex_enter_blocking+0x34>
            mtx->owner = get_core_num();
            block = false;
        }
        spin_unlock(mtx->core.spin_lock, save);
20001f40:	6803      	ldr	r3, [r0, #0]
20001f42:	f3bf 8f5f 	dmb	sy
    *lock = 0;
20001f46:	601c      	str	r4, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
20001f48:	f381 8810 	msr	PRIMASK, r1
    __asm volatile ("wfe");
20001f4c:	bf20      	wfe
        uint32_t save = spin_lock_blocking(mtx->core.spin_lock);
20001f4e:	6802      	ldr	r2, [r0, #0]
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
20001f50:	f3ef 8110 	mrs	r1, PRIMASK
    __asm volatile ("cpsid i");
20001f54:	b672      	cpsid	i
inline static void spin_lock_unsafe_blocking(spin_lock_t *lock) {
20001f56:	e7eb      	b.n	20001f30 <mutex_enter_blocking+0xc>
    return (*(uint32_t *) (SIO_BASE + SIO_CPUID_OFFSET));
20001f58:	23d0      	movs	r3, #208	; 0xd0
20001f5a:	061b      	lsls	r3, r3, #24
            mtx->owner = get_core_num();
20001f5c:	681b      	ldr	r3, [r3, #0]
20001f5e:	7103      	strb	r3, [r0, #4]
        spin_unlock(mtx->core.spin_lock, save);
20001f60:	6803      	ldr	r3, [r0, #0]
    __asm volatile ("dmb");
20001f62:	f3bf 8f5f 	dmb	sy
    *lock = 0;
20001f66:	2200      	movs	r2, #0
20001f68:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
20001f6a:	f381 8810 	msr	PRIMASK, r1
        if (block) {
            __wfe();
        }
    } while (block);
}
20001f6e:	bd10      	pop	{r4, pc}

20001f70 <mutex_try_enter>:

bool __time_critical_func(mutex_try_enter)(mutex_t *mtx, uint32_t *owner_out) {
20001f70:	0003      	movs	r3, r0
    bool entered;
    uint32_t save = spin_lock_blocking(mtx->core.spin_lock);
20001f72:	6800      	ldr	r0, [r0, #0]
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
20001f74:	f3ef 8c10 	mrs	ip, PRIMASK
    __asm volatile ("cpsid i");
20001f78:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
20001f7a:	6802      	ldr	r2, [r0, #0]
20001f7c:	2a00      	cmp	r2, #0
20001f7e:	d0fc      	beq.n	20001f7a <mutex_try_enter+0xa>
    __asm volatile ("dmb");
20001f80:	f3bf 8f5f 	dmb	sy
    if (mtx->owner < 0) {
20001f84:	2204      	movs	r2, #4
20001f86:	569a      	ldrsb	r2, [r3, r2]
20001f88:	2a00      	cmp	r2, #0
20001f8a:	db0b      	blt.n	20001fa4 <mutex_try_enter+0x34>
        mtx->owner = get_core_num();
        entered = true;
    } else {
        if (owner_out) *owner_out = mtx->owner;
20001f8c:	2900      	cmp	r1, #0
20001f8e:	d00f      	beq.n	20001fb0 <mutex_try_enter+0x40>
        entered = false;
20001f90:	2000      	movs	r0, #0
        if (owner_out) *owner_out = mtx->owner;
20001f92:	600a      	str	r2, [r1, #0]
    }
    spin_unlock(mtx->core.spin_lock, save);
20001f94:	681b      	ldr	r3, [r3, #0]
20001f96:	f3bf 8f5f 	dmb	sy
    *lock = 0;
20001f9a:	2200      	movs	r2, #0
20001f9c:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
20001f9e:	f38c 8810 	msr	PRIMASK, ip
    return entered;
}
20001fa2:	4770      	bx	lr
    return (*(uint32_t *) (SIO_BASE + SIO_CPUID_OFFSET));
20001fa4:	22d0      	movs	r2, #208	; 0xd0
20001fa6:	0612      	lsls	r2, r2, #24
        mtx->owner = get_core_num();
20001fa8:	6812      	ldr	r2, [r2, #0]
        entered = true;
20001faa:	2001      	movs	r0, #1
        mtx->owner = get_core_num();
20001fac:	711a      	strb	r2, [r3, #4]
        entered = true;
20001fae:	e7f1      	b.n	20001f94 <mutex_try_enter+0x24>
        entered = false;
20001fb0:	2000      	movs	r0, #0
20001fb2:	e7ef      	b.n	20001f94 <mutex_try_enter+0x24>

20001fb4 <mutex_enter_timeout_ms>:

bool __time_critical_func(mutex_enter_timeout_ms)(mutex_t *mtx, uint32_t timeout_ms) {
20001fb4:	b5f0      	push	{r4, r5, r6, r7, lr}
20001fb6:	46c6      	mov	lr, r8
20001fb8:	b500      	push	{lr}
20001fba:	000c      	movs	r4, r1
20001fbc:	4680      	mov	r8, r0
    update_us_since_boot(&t, time_us_64());
20001fbe:	f000 fb5f 	bl	20002680 <__time_us_64_veneer>
    uint64_t delayed = base + ms * 1000ull;
20001fc2:	22fa      	movs	r2, #250	; 0xfa
    update_us_since_boot(&t, time_us_64());
20001fc4:	0006      	movs	r6, r0
20001fc6:	000f      	movs	r7, r1
    uint64_t delayed = base + ms * 1000ull;
20001fc8:	0020      	movs	r0, r4
20001fca:	2300      	movs	r3, #0
20001fcc:	2100      	movs	r1, #0
20001fce:	0092      	lsls	r2, r2, #2
20001fd0:	f000 fb46 	bl	20002660 <____wrap___aeabi_lmul_veneer>
20001fd4:	1980      	adds	r0, r0, r6
20001fd6:	4179      	adcs	r1, r7
20001fd8:	0004      	movs	r4, r0
20001fda:	000d      	movs	r5, r1
    if (delayed < base) {
20001fdc:	428f      	cmp	r7, r1
20001fde:	d830      	bhi.n	20002042 <mutex_enter_timeout_ms+0x8e>
20001fe0:	d02d      	beq.n	2000203e <mutex_enter_timeout_ms+0x8a>
    *lock = 0;
20001fe2:	2600      	movs	r6, #0

bool __time_critical_func(mutex_enter_block_until)(mutex_t *mtx, absolute_time_t until) {
    assert(mtx->core.spin_lock);
    bool block = true;
    do {
        uint32_t save = spin_lock_blocking(mtx->core.spin_lock);
20001fe4:	4643      	mov	r3, r8
20001fe6:	681a      	ldr	r2, [r3, #0]
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
20001fe8:	f3ef 8110 	mrs	r1, PRIMASK
    __asm volatile ("cpsid i");
20001fec:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
20001fee:	6813      	ldr	r3, [r2, #0]
20001ff0:	2b00      	cmp	r3, #0
20001ff2:	d0fc      	beq.n	20001fee <mutex_enter_timeout_ms+0x3a>
    __asm volatile ("dmb");
20001ff4:	f3bf 8f5f 	dmb	sy
        if (mtx->owner < 0) {
20001ff8:	4643      	mov	r3, r8
20001ffa:	791b      	ldrb	r3, [r3, #4]
20001ffc:	2b7f      	cmp	r3, #127	; 0x7f
20001ffe:	d80e      	bhi.n	2000201e <mutex_enter_timeout_ms+0x6a>
            mtx->owner = get_core_num();
            block = false;
        }
        spin_unlock(mtx->core.spin_lock, save);
20002000:	4643      	mov	r3, r8
20002002:	681b      	ldr	r3, [r3, #0]
20002004:	f3bf 8f5f 	dmb	sy
    *lock = 0;
20002008:	601e      	str	r6, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
2000200a:	f381 8810 	msr	PRIMASK, r1
        if (block) {
            if (best_effort_wfe_or_timeout(until)) {
2000200e:	0020      	movs	r0, r4
20002010:	0029      	movs	r1, r5
20002012:	f000 fb1d 	bl	20002650 <__best_effort_wfe_or_timeout_veneer>
20002016:	2800      	cmp	r0, #0
20002018:	d0e4      	beq.n	20001fe4 <mutex_enter_timeout_ms+0x30>
                return false;
2000201a:	2000      	movs	r0, #0
2000201c:	e00c      	b.n	20002038 <mutex_enter_timeout_ms+0x84>
    return (*(uint32_t *) (SIO_BASE + SIO_CPUID_OFFSET));
2000201e:	23d0      	movs	r3, #208	; 0xd0
            mtx->owner = get_core_num();
20002020:	4642      	mov	r2, r8
20002022:	061b      	lsls	r3, r3, #24
20002024:	681b      	ldr	r3, [r3, #0]
20002026:	7113      	strb	r3, [r2, #4]
        spin_unlock(mtx->core.spin_lock, save);
20002028:	6813      	ldr	r3, [r2, #0]
    __asm volatile ("dmb");
2000202a:	f3bf 8f5f 	dmb	sy
    *lock = 0;
2000202e:	2200      	movs	r2, #0
20002030:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
20002032:	f381 8810 	msr	PRIMASK, r1
            }
        }
    } while (block);
    return true;
20002036:	2001      	movs	r0, #1
}
20002038:	bc80      	pop	{r7}
2000203a:	46b8      	mov	r8, r7
2000203c:	bdf0      	pop	{r4, r5, r6, r7, pc}
2000203e:	4286      	cmp	r6, r0
20002040:	d9cf      	bls.n	20001fe2 <mutex_enter_timeout_ms+0x2e>
        delayed = (uint64_t)-1;
20002042:	2401      	movs	r4, #1
20002044:	4264      	negs	r4, r4
20002046:	17e5      	asrs	r5, r4, #31
20002048:	e7cb      	b.n	20001fe2 <mutex_enter_timeout_ms+0x2e>
2000204a:	46c0      	nop			; (mov r8, r8)

2000204c <mutex_exit>:
}

void __time_critical_func(mutex_exit)(mutex_t *mtx) {
    uint32_t save = spin_lock_blocking(mtx->core.spin_lock);
2000204c:	6802      	ldr	r2, [r0, #0]
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
2000204e:	f3ef 8110 	mrs	r1, PRIMASK
    __asm volatile ("cpsid i");
20002052:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
20002054:	6813      	ldr	r3, [r2, #0]
20002056:	2b00      	cmp	r3, #0
20002058:	d0fc      	beq.n	20002054 <mutex_exit+0x8>
    __asm volatile ("dmb");
2000205a:	f3bf 8f5f 	dmb	sy
    assert(mtx->owner >= 0);
    mtx->owner = -1;
2000205e:	23ff      	movs	r3, #255	; 0xff
20002060:	7103      	strb	r3, [r0, #4]
    __asm volatile ("sev");
20002062:	bf40      	sev
    __sev();
    spin_unlock(mtx->core.spin_lock, save);
20002064:	6803      	ldr	r3, [r0, #0]
    __asm volatile ("dmb");
20002066:	f3bf 8f5f 	dmb	sy
    *lock = 0;
2000206a:	2200      	movs	r2, #0
2000206c:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
2000206e:	f381 8810 	msr	PRIMASK, r1
}
20002072:	4770      	bx	lr

20002074 <_Z13VgaBufProcessv>:
	dma_hw->ints0 = (1u << VGA_DMA_PIO0);
20002074:	22a0      	movs	r2, #160	; 0xa0
{
20002076:	b5f0      	push	{r4, r5, r6, r7, lr}
	dma_hw->ints0 = (1u << VGA_DMA_PIO0);
20002078:	2102      	movs	r1, #2
{
2000207a:	46de      	mov	lr, fp
2000207c:	4657      	mov	r7, sl
2000207e:	464e      	mov	r6, r9
20002080:	4645      	mov	r5, r8
	dma_hw->ints0 = (1u << VGA_DMA_PIO0);
20002082:	4b7d      	ldr	r3, [pc, #500]	; (20002278 <_Z13VgaBufProcessv+0x204>)
20002084:	05d2      	lsls	r2, r2, #23
{
20002086:	b5e0      	push	{r5, r6, r7, lr}
	dma_hw->ints0 = (1u << VGA_DMA_PIO0);
20002088:	50d1      	str	r1, [r2, r3]
	BufInx = bufinx ^ 1;
2000208a:	2301      	movs	r3, #1
	int bufinx = BufInx;
2000208c:	497b      	ldr	r1, [pc, #492]	; (2000227c <_Z13VgaBufProcessv+0x208>)
	hw_divider_save_state(&DividerState);
2000208e:	487c      	ldr	r0, [pc, #496]	; (20002280 <_Z13VgaBufProcessv+0x20c>)
	int bufinx = BufInx;
20002090:	680f      	ldr	r7, [r1, #0]
{
20002092:	b083      	sub	sp, #12
	BufInx = bufinx ^ 1;
20002094:	407b      	eors	r3, r7
20002096:	600b      	str	r3, [r1, #0]
        dma_channel_hw_addr(channel)->al3_read_addr_trig = (uintptr_t) read_addr;
20002098:	4b7a      	ldr	r3, [pc, #488]	; (20002284 <_Z13VgaBufProcessv+0x210>)
2000209a:	681b      	ldr	r3, [r3, #0]
2000209c:	63d3      	str	r3, [r2, #60]	; 0x3c
	hw_divider_save_state(&DividerState);
2000209e:	f000 faf7 	bl	20002690 <__hw_divider_save_state_veneer>
	int line = ScanLine;	// current scanline
200020a2:	4b79      	ldr	r3, [pc, #484]	; (20002288 <_Z13VgaBufProcessv+0x214>)
	if (line > CurVmode.vtot) // last scanline?
200020a4:	4979      	ldr	r1, [pc, #484]	; (2000228c <_Z13VgaBufProcessv+0x218>)
	int line = ScanLine;	// current scanline
200020a6:	681a      	ldr	r2, [r3, #0]
	if (line > CurVmode.vtot) // last scanline?
200020a8:	8d88      	ldrh	r0, [r1, #44]	; 0x2c
	line++; 		// new current scanline
200020aa:	3201      	adds	r2, #1
	if (line > CurVmode.vtot) // last scanline?
200020ac:	4290      	cmp	r0, r2
200020ae:	da04      	bge.n	200020ba <_Z13VgaBufProcessv+0x46>
		Frame++;	// increment frame counter
200020b0:	4877      	ldr	r0, [pc, #476]	; (20002290 <_Z13VgaBufProcessv+0x21c>)
200020b2:	6802      	ldr	r2, [r0, #0]
200020b4:	3201      	adds	r2, #1
200020b6:	6002      	str	r2, [r0, #0]
		line = 1; 	// restart scanline
200020b8:	2201      	movs	r2, #1
	ScanLine = line;	// store new scanline
200020ba:	601a      	str	r2, [r3, #0]
	u8 linetype = ScanlineType[line];
200020bc:	4b75      	ldr	r3, [pc, #468]	; (20002294 <_Z13VgaBufProcessv+0x220>)
	switch (linetype)
200020be:	5c9b      	ldrb	r3, [r3, r2]
200020c0:	3b06      	subs	r3, #6
200020c2:	b2db      	uxtb	r3, r3
200020c4:	2b04      	cmp	r3, #4
200020c6:	d862      	bhi.n	2000218e <_Z13VgaBufProcessv+0x11a>
200020c8:	4873      	ldr	r0, [pc, #460]	; (20002298 <_Z13VgaBufProcessv+0x224>)
200020ca:	009b      	lsls	r3, r3, #2
200020cc:	58c3      	ldr	r3, [r0, r3]
200020ce:	469f      	mov	pc, r3
		y0 = line - CurVmode.vfirst1;
200020d0:	2340      	movs	r3, #64	; 0x40
		y0 = line - CurVmode.vfirst2;
200020d2:	5acb      	ldrh	r3, [r1, r3]
200020d4:	1ad2      	subs	r2, r2, r3
		if (CurVmode.dbly) y0 >>= 1;
200020d6:	2355      	movs	r3, #85	; 0x55
200020d8:	5ccb      	ldrb	r3, [r1, r3]
200020da:	2b00      	cmp	r3, #0
200020dc:	d000      	beq.n	200020e0 <_Z13VgaBufProcessv+0x6c>
200020de:	1052      	asrs	r2, r2, #1
		y0 = (y0 << 1) + 1;
200020e0:	0052      	lsls	r2, r2, #1
200020e2:	1c53      	adds	r3, r2, #1
		VSync = False;	// not vsync
200020e4:	2200      	movs	r2, #0
		y0 = (y0 << 1) + 1;
200020e6:	9300      	str	r3, [sp, #0]
		VSync = False;	// not vsync
200020e8:	4b6c      	ldr	r3, [pc, #432]	; (2000229c <_Z13VgaBufProcessv+0x228>)
200020ea:	701a      	strb	r2, [r3, #0]
	if (y0 >= 0)
200020ec:	9b00      	ldr	r3, [sp, #0]
200020ee:	2b00      	cmp	r3, #0
200020f0:	db25      	blt.n	2000213e <_Z13VgaBufProcessv+0xca>
    pio->ctrl = (pio->ctrl & ~(1u << sm)) | (!!enabled << sm);
200020f2:	4c6b      	ldr	r4, [pc, #428]	; (200022a0 <_Z13VgaBufProcessv+0x22c>)
    dma_hw->abort = 1u << channel;
200020f4:	21a0      	movs	r1, #160	; 0xa0
		for (layer = 1; layer < LAYERS; layer++)
200020f6:	2301      	movs	r3, #1
200020f8:	46a4      	mov	ip, r4
200020fa:	46bb      	mov	fp, r7
    return timer_hw->timerawl;
200020fc:	4a69      	ldr	r2, [pc, #420]	; (200022a4 <_Z13VgaBufProcessv+0x230>)
200020fe:	486a      	ldr	r0, [pc, #424]	; (200022a8 <_Z13VgaBufProcessv+0x234>)
20002100:	4690      	mov	r8, r2
	if (y0 >= 0)
20002102:	4d6a      	ldr	r5, [pc, #424]	; (200022ac <_Z13VgaBufProcessv+0x238>)
20002104:	4a6a      	ldr	r2, [pc, #424]	; (200022b0 <_Z13VgaBufProcessv+0x23c>)
20002106:	05c9      	lsls	r1, r1, #23
			if (CtrlBufNext[layer] == NULL) continue;
20002108:	4e5e      	ldr	r6, [pc, #376]	; (20002284 <_Z13VgaBufProcessv+0x210>)
2000210a:	009c      	lsls	r4, r3, #2
2000210c:	5934      	ldr	r4, [r6, r4]
2000210e:	9401      	str	r4, [sp, #4]
20002110:	2c00      	cmp	r4, #0
20002112:	d00e      	beq.n	20002132 <_Z13VgaBufProcessv+0xbe>
			if (!s->on || (s->w <= 0) || (y0 < s->y) || (y0 >= s->y + s->h)) continue;
20002114:	7b84      	ldrb	r4, [r0, #14]
20002116:	2c00      	cmp	r4, #0
20002118:	d00b      	beq.n	20002132 <_Z13VgaBufProcessv+0xbe>
2000211a:	8844      	ldrh	r4, [r0, #2]
2000211c:	2c00      	cmp	r4, #0
2000211e:	d008      	beq.n	20002132 <_Z13VgaBufProcessv+0xbe>
20002120:	2400      	movs	r4, #0
20002122:	5f07      	ldrsh	r7, [r0, r4]
20002124:	9e00      	ldr	r6, [sp, #0]
20002126:	42b7      	cmp	r7, r6
20002128:	dc03      	bgt.n	20002132 <_Z13VgaBufProcessv+0xbe>
2000212a:	8884      	ldrh	r4, [r0, #4]
2000212c:	19e4      	adds	r4, r4, r7
2000212e:	42b4      	cmp	r4, r6
20002130:	dc31      	bgt.n	20002196 <_Z13VgaBufProcessv+0x122>
		for (layer = 1; layer < LAYERS; layer++)
20002132:	3301      	adds	r3, #1
20002134:	3518      	adds	r5, #24
20002136:	3024      	adds	r0, #36	; 0x24
20002138:	2b04      	cmp	r3, #4
2000213a:	d1e5      	bne.n	20002108 <_Z13VgaBufProcessv+0x94>
2000213c:	465f      	mov	r7, fp
}
2000213e:	0038      	movs	r0, r7
20002140:	b003      	add	sp, #12
20002142:	bcf0      	pop	{r4, r5, r6, r7}
20002144:	46bb      	mov	fp, r7
20002146:	46b2      	mov	sl, r6
20002148:	46a9      	mov	r9, r5
2000214a:	46a0      	mov	r8, r4
2000214c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		y0 = line - CurVmode.vfirst2;
2000214e:	234e      	movs	r3, #78	; 0x4e
20002150:	e7bf      	b.n	200020d2 <_Z13VgaBufProcessv+0x5e>
		y0 = line - CurVmode.vfirst1;
20002152:	2340      	movs	r3, #64	; 0x40
20002154:	5acb      	ldrh	r3, [r1, r3]
20002156:	1ad2      	subs	r2, r2, r3
		if (CurVmode.dbly) y0 >>= 1;
20002158:	2355      	movs	r3, #85	; 0x55
		y0 = line - CurVmode.vfirst1;
2000215a:	9200      	str	r2, [sp, #0]
		if (CurVmode.dbly) y0 >>= 1;
2000215c:	5ccb      	ldrb	r3, [r1, r3]
2000215e:	2b00      	cmp	r3, #0
20002160:	d001      	beq.n	20002166 <_Z13VgaBufProcessv+0xf2>
20002162:	1053      	asrs	r3, r2, #1
20002164:	9300      	str	r3, [sp, #0]
		VSync = False;	// not vsync
20002166:	2200      	movs	r2, #0
20002168:	4b4c      	ldr	r3, [pc, #304]	; (2000229c <_Z13VgaBufProcessv+0x228>)
2000216a:	701a      	strb	r2, [r3, #0]
		break;
2000216c:	e7be      	b.n	200020ec <_Z13VgaBufProcessv+0x78>
		y0 = line - CurVmode.vfirst1;
2000216e:	2340      	movs	r3, #64	; 0x40
		y0 = line - CurVmode.vfirst2;
20002170:	5acb      	ldrh	r3, [r1, r3]
20002172:	1ad2      	subs	r2, r2, r3
		if (CurVmode.dbly) y0 >>= 1;
20002174:	2355      	movs	r3, #85	; 0x55
20002176:	5ccb      	ldrb	r3, [r1, r3]
20002178:	2b00      	cmp	r3, #0
2000217a:	d000      	beq.n	2000217e <_Z13VgaBufProcessv+0x10a>
2000217c:	1052      	asrs	r2, r2, #1
		y0 <<= 1;
2000217e:	0053      	lsls	r3, r2, #1
		VSync = False;	// not vsync
20002180:	2200      	movs	r2, #0
		y0 <<= 1;
20002182:	9300      	str	r3, [sp, #0]
		VSync = False;	// not vsync
20002184:	4b45      	ldr	r3, [pc, #276]	; (2000229c <_Z13VgaBufProcessv+0x228>)
20002186:	701a      	strb	r2, [r3, #0]
		break;
20002188:	e7b0      	b.n	200020ec <_Z13VgaBufProcessv+0x78>
		y0 = line - CurVmode.vfirst2;
2000218a:	234e      	movs	r3, #78	; 0x4e
2000218c:	e7f0      	b.n	20002170 <_Z13VgaBufProcessv+0xfc>
		VSync = True;	// vsync
2000218e:	2201      	movs	r2, #1
20002190:	4b42      	ldr	r3, [pc, #264]	; (2000229c <_Z13VgaBufProcessv+0x228>)
20002192:	701a      	strb	r2, [r3, #0]
	if (y0 >= 0)
20002194:	e7d3      	b.n	2000213e <_Z13VgaBufProcessv+0xca>
20002196:	4644      	mov	r4, r8
20002198:	6aa4      	ldr	r4, [r4, #40]	; 0x28
2000219a:	46a2      	mov	sl, r4
2000219c:	1d2c      	adds	r4, r5, #4
2000219e:	46a1      	mov	r9, r4
				if (a <= CurLayerProg.maxidle+LAYER_OFFSET) break;
200021a0:	4c44      	ldr	r4, [pc, #272]	; (200022b4 <_Z13VgaBufProcessv+0x240>)
200021a2:	7b67      	ldrb	r7, [r4, #13]
200021a4:	464c      	mov	r4, r9
200021a6:	4699      	mov	r9, r3
200021a8:	0003      	movs	r3, r0
200021aa:	4650      	mov	r0, sl
200021ac:	469a      	mov	sl, r3
200021ae:	0023      	movs	r3, r4
200021b0:	e004      	b.n	200021bc <_Z13VgaBufProcessv+0x148>
200021b2:	4644      	mov	r4, r8
200021b4:	6aa4      	ldr	r4, [r4, #40]	; 0x28
			} while ((u32)(time_us_32() - t1) < (u32)10); // wait max. 10 us, low resolution can take long time
200021b6:	1a24      	subs	r4, r4, r0
200021b8:	2c09      	cmp	r4, #9
200021ba:	d804      	bhi.n	200021c6 <_Z13VgaBufProcessv+0x152>
				if (a <= CurLayerProg.maxidle+LAYER_OFFSET) break;
200021bc:	261f      	movs	r6, #31
				u8 a = *(volatile u8*)&VGA_PIO->sm[sm].addr & 0x1f;
200021be:	781c      	ldrb	r4, [r3, #0]
				if (a <= CurLayerProg.maxidle+LAYER_OFFSET) break;
200021c0:	4034      	ands	r4, r6
200021c2:	42a7      	cmp	r7, r4
200021c4:	d3f5      	bcc.n	200021b2 <_Z13VgaBufProcessv+0x13e>
200021c6:	464b      	mov	r3, r9
200021c8:	2701      	movs	r7, #1
200021ca:	005c      	lsls	r4, r3, #1
200021cc:	4650      	mov	r0, sl
			dma_channel_abort(VGA_DMA_PIO(layer));
200021ce:	46a2      	mov	sl, r4
200021d0:	3401      	adds	r4, #1
200021d2:	40a7      	lsls	r7, r4
200021d4:	508f      	str	r7, [r1, r2]
    while (dma_hw->abort & (1ul << channel)) tight_loop_contents();
200021d6:	588c      	ldr	r4, [r1, r2]
200021d8:	423c      	tst	r4, r7
200021da:	d1fc      	bne.n	200021d6 <_Z13VgaBufProcessv+0x162>
    dma_hw->abort = 1u << channel;
200021dc:	2401      	movs	r4, #1
200021de:	4656      	mov	r6, sl
200021e0:	40b4      	lsls	r4, r6
200021e2:	4699      	mov	r9, r3
200021e4:	508c      	str	r4, [r1, r2]
    while (dma_hw->abort & (1ul << channel)) tight_loop_contents();
200021e6:	588b      	ldr	r3, [r1, r2]
200021e8:	4223      	tst	r3, r4
200021ea:	d1fc      	bne.n	200021e6 <_Z13VgaBufProcessv+0x172>
    dma_hw->abort = 1u << channel;
200021ec:	003b      	movs	r3, r7
200021ee:	508f      	str	r7, [r1, r2]
    while (dma_hw->abort & (1ul << channel)) tight_loop_contents();
200021f0:	588f      	ldr	r7, [r1, r2]
200021f2:	423b      	tst	r3, r7
200021f4:	d1fc      	bne.n	200021f0 <_Z13VgaBufProcessv+0x17c>
    dma_hw->abort = 1u << channel;
200021f6:	464b      	mov	r3, r9
200021f8:	508c      	str	r4, [r1, r2]
    while (dma_hw->abort & (1ul << channel)) tight_loop_contents();
200021fa:	588f      	ldr	r7, [r1, r2]
200021fc:	423c      	tst	r4, r7
200021fe:	d1fc      	bne.n	200021fa <_Z13VgaBufProcessv+0x186>
20002200:	2701      	movs	r7, #1
20002202:	4664      	mov	r4, ip
20002204:	409f      	lsls	r7, r3
20002206:	4666      	mov	r6, ip
20002208:	6824      	ldr	r4, [r4, #0]
    pio->sm[sm].instr = instr;
2000220a:	449a      	add	sl, r3
    pio->ctrl = (pio->ctrl & ~(1u << sm)) | (!!enabled << sm);
2000220c:	43bc      	bics	r4, r7
2000220e:	6034      	str	r4, [r6, #0]
20002210:	2480      	movs	r4, #128	; 0x80
20002212:	2680      	movs	r6, #128	; 0x80
20002214:	0164      	lsls	r4, r4, #5
20002216:	432c      	orrs	r4, r5
20002218:	0636      	lsls	r6, r6, #24
2000221a:	6026      	str	r6, [r4, #0]
2000221c:	6026      	str	r6, [r4, #0]
    pio->ctrl |= 1u << (PIO_CTRL_SM_RESTART_LSB + sm);
2000221e:	4664      	mov	r4, ip
20002220:	2601      	movs	r6, #1
20002222:	6824      	ldr	r4, [r4, #0]
20002224:	46a1      	mov	r9, r4
20002226:	1d1c      	adds	r4, r3, #4
20002228:	40a6      	lsls	r6, r4
2000222a:	0034      	movs	r4, r6
2000222c:	464e      	mov	r6, r9
2000222e:	4334      	orrs	r4, r6
20002230:	4666      	mov	r6, ip
20002232:	6034      	str	r4, [r6, #0]
20002234:	261f      	movs	r6, #31
20002236:	4c1f      	ldr	r4, [pc, #124]	; (200022b4 <_Z13VgaBufProcessv+0x240>)
20002238:	7ae4      	ldrb	r4, [r4, #11]
2000223a:	4034      	ands	r4, r6
2000223c:	0026      	movs	r6, r4
    pio->sm[sm].instr = instr;
2000223e:	4654      	mov	r4, sl
20002240:	00e4      	lsls	r4, r4, #3
20002242:	46a2      	mov	sl, r4
20002244:	4c1c      	ldr	r4, [pc, #112]	; (200022b8 <_Z13VgaBufProcessv+0x244>)
20002246:	46a1      	mov	r9, r4
20002248:	44ca      	add	sl, r9
2000224a:	4654      	mov	r4, sl
2000224c:	6026      	str	r6, [r4, #0]
    pio->ctrl = (pio->ctrl & ~(1u << sm)) | (!!enabled << sm);
2000224e:	4664      	mov	r4, ip
20002250:	6824      	ldr	r4, [r4, #0]
20002252:	261f      	movs	r6, #31
20002254:	43bc      	bics	r4, r7
20002256:	4327      	orrs	r7, r4
20002258:	4664      	mov	r4, ip
2000225a:	6027      	str	r7, [r4, #0]
2000225c:	4c15      	ldr	r4, [pc, #84]	; (200022b4 <_Z13VgaBufProcessv+0x240>)
2000225e:	7b24      	ldrb	r4, [r4, #12]
20002260:	4034      	ands	r4, r6
    pio->sm[sm].instr = instr;
20002262:	4656      	mov	r6, sl
20002264:	6034      	str	r4, [r6, #0]
    return &dma_hw->ch[channel];
20002266:	26a0      	movs	r6, #160	; 0xa0
20002268:	05f6      	lsls	r6, r6, #23
2000226a:	46b1      	mov	r9, r6
2000226c:	01dc      	lsls	r4, r3, #7
        dma_channel_hw_addr(channel)->al3_read_addr_trig = (uintptr_t) read_addr;
2000226e:	9e01      	ldr	r6, [sp, #4]
20002270:	444c      	add	r4, r9
20002272:	63e6      	str	r6, [r4, #60]	; 0x3c
20002274:	e75d      	b.n	20002132 <_Z13VgaBufProcessv+0xbe>
20002276:	46c0      	nop			; (mov r8, r8)
20002278:	0000040c 	.word	0x0000040c
2000227c:	2000349c 	.word	0x2000349c
20002280:	20004a44 	.word	0x20004a44
20002284:	20004998 	.word	0x20004998
20002288:	20006e48 	.word	0x20006e48
2000228c:	200049e8 	.word	0x200049e8
20002290:	20004a54 	.word	0x20004a54
20002294:	20006e4c 	.word	0x20006e4c
20002298:	100297f8 	.word	0x100297f8
2000229c:	20012770 	.word	0x20012770
200022a0:	50200000 	.word	0x50200000
200022a4:	40054000 	.word	0x40054000
200022a8:	20004a98 	.word	0x20004a98
200022ac:	502000e8 	.word	0x502000e8
200022b0:	00000444 	.word	0x00000444
200022b4:	200049b4 	.word	0x200049b4
200022b8:	502000d8 	.word	0x502000d8

200022bc <_Z12VgaBufRenderPmS_Phi>:
{
200022bc:	b5f0      	push	{r4, r5, r6, r7, lr}
200022be:	46de      	mov	lr, fp
200022c0:	4657      	mov	r7, sl
200022c2:	464e      	mov	r6, r9
200022c4:	4645      	mov	r5, r8
200022c6:	4699      	mov	r9, r3
	*cbuf++ = 4; // send 4x u32
200022c8:	2304      	movs	r3, #4
{
200022ca:	0004      	movs	r4, r0
200022cc:	4693      	mov	fp, r2
200022ce:	b5e0      	push	{r5, r6, r7, lr}
	*cbuf++ = 4; // send 4x u32
200022d0:	6003      	str	r3, [r0, #0]
	*cbuf++ = (u32)LineBufHsBp; // HSYNC + back porch
200022d2:	4b8b      	ldr	r3, [pc, #556]	; (20002500 <_Z12VgaBufRenderPmS_Phi+0x244>)
{
200022d4:	000e      	movs	r6, r1
	*cbuf++ = (u32)LineBufHsBp; // HSYNC + back porch
200022d6:	6063      	str	r3, [r4, #4]
	cbuf = Render(cbuf, dbuf, y0, CurVmode.width);
200022d8:	4b8a      	ldr	r3, [pc, #552]	; (20002504 <_Z12VgaBufRenderPmS_Phi+0x248>)
200022da:	464a      	mov	r2, r9
200022dc:	881b      	ldrh	r3, [r3, #0]
{
200022de:	b085      	sub	sp, #20
	cbuf = Render(cbuf, dbuf, y0, CurVmode.width);
200022e0:	4659      	mov	r1, fp
	*cbuf++ = (u32)LineBufHsBp; // HSYNC + back porch
200022e2:	3008      	adds	r0, #8
	cbuf = Render(cbuf, dbuf, y0, CurVmode.width);
200022e4:	f7ff fcea 	bl	20001cbc <Render>
	*cbuf++ = 1; // send 1x u32
200022e8:	2301      	movs	r3, #1
200022ea:	6003      	str	r3, [r0, #0]
	*cbuf++ = (u32)&LineBufFp; // front porch
200022ec:	3307      	adds	r3, #7
200022ee:	469c      	mov	ip, r3
200022f0:	4484      	add	ip, r0
200022f2:	4663      	mov	r3, ip
200022f4:	9300      	str	r3, [sp, #0]
200022f6:	4b84      	ldr	r3, [pc, #528]	; (20002508 <_Z12VgaBufRenderPmS_Phi+0x24c>)
200022f8:	4c84      	ldr	r4, [pc, #528]	; (2000250c <_Z12VgaBufRenderPmS_Phi+0x250>)
200022fa:	6043      	str	r3, [r0, #4]
	for (layer = 1; layer < LAYERS; layer++)
200022fc:	4b84      	ldr	r3, [pc, #528]	; (20002510 <_Z12VgaBufRenderPmS_Phi+0x254>)
200022fe:	4f85      	ldr	r7, [pc, #532]	; (20002514 <_Z12VgaBufRenderPmS_Phi+0x258>)
20002300:	4698      	mov	r8, r3
20002302:	4b85      	ldr	r3, [pc, #532]	; (20002518 <_Z12VgaBufRenderPmS_Phi+0x25c>)
20002304:	4d85      	ldr	r5, [pc, #532]	; (2000251c <_Z12VgaBufRenderPmS_Phi+0x260>)
20002306:	469a      	mov	sl, r3
		switch(mode)
20002308:	464b      	mov	r3, r9
2000230a:	46b1      	mov	r9, r6
2000230c:	4656      	mov	r6, sl
2000230e:	469a      	mov	sl, r3
		cbuf0 += CtrlBufSize[layer-1];
20002310:	6823      	ldr	r3, [r4, #0]
20002312:	009b      	lsls	r3, r3, #2
20002314:	4499      	add	r9, r3
		dbuf += LineBufSize[layer-1];
20002316:	4643      	mov	r3, r8
20002318:	681b      	ldr	r3, [r3, #0]
2000231a:	469c      	mov	ip, r3
		CtrlBufNext[layer] = NULL;
2000231c:	2300      	movs	r3, #0
2000231e:	607b      	str	r3, [r7, #4]
		int mode = LayerModeInx[layer];
20002320:	7873      	ldrb	r3, [r6, #1]
		dbuf += LineBufSize[layer-1];
20002322:	44e3      	add	fp, ip
		if (mode == LAYERMODE_BASE) continue;
20002324:	2b00      	cmp	r3, #0
20002326:	d038      	beq.n	2000239a <_Z12VgaBufRenderPmS_Phi+0xde>
		if (!s->on || (s->w <= 0) || (y0 < s->y) || (y0 >= s->y + s->h)) continue;
20002328:	2222      	movs	r2, #34	; 0x22
2000232a:	5caa      	ldrb	r2, [r5, r2]
2000232c:	2a00      	cmp	r2, #0
2000232e:	d034      	beq.n	2000239a <_Z12VgaBufRenderPmS_Phi+0xde>
20002330:	8aea      	ldrh	r2, [r5, #22]
20002332:	2a00      	cmp	r2, #0
20002334:	d031      	beq.n	2000239a <_Z12VgaBufRenderPmS_Phi+0xde>
20002336:	2114      	movs	r1, #20
20002338:	5e6a      	ldrsh	r2, [r5, r1]
2000233a:	4552      	cmp	r2, sl
2000233c:	dc2d      	bgt.n	2000239a <_Z12VgaBufRenderPmS_Phi+0xde>
2000233e:	8b29      	ldrh	r1, [r5, #24]
20002340:	1889      	adds	r1, r1, r2
20002342:	4551      	cmp	r1, sl
20002344:	dd29      	ble.n	2000239a <_Z12VgaBufRenderPmS_Phi+0xde>
		int y = y0 - s->y;
20002346:	4651      	mov	r1, sl
20002348:	1a8a      	subs	r2, r1, r2
2000234a:	9203      	str	r2, [sp, #12]
		CtrlBufNext[layer] = cbuf2;
2000234c:	464a      	mov	r2, r9
		*cbuf2++ = 1;
2000234e:	4649      	mov	r1, r9
		CtrlBufNext[layer] = cbuf2;
20002350:	607a      	str	r2, [r7, #4]
		*cbuf2++ = 1;
20002352:	2201      	movs	r2, #1
20002354:	600a      	str	r2, [r1, #0]
		*cbuf2++ = (u32)dbuf2;
20002356:	4659      	mov	r1, fp
20002358:	464a      	mov	r2, r9
2000235a:	6051      	str	r1, [r2, #4]
		*(u32*)dbuf2 = BYTESWAP(s->init);
2000235c:	68aa      	ldr	r2, [r5, #8]
		switch(mode)
2000235e:	3b06      	subs	r3, #6
20002360:	ba12      	rev	r2, r2
		*(u32*)dbuf2 = BYTESWAP(s->init);
20002362:	c104      	stmia	r1!, {r2}
		switch(mode)
20002364:	b2db      	uxtb	r3, r3
		*(u32*)dbuf2 = BYTESWAP(s->init);
20002366:	9101      	str	r1, [sp, #4]
		switch(mode)
20002368:	2b0c      	cmp	r3, #12
2000236a:	d900      	bls.n	2000236e <_Z12VgaBufRenderPmS_Phi+0xb2>
2000236c:	e094      	b.n	20002498 <_Z12VgaBufRenderPmS_Phi+0x1dc>
2000236e:	4a6c      	ldr	r2, [pc, #432]	; (20002520 <_Z12VgaBufRenderPmS_Phi+0x264>)
20002370:	009b      	lsls	r3, r3, #2
20002372:	58d3      	ldr	r3, [r2, r3]
20002374:	469f      	mov	pc, r3
				MemSet4((u32*)dbuf2, s->keycol, s->w/4);
20002376:	8aea      	ldrh	r2, [r5, #22]
20002378:	68e9      	ldr	r1, [r5, #12]
2000237a:	0892      	lsrs	r2, r2, #2
2000237c:	9801      	ldr	r0, [sp, #4]
2000237e:	f7fd ffc7 	bl	20000310 <MemSet4>
				cbuf2 = RenderFastSprite(cbuf2, y, s, dbuf2);
20002382:	4648      	mov	r0, r9
20002384:	002a      	movs	r2, r5
20002386:	9b01      	ldr	r3, [sp, #4]
20002388:	9903      	ldr	r1, [sp, #12]
2000238a:	3008      	adds	r0, #8
2000238c:	f7fe f938 	bl	20000600 <RenderFastSprite>
20002390:	9002      	str	r0, [sp, #8]
		*cbuf2++ = 0; // end mark
20002392:	2200      	movs	r2, #0
20002394:	9b02      	ldr	r3, [sp, #8]
20002396:	601a      	str	r2, [r3, #0]
		*cbuf2++ = 0; // end mark
20002398:	605a      	str	r2, [r3, #4]
	for (layer = 1; layer < LAYERS; layer++)
2000239a:	2304      	movs	r3, #4
2000239c:	469c      	mov	ip, r3
2000239e:	4b61      	ldr	r3, [pc, #388]	; (20002524 <_Z12VgaBufRenderPmS_Phi+0x268>)
200023a0:	3404      	adds	r4, #4
200023a2:	44e0      	add	r8, ip
200023a4:	3704      	adds	r7, #4
200023a6:	3601      	adds	r6, #1
200023a8:	3524      	adds	r5, #36	; 0x24
200023aa:	42a3      	cmp	r3, r4
200023ac:	d1b0      	bne.n	20002310 <_Z12VgaBufRenderPmS_Phi+0x54>
}
200023ae:	9800      	ldr	r0, [sp, #0]
200023b0:	b005      	add	sp, #20
200023b2:	bcf0      	pop	{r4, r5, r6, r7}
200023b4:	46bb      	mov	fp, r7
200023b6:	46b2      	mov	sl, r6
200023b8:	46a9      	mov	r9, r5
200023ba:	46a0      	mov	r8, r4
200023bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
				int x = s->x; // destination coordinate X
200023be:	2112      	movs	r1, #18
200023c0:	5e6b      	ldrsh	r3, [r5, r1]
				int w = s->w; // destination width
200023c2:	8aea      	ldrh	r2, [r5, #22]
				if (x < 0)
200023c4:	2b00      	cmp	r3, #0
200023c6:	da00      	bge.n	200023ca <_Z12VgaBufRenderPmS_Phi+0x10e>
200023c8:	e07d      	b.n	200024c6 <_Z12VgaBufRenderPmS_Phi+0x20a>
					if (x + w > CurVmode.width)
200023ca:	494e      	ldr	r1, [pc, #312]	; (20002504 <_Z12VgaBufRenderPmS_Phi+0x248>)
200023cc:	18d0      	adds	r0, r2, r3
200023ce:	8809      	ldrh	r1, [r1, #0]
200023d0:	468c      	mov	ip, r1
					x = 0;
200023d2:	2100      	movs	r1, #0
					if (x + w > CurVmode.width)
200023d4:	4560      	cmp	r0, ip
200023d6:	dd01      	ble.n	200023dc <_Z12VgaBufRenderPmS_Phi+0x120>
						w = CurVmode.width - x; // limit W
200023d8:	4662      	mov	r2, ip
200023da:	1ad2      	subs	r2, r2, r3
				w = ALIGN4(w);
200023dc:	2303      	movs	r3, #3
200023de:	0010      	movs	r0, r2
200023e0:	4398      	bics	r0, r3
				if (w <= 0)
200023e2:	2800      	cmp	r0, #0
200023e4:	dd36      	ble.n	20002454 <_Z12VgaBufRenderPmS_Phi+0x198>
					*cbuf2++ = w/4;
200023e6:	464b      	mov	r3, r9
200023e8:	1092      	asrs	r2, r2, #2
200023ea:	609a      	str	r2, [r3, #8]
					*cbuf2++ = (u32)&dbuf2[x];
200023ec:	2310      	movs	r3, #16
200023ee:	9801      	ldr	r0, [sp, #4]
200023f0:	444b      	add	r3, r9
200023f2:	4684      	mov	ip, r0
200023f4:	9302      	str	r3, [sp, #8]
200023f6:	464b      	mov	r3, r9
200023f8:	4461      	add	r1, ip
200023fa:	60d9      	str	r1, [r3, #12]
					RenderPersp(dbuf2, y, s);
200023fc:	002a      	movs	r2, r5
200023fe:	9903      	ldr	r1, [sp, #12]
20002400:	f7fe fe66 	bl	200010d0 <RenderPersp>
20002404:	e7c5      	b.n	20002392 <_Z12VgaBufRenderPmS_Phi+0xd6>
				*cbuf2++ = s->trans;
20002406:	464a      	mov	r2, r9
20002408:	8a2b      	ldrh	r3, [r5, #16]
2000240a:	6093      	str	r3, [r2, #8]
				*cbuf2++ = (u32)dbuf2;
2000240c:	2310      	movs	r3, #16
2000240e:	444b      	add	r3, r9
20002410:	9302      	str	r3, [sp, #8]
20002412:	9b01      	ldr	r3, [sp, #4]
20002414:	60d3      	str	r3, [r2, #12]
				MemSet4((u32*)dbuf2, s->keycol, s->w/4);
20002416:	8aea      	ldrh	r2, [r5, #22]
20002418:	68e9      	ldr	r1, [r5, #12]
2000241a:	0018      	movs	r0, r3
2000241c:	0892      	lsrs	r2, r2, #2
2000241e:	f7fd ff77 	bl	20000310 <MemSet4>
				RenderSprite(dbuf2, y, s);
20002422:	002a      	movs	r2, r5
20002424:	9903      	ldr	r1, [sp, #12]
20002426:	9801      	ldr	r0, [sp, #4]
20002428:	f7fe ffdc 	bl	200013e4 <RenderSprite>
			break;
2000242c:	e7b1      	b.n	20002392 <_Z12VgaBufRenderPmS_Phi+0xd6>
				int x = s->x; // destination coordinate X
2000242e:	2112      	movs	r1, #18
20002430:	5e6b      	ldrsh	r3, [r5, r1]
				int w = s->w; // destination width
20002432:	8aea      	ldrh	r2, [r5, #22]
				if (x < 0)
20002434:	2b00      	cmp	r3, #0
20002436:	db3a      	blt.n	200024ae <_Z12VgaBufRenderPmS_Phi+0x1f2>
					if (x + w > CurVmode.width)
20002438:	4932      	ldr	r1, [pc, #200]	; (20002504 <_Z12VgaBufRenderPmS_Phi+0x248>)
2000243a:	18d0      	adds	r0, r2, r3
2000243c:	8809      	ldrh	r1, [r1, #0]
2000243e:	468c      	mov	ip, r1
					x = 0;
20002440:	2100      	movs	r1, #0
					if (x + w > CurVmode.width)
20002442:	4560      	cmp	r0, ip
20002444:	dd01      	ble.n	2000244a <_Z12VgaBufRenderPmS_Phi+0x18e>
						w = CurVmode.width - x; // limit W
20002446:	4662      	mov	r2, ip
20002448:	1ad2      	subs	r2, r2, r3
				w = ALIGN4(w);
2000244a:	2303      	movs	r3, #3
2000244c:	0010      	movs	r0, r2
2000244e:	4398      	bics	r0, r3
				if (w <= 0)
20002450:	2800      	cmp	r0, #0
20002452:	dc44      	bgt.n	200024de <_Z12VgaBufRenderPmS_Phi+0x222>
					*cbuf2++ = 1;
20002454:	2301      	movs	r3, #1
20002456:	464a      	mov	r2, r9
20002458:	6093      	str	r3, [r2, #8]
					*cbuf2++ = (u32)dbuf2;
2000245a:	330f      	adds	r3, #15
2000245c:	444b      	add	r3, r9
2000245e:	9302      	str	r3, [sp, #8]
20002460:	464b      	mov	r3, r9
20002462:	9a01      	ldr	r2, [sp, #4]
20002464:	60da      	str	r2, [r3, #12]
					*(u32*)dbuf2 = s->keycol;
20002466:	465b      	mov	r3, fp
20002468:	68ea      	ldr	r2, [r5, #12]
2000246a:	605a      	str	r2, [r3, #4]
2000246c:	e791      	b.n	20002392 <_Z12VgaBufRenderPmS_Phi+0xd6>
				int n = row[y+1] - row[y];
2000246e:	9a03      	ldr	r2, [sp, #12]
				u16* row = (u16*)s->par;
20002470:	6869      	ldr	r1, [r5, #4]
				int n = row[y+1] - row[y];
20002472:	3201      	adds	r2, #1
20002474:	0052      	lsls	r2, r2, #1
20002476:	188b      	adds	r3, r1, r2
20002478:	5a8a      	ldrh	r2, [r1, r2]
				*cbuf2++ = n;
2000247a:	4649      	mov	r1, r9
				int n = row[y+1] - row[y];
2000247c:	3b02      	subs	r3, #2
2000247e:	881b      	ldrh	r3, [r3, #0]
20002480:	1ad2      	subs	r2, r2, r3
				*cbuf2++ = n;
20002482:	608a      	str	r2, [r1, #8]
				*cbuf2++ = (u32)&s->img[row[y]*4];
20002484:	2210      	movs	r2, #16
20002486:	444a      	add	r2, r9
20002488:	9202      	str	r2, [sp, #8]
2000248a:	009b      	lsls	r3, r3, #2
				*cbuf2++ = (u32)&s->img[y*s->wb];
2000248c:	682a      	ldr	r2, [r5, #0]
2000248e:	4694      	mov	ip, r2
20002490:	464a      	mov	r2, r9
20002492:	4463      	add	r3, ip
20002494:	60d3      	str	r3, [r2, #12]
			break;
20002496:	e77c      	b.n	20002392 <_Z12VgaBufRenderPmS_Phi+0xd6>
				*cbuf2++ = s->trans;
20002498:	464a      	mov	r2, r9
2000249a:	8a2b      	ldrh	r3, [r5, #16]
2000249c:	6093      	str	r3, [r2, #8]
				*cbuf2++ = (u32)&s->img[y*s->wb];
2000249e:	2310      	movs	r3, #16
200024a0:	444b      	add	r3, r9
200024a2:	9a03      	ldr	r2, [sp, #12]
200024a4:	9302      	str	r3, [sp, #8]
200024a6:	8b6b      	ldrh	r3, [r5, #26]
200024a8:	435a      	muls	r2, r3
200024aa:	0013      	movs	r3, r2
200024ac:	e7ee      	b.n	2000248c <_Z12VgaBufRenderPmS_Phi+0x1d0>
					x = ALIGN4(x+4098) - 4096; // round X to 4-pixels
200024ae:	491e      	ldr	r1, [pc, #120]	; (20002528 <_Z12VgaBufRenderPmS_Phi+0x26c>)
200024b0:	468c      	mov	ip, r1
200024b2:	2103      	movs	r1, #3
200024b4:	4463      	add	r3, ip
200024b6:	438b      	bics	r3, r1
200024b8:	491c      	ldr	r1, [pc, #112]	; (2000252c <_Z12VgaBufRenderPmS_Phi+0x270>)
200024ba:	1859      	adds	r1, r3, r1
					w += x;	// decrease W
200024bc:	1852      	adds	r2, r2, r1
					x = -x; // start offset of X
200024be:	2180      	movs	r1, #128	; 0x80
200024c0:	0149      	lsls	r1, r1, #5
200024c2:	1ac9      	subs	r1, r1, r3
200024c4:	e7c1      	b.n	2000244a <_Z12VgaBufRenderPmS_Phi+0x18e>
					x = ALIGN4(x+4098) - 4096; // round X to 4-pixels
200024c6:	4918      	ldr	r1, [pc, #96]	; (20002528 <_Z12VgaBufRenderPmS_Phi+0x26c>)
200024c8:	468c      	mov	ip, r1
200024ca:	2103      	movs	r1, #3
200024cc:	4463      	add	r3, ip
200024ce:	438b      	bics	r3, r1
200024d0:	4916      	ldr	r1, [pc, #88]	; (2000252c <_Z12VgaBufRenderPmS_Phi+0x270>)
200024d2:	1859      	adds	r1, r3, r1
					w += x;	// decrease W
200024d4:	1852      	adds	r2, r2, r1
					x = -x; // start offset of X
200024d6:	2180      	movs	r1, #128	; 0x80
200024d8:	0149      	lsls	r1, r1, #5
200024da:	1ac9      	subs	r1, r1, r3
200024dc:	e77e      	b.n	200023dc <_Z12VgaBufRenderPmS_Phi+0x120>
					*cbuf2++ = w/4;
200024de:	464b      	mov	r3, r9
200024e0:	1092      	asrs	r2, r2, #2
200024e2:	609a      	str	r2, [r3, #8]
					*cbuf2++ = (u32)&dbuf2[x];
200024e4:	2310      	movs	r3, #16
200024e6:	9801      	ldr	r0, [sp, #4]
200024e8:	444b      	add	r3, r9
200024ea:	4684      	mov	ip, r0
200024ec:	9302      	str	r3, [sp, #8]
200024ee:	464b      	mov	r3, r9
200024f0:	4461      	add	r1, ip
200024f2:	60d9      	str	r1, [r3, #12]
					RenderPersp2(dbuf2, y, s);
200024f4:	002a      	movs	r2, r5
200024f6:	9903      	ldr	r1, [sp, #12]
200024f8:	f7fe fe74 	bl	200011e4 <RenderPersp2>
200024fc:	e749      	b.n	20002392 <_Z12VgaBufRenderPmS_Phi+0xd6>
200024fe:	46c0      	nop			; (mov r8, r8)
20002500:	200061bc 	.word	0x200061bc
20002504:	200049e8 	.word	0x200049e8
20002508:	200061b8 	.word	0x200061b8
2000250c:	20002758 	.word	0x20002758
20002510:	20002768 	.word	0x20002768
20002514:	20004998 	.word	0x20004998
20002518:	20004a5c 	.word	0x20004a5c
2000251c:	20004a84 	.word	0x20004a84
20002520:	1002980c 	.word	0x1002980c
20002524:	20002764 	.word	0x20002764
20002528:	00001002 	.word	0x00001002
2000252c:	fffff000 	.word	0xfffff000

20002530 <VgaLine>:
{
20002530:	b570      	push	{r4, r5, r6, lr}
	int bufinx = VgaBufProcess();
20002532:	f7ff fd9f 	bl	20002074 <_Z13VgaBufProcessv>
	if (bufinx == 0)
20002536:	2800      	cmp	r0, #0
20002538:	d013      	beq.n	20002562 <VgaLine+0x32>
		cbuf = CtrlBuf2;
2000253a:	4838      	ldr	r0, [pc, #224]	; (2000261c <VgaLine+0xec>)
		dbuf = LineBuf2;
2000253c:	4a38      	ldr	r2, [pc, #224]	; (20002620 <VgaLine+0xf0>)
	CtrlBufNext[0] = cbuf;
2000253e:	4b39      	ldr	r3, [pc, #228]	; (20002624 <VgaLine+0xf4>)
	if (line > CurVmode.vtot) line = 1;
20002540:	4d39      	ldr	r5, [pc, #228]	; (20002628 <VgaLine+0xf8>)
	CtrlBufNext[0] = cbuf;
20002542:	6018      	str	r0, [r3, #0]
	int line = ScanLine;	// current scanline
20002544:	4b39      	ldr	r3, [pc, #228]	; (2000262c <VgaLine+0xfc>)
	if (line > CurVmode.vtot) line = 1;
20002546:	8da9      	ldrh	r1, [r5, #44]	; 0x2c
	int line = ScanLine;	// current scanline
20002548:	681b      	ldr	r3, [r3, #0]
	line++; // next line to render
2000254a:	3301      	adds	r3, #1
	if (line > CurVmode.vtot) line = 1;
2000254c:	4299      	cmp	r1, r3
2000254e:	da00      	bge.n	20002552 <VgaLine+0x22>
20002550:	2301      	movs	r3, #1
	u8 linetype = ScanlineType[line];
20002552:	4937      	ldr	r1, [pc, #220]	; (20002630 <VgaLine+0x100>)
	switch (linetype)
20002554:	5ccc      	ldrb	r4, [r1, r3]
20002556:	2c0a      	cmp	r4, #10
20002558:	d85e      	bhi.n	20002618 <VgaLine+0xe8>
2000255a:	4936      	ldr	r1, [pc, #216]	; (20002634 <VgaLine+0x104>)
2000255c:	00a4      	lsls	r4, r4, #2
2000255e:	5909      	ldr	r1, [r1, r4]
20002560:	468f      	mov	pc, r1
		cbuf = CtrlBuf1;
20002562:	4835      	ldr	r0, [pc, #212]	; (20002638 <VgaLine+0x108>)
		dbuf = LineBuf1;
20002564:	4a35      	ldr	r2, [pc, #212]	; (2000263c <VgaLine+0x10c>)
20002566:	e7ea      	b.n	2000253e <VgaLine+0xe>
		y0 = line - CurVmode.vfirst1;
20002568:	2140      	movs	r1, #64	; 0x40
		y0 = line - CurVmode.vfirst2;
2000256a:	5a69      	ldrh	r1, [r5, r1]
2000256c:	1a5b      	subs	r3, r3, r1
		if (CurVmode.dbly) y0 >>= 1;
2000256e:	2155      	movs	r1, #85	; 0x55
20002570:	5c69      	ldrb	r1, [r5, r1]
20002572:	2900      	cmp	r1, #0
20002574:	d000      	beq.n	20002578 <VgaLine+0x48>
20002576:	105b      	asrs	r3, r3, #1
		y0 = (y0 << 1) + 1;
20002578:	005b      	lsls	r3, r3, #1
2000257a:	3301      	adds	r3, #1
		cbuf = VgaBufRender(cbuf, cbuf0, dbuf, y0);
2000257c:	0001      	movs	r1, r0
2000257e:	f7ff fe9d 	bl	200022bc <_Z12VgaBufRenderPmS_Phi>
20002582:	0003      	movs	r3, r0
	*cbuf++ = 0; // end mark
20002584:	2200      	movs	r2, #0
	hw_divider_restore_state(&DividerState);
20002586:	482e      	ldr	r0, [pc, #184]	; (20002640 <VgaLine+0x110>)
	*cbuf++ = 0; // end mark
20002588:	601a      	str	r2, [r3, #0]
	*cbuf++ = 0; // end mark
2000258a:	605a      	str	r2, [r3, #4]
	hw_divider_restore_state(&DividerState);
2000258c:	f000 f888 	bl	200026a0 <__hw_divider_restore_state_veneer>
}
20002590:	bd70      	pop	{r4, r5, r6, pc}
		y0 = line - CurVmode.vfirst2;
20002592:	214e      	movs	r1, #78	; 0x4e
20002594:	e7e9      	b.n	2000256a <VgaLine+0x3a>
		*cbuf++ = 2; // send 2x u32
20002596:	2302      	movs	r3, #2
		*cbuf++ = 4;	// send 4x u32
20002598:	6003      	str	r3, [r0, #0]
		*cbuf++ = (u32)&LineBufSync[0]; // half + half
2000259a:	0003      	movs	r3, r0
2000259c:	4a29      	ldr	r2, [pc, #164]	; (20002644 <VgaLine+0x114>)
2000259e:	3308      	adds	r3, #8
200025a0:	6042      	str	r2, [r0, #4]
		break;
200025a2:	e7ef      	b.n	20002584 <VgaLine+0x54>
		*cbuf++ = 4;	// send 4x u32
200025a4:	2304      	movs	r3, #4
200025a6:	6003      	str	r3, [r0, #0]
		*cbuf++ = (u32)&LineBufSync[4]; // VSYNC
200025a8:	0003      	movs	r3, r0
200025aa:	4a26      	ldr	r2, [pc, #152]	; (20002644 <VgaLine+0x114>)
200025ac:	3308      	adds	r3, #8
200025ae:	3210      	adds	r2, #16
200025b0:	6042      	str	r2, [r0, #4]
		break;
200025b2:	e7e7      	b.n	20002584 <VgaLine+0x54>
		*cbuf++ = 4;	// send 4x u32
200025b4:	2304      	movs	r3, #4
200025b6:	6003      	str	r3, [r0, #0]
		*cbuf++ = (u32)&LineBufSync[6]; // VSYNC + half
200025b8:	0003      	movs	r3, r0
200025ba:	4a22      	ldr	r2, [pc, #136]	; (20002644 <VgaLine+0x114>)
200025bc:	3308      	adds	r3, #8
200025be:	3218      	adds	r2, #24
200025c0:	6042      	str	r2, [r0, #4]
		break;
200025c2:	e7df      	b.n	20002584 <VgaLine+0x54>
		*cbuf++ = 4;	// send 4x u32
200025c4:	2304      	movs	r3, #4
200025c6:	e7e7      	b.n	20002598 <VgaLine+0x68>
		*cbuf++ = 4;	// send 4x u32
200025c8:	2304      	movs	r3, #4
200025ca:	6003      	str	r3, [r0, #0]
		*cbuf++ = (u32)&LineBufSync[2]; // half + VSYNC
200025cc:	0003      	movs	r3, r0
200025ce:	4a1d      	ldr	r2, [pc, #116]	; (20002644 <VgaLine+0x114>)
200025d0:	3308      	adds	r3, #8
200025d2:	3208      	adds	r2, #8
200025d4:	6042      	str	r2, [r0, #4]
		break;
200025d6:	e7d5      	b.n	20002584 <VgaLine+0x54>
		*cbuf++ = 2; // send 2x u32
200025d8:	2302      	movs	r3, #2
200025da:	6003      	str	r3, [r0, #0]
		*cbuf++ = (u32)LineBufDark; // dark
200025dc:	0003      	movs	r3, r0
200025de:	4a1a      	ldr	r2, [pc, #104]	; (20002648 <VgaLine+0x118>)
200025e0:	3308      	adds	r3, #8
200025e2:	6042      	str	r2, [r0, #4]
		break;
200025e4:	e7ce      	b.n	20002584 <VgaLine+0x54>
		y0 = line - CurVmode.vfirst1;
200025e6:	2140      	movs	r1, #64	; 0x40
200025e8:	5a69      	ldrh	r1, [r5, r1]
200025ea:	1a5b      	subs	r3, r3, r1
		if (CurVmode.dbly) y0 >>= 1;
200025ec:	2155      	movs	r1, #85	; 0x55
200025ee:	5c69      	ldrb	r1, [r5, r1]
200025f0:	2900      	cmp	r1, #0
200025f2:	d0c3      	beq.n	2000257c <VgaLine+0x4c>
200025f4:	105b      	asrs	r3, r3, #1
		cbuf = VgaBufRender(cbuf, cbuf0, dbuf, y0);
200025f6:	e7c1      	b.n	2000257c <VgaLine+0x4c>
		y0 = line - CurVmode.vfirst1;
200025f8:	2140      	movs	r1, #64	; 0x40
		y0 = line - CurVmode.vfirst2;
200025fa:	5a69      	ldrh	r1, [r5, r1]
200025fc:	1a5b      	subs	r3, r3, r1
		if (CurVmode.dbly) y0 >>= 1;
200025fe:	2155      	movs	r1, #85	; 0x55
20002600:	5c69      	ldrb	r1, [r5, r1]
20002602:	2900      	cmp	r1, #0
20002604:	d000      	beq.n	20002608 <VgaLine+0xd8>
20002606:	105b      	asrs	r3, r3, #1
		y0 <<= 1;
20002608:	005b      	lsls	r3, r3, #1
		cbuf = VgaBufRender(cbuf, cbuf0, dbuf, y0);
2000260a:	0001      	movs	r1, r0
2000260c:	f7ff fe56 	bl	200022bc <_Z12VgaBufRenderPmS_Phi>
20002610:	0003      	movs	r3, r0
		break;
20002612:	e7b7      	b.n	20002584 <VgaLine+0x54>
		y0 = line - CurVmode.vfirst2;
20002614:	214e      	movs	r1, #78	; 0x4e
20002616:	e7f0      	b.n	200025fa <VgaLine+0xca>
	switch (linetype)
20002618:	0003      	movs	r3, r0
2000261a:	e7b3      	b.n	20002584 <VgaLine+0x54>
2000261c:	20003f38 	.word	0x20003f38
20002620:	20005790 	.word	0x20005790
20002624:	20004998 	.word	0x20004998
20002628:	200049e8 	.word	0x200049e8
2000262c:	20006e48 	.word	0x20006e48
20002630:	20006e4c 	.word	0x20006e4c
20002634:	10029840 	.word	0x10029840
20002638:	200034d8 	.word	0x200034d8
2000263c:	20004d70 	.word	0x20004d70
20002640:	20004a44 	.word	0x20004a44
20002644:	200061cc 	.word	0x200061cc
20002648:	200061b0 	.word	0x200061b0

2000264c <__aeabi_idiv0>:
2000264c:	4770      	bx	lr
2000264e:	46c0      	nop			; (mov r8, r8)

20002650 <__best_effort_wfe_or_timeout_veneer>:
20002650:	b401      	push	{r0}
20002652:	4802      	ldr	r0, [pc, #8]	; (2000265c <__best_effort_wfe_or_timeout_veneer+0xc>)
20002654:	4684      	mov	ip, r0
20002656:	bc01      	pop	{r0}
20002658:	4760      	bx	ip
2000265a:	bf00      	nop
2000265c:	10002b91 	.word	0x10002b91

20002660 <____wrap___aeabi_lmul_veneer>:
20002660:	b401      	push	{r0}
20002662:	4802      	ldr	r0, [pc, #8]	; (2000266c <____wrap___aeabi_lmul_veneer+0xc>)
20002664:	4684      	mov	ip, r0
20002666:	bc01      	pop	{r0}
20002668:	4760      	bx	ip
2000266a:	bf00      	nop
2000266c:	100009a5 	.word	0x100009a5

20002670 <__rom_func_lookup_veneer>:
20002670:	b401      	push	{r0}
20002672:	4802      	ldr	r0, [pc, #8]	; (2000267c <__rom_func_lookup_veneer+0xc>)
20002674:	4684      	mov	ip, r0
20002676:	bc01      	pop	{r0}
20002678:	4760      	bx	ip
2000267a:	bf00      	nop
2000267c:	100009d9 	.word	0x100009d9

20002680 <__time_us_64_veneer>:
20002680:	b401      	push	{r0}
20002682:	4802      	ldr	r0, [pc, #8]	; (2000268c <__time_us_64_veneer+0xc>)
20002684:	4684      	mov	ip, r0
20002686:	bc01      	pop	{r0}
20002688:	4760      	bx	ip
2000268a:	bf00      	nop
2000268c:	10002ca5 	.word	0x10002ca5

20002690 <__hw_divider_save_state_veneer>:
20002690:	b401      	push	{r0}
20002692:	4802      	ldr	r0, [pc, #8]	; (2000269c <__hw_divider_save_state_veneer+0xc>)
20002694:	4684      	mov	ip, r0
20002696:	bc01      	pop	{r0}
20002698:	4760      	bx	ip
2000269a:	bf00      	nop
2000269c:	100007f9 	.word	0x100007f9

200026a0 <__hw_divider_restore_state_veneer>:
200026a0:	b401      	push	{r0}
200026a2:	4802      	ldr	r0, [pc, #8]	; (200026ac <__hw_divider_restore_state_veneer+0xc>)
200026a4:	4684      	mov	ip, r0
200026a6:	bc01      	pop	{r0}
200026a8:	4760      	bx	ip
200026aa:	bf00      	nop
200026ac:	10000815 	.word	0x10000815

200026b0 <aeabi_bits_funcs>:
200026b0:	00003350 	.word	0x00003350
200026b4:	0000334c 	.word	0x0000334c
200026b8:	00003354 	.word	0x00003354
200026bc:	00003352 	.word	0x00003352

200026c0 <aeabi_bits_funcs_end>:
200026c0:	00000000 	.word	0x00000000
200026c4:	00010000 	.word	0x00010000
	...
200026d0:	00020000 	.word	0x00020000
	...
200026dc:	00030000 	.word	0x00030000
	...
200026e8:	00ff0000 	.word	0x00ff0000
200026ec:	00000000 	.word	0x00000000

200026f0 <irq_handler_chain_first_slot>:
200026f0:	b500      	push	{lr}
200026f2:	6848      	ldr	r0, [r1, #4]
200026f4:	3101      	adds	r1, #1
200026f6:	468e      	mov	lr, r1
200026f8:	4700      	bx	r0

200026fa <irq_handler_chain_remove_tail>:
200026fa:	4670      	mov	r0, lr
200026fc:	3809      	subs	r0, #9
200026fe:	4901      	ldr	r1, [pc, #4]	; (20002704 <irq_handler_chain_remove_tail+0xa>)
20002700:	4788      	blx	r1
20002702:	bd00      	pop	{pc}
20002704:	100013b5 	.word	0x100013b5

20002708 <aeabi_mem_funcs>:
20002708:	0000534d 	.word	0x0000534d
2000270c:	0000434d 	.word	0x0000434d
20002710:	00003453 	.word	0x00003453
20002714:	00003443 	.word	0x00003443

20002718 <stdio_usb>:
20002718:	10002111 00000000 100020a9 00000000     .!....... ......
20002728:	00000100                                ....

2000272c <striped_spin_lock_num>:
2000272c:	00000010                                ....

20002730 <_usbd_qdef>:
20002730:	20011e68 000c0010 00000000 00000000     h.. ............
	...

20002750 <ep_dir_string>:
20002750:	1000e624 1000e628                       $...(...

20002758 <CtrlBufSize>:
20002758:	000000a6 000000a6 000000a6 000000a6     ................

20002768 <LineBufSize>:
20002768:	00000288 00000288 00000288 00000288     ................

20002778 <LayerNumPin>:
20002778:	08080808                                ....

2000277c <DefPal16>:
2000277c:	16140200 b6a8a2a0 5f5d4b49 fffdebe9     ........IK]_....

2000278c <pScreen>:
2000278c:	20007110                                .q. 

20002790 <VideoResTab>:
20002790:	10029cb4 10029cb4 10029cb4 10029c7c     ............|...
200027a0:	10029c7c 10029c7c 10029c7c 10029c7c     |...|...|...|...
200027b0:	10029c44 10029c44 10029c44 10029c0c     D...D...D.......
200027c0:	10029c0c 10029c0c 10029c0c 10029c0c     ................
200027d0:	10029b9c 10029d24 10029d24 10029b9c     ....$...$.......
200027e0:	10029d24 10029cec 10029d5c 10029bd4     $.......\.......

200027f0 <SoundInc>:
200027f0:	00000400                                ....

200027f4 <_impure_ptr>:
200027f4:	200027f8                                .'. 

200027f8 <impure_data>:
200027f8:	00000000 20002ae4 20002b4c 20002bb4     .....*. L+. .+. 
	...
200028a0:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
200028b0:	0005deec 0000000b 00000000 00000000     ................
	...

20002c20 <__malloc_av_>:
	...
20002c28:	20002c20 20002c20 20002c28 20002c28      ,.  ,. (,. (,. 
20002c38:	20002c30 20002c30 20002c38 20002c38     0,. 0,. 8,. 8,. 
20002c48:	20002c40 20002c40 20002c48 20002c48     @,. @,. H,. H,. 
20002c58:	20002c50 20002c50 20002c58 20002c58     P,. P,. X,. X,. 
20002c68:	20002c60 20002c60 20002c68 20002c68     `,. `,. h,. h,. 
20002c78:	20002c70 20002c70 20002c78 20002c78     p,. p,. x,. x,. 
20002c88:	20002c80 20002c80 20002c88 20002c88     .,. .,. .,. .,. 
20002c98:	20002c90 20002c90 20002c98 20002c98     .,. .,. .,. .,. 
20002ca8:	20002ca0 20002ca0 20002ca8 20002ca8     .,. .,. .,. .,. 
20002cb8:	20002cb0 20002cb0 20002cb8 20002cb8     .,. .,. .,. .,. 
20002cc8:	20002cc0 20002cc0 20002cc8 20002cc8     .,. .,. .,. .,. 
20002cd8:	20002cd0 20002cd0 20002cd8 20002cd8     .,. .,. .,. .,. 
20002ce8:	20002ce0 20002ce0 20002ce8 20002ce8     .,. .,. .,. .,. 
20002cf8:	20002cf0 20002cf0 20002cf8 20002cf8     .,. .,. .,. .,. 
20002d08:	20002d00 20002d00 20002d08 20002d08     .-. .-. .-. .-. 
20002d18:	20002d10 20002d10 20002d18 20002d18     .-. .-. .-. .-. 
20002d28:	20002d20 20002d20 20002d28 20002d28      -.  -. (-. (-. 
20002d38:	20002d30 20002d30 20002d38 20002d38     0-. 0-. 8-. 8-. 
20002d48:	20002d40 20002d40 20002d48 20002d48     @-. @-. H-. H-. 
20002d58:	20002d50 20002d50 20002d58 20002d58     P-. P-. X-. X-. 
20002d68:	20002d60 20002d60 20002d68 20002d68     `-. `-. h-. h-. 
20002d78:	20002d70 20002d70 20002d78 20002d78     p-. p-. x-. x-. 
20002d88:	20002d80 20002d80 20002d88 20002d88     .-. .-. .-. .-. 
20002d98:	20002d90 20002d90 20002d98 20002d98     .-. .-. .-. .-. 
20002da8:	20002da0 20002da0 20002da8 20002da8     .-. .-. .-. .-. 
20002db8:	20002db0 20002db0 20002db8 20002db8     .-. .-. .-. .-. 
20002dc8:	20002dc0 20002dc0 20002dc8 20002dc8     .-. .-. .-. .-. 
20002dd8:	20002dd0 20002dd0 20002dd8 20002dd8     .-. .-. .-. .-. 
20002de8:	20002de0 20002de0 20002de8 20002de8     .-. .-. .-. .-. 
20002df8:	20002df0 20002df0 20002df8 20002df8     .-. .-. .-. .-. 
20002e08:	20002e00 20002e00 20002e08 20002e08     ... ... ... ... 
20002e18:	20002e10 20002e10 20002e18 20002e18     ... ... ... ... 
20002e28:	20002e20 20002e20 20002e28 20002e28      ..  .. (.. (.. 
20002e38:	20002e30 20002e30 20002e38 20002e38     0.. 0.. 8.. 8.. 
20002e48:	20002e40 20002e40 20002e48 20002e48     @.. @.. H.. H.. 
20002e58:	20002e50 20002e50 20002e58 20002e58     P.. P.. X.. X.. 
20002e68:	20002e60 20002e60 20002e68 20002e68     `.. `.. h.. h.. 
20002e78:	20002e70 20002e70 20002e78 20002e78     p.. p.. x.. x.. 
20002e88:	20002e80 20002e80 20002e88 20002e88     ... ... ... ... 
20002e98:	20002e90 20002e90 20002e98 20002e98     ... ... ... ... 
20002ea8:	20002ea0 20002ea0 20002ea8 20002ea8     ... ... ... ... 
20002eb8:	20002eb0 20002eb0 20002eb8 20002eb8     ... ... ... ... 
20002ec8:	20002ec0 20002ec0 20002ec8 20002ec8     ... ... ... ... 
20002ed8:	20002ed0 20002ed0 20002ed8 20002ed8     ... ... ... ... 
20002ee8:	20002ee0 20002ee0 20002ee8 20002ee8     ... ... ... ... 
20002ef8:	20002ef0 20002ef0 20002ef8 20002ef8     ... ... ... ... 
20002f08:	20002f00 20002f00 20002f08 20002f08     ./. ./. ./. ./. 
20002f18:	20002f10 20002f10 20002f18 20002f18     ./. ./. ./. ./. 
20002f28:	20002f20 20002f20 20002f28 20002f28      /.  /. (/. (/. 
20002f38:	20002f30 20002f30 20002f38 20002f38     0/. 0/. 8/. 8/. 
20002f48:	20002f40 20002f40 20002f48 20002f48     @/. @/. H/. H/. 
20002f58:	20002f50 20002f50 20002f58 20002f58     P/. P/. X/. X/. 
20002f68:	20002f60 20002f60 20002f68 20002f68     `/. `/. h/. h/. 
20002f78:	20002f70 20002f70 20002f78 20002f78     p/. p/. x/. x/. 
20002f88:	20002f80 20002f80 20002f88 20002f88     ./. ./. ./. ./. 
20002f98:	20002f90 20002f90 20002f98 20002f98     ./. ./. ./. ./. 
20002fa8:	20002fa0 20002fa0 20002fa8 20002fa8     ./. ./. ./. ./. 
20002fb8:	20002fb0 20002fb0 20002fb8 20002fb8     ./. ./. ./. ./. 
20002fc8:	20002fc0 20002fc0 20002fc8 20002fc8     ./. ./. ./. ./. 
20002fd8:	20002fd0 20002fd0 20002fd8 20002fd8     ./. ./. ./. ./. 
20002fe8:	20002fe0 20002fe0 20002fe8 20002fe8     ./. ./. ./. ./. 
20002ff8:	20002ff0 20002ff0 20002ff8 20002ff8     ./. ./. ./. ./. 
20003008:	20003000 20003000 20003008 20003008     .0. .0. .0. .0. 
20003018:	20003010 20003010 20003018 20003018     .0. .0. .0. .0. 

20003028 <__malloc_sbrk_base>:
20003028:	ffffffff                                ....

2000302c <__malloc_trim_threshold>:
2000302c:	00020000                                ....

20003030 <print_mutex>:
	...

20003038 <__mutex_array_end>:
20003038:	1000097d 	.word	0x1000097d
2000303c:	1000030d 	.word	0x1000030d
20003040:	10000f51 	.word	0x10000f51
20003044:	10001011 	.word	0x10001011

20003048 <__frame_dummy_init_array_entry>:
20003048:	100002ed 10002e65                       ....e...
