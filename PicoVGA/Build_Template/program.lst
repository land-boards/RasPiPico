
build/program.elf:     file format elf32-littlearm


Disassembly of section .boot2:

10000000 <__boot2_start__>:
10000000:	4b32b500 	.word	0x4b32b500
10000004:	60582021 	.word	0x60582021
10000008:	21026898 	.word	0x21026898
1000000c:	60984388 	.word	0x60984388
10000010:	611860d8 	.word	0x611860d8
10000014:	4b2e6158 	.word	0x4b2e6158
10000018:	60992100 	.word	0x60992100
1000001c:	61592102 	.word	0x61592102
10000020:	22f02101 	.word	0x22f02101
10000024:	492b5099 	.word	0x492b5099
10000028:	21016019 	.word	0x21016019
1000002c:	20356099 	.word	0x20356099
10000030:	f844f000 	.word	0xf844f000
10000034:	42902202 	.word	0x42902202
10000038:	2106d014 	.word	0x2106d014
1000003c:	f0006619 	.word	0xf0006619
10000040:	6e19f834 	.word	0x6e19f834
10000044:	66192101 	.word	0x66192101
10000048:	66182000 	.word	0x66182000
1000004c:	f000661a 	.word	0xf000661a
10000050:	6e19f82c 	.word	0x6e19f82c
10000054:	6e196e19 	.word	0x6e196e19
10000058:	f0002005 	.word	0xf0002005
1000005c:	2101f82f 	.word	0x2101f82f
10000060:	d1f94208 	.word	0xd1f94208
10000064:	60992100 	.word	0x60992100
10000068:	6019491b 	.word	0x6019491b
1000006c:	60592100 	.word	0x60592100
10000070:	481b491a 	.word	0x481b491a
10000074:	21016001 	.word	0x21016001
10000078:	21eb6099 	.word	0x21eb6099
1000007c:	21a06619 	.word	0x21a06619
10000080:	f0006619 	.word	0xf0006619
10000084:	2100f812 	.word	0x2100f812
10000088:	49166099 	.word	0x49166099
1000008c:	60014814 	.word	0x60014814
10000090:	60992101 	.word	0x60992101
10000094:	2800bc01 	.word	0x2800bc01
10000098:	4700d000 	.word	0x4700d000
1000009c:	49134812 	.word	0x49134812
100000a0:	c8036008 	.word	0xc8036008
100000a4:	8808f380 	.word	0x8808f380
100000a8:	b5034708 	.word	0xb5034708
100000ac:	20046a99 	.word	0x20046a99
100000b0:	d0fb4201 	.word	0xd0fb4201
100000b4:	42012001 	.word	0x42012001
100000b8:	bd03d1f8 	.word	0xbd03d1f8
100000bc:	6618b502 	.word	0x6618b502
100000c0:	f7ff6618 	.word	0xf7ff6618
100000c4:	6e18fff2 	.word	0x6e18fff2
100000c8:	bd026e18 	.word	0xbd026e18
100000cc:	40020000 	.word	0x40020000
100000d0:	18000000 	.word	0x18000000
100000d4:	00070000 	.word	0x00070000
100000d8:	005f0300 	.word	0x005f0300
100000dc:	00002221 	.word	0x00002221
100000e0:	180000f4 	.word	0x180000f4
100000e4:	a0002022 	.word	0xa0002022
100000e8:	10000100 	.word	0x10000100
100000ec:	e000ed08 	.word	0xe000ed08
	...
100000fc:	7a4eb274 	.word	0x7a4eb274

Disassembly of section .text:

10000100 <__logical_binary_start>:
10000100:	20042000 	.word	0x20042000
10000104:	100001f7 	.word	0x100001f7
10000108:	100001c3 	.word	0x100001c3
1000010c:	100001c5 	.word	0x100001c5
10000110:	100001c1 	.word	0x100001c1
10000114:	100001c1 	.word	0x100001c1
10000118:	100001c1 	.word	0x100001c1
1000011c:	100001c1 	.word	0x100001c1
10000120:	100001c1 	.word	0x100001c1
10000124:	100001c1 	.word	0x100001c1
10000128:	100001c1 	.word	0x100001c1
1000012c:	100001c7 	.word	0x100001c7
10000130:	100001c1 	.word	0x100001c1
10000134:	100001c1 	.word	0x100001c1
10000138:	100001c9 	.word	0x100001c9
1000013c:	100001cb 	.word	0x100001cb
10000140:	100001cd 	.word	0x100001cd
10000144:	100001cd 	.word	0x100001cd
10000148:	100001cd 	.word	0x100001cd
1000014c:	100001cd 	.word	0x100001cd
10000150:	100001cd 	.word	0x100001cd
10000154:	100001cd 	.word	0x100001cd
10000158:	100001cd 	.word	0x100001cd
1000015c:	100001cd 	.word	0x100001cd
10000160:	100001cd 	.word	0x100001cd
10000164:	100001cd 	.word	0x100001cd
10000168:	100001cd 	.word	0x100001cd
1000016c:	100001cd 	.word	0x100001cd
10000170:	100001cd 	.word	0x100001cd
10000174:	100001cd 	.word	0x100001cd
10000178:	100001cd 	.word	0x100001cd
1000017c:	100001cd 	.word	0x100001cd
10000180:	100001cd 	.word	0x100001cd
10000184:	100001cd 	.word	0x100001cd
10000188:	100001cd 	.word	0x100001cd
1000018c:	100001cd 	.word	0x100001cd
10000190:	100001cd 	.word	0x100001cd
10000194:	100001cd 	.word	0x100001cd
10000198:	100001cd 	.word	0x100001cd
1000019c:	100001cd 	.word	0x100001cd
100001a0:	100001cd 	.word	0x100001cd
100001a4:	100001cd 	.word	0x100001cd
100001a8:	100001cd 	.word	0x100001cd
100001ac:	100001cd 	.word	0x100001cd
100001b0:	100001cd 	.word	0x100001cd
100001b4:	100001cd 	.word	0x100001cd
100001b8:	100001cd 	.word	0x100001cd
100001bc:	100001cd 	.word	0x100001cd

100001c0 <isr_invalid>:
100001c0:	be00      	bkpt	0x0000

100001c2 <isr_nmi>:
100001c2:	be00      	bkpt	0x0000

100001c4 <isr_hardfault>:
100001c4:	be00      	bkpt	0x0000

100001c6 <isr_svcall>:
100001c6:	be00      	bkpt	0x0000

100001c8 <isr_pendsv>:
100001c8:	be00      	bkpt	0x0000

100001ca <isr_systick>:
100001ca:	be00      	bkpt	0x0000

100001cc <__unhandled_user_irq>:
100001cc:	f000 f84b 	bl	10000266 <__get_current_exception>
100001d0:	3810      	subs	r0, #16

100001d2 <unhandled_user_irq_num_in_r0>:
100001d2:	be00      	bkpt	0x0000

100001d4 <binary_info_header>:
100001d4:	7188ebf2 	.word	0x7188ebf2
100001d8:	100024e8 	.word	0x100024e8
100001dc:	10002504 	.word	0x10002504
100001e0:	10000234 	.word	0x10000234
100001e4:	e71aa390 	.word	0xe71aa390

100001e8 <_entry_point>:
100001e8:	2000      	movs	r0, #0
100001ea:	4921      	ldr	r1, [pc, #132]	; (10000270 <__get_current_exception+0xa>)
100001ec:	6008      	str	r0, [r1, #0]
100001ee:	c806      	ldmia	r0!, {r1, r2}
100001f0:	f381 8808 	msr	MSP, r1
100001f4:	4710      	bx	r2

100001f6 <_reset_handler>:
100001f6:	481f      	ldr	r0, [pc, #124]	; (10000274 <__get_current_exception+0xe>)
100001f8:	6800      	ldr	r0, [r0, #0]
100001fa:	2800      	cmp	r0, #0
100001fc:	d12f      	bne.n	1000025e <hold_non_core0_in_bootrom>
100001fe:	a40d      	add	r4, pc, #52	; (adr r4, 10000234 <data_cpy_table>)
10000200:	cc0e      	ldmia	r4!, {r1, r2, r3}
10000202:	2900      	cmp	r1, #0
10000204:	d002      	beq.n	1000020c <_reset_handler+0x16>
10000206:	f000 f812 	bl	1000022e <data_cpy>
1000020a:	e7f9      	b.n	10000200 <_reset_handler+0xa>
1000020c:	491a      	ldr	r1, [pc, #104]	; (10000278 <__get_current_exception+0x12>)
1000020e:	4a1b      	ldr	r2, [pc, #108]	; (1000027c <__get_current_exception+0x16>)
10000210:	2000      	movs	r0, #0
10000212:	e000      	b.n	10000216 <bss_fill_test>

10000214 <bss_fill_loop>:
10000214:	c101      	stmia	r1!, {r0}

10000216 <bss_fill_test>:
10000216:	4291      	cmp	r1, r2
10000218:	d1fc      	bne.n	10000214 <bss_fill_loop>

1000021a <platform_entry>:
1000021a:	4919      	ldr	r1, [pc, #100]	; (10000280 <__get_current_exception+0x1a>)
1000021c:	4788      	blx	r1
1000021e:	4919      	ldr	r1, [pc, #100]	; (10000284 <__get_current_exception+0x1e>)
10000220:	4788      	blx	r1
10000222:	4919      	ldr	r1, [pc, #100]	; (10000288 <__get_current_exception+0x22>)
10000224:	4788      	blx	r1
10000226:	be00      	bkpt	0x0000
10000228:	e7fd      	b.n	10000226 <platform_entry+0xc>

1000022a <data_cpy_loop>:
1000022a:	c901      	ldmia	r1!, {r0}
1000022c:	c201      	stmia	r2!, {r0}

1000022e <data_cpy>:
1000022e:	429a      	cmp	r2, r3
10000230:	d3fb      	bcc.n	1000022a <data_cpy_loop>
10000232:	4770      	bx	lr

10000234 <data_cpy_table>:
10000234:	10002504 	.word	0x10002504
10000238:	200000c0 	.word	0x200000c0
1000023c:	20000b78 	.word	0x20000b78
10000240:	10002fbc 	.word	0x10002fbc
10000244:	20040000 	.word	0x20040000
10000248:	20040000 	.word	0x20040000
1000024c:	10002fbc 	.word	0x10002fbc
10000250:	20041000 	.word	0x20041000
10000254:	20041000 	.word	0x20041000
10000258:	00000000 	.word	0x00000000
1000025c:	4770      	bx	lr

1000025e <hold_non_core0_in_bootrom>:
1000025e:	480b      	ldr	r0, [pc, #44]	; (1000028c <__get_current_exception+0x26>)
10000260:	f000 f8c6 	bl	100003f0 <rom_func_lookup>
10000264:	4700      	bx	r0

10000266 <__get_current_exception>:
10000266:	f3ef 8005 	mrs	r0, IPSR
1000026a:	b2c0      	uxtb	r0, r0
1000026c:	4770      	bx	lr
1000026e:	0000      	.short	0x0000
10000270:	e000ed08 	.word	0xe000ed08
10000274:	d0000000 	.word	0xd0000000
10000278:	20000b78 	.word	0x20000b78
1000027c:	20000f4c 	.word	0x20000f4c
10000280:	100010a1 	.word	0x100010a1
10000284:	10001a71 	.word	0x10001a71
10000288:	100011c1 	.word	0x100011c1
1000028c:	00005657 	.word	0x00005657

10000290 <__bi_46>:
10000290:	50520006 5360b3ab 10002460              ..RP..`S`$..

1000029c <__bi_34>:
1000029c:	50520006 02031c86 10002468              ..RP....h$..

100002a8 <__bi_26>:
100002a8:	50520006 9da22254 10002470              ..RPT"..p$..

100002b4 <__bi_18>:
100002b4:	50520005 68f465de 10002fbc              ..RP.e.h./..

100002c0 <_init>:
100002c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100002c2:	46c0      	nop			; (mov r8, r8)

100002c4 <__do_global_dtors_aux>:
100002c4:	b510      	push	{r4, lr}
100002c6:	4c06      	ldr	r4, [pc, #24]	; (100002e0 <__do_global_dtors_aux+0x1c>)
100002c8:	7823      	ldrb	r3, [r4, #0]
100002ca:	2b00      	cmp	r3, #0
100002cc:	d107      	bne.n	100002de <__do_global_dtors_aux+0x1a>
100002ce:	4b05      	ldr	r3, [pc, #20]	; (100002e4 <__do_global_dtors_aux+0x20>)
100002d0:	2b00      	cmp	r3, #0
100002d2:	d002      	beq.n	100002da <__do_global_dtors_aux+0x16>
100002d4:	4804      	ldr	r0, [pc, #16]	; (100002e8 <__do_global_dtors_aux+0x24>)
100002d6:	e000      	b.n	100002da <__do_global_dtors_aux+0x16>
100002d8:	bf00      	nop
100002da:	2301      	movs	r3, #1
100002dc:	7023      	strb	r3, [r4, #0]
100002de:	bd10      	pop	{r4, pc}
100002e0:	20000d78 	.word	0x20000d78
100002e4:	00000000 	.word	0x00000000
100002e8:	10002428 	.word	0x10002428

100002ec <frame_dummy>:
100002ec:	4b04      	ldr	r3, [pc, #16]	; (10000300 <frame_dummy+0x14>)
100002ee:	b510      	push	{r4, lr}
100002f0:	2b00      	cmp	r3, #0
100002f2:	d003      	beq.n	100002fc <frame_dummy+0x10>
100002f4:	4903      	ldr	r1, [pc, #12]	; (10000304 <frame_dummy+0x18>)
100002f6:	4804      	ldr	r0, [pc, #16]	; (10000308 <frame_dummy+0x1c>)
100002f8:	e000      	b.n	100002fc <frame_dummy+0x10>
100002fa:	bf00      	nop
100002fc:	bd10      	pop	{r4, pc}
100002fe:	46c0      	nop			; (mov r8, r8)
10000300:	00000000 	.word	0x00000000
10000304:	20000d7c 	.word	0x20000d7c
10000308:	10002428 	.word	0x10002428

1000030c <__aeabi_bits_init>:
1000030c:	4801      	ldr	r0, [pc, #4]	; (10000314 <__aeabi_bits_init+0x8>)
1000030e:	2104      	movs	r1, #4
10000310:	4b01      	ldr	r3, [pc, #4]	; (10000318 <__aeabi_bits_init+0xc>)
10000312:	4718      	bx	r3
10000314:	200002b0 	.word	0x200002b0
10000318:	10000411 	.word	0x10000411

1000031c <__wrap___aeabi_uidiv>:
1000031c:	4a13      	ldr	r2, [pc, #76]	; (1000036c <divmod_u32u32_savestate+0x20>)
1000031e:	6f93      	ldr	r3, [r2, #120]	; 0x78
10000320:	089b      	lsrs	r3, r3, #2
10000322:	d213      	bcs.n	1000034c <divmod_u32u32_savestate>

10000324 <divmod_u32u32_unsafe>:
10000324:	6610      	str	r0, [r2, #96]	; 0x60
10000326:	6651      	str	r1, [r2, #100]	; 0x64
10000328:	2900      	cmp	r1, #0
1000032a:	d005      	beq.n	10000338 <divmod_u32u32_unsafe+0x14>
1000032c:	e7ff      	b.n	1000032e <divmod_u32u32_unsafe+0xa>
1000032e:	e7ff      	b.n	10000330 <divmod_u32u32_unsafe+0xc>
10000330:	e7ff      	b.n	10000332 <divmod_u32u32_unsafe+0xe>
10000332:	6f51      	ldr	r1, [r2, #116]	; 0x74
10000334:	6f10      	ldr	r0, [r2, #112]	; 0x70
10000336:	4770      	bx	lr
10000338:	b504      	push	{r2, lr}
1000033a:	2800      	cmp	r0, #0
1000033c:	d001      	beq.n	10000342 <divmod_u32u32_unsafe+0x1e>
1000033e:	2000      	movs	r0, #0
10000340:	43c0      	mvns	r0, r0
10000342:	f002 f851 	bl	100023e8 <____aeabi_idiv0_veneer>
10000346:	2100      	movs	r1, #0
10000348:	bd04      	pop	{r2, pc}
1000034a:	46c0      	nop			; (mov r8, r8)

1000034c <divmod_u32u32_savestate>:
1000034c:	6f93      	ldr	r3, [r2, #120]	; 0x78
1000034e:	085b      	lsrs	r3, r3, #1
10000350:	d3fd      	bcc.n	1000034e <divmod_u32u32_savestate+0x2>
10000352:	b5f0      	push	{r4, r5, r6, r7, lr}
10000354:	6e94      	ldr	r4, [r2, #104]	; 0x68
10000356:	6ed5      	ldr	r5, [r2, #108]	; 0x6c
10000358:	6f57      	ldr	r7, [r2, #116]	; 0x74
1000035a:	6f16      	ldr	r6, [r2, #112]	; 0x70
1000035c:	f7ff ffe2 	bl	10000324 <divmod_u32u32_unsafe>
10000360:	6694      	str	r4, [r2, #104]	; 0x68
10000362:	66d5      	str	r5, [r2, #108]	; 0x6c
10000364:	6757      	str	r7, [r2, #116]	; 0x74
10000366:	6716      	str	r6, [r2, #112]	; 0x70
10000368:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000036a:	0000      	.short	0x0000
1000036c:	d0000000 	.word	0xd0000000

10000370 <double_table_shim_on_use_helper>:
10000370:	b507      	push	{r0, r1, r2, lr}
10000372:	4660      	mov	r0, ip
10000374:	8801      	ldrh	r1, [r0, #0]
10000376:	0a0a      	lsrs	r2, r1, #8
10000378:	3002      	adds	r0, #2
1000037a:	2adf      	cmp	r2, #223	; 0xdf
1000037c:	d1fa      	bne.n	10000374 <double_table_shim_on_use_helper+0x4>
1000037e:	b2c9      	uxtb	r1, r1
10000380:	0882      	lsrs	r2, r0, #2
10000382:	d304      	bcc.n	1000038e <double_table_shim_on_use_helper+0x1e>
10000384:	8802      	ldrh	r2, [r0, #0]
10000386:	8840      	ldrh	r0, [r0, #2]
10000388:	0400      	lsls	r0, r0, #16
1000038a:	4310      	orrs	r0, r2
1000038c:	e000      	b.n	10000390 <double_table_shim_on_use_helper+0x20>
1000038e:	6800      	ldr	r0, [r0, #0]
10000390:	4a01      	ldr	r2, [pc, #4]	; (10000398 <double_table_shim_on_use_helper+0x28>)
10000392:	5050      	str	r0, [r2, r1]
10000394:	9003      	str	r0, [sp, #12]
10000396:	bd07      	pop	{r0, r1, r2, pc}
10000398:	20000b78 	.word	0x20000b78

1000039c <float_table_shim_on_use_helper>:
1000039c:	b507      	push	{r0, r1, r2, lr}
1000039e:	4660      	mov	r0, ip
100003a0:	8801      	ldrh	r1, [r0, #0]
100003a2:	0a0a      	lsrs	r2, r1, #8
100003a4:	3002      	adds	r0, #2
100003a6:	2adf      	cmp	r2, #223	; 0xdf
100003a8:	d1fa      	bne.n	100003a0 <float_table_shim_on_use_helper+0x4>
100003aa:	b2c9      	uxtb	r1, r1
100003ac:	0882      	lsrs	r2, r0, #2
100003ae:	d304      	bcc.n	100003ba <float_table_shim_on_use_helper+0x1e>
100003b0:	8802      	ldrh	r2, [r0, #0]
100003b2:	8840      	ldrh	r0, [r0, #2]
100003b4:	0400      	lsls	r0, r0, #16
100003b6:	4310      	orrs	r0, r2
100003b8:	e000      	b.n	100003bc <float_table_shim_on_use_helper+0x20>
100003ba:	6800      	ldr	r0, [r0, #0]
100003bc:	4a01      	ldr	r2, [pc, #4]	; (100003c4 <float_table_shim_on_use_helper+0x28>)
100003be:	5050      	str	r0, [r2, r1]
100003c0:	9003      	str	r0, [sp, #12]
100003c2:	bd07      	pop	{r0, r1, r2, pc}
100003c4:	20000c78 	.word	0x20000c78

100003c8 <__aeabi_mem_init>:
100003c8:	4801      	ldr	r0, [pc, #4]	; (100003d0 <__aeabi_mem_init+0x8>)
100003ca:	2104      	movs	r1, #4
100003cc:	4b01      	ldr	r3, [pc, #4]	; (100003d4 <__aeabi_mem_init+0xc>)
100003ce:	4718      	bx	r3
100003d0:	20000308 	.word	0x20000308
100003d4:	10000411 	.word	0x10000411

100003d8 <__wrap_memset>:
100003d8:	4b01      	ldr	r3, [pc, #4]	; (100003e0 <__wrap_memset+0x8>)
100003da:	681b      	ldr	r3, [r3, #0]
100003dc:	4718      	bx	r3
100003de:	0000      	.short	0x0000
100003e0:	20000308 	.word	0x20000308

100003e4 <__wrap___aeabi_memcpy>:
100003e4:	4b01      	ldr	r3, [pc, #4]	; (100003ec <__wrap___aeabi_memcpy+0x8>)
100003e6:	685b      	ldr	r3, [r3, #4]
100003e8:	4718      	bx	r3
100003ea:	0000      	.short	0x0000
100003ec:	20000308 	.word	0x20000308

100003f0 <rom_func_lookup>:
// Convert a 16 bit pointer stored at the given rom address into a 32 bit pointer
#define rom_hword_as_ptr(rom_address) (void *)(uintptr_t)(*(uint16_t *)rom_address)

void *rom_func_lookup(uint32_t code) {
    rom_table_lookup_fn rom_table_lookup = (rom_table_lookup_fn) rom_hword_as_ptr(0x18);
    uint16_t *func_table = (uint16_t *) rom_hword_as_ptr(0x14);
100003f0:	2314      	movs	r3, #20
void *rom_func_lookup(uint32_t code) {
100003f2:	b510      	push	{r4, lr}
100003f4:	0001      	movs	r1, r0
    uint16_t *func_table = (uint16_t *) rom_hword_as_ptr(0x14);
100003f6:	8818      	ldrh	r0, [r3, #0]
    rom_table_lookup_fn rom_table_lookup = (rom_table_lookup_fn) rom_hword_as_ptr(0x18);
100003f8:	3304      	adds	r3, #4
100003fa:	881b      	ldrh	r3, [r3, #0]
    return rom_table_lookup(func_table, code);
100003fc:	4798      	blx	r3
}
100003fe:	bd10      	pop	{r4, pc}

10000400 <rom_data_lookup>:

void *rom_data_lookup(uint32_t code) {
    rom_table_lookup_fn rom_table_lookup = (rom_table_lookup_fn) rom_hword_as_ptr(0x18);
    uint16_t *data_table = (uint16_t *) rom_hword_as_ptr(0x16);
10000400:	2316      	movs	r3, #22
void *rom_data_lookup(uint32_t code) {
10000402:	b510      	push	{r4, lr}
10000404:	0001      	movs	r1, r0
    uint16_t *data_table = (uint16_t *) rom_hword_as_ptr(0x16);
10000406:	8818      	ldrh	r0, [r3, #0]
    rom_table_lookup_fn rom_table_lookup = (rom_table_lookup_fn) rom_hword_as_ptr(0x18);
10000408:	3302      	adds	r3, #2
1000040a:	881b      	ldrh	r3, [r3, #0]
    return rom_table_lookup(data_table, code);
1000040c:	4798      	blx	r3
}
1000040e:	bd10      	pop	{r4, pc}

10000410 <rom_funcs_lookup>:
/// \end::table_lookup[]

bool rom_funcs_lookup(uint32_t *table, unsigned int count) {
10000410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10000412:	4647      	mov	r7, r8
10000414:	46ce      	mov	lr, r9
10000416:	b580      	push	{r7, lr}
10000418:	1e0f      	subs	r7, r1, #0
    bool ok = true;
    for (unsigned int i = 0; i < count; i++) {
1000041a:	d019      	beq.n	10000450 <rom_funcs_lookup+0x40>
    uint16_t *func_table = (uint16_t *) rom_hword_as_ptr(0x14);
1000041c:	2314      	movs	r3, #20
1000041e:	4699      	mov	r9, r3
    rom_table_lookup_fn rom_table_lookup = (rom_table_lookup_fn) rom_hword_as_ptr(0x18);
10000420:	3304      	adds	r3, #4
10000422:	0004      	movs	r4, r0
    for (unsigned int i = 0; i < count; i++) {
10000424:	2500      	movs	r5, #0
    bool ok = true;
10000426:	2601      	movs	r6, #1
    rom_table_lookup_fn rom_table_lookup = (rom_table_lookup_fn) rom_hword_as_ptr(0x18);
10000428:	4698      	mov	r8, r3
    uint16_t *func_table = (uint16_t *) rom_hword_as_ptr(0x14);
1000042a:	464b      	mov	r3, r9
1000042c:	8818      	ldrh	r0, [r3, #0]
    rom_table_lookup_fn rom_table_lookup = (rom_table_lookup_fn) rom_hword_as_ptr(0x18);
1000042e:	4643      	mov	r3, r8
    return rom_table_lookup(func_table, code);
10000430:	6821      	ldr	r1, [r4, #0]
    rom_table_lookup_fn rom_table_lookup = (rom_table_lookup_fn) rom_hword_as_ptr(0x18);
10000432:	881b      	ldrh	r3, [r3, #0]
    return rom_table_lookup(func_table, code);
10000434:	4798      	blx	r3
        table[i] = (uintptr_t) rom_func_lookup(table[i]);
10000436:	c401      	stmia	r4!, {r0}
        if (!table[i]) ok = false;
10000438:	1e43      	subs	r3, r0, #1
1000043a:	4198      	sbcs	r0, r3
    for (unsigned int i = 0; i < count; i++) {
1000043c:	3501      	adds	r5, #1
        if (!table[i]) ok = false;
1000043e:	4240      	negs	r0, r0
10000440:	4006      	ands	r6, r0
    for (unsigned int i = 0; i < count; i++) {
10000442:	42af      	cmp	r7, r5
10000444:	d1f1      	bne.n	1000042a <rom_funcs_lookup+0x1a>
    }
    return ok;
}
10000446:	0030      	movs	r0, r6
10000448:	bcc0      	pop	{r6, r7}
1000044a:	46b9      	mov	r9, r7
1000044c:	46b0      	mov	r8, r6
1000044e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bool ok = true;
10000450:	2601      	movs	r6, #1
10000452:	e7f8      	b.n	10000446 <rom_funcs_lookup+0x36>

10000454 <hw_claim_or_assert>:
    }
    hw_claim_unlock(save);
    return rc;
}

void hw_claim_or_assert(uint8_t *bits, uint bit_index, const char *message) {
10000454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10000456:	46ce      	mov	lr, r9
10000458:	4647      	mov	r7, r8
1000045a:	4691      	mov	r9, r2
1000045c:	b580      	push	{r7, lr}
 *
 * \return The prior interrupt enable status for restoration later via restore_interrupts()
 */
inline static uint32_t save_and_disable_interrupts() {
    uint32_t status;
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
1000045e:	f3ef 8c10 	mrs	ip, PRIMASK
    __asm volatile ("cpsid i");
10000462:	b672      	cpsid	i
 */
inline static void spin_lock_unsafe_blocking(spin_lock_t *lock) {
    // Note we don't do a wfe or anything, because by convention these spin_locks are VERY SHORT LIVED and NEVER BLOCK and run
    // with INTERRUPTS disabled (to ensure that)... therefore nothing on our core could be blocking us, so we just need to wait on another core
    // anyway which should be finished soon
    while (__builtin_expect(!*lock, 0));
10000464:	4d10      	ldr	r5, [pc, #64]	; (100004a8 <hw_claim_or_assert+0x54>)
10000466:	682b      	ldr	r3, [r5, #0]
10000468:	2b00      	cmp	r3, #0
1000046a:	d0fc      	beq.n	10000466 <hw_claim_or_assert+0x12>
    __asm volatile ("dmb");
1000046c:	f3bf 8f5f 	dmb	sy
    uint32_t save = hw_claim_lock();
    if (bits[bit_index >> 3u] & (1u << (bit_index & 7u))) {
10000470:	08cb      	lsrs	r3, r1, #3
10000472:	5cc4      	ldrb	r4, [r0, r3]
10000474:	18c7      	adds	r7, r0, r3
10000476:	2007      	movs	r0, #7
10000478:	0026      	movs	r6, r4
1000047a:	2301      	movs	r3, #1
1000047c:	4008      	ands	r0, r1
1000047e:	40c6      	lsrs	r6, r0
10000480:	001a      	movs	r2, r3
10000482:	4032      	ands	r2, r6
10000484:	4233      	tst	r3, r6
10000486:	d10b      	bne.n	100004a0 <hw_claim_or_assert+0x4c>
        panic(message, bit_index);
    } else {
        bits[bit_index >> 3u] |= (1u << (bit_index & 7u));
10000488:	4083      	lsls	r3, r0
1000048a:	4323      	orrs	r3, r4
1000048c:	703b      	strb	r3, [r7, #0]
1000048e:	f3bf 8f5f 	dmb	sy
 *
 * \param lock Spinlock instance
 */
inline static void spin_unlock_unsafe(spin_lock_t *lock) {
    __mem_fence_release();
    *lock = 0;
10000492:	602a      	str	r2, [r5, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10000494:	f38c 8810 	msr	PRIMASK, ip
    }
    hw_claim_unlock(save);
}
10000498:	bcc0      	pop	{r6, r7}
1000049a:	46b9      	mov	r9, r7
1000049c:	46b0      	mov	r8, r6
1000049e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        panic(message, bit_index);
100004a0:	4648      	mov	r0, r9
100004a2:	f000 fe8f 	bl	100011c4 <panic>
100004a6:	46c0      	nop			; (mov r8, r8)
100004a8:	d000012c 	.word	0xd000012c

100004ac <clocks_init>:

    return true;
}
/// \end::clock_configure[]

void clocks_init(void) {
100004ac:	b530      	push	{r4, r5, lr}
    // Start tick in watchdog
    watchdog_start_tick(XOSC_MHZ);
100004ae:	200c      	movs	r0, #12
void clocks_init(void) {
100004b0:	b083      	sub	sp, #12
    watchdog_start_tick(XOSC_MHZ);
100004b2:	f001 fac1 	bl	10001a38 <watchdog_start_tick>

    // Everything is 48MHz on FPGA apart from RTC. Otherwise set to 0 and will be set in clock configure
    if (running_on_fpga()) {
100004b6:	f000 fd9d 	bl	10000ff4 <running_on_fpga>
100004ba:	2800      	cmp	r0, #0
100004bc:	d00e      	beq.n	100004dc <clocks_init+0x30>
        for (uint i = 0; i < CLK_COUNT; i++) {
            configured_freq[i] = 48 * MHZ;
100004be:	4b9a      	ldr	r3, [pc, #616]	; (10000728 <clocks_init+0x27c>)
100004c0:	4a9a      	ldr	r2, [pc, #616]	; (1000072c <clocks_init+0x280>)
100004c2:	601a      	str	r2, [r3, #0]
100004c4:	605a      	str	r2, [r3, #4]
100004c6:	609a      	str	r2, [r3, #8]
100004c8:	60da      	str	r2, [r3, #12]
100004ca:	611a      	str	r2, [r3, #16]
100004cc:	615a      	str	r2, [r3, #20]
100004ce:	619a      	str	r2, [r3, #24]
100004d0:	61da      	str	r2, [r3, #28]
100004d2:	621a      	str	r2, [r3, #32]
        }
        configured_freq[clk_rtc] = 46875;
100004d4:	4a96      	ldr	r2, [pc, #600]	; (10000730 <clocks_init+0x284>)
100004d6:	625a      	str	r2, [r3, #36]	; 0x24
    clock_configure(clk_peri,
                    0,
                    CLOCKS_CLK_PERI_CTRL_AUXSRC_VALUE_CLK_SYS,
                    125 * MHZ,
                    125 * MHZ);
}
100004d8:	b003      	add	sp, #12
100004da:	bd30      	pop	{r4, r5, pc}
    clocks_hw->resus.ctrl = 0;
100004dc:	4c95      	ldr	r4, [pc, #596]	; (10000734 <clocks_init+0x288>)
100004de:	67a0      	str	r0, [r4, #120]	; 0x78
    xosc_init();
100004e0:	f001 fab2 	bl	10001a48 <xosc_init>
 *
 * \param addr Address of writable register
 * \param mask Bit-mask specifying bits to clear
 */
inline static void hw_clear_bits(io_rw_32 *addr, uint32_t mask) {
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
100004e4:	2201      	movs	r2, #1
100004e6:	4b94      	ldr	r3, [pc, #592]	; (10000738 <clocks_init+0x28c>)
100004e8:	601a      	str	r2, [r3, #0]
    while (clocks_hw->clk[clk_sys].selected != 0x1)
100004ea:	6c63      	ldr	r3, [r4, #68]	; 0x44
100004ec:	2b01      	cmp	r3, #1
100004ee:	d1fc      	bne.n	100004ea <clocks_init+0x3e>
100004f0:	2203      	movs	r2, #3
100004f2:	4b92      	ldr	r3, [pc, #584]	; (1000073c <clocks_init+0x290>)
100004f4:	601a      	str	r2, [r3, #0]
    while (clocks_hw->clk[clk_ref].selected != 0x1)
100004f6:	4a8f      	ldr	r2, [pc, #572]	; (10000734 <clocks_init+0x288>)
100004f8:	6b93      	ldr	r3, [r2, #56]	; 0x38
100004fa:	2b01      	cmp	r3, #1
100004fc:	d1fc      	bne.n	100004f8 <clocks_init+0x4c>
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
100004fe:	22c0      	movs	r2, #192	; 0xc0
10000500:	4b8f      	ldr	r3, [pc, #572]	; (10000740 <clocks_init+0x294>)
10000502:	0192      	lsls	r2, r2, #6
10000504:	601a      	str	r2, [r3, #0]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10000506:	4b8f      	ldr	r3, [pc, #572]	; (10000744 <clocks_init+0x298>)
 *
 * \param bits Bit pattern indicating blocks to unreset. See \ref reset_bitmask
 */
static inline void unreset_block_wait(uint32_t bits) {
    hw_clear_bits(&resets_hw->reset, bits);
    while (~resets_hw->reset_done & bits)
10000508:	498f      	ldr	r1, [pc, #572]	; (10000748 <clocks_init+0x29c>)
1000050a:	601a      	str	r2, [r3, #0]
1000050c:	0010      	movs	r0, r2
1000050e:	688b      	ldr	r3, [r1, #8]
10000510:	4398      	bics	r0, r3
10000512:	1e03      	subs	r3, r0, #0
10000514:	d1fa      	bne.n	1000050c <clocks_init+0x60>
    pll_init(pll_sys, 1, 1500 * MHZ, 6, 2);
10000516:	2402      	movs	r4, #2
10000518:	2101      	movs	r1, #1
1000051a:	4a8c      	ldr	r2, [pc, #560]	; (1000074c <clocks_init+0x2a0>)
1000051c:	488c      	ldr	r0, [pc, #560]	; (10000750 <clocks_init+0x2a4>)
1000051e:	3306      	adds	r3, #6
10000520:	9400      	str	r4, [sp, #0]
10000522:	f000 fd6f 	bl	10001004 <pll_init>
    pll_init(pll_usb, 1, 480 * MHZ, 5, 2);
10000526:	2305      	movs	r3, #5
10000528:	4a8a      	ldr	r2, [pc, #552]	; (10000754 <clocks_init+0x2a8>)
1000052a:	2101      	movs	r1, #1
1000052c:	488a      	ldr	r0, [pc, #552]	; (10000758 <clocks_init+0x2ac>)
1000052e:	9400      	str	r4, [sp, #0]
10000530:	f000 fd68 	bl	10001004 <pll_init>
    if (div > clock->div)
10000534:	4b89      	ldr	r3, [pc, #548]	; (1000075c <clocks_init+0x2b0>)
10000536:	685a      	ldr	r2, [r3, #4]
10000538:	2aff      	cmp	r2, #255	; 0xff
1000053a:	d802      	bhi.n	10000542 <clocks_init+0x96>
        clock->div = div;
1000053c:	2280      	movs	r2, #128	; 0x80
1000053e:	0052      	lsls	r2, r2, #1
10000540:	605a      	str	r2, [r3, #4]
10000542:	2280      	movs	r2, #128	; 0x80
        if (configured_freq[clk_index] > 0) {
10000544:	4c78      	ldr	r4, [pc, #480]	; (10000728 <clocks_init+0x27c>)
10000546:	4b7d      	ldr	r3, [pc, #500]	; (1000073c <clocks_init+0x290>)
10000548:	6921      	ldr	r1, [r4, #16]
1000054a:	0112      	lsls	r2, r2, #4
1000054c:	4d83      	ldr	r5, [pc, #524]	; (1000075c <clocks_init+0x2b0>)
1000054e:	601a      	str	r2, [r3, #0]
10000550:	2900      	cmp	r1, #0
10000552:	d005      	beq.n	10000560 <clocks_init+0xb4>
            uint delay_cyc = configured_freq[clk_sys] / configured_freq[clk_index] + 1;
10000554:	6960      	ldr	r0, [r4, #20]
10000556:	f7ff fee1 	bl	1000031c <__wrap___aeabi_uidiv>
1000055a:	3001      	adds	r0, #1
            asm volatile (
1000055c:	3801      	subs	r0, #1
1000055e:	d1fd      	bne.n	1000055c <clocks_init+0xb0>
 * \param addr Address of writable register
 * \param values Bits values
 * \param write_mask Mask of bits to change
 */
inline static void hw_write_masked(io_rw_32 *addr, uint32_t values, uint32_t write_mask) {
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10000560:	21e0      	movs	r1, #224	; 0xe0
10000562:	4b7e      	ldr	r3, [pc, #504]	; (1000075c <clocks_init+0x2b0>)
10000564:	2002      	movs	r0, #2
10000566:	681a      	ldr	r2, [r3, #0]
10000568:	4011      	ands	r1, r2
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
1000056a:	2280      	movs	r2, #128	; 0x80
1000056c:	0152      	lsls	r2, r2, #5
1000056e:	432a      	orrs	r2, r5
10000570:	6011      	str	r1, [r2, #0]
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10000572:	6819      	ldr	r1, [r3, #0]
10000574:	4048      	eors	r0, r1
10000576:	2103      	movs	r1, #3
10000578:	4001      	ands	r1, r0
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
1000057a:	6011      	str	r1, [r2, #0]
        while (!(clock->selected & (1u << src)))
1000057c:	2104      	movs	r1, #4
1000057e:	689a      	ldr	r2, [r3, #8]
10000580:	4211      	tst	r1, r2
10000582:	d0fc      	beq.n	1000057e <clocks_init+0xd2>
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10000584:	2280      	movs	r2, #128	; 0x80
10000586:	2180      	movs	r1, #128	; 0x80
10000588:	0192      	lsls	r2, r2, #6
1000058a:	432a      	orrs	r2, r5
1000058c:	0109      	lsls	r1, r1, #4
1000058e:	6011      	str	r1, [r2, #0]
    clock->div = div;
10000590:	2280      	movs	r2, #128	; 0x80
10000592:	0052      	lsls	r2, r2, #1
10000594:	605a      	str	r2, [r3, #4]
    configured_freq[clk_index] = freq;
10000596:	4b72      	ldr	r3, [pc, #456]	; (10000760 <clocks_init+0x2b4>)
10000598:	6123      	str	r3, [r4, #16]
    if (div > clock->div)
1000059a:	4b72      	ldr	r3, [pc, #456]	; (10000764 <clocks_init+0x2b8>)
1000059c:	6859      	ldr	r1, [r3, #4]
1000059e:	29ff      	cmp	r1, #255	; 0xff
100005a0:	d800      	bhi.n	100005a4 <clocks_init+0xf8>
        clock->div = div;
100005a2:	605a      	str	r2, [r3, #4]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
100005a4:	2103      	movs	r1, #3
100005a6:	4a64      	ldr	r2, [pc, #400]	; (10000738 <clocks_init+0x28c>)
100005a8:	4b6e      	ldr	r3, [pc, #440]	; (10000764 <clocks_init+0x2b8>)
100005aa:	6011      	str	r1, [r2, #0]
        while (!(clock->selected & 1u))
100005ac:	3902      	subs	r1, #2
100005ae:	689a      	ldr	r2, [r3, #8]
100005b0:	4211      	tst	r1, r2
100005b2:	d0fc      	beq.n	100005ae <clocks_init+0x102>
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
100005b4:	20e0      	movs	r0, #224	; 0xe0
100005b6:	681a      	ldr	r2, [r3, #0]
100005b8:	4010      	ands	r0, r2
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
100005ba:	2280      	movs	r2, #128	; 0x80
100005bc:	0152      	lsls	r2, r2, #5
100005be:	431a      	orrs	r2, r3
100005c0:	6010      	str	r0, [r2, #0]
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
100005c2:	6818      	ldr	r0, [r3, #0]
100005c4:	4048      	eors	r0, r1
100005c6:	2103      	movs	r1, #3
100005c8:	4001      	ands	r1, r0
        while (!(clock->selected & (1u << src)))
100005ca:	2002      	movs	r0, #2
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
100005cc:	6011      	str	r1, [r2, #0]
100005ce:	4965      	ldr	r1, [pc, #404]	; (10000764 <clocks_init+0x2b8>)
100005d0:	688a      	ldr	r2, [r1, #8]
100005d2:	4210      	tst	r0, r2
100005d4:	d0fc      	beq.n	100005d0 <clocks_init+0x124>
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
100005d6:	2280      	movs	r2, #128	; 0x80
100005d8:	0192      	lsls	r2, r2, #6
100005da:	4313      	orrs	r3, r2
100005dc:	2280      	movs	r2, #128	; 0x80
100005de:	0112      	lsls	r2, r2, #4
100005e0:	601a      	str	r2, [r3, #0]
    clock->div = div;
100005e2:	2280      	movs	r2, #128	; 0x80
    configured_freq[clk_index] = freq;
100005e4:	4b60      	ldr	r3, [pc, #384]	; (10000768 <clocks_init+0x2bc>)
    clock->div = div;
100005e6:	0052      	lsls	r2, r2, #1
100005e8:	604a      	str	r2, [r1, #4]
    configured_freq[clk_index] = freq;
100005ea:	6163      	str	r3, [r4, #20]
    if (div > clock->div)
100005ec:	4b5f      	ldr	r3, [pc, #380]	; (1000076c <clocks_init+0x2c0>)
100005ee:	6859      	ldr	r1, [r3, #4]
100005f0:	29ff      	cmp	r1, #255	; 0xff
100005f2:	d800      	bhi.n	100005f6 <clocks_init+0x14a>
        clock->div = div;
100005f4:	605a      	str	r2, [r3, #4]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
100005f6:	2280      	movs	r2, #128	; 0x80
100005f8:	4b5d      	ldr	r3, [pc, #372]	; (10000770 <clocks_init+0x2c4>)
        if (configured_freq[clk_index] > 0) {
100005fa:	69e1      	ldr	r1, [r4, #28]
100005fc:	0112      	lsls	r2, r2, #4
100005fe:	4d5b      	ldr	r5, [pc, #364]	; (1000076c <clocks_init+0x2c0>)
10000600:	601a      	str	r2, [r3, #0]
10000602:	2900      	cmp	r1, #0
10000604:	d005      	beq.n	10000612 <clocks_init+0x166>
            uint delay_cyc = configured_freq[clk_sys] / configured_freq[clk_index] + 1;
10000606:	6960      	ldr	r0, [r4, #20]
10000608:	f7ff fe88 	bl	1000031c <__wrap___aeabi_uidiv>
1000060c:	3001      	adds	r0, #1
            asm volatile (
1000060e:	3801      	subs	r0, #1
10000610:	d1fd      	bne.n	1000060e <clocks_init+0x162>
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10000612:	22e0      	movs	r2, #224	; 0xe0
10000614:	4955      	ldr	r1, [pc, #340]	; (1000076c <clocks_init+0x2c0>)
10000616:	680b      	ldr	r3, [r1, #0]
10000618:	401a      	ands	r2, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
1000061a:	2380      	movs	r3, #128	; 0x80
1000061c:	015b      	lsls	r3, r3, #5
1000061e:	432b      	orrs	r3, r5
10000620:	601a      	str	r2, [r3, #0]
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10000622:	2380      	movs	r3, #128	; 0x80
10000624:	2280      	movs	r2, #128	; 0x80
10000626:	019b      	lsls	r3, r3, #6
10000628:	432b      	orrs	r3, r5
1000062a:	0112      	lsls	r2, r2, #4
1000062c:	601a      	str	r2, [r3, #0]
    clock->div = div;
1000062e:	2280      	movs	r2, #128	; 0x80
    configured_freq[clk_index] = freq;
10000630:	4b3e      	ldr	r3, [pc, #248]	; (1000072c <clocks_init+0x280>)
    clock->div = div;
10000632:	0052      	lsls	r2, r2, #1
10000634:	604a      	str	r2, [r1, #4]
    configured_freq[clk_index] = freq;
10000636:	61e3      	str	r3, [r4, #28]
    if (div > clock->div)
10000638:	4b4e      	ldr	r3, [pc, #312]	; (10000774 <clocks_init+0x2c8>)
1000063a:	6859      	ldr	r1, [r3, #4]
1000063c:	29ff      	cmp	r1, #255	; 0xff
1000063e:	d800      	bhi.n	10000642 <clocks_init+0x196>
        clock->div = div;
10000640:	605a      	str	r2, [r3, #4]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10000642:	2280      	movs	r2, #128	; 0x80
10000644:	4b4c      	ldr	r3, [pc, #304]	; (10000778 <clocks_init+0x2cc>)
        if (configured_freq[clk_index] > 0) {
10000646:	6a21      	ldr	r1, [r4, #32]
10000648:	0112      	lsls	r2, r2, #4
1000064a:	4d4a      	ldr	r5, [pc, #296]	; (10000774 <clocks_init+0x2c8>)
1000064c:	601a      	str	r2, [r3, #0]
1000064e:	2900      	cmp	r1, #0
10000650:	d005      	beq.n	1000065e <clocks_init+0x1b2>
            uint delay_cyc = configured_freq[clk_sys] / configured_freq[clk_index] + 1;
10000652:	6960      	ldr	r0, [r4, #20]
10000654:	f7ff fe62 	bl	1000031c <__wrap___aeabi_uidiv>
10000658:	3001      	adds	r0, #1
            asm volatile (
1000065a:	3801      	subs	r0, #1
1000065c:	d1fd      	bne.n	1000065a <clocks_init+0x1ae>
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
1000065e:	22e0      	movs	r2, #224	; 0xe0
10000660:	4944      	ldr	r1, [pc, #272]	; (10000774 <clocks_init+0x2c8>)
10000662:	680b      	ldr	r3, [r1, #0]
10000664:	401a      	ands	r2, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10000666:	2380      	movs	r3, #128	; 0x80
10000668:	015b      	lsls	r3, r3, #5
1000066a:	432b      	orrs	r3, r5
1000066c:	601a      	str	r2, [r3, #0]
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
1000066e:	2380      	movs	r3, #128	; 0x80
10000670:	2280      	movs	r2, #128	; 0x80
10000672:	019b      	lsls	r3, r3, #6
10000674:	432b      	orrs	r3, r5
10000676:	0112      	lsls	r2, r2, #4
10000678:	601a      	str	r2, [r3, #0]
    clock->div = div;
1000067a:	2380      	movs	r3, #128	; 0x80
    if (div > clock->div)
1000067c:	2280      	movs	r2, #128	; 0x80
    clock->div = div;
1000067e:	005b      	lsls	r3, r3, #1
10000680:	604b      	str	r3, [r1, #4]
    configured_freq[clk_index] = freq;
10000682:	4b2a      	ldr	r3, [pc, #168]	; (1000072c <clocks_init+0x280>)
    if (div > clock->div)
10000684:	02d2      	lsls	r2, r2, #11
    configured_freq[clk_index] = freq;
10000686:	6223      	str	r3, [r4, #32]
    if (div > clock->div)
10000688:	4b3c      	ldr	r3, [pc, #240]	; (1000077c <clocks_init+0x2d0>)
1000068a:	6859      	ldr	r1, [r3, #4]
1000068c:	4291      	cmp	r1, r2
1000068e:	d200      	bcs.n	10000692 <clocks_init+0x1e6>
        clock->div = div;
10000690:	605a      	str	r2, [r3, #4]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10000692:	2280      	movs	r2, #128	; 0x80
10000694:	4b3a      	ldr	r3, [pc, #232]	; (10000780 <clocks_init+0x2d4>)
        if (configured_freq[clk_index] > 0) {
10000696:	6a61      	ldr	r1, [r4, #36]	; 0x24
10000698:	0112      	lsls	r2, r2, #4
1000069a:	4d38      	ldr	r5, [pc, #224]	; (1000077c <clocks_init+0x2d0>)
1000069c:	601a      	str	r2, [r3, #0]
1000069e:	2900      	cmp	r1, #0
100006a0:	d005      	beq.n	100006ae <clocks_init+0x202>
            uint delay_cyc = configured_freq[clk_sys] / configured_freq[clk_index] + 1;
100006a2:	6960      	ldr	r0, [r4, #20]
100006a4:	f7ff fe3a 	bl	1000031c <__wrap___aeabi_uidiv>
100006a8:	3001      	adds	r0, #1
            asm volatile (
100006aa:	3801      	subs	r0, #1
100006ac:	d1fd      	bne.n	100006aa <clocks_init+0x1fe>
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
100006ae:	22e0      	movs	r2, #224	; 0xe0
100006b0:	4932      	ldr	r1, [pc, #200]	; (1000077c <clocks_init+0x2d0>)
100006b2:	680b      	ldr	r3, [r1, #0]
100006b4:	401a      	ands	r2, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
100006b6:	2380      	movs	r3, #128	; 0x80
100006b8:	015b      	lsls	r3, r3, #5
100006ba:	432b      	orrs	r3, r5
100006bc:	601a      	str	r2, [r3, #0]
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
100006be:	2380      	movs	r3, #128	; 0x80
100006c0:	2280      	movs	r2, #128	; 0x80
100006c2:	019b      	lsls	r3, r3, #6
100006c4:	432b      	orrs	r3, r5
100006c6:	0112      	lsls	r2, r2, #4
100006c8:	601a      	str	r2, [r3, #0]
    clock->div = div;
100006ca:	2380      	movs	r3, #128	; 0x80
100006cc:	02db      	lsls	r3, r3, #11
100006ce:	604b      	str	r3, [r1, #4]
    configured_freq[clk_index] = freq;
100006d0:	4b17      	ldr	r3, [pc, #92]	; (10000730 <clocks_init+0x284>)
100006d2:	6263      	str	r3, [r4, #36]	; 0x24
    if (div > clock->div)
100006d4:	4b2b      	ldr	r3, [pc, #172]	; (10000784 <clocks_init+0x2d8>)
100006d6:	685a      	ldr	r2, [r3, #4]
100006d8:	2aff      	cmp	r2, #255	; 0xff
100006da:	d802      	bhi.n	100006e2 <clocks_init+0x236>
        clock->div = div;
100006dc:	2280      	movs	r2, #128	; 0x80
100006de:	0052      	lsls	r2, r2, #1
100006e0:	605a      	str	r2, [r3, #4]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
100006e2:	2280      	movs	r2, #128	; 0x80
100006e4:	4b28      	ldr	r3, [pc, #160]	; (10000788 <clocks_init+0x2dc>)
        if (configured_freq[clk_index] > 0) {
100006e6:	69a1      	ldr	r1, [r4, #24]
100006e8:	0112      	lsls	r2, r2, #4
100006ea:	4d26      	ldr	r5, [pc, #152]	; (10000784 <clocks_init+0x2d8>)
100006ec:	601a      	str	r2, [r3, #0]
100006ee:	2900      	cmp	r1, #0
100006f0:	d005      	beq.n	100006fe <clocks_init+0x252>
            uint delay_cyc = configured_freq[clk_sys] / configured_freq[clk_index] + 1;
100006f2:	6960      	ldr	r0, [r4, #20]
100006f4:	f7ff fe12 	bl	1000031c <__wrap___aeabi_uidiv>
100006f8:	3001      	adds	r0, #1
            asm volatile (
100006fa:	3801      	subs	r0, #1
100006fc:	d1fd      	bne.n	100006fa <clocks_init+0x24e>
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
100006fe:	22e0      	movs	r2, #224	; 0xe0
10000700:	4920      	ldr	r1, [pc, #128]	; (10000784 <clocks_init+0x2d8>)
10000702:	680b      	ldr	r3, [r1, #0]
10000704:	401a      	ands	r2, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10000706:	2380      	movs	r3, #128	; 0x80
10000708:	015b      	lsls	r3, r3, #5
1000070a:	432b      	orrs	r3, r5
1000070c:	601a      	str	r2, [r3, #0]
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
1000070e:	2380      	movs	r3, #128	; 0x80
10000710:	2280      	movs	r2, #128	; 0x80
10000712:	019b      	lsls	r3, r3, #6
10000714:	432b      	orrs	r3, r5
10000716:	0112      	lsls	r2, r2, #4
10000718:	601a      	str	r2, [r3, #0]
    clock->div = div;
1000071a:	2380      	movs	r3, #128	; 0x80
1000071c:	005b      	lsls	r3, r3, #1
1000071e:	604b      	str	r3, [r1, #4]
    configured_freq[clk_index] = freq;
10000720:	4b11      	ldr	r3, [pc, #68]	; (10000768 <clocks_init+0x2bc>)
10000722:	61a3      	str	r3, [r4, #24]
    return true;
10000724:	e6d8      	b.n	100004d8 <clocks_init+0x2c>
10000726:	46c0      	nop			; (mov r8, r8)
10000728:	20000edc 	.word	0x20000edc
1000072c:	02dc6c00 	.word	0x02dc6c00
10000730:	0000b71b 	.word	0x0000b71b
10000734:	40008000 	.word	0x40008000
10000738:	4000b03c 	.word	0x4000b03c
1000073c:	4000b030 	.word	0x4000b030
10000740:	4000e000 	.word	0x4000e000
10000744:	4000f000 	.word	0x4000f000
10000748:	4000c000 	.word	0x4000c000
1000074c:	59682f00 	.word	0x59682f00
10000750:	40028000 	.word	0x40028000
10000754:	1c9c3800 	.word	0x1c9c3800
10000758:	4002c000 	.word	0x4002c000
1000075c:	40008030 	.word	0x40008030
10000760:	00b71b00 	.word	0x00b71b00
10000764:	4000803c 	.word	0x4000803c
10000768:	07735940 	.word	0x07735940
1000076c:	40008054 	.word	0x40008054
10000770:	4000b054 	.word	0x4000b054
10000774:	40008060 	.word	0x40008060
10000778:	4000b060 	.word	0x4000b060
1000077c:	4000806c 	.word	0x4000806c
10000780:	4000b06c 	.word	0x4000b06c
10000784:	40008048 	.word	0x40008048
10000788:	4000b048 	.word	0x4000b048

1000078c <__aeabi_double_init>:

bool running_on_fpga();
uint8_t rp2040_chip_version();

static inline uint8_t rp2040_rom_version() {
    return *(uint8_t*)0x13;
1000078c:	2313      	movs	r3, #19
    panic("missing double function");
}
#endif
extern void double_table_shim_on_use_helper();

void __aeabi_double_init() {
1000078e:	b570      	push	{r4, r5, r6, lr}
    int rom_version = rp2040_rom_version();
10000790:	781d      	ldrb	r5, [r3, #0]
#if PICO_DOUBLE_SUPPORT_ROM_V1
    if (rom_version == 1) {
10000792:	2d01      	cmp	r5, #1
10000794:	d010      	beq.n	100007b8 <__aeabi_double_init+0x2c>
        for(uint i=0;i<SF_TABLE_V2_SIZE/4;i++) {
            sd_table[i] = (uintptr_t)missing_double_func_shim;
        }
    }
#endif
    if (rom_version >= 2) {
10000796:	dd0b      	ble.n	100007b0 <__aeabi_double_init+0x24>
        void *rom_table = rom_data_lookup(rom_table_code('S', 'D'));
10000798:	4819      	ldr	r0, [pc, #100]	; (10000800 <__aeabi_double_init+0x74>)
1000079a:	f7ff fe31 	bl	10000400 <rom_data_lookup>
        assert(*((uint8_t *)(((void *)rom_data_lookup(rom_table_code('S', 'F')))-2)) * 4 >= SF_TABLE_V2_SIZE);
        memcpy(&sd_table, rom_table, SF_TABLE_V2_SIZE);
1000079e:	4c19      	ldr	r4, [pc, #100]	; (10000804 <__aeabi_double_init+0x78>)
        void *rom_table = rom_data_lookup(rom_table_code('S', 'D'));
100007a0:	0001      	movs	r1, r0
        memcpy(&sd_table, rom_table, SF_TABLE_V2_SIZE);
100007a2:	2280      	movs	r2, #128	; 0x80
100007a4:	0020      	movs	r0, r4
100007a6:	f7ff fe1d 	bl	100003e4 <__wrap___aeabi_memcpy>
                panic(NULL);
            }
#endif
        }
    }
    if (rom_version < 3) {
100007aa:	2d02      	cmp	r5, #2
100007ac:	d001      	beq.n	100007b2 <__aeabi_double_init+0x26>
        // we use the unused entry for SINCOS
        sd_table[SF_TABLE_V3_FSINCOS / 4] = (uintptr_t) double_table_shim_on_use_helper;
    }
}
100007ae:	bd70      	pop	{r4, r5, r6, pc}
100007b0:	4c14      	ldr	r4, [pc, #80]	; (10000804 <__aeabi_double_init+0x78>)
        sd_table[SF_TABLE_V3_FSINCOS / 4] = (uintptr_t) double_table_shim_on_use_helper;
100007b2:	4b15      	ldr	r3, [pc, #84]	; (10000808 <__aeabi_double_init+0x7c>)
100007b4:	64a3      	str	r3, [r4, #72]	; 0x48
}
100007b6:	e7fa      	b.n	100007ae <__aeabi_double_init+0x22>
        sd_table[SF_TABLE_V3_FSINCOS / 4] = (uintptr_t) double_table_shim_on_use_helper;
100007b8:	4b13      	ldr	r3, [pc, #76]	; (10000808 <__aeabi_double_init+0x7c>)
            sd_table[i] = (uintptr_t)double_table_shim_on_use_helper;
100007ba:	4c12      	ldr	r4, [pc, #72]	; (10000804 <__aeabi_double_init+0x78>)
100007bc:	6023      	str	r3, [r4, #0]
100007be:	6063      	str	r3, [r4, #4]
100007c0:	60a3      	str	r3, [r4, #8]
100007c2:	60e3      	str	r3, [r4, #12]
100007c4:	6123      	str	r3, [r4, #16]
100007c6:	6163      	str	r3, [r4, #20]
100007c8:	61a3      	str	r3, [r4, #24]
100007ca:	61e3      	str	r3, [r4, #28]
100007cc:	6223      	str	r3, [r4, #32]
100007ce:	6263      	str	r3, [r4, #36]	; 0x24
100007d0:	62a3      	str	r3, [r4, #40]	; 0x28
100007d2:	62e3      	str	r3, [r4, #44]	; 0x2c
100007d4:	6323      	str	r3, [r4, #48]	; 0x30
100007d6:	6363      	str	r3, [r4, #52]	; 0x34
100007d8:	63a3      	str	r3, [r4, #56]	; 0x38
100007da:	63e3      	str	r3, [r4, #60]	; 0x3c
100007dc:	6423      	str	r3, [r4, #64]	; 0x40
100007de:	6463      	str	r3, [r4, #68]	; 0x44
100007e0:	64a3      	str	r3, [r4, #72]	; 0x48
100007e2:	64e3      	str	r3, [r4, #76]	; 0x4c
100007e4:	6523      	str	r3, [r4, #80]	; 0x50
100007e6:	6563      	str	r3, [r4, #84]	; 0x54
100007e8:	65a3      	str	r3, [r4, #88]	; 0x58
100007ea:	65e3      	str	r3, [r4, #92]	; 0x5c
100007ec:	6623      	str	r3, [r4, #96]	; 0x60
100007ee:	6663      	str	r3, [r4, #100]	; 0x64
100007f0:	66a3      	str	r3, [r4, #104]	; 0x68
100007f2:	66e3      	str	r3, [r4, #108]	; 0x6c
100007f4:	6723      	str	r3, [r4, #112]	; 0x70
100007f6:	6763      	str	r3, [r4, #116]	; 0x74
100007f8:	67a3      	str	r3, [r4, #120]	; 0x78
100007fa:	67e3      	str	r3, [r4, #124]	; 0x7c
        sd_table[SF_TABLE_V3_FSINCOS / 4] = (uintptr_t) double_table_shim_on_use_helper;
100007fc:	64a3      	str	r3, [r4, #72]	; 0x48
100007fe:	e7d6      	b.n	100007ae <__aeabi_double_init+0x22>
10000800:	00004453 	.word	0x00004453
10000804:	20000b78 	.word	0x20000b78
10000808:	10000371 	.word	0x10000371

1000080c <flash_get_unique_id>:
// Use standard RUID command to get a unique identifier for the flash (and
// hence the board)

static_assert(FLASH_UNIQUE_ID_SIZE_BYTES == FLASH_RUID_DATA_BYTES, "");

void flash_get_unique_id(uint8_t *id_out) {
1000080c:	b530      	push	{r4, r5, lr}
#if PICO_NO_FLASH
    panic_unsupported();
#else
    uint8_t txbuf[FLASH_RUID_TOTAL_BYTES] = {0};
1000080e:	2500      	movs	r5, #0
void flash_get_unique_id(uint8_t *id_out) {
10000810:	b089      	sub	sp, #36	; 0x24
10000812:	0004      	movs	r4, r0
    uint8_t txbuf[FLASH_RUID_TOTAL_BYTES] = {0};
10000814:	2209      	movs	r2, #9
10000816:	2100      	movs	r1, #0
10000818:	a801      	add	r0, sp, #4
1000081a:	9500      	str	r5, [sp, #0]
1000081c:	f7ff fddc 	bl	100003d8 <__wrap_memset>
    uint8_t rxbuf[FLASH_RUID_TOTAL_BYTES] = {0};
10000820:	2209      	movs	r2, #9
10000822:	2100      	movs	r1, #0
10000824:	a805      	add	r0, sp, #20
10000826:	9504      	str	r5, [sp, #16]
10000828:	f7ff fdd6 	bl	100003d8 <__wrap_memset>
    txbuf[0] = FLASH_RUID_CMD;
1000082c:	234b      	movs	r3, #75	; 0x4b
1000082e:	466a      	mov	r2, sp
    flash_do_cmd(txbuf, rxbuf, FLASH_RUID_TOTAL_BYTES);
10000830:	4668      	mov	r0, sp
    txbuf[0] = FLASH_RUID_CMD;
10000832:	7013      	strb	r3, [r2, #0]
    flash_do_cmd(txbuf, rxbuf, FLASH_RUID_TOTAL_BYTES);
10000834:	a904      	add	r1, sp, #16
10000836:	f001 fde7 	bl	10002408 <__flash_do_cmd.constprop.0_veneer>
    for (int i = 0; i < FLASH_RUID_DATA_BYTES; i++)
        id_out[i] = rxbuf[i + 1 + FLASH_RUID_DUMMY_BYTES];
1000083a:	2115      	movs	r1, #21
1000083c:	2208      	movs	r2, #8
1000083e:	0020      	movs	r0, r4
10000840:	4469      	add	r1, sp
10000842:	f7ff fdcf 	bl	100003e4 <__wrap___aeabi_memcpy>
#endif
}
10000846:	b009      	add	sp, #36	; 0x24
10000848:	bd30      	pop	{r4, r5, pc}
1000084a:	46c0      	nop			; (mov r8, r8)

1000084c <__aeabi_float_init>:
1000084c:	2313      	movs	r3, #19
static __attribute__((noreturn)) void missing_float_func_shim() {
    panic("");
}
#endif

void __aeabi_float_init() {
1000084e:	b510      	push	{r4, lr}
    int rom_version = rp2040_rom_version();
    void *rom_table = rom_data_lookup(rom_table_code('S', 'F'));
10000850:	4812      	ldr	r0, [pc, #72]	; (1000089c <__aeabi_float_init+0x50>)
    int rom_version = rp2040_rom_version();
10000852:	781c      	ldrb	r4, [r3, #0]
    void *rom_table = rom_data_lookup(rom_table_code('S', 'F'));
10000854:	f7ff fdd4 	bl	10000400 <rom_data_lookup>
10000858:	0001      	movs	r1, r0
#if PICO_FLOAT_SUPPORT_ROM_V1
    if (rom_version == 1) {
1000085a:	2c01      	cmp	r4, #1
1000085c:	d00a      	beq.n	10000874 <__aeabi_float_init+0x28>
        for(uint i=0;i<SF_TABLE_V2_SIZE/4;i++) {
            if (!sf_table[i]) sf_table[i] = (uintptr_t)missing_float_func_shim;
        }
    }
#endif
    if (rom_version >= 2) {
1000085e:	dd03      	ble.n	10000868 <__aeabi_float_init+0x1c>
        assert(*((uint8_t *)(rom_table-2)) * 4 >= SF_TABLE_V2_SIZE);
        memcpy(&sf_table, rom_table, SF_TABLE_V2_SIZE);
10000860:	2280      	movs	r2, #128	; 0x80
10000862:	480f      	ldr	r0, [pc, #60]	; (100008a0 <__aeabi_float_init+0x54>)
10000864:	f7ff fdbe 	bl	100003e4 <__wrap___aeabi_memcpy>
    }
    sf_clz_func = rom_func_lookup(rom_table_code('L', '3'));
10000868:	480e      	ldr	r0, [pc, #56]	; (100008a4 <__aeabi_float_init+0x58>)
1000086a:	f7ff fdc1 	bl	100003f0 <rom_func_lookup>
1000086e:	4b0e      	ldr	r3, [pc, #56]	; (100008a8 <__aeabi_float_init+0x5c>)
10000870:	6018      	str	r0, [r3, #0]
}
10000872:	bd10      	pop	{r4, pc}
        memcpy(&sf_table, rom_table, SF_TABLE_V1_SIZE);
10000874:	4c0a      	ldr	r4, [pc, #40]	; (100008a0 <__aeabi_float_init+0x54>)
10000876:	2254      	movs	r2, #84	; 0x54
10000878:	0020      	movs	r0, r4
1000087a:	f7ff fdb3 	bl	100003e4 <__wrap___aeabi_memcpy>
            sf_table[i] = (uintptr_t)float_table_shim_on_use_helper;
1000087e:	4b0b      	ldr	r3, [pc, #44]	; (100008ac <__aeabi_float_init+0x60>)
10000880:	6563      	str	r3, [r4, #84]	; 0x54
10000882:	65a3      	str	r3, [r4, #88]	; 0x58
10000884:	65e3      	str	r3, [r4, #92]	; 0x5c
10000886:	6623      	str	r3, [r4, #96]	; 0x60
10000888:	6663      	str	r3, [r4, #100]	; 0x64
1000088a:	66a3      	str	r3, [r4, #104]	; 0x68
1000088c:	66e3      	str	r3, [r4, #108]	; 0x6c
1000088e:	6723      	str	r3, [r4, #112]	; 0x70
10000890:	6763      	str	r3, [r4, #116]	; 0x74
10000892:	67a3      	str	r3, [r4, #120]	; 0x78
10000894:	67e3      	str	r3, [r4, #124]	; 0x7c
        sf_table[SF_TABLE_FLOAT2INT/4] = sf_table[SF_TABLE_FLOAT2FIX/4] = (uintptr_t)float_table_shim_on_use_helper;
10000896:	6223      	str	r3, [r4, #32]
10000898:	61e3      	str	r3, [r4, #28]
    if (rom_version >= 2) {
1000089a:	e7e5      	b.n	10000868 <__aeabi_float_init+0x1c>
1000089c:	00004653 	.word	0x00004653
100008a0:	20000c78 	.word	0x20000c78
100008a4:	0000334c 	.word	0x0000334c
100008a8:	20000f34 	.word	0x20000f34
100008ac:	1000039d 	.word	0x1000039d

100008b0 <irq_set_enabled>:
    invalid_params_if(IRQ, num >= NUM_IRQS);
}

void irq_set_enabled(uint num, bool enabled) {
    check_irq_param(num);
    irq_set_mask_enabled(1u << num, enabled);
100008b0:	2301      	movs	r3, #1
100008b2:	4083      	lsls	r3, r0
    check_irq_param(num);
    return 0 != ((1u << num) & *((io_rw_32 *) (PPB_BASE + M0PLUS_NVIC_ISER_OFFSET)));
}

void irq_set_mask_enabled(uint32_t mask, bool enabled) {
    if (enabled) {
100008b4:	2900      	cmp	r1, #0
100008b6:	d004      	beq.n	100008c2 <irq_set_enabled+0x12>
        // Clear pending before enable
        // (if IRQ is actually asserted, it will immediately re-pend)
        *((io_rw_32 *) (PPB_BASE + M0PLUS_NVIC_ICPR_OFFSET)) = mask;
100008b8:	4a03      	ldr	r2, [pc, #12]	; (100008c8 <irq_set_enabled+0x18>)
100008ba:	6013      	str	r3, [r2, #0]
        *((io_rw_32 *) (PPB_BASE + M0PLUS_NVIC_ISER_OFFSET)) = mask;
100008bc:	4a03      	ldr	r2, [pc, #12]	; (100008cc <irq_set_enabled+0x1c>)
100008be:	6013      	str	r3, [r2, #0]
}
100008c0:	4770      	bx	lr
    } else {
        *((io_rw_32 *) (PPB_BASE + M0PLUS_NVIC_ICER_OFFSET)) = mask;
100008c2:	4a03      	ldr	r2, [pc, #12]	; (100008d0 <irq_set_enabled+0x20>)
100008c4:	6013      	str	r3, [r2, #0]
}
100008c6:	e7fb      	b.n	100008c0 <irq_set_enabled+0x10>
100008c8:	e000e280 	.word	0xe000e280
100008cc:	e000e100 	.word	0xe000e100
100008d0:	e000e180 	.word	0xe000e180

100008d4 <irq_get_vtable_handler>:
    return (irq_handler_t *) scb_hw->vtor;
100008d4:	4b02      	ldr	r3, [pc, #8]	; (100008e0 <irq_get_vtable_handler+0xc>)
    return (uintptr_t)raw_handler - (uintptr_t)irq_handler_chain_slots < sizeof(irq_handler_chain_slots);
}

irq_handler_t irq_get_vtable_handler(uint num) {
    check_irq_param(num);
    return get_vtable()[16 + num];
100008d6:	3010      	adds	r0, #16
    return (irq_handler_t *) scb_hw->vtor;
100008d8:	689b      	ldr	r3, [r3, #8]
    return get_vtable()[16 + num];
100008da:	0080      	lsls	r0, r0, #2
100008dc:	58c0      	ldr	r0, [r0, r3]
}
100008de:	4770      	bx	lr
100008e0:	e000ed00 	.word	0xe000ed00

100008e4 <irq_set_exclusive_handler>:

void irq_set_exclusive_handler(uint num, irq_handler_t handler) {
100008e4:	b570      	push	{r4, r5, r6, lr}
100008e6:	000d      	movs	r5, r1
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
100008e8:	f3ef 8610 	mrs	r6, PRIMASK
    __asm volatile ("cpsid i");
100008ec:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
100008ee:	4a0f      	ldr	r2, [pc, #60]	; (1000092c <irq_set_exclusive_handler+0x48>)
100008f0:	6813      	ldr	r3, [r2, #0]
100008f2:	2b00      	cmp	r3, #0
100008f4:	d0fc      	beq.n	100008f0 <irq_set_exclusive_handler+0xc>
    __asm volatile ("dmb");
100008f6:	f3bf 8f5f 	dmb	sy
    return (irq_handler_t *) scb_hw->vtor;
100008fa:	4b0d      	ldr	r3, [pc, #52]	; (10000930 <irq_set_exclusive_handler+0x4c>)
    return get_vtable()[16 + num];
100008fc:	3010      	adds	r0, #16
    return (irq_handler_t *) scb_hw->vtor;
100008fe:	689b      	ldr	r3, [r3, #8]
    return get_vtable()[16 + num];
10000900:	0084      	lsls	r4, r0, #2
10000902:	591b      	ldr	r3, [r3, r4]
    check_irq_param(num);
#if !PICO_NO_RAM_VECTOR_TABLE
    spin_lock_t *lock = spin_lock_instance(PICO_SPINLOCK_ID_IRQ);
    uint32_t save = spin_lock_blocking(lock);
    __unused irq_handler_t current = irq_get_vtable_handler(num);
    hard_assert(current == __unhandled_user_irq || current == handler);
10000904:	4a0b      	ldr	r2, [pc, #44]	; (10000934 <irq_set_exclusive_handler+0x50>)
10000906:	4293      	cmp	r3, r2
10000908:	d003      	beq.n	10000912 <irq_set_exclusive_handler+0x2e>
1000090a:	429d      	cmp	r5, r3
1000090c:	d001      	beq.n	10000912 <irq_set_exclusive_handler+0x2e>

#ifdef NDEBUG
extern void hard_assertion_failure();
static inline void hard_assert(bool condition, ...) {
    if (!condition)
        hard_assertion_failure();
1000090e:	f000 fc71 	bl	100011f4 <hard_assertion_failure>
    return (irq_handler_t *) scb_hw->vtor;
10000912:	4b07      	ldr	r3, [pc, #28]	; (10000930 <irq_set_exclusive_handler+0x4c>)
10000914:	689b      	ldr	r3, [r3, #8]
    get_vtable()[16 + num] = handler;
10000916:	511d      	str	r5, [r3, r4]
10000918:	f3bf 8f5f 	dmb	sy
1000091c:	f3bf 8f5f 	dmb	sy
    *lock = 0;
10000920:	2200      	movs	r2, #0
10000922:	4b02      	ldr	r3, [pc, #8]	; (1000092c <irq_set_exclusive_handler+0x48>)
10000924:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10000926:	f386 8810 	msr	PRIMASK, r6
    set_raw_irq_handler_and_unlock(num, handler, save);
#else
    panic_unsupported();
#endif
}
1000092a:	bd70      	pop	{r4, r5, r6, pc}
1000092c:	d0000124 	.word	0xd0000124
10000930:	e000ed00 	.word	0xe000ed00
10000934:	100001cd 	.word	0x100001cd

10000938 <irq_remove_handler>:
    }
    set_raw_irq_handler_and_unlock(num, vtable_handler, save);
#endif
}

void irq_remove_handler(uint num, irq_handler_t handler) {
10000938:	b5f0      	push	{r4, r5, r6, r7, lr}
1000093a:	46de      	mov	lr, fp
1000093c:	4657      	mov	r7, sl
1000093e:	464e      	mov	r6, r9
10000940:	4645      	mov	r5, r8
10000942:	b5e0      	push	{r5, r6, r7, lr}
10000944:	000c      	movs	r4, r1
10000946:	b083      	sub	sp, #12
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
10000948:	f3ef 8a10 	mrs	sl, PRIMASK
    __asm volatile ("cpsid i");
1000094c:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
1000094e:	4a5e      	ldr	r2, [pc, #376]	; (10000ac8 <irq_remove_handler+0x190>)
10000950:	6813      	ldr	r3, [r2, #0]
10000952:	2b00      	cmp	r3, #0
10000954:	d0fc      	beq.n	10000950 <irq_remove_handler+0x18>
    __asm volatile ("dmb");
10000956:	f3bf 8f5f 	dmb	sy
#if !PICO_NO_RAM_VECTOR_TABLE
    spin_lock_t *lock = spin_lock_instance(PICO_SPINLOCK_ID_IRQ);
    uint32_t save = spin_lock_blocking(lock);
    irq_handler_t vtable_handler = get_vtable()[16 + num];
1000095a:	2210      	movs	r2, #16
1000095c:	4691      	mov	r9, r2
1000095e:	4481      	add	r9, r0
10000960:	464a      	mov	r2, r9
    return (irq_handler_t *) scb_hw->vtor;
10000962:	4b5a      	ldr	r3, [pc, #360]	; (10000acc <irq_remove_handler+0x194>)
    irq_handler_t vtable_handler = get_vtable()[16 + num];
10000964:	0096      	lsls	r6, r2, #2
    return (irq_handler_t *) scb_hw->vtor;
10000966:	689b      	ldr	r3, [r3, #8]
    irq_handler_t vtable_handler = get_vtable()[16 + num];
10000968:	599d      	ldr	r5, [r3, r6]
    if (vtable_handler != __unhandled_user_irq && vtable_handler != handler) {
1000096a:	4b59      	ldr	r3, [pc, #356]	; (10000ad0 <irq_remove_handler+0x198>)
1000096c:	4698      	mov	r8, r3
1000096e:	429d      	cmp	r5, r3
10000970:	d005      	beq.n	1000097e <irq_remove_handler+0x46>
10000972:	42a5      	cmp	r5, r4
10000974:	d016      	beq.n	100009a4 <irq_remove_handler+0x6c>
    return (uintptr_t)raw_handler - (uintptr_t)irq_handler_chain_slots < sizeof(irq_handler_chain_slots);
10000976:	4f57      	ldr	r7, [pc, #348]	; (10000ad4 <irq_remove_handler+0x19c>)
10000978:	1beb      	subs	r3, r5, r7
#if !PICO_DISABLE_SHARED_IRQ_HANDLERS && PICO_MAX_SHARED_IRQ_HANDLERS
        if (is_shared_irq_raw_handler(vtable_handler)) {
1000097a:	2b2f      	cmp	r3, #47	; 0x2f
1000097c:	d914      	bls.n	100009a8 <irq_remove_handler+0x70>
    return (irq_handler_t *) scb_hw->vtor;
1000097e:	4b53      	ldr	r3, [pc, #332]	; (10000acc <irq_remove_handler+0x194>)
10000980:	689b      	ldr	r3, [r3, #8]
    get_vtable()[16 + num] = handler;
10000982:	519d      	str	r5, [r3, r6]
10000984:	f3bf 8f5f 	dmb	sy
10000988:	f3bf 8f5f 	dmb	sy
    *lock = 0;
1000098c:	2200      	movs	r2, #0
1000098e:	4b4e      	ldr	r3, [pc, #312]	; (10000ac8 <irq_remove_handler+0x190>)
10000990:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10000992:	f38a 8810 	msr	PRIMASK, sl
    }
    set_raw_irq_handler_and_unlock(num, vtable_handler, save);
#else
    panic_unsupported();
#endif
}
10000996:	b003      	add	sp, #12
10000998:	bcf0      	pop	{r4, r5, r6, r7}
1000099a:	46bb      	mov	fp, r7
1000099c:	46b2      	mov	sl, r6
1000099e:	46a9      	mov	r9, r5
100009a0:	46a0      	mov	r8, r4
100009a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        vtable_handler = __unhandled_user_irq;
100009a4:	001d      	movs	r5, r3
100009a6:	e7ea      	b.n	1000097e <irq_remove_handler+0x46>
    return 0 != ((1u << num) & *((io_rw_32 *) (PPB_BASE + M0PLUS_NVIC_ISER_OFFSET)));
100009a8:	2301      	movs	r3, #1
100009aa:	4083      	lsls	r3, r0
100009ac:	469b      	mov	fp, r3
100009ae:	465a      	mov	r2, fp
100009b0:	4b49      	ldr	r3, [pc, #292]	; (10000ad8 <irq_remove_handler+0x1a0>)
100009b2:	681b      	ldr	r3, [r3, #0]
100009b4:	401a      	ands	r2, r3
100009b6:	9200      	str	r2, [sp, #0]
        *((io_rw_32 *) (PPB_BASE + M0PLUS_NVIC_ICER_OFFSET)) = mask;
100009b8:	465a      	mov	r2, fp
100009ba:	4b48      	ldr	r3, [pc, #288]	; (10000adc <irq_remove_handler+0x1a4>)
100009bc:	601a      	str	r2, [r3, #0]
    __asm volatile ("dmb");
100009be:	f3bf 8f5f 	dmb	sy
            uint exception = __get_current_exception();
100009c2:	f7ff fc50 	bl	10000266 <__get_current_exception>
100009c6:	9001      	str	r0, [sp, #4]
            hard_assert(!exception || exception == num + 16);
100009c8:	2800      	cmp	r0, #0
100009ca:	d003      	beq.n	100009d4 <irq_remove_handler+0x9c>
100009cc:	4581      	cmp	r9, r0
100009ce:	d001      	beq.n	100009d4 <irq_remove_handler+0x9c>
100009d0:	f000 fc10 	bl	100011f4 <hard_assertion_failure>
    return (void *) (((uintptr_t) addr) & ~0x1);
100009d4:	2301      	movs	r3, #1
100009d6:	0029      	movs	r1, r5
100009d8:	4399      	bics	r1, r3
            while (to_free_slot->handler != handler) {
100009da:	688b      	ldr	r3, [r1, #8]
100009dc:	42a3      	cmp	r3, r4
100009de:	d068      	beq.n	10000ab2 <irq_remove_handler+0x17a>
100009e0:	000a      	movs	r2, r1
100009e2:	e007      	b.n	100009f4 <irq_remove_handler+0xbc>
                to_free_slot = &irq_handler_chain_slots[to_free_slot->link];
100009e4:	0043      	lsls	r3, r0, #1
100009e6:	181b      	adds	r3, r3, r0
100009e8:	009b      	lsls	r3, r3, #2
100009ea:	18fb      	adds	r3, r7, r3
            while (to_free_slot->handler != handler) {
100009ec:	6898      	ldr	r0, [r3, #8]
100009ee:	42a0      	cmp	r0, r4
100009f0:	d011      	beq.n	10000a16 <irq_remove_handler+0xde>
                to_free_slot = &irq_handler_chain_slots[to_free_slot->link];
100009f2:	001a      	movs	r2, r3
                if (to_free_slot->link < 0) break;
100009f4:	2006      	movs	r0, #6
100009f6:	5610      	ldrsb	r0, [r2, r0]
100009f8:	2800      	cmp	r0, #0
100009fa:	daf3      	bge.n	100009e4 <irq_remove_handler+0xac>
    if (enabled) {
100009fc:	9b00      	ldr	r3, [sp, #0]
100009fe:	2b00      	cmp	r3, #0
10000a00:	d005      	beq.n	10000a0e <irq_remove_handler+0xd6>
        *((io_rw_32 *) (PPB_BASE + M0PLUS_NVIC_ICPR_OFFSET)) = mask;
10000a02:	465a      	mov	r2, fp
10000a04:	4b36      	ldr	r3, [pc, #216]	; (10000ae0 <irq_remove_handler+0x1a8>)
10000a06:	601a      	str	r2, [r3, #0]
        *((io_rw_32 *) (PPB_BASE + M0PLUS_NVIC_ISER_OFFSET)) = mask;
10000a08:	4b33      	ldr	r3, [pc, #204]	; (10000ad8 <irq_remove_handler+0x1a0>)
10000a0a:	601a      	str	r2, [r3, #0]
10000a0c:	e7b7      	b.n	1000097e <irq_remove_handler+0x46>
        *((io_rw_32 *) (PPB_BASE + M0PLUS_NVIC_ICER_OFFSET)) = mask;
10000a0e:	465a      	mov	r2, fp
10000a10:	4b32      	ldr	r3, [pc, #200]	; (10000adc <irq_remove_handler+0x1a4>)
10000a12:	601a      	str	r2, [r3, #0]
10000a14:	e7b3      	b.n	1000097e <irq_remove_handler+0x46>
                int next_slot_index = to_free_slot->link;
10000a16:	2006      	movs	r0, #6
10000a18:	5618      	ldrsb	r0, [r3, r0]
                if (next_slot_index >= 0) {
10000a1a:	2800      	cmp	r0, #0
10000a1c:	db21      	blt.n	10000a62 <irq_remove_handler+0x12a>
                    to_free_slot->handler = next_slot->handler;
10000a1e:	0042      	lsls	r2, r0, #1
10000a20:	1811      	adds	r1, r2, r0
10000a22:	0089      	lsls	r1, r1, #2
10000a24:	187c      	adds	r4, r7, r1
10000a26:	4688      	mov	r8, r1
10000a28:	68a1      	ldr	r1, [r4, #8]
10000a2a:	6099      	str	r1, [r3, #8]
                    to_free_slot->priority = next_slot->priority;
10000a2c:	79e1      	ldrb	r1, [r4, #7]
10000a2e:	71d9      	strb	r1, [r3, #7]
                    to_free_slot->link = next_slot->link;
10000a30:	2106      	movs	r1, #6
10000a32:	5661      	ldrsb	r1, [r4, r1]
10000a34:	7199      	strb	r1, [r3, #6]
                    to_free_slot->inst3 = next_slot->link >= 0 ?
10000a36:	2900      	cmp	r1, #0
10000a38:	db2b      	blt.n	10000a92 <irq_remove_handler+0x15a>
    int32_t i_addr = (*inst) << 21u;
10000a3a:	88a4      	ldrh	r4, [r4, #4]
    uint32_t delta = (ui_to - ui_from - 4) / 2;
10000a3c:	1af9      	subs	r1, r7, r3
    int32_t i_addr = (*inst) << 21u;
10000a3e:	0564      	lsls	r4, r4, #21
    return inst + 2 + i_addr;
10000a40:	1524      	asrs	r4, r4, #20
10000a42:	4444      	add	r4, r8
    uint32_t delta = (ui_to - ui_from - 4) / 2;
10000a44:	1909      	adds	r1, r1, r4
    return 0xe000 | (delta & 0x7ff);
10000a46:	24e0      	movs	r4, #224	; 0xe0
10000a48:	0509      	lsls	r1, r1, #20
10000a4a:	0d49      	lsrs	r1, r1, #21
10000a4c:	0224      	lsls	r4, r4, #8
10000a4e:	4321      	orrs	r1, r4
                    to_free_slot->inst3 = next_slot->link >= 0 ?
10000a50:	8099      	strh	r1, [r3, #4]
                    next_slot->link = irq_hander_chain_free_slot_head;
10000a52:	1812      	adds	r2, r2, r0
10000a54:	4b23      	ldr	r3, [pc, #140]	; (10000ae4 <irq_remove_handler+0x1ac>)
10000a56:	0092      	lsls	r2, r2, #2
10000a58:	18bf      	adds	r7, r7, r2
10000a5a:	781a      	ldrb	r2, [r3, #0]
                    irq_hander_chain_free_slot_head = next_slot_index;
10000a5c:	7018      	strb	r0, [r3, #0]
                    next_slot->link = irq_hander_chain_free_slot_head;
10000a5e:	71ba      	strb	r2, [r7, #6]
                    irq_hander_chain_free_slot_head = next_slot_index;
10000a60:	e7cc      	b.n	100009fc <irq_remove_handler+0xc4>
                    if (!exception) {
10000a62:	9801      	ldr	r0, [sp, #4]
10000a64:	2800      	cmp	r0, #0
10000a66:	d117      	bne.n	10000a98 <irq_remove_handler+0x160>
                            prev_slot->link = -1;
10000a68:	30ff      	adds	r0, #255	; 0xff
10000a6a:	7190      	strb	r0, [r2, #6]
                            prev_slot->inst3 = 0xbd00; // pop {pc}
10000a6c:	481e      	ldr	r0, [pc, #120]	; (10000ae8 <irq_remove_handler+0x1b0>)
10000a6e:	8090      	strh	r0, [r2, #4]
                        to_free_slot->link = irq_hander_chain_free_slot_head;
10000a70:	4a1c      	ldr	r2, [pc, #112]	; (10000ae4 <irq_remove_handler+0x1ac>)
            int to_free_slot_index = to_free_slot - irq_handler_chain_slots;
10000a72:	1bc9      	subs	r1, r1, r7
                        to_free_slot->link = irq_hander_chain_free_slot_head;
10000a74:	7810      	ldrb	r0, [r2, #0]
            int to_free_slot_index = to_free_slot - irq_handler_chain_slots;
10000a76:	1089      	asrs	r1, r1, #2
                        to_free_slot->link = irq_hander_chain_free_slot_head;
10000a78:	7198      	strb	r0, [r3, #6]
            int to_free_slot_index = to_free_slot - irq_handler_chain_slots;
10000a7a:	008b      	lsls	r3, r1, #2
10000a7c:	185b      	adds	r3, r3, r1
10000a7e:	0118      	lsls	r0, r3, #4
10000a80:	181b      	adds	r3, r3, r0
10000a82:	0218      	lsls	r0, r3, #8
10000a84:	181b      	adds	r3, r3, r0
10000a86:	0418      	lsls	r0, r3, #16
10000a88:	181b      	adds	r3, r3, r0
10000a8a:	005b      	lsls	r3, r3, #1
10000a8c:	185b      	adds	r3, r3, r1
                        irq_hander_chain_free_slot_head = to_free_slot_index;
10000a8e:	7013      	strb	r3, [r2, #0]
10000a90:	e7b4      	b.n	100009fc <irq_remove_handler+0xc4>
                    to_free_slot->inst3 = next_slot->link >= 0 ?
10000a92:	21bd      	movs	r1, #189	; 0xbd
10000a94:	0209      	lsls	r1, r1, #8
10000a96:	e7db      	b.n	10000a50 <irq_remove_handler+0x118>
                        insert_branch_and_link(&to_free_slot->inst3, irq_handler_chain_remove_tail);
10000a98:	4a14      	ldr	r2, [pc, #80]	; (10000aec <irq_remove_handler+0x1b4>)
    from[0] = 0xf000 | ((delta >> 11u) & 0x7ffu);
10000a9a:	4915      	ldr	r1, [pc, #84]	; (10000af0 <irq_remove_handler+0x1b8>)
                        insert_branch_and_link(&to_free_slot->inst3, irq_handler_chain_remove_tail);
10000a9c:	1ad2      	subs	r2, r2, r3
    uint32_t delta = (ui_to - ui_from - 4) / 2;
10000a9e:	3a08      	subs	r2, #8
    from[0] = 0xf000 | ((delta >> 11u) & 0x7ffu);
10000aa0:	0250      	lsls	r0, r2, #9
10000aa2:	0d40      	lsrs	r0, r0, #21
10000aa4:	4301      	orrs	r1, r0
10000aa6:	8099      	strh	r1, [r3, #4]
    from[1] = 0xf800 | (delta & 0x7ffu);
10000aa8:	4912      	ldr	r1, [pc, #72]	; (10000af4 <irq_remove_handler+0x1bc>)
    uint32_t delta = (ui_to - ui_from - 4) / 2;
10000aaa:	0852      	lsrs	r2, r2, #1
    from[1] = 0xf800 | (delta & 0x7ffu);
10000aac:	430a      	orrs	r2, r1
10000aae:	80da      	strh	r2, [r3, #6]
}
10000ab0:	e7a4      	b.n	100009fc <irq_remove_handler+0xc4>
                int next_slot_index = to_free_slot->link;
10000ab2:	2006      	movs	r0, #6
10000ab4:	5608      	ldrsb	r0, [r1, r0]
                if (next_slot_index >= 0) {
10000ab6:	000b      	movs	r3, r1
10000ab8:	2800      	cmp	r0, #0
10000aba:	dab0      	bge.n	10000a1e <irq_remove_handler+0xe6>
                    if (!exception) {
10000abc:	9a01      	ldr	r2, [sp, #4]
10000abe:	2a00      	cmp	r2, #0
10000ac0:	d1ea      	bne.n	10000a98 <irq_remove_handler+0x160>
                            vtable_handler = __unhandled_user_irq;
10000ac2:	4645      	mov	r5, r8
10000ac4:	e7d4      	b.n	10000a70 <irq_remove_handler+0x138>
10000ac6:	46c0      	nop			; (mov r8, r8)
10000ac8:	d0000124 	.word	0xd0000124
10000acc:	e000ed00 	.word	0xe000ed00
10000ad0:	100001cd 	.word	0x100001cd
10000ad4:	200002c0 	.word	0x200002c0
10000ad8:	e000e100 	.word	0xe000e100
10000adc:	e000e180 	.word	0xe000e180
10000ae0:	e000e280 	.word	0xe000e280
10000ae4:	20000f4a 	.word	0x20000f4a
10000ae8:	ffffbd00 	.word	0xffffbd00
10000aec:	200002fa 	.word	0x200002fa
10000af0:	fffff000 	.word	0xfffff000
10000af4:	fffff800 	.word	0xfffff800

10000af8 <irq_add_tail_to_free_list>:
}

#if !PICO_DISABLE_SHARED_IRQ_HANDLERS && PICO_MAX_SHARED_IRQ_HANDLERS
// used by irq_handler_chain.S to remove the last link in a handler chain after it executes
// note this must be called only with the last slot in a chain (and during the exception)
void irq_add_tail_to_free_list(struct irq_handler_chain_slot *slot) {
10000af8:	b570      	push	{r4, r5, r6, lr}
    return (void *) (((uintptr_t) addr) | 0x1);
10000afa:	2501      	movs	r5, #1
void irq_add_tail_to_free_list(struct irq_handler_chain_slot *slot) {
10000afc:	0004      	movs	r4, r0
    return (void *) (((uintptr_t) addr) | 0x1);
10000afe:	4305      	orrs	r5, r0
    irq_handler_t slot_handler = (irq_handler_t) add_thumb_bit(slot);
    assert(is_shared_irq_raw_handler(slot_handler));

    int exception = __get_current_exception();
10000b00:	f7ff fbb1 	bl	10000266 <__get_current_exception>
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
10000b04:	f3ef 8c10 	mrs	ip, PRIMASK
    __asm volatile ("cpsid i");
10000b08:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
10000b0a:	4a24      	ldr	r2, [pc, #144]	; (10000b9c <irq_add_tail_to_free_list+0xa4>)
10000b0c:	6813      	ldr	r3, [r2, #0]
10000b0e:	2b00      	cmp	r3, #0
10000b10:	d0fc      	beq.n	10000b0c <irq_add_tail_to_free_list+0x14>
    __asm volatile ("dmb");
10000b12:	f3bf 8f5f 	dmb	sy
    assert(exception);
    spin_lock_t *lock = spin_lock_instance(PICO_SPINLOCK_ID_IRQ);
    uint32_t save = spin_lock_blocking(lock);
    int slot_index = slot - irq_handler_chain_slots;
10000b16:	4e22      	ldr	r6, [pc, #136]	; (10000ba0 <irq_add_tail_to_free_list+0xa8>)
    if (slot_handler == get_vtable()[exception]) {
10000b18:	0080      	lsls	r0, r0, #2
    int slot_index = slot - irq_handler_chain_slots;
10000b1a:	1ba1      	subs	r1, r4, r6
10000b1c:	1089      	asrs	r1, r1, #2
10000b1e:	008a      	lsls	r2, r1, #2
10000b20:	1852      	adds	r2, r2, r1
10000b22:	0113      	lsls	r3, r2, #4
10000b24:	18d2      	adds	r2, r2, r3
10000b26:	0213      	lsls	r3, r2, #8
10000b28:	18d2      	adds	r2, r2, r3
10000b2a:	0413      	lsls	r3, r2, #16
10000b2c:	18d3      	adds	r3, r2, r3
    return (irq_handler_t *) scb_hw->vtor;
10000b2e:	4a1d      	ldr	r2, [pc, #116]	; (10000ba4 <irq_add_tail_to_free_list+0xac>)
    int slot_index = slot - irq_handler_chain_slots;
10000b30:	005b      	lsls	r3, r3, #1
10000b32:	185b      	adds	r3, r3, r1
    return (irq_handler_t *) scb_hw->vtor;
10000b34:	6891      	ldr	r1, [r2, #8]
    if (slot_handler == get_vtable()[exception]) {
10000b36:	5809      	ldr	r1, [r1, r0]
10000b38:	42a9      	cmp	r1, r5
10000b3a:	d01c      	beq.n	10000b76 <irq_add_tail_to_free_list+0x7e>
        get_vtable()[exception] = __unhandled_user_irq;
    } else {
        bool __unused found = false;
        // need to find who points at the slot and update it
        for(uint i=0;i<count_of(irq_handler_chain_slots);i++) {
            if (irq_handler_chain_slots[i].link == slot_index) {
10000b3c:	2206      	movs	r2, #6
10000b3e:	56b2      	ldrsb	r2, [r6, r2]
10000b40:	429a      	cmp	r2, r3
10000b42:	d01c      	beq.n	10000b7e <irq_add_tail_to_free_list+0x86>
10000b44:	2212      	movs	r2, #18
10000b46:	56b2      	ldrsb	r2, [r6, r2]
10000b48:	4293      	cmp	r3, r2
10000b4a:	d022      	beq.n	10000b92 <irq_add_tail_to_free_list+0x9a>
10000b4c:	221e      	movs	r2, #30
10000b4e:	56b2      	ldrsb	r2, [r6, r2]
10000b50:	4293      	cmp	r3, r2
10000b52:	d020      	beq.n	10000b96 <irq_add_tail_to_free_list+0x9e>
10000b54:	222a      	movs	r2, #42	; 0x2a
10000b56:	56b2      	ldrsb	r2, [r6, r2]
        for(uint i=0;i<count_of(irq_handler_chain_slots);i++) {
10000b58:	2103      	movs	r1, #3
            if (irq_handler_chain_slots[i].link == slot_index) {
10000b5a:	429a      	cmp	r2, r3
10000b5c:	d010      	beq.n	10000b80 <irq_add_tail_to_free_list+0x88>
            }
        }
        assert(found);
    }
    // add slot to free list
    slot->link = irq_hander_chain_free_slot_head;
10000b5e:	4a12      	ldr	r2, [pc, #72]	; (10000ba8 <irq_add_tail_to_free_list+0xb0>)
10000b60:	7811      	ldrb	r1, [r2, #0]
    irq_hander_chain_free_slot_head = slot_index;
10000b62:	7013      	strb	r3, [r2, #0]
    slot->link = irq_hander_chain_free_slot_head;
10000b64:	71a1      	strb	r1, [r4, #6]
10000b66:	f3bf 8f5f 	dmb	sy
    *lock = 0;
10000b6a:	2200      	movs	r2, #0
10000b6c:	4b0b      	ldr	r3, [pc, #44]	; (10000b9c <irq_add_tail_to_free_list+0xa4>)
10000b6e:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10000b70:	f38c 8810 	msr	PRIMASK, ip
    spin_unlock(lock, save);
}
10000b74:	bd70      	pop	{r4, r5, r6, pc}
    return (irq_handler_t *) scb_hw->vtor;
10000b76:	6892      	ldr	r2, [r2, #8]
        get_vtable()[exception] = __unhandled_user_irq;
10000b78:	490c      	ldr	r1, [pc, #48]	; (10000bac <irq_add_tail_to_free_list+0xb4>)
10000b7a:	5011      	str	r1, [r2, r0]
10000b7c:	e7ef      	b.n	10000b5e <irq_add_tail_to_free_list+0x66>
        for(uint i=0;i<count_of(irq_handler_chain_slots);i++) {
10000b7e:	2100      	movs	r1, #0
                irq_handler_chain_slots[i].link = -1;
10000b80:	004a      	lsls	r2, r1, #1
10000b82:	1852      	adds	r2, r2, r1
10000b84:	21ff      	movs	r1, #255	; 0xff
10000b86:	0092      	lsls	r2, r2, #2
10000b88:	18b2      	adds	r2, r6, r2
10000b8a:	7191      	strb	r1, [r2, #6]
                irq_handler_chain_slots[i].inst3 = 0xbd00; // pop {pc}
10000b8c:	4908      	ldr	r1, [pc, #32]	; (10000bb0 <irq_add_tail_to_free_list+0xb8>)
10000b8e:	8091      	strh	r1, [r2, #4]
                break;
10000b90:	e7e5      	b.n	10000b5e <irq_add_tail_to_free_list+0x66>
        for(uint i=0;i<count_of(irq_handler_chain_slots);i++) {
10000b92:	2101      	movs	r1, #1
10000b94:	e7f4      	b.n	10000b80 <irq_add_tail_to_free_list+0x88>
10000b96:	2102      	movs	r1, #2
10000b98:	e7f2      	b.n	10000b80 <irq_add_tail_to_free_list+0x88>
10000b9a:	46c0      	nop			; (mov r8, r8)
10000b9c:	d0000124 	.word	0xd0000124
10000ba0:	200002c0 	.word	0x200002c0
10000ba4:	e000ed00 	.word	0xe000ed00
10000ba8:	20000f4a 	.word	0x20000f4a
10000bac:	100001cd 	.word	0x100001cd
10000bb0:	ffffbd00 	.word	0xffffbd00

10000bb4 <irq_init_priorities>:
#endif

void irq_init_priorities() {
10000bb4:	b5f0      	push	{r4, r5, r6, r7, lr}
#if PICO_DEFAULT_IRQ_PRIORITY != 0
    for (uint irq = 0; irq < NUM_IRQS; irq++) {
10000bb6:	2200      	movs	r2, #0
    io_rw_32 *p = (io_rw_32 *)((PPB_BASE + M0PLUS_NVIC_IPR0_OFFSET) + (num & ~3u));
10000bb8:	2403      	movs	r4, #3
    *p = (*p & ~(0xffu << (8 * (num & 3u)))) | (((uint32_t) hardware_priority) << (8 * (num & 3u)));
10000bba:	27ff      	movs	r7, #255	; 0xff
10000bbc:	2680      	movs	r6, #128	; 0x80
10000bbe:	0020      	movs	r0, r4
10000bc0:	003d      	movs	r5, r7
    io_rw_32 *p = (io_rw_32 *)((PPB_BASE + M0PLUS_NVIC_IPR0_OFFSET) + (num & ~3u));
10000bc2:	4b09      	ldr	r3, [pc, #36]	; (10000be8 <irq_init_priorities+0x34>)
10000bc4:	0011      	movs	r1, r2
10000bc6:	469c      	mov	ip, r3
    *p = (*p & ~(0xffu << (8 * (num & 3u)))) | (((uint32_t) hardware_priority) << (8 * (num & 3u)));
10000bc8:	4010      	ands	r0, r2
10000bca:	00c0      	lsls	r0, r0, #3
10000bcc:	4085      	lsls	r5, r0
    io_rw_32 *p = (io_rw_32 *)((PPB_BASE + M0PLUS_NVIC_IPR0_OFFSET) + (num & ~3u));
10000bce:	43a1      	bics	r1, r4
10000bd0:	4461      	add	r1, ip
    *p = (*p & ~(0xffu << (8 * (num & 3u)))) | (((uint32_t) hardware_priority) << (8 * (num & 3u)));
10000bd2:	680b      	ldr	r3, [r1, #0]
    for (uint irq = 0; irq < NUM_IRQS; irq++) {
10000bd4:	3201      	adds	r2, #1
    *p = (*p & ~(0xffu << (8 * (num & 3u)))) | (((uint32_t) hardware_priority) << (8 * (num & 3u)));
10000bd6:	43ab      	bics	r3, r5
10000bd8:	0035      	movs	r5, r6
10000bda:	4085      	lsls	r5, r0
10000bdc:	432b      	orrs	r3, r5
10000bde:	600b      	str	r3, [r1, #0]
    for (uint irq = 0; irq < NUM_IRQS; irq++) {
10000be0:	2a20      	cmp	r2, #32
10000be2:	d1ec      	bne.n	10000bbe <irq_init_priorities+0xa>
        irq_set_priority(irq, PICO_DEFAULT_IRQ_PRIORITY);
    }
#endif
}
10000be4:	bdf0      	pop	{r4, r5, r6, r7, pc}
10000be6:	46c0      	nop			; (mov r8, r8)
10000be8:	e000e400 	.word	0xe000e400

10000bec <lock_init>:
    return (spin_lock_t *) (SIO_BASE + SIO_SPINLOCK0_OFFSET + lock_num * 4);
10000bec:	4b02      	ldr	r3, [pc, #8]	; (10000bf8 <lock_init+0xc>)
10000bee:	469c      	mov	ip, r3
10000bf0:	4461      	add	r1, ip
10000bf2:	0089      	lsls	r1, r1, #2

#include "pico/lock_core.h"

void lock_init(lock_core_t *core, uint lock_num) {
    assert(lock_num >= 0 && lock_num < NUM_SPIN_LOCKS);
    core->spin_lock = spin_lock_instance(lock_num);
10000bf4:	6001      	str	r1, [r0, #0]
}
10000bf6:	4770      	bx	lr
10000bf8:	34000040 	.word	0x34000040

10000bfc <mutex_init>:

#if !PICO_NO_HARDWARE
static_assert(sizeof(mutex_t) == 8, "");
#endif

void mutex_init(mutex_t *mtx) {
10000bfc:	b510      	push	{r4, lr}
10000bfe:	0004      	movs	r4, r0
    lock_init(&mtx->core, next_striped_spin_lock_num());
10000c00:	f000 fc04 	bl	1000140c <next_striped_spin_lock_num>
10000c04:	0001      	movs	r1, r0
10000c06:	0020      	movs	r0, r4
10000c08:	f7ff fff0 	bl	10000bec <lock_init>
    mtx->owner = -1;
10000c0c:	23ff      	movs	r3, #255	; 0xff
10000c0e:	7123      	strb	r3, [r4, #4]
    __asm volatile ("dmb");
10000c10:	f3bf 8f5f 	dmb	sy
    __mem_fence_release();
}
10000c14:	bd10      	pop	{r4, pc}
10000c16:	46c0      	nop			; (mov r8, r8)

10000c18 <ph_merge_nodes>:
        c->sibling = n->child;
        n->child = child_id;
    }
}

static pheap_node_id_t ph_merge_nodes(pheap_t *heap, pheap_node_id_t a, pheap_node_id_t b) {
10000c18:	b570      	push	{r4, r5, r6, lr}
10000c1a:	0005      	movs	r5, r0
10000c1c:	0014      	movs	r4, r2
10000c1e:	0016      	movs	r6, r2
    if (!a) return b;
10000c20:	2900      	cmp	r1, #0
10000c22:	d015      	beq.n	10000c50 <ph_merge_nodes+0x38>
    if (!b) return a;
10000c24:	000c      	movs	r4, r1
10000c26:	2a00      	cmp	r2, #0
10000c28:	d012      	beq.n	10000c50 <ph_merge_nodes+0x38>
    if (heap->comparator(heap->user_data, a, b)) {
10000c2a:	6880      	ldr	r0, [r0, #8]
10000c2c:	686b      	ldr	r3, [r5, #4]
10000c2e:	4798      	blx	r3
10000c30:	6829      	ldr	r1, [r5, #0]
10000c32:	2800      	cmp	r0, #0
10000c34:	d00e      	beq.n	10000c54 <ph_merge_nodes+0x3c>
    return heap->nodes + id - 1;
10000c36:	0073      	lsls	r3, r6, #1
10000c38:	199b      	adds	r3, r3, r6
10000c3a:	0062      	lsls	r2, r4, #1
10000c3c:	3b03      	subs	r3, #3
10000c3e:	1912      	adds	r2, r2, r4
10000c40:	18cb      	adds	r3, r1, r3
10000c42:	3a03      	subs	r2, #3
    c->parent = parent_id;
10000c44:	709c      	strb	r4, [r3, #2]
    return heap->nodes + id - 1;
10000c46:	1888      	adds	r0, r1, r2
    if (!n->child) {
10000c48:	5c8a      	ldrb	r2, [r1, r2]
10000c4a:	2a00      	cmp	r2, #0
10000c4c:	d115      	bne.n	10000c7a <ph_merge_nodes+0x62>
        n->child = child_id;
10000c4e:	7006      	strb	r6, [r0, #0]
        return a;
    } else {
        ph_add_child_node(heap, b, a);
        return b;
    }
}
10000c50:	0020      	movs	r0, r4
10000c52:	bd70      	pop	{r4, r5, r6, pc}
    return heap->nodes + id - 1;
10000c54:	0063      	lsls	r3, r4, #1
10000c56:	191b      	adds	r3, r3, r4
10000c58:	0072      	lsls	r2, r6, #1
10000c5a:	3b03      	subs	r3, #3
10000c5c:	1992      	adds	r2, r2, r6
10000c5e:	18cb      	adds	r3, r1, r3
10000c60:	3a03      	subs	r2, #3
    c->parent = parent_id;
10000c62:	709e      	strb	r6, [r3, #2]
    return heap->nodes + id - 1;
10000c64:	1888      	adds	r0, r1, r2
    if (!n->child) {
10000c66:	5c8a      	ldrb	r2, [r1, r2]
10000c68:	2a00      	cmp	r2, #0
10000c6a:	d102      	bne.n	10000c72 <ph_merge_nodes+0x5a>
        n->child = child_id;
10000c6c:	7004      	strb	r4, [r0, #0]
10000c6e:	0034      	movs	r4, r6
10000c70:	e7ee      	b.n	10000c50 <ph_merge_nodes+0x38>
        c->sibling = n->child;
10000c72:	705a      	strb	r2, [r3, #1]
        n->child = child_id;
10000c74:	7004      	strb	r4, [r0, #0]
10000c76:	0034      	movs	r4, r6
10000c78:	e7ea      	b.n	10000c50 <ph_merge_nodes+0x38>
        c->sibling = n->child;
10000c7a:	705a      	strb	r2, [r3, #1]
        n->child = child_id;
10000c7c:	7006      	strb	r6, [r0, #0]
10000c7e:	e7e7      	b.n	10000c50 <ph_merge_nodes+0x38>

10000c80 <ph_create>:

#include <stdio.h>
#include <stdlib.h>
#include "pico/util/pheap.h"

pheap_t *ph_create(uint max_nodes, pheap_comparator comparator, void *user_data) {
10000c80:	b5f0      	push	{r4, r5, r6, r7, lr}
10000c82:	46c6      	mov	lr, r8
10000c84:	0005      	movs	r5, r0
10000c86:	000f      	movs	r7, r1
10000c88:	b500      	push	{lr}
    invalid_params_if(PHEAP, !max_nodes || max_nodes >= (1u << sizeof(pheap_node_id_t)));
    pheap_t *heap = calloc(1, sizeof(pheap_t));
10000c8a:	2110      	movs	r1, #16
10000c8c:	2001      	movs	r0, #1
pheap_t *ph_create(uint max_nodes, pheap_comparator comparator, void *user_data) {
10000c8e:	0016      	movs	r6, r2
    pheap_t *heap = calloc(1, sizeof(pheap_t));
10000c90:	f000 f9ac 	bl	10000fec <__wrap_calloc>
    heap->max_nodes = max_nodes;
10000c94:	b2eb      	uxtb	r3, r5
    pheap_t *heap = calloc(1, sizeof(pheap_t));
10000c96:	0004      	movs	r4, r0
    heap->max_nodes = max_nodes;
10000c98:	7303      	strb	r3, [r0, #12]
    heap->comparator = comparator;
    heap->nodes = calloc(max_nodes, sizeof(pheap_node_t));
10000c9a:	2103      	movs	r1, #3
    heap->comparator = comparator;
10000c9c:	6047      	str	r7, [r0, #4]
    heap->nodes = calloc(max_nodes, sizeof(pheap_node_t));
10000c9e:	0028      	movs	r0, r5
    heap->max_nodes = max_nodes;
10000ca0:	4698      	mov	r8, r3
    heap->nodes = calloc(max_nodes, sizeof(pheap_node_t));
10000ca2:	f000 f9a3 	bl	10000fec <__wrap_calloc>
    ph_clear(heap);
    return heap;
}

void ph_clear(pheap_t *heap) {
    heap->root_id = 0;
10000ca6:	2300      	movs	r3, #0
10000ca8:	7363      	strb	r3, [r4, #13]
    heap->free_head_id = 1;
10000caa:	3301      	adds	r3, #1
10000cac:	73a3      	strb	r3, [r4, #14]
    heap->free_tail_id = heap->max_nodes;
10000cae:	4643      	mov	r3, r8
10000cb0:	21ff      	movs	r1, #255	; 0xff
10000cb2:	73e3      	strb	r3, [r4, #15]
    for(uint i = 1; i < heap->max_nodes; i++) {
10000cb4:	23fe      	movs	r3, #254	; 0xfe
    heap->nodes = calloc(max_nodes, sizeof(pheap_node_t));
10000cb6:	6020      	str	r0, [r4, #0]
    heap->user_data = user_data;
10000cb8:	60a6      	str	r6, [r4, #8]
    for(uint i = 1; i < heap->max_nodes; i++) {
10000cba:	4029      	ands	r1, r5
10000cbc:	422b      	tst	r3, r5
10000cbe:	d006      	beq.n	10000cce <ph_create+0x4e>
10000cc0:	1c42      	adds	r2, r0, #1
10000cc2:	3bfd      	subs	r3, #253	; 0xfd
        ph_get_node(heap, i)->sibling = i + 1;
10000cc4:	3301      	adds	r3, #1
10000cc6:	7013      	strb	r3, [r2, #0]
    for(uint i = 1; i < heap->max_nodes; i++) {
10000cc8:	3203      	adds	r2, #3
10000cca:	428b      	cmp	r3, r1
10000ccc:	d3fa      	bcc.n	10000cc4 <ph_create+0x44>
    }
    ph_get_node(heap, heap->max_nodes)->sibling = 0;
10000cce:	004b      	lsls	r3, r1, #1
10000cd0:	1859      	adds	r1, r3, r1
10000cd2:	2300      	movs	r3, #0
10000cd4:	1840      	adds	r0, r0, r1
10000cd6:	3803      	subs	r0, #3
10000cd8:	7043      	strb	r3, [r0, #1]
}
10000cda:	0020      	movs	r0, r4
10000cdc:	bc80      	pop	{r7}
10000cde:	46b8      	mov	r8, r7
10000ce0:	bdf0      	pop	{r4, r5, r6, r7, pc}
10000ce2:	46c0      	nop			; (mov r8, r8)

10000ce4 <ph_merge_two_pass>:
void ph_destroy(pheap_t *heap) {
    free(heap->nodes);
    free(heap);
}

pheap_node_id_t ph_merge_two_pass(pheap_t *heap, pheap_node_id_t id) {
10000ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10000ce6:	46ce      	mov	lr, r9
10000ce8:	4647      	mov	r7, r8
10000cea:	0006      	movs	r6, r0
10000cec:	000c      	movs	r4, r1
10000cee:	b580      	push	{r7, lr}
    if (!id || !ph_get_node(heap, id)->sibling) {
10000cf0:	2900      	cmp	r1, #0
10000cf2:	d007      	beq.n	10000d04 <ph_merge_two_pass+0x20>
    return heap->nodes + id - 1;
10000cf4:	004d      	lsls	r5, r1, #1
10000cf6:	6803      	ldr	r3, [r0, #0]
10000cf8:	186d      	adds	r5, r5, r1
10000cfa:	3d03      	subs	r5, #3
10000cfc:	195a      	adds	r2, r3, r5
10000cfe:	7857      	ldrb	r7, [r2, #1]
10000d00:	2f00      	cmp	r7, #0
10000d02:	d104      	bne.n	10000d0e <ph_merge_two_pass+0x2a>
        b = ph_get_node(heap, id)->sibling;
        new_node = ph_get_node(heap, b)->sibling;
        ph_get_node(heap, a)->sibling = ph_get_node(heap, b)->sibling = 0;
        return ph_merge_nodes(heap, ph_merge_nodes(heap, a, b), ph_merge_two_pass(heap, new_node));
    }
}
10000d04:	0020      	movs	r0, r4
10000d06:	bcc0      	pop	{r6, r7}
10000d08:	46b9      	mov	r9, r7
10000d0a:	46b0      	mov	r8, r6
10000d0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10000d0e:	0079      	lsls	r1, r7, #1
10000d10:	19c9      	adds	r1, r1, r7
10000d12:	3903      	subs	r1, #3
10000d14:	4688      	mov	r8, r1
10000d16:	4443      	add	r3, r8
        new_node = ph_get_node(heap, b)->sibling;
10000d18:	7859      	ldrb	r1, [r3, #1]
10000d1a:	4689      	mov	r9, r1
        ph_get_node(heap, a)->sibling = ph_get_node(heap, b)->sibling = 0;
10000d1c:	2100      	movs	r1, #0
10000d1e:	7059      	strb	r1, [r3, #1]
10000d20:	7051      	strb	r1, [r2, #1]
    if (heap->comparator(heap->user_data, a, b)) {
10000d22:	6873      	ldr	r3, [r6, #4]
10000d24:	003a      	movs	r2, r7
10000d26:	0021      	movs	r1, r4
10000d28:	6880      	ldr	r0, [r0, #8]
10000d2a:	4798      	blx	r3
10000d2c:	6833      	ldr	r3, [r6, #0]
10000d2e:	2800      	cmp	r0, #0
10000d30:	d014      	beq.n	10000d5c <ph_merge_two_pass+0x78>
    return heap->nodes + id - 1;
10000d32:	4642      	mov	r2, r8
10000d34:	189a      	adds	r2, r3, r2
    c->parent = parent_id;
10000d36:	7094      	strb	r4, [r2, #2]
    return heap->nodes + id - 1;
10000d38:	1959      	adds	r1, r3, r5
    if (!n->child) {
10000d3a:	5d5b      	ldrb	r3, [r3, r5]
10000d3c:	2b00      	cmp	r3, #0
10000d3e:	d000      	beq.n	10000d42 <ph_merge_two_pass+0x5e>
        c->sibling = n->child;
10000d40:	7053      	strb	r3, [r2, #1]
        n->child = child_id;
10000d42:	700f      	strb	r7, [r1, #0]
10000d44:	0027      	movs	r7, r4
        return ph_merge_nodes(heap, ph_merge_nodes(heap, a, b), ph_merge_two_pass(heap, new_node));
10000d46:	4649      	mov	r1, r9
10000d48:	0030      	movs	r0, r6
10000d4a:	f7ff ffcb 	bl	10000ce4 <ph_merge_two_pass>
10000d4e:	0039      	movs	r1, r7
10000d50:	0002      	movs	r2, r0
10000d52:	0030      	movs	r0, r6
10000d54:	f7ff ff60 	bl	10000c18 <ph_merge_nodes>
10000d58:	0004      	movs	r4, r0
10000d5a:	e7d3      	b.n	10000d04 <ph_merge_two_pass+0x20>
    return heap->nodes + id - 1;
10000d5c:	4642      	mov	r2, r8
    if (!n->child) {
10000d5e:	4641      	mov	r1, r8
    return heap->nodes + id - 1;
10000d60:	195d      	adds	r5, r3, r5
    c->parent = parent_id;
10000d62:	70af      	strb	r7, [r5, #2]
    return heap->nodes + id - 1;
10000d64:	189a      	adds	r2, r3, r2
    if (!n->child) {
10000d66:	5c5b      	ldrb	r3, [r3, r1]
10000d68:	2b00      	cmp	r3, #0
10000d6a:	d000      	beq.n	10000d6e <ph_merge_two_pass+0x8a>
        c->sibling = n->child;
10000d6c:	706b      	strb	r3, [r5, #1]
        n->child = child_id;
10000d6e:	7014      	strb	r4, [r2, #0]
10000d70:	e7e9      	b.n	10000d46 <ph_merge_two_pass+0x62>
10000d72:	46c0      	nop			; (mov r8, r8)

10000d74 <ph_remove_any_head>:

static pheap_node_id_t ph_remove_any_head(pheap_t *heap, pheap_node_id_t root_id, bool reserve) {
10000d74:	b5f0      	push	{r4, r5, r6, r7, lr}
10000d76:	4657      	mov	r7, sl
10000d78:	4645      	mov	r5, r8
10000d7a:	46de      	mov	lr, fp
10000d7c:	464e      	mov	r6, r9
10000d7e:	b5e0      	push	{r5, r6, r7, lr}
10000d80:	000d      	movs	r5, r1
    return heap->nodes + id - 1;
10000d82:	006b      	lsls	r3, r5, #1
10000d84:	6801      	ldr	r1, [r0, #0]
10000d86:	195b      	adds	r3, r3, r5
10000d88:	1edf      	subs	r7, r3, #3
10000d8a:	0004      	movs	r4, r0
    assert(root_id);
//    printf("Removing head %d (parent %d sibling %d)\n", root_id, ph_get_node(heap, root_id)->parent, ph_get_node(heap, root_id)->sibling);
    assert(!ph_get_node(heap, root_id)->sibling);
    assert(!ph_get_node(heap, root_id)->parent);
    pheap_node_id_t new_root_id = ph_merge_two_pass(heap, ph_get_node(heap, root_id)->child);
10000d8c:	5dc8      	ldrb	r0, [r1, r7]
static pheap_node_id_t ph_remove_any_head(pheap_t *heap, pheap_node_id_t root_id, bool reserve) {
10000d8e:	b083      	sub	sp, #12
10000d90:	9201      	str	r2, [sp, #4]
10000d92:	19ca      	adds	r2, r1, r7
    if (!id || !ph_get_node(heap, id)->sibling) {
10000d94:	2800      	cmp	r0, #0
10000d96:	d04c      	beq.n	10000e32 <ph_remove_any_head+0xbe>
10000d98:	0043      	lsls	r3, r0, #1
10000d9a:	181b      	adds	r3, r3, r0
10000d9c:	3b03      	subs	r3, #3
10000d9e:	18cb      	adds	r3, r1, r3
10000da0:	785e      	ldrb	r6, [r3, #1]
10000da2:	46b4      	mov	ip, r6
10000da4:	2e00      	cmp	r6, #0
10000da6:	d116      	bne.n	10000dd6 <ph_remove_any_head+0x62>
    if (!reserve) {
10000da8:	9e01      	ldr	r6, [sp, #4]
10000daa:	2e00      	cmp	r6, #0
10000dac:	d13e      	bne.n	10000e2c <ph_remove_any_head+0xb8>
        if (heap->free_tail_id) {
10000dae:	7be6      	ldrb	r6, [r4, #15]
10000db0:	2e00      	cmp	r6, #0
10000db2:	d004      	beq.n	10000dbe <ph_remove_any_head+0x4a>
            ph_get_node(heap, heap->free_tail_id)->sibling = root_id;
10000db4:	0073      	lsls	r3, r6, #1
10000db6:	199b      	adds	r3, r3, r6
10000db8:	18cb      	adds	r3, r1, r3
10000dba:	3b03      	subs	r3, #3
10000dbc:	705d      	strb	r5, [r3, #1]
        }
        heap->free_tail_id = root_id;
10000dbe:	73e5      	strb	r5, [r4, #15]
    }
    if (new_root_id) ph_get_node(heap, new_root_id)->parent = 0;
10000dc0:	2800      	cmp	r0, #0
10000dc2:	d12f      	bne.n	10000e24 <ph_remove_any_head+0xb0>
    ph_get_node(heap, root_id)->sibling = 0;
10000dc4:	2300      	movs	r3, #0
10000dc6:	7053      	strb	r3, [r2, #1]
    return new_root_id;
}
10000dc8:	b003      	add	sp, #12
10000dca:	bcf0      	pop	{r4, r5, r6, r7}
10000dcc:	46bb      	mov	fp, r7
10000dce:	46b2      	mov	sl, r6
10000dd0:	46a9      	mov	r9, r5
10000dd2:	46a0      	mov	r8, r4
10000dd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
10000dd6:	0072      	lsls	r2, r6, #1
10000dd8:	4462      	add	r2, ip
10000dda:	3a03      	subs	r2, #3
10000ddc:	1889      	adds	r1, r1, r2
        new_node = ph_get_node(heap, b)->sibling;
10000dde:	784a      	ldrb	r2, [r1, #1]
10000de0:	4690      	mov	r8, r2
        ph_get_node(heap, a)->sibling = ph_get_node(heap, b)->sibling = 0;
10000de2:	2200      	movs	r2, #0
10000de4:	704a      	strb	r2, [r1, #1]
10000de6:	4691      	mov	r9, r2
10000de8:	705a      	strb	r2, [r3, #1]
        return ph_merge_nodes(heap, ph_merge_nodes(heap, a, b), ph_merge_two_pass(heap, new_node));
10000dea:	0001      	movs	r1, r0
10000dec:	0032      	movs	r2, r6
10000dee:	0020      	movs	r0, r4
10000df0:	f7ff ff12 	bl	10000c18 <ph_merge_nodes>
    if (!id || !ph_get_node(heap, id)->sibling) {
10000df4:	4643      	mov	r3, r8
        return ph_merge_nodes(heap, ph_merge_nodes(heap, a, b), ph_merge_two_pass(heap, new_node));
10000df6:	4682      	mov	sl, r0
    if (!id || !ph_get_node(heap, id)->sibling) {
10000df8:	2b00      	cmp	r3, #0
10000dfa:	d007      	beq.n	10000e0c <ph_remove_any_head+0x98>
10000dfc:	005b      	lsls	r3, r3, #1
10000dfe:	6821      	ldr	r1, [r4, #0]
10000e00:	4443      	add	r3, r8
10000e02:	3b03      	subs	r3, #3
10000e04:	18cb      	adds	r3, r1, r3
10000e06:	785a      	ldrb	r2, [r3, #1]
10000e08:	2a00      	cmp	r2, #0
10000e0a:	d116      	bne.n	10000e3a <ph_remove_any_head+0xc6>
        return ph_merge_nodes(heap, ph_merge_nodes(heap, a, b), ph_merge_two_pass(heap, new_node));
10000e0c:	4642      	mov	r2, r8
10000e0e:	4651      	mov	r1, sl
10000e10:	0020      	movs	r0, r4
10000e12:	f7ff ff01 	bl	10000c18 <ph_merge_nodes>
10000e16:	6821      	ldr	r1, [r4, #0]
    if (!reserve) {
10000e18:	9b01      	ldr	r3, [sp, #4]
10000e1a:	19ca      	adds	r2, r1, r7
10000e1c:	2b00      	cmp	r3, #0
10000e1e:	d0c6      	beq.n	10000dae <ph_remove_any_head+0x3a>
    if (new_root_id) ph_get_node(heap, new_root_id)->parent = 0;
10000e20:	2800      	cmp	r0, #0
10000e22:	d0cf      	beq.n	10000dc4 <ph_remove_any_head+0x50>
10000e24:	0043      	lsls	r3, r0, #1
10000e26:	181b      	adds	r3, r3, r0
10000e28:	3b03      	subs	r3, #3
10000e2a:	18cb      	adds	r3, r1, r3
10000e2c:	2100      	movs	r1, #0
10000e2e:	7099      	strb	r1, [r3, #2]
10000e30:	e7c8      	b.n	10000dc4 <ph_remove_any_head+0x50>
    if (!reserve) {
10000e32:	9b01      	ldr	r3, [sp, #4]
10000e34:	2b00      	cmp	r3, #0
10000e36:	d1c5      	bne.n	10000dc4 <ph_remove_any_head+0x50>
10000e38:	e7b9      	b.n	10000dae <ph_remove_any_head+0x3a>
10000e3a:	0050      	lsls	r0, r2, #1
10000e3c:	1880      	adds	r0, r0, r2
10000e3e:	3803      	subs	r0, #3
10000e40:	1809      	adds	r1, r1, r0
        new_node = ph_get_node(heap, b)->sibling;
10000e42:	7848      	ldrb	r0, [r1, #1]
10000e44:	4683      	mov	fp, r0
        ph_get_node(heap, a)->sibling = ph_get_node(heap, b)->sibling = 0;
10000e46:	4648      	mov	r0, r9
10000e48:	7048      	strb	r0, [r1, #1]
10000e4a:	7058      	strb	r0, [r3, #1]
        return ph_merge_nodes(heap, ph_merge_nodes(heap, a, b), ph_merge_two_pass(heap, new_node));
10000e4c:	4641      	mov	r1, r8
10000e4e:	0020      	movs	r0, r4
10000e50:	f7ff fee2 	bl	10000c18 <ph_merge_nodes>
10000e54:	4659      	mov	r1, fp
10000e56:	4680      	mov	r8, r0
10000e58:	0020      	movs	r0, r4
10000e5a:	f7ff ff43 	bl	10000ce4 <ph_merge_two_pass>
10000e5e:	4641      	mov	r1, r8
10000e60:	0002      	movs	r2, r0
10000e62:	0020      	movs	r0, r4
10000e64:	f7ff fed8 	bl	10000c18 <ph_merge_nodes>
10000e68:	4680      	mov	r8, r0
10000e6a:	e7cf      	b.n	10000e0c <ph_remove_any_head+0x98>

10000e6c <ph_remove_head_reserve>:

pheap_node_id_t ph_remove_head_reserve(pheap_t *heap, bool reserve) {
10000e6c:	b5f0      	push	{r4, r5, r6, r7, lr}
10000e6e:	4657      	mov	r7, sl
10000e70:	4645      	mov	r5, r8
10000e72:	46de      	mov	lr, fp
10000e74:	464e      	mov	r6, r9
10000e76:	b5e0      	push	{r5, r6, r7, lr}
10000e78:	b083      	sub	sp, #12
10000e7a:	9101      	str	r1, [sp, #4]
    heap->root_id = ph_merge_nodes(heap, heap->root_id, id);
    return heap->root_id;
}

static inline pheap_node_id_t ph_peek_head(pheap_t *heap) {
    return heap->root_id;
10000e7c:	7b45      	ldrb	r5, [r0, #13]
10000e7e:	0004      	movs	r4, r0
    return heap->nodes + id - 1;
10000e80:	006b      	lsls	r3, r5, #1
10000e82:	6800      	ldr	r0, [r0, #0]
10000e84:	195b      	adds	r3, r3, r5
10000e86:	1edf      	subs	r7, r3, #3
    pheap_node_id_t new_root_id = ph_merge_two_pass(heap, ph_get_node(heap, root_id)->child);
10000e88:	5dc1      	ldrb	r1, [r0, r7]
10000e8a:	19c2      	adds	r2, r0, r7
    if (!id || !ph_get_node(heap, id)->sibling) {
10000e8c:	2900      	cmp	r1, #0
10000e8e:	d04e      	beq.n	10000f2e <ph_remove_head_reserve+0xc2>
10000e90:	004b      	lsls	r3, r1, #1
10000e92:	185b      	adds	r3, r3, r1
10000e94:	3b03      	subs	r3, #3
10000e96:	18c3      	adds	r3, r0, r3
10000e98:	785e      	ldrb	r6, [r3, #1]
10000e9a:	46b4      	mov	ip, r6
10000e9c:	2e00      	cmp	r6, #0
10000e9e:	d118      	bne.n	10000ed2 <ph_remove_head_reserve+0x66>
    if (!reserve) {
10000ea0:	9e01      	ldr	r6, [sp, #4]
10000ea2:	2e00      	cmp	r6, #0
10000ea4:	d140      	bne.n	10000f28 <ph_remove_head_reserve+0xbc>
        if (heap->free_tail_id) {
10000ea6:	7be6      	ldrb	r6, [r4, #15]
10000ea8:	2e00      	cmp	r6, #0
10000eaa:	d004      	beq.n	10000eb6 <ph_remove_head_reserve+0x4a>
            ph_get_node(heap, heap->free_tail_id)->sibling = root_id;
10000eac:	0073      	lsls	r3, r6, #1
10000eae:	199b      	adds	r3, r3, r6
10000eb0:	18c3      	adds	r3, r0, r3
10000eb2:	3b03      	subs	r3, #3
10000eb4:	705d      	strb	r5, [r3, #1]
        heap->free_tail_id = root_id;
10000eb6:	73e5      	strb	r5, [r4, #15]
    if (new_root_id) ph_get_node(heap, new_root_id)->parent = 0;
10000eb8:	2900      	cmp	r1, #0
10000eba:	d131      	bne.n	10000f20 <ph_remove_head_reserve+0xb4>
    ph_get_node(heap, root_id)->sibling = 0;
10000ebc:	2300      	movs	r3, #0
    pheap_node_id_t old_root_id = ph_peek_head(heap);
    heap->root_id = ph_remove_any_head(heap, old_root_id, reserve);
    return old_root_id;
}
10000ebe:	0028      	movs	r0, r5
    ph_get_node(heap, root_id)->sibling = 0;
10000ec0:	7053      	strb	r3, [r2, #1]
    heap->root_id = ph_remove_any_head(heap, old_root_id, reserve);
10000ec2:	7361      	strb	r1, [r4, #13]
}
10000ec4:	b003      	add	sp, #12
10000ec6:	bcf0      	pop	{r4, r5, r6, r7}
10000ec8:	46bb      	mov	fp, r7
10000eca:	46b2      	mov	sl, r6
10000ecc:	46a9      	mov	r9, r5
10000ece:	46a0      	mov	r8, r4
10000ed0:	bdf0      	pop	{r4, r5, r6, r7, pc}
10000ed2:	0072      	lsls	r2, r6, #1
10000ed4:	4462      	add	r2, ip
10000ed6:	3a03      	subs	r2, #3
10000ed8:	1880      	adds	r0, r0, r2
        new_node = ph_get_node(heap, b)->sibling;
10000eda:	7842      	ldrb	r2, [r0, #1]
10000edc:	4690      	mov	r8, r2
        ph_get_node(heap, a)->sibling = ph_get_node(heap, b)->sibling = 0;
10000ede:	2200      	movs	r2, #0
10000ee0:	7042      	strb	r2, [r0, #1]
10000ee2:	4691      	mov	r9, r2
10000ee4:	705a      	strb	r2, [r3, #1]
        return ph_merge_nodes(heap, ph_merge_nodes(heap, a, b), ph_merge_two_pass(heap, new_node));
10000ee6:	0020      	movs	r0, r4
10000ee8:	0032      	movs	r2, r6
10000eea:	f7ff fe95 	bl	10000c18 <ph_merge_nodes>
    if (!id || !ph_get_node(heap, id)->sibling) {
10000eee:	4643      	mov	r3, r8
        return ph_merge_nodes(heap, ph_merge_nodes(heap, a, b), ph_merge_two_pass(heap, new_node));
10000ef0:	4682      	mov	sl, r0
    if (!id || !ph_get_node(heap, id)->sibling) {
10000ef2:	2b00      	cmp	r3, #0
10000ef4:	d007      	beq.n	10000f06 <ph_remove_head_reserve+0x9a>
10000ef6:	005b      	lsls	r3, r3, #1
10000ef8:	6821      	ldr	r1, [r4, #0]
10000efa:	4443      	add	r3, r8
10000efc:	3b03      	subs	r3, #3
10000efe:	18cb      	adds	r3, r1, r3
10000f00:	785a      	ldrb	r2, [r3, #1]
10000f02:	2a00      	cmp	r2, #0
10000f04:	d117      	bne.n	10000f36 <ph_remove_head_reserve+0xca>
        return ph_merge_nodes(heap, ph_merge_nodes(heap, a, b), ph_merge_two_pass(heap, new_node));
10000f06:	4642      	mov	r2, r8
10000f08:	4651      	mov	r1, sl
10000f0a:	0020      	movs	r0, r4
10000f0c:	f7ff fe84 	bl	10000c18 <ph_merge_nodes>
    if (!reserve) {
10000f10:	9b01      	ldr	r3, [sp, #4]
        return ph_merge_nodes(heap, ph_merge_nodes(heap, a, b), ph_merge_two_pass(heap, new_node));
10000f12:	0001      	movs	r1, r0
10000f14:	6820      	ldr	r0, [r4, #0]
10000f16:	19c2      	adds	r2, r0, r7
    if (!reserve) {
10000f18:	2b00      	cmp	r3, #0
10000f1a:	d0c4      	beq.n	10000ea6 <ph_remove_head_reserve+0x3a>
    if (new_root_id) ph_get_node(heap, new_root_id)->parent = 0;
10000f1c:	2900      	cmp	r1, #0
10000f1e:	d0cd      	beq.n	10000ebc <ph_remove_head_reserve+0x50>
10000f20:	004b      	lsls	r3, r1, #1
10000f22:	185b      	adds	r3, r3, r1
10000f24:	3b03      	subs	r3, #3
10000f26:	18c3      	adds	r3, r0, r3
10000f28:	2000      	movs	r0, #0
10000f2a:	7098      	strb	r0, [r3, #2]
10000f2c:	e7c6      	b.n	10000ebc <ph_remove_head_reserve+0x50>
    if (!reserve) {
10000f2e:	9b01      	ldr	r3, [sp, #4]
10000f30:	2b00      	cmp	r3, #0
10000f32:	d1c3      	bne.n	10000ebc <ph_remove_head_reserve+0x50>
10000f34:	e7b7      	b.n	10000ea6 <ph_remove_head_reserve+0x3a>
10000f36:	0050      	lsls	r0, r2, #1
10000f38:	1880      	adds	r0, r0, r2
10000f3a:	3803      	subs	r0, #3
10000f3c:	1809      	adds	r1, r1, r0
        new_node = ph_get_node(heap, b)->sibling;
10000f3e:	7848      	ldrb	r0, [r1, #1]
10000f40:	4683      	mov	fp, r0
        ph_get_node(heap, a)->sibling = ph_get_node(heap, b)->sibling = 0;
10000f42:	4648      	mov	r0, r9
10000f44:	7048      	strb	r0, [r1, #1]
10000f46:	7058      	strb	r0, [r3, #1]
        return ph_merge_nodes(heap, ph_merge_nodes(heap, a, b), ph_merge_two_pass(heap, new_node));
10000f48:	4641      	mov	r1, r8
10000f4a:	0020      	movs	r0, r4
10000f4c:	f7ff fe64 	bl	10000c18 <ph_merge_nodes>
10000f50:	4659      	mov	r1, fp
10000f52:	4680      	mov	r8, r0
10000f54:	0020      	movs	r0, r4
10000f56:	f7ff fec5 	bl	10000ce4 <ph_merge_two_pass>
10000f5a:	4641      	mov	r1, r8
10000f5c:	0002      	movs	r2, r0
10000f5e:	0020      	movs	r0, r4
10000f60:	f7ff fe5a 	bl	10000c18 <ph_merge_nodes>
10000f64:	4680      	mov	r8, r0
10000f66:	e7ce      	b.n	10000f06 <ph_remove_head_reserve+0x9a>

10000f68 <ph_delete>:

#include <stdio.h>
bool ph_delete(pheap_t *heap, pheap_node_id_t id) {
10000f68:	b570      	push	{r4, r5, r6, lr}
10000f6a:	0004      	movs	r4, r0
    // 1) trivial cases
    if (!id) return false;
10000f6c:	2900      	cmp	r1, #0
10000f6e:	d02c      	beq.n	10000fca <ph_delete+0x62>
    if (id == heap->root_id) {
10000f70:	7b43      	ldrb	r3, [r0, #13]
10000f72:	428b      	cmp	r3, r1
10000f74:	d02e      	beq.n	10000fd4 <ph_delete+0x6c>
10000f76:	6805      	ldr	r5, [r0, #0]
10000f78:	0048      	lsls	r0, r1, #1
10000f7a:	1840      	adds	r0, r0, r1
10000f7c:	3803      	subs	r0, #3
10000f7e:	1828      	adds	r0, r5, r0
        ph_remove_head(heap);
        return true;
    }
    // 2) unlink the node from the tree
    pheap_node_t *node = ph_get_node(heap, id);
    if (!node->parent) return false; // not in tree
10000f80:	7882      	ldrb	r2, [r0, #2]
10000f82:	2a00      	cmp	r2, #0
10000f84:	d021      	beq.n	10000fca <ph_delete+0x62>
10000f86:	0053      	lsls	r3, r2, #1
10000f88:	189b      	adds	r3, r3, r2
10000f8a:	3b03      	subs	r3, #3
    pheap_node_t *parent = ph_get_node(heap, node->parent);
    if (parent->child == id) {
10000f8c:	5cea      	ldrb	r2, [r5, r3]
10000f8e:	18ee      	adds	r6, r5, r3
10000f90:	428a      	cmp	r2, r1
10000f92:	d102      	bne.n	10000f9a <ph_delete+0x32>
10000f94:	e01b      	b.n	10000fce <ph_delete+0x66>
                prev_sibling->sibling = node->sibling;
                found = true;
                break;
            }
            prev_sibling_id = prev_sibling->sibling;
        } while (prev_sibling_id);
10000f96:	2a00      	cmp	r2, #0
10000f98:	d008      	beq.n	10000fac <ph_delete+0x44>
10000f9a:	0053      	lsls	r3, r2, #1
10000f9c:	189b      	adds	r3, r3, r2
10000f9e:	3b03      	subs	r3, #3
10000fa0:	18eb      	adds	r3, r5, r3
            if (prev_sibling->sibling == id) {
10000fa2:	785a      	ldrb	r2, [r3, #1]
10000fa4:	428a      	cmp	r2, r1
10000fa6:	d1f6      	bne.n	10000f96 <ph_delete+0x2e>
                prev_sibling->sibling = node->sibling;
10000fa8:	7842      	ldrb	r2, [r0, #1]
10000faa:	705a      	strb	r2, [r3, #1]
        assert(found);
    }
    node->sibling = node->parent = 0;
10000fac:	2300      	movs	r3, #0
//    ph_dump(heap, NULL, NULL);
    // 3) remove it from the head of its own subtree
    pheap_node_id_t new_sub_tree = ph_remove_any_head(heap, id, false);
10000fae:	2200      	movs	r2, #0
    node->sibling = node->parent = 0;
10000fb0:	7083      	strb	r3, [r0, #2]
10000fb2:	7043      	strb	r3, [r0, #1]
    pheap_node_id_t new_sub_tree = ph_remove_any_head(heap, id, false);
10000fb4:	0020      	movs	r0, r4
10000fb6:	f7ff fedd 	bl	10000d74 <ph_remove_any_head>
    assert(new_sub_tree != heap->root_id);
    heap->root_id = ph_merge_nodes(heap, heap->root_id, new_sub_tree);
10000fba:	7b61      	ldrb	r1, [r4, #13]
    pheap_node_id_t new_sub_tree = ph_remove_any_head(heap, id, false);
10000fbc:	0002      	movs	r2, r0
    heap->root_id = ph_merge_nodes(heap, heap->root_id, new_sub_tree);
10000fbe:	0020      	movs	r0, r4
10000fc0:	f7ff fe2a 	bl	10000c18 <ph_merge_nodes>
10000fc4:	7360      	strb	r0, [r4, #13]
    return true;
10000fc6:	2001      	movs	r0, #1
10000fc8:	e000      	b.n	10000fcc <ph_delete+0x64>
    if (!id) return false;
10000fca:	2000      	movs	r0, #0
}
10000fcc:	bd70      	pop	{r4, r5, r6, pc}
        parent->child = node->sibling;
10000fce:	7843      	ldrb	r3, [r0, #1]
10000fd0:	7033      	strb	r3, [r6, #0]
10000fd2:	e7eb      	b.n	10000fac <ph_delete+0x44>
    heap->root_id = ph_remove_any_head(heap, old_root_id, reserve);
10000fd4:	2200      	movs	r2, #0
10000fd6:	0019      	movs	r1, r3
10000fd8:	f7ff fecc 	bl	10000d74 <ph_remove_any_head>
10000fdc:	7360      	strb	r0, [r4, #13]
        return true;
10000fde:	2001      	movs	r0, #1
10000fe0:	e7f4      	b.n	10000fcc <ph_delete+0x64>
10000fe2:	46c0      	nop			; (mov r8, r8)

10000fe4 <__wrap_malloc>:
        panic("Out of memory");
    }
#endif
}

void *__wrap_malloc(size_t size) {
10000fe4:	b510      	push	{r4, lr}
#if PICO_USE_MALLOC_MUTEX
    mutex_enter_blocking(&malloc_mutex);
#endif
    void *rc = __real_malloc(size);
10000fe6:	f000 fda5 	bl	10001b34 <malloc>
        printf("malloc %d %p->%p\n", (uint) size, rc, ((uint8_t *) rc) + size);
    }
#endif
    check_alloc(rc, size);
    return rc;
}
10000fea:	bd10      	pop	{r4, pc}

10000fec <__wrap_calloc>:

void *__wrap_calloc(size_t count, size_t size) {
10000fec:	b510      	push	{r4, lr}
#if PICO_USE_MALLOC_MUTEX
    mutex_enter_blocking(&malloc_mutex);
#endif
    void *rc = __real_calloc(count, size);
10000fee:	f000 fd41 	bl	10001a74 <calloc>
        printf("calloc %d %p->%p\n", (uint) (count * size), rc, ((uint8_t *) rc) + size);
    }
#endif
    check_alloc(rc, size);
    return rc;
}
10000ff2:	bd10      	pop	{r4, pc}

10000ff4 <running_on_fpga>:
#include "hardware/address_mapped.h"
#include "hardware/regs/tbman.h"
#include "hardware/regs/sysinfo.h"

bool running_on_fpga() {
    return !!((*(io_ro_32 *)TBMAN_BASE) & TBMAN_PLATFORM_FPGA_BITS);
10000ff4:	4b02      	ldr	r3, [pc, #8]	; (10001000 <running_on_fpga+0xc>)
10000ff6:	6818      	ldr	r0, [r3, #0]
10000ff8:	0780      	lsls	r0, r0, #30
10000ffa:	0fc0      	lsrs	r0, r0, #31
}
10000ffc:	4770      	bx	lr
10000ffe:	46c0      	nop			; (mov r8, r8)
10001000:	4006c000 	.word	0x4006c000

10001004 <pll_init>:
// For MHZ definitions etc
#include "hardware/clocks.h"
#include "hardware/pll.h"

/// \tag::pll_init_calculations[]
void pll_init(PLL pll, uint32_t refdiv, uint32_t vco_freq, uint32_t post_div1, uint8_t post_div2) {
10001004:	b5f0      	push	{r4, r5, r6, r7, lr}
10001006:	46c6      	mov	lr, r8
10001008:	b500      	push	{lr}
1000100a:	001e      	movs	r6, r3
1000100c:	ab06      	add	r3, sp, #24
1000100e:	781f      	ldrb	r7, [r3, #0]
    // Turn off PLL in case it is already running
    pll->pwr = 0xffffffff;
10001010:	2301      	movs	r3, #1
10001012:	425b      	negs	r3, r3
10001014:	6043      	str	r3, [r0, #4]
    pll->fbdiv_int = 0;
10001016:	2300      	movs	r3, #0
void pll_init(PLL pll, uint32_t refdiv, uint32_t vco_freq, uint32_t post_div1, uint8_t post_div2) {
10001018:	0004      	movs	r4, r0
    pll->fbdiv_int = 0;
1000101a:	6083      	str	r3, [r0, #8]

    uint32_t ref_mhz = XOSC_MHZ / refdiv;
    pll->cs = refdiv;
1000101c:	6001      	str	r1, [r0, #0]
    uint32_t ref_mhz = XOSC_MHZ / refdiv;
1000101e:	200c      	movs	r0, #12
void pll_init(PLL pll, uint32_t refdiv, uint32_t vco_freq, uint32_t post_div1, uint8_t post_div2) {
10001020:	4690      	mov	r8, r2
    uint32_t ref_mhz = XOSC_MHZ / refdiv;
10001022:	f7ff f97b 	bl	1000031c <__wrap___aeabi_uidiv>

    // What are we multiplying the reference clock by to get the vco freq
    // (The regs are called div, because you divide the vco output and compare it to the refclk)
    uint32_t fbdiv = vco_freq / (ref_mhz * MHZ);
10001026:	0141      	lsls	r1, r0, #5
10001028:	1a09      	subs	r1, r1, r0
1000102a:	018d      	lsls	r5, r1, #6
1000102c:	1a69      	subs	r1, r5, r1
1000102e:	00c9      	lsls	r1, r1, #3
10001030:	1809      	adds	r1, r1, r0
10001032:	0189      	lsls	r1, r1, #6
10001034:	4640      	mov	r0, r8
10001036:	f7ff f971 	bl	1000031c <__wrap___aeabi_uidiv>
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
1000103a:	21c0      	movs	r1, #192	; 0xc0

    // Turn on PLL
    uint32_t power = PLL_PWR_PD_BITS | // Main power
                     PLL_PWR_VCOPD_BITS; // VCO Power

    hw_clear_bits(&pll->pwr, power);
1000103c:	1d23      	adds	r3, r4, #4
1000103e:	0189      	lsls	r1, r1, #6
10001040:	4319      	orrs	r1, r3
10001042:	2321      	movs	r3, #33	; 0x21
    pll->fbdiv_int = fbdiv;
10001044:	60a0      	str	r0, [r4, #8]
10001046:	600b      	str	r3, [r1, #0]

    // Wait for PLL to lock
    while (!(pll->cs & PLL_CS_LOCK_BITS)) tight_loop_contents();
10001048:	6822      	ldr	r2, [r4, #0]
1000104a:	2a00      	cmp	r2, #0
1000104c:	dafc      	bge.n	10001048 <pll_init+0x44>
1000104e:	2308      	movs	r3, #8

    // Set up post dividers - div1 feeds into div2 so if div1 is 5 and div2 is 2 then you get a divide by 10
    uint32_t pdiv = (post_div1 << PLL_PRIM_POSTDIV1_LSB) |
                    (post_div2 << PLL_PRIM_POSTDIV2_LSB);
10001050:	033f      	lsls	r7, r7, #12
    uint32_t pdiv = (post_div1 << PLL_PRIM_POSTDIV1_LSB) |
10001052:	0436      	lsls	r6, r6, #16
10001054:	433e      	orrs	r6, r7
    pll->prim = pdiv;
10001056:	60e6      	str	r6, [r4, #12]
10001058:	600b      	str	r3, [r1, #0]

    // Turn on post divider
    hw_clear_bits(&pll->pwr, PLL_PWR_POSTDIVPD_BITS);
/// \end::pll_init_finish[]
}
1000105a:	bc80      	pop	{r7}
1000105c:	46b8      	mov	r8, r7
1000105e:	bdf0      	pop	{r4, r5, r6, r7, pc}

10001060 <_out_char>:
    (void) idx;
    (void) maxlen;
}

// internal _putchar wrapper
static inline void _out_char(char character, void *buffer, size_t idx, size_t maxlen) {
10001060:	b510      	push	{r4, lr}
    (void) buffer;
    (void) idx;
    (void) maxlen;
    if (character) {
10001062:	2800      	cmp	r0, #0
10001064:	d100      	bne.n	10001068 <_out_char+0x8>
        _putchar(character);
    }
}
10001066:	bd10      	pop	{r4, pc}
    putchar(character);
10001068:	f000 f996 	bl	10001398 <__wrap_putchar>
}
1000106c:	e7fb      	b.n	10001066 <_out_char+0x6>
1000106e:	46c0      	nop			; (mov r8, r8)

10001070 <weak_raw_vprintf>:
    bool rc = weak_raw_vprintf(fmt, va);
    va_end(va);
    return rc;
}

bool weak_raw_vprintf(const char *fmt, va_list args) {
10001070:	b510      	push	{r4, lr}
    if (lazy_vsnprintf) {
10001072:	4a09      	ldr	r2, [pc, #36]	; (10001098 <weak_raw_vprintf+0x28>)
bool weak_raw_vprintf(const char *fmt, va_list args) {
10001074:	0003      	movs	r3, r0
    if (lazy_vsnprintf) {
10001076:	6814      	ldr	r4, [r2, #0]
bool weak_raw_vprintf(const char *fmt, va_list args) {
10001078:	b084      	sub	sp, #16
    if (lazy_vsnprintf) {
1000107a:	2c00      	cmp	r4, #0
1000107c:	d008      	beq.n	10001090 <weak_raw_vprintf+0x20>
        char buffer[1];
        lazy_vsnprintf(_out_char, buffer, (size_t) -1, fmt, args);
1000107e:	2201      	movs	r2, #1
10001080:	9100      	str	r1, [sp, #0]
10001082:	4806      	ldr	r0, [pc, #24]	; (1000109c <weak_raw_vprintf+0x2c>)
10001084:	4252      	negs	r2, r2
10001086:	a903      	add	r1, sp, #12
10001088:	47a0      	blx	r4
        return true;
1000108a:	2001      	movs	r0, #1
    } else {
        puts(fmt);
        return false;
    }
}
1000108c:	b004      	add	sp, #16
1000108e:	bd10      	pop	{r4, pc}
        puts(fmt);
10001090:	f000 f990 	bl	100013b4 <__wrap_puts>
        return false;
10001094:	2000      	movs	r0, #0
10001096:	e7f9      	b.n	1000108c <weak_raw_vprintf+0x1c>
10001098:	20000f18 	.word	0x20000f18
1000109c:	10001061 	.word	0x10001061

100010a0 <runtime_init>:
                   | (0x7 << 1) // size 2^(7 + 1) = 256
                   | (subregion_select << 8)
                   | 0x10000000; // XN = disable instruction fetch; no other bits means no permissions
}

void runtime_init(void) {
100010a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
100010a2:	4a2b      	ldr	r2, [pc, #172]	; (10001150 <runtime_init+0xb0>)
100010a4:	4b2b      	ldr	r3, [pc, #172]	; (10001154 <runtime_init+0xb4>)
100010a6:	492c      	ldr	r1, [pc, #176]	; (10001158 <runtime_init+0xb8>)
100010a8:	601a      	str	r2, [r3, #0]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
100010aa:	4a2c      	ldr	r2, [pc, #176]	; (1000115c <runtime_init+0xbc>)
100010ac:	4b2c      	ldr	r3, [pc, #176]	; (10001160 <runtime_init+0xc0>)
100010ae:	601a      	str	r2, [r3, #0]
100010b0:	0014      	movs	r4, r2
100010b2:	688b      	ldr	r3, [r1, #8]
100010b4:	439c      	bics	r4, r3
100010b6:	d1fb      	bne.n	100010b0 <runtime_init+0x10>
    extern void (*__preinit_array_end)();

    // Call each function in the list.
    // We have to take the address of the symbols, as __preinit_array_start *is*
    // the first function pointer, not the address of it.
    for (void (**p)() = &__preinit_array_start; p < &__preinit_array_end; ++p) {
100010b8:	4d2a      	ldr	r5, [pc, #168]	; (10001164 <runtime_init+0xc4>)
100010ba:	4e2b      	ldr	r6, [pc, #172]	; (10001168 <runtime_init+0xc8>)
100010bc:	42b5      	cmp	r5, r6
100010be:	d208      	bcs.n	100010d2 <runtime_init+0x32>
100010c0:	3e01      	subs	r6, #1
100010c2:	1b76      	subs	r6, r6, r5
100010c4:	08b6      	lsrs	r6, r6, #2
        (*p)();
100010c6:	cd08      	ldmia	r5!, {r3}
100010c8:	4798      	blx	r3
    for (void (**p)() = &__preinit_array_start; p < &__preinit_array_end; ++p) {
100010ca:	0023      	movs	r3, r4
100010cc:	3401      	adds	r4, #1
100010ce:	42b3      	cmp	r3, r6
100010d0:	d1f9      	bne.n	100010c6 <runtime_init+0x26>
    }

    // After calling preinit we have enough runtime to do the exciting maths
    // in clocks_init
    clocks_init();
100010d2:	f7ff f9eb 	bl	100004ac <clocks_init>
100010d6:	4a25      	ldr	r2, [pc, #148]	; (1000116c <runtime_init+0xcc>)
100010d8:	4b21      	ldr	r3, [pc, #132]	; (10001160 <runtime_init+0xc0>)
100010da:	601a      	str	r2, [r3, #0]
100010dc:	4a1e      	ldr	r2, [pc, #120]	; (10001158 <runtime_init+0xb8>)
100010de:	6893      	ldr	r3, [r2, #8]
100010e0:	43db      	mvns	r3, r3
100010e2:	01db      	lsls	r3, r3, #7
100010e4:	09dc      	lsrs	r4, r3, #7
100010e6:	2b00      	cmp	r3, #0
100010e8:	d1f9      	bne.n	100010de <runtime_init+0x3e>
    unreset_block_wait(RESETS_RESET_BITS);

#if !PICO_IE_26_29_UNCHANGED_ON_RESET
    // after resetting BANK0 we should disable IE on 26-29
    hw_clear_alias(padsbank0_hw)->io[26] = hw_clear_alias(padsbank0_hw)->io[27] =
            hw_clear_alias(padsbank0_hw)->io[28] = hw_clear_alias(padsbank0_hw)->io[29] = PADS_BANK0_GPIO0_IE_BITS;
100010ea:	2240      	movs	r2, #64	; 0x40
100010ec:	4b20      	ldr	r3, [pc, #128]	; (10001170 <runtime_init+0xd0>)

    extern mutex_t __mutex_array_start;
    extern mutex_t __mutex_array_end;

    // the first function pointer, not the address of it.
    for (mutex_t *m = &__mutex_array_start; m < &__mutex_array_end; m++) {
100010ee:	4d21      	ldr	r5, [pc, #132]	; (10001174 <runtime_init+0xd4>)
100010f0:	4f21      	ldr	r7, [pc, #132]	; (10001178 <runtime_init+0xd8>)
            hw_clear_alias(padsbank0_hw)->io[28] = hw_clear_alias(padsbank0_hw)->io[29] = PADS_BANK0_GPIO0_IE_BITS;
100010f2:	679a      	str	r2, [r3, #120]	; 0x78
100010f4:	675a      	str	r2, [r3, #116]	; 0x74
    hw_clear_alias(padsbank0_hw)->io[26] = hw_clear_alias(padsbank0_hw)->io[27] =
100010f6:	671a      	str	r2, [r3, #112]	; 0x70
100010f8:	66da      	str	r2, [r3, #108]	; 0x6c
    for (mutex_t *m = &__mutex_array_start; m < &__mutex_array_end; m++) {
100010fa:	42bd      	cmp	r5, r7
100010fc:	d20b      	bcs.n	10001116 <runtime_init+0x76>
100010fe:	2600      	movs	r6, #0
10001100:	3f01      	subs	r7, #1
10001102:	1b7f      	subs	r7, r7, r5
10001104:	08ff      	lsrs	r7, r7, #3
        mutex_init(m);
10001106:	0028      	movs	r0, r5
10001108:	f7ff fd78 	bl	10000bfc <mutex_init>
    for (mutex_t *m = &__mutex_array_start; m < &__mutex_array_end; m++) {
1000110c:	3508      	adds	r5, #8
1000110e:	0033      	movs	r3, r6
10001110:	3601      	adds	r6, #1
10001112:	42bb      	cmp	r3, r7
10001114:	d1f7      	bne.n	10001106 <runtime_init+0x66>
    }

#if !(PICO_NO_RAM_VECTOR_TABLE || PICO_NO_FLASH)
    __builtin_memcpy(ram_vector_table, (uint32_t *) scb_hw->vtor, sizeof(ram_vector_table));
10001116:	4e19      	ldr	r6, [pc, #100]	; (1000117c <runtime_init+0xdc>)
10001118:	4d19      	ldr	r5, [pc, #100]	; (10001180 <runtime_init+0xe0>)
1000111a:	22c0      	movs	r2, #192	; 0xc0
1000111c:	68a9      	ldr	r1, [r5, #8]
1000111e:	0030      	movs	r0, r6
10001120:	f7ff f960 	bl	100003e4 <__wrap___aeabi_memcpy>
    scb_hw->vtor = (intptr_t) ram_vector_table;
10001124:	60ae      	str	r6, [r5, #8]
    // install core0 stack guard
    extern char __StackBottom;
    runtime_install_stack_guard(&__StackBottom);
#endif

    spin_locks_reset();
10001126:	f000 f963 	bl	100013f0 <spin_locks_reset>
    irq_init_priorities();
1000112a:	f7ff fd43 	bl	10000bb4 <irq_init_priorities>
    alarm_pool_init_default();
1000112e:	f000 fb07 	bl	10001740 <alarm_pool_init_default>
    extern void (*__init_array_end)();

    // Call each function in the list.
    // We have to take the address of the symbols, as __init_array_start *is*
    // the first function pointer, not the address of it.
    for (void (**p)() = &__init_array_start; p < &__init_array_end; ++p) {
10001132:	4d14      	ldr	r5, [pc, #80]	; (10001184 <runtime_init+0xe4>)
10001134:	4e14      	ldr	r6, [pc, #80]	; (10001188 <runtime_init+0xe8>)
10001136:	42b5      	cmp	r5, r6
10001138:	d208      	bcs.n	1000114c <runtime_init+0xac>
1000113a:	3e01      	subs	r6, #1
1000113c:	1b76      	subs	r6, r6, r5
1000113e:	08b6      	lsrs	r6, r6, #2
        (*p)();
10001140:	cd08      	ldmia	r5!, {r3}
10001142:	4798      	blx	r3
    for (void (**p)() = &__init_array_start; p < &__init_array_end; ++p) {
10001144:	0023      	movs	r3, r4
10001146:	3401      	adds	r4, #1
10001148:	429e      	cmp	r6, r3
1000114a:	d1f9      	bne.n	10001140 <runtime_init+0xa0>
    }

}
1000114c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000114e:	46c0      	nop			; (mov r8, r8)
10001150:	ffffcdbf 	.word	0xffffcdbf
10001154:	4000e000 	.word	0x4000e000
10001158:	4000c000 	.word	0x4000c000
1000115c:	003c7ffe 	.word	0x003c7ffe
10001160:	4000f000 	.word	0x4000f000
10001164:	20000b60 	.word	0x20000b60
10001168:	20000b70 	.word	0x20000b70
1000116c:	01ffffff 	.word	0x01ffffff
10001170:	4001f000 	.word	0x4001f000
10001174:	20000b58 	.word	0x20000b58
10001178:	20000b60 	.word	0x20000b60
1000117c:	20000000 	.word	0x20000000
10001180:	e000ed00 	.word	0xe000ed00
10001184:	20000b70 	.word	0x20000b70
10001188:	20000b78 	.word	0x20000b78

1000118c <_sbrk>:
void *_sbrk(int incr) {
    extern char end; /* Set by linker.  */
    static char *heap_end;
    char *prev_heap_end;

    if (heap_end == 0)
1000118c:	4a09      	ldr	r2, [pc, #36]	; (100011b4 <_sbrk+0x28>)
void *_sbrk(int incr) {
1000118e:	0003      	movs	r3, r0
    if (heap_end == 0)
10001190:	6810      	ldr	r0, [r2, #0]
10001192:	2800      	cmp	r0, #0
10001194:	d005      	beq.n	100011a2 <_sbrk+0x16>
        heap_end = &end;

    prev_heap_end = heap_end;
    char *next_heap_end = heap_end + incr;

    if (__builtin_expect(next_heap_end >= (&__StackLimit), false)) {
10001196:	4908      	ldr	r1, [pc, #32]	; (100011b8 <_sbrk+0x2c>)
    char *next_heap_end = heap_end + incr;
10001198:	18c3      	adds	r3, r0, r3
    if (__builtin_expect(next_heap_end >= (&__StackLimit), false)) {
1000119a:	428b      	cmp	r3, r1
1000119c:	d207      	bcs.n	100011ae <_sbrk+0x22>
#else
        return (char *) -1;
#endif
    }

    heap_end = next_heap_end;
1000119e:	6013      	str	r3, [r2, #0]
    return (void *) prev_heap_end;
}
100011a0:	4770      	bx	lr
        heap_end = &end;
100011a2:	4806      	ldr	r0, [pc, #24]	; (100011bc <_sbrk+0x30>)
    if (__builtin_expect(next_heap_end >= (&__StackLimit), false)) {
100011a4:	4904      	ldr	r1, [pc, #16]	; (100011b8 <_sbrk+0x2c>)
    char *next_heap_end = heap_end + incr;
100011a6:	18c3      	adds	r3, r0, r3
        heap_end = &end;
100011a8:	6010      	str	r0, [r2, #0]
    if (__builtin_expect(next_heap_end >= (&__StackLimit), false)) {
100011aa:	428b      	cmp	r3, r1
100011ac:	d3f7      	bcc.n	1000119e <_sbrk+0x12>
        return (char *) -1;
100011ae:	2001      	movs	r0, #1
100011b0:	4240      	negs	r0, r0
100011b2:	e7f5      	b.n	100011a0 <_sbrk+0x14>
100011b4:	20000f14 	.word	0x20000f14
100011b8:	20040000 	.word	0x20040000
100011bc:	20000f4c 	.word	0x20000f4c

100011c0 <exit>:
    __asm__("bkpt #0");
100011c0:	be00      	bkpt	0x0000
100011c2:	e7fd      	b.n	100011c0 <exit>

100011c4 <panic>:
//  right now, print mutex may be uninitialised (in which case it deadlocks - although after printing "PANIC")
//  more importantly there may be no stdout/UART initialized yet
// todo we may want to think about where we print panic messages to; writing to USB appears to work
//  though it doesn't seem like we can expect it to... fine for now
//
void __attribute__((noreturn)) __printflike(1, 0) panic(const char *fmt, ...) {
100011c4:	b40f      	push	{r0, r1, r2, r3}
100011c6:	b500      	push	{lr}
    puts("\n*** PANIC ***\n");
100011c8:	4808      	ldr	r0, [pc, #32]	; (100011ec <panic+0x28>)
void __attribute__((noreturn)) __printflike(1, 0) panic(const char *fmt, ...) {
100011ca:	b083      	sub	sp, #12
    puts("\n*** PANIC ***\n");
100011cc:	f000 f8f2 	bl	100013b4 <__wrap_puts>
    if (fmt) {
100011d0:	9b04      	ldr	r3, [sp, #16]
100011d2:	2b00      	cmp	r3, #0
100011d4:	d007      	beq.n	100011e6 <panic+0x22>
#if PICO_PRINTF_NONE
        puts(fmt);
#else
        va_list args;
        va_start(args, fmt);
100011d6:	a905      	add	r1, sp, #20
#if PICO_PRINTF_ALWAYS_INCLUDED
        vprintf(fmt, args);
#else
        weak_raw_vprintf(fmt, args);
100011d8:	0018      	movs	r0, r3
        va_start(args, fmt);
100011da:	9101      	str	r1, [sp, #4]
        weak_raw_vprintf(fmt, args);
100011dc:	f7ff ff48 	bl	10001070 <weak_raw_vprintf>
#endif
        va_end(args);
        puts("\n");
100011e0:	4803      	ldr	r0, [pc, #12]	; (100011f0 <panic+0x2c>)
100011e2:	f000 f8e7 	bl	100013b4 <__wrap_puts>
100011e6:	be00      	bkpt	0x0000
100011e8:	e7fd      	b.n	100011e6 <panic+0x22>
100011ea:	46c0      	nop			; (mov r8, r8)
100011ec:	100024a0 	.word	0x100024a0
100011f0:	100024b0 	.word	0x100024b0

100011f4 <hard_assertion_failure>:
    }

    _exit(1);
}

void hard_assertion_failure(void) {
100011f4:	b510      	push	{r4, lr}
    panic("Hard assert");
100011f6:	4801      	ldr	r0, [pc, #4]	; (100011fc <hard_assertion_failure+0x8>)
100011f8:	f7ff ffe4 	bl	100011c4 <panic>
100011fc:	100024b4 	.word	0x100024b4

10001200 <stdio_out_chars_crlf.part.0>:
}
static void print_serialize_end() {
}
#endif

static void stdio_out_chars_crlf(stdio_driver_t *driver, const char *s, int len) {
10001200:	b5f0      	push	{r4, r5, r6, r7, lr}
10001202:	4646      	mov	r6, r8
10001204:	464f      	mov	r7, r9
10001206:	46d6      	mov	lr, sl
10001208:	4680      	mov	r8, r0
1000120a:	b5c0      	push	{r6, r7, lr}
1000120c:	000e      	movs	r6, r1
1000120e:	1e17      	subs	r7, r2, #0
        driver->out_chars(s, len);
        return;
    }
    int first_of_chunk = 0;
    static const char crlf_str[] = {'\r', '\n'};
    for (int i = 0; i < len; i++) {
10001210:	dd3f      	ble.n	10001292 <stdio_out_chars_crlf.part.0+0x92>
        bool prev_char_was_cr = i > 0 ? s[i - 1] == '\r' : driver->last_ended_with_cr;
10001212:	1e4b      	subs	r3, r1, #1
10001214:	4699      	mov	r9, r3
        if (s[i] == '\n' && !prev_char_was_cr) {
            if (i > first_of_chunk) {
                driver->out_chars(&s[first_of_chunk], i - first_of_chunk);
            }
            driver->out_chars(crlf_str, 2);
10001216:	4b21      	ldr	r3, [pc, #132]	; (1000129c <stdio_out_chars_crlf.part.0+0x9c>)
    for (int i = 0; i < len; i++) {
10001218:	2501      	movs	r5, #1
1000121a:	2400      	movs	r4, #0
    int first_of_chunk = 0;
1000121c:	2000      	movs	r0, #0
            driver->out_chars(crlf_str, 2);
1000121e:	469a      	mov	sl, r3
10001220:	e00d      	b.n	1000123e <stdio_out_chars_crlf.part.0+0x3e>
        bool prev_char_was_cr = i > 0 ? s[i - 1] == '\r' : driver->last_ended_with_cr;
10001222:	464b      	mov	r3, r9
10001224:	5d1b      	ldrb	r3, [r3, r4]
10001226:	3b0d      	subs	r3, #13
10001228:	425a      	negs	r2, r3
1000122a:	4153      	adcs	r3, r2
        if (s[i] == '\n' && !prev_char_was_cr) {
1000122c:	5d32      	ldrb	r2, [r6, r4]
        bool prev_char_was_cr = i > 0 ? s[i - 1] == '\r' : driver->last_ended_with_cr;
1000122e:	b2db      	uxtb	r3, r3
        if (s[i] == '\n' && !prev_char_was_cr) {
10001230:	2a0a      	cmp	r2, #10
10001232:	d00b      	beq.n	1000124c <stdio_out_chars_crlf.part.0+0x4c>
            first_of_chunk = i + 1;
10001234:	002b      	movs	r3, r5
    for (int i = 0; i < len; i++) {
10001236:	3401      	adds	r4, #1
10001238:	3501      	adds	r5, #1
1000123a:	429f      	cmp	r7, r3
1000123c:	dd1a      	ble.n	10001274 <stdio_out_chars_crlf.part.0+0x74>
        bool prev_char_was_cr = i > 0 ? s[i - 1] == '\r' : driver->last_ended_with_cr;
1000123e:	2c00      	cmp	r4, #0
10001240:	d1ef      	bne.n	10001222 <stdio_out_chars_crlf.part.0+0x22>
10001242:	4643      	mov	r3, r8
        if (s[i] == '\n' && !prev_char_was_cr) {
10001244:	5d32      	ldrb	r2, [r6, r4]
        bool prev_char_was_cr = i > 0 ? s[i - 1] == '\r' : driver->last_ended_with_cr;
10001246:	7c1b      	ldrb	r3, [r3, #16]
        if (s[i] == '\n' && !prev_char_was_cr) {
10001248:	2a0a      	cmp	r2, #10
1000124a:	d1f3      	bne.n	10001234 <stdio_out_chars_crlf.part.0+0x34>
1000124c:	2b00      	cmp	r3, #0
1000124e:	d1f1      	bne.n	10001234 <stdio_out_chars_crlf.part.0+0x34>
            if (i > first_of_chunk) {
10001250:	42a0      	cmp	r0, r4
10001252:	da04      	bge.n	1000125e <stdio_out_chars_crlf.part.0+0x5e>
                driver->out_chars(&s[first_of_chunk], i - first_of_chunk);
10001254:	4643      	mov	r3, r8
10001256:	1a21      	subs	r1, r4, r0
10001258:	681b      	ldr	r3, [r3, #0]
1000125a:	1830      	adds	r0, r6, r0
1000125c:	4798      	blx	r3
            driver->out_chars(crlf_str, 2);
1000125e:	4643      	mov	r3, r8
10001260:	4650      	mov	r0, sl
10001262:	681b      	ldr	r3, [r3, #0]
10001264:	2102      	movs	r1, #2
10001266:	4798      	blx	r3
    for (int i = 0; i < len; i++) {
10001268:	3401      	adds	r4, #1
            first_of_chunk = i + 1;
1000126a:	0028      	movs	r0, r5
1000126c:	002b      	movs	r3, r5
    for (int i = 0; i < len; i++) {
1000126e:	3501      	adds	r5, #1
10001270:	429f      	cmp	r7, r3
10001272:	dce4      	bgt.n	1000123e <stdio_out_chars_crlf.part.0+0x3e>
        }
    }
    if (first_of_chunk < len) {
10001274:	4287      	cmp	r7, r0
10001276:	dd04      	ble.n	10001282 <stdio_out_chars_crlf.part.0+0x82>
        driver->out_chars(&s[first_of_chunk], len - first_of_chunk);
10001278:	4643      	mov	r3, r8
1000127a:	1a39      	subs	r1, r7, r0
1000127c:	681b      	ldr	r3, [r3, #0]
1000127e:	1830      	adds	r0, r6, r0
10001280:	4798      	blx	r3
    }
    if (len > 0) {
        driver->last_ended_with_cr = s[len - 1] == '\r';
10001282:	19f6      	adds	r6, r6, r7
10001284:	3e01      	subs	r6, #1
10001286:	7833      	ldrb	r3, [r6, #0]
10001288:	3b0d      	subs	r3, #13
1000128a:	425a      	negs	r2, r3
1000128c:	4153      	adcs	r3, r2
1000128e:	4642      	mov	r2, r8
10001290:	7413      	strb	r3, [r2, #16]
    }
#else
    driver->out_chars(s, len);
#endif
}
10001292:	bce0      	pop	{r5, r6, r7}
10001294:	46ba      	mov	sl, r7
10001296:	46b1      	mov	r9, r6
10001298:	46a8      	mov	r8, r5
1000129a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000129c:	100024c0 	.word	0x100024c0

100012a0 <stdio_put_string.isra.0>:

static bool stdio_put_string(const char *s, int len, bool newline) {
100012a0:	b5f0      	push	{r4, r5, r6, r7, lr}
100012a2:	4657      	mov	r7, sl
100012a4:	4645      	mov	r5, r8
100012a6:	46de      	mov	lr, fp
100012a8:	464e      	mov	r6, r9
 *  \ingroup hardware_sync
 *
 * \return The core number the call was made from
 */
static inline uint get_core_num() {
    return (*(uint32_t *) (SIO_BASE + SIO_CPUID_OFFSET));
100012aa:	23d0      	movs	r3, #208	; 0xd0
100012ac:	b5e0      	push	{r5, r6, r7, lr}
100012ae:	061b      	lsls	r3, r3, #24
100012b0:	681c      	ldr	r4, [r3, #0]
    if (!mutex_try_enter(&print_mutex, &owner)) {
100012b2:	4b35      	ldr	r3, [pc, #212]	; (10001388 <stdio_put_string.isra.0+0xe8>)
static bool stdio_put_string(const char *s, int len, bool newline) {
100012b4:	b083      	sub	sp, #12
100012b6:	0007      	movs	r7, r0
100012b8:	000d      	movs	r5, r1
    if (!mutex_try_enter(&print_mutex, &owner)) {
100012ba:	0018      	movs	r0, r3
100012bc:	a901      	add	r1, sp, #4
static bool stdio_put_string(const char *s, int len, bool newline) {
100012be:	4690      	mov	r8, r2
    if (!mutex_try_enter(&print_mutex, &owner)) {
100012c0:	469a      	mov	sl, r3
100012c2:	f001 f899 	bl	100023f8 <__mutex_try_enter_veneer>
100012c6:	4681      	mov	r9, r0
100012c8:	2800      	cmp	r0, #0
100012ca:	d107      	bne.n	100012dc <stdio_put_string.isra.0+0x3c>
        if (owner == core_num) {
100012cc:	9b01      	ldr	r3, [sp, #4]
100012ce:	429c      	cmp	r4, r3
100012d0:	d004      	beq.n	100012dc <stdio_put_string.isra.0+0x3c>
        mutex_enter_blocking(&print_mutex);
100012d2:	4650      	mov	r0, sl
100012d4:	f001 f8a0 	bl	10002418 <__mutex_enter_blocking_veneer>
    return true;
100012d8:	2301      	movs	r3, #1
100012da:	4699      	mov	r9, r3
    if (!serialzed) {
#if PICO_STDIO_IGNORE_NESTED_STDOUT
        return false;
#endif
    }
    if (len == -1) len = strlen(s);
100012dc:	1c6b      	adds	r3, r5, #1
100012de:	d103      	bne.n	100012e8 <stdio_put_string.isra.0+0x48>
100012e0:	0038      	movs	r0, r7
100012e2:	f000 ff15 	bl	10002110 <strlen>
100012e6:	0005      	movs	r5, r0
    for (stdio_driver_t *driver = drivers; driver; driver = driver->next) {
100012e8:	4b28      	ldr	r3, [pc, #160]	; (1000138c <stdio_put_string.isra.0+0xec>)
100012ea:	681c      	ldr	r4, [r3, #0]
100012ec:	2c00      	cmp	r4, #0
100012ee:	d02f      	beq.n	10001350 <stdio_put_string.isra.0+0xb0>
        if (!driver->out_chars) continue;
        if (filter && filter != driver) continue;
        stdio_out_chars_crlf(driver, s, len);
        if (newline) {
            const char c = '\n';
100012f0:	230a      	movs	r3, #10
        if (filter && filter != driver) continue;
100012f2:	4e27      	ldr	r6, [pc, #156]	; (10001390 <stdio_put_string.isra.0+0xf0>)
            const char c = '\n';
100012f4:	469b      	mov	fp, r3
100012f6:	e002      	b.n	100012fe <stdio_put_string.isra.0+0x5e>
    for (stdio_driver_t *driver = drivers; driver; driver = driver->next) {
100012f8:	68e4      	ldr	r4, [r4, #12]
100012fa:	2c00      	cmp	r4, #0
100012fc:	d028      	beq.n	10001350 <stdio_put_string.isra.0+0xb0>
        if (!driver->out_chars) continue;
100012fe:	6822      	ldr	r2, [r4, #0]
10001300:	2a00      	cmp	r2, #0
10001302:	d0f9      	beq.n	100012f8 <stdio_put_string.isra.0+0x58>
        if (filter && filter != driver) continue;
10001304:	6833      	ldr	r3, [r6, #0]
10001306:	2b00      	cmp	r3, #0
10001308:	d001      	beq.n	1000130e <stdio_put_string.isra.0+0x6e>
1000130a:	42a3      	cmp	r3, r4
1000130c:	d1f4      	bne.n	100012f8 <stdio_put_string.isra.0+0x58>
    if (!driver->crlf_enabled) {
1000130e:	7c63      	ldrb	r3, [r4, #17]
10001310:	2b00      	cmp	r3, #0
10001312:	d027      	beq.n	10001364 <stdio_put_string.isra.0+0xc4>
10001314:	002a      	movs	r2, r5
10001316:	0039      	movs	r1, r7
10001318:	0020      	movs	r0, r4
1000131a:	f7ff ff71 	bl	10001200 <stdio_out_chars_crlf.part.0>
        if (newline) {
1000131e:	4643      	mov	r3, r8
10001320:	2b00      	cmp	r3, #0
10001322:	d0e9      	beq.n	100012f8 <stdio_put_string.isra.0+0x58>
            const char c = '\n';
10001324:	466b      	mov	r3, sp
10001326:	465a      	mov	r2, fp
10001328:	711a      	strb	r2, [r3, #4]
    if (!driver->crlf_enabled) {
1000132a:	7c63      	ldrb	r3, [r4, #17]
1000132c:	2b00      	cmp	r3, #0
1000132e:	d01d      	beq.n	1000136c <stdio_put_string.isra.0+0xcc>
        if (s[i] == '\n' && !prev_char_was_cr) {
10001330:	7c23      	ldrb	r3, [r4, #16]
10001332:	2b00      	cmp	r3, #0
10001334:	d023      	beq.n	1000137e <stdio_put_string.isra.0+0xde>
        driver->out_chars(&s[first_of_chunk], len - first_of_chunk);
10001336:	2101      	movs	r1, #1
10001338:	6823      	ldr	r3, [r4, #0]
1000133a:	a801      	add	r0, sp, #4
1000133c:	4798      	blx	r3
        driver->last_ended_with_cr = s[len - 1] == '\r';
1000133e:	466b      	mov	r3, sp
10001340:	791b      	ldrb	r3, [r3, #4]
10001342:	3b0d      	subs	r3, #13
10001344:	425a      	negs	r2, r3
10001346:	4153      	adcs	r3, r2
10001348:	7423      	strb	r3, [r4, #16]
    for (stdio_driver_t *driver = drivers; driver; driver = driver->next) {
1000134a:	68e4      	ldr	r4, [r4, #12]
1000134c:	2c00      	cmp	r4, #0
1000134e:	d1d6      	bne.n	100012fe <stdio_put_string.isra.0+0x5e>
            stdio_out_chars_crlf(driver, &c, 1);
        }
    }
    if (serialzed) {
10001350:	464b      	mov	r3, r9
10001352:	2b00      	cmp	r3, #0
10001354:	d10f      	bne.n	10001376 <stdio_put_string.isra.0+0xd6>
        stdout_serialize_end();
    }
    return len;
}
10001356:	b003      	add	sp, #12
10001358:	bcf0      	pop	{r4, r5, r6, r7}
1000135a:	46bb      	mov	fp, r7
1000135c:	46b2      	mov	sl, r6
1000135e:	46a9      	mov	r9, r5
10001360:	46a0      	mov	r8, r4
10001362:	bdf0      	pop	{r4, r5, r6, r7, pc}
        driver->out_chars(s, len);
10001364:	0029      	movs	r1, r5
10001366:	0038      	movs	r0, r7
10001368:	4790      	blx	r2
        return;
1000136a:	e7d8      	b.n	1000131e <stdio_put_string.isra.0+0x7e>
        driver->out_chars(s, len);
1000136c:	2101      	movs	r1, #1
1000136e:	6823      	ldr	r3, [r4, #0]
10001370:	a801      	add	r0, sp, #4
10001372:	4798      	blx	r3
        return;
10001374:	e7c0      	b.n	100012f8 <stdio_put_string.isra.0+0x58>
    mutex_exit(&print_mutex);
10001376:	4650      	mov	r0, sl
10001378:	f001 f82e 	bl	100023d8 <__mutex_exit_veneer>
    return len;
1000137c:	e7eb      	b.n	10001356 <stdio_put_string.isra.0+0xb6>
            driver->out_chars(crlf_str, 2);
1000137e:	2102      	movs	r1, #2
10001380:	4804      	ldr	r0, [pc, #16]	; (10001394 <stdio_put_string.isra.0+0xf4>)
10001382:	6823      	ldr	r3, [r4, #0]
10001384:	4798      	blx	r3
    if (first_of_chunk < len) {
10001386:	e7da      	b.n	1000133e <stdio_put_string.isra.0+0x9e>
10001388:	20000b58 	.word	0x20000b58
1000138c:	20000f08 	.word	0x20000f08
10001390:	20000f10 	.word	0x20000f10
10001394:	100024c0 	.word	0x100024c0

10001398 <__wrap_putchar>:
        // todo maybe a little sleep here?
    } while (!time_reached(until));
    return PICO_ERROR_TIMEOUT;
}

int WRAPPER_FUNC(putchar)(int c) {
10001398:	b510      	push	{r4, lr}
1000139a:	b082      	sub	sp, #8
    char cc = c;
1000139c:	466b      	mov	r3, sp
int WRAPPER_FUNC(putchar)(int c) {
1000139e:	0004      	movs	r4, r0
    stdio_put_string(&cc, 1, false);
100013a0:	2200      	movs	r2, #0
    char cc = c;
100013a2:	1dd8      	adds	r0, r3, #7
    stdio_put_string(&cc, 1, false);
100013a4:	2101      	movs	r1, #1
    char cc = c;
100013a6:	7004      	strb	r4, [r0, #0]
    stdio_put_string(&cc, 1, false);
100013a8:	f7ff ff7a 	bl	100012a0 <stdio_put_string.isra.0>
    return c;
}
100013ac:	0020      	movs	r0, r4
100013ae:	b002      	add	sp, #8
100013b0:	bd10      	pop	{r4, pc}
100013b2:	46c0      	nop			; (mov r8, r8)

100013b4 <__wrap_puts>:

int WRAPPER_FUNC(puts)(const char *s) {
100013b4:	b570      	push	{r4, r5, r6, lr}
100013b6:	0004      	movs	r4, r0
    int len = strlen(s);
100013b8:	f000 feaa 	bl	10002110 <strlen>
    stdio_put_string(s, len, true);
100013bc:	2201      	movs	r2, #1
100013be:	0001      	movs	r1, r0
    int len = strlen(s);
100013c0:	0005      	movs	r5, r0
    stdio_put_string(s, len, true);
100013c2:	0020      	movs	r0, r4
100013c4:	f7ff ff6c 	bl	100012a0 <stdio_put_string.isra.0>
        else drivers = driver;
    }
}

void stdio_flush() {
    for (stdio_driver_t *d = drivers; d; d = d->next) {
100013c8:	4b08      	ldr	r3, [pc, #32]	; (100013ec <__wrap_puts+0x38>)
100013ca:	681c      	ldr	r4, [r3, #0]
100013cc:	2c00      	cmp	r4, #0
100013ce:	d006      	beq.n	100013de <__wrap_puts+0x2a>
        if (d->out_flush) d->out_flush();
100013d0:	6863      	ldr	r3, [r4, #4]
100013d2:	2b00      	cmp	r3, #0
100013d4:	d005      	beq.n	100013e2 <__wrap_puts+0x2e>
100013d6:	4798      	blx	r3
    for (stdio_driver_t *d = drivers; d; d = d->next) {
100013d8:	68e4      	ldr	r4, [r4, #12]
100013da:	2c00      	cmp	r4, #0
100013dc:	d1f8      	bne.n	100013d0 <__wrap_puts+0x1c>
}
100013de:	0028      	movs	r0, r5
100013e0:	bd70      	pop	{r4, r5, r6, pc}
    for (stdio_driver_t *d = drivers; d; d = d->next) {
100013e2:	68e4      	ldr	r4, [r4, #12]
100013e4:	2c00      	cmp	r4, #0
100013e6:	d1f3      	bne.n	100013d0 <__wrap_puts+0x1c>
100013e8:	e7f9      	b.n	100013de <__wrap_puts+0x2a>
100013ea:	46c0      	nop			; (mov r8, r8)
100013ec:	20000f08 	.word	0x20000f08

100013f0 <spin_locks_reset>:
    *lock = 0;
100013f0:	2100      	movs	r1, #0

static void check_lock_num(uint __unused lock_num) {
    invalid_params_if(SYNC, lock_num >= 32);
}

void spin_locks_reset(void) {
100013f2:	4b04      	ldr	r3, [pc, #16]	; (10001404 <spin_locks_reset+0x14>)
    for (uint i = 0; i < NUM_SPIN_LOCKS; i++) {
100013f4:	4a04      	ldr	r2, [pc, #16]	; (10001408 <spin_locks_reset+0x18>)
    __asm volatile ("dmb");
100013f6:	f3bf 8f5f 	dmb	sy
    *lock = 0;
100013fa:	c302      	stmia	r3!, {r1}
100013fc:	4293      	cmp	r3, r2
100013fe:	d1fa      	bne.n	100013f6 <spin_locks_reset+0x6>
        spin_unlock_unsafe(spin_lock_instance(i));
    }
}
10001400:	4770      	bx	lr
10001402:	46c0      	nop			; (mov r8, r8)
10001404:	d0000100 	.word	0xd0000100
10001408:	d0000180 	.word	0xd0000180

1000140c <next_striped_spin_lock_num>:
    spin_unlock_unsafe(lock);
    return lock;
}

uint next_striped_spin_lock_num() {
    uint rc = striped_spin_lock_num++;
1000140c:	4a04      	ldr	r2, [pc, #16]	; (10001420 <next_striped_spin_lock_num+0x14>)
1000140e:	7810      	ldrb	r0, [r2, #0]
10001410:	1c43      	adds	r3, r0, #1
10001412:	b2db      	uxtb	r3, r3
    if (striped_spin_lock_num > PICO_SPINLOCK_ID_STRIPED_LAST) {
10001414:	2b17      	cmp	r3, #23
10001416:	d900      	bls.n	1000141a <next_striped_spin_lock_num+0xe>
        striped_spin_lock_num = PICO_SPINLOCK_ID_STRIPED_FIRST;
10001418:	2310      	movs	r3, #16
1000141a:	7013      	strb	r3, [r2, #0]
    }
    return rc;
}
1000141c:	4770      	bx	lr
1000141e:	46c0      	nop			; (mov r8, r8)
10001420:	20000318 	.word	0x20000318

10001424 <timer_pool_entry_comparator>:
}
#endif

static inline alarm_pool_entry_t *get_entry(alarm_pool_t *pool, pheap_node_id_t id) {
    assert(id && id <= pool->heap->max_nodes);
    return pool->entries + id - 1;
10001424:	6883      	ldr	r3, [r0, #8]
10001426:	480b      	ldr	r0, [pc, #44]	; (10001454 <timer_pool_entry_comparator+0x30>)
static inline uint8_t *get_entry_id_high(alarm_pool_t *pool, pheap_node_id_t id) {
    assert(id && id <= pool->heap->max_nodes);
    return pool->entry_ids_high + id - 1;
}

bool timer_pool_entry_comparator(void *user_data, pheap_node_id_t a, pheap_node_id_t b) {
10001428:	b510      	push	{r4, lr}
    return pool->entries + id - 1;
1000142a:	4684      	mov	ip, r0
1000142c:	4461      	add	r1, ip
1000142e:	4462      	add	r2, ip
    alarm_pool_t *pool = (alarm_pool_t *)user_data;
    return to_us_since_boot(get_entry(pool, a)->target) < to_us_since_boot(get_entry(pool, b)->target);
10001430:	0109      	lsls	r1, r1, #4
10001432:	0112      	lsls	r2, r2, #4
10001434:	189a      	adds	r2, r3, r2
10001436:	1859      	adds	r1, r3, r1
10001438:	6854      	ldr	r4, [r2, #4]
1000143a:	684b      	ldr	r3, [r1, #4]
1000143c:	2001      	movs	r0, #1
1000143e:	429c      	cmp	r4, r3
10001440:	d801      	bhi.n	10001446 <timer_pool_entry_comparator+0x22>
10001442:	d002      	beq.n	1000144a <timer_pool_entry_comparator+0x26>
10001444:	2000      	movs	r0, #0
10001446:	b2c0      	uxtb	r0, r0
}
10001448:	bd10      	pop	{r4, pc}
    return to_us_since_boot(get_entry(pool, a)->target) < to_us_since_boot(get_entry(pool, b)->target);
1000144a:	6812      	ldr	r2, [r2, #0]
1000144c:	680b      	ldr	r3, [r1, #0]
1000144e:	429a      	cmp	r2, r3
10001450:	d8f9      	bhi.n	10001446 <timer_pool_entry_comparator+0x22>
10001452:	e7f7      	b.n	10001444 <timer_pool_entry_comparator+0x20>
10001454:	0fffffff 	.word	0x0fffffff

10001458 <add_alarm_under_lock.isra.0>:

static inline alarm_id_t make_public_id(uint8_t id_high, pheap_node_id_t id) {
    return ((uint)id_high << 8u * sizeof(id)) | id;
}

static alarm_id_t add_alarm_under_lock(alarm_pool_t *pool, absolute_time_t time, alarm_callback_t callback,
10001458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000145a:	46de      	mov	lr, fp
1000145c:	4657      	mov	r7, sl
1000145e:	464e      	mov	r6, r9
10001460:	4645      	mov	r5, r8
10001462:	b5e0      	push	{r5, r6, r7, lr}
10001464:	001f      	movs	r7, r3
10001466:	ab0d      	add	r3, sp, #52	; 0x34
10001468:	781b      	ldrb	r3, [r3, #0]
1000146a:	0005      	movs	r5, r0
1000146c:	469b      	mov	fp, r3
                                       void *user_data, alarm_id_t reuse_id, bool create_if_past, bool *missed) {
    alarm_id_t id;
    if (reuse_id) {
1000146e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
static alarm_id_t add_alarm_under_lock(alarm_pool_t *pool, absolute_time_t time, alarm_callback_t callback,
10001470:	0016      	movs	r6, r2
    if (reuse_id) {
10001472:	2b00      	cmp	r3, #0
10001474:	d045      	beq.n	10001502 <add_alarm_under_lock.isra.0+0xaa>
    return pool->entries + id - 1;
10001476:	4a3f      	ldr	r2, [pc, #252]	; (10001574 <add_alarm_under_lock.isra.0+0x11c>)
        id = reuse_id;
    } else {
        id = ph_new_node(pool->heap);
    }
    if (id) {
        alarm_pool_entry_t *entry = get_entry(pool, id);
10001478:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    return pool->entries + id - 1;
1000147a:	4694      	mov	ip, r2
        alarm_pool_entry_t *entry = get_entry(pool, id);
1000147c:	b2db      	uxtb	r3, r3
    return pool->entries + id - 1;
1000147e:	68aa      	ldr	r2, [r5, #8]
        alarm_pool_entry_t *entry = get_entry(pool, id);
10001480:	469a      	mov	sl, r3
    return pool->entries + id - 1;
10001482:	9b0c      	ldr	r3, [sp, #48]	; 0x30
        entry->target = time;
        entry->callback = callback;
        entry->user_data = user_data;
        if (id == ph_insert(pool->heap, id)) {
10001484:	682c      	ldr	r4, [r5, #0]
    return pool->entries + id - 1;
10001486:	4463      	add	r3, ip
10001488:	4694      	mov	ip, r2
1000148a:	011b      	lsls	r3, r3, #4
        entry->callback = callback;
1000148c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    return pool->entries + id - 1;
1000148e:	4463      	add	r3, ip
        entry->callback = callback;
10001490:	609a      	str	r2, [r3, #8]
        entry->user_data = user_data;
10001492:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
        entry->target = time;
10001494:	601e      	str	r6, [r3, #0]
        entry->user_data = user_data;
10001496:	60da      	str	r2, [r3, #12]
10001498:	9a0c      	ldr	r2, [sp, #48]	; 0x30
        entry->target = time;
1000149a:	605f      	str	r7, [r3, #4]
1000149c:	4694      	mov	ip, r2
1000149e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    hn->child = hn->sibling = hn->parent = 0;
100014a0:	2200      	movs	r2, #0
    return heap->nodes + id - 1;
100014a2:	005b      	lsls	r3, r3, #1
100014a4:	4463      	add	r3, ip
100014a6:	3b03      	subs	r3, #3
100014a8:	4698      	mov	r8, r3
100014aa:	6823      	ldr	r3, [r4, #0]
100014ac:	4443      	add	r3, r8
    hn->child = hn->sibling = hn->parent = 0;
100014ae:	709a      	strb	r2, [r3, #2]
100014b0:	705a      	strb	r2, [r3, #1]
100014b2:	701a      	strb	r2, [r3, #0]
    heap->root_id = ph_merge_nodes(heap, heap->root_id, id);
100014b4:	7b63      	ldrb	r3, [r4, #13]
100014b6:	4699      	mov	r9, r3
    if (!a) return b;
100014b8:	2b00      	cmp	r3, #0
100014ba:	d042      	beq.n	10001542 <add_alarm_under_lock.isra.0+0xea>
    if (heap->comparator(heap->user_data, a, b)) {
100014bc:	4652      	mov	r2, sl
100014be:	0019      	movs	r1, r3
100014c0:	68a0      	ldr	r0, [r4, #8]
100014c2:	6863      	ldr	r3, [r4, #4]
100014c4:	4798      	blx	r3
    return heap->nodes + id - 1;
100014c6:	6822      	ldr	r2, [r4, #0]
    if (heap->comparator(heap->user_data, a, b)) {
100014c8:	2800      	cmp	r0, #0
100014ca:	d02b      	beq.n	10001524 <add_alarm_under_lock.isra.0+0xcc>
    return heap->nodes + id - 1;
100014cc:	464b      	mov	r3, r9
100014ce:	005b      	lsls	r3, r3, #1
100014d0:	444b      	add	r3, r9
100014d2:	3b03      	subs	r3, #3
100014d4:	18d1      	adds	r1, r2, r3
100014d6:	468c      	mov	ip, r1
100014d8:	4641      	mov	r1, r8
    c->parent = parent_id;
100014da:	4648      	mov	r0, r9
    return heap->nodes + id - 1;
100014dc:	1851      	adds	r1, r2, r1
    c->parent = parent_id;
100014de:	7088      	strb	r0, [r1, #2]
    if (!n->child) {
100014e0:	5cd3      	ldrb	r3, [r2, r3]
100014e2:	2b00      	cmp	r3, #0
100014e4:	d142      	bne.n	1000156c <add_alarm_under_lock.isra.0+0x114>
        n->child = child_id;
100014e6:	4653      	mov	r3, sl
100014e8:	4662      	mov	r2, ip
100014ea:	7013      	strb	r3, [r2, #0]
    heap->root_id = ph_merge_nodes(heap, heap->root_id, id);
100014ec:	464b      	mov	r3, r9
100014ee:	7363      	strb	r3, [r4, #13]
        if (id == ph_insert(pool->heap, id)) {
100014f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
100014f2:	4599      	cmp	r9, r3
100014f4:	d027      	beq.n	10001546 <add_alarm_under_lock.isra.0+0xee>
            }
            if (missed) *missed = is_missed;
        }
    }
    return id;
}
100014f6:	bcf0      	pop	{r4, r5, r6, r7}
100014f8:	46bb      	mov	fp, r7
100014fa:	46b2      	mov	sl, r6
100014fc:	46a9      	mov	r9, r5
100014fe:	46a0      	mov	r8, r4
10001500:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        id = ph_new_node(pool->heap);
10001502:	6802      	ldr	r2, [r0, #0]
    if (!heap->free_head_id) return 0;
10001504:	7b94      	ldrb	r4, [r2, #14]
10001506:	2c00      	cmp	r4, #0
10001508:	d0f5      	beq.n	100014f6 <add_alarm_under_lock.isra.0+0x9e>
    heap->free_head_id = ph_get_node(heap, id)->sibling;
1000150a:	6811      	ldr	r1, [r2, #0]
1000150c:	0063      	lsls	r3, r4, #1
1000150e:	468c      	mov	ip, r1
10001510:	191b      	adds	r3, r3, r4
10001512:	4463      	add	r3, ip
10001514:	3b03      	subs	r3, #3
10001516:	785b      	ldrb	r3, [r3, #1]
10001518:	7393      	strb	r3, [r2, #14]
    if (!heap->free_head_id) heap->free_tail_id = 0;
1000151a:	2b00      	cmp	r3, #0
1000151c:	d100      	bne.n	10001520 <add_alarm_under_lock.isra.0+0xc8>
1000151e:	73d3      	strb	r3, [r2, #15]
10001520:	940c      	str	r4, [sp, #48]	; 0x30
    if (id) {
10001522:	e7a8      	b.n	10001476 <add_alarm_under_lock.isra.0+0x1e>
    return heap->nodes + id - 1;
10001524:	4643      	mov	r3, r8
10001526:	18d1      	adds	r1, r2, r3
10001528:	464b      	mov	r3, r9
    c->parent = parent_id;
1000152a:	4650      	mov	r0, sl
    return heap->nodes + id - 1;
1000152c:	005b      	lsls	r3, r3, #1
1000152e:	444b      	add	r3, r9
10001530:	3b03      	subs	r3, #3
10001532:	18d3      	adds	r3, r2, r3
    c->parent = parent_id;
10001534:	7098      	strb	r0, [r3, #2]
    if (!n->child) {
10001536:	4640      	mov	r0, r8
10001538:	5c12      	ldrb	r2, [r2, r0]
1000153a:	2a00      	cmp	r2, #0
1000153c:	d118      	bne.n	10001570 <add_alarm_under_lock.isra.0+0x118>
        n->child = child_id;
1000153e:	464b      	mov	r3, r9
10001540:	700b      	strb	r3, [r1, #0]
    heap->root_id = ph_merge_nodes(heap, heap->root_id, id);
10001542:	4653      	mov	r3, sl
10001544:	7363      	strb	r3, [r4, #13]
            bool is_missed = hardware_alarm_set_target(pool->hardware_alarm_num, time);
10001546:	0032      	movs	r2, r6
10001548:	003b      	movs	r3, r7
1000154a:	7d28      	ldrb	r0, [r5, #20]
1000154c:	f000 f9ec 	bl	10001928 <hardware_alarm_set_target>
10001550:	1e04      	subs	r4, r0, #0
            if (is_missed && !create_if_past) {
10001552:	d006      	beq.n	10001562 <add_alarm_under_lock.isra.0+0x10a>
10001554:	465b      	mov	r3, fp
10001556:	2b00      	cmp	r3, #0
10001558:	d103      	bne.n	10001562 <add_alarm_under_lock.isra.0+0x10a>
                ph_delete(pool->heap, id);
1000155a:	4651      	mov	r1, sl
1000155c:	6828      	ldr	r0, [r5, #0]
1000155e:	f7ff fd03 	bl	10000f68 <ph_delete>
            if (missed) *missed = is_missed;
10001562:	9b0e      	ldr	r3, [sp, #56]	; 0x38
10001564:	2b00      	cmp	r3, #0
10001566:	d0c6      	beq.n	100014f6 <add_alarm_under_lock.isra.0+0x9e>
10001568:	701c      	strb	r4, [r3, #0]
    return id;
1000156a:	e7c4      	b.n	100014f6 <add_alarm_under_lock.isra.0+0x9e>
        c->sibling = n->child;
1000156c:	704b      	strb	r3, [r1, #1]
1000156e:	e7ba      	b.n	100014e6 <add_alarm_under_lock.isra.0+0x8e>
10001570:	705a      	strb	r2, [r3, #1]
10001572:	e7e4      	b.n	1000153e <add_alarm_under_lock.isra.0+0xe6>
10001574:	0fffffff 	.word	0x0fffffff

10001578 <alarm_pool_alarm_callback>:

static void alarm_pool_alarm_callback(uint alarm_num) {
10001578:	b5f0      	push	{r4, r5, r6, r7, lr}
1000157a:	46de      	mov	lr, fp
1000157c:	464e      	mov	r6, r9
1000157e:	4657      	mov	r7, sl
10001580:	4645      	mov	r5, r8
10001582:	2300      	movs	r3, #0
10001584:	b5e0      	push	{r5, r6, r7, lr}
10001586:	b08d      	sub	sp, #52	; 0x34
10001588:	930a      	str	r3, [sp, #40]	; 0x28
    // note this is called from timer IRQ handler
    alarm_pool_t *pool = pools[alarm_num];
1000158a:	4b6b      	ldr	r3, [pc, #428]	; (10001738 <alarm_pool_alarm_callback+0x1c0>)
1000158c:	0082      	lsls	r2, r0, #2
1000158e:	58d3      	ldr	r3, [r2, r3]
static void alarm_pool_alarm_callback(uint alarm_num) {
10001590:	900b      	str	r0, [sp, #44]	; 0x2c
    alarm_pool_t *pool = pools[alarm_num];
10001592:	4699      	mov	r9, r3
    bool again;
    do {
        absolute_time_t now = get_absolute_time();
        alarm_callback_t callback = NULL;
        absolute_time_t target = nil_time;
        void *user_data = NULL;
10001594:	2300      	movs	r3, #0
10001596:	469b      	mov	fp, r3
10001598:	464b      	mov	r3, r9
1000159a:	9307      	str	r3, [sp, #28]
 * \sa sleep_until()
 * \sa time_us_64()
 */
static inline absolute_time_t get_absolute_time() {
    absolute_time_t t;
    update_us_since_boot(&t, time_us_64());
1000159c:	f000 f974 	bl	10001888 <time_us_64>
        uint8_t id_high;
        again = false;
        uint32_t save = spin_lock_blocking(pool->lock);
100015a0:	9c07      	ldr	r4, [sp, #28]
100015a2:	0006      	movs	r6, r0
100015a4:	000f      	movs	r7, r1
100015a6:	6862      	ldr	r2, [r4, #4]
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
100015a8:	f3ef 8510 	mrs	r5, PRIMASK
    __asm volatile ("cpsid i");
100015ac:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
100015ae:	6813      	ldr	r3, [r2, #0]
100015b0:	2b00      	cmp	r3, #0
100015b2:	d0fc      	beq.n	100015ae <alarm_pool_alarm_callback+0x36>
    __asm volatile ("dmb");
100015b4:	0022      	movs	r2, r4
100015b6:	9407      	str	r4, [sp, #28]
100015b8:	f3bf 8f5f 	dmb	sy
        pheap_node_id_t next_id = ph_peek_head(pool->heap);
100015bc:	6824      	ldr	r4, [r4, #0]
    return heap->root_id;
100015be:	7b63      	ldrb	r3, [r4, #13]
100015c0:	4699      	mov	r9, r3
        if (next_id) {
100015c2:	2b00      	cmp	r3, #0
100015c4:	d067      	beq.n	10001696 <alarm_pool_alarm_callback+0x11e>
    return pool->entries + id - 1;
100015c6:	6892      	ldr	r2, [r2, #8]
100015c8:	4b5c      	ldr	r3, [pc, #368]	; (1000173c <alarm_pool_alarm_callback+0x1c4>)
100015ca:	4690      	mov	r8, r2
100015cc:	444b      	add	r3, r9
100015ce:	011b      	lsls	r3, r3, #4
100015d0:	4498      	add	r8, r3
            alarm_pool_entry_t *entry = get_entry(pool, next_id);
            if (absolute_time_diff_us(now, entry->target) <= 0) {
100015d2:	4643      	mov	r3, r8
100015d4:	681a      	ldr	r2, [r3, #0]
100015d6:	685b      	ldr	r3, [r3, #4]
 * \param to the second timestamp
 * \return the number of microseconds between the two timestamps (positive if `to` is after `from` except
 * in case of overflow)
 */
static inline int64_t absolute_time_diff_us(absolute_time_t from, absolute_time_t to) {
    return to_us_since_boot(to) - to_us_since_boot(from);
100015d8:	0010      	movs	r0, r2
100015da:	0019      	movs	r1, r3
100015dc:	1b80      	subs	r0, r0, r6
100015de:	41b9      	sbcs	r1, r7
100015e0:	2900      	cmp	r1, #0
100015e2:	dd5f      	ble.n	100016a4 <alarm_pool_alarm_callback+0x12c>
                user_data = entry->user_data;
                assert(callback);
                id_high = *get_entry_id_high(pool, next_id);
                pool->alarm_in_progress = make_public_id(id_high, removed_id);
            } else {
                if (hardware_alarm_set_target(alarm_num, entry->target)) {
100015e4:	980b      	ldr	r0, [sp, #44]	; 0x2c
100015e6:	f000 f99f 	bl	10001928 <hardware_alarm_set_target>
        void *user_data = NULL;
100015ea:	2300      	movs	r3, #0
        absolute_time_t target = nil_time;
100015ec:	2600      	movs	r6, #0
        void *user_data = NULL;
100015ee:	4698      	mov	r8, r3
        absolute_time_t target = nil_time;
100015f0:	2700      	movs	r7, #0
        alarm_callback_t callback = NULL;
100015f2:	469a      	mov	sl, r3
                    again = true;
                }
            }
        }
        spin_unlock(pool->lock, save);
100015f4:	9c07      	ldr	r4, [sp, #28]
100015f6:	6863      	ldr	r3, [r4, #4]
100015f8:	f3bf 8f5f 	dmb	sy
    *lock = 0;
100015fc:	465a      	mov	r2, fp
100015fe:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10001600:	f385 8810 	msr	PRIMASK, r5
        if (callback) {
10001604:	4653      	mov	r3, sl
10001606:	2b00      	cmp	r3, #0
10001608:	d108      	bne.n	1000161c <alarm_pool_alarm_callback+0xa4>
            }
            pool->alarm_in_progress = 0;
            spin_unlock(pool->lock, save);
            again = true;
        }
    } while (again);
1000160a:	2800      	cmp	r0, #0
1000160c:	d1c6      	bne.n	1000159c <alarm_pool_alarm_callback+0x24>
}
1000160e:	b00d      	add	sp, #52	; 0x34
10001610:	bcf0      	pop	{r4, r5, r6, r7}
10001612:	46bb      	mov	fp, r7
10001614:	46b2      	mov	sl, r6
10001616:	46a9      	mov	r9, r5
10001618:	46a0      	mov	r8, r4
1000161a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return ((uint)id_high << 8u * sizeof(id)) | id;
1000161c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
            int64_t repeat = callback(make_public_id(id_high, next_id), user_data);
1000161e:	4641      	mov	r1, r8
    return ((uint)id_high << 8u * sizeof(id)) | id;
10001620:	0218      	lsls	r0, r3, #8
10001622:	464b      	mov	r3, r9
10001624:	4318      	orrs	r0, r3
            int64_t repeat = callback(make_public_id(id_high, next_id), user_data);
10001626:	47d0      	blx	sl
10001628:	9008      	str	r0, [sp, #32]
1000162a:	9109      	str	r1, [sp, #36]	; 0x24
            save = spin_lock_blocking(pool->lock);
1000162c:	6862      	ldr	r2, [r4, #4]
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
1000162e:	f3ef 8510 	mrs	r5, PRIMASK
    __asm volatile ("cpsid i");
10001632:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
10001634:	6813      	ldr	r3, [r2, #0]
10001636:	2b00      	cmp	r3, #0
10001638:	d0fc      	beq.n	10001634 <alarm_pool_alarm_callback+0xbc>
    __asm volatile ("dmb");
1000163a:	9407      	str	r4, [sp, #28]
1000163c:	f3bf 8f5f 	dmb	sy
            if (repeat < 0 && pool->alarm_in_progress) {
10001640:	9908      	ldr	r1, [sp, #32]
10001642:	9a09      	ldr	r2, [sp, #36]	; 0x24
10001644:	2a00      	cmp	r2, #0
10001646:	db48      	blt.n	100016da <alarm_pool_alarm_callback+0x162>
            } else if (repeat > 0 && pool->alarm_in_progress) {
10001648:	4311      	orrs	r1, r2
1000164a:	d003      	beq.n	10001654 <alarm_pool_alarm_callback+0xdc>
1000164c:	9b07      	ldr	r3, [sp, #28]
1000164e:	691b      	ldr	r3, [r3, #16]
10001650:	2b00      	cmp	r3, #0
10001652:	d15d      	bne.n	10001710 <alarm_pool_alarm_callback+0x198>
                ph_add_to_free_list(pool->heap, next_id);
10001654:	9b07      	ldr	r3, [sp, #28]
10001656:	681b      	ldr	r3, [r3, #0]

bool ph_delete(pheap_t *heap, pheap_node_id_t id);

static inline void ph_add_to_free_list(pheap_t *heap, pheap_node_id_t id) {
    assert(id && !ph_contains(heap, id));
    if (heap->free_tail_id) {
10001658:	7bd9      	ldrb	r1, [r3, #15]
1000165a:	2900      	cmp	r1, #0
1000165c:	d007      	beq.n	1000166e <alarm_pool_alarm_callback+0xf6>
        ph_get_node(heap, heap->free_tail_id)->sibling = id;
1000165e:	004a      	lsls	r2, r1, #1
10001660:	1852      	adds	r2, r2, r1
10001662:	6819      	ldr	r1, [r3, #0]
10001664:	468c      	mov	ip, r1
10001666:	4649      	mov	r1, r9
10001668:	4462      	add	r2, ip
1000166a:	3a03      	subs	r2, #3
1000166c:	7051      	strb	r1, [r2, #1]
    }
    heap->free_tail_id = id;
1000166e:	464a      	mov	r2, r9
10001670:	73da      	strb	r2, [r3, #15]
    return pool->entry_ids_high + id - 1;
10001672:	464b      	mov	r3, r9
10001674:	9a07      	ldr	r2, [sp, #28]
10001676:	3b01      	subs	r3, #1
10001678:	68d1      	ldr	r1, [r2, #12]
                (*get_entry_id_high(pool, next_id))++; // we bump it for next use of id
1000167a:	5cca      	ldrb	r2, [r1, r3]
1000167c:	3201      	adds	r2, #1
1000167e:	54ca      	strb	r2, [r1, r3]
            pool->alarm_in_progress = 0;
10001680:	465b      	mov	r3, fp
10001682:	9a07      	ldr	r2, [sp, #28]
10001684:	6113      	str	r3, [r2, #16]
            spin_unlock(pool->lock, save);
10001686:	6853      	ldr	r3, [r2, #4]
10001688:	f3bf 8f5f 	dmb	sy
    *lock = 0;
1000168c:	465a      	mov	r2, fp
1000168e:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10001690:	f385 8810 	msr	PRIMASK, r5
    } while (again);
10001694:	e782      	b.n	1000159c <alarm_pool_alarm_callback+0x24>
        void *user_data = NULL;
10001696:	2300      	movs	r3, #0
        absolute_time_t target = nil_time;
10001698:	2600      	movs	r6, #0
        void *user_data = NULL;
1000169a:	4698      	mov	r8, r3
        absolute_time_t target = nil_time;
1000169c:	2700      	movs	r7, #0
        alarm_callback_t callback = NULL;
1000169e:	469a      	mov	sl, r3
        again = false;
100016a0:	2000      	movs	r0, #0
100016a2:	e7a7      	b.n	100015f4 <alarm_pool_alarm_callback+0x7c>
            if (absolute_time_diff_us(now, entry->target) <= 0) {
100016a4:	2900      	cmp	r1, #0
100016a6:	d101      	bne.n	100016ac <alarm_pool_alarm_callback+0x134>
100016a8:	2800      	cmp	r0, #0
100016aa:	d19b      	bne.n	100015e4 <alarm_pool_alarm_callback+0x6c>
                pheap_node_id_t __unused removed_id = ph_remove_head_reserve(pool->heap, true);
100016ac:	2101      	movs	r1, #1
100016ae:	0020      	movs	r0, r4
100016b0:	f7ff fbdc 	bl	10000e6c <ph_remove_head_reserve>
                target = entry->target;
100016b4:	4643      	mov	r3, r8
100016b6:	681e      	ldr	r6, [r3, #0]
100016b8:	685f      	ldr	r7, [r3, #4]
                callback = entry->callback;
100016ba:	689b      	ldr	r3, [r3, #8]
                id_high = *get_entry_id_high(pool, next_id);
100016bc:	9a07      	ldr	r2, [sp, #28]
                callback = entry->callback;
100016be:	469a      	mov	sl, r3
                user_data = entry->user_data;
100016c0:	4643      	mov	r3, r8
100016c2:	68db      	ldr	r3, [r3, #12]
100016c4:	4698      	mov	r8, r3
                id_high = *get_entry_id_high(pool, next_id);
100016c6:	68d3      	ldr	r3, [r2, #12]
100016c8:	444b      	add	r3, r9
100016ca:	3b01      	subs	r3, #1
100016cc:	781b      	ldrb	r3, [r3, #0]
100016ce:	930a      	str	r3, [sp, #40]	; 0x28
    return ((uint)id_high << 8u * sizeof(id)) | id;
100016d0:	021b      	lsls	r3, r3, #8
100016d2:	4303      	orrs	r3, r0
                pool->alarm_in_progress = make_public_id(id_high, removed_id);
100016d4:	6113      	str	r3, [r2, #16]
        again = false;
100016d6:	2000      	movs	r0, #0
100016d8:	e78c      	b.n	100015f4 <alarm_pool_alarm_callback+0x7c>
            if (repeat < 0 && pool->alarm_in_progress) {
100016da:	6923      	ldr	r3, [r4, #16]
100016dc:	2b00      	cmp	r3, #0
100016de:	d0b9      	beq.n	10001654 <alarm_pool_alarm_callback+0xdc>
    uint64_t delayed = base + us;
100016e0:	0033      	movs	r3, r6
100016e2:	003c      	movs	r4, r7
100016e4:	1a5b      	subs	r3, r3, r1
100016e6:	4194      	sbcs	r4, r2
100016e8:	001a      	movs	r2, r3
100016ea:	0023      	movs	r3, r4
    if (delayed < base) {
100016ec:	42a7      	cmp	r7, r4
100016ee:	d819      	bhi.n	10001724 <alarm_pool_alarm_callback+0x1ac>
100016f0:	429f      	cmp	r7, r3
100016f2:	d01b      	beq.n	1000172c <alarm_pool_alarm_callback+0x1b4>
                add_alarm_under_lock(pool, delayed_by_us(get_absolute_time(), repeat), callback, user_data, next_id,
100016f4:	4659      	mov	r1, fp
100016f6:	9104      	str	r1, [sp, #16]
100016f8:	2101      	movs	r1, #1
100016fa:	9103      	str	r1, [sp, #12]
100016fc:	4649      	mov	r1, r9
100016fe:	9102      	str	r1, [sp, #8]
10001700:	4641      	mov	r1, r8
10001702:	9101      	str	r1, [sp, #4]
10001704:	4651      	mov	r1, sl
10001706:	9807      	ldr	r0, [sp, #28]
10001708:	9100      	str	r1, [sp, #0]
1000170a:	f7ff fea5 	bl	10001458 <add_alarm_under_lock.isra.0>
1000170e:	e7b7      	b.n	10001680 <alarm_pool_alarm_callback+0x108>
    update_us_since_boot(&t, time_us_64());
10001710:	f000 f8ba 	bl	10001888 <time_us_64>
    uint64_t delayed = base + us;
10001714:	9a08      	ldr	r2, [sp, #32]
10001716:	9b09      	ldr	r3, [sp, #36]	; 0x24
    update_us_since_boot(&t, time_us_64());
10001718:	0006      	movs	r6, r0
1000171a:	000f      	movs	r7, r1
    uint64_t delayed = base + us;
1000171c:	1992      	adds	r2, r2, r6
1000171e:	417b      	adcs	r3, r7
    if (delayed < base) {
10001720:	4299      	cmp	r1, r3
10001722:	d9e5      	bls.n	100016f0 <alarm_pool_alarm_callback+0x178>
        delayed = (uint64_t)-1;
10001724:	2201      	movs	r2, #1
10001726:	4252      	negs	r2, r2
10001728:	17d3      	asrs	r3, r2, #31
1000172a:	e7e3      	b.n	100016f4 <alarm_pool_alarm_callback+0x17c>
    if (delayed < base) {
1000172c:	4296      	cmp	r6, r2
1000172e:	d9e1      	bls.n	100016f4 <alarm_pool_alarm_callback+0x17c>
        delayed = (uint64_t)-1;
10001730:	2201      	movs	r2, #1
10001732:	4252      	negs	r2, r2
10001734:	17d3      	asrs	r3, r2, #31
10001736:	e7dd      	b.n	100016f4 <alarm_pool_alarm_callback+0x17c>
10001738:	20000f1c 	.word	0x20000f1c
1000173c:	0fffffff 	.word	0x0fffffff

10001740 <alarm_pool_init_default>:
void alarm_pool_init_default() {
10001740:	b570      	push	{r4, r5, r6, lr}
    if (!default_alarm_pool) {
10001742:	4c18      	ldr	r4, [pc, #96]	; (100017a4 <alarm_pool_init_default+0x64>)
10001744:	6823      	ldr	r3, [r4, #0]
10001746:	2b00      	cmp	r3, #0
10001748:	d000      	beq.n	1000174c <alarm_pool_init_default+0xc>
}
1000174a:	bd70      	pop	{r4, r5, r6, pc}

// note the timer is create with IRQs on this core
alarm_pool_t *alarm_pool_create(uint hardware_alarm_num, uint max_timers) {
    hardware_alarm_claim(hardware_alarm_num);
1000174c:	2003      	movs	r0, #3
1000174e:	f000 f88f 	bl	10001870 <hardware_alarm_claim>
    hardware_alarm_cancel(hardware_alarm_num);
10001752:	2003      	movs	r0, #3
10001754:	f000 f94a 	bl	100019ec <hardware_alarm_cancel>
    hardware_alarm_set_callback(hardware_alarm_num, alarm_pool_alarm_callback);
10001758:	4913      	ldr	r1, [pc, #76]	; (100017a8 <alarm_pool_init_default+0x68>)
1000175a:	2003      	movs	r0, #3
1000175c:	f000 f89e 	bl	1000189c <hardware_alarm_set_callback>
    alarm_pool_t *pool = (alarm_pool_t *)malloc(sizeof(alarm_pool_t));
10001760:	2018      	movs	r0, #24
10001762:	f7ff fc3f 	bl	10000fe4 <__wrap_malloc>
10001766:	0005      	movs	r5, r0
    pool->lock = spin_lock_instance(next_striped_spin_lock_num());
10001768:	f7ff fe50 	bl	1000140c <next_striped_spin_lock_num>
    return (spin_lock_t *) (SIO_BASE + SIO_SPINLOCK0_OFFSET + lock_num * 4);
1000176c:	4b0f      	ldr	r3, [pc, #60]	; (100017ac <alarm_pool_init_default+0x6c>)
    pool->heap = ph_create(max_timers, timer_pool_entry_comparator, pool);
1000176e:	002a      	movs	r2, r5
10001770:	469c      	mov	ip, r3
10001772:	4460      	add	r0, ip
10001774:	0080      	lsls	r0, r0, #2
10001776:	490e      	ldr	r1, [pc, #56]	; (100017b0 <alarm_pool_init_default+0x70>)
    pool->lock = spin_lock_instance(next_striped_spin_lock_num());
10001778:	6068      	str	r0, [r5, #4]
    pool->heap = ph_create(max_timers, timer_pool_entry_comparator, pool);
1000177a:	2010      	movs	r0, #16
1000177c:	f7ff fa80 	bl	10000c80 <ph_create>
    pool->entries = (alarm_pool_entry_t *)calloc(max_timers, sizeof(alarm_pool_entry_t));
10001780:	2110      	movs	r1, #16
    pool->heap = ph_create(max_timers, timer_pool_entry_comparator, pool);
10001782:	6028      	str	r0, [r5, #0]
    pool->entries = (alarm_pool_entry_t *)calloc(max_timers, sizeof(alarm_pool_entry_t));
10001784:	2010      	movs	r0, #16
10001786:	f7ff fc31 	bl	10000fec <__wrap_calloc>
    pool->entry_ids_high = (uint8_t *)calloc(max_timers, sizeof(uint8_t));
1000178a:	2101      	movs	r1, #1
    pool->entries = (alarm_pool_entry_t *)calloc(max_timers, sizeof(alarm_pool_entry_t));
1000178c:	60a8      	str	r0, [r5, #8]
    pool->entry_ids_high = (uint8_t *)calloc(max_timers, sizeof(uint8_t));
1000178e:	2010      	movs	r0, #16
10001790:	f7ff fc2c 	bl	10000fec <__wrap_calloc>
    pool->hardware_alarm_num = hardware_alarm_num;
10001794:	2303      	movs	r3, #3
10001796:	752b      	strb	r3, [r5, #20]
    pools[hardware_alarm_num] = pool;
10001798:	4b06      	ldr	r3, [pc, #24]	; (100017b4 <alarm_pool_init_default+0x74>)
    pool->entry_ids_high = (uint8_t *)calloc(max_timers, sizeof(uint8_t));
1000179a:	60e8      	str	r0, [r5, #12]
    pools[hardware_alarm_num] = pool;
1000179c:	60dd      	str	r5, [r3, #12]
        default_alarm_pool = alarm_pool_create(PICO_TIME_DEFAULT_ALARM_POOL_HARDWARE_ALARM_NUM,
1000179e:	6025      	str	r5, [r4, #0]
}
100017a0:	e7d3      	b.n	1000174a <alarm_pool_init_default+0xa>
100017a2:	46c0      	nop			; (mov r8, r8)
100017a4:	20000f04 	.word	0x20000f04
100017a8:	10001579 	.word	0x10001579
100017ac:	34000040 	.word	0x34000040
100017b0:	10001425 	.word	0x10001425
100017b4:	20000f1c 	.word	0x20000f1c

100017b8 <hardware_alarm_irq_handler>:

static inline uint harware_alarm_irq_number(uint alarm_num) {
    return TIMER_IRQ_0 + alarm_num;
}

static void hardware_alarm_irq_handler() {
100017b8:	b5f0      	push	{r4, r5, r6, r7, lr}
100017ba:	46d6      	mov	lr, sl
100017bc:	464f      	mov	r7, r9
100017be:	4646      	mov	r6, r8
100017c0:	b5c0      	push	{r6, r7, lr}
    // Determine which timer this IRQ is for
    uint32_t ipsr;
    __asm volatile ("mrs %0, ipsr" : "=r" (ipsr)::);
100017c2:	f3ef 8305 	mrs	r3, IPSR
    uint alarm_num = (ipsr & 0x3fu) - 16 - TIMER_IRQ_0;
100017c6:	223f      	movs	r2, #63	; 0x3f
100017c8:	4013      	ands	r3, r2
100017ca:	0018      	movs	r0, r3
100017cc:	3810      	subs	r0, #16
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
100017ce:	f3ef 8c10 	mrs	ip, PRIMASK
    __asm volatile ("cpsid i");
100017d2:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
100017d4:	4d20      	ldr	r5, [pc, #128]	; (10001858 <hardware_alarm_irq_handler+0xa0>)
100017d6:	682a      	ldr	r2, [r5, #0]
100017d8:	2a00      	cmp	r2, #0
100017da:	d0fc      	beq.n	100017d6 <hardware_alarm_irq_handler+0x1e>
    __asm volatile ("dmb");
100017dc:	f3bf 8f5f 	dmb	sy
    hardware_alarm_callback_t callback = NULL;

    spin_lock_t *lock = spin_lock_instance(PICO_SPINLOCK_ID_TIMER);
    uint32_t save = spin_lock_blocking(lock);
    // Clear the timer IRQ (inside lock, because we check whether we have handled the IRQ yet in alarm_set by looking at the interrupt status
    timer_hw->intr = 1u << alarm_num;
100017e0:	2201      	movs	r2, #1
100017e2:	0011      	movs	r1, r2
100017e4:	4081      	lsls	r1, r0
100017e6:	4c1d      	ldr	r4, [pc, #116]	; (1000185c <hardware_alarm_irq_handler+0xa4>)
100017e8:	4688      	mov	r8, r1
100017ea:	6361      	str	r1, [r4, #52]	; 0x34

    // make sure the IRQ is still valid
    if (timer_callbacks_pending & (1u << alarm_num)) {
100017ec:	491c      	ldr	r1, [pc, #112]	; (10001860 <hardware_alarm_irq_handler+0xa8>)
100017ee:	0017      	movs	r7, r2
100017f0:	780e      	ldrb	r6, [r1, #0]
100017f2:	468a      	mov	sl, r1
100017f4:	0031      	movs	r1, r6
100017f6:	40c1      	lsrs	r1, r0
100017f8:	400f      	ands	r7, r1
100017fa:	420a      	tst	r2, r1
100017fc:	d109      	bne.n	10001812 <hardware_alarm_irq_handler+0x5a>
100017fe:	f3bf 8f5f 	dmb	sy
    *lock = 0;
10001802:	602f      	str	r7, [r5, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10001804:	f38c 8810 	msr	PRIMASK, ip
    spin_unlock(lock, save);

    if (callback) {
        callback(alarm_num);
    }
}
10001808:	bce0      	pop	{r5, r6, r7}
1000180a:	46ba      	mov	sl, r7
1000180c:	46b1      	mov	r9, r6
1000180e:	46a8      	mov	r8, r5
10001810:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (timer_hw->timerawh >= target_hi[alarm_num]) {
10001812:	4914      	ldr	r1, [pc, #80]	; (10001864 <hardware_alarm_irq_handler+0xac>)
10001814:	0082      	lsls	r2, r0, #2
10001816:	6a64      	ldr	r4, [r4, #36]	; 0x24
10001818:	5851      	ldr	r1, [r2, r1]
1000181a:	428c      	cmp	r4, r1
1000181c:	d30f      	bcc.n	1000183e <hardware_alarm_irq_handler+0x86>
            callback = alarm_callbacks[alarm_num];
1000181e:	4b12      	ldr	r3, [pc, #72]	; (10001868 <hardware_alarm_irq_handler+0xb0>)
10001820:	58d2      	ldr	r2, [r2, r3]
            timer_callbacks_pending &= ~(1u << alarm_num);
10001822:	4643      	mov	r3, r8
10001824:	439e      	bics	r6, r3
10001826:	4653      	mov	r3, sl
10001828:	701e      	strb	r6, [r3, #0]
    __asm volatile ("dmb");
1000182a:	f3bf 8f5f 	dmb	sy
    *lock = 0;
1000182e:	2300      	movs	r3, #0
10001830:	602b      	str	r3, [r5, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10001832:	f38c 8810 	msr	PRIMASK, ip
    if (callback) {
10001836:	2a00      	cmp	r2, #0
10001838:	d0e6      	beq.n	10001808 <hardware_alarm_irq_handler+0x50>
        callback(alarm_num);
1000183a:	4790      	blx	r2
}
1000183c:	e7e4      	b.n	10001808 <hardware_alarm_irq_handler+0x50>
            timer_hw->alarm[alarm_num] = timer_hw->alarm[alarm_num]; // re-arm the timer
1000183e:	4a0b      	ldr	r2, [pc, #44]	; (1000186c <hardware_alarm_irq_handler+0xb4>)
10001840:	009b      	lsls	r3, r3, #2
10001842:	4690      	mov	r8, r2
10001844:	4443      	add	r3, r8
10001846:	681a      	ldr	r2, [r3, #0]
10001848:	601a      	str	r2, [r3, #0]
    __asm volatile ("dmb");
1000184a:	f3bf 8f5f 	dmb	sy
    *lock = 0;
1000184e:	2300      	movs	r3, #0
10001850:	602b      	str	r3, [r5, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10001852:	f38c 8810 	msr	PRIMASK, ip
    if (callback) {
10001856:	e7d7      	b.n	10001808 <hardware_alarm_irq_handler+0x50>
10001858:	d0000128 	.word	0xd0000128
1000185c:	40054000 	.word	0x40054000
10001860:	20000f4b 	.word	0x20000f4b
10001864:	20000f38 	.word	0x20000f38
10001868:	20000dcc 	.word	0x20000dcc
1000186c:	40053fd0 	.word	0x40053fd0

10001870 <hardware_alarm_claim>:
void hardware_alarm_claim(uint alarm_num) {
10001870:	b510      	push	{r4, lr}
10001872:	0001      	movs	r1, r0
    hw_claim_or_assert(&claimed, alarm_num, "Hardware alarm %d already claimed");
10001874:	4a02      	ldr	r2, [pc, #8]	; (10001880 <hardware_alarm_claim+0x10>)
10001876:	4803      	ldr	r0, [pc, #12]	; (10001884 <hardware_alarm_claim+0x14>)
10001878:	f7fe fdec 	bl	10000454 <hw_claim_or_assert>
}
1000187c:	bd10      	pop	{r4, pc}
1000187e:	46c0      	nop			; (mov r8, r8)
10001880:	100024c4 	.word	0x100024c4
10001884:	20000f49 	.word	0x20000f49

10001888 <time_us_64>:
    uint32_t hi = timer_hw->timerawh;
10001888:	4b03      	ldr	r3, [pc, #12]	; (10001898 <time_us_64+0x10>)
1000188a:	6a59      	ldr	r1, [r3, #36]	; 0x24
        lo = timer_hw->timerawl;
1000188c:	000a      	movs	r2, r1
1000188e:	6a98      	ldr	r0, [r3, #40]	; 0x28
        uint32_t next_hi = timer_hw->timerawh;
10001890:	6a59      	ldr	r1, [r3, #36]	; 0x24
        if (hi == next_hi) break;
10001892:	428a      	cmp	r2, r1
10001894:	d1fa      	bne.n	1000188c <time_us_64+0x4>
}
10001896:	4770      	bx	lr
10001898:	40054000 	.word	0x40054000

1000189c <hardware_alarm_set_callback>:

void hardware_alarm_set_callback(uint alarm_num, hardware_alarm_callback_t callback) {
1000189c:	b570      	push	{r4, r5, r6, lr}
1000189e:	0004      	movs	r4, r0
100018a0:	000d      	movs	r5, r1
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
100018a2:	f3ef 8610 	mrs	r6, PRIMASK
    __asm volatile ("cpsid i");
100018a6:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
100018a8:	4a1a      	ldr	r2, [pc, #104]	; (10001914 <hardware_alarm_set_callback+0x78>)
100018aa:	6813      	ldr	r3, [r2, #0]
100018ac:	2b00      	cmp	r3, #0
100018ae:	d0fc      	beq.n	100018aa <hardware_alarm_set_callback+0xe>
    __asm volatile ("dmb");
100018b0:	f3bf 8f5f 	dmb	sy
    //  should disallow IRQ handlers on both cores
    check_hardware_alarm_num_param(alarm_num);
    uint irq_num = harware_alarm_irq_number(alarm_num);
    spin_lock_t *lock = spin_lock_instance(PICO_SPINLOCK_ID_TIMER);
    uint32_t save = spin_lock_blocking(lock);
    if (callback) {
100018b4:	2d00      	cmp	r5, #0
100018b6:	d01b      	beq.n	100018f0 <hardware_alarm_set_callback+0x54>
        if (hardware_alarm_irq_handler != irq_get_vtable_handler(irq_num)) {
100018b8:	0020      	movs	r0, r4
100018ba:	f7ff f80b 	bl	100008d4 <irq_get_vtable_handler>
100018be:	4916      	ldr	r1, [pc, #88]	; (10001918 <hardware_alarm_set_callback+0x7c>)
100018c0:	4281      	cmp	r1, r0
100018c2:	d00a      	beq.n	100018da <hardware_alarm_set_callback+0x3e>
            // note that set_exclusive will silently allow you to set the handler to the same thing
            // since it is idempotent, which means we don't need to worry about locking ourselves
            irq_set_exclusive_handler(irq_num, hardware_alarm_irq_handler);
100018c4:	0020      	movs	r0, r4
100018c6:	f7ff f80d 	bl	100008e4 <irq_set_exclusive_handler>
            irq_set_enabled(irq_num, true);
100018ca:	2101      	movs	r1, #1
100018cc:	0020      	movs	r0, r4
100018ce:	f7fe ffef 	bl	100008b0 <irq_set_enabled>
            // Enable interrupt in block and at processor
            hw_set_bits(&timer_hw->inte, 1u << alarm_num);
100018d2:	2301      	movs	r3, #1
100018d4:	40a3      	lsls	r3, r4
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
100018d6:	4a11      	ldr	r2, [pc, #68]	; (1000191c <hardware_alarm_set_callback+0x80>)
100018d8:	6013      	str	r3, [r2, #0]
        }
        alarm_callbacks[alarm_num] = callback;
100018da:	4b11      	ldr	r3, [pc, #68]	; (10001920 <hardware_alarm_set_callback+0x84>)
100018dc:	00a4      	lsls	r4, r4, #2
100018de:	50e5      	str	r5, [r4, r3]
100018e0:	f3bf 8f5f 	dmb	sy
    *lock = 0;
100018e4:	2200      	movs	r2, #0
100018e6:	4b0b      	ldr	r3, [pc, #44]	; (10001914 <hardware_alarm_set_callback+0x78>)
100018e8:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
100018ea:	f386 8810 	msr	PRIMASK, r6
        timer_callbacks_pending &= ~(1u << alarm_num);
        irq_remove_handler(irq_num, hardware_alarm_irq_handler);
        irq_set_enabled(irq_num, false);
    }
    spin_unlock(lock, save);
}
100018ee:	bd70      	pop	{r4, r5, r6, pc}
        alarm_callbacks[alarm_num] = NULL;
100018f0:	4b0b      	ldr	r3, [pc, #44]	; (10001920 <hardware_alarm_set_callback+0x84>)
100018f2:	00a2      	lsls	r2, r4, #2
100018f4:	50d5      	str	r5, [r2, r3]
        timer_callbacks_pending &= ~(1u << alarm_num);
100018f6:	2201      	movs	r2, #1
100018f8:	40a2      	lsls	r2, r4
100018fa:	490a      	ldr	r1, [pc, #40]	; (10001924 <hardware_alarm_set_callback+0x88>)
        irq_remove_handler(irq_num, hardware_alarm_irq_handler);
100018fc:	0020      	movs	r0, r4
        timer_callbacks_pending &= ~(1u << alarm_num);
100018fe:	780b      	ldrb	r3, [r1, #0]
10001900:	4393      	bics	r3, r2
10001902:	700b      	strb	r3, [r1, #0]
        irq_remove_handler(irq_num, hardware_alarm_irq_handler);
10001904:	4904      	ldr	r1, [pc, #16]	; (10001918 <hardware_alarm_set_callback+0x7c>)
10001906:	f7ff f817 	bl	10000938 <irq_remove_handler>
        irq_set_enabled(irq_num, false);
1000190a:	2100      	movs	r1, #0
1000190c:	0020      	movs	r0, r4
1000190e:	f7fe ffcf 	bl	100008b0 <irq_set_enabled>
10001912:	e7e5      	b.n	100018e0 <hardware_alarm_set_callback+0x44>
10001914:	d0000128 	.word	0xd0000128
10001918:	100017b9 	.word	0x100017b9
1000191c:	40056038 	.word	0x40056038
10001920:	20000dcc 	.word	0x20000dcc
10001924:	20000f4b 	.word	0x20000f4b

10001928 <hardware_alarm_set_target>:

bool hardware_alarm_set_target(uint alarm_num, absolute_time_t target) {
10001928:	b5f0      	push	{r4, r5, r6, r7, lr}
1000192a:	46ce      	mov	lr, r9
1000192c:	4647      	mov	r7, r8
1000192e:	b580      	push	{r7, lr}
    uint32_t hi = timer_hw->timerawh;
10001930:	4c2a      	ldr	r4, [pc, #168]	; (100019dc <hardware_alarm_set_target+0xb4>)
10001932:	6a61      	ldr	r1, [r4, #36]	; 0x24
        lo = timer_hw->timerawl;
10001934:	000d      	movs	r5, r1
10001936:	6aa6      	ldr	r6, [r4, #40]	; 0x28
        uint32_t next_hi = timer_hw->timerawh;
10001938:	6a61      	ldr	r1, [r4, #36]	; 0x24
        if (hi == next_hi) break;
1000193a:	42a9      	cmp	r1, r5
1000193c:	d1fa      	bne.n	10001934 <hardware_alarm_set_target+0xc>
    bool missed;
    uint64_t now = time_us_64();
    uint64_t t = to_us_since_boot(target);
    if (now >= t) {
1000193e:	428b      	cmp	r3, r1
10001940:	d807      	bhi.n	10001952 <hardware_alarm_set_target+0x2a>
10001942:	d004      	beq.n	1000194e <hardware_alarm_set_target+0x26>
        missed = true;
10001944:	2001      	movs	r0, #1
            }
        }
        spin_unlock(lock, save);
    }
    return missed;
}
10001946:	bcc0      	pop	{r6, r7}
10001948:	46b9      	mov	r9, r7
1000194a:	46b0      	mov	r8, r6
1000194c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (now >= t) {
1000194e:	42b2      	cmp	r2, r6
10001950:	d9f8      	bls.n	10001944 <hardware_alarm_set_target+0x1c>
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
10001952:	f3ef 8910 	mrs	r9, PRIMASK
    __asm volatile ("cpsid i");
10001956:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
10001958:	4c21      	ldr	r4, [pc, #132]	; (100019e0 <hardware_alarm_set_target+0xb8>)
1000195a:	6821      	ldr	r1, [r4, #0]
1000195c:	2900      	cmp	r1, #0
1000195e:	d0fc      	beq.n	1000195a <hardware_alarm_set_target+0x32>
    __asm volatile ("dmb");
10001960:	f3bf 8f5f 	dmb	sy
        timer_hw->intr = 1u << alarm_num;
10001964:	2501      	movs	r5, #1
10001966:	4085      	lsls	r5, r0
10001968:	4c1c      	ldr	r4, [pc, #112]	; (100019dc <hardware_alarm_set_target+0xb4>)
        timer_callbacks_pending |= 1u << alarm_num;
1000196a:	4f1e      	ldr	r7, [pc, #120]	; (100019e4 <hardware_alarm_set_target+0xbc>)
        timer_hw->intr = 1u << alarm_num;
1000196c:	6365      	str	r5, [r4, #52]	; 0x34
        timer_callbacks_pending |= 1u << alarm_num;
1000196e:	b2e9      	uxtb	r1, r5
10001970:	4688      	mov	r8, r1
10001972:	7839      	ldrb	r1, [r7, #0]
10001974:	468c      	mov	ip, r1
10001976:	4641      	mov	r1, r8
10001978:	4666      	mov	r6, ip
1000197a:	4331      	orrs	r1, r6
1000197c:	7039      	strb	r1, [r7, #0]
        timer_hw->alarm[alarm_num] = (uint32_t) t;
1000197e:	1d01      	adds	r1, r0, #4
10001980:	0089      	lsls	r1, r1, #2
10001982:	510a      	str	r2, [r1, r4]
        target_hi[alarm_num] = t >> 32u;
10001984:	4918      	ldr	r1, [pc, #96]	; (100019e8 <hardware_alarm_set_target+0xc0>)
10001986:	0080      	lsls	r0, r0, #2
10001988:	5043      	str	r3, [r0, r1]
        if (!(timer_hw->armed & 1u << alarm_num)) {
1000198a:	6a21      	ldr	r1, [r4, #32]
        missed = false;
1000198c:	2000      	movs	r0, #0
        if (!(timer_hw->armed & 1u << alarm_num)) {
1000198e:	4229      	tst	r1, r5
10001990:	d00b      	beq.n	100019aa <hardware_alarm_set_target+0x82>
    uint32_t hi = timer_hw->timerawh;
10001992:	6a61      	ldr	r1, [r4, #36]	; 0x24
        lo = timer_hw->timerawl;
10001994:	0008      	movs	r0, r1
10001996:	6aa6      	ldr	r6, [r4, #40]	; 0x28
        uint32_t next_hi = timer_hw->timerawh;
10001998:	6a61      	ldr	r1, [r4, #36]	; 0x24
        if (hi == next_hi) break;
1000199a:	4281      	cmp	r1, r0
1000199c:	d1fa      	bne.n	10001994 <hardware_alarm_set_target+0x6c>
            if (time_us_64() >= t) {
1000199e:	428b      	cmp	r3, r1
100019a0:	d802      	bhi.n	100019a8 <hardware_alarm_set_target+0x80>
100019a2:	d10a      	bne.n	100019ba <hardware_alarm_set_target+0x92>
100019a4:	42b2      	cmp	r2, r6
100019a6:	d908      	bls.n	100019ba <hardware_alarm_set_target+0x92>
        missed = false;
100019a8:	2000      	movs	r0, #0
100019aa:	f3bf 8f5f 	dmb	sy
    *lock = 0;
100019ae:	2200      	movs	r2, #0
100019b0:	4b0b      	ldr	r3, [pc, #44]	; (100019e0 <hardware_alarm_set_target+0xb8>)
100019b2:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
100019b4:	f389 8810 	msr	PRIMASK, r9
}
100019b8:	e7c5      	b.n	10001946 <hardware_alarm_set_target+0x1e>
                timer_hw->armed = 1u << alarm_num;
100019ba:	4b08      	ldr	r3, [pc, #32]	; (100019dc <hardware_alarm_set_target+0xb4>)
                timer_callbacks_pending &= ~(1u << alarm_num);
100019bc:	4642      	mov	r2, r8
                timer_hw->armed = 1u << alarm_num;
100019be:	621d      	str	r5, [r3, #32]
                timer_hw->intr = 1u << alarm_num; // clear the IRQ too
100019c0:	635d      	str	r5, [r3, #52]	; 0x34
                timer_callbacks_pending &= ~(1u << alarm_num);
100019c2:	4663      	mov	r3, ip
100019c4:	4393      	bics	r3, r2
                missed = true;
100019c6:	2001      	movs	r0, #1
                timer_callbacks_pending &= ~(1u << alarm_num);
100019c8:	703b      	strb	r3, [r7, #0]
    __asm volatile ("dmb");
100019ca:	f3bf 8f5f 	dmb	sy
    *lock = 0;
100019ce:	2200      	movs	r2, #0
100019d0:	4b03      	ldr	r3, [pc, #12]	; (100019e0 <hardware_alarm_set_target+0xb8>)
100019d2:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
100019d4:	f389 8810 	msr	PRIMASK, r9
100019d8:	e7b5      	b.n	10001946 <hardware_alarm_set_target+0x1e>
100019da:	46c0      	nop			; (mov r8, r8)
100019dc:	40054000 	.word	0x40054000
100019e0:	d0000128 	.word	0xd0000128
100019e4:	20000f4b 	.word	0x20000f4b
100019e8:	20000f38 	.word	0x20000f38

100019ec <hardware_alarm_cancel>:
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
100019ec:	f3ef 8c10 	mrs	ip, PRIMASK
    __asm volatile ("cpsid i");
100019f0:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
100019f2:	490a      	ldr	r1, [pc, #40]	; (10001a1c <hardware_alarm_cancel+0x30>)
100019f4:	680b      	ldr	r3, [r1, #0]
100019f6:	2b00      	cmp	r3, #0
100019f8:	d0fc      	beq.n	100019f4 <hardware_alarm_cancel+0x8>
    __asm volatile ("dmb");
100019fa:	f3bf 8f5f 	dmb	sy
void hardware_alarm_cancel(uint alarm_num) {
    check_hardware_alarm_num_param(alarm_num);

    spin_lock_t *lock = spin_lock_instance(PICO_SPINLOCK_ID_TIMER);
    uint32_t save = spin_lock_blocking(lock);
    timer_hw->armed = 1u << alarm_num;
100019fe:	2301      	movs	r3, #1
10001a00:	4083      	lsls	r3, r0
10001a02:	4a07      	ldr	r2, [pc, #28]	; (10001a20 <hardware_alarm_cancel+0x34>)
    timer_callbacks_pending &= ~(1u << alarm_num);
10001a04:	4807      	ldr	r0, [pc, #28]	; (10001a24 <hardware_alarm_cancel+0x38>)
    timer_hw->armed = 1u << alarm_num;
10001a06:	6213      	str	r3, [r2, #32]
    timer_callbacks_pending &= ~(1u << alarm_num);
10001a08:	7802      	ldrb	r2, [r0, #0]
10001a0a:	439a      	bics	r2, r3
10001a0c:	7002      	strb	r2, [r0, #0]
10001a0e:	f3bf 8f5f 	dmb	sy
    *lock = 0;
10001a12:	2300      	movs	r3, #0
10001a14:	600b      	str	r3, [r1, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10001a16:	f38c 8810 	msr	PRIMASK, ip
    spin_unlock(lock, save);
}
10001a1a:	4770      	bx	lr
10001a1c:	d0000128 	.word	0xd0000128
10001a20:	40054000 	.word	0x40054000
10001a24:	20000f4b 	.word	0x20000f4b

10001a28 <_retrieve_unique_id_on_boot>:

static_assert(PICO_UNIQUE_BOARD_ID_SIZE_BYTES == FLASH_UNIQUE_ID_SIZE_BYTES, "Board ID size must match flash ID size");

static pico_unique_board_id_t retrieved_id;

static void __attribute__((constructor)) _retrieve_unique_id_on_boot() {
10001a28:	b510      	push	{r4, lr}
    // build. Since this constructor is pre-main it would be annoying to
    // debug, so just produce something well-defined and obviously wrong.
    for (int i = 0; i < PICO_UNIQUE_BOARD_ID_SIZE_BYTES; i++)
        retrieved_id.id[i] = 0xee;
#else
    flash_get_unique_id(retrieved_id.id);
10001a2a:	4802      	ldr	r0, [pc, #8]	; (10001a34 <_retrieve_unique_id_on_boot+0xc>)
10001a2c:	f7fe feee 	bl	1000080c <flash_get_unique_id>
#endif
}
10001a30:	bd10      	pop	{r4, pc}
10001a32:	46c0      	nop			; (mov r8, r8)
10001a34:	20000f2c 	.word	0x20000f2c

10001a38 <watchdog_start_tick>:
#include "hardware/structs/psm.h"

/// \tag::watchdog_start_tick[]
void watchdog_start_tick(uint cycles) {
    // Important: This function also provides a tick reference to the timer
    watchdog_hw->tick = cycles | WATCHDOG_TICK_ENABLE_BITS;
10001a38:	2380      	movs	r3, #128	; 0x80
10001a3a:	4a02      	ldr	r2, [pc, #8]	; (10001a44 <watchdog_start_tick+0xc>)
10001a3c:	009b      	lsls	r3, r3, #2
10001a3e:	4303      	orrs	r3, r0
10001a40:	62d3      	str	r3, [r2, #44]	; 0x2c
}
10001a42:	4770      	bx	lr
10001a44:	40058000 	.word	0x40058000

10001a48 <xosc_init>:
#include "hardware/structs/xosc.h"

void xosc_init(void) {
    // Assumes 1-15 MHz input
    assert(XOSC_MHZ <= 15);
    xosc_hw->ctrl = XOSC_CTRL_FREQ_RANGE_VALUE_1_15MHZ;
10001a48:	23aa      	movs	r3, #170	; 0xaa
10001a4a:	4a06      	ldr	r2, [pc, #24]	; (10001a64 <xosc_init+0x1c>)
10001a4c:	011b      	lsls	r3, r3, #4
10001a4e:	6013      	str	r3, [r2, #0]

    // Set xosc startup delay
    uint32_t startup_delay = (((12 * MHZ) / 1000) + 128) / 256;
    xosc_hw->startup = startup_delay;
10001a50:	232f      	movs	r3, #47	; 0x2f
10001a52:	4905      	ldr	r1, [pc, #20]	; (10001a68 <xosc_init+0x20>)
10001a54:	60d3      	str	r3, [r2, #12]
10001a56:	4b05      	ldr	r3, [pc, #20]	; (10001a6c <xosc_init+0x24>)
10001a58:	6019      	str	r1, [r3, #0]

    // Set the enable bit now that we have set freq range and startup delay
    hw_set_bits(&xosc_hw->ctrl, XOSC_CTRL_ENABLE_VALUE_ENABLE << XOSC_CTRL_ENABLE_LSB);

    // Wait for XOSC to be stable
    while(!(xosc_hw->status & XOSC_STATUS_STABLE_BITS));
10001a5a:	6853      	ldr	r3, [r2, #4]
10001a5c:	2b00      	cmp	r3, #0
10001a5e:	dafc      	bge.n	10001a5a <xosc_init+0x12>
}
10001a60:	4770      	bx	lr
10001a62:	46c0      	nop			; (mov r8, r8)
10001a64:	40024000 	.word	0x40024000
10001a68:	00fab000 	.word	0x00fab000
10001a6c:	40026000 	.word	0x40026000

10001a70 <main>:
	return(0);
}

int main(void) {
	setup();
    while(1);
10001a70:	e7fe      	b.n	10001a70 <main>
10001a72:	46c0      	nop			; (mov r8, r8)

10001a74 <calloc>:
10001a74:	0003      	movs	r3, r0
10001a76:	b510      	push	{r4, lr}
10001a78:	000a      	movs	r2, r1
10001a7a:	4903      	ldr	r1, [pc, #12]	; (10001a88 <calloc+0x14>)
10001a7c:	6808      	ldr	r0, [r1, #0]
10001a7e:	0019      	movs	r1, r3
10001a80:	f000 f804 	bl	10001a8c <_calloc_r>
10001a84:	bd10      	pop	{r4, pc}
10001a86:	46c0      	nop			; (mov r8, r8)
10001a88:	2000031c 	.word	0x2000031c

10001a8c <_calloc_r>:
10001a8c:	b570      	push	{r4, r5, r6, lr}
10001a8e:	0c0b      	lsrs	r3, r1, #16
10001a90:	2400      	movs	r4, #0
10001a92:	0c15      	lsrs	r5, r2, #16
10001a94:	2b00      	cmp	r3, #0
10001a96:	d128      	bne.n	10001aea <_calloc_r+0x5e>
10001a98:	2d00      	cmp	r5, #0
10001a9a:	d137      	bne.n	10001b0c <_calloc_r+0x80>
10001a9c:	b28b      	uxth	r3, r1
10001a9e:	b291      	uxth	r1, r2
10001aa0:	4359      	muls	r1, r3
10001aa2:	f000 f851 	bl	10001b48 <_malloc_r>
10001aa6:	1e05      	subs	r5, r0, #0
10001aa8:	d019      	beq.n	10001ade <_calloc_r+0x52>
10001aaa:	0003      	movs	r3, r0
10001aac:	3b08      	subs	r3, #8
10001aae:	685a      	ldr	r2, [r3, #4]
10001ab0:	2303      	movs	r3, #3
10001ab2:	439a      	bics	r2, r3
10001ab4:	3a04      	subs	r2, #4
10001ab6:	2a24      	cmp	r2, #36	; 0x24
10001ab8:	d813      	bhi.n	10001ae2 <_calloc_r+0x56>
10001aba:	0003      	movs	r3, r0
10001abc:	2a13      	cmp	r2, #19
10001abe:	d90a      	bls.n	10001ad6 <_calloc_r+0x4a>
10001ac0:	6004      	str	r4, [r0, #0]
10001ac2:	6044      	str	r4, [r0, #4]
10001ac4:	3308      	adds	r3, #8
10001ac6:	2a1b      	cmp	r2, #27
10001ac8:	d905      	bls.n	10001ad6 <_calloc_r+0x4a>
10001aca:	6084      	str	r4, [r0, #8]
10001acc:	60c4      	str	r4, [r0, #12]
10001ace:	2a24      	cmp	r2, #36	; 0x24
10001ad0:	d025      	beq.n	10001b1e <_calloc_r+0x92>
10001ad2:	0003      	movs	r3, r0
10001ad4:	3310      	adds	r3, #16
10001ad6:	2200      	movs	r2, #0
10001ad8:	601a      	str	r2, [r3, #0]
10001ada:	605a      	str	r2, [r3, #4]
10001adc:	609a      	str	r2, [r3, #8]
10001ade:	0028      	movs	r0, r5
10001ae0:	bd70      	pop	{r4, r5, r6, pc}
10001ae2:	2100      	movs	r1, #0
10001ae4:	f7fe fc78 	bl	100003d8 <__wrap_memset>
10001ae8:	e7f9      	b.n	10001ade <_calloc_r+0x52>
10001aea:	2d00      	cmp	r5, #0
10001aec:	d111      	bne.n	10001b12 <_calloc_r+0x86>
10001aee:	1c15      	adds	r5, r2, #0
10001af0:	b289      	uxth	r1, r1
10001af2:	b292      	uxth	r2, r2
10001af4:	434a      	muls	r2, r1
10001af6:	b2ad      	uxth	r5, r5
10001af8:	b29b      	uxth	r3, r3
10001afa:	436b      	muls	r3, r5
10001afc:	0c11      	lsrs	r1, r2, #16
10001afe:	185b      	adds	r3, r3, r1
10001b00:	0c19      	lsrs	r1, r3, #16
10001b02:	d106      	bne.n	10001b12 <_calloc_r+0x86>
10001b04:	0419      	lsls	r1, r3, #16
10001b06:	b292      	uxth	r2, r2
10001b08:	4311      	orrs	r1, r2
10001b0a:	e7ca      	b.n	10001aa2 <_calloc_r+0x16>
10001b0c:	1c2b      	adds	r3, r5, #0
10001b0e:	1c0d      	adds	r5, r1, #0
10001b10:	e7ee      	b.n	10001af0 <_calloc_r+0x64>
10001b12:	f000 f809 	bl	10001b28 <__errno>
10001b16:	230c      	movs	r3, #12
10001b18:	2500      	movs	r5, #0
10001b1a:	6003      	str	r3, [r0, #0]
10001b1c:	e7df      	b.n	10001ade <_calloc_r+0x52>
10001b1e:	0003      	movs	r3, r0
10001b20:	6104      	str	r4, [r0, #16]
10001b22:	3318      	adds	r3, #24
10001b24:	6144      	str	r4, [r0, #20]
10001b26:	e7d6      	b.n	10001ad6 <_calloc_r+0x4a>

10001b28 <__errno>:
10001b28:	4b01      	ldr	r3, [pc, #4]	; (10001b30 <__errno+0x8>)
10001b2a:	6818      	ldr	r0, [r3, #0]
10001b2c:	4770      	bx	lr
10001b2e:	46c0      	nop			; (mov r8, r8)
10001b30:	2000031c 	.word	0x2000031c

10001b34 <malloc>:
10001b34:	b510      	push	{r4, lr}
10001b36:	4b03      	ldr	r3, [pc, #12]	; (10001b44 <malloc+0x10>)
10001b38:	0001      	movs	r1, r0
10001b3a:	6818      	ldr	r0, [r3, #0]
10001b3c:	f000 f804 	bl	10001b48 <_malloc_r>
10001b40:	bd10      	pop	{r4, pc}
10001b42:	46c0      	nop			; (mov r8, r8)
10001b44:	2000031c 	.word	0x2000031c

10001b48 <_malloc_r>:
10001b48:	b5f0      	push	{r4, r5, r6, r7, lr}
10001b4a:	464e      	mov	r6, r9
10001b4c:	4645      	mov	r5, r8
10001b4e:	46de      	mov	lr, fp
10001b50:	4657      	mov	r7, sl
10001b52:	b5e0      	push	{r5, r6, r7, lr}
10001b54:	000d      	movs	r5, r1
10001b56:	350b      	adds	r5, #11
10001b58:	0006      	movs	r6, r0
10001b5a:	b083      	sub	sp, #12
10001b5c:	2d16      	cmp	r5, #22
10001b5e:	d822      	bhi.n	10001ba6 <_malloc_r+0x5e>
10001b60:	2910      	cmp	r1, #16
10001b62:	d900      	bls.n	10001b66 <_malloc_r+0x1e>
10001b64:	e0b2      	b.n	10001ccc <_malloc_r+0x184>
10001b66:	f000 fab1 	bl	100020cc <__malloc_lock>
10001b6a:	2510      	movs	r5, #16
10001b6c:	2318      	movs	r3, #24
10001b6e:	2002      	movs	r0, #2
10001b70:	4fcc      	ldr	r7, [pc, #816]	; (10001ea4 <_malloc_r+0x35c>)
10001b72:	18fb      	adds	r3, r7, r3
10001b74:	001a      	movs	r2, r3
10001b76:	685c      	ldr	r4, [r3, #4]
10001b78:	3a08      	subs	r2, #8
10001b7a:	4294      	cmp	r4, r2
10001b7c:	d100      	bne.n	10001b80 <_malloc_r+0x38>
10001b7e:	e0b5      	b.n	10001cec <_malloc_r+0x1a4>
10001b80:	2303      	movs	r3, #3
10001b82:	6862      	ldr	r2, [r4, #4]
10001b84:	439a      	bics	r2, r3
10001b86:	0013      	movs	r3, r2
10001b88:	68e2      	ldr	r2, [r4, #12]
10001b8a:	68a1      	ldr	r1, [r4, #8]
10001b8c:	60ca      	str	r2, [r1, #12]
10001b8e:	6091      	str	r1, [r2, #8]
10001b90:	2201      	movs	r2, #1
10001b92:	18e3      	adds	r3, r4, r3
10001b94:	6859      	ldr	r1, [r3, #4]
10001b96:	0030      	movs	r0, r6
10001b98:	430a      	orrs	r2, r1
10001b9a:	605a      	str	r2, [r3, #4]
10001b9c:	f000 fa9e 	bl	100020dc <__malloc_unlock>
10001ba0:	0020      	movs	r0, r4
10001ba2:	3008      	adds	r0, #8
10001ba4:	e095      	b.n	10001cd2 <_malloc_r+0x18a>
10001ba6:	2307      	movs	r3, #7
10001ba8:	439d      	bics	r5, r3
10001baa:	d500      	bpl.n	10001bae <_malloc_r+0x66>
10001bac:	e08e      	b.n	10001ccc <_malloc_r+0x184>
10001bae:	42a9      	cmp	r1, r5
10001bb0:	d900      	bls.n	10001bb4 <_malloc_r+0x6c>
10001bb2:	e08b      	b.n	10001ccc <_malloc_r+0x184>
10001bb4:	f000 fa8a 	bl	100020cc <__malloc_lock>
10001bb8:	23fc      	movs	r3, #252	; 0xfc
10001bba:	005b      	lsls	r3, r3, #1
10001bbc:	429d      	cmp	r5, r3
10001bbe:	d200      	bcs.n	10001bc2 <_malloc_r+0x7a>
10001bc0:	e1a7      	b.n	10001f12 <_malloc_r+0x3ca>
10001bc2:	0a68      	lsrs	r0, r5, #9
10001bc4:	d100      	bne.n	10001bc8 <_malloc_r+0x80>
10001bc6:	e08b      	b.n	10001ce0 <_malloc_r+0x198>
10001bc8:	2804      	cmp	r0, #4
10001bca:	d900      	bls.n	10001bce <_malloc_r+0x86>
10001bcc:	e17a      	b.n	10001ec4 <_malloc_r+0x37c>
10001bce:	2338      	movs	r3, #56	; 0x38
10001bd0:	4698      	mov	r8, r3
10001bd2:	09a8      	lsrs	r0, r5, #6
10001bd4:	4480      	add	r8, r0
10001bd6:	3039      	adds	r0, #57	; 0x39
10001bd8:	00c1      	lsls	r1, r0, #3
10001bda:	4fb2      	ldr	r7, [pc, #712]	; (10001ea4 <_malloc_r+0x35c>)
10001bdc:	1879      	adds	r1, r7, r1
10001bde:	684c      	ldr	r4, [r1, #4]
10001be0:	3908      	subs	r1, #8
10001be2:	42a1      	cmp	r1, r4
10001be4:	d00e      	beq.n	10001c04 <_malloc_r+0xbc>
10001be6:	2303      	movs	r3, #3
10001be8:	469c      	mov	ip, r3
10001bea:	e004      	b.n	10001bf6 <_malloc_r+0xae>
10001bec:	2a00      	cmp	r2, #0
10001bee:	dacb      	bge.n	10001b88 <_malloc_r+0x40>
10001bf0:	68e4      	ldr	r4, [r4, #12]
10001bf2:	42a1      	cmp	r1, r4
10001bf4:	d006      	beq.n	10001c04 <_malloc_r+0xbc>
10001bf6:	4662      	mov	r2, ip
10001bf8:	6863      	ldr	r3, [r4, #4]
10001bfa:	4393      	bics	r3, r2
10001bfc:	1b5a      	subs	r2, r3, r5
10001bfe:	2a0f      	cmp	r2, #15
10001c00:	ddf4      	ble.n	10001bec <_malloc_r+0xa4>
10001c02:	4640      	mov	r0, r8
10001c04:	003a      	movs	r2, r7
10001c06:	693c      	ldr	r4, [r7, #16]
10001c08:	3208      	adds	r2, #8
10001c0a:	4294      	cmp	r4, r2
10001c0c:	d100      	bne.n	10001c10 <_malloc_r+0xc8>
10001c0e:	e078      	b.n	10001d02 <_malloc_r+0x1ba>
10001c10:	2303      	movs	r3, #3
10001c12:	6861      	ldr	r1, [r4, #4]
10001c14:	4399      	bics	r1, r3
10001c16:	4689      	mov	r9, r1
10001c18:	000b      	movs	r3, r1
10001c1a:	1b49      	subs	r1, r1, r5
10001c1c:	290f      	cmp	r1, #15
10001c1e:	dd00      	ble.n	10001c22 <_malloc_r+0xda>
10001c20:	e17b      	b.n	10001f1a <_malloc_r+0x3d2>
10001c22:	617a      	str	r2, [r7, #20]
10001c24:	613a      	str	r2, [r7, #16]
10001c26:	2900      	cmp	r1, #0
10001c28:	dab2      	bge.n	10001b90 <_malloc_r+0x48>
10001c2a:	2280      	movs	r2, #128	; 0x80
10001c2c:	0092      	lsls	r2, r2, #2
10001c2e:	4591      	cmp	r9, r2
10001c30:	d300      	bcc.n	10001c34 <_malloc_r+0xec>
10001c32:	e10f      	b.n	10001e54 <_malloc_r+0x30c>
10001c34:	0959      	lsrs	r1, r3, #5
10001c36:	08da      	lsrs	r2, r3, #3
10001c38:	2301      	movs	r3, #1
10001c3a:	408b      	lsls	r3, r1
10001c3c:	00d2      	lsls	r2, r2, #3
10001c3e:	6879      	ldr	r1, [r7, #4]
10001c40:	19d2      	adds	r2, r2, r7
10001c42:	430b      	orrs	r3, r1
10001c44:	6891      	ldr	r1, [r2, #8]
10001c46:	607b      	str	r3, [r7, #4]
10001c48:	60e2      	str	r2, [r4, #12]
10001c4a:	60a1      	str	r1, [r4, #8]
10001c4c:	6094      	str	r4, [r2, #8]
10001c4e:	60cc      	str	r4, [r1, #12]
10001c50:	2101      	movs	r1, #1
10001c52:	1082      	asrs	r2, r0, #2
10001c54:	4091      	lsls	r1, r2
10001c56:	4299      	cmp	r1, r3
10001c58:	d859      	bhi.n	10001d0e <_malloc_r+0x1c6>
10001c5a:	420b      	tst	r3, r1
10001c5c:	d105      	bne.n	10001c6a <_malloc_r+0x122>
10001c5e:	2203      	movs	r2, #3
10001c60:	4390      	bics	r0, r2
10001c62:	0049      	lsls	r1, r1, #1
10001c64:	3004      	adds	r0, #4
10001c66:	420b      	tst	r3, r1
10001c68:	d0fb      	beq.n	10001c62 <_malloc_r+0x11a>
10001c6a:	2303      	movs	r3, #3
10001c6c:	4698      	mov	r8, r3
10001c6e:	00c3      	lsls	r3, r0, #3
10001c70:	4699      	mov	r9, r3
10001c72:	44b9      	add	r9, r7
10001c74:	46cc      	mov	ip, r9
10001c76:	4682      	mov	sl, r0
10001c78:	4663      	mov	r3, ip
10001c7a:	68dc      	ldr	r4, [r3, #12]
10001c7c:	45a4      	cmp	ip, r4
10001c7e:	d107      	bne.n	10001c90 <_malloc_r+0x148>
10001c80:	e12c      	b.n	10001edc <_malloc_r+0x394>
10001c82:	2a00      	cmp	r2, #0
10001c84:	db00      	blt.n	10001c88 <_malloc_r+0x140>
10001c86:	e135      	b.n	10001ef4 <_malloc_r+0x3ac>
10001c88:	68e4      	ldr	r4, [r4, #12]
10001c8a:	45a4      	cmp	ip, r4
10001c8c:	d100      	bne.n	10001c90 <_malloc_r+0x148>
10001c8e:	e125      	b.n	10001edc <_malloc_r+0x394>
10001c90:	4642      	mov	r2, r8
10001c92:	6863      	ldr	r3, [r4, #4]
10001c94:	4393      	bics	r3, r2
10001c96:	1b5a      	subs	r2, r3, r5
10001c98:	2a0f      	cmp	r2, #15
10001c9a:	ddf2      	ble.n	10001c82 <_malloc_r+0x13a>
10001c9c:	2001      	movs	r0, #1
10001c9e:	4680      	mov	r8, r0
10001ca0:	1961      	adds	r1, r4, r5
10001ca2:	4305      	orrs	r5, r0
10001ca4:	6065      	str	r5, [r4, #4]
10001ca6:	68a0      	ldr	r0, [r4, #8]
10001ca8:	68e5      	ldr	r5, [r4, #12]
10001caa:	3708      	adds	r7, #8
10001cac:	60c5      	str	r5, [r0, #12]
10001cae:	60a8      	str	r0, [r5, #8]
10001cb0:	4640      	mov	r0, r8
10001cb2:	4310      	orrs	r0, r2
10001cb4:	60f9      	str	r1, [r7, #12]
10001cb6:	60b9      	str	r1, [r7, #8]
10001cb8:	6048      	str	r0, [r1, #4]
10001cba:	60cf      	str	r7, [r1, #12]
10001cbc:	0030      	movs	r0, r6
10001cbe:	608f      	str	r7, [r1, #8]
10001cc0:	50e2      	str	r2, [r4, r3]
10001cc2:	f000 fa0b 	bl	100020dc <__malloc_unlock>
10001cc6:	0020      	movs	r0, r4
10001cc8:	3008      	adds	r0, #8
10001cca:	e002      	b.n	10001cd2 <_malloc_r+0x18a>
10001ccc:	230c      	movs	r3, #12
10001cce:	2000      	movs	r0, #0
10001cd0:	6033      	str	r3, [r6, #0]
10001cd2:	b003      	add	sp, #12
10001cd4:	bcf0      	pop	{r4, r5, r6, r7}
10001cd6:	46bb      	mov	fp, r7
10001cd8:	46b2      	mov	sl, r6
10001cda:	46a9      	mov	r9, r5
10001cdc:	46a0      	mov	r8, r4
10001cde:	bdf0      	pop	{r4, r5, r6, r7, pc}
10001ce0:	2180      	movs	r1, #128	; 0x80
10001ce2:	233f      	movs	r3, #63	; 0x3f
10001ce4:	2040      	movs	r0, #64	; 0x40
10001ce6:	4698      	mov	r8, r3
10001ce8:	0089      	lsls	r1, r1, #2
10001cea:	e776      	b.n	10001bda <_malloc_r+0x92>
10001cec:	68dc      	ldr	r4, [r3, #12]
10001cee:	3002      	adds	r0, #2
10001cf0:	42a3      	cmp	r3, r4
10001cf2:	d000      	beq.n	10001cf6 <_malloc_r+0x1ae>
10001cf4:	e744      	b.n	10001b80 <_malloc_r+0x38>
10001cf6:	003a      	movs	r2, r7
10001cf8:	693c      	ldr	r4, [r7, #16]
10001cfa:	3208      	adds	r2, #8
10001cfc:	4294      	cmp	r4, r2
10001cfe:	d000      	beq.n	10001d02 <_malloc_r+0x1ba>
10001d00:	e786      	b.n	10001c10 <_malloc_r+0xc8>
10001d02:	2101      	movs	r1, #1
10001d04:	687b      	ldr	r3, [r7, #4]
10001d06:	1082      	asrs	r2, r0, #2
10001d08:	4091      	lsls	r1, r2
10001d0a:	4299      	cmp	r1, r3
10001d0c:	d9a5      	bls.n	10001c5a <_malloc_r+0x112>
10001d0e:	2303      	movs	r3, #3
10001d10:	68bc      	ldr	r4, [r7, #8]
10001d12:	6862      	ldr	r2, [r4, #4]
10001d14:	439a      	bics	r2, r3
10001d16:	4691      	mov	r9, r2
10001d18:	4295      	cmp	r5, r2
10001d1a:	d803      	bhi.n	10001d24 <_malloc_r+0x1dc>
10001d1c:	1b53      	subs	r3, r2, r5
10001d1e:	2b0f      	cmp	r3, #15
10001d20:	dd00      	ble.n	10001d24 <_malloc_r+0x1dc>
10001d22:	e089      	b.n	10001e38 <_malloc_r+0x2f0>
10001d24:	0023      	movs	r3, r4
10001d26:	444b      	add	r3, r9
10001d28:	4a5f      	ldr	r2, [pc, #380]	; (10001ea8 <_malloc_r+0x360>)
10001d2a:	9301      	str	r3, [sp, #4]
10001d2c:	4b5f      	ldr	r3, [pc, #380]	; (10001eac <_malloc_r+0x364>)
10001d2e:	4693      	mov	fp, r2
10001d30:	681b      	ldr	r3, [r3, #0]
10001d32:	6812      	ldr	r2, [r2, #0]
10001d34:	18eb      	adds	r3, r5, r3
10001d36:	3201      	adds	r2, #1
10001d38:	d100      	bne.n	10001d3c <_malloc_r+0x1f4>
10001d3a:	e13d      	b.n	10001fb8 <_malloc_r+0x470>
10001d3c:	4a5c      	ldr	r2, [pc, #368]	; (10001eb0 <_malloc_r+0x368>)
10001d3e:	4694      	mov	ip, r2
10001d40:	4463      	add	r3, ip
10001d42:	0b1b      	lsrs	r3, r3, #12
10001d44:	031b      	lsls	r3, r3, #12
10001d46:	9300      	str	r3, [sp, #0]
10001d48:	0030      	movs	r0, r6
10001d4a:	9900      	ldr	r1, [sp, #0]
10001d4c:	f000 f9ce 	bl	100020ec <_sbrk_r>
10001d50:	0003      	movs	r3, r0
10001d52:	4680      	mov	r8, r0
10001d54:	3301      	adds	r3, #1
10001d56:	d100      	bne.n	10001d5a <_malloc_r+0x212>
10001d58:	e0fa      	b.n	10001f50 <_malloc_r+0x408>
10001d5a:	9b01      	ldr	r3, [sp, #4]
10001d5c:	4283      	cmp	r3, r0
10001d5e:	d900      	bls.n	10001d62 <_malloc_r+0x21a>
10001d60:	e0f4      	b.n	10001f4c <_malloc_r+0x404>
10001d62:	4b54      	ldr	r3, [pc, #336]	; (10001eb4 <_malloc_r+0x36c>)
10001d64:	9800      	ldr	r0, [sp, #0]
10001d66:	001a      	movs	r2, r3
10001d68:	469a      	mov	sl, r3
10001d6a:	6812      	ldr	r2, [r2, #0]
10001d6c:	0003      	movs	r3, r0
10001d6e:	4694      	mov	ip, r2
10001d70:	4651      	mov	r1, sl
10001d72:	4463      	add	r3, ip
10001d74:	600b      	str	r3, [r1, #0]
10001d76:	9901      	ldr	r1, [sp, #4]
10001d78:	001a      	movs	r2, r3
10001d7a:	4541      	cmp	r1, r8
10001d7c:	d100      	bne.n	10001d80 <_malloc_r+0x238>
10001d7e:	e151      	b.n	10002024 <_malloc_r+0x4dc>
10001d80:	465b      	mov	r3, fp
10001d82:	681b      	ldr	r3, [r3, #0]
10001d84:	3301      	adds	r3, #1
10001d86:	d100      	bne.n	10001d8a <_malloc_r+0x242>
10001d88:	e156      	b.n	10002038 <_malloc_r+0x4f0>
10001d8a:	4643      	mov	r3, r8
10001d8c:	9901      	ldr	r1, [sp, #4]
10001d8e:	1a5b      	subs	r3, r3, r1
10001d90:	189a      	adds	r2, r3, r2
10001d92:	4653      	mov	r3, sl
10001d94:	601a      	str	r2, [r3, #0]
10001d96:	2307      	movs	r3, #7
10001d98:	4642      	mov	r2, r8
10001d9a:	4641      	mov	r1, r8
10001d9c:	401a      	ands	r2, r3
10001d9e:	9201      	str	r2, [sp, #4]
10001da0:	4219      	tst	r1, r3
10001da2:	d100      	bne.n	10001da6 <_malloc_r+0x25e>
10001da4:	e112      	b.n	10001fcc <_malloc_r+0x484>
10001da6:	2308      	movs	r3, #8
10001da8:	4698      	mov	r8, r3
10001daa:	1a88      	subs	r0, r1, r2
10001dac:	4b42      	ldr	r3, [pc, #264]	; (10001eb8 <_malloc_r+0x370>)
10001dae:	9900      	ldr	r1, [sp, #0]
10001db0:	4480      	add	r8, r0
10001db2:	4441      	add	r1, r8
10001db4:	1a9b      	subs	r3, r3, r2
10001db6:	1a5b      	subs	r3, r3, r1
10001db8:	051b      	lsls	r3, r3, #20
10001dba:	0d1b      	lsrs	r3, r3, #20
10001dbc:	9100      	str	r1, [sp, #0]
10001dbe:	0030      	movs	r0, r6
10001dc0:	0019      	movs	r1, r3
10001dc2:	469b      	mov	fp, r3
10001dc4:	f000 f992 	bl	100020ec <_sbrk_r>
10001dc8:	1c43      	adds	r3, r0, #1
10001dca:	d100      	bne.n	10001dce <_malloc_r+0x286>
10001dcc:	e150      	b.n	10002070 <_malloc_r+0x528>
10001dce:	4643      	mov	r3, r8
10001dd0:	1ac0      	subs	r0, r0, r3
10001dd2:	0003      	movs	r3, r0
10001dd4:	445b      	add	r3, fp
10001dd6:	9300      	str	r3, [sp, #0]
10001dd8:	4653      	mov	r3, sl
10001dda:	4652      	mov	r2, sl
10001ddc:	681b      	ldr	r3, [r3, #0]
10001dde:	2101      	movs	r1, #1
10001de0:	445b      	add	r3, fp
10001de2:	6013      	str	r3, [r2, #0]
10001de4:	4642      	mov	r2, r8
10001de6:	4640      	mov	r0, r8
10001de8:	60ba      	str	r2, [r7, #8]
10001dea:	9a00      	ldr	r2, [sp, #0]
10001dec:	430a      	orrs	r2, r1
10001dee:	6042      	str	r2, [r0, #4]
10001df0:	42bc      	cmp	r4, r7
10001df2:	d100      	bne.n	10001df6 <_malloc_r+0x2ae>
10001df4:	e124      	b.n	10002040 <_malloc_r+0x4f8>
10001df6:	464a      	mov	r2, r9
10001df8:	2a0f      	cmp	r2, #15
10001dfa:	d800      	bhi.n	10001dfe <_malloc_r+0x2b6>
10001dfc:	e122      	b.n	10002044 <_malloc_r+0x4fc>
10001dfe:	2007      	movs	r0, #7
10001e00:	3a0c      	subs	r2, #12
10001e02:	4382      	bics	r2, r0
10001e04:	6860      	ldr	r0, [r4, #4]
10001e06:	4001      	ands	r1, r0
10001e08:	2005      	movs	r0, #5
10001e0a:	4311      	orrs	r1, r2
10001e0c:	6061      	str	r1, [r4, #4]
10001e0e:	18a1      	adds	r1, r4, r2
10001e10:	6048      	str	r0, [r1, #4]
10001e12:	6088      	str	r0, [r1, #8]
10001e14:	2a0f      	cmp	r2, #15
10001e16:	d900      	bls.n	10001e1a <_malloc_r+0x2d2>
10001e18:	e135      	b.n	10002086 <_malloc_r+0x53e>
10001e1a:	4642      	mov	r2, r8
10001e1c:	4644      	mov	r4, r8
10001e1e:	6852      	ldr	r2, [r2, #4]
10001e20:	4926      	ldr	r1, [pc, #152]	; (10001ebc <_malloc_r+0x374>)
10001e22:	6808      	ldr	r0, [r1, #0]
10001e24:	4298      	cmp	r0, r3
10001e26:	d200      	bcs.n	10001e2a <_malloc_r+0x2e2>
10001e28:	600b      	str	r3, [r1, #0]
10001e2a:	4925      	ldr	r1, [pc, #148]	; (10001ec0 <_malloc_r+0x378>)
10001e2c:	6808      	ldr	r0, [r1, #0]
10001e2e:	4298      	cmp	r0, r3
10001e30:	d300      	bcc.n	10001e34 <_malloc_r+0x2ec>
10001e32:	e08f      	b.n	10001f54 <_malloc_r+0x40c>
10001e34:	600b      	str	r3, [r1, #0]
10001e36:	e08d      	b.n	10001f54 <_malloc_r+0x40c>
10001e38:	2201      	movs	r2, #1
10001e3a:	0029      	movs	r1, r5
10001e3c:	4313      	orrs	r3, r2
10001e3e:	4311      	orrs	r1, r2
10001e40:	1965      	adds	r5, r4, r5
10001e42:	6061      	str	r1, [r4, #4]
10001e44:	0030      	movs	r0, r6
10001e46:	60bd      	str	r5, [r7, #8]
10001e48:	606b      	str	r3, [r5, #4]
10001e4a:	f000 f947 	bl	100020dc <__malloc_unlock>
10001e4e:	0020      	movs	r0, r4
10001e50:	3008      	adds	r0, #8
10001e52:	e73e      	b.n	10001cd2 <_malloc_r+0x18a>
10001e54:	0a5a      	lsrs	r2, r3, #9
10001e56:	2a04      	cmp	r2, #4
10001e58:	d972      	bls.n	10001f40 <_malloc_r+0x3f8>
10001e5a:	2a14      	cmp	r2, #20
10001e5c:	d900      	bls.n	10001e60 <_malloc_r+0x318>
10001e5e:	e0c5      	b.n	10001fec <_malloc_r+0x4a4>
10001e60:	0011      	movs	r1, r2
10001e62:	325c      	adds	r2, #92	; 0x5c
10001e64:	315b      	adds	r1, #91	; 0x5b
10001e66:	00d2      	lsls	r2, r2, #3
10001e68:	2308      	movs	r3, #8
10001e6a:	425b      	negs	r3, r3
10001e6c:	469c      	mov	ip, r3
10001e6e:	18ba      	adds	r2, r7, r2
10001e70:	4494      	add	ip, r2
10001e72:	4663      	mov	r3, ip
10001e74:	689a      	ldr	r2, [r3, #8]
10001e76:	2303      	movs	r3, #3
10001e78:	4698      	mov	r8, r3
10001e7a:	4594      	cmp	ip, r2
10001e7c:	d100      	bne.n	10001e80 <_malloc_r+0x338>
10001e7e:	e09e      	b.n	10001fbe <_malloc_r+0x476>
10001e80:	4643      	mov	r3, r8
10001e82:	6851      	ldr	r1, [r2, #4]
10001e84:	4399      	bics	r1, r3
10001e86:	4549      	cmp	r1, r9
10001e88:	d902      	bls.n	10001e90 <_malloc_r+0x348>
10001e8a:	6892      	ldr	r2, [r2, #8]
10001e8c:	4594      	cmp	ip, r2
10001e8e:	d1f7      	bne.n	10001e80 <_malloc_r+0x338>
10001e90:	68d3      	ldr	r3, [r2, #12]
10001e92:	469c      	mov	ip, r3
10001e94:	687b      	ldr	r3, [r7, #4]
10001e96:	4661      	mov	r1, ip
10001e98:	60a2      	str	r2, [r4, #8]
10001e9a:	60e1      	str	r1, [r4, #12]
10001e9c:	608c      	str	r4, [r1, #8]
10001e9e:	60d4      	str	r4, [r2, #12]
10001ea0:	e6d6      	b.n	10001c50 <_malloc_r+0x108>
10001ea2:	46c0      	nop			; (mov r8, r8)
10001ea4:	20000748 	.word	0x20000748
10001ea8:	20000b50 	.word	0x20000b50
10001eac:	20000dc8 	.word	0x20000dc8
10001eb0:	0000100f 	.word	0x0000100f
10001eb4:	20000d98 	.word	0x20000d98
10001eb8:	00001008 	.word	0x00001008
10001ebc:	20000dc0 	.word	0x20000dc0
10001ec0:	20000dc4 	.word	0x20000dc4
10001ec4:	2814      	cmp	r0, #20
10001ec6:	d952      	bls.n	10001f6e <_malloc_r+0x426>
10001ec8:	2854      	cmp	r0, #84	; 0x54
10001eca:	d900      	bls.n	10001ece <_malloc_r+0x386>
10001ecc:	e096      	b.n	10001ffc <_malloc_r+0x4b4>
10001ece:	236e      	movs	r3, #110	; 0x6e
10001ed0:	4698      	mov	r8, r3
10001ed2:	0b28      	lsrs	r0, r5, #12
10001ed4:	4480      	add	r8, r0
10001ed6:	306f      	adds	r0, #111	; 0x6f
10001ed8:	00c1      	lsls	r1, r0, #3
10001eda:	e67e      	b.n	10001bda <_malloc_r+0x92>
10001edc:	2308      	movs	r3, #8
10001ede:	469b      	mov	fp, r3
10001ee0:	3b07      	subs	r3, #7
10001ee2:	44dc      	add	ip, fp
10001ee4:	469b      	mov	fp, r3
10001ee6:	44da      	add	sl, fp
10001ee8:	4643      	mov	r3, r8
10001eea:	4652      	mov	r2, sl
10001eec:	4213      	tst	r3, r2
10001eee:	d000      	beq.n	10001ef2 <_malloc_r+0x3aa>
10001ef0:	e6c2      	b.n	10001c78 <_malloc_r+0x130>
10001ef2:	e04c      	b.n	10001f8e <_malloc_r+0x446>
10001ef4:	2201      	movs	r2, #1
10001ef6:	18e3      	adds	r3, r4, r3
10001ef8:	6859      	ldr	r1, [r3, #4]
10001efa:	0030      	movs	r0, r6
10001efc:	430a      	orrs	r2, r1
10001efe:	605a      	str	r2, [r3, #4]
10001f00:	68e3      	ldr	r3, [r4, #12]
10001f02:	68a2      	ldr	r2, [r4, #8]
10001f04:	60d3      	str	r3, [r2, #12]
10001f06:	609a      	str	r2, [r3, #8]
10001f08:	f000 f8e8 	bl	100020dc <__malloc_unlock>
10001f0c:	0020      	movs	r0, r4
10001f0e:	3008      	adds	r0, #8
10001f10:	e6df      	b.n	10001cd2 <_malloc_r+0x18a>
10001f12:	002b      	movs	r3, r5
10001f14:	08e8      	lsrs	r0, r5, #3
10001f16:	3308      	adds	r3, #8
10001f18:	e62a      	b.n	10001b70 <_malloc_r+0x28>
10001f1a:	2301      	movs	r3, #1
10001f1c:	1960      	adds	r0, r4, r5
10001f1e:	431d      	orrs	r5, r3
10001f20:	6065      	str	r5, [r4, #4]
10001f22:	6178      	str	r0, [r7, #20]
10001f24:	6138      	str	r0, [r7, #16]
10001f26:	60c2      	str	r2, [r0, #12]
10001f28:	6082      	str	r2, [r0, #8]
10001f2a:	001a      	movs	r2, r3
10001f2c:	464b      	mov	r3, r9
10001f2e:	430a      	orrs	r2, r1
10001f30:	6042      	str	r2, [r0, #4]
10001f32:	0030      	movs	r0, r6
10001f34:	50e1      	str	r1, [r4, r3]
10001f36:	f000 f8d1 	bl	100020dc <__malloc_unlock>
10001f3a:	0020      	movs	r0, r4
10001f3c:	3008      	adds	r0, #8
10001f3e:	e6c8      	b.n	10001cd2 <_malloc_r+0x18a>
10001f40:	099a      	lsrs	r2, r3, #6
10001f42:	0011      	movs	r1, r2
10001f44:	3239      	adds	r2, #57	; 0x39
10001f46:	3138      	adds	r1, #56	; 0x38
10001f48:	00d2      	lsls	r2, r2, #3
10001f4a:	e78d      	b.n	10001e68 <_malloc_r+0x320>
10001f4c:	42bc      	cmp	r4, r7
10001f4e:	d060      	beq.n	10002012 <_malloc_r+0x4ca>
10001f50:	68bc      	ldr	r4, [r7, #8]
10001f52:	6862      	ldr	r2, [r4, #4]
10001f54:	2303      	movs	r3, #3
10001f56:	439a      	bics	r2, r3
10001f58:	1b53      	subs	r3, r2, r5
10001f5a:	4295      	cmp	r5, r2
10001f5c:	d802      	bhi.n	10001f64 <_malloc_r+0x41c>
10001f5e:	2b0f      	cmp	r3, #15
10001f60:	dd00      	ble.n	10001f64 <_malloc_r+0x41c>
10001f62:	e769      	b.n	10001e38 <_malloc_r+0x2f0>
10001f64:	0030      	movs	r0, r6
10001f66:	f000 f8b9 	bl	100020dc <__malloc_unlock>
10001f6a:	2000      	movs	r0, #0
10001f6c:	e6b1      	b.n	10001cd2 <_malloc_r+0x18a>
10001f6e:	235b      	movs	r3, #91	; 0x5b
10001f70:	4698      	mov	r8, r3
10001f72:	4480      	add	r8, r0
10001f74:	305c      	adds	r0, #92	; 0x5c
10001f76:	00c1      	lsls	r1, r0, #3
10001f78:	e62f      	b.n	10001bda <_malloc_r+0x92>
10001f7a:	2308      	movs	r3, #8
10001f7c:	425b      	negs	r3, r3
10001f7e:	469c      	mov	ip, r3
10001f80:	44e1      	add	r9, ip
10001f82:	464b      	mov	r3, r9
10001f84:	689b      	ldr	r3, [r3, #8]
10001f86:	3801      	subs	r0, #1
10001f88:	454b      	cmp	r3, r9
10001f8a:	d000      	beq.n	10001f8e <_malloc_r+0x446>
10001f8c:	e098      	b.n	100020c0 <_malloc_r+0x578>
10001f8e:	4643      	mov	r3, r8
10001f90:	4203      	tst	r3, r0
10001f92:	d1f2      	bne.n	10001f7a <_malloc_r+0x432>
10001f94:	687b      	ldr	r3, [r7, #4]
10001f96:	438b      	bics	r3, r1
10001f98:	607b      	str	r3, [r7, #4]
10001f9a:	0049      	lsls	r1, r1, #1
10001f9c:	4299      	cmp	r1, r3
10001f9e:	d900      	bls.n	10001fa2 <_malloc_r+0x45a>
10001fa0:	e6b5      	b.n	10001d0e <_malloc_r+0x1c6>
10001fa2:	2900      	cmp	r1, #0
10001fa4:	d104      	bne.n	10001fb0 <_malloc_r+0x468>
10001fa6:	e6b2      	b.n	10001d0e <_malloc_r+0x1c6>
10001fa8:	2204      	movs	r2, #4
10001faa:	4694      	mov	ip, r2
10001fac:	0049      	lsls	r1, r1, #1
10001fae:	44e2      	add	sl, ip
10001fb0:	420b      	tst	r3, r1
10001fb2:	d0f9      	beq.n	10001fa8 <_malloc_r+0x460>
10001fb4:	4650      	mov	r0, sl
10001fb6:	e65a      	b.n	10001c6e <_malloc_r+0x126>
10001fb8:	3310      	adds	r3, #16
10001fba:	9300      	str	r3, [sp, #0]
10001fbc:	e6c4      	b.n	10001d48 <_malloc_r+0x200>
10001fbe:	1089      	asrs	r1, r1, #2
10001fc0:	3b02      	subs	r3, #2
10001fc2:	408b      	lsls	r3, r1
10001fc4:	6879      	ldr	r1, [r7, #4]
10001fc6:	430b      	orrs	r3, r1
10001fc8:	607b      	str	r3, [r7, #4]
10001fca:	e764      	b.n	10001e96 <_malloc_r+0x34e>
10001fcc:	9b00      	ldr	r3, [sp, #0]
10001fce:	0030      	movs	r0, r6
10001fd0:	4443      	add	r3, r8
10001fd2:	425b      	negs	r3, r3
10001fd4:	051b      	lsls	r3, r3, #20
10001fd6:	0d1b      	lsrs	r3, r3, #20
10001fd8:	0019      	movs	r1, r3
10001fda:	469b      	mov	fp, r3
10001fdc:	f000 f886 	bl	100020ec <_sbrk_r>
10001fe0:	1c43      	adds	r3, r0, #1
10001fe2:	d000      	beq.n	10001fe6 <_malloc_r+0x49e>
10001fe4:	e6f3      	b.n	10001dce <_malloc_r+0x286>
10001fe6:	2300      	movs	r3, #0
10001fe8:	469b      	mov	fp, r3
10001fea:	e6f5      	b.n	10001dd8 <_malloc_r+0x290>
10001fec:	2a54      	cmp	r2, #84	; 0x54
10001fee:	d82b      	bhi.n	10002048 <_malloc_r+0x500>
10001ff0:	0b1a      	lsrs	r2, r3, #12
10001ff2:	0011      	movs	r1, r2
10001ff4:	326f      	adds	r2, #111	; 0x6f
10001ff6:	316e      	adds	r1, #110	; 0x6e
10001ff8:	00d2      	lsls	r2, r2, #3
10001ffa:	e735      	b.n	10001e68 <_malloc_r+0x320>
10001ffc:	23aa      	movs	r3, #170	; 0xaa
10001ffe:	005b      	lsls	r3, r3, #1
10002000:	4298      	cmp	r0, r3
10002002:	d82b      	bhi.n	1000205c <_malloc_r+0x514>
10002004:	3bdd      	subs	r3, #221	; 0xdd
10002006:	4698      	mov	r8, r3
10002008:	0be8      	lsrs	r0, r5, #15
1000200a:	4480      	add	r8, r0
1000200c:	3078      	adds	r0, #120	; 0x78
1000200e:	00c1      	lsls	r1, r0, #3
10002010:	e5e3      	b.n	10001bda <_malloc_r+0x92>
10002012:	4b2c      	ldr	r3, [pc, #176]	; (100020c4 <_malloc_r+0x57c>)
10002014:	9a00      	ldr	r2, [sp, #0]
10002016:	469a      	mov	sl, r3
10002018:	681b      	ldr	r3, [r3, #0]
1000201a:	469c      	mov	ip, r3
1000201c:	4653      	mov	r3, sl
1000201e:	4462      	add	r2, ip
10002020:	601a      	str	r2, [r3, #0]
10002022:	e6ad      	b.n	10001d80 <_malloc_r+0x238>
10002024:	0509      	lsls	r1, r1, #20
10002026:	d000      	beq.n	1000202a <_malloc_r+0x4e2>
10002028:	e6aa      	b.n	10001d80 <_malloc_r+0x238>
1000202a:	0002      	movs	r2, r0
1000202c:	68bc      	ldr	r4, [r7, #8]
1000202e:	444a      	add	r2, r9
10002030:	3101      	adds	r1, #1
10002032:	430a      	orrs	r2, r1
10002034:	6062      	str	r2, [r4, #4]
10002036:	e6f3      	b.n	10001e20 <_malloc_r+0x2d8>
10002038:	465b      	mov	r3, fp
1000203a:	4642      	mov	r2, r8
1000203c:	601a      	str	r2, [r3, #0]
1000203e:	e6aa      	b.n	10001d96 <_malloc_r+0x24e>
10002040:	4644      	mov	r4, r8
10002042:	e6ed      	b.n	10001e20 <_malloc_r+0x2d8>
10002044:	6041      	str	r1, [r0, #4]
10002046:	e78d      	b.n	10001f64 <_malloc_r+0x41c>
10002048:	21aa      	movs	r1, #170	; 0xaa
1000204a:	0049      	lsls	r1, r1, #1
1000204c:	428a      	cmp	r2, r1
1000204e:	d824      	bhi.n	1000209a <_malloc_r+0x552>
10002050:	0bda      	lsrs	r2, r3, #15
10002052:	0011      	movs	r1, r2
10002054:	3278      	adds	r2, #120	; 0x78
10002056:	3177      	adds	r1, #119	; 0x77
10002058:	00d2      	lsls	r2, r2, #3
1000205a:	e705      	b.n	10001e68 <_malloc_r+0x320>
1000205c:	4b1a      	ldr	r3, [pc, #104]	; (100020c8 <_malloc_r+0x580>)
1000205e:	4298      	cmp	r0, r3
10002060:	d824      	bhi.n	100020ac <_malloc_r+0x564>
10002062:	237c      	movs	r3, #124	; 0x7c
10002064:	4698      	mov	r8, r3
10002066:	0ca8      	lsrs	r0, r5, #18
10002068:	4480      	add	r8, r0
1000206a:	307d      	adds	r0, #125	; 0x7d
1000206c:	00c1      	lsls	r1, r0, #3
1000206e:	e5b4      	b.n	10001bda <_malloc_r+0x92>
10002070:	9a00      	ldr	r2, [sp, #0]
10002072:	9b01      	ldr	r3, [sp, #4]
10002074:	4694      	mov	ip, r2
10002076:	4642      	mov	r2, r8
10002078:	3b08      	subs	r3, #8
1000207a:	4463      	add	r3, ip
1000207c:	1a9b      	subs	r3, r3, r2
1000207e:	9300      	str	r3, [sp, #0]
10002080:	2300      	movs	r3, #0
10002082:	469b      	mov	fp, r3
10002084:	e6a8      	b.n	10001dd8 <_malloc_r+0x290>
10002086:	0021      	movs	r1, r4
10002088:	0030      	movs	r0, r6
1000208a:	3108      	adds	r1, #8
1000208c:	f000 f8bc 	bl	10002208 <_free_r>
10002090:	4653      	mov	r3, sl
10002092:	68bc      	ldr	r4, [r7, #8]
10002094:	681b      	ldr	r3, [r3, #0]
10002096:	6862      	ldr	r2, [r4, #4]
10002098:	e6c2      	b.n	10001e20 <_malloc_r+0x2d8>
1000209a:	490b      	ldr	r1, [pc, #44]	; (100020c8 <_malloc_r+0x580>)
1000209c:	428a      	cmp	r2, r1
1000209e:	d80b      	bhi.n	100020b8 <_malloc_r+0x570>
100020a0:	0c9a      	lsrs	r2, r3, #18
100020a2:	0011      	movs	r1, r2
100020a4:	327d      	adds	r2, #125	; 0x7d
100020a6:	317c      	adds	r1, #124	; 0x7c
100020a8:	00d2      	lsls	r2, r2, #3
100020aa:	e6dd      	b.n	10001e68 <_malloc_r+0x320>
100020ac:	21fe      	movs	r1, #254	; 0xfe
100020ae:	237e      	movs	r3, #126	; 0x7e
100020b0:	207f      	movs	r0, #127	; 0x7f
100020b2:	4698      	mov	r8, r3
100020b4:	0089      	lsls	r1, r1, #2
100020b6:	e590      	b.n	10001bda <_malloc_r+0x92>
100020b8:	22fe      	movs	r2, #254	; 0xfe
100020ba:	217e      	movs	r1, #126	; 0x7e
100020bc:	0092      	lsls	r2, r2, #2
100020be:	e6d3      	b.n	10001e68 <_malloc_r+0x320>
100020c0:	687b      	ldr	r3, [r7, #4]
100020c2:	e76a      	b.n	10001f9a <_malloc_r+0x452>
100020c4:	20000d98 	.word	0x20000d98
100020c8:	00000554 	.word	0x00000554

100020cc <__malloc_lock>:
100020cc:	b510      	push	{r4, lr}
100020ce:	4802      	ldr	r0, [pc, #8]	; (100020d8 <__malloc_lock+0xc>)
100020d0:	f000 f97c 	bl	100023cc <__retarget_lock_acquire_recursive>
100020d4:	bd10      	pop	{r4, pc}
100020d6:	46c0      	nop			; (mov r8, r8)
100020d8:	20000d94 	.word	0x20000d94

100020dc <__malloc_unlock>:
100020dc:	b510      	push	{r4, lr}
100020de:	4802      	ldr	r0, [pc, #8]	; (100020e8 <__malloc_unlock+0xc>)
100020e0:	f000 f976 	bl	100023d0 <__retarget_lock_release_recursive>
100020e4:	bd10      	pop	{r4, pc}
100020e6:	46c0      	nop			; (mov r8, r8)
100020e8:	20000d94 	.word	0x20000d94

100020ec <_sbrk_r>:
100020ec:	2300      	movs	r3, #0
100020ee:	b570      	push	{r4, r5, r6, lr}
100020f0:	4d06      	ldr	r5, [pc, #24]	; (1000210c <_sbrk_r+0x20>)
100020f2:	0004      	movs	r4, r0
100020f4:	0008      	movs	r0, r1
100020f6:	602b      	str	r3, [r5, #0]
100020f8:	f7ff f848 	bl	1000118c <_sbrk>
100020fc:	1c43      	adds	r3, r0, #1
100020fe:	d000      	beq.n	10002102 <_sbrk_r+0x16>
10002100:	bd70      	pop	{r4, r5, r6, pc}
10002102:	682b      	ldr	r3, [r5, #0]
10002104:	2b00      	cmp	r3, #0
10002106:	d0fb      	beq.n	10002100 <_sbrk_r+0x14>
10002108:	6023      	str	r3, [r4, #0]
1000210a:	e7f9      	b.n	10002100 <_sbrk_r+0x14>
1000210c:	20000f0c 	.word	0x20000f0c

10002110 <strlen>:
10002110:	b510      	push	{r4, lr}
10002112:	0783      	lsls	r3, r0, #30
10002114:	d00a      	beq.n	1000212c <strlen+0x1c>
10002116:	0003      	movs	r3, r0
10002118:	2103      	movs	r1, #3
1000211a:	e002      	b.n	10002122 <strlen+0x12>
1000211c:	3301      	adds	r3, #1
1000211e:	420b      	tst	r3, r1
10002120:	d005      	beq.n	1000212e <strlen+0x1e>
10002122:	781a      	ldrb	r2, [r3, #0]
10002124:	2a00      	cmp	r2, #0
10002126:	d1f9      	bne.n	1000211c <strlen+0xc>
10002128:	1a18      	subs	r0, r3, r0
1000212a:	bd10      	pop	{r4, pc}
1000212c:	0003      	movs	r3, r0
1000212e:	6819      	ldr	r1, [r3, #0]
10002130:	4a0c      	ldr	r2, [pc, #48]	; (10002164 <strlen+0x54>)
10002132:	4c0d      	ldr	r4, [pc, #52]	; (10002168 <strlen+0x58>)
10002134:	188a      	adds	r2, r1, r2
10002136:	438a      	bics	r2, r1
10002138:	4222      	tst	r2, r4
1000213a:	d10f      	bne.n	1000215c <strlen+0x4c>
1000213c:	6859      	ldr	r1, [r3, #4]
1000213e:	4a09      	ldr	r2, [pc, #36]	; (10002164 <strlen+0x54>)
10002140:	3304      	adds	r3, #4
10002142:	188a      	adds	r2, r1, r2
10002144:	438a      	bics	r2, r1
10002146:	4222      	tst	r2, r4
10002148:	d108      	bne.n	1000215c <strlen+0x4c>
1000214a:	6859      	ldr	r1, [r3, #4]
1000214c:	4a05      	ldr	r2, [pc, #20]	; (10002164 <strlen+0x54>)
1000214e:	3304      	adds	r3, #4
10002150:	188a      	adds	r2, r1, r2
10002152:	438a      	bics	r2, r1
10002154:	4222      	tst	r2, r4
10002156:	d0f1      	beq.n	1000213c <strlen+0x2c>
10002158:	e000      	b.n	1000215c <strlen+0x4c>
1000215a:	3301      	adds	r3, #1
1000215c:	781a      	ldrb	r2, [r3, #0]
1000215e:	2a00      	cmp	r2, #0
10002160:	d1fb      	bne.n	1000215a <strlen+0x4a>
10002162:	e7e1      	b.n	10002128 <strlen+0x18>
10002164:	fefefeff 	.word	0xfefefeff
10002168:	80808080 	.word	0x80808080

1000216c <_malloc_trim_r>:
1000216c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000216e:	000c      	movs	r4, r1
10002170:	0005      	movs	r5, r0
10002172:	f7ff ffab 	bl	100020cc <__malloc_lock>
10002176:	4f20      	ldr	r7, [pc, #128]	; (100021f8 <_malloc_trim_r+0x8c>)
10002178:	68bb      	ldr	r3, [r7, #8]
1000217a:	685e      	ldr	r6, [r3, #4]
1000217c:	2303      	movs	r3, #3
1000217e:	439e      	bics	r6, r3
10002180:	4b1e      	ldr	r3, [pc, #120]	; (100021fc <_malloc_trim_r+0x90>)
10002182:	1b34      	subs	r4, r6, r4
10002184:	469c      	mov	ip, r3
10002186:	4464      	add	r4, ip
10002188:	0b24      	lsrs	r4, r4, #12
1000218a:	3c01      	subs	r4, #1
1000218c:	3311      	adds	r3, #17
1000218e:	0324      	lsls	r4, r4, #12
10002190:	429c      	cmp	r4, r3
10002192:	db07      	blt.n	100021a4 <_malloc_trim_r+0x38>
10002194:	2100      	movs	r1, #0
10002196:	0028      	movs	r0, r5
10002198:	f7ff ffa8 	bl	100020ec <_sbrk_r>
1000219c:	68bb      	ldr	r3, [r7, #8]
1000219e:	199b      	adds	r3, r3, r6
100021a0:	4298      	cmp	r0, r3
100021a2:	d004      	beq.n	100021ae <_malloc_trim_r+0x42>
100021a4:	0028      	movs	r0, r5
100021a6:	f7ff ff99 	bl	100020dc <__malloc_unlock>
100021aa:	2000      	movs	r0, #0
100021ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100021ae:	0028      	movs	r0, r5
100021b0:	4261      	negs	r1, r4
100021b2:	f7ff ff9b 	bl	100020ec <_sbrk_r>
100021b6:	1c43      	adds	r3, r0, #1
100021b8:	d00d      	beq.n	100021d6 <_malloc_trim_r+0x6a>
100021ba:	2201      	movs	r2, #1
100021bc:	68bb      	ldr	r3, [r7, #8]
100021be:	1b36      	subs	r6, r6, r4
100021c0:	4316      	orrs	r6, r2
100021c2:	605e      	str	r6, [r3, #4]
100021c4:	4b0e      	ldr	r3, [pc, #56]	; (10002200 <_malloc_trim_r+0x94>)
100021c6:	0028      	movs	r0, r5
100021c8:	681a      	ldr	r2, [r3, #0]
100021ca:	1b14      	subs	r4, r2, r4
100021cc:	601c      	str	r4, [r3, #0]
100021ce:	f7ff ff85 	bl	100020dc <__malloc_unlock>
100021d2:	2001      	movs	r0, #1
100021d4:	e7ea      	b.n	100021ac <_malloc_trim_r+0x40>
100021d6:	2100      	movs	r1, #0
100021d8:	0028      	movs	r0, r5
100021da:	f7ff ff87 	bl	100020ec <_sbrk_r>
100021de:	68ba      	ldr	r2, [r7, #8]
100021e0:	1a83      	subs	r3, r0, r2
100021e2:	2b0f      	cmp	r3, #15
100021e4:	ddde      	ble.n	100021a4 <_malloc_trim_r+0x38>
100021e6:	4907      	ldr	r1, [pc, #28]	; (10002204 <_malloc_trim_r+0x98>)
100021e8:	6809      	ldr	r1, [r1, #0]
100021ea:	1a40      	subs	r0, r0, r1
100021ec:	4904      	ldr	r1, [pc, #16]	; (10002200 <_malloc_trim_r+0x94>)
100021ee:	6008      	str	r0, [r1, #0]
100021f0:	2101      	movs	r1, #1
100021f2:	430b      	orrs	r3, r1
100021f4:	6053      	str	r3, [r2, #4]
100021f6:	e7d5      	b.n	100021a4 <_malloc_trim_r+0x38>
100021f8:	20000748 	.word	0x20000748
100021fc:	00000fef 	.word	0x00000fef
10002200:	20000d98 	.word	0x20000d98
10002204:	20000b50 	.word	0x20000b50

10002208 <_free_r>:
10002208:	b5f0      	push	{r4, r5, r6, r7, lr}
1000220a:	46c6      	mov	lr, r8
1000220c:	0005      	movs	r5, r0
1000220e:	000c      	movs	r4, r1
10002210:	b500      	push	{lr}
10002212:	2900      	cmp	r1, #0
10002214:	d04f      	beq.n	100022b6 <_free_r+0xae>
10002216:	f7ff ff59 	bl	100020cc <__malloc_lock>
1000221a:	0021      	movs	r1, r4
1000221c:	3908      	subs	r1, #8
1000221e:	684c      	ldr	r4, [r1, #4]
10002220:	2601      	movs	r6, #1
10002222:	0022      	movs	r2, r4
10002224:	2003      	movs	r0, #3
10002226:	43b2      	bics	r2, r6
10002228:	188f      	adds	r7, r1, r2
1000222a:	687b      	ldr	r3, [r7, #4]
1000222c:	4383      	bics	r3, r0
1000222e:	4862      	ldr	r0, [pc, #392]	; (100023b8 <_free_r+0x1b0>)
10002230:	4698      	mov	r8, r3
10002232:	6883      	ldr	r3, [r0, #8]
10002234:	42bb      	cmp	r3, r7
10002236:	d06a      	beq.n	1000230e <_free_r+0x106>
10002238:	4643      	mov	r3, r8
1000223a:	607b      	str	r3, [r7, #4]
1000223c:	4226      	tst	r6, r4
1000223e:	d11e      	bne.n	1000227e <_free_r+0x76>
10002240:	2308      	movs	r3, #8
10002242:	469c      	mov	ip, r3
10002244:	680c      	ldr	r4, [r1, #0]
10002246:	4484      	add	ip, r0
10002248:	1b09      	subs	r1, r1, r4
1000224a:	1912      	adds	r2, r2, r4
1000224c:	688c      	ldr	r4, [r1, #8]
1000224e:	4564      	cmp	r4, ip
10002250:	d04f      	beq.n	100022f2 <_free_r+0xea>
10002252:	68cb      	ldr	r3, [r1, #12]
10002254:	60e3      	str	r3, [r4, #12]
10002256:	609c      	str	r4, [r3, #8]
10002258:	4643      	mov	r3, r8
1000225a:	18fc      	adds	r4, r7, r3
1000225c:	6864      	ldr	r4, [r4, #4]
1000225e:	4234      	tst	r4, r6
10002260:	d111      	bne.n	10002286 <_free_r+0x7e>
10002262:	68bb      	ldr	r3, [r7, #8]
10002264:	4c55      	ldr	r4, [pc, #340]	; (100023bc <_free_r+0x1b4>)
10002266:	4442      	add	r2, r8
10002268:	42a3      	cmp	r3, r4
1000226a:	d100      	bne.n	1000226e <_free_r+0x66>
1000226c:	e07e      	b.n	1000236c <_free_r+0x164>
1000226e:	68fc      	ldr	r4, [r7, #12]
10002270:	60dc      	str	r4, [r3, #12]
10002272:	60a3      	str	r3, [r4, #8]
10002274:	2301      	movs	r3, #1
10002276:	4313      	orrs	r3, r2
10002278:	604b      	str	r3, [r1, #4]
1000227a:	508a      	str	r2, [r1, r2]
1000227c:	e006      	b.n	1000228c <_free_r+0x84>
1000227e:	18fc      	adds	r4, r7, r3
10002280:	6864      	ldr	r4, [r4, #4]
10002282:	4234      	tst	r4, r6
10002284:	d0ed      	beq.n	10002262 <_free_r+0x5a>
10002286:	4316      	orrs	r6, r2
10002288:	604e      	str	r6, [r1, #4]
1000228a:	603a      	str	r2, [r7, #0]
1000228c:	2380      	movs	r3, #128	; 0x80
1000228e:	009b      	lsls	r3, r3, #2
10002290:	429a      	cmp	r2, r3
10002292:	d213      	bcs.n	100022bc <_free_r+0xb4>
10002294:	0954      	lsrs	r4, r2, #5
10002296:	08d3      	lsrs	r3, r2, #3
10002298:	2201      	movs	r2, #1
1000229a:	40a2      	lsls	r2, r4
1000229c:	6844      	ldr	r4, [r0, #4]
1000229e:	00db      	lsls	r3, r3, #3
100022a0:	4322      	orrs	r2, r4
100022a2:	6042      	str	r2, [r0, #4]
100022a4:	1818      	adds	r0, r3, r0
100022a6:	6883      	ldr	r3, [r0, #8]
100022a8:	60c8      	str	r0, [r1, #12]
100022aa:	608b      	str	r3, [r1, #8]
100022ac:	6081      	str	r1, [r0, #8]
100022ae:	60d9      	str	r1, [r3, #12]
100022b0:	0028      	movs	r0, r5
100022b2:	f7ff ff13 	bl	100020dc <__malloc_unlock>
100022b6:	bc80      	pop	{r7}
100022b8:	46b8      	mov	r8, r7
100022ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
100022bc:	0a53      	lsrs	r3, r2, #9
100022be:	2b04      	cmp	r3, #4
100022c0:	d83e      	bhi.n	10002340 <_free_r+0x138>
100022c2:	0994      	lsrs	r4, r2, #6
100022c4:	0026      	movs	r6, r4
100022c6:	3439      	adds	r4, #57	; 0x39
100022c8:	3638      	adds	r6, #56	; 0x38
100022ca:	00e4      	lsls	r4, r4, #3
100022cc:	1904      	adds	r4, r0, r4
100022ce:	6823      	ldr	r3, [r4, #0]
100022d0:	3c08      	subs	r4, #8
100022d2:	2703      	movs	r7, #3
100022d4:	429c      	cmp	r4, r3
100022d6:	d042      	beq.n	1000235e <_free_r+0x156>
100022d8:	6858      	ldr	r0, [r3, #4]
100022da:	43b8      	bics	r0, r7
100022dc:	4290      	cmp	r0, r2
100022de:	d902      	bls.n	100022e6 <_free_r+0xde>
100022e0:	689b      	ldr	r3, [r3, #8]
100022e2:	429c      	cmp	r4, r3
100022e4:	d1f8      	bne.n	100022d8 <_free_r+0xd0>
100022e6:	68dc      	ldr	r4, [r3, #12]
100022e8:	60cc      	str	r4, [r1, #12]
100022ea:	608b      	str	r3, [r1, #8]
100022ec:	60a1      	str	r1, [r4, #8]
100022ee:	60d9      	str	r1, [r3, #12]
100022f0:	e7de      	b.n	100022b0 <_free_r+0xa8>
100022f2:	4643      	mov	r3, r8
100022f4:	18f8      	adds	r0, r7, r3
100022f6:	6840      	ldr	r0, [r0, #4]
100022f8:	4230      	tst	r0, r6
100022fa:	d157      	bne.n	100023ac <_free_r+0x1a4>
100022fc:	68fb      	ldr	r3, [r7, #12]
100022fe:	68b8      	ldr	r0, [r7, #8]
10002300:	4442      	add	r2, r8
10002302:	4316      	orrs	r6, r2
10002304:	60c3      	str	r3, [r0, #12]
10002306:	6098      	str	r0, [r3, #8]
10002308:	604e      	str	r6, [r1, #4]
1000230a:	508a      	str	r2, [r1, r2]
1000230c:	e7d0      	b.n	100022b0 <_free_r+0xa8>
1000230e:	0013      	movs	r3, r2
10002310:	4443      	add	r3, r8
10002312:	4226      	tst	r6, r4
10002314:	d106      	bne.n	10002324 <_free_r+0x11c>
10002316:	680a      	ldr	r2, [r1, #0]
10002318:	1a89      	subs	r1, r1, r2
1000231a:	688c      	ldr	r4, [r1, #8]
1000231c:	189b      	adds	r3, r3, r2
1000231e:	68ca      	ldr	r2, [r1, #12]
10002320:	60e2      	str	r2, [r4, #12]
10002322:	6094      	str	r4, [r2, #8]
10002324:	2201      	movs	r2, #1
10002326:	431a      	orrs	r2, r3
10002328:	604a      	str	r2, [r1, #4]
1000232a:	4a25      	ldr	r2, [pc, #148]	; (100023c0 <_free_r+0x1b8>)
1000232c:	6081      	str	r1, [r0, #8]
1000232e:	6812      	ldr	r2, [r2, #0]
10002330:	429a      	cmp	r2, r3
10002332:	d8bd      	bhi.n	100022b0 <_free_r+0xa8>
10002334:	4b23      	ldr	r3, [pc, #140]	; (100023c4 <_free_r+0x1bc>)
10002336:	0028      	movs	r0, r5
10002338:	6819      	ldr	r1, [r3, #0]
1000233a:	f7ff ff17 	bl	1000216c <_malloc_trim_r>
1000233e:	e7b7      	b.n	100022b0 <_free_r+0xa8>
10002340:	2b14      	cmp	r3, #20
10002342:	d907      	bls.n	10002354 <_free_r+0x14c>
10002344:	2b54      	cmp	r3, #84	; 0x54
10002346:	d81a      	bhi.n	1000237e <_free_r+0x176>
10002348:	0b14      	lsrs	r4, r2, #12
1000234a:	0026      	movs	r6, r4
1000234c:	346f      	adds	r4, #111	; 0x6f
1000234e:	366e      	adds	r6, #110	; 0x6e
10002350:	00e4      	lsls	r4, r4, #3
10002352:	e7bb      	b.n	100022cc <_free_r+0xc4>
10002354:	001e      	movs	r6, r3
10002356:	335c      	adds	r3, #92	; 0x5c
10002358:	365b      	adds	r6, #91	; 0x5b
1000235a:	00dc      	lsls	r4, r3, #3
1000235c:	e7b6      	b.n	100022cc <_free_r+0xc4>
1000235e:	2201      	movs	r2, #1
10002360:	10b6      	asrs	r6, r6, #2
10002362:	40b2      	lsls	r2, r6
10002364:	6846      	ldr	r6, [r0, #4]
10002366:	4332      	orrs	r2, r6
10002368:	6042      	str	r2, [r0, #4]
1000236a:	e7bd      	b.n	100022e8 <_free_r+0xe0>
1000236c:	60d9      	str	r1, [r3, #12]
1000236e:	6099      	str	r1, [r3, #8]
10002370:	60cb      	str	r3, [r1, #12]
10002372:	608b      	str	r3, [r1, #8]
10002374:	2301      	movs	r3, #1
10002376:	4313      	orrs	r3, r2
10002378:	604b      	str	r3, [r1, #4]
1000237a:	508a      	str	r2, [r1, r2]
1000237c:	e798      	b.n	100022b0 <_free_r+0xa8>
1000237e:	24aa      	movs	r4, #170	; 0xaa
10002380:	0064      	lsls	r4, r4, #1
10002382:	42a3      	cmp	r3, r4
10002384:	d805      	bhi.n	10002392 <_free_r+0x18a>
10002386:	0bd4      	lsrs	r4, r2, #15
10002388:	0026      	movs	r6, r4
1000238a:	3478      	adds	r4, #120	; 0x78
1000238c:	3677      	adds	r6, #119	; 0x77
1000238e:	00e4      	lsls	r4, r4, #3
10002390:	e79c      	b.n	100022cc <_free_r+0xc4>
10002392:	4c0d      	ldr	r4, [pc, #52]	; (100023c8 <_free_r+0x1c0>)
10002394:	42a3      	cmp	r3, r4
10002396:	d805      	bhi.n	100023a4 <_free_r+0x19c>
10002398:	0c94      	lsrs	r4, r2, #18
1000239a:	0026      	movs	r6, r4
1000239c:	347d      	adds	r4, #125	; 0x7d
1000239e:	367c      	adds	r6, #124	; 0x7c
100023a0:	00e4      	lsls	r4, r4, #3
100023a2:	e793      	b.n	100022cc <_free_r+0xc4>
100023a4:	24fe      	movs	r4, #254	; 0xfe
100023a6:	267e      	movs	r6, #126	; 0x7e
100023a8:	00a4      	lsls	r4, r4, #2
100023aa:	e78f      	b.n	100022cc <_free_r+0xc4>
100023ac:	0033      	movs	r3, r6
100023ae:	4313      	orrs	r3, r2
100023b0:	604b      	str	r3, [r1, #4]
100023b2:	603a      	str	r2, [r7, #0]
100023b4:	e77c      	b.n	100022b0 <_free_r+0xa8>
100023b6:	46c0      	nop			; (mov r8, r8)
100023b8:	20000748 	.word	0x20000748
100023bc:	20000750 	.word	0x20000750
100023c0:	20000b54 	.word	0x20000b54
100023c4:	20000dc8 	.word	0x20000dc8
100023c8:	00000554 	.word	0x00000554

100023cc <__retarget_lock_acquire_recursive>:
100023cc:	4770      	bx	lr
100023ce:	46c0      	nop			; (mov r8, r8)

100023d0 <__retarget_lock_release_recursive>:
100023d0:	4770      	bx	lr
100023d2:	46c0      	nop			; (mov r8, r8)

100023d4 <_fini>:
100023d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100023d6:	46c0      	nop			; (mov r8, r8)

100023d8 <__mutex_exit_veneer>:
100023d8:	b401      	push	{r0}
100023da:	4802      	ldr	r0, [pc, #8]	; (100023e4 <__mutex_exit_veneer+0xc>)
100023dc:	4684      	mov	ip, r0
100023de:	bc01      	pop	{r0}
100023e0:	4760      	bx	ip
100023e2:	bf00      	nop
100023e4:	2000026d 	.word	0x2000026d

100023e8 <____aeabi_idiv0_veneer>:
100023e8:	b401      	push	{r0}
100023ea:	4802      	ldr	r0, [pc, #8]	; (100023f4 <____aeabi_idiv0_veneer+0xc>)
100023ec:	4684      	mov	ip, r0
100023ee:	bc01      	pop	{r0}
100023f0:	4760      	bx	ip
100023f2:	bf00      	nop
100023f4:	20000295 	.word	0x20000295

100023f8 <__mutex_try_enter_veneer>:
100023f8:	b401      	push	{r0}
100023fa:	4802      	ldr	r0, [pc, #8]	; (10002404 <__mutex_try_enter_veneer+0xc>)
100023fc:	4684      	mov	ip, r0
100023fe:	bc01      	pop	{r0}
10002400:	4760      	bx	ip
10002402:	bf00      	nop
10002404:	20000229 	.word	0x20000229

10002408 <__flash_do_cmd.constprop.0_veneer>:
10002408:	b401      	push	{r0}
1000240a:	4802      	ldr	r0, [pc, #8]	; (10002414 <__flash_do_cmd.constprop.0_veneer+0xc>)
1000240c:	4684      	mov	ip, r0
1000240e:	bc01      	pop	{r0}
10002410:	4760      	bx	ip
10002412:	bf00      	nop
10002414:	20000139 	.word	0x20000139

10002418 <__mutex_enter_blocking_veneer>:
10002418:	b401      	push	{r0}
1000241a:	4802      	ldr	r0, [pc, #8]	; (10002424 <__mutex_enter_blocking_veneer+0xc>)
1000241c:	4684      	mov	ip, r0
1000241e:	bc01      	pop	{r0}
10002420:	4760      	bx	ip
10002422:	bf00      	nop
10002424:	200001dd 	.word	0x200001dd

Disassembly of section .data:

200000c0 <flash_init_boot2_copyout>:
    if (boot2_copyout_valid)
200000c0:	4808      	ldr	r0, [pc, #32]	; (200000e4 <flash_init_boot2_copyout+0x24>)
static void __no_inline_not_in_flash_func(flash_init_boot2_copyout)() {
200000c2:	b510      	push	{r4, lr}
    if (boot2_copyout_valid)
200000c4:	7803      	ldrb	r3, [r0, #0]
200000c6:	2b00      	cmp	r3, #0
200000c8:	d10a      	bne.n	200000e0 <flash_init_boot2_copyout+0x20>
200000ca:	2380      	movs	r3, #128	; 0x80
200000cc:	4906      	ldr	r1, [pc, #24]	; (200000e8 <flash_init_boot2_copyout+0x28>)
    for (int i = 0; i < BOOT2_SIZE_WORDS; ++i)
200000ce:	4a07      	ldr	r2, [pc, #28]	; (200000ec <flash_init_boot2_copyout+0x2c>)
200000d0:	055b      	lsls	r3, r3, #21
        boot2_copyout[i] = ((uint32_t *)XIP_BASE)[i];
200000d2:	681c      	ldr	r4, [r3, #0]
200000d4:	50cc      	str	r4, [r1, r3]
    for (int i = 0; i < BOOT2_SIZE_WORDS; ++i)
200000d6:	3304      	adds	r3, #4
200000d8:	4293      	cmp	r3, r2
200000da:	d1fa      	bne.n	200000d2 <flash_init_boot2_copyout+0x12>
    boot2_copyout_valid = true;
200000dc:	2301      	movs	r3, #1
200000de:	7003      	strb	r3, [r0, #0]
}
200000e0:	bd10      	pop	{r4, pc}
200000e2:	46c0      	nop			; (mov r8, r8)
200000e4:	20000f48 	.word	0x20000f48
200000e8:	10000ddc 	.word	0x10000ddc
200000ec:	10000100 	.word	0x10000100

200000f0 <flash_enable_xip_via_boot2>:
static void __no_inline_not_in_flash_func(flash_enable_xip_via_boot2)() {
200000f0:	b510      	push	{r4, lr}
    ((void (*)(void))boot2_copyout+1)();
200000f2:	4b02      	ldr	r3, [pc, #8]	; (200000fc <flash_enable_xip_via_boot2+0xc>)
200000f4:	3301      	adds	r3, #1
200000f6:	4798      	blx	r3
}
200000f8:	bd10      	pop	{r4, pc}
200000fa:	46c0      	nop			; (mov r8, r8)
200000fc:	20000ddc 	.word	0x20000ddc

20000100 <flash_cs_force.constprop.0>:
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
20000100:	4b03      	ldr	r3, [pc, #12]	; (20000110 <flash_cs_force.constprop.0+0x10>)
20000102:	681a      	ldr	r2, [r3, #0]
20000104:	23c0      	movs	r3, #192	; 0xc0
20000106:	009b      	lsls	r3, r3, #2
20000108:	4393      	bics	r3, r2
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
2000010a:	4a02      	ldr	r2, [pc, #8]	; (20000114 <flash_cs_force.constprop.0+0x14>)
2000010c:	6013      	str	r3, [r2, #0]
}
2000010e:	4770      	bx	lr
20000110:	4001800c 	.word	0x4001800c
20000114:	4001900c 	.word	0x4001900c

20000118 <flash_cs_force.constprop.1>:
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
20000118:	4b05      	ldr	r3, [pc, #20]	; (20000130 <flash_cs_force.constprop.1+0x18>)
2000011a:	681a      	ldr	r2, [r3, #0]
2000011c:	2380      	movs	r3, #128	; 0x80
2000011e:	009b      	lsls	r3, r3, #2
20000120:	4053      	eors	r3, r2
20000122:	22c0      	movs	r2, #192	; 0xc0
20000124:	0092      	lsls	r2, r2, #2
20000126:	4013      	ands	r3, r2
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
20000128:	4a02      	ldr	r2, [pc, #8]	; (20000134 <flash_cs_force.constprop.1+0x1c>)
2000012a:	6013      	str	r3, [r2, #0]
2000012c:	4770      	bx	lr
2000012e:	46c0      	nop			; (mov r8, r8)
20000130:	4001800c 	.word	0x4001800c
20000134:	4001900c 	.word	0x4001900c

20000138 <flash_do_cmd.constprop.0>:
static void __no_inline_not_in_flash_func(flash_do_cmd)(const uint8_t *txbuf, uint8_t *rxbuf, size_t count) {
20000138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2000013a:	46ce      	mov	lr, r9
2000013c:	4647      	mov	r7, r8
2000013e:	4681      	mov	r9, r0
20000140:	b580      	push	{r7, lr}
    void (*connect_internal_flash)(void) = (void(*)(void))rom_func_lookup(rom_table_code('I', 'F'));
20000142:	4823      	ldr	r0, [pc, #140]	; (200001d0 <flash_do_cmd.constprop.0+0x98>)
static void __no_inline_not_in_flash_func(flash_do_cmd)(const uint8_t *txbuf, uint8_t *rxbuf, size_t count) {
20000144:	000e      	movs	r6, r1
    void (*connect_internal_flash)(void) = (void(*)(void))rom_func_lookup(rom_table_code('I', 'F'));
20000146:	f000 f8a7 	bl	20000298 <__rom_func_lookup_veneer>
2000014a:	0005      	movs	r5, r0
    void (*flash_exit_xip)(void) = (void(*)(void))rom_func_lookup(rom_table_code('E', 'X'));
2000014c:	4821      	ldr	r0, [pc, #132]	; (200001d4 <flash_do_cmd.constprop.0+0x9c>)
2000014e:	f000 f8a3 	bl	20000298 <__rom_func_lookup_veneer>
20000152:	0004      	movs	r4, r0
    void (*flash_flush_cache)(void) = (void(*)(void))rom_func_lookup(rom_table_code('F', 'C'));
20000154:	4820      	ldr	r0, [pc, #128]	; (200001d8 <flash_do_cmd.constprop.0+0xa0>)
20000156:	f000 f89f 	bl	20000298 <__rom_func_lookup_veneer>
2000015a:	4680      	mov	r8, r0
    flash_init_boot2_copyout();
2000015c:	f7ff ffb0 	bl	200000c0 <flash_init_boot2_copyout>
    connect_internal_flash();
20000160:	47a8      	blx	r5
    flash_exit_xip();
20000162:	47a0      	blx	r4
    flash_cs_force(0);
20000164:	f7ff ffd8 	bl	20000118 <flash_cs_force.constprop.1>
        uint32_t flags = ssi_hw->sr;
20000168:	21c0      	movs	r1, #192	; 0xc0
    size_t rx_remaining = count;
2000016a:	240d      	movs	r4, #13
    size_t tx_remaining = count;
2000016c:	220d      	movs	r2, #13
        bool can_get = !!(flags & SSI_SR_RFNE_BITS);
2000016e:	2708      	movs	r7, #8
        bool can_put = !!(flags & SSI_SR_TFNF_BITS);
20000170:	2002      	movs	r0, #2
        uint32_t flags = ssi_hw->sr;
20000172:	0549      	lsls	r1, r1, #21
        bool can_get = !!(flags & SSI_SR_RFNE_BITS);
20000174:	003d      	movs	r5, r7
        uint32_t flags = ssi_hw->sr;
20000176:	6a8b      	ldr	r3, [r1, #40]	; 0x28
        bool can_get = !!(flags & SSI_SR_RFNE_BITS);
20000178:	401d      	ands	r5, r3
        if (can_put && tx_remaining && rx_remaining - tx_remaining < max_in_flight) {
2000017a:	4218      	tst	r0, r3
2000017c:	d00b      	beq.n	20000196 <flash_do_cmd.constprop.0+0x5e>
2000017e:	2a00      	cmp	r2, #0
20000180:	d009      	beq.n	20000196 <flash_do_cmd.constprop.0+0x5e>
20000182:	1aa3      	subs	r3, r4, r2
20000184:	2b0d      	cmp	r3, #13
20000186:	d81e      	bhi.n	200001c6 <flash_do_cmd.constprop.0+0x8e>
            ssi_hw->dr0 = *txbuf++;
20000188:	464b      	mov	r3, r9
2000018a:	781b      	ldrb	r3, [r3, #0]
            --tx_remaining;
2000018c:	3a01      	subs	r2, #1
            ssi_hw->dr0 = *txbuf++;
2000018e:	660b      	str	r3, [r1, #96]	; 0x60
20000190:	2301      	movs	r3, #1
20000192:	469c      	mov	ip, r3
20000194:	44e1      	add	r9, ip
        if (can_get && rx_remaining) {
20000196:	0013      	movs	r3, r2
20000198:	2d00      	cmp	r5, #0
2000019a:	d10b      	bne.n	200001b4 <flash_do_cmd.constprop.0+0x7c>
    while (tx_remaining || rx_remaining) {
2000019c:	4323      	orrs	r3, r4
2000019e:	2b00      	cmp	r3, #0
200001a0:	d1e8      	bne.n	20000174 <flash_do_cmd.constprop.0+0x3c>
    flash_cs_force(1);
200001a2:	f7ff ffad 	bl	20000100 <flash_cs_force.constprop.0>
    flash_flush_cache();
200001a6:	47c0      	blx	r8
    flash_enable_xip_via_boot2();
200001a8:	f7ff ffa2 	bl	200000f0 <flash_enable_xip_via_boot2>
}
200001ac:	bcc0      	pop	{r6, r7}
200001ae:	46b9      	mov	r9, r7
200001b0:	46b0      	mov	r8, r6
200001b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (can_get && rx_remaining) {
200001b4:	2c00      	cmp	r4, #0
200001b6:	d0f2      	beq.n	2000019e <flash_do_cmd.constprop.0+0x66>
            *rxbuf++ = ssi_hw->dr0;
200001b8:	6e0b      	ldr	r3, [r1, #96]	; 0x60
            --rx_remaining;
200001ba:	3c01      	subs	r4, #1
            *rxbuf++ = ssi_hw->dr0;
200001bc:	7033      	strb	r3, [r6, #0]
    while (tx_remaining || rx_remaining) {
200001be:	0023      	movs	r3, r4
            *rxbuf++ = ssi_hw->dr0;
200001c0:	3601      	adds	r6, #1
    while (tx_remaining || rx_remaining) {
200001c2:	4313      	orrs	r3, r2
200001c4:	e7eb      	b.n	2000019e <flash_do_cmd.constprop.0+0x66>
        if (can_get && rx_remaining) {
200001c6:	2d00      	cmp	r5, #0
200001c8:	d0d4      	beq.n	20000174 <flash_do_cmd.constprop.0+0x3c>
200001ca:	2c00      	cmp	r4, #0
200001cc:	d0d2      	beq.n	20000174 <flash_do_cmd.constprop.0+0x3c>
200001ce:	e7f3      	b.n	200001b8 <flash_do_cmd.constprop.0+0x80>
200001d0:	00004649 	.word	0x00004649
200001d4:	00005845 	.word	0x00005845
200001d8:	00004346 	.word	0x00004346

200001dc <mutex_enter_blocking>:

void __time_critical_func(mutex_enter_blocking)(mutex_t *mtx) {
200001dc:	b510      	push	{r4, lr}
    assert(mtx->core.spin_lock);
    bool block = true;
    do {
        uint32_t save = spin_lock_blocking(mtx->core.spin_lock);
200001de:	6802      	ldr	r2, [r0, #0]
    *lock = 0;
200001e0:	2400      	movs	r4, #0
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
200001e2:	f3ef 8110 	mrs	r1, PRIMASK
    __asm volatile ("cpsid i");
200001e6:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
200001e8:	6813      	ldr	r3, [r2, #0]
200001ea:	2b00      	cmp	r3, #0
200001ec:	d0fc      	beq.n	200001e8 <mutex_enter_blocking+0xc>
    __asm volatile ("dmb");
200001ee:	f3bf 8f5f 	dmb	sy
        if (mtx->owner < 0) {
200001f2:	7903      	ldrb	r3, [r0, #4]
200001f4:	2b7f      	cmp	r3, #127	; 0x7f
200001f6:	d80b      	bhi.n	20000210 <mutex_enter_blocking+0x34>
            mtx->owner = get_core_num();
            block = false;
        }
        spin_unlock(mtx->core.spin_lock, save);
200001f8:	6803      	ldr	r3, [r0, #0]
200001fa:	f3bf 8f5f 	dmb	sy
    *lock = 0;
200001fe:	601c      	str	r4, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
20000200:	f381 8810 	msr	PRIMASK, r1
    __asm volatile ("wfe");
20000204:	bf20      	wfe
        uint32_t save = spin_lock_blocking(mtx->core.spin_lock);
20000206:	6802      	ldr	r2, [r0, #0]
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
20000208:	f3ef 8110 	mrs	r1, PRIMASK
    __asm volatile ("cpsid i");
2000020c:	b672      	cpsid	i
inline static void spin_lock_unsafe_blocking(spin_lock_t *lock) {
2000020e:	e7eb      	b.n	200001e8 <mutex_enter_blocking+0xc>
    return (*(uint32_t *) (SIO_BASE + SIO_CPUID_OFFSET));
20000210:	23d0      	movs	r3, #208	; 0xd0
20000212:	061b      	lsls	r3, r3, #24
            mtx->owner = get_core_num();
20000214:	681b      	ldr	r3, [r3, #0]
20000216:	7103      	strb	r3, [r0, #4]
        spin_unlock(mtx->core.spin_lock, save);
20000218:	6803      	ldr	r3, [r0, #0]
    __asm volatile ("dmb");
2000021a:	f3bf 8f5f 	dmb	sy
    *lock = 0;
2000021e:	2200      	movs	r2, #0
20000220:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
20000222:	f381 8810 	msr	PRIMASK, r1
        if (block) {
            __wfe();
        }
    } while (block);
}
20000226:	bd10      	pop	{r4, pc}

20000228 <mutex_try_enter>:

bool __time_critical_func(mutex_try_enter)(mutex_t *mtx, uint32_t *owner_out) {
20000228:	0003      	movs	r3, r0
    bool entered;
    uint32_t save = spin_lock_blocking(mtx->core.spin_lock);
2000022a:	6800      	ldr	r0, [r0, #0]
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
2000022c:	f3ef 8c10 	mrs	ip, PRIMASK
    __asm volatile ("cpsid i");
20000230:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
20000232:	6802      	ldr	r2, [r0, #0]
20000234:	2a00      	cmp	r2, #0
20000236:	d0fc      	beq.n	20000232 <mutex_try_enter+0xa>
    __asm volatile ("dmb");
20000238:	f3bf 8f5f 	dmb	sy
    if (mtx->owner < 0) {
2000023c:	2204      	movs	r2, #4
2000023e:	569a      	ldrsb	r2, [r3, r2]
20000240:	2a00      	cmp	r2, #0
20000242:	db0b      	blt.n	2000025c <mutex_try_enter+0x34>
        mtx->owner = get_core_num();
        entered = true;
    } else {
        if (owner_out) *owner_out = mtx->owner;
20000244:	2900      	cmp	r1, #0
20000246:	d00f      	beq.n	20000268 <mutex_try_enter+0x40>
        entered = false;
20000248:	2000      	movs	r0, #0
        if (owner_out) *owner_out = mtx->owner;
2000024a:	600a      	str	r2, [r1, #0]
    }
    spin_unlock(mtx->core.spin_lock, save);
2000024c:	681b      	ldr	r3, [r3, #0]
2000024e:	f3bf 8f5f 	dmb	sy
    *lock = 0;
20000252:	2200      	movs	r2, #0
20000254:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
20000256:	f38c 8810 	msr	PRIMASK, ip
    return entered;
}
2000025a:	4770      	bx	lr
    return (*(uint32_t *) (SIO_BASE + SIO_CPUID_OFFSET));
2000025c:	22d0      	movs	r2, #208	; 0xd0
2000025e:	0612      	lsls	r2, r2, #24
        mtx->owner = get_core_num();
20000260:	6812      	ldr	r2, [r2, #0]
        entered = true;
20000262:	2001      	movs	r0, #1
        mtx->owner = get_core_num();
20000264:	711a      	strb	r2, [r3, #4]
        entered = true;
20000266:	e7f1      	b.n	2000024c <mutex_try_enter+0x24>
        entered = false;
20000268:	2000      	movs	r0, #0
2000026a:	e7ef      	b.n	2000024c <mutex_try_enter+0x24>

2000026c <mutex_exit>:
    } while (block);
    return true;
}

void __time_critical_func(mutex_exit)(mutex_t *mtx) {
    uint32_t save = spin_lock_blocking(mtx->core.spin_lock);
2000026c:	6802      	ldr	r2, [r0, #0]
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
2000026e:	f3ef 8110 	mrs	r1, PRIMASK
    __asm volatile ("cpsid i");
20000272:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
20000274:	6813      	ldr	r3, [r2, #0]
20000276:	2b00      	cmp	r3, #0
20000278:	d0fc      	beq.n	20000274 <mutex_exit+0x8>
    __asm volatile ("dmb");
2000027a:	f3bf 8f5f 	dmb	sy
    assert(mtx->owner >= 0);
    mtx->owner = -1;
2000027e:	23ff      	movs	r3, #255	; 0xff
20000280:	7103      	strb	r3, [r0, #4]
    __asm volatile ("sev");
20000282:	bf40      	sev
    __sev();
    spin_unlock(mtx->core.spin_lock, save);
20000284:	6803      	ldr	r3, [r0, #0]
    __asm volatile ("dmb");
20000286:	f3bf 8f5f 	dmb	sy
    *lock = 0;
2000028a:	2200      	movs	r2, #0
2000028c:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
2000028e:	f381 8810 	msr	PRIMASK, r1
}
20000292:	4770      	bx	lr

20000294 <__aeabi_idiv0>:
20000294:	4770      	bx	lr
20000296:	46c0      	nop			; (mov r8, r8)

20000298 <__rom_func_lookup_veneer>:
20000298:	b401      	push	{r0}
2000029a:	4802      	ldr	r0, [pc, #8]	; (200002a4 <__rom_func_lookup_veneer+0xc>)
2000029c:	4684      	mov	ip, r0
2000029e:	bc01      	pop	{r0}
200002a0:	4760      	bx	ip
200002a2:	bf00      	nop
200002a4:	100003f1 	.word	0x100003f1
	...

200002b0 <aeabi_bits_funcs>:
200002b0:	00003350 	.word	0x00003350
200002b4:	0000334c 	.word	0x0000334c
200002b8:	00003354 	.word	0x00003354
200002bc:	00003352 	.word	0x00003352

200002c0 <aeabi_bits_funcs_end>:
200002c0:	00000000 	.word	0x00000000
200002c4:	00010000 	.word	0x00010000
	...
200002d0:	00020000 	.word	0x00020000
	...
200002dc:	00030000 	.word	0x00030000
	...
200002e8:	00ff0000 	.word	0x00ff0000
200002ec:	00000000 	.word	0x00000000

200002f0 <irq_handler_chain_first_slot>:
200002f0:	b500      	push	{lr}
200002f2:	6848      	ldr	r0, [r1, #4]
200002f4:	3101      	adds	r1, #1
200002f6:	468e      	mov	lr, r1
200002f8:	4700      	bx	r0

200002fa <irq_handler_chain_remove_tail>:
200002fa:	4670      	mov	r0, lr
200002fc:	3809      	subs	r0, #9
200002fe:	4901      	ldr	r1, [pc, #4]	; (20000304 <irq_handler_chain_remove_tail+0xa>)
20000300:	4788      	blx	r1
20000302:	bd00      	pop	{pc}
20000304:	10000af9 	.word	0x10000af9

20000308 <aeabi_mem_funcs>:
20000308:	0000534d 	.word	0x0000534d
2000030c:	0000434d 	.word	0x0000434d
20000310:	00003453 	.word	0x00003453
20000314:	00003443 	.word	0x00003443

20000318 <striped_spin_lock_num>:
20000318:	00000010                                ....

2000031c <_impure_ptr>:
2000031c:	20000320                                 .. 

20000320 <impure_data>:
20000320:	00000000 2000060c 20000674 200006dc     ....... t.. ... 
	...
200003c8:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
200003d8:	0005deec 0000000b 00000000 00000000     ................
	...

20000748 <__malloc_av_>:
	...
20000750:	20000748 20000748 20000750 20000750     H.. H.. P.. P.. 
20000760:	20000758 20000758 20000760 20000760     X.. X.. `.. `.. 
20000770:	20000768 20000768 20000770 20000770     h.. h.. p.. p.. 
20000780:	20000778 20000778 20000780 20000780     x.. x.. ... ... 
20000790:	20000788 20000788 20000790 20000790     ... ... ... ... 
200007a0:	20000798 20000798 200007a0 200007a0     ... ... ... ... 
200007b0:	200007a8 200007a8 200007b0 200007b0     ... ... ... ... 
200007c0:	200007b8 200007b8 200007c0 200007c0     ... ... ... ... 
200007d0:	200007c8 200007c8 200007d0 200007d0     ... ... ... ... 
200007e0:	200007d8 200007d8 200007e0 200007e0     ... ... ... ... 
200007f0:	200007e8 200007e8 200007f0 200007f0     ... ... ... ... 
20000800:	200007f8 200007f8 20000800 20000800     ... ... ... ... 
20000810:	20000808 20000808 20000810 20000810     ... ... ... ... 
20000820:	20000818 20000818 20000820 20000820     ... ...  ..  .. 
20000830:	20000828 20000828 20000830 20000830     (.. (.. 0.. 0.. 
20000840:	20000838 20000838 20000840 20000840     8.. 8.. @.. @.. 
20000850:	20000848 20000848 20000850 20000850     H.. H.. P.. P.. 
20000860:	20000858 20000858 20000860 20000860     X.. X.. `.. `.. 
20000870:	20000868 20000868 20000870 20000870     h.. h.. p.. p.. 
20000880:	20000878 20000878 20000880 20000880     x.. x.. ... ... 
20000890:	20000888 20000888 20000890 20000890     ... ... ... ... 
200008a0:	20000898 20000898 200008a0 200008a0     ... ... ... ... 
200008b0:	200008a8 200008a8 200008b0 200008b0     ... ... ... ... 
200008c0:	200008b8 200008b8 200008c0 200008c0     ... ... ... ... 
200008d0:	200008c8 200008c8 200008d0 200008d0     ... ... ... ... 
200008e0:	200008d8 200008d8 200008e0 200008e0     ... ... ... ... 
200008f0:	200008e8 200008e8 200008f0 200008f0     ... ... ... ... 
20000900:	200008f8 200008f8 20000900 20000900     ... ... ... ... 
20000910:	20000908 20000908 20000910 20000910     ... ... ... ... 
20000920:	20000918 20000918 20000920 20000920     ... ...  ..  .. 
20000930:	20000928 20000928 20000930 20000930     (.. (.. 0.. 0.. 
20000940:	20000938 20000938 20000940 20000940     8.. 8.. @.. @.. 
20000950:	20000948 20000948 20000950 20000950     H.. H.. P.. P.. 
20000960:	20000958 20000958 20000960 20000960     X.. X.. `.. `.. 
20000970:	20000968 20000968 20000970 20000970     h.. h.. p.. p.. 
20000980:	20000978 20000978 20000980 20000980     x.. x.. ... ... 
20000990:	20000988 20000988 20000990 20000990     ... ... ... ... 
200009a0:	20000998 20000998 200009a0 200009a0     ... ... ... ... 
200009b0:	200009a8 200009a8 200009b0 200009b0     ... ... ... ... 
200009c0:	200009b8 200009b8 200009c0 200009c0     ... ... ... ... 
200009d0:	200009c8 200009c8 200009d0 200009d0     ... ... ... ... 
200009e0:	200009d8 200009d8 200009e0 200009e0     ... ... ... ... 
200009f0:	200009e8 200009e8 200009f0 200009f0     ... ... ... ... 
20000a00:	200009f8 200009f8 20000a00 20000a00     ... ... ... ... 
20000a10:	20000a08 20000a08 20000a10 20000a10     ... ... ... ... 
20000a20:	20000a18 20000a18 20000a20 20000a20     ... ...  ..  .. 
20000a30:	20000a28 20000a28 20000a30 20000a30     (.. (.. 0.. 0.. 
20000a40:	20000a38 20000a38 20000a40 20000a40     8.. 8.. @.. @.. 
20000a50:	20000a48 20000a48 20000a50 20000a50     H.. H.. P.. P.. 
20000a60:	20000a58 20000a58 20000a60 20000a60     X.. X.. `.. `.. 
20000a70:	20000a68 20000a68 20000a70 20000a70     h.. h.. p.. p.. 
20000a80:	20000a78 20000a78 20000a80 20000a80     x.. x.. ... ... 
20000a90:	20000a88 20000a88 20000a90 20000a90     ... ... ... ... 
20000aa0:	20000a98 20000a98 20000aa0 20000aa0     ... ... ... ... 
20000ab0:	20000aa8 20000aa8 20000ab0 20000ab0     ... ... ... ... 
20000ac0:	20000ab8 20000ab8 20000ac0 20000ac0     ... ... ... ... 
20000ad0:	20000ac8 20000ac8 20000ad0 20000ad0     ... ... ... ... 
20000ae0:	20000ad8 20000ad8 20000ae0 20000ae0     ... ... ... ... 
20000af0:	20000ae8 20000ae8 20000af0 20000af0     ... ... ... ... 
20000b00:	20000af8 20000af8 20000b00 20000b00     ... ... ... ... 
20000b10:	20000b08 20000b08 20000b10 20000b10     ... ... ... ... 
20000b20:	20000b18 20000b18 20000b20 20000b20     ... ...  ..  .. 
20000b30:	20000b28 20000b28 20000b30 20000b30     (.. (.. 0.. 0.. 
20000b40:	20000b38 20000b38 20000b40 20000b40     8.. 8.. @.. @.. 

20000b50 <__malloc_sbrk_base>:
20000b50:	ffffffff                                ....

20000b54 <__malloc_trim_threshold>:
20000b54:	00020000                                ....

20000b58 <print_mutex>:
	...

20000b60 <__mutex_array_end>:
20000b60:	100003c9 	.word	0x100003c9
20000b64:	1000030d 	.word	0x1000030d
20000b68:	1000078d 	.word	0x1000078d
20000b6c:	1000084d 	.word	0x1000084d

20000b70 <__frame_dummy_init_array_entry>:
20000b70:	100002ed 10001a29                       ....)...
