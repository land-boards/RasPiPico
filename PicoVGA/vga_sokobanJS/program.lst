
build/program.elf:     file format elf32-littlearm


Disassembly of section .boot2:

10000000 <__boot2_start__>:
10000000:	4b32b500 	.word	0x4b32b500
10000004:	60582021 	.word	0x60582021
10000008:	21026898 	.word	0x21026898
1000000c:	60984388 	.word	0x60984388
10000010:	611860d8 	.word	0x611860d8
10000014:	4b2e6158 	.word	0x4b2e6158
10000018:	60992100 	.word	0x60992100
1000001c:	61592102 	.word	0x61592102
10000020:	22f02101 	.word	0x22f02101
10000024:	492b5099 	.word	0x492b5099
10000028:	21016019 	.word	0x21016019
1000002c:	20356099 	.word	0x20356099
10000030:	f844f000 	.word	0xf844f000
10000034:	42902202 	.word	0x42902202
10000038:	2106d014 	.word	0x2106d014
1000003c:	f0006619 	.word	0xf0006619
10000040:	6e19f834 	.word	0x6e19f834
10000044:	66192101 	.word	0x66192101
10000048:	66182000 	.word	0x66182000
1000004c:	f000661a 	.word	0xf000661a
10000050:	6e19f82c 	.word	0x6e19f82c
10000054:	6e196e19 	.word	0x6e196e19
10000058:	f0002005 	.word	0xf0002005
1000005c:	2101f82f 	.word	0x2101f82f
10000060:	d1f94208 	.word	0xd1f94208
10000064:	60992100 	.word	0x60992100
10000068:	6019491b 	.word	0x6019491b
1000006c:	60592100 	.word	0x60592100
10000070:	481b491a 	.word	0x481b491a
10000074:	21016001 	.word	0x21016001
10000078:	21eb6099 	.word	0x21eb6099
1000007c:	21a06619 	.word	0x21a06619
10000080:	f0006619 	.word	0xf0006619
10000084:	2100f812 	.word	0x2100f812
10000088:	49166099 	.word	0x49166099
1000008c:	60014814 	.word	0x60014814
10000090:	60992101 	.word	0x60992101
10000094:	2800bc01 	.word	0x2800bc01
10000098:	4700d000 	.word	0x4700d000
1000009c:	49134812 	.word	0x49134812
100000a0:	c8036008 	.word	0xc8036008
100000a4:	8808f380 	.word	0x8808f380
100000a8:	b5034708 	.word	0xb5034708
100000ac:	20046a99 	.word	0x20046a99
100000b0:	d0fb4201 	.word	0xd0fb4201
100000b4:	42012001 	.word	0x42012001
100000b8:	bd03d1f8 	.word	0xbd03d1f8
100000bc:	6618b502 	.word	0x6618b502
100000c0:	f7ff6618 	.word	0xf7ff6618
100000c4:	6e18fff2 	.word	0x6e18fff2
100000c8:	bd026e18 	.word	0xbd026e18
100000cc:	40020000 	.word	0x40020000
100000d0:	18000000 	.word	0x18000000
100000d4:	00070000 	.word	0x00070000
100000d8:	005f0300 	.word	0x005f0300
100000dc:	00002221 	.word	0x00002221
100000e0:	180000f4 	.word	0x180000f4
100000e4:	a0002022 	.word	0xa0002022
100000e8:	10000100 	.word	0x10000100
100000ec:	e000ed08 	.word	0xe000ed08
	...
100000fc:	7a4eb274 	.word	0x7a4eb274

Disassembly of section .text:

10000100 <__logical_binary_start>:
10000100:	20042000 	.word	0x20042000
10000104:	100001f7 	.word	0x100001f7
10000108:	100001c3 	.word	0x100001c3
1000010c:	100001c5 	.word	0x100001c5
10000110:	100001c1 	.word	0x100001c1
10000114:	100001c1 	.word	0x100001c1
10000118:	100001c1 	.word	0x100001c1
1000011c:	100001c1 	.word	0x100001c1
10000120:	100001c1 	.word	0x100001c1
10000124:	100001c1 	.word	0x100001c1
10000128:	100001c1 	.word	0x100001c1
1000012c:	100001c7 	.word	0x100001c7
10000130:	100001c1 	.word	0x100001c1
10000134:	100001c1 	.word	0x100001c1
10000138:	100001c9 	.word	0x100001c9
1000013c:	100001cb 	.word	0x100001cb
10000140:	100001cd 	.word	0x100001cd
10000144:	100001cd 	.word	0x100001cd
10000148:	100001cd 	.word	0x100001cd
1000014c:	100001cd 	.word	0x100001cd
10000150:	100001cd 	.word	0x100001cd
10000154:	100001cd 	.word	0x100001cd
10000158:	100001cd 	.word	0x100001cd
1000015c:	100001cd 	.word	0x100001cd
10000160:	100001cd 	.word	0x100001cd
10000164:	100001cd 	.word	0x100001cd
10000168:	100001cd 	.word	0x100001cd
1000016c:	100001cd 	.word	0x100001cd
10000170:	100001cd 	.word	0x100001cd
10000174:	100001cd 	.word	0x100001cd
10000178:	100001cd 	.word	0x100001cd
1000017c:	100001cd 	.word	0x100001cd
10000180:	100001cd 	.word	0x100001cd
10000184:	100001cd 	.word	0x100001cd
10000188:	100001cd 	.word	0x100001cd
1000018c:	100001cd 	.word	0x100001cd
10000190:	100001cd 	.word	0x100001cd
10000194:	100001cd 	.word	0x100001cd
10000198:	100001cd 	.word	0x100001cd
1000019c:	100001cd 	.word	0x100001cd
100001a0:	100001cd 	.word	0x100001cd
100001a4:	100001cd 	.word	0x100001cd
100001a8:	100001cd 	.word	0x100001cd
100001ac:	100001cd 	.word	0x100001cd
100001b0:	100001cd 	.word	0x100001cd
100001b4:	100001cd 	.word	0x100001cd
100001b8:	100001cd 	.word	0x100001cd
100001bc:	100001cd 	.word	0x100001cd

100001c0 <isr_invalid>:
100001c0:	be00      	bkpt	0x0000

100001c2 <isr_nmi>:
100001c2:	be00      	bkpt	0x0000

100001c4 <isr_hardfault>:
100001c4:	be00      	bkpt	0x0000

100001c6 <isr_svcall>:
100001c6:	be00      	bkpt	0x0000

100001c8 <isr_pendsv>:
100001c8:	be00      	bkpt	0x0000

100001ca <isr_systick>:
100001ca:	be00      	bkpt	0x0000

100001cc <__unhandled_user_irq>:
100001cc:	f000 f84b 	bl	10000266 <__get_current_exception>
100001d0:	3810      	subs	r0, #16

100001d2 <unhandled_user_irq_num_in_r0>:
100001d2:	be00      	bkpt	0x0000

100001d4 <binary_info_header>:
100001d4:	7188ebf2 	.word	0x7188ebf2
100001d8:	101893b4 	.word	0x101893b4
100001dc:	101893d4 	.word	0x101893d4
100001e0:	10000234 	.word	0x10000234
100001e4:	e71aa390 	.word	0xe71aa390

100001e8 <_entry_point>:
100001e8:	2000      	movs	r0, #0
100001ea:	4921      	ldr	r1, [pc, #132]	; (10000270 <__get_current_exception+0xa>)
100001ec:	6008      	str	r0, [r1, #0]
100001ee:	c806      	ldmia	r0!, {r1, r2}
100001f0:	f381 8808 	msr	MSP, r1
100001f4:	4710      	bx	r2

100001f6 <_reset_handler>:
100001f6:	481f      	ldr	r0, [pc, #124]	; (10000274 <__get_current_exception+0xe>)
100001f8:	6800      	ldr	r0, [r0, #0]
100001fa:	2800      	cmp	r0, #0
100001fc:	d12f      	bne.n	1000025e <hold_non_core0_in_bootrom>
100001fe:	a40d      	add	r4, pc, #52	; (adr r4, 10000234 <data_cpy_table>)
10000200:	cc0e      	ldmia	r4!, {r1, r2, r3}
10000202:	2900      	cmp	r1, #0
10000204:	d002      	beq.n	1000020c <_reset_handler+0x16>
10000206:	f000 f812 	bl	1000022e <data_cpy>
1000020a:	e7f9      	b.n	10000200 <_reset_handler+0xa>
1000020c:	491a      	ldr	r1, [pc, #104]	; (10000278 <__get_current_exception+0x12>)
1000020e:	4a1b      	ldr	r2, [pc, #108]	; (1000027c <__get_current_exception+0x16>)
10000210:	2000      	movs	r0, #0
10000212:	e000      	b.n	10000216 <bss_fill_test>

10000214 <bss_fill_loop>:
10000214:	c101      	stmia	r1!, {r0}

10000216 <bss_fill_test>:
10000216:	4291      	cmp	r1, r2
10000218:	d1fc      	bne.n	10000214 <bss_fill_loop>

1000021a <platform_entry>:
1000021a:	4919      	ldr	r1, [pc, #100]	; (10000280 <__get_current_exception+0x1a>)
1000021c:	4788      	blx	r1
1000021e:	4919      	ldr	r1, [pc, #100]	; (10000284 <__get_current_exception+0x1e>)
10000220:	4788      	blx	r1
10000222:	4919      	ldr	r1, [pc, #100]	; (10000288 <__get_current_exception+0x22>)
10000224:	4788      	blx	r1
10000226:	be00      	bkpt	0x0000
10000228:	e7fd      	b.n	10000226 <platform_entry+0xc>

1000022a <data_cpy_loop>:
1000022a:	c901      	ldmia	r1!, {r0}
1000022c:	c201      	stmia	r2!, {r0}

1000022e <data_cpy>:
1000022e:	429a      	cmp	r2, r3
10000230:	d3fb      	bcc.n	1000022a <data_cpy_loop>
10000232:	4770      	bx	lr

10000234 <data_cpy_table>:
10000234:	101893d4 	.word	0x101893d4
10000238:	200000c0 	.word	0x200000c0
1000023c:	20008e9c 	.word	0x20008e9c
10000240:	101921b0 	.word	0x101921b0
10000244:	20040000 	.word	0x20040000
10000248:	20040000 	.word	0x20040000
1000024c:	101921b0 	.word	0x101921b0
10000250:	20041000 	.word	0x20041000
10000254:	20041000 	.word	0x20041000
10000258:	00000000 	.word	0x00000000
1000025c:	4770      	bx	lr

1000025e <hold_non_core0_in_bootrom>:
1000025e:	480b      	ldr	r0, [pc, #44]	; (1000028c <__get_current_exception+0x26>)
10000260:	f000 ff88 	bl	10001174 <rom_func_lookup>
10000264:	4700      	bx	r0

10000266 <__get_current_exception>:
10000266:	f3ef 8005 	mrs	r0, IPSR
1000026a:	b2c0      	uxtb	r0, r0
1000026c:	4770      	bx	lr
1000026e:	0000      	.short	0x0000
10000270:	e000ed08 	.word	0xe000ed08
10000274:	d0000000 	.word	0xd0000000
10000278:	20008ea0 	.word	0x20008ea0
1000027c:	20017338 	.word	0x20017338
10000280:	1000391d 	.word	0x1000391d
10000284:	10006efd 	.word	0x10006efd
10000288:	10003a3d 	.word	0x10003a3d
1000028c:	00005657 	.word	0x00005657

10000290 <__bi_46>:
10000290:	50520006 5360b3ab 1000b030              ..RP..`S0...

1000029c <__bi_34>:
1000029c:	50520006 02031c86 1000b038              ..RP....8...

100002a8 <__bi_26>:
100002a8:	50520006 9da22254 1000b040              ..RPT"..@...

100002b4 <__bi_18>:
100002b4:	50520005 68f465de 101921b0              ..RP.e.h.!..

100002c0 <_init>:
100002c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100002c2:	46c0      	nop			; (mov r8, r8)

100002c4 <__do_global_dtors_aux>:
100002c4:	b510      	push	{r4, lr}
100002c6:	4c06      	ldr	r4, [pc, #24]	; (100002e0 <__do_global_dtors_aux+0x1c>)
100002c8:	7823      	ldrb	r3, [r4, #0]
100002ca:	2b00      	cmp	r3, #0
100002cc:	d107      	bne.n	100002de <__do_global_dtors_aux+0x1a>
100002ce:	4b05      	ldr	r3, [pc, #20]	; (100002e4 <__do_global_dtors_aux+0x20>)
100002d0:	2b00      	cmp	r3, #0
100002d2:	d002      	beq.n	100002da <__do_global_dtors_aux+0x16>
100002d4:	4804      	ldr	r0, [pc, #16]	; (100002e8 <__do_global_dtors_aux+0x24>)
100002d6:	e000      	b.n	100002da <__do_global_dtors_aux+0x16>
100002d8:	bf00      	nop
100002da:	2301      	movs	r3, #1
100002dc:	7023      	strb	r3, [r4, #0]
100002de:	bd10      	pop	{r4, pc}
100002e0:	200090b0 	.word	0x200090b0
100002e4:	00000000 	.word	0x00000000
100002e8:	1000aff8 	.word	0x1000aff8

100002ec <frame_dummy>:
100002ec:	4b04      	ldr	r3, [pc, #16]	; (10000300 <frame_dummy+0x14>)
100002ee:	b510      	push	{r4, lr}
100002f0:	2b00      	cmp	r3, #0
100002f2:	d003      	beq.n	100002fc <frame_dummy+0x10>
100002f4:	4903      	ldr	r1, [pc, #12]	; (10000304 <frame_dummy+0x18>)
100002f6:	4804      	ldr	r0, [pc, #16]	; (10000308 <frame_dummy+0x1c>)
100002f8:	e000      	b.n	100002fc <frame_dummy+0x10>
100002fa:	bf00      	nop
100002fc:	bd10      	pop	{r4, pc}
100002fe:	46c0      	nop			; (mov r8, r8)
10000300:	00000000 	.word	0x00000000
10000304:	200090b4 	.word	0x200090b4
10000308:	1000aff8 	.word	0x1000aff8

1000030c <__aeabi_bits_init>:
1000030c:	4801      	ldr	r0, [pc, #4]	; (10000314 <__aeabi_bits_init+0x8>)
1000030e:	2104      	movs	r1, #4
10000310:	4b01      	ldr	r3, [pc, #4]	; (10000318 <__aeabi_bits_init+0xc>)
10000312:	4718      	bx	r3
10000314:	200026b0 	.word	0x200026b0
10000318:	10001195 	.word	0x10001195

1000031c <__wrap___aeabi_idiv>:
1000031c:	4a14      	ldr	r2, [pc, #80]	; (10000370 <divmod_s32s32_savestate+0x20>)
1000031e:	6f93      	ldr	r3, [r2, #120]	; 0x78
10000320:	089b      	lsrs	r3, r3, #2
10000322:	d215      	bcs.n	10000350 <divmod_s32s32_savestate>

10000324 <divmod_s32s32_unsafe>:
10000324:	6690      	str	r0, [r2, #104]	; 0x68
10000326:	66d1      	str	r1, [r2, #108]	; 0x6c
10000328:	2900      	cmp	r1, #0
1000032a:	d005      	beq.n	10000338 <divmod_s32s32_unsafe+0x14>
1000032c:	e7ff      	b.n	1000032e <divmod_s32s32_unsafe+0xa>
1000032e:	e7ff      	b.n	10000330 <divmod_s32s32_unsafe+0xc>
10000330:	e7ff      	b.n	10000332 <divmod_s32s32_unsafe+0xe>
10000332:	6f51      	ldr	r1, [r2, #116]	; 0x74
10000334:	6f10      	ldr	r0, [r2, #112]	; 0x70
10000336:	4770      	bx	lr
10000338:	b504      	push	{r2, lr}
1000033a:	2180      	movs	r1, #128	; 0x80
1000033c:	0609      	lsls	r1, r1, #24
1000033e:	17c2      	asrs	r2, r0, #31
10000340:	4051      	eors	r1, r2
10000342:	2800      	cmp	r0, #0
10000344:	d000      	beq.n	10000348 <divmod_s32s32_unsafe+0x24>
10000346:	43c8      	mvns	r0, r1
10000348:	f00a fe2e 	bl	1000afa8 <____aeabi_idiv0_veneer>
1000034c:	2100      	movs	r1, #0
1000034e:	bd04      	pop	{r2, pc}

10000350 <divmod_s32s32_savestate>:
10000350:	6f93      	ldr	r3, [r2, #120]	; 0x78
10000352:	085b      	lsrs	r3, r3, #1
10000354:	d3fd      	bcc.n	10000352 <divmod_s32s32_savestate+0x2>
10000356:	b5f0      	push	{r4, r5, r6, r7, lr}
10000358:	6e94      	ldr	r4, [r2, #104]	; 0x68
1000035a:	6ed5      	ldr	r5, [r2, #108]	; 0x6c
1000035c:	6f57      	ldr	r7, [r2, #116]	; 0x74
1000035e:	6f16      	ldr	r6, [r2, #112]	; 0x70
10000360:	f7ff ffe0 	bl	10000324 <divmod_s32s32_unsafe>
10000364:	6694      	str	r4, [r2, #104]	; 0x68
10000366:	66d5      	str	r5, [r2, #108]	; 0x6c
10000368:	6757      	str	r7, [r2, #116]	; 0x74
1000036a:	6716      	str	r6, [r2, #112]	; 0x70
1000036c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000036e:	0000      	.short	0x0000
10000370:	d0000000 	.word	0xd0000000

10000374 <__wrap___aeabi_uidiv>:
10000374:	4a13      	ldr	r2, [pc, #76]	; (100003c4 <divmod_u32u32_savestate+0x20>)
10000376:	6f93      	ldr	r3, [r2, #120]	; 0x78
10000378:	089b      	lsrs	r3, r3, #2
1000037a:	d213      	bcs.n	100003a4 <divmod_u32u32_savestate>

1000037c <divmod_u32u32_unsafe>:
1000037c:	6610      	str	r0, [r2, #96]	; 0x60
1000037e:	6651      	str	r1, [r2, #100]	; 0x64
10000380:	2900      	cmp	r1, #0
10000382:	d005      	beq.n	10000390 <divmod_u32u32_unsafe+0x14>
10000384:	e7ff      	b.n	10000386 <divmod_u32u32_unsafe+0xa>
10000386:	e7ff      	b.n	10000388 <divmod_u32u32_unsafe+0xc>
10000388:	e7ff      	b.n	1000038a <divmod_u32u32_unsafe+0xe>
1000038a:	6f51      	ldr	r1, [r2, #116]	; 0x74
1000038c:	6f10      	ldr	r0, [r2, #112]	; 0x70
1000038e:	4770      	bx	lr
10000390:	b504      	push	{r2, lr}
10000392:	2800      	cmp	r0, #0
10000394:	d001      	beq.n	1000039a <divmod_u32u32_unsafe+0x1e>
10000396:	2000      	movs	r0, #0
10000398:	43c0      	mvns	r0, r0
1000039a:	f00a fe05 	bl	1000afa8 <____aeabi_idiv0_veneer>
1000039e:	2100      	movs	r1, #0
100003a0:	bd04      	pop	{r2, pc}
100003a2:	46c0      	nop			; (mov r8, r8)

100003a4 <divmod_u32u32_savestate>:
100003a4:	6f93      	ldr	r3, [r2, #120]	; 0x78
100003a6:	085b      	lsrs	r3, r3, #1
100003a8:	d3fd      	bcc.n	100003a6 <divmod_u32u32_savestate+0x2>
100003aa:	b5f0      	push	{r4, r5, r6, r7, lr}
100003ac:	6e94      	ldr	r4, [r2, #104]	; 0x68
100003ae:	6ed5      	ldr	r5, [r2, #108]	; 0x6c
100003b0:	6f57      	ldr	r7, [r2, #116]	; 0x74
100003b2:	6f16      	ldr	r6, [r2, #112]	; 0x70
100003b4:	f7ff ffe2 	bl	1000037c <divmod_u32u32_unsafe>
100003b8:	6694      	str	r4, [r2, #104]	; 0x68
100003ba:	66d5      	str	r5, [r2, #108]	; 0x6c
100003bc:	6757      	str	r7, [r2, #116]	; 0x74
100003be:	6716      	str	r6, [r2, #112]	; 0x70
100003c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
100003c2:	0000      	.short	0x0000
100003c4:	d0000000 	.word	0xd0000000

100003c8 <__wrap___aeabi_ldivmod>:
100003c8:	4694      	mov	ip, r2
100003ca:	4a4e      	ldr	r2, [pc, #312]	; (10000504 <udiv0+0x1a>)
100003cc:	6f92      	ldr	r2, [r2, #120]	; 0x78
100003ce:	0892      	lsrs	r2, r2, #2
100003d0:	4662      	mov	r2, ip
100003d2:	d201      	bcs.n	100003d8 <divmod_s64s64_savestate>
100003d4:	e030      	b.n	10000438 <divmod_s64s64_unsafe>
100003d6:	46c0      	nop			; (mov r8, r8)

100003d8 <divmod_s64s64_savestate>:
100003d8:	b5f0      	push	{r4, r5, r6, r7, lr}
100003da:	4e4a      	ldr	r6, [pc, #296]	; (10000504 <udiv0+0x1a>)
100003dc:	6fb5      	ldr	r5, [r6, #120]	; 0x78
100003de:	086d      	lsrs	r5, r5, #1
100003e0:	d3fc      	bcc.n	100003dc <divmod_s64s64_savestate+0x4>
100003e2:	6e34      	ldr	r4, [r6, #96]	; 0x60
100003e4:	6e75      	ldr	r5, [r6, #100]	; 0x64
100003e6:	6f77      	ldr	r7, [r6, #116]	; 0x74
100003e8:	6f36      	ldr	r6, [r6, #112]	; 0x70
100003ea:	f000 f825 	bl	10000438 <divmod_s64s64_unsafe>
100003ee:	4694      	mov	ip, r2
100003f0:	4a44      	ldr	r2, [pc, #272]	; (10000504 <udiv0+0x1a>)
100003f2:	6614      	str	r4, [r2, #96]	; 0x60
100003f4:	6655      	str	r5, [r2, #100]	; 0x64
100003f6:	6757      	str	r7, [r2, #116]	; 0x74
100003f8:	6716      	str	r6, [r2, #112]	; 0x70
100003fa:	4662      	mov	r2, ip
100003fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
100003fe:	46c0      	nop			; (mov r8, r8)

10000400 <__wrap___aeabi_uldivmod>:
10000400:	4694      	mov	ip, r2
10000402:	4a40      	ldr	r2, [pc, #256]	; (10000504 <udiv0+0x1a>)
10000404:	6f92      	ldr	r2, [r2, #120]	; 0x78
10000406:	0892      	lsrs	r2, r2, #2
10000408:	4662      	mov	r2, ip
1000040a:	d201      	bcs.n	10000410 <divmod_u64u64_savestate>
1000040c:	e058      	b.n	100004c0 <divmod_u64u64_unsafe>
1000040e:	46c0      	nop			; (mov r8, r8)

10000410 <divmod_u64u64_savestate>:
10000410:	b5f0      	push	{r4, r5, r6, r7, lr}
10000412:	4e3c      	ldr	r6, [pc, #240]	; (10000504 <udiv0+0x1a>)
10000414:	6fb5      	ldr	r5, [r6, #120]	; 0x78
10000416:	086d      	lsrs	r5, r5, #1
10000418:	d3fc      	bcc.n	10000414 <divmod_u64u64_savestate+0x4>
1000041a:	6e34      	ldr	r4, [r6, #96]	; 0x60
1000041c:	6e75      	ldr	r5, [r6, #100]	; 0x64
1000041e:	6f77      	ldr	r7, [r6, #116]	; 0x74
10000420:	6f36      	ldr	r6, [r6, #112]	; 0x70
10000422:	f000 f84d 	bl	100004c0 <divmod_u64u64_unsafe>
10000426:	4694      	mov	ip, r2
10000428:	4a36      	ldr	r2, [pc, #216]	; (10000504 <udiv0+0x1a>)
1000042a:	6614      	str	r4, [r2, #96]	; 0x60
1000042c:	6655      	str	r5, [r2, #100]	; 0x64
1000042e:	6757      	str	r7, [r2, #116]	; 0x74
10000430:	6716      	str	r6, [r2, #112]	; 0x70
10000432:	4662      	mov	r2, ip
10000434:	bdf0      	pop	{r4, r5, r6, r7, pc}
10000436:	46c0      	nop			; (mov r8, r8)

10000438 <divmod_s64s64_unsafe>:
10000438:	2b00      	cmp	r3, #0
1000043a:	db24      	blt.n	10000486 <l41_1+0x26>
1000043c:	d011      	beq.n	10000462 <l41_1+0x2>
1000043e:	2900      	cmp	r1, #0
10000440:	da3e      	bge.n	100004c0 <divmod_u64u64_unsafe>
10000442:	b500      	push	{lr}
10000444:	43c9      	mvns	r1, r1
10000446:	4240      	negs	r0, r0
10000448:	d100      	bne.n	1000044c <l39_1>
1000044a:	3101      	adds	r1, #1

1000044c <l39_1>:
1000044c:	f000 f838 	bl	100004c0 <divmod_u64u64_unsafe>
10000450:	43c9      	mvns	r1, r1
10000452:	4240      	negs	r0, r0
10000454:	d100      	bne.n	10000458 <l40_1>
10000456:	3101      	adds	r1, #1

10000458 <l40_1>:
10000458:	43db      	mvns	r3, r3
1000045a:	4252      	negs	r2, r2
1000045c:	d100      	bne.n	10000460 <l41_1>
1000045e:	3301      	adds	r3, #1

10000460 <l41_1>:
10000460:	bd00      	pop	{pc}
10000462:	2a00      	cmp	r2, #0
10000464:	d1eb      	bne.n	1000043e <divmod_s64s64_unsafe+0x6>
10000466:	2800      	cmp	r0, #0
10000468:	d101      	bne.n	1000046e <l41_1+0xe>
1000046a:	2900      	cmp	r1, #0
1000046c:	d005      	beq.n	1000047a <l41_1+0x1a>
1000046e:	2000      	movs	r0, #0
10000470:	0fc9      	lsrs	r1, r1, #31
10000472:	07c9      	lsls	r1, r1, #31
10000474:	d101      	bne.n	1000047a <l41_1+0x1a>
10000476:	43c0      	mvns	r0, r0
10000478:	0841      	lsrs	r1, r0, #1
1000047a:	b500      	push	{lr}
1000047c:	f00a fd8c 	bl	1000af98 <____aeabi_ldiv0_veneer>
10000480:	2200      	movs	r2, #0
10000482:	2300      	movs	r3, #0
10000484:	bd00      	pop	{pc}
10000486:	b500      	push	{lr}
10000488:	2900      	cmp	r1, #0
1000048a:	db0a      	blt.n	100004a2 <l43_1+0x2>
1000048c:	43db      	mvns	r3, r3
1000048e:	4252      	negs	r2, r2
10000490:	d100      	bne.n	10000494 <l42_1>
10000492:	3301      	adds	r3, #1

10000494 <l42_1>:
10000494:	f000 f814 	bl	100004c0 <divmod_u64u64_unsafe>
10000498:	43c9      	mvns	r1, r1
1000049a:	4240      	negs	r0, r0
1000049c:	d100      	bne.n	100004a0 <l43_1>
1000049e:	3101      	adds	r1, #1

100004a0 <l43_1>:
100004a0:	bd00      	pop	{pc}
100004a2:	43c9      	mvns	r1, r1
100004a4:	4240      	negs	r0, r0
100004a6:	d100      	bne.n	100004aa <l44_1>
100004a8:	3101      	adds	r1, #1

100004aa <l44_1>:
100004aa:	43db      	mvns	r3, r3
100004ac:	4252      	negs	r2, r2
100004ae:	d100      	bne.n	100004b2 <l45_1>
100004b0:	3301      	adds	r3, #1

100004b2 <l45_1>:
100004b2:	f000 f805 	bl	100004c0 <divmod_u64u64_unsafe>
100004b6:	43db      	mvns	r3, r3
100004b8:	4252      	negs	r2, r2
100004ba:	d100      	bne.n	100004be <l46_1>
100004bc:	3301      	adds	r3, #1

100004be <l46_1>:
100004be:	bd00      	pop	{pc}

100004c0 <divmod_u64u64_unsafe>:
100004c0:	2900      	cmp	r1, #0
100004c2:	d123      	bne.n	1000050c <y64>
100004c4:	2b00      	cmp	r3, #0
100004c6:	d118      	bne.n	100004fa <udiv0+0x10>
100004c8:	2a00      	cmp	r2, #0
100004ca:	d00c      	beq.n	100004e6 <divmod_u64u64_unsafe+0x26>
100004cc:	46bc      	mov	ip, r7
100004ce:	4f0d      	ldr	r7, [pc, #52]	; (10000504 <udiv0+0x1a>)
100004d0:	6638      	str	r0, [r7, #96]	; 0x60
100004d2:	667a      	str	r2, [r7, #100]	; 0x64
100004d4:	2100      	movs	r1, #0
100004d6:	2300      	movs	r3, #0
100004d8:	e7ff      	b.n	100004da <divmod_u64u64_unsafe+0x1a>
100004da:	e7ff      	b.n	100004dc <divmod_u64u64_unsafe+0x1c>
100004dc:	e7ff      	b.n	100004de <divmod_u64u64_unsafe+0x1e>
100004de:	6f7a      	ldr	r2, [r7, #116]	; 0x74
100004e0:	6f38      	ldr	r0, [r7, #112]	; 0x70
100004e2:	4667      	mov	r7, ip
100004e4:	4770      	bx	lr
100004e6:	2800      	cmp	r0, #0
100004e8:	d001      	beq.n	100004ee <udiv0+0x4>

100004ea <udiv0>:
100004ea:	4807      	ldr	r0, [pc, #28]	; (10000508 <udiv0+0x1e>)
100004ec:	0001      	movs	r1, r0
100004ee:	b500      	push	{lr}
100004f0:	f00a fd52 	bl	1000af98 <____aeabi_ldiv0_veneer>
100004f4:	2200      	movs	r2, #0
100004f6:	2300      	movs	r3, #0
100004f8:	bd00      	pop	{pc}
100004fa:	0002      	movs	r2, r0
100004fc:	000b      	movs	r3, r1
100004fe:	2000      	movs	r0, #0
10000500:	2100      	movs	r1, #0
10000502:	4770      	bx	lr
10000504:	d0000000 	.word	0xd0000000
10000508:	ffffffff 	.word	0xffffffff

1000050c <y64>:
1000050c:	2b00      	cmp	r3, #0
1000050e:	d000      	beq.n	10000512 <y64+0x6>
10000510:	e0bd      	b.n	1000068e <y64_x48>
10000512:	0c13      	lsrs	r3, r2, #16
10000514:	d126      	bne.n	10000564 <y64_x32>
10000516:	2a00      	cmp	r2, #0
10000518:	d0e7      	beq.n	100004ea <udiv0>
1000051a:	b480      	push	{r7}
1000051c:	4f10      	ldr	r7, [pc, #64]	; (10000560 <y64+0x54>)
1000051e:	6639      	str	r1, [r7, #96]	; 0x60
10000520:	667a      	str	r2, [r7, #100]	; 0x64
10000522:	e7ff      	b.n	10000524 <y64+0x18>
10000524:	e7ff      	b.n	10000526 <y64+0x1a>
10000526:	b430      	push	{r4, r5}
10000528:	0c04      	lsrs	r4, r0, #16
1000052a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
1000052c:	6f39      	ldr	r1, [r7, #112]	; 0x70
1000052e:	041b      	lsls	r3, r3, #16
10000530:	4323      	orrs	r3, r4
10000532:	663b      	str	r3, [r7, #96]	; 0x60
10000534:	e7ff      	b.n	10000536 <y64+0x2a>
10000536:	e7ff      	b.n	10000538 <y64+0x2c>
10000538:	e7ff      	b.n	1000053a <y64+0x2e>
1000053a:	46c0      	nop			; (mov r8, r8)
1000053c:	b284      	uxth	r4, r0
1000053e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
10000540:	6f3d      	ldr	r5, [r7, #112]	; 0x70
10000542:	041b      	lsls	r3, r3, #16
10000544:	4323      	orrs	r3, r4
10000546:	663b      	str	r3, [r7, #96]	; 0x60
10000548:	e7ff      	b.n	1000054a <y64+0x3e>
1000054a:	e7ff      	b.n	1000054c <y64+0x40>
1000054c:	46c0      	nop			; (mov r8, r8)
1000054e:	2300      	movs	r3, #0
10000550:	042c      	lsls	r4, r5, #16
10000552:	0c2d      	lsrs	r5, r5, #16
10000554:	6f7a      	ldr	r2, [r7, #116]	; 0x74
10000556:	6f38      	ldr	r0, [r7, #112]	; 0x70
10000558:	1900      	adds	r0, r0, r4
1000055a:	4169      	adcs	r1, r5
1000055c:	bcb0      	pop	{r4, r5, r7}
1000055e:	4770      	bx	lr
10000560:	d0000000 	.word	0xd0000000

10000564 <y64_x32>:
10000564:	b5f0      	push	{r4, r5, r6, r7, lr}
10000566:	4694      	mov	ip, r2
10000568:	2500      	movs	r5, #0
1000056a:	0e14      	lsrs	r4, r2, #24
1000056c:	d101      	bne.n	10000572 <y64_x32+0xe>
1000056e:	0212      	lsls	r2, r2, #8
10000570:	3508      	adds	r5, #8
10000572:	0f14      	lsrs	r4, r2, #28
10000574:	d101      	bne.n	1000057a <y64_x32+0x16>
10000576:	0112      	lsls	r2, r2, #4
10000578:	3504      	adds	r5, #4
1000057a:	0f94      	lsrs	r4, r2, #30
1000057c:	d101      	bne.n	10000582 <y64_x32+0x1e>
1000057e:	0092      	lsls	r2, r2, #2
10000580:	3502      	adds	r5, #2
10000582:	0fd4      	lsrs	r4, r2, #31
10000584:	d101      	bne.n	1000058a <y64_x32+0x26>
10000586:	0052      	lsls	r2, r2, #1
10000588:	3501      	adds	r5, #1
1000058a:	0bd4      	lsrs	r4, r2, #15
1000058c:	3401      	adds	r4, #1
1000058e:	4f25      	ldr	r7, [pc, #148]	; (10000624 <y64_x32+0xc0>)
10000590:	667c      	str	r4, [r7, #100]	; 0x64
10000592:	4c25      	ldr	r4, [pc, #148]	; (10000628 <y64_x32+0xc4>)
10000594:	663c      	str	r4, [r7, #96]	; 0x60
10000596:	0c0e      	lsrs	r6, r1, #16
10000598:	b293      	uxth	r3, r2
1000059a:	e7ff      	b.n	1000059c <y64_x32+0x38>
1000059c:	e7ff      	b.n	1000059e <y64_x32+0x3a>
1000059e:	e7ff      	b.n	100005a0 <y64_x32+0x3c>
100005a0:	6f3c      	ldr	r4, [r7, #112]	; 0x70
100005a2:	4366      	muls	r6, r4
100005a4:	0c36      	lsrs	r6, r6, #16
100005a6:	0377      	lsls	r7, r6, #13
100005a8:	46be      	mov	lr, r7
100005aa:	4373      	muls	r3, r6
100005ac:	0bdf      	lsrs	r7, r3, #15
100005ae:	045b      	lsls	r3, r3, #17
100005b0:	1ac0      	subs	r0, r0, r3
100005b2:	41b9      	sbcs	r1, r7
100005b4:	0c13      	lsrs	r3, r2, #16
100005b6:	4373      	muls	r3, r6
100005b8:	18db      	adds	r3, r3, r3
100005ba:	1ac9      	subs	r1, r1, r3
100005bc:	08ce      	lsrs	r6, r1, #3
100005be:	4366      	muls	r6, r4
100005c0:	0c36      	lsrs	r6, r6, #16
100005c2:	44b6      	add	lr, r6
100005c4:	b293      	uxth	r3, r2
100005c6:	4373      	muls	r3, r6
100005c8:	0f1f      	lsrs	r7, r3, #28
100005ca:	011b      	lsls	r3, r3, #4
100005cc:	1ac0      	subs	r0, r0, r3
100005ce:	41b9      	sbcs	r1, r7
100005d0:	0c13      	lsrs	r3, r2, #16
100005d2:	4373      	muls	r3, r6
100005d4:	0b1f      	lsrs	r7, r3, #12
100005d6:	051b      	lsls	r3, r3, #20
100005d8:	1ac0      	subs	r0, r0, r3
100005da:	41b9      	sbcs	r1, r7
100005dc:	0d86      	lsrs	r6, r0, #22
100005de:	028f      	lsls	r7, r1, #10
100005e0:	433e      	orrs	r6, r7
100005e2:	4366      	muls	r6, r4
100005e4:	0c36      	lsrs	r6, r6, #16
100005e6:	2d09      	cmp	r5, #9
100005e8:	db24      	blt.n	10000634 <last0>
100005ea:	0a52      	lsrs	r2, r2, #9
100005ec:	4372      	muls	r2, r6
100005ee:	1a80      	subs	r0, r0, r2
100005f0:	0377      	lsls	r7, r6, #13
100005f2:	0a46      	lsrs	r6, r0, #9
100005f4:	4366      	muls	r6, r4
100005f6:	0c36      	lsrs	r6, r6, #16
100005f8:	2316      	movs	r3, #22
100005fa:	1b5b      	subs	r3, r3, r5
100005fc:	40de      	lsrs	r6, r3
100005fe:	40df      	lsrs	r7, r3
10000600:	19bf      	adds	r7, r7, r6
10000602:	4664      	mov	r4, ip
10000604:	4366      	muls	r6, r4
10000606:	1b82      	subs	r2, r0, r6
10000608:	4670      	mov	r0, lr
1000060a:	3504      	adds	r5, #4
1000060c:	3306      	adds	r3, #6
1000060e:	0001      	movs	r1, r0
10000610:	40d9      	lsrs	r1, r3
10000612:	40a8      	lsls	r0, r5
10000614:	19c0      	adds	r0, r0, r7
10000616:	d300      	bcc.n	1000061a <y64_x32+0xb6>
10000618:	3101      	adds	r1, #1
1000061a:	42a2      	cmp	r2, r4
1000061c:	d206      	bcs.n	1000062c <y64_x32+0xc8>
1000061e:	2300      	movs	r3, #0
10000620:	bdf0      	pop	{r4, r5, r6, r7, pc}
10000622:	0000      	.short	0x0000
10000624:	d0000000 	.word	0xd0000000
10000628:	ffffffff 	.word	0xffffffff
1000062c:	1b12      	subs	r2, r2, r4
1000062e:	3001      	adds	r0, #1
10000630:	d3f3      	bcc.n	1000061a <y64_x32+0xb6>
10000632:	e7f1      	b.n	10000618 <y64_x32+0xb4>

10000634 <last0>:
10000634:	2709      	movs	r7, #9
10000636:	1b7f      	subs	r7, r7, r5
10000638:	40fe      	lsrs	r6, r7
1000063a:	4664      	mov	r4, ip
1000063c:	b2a2      	uxth	r2, r4
1000063e:	4372      	muls	r2, r6
10000640:	1a80      	subs	r0, r0, r2
10000642:	d200      	bcs.n	10000646 <last0+0x12>
10000644:	3901      	subs	r1, #1
10000646:	0c22      	lsrs	r2, r4, #16
10000648:	4372      	muls	r2, r6
1000064a:	0c13      	lsrs	r3, r2, #16
1000064c:	0412      	lsls	r2, r2, #16
1000064e:	1a82      	subs	r2, r0, r2
10000650:	4199      	sbcs	r1, r3
10000652:	000b      	movs	r3, r1
10000654:	4670      	mov	r0, lr
10000656:	3504      	adds	r5, #4
10000658:	3713      	adds	r7, #19
1000065a:	0001      	movs	r1, r0
1000065c:	40f9      	lsrs	r1, r7
1000065e:	40a8      	lsls	r0, r5
10000660:	1980      	adds	r0, r0, r6
10000662:	d300      	bcc.n	10000666 <last0+0x32>
10000664:	3101      	adds	r1, #1
10000666:	2b00      	cmp	r3, #0
10000668:	d102      	bne.n	10000670 <last0+0x3c>
1000066a:	42a2      	cmp	r2, r4
1000066c:	d20a      	bcs.n	10000684 <last0+0x50>
1000066e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10000670:	3001      	adds	r0, #1
10000672:	d300      	bcc.n	10000676 <last0+0x42>
10000674:	3101      	adds	r1, #1
10000676:	1b12      	subs	r2, r2, r4
10000678:	d2fa      	bcs.n	10000670 <last0+0x3c>
1000067a:	3b01      	subs	r3, #1
1000067c:	d1f8      	bne.n	10000670 <last0+0x3c>
1000067e:	42a2      	cmp	r2, r4
10000680:	d200      	bcs.n	10000684 <last0+0x50>
10000682:	bdf0      	pop	{r4, r5, r6, r7, pc}
10000684:	3001      	adds	r0, #1
10000686:	d300      	bcc.n	1000068a <last0+0x56>
10000688:	3101      	adds	r1, #1
1000068a:	1b12      	subs	r2, r2, r4
1000068c:	e7f7      	b.n	1000067e <last0+0x4a>

1000068e <y64_x48>:
1000068e:	b5f0      	push	{r4, r5, r6, r7, lr}
10000690:	0c1c      	lsrs	r4, r3, #16
10000692:	d000      	beq.n	10000696 <y64_x48+0x8>
10000694:	e080      	b.n	10000798 <y64_x64>
10000696:	b40c      	push	{r2, r3}
10000698:	2500      	movs	r5, #0
1000069a:	0a1c      	lsrs	r4, r3, #8
1000069c:	d104      	bne.n	100006a8 <y64_x48+0x1a>
1000069e:	021b      	lsls	r3, r3, #8
100006a0:	0e16      	lsrs	r6, r2, #24
100006a2:	4333      	orrs	r3, r6
100006a4:	0212      	lsls	r2, r2, #8
100006a6:	3508      	adds	r5, #8
100006a8:	0b1c      	lsrs	r4, r3, #12
100006aa:	d104      	bne.n	100006b6 <y64_x48+0x28>
100006ac:	011b      	lsls	r3, r3, #4
100006ae:	0f16      	lsrs	r6, r2, #28
100006b0:	4333      	orrs	r3, r6
100006b2:	0112      	lsls	r2, r2, #4
100006b4:	3504      	adds	r5, #4
100006b6:	0b9c      	lsrs	r4, r3, #14
100006b8:	d104      	bne.n	100006c4 <y64_x48+0x36>
100006ba:	009b      	lsls	r3, r3, #2
100006bc:	0f96      	lsrs	r6, r2, #30
100006be:	4333      	orrs	r3, r6
100006c0:	0092      	lsls	r2, r2, #2
100006c2:	3502      	adds	r5, #2
100006c4:	0bdc      	lsrs	r4, r3, #15
100006c6:	d102      	bne.n	100006ce <y64_x48+0x40>
100006c8:	1892      	adds	r2, r2, r2
100006ca:	415b      	adcs	r3, r3
100006cc:	3501      	adds	r5, #1
100006ce:	001c      	movs	r4, r3
100006d0:	1897      	adds	r7, r2, r2
100006d2:	4164      	adcs	r4, r4
100006d4:	3401      	adds	r4, #1
100006d6:	4f46      	ldr	r7, [pc, #280]	; (100007f0 <y64_x64+0x58>)
100006d8:	667c      	str	r4, [r7, #100]	; 0x64
100006da:	4c46      	ldr	r4, [pc, #280]	; (100007f4 <y64_x64+0x5c>)
100006dc:	663c      	str	r4, [r7, #96]	; 0x60
100006de:	0c0e      	lsrs	r6, r1, #16
100006e0:	e7ff      	b.n	100006e2 <y64_x48+0x54>
100006e2:	e7ff      	b.n	100006e4 <y64_x48+0x56>
100006e4:	e7ff      	b.n	100006e6 <y64_x48+0x58>
100006e6:	46c0      	nop			; (mov r8, r8)
100006e8:	6f3c      	ldr	r4, [r7, #112]	; 0x70
100006ea:	4366      	muls	r6, r4
100006ec:	0c36      	lsrs	r6, r6, #16
100006ee:	0377      	lsls	r7, r6, #13
100006f0:	46be      	mov	lr, r7
100006f2:	b297      	uxth	r7, r2
100006f4:	4377      	muls	r7, r6
100006f6:	1bc0      	subs	r0, r0, r7
100006f8:	d200      	bcs.n	100006fc <y64_x48+0x6e>
100006fa:	3901      	subs	r1, #1
100006fc:	1bc0      	subs	r0, r0, r7
100006fe:	d200      	bcs.n	10000702 <y64_x48+0x74>
10000700:	3901      	subs	r1, #1
10000702:	b29f      	uxth	r7, r3
10000704:	4377      	muls	r7, r6
10000706:	1bc9      	subs	r1, r1, r7
10000708:	1bc9      	subs	r1, r1, r7
1000070a:	0c17      	lsrs	r7, r2, #16
1000070c:	4377      	muls	r7, r6
1000070e:	047e      	lsls	r6, r7, #17
10000710:	0bff      	lsrs	r7, r7, #15
10000712:	1b80      	subs	r0, r0, r6
10000714:	41b9      	sbcs	r1, r7
10000716:	08ce      	lsrs	r6, r1, #3
10000718:	4366      	muls	r6, r4
1000071a:	0c36      	lsrs	r6, r6, #16
1000071c:	2d0c      	cmp	r5, #12
1000071e:	db33      	blt.n	10000788 <last1>
10000720:	44b6      	add	lr, r6
10000722:	0b12      	lsrs	r2, r2, #12
10000724:	051f      	lsls	r7, r3, #20
10000726:	433a      	orrs	r2, r7
10000728:	0b1b      	lsrs	r3, r3, #12
1000072a:	b297      	uxth	r7, r2
1000072c:	4377      	muls	r7, r6
1000072e:	1bc0      	subs	r0, r0, r7
10000730:	d200      	bcs.n	10000734 <y64_x48+0xa6>
10000732:	3901      	subs	r1, #1
10000734:	b29f      	uxth	r7, r3
10000736:	4377      	muls	r7, r6
10000738:	1bc9      	subs	r1, r1, r7
1000073a:	0c17      	lsrs	r7, r2, #16
1000073c:	4377      	muls	r7, r6
1000073e:	043e      	lsls	r6, r7, #16
10000740:	0c3f      	lsrs	r7, r7, #16
10000742:	1b80      	subs	r0, r0, r6
10000744:	41b9      	sbcs	r1, r7
10000746:	0d86      	lsrs	r6, r0, #22
10000748:	028f      	lsls	r7, r1, #10
1000074a:	433e      	orrs	r6, r7
1000074c:	4366      	muls	r6, r4
1000074e:	2729      	movs	r7, #41	; 0x29
10000750:	1b7f      	subs	r7, r7, r5
10000752:	40fe      	lsrs	r6, r7
10000754:	3d0c      	subs	r5, #12
10000756:	4677      	mov	r7, lr
10000758:	40af      	lsls	r7, r5
1000075a:	19bf      	adds	r7, r7, r6
1000075c:	bc30      	pop	{r4, r5}
1000075e:	b2a2      	uxth	r2, r4
10000760:	b2ab      	uxth	r3, r5
10000762:	4372      	muls	r2, r6
10000764:	4373      	muls	r3, r6
10000766:	1a80      	subs	r0, r0, r2
10000768:	4199      	sbcs	r1, r3
1000076a:	0c22      	lsrs	r2, r4, #16
1000076c:	4372      	muls	r2, r6
1000076e:	0c13      	lsrs	r3, r2, #16
10000770:	0412      	lsls	r2, r2, #16
10000772:	1a80      	subs	r0, r0, r2
10000774:	4199      	sbcs	r1, r3
10000776:	0002      	movs	r2, r0
10000778:	000b      	movs	r3, r1
1000077a:	3701      	adds	r7, #1
1000077c:	1b00      	subs	r0, r0, r4
1000077e:	41a9      	sbcs	r1, r5
10000780:	d2f9      	bcs.n	10000776 <y64_x48+0xe8>
10000782:	1e78      	subs	r0, r7, #1
10000784:	2100      	movs	r1, #0
10000786:	bdf0      	pop	{r4, r5, r6, r7, pc}

10000788 <last1>:
10000788:	270c      	movs	r7, #12
1000078a:	1b7f      	subs	r7, r7, r5
1000078c:	40fe      	lsrs	r6, r7
1000078e:	4677      	mov	r7, lr
10000790:	0b7f      	lsrs	r7, r7, #13
10000792:	40af      	lsls	r7, r5
10000794:	19ff      	adds	r7, r7, r7
10000796:	e7e0      	b.n	1000075a <y64_x48+0xcc>

10000798 <y64_x64>:
10000798:	2400      	movs	r4, #0
1000079a:	1c5d      	adds	r5, r3, #1
1000079c:	d007      	beq.n	100007ae <y64_x64+0x16>
1000079e:	4f14      	ldr	r7, [pc, #80]	; (100007f0 <y64_x64+0x58>)
100007a0:	667d      	str	r5, [r7, #100]	; 0x64
100007a2:	6639      	str	r1, [r7, #96]	; 0x60
100007a4:	e7ff      	b.n	100007a6 <y64_x64+0xe>
100007a6:	e7ff      	b.n	100007a8 <y64_x64+0x10>
100007a8:	e7ff      	b.n	100007aa <y64_x64+0x12>
100007aa:	e7ff      	b.n	100007ac <y64_x64+0x14>
100007ac:	6f3c      	ldr	r4, [r7, #112]	; 0x70
100007ae:	b295      	uxth	r5, r2
100007b0:	b29e      	uxth	r6, r3
100007b2:	4365      	muls	r5, r4
100007b4:	4366      	muls	r6, r4
100007b6:	1b40      	subs	r0, r0, r5
100007b8:	41b1      	sbcs	r1, r6
100007ba:	0c15      	lsrs	r5, r2, #16
100007bc:	0c1e      	lsrs	r6, r3, #16
100007be:	4365      	muls	r5, r4
100007c0:	4366      	muls	r6, r4
100007c2:	0436      	lsls	r6, r6, #16
100007c4:	0c2f      	lsrs	r7, r5, #16
100007c6:	433e      	orrs	r6, r7
100007c8:	042d      	lsls	r5, r5, #16
100007ca:	1b40      	subs	r0, r0, r5
100007cc:	41b1      	sbcs	r1, r6
100007ce:	4299      	cmp	r1, r3
100007d0:	d204      	bcs.n	100007dc <y64_x64+0x44>
100007d2:	0002      	movs	r2, r0
100007d4:	000b      	movs	r3, r1
100007d6:	0020      	movs	r0, r4
100007d8:	2100      	movs	r1, #0
100007da:	bdf0      	pop	{r4, r5, r6, r7, pc}
100007dc:	d101      	bne.n	100007e2 <y64_x64+0x4a>
100007de:	4290      	cmp	r0, r2
100007e0:	d3f7      	bcc.n	100007d2 <y64_x64+0x3a>
100007e2:	1a80      	subs	r0, r0, r2
100007e4:	4199      	sbcs	r1, r3
100007e6:	3401      	adds	r4, #1
100007e8:	4299      	cmp	r1, r3
100007ea:	d3f2      	bcc.n	100007d2 <y64_x64+0x3a>
100007ec:	e7f6      	b.n	100007dc <y64_x64+0x44>
100007ee:	0000      	.short	0x0000
100007f0:	d0000000 	.word	0xd0000000
100007f4:	ffffffff 	.word	0xffffffff

100007f8 <hw_divider_save_state>:
100007f8:	b530      	push	{r4, r5, lr}
100007fa:	4d05      	ldr	r5, [pc, #20]	; (10000810 <hw_divider_save_state+0x18>)
100007fc:	6fac      	ldr	r4, [r5, #120]	; 0x78
100007fe:	0864      	lsrs	r4, r4, #1
10000800:	d3fd      	bcc.n	100007fe <hw_divider_save_state+0x6>
10000802:	6e29      	ldr	r1, [r5, #96]	; 0x60
10000804:	6e6a      	ldr	r2, [r5, #100]	; 0x64
10000806:	6f6b      	ldr	r3, [r5, #116]	; 0x74
10000808:	6f2c      	ldr	r4, [r5, #112]	; 0x70
1000080a:	c01e      	stmia	r0!, {r1, r2, r3, r4}
1000080c:	bd30      	pop	{r4, r5, pc}
1000080e:	0000      	.short	0x0000
10000810:	d0000000 	.word	0xd0000000

10000814 <hw_divider_restore_state>:
10000814:	b530      	push	{r4, r5, lr}
10000816:	4d03      	ldr	r5, [pc, #12]	; (10000824 <hw_divider_restore_state+0x10>)
10000818:	c81e      	ldmia	r0!, {r1, r2, r3, r4}
1000081a:	6629      	str	r1, [r5, #96]	; 0x60
1000081c:	666a      	str	r2, [r5, #100]	; 0x64
1000081e:	676b      	str	r3, [r5, #116]	; 0x74
10000820:	672c      	str	r4, [r5, #112]	; 0x70
10000822:	bd30      	pop	{r4, r5, pc}
10000824:	d0000000 	.word	0xd0000000

10000828 <__wrap___aeabi_drsub>:
10000828:	4048      	eors	r0, r1
1000082a:	4041      	eors	r1, r0
1000082c:	4048      	eors	r0, r1

1000082e <__wrap___aeabi_dsub>:
1000082e:	b418      	push	{r3, r4}
10000830:	4b11      	ldr	r3, [pc, #68]	; (10000878 <__wrap___aeabi_dmul+0x14>)
10000832:	685b      	ldr	r3, [r3, #4]
10000834:	46fc      	mov	ip, pc
10000836:	9301      	str	r3, [sp, #4]
10000838:	bd08      	pop	{r3, pc}
1000083a:	df04      	.short	0xdf04
1000083c:	10000a07 	.word	0x10000a07

10000840 <__wrap___aeabi_dadd>:
10000840:	b418      	push	{r3, r4}
10000842:	4b0d      	ldr	r3, [pc, #52]	; (10000878 <__wrap___aeabi_dmul+0x14>)
10000844:	681b      	ldr	r3, [r3, #0]
10000846:	46fc      	mov	ip, pc
10000848:	9301      	str	r3, [sp, #4]
1000084a:	bd08      	pop	{r3, pc}
1000084c:	0a11df00 	.word	0x0a11df00
10000850:	1000      	.short	0x1000

10000852 <__wrap___aeabi_ddiv>:
10000852:	b418      	push	{r3, r4}
10000854:	4b08      	ldr	r3, [pc, #32]	; (10000878 <__wrap___aeabi_dmul+0x14>)
10000856:	68db      	ldr	r3, [r3, #12]
10000858:	46fc      	mov	ip, pc
1000085a:	9301      	str	r3, [sp, #4]
1000085c:	bd08      	pop	{r3, pc}
1000085e:	df0c      	.short	0xdf0c
10000860:	10000cc9 	.word	0x10000cc9

10000864 <__wrap___aeabi_dmul>:
10000864:	b418      	push	{r3, r4}
10000866:	4b04      	ldr	r3, [pc, #16]	; (10000878 <__wrap___aeabi_dmul+0x14>)
10000868:	689b      	ldr	r3, [r3, #8]
1000086a:	46fc      	mov	ip, pc
1000086c:	9301      	str	r3, [sp, #4]
1000086e:	bd08      	pop	{r3, pc}
10000870:	0b6ddf08 	.word	0x0b6ddf08
10000874:	00001000 	.word	0x00001000
10000878:	20008eb0 	.word	0x20008eb0

1000087c <__wrap___aeabi_cdrcmple>:
1000087c:	b5ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7, lr}
1000087e:	4050      	eors	r0, r2
10000880:	4042      	eors	r2, r0
10000882:	4050      	eors	r0, r2
10000884:	4059      	eors	r1, r3
10000886:	404b      	eors	r3, r1
10000888:	4059      	eors	r1, r3
1000088a:	e000      	b.n	1000088e <__aeabi_dfcmple_guts>

1000088c <__wrap___aeabi_cdcmpeq>:
1000088c:	b5ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7, lr}

1000088e <__aeabi_dfcmple_guts>:
1000088e:	4f15      	ldr	r7, [pc, #84]	; (100008e4 <__aeabi_dfcmple_guts+0x56>)
10000890:	004c      	lsls	r4, r1, #1
10000892:	0d64      	lsrs	r4, r4, #21
10000894:	d003      	beq.n	1000089e <__aeabi_dfcmple_guts+0x10>
10000896:	42bc      	cmp	r4, r7
10000898:	d104      	bne.n	100008a4 <__aeabi_dfcmple_guts+0x16>
1000089a:	030c      	lsls	r4, r1, #12
1000089c:	d814      	bhi.n	100008c8 <__aeabi_dfcmple_guts+0x3a>
1000089e:	2000      	movs	r0, #0
100008a0:	0d09      	lsrs	r1, r1, #20
100008a2:	0509      	lsls	r1, r1, #20
100008a4:	005c      	lsls	r4, r3, #1
100008a6:	0d64      	lsrs	r4, r4, #21
100008a8:	d003      	beq.n	100008b2 <__aeabi_dfcmple_guts+0x24>
100008aa:	42bc      	cmp	r4, r7
100008ac:	d104      	bne.n	100008b8 <__aeabi_dfcmple_guts+0x2a>
100008ae:	031c      	lsls	r4, r3, #12
100008b0:	d80a      	bhi.n	100008c8 <__aeabi_dfcmple_guts+0x3a>
100008b2:	2200      	movs	r2, #0
100008b4:	0d1b      	lsrs	r3, r3, #20
100008b6:	051b      	lsls	r3, r3, #20
100008b8:	2601      	movs	r6, #1
100008ba:	404b      	eors	r3, r1
100008bc:	d409      	bmi.n	100008d2 <__aeabi_dfcmple_guts+0x44>
100008be:	404b      	eors	r3, r1
100008c0:	d503      	bpl.n	100008ca <__aeabi_dfcmple_guts+0x3c>
100008c2:	428b      	cmp	r3, r1
100008c4:	d100      	bne.n	100008c8 <__aeabi_dfcmple_guts+0x3a>
100008c6:	4282      	cmp	r2, r0
100008c8:	bdff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7, pc}
100008ca:	4299      	cmp	r1, r3
100008cc:	d1fc      	bne.n	100008c8 <__aeabi_dfcmple_guts+0x3a>
100008ce:	4290      	cmp	r0, r2
100008d0:	bdff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7, pc}
100008d2:	430b      	orrs	r3, r1
100008d4:	18db      	adds	r3, r3, r3
100008d6:	4303      	orrs	r3, r0
100008d8:	4313      	orrs	r3, r2
100008da:	d0f5      	beq.n	100008c8 <__aeabi_dfcmple_guts+0x3a>
100008dc:	43c9      	mvns	r1, r1
100008de:	1849      	adds	r1, r1, r1
100008e0:	bdff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7, pc}
100008e2:	0000      	.short	0x0000
100008e4:	000007ff 	.word	0x000007ff

100008e8 <__wrap___aeabi_dcmplt>:
100008e8:	b500      	push	{lr}
100008ea:	f7ff ffcf 	bl	1000088c <__wrap___aeabi_cdcmpeq>
100008ee:	4180      	sbcs	r0, r0
100008f0:	bd00      	pop	{pc}
100008f2:	46c0      	nop			; (mov r8, r8)

100008f4 <__wrap___aeabi_dcmple>:
100008f4:	b500      	push	{lr}
100008f6:	f7ff ffc9 	bl	1000088c <__wrap___aeabi_cdcmpeq>
100008fa:	d901      	bls.n	10000900 <__wrap___aeabi_dcmple+0xc>
100008fc:	2000      	movs	r0, #0
100008fe:	bd00      	pop	{pc}
10000900:	2001      	movs	r0, #1
10000902:	bd00      	pop	{pc}

10000904 <__wrap___aeabi_dcmpge>:
10000904:	b500      	push	{lr}
10000906:	f7ff ffb9 	bl	1000087c <__wrap___aeabi_cdrcmple>
1000090a:	d901      	bls.n	10000910 <__wrap___aeabi_dcmpge+0xc>
1000090c:	2000      	movs	r0, #0
1000090e:	bd00      	pop	{pc}
10000910:	2001      	movs	r0, #1
10000912:	bd00      	pop	{pc}

10000914 <__wrap___aeabi_dcmpgt>:
10000914:	b500      	push	{lr}
10000916:	f7ff ffb1 	bl	1000087c <__wrap___aeabi_cdrcmple>
1000091a:	4180      	sbcs	r0, r0
1000091c:	bd00      	pop	{pc}

1000091e <__wrap___aeabi_dcmpun>:
1000091e:	2001      	movs	r0, #1
10000920:	0540      	lsls	r0, r0, #21
10000922:	004a      	lsls	r2, r1, #1
10000924:	1812      	adds	r2, r2, r0
10000926:	d804      	bhi.n	10000932 <__wrap___aeabi_dcmpun+0x14>
10000928:	005a      	lsls	r2, r3, #1
1000092a:	1812      	adds	r2, r2, r0
1000092c:	d801      	bhi.n	10000932 <__wrap___aeabi_dcmpun+0x14>
1000092e:	2000      	movs	r0, #0
10000930:	4770      	bx	lr
10000932:	2001      	movs	r0, #1
10000934:	4770      	bx	lr
10000936:	2000      	movs	r0, #0
10000938:	4770      	bx	lr
	...

1000093c <__wrap___aeabi_ui2d>:
1000093c:	2100      	movs	r1, #0
1000093e:	2800      	cmp	r0, #0
10000940:	d105      	bne.n	1000094e <__wrap___aeabi_i2d+0xa>
10000942:	4770      	bx	lr

10000944 <__wrap___aeabi_i2d>:
10000944:	17c1      	asrs	r1, r0, #31
10000946:	4048      	eors	r0, r1
10000948:	1a40      	subs	r0, r0, r1
1000094a:	d0fa      	beq.n	10000942 <__wrap___aeabi_ui2d+0x6>
1000094c:	07c9      	lsls	r1, r1, #31
1000094e:	b513      	push	{r0, r1, r4, lr}
10000950:	4b06      	ldr	r3, [pc, #24]	; (1000096c <__wrap___aeabi_i2d+0x28>)
10000952:	681b      	ldr	r3, [r3, #0]
10000954:	4798      	blx	r3
10000956:	bc0c      	pop	{r2, r3}
10000958:	1c44      	adds	r4, r0, #1
1000095a:	40a2      	lsls	r2, r4
1000095c:	0510      	lsls	r0, r2, #20
1000095e:	0b12      	lsrs	r2, r2, #12
10000960:	4903      	ldr	r1, [pc, #12]	; (10000970 <__wrap___aeabi_i2d+0x2c>)
10000962:	1b09      	subs	r1, r1, r4
10000964:	0509      	lsls	r1, r1, #20
10000966:	4319      	orrs	r1, r3
10000968:	4311      	orrs	r1, r2
1000096a:	bd10      	pop	{r4, pc}
1000096c:	20017304 	.word	0x20017304
10000970:	0000041f 	.word	0x0000041f

10000974 <__wrap___aeabi_d2iz>:
10000974:	b510      	push	{r4, lr}
10000976:	004c      	lsls	r4, r1, #1
10000978:	0d62      	lsrs	r2, r4, #21
1000097a:	2380      	movs	r3, #128	; 0x80
1000097c:	18d2      	adds	r2, r2, r3
1000097e:	00db      	lsls	r3, r3, #3
10000980:	1ad2      	subs	r2, r2, r3
10000982:	055b      	lsls	r3, r3, #21
10000984:	2a7e      	cmp	r2, #126	; 0x7e
10000986:	dd10      	ble.n	100009aa <__wrap___aeabi_d2iz+0x36>
10000988:	3a9e      	subs	r2, #158	; 0x9e
1000098a:	da13      	bge.n	100009b4 <__wrap___aeabi_d2iz+0x40>
1000098c:	17cc      	asrs	r4, r1, #31
1000098e:	0309      	lsls	r1, r1, #12
10000990:	0849      	lsrs	r1, r1, #1
10000992:	4319      	orrs	r1, r3
10000994:	4252      	negs	r2, r2
10000996:	40d1      	lsrs	r1, r2
10000998:	0064      	lsls	r4, r4, #1
1000099a:	3401      	adds	r4, #1
1000099c:	3215      	adds	r2, #21
1000099e:	2a20      	cmp	r2, #32
100009a0:	da05      	bge.n	100009ae <__wrap___aeabi_d2iz+0x3a>
100009a2:	40d0      	lsrs	r0, r2
100009a4:	4308      	orrs	r0, r1
100009a6:	4360      	muls	r0, r4
100009a8:	bd10      	pop	{r4, pc}
100009aa:	2000      	movs	r0, #0
100009ac:	bd10      	pop	{r4, pc}
100009ae:	4608      	mov	r0, r1
100009b0:	4360      	muls	r0, r4
100009b2:	bd10      	pop	{r4, pc}
100009b4:	0fc8      	lsrs	r0, r1, #31
100009b6:	18c0      	adds	r0, r0, r3
100009b8:	3801      	subs	r0, #1
100009ba:	bd10      	pop	{r4, pc}

100009bc <__wrap___aeabi_d2uiz>:
100009bc:	b418      	push	{r3, r4}
100009be:	4b04      	ldr	r3, [pc, #16]	; (100009d0 <__wrap___aeabi_d2uiz+0x14>)
100009c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100009c2:	46fc      	mov	ip, pc
100009c4:	9301      	str	r3, [sp, #4]
100009c6:	bd08      	pop	{r3, pc}
100009c8:	0ef5df24 	.word	0x0ef5df24
100009cc:	00001000 	.word	0x00001000
100009d0:	20008eb0 	.word	0x20008eb0

100009d4 <double_table_shim_on_use_helper>:
100009d4:	b507      	push	{r0, r1, r2, lr}
100009d6:	4660      	mov	r0, ip
100009d8:	8801      	ldrh	r1, [r0, #0]
100009da:	0a0a      	lsrs	r2, r1, #8
100009dc:	3002      	adds	r0, #2
100009de:	2adf      	cmp	r2, #223	; 0xdf
100009e0:	d1fa      	bne.n	100009d8 <double_table_shim_on_use_helper+0x4>
100009e2:	b2c9      	uxtb	r1, r1
100009e4:	0882      	lsrs	r2, r0, #2
100009e6:	d304      	bcc.n	100009f2 <double_table_shim_on_use_helper+0x1e>
100009e8:	8802      	ldrh	r2, [r0, #0]
100009ea:	8840      	ldrh	r0, [r0, #2]
100009ec:	0400      	lsls	r0, r0, #16
100009ee:	4310      	orrs	r0, r2
100009f0:	e000      	b.n	100009f4 <double_table_shim_on_use_helper+0x20>
100009f2:	6800      	ldr	r0, [r0, #0]
100009f4:	4a01      	ldr	r2, [pc, #4]	; (100009fc <double_table_shim_on_use_helper+0x28>)
100009f6:	5050      	str	r0, [r2, r1]
100009f8:	9003      	str	r0, [sp, #12]
100009fa:	bd07      	pop	{r0, r1, r2, pc}
100009fc:	20008eb0 	.word	0x20008eb0

10000a00 <drsub_shim>:
10000a00:	b40f      	push	{r0, r1, r2, r3}
10000a02:	bc03      	pop	{r0, r1}
10000a04:	bc0c      	pop	{r2, r3}

10000a06 <dsub_shim>:
10000a06:	b5f0      	push	{r4, r5, r6, r7, lr}
10000a08:	2401      	movs	r4, #1
10000a0a:	07e4      	lsls	r4, r4, #31
10000a0c:	4063      	eors	r3, r4
10000a0e:	e000      	b.n	10000a12 <da_entry>

10000a10 <dadd_shim>:
10000a10:	b5f0      	push	{r4, r5, r6, r7, lr}

10000a12 <da_entry>:
10000a12:	0d0c      	lsrs	r4, r1, #20
10000a14:	0fcf      	lsrs	r7, r1, #31
10000a16:	1e66      	subs	r6, r4, #1
10000a18:	0536      	lsls	r6, r6, #20
10000a1a:	1b89      	subs	r1, r1, r6
10000a1c:	0564      	lsls	r4, r4, #21
10000a1e:	d303      	bcc.n	10000a28 <l7_1>
10000a20:	43c9      	mvns	r1, r1
10000a22:	4240      	negs	r0, r0
10000a24:	d300      	bcc.n	10000a28 <l7_1>
10000a26:	3101      	adds	r1, #1

10000a28 <l7_1>:
10000a28:	0d64      	lsrs	r4, r4, #21
10000a2a:	d003      	beq.n	10000a34 <l7_2>
10000a2c:	1c66      	adds	r6, r4, #1
10000a2e:	0af6      	lsrs	r6, r6, #11
10000a30:	d007      	beq.n	10000a42 <l7_3>
10000a32:	1be4      	subs	r4, r4, r7

10000a34 <l7_2>:
10000a34:	2000      	movs	r0, #0
10000a36:	007f      	lsls	r7, r7, #1
10000a38:	1c79      	adds	r1, r7, #1
10000a3a:	0789      	lsls	r1, r1, #30
10000a3c:	1289      	asrs	r1, r1, #10
10000a3e:	3c80      	subs	r4, #128	; 0x80
10000a40:	0324      	lsls	r4, r4, #12

10000a42 <l7_3>:
10000a42:	0d1d      	lsrs	r5, r3, #20
10000a44:	0fdf      	lsrs	r7, r3, #31
10000a46:	1e6e      	subs	r6, r5, #1
10000a48:	0536      	lsls	r6, r6, #20
10000a4a:	1b9b      	subs	r3, r3, r6
10000a4c:	056d      	lsls	r5, r5, #21
10000a4e:	d303      	bcc.n	10000a58 <l8_1>
10000a50:	43db      	mvns	r3, r3
10000a52:	4252      	negs	r2, r2
10000a54:	d300      	bcc.n	10000a58 <l8_1>
10000a56:	3301      	adds	r3, #1

10000a58 <l8_1>:
10000a58:	0d6d      	lsrs	r5, r5, #21
10000a5a:	d003      	beq.n	10000a64 <l8_2>
10000a5c:	1c6e      	adds	r6, r5, #1
10000a5e:	0af6      	lsrs	r6, r6, #11
10000a60:	d007      	beq.n	10000a72 <l8_3>
10000a62:	1bed      	subs	r5, r5, r7

10000a64 <l8_2>:
10000a64:	2200      	movs	r2, #0
10000a66:	007f      	lsls	r7, r7, #1
10000a68:	1c7b      	adds	r3, r7, #1
10000a6a:	079b      	lsls	r3, r3, #30
10000a6c:	129b      	asrs	r3, r3, #10
10000a6e:	3d80      	subs	r5, #128	; 0x80
10000a70:	032d      	lsls	r5, r5, #12

10000a72 <l8_3>:
10000a72:	1b2f      	subs	r7, r5, r4
10000a74:	1b66      	subs	r6, r4, r5
10000a76:	d458      	bmi.n	10000b2a <da_ygtx>
10000a78:	46a4      	mov	ip, r4
10000a7a:	2e20      	cmp	r6, #32
10000a7c:	da46      	bge.n	10000b0c <da_xrgty>
10000a7e:	3720      	adds	r7, #32
10000a80:	0014      	movs	r4, r2
10000a82:	40bc      	lsls	r4, r7

10000a84 <da_xgty0>:
10000a84:	001d      	movs	r5, r3
10000a86:	40bd      	lsls	r5, r7
10000a88:	40f2      	lsrs	r2, r6
10000a8a:	4133      	asrs	r3, r6
10000a8c:	432a      	orrs	r2, r5

10000a8e <da_add>:
10000a8e:	1880      	adds	r0, r0, r2
10000a90:	4159      	adcs	r1, r3

10000a92 <da_pack>:
10000a92:	0fcb      	lsrs	r3, r1, #31
10000a94:	d005      	beq.n	10000aa2 <da_pack+0x10>
10000a96:	43c9      	mvns	r1, r1
10000a98:	43c0      	mvns	r0, r0
10000a9a:	2200      	movs	r2, #0
10000a9c:	4264      	negs	r4, r4
10000a9e:	4150      	adcs	r0, r2
10000aa0:	4151      	adcs	r1, r2
10000aa2:	4662      	mov	r2, ip
10000aa4:	0d4d      	lsrs	r5, r1, #21
10000aa6:	d128      	bne.n	10000afa <da_0>
10000aa8:	0d0d      	lsrs	r5, r1, #20
10000aaa:	d107      	bne.n	10000abc <da_1>
10000aac:	2800      	cmp	r0, #0
10000aae:	d01f      	beq.n	10000af0 <da_5>

10000ab0 <da_2>:
10000ab0:	1924      	adds	r4, r4, r4
10000ab2:	4140      	adcs	r0, r0
10000ab4:	4149      	adcs	r1, r1
10000ab6:	3a01      	subs	r2, #1
10000ab8:	0d0d      	lsrs	r5, r1, #20
10000aba:	d0f9      	beq.n	10000ab0 <da_2>

10000abc <da_1>:
10000abc:	0064      	lsls	r4, r4, #1
10000abe:	d306      	bcc.n	10000ace <da_3>

10000ac0 <da_4>:
10000ac0:	3001      	adds	r0, #1
10000ac2:	d300      	bcc.n	10000ac6 <da_4+0x6>
10000ac4:	3101      	adds	r1, #1
10000ac6:	2c00      	cmp	r4, #0
10000ac8:	d101      	bne.n	10000ace <da_3>
10000aca:	0840      	lsrs	r0, r0, #1
10000acc:	0040      	lsls	r0, r0, #1

10000ace <da_3>:
10000ace:	3a01      	subs	r2, #1
10000ad0:	d40b      	bmi.n	10000aea <da_6>
10000ad2:	1c94      	adds	r4, r2, #2
10000ad4:	0ae4      	lsrs	r4, r4, #11
10000ad6:	d104      	bne.n	10000ae2 <da_7>
10000ad8:	0512      	lsls	r2, r2, #20
10000ada:	4411      	add	r1, r2
10000adc:	07db      	lsls	r3, r3, #31
10000ade:	4419      	add	r1, r3
10000ae0:	bdf0      	pop	{r4, r5, r6, r7, pc}

10000ae2 <da_7>:
10000ae2:	07d9      	lsls	r1, r3, #31
10000ae4:	4b20      	ldr	r3, [pc, #128]	; (10000b68 <da_xmgty+0x4>)
10000ae6:	4319      	orrs	r1, r3
10000ae8:	e000      	b.n	10000aec <da_6+0x2>

10000aea <da_6>:
10000aea:	07d9      	lsls	r1, r3, #31
10000aec:	2000      	movs	r0, #0
10000aee:	bdf0      	pop	{r4, r5, r6, r7, pc}

10000af0 <da_5>:
10000af0:	2900      	cmp	r1, #0
10000af2:	d1dd      	bne.n	10000ab0 <da_2>
10000af4:	2c00      	cmp	r4, #0
10000af6:	d1db      	bne.n	10000ab0 <da_2>
10000af8:	bdf0      	pop	{r4, r5, r6, r7, pc}

10000afa <da_0>:
10000afa:	3201      	adds	r2, #1
10000afc:	07c6      	lsls	r6, r0, #31
10000afe:	0840      	lsrs	r0, r0, #1
10000b00:	07cd      	lsls	r5, r1, #31
10000b02:	4328      	orrs	r0, r5
10000b04:	0849      	lsrs	r1, r1, #1
10000b06:	2e00      	cmp	r6, #0
10000b08:	d0e1      	beq.n	10000ace <da_3>
10000b0a:	e7d9      	b.n	10000ac0 <da_4>

10000b0c <da_xrgty>:
10000b0c:	2e3c      	cmp	r6, #60	; 0x3c
10000b0e:	da29      	bge.n	10000b64 <da_xmgty>
10000b10:	3e20      	subs	r6, #32
10000b12:	3740      	adds	r7, #64	; 0x40
10000b14:	0014      	movs	r4, r2
10000b16:	40bc      	lsls	r4, r7
10000b18:	d000      	beq.n	10000b1c <da_xrgty+0x10>
10000b1a:	2401      	movs	r4, #1
10000b1c:	40f2      	lsrs	r2, r6
10000b1e:	4314      	orrs	r4, r2
10000b20:	001a      	movs	r2, r3
10000b22:	40bb      	lsls	r3, r7
10000b24:	431c      	orrs	r4, r3
10000b26:	17d3      	asrs	r3, r2, #31
10000b28:	e7ac      	b.n	10000a84 <da_xgty0>

10000b2a <da_ygtx>:
10000b2a:	46ac      	mov	ip, r5
10000b2c:	2f20      	cmp	r7, #32
10000b2e:	da08      	bge.n	10000b42 <da_yrgtx>
10000b30:	3620      	adds	r6, #32
10000b32:	0004      	movs	r4, r0
10000b34:	40b4      	lsls	r4, r6

10000b36 <da_ygtx0>:
10000b36:	000d      	movs	r5, r1
10000b38:	40b5      	lsls	r5, r6
10000b3a:	40f8      	lsrs	r0, r7
10000b3c:	4139      	asrs	r1, r7
10000b3e:	4328      	orrs	r0, r5
10000b40:	e7a5      	b.n	10000a8e <da_add>

10000b42 <da_yrgtx>:
10000b42:	2f3c      	cmp	r7, #60	; 0x3c
10000b44:	da0c      	bge.n	10000b60 <da_ymgtx>
10000b46:	3f20      	subs	r7, #32
10000b48:	3640      	adds	r6, #64	; 0x40
10000b4a:	0004      	movs	r4, r0
10000b4c:	40b4      	lsls	r4, r6
10000b4e:	d000      	beq.n	10000b52 <da_yrgtx+0x10>
10000b50:	2401      	movs	r4, #1
10000b52:	40f8      	lsrs	r0, r7
10000b54:	4304      	orrs	r4, r0
10000b56:	0008      	movs	r0, r1
10000b58:	40b1      	lsls	r1, r6
10000b5a:	430c      	orrs	r4, r1
10000b5c:	17c1      	asrs	r1, r0, #31
10000b5e:	e7ea      	b.n	10000b36 <da_ygtx0>

10000b60 <da_ymgtx>:
10000b60:	0010      	movs	r0, r2
10000b62:	0019      	movs	r1, r3

10000b64 <da_xmgty>:
10000b64:	2400      	movs	r4, #0
10000b66:	e794      	b.n	10000a92 <da_pack>
10000b68:	7ff00000 	.word	0x7ff00000

10000b6c <dmul_shim>:
10000b6c:	b5f0      	push	{r4, r5, r6, r7, lr}
10000b6e:	0d0c      	lsrs	r4, r1, #20
10000b70:	1e66      	subs	r6, r4, #1
10000b72:	0536      	lsls	r6, r6, #20
10000b74:	1b89      	subs	r1, r1, r6
10000b76:	0ae6      	lsrs	r6, r4, #11
10000b78:	0564      	lsls	r4, r4, #21
10000b7a:	0d64      	lsrs	r4, r4, #21
10000b7c:	d002      	beq.n	10000b84 <l11_1>
10000b7e:	1c65      	adds	r5, r4, #1
10000b80:	0aed      	lsrs	r5, r5, #11
10000b82:	d004      	beq.n	10000b8e <l11_2>

10000b84 <l11_1>:
10000b84:	2000      	movs	r0, #0
10000b86:	2101      	movs	r1, #1
10000b88:	0509      	lsls	r1, r1, #20
10000b8a:	3c80      	subs	r4, #128	; 0x80
10000b8c:	0324      	lsls	r4, r4, #12

10000b8e <l11_2>:
10000b8e:	46a4      	mov	ip, r4
10000b90:	0d1c      	lsrs	r4, r3, #20
10000b92:	1e67      	subs	r7, r4, #1
10000b94:	053f      	lsls	r7, r7, #20
10000b96:	1bdb      	subs	r3, r3, r7
10000b98:	0ae7      	lsrs	r7, r4, #11
10000b9a:	0564      	lsls	r4, r4, #21
10000b9c:	0d64      	lsrs	r4, r4, #21
10000b9e:	d002      	beq.n	10000ba6 <l12_1>
10000ba0:	1c65      	adds	r5, r4, #1
10000ba2:	0aed      	lsrs	r5, r5, #11
10000ba4:	d004      	beq.n	10000bb0 <l12_2>

10000ba6 <l12_1>:
10000ba6:	2200      	movs	r2, #0
10000ba8:	2301      	movs	r3, #1
10000baa:	051b      	lsls	r3, r3, #20
10000bac:	3c80      	subs	r4, #128	; 0x80
10000bae:	0324      	lsls	r4, r4, #12

10000bb0 <l12_2>:
10000bb0:	4077      	eors	r7, r6
10000bb2:	4464      	add	r4, ip
10000bb4:	b497      	push	{r0, r1, r2, r4, r7}
10000bb6:	b284      	uxth	r4, r0
10000bb8:	b296      	uxth	r6, r2
10000bba:	4374      	muls	r4, r6
10000bbc:	0c07      	lsrs	r7, r0, #16
10000bbe:	437e      	muls	r6, r7
10000bc0:	0c15      	lsrs	r5, r2, #16
10000bc2:	436f      	muls	r7, r5
10000bc4:	b280      	uxth	r0, r0
10000bc6:	4368      	muls	r0, r5
10000bc8:	1836      	adds	r6, r6, r0
10000bca:	d302      	bcc.n	10000bd2 <l13_1>
10000bcc:	2001      	movs	r0, #1
10000bce:	0400      	lsls	r0, r0, #16
10000bd0:	183f      	adds	r7, r7, r0

10000bd2 <l13_1>:
10000bd2:	0430      	lsls	r0, r6, #16
10000bd4:	0c35      	lsrs	r5, r6, #16
10000bd6:	1900      	adds	r0, r0, r4
10000bd8:	417d      	adcs	r5, r7
10000bda:	4684      	mov	ip, r0
10000bdc:	b288      	uxth	r0, r1
10000bde:	b29a      	uxth	r2, r3
10000be0:	4350      	muls	r0, r2
10000be2:	0c0c      	lsrs	r4, r1, #16
10000be4:	4362      	muls	r2, r4
10000be6:	0c1f      	lsrs	r7, r3, #16
10000be8:	437c      	muls	r4, r7
10000bea:	b28e      	uxth	r6, r1
10000bec:	437e      	muls	r6, r7
10000bee:	1992      	adds	r2, r2, r6
10000bf0:	d302      	bcc.n	10000bf8 <l14_1>
10000bf2:	2601      	movs	r6, #1
10000bf4:	0436      	lsls	r6, r6, #16
10000bf6:	19a4      	adds	r4, r4, r6

10000bf8 <l14_1>:
10000bf8:	0416      	lsls	r6, r2, #16
10000bfa:	0c17      	lsrs	r7, r2, #16
10000bfc:	1836      	adds	r6, r6, r0
10000bfe:	4167      	adcs	r7, r4
10000c00:	bc01      	pop	{r0}
10000c02:	b281      	uxth	r1, r0
10000c04:	b29a      	uxth	r2, r3
10000c06:	4351      	muls	r1, r2
10000c08:	0c04      	lsrs	r4, r0, #16
10000c0a:	4362      	muls	r2, r4
10000c0c:	0c1b      	lsrs	r3, r3, #16
10000c0e:	435c      	muls	r4, r3
10000c10:	b280      	uxth	r0, r0
10000c12:	4358      	muls	r0, r3
10000c14:	1812      	adds	r2, r2, r0
10000c16:	d302      	bcc.n	10000c1e <l15_1>
10000c18:	2001      	movs	r0, #1
10000c1a:	0400      	lsls	r0, r0, #16
10000c1c:	1824      	adds	r4, r4, r0

10000c1e <l15_1>:
10000c1e:	0410      	lsls	r0, r2, #16
10000c20:	0c13      	lsrs	r3, r2, #16
10000c22:	1840      	adds	r0, r0, r1
10000c24:	4163      	adcs	r3, r4
10000c26:	182d      	adds	r5, r5, r0
10000c28:	415e      	adcs	r6, r3
10000c2a:	2000      	movs	r0, #0
10000c2c:	4147      	adcs	r7, r0
10000c2e:	bc06      	pop	{r1, r2}
10000c30:	b288      	uxth	r0, r1
10000c32:	b293      	uxth	r3, r2
10000c34:	4358      	muls	r0, r3
10000c36:	0c0c      	lsrs	r4, r1, #16
10000c38:	4363      	muls	r3, r4
10000c3a:	0c12      	lsrs	r2, r2, #16
10000c3c:	4354      	muls	r4, r2
10000c3e:	b289      	uxth	r1, r1
10000c40:	4351      	muls	r1, r2
10000c42:	185b      	adds	r3, r3, r1
10000c44:	d302      	bcc.n	10000c4c <l16_1>
10000c46:	2101      	movs	r1, #1
10000c48:	0409      	lsls	r1, r1, #16
10000c4a:	1864      	adds	r4, r4, r1

10000c4c <l16_1>:
10000c4c:	0419      	lsls	r1, r3, #16
10000c4e:	0c1a      	lsrs	r2, r3, #16
10000c50:	1809      	adds	r1, r1, r0
10000c52:	4162      	adcs	r2, r4
10000c54:	186d      	adds	r5, r5, r1
10000c56:	4156      	adcs	r6, r2
10000c58:	2000      	movs	r0, #0
10000c5a:	4147      	adcs	r7, r0
10000c5c:	bc18      	pop	{r3, r4}
10000c5e:	02f9      	lsls	r1, r7, #11
10000c60:	0d72      	lsrs	r2, r6, #21
10000c62:	4311      	orrs	r1, r2
10000c64:	02f0      	lsls	r0, r6, #11
10000c66:	0d6a      	lsrs	r2, r5, #21
10000c68:	4310      	orrs	r0, r2
10000c6a:	02ed      	lsls	r5, r5, #11
10000c6c:	0d0a      	lsrs	r2, r1, #20
10000c6e:	d103      	bne.n	10000c78 <l16_1+0x2c>
10000c70:	196d      	adds	r5, r5, r5
10000c72:	4140      	adcs	r0, r0
10000c74:	4149      	adcs	r1, r1
10000c76:	3b01      	subs	r3, #1
10000c78:	4e12      	ldr	r6, [pc, #72]	; (10000cc4 <dm_1+0xa>)
10000c7a:	1b9b      	subs	r3, r3, r6
10000c7c:	0076      	lsls	r6, r6, #1
10000c7e:	42b3      	cmp	r3, r6
10000c80:	d20e      	bcs.n	10000ca0 <dm_0>
10000c82:	006d      	lsls	r5, r5, #1
10000c84:	d307      	bcc.n	10000c96 <l16_1+0x4a>
10000c86:	3001      	adds	r0, #1
10000c88:	2600      	movs	r6, #0
10000c8a:	4171      	adcs	r1, r6
10000c8c:	4666      	mov	r6, ip
10000c8e:	4335      	orrs	r5, r6
10000c90:	d101      	bne.n	10000c96 <l16_1+0x4a>
10000c92:	0840      	lsrs	r0, r0, #1
10000c94:	0040      	lsls	r0, r0, #1
10000c96:	051b      	lsls	r3, r3, #20
10000c98:	18c9      	adds	r1, r1, r3

10000c9a <dm_2>:
10000c9a:	07e4      	lsls	r4, r4, #31
10000c9c:	4421      	add	r1, r4
10000c9e:	bdf0      	pop	{r4, r5, r6, r7, pc}

10000ca0 <dm_0>:
10000ca0:	da0b      	bge.n	10000cba <dm_1>
10000ca2:	3301      	adds	r3, #1
10000ca4:	d106      	bne.n	10000cb4 <dm_0+0x14>
10000ca6:	3001      	adds	r0, #1
10000ca8:	d104      	bne.n	10000cb4 <dm_0+0x14>
10000caa:	3101      	adds	r1, #1
10000cac:	0d4f      	lsrs	r7, r1, #21
10000cae:	d001      	beq.n	10000cb4 <dm_0+0x14>
10000cb0:	0849      	lsrs	r1, r1, #1
10000cb2:	e7f2      	b.n	10000c9a <dm_2>
10000cb4:	07e1      	lsls	r1, r4, #31
10000cb6:	2000      	movs	r0, #0
10000cb8:	bdf0      	pop	{r4, r5, r6, r7, pc}

10000cba <dm_1>:
10000cba:	3601      	adds	r6, #1
10000cbc:	0531      	lsls	r1, r6, #20
10000cbe:	2000      	movs	r0, #0
10000cc0:	e7eb      	b.n	10000c9a <dm_2>
10000cc2:	0000      	.short	0x0000
10000cc4:	000003ff 	.word	0x000003ff

10000cc8 <ddiv_shim>:
10000cc8:	b5f0      	push	{r4, r5, r6, r7, lr}

10000cca <ddiv0>:
10000cca:	0d1c      	lsrs	r4, r3, #20
10000ccc:	1e67      	subs	r7, r4, #1
10000cce:	053f      	lsls	r7, r7, #20
10000cd0:	1bdb      	subs	r3, r3, r7
10000cd2:	0ae7      	lsrs	r7, r4, #11
10000cd4:	0564      	lsls	r4, r4, #21
10000cd6:	0d64      	lsrs	r4, r4, #21
10000cd8:	d002      	beq.n	10000ce0 <l19_1>
10000cda:	1c66      	adds	r6, r4, #1
10000cdc:	0af6      	lsrs	r6, r6, #11
10000cde:	d004      	beq.n	10000cea <l19_2>

10000ce0 <l19_1>:
10000ce0:	2200      	movs	r2, #0
10000ce2:	2301      	movs	r3, #1
10000ce4:	051b      	lsls	r3, r3, #20
10000ce6:	3c80      	subs	r4, #128	; 0x80
10000ce8:	0324      	lsls	r4, r4, #12

10000cea <l19_2>:
10000cea:	25d0      	movs	r5, #208	; 0xd0
10000cec:	062d      	lsls	r5, r5, #24
10000cee:	2600      	movs	r6, #0
10000cf0:	43f6      	mvns	r6, r6
10000cf2:	662e      	str	r6, [r5, #96]	; 0x60
10000cf4:	091e      	lsrs	r6, r3, #4
10000cf6:	666e      	str	r6, [r5, #100]	; 0x64
10000cf8:	0fce      	lsrs	r6, r1, #31
10000cfa:	19f6      	adds	r6, r6, r7
10000cfc:	46b4      	mov	ip, r6
10000cfe:	0049      	lsls	r1, r1, #1
10000d00:	0d4f      	lsrs	r7, r1, #21
10000d02:	d002      	beq.n	10000d0a <l19_2+0x20>
10000d04:	1c7e      	adds	r6, r7, #1
10000d06:	0af6      	lsrs	r6, r6, #11
10000d08:	d003      	beq.n	10000d12 <l19_2+0x28>
10000d0a:	2000      	movs	r0, #0
10000d0c:	2100      	movs	r1, #0
10000d0e:	3f40      	subs	r7, #64	; 0x40
10000d10:	033f      	lsls	r7, r7, #12
10000d12:	1b3e      	subs	r6, r7, r4
10000d14:	00b6      	lsls	r6, r6, #2
10000d16:	44b4      	add	ip, r6
10000d18:	3f01      	subs	r7, #1
10000d1a:	057f      	lsls	r7, r7, #21
10000d1c:	1bc9      	subs	r1, r1, r7
10000d1e:	0849      	lsrs	r1, r1, #1
10000d20:	6f2e      	ldr	r6, [r5, #112]	; 0x70
10000d22:	3601      	adds	r6, #1
10000d24:	0876      	lsrs	r6, r6, #1
10000d26:	029c      	lsls	r4, r3, #10
10000d28:	0d95      	lsrs	r5, r2, #22
10000d2a:	4325      	orrs	r5, r4
10000d2c:	4375      	muls	r5, r6
10000d2e:	13ed      	asrs	r5, r5, #15
10000d30:	4375      	muls	r5, r6
10000d32:	13ad      	asrs	r5, r5, #14
10000d34:	3501      	adds	r5, #1
10000d36:	106d      	asrs	r5, r5, #1
10000d38:	03f6      	lsls	r6, r6, #15
10000d3a:	1b76      	subs	r6, r6, r5
10000d3c:	b40c      	push	{r2, r3}
10000d3e:	02cc      	lsls	r4, r1, #11
10000d40:	0d45      	lsrs	r5, r0, #21
10000d42:	432c      	orrs	r4, r5
10000d44:	b2a2      	uxth	r2, r4
10000d46:	b2b3      	uxth	r3, r6
10000d48:	435a      	muls	r2, r3
10000d4a:	0c27      	lsrs	r7, r4, #16
10000d4c:	437b      	muls	r3, r7
10000d4e:	0c35      	lsrs	r5, r6, #16
10000d50:	436f      	muls	r7, r5
10000d52:	b2a4      	uxth	r4, r4
10000d54:	436c      	muls	r4, r5
10000d56:	191b      	adds	r3, r3, r4
10000d58:	d302      	bcc.n	10000d60 <l20_1>
10000d5a:	2401      	movs	r4, #1
10000d5c:	0424      	lsls	r4, r4, #16
10000d5e:	193f      	adds	r7, r7, r4

10000d60 <l20_1>:
10000d60:	041c      	lsls	r4, r3, #16
10000d62:	0c1d      	lsrs	r5, r3, #16
10000d64:	18a4      	adds	r4, r4, r2
10000d66:	417d      	adcs	r5, r7
10000d68:	1924      	adds	r4, r4, r4
10000d6a:	416d      	adcs	r5, r5
10000d6c:	9a00      	ldr	r2, [sp, #0]
10000d6e:	b291      	uxth	r1, r2
10000d70:	b2ac      	uxth	r4, r5
10000d72:	4361      	muls	r1, r4
10000d74:	0c17      	lsrs	r7, r2, #16
10000d76:	437c      	muls	r4, r7
10000d78:	0c2b      	lsrs	r3, r5, #16
10000d7a:	435f      	muls	r7, r3
10000d7c:	b292      	uxth	r2, r2
10000d7e:	435a      	muls	r2, r3
10000d80:	18a4      	adds	r4, r4, r2
10000d82:	d302      	bcc.n	10000d8a <l21_1>
10000d84:	2201      	movs	r2, #1
10000d86:	0412      	lsls	r2, r2, #16
10000d88:	18bf      	adds	r7, r7, r2

10000d8a <l21_1>:
10000d8a:	0422      	lsls	r2, r4, #16
10000d8c:	0c23      	lsrs	r3, r4, #16
10000d8e:	1852      	adds	r2, r2, r1
10000d90:	417b      	adcs	r3, r7
10000d92:	9c01      	ldr	r4, [sp, #4]
10000d94:	436c      	muls	r4, r5
10000d96:	191b      	adds	r3, r3, r4
10000d98:	0e52      	lsrs	r2, r2, #25
10000d9a:	01d9      	lsls	r1, r3, #7
10000d9c:	430a      	orrs	r2, r1
10000d9e:	0144      	lsls	r4, r0, #5
10000da0:	1aa0      	subs	r0, r4, r2
10000da2:	b281      	uxth	r1, r0
10000da4:	b2b2      	uxth	r2, r6
10000da6:	4351      	muls	r1, r2
10000da8:	1403      	asrs	r3, r0, #16
10000daa:	435a      	muls	r2, r3
10000dac:	0c36      	lsrs	r6, r6, #16
10000dae:	4373      	muls	r3, r6
10000db0:	b287      	uxth	r7, r0
10000db2:	4377      	muls	r7, r6
10000db4:	17d6      	asrs	r6, r2, #31
10000db6:	19d2      	adds	r2, r2, r7
10000db8:	2700      	movs	r7, #0
10000dba:	417e      	adcs	r6, r7
10000dbc:	0436      	lsls	r6, r6, #16
10000dbe:	199b      	adds	r3, r3, r6
10000dc0:	0417      	lsls	r7, r2, #16
10000dc2:	0c16      	lsrs	r6, r2, #16
10000dc4:	187f      	adds	r7, r7, r1
10000dc6:	415e      	adcs	r6, r3
10000dc8:	1673      	asrs	r3, r6, #25
10000dca:	18ed      	adds	r5, r5, r3
10000dcc:	01f3      	lsls	r3, r6, #7
10000dce:	2600      	movs	r6, #0
10000dd0:	3380      	adds	r3, #128	; 0x80
10000dd2:	4175      	adcs	r5, r6
10000dd4:	0fa9      	lsrs	r1, r5, #30
10000dd6:	d106      	bne.n	10000de6 <dd_0>
10000dd8:	0064      	lsls	r4, r4, #1
10000dda:	0a69      	lsrs	r1, r5, #9
10000ddc:	05e8      	lsls	r0, r5, #23
10000dde:	0a5b      	lsrs	r3, r3, #9
10000de0:	4318      	orrs	r0, r3
10000de2:	d209      	bcs.n	10000df8 <dd_1>
10000de4:	e02f      	b.n	10000e46 <dd_2>

10000de6 <dd_0>:
10000de6:	2204      	movs	r2, #4
10000de8:	4494      	add	ip, r2
10000dea:	3380      	adds	r3, #128	; 0x80
10000dec:	4175      	adcs	r5, r6
10000dee:	0aa9      	lsrs	r1, r5, #10
10000df0:	05a8      	lsls	r0, r5, #22
10000df2:	0a9b      	lsrs	r3, r3, #10
10000df4:	4318      	orrs	r0, r3
10000df6:	d326      	bcc.n	10000e46 <dd_2>

10000df8 <dd_1>:
10000df8:	4140      	adcs	r0, r0
10000dfa:	4149      	adcs	r1, r1
10000dfc:	0424      	lsls	r4, r4, #16
10000dfe:	9a00      	ldr	r2, [sp, #0]
10000e00:	9b01      	ldr	r3, [sp, #4]
10000e02:	000d      	movs	r5, r1
10000e04:	4355      	muls	r5, r2
10000e06:	1b64      	subs	r4, r4, r5
10000e08:	4343      	muls	r3, r0
10000e0a:	1ae4      	subs	r4, r4, r3
10000e0c:	b295      	uxth	r5, r2
10000e0e:	b286      	uxth	r6, r0
10000e10:	4375      	muls	r5, r6
10000e12:	0c17      	lsrs	r7, r2, #16
10000e14:	437e      	muls	r6, r7
10000e16:	0c03      	lsrs	r3, r0, #16
10000e18:	435f      	muls	r7, r3
10000e1a:	b292      	uxth	r2, r2
10000e1c:	435a      	muls	r2, r3
10000e1e:	18b6      	adds	r6, r6, r2
10000e20:	d302      	bcc.n	10000e28 <l23_1>
10000e22:	2201      	movs	r2, #1
10000e24:	0412      	lsls	r2, r2, #16
10000e26:	18bf      	adds	r7, r7, r2

10000e28 <l23_1>:
10000e28:	0432      	lsls	r2, r6, #16
10000e2a:	0c33      	lsrs	r3, r6, #16
10000e2c:	1952      	adds	r2, r2, r5
10000e2e:	417b      	adcs	r3, r7
10000e30:	4252      	negs	r2, r2
10000e32:	419c      	sbcs	r4, r3
10000e34:	2c00      	cmp	r4, #0
10000e36:	d402      	bmi.n	10000e3e <l23_1+0x16>
10000e38:	2200      	movs	r2, #0
10000e3a:	3001      	adds	r0, #1
10000e3c:	4151      	adcs	r1, r2
10000e3e:	0840      	lsrs	r0, r0, #1
10000e40:	07ca      	lsls	r2, r1, #31
10000e42:	4310      	orrs	r0, r2
10000e44:	0849      	lsrs	r1, r1, #1

10000e46 <dd_2>:
10000e46:	b002      	add	sp, #8
10000e48:	4662      	mov	r2, ip
10000e4a:	07d7      	lsls	r7, r2, #31
10000e4c:	1092      	asrs	r2, r2, #2
10000e4e:	4b08      	ldr	r3, [pc, #32]	; (10000e70 <dd_4+0x6>)
10000e50:	18d2      	adds	r2, r2, r3
10000e52:	4b08      	ldr	r3, [pc, #32]	; (10000e74 <dd_4+0xa>)
10000e54:	429a      	cmp	r2, r3
10000e56:	d203      	bcs.n	10000e60 <dd_3>
10000e58:	0512      	lsls	r2, r2, #20
10000e5a:	1889      	adds	r1, r1, r2

10000e5c <dd_5>:
10000e5c:	19c9      	adds	r1, r1, r7
10000e5e:	bdf0      	pop	{r4, r5, r6, r7, pc}

10000e60 <dd_3>:
10000e60:	2000      	movs	r0, #0
10000e62:	2a00      	cmp	r2, #0
10000e64:	dc01      	bgt.n	10000e6a <dd_4>
10000e66:	0039      	movs	r1, r7
10000e68:	bdf0      	pop	{r4, r5, r6, r7, pc}

10000e6a <dd_4>:
10000e6a:	3301      	adds	r3, #1
10000e6c:	0519      	lsls	r1, r3, #20
10000e6e:	e7f5      	b.n	10000e5c <dd_5>
10000e70:	000003fd 	.word	0x000003fd
10000e74:	000007fe 	.word	0x000007fe

10000e78 <dcordic_rot_step>:
10000e78:	4662      	mov	r2, ip
10000e7a:	ca18      	ldmia	r2!, {r3, r4}
10000e7c:	4694      	mov	ip, r2
10000e7e:	2900      	cmp	r1, #0
10000e80:	da1a      	bge.n	10000eb8 <dcordic_rot_step+0x40>
10000e82:	18c0      	adds	r0, r0, r3
10000e84:	4161      	adcs	r1, r4
10000e86:	465b      	mov	r3, fp
10000e88:	413b      	asrs	r3, r7
10000e8a:	465c      	mov	r4, fp
10000e8c:	40b4      	lsls	r4, r6
10000e8e:	4652      	mov	r2, sl
10000e90:	40fa      	lsrs	r2, r7
10000e92:	4322      	orrs	r2, r4
10000e94:	4644      	mov	r4, r8
10000e96:	464d      	mov	r5, r9
10000e98:	4162      	adcs	r2, r4
10000e9a:	416b      	adcs	r3, r5
10000e9c:	4690      	mov	r8, r2
10000e9e:	4699      	mov	r9, r3
10000ea0:	462b      	mov	r3, r5
10000ea2:	40b3      	lsls	r3, r6
10000ea4:	413d      	asrs	r5, r7
10000ea6:	40fc      	lsrs	r4, r7
10000ea8:	431c      	orrs	r4, r3
10000eaa:	4652      	mov	r2, sl
10000eac:	465b      	mov	r3, fp
10000eae:	41a2      	sbcs	r2, r4
10000eb0:	41ab      	sbcs	r3, r5
10000eb2:	4692      	mov	sl, r2
10000eb4:	469b      	mov	fp, r3
10000eb6:	4770      	bx	lr
10000eb8:	1ac0      	subs	r0, r0, r3
10000eba:	41a1      	sbcs	r1, r4
10000ebc:	464b      	mov	r3, r9
10000ebe:	413b      	asrs	r3, r7
10000ec0:	464c      	mov	r4, r9
10000ec2:	40b4      	lsls	r4, r6
10000ec4:	4642      	mov	r2, r8
10000ec6:	40fa      	lsrs	r2, r7
10000ec8:	4322      	orrs	r2, r4
10000eca:	4654      	mov	r4, sl
10000ecc:	465d      	mov	r5, fp
10000ece:	4162      	adcs	r2, r4
10000ed0:	416b      	adcs	r3, r5
10000ed2:	4692      	mov	sl, r2
10000ed4:	469b      	mov	fp, r3
10000ed6:	462b      	mov	r3, r5
10000ed8:	40b3      	lsls	r3, r6
10000eda:	413d      	asrs	r5, r7
10000edc:	40fc      	lsrs	r4, r7
10000ede:	431c      	orrs	r4, r3
10000ee0:	4642      	mov	r2, r8
10000ee2:	464b      	mov	r3, r9
10000ee4:	41a2      	sbcs	r2, r4
10000ee6:	41ab      	sbcs	r3, r5
10000ee8:	4690      	mov	r8, r2
10000eea:	4699      	mov	r9, r3
10000eec:	4770      	bx	lr

10000eee <ret_dzero>:
10000eee:	2000      	movs	r0, #0
10000ef0:	2100      	movs	r1, #0
10000ef2:	4770      	bx	lr

10000ef4 <double2uint_shim>:
10000ef4:	2200      	movs	r2, #0

10000ef6 <double2ufix_shim>:
10000ef6:	b500      	push	{lr}
10000ef8:	3220      	adds	r2, #32
10000efa:	f000 f804 	bl	10000f06 <double2ufix64_shim>
10000efe:	0008      	movs	r0, r1
10000f00:	bd00      	pop	{pc}
	...

10000f04 <double2uint64_shim>:
10000f04:	2200      	movs	r2, #0

10000f06 <double2ufix64_shim>:
10000f06:	150b      	asrs	r3, r1, #20
10000f08:	d4f1      	bmi.n	10000eee <ret_dzero>

10000f0a <d2fix>:
10000f0a:	b510      	push	{r4, lr}
10000f0c:	4694      	mov	ip, r2
10000f0e:	f000 f82f 	bl	10000f70 <dunpacks>
10000f12:	1414      	asrs	r4, r2, #16
10000f14:	3401      	adds	r4, #1
10000f16:	da00      	bge.n	10000f1a <d2fix+0x10>
10000f18:	2100      	movs	r1, #0
10000f1a:	17cb      	asrs	r3, r1, #31
10000f1c:	4c13      	ldr	r4, [pc, #76]	; (10000f6c <d2fix_a+0x4c>)
10000f1e:	4720      	bx	r4

10000f20 <d2fix_a>:
10000f20:	4462      	add	r2, ip
10000f22:	3a34      	subs	r2, #52	; 0x34
10000f24:	d40c      	bmi.n	10000f40 <d2fix_a+0x20>
10000f26:	2a0c      	cmp	r2, #12
10000f28:	da07      	bge.n	10000f3a <d2fix_a+0x1a>
10000f2a:	0004      	movs	r4, r0
10000f2c:	4091      	lsls	r1, r2
10000f2e:	4090      	lsls	r0, r2
10000f30:	4252      	negs	r2, r2
10000f32:	3220      	adds	r2, #32
10000f34:	40d4      	lsrs	r4, r2
10000f36:	4321      	orrs	r1, r4
10000f38:	bd10      	pop	{r4, pc}
10000f3a:	43d8      	mvns	r0, r3
10000f3c:	43d9      	mvns	r1, r3
10000f3e:	bd10      	pop	{r4, pc}
10000f40:	3220      	adds	r2, #32
10000f42:	d407      	bmi.n	10000f54 <d2fix_a+0x34>
10000f44:	460c      	mov	r4, r1
10000f46:	4094      	lsls	r4, r2
10000f48:	4252      	negs	r2, r2
10000f4a:	3220      	adds	r2, #32
10000f4c:	4111      	asrs	r1, r2
10000f4e:	40d0      	lsrs	r0, r2
10000f50:	4320      	orrs	r0, r4
10000f52:	bd10      	pop	{r4, pc}
10000f54:	0008      	movs	r0, r1
10000f56:	17c9      	asrs	r1, r1, #31
10000f58:	3220      	adds	r2, #32
10000f5a:	d403      	bmi.n	10000f64 <d2fix_a+0x44>
10000f5c:	4252      	negs	r2, r2
10000f5e:	3220      	adds	r2, #32
10000f60:	4110      	asrs	r0, r2
10000f62:	bd10      	pop	{r4, pc}
10000f64:	0018      	movs	r0, r3
10000f66:	0019      	movs	r1, r3
10000f68:	bd10      	pop	{r4, pc}
10000f6a:	0000      	.short	0x0000
10000f6c:	10000f21 	.word	0x10000f21

10000f70 <dunpacks>:
10000f70:	0d0a      	lsrs	r2, r1, #20
10000f72:	0fcc      	lsrs	r4, r1, #31
10000f74:	1e53      	subs	r3, r2, #1
10000f76:	051b      	lsls	r3, r3, #20
10000f78:	1ac9      	subs	r1, r1, r3
10000f7a:	0552      	lsls	r2, r2, #21
10000f7c:	d303      	bcc.n	10000f86 <l60_1>
10000f7e:	43c9      	mvns	r1, r1
10000f80:	4240      	negs	r0, r0
10000f82:	d300      	bcc.n	10000f86 <l60_1>
10000f84:	3101      	adds	r1, #1

10000f86 <l60_1>:
10000f86:	0d52      	lsrs	r2, r2, #21
10000f88:	d003      	beq.n	10000f92 <l60_2>
10000f8a:	1c53      	adds	r3, r2, #1
10000f8c:	0adb      	lsrs	r3, r3, #11
10000f8e:	d007      	beq.n	10000fa0 <l60_3>
10000f90:	1b12      	subs	r2, r2, r4

10000f92 <l60_2>:
10000f92:	2000      	movs	r0, #0
10000f94:	0064      	lsls	r4, r4, #1
10000f96:	1c61      	adds	r1, r4, #1
10000f98:	0789      	lsls	r1, r1, #30
10000f9a:	1289      	asrs	r1, r1, #10
10000f9c:	3a80      	subs	r2, #128	; 0x80
10000f9e:	0312      	lsls	r2, r2, #12

10000fa0 <l60_3>:
10000fa0:	4b01      	ldr	r3, [pc, #4]	; (10000fa8 <l60_3+0x8>)
10000fa2:	1ad2      	subs	r2, r2, r3
10000fa4:	4770      	bx	lr
10000fa6:	0000      	.short	0x0000
10000fa8:	000003ff 	.word	0x000003ff

10000fac <__wrap___aeabi_frsub>:
10000fac:	4048      	eors	r0, r1
10000fae:	4041      	eors	r1, r0
10000fb0:	4048      	eors	r0, r1

10000fb2 <__wrap___aeabi_fsub>:
10000fb2:	4b06      	ldr	r3, [pc, #24]	; (10000fcc <__wrap___aeabi_fmul+0x8>)
10000fb4:	685b      	ldr	r3, [r3, #4]
10000fb6:	4718      	bx	r3

10000fb8 <__wrap___aeabi_fadd>:
10000fb8:	4b04      	ldr	r3, [pc, #16]	; (10000fcc <__wrap___aeabi_fmul+0x8>)
10000fba:	681b      	ldr	r3, [r3, #0]
10000fbc:	4718      	bx	r3

10000fbe <__wrap___aeabi_fdiv>:
10000fbe:	4b03      	ldr	r3, [pc, #12]	; (10000fcc <__wrap___aeabi_fmul+0x8>)
10000fc0:	68db      	ldr	r3, [r3, #12]
10000fc2:	4718      	bx	r3

10000fc4 <__wrap___aeabi_fmul>:
10000fc4:	4b01      	ldr	r3, [pc, #4]	; (10000fcc <__wrap___aeabi_fmul+0x8>)
10000fc6:	689b      	ldr	r3, [r3, #8]
10000fc8:	4718      	bx	r3
10000fca:	0000      	.short	0x0000
10000fcc:	20008fb0 	.word	0x20008fb0

10000fd0 <__wrap___aeabi_ui2f>:
10000fd0:	1a49      	subs	r1, r1, r1
10000fd2:	2800      	cmp	r0, #0
10000fd4:	d108      	bne.n	10000fe8 <__aeabi_i2f_main>
10000fd6:	4608      	mov	r0, r1
10000fd8:	4770      	bx	lr
	...

10000fdc <__wrap___aeabi_i2f>:
10000fdc:	0fc1      	lsrs	r1, r0, #31
10000fde:	07c9      	lsls	r1, r1, #31
10000fe0:	d500      	bpl.n	10000fe4 <__wrap___aeabi_i2f+0x8>
10000fe2:	4240      	negs	r0, r0
10000fe4:	2800      	cmp	r0, #0
10000fe6:	d017      	beq.n	10001018 <__aeabi_i2f_main+0x30>

10000fe8 <__aeabi_i2f_main>:
10000fe8:	46f4      	mov	ip, lr
10000fea:	b403      	push	{r0, r1}
10000fec:	4b0b      	ldr	r3, [pc, #44]	; (1000101c <__aeabi_i2f_main+0x34>)
10000fee:	681b      	ldr	r3, [r3, #0]
10000ff0:	4798      	blx	r3
10000ff2:	bc06      	pop	{r1, r2}
10000ff4:	4081      	lsls	r1, r0
10000ff6:	389e      	subs	r0, #158	; 0x9e
10000ff8:	4240      	negs	r0, r0
10000ffa:	3180      	adds	r1, #128	; 0x80
10000ffc:	d207      	bcs.n	1000100e <__aeabi_i2f_main+0x26>
10000ffe:	060b      	lsls	r3, r1, #24
10001000:	d007      	beq.n	10001012 <__aeabi_i2f_main+0x2a>
10001002:	0049      	lsls	r1, r1, #1
10001004:	0a49      	lsrs	r1, r1, #9
10001006:	05c0      	lsls	r0, r0, #23
10001008:	4310      	orrs	r0, r2
1000100a:	4308      	orrs	r0, r1
1000100c:	4760      	bx	ip
1000100e:	3001      	adds	r0, #1
10001010:	e7f8      	b.n	10001004 <__aeabi_i2f_main+0x1c>
10001012:	0a49      	lsrs	r1, r1, #9
10001014:	0289      	lsls	r1, r1, #10
10001016:	e7f5      	b.n	10001004 <__aeabi_i2f_main+0x1c>
10001018:	4770      	bx	lr
1000101a:	0000      	.short	0x0000
1000101c:	20017304 	.word	0x20017304

10001020 <__wrap___aeabi_f2iz>:
10001020:	0041      	lsls	r1, r0, #1
10001022:	0e0a      	lsrs	r2, r1, #24
10001024:	2380      	movs	r3, #128	; 0x80
10001026:	061b      	lsls	r3, r3, #24
10001028:	2a7e      	cmp	r2, #126	; 0x7e
1000102a:	dd0b      	ble.n	10001044 <__wrap___aeabi_f2iz+0x24>
1000102c:	3a9e      	subs	r2, #158	; 0x9e
1000102e:	da0b      	bge.n	10001048 <__wrap___aeabi_f2iz+0x28>
10001030:	17c1      	asrs	r1, r0, #31
10001032:	0240      	lsls	r0, r0, #9
10001034:	0840      	lsrs	r0, r0, #1
10001036:	4318      	orrs	r0, r3
10001038:	4252      	negs	r2, r2
1000103a:	40d0      	lsrs	r0, r2
1000103c:	0049      	lsls	r1, r1, #1
1000103e:	3101      	adds	r1, #1
10001040:	4348      	muls	r0, r1
10001042:	4770      	bx	lr
10001044:	2000      	movs	r0, #0
10001046:	4770      	bx	lr
10001048:	0fc0      	lsrs	r0, r0, #31
1000104a:	18c0      	adds	r0, r0, r3
1000104c:	3801      	subs	r0, #1
1000104e:	4770      	bx	lr
10001050:	42c0      	cmn	r0, r0
10001052:	d30d      	bcc.n	10001070 <float2int>
10001054:	b500      	push	{lr}
10001056:	0040      	lsls	r0, r0, #1
10001058:	0840      	lsrs	r0, r0, #1
1000105a:	2100      	movs	r1, #0
1000105c:	f000 f812 	bl	10001084 <__wrap___aeabi_f2uiz>
10001060:	2800      	cmp	r0, #0
10001062:	d401      	bmi.n	10001068 <__wrap___aeabi_f2iz+0x48>
10001064:	4240      	negs	r0, r0
10001066:	bd00      	pop	{pc}
10001068:	2080      	movs	r0, #128	; 0x80
1000106a:	0600      	lsls	r0, r0, #24
1000106c:	bd00      	pop	{pc}
	...

10001070 <float2int>:
10001070:	4b03      	ldr	r3, [pc, #12]	; (10001080 <float2int+0x10>)
10001072:	69db      	ldr	r3, [r3, #28]
10001074:	46fc      	mov	ip, pc
10001076:	4718      	bx	r3
10001078:	10d1df1c 	.word	0x10d1df1c
1000107c:	00001000 	.word	0x00001000
10001080:	20008fb0 	.word	0x20008fb0

10001084 <__wrap___aeabi_f2uiz>:
10001084:	4b01      	ldr	r3, [pc, #4]	; (1000108c <__wrap___aeabi_f2uiz+0x8>)
10001086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10001088:	4718      	bx	r3
1000108a:	0000      	.short	0x0000
1000108c:	20008fb0 	.word	0x20008fb0

10001090 <__wrap___aeabi_f2d>:
10001090:	4b03      	ldr	r3, [pc, #12]	; (100010a0 <__wrap___aeabi_f2d+0x10>)
10001092:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
10001094:	46fc      	mov	ip, pc
10001096:	4718      	bx	r3
10001098:	10e9df7c 	.word	0x10e9df7c
1000109c:	00001000 	.word	0x00001000
100010a0:	20008fb0 	.word	0x20008fb0

100010a4 <float_table_shim_on_use_helper>:
100010a4:	b507      	push	{r0, r1, r2, lr}
100010a6:	4660      	mov	r0, ip
100010a8:	8801      	ldrh	r1, [r0, #0]
100010aa:	0a0a      	lsrs	r2, r1, #8
100010ac:	3002      	adds	r0, #2
100010ae:	2adf      	cmp	r2, #223	; 0xdf
100010b0:	d1fa      	bne.n	100010a8 <float_table_shim_on_use_helper+0x4>
100010b2:	b2c9      	uxtb	r1, r1
100010b4:	0882      	lsrs	r2, r0, #2
100010b6:	d304      	bcc.n	100010c2 <float_table_shim_on_use_helper+0x1e>
100010b8:	8802      	ldrh	r2, [r0, #0]
100010ba:	8840      	ldrh	r0, [r0, #2]
100010bc:	0400      	lsls	r0, r0, #16
100010be:	4310      	orrs	r0, r2
100010c0:	e000      	b.n	100010c4 <float_table_shim_on_use_helper+0x20>
100010c2:	6800      	ldr	r0, [r0, #0]
100010c4:	4a01      	ldr	r2, [pc, #4]	; (100010cc <float_table_shim_on_use_helper+0x28>)
100010c6:	5050      	str	r0, [r2, r1]
100010c8:	9003      	str	r0, [sp, #12]
100010ca:	bd07      	pop	{r0, r1, r2, pc}
100010cc:	20008fb0 	.word	0x20008fb0

100010d0 <float2int_shim>:
100010d0:	2100      	movs	r1, #0

100010d2 <float2fix_shim>:
100010d2:	15c2      	asrs	r2, r0, #23
100010d4:	3280      	adds	r2, #128	; 0x80
100010d6:	3280      	adds	r2, #128	; 0x80
100010d8:	d001      	beq.n	100010de <float2fix_shim+0xc>
100010da:	4a02      	ldr	r2, [pc, #8]	; (100010e4 <float2fix_shim+0x12>)
100010dc:	4710      	bx	r2
100010de:	2000      	movs	r0, #0
100010e0:	4770      	bx	lr
100010e2:	0000      	.short	0x0000
100010e4:	00002acd 	.word	0x00002acd

100010e8 <float2double_shim>:
100010e8:	0fc3      	lsrs	r3, r0, #31
100010ea:	07db      	lsls	r3, r3, #31
100010ec:	0041      	lsls	r1, r0, #1
100010ee:	0e0a      	lsrs	r2, r1, #24
100010f0:	d007      	beq.n	10001102 <float2double_shim+0x1a>
100010f2:	2aff      	cmp	r2, #255	; 0xff
100010f4:	d008      	beq.n	10001108 <float2double_shim+0x20>
100010f6:	0909      	lsrs	r1, r1, #4
100010f8:	4a05      	ldr	r2, [pc, #20]	; (10001110 <float2double_shim+0x28>)
100010fa:	1889      	adds	r1, r1, r2
100010fc:	4319      	orrs	r1, r3
100010fe:	0740      	lsls	r0, r0, #29
10001100:	4770      	bx	lr
10001102:	0019      	movs	r1, r3
10001104:	2000      	movs	r0, #0
10001106:	4770      	bx	lr
10001108:	4902      	ldr	r1, [pc, #8]	; (10001114 <float2double_shim+0x2c>)
1000110a:	18c9      	adds	r1, r1, r3
1000110c:	e7fa      	b.n	10001104 <float2double_shim+0x1c>
1000110e:	0000      	.short	0x0000
10001110:	38000000 	.word	0x38000000
10001114:	7ff00000 	.word	0x7ff00000

10001118 <__aeabi_mem_init>:
10001118:	4801      	ldr	r0, [pc, #4]	; (10001120 <__aeabi_mem_init+0x8>)
1000111a:	2104      	movs	r1, #4
1000111c:	4b01      	ldr	r3, [pc, #4]	; (10001124 <__aeabi_mem_init+0xc>)
1000111e:	4718      	bx	r3
10001120:	20002708 	.word	0x20002708
10001124:	10001195 	.word	0x10001195

10001128 <__wrap_memset>:
10001128:	4b01      	ldr	r3, [pc, #4]	; (10001130 <__wrap_memset+0x8>)
1000112a:	681b      	ldr	r3, [r3, #0]
1000112c:	4718      	bx	r3
1000112e:	0000      	.short	0x0000
10001130:	20002708 	.word	0x20002708

10001134 <__wrap___aeabi_memcpy>:
10001134:	4b01      	ldr	r3, [pc, #4]	; (1000113c <__wrap___aeabi_memcpy+0x8>)
10001136:	685b      	ldr	r3, [r3, #4]
10001138:	4718      	bx	r3
1000113a:	0000      	.short	0x0000
1000113c:	20002708 	.word	0x20002708

10001140 <__wrap___aeabi_lmul>:
10001140:	4351      	muls	r1, r2
10001142:	4343      	muls	r3, r0
10001144:	18c9      	adds	r1, r1, r3
10001146:	468c      	mov	ip, r1
10001148:	0c11      	lsrs	r1, r2, #16
1000114a:	b283      	uxth	r3, r0
1000114c:	434b      	muls	r3, r1
1000114e:	b410      	push	{r4}
10001150:	0c04      	lsrs	r4, r0, #16
10001152:	4361      	muls	r1, r4
10001154:	b292      	uxth	r2, r2
10001156:	b280      	uxth	r0, r0
10001158:	4350      	muls	r0, r2
1000115a:	4362      	muls	r2, r4
1000115c:	041c      	lsls	r4, r3, #16
1000115e:	0c1b      	lsrs	r3, r3, #16
10001160:	1900      	adds	r0, r0, r4
10001162:	bc10      	pop	{r4}
10001164:	4159      	adcs	r1, r3
10001166:	0413      	lsls	r3, r2, #16
10001168:	0c12      	lsrs	r2, r2, #16
1000116a:	18c0      	adds	r0, r0, r3
1000116c:	4151      	adcs	r1, r2
1000116e:	4461      	add	r1, ip
10001170:	4770      	bx	lr
	...

10001174 <rom_func_lookup>:
// Convert a 16 bit pointer stored at the given rom address into a 32 bit pointer
#define rom_hword_as_ptr(rom_address) (void *)(uintptr_t)(*(uint16_t *)rom_address)

void *rom_func_lookup(uint32_t code) {
    rom_table_lookup_fn rom_table_lookup = (rom_table_lookup_fn) rom_hword_as_ptr(0x18);
    uint16_t *func_table = (uint16_t *) rom_hword_as_ptr(0x14);
10001174:	2314      	movs	r3, #20
void *rom_func_lookup(uint32_t code) {
10001176:	b510      	push	{r4, lr}
10001178:	0001      	movs	r1, r0
    uint16_t *func_table = (uint16_t *) rom_hword_as_ptr(0x14);
1000117a:	8818      	ldrh	r0, [r3, #0]
    rom_table_lookup_fn rom_table_lookup = (rom_table_lookup_fn) rom_hword_as_ptr(0x18);
1000117c:	3304      	adds	r3, #4
1000117e:	881b      	ldrh	r3, [r3, #0]
    return rom_table_lookup(func_table, code);
10001180:	4798      	blx	r3
}
10001182:	bd10      	pop	{r4, pc}

10001184 <rom_data_lookup>:

void *rom_data_lookup(uint32_t code) {
    rom_table_lookup_fn rom_table_lookup = (rom_table_lookup_fn) rom_hword_as_ptr(0x18);
    uint16_t *data_table = (uint16_t *) rom_hword_as_ptr(0x16);
10001184:	2316      	movs	r3, #22
void *rom_data_lookup(uint32_t code) {
10001186:	b510      	push	{r4, lr}
10001188:	0001      	movs	r1, r0
    uint16_t *data_table = (uint16_t *) rom_hword_as_ptr(0x16);
1000118a:	8818      	ldrh	r0, [r3, #0]
    rom_table_lookup_fn rom_table_lookup = (rom_table_lookup_fn) rom_hword_as_ptr(0x18);
1000118c:	3302      	adds	r3, #2
1000118e:	881b      	ldrh	r3, [r3, #0]
    return rom_table_lookup(data_table, code);
10001190:	4798      	blx	r3
}
10001192:	bd10      	pop	{r4, pc}

10001194 <rom_funcs_lookup>:
/// \end::table_lookup[]

bool rom_funcs_lookup(uint32_t *table, unsigned int count) {
10001194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10001196:	4647      	mov	r7, r8
10001198:	46ce      	mov	lr, r9
1000119a:	b580      	push	{r7, lr}
1000119c:	1e0f      	subs	r7, r1, #0
    bool ok = true;
    for (unsigned int i = 0; i < count; i++) {
1000119e:	d019      	beq.n	100011d4 <rom_funcs_lookup+0x40>
    uint16_t *func_table = (uint16_t *) rom_hword_as_ptr(0x14);
100011a0:	2314      	movs	r3, #20
100011a2:	4699      	mov	r9, r3
    rom_table_lookup_fn rom_table_lookup = (rom_table_lookup_fn) rom_hword_as_ptr(0x18);
100011a4:	3304      	adds	r3, #4
100011a6:	0004      	movs	r4, r0
    for (unsigned int i = 0; i < count; i++) {
100011a8:	2500      	movs	r5, #0
    bool ok = true;
100011aa:	2601      	movs	r6, #1
    rom_table_lookup_fn rom_table_lookup = (rom_table_lookup_fn) rom_hword_as_ptr(0x18);
100011ac:	4698      	mov	r8, r3
    uint16_t *func_table = (uint16_t *) rom_hword_as_ptr(0x14);
100011ae:	464b      	mov	r3, r9
100011b0:	8818      	ldrh	r0, [r3, #0]
    rom_table_lookup_fn rom_table_lookup = (rom_table_lookup_fn) rom_hword_as_ptr(0x18);
100011b2:	4643      	mov	r3, r8
    return rom_table_lookup(func_table, code);
100011b4:	6821      	ldr	r1, [r4, #0]
    rom_table_lookup_fn rom_table_lookup = (rom_table_lookup_fn) rom_hword_as_ptr(0x18);
100011b6:	881b      	ldrh	r3, [r3, #0]
    return rom_table_lookup(func_table, code);
100011b8:	4798      	blx	r3
        table[i] = (uintptr_t) rom_func_lookup(table[i]);
100011ba:	c401      	stmia	r4!, {r0}
        if (!table[i]) ok = false;
100011bc:	1e43      	subs	r3, r0, #1
100011be:	4198      	sbcs	r0, r3
    for (unsigned int i = 0; i < count; i++) {
100011c0:	3501      	adds	r5, #1
        if (!table[i]) ok = false;
100011c2:	4240      	negs	r0, r0
100011c4:	4006      	ands	r6, r0
    for (unsigned int i = 0; i < count; i++) {
100011c6:	42af      	cmp	r7, r5
100011c8:	d1f1      	bne.n	100011ae <rom_funcs_lookup+0x1a>
    }
    return ok;
}
100011ca:	0030      	movs	r0, r6
100011cc:	bcc0      	pop	{r6, r7}
100011ce:	46b9      	mov	r9, r7
100011d0:	46b0      	mov	r8, r6
100011d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bool ok = true;
100011d4:	2601      	movs	r6, #1
100011d6:	e7f8      	b.n	100011ca <rom_funcs_lookup+0x36>

100011d8 <hw_claim_lock>:
 *
 * \return The prior interrupt enable status for restoration later via restore_interrupts()
 */
inline static uint32_t save_and_disable_interrupts() {
    uint32_t status;
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
100011d8:	f3ef 8010 	mrs	r0, PRIMASK
    __asm volatile ("cpsid i");
100011dc:	b672      	cpsid	i
 */
inline static void spin_lock_unsafe_blocking(spin_lock_t *lock) {
    // Note we don't do a wfe or anything, because by convention these spin_locks are VERY SHORT LIVED and NEVER BLOCK and run
    // with INTERRUPTS disabled (to ensure that)... therefore nothing on our core could be blocking us, so we just need to wait on another core
    // anyway which should be finished soon
    while (__builtin_expect(!*lock, 0));
100011de:	4a03      	ldr	r2, [pc, #12]	; (100011ec <hw_claim_lock+0x14>)
100011e0:	6813      	ldr	r3, [r2, #0]
100011e2:	2b00      	cmp	r3, #0
100011e4:	d0fc      	beq.n	100011e0 <hw_claim_lock+0x8>
    __asm volatile ("dmb");
100011e6:	f3bf 8f5f 	dmb	sy

#include "hardware/claim.h"

uint32_t hw_claim_lock() {
    return spin_lock_blocking(spin_lock_instance(PICO_SPINLOCK_ID_HARDWARE_CLAIM));
}
100011ea:	4770      	bx	lr
100011ec:	d000012c 	.word	0xd000012c

100011f0 <hw_claim_unlock>:
100011f0:	f3bf 8f5f 	dmb	sy
 *
 * \param lock Spinlock instance
 */
inline static void spin_unlock_unsafe(spin_lock_t *lock) {
    __mem_fence_release();
    *lock = 0;
100011f4:	2200      	movs	r2, #0
100011f6:	4b02      	ldr	r3, [pc, #8]	; (10001200 <hw_claim_unlock+0x10>)
100011f8:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
100011fa:	f380 8810 	msr	PRIMASK, r0

void hw_claim_unlock(uint32_t save) {
    spin_unlock(spin_lock_instance(PICO_SPINLOCK_ID_HARDWARE_CLAIM), save);
}
100011fe:	4770      	bx	lr
10001200:	d000012c 	.word	0xd000012c

10001204 <hw_claim_or_assert>:
    }
    hw_claim_unlock(save);
    return rc;
}

void hw_claim_or_assert(uint8_t *bits, uint bit_index, const char *message) {
10001204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10001206:	46ce      	mov	lr, r9
10001208:	4647      	mov	r7, r8
1000120a:	4691      	mov	r9, r2
1000120c:	b580      	push	{r7, lr}
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
1000120e:	f3ef 8c10 	mrs	ip, PRIMASK
    __asm volatile ("cpsid i");
10001212:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
10001214:	4d10      	ldr	r5, [pc, #64]	; (10001258 <hw_claim_or_assert+0x54>)
10001216:	682b      	ldr	r3, [r5, #0]
10001218:	2b00      	cmp	r3, #0
1000121a:	d0fc      	beq.n	10001216 <hw_claim_or_assert+0x12>
    __asm volatile ("dmb");
1000121c:	f3bf 8f5f 	dmb	sy
    uint32_t save = hw_claim_lock();
    if (bits[bit_index >> 3u] & (1u << (bit_index & 7u))) {
10001220:	08cb      	lsrs	r3, r1, #3
10001222:	5cc4      	ldrb	r4, [r0, r3]
10001224:	18c7      	adds	r7, r0, r3
10001226:	2007      	movs	r0, #7
10001228:	0026      	movs	r6, r4
1000122a:	2301      	movs	r3, #1
1000122c:	4008      	ands	r0, r1
1000122e:	40c6      	lsrs	r6, r0
10001230:	001a      	movs	r2, r3
10001232:	4032      	ands	r2, r6
10001234:	4233      	tst	r3, r6
10001236:	d10b      	bne.n	10001250 <hw_claim_or_assert+0x4c>
        panic(message, bit_index);
    } else {
        bits[bit_index >> 3u] |= (1u << (bit_index & 7u));
10001238:	4083      	lsls	r3, r0
1000123a:	4323      	orrs	r3, r4
1000123c:	703b      	strb	r3, [r7, #0]
1000123e:	f3bf 8f5f 	dmb	sy
    *lock = 0;
10001242:	602a      	str	r2, [r5, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10001244:	f38c 8810 	msr	PRIMASK, ip
    }
    hw_claim_unlock(save);
}
10001248:	bcc0      	pop	{r6, r7}
1000124a:	46b9      	mov	r9, r7
1000124c:	46b0      	mov	r8, r6
1000124e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        panic(message, bit_index);
10001250:	4648      	mov	r0, r9
10001252:	f002 fbf5 	bl	10003a40 <panic>
10001256:	46c0      	nop			; (mov r8, r8)
10001258:	d000012c 	.word	0xd000012c

1000125c <hw_claim_unused_from_range>:

int hw_claim_unused_from_range(uint8_t *bits, bool required, uint bit_lsb, uint bit_msb, const char *message) {
1000125c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000125e:	4647      	mov	r7, r8
10001260:	46ce      	mov	lr, r9
10001262:	4688      	mov	r8, r1
10001264:	b580      	push	{r7, lr}
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
10001266:	f3ef 8c10 	mrs	ip, PRIMASK
    __asm volatile ("cpsid i");
1000126a:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
1000126c:	4d21      	ldr	r5, [pc, #132]	; (100012f4 <hw_claim_unused_from_range+0x98>)
1000126e:	682c      	ldr	r4, [r5, #0]
10001270:	2c00      	cmp	r4, #0
10001272:	d0fc      	beq.n	1000126e <hw_claim_unused_from_range+0x12>
    __asm volatile ("dmb");
10001274:	f3bf 8f5f 	dmb	sy
    // don't bother check lsb / msb order as if wrong, then it'll fail anyway
    uint32_t save = hw_claim_lock();
    int found_bit = -1;
    for(uint bit=bit_lsb; bit <= bit_msb; bit++) {
10001278:	429a      	cmp	r2, r3
1000127a:	d82d      	bhi.n	100012d8 <hw_claim_unused_from_range+0x7c>
        if (!(bits[bit >> 3u] & (1u << (bit & 7u)))) {
1000127c:	08d4      	lsrs	r4, r2, #3
1000127e:	5d05      	ldrb	r5, [r0, r4]
10001280:	1907      	adds	r7, r0, r4
10001282:	2407      	movs	r4, #7
10001284:	002e      	movs	r6, r5
10001286:	4014      	ands	r4, r2
10001288:	40e6      	lsrs	r6, r4
1000128a:	07f1      	lsls	r1, r6, #31
1000128c:	d51e      	bpl.n	100012cc <hw_claim_unused_from_range+0x70>
1000128e:	2107      	movs	r1, #7
10001290:	4689      	mov	r9, r1
10001292:	3906      	subs	r1, #6
10001294:	e008      	b.n	100012a8 <hw_claim_unused_from_range+0x4c>
10001296:	08d4      	lsrs	r4, r2, #3
10001298:	5d05      	ldrb	r5, [r0, r4]
1000129a:	1907      	adds	r7, r0, r4
1000129c:	464c      	mov	r4, r9
1000129e:	002e      	movs	r6, r5
100012a0:	4014      	ands	r4, r2
100012a2:	40e6      	lsrs	r6, r4
100012a4:	4231      	tst	r1, r6
100012a6:	d011      	beq.n	100012cc <hw_claim_unused_from_range+0x70>
    for(uint bit=bit_lsb; bit <= bit_msb; bit++) {
100012a8:	3201      	adds	r2, #1
100012aa:	4293      	cmp	r3, r2
100012ac:	d2f3      	bcs.n	10001296 <hw_claim_unused_from_range+0x3a>
    int found_bit = -1;
100012ae:	2001      	movs	r0, #1
100012b0:	4240      	negs	r0, r0
100012b2:	f3bf 8f5f 	dmb	sy
    *lock = 0;
100012b6:	2200      	movs	r2, #0
100012b8:	4b0e      	ldr	r3, [pc, #56]	; (100012f4 <hw_claim_unused_from_range+0x98>)
100012ba:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
100012bc:	f38c 8810 	msr	PRIMASK, ip
            found_bit = bit;
            break;
        }
    }
    hw_claim_unlock(save);
    if (found_bit < 0 && required) {
100012c0:	2800      	cmp	r0, #0
100012c2:	db11      	blt.n	100012e8 <hw_claim_unused_from_range+0x8c>
        panic(message);
    }
    return found_bit;
}
100012c4:	bcc0      	pop	{r6, r7}
100012c6:	46b9      	mov	r9, r7
100012c8:	46b0      	mov	r8, r6
100012ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            bits[bit >> 3u] |= (1u << (bit & 7u));
100012cc:	2301      	movs	r3, #1
100012ce:	40a3      	lsls	r3, r4
100012d0:	431d      	orrs	r5, r3
            found_bit = bit;
100012d2:	0010      	movs	r0, r2
            bits[bit >> 3u] |= (1u << (bit & 7u));
100012d4:	703d      	strb	r5, [r7, #0]
            break;
100012d6:	e7ec      	b.n	100012b2 <hw_claim_unused_from_range+0x56>
    __asm volatile ("dmb");
100012d8:	f3bf 8f5f 	dmb	sy
    *lock = 0;
100012dc:	2300      	movs	r3, #0
100012de:	602b      	str	r3, [r5, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
100012e0:	f38c 8810 	msr	PRIMASK, ip
    int found_bit = -1;
100012e4:	2001      	movs	r0, #1
100012e6:	4240      	negs	r0, r0
    if (found_bit < 0 && required) {
100012e8:	4643      	mov	r3, r8
100012ea:	2b00      	cmp	r3, #0
100012ec:	d0ea      	beq.n	100012c4 <hw_claim_unused_from_range+0x68>
        panic(message);
100012ee:	9808      	ldr	r0, [sp, #32]
100012f0:	f002 fba6 	bl	10003a40 <panic>
100012f4:	d000012c 	.word	0xd000012c

100012f8 <clock_configure>:
    hw_clear_bits(&clock->ctrl, CLOCKS_CLK_USB_CTRL_ENABLE_BITS);
    configured_freq[clk_index] = 0;
}

/// \tag::clock_configure[]
bool clock_configure(enum clock_index clk_index, uint32_t src, uint32_t auxsrc, uint32_t src_freq, uint32_t freq) {
100012f8:	b5f0      	push	{r4, r5, r6, r7, lr}
100012fa:	464f      	mov	r7, r9
100012fc:	4646      	mov	r6, r8
100012fe:	46d6      	mov	lr, sl
10001300:	b5c0      	push	{r6, r7, lr}
10001302:	0017      	movs	r7, r2
    uint32_t div;

    assert(src_freq >= freq);

    if (freq > src_freq)
10001304:	9a08      	ldr	r2, [sp, #32]
bool clock_configure(enum clock_index clk_index, uint32_t src, uint32_t auxsrc, uint32_t src_freq, uint32_t freq) {
10001306:	0005      	movs	r5, r0
10001308:	4688      	mov	r8, r1
    if (freq > src_freq)
1000130a:	429a      	cmp	r2, r3
1000130c:	d865      	bhi.n	100013da <clock_configure+0xe2>
        return false;

    // Div register is 24.8 int.frac divider so multiply by 2^8 (left shift by 8)
    div = (uint32_t) (((uint64_t) src_freq << 8) / freq);
1000130e:	0e19      	lsrs	r1, r3, #24
10001310:	0218      	lsls	r0, r3, #8
10001312:	2300      	movs	r3, #0
10001314:	f7ff f874 	bl	10000400 <__wrap___aeabi_uldivmod>

    clock_hw_t *clock = &clocks_hw->clk[clk_index];
10001318:	4b31      	ldr	r3, [pc, #196]	; (100013e0 <clock_configure+0xe8>)
1000131a:	006c      	lsls	r4, r5, #1
1000131c:	469c      	mov	ip, r3
1000131e:	1964      	adds	r4, r4, r5
10001320:	00a4      	lsls	r4, r4, #2
10001322:	4464      	add	r4, ip

    // If increasing divisor, set divisor before source. Otherwise set source
    // before divisor. This avoids a momentary overspeed when e.g. switching
    // to a faster source and increasing divisor to compensate.
    if (div > clock->div)
10001324:	6863      	ldr	r3, [r4, #4]
    div = (uint32_t) (((uint64_t) src_freq << 8) / freq);
10001326:	4681      	mov	r9, r0
    if (div > clock->div)
10001328:	4298      	cmp	r0, r3
1000132a:	d900      	bls.n	1000132e <clock_configure+0x36>
        clock->div = div;
1000132c:	6060      	str	r0, [r4, #4]
    return clk_index == clk_sys || clk_index == clk_ref;
1000132e:	1f2b      	subs	r3, r5, #4
10001330:	b2db      	uxtb	r3, r3
10001332:	469a      	mov	sl, r3

    // If switching a glitchless slice (ref or sys) to an aux source, switch
    // away from aux *first* to avoid passing glitches when changing aux mux.
    // Assume (!!!) glitchless source 0 is no faster than the aux source.
    if (has_glitchless_mux(clk_index) && src == CLOCKS_CLK_SYS_CTRL_SRC_VALUE_CLKSRC_CLK_SYS_AUX) {
10001334:	2b01      	cmp	r3, #1
10001336:	d92c      	bls.n	10001392 <clock_configure+0x9a>
 *
 * \param addr Address of writable register
 * \param mask Bit-mask specifying bits to clear
 */
inline static void hw_clear_bits(io_rw_32 *addr, uint32_t mask) {
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10001338:	23c0      	movs	r3, #192	; 0xc0
1000133a:	2280      	movs	r2, #128	; 0x80
    // If no glitchless mux, cleanly stop the clock to avoid glitches
    // propagating when changing aux mux. Note it would be a really bad idea
    // to do this on one of the glitchless clocks (clk_sys, clk_ref).
    else {
        hw_clear_bits(&clock->ctrl, CLOCKS_CLK_GPOUT0_CTRL_ENABLE_BITS);
        if (configured_freq[clk_index] > 0) {
1000133c:	4e29      	ldr	r6, [pc, #164]	; (100013e4 <clock_configure+0xec>)
1000133e:	00ad      	lsls	r5, r5, #2
10001340:	019b      	lsls	r3, r3, #6
10001342:	5971      	ldr	r1, [r6, r5]
10001344:	4323      	orrs	r3, r4
10001346:	0112      	lsls	r2, r2, #4
10001348:	601a      	str	r2, [r3, #0]
1000134a:	2900      	cmp	r1, #0
1000134c:	d005      	beq.n	1000135a <clock_configure+0x62>
            // Delay for 3 cycles of the target clock, for ENABLE propagation.
            // Note XOSC_COUNT is not helpful here because XOSC is not
            // necessarily running, nor is timer... so, 3 cycles per loop:
            uint delay_cyc = configured_freq[clk_sys] / configured_freq[clk_index] + 1;
1000134e:	6970      	ldr	r0, [r6, #20]
10001350:	f7ff f810 	bl	10000374 <__wrap___aeabi_uidiv>
10001354:	3001      	adds	r0, #1
            asm volatile (
10001356:	3801      	subs	r0, #1
10001358:	d1fd      	bne.n	10001356 <clock_configure+0x5e>
 * \param addr Address of writable register
 * \param values Bits values
 * \param write_mask Mask of bits to change
 */
inline static void hw_write_masked(io_rw_32 *addr, uint32_t values, uint32_t write_mask) {
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
1000135a:	6822      	ldr	r2, [r4, #0]
            );
        }
    }

    // Set aux mux first, and then glitchless mux if this clock has one
    hw_write_masked(&clock->ctrl,
1000135c:	017f      	lsls	r7, r7, #5
1000135e:	407a      	eors	r2, r7
10001360:	27e0      	movs	r7, #224	; 0xe0
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10001362:	2380      	movs	r3, #128	; 0x80
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10001364:	4017      	ands	r7, r2
        (auxsrc << CLOCKS_CLK_SYS_CTRL_AUXSRC_LSB),
        CLOCKS_CLK_SYS_CTRL_AUXSRC_BITS
    );

    if (has_glitchless_mux(clk_index)) {
10001366:	4652      	mov	r2, sl
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10001368:	015b      	lsls	r3, r3, #5
1000136a:	4323      	orrs	r3, r4
1000136c:	601f      	str	r7, [r3, #0]
1000136e:	2a01      	cmp	r2, #1
10001370:	d926      	bls.n	100013c0 <clock_configure+0xc8>
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10001372:	2380      	movs	r3, #128	; 0x80
10001374:	2280      	movs	r2, #128	; 0x80
10001376:	019b      	lsls	r3, r3, #6
10001378:	4323      	orrs	r3, r4
1000137a:	0112      	lsls	r2, r2, #4
1000137c:	601a      	str	r2, [r3, #0]

    hw_set_bits(&clock->ctrl, CLOCKS_CLK_GPOUT0_CTRL_ENABLE_BITS);

    // Now that the source is configured, we can trust that the user-supplied
    // divisor is a safe value.
    clock->div = div;
1000137e:	464b      	mov	r3, r9

    // Store the configured frequency
    configured_freq[clk_index] = freq;
10001380:	2001      	movs	r0, #1
    clock->div = div;
10001382:	6063      	str	r3, [r4, #4]
    configured_freq[clk_index] = freq;
10001384:	9b08      	ldr	r3, [sp, #32]
10001386:	5173      	str	r3, [r6, r5]

    return true;
}
10001388:	bce0      	pop	{r5, r6, r7}
1000138a:	46ba      	mov	sl, r7
1000138c:	46b1      	mov	r9, r6
1000138e:	46a8      	mov	r8, r5
10001390:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (has_glitchless_mux(clk_index) && src == CLOCKS_CLK_SYS_CTRL_SRC_VALUE_CLKSRC_CLK_SYS_AUX) {
10001392:	4643      	mov	r3, r8
10001394:	2b01      	cmp	r3, #1
10001396:	d1cf      	bne.n	10001338 <clock_configure+0x40>
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10001398:	23c0      	movs	r3, #192	; 0xc0
1000139a:	2203      	movs	r2, #3
1000139c:	019b      	lsls	r3, r3, #6
1000139e:	4323      	orrs	r3, r4
100013a0:	601a      	str	r2, [r3, #0]
        while (!(clock->selected & 1u))
100013a2:	3a02      	subs	r2, #2
100013a4:	68a3      	ldr	r3, [r4, #8]
100013a6:	421a      	tst	r2, r3
100013a8:	d0fc      	beq.n	100013a4 <clock_configure+0xac>
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
100013aa:	23e0      	movs	r3, #224	; 0xe0
100013ac:	6822      	ldr	r2, [r4, #0]
    hw_write_masked(&clock->ctrl,
100013ae:	017f      	lsls	r7, r7, #5
100013b0:	4057      	eors	r7, r2
100013b2:	401f      	ands	r7, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
100013b4:	2380      	movs	r3, #128	; 0x80
100013b6:	015b      	lsls	r3, r3, #5
100013b8:	4323      	orrs	r3, r4
100013ba:	4e0a      	ldr	r6, [pc, #40]	; (100013e4 <clock_configure+0xec>)
100013bc:	601f      	str	r7, [r3, #0]
    return clk_index == clk_sys || clk_index == clk_ref;
100013be:	00ad      	lsls	r5, r5, #2
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
100013c0:	4642      	mov	r2, r8
100013c2:	6821      	ldr	r1, [r4, #0]
100013c4:	4051      	eors	r1, r2
100013c6:	2203      	movs	r2, #3
100013c8:	400a      	ands	r2, r1
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
100013ca:	601a      	str	r2, [r3, #0]
        while (!(clock->selected & (1u << src)))
100013cc:	2201      	movs	r2, #1
100013ce:	4643      	mov	r3, r8
100013d0:	409a      	lsls	r2, r3
100013d2:	68a3      	ldr	r3, [r4, #8]
100013d4:	421a      	tst	r2, r3
100013d6:	d0fc      	beq.n	100013d2 <clock_configure+0xda>
100013d8:	e7cb      	b.n	10001372 <clock_configure+0x7a>
        return false;
100013da:	2000      	movs	r0, #0
100013dc:	e7d4      	b.n	10001388 <clock_configure+0x90>
100013de:	46c0      	nop			; (mov r8, r8)
100013e0:	40008000 	.word	0x40008000
100013e4:	20016c00 	.word	0x20016c00

100013e8 <clocks_init>:
/// \end::clock_configure[]

void clocks_init(void) {
100013e8:	b530      	push	{r4, r5, lr}
    // Start tick in watchdog
    watchdog_start_tick(XOSC_MHZ);
100013ea:	200c      	movs	r0, #12
void clocks_init(void) {
100013ec:	b083      	sub	sp, #12
    watchdog_start_tick(XOSC_MHZ);
100013ee:	f003 fc65 	bl	10004cbc <watchdog_start_tick>

    // Everything is 48MHz on FPGA apart from RTC. Otherwise set to 0 and will be set in clock configure
    if (running_on_fpga()) {
100013f2:	f000 ff91 	bl	10002318 <running_on_fpga>
100013f6:	2800      	cmp	r0, #0
100013f8:	d00e      	beq.n	10001418 <clocks_init+0x30>
        for (uint i = 0; i < CLK_COUNT; i++) {
            configured_freq[i] = 48 * MHZ;
100013fa:	4b9a      	ldr	r3, [pc, #616]	; (10001664 <clocks_init+0x27c>)
100013fc:	4a9a      	ldr	r2, [pc, #616]	; (10001668 <clocks_init+0x280>)
100013fe:	601a      	str	r2, [r3, #0]
10001400:	605a      	str	r2, [r3, #4]
10001402:	609a      	str	r2, [r3, #8]
10001404:	60da      	str	r2, [r3, #12]
10001406:	611a      	str	r2, [r3, #16]
10001408:	615a      	str	r2, [r3, #20]
1000140a:	619a      	str	r2, [r3, #24]
1000140c:	61da      	str	r2, [r3, #28]
1000140e:	621a      	str	r2, [r3, #32]
        }
        configured_freq[clk_rtc] = 46875;
10001410:	4a96      	ldr	r2, [pc, #600]	; (1000166c <clocks_init+0x284>)
10001412:	625a      	str	r2, [r3, #36]	; 0x24
    clock_configure(clk_peri,
                    0,
                    CLOCKS_CLK_PERI_CTRL_AUXSRC_VALUE_CLK_SYS,
                    125 * MHZ,
                    125 * MHZ);
}
10001414:	b003      	add	sp, #12
10001416:	bd30      	pop	{r4, r5, pc}
    clocks_hw->resus.ctrl = 0;
10001418:	4c95      	ldr	r4, [pc, #596]	; (10001670 <clocks_init+0x288>)
1000141a:	67a0      	str	r0, [r4, #120]	; 0x78
    xosc_init();
1000141c:	f003 fc56 	bl	10004ccc <xosc_init>
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10001420:	2201      	movs	r2, #1
10001422:	4b94      	ldr	r3, [pc, #592]	; (10001674 <clocks_init+0x28c>)
10001424:	601a      	str	r2, [r3, #0]
    while (clocks_hw->clk[clk_sys].selected != 0x1)
10001426:	6c63      	ldr	r3, [r4, #68]	; 0x44
10001428:	2b01      	cmp	r3, #1
1000142a:	d1fc      	bne.n	10001426 <clocks_init+0x3e>
1000142c:	2203      	movs	r2, #3
1000142e:	4b92      	ldr	r3, [pc, #584]	; (10001678 <clocks_init+0x290>)
10001430:	601a      	str	r2, [r3, #0]
    while (clocks_hw->clk[clk_ref].selected != 0x1)
10001432:	4a8f      	ldr	r2, [pc, #572]	; (10001670 <clocks_init+0x288>)
10001434:	6b93      	ldr	r3, [r2, #56]	; 0x38
10001436:	2b01      	cmp	r3, #1
10001438:	d1fc      	bne.n	10001434 <clocks_init+0x4c>
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
1000143a:	22c0      	movs	r2, #192	; 0xc0
1000143c:	4b8f      	ldr	r3, [pc, #572]	; (1000167c <clocks_init+0x294>)
1000143e:	0192      	lsls	r2, r2, #6
10001440:	601a      	str	r2, [r3, #0]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10001442:	4b8f      	ldr	r3, [pc, #572]	; (10001680 <clocks_init+0x298>)
 *
 * \param bits Bit pattern indicating blocks to unreset. See \ref reset_bitmask
 */
static inline void unreset_block_wait(uint32_t bits) {
    hw_clear_bits(&resets_hw->reset, bits);
    while (~resets_hw->reset_done & bits)
10001444:	498f      	ldr	r1, [pc, #572]	; (10001684 <clocks_init+0x29c>)
10001446:	601a      	str	r2, [r3, #0]
10001448:	0010      	movs	r0, r2
1000144a:	688b      	ldr	r3, [r1, #8]
1000144c:	4398      	bics	r0, r3
1000144e:	1e03      	subs	r3, r0, #0
10001450:	d1fa      	bne.n	10001448 <clocks_init+0x60>
    pll_init(pll_sys, 1, 1500 * MHZ, 6, 2);
10001452:	2402      	movs	r4, #2
10001454:	2101      	movs	r1, #1
10001456:	4a8c      	ldr	r2, [pc, #560]	; (10001688 <clocks_init+0x2a0>)
10001458:	488c      	ldr	r0, [pc, #560]	; (1000168c <clocks_init+0x2a4>)
1000145a:	3306      	adds	r3, #6
1000145c:	9400      	str	r4, [sp, #0]
1000145e:	f000 ff63 	bl	10002328 <pll_init>
    pll_init(pll_usb, 1, 480 * MHZ, 5, 2);
10001462:	2305      	movs	r3, #5
10001464:	4a8a      	ldr	r2, [pc, #552]	; (10001690 <clocks_init+0x2a8>)
10001466:	2101      	movs	r1, #1
10001468:	488a      	ldr	r0, [pc, #552]	; (10001694 <clocks_init+0x2ac>)
1000146a:	9400      	str	r4, [sp, #0]
1000146c:	f000 ff5c 	bl	10002328 <pll_init>
    if (div > clock->div)
10001470:	4b89      	ldr	r3, [pc, #548]	; (10001698 <clocks_init+0x2b0>)
10001472:	685a      	ldr	r2, [r3, #4]
10001474:	2aff      	cmp	r2, #255	; 0xff
10001476:	d802      	bhi.n	1000147e <clocks_init+0x96>
        clock->div = div;
10001478:	2280      	movs	r2, #128	; 0x80
1000147a:	0052      	lsls	r2, r2, #1
1000147c:	605a      	str	r2, [r3, #4]
1000147e:	2280      	movs	r2, #128	; 0x80
        if (configured_freq[clk_index] > 0) {
10001480:	4c78      	ldr	r4, [pc, #480]	; (10001664 <clocks_init+0x27c>)
10001482:	4b7d      	ldr	r3, [pc, #500]	; (10001678 <clocks_init+0x290>)
10001484:	6921      	ldr	r1, [r4, #16]
10001486:	0112      	lsls	r2, r2, #4
10001488:	4d83      	ldr	r5, [pc, #524]	; (10001698 <clocks_init+0x2b0>)
1000148a:	601a      	str	r2, [r3, #0]
1000148c:	2900      	cmp	r1, #0
1000148e:	d005      	beq.n	1000149c <clocks_init+0xb4>
            uint delay_cyc = configured_freq[clk_sys] / configured_freq[clk_index] + 1;
10001490:	6960      	ldr	r0, [r4, #20]
10001492:	f7fe ff6f 	bl	10000374 <__wrap___aeabi_uidiv>
10001496:	3001      	adds	r0, #1
            asm volatile (
10001498:	3801      	subs	r0, #1
1000149a:	d1fd      	bne.n	10001498 <clocks_init+0xb0>
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
1000149c:	21e0      	movs	r1, #224	; 0xe0
1000149e:	4b7e      	ldr	r3, [pc, #504]	; (10001698 <clocks_init+0x2b0>)
100014a0:	2002      	movs	r0, #2
100014a2:	681a      	ldr	r2, [r3, #0]
100014a4:	4011      	ands	r1, r2
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
100014a6:	2280      	movs	r2, #128	; 0x80
100014a8:	0152      	lsls	r2, r2, #5
100014aa:	432a      	orrs	r2, r5
100014ac:	6011      	str	r1, [r2, #0]
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
100014ae:	6819      	ldr	r1, [r3, #0]
100014b0:	4048      	eors	r0, r1
100014b2:	2103      	movs	r1, #3
100014b4:	4001      	ands	r1, r0
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
100014b6:	6011      	str	r1, [r2, #0]
        while (!(clock->selected & (1u << src)))
100014b8:	2104      	movs	r1, #4
100014ba:	689a      	ldr	r2, [r3, #8]
100014bc:	4211      	tst	r1, r2
100014be:	d0fc      	beq.n	100014ba <clocks_init+0xd2>
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
100014c0:	2280      	movs	r2, #128	; 0x80
100014c2:	2180      	movs	r1, #128	; 0x80
100014c4:	0192      	lsls	r2, r2, #6
100014c6:	432a      	orrs	r2, r5
100014c8:	0109      	lsls	r1, r1, #4
100014ca:	6011      	str	r1, [r2, #0]
    clock->div = div;
100014cc:	2280      	movs	r2, #128	; 0x80
100014ce:	0052      	lsls	r2, r2, #1
100014d0:	605a      	str	r2, [r3, #4]
    configured_freq[clk_index] = freq;
100014d2:	4b72      	ldr	r3, [pc, #456]	; (1000169c <clocks_init+0x2b4>)
100014d4:	6123      	str	r3, [r4, #16]
    if (div > clock->div)
100014d6:	4b72      	ldr	r3, [pc, #456]	; (100016a0 <clocks_init+0x2b8>)
100014d8:	6859      	ldr	r1, [r3, #4]
100014da:	29ff      	cmp	r1, #255	; 0xff
100014dc:	d800      	bhi.n	100014e0 <clocks_init+0xf8>
        clock->div = div;
100014de:	605a      	str	r2, [r3, #4]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
100014e0:	2103      	movs	r1, #3
100014e2:	4a64      	ldr	r2, [pc, #400]	; (10001674 <clocks_init+0x28c>)
100014e4:	4b6e      	ldr	r3, [pc, #440]	; (100016a0 <clocks_init+0x2b8>)
100014e6:	6011      	str	r1, [r2, #0]
        while (!(clock->selected & 1u))
100014e8:	3902      	subs	r1, #2
100014ea:	689a      	ldr	r2, [r3, #8]
100014ec:	4211      	tst	r1, r2
100014ee:	d0fc      	beq.n	100014ea <clocks_init+0x102>
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
100014f0:	20e0      	movs	r0, #224	; 0xe0
100014f2:	681a      	ldr	r2, [r3, #0]
100014f4:	4010      	ands	r0, r2
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
100014f6:	2280      	movs	r2, #128	; 0x80
100014f8:	0152      	lsls	r2, r2, #5
100014fa:	431a      	orrs	r2, r3
100014fc:	6010      	str	r0, [r2, #0]
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
100014fe:	6818      	ldr	r0, [r3, #0]
10001500:	4048      	eors	r0, r1
10001502:	2103      	movs	r1, #3
10001504:	4001      	ands	r1, r0
        while (!(clock->selected & (1u << src)))
10001506:	2002      	movs	r0, #2
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10001508:	6011      	str	r1, [r2, #0]
1000150a:	4965      	ldr	r1, [pc, #404]	; (100016a0 <clocks_init+0x2b8>)
1000150c:	688a      	ldr	r2, [r1, #8]
1000150e:	4210      	tst	r0, r2
10001510:	d0fc      	beq.n	1000150c <clocks_init+0x124>
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10001512:	2280      	movs	r2, #128	; 0x80
10001514:	0192      	lsls	r2, r2, #6
10001516:	4313      	orrs	r3, r2
10001518:	2280      	movs	r2, #128	; 0x80
1000151a:	0112      	lsls	r2, r2, #4
1000151c:	601a      	str	r2, [r3, #0]
    clock->div = div;
1000151e:	2280      	movs	r2, #128	; 0x80
    configured_freq[clk_index] = freq;
10001520:	4b60      	ldr	r3, [pc, #384]	; (100016a4 <clocks_init+0x2bc>)
    clock->div = div;
10001522:	0052      	lsls	r2, r2, #1
10001524:	604a      	str	r2, [r1, #4]
    configured_freq[clk_index] = freq;
10001526:	6163      	str	r3, [r4, #20]
    if (div > clock->div)
10001528:	4b5f      	ldr	r3, [pc, #380]	; (100016a8 <clocks_init+0x2c0>)
1000152a:	6859      	ldr	r1, [r3, #4]
1000152c:	29ff      	cmp	r1, #255	; 0xff
1000152e:	d800      	bhi.n	10001532 <clocks_init+0x14a>
        clock->div = div;
10001530:	605a      	str	r2, [r3, #4]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10001532:	2280      	movs	r2, #128	; 0x80
10001534:	4b5d      	ldr	r3, [pc, #372]	; (100016ac <clocks_init+0x2c4>)
        if (configured_freq[clk_index] > 0) {
10001536:	69e1      	ldr	r1, [r4, #28]
10001538:	0112      	lsls	r2, r2, #4
1000153a:	4d5b      	ldr	r5, [pc, #364]	; (100016a8 <clocks_init+0x2c0>)
1000153c:	601a      	str	r2, [r3, #0]
1000153e:	2900      	cmp	r1, #0
10001540:	d005      	beq.n	1000154e <clocks_init+0x166>
            uint delay_cyc = configured_freq[clk_sys] / configured_freq[clk_index] + 1;
10001542:	6960      	ldr	r0, [r4, #20]
10001544:	f7fe ff16 	bl	10000374 <__wrap___aeabi_uidiv>
10001548:	3001      	adds	r0, #1
            asm volatile (
1000154a:	3801      	subs	r0, #1
1000154c:	d1fd      	bne.n	1000154a <clocks_init+0x162>
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
1000154e:	22e0      	movs	r2, #224	; 0xe0
10001550:	4955      	ldr	r1, [pc, #340]	; (100016a8 <clocks_init+0x2c0>)
10001552:	680b      	ldr	r3, [r1, #0]
10001554:	401a      	ands	r2, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10001556:	2380      	movs	r3, #128	; 0x80
10001558:	015b      	lsls	r3, r3, #5
1000155a:	432b      	orrs	r3, r5
1000155c:	601a      	str	r2, [r3, #0]
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
1000155e:	2380      	movs	r3, #128	; 0x80
10001560:	2280      	movs	r2, #128	; 0x80
10001562:	019b      	lsls	r3, r3, #6
10001564:	432b      	orrs	r3, r5
10001566:	0112      	lsls	r2, r2, #4
10001568:	601a      	str	r2, [r3, #0]
    clock->div = div;
1000156a:	2280      	movs	r2, #128	; 0x80
    configured_freq[clk_index] = freq;
1000156c:	4b3e      	ldr	r3, [pc, #248]	; (10001668 <clocks_init+0x280>)
    clock->div = div;
1000156e:	0052      	lsls	r2, r2, #1
10001570:	604a      	str	r2, [r1, #4]
    configured_freq[clk_index] = freq;
10001572:	61e3      	str	r3, [r4, #28]
    if (div > clock->div)
10001574:	4b4e      	ldr	r3, [pc, #312]	; (100016b0 <clocks_init+0x2c8>)
10001576:	6859      	ldr	r1, [r3, #4]
10001578:	29ff      	cmp	r1, #255	; 0xff
1000157a:	d800      	bhi.n	1000157e <clocks_init+0x196>
        clock->div = div;
1000157c:	605a      	str	r2, [r3, #4]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
1000157e:	2280      	movs	r2, #128	; 0x80
10001580:	4b4c      	ldr	r3, [pc, #304]	; (100016b4 <clocks_init+0x2cc>)
        if (configured_freq[clk_index] > 0) {
10001582:	6a21      	ldr	r1, [r4, #32]
10001584:	0112      	lsls	r2, r2, #4
10001586:	4d4a      	ldr	r5, [pc, #296]	; (100016b0 <clocks_init+0x2c8>)
10001588:	601a      	str	r2, [r3, #0]
1000158a:	2900      	cmp	r1, #0
1000158c:	d005      	beq.n	1000159a <clocks_init+0x1b2>
            uint delay_cyc = configured_freq[clk_sys] / configured_freq[clk_index] + 1;
1000158e:	6960      	ldr	r0, [r4, #20]
10001590:	f7fe fef0 	bl	10000374 <__wrap___aeabi_uidiv>
10001594:	3001      	adds	r0, #1
            asm volatile (
10001596:	3801      	subs	r0, #1
10001598:	d1fd      	bne.n	10001596 <clocks_init+0x1ae>
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
1000159a:	22e0      	movs	r2, #224	; 0xe0
1000159c:	4944      	ldr	r1, [pc, #272]	; (100016b0 <clocks_init+0x2c8>)
1000159e:	680b      	ldr	r3, [r1, #0]
100015a0:	401a      	ands	r2, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
100015a2:	2380      	movs	r3, #128	; 0x80
100015a4:	015b      	lsls	r3, r3, #5
100015a6:	432b      	orrs	r3, r5
100015a8:	601a      	str	r2, [r3, #0]
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
100015aa:	2380      	movs	r3, #128	; 0x80
100015ac:	2280      	movs	r2, #128	; 0x80
100015ae:	019b      	lsls	r3, r3, #6
100015b0:	432b      	orrs	r3, r5
100015b2:	0112      	lsls	r2, r2, #4
100015b4:	601a      	str	r2, [r3, #0]
    clock->div = div;
100015b6:	2380      	movs	r3, #128	; 0x80
    if (div > clock->div)
100015b8:	2280      	movs	r2, #128	; 0x80
    clock->div = div;
100015ba:	005b      	lsls	r3, r3, #1
100015bc:	604b      	str	r3, [r1, #4]
    configured_freq[clk_index] = freq;
100015be:	4b2a      	ldr	r3, [pc, #168]	; (10001668 <clocks_init+0x280>)
    if (div > clock->div)
100015c0:	02d2      	lsls	r2, r2, #11
    configured_freq[clk_index] = freq;
100015c2:	6223      	str	r3, [r4, #32]
    if (div > clock->div)
100015c4:	4b3c      	ldr	r3, [pc, #240]	; (100016b8 <clocks_init+0x2d0>)
100015c6:	6859      	ldr	r1, [r3, #4]
100015c8:	4291      	cmp	r1, r2
100015ca:	d200      	bcs.n	100015ce <clocks_init+0x1e6>
        clock->div = div;
100015cc:	605a      	str	r2, [r3, #4]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
100015ce:	2280      	movs	r2, #128	; 0x80
100015d0:	4b3a      	ldr	r3, [pc, #232]	; (100016bc <clocks_init+0x2d4>)
        if (configured_freq[clk_index] > 0) {
100015d2:	6a61      	ldr	r1, [r4, #36]	; 0x24
100015d4:	0112      	lsls	r2, r2, #4
100015d6:	4d38      	ldr	r5, [pc, #224]	; (100016b8 <clocks_init+0x2d0>)
100015d8:	601a      	str	r2, [r3, #0]
100015da:	2900      	cmp	r1, #0
100015dc:	d005      	beq.n	100015ea <clocks_init+0x202>
            uint delay_cyc = configured_freq[clk_sys] / configured_freq[clk_index] + 1;
100015de:	6960      	ldr	r0, [r4, #20]
100015e0:	f7fe fec8 	bl	10000374 <__wrap___aeabi_uidiv>
100015e4:	3001      	adds	r0, #1
            asm volatile (
100015e6:	3801      	subs	r0, #1
100015e8:	d1fd      	bne.n	100015e6 <clocks_init+0x1fe>
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
100015ea:	22e0      	movs	r2, #224	; 0xe0
100015ec:	4932      	ldr	r1, [pc, #200]	; (100016b8 <clocks_init+0x2d0>)
100015ee:	680b      	ldr	r3, [r1, #0]
100015f0:	401a      	ands	r2, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
100015f2:	2380      	movs	r3, #128	; 0x80
100015f4:	015b      	lsls	r3, r3, #5
100015f6:	432b      	orrs	r3, r5
100015f8:	601a      	str	r2, [r3, #0]
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
100015fa:	2380      	movs	r3, #128	; 0x80
100015fc:	2280      	movs	r2, #128	; 0x80
100015fe:	019b      	lsls	r3, r3, #6
10001600:	432b      	orrs	r3, r5
10001602:	0112      	lsls	r2, r2, #4
10001604:	601a      	str	r2, [r3, #0]
    clock->div = div;
10001606:	2380      	movs	r3, #128	; 0x80
10001608:	02db      	lsls	r3, r3, #11
1000160a:	604b      	str	r3, [r1, #4]
    configured_freq[clk_index] = freq;
1000160c:	4b17      	ldr	r3, [pc, #92]	; (1000166c <clocks_init+0x284>)
1000160e:	6263      	str	r3, [r4, #36]	; 0x24
    if (div > clock->div)
10001610:	4b2b      	ldr	r3, [pc, #172]	; (100016c0 <clocks_init+0x2d8>)
10001612:	685a      	ldr	r2, [r3, #4]
10001614:	2aff      	cmp	r2, #255	; 0xff
10001616:	d802      	bhi.n	1000161e <clocks_init+0x236>
        clock->div = div;
10001618:	2280      	movs	r2, #128	; 0x80
1000161a:	0052      	lsls	r2, r2, #1
1000161c:	605a      	str	r2, [r3, #4]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
1000161e:	2280      	movs	r2, #128	; 0x80
10001620:	4b28      	ldr	r3, [pc, #160]	; (100016c4 <clocks_init+0x2dc>)
        if (configured_freq[clk_index] > 0) {
10001622:	69a1      	ldr	r1, [r4, #24]
10001624:	0112      	lsls	r2, r2, #4
10001626:	4d26      	ldr	r5, [pc, #152]	; (100016c0 <clocks_init+0x2d8>)
10001628:	601a      	str	r2, [r3, #0]
1000162a:	2900      	cmp	r1, #0
1000162c:	d005      	beq.n	1000163a <clocks_init+0x252>
            uint delay_cyc = configured_freq[clk_sys] / configured_freq[clk_index] + 1;
1000162e:	6960      	ldr	r0, [r4, #20]
10001630:	f7fe fea0 	bl	10000374 <__wrap___aeabi_uidiv>
10001634:	3001      	adds	r0, #1
            asm volatile (
10001636:	3801      	subs	r0, #1
10001638:	d1fd      	bne.n	10001636 <clocks_init+0x24e>
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
1000163a:	22e0      	movs	r2, #224	; 0xe0
1000163c:	4920      	ldr	r1, [pc, #128]	; (100016c0 <clocks_init+0x2d8>)
1000163e:	680b      	ldr	r3, [r1, #0]
10001640:	401a      	ands	r2, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10001642:	2380      	movs	r3, #128	; 0x80
10001644:	015b      	lsls	r3, r3, #5
10001646:	432b      	orrs	r3, r5
10001648:	601a      	str	r2, [r3, #0]
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
1000164a:	2380      	movs	r3, #128	; 0x80
1000164c:	2280      	movs	r2, #128	; 0x80
1000164e:	019b      	lsls	r3, r3, #6
10001650:	432b      	orrs	r3, r5
10001652:	0112      	lsls	r2, r2, #4
10001654:	601a      	str	r2, [r3, #0]
    clock->div = div;
10001656:	2380      	movs	r3, #128	; 0x80
10001658:	005b      	lsls	r3, r3, #1
1000165a:	604b      	str	r3, [r1, #4]
    configured_freq[clk_index] = freq;
1000165c:	4b11      	ldr	r3, [pc, #68]	; (100016a4 <clocks_init+0x2bc>)
1000165e:	61a3      	str	r3, [r4, #24]
    return true;
10001660:	e6d8      	b.n	10001414 <clocks_init+0x2c>
10001662:	46c0      	nop			; (mov r8, r8)
10001664:	20016c00 	.word	0x20016c00
10001668:	02dc6c00 	.word	0x02dc6c00
1000166c:	0000b71b 	.word	0x0000b71b
10001670:	40008000 	.word	0x40008000
10001674:	4000b03c 	.word	0x4000b03c
10001678:	4000b030 	.word	0x4000b030
1000167c:	4000e000 	.word	0x4000e000
10001680:	4000f000 	.word	0x4000f000
10001684:	4000c000 	.word	0x4000c000
10001688:	59682f00 	.word	0x59682f00
1000168c:	40028000 	.word	0x40028000
10001690:	1c9c3800 	.word	0x1c9c3800
10001694:	4002c000 	.word	0x4002c000
10001698:	40008030 	.word	0x40008030
1000169c:	00b71b00 	.word	0x00b71b00
100016a0:	4000803c 	.word	0x4000803c
100016a4:	07735940 	.word	0x07735940
100016a8:	40008054 	.word	0x40008054
100016ac:	4000b054 	.word	0x4000b054
100016b0:	40008060 	.word	0x40008060
100016b4:	4000b060 	.word	0x4000b060
100016b8:	4000806c 	.word	0x4000806c
100016bc:	4000b06c 	.word	0x4000b06c
100016c0:	40008048 	.word	0x40008048
100016c4:	4000b048 	.word	0x4000b048

100016c8 <clock_get_hz>:

/// \tag::clock_get_hz[]
uint32_t clock_get_hz(enum clock_index clk_index) {
    return configured_freq[clk_index];
100016c8:	4b01      	ldr	r3, [pc, #4]	; (100016d0 <clock_get_hz+0x8>)
100016ca:	0080      	lsls	r0, r0, #2
100016cc:	58c0      	ldr	r0, [r0, r3]
}
100016ce:	4770      	bx	lr
100016d0:	20016c00 	.word	0x20016c00

100016d4 <critical_section_init>:

#if !PICO_NO_HARDWARE
static_assert(sizeof(critical_section_t) == 8, "");
#endif

void critical_section_init(critical_section_t *critsec) {
100016d4:	b510      	push	{r4, lr}
100016d6:	0004      	movs	r4, r0
    critical_section_init_with_lock_num(critsec, spin_lock_claim_unused(true));
100016d8:	2001      	movs	r0, #1
100016da:	f002 fd9f 	bl	1000421c <spin_lock_claim_unused>
100016de:	0001      	movs	r1, r0
}

void critical_section_init_with_lock_num(critical_section_t *critsec, uint lock_num) {
    lock_init(&critsec->core, lock_num);
100016e0:	0020      	movs	r0, r4
100016e2:	f000 faaf 	bl	10001c44 <lock_init>
    __asm volatile ("dmb");
100016e6:	f3bf 8f5f 	dmb	sy
}
100016ea:	bd10      	pop	{r4, pc}

100016ec <__aeabi_double_init>:

bool running_on_fpga();
uint8_t rp2040_chip_version();

static inline uint8_t rp2040_rom_version() {
    return *(uint8_t*)0x13;
100016ec:	2313      	movs	r3, #19
    panic("missing double function");
}
#endif
extern void double_table_shim_on_use_helper();

void __aeabi_double_init() {
100016ee:	b570      	push	{r4, r5, r6, lr}
    int rom_version = rp2040_rom_version();
100016f0:	781d      	ldrb	r5, [r3, #0]
#if PICO_DOUBLE_SUPPORT_ROM_V1
    if (rom_version == 1) {
100016f2:	2d01      	cmp	r5, #1
100016f4:	d010      	beq.n	10001718 <__aeabi_double_init+0x2c>
        for(uint i=0;i<SF_TABLE_V2_SIZE/4;i++) {
            sd_table[i] = (uintptr_t)missing_double_func_shim;
        }
    }
#endif
    if (rom_version >= 2) {
100016f6:	dd0b      	ble.n	10001710 <__aeabi_double_init+0x24>
        void *rom_table = rom_data_lookup(rom_table_code('S', 'D'));
100016f8:	4819      	ldr	r0, [pc, #100]	; (10001760 <__aeabi_double_init+0x74>)
100016fa:	f7ff fd43 	bl	10001184 <rom_data_lookup>
        assert(*((uint8_t *)(((void *)rom_data_lookup(rom_table_code('S', 'F')))-2)) * 4 >= SF_TABLE_V2_SIZE);
        memcpy(&sd_table, rom_table, SF_TABLE_V2_SIZE);
100016fe:	4c19      	ldr	r4, [pc, #100]	; (10001764 <__aeabi_double_init+0x78>)
        void *rom_table = rom_data_lookup(rom_table_code('S', 'D'));
10001700:	0001      	movs	r1, r0
        memcpy(&sd_table, rom_table, SF_TABLE_V2_SIZE);
10001702:	2280      	movs	r2, #128	; 0x80
10001704:	0020      	movs	r0, r4
10001706:	f7ff fd15 	bl	10001134 <__wrap___aeabi_memcpy>
                panic(NULL);
            }
#endif
        }
    }
    if (rom_version < 3) {
1000170a:	2d02      	cmp	r5, #2
1000170c:	d001      	beq.n	10001712 <__aeabi_double_init+0x26>
        // we use the unused entry for SINCOS
        sd_table[SF_TABLE_V3_FSINCOS / 4] = (uintptr_t) double_table_shim_on_use_helper;
    }
}
1000170e:	bd70      	pop	{r4, r5, r6, pc}
10001710:	4c14      	ldr	r4, [pc, #80]	; (10001764 <__aeabi_double_init+0x78>)
        sd_table[SF_TABLE_V3_FSINCOS / 4] = (uintptr_t) double_table_shim_on_use_helper;
10001712:	4b15      	ldr	r3, [pc, #84]	; (10001768 <__aeabi_double_init+0x7c>)
10001714:	64a3      	str	r3, [r4, #72]	; 0x48
}
10001716:	e7fa      	b.n	1000170e <__aeabi_double_init+0x22>
        sd_table[SF_TABLE_V3_FSINCOS / 4] = (uintptr_t) double_table_shim_on_use_helper;
10001718:	4b13      	ldr	r3, [pc, #76]	; (10001768 <__aeabi_double_init+0x7c>)
            sd_table[i] = (uintptr_t)double_table_shim_on_use_helper;
1000171a:	4c12      	ldr	r4, [pc, #72]	; (10001764 <__aeabi_double_init+0x78>)
1000171c:	6023      	str	r3, [r4, #0]
1000171e:	6063      	str	r3, [r4, #4]
10001720:	60a3      	str	r3, [r4, #8]
10001722:	60e3      	str	r3, [r4, #12]
10001724:	6123      	str	r3, [r4, #16]
10001726:	6163      	str	r3, [r4, #20]
10001728:	61a3      	str	r3, [r4, #24]
1000172a:	61e3      	str	r3, [r4, #28]
1000172c:	6223      	str	r3, [r4, #32]
1000172e:	6263      	str	r3, [r4, #36]	; 0x24
10001730:	62a3      	str	r3, [r4, #40]	; 0x28
10001732:	62e3      	str	r3, [r4, #44]	; 0x2c
10001734:	6323      	str	r3, [r4, #48]	; 0x30
10001736:	6363      	str	r3, [r4, #52]	; 0x34
10001738:	63a3      	str	r3, [r4, #56]	; 0x38
1000173a:	63e3      	str	r3, [r4, #60]	; 0x3c
1000173c:	6423      	str	r3, [r4, #64]	; 0x40
1000173e:	6463      	str	r3, [r4, #68]	; 0x44
10001740:	64a3      	str	r3, [r4, #72]	; 0x48
10001742:	64e3      	str	r3, [r4, #76]	; 0x4c
10001744:	6523      	str	r3, [r4, #80]	; 0x50
10001746:	6563      	str	r3, [r4, #84]	; 0x54
10001748:	65a3      	str	r3, [r4, #88]	; 0x58
1000174a:	65e3      	str	r3, [r4, #92]	; 0x5c
1000174c:	6623      	str	r3, [r4, #96]	; 0x60
1000174e:	6663      	str	r3, [r4, #100]	; 0x64
10001750:	66a3      	str	r3, [r4, #104]	; 0x68
10001752:	66e3      	str	r3, [r4, #108]	; 0x6c
10001754:	6723      	str	r3, [r4, #112]	; 0x70
10001756:	6763      	str	r3, [r4, #116]	; 0x74
10001758:	67a3      	str	r3, [r4, #120]	; 0x78
1000175a:	67e3      	str	r3, [r4, #124]	; 0x7c
        sd_table[SF_TABLE_V3_FSINCOS / 4] = (uintptr_t) double_table_shim_on_use_helper;
1000175c:	64a3      	str	r3, [r4, #72]	; 0x48
1000175e:	e7d6      	b.n	1000170e <__aeabi_double_init+0x22>
10001760:	00004453 	.word	0x00004453
10001764:	20008eb0 	.word	0x20008eb0
10001768:	100009d5 	.word	0x100009d5

1000176c <flash_get_unique_id>:
// Use standard RUID command to get a unique identifier for the flash (and
// hence the board)

static_assert(FLASH_UNIQUE_ID_SIZE_BYTES == FLASH_RUID_DATA_BYTES, "");

void flash_get_unique_id(uint8_t *id_out) {
1000176c:	b530      	push	{r4, r5, lr}
#if PICO_NO_FLASH
    panic_unsupported();
#else
    uint8_t txbuf[FLASH_RUID_TOTAL_BYTES] = {0};
1000176e:	2500      	movs	r5, #0
void flash_get_unique_id(uint8_t *id_out) {
10001770:	b089      	sub	sp, #36	; 0x24
10001772:	0004      	movs	r4, r0
    uint8_t txbuf[FLASH_RUID_TOTAL_BYTES] = {0};
10001774:	2209      	movs	r2, #9
10001776:	2100      	movs	r1, #0
10001778:	a801      	add	r0, sp, #4
1000177a:	9500      	str	r5, [sp, #0]
1000177c:	f7ff fcd4 	bl	10001128 <__wrap_memset>
    uint8_t rxbuf[FLASH_RUID_TOTAL_BYTES] = {0};
10001780:	2209      	movs	r2, #9
10001782:	2100      	movs	r1, #0
10001784:	a805      	add	r0, sp, #20
10001786:	9504      	str	r5, [sp, #16]
10001788:	f7ff fcce 	bl	10001128 <__wrap_memset>
    txbuf[0] = FLASH_RUID_CMD;
1000178c:	234b      	movs	r3, #75	; 0x4b
1000178e:	466a      	mov	r2, sp
    flash_do_cmd(txbuf, rxbuf, FLASH_RUID_TOTAL_BYTES);
10001790:	4668      	mov	r0, sp
    txbuf[0] = FLASH_RUID_CMD;
10001792:	7013      	strb	r3, [r2, #0]
    flash_do_cmd(txbuf, rxbuf, FLASH_RUID_TOTAL_BYTES);
10001794:	a904      	add	r1, sp, #16
10001796:	f009 fc1f 	bl	1000afd8 <__flash_do_cmd.constprop.0_veneer>
    for (int i = 0; i < FLASH_RUID_DATA_BYTES; i++)
        id_out[i] = rxbuf[i + 1 + FLASH_RUID_DUMMY_BYTES];
1000179a:	2115      	movs	r1, #21
1000179c:	2208      	movs	r2, #8
1000179e:	0020      	movs	r0, r4
100017a0:	4469      	add	r1, sp
100017a2:	f7ff fcc7 	bl	10001134 <__wrap___aeabi_memcpy>
#endif
}
100017a6:	b009      	add	sp, #36	; 0x24
100017a8:	bd30      	pop	{r4, r5, pc}
100017aa:	46c0      	nop			; (mov r8, r8)

100017ac <__aeabi_float_init>:
100017ac:	2313      	movs	r3, #19
static __attribute__((noreturn)) void missing_float_func_shim() {
    panic("");
}
#endif

void __aeabi_float_init() {
100017ae:	b510      	push	{r4, lr}
    int rom_version = rp2040_rom_version();
    void *rom_table = rom_data_lookup(rom_table_code('S', 'F'));
100017b0:	4812      	ldr	r0, [pc, #72]	; (100017fc <__aeabi_float_init+0x50>)
    int rom_version = rp2040_rom_version();
100017b2:	781c      	ldrb	r4, [r3, #0]
    void *rom_table = rom_data_lookup(rom_table_code('S', 'F'));
100017b4:	f7ff fce6 	bl	10001184 <rom_data_lookup>
100017b8:	0001      	movs	r1, r0
#if PICO_FLOAT_SUPPORT_ROM_V1
    if (rom_version == 1) {
100017ba:	2c01      	cmp	r4, #1
100017bc:	d00a      	beq.n	100017d4 <__aeabi_float_init+0x28>
        for(uint i=0;i<SF_TABLE_V2_SIZE/4;i++) {
            if (!sf_table[i]) sf_table[i] = (uintptr_t)missing_float_func_shim;
        }
    }
#endif
    if (rom_version >= 2) {
100017be:	dd03      	ble.n	100017c8 <__aeabi_float_init+0x1c>
        assert(*((uint8_t *)(rom_table-2)) * 4 >= SF_TABLE_V2_SIZE);
        memcpy(&sf_table, rom_table, SF_TABLE_V2_SIZE);
100017c0:	2280      	movs	r2, #128	; 0x80
100017c2:	480f      	ldr	r0, [pc, #60]	; (10001800 <__aeabi_float_init+0x54>)
100017c4:	f7ff fcb6 	bl	10001134 <__wrap___aeabi_memcpy>
    }
    sf_clz_func = rom_func_lookup(rom_table_code('L', '3'));
100017c8:	480e      	ldr	r0, [pc, #56]	; (10001804 <__aeabi_float_init+0x58>)
100017ca:	f7ff fcd3 	bl	10001174 <rom_func_lookup>
100017ce:	4b0e      	ldr	r3, [pc, #56]	; (10001808 <__aeabi_float_init+0x5c>)
100017d0:	6018      	str	r0, [r3, #0]
}
100017d2:	bd10      	pop	{r4, pc}
        memcpy(&sf_table, rom_table, SF_TABLE_V1_SIZE);
100017d4:	4c0a      	ldr	r4, [pc, #40]	; (10001800 <__aeabi_float_init+0x54>)
100017d6:	2254      	movs	r2, #84	; 0x54
100017d8:	0020      	movs	r0, r4
100017da:	f7ff fcab 	bl	10001134 <__wrap___aeabi_memcpy>
            sf_table[i] = (uintptr_t)float_table_shim_on_use_helper;
100017de:	4b0b      	ldr	r3, [pc, #44]	; (1000180c <__aeabi_float_init+0x60>)
100017e0:	6563      	str	r3, [r4, #84]	; 0x54
100017e2:	65a3      	str	r3, [r4, #88]	; 0x58
100017e4:	65e3      	str	r3, [r4, #92]	; 0x5c
100017e6:	6623      	str	r3, [r4, #96]	; 0x60
100017e8:	6663      	str	r3, [r4, #100]	; 0x64
100017ea:	66a3      	str	r3, [r4, #104]	; 0x68
100017ec:	66e3      	str	r3, [r4, #108]	; 0x6c
100017ee:	6723      	str	r3, [r4, #112]	; 0x70
100017f0:	6763      	str	r3, [r4, #116]	; 0x74
100017f2:	67a3      	str	r3, [r4, #120]	; 0x78
100017f4:	67e3      	str	r3, [r4, #124]	; 0x7c
        sf_table[SF_TABLE_FLOAT2INT/4] = sf_table[SF_TABLE_FLOAT2FIX/4] = (uintptr_t)float_table_shim_on_use_helper;
100017f6:	6223      	str	r3, [r4, #32]
100017f8:	61e3      	str	r3, [r4, #28]
    if (rom_version >= 2) {
100017fa:	e7e5      	b.n	100017c8 <__aeabi_float_init+0x1c>
100017fc:	00004653 	.word	0x00004653
10001800:	20008fb0 	.word	0x20008fb0
10001804:	0000334c 	.word	0x0000334c
10001808:	20017304 	.word	0x20017304
1000180c:	100010a5 	.word	0x100010a5

10001810 <gpio_set_function>:
// This also clears the input/output/irq override bits.
void gpio_set_function(uint gpio, enum gpio_function fn) {
    invalid_params_if(GPIO, gpio >= NUM_BANK0_GPIOS);
    invalid_params_if(GPIO, fn << IO_BANK0_GPIO0_CTRL_FUNCSEL_LSB & ~IO_BANK0_GPIO0_CTRL_FUNCSEL_BITS);
    // Set input enable on, output disable off
    hw_write_masked(&padsbank0_hw->io[gpio],
10001810:	4a09      	ldr	r2, [pc, #36]	; (10001838 <gpio_set_function+0x28>)
10001812:	0083      	lsls	r3, r0, #2
10001814:	4694      	mov	ip, r2
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10001816:	2240      	movs	r2, #64	; 0x40
10001818:	4463      	add	r3, ip
void gpio_set_function(uint gpio, enum gpio_function fn) {
1000181a:	b510      	push	{r4, lr}
1000181c:	681c      	ldr	r4, [r3, #0]
                   PADS_BANK0_GPIO0_IE_BITS,
                   PADS_BANK0_GPIO0_IE_BITS | PADS_BANK0_GPIO0_OD_BITS
    );
    // Zero all fields apart from fsel; we want this IO to do what the peripheral tells it.
    // This doesn't affect e.g. pullup/pulldown, as these are in pad controls.
    iobank0_hw->io[gpio].ctrl = fn << IO_BANK0_GPIO0_CTRL_FUNCSEL_LSB;
1000181e:	00c0      	lsls	r0, r0, #3
10001820:	4062      	eors	r2, r4
10001822:	24c0      	movs	r4, #192	; 0xc0
10001824:	4014      	ands	r4, r2
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10001826:	2280      	movs	r2, #128	; 0x80
10001828:	0152      	lsls	r2, r2, #5
1000182a:	4313      	orrs	r3, r2
1000182c:	601c      	str	r4, [r3, #0]
1000182e:	4b03      	ldr	r3, [pc, #12]	; (1000183c <gpio_set_function+0x2c>)
10001830:	469c      	mov	ip, r3
10001832:	4460      	add	r0, ip
10001834:	6041      	str	r1, [r0, #4]
}
10001836:	bd10      	pop	{r4, pc}
10001838:	4001c004 	.word	0x4001c004
1000183c:	40014000 	.word	0x40014000

10001840 <gpio_set_pulls>:

// Note that, on RP2040, setting both pulls enables a "bus keep" function,
// i.e. weak pull to whatever is current high/low state of GPIO.
void gpio_set_pulls(uint gpio, bool up, bool down) {
    invalid_params_if(GPIO, gpio >= NUM_BANK0_GPIOS);
    hw_write_masked(
10001840:	4b0a      	ldr	r3, [pc, #40]	; (1000186c <gpio_set_pulls+0x2c>)
10001842:	0080      	lsls	r0, r0, #2
10001844:	469c      	mov	ip, r3
            &padsbank0_hw->io[gpio],
            (!!up << PADS_BANK0_GPIO0_PUE_LSB) | (!!down << PADS_BANK0_GPIO0_PDE_LSB),
10001846:	2304      	movs	r3, #4
    hw_write_masked(
10001848:	4460      	add	r0, ip
            (!!up << PADS_BANK0_GPIO0_PUE_LSB) | (!!down << PADS_BANK0_GPIO0_PDE_LSB),
1000184a:	2900      	cmp	r1, #0
1000184c:	d001      	beq.n	10001852 <gpio_set_pulls+0x12>
1000184e:	2108      	movs	r1, #8
10001850:	230c      	movs	r3, #12
10001852:	2a00      	cmp	r2, #0
10001854:	d100      	bne.n	10001858 <gpio_set_pulls+0x18>
10001856:	000b      	movs	r3, r1
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10001858:	6802      	ldr	r2, [r0, #0]
1000185a:	4053      	eors	r3, r2
1000185c:	220c      	movs	r2, #12
1000185e:	401a      	ands	r2, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10001860:	2380      	movs	r3, #128	; 0x80
10001862:	015b      	lsls	r3, r3, #5
10001864:	4318      	orrs	r0, r3
10001866:	6002      	str	r2, [r0, #0]
            PADS_BANK0_GPIO0_PUE_BITS | PADS_BANK0_GPIO0_PDE_BITS
    );
}
10001868:	4770      	bx	lr
1000186a:	46c0      	nop			; (mov r8, r8)
1000186c:	4001c004 	.word	0x4001c004

10001870 <gpio_set_outover>:
    );
}

void gpio_set_outover(uint gpio, uint value) {
    invalid_params_if(GPIO, gpio >= NUM_BANK0_GPIOS);
    hw_write_masked(&iobank0_hw->io[gpio].ctrl,
10001870:	4b07      	ldr	r3, [pc, #28]	; (10001890 <gpio_set_outover+0x20>)
10001872:	00c0      	lsls	r0, r0, #3
10001874:	469c      	mov	ip, r3
10001876:	4460      	add	r0, ip
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10001878:	6803      	ldr	r3, [r0, #0]
                   value << IO_BANK0_GPIO0_CTRL_OUTOVER_LSB,
1000187a:	0209      	lsls	r1, r1, #8
1000187c:	4059      	eors	r1, r3
1000187e:	23c0      	movs	r3, #192	; 0xc0
10001880:	009b      	lsls	r3, r3, #2
10001882:	4019      	ands	r1, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10001884:	2380      	movs	r3, #128	; 0x80
10001886:	015b      	lsls	r3, r3, #5
10001888:	4318      	orrs	r0, r3
1000188a:	6001      	str	r1, [r0, #0]
                   IO_BANK0_GPIO0_CTRL_OUTOVER_BITS
    );
}
1000188c:	4770      	bx	lr
1000188e:	46c0      	nop			; (mov r8, r8)
10001890:	40014004 	.word	0x40014004

10001894 <gpio_init>:
    else
        hw_clear_bits(&padsbank0_hw->io[gpio], PADS_BANK0_GPIO0_IE_BITS);
}

void gpio_init(uint gpio) {
    sio_hw->gpio_oe_clr = 1ul << gpio;
10001894:	2301      	movs	r3, #1
10001896:	22d0      	movs	r2, #208	; 0xd0
10001898:	4083      	lsls	r3, r0
1000189a:	0612      	lsls	r2, r2, #24
1000189c:	6293      	str	r3, [r2, #40]	; 0x28
    sio_hw->gpio_clr = 1ul << gpio;
1000189e:	6193      	str	r3, [r2, #24]
    hw_write_masked(&padsbank0_hw->io[gpio],
100018a0:	4a09      	ldr	r2, [pc, #36]	; (100018c8 <gpio_init+0x34>)
100018a2:	0083      	lsls	r3, r0, #2
100018a4:	4694      	mov	ip, r2
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
100018a6:	2240      	movs	r2, #64	; 0x40
100018a8:	4463      	add	r3, ip
100018aa:	6819      	ldr	r1, [r3, #0]
    iobank0_hw->io[gpio].ctrl = fn << IO_BANK0_GPIO0_CTRL_FUNCSEL_LSB;
100018ac:	00c0      	lsls	r0, r0, #3
100018ae:	404a      	eors	r2, r1
100018b0:	21c0      	movs	r1, #192	; 0xc0
100018b2:	4011      	ands	r1, r2
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
100018b4:	2280      	movs	r2, #128	; 0x80
100018b6:	0152      	lsls	r2, r2, #5
100018b8:	4313      	orrs	r3, r2
100018ba:	6019      	str	r1, [r3, #0]
100018bc:	4b03      	ldr	r3, [pc, #12]	; (100018cc <gpio_init+0x38>)
100018be:	469c      	mov	ip, r3
100018c0:	2305      	movs	r3, #5
100018c2:	4460      	add	r0, ip
100018c4:	6043      	str	r3, [r0, #4]
    gpio_set_function(gpio, GPIO_FUNC_SIO);
}
100018c6:	4770      	bx	lr
100018c8:	4001c004 	.word	0x4001c004
100018cc:	40014000 	.word	0x40014000

100018d0 <irq_set_enabled>:
    invalid_params_if(IRQ, num >= NUM_IRQS);
}

void irq_set_enabled(uint num, bool enabled) {
    check_irq_param(num);
    irq_set_mask_enabled(1u << num, enabled);
100018d0:	2301      	movs	r3, #1
100018d2:	4083      	lsls	r3, r0
    check_irq_param(num);
    return 0 != ((1u << num) & *((io_rw_32 *) (PPB_BASE + M0PLUS_NVIC_ISER_OFFSET)));
}

void irq_set_mask_enabled(uint32_t mask, bool enabled) {
    if (enabled) {
100018d4:	2900      	cmp	r1, #0
100018d6:	d004      	beq.n	100018e2 <irq_set_enabled+0x12>
        // Clear pending before enable
        // (if IRQ is actually asserted, it will immediately re-pend)
        *((io_rw_32 *) (PPB_BASE + M0PLUS_NVIC_ICPR_OFFSET)) = mask;
100018d8:	4a03      	ldr	r2, [pc, #12]	; (100018e8 <irq_set_enabled+0x18>)
100018da:	6013      	str	r3, [r2, #0]
        *((io_rw_32 *) (PPB_BASE + M0PLUS_NVIC_ISER_OFFSET)) = mask;
100018dc:	4a03      	ldr	r2, [pc, #12]	; (100018ec <irq_set_enabled+0x1c>)
100018de:	6013      	str	r3, [r2, #0]
}
100018e0:	4770      	bx	lr
    } else {
        *((io_rw_32 *) (PPB_BASE + M0PLUS_NVIC_ICER_OFFSET)) = mask;
100018e2:	4a03      	ldr	r2, [pc, #12]	; (100018f0 <irq_set_enabled+0x20>)
100018e4:	6013      	str	r3, [r2, #0]
}
100018e6:	e7fb      	b.n	100018e0 <irq_set_enabled+0x10>
100018e8:	e000e280 	.word	0xe000e280
100018ec:	e000e100 	.word	0xe000e100
100018f0:	e000e180 	.word	0xe000e180

100018f4 <irq_set_pending>:
    }
}

void irq_set_pending(uint num) {
    check_irq_param(num);
    *((io_rw_32 *) (PPB_BASE + M0PLUS_NVIC_ISPR_OFFSET)) = 1u << num;
100018f4:	2301      	movs	r3, #1
100018f6:	4083      	lsls	r3, r0
100018f8:	4a01      	ldr	r2, [pc, #4]	; (10001900 <irq_set_pending+0xc>)
100018fa:	6013      	str	r3, [r2, #0]
}
100018fc:	4770      	bx	lr
100018fe:	46c0      	nop			; (mov r8, r8)
10001900:	e000e200 	.word	0xe000e200

10001904 <irq_get_vtable_handler>:
    return (irq_handler_t *) scb_hw->vtor;
10001904:	4b02      	ldr	r3, [pc, #8]	; (10001910 <irq_get_vtable_handler+0xc>)
    return (uintptr_t)raw_handler - (uintptr_t)irq_handler_chain_slots < sizeof(irq_handler_chain_slots);
}

irq_handler_t irq_get_vtable_handler(uint num) {
    check_irq_param(num);
    return get_vtable()[16 + num];
10001906:	3010      	adds	r0, #16
    return (irq_handler_t *) scb_hw->vtor;
10001908:	689b      	ldr	r3, [r3, #8]
    return get_vtable()[16 + num];
1000190a:	0080      	lsls	r0, r0, #2
1000190c:	58c0      	ldr	r0, [r0, r3]
}
1000190e:	4770      	bx	lr
10001910:	e000ed00 	.word	0xe000ed00

10001914 <irq_set_exclusive_handler>:

void irq_set_exclusive_handler(uint num, irq_handler_t handler) {
10001914:	b570      	push	{r4, r5, r6, lr}
10001916:	000d      	movs	r5, r1
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
10001918:	f3ef 8610 	mrs	r6, PRIMASK
    __asm volatile ("cpsid i");
1000191c:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
1000191e:	4a0f      	ldr	r2, [pc, #60]	; (1000195c <irq_set_exclusive_handler+0x48>)
10001920:	6813      	ldr	r3, [r2, #0]
10001922:	2b00      	cmp	r3, #0
10001924:	d0fc      	beq.n	10001920 <irq_set_exclusive_handler+0xc>
    __asm volatile ("dmb");
10001926:	f3bf 8f5f 	dmb	sy
    return (irq_handler_t *) scb_hw->vtor;
1000192a:	4b0d      	ldr	r3, [pc, #52]	; (10001960 <irq_set_exclusive_handler+0x4c>)
    return get_vtable()[16 + num];
1000192c:	3010      	adds	r0, #16
    return (irq_handler_t *) scb_hw->vtor;
1000192e:	689b      	ldr	r3, [r3, #8]
    return get_vtable()[16 + num];
10001930:	0084      	lsls	r4, r0, #2
10001932:	591b      	ldr	r3, [r3, r4]
    check_irq_param(num);
#if !PICO_NO_RAM_VECTOR_TABLE
    spin_lock_t *lock = spin_lock_instance(PICO_SPINLOCK_ID_IRQ);
    uint32_t save = spin_lock_blocking(lock);
    __unused irq_handler_t current = irq_get_vtable_handler(num);
    hard_assert(current == __unhandled_user_irq || current == handler);
10001934:	4a0b      	ldr	r2, [pc, #44]	; (10001964 <irq_set_exclusive_handler+0x50>)
10001936:	4293      	cmp	r3, r2
10001938:	d003      	beq.n	10001942 <irq_set_exclusive_handler+0x2e>
1000193a:	429d      	cmp	r5, r3
1000193c:	d001      	beq.n	10001942 <irq_set_exclusive_handler+0x2e>

#ifdef NDEBUG
extern void hard_assertion_failure();
static inline void hard_assert(bool condition, ...) {
    if (!condition)
        hard_assertion_failure();
1000193e:	f002 f897 	bl	10003a70 <hard_assertion_failure>
    return (irq_handler_t *) scb_hw->vtor;
10001942:	4b07      	ldr	r3, [pc, #28]	; (10001960 <irq_set_exclusive_handler+0x4c>)
10001944:	689b      	ldr	r3, [r3, #8]
    get_vtable()[16 + num] = handler;
10001946:	511d      	str	r5, [r3, r4]
10001948:	f3bf 8f5f 	dmb	sy
1000194c:	f3bf 8f5f 	dmb	sy
    *lock = 0;
10001950:	2200      	movs	r2, #0
10001952:	4b02      	ldr	r3, [pc, #8]	; (1000195c <irq_set_exclusive_handler+0x48>)
10001954:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10001956:	f386 8810 	msr	PRIMASK, r6
    set_raw_irq_handler_and_unlock(num, handler, save);
#else
    panic_unsupported();
#endif
}
1000195a:	bd70      	pop	{r4, r5, r6, pc}
1000195c:	d0000124 	.word	0xd0000124
10001960:	e000ed00 	.word	0xe000ed00
10001964:	100001cd 	.word	0x100001cd

10001968 <irq_remove_handler>:
    }
    set_raw_irq_handler_and_unlock(num, vtable_handler, save);
#endif
}

void irq_remove_handler(uint num, irq_handler_t handler) {
10001968:	b5f0      	push	{r4, r5, r6, r7, lr}
1000196a:	46de      	mov	lr, fp
1000196c:	4657      	mov	r7, sl
1000196e:	464e      	mov	r6, r9
10001970:	4645      	mov	r5, r8
10001972:	b5e0      	push	{r5, r6, r7, lr}
10001974:	000c      	movs	r4, r1
10001976:	b083      	sub	sp, #12
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
10001978:	f3ef 8a10 	mrs	sl, PRIMASK
    __asm volatile ("cpsid i");
1000197c:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
1000197e:	4a5e      	ldr	r2, [pc, #376]	; (10001af8 <irq_remove_handler+0x190>)
10001980:	6813      	ldr	r3, [r2, #0]
10001982:	2b00      	cmp	r3, #0
10001984:	d0fc      	beq.n	10001980 <irq_remove_handler+0x18>
    __asm volatile ("dmb");
10001986:	f3bf 8f5f 	dmb	sy
#if !PICO_NO_RAM_VECTOR_TABLE
    spin_lock_t *lock = spin_lock_instance(PICO_SPINLOCK_ID_IRQ);
    uint32_t save = spin_lock_blocking(lock);
    irq_handler_t vtable_handler = get_vtable()[16 + num];
1000198a:	2210      	movs	r2, #16
1000198c:	4691      	mov	r9, r2
1000198e:	4481      	add	r9, r0
10001990:	464a      	mov	r2, r9
    return (irq_handler_t *) scb_hw->vtor;
10001992:	4b5a      	ldr	r3, [pc, #360]	; (10001afc <irq_remove_handler+0x194>)
    irq_handler_t vtable_handler = get_vtable()[16 + num];
10001994:	0096      	lsls	r6, r2, #2
    return (irq_handler_t *) scb_hw->vtor;
10001996:	689b      	ldr	r3, [r3, #8]
    irq_handler_t vtable_handler = get_vtable()[16 + num];
10001998:	599d      	ldr	r5, [r3, r6]
    if (vtable_handler != __unhandled_user_irq && vtable_handler != handler) {
1000199a:	4b59      	ldr	r3, [pc, #356]	; (10001b00 <irq_remove_handler+0x198>)
1000199c:	4698      	mov	r8, r3
1000199e:	429d      	cmp	r5, r3
100019a0:	d005      	beq.n	100019ae <irq_remove_handler+0x46>
100019a2:	42a5      	cmp	r5, r4
100019a4:	d016      	beq.n	100019d4 <irq_remove_handler+0x6c>
    return (uintptr_t)raw_handler - (uintptr_t)irq_handler_chain_slots < sizeof(irq_handler_chain_slots);
100019a6:	4f57      	ldr	r7, [pc, #348]	; (10001b04 <irq_remove_handler+0x19c>)
100019a8:	1beb      	subs	r3, r5, r7
#if !PICO_DISABLE_SHARED_IRQ_HANDLERS && PICO_MAX_SHARED_IRQ_HANDLERS
        if (is_shared_irq_raw_handler(vtable_handler)) {
100019aa:	2b2f      	cmp	r3, #47	; 0x2f
100019ac:	d914      	bls.n	100019d8 <irq_remove_handler+0x70>
    return (irq_handler_t *) scb_hw->vtor;
100019ae:	4b53      	ldr	r3, [pc, #332]	; (10001afc <irq_remove_handler+0x194>)
100019b0:	689b      	ldr	r3, [r3, #8]
    get_vtable()[16 + num] = handler;
100019b2:	519d      	str	r5, [r3, r6]
100019b4:	f3bf 8f5f 	dmb	sy
100019b8:	f3bf 8f5f 	dmb	sy
    *lock = 0;
100019bc:	2200      	movs	r2, #0
100019be:	4b4e      	ldr	r3, [pc, #312]	; (10001af8 <irq_remove_handler+0x190>)
100019c0:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
100019c2:	f38a 8810 	msr	PRIMASK, sl
    }
    set_raw_irq_handler_and_unlock(num, vtable_handler, save);
#else
    panic_unsupported();
#endif
}
100019c6:	b003      	add	sp, #12
100019c8:	bcf0      	pop	{r4, r5, r6, r7}
100019ca:	46bb      	mov	fp, r7
100019cc:	46b2      	mov	sl, r6
100019ce:	46a9      	mov	r9, r5
100019d0:	46a0      	mov	r8, r4
100019d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        vtable_handler = __unhandled_user_irq;
100019d4:	001d      	movs	r5, r3
100019d6:	e7ea      	b.n	100019ae <irq_remove_handler+0x46>
    return 0 != ((1u << num) & *((io_rw_32 *) (PPB_BASE + M0PLUS_NVIC_ISER_OFFSET)));
100019d8:	2301      	movs	r3, #1
100019da:	4083      	lsls	r3, r0
100019dc:	469b      	mov	fp, r3
100019de:	465a      	mov	r2, fp
100019e0:	4b49      	ldr	r3, [pc, #292]	; (10001b08 <irq_remove_handler+0x1a0>)
100019e2:	681b      	ldr	r3, [r3, #0]
100019e4:	401a      	ands	r2, r3
100019e6:	9200      	str	r2, [sp, #0]
        *((io_rw_32 *) (PPB_BASE + M0PLUS_NVIC_ICER_OFFSET)) = mask;
100019e8:	465a      	mov	r2, fp
100019ea:	4b48      	ldr	r3, [pc, #288]	; (10001b0c <irq_remove_handler+0x1a4>)
100019ec:	601a      	str	r2, [r3, #0]
    __asm volatile ("dmb");
100019ee:	f3bf 8f5f 	dmb	sy
            uint exception = __get_current_exception();
100019f2:	f7fe fc38 	bl	10000266 <__get_current_exception>
100019f6:	9001      	str	r0, [sp, #4]
            hard_assert(!exception || exception == num + 16);
100019f8:	2800      	cmp	r0, #0
100019fa:	d003      	beq.n	10001a04 <irq_remove_handler+0x9c>
100019fc:	4581      	cmp	r9, r0
100019fe:	d001      	beq.n	10001a04 <irq_remove_handler+0x9c>
10001a00:	f002 f836 	bl	10003a70 <hard_assertion_failure>
    return (void *) (((uintptr_t) addr) & ~0x1);
10001a04:	2301      	movs	r3, #1
10001a06:	0029      	movs	r1, r5
10001a08:	4399      	bics	r1, r3
            while (to_free_slot->handler != handler) {
10001a0a:	688b      	ldr	r3, [r1, #8]
10001a0c:	42a3      	cmp	r3, r4
10001a0e:	d068      	beq.n	10001ae2 <irq_remove_handler+0x17a>
10001a10:	000a      	movs	r2, r1
10001a12:	e007      	b.n	10001a24 <irq_remove_handler+0xbc>
                to_free_slot = &irq_handler_chain_slots[to_free_slot->link];
10001a14:	0043      	lsls	r3, r0, #1
10001a16:	181b      	adds	r3, r3, r0
10001a18:	009b      	lsls	r3, r3, #2
10001a1a:	18fb      	adds	r3, r7, r3
            while (to_free_slot->handler != handler) {
10001a1c:	6898      	ldr	r0, [r3, #8]
10001a1e:	42a0      	cmp	r0, r4
10001a20:	d011      	beq.n	10001a46 <irq_remove_handler+0xde>
                to_free_slot = &irq_handler_chain_slots[to_free_slot->link];
10001a22:	001a      	movs	r2, r3
                if (to_free_slot->link < 0) break;
10001a24:	2006      	movs	r0, #6
10001a26:	5610      	ldrsb	r0, [r2, r0]
10001a28:	2800      	cmp	r0, #0
10001a2a:	daf3      	bge.n	10001a14 <irq_remove_handler+0xac>
    if (enabled) {
10001a2c:	9b00      	ldr	r3, [sp, #0]
10001a2e:	2b00      	cmp	r3, #0
10001a30:	d005      	beq.n	10001a3e <irq_remove_handler+0xd6>
        *((io_rw_32 *) (PPB_BASE + M0PLUS_NVIC_ICPR_OFFSET)) = mask;
10001a32:	465a      	mov	r2, fp
10001a34:	4b36      	ldr	r3, [pc, #216]	; (10001b10 <irq_remove_handler+0x1a8>)
10001a36:	601a      	str	r2, [r3, #0]
        *((io_rw_32 *) (PPB_BASE + M0PLUS_NVIC_ISER_OFFSET)) = mask;
10001a38:	4b33      	ldr	r3, [pc, #204]	; (10001b08 <irq_remove_handler+0x1a0>)
10001a3a:	601a      	str	r2, [r3, #0]
10001a3c:	e7b7      	b.n	100019ae <irq_remove_handler+0x46>
        *((io_rw_32 *) (PPB_BASE + M0PLUS_NVIC_ICER_OFFSET)) = mask;
10001a3e:	465a      	mov	r2, fp
10001a40:	4b32      	ldr	r3, [pc, #200]	; (10001b0c <irq_remove_handler+0x1a4>)
10001a42:	601a      	str	r2, [r3, #0]
10001a44:	e7b3      	b.n	100019ae <irq_remove_handler+0x46>
                int next_slot_index = to_free_slot->link;
10001a46:	2006      	movs	r0, #6
10001a48:	5618      	ldrsb	r0, [r3, r0]
                if (next_slot_index >= 0) {
10001a4a:	2800      	cmp	r0, #0
10001a4c:	db21      	blt.n	10001a92 <irq_remove_handler+0x12a>
                    to_free_slot->handler = next_slot->handler;
10001a4e:	0042      	lsls	r2, r0, #1
10001a50:	1811      	adds	r1, r2, r0
10001a52:	0089      	lsls	r1, r1, #2
10001a54:	187c      	adds	r4, r7, r1
10001a56:	4688      	mov	r8, r1
10001a58:	68a1      	ldr	r1, [r4, #8]
10001a5a:	6099      	str	r1, [r3, #8]
                    to_free_slot->priority = next_slot->priority;
10001a5c:	79e1      	ldrb	r1, [r4, #7]
10001a5e:	71d9      	strb	r1, [r3, #7]
                    to_free_slot->link = next_slot->link;
10001a60:	2106      	movs	r1, #6
10001a62:	5661      	ldrsb	r1, [r4, r1]
10001a64:	7199      	strb	r1, [r3, #6]
                    to_free_slot->inst3 = next_slot->link >= 0 ?
10001a66:	2900      	cmp	r1, #0
10001a68:	db2b      	blt.n	10001ac2 <irq_remove_handler+0x15a>
    int32_t i_addr = (*inst) << 21u;
10001a6a:	88a4      	ldrh	r4, [r4, #4]
    uint32_t delta = (ui_to - ui_from - 4) / 2;
10001a6c:	1af9      	subs	r1, r7, r3
    int32_t i_addr = (*inst) << 21u;
10001a6e:	0564      	lsls	r4, r4, #21
    return inst + 2 + i_addr;
10001a70:	1524      	asrs	r4, r4, #20
10001a72:	4444      	add	r4, r8
    uint32_t delta = (ui_to - ui_from - 4) / 2;
10001a74:	1909      	adds	r1, r1, r4
    return 0xe000 | (delta & 0x7ff);
10001a76:	24e0      	movs	r4, #224	; 0xe0
10001a78:	0509      	lsls	r1, r1, #20
10001a7a:	0d49      	lsrs	r1, r1, #21
10001a7c:	0224      	lsls	r4, r4, #8
10001a7e:	4321      	orrs	r1, r4
                    to_free_slot->inst3 = next_slot->link >= 0 ?
10001a80:	8099      	strh	r1, [r3, #4]
                    next_slot->link = irq_hander_chain_free_slot_head;
10001a82:	1812      	adds	r2, r2, r0
10001a84:	4b23      	ldr	r3, [pc, #140]	; (10001b14 <irq_remove_handler+0x1ac>)
10001a86:	0092      	lsls	r2, r2, #2
10001a88:	18bf      	adds	r7, r7, r2
10001a8a:	781a      	ldrb	r2, [r3, #0]
                    irq_hander_chain_free_slot_head = next_slot_index;
10001a8c:	7018      	strb	r0, [r3, #0]
                    next_slot->link = irq_hander_chain_free_slot_head;
10001a8e:	71ba      	strb	r2, [r7, #6]
                    irq_hander_chain_free_slot_head = next_slot_index;
10001a90:	e7cc      	b.n	10001a2c <irq_remove_handler+0xc4>
                    if (!exception) {
10001a92:	9801      	ldr	r0, [sp, #4]
10001a94:	2800      	cmp	r0, #0
10001a96:	d117      	bne.n	10001ac8 <irq_remove_handler+0x160>
                            prev_slot->link = -1;
10001a98:	30ff      	adds	r0, #255	; 0xff
10001a9a:	7190      	strb	r0, [r2, #6]
                            prev_slot->inst3 = 0xbd00; // pop {pc}
10001a9c:	481e      	ldr	r0, [pc, #120]	; (10001b18 <irq_remove_handler+0x1b0>)
10001a9e:	8090      	strh	r0, [r2, #4]
                        to_free_slot->link = irq_hander_chain_free_slot_head;
10001aa0:	4a1c      	ldr	r2, [pc, #112]	; (10001b14 <irq_remove_handler+0x1ac>)
            int to_free_slot_index = to_free_slot - irq_handler_chain_slots;
10001aa2:	1bc9      	subs	r1, r1, r7
                        to_free_slot->link = irq_hander_chain_free_slot_head;
10001aa4:	7810      	ldrb	r0, [r2, #0]
            int to_free_slot_index = to_free_slot - irq_handler_chain_slots;
10001aa6:	1089      	asrs	r1, r1, #2
                        to_free_slot->link = irq_hander_chain_free_slot_head;
10001aa8:	7198      	strb	r0, [r3, #6]
            int to_free_slot_index = to_free_slot - irq_handler_chain_slots;
10001aaa:	008b      	lsls	r3, r1, #2
10001aac:	185b      	adds	r3, r3, r1
10001aae:	0118      	lsls	r0, r3, #4
10001ab0:	181b      	adds	r3, r3, r0
10001ab2:	0218      	lsls	r0, r3, #8
10001ab4:	181b      	adds	r3, r3, r0
10001ab6:	0418      	lsls	r0, r3, #16
10001ab8:	181b      	adds	r3, r3, r0
10001aba:	005b      	lsls	r3, r3, #1
10001abc:	185b      	adds	r3, r3, r1
                        irq_hander_chain_free_slot_head = to_free_slot_index;
10001abe:	7013      	strb	r3, [r2, #0]
10001ac0:	e7b4      	b.n	10001a2c <irq_remove_handler+0xc4>
                    to_free_slot->inst3 = next_slot->link >= 0 ?
10001ac2:	21bd      	movs	r1, #189	; 0xbd
10001ac4:	0209      	lsls	r1, r1, #8
10001ac6:	e7db      	b.n	10001a80 <irq_remove_handler+0x118>
                        insert_branch_and_link(&to_free_slot->inst3, irq_handler_chain_remove_tail);
10001ac8:	4a14      	ldr	r2, [pc, #80]	; (10001b1c <irq_remove_handler+0x1b4>)
    from[0] = 0xf000 | ((delta >> 11u) & 0x7ffu);
10001aca:	4915      	ldr	r1, [pc, #84]	; (10001b20 <irq_remove_handler+0x1b8>)
                        insert_branch_and_link(&to_free_slot->inst3, irq_handler_chain_remove_tail);
10001acc:	1ad2      	subs	r2, r2, r3
    uint32_t delta = (ui_to - ui_from - 4) / 2;
10001ace:	3a08      	subs	r2, #8
    from[0] = 0xf000 | ((delta >> 11u) & 0x7ffu);
10001ad0:	0250      	lsls	r0, r2, #9
10001ad2:	0d40      	lsrs	r0, r0, #21
10001ad4:	4301      	orrs	r1, r0
10001ad6:	8099      	strh	r1, [r3, #4]
    from[1] = 0xf800 | (delta & 0x7ffu);
10001ad8:	4912      	ldr	r1, [pc, #72]	; (10001b24 <irq_remove_handler+0x1bc>)
    uint32_t delta = (ui_to - ui_from - 4) / 2;
10001ada:	0852      	lsrs	r2, r2, #1
    from[1] = 0xf800 | (delta & 0x7ffu);
10001adc:	430a      	orrs	r2, r1
10001ade:	80da      	strh	r2, [r3, #6]
}
10001ae0:	e7a4      	b.n	10001a2c <irq_remove_handler+0xc4>
                int next_slot_index = to_free_slot->link;
10001ae2:	2006      	movs	r0, #6
10001ae4:	5608      	ldrsb	r0, [r1, r0]
                if (next_slot_index >= 0) {
10001ae6:	000b      	movs	r3, r1
10001ae8:	2800      	cmp	r0, #0
10001aea:	dab0      	bge.n	10001a4e <irq_remove_handler+0xe6>
                    if (!exception) {
10001aec:	9a01      	ldr	r2, [sp, #4]
10001aee:	2a00      	cmp	r2, #0
10001af0:	d1ea      	bne.n	10001ac8 <irq_remove_handler+0x160>
                            vtable_handler = __unhandled_user_irq;
10001af2:	4645      	mov	r5, r8
10001af4:	e7d4      	b.n	10001aa0 <irq_remove_handler+0x138>
10001af6:	46c0      	nop			; (mov r8, r8)
10001af8:	d0000124 	.word	0xd0000124
10001afc:	e000ed00 	.word	0xe000ed00
10001b00:	100001cd 	.word	0x100001cd
10001b04:	200026c0 	.word	0x200026c0
10001b08:	e000e100 	.word	0xe000e100
10001b0c:	e000e180 	.word	0xe000e180
10001b10:	e000e280 	.word	0xe000e280
10001b14:	20017334 	.word	0x20017334
10001b18:	ffffbd00 	.word	0xffffbd00
10001b1c:	200026fa 	.word	0x200026fa
10001b20:	fffff000 	.word	0xfffff000
10001b24:	fffff800 	.word	0xfffff800

10001b28 <irq_set_priority>:

void irq_set_priority(uint num, uint8_t hardware_priority) {
    check_irq_param(num);

    // note that only 32 bit writes are supported
    io_rw_32 *p = (io_rw_32 *)((PPB_BASE + M0PLUS_NVIC_IPR0_OFFSET) + (num & ~3u));
10001b28:	2303      	movs	r3, #3
void irq_set_priority(uint num, uint8_t hardware_priority) {
10001b2a:	b510      	push	{r4, lr}
    io_rw_32 *p = (io_rw_32 *)((PPB_BASE + M0PLUS_NVIC_IPR0_OFFSET) + (num & ~3u));
10001b2c:	0004      	movs	r4, r0
10001b2e:	4a07      	ldr	r2, [pc, #28]	; (10001b4c <irq_set_priority+0x24>)
    *p = (*p & ~(0xffu << (8 * (num & 3u)))) | (((uint32_t) hardware_priority) << (8 * (num & 3u)));
10001b30:	4018      	ands	r0, r3
    io_rw_32 *p = (io_rw_32 *)((PPB_BASE + M0PLUS_NVIC_IPR0_OFFSET) + (num & ~3u));
10001b32:	4694      	mov	ip, r2
    *p = (*p & ~(0xffu << (8 * (num & 3u)))) | (((uint32_t) hardware_priority) << (8 * (num & 3u)));
10001b34:	00c0      	lsls	r0, r0, #3
    io_rw_32 *p = (io_rw_32 *)((PPB_BASE + M0PLUS_NVIC_IPR0_OFFSET) + (num & ~3u));
10001b36:	439c      	bics	r4, r3
    *p = (*p & ~(0xffu << (8 * (num & 3u)))) | (((uint32_t) hardware_priority) << (8 * (num & 3u)));
10001b38:	33fc      	adds	r3, #252	; 0xfc
10001b3a:	4083      	lsls	r3, r0
    io_rw_32 *p = (io_rw_32 *)((PPB_BASE + M0PLUS_NVIC_IPR0_OFFSET) + (num & ~3u));
10001b3c:	4464      	add	r4, ip
    *p = (*p & ~(0xffu << (8 * (num & 3u)))) | (((uint32_t) hardware_priority) << (8 * (num & 3u)));
10001b3e:	6822      	ldr	r2, [r4, #0]
10001b40:	4081      	lsls	r1, r0
10001b42:	439a      	bics	r2, r3
10001b44:	0013      	movs	r3, r2
10001b46:	430b      	orrs	r3, r1
10001b48:	6023      	str	r3, [r4, #0]
}
10001b4a:	bd10      	pop	{r4, pc}
10001b4c:	e000e400 	.word	0xe000e400

10001b50 <irq_add_tail_to_free_list>:

#if !PICO_DISABLE_SHARED_IRQ_HANDLERS && PICO_MAX_SHARED_IRQ_HANDLERS
// used by irq_handler_chain.S to remove the last link in a handler chain after it executes
// note this must be called only with the last slot in a chain (and during the exception)
void irq_add_tail_to_free_list(struct irq_handler_chain_slot *slot) {
10001b50:	b570      	push	{r4, r5, r6, lr}
    return (void *) (((uintptr_t) addr) | 0x1);
10001b52:	2501      	movs	r5, #1
void irq_add_tail_to_free_list(struct irq_handler_chain_slot *slot) {
10001b54:	0004      	movs	r4, r0
    return (void *) (((uintptr_t) addr) | 0x1);
10001b56:	4305      	orrs	r5, r0
    irq_handler_t slot_handler = (irq_handler_t) add_thumb_bit(slot);
    assert(is_shared_irq_raw_handler(slot_handler));

    int exception = __get_current_exception();
10001b58:	f7fe fb85 	bl	10000266 <__get_current_exception>
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
10001b5c:	f3ef 8c10 	mrs	ip, PRIMASK
    __asm volatile ("cpsid i");
10001b60:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
10001b62:	4a24      	ldr	r2, [pc, #144]	; (10001bf4 <irq_add_tail_to_free_list+0xa4>)
10001b64:	6813      	ldr	r3, [r2, #0]
10001b66:	2b00      	cmp	r3, #0
10001b68:	d0fc      	beq.n	10001b64 <irq_add_tail_to_free_list+0x14>
    __asm volatile ("dmb");
10001b6a:	f3bf 8f5f 	dmb	sy
    assert(exception);
    spin_lock_t *lock = spin_lock_instance(PICO_SPINLOCK_ID_IRQ);
    uint32_t save = spin_lock_blocking(lock);
    int slot_index = slot - irq_handler_chain_slots;
10001b6e:	4e22      	ldr	r6, [pc, #136]	; (10001bf8 <irq_add_tail_to_free_list+0xa8>)
    if (slot_handler == get_vtable()[exception]) {
10001b70:	0080      	lsls	r0, r0, #2
    int slot_index = slot - irq_handler_chain_slots;
10001b72:	1ba1      	subs	r1, r4, r6
10001b74:	1089      	asrs	r1, r1, #2
10001b76:	008a      	lsls	r2, r1, #2
10001b78:	1852      	adds	r2, r2, r1
10001b7a:	0113      	lsls	r3, r2, #4
10001b7c:	18d2      	adds	r2, r2, r3
10001b7e:	0213      	lsls	r3, r2, #8
10001b80:	18d2      	adds	r2, r2, r3
10001b82:	0413      	lsls	r3, r2, #16
10001b84:	18d3      	adds	r3, r2, r3
    return (irq_handler_t *) scb_hw->vtor;
10001b86:	4a1d      	ldr	r2, [pc, #116]	; (10001bfc <irq_add_tail_to_free_list+0xac>)
    int slot_index = slot - irq_handler_chain_slots;
10001b88:	005b      	lsls	r3, r3, #1
10001b8a:	185b      	adds	r3, r3, r1
    return (irq_handler_t *) scb_hw->vtor;
10001b8c:	6891      	ldr	r1, [r2, #8]
    if (slot_handler == get_vtable()[exception]) {
10001b8e:	5809      	ldr	r1, [r1, r0]
10001b90:	42a9      	cmp	r1, r5
10001b92:	d01c      	beq.n	10001bce <irq_add_tail_to_free_list+0x7e>
        get_vtable()[exception] = __unhandled_user_irq;
    } else {
        bool __unused found = false;
        // need to find who points at the slot and update it
        for(uint i=0;i<count_of(irq_handler_chain_slots);i++) {
            if (irq_handler_chain_slots[i].link == slot_index) {
10001b94:	2206      	movs	r2, #6
10001b96:	56b2      	ldrsb	r2, [r6, r2]
10001b98:	429a      	cmp	r2, r3
10001b9a:	d01c      	beq.n	10001bd6 <irq_add_tail_to_free_list+0x86>
10001b9c:	2212      	movs	r2, #18
10001b9e:	56b2      	ldrsb	r2, [r6, r2]
10001ba0:	4293      	cmp	r3, r2
10001ba2:	d022      	beq.n	10001bea <irq_add_tail_to_free_list+0x9a>
10001ba4:	221e      	movs	r2, #30
10001ba6:	56b2      	ldrsb	r2, [r6, r2]
10001ba8:	4293      	cmp	r3, r2
10001baa:	d020      	beq.n	10001bee <irq_add_tail_to_free_list+0x9e>
10001bac:	222a      	movs	r2, #42	; 0x2a
10001bae:	56b2      	ldrsb	r2, [r6, r2]
        for(uint i=0;i<count_of(irq_handler_chain_slots);i++) {
10001bb0:	2103      	movs	r1, #3
            if (irq_handler_chain_slots[i].link == slot_index) {
10001bb2:	429a      	cmp	r2, r3
10001bb4:	d010      	beq.n	10001bd8 <irq_add_tail_to_free_list+0x88>
            }
        }
        assert(found);
    }
    // add slot to free list
    slot->link = irq_hander_chain_free_slot_head;
10001bb6:	4a12      	ldr	r2, [pc, #72]	; (10001c00 <irq_add_tail_to_free_list+0xb0>)
10001bb8:	7811      	ldrb	r1, [r2, #0]
    irq_hander_chain_free_slot_head = slot_index;
10001bba:	7013      	strb	r3, [r2, #0]
    slot->link = irq_hander_chain_free_slot_head;
10001bbc:	71a1      	strb	r1, [r4, #6]
10001bbe:	f3bf 8f5f 	dmb	sy
    *lock = 0;
10001bc2:	2200      	movs	r2, #0
10001bc4:	4b0b      	ldr	r3, [pc, #44]	; (10001bf4 <irq_add_tail_to_free_list+0xa4>)
10001bc6:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10001bc8:	f38c 8810 	msr	PRIMASK, ip
    spin_unlock(lock, save);
}
10001bcc:	bd70      	pop	{r4, r5, r6, pc}
    return (irq_handler_t *) scb_hw->vtor;
10001bce:	6892      	ldr	r2, [r2, #8]
        get_vtable()[exception] = __unhandled_user_irq;
10001bd0:	490c      	ldr	r1, [pc, #48]	; (10001c04 <irq_add_tail_to_free_list+0xb4>)
10001bd2:	5011      	str	r1, [r2, r0]
10001bd4:	e7ef      	b.n	10001bb6 <irq_add_tail_to_free_list+0x66>
        for(uint i=0;i<count_of(irq_handler_chain_slots);i++) {
10001bd6:	2100      	movs	r1, #0
                irq_handler_chain_slots[i].link = -1;
10001bd8:	004a      	lsls	r2, r1, #1
10001bda:	1852      	adds	r2, r2, r1
10001bdc:	21ff      	movs	r1, #255	; 0xff
10001bde:	0092      	lsls	r2, r2, #2
10001be0:	18b2      	adds	r2, r6, r2
10001be2:	7191      	strb	r1, [r2, #6]
                irq_handler_chain_slots[i].inst3 = 0xbd00; // pop {pc}
10001be4:	4908      	ldr	r1, [pc, #32]	; (10001c08 <irq_add_tail_to_free_list+0xb8>)
10001be6:	8091      	strh	r1, [r2, #4]
                break;
10001be8:	e7e5      	b.n	10001bb6 <irq_add_tail_to_free_list+0x66>
        for(uint i=0;i<count_of(irq_handler_chain_slots);i++) {
10001bea:	2101      	movs	r1, #1
10001bec:	e7f4      	b.n	10001bd8 <irq_add_tail_to_free_list+0x88>
10001bee:	2102      	movs	r1, #2
10001bf0:	e7f2      	b.n	10001bd8 <irq_add_tail_to_free_list+0x88>
10001bf2:	46c0      	nop			; (mov r8, r8)
10001bf4:	d0000124 	.word	0xd0000124
10001bf8:	200026c0 	.word	0x200026c0
10001bfc:	e000ed00 	.word	0xe000ed00
10001c00:	20017334 	.word	0x20017334
10001c04:	100001cd 	.word	0x100001cd
10001c08:	ffffbd00 	.word	0xffffbd00

10001c0c <irq_init_priorities>:
#endif

void irq_init_priorities() {
10001c0c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if PICO_DEFAULT_IRQ_PRIORITY != 0
    for (uint irq = 0; irq < NUM_IRQS; irq++) {
10001c0e:	2200      	movs	r2, #0
    io_rw_32 *p = (io_rw_32 *)((PPB_BASE + M0PLUS_NVIC_IPR0_OFFSET) + (num & ~3u));
10001c10:	2403      	movs	r4, #3
    *p = (*p & ~(0xffu << (8 * (num & 3u)))) | (((uint32_t) hardware_priority) << (8 * (num & 3u)));
10001c12:	27ff      	movs	r7, #255	; 0xff
10001c14:	2680      	movs	r6, #128	; 0x80
10001c16:	0020      	movs	r0, r4
10001c18:	003d      	movs	r5, r7
    io_rw_32 *p = (io_rw_32 *)((PPB_BASE + M0PLUS_NVIC_IPR0_OFFSET) + (num & ~3u));
10001c1a:	4b09      	ldr	r3, [pc, #36]	; (10001c40 <irq_init_priorities+0x34>)
10001c1c:	0011      	movs	r1, r2
10001c1e:	469c      	mov	ip, r3
    *p = (*p & ~(0xffu << (8 * (num & 3u)))) | (((uint32_t) hardware_priority) << (8 * (num & 3u)));
10001c20:	4010      	ands	r0, r2
10001c22:	00c0      	lsls	r0, r0, #3
10001c24:	4085      	lsls	r5, r0
    io_rw_32 *p = (io_rw_32 *)((PPB_BASE + M0PLUS_NVIC_IPR0_OFFSET) + (num & ~3u));
10001c26:	43a1      	bics	r1, r4
10001c28:	4461      	add	r1, ip
    *p = (*p & ~(0xffu << (8 * (num & 3u)))) | (((uint32_t) hardware_priority) << (8 * (num & 3u)));
10001c2a:	680b      	ldr	r3, [r1, #0]
    for (uint irq = 0; irq < NUM_IRQS; irq++) {
10001c2c:	3201      	adds	r2, #1
    *p = (*p & ~(0xffu << (8 * (num & 3u)))) | (((uint32_t) hardware_priority) << (8 * (num & 3u)));
10001c2e:	43ab      	bics	r3, r5
10001c30:	0035      	movs	r5, r6
10001c32:	4085      	lsls	r5, r0
10001c34:	432b      	orrs	r3, r5
10001c36:	600b      	str	r3, [r1, #0]
    for (uint irq = 0; irq < NUM_IRQS; irq++) {
10001c38:	2a20      	cmp	r2, #32
10001c3a:	d1ec      	bne.n	10001c16 <irq_init_priorities+0xa>
        irq_set_priority(irq, PICO_DEFAULT_IRQ_PRIORITY);
    }
#endif
}
10001c3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
10001c3e:	46c0      	nop			; (mov r8, r8)
10001c40:	e000e400 	.word	0xe000e400

10001c44 <lock_init>:
    return (spin_lock_t *) (SIO_BASE + SIO_SPINLOCK0_OFFSET + lock_num * 4);
10001c44:	4b02      	ldr	r3, [pc, #8]	; (10001c50 <lock_init+0xc>)
10001c46:	469c      	mov	ip, r3
10001c48:	4461      	add	r1, ip
10001c4a:	0089      	lsls	r1, r1, #2

#include "pico/lock_core.h"

void lock_init(lock_core_t *core, uint lock_num) {
    assert(lock_num >= 0 && lock_num < NUM_SPIN_LOCKS);
    core->spin_lock = spin_lock_instance(lock_num);
10001c4c:	6001      	str	r1, [r0, #0]
}
10001c4e:	4770      	bx	lr
10001c50:	34000040 	.word	0x34000040

10001c54 <core1_trampoline>:

// Default stack for core1 ... if multicore_launch_core1 is not included then .stack1 section will be garbage collected
static uint32_t __attribute__((section(".stack1"))) core1_stack[PICO_CORE1_STACK_SIZE / sizeof(uint32_t)];

static void __attribute__ ((naked)) core1_trampoline() {
    __asm("pop {r0, r1, pc}");
10001c54:	bd03      	pop	{r0, r1, pc}
10001c56:	46c0      	nop			; (mov r8, r8)

10001c58 <core1_wrapper>:
}

int core1_wrapper(int (*entry)(void), void *stack_base) {
10001c58:	b510      	push	{r4, lr}
10001c5a:	0004      	movs	r4, r0
#if PICO_USE_STACK_GUARDS
    // install core1 stack guard
    runtime_install_stack_guard(stack_base);
#endif
    irq_init_priorities();
10001c5c:	f7ff ffd6 	bl	10001c0c <irq_init_priorities>
    return (*entry)();
10001c60:	47a0      	blx	r4
}
10001c62:	bd10      	pop	{r4, pc}

10001c64 <multicore_launch_core1>:
    stack_ptr[1] = (uintptr_t) stack_bottom;
    stack_ptr[2] = (uintptr_t) core1_wrapper;
    multicore_launch_core1_raw(core1_trampoline, stack_ptr, scb_hw->vtor);
}

void multicore_launch_core1(void (*entry)(void)) {
10001c64:	b530      	push	{r4, r5, lr}
    extern char __StackOneBottom;
    uint32_t *stack_limit = (uint32_t *) &__StackOneBottom;
    // hack to reference core1_stack although that pointer is wrong.... core1_stack should always be <= stack_limit, if not boom!
    uint32_t *stack = core1_stack <= stack_limit ? stack_limit : (uint32_t *) -1;
10001c66:	4a22      	ldr	r2, [pc, #136]	; (10001cf0 <multicore_launch_core1+0x8c>)
10001c68:	4b22      	ldr	r3, [pc, #136]	; (10001cf4 <multicore_launch_core1+0x90>)
void multicore_launch_core1(void (*entry)(void)) {
10001c6a:	b087      	sub	sp, #28
    uint32_t *stack = core1_stack <= stack_limit ? stack_limit : (uint32_t *) -1;
10001c6c:	429a      	cmp	r2, r3
10001c6e:	d201      	bcs.n	10001c74 <multicore_launch_core1+0x10>
10001c70:	2201      	movs	r2, #1
10001c72:	4252      	negs	r2, r2
10001c74:	0013      	movs	r3, r2
    stack_ptr[0] = (uintptr_t) entry;
10001c76:	4920      	ldr	r1, [pc, #128]	; (10001cf8 <multicore_launch_core1+0x94>)
    multicore_launch_core1_with_stack(entry, stack, sizeof(core1_stack));
}

void multicore_launch_core1_raw(void (*entry)(void), uint32_t *sp, uint32_t vector_table) {
    uint32_t cmd_sequence[] = {0, 0, 1, (uintptr_t) vector_table, (uintptr_t) sp, (uintptr_t) entry};
10001c78:	2400      	movs	r4, #0
    stack_ptr[0] = (uintptr_t) entry;
10001c7a:	5050      	str	r0, [r2, r1]
    stack_ptr[1] = (uintptr_t) stack_bottom;
10001c7c:	3104      	adds	r1, #4
10001c7e:	5052      	str	r2, [r2, r1]
    stack_ptr[2] = (uintptr_t) core1_wrapper;
10001c80:	4a1e      	ldr	r2, [pc, #120]	; (10001cfc <multicore_launch_core1+0x98>)
10001c82:	491f      	ldr	r1, [pc, #124]	; (10001d00 <multicore_launch_core1+0x9c>)
    uint32_t cmd_sequence[] = {0, 0, 1, (uintptr_t) vector_table, (uintptr_t) sp, (uintptr_t) entry};
10001c84:	2000      	movs	r0, #0
    stack_ptr[2] = (uintptr_t) core1_wrapper;
10001c86:	5099      	str	r1, [r3, r2]
    multicore_launch_core1_raw(core1_trampoline, stack_ptr, scb_hw->vtor);
10001c88:	4a1e      	ldr	r2, [pc, #120]	; (10001d04 <multicore_launch_core1+0xa0>)
    uint32_t cmd_sequence[] = {0, 0, 1, (uintptr_t) vector_table, (uintptr_t) sp, (uintptr_t) entry};
10001c8a:	2100      	movs	r1, #0
    multicore_launch_core1_raw(core1_trampoline, stack_ptr, scb_hw->vtor);
10001c8c:	6892      	ldr	r2, [r2, #8]
    uint32_t cmd_sequence[] = {0, 0, 1, (uintptr_t) vector_table, (uintptr_t) sp, (uintptr_t) entry};
10001c8e:	9000      	str	r0, [sp, #0]
10001c90:	9101      	str	r1, [sp, #4]
10001c92:	9203      	str	r2, [sp, #12]
    stack_ptr -= 3;
10001c94:	4a18      	ldr	r2, [pc, #96]	; (10001cf8 <multicore_launch_core1+0x94>)
    uint32_t cmd_sequence[] = {0, 0, 1, (uintptr_t) vector_table, (uintptr_t) sp, (uintptr_t) entry};
10001c96:	2101      	movs	r1, #1
    stack_ptr -= 3;
10001c98:	4694      	mov	ip, r2
10001c9a:	4463      	add	r3, ip
    uint32_t cmd_sequence[] = {0, 0, 1, (uintptr_t) vector_table, (uintptr_t) sp, (uintptr_t) entry};
10001c9c:	9304      	str	r3, [sp, #16]
10001c9e:	4b1a      	ldr	r3, [pc, #104]	; (10001d08 <multicore_launch_core1+0xa4>)

    uint seq = 0;
10001ca0:	2500      	movs	r5, #0
    uint32_t cmd_sequence[] = {0, 0, 1, (uintptr_t) vector_table, (uintptr_t) sp, (uintptr_t) entry};
10001ca2:	9305      	str	r3, [sp, #20]
 *  \ingroup multicore_fifo
 *
 * \return true if the FIFO has data in it, false otherwise
 */
static inline bool multicore_fifo_rvalid() {
    return !!(sio_hw->fifo_st & SIO_FIFO_ST_VLD_BITS);
10001ca4:	23d0      	movs	r3, #208	; 0xd0
10001ca6:	9102      	str	r1, [sp, #8]
10001ca8:	061b      	lsls	r3, r3, #24
 *  \ingroup multicore_fifo
 *
 *  @return true if the FIFO is full, false otherwise
 */
static inline bool multicore_fifo_wready() {
    return !!(sio_hw->fifo_st & SIO_FIFO_ST_RDY_BITS);
10001caa:	3002      	adds	r0, #2
    do {
        uint cmd = cmd_sequence[seq];
        // we drain before sending a 0
        if (!cmd) {
10001cac:	2c00      	cmp	r4, #0
10001cae:	d014      	beq.n	10001cda <multicore_launch_core1+0x76>
10001cb0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    while (!multicore_fifo_wready())
10001cb2:	4210      	tst	r0, r2
10001cb4:	d0fc      	beq.n	10001cb0 <multicore_launch_core1+0x4c>
    sio_hw->fifo_wr = data;
10001cb6:	655c      	str	r4, [r3, #84]	; 0x54
    __asm volatile ("sev");
10001cb8:	bf40      	sev
    return !!(sio_hw->fifo_st & SIO_FIFO_ST_VLD_BITS);
10001cba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    while (!multicore_fifo_rvalid())
10001cbc:	4211      	tst	r1, r2
10001cbe:	d103      	bne.n	10001cc8 <multicore_launch_core1+0x64>
    __asm volatile ("wfe");
10001cc0:	bf20      	wfe
10001cc2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
10001cc4:	4211      	tst	r1, r2
10001cc6:	d0fb      	beq.n	10001cc0 <multicore_launch_core1+0x5c>
    return sio_hw->fifo_rd;
10001cc8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
            __sev(); // core 1 may be waiting for fifo space
        }
        multicore_fifo_push_blocking(cmd);
        uint32_t response = multicore_fifo_pop_blocking();
        // move to next state on correct response otherwise start over
        seq = cmd == response ? seq + 1 : 0;
10001cca:	42a2      	cmp	r2, r4
10001ccc:	d00a      	beq.n	10001ce4 <multicore_launch_core1+0x80>
10001cce:	2500      	movs	r5, #0
        uint cmd = cmd_sequence[seq];
10001cd0:	466c      	mov	r4, sp
10001cd2:	00aa      	lsls	r2, r5, #2
10001cd4:	58a4      	ldr	r4, [r4, r2]
10001cd6:	e7e9      	b.n	10001cac <multicore_launch_core1+0x48>
 *  \ingroup multicore_fifo
 *
 */
static inline void multicore_fifo_drain() {
    while (multicore_fifo_rvalid())
        (void) sio_hw->fifo_rd;
10001cd8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    return !!(sio_hw->fifo_st & SIO_FIFO_ST_VLD_BITS);
10001cda:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    while (multicore_fifo_rvalid())
10001cdc:	4211      	tst	r1, r2
10001cde:	d1fb      	bne.n	10001cd8 <multicore_launch_core1+0x74>
    __asm volatile ("sev");
10001ce0:	bf40      	sev
    while (!multicore_fifo_wready())
10001ce2:	e7e5      	b.n	10001cb0 <multicore_launch_core1+0x4c>
        seq = cmd == response ? seq + 1 : 0;
10001ce4:	3501      	adds	r5, #1
    } while (seq < count_of(cmd_sequence));
10001ce6:	2d05      	cmp	r5, #5
10001ce8:	d9f2      	bls.n	10001cd0 <multicore_launch_core1+0x6c>
}
10001cea:	b007      	add	sp, #28
10001cec:	bd30      	pop	{r4, r5, pc}
10001cee:	46c0      	nop			; (mov r8, r8)
10001cf0:	20040800 	.word	0x20040800
10001cf4:	20040000 	.word	0x20040000
10001cf8:	000007f4 	.word	0x000007f4
10001cfc:	000007fc 	.word	0x000007fc
10001d00:	10001c59 	.word	0x10001c59
10001d04:	e000ed00 	.word	0xe000ed00
10001d08:	10001c55 	.word	0x10001c55

10001d0c <mutex_init>:

#if !PICO_NO_HARDWARE
static_assert(sizeof(mutex_t) == 8, "");
#endif

void mutex_init(mutex_t *mtx) {
10001d0c:	b510      	push	{r4, lr}
10001d0e:	0004      	movs	r4, r0
    lock_init(&mtx->core, next_striped_spin_lock_num());
10001d10:	f002 fa78 	bl	10004204 <next_striped_spin_lock_num>
10001d14:	0001      	movs	r1, r0
10001d16:	0020      	movs	r0, r4
10001d18:	f7ff ff94 	bl	10001c44 <lock_init>
    mtx->owner = -1;
10001d1c:	23ff      	movs	r3, #255	; 0xff
10001d1e:	7123      	strb	r3, [r4, #4]
    __asm volatile ("dmb");
10001d20:	f3bf 8f5f 	dmb	sy
    __mem_fence_release();
}
10001d24:	bd10      	pop	{r4, pc}
10001d26:	46c0      	nop			; (mov r8, r8)

10001d28 <ph_merge_nodes>:
        c->sibling = n->child;
        n->child = child_id;
    }
}

static pheap_node_id_t ph_merge_nodes(pheap_t *heap, pheap_node_id_t a, pheap_node_id_t b) {
10001d28:	b570      	push	{r4, r5, r6, lr}
10001d2a:	0005      	movs	r5, r0
10001d2c:	0014      	movs	r4, r2
10001d2e:	0016      	movs	r6, r2
    if (!a) return b;
10001d30:	2900      	cmp	r1, #0
10001d32:	d015      	beq.n	10001d60 <ph_merge_nodes+0x38>
    if (!b) return a;
10001d34:	000c      	movs	r4, r1
10001d36:	2a00      	cmp	r2, #0
10001d38:	d012      	beq.n	10001d60 <ph_merge_nodes+0x38>
    if (heap->comparator(heap->user_data, a, b)) {
10001d3a:	6880      	ldr	r0, [r0, #8]
10001d3c:	686b      	ldr	r3, [r5, #4]
10001d3e:	4798      	blx	r3
10001d40:	6829      	ldr	r1, [r5, #0]
10001d42:	2800      	cmp	r0, #0
10001d44:	d00e      	beq.n	10001d64 <ph_merge_nodes+0x3c>
    return heap->nodes + id - 1;
10001d46:	0073      	lsls	r3, r6, #1
10001d48:	199b      	adds	r3, r3, r6
10001d4a:	0062      	lsls	r2, r4, #1
10001d4c:	3b03      	subs	r3, #3
10001d4e:	1912      	adds	r2, r2, r4
10001d50:	18cb      	adds	r3, r1, r3
10001d52:	3a03      	subs	r2, #3
    c->parent = parent_id;
10001d54:	709c      	strb	r4, [r3, #2]
    return heap->nodes + id - 1;
10001d56:	1888      	adds	r0, r1, r2
    if (!n->child) {
10001d58:	5c8a      	ldrb	r2, [r1, r2]
10001d5a:	2a00      	cmp	r2, #0
10001d5c:	d115      	bne.n	10001d8a <ph_merge_nodes+0x62>
        n->child = child_id;
10001d5e:	7006      	strb	r6, [r0, #0]
        return a;
    } else {
        ph_add_child_node(heap, b, a);
        return b;
    }
}
10001d60:	0020      	movs	r0, r4
10001d62:	bd70      	pop	{r4, r5, r6, pc}
    return heap->nodes + id - 1;
10001d64:	0063      	lsls	r3, r4, #1
10001d66:	191b      	adds	r3, r3, r4
10001d68:	0072      	lsls	r2, r6, #1
10001d6a:	3b03      	subs	r3, #3
10001d6c:	1992      	adds	r2, r2, r6
10001d6e:	18cb      	adds	r3, r1, r3
10001d70:	3a03      	subs	r2, #3
    c->parent = parent_id;
10001d72:	709e      	strb	r6, [r3, #2]
    return heap->nodes + id - 1;
10001d74:	1888      	adds	r0, r1, r2
    if (!n->child) {
10001d76:	5c8a      	ldrb	r2, [r1, r2]
10001d78:	2a00      	cmp	r2, #0
10001d7a:	d102      	bne.n	10001d82 <ph_merge_nodes+0x5a>
        n->child = child_id;
10001d7c:	7004      	strb	r4, [r0, #0]
10001d7e:	0034      	movs	r4, r6
10001d80:	e7ee      	b.n	10001d60 <ph_merge_nodes+0x38>
        c->sibling = n->child;
10001d82:	705a      	strb	r2, [r3, #1]
        n->child = child_id;
10001d84:	7004      	strb	r4, [r0, #0]
10001d86:	0034      	movs	r4, r6
10001d88:	e7ea      	b.n	10001d60 <ph_merge_nodes+0x38>
        c->sibling = n->child;
10001d8a:	705a      	strb	r2, [r3, #1]
        n->child = child_id;
10001d8c:	7006      	strb	r6, [r0, #0]
10001d8e:	e7e7      	b.n	10001d60 <ph_merge_nodes+0x38>

10001d90 <ph_create>:

#include <stdio.h>
#include <stdlib.h>
#include "pico/util/pheap.h"

pheap_t *ph_create(uint max_nodes, pheap_comparator comparator, void *user_data) {
10001d90:	b5f0      	push	{r4, r5, r6, r7, lr}
10001d92:	46c6      	mov	lr, r8
10001d94:	0005      	movs	r5, r0
10001d96:	000f      	movs	r7, r1
10001d98:	b500      	push	{lr}
    invalid_params_if(PHEAP, !max_nodes || max_nodes >= (1u << sizeof(pheap_node_id_t)));
    pheap_t *heap = calloc(1, sizeof(pheap_t));
10001d9a:	2110      	movs	r1, #16
10001d9c:	2001      	movs	r0, #1
pheap_t *ph_create(uint max_nodes, pheap_comparator comparator, void *user_data) {
10001d9e:	0016      	movs	r6, r2
    pheap_t *heap = calloc(1, sizeof(pheap_t));
10001da0:	f000 f9ac 	bl	100020fc <__wrap_calloc>
    heap->max_nodes = max_nodes;
10001da4:	b2eb      	uxtb	r3, r5
    pheap_t *heap = calloc(1, sizeof(pheap_t));
10001da6:	0004      	movs	r4, r0
    heap->max_nodes = max_nodes;
10001da8:	7303      	strb	r3, [r0, #12]
    heap->comparator = comparator;
    heap->nodes = calloc(max_nodes, sizeof(pheap_node_t));
10001daa:	2103      	movs	r1, #3
    heap->comparator = comparator;
10001dac:	6047      	str	r7, [r0, #4]
    heap->nodes = calloc(max_nodes, sizeof(pheap_node_t));
10001dae:	0028      	movs	r0, r5
    heap->max_nodes = max_nodes;
10001db0:	4698      	mov	r8, r3
    heap->nodes = calloc(max_nodes, sizeof(pheap_node_t));
10001db2:	f000 f9a3 	bl	100020fc <__wrap_calloc>
    ph_clear(heap);
    return heap;
}

void ph_clear(pheap_t *heap) {
    heap->root_id = 0;
10001db6:	2300      	movs	r3, #0
10001db8:	7363      	strb	r3, [r4, #13]
    heap->free_head_id = 1;
10001dba:	3301      	adds	r3, #1
10001dbc:	73a3      	strb	r3, [r4, #14]
    heap->free_tail_id = heap->max_nodes;
10001dbe:	4643      	mov	r3, r8
10001dc0:	21ff      	movs	r1, #255	; 0xff
10001dc2:	73e3      	strb	r3, [r4, #15]
    for(uint i = 1; i < heap->max_nodes; i++) {
10001dc4:	23fe      	movs	r3, #254	; 0xfe
    heap->nodes = calloc(max_nodes, sizeof(pheap_node_t));
10001dc6:	6020      	str	r0, [r4, #0]
    heap->user_data = user_data;
10001dc8:	60a6      	str	r6, [r4, #8]
    for(uint i = 1; i < heap->max_nodes; i++) {
10001dca:	4029      	ands	r1, r5
10001dcc:	422b      	tst	r3, r5
10001dce:	d006      	beq.n	10001dde <ph_create+0x4e>
10001dd0:	1c42      	adds	r2, r0, #1
10001dd2:	3bfd      	subs	r3, #253	; 0xfd
        ph_get_node(heap, i)->sibling = i + 1;
10001dd4:	3301      	adds	r3, #1
10001dd6:	7013      	strb	r3, [r2, #0]
    for(uint i = 1; i < heap->max_nodes; i++) {
10001dd8:	3203      	adds	r2, #3
10001dda:	428b      	cmp	r3, r1
10001ddc:	d3fa      	bcc.n	10001dd4 <ph_create+0x44>
    }
    ph_get_node(heap, heap->max_nodes)->sibling = 0;
10001dde:	004b      	lsls	r3, r1, #1
10001de0:	1859      	adds	r1, r3, r1
10001de2:	2300      	movs	r3, #0
10001de4:	1840      	adds	r0, r0, r1
10001de6:	3803      	subs	r0, #3
10001de8:	7043      	strb	r3, [r0, #1]
}
10001dea:	0020      	movs	r0, r4
10001dec:	bc80      	pop	{r7}
10001dee:	46b8      	mov	r8, r7
10001df0:	bdf0      	pop	{r4, r5, r6, r7, pc}
10001df2:	46c0      	nop			; (mov r8, r8)

10001df4 <ph_merge_two_pass>:
void ph_destroy(pheap_t *heap) {
    free(heap->nodes);
    free(heap);
}

pheap_node_id_t ph_merge_two_pass(pheap_t *heap, pheap_node_id_t id) {
10001df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10001df6:	46ce      	mov	lr, r9
10001df8:	4647      	mov	r7, r8
10001dfa:	0006      	movs	r6, r0
10001dfc:	000c      	movs	r4, r1
10001dfe:	b580      	push	{r7, lr}
    if (!id || !ph_get_node(heap, id)->sibling) {
10001e00:	2900      	cmp	r1, #0
10001e02:	d007      	beq.n	10001e14 <ph_merge_two_pass+0x20>
    return heap->nodes + id - 1;
10001e04:	004d      	lsls	r5, r1, #1
10001e06:	6803      	ldr	r3, [r0, #0]
10001e08:	186d      	adds	r5, r5, r1
10001e0a:	3d03      	subs	r5, #3
10001e0c:	195a      	adds	r2, r3, r5
10001e0e:	7857      	ldrb	r7, [r2, #1]
10001e10:	2f00      	cmp	r7, #0
10001e12:	d104      	bne.n	10001e1e <ph_merge_two_pass+0x2a>
        b = ph_get_node(heap, id)->sibling;
        new_node = ph_get_node(heap, b)->sibling;
        ph_get_node(heap, a)->sibling = ph_get_node(heap, b)->sibling = 0;
        return ph_merge_nodes(heap, ph_merge_nodes(heap, a, b), ph_merge_two_pass(heap, new_node));
    }
}
10001e14:	0020      	movs	r0, r4
10001e16:	bcc0      	pop	{r6, r7}
10001e18:	46b9      	mov	r9, r7
10001e1a:	46b0      	mov	r8, r6
10001e1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10001e1e:	0079      	lsls	r1, r7, #1
10001e20:	19c9      	adds	r1, r1, r7
10001e22:	3903      	subs	r1, #3
10001e24:	4688      	mov	r8, r1
10001e26:	4443      	add	r3, r8
        new_node = ph_get_node(heap, b)->sibling;
10001e28:	7859      	ldrb	r1, [r3, #1]
10001e2a:	4689      	mov	r9, r1
        ph_get_node(heap, a)->sibling = ph_get_node(heap, b)->sibling = 0;
10001e2c:	2100      	movs	r1, #0
10001e2e:	7059      	strb	r1, [r3, #1]
10001e30:	7051      	strb	r1, [r2, #1]
    if (heap->comparator(heap->user_data, a, b)) {
10001e32:	6873      	ldr	r3, [r6, #4]
10001e34:	003a      	movs	r2, r7
10001e36:	0021      	movs	r1, r4
10001e38:	6880      	ldr	r0, [r0, #8]
10001e3a:	4798      	blx	r3
10001e3c:	6833      	ldr	r3, [r6, #0]
10001e3e:	2800      	cmp	r0, #0
10001e40:	d014      	beq.n	10001e6c <ph_merge_two_pass+0x78>
    return heap->nodes + id - 1;
10001e42:	4642      	mov	r2, r8
10001e44:	189a      	adds	r2, r3, r2
    c->parent = parent_id;
10001e46:	7094      	strb	r4, [r2, #2]
    return heap->nodes + id - 1;
10001e48:	1959      	adds	r1, r3, r5
    if (!n->child) {
10001e4a:	5d5b      	ldrb	r3, [r3, r5]
10001e4c:	2b00      	cmp	r3, #0
10001e4e:	d000      	beq.n	10001e52 <ph_merge_two_pass+0x5e>
        c->sibling = n->child;
10001e50:	7053      	strb	r3, [r2, #1]
        n->child = child_id;
10001e52:	700f      	strb	r7, [r1, #0]
10001e54:	0027      	movs	r7, r4
        return ph_merge_nodes(heap, ph_merge_nodes(heap, a, b), ph_merge_two_pass(heap, new_node));
10001e56:	4649      	mov	r1, r9
10001e58:	0030      	movs	r0, r6
10001e5a:	f7ff ffcb 	bl	10001df4 <ph_merge_two_pass>
10001e5e:	0039      	movs	r1, r7
10001e60:	0002      	movs	r2, r0
10001e62:	0030      	movs	r0, r6
10001e64:	f7ff ff60 	bl	10001d28 <ph_merge_nodes>
10001e68:	0004      	movs	r4, r0
10001e6a:	e7d3      	b.n	10001e14 <ph_merge_two_pass+0x20>
    return heap->nodes + id - 1;
10001e6c:	4642      	mov	r2, r8
    if (!n->child) {
10001e6e:	4641      	mov	r1, r8
    return heap->nodes + id - 1;
10001e70:	195d      	adds	r5, r3, r5
    c->parent = parent_id;
10001e72:	70af      	strb	r7, [r5, #2]
    return heap->nodes + id - 1;
10001e74:	189a      	adds	r2, r3, r2
    if (!n->child) {
10001e76:	5c5b      	ldrb	r3, [r3, r1]
10001e78:	2b00      	cmp	r3, #0
10001e7a:	d000      	beq.n	10001e7e <ph_merge_two_pass+0x8a>
        c->sibling = n->child;
10001e7c:	706b      	strb	r3, [r5, #1]
        n->child = child_id;
10001e7e:	7014      	strb	r4, [r2, #0]
10001e80:	e7e9      	b.n	10001e56 <ph_merge_two_pass+0x62>
10001e82:	46c0      	nop			; (mov r8, r8)

10001e84 <ph_remove_any_head>:

static pheap_node_id_t ph_remove_any_head(pheap_t *heap, pheap_node_id_t root_id, bool reserve) {
10001e84:	b5f0      	push	{r4, r5, r6, r7, lr}
10001e86:	4657      	mov	r7, sl
10001e88:	4645      	mov	r5, r8
10001e8a:	46de      	mov	lr, fp
10001e8c:	464e      	mov	r6, r9
10001e8e:	b5e0      	push	{r5, r6, r7, lr}
10001e90:	000d      	movs	r5, r1
    return heap->nodes + id - 1;
10001e92:	006b      	lsls	r3, r5, #1
10001e94:	6801      	ldr	r1, [r0, #0]
10001e96:	195b      	adds	r3, r3, r5
10001e98:	1edf      	subs	r7, r3, #3
10001e9a:	0004      	movs	r4, r0
    assert(root_id);
//    printf("Removing head %d (parent %d sibling %d)\n", root_id, ph_get_node(heap, root_id)->parent, ph_get_node(heap, root_id)->sibling);
    assert(!ph_get_node(heap, root_id)->sibling);
    assert(!ph_get_node(heap, root_id)->parent);
    pheap_node_id_t new_root_id = ph_merge_two_pass(heap, ph_get_node(heap, root_id)->child);
10001e9c:	5dc8      	ldrb	r0, [r1, r7]
static pheap_node_id_t ph_remove_any_head(pheap_t *heap, pheap_node_id_t root_id, bool reserve) {
10001e9e:	b083      	sub	sp, #12
10001ea0:	9201      	str	r2, [sp, #4]
10001ea2:	19ca      	adds	r2, r1, r7
    if (!id || !ph_get_node(heap, id)->sibling) {
10001ea4:	2800      	cmp	r0, #0
10001ea6:	d04c      	beq.n	10001f42 <ph_remove_any_head+0xbe>
10001ea8:	0043      	lsls	r3, r0, #1
10001eaa:	181b      	adds	r3, r3, r0
10001eac:	3b03      	subs	r3, #3
10001eae:	18cb      	adds	r3, r1, r3
10001eb0:	785e      	ldrb	r6, [r3, #1]
10001eb2:	46b4      	mov	ip, r6
10001eb4:	2e00      	cmp	r6, #0
10001eb6:	d116      	bne.n	10001ee6 <ph_remove_any_head+0x62>
    if (!reserve) {
10001eb8:	9e01      	ldr	r6, [sp, #4]
10001eba:	2e00      	cmp	r6, #0
10001ebc:	d13e      	bne.n	10001f3c <ph_remove_any_head+0xb8>
        if (heap->free_tail_id) {
10001ebe:	7be6      	ldrb	r6, [r4, #15]
10001ec0:	2e00      	cmp	r6, #0
10001ec2:	d004      	beq.n	10001ece <ph_remove_any_head+0x4a>
            ph_get_node(heap, heap->free_tail_id)->sibling = root_id;
10001ec4:	0073      	lsls	r3, r6, #1
10001ec6:	199b      	adds	r3, r3, r6
10001ec8:	18cb      	adds	r3, r1, r3
10001eca:	3b03      	subs	r3, #3
10001ecc:	705d      	strb	r5, [r3, #1]
        }
        heap->free_tail_id = root_id;
10001ece:	73e5      	strb	r5, [r4, #15]
    }
    if (new_root_id) ph_get_node(heap, new_root_id)->parent = 0;
10001ed0:	2800      	cmp	r0, #0
10001ed2:	d12f      	bne.n	10001f34 <ph_remove_any_head+0xb0>
    ph_get_node(heap, root_id)->sibling = 0;
10001ed4:	2300      	movs	r3, #0
10001ed6:	7053      	strb	r3, [r2, #1]
    return new_root_id;
}
10001ed8:	b003      	add	sp, #12
10001eda:	bcf0      	pop	{r4, r5, r6, r7}
10001edc:	46bb      	mov	fp, r7
10001ede:	46b2      	mov	sl, r6
10001ee0:	46a9      	mov	r9, r5
10001ee2:	46a0      	mov	r8, r4
10001ee4:	bdf0      	pop	{r4, r5, r6, r7, pc}
10001ee6:	0072      	lsls	r2, r6, #1
10001ee8:	4462      	add	r2, ip
10001eea:	3a03      	subs	r2, #3
10001eec:	1889      	adds	r1, r1, r2
        new_node = ph_get_node(heap, b)->sibling;
10001eee:	784a      	ldrb	r2, [r1, #1]
10001ef0:	4690      	mov	r8, r2
        ph_get_node(heap, a)->sibling = ph_get_node(heap, b)->sibling = 0;
10001ef2:	2200      	movs	r2, #0
10001ef4:	704a      	strb	r2, [r1, #1]
10001ef6:	4691      	mov	r9, r2
10001ef8:	705a      	strb	r2, [r3, #1]
        return ph_merge_nodes(heap, ph_merge_nodes(heap, a, b), ph_merge_two_pass(heap, new_node));
10001efa:	0001      	movs	r1, r0
10001efc:	0032      	movs	r2, r6
10001efe:	0020      	movs	r0, r4
10001f00:	f7ff ff12 	bl	10001d28 <ph_merge_nodes>
    if (!id || !ph_get_node(heap, id)->sibling) {
10001f04:	4643      	mov	r3, r8
        return ph_merge_nodes(heap, ph_merge_nodes(heap, a, b), ph_merge_two_pass(heap, new_node));
10001f06:	4682      	mov	sl, r0
    if (!id || !ph_get_node(heap, id)->sibling) {
10001f08:	2b00      	cmp	r3, #0
10001f0a:	d007      	beq.n	10001f1c <ph_remove_any_head+0x98>
10001f0c:	005b      	lsls	r3, r3, #1
10001f0e:	6821      	ldr	r1, [r4, #0]
10001f10:	4443      	add	r3, r8
10001f12:	3b03      	subs	r3, #3
10001f14:	18cb      	adds	r3, r1, r3
10001f16:	785a      	ldrb	r2, [r3, #1]
10001f18:	2a00      	cmp	r2, #0
10001f1a:	d116      	bne.n	10001f4a <ph_remove_any_head+0xc6>
        return ph_merge_nodes(heap, ph_merge_nodes(heap, a, b), ph_merge_two_pass(heap, new_node));
10001f1c:	4642      	mov	r2, r8
10001f1e:	4651      	mov	r1, sl
10001f20:	0020      	movs	r0, r4
10001f22:	f7ff ff01 	bl	10001d28 <ph_merge_nodes>
10001f26:	6821      	ldr	r1, [r4, #0]
    if (!reserve) {
10001f28:	9b01      	ldr	r3, [sp, #4]
10001f2a:	19ca      	adds	r2, r1, r7
10001f2c:	2b00      	cmp	r3, #0
10001f2e:	d0c6      	beq.n	10001ebe <ph_remove_any_head+0x3a>
    if (new_root_id) ph_get_node(heap, new_root_id)->parent = 0;
10001f30:	2800      	cmp	r0, #0
10001f32:	d0cf      	beq.n	10001ed4 <ph_remove_any_head+0x50>
10001f34:	0043      	lsls	r3, r0, #1
10001f36:	181b      	adds	r3, r3, r0
10001f38:	3b03      	subs	r3, #3
10001f3a:	18cb      	adds	r3, r1, r3
10001f3c:	2100      	movs	r1, #0
10001f3e:	7099      	strb	r1, [r3, #2]
10001f40:	e7c8      	b.n	10001ed4 <ph_remove_any_head+0x50>
    if (!reserve) {
10001f42:	9b01      	ldr	r3, [sp, #4]
10001f44:	2b00      	cmp	r3, #0
10001f46:	d1c5      	bne.n	10001ed4 <ph_remove_any_head+0x50>
10001f48:	e7b9      	b.n	10001ebe <ph_remove_any_head+0x3a>
10001f4a:	0050      	lsls	r0, r2, #1
10001f4c:	1880      	adds	r0, r0, r2
10001f4e:	3803      	subs	r0, #3
10001f50:	1809      	adds	r1, r1, r0
        new_node = ph_get_node(heap, b)->sibling;
10001f52:	7848      	ldrb	r0, [r1, #1]
10001f54:	4683      	mov	fp, r0
        ph_get_node(heap, a)->sibling = ph_get_node(heap, b)->sibling = 0;
10001f56:	4648      	mov	r0, r9
10001f58:	7048      	strb	r0, [r1, #1]
10001f5a:	7058      	strb	r0, [r3, #1]
        return ph_merge_nodes(heap, ph_merge_nodes(heap, a, b), ph_merge_two_pass(heap, new_node));
10001f5c:	4641      	mov	r1, r8
10001f5e:	0020      	movs	r0, r4
10001f60:	f7ff fee2 	bl	10001d28 <ph_merge_nodes>
10001f64:	4659      	mov	r1, fp
10001f66:	4680      	mov	r8, r0
10001f68:	0020      	movs	r0, r4
10001f6a:	f7ff ff43 	bl	10001df4 <ph_merge_two_pass>
10001f6e:	4641      	mov	r1, r8
10001f70:	0002      	movs	r2, r0
10001f72:	0020      	movs	r0, r4
10001f74:	f7ff fed8 	bl	10001d28 <ph_merge_nodes>
10001f78:	4680      	mov	r8, r0
10001f7a:	e7cf      	b.n	10001f1c <ph_remove_any_head+0x98>

10001f7c <ph_remove_head_reserve>:

pheap_node_id_t ph_remove_head_reserve(pheap_t *heap, bool reserve) {
10001f7c:	b5f0      	push	{r4, r5, r6, r7, lr}
10001f7e:	4657      	mov	r7, sl
10001f80:	4645      	mov	r5, r8
10001f82:	46de      	mov	lr, fp
10001f84:	464e      	mov	r6, r9
10001f86:	b5e0      	push	{r5, r6, r7, lr}
10001f88:	b083      	sub	sp, #12
10001f8a:	9101      	str	r1, [sp, #4]
    heap->root_id = ph_merge_nodes(heap, heap->root_id, id);
    return heap->root_id;
}

static inline pheap_node_id_t ph_peek_head(pheap_t *heap) {
    return heap->root_id;
10001f8c:	7b45      	ldrb	r5, [r0, #13]
10001f8e:	0004      	movs	r4, r0
    return heap->nodes + id - 1;
10001f90:	006b      	lsls	r3, r5, #1
10001f92:	6800      	ldr	r0, [r0, #0]
10001f94:	195b      	adds	r3, r3, r5
10001f96:	1edf      	subs	r7, r3, #3
    pheap_node_id_t new_root_id = ph_merge_two_pass(heap, ph_get_node(heap, root_id)->child);
10001f98:	5dc1      	ldrb	r1, [r0, r7]
10001f9a:	19c2      	adds	r2, r0, r7
    if (!id || !ph_get_node(heap, id)->sibling) {
10001f9c:	2900      	cmp	r1, #0
10001f9e:	d04e      	beq.n	1000203e <ph_remove_head_reserve+0xc2>
10001fa0:	004b      	lsls	r3, r1, #1
10001fa2:	185b      	adds	r3, r3, r1
10001fa4:	3b03      	subs	r3, #3
10001fa6:	18c3      	adds	r3, r0, r3
10001fa8:	785e      	ldrb	r6, [r3, #1]
10001faa:	46b4      	mov	ip, r6
10001fac:	2e00      	cmp	r6, #0
10001fae:	d118      	bne.n	10001fe2 <ph_remove_head_reserve+0x66>
    if (!reserve) {
10001fb0:	9e01      	ldr	r6, [sp, #4]
10001fb2:	2e00      	cmp	r6, #0
10001fb4:	d140      	bne.n	10002038 <ph_remove_head_reserve+0xbc>
        if (heap->free_tail_id) {
10001fb6:	7be6      	ldrb	r6, [r4, #15]
10001fb8:	2e00      	cmp	r6, #0
10001fba:	d004      	beq.n	10001fc6 <ph_remove_head_reserve+0x4a>
            ph_get_node(heap, heap->free_tail_id)->sibling = root_id;
10001fbc:	0073      	lsls	r3, r6, #1
10001fbe:	199b      	adds	r3, r3, r6
10001fc0:	18c3      	adds	r3, r0, r3
10001fc2:	3b03      	subs	r3, #3
10001fc4:	705d      	strb	r5, [r3, #1]
        heap->free_tail_id = root_id;
10001fc6:	73e5      	strb	r5, [r4, #15]
    if (new_root_id) ph_get_node(heap, new_root_id)->parent = 0;
10001fc8:	2900      	cmp	r1, #0
10001fca:	d131      	bne.n	10002030 <ph_remove_head_reserve+0xb4>
    ph_get_node(heap, root_id)->sibling = 0;
10001fcc:	2300      	movs	r3, #0
    pheap_node_id_t old_root_id = ph_peek_head(heap);
    heap->root_id = ph_remove_any_head(heap, old_root_id, reserve);
    return old_root_id;
}
10001fce:	0028      	movs	r0, r5
    ph_get_node(heap, root_id)->sibling = 0;
10001fd0:	7053      	strb	r3, [r2, #1]
    heap->root_id = ph_remove_any_head(heap, old_root_id, reserve);
10001fd2:	7361      	strb	r1, [r4, #13]
}
10001fd4:	b003      	add	sp, #12
10001fd6:	bcf0      	pop	{r4, r5, r6, r7}
10001fd8:	46bb      	mov	fp, r7
10001fda:	46b2      	mov	sl, r6
10001fdc:	46a9      	mov	r9, r5
10001fde:	46a0      	mov	r8, r4
10001fe0:	bdf0      	pop	{r4, r5, r6, r7, pc}
10001fe2:	0072      	lsls	r2, r6, #1
10001fe4:	4462      	add	r2, ip
10001fe6:	3a03      	subs	r2, #3
10001fe8:	1880      	adds	r0, r0, r2
        new_node = ph_get_node(heap, b)->sibling;
10001fea:	7842      	ldrb	r2, [r0, #1]
10001fec:	4690      	mov	r8, r2
        ph_get_node(heap, a)->sibling = ph_get_node(heap, b)->sibling = 0;
10001fee:	2200      	movs	r2, #0
10001ff0:	7042      	strb	r2, [r0, #1]
10001ff2:	4691      	mov	r9, r2
10001ff4:	705a      	strb	r2, [r3, #1]
        return ph_merge_nodes(heap, ph_merge_nodes(heap, a, b), ph_merge_two_pass(heap, new_node));
10001ff6:	0020      	movs	r0, r4
10001ff8:	0032      	movs	r2, r6
10001ffa:	f7ff fe95 	bl	10001d28 <ph_merge_nodes>
    if (!id || !ph_get_node(heap, id)->sibling) {
10001ffe:	4643      	mov	r3, r8
        return ph_merge_nodes(heap, ph_merge_nodes(heap, a, b), ph_merge_two_pass(heap, new_node));
10002000:	4682      	mov	sl, r0
    if (!id || !ph_get_node(heap, id)->sibling) {
10002002:	2b00      	cmp	r3, #0
10002004:	d007      	beq.n	10002016 <ph_remove_head_reserve+0x9a>
10002006:	005b      	lsls	r3, r3, #1
10002008:	6821      	ldr	r1, [r4, #0]
1000200a:	4443      	add	r3, r8
1000200c:	3b03      	subs	r3, #3
1000200e:	18cb      	adds	r3, r1, r3
10002010:	785a      	ldrb	r2, [r3, #1]
10002012:	2a00      	cmp	r2, #0
10002014:	d117      	bne.n	10002046 <ph_remove_head_reserve+0xca>
        return ph_merge_nodes(heap, ph_merge_nodes(heap, a, b), ph_merge_two_pass(heap, new_node));
10002016:	4642      	mov	r2, r8
10002018:	4651      	mov	r1, sl
1000201a:	0020      	movs	r0, r4
1000201c:	f7ff fe84 	bl	10001d28 <ph_merge_nodes>
    if (!reserve) {
10002020:	9b01      	ldr	r3, [sp, #4]
        return ph_merge_nodes(heap, ph_merge_nodes(heap, a, b), ph_merge_two_pass(heap, new_node));
10002022:	0001      	movs	r1, r0
10002024:	6820      	ldr	r0, [r4, #0]
10002026:	19c2      	adds	r2, r0, r7
    if (!reserve) {
10002028:	2b00      	cmp	r3, #0
1000202a:	d0c4      	beq.n	10001fb6 <ph_remove_head_reserve+0x3a>
    if (new_root_id) ph_get_node(heap, new_root_id)->parent = 0;
1000202c:	2900      	cmp	r1, #0
1000202e:	d0cd      	beq.n	10001fcc <ph_remove_head_reserve+0x50>
10002030:	004b      	lsls	r3, r1, #1
10002032:	185b      	adds	r3, r3, r1
10002034:	3b03      	subs	r3, #3
10002036:	18c3      	adds	r3, r0, r3
10002038:	2000      	movs	r0, #0
1000203a:	7098      	strb	r0, [r3, #2]
1000203c:	e7c6      	b.n	10001fcc <ph_remove_head_reserve+0x50>
    if (!reserve) {
1000203e:	9b01      	ldr	r3, [sp, #4]
10002040:	2b00      	cmp	r3, #0
10002042:	d1c3      	bne.n	10001fcc <ph_remove_head_reserve+0x50>
10002044:	e7b7      	b.n	10001fb6 <ph_remove_head_reserve+0x3a>
10002046:	0050      	lsls	r0, r2, #1
10002048:	1880      	adds	r0, r0, r2
1000204a:	3803      	subs	r0, #3
1000204c:	1809      	adds	r1, r1, r0
        new_node = ph_get_node(heap, b)->sibling;
1000204e:	7848      	ldrb	r0, [r1, #1]
10002050:	4683      	mov	fp, r0
        ph_get_node(heap, a)->sibling = ph_get_node(heap, b)->sibling = 0;
10002052:	4648      	mov	r0, r9
10002054:	7048      	strb	r0, [r1, #1]
10002056:	7058      	strb	r0, [r3, #1]
        return ph_merge_nodes(heap, ph_merge_nodes(heap, a, b), ph_merge_two_pass(heap, new_node));
10002058:	4641      	mov	r1, r8
1000205a:	0020      	movs	r0, r4
1000205c:	f7ff fe64 	bl	10001d28 <ph_merge_nodes>
10002060:	4659      	mov	r1, fp
10002062:	4680      	mov	r8, r0
10002064:	0020      	movs	r0, r4
10002066:	f7ff fec5 	bl	10001df4 <ph_merge_two_pass>
1000206a:	4641      	mov	r1, r8
1000206c:	0002      	movs	r2, r0
1000206e:	0020      	movs	r0, r4
10002070:	f7ff fe5a 	bl	10001d28 <ph_merge_nodes>
10002074:	4680      	mov	r8, r0
10002076:	e7ce      	b.n	10002016 <ph_remove_head_reserve+0x9a>

10002078 <ph_delete>:

#include <stdio.h>
bool ph_delete(pheap_t *heap, pheap_node_id_t id) {
10002078:	b570      	push	{r4, r5, r6, lr}
1000207a:	0004      	movs	r4, r0
    // 1) trivial cases
    if (!id) return false;
1000207c:	2900      	cmp	r1, #0
1000207e:	d02c      	beq.n	100020da <ph_delete+0x62>
    if (id == heap->root_id) {
10002080:	7b43      	ldrb	r3, [r0, #13]
10002082:	428b      	cmp	r3, r1
10002084:	d02e      	beq.n	100020e4 <ph_delete+0x6c>
10002086:	6805      	ldr	r5, [r0, #0]
10002088:	0048      	lsls	r0, r1, #1
1000208a:	1840      	adds	r0, r0, r1
1000208c:	3803      	subs	r0, #3
1000208e:	1828      	adds	r0, r5, r0
        ph_remove_head(heap);
        return true;
    }
    // 2) unlink the node from the tree
    pheap_node_t *node = ph_get_node(heap, id);
    if (!node->parent) return false; // not in tree
10002090:	7882      	ldrb	r2, [r0, #2]
10002092:	2a00      	cmp	r2, #0
10002094:	d021      	beq.n	100020da <ph_delete+0x62>
10002096:	0053      	lsls	r3, r2, #1
10002098:	189b      	adds	r3, r3, r2
1000209a:	3b03      	subs	r3, #3
    pheap_node_t *parent = ph_get_node(heap, node->parent);
    if (parent->child == id) {
1000209c:	5cea      	ldrb	r2, [r5, r3]
1000209e:	18ee      	adds	r6, r5, r3
100020a0:	428a      	cmp	r2, r1
100020a2:	d102      	bne.n	100020aa <ph_delete+0x32>
100020a4:	e01b      	b.n	100020de <ph_delete+0x66>
                prev_sibling->sibling = node->sibling;
                found = true;
                break;
            }
            prev_sibling_id = prev_sibling->sibling;
        } while (prev_sibling_id);
100020a6:	2a00      	cmp	r2, #0
100020a8:	d008      	beq.n	100020bc <ph_delete+0x44>
100020aa:	0053      	lsls	r3, r2, #1
100020ac:	189b      	adds	r3, r3, r2
100020ae:	3b03      	subs	r3, #3
100020b0:	18eb      	adds	r3, r5, r3
            if (prev_sibling->sibling == id) {
100020b2:	785a      	ldrb	r2, [r3, #1]
100020b4:	428a      	cmp	r2, r1
100020b6:	d1f6      	bne.n	100020a6 <ph_delete+0x2e>
                prev_sibling->sibling = node->sibling;
100020b8:	7842      	ldrb	r2, [r0, #1]
100020ba:	705a      	strb	r2, [r3, #1]
        assert(found);
    }
    node->sibling = node->parent = 0;
100020bc:	2300      	movs	r3, #0
//    ph_dump(heap, NULL, NULL);
    // 3) remove it from the head of its own subtree
    pheap_node_id_t new_sub_tree = ph_remove_any_head(heap, id, false);
100020be:	2200      	movs	r2, #0
    node->sibling = node->parent = 0;
100020c0:	7083      	strb	r3, [r0, #2]
100020c2:	7043      	strb	r3, [r0, #1]
    pheap_node_id_t new_sub_tree = ph_remove_any_head(heap, id, false);
100020c4:	0020      	movs	r0, r4
100020c6:	f7ff fedd 	bl	10001e84 <ph_remove_any_head>
    assert(new_sub_tree != heap->root_id);
    heap->root_id = ph_merge_nodes(heap, heap->root_id, new_sub_tree);
100020ca:	7b61      	ldrb	r1, [r4, #13]
    pheap_node_id_t new_sub_tree = ph_remove_any_head(heap, id, false);
100020cc:	0002      	movs	r2, r0
    heap->root_id = ph_merge_nodes(heap, heap->root_id, new_sub_tree);
100020ce:	0020      	movs	r0, r4
100020d0:	f7ff fe2a 	bl	10001d28 <ph_merge_nodes>
100020d4:	7360      	strb	r0, [r4, #13]
    return true;
100020d6:	2001      	movs	r0, #1
100020d8:	e000      	b.n	100020dc <ph_delete+0x64>
    if (!id) return false;
100020da:	2000      	movs	r0, #0
}
100020dc:	bd70      	pop	{r4, r5, r6, pc}
        parent->child = node->sibling;
100020de:	7843      	ldrb	r3, [r0, #1]
100020e0:	7033      	strb	r3, [r6, #0]
100020e2:	e7eb      	b.n	100020bc <ph_delete+0x44>
    heap->root_id = ph_remove_any_head(heap, old_root_id, reserve);
100020e4:	2200      	movs	r2, #0
100020e6:	0019      	movs	r1, r3
100020e8:	f7ff fecc 	bl	10001e84 <ph_remove_any_head>
100020ec:	7360      	strb	r0, [r4, #13]
        return true;
100020ee:	2001      	movs	r0, #1
100020f0:	e7f4      	b.n	100020dc <ph_delete+0x64>
100020f2:	46c0      	nop			; (mov r8, r8)

100020f4 <__wrap_malloc>:
        panic("Out of memory");
    }
#endif
}

void *__wrap_malloc(size_t size) {
100020f4:	b510      	push	{r4, lr}
#if PICO_USE_MALLOC_MUTEX
    mutex_enter_blocking(&malloc_mutex);
#endif
    void *rc = __real_malloc(size);
100020f6:	f008 faf5 	bl	1000a6e4 <malloc>
        printf("malloc %d %p->%p\n", (uint) size, rc, ((uint8_t *) rc) + size);
    }
#endif
    check_alloc(rc, size);
    return rc;
}
100020fa:	bd10      	pop	{r4, pc}

100020fc <__wrap_calloc>:

void *__wrap_calloc(size_t count, size_t size) {
100020fc:	b510      	push	{r4, lr}
#if PICO_USE_MALLOC_MUTEX
    mutex_enter_blocking(&malloc_mutex);
#endif
    void *rc = __real_calloc(count, size);
100020fe:	f008 fa91 	bl	1000a624 <calloc>
        printf("calloc %d %p->%p\n", (uint) (count * size), rc, ((uint8_t *) rc) + size);
    }
#endif
    check_alloc(rc, size);
    return rc;
}
10002102:	bd10      	pop	{r4, pc}

10002104 <pio_add_program>:
    uint32_t program_mask = (1u << program->length) - 1;
    _used_instruction_space[pio_get_index(pio)] |= program_mask << offset;
}

// these assert if unable
uint pio_add_program(PIO pio, const pio_program_t *program) {
10002104:	b5f0      	push	{r4, r5, r6, r7, lr}
10002106:	46d6      	mov	lr, sl
10002108:	464f      	mov	r7, r9
1000210a:	4646      	mov	r6, r8
1000210c:	4688      	mov	r8, r1
1000210e:	b5c0      	push	{r6, r7, lr}
10002110:	2405      	movs	r4, #5
10002112:	0006      	movs	r6, r0
    uint32_t save = hw_claim_lock();
10002114:	f7ff f860 	bl	100011d8 <hw_claim_lock>
10002118:	4643      	mov	r3, r8
1000211a:	791f      	ldrb	r7, [r3, #4]
1000211c:	571c      	ldrsb	r4, [r3, r4]
 * \param pio The PIO instance; either \ref pio0 or \ref pio1
 * \return the PIO instance number (either 0 or 1)
 */
static inline uint pio_get_index(PIO pio) {
    assert(pio == pio0 || pio == pio1);
    return pio == pio1 ? 1 : 0;
1000211e:	4b28      	ldr	r3, [pc, #160]	; (100021c0 <pio_add_program+0xbc>)
10002120:	4681      	mov	r9, r0
10002122:	18f0      	adds	r0, r6, r3
10002124:	4243      	negs	r3, r0
10002126:	4158      	adcs	r0, r3
    uint32_t used_mask = _used_instruction_space[pio_get_index(pio)];
10002128:	4b26      	ldr	r3, [pc, #152]	; (100021c4 <pio_add_program+0xc0>)
1000212a:	469a      	mov	sl, r3
1000212c:	0083      	lsls	r3, r0, #2
1000212e:	469c      	mov	ip, r3
10002130:	4653      	mov	r3, sl
10002132:	4662      	mov	r2, ip
10002134:	5898      	ldr	r0, [r3, r2]
    uint32_t program_mask = (1u << program->length) - 1;
10002136:	2201      	movs	r2, #1
        if (program->origin > 32 - program->length) return -1;
10002138:	2320      	movs	r3, #32
    uint32_t program_mask = (1u << program->length) - 1;
1000213a:	40ba      	lsls	r2, r7
        if (program->origin > 32 - program->length) return -1;
1000213c:	1bdb      	subs	r3, r3, r7
    uint32_t program_mask = (1u << program->length) - 1;
1000213e:	3a01      	subs	r2, #1
    if (program->origin >= 0) {
10002140:	2c00      	cmp	r4, #0
10002142:	db32      	blt.n	100021aa <pio_add_program+0xa6>
        if (program->origin > 32 - program->length) return -1;
10002144:	429c      	cmp	r4, r3
10002146:	dc2d      	bgt.n	100021a4 <pio_add_program+0xa0>
        return used_mask & (program_mask << program->origin) ? -1 : program->origin;
10002148:	40a2      	lsls	r2, r4
1000214a:	0015      	movs	r5, r2
1000214c:	4210      	tst	r0, r2
1000214e:	d129      	bne.n	100021a4 <pio_add_program+0xa0>
    for (uint i = 0; i < program->length; ++i) {
10002150:	2f00      	cmp	r7, #0
10002152:	d01a      	beq.n	1000218a <pio_add_program+0x86>
        uint16_t instr = program->instructions[i];
10002154:	4643      	mov	r3, r8
10002156:	785a      	ldrb	r2, [r3, #1]
10002158:	7819      	ldrb	r1, [r3, #0]
1000215a:	0212      	lsls	r2, r2, #8
1000215c:	4311      	orrs	r1, r2
1000215e:	4642      	mov	r2, r8
10002160:	789b      	ldrb	r3, [r3, #2]
10002162:	78d2      	ldrb	r2, [r2, #3]
10002164:	041b      	lsls	r3, r3, #16
10002166:	430b      	orrs	r3, r1
10002168:	0612      	lsls	r2, r2, #24
1000216a:	431a      	orrs	r2, r3
1000216c:	4690      	mov	r8, r2
    for (uint i = 0; i < program->length; ++i) {
1000216e:	2200      	movs	r2, #0
        uint16_t instr = program->instructions[i];
10002170:	4641      	mov	r1, r8
10002172:	0053      	lsls	r3, r2, #1
10002174:	5ac9      	ldrh	r1, [r1, r3]
        pio->instr_mem[offset + i] = pio_instr_bits_jmp != _pio_major_instr_bits(instr) ? instr : instr + offset;
10002176:	0b4b      	lsrs	r3, r1, #13
10002178:	d100      	bne.n	1000217c <pio_add_program+0x78>
1000217a:	1909      	adds	r1, r1, r4
1000217c:	1913      	adds	r3, r2, r4
1000217e:	3312      	adds	r3, #18
10002180:	009b      	lsls	r3, r3, #2
    for (uint i = 0; i < program->length; ++i) {
10002182:	3201      	adds	r2, #1
        pio->instr_mem[offset + i] = pio_instr_bits_jmp != _pio_major_instr_bits(instr) ? instr : instr + offset;
10002184:	5199      	str	r1, [r3, r6]
    for (uint i = 0; i < program->length; ++i) {
10002186:	4297      	cmp	r7, r2
10002188:	d8f2      	bhi.n	10002170 <pio_add_program+0x6c>
    _used_instruction_space[pio_get_index(pio)] |= program_mask << offset;
1000218a:	4653      	mov	r3, sl
1000218c:	4662      	mov	r2, ip
1000218e:	4305      	orrs	r5, r0
10002190:	509d      	str	r5, [r3, r2]
    int offset = _pio_find_offset_for_program(pio, program);
    if (offset < 0) {
        panic("No program space");
    }
    _pio_add_program_at_offset(pio, program, offset);
    hw_claim_unlock(save);
10002192:	4648      	mov	r0, r9
10002194:	f7ff f82c 	bl	100011f0 <hw_claim_unlock>
    return offset;
}
10002198:	0020      	movs	r0, r4
1000219a:	bce0      	pop	{r5, r6, r7}
1000219c:	46ba      	mov	sl, r7
1000219e:	46b1      	mov	r9, r6
100021a0:	46a8      	mov	r8, r5
100021a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        panic("No program space");
100021a4:	4808      	ldr	r0, [pc, #32]	; (100021c8 <pio_add_program+0xc4>)
100021a6:	f001 fc4b 	bl	10003a40 <panic>
        for (int i = 32 - program->length; i >= 0; i--) {
100021aa:	2b00      	cmp	r3, #0
100021ac:	da02      	bge.n	100021b4 <pio_add_program+0xb0>
100021ae:	e7f9      	b.n	100021a4 <pio_add_program+0xa0>
100021b0:	3b01      	subs	r3, #1
100021b2:	d3f7      	bcc.n	100021a4 <pio_add_program+0xa0>
            if (!(used_mask & (program_mask << (uint) i))) {
100021b4:	0015      	movs	r5, r2
100021b6:	409d      	lsls	r5, r3
100021b8:	001c      	movs	r4, r3
100021ba:	4205      	tst	r5, r0
100021bc:	d1f8      	bne.n	100021b0 <pio_add_program+0xac>
100021be:	e7c7      	b.n	10002150 <pio_add_program+0x4c>
100021c0:	afd00000 	.word	0xafd00000
100021c4:	20016ae4 	.word	0x20016ae4
100021c8:	1000b070 	.word	0x1000b070

100021cc <pio_clear_instruction_memory>:
    assert(program_mask == (_used_instruction_space[pio_get_index(pio)] & program_mask));
    _used_instruction_space[pio_get_index(pio)] &= ~program_mask;
    hw_claim_unlock(save);
}

void pio_clear_instruction_memory(PIO pio) {
100021cc:	b510      	push	{r4, lr}
100021ce:	0004      	movs	r4, r0
    uint32_t save = hw_claim_lock();
100021d0:	f7ff f802 	bl	100011d8 <hw_claim_lock>
100021d4:	4b09      	ldr	r3, [pc, #36]	; (100021fc <pio_clear_instruction_memory+0x30>)
    _used_instruction_space[pio_get_index(pio)] = 0;
100021d6:	2100      	movs	r1, #0
100021d8:	18e3      	adds	r3, r4, r3
100021da:	425a      	negs	r2, r3
100021dc:	4153      	adcs	r3, r2
100021de:	4a08      	ldr	r2, [pc, #32]	; (10002200 <pio_clear_instruction_memory+0x34>)
100021e0:	009b      	lsls	r3, r3, #2
100021e2:	5099      	str	r1, [r3, r2]
    for(uint i=0;i<PIO_INSTRUCTION_COUNT;i++) {
100021e4:	2300      	movs	r3, #0
        pio->instr_mem[i] = pio_encode_jmp(i);
100021e6:	001a      	movs	r2, r3
100021e8:	3212      	adds	r2, #18
100021ea:	0092      	lsls	r2, r2, #2
100021ec:	5113      	str	r3, [r2, r4]
    for(uint i=0;i<PIO_INSTRUCTION_COUNT;i++) {
100021ee:	3301      	adds	r3, #1
100021f0:	2b20      	cmp	r3, #32
100021f2:	d1f8      	bne.n	100021e6 <pio_clear_instruction_memory+0x1a>
    }
    hw_claim_unlock(save);
100021f4:	f7fe fffc 	bl	100011f0 <hw_claim_unlock>
}
100021f8:	bd10      	pop	{r4, pc}
100021fa:	46c0      	nop			; (mov r8, r8)
100021fc:	afd00000 	.word	0xafd00000
10002200:	20016ae4 	.word	0x20016ae4

10002204 <pio_sm_set_consecutive_pindirs>:
        pin_mask &= pin_mask - 1;
    }
    pio->sm[sm].pinctrl = pinctrl_saved;
}

void pio_sm_set_consecutive_pindirs(PIO pio, uint sm, uint pin, uint count, bool is_out) {
10002204:	b5f0      	push	{r4, r5, r6, r7, lr}
10002206:	464e      	mov	r6, r9
10002208:	4645      	mov	r5, r8
1000220a:	46de      	mov	lr, fp
1000220c:	4657      	mov	r7, sl
1000220e:	468a      	mov	sl, r1
    assert(pin < 32u);
    uint32_t pinctrl_saved = pio->sm[sm].pinctrl;
10002210:	0049      	lsls	r1, r1, #1
void pio_sm_set_consecutive_pindirs(PIO pio, uint sm, uint pin, uint count, bool is_out) {
10002212:	b5e0      	push	{r5, r6, r7, lr}
    uint32_t pinctrl_saved = pio->sm[sm].pinctrl;
10002214:	000d      	movs	r5, r1
void pio_sm_set_consecutive_pindirs(PIO pio, uint sm, uint pin, uint count, bool is_out) {
10002216:	4680      	mov	r8, r0
    uint32_t pinctrl_saved = pio->sm[sm].pinctrl;
10002218:	4455      	add	r5, sl
1000221a:	00ed      	lsls	r5, r5, #3
1000221c:	4445      	add	r5, r8
1000221e:	4689      	mov	r9, r1
10002220:	0029      	movs	r1, r5
void pio_sm_set_consecutive_pindirs(PIO pio, uint sm, uint pin, uint count, bool is_out) {
10002222:	ac09      	add	r4, sp, #36	; 0x24
10002224:	7826      	ldrb	r6, [r4, #0]
    uint32_t pinctrl_saved = pio->sm[sm].pinctrl;
10002226:	31dc      	adds	r1, #220	; 0xdc
    uint pindir_val = is_out ? 0x1f : 0;
10002228:	1e74      	subs	r4, r6, #1
1000222a:	41a6      	sbcs	r6, r4
    uint32_t pinctrl_saved = pio->sm[sm].pinctrl;
1000222c:	6808      	ldr	r0, [r1, #0]
    uint pindir_val = is_out ? 0x1f : 0;
1000222e:	4274      	negs	r4, r6
    uint32_t pinctrl_saved = pio->sm[sm].pinctrl;
10002230:	4684      	mov	ip, r0
    uint pindir_val = is_out ? 0x1f : 0;
10002232:	4814      	ldr	r0, [pc, #80]	; (10002284 <pio_sm_set_consecutive_pindirs+0x80>)
10002234:	261f      	movs	r6, #31
10002236:	4683      	mov	fp, r0
10002238:	4026      	ands	r6, r4
1000223a:	445e      	add	r6, fp
    while (count > 5) {
1000223c:	2b05      	cmp	r3, #5
1000223e:	d90c      	bls.n	1000225a <pio_sm_set_consecutive_pindirs+0x56>
        pio->sm[sm].pinctrl = (5u << PIO_SM0_PINCTRL_SET_COUNT_LSB) | (pin << PIO_SM0_PINCTRL_SET_BASE_LSB);
10002240:	20a0      	movs	r0, #160	; 0xa0
        pio_sm_exec(pio, sm, pio_encode_set(pio_pindirs, pindir_val));
        count -= 5;
        pin = (pin + 5) & 0x1f;
10002242:	271f      	movs	r7, #31
        pio->sm[sm].pinctrl = (5u << PIO_SM0_PINCTRL_SET_COUNT_LSB) | (pin << PIO_SM0_PINCTRL_SET_BASE_LSB);
10002244:	0540      	lsls	r0, r0, #21
 * \param sm State machine index (0..3)
 * \param instr the encoded PIO instruction
 */
inline static void pio_sm_exec(PIO pio, uint sm, uint instr) {
    check_sm_param(sm);
    pio->sm[sm].instr = instr;
10002246:	35d8      	adds	r5, #216	; 0xd8
10002248:	0154      	lsls	r4, r2, #5
1000224a:	4304      	orrs	r4, r0
        pin = (pin + 5) & 0x1f;
1000224c:	3205      	adds	r2, #5
        count -= 5;
1000224e:	3b05      	subs	r3, #5
        pio->sm[sm].pinctrl = (5u << PIO_SM0_PINCTRL_SET_COUNT_LSB) | (pin << PIO_SM0_PINCTRL_SET_BASE_LSB);
10002250:	600c      	str	r4, [r1, #0]
        pin = (pin + 5) & 0x1f;
10002252:	403a      	ands	r2, r7
10002254:	602e      	str	r6, [r5, #0]
    while (count > 5) {
10002256:	2b05      	cmp	r3, #5
10002258:	d8f6      	bhi.n	10002248 <pio_sm_set_consecutive_pindirs+0x44>
    }
    pio->sm[sm].pinctrl = (count << PIO_SM0_PINCTRL_SET_COUNT_LSB) | (pin << PIO_SM0_PINCTRL_SET_BASE_LSB);
1000225a:	4649      	mov	r1, r9
1000225c:	4451      	add	r1, sl
1000225e:	00c9      	lsls	r1, r1, #3
10002260:	4441      	add	r1, r8
10002262:	0152      	lsls	r2, r2, #5
10002264:	069b      	lsls	r3, r3, #26
10002266:	4313      	orrs	r3, r2
10002268:	000a      	movs	r2, r1
1000226a:	0008      	movs	r0, r1
1000226c:	32dc      	adds	r2, #220	; 0xdc
1000226e:	6013      	str	r3, [r2, #0]
    pio_sm_exec(pio, sm, pio_encode_set(pio_pindirs, pindir_val));
    pio->sm[sm].pinctrl = pinctrl_saved;
10002270:	4663      	mov	r3, ip
10002272:	30d8      	adds	r0, #216	; 0xd8
10002274:	6006      	str	r6, [r0, #0]
10002276:	6013      	str	r3, [r2, #0]
}
10002278:	bcf0      	pop	{r4, r5, r6, r7}
1000227a:	46bb      	mov	fp, r7
1000227c:	46b2      	mov	sl, r6
1000227e:	46a9      	mov	r9, r5
10002280:	46a0      	mov	r8, r4
10002282:	bdf0      	pop	{r4, r5, r6, r7, pc}
10002284:	0000e080 	.word	0x0000e080

10002288 <pio_sm_init>:

void pio_sm_init(PIO pio, uint sm, uint initial_pc, const pio_sm_config *config) {
10002288:	b5f0      	push	{r4, r5, r6, r7, lr}
    pio->ctrl = (pio->ctrl & ~(1u << sm)) | (!!enabled << sm);
1000228a:	2501      	movs	r5, #1
1000228c:	408d      	lsls	r5, r1
1000228e:	6804      	ldr	r4, [r0, #0]
10002290:	43ac      	bics	r4, r5
    pio->sm[sm].clkdiv = config->clkdiv;
10002292:	004d      	lsls	r5, r1, #1
    pio->ctrl = (pio->ctrl & ~(1u << sm)) | (!!enabled << sm);
10002294:	6004      	str	r4, [r0, #0]
    pio->sm[sm].clkdiv = config->clkdiv;
10002296:	186c      	adds	r4, r5, r1
10002298:	00e4      	lsls	r4, r4, #3
1000229a:	1904      	adds	r4, r0, r4
1000229c:	0026      	movs	r6, r4
1000229e:	36c8      	adds	r6, #200	; 0xc8
    // Halt the machine, set some sensible defaults
    pio_sm_set_enabled(pio, sm, false);

    if (config) {
100022a0:	2b00      	cmp	r3, #0
100022a2:	d02a      	beq.n	100022fa <pio_sm_init+0x72>
100022a4:	681f      	ldr	r7, [r3, #0]
    pio->sm[sm].pinctrl = config->pinctrl;
100022a6:	34dc      	adds	r4, #220	; 0xdc
    pio->sm[sm].clkdiv = config->clkdiv;
100022a8:	6037      	str	r7, [r6, #0]
    pio->sm[sm].execctrl = config->execctrl;
100022aa:	685f      	ldr	r7, [r3, #4]
100022ac:	6077      	str	r7, [r6, #4]
    pio->sm[sm].shiftctrl = config->shiftctrl;
100022ae:	689f      	ldr	r7, [r3, #8]
    pio->sm[sm].pinctrl = config->pinctrl;
100022b0:	68db      	ldr	r3, [r3, #12]
    pio->sm[sm].shiftctrl = config->shiftctrl;
100022b2:	60b7      	str	r7, [r6, #8]
    pio->sm[sm].pinctrl = config->pinctrl;
100022b4:	6023      	str	r3, [r4, #0]
 * \param sm State machine index (0..3)
 */
static inline void pio_sm_clear_fifos(PIO pio, uint sm) {
    // changing the FIFO join state clears the fifo
    check_sm_param(sm);
    hw_xor_bits(&pio->sm[sm].shiftctrl, PIO_SM0_SHIFTCTRL_FJOIN_RX_BITS);
100022b6:	186d      	adds	r5, r5, r1
100022b8:	00eb      	lsls	r3, r5, #3
100022ba:	001d      	movs	r5, r3
100022bc:	2480      	movs	r4, #128	; 0x80
100022be:	35d0      	adds	r5, #208	; 0xd0
100022c0:	1945      	adds	r5, r0, r5
100022c2:	0164      	lsls	r4, r4, #5
100022c4:	432c      	orrs	r4, r5
100022c6:	2580      	movs	r5, #128	; 0x80
100022c8:	062d      	lsls	r5, r5, #24
100022ca:	6025      	str	r5, [r4, #0]
100022cc:	6025      	str	r5, [r4, #0]
    const uint32_t fdebug_sm_mask =
            (1u << PIO_FDEBUG_TXOVER_LSB) |
            (1u << PIO_FDEBUG_RXUNDER_LSB) |
            (1u << PIO_FDEBUG_TXSTALL_LSB) |
            (1u << PIO_FDEBUG_RXSTALL_LSB);
    pio->fdebug = fdebug_sm_mask << sm;
100022ce:	4c11      	ldr	r4, [pc, #68]	; (10002314 <pio_sm_init+0x8c>)
    pio->ctrl |= 1u << (PIO_CTRL_SM_RESTART_LSB + sm);
100022d0:	1d0d      	adds	r5, r1, #4
100022d2:	408c      	lsls	r4, r1
100022d4:	6084      	str	r4, [r0, #8]
100022d6:	2401      	movs	r4, #1
100022d8:	0027      	movs	r7, r4
100022da:	40af      	lsls	r7, r5
100022dc:	003d      	movs	r5, r7
    pio->ctrl |= 1u << (PIO_CTRL_CLKDIV_RESTART_LSB + sm);
100022de:	3108      	adds	r1, #8
100022e0:	408c      	lsls	r4, r1
        assert(arg2 && arg2 <= 32);
    } else {
        assert(arg2 <= 31);
    }
#endif
    return instr_bits | (arg1 << 5u) | (arg2 & 0x1fu);
100022e2:	211f      	movs	r1, #31
    pio->ctrl |= 1u << (PIO_CTRL_SM_RESTART_LSB + sm);
100022e4:	6806      	ldr	r6, [r0, #0]
100022e6:	400a      	ands	r2, r1
100022e8:	4335      	orrs	r5, r6
100022ea:	6005      	str	r5, [r0, #0]
    pio->ctrl |= 1u << (PIO_CTRL_CLKDIV_RESTART_LSB + sm);
100022ec:	6805      	ldr	r5, [r0, #0]
100022ee:	432c      	orrs	r4, r5
100022f0:	6004      	str	r4, [r0, #0]
    pio->sm[sm].instr = instr;
100022f2:	18c0      	adds	r0, r0, r3
100022f4:	30d8      	adds	r0, #216	; 0xd8
100022f6:	6002      	str	r2, [r0, #0]

    // Finally, clear some internal SM state
    pio_sm_restart(pio, sm);
    pio_sm_clkdiv_restart(pio, sm);
    pio_sm_exec(pio, sm, pio_encode_jmp(initial_pc));
}
100022f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    pio->sm[sm].clkdiv = config->clkdiv;
100022fa:	2780      	movs	r7, #128	; 0x80
100022fc:	027f      	lsls	r7, r7, #9
100022fe:	6037      	str	r7, [r6, #0]
    pio->sm[sm].execctrl = config->execctrl;
10002300:	27f8      	movs	r7, #248	; 0xf8
10002302:	027f      	lsls	r7, r7, #9
10002304:	6077      	str	r7, [r6, #4]
    pio->sm[sm].shiftctrl = config->shiftctrl;
10002306:	27c0      	movs	r7, #192	; 0xc0
    pio->sm[sm].pinctrl = config->pinctrl;
10002308:	34dc      	adds	r4, #220	; 0xdc
    pio->sm[sm].shiftctrl = config->shiftctrl;
1000230a:	033f      	lsls	r7, r7, #12
1000230c:	60b7      	str	r7, [r6, #8]
    pio->sm[sm].pinctrl = config->pinctrl;
1000230e:	6023      	str	r3, [r4, #0]
10002310:	e7d1      	b.n	100022b6 <pio_sm_init+0x2e>
10002312:	46c0      	nop			; (mov r8, r8)
10002314:	01010101 	.word	0x01010101

10002318 <running_on_fpga>:
#include "hardware/address_mapped.h"
#include "hardware/regs/tbman.h"
#include "hardware/regs/sysinfo.h"

bool running_on_fpga() {
    return !!((*(io_ro_32 *)TBMAN_BASE) & TBMAN_PLATFORM_FPGA_BITS);
10002318:	4b02      	ldr	r3, [pc, #8]	; (10002324 <running_on_fpga+0xc>)
1000231a:	6818      	ldr	r0, [r3, #0]
1000231c:	0780      	lsls	r0, r0, #30
1000231e:	0fc0      	lsrs	r0, r0, #31
}
10002320:	4770      	bx	lr
10002322:	46c0      	nop			; (mov r8, r8)
10002324:	4006c000 	.word	0x4006c000

10002328 <pll_init>:
// For MHZ definitions etc
#include "hardware/clocks.h"
#include "hardware/pll.h"

/// \tag::pll_init_calculations[]
void pll_init(PLL pll, uint32_t refdiv, uint32_t vco_freq, uint32_t post_div1, uint8_t post_div2) {
10002328:	b5f0      	push	{r4, r5, r6, r7, lr}
1000232a:	46c6      	mov	lr, r8
1000232c:	b500      	push	{lr}
1000232e:	001e      	movs	r6, r3
10002330:	ab06      	add	r3, sp, #24
10002332:	781f      	ldrb	r7, [r3, #0]
    // Turn off PLL in case it is already running
    pll->pwr = 0xffffffff;
10002334:	2301      	movs	r3, #1
10002336:	425b      	negs	r3, r3
10002338:	6043      	str	r3, [r0, #4]
    pll->fbdiv_int = 0;
1000233a:	2300      	movs	r3, #0
void pll_init(PLL pll, uint32_t refdiv, uint32_t vco_freq, uint32_t post_div1, uint8_t post_div2) {
1000233c:	0004      	movs	r4, r0
    pll->fbdiv_int = 0;
1000233e:	6083      	str	r3, [r0, #8]

    uint32_t ref_mhz = XOSC_MHZ / refdiv;
    pll->cs = refdiv;
10002340:	6001      	str	r1, [r0, #0]
    uint32_t ref_mhz = XOSC_MHZ / refdiv;
10002342:	200c      	movs	r0, #12
void pll_init(PLL pll, uint32_t refdiv, uint32_t vco_freq, uint32_t post_div1, uint8_t post_div2) {
10002344:	4690      	mov	r8, r2
    uint32_t ref_mhz = XOSC_MHZ / refdiv;
10002346:	f7fe f815 	bl	10000374 <__wrap___aeabi_uidiv>

    // What are we multiplying the reference clock by to get the vco freq
    // (The regs are called div, because you divide the vco output and compare it to the refclk)
    uint32_t fbdiv = vco_freq / (ref_mhz * MHZ);
1000234a:	0141      	lsls	r1, r0, #5
1000234c:	1a09      	subs	r1, r1, r0
1000234e:	018d      	lsls	r5, r1, #6
10002350:	1a69      	subs	r1, r5, r1
10002352:	00c9      	lsls	r1, r1, #3
10002354:	1809      	adds	r1, r1, r0
10002356:	0189      	lsls	r1, r1, #6
10002358:	4640      	mov	r0, r8
1000235a:	f7fe f80b 	bl	10000374 <__wrap___aeabi_uidiv>
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
1000235e:	21c0      	movs	r1, #192	; 0xc0

    // Turn on PLL
    uint32_t power = PLL_PWR_PD_BITS | // Main power
                     PLL_PWR_VCOPD_BITS; // VCO Power

    hw_clear_bits(&pll->pwr, power);
10002360:	1d23      	adds	r3, r4, #4
10002362:	0189      	lsls	r1, r1, #6
10002364:	4319      	orrs	r1, r3
10002366:	2321      	movs	r3, #33	; 0x21
    pll->fbdiv_int = fbdiv;
10002368:	60a0      	str	r0, [r4, #8]
1000236a:	600b      	str	r3, [r1, #0]

    // Wait for PLL to lock
    while (!(pll->cs & PLL_CS_LOCK_BITS)) tight_loop_contents();
1000236c:	6822      	ldr	r2, [r4, #0]
1000236e:	2a00      	cmp	r2, #0
10002370:	dafc      	bge.n	1000236c <pll_init+0x44>
10002372:	2308      	movs	r3, #8

    // Set up post dividers - div1 feeds into div2 so if div1 is 5 and div2 is 2 then you get a divide by 10
    uint32_t pdiv = (post_div1 << PLL_PRIM_POSTDIV1_LSB) |
                    (post_div2 << PLL_PRIM_POSTDIV2_LSB);
10002374:	033f      	lsls	r7, r7, #12
    uint32_t pdiv = (post_div1 << PLL_PRIM_POSTDIV1_LSB) |
10002376:	0436      	lsls	r6, r6, #16
10002378:	433e      	orrs	r6, r7
    pll->prim = pdiv;
1000237a:	60e6      	str	r6, [r4, #12]
1000237c:	600b      	str	r3, [r1, #0]

    // Turn on post divider
    hw_clear_bits(&pll->pwr, PLL_PWR_POSTDIVPD_BITS);
/// \end::pll_init_finish[]
}
1000237e:	bc80      	pop	{r7}
10002380:	46b8      	mov	r8, r7
10002382:	bdf0      	pop	{r4, r5, r6, r7, pc}

10002384 <_out_null>:
static inline void _out_null(char character, void *buffer, size_t idx, size_t maxlen) {
    (void) character;
    (void) buffer;
    (void) idx;
    (void) maxlen;
}
10002384:	4770      	bx	lr
10002386:	46c0      	nop			; (mov r8, r8)

10002388 <_out_rev>:
}


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char *buffer, size_t idx, size_t maxlen, const char *buf, size_t len,
                       unsigned int width, unsigned int flags) {
10002388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000238a:	4657      	mov	r7, sl
1000238c:	464e      	mov	r6, r9
1000238e:	4645      	mov	r5, r8
10002390:	46de      	mov	lr, fp
10002392:	b5e0      	push	{r5, r6, r7, lr}
10002394:	4699      	mov	r9, r3
10002396:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10002398:	0007      	movs	r7, r0
1000239a:	469a      	mov	sl, r3
    const size_t start_idx = idx;

    // pad spaces up to given width
    if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
1000239c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
                       unsigned int width, unsigned int flags) {
1000239e:	4688      	mov	r8, r1
100023a0:	4693      	mov	fp, r2
100023a2:	0015      	movs	r5, r2
100023a4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
100023a6:	079b      	lsls	r3, r3, #30
100023a8:	d110      	bne.n	100023cc <_out_rev+0x44>
        for (size_t i = len; i < width; i++) {
100023aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
100023ac:	429e      	cmp	r6, r3
100023ae:	d20d      	bcs.n	100023cc <_out_rev+0x44>
100023b0:	1b9d      	subs	r5, r3, r6
100023b2:	0014      	movs	r4, r2
100023b4:	000e      	movs	r6, r1
100023b6:	445d      	add	r5, fp
            out(' ', buffer, idx++, maxlen);
100023b8:	0022      	movs	r2, r4
100023ba:	464b      	mov	r3, r9
100023bc:	3401      	adds	r4, #1
100023be:	0031      	movs	r1, r6
100023c0:	2020      	movs	r0, #32
100023c2:	47b8      	blx	r7
        for (size_t i = len; i < width; i++) {
100023c4:	42a5      	cmp	r5, r4
100023c6:	d1f7      	bne.n	100023b8 <_out_rev+0x30>
100023c8:	46b0      	mov	r8, r6
100023ca:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
        }
    }

    // reverse string
    while (len) {
100023cc:	2e00      	cmp	r6, #0
100023ce:	d027      	beq.n	10002420 <_out_rev+0x98>
100023d0:	4644      	mov	r4, r8
100023d2:	1975      	adds	r5, r6, r5
        out(buf[--len], buffer, idx++, maxlen);
100023d4:	4653      	mov	r3, sl
100023d6:	1baa      	subs	r2, r5, r6
100023d8:	3e01      	subs	r6, #1
100023da:	5d98      	ldrb	r0, [r3, r6]
100023dc:	0021      	movs	r1, r4
100023de:	464b      	mov	r3, r9
100023e0:	47b8      	blx	r7
    while (len) {
100023e2:	2e00      	cmp	r6, #0
100023e4:	d1f6      	bne.n	100023d4 <_out_rev+0x4c>
100023e6:	0023      	movs	r3, r4
100023e8:	002c      	movs	r4, r5
100023ea:	4698      	mov	r8, r3
    }

    // append pad spaces up to given width
    if (flags & FLAGS_LEFT) {
100023ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
100023ee:	079b      	lsls	r3, r3, #30
100023f0:	d50f      	bpl.n	10002412 <_out_rev+0x8a>
        while (idx - start_idx < width) {
100023f2:	465b      	mov	r3, fp
100023f4:	1ae5      	subs	r5, r4, r3
100023f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
100023f8:	42ab      	cmp	r3, r5
100023fa:	d90a      	bls.n	10002412 <_out_rev+0x8a>
100023fc:	4646      	mov	r6, r8
100023fe:	4698      	mov	r8, r3
            out(' ', buffer, idx++, maxlen);
10002400:	0022      	movs	r2, r4
10002402:	464b      	mov	r3, r9
10002404:	0031      	movs	r1, r6
10002406:	2020      	movs	r0, #32
        while (idx - start_idx < width) {
10002408:	3501      	adds	r5, #1
            out(' ', buffer, idx++, maxlen);
1000240a:	47b8      	blx	r7
1000240c:	3401      	adds	r4, #1
        while (idx - start_idx < width) {
1000240e:	45a8      	cmp	r8, r5
10002410:	d8f6      	bhi.n	10002400 <_out_rev+0x78>
        }
    }

    return idx;
}
10002412:	0020      	movs	r0, r4
10002414:	bcf0      	pop	{r4, r5, r6, r7}
10002416:	46bb      	mov	fp, r7
10002418:	46b2      	mov	sl, r6
1000241a:	46a9      	mov	r9, r5
1000241c:	46a0      	mov	r8, r4
1000241e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    while (len) {
10002420:	002c      	movs	r4, r5
10002422:	e7e3      	b.n	100023ec <_out_rev+0x64>

10002424 <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char *buffer, size_t idx, size_t maxlen, char *buf, size_t len,
                           bool negative, unsigned int base, unsigned int prec, unsigned int width,
                           unsigned int flags) {
10002424:	b5f0      	push	{r4, r5, r6, r7, lr}
10002426:	464f      	mov	r7, r9
10002428:	4646      	mov	r6, r8
1000242a:	46d6      	mov	lr, sl
1000242c:	b5c0      	push	{r6, r7, lr}
1000242e:	b084      	sub	sp, #16
10002430:	4698      	mov	r8, r3
10002432:	ab0e      	add	r3, sp, #56	; 0x38
10002434:	781b      	ldrb	r3, [r3, #0]
10002436:	9f12      	ldr	r7, [sp, #72]	; 0x48
10002438:	4699      	mov	r9, r3
1000243a:	4694      	mov	ip, r2
1000243c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
1000243e:	9b10      	ldr	r3, [sp, #64]	; 0x40
10002440:	9e11      	ldr	r6, [sp, #68]	; 0x44
    // pad leading zeros
    if (!(flags & FLAGS_LEFT)) {
10002442:	07ba      	lsls	r2, r7, #30
10002444:	d425      	bmi.n	10002492 <_ntoa_format+0x6e>
        if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
10002446:	2e00      	cmp	r6, #0
10002448:	d14b      	bne.n	100024e2 <_ntoa_format+0xbe>
            width--;
        }
        while ((len < prec) && (len < PICO_PRINTF_NTOA_BUFFER_SIZE)) {
1000244a:	429c      	cmp	r4, r3
1000244c:	d300      	bcc.n	10002450 <_ntoa_format+0x2c>
1000244e:	e0bf      	b.n	100025d0 <_ntoa_format+0x1ac>
        if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
10002450:	2201      	movs	r2, #1
10002452:	403a      	ands	r2, r7
10002454:	4692      	mov	sl, r2
        while ((len < prec) && (len < PICO_PRINTF_NTOA_BUFFER_SIZE)) {
10002456:	2c1f      	cmp	r4, #31
10002458:	d900      	bls.n	1000245c <_ntoa_format+0x38>
1000245a:	e0b8      	b.n	100025ce <_ntoa_format+0x1aa>
1000245c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1000245e:	1e55      	subs	r5, r2, #1
            buf[len++] = '0';
10002460:	2230      	movs	r2, #48	; 0x30
10002462:	e001      	b.n	10002468 <_ntoa_format+0x44>
        while ((len < prec) && (len < PICO_PRINTF_NTOA_BUFFER_SIZE)) {
10002464:	2c20      	cmp	r4, #32
10002466:	d003      	beq.n	10002470 <_ntoa_format+0x4c>
            buf[len++] = '0';
10002468:	3401      	adds	r4, #1
1000246a:	552a      	strb	r2, [r5, r4]
        while ((len < prec) && (len < PICO_PRINTF_NTOA_BUFFER_SIZE)) {
1000246c:	42a3      	cmp	r3, r4
1000246e:	d8f9      	bhi.n	10002464 <_ntoa_format+0x40>
        }
        while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PICO_PRINTF_NTOA_BUFFER_SIZE)) {
10002470:	4652      	mov	r2, sl
10002472:	2a00      	cmp	r2, #0
10002474:	d00d      	beq.n	10002492 <_ntoa_format+0x6e>
10002476:	42a6      	cmp	r6, r4
10002478:	d90b      	bls.n	10002492 <_ntoa_format+0x6e>
1000247a:	2c20      	cmp	r4, #32
1000247c:	d044      	beq.n	10002508 <_ntoa_format+0xe4>
1000247e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
10002480:	1e55      	subs	r5, r2, #1
            buf[len++] = '0';
10002482:	2230      	movs	r2, #48	; 0x30
10002484:	e001      	b.n	1000248a <_ntoa_format+0x66>
        while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PICO_PRINTF_NTOA_BUFFER_SIZE)) {
10002486:	2c20      	cmp	r4, #32
10002488:	d03e      	beq.n	10002508 <_ntoa_format+0xe4>
            buf[len++] = '0';
1000248a:	3401      	adds	r4, #1
1000248c:	552a      	strb	r2, [r5, r4]
        while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PICO_PRINTF_NTOA_BUFFER_SIZE)) {
1000248e:	42b4      	cmp	r4, r6
10002490:	d1f9      	bne.n	10002486 <_ntoa_format+0x62>
        }
    }

    // handle hash
    if (flags & FLAGS_HASH) {
10002492:	06fa      	lsls	r2, r7, #27
10002494:	d54d      	bpl.n	10002532 <_ntoa_format+0x10e>
        if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
10002496:	057a      	lsls	r2, r7, #21
10002498:	d43f      	bmi.n	1000251a <_ntoa_format+0xf6>
1000249a:	2c00      	cmp	r4, #0
1000249c:	d139      	bne.n	10002512 <_ntoa_format+0xee>
            len--;
            if (len && (base == 16U)) {
                len--;
            }
        }
        if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PICO_PRINTF_NTOA_BUFFER_SIZE)) {
1000249e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
100024a0:	2b10      	cmp	r3, #16
100024a2:	d100      	bne.n	100024a6 <_ntoa_format+0x82>
100024a4:	e079      	b.n	1000259a <_ntoa_format+0x176>
            buf[len++] = 'x';
        } else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PICO_PRINTF_NTOA_BUFFER_SIZE)) {
            buf[len++] = 'X';
        } else if ((base == 2U) && (len < PICO_PRINTF_NTOA_BUFFER_SIZE)) {
100024a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
100024a8:	2b02      	cmp	r3, #2
100024aa:	d100      	bne.n	100024ae <_ntoa_format+0x8a>
100024ac:	e08a      	b.n	100025c4 <_ntoa_format+0x1a0>
            buf[len++] = 'b';
        }
        if (len < PICO_PRINTF_NTOA_BUFFER_SIZE) {
            buf[len++] = '0';
100024ae:	2330      	movs	r3, #48	; 0x30
100024b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
100024b2:	2401      	movs	r4, #1
100024b4:	7013      	strb	r3, [r2, #0]
        }
    }

    if (len < PICO_PRINTF_NTOA_BUFFER_SIZE) {
        if (negative) {
100024b6:	464b      	mov	r3, r9
100024b8:	2b00      	cmp	r3, #0
100024ba:	d03f      	beq.n	1000253c <_ntoa_format+0x118>
            buf[len++] = '-';
100024bc:	232d      	movs	r3, #45	; 0x2d
100024be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
100024c0:	5513      	strb	r3, [r2, r4]
100024c2:	3401      	adds	r4, #1
        } else if (flags & FLAGS_SPACE) {
            buf[len++] = ' ';
        }
    }

    return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
100024c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
100024c6:	4662      	mov	r2, ip
100024c8:	9300      	str	r3, [sp, #0]
100024ca:	9703      	str	r7, [sp, #12]
100024cc:	4643      	mov	r3, r8
100024ce:	9602      	str	r6, [sp, #8]
100024d0:	9401      	str	r4, [sp, #4]
100024d2:	f7ff ff59 	bl	10002388 <_out_rev>
}
100024d6:	b004      	add	sp, #16
100024d8:	bce0      	pop	{r5, r6, r7}
100024da:	46ba      	mov	sl, r7
100024dc:	46b1      	mov	r9, r6
100024de:	46a8      	mov	r8, r5
100024e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
100024e2:	2201      	movs	r2, #1
100024e4:	0015      	movs	r5, r2
100024e6:	403d      	ands	r5, r7
100024e8:	46aa      	mov	sl, r5
100024ea:	423a      	tst	r2, r7
100024ec:	d02f      	beq.n	1000254e <_ntoa_format+0x12a>
100024ee:	464a      	mov	r2, r9
100024f0:	2a00      	cmp	r2, #0
100024f2:	d102      	bne.n	100024fa <_ntoa_format+0xd6>
100024f4:	320c      	adds	r2, #12
100024f6:	423a      	tst	r2, r7
100024f8:	d000      	beq.n	100024fc <_ntoa_format+0xd8>
            width--;
100024fa:	3e01      	subs	r6, #1
        while ((len < prec) && (len < PICO_PRINTF_NTOA_BUFFER_SIZE)) {
100024fc:	429c      	cmp	r4, r3
100024fe:	d2ba      	bcs.n	10002476 <_ntoa_format+0x52>
10002500:	2c1f      	cmp	r4, #31
10002502:	d9ab      	bls.n	1000245c <_ntoa_format+0x38>
        while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PICO_PRINTF_NTOA_BUFFER_SIZE)) {
10002504:	2e20      	cmp	r6, #32
10002506:	d927      	bls.n	10002558 <_ntoa_format+0x134>
        if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
10002508:	2420      	movs	r4, #32
    if (flags & FLAGS_HASH) {
1000250a:	06fa      	lsls	r2, r7, #27
1000250c:	d5da      	bpl.n	100024c4 <_ntoa_format+0xa0>
        if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
1000250e:	057a      	lsls	r2, r7, #21
10002510:	d403      	bmi.n	1000251a <_ntoa_format+0xf6>
10002512:	42a3      	cmp	r3, r4
10002514:	d02d      	beq.n	10002572 <_ntoa_format+0x14e>
10002516:	42a6      	cmp	r6, r4
10002518:	d02b      	beq.n	10002572 <_ntoa_format+0x14e>
        if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PICO_PRINTF_NTOA_BUFFER_SIZE)) {
1000251a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1000251c:	2b10      	cmp	r3, #16
1000251e:	d032      	beq.n	10002586 <_ntoa_format+0x162>
        } else if ((base == 2U) && (len < PICO_PRINTF_NTOA_BUFFER_SIZE)) {
10002520:	2b02      	cmp	r3, #2
10002522:	d020      	beq.n	10002566 <_ntoa_format+0x142>
        if (len < PICO_PRINTF_NTOA_BUFFER_SIZE) {
10002524:	2c20      	cmp	r4, #32
10002526:	d0cd      	beq.n	100024c4 <_ntoa_format+0xa0>
            buf[len++] = '0';
10002528:	2230      	movs	r2, #48	; 0x30
1000252a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1000252c:	191b      	adds	r3, r3, r4
1000252e:	701a      	strb	r2, [r3, #0]
10002530:	3401      	adds	r4, #1
    if (len < PICO_PRINTF_NTOA_BUFFER_SIZE) {
10002532:	2c20      	cmp	r4, #32
10002534:	d0c6      	beq.n	100024c4 <_ntoa_format+0xa0>
        if (negative) {
10002536:	464b      	mov	r3, r9
10002538:	2b00      	cmp	r3, #0
1000253a:	d1bf      	bne.n	100024bc <_ntoa_format+0x98>
        } else if (flags & FLAGS_PLUS) {
1000253c:	077b      	lsls	r3, r7, #29
1000253e:	d40d      	bmi.n	1000255c <_ntoa_format+0x138>
        } else if (flags & FLAGS_SPACE) {
10002540:	073b      	lsls	r3, r7, #28
10002542:	d5bf      	bpl.n	100024c4 <_ntoa_format+0xa0>
            buf[len++] = ' ';
10002544:	2320      	movs	r3, #32
10002546:	9a0c      	ldr	r2, [sp, #48]	; 0x30
10002548:	5513      	strb	r3, [r2, r4]
1000254a:	3401      	adds	r4, #1
1000254c:	e7ba      	b.n	100024c4 <_ntoa_format+0xa0>
        while ((len < prec) && (len < PICO_PRINTF_NTOA_BUFFER_SIZE)) {
1000254e:	429c      	cmp	r4, r3
10002550:	d29f      	bcs.n	10002492 <_ntoa_format+0x6e>
10002552:	2c1f      	cmp	r4, #31
10002554:	d800      	bhi.n	10002558 <_ntoa_format+0x134>
10002556:	e781      	b.n	1000245c <_ntoa_format+0x38>
10002558:	2420      	movs	r4, #32
1000255a:	e79a      	b.n	10002492 <_ntoa_format+0x6e>
            buf[len++] = '+';  // ignore the space if the '+' exists
1000255c:	232b      	movs	r3, #43	; 0x2b
1000255e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
10002560:	5513      	strb	r3, [r2, r4]
10002562:	3401      	adds	r4, #1
10002564:	e7ae      	b.n	100024c4 <_ntoa_format+0xa0>
        } else if ((base == 2U) && (len < PICO_PRINTF_NTOA_BUFFER_SIZE)) {
10002566:	2c20      	cmp	r4, #32
10002568:	d0ac      	beq.n	100024c4 <_ntoa_format+0xa0>
            buf[len++] = 'b';
1000256a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1000256c:	191b      	adds	r3, r3, r4
1000256e:	3401      	adds	r4, #1
10002570:	e03a      	b.n	100025e8 <_ntoa_format+0x1c4>
            len--;
10002572:	1e63      	subs	r3, r4, #1
            if (len && (base == 16U)) {
10002574:	2c01      	cmp	r4, #1
10002576:	d092      	beq.n	1000249e <_ntoa_format+0x7a>
10002578:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
1000257a:	2a10      	cmp	r2, #16
1000257c:	d02a      	beq.n	100025d4 <_ntoa_format+0x1b0>
        } else if ((base == 2U) && (len < PICO_PRINTF_NTOA_BUFFER_SIZE)) {
1000257e:	2a02      	cmp	r2, #2
10002580:	d02f      	beq.n	100025e2 <_ntoa_format+0x1be>
10002582:	001c      	movs	r4, r3
10002584:	e7d0      	b.n	10002528 <_ntoa_format+0x104>
        if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PICO_PRINTF_NTOA_BUFFER_SIZE)) {
10002586:	06bb      	lsls	r3, r7, #26
10002588:	d40e      	bmi.n	100025a8 <_ntoa_format+0x184>
1000258a:	2c20      	cmp	r4, #32
1000258c:	d09a      	beq.n	100024c4 <_ntoa_format+0xa0>
            buf[len++] = 'x';
1000258e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
10002590:	191a      	adds	r2, r3, r4
10002592:	3401      	adds	r4, #1
10002594:	2378      	movs	r3, #120	; 0x78
10002596:	7013      	strb	r3, [r2, #0]
10002598:	e7c4      	b.n	10002524 <_ntoa_format+0x100>
        if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PICO_PRINTF_NTOA_BUFFER_SIZE)) {
1000259a:	06bb      	lsls	r3, r7, #26
1000259c:	d40d      	bmi.n	100025ba <_ntoa_format+0x196>
            buf[len++] = 'x';
1000259e:	2378      	movs	r3, #120	; 0x78
100025a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
100025a2:	2401      	movs	r4, #1
100025a4:	7013      	strb	r3, [r2, #0]
        if (len < PICO_PRINTF_NTOA_BUFFER_SIZE) {
100025a6:	e7bf      	b.n	10002528 <_ntoa_format+0x104>
        } else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PICO_PRINTF_NTOA_BUFFER_SIZE)) {
100025a8:	2c20      	cmp	r4, #32
100025aa:	d100      	bne.n	100025ae <_ntoa_format+0x18a>
100025ac:	e78a      	b.n	100024c4 <_ntoa_format+0xa0>
            buf[len++] = 'X';
100025ae:	2258      	movs	r2, #88	; 0x58
100025b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
100025b2:	191b      	adds	r3, r3, r4
100025b4:	701a      	strb	r2, [r3, #0]
100025b6:	3401      	adds	r4, #1
100025b8:	e7b4      	b.n	10002524 <_ntoa_format+0x100>
100025ba:	2358      	movs	r3, #88	; 0x58
100025bc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
100025be:	2401      	movs	r4, #1
100025c0:	7013      	strb	r3, [r2, #0]
        if (len < PICO_PRINTF_NTOA_BUFFER_SIZE) {
100025c2:	e7b1      	b.n	10002528 <_ntoa_format+0x104>
            buf[len++] = 'b';
100025c4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
100025c6:	3360      	adds	r3, #96	; 0x60
100025c8:	2401      	movs	r4, #1
100025ca:	7013      	strb	r3, [r2, #0]
        if (len < PICO_PRINTF_NTOA_BUFFER_SIZE) {
100025cc:	e7ac      	b.n	10002528 <_ntoa_format+0x104>
        while ((len < prec) && (len < PICO_PRINTF_NTOA_BUFFER_SIZE)) {
100025ce:	2420      	movs	r4, #32
        while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PICO_PRINTF_NTOA_BUFFER_SIZE)) {
100025d0:	2600      	movs	r6, #0
100025d2:	e75e      	b.n	10002492 <_ntoa_format+0x6e>
                len--;
100025d4:	3c02      	subs	r4, #2
        if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PICO_PRINTF_NTOA_BUFFER_SIZE)) {
100025d6:	06ba      	lsls	r2, r7, #26
100025d8:	d4e9      	bmi.n	100025ae <_ntoa_format+0x18a>
            buf[len++] = 'x';
100025da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
100025dc:	1912      	adds	r2, r2, r4
100025de:	001c      	movs	r4, r3
100025e0:	e7d8      	b.n	10002594 <_ntoa_format+0x170>
            buf[len++] = 'b';
100025e2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
100025e4:	4692      	mov	sl, r2
100025e6:	4453      	add	r3, sl
100025e8:	2262      	movs	r2, #98	; 0x62
100025ea:	701a      	strb	r2, [r3, #0]
100025ec:	e79a      	b.n	10002524 <_ntoa_format+0x100>
100025ee:	46c0      	nop			; (mov r8, r8)

100025f0 <_out_char>:
static inline void _out_char(char character, void *buffer, size_t idx, size_t maxlen) {
100025f0:	b510      	push	{r4, lr}
    if (character) {
100025f2:	2800      	cmp	r0, #0
100025f4:	d100      	bne.n	100025f8 <_out_char+0x8>
}
100025f6:	bd10      	pop	{r4, pc}
    putchar(character);
100025f8:	f001 fb48 	bl	10003c8c <__wrap_putchar>
}
100025fc:	e7fb      	b.n	100025f6 <_out_char+0x6>
100025fe:	46c0      	nop			; (mov r8, r8)

10002600 <_out_fct>:
static inline void _out_fct(char character, void *buffer, size_t idx, size_t maxlen) {
10002600:	000b      	movs	r3, r1
10002602:	b510      	push	{r4, lr}
    if (character) {
10002604:	2800      	cmp	r0, #0
10002606:	d002      	beq.n	1000260e <_out_fct+0xe>
        ((out_fct_wrap_type *) buffer)->fct(character, ((out_fct_wrap_type *) buffer)->arg);
10002608:	6849      	ldr	r1, [r1, #4]
1000260a:	681b      	ldr	r3, [r3, #0]
1000260c:	4798      	blx	r3
}
1000260e:	bd10      	pop	{r4, pc}

10002610 <_etoa>:

#if PICO_PRINTF_SUPPORT_EXPONENTIAL

// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char *buffer, size_t idx, size_t maxlen, double value, unsigned int prec,
                    unsigned int width, unsigned int flags) {
10002610:	b5f0      	push	{r4, r5, r6, r7, lr}
10002612:	46de      	mov	lr, fp
10002614:	4657      	mov	r7, sl
10002616:	464e      	mov	r6, r9
10002618:	4645      	mov	r5, r8
1000261a:	b5e0      	push	{r5, r6, r7, lr}
1000261c:	b09b      	sub	sp, #108	; 0x6c
1000261e:	469a      	mov	sl, r3
10002620:	9b24      	ldr	r3, [sp, #144]	; 0x90
10002622:	468b      	mov	fp, r1
10002624:	4699      	mov	r9, r3
10002626:	9b25      	ldr	r3, [sp, #148]	; 0x94
10002628:	900b      	str	r0, [sp, #44]	; 0x2c
1000262a:	4698      	mov	r8, r3
1000262c:	920c      	str	r2, [sp, #48]	; 0x30
    // check for NaN and special values
    if (is_nan(value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
1000262e:	4643      	mov	r3, r8
10002630:	464a      	mov	r2, r9
10002632:	4648      	mov	r0, r9
10002634:	4641      	mov	r1, r8
10002636:	f7fe f972 	bl	1000091e <__wrap___aeabi_dcmpun>
1000263a:	2800      	cmp	r0, #0
1000263c:	d000      	beq.n	10002640 <_etoa+0x30>
1000263e:	e194      	b.n	1000296a <_etoa+0x35a>
10002640:	2201      	movs	r2, #1
10002642:	4648      	mov	r0, r9
10002644:	4641      	mov	r1, r8
10002646:	4be0      	ldr	r3, [pc, #896]	; (100029c8 <_etoa+0x3b8>)
10002648:	4252      	negs	r2, r2
1000264a:	f7fe f963 	bl	10000914 <__wrap___aeabi_dcmpgt>
1000264e:	2800      	cmp	r0, #0
10002650:	d000      	beq.n	10002654 <_etoa+0x44>
10002652:	e18a      	b.n	1000296a <_etoa+0x35a>
10002654:	2201      	movs	r2, #1
10002656:	4648      	mov	r0, r9
10002658:	4641      	mov	r1, r8
1000265a:	4bdc      	ldr	r3, [pc, #880]	; (100029cc <_etoa+0x3bc>)
1000265c:	4252      	negs	r2, r2
1000265e:	f7fe f943 	bl	100008e8 <__wrap___aeabi_dcmplt>
10002662:	2800      	cmp	r0, #0
10002664:	d000      	beq.n	10002668 <_etoa+0x58>
10002666:	e180      	b.n	1000296a <_etoa+0x35a>
        return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
    }

    // determine the sign
    const bool negative = value < 0;
    if (negative) {
10002668:	2200      	movs	r2, #0
1000266a:	2300      	movs	r3, #0
1000266c:	4648      	mov	r0, r9
1000266e:	4641      	mov	r1, r8
10002670:	f7fe f93a 	bl	100008e8 <__wrap___aeabi_dcmplt>
10002674:	2800      	cmp	r0, #0
10002676:	d000      	beq.n	1000267a <_etoa+0x6a>
10002678:	e19b      	b.n	100029b2 <_etoa+0x3a2>
1000267a:	464a      	mov	r2, r9
1000267c:	4643      	mov	r3, r8
1000267e:	920a      	str	r2, [sp, #40]	; 0x28
10002680:	9309      	str	r3, [sp, #36]	; 0x24
        value = -value;
    }

    // default precision
    if (!(flags & FLAGS_PRECISION)) {
10002682:	2380      	movs	r3, #128	; 0x80
10002684:	9a28      	ldr	r2, [sp, #160]	; 0xa0
10002686:	00db      	lsls	r3, r3, #3
10002688:	401a      	ands	r2, r3
1000268a:	9211      	str	r2, [sp, #68]	; 0x44
1000268c:	9a28      	ldr	r2, [sp, #160]	; 0xa0
1000268e:	421a      	tst	r2, r3
10002690:	d101      	bne.n	10002696 <_etoa+0x86>
        prec = PICO_PRINTF_DEFAULT_FLOAT_PRECISION;
10002692:	2306      	movs	r3, #6
10002694:	9326      	str	r3, [sp, #152]	; 0x98
        uint64_t U;
        double F;
    } conv;

    conv.F = value;
    int exp2 = (int) ((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
10002696:	4bce      	ldr	r3, [pc, #824]	; (100029d0 <_etoa+0x3c0>)
10002698:	9f09      	ldr	r7, [sp, #36]	; 0x24
1000269a:	469c      	mov	ip, r3
1000269c:	0078      	lsls	r0, r7, #1
1000269e:	0d40      	lsrs	r0, r0, #21
100026a0:	4460      	add	r0, ip
    conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
    // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
    int expval = (int) (0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
100026a2:	f7fe f94f 	bl	10000944 <__wrap___aeabi_i2d>
100026a6:	4acb      	ldr	r2, [pc, #812]	; (100029d4 <_etoa+0x3c4>)
100026a8:	4bcb      	ldr	r3, [pc, #812]	; (100029d8 <_etoa+0x3c8>)
100026aa:	f7fe f8db 	bl	10000864 <__wrap___aeabi_dmul>
100026ae:	4acb      	ldr	r2, [pc, #812]	; (100029dc <_etoa+0x3cc>)
100026b0:	4bcb      	ldr	r3, [pc, #812]	; (100029e0 <_etoa+0x3d0>)
100026b2:	f7fe f8c5 	bl	10000840 <__wrap___aeabi_dadd>
    conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
100026b6:	033b      	lsls	r3, r7, #12
100026b8:	4aca      	ldr	r2, [pc, #808]	; (100029e4 <_etoa+0x3d4>)
    conv.F = value;
100026ba:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
100026bc:	0b1b      	lsrs	r3, r3, #12
100026be:	431a      	orrs	r2, r3
    int expval = (int) (0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
100026c0:	0004      	movs	r4, r0
100026c2:	000d      	movs	r5, r1
    conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
100026c4:	0030      	movs	r0, r6
100026c6:	0011      	movs	r1, r2
    int expval = (int) (0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
100026c8:	4bc7      	ldr	r3, [pc, #796]	; (100029e8 <_etoa+0x3d8>)
100026ca:	2200      	movs	r2, #0
100026cc:	f7fe f8af 	bl	1000082e <__wrap___aeabi_dsub>
100026d0:	4ac6      	ldr	r2, [pc, #792]	; (100029ec <_etoa+0x3dc>)
100026d2:	4bc7      	ldr	r3, [pc, #796]	; (100029f0 <_etoa+0x3e0>)
100026d4:	f7fe f8c6 	bl	10000864 <__wrap___aeabi_dmul>
100026d8:	0002      	movs	r2, r0
100026da:	000b      	movs	r3, r1
100026dc:	0020      	movs	r0, r4
100026de:	0029      	movs	r1, r5
100026e0:	f7fe f8ae 	bl	10000840 <__wrap___aeabi_dadd>
100026e4:	f7fe f946 	bl	10000974 <__wrap___aeabi_d2iz>
    // now we want to compute 10^expval but we want to be sure it won't overflow
    exp2 = (int) (expval * 3.321928094887362 + 0.5);
100026e8:	900d      	str	r0, [sp, #52]	; 0x34
100026ea:	f7fe f92b 	bl	10000944 <__wrap___aeabi_i2d>
100026ee:	4ac1      	ldr	r2, [pc, #772]	; (100029f4 <_etoa+0x3e4>)
100026f0:	4bc1      	ldr	r3, [pc, #772]	; (100029f8 <_etoa+0x3e8>)
100026f2:	0004      	movs	r4, r0
100026f4:	000d      	movs	r5, r1
100026f6:	f7fe f8b5 	bl	10000864 <__wrap___aeabi_dmul>
100026fa:	2200      	movs	r2, #0
100026fc:	4bbf      	ldr	r3, [pc, #764]	; (100029fc <_etoa+0x3ec>)
100026fe:	f7fe f89f 	bl	10000840 <__wrap___aeabi_dadd>
10002702:	f7fe f937 	bl	10000974 <__wrap___aeabi_d2iz>
    const double z = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
10002706:	4abe      	ldr	r2, [pc, #760]	; (10002a00 <_etoa+0x3f0>)
    exp2 = (int) (expval * 3.321928094887362 + 0.5);
10002708:	0006      	movs	r6, r0
    const double z = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
1000270a:	4bbe      	ldr	r3, [pc, #760]	; (10002a04 <_etoa+0x3f4>)
1000270c:	0020      	movs	r0, r4
1000270e:	0029      	movs	r1, r5
10002710:	f7fe f8a8 	bl	10000864 <__wrap___aeabi_dmul>
10002714:	0004      	movs	r4, r0
10002716:	0030      	movs	r0, r6
10002718:	000d      	movs	r5, r1
1000271a:	9610      	str	r6, [sp, #64]	; 0x40
1000271c:	f7fe f912 	bl	10000944 <__wrap___aeabi_i2d>
10002720:	4ab9      	ldr	r2, [pc, #740]	; (10002a08 <_etoa+0x3f8>)
10002722:	4bba      	ldr	r3, [pc, #744]	; (10002a0c <_etoa+0x3fc>)
10002724:	f7fe f89e 	bl	10000864 <__wrap___aeabi_dmul>
10002728:	0002      	movs	r2, r0
1000272a:	000b      	movs	r3, r1
1000272c:	0020      	movs	r0, r4
1000272e:	0029      	movs	r1, r5
10002730:	f7fe f87d 	bl	1000082e <__wrap___aeabi_dsub>
    const double z2 = z * z;
10002734:	0002      	movs	r2, r0
10002736:	000b      	movs	r3, r1
    const double z = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
10002738:	0006      	movs	r6, r0
1000273a:	000f      	movs	r7, r1
    const double z2 = z * z;
1000273c:	f7fe f892 	bl	10000864 <__wrap___aeabi_dmul>
    conv.U = (uint64_t) (exp2 + 1023) << 52U;
    // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
    conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
10002740:	0032      	movs	r2, r6
    const double z2 = z * z;
10002742:	0004      	movs	r4, r0
10002744:	000d      	movs	r5, r1
    conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
10002746:	003b      	movs	r3, r7
10002748:	0030      	movs	r0, r6
1000274a:	0039      	movs	r1, r7
1000274c:	f7fe f878 	bl	10000840 <__wrap___aeabi_dadd>
10002750:	2200      	movs	r2, #0
10002752:	900e      	str	r0, [sp, #56]	; 0x38
10002754:	910f      	str	r1, [sp, #60]	; 0x3c
10002756:	4bae      	ldr	r3, [pc, #696]	; (10002a10 <_etoa+0x400>)
10002758:	0020      	movs	r0, r4
1000275a:	0029      	movs	r1, r5
1000275c:	f7fe f879 	bl	10000852 <__wrap___aeabi_ddiv>
10002760:	2200      	movs	r2, #0
10002762:	4bac      	ldr	r3, [pc, #688]	; (10002a14 <_etoa+0x404>)
10002764:	f7fe f86c 	bl	10000840 <__wrap___aeabi_dadd>
10002768:	0002      	movs	r2, r0
1000276a:	000b      	movs	r3, r1
1000276c:	0020      	movs	r0, r4
1000276e:	0029      	movs	r1, r5
10002770:	f7fe f86f 	bl	10000852 <__wrap___aeabi_ddiv>
10002774:	2200      	movs	r2, #0
10002776:	4ba8      	ldr	r3, [pc, #672]	; (10002a18 <_etoa+0x408>)
10002778:	f7fe f862 	bl	10000840 <__wrap___aeabi_dadd>
1000277c:	0002      	movs	r2, r0
1000277e:	000b      	movs	r3, r1
10002780:	0020      	movs	r0, r4
10002782:	0029      	movs	r1, r5
10002784:	f7fe f865 	bl	10000852 <__wrap___aeabi_ddiv>
10002788:	000d      	movs	r5, r1
1000278a:	2180      	movs	r1, #128	; 0x80
1000278c:	0004      	movs	r4, r0
1000278e:	0032      	movs	r2, r6
10002790:	003b      	movs	r3, r7
10002792:	2000      	movs	r0, #0
10002794:	05c9      	lsls	r1, r1, #23
10002796:	f7fe f84a 	bl	1000082e <__wrap___aeabi_dsub>
1000279a:	0002      	movs	r2, r0
1000279c:	000b      	movs	r3, r1
1000279e:	0020      	movs	r0, r4
100027a0:	0029      	movs	r1, r5
100027a2:	f7fe f84d 	bl	10000840 <__wrap___aeabi_dadd>
100027a6:	0002      	movs	r2, r0
100027a8:	000b      	movs	r3, r1
100027aa:	980e      	ldr	r0, [sp, #56]	; 0x38
100027ac:	990f      	ldr	r1, [sp, #60]	; 0x3c
100027ae:	f7fe f850 	bl	10000852 <__wrap___aeabi_ddiv>
100027b2:	2200      	movs	r2, #0
100027b4:	4b8b      	ldr	r3, [pc, #556]	; (100029e4 <_etoa+0x3d4>)
100027b6:	f7fe f843 	bl	10000840 <__wrap___aeabi_dadd>
    conv.U = (uint64_t) (exp2 + 1023) << 52U;
100027ba:	4b98      	ldr	r3, [pc, #608]	; (10002a1c <_etoa+0x40c>)
100027bc:	9c10      	ldr	r4, [sp, #64]	; 0x40
100027be:	469c      	mov	ip, r3
100027c0:	4464      	add	r4, ip
100027c2:	2200      	movs	r2, #0
100027c4:	0523      	lsls	r3, r4, #20
    conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
100027c6:	f7fe f84d 	bl	10000864 <__wrap___aeabi_dmul>
100027ca:	0006      	movs	r6, r0
100027cc:	000f      	movs	r7, r1
    // correct for rounding errors
    if (value < conv.F) {
100027ce:	0002      	movs	r2, r0
100027d0:	000b      	movs	r3, r1
100027d2:	980a      	ldr	r0, [sp, #40]	; 0x28
100027d4:	9909      	ldr	r1, [sp, #36]	; 0x24
100027d6:	f7fe f887 	bl	100008e8 <__wrap___aeabi_dcmplt>
100027da:	2800      	cmp	r0, #0
100027dc:	d00a      	beq.n	100027f4 <_etoa+0x1e4>
        expval--;
100027de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
        conv.F /= 10;
100027e0:	0030      	movs	r0, r6
        expval--;
100027e2:	3b01      	subs	r3, #1
        conv.F /= 10;
100027e4:	0039      	movs	r1, r7
        expval--;
100027e6:	930d      	str	r3, [sp, #52]	; 0x34
        conv.F /= 10;
100027e8:	2200      	movs	r2, #0
100027ea:	4b8a      	ldr	r3, [pc, #552]	; (10002a14 <_etoa+0x404>)
100027ec:	f7fe f831 	bl	10000852 <__wrap___aeabi_ddiv>
100027f0:	0006      	movs	r6, r0
100027f2:	000f      	movs	r7, r1
    }

    // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
    unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
100027f4:	9d0d      	ldr	r5, [sp, #52]	; 0x34
100027f6:	24c6      	movs	r4, #198	; 0xc6
100027f8:	002b      	movs	r3, r5
100027fa:	3363      	adds	r3, #99	; 0x63
100027fc:	429c      	cmp	r4, r3
100027fe:	41a4      	sbcs	r4, r4

    // in "%g" mode, "prec" is the number of *significant figures* not decimals
    if (flags & FLAGS_ADAPT_EXP) {
10002800:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
10002802:	4264      	negs	r4, r4
10002804:	3404      	adds	r4, #4
    if (flags & FLAGS_ADAPT_EXP) {
10002806:	051b      	lsls	r3, r3, #20
10002808:	d51f      	bpl.n	1000284a <_etoa+0x23a>
        // do we want to fall-back to "%f" mode?
        if ((value >= 1e-4) && (value < 1e6)) {
1000280a:	4a85      	ldr	r2, [pc, #532]	; (10002a20 <_etoa+0x410>)
1000280c:	4b85      	ldr	r3, [pc, #532]	; (10002a24 <_etoa+0x414>)
1000280e:	980a      	ldr	r0, [sp, #40]	; 0x28
10002810:	9909      	ldr	r1, [sp, #36]	; 0x24
10002812:	f7fe f877 	bl	10000904 <__wrap___aeabi_dcmpge>
10002816:	2800      	cmp	r0, #0
10002818:	d100      	bne.n	1000281c <_etoa+0x20c>
1000281a:	e0bf      	b.n	1000299c <_etoa+0x38c>
1000281c:	2200      	movs	r2, #0
1000281e:	4b82      	ldr	r3, [pc, #520]	; (10002a28 <_etoa+0x418>)
10002820:	980a      	ldr	r0, [sp, #40]	; 0x28
10002822:	9909      	ldr	r1, [sp, #36]	; 0x24
10002824:	f7fe f860 	bl	100008e8 <__wrap___aeabi_dcmplt>
10002828:	2800      	cmp	r0, #0
1000282a:	d100      	bne.n	1000282e <_etoa+0x21e>
1000282c:	e0b6      	b.n	1000299c <_etoa+0x38c>
            if ((int) prec > expval) {
1000282e:	9b26      	ldr	r3, [sp, #152]	; 0x98
10002830:	429d      	cmp	r5, r3
10002832:	da00      	bge.n	10002836 <_etoa+0x226>
10002834:	e0c4      	b.n	100029c0 <_etoa+0x3b0>
                prec = (unsigned) ((int) prec - expval - 1);
            } else {
                prec = 0;
10002836:	2300      	movs	r3, #0
10002838:	9326      	str	r3, [sp, #152]	; 0x98
            }
            flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
1000283a:	2380      	movs	r3, #128	; 0x80
1000283c:	9a28      	ldr	r2, [sp, #160]	; 0xa0
1000283e:	00db      	lsls	r3, r3, #3
10002840:	431a      	orrs	r2, r3
            // no characters in exponent
            minwidth = 0U;
            expval = 0;
10002842:	2300      	movs	r3, #0
            minwidth = 0U;
10002844:	2400      	movs	r4, #0
            flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
10002846:	9228      	str	r2, [sp, #160]	; 0xa0
            expval = 0;
10002848:	930d      	str	r3, [sp, #52]	; 0x34
        }
    }

    // will everything fit?
    unsigned int fwidth = width;
    if (width > minwidth) {
1000284a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
        // we didn't fall-back so subtract the characters required for the exponent
        fwidth -= minwidth;
    } else {
        // not enough characters, so go back to default sizing
        fwidth = 0U;
1000284c:	2500      	movs	r5, #0
    if (width > minwidth) {
1000284e:	42a3      	cmp	r3, r4
10002850:	d900      	bls.n	10002854 <_etoa+0x244>
        fwidth -= minwidth;
10002852:	1b1d      	subs	r5, r3, r4
    }
    if ((flags & FLAGS_LEFT) && minwidth) {
10002854:	2302      	movs	r3, #2
10002856:	9a28      	ldr	r2, [sp, #160]	; 0xa0
10002858:	401a      	ands	r2, r3
1000285a:	9210      	str	r2, [sp, #64]	; 0x40
1000285c:	9a28      	ldr	r2, [sp, #160]	; 0xa0
1000285e:	4213      	tst	r3, r2
10002860:	d003      	beq.n	1000286a <_etoa+0x25a>
        // if we're padding on the right, DON'T pad the floating part
        fwidth = 0U;
10002862:	4263      	negs	r3, r4
10002864:	4163      	adcs	r3, r4
10002866:	425b      	negs	r3, r3
10002868:	401d      	ands	r5, r3
    }

    // rescale the float value
    if (expval) {
1000286a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1000286c:	2b00      	cmp	r3, #0
1000286e:	d007      	beq.n	10002880 <_etoa+0x270>
        value /= conv.F;
10002870:	980a      	ldr	r0, [sp, #40]	; 0x28
10002872:	9909      	ldr	r1, [sp, #36]	; 0x24
10002874:	0032      	movs	r2, r6
10002876:	003b      	movs	r3, r7
10002878:	f7fd ffeb 	bl	10000852 <__wrap___aeabi_ddiv>
1000287c:	900a      	str	r0, [sp, #40]	; 0x28
1000287e:	9109      	str	r1, [sp, #36]	; 0x24
    }

    // output the floating part
    const size_t start_idx = idx;
    idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
10002880:	2200      	movs	r2, #0
10002882:	2300      	movs	r3, #0
10002884:	4648      	mov	r0, r9
10002886:	4641      	mov	r1, r8
10002888:	f7fe f82e 	bl	100008e8 <__wrap___aeabi_dcmplt>
1000288c:	2800      	cmp	r0, #0
1000288e:	d005      	beq.n	1000289c <_etoa+0x28c>
10002890:	2080      	movs	r0, #128	; 0x80
10002892:	0600      	lsls	r0, r0, #24
10002894:	4684      	mov	ip, r0
10002896:	9909      	ldr	r1, [sp, #36]	; 0x24
10002898:	4461      	add	r1, ip
1000289a:	9109      	str	r1, [sp, #36]	; 0x24
1000289c:	9a28      	ldr	r2, [sp, #160]	; 0xa0
1000289e:	4b63      	ldr	r3, [pc, #396]	; (10002a2c <_etoa+0x41c>)
100028a0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
100028a2:	4013      	ands	r3, r2
100028a4:	9304      	str	r3, [sp, #16]
100028a6:	9b26      	ldr	r3, [sp, #152]	; 0x98
100028a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
100028aa:	9302      	str	r3, [sp, #8]
100028ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
100028ae:	9503      	str	r5, [sp, #12]
100028b0:	9200      	str	r2, [sp, #0]
100028b2:	9301      	str	r3, [sp, #4]
100028b4:	4659      	mov	r1, fp
100028b6:	4653      	mov	r3, sl
100028b8:	0030      	movs	r0, r6
100028ba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
100028bc:	f000 f8b8 	bl	10002a30 <_ftoa>
100028c0:	0005      	movs	r5, r0

    // output the exponent part
    if (minwidth) {
100028c2:	2c00      	cmp	r4, #0
100028c4:	d062      	beq.n	1000298c <_etoa+0x37c>
        // output the exponential symbol
        out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
100028c6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
100028c8:	002a      	movs	r2, r5
100028ca:	0698      	lsls	r0, r3, #26
100028cc:	231f      	movs	r3, #31
100028ce:	17c0      	asrs	r0, r0, #31
100028d0:	4398      	bics	r0, r3
100028d2:	1c6b      	adds	r3, r5, #1
100028d4:	4698      	mov	r8, r3
100028d6:	4659      	mov	r1, fp
100028d8:	4653      	mov	r3, sl
100028da:	3065      	adds	r0, #101	; 0x65
100028dc:	47b0      	blx	r6
        // output the exponent value
        idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth - 1,
100028de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
100028e0:	2600      	movs	r6, #0
100028e2:	17da      	asrs	r2, r3, #31
100028e4:	189d      	adds	r5, r3, r2
100028e6:	0fdb      	lsrs	r3, r3, #31
100028e8:	4699      	mov	r9, r3
100028ea:	4055      	eors	r5, r2
100028ec:	3c01      	subs	r4, #1
    if (!(flags & FLAGS_PRECISION) || value) {
100028ee:	e001      	b.n	100028f4 <_etoa+0x2e4>
        } while (value && (len < PICO_PRINTF_NTOA_BUFFER_SIZE));
100028f0:	2e20      	cmp	r6, #32
100028f2:	d013      	beq.n	1000291c <_etoa+0x30c>
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
100028f4:	aa0a      	add	r2, sp, #40	; 0x28
100028f6:	4694      	mov	ip, r2
100028f8:	231f      	movs	r3, #31
            const char digit = (char) (value % base);
100028fa:	0028      	movs	r0, r5
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
100028fc:	4463      	add	r3, ip
            const char digit = (char) (value % base);
100028fe:	210a      	movs	r1, #10
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
10002900:	3601      	adds	r6, #1
10002902:	199f      	adds	r7, r3, r6
            const char digit = (char) (value % base);
10002904:	f7fd fd36 	bl	10000374 <__wrap___aeabi_uidiv>
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
10002908:	3130      	adds	r1, #48	; 0x30
1000290a:	7039      	strb	r1, [r7, #0]
            value /= base;
1000290c:	0028      	movs	r0, r5
1000290e:	210a      	movs	r1, #10
10002910:	f7fd fd30 	bl	10000374 <__wrap___aeabi_uidiv>
10002914:	002f      	movs	r7, r5
10002916:	0005      	movs	r5, r0
        } while (value && (len < PICO_PRINTF_NTOA_BUFFER_SIZE));
10002918:	2f09      	cmp	r7, #9
1000291a:	d8e9      	bhi.n	100028f0 <_etoa+0x2e0>
    return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int) base, prec, width, flags);
1000291c:	2305      	movs	r3, #5
1000291e:	9306      	str	r3, [sp, #24]
10002920:	2300      	movs	r3, #0
10002922:	9304      	str	r3, [sp, #16]
10002924:	330a      	adds	r3, #10
10002926:	9303      	str	r3, [sp, #12]
10002928:	464b      	mov	r3, r9
1000292a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
1000292c:	9302      	str	r3, [sp, #8]
1000292e:	ab12      	add	r3, sp, #72	; 0x48
10002930:	9300      	str	r3, [sp, #0]
10002932:	4642      	mov	r2, r8
10002934:	4653      	mov	r3, sl
10002936:	4659      	mov	r1, fp
10002938:	0038      	movs	r0, r7
1000293a:	9405      	str	r4, [sp, #20]
1000293c:	9601      	str	r6, [sp, #4]
1000293e:	f7ff fd71 	bl	10002424 <_ntoa_format>
                         FLAGS_ZEROPAD | FLAGS_PLUS);
        // might need to right-pad spaces
        if (flags & FLAGS_LEFT) {
10002942:	9b10      	ldr	r3, [sp, #64]	; 0x40
    return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int) base, prec, width, flags);
10002944:	0005      	movs	r5, r0
        if (flags & FLAGS_LEFT) {
10002946:	2b00      	cmp	r3, #0
10002948:	d020      	beq.n	1000298c <_etoa+0x37c>
            while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
1000294a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1000294c:	1ac4      	subs	r4, r0, r3
1000294e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
10002950:	42a3      	cmp	r3, r4
10002952:	d91b      	bls.n	1000298c <_etoa+0x37c>
10002954:	001e      	movs	r6, r3
10002956:	002a      	movs	r2, r5
10002958:	4653      	mov	r3, sl
1000295a:	4659      	mov	r1, fp
1000295c:	2020      	movs	r0, #32
1000295e:	3401      	adds	r4, #1
10002960:	47b8      	blx	r7
10002962:	3501      	adds	r5, #1
10002964:	42a6      	cmp	r6, r4
10002966:	d8f6      	bhi.n	10002956 <_etoa+0x346>
10002968:	e010      	b.n	1000298c <_etoa+0x37c>
        return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
1000296a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
1000296c:	464a      	mov	r2, r9
1000296e:	9304      	str	r3, [sp, #16]
10002970:	9b27      	ldr	r3, [sp, #156]	; 0x9c
10002972:	4659      	mov	r1, fp
10002974:	9303      	str	r3, [sp, #12]
10002976:	9b26      	ldr	r3, [sp, #152]	; 0x98
10002978:	980b      	ldr	r0, [sp, #44]	; 0x2c
1000297a:	9302      	str	r3, [sp, #8]
1000297c:	4643      	mov	r3, r8
1000297e:	9200      	str	r2, [sp, #0]
10002980:	9301      	str	r3, [sp, #4]
10002982:	4653      	mov	r3, sl
10002984:	9a0c      	ldr	r2, [sp, #48]	; 0x30
10002986:	f000 f853 	bl	10002a30 <_ftoa>
1000298a:	0005      	movs	r5, r0
        }
    }
    return idx;
}
1000298c:	0028      	movs	r0, r5
1000298e:	b01b      	add	sp, #108	; 0x6c
10002990:	bcf0      	pop	{r4, r5, r6, r7}
10002992:	46bb      	mov	fp, r7
10002994:	46b2      	mov	sl, r6
10002996:	46a9      	mov	r9, r5
10002998:	46a0      	mov	r8, r4
1000299a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if ((prec > 0) && (flags & FLAGS_PRECISION)) {
1000299c:	9b26      	ldr	r3, [sp, #152]	; 0x98
1000299e:	2b00      	cmp	r3, #0
100029a0:	d100      	bne.n	100029a4 <_etoa+0x394>
100029a2:	e752      	b.n	1000284a <_etoa+0x23a>
                --prec;
100029a4:	9b11      	ldr	r3, [sp, #68]	; 0x44
100029a6:	1e5a      	subs	r2, r3, #1
100029a8:	4193      	sbcs	r3, r2
100029aa:	9a26      	ldr	r2, [sp, #152]	; 0x98
100029ac:	1ad3      	subs	r3, r2, r3
100029ae:	9326      	str	r3, [sp, #152]	; 0x98
100029b0:	e74b      	b.n	1000284a <_etoa+0x23a>
        value = -value;
100029b2:	464b      	mov	r3, r9
100029b4:	930a      	str	r3, [sp, #40]	; 0x28
100029b6:	2380      	movs	r3, #128	; 0x80
100029b8:	061b      	lsls	r3, r3, #24
100029ba:	4443      	add	r3, r8
100029bc:	9309      	str	r3, [sp, #36]	; 0x24
100029be:	e660      	b.n	10002682 <_etoa+0x72>
                prec = (unsigned) ((int) prec - expval - 1);
100029c0:	1b58      	subs	r0, r3, r5
100029c2:	1e43      	subs	r3, r0, #1
100029c4:	9326      	str	r3, [sp, #152]	; 0x98
100029c6:	e738      	b.n	1000283a <_etoa+0x22a>
100029c8:	7fefffff 	.word	0x7fefffff
100029cc:	ffefffff 	.word	0xffefffff
100029d0:	fffffc01 	.word	0xfffffc01
100029d4:	509f79fb 	.word	0x509f79fb
100029d8:	3fd34413 	.word	0x3fd34413
100029dc:	8b60c8b3 	.word	0x8b60c8b3
100029e0:	3fc68a28 	.word	0x3fc68a28
100029e4:	3ff00000 	.word	0x3ff00000
100029e8:	3ff80000 	.word	0x3ff80000
100029ec:	636f4361 	.word	0x636f4361
100029f0:	3fd287a7 	.word	0x3fd287a7
100029f4:	0979a371 	.word	0x0979a371
100029f8:	400a934f 	.word	0x400a934f
100029fc:	3fe00000 	.word	0x3fe00000
10002a00:	bbb55516 	.word	0xbbb55516
10002a04:	40026bb1 	.word	0x40026bb1
10002a08:	fefa39ef 	.word	0xfefa39ef
10002a0c:	3fe62e42 	.word	0x3fe62e42
10002a10:	402c0000 	.word	0x402c0000
10002a14:	40240000 	.word	0x40240000
10002a18:	40180000 	.word	0x40180000
10002a1c:	000003ff 	.word	0x000003ff
10002a20:	eb1c432d 	.word	0xeb1c432d
10002a24:	3f1a36e2 	.word	0x3f1a36e2
10002a28:	412e8480 	.word	0x412e8480
10002a2c:	fffff7ff 	.word	0xfffff7ff

10002a30 <_ftoa>:
                    unsigned int width, unsigned int flags) {
10002a30:	b5f0      	push	{r4, r5, r6, r7, lr}
10002a32:	464e      	mov	r6, r9
10002a34:	46de      	mov	lr, fp
10002a36:	4657      	mov	r7, sl
10002a38:	4645      	mov	r5, r8
10002a3a:	b5e0      	push	{r5, r6, r7, lr}
10002a3c:	b097      	sub	sp, #92	; 0x5c
10002a3e:	4699      	mov	r9, r3
10002a40:	9e20      	ldr	r6, [sp, #128]	; 0x80
10002a42:	9f21      	ldr	r7, [sp, #132]	; 0x84
10002a44:	9b22      	ldr	r3, [sp, #136]	; 0x88
10002a46:	4683      	mov	fp, r0
10002a48:	4698      	mov	r8, r3
10002a4a:	9107      	str	r1, [sp, #28]
10002a4c:	920c      	str	r2, [sp, #48]	; 0x30
    if (is_nan(value))
10002a4e:	003b      	movs	r3, r7
10002a50:	0032      	movs	r2, r6
10002a52:	0030      	movs	r0, r6
10002a54:	0039      	movs	r1, r7
10002a56:	f7fd ff62 	bl	1000091e <__wrap___aeabi_dcmpun>
10002a5a:	2800      	cmp	r0, #0
10002a5c:	d000      	beq.n	10002a60 <_ftoa+0x30>
10002a5e:	e1a9      	b.n	10002db4 <_ftoa+0x384>
    if (value < -DBL_MAX)
10002a60:	2201      	movs	r2, #1
10002a62:	0030      	movs	r0, r6
10002a64:	0039      	movs	r1, r7
10002a66:	4bca      	ldr	r3, [pc, #808]	; (10002d90 <_ftoa+0x360>)
10002a68:	4252      	negs	r2, r2
10002a6a:	f7fd ff3d 	bl	100008e8 <__wrap___aeabi_dcmplt>
10002a6e:	2800      	cmp	r0, #0
10002a70:	d000      	beq.n	10002a74 <_ftoa+0x44>
10002a72:	e0e1      	b.n	10002c38 <_ftoa+0x208>
    if (value > DBL_MAX)
10002a74:	2201      	movs	r2, #1
10002a76:	0030      	movs	r0, r6
10002a78:	0039      	movs	r1, r7
10002a7a:	4bc6      	ldr	r3, [pc, #792]	; (10002d94 <_ftoa+0x364>)
10002a7c:	4252      	negs	r2, r2
10002a7e:	f7fd ff49 	bl	10000914 <__wrap___aeabi_dcmpgt>
10002a82:	2800      	cmp	r0, #0
10002a84:	d000      	beq.n	10002a88 <_ftoa+0x58>
10002a86:	e0b7      	b.n	10002bf8 <_ftoa+0x1c8>
    if ((value > PICO_PRINTF_MAX_FLOAT) || (value < -PICO_PRINTF_MAX_FLOAT)) {
10002a88:	2200      	movs	r2, #0
10002a8a:	0030      	movs	r0, r6
10002a8c:	0039      	movs	r1, r7
10002a8e:	4bc2      	ldr	r3, [pc, #776]	; (10002d98 <_ftoa+0x368>)
10002a90:	f7fd ff40 	bl	10000914 <__wrap___aeabi_dcmpgt>
10002a94:	2800      	cmp	r0, #0
10002a96:	d000      	beq.n	10002a9a <_ftoa+0x6a>
10002a98:	e099      	b.n	10002bce <_ftoa+0x19e>
10002a9a:	2200      	movs	r2, #0
10002a9c:	0030      	movs	r0, r6
10002a9e:	0039      	movs	r1, r7
10002aa0:	4bbe      	ldr	r3, [pc, #760]	; (10002d9c <_ftoa+0x36c>)
10002aa2:	f7fd ff21 	bl	100008e8 <__wrap___aeabi_dcmplt>
10002aa6:	2800      	cmp	r0, #0
10002aa8:	d000      	beq.n	10002aac <_ftoa+0x7c>
10002aaa:	e090      	b.n	10002bce <_ftoa+0x19e>
    if (value < 0) {
10002aac:	2200      	movs	r2, #0
10002aae:	2300      	movs	r3, #0
10002ab0:	0030      	movs	r0, r6
10002ab2:	0039      	movs	r1, r7
10002ab4:	f7fd ff18 	bl	100008e8 <__wrap___aeabi_dcmplt>
10002ab8:	2800      	cmp	r0, #0
10002aba:	d000      	beq.n	10002abe <_ftoa+0x8e>
10002abc:	e0b1      	b.n	10002c22 <_ftoa+0x1f2>
    bool negative = false;
10002abe:	2300      	movs	r3, #0
10002ac0:	930d      	str	r3, [sp, #52]	; 0x34
    if (!(flags & FLAGS_PRECISION)) {
10002ac2:	9b24      	ldr	r3, [sp, #144]	; 0x90
10002ac4:	055b      	lsls	r3, r3, #21
10002ac6:	d401      	bmi.n	10002acc <_ftoa+0x9c>
        prec = PICO_PRINTF_DEFAULT_FLOAT_PRECISION;
10002ac8:	2306      	movs	r3, #6
10002aca:	4698      	mov	r8, r3
        buf[len++] = '0';
10002acc:	ab08      	add	r3, sp, #32
10002ace:	469c      	mov	ip, r3
10002ad0:	2217      	movs	r2, #23
        prec = PICO_PRINTF_DEFAULT_FLOAT_PRECISION;
10002ad2:	2400      	movs	r4, #0
        buf[len++] = '0';
10002ad4:	2330      	movs	r3, #48	; 0x30
10002ad6:	4641      	mov	r1, r8
10002ad8:	4462      	add	r2, ip
10002ada:	e004      	b.n	10002ae6 <_ftoa+0xb6>
10002adc:	3401      	adds	r4, #1
10002ade:	5513      	strb	r3, [r2, r4]
        prec--;
10002ae0:	3901      	subs	r1, #1
    while ((len < PICO_PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
10002ae2:	2c20      	cmp	r4, #32
10002ae4:	d001      	beq.n	10002aea <_ftoa+0xba>
10002ae6:	2909      	cmp	r1, #9
10002ae8:	d8f8      	bhi.n	10002adc <_ftoa+0xac>
10002aea:	4688      	mov	r8, r1
    int whole = (int) value;
10002aec:	0030      	movs	r0, r6
10002aee:	0039      	movs	r1, r7
10002af0:	f7fd ff40 	bl	10000974 <__wrap___aeabi_d2iz>
    double tmp = (value - whole) * pow10[prec];
10002af4:	4643      	mov	r3, r8
10002af6:	00da      	lsls	r2, r3, #3
10002af8:	4ba9      	ldr	r3, [pc, #676]	; (10002da0 <_ftoa+0x370>)
    int whole = (int) value;
10002afa:	0005      	movs	r5, r0
    double tmp = (value - whole) * pow10[prec];
10002afc:	189b      	adds	r3, r3, r2
10002afe:	681a      	ldr	r2, [r3, #0]
10002b00:	685b      	ldr	r3, [r3, #4]
10002b02:	9208      	str	r2, [sp, #32]
10002b04:	9309      	str	r3, [sp, #36]	; 0x24
10002b06:	f7fd ff1d 	bl	10000944 <__wrap___aeabi_i2d>
10002b0a:	0002      	movs	r2, r0
10002b0c:	000b      	movs	r3, r1
10002b0e:	0030      	movs	r0, r6
10002b10:	0039      	movs	r1, r7
10002b12:	f7fd fe8c 	bl	1000082e <__wrap___aeabi_dsub>
10002b16:	9a08      	ldr	r2, [sp, #32]
10002b18:	9b09      	ldr	r3, [sp, #36]	; 0x24
10002b1a:	f7fd fea3 	bl	10000864 <__wrap___aeabi_dmul>
    unsigned long frac = (unsigned long) tmp;
10002b1e:	900a      	str	r0, [sp, #40]	; 0x28
10002b20:	910b      	str	r1, [sp, #44]	; 0x2c
10002b22:	f7fd ff4b 	bl	100009bc <__wrap___aeabi_d2uiz>
10002b26:	4682      	mov	sl, r0
    diff = tmp - frac;
10002b28:	f7fd ff08 	bl	1000093c <__wrap___aeabi_ui2d>
10002b2c:	0002      	movs	r2, r0
10002b2e:	000b      	movs	r3, r1
10002b30:	980a      	ldr	r0, [sp, #40]	; 0x28
10002b32:	990b      	ldr	r1, [sp, #44]	; 0x2c
10002b34:	f7fd fe7b 	bl	1000082e <__wrap___aeabi_dsub>
    if (diff > 0.5) {
10002b38:	2200      	movs	r2, #0
10002b3a:	4b9a      	ldr	r3, [pc, #616]	; (10002da4 <_ftoa+0x374>)
    diff = tmp - frac;
10002b3c:	900a      	str	r0, [sp, #40]	; 0x28
10002b3e:	910b      	str	r1, [sp, #44]	; 0x2c
    if (diff > 0.5) {
10002b40:	f7fd fee8 	bl	10000914 <__wrap___aeabi_dcmpgt>
10002b44:	2800      	cmp	r0, #0
10002b46:	d100      	bne.n	10002b4a <_ftoa+0x11a>
10002b48:	e0c0      	b.n	10002ccc <_ftoa+0x29c>
        ++frac;
10002b4a:	2301      	movs	r3, #1
10002b4c:	469c      	mov	ip, r3
10002b4e:	44e2      	add	sl, ip
        if (frac >= pow10[prec]) {
10002b50:	4650      	mov	r0, sl
10002b52:	f7fd fef3 	bl	1000093c <__wrap___aeabi_ui2d>
10002b56:	0002      	movs	r2, r0
10002b58:	000b      	movs	r3, r1
10002b5a:	9808      	ldr	r0, [sp, #32]
10002b5c:	9909      	ldr	r1, [sp, #36]	; 0x24
10002b5e:	f7fd fec9 	bl	100008f4 <__wrap___aeabi_dcmple>
10002b62:	2800      	cmp	r0, #0
10002b64:	d002      	beq.n	10002b6c <_ftoa+0x13c>
            frac = 0;
10002b66:	2300      	movs	r3, #0
10002b68:	469a      	mov	sl, r3
            ++whole;
10002b6a:	3501      	adds	r5, #1
    if (prec == 0U) {
10002b6c:	4643      	mov	r3, r8
10002b6e:	2b00      	cmp	r3, #0
10002b70:	d06a      	beq.n	10002c48 <_ftoa+0x218>
            buf[len++] = (char) (48U + (frac % 10U));
10002b72:	ab08      	add	r3, sp, #32
10002b74:	2617      	movs	r6, #23
10002b76:	469c      	mov	ip, r3
10002b78:	9508      	str	r5, [sp, #32]
10002b7a:	4466      	add	r6, ip
10002b7c:	4655      	mov	r5, sl
10002b7e:	e014      	b.n	10002baa <_ftoa+0x17a>
            --count;
10002b80:	2301      	movs	r3, #1
10002b82:	425b      	negs	r3, r3
10002b84:	4443      	add	r3, r8
            buf[len++] = (char) (48U + (frac % 10U));
10002b86:	210a      	movs	r1, #10
10002b88:	0028      	movs	r0, r5
            --count;
10002b8a:	469a      	mov	sl, r3
            buf[len++] = (char) (48U + (frac % 10U));
10002b8c:	f7fd fbf2 	bl	10000374 <__wrap___aeabi_uidiv>
10002b90:	3401      	adds	r4, #1
10002b92:	3130      	adds	r1, #48	; 0x30
10002b94:	1937      	adds	r7, r6, r4
10002b96:	7039      	strb	r1, [r7, #0]
            if (!(frac /= 10U)) {
10002b98:	0028      	movs	r0, r5
10002b9a:	210a      	movs	r1, #10
10002b9c:	f7fd fbea 	bl	10000374 <__wrap___aeabi_uidiv>
10002ba0:	2d09      	cmp	r5, #9
10002ba2:	d800      	bhi.n	10002ba6 <_ftoa+0x176>
10002ba4:	e0d0      	b.n	10002d48 <_ftoa+0x318>
            --count;
10002ba6:	46d0      	mov	r8, sl
            if (!(frac /= 10U)) {
10002ba8:	0005      	movs	r5, r0
        while (len < PICO_PRINTF_FTOA_BUFFER_SIZE) {
10002baa:	2c20      	cmp	r4, #32
10002bac:	d1e8      	bne.n	10002b80 <_ftoa+0x150>
10002bae:	ab0e      	add	r3, sp, #56	; 0x38
10002bb0:	4698      	mov	r8, r3
    if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
10002bb2:	2303      	movs	r3, #3
10002bb4:	9a24      	ldr	r2, [sp, #144]	; 0x90
10002bb6:	4013      	ands	r3, r2
10002bb8:	2b01      	cmp	r3, #1
10002bba:	d100      	bne.n	10002bbe <_ftoa+0x18e>
10002bbc:	e096      	b.n	10002cec <_ftoa+0x2bc>
10002bbe:	2320      	movs	r3, #32
    return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
10002bc0:	9a24      	ldr	r2, [sp, #144]	; 0x90
10002bc2:	9301      	str	r3, [sp, #4]
10002bc4:	9203      	str	r2, [sp, #12]
10002bc6:	9a23      	ldr	r2, [sp, #140]	; 0x8c
10002bc8:	4643      	mov	r3, r8
10002bca:	9202      	str	r2, [sp, #8]
10002bcc:	e01e      	b.n	10002c0c <_ftoa+0x1dc>
        return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
10002bce:	9b24      	ldr	r3, [sp, #144]	; 0x90
10002bd0:	4658      	mov	r0, fp
10002bd2:	9304      	str	r3, [sp, #16]
10002bd4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
10002bd6:	9600      	str	r6, [sp, #0]
10002bd8:	9701      	str	r7, [sp, #4]
10002bda:	9303      	str	r3, [sp, #12]
10002bdc:	4643      	mov	r3, r8
10002bde:	9a0c      	ldr	r2, [sp, #48]	; 0x30
10002be0:	9302      	str	r3, [sp, #8]
10002be2:	9907      	ldr	r1, [sp, #28]
10002be4:	464b      	mov	r3, r9
10002be6:	f7ff fd13 	bl	10002610 <_etoa>
}
10002bea:	b017      	add	sp, #92	; 0x5c
10002bec:	bcf0      	pop	{r4, r5, r6, r7}
10002bee:	46bb      	mov	fp, r7
10002bf0:	46b2      	mov	sl, r6
10002bf2:	46a9      	mov	r9, r5
10002bf4:	46a0      	mov	r8, r4
10002bf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U,
10002bf8:	9b24      	ldr	r3, [sp, #144]	; 0x90
10002bfa:	075b      	lsls	r3, r3, #29
10002bfc:	d40e      	bmi.n	10002c1c <_ftoa+0x1ec>
10002bfe:	2203      	movs	r2, #3
10002c00:	4b69      	ldr	r3, [pc, #420]	; (10002da8 <_ftoa+0x378>)
10002c02:	9924      	ldr	r1, [sp, #144]	; 0x90
10002c04:	9201      	str	r2, [sp, #4]
10002c06:	9103      	str	r1, [sp, #12]
10002c08:	9923      	ldr	r1, [sp, #140]	; 0x8c
10002c0a:	9102      	str	r1, [sp, #8]
    return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
10002c0c:	9300      	str	r3, [sp, #0]
10002c0e:	4658      	mov	r0, fp
10002c10:	464b      	mov	r3, r9
10002c12:	9a0c      	ldr	r2, [sp, #48]	; 0x30
10002c14:	9907      	ldr	r1, [sp, #28]
10002c16:	f7ff fbb7 	bl	10002388 <_out_rev>
10002c1a:	e7e6      	b.n	10002bea <_ftoa+0x1ba>
        return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U,
10002c1c:	2204      	movs	r2, #4
10002c1e:	4b63      	ldr	r3, [pc, #396]	; (10002dac <_ftoa+0x37c>)
10002c20:	e7ef      	b.n	10002c02 <_ftoa+0x1d2>
        value = 0 - value;
10002c22:	003b      	movs	r3, r7
10002c24:	0032      	movs	r2, r6
10002c26:	2000      	movs	r0, #0
10002c28:	2100      	movs	r1, #0
10002c2a:	f7fd fe00 	bl	1000082e <__wrap___aeabi_dsub>
        negative = true;
10002c2e:	2301      	movs	r3, #1
        value = 0 - value;
10002c30:	0006      	movs	r6, r0
10002c32:	000f      	movs	r7, r1
        negative = true;
10002c34:	930d      	str	r3, [sp, #52]	; 0x34
10002c36:	e744      	b.n	10002ac2 <_ftoa+0x92>
        return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
10002c38:	9b24      	ldr	r3, [sp, #144]	; 0x90
10002c3a:	9303      	str	r3, [sp, #12]
10002c3c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
10002c3e:	9302      	str	r3, [sp, #8]
10002c40:	2304      	movs	r3, #4
10002c42:	9301      	str	r3, [sp, #4]
10002c44:	4b5a      	ldr	r3, [pc, #360]	; (10002db0 <_ftoa+0x380>)
10002c46:	e7e1      	b.n	10002c0c <_ftoa+0x1dc>
        diff = value - (double) whole;
10002c48:	0028      	movs	r0, r5
10002c4a:	f7fd fe7b 	bl	10000944 <__wrap___aeabi_i2d>
10002c4e:	0002      	movs	r2, r0
10002c50:	000b      	movs	r3, r1
10002c52:	0030      	movs	r0, r6
10002c54:	0039      	movs	r1, r7
10002c56:	f7fd fdea 	bl	1000082e <__wrap___aeabi_dsub>
        if (!((diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
10002c5a:	4b52      	ldr	r3, [pc, #328]	; (10002da4 <_ftoa+0x374>)
10002c5c:	2200      	movs	r2, #0
        diff = value - (double) whole;
10002c5e:	0006      	movs	r6, r0
10002c60:	000f      	movs	r7, r1
        if (!((diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
10002c62:	f7fd fe41 	bl	100008e8 <__wrap___aeabi_dcmplt>
10002c66:	ab0e      	add	r3, sp, #56	; 0x38
10002c68:	4698      	mov	r8, r3
10002c6a:	2800      	cmp	r0, #0
10002c6c:	d10a      	bne.n	10002c84 <_ftoa+0x254>
10002c6e:	2200      	movs	r2, #0
10002c70:	0030      	movs	r0, r6
10002c72:	0039      	movs	r1, r7
10002c74:	4b4b      	ldr	r3, [pc, #300]	; (10002da4 <_ftoa+0x374>)
10002c76:	f7fd fe4d 	bl	10000914 <__wrap___aeabi_dcmpgt>
10002c7a:	2800      	cmp	r0, #0
10002c7c:	d102      	bne.n	10002c84 <_ftoa+0x254>
10002c7e:	07eb      	lsls	r3, r5, #31
10002c80:	d500      	bpl.n	10002c84 <_ftoa+0x254>
            ++whole;
10002c82:	3501      	adds	r5, #1
    while (len < PICO_PRINTF_FTOA_BUFFER_SIZE) {
10002c84:	2c20      	cmp	r4, #32
10002c86:	d094      	beq.n	10002bb2 <_ftoa+0x182>
        buf[len++] = (char) (48 + (whole % 10));
10002c88:	aa08      	add	r2, sp, #32
10002c8a:	4694      	mov	ip, r2
10002c8c:	2317      	movs	r3, #23
10002c8e:	0028      	movs	r0, r5
10002c90:	4463      	add	r3, ip
10002c92:	210a      	movs	r1, #10
10002c94:	3401      	adds	r4, #1
10002c96:	191e      	adds	r6, r3, r4
10002c98:	f7fd fb40 	bl	1000031c <__wrap___aeabi_idiv>
10002c9c:	3130      	adds	r1, #48	; 0x30
        if (!(whole /= 10)) {
10002c9e:	0028      	movs	r0, r5
        buf[len++] = (char) (48 + (whole % 10));
10002ca0:	7031      	strb	r1, [r6, #0]
        if (!(whole /= 10)) {
10002ca2:	210a      	movs	r1, #10
10002ca4:	f7fd fb3a 	bl	1000031c <__wrap___aeabi_idiv>
10002ca8:	1e05      	subs	r5, r0, #0
10002caa:	d1eb      	bne.n	10002c84 <_ftoa+0x254>
    if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
10002cac:	2303      	movs	r3, #3
10002cae:	9a24      	ldr	r2, [sp, #144]	; 0x90
10002cb0:	4013      	ands	r3, r2
10002cb2:	2b01      	cmp	r3, #1
10002cb4:	d01b      	beq.n	10002cee <_ftoa+0x2be>
    if (len < PICO_PRINTF_FTOA_BUFFER_SIZE) {
10002cb6:	2c20      	cmp	r4, #32
10002cb8:	d100      	bne.n	10002cbc <_ftoa+0x28c>
10002cba:	e780      	b.n	10002bbe <_ftoa+0x18e>
        if (negative) {
10002cbc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
10002cbe:	2b00      	cmp	r3, #0
10002cc0:	d035      	beq.n	10002d2e <_ftoa+0x2fe>
            buf[len++] = '-';
10002cc2:	222d      	movs	r2, #45	; 0x2d
10002cc4:	4641      	mov	r1, r8
10002cc6:	1c63      	adds	r3, r4, #1
10002cc8:	550a      	strb	r2, [r1, r4]
10002cca:	e779      	b.n	10002bc0 <_ftoa+0x190>
    } else if (diff < 0.5) {
10002ccc:	2200      	movs	r2, #0
10002cce:	980a      	ldr	r0, [sp, #40]	; 0x28
10002cd0:	990b      	ldr	r1, [sp, #44]	; 0x2c
10002cd2:	4b34      	ldr	r3, [pc, #208]	; (10002da4 <_ftoa+0x374>)
10002cd4:	f7fd fe08 	bl	100008e8 <__wrap___aeabi_dcmplt>
10002cd8:	2800      	cmp	r0, #0
10002cda:	d000      	beq.n	10002cde <_ftoa+0x2ae>
10002cdc:	e746      	b.n	10002b6c <_ftoa+0x13c>
    } else if ((frac == 0U) || (frac & 1U)) {
10002cde:	4653      	mov	r3, sl
10002ce0:	2b00      	cmp	r3, #0
10002ce2:	d151      	bne.n	10002d88 <_ftoa+0x358>
        ++frac;
10002ce4:	2301      	movs	r3, #1
10002ce6:	469c      	mov	ip, r3
10002ce8:	44e2      	add	sl, ip
10002cea:	e73f      	b.n	10002b6c <_ftoa+0x13c>
    if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
10002cec:	2420      	movs	r4, #32
        if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
10002cee:	9b23      	ldr	r3, [sp, #140]	; 0x8c
10002cf0:	2b00      	cmp	r3, #0
10002cf2:	d0e0      	beq.n	10002cb6 <_ftoa+0x286>
10002cf4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
10002cf6:	2b00      	cmp	r3, #0
10002cf8:	d103      	bne.n	10002d02 <_ftoa+0x2d2>
10002cfa:	9a24      	ldr	r2, [sp, #144]	; 0x90
10002cfc:	330c      	adds	r3, #12
10002cfe:	4213      	tst	r3, r2
10002d00:	d002      	beq.n	10002d08 <_ftoa+0x2d8>
            width--;
10002d02:	9b23      	ldr	r3, [sp, #140]	; 0x8c
10002d04:	3b01      	subs	r3, #1
10002d06:	9323      	str	r3, [sp, #140]	; 0x8c
        while ((len < width) && (len < PICO_PRINTF_FTOA_BUFFER_SIZE)) {
10002d08:	9b23      	ldr	r3, [sp, #140]	; 0x8c
10002d0a:	42a3      	cmp	r3, r4
10002d0c:	d9d3      	bls.n	10002cb6 <_ftoa+0x286>
10002d0e:	ab08      	add	r3, sp, #32
10002d10:	469c      	mov	ip, r3
10002d12:	2217      	movs	r2, #23
            buf[len++] = '0';
10002d14:	2330      	movs	r3, #48	; 0x30
10002d16:	4462      	add	r2, ip
        while ((len < width) && (len < PICO_PRINTF_FTOA_BUFFER_SIZE)) {
10002d18:	2c20      	cmp	r4, #32
10002d1a:	d100      	bne.n	10002d1e <_ftoa+0x2ee>
10002d1c:	e74f      	b.n	10002bbe <_ftoa+0x18e>
10002d1e:	9923      	ldr	r1, [sp, #140]	; 0x8c
            buf[len++] = '0';
10002d20:	3401      	adds	r4, #1
10002d22:	5513      	strb	r3, [r2, r4]
        while ((len < width) && (len < PICO_PRINTF_FTOA_BUFFER_SIZE)) {
10002d24:	428c      	cmp	r4, r1
10002d26:	d0c6      	beq.n	10002cb6 <_ftoa+0x286>
10002d28:	2c20      	cmp	r4, #32
10002d2a:	d1f8      	bne.n	10002d1e <_ftoa+0x2ee>
10002d2c:	e747      	b.n	10002bbe <_ftoa+0x18e>
        } else if (flags & FLAGS_PLUS) {
10002d2e:	9b24      	ldr	r3, [sp, #144]	; 0x90
10002d30:	075b      	lsls	r3, r3, #29
10002d32:	d424      	bmi.n	10002d7e <_ftoa+0x34e>
        } else if (flags & FLAGS_SPACE) {
10002d34:	9a24      	ldr	r2, [sp, #144]	; 0x90
10002d36:	0023      	movs	r3, r4
10002d38:	0712      	lsls	r2, r2, #28
10002d3a:	d400      	bmi.n	10002d3e <_ftoa+0x30e>
10002d3c:	e740      	b.n	10002bc0 <_ftoa+0x190>
            buf[len++] = ' ';
10002d3e:	2220      	movs	r2, #32
10002d40:	4641      	mov	r1, r8
10002d42:	3301      	adds	r3, #1
10002d44:	550a      	strb	r2, [r1, r4]
10002d46:	e73b      	b.n	10002bc0 <_ftoa+0x190>
        while ((len < PICO_PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
10002d48:	4657      	mov	r7, sl
10002d4a:	9d08      	ldr	r5, [sp, #32]
10002d4c:	2c20      	cmp	r4, #32
10002d4e:	d100      	bne.n	10002d52 <_ftoa+0x322>
10002d50:	e72d      	b.n	10002bae <_ftoa+0x17e>
10002d52:	0022      	movs	r2, r4
            buf[len++] = '0';
10002d54:	2130      	movs	r1, #48	; 0x30
10002d56:	4640      	mov	r0, r8
        while ((len < PICO_PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
10002d58:	2f00      	cmp	r7, #0
10002d5a:	d009      	beq.n	10002d70 <_ftoa+0x340>
            buf[len++] = '0';
10002d5c:	3201      	adds	r2, #1
10002d5e:	54b1      	strb	r1, [r6, r2]
        while ((len < PICO_PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
10002d60:	2a20      	cmp	r2, #32
10002d62:	d100      	bne.n	10002d66 <_ftoa+0x336>
10002d64:	e723      	b.n	10002bae <_ftoa+0x17e>
10002d66:	43d3      	mvns	r3, r2
10002d68:	191b      	adds	r3, r3, r4
10002d6a:	181b      	adds	r3, r3, r0
10002d6c:	2b00      	cmp	r3, #0
10002d6e:	d1f5      	bne.n	10002d5c <_ftoa+0x32c>
            buf[len++] = '.';
10002d70:	ab0e      	add	r3, sp, #56	; 0x38
10002d72:	4698      	mov	r8, r3
10002d74:	232e      	movs	r3, #46	; 0x2e
10002d76:	4641      	mov	r1, r8
10002d78:	1c54      	adds	r4, r2, #1
10002d7a:	548b      	strb	r3, [r1, r2]
10002d7c:	e782      	b.n	10002c84 <_ftoa+0x254>
            buf[len++] = '+';  // ignore the space if the '+' exists
10002d7e:	222b      	movs	r2, #43	; 0x2b
10002d80:	4641      	mov	r1, r8
10002d82:	1c63      	adds	r3, r4, #1
10002d84:	550a      	strb	r2, [r1, r4]
10002d86:	e71b      	b.n	10002bc0 <_ftoa+0x190>
    } else if ((frac == 0U) || (frac & 1U)) {
10002d88:	07db      	lsls	r3, r3, #31
10002d8a:	d400      	bmi.n	10002d8e <_ftoa+0x35e>
10002d8c:	e6ee      	b.n	10002b6c <_ftoa+0x13c>
10002d8e:	e7a9      	b.n	10002ce4 <_ftoa+0x2b4>
10002d90:	ffefffff 	.word	0xffefffff
10002d94:	7fefffff 	.word	0x7fefffff
10002d98:	41cdcd65 	.word	0x41cdcd65
10002d9c:	c1cdcd65 	.word	0xc1cdcd65
10002da0:	1000b280 	.word	0x1000b280
10002da4:	3fe00000 	.word	0x3fe00000
10002da8:	1000b084 	.word	0x1000b084
10002dac:	1000b088 	.word	0x1000b088
10002db0:	1000b094 	.word	0x1000b094
        return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
10002db4:	9b24      	ldr	r3, [sp, #144]	; 0x90
10002db6:	9303      	str	r3, [sp, #12]
10002db8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
10002dba:	9302      	str	r3, [sp, #8]
10002dbc:	2303      	movs	r3, #3
10002dbe:	9301      	str	r3, [sp, #4]
10002dc0:	4b00      	ldr	r3, [pc, #0]	; (10002dc4 <_ftoa+0x394>)
10002dc2:	e723      	b.n	10002c0c <_ftoa+0x1dc>
10002dc4:	1000b090 	.word	0x1000b090

10002dc8 <_vsnprintf>:

#endif  // PICO_PRINTF_SUPPORT_EXPONENTIAL
#endif  // PICO_PRINTF_SUPPORT_FLOAT

// internal vsnprintf
static int _vsnprintf(out_fct_type out, char *buffer, const size_t maxlen, const char *format, va_list va) {
10002dc8:	b5f0      	push	{r4, r5, r6, r7, lr}
10002dca:	46de      	mov	lr, fp
10002dcc:	464e      	mov	r6, r9
10002dce:	4657      	mov	r7, sl
10002dd0:	4645      	mov	r5, r8
10002dd2:	b5e0      	push	{r5, r6, r7, lr}
10002dd4:	b09f      	sub	sp, #124	; 0x7c
10002dd6:	001c      	movs	r4, r3
10002dd8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
10002dda:	4691      	mov	r9, r2
10002ddc:	9309      	str	r3, [sp, #36]	; 0x24
#if !PICO_PRINTF_ALWAYS_INCLUDED
    lazy_vsnprintf = _vsnprintf;
10002dde:	4ac9      	ldr	r2, [pc, #804]	; (10003104 <_vsnprintf+0x33c>)
10002de0:	4bc9      	ldr	r3, [pc, #804]	; (10003108 <_vsnprintf+0x340>)
static int _vsnprintf(out_fct_type out, char *buffer, const size_t maxlen, const char *format, va_list va) {
10002de2:	468b      	mov	fp, r1
10002de4:	9008      	str	r0, [sp, #32]
    lazy_vsnprintf = _vsnprintf;
10002de6:	601a      	str	r2, [r3, #0]
#endif
    unsigned int flags, width, precision, n;
    size_t idx = 0U;

    if (!buffer) {
10002de8:	2900      	cmp	r1, #0
10002dea:	d100      	bne.n	10002dee <_vsnprintf+0x26>
10002dec:	e218      	b.n	10003220 <_vsnprintf+0x458>
        // use null output function
        out = _out_null;
    }

    while (*format) {
10002dee:	2300      	movs	r3, #0
10002df0:	7820      	ldrb	r0, [r4, #0]
10002df2:	469a      	mov	sl, r3
10002df4:	2800      	cmp	r0, #0
10002df6:	d100      	bne.n	10002dfa <_vsnprintf+0x32>
10002df8:	e21a      	b.n	10003230 <_vsnprintf+0x468>
10002dfa:	0026      	movs	r6, r4
10002dfc:	001d      	movs	r5, r3
10002dfe:	465c      	mov	r4, fp
10002e00:	e00a      	b.n	10002e18 <_vsnprintf+0x50>
                out('%', buffer, idx++, maxlen);
                format++;
                break;

            default :
                out(*format, buffer, idx++, maxlen);
10002e02:	002a      	movs	r2, r5
10002e04:	1c6f      	adds	r7, r5, #1
10002e06:	464b      	mov	r3, r9
10002e08:	9d08      	ldr	r5, [sp, #32]
10002e0a:	0021      	movs	r1, r4
10002e0c:	47a8      	blx	r5
10002e0e:	003d      	movs	r5, r7
                format++;
10002e10:	3601      	adds	r6, #1
    while (*format) {
10002e12:	7830      	ldrb	r0, [r6, #0]
10002e14:	2800      	cmp	r0, #0
10002e16:	d070      	beq.n	10002efa <_vsnprintf+0x132>
        if (*format != '%') {
10002e18:	2825      	cmp	r0, #37	; 0x25
10002e1a:	d1f2      	bne.n	10002e02 <_vsnprintf+0x3a>
                    flags |= FLAGS_HASH;
10002e1c:	2310      	movs	r3, #16
10002e1e:	469b      	mov	fp, r3
                    flags |= FLAGS_SPACE;
10002e20:	3b08      	subs	r3, #8
10002e22:	469a      	mov	sl, r3
                    flags |= FLAGS_PLUS;
10002e24:	3b04      	subs	r3, #4
10002e26:	4698      	mov	r8, r3
                    flags |= FLAGS_LEFT;
10002e28:	3b02      	subs	r3, #2
        flags = 0U;
10002e2a:	2100      	movs	r1, #0
                    flags |= FLAGS_LEFT;
10002e2c:	469c      	mov	ip, r3
            format++;
10002e2e:	1c72      	adds	r2, r6, #1
            switch (*format) {
10002e30:	7810      	ldrb	r0, [r2, #0]
10002e32:	0016      	movs	r6, r2
10002e34:	0003      	movs	r3, r0
10002e36:	3b20      	subs	r3, #32
10002e38:	b2db      	uxtb	r3, r3
10002e3a:	2b10      	cmp	r3, #16
10002e3c:	d803      	bhi.n	10002e46 <_vsnprintf+0x7e>
10002e3e:	4fb3      	ldr	r7, [pc, #716]	; (1000310c <_vsnprintf+0x344>)
10002e40:	009b      	lsls	r3, r3, #2
10002e42:	58fb      	ldr	r3, [r7, r3]
10002e44:	469f      	mov	pc, r3
        if (_is_digit(*format)) {
10002e46:	0003      	movs	r3, r0
10002e48:	3b30      	subs	r3, #48	; 0x30
10002e4a:	2b09      	cmp	r3, #9
10002e4c:	d932      	bls.n	10002eb4 <_vsnprintf+0xec>
        width = 0U;
10002e4e:	2300      	movs	r3, #0
10002e50:	930a      	str	r3, [sp, #40]	; 0x28
        } else if (*format == '*') {
10002e52:	282a      	cmp	r0, #42	; 0x2a
10002e54:	d068      	beq.n	10002f28 <_vsnprintf+0x160>
        precision = 0U;
10002e56:	2300      	movs	r3, #0
10002e58:	4698      	mov	r8, r3
        if (*format == '.') {
10002e5a:	282e      	cmp	r0, #46	; 0x2e
10002e5c:	d03e      	beq.n	10002edc <_vsnprintf+0x114>
        switch (*format) {
10002e5e:	0003      	movs	r3, r0
10002e60:	3b68      	subs	r3, #104	; 0x68
10002e62:	b2db      	uxtb	r3, r3
10002e64:	2b12      	cmp	r3, #18
10002e66:	d81c      	bhi.n	10002ea2 <_vsnprintf+0xda>
10002e68:	4aa9      	ldr	r2, [pc, #676]	; (10003110 <_vsnprintf+0x348>)
10002e6a:	009b      	lsls	r3, r3, #2
10002e6c:	58d3      	ldr	r3, [r2, r3]
10002e6e:	469f      	mov	pc, r3
                    flags |= FLAGS_ZEROPAD;
10002e70:	2301      	movs	r3, #1
10002e72:	3201      	adds	r2, #1
10002e74:	4319      	orrs	r1, r3
        } while (n);
10002e76:	e7db      	b.n	10002e30 <_vsnprintf+0x68>
                    flags |= FLAGS_LEFT;
10002e78:	4663      	mov	r3, ip
10002e7a:	3201      	adds	r2, #1
10002e7c:	4319      	orrs	r1, r3
        } while (n);
10002e7e:	e7d7      	b.n	10002e30 <_vsnprintf+0x68>
                    flags |= FLAGS_PLUS;
10002e80:	4643      	mov	r3, r8
10002e82:	3201      	adds	r2, #1
10002e84:	4319      	orrs	r1, r3
        } while (n);
10002e86:	e7d3      	b.n	10002e30 <_vsnprintf+0x68>
                    flags |= FLAGS_HASH;
10002e88:	465b      	mov	r3, fp
10002e8a:	3201      	adds	r2, #1
10002e8c:	4319      	orrs	r1, r3
        } while (n);
10002e8e:	e7cf      	b.n	10002e30 <_vsnprintf+0x68>
                    flags |= FLAGS_SPACE;
10002e90:	4653      	mov	r3, sl
10002e92:	3201      	adds	r2, #1
10002e94:	4319      	orrs	r1, r3
        } while (n);
10002e96:	e7cb      	b.n	10002e30 <_vsnprintf+0x68>
                flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
10002e98:	2380      	movs	r3, #128	; 0x80
10002e9a:	005b      	lsls	r3, r3, #1
        switch (*format) {
10002e9c:	7870      	ldrb	r0, [r6, #1]
                flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
10002e9e:	4319      	orrs	r1, r3
                format++;
10002ea0:	3601      	adds	r6, #1
        switch (*format) {
10002ea2:	0003      	movs	r3, r0
10002ea4:	3b25      	subs	r3, #37	; 0x25
10002ea6:	b2db      	uxtb	r3, r3
10002ea8:	2b53      	cmp	r3, #83	; 0x53
10002eaa:	d8aa      	bhi.n	10002e02 <_vsnprintf+0x3a>
10002eac:	4a99      	ldr	r2, [pc, #612]	; (10003114 <_vsnprintf+0x34c>)
10002eae:	009b      	lsls	r3, r3, #2
10002eb0:	58d3      	ldr	r3, [r2, r3]
10002eb2:	469f      	mov	pc, r3
    unsigned int i = 0U;
10002eb4:	2700      	movs	r7, #0
10002eb6:	0003      	movs	r3, r0
        i = i * 10U + (unsigned int) (*((*str)++) - '0');
10002eb8:	00b8      	lsls	r0, r7, #2
10002eba:	19c0      	adds	r0, r0, r7
10002ebc:	3601      	adds	r6, #1
10002ebe:	0040      	lsls	r0, r0, #1
10002ec0:	18c0      	adds	r0, r0, r3
    while (_is_digit(**str)) {
10002ec2:	7833      	ldrb	r3, [r6, #0]
        i = i * 10U + (unsigned int) (*((*str)++) - '0');
10002ec4:	3830      	subs	r0, #48	; 0x30
    while (_is_digit(**str)) {
10002ec6:	001a      	movs	r2, r3
10002ec8:	3a30      	subs	r2, #48	; 0x30
        i = i * 10U + (unsigned int) (*((*str)++) - '0');
10002eca:	0007      	movs	r7, r0
    while (_is_digit(**str)) {
10002ecc:	2a09      	cmp	r2, #9
10002ece:	d9f3      	bls.n	10002eb8 <_vsnprintf+0xf0>
10002ed0:	900a      	str	r0, [sp, #40]	; 0x28
10002ed2:	0018      	movs	r0, r3
        precision = 0U;
10002ed4:	2300      	movs	r3, #0
10002ed6:	4698      	mov	r8, r3
        if (*format == '.') {
10002ed8:	282e      	cmp	r0, #46	; 0x2e
10002eda:	d1c0      	bne.n	10002e5e <_vsnprintf+0x96>
            flags |= FLAGS_PRECISION;
10002edc:	2380      	movs	r3, #128	; 0x80
            if (_is_digit(*format)) {
10002ede:	7870      	ldrb	r0, [r6, #1]
            flags |= FLAGS_PRECISION;
10002ee0:	00db      	lsls	r3, r3, #3
10002ee2:	4319      	orrs	r1, r3
            if (_is_digit(*format)) {
10002ee4:	0003      	movs	r3, r0
10002ee6:	3b30      	subs	r3, #48	; 0x30
            format++;
10002ee8:	1c72      	adds	r2, r6, #1
            if (_is_digit(*format)) {
10002eea:	2b09      	cmp	r3, #9
10002eec:	d800      	bhi.n	10002ef0 <_vsnprintf+0x128>
10002eee:	e1a1      	b.n	10003234 <_vsnprintf+0x46c>
            } else if (*format == '*') {
10002ef0:	282a      	cmp	r0, #42	; 0x2a
10002ef2:	d100      	bne.n	10002ef6 <_vsnprintf+0x12e>
10002ef4:	e1b2      	b.n	1000325c <_vsnprintf+0x494>
            format++;
10002ef6:	0016      	movs	r6, r2
10002ef8:	e7b1      	b.n	10002e5e <_vsnprintf+0x96>

    // termination
    out((char) 0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);

    // return written chars without terminating \0
    return (int) idx;
10002efa:	46a3      	mov	fp, r4
10002efc:	46aa      	mov	sl, r5
10002efe:	002c      	movs	r4, r5
    out((char) 0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
10002f00:	45d1      	cmp	r9, sl
10002f02:	d803      	bhi.n	10002f0c <_vsnprintf+0x144>
10002f04:	2301      	movs	r3, #1
10002f06:	425b      	negs	r3, r3
10002f08:	444b      	add	r3, r9
10002f0a:	469a      	mov	sl, r3
10002f0c:	464b      	mov	r3, r9
10002f0e:	4652      	mov	r2, sl
10002f10:	4659      	mov	r1, fp
10002f12:	2000      	movs	r0, #0
10002f14:	9d08      	ldr	r5, [sp, #32]
10002f16:	47a8      	blx	r5
}
10002f18:	0020      	movs	r0, r4
10002f1a:	b01f      	add	sp, #124	; 0x7c
10002f1c:	bcf0      	pop	{r4, r5, r6, r7}
10002f1e:	46bb      	mov	fp, r7
10002f20:	46b2      	mov	sl, r6
10002f22:	46a9      	mov	r9, r5
10002f24:	46a0      	mov	r8, r4
10002f26:	bdf0      	pop	{r4, r5, r6, r7, pc}
            const int w = va_arg(va, int);
10002f28:	9b09      	ldr	r3, [sp, #36]	; 0x24
10002f2a:	cb40      	ldmia	r3!, {r6}
10002f2c:	960a      	str	r6, [sp, #40]	; 0x28
            if (w < 0) {
10002f2e:	2e00      	cmp	r6, #0
10002f30:	db03      	blt.n	10002f3a <_vsnprintf+0x172>
        if (*format == '.') {
10002f32:	7850      	ldrb	r0, [r2, #1]
            const int w = va_arg(va, int);
10002f34:	9309      	str	r3, [sp, #36]	; 0x24
            format++;
10002f36:	1c56      	adds	r6, r2, #1
10002f38:	e78d      	b.n	10002e56 <_vsnprintf+0x8e>
                flags |= FLAGS_LEFT;    // reverse padding
10002f3a:	3828      	subs	r0, #40	; 0x28
10002f3c:	4301      	orrs	r1, r0
                width = (unsigned int) -w;
10002f3e:	4270      	negs	r0, r6
10002f40:	900a      	str	r0, [sp, #40]	; 0x28
            const int w = va_arg(va, int);
10002f42:	9309      	str	r3, [sp, #36]	; 0x24
        if (*format == '.') {
10002f44:	7850      	ldrb	r0, [r2, #1]
            format++;
10002f46:	1c56      	adds	r6, r2, #1
10002f48:	e785      	b.n	10002e56 <_vsnprintf+0x8e>
                if (*format == 'x' || *format == 'X') {
10002f4a:	2878      	cmp	r0, #120	; 0x78
10002f4c:	d100      	bne.n	10002f50 <_vsnprintf+0x188>
10002f4e:	e1df      	b.n	10003310 <_vsnprintf+0x548>
10002f50:	2858      	cmp	r0, #88	; 0x58
10002f52:	d100      	bne.n	10002f56 <_vsnprintf+0x18e>
10002f54:	e24c      	b.n	100033f0 <_vsnprintf+0x628>
                } else if (*format == 'o') {
10002f56:	286f      	cmp	r0, #111	; 0x6f
10002f58:	d100      	bne.n	10002f5c <_vsnprintf+0x194>
10002f5a:	e34f      	b.n	100035fc <_vsnprintf+0x834>
                } else if (*format == 'b') {
10002f5c:	2862      	cmp	r0, #98	; 0x62
10002f5e:	d101      	bne.n	10002f64 <_vsnprintf+0x19c>
10002f60:	f000 fc30 	bl	100037c4 <_vsnprintf+0x9fc>
                    flags &= ~FLAGS_HASH;   // no hash for dec format
10002f64:	2310      	movs	r3, #16
10002f66:	000a      	movs	r2, r1
10002f68:	439a      	bics	r2, r3
10002f6a:	920b      	str	r2, [sp, #44]	; 0x2c
                if ((*format != 'i') && (*format != 'd')) {
10002f6c:	2869      	cmp	r0, #105	; 0x69
10002f6e:	d001      	beq.n	10002f74 <_vsnprintf+0x1ac>
10002f70:	f000 fca9 	bl	100038c6 <_vsnprintf+0xafe>
                    base = 10U;
10002f74:	230a      	movs	r3, #10
10002f76:	930c      	str	r3, [sp, #48]	; 0x30
                if (flags & FLAGS_PRECISION) {
10002f78:	054b      	lsls	r3, r1, #21
10002f7a:	d500      	bpl.n	10002f7e <_vsnprintf+0x1b6>
10002f7c:	e1d0      	b.n	10003320 <_vsnprintf+0x558>
                    if (flags & FLAGS_LONG_LONG) {
10002f7e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
10002f80:	2380      	movs	r3, #128	; 0x80
10002f82:	0011      	movs	r1, r2
10002f84:	009b      	lsls	r3, r3, #2
10002f86:	4019      	ands	r1, r3
10002f88:	468b      	mov	fp, r1
10002f8a:	421a      	tst	r2, r3
10002f8c:	d000      	beq.n	10002f90 <_vsnprintf+0x1c8>
10002f8e:	e2a1      	b.n	100034d4 <_vsnprintf+0x70c>
                    } else if (flags & FLAGS_LONG) {
10002f90:	2380      	movs	r3, #128	; 0x80
10002f92:	0011      	movs	r1, r2
10002f94:	005b      	lsls	r3, r3, #1
10002f96:	4019      	ands	r1, r3
10002f98:	468a      	mov	sl, r1
10002f9a:	421a      	tst	r2, r3
10002f9c:	d000      	beq.n	10002fa0 <_vsnprintf+0x1d8>
10002f9e:	e3b6      	b.n	1000370e <_vsnprintf+0x946>
10002fa0:	0013      	movs	r3, r2
                        const int value = (flags & FLAGS_CHAR) ? (char) va_arg(va, int) : (flags & FLAGS_SHORT)
10002fa2:	065b      	lsls	r3, r3, #25
10002fa4:	d500      	bpl.n	10002fa8 <_vsnprintf+0x1e0>
10002fa6:	e2ed      	b.n	10003584 <_vsnprintf+0x7bc>
10002fa8:	0013      	movs	r3, r2
                                                                                          ? (short int) va_arg(va, int)
10002faa:	9909      	ldr	r1, [sp, #36]	; 0x24
                                                                                          : va_arg(va, int);
10002fac:	061b      	lsls	r3, r3, #24
10002fae:	d401      	bmi.n	10002fb4 <_vsnprintf+0x1ec>
10002fb0:	f000 fc76 	bl	100038a0 <_vsnprintf+0xad8>
                                                                                          ? (short int) va_arg(va, int)
10002fb4:	c908      	ldmia	r1!, {r3}
                                                                                          : va_arg(va, int);
10002fb6:	b21b      	sxth	r3, r3
                        idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int) (value > 0 ? value : 0 - value),
10002fb8:	17d8      	asrs	r0, r3, #31
10002fba:	181a      	adds	r2, r3, r0
10002fbc:	4042      	eors	r2, r0
10002fbe:	b292      	uxth	r2, r2
                                                                                          ? (short int) va_arg(va, int)
10002fc0:	9109      	str	r1, [sp, #36]	; 0x24
                        idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int) (value > 0 ? value : 0 - value),
10002fc2:	4693      	mov	fp, r2
10002fc4:	0fda      	lsrs	r2, r3, #31
10002fc6:	9212      	str	r2, [sp, #72]	; 0x48
    if (!value) {
10002fc8:	2b00      	cmp	r3, #0
10002fca:	d109      	bne.n	10002fe0 <_vsnprintf+0x218>
    if (!(flags & FLAGS_PRECISION) || value) {
10002fcc:	2380      	movs	r3, #128	; 0x80
        flags &= ~FLAGS_HASH;
10002fce:	2210      	movs	r2, #16
    if (!(flags & FLAGS_PRECISION) || value) {
10002fd0:	990b      	ldr	r1, [sp, #44]	; 0x2c
10002fd2:	00db      	lsls	r3, r3, #3
10002fd4:	400b      	ands	r3, r1
        flags &= ~FLAGS_HASH;
10002fd6:	4391      	bics	r1, r2
10002fd8:	910b      	str	r1, [sp, #44]	; 0x2c
    if (!(flags & FLAGS_PRECISION) || value) {
10002fda:	2b00      	cmp	r3, #0
10002fdc:	d000      	beq.n	10002fe0 <_vsnprintf+0x218>
10002fde:	e2e4      	b.n	100035aa <_vsnprintf+0x7e2>
10002fe0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
10002fe2:	2361      	movs	r3, #97	; 0x61
10002fe4:	0692      	lsls	r2, r2, #26
10002fe6:	d500      	bpl.n	10002fea <_vsnprintf+0x222>
10002fe8:	2341      	movs	r3, #65	; 0x41
10002fea:	a90e      	add	r1, sp, #56	; 0x38
10002fec:	221f      	movs	r2, #31
10002fee:	468c      	mov	ip, r1
10002ff0:	b2db      	uxtb	r3, r3
10002ff2:	4462      	add	r2, ip
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
10002ff4:	3b0a      	subs	r3, #10
10002ff6:	465f      	mov	r7, fp
10002ff8:	9513      	str	r5, [sp, #76]	; 0x4c
10002ffa:	46a3      	mov	fp, r4
10002ffc:	4655      	mov	r5, sl
10002ffe:	9c0c      	ldr	r4, [sp, #48]	; 0x30
10003000:	46b2      	mov	sl, r6
10003002:	930d      	str	r3, [sp, #52]	; 0x34
10003004:	0016      	movs	r6, r2
10003006:	e00a      	b.n	1000301e <_vsnprintf+0x256>
10003008:	3330      	adds	r3, #48	; 0x30
1000300a:	b2db      	uxtb	r3, r3
1000300c:	3501      	adds	r5, #1
1000300e:	5573      	strb	r3, [r6, r5]
        } while (value && (len < PICO_PRINTF_NTOA_BUFFER_SIZE));
10003010:	42a7      	cmp	r7, r4
10003012:	d200      	bcs.n	10003016 <_vsnprintf+0x24e>
10003014:	e2ed      	b.n	100035f2 <_vsnprintf+0x82a>
10003016:	2d20      	cmp	r5, #32
10003018:	d100      	bne.n	1000301c <_vsnprintf+0x254>
1000301a:	e2ea      	b.n	100035f2 <_vsnprintf+0x82a>
            value /= base;
1000301c:	0007      	movs	r7, r0
            const char digit = (char) (value % base);
1000301e:	0021      	movs	r1, r4
10003020:	0038      	movs	r0, r7
10003022:	f7fd f9a7 	bl	10000374 <__wrap___aeabi_uidiv>
10003026:	b2cb      	uxtb	r3, r1
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
10003028:	2909      	cmp	r1, #9
1000302a:	d9ed      	bls.n	10003008 <_vsnprintf+0x240>
1000302c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
1000302e:	4694      	mov	ip, r2
10003030:	4463      	add	r3, ip
10003032:	b2db      	uxtb	r3, r3
10003034:	e7ea      	b.n	1000300c <_vsnprintf+0x244>
                flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
10003036:	2380      	movs	r3, #128	; 0x80
10003038:	009b      	lsls	r3, r3, #2
        switch (*format) {
1000303a:	7870      	ldrb	r0, [r6, #1]
                flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
1000303c:	4319      	orrs	r1, r3
                format++;
1000303e:	3601      	adds	r6, #1
                break;
10003040:	e72f      	b.n	10002ea2 <_vsnprintf+0xda>
                if (*format == 'h') {
10003042:	7870      	ldrb	r0, [r6, #1]
10003044:	2868      	cmp	r0, #104	; 0x68
10003046:	d100      	bne.n	1000304a <_vsnprintf+0x282>
10003048:	e1cd      	b.n	100033e6 <_vsnprintf+0x61e>
                flags |= FLAGS_SHORT;
1000304a:	2380      	movs	r3, #128	; 0x80
                format++;
1000304c:	3601      	adds	r6, #1
                flags |= FLAGS_SHORT;
1000304e:	4319      	orrs	r1, r3
10003050:	e727      	b.n	10002ea2 <_vsnprintf+0xda>
                if (*format == 'l') {
10003052:	7870      	ldrb	r0, [r6, #1]
10003054:	286c      	cmp	r0, #108	; 0x6c
10003056:	d100      	bne.n	1000305a <_vsnprintf+0x292>
10003058:	e1bf      	b.n	100033da <_vsnprintf+0x612>
                flags |= FLAGS_LONG;
1000305a:	2380      	movs	r3, #128	; 0x80
1000305c:	005b      	lsls	r3, r3, #1
1000305e:	4319      	orrs	r1, r3
                format++;
10003060:	3601      	adds	r6, #1
10003062:	e71e      	b.n	10002ea2 <_vsnprintf+0xda>
                if (*format == 'F') flags |= FLAGS_UPPERCASE;
10003064:	2846      	cmp	r0, #70	; 0x46
10003066:	d100      	bne.n	1000306a <_vsnprintf+0x2a2>
10003068:	e19b      	b.n	100033a2 <_vsnprintf+0x5da>
                idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
1000306a:	2207      	movs	r2, #7
1000306c:	9b09      	ldr	r3, [sp, #36]	; 0x24
1000306e:	9104      	str	r1, [sp, #16]
10003070:	3307      	adds	r3, #7
10003072:	4393      	bics	r3, r2
10003074:	9a0a      	ldr	r2, [sp, #40]	; 0x28
10003076:	0019      	movs	r1, r3
10003078:	9203      	str	r2, [sp, #12]
1000307a:	4642      	mov	r2, r8
1000307c:	9202      	str	r2, [sp, #8]
1000307e:	c90c      	ldmia	r1!, {r2, r3}
10003080:	9808      	ldr	r0, [sp, #32]
10003082:	9200      	str	r2, [sp, #0]
10003084:	9301      	str	r3, [sp, #4]
10003086:	9109      	str	r1, [sp, #36]	; 0x24
10003088:	002a      	movs	r2, r5
1000308a:	464b      	mov	r3, r9
1000308c:	0021      	movs	r1, r4
1000308e:	f7ff fccf 	bl	10002a30 <_ftoa>
                format++;
10003092:	3601      	adds	r6, #1
                idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
10003094:	0005      	movs	r5, r0
                break;
10003096:	e6bc      	b.n	10002e12 <_vsnprintf+0x4a>
                out('%', buffer, idx++, maxlen);
10003098:	002a      	movs	r2, r5
1000309a:	1c6f      	adds	r7, r5, #1
1000309c:	464b      	mov	r3, r9
1000309e:	9d08      	ldr	r5, [sp, #32]
100030a0:	0021      	movs	r1, r4
100030a2:	2025      	movs	r0, #37	; 0x25
100030a4:	47a8      	blx	r5
                format++;
100030a6:	3601      	adds	r6, #1
                out('%', buffer, idx++, maxlen);
100030a8:	003d      	movs	r5, r7
                break;
100030aa:	e6b2      	b.n	10002e12 <_vsnprintf+0x4a>
                if (!(flags & FLAGS_LEFT)) {
100030ac:	078b      	lsls	r3, r1, #30
100030ae:	d400      	bmi.n	100030b2 <_vsnprintf+0x2ea>
100030b0:	e1ad      	b.n	1000340e <_vsnprintf+0x646>
                out((char) va_arg(va, int), buffer, idx++, maxlen);
100030b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
100030b4:	002a      	movs	r2, r5
100030b6:	469a      	mov	sl, r3
100030b8:	1c6b      	adds	r3, r5, #1
100030ba:	4698      	mov	r8, r3
100030bc:	4653      	mov	r3, sl
100030be:	cb01      	ldmia	r3!, {r0}
100030c0:	0021      	movs	r1, r4
100030c2:	469a      	mov	sl, r3
100030c4:	9f08      	ldr	r7, [sp, #32]
100030c6:	464b      	mov	r3, r9
100030c8:	b2c0      	uxtb	r0, r0
100030ca:	47b8      	blx	r7
                    while (l++ < width) {
100030cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
100030ce:	469c      	mov	ip, r3
100030d0:	4465      	add	r5, ip
100030d2:	2b01      	cmp	r3, #1
100030d4:	d800      	bhi.n	100030d8 <_vsnprintf+0x310>
100030d6:	e286      	b.n	100035e6 <_vsnprintf+0x81e>
100030d8:	9b08      	ldr	r3, [sp, #32]
100030da:	4647      	mov	r7, r8
100030dc:	46b0      	mov	r8, r6
100030de:	0026      	movs	r6, r4
100030e0:	464c      	mov	r4, r9
100030e2:	4699      	mov	r9, r3
                        out(' ', buffer, idx++, maxlen);
100030e4:	003a      	movs	r2, r7
100030e6:	0023      	movs	r3, r4
100030e8:	3701      	adds	r7, #1
100030ea:	0031      	movs	r1, r6
100030ec:	2020      	movs	r0, #32
100030ee:	47c8      	blx	r9
                    while (l++ < width) {
100030f0:	42af      	cmp	r7, r5
100030f2:	d1f7      	bne.n	100030e4 <_vsnprintf+0x31c>
                out((char) va_arg(va, int), buffer, idx++, maxlen);
100030f4:	46a1      	mov	r9, r4
100030f6:	4653      	mov	r3, sl
100030f8:	0034      	movs	r4, r6
100030fa:	4646      	mov	r6, r8
100030fc:	9309      	str	r3, [sp, #36]	; 0x24
                format++;
100030fe:	3601      	adds	r6, #1
                break;
10003100:	e687      	b.n	10002e12 <_vsnprintf+0x4a>
10003102:	46c0      	nop			; (mov r8, r8)
10003104:	10002dc9 	.word	0x10002dc9
10003108:	200172e4 	.word	0x200172e4
1000310c:	1000b09c 	.word	0x1000b09c
10003110:	1000b0e0 	.word	0x1000b0e0
10003114:	1000b12c 	.word	0x1000b12c
                const char *p = va_arg(va, char*);
10003118:	9b09      	ldr	r3, [sp, #36]	; 0x24
1000311a:	cb04      	ldmia	r3!, {r2}
1000311c:	469b      	mov	fp, r3
                unsigned int l = _strnlen_s(p, precision ? precision : (size_t) -1);
1000311e:	4643      	mov	r3, r8
                const char *p = va_arg(va, char*);
10003120:	9209      	str	r2, [sp, #36]	; 0x24
                unsigned int l = _strnlen_s(p, precision ? precision : (size_t) -1);
10003122:	2b00      	cmp	r3, #0
10003124:	d100      	bne.n	10003128 <_vsnprintf+0x360>
10003126:	e0c6      	b.n	100032b6 <_vsnprintf+0x4ee>
    for (s = str; *s && maxsize--; ++s);
10003128:	7813      	ldrb	r3, [r2, #0]
1000312a:	469c      	mov	ip, r3
1000312c:	2b00      	cmp	r3, #0
1000312e:	d100      	bne.n	10003132 <_vsnprintf+0x36a>
10003130:	e3bd      	b.n	100038ae <_vsnprintf+0xae6>
10003132:	4643      	mov	r3, r8
10003134:	3b01      	subs	r3, #1
10003136:	9a09      	ldr	r2, [sp, #36]	; 0x24
10003138:	3301      	adds	r3, #1
1000313a:	18d0      	adds	r0, r2, r3
                const char *p = va_arg(va, char*);
1000313c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
1000313e:	0013      	movs	r3, r2
10003140:	e001      	b.n	10003146 <_vsnprintf+0x37e>
    for (s = str; *s && maxsize--; ++s);
10003142:	4283      	cmp	r3, r0
10003144:	d003      	beq.n	1000314e <_vsnprintf+0x386>
10003146:	785a      	ldrb	r2, [r3, #1]
10003148:	3301      	adds	r3, #1
1000314a:	2a00      	cmp	r2, #0
1000314c:	d1f9      	bne.n	10003142 <_vsnprintf+0x37a>
    return (unsigned int) (s - str);
1000314e:	9a09      	ldr	r2, [sp, #36]	; 0x24
10003150:	970a      	str	r7, [sp, #40]	; 0x28
10003152:	1a9b      	subs	r3, r3, r2
10003154:	930b      	str	r3, [sp, #44]	; 0x2c
                if (flags & FLAGS_PRECISION) {
10003156:	2380      	movs	r3, #128	; 0x80
10003158:	000a      	movs	r2, r1
1000315a:	00db      	lsls	r3, r3, #3
1000315c:	401a      	ands	r2, r3
1000315e:	920c      	str	r2, [sp, #48]	; 0x30
10003160:	4219      	tst	r1, r3
10003162:	d004      	beq.n	1000316e <_vsnprintf+0x3a6>
                    l = (l < precision ? l : precision);
10003164:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
10003166:	4543      	cmp	r3, r8
10003168:	d901      	bls.n	1000316e <_vsnprintf+0x3a6>
1000316a:	4643      	mov	r3, r8
1000316c:	930b      	str	r3, [sp, #44]	; 0x2c
                if (!(flags & FLAGS_LEFT)) {
1000316e:	2302      	movs	r3, #2
10003170:	001a      	movs	r2, r3
10003172:	400a      	ands	r2, r1
10003174:	920d      	str	r2, [sp, #52]	; 0x34
10003176:	420b      	tst	r3, r1
10003178:	d100      	bne.n	1000317c <_vsnprintf+0x3b4>
1000317a:	e187      	b.n	1000348c <_vsnprintf+0x6c4>
                while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
1000317c:	4660      	mov	r0, ip
1000317e:	2800      	cmp	r0, #0
10003180:	d100      	bne.n	10003184 <_vsnprintf+0x3bc>
10003182:	e168      	b.n	10003456 <_vsnprintf+0x68e>
10003184:	9b0c      	ldr	r3, [sp, #48]	; 0x30
10003186:	2b00      	cmp	r3, #0
10003188:	d100      	bne.n	1000318c <_vsnprintf+0x3c4>
1000318a:	e10d      	b.n	100033a8 <_vsnprintf+0x5e0>
1000318c:	44a8      	add	r8, r5
1000318e:	46c2      	mov	sl, r8
10003190:	9b09      	ldr	r3, [sp, #36]	; 0x24
10003192:	4657      	mov	r7, sl
10003194:	1b5b      	subs	r3, r3, r5
10003196:	4698      	mov	r8, r3
10003198:	9b08      	ldr	r3, [sp, #32]
1000319a:	46b2      	mov	sl, r6
    for (s = str; *s && maxsize--; ++s);
1000319c:	002a      	movs	r2, r5
1000319e:	0026      	movs	r6, r4
100031a0:	464c      	mov	r4, r9
100031a2:	4699      	mov	r9, r3
100031a4:	e009      	b.n	100031ba <_vsnprintf+0x3f2>
                    out(*(p++), buffer, idx++, maxlen);
100031a6:	0023      	movs	r3, r4
100031a8:	0031      	movs	r1, r6
100031aa:	1c55      	adds	r5, r2, #1
100031ac:	47c8      	blx	r9
                while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
100031ae:	4643      	mov	r3, r8
100031b0:	5d58      	ldrb	r0, [r3, r5]
100031b2:	2800      	cmp	r0, #0
100031b4:	d100      	bne.n	100031b8 <_vsnprintf+0x3f0>
100031b6:	e126      	b.n	10003406 <_vsnprintf+0x63e>
                    out(*(p++), buffer, idx++, maxlen);
100031b8:	002a      	movs	r2, r5
                while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
100031ba:	4297      	cmp	r7, r2
100031bc:	d1f3      	bne.n	100031a6 <_vsnprintf+0x3de>
100031be:	46a1      	mov	r9, r4
100031c0:	003d      	movs	r5, r7
100031c2:	0034      	movs	r4, r6
100031c4:	4656      	mov	r6, sl
                if (flags & FLAGS_LEFT) {
100031c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
100031c8:	2b00      	cmp	r3, #0
100031ca:	d000      	beq.n	100031ce <_vsnprintf+0x406>
100031cc:	e143      	b.n	10003456 <_vsnprintf+0x68e>
                const char *p = va_arg(va, char*);
100031ce:	465b      	mov	r3, fp
                format++;
100031d0:	3601      	adds	r6, #1
                const char *p = va_arg(va, char*);
100031d2:	9309      	str	r3, [sp, #36]	; 0x24
                break;
100031d4:	e61d      	b.n	10002e12 <_vsnprintf+0x4a>
                    idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long) ((uintptr_t) va_arg(va, void*)), false,
100031d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
100031d8:	001a      	movs	r2, r3
100031da:	ca08      	ldmia	r2!, {r3}
100031dc:	4692      	mov	sl, r2
    if (!value) {
100031de:	2b00      	cmp	r3, #0
100031e0:	d048      	beq.n	10003274 <_vsnprintf+0x4ac>
                flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
100031e2:	2221      	movs	r2, #33	; 0x21
100031e4:	4311      	orrs	r1, r2
100031e6:	468b      	mov	fp, r1
100031e8:	a80e      	add	r0, sp, #56	; 0x38
100031ea:	4684      	mov	ip, r0
100031ec:	211f      	movs	r1, #31
100031ee:	4461      	add	r1, ip
100031f0:	9509      	str	r5, [sp, #36]	; 0x24
                    while (l++ < width) {
100031f2:	2200      	movs	r2, #0
            const char digit = (char) (value % base);
100031f4:	270f      	movs	r7, #15
100031f6:	46a4      	mov	ip, r4
100031f8:	000d      	movs	r5, r1
100031fa:	e002      	b.n	10003202 <_vsnprintf+0x43a>
        } while (value && (len < PICO_PRINTF_NTOA_BUFFER_SIZE));
100031fc:	2a20      	cmp	r2, #32
100031fe:	d00c      	beq.n	1000321a <_vsnprintf+0x452>
            value /= base;
10003200:	000b      	movs	r3, r1
            const char digit = (char) (value % base);
10003202:	003c      	movs	r4, r7
10003204:	401c      	ands	r4, r3
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
10003206:	0020      	movs	r0, r4
10003208:	3037      	adds	r0, #55	; 0x37
1000320a:	2c09      	cmp	r4, #9
1000320c:	d800      	bhi.n	10003210 <_vsnprintf+0x448>
1000320e:	3807      	subs	r0, #7
10003210:	3201      	adds	r2, #1
10003212:	54a8      	strb	r0, [r5, r2]
            value /= base;
10003214:	0919      	lsrs	r1, r3, #4
        } while (value && (len < PICO_PRINTF_NTOA_BUFFER_SIZE));
10003216:	2b0f      	cmp	r3, #15
10003218:	d8f0      	bhi.n	100031fc <_vsnprintf+0x434>
1000321a:	4664      	mov	r4, ip
1000321c:	9d09      	ldr	r5, [sp, #36]	; 0x24
1000321e:	e032      	b.n	10003286 <_vsnprintf+0x4be>
        out = _out_null;
10003220:	4bdc      	ldr	r3, [pc, #880]	; (10003594 <_vsnprintf+0x7cc>)
    while (*format) {
10003222:	7820      	ldrb	r0, [r4, #0]
        out = _out_null;
10003224:	9308      	str	r3, [sp, #32]
    while (*format) {
10003226:	2300      	movs	r3, #0
10003228:	469a      	mov	sl, r3
1000322a:	2800      	cmp	r0, #0
1000322c:	d000      	beq.n	10003230 <_vsnprintf+0x468>
1000322e:	e5e4      	b.n	10002dfa <_vsnprintf+0x32>
10003230:	2400      	movs	r4, #0
10003232:	e665      	b.n	10002f00 <_vsnprintf+0x138>
10003234:	4643      	mov	r3, r8
10003236:	0006      	movs	r6, r0
10003238:	9f0a      	ldr	r7, [sp, #40]	; 0x28
        i = i * 10U + (unsigned int) (*((*str)++) - '0');
1000323a:	0098      	lsls	r0, r3, #2
1000323c:	18c0      	adds	r0, r0, r3
1000323e:	3201      	adds	r2, #1
10003240:	0040      	lsls	r0, r0, #1
10003242:	1980      	adds	r0, r0, r6
    while (_is_digit(**str)) {
10003244:	7816      	ldrb	r6, [r2, #0]
        i = i * 10U + (unsigned int) (*((*str)++) - '0');
10003246:	0003      	movs	r3, r0
    while (_is_digit(**str)) {
10003248:	0030      	movs	r0, r6
1000324a:	3830      	subs	r0, #48	; 0x30
        i = i * 10U + (unsigned int) (*((*str)++) - '0');
1000324c:	3b30      	subs	r3, #48	; 0x30
    while (_is_digit(**str)) {
1000324e:	2809      	cmp	r0, #9
10003250:	d9f3      	bls.n	1000323a <_vsnprintf+0x472>
10003252:	0030      	movs	r0, r6
10003254:	4698      	mov	r8, r3
10003256:	0016      	movs	r6, r2
10003258:	970a      	str	r7, [sp, #40]	; 0x28
1000325a:	e600      	b.n	10002e5e <_vsnprintf+0x96>
                const int prec = (int) va_arg(va, int);
1000325c:	9b09      	ldr	r3, [sp, #36]	; 0x24
                format++;
1000325e:	3602      	adds	r6, #2
                precision = prec > 0 ? (unsigned int) prec : 0U;
10003260:	cb04      	ldmia	r3!, {r2}
10003262:	4690      	mov	r8, r2
10003264:	43d2      	mvns	r2, r2
10003266:	4640      	mov	r0, r8
10003268:	17d2      	asrs	r2, r2, #31
1000326a:	4010      	ands	r0, r2
1000326c:	4680      	mov	r8, r0
                const int prec = (int) va_arg(va, int);
1000326e:	9309      	str	r3, [sp, #36]	; 0x24
        switch (*format) {
10003270:	7830      	ldrb	r0, [r6, #0]
10003272:	e5f4      	b.n	10002e5e <_vsnprintf+0x96>
        flags &= ~FLAGS_HASH;
10003274:	2210      	movs	r2, #16
10003276:	0008      	movs	r0, r1
10003278:	4390      	bics	r0, r2
1000327a:	3211      	adds	r2, #17
1000327c:	4310      	orrs	r0, r2
1000327e:	4683      	mov	fp, r0
    size_t len = 0U;
10003280:	2200      	movs	r2, #0
    if (!(flags & FLAGS_PRECISION) || value) {
10003282:	0549      	lsls	r1, r1, #21
10003284:	d5b0      	bpl.n	100031e8 <_vsnprintf+0x420>
    return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int) base, prec, width, flags);
10003286:	465b      	mov	r3, fp
10003288:	9306      	str	r3, [sp, #24]
1000328a:	2308      	movs	r3, #8
1000328c:	9305      	str	r3, [sp, #20]
1000328e:	4643      	mov	r3, r8
10003290:	9304      	str	r3, [sp, #16]
10003292:	2310      	movs	r3, #16
10003294:	9303      	str	r3, [sp, #12]
10003296:	2300      	movs	r3, #0
10003298:	9302      	str	r3, [sp, #8]
1000329a:	ab16      	add	r3, sp, #88	; 0x58
1000329c:	9201      	str	r2, [sp, #4]
1000329e:	9300      	str	r3, [sp, #0]
100032a0:	002a      	movs	r2, r5
100032a2:	464b      	mov	r3, r9
100032a4:	0021      	movs	r1, r4
100032a6:	9808      	ldr	r0, [sp, #32]
100032a8:	f7ff f8bc 	bl	10002424 <_ntoa_format>
                    idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long) ((uintptr_t) va_arg(va, void*)), false,
100032ac:	4653      	mov	r3, sl
    return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int) base, prec, width, flags);
100032ae:	0005      	movs	r5, r0
                format++;
100032b0:	3601      	adds	r6, #1
                    idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long) ((uintptr_t) va_arg(va, void*)), false,
100032b2:	9309      	str	r3, [sp, #36]	; 0x24
                break;
100032b4:	e5ad      	b.n	10002e12 <_vsnprintf+0x4a>
    for (s = str; *s && maxsize--; ++s);
100032b6:	7813      	ldrb	r3, [r2, #0]
100032b8:	469c      	mov	ip, r3
100032ba:	2b00      	cmp	r3, #0
100032bc:	d100      	bne.n	100032c0 <_vsnprintf+0x4f8>
100032be:	e2f7      	b.n	100038b0 <_vsnprintf+0xae8>
100032c0:	2302      	movs	r3, #2
100032c2:	425b      	negs	r3, r3
100032c4:	e737      	b.n	10003136 <_vsnprintf+0x36e>
                if ((*format == 'g') || (*format == 'G')) flags |= FLAGS_ADAPT_EXP;
100032c6:	2320      	movs	r3, #32
100032c8:	0002      	movs	r2, r0
100032ca:	439a      	bics	r2, r3
100032cc:	2a47      	cmp	r2, #71	; 0x47
100032ce:	d104      	bne.n	100032da <_vsnprintf+0x512>
100032d0:	2380      	movs	r3, #128	; 0x80
100032d2:	011b      	lsls	r3, r3, #4
100032d4:	4319      	orrs	r1, r3
                if ((*format == 'E') || (*format == 'G')) flags |= FLAGS_UPPERCASE;
100032d6:	2302      	movs	r3, #2
100032d8:	4398      	bics	r0, r3
100032da:	2845      	cmp	r0, #69	; 0x45
100032dc:	d101      	bne.n	100032e2 <_vsnprintf+0x51a>
100032de:	2320      	movs	r3, #32
100032e0:	4319      	orrs	r1, r3
                idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
100032e2:	2207      	movs	r2, #7
100032e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
100032e6:	9104      	str	r1, [sp, #16]
100032e8:	3307      	adds	r3, #7
100032ea:	4393      	bics	r3, r2
100032ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
100032ee:	0019      	movs	r1, r3
100032f0:	9203      	str	r2, [sp, #12]
100032f2:	4642      	mov	r2, r8
100032f4:	9202      	str	r2, [sp, #8]
100032f6:	c90c      	ldmia	r1!, {r2, r3}
100032f8:	9808      	ldr	r0, [sp, #32]
100032fa:	9200      	str	r2, [sp, #0]
100032fc:	9301      	str	r3, [sp, #4]
100032fe:	9109      	str	r1, [sp, #36]	; 0x24
10003300:	002a      	movs	r2, r5
10003302:	464b      	mov	r3, r9
10003304:	0021      	movs	r1, r4
10003306:	f7ff f983 	bl	10002610 <_etoa>
                format++;
1000330a:	3601      	adds	r6, #1
                idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
1000330c:	0005      	movs	r5, r0
                break;
1000330e:	e580      	b.n	10002e12 <_vsnprintf+0x4a>
                    base = 16U;
10003310:	2310      	movs	r3, #16
10003312:	930c      	str	r3, [sp, #48]	; 0x30
                    flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
10003314:	230c      	movs	r3, #12
10003316:	000a      	movs	r2, r1
10003318:	439a      	bics	r2, r3
1000331a:	920b      	str	r2, [sp, #44]	; 0x2c
                if (flags & FLAGS_PRECISION) {
1000331c:	054b      	lsls	r3, r1, #21
1000331e:	d503      	bpl.n	10003328 <_vsnprintf+0x560>
                    flags &= ~FLAGS_ZEROPAD;
10003320:	2301      	movs	r3, #1
10003322:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
10003324:	439a      	bics	r2, r3
10003326:	920b      	str	r2, [sp, #44]	; 0x2c
                if ((*format == 'i') || (*format == 'd')) {
10003328:	2869      	cmp	r0, #105	; 0x69
1000332a:	d100      	bne.n	1000332e <_vsnprintf+0x566>
1000332c:	e627      	b.n	10002f7e <_vsnprintf+0x1b6>
1000332e:	2864      	cmp	r0, #100	; 0x64
10003330:	d100      	bne.n	10003334 <_vsnprintf+0x56c>
10003332:	e624      	b.n	10002f7e <_vsnprintf+0x1b6>
                    if (flags & FLAGS_LONG_LONG) {
10003334:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
10003336:	2380      	movs	r3, #128	; 0x80
10003338:	0011      	movs	r1, r2
1000333a:	009b      	lsls	r3, r3, #2
1000333c:	4019      	ands	r1, r3
1000333e:	468b      	mov	fp, r1
10003340:	421a      	tst	r2, r3
10003342:	d000      	beq.n	10003346 <_vsnprintf+0x57e>
10003344:	e166      	b.n	10003614 <_vsnprintf+0x84c>
                    } else if (flags & FLAGS_LONG) {
10003346:	2380      	movs	r3, #128	; 0x80
10003348:	0011      	movs	r1, r2
1000334a:	005b      	lsls	r3, r3, #1
1000334c:	4019      	ands	r1, r3
1000334e:	468a      	mov	sl, r1
10003350:	421a      	tst	r2, r3
10003352:	d000      	beq.n	10003356 <_vsnprintf+0x58e>
10003354:	e239      	b.n	100037ca <_vsnprintf+0xa02>
10003356:	0013      	movs	r3, r2
                                                                        : (flags & FLAGS_SHORT)
10003358:	065b      	lsls	r3, r3, #25
1000335a:	d500      	bpl.n	1000335e <_vsnprintf+0x596>
1000335c:	e13c      	b.n	100035d8 <_vsnprintf+0x810>
1000335e:	0013      	movs	r3, r2
                                                                          : va_arg(va, unsigned int);
10003360:	061b      	lsls	r3, r3, #24
10003362:	d400      	bmi.n	10003366 <_vsnprintf+0x59e>
10003364:	e2a6      	b.n	100038b4 <_vsnprintf+0xaec>
                                                                          ? (unsigned short int) va_arg(va,
10003366:	9b09      	ldr	r3, [sp, #36]	; 0x24
10003368:	cb04      	ldmia	r3!, {r2}
1000336a:	0412      	lsls	r2, r2, #16
1000336c:	0c12      	lsrs	r2, r2, #16
1000336e:	4693      	mov	fp, r2
10003370:	9309      	str	r3, [sp, #36]	; 0x24
    if (!value) {
10003372:	465b      	mov	r3, fp
10003374:	2b00      	cmp	r3, #0
10003376:	d000      	beq.n	1000337a <_vsnprintf+0x5b2>
10003378:	e19a      	b.n	100036b0 <_vsnprintf+0x8e8>
        flags &= ~FLAGS_HASH;
1000337a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
1000337c:	3310      	adds	r3, #16
1000337e:	0011      	movs	r1, r2
10003380:	4399      	bics	r1, r3
10003382:	910b      	str	r1, [sp, #44]	; 0x2c
    if (!(flags & FLAGS_PRECISION) || value) {
10003384:	0552      	lsls	r2, r2, #21
10003386:	d400      	bmi.n	1000338a <_vsnprintf+0x5c2>
10003388:	e192      	b.n	100036b0 <_vsnprintf+0x8e8>
    size_t len = 0U;
1000338a:	2300      	movs	r3, #0
1000338c:	469a      	mov	sl, r3
    return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int) base, prec, width, flags);
1000338e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
10003390:	9306      	str	r3, [sp, #24]
10003392:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10003394:	9305      	str	r3, [sp, #20]
10003396:	4643      	mov	r3, r8
10003398:	9304      	str	r3, [sp, #16]
1000339a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1000339c:	9303      	str	r3, [sp, #12]
1000339e:	2300      	movs	r3, #0
100033a0:	e10c      	b.n	100035bc <_vsnprintf+0x7f4>
                if (*format == 'F') flags |= FLAGS_UPPERCASE;
100033a2:	2320      	movs	r3, #32
100033a4:	4319      	orrs	r1, r3
100033a6:	e660      	b.n	1000306a <_vsnprintf+0x2a2>
100033a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
100033aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
100033ac:	1b5b      	subs	r3, r3, r5
100033ae:	4698      	mov	r8, r3
100033b0:	464b      	mov	r3, r9
100033b2:	4691      	mov	r9, r2
100033b4:	001f      	movs	r7, r3
100033b6:	46b2      	mov	sl, r6
100033b8:	0026      	movs	r6, r4
100033ba:	9c08      	ldr	r4, [sp, #32]
                    out(*(p++), buffer, idx++, maxlen);
100033bc:	002a      	movs	r2, r5
100033be:	003b      	movs	r3, r7
100033c0:	0031      	movs	r1, r6
100033c2:	47a0      	blx	r4
                while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
100033c4:	4643      	mov	r3, r8
                    out(*(p++), buffer, idx++, maxlen);
100033c6:	3501      	adds	r5, #1
                while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
100033c8:	5d58      	ldrb	r0, [r3, r5]
100033ca:	2800      	cmp	r0, #0
100033cc:	d1f6      	bne.n	100033bc <_vsnprintf+0x5f4>
                    out(*(p++), buffer, idx++, maxlen);
100033ce:	464a      	mov	r2, r9
100033d0:	0034      	movs	r4, r6
100033d2:	46b9      	mov	r9, r7
100033d4:	4656      	mov	r6, sl
100033d6:	920a      	str	r2, [sp, #40]	; 0x28
100033d8:	e6f5      	b.n	100031c6 <_vsnprintf+0x3fe>
                    flags |= FLAGS_LONG_LONG;
100033da:	23c0      	movs	r3, #192	; 0xc0
100033dc:	009b      	lsls	r3, r3, #2
        switch (*format) {
100033de:	78b0      	ldrb	r0, [r6, #2]
                    flags |= FLAGS_LONG_LONG;
100033e0:	4319      	orrs	r1, r3
                    format++;
100033e2:	3602      	adds	r6, #2
100033e4:	e55d      	b.n	10002ea2 <_vsnprintf+0xda>
                    flags |= FLAGS_CHAR;
100033e6:	23c0      	movs	r3, #192	; 0xc0
        switch (*format) {
100033e8:	78b0      	ldrb	r0, [r6, #2]
                    flags |= FLAGS_CHAR;
100033ea:	4319      	orrs	r1, r3
                    format++;
100033ec:	3602      	adds	r6, #2
100033ee:	e558      	b.n	10002ea2 <_vsnprintf+0xda>
                    flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
100033f0:	230c      	movs	r3, #12
100033f2:	000a      	movs	r2, r1
100033f4:	439a      	bics	r2, r3
100033f6:	3314      	adds	r3, #20
100033f8:	431a      	orrs	r2, r3
                    base = 16U;
100033fa:	3b10      	subs	r3, #16
                    flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
100033fc:	920b      	str	r2, [sp, #44]	; 0x2c
                    base = 16U;
100033fe:	930c      	str	r3, [sp, #48]	; 0x30
                if (flags & FLAGS_PRECISION) {
10003400:	054b      	lsls	r3, r1, #21
10003402:	d48d      	bmi.n	10003320 <_vsnprintf+0x558>
10003404:	e796      	b.n	10003334 <_vsnprintf+0x56c>
                    out(*(p++), buffer, idx++, maxlen);
10003406:	46a1      	mov	r9, r4
10003408:	0034      	movs	r4, r6
1000340a:	4656      	mov	r6, sl
1000340c:	e6db      	b.n	100031c6 <_vsnprintf+0x3fe>
                    while (l++ < width) {
1000340e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
10003410:	2a01      	cmp	r2, #1
10003412:	d800      	bhi.n	10003416 <_vsnprintf+0x64e>
10003414:	e253      	b.n	100038be <_vsnprintf+0xaf6>
10003416:	1e6b      	subs	r3, r5, #1
10003418:	189f      	adds	r7, r3, r2
1000341a:	9b08      	ldr	r3, [sp, #32]
1000341c:	46b0      	mov	r8, r6
1000341e:	0026      	movs	r6, r4
10003420:	464c      	mov	r4, r9
10003422:	4699      	mov	r9, r3
                        out(' ', buffer, idx++, maxlen);
10003424:	002a      	movs	r2, r5
10003426:	0023      	movs	r3, r4
10003428:	3501      	adds	r5, #1
1000342a:	0031      	movs	r1, r6
1000342c:	2020      	movs	r0, #32
1000342e:	47c8      	blx	r9
                    while (l++ < width) {
10003430:	42bd      	cmp	r5, r7
10003432:	d1f7      	bne.n	10003424 <_vsnprintf+0x65c>
10003434:	46a1      	mov	r9, r4
10003436:	0034      	movs	r4, r6
10003438:	4646      	mov	r6, r8
                out((char) va_arg(va, int), buffer, idx++, maxlen);
1000343a:	9b09      	ldr	r3, [sp, #36]	; 0x24
1000343c:	003a      	movs	r2, r7
1000343e:	cb01      	ldmia	r3!, {r0}
10003440:	0021      	movs	r1, r4
10003442:	4698      	mov	r8, r3
10003444:	1c7d      	adds	r5, r7, #1
10003446:	464b      	mov	r3, r9
10003448:	9f08      	ldr	r7, [sp, #32]
1000344a:	b2c0      	uxtb	r0, r0
1000344c:	47b8      	blx	r7
1000344e:	4643      	mov	r3, r8
                format++;
10003450:	3601      	adds	r6, #1
                out((char) va_arg(va, int), buffer, idx++, maxlen);
10003452:	9309      	str	r3, [sp, #36]	; 0x24
                break;
10003454:	e4dd      	b.n	10002e12 <_vsnprintf+0x4a>
                    while (l++ < width) {
10003456:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
10003458:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1000345a:	46a8      	mov	r8, r5
1000345c:	429a      	cmp	r2, r3
1000345e:	d800      	bhi.n	10003462 <_vsnprintf+0x69a>
10003460:	e6b5      	b.n	100031ce <_vsnprintf+0x406>
10003462:	4694      	mov	ip, r2
10003464:	4465      	add	r5, ip
10003466:	1aed      	subs	r5, r5, r3
10003468:	9b08      	ldr	r3, [sp, #32]
1000346a:	4647      	mov	r7, r8
1000346c:	46b0      	mov	r8, r6
1000346e:	0026      	movs	r6, r4
10003470:	464c      	mov	r4, r9
10003472:	4699      	mov	r9, r3
                        out(' ', buffer, idx++, maxlen);
10003474:	003a      	movs	r2, r7
10003476:	0023      	movs	r3, r4
10003478:	3701      	adds	r7, #1
1000347a:	0031      	movs	r1, r6
1000347c:	2020      	movs	r0, #32
1000347e:	47c8      	blx	r9
                    while (l++ < width) {
10003480:	42af      	cmp	r7, r5
10003482:	d1f7      	bne.n	10003474 <_vsnprintf+0x6ac>
10003484:	46a1      	mov	r9, r4
10003486:	0034      	movs	r4, r6
10003488:	4646      	mov	r6, r8
1000348a:	e6a0      	b.n	100031ce <_vsnprintf+0x406>
                    while (l++ < width) {
1000348c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
1000348e:	990a      	ldr	r1, [sp, #40]	; 0x28
10003490:	1c53      	adds	r3, r2, #1
10003492:	4291      	cmp	r1, r2
10003494:	d800      	bhi.n	10003498 <_vsnprintf+0x6d0>
10003496:	e214      	b.n	100038c2 <_vsnprintf+0xafa>
10003498:	194b      	adds	r3, r1, r5
1000349a:	1a9b      	subs	r3, r3, r2
1000349c:	001f      	movs	r7, r3
1000349e:	9b08      	ldr	r3, [sp, #32]
100034a0:	46b2      	mov	sl, r6
100034a2:	0026      	movs	r6, r4
100034a4:	464c      	mov	r4, r9
100034a6:	4699      	mov	r9, r3
                        out(' ', buffer, idx++, maxlen);
100034a8:	002a      	movs	r2, r5
100034aa:	0023      	movs	r3, r4
100034ac:	3501      	adds	r5, #1
100034ae:	0031      	movs	r1, r6
100034b0:	2020      	movs	r0, #32
100034b2:	47c8      	blx	r9
                    while (l++ < width) {
100034b4:	42bd      	cmp	r5, r7
100034b6:	d1f7      	bne.n	100034a8 <_vsnprintf+0x6e0>
100034b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
100034ba:	46a1      	mov	r9, r4
100034bc:	3301      	adds	r3, #1
100034be:	930b      	str	r3, [sp, #44]	; 0x2c
100034c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
100034c2:	0034      	movs	r4, r6
100034c4:	781b      	ldrb	r3, [r3, #0]
100034c6:	4656      	mov	r6, sl
100034c8:	469c      	mov	ip, r3
                while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
100034ca:	4660      	mov	r0, ip
100034cc:	2800      	cmp	r0, #0
100034ce:	d000      	beq.n	100034d2 <_vsnprintf+0x70a>
100034d0:	e658      	b.n	10003184 <_vsnprintf+0x3bc>
100034d2:	e67c      	b.n	100031ce <_vsnprintf+0x406>
                        const long long value = va_arg(va, long long);
100034d4:	2207      	movs	r2, #7
100034d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
100034d8:	3307      	adds	r3, #7
100034da:	4393      	bics	r3, r2
100034dc:	3201      	adds	r2, #1
100034de:	4694      	mov	ip, r2
100034e0:	449c      	add	ip, r3
100034e2:	4662      	mov	r2, ip
100034e4:	685f      	ldr	r7, [r3, #4]
100034e6:	9209      	str	r2, [sp, #36]	; 0x24
100034e8:	681a      	ldr	r2, [r3, #0]
                                              (unsigned long long) (value > 0 ? value : 0 - value), value < 0, base,
100034ea:	17fb      	asrs	r3, r7, #31
100034ec:	9310      	str	r3, [sp, #64]	; 0x40
100034ee:	9311      	str	r3, [sp, #68]	; 0x44
100034f0:	9810      	ldr	r0, [sp, #64]	; 0x40
100034f2:	9911      	ldr	r1, [sp, #68]	; 0x44
100034f4:	0003      	movs	r3, r0
100034f6:	4053      	eors	r3, r2
100034f8:	930e      	str	r3, [sp, #56]	; 0x38
100034fa:	000b      	movs	r3, r1
100034fc:	407b      	eors	r3, r7
100034fe:	930f      	str	r3, [sp, #60]	; 0x3c
                        const long long value = va_arg(va, long long);
10003500:	4694      	mov	ip, r2
                                              (unsigned long long) (value > 0 ? value : 0 - value), value < 0, base,
10003502:	9a0e      	ldr	r2, [sp, #56]	; 0x38
10003504:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
10003506:	1a12      	subs	r2, r2, r0
10003508:	418b      	sbcs	r3, r1
1000350a:	920e      	str	r2, [sp, #56]	; 0x38
1000350c:	930f      	str	r3, [sp, #60]	; 0x3c
                        idx = _ntoa_long_long(out, buffer, idx, maxlen,
1000350e:	0ffb      	lsrs	r3, r7, #31
    if (!value) {
10003510:	4662      	mov	r2, ip
                        idx = _ntoa_long_long(out, buffer, idx, maxlen,
10003512:	9312      	str	r3, [sp, #72]	; 0x48
10003514:	2300      	movs	r3, #0
    if (!value) {
10003516:	433a      	orrs	r2, r7
                        idx = _ntoa_long_long(out, buffer, idx, maxlen,
10003518:	469b      	mov	fp, r3
    if (!value) {
1000351a:	d03d      	beq.n	10003598 <_vsnprintf+0x7d0>
1000351c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
1000351e:	2361      	movs	r3, #97	; 0x61
10003520:	0692      	lsls	r2, r2, #26
10003522:	d500      	bpl.n	10003526 <_vsnprintf+0x75e>
10003524:	2341      	movs	r3, #65	; 0x41
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
10003526:	2200      	movs	r2, #0
10003528:	b2db      	uxtb	r3, r3
1000352a:	a90e      	add	r1, sp, #56	; 0x38
1000352c:	3b0a      	subs	r3, #10
1000352e:	468c      	mov	ip, r1
10003530:	4692      	mov	sl, r2
10003532:	930d      	str	r3, [sp, #52]	; 0x34
10003534:	4643      	mov	r3, r8
10003536:	321f      	adds	r2, #31
10003538:	4462      	add	r2, ip
1000353a:	9513      	str	r5, [sp, #76]	; 0x4c
1000353c:	9615      	str	r6, [sp, #84]	; 0x54
1000353e:	4655      	mov	r5, sl
10003540:	9e0e      	ldr	r6, [sp, #56]	; 0x38
10003542:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
10003544:	46a2      	mov	sl, r4
10003546:	4690      	mov	r8, r2
10003548:	9c0c      	ldr	r4, [sp, #48]	; 0x30
1000354a:	9314      	str	r3, [sp, #80]	; 0x50
1000354c:	e00c      	b.n	10003568 <_vsnprintf+0x7a0>
1000354e:	3230      	adds	r2, #48	; 0x30
10003550:	b2d2      	uxtb	r2, r2
10003552:	4643      	mov	r3, r8
10003554:	3501      	adds	r5, #1
10003556:	555a      	strb	r2, [r3, r5]
        } while (value && (len < PICO_PRINTF_NTOA_BUFFER_SIZE));
10003558:	45bb      	cmp	fp, r7
1000355a:	d100      	bne.n	1000355e <_vsnprintf+0x796>
1000355c:	e18a      	b.n	10003874 <_vsnprintf+0xaac>
1000355e:	2d20      	cmp	r5, #32
10003560:	d100      	bne.n	10003564 <_vsnprintf+0x79c>
10003562:	e18a      	b.n	1000387a <_vsnprintf+0xab2>
            value /= base;
10003564:	0006      	movs	r6, r0
10003566:	000f      	movs	r7, r1
            const char digit = (char) (value % base);
10003568:	0022      	movs	r2, r4
1000356a:	2300      	movs	r3, #0
1000356c:	0030      	movs	r0, r6
1000356e:	0039      	movs	r1, r7
10003570:	f7fc ff46 	bl	10000400 <__wrap___aeabi_uldivmod>
10003574:	b2d2      	uxtb	r2, r2
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
10003576:	2a09      	cmp	r2, #9
10003578:	d9e9      	bls.n	1000354e <_vsnprintf+0x786>
1000357a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1000357c:	469c      	mov	ip, r3
1000357e:	4462      	add	r2, ip
10003580:	b2d2      	uxtb	r2, r2
10003582:	e7e6      	b.n	10003552 <_vsnprintf+0x78a>
10003584:	23ff      	movs	r3, #255	; 0xff
                        const int value = (flags & FLAGS_CHAR) ? (char) va_arg(va, int) : (flags & FLAGS_SHORT)
10003586:	9909      	ldr	r1, [sp, #36]	; 0x24
10003588:	c904      	ldmia	r1!, {r2}
1000358a:	4013      	ands	r3, r2
1000358c:	001a      	movs	r2, r3
1000358e:	9109      	str	r1, [sp, #36]	; 0x24
10003590:	e517      	b.n	10002fc2 <_vsnprintf+0x1fa>
10003592:	46c0      	nop			; (mov r8, r8)
10003594:	10002385 	.word	0x10002385
        flags &= ~FLAGS_HASH;
10003598:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
1000359a:	3310      	adds	r3, #16
1000359c:	0011      	movs	r1, r2
1000359e:	4399      	bics	r1, r3
100035a0:	910b      	str	r1, [sp, #44]	; 0x2c
    if (!(flags & FLAGS_PRECISION) || value) {
100035a2:	0552      	lsls	r2, r2, #21
100035a4:	d5ba      	bpl.n	1000351c <_vsnprintf+0x754>
    size_t len = 0U;
100035a6:	2300      	movs	r3, #0
100035a8:	469a      	mov	sl, r3
    return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int) base, prec, width, flags);
100035aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
100035ac:	9306      	str	r3, [sp, #24]
100035ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
100035b0:	9305      	str	r3, [sp, #20]
100035b2:	4643      	mov	r3, r8
100035b4:	9304      	str	r3, [sp, #16]
100035b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
100035b8:	9303      	str	r3, [sp, #12]
100035ba:	9b12      	ldr	r3, [sp, #72]	; 0x48
100035bc:	9302      	str	r3, [sp, #8]
100035be:	4653      	mov	r3, sl
100035c0:	9301      	str	r3, [sp, #4]
100035c2:	ab16      	add	r3, sp, #88	; 0x58
100035c4:	002a      	movs	r2, r5
100035c6:	9300      	str	r3, [sp, #0]
100035c8:	0021      	movs	r1, r4
100035ca:	464b      	mov	r3, r9
100035cc:	9808      	ldr	r0, [sp, #32]
100035ce:	f7fe ff29 	bl	10002424 <_ntoa_format>
                format++;
100035d2:	3601      	adds	r6, #1
    return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int) base, prec, width, flags);
100035d4:	0005      	movs	r5, r0
                break;
100035d6:	e41c      	b.n	10002e12 <_vsnprintf+0x4a>
100035d8:	22ff      	movs	r2, #255	; 0xff
                        const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char) va_arg(va, unsigned int)
100035da:	9b09      	ldr	r3, [sp, #36]	; 0x24
100035dc:	cb02      	ldmia	r3!, {r1}
100035de:	4011      	ands	r1, r2
100035e0:	468b      	mov	fp, r1
100035e2:	9309      	str	r3, [sp, #36]	; 0x24
100035e4:	e6c5      	b.n	10003372 <_vsnprintf+0x5aa>
                out((char) va_arg(va, int), buffer, idx++, maxlen);
100035e6:	4653      	mov	r3, sl
                    while (l++ < width) {
100035e8:	4645      	mov	r5, r8
                out((char) va_arg(va, int), buffer, idx++, maxlen);
100035ea:	9309      	str	r3, [sp, #36]	; 0x24
                format++;
100035ec:	3601      	adds	r6, #1
                break;
100035ee:	f7ff fc10 	bl	10002e12 <_vsnprintf+0x4a>
100035f2:	4656      	mov	r6, sl
100035f4:	465c      	mov	r4, fp
100035f6:	46aa      	mov	sl, r5
100035f8:	9d13      	ldr	r5, [sp, #76]	; 0x4c
100035fa:	e7d6      	b.n	100035aa <_vsnprintf+0x7e2>
                    base = 8U;
100035fc:	2308      	movs	r3, #8
100035fe:	930c      	str	r3, [sp, #48]	; 0x30
                format++;
10003600:	910b      	str	r1, [sp, #44]	; 0x2c
10003602:	990b      	ldr	r1, [sp, #44]	; 0x2c
                if ((*format != 'i') && (*format != 'd')) {
10003604:	2864      	cmp	r0, #100	; 0x64
10003606:	d000      	beq.n	1000360a <_vsnprintf+0x842>
10003608:	e684      	b.n	10003314 <_vsnprintf+0x54c>
                if (flags & FLAGS_PRECISION) {
1000360a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1000360c:	055b      	lsls	r3, r3, #21
1000360e:	d500      	bpl.n	10003612 <_vsnprintf+0x84a>
10003610:	e686      	b.n	10003320 <_vsnprintf+0x558>
10003612:	e4b4      	b.n	10002f7e <_vsnprintf+0x1b6>
                        idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base,
10003614:	2207      	movs	r2, #7
10003616:	9b09      	ldr	r3, [sp, #36]	; 0x24
10003618:	3307      	adds	r3, #7
1000361a:	4393      	bics	r3, r2
1000361c:	3201      	adds	r2, #1
1000361e:	4694      	mov	ip, r2
10003620:	449c      	add	ip, r3
10003622:	4662      	mov	r2, ip
10003624:	9209      	str	r2, [sp, #36]	; 0x24
10003626:	681a      	ldr	r2, [r3, #0]
10003628:	685b      	ldr	r3, [r3, #4]
1000362a:	0010      	movs	r0, r2
1000362c:	469b      	mov	fp, r3
    if (!value) {
1000362e:	0013      	movs	r3, r2
10003630:	465a      	mov	r2, fp
10003632:	4313      	orrs	r3, r2
10003634:	d107      	bne.n	10003646 <_vsnprintf+0x87e>
        flags &= ~FLAGS_HASH;
10003636:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
10003638:	3310      	adds	r3, #16
1000363a:	0011      	movs	r1, r2
1000363c:	4399      	bics	r1, r3
1000363e:	910b      	str	r1, [sp, #44]	; 0x2c
    if (!(flags & FLAGS_PRECISION) || value) {
10003640:	0552      	lsls	r2, r2, #21
10003642:	d500      	bpl.n	10003646 <_vsnprintf+0x87e>
10003644:	e6a1      	b.n	1000338a <_vsnprintf+0x5c2>
10003646:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
10003648:	2361      	movs	r3, #97	; 0x61
1000364a:	0692      	lsls	r2, r2, #26
1000364c:	d500      	bpl.n	10003650 <_vsnprintf+0x888>
1000364e:	2341      	movs	r3, #65	; 0x41
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
10003650:	2200      	movs	r2, #0
10003652:	b2db      	uxtb	r3, r3
10003654:	a90e      	add	r1, sp, #56	; 0x38
10003656:	3b0a      	subs	r3, #10
10003658:	468c      	mov	ip, r1
1000365a:	4692      	mov	sl, r2
1000365c:	930d      	str	r3, [sp, #52]	; 0x34
1000365e:	4643      	mov	r3, r8
10003660:	321f      	adds	r2, #31
10003662:	4462      	add	r2, ip
10003664:	465f      	mov	r7, fp
10003666:	9512      	str	r5, [sp, #72]	; 0x48
10003668:	46a3      	mov	fp, r4
1000366a:	4655      	mov	r5, sl
1000366c:	0004      	movs	r4, r0
1000366e:	46b2      	mov	sl, r6
10003670:	4690      	mov	r8, r2
10003672:	9e0c      	ldr	r6, [sp, #48]	; 0x30
10003674:	9313      	str	r3, [sp, #76]	; 0x4c
10003676:	e00d      	b.n	10003694 <_vsnprintf+0x8cc>
10003678:	3230      	adds	r2, #48	; 0x30
1000367a:	b2d2      	uxtb	r2, r2
1000367c:	4643      	mov	r3, r8
1000367e:	3501      	adds	r5, #1
10003680:	555a      	strb	r2, [r3, r5]
        } while (value && (len < PICO_PRINTF_NTOA_BUFFER_SIZE));
10003682:	2300      	movs	r3, #0
10003684:	42bb      	cmp	r3, r7
10003686:	d100      	bne.n	1000368a <_vsnprintf+0x8c2>
10003688:	e100      	b.n	1000388c <_vsnprintf+0xac4>
1000368a:	2d20      	cmp	r5, #32
1000368c:	d100      	bne.n	10003690 <_vsnprintf+0x8c8>
1000368e:	e100      	b.n	10003892 <_vsnprintf+0xaca>
            value /= base;
10003690:	0004      	movs	r4, r0
10003692:	000f      	movs	r7, r1
            const char digit = (char) (value % base);
10003694:	0032      	movs	r2, r6
10003696:	2300      	movs	r3, #0
10003698:	0020      	movs	r0, r4
1000369a:	0039      	movs	r1, r7
1000369c:	f7fc feb0 	bl	10000400 <__wrap___aeabi_uldivmod>
100036a0:	b2d2      	uxtb	r2, r2
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
100036a2:	2a09      	cmp	r2, #9
100036a4:	d9e8      	bls.n	10003678 <_vsnprintf+0x8b0>
100036a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
100036a8:	469c      	mov	ip, r3
100036aa:	4462      	add	r2, ip
100036ac:	b2d2      	uxtb	r2, r2
100036ae:	e7e5      	b.n	1000367c <_vsnprintf+0x8b4>
100036b0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
100036b2:	2361      	movs	r3, #97	; 0x61
100036b4:	0692      	lsls	r2, r2, #26
100036b6:	d500      	bpl.n	100036ba <_vsnprintf+0x8f2>
100036b8:	2341      	movs	r3, #65	; 0x41
100036ba:	b2db      	uxtb	r3, r3
100036bc:	a90e      	add	r1, sp, #56	; 0x38
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
100036be:	3b0a      	subs	r3, #10
100036c0:	221f      	movs	r2, #31
100036c2:	468c      	mov	ip, r1
100036c4:	930d      	str	r3, [sp, #52]	; 0x34
100036c6:	0023      	movs	r3, r4
100036c8:	4462      	add	r2, ip
100036ca:	465c      	mov	r4, fp
100036cc:	9512      	str	r5, [sp, #72]	; 0x48
100036ce:	0017      	movs	r7, r2
100036d0:	4655      	mov	r5, sl
100036d2:	469b      	mov	fp, r3
100036d4:	46b2      	mov	sl, r6
100036d6:	9e0c      	ldr	r6, [sp, #48]	; 0x30
100036d8:	e008      	b.n	100036ec <_vsnprintf+0x924>
100036da:	3330      	adds	r3, #48	; 0x30
100036dc:	b2db      	uxtb	r3, r3
100036de:	3501      	adds	r5, #1
100036e0:	557b      	strb	r3, [r7, r5]
        } while (value && (len < PICO_PRINTF_NTOA_BUFFER_SIZE));
100036e2:	42b4      	cmp	r4, r6
100036e4:	d30e      	bcc.n	10003704 <_vsnprintf+0x93c>
100036e6:	2d20      	cmp	r5, #32
100036e8:	d00c      	beq.n	10003704 <_vsnprintf+0x93c>
            value /= base;
100036ea:	0004      	movs	r4, r0
            const char digit = (char) (value % base);
100036ec:	0031      	movs	r1, r6
100036ee:	0020      	movs	r0, r4
100036f0:	f7fc fe40 	bl	10000374 <__wrap___aeabi_uidiv>
100036f4:	b2cb      	uxtb	r3, r1
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
100036f6:	2909      	cmp	r1, #9
100036f8:	d9ef      	bls.n	100036da <_vsnprintf+0x912>
100036fa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
100036fc:	4694      	mov	ip, r2
100036fe:	4463      	add	r3, ip
10003700:	b2db      	uxtb	r3, r3
10003702:	e7ec      	b.n	100036de <_vsnprintf+0x916>
10003704:	4656      	mov	r6, sl
10003706:	465c      	mov	r4, fp
10003708:	46aa      	mov	sl, r5
1000370a:	9d12      	ldr	r5, [sp, #72]	; 0x48
1000370c:	e63f      	b.n	1000338e <_vsnprintf+0x5c6>
                        const long value = va_arg(va, long);
1000370e:	9b09      	ldr	r3, [sp, #36]	; 0x24
10003710:	001a      	movs	r2, r3
10003712:	ca08      	ldmia	r2!, {r3}
                        idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long) (value > 0 ? value : 0 - value),
10003714:	17d9      	asrs	r1, r3, #31
                        const long value = va_arg(va, long);
10003716:	9213      	str	r2, [sp, #76]	; 0x4c
                        idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long) (value > 0 ? value : 0 - value),
10003718:	185a      	adds	r2, r3, r1
1000371a:	404a      	eors	r2, r1
1000371c:	4692      	mov	sl, r2
1000371e:	0fda      	lsrs	r2, r3, #31
10003720:	9212      	str	r2, [sp, #72]	; 0x48
    if (!value) {
10003722:	2b00      	cmp	r3, #0
10003724:	d108      	bne.n	10003738 <_vsnprintf+0x970>
    if (!(flags & FLAGS_PRECISION) || value) {
10003726:	2380      	movs	r3, #128	; 0x80
        flags &= ~FLAGS_HASH;
10003728:	2210      	movs	r2, #16
    if (!(flags & FLAGS_PRECISION) || value) {
1000372a:	990b      	ldr	r1, [sp, #44]	; 0x2c
1000372c:	00db      	lsls	r3, r3, #3
1000372e:	400b      	ands	r3, r1
        flags &= ~FLAGS_HASH;
10003730:	4391      	bics	r1, r2
10003732:	910b      	str	r1, [sp, #44]	; 0x2c
    if (!(flags & FLAGS_PRECISION) || value) {
10003734:	2b00      	cmp	r3, #0
10003736:	d12b      	bne.n	10003790 <_vsnprintf+0x9c8>
10003738:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
1000373a:	2361      	movs	r3, #97	; 0x61
1000373c:	0692      	lsls	r2, r2, #26
1000373e:	d500      	bpl.n	10003742 <_vsnprintf+0x97a>
10003740:	2341      	movs	r3, #65	; 0x41
10003742:	aa0e      	add	r2, sp, #56	; 0x38
10003744:	271f      	movs	r7, #31
10003746:	4694      	mov	ip, r2
10003748:	b2db      	uxtb	r3, r3
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
1000374a:	3b0a      	subs	r3, #10
1000374c:	950d      	str	r5, [sp, #52]	; 0x34
1000374e:	4467      	add	r7, ip
10003750:	465d      	mov	r5, fp
10003752:	9309      	str	r3, [sp, #36]	; 0x24
10003754:	46a3      	mov	fp, r4
10003756:	4654      	mov	r4, sl
10003758:	46b2      	mov	sl, r6
1000375a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
1000375c:	e008      	b.n	10003770 <_vsnprintf+0x9a8>
1000375e:	3330      	adds	r3, #48	; 0x30
10003760:	b2db      	uxtb	r3, r3
10003762:	3501      	adds	r5, #1
10003764:	557b      	strb	r3, [r7, r5]
        } while (value && (len < PICO_PRINTF_NTOA_BUFFER_SIZE));
10003766:	42b4      	cmp	r4, r6
10003768:	d30e      	bcc.n	10003788 <_vsnprintf+0x9c0>
1000376a:	2d20      	cmp	r5, #32
1000376c:	d00c      	beq.n	10003788 <_vsnprintf+0x9c0>
            value /= base;
1000376e:	0004      	movs	r4, r0
            const char digit = (char) (value % base);
10003770:	0031      	movs	r1, r6
10003772:	0020      	movs	r0, r4
10003774:	f7fc fdfe 	bl	10000374 <__wrap___aeabi_uidiv>
10003778:	b2cb      	uxtb	r3, r1
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
1000377a:	2909      	cmp	r1, #9
1000377c:	d9ef      	bls.n	1000375e <_vsnprintf+0x996>
1000377e:	9a09      	ldr	r2, [sp, #36]	; 0x24
10003780:	4694      	mov	ip, r2
10003782:	4463      	add	r3, ip
10003784:	b2db      	uxtb	r3, r3
10003786:	e7ec      	b.n	10003762 <_vsnprintf+0x99a>
10003788:	4656      	mov	r6, sl
1000378a:	465c      	mov	r4, fp
1000378c:	46ab      	mov	fp, r5
1000378e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int) base, prec, width, flags);
10003790:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
10003792:	002a      	movs	r2, r5
10003794:	9306      	str	r3, [sp, #24]
10003796:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10003798:	0021      	movs	r1, r4
1000379a:	9305      	str	r3, [sp, #20]
1000379c:	4643      	mov	r3, r8
1000379e:	9304      	str	r3, [sp, #16]
100037a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
100037a2:	9808      	ldr	r0, [sp, #32]
100037a4:	9303      	str	r3, [sp, #12]
100037a6:	9b12      	ldr	r3, [sp, #72]	; 0x48
                format++;
100037a8:	3601      	adds	r6, #1
    return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int) base, prec, width, flags);
100037aa:	9302      	str	r3, [sp, #8]
100037ac:	465b      	mov	r3, fp
100037ae:	9301      	str	r3, [sp, #4]
100037b0:	ab16      	add	r3, sp, #88	; 0x58
100037b2:	9300      	str	r3, [sp, #0]
100037b4:	464b      	mov	r3, r9
100037b6:	f7fe fe35 	bl	10002424 <_ntoa_format>
                        const long value = va_arg(va, long);
100037ba:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int) base, prec, width, flags);
100037bc:	0005      	movs	r5, r0
                        const long value = va_arg(va, long);
100037be:	9309      	str	r3, [sp, #36]	; 0x24
                break;
100037c0:	f7ff fb27 	bl	10002e12 <_vsnprintf+0x4a>
                    base = 2U;
100037c4:	2302      	movs	r3, #2
100037c6:	930c      	str	r3, [sp, #48]	; 0x30
100037c8:	e71a      	b.n	10003600 <_vsnprintf+0x838>
                        idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision,
100037ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
100037cc:	cb04      	ldmia	r3!, {r2}
100037ce:	4692      	mov	sl, r2
100037d0:	9312      	str	r3, [sp, #72]	; 0x48
    if (!value) {
100037d2:	2a00      	cmp	r2, #0
100037d4:	d108      	bne.n	100037e8 <_vsnprintf+0xa20>
    if (!(flags & FLAGS_PRECISION) || value) {
100037d6:	2380      	movs	r3, #128	; 0x80
        flags &= ~FLAGS_HASH;
100037d8:	2210      	movs	r2, #16
    if (!(flags & FLAGS_PRECISION) || value) {
100037da:	990b      	ldr	r1, [sp, #44]	; 0x2c
100037dc:	00db      	lsls	r3, r3, #3
100037de:	400b      	ands	r3, r1
        flags &= ~FLAGS_HASH;
100037e0:	4391      	bics	r1, r2
100037e2:	910b      	str	r1, [sp, #44]	; 0x2c
    if (!(flags & FLAGS_PRECISION) || value) {
100037e4:	2b00      	cmp	r3, #0
100037e6:	d12b      	bne.n	10003840 <_vsnprintf+0xa78>
100037e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
100037ea:	2361      	movs	r3, #97	; 0x61
100037ec:	0692      	lsls	r2, r2, #26
100037ee:	d500      	bpl.n	100037f2 <_vsnprintf+0xa2a>
100037f0:	2341      	movs	r3, #65	; 0x41
100037f2:	aa0e      	add	r2, sp, #56	; 0x38
100037f4:	271f      	movs	r7, #31
100037f6:	4694      	mov	ip, r2
100037f8:	b2db      	uxtb	r3, r3
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
100037fa:	3b0a      	subs	r3, #10
100037fc:	950d      	str	r5, [sp, #52]	; 0x34
100037fe:	4467      	add	r7, ip
10003800:	465d      	mov	r5, fp
10003802:	9309      	str	r3, [sp, #36]	; 0x24
10003804:	46a3      	mov	fp, r4
10003806:	4654      	mov	r4, sl
10003808:	46b2      	mov	sl, r6
1000380a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
1000380c:	e008      	b.n	10003820 <_vsnprintf+0xa58>
1000380e:	3330      	adds	r3, #48	; 0x30
10003810:	b2db      	uxtb	r3, r3
10003812:	3501      	adds	r5, #1
10003814:	557b      	strb	r3, [r7, r5]
        } while (value && (len < PICO_PRINTF_NTOA_BUFFER_SIZE));
10003816:	42b4      	cmp	r4, r6
10003818:	d30e      	bcc.n	10003838 <_vsnprintf+0xa70>
1000381a:	2d20      	cmp	r5, #32
1000381c:	d00c      	beq.n	10003838 <_vsnprintf+0xa70>
            value /= base;
1000381e:	0004      	movs	r4, r0
            const char digit = (char) (value % base);
10003820:	0031      	movs	r1, r6
10003822:	0020      	movs	r0, r4
10003824:	f7fc fda6 	bl	10000374 <__wrap___aeabi_uidiv>
10003828:	b2cb      	uxtb	r3, r1
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
1000382a:	2909      	cmp	r1, #9
1000382c:	d9ef      	bls.n	1000380e <_vsnprintf+0xa46>
1000382e:	9a09      	ldr	r2, [sp, #36]	; 0x24
10003830:	4694      	mov	ip, r2
10003832:	4463      	add	r3, ip
10003834:	b2db      	uxtb	r3, r3
10003836:	e7ec      	b.n	10003812 <_vsnprintf+0xa4a>
10003838:	4656      	mov	r6, sl
1000383a:	465c      	mov	r4, fp
1000383c:	46ab      	mov	fp, r5
1000383e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int) base, prec, width, flags);
10003840:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
10003842:	002a      	movs	r2, r5
10003844:	9306      	str	r3, [sp, #24]
10003846:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10003848:	0021      	movs	r1, r4
1000384a:	9305      	str	r3, [sp, #20]
1000384c:	4643      	mov	r3, r8
1000384e:	9304      	str	r3, [sp, #16]
10003850:	9b0c      	ldr	r3, [sp, #48]	; 0x30
10003852:	9808      	ldr	r0, [sp, #32]
10003854:	9303      	str	r3, [sp, #12]
10003856:	2300      	movs	r3, #0
10003858:	9302      	str	r3, [sp, #8]
1000385a:	465b      	mov	r3, fp
1000385c:	9301      	str	r3, [sp, #4]
1000385e:	ab16      	add	r3, sp, #88	; 0x58
10003860:	9300      	str	r3, [sp, #0]
10003862:	464b      	mov	r3, r9
10003864:	f7fe fdde 	bl	10002424 <_ntoa_format>
                        idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision,
10003868:	9b12      	ldr	r3, [sp, #72]	; 0x48
    return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int) base, prec, width, flags);
1000386a:	0005      	movs	r5, r0
                        idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision,
1000386c:	9309      	str	r3, [sp, #36]	; 0x24
                format++;
1000386e:	3601      	adds	r6, #1
                break;
10003870:	f7ff facf 	bl	10002e12 <_vsnprintf+0x4a>
        } while (value && (len < PICO_PRINTF_NTOA_BUFFER_SIZE));
10003874:	42b4      	cmp	r4, r6
10003876:	d800      	bhi.n	1000387a <_vsnprintf+0xab2>
10003878:	e671      	b.n	1000355e <_vsnprintf+0x796>
1000387a:	9b14      	ldr	r3, [sp, #80]	; 0x50
1000387c:	4654      	mov	r4, sl
1000387e:	960e      	str	r6, [sp, #56]	; 0x38
10003880:	970f      	str	r7, [sp, #60]	; 0x3c
10003882:	46aa      	mov	sl, r5
10003884:	4698      	mov	r8, r3
10003886:	9e15      	ldr	r6, [sp, #84]	; 0x54
10003888:	9d13      	ldr	r5, [sp, #76]	; 0x4c
    return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int) base, prec, width, flags);
1000388a:	e68e      	b.n	100035aa <_vsnprintf+0x7e2>
        } while (value && (len < PICO_PRINTF_NTOA_BUFFER_SIZE));
1000388c:	42a6      	cmp	r6, r4
1000388e:	d800      	bhi.n	10003892 <_vsnprintf+0xaca>
10003890:	e6fb      	b.n	1000368a <_vsnprintf+0x8c2>
10003892:	9b13      	ldr	r3, [sp, #76]	; 0x4c
10003894:	4656      	mov	r6, sl
10003896:	4698      	mov	r8, r3
10003898:	46aa      	mov	sl, r5
1000389a:	465c      	mov	r4, fp
    return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int) base, prec, width, flags);
1000389c:	9d12      	ldr	r5, [sp, #72]	; 0x48
1000389e:	e576      	b.n	1000338e <_vsnprintf+0x5c6>
                                                                                          : va_arg(va, int);
100038a0:	c908      	ldmia	r1!, {r3}
                        idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int) (value > 0 ? value : 0 - value),
100038a2:	17d8      	asrs	r0, r3, #31
100038a4:	181a      	adds	r2, r3, r0
100038a6:	4042      	eors	r2, r0
                                                                                          : va_arg(va, int);
100038a8:	9109      	str	r1, [sp, #36]	; 0x24
100038aa:	f7ff fb8a 	bl	10002fc2 <_vsnprintf+0x1fa>
    for (s = str; *s && maxsize--; ++s);
100038ae:	2300      	movs	r3, #0
100038b0:	930b      	str	r3, [sp, #44]	; 0x2c
100038b2:	e450      	b.n	10003156 <_vsnprintf+0x38e>
                                                                          : va_arg(va, unsigned int);
100038b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
100038b6:	cb04      	ldmia	r3!, {r2}
100038b8:	4693      	mov	fp, r2
100038ba:	9309      	str	r3, [sp, #36]	; 0x24
100038bc:	e559      	b.n	10003372 <_vsnprintf+0x5aa>
                    while (l++ < width) {
100038be:	002f      	movs	r7, r5
100038c0:	e5bb      	b.n	1000343a <_vsnprintf+0x672>
                    while (l++ < width) {
100038c2:	930b      	str	r3, [sp, #44]	; 0x2c
100038c4:	e601      	b.n	100034ca <_vsnprintf+0x702>
                    base = 10U;
100038c6:	3b06      	subs	r3, #6
100038c8:	930c      	str	r3, [sp, #48]	; 0x30
100038ca:	e69a      	b.n	10003602 <_vsnprintf+0x83a>

100038cc <vfctprintf>:

int WRAPPER_FUNC(vsnprintf)(char *buffer, size_t count, const char *format, va_list va) {
    return _vsnprintf(_out_buffer, buffer, count, format, va);
}

int vfctprintf(void (*out)(char character, void *arg), void *arg, const char *format, va_list va) {
100038cc:	b500      	push	{lr}
100038ce:	b085      	sub	sp, #20
    const out_fct_wrap_type out_fct_wrap = {out, arg};
100038d0:	9103      	str	r1, [sp, #12]
    return _vsnprintf(_out_fct, (char *) (uintptr_t) &out_fct_wrap, (size_t) -1, format, va);
100038d2:	2101      	movs	r1, #1
    const out_fct_wrap_type out_fct_wrap = {out, arg};
100038d4:	9002      	str	r0, [sp, #8]
    return _vsnprintf(_out_fct, (char *) (uintptr_t) &out_fct_wrap, (size_t) -1, format, va);
100038d6:	9300      	str	r3, [sp, #0]
100038d8:	4803      	ldr	r0, [pc, #12]	; (100038e8 <vfctprintf+0x1c>)
100038da:	0013      	movs	r3, r2
100038dc:	424a      	negs	r2, r1
100038de:	a902      	add	r1, sp, #8
100038e0:	f7ff fa72 	bl	10002dc8 <_vsnprintf>
}
100038e4:	b005      	add	sp, #20
100038e6:	bd00      	pop	{pc}
100038e8:	10002601 	.word	0x10002601

100038ec <weak_raw_vprintf>:
    bool rc = weak_raw_vprintf(fmt, va);
    va_end(va);
    return rc;
}

bool weak_raw_vprintf(const char *fmt, va_list args) {
100038ec:	b510      	push	{r4, lr}
    if (lazy_vsnprintf) {
100038ee:	4a09      	ldr	r2, [pc, #36]	; (10003914 <weak_raw_vprintf+0x28>)
bool weak_raw_vprintf(const char *fmt, va_list args) {
100038f0:	0003      	movs	r3, r0
    if (lazy_vsnprintf) {
100038f2:	6814      	ldr	r4, [r2, #0]
bool weak_raw_vprintf(const char *fmt, va_list args) {
100038f4:	b084      	sub	sp, #16
    if (lazy_vsnprintf) {
100038f6:	2c00      	cmp	r4, #0
100038f8:	d008      	beq.n	1000390c <weak_raw_vprintf+0x20>
        char buffer[1];
        lazy_vsnprintf(_out_char, buffer, (size_t) -1, fmt, args);
100038fa:	2201      	movs	r2, #1
100038fc:	9100      	str	r1, [sp, #0]
100038fe:	4806      	ldr	r0, [pc, #24]	; (10003918 <weak_raw_vprintf+0x2c>)
10003900:	4252      	negs	r2, r2
10003902:	a903      	add	r1, sp, #12
10003904:	47a0      	blx	r4
        return true;
10003906:	2001      	movs	r0, #1
    } else {
        puts(fmt);
        return false;
    }
}
10003908:	b004      	add	sp, #16
1000390a:	bd10      	pop	{r4, pc}
        puts(fmt);
1000390c:	f000 f9cc 	bl	10003ca8 <__wrap_puts>
        return false;
10003910:	2000      	movs	r0, #0
10003912:	e7f9      	b.n	10003908 <weak_raw_vprintf+0x1c>
10003914:	200172e4 	.word	0x200172e4
10003918:	100025f1 	.word	0x100025f1

1000391c <runtime_init>:
                   | (0x7 << 1) // size 2^(7 + 1) = 256
                   | (subregion_select << 8)
                   | 0x10000000; // XN = disable instruction fetch; no other bits means no permissions
}

void runtime_init(void) {
1000391c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
1000391e:	4a2b      	ldr	r2, [pc, #172]	; (100039cc <runtime_init+0xb0>)
10003920:	4b2b      	ldr	r3, [pc, #172]	; (100039d0 <runtime_init+0xb4>)
10003922:	492c      	ldr	r1, [pc, #176]	; (100039d4 <runtime_init+0xb8>)
10003924:	601a      	str	r2, [r3, #0]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10003926:	4a2c      	ldr	r2, [pc, #176]	; (100039d8 <runtime_init+0xbc>)
10003928:	4b2c      	ldr	r3, [pc, #176]	; (100039dc <runtime_init+0xc0>)
1000392a:	601a      	str	r2, [r3, #0]
1000392c:	0014      	movs	r4, r2
1000392e:	688b      	ldr	r3, [r1, #8]
10003930:	439c      	bics	r4, r3
10003932:	d1fb      	bne.n	1000392c <runtime_init+0x10>
    extern void (*__preinit_array_end)();

    // Call each function in the list.
    // We have to take the address of the symbols, as __preinit_array_start *is*
    // the first function pointer, not the address of it.
    for (void (**p)() = &__preinit_array_start; p < &__preinit_array_end; ++p) {
10003934:	4d2a      	ldr	r5, [pc, #168]	; (100039e0 <runtime_init+0xc4>)
10003936:	4e2b      	ldr	r6, [pc, #172]	; (100039e4 <runtime_init+0xc8>)
10003938:	42b5      	cmp	r5, r6
1000393a:	d208      	bcs.n	1000394e <runtime_init+0x32>
1000393c:	3e01      	subs	r6, #1
1000393e:	1b76      	subs	r6, r6, r5
10003940:	08b6      	lsrs	r6, r6, #2
        (*p)();
10003942:	cd08      	ldmia	r5!, {r3}
10003944:	4798      	blx	r3
    for (void (**p)() = &__preinit_array_start; p < &__preinit_array_end; ++p) {
10003946:	0023      	movs	r3, r4
10003948:	3401      	adds	r4, #1
1000394a:	42b3      	cmp	r3, r6
1000394c:	d1f9      	bne.n	10003942 <runtime_init+0x26>
    }

    // After calling preinit we have enough runtime to do the exciting maths
    // in clocks_init
    clocks_init();
1000394e:	f7fd fd4b 	bl	100013e8 <clocks_init>
10003952:	4a25      	ldr	r2, [pc, #148]	; (100039e8 <runtime_init+0xcc>)
10003954:	4b21      	ldr	r3, [pc, #132]	; (100039dc <runtime_init+0xc0>)
10003956:	601a      	str	r2, [r3, #0]
10003958:	4a1e      	ldr	r2, [pc, #120]	; (100039d4 <runtime_init+0xb8>)
1000395a:	6893      	ldr	r3, [r2, #8]
1000395c:	43db      	mvns	r3, r3
1000395e:	01db      	lsls	r3, r3, #7
10003960:	09dc      	lsrs	r4, r3, #7
10003962:	2b00      	cmp	r3, #0
10003964:	d1f9      	bne.n	1000395a <runtime_init+0x3e>
    unreset_block_wait(RESETS_RESET_BITS);

#if !PICO_IE_26_29_UNCHANGED_ON_RESET
    // after resetting BANK0 we should disable IE on 26-29
    hw_clear_alias(padsbank0_hw)->io[26] = hw_clear_alias(padsbank0_hw)->io[27] =
            hw_clear_alias(padsbank0_hw)->io[28] = hw_clear_alias(padsbank0_hw)->io[29] = PADS_BANK0_GPIO0_IE_BITS;
10003966:	2240      	movs	r2, #64	; 0x40
10003968:	4b20      	ldr	r3, [pc, #128]	; (100039ec <runtime_init+0xd0>)

    extern mutex_t __mutex_array_start;
    extern mutex_t __mutex_array_end;

    // the first function pointer, not the address of it.
    for (mutex_t *m = &__mutex_array_start; m < &__mutex_array_end; m++) {
1000396a:	4d21      	ldr	r5, [pc, #132]	; (100039f0 <runtime_init+0xd4>)
1000396c:	4f21      	ldr	r7, [pc, #132]	; (100039f4 <runtime_init+0xd8>)
            hw_clear_alias(padsbank0_hw)->io[28] = hw_clear_alias(padsbank0_hw)->io[29] = PADS_BANK0_GPIO0_IE_BITS;
1000396e:	679a      	str	r2, [r3, #120]	; 0x78
10003970:	675a      	str	r2, [r3, #116]	; 0x74
    hw_clear_alias(padsbank0_hw)->io[26] = hw_clear_alias(padsbank0_hw)->io[27] =
10003972:	671a      	str	r2, [r3, #112]	; 0x70
10003974:	66da      	str	r2, [r3, #108]	; 0x6c
    for (mutex_t *m = &__mutex_array_start; m < &__mutex_array_end; m++) {
10003976:	42bd      	cmp	r5, r7
10003978:	d20b      	bcs.n	10003992 <runtime_init+0x76>
1000397a:	2600      	movs	r6, #0
1000397c:	3f01      	subs	r7, #1
1000397e:	1b7f      	subs	r7, r7, r5
10003980:	08ff      	lsrs	r7, r7, #3
        mutex_init(m);
10003982:	0028      	movs	r0, r5
10003984:	f7fe f9c2 	bl	10001d0c <mutex_init>
    for (mutex_t *m = &__mutex_array_start; m < &__mutex_array_end; m++) {
10003988:	3508      	adds	r5, #8
1000398a:	0033      	movs	r3, r6
1000398c:	3601      	adds	r6, #1
1000398e:	42bb      	cmp	r3, r7
10003990:	d1f7      	bne.n	10003982 <runtime_init+0x66>
    }

#if !(PICO_NO_RAM_VECTOR_TABLE || PICO_NO_FLASH)
    __builtin_memcpy(ram_vector_table, (uint32_t *) scb_hw->vtor, sizeof(ram_vector_table));
10003992:	4e19      	ldr	r6, [pc, #100]	; (100039f8 <runtime_init+0xdc>)
10003994:	4d19      	ldr	r5, [pc, #100]	; (100039fc <runtime_init+0xe0>)
10003996:	22c0      	movs	r2, #192	; 0xc0
10003998:	68a9      	ldr	r1, [r5, #8]
1000399a:	0030      	movs	r0, r6
1000399c:	f7fd fbca 	bl	10001134 <__wrap___aeabi_memcpy>
    scb_hw->vtor = (intptr_t) ram_vector_table;
100039a0:	60ae      	str	r6, [r5, #8]
    // install core0 stack guard
    extern char __StackBottom;
    runtime_install_stack_guard(&__StackBottom);
#endif

    spin_locks_reset();
100039a2:	f000 fc21 	bl	100041e8 <spin_locks_reset>
    irq_init_priorities();
100039a6:	f7fe f931 	bl	10001c0c <irq_init_priorities>
    alarm_pool_init_default();
100039aa:	f000 fe67 	bl	1000467c <alarm_pool_init_default>
    extern void (*__init_array_end)();

    // Call each function in the list.
    // We have to take the address of the symbols, as __init_array_start *is*
    // the first function pointer, not the address of it.
    for (void (**p)() = &__init_array_start; p < &__init_array_end; ++p) {
100039ae:	4d14      	ldr	r5, [pc, #80]	; (10003a00 <runtime_init+0xe4>)
100039b0:	4e14      	ldr	r6, [pc, #80]	; (10003a04 <runtime_init+0xe8>)
100039b2:	42b5      	cmp	r5, r6
100039b4:	d208      	bcs.n	100039c8 <runtime_init+0xac>
100039b6:	3e01      	subs	r6, #1
100039b8:	1b76      	subs	r6, r6, r5
100039ba:	08b6      	lsrs	r6, r6, #2
        (*p)();
100039bc:	cd08      	ldmia	r5!, {r3}
100039be:	4798      	blx	r3
    for (void (**p)() = &__init_array_start; p < &__init_array_end; ++p) {
100039c0:	0023      	movs	r3, r4
100039c2:	3401      	adds	r4, #1
100039c4:	429e      	cmp	r6, r3
100039c6:	d1f9      	bne.n	100039bc <runtime_init+0xa0>
    }

}
100039c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100039ca:	46c0      	nop			; (mov r8, r8)
100039cc:	ffffcdbf 	.word	0xffffcdbf
100039d0:	4000e000 	.word	0x4000e000
100039d4:	4000c000 	.word	0x4000c000
100039d8:	003c7ffe 	.word	0x003c7ffe
100039dc:	4000f000 	.word	0x4000f000
100039e0:	20008e80 	.word	0x20008e80
100039e4:	20008e90 	.word	0x20008e90
100039e8:	01ffffff 	.word	0x01ffffff
100039ec:	4001f000 	.word	0x4001f000
100039f0:	20008e78 	.word	0x20008e78
100039f4:	20008e80 	.word	0x20008e80
100039f8:	20000000 	.word	0x20000000
100039fc:	e000ed00 	.word	0xe000ed00
10003a00:	20008e90 	.word	0x20008e90
10003a04:	20008e9c 	.word	0x20008e9c

10003a08 <_sbrk>:
void *_sbrk(int incr) {
    extern char end; /* Set by linker.  */
    static char *heap_end;
    char *prev_heap_end;

    if (heap_end == 0)
10003a08:	4a09      	ldr	r2, [pc, #36]	; (10003a30 <_sbrk+0x28>)
void *_sbrk(int incr) {
10003a0a:	0003      	movs	r3, r0
    if (heap_end == 0)
10003a0c:	6810      	ldr	r0, [r2, #0]
10003a0e:	2800      	cmp	r0, #0
10003a10:	d005      	beq.n	10003a1e <_sbrk+0x16>
        heap_end = &end;

    prev_heap_end = heap_end;
    char *next_heap_end = heap_end + incr;

    if (__builtin_expect(next_heap_end >= (&__StackLimit), false)) {
10003a12:	4908      	ldr	r1, [pc, #32]	; (10003a34 <_sbrk+0x2c>)
    char *next_heap_end = heap_end + incr;
10003a14:	18c3      	adds	r3, r0, r3
    if (__builtin_expect(next_heap_end >= (&__StackLimit), false)) {
10003a16:	428b      	cmp	r3, r1
10003a18:	d207      	bcs.n	10003a2a <_sbrk+0x22>
#else
        return (char *) -1;
#endif
    }

    heap_end = next_heap_end;
10003a1a:	6013      	str	r3, [r2, #0]
    return (void *) prev_heap_end;
}
10003a1c:	4770      	bx	lr
        heap_end = &end;
10003a1e:	4806      	ldr	r0, [pc, #24]	; (10003a38 <_sbrk+0x30>)
    if (__builtin_expect(next_heap_end >= (&__StackLimit), false)) {
10003a20:	4904      	ldr	r1, [pc, #16]	; (10003a34 <_sbrk+0x2c>)
    char *next_heap_end = heap_end + incr;
10003a22:	18c3      	adds	r3, r0, r3
        heap_end = &end;
10003a24:	6010      	str	r0, [r2, #0]
    if (__builtin_expect(next_heap_end >= (&__StackLimit), false)) {
10003a26:	428b      	cmp	r3, r1
10003a28:	d3f7      	bcc.n	10003a1a <_sbrk+0x12>
        return (char *) -1;
10003a2a:	2001      	movs	r0, #1
10003a2c:	4240      	negs	r0, r0
10003a2e:	e7f5      	b.n	10003a1c <_sbrk+0x14>
10003a30:	20016c60 	.word	0x20016c60
10003a34:	20040000 	.word	0x20040000
10003a38:	20017338 	.word	0x20017338

10003a3c <exit>:
    __asm__("bkpt #0");
10003a3c:	be00      	bkpt	0x0000
10003a3e:	e7fd      	b.n	10003a3c <exit>

10003a40 <panic>:
//  right now, print mutex may be uninitialised (in which case it deadlocks - although after printing "PANIC")
//  more importantly there may be no stdout/UART initialized yet
// todo we may want to think about where we print panic messages to; writing to USB appears to work
//  though it doesn't seem like we can expect it to... fine for now
//
void __attribute__((noreturn)) __printflike(1, 0) panic(const char *fmt, ...) {
10003a40:	b40f      	push	{r0, r1, r2, r3}
10003a42:	b500      	push	{lr}
    puts("\n*** PANIC ***\n");
10003a44:	4808      	ldr	r0, [pc, #32]	; (10003a68 <panic+0x28>)
void __attribute__((noreturn)) __printflike(1, 0) panic(const char *fmt, ...) {
10003a46:	b083      	sub	sp, #12
    puts("\n*** PANIC ***\n");
10003a48:	f000 f92e 	bl	10003ca8 <__wrap_puts>
    if (fmt) {
10003a4c:	9b04      	ldr	r3, [sp, #16]
10003a4e:	2b00      	cmp	r3, #0
10003a50:	d007      	beq.n	10003a62 <panic+0x22>
#if PICO_PRINTF_NONE
        puts(fmt);
#else
        va_list args;
        va_start(args, fmt);
10003a52:	a905      	add	r1, sp, #20
#if PICO_PRINTF_ALWAYS_INCLUDED
        vprintf(fmt, args);
#else
        weak_raw_vprintf(fmt, args);
10003a54:	0018      	movs	r0, r3
        va_start(args, fmt);
10003a56:	9101      	str	r1, [sp, #4]
        weak_raw_vprintf(fmt, args);
10003a58:	f7ff ff48 	bl	100038ec <weak_raw_vprintf>
#endif
        va_end(args);
        puts("\n");
10003a5c:	4803      	ldr	r0, [pc, #12]	; (10003a6c <panic+0x2c>)
10003a5e:	f000 f923 	bl	10003ca8 <__wrap_puts>
10003a62:	be00      	bkpt	0x0000
10003a64:	e7fd      	b.n	10003a62 <panic+0x22>
10003a66:	46c0      	nop			; (mov r8, r8)
10003a68:	1000b2d0 	.word	0x1000b2d0
10003a6c:	1000b624 	.word	0x1000b624

10003a70 <hard_assertion_failure>:
    }

    _exit(1);
}

void hard_assertion_failure(void) {
10003a70:	b510      	push	{r4, lr}
    panic("Hard assert");
10003a72:	4801      	ldr	r0, [pc, #4]	; (10003a78 <hard_assertion_failure+0x8>)
10003a74:	f7ff ffe4 	bl	10003a40 <panic>
10003a78:	1000b2e0 	.word	0x1000b2e0

10003a7c <stdio_out_chars_crlf.part.0>:
}
static void print_serialize_end() {
}
#endif

static void stdio_out_chars_crlf(stdio_driver_t *driver, const char *s, int len) {
10003a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
10003a7e:	4646      	mov	r6, r8
10003a80:	464f      	mov	r7, r9
10003a82:	46d6      	mov	lr, sl
10003a84:	4680      	mov	r8, r0
10003a86:	b5c0      	push	{r6, r7, lr}
10003a88:	000e      	movs	r6, r1
10003a8a:	1e17      	subs	r7, r2, #0
        driver->out_chars(s, len);
        return;
    }
    int first_of_chunk = 0;
    static const char crlf_str[] = {'\r', '\n'};
    for (int i = 0; i < len; i++) {
10003a8c:	dd3f      	ble.n	10003b0e <stdio_out_chars_crlf.part.0+0x92>
        bool prev_char_was_cr = i > 0 ? s[i - 1] == '\r' : driver->last_ended_with_cr;
10003a8e:	1e4b      	subs	r3, r1, #1
10003a90:	4699      	mov	r9, r3
        if (s[i] == '\n' && !prev_char_was_cr) {
            if (i > first_of_chunk) {
                driver->out_chars(&s[first_of_chunk], i - first_of_chunk);
            }
            driver->out_chars(crlf_str, 2);
10003a92:	4b21      	ldr	r3, [pc, #132]	; (10003b18 <stdio_out_chars_crlf.part.0+0x9c>)
    for (int i = 0; i < len; i++) {
10003a94:	2501      	movs	r5, #1
10003a96:	2400      	movs	r4, #0
    int first_of_chunk = 0;
10003a98:	2000      	movs	r0, #0
            driver->out_chars(crlf_str, 2);
10003a9a:	469a      	mov	sl, r3
10003a9c:	e00d      	b.n	10003aba <stdio_out_chars_crlf.part.0+0x3e>
        bool prev_char_was_cr = i > 0 ? s[i - 1] == '\r' : driver->last_ended_with_cr;
10003a9e:	464b      	mov	r3, r9
10003aa0:	5d1b      	ldrb	r3, [r3, r4]
10003aa2:	3b0d      	subs	r3, #13
10003aa4:	425a      	negs	r2, r3
10003aa6:	4153      	adcs	r3, r2
        if (s[i] == '\n' && !prev_char_was_cr) {
10003aa8:	5d32      	ldrb	r2, [r6, r4]
        bool prev_char_was_cr = i > 0 ? s[i - 1] == '\r' : driver->last_ended_with_cr;
10003aaa:	b2db      	uxtb	r3, r3
        if (s[i] == '\n' && !prev_char_was_cr) {
10003aac:	2a0a      	cmp	r2, #10
10003aae:	d00b      	beq.n	10003ac8 <stdio_out_chars_crlf.part.0+0x4c>
            first_of_chunk = i + 1;
10003ab0:	002b      	movs	r3, r5
    for (int i = 0; i < len; i++) {
10003ab2:	3401      	adds	r4, #1
10003ab4:	3501      	adds	r5, #1
10003ab6:	429f      	cmp	r7, r3
10003ab8:	dd1a      	ble.n	10003af0 <stdio_out_chars_crlf.part.0+0x74>
        bool prev_char_was_cr = i > 0 ? s[i - 1] == '\r' : driver->last_ended_with_cr;
10003aba:	2c00      	cmp	r4, #0
10003abc:	d1ef      	bne.n	10003a9e <stdio_out_chars_crlf.part.0+0x22>
10003abe:	4643      	mov	r3, r8
        if (s[i] == '\n' && !prev_char_was_cr) {
10003ac0:	5d32      	ldrb	r2, [r6, r4]
        bool prev_char_was_cr = i > 0 ? s[i - 1] == '\r' : driver->last_ended_with_cr;
10003ac2:	7c1b      	ldrb	r3, [r3, #16]
        if (s[i] == '\n' && !prev_char_was_cr) {
10003ac4:	2a0a      	cmp	r2, #10
10003ac6:	d1f3      	bne.n	10003ab0 <stdio_out_chars_crlf.part.0+0x34>
10003ac8:	2b00      	cmp	r3, #0
10003aca:	d1f1      	bne.n	10003ab0 <stdio_out_chars_crlf.part.0+0x34>
            if (i > first_of_chunk) {
10003acc:	42a0      	cmp	r0, r4
10003ace:	da04      	bge.n	10003ada <stdio_out_chars_crlf.part.0+0x5e>
                driver->out_chars(&s[first_of_chunk], i - first_of_chunk);
10003ad0:	4643      	mov	r3, r8
10003ad2:	1a21      	subs	r1, r4, r0
10003ad4:	681b      	ldr	r3, [r3, #0]
10003ad6:	1830      	adds	r0, r6, r0
10003ad8:	4798      	blx	r3
            driver->out_chars(crlf_str, 2);
10003ada:	4643      	mov	r3, r8
10003adc:	4650      	mov	r0, sl
10003ade:	681b      	ldr	r3, [r3, #0]
10003ae0:	2102      	movs	r1, #2
10003ae2:	4798      	blx	r3
    for (int i = 0; i < len; i++) {
10003ae4:	3401      	adds	r4, #1
            first_of_chunk = i + 1;
10003ae6:	0028      	movs	r0, r5
10003ae8:	002b      	movs	r3, r5
    for (int i = 0; i < len; i++) {
10003aea:	3501      	adds	r5, #1
10003aec:	429f      	cmp	r7, r3
10003aee:	dce4      	bgt.n	10003aba <stdio_out_chars_crlf.part.0+0x3e>
        }
    }
    if (first_of_chunk < len) {
10003af0:	4287      	cmp	r7, r0
10003af2:	dd04      	ble.n	10003afe <stdio_out_chars_crlf.part.0+0x82>
        driver->out_chars(&s[first_of_chunk], len - first_of_chunk);
10003af4:	4643      	mov	r3, r8
10003af6:	1a39      	subs	r1, r7, r0
10003af8:	681b      	ldr	r3, [r3, #0]
10003afa:	1830      	adds	r0, r6, r0
10003afc:	4798      	blx	r3
    }
    if (len > 0) {
        driver->last_ended_with_cr = s[len - 1] == '\r';
10003afe:	19f6      	adds	r6, r6, r7
10003b00:	3e01      	subs	r6, #1
10003b02:	7833      	ldrb	r3, [r6, #0]
10003b04:	3b0d      	subs	r3, #13
10003b06:	425a      	negs	r2, r3
10003b08:	4153      	adcs	r3, r2
10003b0a:	4642      	mov	r2, r8
10003b0c:	7413      	strb	r3, [r2, #16]
    }
#else
    driver->out_chars(s, len);
#endif
}
10003b0e:	bce0      	pop	{r5, r6, r7}
10003b10:	46ba      	mov	sl, r7
10003b12:	46b1      	mov	r9, r6
10003b14:	46a8      	mov	r8, r5
10003b16:	bdf0      	pop	{r4, r5, r6, r7, pc}
10003b18:	1000b2ec 	.word	0x1000b2ec

10003b1c <stdio_buffered_printer>:
        }
        buffer->used = 0;
    }
}

static void stdio_buffered_printer(char c, void *arg) {
10003b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10003b1e:	46ce      	mov	lr, r9
10003b20:	4647      	mov	r7, r8
10003b22:	000d      	movs	r5, r1
    stdio_stack_buffer_t *buffer = (stdio_stack_buffer_t *)arg;
    if (buffer->used == PICO_STDIO_STACK_BUFFER_SIZE) {
10003b24:	6809      	ldr	r1, [r1, #0]
static void stdio_buffered_printer(char c, void *arg) {
10003b26:	0006      	movs	r6, r0
10003b28:	b580      	push	{r7, lr}
    if (buffer->used == PICO_STDIO_STACK_BUFFER_SIZE) {
10003b2a:	2980      	cmp	r1, #128	; 0x80
10003b2c:	d007      	beq.n	10003b3e <stdio_buffered_printer+0x22>
        stdio_stack_buffer_flush(buffer);
    }
    buffer->buf[buffer->used++] = c;
10003b2e:	1c4b      	adds	r3, r1, #1
10003b30:	602b      	str	r3, [r5, #0]
10003b32:	186d      	adds	r5, r5, r1
10003b34:	712e      	strb	r6, [r5, #4]
}
10003b36:	bcc0      	pop	{r6, r7}
10003b38:	46b9      	mov	r9, r7
10003b3a:	46b0      	mov	r8, r6
10003b3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (stdio_driver_t *d = drivers; d; d = d->next) {
10003b3e:	4b13      	ldr	r3, [pc, #76]	; (10003b8c <stdio_buffered_printer+0x70>)
10003b40:	681c      	ldr	r4, [r3, #0]
10003b42:	2c00      	cmp	r4, #0
10003b44:	d01b      	beq.n	10003b7e <stdio_buffered_printer+0x62>
            if (filter && filter != d) continue;
10003b46:	4b12      	ldr	r3, [pc, #72]	; (10003b90 <stdio_buffered_printer+0x74>)
10003b48:	4698      	mov	r8, r3
            stdio_out_chars_crlf(d, buffer->buf, buffer->used);
10003b4a:	1d2b      	adds	r3, r5, #4
10003b4c:	4699      	mov	r9, r3
10003b4e:	e002      	b.n	10003b56 <stdio_buffered_printer+0x3a>
        for (stdio_driver_t *d = drivers; d; d = d->next) {
10003b50:	68e4      	ldr	r4, [r4, #12]
10003b52:	2c00      	cmp	r4, #0
10003b54:	d013      	beq.n	10003b7e <stdio_buffered_printer+0x62>
            if (!d->out_chars) continue;
10003b56:	6827      	ldr	r7, [r4, #0]
10003b58:	2f00      	cmp	r7, #0
10003b5a:	d0f9      	beq.n	10003b50 <stdio_buffered_printer+0x34>
            if (filter && filter != d) continue;
10003b5c:	4643      	mov	r3, r8
10003b5e:	681b      	ldr	r3, [r3, #0]
10003b60:	2b00      	cmp	r3, #0
10003b62:	d001      	beq.n	10003b68 <stdio_buffered_printer+0x4c>
10003b64:	429c      	cmp	r4, r3
10003b66:	d1f3      	bne.n	10003b50 <stdio_buffered_printer+0x34>
    if (!driver->crlf_enabled) {
10003b68:	7c63      	ldrb	r3, [r4, #17]
            stdio_out_chars_crlf(d, buffer->buf, buffer->used);
10003b6a:	682a      	ldr	r2, [r5, #0]
    if (!driver->crlf_enabled) {
10003b6c:	2b00      	cmp	r3, #0
10003b6e:	d009      	beq.n	10003b84 <stdio_buffered_printer+0x68>
10003b70:	0020      	movs	r0, r4
10003b72:	4649      	mov	r1, r9
10003b74:	f7ff ff82 	bl	10003a7c <stdio_out_chars_crlf.part.0>
        for (stdio_driver_t *d = drivers; d; d = d->next) {
10003b78:	68e4      	ldr	r4, [r4, #12]
10003b7a:	2c00      	cmp	r4, #0
10003b7c:	d1eb      	bne.n	10003b56 <stdio_buffered_printer+0x3a>
}
10003b7e:	2301      	movs	r3, #1
10003b80:	2100      	movs	r1, #0
10003b82:	e7d5      	b.n	10003b30 <stdio_buffered_printer+0x14>
        driver->out_chars(s, len);
10003b84:	0011      	movs	r1, r2
10003b86:	4648      	mov	r0, r9
10003b88:	47b8      	blx	r7
        return;
10003b8a:	e7e1      	b.n	10003b50 <stdio_buffered_printer+0x34>
10003b8c:	20016c54 	.word	0x20016c54
10003b90:	20016c5c 	.word	0x20016c5c

10003b94 <stdio_put_string.isra.0>:
static bool stdio_put_string(const char *s, int len, bool newline) {
10003b94:	b5f0      	push	{r4, r5, r6, r7, lr}
10003b96:	4657      	mov	r7, sl
10003b98:	4645      	mov	r5, r8
10003b9a:	46de      	mov	lr, fp
10003b9c:	464e      	mov	r6, r9
 *  \ingroup hardware_sync
 *
 * \return The core number the call was made from
 */
static inline uint get_core_num() {
    return (*(uint32_t *) (SIO_BASE + SIO_CPUID_OFFSET));
10003b9e:	23d0      	movs	r3, #208	; 0xd0
10003ba0:	b5e0      	push	{r5, r6, r7, lr}
10003ba2:	061b      	lsls	r3, r3, #24
10003ba4:	681c      	ldr	r4, [r3, #0]
    if (!mutex_try_enter(&print_mutex, &owner)) {
10003ba6:	4b35      	ldr	r3, [pc, #212]	; (10003c7c <stdio_put_string.isra.0+0xe8>)
static bool stdio_put_string(const char *s, int len, bool newline) {
10003ba8:	b083      	sub	sp, #12
10003baa:	0007      	movs	r7, r0
10003bac:	000d      	movs	r5, r1
    if (!mutex_try_enter(&print_mutex, &owner)) {
10003bae:	0018      	movs	r0, r3
10003bb0:	a901      	add	r1, sp, #4
static bool stdio_put_string(const char *s, int len, bool newline) {
10003bb2:	4690      	mov	r8, r2
    if (!mutex_try_enter(&print_mutex, &owner)) {
10003bb4:	469a      	mov	sl, r3
10003bb6:	f007 f9ff 	bl	1000afb8 <__mutex_try_enter_veneer>
10003bba:	4681      	mov	r9, r0
10003bbc:	2800      	cmp	r0, #0
10003bbe:	d107      	bne.n	10003bd0 <stdio_put_string.isra.0+0x3c>
        if (owner == core_num) {
10003bc0:	9b01      	ldr	r3, [sp, #4]
10003bc2:	429c      	cmp	r4, r3
10003bc4:	d004      	beq.n	10003bd0 <stdio_put_string.isra.0+0x3c>
        mutex_enter_blocking(&print_mutex);
10003bc6:	4650      	mov	r0, sl
10003bc8:	f007 fa0e 	bl	1000afe8 <__mutex_enter_blocking_veneer>
    return true;
10003bcc:	2301      	movs	r3, #1
10003bce:	4699      	mov	r9, r3
    if (len == -1) len = strlen(s);
10003bd0:	1c6b      	adds	r3, r5, #1
10003bd2:	d103      	bne.n	10003bdc <stdio_put_string.isra.0+0x48>
10003bd4:	0038      	movs	r0, r7
10003bd6:	f007 f873 	bl	1000acc0 <strlen>
10003bda:	0005      	movs	r5, r0
    for (stdio_driver_t *driver = drivers; driver; driver = driver->next) {
10003bdc:	4b28      	ldr	r3, [pc, #160]	; (10003c80 <stdio_put_string.isra.0+0xec>)
10003bde:	681c      	ldr	r4, [r3, #0]
10003be0:	2c00      	cmp	r4, #0
10003be2:	d02f      	beq.n	10003c44 <stdio_put_string.isra.0+0xb0>
            const char c = '\n';
10003be4:	230a      	movs	r3, #10
        if (filter && filter != driver) continue;
10003be6:	4e27      	ldr	r6, [pc, #156]	; (10003c84 <stdio_put_string.isra.0+0xf0>)
            const char c = '\n';
10003be8:	469b      	mov	fp, r3
10003bea:	e002      	b.n	10003bf2 <stdio_put_string.isra.0+0x5e>
    for (stdio_driver_t *driver = drivers; driver; driver = driver->next) {
10003bec:	68e4      	ldr	r4, [r4, #12]
10003bee:	2c00      	cmp	r4, #0
10003bf0:	d028      	beq.n	10003c44 <stdio_put_string.isra.0+0xb0>
        if (!driver->out_chars) continue;
10003bf2:	6822      	ldr	r2, [r4, #0]
10003bf4:	2a00      	cmp	r2, #0
10003bf6:	d0f9      	beq.n	10003bec <stdio_put_string.isra.0+0x58>
        if (filter && filter != driver) continue;
10003bf8:	6833      	ldr	r3, [r6, #0]
10003bfa:	2b00      	cmp	r3, #0
10003bfc:	d001      	beq.n	10003c02 <stdio_put_string.isra.0+0x6e>
10003bfe:	42a3      	cmp	r3, r4
10003c00:	d1f4      	bne.n	10003bec <stdio_put_string.isra.0+0x58>
    if (!driver->crlf_enabled) {
10003c02:	7c63      	ldrb	r3, [r4, #17]
10003c04:	2b00      	cmp	r3, #0
10003c06:	d027      	beq.n	10003c58 <stdio_put_string.isra.0+0xc4>
10003c08:	002a      	movs	r2, r5
10003c0a:	0039      	movs	r1, r7
10003c0c:	0020      	movs	r0, r4
10003c0e:	f7ff ff35 	bl	10003a7c <stdio_out_chars_crlf.part.0>
        if (newline) {
10003c12:	4643      	mov	r3, r8
10003c14:	2b00      	cmp	r3, #0
10003c16:	d0e9      	beq.n	10003bec <stdio_put_string.isra.0+0x58>
            const char c = '\n';
10003c18:	466b      	mov	r3, sp
10003c1a:	465a      	mov	r2, fp
10003c1c:	711a      	strb	r2, [r3, #4]
    if (!driver->crlf_enabled) {
10003c1e:	7c63      	ldrb	r3, [r4, #17]
10003c20:	2b00      	cmp	r3, #0
10003c22:	d01d      	beq.n	10003c60 <stdio_put_string.isra.0+0xcc>
        if (s[i] == '\n' && !prev_char_was_cr) {
10003c24:	7c23      	ldrb	r3, [r4, #16]
10003c26:	2b00      	cmp	r3, #0
10003c28:	d023      	beq.n	10003c72 <stdio_put_string.isra.0+0xde>
        driver->out_chars(&s[first_of_chunk], len - first_of_chunk);
10003c2a:	2101      	movs	r1, #1
10003c2c:	6823      	ldr	r3, [r4, #0]
10003c2e:	a801      	add	r0, sp, #4
10003c30:	4798      	blx	r3
        driver->last_ended_with_cr = s[len - 1] == '\r';
10003c32:	466b      	mov	r3, sp
10003c34:	791b      	ldrb	r3, [r3, #4]
10003c36:	3b0d      	subs	r3, #13
10003c38:	425a      	negs	r2, r3
10003c3a:	4153      	adcs	r3, r2
10003c3c:	7423      	strb	r3, [r4, #16]
    for (stdio_driver_t *driver = drivers; driver; driver = driver->next) {
10003c3e:	68e4      	ldr	r4, [r4, #12]
10003c40:	2c00      	cmp	r4, #0
10003c42:	d1d6      	bne.n	10003bf2 <stdio_put_string.isra.0+0x5e>
    if (serialzed) {
10003c44:	464b      	mov	r3, r9
10003c46:	2b00      	cmp	r3, #0
10003c48:	d10f      	bne.n	10003c6a <stdio_put_string.isra.0+0xd6>
}
10003c4a:	b003      	add	sp, #12
10003c4c:	bcf0      	pop	{r4, r5, r6, r7}
10003c4e:	46bb      	mov	fp, r7
10003c50:	46b2      	mov	sl, r6
10003c52:	46a9      	mov	r9, r5
10003c54:	46a0      	mov	r8, r4
10003c56:	bdf0      	pop	{r4, r5, r6, r7, pc}
        driver->out_chars(s, len);
10003c58:	0029      	movs	r1, r5
10003c5a:	0038      	movs	r0, r7
10003c5c:	4790      	blx	r2
        return;
10003c5e:	e7d8      	b.n	10003c12 <stdio_put_string.isra.0+0x7e>
        driver->out_chars(s, len);
10003c60:	2101      	movs	r1, #1
10003c62:	6823      	ldr	r3, [r4, #0]
10003c64:	a801      	add	r0, sp, #4
10003c66:	4798      	blx	r3
        return;
10003c68:	e7c0      	b.n	10003bec <stdio_put_string.isra.0+0x58>
    mutex_exit(&print_mutex);
10003c6a:	4650      	mov	r0, sl
10003c6c:	f007 f98c 	bl	1000af88 <__mutex_exit_veneer>
    return len;
10003c70:	e7eb      	b.n	10003c4a <stdio_put_string.isra.0+0xb6>
            driver->out_chars(crlf_str, 2);
10003c72:	2102      	movs	r1, #2
10003c74:	4804      	ldr	r0, [pc, #16]	; (10003c88 <stdio_put_string.isra.0+0xf4>)
10003c76:	6823      	ldr	r3, [r4, #0]
10003c78:	4798      	blx	r3
    if (first_of_chunk < len) {
10003c7a:	e7da      	b.n	10003c32 <stdio_put_string.isra.0+0x9e>
10003c7c:	20008e78 	.word	0x20008e78
10003c80:	20016c54 	.word	0x20016c54
10003c84:	20016c5c 	.word	0x20016c5c
10003c88:	1000b2ec 	.word	0x1000b2ec

10003c8c <__wrap_putchar>:
int WRAPPER_FUNC(putchar)(int c) {
10003c8c:	b510      	push	{r4, lr}
10003c8e:	b082      	sub	sp, #8
    char cc = c;
10003c90:	466b      	mov	r3, sp
int WRAPPER_FUNC(putchar)(int c) {
10003c92:	0004      	movs	r4, r0
    stdio_put_string(&cc, 1, false);
10003c94:	2200      	movs	r2, #0
    char cc = c;
10003c96:	1dd8      	adds	r0, r3, #7
    stdio_put_string(&cc, 1, false);
10003c98:	2101      	movs	r1, #1
    char cc = c;
10003c9a:	7004      	strb	r4, [r0, #0]
    stdio_put_string(&cc, 1, false);
10003c9c:	f7ff ff7a 	bl	10003b94 <stdio_put_string.isra.0>
}
10003ca0:	0020      	movs	r0, r4
10003ca2:	b002      	add	sp, #8
10003ca4:	bd10      	pop	{r4, pc}
10003ca6:	46c0      	nop			; (mov r8, r8)

10003ca8 <__wrap_puts>:
int WRAPPER_FUNC(puts)(const char *s) {
10003ca8:	b570      	push	{r4, r5, r6, lr}
10003caa:	0004      	movs	r4, r0
    int len = strlen(s);
10003cac:	f007 f808 	bl	1000acc0 <strlen>
    stdio_put_string(s, len, true);
10003cb0:	2201      	movs	r2, #1
10003cb2:	0001      	movs	r1, r0
    int len = strlen(s);
10003cb4:	0005      	movs	r5, r0
    stdio_put_string(s, len, true);
10003cb6:	0020      	movs	r0, r4
10003cb8:	f7ff ff6c 	bl	10003b94 <stdio_put_string.isra.0>
    for (stdio_driver_t *d = drivers; d; d = d->next) {
10003cbc:	4b08      	ldr	r3, [pc, #32]	; (10003ce0 <__wrap_puts+0x38>)
10003cbe:	681c      	ldr	r4, [r3, #0]
10003cc0:	2c00      	cmp	r4, #0
10003cc2:	d006      	beq.n	10003cd2 <__wrap_puts+0x2a>
        if (d->out_flush) d->out_flush();
10003cc4:	6863      	ldr	r3, [r4, #4]
10003cc6:	2b00      	cmp	r3, #0
10003cc8:	d005      	beq.n	10003cd6 <__wrap_puts+0x2e>
10003cca:	4798      	blx	r3
    for (stdio_driver_t *d = drivers; d; d = d->next) {
10003ccc:	68e4      	ldr	r4, [r4, #12]
10003cce:	2c00      	cmp	r4, #0
10003cd0:	d1f8      	bne.n	10003cc4 <__wrap_puts+0x1c>
}
10003cd2:	0028      	movs	r0, r5
10003cd4:	bd70      	pop	{r4, r5, r6, pc}
    for (stdio_driver_t *d = drivers; d; d = d->next) {
10003cd6:	68e4      	ldr	r4, [r4, #12]
10003cd8:	2c00      	cmp	r4, #0
10003cda:	d1f3      	bne.n	10003cc4 <__wrap_puts+0x1c>
10003cdc:	e7f9      	b.n	10003cd2 <__wrap_puts+0x2a>
10003cde:	46c0      	nop			; (mov r8, r8)
10003ce0:	20016c54 	.word	0x20016c54

10003ce4 <stdio_set_driver_enabled>:
    stdio_driver_t *prev = drivers;
10003ce4:	4a0d      	ldr	r2, [pc, #52]	; (10003d1c <stdio_set_driver_enabled+0x38>)
10003ce6:	6813      	ldr	r3, [r2, #0]
    for (stdio_driver_t *d = drivers; d; d = d->next) {
10003ce8:	2b00      	cmp	r3, #0
10003cea:	d013      	beq.n	10003d14 <stdio_set_driver_enabled+0x30>
        if (d == driver) {
10003cec:	4283      	cmp	r3, r0
10003cee:	d102      	bne.n	10003cf6 <stdio_set_driver_enabled+0x12>
10003cf0:	e009      	b.n	10003d06 <stdio_set_driver_enabled+0x22>
10003cf2:	4298      	cmp	r0, r3
10003cf4:	d008      	beq.n	10003d08 <stdio_set_driver_enabled+0x24>
    for (stdio_driver_t *d = drivers; d; d = d->next) {
10003cf6:	001a      	movs	r2, r3
10003cf8:	68db      	ldr	r3, [r3, #12]
10003cfa:	2b00      	cmp	r3, #0
10003cfc:	d1f9      	bne.n	10003cf2 <stdio_set_driver_enabled+0xe>
    if (enable) {
10003cfe:	2900      	cmp	r1, #0
10003d00:	d000      	beq.n	10003d04 <stdio_set_driver_enabled+0x20>
        if (prev) prev->next = driver;
10003d02:	60d0      	str	r0, [r2, #12]
}
10003d04:	4770      	bx	lr
        if (d == driver) {
10003d06:	001a      	movs	r2, r3
            if (!enable) {
10003d08:	2900      	cmp	r1, #0
10003d0a:	d1fb      	bne.n	10003d04 <stdio_set_driver_enabled+0x20>
                prev->next = d->next;
10003d0c:	68db      	ldr	r3, [r3, #12]
10003d0e:	60d3      	str	r3, [r2, #12]
                driver->next = NULL;
10003d10:	60c1      	str	r1, [r0, #12]
10003d12:	e7f7      	b.n	10003d04 <stdio_set_driver_enabled+0x20>
    if (enable) {
10003d14:	2900      	cmp	r1, #0
10003d16:	d0f5      	beq.n	10003d04 <stdio_set_driver_enabled+0x20>
        else drivers = driver;
10003d18:	6010      	str	r0, [r2, #0]
10003d1a:	e7f3      	b.n	10003d04 <stdio_set_driver_enabled+0x20>
10003d1c:	20016c54 	.word	0x20016c54

10003d20 <__wrap_vprintf>:

int WRAPPER_FUNC(vprintf)(const char *format, va_list va) {
10003d20:	b5f0      	push	{r4, r5, r6, r7, lr}
10003d22:	4646      	mov	r6, r8
10003d24:	46d6      	mov	lr, sl
10003d26:	464f      	mov	r7, r9
10003d28:	23d0      	movs	r3, #208	; 0xd0
10003d2a:	b5c0      	push	{r6, r7, lr}
10003d2c:	061b      	lsls	r3, r3, #24
10003d2e:	681f      	ldr	r7, [r3, #0]
    if (!mutex_try_enter(&print_mutex, &owner)) {
10003d30:	4b31      	ldr	r3, [pc, #196]	; (10003df8 <__wrap_vprintf+0xd8>)
int WRAPPER_FUNC(vprintf)(const char *format, va_list va) {
10003d32:	b0a2      	sub	sp, #136	; 0x88
10003d34:	0004      	movs	r4, r0
10003d36:	000d      	movs	r5, r1
    if (!mutex_try_enter(&print_mutex, &owner)) {
10003d38:	0018      	movs	r0, r3
10003d3a:	a901      	add	r1, sp, #4
10003d3c:	4698      	mov	r8, r3
10003d3e:	f007 f93b 	bl	1000afb8 <__mutex_try_enter_veneer>
10003d42:	1e06      	subs	r6, r0, #0
10003d44:	d106      	bne.n	10003d54 <__wrap_vprintf+0x34>
        if (owner == core_num) {
10003d46:	9b01      	ldr	r3, [sp, #4]
10003d48:	429f      	cmp	r7, r3
10003d4a:	d003      	beq.n	10003d54 <__wrap_vprintf+0x34>
        mutex_enter_blocking(&print_mutex);
10003d4c:	4640      	mov	r0, r8
10003d4e:	f007 f94b 	bl	1000afe8 <__mutex_enter_blocking_veneer>
    return true;
10003d52:	3601      	adds	r6, #1
        return 0;
#endif
    }
    int ret;
#if PICO_PRINTF_PICO
    struct stdio_stack_buffer buffer = {.used = 0};
10003d54:	2284      	movs	r2, #132	; 0x84
10003d56:	2100      	movs	r1, #0
10003d58:	a801      	add	r0, sp, #4
10003d5a:	f7fd f9e5 	bl	10001128 <__wrap_memset>
    ret = vfctprintf(stdio_buffered_printer, &buffer, format, va);
10003d5e:	002b      	movs	r3, r5
10003d60:	0022      	movs	r2, r4
10003d62:	4826      	ldr	r0, [pc, #152]	; (10003dfc <__wrap_vprintf+0xdc>)
10003d64:	a901      	add	r1, sp, #4
10003d66:	f7ff fdb1 	bl	100038cc <vfctprintf>
    if (buffer->used) {
10003d6a:	9b01      	ldr	r3, [sp, #4]
    ret = vfctprintf(stdio_buffered_printer, &buffer, format, va);
10003d6c:	0007      	movs	r7, r0
    if (buffer->used) {
10003d6e:	2b00      	cmp	r3, #0
10003d70:	d115      	bne.n	10003d9e <__wrap_vprintf+0x7e>
    for (stdio_driver_t *d = drivers; d; d = d->next) {
10003d72:	4b23      	ldr	r3, [pc, #140]	; (10003e00 <__wrap_vprintf+0xe0>)
10003d74:	681c      	ldr	r4, [r3, #0]
10003d76:	2c00      	cmp	r4, #0
10003d78:	d006      	beq.n	10003d88 <__wrap_vprintf+0x68>
        if (d->out_flush) d->out_flush();
10003d7a:	6863      	ldr	r3, [r4, #4]
10003d7c:	2b00      	cmp	r3, #0
10003d7e:	d00c      	beq.n	10003d9a <__wrap_vprintf+0x7a>
10003d80:	4798      	blx	r3
    for (stdio_driver_t *d = drivers; d; d = d->next) {
10003d82:	68e4      	ldr	r4, [r4, #12]
10003d84:	2c00      	cmp	r4, #0
10003d86:	d1f8      	bne.n	10003d7a <__wrap_vprintf+0x5a>
    printf_none_assert();
#else
    extern int REAL_FUNC(vprintf)(const char *format, va_list va);
    ret = REAL_FUNC(vprintf)(format, va);
#endif
    if (serialzed) {
10003d88:	2e00      	cmp	r6, #0
10003d8a:	d12f      	bne.n	10003dec <__wrap_vprintf+0xcc>
        stdout_serialize_end();
    }
    return ret;
}
10003d8c:	0038      	movs	r0, r7
10003d8e:	b022      	add	sp, #136	; 0x88
10003d90:	bce0      	pop	{r5, r6, r7}
10003d92:	46ba      	mov	sl, r7
10003d94:	46b1      	mov	r9, r6
10003d96:	46a8      	mov	r8, r5
10003d98:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for (stdio_driver_t *d = drivers; d; d = d->next) {
10003d9a:	68e4      	ldr	r4, [r4, #12]
10003d9c:	e7eb      	b.n	10003d76 <__wrap_vprintf+0x56>
        for (stdio_driver_t *d = drivers; d; d = d->next) {
10003d9e:	4b18      	ldr	r3, [pc, #96]	; (10003e00 <__wrap_vprintf+0xe0>)
10003da0:	681d      	ldr	r5, [r3, #0]
10003da2:	469a      	mov	sl, r3
10003da4:	2d00      	cmp	r5, #0
10003da6:	d025      	beq.n	10003df4 <__wrap_vprintf+0xd4>
            if (filter && filter != d) continue;
10003da8:	4b16      	ldr	r3, [pc, #88]	; (10003e04 <__wrap_vprintf+0xe4>)
10003daa:	4699      	mov	r9, r3
10003dac:	e002      	b.n	10003db4 <__wrap_vprintf+0x94>
        for (stdio_driver_t *d = drivers; d; d = d->next) {
10003dae:	68ed      	ldr	r5, [r5, #12]
10003db0:	2d00      	cmp	r5, #0
10003db2:	d013      	beq.n	10003ddc <__wrap_vprintf+0xbc>
            if (!d->out_chars) continue;
10003db4:	682c      	ldr	r4, [r5, #0]
10003db6:	2c00      	cmp	r4, #0
10003db8:	d0f9      	beq.n	10003dae <__wrap_vprintf+0x8e>
            if (filter && filter != d) continue;
10003dba:	464b      	mov	r3, r9
10003dbc:	681b      	ldr	r3, [r3, #0]
10003dbe:	2b00      	cmp	r3, #0
10003dc0:	d001      	beq.n	10003dc6 <__wrap_vprintf+0xa6>
10003dc2:	429d      	cmp	r5, r3
10003dc4:	d1f3      	bne.n	10003dae <__wrap_vprintf+0x8e>
    if (!driver->crlf_enabled) {
10003dc6:	7c6b      	ldrb	r3, [r5, #17]
            stdio_out_chars_crlf(d, buffer->buf, buffer->used);
10003dc8:	9a01      	ldr	r2, [sp, #4]
    if (!driver->crlf_enabled) {
10003dca:	2b00      	cmp	r3, #0
10003dcc:	d00a      	beq.n	10003de4 <__wrap_vprintf+0xc4>
10003dce:	0028      	movs	r0, r5
10003dd0:	a902      	add	r1, sp, #8
10003dd2:	f7ff fe53 	bl	10003a7c <stdio_out_chars_crlf.part.0>
        for (stdio_driver_t *d = drivers; d; d = d->next) {
10003dd6:	68ed      	ldr	r5, [r5, #12]
10003dd8:	2d00      	cmp	r5, #0
10003dda:	d1eb      	bne.n	10003db4 <__wrap_vprintf+0x94>
    for (stdio_driver_t *d = drivers; d; d = d->next) {
10003ddc:	4653      	mov	r3, sl
        buffer->used = 0;
10003dde:	9501      	str	r5, [sp, #4]
    for (stdio_driver_t *d = drivers; d; d = d->next) {
10003de0:	681c      	ldr	r4, [r3, #0]
}
10003de2:	e7c8      	b.n	10003d76 <__wrap_vprintf+0x56>
        driver->out_chars(s, len);
10003de4:	0011      	movs	r1, r2
10003de6:	a802      	add	r0, sp, #8
10003de8:	47a0      	blx	r4
        return;
10003dea:	e7e0      	b.n	10003dae <__wrap_vprintf+0x8e>
    mutex_exit(&print_mutex);
10003dec:	4640      	mov	r0, r8
10003dee:	f007 f8cb 	bl	1000af88 <__mutex_exit_veneer>
    return ret;
10003df2:	e7cb      	b.n	10003d8c <__wrap_vprintf+0x6c>
        buffer->used = 0;
10003df4:	9501      	str	r5, [sp, #4]
    for (stdio_driver_t *d = drivers; d; d = d->next) {
10003df6:	e7c7      	b.n	10003d88 <__wrap_vprintf+0x68>
10003df8:	20008e78 	.word	0x20008e78
10003dfc:	10003b1d 	.word	0x10003b1d
10003e00:	20016c54 	.word	0x20016c54
10003e04:	20016c5c 	.word	0x20016c5c

10003e08 <__wrap_printf>:

int __printflike(1, 0) WRAPPER_FUNC(printf)(const char* format, ...)
{
10003e08:	b40f      	push	{r0, r1, r2, r3}
10003e0a:	b500      	push	{lr}
10003e0c:	b083      	sub	sp, #12
10003e0e:	a904      	add	r1, sp, #16
10003e10:	c901      	ldmia	r1!, {r0}
    va_list va;
    va_start(va, format);
10003e12:	9101      	str	r1, [sp, #4]
    int ret = vprintf(format, va);
10003e14:	f7ff ff84 	bl	10003d20 <__wrap_vprintf>
    va_end(va);
    return ret;
}
10003e18:	b003      	add	sp, #12
10003e1a:	bc08      	pop	{r3}
10003e1c:	b004      	add	sp, #16
10003e1e:	4718      	bx	r3

10003e20 <stdio_init_all>:

void stdio_init_all() {
10003e20:	b510      	push	{r4, lr}
#if PICO_STDIO_SEMIHOSTING
    stdio_semihosting_init();
#endif

#if PICO_STDIO_USB
    stdio_usb_init();
10003e22:	f000 f925 	bl	10004070 <stdio_usb_init>
#endif
}
10003e26:	bd10      	pop	{r4, pc}

10003e28 <getchar_timeout_us>:
        return PICO_ERROR_TIMEOUT;
    }
    return (uint8_t)buf[0];
}

int getchar_timeout_us(uint32_t timeout_us) {
10003e28:	b5f0      	push	{r4, r5, r6, r7, lr}
10003e2a:	46d6      	mov	lr, sl
10003e2c:	464f      	mov	r7, r9
10003e2e:	4646      	mov	r6, r8
10003e30:	b5c0      	push	{r6, r7, lr}
10003e32:	b082      	sub	sp, #8
10003e34:	0004      	movs	r4, r0
 * \sa sleep_until()
 * \sa time_us_64()
 */
static inline absolute_time_t get_absolute_time() {
    absolute_time_t t;
    update_us_since_boot(&t, time_us_64());
10003e36:	f000 fe59 	bl	10004aec <time_us_64>
    char buf[1];
    int rc = stdio_get_until(buf, sizeof(buf), make_timeout_time_us(timeout_us));
10003e3a:	0026      	movs	r6, r4
10003e3c:	0002      	movs	r2, r0
10003e3e:	000b      	movs	r3, r1
10003e40:	2700      	movs	r7, #0
 * \return the timestamp representing the resulting time
 */
static inline absolute_time_t delayed_by_us(const absolute_time_t t, uint64_t us) {
    absolute_time_t t2;
    uint64_t base = to_us_since_boot(t);
    uint64_t delayed = base + us;
10003e42:	18b6      	adds	r6, r6, r2
10003e44:	415f      	adcs	r7, r3
    if (delayed < base) {
10003e46:	42b9      	cmp	r1, r7
10003e48:	d831      	bhi.n	10003eae <getchar_timeout_us+0x86>
10003e4a:	d02e      	beq.n	10003eaa <getchar_timeout_us+0x82>
 * \param t Absolute time to compare against current time
 * \return true if it is now after the specified timestamp
 */
static inline bool time_reached(absolute_time_t t) {
    uint64_t target = to_us_since_boot(t);
    uint32_t hi_target = target >> 32u;
10003e4c:	46b9      	mov	r9, r7
static int stdio_get_until(char *buf, int len, absolute_time_t until) {
10003e4e:	4b25      	ldr	r3, [pc, #148]	; (10003ee4 <getchar_timeout_us+0xbc>)
10003e50:	4d25      	ldr	r5, [pc, #148]	; (10003ee8 <getchar_timeout_us+0xc0>)
10003e52:	469a      	mov	sl, r3
        for (stdio_driver_t *driver = drivers; driver; driver = driver->next) {
10003e54:	4653      	mov	r3, sl
10003e56:	681b      	ldr	r3, [r3, #0]
10003e58:	4698      	mov	r8, r3
10003e5a:	1e1c      	subs	r4, r3, #0
10003e5c:	d103      	bne.n	10003e66 <getchar_timeout_us+0x3e>
10003e5e:	e03c      	b.n	10003eda <getchar_timeout_us+0xb2>
10003e60:	68e4      	ldr	r4, [r4, #12]
10003e62:	2c00      	cmp	r4, #0
10003e64:	d014      	beq.n	10003e90 <getchar_timeout_us+0x68>
            if (filter && filter != driver) continue;
10003e66:	682b      	ldr	r3, [r5, #0]
10003e68:	2b00      	cmp	r3, #0
10003e6a:	d001      	beq.n	10003e70 <getchar_timeout_us+0x48>
10003e6c:	42a3      	cmp	r3, r4
10003e6e:	d1f7      	bne.n	10003e60 <getchar_timeout_us+0x38>
            if (driver->in_chars) {
10003e70:	68a3      	ldr	r3, [r4, #8]
10003e72:	2b00      	cmp	r3, #0
10003e74:	d0f4      	beq.n	10003e60 <getchar_timeout_us+0x38>
                int read = driver->in_chars(buf, len);
10003e76:	2101      	movs	r1, #1
10003e78:	a801      	add	r0, sp, #4
10003e7a:	4798      	blx	r3
                if (read > 0) {
10003e7c:	2800      	cmp	r0, #0
10003e7e:	ddef      	ble.n	10003e60 <getchar_timeout_us+0x38>
    if (rc < 0) return rc;
    assert(rc);
    return (uint8_t)buf[0];
10003e80:	466b      	mov	r3, sp
10003e82:	7918      	ldrb	r0, [r3, #4]
}
10003e84:	b002      	add	sp, #8
10003e86:	bce0      	pop	{r5, r6, r7}
10003e88:	46ba      	mov	sl, r7
10003e8a:	46b1      	mov	r9, r6
10003e8c:	46a8      	mov	r8, r5
10003e8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint32_t hi = timer_hw->timerawh;
10003e90:	4b16      	ldr	r3, [pc, #88]	; (10003eec <getchar_timeout_us+0xc4>)
10003e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    return (hi >= hi_target && (timer_hw->timerawl >= (uint32_t) target || hi != hi_target));
10003e94:	4599      	cmp	r9, r3
10003e96:	d8dd      	bhi.n	10003e54 <getchar_timeout_us+0x2c>
10003e98:	4a14      	ldr	r2, [pc, #80]	; (10003eec <getchar_timeout_us+0xc4>)
10003e9a:	6a92      	ldr	r2, [r2, #40]	; 0x28
10003e9c:	42b2      	cmp	r2, r6
10003e9e:	d201      	bcs.n	10003ea4 <getchar_timeout_us+0x7c>
10003ea0:	4599      	cmp	r9, r3
10003ea2:	d00b      	beq.n	10003ebc <getchar_timeout_us+0x94>
10003ea4:	2001      	movs	r0, #1
10003ea6:	4240      	negs	r0, r0
10003ea8:	e7ec      	b.n	10003e84 <getchar_timeout_us+0x5c>
10003eaa:	42b0      	cmp	r0, r6
10003eac:	d9ce      	bls.n	10003e4c <getchar_timeout_us+0x24>
10003eae:	2301      	movs	r3, #1
10003eb0:	425b      	negs	r3, r3
10003eb2:	4699      	mov	r9, r3
        delayed = (uint64_t)-1;
10003eb4:	2601      	movs	r6, #1
10003eb6:	4276      	negs	r6, r6
10003eb8:	17f7      	asrs	r7, r6, #31
10003eba:	e7c8      	b.n	10003e4e <getchar_timeout_us+0x26>
10003ebc:	4643      	mov	r3, r8
10003ebe:	2b00      	cmp	r3, #0
10003ec0:	d1c8      	bne.n	10003e54 <getchar_timeout_us+0x2c>
    uint32_t hi = timer_hw->timerawh;
10003ec2:	4a0a      	ldr	r2, [pc, #40]	; (10003eec <getchar_timeout_us+0xc4>)
10003ec4:	6a53      	ldr	r3, [r2, #36]	; 0x24
    return (hi >= hi_target && (timer_hw->timerawl >= (uint32_t) target || hi != hi_target));
10003ec6:	4599      	cmp	r9, r3
10003ec8:	d8fc      	bhi.n	10003ec4 <getchar_timeout_us+0x9c>
10003eca:	6a91      	ldr	r1, [r2, #40]	; 0x28
10003ecc:	42b1      	cmp	r1, r6
10003ece:	d2e9      	bcs.n	10003ea4 <getchar_timeout_us+0x7c>
10003ed0:	4599      	cmp	r9, r3
10003ed2:	d0f7      	beq.n	10003ec4 <getchar_timeout_us+0x9c>
10003ed4:	2001      	movs	r0, #1
10003ed6:	4240      	negs	r0, r0
10003ed8:	e7d4      	b.n	10003e84 <getchar_timeout_us+0x5c>
    uint32_t hi = timer_hw->timerawh;
10003eda:	4b04      	ldr	r3, [pc, #16]	; (10003eec <getchar_timeout_us+0xc4>)
10003edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    return (hi >= hi_target && (timer_hw->timerawl >= (uint32_t) target || hi != hi_target));
10003ede:	454b      	cmp	r3, r9
10003ee0:	d2da      	bcs.n	10003e98 <getchar_timeout_us+0x70>
10003ee2:	e7ee      	b.n	10003ec2 <getchar_timeout_us+0x9a>
10003ee4:	20016c54 	.word	0x20016c54
10003ee8:	20016c5c 	.word	0x20016c5c
10003eec:	40054000 	.word	0x40054000

10003ef0 <stdio_usb_in_chars>:
        last_avail_time = 0;
    }
    mutex_exit(&stdio_usb_mutex);
}

int stdio_usb_in_chars(char *buf, int length) {
10003ef0:	b570      	push	{r4, r5, r6, lr}
    uint32_t owner;
    if (!mutex_try_enter(&stdio_usb_mutex, &owner)) {
10003ef2:	4c18      	ldr	r4, [pc, #96]	; (10003f54 <stdio_usb_in_chars+0x64>)
int stdio_usb_in_chars(char *buf, int length) {
10003ef4:	b082      	sub	sp, #8
10003ef6:	0006      	movs	r6, r0
10003ef8:	000d      	movs	r5, r1
    if (!mutex_try_enter(&stdio_usb_mutex, &owner)) {
10003efa:	0020      	movs	r0, r4
10003efc:	a901      	add	r1, sp, #4
10003efe:	f007 f85b 	bl	1000afb8 <__mutex_try_enter_veneer>
10003f02:	2800      	cmp	r0, #0
10003f04:	d108      	bne.n	10003f18 <stdio_usb_in_chars+0x28>
        if (owner == get_core_num()) return PICO_ERROR_NO_DATA; // would deadlock otherwise
10003f06:	23d0      	movs	r3, #208	; 0xd0
10003f08:	061b      	lsls	r3, r3, #24
10003f0a:	681b      	ldr	r3, [r3, #0]
10003f0c:	9a01      	ldr	r2, [sp, #4]
10003f0e:	429a      	cmp	r2, r3
10003f10:	d01c      	beq.n	10003f4c <stdio_usb_in_chars+0x5c>
        mutex_enter_blocking(&stdio_usb_mutex);
10003f12:	0020      	movs	r0, r4
10003f14:	f007 f868 	bl	1000afe8 <__mutex_enter_blocking_veneer>
  return tud_cdc_n_write(itf, str, strlen(str));
}

static inline bool tud_cdc_connected (void)
{
  return tud_cdc_n_connected(0);
10003f18:	2000      	movs	r0, #0
10003f1a:	f000 feeb 	bl	10004cf4 <tud_cdc_n_connected>
    }
    int rc = PICO_ERROR_NO_DATA;
    if (tud_cdc_connected() && tud_cdc_available()) {
10003f1e:	2800      	cmp	r0, #0
10003f20:	d107      	bne.n	10003f32 <stdio_usb_in_chars+0x42>
    int rc = PICO_ERROR_NO_DATA;
10003f22:	2503      	movs	r5, #3
10003f24:	426d      	negs	r5, r5
        int count = tud_cdc_read(buf, length);
        rc =  count ? count : PICO_ERROR_NO_DATA;
    }
    mutex_exit(&stdio_usb_mutex);
10003f26:	0020      	movs	r0, r4
10003f28:	f007 f82e 	bl	1000af88 <__mutex_exit_veneer>
    return rc;
}
10003f2c:	0028      	movs	r0, r5
10003f2e:	b002      	add	sp, #8
10003f30:	bd70      	pop	{r4, r5, r6, pc}
  tud_cdc_n_set_wanted_char(0, wanted);
}

static inline uint32_t tud_cdc_available (void)
{
  return tud_cdc_n_available(0);
10003f32:	2000      	movs	r0, #0
10003f34:	f000 fef8 	bl	10004d28 <tud_cdc_n_available>
    if (tud_cdc_connected() && tud_cdc_available()) {
10003f38:	2800      	cmp	r0, #0
10003f3a:	d0f2      	beq.n	10003f22 <stdio_usb_in_chars+0x32>
  return tud_cdc_n_read_char(0);
}

static inline uint32_t tud_cdc_read (void* buffer, uint32_t bufsize)
{
  return tud_cdc_n_read(0, buffer, bufsize);
10003f3c:	002a      	movs	r2, r5
10003f3e:	0031      	movs	r1, r6
10003f40:	2000      	movs	r0, #0
10003f42:	f000 feff 	bl	10004d44 <tud_cdc_n_read>
10003f46:	1e05      	subs	r5, r0, #0
        rc =  count ? count : PICO_ERROR_NO_DATA;
10003f48:	d0eb      	beq.n	10003f22 <stdio_usb_in_chars+0x32>
10003f4a:	e7ec      	b.n	10003f26 <stdio_usb_in_chars+0x36>
        if (owner == get_core_num()) return PICO_ERROR_NO_DATA; // would deadlock otherwise
10003f4c:	2503      	movs	r5, #3
10003f4e:	426d      	negs	r5, r5
10003f50:	e7ec      	b.n	10003f2c <stdio_usb_in_chars+0x3c>
10003f52:	46c0      	nop			; (mov r8, r8)
10003f54:	20017308 	.word	0x20017308

10003f58 <stdio_usb_out_chars>:
static void stdio_usb_out_chars(const char *buf, int length) {
10003f58:	b5f0      	push	{r4, r5, r6, r7, lr}
10003f5a:	46de      	mov	lr, fp
10003f5c:	464f      	mov	r7, r9
10003f5e:	4646      	mov	r6, r8
10003f60:	b5c0      	push	{r6, r7, lr}
    if (!mutex_try_enter(&stdio_usb_mutex, &owner)) {
10003f62:	4b33      	ldr	r3, [pc, #204]	; (10004030 <stdio_usb_out_chars+0xd8>)
static void stdio_usb_out_chars(const char *buf, int length) {
10003f64:	b082      	sub	sp, #8
10003f66:	4681      	mov	r9, r0
10003f68:	000d      	movs	r5, r1
    if (!mutex_try_enter(&stdio_usb_mutex, &owner)) {
10003f6a:	0018      	movs	r0, r3
10003f6c:	a901      	add	r1, sp, #4
10003f6e:	469b      	mov	fp, r3
10003f70:	f007 f822 	bl	1000afb8 <__mutex_try_enter_veneer>
10003f74:	2800      	cmp	r0, #0
10003f76:	d108      	bne.n	10003f8a <stdio_usb_out_chars+0x32>
        if (owner == get_core_num()) return; // would deadlock otherwise
10003f78:	23d0      	movs	r3, #208	; 0xd0
10003f7a:	061b      	lsls	r3, r3, #24
10003f7c:	681b      	ldr	r3, [r3, #0]
10003f7e:	9a01      	ldr	r2, [sp, #4]
10003f80:	429a      	cmp	r2, r3
10003f82:	d04f      	beq.n	10004024 <stdio_usb_out_chars+0xcc>
        mutex_enter_blocking(&stdio_usb_mutex);
10003f84:	4658      	mov	r0, fp
10003f86:	f007 f82f 	bl	1000afe8 <__mutex_enter_blocking_veneer>
  return tud_cdc_n_connected(0);
10003f8a:	2000      	movs	r0, #0
10003f8c:	f000 feb2 	bl	10004cf4 <tud_cdc_n_connected>
    if (tud_cdc_connected()) {
10003f90:	2800      	cmp	r0, #0
10003f92:	d03f      	beq.n	10004014 <stdio_usb_out_chars+0xbc>
        for (int i = 0; i < length;) {
10003f94:	2400      	movs	r4, #0
10003f96:	2d00      	cmp	r5, #0
10003f98:	dd41      	ble.n	1000401e <stdio_usb_out_chars+0xc6>
                    (!tud_cdc_write_available() && time_us_64() > last_avail_time + PICO_STDIO_USB_STDOUT_TIMEOUT_US)) {
10003f9a:	4e26      	ldr	r6, [pc, #152]	; (10004034 <stdio_usb_out_chars+0xdc>)
10003f9c:	e011      	b.n	10003fc2 <stdio_usb_out_chars+0x6a>
                int n2 = tud_cdc_write(buf + i, n);
10003f9e:	464b      	mov	r3, r9
  return tud_cdc_n_write_char(0, ch);
}

static inline uint32_t tud_cdc_write (void const* buffer, uint32_t bufsize)
{
  return tud_cdc_n_write(0, buffer, bufsize);
10003fa0:	2000      	movs	r0, #0
10003fa2:	1919      	adds	r1, r3, r4
10003fa4:	f000 ff5a 	bl	10004e5c <tud_cdc_n_write>
10003fa8:	4680      	mov	r8, r0
                tud_task();
10003faa:	f001 fbab 	bl	10005704 <tud_task>
  return tud_cdc_n_write_str(0, str);
}

static inline uint32_t tud_cdc_write_flush (void)
{
  return tud_cdc_n_write_flush(0);
10003fae:	2000      	movs	r0, #0
10003fb0:	f000 ff02 	bl	10004db8 <tud_cdc_n_write_flush>
                last_avail_time = time_us_64();
10003fb4:	f000 fd9a 	bl	10004aec <time_us_64>
10003fb8:	6030      	str	r0, [r6, #0]
10003fba:	6071      	str	r1, [r6, #4]
                i += n2;
10003fbc:	4444      	add	r4, r8
        for (int i = 0; i < length;) {
10003fbe:	42ac      	cmp	r4, r5
10003fc0:	da2d      	bge.n	1000401e <stdio_usb_out_chars+0xc6>
}

static inline uint32_t tud_cdc_write_available(void)
{
  return tud_cdc_n_write_available(0);
10003fc2:	2000      	movs	r0, #0
10003fc4:	f000 ff66 	bl	10004e94 <tud_cdc_n_write_available>
            int n = length - i;
10003fc8:	1b2f      	subs	r7, r5, r4
10003fca:	0002      	movs	r2, r0
            if (n > avail) n = avail;
10003fcc:	42b8      	cmp	r0, r7
10003fce:	dd00      	ble.n	10003fd2 <stdio_usb_out_chars+0x7a>
10003fd0:	003a      	movs	r2, r7
            if (n) {
10003fd2:	2a00      	cmp	r2, #0
10003fd4:	d1e3      	bne.n	10003f9e <stdio_usb_out_chars+0x46>
                tud_task();
10003fd6:	f001 fb95 	bl	10005704 <tud_task>
  return tud_cdc_n_write_flush(0);
10003fda:	2000      	movs	r0, #0
10003fdc:	f000 feec 	bl	10004db8 <tud_cdc_n_write_flush>
  return tud_cdc_n_connected(0);
10003fe0:	2000      	movs	r0, #0
10003fe2:	f000 fe87 	bl	10004cf4 <tud_cdc_n_connected>
                if (!tud_cdc_connected() ||
10003fe6:	2800      	cmp	r0, #0
10003fe8:	d019      	beq.n	1000401e <stdio_usb_out_chars+0xc6>
  return tud_cdc_n_write_available(0);
10003fea:	2000      	movs	r0, #0
10003fec:	f000 ff52 	bl	10004e94 <tud_cdc_n_write_available>
10003ff0:	2800      	cmp	r0, #0
10003ff2:	d1e4      	bne.n	10003fbe <stdio_usb_out_chars+0x66>
                    (!tud_cdc_write_available() && time_us_64() > last_avail_time + PICO_STDIO_USB_STDOUT_TIMEOUT_US)) {
10003ff4:	f000 fd7a 	bl	10004aec <time_us_64>
10003ff8:	6832      	ldr	r2, [r6, #0]
10003ffa:	6873      	ldr	r3, [r6, #4]
10003ffc:	000f      	movs	r7, r1
10003ffe:	2100      	movs	r1, #0
10004000:	4684      	mov	ip, r0
10004002:	480d      	ldr	r0, [pc, #52]	; (10004038 <stdio_usb_out_chars+0xe0>)
10004004:	1812      	adds	r2, r2, r0
10004006:	414b      	adcs	r3, r1
10004008:	429f      	cmp	r7, r3
1000400a:	d808      	bhi.n	1000401e <stdio_usb_out_chars+0xc6>
1000400c:	d1d7      	bne.n	10003fbe <stdio_usb_out_chars+0x66>
1000400e:	4594      	cmp	ip, r2
10004010:	d9d5      	bls.n	10003fbe <stdio_usb_out_chars+0x66>
10004012:	e004      	b.n	1000401e <stdio_usb_out_chars+0xc6>
        last_avail_time = 0;
10004014:	2000      	movs	r0, #0
10004016:	2100      	movs	r1, #0
10004018:	4b06      	ldr	r3, [pc, #24]	; (10004034 <stdio_usb_out_chars+0xdc>)
1000401a:	6018      	str	r0, [r3, #0]
1000401c:	6059      	str	r1, [r3, #4]
    mutex_exit(&stdio_usb_mutex);
1000401e:	4658      	mov	r0, fp
10004020:	f006 ffb2 	bl	1000af88 <__mutex_exit_veneer>
}
10004024:	b002      	add	sp, #8
10004026:	bce0      	pop	{r5, r6, r7}
10004028:	46bb      	mov	fp, r7
1000402a:	46b1      	mov	r9, r6
1000402c:	46a8      	mov	r8, r5
1000402e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10004030:	20017308 	.word	0x20017308
10004034:	20008ea8 	.word	0x20008ea8
10004038:	0007a120 	.word	0x0007a120

1000403c <timer_task>:
    irq_set_pending(PICO_STDIO_USB_LOW_PRIORITY_IRQ);
1000403c:	201f      	movs	r0, #31
static int64_t timer_task(__unused alarm_id_t id, __unused void *user_data) {
1000403e:	b510      	push	{r4, lr}
    irq_set_pending(PICO_STDIO_USB_LOW_PRIORITY_IRQ);
10004040:	f7fd fc58 	bl	100018f4 <irq_set_pending>
}
10004044:	20fa      	movs	r0, #250	; 0xfa
10004046:	2100      	movs	r1, #0
10004048:	0080      	lsls	r0, r0, #2
1000404a:	bd10      	pop	{r4, pc}

1000404c <low_priority_worker_irq>:
static void low_priority_worker_irq() {
1000404c:	b510      	push	{r4, lr}
    if (mutex_try_enter(&stdio_usb_mutex, NULL)) {
1000404e:	4c07      	ldr	r4, [pc, #28]	; (1000406c <low_priority_worker_irq+0x20>)
10004050:	2100      	movs	r1, #0
10004052:	0020      	movs	r0, r4
10004054:	f006 ffb0 	bl	1000afb8 <__mutex_try_enter_veneer>
10004058:	2800      	cmp	r0, #0
1000405a:	d100      	bne.n	1000405e <low_priority_worker_irq+0x12>
}
1000405c:	bd10      	pop	{r4, pc}
        tud_task();
1000405e:	f001 fb51 	bl	10005704 <tud_task>
        mutex_exit(&stdio_usb_mutex);
10004062:	0020      	movs	r0, r4
10004064:	f006 ff90 	bl	1000af88 <__mutex_exit_veneer>
}
10004068:	e7f8      	b.n	1000405c <low_priority_worker_irq+0x10>
1000406a:	46c0      	nop			; (mov r8, r8)
1000406c:	20017308 	.word	0x20017308

10004070 <stdio_usb_init>:
#if PICO_STDIO_ENABLE_CRLF_SUPPORT
    .crlf_enabled = PICO_STDIO_USB_DEFAULT_CRLF
#endif
};

bool stdio_usb_init(void) {
10004070:	b570      	push	{r4, r5, r6, lr}
#if !PICO_NO_BI_STDIO_USB
    bi_decl_if_func_used(bi_program_feature("USB stdin / stdout"));
10004072:	4b1e      	ldr	r3, [pc, #120]	; (100040ec <stdio_usb_init+0x7c>)
bool stdio_usb_init(void) {
10004074:	b084      	sub	sp, #16
    bi_decl_if_func_used(bi_program_feature("USB stdin / stdout"));
10004076:	781b      	ldrb	r3, [r3, #0]
#endif

    // initialize TinyUSB
    tusb_init();
10004078:	f002 fd42 	bl	10006b00 <tusb_init>

    irq_set_exclusive_handler(PICO_STDIO_USB_LOW_PRIORITY_IRQ, low_priority_worker_irq);
1000407c:	201f      	movs	r0, #31
1000407e:	491c      	ldr	r1, [pc, #112]	; (100040f0 <stdio_usb_init+0x80>)
10004080:	f7fd fc48 	bl	10001914 <irq_set_exclusive_handler>
    irq_set_enabled(PICO_STDIO_USB_LOW_PRIORITY_IRQ, true);
10004084:	2101      	movs	r1, #1
10004086:	201f      	movs	r0, #31
10004088:	f7fd fc22 	bl	100018d0 <irq_set_enabled>

    mutex_init(&stdio_usb_mutex);
1000408c:	4819      	ldr	r0, [pc, #100]	; (100040f4 <stdio_usb_init+0x84>)
1000408e:	f7fd fe3d 	bl	10001d0c <mutex_init>
 * @return >0 the alarm id
 * @return 0 the target timestamp was during or before this method call (whether the callback was called depends on fire_if_past)
 * @return -1 if there were no alarm slots available
 */
static inline alarm_id_t add_alarm_in_us(uint64_t us, alarm_callback_t callback, void *user_data, bool fire_if_past) {
    return alarm_pool_add_alarm_in_us(alarm_pool_get_default(), us, callback, user_data, fire_if_past);
10004092:	f000 fb2f 	bl	100046f4 <alarm_pool_get_default>
10004096:	0006      	movs	r6, r0
    update_us_since_boot(&t, time_us_64());
10004098:	f000 fd28 	bl	10004aec <time_us_64>
    uint64_t delayed = base + us;
1000409c:	22fa      	movs	r2, #250	; 0xfa
    update_us_since_boot(&t, time_us_64());
1000409e:	0004      	movs	r4, r0
100040a0:	000d      	movs	r5, r1
    uint64_t delayed = base + us;
100040a2:	2300      	movs	r3, #0
100040a4:	0092      	lsls	r2, r2, #2
100040a6:	1912      	adds	r2, r2, r4
100040a8:	416b      	adcs	r3, r5
    if (delayed < base) {
100040aa:	4299      	cmp	r1, r3
100040ac:	d814      	bhi.n	100040d8 <stdio_usb_init+0x68>
100040ae:	d011      	beq.n	100040d4 <stdio_usb_init+0x64>
    return alarm_pool_add_alarm_at(pool, delayed_by_us(get_absolute_time(), us), callback, user_data, fire_if_past);
100040b0:	2101      	movs	r1, #1
100040b2:	9102      	str	r1, [sp, #8]
100040b4:	2100      	movs	r1, #0
100040b6:	9101      	str	r1, [sp, #4]
100040b8:	490f      	ldr	r1, [pc, #60]	; (100040f8 <stdio_usb_init+0x88>)
100040ba:	0030      	movs	r0, r6
100040bc:	9100      	str	r1, [sp, #0]
100040be:	f000 fb1f 	bl	10004700 <alarm_pool_add_alarm_at>
    bool rc = add_alarm_in_us(PICO_STDIO_USB_TASK_INTERVAL_US, timer_task, NULL, true);
100040c2:	0004      	movs	r4, r0
100040c4:	1e63      	subs	r3, r4, #1
100040c6:	419c      	sbcs	r4, r3
100040c8:	b2e4      	uxtb	r4, r4
    if (rc) {
100040ca:	2800      	cmp	r0, #0
100040cc:	d108      	bne.n	100040e0 <stdio_usb_init+0x70>
        stdio_set_driver_enabled(&stdio_usb, true);
    }
    return rc;
}
100040ce:	0020      	movs	r0, r4
100040d0:	b004      	add	sp, #16
100040d2:	bd70      	pop	{r4, r5, r6, pc}
    if (delayed < base) {
100040d4:	4290      	cmp	r0, r2
100040d6:	d9eb      	bls.n	100040b0 <stdio_usb_init+0x40>
        delayed = (uint64_t)-1;
100040d8:	2201      	movs	r2, #1
100040da:	4252      	negs	r2, r2
100040dc:	17d3      	asrs	r3, r2, #31
100040de:	e7e7      	b.n	100040b0 <stdio_usb_init+0x40>
        stdio_set_driver_enabled(&stdio_usb, true);
100040e0:	2101      	movs	r1, #1
100040e2:	4806      	ldr	r0, [pc, #24]	; (100040fc <stdio_usb_init+0x8c>)
100040e4:	f7ff fdfe 	bl	10003ce4 <stdio_set_driver_enabled>
100040e8:	e7f1      	b.n	100040ce <stdio_usb_init+0x5e>
100040ea:	46c0      	nop			; (mov r8, r8)
100040ec:	101893d0 	.word	0x101893d0
100040f0:	1000404d 	.word	0x1000404d
100040f4:	20017308 	.word	0x20017308
100040f8:	1000403d 	.word	0x1000403d
100040fc:	20002718 	.word	0x20002718

10004100 <tud_descriptor_device_cb>:
    [USBD_STR_CDC] = "Board CDC",
};

const uint8_t *tud_descriptor_device_cb(void) {
    return (const uint8_t *)&usbd_desc_device;
}
10004100:	4800      	ldr	r0, [pc, #0]	; (10004104 <tud_descriptor_device_cb+0x4>)
10004102:	4770      	bx	lr
10004104:	1000b390 	.word	0x1000b390

10004108 <tud_descriptor_configuration_cb>:

const uint8_t *tud_descriptor_configuration_cb(uint8_t index) {
    (void)index;
    return usbd_desc_cfg;
}
10004108:	4800      	ldr	r0, [pc, #0]	; (1000410c <tud_descriptor_configuration_cb+0x4>)
1000410a:	4770      	bx	lr
1000410c:	1000b344 	.word	0x1000b344

10004110 <tud_descriptor_string_cb>:

const uint16_t *tud_descriptor_string_cb(uint8_t index, uint16_t langid) {
10004110:	b530      	push	{r4, r5, lr}
    #define DESC_STR_MAX (20)
    static uint16_t desc_str[DESC_STR_MAX];

    uint8_t len;
    if (index == 0) {
10004112:	2800      	cmp	r0, #0
10004114:	d106      	bne.n	10004124 <tud_descriptor_string_cb+0x14>
        desc_str[1] = 0x0409; // supported language is English
10004116:	24c1      	movs	r4, #193	; 0xc1
10004118:	4811      	ldr	r0, [pc, #68]	; (10004160 <tud_descriptor_string_cb+0x50>)
1000411a:	4b12      	ldr	r3, [pc, #72]	; (10004164 <tud_descriptor_string_cb+0x54>)
1000411c:	00a4      	lsls	r4, r4, #2
1000411e:	8043      	strh	r3, [r0, #2]
            desc_str[1 + len] = str[len];
        }
    }

    // first byte is length (including header), second byte is string type
    desc_str[0] = (TUSB_DESC_STRING << 8) | (2 * len + 2);
10004120:	8004      	strh	r4, [r0, #0]

    return desc_str;
}
10004122:	bd30      	pop	{r4, r5, pc}
        if (index >= sizeof(usbd_desc_str) / sizeof(usbd_desc_str[0])) {
10004124:	2804      	cmp	r0, #4
10004126:	d819      	bhi.n	1000415c <tud_descriptor_string_cb+0x4c>
        const char *str = usbd_desc_str[index];
10004128:	4b0f      	ldr	r3, [pc, #60]	; (10004168 <tud_descriptor_string_cb+0x58>)
1000412a:	0080      	lsls	r0, r0, #2
1000412c:	58c5      	ldr	r5, [r0, r3]
        for (len = 0; len < DESC_STR_MAX - 1 && str[len]; ++len) {
1000412e:	480c      	ldr	r0, [pc, #48]	; (10004160 <tud_descriptor_string_cb+0x50>)
        const char *str = usbd_desc_str[index];
10004130:	2300      	movs	r3, #0
10004132:	1c81      	adds	r1, r0, #2
10004134:	e004      	b.n	10004140 <tud_descriptor_string_cb+0x30>
        for (len = 0; len < DESC_STR_MAX - 1 && str[len]; ++len) {
10004136:	3301      	adds	r3, #1
            desc_str[1 + len] = str[len];
10004138:	800a      	strh	r2, [r1, #0]
        for (len = 0; len < DESC_STR_MAX - 1 && str[len]; ++len) {
1000413a:	3102      	adds	r1, #2
1000413c:	2b13      	cmp	r3, #19
1000413e:	d00a      	beq.n	10004156 <tud_descriptor_string_cb+0x46>
10004140:	5cea      	ldrb	r2, [r5, r3]
10004142:	b2dc      	uxtb	r4, r3
10004144:	2a00      	cmp	r2, #0
10004146:	d1f6      	bne.n	10004136 <tud_descriptor_string_cb+0x26>
    desc_str[0] = (TUSB_DESC_STRING << 8) | (2 * len + 2);
10004148:	23c0      	movs	r3, #192	; 0xc0
1000414a:	3401      	adds	r4, #1
1000414c:	b2e4      	uxtb	r4, r4
1000414e:	0064      	lsls	r4, r4, #1
10004150:	009b      	lsls	r3, r3, #2
10004152:	431c      	orrs	r4, r3
10004154:	e7e4      	b.n	10004120 <tud_descriptor_string_cb+0x10>
10004156:	24ca      	movs	r4, #202	; 0xca
10004158:	00a4      	lsls	r4, r4, #2
1000415a:	e7e1      	b.n	10004120 <tud_descriptor_string_cb+0x10>
            return NULL;
1000415c:	2000      	movs	r0, #0
1000415e:	e7e0      	b.n	10004122 <tud_descriptor_string_cb+0x12>
10004160:	20016c2c 	.word	0x20016c2c
10004164:	00000409 	.word	0x00000409
10004168:	1000b3a4 	.word	0x1000b3a4

1000416c <set_sys_clock_pll>:
                        48 * MHZ,
                        48 * MHZ);
    }
}

void set_sys_clock_pll(uint32_t vco_freq, uint post_div1, uint post_div2) {
1000416c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000416e:	b083      	sub	sp, #12
10004170:	0006      	movs	r6, r0
10004172:	000c      	movs	r4, r1
10004174:	0015      	movs	r5, r2
    if (!running_on_fpga()) {
10004176:	f7fe f8cf 	bl	10002318 <running_on_fpga>
1000417a:	2800      	cmp	r0, #0
1000417c:	d001      	beq.n	10004182 <set_sys_clock_pll+0x16>
                        0, // Only AUX mux on ADC
                        CLOCKS_CLK_PERI_CTRL_AUXSRC_VALUE_CLKSRC_PLL_USB,
                        48 * MHZ,
                        48 * MHZ);
    }
}
1000417e:	b003      	add	sp, #12
10004180:	bdf0      	pop	{r4, r5, r6, r7, pc}
        clock_configure(clk_sys,
10004182:	4f16      	ldr	r7, [pc, #88]	; (100041dc <set_sys_clock_pll+0x70>)
10004184:	2201      	movs	r2, #1
10004186:	003b      	movs	r3, r7
10004188:	2101      	movs	r1, #1
1000418a:	9700      	str	r7, [sp, #0]
1000418c:	3005      	adds	r0, #5
1000418e:	f7fd f8b3 	bl	100012f8 <clock_configure>
        pll_init(pll_sys, 1, vco_freq, post_div1, post_div2);
10004192:	b2eb      	uxtb	r3, r5
10004194:	0032      	movs	r2, r6
10004196:	9300      	str	r3, [sp, #0]
10004198:	2101      	movs	r1, #1
1000419a:	0023      	movs	r3, r4
1000419c:	4810      	ldr	r0, [pc, #64]	; (100041e0 <set_sys_clock_pll+0x74>)
1000419e:	f7fe f8c3 	bl	10002328 <pll_init>
        uint32_t freq = vco_freq / (post_div1 * post_div2);
100041a2:	0021      	movs	r1, r4
100041a4:	0030      	movs	r0, r6
100041a6:	4369      	muls	r1, r5
100041a8:	f7fc f8e4 	bl	10000374 <__wrap___aeabi_uidiv>
100041ac:	0004      	movs	r4, r0
        clock_configure(clk_ref,
100041ae:	4b0d      	ldr	r3, [pc, #52]	; (100041e4 <set_sys_clock_pll+0x78>)
100041b0:	2200      	movs	r2, #0
100041b2:	9300      	str	r3, [sp, #0]
100041b4:	2102      	movs	r1, #2
100041b6:	2004      	movs	r0, #4
100041b8:	f7fd f89e 	bl	100012f8 <clock_configure>
        clock_configure(clk_sys,
100041bc:	0023      	movs	r3, r4
100041be:	2200      	movs	r2, #0
100041c0:	2101      	movs	r1, #1
100041c2:	9400      	str	r4, [sp, #0]
100041c4:	2005      	movs	r0, #5
100041c6:	f7fd f897 	bl	100012f8 <clock_configure>
        clock_configure(clk_peri,
100041ca:	003b      	movs	r3, r7
100041cc:	2202      	movs	r2, #2
100041ce:	2100      	movs	r1, #0
100041d0:	9700      	str	r7, [sp, #0]
100041d2:	2006      	movs	r0, #6
100041d4:	f7fd f890 	bl	100012f8 <clock_configure>
}
100041d8:	e7d1      	b.n	1000417e <set_sys_clock_pll+0x12>
100041da:	46c0      	nop			; (mov r8, r8)
100041dc:	02dc6c00 	.word	0x02dc6c00
100041e0:	40028000 	.word	0x40028000
100041e4:	00b71b00 	.word	0x00b71b00

100041e8 <spin_locks_reset>:
    *lock = 0;
100041e8:	2100      	movs	r1, #0

static void check_lock_num(uint __unused lock_num) {
    invalid_params_if(SYNC, lock_num >= 32);
}

void spin_locks_reset(void) {
100041ea:	4b04      	ldr	r3, [pc, #16]	; (100041fc <spin_locks_reset+0x14>)
    for (uint i = 0; i < NUM_SPIN_LOCKS; i++) {
100041ec:	4a04      	ldr	r2, [pc, #16]	; (10004200 <spin_locks_reset+0x18>)
    __asm volatile ("dmb");
100041ee:	f3bf 8f5f 	dmb	sy
    *lock = 0;
100041f2:	c302      	stmia	r3!, {r1}
100041f4:	4293      	cmp	r3, r2
100041f6:	d1fa      	bne.n	100041ee <spin_locks_reset+0x6>
        spin_unlock_unsafe(spin_lock_instance(i));
    }
}
100041f8:	4770      	bx	lr
100041fa:	46c0      	nop			; (mov r8, r8)
100041fc:	d0000100 	.word	0xd0000100
10004200:	d0000180 	.word	0xd0000180

10004204 <next_striped_spin_lock_num>:
    spin_unlock_unsafe(lock);
    return lock;
}

uint next_striped_spin_lock_num() {
    uint rc = striped_spin_lock_num++;
10004204:	4a04      	ldr	r2, [pc, #16]	; (10004218 <next_striped_spin_lock_num+0x14>)
10004206:	7810      	ldrb	r0, [r2, #0]
10004208:	1c43      	adds	r3, r0, #1
1000420a:	b2db      	uxtb	r3, r3
    if (striped_spin_lock_num > PICO_SPINLOCK_ID_STRIPED_LAST) {
1000420c:	2b17      	cmp	r3, #23
1000420e:	d900      	bls.n	10004212 <next_striped_spin_lock_num+0xe>
        striped_spin_lock_num = PICO_SPINLOCK_ID_STRIPED_FIRST;
10004210:	2310      	movs	r3, #16
10004212:	7013      	strb	r3, [r2, #0]
    }
    return rc;
}
10004214:	4770      	bx	lr
10004216:	46c0      	nop			; (mov r8, r8)
10004218:	2000272c 	.word	0x2000272c

1000421c <spin_lock_claim_unused>:
void spin_lock_unclaim(uint lock_num) {
    check_lock_num(lock_num);
    hw_claim_clear((uint8_t *) &claimed, lock_num);
}

int spin_lock_claim_unused(bool required) {
1000421c:	b500      	push	{lr}
    return hw_claim_unused_from_range((uint8_t*)&claimed, required, PICO_SPINLOCK_ID_CLAIM_FREE_FIRST, PICO_SPINLOCK_ID_CLAIM_FREE_END, "No spinlocks are available");
1000421e:	4b05      	ldr	r3, [pc, #20]	; (10004234 <spin_lock_claim_unused+0x18>)
int spin_lock_claim_unused(bool required) {
10004220:	b083      	sub	sp, #12
10004222:	0001      	movs	r1, r0
    return hw_claim_unused_from_range((uint8_t*)&claimed, required, PICO_SPINLOCK_ID_CLAIM_FREE_FIRST, PICO_SPINLOCK_ID_CLAIM_FREE_END, "No spinlocks are available");
10004224:	9300      	str	r3, [sp, #0]
10004226:	2218      	movs	r2, #24
10004228:	231f      	movs	r3, #31
1000422a:	4803      	ldr	r0, [pc, #12]	; (10004238 <spin_lock_claim_unused+0x1c>)
1000422c:	f7fd f816 	bl	1000125c <hw_claim_unused_from_range>
}
10004230:	b003      	add	sp, #12
10004232:	bd00      	pop	{pc}
10004234:	1000b3b8 	.word	0x1000b3b8
10004238:	20016bfc 	.word	0x20016bfc

1000423c <timer_pool_entry_comparator>:
}
#endif

static inline alarm_pool_entry_t *get_entry(alarm_pool_t *pool, pheap_node_id_t id) {
    assert(id && id <= pool->heap->max_nodes);
    return pool->entries + id - 1;
1000423c:	6883      	ldr	r3, [r0, #8]
1000423e:	480b      	ldr	r0, [pc, #44]	; (1000426c <timer_pool_entry_comparator+0x30>)
static inline uint8_t *get_entry_id_high(alarm_pool_t *pool, pheap_node_id_t id) {
    assert(id && id <= pool->heap->max_nodes);
    return pool->entry_ids_high + id - 1;
}

bool timer_pool_entry_comparator(void *user_data, pheap_node_id_t a, pheap_node_id_t b) {
10004240:	b510      	push	{r4, lr}
    return pool->entries + id - 1;
10004242:	4684      	mov	ip, r0
10004244:	4461      	add	r1, ip
10004246:	4462      	add	r2, ip
    alarm_pool_t *pool = (alarm_pool_t *)user_data;
    return to_us_since_boot(get_entry(pool, a)->target) < to_us_since_boot(get_entry(pool, b)->target);
10004248:	0109      	lsls	r1, r1, #4
1000424a:	0112      	lsls	r2, r2, #4
1000424c:	189a      	adds	r2, r3, r2
1000424e:	1859      	adds	r1, r3, r1
10004250:	6854      	ldr	r4, [r2, #4]
10004252:	684b      	ldr	r3, [r1, #4]
10004254:	2001      	movs	r0, #1
10004256:	429c      	cmp	r4, r3
10004258:	d801      	bhi.n	1000425e <timer_pool_entry_comparator+0x22>
1000425a:	d002      	beq.n	10004262 <timer_pool_entry_comparator+0x26>
1000425c:	2000      	movs	r0, #0
1000425e:	b2c0      	uxtb	r0, r0
}
10004260:	bd10      	pop	{r4, pc}
    return to_us_since_boot(get_entry(pool, a)->target) < to_us_since_boot(get_entry(pool, b)->target);
10004262:	6812      	ldr	r2, [r2, #0]
10004264:	680b      	ldr	r3, [r1, #0]
10004266:	429a      	cmp	r2, r3
10004268:	d8f9      	bhi.n	1000425e <timer_pool_entry_comparator+0x22>
1000426a:	e7f7      	b.n	1000425c <timer_pool_entry_comparator+0x20>
1000426c:	0fffffff 	.word	0x0fffffff

10004270 <sev_callback>:
    __asm volatile ("sev");
10004270:	bf40      	sev

#if !PICO_TIME_DEFAULT_ALARM_POOL_DISABLED
static int64_t sev_callback(alarm_id_t id, void *user_data) {
    __sev();
    return 0;
}
10004272:	2000      	movs	r0, #0
10004274:	2100      	movs	r1, #0
10004276:	4770      	bx	lr

10004278 <add_alarm_under_lock.isra.0>:
static alarm_id_t add_alarm_under_lock(alarm_pool_t *pool, absolute_time_t time, alarm_callback_t callback,
10004278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000427a:	46de      	mov	lr, fp
1000427c:	4657      	mov	r7, sl
1000427e:	464e      	mov	r6, r9
10004280:	4645      	mov	r5, r8
10004282:	b5e0      	push	{r5, r6, r7, lr}
10004284:	001f      	movs	r7, r3
10004286:	ab0d      	add	r3, sp, #52	; 0x34
10004288:	781b      	ldrb	r3, [r3, #0]
1000428a:	0005      	movs	r5, r0
1000428c:	469b      	mov	fp, r3
    if (reuse_id) {
1000428e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
static alarm_id_t add_alarm_under_lock(alarm_pool_t *pool, absolute_time_t time, alarm_callback_t callback,
10004290:	0016      	movs	r6, r2
    if (reuse_id) {
10004292:	2b00      	cmp	r3, #0
10004294:	d045      	beq.n	10004322 <add_alarm_under_lock.isra.0+0xaa>
    return pool->entries + id - 1;
10004296:	4a3f      	ldr	r2, [pc, #252]	; (10004394 <add_alarm_under_lock.isra.0+0x11c>)
        alarm_pool_entry_t *entry = get_entry(pool, id);
10004298:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    return pool->entries + id - 1;
1000429a:	4694      	mov	ip, r2
        alarm_pool_entry_t *entry = get_entry(pool, id);
1000429c:	b2db      	uxtb	r3, r3
    return pool->entries + id - 1;
1000429e:	68aa      	ldr	r2, [r5, #8]
        alarm_pool_entry_t *entry = get_entry(pool, id);
100042a0:	469a      	mov	sl, r3
    return pool->entries + id - 1;
100042a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
        if (id == ph_insert(pool->heap, id)) {
100042a4:	682c      	ldr	r4, [r5, #0]
    return pool->entries + id - 1;
100042a6:	4463      	add	r3, ip
100042a8:	4694      	mov	ip, r2
100042aa:	011b      	lsls	r3, r3, #4
        entry->callback = callback;
100042ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    return pool->entries + id - 1;
100042ae:	4463      	add	r3, ip
        entry->callback = callback;
100042b0:	609a      	str	r2, [r3, #8]
        entry->user_data = user_data;
100042b2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
        entry->target = time;
100042b4:	601e      	str	r6, [r3, #0]
        entry->user_data = user_data;
100042b6:	60da      	str	r2, [r3, #12]
100042b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
        entry->target = time;
100042ba:	605f      	str	r7, [r3, #4]
100042bc:	4694      	mov	ip, r2
100042be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    hn->child = hn->sibling = hn->parent = 0;
100042c0:	2200      	movs	r2, #0
    return heap->nodes + id - 1;
100042c2:	005b      	lsls	r3, r3, #1
100042c4:	4463      	add	r3, ip
100042c6:	3b03      	subs	r3, #3
100042c8:	4698      	mov	r8, r3
100042ca:	6823      	ldr	r3, [r4, #0]
100042cc:	4443      	add	r3, r8
    hn->child = hn->sibling = hn->parent = 0;
100042ce:	709a      	strb	r2, [r3, #2]
100042d0:	705a      	strb	r2, [r3, #1]
100042d2:	701a      	strb	r2, [r3, #0]
    heap->root_id = ph_merge_nodes(heap, heap->root_id, id);
100042d4:	7b63      	ldrb	r3, [r4, #13]
100042d6:	4699      	mov	r9, r3
    if (!a) return b;
100042d8:	2b00      	cmp	r3, #0
100042da:	d042      	beq.n	10004362 <add_alarm_under_lock.isra.0+0xea>
    if (heap->comparator(heap->user_data, a, b)) {
100042dc:	4652      	mov	r2, sl
100042de:	0019      	movs	r1, r3
100042e0:	68a0      	ldr	r0, [r4, #8]
100042e2:	6863      	ldr	r3, [r4, #4]
100042e4:	4798      	blx	r3
    return heap->nodes + id - 1;
100042e6:	6822      	ldr	r2, [r4, #0]
    if (heap->comparator(heap->user_data, a, b)) {
100042e8:	2800      	cmp	r0, #0
100042ea:	d02b      	beq.n	10004344 <add_alarm_under_lock.isra.0+0xcc>
    return heap->nodes + id - 1;
100042ec:	464b      	mov	r3, r9
100042ee:	005b      	lsls	r3, r3, #1
100042f0:	444b      	add	r3, r9
100042f2:	3b03      	subs	r3, #3
100042f4:	18d1      	adds	r1, r2, r3
100042f6:	468c      	mov	ip, r1
100042f8:	4641      	mov	r1, r8
    c->parent = parent_id;
100042fa:	4648      	mov	r0, r9
    return heap->nodes + id - 1;
100042fc:	1851      	adds	r1, r2, r1
    c->parent = parent_id;
100042fe:	7088      	strb	r0, [r1, #2]
    if (!n->child) {
10004300:	5cd3      	ldrb	r3, [r2, r3]
10004302:	2b00      	cmp	r3, #0
10004304:	d142      	bne.n	1000438c <add_alarm_under_lock.isra.0+0x114>
        n->child = child_id;
10004306:	4653      	mov	r3, sl
10004308:	4662      	mov	r2, ip
1000430a:	7013      	strb	r3, [r2, #0]
    heap->root_id = ph_merge_nodes(heap, heap->root_id, id);
1000430c:	464b      	mov	r3, r9
1000430e:	7363      	strb	r3, [r4, #13]
        if (id == ph_insert(pool->heap, id)) {
10004310:	9b0c      	ldr	r3, [sp, #48]	; 0x30
10004312:	4599      	cmp	r9, r3
10004314:	d027      	beq.n	10004366 <add_alarm_under_lock.isra.0+0xee>
}
10004316:	bcf0      	pop	{r4, r5, r6, r7}
10004318:	46bb      	mov	fp, r7
1000431a:	46b2      	mov	sl, r6
1000431c:	46a9      	mov	r9, r5
1000431e:	46a0      	mov	r8, r4
10004320:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        id = ph_new_node(pool->heap);
10004322:	6802      	ldr	r2, [r0, #0]
    if (!heap->free_head_id) return 0;
10004324:	7b94      	ldrb	r4, [r2, #14]
10004326:	2c00      	cmp	r4, #0
10004328:	d0f5      	beq.n	10004316 <add_alarm_under_lock.isra.0+0x9e>
    heap->free_head_id = ph_get_node(heap, id)->sibling;
1000432a:	6811      	ldr	r1, [r2, #0]
1000432c:	0063      	lsls	r3, r4, #1
1000432e:	468c      	mov	ip, r1
10004330:	191b      	adds	r3, r3, r4
10004332:	4463      	add	r3, ip
10004334:	3b03      	subs	r3, #3
10004336:	785b      	ldrb	r3, [r3, #1]
10004338:	7393      	strb	r3, [r2, #14]
    if (!heap->free_head_id) heap->free_tail_id = 0;
1000433a:	2b00      	cmp	r3, #0
1000433c:	d100      	bne.n	10004340 <add_alarm_under_lock.isra.0+0xc8>
1000433e:	73d3      	strb	r3, [r2, #15]
10004340:	940c      	str	r4, [sp, #48]	; 0x30
    if (id) {
10004342:	e7a8      	b.n	10004296 <add_alarm_under_lock.isra.0+0x1e>
    return heap->nodes + id - 1;
10004344:	4643      	mov	r3, r8
10004346:	18d1      	adds	r1, r2, r3
10004348:	464b      	mov	r3, r9
    c->parent = parent_id;
1000434a:	4650      	mov	r0, sl
    return heap->nodes + id - 1;
1000434c:	005b      	lsls	r3, r3, #1
1000434e:	444b      	add	r3, r9
10004350:	3b03      	subs	r3, #3
10004352:	18d3      	adds	r3, r2, r3
    c->parent = parent_id;
10004354:	7098      	strb	r0, [r3, #2]
    if (!n->child) {
10004356:	4640      	mov	r0, r8
10004358:	5c12      	ldrb	r2, [r2, r0]
1000435a:	2a00      	cmp	r2, #0
1000435c:	d118      	bne.n	10004390 <add_alarm_under_lock.isra.0+0x118>
        n->child = child_id;
1000435e:	464b      	mov	r3, r9
10004360:	700b      	strb	r3, [r1, #0]
    heap->root_id = ph_merge_nodes(heap, heap->root_id, id);
10004362:	4653      	mov	r3, sl
10004364:	7363      	strb	r3, [r4, #13]
            bool is_missed = hardware_alarm_set_target(pool->hardware_alarm_num, time);
10004366:	0032      	movs	r2, r6
10004368:	003b      	movs	r3, r7
1000436a:	7d28      	ldrb	r0, [r5, #20]
1000436c:	f000 fc1e 	bl	10004bac <hardware_alarm_set_target>
10004370:	1e04      	subs	r4, r0, #0
            if (is_missed && !create_if_past) {
10004372:	d006      	beq.n	10004382 <add_alarm_under_lock.isra.0+0x10a>
10004374:	465b      	mov	r3, fp
10004376:	2b00      	cmp	r3, #0
10004378:	d103      	bne.n	10004382 <add_alarm_under_lock.isra.0+0x10a>
                ph_delete(pool->heap, id);
1000437a:	4651      	mov	r1, sl
1000437c:	6828      	ldr	r0, [r5, #0]
1000437e:	f7fd fe7b 	bl	10002078 <ph_delete>
            if (missed) *missed = is_missed;
10004382:	9b0e      	ldr	r3, [sp, #56]	; 0x38
10004384:	2b00      	cmp	r3, #0
10004386:	d0c6      	beq.n	10004316 <add_alarm_under_lock.isra.0+0x9e>
10004388:	701c      	strb	r4, [r3, #0]
    return id;
1000438a:	e7c4      	b.n	10004316 <add_alarm_under_lock.isra.0+0x9e>
        c->sibling = n->child;
1000438c:	704b      	strb	r3, [r1, #1]
1000438e:	e7ba      	b.n	10004306 <add_alarm_under_lock.isra.0+0x8e>
10004390:	705a      	strb	r2, [r3, #1]
10004392:	e7e4      	b.n	1000435e <add_alarm_under_lock.isra.0+0xe6>
10004394:	0fffffff 	.word	0x0fffffff

10004398 <alarm_pool_alarm_callback>:
static void alarm_pool_alarm_callback(uint alarm_num) {
10004398:	b5f0      	push	{r4, r5, r6, r7, lr}
1000439a:	46de      	mov	lr, fp
1000439c:	464e      	mov	r6, r9
1000439e:	4657      	mov	r7, sl
100043a0:	4645      	mov	r5, r8
100043a2:	2300      	movs	r3, #0
100043a4:	b5e0      	push	{r5, r6, r7, lr}
100043a6:	b08d      	sub	sp, #52	; 0x34
100043a8:	930a      	str	r3, [sp, #40]	; 0x28
    alarm_pool_t *pool = pools[alarm_num];
100043aa:	4b6b      	ldr	r3, [pc, #428]	; (10004558 <alarm_pool_alarm_callback+0x1c0>)
100043ac:	0082      	lsls	r2, r0, #2
100043ae:	58d3      	ldr	r3, [r2, r3]
static void alarm_pool_alarm_callback(uint alarm_num) {
100043b0:	900b      	str	r0, [sp, #44]	; 0x2c
    alarm_pool_t *pool = pools[alarm_num];
100043b2:	4699      	mov	r9, r3
        void *user_data = NULL;
100043b4:	2300      	movs	r3, #0
100043b6:	469b      	mov	fp, r3
100043b8:	464b      	mov	r3, r9
100043ba:	9307      	str	r3, [sp, #28]
    update_us_since_boot(&t, time_us_64());
100043bc:	f000 fb96 	bl	10004aec <time_us_64>
        uint32_t save = spin_lock_blocking(pool->lock);
100043c0:	9c07      	ldr	r4, [sp, #28]
100043c2:	0006      	movs	r6, r0
100043c4:	000f      	movs	r7, r1
100043c6:	6862      	ldr	r2, [r4, #4]
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
100043c8:	f3ef 8510 	mrs	r5, PRIMASK
    __asm volatile ("cpsid i");
100043cc:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
100043ce:	6813      	ldr	r3, [r2, #0]
100043d0:	2b00      	cmp	r3, #0
100043d2:	d0fc      	beq.n	100043ce <alarm_pool_alarm_callback+0x36>
    __asm volatile ("dmb");
100043d4:	0022      	movs	r2, r4
100043d6:	9407      	str	r4, [sp, #28]
100043d8:	f3bf 8f5f 	dmb	sy
        pheap_node_id_t next_id = ph_peek_head(pool->heap);
100043dc:	6824      	ldr	r4, [r4, #0]
    return heap->root_id;
100043de:	7b63      	ldrb	r3, [r4, #13]
100043e0:	4699      	mov	r9, r3
        if (next_id) {
100043e2:	2b00      	cmp	r3, #0
100043e4:	d067      	beq.n	100044b6 <alarm_pool_alarm_callback+0x11e>
    return pool->entries + id - 1;
100043e6:	6892      	ldr	r2, [r2, #8]
100043e8:	4b5c      	ldr	r3, [pc, #368]	; (1000455c <alarm_pool_alarm_callback+0x1c4>)
100043ea:	4690      	mov	r8, r2
100043ec:	444b      	add	r3, r9
100043ee:	011b      	lsls	r3, r3, #4
100043f0:	4498      	add	r8, r3
            if (absolute_time_diff_us(now, entry->target) <= 0) {
100043f2:	4643      	mov	r3, r8
100043f4:	681a      	ldr	r2, [r3, #0]
100043f6:	685b      	ldr	r3, [r3, #4]
    return to_us_since_boot(to) - to_us_since_boot(from);
100043f8:	0010      	movs	r0, r2
100043fa:	0019      	movs	r1, r3
100043fc:	1b80      	subs	r0, r0, r6
100043fe:	41b9      	sbcs	r1, r7
10004400:	2900      	cmp	r1, #0
10004402:	dd5f      	ble.n	100044c4 <alarm_pool_alarm_callback+0x12c>
                if (hardware_alarm_set_target(alarm_num, entry->target)) {
10004404:	980b      	ldr	r0, [sp, #44]	; 0x2c
10004406:	f000 fbd1 	bl	10004bac <hardware_alarm_set_target>
        void *user_data = NULL;
1000440a:	2300      	movs	r3, #0
        absolute_time_t target = nil_time;
1000440c:	2600      	movs	r6, #0
        void *user_data = NULL;
1000440e:	4698      	mov	r8, r3
        absolute_time_t target = nil_time;
10004410:	2700      	movs	r7, #0
        alarm_callback_t callback = NULL;
10004412:	469a      	mov	sl, r3
        spin_unlock(pool->lock, save);
10004414:	9c07      	ldr	r4, [sp, #28]
10004416:	6863      	ldr	r3, [r4, #4]
10004418:	f3bf 8f5f 	dmb	sy
    *lock = 0;
1000441c:	465a      	mov	r2, fp
1000441e:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10004420:	f385 8810 	msr	PRIMASK, r5
        if (callback) {
10004424:	4653      	mov	r3, sl
10004426:	2b00      	cmp	r3, #0
10004428:	d108      	bne.n	1000443c <alarm_pool_alarm_callback+0xa4>
    } while (again);
1000442a:	2800      	cmp	r0, #0
1000442c:	d1c6      	bne.n	100043bc <alarm_pool_alarm_callback+0x24>
}
1000442e:	b00d      	add	sp, #52	; 0x34
10004430:	bcf0      	pop	{r4, r5, r6, r7}
10004432:	46bb      	mov	fp, r7
10004434:	46b2      	mov	sl, r6
10004436:	46a9      	mov	r9, r5
10004438:	46a0      	mov	r8, r4
1000443a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return ((uint)id_high << 8u * sizeof(id)) | id;
1000443c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
            int64_t repeat = callback(make_public_id(id_high, next_id), user_data);
1000443e:	4641      	mov	r1, r8
    return ((uint)id_high << 8u * sizeof(id)) | id;
10004440:	0218      	lsls	r0, r3, #8
10004442:	464b      	mov	r3, r9
10004444:	4318      	orrs	r0, r3
            int64_t repeat = callback(make_public_id(id_high, next_id), user_data);
10004446:	47d0      	blx	sl
10004448:	9008      	str	r0, [sp, #32]
1000444a:	9109      	str	r1, [sp, #36]	; 0x24
            save = spin_lock_blocking(pool->lock);
1000444c:	6862      	ldr	r2, [r4, #4]
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
1000444e:	f3ef 8510 	mrs	r5, PRIMASK
    __asm volatile ("cpsid i");
10004452:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
10004454:	6813      	ldr	r3, [r2, #0]
10004456:	2b00      	cmp	r3, #0
10004458:	d0fc      	beq.n	10004454 <alarm_pool_alarm_callback+0xbc>
    __asm volatile ("dmb");
1000445a:	9407      	str	r4, [sp, #28]
1000445c:	f3bf 8f5f 	dmb	sy
            if (repeat < 0 && pool->alarm_in_progress) {
10004460:	9908      	ldr	r1, [sp, #32]
10004462:	9a09      	ldr	r2, [sp, #36]	; 0x24
10004464:	2a00      	cmp	r2, #0
10004466:	db48      	blt.n	100044fa <alarm_pool_alarm_callback+0x162>
            } else if (repeat > 0 && pool->alarm_in_progress) {
10004468:	4311      	orrs	r1, r2
1000446a:	d003      	beq.n	10004474 <alarm_pool_alarm_callback+0xdc>
1000446c:	9b07      	ldr	r3, [sp, #28]
1000446e:	691b      	ldr	r3, [r3, #16]
10004470:	2b00      	cmp	r3, #0
10004472:	d15d      	bne.n	10004530 <alarm_pool_alarm_callback+0x198>
                ph_add_to_free_list(pool->heap, next_id);
10004474:	9b07      	ldr	r3, [sp, #28]
10004476:	681b      	ldr	r3, [r3, #0]

bool ph_delete(pheap_t *heap, pheap_node_id_t id);

static inline void ph_add_to_free_list(pheap_t *heap, pheap_node_id_t id) {
    assert(id && !ph_contains(heap, id));
    if (heap->free_tail_id) {
10004478:	7bd9      	ldrb	r1, [r3, #15]
1000447a:	2900      	cmp	r1, #0
1000447c:	d007      	beq.n	1000448e <alarm_pool_alarm_callback+0xf6>
        ph_get_node(heap, heap->free_tail_id)->sibling = id;
1000447e:	004a      	lsls	r2, r1, #1
10004480:	1852      	adds	r2, r2, r1
10004482:	6819      	ldr	r1, [r3, #0]
10004484:	468c      	mov	ip, r1
10004486:	4649      	mov	r1, r9
10004488:	4462      	add	r2, ip
1000448a:	3a03      	subs	r2, #3
1000448c:	7051      	strb	r1, [r2, #1]
    }
    heap->free_tail_id = id;
1000448e:	464a      	mov	r2, r9
10004490:	73da      	strb	r2, [r3, #15]
    return pool->entry_ids_high + id - 1;
10004492:	464b      	mov	r3, r9
10004494:	9a07      	ldr	r2, [sp, #28]
10004496:	3b01      	subs	r3, #1
10004498:	68d1      	ldr	r1, [r2, #12]
                (*get_entry_id_high(pool, next_id))++; // we bump it for next use of id
1000449a:	5cca      	ldrb	r2, [r1, r3]
1000449c:	3201      	adds	r2, #1
1000449e:	54ca      	strb	r2, [r1, r3]
            pool->alarm_in_progress = 0;
100044a0:	465b      	mov	r3, fp
100044a2:	9a07      	ldr	r2, [sp, #28]
100044a4:	6113      	str	r3, [r2, #16]
            spin_unlock(pool->lock, save);
100044a6:	6853      	ldr	r3, [r2, #4]
100044a8:	f3bf 8f5f 	dmb	sy
    *lock = 0;
100044ac:	465a      	mov	r2, fp
100044ae:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
100044b0:	f385 8810 	msr	PRIMASK, r5
    } while (again);
100044b4:	e782      	b.n	100043bc <alarm_pool_alarm_callback+0x24>
        void *user_data = NULL;
100044b6:	2300      	movs	r3, #0
        absolute_time_t target = nil_time;
100044b8:	2600      	movs	r6, #0
        void *user_data = NULL;
100044ba:	4698      	mov	r8, r3
        absolute_time_t target = nil_time;
100044bc:	2700      	movs	r7, #0
        alarm_callback_t callback = NULL;
100044be:	469a      	mov	sl, r3
        again = false;
100044c0:	2000      	movs	r0, #0
100044c2:	e7a7      	b.n	10004414 <alarm_pool_alarm_callback+0x7c>
            if (absolute_time_diff_us(now, entry->target) <= 0) {
100044c4:	2900      	cmp	r1, #0
100044c6:	d101      	bne.n	100044cc <alarm_pool_alarm_callback+0x134>
100044c8:	2800      	cmp	r0, #0
100044ca:	d19b      	bne.n	10004404 <alarm_pool_alarm_callback+0x6c>
                pheap_node_id_t __unused removed_id = ph_remove_head_reserve(pool->heap, true);
100044cc:	2101      	movs	r1, #1
100044ce:	0020      	movs	r0, r4
100044d0:	f7fd fd54 	bl	10001f7c <ph_remove_head_reserve>
                target = entry->target;
100044d4:	4643      	mov	r3, r8
100044d6:	681e      	ldr	r6, [r3, #0]
100044d8:	685f      	ldr	r7, [r3, #4]
                callback = entry->callback;
100044da:	689b      	ldr	r3, [r3, #8]
                id_high = *get_entry_id_high(pool, next_id);
100044dc:	9a07      	ldr	r2, [sp, #28]
                callback = entry->callback;
100044de:	469a      	mov	sl, r3
                user_data = entry->user_data;
100044e0:	4643      	mov	r3, r8
100044e2:	68db      	ldr	r3, [r3, #12]
100044e4:	4698      	mov	r8, r3
                id_high = *get_entry_id_high(pool, next_id);
100044e6:	68d3      	ldr	r3, [r2, #12]
100044e8:	444b      	add	r3, r9
100044ea:	3b01      	subs	r3, #1
100044ec:	781b      	ldrb	r3, [r3, #0]
100044ee:	930a      	str	r3, [sp, #40]	; 0x28
    return ((uint)id_high << 8u * sizeof(id)) | id;
100044f0:	021b      	lsls	r3, r3, #8
100044f2:	4303      	orrs	r3, r0
                pool->alarm_in_progress = make_public_id(id_high, removed_id);
100044f4:	6113      	str	r3, [r2, #16]
        again = false;
100044f6:	2000      	movs	r0, #0
100044f8:	e78c      	b.n	10004414 <alarm_pool_alarm_callback+0x7c>
            if (repeat < 0 && pool->alarm_in_progress) {
100044fa:	6923      	ldr	r3, [r4, #16]
100044fc:	2b00      	cmp	r3, #0
100044fe:	d0b9      	beq.n	10004474 <alarm_pool_alarm_callback+0xdc>
    uint64_t delayed = base + us;
10004500:	0033      	movs	r3, r6
10004502:	003c      	movs	r4, r7
10004504:	1a5b      	subs	r3, r3, r1
10004506:	4194      	sbcs	r4, r2
10004508:	001a      	movs	r2, r3
1000450a:	0023      	movs	r3, r4
    if (delayed < base) {
1000450c:	42a7      	cmp	r7, r4
1000450e:	d819      	bhi.n	10004544 <alarm_pool_alarm_callback+0x1ac>
10004510:	429f      	cmp	r7, r3
10004512:	d01b      	beq.n	1000454c <alarm_pool_alarm_callback+0x1b4>
                add_alarm_under_lock(pool, delayed_by_us(get_absolute_time(), repeat), callback, user_data, next_id,
10004514:	4659      	mov	r1, fp
10004516:	9104      	str	r1, [sp, #16]
10004518:	2101      	movs	r1, #1
1000451a:	9103      	str	r1, [sp, #12]
1000451c:	4649      	mov	r1, r9
1000451e:	9102      	str	r1, [sp, #8]
10004520:	4641      	mov	r1, r8
10004522:	9101      	str	r1, [sp, #4]
10004524:	4651      	mov	r1, sl
10004526:	9807      	ldr	r0, [sp, #28]
10004528:	9100      	str	r1, [sp, #0]
1000452a:	f7ff fea5 	bl	10004278 <add_alarm_under_lock.isra.0>
1000452e:	e7b7      	b.n	100044a0 <alarm_pool_alarm_callback+0x108>
    update_us_since_boot(&t, time_us_64());
10004530:	f000 fadc 	bl	10004aec <time_us_64>
    uint64_t delayed = base + us;
10004534:	9a08      	ldr	r2, [sp, #32]
10004536:	9b09      	ldr	r3, [sp, #36]	; 0x24
    update_us_since_boot(&t, time_us_64());
10004538:	0006      	movs	r6, r0
1000453a:	000f      	movs	r7, r1
    uint64_t delayed = base + us;
1000453c:	1992      	adds	r2, r2, r6
1000453e:	417b      	adcs	r3, r7
    if (delayed < base) {
10004540:	4299      	cmp	r1, r3
10004542:	d9e5      	bls.n	10004510 <alarm_pool_alarm_callback+0x178>
        delayed = (uint64_t)-1;
10004544:	2201      	movs	r2, #1
10004546:	4252      	negs	r2, r2
10004548:	17d3      	asrs	r3, r2, #31
1000454a:	e7e3      	b.n	10004514 <alarm_pool_alarm_callback+0x17c>
    if (delayed < base) {
1000454c:	4296      	cmp	r6, r2
1000454e:	d9e1      	bls.n	10004514 <alarm_pool_alarm_callback+0x17c>
        delayed = (uint64_t)-1;
10004550:	2201      	movs	r2, #1
10004552:	4252      	negs	r2, r2
10004554:	17d3      	asrs	r3, r2, #31
10004556:	e7dd      	b.n	10004514 <alarm_pool_alarm_callback+0x17c>
10004558:	200172ec 	.word	0x200172ec
1000455c:	0fffffff 	.word	0x0fffffff

10004560 <alarm_pool_add_alarm_at.constprop.0>:
alarm_id_t alarm_pool_add_alarm_at(alarm_pool_t *pool, absolute_time_t time, alarm_callback_t callback,
10004560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10004562:	4657      	mov	r7, sl
10004564:	464e      	mov	r6, r9
10004566:	46de      	mov	lr, fp
10004568:	4645      	mov	r5, r8
1000456a:	4691      	mov	r9, r2
1000456c:	b5e0      	push	{r5, r6, r7, lr}
1000456e:	0004      	movs	r4, r0
10004570:	469a      	mov	sl, r3
        uint32_t save = spin_lock_blocking(pool->lock);
10004572:	6842      	ldr	r2, [r0, #4]
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
10004574:	f3ef 8810 	mrs	r8, PRIMASK
    __asm volatile ("cpsid i");
10004578:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
1000457a:	6813      	ldr	r3, [r2, #0]
1000457c:	2b00      	cmp	r3, #0
1000457e:	d0fc      	beq.n	1000457a <alarm_pool_add_alarm_at.constprop.0+0x1a>
    __asm volatile ("dmb");
10004580:	f3bf 8f5f 	dmb	sy
        id = ph_new_node(pool->heap);
10004584:	6826      	ldr	r6, [r4, #0]
    if (!heap->free_head_id) return 0;
10004586:	7bb5      	ldrb	r5, [r6, #14]
10004588:	2d00      	cmp	r5, #0
1000458a:	d048      	beq.n	1000461e <alarm_pool_add_alarm_at.constprop.0+0xbe>
    return heap->nodes + id - 1;
1000458c:	006f      	lsls	r7, r5, #1
1000458e:	6833      	ldr	r3, [r6, #0]
10004590:	197f      	adds	r7, r7, r5
10004592:	3f03      	subs	r7, #3
10004594:	19d9      	adds	r1, r3, r7
    heap->free_head_id = ph_get_node(heap, id)->sibling;
10004596:	784b      	ldrb	r3, [r1, #1]
10004598:	73b3      	strb	r3, [r6, #14]
    if (!heap->free_head_id) heap->free_tail_id = 0;
1000459a:	2b00      	cmp	r3, #0
1000459c:	d100      	bne.n	100045a0 <alarm_pool_add_alarm_at.constprop.0+0x40>
1000459e:	73f3      	strb	r3, [r6, #15]
    return pool->entries + id - 1;
100045a0:	68a2      	ldr	r2, [r4, #8]
100045a2:	4b34      	ldr	r3, [pc, #208]	; (10004674 <alarm_pool_add_alarm_at.constprop.0+0x114>)
100045a4:	4694      	mov	ip, r2
        entry->target = time;
100045a6:	464a      	mov	r2, r9
    return pool->entries + id - 1;
100045a8:	18eb      	adds	r3, r5, r3
100045aa:	011b      	lsls	r3, r3, #4
100045ac:	4463      	add	r3, ip
        entry->target = time;
100045ae:	601a      	str	r2, [r3, #0]
100045b0:	4652      	mov	r2, sl
100045b2:	605a      	str	r2, [r3, #4]
        entry->callback = callback;
100045b4:	4a30      	ldr	r2, [pc, #192]	; (10004678 <alarm_pool_add_alarm_at.constprop.0+0x118>)
100045b6:	609a      	str	r2, [r3, #8]
        entry->user_data = user_data;
100045b8:	2200      	movs	r2, #0
100045ba:	60da      	str	r2, [r3, #12]
    hn->child = hn->sibling = hn->parent = 0;
100045bc:	708a      	strb	r2, [r1, #2]
100045be:	704a      	strb	r2, [r1, #1]
100045c0:	700a      	strb	r2, [r1, #0]
    heap->root_id = ph_merge_nodes(heap, heap->root_id, id);
100045c2:	7b73      	ldrb	r3, [r6, #13]
100045c4:	469b      	mov	fp, r3
    if (!a) return b;
100045c6:	2b00      	cmp	r3, #0
100045c8:	d043      	beq.n	10004652 <alarm_pool_add_alarm_at.constprop.0+0xf2>
    if (heap->comparator(heap->user_data, a, b)) {
100045ca:	002a      	movs	r2, r5
100045cc:	0019      	movs	r1, r3
100045ce:	68b0      	ldr	r0, [r6, #8]
100045d0:	6873      	ldr	r3, [r6, #4]
100045d2:	4798      	blx	r3
    return heap->nodes + id - 1;
100045d4:	6832      	ldr	r2, [r6, #0]
    if (heap->comparator(heap->user_data, a, b)) {
100045d6:	2800      	cmp	r0, #0
100045d8:	d02f      	beq.n	1000463a <alarm_pool_add_alarm_at.constprop.0+0xda>
    return heap->nodes + id - 1;
100045da:	465b      	mov	r3, fp
    c->parent = parent_id;
100045dc:	4658      	mov	r0, fp
    return heap->nodes + id - 1;
100045de:	005b      	lsls	r3, r3, #1
100045e0:	445b      	add	r3, fp
100045e2:	19d7      	adds	r7, r2, r7
100045e4:	3b03      	subs	r3, #3
    c->parent = parent_id;
100045e6:	70b8      	strb	r0, [r7, #2]
    return heap->nodes + id - 1;
100045e8:	18d1      	adds	r1, r2, r3
    if (!n->child) {
100045ea:	5cd3      	ldrb	r3, [r2, r3]
100045ec:	2b00      	cmp	r3, #0
100045ee:	d13f      	bne.n	10004670 <alarm_pool_add_alarm_at.constprop.0+0x110>
    heap->root_id = ph_merge_nodes(heap, heap->root_id, id);
100045f0:	465b      	mov	r3, fp
        n->child = child_id;
100045f2:	700d      	strb	r5, [r1, #0]
    heap->root_id = ph_merge_nodes(heap, heap->root_id, id);
100045f4:	7373      	strb	r3, [r6, #13]
        if (id == ph_insert(pool->heap, id)) {
100045f6:	455d      	cmp	r5, fp
100045f8:	d02c      	beq.n	10004654 <alarm_pool_add_alarm_at.constprop.0+0xf4>
    bool missed = false;
100045fa:	2600      	movs	r6, #0
        if (id) id_high = *get_entry_id_high(pool, id);
100045fc:	68e3      	ldr	r3, [r4, #12]
100045fe:	195b      	adds	r3, r3, r5
10004600:	3b01      	subs	r3, #1
10004602:	7819      	ldrb	r1, [r3, #0]
        spin_unlock(pool->lock, save);
10004604:	6863      	ldr	r3, [r4, #4]
10004606:	f3bf 8f5f 	dmb	sy
    *lock = 0;
1000460a:	2200      	movs	r2, #0
1000460c:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
1000460e:	f388 8810 	msr	PRIMASK, r8
        public_id = missed ? 0 : make_public_id(id_high, id);
10004612:	2000      	movs	r0, #0
10004614:	2e00      	cmp	r6, #0
10004616:	d10a      	bne.n	1000462e <alarm_pool_add_alarm_at.constprop.0+0xce>
    return ((uint)id_high << 8u * sizeof(id)) | id;
10004618:	0208      	lsls	r0, r1, #8
1000461a:	4328      	orrs	r0, r5
1000461c:	e007      	b.n	1000462e <alarm_pool_add_alarm_at.constprop.0+0xce>
        spin_unlock(pool->lock, save);
1000461e:	6863      	ldr	r3, [r4, #4]
    __asm volatile ("dmb");
10004620:	f3bf 8f5f 	dmb	sy
    *lock = 0;
10004624:	601d      	str	r5, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10004626:	f388 8810 	msr	PRIMASK, r8
            return -1;
1000462a:	2001      	movs	r0, #1
1000462c:	4240      	negs	r0, r0
}
1000462e:	bcf0      	pop	{r4, r5, r6, r7}
10004630:	46bb      	mov	fp, r7
10004632:	46b2      	mov	sl, r6
10004634:	46a9      	mov	r9, r5
10004636:	46a0      	mov	r8, r4
10004638:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return heap->nodes + id - 1;
1000463a:	465b      	mov	r3, fp
1000463c:	005b      	lsls	r3, r3, #1
1000463e:	445b      	add	r3, fp
10004640:	3b03      	subs	r3, #3
10004642:	18d3      	adds	r3, r2, r3
    c->parent = parent_id;
10004644:	709d      	strb	r5, [r3, #2]
    return heap->nodes + id - 1;
10004646:	19d1      	adds	r1, r2, r7
    if (!n->child) {
10004648:	5dd2      	ldrb	r2, [r2, r7]
1000464a:	2a00      	cmp	r2, #0
1000464c:	d10e      	bne.n	1000466c <alarm_pool_add_alarm_at.constprop.0+0x10c>
        n->child = child_id;
1000464e:	465b      	mov	r3, fp
10004650:	700b      	strb	r3, [r1, #0]
    heap->root_id = ph_merge_nodes(heap, heap->root_id, id);
10004652:	7375      	strb	r5, [r6, #13]
            bool is_missed = hardware_alarm_set_target(pool->hardware_alarm_num, time);
10004654:	464a      	mov	r2, r9
10004656:	4653      	mov	r3, sl
10004658:	7d20      	ldrb	r0, [r4, #20]
1000465a:	f000 faa7 	bl	10004bac <hardware_alarm_set_target>
1000465e:	1e06      	subs	r6, r0, #0
            if (is_missed && !create_if_past) {
10004660:	d0cb      	beq.n	100045fa <alarm_pool_add_alarm_at.constprop.0+0x9a>
                ph_delete(pool->heap, id);
10004662:	0029      	movs	r1, r5
10004664:	6820      	ldr	r0, [r4, #0]
10004666:	f7fd fd07 	bl	10002078 <ph_delete>
1000466a:	e7c7      	b.n	100045fc <alarm_pool_add_alarm_at.constprop.0+0x9c>
        c->sibling = n->child;
1000466c:	705a      	strb	r2, [r3, #1]
1000466e:	e7ee      	b.n	1000464e <alarm_pool_add_alarm_at.constprop.0+0xee>
10004670:	707b      	strb	r3, [r7, #1]
10004672:	e7bd      	b.n	100045f0 <alarm_pool_add_alarm_at.constprop.0+0x90>
10004674:	0fffffff 	.word	0x0fffffff
10004678:	10004271 	.word	0x10004271

1000467c <alarm_pool_init_default>:
void alarm_pool_init_default() {
1000467c:	b570      	push	{r4, r5, r6, lr}
    if (!default_alarm_pool) {
1000467e:	4c18      	ldr	r4, [pc, #96]	; (100046e0 <alarm_pool_init_default+0x64>)
10004680:	6823      	ldr	r3, [r4, #0]
10004682:	2b00      	cmp	r3, #0
10004684:	d000      	beq.n	10004688 <alarm_pool_init_default+0xc>
}
10004686:	bd70      	pop	{r4, r5, r6, pc}
    hardware_alarm_claim(hardware_alarm_num);
10004688:	2003      	movs	r0, #3
1000468a:	f000 fa23 	bl	10004ad4 <hardware_alarm_claim>
    hardware_alarm_cancel(hardware_alarm_num);
1000468e:	2003      	movs	r0, #3
10004690:	f000 faee 	bl	10004c70 <hardware_alarm_cancel>
    hardware_alarm_set_callback(hardware_alarm_num, alarm_pool_alarm_callback);
10004694:	4913      	ldr	r1, [pc, #76]	; (100046e4 <alarm_pool_init_default+0x68>)
10004696:	2003      	movs	r0, #3
10004698:	f000 fa42 	bl	10004b20 <hardware_alarm_set_callback>
    alarm_pool_t *pool = (alarm_pool_t *)malloc(sizeof(alarm_pool_t));
1000469c:	2018      	movs	r0, #24
1000469e:	f7fd fd29 	bl	100020f4 <__wrap_malloc>
100046a2:	0005      	movs	r5, r0
    pool->lock = spin_lock_instance(next_striped_spin_lock_num());
100046a4:	f7ff fdae 	bl	10004204 <next_striped_spin_lock_num>
    return (spin_lock_t *) (SIO_BASE + SIO_SPINLOCK0_OFFSET + lock_num * 4);
100046a8:	4b0f      	ldr	r3, [pc, #60]	; (100046e8 <alarm_pool_init_default+0x6c>)
    pool->heap = ph_create(max_timers, timer_pool_entry_comparator, pool);
100046aa:	002a      	movs	r2, r5
100046ac:	469c      	mov	ip, r3
100046ae:	4460      	add	r0, ip
100046b0:	0080      	lsls	r0, r0, #2
100046b2:	490e      	ldr	r1, [pc, #56]	; (100046ec <alarm_pool_init_default+0x70>)
    pool->lock = spin_lock_instance(next_striped_spin_lock_num());
100046b4:	6068      	str	r0, [r5, #4]
    pool->heap = ph_create(max_timers, timer_pool_entry_comparator, pool);
100046b6:	2010      	movs	r0, #16
100046b8:	f7fd fb6a 	bl	10001d90 <ph_create>
    pool->entries = (alarm_pool_entry_t *)calloc(max_timers, sizeof(alarm_pool_entry_t));
100046bc:	2110      	movs	r1, #16
    pool->heap = ph_create(max_timers, timer_pool_entry_comparator, pool);
100046be:	6028      	str	r0, [r5, #0]
    pool->entries = (alarm_pool_entry_t *)calloc(max_timers, sizeof(alarm_pool_entry_t));
100046c0:	2010      	movs	r0, #16
100046c2:	f7fd fd1b 	bl	100020fc <__wrap_calloc>
    pool->entry_ids_high = (uint8_t *)calloc(max_timers, sizeof(uint8_t));
100046c6:	2101      	movs	r1, #1
    pool->entries = (alarm_pool_entry_t *)calloc(max_timers, sizeof(alarm_pool_entry_t));
100046c8:	60a8      	str	r0, [r5, #8]
    pool->entry_ids_high = (uint8_t *)calloc(max_timers, sizeof(uint8_t));
100046ca:	2010      	movs	r0, #16
100046cc:	f7fd fd16 	bl	100020fc <__wrap_calloc>
    pool->hardware_alarm_num = hardware_alarm_num;
100046d0:	2303      	movs	r3, #3
100046d2:	752b      	strb	r3, [r5, #20]
    pools[hardware_alarm_num] = pool;
100046d4:	4b06      	ldr	r3, [pc, #24]	; (100046f0 <alarm_pool_init_default+0x74>)
    pool->entry_ids_high = (uint8_t *)calloc(max_timers, sizeof(uint8_t));
100046d6:	60e8      	str	r0, [r5, #12]
    pools[hardware_alarm_num] = pool;
100046d8:	60dd      	str	r5, [r3, #12]
        default_alarm_pool = alarm_pool_create(PICO_TIME_DEFAULT_ALARM_POOL_HARDWARE_ALARM_NUM,
100046da:	6025      	str	r5, [r4, #0]
}
100046dc:	e7d3      	b.n	10004686 <alarm_pool_init_default+0xa>
100046de:	46c0      	nop			; (mov r8, r8)
100046e0:	20016c28 	.word	0x20016c28
100046e4:	10004399 	.word	0x10004399
100046e8:	34000040 	.word	0x34000040
100046ec:	1000423d 	.word	0x1000423d
100046f0:	200172ec 	.word	0x200172ec

100046f4 <alarm_pool_get_default>:
    return default_alarm_pool;
100046f4:	4b01      	ldr	r3, [pc, #4]	; (100046fc <alarm_pool_get_default+0x8>)
100046f6:	6818      	ldr	r0, [r3, #0]
}
100046f8:	4770      	bx	lr
100046fa:	46c0      	nop			; (mov r8, r8)
100046fc:	20016c28 	.word	0x20016c28

10004700 <alarm_pool_add_alarm_at>:
                                   void *user_data, bool fire_if_past) {
10004700:	b5f0      	push	{r4, r5, r6, r7, lr}
10004702:	46de      	mov	lr, fp
10004704:	464e      	mov	r6, r9
10004706:	4645      	mov	r5, r8
10004708:	4657      	mov	r7, sl
1000470a:	b5e0      	push	{r5, r6, r7, lr}
1000470c:	b085      	sub	sp, #20
1000470e:	9301      	str	r3, [sp, #4]
10004710:	ab10      	add	r3, sp, #64	; 0x40
10004712:	781b      	ldrb	r3, [r3, #0]
10004714:	0006      	movs	r6, r0
10004716:	9303      	str	r3, [sp, #12]
    bool missed = false;
10004718:	2300      	movs	r3, #0
1000471a:	469b      	mov	fp, r3
    hn->child = hn->sibling = hn->parent = 0;
1000471c:	4698      	mov	r8, r3
                                   void *user_data, bool fire_if_past) {
1000471e:	9200      	str	r2, [sp, #0]
        uint32_t save = spin_lock_blocking(pool->lock);
10004720:	6872      	ldr	r2, [r6, #4]
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
10004722:	f3ef 8a10 	mrs	sl, PRIMASK
    __asm volatile ("cpsid i");
10004726:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
10004728:	6813      	ldr	r3, [r2, #0]
1000472a:	2b00      	cmp	r3, #0
1000472c:	d0fc      	beq.n	10004728 <alarm_pool_add_alarm_at+0x28>
    __asm volatile ("dmb");
1000472e:	f3bf 8f5f 	dmb	sy
        id = ph_new_node(pool->heap);
10004732:	6835      	ldr	r5, [r6, #0]
    if (!heap->free_head_id) return 0;
10004734:	7bac      	ldrb	r4, [r5, #14]
10004736:	2c00      	cmp	r4, #0
10004738:	d100      	bne.n	1000473c <alarm_pool_add_alarm_at+0x3c>
1000473a:	e080      	b.n	1000483e <alarm_pool_add_alarm_at+0x13e>
    return heap->nodes + id - 1;
1000473c:	0067      	lsls	r7, r4, #1
1000473e:	682b      	ldr	r3, [r5, #0]
10004740:	193f      	adds	r7, r7, r4
10004742:	3f03      	subs	r7, #3
10004744:	19db      	adds	r3, r3, r7
    heap->free_head_id = ph_get_node(heap, id)->sibling;
10004746:	785a      	ldrb	r2, [r3, #1]
10004748:	73aa      	strb	r2, [r5, #14]
    if (!heap->free_head_id) heap->free_tail_id = 0;
1000474a:	2a00      	cmp	r2, #0
1000474c:	d100      	bne.n	10004750 <alarm_pool_add_alarm_at+0x50>
1000474e:	73ea      	strb	r2, [r5, #15]
    return pool->entries + id - 1;
10004750:	68b1      	ldr	r1, [r6, #8]
10004752:	4a55      	ldr	r2, [pc, #340]	; (100048a8 <alarm_pool_add_alarm_at+0x1a8>)
10004754:	468c      	mov	ip, r1
        entry->target = time;
10004756:	9800      	ldr	r0, [sp, #0]
10004758:	9901      	ldr	r1, [sp, #4]
    return pool->entries + id - 1;
1000475a:	18a2      	adds	r2, r4, r2
1000475c:	0112      	lsls	r2, r2, #4
1000475e:	4462      	add	r2, ip
        entry->target = time;
10004760:	6010      	str	r0, [r2, #0]
10004762:	6051      	str	r1, [r2, #4]
        entry->callback = callback;
10004764:	990e      	ldr	r1, [sp, #56]	; 0x38
10004766:	6091      	str	r1, [r2, #8]
        entry->user_data = user_data;
10004768:	990f      	ldr	r1, [sp, #60]	; 0x3c
1000476a:	60d1      	str	r1, [r2, #12]
    hn->child = hn->sibling = hn->parent = 0;
1000476c:	4642      	mov	r2, r8
1000476e:	709a      	strb	r2, [r3, #2]
10004770:	705a      	strb	r2, [r3, #1]
10004772:	701a      	strb	r2, [r3, #0]
    heap->root_id = ph_merge_nodes(heap, heap->root_id, id);
10004774:	7b6b      	ldrb	r3, [r5, #13]
10004776:	4699      	mov	r9, r3
    if (!a) return b;
10004778:	2b00      	cmp	r3, #0
1000477a:	d100      	bne.n	1000477e <alarm_pool_add_alarm_at+0x7e>
1000477c:	e07d      	b.n	1000487a <alarm_pool_add_alarm_at+0x17a>
    if (heap->comparator(heap->user_data, a, b)) {
1000477e:	0022      	movs	r2, r4
10004780:	0019      	movs	r1, r3
10004782:	68a8      	ldr	r0, [r5, #8]
10004784:	686b      	ldr	r3, [r5, #4]
10004786:	4798      	blx	r3
    return heap->nodes + id - 1;
10004788:	682a      	ldr	r2, [r5, #0]
    if (heap->comparator(heap->user_data, a, b)) {
1000478a:	2800      	cmp	r0, #0
1000478c:	d069      	beq.n	10004862 <alarm_pool_add_alarm_at+0x162>
    return heap->nodes + id - 1;
1000478e:	464b      	mov	r3, r9
    c->parent = parent_id;
10004790:	4648      	mov	r0, r9
    return heap->nodes + id - 1;
10004792:	005b      	lsls	r3, r3, #1
10004794:	444b      	add	r3, r9
10004796:	19d7      	adds	r7, r2, r7
10004798:	3b03      	subs	r3, #3
    c->parent = parent_id;
1000479a:	70b8      	strb	r0, [r7, #2]
    return heap->nodes + id - 1;
1000479c:	18d1      	adds	r1, r2, r3
    if (!n->child) {
1000479e:	5cd3      	ldrb	r3, [r2, r3]
100047a0:	2b00      	cmp	r3, #0
100047a2:	d000      	beq.n	100047a6 <alarm_pool_add_alarm_at+0xa6>
100047a4:	e07c      	b.n	100048a0 <alarm_pool_add_alarm_at+0x1a0>
    heap->root_id = ph_merge_nodes(heap, heap->root_id, id);
100047a6:	464b      	mov	r3, r9
        n->child = child_id;
100047a8:	700c      	strb	r4, [r1, #0]
    heap->root_id = ph_merge_nodes(heap, heap->root_id, id);
100047aa:	736b      	strb	r3, [r5, #13]
        if (id == ph_insert(pool->heap, id)) {
100047ac:	454c      	cmp	r4, r9
100047ae:	d065      	beq.n	1000487c <alarm_pool_add_alarm_at+0x17c>
        if (id) id_high = *get_entry_id_high(pool, id);
100047b0:	68f3      	ldr	r3, [r6, #12]
100047b2:	191b      	adds	r3, r3, r4
100047b4:	3b01      	subs	r3, #1
100047b6:	7818      	ldrb	r0, [r3, #0]
        spin_unlock(pool->lock, save);
100047b8:	6873      	ldr	r3, [r6, #4]
100047ba:	f3bf 8f5f 	dmb	sy
    *lock = 0;
100047be:	4642      	mov	r2, r8
100047c0:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
100047c2:	f38a 8810 	msr	PRIMASK, sl
        public_id = missed ? 0 : make_public_id(id_high, id);
100047c6:	465b      	mov	r3, fp
100047c8:	2b00      	cmp	r3, #0
100047ca:	d108      	bne.n	100047de <alarm_pool_add_alarm_at+0xde>
    return ((uint)id_high << 8u * sizeof(id)) | id;
100047cc:	0200      	lsls	r0, r0, #8
100047ce:	4320      	orrs	r0, r4
}
100047d0:	b005      	add	sp, #20
100047d2:	bcf0      	pop	{r4, r5, r6, r7}
100047d4:	46bb      	mov	fp, r7
100047d6:	46b2      	mov	sl, r6
100047d8:	46a9      	mov	r9, r5
100047da:	46a0      	mov	r8, r4
100047dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (missed && fire_if_past) {
100047de:	9b03      	ldr	r3, [sp, #12]
100047e0:	2b00      	cmp	r3, #0
100047e2:	d05f      	beq.n	100048a4 <alarm_pool_add_alarm_at+0x1a4>
            int64_t repeat = callback(public_id, user_data);
100047e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
100047e6:	2000      	movs	r0, #0
100047e8:	990f      	ldr	r1, [sp, #60]	; 0x3c
100047ea:	4798      	blx	r3
            if (!repeat) {
100047ec:	0003      	movs	r3, r0
            int64_t repeat = callback(public_id, user_data);
100047ee:	0004      	movs	r4, r0
100047f0:	000d      	movs	r5, r1
            if (!repeat) {
100047f2:	430b      	orrs	r3, r1
100047f4:	d056      	beq.n	100048a4 <alarm_pool_add_alarm_at+0x1a4>
            } else if (repeat < 0) {
100047f6:	2900      	cmp	r1, #0
100047f8:	da0d      	bge.n	10004816 <alarm_pool_add_alarm_at+0x116>
    uint64_t delayed = base + us;
100047fa:	9800      	ldr	r0, [sp, #0]
100047fc:	9901      	ldr	r1, [sp, #4]
100047fe:	0002      	movs	r2, r0
10004800:	000b      	movs	r3, r1
10004802:	1b12      	subs	r2, r2, r4
10004804:	41ab      	sbcs	r3, r5
    if (delayed < base) {
10004806:	4299      	cmp	r1, r3
10004808:	d813      	bhi.n	10004832 <alarm_pool_add_alarm_at+0x132>
1000480a:	d021      	beq.n	10004850 <alarm_pool_add_alarm_at+0x150>
1000480c:	9200      	str	r2, [sp, #0]
1000480e:	9301      	str	r3, [sp, #4]
        delayed = (uint64_t)-1;
10004810:	9b03      	ldr	r3, [sp, #12]
10004812:	469b      	mov	fp, r3
10004814:	e784      	b.n	10004720 <alarm_pool_add_alarm_at+0x20>
    update_us_since_boot(&t, time_us_64());
10004816:	f000 f969 	bl	10004aec <time_us_64>
1000481a:	0002      	movs	r2, r0
1000481c:	000b      	movs	r3, r1
    uint64_t delayed = base + us;
1000481e:	18a4      	adds	r4, r4, r2
10004820:	415d      	adcs	r5, r3
10004822:	9400      	str	r4, [sp, #0]
10004824:	9501      	str	r5, [sp, #4]
    if (delayed < base) {
10004826:	42a9      	cmp	r1, r5
10004828:	d803      	bhi.n	10004832 <alarm_pool_add_alarm_at+0x132>
1000482a:	d1f1      	bne.n	10004810 <alarm_pool_add_alarm_at+0x110>
1000482c:	9900      	ldr	r1, [sp, #0]
1000482e:	428a      	cmp	r2, r1
10004830:	d9ee      	bls.n	10004810 <alarm_pool_add_alarm_at+0x110>
        delayed = (uint64_t)-1;
10004832:	2301      	movs	r3, #1
10004834:	425b      	negs	r3, r3
10004836:	17dc      	asrs	r4, r3, #31
10004838:	9300      	str	r3, [sp, #0]
1000483a:	9401      	str	r4, [sp, #4]
1000483c:	e7e8      	b.n	10004810 <alarm_pool_add_alarm_at+0x110>
        spin_unlock(pool->lock, save);
1000483e:	6873      	ldr	r3, [r6, #4]
    __asm volatile ("dmb");
10004840:	f3bf 8f5f 	dmb	sy
    *lock = 0;
10004844:	601c      	str	r4, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10004846:	f38a 8810 	msr	PRIMASK, sl
            return -1;
1000484a:	2001      	movs	r0, #1
1000484c:	4240      	negs	r0, r0
1000484e:	e7bf      	b.n	100047d0 <alarm_pool_add_alarm_at+0xd0>
    if (delayed < base) {
10004850:	9900      	ldr	r1, [sp, #0]
10004852:	4291      	cmp	r1, r2
10004854:	d9da      	bls.n	1000480c <alarm_pool_add_alarm_at+0x10c>
        delayed = (uint64_t)-1;
10004856:	2301      	movs	r3, #1
10004858:	425b      	negs	r3, r3
1000485a:	17dc      	asrs	r4, r3, #31
1000485c:	9300      	str	r3, [sp, #0]
1000485e:	9401      	str	r4, [sp, #4]
10004860:	e7d6      	b.n	10004810 <alarm_pool_add_alarm_at+0x110>
    return heap->nodes + id - 1;
10004862:	464b      	mov	r3, r9
10004864:	005b      	lsls	r3, r3, #1
10004866:	444b      	add	r3, r9
10004868:	3b03      	subs	r3, #3
1000486a:	18d3      	adds	r3, r2, r3
    c->parent = parent_id;
1000486c:	709c      	strb	r4, [r3, #2]
    return heap->nodes + id - 1;
1000486e:	19d1      	adds	r1, r2, r7
    if (!n->child) {
10004870:	5dd2      	ldrb	r2, [r2, r7]
10004872:	2a00      	cmp	r2, #0
10004874:	d110      	bne.n	10004898 <alarm_pool_add_alarm_at+0x198>
        n->child = child_id;
10004876:	464b      	mov	r3, r9
10004878:	700b      	strb	r3, [r1, #0]
    heap->root_id = ph_merge_nodes(heap, heap->root_id, id);
1000487a:	736c      	strb	r4, [r5, #13]
            bool is_missed = hardware_alarm_set_target(pool->hardware_alarm_num, time);
1000487c:	7d30      	ldrb	r0, [r6, #20]
1000487e:	9a00      	ldr	r2, [sp, #0]
10004880:	9b01      	ldr	r3, [sp, #4]
10004882:	f000 f993 	bl	10004bac <hardware_alarm_set_target>
10004886:	4683      	mov	fp, r0
            if (is_missed && !create_if_past) {
10004888:	2800      	cmp	r0, #0
1000488a:	d100      	bne.n	1000488e <alarm_pool_add_alarm_at+0x18e>
1000488c:	e790      	b.n	100047b0 <alarm_pool_add_alarm_at+0xb0>
                ph_delete(pool->heap, id);
1000488e:	0021      	movs	r1, r4
10004890:	6830      	ldr	r0, [r6, #0]
10004892:	f7fd fbf1 	bl	10002078 <ph_delete>
10004896:	e78b      	b.n	100047b0 <alarm_pool_add_alarm_at+0xb0>
        c->sibling = n->child;
10004898:	705a      	strb	r2, [r3, #1]
        n->child = child_id;
1000489a:	464b      	mov	r3, r9
1000489c:	700b      	strb	r3, [r1, #0]
1000489e:	e7ec      	b.n	1000487a <alarm_pool_add_alarm_at+0x17a>
        c->sibling = n->child;
100048a0:	707b      	strb	r3, [r7, #1]
100048a2:	e780      	b.n	100047a6 <alarm_pool_add_alarm_at+0xa6>
    bool missed = false;
100048a4:	2000      	movs	r0, #0
    return public_id;
100048a6:	e793      	b.n	100047d0 <alarm_pool_add_alarm_at+0xd0>
100048a8:	0fffffff 	.word	0x0fffffff

100048ac <alarm_pool_cancel_alarm>:
bool alarm_pool_cancel_alarm(alarm_pool_t *pool, alarm_id_t alarm_id) {
100048ac:	b570      	push	{r4, r5, r6, lr}
    uint32_t save = spin_lock_blocking(pool->lock);
100048ae:	6842      	ldr	r2, [r0, #4]
bool alarm_pool_cancel_alarm(alarm_pool_t *pool, alarm_id_t alarm_id) {
100048b0:	0004      	movs	r4, r0
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
100048b2:	f3ef 8510 	mrs	r5, PRIMASK
    __asm volatile ("cpsid i");
100048b6:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
100048b8:	6813      	ldr	r3, [r2, #0]
100048ba:	2b00      	cmp	r3, #0
100048bc:	d0fc      	beq.n	100048b8 <alarm_pool_cancel_alarm+0xc>
    __asm volatile ("dmb");
100048be:	f3bf 8f5f 	dmb	sy
    if (ph_contains(pool->heap, id)) {
100048c2:	6820      	ldr	r0, [r4, #0]
    pheap_node_id_t id = (pheap_node_id_t) alarm_id;
100048c4:	b2ce      	uxtb	r6, r1
    return id == heap->root_id || ph_get_node(heap, id)->parent;
100048c6:	7b43      	ldrb	r3, [r0, #13]
100048c8:	42b3      	cmp	r3, r6
100048ca:	d00a      	beq.n	100048e2 <alarm_pool_cancel_alarm+0x36>
    return heap->nodes + id - 1;
100048cc:	23ff      	movs	r3, #255	; 0xff
100048ce:	400b      	ands	r3, r1
    return id == heap->root_id || ph_get_node(heap, id)->parent;
100048d0:	005a      	lsls	r2, r3, #1
100048d2:	18d3      	adds	r3, r2, r3
100048d4:	6802      	ldr	r2, [r0, #0]
100048d6:	4694      	mov	ip, r2
100048d8:	4463      	add	r3, ip
100048da:	3b03      	subs	r3, #3
100048dc:	789b      	ldrb	r3, [r3, #2]
100048de:	2b00      	cmp	r3, #0
100048e0:	d013      	beq.n	1000490a <alarm_pool_cancel_alarm+0x5e>
        if (id_high == *get_entry_id_high(pool, id)) {
100048e2:	68e2      	ldr	r2, [r4, #12]
    return heap->nodes + id - 1;
100048e4:	23ff      	movs	r3, #255	; 0xff
100048e6:	4694      	mov	ip, r2
100048e8:	400b      	ands	r3, r1
100048ea:	4463      	add	r3, ip
100048ec:	3b01      	subs	r3, #1
        uint8_t id_high = (uint8_t)((uint)alarm_id >> 8u * sizeof(pheap_node_id_t));
100048ee:	0a0a      	lsrs	r2, r1, #8
        if (id_high == *get_entry_id_high(pool, id)) {
100048f0:	7819      	ldrb	r1, [r3, #0]
100048f2:	b2d2      	uxtb	r2, r2
100048f4:	4291      	cmp	r1, r2
100048f6:	d00e      	beq.n	10004916 <alarm_pool_cancel_alarm+0x6a>
    bool rc = false;
100048f8:	2000      	movs	r0, #0
    spin_unlock(pool->lock, save);
100048fa:	6863      	ldr	r3, [r4, #4]
100048fc:	f3bf 8f5f 	dmb	sy
    *lock = 0;
10004900:	2200      	movs	r2, #0
10004902:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10004904:	f385 8810 	msr	PRIMASK, r5
}
10004908:	bd70      	pop	{r4, r5, r6, pc}
        if (alarm_id == pool->alarm_in_progress) {
1000490a:	6922      	ldr	r2, [r4, #16]
1000490c:	428a      	cmp	r2, r1
1000490e:	d1f3      	bne.n	100048f8 <alarm_pool_cancel_alarm+0x4c>
    bool rc = false;
10004910:	2000      	movs	r0, #0
            pool->alarm_in_progress = 0;
10004912:	6123      	str	r3, [r4, #16]
10004914:	e7f1      	b.n	100048fa <alarm_pool_cancel_alarm+0x4e>
            rc = ph_delete(pool->heap, id);
10004916:	0031      	movs	r1, r6
10004918:	f7fd fbae 	bl	10002078 <ph_delete>
1000491c:	e7ed      	b.n	100048fa <alarm_pool_cancel_alarm+0x4e>
1000491e:	46c0      	nop			; (mov r8, r8)

10004920 <sleep_ms>:
    }
#endif

}

void sleep_ms(uint32_t ms) {
10004920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10004922:	0004      	movs	r4, r0
    update_us_since_boot(&t, time_us_64());
10004924:	f000 f8e2 	bl	10004aec <time_us_64>
    sleep_us(ms * 1000ull);
10004928:	22fa      	movs	r2, #250	; 0xfa
1000492a:	0006      	movs	r6, r0
1000492c:	000f      	movs	r7, r1
1000492e:	0020      	movs	r0, r4
10004930:	2300      	movs	r3, #0
10004932:	2100      	movs	r1, #0
10004934:	0092      	lsls	r2, r2, #2
10004936:	f7fc fc03 	bl	10001140 <__wrap___aeabi_lmul>
    uint64_t delayed = base + us;
1000493a:	1980      	adds	r0, r0, r6
1000493c:	4179      	adcs	r1, r7
1000493e:	0004      	movs	r4, r0
10004940:	000d      	movs	r5, r1
    if (delayed < base) {
10004942:	428f      	cmp	r7, r1
10004944:	d81a      	bhi.n	1000497c <sleep_ms+0x5c>
10004946:	d017      	beq.n	10004978 <sleep_ms+0x58>
    uint64_t t_before_us = t_us - PICO_TIME_SLEEP_OVERHEAD_ADJUST_US;
10004948:	2606      	movs	r6, #6
1000494a:	4276      	negs	r6, r6
1000494c:	17f7      	asrs	r7, r6, #31
1000494e:	1936      	adds	r6, r6, r4
10004950:	416f      	adcs	r7, r5
    if (t_before_us > t_us) t_before_us = 0;
10004952:	42af      	cmp	r7, r5
10004954:	d937      	bls.n	100049c6 <sleep_ms+0xa6>
10004956:	2600      	movs	r6, #0
10004958:	2700      	movs	r7, #0
    update_us_since_boot(&t, time_us_64());
1000495a:	f000 f8c7 	bl	10004aec <time_us_64>
    return to_us_since_boot(to) - to_us_since_boot(from);
1000495e:	0032      	movs	r2, r6
10004960:	003b      	movs	r3, r7
10004962:	1a12      	subs	r2, r2, r0
10004964:	418b      	sbcs	r3, r1
    if (absolute_time_diff_us(get_absolute_time(), t_before) > 0) {
10004966:	2b00      	cmp	r3, #0
10004968:	dc16      	bgt.n	10004998 <sleep_ms+0x78>
1000496a:	2b00      	cmp	r3, #0
1000496c:	d028      	beq.n	100049c0 <sleep_ms+0xa0>
    busy_wait_until(t);
1000496e:	0029      	movs	r1, r5
10004970:	0020      	movs	r0, r4
10004972:	f000 f8c5 	bl	10004b00 <busy_wait_until>
}
10004976:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (delayed < base) {
10004978:	4286      	cmp	r6, r0
1000497a:	d9e5      	bls.n	10004948 <sleep_ms+0x28>
    uint64_t t_before_us = t_us - PICO_TIME_SLEEP_OVERHEAD_ADJUST_US;
1000497c:	2607      	movs	r6, #7
1000497e:	4276      	negs	r6, r6
10004980:	17f7      	asrs	r7, r6, #31
    update_us_since_boot(&t, time_us_64());
10004982:	f000 f8b3 	bl	10004aec <time_us_64>
    return to_us_since_boot(to) - to_us_since_boot(from);
10004986:	0032      	movs	r2, r6
10004988:	003b      	movs	r3, r7
1000498a:	1a12      	subs	r2, r2, r0
1000498c:	418b      	sbcs	r3, r1
        delayed = (uint64_t)-1;
1000498e:	2401      	movs	r4, #1
10004990:	4264      	negs	r4, r4
10004992:	17e5      	asrs	r5, r4, #31
    if (absolute_time_diff_us(get_absolute_time(), t_before) > 0) {
10004994:	2b00      	cmp	r3, #0
10004996:	dde8      	ble.n	1000496a <sleep_ms+0x4a>
    return default_alarm_pool;
10004998:	4b0d      	ldr	r3, [pc, #52]	; (100049d0 <sleep_ms+0xb0>)
    return alarm_pool_add_alarm_at(alarm_pool_get_default(), time, callback, user_data, fire_if_past);
1000499a:	0032      	movs	r2, r6
1000499c:	6818      	ldr	r0, [r3, #0]
1000499e:	003b      	movs	r3, r7
100049a0:	f7ff fdde 	bl	10004560 <alarm_pool_add_alarm_at.constprop.0>
        if (add_alarm_at(t_before, sev_callback, NULL, false) >= 0) {
100049a4:	2800      	cmp	r0, #0
100049a6:	dbe2      	blt.n	1000496e <sleep_ms+0x4e>
    uint32_t hi_target = target >> 32u;
100049a8:	0039      	movs	r1, r7
    uint32_t hi = timer_hw->timerawh;
100049aa:	4a0a      	ldr	r2, [pc, #40]	; (100049d4 <sleep_ms+0xb4>)
100049ac:	6a53      	ldr	r3, [r2, #36]	; 0x24
    return (hi >= hi_target && (timer_hw->timerawl >= (uint32_t) target || hi != hi_target));
100049ae:	4299      	cmp	r1, r3
100049b0:	d804      	bhi.n	100049bc <sleep_ms+0x9c>
100049b2:	6a90      	ldr	r0, [r2, #40]	; 0x28
100049b4:	4286      	cmp	r6, r0
100049b6:	d9da      	bls.n	1000496e <sleep_ms+0x4e>
100049b8:	4299      	cmp	r1, r3
100049ba:	d1d8      	bne.n	1000496e <sleep_ms+0x4e>
    __asm volatile ("wfe");
100049bc:	bf20      	wfe
}
100049be:	e7f5      	b.n	100049ac <sleep_ms+0x8c>
    if (absolute_time_diff_us(get_absolute_time(), t_before) > 0) {
100049c0:	2a00      	cmp	r2, #0
100049c2:	d0d4      	beq.n	1000496e <sleep_ms+0x4e>
100049c4:	e7e8      	b.n	10004998 <sleep_ms+0x78>
    if (t_before_us > t_us) t_before_us = 0;
100049c6:	42af      	cmp	r7, r5
100049c8:	d1c7      	bne.n	1000495a <sleep_ms+0x3a>
100049ca:	42a6      	cmp	r6, r4
100049cc:	d8c3      	bhi.n	10004956 <sleep_ms+0x36>
100049ce:	e7c4      	b.n	1000495a <sleep_ms+0x3a>
100049d0:	20016c28 	.word	0x20016c28
100049d4:	40054000 	.word	0x40054000

100049d8 <best_effort_wfe_or_timeout>:

bool best_effort_wfe_or_timeout(absolute_time_t timeout_timestamp) {
100049d8:	b570      	push	{r4, r5, r6, lr}
    return default_alarm_pool;
100049da:	4d0e      	ldr	r5, [pc, #56]	; (10004a14 <best_effort_wfe_or_timeout+0x3c>)
100049dc:	0002      	movs	r2, r0
100049de:	000b      	movs	r3, r1
bool best_effort_wfe_or_timeout(absolute_time_t timeout_timestamp) {
100049e0:	0006      	movs	r6, r0
100049e2:	6828      	ldr	r0, [r5, #0]
100049e4:	000c      	movs	r4, r1
100049e6:	f7ff fdbb 	bl	10004560 <alarm_pool_add_alarm_at.constprop.0>
100049ea:	1e01      	subs	r1, r0, #0
#if !PICO_TIME_DEFAULT_ALARM_POOL_DISABLED
    alarm_id_t id;
    id = add_alarm_at(timeout_timestamp, sev_callback, NULL, false);
    if (id <= 0) {
100049ec:	dd03      	ble.n	100049f6 <best_effort_wfe_or_timeout+0x1e>
    __asm volatile ("wfe");
100049ee:	bf20      	wfe
 * \param alarm_id the alarm
 * \return true if the alarm was cancelled, false if it didn't exist
 * \sa alarm_id_t for a note on reuse of IDs
 */
static inline bool cancel_alarm(alarm_id_t alarm_id) {
    return alarm_pool_cancel_alarm(alarm_pool_get_default(), alarm_id);
100049f0:	6828      	ldr	r0, [r5, #0]
100049f2:	f7ff ff5b 	bl	100048ac <alarm_pool_cancel_alarm>
    uint32_t hi = timer_hw->timerawh;
100049f6:	4b08      	ldr	r3, [pc, #32]	; (10004a18 <best_effort_wfe_or_timeout+0x40>)
100049f8:	2000      	movs	r0, #0
100049fa:	6a59      	ldr	r1, [r3, #36]	; 0x24
    return (hi >= hi_target && (timer_hw->timerawl >= (uint32_t) target || hi != hi_target));
100049fc:	428c      	cmp	r4, r1
100049fe:	d803      	bhi.n	10004a08 <best_effort_wfe_or_timeout+0x30>
10004a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10004a02:	3001      	adds	r0, #1
10004a04:	42b3      	cmp	r3, r6
10004a06:	d300      	bcc.n	10004a0a <best_effort_wfe_or_timeout+0x32>
    }
#else
    tight_loop_contents();
    return time_reached(timeout_timestamp);
#endif
}
10004a08:	bd70      	pop	{r4, r5, r6, pc}
10004a0a:	1a64      	subs	r4, r4, r1
10004a0c:	1e63      	subs	r3, r4, #1
10004a0e:	419c      	sbcs	r4, r3
10004a10:	b2e0      	uxtb	r0, r4
10004a12:	e7f9      	b.n	10004a08 <best_effort_wfe_or_timeout+0x30>
10004a14:	20016c28 	.word	0x20016c28
10004a18:	40054000 	.word	0x40054000

10004a1c <hardware_alarm_irq_handler>:

static inline uint harware_alarm_irq_number(uint alarm_num) {
    return TIMER_IRQ_0 + alarm_num;
}

static void hardware_alarm_irq_handler() {
10004a1c:	b5f0      	push	{r4, r5, r6, r7, lr}
10004a1e:	46d6      	mov	lr, sl
10004a20:	464f      	mov	r7, r9
10004a22:	4646      	mov	r6, r8
10004a24:	b5c0      	push	{r6, r7, lr}
    // Determine which timer this IRQ is for
    uint32_t ipsr;
    __asm volatile ("mrs %0, ipsr" : "=r" (ipsr)::);
10004a26:	f3ef 8305 	mrs	r3, IPSR
    uint alarm_num = (ipsr & 0x3fu) - 16 - TIMER_IRQ_0;
10004a2a:	223f      	movs	r2, #63	; 0x3f
10004a2c:	4013      	ands	r3, r2
10004a2e:	0018      	movs	r0, r3
10004a30:	3810      	subs	r0, #16
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
10004a32:	f3ef 8c10 	mrs	ip, PRIMASK
    __asm volatile ("cpsid i");
10004a36:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
10004a38:	4d20      	ldr	r5, [pc, #128]	; (10004abc <hardware_alarm_irq_handler+0xa0>)
10004a3a:	682a      	ldr	r2, [r5, #0]
10004a3c:	2a00      	cmp	r2, #0
10004a3e:	d0fc      	beq.n	10004a3a <hardware_alarm_irq_handler+0x1e>
    __asm volatile ("dmb");
10004a40:	f3bf 8f5f 	dmb	sy
    hardware_alarm_callback_t callback = NULL;

    spin_lock_t *lock = spin_lock_instance(PICO_SPINLOCK_ID_TIMER);
    uint32_t save = spin_lock_blocking(lock);
    // Clear the timer IRQ (inside lock, because we check whether we have handled the IRQ yet in alarm_set by looking at the interrupt status
    timer_hw->intr = 1u << alarm_num;
10004a44:	2201      	movs	r2, #1
10004a46:	0011      	movs	r1, r2
10004a48:	4081      	lsls	r1, r0
10004a4a:	4c1d      	ldr	r4, [pc, #116]	; (10004ac0 <hardware_alarm_irq_handler+0xa4>)
10004a4c:	4688      	mov	r8, r1
10004a4e:	6361      	str	r1, [r4, #52]	; 0x34

    // make sure the IRQ is still valid
    if (timer_callbacks_pending & (1u << alarm_num)) {
10004a50:	491c      	ldr	r1, [pc, #112]	; (10004ac4 <hardware_alarm_irq_handler+0xa8>)
10004a52:	0017      	movs	r7, r2
10004a54:	780e      	ldrb	r6, [r1, #0]
10004a56:	468a      	mov	sl, r1
10004a58:	0031      	movs	r1, r6
10004a5a:	40c1      	lsrs	r1, r0
10004a5c:	400f      	ands	r7, r1
10004a5e:	420a      	tst	r2, r1
10004a60:	d109      	bne.n	10004a76 <hardware_alarm_irq_handler+0x5a>
10004a62:	f3bf 8f5f 	dmb	sy
    *lock = 0;
10004a66:	602f      	str	r7, [r5, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10004a68:	f38c 8810 	msr	PRIMASK, ip
    spin_unlock(lock, save);

    if (callback) {
        callback(alarm_num);
    }
}
10004a6c:	bce0      	pop	{r5, r6, r7}
10004a6e:	46ba      	mov	sl, r7
10004a70:	46b1      	mov	r9, r6
10004a72:	46a8      	mov	r8, r5
10004a74:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (timer_hw->timerawh >= target_hi[alarm_num]) {
10004a76:	4914      	ldr	r1, [pc, #80]	; (10004ac8 <hardware_alarm_irq_handler+0xac>)
10004a78:	0082      	lsls	r2, r0, #2
10004a7a:	6a64      	ldr	r4, [r4, #36]	; 0x24
10004a7c:	5851      	ldr	r1, [r2, r1]
10004a7e:	428c      	cmp	r4, r1
10004a80:	d30f      	bcc.n	10004aa2 <hardware_alarm_irq_handler+0x86>
            callback = alarm_callbacks[alarm_num];
10004a82:	4b12      	ldr	r3, [pc, #72]	; (10004acc <hardware_alarm_irq_handler+0xb0>)
10004a84:	58d2      	ldr	r2, [r2, r3]
            timer_callbacks_pending &= ~(1u << alarm_num);
10004a86:	4643      	mov	r3, r8
10004a88:	439e      	bics	r6, r3
10004a8a:	4653      	mov	r3, sl
10004a8c:	701e      	strb	r6, [r3, #0]
    __asm volatile ("dmb");
10004a8e:	f3bf 8f5f 	dmb	sy
    *lock = 0;
10004a92:	2300      	movs	r3, #0
10004a94:	602b      	str	r3, [r5, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10004a96:	f38c 8810 	msr	PRIMASK, ip
    if (callback) {
10004a9a:	2a00      	cmp	r2, #0
10004a9c:	d0e6      	beq.n	10004a6c <hardware_alarm_irq_handler+0x50>
        callback(alarm_num);
10004a9e:	4790      	blx	r2
}
10004aa0:	e7e4      	b.n	10004a6c <hardware_alarm_irq_handler+0x50>
            timer_hw->alarm[alarm_num] = timer_hw->alarm[alarm_num]; // re-arm the timer
10004aa2:	4a0b      	ldr	r2, [pc, #44]	; (10004ad0 <hardware_alarm_irq_handler+0xb4>)
10004aa4:	009b      	lsls	r3, r3, #2
10004aa6:	4690      	mov	r8, r2
10004aa8:	4443      	add	r3, r8
10004aaa:	681a      	ldr	r2, [r3, #0]
10004aac:	601a      	str	r2, [r3, #0]
    __asm volatile ("dmb");
10004aae:	f3bf 8f5f 	dmb	sy
    *lock = 0;
10004ab2:	2300      	movs	r3, #0
10004ab4:	602b      	str	r3, [r5, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10004ab6:	f38c 8810 	msr	PRIMASK, ip
    if (callback) {
10004aba:	e7d7      	b.n	10004a6c <hardware_alarm_irq_handler+0x50>
10004abc:	d0000128 	.word	0xd0000128
10004ac0:	40054000 	.word	0x40054000
10004ac4:	20017335 	.word	0x20017335
10004ac8:	20017310 	.word	0x20017310
10004acc:	20016aec 	.word	0x20016aec
10004ad0:	40053fd0 	.word	0x40053fd0

10004ad4 <hardware_alarm_claim>:
void hardware_alarm_claim(uint alarm_num) {
10004ad4:	b510      	push	{r4, lr}
10004ad6:	0001      	movs	r1, r0
    hw_claim_or_assert(&claimed, alarm_num, "Hardware alarm %d already claimed");
10004ad8:	4a02      	ldr	r2, [pc, #8]	; (10004ae4 <hardware_alarm_claim+0x10>)
10004ada:	4803      	ldr	r0, [pc, #12]	; (10004ae8 <hardware_alarm_claim+0x14>)
10004adc:	f7fc fb92 	bl	10001204 <hw_claim_or_assert>
}
10004ae0:	bd10      	pop	{r4, pc}
10004ae2:	46c0      	nop			; (mov r8, r8)
10004ae4:	1000b3d4 	.word	0x1000b3d4
10004ae8:	20017333 	.word	0x20017333

10004aec <time_us_64>:
    uint32_t hi = timer_hw->timerawh;
10004aec:	4b03      	ldr	r3, [pc, #12]	; (10004afc <time_us_64+0x10>)
10004aee:	6a59      	ldr	r1, [r3, #36]	; 0x24
        lo = timer_hw->timerawl;
10004af0:	000a      	movs	r2, r1
10004af2:	6a98      	ldr	r0, [r3, #40]	; 0x28
        uint32_t next_hi = timer_hw->timerawh;
10004af4:	6a59      	ldr	r1, [r3, #36]	; 0x24
        if (hi == next_hi) break;
10004af6:	428a      	cmp	r2, r1
10004af8:	d1fa      	bne.n	10004af0 <time_us_64+0x4>
}
10004afa:	4770      	bx	lr
10004afc:	40054000 	.word	0x40054000

10004b00 <busy_wait_until>:
    uint32_t hi = timer_hw->timerawh;
10004b00:	4a06      	ldr	r2, [pc, #24]	; (10004b1c <busy_wait_until+0x1c>)
10004b02:	6a53      	ldr	r3, [r2, #36]	; 0x24
    while (hi < hi_target) {
10004b04:	4299      	cmp	r1, r3
10004b06:	d8fc      	bhi.n	10004b02 <busy_wait_until+0x2>
    while (hi == hi_target && timer_hw->timerawl < (uint32_t) target) {
10004b08:	d107      	bne.n	10004b1a <busy_wait_until+0x1a>
10004b0a:	4b04      	ldr	r3, [pc, #16]	; (10004b1c <busy_wait_until+0x1c>)
10004b0c:	e002      	b.n	10004b14 <busy_wait_until+0x14>
        hi = timer_hw->timerawh;
10004b0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    while (hi == hi_target && timer_hw->timerawl < (uint32_t) target) {
10004b10:	4291      	cmp	r1, r2
10004b12:	d102      	bne.n	10004b1a <busy_wait_until+0x1a>
10004b14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
10004b16:	4282      	cmp	r2, r0
10004b18:	d3f9      	bcc.n	10004b0e <busy_wait_until+0xe>
}
10004b1a:	4770      	bx	lr
10004b1c:	40054000 	.word	0x40054000

10004b20 <hardware_alarm_set_callback>:

void hardware_alarm_set_callback(uint alarm_num, hardware_alarm_callback_t callback) {
10004b20:	b570      	push	{r4, r5, r6, lr}
10004b22:	0004      	movs	r4, r0
10004b24:	000d      	movs	r5, r1
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
10004b26:	f3ef 8610 	mrs	r6, PRIMASK
    __asm volatile ("cpsid i");
10004b2a:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
10004b2c:	4a1a      	ldr	r2, [pc, #104]	; (10004b98 <hardware_alarm_set_callback+0x78>)
10004b2e:	6813      	ldr	r3, [r2, #0]
10004b30:	2b00      	cmp	r3, #0
10004b32:	d0fc      	beq.n	10004b2e <hardware_alarm_set_callback+0xe>
    __asm volatile ("dmb");
10004b34:	f3bf 8f5f 	dmb	sy
    //  should disallow IRQ handlers on both cores
    check_hardware_alarm_num_param(alarm_num);
    uint irq_num = harware_alarm_irq_number(alarm_num);
    spin_lock_t *lock = spin_lock_instance(PICO_SPINLOCK_ID_TIMER);
    uint32_t save = spin_lock_blocking(lock);
    if (callback) {
10004b38:	2d00      	cmp	r5, #0
10004b3a:	d01b      	beq.n	10004b74 <hardware_alarm_set_callback+0x54>
        if (hardware_alarm_irq_handler != irq_get_vtable_handler(irq_num)) {
10004b3c:	0020      	movs	r0, r4
10004b3e:	f7fc fee1 	bl	10001904 <irq_get_vtable_handler>
10004b42:	4916      	ldr	r1, [pc, #88]	; (10004b9c <hardware_alarm_set_callback+0x7c>)
10004b44:	4281      	cmp	r1, r0
10004b46:	d00a      	beq.n	10004b5e <hardware_alarm_set_callback+0x3e>
            // note that set_exclusive will silently allow you to set the handler to the same thing
            // since it is idempotent, which means we don't need to worry about locking ourselves
            irq_set_exclusive_handler(irq_num, hardware_alarm_irq_handler);
10004b48:	0020      	movs	r0, r4
10004b4a:	f7fc fee3 	bl	10001914 <irq_set_exclusive_handler>
            irq_set_enabled(irq_num, true);
10004b4e:	2101      	movs	r1, #1
10004b50:	0020      	movs	r0, r4
10004b52:	f7fc febd 	bl	100018d0 <irq_set_enabled>
            // Enable interrupt in block and at processor
            hw_set_bits(&timer_hw->inte, 1u << alarm_num);
10004b56:	2301      	movs	r3, #1
10004b58:	40a3      	lsls	r3, r4
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10004b5a:	4a11      	ldr	r2, [pc, #68]	; (10004ba0 <hardware_alarm_set_callback+0x80>)
10004b5c:	6013      	str	r3, [r2, #0]
        }
        alarm_callbacks[alarm_num] = callback;
10004b5e:	4b11      	ldr	r3, [pc, #68]	; (10004ba4 <hardware_alarm_set_callback+0x84>)
10004b60:	00a4      	lsls	r4, r4, #2
10004b62:	50e5      	str	r5, [r4, r3]
10004b64:	f3bf 8f5f 	dmb	sy
    *lock = 0;
10004b68:	2200      	movs	r2, #0
10004b6a:	4b0b      	ldr	r3, [pc, #44]	; (10004b98 <hardware_alarm_set_callback+0x78>)
10004b6c:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10004b6e:	f386 8810 	msr	PRIMASK, r6
        timer_callbacks_pending &= ~(1u << alarm_num);
        irq_remove_handler(irq_num, hardware_alarm_irq_handler);
        irq_set_enabled(irq_num, false);
    }
    spin_unlock(lock, save);
}
10004b72:	bd70      	pop	{r4, r5, r6, pc}
        alarm_callbacks[alarm_num] = NULL;
10004b74:	4b0b      	ldr	r3, [pc, #44]	; (10004ba4 <hardware_alarm_set_callback+0x84>)
10004b76:	00a2      	lsls	r2, r4, #2
10004b78:	50d5      	str	r5, [r2, r3]
        timer_callbacks_pending &= ~(1u << alarm_num);
10004b7a:	2201      	movs	r2, #1
10004b7c:	40a2      	lsls	r2, r4
10004b7e:	490a      	ldr	r1, [pc, #40]	; (10004ba8 <hardware_alarm_set_callback+0x88>)
        irq_remove_handler(irq_num, hardware_alarm_irq_handler);
10004b80:	0020      	movs	r0, r4
        timer_callbacks_pending &= ~(1u << alarm_num);
10004b82:	780b      	ldrb	r3, [r1, #0]
10004b84:	4393      	bics	r3, r2
10004b86:	700b      	strb	r3, [r1, #0]
        irq_remove_handler(irq_num, hardware_alarm_irq_handler);
10004b88:	4904      	ldr	r1, [pc, #16]	; (10004b9c <hardware_alarm_set_callback+0x7c>)
10004b8a:	f7fc feed 	bl	10001968 <irq_remove_handler>
        irq_set_enabled(irq_num, false);
10004b8e:	2100      	movs	r1, #0
10004b90:	0020      	movs	r0, r4
10004b92:	f7fc fe9d 	bl	100018d0 <irq_set_enabled>
10004b96:	e7e5      	b.n	10004b64 <hardware_alarm_set_callback+0x44>
10004b98:	d0000128 	.word	0xd0000128
10004b9c:	10004a1d 	.word	0x10004a1d
10004ba0:	40056038 	.word	0x40056038
10004ba4:	20016aec 	.word	0x20016aec
10004ba8:	20017335 	.word	0x20017335

10004bac <hardware_alarm_set_target>:

bool hardware_alarm_set_target(uint alarm_num, absolute_time_t target) {
10004bac:	b5f0      	push	{r4, r5, r6, r7, lr}
10004bae:	46ce      	mov	lr, r9
10004bb0:	4647      	mov	r7, r8
10004bb2:	b580      	push	{r7, lr}
    uint32_t hi = timer_hw->timerawh;
10004bb4:	4c2a      	ldr	r4, [pc, #168]	; (10004c60 <hardware_alarm_set_target+0xb4>)
10004bb6:	6a61      	ldr	r1, [r4, #36]	; 0x24
        lo = timer_hw->timerawl;
10004bb8:	000d      	movs	r5, r1
10004bba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
        uint32_t next_hi = timer_hw->timerawh;
10004bbc:	6a61      	ldr	r1, [r4, #36]	; 0x24
        if (hi == next_hi) break;
10004bbe:	42a9      	cmp	r1, r5
10004bc0:	d1fa      	bne.n	10004bb8 <hardware_alarm_set_target+0xc>
    bool missed;
    uint64_t now = time_us_64();
    uint64_t t = to_us_since_boot(target);
    if (now >= t) {
10004bc2:	428b      	cmp	r3, r1
10004bc4:	d807      	bhi.n	10004bd6 <hardware_alarm_set_target+0x2a>
10004bc6:	d004      	beq.n	10004bd2 <hardware_alarm_set_target+0x26>
        missed = true;
10004bc8:	2001      	movs	r0, #1
            }
        }
        spin_unlock(lock, save);
    }
    return missed;
}
10004bca:	bcc0      	pop	{r6, r7}
10004bcc:	46b9      	mov	r9, r7
10004bce:	46b0      	mov	r8, r6
10004bd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (now >= t) {
10004bd2:	42b2      	cmp	r2, r6
10004bd4:	d9f8      	bls.n	10004bc8 <hardware_alarm_set_target+0x1c>
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
10004bd6:	f3ef 8910 	mrs	r9, PRIMASK
    __asm volatile ("cpsid i");
10004bda:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
10004bdc:	4c21      	ldr	r4, [pc, #132]	; (10004c64 <hardware_alarm_set_target+0xb8>)
10004bde:	6821      	ldr	r1, [r4, #0]
10004be0:	2900      	cmp	r1, #0
10004be2:	d0fc      	beq.n	10004bde <hardware_alarm_set_target+0x32>
    __asm volatile ("dmb");
10004be4:	f3bf 8f5f 	dmb	sy
        timer_hw->intr = 1u << alarm_num;
10004be8:	2501      	movs	r5, #1
10004bea:	4085      	lsls	r5, r0
10004bec:	4c1c      	ldr	r4, [pc, #112]	; (10004c60 <hardware_alarm_set_target+0xb4>)
        timer_callbacks_pending |= 1u << alarm_num;
10004bee:	4f1e      	ldr	r7, [pc, #120]	; (10004c68 <hardware_alarm_set_target+0xbc>)
        timer_hw->intr = 1u << alarm_num;
10004bf0:	6365      	str	r5, [r4, #52]	; 0x34
        timer_callbacks_pending |= 1u << alarm_num;
10004bf2:	b2e9      	uxtb	r1, r5
10004bf4:	4688      	mov	r8, r1
10004bf6:	7839      	ldrb	r1, [r7, #0]
10004bf8:	468c      	mov	ip, r1
10004bfa:	4641      	mov	r1, r8
10004bfc:	4666      	mov	r6, ip
10004bfe:	4331      	orrs	r1, r6
10004c00:	7039      	strb	r1, [r7, #0]
        timer_hw->alarm[alarm_num] = (uint32_t) t;
10004c02:	1d01      	adds	r1, r0, #4
10004c04:	0089      	lsls	r1, r1, #2
10004c06:	510a      	str	r2, [r1, r4]
        target_hi[alarm_num] = t >> 32u;
10004c08:	4918      	ldr	r1, [pc, #96]	; (10004c6c <hardware_alarm_set_target+0xc0>)
10004c0a:	0080      	lsls	r0, r0, #2
10004c0c:	5043      	str	r3, [r0, r1]
        if (!(timer_hw->armed & 1u << alarm_num)) {
10004c0e:	6a21      	ldr	r1, [r4, #32]
        missed = false;
10004c10:	2000      	movs	r0, #0
        if (!(timer_hw->armed & 1u << alarm_num)) {
10004c12:	4229      	tst	r1, r5
10004c14:	d00b      	beq.n	10004c2e <hardware_alarm_set_target+0x82>
    uint32_t hi = timer_hw->timerawh;
10004c16:	6a61      	ldr	r1, [r4, #36]	; 0x24
        lo = timer_hw->timerawl;
10004c18:	0008      	movs	r0, r1
10004c1a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
        uint32_t next_hi = timer_hw->timerawh;
10004c1c:	6a61      	ldr	r1, [r4, #36]	; 0x24
        if (hi == next_hi) break;
10004c1e:	4281      	cmp	r1, r0
10004c20:	d1fa      	bne.n	10004c18 <hardware_alarm_set_target+0x6c>
            if (time_us_64() >= t) {
10004c22:	428b      	cmp	r3, r1
10004c24:	d802      	bhi.n	10004c2c <hardware_alarm_set_target+0x80>
10004c26:	d10a      	bne.n	10004c3e <hardware_alarm_set_target+0x92>
10004c28:	42b2      	cmp	r2, r6
10004c2a:	d908      	bls.n	10004c3e <hardware_alarm_set_target+0x92>
        missed = false;
10004c2c:	2000      	movs	r0, #0
10004c2e:	f3bf 8f5f 	dmb	sy
    *lock = 0;
10004c32:	2200      	movs	r2, #0
10004c34:	4b0b      	ldr	r3, [pc, #44]	; (10004c64 <hardware_alarm_set_target+0xb8>)
10004c36:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10004c38:	f389 8810 	msr	PRIMASK, r9
}
10004c3c:	e7c5      	b.n	10004bca <hardware_alarm_set_target+0x1e>
                timer_hw->armed = 1u << alarm_num;
10004c3e:	4b08      	ldr	r3, [pc, #32]	; (10004c60 <hardware_alarm_set_target+0xb4>)
                timer_callbacks_pending &= ~(1u << alarm_num);
10004c40:	4642      	mov	r2, r8
                timer_hw->armed = 1u << alarm_num;
10004c42:	621d      	str	r5, [r3, #32]
                timer_hw->intr = 1u << alarm_num; // clear the IRQ too
10004c44:	635d      	str	r5, [r3, #52]	; 0x34
                timer_callbacks_pending &= ~(1u << alarm_num);
10004c46:	4663      	mov	r3, ip
10004c48:	4393      	bics	r3, r2
                missed = true;
10004c4a:	2001      	movs	r0, #1
                timer_callbacks_pending &= ~(1u << alarm_num);
10004c4c:	703b      	strb	r3, [r7, #0]
    __asm volatile ("dmb");
10004c4e:	f3bf 8f5f 	dmb	sy
    *lock = 0;
10004c52:	2200      	movs	r2, #0
10004c54:	4b03      	ldr	r3, [pc, #12]	; (10004c64 <hardware_alarm_set_target+0xb8>)
10004c56:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10004c58:	f389 8810 	msr	PRIMASK, r9
10004c5c:	e7b5      	b.n	10004bca <hardware_alarm_set_target+0x1e>
10004c5e:	46c0      	nop			; (mov r8, r8)
10004c60:	40054000 	.word	0x40054000
10004c64:	d0000128 	.word	0xd0000128
10004c68:	20017335 	.word	0x20017335
10004c6c:	20017310 	.word	0x20017310

10004c70 <hardware_alarm_cancel>:
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
10004c70:	f3ef 8c10 	mrs	ip, PRIMASK
    __asm volatile ("cpsid i");
10004c74:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
10004c76:	490a      	ldr	r1, [pc, #40]	; (10004ca0 <hardware_alarm_cancel+0x30>)
10004c78:	680b      	ldr	r3, [r1, #0]
10004c7a:	2b00      	cmp	r3, #0
10004c7c:	d0fc      	beq.n	10004c78 <hardware_alarm_cancel+0x8>
    __asm volatile ("dmb");
10004c7e:	f3bf 8f5f 	dmb	sy
void hardware_alarm_cancel(uint alarm_num) {
    check_hardware_alarm_num_param(alarm_num);

    spin_lock_t *lock = spin_lock_instance(PICO_SPINLOCK_ID_TIMER);
    uint32_t save = spin_lock_blocking(lock);
    timer_hw->armed = 1u << alarm_num;
10004c82:	2301      	movs	r3, #1
10004c84:	4083      	lsls	r3, r0
10004c86:	4a07      	ldr	r2, [pc, #28]	; (10004ca4 <hardware_alarm_cancel+0x34>)
    timer_callbacks_pending &= ~(1u << alarm_num);
10004c88:	4807      	ldr	r0, [pc, #28]	; (10004ca8 <hardware_alarm_cancel+0x38>)
    timer_hw->armed = 1u << alarm_num;
10004c8a:	6213      	str	r3, [r2, #32]
    timer_callbacks_pending &= ~(1u << alarm_num);
10004c8c:	7802      	ldrb	r2, [r0, #0]
10004c8e:	439a      	bics	r2, r3
10004c90:	7002      	strb	r2, [r0, #0]
10004c92:	f3bf 8f5f 	dmb	sy
    *lock = 0;
10004c96:	2300      	movs	r3, #0
10004c98:	600b      	str	r3, [r1, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10004c9a:	f38c 8810 	msr	PRIMASK, ip
    spin_unlock(lock, save);
}
10004c9e:	4770      	bx	lr
10004ca0:	d0000128 	.word	0xd0000128
10004ca4:	40054000 	.word	0x40054000
10004ca8:	20017335 	.word	0x20017335

10004cac <_retrieve_unique_id_on_boot>:

static_assert(PICO_UNIQUE_BOARD_ID_SIZE_BYTES == FLASH_UNIQUE_ID_SIZE_BYTES, "Board ID size must match flash ID size");

static pico_unique_board_id_t retrieved_id;

static void __attribute__((constructor)) _retrieve_unique_id_on_boot() {
10004cac:	b510      	push	{r4, lr}
    // build. Since this constructor is pre-main it would be annoying to
    // debug, so just produce something well-defined and obviously wrong.
    for (int i = 0; i < PICO_UNIQUE_BOARD_ID_SIZE_BYTES; i++)
        retrieved_id.id[i] = 0xee;
#else
    flash_get_unique_id(retrieved_id.id);
10004cae:	4802      	ldr	r0, [pc, #8]	; (10004cb8 <_retrieve_unique_id_on_boot+0xc>)
10004cb0:	f7fc fd5c 	bl	1000176c <flash_get_unique_id>
#endif
}
10004cb4:	bd10      	pop	{r4, pc}
10004cb6:	46c0      	nop			; (mov r8, r8)
10004cb8:	200172fc 	.word	0x200172fc

10004cbc <watchdog_start_tick>:
#include "hardware/structs/psm.h"

/// \tag::watchdog_start_tick[]
void watchdog_start_tick(uint cycles) {
    // Important: This function also provides a tick reference to the timer
    watchdog_hw->tick = cycles | WATCHDOG_TICK_ENABLE_BITS;
10004cbc:	2380      	movs	r3, #128	; 0x80
10004cbe:	4a02      	ldr	r2, [pc, #8]	; (10004cc8 <watchdog_start_tick+0xc>)
10004cc0:	009b      	lsls	r3, r3, #2
10004cc2:	4303      	orrs	r3, r0
10004cc4:	62d3      	str	r3, [r2, #44]	; 0x2c
}
10004cc6:	4770      	bx	lr
10004cc8:	40058000 	.word	0x40058000

10004ccc <xosc_init>:
#include "hardware/structs/xosc.h"

void xosc_init(void) {
    // Assumes 1-15 MHz input
    assert(XOSC_MHZ <= 15);
    xosc_hw->ctrl = XOSC_CTRL_FREQ_RANGE_VALUE_1_15MHZ;
10004ccc:	23aa      	movs	r3, #170	; 0xaa
10004cce:	4a06      	ldr	r2, [pc, #24]	; (10004ce8 <xosc_init+0x1c>)
10004cd0:	011b      	lsls	r3, r3, #4
10004cd2:	6013      	str	r3, [r2, #0]

    // Set xosc startup delay
    uint32_t startup_delay = (((12 * MHZ) / 1000) + 128) / 256;
    xosc_hw->startup = startup_delay;
10004cd4:	232f      	movs	r3, #47	; 0x2f
10004cd6:	4905      	ldr	r1, [pc, #20]	; (10004cec <xosc_init+0x20>)
10004cd8:	60d3      	str	r3, [r2, #12]
10004cda:	4b05      	ldr	r3, [pc, #20]	; (10004cf0 <xosc_init+0x24>)
10004cdc:	6019      	str	r1, [r3, #0]

    // Set the enable bit now that we have set freq range and startup delay
    hw_set_bits(&xosc_hw->ctrl, XOSC_CTRL_ENABLE_VALUE_ENABLE << XOSC_CTRL_ENABLE_LSB);

    // Wait for XOSC to be stable
    while(!(xosc_hw->status & XOSC_STATUS_STABLE_BITS));
10004cde:	6853      	ldr	r3, [r2, #4]
10004ce0:	2b00      	cmp	r3, #0
10004ce2:	dafc      	bge.n	10004cde <xosc_init+0x12>
}
10004ce4:	4770      	bx	lr
10004ce6:	46c0      	nop			; (mov r8, r8)
10004ce8:	40024000 	.word	0x40024000
10004cec:	00fab000 	.word	0x00fab000
10004cf0:	40026000 	.word	0x40026000

10004cf4 <tud_cdc_n_connected>:

//--------------------------------------------------------------------+
// APPLICATION API
//--------------------------------------------------------------------+
bool tud_cdc_n_connected(uint8_t itf)
{
10004cf4:	b510      	push	{r4, lr}
10004cf6:	0004      	movs	r4, r0
bool tud_suspended(void);

// Check if device is ready to transfer
static inline bool tud_ready(void)
{
  return tud_mounted() && !tud_suspended();
10004cf8:	f000 fc9c 	bl	10005634 <tud_mounted>
10004cfc:	2800      	cmp	r0, #0
10004cfe:	d101      	bne.n	10004d04 <tud_cdc_n_connected+0x10>
10004d00:	2000      	movs	r0, #0
  // DTR (bit 0) active  is considered as connected
  return tud_ready() && tu_bit_test(_cdcd_itf[itf].line_state, 0);
}
10004d02:	bd10      	pop	{r4, pc}
10004d04:	f000 fc9e 	bl	10005644 <tud_suspended>
10004d08:	2800      	cmp	r0, #0
10004d0a:	d1f9      	bne.n	10004d00 <tud_cdc_n_connected+0xc>
  return tud_ready() && tu_bit_test(_cdcd_itf[itf].line_state, 0);
10004d0c:	0060      	lsls	r0, r4, #1
10004d0e:	1904      	adds	r4, r0, r4
10004d10:	0123      	lsls	r3, r4, #4
10004d12:	4804      	ldr	r0, [pc, #16]	; (10004d24 <tud_cdc_n_connected+0x30>)
10004d14:	1b1c      	subs	r4, r3, r4
10004d16:	0124      	lsls	r4, r4, #4
10004d18:	1904      	adds	r4, r0, r4
10004d1a:	2001      	movs	r0, #1
10004d1c:	7923      	ldrb	r3, [r4, #4]
10004d1e:	4018      	ands	r0, r3
10004d20:	e7ef      	b.n	10004d02 <tud_cdc_n_connected+0xe>
10004d22:	46c0      	nop			; (mov r8, r8)
10004d24:	200166b8 	.word	0x200166b8

10004d28 <tud_cdc_n_available>:
//--------------------------------------------------------------------+
// READ API
//--------------------------------------------------------------------+
uint32_t tud_cdc_n_available(uint8_t itf)
{
  return tu_fifo_count(&_cdcd_itf[itf].rx_ff);
10004d28:	0043      	lsls	r3, r0, #1
10004d2a:	181b      	adds	r3, r3, r0
{
10004d2c:	b510      	push	{r4, lr}
  return tu_fifo_count(&_cdcd_itf[itf].rx_ff);
10004d2e:	0118      	lsls	r0, r3, #4
10004d30:	1ac0      	subs	r0, r0, r3
10004d32:	0100      	lsls	r0, r0, #4
10004d34:	4b02      	ldr	r3, [pc, #8]	; (10004d40 <tud_cdc_n_available+0x18>)
10004d36:	3010      	adds	r0, #16
10004d38:	18c0      	adds	r0, r0, r3
10004d3a:	f000 fab9 	bl	100052b0 <tu_fifo_count>
}
10004d3e:	bd10      	pop	{r4, pc}
10004d40:	200166b8 	.word	0x200166b8

10004d44 <tud_cdc_n_read>:

uint32_t tud_cdc_n_read(uint8_t itf, void* buffer, uint32_t bufsize)
{
10004d44:	b5f0      	push	{r4, r5, r6, r7, lr}
10004d46:	0044      	lsls	r4, r0, #1
10004d48:	1820      	adds	r0, r4, r0
10004d4a:	0104      	lsls	r4, r0, #4
10004d4c:	1a24      	subs	r4, r4, r0
10004d4e:	0124      	lsls	r4, r4, #4
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
  uint32_t num_read = tu_fifo_read_n(&p_cdc->rx_ff, buffer, bufsize);
10004d50:	0026      	movs	r6, r4
{
10004d52:	46c6      	mov	lr, r8
  uint32_t num_read = tu_fifo_read_n(&p_cdc->rx_ff, buffer, bufsize);
10004d54:	4f17      	ldr	r7, [pc, #92]	; (10004db4 <tud_cdc_n_read+0x70>)
10004d56:	3610      	adds	r6, #16
10004d58:	19f6      	adds	r6, r6, r7
{
10004d5a:	b500      	push	{lr}
  uint32_t num_read = tu_fifo_read_n(&p_cdc->rx_ff, buffer, bufsize);
10004d5c:	0030      	movs	r0, r6
10004d5e:	b292      	uxth	r2, r2
10004d60:	f000 fb14 	bl	1000538c <tu_fifo_read_n>
10004d64:	0005      	movs	r5, r0
  uint16_t available = tu_fifo_remaining(&p_cdc->rx_ff);
10004d66:	0030      	movs	r0, r6
10004d68:	f000 faae 	bl	100052c8 <tu_fifo_remaining>
  TU_VERIFY(available >= sizeof(p_cdc->epout_buf), );
10004d6c:	283f      	cmp	r0, #63	; 0x3f
10004d6e:	d803      	bhi.n	10004d78 <tud_cdc_n_read+0x34>
  _prep_out_transaction(p_cdc);
  return num_read;
}
10004d70:	0028      	movs	r0, r5
10004d72:	bc80      	pop	{r7}
10004d74:	46b8      	mov	r8, r7
10004d76:	bdf0      	pop	{r4, r5, r6, r7, pc}
  TU_VERIFY(usbd_edpt_claim(rhport, p_cdc->ep_out), );
10004d78:	193b      	adds	r3, r7, r4
10004d7a:	2000      	movs	r0, #0
10004d7c:	78d9      	ldrb	r1, [r3, #3]
10004d7e:	4698      	mov	r8, r3
10004d80:	f001 f9c6 	bl	10006110 <usbd_edpt_claim>
10004d84:	2800      	cmp	r0, #0
10004d86:	d0f3      	beq.n	10004d70 <tud_cdc_n_read+0x2c>
  available = tu_fifo_remaining(&p_cdc->rx_ff);
10004d88:	0030      	movs	r0, r6
10004d8a:	f000 fa9d 	bl	100052c8 <tu_fifo_remaining>
  if ( available >= sizeof(p_cdc->epout_buf) )  {
10004d8e:	283f      	cmp	r0, #63	; 0x3f
10004d90:	d90a      	bls.n	10004da8 <tud_cdc_n_read+0x64>
    usbd_edpt_xfer(rhport, p_cdc->ep_out, p_cdc->epout_buf, sizeof(p_cdc->epout_buf));
10004d92:	2394      	movs	r3, #148	; 0x94
10004d94:	009b      	lsls	r3, r3, #2
10004d96:	18e2      	adds	r2, r4, r3
10004d98:	4643      	mov	r3, r8
10004d9a:	19d2      	adds	r2, r2, r7
10004d9c:	78d9      	ldrb	r1, [r3, #3]
10004d9e:	2000      	movs	r0, #0
10004da0:	2340      	movs	r3, #64	; 0x40
10004da2:	f001 fa0d 	bl	100061c0 <usbd_edpt_xfer>
10004da6:	e7e3      	b.n	10004d70 <tud_cdc_n_read+0x2c>
    usbd_edpt_release(rhport, p_cdc->ep_out);
10004da8:	4643      	mov	r3, r8
10004daa:	2000      	movs	r0, #0
10004dac:	78d9      	ldrb	r1, [r3, #3]
10004dae:	f001 f9e1 	bl	10006174 <usbd_edpt_release>
  return num_read;
10004db2:	e7dd      	b.n	10004d70 <tud_cdc_n_read+0x2c>
10004db4:	200166b8 	.word	0x200166b8

10004db8 <tud_cdc_n_write_flush>:

  return ret;
}

uint32_t tud_cdc_n_write_flush (uint8_t itf)
{
10004db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10004dba:	4647      	mov	r7, r8
10004dbc:	46ce      	mov	lr, r9
10004dbe:	b580      	push	{r7, lr}
10004dc0:	0047      	lsls	r7, r0, #1
10004dc2:	183b      	adds	r3, r7, r0
10004dc4:	011c      	lsls	r4, r3, #4
10004dc6:	1ae4      	subs	r4, r4, r3
10004dc8:	0124      	lsls	r4, r4, #4
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];

  // No data to send
  if ( !tu_fifo_count(&p_cdc->tx_ff) ) return 0;
10004dca:	4b23      	ldr	r3, [pc, #140]	; (10004e58 <tud_cdc_n_write_flush+0xa0>)
10004dcc:	0026      	movs	r6, r4
10004dce:	4698      	mov	r8, r3
10004dd0:	3628      	adds	r6, #40	; 0x28
10004dd2:	4446      	add	r6, r8
{
10004dd4:	0005      	movs	r5, r0
  if ( !tu_fifo_count(&p_cdc->tx_ff) ) return 0;
10004dd6:	0030      	movs	r0, r6
10004dd8:	f000 fa6a 	bl	100052b0 <tu_fifo_count>
10004ddc:	2800      	cmp	r0, #0
10004dde:	d104      	bne.n	10004dea <tud_cdc_n_write_flush+0x32>
  }else
  {
    // Release endpoint since we don't make any transfer
    // Note: data is dropped if terminal is not connected
    usbd_edpt_release(rhport, p_cdc->ep_in);
    return 0;
10004de0:	2000      	movs	r0, #0
  }
}
10004de2:	bcc0      	pop	{r6, r7}
10004de4:	46b9      	mov	r9, r7
10004de6:	46b0      	mov	r8, r6
10004de8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  TU_VERIFY( usbd_edpt_claim(rhport, p_cdc->ep_in), 0 );
10004dea:	46a1      	mov	r9, r4
10004dec:	44c1      	add	r9, r8
10004dee:	464b      	mov	r3, r9
10004df0:	2000      	movs	r0, #0
10004df2:	7899      	ldrb	r1, [r3, #2]
10004df4:	f001 f98c 	bl	10006110 <usbd_edpt_claim>
10004df8:	2800      	cmp	r0, #0
10004dfa:	d0f1      	beq.n	10004de0 <tud_cdc_n_write_flush+0x28>
  uint16_t const count = tu_fifo_read_n(&p_cdc->tx_ff, p_cdc->epin_buf, sizeof(p_cdc->epin_buf));
10004dfc:	23a4      	movs	r3, #164	; 0xa4
10004dfe:	009b      	lsls	r3, r3, #2
10004e00:	469c      	mov	ip, r3
10004e02:	4464      	add	r4, ip
10004e04:	4444      	add	r4, r8
10004e06:	0030      	movs	r0, r6
10004e08:	2240      	movs	r2, #64	; 0x40
10004e0a:	0021      	movs	r1, r4
10004e0c:	f000 fabe 	bl	1000538c <tu_fifo_read_n>
10004e10:	1e06      	subs	r6, r0, #0
  if ( count && tud_cdc_n_connected(itf) )
10004e12:	d016      	beq.n	10004e42 <tud_cdc_n_write_flush+0x8a>
10004e14:	f000 fc0e 	bl	10005634 <tud_mounted>
10004e18:	2800      	cmp	r0, #0
10004e1a:	d012      	beq.n	10004e42 <tud_cdc_n_write_flush+0x8a>
10004e1c:	f000 fc12 	bl	10005644 <tud_suspended>
10004e20:	2800      	cmp	r0, #0
10004e22:	d10e      	bne.n	10004e42 <tud_cdc_n_write_flush+0x8a>
10004e24:	464b      	mov	r3, r9
10004e26:	791b      	ldrb	r3, [r3, #4]
10004e28:	07db      	lsls	r3, r3, #31
10004e2a:	d50a      	bpl.n	10004e42 <tud_cdc_n_write_flush+0x8a>
    TU_ASSERT( usbd_edpt_xfer(rhport, p_cdc->ep_in, p_cdc->epin_buf, count), 0 );
10004e2c:	464b      	mov	r3, r9
10004e2e:	0022      	movs	r2, r4
10004e30:	7899      	ldrb	r1, [r3, #2]
10004e32:	2000      	movs	r0, #0
10004e34:	0033      	movs	r3, r6
10004e36:	f001 f9c3 	bl	100061c0 <usbd_edpt_xfer>
10004e3a:	2800      	cmp	r0, #0
10004e3c:	d0d0      	beq.n	10004de0 <tud_cdc_n_write_flush+0x28>
    return count;
10004e3e:	0030      	movs	r0, r6
10004e40:	e7cf      	b.n	10004de2 <tud_cdc_n_write_flush+0x2a>
    usbd_edpt_release(rhport, p_cdc->ep_in);
10004e42:	197d      	adds	r5, r7, r5
10004e44:	012b      	lsls	r3, r5, #4
10004e46:	1b5d      	subs	r5, r3, r5
10004e48:	012d      	lsls	r5, r5, #4
10004e4a:	4445      	add	r5, r8
10004e4c:	78a9      	ldrb	r1, [r5, #2]
10004e4e:	2000      	movs	r0, #0
10004e50:	f001 f990 	bl	10006174 <usbd_edpt_release>
10004e54:	e7c4      	b.n	10004de0 <tud_cdc_n_write_flush+0x28>
10004e56:	46c0      	nop			; (mov r8, r8)
10004e58:	200166b8 	.word	0x200166b8

10004e5c <tud_cdc_n_write>:
  uint16_t ret = tu_fifo_write_n(&p_cdc->tx_ff, buffer, bufsize);
10004e5c:	0043      	lsls	r3, r0, #1
10004e5e:	181b      	adds	r3, r3, r0
{
10004e60:	b570      	push	{r4, r5, r6, lr}
  uint16_t ret = tu_fifo_write_n(&p_cdc->tx_ff, buffer, bufsize);
10004e62:	011c      	lsls	r4, r3, #4
10004e64:	1ae4      	subs	r4, r4, r3
10004e66:	0124      	lsls	r4, r4, #4
10004e68:	4b09      	ldr	r3, [pc, #36]	; (10004e90 <tud_cdc_n_write+0x34>)
10004e6a:	3428      	adds	r4, #40	; 0x28
10004e6c:	18e4      	adds	r4, r4, r3
{
10004e6e:	0005      	movs	r5, r0
  uint16_t ret = tu_fifo_write_n(&p_cdc->tx_ff, buffer, bufsize);
10004e70:	b292      	uxth	r2, r2
10004e72:	0020      	movs	r0, r4
10004e74:	f000 fb4a 	bl	1000550c <tu_fifo_write_n>
10004e78:	0006      	movs	r6, r0
  if ( tu_fifo_count(&p_cdc->tx_ff) >= BULK_PACKET_SIZE )
10004e7a:	0020      	movs	r0, r4
10004e7c:	f000 fa18 	bl	100052b0 <tu_fifo_count>
10004e80:	283f      	cmp	r0, #63	; 0x3f
10004e82:	d801      	bhi.n	10004e88 <tud_cdc_n_write+0x2c>
}
10004e84:	0030      	movs	r0, r6
10004e86:	bd70      	pop	{r4, r5, r6, pc}
    tud_cdc_n_write_flush(itf);
10004e88:	0028      	movs	r0, r5
10004e8a:	f7ff ff95 	bl	10004db8 <tud_cdc_n_write_flush>
10004e8e:	e7f9      	b.n	10004e84 <tud_cdc_n_write+0x28>
10004e90:	200166b8 	.word	0x200166b8

10004e94 <tud_cdc_n_write_available>:

uint32_t tud_cdc_n_write_available (uint8_t itf)
{
  return tu_fifo_remaining(&_cdcd_itf[itf].tx_ff);
10004e94:	0043      	lsls	r3, r0, #1
10004e96:	181b      	adds	r3, r3, r0
{
10004e98:	b510      	push	{r4, lr}
  return tu_fifo_remaining(&_cdcd_itf[itf].tx_ff);
10004e9a:	0118      	lsls	r0, r3, #4
10004e9c:	1ac0      	subs	r0, r0, r3
10004e9e:	0100      	lsls	r0, r0, #4
10004ea0:	4b02      	ldr	r3, [pc, #8]	; (10004eac <tud_cdc_n_write_available+0x18>)
10004ea2:	3028      	adds	r0, #40	; 0x28
10004ea4:	18c0      	adds	r0, r0, r3
10004ea6:	f000 fa0f 	bl	100052c8 <tu_fifo_remaining>
}
10004eaa:	bd10      	pop	{r4, pc}
10004eac:	200166b8 	.word	0x200166b8

10004eb0 <cdcd_init>:
//--------------------------------------------------------------------+
// USBD Driver API
//--------------------------------------------------------------------+
void cdcd_init(void)
{
  tu_memclr(_cdcd_itf, sizeof(_cdcd_itf));
10004eb0:	22b4      	movs	r2, #180	; 0xb4
{
10004eb2:	b570      	push	{r4, r5, r6, lr}
  tu_memclr(_cdcd_itf, sizeof(_cdcd_itf));
10004eb4:	4c1a      	ldr	r4, [pc, #104]	; (10004f20 <cdcd_init+0x70>)
{
10004eb6:	b082      	sub	sp, #8
  tu_memclr(_cdcd_itf, sizeof(_cdcd_itf));
10004eb8:	2100      	movs	r1, #0
10004eba:	0020      	movs	r0, r4
10004ebc:	0092      	lsls	r2, r2, #2
10004ebe:	f7fc f933 	bl	10001128 <__wrap_memset>

  for(uint8_t i=0; i<CFG_TUD_CDC; i++)
  {
    cdcd_interface_t* p_cdc = &_cdcd_itf[i];

    p_cdc->wanted_char = -1;
10004ec2:	23ff      	movs	r3, #255	; 0xff
10004ec4:	7163      	strb	r3, [r4, #5]

    // default line coding is : stop bit = 1, parity = none, data bits = 8
    p_cdc->line_coding.bit_rate  = 115200;
10004ec6:	4b17      	ldr	r3, [pc, #92]	; (10004f24 <cdcd_init+0x74>)
    p_cdc->line_coding.stop_bits = 0;
    p_cdc->line_coding.parity    = 0;
    p_cdc->line_coding.data_bits = 8;

    // config fifo
    tu_fifo_config(&p_cdc->rx_ff, p_cdc->rx_ff_buf, TU_ARRAY_SIZE(p_cdc->rx_ff_buf), 1, false);
10004ec8:	2580      	movs	r5, #128	; 0x80
    p_cdc->line_coding.bit_rate  = 115200;
10004eca:	80e3      	strh	r3, [r4, #6]
10004ecc:	2301      	movs	r3, #1
10004ece:	2600      	movs	r6, #0
    tu_fifo_config(&p_cdc->rx_ff, p_cdc->rx_ff_buf, TU_ARRAY_SIZE(p_cdc->rx_ff_buf), 1, false);
10004ed0:	0021      	movs	r1, r4
10004ed2:	0020      	movs	r0, r4
    p_cdc->line_coding.bit_rate  = 115200;
10004ed4:	8123      	strh	r3, [r4, #8]
    tu_fifo_config(&p_cdc->rx_ff, p_cdc->rx_ff_buf, TU_ARRAY_SIZE(p_cdc->rx_ff_buf), 1, false);
10004ed6:	006d      	lsls	r5, r5, #1
    p_cdc->line_coding.data_bits = 8;
10004ed8:	3307      	adds	r3, #7
10004eda:	7323      	strb	r3, [r4, #12]
    tu_fifo_config(&p_cdc->rx_ff, p_cdc->rx_ff_buf, TU_ARRAY_SIZE(p_cdc->rx_ff_buf), 1, false);
10004edc:	002a      	movs	r2, r5
10004ede:	3140      	adds	r1, #64	; 0x40
10004ee0:	9600      	str	r6, [sp, #0]
10004ee2:	3b07      	subs	r3, #7
10004ee4:	3010      	adds	r0, #16
10004ee6:	f000 f9a7 	bl	10005238 <tu_fifo_config>
    tu_fifo_config(&p_cdc->tx_ff, p_cdc->tx_ff_buf, TU_ARRAY_SIZE(p_cdc->tx_ff_buf), 1, false);
10004eea:	0021      	movs	r1, r4
10004eec:	0020      	movs	r0, r4
10004eee:	3141      	adds	r1, #65	; 0x41
10004ef0:	002a      	movs	r2, r5
10004ef2:	31ff      	adds	r1, #255	; 0xff
10004ef4:	2301      	movs	r3, #1
10004ef6:	9600      	str	r6, [sp, #0]
10004ef8:	3028      	adds	r0, #40	; 0x28
10004efa:	f000 f99d 	bl	10005238 <tu_fifo_config>
//--------------------------------------------------------------------+
typedef struct mutex osal_mutex_def_t, *osal_mutex_t;

static inline osal_mutex_t osal_mutex_create(osal_mutex_def_t* mdef)
{
    mutex_init(mdef);
10004efe:	2390      	movs	r3, #144	; 0x90
10004f00:	009b      	lsls	r3, r3, #2
10004f02:	18e5      	adds	r5, r4, r3
10004f04:	0028      	movs	r0, r5
10004f06:	f7fc ff01 	bl	10001d0c <mutex_init>
10004f0a:	2392      	movs	r3, #146	; 0x92
10004f0c:	009b      	lsls	r3, r3, #2
bool tu_fifo_config(tu_fifo_t *f, void* buffer, uint16_t depth, uint16_t item_size, bool overwritable);

#if CFG_FIFO_MUTEX
static inline void tu_fifo_config_mutex(tu_fifo_t *f, tu_fifo_mutex_t mutex_hdl)
{
  f->mutex = mutex_hdl;
10004f0e:	6265      	str	r5, [r4, #36]	; 0x24
10004f10:	18e5      	adds	r5, r4, r3
10004f12:	0028      	movs	r0, r5
10004f14:	f7fc fefa 	bl	10001d0c <mutex_init>
10004f18:	63e5      	str	r5, [r4, #60]	; 0x3c
#if CFG_FIFO_MUTEX
    tu_fifo_config_mutex(&p_cdc->rx_ff, osal_mutex_create(&p_cdc->rx_ff_mutex));
    tu_fifo_config_mutex(&p_cdc->tx_ff, osal_mutex_create(&p_cdc->tx_ff_mutex));
#endif
  }
}
10004f1a:	b002      	add	sp, #8
10004f1c:	bd70      	pop	{r4, r5, r6, pc}
10004f1e:	46c0      	nop			; (mov r8, r8)
10004f20:	200166b8 	.word	0x200166b8
10004f24:	ffffc200 	.word	0xffffc200

10004f28 <cdcd_reset>:

void cdcd_reset(uint8_t rhport)
{
10004f28:	b510      	push	{r4, lr}
  (void) rhport;

  for(uint8_t i=0; i<CFG_TUD_CDC; i++)
  {
    tu_memclr(&_cdcd_itf[i], ITF_MEM_RESET_SIZE);
10004f2a:	4c07      	ldr	r4, [pc, #28]	; (10004f48 <cdcd_reset+0x20>)
10004f2c:	2205      	movs	r2, #5
10004f2e:	2100      	movs	r1, #0
10004f30:	0020      	movs	r0, r4
10004f32:	f7fc f8f9 	bl	10001128 <__wrap_memset>
    tu_fifo_clear(&_cdcd_itf[i].rx_ff);
10004f36:	0020      	movs	r0, r4
10004f38:	3010      	adds	r0, #16
10004f3a:	f000 fb65 	bl	10005608 <tu_fifo_clear>
    tu_fifo_clear(&_cdcd_itf[i].tx_ff);
10004f3e:	0020      	movs	r0, r4
10004f40:	3028      	adds	r0, #40	; 0x28
10004f42:	f000 fb61 	bl	10005608 <tu_fifo_clear>
  }
}
10004f46:	bd10      	pop	{r4, pc}
10004f48:	200166b8 	.word	0x200166b8

10004f4c <cdcd_open>:

uint16_t cdcd_open(uint8_t rhport, tusb_desc_interface_t const * itf_desc, uint16_t max_len)
{
10004f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
  // Only support ACM subclass
  TU_VERIFY( TUSB_CLASS_CDC                           == itf_desc->bInterfaceClass &&
10004f4e:	794b      	ldrb	r3, [r1, #5]
{
10004f50:	0006      	movs	r6, r0
10004f52:	b083      	sub	sp, #12
  TU_VERIFY( TUSB_CLASS_CDC                           == itf_desc->bInterfaceClass &&
10004f54:	2b02      	cmp	r3, #2
10004f56:	d102      	bne.n	10004f5e <cdcd_open+0x12>
10004f58:	798b      	ldrb	r3, [r1, #6]
10004f5a:	2b02      	cmp	r3, #2
10004f5c:	d003      	beq.n	10004f66 <cdcd_open+0x1a>
10004f5e:	2500      	movs	r5, #0

  // Prepare for incoming data
  _prep_out_transaction(p_cdc);

  return drv_len;
}
10004f60:	0028      	movs	r0, r5
10004f62:	b003      	add	sp, #12
10004f64:	bdf0      	pop	{r4, r5, r6, r7, pc}
static inline uint32_t tu_abs(int32_t value) { return (uint32_t)((value < 0) ? (-value) : value); }

/// inclusive range checking
static inline bool tu_within(uint32_t lower, uint32_t value, uint32_t upper)
{
  return (lower <= value) && (value <= upper);
10004f66:	79cb      	ldrb	r3, [r1, #7]
10004f68:	2b06      	cmp	r3, #6
10004f6a:	d8f8      	bhi.n	10004f5e <cdcd_open+0x12>
    if ( _cdcd_itf[cdc_id].ep_in == 0 )
10004f6c:	4f2f      	ldr	r7, [pc, #188]	; (1000502c <cdcd_open+0xe0>)
10004f6e:	78bb      	ldrb	r3, [r7, #2]
10004f70:	2b00      	cmp	r3, #0
10004f72:	d1f4      	bne.n	10004f5e <cdcd_open+0x12>
  p_cdc->itf_num = itf_desc->bInterfaceNumber;
10004f74:	788b      	ldrb	r3, [r1, #2]
  uint16_t drv_len = sizeof(tusb_desc_interface_t);
10004f76:	2509      	movs	r5, #9
  p_cdc->itf_num = itf_desc->bInterfaceNumber;
10004f78:	703b      	strb	r3, [r7, #0]
// Descriptor helper
//--------------------------------------------------------------------+
static inline uint8_t const * tu_desc_next(void const* desc)
{
  uint8_t const* desc8 = (uint8_t const*) desc;
  return desc8 + desc8[DESC_OFFSET_LEN];
10004f7a:	780c      	ldrb	r4, [r1, #0]
10004f7c:	190c      	adds	r4, r1, r4
}

static inline uint8_t tu_desc_type(void const* desc)
{
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
10004f7e:	7863      	ldrb	r3, [r4, #1]
  while ( TUSB_DESC_CS_INTERFACE == tu_desc_type(p_desc) && drv_len <= max_len )
10004f80:	2b24      	cmp	r3, #36	; 0x24
10004f82:	d10b      	bne.n	10004f9c <cdcd_open+0x50>
10004f84:	2a08      	cmp	r2, #8
10004f86:	d802      	bhi.n	10004f8e <cdcd_open+0x42>
10004f88:	e00f      	b.n	10004faa <cdcd_open+0x5e>
10004f8a:	42aa      	cmp	r2, r5
10004f8c:	d30d      	bcc.n	10004faa <cdcd_open+0x5e>
}

static inline uint8_t tu_desc_len(void const* desc)
{
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
10004f8e:	7823      	ldrb	r3, [r4, #0]
  return desc8 + desc8[DESC_OFFSET_LEN];
10004f90:	18e4      	adds	r4, r4, r3
    drv_len += tu_desc_len(p_desc);
10004f92:	18ed      	adds	r5, r5, r3
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
10004f94:	7863      	ldrb	r3, [r4, #1]
10004f96:	b2ad      	uxth	r5, r5
  while ( TUSB_DESC_CS_INTERFACE == tu_desc_type(p_desc) && drv_len <= max_len )
10004f98:	2b24      	cmp	r3, #36	; 0x24
10004f9a:	d0f6      	beq.n	10004f8a <cdcd_open+0x3e>
  if ( TUSB_DESC_ENDPOINT == tu_desc_type(p_desc) )
10004f9c:	2b05      	cmp	r3, #5
10004f9e:	d020      	beq.n	10004fe2 <cdcd_open+0x96>
  if ( (TUSB_DESC_INTERFACE == tu_desc_type(p_desc)) &&
10004fa0:	2b04      	cmp	r3, #4
10004fa2:	d102      	bne.n	10004faa <cdcd_open+0x5e>
10004fa4:	7963      	ldrb	r3, [r4, #5]
10004fa6:	2b0a      	cmp	r3, #10
10004fa8:	d02e      	beq.n	10005008 <cdcd_open+0xbc>
  uint16_t available = tu_fifo_remaining(&p_cdc->rx_ff);
10004faa:	4c21      	ldr	r4, [pc, #132]	; (10005030 <cdcd_open+0xe4>)
10004fac:	0020      	movs	r0, r4
10004fae:	f000 f98b 	bl	100052c8 <tu_fifo_remaining>
  TU_VERIFY(available >= sizeof(p_cdc->epout_buf), );
10004fb2:	283f      	cmp	r0, #63	; 0x3f
10004fb4:	d9d4      	bls.n	10004f60 <cdcd_open+0x14>
  TU_VERIFY(usbd_edpt_claim(rhport, p_cdc->ep_out), );
10004fb6:	0026      	movs	r6, r4
10004fb8:	3e10      	subs	r6, #16
10004fba:	2000      	movs	r0, #0
10004fbc:	78f1      	ldrb	r1, [r6, #3]
10004fbe:	f001 f8a7 	bl	10006110 <usbd_edpt_claim>
10004fc2:	2800      	cmp	r0, #0
10004fc4:	d0cc      	beq.n	10004f60 <cdcd_open+0x14>
  available = tu_fifo_remaining(&p_cdc->rx_ff);
10004fc6:	0020      	movs	r0, r4
10004fc8:	f000 f97e 	bl	100052c8 <tu_fifo_remaining>
  if ( available >= sizeof(p_cdc->epout_buf) )  {
10004fcc:	283f      	cmp	r0, #63	; 0x3f
10004fce:	d916      	bls.n	10004ffe <cdcd_open+0xb2>
    usbd_edpt_xfer(rhport, p_cdc->ep_out, p_cdc->epout_buf, sizeof(p_cdc->epout_buf));
10004fd0:	2390      	movs	r3, #144	; 0x90
10004fd2:	009b      	lsls	r3, r3, #2
10004fd4:	18e2      	adds	r2, r4, r3
10004fd6:	78f1      	ldrb	r1, [r6, #3]
10004fd8:	2340      	movs	r3, #64	; 0x40
10004fda:	2000      	movs	r0, #0
10004fdc:	f001 f8f0 	bl	100061c0 <usbd_edpt_xfer>
10004fe0:	e7be      	b.n	10004f60 <cdcd_open+0x14>
    TU_ASSERT( usbd_edpt_open(rhport, (tusb_desc_endpoint_t const *) p_desc), 0 );
10004fe2:	0021      	movs	r1, r4
10004fe4:	0030      	movs	r0, r6
10004fe6:	f001 f88f 	bl	10006108 <usbd_edpt_open>
10004fea:	2800      	cmp	r0, #0
10004fec:	d0b7      	beq.n	10004f5e <cdcd_open+0x12>
    p_cdc->ep_notif = ((tusb_desc_endpoint_t const *) p_desc)->bEndpointAddress;
10004fee:	78a3      	ldrb	r3, [r4, #2]
10004ff0:	707b      	strb	r3, [r7, #1]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
10004ff2:	7823      	ldrb	r3, [r4, #0]
    drv_len += tu_desc_len(p_desc);
10004ff4:	18ed      	adds	r5, r5, r3
  return desc8 + desc8[DESC_OFFSET_LEN];
10004ff6:	18e4      	adds	r4, r4, r3
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
10004ff8:	7863      	ldrb	r3, [r4, #1]
10004ffa:	b2ad      	uxth	r5, r5
  return desc8 + desc8[DESC_OFFSET_LEN];
10004ffc:	e7d0      	b.n	10004fa0 <cdcd_open+0x54>
    usbd_edpt_release(rhport, p_cdc->ep_out);
10004ffe:	78f1      	ldrb	r1, [r6, #3]
10005000:	2000      	movs	r0, #0
10005002:	f001 f8b7 	bl	10006174 <usbd_edpt_release>
10005006:	e7ab      	b.n	10004f60 <cdcd_open+0x14>
    TU_ASSERT( usbd_open_edpt_pair(rhport, p_desc, 2, TUSB_XFER_BULK, &p_cdc->ep_out, &p_cdc->ep_in), 0 );
10005008:	4b0a      	ldr	r3, [pc, #40]	; (10005034 <cdcd_open+0xe8>)
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
1000500a:	7827      	ldrb	r7, [r4, #0]
1000500c:	9301      	str	r3, [sp, #4]
1000500e:	3301      	adds	r3, #1
10005010:	9300      	str	r3, [sp, #0]
10005012:	2202      	movs	r2, #2
10005014:	2302      	movs	r3, #2
10005016:	0030      	movs	r0, r6
  return desc8 + desc8[DESC_OFFSET_LEN];
10005018:	19e1      	adds	r1, r4, r7
1000501a:	f001 f841 	bl	100060a0 <usbd_open_edpt_pair>
1000501e:	2800      	cmp	r0, #0
10005020:	d09d      	beq.n	10004f5e <cdcd_open+0x12>
    drv_len += 2*sizeof(tusb_desc_endpoint_t);
10005022:	350e      	adds	r5, #14
10005024:	19ed      	adds	r5, r5, r7
10005026:	b2ad      	uxth	r5, r5
10005028:	e7bf      	b.n	10004faa <cdcd_open+0x5e>
1000502a:	46c0      	nop			; (mov r8, r8)
1000502c:	200166b8 	.word	0x200166b8
10005030:	200166c8 	.word	0x200166c8
10005034:	200166ba 	.word	0x200166ba

10005038 <cdcd_control_complete>:
bool cdcd_control_complete(uint8_t rhport, tusb_control_request_t const * request)
{
  (void) rhport;

  //------------- Class Specific Request -------------//
  TU_VERIFY (request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS);
10005038:	2360      	movs	r3, #96	; 0x60
1000503a:	780a      	ldrb	r2, [r1, #0]
{
1000503c:	b570      	push	{r4, r5, r6, lr}
  TU_VERIFY (request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS);
1000503e:	4013      	ands	r3, r2
10005040:	2400      	movs	r4, #0
10005042:	2b20      	cmp	r3, #32
10005044:	d10b      	bne.n	1000505e <cdcd_control_complete+0x26>
  // Identify which interface to use
  for ( ; ; itf++, p_cdc++)
  {
    if (itf >= TU_ARRAY_SIZE(_cdcd_itf)) return false;

    if ( p_cdc->itf_num == request->wIndex ) break;
10005046:	4a0b      	ldr	r2, [pc, #44]	; (10005074 <cdcd_control_complete+0x3c>)
10005048:	794b      	ldrb	r3, [r1, #5]
1000504a:	790d      	ldrb	r5, [r1, #4]
1000504c:	7810      	ldrb	r0, [r2, #0]
1000504e:	021b      	lsls	r3, r3, #8
10005050:	432b      	orrs	r3, r5
10005052:	4298      	cmp	r0, r3
10005054:	d103      	bne.n	1000505e <cdcd_control_complete+0x26>
  }

  // Invoke callback
  if ( CDC_REQUEST_SET_LINE_CODING == request->bRequest )
10005056:	784b      	ldrb	r3, [r1, #1]
  {
    if ( tud_cdc_line_coding_cb ) tud_cdc_line_coding_cb(itf, &p_cdc->line_coding);
  }

  return true;
10005058:	3401      	adds	r4, #1
  if ( CDC_REQUEST_SET_LINE_CODING == request->bRequest )
1000505a:	2b20      	cmp	r3, #32
1000505c:	d001      	beq.n	10005062 <cdcd_control_complete+0x2a>
}
1000505e:	0020      	movs	r0, r4
10005060:	bd70      	pop	{r4, r5, r6, pc}
    if ( tud_cdc_line_coding_cb ) tud_cdc_line_coding_cb(itf, &p_cdc->line_coding);
10005062:	4b05      	ldr	r3, [pc, #20]	; (10005078 <cdcd_control_complete+0x40>)
10005064:	2b00      	cmp	r3, #0
10005066:	d0fa      	beq.n	1000505e <cdcd_control_complete+0x26>
10005068:	2000      	movs	r0, #0
1000506a:	1d91      	adds	r1, r2, #6
1000506c:	e000      	b.n	10005070 <cdcd_control_complete+0x38>
1000506e:	bf00      	nop
10005070:	e7f5      	b.n	1000505e <cdcd_control_complete+0x26>
10005072:	46c0      	nop			; (mov r8, r8)
10005074:	200166b8 	.word	0x200166b8
10005078:	00000000 	.word	0x00000000

1000507c <cdcd_control_request>:
// Handle class control request
// return false to stall control endpoint (e.g unsupported request)
bool cdcd_control_request(uint8_t rhport, tusb_control_request_t const * request)
{
  // Handle class request only
  TU_VERIFY(request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS);
1000507c:	2360      	movs	r3, #96	; 0x60
1000507e:	780a      	ldrb	r2, [r1, #0]
{
10005080:	b570      	push	{r4, r5, r6, lr}
  TU_VERIFY(request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS);
10005082:	4013      	ands	r3, r2
10005084:	2400      	movs	r4, #0
10005086:	2b20      	cmp	r3, #32
10005088:	d111      	bne.n	100050ae <cdcd_control_request+0x32>
  // Identify which interface to use
  for ( ; ; itf++, p_cdc++)
  {
    if (itf >= TU_ARRAY_SIZE(_cdcd_itf)) return false;

    if ( p_cdc->itf_num == request->wIndex ) break;
1000508a:	4a14      	ldr	r2, [pc, #80]	; (100050dc <cdcd_control_request+0x60>)
1000508c:	794b      	ldrb	r3, [r1, #5]
1000508e:	790e      	ldrb	r6, [r1, #4]
10005090:	7815      	ldrb	r5, [r2, #0]
10005092:	021b      	lsls	r3, r3, #8
10005094:	4333      	orrs	r3, r6
10005096:	429d      	cmp	r5, r3
10005098:	d109      	bne.n	100050ae <cdcd_control_request+0x32>
  }

  switch ( request->bRequest )
1000509a:	784b      	ldrb	r3, [r1, #1]
1000509c:	2b21      	cmp	r3, #33	; 0x21
1000509e:	d808      	bhi.n	100050b2 <cdcd_control_request+0x36>
100050a0:	2b1f      	cmp	r3, #31
100050a2:	d904      	bls.n	100050ae <cdcd_control_request+0x32>
  {
    case CDC_REQUEST_SET_LINE_CODING:
      TU_LOG2("  Set Line Coding\r\n");
      tud_control_xfer(rhport, request, &p_cdc->line_coding, sizeof(cdc_line_coding_t));
100050a4:	2307      	movs	r3, #7
100050a6:	3206      	adds	r2, #6
100050a8:	f001 f8c6 	bl	10006238 <tud_control_xfer>
    break;

    default: return false; // stall unsupported request
  }

  return true;
100050ac:	2401      	movs	r4, #1
}
100050ae:	0020      	movs	r0, r4
100050b0:	bd70      	pop	{r4, r5, r6, pc}
  switch ( request->bRequest )
100050b2:	2b22      	cmp	r3, #34	; 0x22
100050b4:	d1fb      	bne.n	100050ae <cdcd_control_request+0x32>
      bool const dtr = tu_bit_test(request->wValue, 0);
100050b6:	78cd      	ldrb	r5, [r1, #3]
100050b8:	788b      	ldrb	r3, [r1, #2]
100050ba:	022d      	lsls	r5, r5, #8
100050bc:	431d      	orrs	r5, r3
      p_cdc->line_state = (uint8_t) request->wValue;
100050be:	7115      	strb	r5, [r2, #4]
      tud_control_status(rhport, request);
100050c0:	f001 f8a2 	bl	10006208 <tud_control_status>
      if ( tud_cdc_line_state_cb ) tud_cdc_line_state_cb(itf, dtr, rts);
100050c4:	4b06      	ldr	r3, [pc, #24]	; (100050e0 <cdcd_control_request+0x64>)
  return true;
100050c6:	2401      	movs	r4, #1
      if ( tud_cdc_line_state_cb ) tud_cdc_line_state_cb(itf, dtr, rts);
100050c8:	2b00      	cmp	r3, #0
100050ca:	d0f0      	beq.n	100050ae <cdcd_control_request+0x32>
100050cc:	0029      	movs	r1, r5
}

// Bit
static inline uint32_t tu_bit_set  (uint32_t value, uint8_t pos) { return value | TU_BIT(pos);                  }
static inline uint32_t tu_bit_clear(uint32_t value, uint8_t pos) { return value & (~TU_BIT(pos));               }
static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
100050ce:	086a      	lsrs	r2, r5, #1
100050d0:	2000      	movs	r0, #0
100050d2:	4022      	ands	r2, r4
100050d4:	4021      	ands	r1, r4
100050d6:	e000      	b.n	100050da <cdcd_control_request+0x5e>
100050d8:	bf00      	nop
100050da:	e7e8      	b.n	100050ae <cdcd_control_request+0x32>
100050dc:	200166b8 	.word	0x200166b8
100050e0:	00000000 	.word	0x00000000

100050e4 <cdcd_xfer_cb>:

bool cdcd_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes)
{
100050e4:	b5f0      	push	{r4, r5, r6, r7, lr}
100050e6:	4646      	mov	r6, r8
100050e8:	464f      	mov	r7, r9
100050ea:	46d6      	mov	lr, sl
100050ec:	b5c0      	push	{r6, r7, lr}

  // Identify which interface to use
  for (itf = 0; itf < CFG_TUD_CDC; itf++)
  {
    p_cdc = &_cdcd_itf[itf];
    if ( ( ep_addr == p_cdc->ep_out ) || ( ep_addr == p_cdc->ep_in ) ) break;
100050ee:	4e4d      	ldr	r6, [pc, #308]	; (10005224 <cdcd_xfer_cb+0x140>)
{
100050f0:	4699      	mov	r9, r3
    if ( ( ep_addr == p_cdc->ep_out ) || ( ep_addr == p_cdc->ep_in ) ) break;
100050f2:	78f3      	ldrb	r3, [r6, #3]
{
100050f4:	4680      	mov	r8, r0
100050f6:	000d      	movs	r5, r1
    if ( ( ep_addr == p_cdc->ep_out ) || ( ep_addr == p_cdc->ep_in ) ) break;
100050f8:	428b      	cmp	r3, r1
100050fa:	d157      	bne.n	100051ac <cdcd_xfer_cb+0xc8>

  // Received new data
  if ( ep_addr == p_cdc->ep_out )
  {
    // TODO search for wanted char first for better performance
    for(uint32_t i=0; i<xferred_bytes; i++)
100050fc:	464b      	mov	r3, r9
100050fe:	2b00      	cmp	r3, #0
10005100:	d100      	bne.n	10005104 <cdcd_xfer_cb+0x20>
10005102:	e088      	b.n	10005216 <cdcd_xfer_cb+0x132>
10005104:	4b48      	ldr	r3, [pc, #288]	; (10005228 <cdcd_xfer_cb+0x144>)
10005106:	2b00      	cmp	r3, #0
10005108:	d100      	bne.n	1000510c <cdcd_xfer_cb+0x28>
1000510a:	e075      	b.n	100051f8 <cdcd_xfer_cb+0x114>
1000510c:	2394      	movs	r3, #148	; 0x94
1000510e:	009b      	lsls	r3, r3, #2
10005110:	18f4      	adds	r4, r6, r3
10005112:	46a2      	mov	sl, r4
10005114:	0037      	movs	r7, r6
10005116:	44ca      	add	sl, r9
10005118:	3710      	adds	r7, #16
    {
      tu_fifo_write(&p_cdc->rx_ff, &p_cdc->epout_buf[i]);
1000511a:	0021      	movs	r1, r4
1000511c:	0038      	movs	r0, r7
1000511e:	f000 f9b3 	bl	10005488 <tu_fifo_write>

      // Check for wanted char and invoke callback if needed
      if ( tud_cdc_rx_wanted_cb && ( ((signed char) p_cdc->wanted_char) != -1 ) && ( p_cdc->wanted_char == p_cdc->epout_buf[i] ) )
10005122:	7973      	ldrb	r3, [r6, #5]
10005124:	2bff      	cmp	r3, #255	; 0xff
10005126:	d002      	beq.n	1000512e <cdcd_xfer_cb+0x4a>
10005128:	7821      	ldrb	r1, [r4, #0]
1000512a:	4299      	cmp	r1, r3
1000512c:	d043      	beq.n	100051b6 <cdcd_xfer_cb+0xd2>
    for(uint32_t i=0; i<xferred_bytes; i++)
1000512e:	3401      	adds	r4, #1
10005130:	4554      	cmp	r4, sl
10005132:	d1f2      	bne.n	1000511a <cdcd_xfer_cb+0x36>
        tud_cdc_rx_wanted_cb(itf, p_cdc->wanted_char);
      }
    }

    // invoke receive callback (if there is still data)
    if (tud_cdc_rx_cb && tu_fifo_count(&p_cdc->rx_ff) ) tud_cdc_rx_cb(itf);
10005134:	4b3d      	ldr	r3, [pc, #244]	; (1000522c <cdcd_xfer_cb+0x148>)
10005136:	2b00      	cmp	r3, #0
10005138:	d004      	beq.n	10005144 <cdcd_xfer_cb+0x60>
1000513a:	0038      	movs	r0, r7
1000513c:	f000 f8b8 	bl	100052b0 <tu_fifo_count>
10005140:	2800      	cmp	r0, #0
10005142:	d16b      	bne.n	1000521c <cdcd_xfer_cb+0x138>
  uint16_t available = tu_fifo_remaining(&p_cdc->rx_ff);
10005144:	0038      	movs	r0, r7
10005146:	f000 f8bf 	bl	100052c8 <tu_fifo_remaining>
  TU_VERIFY(available >= sizeof(p_cdc->epout_buf), );
1000514a:	283f      	cmp	r0, #63	; 0x3f
1000514c:	d837      	bhi.n	100051be <cdcd_xfer_cb+0xda>
  }

  // Data sent to host, we continue to fetch from tx fifo to send.
  // Note: This will cause incorrect baudrate set in line coding.
  //       Though maybe the baudrate is not really important !!!
  if ( ep_addr == p_cdc->ep_in )
1000514e:	3f10      	subs	r7, #16
10005150:	78bb      	ldrb	r3, [r7, #2]
10005152:	429d      	cmp	r5, r3
10005154:	d006      	beq.n	10005164 <cdcd_xfer_cb+0x80>
    }
  }

  // nothing to do with notif endpoint for now

  return true;
10005156:	2401      	movs	r4, #1
}
10005158:	0020      	movs	r0, r4
1000515a:	bce0      	pop	{r5, r6, r7}
1000515c:	46ba      	mov	sl, r7
1000515e:	46b1      	mov	r9, r6
10005160:	46a8      	mov	r8, r5
10005162:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ( tud_cdc_tx_complete_cb ) tud_cdc_tx_complete_cb(itf);
10005164:	4b32      	ldr	r3, [pc, #200]	; (10005230 <cdcd_xfer_cb+0x14c>)
10005166:	2b00      	cmp	r3, #0
10005168:	d002      	beq.n	10005170 <cdcd_xfer_cb+0x8c>
1000516a:	2000      	movs	r0, #0
1000516c:	e000      	b.n	10005170 <cdcd_xfer_cb+0x8c>
1000516e:	bf00      	nop
    if ( 0 == tud_cdc_n_write_flush(itf) )
10005170:	2000      	movs	r0, #0
10005172:	f7ff fe21 	bl	10004db8 <tud_cdc_n_write_flush>
10005176:	2800      	cmp	r0, #0
10005178:	d1ed      	bne.n	10005156 <cdcd_xfer_cb+0x72>
      if ( !tu_fifo_count(&p_cdc->tx_ff) && xferred_bytes && (0 == (xferred_bytes & (BULK_PACKET_SIZE-1))) )
1000517a:	4d2e      	ldr	r5, [pc, #184]	; (10005234 <cdcd_xfer_cb+0x150>)
1000517c:	0028      	movs	r0, r5
1000517e:	f000 f897 	bl	100052b0 <tu_fifo_count>
10005182:	2800      	cmp	r0, #0
10005184:	d1e7      	bne.n	10005156 <cdcd_xfer_cb+0x72>
10005186:	464b      	mov	r3, r9
10005188:	2b00      	cmp	r3, #0
1000518a:	d0e4      	beq.n	10005156 <cdcd_xfer_cb+0x72>
1000518c:	069b      	lsls	r3, r3, #26
1000518e:	d1e2      	bne.n	10005156 <cdcd_xfer_cb+0x72>
        if ( usbd_edpt_claim(rhport, p_cdc->ep_in) )
10005190:	3d28      	subs	r5, #40	; 0x28
10005192:	4640      	mov	r0, r8
10005194:	78a9      	ldrb	r1, [r5, #2]
10005196:	f000 ffbb 	bl	10006110 <usbd_edpt_claim>
1000519a:	1e04      	subs	r4, r0, #0
1000519c:	d0db      	beq.n	10005156 <cdcd_xfer_cb+0x72>
          usbd_edpt_xfer(rhport, p_cdc->ep_in, NULL, 0);
1000519e:	2300      	movs	r3, #0
100051a0:	2200      	movs	r2, #0
100051a2:	4640      	mov	r0, r8
100051a4:	78a9      	ldrb	r1, [r5, #2]
100051a6:	f001 f80b 	bl	100061c0 <usbd_edpt_xfer>
100051aa:	e7d5      	b.n	10005158 <cdcd_xfer_cb+0x74>
    if ( ( ep_addr == p_cdc->ep_out ) || ( ep_addr == p_cdc->ep_in ) ) break;
100051ac:	78b3      	ldrb	r3, [r6, #2]
100051ae:	428b      	cmp	r3, r1
100051b0:	d0d8      	beq.n	10005164 <cdcd_xfer_cb+0x80>
  TU_ASSERT(itf < CFG_TUD_CDC);
100051b2:	2400      	movs	r4, #0
100051b4:	e7d0      	b.n	10005158 <cdcd_xfer_cb+0x74>
        tud_cdc_rx_wanted_cb(itf, p_cdc->wanted_char);
100051b6:	2000      	movs	r0, #0
100051b8:	e000      	b.n	100051bc <cdcd_xfer_cb+0xd8>
100051ba:	bf00      	nop
100051bc:	e7b7      	b.n	1000512e <cdcd_xfer_cb+0x4a>
  TU_VERIFY(usbd_edpt_claim(rhport, p_cdc->ep_out), );
100051be:	003c      	movs	r4, r7
100051c0:	3c10      	subs	r4, #16
100051c2:	2000      	movs	r0, #0
100051c4:	78e1      	ldrb	r1, [r4, #3]
100051c6:	f000 ffa3 	bl	10006110 <usbd_edpt_claim>
100051ca:	2800      	cmp	r0, #0
100051cc:	d012      	beq.n	100051f4 <cdcd_xfer_cb+0x110>
  available = tu_fifo_remaining(&p_cdc->rx_ff);
100051ce:	0038      	movs	r0, r7
100051d0:	f000 f87a 	bl	100052c8 <tu_fifo_remaining>
  if ( available >= sizeof(p_cdc->epout_buf) )  {
100051d4:	283f      	cmp	r0, #63	; 0x3f
100051d6:	d909      	bls.n	100051ec <cdcd_xfer_cb+0x108>
    usbd_edpt_xfer(rhport, p_cdc->ep_out, p_cdc->epout_buf, sizeof(p_cdc->epout_buf));
100051d8:	2390      	movs	r3, #144	; 0x90
100051da:	009b      	lsls	r3, r3, #2
100051dc:	18fa      	adds	r2, r7, r3
100051de:	2000      	movs	r0, #0
100051e0:	2340      	movs	r3, #64	; 0x40
100051e2:	78e1      	ldrb	r1, [r4, #3]
100051e4:	f000 ffec 	bl	100061c0 <usbd_edpt_xfer>
  if ( ep_addr == p_cdc->ep_in )
100051e8:	78a3      	ldrb	r3, [r4, #2]
100051ea:	e7b2      	b.n	10005152 <cdcd_xfer_cb+0x6e>
    usbd_edpt_release(rhport, p_cdc->ep_out);
100051ec:	2000      	movs	r0, #0
100051ee:	78e1      	ldrb	r1, [r4, #3]
100051f0:	f000 ffc0 	bl	10006174 <usbd_edpt_release>
  if ( ep_addr == p_cdc->ep_in )
100051f4:	78a3      	ldrb	r3, [r4, #2]
100051f6:	e7ac      	b.n	10005152 <cdcd_xfer_cb+0x6e>
100051f8:	2394      	movs	r3, #148	; 0x94
100051fa:	009b      	lsls	r3, r3, #2
100051fc:	18f4      	adds	r4, r6, r3
100051fe:	46a2      	mov	sl, r4
10005200:	3610      	adds	r6, #16
10005202:	0037      	movs	r7, r6
10005204:	44ca      	add	sl, r9
      tu_fifo_write(&p_cdc->rx_ff, &p_cdc->epout_buf[i]);
10005206:	0021      	movs	r1, r4
10005208:	0038      	movs	r0, r7
    for(uint32_t i=0; i<xferred_bytes; i++)
1000520a:	3401      	adds	r4, #1
      tu_fifo_write(&p_cdc->rx_ff, &p_cdc->epout_buf[i]);
1000520c:	f000 f93c 	bl	10005488 <tu_fifo_write>
    for(uint32_t i=0; i<xferred_bytes; i++)
10005210:	4554      	cmp	r4, sl
10005212:	d1f8      	bne.n	10005206 <cdcd_xfer_cb+0x122>
10005214:	e78e      	b.n	10005134 <cdcd_xfer_cb+0x50>
10005216:	3610      	adds	r6, #16
10005218:	0037      	movs	r7, r6
1000521a:	e78b      	b.n	10005134 <cdcd_xfer_cb+0x50>
    if (tud_cdc_rx_cb && tu_fifo_count(&p_cdc->rx_ff) ) tud_cdc_rx_cb(itf);
1000521c:	2000      	movs	r0, #0
1000521e:	e000      	b.n	10005222 <cdcd_xfer_cb+0x13e>
10005220:	bf00      	nop
10005222:	e78f      	b.n	10005144 <cdcd_xfer_cb+0x60>
10005224:	200166b8 	.word	0x200166b8
	...
10005234:	200166e0 	.word	0x200166e0

10005238 <tu_fifo_config>:
#define tu_fifo_unlock(_ff)

#endif

bool tu_fifo_config(tu_fifo_t *f, void* buffer, uint16_t depth, uint16_t item_size, bool overwritable)
{
10005238:	b5f0      	push	{r4, r5, r6, r7, lr}
1000523a:	46c6      	mov	lr, r8
1000523c:	b500      	push	{lr}
1000523e:	0014      	movs	r4, r2
10005240:	aa06      	add	r2, sp, #24
10005242:	001e      	movs	r6, r3
10005244:	7813      	ldrb	r3, [r2, #0]
  if (depth > 0x8000) return false;               // Maximum depth is 2^15 items
10005246:	2280      	movs	r2, #128	; 0x80
{
10005248:	0005      	movs	r5, r0
1000524a:	000f      	movs	r7, r1
1000524c:	4698      	mov	r8, r3
  if (depth > 0x8000) return false;               // Maximum depth is 2^15 items
1000524e:	0212      	lsls	r2, r2, #8
10005250:	4294      	cmp	r4, r2
10005252:	d82b      	bhi.n	100052ac <tu_fifo_config+0x74>
  if (f->mutex)
10005254:	6940      	ldr	r0, [r0, #20]
10005256:	2800      	cmp	r0, #0
10005258:	d01a      	beq.n	10005290 <tu_fifo_config+0x58>
    return mdef;
}

static inline bool osal_mutex_lock (osal_mutex_t mutex_hdl, uint32_t msec)
{
    return mutex_enter_timeout_ms(mutex_hdl, msec);
1000525a:	2101      	movs	r1, #1
1000525c:	4249      	negs	r1, r1
1000525e:	f005 feb3 	bl	1000afc8 <__mutex_enter_timeout_ms_veneer>
  tu_fifo_lock(f);

  f->buffer = (uint8_t*) buffer;
  f->depth  = depth;
  f->item_size = item_size;
  f->overwritable = overwritable;
10005262:	4643      	mov	r3, r8
  f->depth  = depth;
10005264:	80ac      	strh	r4, [r5, #4]

  f->max_pointer_idx = 2*depth - 1;               // Limit index space to 2*depth - this allows for a fast "modulo" calculation but limits the maximum depth to 2^16/2 = 2^15 and buffer overflows are detectable only if overflow happens once (important for unsupervised DMA applications)
10005266:	0064      	lsls	r4, r4, #1
10005268:	b2a4      	uxth	r4, r4
  f->overwritable = overwritable;
1000526a:	722b      	strb	r3, [r5, #8]
  f->max_pointer_idx = 2*depth - 1;               // Limit index space to 2*depth - this allows for a fast "modulo" calculation but limits the maximum depth to 2^16/2 = 2^15 and buffer overflows are detectable only if overflow happens once (important for unsupervised DMA applications)
1000526c:	1e63      	subs	r3, r4, #1
1000526e:	81ab      	strh	r3, [r5, #12]
  f->non_used_index_space = 0xFFFF - f->max_pointer_idx;

  f->rd_idx = f->wr_idx = 0;
10005270:	2300      	movs	r3, #0
  if (f->mutex)
10005272:	6968      	ldr	r0, [r5, #20]
  f->non_used_index_space = 0xFFFF - f->max_pointer_idx;
10005274:	4264      	negs	r4, r4
  f->rd_idx = f->wr_idx = 0;
10005276:	81eb      	strh	r3, [r5, #14]
  f->buffer = (uint8_t*) buffer;
10005278:	602f      	str	r7, [r5, #0]
  f->item_size = item_size;
1000527a:	80ee      	strh	r6, [r5, #6]
  f->non_used_index_space = 0xFFFF - f->max_pointer_idx;
1000527c:	816c      	strh	r4, [r5, #10]
  f->rd_idx = f->wr_idx = 0;
1000527e:	822b      	strh	r3, [r5, #16]
  if (f->mutex)
10005280:	2800      	cmp	r0, #0
10005282:	d011      	beq.n	100052a8 <tu_fifo_config+0x70>
}

static inline bool osal_mutex_unlock(osal_mutex_t mutex_hdl)
{
    mutex_exit(mutex_hdl);
10005284:	f005 fe80 	bl	1000af88 <__mutex_exit_veneer>

  tu_fifo_unlock(f);

  return true;
10005288:	2001      	movs	r0, #1
}
1000528a:	bc80      	pop	{r7}
1000528c:	46b8      	mov	r8, r7
1000528e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  f->depth  = depth;
10005290:	80ac      	strh	r4, [r5, #4]
  f->max_pointer_idx = 2*depth - 1;               // Limit index space to 2*depth - this allows for a fast "modulo" calculation but limits the maximum depth to 2^16/2 = 2^15 and buffer overflows are detectable only if overflow happens once (important for unsupervised DMA applications)
10005292:	0064      	lsls	r4, r4, #1
10005294:	b2a4      	uxth	r4, r4
  f->overwritable = overwritable;
10005296:	722b      	strb	r3, [r5, #8]
  f->max_pointer_idx = 2*depth - 1;               // Limit index space to 2*depth - this allows for a fast "modulo" calculation but limits the maximum depth to 2^16/2 = 2^15 and buffer overflows are detectable only if overflow happens once (important for unsupervised DMA applications)
10005298:	1e63      	subs	r3, r4, #1
  f->non_used_index_space = 0xFFFF - f->max_pointer_idx;
1000529a:	4264      	negs	r4, r4
  f->rd_idx = f->wr_idx = 0;
1000529c:	81e8      	strh	r0, [r5, #14]
  f->buffer = (uint8_t*) buffer;
1000529e:	6029      	str	r1, [r5, #0]
  f->item_size = item_size;
100052a0:	80ee      	strh	r6, [r5, #6]
  f->max_pointer_idx = 2*depth - 1;               // Limit index space to 2*depth - this allows for a fast "modulo" calculation but limits the maximum depth to 2^16/2 = 2^15 and buffer overflows are detectable only if overflow happens once (important for unsupervised DMA applications)
100052a2:	81ab      	strh	r3, [r5, #12]
  f->non_used_index_space = 0xFFFF - f->max_pointer_idx;
100052a4:	816c      	strh	r4, [r5, #10]
  f->rd_idx = f->wr_idx = 0;
100052a6:	8228      	strh	r0, [r5, #16]
  return true;
100052a8:	2001      	movs	r0, #1
100052aa:	e7ee      	b.n	1000528a <tu_fifo_config+0x52>
  if (depth > 0x8000) return false;               // Maximum depth is 2^15 items
100052ac:	2000      	movs	r0, #0
100052ae:	e7ec      	b.n	1000528a <tu_fifo_config+0x52>

100052b0 <tu_fifo_count>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_count(tu_fifo_t* f)
{
100052b0:	b510      	push	{r4, lr}
  return _tu_fifo_count(f, f->wr_idx, f->rd_idx);
100052b2:	89c4      	ldrh	r4, [r0, #14]
100052b4:	8a01      	ldrh	r1, [r0, #16]
{
100052b6:	0002      	movs	r2, r0
  uint16_t cnt = wAbs-rAbs;
100052b8:	1a60      	subs	r0, r4, r1
100052ba:	b280      	uxth	r0, r0
  if (rAbs > wAbs) cnt -= f->non_used_index_space;
100052bc:	428c      	cmp	r4, r1
100052be:	d202      	bcs.n	100052c6 <tu_fifo_count+0x16>
100052c0:	8953      	ldrh	r3, [r2, #10]
100052c2:	1ac0      	subs	r0, r0, r3
100052c4:	b280      	uxth	r0, r0
}
100052c6:	bd10      	pop	{r4, pc}

100052c8 <tu_fifo_remaining>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_remaining(tu_fifo_t* f)
{
100052c8:	b510      	push	{r4, lr}
  return _tu_fifo_remaining(f, f->wr_idx, f->rd_idx);
100052ca:	89c4      	ldrh	r4, [r0, #14]
100052cc:	8a01      	ldrh	r1, [r0, #16]
  return f->depth - _tu_fifo_count(f, wAbs, rAbs);
100052ce:	8883      	ldrh	r3, [r0, #4]
  uint16_t cnt = wAbs-rAbs;
100052d0:	1a62      	subs	r2, r4, r1
100052d2:	b292      	uxth	r2, r2
  if (rAbs > wAbs) cnt -= f->non_used_index_space;
100052d4:	428c      	cmp	r4, r1
100052d6:	d202      	bcs.n	100052de <tu_fifo_remaining+0x16>
100052d8:	8940      	ldrh	r0, [r0, #10]
100052da:	1a12      	subs	r2, r2, r0
100052dc:	b292      	uxth	r2, r2
  return f->depth - _tu_fifo_count(f, wAbs, rAbs);
100052de:	1a98      	subs	r0, r3, r2
  return _tu_fifo_remaining(f, f->wr_idx, f->rd_idx);
100052e0:	b280      	uxth	r0, r0
}
100052e2:	bd10      	pop	{r4, pc}

100052e4 <tu_fifo_read>:

    @returns TRUE if the queue is not empty
 */
/******************************************************************************/
bool tu_fifo_read(tu_fifo_t* f, void * buffer)
{
100052e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100052e6:	0004      	movs	r4, r0
  if (f->mutex)
100052e8:	6940      	ldr	r0, [r0, #20]
{
100052ea:	000e      	movs	r6, r1
  if (f->mutex)
100052ec:	2800      	cmp	r0, #0
100052ee:	d003      	beq.n	100052f8 <tu_fifo_read+0x14>
    return mutex_enter_timeout_ms(mutex_hdl, msec);
100052f0:	2101      	movs	r1, #1
100052f2:	4249      	negs	r1, r1
100052f4:	f005 fe68 	bl	1000afc8 <__mutex_enter_timeout_ms_veneer>
  tu_fifo_lock(f);                                          // TODO: Here we may distinguish for read and write pointer mutexes!

  // Peek the data
  bool ret = _tu_fifo_peek_at(f, 0, buffer, f->wr_idx, f->rd_idx);    // f->rd_idx might get modified in case of an overflow so we can not use a local variable
100052f8:	89e1      	ldrh	r1, [r4, #14]
100052fa:	8a22      	ldrh	r2, [r4, #16]
100052fc:	b28f      	uxth	r7, r1
  uint16_t cnt = wAbs-rAbs;
100052fe:	1a8d      	subs	r5, r1, r2
  bool ret = _tu_fifo_peek_at(f, 0, buffer, f->wr_idx, f->rd_idx);    // f->rd_idx might get modified in case of an overflow so we can not use a local variable
10005300:	b293      	uxth	r3, r2
  uint16_t cnt = wAbs-rAbs;
10005302:	b2ad      	uxth	r5, r5
  if (rAbs > wAbs) cnt -= f->non_used_index_space;
10005304:	4291      	cmp	r1, r2
10005306:	d202      	bcs.n	1000530e <tu_fifo_read+0x2a>
10005308:	8962      	ldrh	r2, [r4, #10]
1000530a:	1aad      	subs	r5, r5, r2
1000530c:	b2ad      	uxth	r5, r5
  if (cnt > f->depth)
1000530e:	88a2      	ldrh	r2, [r4, #4]
  if ((p < p - offset) || (p - offset > f->max_pointer_idx))
10005310:	89a1      	ldrh	r1, [r4, #12]
  if (cnt > f->depth)
10005312:	42aa      	cmp	r2, r5
10005314:	d205      	bcs.n	10005322 <tu_fifo_read+0x3e>
  if ((p < p - offset) || (p - offset > f->max_pointer_idx))
10005316:	1ab8      	subs	r0, r7, r2
10005318:	4288      	cmp	r0, r1
1000531a:	dc2b      	bgt.n	10005374 <tu_fifo_read+0x90>
    p -= offset;
1000531c:	b280      	uxth	r0, r0
  f->rd_idx = backward_pointer(f, wAbs, f->depth);
1000531e:	0015      	movs	r5, r2
10005320:	8220      	strh	r0, [r4, #16]
  if (cnt == 0 || offset >= cnt) return false;
10005322:	2d00      	cmp	r5, #0
10005324:	d02e      	beq.n	10005384 <tu_fifo_read+0xa0>
  if ((p > p + offset) || (p + offset > f->max_pointer_idx))
10005326:	428b      	cmp	r3, r1
10005328:	d906      	bls.n	10005338 <tu_fifo_read+0x54>
    p = (p + offset) + f->non_used_index_space;
1000532a:	8961      	ldrh	r1, [r4, #10]
1000532c:	185b      	adds	r3, r3, r1
1000532e:	b29b      	uxth	r3, r3
  while ( idx >= depth) idx -= depth;
10005330:	429a      	cmp	r2, r3
10005332:	d803      	bhi.n	1000533c <tu_fifo_read+0x58>
10005334:	1a9b      	subs	r3, r3, r2
10005336:	b29b      	uxth	r3, r3
10005338:	429a      	cmp	r2, r3
1000533a:	d9fb      	bls.n	10005334 <tu_fifo_read+0x50>
  memcpy(p_buffer, f->buffer + (rRel * f->item_size), f->item_size);
1000533c:	88e2      	ldrh	r2, [r4, #6]
1000533e:	6821      	ldr	r1, [r4, #0]
10005340:	4353      	muls	r3, r2
10005342:	0030      	movs	r0, r6
10005344:	18c9      	adds	r1, r1, r3
10005346:	f7fb fef5 	bl	10001134 <__wrap___aeabi_memcpy>
  return true;
1000534a:	2501      	movs	r5, #1
1000534c:	2001      	movs	r0, #1
1000534e:	2601      	movs	r6, #1
  if ((p > p + offset) || (p + offset > f->max_pointer_idx))
10005350:	89a1      	ldrh	r1, [r4, #12]

  // Advance pointer
  f->rd_idx = advance_pointer(f, f->rd_idx, ret);
10005352:	8a22      	ldrh	r2, [r4, #16]
10005354:	b293      	uxth	r3, r2
  if ((p > p + offset) || (p + offset > f->max_pointer_idx))
10005356:	1812      	adds	r2, r2, r0
10005358:	428a      	cmp	r2, r1
1000535a:	dd10      	ble.n	1000537e <tu_fifo_read+0x9a>
    p = (p + offset) + f->non_used_index_space;
1000535c:	8962      	ldrh	r2, [r4, #10]
1000535e:	189b      	adds	r3, r3, r2
10005360:	18ed      	adds	r5, r5, r3
10005362:	b2ad      	uxth	r5, r5
  if (f->mutex)
10005364:	6960      	ldr	r0, [r4, #20]
  f->rd_idx = advance_pointer(f, f->rd_idx, ret);
10005366:	8225      	strh	r5, [r4, #16]
  if (f->mutex)
10005368:	2800      	cmp	r0, #0
1000536a:	d001      	beq.n	10005370 <tu_fifo_read+0x8c>
    mutex_exit(mutex_hdl);
1000536c:	f005 fe0c 	bl	1000af88 <__mutex_exit_veneer>

  tu_fifo_unlock(f);
  return ret;
}
10005370:	0030      	movs	r0, r6
10005372:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    p = (p - offset) - f->non_used_index_space;
10005374:	8960      	ldrh	r0, [r4, #10]
10005376:	1810      	adds	r0, r2, r0
10005378:	1a38      	subs	r0, r7, r0
1000537a:	b280      	uxth	r0, r0
1000537c:	e7cf      	b.n	1000531e <tu_fifo_read+0x3a>
    p += offset;
1000537e:	195d      	adds	r5, r3, r5
10005380:	b2ad      	uxth	r5, r5
10005382:	e7ef      	b.n	10005364 <tu_fifo_read+0x80>
10005384:	2000      	movs	r0, #0
  if (cnt == 0 || offset >= cnt) return false;
10005386:	2600      	movs	r6, #0
10005388:	e7e3      	b.n	10005352 <tu_fifo_read+0x6e>
1000538a:	46c0      	nop			; (mov r8, r8)

1000538c <tu_fifo_read_n>:

    @returns number of items read from the FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_read_n(tu_fifo_t* f, void * buffer, uint16_t count)
{
1000538c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000538e:	46c6      	mov	lr, r8
10005390:	0004      	movs	r4, r0
  if (f->mutex)
10005392:	6940      	ldr	r0, [r0, #20]
{
10005394:	4688      	mov	r8, r1
10005396:	0017      	movs	r7, r2
10005398:	b500      	push	{lr}
  if (f->mutex)
1000539a:	2800      	cmp	r0, #0
1000539c:	d003      	beq.n	100053a6 <tu_fifo_read_n+0x1a>
    return mutex_enter_timeout_ms(mutex_hdl, msec);
1000539e:	2101      	movs	r1, #1
100053a0:	4249      	negs	r1, r1
100053a2:	f005 fe11 	bl	1000afc8 <__mutex_enter_timeout_ms_veneer>
  tu_fifo_lock(f);                                          // TODO: Here we may distinguish for read and write pointer mutexes!

  // Peek the data
  count = _tu_fifo_peek_at_n(f, 0, buffer, count, f->wr_idx, f->rd_idx);        // f->rd_idx might get modified in case of an overflow so we can not use a local variable
100053a6:	89e0      	ldrh	r0, [r4, #14]
100053a8:	8a21      	ldrh	r1, [r4, #16]
100053aa:	b282      	uxth	r2, r0
  uint16_t cnt = wAbs-rAbs;
100053ac:	1a46      	subs	r6, r0, r1
  count = _tu_fifo_peek_at_n(f, 0, buffer, count, f->wr_idx, f->rd_idx);        // f->rd_idx might get modified in case of an overflow so we can not use a local variable
100053ae:	b28b      	uxth	r3, r1
  uint16_t cnt = wAbs-rAbs;
100053b0:	b2b6      	uxth	r6, r6
  if (rAbs > wAbs) cnt -= f->non_used_index_space;
100053b2:	4288      	cmp	r0, r1
100053b4:	d202      	bcs.n	100053bc <tu_fifo_read_n+0x30>
100053b6:	8961      	ldrh	r1, [r4, #10]
100053b8:	1a76      	subs	r6, r6, r1
100053ba:	b2b6      	uxth	r6, r6
  if (cnt > f->depth)
100053bc:	88a5      	ldrh	r5, [r4, #4]
  if ((p < p - offset) || (p - offset > f->max_pointer_idx))
100053be:	89a0      	ldrh	r0, [r4, #12]
  if (cnt > f->depth)
100053c0:	42b5      	cmp	r5, r6
100053c2:	d207      	bcs.n	100053d4 <tu_fifo_read_n+0x48>
  if ((p < p - offset) || (p - offset > f->max_pointer_idx))
100053c4:	1b53      	subs	r3, r2, r5
100053c6:	4283      	cmp	r3, r0
100053c8:	dc2c      	bgt.n	10005424 <tu_fifo_read_n+0x98>
    p -= offset;
100053ca:	b29b      	uxth	r3, r3
    rAbs = f->rd_idx;
100053cc:	002e      	movs	r6, r5
  f->rd_idx = backward_pointer(f, wAbs, f->depth);
100053ce:	8223      	strh	r3, [r4, #16]
    rAbs = f->rd_idx;
100053d0:	8a23      	ldrh	r3, [r4, #16]
100053d2:	b29b      	uxth	r3, r3
  if (cnt == 0 || offset >= cnt) return 0;
100053d4:	2e00      	cmp	r6, #0
100053d6:	d02c      	beq.n	10005432 <tu_fifo_read_n+0xa6>
  if (cnt < n) {
100053d8:	1c3a      	adds	r2, r7, #0
100053da:	42b7      	cmp	r7, r6
100053dc:	d827      	bhi.n	1000542e <tu_fifo_read_n+0xa2>
100053de:	b296      	uxth	r6, r2
  if ((p > p + offset) || (p + offset > f->max_pointer_idx))
100053e0:	4283      	cmp	r3, r0
100053e2:	d902      	bls.n	100053ea <tu_fifo_read_n+0x5e>
    p = (p + offset) + f->non_used_index_space;
100053e4:	8961      	ldrh	r1, [r4, #10]
100053e6:	185b      	adds	r3, r3, r1
100053e8:	b29b      	uxth	r3, r3
  while ( idx >= depth) idx -= depth;
100053ea:	429d      	cmp	r5, r3
100053ec:	d803      	bhi.n	100053f6 <tu_fifo_read_n+0x6a>
100053ee:	1b5b      	subs	r3, r3, r5
100053f0:	b29b      	uxth	r3, r3
100053f2:	429d      	cmp	r5, r3
100053f4:	d9fb      	bls.n	100053ee <tu_fifo_read_n+0x62>
  if(rRel + n <= f->depth)       // Linear mode only
100053f6:	199a      	adds	r2, r3, r6
100053f8:	0037      	movs	r7, r6
    memcpy(p_buffer, f->buffer + (rRel * f->item_size), n*f->item_size);
100053fa:	88e1      	ldrh	r1, [r4, #6]
  if(rRel + n <= f->depth)       // Linear mode only
100053fc:	42aa      	cmp	r2, r5
100053fe:	dc2c      	bgt.n	1000545a <tu_fifo_read_n+0xce>
    memcpy(p_buffer, f->buffer + (rRel * f->item_size), n*f->item_size);
10005400:	000a      	movs	r2, r1
10005402:	4359      	muls	r1, r3
10005404:	6823      	ldr	r3, [r4, #0]
10005406:	4372      	muls	r2, r6
10005408:	469c      	mov	ip, r3
1000540a:	4640      	mov	r0, r8
1000540c:	4461      	add	r1, ip
1000540e:	f7fb fe91 	bl	10001134 <__wrap___aeabi_memcpy>

  // Advance read pointer
  f->rd_idx = advance_pointer(f, f->rd_idx, count);
10005412:	8a22      	ldrh	r2, [r4, #16]
  if ((p > p + offset) || (p + offset > f->max_pointer_idx))
10005414:	89a0      	ldrh	r0, [r4, #12]
  f->rd_idx = advance_pointer(f, f->rd_idx, count);
10005416:	b293      	uxth	r3, r2
  if ((p > p + offset) || (p + offset > f->max_pointer_idx))
10005418:	19d2      	adds	r2, r2, r7
1000541a:	4282      	cmp	r2, r0
1000541c:	dc0f      	bgt.n	1000543e <tu_fifo_read_n+0xb2>
    p += offset;
1000541e:	199b      	adds	r3, r3, r6
10005420:	b29b      	uxth	r3, r3
10005422:	e010      	b.n	10005446 <tu_fifo_read_n+0xba>
    p = (p - offset) - f->non_used_index_space;
10005424:	8963      	ldrh	r3, [r4, #10]
10005426:	18eb      	adds	r3, r5, r3
10005428:	1ad3      	subs	r3, r2, r3
1000542a:	b29b      	uxth	r3, r3
1000542c:	e7ce      	b.n	100053cc <tu_fifo_read_n+0x40>
1000542e:	1c32      	adds	r2, r6, #0
10005430:	e7d5      	b.n	100053de <tu_fifo_read_n+0x52>
10005432:	2700      	movs	r7, #0
  f->rd_idx = advance_pointer(f, f->rd_idx, count);
10005434:	8a22      	ldrh	r2, [r4, #16]
10005436:	b293      	uxth	r3, r2
  if ((p > p + offset) || (p + offset > f->max_pointer_idx))
10005438:	19d2      	adds	r2, r2, r7
1000543a:	4282      	cmp	r2, r0
1000543c:	ddef      	ble.n	1000541e <tu_fifo_read_n+0x92>
    p = (p + offset) + f->non_used_index_space;
1000543e:	8962      	ldrh	r2, [r4, #10]
10005440:	189b      	adds	r3, r3, r2
10005442:	18f3      	adds	r3, r6, r3
10005444:	b29b      	uxth	r3, r3
  if (f->mutex)
10005446:	6960      	ldr	r0, [r4, #20]
  f->rd_idx = advance_pointer(f, f->rd_idx, count);
10005448:	8223      	strh	r3, [r4, #16]
  if (f->mutex)
1000544a:	2800      	cmp	r0, #0
1000544c:	d001      	beq.n	10005452 <tu_fifo_read_n+0xc6>
    mutex_exit(mutex_hdl);
1000544e:	f005 fd9b 	bl	1000af88 <__mutex_exit_veneer>

  tu_fifo_unlock(f);
  return count;
}
10005452:	0030      	movs	r0, r6
10005454:	bc80      	pop	{r7}
10005456:	46b8      	mov	r8, r7
10005458:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint16_t nLin = f->depth - rRel;
1000545a:	1aed      	subs	r5, r5, r3
    memcpy(p_buffer, f->buffer + (rRel * f->item_size), nLin*f->item_size);
1000545c:	b2ad      	uxth	r5, r5
1000545e:	002a      	movs	r2, r5
10005460:	434a      	muls	r2, r1
10005462:	4359      	muls	r1, r3
10005464:	6823      	ldr	r3, [r4, #0]
10005466:	4640      	mov	r0, r8
10005468:	469c      	mov	ip, r3
1000546a:	4461      	add	r1, ip
1000546c:	f7fb fe62 	bl	10001134 <__wrap___aeabi_memcpy>
    memcpy(p_buffer + nLin*f->item_size, f->buffer, (n - nLin) * f->item_size);
10005470:	88e3      	ldrh	r3, [r4, #6]
10005472:	1b72      	subs	r2, r6, r5
10005474:	0018      	movs	r0, r3
10005476:	4368      	muls	r0, r5
10005478:	435a      	muls	r2, r3
1000547a:	6821      	ldr	r1, [r4, #0]
1000547c:	4440      	add	r0, r8
1000547e:	f7fb fe59 	bl	10001134 <__wrap___aeabi_memcpy>
  if ((p > p + offset) || (p + offset > f->max_pointer_idx))
10005482:	89a0      	ldrh	r0, [r4, #12]
10005484:	e7d6      	b.n	10005434 <tu_fifo_read_n+0xa8>
10005486:	46c0      	nop			; (mov r8, r8)

10005488 <tu_fifo_write>:
    @returns TRUE if the data was written to the FIFO (overwrittable
             FIFO will always return TRUE)
 */
/******************************************************************************/
bool tu_fifo_write(tu_fifo_t* f, const void * data)
{
10005488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000548a:	0004      	movs	r4, r0
  if (f->mutex)
1000548c:	6940      	ldr	r0, [r0, #20]
{
1000548e:	000e      	movs	r6, r1
  if (f->mutex)
10005490:	2800      	cmp	r0, #0
10005492:	d003      	beq.n	1000549c <tu_fifo_write+0x14>
    return mutex_enter_timeout_ms(mutex_hdl, msec);
10005494:	2101      	movs	r1, #1
10005496:	4249      	negs	r1, r1
10005498:	f005 fd96 	bl	1000afc8 <__mutex_enter_timeout_ms_veneer>
  tu_fifo_lock(f);

  uint16_t w = f->wr_idx;
1000549c:	89e2      	ldrh	r2, [r4, #14]

  if ( _tu_fifo_full(f, w, f->rd_idx) && !f->overwritable ) return false;
1000549e:	8a21      	ldrh	r1, [r4, #16]
  uint16_t w = f->wr_idx;
100054a0:	b295      	uxth	r5, r2
  uint16_t cnt = wAbs-rAbs;
100054a2:	1a53      	subs	r3, r2, r1
100054a4:	b29b      	uxth	r3, r3
  if (rAbs > wAbs) cnt -= f->non_used_index_space;
100054a6:	4291      	cmp	r1, r2
100054a8:	d902      	bls.n	100054b0 <tu_fifo_write+0x28>
100054aa:	8962      	ldrh	r2, [r4, #10]
100054ac:	1a9b      	subs	r3, r3, r2
100054ae:	b29b      	uxth	r3, r3
  return (_tu_fifo_count(f, wAbs, rAbs) == f->depth);
100054b0:	88a2      	ldrh	r2, [r4, #4]
  if ( _tu_fifo_full(f, w, f->rd_idx) && !f->overwritable ) return false;
100054b2:	429a      	cmp	r2, r3
100054b4:	d026      	beq.n	10005504 <tu_fifo_write+0x7c>
  if ((p > p + offset) || (p + offset > f->max_pointer_idx))
100054b6:	89a1      	ldrh	r1, [r4, #12]
100054b8:	002b      	movs	r3, r5
100054ba:	42a9      	cmp	r1, r5
100054bc:	d206      	bcs.n	100054cc <tu_fifo_write+0x44>
    p = (p + offset) + f->non_used_index_space;
100054be:	8963      	ldrh	r3, [r4, #10]
100054c0:	18eb      	adds	r3, r5, r3
100054c2:	b29b      	uxth	r3, r3
  while ( idx >= depth) idx -= depth;
100054c4:	429a      	cmp	r2, r3
100054c6:	d803      	bhi.n	100054d0 <tu_fifo_write+0x48>
100054c8:	1a9b      	subs	r3, r3, r2
100054ca:	b29b      	uxth	r3, r3
100054cc:	429a      	cmp	r2, r3
100054ce:	d9fb      	bls.n	100054c8 <tu_fifo_write+0x40>
  memcpy(f->buffer + (wRel * f->item_size), data, f->item_size);
100054d0:	88e2      	ldrh	r2, [r4, #6]
100054d2:	6821      	ldr	r1, [r4, #0]
100054d4:	4353      	muls	r3, r2
100054d6:	18c8      	adds	r0, r1, r3
100054d8:	0031      	movs	r1, r6
100054da:	f7fb fe2b 	bl	10001134 <__wrap___aeabi_memcpy>
  if ((p > p + offset) || (p + offset > f->max_pointer_idx))
100054de:	89a3      	ldrh	r3, [r4, #12]
100054e0:	42ab      	cmp	r3, r5
100054e2:	d90a      	bls.n	100054fa <tu_fifo_write+0x72>
    p += offset;
100054e4:	3501      	adds	r5, #1
100054e6:	b2ad      	uxth	r5, r5
  if (f->mutex)
100054e8:	6960      	ldr	r0, [r4, #20]
  // Advance pointer
  f->wr_idx = advance_pointer(f, w, 1);

  tu_fifo_unlock(f);

  return true;
100054ea:	2701      	movs	r7, #1
  f->wr_idx = advance_pointer(f, w, 1);
100054ec:	81e5      	strh	r5, [r4, #14]
  if (f->mutex)
100054ee:	2800      	cmp	r0, #0
100054f0:	d001      	beq.n	100054f6 <tu_fifo_write+0x6e>
    mutex_exit(mutex_hdl);
100054f2:	f005 fd49 	bl	1000af88 <__mutex_exit_veneer>
}
100054f6:	0038      	movs	r0, r7
100054f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    p = (p + offset) + f->non_used_index_space;
100054fa:	8963      	ldrh	r3, [r4, #10]
100054fc:	18ed      	adds	r5, r5, r3
100054fe:	3501      	adds	r5, #1
10005500:	b2ad      	uxth	r5, r5
10005502:	e7f1      	b.n	100054e8 <tu_fifo_write+0x60>
  if ( _tu_fifo_full(f, w, f->rd_idx) && !f->overwritable ) return false;
10005504:	7a27      	ldrb	r7, [r4, #8]
10005506:	2f00      	cmp	r7, #0
10005508:	d1d5      	bne.n	100054b6 <tu_fifo_write+0x2e>
1000550a:	e7f4      	b.n	100054f6 <tu_fifo_write+0x6e>

1000550c <tu_fifo_write_n>:
                Number of element
    @return Number of written elements
 */
/******************************************************************************/
uint16_t tu_fifo_write_n(tu_fifo_t* f, const void * data, uint16_t count)
{
1000550c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000550e:	4647      	mov	r7, r8
10005510:	46ce      	mov	lr, r9
10005512:	0004      	movs	r4, r0
10005514:	b580      	push	{r7, lr}
10005516:	0015      	movs	r5, r2
10005518:	000f      	movs	r7, r1
  if ( count == 0 ) return 0;
1000551a:	2a00      	cmp	r2, #0
1000551c:	d052      	beq.n	100055c4 <tu_fifo_write_n+0xb8>
  if (f->mutex)
1000551e:	6940      	ldr	r0, [r0, #20]
10005520:	2800      	cmp	r0, #0
10005522:	d003      	beq.n	1000552c <tu_fifo_write_n+0x20>
    return mutex_enter_timeout_ms(mutex_hdl, msec);
10005524:	2101      	movs	r1, #1
10005526:	4249      	negs	r1, r1
10005528:	f005 fd4e 	bl	1000afc8 <__mutex_enter_timeout_ms_veneer>

  tu_fifo_lock(f);

  uint16_t w = f->wr_idx, r = f->rd_idx;
1000552c:	89e6      	ldrh	r6, [r4, #14]
  uint8_t const* buf8 = (uint8_t const*) data;

  if (!f->overwritable)
1000552e:	7a23      	ldrb	r3, [r4, #8]
  uint16_t w = f->wr_idx, r = f->rd_idx;
10005530:	8a20      	ldrh	r0, [r4, #16]
  return f->depth - _tu_fifo_count(f, wAbs, rAbs);
10005532:	88a1      	ldrh	r1, [r4, #4]
  uint16_t w = f->wr_idx, r = f->rd_idx;
10005534:	b2b6      	uxth	r6, r6
10005536:	b280      	uxth	r0, r0
  if (!f->overwritable)
10005538:	2b00      	cmp	r3, #0
1000553a:	d138      	bne.n	100055ae <tu_fifo_write_n+0xa2>
  uint16_t cnt = wAbs-rAbs;
1000553c:	1a33      	subs	r3, r6, r0
1000553e:	b29b      	uxth	r3, r3
  if (rAbs > wAbs) cnt -= f->non_used_index_space;
10005540:	4286      	cmp	r6, r0
10005542:	d202      	bcs.n	1000554a <tu_fifo_write_n+0x3e>
10005544:	8962      	ldrh	r2, [r4, #10]
10005546:	1a9b      	subs	r3, r3, r2
10005548:	b29b      	uxth	r3, r3
  return f->depth - _tu_fifo_count(f, wAbs, rAbs);
1000554a:	1acb      	subs	r3, r1, r3
static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
1000554c:	1c1a      	adds	r2, r3, #0
1000554e:	b29b      	uxth	r3, r3
10005550:	42ab      	cmp	r3, r5
10005552:	d852      	bhi.n	100055fa <tu_fifo_write_n+0xee>
10005554:	b293      	uxth	r3, r2
10005556:	4698      	mov	r8, r3
  if(wRel + n <= f->depth)  // Linear mode only
10005558:	001d      	movs	r5, r3
    count = tu_min16(count, _tu_fifo_remaining(f, w, r));
  }
  else if (count > f->depth)
  {
    // Only copy last part
    buf8 = buf8 + (count - f->depth) * f->item_size;
1000555a:	88e2      	ldrh	r2, [r4, #6]
  if ((p > p + offset) || (p + offset > f->max_pointer_idx))
1000555c:	89a0      	ldrh	r0, [r4, #12]
  uint16_t w = f->wr_idx, r = f->rd_idx;
1000555e:	0033      	movs	r3, r6
  if ((p > p + offset) || (p + offset > f->max_pointer_idx))
10005560:	4286      	cmp	r6, r0
10005562:	dd05      	ble.n	10005570 <tu_fifo_write_n+0x64>
    p = (p + offset) + f->non_used_index_space;
10005564:	8963      	ldrh	r3, [r4, #10]
10005566:	18f3      	adds	r3, r6, r3
10005568:	b29b      	uxth	r3, r3
  while ( idx >= depth) idx -= depth;
1000556a:	e001      	b.n	10005570 <tu_fifo_write_n+0x64>
1000556c:	1a5b      	subs	r3, r3, r1
1000556e:	b29b      	uxth	r3, r3
10005570:	428b      	cmp	r3, r1
10005572:	d2fb      	bcs.n	1000556c <tu_fifo_write_n+0x60>
  if(wRel + n <= f->depth)  // Linear mode only
10005574:	1958      	adds	r0, r3, r5
10005576:	4288      	cmp	r0, r1
10005578:	dc2a      	bgt.n	100055d0 <tu_fifo_write_n+0xc4>
    memcpy(f->buffer + (wRel * f->item_size), data, n*f->item_size);
1000557a:	4353      	muls	r3, r2
1000557c:	6821      	ldr	r1, [r4, #0]
1000557e:	436a      	muls	r2, r5
10005580:	18c8      	adds	r0, r1, r3
10005582:	0039      	movs	r1, r7
10005584:	f7fb fdd6 	bl	10001134 <__wrap___aeabi_memcpy>
  if ((p > p + offset) || (p + offset > f->max_pointer_idx))
10005588:	89a3      	ldrh	r3, [r4, #12]
1000558a:	1975      	adds	r5, r6, r5
1000558c:	429d      	cmp	r5, r3
1000558e:	dd1c      	ble.n	100055ca <tu_fifo_write_n+0xbe>
    p = (p + offset) + f->non_used_index_space;
10005590:	8963      	ldrh	r3, [r4, #10]
10005592:	18f6      	adds	r6, r6, r3
10005594:	4446      	add	r6, r8
10005596:	b2b6      	uxth	r6, r6
  if (f->mutex)
10005598:	6960      	ldr	r0, [r4, #20]

  // Write data
  _ff_push_n(f, buf8, count, wRel);

  // Advance pointer
  f->wr_idx = advance_pointer(f, w, count);
1000559a:	81e6      	strh	r6, [r4, #14]
  if (f->mutex)
1000559c:	2800      	cmp	r0, #0
1000559e:	d001      	beq.n	100055a4 <tu_fifo_write_n+0x98>
    mutex_exit(mutex_hdl);
100055a0:	f005 fcf2 	bl	1000af88 <__mutex_exit_veneer>

  tu_fifo_unlock(f);

  return count;
}
100055a4:	4640      	mov	r0, r8
100055a6:	bcc0      	pop	{r6, r7}
100055a8:	46b9      	mov	r9, r7
100055aa:	46b0      	mov	r8, r6
100055ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if(wRel + n <= f->depth)  // Linear mode only
100055ae:	46a8      	mov	r8, r5
    buf8 = buf8 + (count - f->depth) * f->item_size;
100055b0:	88e2      	ldrh	r2, [r4, #6]
  else if (count > f->depth)
100055b2:	42a9      	cmp	r1, r5
100055b4:	d2d2      	bcs.n	1000555c <tu_fifo_write_n+0x50>
    buf8 = buf8 + (count - f->depth) * f->item_size;
100055b6:	1a6d      	subs	r5, r5, r1
100055b8:	4355      	muls	r5, r2
    f->wr_idx = r;
100055ba:	4688      	mov	r8, r1
    buf8 = buf8 + (count - f->depth) * f->item_size;
100055bc:	197f      	adds	r7, r7, r5
    f->wr_idx = r;
100055be:	81e0      	strh	r0, [r4, #14]
100055c0:	000d      	movs	r5, r1
100055c2:	e7cb      	b.n	1000555c <tu_fifo_write_n+0x50>
  if ( count == 0 ) return 0;
100055c4:	2300      	movs	r3, #0
100055c6:	4698      	mov	r8, r3
100055c8:	e7ec      	b.n	100055a4 <tu_fifo_write_n+0x98>
    p += offset;
100055ca:	4446      	add	r6, r8
100055cc:	b2b6      	uxth	r6, r6
100055ce:	e7e3      	b.n	10005598 <tu_fifo_write_n+0x8c>
    uint16_t nLin = f->depth - wRel;
100055d0:	1ac9      	subs	r1, r1, r3
    memcpy(f->buffer + (wRel * f->item_size), data, nLin*f->item_size);
100055d2:	b289      	uxth	r1, r1
100055d4:	4689      	mov	r9, r1
100055d6:	4353      	muls	r3, r2
100055d8:	6821      	ldr	r1, [r4, #0]
100055da:	18c8      	adds	r0, r1, r3
100055dc:	464b      	mov	r3, r9
100055de:	0039      	movs	r1, r7
100055e0:	435a      	muls	r2, r3
100055e2:	f7fb fda7 	bl	10001134 <__wrap___aeabi_memcpy>
    memcpy(f->buffer, data + nLin*f->item_size, (n - nLin) * f->item_size);
100055e6:	464b      	mov	r3, r9
100055e8:	88e1      	ldrh	r1, [r4, #6]
100055ea:	1aea      	subs	r2, r5, r3
100055ec:	434a      	muls	r2, r1
100055ee:	4359      	muls	r1, r3
100055f0:	6820      	ldr	r0, [r4, #0]
100055f2:	1879      	adds	r1, r7, r1
100055f4:	f7fb fd9e 	bl	10001134 <__wrap___aeabi_memcpy>
100055f8:	e7c6      	b.n	10005588 <tu_fifo_write_n+0x7c>
100055fa:	1c2a      	adds	r2, r5, #0
100055fc:	b293      	uxth	r3, r2
100055fe:	4698      	mov	r8, r3
  if(wRel + n <= f->depth)  // Linear mode only
10005600:	001d      	movs	r5, r3
    buf8 = buf8 + (count - f->depth) * f->item_size;
10005602:	88e2      	ldrh	r2, [r4, #6]
10005604:	e7aa      	b.n	1000555c <tu_fifo_write_n+0x50>
10005606:	46c0      	nop			; (mov r8, r8)

10005608 <tu_fifo_clear>:
    @param[in]  f
                Pointer to the FIFO buffer to manipulate
 */
/******************************************************************************/
bool tu_fifo_clear(tu_fifo_t *f)
{
10005608:	b510      	push	{r4, lr}
1000560a:	0004      	movs	r4, r0
  if (f->mutex)
1000560c:	6940      	ldr	r0, [r0, #20]
1000560e:	2800      	cmp	r0, #0
10005610:	d00d      	beq.n	1000562e <tu_fifo_clear+0x26>
    return mutex_enter_timeout_ms(mutex_hdl, msec);
10005612:	2101      	movs	r1, #1
10005614:	4249      	negs	r1, r1
10005616:	f005 fcd7 	bl	1000afc8 <__mutex_enter_timeout_ms_veneer>
  tu_fifo_lock(f);
  f->rd_idx = f->wr_idx = 0;
1000561a:	2300      	movs	r3, #0
  if (f->mutex)
1000561c:	6960      	ldr	r0, [r4, #20]
  f->rd_idx = f->wr_idx = 0;
1000561e:	81e3      	strh	r3, [r4, #14]
10005620:	8223      	strh	r3, [r4, #16]
  if (f->mutex)
10005622:	2800      	cmp	r0, #0
10005624:	d001      	beq.n	1000562a <tu_fifo_clear+0x22>
    mutex_exit(mutex_hdl);
10005626:	f005 fcaf 	bl	1000af88 <__mutex_exit_veneer>
  tu_fifo_unlock(f);

  return true;
}
1000562a:	2001      	movs	r0, #1
1000562c:	bd10      	pop	{r4, pc}
  f->rd_idx = f->wr_idx = 0;
1000562e:	81e0      	strh	r0, [r4, #14]
10005630:	8220      	strh	r0, [r4, #16]
  return true;
10005632:	e7fa      	b.n	1000562a <tu_fifo_clear+0x22>

10005634 <tud_mounted>:
  return (tusb_speed_t) _usbd_dev.speed;
}

bool tud_mounted(void)
{
  return _usbd_dev.cfg_num ? 1 : 0;
10005634:	4b02      	ldr	r3, [pc, #8]	; (10005640 <tud_mounted+0xc>)
10005636:	7858      	ldrb	r0, [r3, #1]
10005638:	1e43      	subs	r3, r0, #1
1000563a:	4198      	sbcs	r0, r3
1000563c:	b2c0      	uxtb	r0, r0
}
1000563e:	4770      	bx	lr
10005640:	200169e4 	.word	0x200169e4

10005644 <tud_suspended>:

bool tud_suspended(void)
{
  return _usbd_dev.suspended;
10005644:	4b02      	ldr	r3, [pc, #8]	; (10005650 <tud_suspended+0xc>)
10005646:	7818      	ldrb	r0, [r3, #0]
10005648:	0740      	lsls	r0, r0, #29
1000564a:	0fc0      	lsrs	r0, r0, #31
}
1000564c:	4770      	bx	lr
1000564e:	46c0      	nop			; (mov r8, r8)
10005650:	200169e4 	.word	0x200169e4

10005654 <tud_init>:

//--------------------------------------------------------------------+
// USBD Task
//--------------------------------------------------------------------+
bool tud_init (void)
{
10005654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  TU_LOG2("USBD init\r\n");

  tu_varclr(&_usbd_dev);
10005656:	2237      	movs	r2, #55	; 0x37
10005658:	2100      	movs	r1, #0
1000565a:	4821      	ldr	r0, [pc, #132]	; (100056e0 <tud_init+0x8c>)
1000565c:	f7fb fd64 	bl	10001128 <__wrap_memset>
    mutex_init(mdef);
10005660:	4c20      	ldr	r4, [pc, #128]	; (100056e4 <tud_init+0x90>)
10005662:	0020      	movs	r0, r4
10005664:	f7fc fb52 	bl	10001d0c <mutex_init>

#if CFG_TUSB_OS != OPT_OS_NONE
  // Init device mutex
  _usbd_mutex = osal_mutex_create(&_ubsd_mutexdef);
10005668:	4b1f      	ldr	r3, [pc, #124]	; (100056e8 <tud_init+0x94>)
1000566a:	601c      	str	r4, [r3, #0]
    critical_section_exit(&qhdl->critsec);
}

static inline osal_queue_t osal_queue_create(osal_queue_def_t* qdef)
{
  critical_section_init(&qdef->critsec);
1000566c:	4c1f      	ldr	r4, [pc, #124]	; (100056ec <tud_init+0x98>)
1000566e:	0020      	movs	r0, r4
10005670:	3018      	adds	r0, #24
10005672:	f7fc f82f 	bl	100016d4 <critical_section_init>
  tu_fifo_clear(&qdef->ff);
10005676:	0020      	movs	r0, r4
10005678:	f7ff ffc6 	bl	10005608 <tu_fifo_clear>
  TU_ASSERT(_usbd_mutex);
#endif

  // Init device queue & task
  _usbd_q = osal_queue_create(&_usbd_qdef);
1000567c:	4b1c      	ldr	r3, [pc, #112]	; (100056f0 <tud_init+0x9c>)
  TU_ASSERT(_usbd_q);

  // Get application driver if available
  if ( usbd_app_driver_get_cb )
1000567e:	4e1d      	ldr	r6, [pc, #116]	; (100056f4 <tud_init+0xa0>)
  {
    _app_driver = usbd_app_driver_get_cb(&_app_driver_count);
10005680:	4d1d      	ldr	r5, [pc, #116]	; (100056f8 <tud_init+0xa4>)
  _usbd_q = osal_queue_create(&_usbd_qdef);
10005682:	601c      	str	r4, [r3, #0]
  if ( usbd_app_driver_get_cb )
10005684:	2e00      	cmp	r6, #0
10005686:	d004      	beq.n	10005692 <tud_init+0x3e>
    _app_driver = usbd_app_driver_get_cb(&_app_driver_count);
10005688:	0028      	movs	r0, r5
1000568a:	e000      	b.n	1000568e <tud_init+0x3a>
1000568c:	bf00      	nop
1000568e:	4b1b      	ldr	r3, [pc, #108]	; (100056fc <tud_init+0xa8>)
10005690:	6018      	str	r0, [r3, #0]
  }

  // Init class drivers
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
10005692:	2400      	movs	r4, #0
10005694:	782b      	ldrb	r3, [r5, #0]
10005696:	2e00      	cmp	r6, #0
10005698:	d019      	beq.n	100056ce <tud_init+0x7a>
1000569a:	4e19      	ldr	r6, [pc, #100]	; (10005700 <tud_init+0xac>)
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
1000569c:	4f17      	ldr	r7, [pc, #92]	; (100056fc <tud_init+0xa8>)
1000569e:	429c      	cmp	r4, r3
100056a0:	d30f      	bcc.n	100056c2 <tud_init+0x6e>
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
100056a2:	d119      	bne.n	100056d8 <tud_init+0x84>
100056a4:	0033      	movs	r3, r6
  {
    usbd_class_driver_t const * driver = get_driver(i);
    TU_LOG2("%s init\r\n", driver->name);
    driver->init();
100056a6:	4798      	blx	r3
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
100056a8:	3401      	adds	r4, #1
100056aa:	782b      	ldrb	r3, [r5, #0]
100056ac:	b2e4      	uxtb	r4, r4
100056ae:	42a3      	cmp	r3, r4
100056b0:	d2f5      	bcs.n	1000569e <tud_init+0x4a>
  }

  // Init device controller driver
  dcd_init(TUD_OPT_RHPORT);
100056b2:	2000      	movs	r0, #0
100056b4:	f000 ff72 	bl	1000659c <dcd_init>
  dcd_int_enable(TUD_OPT_RHPORT);
100056b8:	2000      	movs	r0, #0
100056ba:	f000 ff49 	bl	10006550 <dcd_int_enable>

  return true;
}
100056be:	2001      	movs	r0, #1
100056c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    driver->init();
100056c2:	00e3      	lsls	r3, r4, #3
100056c4:	683a      	ldr	r2, [r7, #0]
100056c6:	1b1b      	subs	r3, r3, r4
100056c8:	009b      	lsls	r3, r3, #2
100056ca:	589b      	ldr	r3, [r3, r2]
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
100056cc:	e7eb      	b.n	100056a6 <tud_init+0x52>
    driver->init();
100056ce:	f7ff fbef 	bl	10004eb0 <cdcd_init>
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
100056d2:	782b      	ldrb	r3, [r5, #0]
100056d4:	2b00      	cmp	r3, #0
100056d6:	d0ec      	beq.n	100056b2 <tud_init+0x5e>
    driver->init();
100056d8:	2300      	movs	r3, #0
100056da:	681b      	ldr	r3, [r3, #0]
100056dc:	deff      	udf	#255	; 0xff
100056de:	46c0      	nop			; (mov r8, r8)
100056e0:	200169e4 	.word	0x200169e4
100056e4:	2001699c 	.word	0x2001699c
100056e8:	20016a1c 	.word	0x20016a1c
100056ec:	20002730 	.word	0x20002730
100056f0:	20016a20 	.word	0x20016a20
100056f4:	00000000 	.word	0x00000000
100056f8:	2001732f 	.word	0x2001732f
100056fc:	200166b4 	.word	0x200166b4
10005700:	10004eb1 	.word	0x10004eb1

10005704 <tud_task>:
      }
    }
    @endcode
 */
void tud_task (void)
{
10005704:	b5f0      	push	{r4, r5, r6, r7, lr}
10005706:	46de      	mov	lr, fp
10005708:	4657      	mov	r7, sl
1000570a:	464e      	mov	r6, r9
1000570c:	4645      	mov	r5, r8
1000570e:	b5e0      	push	{r5, r6, r7, lr}
10005710:	b08b      	sub	sp, #44	; 0x2c
  // Skip if stack is not initialized
  if ( !tusb_inited() ) return;
10005712:	f001 fa05 	bl	10006b20 <tusb_inited>
10005716:	2800      	cmp	r0, #0
10005718:	d100      	bne.n	1000571c <tud_task+0x18>
1000571a:	e123      	b.n	10005964 <tud_task+0x260>
1000571c:	4bb3      	ldr	r3, [pc, #716]	; (100059ec <tud_task+0x2e8>)
1000571e:	af07      	add	r7, sp, #28
10005720:	469a      	mov	sl, r3
#if CFG_TUSB_DEBUG >= 2
    if (event.event_id == DCD_EVENT_SETUP_RECEIVED) TU_LOG2("\r\n"); // extra line for setup
    TU_LOG2("USBD %s ", event.event_id < DCD_EVENT_COUNT ? _usbd_event_str[event.event_id] : "CORRUPTED");
#endif

    switch ( event.event_id )
10005722:	4bb3      	ldr	r3, [pc, #716]	; (100059f0 <tud_task+0x2ec>)
10005724:	469b      	mov	fp, r3
    if ( !osal_queue_receive(_usbd_q, &event) ) return;
10005726:	4653      	mov	r3, sl
10005728:	681d      	ldr	r5, [r3, #0]
 * method will block until it is released.
 *
 * \param critsec Pointer to critical_section structure
 */
static inline void critical_section_enter_blocking(critical_section_t *critsec) {
    critsec->save = spin_lock_blocking(critsec->core.spin_lock);
1000572a:	69aa      	ldr	r2, [r5, #24]
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
1000572c:	f3ef 8110 	mrs	r1, PRIMASK
    __asm volatile ("cpsid i");
10005730:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
10005732:	6813      	ldr	r3, [r2, #0]
10005734:	2b00      	cmp	r3, #0
10005736:	d0fc      	beq.n	10005732 <tud_task+0x2e>
    __asm volatile ("dmb");
10005738:	f3bf 8f5f 	dmb	sy
1000573c:	61e9      	str	r1, [r5, #28]
  //  however osal_queue_recieve may be. therefore my assumption is that
  //  the fifo mutex is not populated for queues used from an IRQ context
  assert(!qhdl->ff.mutex);

  _osal_q_lock(qhdl);
  bool success = tu_fifo_read(&qhdl->ff, data);
1000573e:	0028      	movs	r0, r5
10005740:	0039      	movs	r1, r7
10005742:	f7ff fdcf 	bl	100052e4 <tu_fifo_read>
 *  \ingroup critical_section
 *
 * \param critsec Pointer to critical_section structure
 */
static inline void critical_section_exit(critical_section_t *critsec) {
    spin_unlock(critsec->core.spin_lock, critsec->save);
10005746:	69aa      	ldr	r2, [r5, #24]
10005748:	0004      	movs	r4, r0
1000574a:	69eb      	ldr	r3, [r5, #28]
1000574c:	f3bf 8f5f 	dmb	sy
    *lock = 0;
10005750:	2100      	movs	r1, #0
10005752:	6011      	str	r1, [r2, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10005754:	f383 8810 	msr	PRIMASK, r3
10005758:	2800      	cmp	r0, #0
1000575a:	d100      	bne.n	1000575e <tud_task+0x5a>
1000575c:	e102      	b.n	10005964 <tud_task+0x260>
    switch ( event.event_id )
1000575e:	787b      	ldrb	r3, [r7, #1]
10005760:	2b08      	cmp	r3, #8
10005762:	d8e0      	bhi.n	10005726 <tud_task+0x22>
10005764:	465a      	mov	r2, fp
10005766:	009b      	lsls	r3, r3, #2
10005768:	58d3      	ldr	r3, [r2, r3]
1000576a:	469f      	mov	pc, r3
        }
      break;

      case USBD_EVENT_FUNC_CALL:
        TU_LOG2("\r\n");
        if ( event.func_call.func ) event.func_call.func(event.func_call.param);
1000576c:	687b      	ldr	r3, [r7, #4]
1000576e:	2b00      	cmp	r3, #0
10005770:	d0d9      	beq.n	10005726 <tud_task+0x22>
10005772:	68b8      	ldr	r0, [r7, #8]
10005774:	4798      	blx	r3
  {
10005776:	e7d6      	b.n	10005726 <tud_task+0x22>
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
10005778:	227f      	movs	r2, #127	; 0x7f
        uint8_t const ep_addr = event.xfer_complete.ep_addr;
1000577a:	7939      	ldrb	r1, [r7, #4]
        _usbd_dev.ep_status[epnum][ep_dir].busy = false;
1000577c:	4b9d      	ldr	r3, [pc, #628]	; (100059f4 <tud_task+0x2f0>)
1000577e:	400a      	ands	r2, r1
10005780:	0054      	lsls	r4, r2, #1
10005782:	09c8      	lsrs	r0, r1, #7
10005784:	191b      	adds	r3, r3, r4
10005786:	181b      	adds	r3, r3, r0
10005788:	0018      	movs	r0, r3
1000578a:	2501      	movs	r5, #1
1000578c:	3020      	adds	r0, #32
1000578e:	7944      	ldrb	r4, [r0, #5]
10005790:	43ac      	bics	r4, r5
10005792:	7144      	strb	r4, [r0, #5]
        _usbd_dev.ep_status[epnum][ep_dir].claimed = 0;
10005794:	7944      	ldrb	r4, [r0, #5]
10005796:	3503      	adds	r5, #3
10005798:	43ac      	bics	r4, r5
1000579a:	7144      	strb	r4, [r0, #5]
        if ( 0 == epnum )
1000579c:	2a00      	cmp	r2, #0
1000579e:	d100      	bne.n	100057a2 <tud_task+0x9e>
100057a0:	e0e7      	b.n	10005972 <tud_task+0x26e>
  if ( usbd_app_driver_get_cb )
100057a2:	4a95      	ldr	r2, [pc, #596]	; (100059f8 <tud_task+0x2f4>)
          usbd_class_driver_t const * driver = get_driver( _usbd_dev.ep2drv[epnum][ep_dir] );
100057a4:	7cdb      	ldrb	r3, [r3, #19]
  if ( usbd_app_driver_get_cb )
100057a6:	2a00      	cmp	r2, #0
100057a8:	d006      	beq.n	100057b8 <tud_task+0xb4>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
100057aa:	4a94      	ldr	r2, [pc, #592]	; (100059fc <tud_task+0x2f8>)
100057ac:	7812      	ldrb	r2, [r2, #0]
100057ae:	4293      	cmp	r3, r2
100057b0:	d200      	bcs.n	100057b4 <tud_task+0xb0>
100057b2:	e16f      	b.n	10005a94 <tud_task+0x390>
    drvid -= _app_driver_count;
100057b4:	1a9b      	subs	r3, r3, r2
100057b6:	b2db      	uxtb	r3, r3
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
100057b8:	2b00      	cmp	r3, #0
100057ba:	d000      	beq.n	100057be <tud_task+0xba>
100057bc:	e0d2      	b.n	10005964 <tud_task+0x260>
100057be:	4c90      	ldr	r4, [pc, #576]	; (10005a00 <tud_task+0x2fc>)
          driver->xfer_cb(event.rhport, ep_addr, event.xfer_complete.result, event.xfer_complete.len);
100057c0:	797a      	ldrb	r2, [r7, #5]
100057c2:	7838      	ldrb	r0, [r7, #0]
100057c4:	68bb      	ldr	r3, [r7, #8]
100057c6:	47a0      	blx	r4
100057c8:	e7ad      	b.n	10005726 <tud_task+0x22>
        _usbd_dev.connected = 1;
100057ca:	4b8a      	ldr	r3, [pc, #552]	; (100059f4 <tud_task+0x2f0>)
100057cc:	2601      	movs	r6, #1
100057ce:	4698      	mov	r8, r3
100057d0:	4642      	mov	r2, r8
100057d2:	781b      	ldrb	r3, [r3, #0]

// This handles the actual request and its response.
// return false will cause its caller to stall control endpoint
static bool process_control_request(uint8_t rhport, tusb_control_request_t const * p_request)
{
  usbd_control_set_complete_callback(NULL);
100057d4:	2000      	movs	r0, #0
        _usbd_dev.connected = 1;
100057d6:	4333      	orrs	r3, r6
100057d8:	7013      	strb	r3, [r2, #0]
        if ( !process_control_request(event.rhport, &event.setup_received) )
100057da:	783b      	ldrb	r3, [r7, #0]
100057dc:	4699      	mov	r9, r3
  usbd_control_set_complete_callback(NULL);
100057de:	f000 fd93 	bl	10006308 <usbd_control_set_complete_callback>

  TU_ASSERT(p_request->bmRequestType_bit.type < TUSB_REQ_TYPE_INVALID);
100057e2:	2360      	movs	r3, #96	; 0x60
100057e4:	793d      	ldrb	r5, [r7, #4]
100057e6:	402b      	ands	r3, r5
100057e8:	2b60      	cmp	r3, #96	; 0x60
100057ea:	d00d      	beq.n	10005808 <tud_task+0x104>

  // Vendor request
  if ( p_request->bmRequestType_bit.type == TUSB_REQ_TYPE_VENDOR )
100057ec:	2b40      	cmp	r3, #64	; 0x40
100057ee:	d100      	bne.n	100057f2 <tud_task+0xee>
100057f0:	e0db      	b.n	100059aa <tud_task+0x2a6>
    TU_LOG2("  %s", _tusb_std_request_str[p_request->bRequest]);
    if (TUSB_REQ_GET_DESCRIPTOR != p_request->bRequest) TU_LOG2("\r\n");
  }
#endif

  switch ( p_request->bmRequestType_bit.recipient )
100057f2:	06ed      	lsls	r5, r5, #27
100057f4:	0eed      	lsrs	r5, r5, #27
100057f6:	2d01      	cmp	r5, #1
100057f8:	d100      	bne.n	100057fc <tud_task+0xf8>
100057fa:	e156      	b.n	10005aaa <tud_task+0x3a6>
100057fc:	2d02      	cmp	r5, #2
100057fe:	d100      	bne.n	10005802 <tud_task+0xfe>
10005800:	e112      	b.n	10005a28 <tud_task+0x324>
10005802:	2d00      	cmp	r5, #0
10005804:	d100      	bne.n	10005808 <tud_task+0x104>
10005806:	e0e2      	b.n	100059ce <tud_task+0x2ca>
          dcd_edpt_stall(event.rhport, 0);
10005808:	7838      	ldrb	r0, [r7, #0]
1000580a:	2100      	movs	r1, #0
1000580c:	f000 fff0 	bl	100067f0 <dcd_edpt_stall>
          dcd_edpt_stall(event.rhport, 0 | TUSB_DIR_IN_MASK);
10005810:	2180      	movs	r1, #128	; 0x80
10005812:	7838      	ldrb	r0, [r7, #0]
10005814:	f000 ffec 	bl	100067f0 <dcd_edpt_stall>
10005818:	e785      	b.n	10005726 <tud_task+0x22>
        if (tud_resume_cb) tud_resume_cb();
1000581a:	4b7a      	ldr	r3, [pc, #488]	; (10005a04 <tud_task+0x300>)
1000581c:	2b00      	cmp	r3, #0
1000581e:	d082      	beq.n	10005726 <tud_task+0x22>
10005820:	e000      	b.n	10005824 <tud_task+0x120>
10005822:	bf00      	nop
10005824:	e77f      	b.n	10005726 <tud_task+0x22>
        if (tud_suspend_cb) tud_suspend_cb(_usbd_dev.remote_wakeup_en);
10005826:	4b78      	ldr	r3, [pc, #480]	; (10005a08 <tud_task+0x304>)
10005828:	2b00      	cmp	r3, #0
1000582a:	d100      	bne.n	1000582e <tud_task+0x12a>
1000582c:	e77b      	b.n	10005726 <tud_task+0x22>
1000582e:	4b71      	ldr	r3, [pc, #452]	; (100059f4 <tud_task+0x2f0>)
10005830:	7818      	ldrb	r0, [r3, #0]
10005832:	0700      	lsls	r0, r0, #28
10005834:	0fc0      	lsrs	r0, r0, #31
10005836:	e000      	b.n	1000583a <tud_task+0x136>
10005838:	bf00      	nop
1000583a:	e774      	b.n	10005726 <tud_task+0x22>
        for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
1000583c:	4d6f      	ldr	r5, [pc, #444]	; (100059fc <tud_task+0x2f8>)
1000583e:	4a6e      	ldr	r2, [pc, #440]	; (100059f8 <tud_task+0x2f4>)
10005840:	2400      	movs	r4, #0
10005842:	782b      	ldrb	r3, [r5, #0]
10005844:	2a00      	cmp	r2, #0
10005846:	d100      	bne.n	1000584a <tud_task+0x146>
10005848:	e099      	b.n	1000597e <tud_task+0x27a>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
1000584a:	4e70      	ldr	r6, [pc, #448]	; (10005a0c <tud_task+0x308>)
1000584c:	42a3      	cmp	r3, r4
1000584e:	d809      	bhi.n	10005864 <tud_task+0x160>
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
10005850:	42a3      	cmp	r3, r4
10005852:	d000      	beq.n	10005856 <tud_task+0x152>
10005854:	e096      	b.n	10005984 <tud_task+0x280>
        for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
10005856:	3401      	adds	r4, #1
10005858:	b2e4      	uxtb	r4, r4
1000585a:	429c      	cmp	r4, r3
1000585c:	d900      	bls.n	10005860 <tud_task+0x15c>
1000585e:	e762      	b.n	10005726 <tud_task+0x22>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
10005860:	42a3      	cmp	r3, r4
10005862:	d9f5      	bls.n	10005850 <tud_task+0x14c>
          if ( driver->sof ) driver->sof(event.rhport);
10005864:	6831      	ldr	r1, [r6, #0]
10005866:	00e2      	lsls	r2, r4, #3
10005868:	468c      	mov	ip, r1
1000586a:	1b12      	subs	r2, r2, r4
1000586c:	0092      	lsls	r2, r2, #2
1000586e:	4462      	add	r2, ip
10005870:	6992      	ldr	r2, [r2, #24]
10005872:	2a00      	cmp	r2, #0
10005874:	d0ef      	beq.n	10005856 <tud_task+0x152>
10005876:	7838      	ldrb	r0, [r7, #0]
10005878:	4790      	blx	r2
        for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
1000587a:	3401      	adds	r4, #1
1000587c:	782b      	ldrb	r3, [r5, #0]
1000587e:	b2e4      	uxtb	r4, r4
10005880:	429c      	cmp	r4, r3
10005882:	d9e3      	bls.n	1000584c <tud_task+0x148>
10005884:	e74f      	b.n	10005726 <tud_task+0x22>
  tu_varclr(&_usbd_dev);
10005886:	2237      	movs	r2, #55	; 0x37
10005888:	2100      	movs	r1, #0
1000588a:	485a      	ldr	r0, [pc, #360]	; (100059f4 <tud_task+0x2f0>)
        usbd_reset(event.rhport);
1000588c:	783e      	ldrb	r6, [r7, #0]
  tu_varclr(&_usbd_dev);
1000588e:	f7fb fc4b 	bl	10001128 <__wrap_memset>
  memset(_usbd_dev.itf2drv, DRVID_INVALID, sizeof(_usbd_dev.itf2drv)); // invalid mapping
10005892:	2210      	movs	r2, #16
10005894:	21ff      	movs	r1, #255	; 0xff
10005896:	485e      	ldr	r0, [pc, #376]	; (10005a10 <tud_task+0x30c>)
10005898:	f7fb fc46 	bl	10001128 <__wrap_memset>
  memset(_usbd_dev.ep2drv , DRVID_INVALID, sizeof(_usbd_dev.ep2drv )); // invalid mapping
1000589c:	4855      	ldr	r0, [pc, #340]	; (100059f4 <tud_task+0x2f0>)
1000589e:	2212      	movs	r2, #18
100058a0:	21ff      	movs	r1, #255	; 0xff
100058a2:	3013      	adds	r0, #19
100058a4:	f7fb fc40 	bl	10001128 <__wrap_memset>
  usbd_control_reset();
100058a8:	f000 fd24 	bl	100062f4 <usbd_control_reset>
  for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
100058ac:	4d53      	ldr	r5, [pc, #332]	; (100059fc <tud_task+0x2f8>)
100058ae:	4a52      	ldr	r2, [pc, #328]	; (100059f8 <tud_task+0x2f4>)
100058b0:	2400      	movs	r4, #0
100058b2:	782b      	ldrb	r3, [r5, #0]
100058b4:	2a00      	cmp	r2, #0
100058b6:	d100      	bne.n	100058ba <tud_task+0x1b6>
100058b8:	e070      	b.n	1000599c <tud_task+0x298>
100058ba:	4a56      	ldr	r2, [pc, #344]	; (10005a14 <tud_task+0x310>)
100058bc:	4690      	mov	r8, r2
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
100058be:	4a53      	ldr	r2, [pc, #332]	; (10005a0c <tud_task+0x308>)
100058c0:	4691      	mov	r9, r2
100058c2:	42a3      	cmp	r3, r4
100058c4:	d845      	bhi.n	10005952 <tud_task+0x24e>
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
100058c6:	d166      	bne.n	10005996 <tud_task+0x292>
100058c8:	4643      	mov	r3, r8
    get_driver(i)->reset(rhport);
100058ca:	0030      	movs	r0, r6
100058cc:	4798      	blx	r3
  for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
100058ce:	3401      	adds	r4, #1
100058d0:	782b      	ldrb	r3, [r5, #0]
100058d2:	b2e4      	uxtb	r4, r4
100058d4:	42a3      	cmp	r3, r4
100058d6:	d2f4      	bcs.n	100058c2 <tud_task+0x1be>
        if (tud_umount_cb) tud_umount_cb();
100058d8:	4b4f      	ldr	r3, [pc, #316]	; (10005a18 <tud_task+0x314>)
100058da:	2b00      	cmp	r3, #0
100058dc:	d100      	bne.n	100058e0 <tud_task+0x1dc>
100058de:	e722      	b.n	10005726 <tud_task+0x22>
100058e0:	e000      	b.n	100058e4 <tud_task+0x1e0>
100058e2:	bf00      	nop
100058e4:	e71f      	b.n	10005726 <tud_task+0x22>
  tu_varclr(&_usbd_dev);
100058e6:	4b43      	ldr	r3, [pc, #268]	; (100059f4 <tud_task+0x2f0>)
100058e8:	2237      	movs	r2, #55	; 0x37
100058ea:	4698      	mov	r8, r3
100058ec:	2100      	movs	r1, #0
100058ee:	0018      	movs	r0, r3
        usbd_reset(event.rhport);
100058f0:	783e      	ldrb	r6, [r7, #0]
  tu_varclr(&_usbd_dev);
100058f2:	f7fb fc19 	bl	10001128 <__wrap_memset>
  memset(_usbd_dev.itf2drv, DRVID_INVALID, sizeof(_usbd_dev.itf2drv)); // invalid mapping
100058f6:	4643      	mov	r3, r8
100058f8:	2210      	movs	r2, #16
100058fa:	1cd8      	adds	r0, r3, #3
100058fc:	21ff      	movs	r1, #255	; 0xff
100058fe:	f7fb fc13 	bl	10001128 <__wrap_memset>
  memset(_usbd_dev.ep2drv , DRVID_INVALID, sizeof(_usbd_dev.ep2drv )); // invalid mapping
10005902:	4640      	mov	r0, r8
10005904:	2212      	movs	r2, #18
10005906:	21ff      	movs	r1, #255	; 0xff
10005908:	3013      	adds	r0, #19
1000590a:	f7fb fc0d 	bl	10001128 <__wrap_memset>
  usbd_control_reset();
1000590e:	f000 fcf1 	bl	100062f4 <usbd_control_reset>
  for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
10005912:	4d3a      	ldr	r5, [pc, #232]	; (100059fc <tud_task+0x2f8>)
10005914:	4a38      	ldr	r2, [pc, #224]	; (100059f8 <tud_task+0x2f4>)
10005916:	2400      	movs	r4, #0
10005918:	782b      	ldrb	r3, [r5, #0]
1000591a:	2a00      	cmp	r2, #0
1000591c:	d035      	beq.n	1000598a <tud_task+0x286>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
1000591e:	4a3b      	ldr	r2, [pc, #236]	; (10005a0c <tud_task+0x308>)
10005920:	4691      	mov	r9, r2
10005922:	429c      	cmp	r4, r3
10005924:	d30c      	bcc.n	10005940 <tud_task+0x23c>
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
10005926:	d136      	bne.n	10005996 <tud_task+0x292>
10005928:	4b3a      	ldr	r3, [pc, #232]	; (10005a14 <tud_task+0x310>)
    get_driver(i)->reset(rhport);
1000592a:	0030      	movs	r0, r6
1000592c:	4798      	blx	r3
  for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
1000592e:	3401      	adds	r4, #1
10005930:	782b      	ldrb	r3, [r5, #0]
10005932:	b2e4      	uxtb	r4, r4
10005934:	42a3      	cmp	r3, r4
10005936:	d2f4      	bcs.n	10005922 <tud_task+0x21e>
        _usbd_dev.speed = event.bus_reset.speed;
10005938:	4642      	mov	r2, r8
1000593a:	793b      	ldrb	r3, [r7, #4]
1000593c:	7093      	strb	r3, [r2, #2]
      break;
1000593e:	e6f2      	b.n	10005726 <tud_task+0x22>
    get_driver(i)->reset(rhport);
10005940:	464a      	mov	r2, r9
10005942:	6812      	ldr	r2, [r2, #0]
10005944:	00e3      	lsls	r3, r4, #3
10005946:	4694      	mov	ip, r2
10005948:	1b1b      	subs	r3, r3, r4
1000594a:	009b      	lsls	r3, r3, #2
1000594c:	4463      	add	r3, ip
1000594e:	685b      	ldr	r3, [r3, #4]
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
10005950:	e7eb      	b.n	1000592a <tud_task+0x226>
    get_driver(i)->reset(rhport);
10005952:	464a      	mov	r2, r9
10005954:	6812      	ldr	r2, [r2, #0]
10005956:	00e3      	lsls	r3, r4, #3
10005958:	4694      	mov	ip, r2
1000595a:	1b1b      	subs	r3, r3, r4
1000595c:	009b      	lsls	r3, r3, #2
1000595e:	4463      	add	r3, ip
10005960:	685b      	ldr	r3, [r3, #4]
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
10005962:	e7b2      	b.n	100058ca <tud_task+0x1c6>
}
10005964:	b00b      	add	sp, #44	; 0x2c
10005966:	bcf0      	pop	{r4, r5, r6, r7}
10005968:	46bb      	mov	fp, r7
1000596a:	46b2      	mov	sl, r6
1000596c:	46a9      	mov	r9, r5
1000596e:	46a0      	mov	r8, r4
10005970:	bdf0      	pop	{r4, r5, r6, r7, pc}
          usbd_control_xfer_cb(event.rhport, ep_addr, (xfer_result_t)event.xfer_complete.result, event.xfer_complete.len);
10005972:	797a      	ldrb	r2, [r7, #5]
10005974:	7838      	ldrb	r0, [r7, #0]
10005976:	68bb      	ldr	r3, [r7, #8]
10005978:	f000 fcda 	bl	10006330 <usbd_control_xfer_cb>
1000597c:	e6d3      	b.n	10005726 <tud_task+0x22>
        for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
1000597e:	2b00      	cmp	r3, #0
10005980:	d100      	bne.n	10005984 <tud_task+0x280>
10005982:	e6d0      	b.n	10005726 <tud_task+0x22>
          if ( driver->sof ) driver->sof(event.rhport);
10005984:	2300      	movs	r3, #0
10005986:	699b      	ldr	r3, [r3, #24]
10005988:	deff      	udf	#255	; 0xff
    get_driver(i)->reset(rhport);
1000598a:	0030      	movs	r0, r6
1000598c:	f7ff facc 	bl	10004f28 <cdcd_reset>
  for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
10005990:	782b      	ldrb	r3, [r5, #0]
10005992:	2b00      	cmp	r3, #0
10005994:	d0d0      	beq.n	10005938 <tud_task+0x234>
    get_driver(i)->reset(rhport);
10005996:	2300      	movs	r3, #0
10005998:	685b      	ldr	r3, [r3, #4]
1000599a:	deff      	udf	#255	; 0xff
1000599c:	0030      	movs	r0, r6
1000599e:	f7ff fac3 	bl	10004f28 <cdcd_reset>
  for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
100059a2:	782b      	ldrb	r3, [r5, #0]
100059a4:	2b00      	cmp	r3, #0
100059a6:	d097      	beq.n	100058d8 <tud_task+0x1d4>
100059a8:	e7f5      	b.n	10005996 <tud_task+0x292>
    TU_VERIFY(tud_vendor_control_request_cb);
100059aa:	4b1c      	ldr	r3, [pc, #112]	; (10005a1c <tud_task+0x318>)
100059ac:	2b00      	cmp	r3, #0
100059ae:	d100      	bne.n	100059b2 <tud_task+0x2ae>
100059b0:	e72a      	b.n	10005808 <tud_task+0x104>
    if (tud_vendor_control_complete_cb) usbd_control_set_complete_callback(tud_vendor_control_complete_cb);
100059b2:	481b      	ldr	r0, [pc, #108]	; (10005a20 <tud_task+0x31c>)
100059b4:	2800      	cmp	r0, #0
100059b6:	d001      	beq.n	100059bc <tud_task+0x2b8>
100059b8:	f000 fca6 	bl	10006308 <usbd_control_set_complete_callback>
    return tud_vendor_control_request_cb(rhport, p_request);
100059bc:	4648      	mov	r0, r9
100059be:	a908      	add	r1, sp, #32
100059c0:	e000      	b.n	100059c4 <tud_task+0x2c0>
100059c2:	bf00      	nop
100059c4:	0004      	movs	r4, r0
        if ( !process_control_request(event.rhport, &event.setup_received) )
100059c6:	2c00      	cmp	r4, #0
100059c8:	d000      	beq.n	100059cc <tud_task+0x2c8>
100059ca:	e6ac      	b.n	10005726 <tud_task+0x22>
100059cc:	e71c      	b.n	10005808 <tud_task+0x104>
  {
    //------------- Device Requests e.g in enumeration -------------//
    case TUSB_REQ_RCPT_DEVICE:
      if ( TUSB_REQ_TYPE_CLASS == p_request->bmRequestType_bit.type )
100059ce:	2b20      	cmp	r3, #32
100059d0:	d100      	bne.n	100059d4 <tud_task+0x2d0>
100059d2:	e09b      	b.n	10005b0c <tud_task+0x408>
        TU_VERIFY(driver);

        // forward to class driver: "non-STD request to Interface"
        return invoke_class_control(rhport, driver, p_request);
      }
      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type )
100059d4:	2b00      	cmp	r3, #0
100059d6:	d000      	beq.n	100059da <tud_task+0x2d6>
100059d8:	e716      	b.n	10005808 <tud_task+0x104>
        // Non standard request is not supported
        TU_BREAKPOINT();
        return false;
      }

      switch ( p_request->bRequest )
100059da:	797b      	ldrb	r3, [r7, #5]
100059dc:	2b09      	cmp	r3, #9
100059de:	d900      	bls.n	100059e2 <tud_task+0x2de>
100059e0:	e712      	b.n	10005808 <tud_task+0x104>
100059e2:	4a10      	ldr	r2, [pc, #64]	; (10005a24 <tud_task+0x320>)
100059e4:	009b      	lsls	r3, r3, #2
100059e6:	58d3      	ldr	r3, [r2, r3]
100059e8:	469f      	mov	pc, r3
100059ea:	46c0      	nop			; (mov r8, r8)
100059ec:	20016a20 	.word	0x20016a20
100059f0:	1000b3f8 	.word	0x1000b3f8
100059f4:	200169e4 	.word	0x200169e4
100059f8:	00000000 	.word	0x00000000
100059fc:	2001732f 	.word	0x2001732f
10005a00:	100050e5 	.word	0x100050e5
	...
10005a0c:	200166b4 	.word	0x200166b4
10005a10:	200169e7 	.word	0x200169e7
10005a14:	10004f29 	.word	0x10004f29
	...
10005a24:	1000b41c 	.word	0x1000b41c
10005a28:	227f      	movs	r2, #127	; 0x7f
static inline uint8_t tu_u16_low (uint16_t u16) { return (uint8_t) (u16 & 0x00ff); }
10005a2a:	7a39      	ldrb	r1, [r7, #8]
10005a2c:	400a      	ands	r2, r1
10005a2e:	9202      	str	r2, [sp, #8]
    {
      uint8_t const ep_addr = tu_u16_low(p_request->wIndex);
      uint8_t const ep_num  = tu_edpt_number(ep_addr);
      uint8_t const ep_dir  = tu_edpt_dir(ep_addr);

      TU_ASSERT(ep_num < TU_ARRAY_SIZE(_usbd_dev.ep2drv) );
10005a30:	2a08      	cmp	r2, #8
10005a32:	d900      	bls.n	10005a36 <tud_task+0x332>
10005a34:	e6e8      	b.n	10005808 <tud_task+0x104>
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
10005a36:	09c8      	lsrs	r0, r1, #7
10005a38:	9001      	str	r0, [sp, #4]

      bool ret = false;

      // Handle STD request to endpoint
      if ( TUSB_REQ_TYPE_STANDARD == p_request->bmRequestType_bit.type )
10005a3a:	2b00      	cmp	r3, #0
10005a3c:	d100      	bne.n	10005a40 <tud_task+0x33c>
10005a3e:	e082      	b.n	10005b46 <tud_task+0x442>
      bool ret = false;
10005a40:	2400      	movs	r4, #0
10005a42:	0053      	lsls	r3, r2, #1
10005a44:	9302      	str	r3, [sp, #8]
          // Unknown/Unsupported request
          default: TU_BREAKPOINT(); return false;
        }
      }

      usbd_class_driver_t const * driver = get_driver(_usbd_dev.ep2drv[ep_num][ep_dir]);
10005a46:	9a01      	ldr	r2, [sp, #4]
10005a48:	9b02      	ldr	r3, [sp, #8]
10005a4a:	4694      	mov	ip, r2
10005a4c:	4443      	add	r3, r8
  if ( usbd_app_driver_get_cb )
10005a4e:	4ac9      	ldr	r2, [pc, #804]	; (10005d74 <tud_task+0x670>)
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.ep2drv[ep_num][ep_dir]);
10005a50:	4463      	add	r3, ip
10005a52:	7cdb      	ldrb	r3, [r3, #19]
  if ( usbd_app_driver_get_cb )
10005a54:	2a00      	cmp	r2, #0
10005a56:	d006      	beq.n	10005a66 <tud_task+0x362>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
10005a58:	4ac7      	ldr	r2, [pc, #796]	; (10005d78 <tud_task+0x674>)
10005a5a:	7812      	ldrb	r2, [r2, #0]
10005a5c:	4293      	cmp	r3, r2
10005a5e:	d200      	bcs.n	10005a62 <tud_task+0x35e>
10005a60:	e100      	b.n	10005c64 <tud_task+0x560>
    drvid -= _app_driver_count;
10005a62:	1a9b      	subs	r3, r3, r2
10005a64:	b2db      	uxtb	r3, r3
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
10005a66:	2b00      	cmp	r3, #0
10005a68:	d000      	beq.n	10005a6c <tud_task+0x368>
10005a6a:	e0f2      	b.n	10005c52 <tud_task+0x54e>
10005a6c:	48c3      	ldr	r0, [pc, #780]	; (10005d7c <tud_task+0x678>)
10005a6e:	4dc4      	ldr	r5, [pc, #784]	; (10005d80 <tud_task+0x67c>)
  usbd_control_set_complete_callback(driver->control_complete);
10005a70:	f000 fc4a 	bl	10006308 <usbd_control_set_complete_callback>
  return driver->control_request(rhport, request);
10005a74:	4648      	mov	r0, r9
10005a76:	68eb      	ldr	r3, [r5, #12]
10005a78:	a908      	add	r1, sp, #32
10005a7a:	4798      	blx	r3
        // We will forward all request targeted endpoint to class drivers after
        // - For class-type requests: driver is fully responsible to reply to host
        // - For std-type requests  : driver init/re-init internal variable/buffer only, and
        //                            must not call tud_control_status(), driver's return value will have no effect.
        //                            EP state has already affected (stalled/cleared)
        if ( invoke_class_control(rhport, driver, p_request) ) ret = true;
10005a7c:	2800      	cmp	r0, #0
10005a7e:	d100      	bne.n	10005a82 <tud_task+0x37e>
10005a80:	e0e7      	b.n	10005c52 <tud_task+0x54e>
      }

      if ( TUSB_REQ_TYPE_STANDARD == p_request->bmRequestType_bit.type )
10005a82:	2260      	movs	r2, #96	; 0x60
10005a84:	793b      	ldrb	r3, [r7, #4]
10005a86:	421a      	tst	r2, r3
10005a88:	d000      	beq.n	10005a8c <tud_task+0x388>
10005a8a:	e64c      	b.n	10005726 <tud_task+0x22>
      {
        // Set complete callback = NULL since it can also stall the request.
        usbd_control_set_complete_callback(NULL);
10005a8c:	2000      	movs	r0, #0
10005a8e:	f000 fc3b 	bl	10006308 <usbd_control_set_complete_callback>
10005a92:	e648      	b.n	10005726 <tud_task+0x22>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
10005a94:	00da      	lsls	r2, r3, #3
10005a96:	1ad3      	subs	r3, r2, r3
10005a98:	4aba      	ldr	r2, [pc, #744]	; (10005d84 <tud_task+0x680>)
10005a9a:	009b      	lsls	r3, r3, #2
10005a9c:	6812      	ldr	r2, [r2, #0]
10005a9e:	18d3      	adds	r3, r2, r3
          TU_ASSERT(driver, );
10005aa0:	2b00      	cmp	r3, #0
10005aa2:	d100      	bne.n	10005aa6 <tud_task+0x3a2>
10005aa4:	e75e      	b.n	10005964 <tud_task+0x260>
          driver->xfer_cb(event.rhport, ep_addr, event.xfer_complete.result, event.xfer_complete.len);
10005aa6:	695c      	ldr	r4, [r3, #20]
10005aa8:	e68a      	b.n	100057c0 <tud_task+0xbc>
10005aaa:	7a3b      	ldrb	r3, [r7, #8]
      TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
10005aac:	2b0f      	cmp	r3, #15
10005aae:	d900      	bls.n	10005ab2 <tud_task+0x3ae>
10005ab0:	e6aa      	b.n	10005808 <tud_task+0x104>
  if ( usbd_app_driver_get_cb )
10005ab2:	4ab0      	ldr	r2, [pc, #704]	; (10005d74 <tud_task+0x670>)
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
10005ab4:	4443      	add	r3, r8
10005ab6:	78db      	ldrb	r3, [r3, #3]
  if ( usbd_app_driver_get_cb )
10005ab8:	2a00      	cmp	r2, #0
10005aba:	d005      	beq.n	10005ac8 <tud_task+0x3c4>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
10005abc:	4aae      	ldr	r2, [pc, #696]	; (10005d78 <tud_task+0x674>)
10005abe:	7812      	ldrb	r2, [r2, #0]
10005ac0:	4293      	cmp	r3, r2
10005ac2:	d35e      	bcc.n	10005b82 <tud_task+0x47e>
    drvid -= _app_driver_count;
10005ac4:	1a9b      	subs	r3, r3, r2
10005ac6:	b2db      	uxtb	r3, r3
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
10005ac8:	2b00      	cmp	r3, #0
10005aca:	d000      	beq.n	10005ace <tud_task+0x3ca>
10005acc:	e69c      	b.n	10005808 <tud_task+0x104>
10005ace:	48ab      	ldr	r0, [pc, #684]	; (10005d7c <tud_task+0x678>)
10005ad0:	4cab      	ldr	r4, [pc, #684]	; (10005d80 <tud_task+0x67c>)
  usbd_control_set_complete_callback(driver->control_complete);
10005ad2:	f000 fc19 	bl	10006308 <usbd_control_set_complete_callback>
  return driver->control_request(rhport, request);
10005ad6:	4648      	mov	r0, r9
10005ad8:	68e3      	ldr	r3, [r4, #12]
10005ada:	a908      	add	r1, sp, #32
10005adc:	4798      	blx	r3
      if ( !invoke_class_control(rhport, driver, p_request) )
10005ade:	2800      	cmp	r0, #0
10005ae0:	d000      	beq.n	10005ae4 <tud_task+0x3e0>
10005ae2:	e620      	b.n	10005726 <tud_task+0x22>
        TU_VERIFY( TUSB_REQ_TYPE_STANDARD == p_request->bmRequestType_bit.type &&
10005ae4:	2260      	movs	r2, #96	; 0x60
10005ae6:	0011      	movs	r1, r2
10005ae8:	793b      	ldrb	r3, [r7, #4]
10005aea:	4019      	ands	r1, r3
10005aec:	421a      	tst	r2, r3
10005aee:	d000      	beq.n	10005af2 <tud_task+0x3ee>
10005af0:	e68a      	b.n	10005808 <tud_task+0x104>
10005af2:	797b      	ldrb	r3, [r7, #5]
10005af4:	2b0a      	cmp	r3, #10
10005af6:	d000      	beq.n	10005afa <tud_task+0x3f6>
10005af8:	e686      	b.n	10005808 <tud_task+0x104>
        uint8_t alternate = 0;
10005afa:	ab06      	add	r3, sp, #24
10005afc:	1c9a      	adds	r2, r3, #2
10005afe:	7011      	strb	r1, [r2, #0]
        tud_control_xfer(rhport, p_request, &alternate, 1);
10005b00:	2301      	movs	r3, #1
10005b02:	4648      	mov	r0, r9
10005b04:	a908      	add	r1, sp, #32
10005b06:	f000 fb97 	bl	10006238 <tud_control_xfer>
10005b0a:	e60c      	b.n	10005726 <tud_task+0x22>
10005b0c:	7a3b      	ldrb	r3, [r7, #8]
        TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
10005b0e:	2b0f      	cmp	r3, #15
10005b10:	d900      	bls.n	10005b14 <tud_task+0x410>
10005b12:	e679      	b.n	10005808 <tud_task+0x104>
  if ( usbd_app_driver_get_cb )
10005b14:	4a97      	ldr	r2, [pc, #604]	; (10005d74 <tud_task+0x670>)
        usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
10005b16:	4443      	add	r3, r8
10005b18:	78db      	ldrb	r3, [r3, #3]
  if ( usbd_app_driver_get_cb )
10005b1a:	2a00      	cmp	r2, #0
10005b1c:	d006      	beq.n	10005b2c <tud_task+0x428>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
10005b1e:	4a96      	ldr	r2, [pc, #600]	; (10005d78 <tud_task+0x674>)
10005b20:	7812      	ldrb	r2, [r2, #0]
10005b22:	4293      	cmp	r3, r2
10005b24:	d200      	bcs.n	10005b28 <tud_task+0x424>
10005b26:	e0c7      	b.n	10005cb8 <tud_task+0x5b4>
    drvid -= _app_driver_count;
10005b28:	1a9b      	subs	r3, r3, r2
10005b2a:	b2db      	uxtb	r3, r3
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
10005b2c:	2b00      	cmp	r3, #0
10005b2e:	d000      	beq.n	10005b32 <tud_task+0x42e>
10005b30:	e66a      	b.n	10005808 <tud_task+0x104>
10005b32:	4892      	ldr	r0, [pc, #584]	; (10005d7c <tud_task+0x678>)
10005b34:	4c92      	ldr	r4, [pc, #584]	; (10005d80 <tud_task+0x67c>)
  usbd_control_set_complete_callback(driver->control_complete);
10005b36:	f000 fbe7 	bl	10006308 <usbd_control_set_complete_callback>
  return driver->control_request(rhport, request);
10005b3a:	68e3      	ldr	r3, [r4, #12]
10005b3c:	4648      	mov	r0, r9
10005b3e:	a908      	add	r1, sp, #32
10005b40:	4798      	blx	r3
10005b42:	0004      	movs	r4, r0
        return invoke_class_control(rhport, driver, p_request);
10005b44:	e73f      	b.n	100059c6 <tud_task+0x2c2>
        switch ( p_request->bRequest )
10005b46:	797b      	ldrb	r3, [r7, #5]
10005b48:	9303      	str	r3, [sp, #12]
10005b4a:	2b01      	cmp	r3, #1
10005b4c:	d100      	bne.n	10005b50 <tud_task+0x44c>
10005b4e:	e09d      	b.n	10005c8c <tud_task+0x588>
10005b50:	2b03      	cmp	r3, #3
10005b52:	d100      	bne.n	10005b56 <tud_task+0x452>
10005b54:	e090      	b.n	10005c78 <tud_task+0x574>
10005b56:	2b00      	cmp	r3, #0
10005b58:	d000      	beq.n	10005b5c <tud_task+0x458>
10005b5a:	e655      	b.n	10005808 <tud_task+0x104>
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
  uint8_t const dir   = tu_edpt_dir(ep_addr);

  return _usbd_dev.ep_status[epnum][dir].stalled;
10005b5c:	0053      	lsls	r3, r2, #1
10005b5e:	9a01      	ldr	r2, [sp, #4]
10005b60:	9302      	str	r3, [sp, #8]
10005b62:	4694      	mov	ip, r2
10005b64:	4443      	add	r3, r8
10005b66:	4463      	add	r3, ip
10005b68:	3320      	adds	r3, #32
10005b6a:	795b      	ldrb	r3, [r3, #5]
            uint16_t status = usbd_edpt_stalled(rhport, ep_addr) ? 0x0001 : 0x0000;
10005b6c:	aa06      	add	r2, sp, #24
  return _usbd_dev.ep_status[epnum][dir].stalled;
10005b6e:	079b      	lsls	r3, r3, #30
10005b70:	0fdb      	lsrs	r3, r3, #31
            uint16_t status = usbd_edpt_stalled(rhport, ep_addr) ? 0x0001 : 0x0000;
10005b72:	3202      	adds	r2, #2
10005b74:	8013      	strh	r3, [r2, #0]
            tud_control_xfer(rhport, p_request, &status, 2);
10005b76:	4648      	mov	r0, r9
10005b78:	2302      	movs	r3, #2
10005b7a:	a908      	add	r1, sp, #32
10005b7c:	f000 fb5c 	bl	10006238 <tud_control_xfer>
          break;
10005b80:	e761      	b.n	10005a46 <tud_task+0x342>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
10005b82:	4a80      	ldr	r2, [pc, #512]	; (10005d84 <tud_task+0x680>)
10005b84:	00dc      	lsls	r4, r3, #3
10005b86:	1ae3      	subs	r3, r4, r3
10005b88:	6814      	ldr	r4, [r2, #0]
10005b8a:	009b      	lsls	r3, r3, #2
10005b8c:	18e4      	adds	r4, r4, r3
      TU_VERIFY(driver);
10005b8e:	2c00      	cmp	r4, #0
10005b90:	d100      	bne.n	10005b94 <tud_task+0x490>
10005b92:	e639      	b.n	10005808 <tud_task+0x104>
  usbd_control_set_complete_callback(driver->control_complete);
10005b94:	6920      	ldr	r0, [r4, #16]
10005b96:	e79c      	b.n	10005ad2 <tud_task+0x3ce>
          TU_VERIFY(TUSB_REQ_FEATURE_REMOTE_WAKEUP == p_request->wValue);
10005b98:	88fb      	ldrh	r3, [r7, #6]
10005b9a:	2b01      	cmp	r3, #1
10005b9c:	d000      	beq.n	10005ba0 <tud_task+0x49c>
10005b9e:	e633      	b.n	10005808 <tud_task+0x104>
          _usbd_dev.remote_wakeup_en = false;
10005ba0:	4643      	mov	r3, r8
10005ba2:	2208      	movs	r2, #8
10005ba4:	781b      	ldrb	r3, [r3, #0]
10005ba6:	4393      	bics	r3, r2
10005ba8:	4642      	mov	r2, r8
          tud_control_status(rhport, p_request);
10005baa:	4648      	mov	r0, r9
10005bac:	a908      	add	r1, sp, #32
          _usbd_dev.remote_wakeup_en = false;
10005bae:	7013      	strb	r3, [r2, #0]
          tud_control_status(rhport, p_request);
10005bb0:	f000 fb2a 	bl	10006208 <tud_control_status>
        break;
10005bb4:	e5b7      	b.n	10005726 <tud_task+0x22>
          uint16_t status = (_usbd_dev.self_powered ? 1 : 0) | (_usbd_dev.remote_wakeup_en ? 2 : 0);
10005bb6:	4643      	mov	r3, r8
10005bb8:	2002      	movs	r0, #2
10005bba:	7819      	ldrb	r1, [r3, #0]
10005bbc:	ab06      	add	r3, sp, #24
10005bbe:	1c9a      	adds	r2, r3, #2
10005bc0:	068b      	lsls	r3, r1, #26
10005bc2:	0889      	lsrs	r1, r1, #2
10005bc4:	4001      	ands	r1, r0
10005bc6:	0fdb      	lsrs	r3, r3, #31
10005bc8:	430b      	orrs	r3, r1
10005bca:	8013      	strh	r3, [r2, #0]
          tud_control_xfer(rhport, p_request, &status, 2);
10005bcc:	4648      	mov	r0, r9
10005bce:	2302      	movs	r3, #2
10005bd0:	a908      	add	r1, sp, #32
10005bd2:	f000 fb31 	bl	10006238 <tud_control_xfer>
        break;
10005bd6:	e5a6      	b.n	10005726 <tud_task+0x22>
          if ( !_usbd_dev.cfg_num && cfg_num ) TU_ASSERT( process_set_config(rhport, cfg_num) );
10005bd8:	4643      	mov	r3, r8
          uint8_t const cfg_num = (uint8_t) p_request->wValue;
10005bda:	79ba      	ldrb	r2, [r7, #6]
10005bdc:	9203      	str	r2, [sp, #12]
          if ( !_usbd_dev.cfg_num && cfg_num ) TU_ASSERT( process_set_config(rhport, cfg_num) );
10005bde:	785b      	ldrb	r3, [r3, #1]
10005be0:	2b00      	cmp	r3, #0
10005be2:	d102      	bne.n	10005bea <tud_task+0x4e6>
10005be4:	2a00      	cmp	r2, #0
10005be6:	d000      	beq.n	10005bea <tud_task+0x4e6>
10005be8:	e084      	b.n	10005cf4 <tud_task+0x5f0>
          _usbd_dev.cfg_num = cfg_num;
10005bea:	4643      	mov	r3, r8
10005bec:	9a03      	ldr	r2, [sp, #12]
          tud_control_status(rhport, p_request);
10005bee:	4648      	mov	r0, r9
10005bf0:	a908      	add	r1, sp, #32
          _usbd_dev.cfg_num = cfg_num;
10005bf2:	705a      	strb	r2, [r3, #1]
          tud_control_status(rhport, p_request);
10005bf4:	f000 fb08 	bl	10006208 <tud_control_status>
        break;
10005bf8:	e595      	b.n	10005726 <tud_task+0x22>
          uint8_t cfg_num = _usbd_dev.cfg_num;
10005bfa:	4643      	mov	r3, r8
10005bfc:	aa06      	add	r2, sp, #24
10005bfe:	785b      	ldrb	r3, [r3, #1]
10005c00:	3202      	adds	r2, #2
10005c02:	7013      	strb	r3, [r2, #0]
          tud_control_xfer(rhport, p_request, &cfg_num, 1);
10005c04:	4648      	mov	r0, r9
10005c06:	2301      	movs	r3, #1
10005c08:	a908      	add	r1, sp, #32
10005c0a:	f000 fb15 	bl	10006238 <tud_control_xfer>
        break;
10005c0e:	e58a      	b.n	10005726 <tud_task+0x22>
  tusb_desc_type_t const desc_type = (tusb_desc_type_t) tu_u16_high(p_request->wValue);
10005c10:	88fb      	ldrh	r3, [r7, #6]
10005c12:	79b8      	ldrb	r0, [r7, #6]
  switch(desc_type)
10005c14:	0a1b      	lsrs	r3, r3, #8
10005c16:	2b0f      	cmp	r3, #15
10005c18:	d900      	bls.n	10005c1c <tud_task+0x518>
10005c1a:	e5f5      	b.n	10005808 <tud_task+0x104>
10005c1c:	4a5a      	ldr	r2, [pc, #360]	; (10005d88 <tud_task+0x684>)
10005c1e:	009b      	lsls	r3, r3, #2
10005c20:	58d3      	ldr	r3, [r2, r3]
10005c22:	469f      	mov	pc, r3
          usbd_control_set_request(p_request); // set request since DCD has no access to tud_control_status() API
10005c24:	a808      	add	r0, sp, #32
10005c26:	f000 fb75 	bl	10006314 <usbd_control_set_request>
          dcd_set_address(rhport, (uint8_t) p_request->wValue);
10005c2a:	4648      	mov	r0, r9
10005c2c:	79b9      	ldrb	r1, [r7, #6]
10005c2e:	f000 fc95 	bl	1000655c <dcd_set_address>
          _usbd_dev.addressed = 1;
10005c32:	4643      	mov	r3, r8
10005c34:	2202      	movs	r2, #2
10005c36:	781b      	ldrb	r3, [r3, #0]
10005c38:	4313      	orrs	r3, r2
10005c3a:	4642      	mov	r2, r8
10005c3c:	7013      	strb	r3, [r2, #0]
        break;
10005c3e:	e572      	b.n	10005726 <tud_task+0x22>
          TU_VERIFY(TUSB_REQ_FEATURE_REMOTE_WAKEUP == p_request->wValue);
10005c40:	88fb      	ldrh	r3, [r7, #6]
10005c42:	2b01      	cmp	r3, #1
10005c44:	d000      	beq.n	10005c48 <tud_task+0x544>
10005c46:	e5df      	b.n	10005808 <tud_task+0x104>
          _usbd_dev.remote_wakeup_en = true;
10005c48:	4643      	mov	r3, r8
10005c4a:	2208      	movs	r2, #8
10005c4c:	781b      	ldrb	r3, [r3, #0]
10005c4e:	4313      	orrs	r3, r2
10005c50:	e7aa      	b.n	10005ba8 <tud_task+0x4a4>
      if ( TUSB_REQ_TYPE_STANDARD == p_request->bmRequestType_bit.type )
10005c52:	2260      	movs	r2, #96	; 0x60
10005c54:	793b      	ldrb	r3, [r7, #4]
10005c56:	421a      	tst	r2, r3
10005c58:	d000      	beq.n	10005c5c <tud_task+0x558>
10005c5a:	e6b4      	b.n	100059c6 <tud_task+0x2c2>
        usbd_control_set_complete_callback(NULL);
10005c5c:	2000      	movs	r0, #0
10005c5e:	f000 fb53 	bl	10006308 <usbd_control_set_complete_callback>
10005c62:	e6b0      	b.n	100059c6 <tud_task+0x2c2>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
10005c64:	4a47      	ldr	r2, [pc, #284]	; (10005d84 <tud_task+0x680>)
10005c66:	00dd      	lsls	r5, r3, #3
10005c68:	1aeb      	subs	r3, r5, r3
10005c6a:	6815      	ldr	r5, [r2, #0]
10005c6c:	009b      	lsls	r3, r3, #2
10005c6e:	18ed      	adds	r5, r5, r3
      if (driver)
10005c70:	2d00      	cmp	r5, #0
10005c72:	d0ee      	beq.n	10005c52 <tud_task+0x54e>
  usbd_control_set_complete_callback(driver->control_complete);
10005c74:	6928      	ldr	r0, [r5, #16]
10005c76:	e6fb      	b.n	10005a70 <tud_task+0x36c>
            if ( TUSB_REQ_FEATURE_EDPT_HALT == p_request->wValue ) usbd_edpt_stall(rhport, ep_addr);
10005c78:	88fb      	ldrh	r3, [r7, #6]
10005c7a:	2b00      	cmp	r3, #0
10005c7c:	d027      	beq.n	10005cce <tud_task+0x5ca>
10005c7e:	0053      	lsls	r3, r2, #1
10005c80:	9302      	str	r3, [sp, #8]
            tud_control_status(rhport, p_request);
10005c82:	4648      	mov	r0, r9
10005c84:	a908      	add	r1, sp, #32
10005c86:	f000 fabf 	bl	10006208 <tud_control_status>
          break;
10005c8a:	e6dc      	b.n	10005a46 <tud_task+0x342>
            if ( TUSB_REQ_FEATURE_EDPT_HALT == p_request->wValue ) usbd_edpt_clear_stall(rhport, ep_addr);
10005c8c:	88fb      	ldrh	r3, [r7, #6]
10005c8e:	2b00      	cmp	r3, #0
10005c90:	d1f5      	bne.n	10005c7e <tud_task+0x57a>
  dcd_edpt_clear_stall(rhport, ep_addr);
10005c92:	4648      	mov	r0, r9
10005c94:	f000 fdd4 	bl	10006840 <dcd_edpt_clear_stall>
  _usbd_dev.ep_status[epnum][dir].stalled = false;
10005c98:	9a01      	ldr	r2, [sp, #4]
10005c9a:	9b02      	ldr	r3, [sp, #8]
10005c9c:	4694      	mov	ip, r2
10005c9e:	005b      	lsls	r3, r3, #1
10005ca0:	9302      	str	r3, [sp, #8]
10005ca2:	4443      	add	r3, r8
10005ca4:	4463      	add	r3, ip
10005ca6:	3320      	adds	r3, #32
10005ca8:	795a      	ldrb	r2, [r3, #5]
  _usbd_dev.ep_status[epnum][dir].busy = false;
10005caa:	9903      	ldr	r1, [sp, #12]
  _usbd_dev.ep_status[epnum][dir].stalled = false;
10005cac:	43aa      	bics	r2, r5
10005cae:	715a      	strb	r2, [r3, #5]
  _usbd_dev.ep_status[epnum][dir].busy = false;
10005cb0:	795a      	ldrb	r2, [r3, #5]
10005cb2:	438a      	bics	r2, r1
10005cb4:	715a      	strb	r2, [r3, #5]
}
10005cb6:	e7e4      	b.n	10005c82 <tud_task+0x57e>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
10005cb8:	4a32      	ldr	r2, [pc, #200]	; (10005d84 <tud_task+0x680>)
10005cba:	00dc      	lsls	r4, r3, #3
10005cbc:	1ae3      	subs	r3, r4, r3
10005cbe:	6814      	ldr	r4, [r2, #0]
10005cc0:	009b      	lsls	r3, r3, #2
10005cc2:	18e4      	adds	r4, r4, r3
        TU_VERIFY(driver);
10005cc4:	2c00      	cmp	r4, #0
10005cc6:	d100      	bne.n	10005cca <tud_task+0x5c6>
10005cc8:	e59e      	b.n	10005808 <tud_task+0x104>
  usbd_control_set_complete_callback(driver->control_complete);
10005cca:	6920      	ldr	r0, [r4, #16]
10005ccc:	e733      	b.n	10005b36 <tud_task+0x432>
  dcd_edpt_stall(rhport, ep_addr);
10005cce:	4648      	mov	r0, r9
10005cd0:	f000 fd8e 	bl	100067f0 <dcd_edpt_stall>
  _usbd_dev.ep_status[epnum][dir].stalled = true;
10005cd4:	9a01      	ldr	r2, [sp, #4]
10005cd6:	2102      	movs	r1, #2
10005cd8:	4694      	mov	ip, r2
10005cda:	9b02      	ldr	r3, [sp, #8]
10005cdc:	005b      	lsls	r3, r3, #1
10005cde:	9302      	str	r3, [sp, #8]
10005ce0:	4443      	add	r3, r8
10005ce2:	4463      	add	r3, ip
10005ce4:	3320      	adds	r3, #32
10005ce6:	795a      	ldrb	r2, [r3, #5]
10005ce8:	430a      	orrs	r2, r1
10005cea:	715a      	strb	r2, [r3, #5]
  _usbd_dev.ep_status[epnum][dir].busy = true;
10005cec:	795a      	ldrb	r2, [r3, #5]
10005cee:	4316      	orrs	r6, r2
10005cf0:	715e      	strb	r6, [r3, #5]
}
10005cf2:	e7c6      	b.n	10005c82 <tud_task+0x57e>
  tusb_desc_configuration_t const * desc_cfg = (tusb_desc_configuration_t const *) tud_descriptor_configuration_cb(cfg_num-1); // index is cfg_num-1
10005cf4:	1e50      	subs	r0, r2, #1
10005cf6:	b2c0      	uxtb	r0, r0
10005cf8:	f7fe fa06 	bl	10004108 <tud_descriptor_configuration_cb>
  TU_ASSERT(desc_cfg != NULL && desc_cfg->bDescriptorType == TUSB_DESC_CONFIGURATION);
10005cfc:	2800      	cmp	r0, #0
10005cfe:	d100      	bne.n	10005d02 <tud_task+0x5fe>
10005d00:	e582      	b.n	10005808 <tud_task+0x104>
10005d02:	7843      	ldrb	r3, [r0, #1]
10005d04:	2b02      	cmp	r3, #2
10005d06:	d000      	beq.n	10005d0a <tud_task+0x606>
10005d08:	e57e      	b.n	10005808 <tud_task+0x104>
  _usbd_dev.remote_wakeup_support = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_REMOTE_WAKEUP) ? 1 : 0;
10005d0a:	2101      	movs	r1, #1
10005d0c:	79c2      	ldrb	r2, [r0, #7]
  uint8_t const * p_desc   = ((uint8_t const*) desc_cfg) + sizeof(tusb_desc_configuration_t);
10005d0e:	0005      	movs	r5, r0
  _usbd_dev.self_powered = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_SELF_POWERED) ? 1 : 0;
10005d10:	1193      	asrs	r3, r2, #6
  _usbd_dev.remote_wakeup_support = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_REMOTE_WAKEUP) ? 1 : 0;
10005d12:	1152      	asrs	r2, r2, #5
10005d14:	400b      	ands	r3, r1
10005d16:	400a      	ands	r2, r1
10005d18:	0112      	lsls	r2, r2, #4
10005d1a:	015b      	lsls	r3, r3, #5
10005d1c:	4313      	orrs	r3, r2
10005d1e:	4642      	mov	r2, r8
10005d20:	7812      	ldrb	r2, [r2, #0]
10005d22:	312f      	adds	r1, #47	; 0x2f
10005d24:	438a      	bics	r2, r1
10005d26:	4313      	orrs	r3, r2
10005d28:	4642      	mov	r2, r8
10005d2a:	7013      	strb	r3, [r2, #0]
  uint8_t const * desc_end = ((uint8_t const*) desc_cfg) + desc_cfg->wTotalLength;
10005d2c:	78c3      	ldrb	r3, [r0, #3]
10005d2e:	7882      	ldrb	r2, [r0, #2]
10005d30:	021b      	lsls	r3, r3, #8
10005d32:	4313      	orrs	r3, r2
10005d34:	18c3      	adds	r3, r0, r3
  uint8_t const * p_desc   = ((uint8_t const*) desc_cfg) + sizeof(tusb_desc_configuration_t);
10005d36:	3509      	adds	r5, #9
  uint8_t const * desc_end = ((uint8_t const*) desc_cfg) + desc_cfg->wTotalLength;
10005d38:	9304      	str	r3, [sp, #16]
  while( p_desc < desc_end )
10005d3a:	9b04      	ldr	r3, [sp, #16]
10005d3c:	42ab      	cmp	r3, r5
10005d3e:	d800      	bhi.n	10005d42 <tud_task+0x63e>
10005d40:	e0cf      	b.n	10005ee2 <tud_task+0x7de>
    tusb_desc_interface_assoc_t const * desc_itf_assoc = NULL;
10005d42:	2300      	movs	r3, #0
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
10005d44:	786a      	ldrb	r2, [r5, #1]
10005d46:	9302      	str	r3, [sp, #8]
    if ( TUSB_DESC_INTERFACE_ASSOCIATION == tu_desc_type(p_desc) )
10005d48:	2a0b      	cmp	r2, #11
10005d4a:	d104      	bne.n	10005d56 <tud_task+0x652>
  return desc8 + desc8[DESC_OFFSET_LEN];
10005d4c:	782b      	ldrb	r3, [r5, #0]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
10005d4e:	9502      	str	r5, [sp, #8]
  return desc8 + desc8[DESC_OFFSET_LEN];
10005d50:	18eb      	adds	r3, r5, r3
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
10005d52:	001d      	movs	r5, r3
10005d54:	785a      	ldrb	r2, [r3, #1]
    TU_ASSERT( TUSB_DESC_INTERFACE == tu_desc_type(p_desc) );
10005d56:	2a04      	cmp	r2, #4
10005d58:	d000      	beq.n	10005d5c <tud_task+0x658>
10005d5a:	e555      	b.n	10005808 <tud_task+0x104>
    uint16_t const remaining_len = desc_end-p_desc;
10005d5c:	9b04      	ldr	r3, [sp, #16]
10005d5e:	4a05      	ldr	r2, [pc, #20]	; (10005d74 <tud_task+0x670>)
10005d60:	1b5b      	subs	r3, r3, r5
10005d62:	b29b      	uxth	r3, r3
10005d64:	9301      	str	r3, [sp, #4]
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
10005d66:	4b04      	ldr	r3, [pc, #16]	; (10005d78 <tud_task+0x674>)
10005d68:	2400      	movs	r4, #0
10005d6a:	781b      	ldrb	r3, [r3, #0]
10005d6c:	2a00      	cmp	r2, #0
10005d6e:	d11d      	bne.n	10005dac <tud_task+0x6a8>
10005d70:	e029      	b.n	10005dc6 <tud_task+0x6c2>
10005d72:	46c0      	nop			; (mov r8, r8)
10005d74:	00000000 	.word	0x00000000
10005d78:	2001732f 	.word	0x2001732f
10005d7c:	10005039 	.word	0x10005039
10005d80:	1000b484 	.word	0x1000b484
10005d84:	200166b4 	.word	0x200166b4
10005d88:	1000b444 	.word	0x1000b444
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
10005d8c:	429c      	cmp	r4, r3
10005d8e:	d126      	bne.n	10005dde <tud_task+0x6da>
10005d90:	4b57      	ldr	r3, [pc, #348]	; (10005ef0 <tud_task+0x7ec>)
      uint16_t const drv_len = driver->open(rhport, desc_itf, remaining_len);
10005d92:	0029      	movs	r1, r5
10005d94:	4648      	mov	r0, r9
10005d96:	9a01      	ldr	r2, [sp, #4]
10005d98:	4798      	blx	r3
      if ( drv_len > 0 )
10005d9a:	2800      	cmp	r0, #0
10005d9c:	d122      	bne.n	10005de4 <tud_task+0x6e0>
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
10005d9e:	4b55      	ldr	r3, [pc, #340]	; (10005ef4 <tud_task+0x7f0>)
10005da0:	3401      	adds	r4, #1
10005da2:	781b      	ldrb	r3, [r3, #0]
10005da4:	b2e4      	uxtb	r4, r4
10005da6:	42a3      	cmp	r3, r4
10005da8:	d200      	bcs.n	10005dac <tud_task+0x6a8>
10005daa:	e52d      	b.n	10005808 <tud_task+0x104>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
10005dac:	429c      	cmp	r4, r3
10005dae:	d2ed      	bcs.n	10005d8c <tud_task+0x688>
      uint16_t const drv_len = driver->open(rhport, desc_itf, remaining_len);
10005db0:	4b51      	ldr	r3, [pc, #324]	; (10005ef8 <tud_task+0x7f4>)
10005db2:	681b      	ldr	r3, [r3, #0]
10005db4:	9305      	str	r3, [sp, #20]
10005db6:	9a05      	ldr	r2, [sp, #20]
10005db8:	00e3      	lsls	r3, r4, #3
10005dba:	4694      	mov	ip, r2
10005dbc:	1b1b      	subs	r3, r3, r4
10005dbe:	009b      	lsls	r3, r3, #2
10005dc0:	4463      	add	r3, ip
10005dc2:	689b      	ldr	r3, [r3, #8]
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
10005dc4:	e7e5      	b.n	10005d92 <tud_task+0x68e>
      uint16_t const drv_len = driver->open(rhport, desc_itf, remaining_len);
10005dc6:	0029      	movs	r1, r5
10005dc8:	4648      	mov	r0, r9
10005dca:	9a01      	ldr	r2, [sp, #4]
10005dcc:	f7ff f8be 	bl	10004f4c <cdcd_open>
10005dd0:	1e06      	subs	r6, r0, #0
      if ( drv_len > 0 )
10005dd2:	d108      	bne.n	10005de6 <tud_task+0x6e2>
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
10005dd4:	4b47      	ldr	r3, [pc, #284]	; (10005ef4 <tud_task+0x7f0>)
10005dd6:	781b      	ldrb	r3, [r3, #0]
10005dd8:	2b00      	cmp	r3, #0
10005dda:	d100      	bne.n	10005dde <tud_task+0x6da>
10005ddc:	e514      	b.n	10005808 <tud_task+0x104>
      uint16_t const drv_len = driver->open(rhport, desc_itf, remaining_len);
10005dde:	2300      	movs	r3, #0
10005de0:	689b      	ldr	r3, [r3, #8]
10005de2:	deff      	udf	#255	; 0xff
10005de4:	0006      	movs	r6, r0
        TU_ASSERT( sizeof(tusb_desc_interface_t) <= drv_len && drv_len <= remaining_len);
10005de6:	2e08      	cmp	r6, #8
10005de8:	d800      	bhi.n	10005dec <tud_task+0x6e8>
10005dea:	e50d      	b.n	10005808 <tud_task+0x104>
10005dec:	9b01      	ldr	r3, [sp, #4]
10005dee:	42b3      	cmp	r3, r6
10005df0:	d200      	bcs.n	10005df4 <tud_task+0x6f0>
10005df2:	e509      	b.n	10005808 <tud_task+0x104>
        TU_ASSERT(DRVID_INVALID == _usbd_dev.itf2drv[desc_itf->bInterfaceNumber]);
10005df4:	4643      	mov	r3, r8
10005df6:	78aa      	ldrb	r2, [r5, #2]
10005df8:	189b      	adds	r3, r3, r2
10005dfa:	78d9      	ldrb	r1, [r3, #3]
10005dfc:	29ff      	cmp	r1, #255	; 0xff
10005dfe:	d000      	beq.n	10005e02 <tud_task+0x6fe>
10005e00:	e502      	b.n	10005808 <tud_task+0x104>
        _usbd_dev.itf2drv[desc_itf->bInterfaceNumber] = drv_id;
10005e02:	70dc      	strb	r4, [r3, #3]
        if (desc_itf_assoc)
10005e04:	9b02      	ldr	r3, [sp, #8]
10005e06:	2b00      	cmp	r3, #0
10005e08:	d014      	beq.n	10005e34 <tud_task+0x730>
10005e0a:	0018      	movs	r0, r3
          TU_ASSERT(desc_itf_assoc->bFirstInterface == desc_itf->bInterfaceNumber &&
10005e0c:	789b      	ldrb	r3, [r3, #2]
10005e0e:	4293      	cmp	r3, r2
10005e10:	d000      	beq.n	10005e14 <tud_task+0x710>
10005e12:	e4f9      	b.n	10005808 <tud_task+0x104>
10005e14:	7901      	ldrb	r1, [r0, #4]
10005e16:	796a      	ldrb	r2, [r5, #5]
10005e18:	4291      	cmp	r1, r2
10005e1a:	d000      	beq.n	10005e1e <tud_task+0x71a>
10005e1c:	e4f4      	b.n	10005808 <tud_task+0x104>
          for(uint8_t i=1; i<desc_itf_assoc->bInterfaceCount; i++)
10005e1e:	78c2      	ldrb	r2, [r0, #3]
10005e20:	2a01      	cmp	r2, #1
10005e22:	d907      	bls.n	10005e34 <tud_task+0x730>
            _usbd_dev.itf2drv[desc_itf->bInterfaceNumber+i] = drv_id;
10005e24:	3304      	adds	r3, #4
10005e26:	3a01      	subs	r2, #1
10005e28:	4443      	add	r3, r8
10005e2a:	0018      	movs	r0, r3
10005e2c:	0021      	movs	r1, r4
10005e2e:	b2d2      	uxtb	r2, r2
10005e30:	f7fb f97a 	bl	10001128 <__wrap_memset>
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
10005e34:	217f      	movs	r1, #127	; 0x7f
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
10005e36:	002a      	movs	r2, r5
10005e38:	2300      	movs	r3, #0
10005e3a:	468c      	mov	ip, r1
    if ( TUSB_DESC_ENDPOINT == tu_desc_type(p_desc) )
10005e3c:	7851      	ldrb	r1, [r2, #1]
10005e3e:	2905      	cmp	r1, #5
10005e40:	d107      	bne.n	10005e52 <tud_task+0x74e>
      ep2drv[tu_edpt_number(ep_addr)][tu_edpt_dir(ep_addr)] = driver_id;
10005e42:	4661      	mov	r1, ip
      uint8_t const ep_addr = ((tusb_desc_endpoint_t const*) p_desc)->bEndpointAddress;
10005e44:	7890      	ldrb	r0, [r2, #2]
      ep2drv[tu_edpt_number(ep_addr)][tu_edpt_dir(ep_addr)] = driver_id;
10005e46:	4001      	ands	r1, r0
10005e48:	0049      	lsls	r1, r1, #1
10005e4a:	4441      	add	r1, r8
10005e4c:	3113      	adds	r1, #19
10005e4e:	09c0      	lsrs	r0, r0, #7
10005e50:	540c      	strb	r4, [r1, r0]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
10005e52:	7811      	ldrb	r1, [r2, #0]
    len   = (uint16_t)(len + tu_desc_len(p_desc));
10005e54:	185b      	adds	r3, r3, r1
10005e56:	b29b      	uxth	r3, r3
  return desc8 + desc8[DESC_OFFSET_LEN];
10005e58:	1852      	adds	r2, r2, r1
  while( len < desc_len )
10005e5a:	42b3      	cmp	r3, r6
10005e5c:	d3ee      	bcc.n	10005e3c <tud_task+0x738>
    TU_ASSERT(drv_id < TOTAL_DRIVER_COUNT);
10005e5e:	4b25      	ldr	r3, [pc, #148]	; (10005ef4 <tud_task+0x7f0>)
        p_desc += drv_len; // next interface
10005e60:	19ad      	adds	r5, r5, r6
    TU_ASSERT(drv_id < TOTAL_DRIVER_COUNT);
10005e62:	781b      	ldrb	r3, [r3, #0]
10005e64:	42a3      	cmp	r3, r4
10005e66:	d300      	bcc.n	10005e6a <tud_task+0x766>
10005e68:	e767      	b.n	10005d3a <tud_task+0x636>
10005e6a:	e4cd      	b.n	10005808 <tud_task+0x104>
      if (!tud_descriptor_bos_cb) return false;
10005e6c:	4b23      	ldr	r3, [pc, #140]	; (10005efc <tud_task+0x7f8>)
10005e6e:	2b00      	cmp	r3, #0
10005e70:	d100      	bne.n	10005e74 <tud_task+0x770>
10005e72:	e4c9      	b.n	10005808 <tud_task+0x104>
      tusb_desc_bos_t const* desc_bos = (tusb_desc_bos_t const*) tud_descriptor_bos_cb();
10005e74:	e000      	b.n	10005e78 <tud_task+0x774>
10005e76:	bf00      	nop
10005e78:	0004      	movs	r4, r0
      memcpy(&total_len, (uint8_t*) desc_config + offsetof(tusb_desc_configuration_t, wTotalLength), 2);
10005e7a:	ab06      	add	r3, sp, #24
10005e7c:	1c9d      	adds	r5, r3, #2
10005e7e:	2202      	movs	r2, #2
10005e80:	1ca1      	adds	r1, r4, #2
10005e82:	0028      	movs	r0, r5
10005e84:	f7fb f956 	bl	10001134 <__wrap___aeabi_memcpy>
      return tud_control_xfer(rhport, p_request, (void*) desc_config, total_len);
10005e88:	0022      	movs	r2, r4
10005e8a:	4648      	mov	r0, r9
10005e8c:	882b      	ldrh	r3, [r5, #0]
10005e8e:	a908      	add	r1, sp, #32
10005e90:	f000 f9d2 	bl	10006238 <tud_control_xfer>
          TU_VERIFY( process_get_descriptor(rhport, p_request) );
10005e94:	2800      	cmp	r0, #0
10005e96:	d000      	beq.n	10005e9a <tud_task+0x796>
10005e98:	e445      	b.n	10005726 <tud_task+0x22>
10005e9a:	e4b5      	b.n	10005808 <tud_task+0x104>
      if ( tud_descriptor_device_qualifier_cb )
10005e9c:	4b18      	ldr	r3, [pc, #96]	; (10005f00 <tud_task+0x7fc>)
10005e9e:	2b00      	cmp	r3, #0
10005ea0:	d100      	bne.n	10005ea4 <tud_task+0x7a0>
10005ea2:	e4b1      	b.n	10005808 <tud_task+0x104>
        uint8_t const* desc_qualifier = tud_descriptor_device_qualifier_cb();
10005ea4:	e000      	b.n	10005ea8 <tud_task+0x7a4>
10005ea6:	bf00      	nop
10005ea8:	1e02      	subs	r2, r0, #0
        TU_ASSERT(desc_qualifier);
10005eaa:	d100      	bne.n	10005eae <tud_task+0x7aa>
10005eac:	e4ac      	b.n	10005808 <tud_task+0x104>
        return tud_control_xfer(rhport, p_request, (void*) desc_qualifier, desc_qualifier[0]);
10005eae:	4648      	mov	r0, r9
10005eb0:	7813      	ldrb	r3, [r2, #0]
10005eb2:	a908      	add	r1, sp, #32
10005eb4:	f000 f9c0 	bl	10006238 <tud_control_xfer>
10005eb8:	e7ec      	b.n	10005e94 <tud_task+0x790>
      uint8_t const* desc_str = (uint8_t const*) tud_descriptor_string_cb(desc_index, p_request->wIndex);
10005eba:	8939      	ldrh	r1, [r7, #8]
10005ebc:	f7fe f928 	bl	10004110 <tud_descriptor_string_cb>
10005ec0:	1e02      	subs	r2, r0, #0
      TU_VERIFY(desc_str);
10005ec2:	d1f4      	bne.n	10005eae <tud_task+0x7aa>
10005ec4:	e4a0      	b.n	10005808 <tud_task+0x104>
      tusb_desc_configuration_t const* desc_config = (tusb_desc_configuration_t const*) tud_descriptor_configuration_cb(desc_index);
10005ec6:	f7fe f91f 	bl	10004108 <tud_descriptor_configuration_cb>
10005eca:	1e04      	subs	r4, r0, #0
      TU_ASSERT(desc_config);
10005ecc:	d1d5      	bne.n	10005e7a <tud_task+0x776>
10005ece:	e49b      	b.n	10005808 <tud_task+0x104>
      return tud_control_xfer(rhport, p_request, (void*) tud_descriptor_device_cb(), len);
10005ed0:	f7fe f916 	bl	10004100 <tud_descriptor_device_cb>
10005ed4:	2312      	movs	r3, #18
10005ed6:	0002      	movs	r2, r0
10005ed8:	a908      	add	r1, sp, #32
10005eda:	4648      	mov	r0, r9
10005edc:	f000 f9ac 	bl	10006238 <tud_control_xfer>
10005ee0:	e7d8      	b.n	10005e94 <tud_task+0x790>
  if (tud_mount_cb) tud_mount_cb();
10005ee2:	4b08      	ldr	r3, [pc, #32]	; (10005f04 <tud_task+0x800>)
10005ee4:	2b00      	cmp	r3, #0
10005ee6:	d100      	bne.n	10005eea <tud_task+0x7e6>
10005ee8:	e67f      	b.n	10005bea <tud_task+0x4e6>
10005eea:	e000      	b.n	10005eee <tud_task+0x7ea>
10005eec:	bf00      	nop
10005eee:	e67c      	b.n	10005bea <tud_task+0x4e6>
10005ef0:	10004f4d 	.word	0x10004f4d
10005ef4:	2001732f 	.word	0x2001732f
10005ef8:	200166b4 	.word	0x200166b4
	...

10005f08 <dcd_event_bus_signal>:
{
10005f08:	b530      	push	{r4, r5, lr}
10005f0a:	b085      	sub	sp, #20
10005f0c:	0005      	movs	r5, r0
10005f0e:	000c      	movs	r4, r1
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
10005f10:	220c      	movs	r2, #12
10005f12:	2100      	movs	r1, #0
10005f14:	a801      	add	r0, sp, #4
10005f16:	f7fb f907 	bl	10001128 <__wrap_memset>
10005f1a:	466b      	mov	r3, sp
10005f1c:	711d      	strb	r5, [r3, #4]
10005f1e:	715c      	strb	r4, [r3, #5]
  switch (event->event_id)
10005f20:	2c04      	cmp	r4, #4
10005f22:	d04b      	beq.n	10005fbc <dcd_event_bus_signal+0xb4>
10005f24:	d805      	bhi.n	10005f32 <dcd_event_bus_signal+0x2a>
10005f26:	2c02      	cmp	r4, #2
10005f28:	d030      	beq.n	10005f8c <dcd_event_bus_signal+0x84>
10005f2a:	2c03      	cmp	r4, #3
10005f2c:	d115      	bne.n	10005f5a <dcd_event_bus_signal+0x52>
}
10005f2e:	b005      	add	sp, #20
10005f30:	bd30      	pop	{r4, r5, pc}
  switch (event->event_id)
10005f32:	2c05      	cmp	r4, #5
10005f34:	d111      	bne.n	10005f5a <dcd_event_bus_signal+0x52>
      if ( _usbd_dev.connected )
10005f36:	4b2a      	ldr	r3, [pc, #168]	; (10005fe0 <dcd_event_bus_signal+0xd8>)
10005f38:	781a      	ldrb	r2, [r3, #0]
10005f3a:	07d2      	lsls	r2, r2, #31
10005f3c:	d5f7      	bpl.n	10005f2e <dcd_event_bus_signal+0x26>
        _usbd_dev.suspended = 0;
10005f3e:	2104      	movs	r1, #4
10005f40:	781a      	ldrb	r2, [r3, #0]
10005f42:	438a      	bics	r2, r1
10005f44:	701a      	strb	r2, [r3, #0]
        osal_queue_send(_usbd_q, event, in_isr);
10005f46:	4b27      	ldr	r3, [pc, #156]	; (10005fe4 <dcd_event_bus_signal+0xdc>)
10005f48:	681c      	ldr	r4, [r3, #0]
    critsec->save = spin_lock_blocking(critsec->core.spin_lock);
10005f4a:	69a2      	ldr	r2, [r4, #24]
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
10005f4c:	f3ef 8110 	mrs	r1, PRIMASK
    __asm volatile ("cpsid i");
10005f50:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
10005f52:	6813      	ldr	r3, [r2, #0]
10005f54:	2b00      	cmp	r3, #0
10005f56:	d109      	bne.n	10005f6c <dcd_event_bus_signal+0x64>
10005f58:	e7fb      	b.n	10005f52 <dcd_event_bus_signal+0x4a>
      osal_queue_send(_usbd_q, event, in_isr);
10005f5a:	4b22      	ldr	r3, [pc, #136]	; (10005fe4 <dcd_event_bus_signal+0xdc>)
10005f5c:	681c      	ldr	r4, [r3, #0]
10005f5e:	69a2      	ldr	r2, [r4, #24]
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
10005f60:	f3ef 8110 	mrs	r1, PRIMASK
    __asm volatile ("cpsid i");
10005f64:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
10005f66:	6813      	ldr	r3, [r2, #0]
10005f68:	2b00      	cmp	r3, #0
10005f6a:	d0fc      	beq.n	10005f66 <dcd_event_bus_signal+0x5e>
    __asm volatile ("dmb");
10005f6c:	f3bf 8f5f 	dmb	sy
10005f70:	61e1      	str	r1, [r4, #28]
  //  however osal_queue_recieve may be. therefore my assumption is that
  //  the fifo mutex is not populated for queues used from an IRQ context
  assert(!qhdl->ff.mutex);

  _osal_q_lock(qhdl);
  bool success = tu_fifo_write(&qhdl->ff, data);
10005f72:	0020      	movs	r0, r4
10005f74:	a901      	add	r1, sp, #4
10005f76:	f7ff fa87 	bl	10005488 <tu_fifo_write>
    spin_unlock(critsec->core.spin_lock, critsec->save);
10005f7a:	69a2      	ldr	r2, [r4, #24]
10005f7c:	69e3      	ldr	r3, [r4, #28]
10005f7e:	f3bf 8f5f 	dmb	sy
    *lock = 0;
10005f82:	2100      	movs	r1, #0
10005f84:	6011      	str	r1, [r2, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10005f86:	f383 8810 	msr	PRIMASK, r3
}
10005f8a:	e7d0      	b.n	10005f2e <dcd_event_bus_signal+0x26>
      _usbd_dev.connected  = 0;
10005f8c:	2101      	movs	r1, #1
10005f8e:	4b14      	ldr	r3, [pc, #80]	; (10005fe0 <dcd_event_bus_signal+0xd8>)
10005f90:	781a      	ldrb	r2, [r3, #0]
10005f92:	438a      	bics	r2, r1
10005f94:	701a      	strb	r2, [r3, #0]
      _usbd_dev.addressed  = 0;
10005f96:	781a      	ldrb	r2, [r3, #0]
      _usbd_dev.suspended  = 0;
10005f98:	3103      	adds	r1, #3
      _usbd_dev.addressed  = 0;
10005f9a:	43a2      	bics	r2, r4
10005f9c:	701a      	strb	r2, [r3, #0]
      _usbd_dev.cfg_num    = 0;
10005f9e:	2200      	movs	r2, #0
10005fa0:	705a      	strb	r2, [r3, #1]
      _usbd_dev.suspended  = 0;
10005fa2:	781a      	ldrb	r2, [r3, #0]
10005fa4:	438a      	bics	r2, r1
10005fa6:	701a      	strb	r2, [r3, #0]
      osal_queue_send(_usbd_q, event, in_isr);
10005fa8:	4b0e      	ldr	r3, [pc, #56]	; (10005fe4 <dcd_event_bus_signal+0xdc>)
10005faa:	681c      	ldr	r4, [r3, #0]
    critsec->save = spin_lock_blocking(critsec->core.spin_lock);
10005fac:	69a2      	ldr	r2, [r4, #24]
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
10005fae:	f3ef 8110 	mrs	r1, PRIMASK
    __asm volatile ("cpsid i");
10005fb2:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
10005fb4:	6813      	ldr	r3, [r2, #0]
10005fb6:	2b00      	cmp	r3, #0
10005fb8:	d1d8      	bne.n	10005f6c <dcd_event_bus_signal+0x64>
10005fba:	e7fb      	b.n	10005fb4 <dcd_event_bus_signal+0xac>
      if ( _usbd_dev.connected )
10005fbc:	4b08      	ldr	r3, [pc, #32]	; (10005fe0 <dcd_event_bus_signal+0xd8>)
10005fbe:	781a      	ldrb	r2, [r3, #0]
10005fc0:	07d2      	lsls	r2, r2, #31
10005fc2:	d5b4      	bpl.n	10005f2e <dcd_event_bus_signal+0x26>
        _usbd_dev.suspended = 1;
10005fc4:	2104      	movs	r1, #4
10005fc6:	781a      	ldrb	r2, [r3, #0]
10005fc8:	430a      	orrs	r2, r1
10005fca:	701a      	strb	r2, [r3, #0]
        osal_queue_send(_usbd_q, event, in_isr);
10005fcc:	4b05      	ldr	r3, [pc, #20]	; (10005fe4 <dcd_event_bus_signal+0xdc>)
10005fce:	681c      	ldr	r4, [r3, #0]
10005fd0:	69a2      	ldr	r2, [r4, #24]
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
10005fd2:	f3ef 8110 	mrs	r1, PRIMASK
    __asm volatile ("cpsid i");
10005fd6:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
10005fd8:	6813      	ldr	r3, [r2, #0]
10005fda:	2b00      	cmp	r3, #0
10005fdc:	d1c6      	bne.n	10005f6c <dcd_event_bus_signal+0x64>
10005fde:	e7fb      	b.n	10005fd8 <dcd_event_bus_signal+0xd0>
10005fe0:	200169e4 	.word	0x200169e4
10005fe4:	20016a20 	.word	0x20016a20

10005fe8 <dcd_event_setup_received>:
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_SETUP_RECEIVED };
10005fe8:	2300      	movs	r3, #0
{
10005fea:	b530      	push	{r4, r5, lr}
10005fec:	b085      	sub	sp, #20
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_SETUP_RECEIVED };
10005fee:	ad01      	add	r5, sp, #4
10005ff0:	806b      	strh	r3, [r5, #2]
10005ff2:	7028      	strb	r0, [r5, #0]
10005ff4:	3306      	adds	r3, #6
  memcpy(&event.setup_received, setup, 8);
10005ff6:	2208      	movs	r2, #8
10005ff8:	a802      	add	r0, sp, #8
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_SETUP_RECEIVED };
10005ffa:	706b      	strb	r3, [r5, #1]
  memcpy(&event.setup_received, setup, 8);
10005ffc:	f7fb f89a 	bl	10001134 <__wrap___aeabi_memcpy>
      osal_queue_send(_usbd_q, event, in_isr);
10006000:	4b0c      	ldr	r3, [pc, #48]	; (10006034 <dcd_event_setup_received+0x4c>)
10006002:	681c      	ldr	r4, [r3, #0]
10006004:	69a2      	ldr	r2, [r4, #24]
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
10006006:	f3ef 8310 	mrs	r3, PRIMASK
    __asm volatile ("cpsid i");
1000600a:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
1000600c:	6811      	ldr	r1, [r2, #0]
1000600e:	2900      	cmp	r1, #0
10006010:	d0fc      	beq.n	1000600c <dcd_event_setup_received+0x24>
    __asm volatile ("dmb");
10006012:	f3bf 8f5f 	dmb	sy
10006016:	61e3      	str	r3, [r4, #28]
10006018:	0029      	movs	r1, r5
1000601a:	0020      	movs	r0, r4
1000601c:	f7ff fa34 	bl	10005488 <tu_fifo_write>
    spin_unlock(critsec->core.spin_lock, critsec->save);
10006020:	69a2      	ldr	r2, [r4, #24]
10006022:	69e3      	ldr	r3, [r4, #28]
10006024:	f3bf 8f5f 	dmb	sy
    *lock = 0;
10006028:	2100      	movs	r1, #0
1000602a:	6011      	str	r1, [r2, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
1000602c:	f383 8810 	msr	PRIMASK, r3
}
10006030:	b005      	add	sp, #20
10006032:	bd30      	pop	{r4, r5, pc}
10006034:	20016a20 	.word	0x20016a20

10006038 <dcd_event_xfer_complete>:
{
10006038:	b5f0      	push	{r4, r5, r6, r7, lr}
1000603a:	46c6      	mov	lr, r8
1000603c:	4680      	mov	r8, r0
1000603e:	b500      	push	{lr}
10006040:	b084      	sub	sp, #16
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
10006042:	ac01      	add	r4, sp, #4
{
10006044:	000f      	movs	r7, r1
10006046:	0016      	movs	r6, r2
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
10006048:	2100      	movs	r1, #0
1000604a:	2208      	movs	r2, #8
1000604c:	0020      	movs	r0, r4
{
1000604e:	001d      	movs	r5, r3
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
10006050:	f7fb f86a 	bl	10001128 <__wrap_memset>
10006054:	4643      	mov	r3, r8
10006056:	7023      	strb	r3, [r4, #0]
10006058:	2307      	movs	r3, #7
1000605a:	7063      	strb	r3, [r4, #1]
      osal_queue_send(_usbd_q, event, in_isr);
1000605c:	4b0f      	ldr	r3, [pc, #60]	; (1000609c <dcd_event_xfer_complete+0x64>)
  event.xfer_complete.result  = result;
1000605e:	7165      	strb	r5, [r4, #5]
      osal_queue_send(_usbd_q, event, in_isr);
10006060:	681d      	ldr	r5, [r3, #0]
  event.xfer_complete.ep_addr = ep_addr;
10006062:	7127      	strb	r7, [r4, #4]
  event.xfer_complete.len     = xferred_bytes;
10006064:	60a6      	str	r6, [r4, #8]
    critsec->save = spin_lock_blocking(critsec->core.spin_lock);
10006066:	69aa      	ldr	r2, [r5, #24]
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
10006068:	f3ef 8310 	mrs	r3, PRIMASK
    __asm volatile ("cpsid i");
1000606c:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
1000606e:	6811      	ldr	r1, [r2, #0]
10006070:	2900      	cmp	r1, #0
10006072:	d0fc      	beq.n	1000606e <dcd_event_xfer_complete+0x36>
    __asm volatile ("dmb");
10006074:	f3bf 8f5f 	dmb	sy
10006078:	61eb      	str	r3, [r5, #28]
1000607a:	0021      	movs	r1, r4
1000607c:	0028      	movs	r0, r5
1000607e:	f7ff fa03 	bl	10005488 <tu_fifo_write>
    spin_unlock(critsec->core.spin_lock, critsec->save);
10006082:	69aa      	ldr	r2, [r5, #24]
10006084:	69eb      	ldr	r3, [r5, #28]
10006086:	f3bf 8f5f 	dmb	sy
    *lock = 0;
1000608a:	2100      	movs	r1, #0
1000608c:	6011      	str	r1, [r2, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
1000608e:	f383 8810 	msr	PRIMASK, r3
}
10006092:	b004      	add	sp, #16
10006094:	bc80      	pop	{r7}
10006096:	46b8      	mov	r8, r7
10006098:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000609a:	46c0      	nop			; (mov r8, r8)
1000609c:	20016a20 	.word	0x20016a20

100060a0 <usbd_open_edpt_pair>:
{
100060a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100060a2:	4647      	mov	r7, r8
100060a4:	46d6      	mov	lr, sl
100060a6:	b580      	push	{r7, lr}
100060a8:	4698      	mov	r8, r3
100060aa:	9b08      	ldr	r3, [sp, #32]
100060ac:	0006      	movs	r6, r0
100060ae:	000c      	movs	r4, r1
100060b0:	1e17      	subs	r7, r2, #0
100060b2:	469a      	mov	sl, r3
  for(int i=0; i<ep_count; i++)
100060b4:	d021      	beq.n	100060fa <usbd_open_edpt_pair+0x5a>
100060b6:	2500      	movs	r5, #0
100060b8:	e006      	b.n	100060c8 <usbd_open_edpt_pair+0x28>
      (*ep_out) = desc_ep->bEndpointAddress;
100060ba:	4652      	mov	r2, sl
100060bc:	7013      	strb	r3, [r2, #0]
100060be:	7823      	ldrb	r3, [r4, #0]
  for(int i=0; i<ep_count; i++)
100060c0:	3501      	adds	r5, #1
100060c2:	18e4      	adds	r4, r4, r3
100060c4:	42bd      	cmp	r5, r7
100060c6:	da18      	bge.n	100060fa <usbd_open_edpt_pair+0x5a>
    TU_ASSERT(TUSB_DESC_ENDPOINT == desc_ep->bDescriptorType && xfer_type == desc_ep->bmAttributes.xfer);
100060c8:	7863      	ldrb	r3, [r4, #1]
100060ca:	2b05      	cmp	r3, #5
100060cc:	d117      	bne.n	100060fe <usbd_open_edpt_pair+0x5e>
100060ce:	78e1      	ldrb	r1, [r4, #3]
100060d0:	0789      	lsls	r1, r1, #30
100060d2:	0f89      	lsrs	r1, r1, #30
100060d4:	4541      	cmp	r1, r8
100060d6:	d112      	bne.n	100060fe <usbd_open_edpt_pair+0x5e>
  return dcd_edpt_open(rhport, desc_ep);
100060d8:	0021      	movs	r1, r4
100060da:	0030      	movs	r0, r6
100060dc:	f000 facc 	bl	10006678 <dcd_edpt_open>
    TU_ASSERT(usbd_edpt_open(rhport, desc_ep));
100060e0:	2800      	cmp	r0, #0
100060e2:	d00c      	beq.n	100060fe <usbd_open_edpt_pair+0x5e>
    if ( tu_edpt_dir(desc_ep->bEndpointAddress) == TUSB_DIR_IN )
100060e4:	78a3      	ldrb	r3, [r4, #2]
100060e6:	09da      	lsrs	r2, r3, #7
100060e8:	2a01      	cmp	r2, #1
100060ea:	d1e6      	bne.n	100060ba <usbd_open_edpt_pair+0x1a>
      (*ep_in) = desc_ep->bEndpointAddress;
100060ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
  for(int i=0; i<ep_count; i++)
100060ee:	3501      	adds	r5, #1
      (*ep_out) = desc_ep->bEndpointAddress;
100060f0:	7013      	strb	r3, [r2, #0]
100060f2:	7823      	ldrb	r3, [r4, #0]
100060f4:	18e4      	adds	r4, r4, r3
  for(int i=0; i<ep_count; i++)
100060f6:	42bd      	cmp	r5, r7
100060f8:	dbe6      	blt.n	100060c8 <usbd_open_edpt_pair+0x28>
  return true;
100060fa:	2001      	movs	r0, #1
100060fc:	e000      	b.n	10006100 <usbd_open_edpt_pair+0x60>
    TU_ASSERT(TUSB_DESC_ENDPOINT == desc_ep->bDescriptorType && xfer_type == desc_ep->bmAttributes.xfer);
100060fe:	2000      	movs	r0, #0
}
10006100:	bcc0      	pop	{r6, r7}
10006102:	46ba      	mov	sl, r7
10006104:	46b0      	mov	r8, r6
10006106:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10006108 <usbd_edpt_open>:
{
10006108:	b510      	push	{r4, lr}
  return dcd_edpt_open(rhport, desc_ep);
1000610a:	f000 fab5 	bl	10006678 <dcd_edpt_open>
}
1000610e:	bd10      	pop	{r4, pc}

10006110 <usbd_edpt_claim>:
{
10006110:	b570      	push	{r4, r5, r6, lr}
  TU_VERIFY((_usbd_dev.ep_status[epnum][dir].busy == 0) && (_usbd_dev.ep_status[epnum][dir].claimed == 0));
10006112:	247f      	movs	r4, #127	; 0x7f
10006114:	400c      	ands	r4, r1
10006116:	0063      	lsls	r3, r4, #1
10006118:	4c14      	ldr	r4, [pc, #80]	; (1000616c <usbd_edpt_claim+0x5c>)
1000611a:	09c9      	lsrs	r1, r1, #7
1000611c:	18e4      	adds	r4, r4, r3
1000611e:	1864      	adds	r4, r4, r1
10006120:	3420      	adds	r4, #32
10006122:	7963      	ldrb	r3, [r4, #5]
10006124:	07db      	lsls	r3, r3, #31
10006126:	0fdd      	lsrs	r5, r3, #31
10006128:	2b00      	cmp	r3, #0
1000612a:	d118      	bne.n	1000615e <usbd_edpt_claim+0x4e>
1000612c:	7963      	ldrb	r3, [r4, #5]
1000612e:	075b      	lsls	r3, r3, #29
10006130:	d501      	bpl.n	10006136 <usbd_edpt_claim+0x26>
}
10006132:	0028      	movs	r0, r5
10006134:	bd70      	pop	{r4, r5, r6, pc}
    return mutex_enter_timeout_ms(mutex_hdl, msec);
10006136:	2101      	movs	r1, #1
  osal_mutex_lock(_usbd_mutex, OSAL_TIMEOUT_WAIT_FOREVER);
10006138:	4e0d      	ldr	r6, [pc, #52]	; (10006170 <usbd_edpt_claim+0x60>)
1000613a:	4249      	negs	r1, r1
1000613c:	6830      	ldr	r0, [r6, #0]
1000613e:	f004 ff43 	bl	1000afc8 <__mutex_enter_timeout_ms_veneer>
  bool const ret = (_usbd_dev.ep_status[epnum][dir].busy == 0) && (_usbd_dev.ep_status[epnum][dir].claimed == 0);
10006142:	7963      	ldrb	r3, [r4, #5]
10006144:	07db      	lsls	r3, r3, #31
10006146:	0fdd      	lsrs	r5, r3, #31
10006148:	2b00      	cmp	r3, #0
1000614a:	d10a      	bne.n	10006162 <usbd_edpt_claim+0x52>
1000614c:	7963      	ldrb	r3, [r4, #5]
1000614e:	075b      	lsls	r3, r3, #29
10006150:	d408      	bmi.n	10006164 <usbd_edpt_claim+0x54>
    _usbd_dev.ep_status[epnum][dir].claimed = 1;
10006152:	2204      	movs	r2, #4
10006154:	7963      	ldrb	r3, [r4, #5]
  bool const ret = (_usbd_dev.ep_status[epnum][dir].busy == 0) && (_usbd_dev.ep_status[epnum][dir].claimed == 0);
10006156:	2501      	movs	r5, #1
    _usbd_dev.ep_status[epnum][dir].claimed = 1;
10006158:	4313      	orrs	r3, r2
1000615a:	7163      	strb	r3, [r4, #5]
1000615c:	e002      	b.n	10006164 <usbd_edpt_claim+0x54>
  TU_VERIFY((_usbd_dev.ep_status[epnum][dir].busy == 0) && (_usbd_dev.ep_status[epnum][dir].claimed == 0));
1000615e:	2500      	movs	r5, #0
10006160:	e7e7      	b.n	10006132 <usbd_edpt_claim+0x22>
  bool const ret = (_usbd_dev.ep_status[epnum][dir].busy == 0) && (_usbd_dev.ep_status[epnum][dir].claimed == 0);
10006162:	2500      	movs	r5, #0
    mutex_exit(mutex_hdl);
10006164:	6830      	ldr	r0, [r6, #0]
10006166:	f004 ff0f 	bl	1000af88 <__mutex_exit_veneer>
  return ret;
1000616a:	e7e2      	b.n	10006132 <usbd_edpt_claim+0x22>
1000616c:	200169e4 	.word	0x200169e4
10006170:	20016a1c 	.word	0x20016a1c

10006174 <usbd_edpt_release>:
{
10006174:	b570      	push	{r4, r5, r6, lr}
10006176:	000c      	movs	r4, r1
    return mutex_enter_timeout_ms(mutex_hdl, msec);
10006178:	2101      	movs	r1, #1
  osal_mutex_lock(_usbd_mutex, OSAL_TIMEOUT_WAIT_FOREVER);
1000617a:	4d0f      	ldr	r5, [pc, #60]	; (100061b8 <usbd_edpt_release+0x44>)
1000617c:	4249      	negs	r1, r1
1000617e:	6828      	ldr	r0, [r5, #0]
10006180:	f004 ff22 	bl	1000afc8 <__mutex_enter_timeout_ms_veneer>
  bool const ret = (_usbd_dev.ep_status[epnum][dir].busy == 0) && (_usbd_dev.ep_status[epnum][dir].claimed == 1);
10006184:	217f      	movs	r1, #127	; 0x7f
10006186:	4021      	ands	r1, r4
10006188:	004b      	lsls	r3, r1, #1
1000618a:	490c      	ldr	r1, [pc, #48]	; (100061bc <usbd_edpt_release+0x48>)
1000618c:	09e4      	lsrs	r4, r4, #7
1000618e:	18c9      	adds	r1, r1, r3
10006190:	1909      	adds	r1, r1, r4
10006192:	3120      	adds	r1, #32
10006194:	794b      	ldrb	r3, [r1, #5]
10006196:	2400      	movs	r4, #0
10006198:	07db      	lsls	r3, r3, #31
1000619a:	d408      	bmi.n	100061ae <usbd_edpt_release+0x3a>
1000619c:	794b      	ldrb	r3, [r1, #5]
1000619e:	075b      	lsls	r3, r3, #29
100061a0:	0fdc      	lsrs	r4, r3, #31
100061a2:	2b00      	cmp	r3, #0
100061a4:	da03      	bge.n	100061ae <usbd_edpt_release+0x3a>
    _usbd_dev.ep_status[epnum][dir].claimed = 0;
100061a6:	2204      	movs	r2, #4
100061a8:	794b      	ldrb	r3, [r1, #5]
100061aa:	4393      	bics	r3, r2
100061ac:	714b      	strb	r3, [r1, #5]
    mutex_exit(mutex_hdl);
100061ae:	6828      	ldr	r0, [r5, #0]
100061b0:	f004 feea 	bl	1000af88 <__mutex_exit_veneer>
}
100061b4:	0020      	movs	r0, r4
100061b6:	bd70      	pop	{r4, r5, r6, pc}
100061b8:	20016a1c 	.word	0x20016a1c
100061bc:	200169e4 	.word	0x200169e4

100061c0 <usbd_edpt_xfer>:
{
100061c0:	b570      	push	{r4, r5, r6, lr}
  TU_ASSERT(_usbd_dev.ep_status[epnum][dir].busy == 0);
100061c2:	257f      	movs	r5, #127	; 0x7f
100061c4:	4c0f      	ldr	r4, [pc, #60]	; (10006204 <usbd_edpt_xfer+0x44>)
100061c6:	400d      	ands	r5, r1
100061c8:	006d      	lsls	r5, r5, #1
100061ca:	1964      	adds	r4, r4, r5
{
100061cc:	0006      	movs	r6, r0
  TU_ASSERT(_usbd_dev.ep_status[epnum][dir].busy == 0);
100061ce:	09c8      	lsrs	r0, r1, #7
100061d0:	1824      	adds	r4, r4, r0
100061d2:	3420      	adds	r4, #32
100061d4:	7965      	ldrb	r5, [r4, #5]
100061d6:	2000      	movs	r0, #0
100061d8:	07ed      	lsls	r5, r5, #31
100061da:	d500      	bpl.n	100061de <usbd_edpt_xfer+0x1e>
}
100061dc:	bd70      	pop	{r4, r5, r6, pc}
  _usbd_dev.ep_status[epnum][dir].busy = true;
100061de:	2501      	movs	r5, #1
100061e0:	7960      	ldrb	r0, [r4, #5]
100061e2:	4328      	orrs	r0, r5
100061e4:	7160      	strb	r0, [r4, #5]
  if ( dcd_edpt_xfer(rhport, ep_addr, buffer, total_bytes) )
100061e6:	0030      	movs	r0, r6
100061e8:	f000 faec 	bl	100067c4 <dcd_edpt_xfer>
100061ec:	2800      	cmp	r0, #0
100061ee:	d1f5      	bne.n	100061dc <usbd_edpt_xfer+0x1c>
    _usbd_dev.ep_status[epnum][dir].busy = false;
100061f0:	2201      	movs	r2, #1
100061f2:	7963      	ldrb	r3, [r4, #5]
100061f4:	4393      	bics	r3, r2
100061f6:	7163      	strb	r3, [r4, #5]
    _usbd_dev.ep_status[epnum][dir].claimed = 0;
100061f8:	7963      	ldrb	r3, [r4, #5]
100061fa:	3203      	adds	r2, #3
100061fc:	4393      	bics	r3, r2
100061fe:	7163      	strb	r3, [r4, #5]
    return false;
10006200:	e7ec      	b.n	100061dc <usbd_edpt_xfer+0x1c>
10006202:	46c0      	nop			; (mov r8, r8)
10006204:	200169e4 	.word	0x200169e4

10006208 <tud_control_status>:
  return dcd_edpt_xfer(rhport, ep_addr, NULL, 0);
}

// Status phase
bool tud_control_status(uint8_t rhport, tusb_control_request_t const * request)
{
10006208:	b570      	push	{r4, r5, r6, lr}
  _ctrl_xfer.request       = (*request);
1000620a:	4e0a      	ldr	r6, [pc, #40]	; (10006234 <tud_control_status+0x2c>)
{
1000620c:	0005      	movs	r5, r0
  _ctrl_xfer.request       = (*request);
1000620e:	0030      	movs	r0, r6
10006210:	2208      	movs	r2, #8
{
10006212:	000c      	movs	r4, r1
  _ctrl_xfer.request       = (*request);
10006214:	f7fa ff8e 	bl	10001134 <__wrap___aeabi_memcpy>
  _ctrl_xfer.buffer        = NULL;
10006218:	2300      	movs	r3, #0
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
1000621a:	217f      	movs	r1, #127	; 0x7f
  _ctrl_xfer.total_xferred = 0;
  _ctrl_xfer.data_len      = 0;
1000621c:	60f3      	str	r3, [r6, #12]
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
1000621e:	7822      	ldrb	r2, [r4, #0]
  _ctrl_xfer.buffer        = NULL;
10006220:	60b3      	str	r3, [r6, #8]
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
10006222:	4291      	cmp	r1, r2
10006224:	415b      	adcs	r3, r3
  return dcd_edpt_xfer(rhport, ep_addr, NULL, 0);
10006226:	0028      	movs	r0, r5
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
10006228:	01d9      	lsls	r1, r3, #7
  return dcd_edpt_xfer(rhport, ep_addr, NULL, 0);
1000622a:	2200      	movs	r2, #0
1000622c:	2300      	movs	r3, #0
1000622e:	f000 fac9 	bl	100067c4 <dcd_edpt_xfer>

  return _status_stage_xact(rhport, request);
}
10006232:	bd70      	pop	{r4, r5, r6, pc}
10006234:	20016988 	.word	0x20016988

10006238 <tud_control_xfer>:
}

// Transmit data to/from the control endpoint.
// If the request's wLength is zero, a status packet is sent instead.
bool tud_control_xfer(uint8_t rhport, tusb_control_request_t const * request, void* buffer, uint16_t len)
{
10006238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000623a:	46ce      	mov	lr, r9
1000623c:	4647      	mov	r7, r8
1000623e:	4691      	mov	r9, r2
  _ctrl_xfer.request       = (*request);
10006240:	4e2a      	ldr	r6, [pc, #168]	; (100062ec <tud_control_xfer+0xb4>)
{
10006242:	b580      	push	{r7, lr}
  _ctrl_xfer.request       = (*request);
10006244:	2208      	movs	r2, #8
{
10006246:	0007      	movs	r7, r0
  _ctrl_xfer.request       = (*request);
10006248:	0030      	movs	r0, r6
{
1000624a:	000d      	movs	r5, r1
1000624c:	4698      	mov	r8, r3
  _ctrl_xfer.request       = (*request);
1000624e:	f7fa ff71 	bl	10001134 <__wrap___aeabi_memcpy>
  _ctrl_xfer.buffer        = (uint8_t*) buffer;
10006252:	464b      	mov	r3, r9
10006254:	60b3      	str	r3, [r6, #8]
  _ctrl_xfer.total_xferred = 0U;
10006256:	2300      	movs	r3, #0
10006258:	81f3      	strh	r3, [r6, #14]
  _ctrl_xfer.data_len      = tu_min16(len, request->wLength);
1000625a:	79ec      	ldrb	r4, [r5, #7]
1000625c:	79a9      	ldrb	r1, [r5, #6]
1000625e:	0224      	lsls	r4, r4, #8
10006260:	430c      	orrs	r4, r1
static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
10006262:	1c23      	adds	r3, r4, #0
10006264:	4544      	cmp	r4, r8
10006266:	d900      	bls.n	1000626a <tud_control_xfer+0x32>
10006268:	4643      	mov	r3, r8
1000626a:	b29a      	uxth	r2, r3
1000626c:	4690      	mov	r8, r2
1000626e:	81b3      	strh	r3, [r6, #12]
  
  if (request->wLength > 0U)
10006270:	2c00      	cmp	r4, #0
10006272:	d013      	beq.n	1000629c <tud_control_xfer+0x64>
  {
    if(_ctrl_xfer.data_len > 0U)
10006274:	2a00      	cmp	r2, #0
10006276:	d01f      	beq.n	100062b8 <tud_control_xfer+0x80>
    {
      TU_ASSERT(buffer);
10006278:	464b      	mov	r3, r9
1000627a:	2b00      	cmp	r3, #0
1000627c:	d034      	beq.n	100062e8 <tud_control_xfer+0xb0>
1000627e:	1c13      	adds	r3, r2, #0
10006280:	2a40      	cmp	r2, #64	; 0x40
10006282:	d81f      	bhi.n	100062c4 <tud_control_xfer+0x8c>
10006284:	b29b      	uxth	r3, r3
10006286:	4698      	mov	r8, r3
  if ( _ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_IN )
10006288:	7833      	ldrb	r3, [r6, #0]
1000628a:	2b7f      	cmp	r3, #127	; 0x7f
1000628c:	d820      	bhi.n	100062d0 <tud_control_xfer+0x98>
1000628e:	2100      	movs	r1, #0
  return dcd_edpt_xfer(rhport, ep_addr, xact_len ? _usbd_ctrl_buf : NULL, xact_len);
10006290:	4a17      	ldr	r2, [pc, #92]	; (100062f0 <tud_control_xfer+0xb8>)
10006292:	4643      	mov	r3, r8
10006294:	0038      	movs	r0, r7
10006296:	f000 fa95 	bl	100067c4 <dcd_edpt_xfer>
1000629a:	e009      	b.n	100062b0 <tud_control_xfer+0x78>
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
1000629c:	227f      	movs	r2, #127	; 0x7f
1000629e:	782b      	ldrb	r3, [r5, #0]
  return dcd_edpt_xfer(rhport, ep_addr, NULL, 0);
100062a0:	0038      	movs	r0, r7
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
100062a2:	429a      	cmp	r2, r3
100062a4:	4164      	adcs	r4, r4
  return dcd_edpt_xfer(rhport, ep_addr, NULL, 0);
100062a6:	2300      	movs	r3, #0
100062a8:	2200      	movs	r2, #0
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
100062aa:	01e1      	lsls	r1, r4, #7
  return dcd_edpt_xfer(rhport, ep_addr, NULL, 0);
100062ac:	f000 fa8a 	bl	100067c4 <dcd_edpt_xfer>
    // Status stage
    TU_ASSERT( _status_stage_xact(rhport, request) );
  }

  return true;
}
100062b0:	bcc0      	pop	{r6, r7}
100062b2:	46b9      	mov	r9, r7
100062b4:	46b0      	mov	r8, r6
100062b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ( _ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_IN )
100062b8:	7833      	ldrb	r3, [r6, #0]
100062ba:	2b7f      	cmp	r3, #127	; 0x7f
100062bc:	d911      	bls.n	100062e2 <tud_control_xfer+0xaa>
    ep_addr = EDPT_CTRL_IN;
100062be:	2180      	movs	r1, #128	; 0x80
  return dcd_edpt_xfer(rhport, ep_addr, xact_len ? _usbd_ctrl_buf : NULL, xact_len);
100062c0:	2200      	movs	r2, #0
100062c2:	e7e6      	b.n	10006292 <tud_control_xfer+0x5a>
100062c4:	2340      	movs	r3, #64	; 0x40
100062c6:	b29b      	uxth	r3, r3
100062c8:	4698      	mov	r8, r3
  if ( _ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_IN )
100062ca:	7833      	ldrb	r3, [r6, #0]
100062cc:	2b7f      	cmp	r3, #127	; 0x7f
100062ce:	d9de      	bls.n	1000628e <tud_control_xfer+0x56>
    if ( xact_len ) memcpy(_usbd_ctrl_buf, _ctrl_xfer.buffer, xact_len);
100062d0:	4c07      	ldr	r4, [pc, #28]	; (100062f0 <tud_control_xfer+0xb8>)
100062d2:	4642      	mov	r2, r8
100062d4:	4649      	mov	r1, r9
100062d6:	0020      	movs	r0, r4
100062d8:	f7fa ff2c 	bl	10001134 <__wrap___aeabi_memcpy>
    ep_addr = EDPT_CTRL_IN;
100062dc:	2180      	movs	r1, #128	; 0x80
  return dcd_edpt_xfer(rhport, ep_addr, xact_len ? _usbd_ctrl_buf : NULL, xact_len);
100062de:	0022      	movs	r2, r4
100062e0:	e7d7      	b.n	10006292 <tud_control_xfer+0x5a>
  if ( _ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_IN )
100062e2:	2100      	movs	r1, #0
  return dcd_edpt_xfer(rhport, ep_addr, xact_len ? _usbd_ctrl_buf : NULL, xact_len);
100062e4:	2200      	movs	r2, #0
100062e6:	e7d4      	b.n	10006292 <tud_control_xfer+0x5a>
      TU_ASSERT(buffer);
100062e8:	2000      	movs	r0, #0
100062ea:	e7e1      	b.n	100062b0 <tud_control_xfer+0x78>
100062ec:	20016988 	.word	0x20016988
100062f0:	200169a4 	.word	0x200169a4

100062f4 <usbd_control_reset>:
//--------------------------------------------------------------------+
// USBD API
//--------------------------------------------------------------------+

void usbd_control_reset(void)
{
100062f4:	b510      	push	{r4, lr}
  tu_varclr(&_ctrl_xfer);
100062f6:	2214      	movs	r2, #20
100062f8:	2100      	movs	r1, #0
100062fa:	4802      	ldr	r0, [pc, #8]	; (10006304 <usbd_control_reset+0x10>)
100062fc:	f7fa ff14 	bl	10001128 <__wrap_memset>
}
10006300:	bd10      	pop	{r4, pc}
10006302:	46c0      	nop			; (mov r8, r8)
10006304:	20016988 	.word	0x20016988

10006308 <usbd_control_set_complete_callback>:

// TODO may find a better way
void usbd_control_set_complete_callback( bool (*fp) (uint8_t, tusb_control_request_t const * ) )
{
  _ctrl_xfer.complete_cb = fp;
10006308:	4b01      	ldr	r3, [pc, #4]	; (10006310 <usbd_control_set_complete_callback+0x8>)
1000630a:	6118      	str	r0, [r3, #16]
}
1000630c:	4770      	bx	lr
1000630e:	46c0      	nop			; (mov r8, r8)
10006310:	20016988 	.word	0x20016988

10006314 <usbd_control_set_request>:

// useful for dcd_set_address where DCD is responsible for status response
void usbd_control_set_request(tusb_control_request_t const *request)
{
10006314:	b510      	push	{r4, lr}
  _ctrl_xfer.request       = (*request);
10006316:	4c05      	ldr	r4, [pc, #20]	; (1000632c <usbd_control_set_request+0x18>)
{
10006318:	0001      	movs	r1, r0
  _ctrl_xfer.request       = (*request);
1000631a:	2208      	movs	r2, #8
1000631c:	0020      	movs	r0, r4
1000631e:	f7fa ff09 	bl	10001134 <__wrap___aeabi_memcpy>
  _ctrl_xfer.buffer        = NULL;
10006322:	2300      	movs	r3, #0
10006324:	60a3      	str	r3, [r4, #8]
  _ctrl_xfer.total_xferred = 0;
  _ctrl_xfer.data_len      = 0;
10006326:	60e3      	str	r3, [r4, #12]
}
10006328:	bd10      	pop	{r4, pc}
1000632a:	46c0      	nop			; (mov r8, r8)
1000632c:	20016988 	.word	0x20016988

10006330 <usbd_control_xfer_cb>:

// callback when a transaction complete on
// - DATA stage of control endpoint or
// - Status stage
bool usbd_control_xfer_cb (uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes)
{
10006330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  (void) result;

  // Endpoint Address is opposite to direction bit, this is Status Stage complete event
  if ( tu_edpt_dir(ep_addr) != _ctrl_xfer.request.bmRequestType_bit.direction )
10006332:	4d37      	ldr	r5, [pc, #220]	; (10006410 <usbd_control_xfer_cb+0xe0>)
{
10006334:	001c      	movs	r4, r3
  if ( tu_edpt_dir(ep_addr) != _ctrl_xfer.request.bmRequestType_bit.direction )
10006336:	782b      	ldrb	r3, [r5, #0]
{
10006338:	0006      	movs	r6, r0
  if ( tu_edpt_dir(ep_addr) != _ctrl_xfer.request.bmRequestType_bit.direction )
1000633a:	09da      	lsrs	r2, r3, #7
1000633c:	09c9      	lsrs	r1, r1, #7
1000633e:	428a      	cmp	r2, r1
10006340:	d00c      	beq.n	1000635c <usbd_control_xfer_cb+0x2c>
  {
    TU_ASSERT(0 == xferred_bytes);
10006342:	2700      	movs	r7, #0
10006344:	2c00      	cmp	r4, #0
10006346:	d001      	beq.n	1000634c <usbd_control_xfer_cb+0x1c>
    // More data to transfer
    TU_ASSERT( _data_stage_xact(rhport) );
  }

  return true;
}
10006348:	0038      	movs	r0, r7
1000634a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (dcd_edpt0_status_complete) dcd_edpt0_status_complete(rhport, &_ctrl_xfer.request);
1000634c:	4b31      	ldr	r3, [pc, #196]	; (10006414 <usbd_control_xfer_cb+0xe4>)
    return true;
1000634e:	3701      	adds	r7, #1
    if (dcd_edpt0_status_complete) dcd_edpt0_status_complete(rhport, &_ctrl_xfer.request);
10006350:	2b00      	cmp	r3, #0
10006352:	d0f9      	beq.n	10006348 <usbd_control_xfer_cb+0x18>
10006354:	0029      	movs	r1, r5
10006356:	f000 f973 	bl	10006640 <dcd_edpt0_status_complete>
1000635a:	e7f5      	b.n	10006348 <usbd_control_xfer_cb+0x18>
  if ( _ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_OUT )
1000635c:	2b7f      	cmp	r3, #127	; 0x7f
1000635e:	d806      	bhi.n	1000636e <usbd_control_xfer_cb+0x3e>
    TU_VERIFY(_ctrl_xfer.buffer);
10006360:	68a8      	ldr	r0, [r5, #8]
10006362:	2800      	cmp	r0, #0
10006364:	d038      	beq.n	100063d8 <usbd_control_xfer_cb+0xa8>
    memcpy(_ctrl_xfer.buffer, _usbd_ctrl_buf, xferred_bytes);
10006366:	0022      	movs	r2, r4
10006368:	492b      	ldr	r1, [pc, #172]	; (10006418 <usbd_control_xfer_cb+0xe8>)
1000636a:	f7fa fee3 	bl	10001134 <__wrap___aeabi_memcpy>
  _ctrl_xfer.buffer += xferred_bytes;
1000636e:	68ab      	ldr	r3, [r5, #8]
  _ctrl_xfer.total_xferred += xferred_bytes;
10006370:	89ea      	ldrh	r2, [r5, #14]
  _ctrl_xfer.buffer += xferred_bytes;
10006372:	1919      	adds	r1, r3, r4
  _ctrl_xfer.total_xferred += xferred_bytes;
10006374:	1912      	adds	r2, r2, r4
  if ( (_ctrl_xfer.request.wLength == _ctrl_xfer.total_xferred) || (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE) )
10006376:	88eb      	ldrh	r3, [r5, #6]
  _ctrl_xfer.total_xferred += xferred_bytes;
10006378:	b292      	uxth	r2, r2
1000637a:	81ea      	strh	r2, [r5, #14]
  _ctrl_xfer.buffer += xferred_bytes;
1000637c:	60a9      	str	r1, [r5, #8]
  if ( (_ctrl_xfer.request.wLength == _ctrl_xfer.total_xferred) || (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE) )
1000637e:	4293      	cmp	r3, r2
10006380:	d015      	beq.n	100063ae <usbd_control_xfer_cb+0x7e>
10006382:	2c3f      	cmp	r4, #63	; 0x3f
10006384:	d913      	bls.n	100063ae <usbd_control_xfer_cb+0x7e>
  uint16_t const xact_len = tu_min16(_ctrl_xfer.data_len - _ctrl_xfer.total_xferred, CFG_TUD_ENDPOINT0_SIZE);
10006386:	89ac      	ldrh	r4, [r5, #12]
10006388:	1aa0      	subs	r0, r4, r2
1000638a:	1c07      	adds	r7, r0, #0
1000638c:	b280      	uxth	r0, r0
1000638e:	2840      	cmp	r0, #64	; 0x40
10006390:	d82e      	bhi.n	100063f0 <usbd_control_xfer_cb+0xc0>
  if ( _ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_IN )
10006392:	782b      	ldrb	r3, [r5, #0]
10006394:	b2bf      	uxth	r7, r7
10006396:	2b7f      	cmp	r3, #127	; 0x7f
10006398:	d82c      	bhi.n	100063f4 <usbd_control_xfer_cb+0xc4>
  uint8_t ep_addr = EDPT_CTRL_OUT;
1000639a:	2100      	movs	r1, #0
  return dcd_edpt_xfer(rhport, ep_addr, xact_len ? _usbd_ctrl_buf : NULL, xact_len);
1000639c:	42a2      	cmp	r2, r4
1000639e:	d034      	beq.n	1000640a <usbd_control_xfer_cb+0xda>
100063a0:	4a1d      	ldr	r2, [pc, #116]	; (10006418 <usbd_control_xfer_cb+0xe8>)
100063a2:	003b      	movs	r3, r7
100063a4:	0030      	movs	r0, r6
100063a6:	f000 fa0d 	bl	100067c4 <dcd_edpt_xfer>
100063aa:	0007      	movs	r7, r0
100063ac:	e7cc      	b.n	10006348 <usbd_control_xfer_cb+0x18>
    if ( _ctrl_xfer.complete_cb )
100063ae:	692b      	ldr	r3, [r5, #16]
100063b0:	2b00      	cmp	r3, #0
100063b2:	d004      	beq.n	100063be <usbd_control_xfer_cb+0x8e>
      is_ok = _ctrl_xfer.complete_cb(rhport, &_ctrl_xfer.request);
100063b4:	0029      	movs	r1, r5
100063b6:	0030      	movs	r0, r6
100063b8:	4798      	blx	r3
    if ( is_ok )
100063ba:	2800      	cmp	r0, #0
100063bc:	d00e      	beq.n	100063dc <usbd_control_xfer_cb+0xac>
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
100063be:	227f      	movs	r2, #127	; 0x7f
100063c0:	2100      	movs	r1, #0
100063c2:	782b      	ldrb	r3, [r5, #0]
  return dcd_edpt_xfer(rhport, ep_addr, NULL, 0);
100063c4:	0030      	movs	r0, r6
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
100063c6:	429a      	cmp	r2, r3
100063c8:	4149      	adcs	r1, r1
  return dcd_edpt_xfer(rhport, ep_addr, NULL, 0);
100063ca:	2300      	movs	r3, #0
100063cc:	2200      	movs	r2, #0
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
100063ce:	01c9      	lsls	r1, r1, #7
  return dcd_edpt_xfer(rhport, ep_addr, NULL, 0);
100063d0:	f000 f9f8 	bl	100067c4 <dcd_edpt_xfer>
100063d4:	0007      	movs	r7, r0
100063d6:	e7b7      	b.n	10006348 <usbd_control_xfer_cb+0x18>
    TU_ASSERT(0 == xferred_bytes);
100063d8:	2700      	movs	r7, #0
100063da:	e7b5      	b.n	10006348 <usbd_control_xfer_cb+0x18>
      dcd_edpt_stall(rhport, EDPT_CTRL_OUT);
100063dc:	2100      	movs	r1, #0
100063de:	0030      	movs	r0, r6
100063e0:	f000 fa06 	bl	100067f0 <dcd_edpt_stall>
      dcd_edpt_stall(rhport, EDPT_CTRL_IN);
100063e4:	2180      	movs	r1, #128	; 0x80
100063e6:	0030      	movs	r0, r6
100063e8:	f000 fa02 	bl	100067f0 <dcd_edpt_stall>
  return true;
100063ec:	2701      	movs	r7, #1
100063ee:	e7ab      	b.n	10006348 <usbd_control_xfer_cb+0x18>
100063f0:	2740      	movs	r7, #64	; 0x40
100063f2:	e7ce      	b.n	10006392 <usbd_control_xfer_cb+0x62>
    if ( xact_len ) memcpy(_usbd_ctrl_buf, _ctrl_xfer.buffer, xact_len);
100063f4:	42a2      	cmp	r2, r4
100063f6:	d007      	beq.n	10006408 <usbd_control_xfer_cb+0xd8>
100063f8:	4c07      	ldr	r4, [pc, #28]	; (10006418 <usbd_control_xfer_cb+0xe8>)
100063fa:	003a      	movs	r2, r7
100063fc:	0020      	movs	r0, r4
100063fe:	f7fa fe99 	bl	10001134 <__wrap___aeabi_memcpy>
    ep_addr = EDPT_CTRL_IN;
10006402:	2180      	movs	r1, #128	; 0x80
  return dcd_edpt_xfer(rhport, ep_addr, xact_len ? _usbd_ctrl_buf : NULL, xact_len);
10006404:	0022      	movs	r2, r4
10006406:	e7cc      	b.n	100063a2 <usbd_control_xfer_cb+0x72>
    ep_addr = EDPT_CTRL_IN;
10006408:	2180      	movs	r1, #128	; 0x80
  return dcd_edpt_xfer(rhport, ep_addr, xact_len ? _usbd_ctrl_buf : NULL, xact_len);
1000640a:	2200      	movs	r2, #0
1000640c:	e7c9      	b.n	100063a2 <usbd_control_xfer_cb+0x72>
1000640e:	46c0      	nop			; (mov r8, r8)
10006410:	20016988 	.word	0x20016988
10006414:	10006641 	.word	0x10006641
10006418:	200169a4 	.word	0x200169a4

1000641c <dcd_rp2040_irq>:
    _hw_endpoint_clear_stall(ep);
}

static void dcd_rp2040_irq(void)
{
    uint32_t status = usb_hw->ints;
1000641c:	2398      	movs	r3, #152	; 0x98
{
1000641e:	b5f0      	push	{r4, r5, r6, r7, lr}
10006420:	4645      	mov	r5, r8
10006422:	46de      	mov	lr, fp
10006424:	4657      	mov	r7, sl
10006426:	464e      	mov	r6, r9
    uint32_t status = usb_hw->ints;
10006428:	4a42      	ldr	r2, [pc, #264]	; (10006534 <dcd_rp2040_irq+0x118>)
{
1000642a:	b5e0      	push	{r5, r6, r7, lr}
    uint32_t status = usb_hw->ints;
1000642c:	58d3      	ldr	r3, [r2, r3]
    uint32_t handled = 0;

    if (status & USB_INTS_SETUP_REQ_BITS)
1000642e:	2480      	movs	r4, #128	; 0x80
    uint32_t status = usb_hw->ints;
10006430:	4698      	mov	r8, r3
    if (status & USB_INTS_SETUP_REQ_BITS)
10006432:	001d      	movs	r5, r3
10006434:	2310      	movs	r3, #16
{
10006436:	b085      	sub	sp, #20
10006438:	9303      	str	r3, [sp, #12]
    if (status & USB_INTS_SETUP_REQ_BITS)
1000643a:	4643      	mov	r3, r8
1000643c:	0264      	lsls	r4, r4, #9
1000643e:	4025      	ands	r5, r4
10006440:	4223      	tst	r3, r4
10006442:	d014      	beq.n	1000646e <dcd_rp2040_irq+0x52>
        ep->next_pid = 1u;
10006444:	2101      	movs	r1, #1
10006446:	2039      	movs	r0, #57	; 0x39
        ep->stalled  = 0;
10006448:	2200      	movs	r2, #0
        ep->next_pid = 1u;
1000644a:	4b3b      	ldr	r3, [pc, #236]	; (10006538 <dcd_rp2040_irq+0x11c>)
    {
        handled |= USB_INTS_SETUP_REQ_BITS;
1000644c:	0025      	movs	r5, r4
        ep->next_pid = 1u;
1000644e:	5419      	strb	r1, [r3, r0]
10006450:	7159      	strb	r1, [r3, #5]
        ep->stalled  = 0;
10006452:	3147      	adds	r1, #71	; 0x47
10006454:	545a      	strb	r2, [r3, r1]
10006456:	751a      	strb	r2, [r3, #20]
        uint8_t const *setup = (uint8_t const *)&usb_dpram->setup_packet;
        // Clear stall bits and reset pid
        reset_ep0();
        // Pass setup packet to tiny usb
        dcd_event_setup_received(0, setup, true);
10006458:	2000      	movs	r0, #0
1000645a:	3201      	adds	r2, #1
1000645c:	4937      	ldr	r1, [pc, #220]	; (1000653c <dcd_rp2040_irq+0x120>)
1000645e:	f7ff fdc3 	bl	10005fe8 <dcd_event_setup_received>
        usb_hw_clear->sie_status = USB_SIE_STATUS_SETUP_REC_BITS;
10006462:	2280      	movs	r2, #128	; 0x80
10006464:	4b36      	ldr	r3, [pc, #216]	; (10006540 <dcd_rp2040_irq+0x124>)
10006466:	0292      	lsls	r2, r2, #10
10006468:	651a      	str	r2, [r3, #80]	; 0x50
1000646a:	4b36      	ldr	r3, [pc, #216]	; (10006544 <dcd_rp2040_irq+0x128>)
1000646c:	9303      	str	r3, [sp, #12]
    }

    if (status & USB_INTS_BUFF_STATUS_BITS)
1000646e:	4643      	mov	r3, r8
10006470:	06db      	lsls	r3, r3, #27
10006472:	d40d      	bmi.n	10006490 <dcd_rp2040_irq+0x74>
    {
        handled |= USB_INTS_BUFF_STATUS_BITS;
        hw_handle_buff_status();
    }

    if (status & USB_INTS_BUS_RESET_BITS)
10006474:	2380      	movs	r3, #128	; 0x80
10006476:	4642      	mov	r2, r8
10006478:	015b      	lsls	r3, r3, #5
1000647a:	421a      	tst	r2, r3
1000647c:	d138      	bne.n	100064f0 <dcd_rp2040_irq+0xd4>
#if TUD_OPT_RP2040_USB_DEVICE_ENUMERATION_FIX
        rp2040_usb_device_enumeration_fix();
#endif
    }

    if (status ^ handled)
1000647e:	4545      	cmp	r5, r8
10006480:	d152      	bne.n	10006528 <dcd_rp2040_irq+0x10c>
    {
        panic("Unhandled IRQ 0x%x\n", (uint) (status ^ handled));
    }
}
10006482:	b005      	add	sp, #20
10006484:	bcf0      	pop	{r4, r5, r6, r7}
10006486:	46bb      	mov	fp, r7
10006488:	46b2      	mov	sl, r6
1000648a:	46a9      	mov	r9, r5
1000648c:	46a0      	mov	r8, r4
1000648e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint32_t remaining_buffers = usb_hw->buf_status;
10006490:	4b28      	ldr	r3, [pc, #160]	; (10006534 <dcd_rp2040_irq+0x118>)
10006492:	6d9f      	ldr	r7, [r3, #88]	; 0x58
10006494:	469a      	mov	sl, r3
    for (uint i = 0; remaining_buffers && i < USB_MAX_ENDPOINTS * 2; i++)
10006496:	2f00      	cmp	r7, #0
10006498:	d024      	beq.n	100064e4 <dcd_rp2040_irq+0xc8>
            usb_hw_clear->buf_status = bit;
1000649a:	4b29      	ldr	r3, [pc, #164]	; (10006540 <dcd_rp2040_irq+0x124>)
    for (uint i = 0; remaining_buffers && i < USB_MAX_ENDPOINTS * 2; i++)
1000649c:	2500      	movs	r5, #0
    uint bit = 1u;
1000649e:	2401      	movs	r4, #1
            usb_hw_clear->buf_status = bit;
100064a0:	469b      	mov	fp, r3
100064a2:	e003      	b.n	100064ac <dcd_rp2040_irq+0x90>
        bit <<= 1u;
100064a4:	0064      	lsls	r4, r4, #1
    for (uint i = 0; remaining_buffers && i < USB_MAX_ENDPOINTS * 2; i++)
100064a6:	3501      	adds	r5, #1
100064a8:	2d20      	cmp	r5, #32
100064aa:	d01b      	beq.n	100064e4 <dcd_rp2040_irq+0xc8>
        if (remaining_buffers & bit)
100064ac:	4227      	tst	r7, r4
100064ae:	d0f9      	beq.n	100064a4 <dcd_rp2040_irq+0x88>
            uint __unused which = (usb_hw->buf_cpu_should_handle & bit) ? 1 : 0;
100064b0:	4653      	mov	r3, sl
100064b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
            usb_hw_clear->buf_status = bit;
100064b4:	465b      	mov	r3, fp
    return &hw_endpoints[num][in];
100064b6:	2668      	movs	r6, #104	; 0x68
100064b8:	2201      	movs	r2, #1
            usb_hw_clear->buf_status = bit;
100064ba:	659c      	str	r4, [r3, #88]	; 0x58
            struct hw_endpoint *ep = hw_endpoint_get_by_num(i >> 1u, !(i & 1u));
100064bc:	086b      	lsrs	r3, r5, #1
    return &hw_endpoints[num][in];
100064be:	435e      	muls	r6, r3
100064c0:	2334      	movs	r3, #52	; 0x34
100064c2:	4691      	mov	r9, r2
100064c4:	43aa      	bics	r2, r5
100064c6:	4353      	muls	r3, r2
100064c8:	18f6      	adds	r6, r6, r3
100064ca:	4b1b      	ldr	r3, [pc, #108]	; (10006538 <dcd_rp2040_irq+0x11c>)
100064cc:	469c      	mov	ip, r3
100064ce:	4466      	add	r6, ip
            bool done = _hw_endpoint_xfer_continue(ep);
100064d0:	0030      	movs	r0, r6
100064d2:	f000 fa3d 	bl	10006950 <_hw_endpoint_xfer_continue>
            if (done)
100064d6:	2800      	cmp	r0, #0
100064d8:	d11a      	bne.n	10006510 <dcd_rp2040_irq+0xf4>
            remaining_buffers &= ~bit;
100064da:	43a7      	bics	r7, r4
    for (uint i = 0; remaining_buffers && i < USB_MAX_ENDPOINTS * 2; i++)
100064dc:	3501      	adds	r5, #1
        bit <<= 1u;
100064de:	0064      	lsls	r4, r4, #1
    for (uint i = 0; remaining_buffers && i < USB_MAX_ENDPOINTS * 2; i++)
100064e0:	2f00      	cmp	r7, #0
100064e2:	d1e1      	bne.n	100064a8 <dcd_rp2040_irq+0x8c>
    if (status & USB_INTS_BUS_RESET_BITS)
100064e4:	2380      	movs	r3, #128	; 0x80
100064e6:	4642      	mov	r2, r8
100064e8:	015b      	lsls	r3, r3, #5
        handled |= USB_INTS_BUFF_STATUS_BITS;
100064ea:	9d03      	ldr	r5, [sp, #12]
    if (status & USB_INTS_BUS_RESET_BITS)
100064ec:	421a      	tst	r2, r3
100064ee:	d0c6      	beq.n	1000647e <dcd_rp2040_irq+0x62>
        assigned_address = 0;
100064f0:	2200      	movs	r2, #0
100064f2:	4915      	ldr	r1, [pc, #84]	; (10006548 <dcd_rp2040_irq+0x12c>)
        dcd_event_bus_signal(0, DCD_EVENT_BUS_RESET, true);
100064f4:	2000      	movs	r0, #0
        assigned_address = 0;
100064f6:	700a      	strb	r2, [r1, #0]
        usb_hw->dev_addr_ctrl = assigned_address;
100064f8:	490e      	ldr	r1, [pc, #56]	; (10006534 <dcd_rp2040_irq+0x118>)
        handled |= USB_INTS_BUS_RESET_BITS;
100064fa:	431d      	orrs	r5, r3
        usb_hw->dev_addr_ctrl = assigned_address;
100064fc:	600a      	str	r2, [r1, #0]
        dcd_event_bus_signal(0, DCD_EVENT_BUS_RESET, true);
100064fe:	3201      	adds	r2, #1
10006500:	2101      	movs	r1, #1
10006502:	f7ff fd01 	bl	10005f08 <dcd_event_bus_signal>
        usb_hw_clear->sie_status = USB_SIE_STATUS_BUS_RESET_BITS;
10006506:	2280      	movs	r2, #128	; 0x80
10006508:	4b0d      	ldr	r3, [pc, #52]	; (10006540 <dcd_rp2040_irq+0x124>)
1000650a:	0312      	lsls	r2, r2, #12
1000650c:	651a      	str	r2, [r3, #80]	; 0x50
1000650e:	e7b6      	b.n	1000647e <dcd_rp2040_irq+0x62>
                dcd_event_xfer_complete(0, ep->ep_addr, ep->len, XFER_RESULT_SUCCESS, true);
10006510:	464b      	mov	r3, r9
10006512:	69f2      	ldr	r2, [r6, #28]
10006514:	7931      	ldrb	r1, [r6, #4]
10006516:	2000      	movs	r0, #0
10006518:	9300      	str	r3, [sp, #0]
1000651a:	2300      	movs	r3, #0
1000651c:	f7ff fd8c 	bl	10006038 <dcd_event_xfer_complete>
                hw_endpoint_reset_transfer(ep);
10006520:	0030      	movs	r0, r6
10006522:	f000 f9e9 	bl	100068f8 <hw_endpoint_reset_transfer>
10006526:	e7d8      	b.n	100064da <dcd_rp2040_irq+0xbe>
        panic("Unhandled IRQ 0x%x\n", (uint) (status ^ handled));
10006528:	4641      	mov	r1, r8
1000652a:	4808      	ldr	r0, [pc, #32]	; (1000654c <dcd_rp2040_irq+0x130>)
1000652c:	4069      	eors	r1, r5
1000652e:	f7fd fa87 	bl	10003a40 <panic>
10006532:	46c0      	nop			; (mov r8, r8)
10006534:	50110000 	.word	0x50110000
10006538:	20016c64 	.word	0x20016c64
1000653c:	50100000 	.word	0x50100000
10006540:	50113000 	.word	0x50113000
10006544:	00010010 	.word	0x00010010
10006548:	20017331 	.word	0x20017331
1000654c:	1000b4a0 	.word	0x1000b4a0

10006550 <dcd_int_enable>:

    dcd_connect(rhport);
}

void dcd_int_enable(uint8_t rhport)
{
10006550:	b510      	push	{r4, lr}
    assert(rhport == 0);
    irq_set_enabled(USBCTRL_IRQ, true);
10006552:	2101      	movs	r1, #1
10006554:	2005      	movs	r0, #5
10006556:	f7fb f9bb 	bl	100018d0 <irq_set_enabled>
}
1000655a:	bd10      	pop	{r4, pc}

1000655c <dcd_set_address>:
{
    pico_trace("dcd_set_address %d %d\n", rhport, dev_addr);
    assert(rhport == 0);

    // Can't set device address in hardware until status xfer has complete
    assigned_address = dev_addr;
1000655c:	4b09      	ldr	r3, [pc, #36]	; (10006584 <dcd_set_address+0x28>)
{
1000655e:	b510      	push	{r4, lr}
        ep->next_pid = 1u;
10006560:	2201      	movs	r2, #1
    assigned_address = dev_addr;
10006562:	7019      	strb	r1, [r3, #0]
        ep->next_pid = 1u;
10006564:	2139      	movs	r1, #57	; 0x39
        ep->stalled  = 0;
10006566:	2300      	movs	r3, #0
        ep->next_pid = 1u;
10006568:	4807      	ldr	r0, [pc, #28]	; (10006588 <dcd_set_address+0x2c>)
1000656a:	5442      	strb	r2, [r0, r1]
1000656c:	7142      	strb	r2, [r0, #5]
        ep->stalled  = 0;
1000656e:	3247      	adds	r2, #71	; 0x47
10006570:	5483      	strb	r3, [r0, r2]
10006572:	7503      	strb	r3, [r0, #20]
    _hw_endpoint_xfer(ep, buffer, total_bytes, start);
10006574:	2200      	movs	r2, #0
10006576:	2100      	movs	r1, #0
10006578:	3034      	adds	r0, #52	; 0x34
1000657a:	3301      	adds	r3, #1
1000657c:	f000 fa68 	bl	10006a50 <_hw_endpoint_xfer>

    ep0_0len_status();
}
10006580:	bd10      	pop	{r4, pc}
10006582:	46c0      	nop			; (mov r8, r8)
10006584:	20017331 	.word	0x20017331
10006588:	20016c64 	.word	0x20016c64

1000658c <dcd_connect>:
// connect by enabling internal pull-up resistor on D+/D-
void dcd_connect(uint8_t rhport)
{
    pico_info("dcd_connect %d\n", rhport);
    assert(rhport == 0);
    usb_hw_set->sie_ctrl = USB_SIE_CTRL_PULLUP_EN_BITS;
1000658c:	2280      	movs	r2, #128	; 0x80
1000658e:	4b02      	ldr	r3, [pc, #8]	; (10006598 <dcd_connect+0xc>)
10006590:	0252      	lsls	r2, r2, #9
10006592:	64da      	str	r2, [r3, #76]	; 0x4c
}
10006594:	4770      	bx	lr
10006596:	46c0      	nop			; (mov r8, r8)
10006598:	50112000 	.word	0x50112000

1000659c <dcd_init>:
{
1000659c:	b570      	push	{r4, r5, r6, lr}
1000659e:	0005      	movs	r5, r0
    rp2040_usb_init();
100065a0:	f000 f982 	bl	100068a8 <rp2040_usb_init>
    irq_set_exclusive_handler(USBCTRL_IRQ, dcd_rp2040_irq);
100065a4:	2005      	movs	r0, #5
100065a6:	491c      	ldr	r1, [pc, #112]	; (10006618 <dcd_init+0x7c>)
100065a8:	f7fb f9b4 	bl	10001914 <irq_set_exclusive_handler>
    memset(hw_endpoints, 0, sizeof(hw_endpoints));
100065ac:	22d0      	movs	r2, #208	; 0xd0
100065ae:	4c1b      	ldr	r4, [pc, #108]	; (1000661c <dcd_init+0x80>)
100065b0:	2100      	movs	r1, #0
100065b2:	0020      	movs	r0, r4
100065b4:	00d2      	lsls	r2, r2, #3
100065b6:	f7fa fdb7 	bl	10001128 <__wrap_memset>
    assigned_address = 0;
100065ba:	2200      	movs	r2, #0
100065bc:	4b18      	ldr	r3, [pc, #96]	; (10006620 <dcd_init+0x84>)
    next_buffer_ptr = &usb_dpram->epx_data[0];
100065be:	4919      	ldr	r1, [pc, #100]	; (10006624 <dcd_init+0x88>)
    assigned_address = 0;
100065c0:	701a      	strb	r2, [r3, #0]
    next_buffer_ptr = &usb_dpram->epx_data[0];
100065c2:	4b19      	ldr	r3, [pc, #100]	; (10006628 <dcd_init+0x8c>)
    ep->wMaxPacketSize = wMaxPacketSize;
100065c4:	2040      	movs	r0, #64	; 0x40
    next_buffer_ptr = &usb_dpram->epx_data[0];
100065c6:	6019      	str	r1, [r3, #0]
    ep->in = in;
100065c8:	2635      	movs	r6, #53	; 0x35
    ep->rx = in == false;
100065ca:	2301      	movs	r3, #1
        ep->buffer_control = &usb_dpram->ep_buf_ctrl[num].out;
100065cc:	4917      	ldr	r1, [pc, #92]	; (1000662c <dcd_init+0x90>)
    ep->rx = in == false;
100065ce:	70e3      	strb	r3, [r4, #3]
    ep->next_pid = num == 0 ? 1u : 0u;
100065d0:	7163      	strb	r3, [r4, #5]
    ep->wMaxPacketSize = wMaxPacketSize;
100065d2:	62e0      	str	r0, [r4, #44]	; 0x2c
        ep->buffer_control = &usb_dpram->ep_buf_ctrl[num].out;
100065d4:	60e1      	str	r1, [r4, #12]
    *ep->buffer_control = 0;
100065d6:	600a      	str	r2, [r1, #0]
    ep->in = in;
100065d8:	55a3      	strb	r3, [r4, r6]
    ep->ep_addr = ep_addr;
100065da:	364c      	adds	r6, #76	; 0x4c
100065dc:	36ff      	adds	r6, #255	; 0xff
100065de:	8726      	strh	r6, [r4, #56]	; 0x38
    ep->transfer_type = transfer_type;
100065e0:	2600      	movs	r6, #0
    ep->wMaxPacketSize = wMaxPacketSize;
100065e2:	6620      	str	r0, [r4, #96]	; 0x60
    ep->transfer_type = transfer_type;
100065e4:	3024      	adds	r0, #36	; 0x24
100065e6:	5426      	strb	r6, [r4, r0]
        ep->hw_data_buf = (uint8_t*)&usb_dpram->ep0_buf_a[0];
100065e8:	4911      	ldr	r1, [pc, #68]	; (10006630 <dcd_init+0x94>)
        ep->buffer_control = &usb_dpram->ep_buf_ctrl[num].in;
100065ea:	4812      	ldr	r0, [pc, #72]	; (10006634 <dcd_init+0x98>)
        ep->endpoint_control = NULL;
100065ec:	60a2      	str	r2, [r4, #8]
        ep->hw_data_buf = (uint8_t*)&usb_dpram->ep0_buf_a[0];
100065ee:	6121      	str	r1, [r4, #16]
    ep->configured = true;
100065f0:	7023      	strb	r3, [r4, #0]
    ep->num = num;
100065f2:	86e2      	strh	r2, [r4, #54]	; 0x36
        ep->buffer_control = &usb_dpram->ep_buf_ctrl[num].in;
100065f4:	6420      	str	r0, [r4, #64]	; 0x40
    *ep->buffer_control = 0;
100065f6:	6002      	str	r2, [r0, #0]
        ep->endpoint_control = NULL;
100065f8:	63e2      	str	r2, [r4, #60]	; 0x3c
    ep->configured = true;
100065fa:	3234      	adds	r2, #52	; 0x34
100065fc:	54a3      	strb	r3, [r4, r2]
    usb_hw->main_ctrl = USB_MAIN_CTRL_CONTROLLER_EN_BITS;
100065fe:	4a0e      	ldr	r2, [pc, #56]	; (10006638 <dcd_init+0x9c>)
        ep->hw_data_buf = (uint8_t*)&usb_dpram->ep0_buf_a[0];
10006600:	6461      	str	r1, [r4, #68]	; 0x44
    usb_hw->main_ctrl = USB_MAIN_CTRL_CONTROLLER_EN_BITS;
10006602:	6413      	str	r3, [r2, #64]	; 0x40
    usb_hw->sie_ctrl = USB_SIE_CTRL_EP0_INT_1BUF_BITS; 
10006604:	2380      	movs	r3, #128	; 0x80
10006606:	059b      	lsls	r3, r3, #22
10006608:	64d3      	str	r3, [r2, #76]	; 0x4c
    usb_hw->inte     = USB_INTS_BUFF_STATUS_BITS | USB_INTS_BUS_RESET_BITS | USB_INTS_SETUP_REQ_BITS;
1000660a:	2390      	movs	r3, #144	; 0x90
1000660c:	490b      	ldr	r1, [pc, #44]	; (1000663c <dcd_init+0xa0>)
    dcd_connect(rhport);
1000660e:	0028      	movs	r0, r5
    usb_hw->inte     = USB_INTS_BUFF_STATUS_BITS | USB_INTS_BUS_RESET_BITS | USB_INTS_SETUP_REQ_BITS;
10006610:	50d1      	str	r1, [r2, r3]
    dcd_connect(rhport);
10006612:	f7ff ffbb 	bl	1000658c <dcd_connect>
}
10006616:	bd70      	pop	{r4, r5, r6, pc}
10006618:	1000641d 	.word	0x1000641d
1000661c:	20016c64 	.word	0x20016c64
10006620:	20017331 	.word	0x20017331
10006624:	50100180 	.word	0x50100180
10006628:	200172e8 	.word	0x200172e8
1000662c:	50100084 	.word	0x50100084
10006630:	50100100 	.word	0x50100100
10006634:	50100080 	.word	0x50100080
10006638:	50110000 	.word	0x50110000
1000663c:	00011010 	.word	0x00011010

10006640 <dcd_edpt0_status_complete>:
void dcd_edpt0_status_complete(uint8_t rhport, tusb_control_request_t const * request)
{
    pico_trace("dcd_edpt0_status_complete %d\n", rhport);
    assert(rhport == 0);

    if (request->bmRequestType_bit.recipient == TUSB_REQ_RCPT_DEVICE &&
10006640:	780b      	ldrb	r3, [r1, #0]
10006642:	065b      	lsls	r3, r3, #25
10006644:	d102      	bne.n	1000664c <dcd_edpt0_status_complete+0xc>
        request->bmRequestType_bit.type == TUSB_REQ_TYPE_STANDARD &&
10006646:	784b      	ldrb	r3, [r1, #1]
10006648:	2b05      	cmp	r3, #5
1000664a:	d009      	beq.n	10006660 <dcd_edpt0_status_complete+0x20>
        ep->next_pid = 1u;
1000664c:	2101      	movs	r1, #1
1000664e:	2039      	movs	r0, #57	; 0x39
        ep->stalled  = 0;
10006650:	2200      	movs	r2, #0
        ep->next_pid = 1u;
10006652:	4b06      	ldr	r3, [pc, #24]	; (1000666c <dcd_edpt0_status_complete+0x2c>)
10006654:	7159      	strb	r1, [r3, #5]
10006656:	5419      	strb	r1, [r3, r0]
        ep->stalled  = 0;
10006658:	3147      	adds	r1, #71	; 0x47
1000665a:	751a      	strb	r2, [r3, #20]
1000665c:	545a      	strb	r2, [r3, r1]
        pico_trace("Set HW address %d\n", assigned_address);
        usb_hw->dev_addr_ctrl = assigned_address;
    }

    reset_ep0();
}
1000665e:	4770      	bx	lr
        usb_hw->dev_addr_ctrl = assigned_address;
10006660:	4b03      	ldr	r3, [pc, #12]	; (10006670 <dcd_edpt0_status_complete+0x30>)
10006662:	781a      	ldrb	r2, [r3, #0]
10006664:	4b03      	ldr	r3, [pc, #12]	; (10006674 <dcd_edpt0_status_complete+0x34>)
10006666:	601a      	str	r2, [r3, #0]
10006668:	e7f0      	b.n	1000664c <dcd_edpt0_status_complete+0xc>
1000666a:	46c0      	nop			; (mov r8, r8)
1000666c:	20016c64 	.word	0x20016c64
10006670:	20017331 	.word	0x20017331
10006674:	50110000 	.word	0x50110000

10006678 <dcd_edpt_open>:

bool dcd_edpt_open (uint8_t rhport, tusb_desc_endpoint_t const * desc_edpt)
{
10006678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000667a:	4647      	mov	r7, r8
1000667c:	46ce      	mov	lr, r9
    pico_info("dcd_edpt_open %d %02x\n", rhport, desc_edpt->bEndpointAddress);
    assert(rhport == 0);
    hw_endpoint_init(desc_edpt->bEndpointAddress, desc_edpt->wMaxPacketSize.size, desc_edpt->bmAttributes.xfer);
1000667e:	2307      	movs	r3, #7
{
10006680:	b580      	push	{r7, lr}
    hw_endpoint_init(desc_edpt->bEndpointAddress, desc_edpt->wMaxPacketSize.size, desc_edpt->bmAttributes.xfer);
10006682:	7948      	ldrb	r0, [r1, #5]
10006684:	78cc      	ldrb	r4, [r1, #3]
10006686:	790a      	ldrb	r2, [r1, #4]
10006688:	4003      	ands	r3, r0
1000668a:	788f      	ldrb	r7, [r1, #2]
1000668c:	07a4      	lsls	r4, r4, #30
1000668e:	021b      	lsls	r3, r3, #8
10006690:	4313      	orrs	r3, r2
10006692:	0fa2      	lsrs	r2, r4, #30
10006694:	4694      	mov	ip, r2
10006696:	0014      	movs	r4, r2
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
10006698:	207f      	movs	r0, #127	; 0x7f
1000669a:	b27a      	sxtb	r2, r7
1000669c:	4691      	mov	r9, r2
    ep->ep_addr = ep_addr;
1000669e:	2168      	movs	r1, #104	; 0x68
100066a0:	2234      	movs	r2, #52	; 0x34
100066a2:	4038      	ands	r0, r7
    return &hw_endpoints[num][in];
100066a4:	09fe      	lsrs	r6, r7, #7
    ep->ep_addr = ep_addr;
100066a6:	4341      	muls	r1, r0
100066a8:	4372      	muls	r2, r6
100066aa:	1852      	adds	r2, r2, r1
    ep->rx = in == false;
100066ac:	4649      	mov	r1, r9
100066ae:	43c9      	mvns	r1, r1
    ep->ep_addr = ep_addr;
100066b0:	4d3c      	ldr	r5, [pc, #240]	; (100067a4 <dcd_edpt_open+0x12c>)
    ep->rx = in == false;
100066b2:	0fc9      	lsrs	r1, r1, #31
    ep->ep_addr = ep_addr;
100066b4:	18aa      	adds	r2, r5, r2
    ep->rx = in == false;
100066b6:	70d1      	strb	r1, [r2, #3]
    ep->next_pid = num == 0 ? 1u : 0u;
100066b8:	4241      	negs	r1, r0
100066ba:	4141      	adcs	r1, r0
    ep->ep_addr = ep_addr;
100066bc:	7117      	strb	r7, [r2, #4]
    ep->in = in;
100066be:	7056      	strb	r6, [r2, #1]
    ep->num = num;
100066c0:	7090      	strb	r0, [r2, #2]
    ep->next_pid = num == 0 ? 1u : 0u;
100066c2:	7151      	strb	r1, [r2, #5]
    if (transfer_type == TUSB_XFER_ISOCHRONOUS)
100066c4:	2c01      	cmp	r4, #1
100066c6:	d05f      	beq.n	10006788 <dcd_edpt_open+0x110>
        if (wMaxPacketSize > USB_MAX_PACKET_SIZE)
100066c8:	2b40      	cmp	r3, #64	; 0x40
100066ca:	d861      	bhi.n	10006790 <dcd_edpt_open+0x118>
    ep->wMaxPacketSize = wMaxPacketSize;
100066cc:	2234      	movs	r2, #52	; 0x34
100066ce:	2168      	movs	r1, #104	; 0x68
100066d0:	4372      	muls	r2, r6
100066d2:	4341      	muls	r1, r0
100066d4:	1852      	adds	r2, r2, r1
100066d6:	18aa      	adds	r2, r5, r2
    ep->transfer_type = transfer_type;
100066d8:	0011      	movs	r1, r2
100066da:	4667      	mov	r7, ip
100066dc:	3130      	adds	r1, #48	; 0x30
100066de:	700f      	strb	r7, [r1, #0]
    if (ep->in)
100066e0:	4649      	mov	r1, r9
    ep->wMaxPacketSize = wMaxPacketSize;
100066e2:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ep->in)
100066e4:	2900      	cmp	r1, #0
100066e6:	db3e      	blt.n	10006766 <dcd_edpt_open+0xee>
        ep->buffer_control = &usb_dpram->ep_buf_ctrl[num].out;
100066e8:	4f2f      	ldr	r7, [pc, #188]	; (100067a8 <dcd_edpt_open+0x130>)
100066ea:	00c1      	lsls	r1, r0, #3
100066ec:	46bc      	mov	ip, r7
    *ep->buffer_control = 0;
100066ee:	2700      	movs	r7, #0
        ep->buffer_control = &usb_dpram->ep_buf_ctrl[num].out;
100066f0:	4461      	add	r1, ip
100066f2:	60d1      	str	r1, [r2, #12]
    *ep->buffer_control = 0;
100066f4:	600f      	str	r7, [r1, #0]
    if (ep->num == 0)
100066f6:	2800      	cmp	r0, #0
100066f8:	d03e      	beq.n	10006778 <dcd_edpt_open+0x100>
            ep->endpoint_control = &usb_dpram->ep_ctrl[num-1].out;
100066fa:	4f2c      	ldr	r7, [pc, #176]	; (100067ac <dcd_edpt_open+0x134>)
100066fc:	00c1      	lsls	r1, r0, #3
100066fe:	46bc      	mov	ip, r7
10006700:	4461      	add	r1, ip
10006702:	6091      	str	r1, [r2, #8]
    ep->hw_data_buf = next_buffer_ptr;
10006704:	2768      	movs	r7, #104	; 0x68
10006706:	4a2a      	ldr	r2, [pc, #168]	; (100067b0 <dcd_edpt_open+0x138>)
10006708:	4347      	muls	r7, r0
1000670a:	6811      	ldr	r1, [r2, #0]
1000670c:	4690      	mov	r8, r2
1000670e:	2234      	movs	r2, #52	; 0x34
10006710:	46bc      	mov	ip, r7
10006712:	4372      	muls	r2, r6
10006714:	4462      	add	r2, ip
10006716:	18aa      	adds	r2, r5, r2
10006718:	6111      	str	r1, [r2, #16]
    next_buffer_ptr += size;
1000671a:	2b40      	cmp	r3, #64	; 0x40
1000671c:	d200      	bcs.n	10006720 <dcd_edpt_open+0xa8>
1000671e:	2340      	movs	r3, #64	; 0x40
    if ((uintptr_t)next_buffer_ptr & 0b111111u)
10006720:	223f      	movs	r2, #63	; 0x3f
    next_buffer_ptr += size;
10006722:	18cb      	adds	r3, r1, r3
    if ((uintptr_t)next_buffer_ptr & 0b111111u)
10006724:	4213      	tst	r3, r2
10006726:	d001      	beq.n	1000672c <dcd_edpt_open+0xb4>
        fixptr &= ~0b111111u;
10006728:	4393      	bics	r3, r2
        fixptr += 64;
1000672a:	3340      	adds	r3, #64	; 0x40
        next_buffer_ptr = (uint8_t*)fixptr;
1000672c:	4642      	mov	r2, r8
1000672e:	6013      	str	r3, [r2, #0]
}

static inline uintptr_t hw_data_offset(uint8_t *buf)
{
    // Remove usb base from buffer pointer
    return (uintptr_t)buf ^ (uintptr_t)usb_dpram;
10006730:	4b20      	ldr	r3, [pc, #128]	; (100067b4 <dcd_edpt_open+0x13c>)
    *ep->endpoint_control = reg;
10006732:	2268      	movs	r2, #104	; 0x68
10006734:	4059      	eors	r1, r3
10006736:	2334      	movs	r3, #52	; 0x34
                  | (ep->transfer_type << EP_CTRL_BUFFER_TYPE_LSB)
10006738:	06a4      	lsls	r4, r4, #26
                  | dpram_offset;
1000673a:	430c      	orrs	r4, r1
    uint32_t reg =  EP_CTRL_ENABLE_BITS
1000673c:	21a0      	movs	r1, #160	; 0xa0
    *ep->endpoint_control = reg;
1000673e:	4373      	muls	r3, r6
10006740:	4342      	muls	r2, r0
10006742:	189b      	adds	r3, r3, r2
10006744:	18eb      	adds	r3, r5, r3
10006746:	689b      	ldr	r3, [r3, #8]
    uint32_t reg =  EP_CTRL_ENABLE_BITS
10006748:	0609      	lsls	r1, r1, #24
1000674a:	430c      	orrs	r4, r1
    *ep->endpoint_control = reg;
1000674c:	601c      	str	r4, [r3, #0]
    ep->configured = true;
1000674e:	2334      	movs	r3, #52	; 0x34
10006750:	435e      	muls	r6, r3
10006752:	3334      	adds	r3, #52	; 0x34
10006754:	4358      	muls	r0, r3
10006756:	3b67      	subs	r3, #103	; 0x67
10006758:	1836      	adds	r6, r6, r0
1000675a:	55ab      	strb	r3, [r5, r6]
    return true;
}
1000675c:	2001      	movs	r0, #1
1000675e:	bcc0      	pop	{r6, r7}
10006760:	46b9      	mov	r9, r7
10006762:	46b0      	mov	r8, r6
10006764:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ep->buffer_control = &usb_dpram->ep_buf_ctrl[num].in;
10006766:	4f14      	ldr	r7, [pc, #80]	; (100067b8 <dcd_edpt_open+0x140>)
10006768:	00c1      	lsls	r1, r0, #3
1000676a:	46bc      	mov	ip, r7
    *ep->buffer_control = 0;
1000676c:	2700      	movs	r7, #0
        ep->buffer_control = &usb_dpram->ep_buf_ctrl[num].in;
1000676e:	4461      	add	r1, ip
10006770:	60d1      	str	r1, [r2, #12]
    *ep->buffer_control = 0;
10006772:	600f      	str	r7, [r1, #0]
    if (ep->num == 0)
10006774:	2800      	cmp	r0, #0
10006776:	d10f      	bne.n	10006798 <dcd_edpt_open+0x120>
        ep->endpoint_control = NULL;
10006778:	2334      	movs	r3, #52	; 0x34
1000677a:	2200      	movs	r2, #0
1000677c:	4373      	muls	r3, r6
1000677e:	18eb      	adds	r3, r5, r3
10006780:	609a      	str	r2, [r3, #8]
        ep->hw_data_buf = (uint8_t*)&usb_dpram->ep0_buf_a[0];
10006782:	4a0e      	ldr	r2, [pc, #56]	; (100067bc <dcd_edpt_open+0x144>)
10006784:	611a      	str	r2, [r3, #16]
10006786:	e7e2      	b.n	1000674e <dcd_edpt_open+0xd6>
        if (wMaxPacketSize > USB_MAX_ISO_PACKET_SIZE)
10006788:	2280      	movs	r2, #128	; 0x80
1000678a:	00d2      	lsls	r2, r2, #3
1000678c:	4293      	cmp	r3, r2
1000678e:	d39d      	bcc.n	100066cc <dcd_edpt_open+0x54>
            panic("Isochronous wMaxPacketSize %d too large", wMaxPacketSize);
10006790:	0019      	movs	r1, r3
10006792:	480b      	ldr	r0, [pc, #44]	; (100067c0 <dcd_edpt_open+0x148>)
10006794:	f7fd f954 	bl	10003a40 <panic>
            ep->endpoint_control = &usb_dpram->ep_ctrl[num-1].in;
10006798:	4f06      	ldr	r7, [pc, #24]	; (100067b4 <dcd_edpt_open+0x13c>)
1000679a:	00c1      	lsls	r1, r0, #3
1000679c:	46bc      	mov	ip, r7
1000679e:	4461      	add	r1, ip
100067a0:	6091      	str	r1, [r2, #8]
100067a2:	e7af      	b.n	10006704 <dcd_edpt_open+0x8c>
100067a4:	20016c64 	.word	0x20016c64
100067a8:	50100084 	.word	0x50100084
100067ac:	50100004 	.word	0x50100004
100067b0:	200172e8 	.word	0x200172e8
100067b4:	50100000 	.word	0x50100000
100067b8:	50100080 	.word	0x50100080
100067bc:	50100100 	.word	0x50100100
100067c0:	1000b4b4 	.word	0x1000b4b4

100067c4 <dcd_edpt_xfer>:

bool dcd_edpt_xfer(uint8_t rhport, uint8_t ep_addr, uint8_t * buffer, uint16_t total_bytes)
{
100067c4:	b510      	push	{r4, lr}
100067c6:	000c      	movs	r4, r1
    return &hw_endpoints[num][in];
100067c8:	2034      	movs	r0, #52	; 0x34
{
100067ca:	0011      	movs	r1, r2
100067cc:	001a      	movs	r2, r3
    return &hw_endpoints[num][in];
100067ce:	09e3      	lsrs	r3, r4, #7
100067d0:	4358      	muls	r0, r3
100067d2:	237f      	movs	r3, #127	; 0x7f
100067d4:	4023      	ands	r3, r4
100067d6:	2468      	movs	r4, #104	; 0x68
100067d8:	435c      	muls	r4, r3
100067da:	4b04      	ldr	r3, [pc, #16]	; (100067ec <dcd_edpt_xfer+0x28>)
100067dc:	1900      	adds	r0, r0, r4
100067de:	18c0      	adds	r0, r0, r3
    _hw_endpoint_xfer(ep, buffer, total_bytes, start);
100067e0:	2301      	movs	r3, #1
100067e2:	f000 f935 	bl	10006a50 <_hw_endpoint_xfer>
    assert(rhport == 0);
    // True means start new xfer
    hw_endpoint_xfer(ep_addr, buffer, total_bytes, true);
    return true;
}
100067e6:	2001      	movs	r0, #1
100067e8:	bd10      	pop	{r4, pc}
100067ea:	46c0      	nop			; (mov r8, r8)
100067ec:	20016c64 	.word	0x20016c64

100067f0 <dcd_edpt_stall>:

void dcd_edpt_stall (uint8_t rhport, uint8_t ep_addr)
{
100067f0:	b570      	push	{r4, r5, r6, lr}
100067f2:	257f      	movs	r5, #127	; 0x7f
    return &hw_endpoints[num][in];
100067f4:	2034      	movs	r0, #52	; 0x34
100067f6:	2368      	movs	r3, #104	; 0x68
100067f8:	400d      	ands	r5, r1
    uint8_t in = (ep_addr & TUSB_DIR_IN_MASK) ? 1 : 0;
100067fa:	09cc      	lsrs	r4, r1, #7
    return &hw_endpoints[num][in];
100067fc:	436b      	muls	r3, r5
100067fe:	4360      	muls	r0, r4
10006800:	4e0c      	ldr	r6, [pc, #48]	; (10006834 <dcd_edpt_stall+0x44>)
10006802:	18c0      	adds	r0, r0, r3
10006804:	1830      	adds	r0, r6, r0
    if (ep->num == 0)
10006806:	7883      	ldrb	r3, [r0, #2]
10006808:	2b00      	cmp	r3, #0
1000680a:	d105      	bne.n	10006818 <dcd_edpt_stall+0x28>
        usb_hw_set->ep_stall_arm = ep->in ? USB_EP_STALL_ARM_EP0_IN_BITS : USB_EP_STALL_ARM_EP0_OUT_BITS;
1000680c:	7843      	ldrb	r3, [r0, #1]
1000680e:	425a      	negs	r2, r3
10006810:	4153      	adcs	r3, r2
10006812:	4a09      	ldr	r2, [pc, #36]	; (10006838 <dcd_edpt_stall+0x48>)
10006814:	3301      	adds	r3, #1
10006816:	6693      	str	r3, [r2, #104]	; 0x68
    return _hw_endpoint_buffer_control_update32(ep, ~value, value);
10006818:	2280      	movs	r2, #128	; 0x80
1000681a:	4908      	ldr	r1, [pc, #32]	; (1000683c <dcd_edpt_stall+0x4c>)
1000681c:	0112      	lsls	r2, r2, #4
1000681e:	f000 f875 	bl	1000690c <_hw_endpoint_buffer_control_update32>
    ep->stalled = true;
10006822:	2134      	movs	r1, #52	; 0x34
10006824:	2301      	movs	r3, #1
10006826:	434c      	muls	r4, r1
10006828:	3134      	adds	r1, #52	; 0x34
1000682a:	434d      	muls	r5, r1
1000682c:	1964      	adds	r4, r4, r5
1000682e:	1934      	adds	r4, r6, r4
10006830:	7523      	strb	r3, [r4, #20]
    pico_trace("dcd_edpt_stall %d %02x\n", rhport, ep_addr);
    assert(rhport == 0);
    hw_endpoint_stall(ep_addr);
}
10006832:	bd70      	pop	{r4, r5, r6, pc}
10006834:	20016c64 	.word	0x20016c64
10006838:	50112000 	.word	0x50112000
1000683c:	fffff7ff 	.word	0xfffff7ff

10006840 <dcd_edpt_clear_stall>:

void dcd_edpt_clear_stall (uint8_t rhport, uint8_t ep_addr)
{
10006840:	b570      	push	{r4, r5, r6, lr}
10006842:	257f      	movs	r5, #127	; 0x7f
    return &hw_endpoints[num][in];
10006844:	2034      	movs	r0, #52	; 0x34
10006846:	2368      	movs	r3, #104	; 0x68
10006848:	400d      	ands	r5, r1
    uint8_t in = (ep_addr & TUSB_DIR_IN_MASK) ? 1 : 0;
1000684a:	09cc      	lsrs	r4, r1, #7
    return &hw_endpoints[num][in];
1000684c:	436b      	muls	r3, r5
1000684e:	4360      	muls	r0, r4
10006850:	4e0c      	ldr	r6, [pc, #48]	; (10006884 <dcd_edpt_clear_stall+0x44>)
10006852:	18c0      	adds	r0, r0, r3
10006854:	1830      	adds	r0, r6, r0
    if (ep->num == 0)
10006856:	7883      	ldrb	r3, [r0, #2]
10006858:	2b00      	cmp	r3, #0
1000685a:	d105      	bne.n	10006868 <dcd_edpt_clear_stall+0x28>
        usb_hw_clear->ep_stall_arm = ep->in ? USB_EP_STALL_ARM_EP0_IN_BITS : USB_EP_STALL_ARM_EP0_OUT_BITS;
1000685c:	7843      	ldrb	r3, [r0, #1]
1000685e:	425a      	negs	r2, r3
10006860:	4153      	adcs	r3, r2
10006862:	4a09      	ldr	r2, [pc, #36]	; (10006888 <dcd_edpt_clear_stall+0x48>)
10006864:	3301      	adds	r3, #1
10006866:	6693      	str	r3, [r2, #104]	; 0x68
    return _hw_endpoint_buffer_control_update32(ep, ~value, 0);
10006868:	2200      	movs	r2, #0
1000686a:	4908      	ldr	r1, [pc, #32]	; (1000688c <dcd_edpt_clear_stall+0x4c>)
1000686c:	f000 f84e 	bl	1000690c <_hw_endpoint_buffer_control_update32>
    ep->stalled = false;
10006870:	2134      	movs	r1, #52	; 0x34
10006872:	2300      	movs	r3, #0
10006874:	434c      	muls	r4, r1
10006876:	3134      	adds	r1, #52	; 0x34
10006878:	434d      	muls	r5, r1
1000687a:	1964      	adds	r4, r4, r5
1000687c:	1934      	adds	r4, r6, r4
1000687e:	7523      	strb	r3, [r4, #20]
    pico_trace("dcd_edpt_clear_stall %d %02x\n", rhport, ep_addr);
    assert(rhport == 0);
    hw_endpoint_clear_stall(ep_addr);
}
10006880:	bd70      	pop	{r4, r5, r6, pc}
10006882:	46c0      	nop			; (mov r8, r8)
10006884:	20016c64 	.word	0x20016c64
10006888:	50113000 	.word	0x50113000
1000688c:	fffff7ff 	.word	0xfffff7ff

10006890 <_hw_endpoint_buffer_control_update32.part.0.isra.0>:
    }
    if (or_mask) {
        value |= or_mask;
        if (or_mask & USB_BUF_CTRL_AVAIL) {
            if (*ep->buffer_control & USB_BUF_CTRL_AVAIL) {
                panic("ep %d %s was already available", ep->num, ep_dir_string[ep->in]);
10006890:	4b03      	ldr	r3, [pc, #12]	; (100068a0 <_hw_endpoint_buffer_control_update32.part.0.isra.0+0x10>)
10006892:	0080      	lsls	r0, r0, #2
10006894:	58c2      	ldr	r2, [r0, r3]
void _hw_endpoint_buffer_control_update32(struct hw_endpoint *ep, uint32_t and_mask, uint32_t or_mask) {
10006896:	b510      	push	{r4, lr}
                panic("ep %d %s was already available", ep->num, ep_dir_string[ep->in]);
10006898:	4802      	ldr	r0, [pc, #8]	; (100068a4 <_hw_endpoint_buffer_control_update32.part.0.isra.0+0x14>)
1000689a:	f7fd f8d1 	bl	10003a40 <panic>
1000689e:	46c0      	nop			; (mov r8, r8)
100068a0:	20002750 	.word	0x20002750
100068a4:	1000b4dc 	.word	0x1000b4dc

100068a8 <rp2040_usb_init>:
100068a8:	2280      	movs	r2, #128	; 0x80
100068aa:	4b0e      	ldr	r3, [pc, #56]	; (100068e4 <rp2040_usb_init+0x3c>)
100068ac:	0452      	lsls	r2, r2, #17
{
100068ae:	b510      	push	{r4, lr}
100068b0:	601a      	str	r2, [r3, #0]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
100068b2:	4b0d      	ldr	r3, [pc, #52]	; (100068e8 <rp2040_usb_init+0x40>)
100068b4:	490d      	ldr	r1, [pc, #52]	; (100068ec <rp2040_usb_init+0x44>)
100068b6:	601a      	str	r2, [r3, #0]
100068b8:	0010      	movs	r0, r2
100068ba:	688b      	ldr	r3, [r1, #8]
100068bc:	4398      	bics	r0, r3
100068be:	d1fb      	bne.n	100068b8 <rp2040_usb_init+0x10>
    memset(usb_hw, 0, sizeof(*usb_hw));
100068c0:	4c0b      	ldr	r4, [pc, #44]	; (100068f0 <rp2040_usb_init+0x48>)
100068c2:	229c      	movs	r2, #156	; 0x9c
100068c4:	2100      	movs	r1, #0
100068c6:	0020      	movs	r0, r4
100068c8:	f7fa fc2e 	bl	10001128 <__wrap_memset>
    memset(usb_dpram, 0, sizeof(*usb_dpram));
100068cc:	2280      	movs	r2, #128	; 0x80
100068ce:	2100      	movs	r1, #0
100068d0:	0152      	lsls	r2, r2, #5
100068d2:	4808      	ldr	r0, [pc, #32]	; (100068f4 <rp2040_usb_init+0x4c>)
100068d4:	f7fa fc28 	bl	10001128 <__wrap_memset>
    usb_hw->muxing    = USB_USB_MUXING_TO_PHY_BITS    | USB_USB_MUXING_SOFTCON_BITS;
100068d8:	2309      	movs	r3, #9
100068da:	6763      	str	r3, [r4, #116]	; 0x74
    usb_hw->pwr       = USB_USB_PWR_VBUS_DETECT_BITS  | USB_USB_PWR_VBUS_DETECT_OVERRIDE_EN_BITS;
100068dc:	3303      	adds	r3, #3
100068de:	67a3      	str	r3, [r4, #120]	; 0x78
}
100068e0:	bd10      	pop	{r4, pc}
100068e2:	46c0      	nop			; (mov r8, r8)
100068e4:	4000e000 	.word	0x4000e000
100068e8:	4000f000 	.word	0x4000f000
100068ec:	4000c000 	.word	0x4000c000
100068f0:	50110000 	.word	0x50110000
100068f4:	50100000 	.word	0x50100000

100068f8 <hw_endpoint_reset_transfer>:
    ep->stalled = false;
100068f8:	2300      	movs	r3, #0
    ep->sent_setup = false;
100068fa:	2100      	movs	r1, #0
100068fc:	2232      	movs	r2, #50	; 0x32
    ep->stalled = false;
100068fe:	8283      	strh	r3, [r0, #20]
    ep->sent_setup = false;
10006900:	5481      	strb	r1, [r0, r2]
    ep->total_len = 0;
10006902:	6183      	str	r3, [r0, #24]
    ep->len = 0;
10006904:	61c3      	str	r3, [r0, #28]
    ep->transfer_size = 0;
10006906:	6203      	str	r3, [r0, #32]
    ep->user_buf = 0;
10006908:	6283      	str	r3, [r0, #40]	; 0x28
}
1000690a:	4770      	bx	lr

1000690c <_hw_endpoint_buffer_control_update32>:
void _hw_endpoint_buffer_control_update32(struct hw_endpoint *ep, uint32_t and_mask, uint32_t or_mask) {
1000690c:	b510      	push	{r4, lr}
        value = *ep->buffer_control & and_mask;
1000690e:	68c3      	ldr	r3, [r0, #12]
    if (and_mask) {
10006910:	2900      	cmp	r1, #0
10006912:	d001      	beq.n	10006918 <_hw_endpoint_buffer_control_update32+0xc>
        value = *ep->buffer_control & and_mask;
10006914:	681c      	ldr	r4, [r3, #0]
10006916:	4021      	ands	r1, r4
    if (or_mask) {
10006918:	2a00      	cmp	r2, #0
1000691a:	d011      	beq.n	10006940 <_hw_endpoint_buffer_control_update32+0x34>
        if (or_mask & USB_BUF_CTRL_AVAIL) {
1000691c:	2480      	movs	r4, #128	; 0x80
1000691e:	00e4      	lsls	r4, r4, #3
        value |= or_mask;
10006920:	4311      	orrs	r1, r2
        if (or_mask & USB_BUF_CTRL_AVAIL) {
10006922:	4222      	tst	r2, r4
10006924:	d00c      	beq.n	10006940 <_hw_endpoint_buffer_control_update32+0x34>
            if (*ep->buffer_control & USB_BUF_CTRL_AVAIL) {
10006926:	681a      	ldr	r2, [r3, #0]
10006928:	4222      	tst	r2, r4
1000692a:	d10b      	bne.n	10006944 <_hw_endpoint_buffer_control_update32+0x38>
            }
            *ep->buffer_control = value & ~USB_BUF_CTRL_AVAIL;
1000692c:	4a07      	ldr	r2, [pc, #28]	; (1000694c <_hw_endpoint_buffer_control_update32+0x40>)
1000692e:	400a      	ands	r2, r1
10006930:	601a      	str	r2, [r3, #0]
            // 12 cycle delay.. (should be good for 48*12Mhz = 576Mhz)
            // Don't need delay in host mode as host is in charge
#ifndef RP2040_USB_HOST_MODE
            __asm volatile (
10006932:	e7ff      	b.n	10006934 <_hw_endpoint_buffer_control_update32+0x28>
10006934:	e7ff      	b.n	10006936 <_hw_endpoint_buffer_control_update32+0x2a>
10006936:	e7ff      	b.n	10006938 <_hw_endpoint_buffer_control_update32+0x2c>
10006938:	e7ff      	b.n	1000693a <_hw_endpoint_buffer_control_update32+0x2e>
1000693a:	e7ff      	b.n	1000693c <_hw_endpoint_buffer_control_update32+0x30>
1000693c:	e7ff      	b.n	1000693e <_hw_endpoint_buffer_control_update32+0x32>
                    "1:\n"
                    : : : "memory");
#endif
        }
    }
    *ep->buffer_control = value;
1000693e:	68c3      	ldr	r3, [r0, #12]
10006940:	6019      	str	r1, [r3, #0]
}
10006942:	bd10      	pop	{r4, pc}
10006944:	7881      	ldrb	r1, [r0, #2]
10006946:	7840      	ldrb	r0, [r0, #1]
10006948:	f7ff ffa2 	bl	10006890 <_hw_endpoint_buffer_control_update32.part.0.isra.0>
1000694c:	fffffbff 	.word	0xfffffbff

10006950 <_hw_endpoint_xfer_continue>:
    }
}

// Returns true if transfer is complete
bool _hw_endpoint_xfer_continue(struct hw_endpoint *ep)
{
10006950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _hw_endpoint_lock_update(ep, 1);
    // Part way through a transfer
    if (!ep->active)
10006952:	7d46      	ldrb	r6, [r0, #21]
{
10006954:	0004      	movs	r4, r0
    if (!ep->active)
10006956:	2e00      	cmp	r6, #0
10006958:	d100      	bne.n	1000695c <_hw_endpoint_xfer_continue+0xc>
1000695a:	e067      	b.n	10006a2c <_hw_endpoint_xfer_continue+0xdc>
    return *ep->buffer_control;
1000695c:	68c3      	ldr	r3, [r0, #12]
    if (!ep->rx)
1000695e:	78c0      	ldrb	r0, [r0, #3]
10006960:	681d      	ldr	r5, [r3, #0]
    uint transferred_bytes = buf_ctrl & USB_BUF_CTRL_LEN_MASK;
10006962:	05ad      	lsls	r5, r5, #22
10006964:	0dad      	lsrs	r5, r5, #22
    if (!ep->rx)
10006966:	2800      	cmp	r0, #0
10006968:	d143      	bne.n	100069f2 <_hw_endpoint_xfer_continue+0xa2>
        ep->len += transferred_bytes;
1000696a:	69e3      	ldr	r3, [r4, #28]
1000696c:	18e9      	adds	r1, r5, r3
1000696e:	61e1      	str	r1, [r4, #28]

    // Update EP struct from hardware state
    _hw_endpoint_xfer_sync(ep);

    // Now we have synced our state with the hardware. Is there more data to transfer?
    uint remaining_bytes = ep->total_len - ep->len;
10006970:	69a2      	ldr	r2, [r4, #24]
10006972:	1a55      	subs	r5, r2, r1
    ep->transfer_size = remaining_bytes > 64 ? 64 : remaining_bytes;
10006974:	2d40      	cmp	r5, #64	; 0x40
10006976:	d82e      	bhi.n	100069d6 <_hw_endpoint_xfer_continue+0x86>
    ep->last_buf = ep->len + ep->transfer_size == ep->total_len;
10006978:	186b      	adds	r3, r5, r1
1000697a:	1a9b      	subs	r3, r3, r2
1000697c:	425f      	negs	r7, r3
1000697e:	417b      	adcs	r3, r7
10006980:	2724      	movs	r7, #36	; 0x24
10006982:	b2db      	uxtb	r3, r3
    ep->transfer_size = remaining_bytes > 64 ? 64 : remaining_bytes;
10006984:	6225      	str	r5, [r4, #32]
    ep->last_buf = ep->len + ep->transfer_size == ep->total_len;
10006986:	55e3      	strb	r3, [r4, r7]
    _hw_endpoint_update_last_buf(ep);

    // Can happen because of programmer error so check for it
    if (ep->len > ep->total_len)
10006988:	428a      	cmp	r2, r1
1000698a:	d34c      	bcc.n	10006a26 <_hw_endpoint_xfer_continue+0xd6>
    {
        panic("Transferred more data than expected");
    }

    // If we are done then notify tinyusb
    if (ep->len == ep->total_len)
1000698c:	d049      	beq.n	10006a22 <_hw_endpoint_xfer_continue+0xd2>
    if (!ep->rx)
1000698e:	2800      	cmp	r0, #0
10006990:	d023      	beq.n	100069da <_hw_endpoint_xfer_continue+0x8a>
    uint32_t val = ep->transfer_size | USB_BUF_CTRL_AVAIL;
10006992:	2280      	movs	r2, #128	; 0x80
10006994:	00d2      	lsls	r2, r2, #3
10006996:	432a      	orrs	r2, r5
    val |= ep->next_pid ? USB_BUF_CTRL_DATA1_PID : USB_BUF_CTRL_DATA0_PID;
10006998:	7961      	ldrb	r1, [r4, #5]
1000699a:	2900      	cmp	r1, #0
1000699c:	d002      	beq.n	100069a4 <_hw_endpoint_xfer_continue+0x54>
1000699e:	2080      	movs	r0, #128	; 0x80
100069a0:	0180      	lsls	r0, r0, #6
100069a2:	4302      	orrs	r2, r0
    ep->next_pid ^= 1u;
100069a4:	2001      	movs	r0, #1
100069a6:	4041      	eors	r1, r0
100069a8:	7161      	strb	r1, [r4, #5]
    if (ep->last_buf)
100069aa:	2b00      	cmp	r3, #0
100069ac:	d002      	beq.n	100069b4 <_hw_endpoint_xfer_continue+0x64>
        val |= USB_BUF_CTRL_LAST;
100069ae:	2380      	movs	r3, #128	; 0x80
100069b0:	01db      	lsls	r3, r3, #7
100069b2:	431a      	orrs	r2, r3
            if (*ep->buffer_control & USB_BUF_CTRL_AVAIL) {
100069b4:	68e1      	ldr	r1, [r4, #12]
100069b6:	680b      	ldr	r3, [r1, #0]
100069b8:	055b      	lsls	r3, r3, #21
100069ba:	d43c      	bmi.n	10006a36 <_hw_endpoint_xfer_continue+0xe6>
            *ep->buffer_control = value & ~USB_BUF_CTRL_AVAIL;
100069bc:	4b20      	ldr	r3, [pc, #128]	; (10006a40 <_hw_endpoint_xfer_continue+0xf0>)
100069be:	4013      	ands	r3, r2
100069c0:	600b      	str	r3, [r1, #0]
            __asm volatile (
100069c2:	e7ff      	b.n	100069c4 <_hw_endpoint_xfer_continue+0x74>
100069c4:	e7ff      	b.n	100069c6 <_hw_endpoint_xfer_continue+0x76>
100069c6:	e7ff      	b.n	100069c8 <_hw_endpoint_xfer_continue+0x78>
100069c8:	e7ff      	b.n	100069ca <_hw_endpoint_xfer_continue+0x7a>
100069ca:	e7ff      	b.n	100069cc <_hw_endpoint_xfer_continue+0x7c>
100069cc:	e7ff      	b.n	100069ce <_hw_endpoint_xfer_continue+0x7e>
        _hw_endpoint_start_next_buffer(ep);
    }

    _hw_endpoint_lock_update(ep, -1);
    // More work to do
    return false;
100069ce:	2000      	movs	r0, #0
    *ep->buffer_control = value;
100069d0:	68e3      	ldr	r3, [r4, #12]
100069d2:	601a      	str	r2, [r3, #0]
}
100069d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ep->transfer_size = remaining_bytes > 64 ? 64 : remaining_bytes;
100069d6:	2540      	movs	r5, #64	; 0x40
100069d8:	e7ce      	b.n	10006978 <_hw_endpoint_xfer_continue+0x28>
        memcpy(ep->hw_data_buf, &ep->user_buf[ep->len], ep->transfer_size);
100069da:	6aa3      	ldr	r3, [r4, #40]	; 0x28
100069dc:	002a      	movs	r2, r5
100069de:	469c      	mov	ip, r3
100069e0:	6920      	ldr	r0, [r4, #16]
100069e2:	4461      	add	r1, ip
100069e4:	f7fa fba6 	bl	10001134 <__wrap___aeabi_memcpy>
        val |= USB_BUF_CTRL_FULL;
100069e8:	2284      	movs	r2, #132	; 0x84
100069ea:	0212      	lsls	r2, r2, #8
    if (ep->last_buf)
100069ec:	5de3      	ldrb	r3, [r4, r7]
        val |= USB_BUF_CTRL_FULL;
100069ee:	432a      	orrs	r2, r5
100069f0:	e7d2      	b.n	10006998 <_hw_endpoint_xfer_continue+0x48>
        memcpy(&ep->user_buf[ep->len], ep->hw_data_buf, transferred_bytes);
100069f2:	69e3      	ldr	r3, [r4, #28]
100069f4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
100069f6:	469c      	mov	ip, r3
100069f8:	6921      	ldr	r1, [r4, #16]
100069fa:	002a      	movs	r2, r5
100069fc:	4460      	add	r0, ip
100069fe:	f7fa fb99 	bl	10001134 <__wrap___aeabi_memcpy>
        ep->len += transferred_bytes;
10006a02:	69e3      	ldr	r3, [r4, #28]
    if ((ep->rx) && (transferred_bytes < ep->transfer_size))
10006a04:	78e0      	ldrb	r0, [r4, #3]
        ep->len += transferred_bytes;
10006a06:	18e9      	adds	r1, r5, r3
10006a08:	61e1      	str	r1, [r4, #28]
    if ((ep->rx) && (transferred_bytes < ep->transfer_size))
10006a0a:	2800      	cmp	r0, #0
10006a0c:	d0b0      	beq.n	10006970 <_hw_endpoint_xfer_continue+0x20>
10006a0e:	6a23      	ldr	r3, [r4, #32]
10006a10:	429d      	cmp	r5, r3
10006a12:	d2ad      	bcs.n	10006970 <_hw_endpoint_xfer_continue+0x20>
    ep->transfer_size = remaining_bytes > 64 ? 64 : remaining_bytes;
10006a14:	2300      	movs	r3, #0
    ep->last_buf = ep->len + ep->transfer_size == ep->total_len;
10006a16:	2201      	movs	r2, #1
    ep->transfer_size = remaining_bytes > 64 ? 64 : remaining_bytes;
10006a18:	6223      	str	r3, [r4, #32]
    ep->last_buf = ep->len + ep->transfer_size == ep->total_len;
10006a1a:	3324      	adds	r3, #36	; 0x24
        ep->total_len = ep->len;
10006a1c:	61a1      	str	r1, [r4, #24]
    ep->last_buf = ep->len + ep->transfer_size == ep->total_len;
10006a1e:	54e2      	strb	r2, [r4, r3]
    if (ep->len > ep->total_len)
10006a20:	e7d8      	b.n	100069d4 <_hw_endpoint_xfer_continue+0x84>
        return true;
10006a22:	0030      	movs	r0, r6
10006a24:	e7d6      	b.n	100069d4 <_hw_endpoint_xfer_continue+0x84>
        panic("Transferred more data than expected");
10006a26:	4807      	ldr	r0, [pc, #28]	; (10006a44 <_hw_endpoint_xfer_continue+0xf4>)
10006a28:	f7fd f80a 	bl	10003a40 <panic>
        panic("Can't continue xfer on inactive ep %d %s", ep->num, ep_dir_string);
10006a2c:	7881      	ldrb	r1, [r0, #2]
10006a2e:	4a06      	ldr	r2, [pc, #24]	; (10006a48 <_hw_endpoint_xfer_continue+0xf8>)
10006a30:	4806      	ldr	r0, [pc, #24]	; (10006a4c <_hw_endpoint_xfer_continue+0xfc>)
10006a32:	f7fd f805 	bl	10003a40 <panic>
10006a36:	78a1      	ldrb	r1, [r4, #2]
10006a38:	7860      	ldrb	r0, [r4, #1]
10006a3a:	f7ff ff29 	bl	10006890 <_hw_endpoint_buffer_control_update32.part.0.isra.0>
10006a3e:	46c0      	nop			; (mov r8, r8)
10006a40:	fffffbff 	.word	0xfffffbff
10006a44:	1000b528 	.word	0x1000b528
10006a48:	20002750 	.word	0x20002750
10006a4c:	1000b4fc 	.word	0x1000b4fc

10006a50 <_hw_endpoint_xfer>:

void _hw_endpoint_xfer(struct hw_endpoint *ep, uint8_t *buffer, uint16_t total_len, bool start)
{
10006a50:	b570      	push	{r4, r5, r6, lr}
10006a52:	0004      	movs	r4, r0
    pico_trace(" total_len %d, start=%d\n", total_len, start);

    assert(ep->configured);


    if (start)
10006a54:	2b00      	cmp	r3, #0
10006a56:	d049      	beq.n	10006aec <_hw_endpoint_xfer+0x9c>
    if (ep->active)
10006a58:	7d43      	ldrb	r3, [r0, #21]
10006a5a:	2b00      	cmp	r3, #0
10006a5c:	d003      	beq.n	10006a66 <_hw_endpoint_xfer+0x16>
    ep->stalled = false;
10006a5e:	2300      	movs	r3, #0
10006a60:	7503      	strb	r3, [r0, #20]
    ep->sent_setup = false;
10006a62:	2032      	movs	r0, #50	; 0x32
10006a64:	5423      	strb	r3, [r4, r0]
    ep->len = 0;
10006a66:	2300      	movs	r3, #0
    ep->total_len = total_len;
10006a68:	61a2      	str	r2, [r4, #24]
    ep->len = 0;
10006a6a:	61e3      	str	r3, [r4, #28]
    ep->transfer_size = total_len > 64 ? 64 : total_len;
10006a6c:	1c15      	adds	r5, r2, #0
10006a6e:	2a40      	cmp	r2, #64	; 0x40
10006a70:	d831      	bhi.n	10006ad6 <_hw_endpoint_xfer+0x86>
    ep->active = true;
10006a72:	2301      	movs	r3, #1
    ep->transfer_size = total_len > 64 ? 64 : total_len;
10006a74:	b2ad      	uxth	r5, r5
    ep->last_buf = ep->len + ep->transfer_size == ep->total_len;
10006a76:	1b52      	subs	r2, r2, r5
    ep->active = true;
10006a78:	7563      	strb	r3, [r4, #21]
    ep->last_buf = ep->len + ep->transfer_size == ep->total_len;
10006a7a:	4253      	negs	r3, r2
10006a7c:	415a      	adcs	r2, r3
10006a7e:	2624      	movs	r6, #36	; 0x24
    ep->buf_sel = 0;
10006a80:	2325      	movs	r3, #37	; 0x25
10006a82:	2000      	movs	r0, #0
    ep->last_buf = ep->len + ep->transfer_size == ep->total_len;
10006a84:	b2d2      	uxtb	r2, r2
    ep->transfer_size = total_len > 64 ? 64 : total_len;
10006a86:	6225      	str	r5, [r4, #32]
    ep->user_buf = buffer;
10006a88:	62a1      	str	r1, [r4, #40]	; 0x28
    ep->last_buf = ep->len + ep->transfer_size == ep->total_len;
10006a8a:	55a2      	strb	r2, [r4, r6]
    ep->buf_sel = 0;
10006a8c:	54e0      	strb	r0, [r4, r3]
    if (!ep->rx)
10006a8e:	78e3      	ldrb	r3, [r4, #3]
10006a90:	2b00      	cmp	r3, #0
10006a92:	d022      	beq.n	10006ada <_hw_endpoint_xfer+0x8a>
    uint32_t val = ep->transfer_size | USB_BUF_CTRL_AVAIL;
10006a94:	2380      	movs	r3, #128	; 0x80
10006a96:	00db      	lsls	r3, r3, #3
10006a98:	432b      	orrs	r3, r5
    val |= ep->next_pid ? USB_BUF_CTRL_DATA1_PID : USB_BUF_CTRL_DATA0_PID;
10006a9a:	7961      	ldrb	r1, [r4, #5]
10006a9c:	2900      	cmp	r1, #0
10006a9e:	d002      	beq.n	10006aa6 <_hw_endpoint_xfer+0x56>
10006aa0:	2080      	movs	r0, #128	; 0x80
10006aa2:	0180      	lsls	r0, r0, #6
10006aa4:	4303      	orrs	r3, r0
    ep->next_pid ^= 1u;
10006aa6:	2001      	movs	r0, #1
10006aa8:	4041      	eors	r1, r0
10006aaa:	7161      	strb	r1, [r4, #5]
    if (ep->last_buf)
10006aac:	2a00      	cmp	r2, #0
10006aae:	d002      	beq.n	10006ab6 <_hw_endpoint_xfer+0x66>
        val |= USB_BUF_CTRL_LAST;
10006ab0:	2280      	movs	r2, #128	; 0x80
10006ab2:	01d2      	lsls	r2, r2, #7
10006ab4:	4313      	orrs	r3, r2
            if (*ep->buffer_control & USB_BUF_CTRL_AVAIL) {
10006ab6:	68e1      	ldr	r1, [r4, #12]
10006ab8:	680a      	ldr	r2, [r1, #0]
10006aba:	0552      	lsls	r2, r2, #21
10006abc:	d419      	bmi.n	10006af2 <_hw_endpoint_xfer+0xa2>
            *ep->buffer_control = value & ~USB_BUF_CTRL_AVAIL;
10006abe:	4a0f      	ldr	r2, [pc, #60]	; (10006afc <_hw_endpoint_xfer+0xac>)
10006ac0:	401a      	ands	r2, r3
10006ac2:	600a      	str	r2, [r1, #0]
            __asm volatile (
10006ac4:	e7ff      	b.n	10006ac6 <_hw_endpoint_xfer+0x76>
10006ac6:	e7ff      	b.n	10006ac8 <_hw_endpoint_xfer+0x78>
10006ac8:	e7ff      	b.n	10006aca <_hw_endpoint_xfer+0x7a>
10006aca:	e7ff      	b.n	10006acc <_hw_endpoint_xfer+0x7c>
10006acc:	e7ff      	b.n	10006ace <_hw_endpoint_xfer+0x7e>
10006ace:	e7ff      	b.n	10006ad0 <_hw_endpoint_xfer+0x80>
    *ep->buffer_control = value;
10006ad0:	68e2      	ldr	r2, [r4, #12]
10006ad2:	6013      	str	r3, [r2, #0]
    }
    else
    {
        _hw_endpoint_xfer_continue(ep);
    }
}
10006ad4:	bd70      	pop	{r4, r5, r6, pc}
    ep->transfer_size = total_len > 64 ? 64 : total_len;
10006ad6:	2540      	movs	r5, #64	; 0x40
10006ad8:	e7cb      	b.n	10006a72 <_hw_endpoint_xfer+0x22>
        memcpy(ep->hw_data_buf, &ep->user_buf[ep->len], ep->transfer_size);
10006ada:	002a      	movs	r2, r5
10006adc:	6920      	ldr	r0, [r4, #16]
10006ade:	f7fa fb29 	bl	10001134 <__wrap___aeabi_memcpy>
        val |= USB_BUF_CTRL_FULL;
10006ae2:	2384      	movs	r3, #132	; 0x84
10006ae4:	021b      	lsls	r3, r3, #8
    if (ep->last_buf)
10006ae6:	5da2      	ldrb	r2, [r4, r6]
        val |= USB_BUF_CTRL_FULL;
10006ae8:	432b      	orrs	r3, r5
10006aea:	e7d6      	b.n	10006a9a <_hw_endpoint_xfer+0x4a>
        _hw_endpoint_xfer_continue(ep);
10006aec:	f7ff ff30 	bl	10006950 <_hw_endpoint_xfer_continue>
}
10006af0:	e7f0      	b.n	10006ad4 <_hw_endpoint_xfer+0x84>
10006af2:	78a1      	ldrb	r1, [r4, #2]
10006af4:	7860      	ldrb	r0, [r4, #1]
10006af6:	f7ff fecb 	bl	10006890 <_hw_endpoint_buffer_control_update32.part.0.isra.0>
10006afa:	46c0      	nop			; (mov r8, r8)
10006afc:	fffffbff 	.word	0xfffffbff

10006b00 <tusb_init>:
#if TUSB_OPT_DEVICE_ENABLED
#include "device/usbd_pvt.h"
#endif

bool tusb_init(void)
{
10006b00:	b570      	push	{r4, r5, r6, lr}
  // skip if already initialized
  if (_initialized) return true;
10006b02:	4d06      	ldr	r5, [pc, #24]	; (10006b1c <tusb_init+0x1c>)
10006b04:	782c      	ldrb	r4, [r5, #0]
10006b06:	2c00      	cmp	r4, #0
10006b08:	d001      	beq.n	10006b0e <tusb_init+0xe>
#endif

  _initialized = true;

  return TUSB_ERROR_NONE;
}
10006b0a:	0020      	movs	r0, r4
10006b0c:	bd70      	pop	{r4, r5, r6, pc}
  TU_ASSERT ( tud_init() ); // init device stack
10006b0e:	f7fe fda1 	bl	10005654 <tud_init>
10006b12:	2800      	cmp	r0, #0
10006b14:	d0f9      	beq.n	10006b0a <tusb_init+0xa>
  _initialized = true;
10006b16:	2301      	movs	r3, #1
10006b18:	702b      	strb	r3, [r5, #0]
  return TUSB_ERROR_NONE;
10006b1a:	e7f6      	b.n	10006b0a <tusb_init+0xa>
10006b1c:	20017330 	.word	0x20017330

10006b20 <tusb_inited>:

bool tusb_inited(void)
{
  return _initialized;
10006b20:	4b01      	ldr	r3, [pc, #4]	; (10006b28 <tusb_inited+0x8>)
10006b22:	7818      	ldrb	r0, [r3, #0]
}
10006b24:	4770      	bx	lr
10006b26:	46c0      	nop			; (mov r8, r8)
10006b28:	20017330 	.word	0x20017330

10006b2c <_Z9VideoInitv>:
// current tile size (0=text mode, -1 = uninitialized)
int CurTileSize = -1;

// initialize videomode
void VideoInit()
{
10006b2c:	b570      	push	{r4, r5, r6, lr}
// Note: If not using overlapped layer LAYERPROG_KEY, set minimal
// frequency to 150 MHz, or else text mode will flicker.

	// setup videomode
	VgaCfgDef(&Cfg); // get default configuration
10006b2e:	4d17      	ldr	r5, [pc, #92]	; (10006b8c <_Z9VideoInitv+0x60>)
10006b30:	0028      	movs	r0, r5
10006b32:	f002 fcfb 	bl	1000952c <_Z9VgaCfgDefP7sVgaCfg>
	Cfg.video = &VideoVGA; // video timings
10006b36:	4b16      	ldr	r3, [pc, #88]	; (10006b90 <_Z9VideoInitv+0x64>)
	Cfg.width = WIDTH; // screen width
	Cfg.height = HEIGHT; // screen height
	Cfg.mode[1] = LAYERPROG_KEY; // sprite
	VgaCfg(&Cfg, &Vmode); // calculate videomode setup
10006b38:	4c16      	ldr	r4, [pc, #88]	; (10006b94 <_Z9VideoInitv+0x68>)
	Cfg.video = &VideoVGA; // video timings
10006b3a:	60ab      	str	r3, [r5, #8]
	Cfg.width = WIDTH; // screen width
10006b3c:	4b16      	ldr	r3, [pc, #88]	; (10006b98 <_Z9VideoInitv+0x6c>)
	VgaCfg(&Cfg, &Vmode); // calculate videomode setup
10006b3e:	0021      	movs	r1, r4
	Cfg.width = WIDTH; // screen width
10006b40:	602b      	str	r3, [r5, #0]
	Cfg.mode[1] = LAYERPROG_KEY; // sprite
10006b42:	2301      	movs	r3, #1
	VgaCfg(&Cfg, &Vmode); // calculate videomode setup
10006b44:	0028      	movs	r0, r5
	Cfg.mode[1] = LAYERPROG_KEY; // sprite
10006b46:	756b      	strb	r3, [r5, #21]
	VgaCfg(&Cfg, &Vmode); // calculate videomode setup
10006b48:	f002 fd06 	bl	10009558 <_Z6VgaCfgPK7sVgaCfgP6sVmode>

	// initialize base layer 0 to tiles
	ScreenClear(pScreen);
10006b4c:	4d13      	ldr	r5, [pc, #76]	; (10006b9c <_Z9VideoInitv+0x70>)
10006b4e:	6828      	ldr	r0, [r5, #0]
10006b50:	f002 fc28 	bl	100093a4 <_Z11ScreenClearP7sScreen>
	sStrip* t = ScreenAddStrip(pScreen, HEIGHT);
10006b54:	21f0      	movs	r1, #240	; 0xf0
10006b56:	6828      	ldr	r0, [r5, #0]
10006b58:	0049      	lsls	r1, r1, #1
10006b5a:	f002 fc2b 	bl	100093b4 <_Z14ScreenAddStripP7sScreeni>
	sSegm* g = ScreenAddSegm(t, WIDTH);
10006b5e:	21a0      	movs	r1, #160	; 0xa0
10006b60:	0089      	lsls	r1, r1, #2
10006b62:	f002 fc39 	bl	100093d8 <_Z13ScreenAddSegmP6sStripi>

	// setup layer 1 with player image
	memset(&LayerScreen[1], 0, sizeof(sLayer));
10006b66:	2224      	movs	r2, #36	; 0x24
10006b68:	2100      	movs	r1, #0
10006b6a:	480d      	ldr	r0, [pc, #52]	; (10006ba0 <_Z9VideoInitv+0x74>)
10006b6c:	f7fa fadc 	bl	10001128 <__wrap_memset>

	// initialize system clock
	set_sys_clock_pll(Vmode.vco*1000, Vmode.pd1, Vmode.pd2);
10006b70:	68e3      	ldr	r3, [r4, #12]
10006b72:	7ce2      	ldrb	r2, [r4, #19]
10006b74:	0158      	lsls	r0, r3, #5
10006b76:	1ac0      	subs	r0, r0, r3
10006b78:	0080      	lsls	r0, r0, #2
10006b7a:	18c0      	adds	r0, r0, r3
10006b7c:	7ca1      	ldrb	r1, [r4, #18]
10006b7e:	00c0      	lsls	r0, r0, #3
10006b80:	f7fd faf4 	bl	1000416c <set_sys_clock_pll>

	// initialize videomode
	VgaInitReq(&Vmode);
10006b84:	0020      	movs	r0, r4
10006b86:	f002 fbf9 	bl	1000937c <_Z10VgaInitReqPK6sVmode>
}
10006b8a:	bd70      	pop	{r4, r5, r6, pc}
10006b8c:	2000a398 	.word	0x2000a398
10006b90:	1018837c 	.word	0x1018837c
10006b94:	20016620 	.word	0x20016620
10006b98:	01e00280 	.word	0x01e00280
10006b9c:	20008634 	.word	0x20008634
10006ba0:	2000cb78 	.word	0x2000cb78

10006ba4 <_Z11SetTextModev>:

// set text mode
void SetTextMode()
{
10006ba4:	b530      	push	{r4, r5, lr}
	// set overlapped layer off
	LayerScreen[1].on = False;
10006ba6:	2346      	movs	r3, #70	; 0x46
10006ba8:	2500      	movs	r5, #0
10006baa:	4a16      	ldr	r2, [pc, #88]	; (10006c04 <_Z11SetTextModev+0x60>)
{
10006bac:	b083      	sub	sp, #12
	LayerScreen[1].on = False;
10006bae:	54d5      	strb	r5, [r2, r3]
    __asm volatile ("dmb");
10006bb0:	f3bf 8f5f 	dmb	sy
	__dmb();

	// setup print buffer
	PrintSetup(Text, TEXTW, TEXTH, TEXTWB);
10006bb4:	4c14      	ldr	r4, [pc, #80]	; (10006c08 <_Z11SetTextModev+0x64>)
10006bb6:	221e      	movs	r2, #30
10006bb8:	335a      	adds	r3, #90	; 0x5a
10006bba:	2150      	movs	r1, #80	; 0x50
10006bbc:	0020      	movs	r0, r4
10006bbe:	f003 f8fd 	bl	10009dbc <_Z10PrintSetupPhiii>

	// clear text screen
	PrintClear();
10006bc2:	f003 f925 	bl	10009e10 <_Z10PrintClearv>

	// initialize base layer 0 to text mode
	if (CurTileSize != 0)
10006bc6:	4b11      	ldr	r3, [pc, #68]	; (10006c0c <_Z11SetTextModev+0x68>)
10006bc8:	681a      	ldr	r2, [r3, #0]
10006bca:	2a00      	cmp	r2, #0
10006bcc:	d101      	bne.n	10006bd2 <_Z11SetTextModev+0x2e>
		ScreenClear(pScreen);
		sStrip* t = ScreenAddStrip(pScreen, HEIGHT);
		sSegm* g = ScreenAddSegm(t, WIDTH);
		ScreenSegmAText(g, Text, Font_Copy, FONTH, DefPal16, TEXTWB);
	}
}
10006bce:	b003      	add	sp, #12
10006bd0:	bd30      	pop	{r4, r5, pc}
		CurTileSize = 0;
10006bd2:	601d      	str	r5, [r3, #0]
		ScreenClear(pScreen);
10006bd4:	4d0e      	ldr	r5, [pc, #56]	; (10006c10 <_Z11SetTextModev+0x6c>)
10006bd6:	6828      	ldr	r0, [r5, #0]
10006bd8:	f002 fbe4 	bl	100093a4 <_Z11ScreenClearP7sScreen>
		sStrip* t = ScreenAddStrip(pScreen, HEIGHT);
10006bdc:	21f0      	movs	r1, #240	; 0xf0
10006bde:	6828      	ldr	r0, [r5, #0]
10006be0:	0049      	lsls	r1, r1, #1
10006be2:	f002 fbe7 	bl	100093b4 <_Z14ScreenAddStripP7sScreeni>
		sSegm* g = ScreenAddSegm(t, WIDTH);
10006be6:	21a0      	movs	r1, #160	; 0xa0
10006be8:	0089      	lsls	r1, r1, #2
10006bea:	f002 fbf5 	bl	100093d8 <_Z13ScreenAddSegmP6sStripi>
		ScreenSegmAText(g, Text, Font_Copy, FONTH, DefPal16, TEXTWB);
10006bee:	23a0      	movs	r3, #160	; 0xa0
10006bf0:	9301      	str	r3, [sp, #4]
10006bf2:	4b08      	ldr	r3, [pc, #32]	; (10006c14 <_Z11SetTextModev+0x70>)
10006bf4:	0021      	movs	r1, r4
10006bf6:	9300      	str	r3, [sp, #0]
10006bf8:	4a07      	ldr	r2, [pc, #28]	; (10006c18 <_Z11SetTextModev+0x74>)
10006bfa:	2310      	movs	r3, #16
10006bfc:	f002 fc08 	bl	10009410 <_Z15ScreenSegmATextP5sSegmPKvS2_tS2_i>
}
10006c00:	e7e5      	b.n	10006bce <_Z11SetTextModev+0x2a>
10006c02:	46c0      	nop			; (mov r8, r8)
10006c04:	2000cb54 	.word	0x2000cb54
10006c08:	2000f758 	.word	0x2000f758
10006c0c:	20002758 	.word	0x20002758
10006c10:	20008634 	.word	0x20008634
10006c14:	20008624 	.word	0x20008624
10006c18:	2000bb48 	.word	0x2000bb48

10006c1c <_Z11SetTileModev>:

// set tile mode (must be valid variables MapW, MapH, TileSize)
void SetTileMode()
{
10006c1c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (CurTileSize != TileSize)
10006c1e:	4a39      	ldr	r2, [pc, #228]	; (10006d04 <_Z11SetTileModev+0xe8>)
10006c20:	4c39      	ldr	r4, [pc, #228]	; (10006d08 <_Z11SetTileModev+0xec>)
10006c22:	6811      	ldr	r1, [r2, #0]
10006c24:	6823      	ldr	r3, [r4, #0]
{
10006c26:	b085      	sub	sp, #20
	if (CurTileSize != TileSize)
10006c28:	4299      	cmp	r1, r3
10006c2a:	d047      	beq.n	10006cbc <_Z11SetTileModev+0xa0>
	{
		CurTileSize = TileSize;

		// copy tiles
		if (TileSize == 32)
			memcpy(TilesImg_Copy, Tiles32Img, sizeof(Tiles32Img));
10006c2c:	4e37      	ldr	r6, [pc, #220]	; (10006d0c <_Z11SetTileModev+0xf0>)
		CurTileSize = TileSize;
10006c2e:	6013      	str	r3, [r2, #0]
		if (TileSize == 32)
10006c30:	2b20      	cmp	r3, #32
10006c32:	d010      	beq.n	10006c56 <_Z11SetTileModev+0x3a>
		else if (TileSize == 28)
10006c34:	2b1c      	cmp	r3, #28
10006c36:	d04a      	beq.n	10006cce <_Z11SetTileModev+0xb2>
			memcpy(TilesImg_Copy, Tiles28Img, sizeof(Tiles28Img));
		else if (TileSize == 24)
10006c38:	2b18      	cmp	r3, #24
10006c3a:	d041      	beq.n	10006cc0 <_Z11SetTileModev+0xa4>
			memcpy(TilesImg_Copy, Tiles24Img, sizeof(Tiles24Img));
		else if (TileSize == 20)
10006c3c:	2b14      	cmp	r3, #20
10006c3e:	d04c      	beq.n	10006cda <_Z11SetTileModev+0xbe>
			memcpy(TilesImg_Copy, Tiles20Img, sizeof(Tiles20Img));
		else if (TileSize == 16)
10006c40:	2b10      	cmp	r3, #16
10006c42:	d050      	beq.n	10006ce6 <_Z11SetTileModev+0xca>
			memcpy(TilesImg_Copy, Tiles16Img, sizeof(Tiles16Img));
		else if (TileSize == 12)
10006c44:	2b0c      	cmp	r3, #12
10006c46:	d055      	beq.n	10006cf4 <_Z11SetTileModev+0xd8>
			memcpy(TilesImg_Copy, Tiles12Img, sizeof(Tiles12Img));
		else
			memcpy(TilesImg_Copy, Tiles8Img, sizeof(Tiles8Img));
10006c48:	22b8      	movs	r2, #184	; 0xb8
10006c4a:	0030      	movs	r0, r6
10006c4c:	4930      	ldr	r1, [pc, #192]	; (10006d10 <_Z11SetTileModev+0xf4>)
10006c4e:	00d2      	lsls	r2, r2, #3
10006c50:	f7fa fa70 	bl	10001134 <__wrap___aeabi_memcpy>
10006c54:	e005      	b.n	10006c62 <_Z11SetTileModev+0x46>
			memcpy(TilesImg_Copy, Tiles32Img, sizeof(Tiles32Img));
10006c56:	22b8      	movs	r2, #184	; 0xb8
10006c58:	0030      	movs	r0, r6
10006c5a:	492e      	ldr	r1, [pc, #184]	; (10006d14 <_Z11SetTileModev+0xf8>)
10006c5c:	01d2      	lsls	r2, r2, #7
10006c5e:	f7fa fa69 	bl	10001134 <__wrap___aeabi_memcpy>

		// initialize base layer 0 to tile mode
		ScreenClear(pScreen);
10006c62:	4d2d      	ldr	r5, [pc, #180]	; (10006d18 <_Z11SetTileModev+0xfc>)
10006c64:	6828      	ldr	r0, [r5, #0]
10006c66:	f002 fb9d 	bl	100093a4 <_Z11ScreenClearP7sScreen>
		sStrip* t = ScreenAddStrip(pScreen, MapH*TileSize);
10006c6a:	4b2c      	ldr	r3, [pc, #176]	; (10006d1c <_Z11SetTileModev+0x100>)
10006c6c:	6828      	ldr	r0, [r5, #0]
10006c6e:	6819      	ldr	r1, [r3, #0]
10006c70:	6823      	ldr	r3, [r4, #0]
10006c72:	4359      	muls	r1, r3
10006c74:	f002 fb9e 	bl	100093b4 <_Z14ScreenAddStripP7sScreeni>
		sSegm* g = ScreenAddSegm(t, MapW*TileSize);
10006c78:	4f29      	ldr	r7, [pc, #164]	; (10006d20 <_Z11SetTileModev+0x104>)
10006c7a:	6821      	ldr	r1, [r4, #0]
10006c7c:	683b      	ldr	r3, [r7, #0]
10006c7e:	4359      	muls	r1, r3
10006c80:	f002 fbaa 	bl	100093d8 <_Z13ScreenAddSegmP6sStripi>
		ScreenSegmTile2(g, Board, TilesImg_Copy, TileSize, TileSize, TileSize*TILES_NUM, MapW);
10006c84:	6823      	ldr	r3, [r4, #0]
10006c86:	683a      	ldr	r2, [r7, #0]
10006c88:	4926      	ldr	r1, [pc, #152]	; (10006d24 <_Z11SetTileModev+0x108>)
10006c8a:	9202      	str	r2, [sp, #8]
10006c8c:	005a      	lsls	r2, r3, #1
10006c8e:	18d2      	adds	r2, r2, r3
10006c90:	00d2      	lsls	r2, r2, #3
10006c92:	1ad2      	subs	r2, r2, r3
10006c94:	9201      	str	r2, [sp, #4]
10006c96:	9300      	str	r3, [sp, #0]
10006c98:	0032      	movs	r2, r6
10006c9a:	f002 fbcd 	bl	10009438 <_Z15ScreenSegmTile2P5sSegmPKvS2_iiii>
	}

	// shift offset
	pScreen->strip[0].seg[0].offx = OffX;
10006c9e:	4a22      	ldr	r2, [pc, #136]	; (10006d28 <_Z11SetTileModev+0x10c>)
10006ca0:	682b      	ldr	r3, [r5, #0]
10006ca2:	7812      	ldrb	r2, [r2, #0]
	pScreen->strip[0].seg[0].offy = OffY;

	// set overlapped layer 1 ON
	LayerScreen[1].on = True;
10006ca4:	2101      	movs	r1, #1
	pScreen->strip[0].seg[0].offx = OffX;
10006ca6:	b252      	sxtb	r2, r2
10006ca8:	819a      	strh	r2, [r3, #12]
	pScreen->strip[0].seg[0].offy = OffY;
10006caa:	4a20      	ldr	r2, [pc, #128]	; (10006d2c <_Z11SetTileModev+0x110>)
10006cac:	7812      	ldrb	r2, [r2, #0]
10006cae:	b252      	sxtb	r2, r2
10006cb0:	81da      	strh	r2, [r3, #14]
	LayerScreen[1].on = True;
10006cb2:	2346      	movs	r3, #70	; 0x46
10006cb4:	4a1e      	ldr	r2, [pc, #120]	; (10006d30 <_Z11SetTileModev+0x114>)
10006cb6:	54d1      	strb	r1, [r2, r3]
}
10006cb8:	b005      	add	sp, #20
10006cba:	bdf0      	pop	{r4, r5, r6, r7, pc}
10006cbc:	4d16      	ldr	r5, [pc, #88]	; (10006d18 <_Z11SetTileModev+0xfc>)
10006cbe:	e7ee      	b.n	10006c9e <_Z11SetTileModev+0x82>
			memcpy(TilesImg_Copy, Tiles24Img, sizeof(Tiles24Img));
10006cc0:	22cf      	movs	r2, #207	; 0xcf
10006cc2:	0030      	movs	r0, r6
10006cc4:	491b      	ldr	r1, [pc, #108]	; (10006d34 <_Z11SetTileModev+0x118>)
10006cc6:	0192      	lsls	r2, r2, #6
10006cc8:	f7fa fa34 	bl	10001134 <__wrap___aeabi_memcpy>
10006ccc:	e7c9      	b.n	10006c62 <_Z11SetTileModev+0x46>
			memcpy(TilesImg_Copy, Tiles28Img, sizeof(Tiles28Img));
10006cce:	0030      	movs	r0, r6
10006cd0:	4a19      	ldr	r2, [pc, #100]	; (10006d38 <_Z11SetTileModev+0x11c>)
10006cd2:	491a      	ldr	r1, [pc, #104]	; (10006d3c <_Z11SetTileModev+0x120>)
10006cd4:	f7fa fa2e 	bl	10001134 <__wrap___aeabi_memcpy>
10006cd8:	e7c3      	b.n	10006c62 <_Z11SetTileModev+0x46>
			memcpy(TilesImg_Copy, Tiles20Img, sizeof(Tiles20Img));
10006cda:	0030      	movs	r0, r6
10006cdc:	4a18      	ldr	r2, [pc, #96]	; (10006d40 <_Z11SetTileModev+0x124>)
10006cde:	4919      	ldr	r1, [pc, #100]	; (10006d44 <_Z11SetTileModev+0x128>)
10006ce0:	f7fa fa28 	bl	10001134 <__wrap___aeabi_memcpy>
10006ce4:	e7bd      	b.n	10006c62 <_Z11SetTileModev+0x46>
			memcpy(TilesImg_Copy, Tiles16Img, sizeof(Tiles16Img));
10006ce6:	22b8      	movs	r2, #184	; 0xb8
10006ce8:	0030      	movs	r0, r6
10006cea:	4917      	ldr	r1, [pc, #92]	; (10006d48 <_Z11SetTileModev+0x12c>)
10006cec:	0152      	lsls	r2, r2, #5
10006cee:	f7fa fa21 	bl	10001134 <__wrap___aeabi_memcpy>
10006cf2:	e7b6      	b.n	10006c62 <_Z11SetTileModev+0x46>
			memcpy(TilesImg_Copy, Tiles12Img, sizeof(Tiles12Img));
10006cf4:	22cf      	movs	r2, #207	; 0xcf
10006cf6:	0030      	movs	r0, r6
10006cf8:	4914      	ldr	r1, [pc, #80]	; (10006d4c <_Z11SetTileModev+0x130>)
10006cfa:	0112      	lsls	r2, r2, #4
10006cfc:	f7fa fa1a 	bl	10001134 <__wrap___aeabi_memcpy>
10006d00:	e7af      	b.n	10006c62 <_Z11SetTileModev+0x46>
10006d02:	46c0      	nop			; (mov r8, r8)
10006d04:	20002758 	.word	0x20002758
10006d08:	20010a18 	.word	0x20010a18
10006d0c:	20010a1c 	.word	0x20010a1c
10006d10:	101716a0 	.word	0x101716a0
10006d14:	1017de70 	.word	0x1017de70
10006d18:	20008634 	.word	0x20008634
10006d1c:	2000e544 	.word	0x2000e544
10006d20:	2000e548 	.word	0x2000e548
10006d24:	200090d4 	.word	0x200090d4
10006d28:	20017328 	.word	0x20017328
10006d2c:	20017329 	.word	0x20017329
10006d30:	2000cb54 	.word	0x2000cb54
10006d34:	10176440 	.word	0x10176440
10006d38:	00004670 	.word	0x00004670
10006d3c:	10179800 	.word	0x10179800
10006d40:	000023f0 	.word	0x000023f0
10006d44:	10174050 	.word	0x10174050
10006d48:	10172950 	.word	0x10172950
10006d4c:	10171c60 	.word	0x10171c60

10006d50 <_Z7GetCharv>:
// keyboard control: 'L' right(JS), 'I' up(JS), 'J' left(JS), 'K' down(JS),
// 'H' help (solution),'R' restart scene(JS fire), 'Q' previous level, 
// 'W' next level, 'P' info
char GetChar()
{
	char c = getchar_timeout_us(0);
10006d50:	2000      	movs	r0, #0
{
10006d52:	b570      	push	{r4, r5, r6, lr}
	char c = getchar_timeout_us(0);
10006d54:	f7fd f868 	bl	10003e28 <getchar_timeout_us>
10006d58:	b2c0      	uxtb	r0, r0
	if (c == (char)PICO_ERROR_TIMEOUT)
10006d5a:	28ff      	cmp	r0, #255	; 0xff
10006d5c:	d008      	beq.n	10006d70 <_Z7GetCharv+0x20>
		c = 0;
	if (c == -1)
		c = 0;
	if ((c >= 'a') && (c <= 'z'))
10006d5e:	0003      	movs	r3, r0
10006d60:	3b61      	subs	r3, #97	; 0x61
10006d62:	2b19      	cmp	r3, #25
10006d64:	d802      	bhi.n	10006d6c <_Z7GetCharv+0x1c>
		c -= 32;
10006d66:	3820      	subs	r0, #32
10006d68:	b2c0      	uxtb	r0, r0
				sleep_ms(20);
			c =  'R';
		}
	}
	return (c);
}
10006d6a:	bd70      	pop	{r4, r5, r6, pc}
	if (c == 0)
10006d6c:	2800      	cmp	r0, #0
10006d6e:	d1fc      	bne.n	10006d6a <_Z7GetCharv+0x1a>
 *
 * \param gpio GPIO number
 * \return Current state of the GPIO. 0 for low, non-zero for high
 */
static inline bool gpio_get(uint gpio) {
    return !!((1ul << gpio) & sio_hw->gpio_in);
10006d70:	24d0      	movs	r4, #208	; 0xd0
10006d72:	0624      	lsls	r4, r4, #24
10006d74:	6862      	ldr	r2, [r4, #4]
10006d76:	2301      	movs	r3, #1
		if (!gpio_get(PB_LT))
10006d78:	02d2      	lsls	r2, r2, #11
10006d7a:	d40d      	bmi.n	10006d98 <_Z7GetCharv+0x48>
10006d7c:	6862      	ldr	r2, [r4, #4]
10006d7e:	2501      	movs	r5, #1
10006d80:	0d12      	lsrs	r2, r2, #20
			while (!gpio_get(PB_LT))
10006d82:	4213      	tst	r3, r2
10006d84:	d106      	bne.n	10006d94 <_Z7GetCharv+0x44>
				sleep_ms(20);
10006d86:	2014      	movs	r0, #20
10006d88:	f7fd fdca 	bl	10004920 <sleep_ms>
10006d8c:	6863      	ldr	r3, [r4, #4]
10006d8e:	0d1b      	lsrs	r3, r3, #20
			while (!gpio_get(PB_LT))
10006d90:	421d      	tst	r5, r3
10006d92:	d0f8      	beq.n	10006d86 <_Z7GetCharv+0x36>
			c =  'J';
10006d94:	204a      	movs	r0, #74	; 0x4a
10006d96:	e7e8      	b.n	10006d6a <_Z7GetCharv+0x1a>
10006d98:	6862      	ldr	r2, [r4, #4]
10006d9a:	0d52      	lsrs	r2, r2, #21
		else if (!gpio_get(PB_RT))
10006d9c:	4213      	tst	r3, r2
10006d9e:	d011      	beq.n	10006dc4 <_Z7GetCharv+0x74>
10006da0:	6862      	ldr	r2, [r4, #4]
10006da2:	0c12      	lsrs	r2, r2, #16
		else if (!gpio_get(PB_UP))
10006da4:	4213      	tst	r3, r2
10006da6:	d11b      	bne.n	10006de0 <_Z7GetCharv+0x90>
10006da8:	6862      	ldr	r2, [r4, #4]
10006daa:	2501      	movs	r5, #1
10006dac:	0c12      	lsrs	r2, r2, #16
			while (!gpio_get(PB_UP))
10006dae:	4213      	tst	r3, r2
10006db0:	d106      	bne.n	10006dc0 <_Z7GetCharv+0x70>
				sleep_ms(20);
10006db2:	2014      	movs	r0, #20
10006db4:	f7fd fdb4 	bl	10004920 <sleep_ms>
10006db8:	6863      	ldr	r3, [r4, #4]
10006dba:	0c1b      	lsrs	r3, r3, #16
			while (!gpio_get(PB_UP))
10006dbc:	421d      	tst	r5, r3
10006dbe:	d0f8      	beq.n	10006db2 <_Z7GetCharv+0x62>
			c =  'I';
10006dc0:	2049      	movs	r0, #73	; 0x49
10006dc2:	e7d2      	b.n	10006d6a <_Z7GetCharv+0x1a>
10006dc4:	6862      	ldr	r2, [r4, #4]
10006dc6:	2501      	movs	r5, #1
10006dc8:	0d52      	lsrs	r2, r2, #21
			while (!gpio_get(PB_RT))
10006dca:	4213      	tst	r3, r2
10006dcc:	d106      	bne.n	10006ddc <_Z7GetCharv+0x8c>
				sleep_ms(20);
10006dce:	2014      	movs	r0, #20
10006dd0:	f7fd fda6 	bl	10004920 <sleep_ms>
10006dd4:	6863      	ldr	r3, [r4, #4]
10006dd6:	0d5b      	lsrs	r3, r3, #21
			while (!gpio_get(PB_RT))
10006dd8:	421d      	tst	r5, r3
10006dda:	d0f8      	beq.n	10006dce <_Z7GetCharv+0x7e>
			c =  'L';
10006ddc:	204c      	movs	r0, #76	; 0x4c
10006dde:	e7c4      	b.n	10006d6a <_Z7GetCharv+0x1a>
10006de0:	6862      	ldr	r2, [r4, #4]
10006de2:	0c92      	lsrs	r2, r2, #18
		else if (!gpio_get(PB_DN))
10006de4:	4213      	tst	r3, r2
10006de6:	d012      	beq.n	10006e0e <_Z7GetCharv+0xbe>
10006de8:	6862      	ldr	r2, [r4, #4]
10006dea:	2000      	movs	r0, #0
10006dec:	0c52      	lsrs	r2, r2, #17
		else if (!gpio_get(PB_FR))
10006dee:	4213      	tst	r3, r2
10006df0:	d1bb      	bne.n	10006d6a <_Z7GetCharv+0x1a>
10006df2:	6862      	ldr	r2, [r4, #4]
10006df4:	2501      	movs	r5, #1
10006df6:	0c52      	lsrs	r2, r2, #17
			while (!gpio_get(PB_FR))
10006df8:	4213      	tst	r3, r2
10006dfa:	d106      	bne.n	10006e0a <_Z7GetCharv+0xba>
				sleep_ms(20);
10006dfc:	2014      	movs	r0, #20
10006dfe:	f7fd fd8f 	bl	10004920 <sleep_ms>
10006e02:	6863      	ldr	r3, [r4, #4]
10006e04:	0c5b      	lsrs	r3, r3, #17
			while (!gpio_get(PB_FR))
10006e06:	421d      	tst	r5, r3
10006e08:	d0f8      	beq.n	10006dfc <_Z7GetCharv+0xac>
			c =  'R';
10006e0a:	2052      	movs	r0, #82	; 0x52
10006e0c:	e7ad      	b.n	10006d6a <_Z7GetCharv+0x1a>
10006e0e:	6862      	ldr	r2, [r4, #4]
10006e10:	2501      	movs	r5, #1
10006e12:	0c92      	lsrs	r2, r2, #18
			while (!gpio_get(PB_DN))
10006e14:	4213      	tst	r3, r2
10006e16:	d106      	bne.n	10006e26 <_Z7GetCharv+0xd6>
				sleep_ms(20);
10006e18:	2014      	movs	r0, #20
10006e1a:	f7fd fd81 	bl	10004920 <sleep_ms>
10006e1e:	6863      	ldr	r3, [r4, #4]
10006e20:	0c9b      	lsrs	r3, r3, #18
			while (!gpio_get(PB_DN))
10006e22:	421d      	tst	r5, r3
10006e24:	d0f8      	beq.n	10006e18 <_Z7GetCharv+0xc8>
			c =  'K';
10006e26:	204b      	movs	r0, #75	; 0x4b
10006e28:	e79f      	b.n	10006d6a <_Z7GetCharv+0x1a>
10006e2a:	46c0      	nop			; (mov r8, r8)

10006e2c <_Z8WaitCharv>:

// wait for a character
char WaitChar()
{
10006e2c:	b510      	push	{r4, lr}
	char c;
	while ((c = GetChar()) == 0) {}
10006e2e:	f7ff ff8f 	bl	10006d50 <_Z7GetCharv>
10006e32:	2800      	cmp	r0, #0
10006e34:	d0fb      	beq.n	10006e2e <_Z8WaitCharv+0x2>
	return c;
}
10006e36:	bd10      	pop	{r4, pc}

10006e38 <_Z9FlushCharv>:

// flush characters from keyboard
void FlushChar()
{
10006e38:	b510      	push	{r4, lr}
	while (GetChar() != 0) {}
10006e3a:	f7ff ff89 	bl	10006d50 <_Z7GetCharv>
10006e3e:	2800      	cmp	r0, #0
10006e40:	d1fb      	bne.n	10006e3a <_Z9FlushCharv+0x2>
}
10006e42:	bd10      	pop	{r4, pc}

10006e44 <_Z10initJoyPadv>:
// #define PB_CF 21		// Center Fire
// #define PB_DN 22		// Down direction
// #define PB_UR 26		// Upper right
// #define PB_UP 27		// Up direction
void initJoyPad()
{
10006e44:	b510      	push	{r4, lr}
	gpio_init(PB_UL);
10006e46:	201a      	movs	r0, #26
10006e48:	f7fa fd24 	bl	10001894 <gpio_init>
 *  \ingroup hardware_gpio
 *
 * \param mask Bitmask of GPIO to set to input, as bits 0-29
 */
static inline void gpio_set_dir_in_masked(uint32_t mask) {
    sio_hw->gpio_oe_clr = mask;
10006e4c:	24d0      	movs	r4, #208	; 0xd0
10006e4e:	2380      	movs	r3, #128	; 0x80
10006e50:	0624      	lsls	r4, r4, #24
10006e52:	04db      	lsls	r3, r3, #19
10006e54:	62a3      	str	r3, [r4, #40]	; 0x28
    gpio_set_pulls(gpio, true, false);
10006e56:	2200      	movs	r2, #0
10006e58:	2101      	movs	r1, #1
10006e5a:	201a      	movs	r0, #26
10006e5c:	f7fa fcf0 	bl	10001840 <gpio_set_pulls>
	gpio_set_dir(PB_UL, GPIO_IN);
	gpio_pull_up(PB_UL);
	
	gpio_init(PB_FR);
10006e60:	2011      	movs	r0, #17
10006e62:	f7fa fd17 	bl	10001894 <gpio_init>
    sio_hw->gpio_oe_clr = mask;
10006e66:	2380      	movs	r3, #128	; 0x80
10006e68:	029b      	lsls	r3, r3, #10
10006e6a:	62a3      	str	r3, [r4, #40]	; 0x28
    gpio_set_pulls(gpio, true, false);
10006e6c:	2200      	movs	r2, #0
10006e6e:	2101      	movs	r1, #1
10006e70:	2011      	movs	r0, #17
10006e72:	f7fa fce5 	bl	10001840 <gpio_set_pulls>
	gpio_set_dir(PB_FR, GPIO_IN);
	gpio_pull_up(PB_FR);
	
	gpio_init(PB_UP);
10006e76:	2010      	movs	r0, #16
10006e78:	f7fa fd0c 	bl	10001894 <gpio_init>
    sio_hw->gpio_oe_clr = mask;
10006e7c:	2380      	movs	r3, #128	; 0x80
10006e7e:	025b      	lsls	r3, r3, #9
10006e80:	62a3      	str	r3, [r4, #40]	; 0x28
    gpio_set_pulls(gpio, true, false);
10006e82:	2200      	movs	r2, #0
10006e84:	2101      	movs	r1, #1
10006e86:	2010      	movs	r0, #16
10006e88:	f7fa fcda 	bl	10001840 <gpio_set_pulls>
	gpio_set_dir(PB_UP, GPIO_IN);
	gpio_pull_up(PB_UP);
	
	gpio_init(PB_UR);
10006e8c:	2016      	movs	r0, #22
10006e8e:	f7fa fd01 	bl	10001894 <gpio_init>
    sio_hw->gpio_oe_clr = mask;
10006e92:	2380      	movs	r3, #128	; 0x80
10006e94:	03db      	lsls	r3, r3, #15
10006e96:	62a3      	str	r3, [r4, #40]	; 0x28
    gpio_set_pulls(gpio, true, false);
10006e98:	2200      	movs	r2, #0
10006e9a:	2101      	movs	r1, #1
10006e9c:	2016      	movs	r0, #22
10006e9e:	f7fa fccf 	bl	10001840 <gpio_set_pulls>
	gpio_set_dir(PB_UR, GPIO_IN);
	gpio_pull_up(PB_UR);
	
	gpio_init(PB_DN);
10006ea2:	2012      	movs	r0, #18
10006ea4:	f7fa fcf6 	bl	10001894 <gpio_init>
    sio_hw->gpio_oe_clr = mask;
10006ea8:	2380      	movs	r3, #128	; 0x80
10006eaa:	02db      	lsls	r3, r3, #11
10006eac:	62a3      	str	r3, [r4, #40]	; 0x28
    gpio_set_pulls(gpio, true, false);
10006eae:	2200      	movs	r2, #0
10006eb0:	2101      	movs	r1, #1
10006eb2:	2012      	movs	r0, #18
10006eb4:	f7fa fcc4 	bl	10001840 <gpio_set_pulls>
	gpio_set_dir(PB_DN, GPIO_IN);
	gpio_pull_up(PB_DN);
	
	gpio_init(PB_LT);
10006eb8:	2014      	movs	r0, #20
10006eba:	f7fa fceb 	bl	10001894 <gpio_init>
    sio_hw->gpio_oe_clr = mask;
10006ebe:	2380      	movs	r3, #128	; 0x80
10006ec0:	035b      	lsls	r3, r3, #13
10006ec2:	62a3      	str	r3, [r4, #40]	; 0x28
    gpio_set_pulls(gpio, true, false);
10006ec4:	2200      	movs	r2, #0
10006ec6:	2101      	movs	r1, #1
10006ec8:	2014      	movs	r0, #20
10006eca:	f7fa fcb9 	bl	10001840 <gpio_set_pulls>
	gpio_set_dir(PB_LT, GPIO_IN);
	gpio_pull_up(PB_LT);
	
	gpio_init(PB_RT);
10006ece:	2015      	movs	r0, #21
10006ed0:	f7fa fce0 	bl	10001894 <gpio_init>
    sio_hw->gpio_oe_clr = mask;
10006ed4:	2380      	movs	r3, #128	; 0x80
10006ed6:	039b      	lsls	r3, r3, #14
10006ed8:	62a3      	str	r3, [r4, #40]	; 0x28
    gpio_set_pulls(gpio, true, false);
10006eda:	2200      	movs	r2, #0
10006edc:	2101      	movs	r1, #1
10006ede:	2015      	movs	r0, #21
10006ee0:	f7fa fcae 	bl	10001840 <gpio_set_pulls>
	gpio_set_dir(PB_RT, GPIO_IN);
	gpio_pull_up(PB_RT);
	
	gpio_init(PB_CF);
10006ee4:	201b      	movs	r0, #27
10006ee6:	f7fa fcd5 	bl	10001894 <gpio_init>
    sio_hw->gpio_oe_clr = mask;
10006eea:	2380      	movs	r3, #128	; 0x80
10006eec:	051b      	lsls	r3, r3, #20
    gpio_set_pulls(gpio, true, false);
10006eee:	2200      	movs	r2, #0
10006ef0:	2101      	movs	r1, #1
10006ef2:	201b      	movs	r0, #27
    sio_hw->gpio_oe_clr = mask;
10006ef4:	62a3      	str	r3, [r4, #40]	; 0x28
    gpio_set_pulls(gpio, true, false);
10006ef6:	f7fa fca3 	bl	10001840 <gpio_set_pulls>
	gpio_set_dir(PB_CF, GPIO_IN);
	gpio_pull_up(PB_CF);
}
10006efa:	bd10      	pop	{r4, pc}

10006efc <main>:

int main()
{
10006efc:	b5f0      	push	{r4, r5, r6, r7, lr}
10006efe:	46de      	mov	lr, fp
10006f00:	4657      	mov	r7, sl
10006f02:	464e      	mov	r6, r9
10006f04:	4645      	mov	r5, r8
10006f06:	b5e0      	push	{r5, r6, r7, lr}
// random generator seed
inline u64 RandSeed() { return Rand.Seed(); }
inline void RandSetSeed(u64 seed) { Rand.SetSeed(seed); }

// Set random seed from ROSC counter
inline void RandInitSeed() { Rand.InitSeed(); }
10006f08:	4c48      	ldr	r4, [pc, #288]	; (1000702c <main+0x130>)
10006f0a:	b083      	sub	sp, #12
10006f0c:	0020      	movs	r0, r4
10006f0e:	f003 fa59 	bl	1000a3c4 <_ZN7cRandom8InitSeedEv>

	// initialize random number generator
	RandInitSeed();

	// copy font to RAM buffer
	memcpy(Font_Copy, FontBoldB8x16, sizeof(FontBoldB8x16));
10006f12:	2280      	movs	r2, #128	; 0x80
10006f14:	4946      	ldr	r1, [pc, #280]	; (10007030 <main+0x134>)
10006f16:	0152      	lsls	r2, r2, #5
10006f18:	4846      	ldr	r0, [pc, #280]	; (10007034 <main+0x138>)
10006f1a:	f7fa f90b 	bl	10001134 <__wrap___aeabi_memcpy>

	// run VGA core
	multicore_launch_core1(VgaCore);
10006f1e:	4846      	ldr	r0, [pc, #280]	; (10007038 <main+0x13c>)
10006f20:	f7fa fea0 	bl	10001c64 <multicore_launch_core1>

	// initialize videomode
	VideoInit();
10006f24:	f7ff fe02 	bl	10006b2c <_Z9VideoInitv>

	// initialize stdio
	stdio_init_all();
10006f28:	f7fc ff7a 	bl	10003e20 <stdio_init_all>
	initJoyPad();
10006f2c:	f7ff ff8a 	bl	10006e44 <_Z10initJoyPadv>

	// initialize sound output
	PWMSndInit();
10006f30:	f003 fb06 	bl	1000a540 <_Z10PWMSndInitv>

	// main loop
	AutInx = 0;
10006f34:	4b41      	ldr	r3, [pc, #260]	; (1000703c <main+0x140>)
10006f36:	4d42      	ldr	r5, [pc, #264]	; (10007040 <main+0x144>)
10006f38:	4698      	mov	r8, r3
10006f3a:	2300      	movs	r3, #0
10006f3c:	4642      	mov	r2, r8
10006f3e:	9301      	str	r3, [sp, #4]
10006f40:	6013      	str	r3, [r2, #0]
10006f42:	4b40      	ldr	r3, [pc, #256]	; (10007044 <main+0x148>)
10006f44:	4f40      	ldr	r7, [pc, #256]	; (10007048 <main+0x14c>)
10006f46:	469a      	mov	sl, r3
10006f48:	4b40      	ldr	r3, [pc, #256]	; (1000704c <main+0x150>)
10006f4a:	4e41      	ldr	r6, [pc, #260]	; (10007050 <main+0x154>)
10006f4c:	4699      	mov	r9, r3
10006f4e:	4b41      	ldr	r3, [pc, #260]	; (10007054 <main+0x158>)
10006f50:	469b      	mov	fp, r3

		// play demo level
		while (True)
		{
			// play demo scene
			LevNum = 0;
10006f52:	4652      	mov	r2, sl
10006f54:	2300      	movs	r3, #0
10006f56:	6013      	str	r3, [r2, #0]
			Levels = IntroLevel;
10006f58:	4a3f      	ldr	r2, [pc, #252]	; (10007058 <main+0x15c>)
10006f5a:	602a      	str	r2, [r5, #0]
			Level = 0;
10006f5c:	464a      	mov	r2, r9
10006f5e:	6013      	str	r3, [r2, #0]
			if (PlaySolve()) break;
10006f60:	f000 fd9e 	bl	10007aa0 <_Z9PlaySolvev>
10006f64:	2800      	cmp	r0, #0
10006f66:	d14b      	bne.n	10007000 <main+0x104>

			// play random scene
			do {
				i = RandU8Max(AutNum-1);
10006f68:	4b3c      	ldr	r3, [pc, #240]	; (1000705c <main+0x160>)
10006f6a:	681b      	ldr	r3, [r3, #0]
10006f6c:	3b01      	subs	r3, #1
10006f6e:	b2db      	uxtb	r3, r3
10006f70:	9300      	str	r3, [sp, #0]

// generate double random number in range 0 (including) to 1 (excluding)
inline double RandDouble() { return Rand.Double(); }

// generate random number in range 0 to MAX (including)
inline u8 RandU8Max(u8 max) { return Rand.U8Max(max); }
10006f72:	9900      	ldr	r1, [sp, #0]
10006f74:	0020      	movs	r0, r4
10006f76:	f003 fa5b 	bl	1000a430 <_ZN7cRandom5U8MaxEh>
				AutInx = i;
10006f7a:	4642      	mov	r2, r8
10006f7c:	0003      	movs	r3, r0
10006f7e:	6010      	str	r0, [r2, #0]
				AutName = Author[i].author; // author's name
10006f80:	0040      	lsls	r0, r0, #1
10006f82:	18c0      	adds	r0, r0, r3
10006f84:	0080      	lsls	r0, r0, #2
10006f86:	583a      	ldr	r2, [r7, r0]
10006f88:	4b35      	ldr	r3, [pc, #212]	; (10007060 <main+0x164>)
				Collect = Author[i].collect; // pointer to list of collections
10006f8a:	1838      	adds	r0, r7, r0
				AutName = Author[i].author; // author's name
10006f8c:	601a      	str	r2, [r3, #0]
				Collect = Author[i].collect; // pointer to list of collections
10006f8e:	6843      	ldr	r3, [r0, #4]
				CollNum = Author[i].collnum; // number of collections
10006f90:	6881      	ldr	r1, [r0, #8]
				Collect = Author[i].collect; // pointer to list of collections
10006f92:	6033      	str	r3, [r6, #0]
				CollNum = Author[i].collnum; // number of collections
10006f94:	4b33      	ldr	r3, [pc, #204]	; (10007064 <main+0x168>)
10006f96:	0020      	movs	r0, r4
10006f98:	6019      	str	r1, [r3, #0]

				i = RandU8Max(CollNum-1);
10006f9a:	3901      	subs	r1, #1
10006f9c:	b2c9      	uxtb	r1, r1
10006f9e:	f003 fa47 	bl	1000a430 <_ZN7cRandom5U8MaxEh>
10006fa2:	0003      	movs	r3, r0
10006fa4:	4a30      	ldr	r2, [pc, #192]	; (10007068 <main+0x16c>)
10006fa6:	6010      	str	r0, [r2, #0]
				CollInx = i;
				CollName = Collect[i].name; // name of collection
10006fa8:	0040      	lsls	r0, r0, #1
10006faa:	18c0      	adds	r0, r0, r3
10006fac:	6833      	ldr	r3, [r6, #0]
10006fae:	0080      	lsls	r0, r0, #2
10006fb0:	469c      	mov	ip, r3
10006fb2:	4460      	add	r0, ip
10006fb4:	6802      	ldr	r2, [r0, #0]
10006fb6:	4b2d      	ldr	r3, [pc, #180]	; (1000706c <main+0x170>)
				Levels = Collect[i].levels; // pointer to list of levels
				LevNum = Collect[i].levnum; // number of levels
10006fb8:	6881      	ldr	r1, [r0, #8]
				CollName = Collect[i].name; // name of collection
10006fba:	601a      	str	r2, [r3, #0]
				Levels = Collect[i].levels; // pointer to list of levels
10006fbc:	6843      	ldr	r3, [r0, #4]
inline u16 RandU16Max(u16 max) { return Rand.U16Max(max); }
10006fbe:	0020      	movs	r0, r4
10006fc0:	602b      	str	r3, [r5, #0]
				LevNum = Collect[i].levnum; // number of levels
10006fc2:	4653      	mov	r3, sl
10006fc4:	6019      	str	r1, [r3, #0]

				i = RandU16Max(LevNum-1);
10006fc6:	3901      	subs	r1, #1
10006fc8:	b289      	uxth	r1, r1
10006fca:	f003 fa59 	bl	1000a480 <_ZN7cRandom6U16MaxEt>
10006fce:	464b      	mov	r3, r9
10006fd0:	6018      	str	r0, [r3, #0]
				Level = i;
				LevDef = Levels[i*2]; // current level definition
10006fd2:	682b      	ldr	r3, [r5, #0]
10006fd4:	00c0      	lsls	r0, r0, #3
10006fd6:	5819      	ldr	r1, [r3, r0]
				LevSolve = Levels[i*2+1]; // current level solve
10006fd8:	1818      	adds	r0, r3, r0
10006fda:	465b      	mov	r3, fp
				LevDef = Levels[i*2]; // current level definition
10006fdc:	4a24      	ldr	r2, [pc, #144]	; (10007070 <main+0x174>)
10006fde:	6011      	str	r1, [r2, #0]
				LevSolve = Levels[i*2+1]; // current level solve
10006fe0:	6842      	ldr	r2, [r0, #4]
10006fe2:	601a      	str	r2, [r3, #0]

				BoardDim();
10006fe4:	f000 fb98 	bl	10007718 <_Z8BoardDimv>

			} while ((LevelW > 15) || (LevelH > 12));
10006fe8:	4b22      	ldr	r3, [pc, #136]	; (10007074 <main+0x178>)
10006fea:	781b      	ldrb	r3, [r3, #0]
10006fec:	2b0f      	cmp	r3, #15
10006fee:	d8c0      	bhi.n	10006f72 <main+0x76>
10006ff0:	4b21      	ldr	r3, [pc, #132]	; (10007078 <main+0x17c>)
10006ff2:	781b      	ldrb	r3, [r3, #0]
10006ff4:	2b0c      	cmp	r3, #12
10006ff6:	d8bc      	bhi.n	10006f72 <main+0x76>
			if (PlaySolve()) break;
10006ff8:	f000 fd52 	bl	10007aa0 <_Z9PlaySolvev>
10006ffc:	2800      	cmp	r0, #0
10006ffe:	d0a8      	beq.n	10006f52 <main+0x56>
		}
		AutInx = oldaut;
10007000:	4643      	mov	r3, r8
10007002:	9a01      	ldr	r2, [sp, #4]
10007004:	601a      	str	r2, [r3, #0]

		// select author
		while (AuthorSelect())
10007006:	f000 ffa7 	bl	10007f58 <_Z12AuthorSelectv>
1000700a:	2800      	cmp	r0, #0
1000700c:	d00a      	beq.n	10007024 <main+0x128>
		{
			// select collection (returns True = OK, False = Esc)
			while (CollSelect())
1000700e:	f001 f919 	bl	10008244 <_Z10CollSelectv>
10007012:	2800      	cmp	r0, #0
10007014:	d0f7      	beq.n	10007006 <main+0x10a>
			{
				// select level
				while (LevSelect())
10007016:	f001 fa57 	bl	100084c8 <_Z9LevSelectv>
1000701a:	2800      	cmp	r0, #0
1000701c:	d0f7      	beq.n	1000700e <main+0x112>
				{
					// game loop
					GameLoop();
1000701e:	f000 fe6f 	bl	10007d00 <_Z8GameLoopv>
				while (LevSelect())
10007022:	e7f8      	b.n	10007016 <main+0x11a>
		int oldaut = AutInx;
10007024:	4643      	mov	r3, r8
10007026:	681b      	ldr	r3, [r3, #0]
10007028:	9301      	str	r3, [sp, #4]
1000702a:	e792      	b.n	10006f52 <main+0x56>
1000702c:	20008ea0 	.word	0x20008ea0
10007030:	101883b4 	.word	0x101883b4
10007034:	2000bb48 	.word	0x2000bb48
10007038:	10009331 	.word	0x10009331
1000703c:	200090cc 	.word	0x200090cc
10007040:	2000cbfc 	.word	0x2000cbfc
10007044:	2000cbe8 	.word	0x2000cbe8
10007048:	2000275c 	.word	0x2000275c
1000704c:	2000cbf4 	.word	0x2000cbf4
10007050:	2000a3c4 	.word	0x2000a3c4
10007054:	2000cbf0 	.word	0x2000cbf0
10007058:	200027f8 	.word	0x200027f8
1000705c:	1000bdc8 	.word	0x1000bdc8
10007060:	200090d0 	.word	0x200090d0
10007064:	2000a3bc 	.word	0x2000a3bc
10007068:	2000a3b4 	.word	0x2000a3b4
1000706c:	2000a3b8 	.word	0x2000a3b8
10007070:	2000cbe4 	.word	0x2000cbe4
10007074:	20017325 	.word	0x20017325
10007078:	20017324 	.word	0x20017324

1000707c <_Z10SolvedAnimv.part.0>:

	return False;
}

// display solved animation (returns True of solved)
Bool SolvedAnim()
1000707c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000707e:	46de      	mov	lr, fp
10007080:	4657      	mov	r7, sl
10007082:	464e      	mov	r6, r9
10007084:	4645      	mov	r5, r8
#ifdef AUTOMODE // automode - autorun all levels to check solutions
	return True;
#endif

	// play sound
	PlaySound(YippeeSnd, sizeof(YippeeSnd));
10007086:	23fe      	movs	r3, #254	; 0xfe
Bool SolvedAnim()
10007088:	b5e0      	push	{r5, r6, r7, lr}
	PlaySound(YippeeSnd, sizeof(YippeeSnd));
1000708a:	059b      	lsls	r3, r3, #22
1000708c:	2200      	movs	r2, #0
1000708e:	4927      	ldr	r1, [pc, #156]	; (1000712c <_Z10SolvedAnimv.part.0+0xb0>)
10007090:	4827      	ldr	r0, [pc, #156]	; (10007130 <_Z10SolvedAnimv.part.0+0xb4>)
10007092:	f003 fa91 	bl	1000a5b8 <_Z9PlaySoundPKhihf>
	// animation
	int i, j;
	u8* s;
	u8 k;
	sLayer* lay = &LayerScreen[1];
	for (i = 5; i > 0; i--)
10007096:	4b27      	ldr	r3, [pc, #156]	; (10007134 <_Z10SolvedAnimv.part.0+0xb8>)
	PlaySound(YippeeSnd, sizeof(YippeeSnd));
10007098:	2405      	movs	r4, #5
1000709a:	469a      	mov	sl, r3
1000709c:	4b26      	ldr	r3, [pc, #152]	; (10007138 <_Z10SolvedAnimv.part.0+0xbc>)
		// hide boxes
		s = Board;
		for (j = MapW*MapH; j > 0; j--)
		{
			k = *s;
			if (k == FULL) *s = MARK;
1000709e:	2503      	movs	r5, #3
100070a0:	4699      	mov	r9, r3
100070a2:	4b26      	ldr	r3, [pc, #152]	; (1000713c <_Z10SolvedAnimv.part.0+0xc0>)
100070a4:	4f26      	ldr	r7, [pc, #152]	; (10007140 <_Z10SolvedAnimv.part.0+0xc4>)
100070a6:	4698      	mov	r8, r3
100070a8:	4b26      	ldr	r3, [pc, #152]	; (10007144 <_Z10SolvedAnimv.part.0+0xc8>)
100070aa:	4e27      	ldr	r6, [pc, #156]	; (10007148 <_Z10SolvedAnimv.part.0+0xcc>)
100070ac:	469b      	mov	fp, r3
		for (j = MapW*MapH; j > 0; j--)
100070ae:	464b      	mov	r3, r9
100070b0:	4652      	mov	r2, sl
100070b2:	6819      	ldr	r1, [r3, #0]
100070b4:	6813      	ldr	r3, [r2, #0]
100070b6:	4359      	muls	r1, r3
100070b8:	2900      	cmp	r1, #0
100070ba:	dd08      	ble.n	100070ce <_Z10SolvedAnimv.part.0+0x52>
		s = Board;
100070bc:	465b      	mov	r3, fp
100070be:	4459      	add	r1, fp
			if (k == FULL) *s = MARK;
100070c0:	781a      	ldrb	r2, [r3, #0]
100070c2:	2a05      	cmp	r2, #5
100070c4:	d100      	bne.n	100070c8 <_Z10SolvedAnimv.part.0+0x4c>
100070c6:	701d      	strb	r5, [r3, #0]
			s++;
100070c8:	3301      	adds	r3, #1
		for (j = MapW*MapH; j > 0; j--)
100070ca:	428b      	cmp	r3, r1
100070cc:	d1f8      	bne.n	100070c0 <_Z10SolvedAnimv.part.0+0x44>
		}

		// set winning image
		lay->img = &TilesImg_Copy[TileSize*FACE_WIN];
100070ce:	2316      	movs	r3, #22
100070d0:	683a      	ldr	r2, [r7, #0]

		// delay
		sleep_ms(100);
100070d2:	2064      	movs	r0, #100	; 0x64
		lay->img = &TilesImg_Copy[TileSize*FACE_WIN];
100070d4:	4353      	muls	r3, r2
100070d6:	4642      	mov	r2, r8
100070d8:	18f3      	adds	r3, r6, r3
100070da:	6253      	str	r3, [r2, #36]	; 0x24
		sleep_ms(100);
100070dc:	f7fd fc20 	bl	10004920 <sleep_ms>

		// show boxes
		s = Board;
		for (j = MapW*MapH; j > 0; j--)
100070e0:	464b      	mov	r3, r9
100070e2:	4652      	mov	r2, sl
100070e4:	6819      	ldr	r1, [r3, #0]
100070e6:	6813      	ldr	r3, [r2, #0]
100070e8:	4359      	muls	r1, r3
100070ea:	2900      	cmp	r1, #0
100070ec:	dd09      	ble.n	10007102 <_Z10SolvedAnimv.part.0+0x86>
		{
			k = *s;
			if (k == MARK) *s = FULL;
100070ee:	2005      	movs	r0, #5
100070f0:	4b14      	ldr	r3, [pc, #80]	; (10007144 <_Z10SolvedAnimv.part.0+0xc8>)
100070f2:	18c9      	adds	r1, r1, r3
100070f4:	781a      	ldrb	r2, [r3, #0]
100070f6:	2a03      	cmp	r2, #3
100070f8:	d100      	bne.n	100070fc <_Z10SolvedAnimv.part.0+0x80>
100070fa:	7018      	strb	r0, [r3, #0]
			s++;
100070fc:	3301      	adds	r3, #1
		for (j = MapW*MapH; j > 0; j--)
100070fe:	428b      	cmp	r3, r1
10007100:	d1f8      	bne.n	100070f4 <_Z10SolvedAnimv.part.0+0x78>
		}

		// set down image
		lay->img = &TilesImg_Copy[TileSize*FACE_D];
10007102:	683a      	ldr	r2, [r7, #0]

		// delay
		sleep_ms(100);
10007104:	2064      	movs	r0, #100	; 0x64
		lay->img = &TilesImg_Copy[TileSize*FACE_D];
10007106:	00d3      	lsls	r3, r2, #3
10007108:	189b      	adds	r3, r3, r2
1000710a:	4642      	mov	r2, r8
1000710c:	005b      	lsls	r3, r3, #1
1000710e:	18f3      	adds	r3, r6, r3
10007110:	6253      	str	r3, [r2, #36]	; 0x24
	for (i = 5; i > 0; i--)
10007112:	3c01      	subs	r4, #1
		sleep_ms(100);
10007114:	f7fd fc04 	bl	10004920 <sleep_ms>
	for (i = 5; i > 0; i--)
10007118:	2c00      	cmp	r4, #0
1000711a:	d1c8      	bne.n	100070ae <_Z10SolvedAnimv.part.0+0x32>
	}

	return True;
}
1000711c:	2001      	movs	r0, #1
1000711e:	bcf0      	pop	{r4, r5, r6, r7}
10007120:	46bb      	mov	fp, r7
10007122:	46b2      	mov	sl, r6
10007124:	46a9      	mov	r9, r5
10007126:	46a0      	mov	r8, r4
10007128:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000712a:	46c0      	nop			; (mov r8, r8)
1000712c:	000045ee 	.word	0x000045ee
10007130:	10183a70 	.word	0x10183a70
10007134:	2000e548 	.word	0x2000e548
10007138:	2000e544 	.word	0x2000e544
1000713c:	2000cb54 	.word	0x2000cb54
10007140:	20010a18 	.word	0x20010a18
10007144:	200090d4 	.word	0x200090d4
10007148:	20010a1c 	.word	0x20010a1c

1000714c <_Z10MovePlayerh>:
{
1000714c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000714e:	46de      	mov	lr, fp
10007150:	4657      	mov	r7, sl
10007152:	464e      	mov	r6, r9
10007154:	4645      	mov	r5, r8
10007156:	b5e0      	push	{r5, r6, r7, lr}
10007158:	b087      	sub	sp, #28
	int dx = (dir == DIR_L) ? -1 : ((dir == DIR_R) ? 1 : 0);
1000715a:	2802      	cmp	r0, #2
1000715c:	d00c      	beq.n	10007178 <_Z10MovePlayerh+0x2c>
1000715e:	4243      	negs	r3, r0
10007160:	4143      	adcs	r3, r0
10007162:	b2db      	uxtb	r3, r3
10007164:	9301      	str	r3, [sp, #4]
	PosX += dx;
10007166:	9304      	str	r3, [sp, #16]
	int dy = (dir == DIR_U) ? -1 : ((dir == DIR_D) ? 1 : 0);
10007168:	2801      	cmp	r0, #1
1000716a:	d10a      	bne.n	10007182 <_Z10MovePlayerh+0x36>
	PosX += dx;
1000716c:	23ff      	movs	r3, #255	; 0xff
1000716e:	9305      	str	r3, [sp, #20]
	int dy = (dir == DIR_U) ? -1 : ((dir == DIR_D) ? 1 : 0);
10007170:	3b01      	subs	r3, #1
10007172:	3bff      	subs	r3, #255	; 0xff
10007174:	9302      	str	r3, [sp, #8]
10007176:	e00a      	b.n	1000718e <_Z10MovePlayerh+0x42>
10007178:	23ff      	movs	r3, #255	; 0xff
1000717a:	9304      	str	r3, [sp, #16]
	int dx = (dir == DIR_L) ? -1 : ((dir == DIR_R) ? 1 : 0);
1000717c:	3b01      	subs	r3, #1
1000717e:	3bff      	subs	r3, #255	; 0xff
10007180:	9301      	str	r3, [sp, #4]
	int dy = (dir == DIR_U) ? -1 : ((dir == DIR_D) ? 1 : 0);
10007182:	1ec3      	subs	r3, r0, #3
10007184:	425a      	negs	r2, r3
10007186:	4153      	adcs	r3, r2
10007188:	b2db      	uxtb	r3, r3
1000718a:	9302      	str	r3, [sp, #8]
	PosY += dy;
1000718c:	9305      	str	r3, [sp, #20]
	lay->init = VGAKEY((x-OffX)*Vmode.cpp, TileSize, 65);
1000718e:	2100      	movs	r1, #0
	int x = PosX*TileSize;
10007190:	4b81      	ldr	r3, [pc, #516]	; (10007398 <_Z10MovePlayerh+0x24c>)
	lay->init = VGAKEY((x-OffX)*Vmode.cpp, TileSize, 65);
10007192:	4c82      	ldr	r4, [pc, #520]	; (1000739c <_Z10MovePlayerh+0x250>)
	int x = PosX*TileSize;
10007194:	469a      	mov	sl, r3
10007196:	681a      	ldr	r2, [r3, #0]
10007198:	4b81      	ldr	r3, [pc, #516]	; (100073a0 <_Z10MovePlayerh+0x254>)
	u8 tile = FACE_R + dir*4;
1000719a:	0080      	lsls	r0, r0, #2
	int x = PosX*TileSize;
1000719c:	781e      	ldrb	r6, [r3, #0]
	int y = PosY*TileSize;
1000719e:	4b81      	ldr	r3, [pc, #516]	; (100073a4 <_Z10MovePlayerh+0x258>)
	int x = PosX*TileSize;
100071a0:	4356      	muls	r6, r2
	int y = PosY*TileSize;
100071a2:	781d      	ldrb	r5, [r3, #0]
	lay->init = VGAKEY((x-OffX)*Vmode.cpp, TileSize, 65);
100071a4:	4b80      	ldr	r3, [pc, #512]	; (100073a8 <_Z10MovePlayerh+0x25c>)
	int y = PosY*TileSize;
100071a6:	4355      	muls	r5, r2
	lay->init = VGAKEY((x-OffX)*Vmode.cpp, TileSize, 65);
100071a8:	5659      	ldrsb	r1, [r3, r1]
100071aa:	4b80      	ldr	r3, [pc, #512]	; (100073ac <_Z10MovePlayerh+0x260>)
100071ac:	1a71      	subs	r1, r6, r1
100071ae:	8adb      	ldrh	r3, [r3, #22]
	u8 tile = FACE_R + dir*4;
100071b0:	3006      	adds	r0, #6
	lay->init = VGAKEY((x-OffX)*Vmode.cpp, TileSize, 65);
100071b2:	434b      	muls	r3, r1
100071b4:	3301      	adds	r3, #1
100071b6:	1e51      	subs	r1, r2, #1
100071b8:	04db      	lsls	r3, r3, #19
100071ba:	430b      	orrs	r3, r1
100071bc:	2182      	movs	r1, #130	; 0x82
100071be:	0289      	lsls	r1, r1, #10
100071c0:	430b      	orrs	r3, r1
100071c2:	62e3      	str	r3, [r4, #44]	; 0x2c
	lay->y = y-OffY;
100071c4:	4b7a      	ldr	r3, [pc, #488]	; (100073b0 <_Z10MovePlayerh+0x264>)
	u8 tile = FACE_R + dir*4;
100071c6:	b2c7      	uxtb	r7, r0
	lay->y = y-OffY;
100071c8:	781b      	ldrb	r3, [r3, #0]
	lay->img = &TilesImg_Copy[TileSize*tile];
100071ca:	437a      	muls	r2, r7
	lay->y = y-OffY;
100071cc:	b25b      	sxtb	r3, r3
100071ce:	1aeb      	subs	r3, r5, r3
100071d0:	8723      	strh	r3, [r4, #56]	; 0x38
	lay->img = &TilesImg_Copy[TileSize*tile];
100071d2:	4b78      	ldr	r3, [pc, #480]	; (100073b4 <_Z10MovePlayerh+0x268>)
	sleep_ms(MOVESPEED);
100071d4:	201e      	movs	r0, #30
	lay->img = &TilesImg_Copy[TileSize*tile];
100071d6:	469c      	mov	ip, r3
	lay->on = True;
100071d8:	2346      	movs	r3, #70	; 0x46
100071da:	4699      	mov	r9, r3
100071dc:	3b45      	subs	r3, #69	; 0x45
100071de:	4698      	mov	r8, r3
	lay->img = &TilesImg_Copy[TileSize*tile];
100071e0:	4462      	add	r2, ip
	lay->on = True;
100071e2:	464b      	mov	r3, r9
	lay->img = &TilesImg_Copy[TileSize*tile];
100071e4:	6262      	str	r2, [r4, #36]	; 0x24
	lay->on = True;
100071e6:	4642      	mov	r2, r8
100071e8:	54e2      	strb	r2, [r4, r3]
	lay->img = &TilesImg_Copy[TileSize*tile];
100071ea:	9703      	str	r7, [sp, #12]
	sleep_ms(MOVESPEED);
100071ec:	f7fd fb98 	bl	10004920 <sleep_ms>
	x += dx*(TileSize/4);
100071f0:	4653      	mov	r3, sl
100071f2:	2703      	movs	r7, #3
100071f4:	681a      	ldr	r2, [r3, #0]
100071f6:	9901      	ldr	r1, [sp, #4]
100071f8:	17d3      	asrs	r3, r2, #31
100071fa:	403b      	ands	r3, r7
100071fc:	189b      	adds	r3, r3, r2
100071fe:	109b      	asrs	r3, r3, #2
10007200:	4359      	muls	r1, r3
10007202:	468b      	mov	fp, r1
	lay->init = VGAKEY((x-OffX)*Vmode.cpp, TileSize, 65);
10007204:	2100      	movs	r1, #0
	x += dx*(TileSize/4);
10007206:	44b3      	add	fp, r6
	y += dy*(TileSize/4);
10007208:	9e02      	ldr	r6, [sp, #8]
	lay->init = VGAKEY((x-OffX)*Vmode.cpp, TileSize, 65);
1000720a:	2082      	movs	r0, #130	; 0x82
	y += dy*(TileSize/4);
1000720c:	4373      	muls	r3, r6
1000720e:	195d      	adds	r5, r3, r5
	lay->init = VGAKEY((x-OffX)*Vmode.cpp, TileSize, 65);
10007210:	4b65      	ldr	r3, [pc, #404]	; (100073a8 <_Z10MovePlayerh+0x25c>)
10007212:	0280      	lsls	r0, r0, #10
10007214:	5659      	ldrsb	r1, [r3, r1]
10007216:	465b      	mov	r3, fp
10007218:	1a59      	subs	r1, r3, r1
1000721a:	4b64      	ldr	r3, [pc, #400]	; (100073ac <_Z10MovePlayerh+0x260>)
	lay->img = &TilesImg_Copy[TileSize*tile];
1000721c:	9e03      	ldr	r6, [sp, #12]
	lay->init = VGAKEY((x-OffX)*Vmode.cpp, TileSize, 65);
1000721e:	8adb      	ldrh	r3, [r3, #22]
10007220:	434b      	muls	r3, r1
10007222:	3301      	adds	r3, #1
10007224:	1e51      	subs	r1, r2, #1
10007226:	04db      	lsls	r3, r3, #19
10007228:	430b      	orrs	r3, r1
1000722a:	4303      	orrs	r3, r0
1000722c:	62e3      	str	r3, [r4, #44]	; 0x2c
	lay->y = y-OffY;
1000722e:	4b60      	ldr	r3, [pc, #384]	; (100073b0 <_Z10MovePlayerh+0x264>)
	lay->img = &TilesImg_Copy[TileSize*tile];
10007230:	4372      	muls	r2, r6
	lay->y = y-OffY;
10007232:	781b      	ldrb	r3, [r3, #0]
	sleep_ms(MOVESPEED);
10007234:	201e      	movs	r0, #30
	lay->y = y-OffY;
10007236:	b25b      	sxtb	r3, r3
10007238:	1aeb      	subs	r3, r5, r3
1000723a:	8723      	strh	r3, [r4, #56]	; 0x38
	lay->img = &TilesImg_Copy[TileSize*tile];
1000723c:	4b5d      	ldr	r3, [pc, #372]	; (100073b4 <_Z10MovePlayerh+0x268>)
1000723e:	469c      	mov	ip, r3
10007240:	4462      	add	r2, ip
	lay->on = True;
10007242:	4643      	mov	r3, r8
	lay->img = &TilesImg_Copy[TileSize*tile];
10007244:	6262      	str	r2, [r4, #36]	; 0x24
	lay->on = True;
10007246:	464a      	mov	r2, r9
10007248:	54a3      	strb	r3, [r4, r2]
	sleep_ms(MOVESPEED);
1000724a:	f7fd fb69 	bl	10004920 <sleep_ms>
	x += dx*(TileSize/4);
1000724e:	4652      	mov	r2, sl
10007250:	6812      	ldr	r2, [r2, #0]
	y += dy*(TileSize/4);
10007252:	9902      	ldr	r1, [sp, #8]
	x += dx*(TileSize/4);
10007254:	17d6      	asrs	r6, r2, #31
10007256:	403e      	ands	r6, r7
10007258:	9b01      	ldr	r3, [sp, #4]
1000725a:	18b6      	adds	r6, r6, r2
1000725c:	10b6      	asrs	r6, r6, #2
1000725e:	4373      	muls	r3, r6
	y += dy*(TileSize/4);
10007260:	434e      	muls	r6, r1
	x += dx*(TileSize/4);
10007262:	449b      	add	fp, r3
	y += dy*(TileSize/4);
10007264:	1976      	adds	r6, r6, r5
	u8 tile2 = tile + ((((PosX+PosY)&1) == 0) ? 1 : 3);
10007266:	4b4f      	ldr	r3, [pc, #316]	; (100073a4 <_Z10MovePlayerh+0x258>)
10007268:	4d4d      	ldr	r5, [pc, #308]	; (100073a0 <_Z10MovePlayerh+0x254>)
1000726a:	781b      	ldrb	r3, [r3, #0]
1000726c:	782d      	ldrb	r5, [r5, #0]
	lay->init = VGAKEY((x-OffX)*Vmode.cpp, TileSize, 65);
1000726e:	2100      	movs	r1, #0
	u8 tile2 = tile + ((((PosX+PosY)&1) == 0) ? 1 : 3);
10007270:	18ed      	adds	r5, r5, r3
10007272:	4643      	mov	r3, r8
10007274:	401d      	ands	r5, r3
10007276:	3d01      	subs	r5, #1
10007278:	439d      	bics	r5, r3
	lay->init = VGAKEY((x-OffX)*Vmode.cpp, TileSize, 65);
1000727a:	4b4b      	ldr	r3, [pc, #300]	; (100073a8 <_Z10MovePlayerh+0x25c>)
1000727c:	2082      	movs	r0, #130	; 0x82
1000727e:	5659      	ldrsb	r1, [r3, r1]
10007280:	465b      	mov	r3, fp
10007282:	1a59      	subs	r1, r3, r1
10007284:	4b49      	ldr	r3, [pc, #292]	; (100073ac <_Z10MovePlayerh+0x260>)
10007286:	0280      	lsls	r0, r0, #10
10007288:	8adb      	ldrh	r3, [r3, #22]
	u8 tile2 = tile + ((((PosX+PosY)&1) == 0) ? 1 : 3);
1000728a:	3503      	adds	r5, #3
	lay->init = VGAKEY((x-OffX)*Vmode.cpp, TileSize, 65);
1000728c:	434b      	muls	r3, r1
1000728e:	3301      	adds	r3, #1
10007290:	1e51      	subs	r1, r2, #1
10007292:	04db      	lsls	r3, r3, #19
10007294:	430b      	orrs	r3, r1
	u8 tile2 = tile + ((((PosX+PosY)&1) == 0) ? 1 : 3);
10007296:	9903      	ldr	r1, [sp, #12]
	lay->init = VGAKEY((x-OffX)*Vmode.cpp, TileSize, 65);
10007298:	4303      	orrs	r3, r0
	u8 tile2 = tile + ((((PosX+PosY)&1) == 0) ? 1 : 3);
1000729a:	468c      	mov	ip, r1
	lay->init = VGAKEY((x-OffX)*Vmode.cpp, TileSize, 65);
1000729c:	62e3      	str	r3, [r4, #44]	; 0x2c
	lay->y = y-OffY;
1000729e:	4b44      	ldr	r3, [pc, #272]	; (100073b0 <_Z10MovePlayerh+0x264>)
	u8 tile2 = tile + ((((PosX+PosY)&1) == 0) ? 1 : 3);
100072a0:	4465      	add	r5, ip
	lay->y = y-OffY;
100072a2:	781b      	ldrb	r3, [r3, #0]
	lay->img = &TilesImg_Copy[TileSize*tile];
100072a4:	b2ed      	uxtb	r5, r5
	lay->y = y-OffY;
100072a6:	b25b      	sxtb	r3, r3
100072a8:	1af3      	subs	r3, r6, r3
100072aa:	8723      	strh	r3, [r4, #56]	; 0x38
	lay->img = &TilesImg_Copy[TileSize*tile];
100072ac:	4b41      	ldr	r3, [pc, #260]	; (100073b4 <_Z10MovePlayerh+0x268>)
100072ae:	436a      	muls	r2, r5
100072b0:	469c      	mov	ip, r3
100072b2:	4462      	add	r2, ip
	lay->on = True;
100072b4:	4643      	mov	r3, r8
	lay->img = &TilesImg_Copy[TileSize*tile];
100072b6:	6262      	str	r2, [r4, #36]	; 0x24
	lay->on = True;
100072b8:	464a      	mov	r2, r9
	sleep_ms(MOVESPEED);
100072ba:	201e      	movs	r0, #30
	lay->on = True;
100072bc:	54a3      	strb	r3, [r4, r2]
	sleep_ms(MOVESPEED);
100072be:	f7fd fb2f 	bl	10004920 <sleep_ms>
	x += dx*(TileSize/4);
100072c2:	4652      	mov	r2, sl
100072c4:	6812      	ldr	r2, [r2, #0]
100072c6:	9901      	ldr	r1, [sp, #4]
100072c8:	17d3      	asrs	r3, r2, #31
100072ca:	403b      	ands	r3, r7
100072cc:	189b      	adds	r3, r3, r2
100072ce:	109b      	asrs	r3, r3, #2
100072d0:	4359      	muls	r1, r3
100072d2:	448b      	add	fp, r1
	lay->init = VGAKEY((x-OffX)*Vmode.cpp, TileSize, 65);
100072d4:	2100      	movs	r1, #0
	y += dy*(TileSize/4);
100072d6:	9802      	ldr	r0, [sp, #8]
	lay->img = &TilesImg_Copy[TileSize*tile];
100072d8:	4355      	muls	r5, r2
	y += dy*(TileSize/4);
100072da:	4343      	muls	r3, r0
100072dc:	199e      	adds	r6, r3, r6
	lay->init = VGAKEY((x-OffX)*Vmode.cpp, TileSize, 65);
100072de:	4b32      	ldr	r3, [pc, #200]	; (100073a8 <_Z10MovePlayerh+0x25c>)
100072e0:	2082      	movs	r0, #130	; 0x82
100072e2:	5659      	ldrsb	r1, [r3, r1]
100072e4:	465b      	mov	r3, fp
100072e6:	1a59      	subs	r1, r3, r1
100072e8:	4b30      	ldr	r3, [pc, #192]	; (100073ac <_Z10MovePlayerh+0x260>)
100072ea:	0280      	lsls	r0, r0, #10
100072ec:	8adb      	ldrh	r3, [r3, #22]
100072ee:	434b      	muls	r3, r1
100072f0:	3301      	adds	r3, #1
100072f2:	1e51      	subs	r1, r2, #1
100072f4:	04db      	lsls	r3, r3, #19
	lay->img = &TilesImg_Copy[TileSize*tile];
100072f6:	4a2f      	ldr	r2, [pc, #188]	; (100073b4 <_Z10MovePlayerh+0x268>)
	lay->init = VGAKEY((x-OffX)*Vmode.cpp, TileSize, 65);
100072f8:	430b      	orrs	r3, r1
	lay->img = &TilesImg_Copy[TileSize*tile];
100072fa:	4694      	mov	ip, r2
	lay->init = VGAKEY((x-OffX)*Vmode.cpp, TileSize, 65);
100072fc:	4303      	orrs	r3, r0
100072fe:	62e3      	str	r3, [r4, #44]	; 0x2c
	lay->y = y-OffY;
10007300:	2300      	movs	r3, #0
10007302:	482b      	ldr	r0, [pc, #172]	; (100073b0 <_Z10MovePlayerh+0x264>)
	lay->img = &TilesImg_Copy[TileSize*tile];
10007304:	4465      	add	r5, ip
	lay->y = y-OffY;
10007306:	56c3      	ldrsb	r3, [r0, r3]
	lay->on = True;
10007308:	4642      	mov	r2, r8
	lay->img = &TilesImg_Copy[TileSize*tile];
1000730a:	6265      	str	r5, [r4, #36]	; 0x24
	lay->on = True;
1000730c:	464d      	mov	r5, r9
1000730e:	5562      	strb	r2, [r4, r5]
	x += dx*(TileSize/4);
10007310:	4655      	mov	r5, sl
	lay->y = y-OffY;
10007312:	1af3      	subs	r3, r6, r3
10007314:	8723      	strh	r3, [r4, #56]	; 0x38
	sleep_ms(MOVESPEED);
10007316:	201e      	movs	r0, #30
10007318:	f7fd fb02 	bl	10004920 <sleep_ms>
	x += dx*(TileSize/4);
1000731c:	6828      	ldr	r0, [r5, #0]
	PosX += dx;
1000731e:	4d20      	ldr	r5, [pc, #128]	; (100073a0 <_Z10MovePlayerh+0x254>)
	x += dx*(TileSize/4);
10007320:	17c3      	asrs	r3, r0, #31
10007322:	401f      	ands	r7, r3
	PosX += dx;
10007324:	782b      	ldrb	r3, [r5, #0]
10007326:	9d04      	ldr	r5, [sp, #16]
	lay->init = VGAKEY((x-OffX)*Vmode.cpp, TileSize, 65);
10007328:	2200      	movs	r2, #0
	PosX += dx;
1000732a:	46ac      	mov	ip, r5
1000732c:	4d1c      	ldr	r5, [pc, #112]	; (100073a0 <_Z10MovePlayerh+0x254>)
1000732e:	4463      	add	r3, ip
10007330:	702b      	strb	r3, [r5, #0]
	PosY += dy;
10007332:	4d1c      	ldr	r5, [pc, #112]	; (100073a4 <_Z10MovePlayerh+0x258>)
	x += dx*(TileSize/4);
10007334:	183f      	adds	r7, r7, r0
	PosY += dy;
10007336:	782b      	ldrb	r3, [r5, #0]
10007338:	9d05      	ldr	r5, [sp, #20]
	x += dx*(TileSize/4);
1000733a:	10bf      	asrs	r7, r7, #2
	PosY += dy;
1000733c:	46ac      	mov	ip, r5
1000733e:	4d19      	ldr	r5, [pc, #100]	; (100073a4 <_Z10MovePlayerh+0x258>)
10007340:	4463      	add	r3, ip
10007342:	702b      	strb	r3, [r5, #0]
	x += dx*(TileSize/4);
10007344:	9b01      	ldr	r3, [sp, #4]
	lay->init = VGAKEY((x-OffX)*Vmode.cpp, TileSize, 65);
10007346:	4d18      	ldr	r5, [pc, #96]	; (100073a8 <_Z10MovePlayerh+0x25c>)
	x += dx*(TileSize/4);
10007348:	437b      	muls	r3, r7
	lay->init = VGAKEY((x-OffX)*Vmode.cpp, TileSize, 65);
1000734a:	56aa      	ldrsb	r2, [r5, r2]
1000734c:	4d17      	ldr	r5, [pc, #92]	; (100073ac <_Z10MovePlayerh+0x260>)
	x += dx*(TileSize/4);
1000734e:	445b      	add	r3, fp
	lay->init = VGAKEY((x-OffX)*Vmode.cpp, TileSize, 65);
10007350:	1a9b      	subs	r3, r3, r2
10007352:	8aea      	ldrh	r2, [r5, #22]
	lay->img = &TilesImg_Copy[TileSize*tile];
10007354:	9903      	ldr	r1, [sp, #12]
	lay->init = VGAKEY((x-OffX)*Vmode.cpp, TileSize, 65);
10007356:	4353      	muls	r3, r2
10007358:	3301      	adds	r3, #1
1000735a:	1e42      	subs	r2, r0, #1
1000735c:	04db      	lsls	r3, r3, #19
1000735e:	4313      	orrs	r3, r2
10007360:	2282      	movs	r2, #130	; 0x82
10007362:	0292      	lsls	r2, r2, #10
10007364:	4313      	orrs	r3, r2
10007366:	62e3      	str	r3, [r4, #44]	; 0x2c
	y += dy*(TileSize/4);
10007368:	9b02      	ldr	r3, [sp, #8]
	lay->on = True;
1000736a:	4642      	mov	r2, r8
	y += dy*(TileSize/4);
1000736c:	435f      	muls	r7, r3
1000736e:	19be      	adds	r6, r7, r6
	lay->y = y-OffY;
10007370:	2700      	movs	r7, #0
10007372:	4b0f      	ldr	r3, [pc, #60]	; (100073b0 <_Z10MovePlayerh+0x264>)
	lay->img = &TilesImg_Copy[TileSize*tile];
10007374:	4348      	muls	r0, r1
	lay->y = y-OffY;
10007376:	57df      	ldrsb	r7, [r3, r7]
	lay->img = &TilesImg_Copy[TileSize*tile];
10007378:	4b0e      	ldr	r3, [pc, #56]	; (100073b4 <_Z10MovePlayerh+0x268>)
	lay->y = y-OffY;
1000737a:	1bf6      	subs	r6, r6, r7
	lay->img = &TilesImg_Copy[TileSize*tile];
1000737c:	469c      	mov	ip, r3
	lay->on = True;
1000737e:	464b      	mov	r3, r9
	lay->img = &TilesImg_Copy[TileSize*tile];
10007380:	4460      	add	r0, ip
	lay->y = y-OffY;
10007382:	8726      	strh	r6, [r4, #56]	; 0x38
	lay->img = &TilesImg_Copy[TileSize*tile];
10007384:	6260      	str	r0, [r4, #36]	; 0x24
	lay->on = True;
10007386:	54e2      	strb	r2, [r4, r3]
}
10007388:	b007      	add	sp, #28
1000738a:	bcf0      	pop	{r4, r5, r6, r7}
1000738c:	46bb      	mov	fp, r7
1000738e:	46b2      	mov	sl, r6
10007390:	46a9      	mov	r9, r5
10007392:	46a0      	mov	r8, r4
10007394:	bdf0      	pop	{r4, r5, r6, r7, pc}
10007396:	46c0      	nop			; (mov r8, r8)
10007398:	20010a18 	.word	0x20010a18
1000739c:	2000cb54 	.word	0x2000cb54
100073a0:	2001732a 	.word	0x2001732a
100073a4:	2001732b 	.word	0x2001732b
100073a8:	20017328 	.word	0x20017328
100073ac:	20016620 	.word	0x20016620
100073b0:	20017329 	.word	0x20017329
100073b4:	20010a1c 	.word	0x20010a1c

100073b8 <_Z10LevelVmodev>:
{
100073b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100073ba:	46ce      	mov	lr, r9
100073bc:	4647      	mov	r7, r8
	TileSize = 32;
100073be:	2320      	movs	r3, #32
100073c0:	4a7a      	ldr	r2, [pc, #488]	; (100075ac <_Z10LevelVmodev+0x1f4>)
{
100073c2:	b580      	push	{r7, lr}
	MapW = WIDTH/TileSize;
100073c4:	487a      	ldr	r0, [pc, #488]	; (100075b0 <_Z10LevelVmodev+0x1f8>)
	MapH = HEIGHT/TileSize;
100073c6:	4c7b      	ldr	r4, [pc, #492]	; (100075b4 <_Z10LevelVmodev+0x1fc>)
	TileSize = 32;
100073c8:	6013      	str	r3, [r2, #0]
	MapW = WIDTH/TileSize;
100073ca:	3b0c      	subs	r3, #12
100073cc:	6003      	str	r3, [r0, #0]
	MapH = HEIGHT/TileSize;
100073ce:	3b05      	subs	r3, #5
100073d0:	6023      	str	r3, [r4, #0]
	if ((LevelW > MapW) || (LevelH > MapH))
100073d2:	4b79      	ldr	r3, [pc, #484]	; (100075b8 <_Z10LevelVmodev+0x200>)
100073d4:	4699      	mov	r9, r3
100073d6:	7819      	ldrb	r1, [r3, #0]
100073d8:	4b78      	ldr	r3, [pc, #480]	; (100075bc <_Z10LevelVmodev+0x204>)
100073da:	4698      	mov	r8, r3
100073dc:	781d      	ldrb	r5, [r3, #0]
100073de:	2914      	cmp	r1, #20
100073e0:	dc00      	bgt.n	100073e4 <_Z10LevelVmodev+0x2c>
100073e2:	e08e      	b.n	10007502 <_Z10LevelVmodev+0x14a>
		TileSize = 28;
100073e4:	231c      	movs	r3, #28
100073e6:	6013      	str	r3, [r2, #0]
		MapW = WIDTH/TileSize;
100073e8:	3b06      	subs	r3, #6
100073ea:	6003      	str	r3, [r0, #0]
		MapH = HEIGHT/TileSize;
100073ec:	3b05      	subs	r3, #5
	if ((LevelW > MapW) || (LevelH > MapH))
100073ee:	46ac      	mov	ip, r5
		MapH = HEIGHT/TileSize;
100073f0:	6023      	str	r3, [r4, #0]
	if ((LevelW > MapW) || (LevelH > MapH))
100073f2:	2916      	cmp	r1, #22
100073f4:	dc00      	bgt.n	100073f8 <_Z10LevelVmodev+0x40>
100073f6:	e09c      	b.n	10007532 <_Z10LevelVmodev+0x17a>
		MapW = WIDTH/TileSize;
100073f8:	261a      	movs	r6, #26
		TileSize = 24;
100073fa:	2318      	movs	r3, #24
		MapW = WIDTH/TileSize;
100073fc:	6006      	str	r6, [r0, #0]
		MapH = HEIGHT/TileSize;
100073fe:	3e06      	subs	r6, #6
		TileSize = 24;
10007400:	6013      	str	r3, [r2, #0]
		MapH = HEIGHT/TileSize;
10007402:	6026      	str	r6, [r4, #0]
	if ((LevelW > MapW) || (LevelH > MapH))
10007404:	291a      	cmp	r1, #26
10007406:	dc00      	bgt.n	1000740a <_Z10LevelVmodev+0x52>
10007408:	e099      	b.n	1000753e <_Z10LevelVmodev+0x186>
		TileSize = 20;
1000740a:	6016      	str	r6, [r2, #0]
		MapW = WIDTH/TileSize;
1000740c:	2620      	movs	r6, #32
		MapH = HEIGHT/TileSize;
1000740e:	6023      	str	r3, [r4, #0]
		MapW = WIDTH/TileSize;
10007410:	6006      	str	r6, [r0, #0]
	if ((LevelW > MapW) || (LevelH > MapH))
10007412:	2920      	cmp	r1, #32
10007414:	dc00      	bgt.n	10007418 <_Z10LevelVmodev+0x60>
10007416:	e098      	b.n	1000754a <_Z10LevelVmodev+0x192>
		TileSize = 16;
10007418:	2310      	movs	r3, #16
		MapH = HEIGHT/TileSize;
1000741a:	261e      	movs	r6, #30
		TileSize = 16;
1000741c:	6013      	str	r3, [r2, #0]
		MapW = WIDTH/TileSize;
1000741e:	3318      	adds	r3, #24
10007420:	6003      	str	r3, [r0, #0]
		MapH = HEIGHT/TileSize;
10007422:	6026      	str	r6, [r4, #0]
	if ((LevelW > MapW) || (LevelH > MapH))
10007424:	2928      	cmp	r1, #40	; 0x28
10007426:	dc00      	bgt.n	1000742a <_Z10LevelVmodev+0x72>
10007428:	e097      	b.n	1000755a <_Z10LevelVmodev+0x1a2>
		TileSize = 12;
1000742a:	260c      	movs	r6, #12
1000742c:	6016      	str	r6, [r2, #0]
		MapW = WIDTH/TileSize;
1000742e:	3629      	adds	r6, #41	; 0x29
10007430:	6006      	str	r6, [r0, #0]
		MapH = HEIGHT/TileSize;
10007432:	6023      	str	r3, [r4, #0]
	if ((LevelW > MapW) || (LevelH > MapH))
10007434:	2935      	cmp	r1, #53	; 0x35
10007436:	dc00      	bgt.n	1000743a <_Z10LevelVmodev+0x82>
10007438:	e097      	b.n	1000756a <_Z10LevelVmodev+0x1b2>
		TileSize = 8;
1000743a:	2308      	movs	r3, #8
		MapH = HEIGHT/TileSize;
1000743c:	263c      	movs	r6, #60	; 0x3c
		TileSize = 8;
1000743e:	6013      	str	r3, [r2, #0]
		MapW = WIDTH/TileSize;
10007440:	3348      	adds	r3, #72	; 0x48
10007442:	6003      	str	r3, [r0, #0]
		MapH = HEIGHT/TileSize;
10007444:	6026      	str	r6, [r4, #0]
	if (LevelW > MapW) LevelW = MapW;
10007446:	2950      	cmp	r1, #80	; 0x50
10007448:	dc00      	bgt.n	1000744c <_Z10LevelVmodev+0x94>
1000744a:	e096      	b.n	1000757a <_Z10LevelVmodev+0x1c2>
1000744c:	4649      	mov	r1, r9
1000744e:	2600      	movs	r6, #0
10007450:	700b      	strb	r3, [r1, #0]
10007452:	2100      	movs	r1, #0
	if (LevelH > MapH) LevelH = MapH;
10007454:	2d3c      	cmp	r5, #60	; 0x3c
10007456:	dc00      	bgt.n	1000745a <_Z10LevelVmodev+0xa2>
10007458:	e06e      	b.n	10007538 <_Z10LevelVmodev+0x180>
1000745a:	4645      	mov	r5, r8
1000745c:	233c      	movs	r3, #60	; 0x3c
1000745e:	702b      	strb	r3, [r5, #0]
10007460:	253c      	movs	r5, #60	; 0x3c
10007462:	2704      	movs	r7, #4
10007464:	46ac      	mov	ip, r5
	LevelX = (MapW - LevelW)/2;
10007466:	4d56      	ldr	r5, [pc, #344]	; (100075c0 <_Z10LevelVmodev+0x208>)
10007468:	702e      	strb	r6, [r5, #0]
	LevelY = (MapH - LevelH)/2;
1000746a:	4665      	mov	r5, ip
1000746c:	1b5b      	subs	r3, r3, r5
1000746e:	0fdd      	lsrs	r5, r3, #31
10007470:	18ed      	adds	r5, r5, r3
	OffY = - ((MapH - LevelH) & 1) * (TileSize/2);
10007472:	07db      	lsls	r3, r3, #31
10007474:	17db      	asrs	r3, r3, #31
10007476:	437b      	muls	r3, r7
	LevelY = (MapH - LevelH)/2;
10007478:	4e52      	ldr	r6, [pc, #328]	; (100075c4 <_Z10LevelVmodev+0x20c>)
1000747a:	106d      	asrs	r5, r5, #1
1000747c:	7035      	strb	r5, [r6, #0]
	OffY = - ((MapH - LevelH) & 1) * (TileSize/2);
1000747e:	4d52      	ldr	r5, [pc, #328]	; (100075c8 <_Z10LevelVmodev+0x210>)
	lay->on = False;
10007480:	2700      	movs	r7, #0
	OffY = - ((MapH - LevelH) & 1) * (TileSize/2);
10007482:	702b      	strb	r3, [r5, #0]
	lay->on = False;
10007484:	2346      	movs	r3, #70	; 0x46
	OffX = - ((MapW - LevelW) & 1) * (TileSize/2);
10007486:	4e51      	ldr	r6, [pc, #324]	; (100075cc <_Z10LevelVmodev+0x214>)
10007488:	7031      	strb	r1, [r6, #0]
	lay->on = False;
1000748a:	4951      	ldr	r1, [pc, #324]	; (100075d0 <_Z10LevelVmodev+0x218>)
1000748c:	54cf      	strb	r7, [r1, r3]
1000748e:	f3bf 8f5f 	dmb	sy
 	lay->img = &TilesImg_Copy[TileSize*FACE_D];
10007492:	6813      	ldr	r3, [r2, #0]
10007494:	4f4f      	ldr	r7, [pc, #316]	; (100075d4 <_Z10LevelVmodev+0x21c>)
10007496:	00da      	lsls	r2, r3, #3
10007498:	18d2      	adds	r2, r2, r3
1000749a:	0052      	lsls	r2, r2, #1
1000749c:	19d2      	adds	r2, r2, r7
1000749e:	624a      	str	r2, [r1, #36]	; 0x24
	lay->init = VGAKEY(((TileSize-1)*MapW/2-OffX)*Vmode.cpp, TileSize, 65);
100074a0:	6802      	ldr	r2, [r0, #0]
100074a2:	1e5f      	subs	r7, r3, #1
100074a4:	437a      	muls	r2, r7
100074a6:	0fd0      	lsrs	r0, r2, #31
100074a8:	1880      	adds	r0, r0, r2
100074aa:	2200      	movs	r2, #0
100074ac:	56b2      	ldrsb	r2, [r6, r2]
100074ae:	2682      	movs	r6, #130	; 0x82
100074b0:	1040      	asrs	r0, r0, #1
100074b2:	1a80      	subs	r0, r0, r2
100074b4:	4a48      	ldr	r2, [pc, #288]	; (100075d8 <_Z10LevelVmodev+0x220>)
100074b6:	02b6      	lsls	r6, r6, #10
100074b8:	8ad2      	ldrh	r2, [r2, #22]
	lay->x = (TileSize-1)*MapW/2 - OffX;
100074ba:	86c8      	strh	r0, [r1, #54]	; 0x36
	lay->init = VGAKEY(((TileSize-1)*MapW/2-OffX)*Vmode.cpp, TileSize, 65);
100074bc:	4342      	muls	r2, r0
100074be:	3201      	adds	r2, #1
100074c0:	04d2      	lsls	r2, r2, #19
100074c2:	433a      	orrs	r2, r7
100074c4:	4332      	orrs	r2, r6
	lay->trans = TileSize/4;
100074c6:	2603      	movs	r6, #3
	lay->y = (TileSize-1)*MapH/2 - OffY;
100074c8:	2000      	movs	r0, #0
	lay->init = VGAKEY(((TileSize-1)*MapW/2-OffX)*Vmode.cpp, TileSize, 65);
100074ca:	62ca      	str	r2, [r1, #44]	; 0x2c
	lay->trans = TileSize/4;
100074cc:	17da      	asrs	r2, r3, #31
100074ce:	4016      	ands	r6, r2
	lay->y = (TileSize-1)*MapH/2 - OffY;
100074d0:	6822      	ldr	r2, [r4, #0]
	lay->trans = TileSize/4;
100074d2:	18f6      	adds	r6, r6, r3
	lay->y = (TileSize-1)*MapH/2 - OffY;
100074d4:	4357      	muls	r7, r2
	lay->trans = TileSize/4;
100074d6:	10b6      	asrs	r6, r6, #2
100074d8:	868e      	strh	r6, [r1, #52]	; 0x34
	lay->y = (TileSize-1)*MapH/2 - OffY;
100074da:	0ffa      	lsrs	r2, r7, #31
100074dc:	5628      	ldrsb	r0, [r5, r0]
100074de:	19d2      	adds	r2, r2, r7
100074e0:	1052      	asrs	r2, r2, #1
	lay->w = TileSize;
100074e2:	b29b      	uxth	r3, r3
	lay->y = (TileSize-1)*MapH/2 - OffY;
100074e4:	1a12      	subs	r2, r2, r0
100074e6:	870a      	strh	r2, [r1, #56]	; 0x38
	lay->wb = TileSize*TILES_NUM;
100074e8:	005a      	lsls	r2, r3, #1
100074ea:	189a      	adds	r2, r3, r2
100074ec:	00d2      	lsls	r2, r2, #3
	lay->w = TileSize;
100074ee:	874b      	strh	r3, [r1, #58]	; 0x3a
	lay->h = TileSize;
100074f0:	878b      	strh	r3, [r1, #60]	; 0x3c
	lay->wb = TileSize*TILES_NUM;
100074f2:	1ad3      	subs	r3, r2, r3
100074f4:	87cb      	strh	r3, [r1, #62]	; 0x3e
	SetTileMode();
100074f6:	f7ff fb91 	bl	10006c1c <_Z11SetTileModev>
}
100074fa:	bcc0      	pop	{r6, r7}
100074fc:	46b9      	mov	r9, r7
100074fe:	46b0      	mov	r8, r6
10007500:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((LevelW > MapW) || (LevelH > MapH))
10007502:	2d0f      	cmp	r5, #15
10007504:	d80f      	bhi.n	10007526 <_Z10LevelVmodev+0x16e>
10007506:	2710      	movs	r7, #16
10007508:	2614      	movs	r6, #20
1000750a:	230f      	movs	r3, #15
	if ((LevelW > MapW) || (LevelH > MapH))
1000750c:	46ac      	mov	ip, r5
1000750e:	429d      	cmp	r5, r3
10007510:	dd00      	ble.n	10007514 <_Z10LevelVmodev+0x15c>
10007512:	e771      	b.n	100073f8 <_Z10LevelVmodev+0x40>
	LevelX = (MapW - LevelW)/2;
10007514:	1a71      	subs	r1, r6, r1
10007516:	0fce      	lsrs	r6, r1, #31
10007518:	1876      	adds	r6, r6, r1
	OffX = - ((MapW - LevelW) & 1) * (TileSize/2);
1000751a:	07c9      	lsls	r1, r1, #31
	LevelX = (MapW - LevelW)/2;
1000751c:	1076      	asrs	r6, r6, #1
	OffX = - ((MapW - LevelW) & 1) * (TileSize/2);
1000751e:	17c9      	asrs	r1, r1, #31
10007520:	4379      	muls	r1, r7
	LevelX = (MapW - LevelW)/2;
10007522:	b2f6      	uxtb	r6, r6
10007524:	e79f      	b.n	10007466 <_Z10LevelVmodev+0xae>
		TileSize = 28;
10007526:	231c      	movs	r3, #28
10007528:	6013      	str	r3, [r2, #0]
		MapW = WIDTH/TileSize;
1000752a:	3b06      	subs	r3, #6
1000752c:	6003      	str	r3, [r0, #0]
		MapH = HEIGHT/TileSize;
1000752e:	3b05      	subs	r3, #5
10007530:	6023      	str	r3, [r4, #0]
10007532:	270e      	movs	r7, #14
10007534:	2616      	movs	r6, #22
10007536:	e7e9      	b.n	1000750c <_Z10LevelVmodev+0x154>
10007538:	2704      	movs	r7, #4
1000753a:	233c      	movs	r3, #60	; 0x3c
1000753c:	e793      	b.n	10007466 <_Z10LevelVmodev+0xae>
	if ((LevelW > MapW) || (LevelH > MapH))
1000753e:	2d14      	cmp	r5, #20
10007540:	dd23      	ble.n	1000758a <_Z10LevelVmodev+0x1d2>
		TileSize = 20;
10007542:	6016      	str	r6, [r2, #0]
		MapW = WIDTH/TileSize;
10007544:	2620      	movs	r6, #32
		MapH = HEIGHT/TileSize;
10007546:	6023      	str	r3, [r4, #0]
		MapW = WIDTH/TileSize;
10007548:	6006      	str	r6, [r0, #0]
	if ((LevelW > MapW) || (LevelH > MapH))
1000754a:	2d18      	cmp	r5, #24
1000754c:	dd21      	ble.n	10007592 <_Z10LevelVmodev+0x1da>
		TileSize = 16;
1000754e:	2310      	movs	r3, #16
10007550:	6013      	str	r3, [r2, #0]
		MapW = WIDTH/TileSize;
10007552:	3318      	adds	r3, #24
10007554:	6003      	str	r3, [r0, #0]
		MapH = HEIGHT/TileSize;
10007556:	3b0a      	subs	r3, #10
10007558:	6023      	str	r3, [r4, #0]
	if ((LevelW > MapW) || (LevelH > MapH))
1000755a:	2d1e      	cmp	r5, #30
1000755c:	dd1d      	ble.n	1000759a <_Z10LevelVmodev+0x1e2>
		TileSize = 12;
1000755e:	230c      	movs	r3, #12
10007560:	6013      	str	r3, [r2, #0]
		MapW = WIDTH/TileSize;
10007562:	3329      	adds	r3, #41	; 0x29
10007564:	6003      	str	r3, [r0, #0]
		MapH = HEIGHT/TileSize;
10007566:	3b0d      	subs	r3, #13
10007568:	6023      	str	r3, [r4, #0]
	if ((LevelW > MapW) || (LevelH > MapH))
1000756a:	2d28      	cmp	r5, #40	; 0x28
1000756c:	dd19      	ble.n	100075a2 <_Z10LevelVmodev+0x1ea>
		TileSize = 8;
1000756e:	2308      	movs	r3, #8
10007570:	6013      	str	r3, [r2, #0]
		MapW = WIDTH/TileSize;
10007572:	3348      	adds	r3, #72	; 0x48
10007574:	6003      	str	r3, [r0, #0]
		MapH = HEIGHT/TileSize;
10007576:	3b14      	subs	r3, #20
10007578:	6023      	str	r3, [r4, #0]
	LevelX = (MapW - LevelW)/2;
1000757a:	2350      	movs	r3, #80	; 0x50
1000757c:	1a59      	subs	r1, r3, r1
1000757e:	104e      	asrs	r6, r1, #1
	OffX = - ((MapW - LevelW) & 1) * (TileSize/2);
10007580:	07c9      	lsls	r1, r1, #31
10007582:	17c9      	asrs	r1, r1, #31
	LevelX = (MapW - LevelW)/2;
10007584:	b2f6      	uxtb	r6, r6
	OffX = - ((MapW - LevelW) & 1) * (TileSize/2);
10007586:	0089      	lsls	r1, r1, #2
10007588:	e764      	b.n	10007454 <_Z10LevelVmodev+0x9c>
1000758a:	270c      	movs	r7, #12
1000758c:	3606      	adds	r6, #6
1000758e:	3b04      	subs	r3, #4
10007590:	e7c0      	b.n	10007514 <_Z10LevelVmodev+0x15c>
10007592:	270a      	movs	r7, #10
10007594:	2620      	movs	r6, #32
10007596:	2318      	movs	r3, #24
10007598:	e7bc      	b.n	10007514 <_Z10LevelVmodev+0x15c>
1000759a:	2708      	movs	r7, #8
1000759c:	2628      	movs	r6, #40	; 0x28
1000759e:	231e      	movs	r3, #30
100075a0:	e7b8      	b.n	10007514 <_Z10LevelVmodev+0x15c>
100075a2:	2706      	movs	r7, #6
100075a4:	2635      	movs	r6, #53	; 0x35
100075a6:	2328      	movs	r3, #40	; 0x28
100075a8:	e7b4      	b.n	10007514 <_Z10LevelVmodev+0x15c>
100075aa:	46c0      	nop			; (mov r8, r8)
100075ac:	20010a18 	.word	0x20010a18
100075b0:	2000e548 	.word	0x2000e548
100075b4:	2000e544 	.word	0x2000e544
100075b8:	20017325 	.word	0x20017325
100075bc:	20017324 	.word	0x20017324
100075c0:	20017326 	.word	0x20017326
100075c4:	20017327 	.word	0x20017327
100075c8:	20017329 	.word	0x20017329
100075cc:	20017328 	.word	0x20017328
100075d0:	2000cb54 	.word	0x2000cb54
100075d4:	20010a1c 	.word	0x20010a1c
100075d8:	20016620 	.word	0x20016620

100075dc <_Z8DispInfov>:
{
100075dc:	b5f0      	push	{r4, r5, r6, r7, lr}
	printf("\nSokoban for Raspberry Pico\n");
100075de:	483a      	ldr	r0, [pc, #232]	; (100076c8 <_Z8DispInfov+0xec>)
{
100075e0:	b085      	sub	sp, #20
	printf("\nSokoban for Raspberry Pico\n");
100075e2:	f7fc fb61 	bl	10003ca8 <__wrap_puts>
	printf("version " VERSION "\n");
100075e6:	4839      	ldr	r0, [pc, #228]	; (100076cc <_Z8DispInfov+0xf0>)
100075e8:	f7fc fb5e 	bl	10003ca8 <__wrap_puts>
	printf(COPYRIGHT "\n");
100075ec:	4838      	ldr	r0, [pc, #224]	; (100076d0 <_Z8DispInfov+0xf4>)
100075ee:	f7fc fb5b 	bl	10003ca8 <__wrap_puts>
	uint sysclk = clock_get_hz(clk_sys);
100075f2:	2005      	movs	r0, #5
100075f4:	f7fa f868 	bl	100016c8 <clock_get_hz>
	printf("System clock: %u kHz\n", sysclk/1000);
100075f8:	21fa      	movs	r1, #250	; 0xfa
100075fa:	0089      	lsls	r1, r1, #2
100075fc:	f7f8 feba 	bl	10000374 <__wrap___aeabi_uidiv>
10007600:	0001      	movs	r1, r0
10007602:	4834      	ldr	r0, [pc, #208]	; (100076d4 <_Z8DispInfov+0xf8>)
10007604:	f7fc fc00 	bl	10003e08 <__wrap_printf>
		Vmode.width, Vmode.height, Vmode.vfreq, (int)(Vmode.hfreq+0.5f), Vmode.div*Vmode.cpp);
10007608:	21fc      	movs	r1, #252	; 0xfc
1000760a:	4c33      	ldr	r4, [pc, #204]	; (100076d8 <_Z8DispInfov+0xfc>)
1000760c:	0589      	lsls	r1, r1, #22
1000760e:	8aa2      	ldrh	r2, [r4, #20]
10007610:	8ae3      	ldrh	r3, [r4, #22]
	printf("Screen resolution: %u x %u @ %.2f Hz, %d Hz, cpp %u\n",
10007612:	8825      	ldrh	r5, [r4, #0]
10007614:	4353      	muls	r3, r2
10007616:	8866      	ldrh	r6, [r4, #2]
10007618:	9303      	str	r3, [sp, #12]
		Vmode.width, Vmode.height, Vmode.vfreq, (int)(Vmode.hfreq+0.5f), Vmode.div*Vmode.cpp);
1000761a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
1000761c:	f7f9 fccc 	bl	10000fb8 <__wrap___aeabi_fadd>
	printf("Screen resolution: %u x %u @ %.2f Hz, %d Hz, cpp %u\n",
10007620:	f7f9 fcfe 	bl	10001020 <__wrap___aeabi_f2iz>
10007624:	9002      	str	r0, [sp, #8]
10007626:	6b20      	ldr	r0, [r4, #48]	; 0x30
10007628:	f7f9 fd32 	bl	10001090 <__wrap___aeabi_f2d>
1000762c:	0032      	movs	r2, r6
1000762e:	9000      	str	r0, [sp, #0]
10007630:	9101      	str	r1, [sp, #4]
10007632:	0029      	movs	r1, r5
10007634:	4829      	ldr	r0, [pc, #164]	; (100076dc <_Z8DispInfov+0x100>)
10007636:	f7fc fbe7 	bl	10003e08 <__wrap_printf>
	printf("Total authors: %u\n", AutNum);
1000763a:	4b29      	ldr	r3, [pc, #164]	; (100076e0 <_Z8DispInfov+0x104>)
1000763c:	4829      	ldr	r0, [pc, #164]	; (100076e4 <_Z8DispInfov+0x108>)
1000763e:	681d      	ldr	r5, [r3, #0]
10007640:	0029      	movs	r1, r5
10007642:	f7fc fbe1 	bl	10003e08 <__wrap_printf>
	for (i = 0; i < AutNum; i++)
10007646:	2d00      	cmp	r5, #0
10007648:	dd3a      	ble.n	100076c0 <_Z8DispInfov+0xe4>
	int m = 0;
1000764a:	2400      	movs	r4, #0
	int k = 0;
1000764c:	2100      	movs	r1, #0
	for (i = 0; i < AutNum; i++)
1000764e:	2700      	movs	r7, #0
10007650:	4e25      	ldr	r6, [pc, #148]	; (100076e8 <_Z8DispInfov+0x10c>)
		k += Author[i].collnum;
10007652:	6870      	ldr	r0, [r6, #4]
10007654:	1809      	adds	r1, r1, r0
		for (j = 0; j < Author[i].collnum; j++) m += Author[i].collect[j].levnum;
10007656:	2800      	cmp	r0, #0
10007658:	dd0b      	ble.n	10007672 <_Z8DispInfov+0x96>
1000765a:	6833      	ldr	r3, [r6, #0]
1000765c:	0042      	lsls	r2, r0, #1
1000765e:	1812      	adds	r2, r2, r0
10007660:	3308      	adds	r3, #8
10007662:	0092      	lsls	r2, r2, #2
10007664:	18d2      	adds	r2, r2, r3
10007666:	6818      	ldr	r0, [r3, #0]
10007668:	330c      	adds	r3, #12
1000766a:	4684      	mov	ip, r0
1000766c:	4464      	add	r4, ip
1000766e:	429a      	cmp	r2, r3
10007670:	d1f9      	bne.n	10007666 <_Z8DispInfov+0x8a>
	for (i = 0; i < AutNum; i++)
10007672:	3701      	adds	r7, #1
10007674:	360c      	adds	r6, #12
10007676:	42bd      	cmp	r5, r7
10007678:	d1eb      	bne.n	10007652 <_Z8DispInfov+0x76>
	printf("Total collections: %u\n", k);
1000767a:	481c      	ldr	r0, [pc, #112]	; (100076ec <_Z8DispInfov+0x110>)
1000767c:	f7fc fbc4 	bl	10003e08 <__wrap_printf>
	printf("Total levels: %u\n", m);
10007680:	0021      	movs	r1, r4
10007682:	481b      	ldr	r0, [pc, #108]	; (100076f0 <_Z8DispInfov+0x114>)
10007684:	f7fc fbc0 	bl	10003e08 <__wrap_printf>
	if (LevNum > 0)
10007688:	4b1a      	ldr	r3, [pc, #104]	; (100076f4 <_Z8DispInfov+0x118>)
1000768a:	681b      	ldr	r3, [r3, #0]
1000768c:	2b00      	cmp	r3, #0
1000768e:	dd15      	ble.n	100076bc <_Z8DispInfov+0xe0>
		printf("Current level %u, size %ux%u, board %ux%u, tile %u, collection %s\n",
10007690:	4819      	ldr	r0, [pc, #100]	; (100076f8 <_Z8DispInfov+0x11c>)
10007692:	4b1a      	ldr	r3, [pc, #104]	; (100076fc <_Z8DispInfov+0x120>)
10007694:	6800      	ldr	r0, [r0, #0]
10007696:	4a1a      	ldr	r2, [pc, #104]	; (10007700 <_Z8DispInfov+0x124>)
10007698:	491a      	ldr	r1, [pc, #104]	; (10007704 <_Z8DispInfov+0x128>)
1000769a:	781b      	ldrb	r3, [r3, #0]
1000769c:	6809      	ldr	r1, [r1, #0]
1000769e:	7812      	ldrb	r2, [r2, #0]
100076a0:	9003      	str	r0, [sp, #12]
100076a2:	4819      	ldr	r0, [pc, #100]	; (10007708 <_Z8DispInfov+0x12c>)
100076a4:	3101      	adds	r1, #1
100076a6:	6800      	ldr	r0, [r0, #0]
100076a8:	9002      	str	r0, [sp, #8]
100076aa:	4818      	ldr	r0, [pc, #96]	; (1000770c <_Z8DispInfov+0x130>)
100076ac:	6800      	ldr	r0, [r0, #0]
100076ae:	9001      	str	r0, [sp, #4]
100076b0:	4817      	ldr	r0, [pc, #92]	; (10007710 <_Z8DispInfov+0x134>)
100076b2:	6800      	ldr	r0, [r0, #0]
100076b4:	9000      	str	r0, [sp, #0]
100076b6:	4817      	ldr	r0, [pc, #92]	; (10007714 <_Z8DispInfov+0x138>)
100076b8:	f7fc fba6 	bl	10003e08 <__wrap_printf>
}
100076bc:	b005      	add	sp, #20
100076be:	bdf0      	pop	{r4, r5, r6, r7, pc}
	int m = 0;
100076c0:	2400      	movs	r4, #0
	int k = 0;
100076c2:	2100      	movs	r1, #0
100076c4:	e7d9      	b.n	1000767a <_Z8DispInfov+0x9e>
100076c6:	46c0      	nop			; (mov r8, r8)
100076c8:	1000b554 	.word	0x1000b554
100076cc:	1000b570 	.word	0x1000b570
100076d0:	1000b57c 	.word	0x1000b57c
100076d4:	1000b598 	.word	0x1000b598
100076d8:	20016620 	.word	0x20016620
100076dc:	1000b5b0 	.word	0x1000b5b0
100076e0:	1000bdc8 	.word	0x1000bdc8
100076e4:	1000b5e8 	.word	0x1000b5e8
100076e8:	20002760 	.word	0x20002760
100076ec:	1000b5fc 	.word	0x1000b5fc
100076f0:	1000b614 	.word	0x1000b614
100076f4:	2000cbe8 	.word	0x2000cbe8
100076f8:	2000a3b8 	.word	0x2000a3b8
100076fc:	20017324 	.word	0x20017324
10007700:	20017325 	.word	0x20017325
10007704:	2000cbf4 	.word	0x2000cbf4
10007708:	20010a18 	.word	0x20010a18
1000770c:	2000e544 	.word	0x2000e544
10007710:	2000e548 	.word	0x2000e548
10007714:	1000b628 	.word	0x1000b628

10007718 <_Z8BoardDimv>:
	LevDef = Levels[Level*2]; // current level definition
10007718:	4a20      	ldr	r2, [pc, #128]	; (1000779c <_Z8BoardDimv+0x84>)
1000771a:	4b21      	ldr	r3, [pc, #132]	; (100077a0 <_Z8BoardDimv+0x88>)
1000771c:	6812      	ldr	r2, [r2, #0]
1000771e:	681b      	ldr	r3, [r3, #0]
10007720:	00d2      	lsls	r2, r2, #3
10007722:	5899      	ldr	r1, [r3, r2]
10007724:	481f      	ldr	r0, [pc, #124]	; (100077a4 <_Z8BoardDimv+0x8c>)
{
10007726:	b5f0      	push	{r4, r5, r6, r7, lr}
	LevSolve = Levels[Level*2+1]; // current level solve
10007728:	189b      	adds	r3, r3, r2
	LevDef = Levels[Level*2]; // current level definition
1000772a:	6001      	str	r1, [r0, #0]
	LevSolve = Levels[Level*2+1]; // current level solve
1000772c:	685a      	ldr	r2, [r3, #4]
1000772e:	4b1e      	ldr	r3, [pc, #120]	; (100077a8 <_Z8BoardDimv+0x90>)
	LevelW = 1;
10007730:	4e1e      	ldr	r6, [pc, #120]	; (100077ac <_Z8BoardDimv+0x94>)
	LevSolve = Levels[Level*2+1]; // current level solve
10007732:	601a      	str	r2, [r3, #0]
	LevelW = 1;
10007734:	2301      	movs	r3, #1
10007736:	7033      	strb	r3, [r6, #0]
	LevelH = 0;
10007738:	2300      	movs	r3, #0
1000773a:	4c1d      	ldr	r4, [pc, #116]	; (100077b0 <_Z8BoardDimv+0x98>)
	while ((ch = *s2++) != 0)
1000773c:	1c4a      	adds	r2, r1, #1
	LevelH = 0;
1000773e:	7023      	strb	r3, [r4, #0]
	while ((ch = *s2++) != 0)
10007740:	780b      	ldrb	r3, [r1, #0]
10007742:	2b00      	cmp	r3, #0
10007744:	d024      	beq.n	10007790 <_Z8BoardDimv+0x78>
10007746:	2001      	movs	r0, #1
	int i = 0;
10007748:	2100      	movs	r1, #0
1000774a:	27ff      	movs	r7, #255	; 0xff
1000774c:	e008      	b.n	10007760 <_Z8BoardDimv+0x48>
		if ((ch == '!') || (ch == '|'))
1000774e:	2b7c      	cmp	r3, #124	; 0x7c
10007750:	d008      	beq.n	10007764 <_Z8BoardDimv+0x4c>
	if (i > LevelW) LevelW = i;
10007752:	0005      	movs	r5, r0
			i++;
10007754:	3101      	adds	r1, #1
	while ((ch = *s2++) != 0)
10007756:	3201      	adds	r2, #1
10007758:	1e53      	subs	r3, r2, #1
1000775a:	781b      	ldrb	r3, [r3, #0]
1000775c:	2b00      	cmp	r3, #0
1000775e:	d011      	beq.n	10007784 <_Z8BoardDimv+0x6c>
		if ((ch == '!') || (ch == '|'))
10007760:	2b21      	cmp	r3, #33	; 0x21
10007762:	d1f4      	bne.n	1000774e <_Z8BoardDimv+0x36>
			LevelH++;
10007764:	7823      	ldrb	r3, [r4, #0]
			if (i > LevelW) LevelW = i;
10007766:	0005      	movs	r5, r0
			LevelH++;
10007768:	3301      	adds	r3, #1
1000776a:	7023      	strb	r3, [r4, #0]
			if (i > LevelW) LevelW = i;
1000776c:	4281      	cmp	r1, r0
1000776e:	dd10      	ble.n	10007792 <_Z8BoardDimv+0x7a>
10007770:	b2c8      	uxtb	r0, r1
	while ((ch = *s2++) != 0)
10007772:	3201      	adds	r2, #1
			if (i > LevelW) LevelW = i;
10007774:	7030      	strb	r0, [r6, #0]
	while ((ch = *s2++) != 0)
10007776:	1e53      	subs	r3, r2, #1
10007778:	781b      	ldrb	r3, [r3, #0]
1000777a:	4039      	ands	r1, r7
1000777c:	000d      	movs	r5, r1
			i = 0;
1000777e:	2100      	movs	r1, #0
	while ((ch = *s2++) != 0)
10007780:	2b00      	cmp	r3, #0
10007782:	d1ed      	bne.n	10007760 <_Z8BoardDimv+0x48>
	if (i > LevelW) LevelW = i;
10007784:	42a9      	cmp	r1, r5
10007786:	dd06      	ble.n	10007796 <_Z8BoardDimv+0x7e>
10007788:	7031      	strb	r1, [r6, #0]
	if (i > 0) LevelH++;
1000778a:	7823      	ldrb	r3, [r4, #0]
1000778c:	3301      	adds	r3, #1
1000778e:	7023      	strb	r3, [r4, #0]
};
10007790:	bdf0      	pop	{r4, r5, r6, r7, pc}
			i = 0;
10007792:	2100      	movs	r1, #0
10007794:	e7df      	b.n	10007756 <_Z8BoardDimv+0x3e>
	if (i > 0) LevelH++;
10007796:	2900      	cmp	r1, #0
10007798:	d0fa      	beq.n	10007790 <_Z8BoardDimv+0x78>
1000779a:	e7f6      	b.n	1000778a <_Z8BoardDimv+0x72>
1000779c:	2000cbf4 	.word	0x2000cbf4
100077a0:	2000cbfc 	.word	0x2000cbfc
100077a4:	2000cbe4 	.word	0x2000cbe4
100077a8:	2000cbf0 	.word	0x2000cbf0
100077ac:	20017325 	.word	0x20017325
100077b0:	20017324 	.word	0x20017324

100077b4 <_Z9LevelInitv>:
{
100077b4:	b5f0      	push	{r4, r5, r6, r7, lr}
100077b6:	46de      	mov	lr, fp
100077b8:	464e      	mov	r6, r9
100077ba:	4645      	mov	r5, r8
100077bc:	4657      	mov	r7, sl
100077be:	b5e0      	push	{r5, r6, r7, lr}
100077c0:	b083      	sub	sp, #12
	BoardDim();
100077c2:	f7ff ffa9 	bl	10007718 <_Z8BoardDimv>
	LevelVmode();
100077c6:	f7ff fdf7 	bl	100073b8 <_Z10LevelVmodev>
	memset(Board, EMPTY, MAPWMAX*MAPHMAX);
100077ca:	2296      	movs	r2, #150	; 0x96
100077cc:	2100      	movs	r1, #0
100077ce:	0152      	lsls	r2, r2, #5
100077d0:	4850      	ldr	r0, [pc, #320]	; (10007914 <_Z9LevelInitv+0x160>)
100077d2:	f7f9 fca9 	bl	10001128 <__wrap_memset>
	lay->on = False;
100077d6:	4b50      	ldr	r3, [pc, #320]	; (10007918 <_Z9LevelInitv+0x164>)
100077d8:	2246      	movs	r2, #70	; 0x46
100077da:	4698      	mov	r8, r3
100077dc:	2300      	movs	r3, #0
100077de:	4641      	mov	r1, r8
100077e0:	548b      	strb	r3, [r1, r2]
	y = LevelY;
100077e2:	4a4e      	ldr	r2, [pc, #312]	; (1000791c <_Z9LevelInitv+0x168>)
100077e4:	7810      	ldrb	r0, [r2, #0]
	x = LevelX;
100077e6:	4a4e      	ldr	r2, [pc, #312]	; (10007920 <_Z9LevelInitv+0x16c>)
100077e8:	7815      	ldrb	r5, [r2, #0]
	MarkNum = 0;
100077ea:	4a4e      	ldr	r2, [pc, #312]	; (10007924 <_Z9LevelInitv+0x170>)
100077ec:	8013      	strh	r3, [r2, #0]
	PosX = LevelX + LevelW/2;
100077ee:	4b4e      	ldr	r3, [pc, #312]	; (10007928 <_Z9LevelInitv+0x174>)
	MarkNum = 0;
100077f0:	9201      	str	r2, [sp, #4]
	PosX = LevelX + LevelW/2;
100077f2:	781b      	ldrb	r3, [r3, #0]
100077f4:	085b      	lsrs	r3, r3, #1
100077f6:	18eb      	adds	r3, r5, r3
100077f8:	b2db      	uxtb	r3, r3
100077fa:	469c      	mov	ip, r3
100077fc:	4662      	mov	r2, ip
100077fe:	4b4b      	ldr	r3, [pc, #300]	; (1000792c <_Z9LevelInitv+0x178>)
10007800:	701a      	strb	r2, [r3, #0]
10007802:	469a      	mov	sl, r3
	PosY = LevelY + LevelH/2;
10007804:	4b4a      	ldr	r3, [pc, #296]	; (10007930 <_Z9LevelInitv+0x17c>)
	u8* d = BoardAddr(x,y);
10007806:	0002      	movs	r2, r0
	PosY = LevelY + LevelH/2;
10007808:	781c      	ldrb	r4, [r3, #0]
1000780a:	4b4a      	ldr	r3, [pc, #296]	; (10007934 <_Z9LevelInitv+0x180>)
1000780c:	0864      	lsrs	r4, r4, #1
1000780e:	1904      	adds	r4, r0, r4
10007810:	b2e4      	uxtb	r4, r4
10007812:	701c      	strb	r4, [r3, #0]
10007814:	4699      	mov	r9, r3
	u8* d = BoardAddr(x,y);
10007816:	4b48      	ldr	r3, [pc, #288]	; (10007938 <_Z9LevelInitv+0x184>)
10007818:	681e      	ldr	r6, [r3, #0]
1000781a:	4b3e      	ldr	r3, [pc, #248]	; (10007914 <_Z9LevelInitv+0x160>)
1000781c:	4372      	muls	r2, r6
1000781e:	469b      	mov	fp, r3
	const char* s = LevDef;
10007820:	4b46      	ldr	r3, [pc, #280]	; (1000793c <_Z9LevelInitv+0x188>)
	u8* d = BoardAddr(x,y);
10007822:	1952      	adds	r2, r2, r5
	const char* s = LevDef;
10007824:	681b      	ldr	r3, [r3, #0]
	u8* d = BoardAddr(x,y);
10007826:	445a      	add	r2, fp
	while ((ch = *s++) != 0)
10007828:	1c59      	adds	r1, r3, #1
1000782a:	781b      	ldrb	r3, [r3, #0]
1000782c:	2b00      	cmp	r3, #0
1000782e:	d028      	beq.n	10007882 <_Z9LevelInitv+0xce>
			if (y >= MapH) break;
10007830:	4c43      	ldr	r4, [pc, #268]	; (10007940 <_Z9LevelInitv+0x18c>)
10007832:	6824      	ldr	r4, [r4, #0]
10007834:	46a4      	mov	ip, r4
	x = LevelX;
10007836:	002c      	movs	r4, r5
		if ((ch == '!') || (ch == '|'))
10007838:	2b21      	cmp	r3, #33	; 0x21
1000783a:	d050      	beq.n	100078de <_Z9LevelInitv+0x12a>
1000783c:	2b7c      	cmp	r3, #124	; 0x7c
1000783e:	d04e      	beq.n	100078de <_Z9LevelInitv+0x12a>
			if (x >= MapW) continue;
10007840:	42a6      	cmp	r6, r4
10007842:	dd14      	ble.n	1000786e <_Z9LevelInitv+0xba>
			switch (ch)
10007844:	3b23      	subs	r3, #35	; 0x23
10007846:	b2db      	uxtb	r3, r3
10007848:	2b55      	cmp	r3, #85	; 0x55
1000784a:	d853      	bhi.n	100078f4 <_Z9LevelInitv+0x140>
1000784c:	4f3d      	ldr	r7, [pc, #244]	; (10007944 <_Z9LevelInitv+0x190>)
1000784e:	009b      	lsls	r3, r3, #2
10007850:	58fb      	ldr	r3, [r7, r3]
10007852:	469f      	mov	pc, r3
				PosX = x;
10007854:	4653      	mov	r3, sl
10007856:	701c      	strb	r4, [r3, #0]
				PosY = y;
10007858:	464b      	mov	r3, r9
1000785a:	7018      	strb	r0, [r3, #0]
				MarkNum++;
1000785c:	9b01      	ldr	r3, [sp, #4]
1000785e:	9f01      	ldr	r7, [sp, #4]
10007860:	881b      	ldrh	r3, [r3, #0]
10007862:	3301      	adds	r3, #1
10007864:	803b      	strh	r3, [r7, #0]
				ch = MARK;
10007866:	2303      	movs	r3, #3
			*d++ = ch;
10007868:	7013      	strb	r3, [r2, #0]
			x++;
1000786a:	3401      	adds	r4, #1
			*d++ = ch;
1000786c:	3201      	adds	r2, #1
	while ((ch = *s++) != 0)
1000786e:	3101      	adds	r1, #1
10007870:	1e4b      	subs	r3, r1, #1
10007872:	781b      	ldrb	r3, [r3, #0]
10007874:	2b00      	cmp	r3, #0
10007876:	d1df      	bne.n	10007838 <_Z9LevelInitv+0x84>
	SetPlayer(PosX*TileSize, PosY*TileSize, FACE_D);
10007878:	4653      	mov	r3, sl
1000787a:	781b      	ldrb	r3, [r3, #0]
1000787c:	469c      	mov	ip, r3
1000787e:	464b      	mov	r3, r9
10007880:	781c      	ldrb	r4, [r3, #0]
10007882:	4b31      	ldr	r3, [pc, #196]	; (10007948 <_Z9LevelInitv+0x194>)
	lay->init = VGAKEY((x-OffX)*Vmode.cpp, TileSize, 65);
10007884:	4a31      	ldr	r2, [pc, #196]	; (1000794c <_Z9LevelInitv+0x198>)
	SetPlayer(PosX*TileSize, PosY*TileSize, FACE_D);
10007886:	6819      	ldr	r1, [r3, #0]
10007888:	4663      	mov	r3, ip
1000788a:	434b      	muls	r3, r1
	lay->init = VGAKEY((x-OffX)*Vmode.cpp, TileSize, 65);
1000788c:	7812      	ldrb	r2, [r2, #0]
	SetPlayer(PosX*TileSize, PosY*TileSize, FACE_D);
1000788e:	434c      	muls	r4, r1
	lay->init = VGAKEY((x-OffX)*Vmode.cpp, TileSize, 65);
10007890:	b252      	sxtb	r2, r2
10007892:	1a9a      	subs	r2, r3, r2
10007894:	4b2e      	ldr	r3, [pc, #184]	; (10007950 <_Z9LevelInitv+0x19c>)
10007896:	8adb      	ldrh	r3, [r3, #22]
10007898:	4353      	muls	r3, r2
1000789a:	3301      	adds	r3, #1
1000789c:	1e4a      	subs	r2, r1, #1
1000789e:	04db      	lsls	r3, r3, #19
100078a0:	4313      	orrs	r3, r2
100078a2:	2282      	movs	r2, #130	; 0x82
100078a4:	0292      	lsls	r2, r2, #10
100078a6:	4313      	orrs	r3, r2
100078a8:	4642      	mov	r2, r8
100078aa:	62d3      	str	r3, [r2, #44]	; 0x2c
	lay->y = y-OffY;
100078ac:	4b29      	ldr	r3, [pc, #164]	; (10007954 <_Z9LevelInitv+0x1a0>)
100078ae:	781b      	ldrb	r3, [r3, #0]
100078b0:	b25b      	sxtb	r3, r3
100078b2:	1ae4      	subs	r4, r4, r3
	lay->img = &TilesImg_Copy[TileSize*tile];
100078b4:	00cb      	lsls	r3, r1, #3
	lay->y = y-OffY;
100078b6:	8714      	strh	r4, [r2, #56]	; 0x38
	lay->img = &TilesImg_Copy[TileSize*tile];
100078b8:	185b      	adds	r3, r3, r1
100078ba:	4a27      	ldr	r2, [pc, #156]	; (10007958 <_Z9LevelInitv+0x1a4>)
100078bc:	005b      	lsls	r3, r3, #1
100078be:	189b      	adds	r3, r3, r2
100078c0:	4642      	mov	r2, r8
	lay->on = True;
100078c2:	4641      	mov	r1, r8
	lay->img = &TilesImg_Copy[TileSize*tile];
100078c4:	6253      	str	r3, [r2, #36]	; 0x24
	lay->on = True;
100078c6:	2346      	movs	r3, #70	; 0x46
100078c8:	2201      	movs	r2, #1
100078ca:	54ca      	strb	r2, [r1, r3]
	FlushChar();
100078cc:	f7ff fab4 	bl	10006e38 <_Z9FlushCharv>
}
100078d0:	b003      	add	sp, #12
100078d2:	bcf0      	pop	{r4, r5, r6, r7}
100078d4:	46bb      	mov	fp, r7
100078d6:	46b2      	mov	sl, r6
100078d8:	46a9      	mov	r9, r5
100078da:	46a0      	mov	r8, r4
100078dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
			y++;
100078de:	3001      	adds	r0, #1
			if (y >= MapH) break;
100078e0:	4584      	cmp	ip, r0
100078e2:	ddc9      	ble.n	10007878 <_Z9LevelInitv+0xc4>
			d = BoardAddr(x,y);
100078e4:	0002      	movs	r2, r0
100078e6:	4b0b      	ldr	r3, [pc, #44]	; (10007914 <_Z9LevelInitv+0x160>)
100078e8:	4372      	muls	r2, r6
100078ea:	469b      	mov	fp, r3
100078ec:	1952      	adds	r2, r2, r5
			x = LevelX;
100078ee:	002c      	movs	r4, r5
			d = BoardAddr(x,y);
100078f0:	445a      	add	r2, fp
100078f2:	e7bc      	b.n	1000786e <_Z9LevelInitv+0xba>
				ch = FLOOR;
100078f4:	2302      	movs	r3, #2
				break;
100078f6:	e7b7      	b.n	10007868 <_Z9LevelInitv+0xb4>
				PosX = x;
100078f8:	4653      	mov	r3, sl
100078fa:	701c      	strb	r4, [r3, #0]
				PosY = y;
100078fc:	464b      	mov	r3, r9
100078fe:	7018      	strb	r0, [r3, #0]
				ch = FLOOR;
10007900:	2302      	movs	r3, #2
				break;
10007902:	e7b1      	b.n	10007868 <_Z9LevelInitv+0xb4>
				ch = FULL;
10007904:	2305      	movs	r3, #5
				break;
10007906:	e7af      	b.n	10007868 <_Z9LevelInitv+0xb4>
				ch = CRATE;
10007908:	2304      	movs	r3, #4
				break;
1000790a:	e7ad      	b.n	10007868 <_Z9LevelInitv+0xb4>
				ch = EMPTY;
1000790c:	2300      	movs	r3, #0
1000790e:	e7ab      	b.n	10007868 <_Z9LevelInitv+0xb4>
			switch (ch)
10007910:	2301      	movs	r3, #1
10007912:	e7a9      	b.n	10007868 <_Z9LevelInitv+0xb4>
10007914:	200090d4 	.word	0x200090d4
10007918:	2000cb54 	.word	0x2000cb54
1000791c:	20017327 	.word	0x20017327
10007920:	20017326 	.word	0x20017326
10007924:	20017320 	.word	0x20017320
10007928:	20017325 	.word	0x20017325
1000792c:	2001732a 	.word	0x2001732a
10007930:	20017324 	.word	0x20017324
10007934:	2001732b 	.word	0x2001732b
10007938:	2000e548 	.word	0x2000e548
1000793c:	2000cbe4 	.word	0x2000cbe4
10007940:	2000e544 	.word	0x2000e544
10007944:	1000b66c 	.word	0x1000b66c
10007948:	20010a18 	.word	0x20010a18
1000794c:	20017328 	.word	0x20017328
10007950:	20016620 	.word	0x20016620
10007954:	20017329 	.word	0x20017329
10007958:	20010a1c 	.word	0x20010a1c

1000795c <_Z4Stepc>:
{
1000795c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000795e:	46de      	mov	lr, fp
10007960:	4657      	mov	r7, sl
10007962:	464e      	mov	r6, r9
10007964:	4645      	mov	r5, r8
10007966:	b5e0      	push	{r5, r6, r7, lr}
10007968:	b083      	sub	sp, #12
	int dx = (key == KEY_L) ? -1 : ((key == KEY_R) ? 1 : 0);
1000796a:	284a      	cmp	r0, #74	; 0x4a
1000796c:	d00c      	beq.n	10007988 <_Z4Stepc+0x2c>
1000796e:	0002      	movs	r2, r0
10007970:	3a4c      	subs	r2, #76	; 0x4c
10007972:	4253      	negs	r3, r2
10007974:	415a      	adcs	r2, r3
	int dy = (key == KEY_U) ? -1 : ((key == KEY_D) ? 1 : 0);
10007976:	2849      	cmp	r0, #73	; 0x49
10007978:	d108      	bne.n	1000798c <_Z4Stepc+0x30>
1000797a:	2301      	movs	r3, #1
1000797c:	425b      	negs	r3, r3
	if (dx + dy == 0) return False;
1000797e:	1899      	adds	r1, r3, r2
10007980:	2900      	cmp	r1, #0
10007982:	d10a      	bne.n	1000799a <_Z4Stepc+0x3e>
10007984:	2000      	movs	r0, #0
10007986:	e065      	b.n	10007a54 <_Z4Stepc+0xf8>
	int dx = (key == KEY_L) ? -1 : ((key == KEY_R) ? 1 : 0);
10007988:	2201      	movs	r2, #1
1000798a:	4252      	negs	r2, r2
	int dy = (key == KEY_U) ? -1 : ((key == KEY_D) ? 1 : 0);
1000798c:	0003      	movs	r3, r0
1000798e:	3b4b      	subs	r3, #75	; 0x4b
10007990:	4259      	negs	r1, r3
10007992:	414b      	adcs	r3, r1
	if (dx + dy == 0) return False;
10007994:	1899      	adds	r1, r3, r2
10007996:	2900      	cmp	r1, #0
10007998:	d0f4      	beq.n	10007984 <_Z4Stepc+0x28>
	if (IsBox(PosX+dx, PosY+dy) && (IsFloor(PosX+2*dx, PosY+2*dy)))
1000799a:	b2d4      	uxtb	r4, r2
1000799c:	4a3a      	ldr	r2, [pc, #232]	; (10007a88 <_Z4Stepc+0x12c>)
	if (((u32)x >= (u32)MapW) || ((u32)y >= (u32)MapH)) return False;
1000799e:	4d3b      	ldr	r5, [pc, #236]	; (10007a8c <_Z4Stepc+0x130>)
	if (IsBox(PosX+dx, PosY+dy) && (IsFloor(PosX+2*dx, PosY+2*dy)))
100079a0:	7811      	ldrb	r1, [r2, #0]
100079a2:	b2da      	uxtb	r2, r3
100079a4:	4b3a      	ldr	r3, [pc, #232]	; (10007a90 <_Z4Stepc+0x134>)
100079a6:	1861      	adds	r1, r4, r1
100079a8:	781b      	ldrb	r3, [r3, #0]
	if (((u32)x >= (u32)MapW) || ((u32)y >= (u32)MapH)) return False;
100079aa:	682d      	ldr	r5, [r5, #0]
	if (IsBox(PosX+dx, PosY+dy) && (IsFloor(PosX+2*dx, PosY+2*dy)))
100079ac:	18d3      	adds	r3, r2, r3
100079ae:	b2c9      	uxtb	r1, r1
100079b0:	b2db      	uxtb	r3, r3
	if (((u32)x >= (u32)MapW) || ((u32)y >= (u32)MapH)) return False;
100079b2:	428d      	cmp	r5, r1
100079b4:	d94d      	bls.n	10007a52 <_Z4Stepc+0xf6>
100079b6:	4e37      	ldr	r6, [pc, #220]	; (10007a94 <_Z4Stepc+0x138>)
100079b8:	46b4      	mov	ip, r6
100079ba:	6836      	ldr	r6, [r6, #0]
100079bc:	46b0      	mov	r8, r6
100079be:	42b3      	cmp	r3, r6
100079c0:	d251      	bcs.n	10007a66 <_Z4Stepc+0x10a>
	u8 tile = *BoardAddr(x,y);
100079c2:	002e      	movs	r6, r5
100079c4:	435e      	muls	r6, r3
100079c6:	1877      	adds	r7, r6, r1
100079c8:	46b1      	mov	r9, r6
100079ca:	4e33      	ldr	r6, [pc, #204]	; (10007a98 <_Z4Stepc+0x13c>)
100079cc:	9701      	str	r7, [sp, #4]
100079ce:	5df7      	ldrb	r7, [r6, r7]
100079d0:	46ba      	mov	sl, r7
	if (IsBox(PosX+dx, PosY+dy) && (IsFloor(PosX+2*dx, PosY+2*dy)))
100079d2:	2704      	movs	r7, #4
100079d4:	427f      	negs	r7, r7
100079d6:	4457      	add	r7, sl
100079d8:	2f01      	cmp	r7, #1
100079da:	d81f      	bhi.n	10007a1c <_Z4Stepc+0xc0>
100079dc:	1864      	adds	r4, r4, r1
100079de:	b2e4      	uxtb	r4, r4
	if (((u32)x >= (u32)MapW) || ((u32)y >= (u32)MapH)) return False;
100079e0:	42a5      	cmp	r5, r4
100079e2:	d91b      	bls.n	10007a1c <_Z4Stepc+0xc0>
	if (IsBox(PosX+dx, PosY+dy) && (IsFloor(PosX+2*dx, PosY+2*dy)))
100079e4:	18d2      	adds	r2, r2, r3
100079e6:	b2d2      	uxtb	r2, r2
	if (((u32)x >= (u32)MapW) || ((u32)y >= (u32)MapH)) return False;
100079e8:	4590      	cmp	r8, r2
100079ea:	d917      	bls.n	10007a1c <_Z4Stepc+0xc0>
	u8 tile = *BoardAddr(x,y);
100079ec:	436a      	muls	r2, r5
100079ee:	1914      	adds	r4, r2, r4
	return (tile == FLOOR) || (tile == MARK);
100079f0:	5d32      	ldrb	r2, [r6, r4]
	if (IsBox(PosX+dx, PosY+dy) && (IsFloor(PosX+2*dx, PosY+2*dy)))
100079f2:	3a02      	subs	r2, #2
100079f4:	2a01      	cmp	r2, #1
100079f6:	d811      	bhi.n	10007a1c <_Z4Stepc+0xc0>
	if (tile == FULL)
100079f8:	4657      	mov	r7, sl
		*b = FLOOR;
100079fa:	2202      	movs	r2, #2
	if (tile == FULL)
100079fc:	2f05      	cmp	r7, #5
100079fe:	d106      	bne.n	10007a0e <_Z4Stepc+0xb2>
		MarkNum++;
10007a00:	4a26      	ldr	r2, [pc, #152]	; (10007a9c <_Z4Stepc+0x140>)
10007a02:	4690      	mov	r8, r2
10007a04:	4647      	mov	r7, r8
10007a06:	8812      	ldrh	r2, [r2, #0]
10007a08:	3201      	adds	r2, #1
10007a0a:	803a      	strh	r2, [r7, #0]
		*b = MARK;
10007a0c:	2203      	movs	r2, #3
10007a0e:	9f01      	ldr	r7, [sp, #4]
10007a10:	55f2      	strb	r2, [r6, r7]
	if (tile == MARK)
10007a12:	5d32      	ldrb	r2, [r6, r4]
10007a14:	2a03      	cmp	r2, #3
10007a16:	d02d      	beq.n	10007a74 <_Z4Stepc+0x118>
		*b = CRATE;
10007a18:	2204      	movs	r2, #4
10007a1a:	5532      	strb	r2, [r6, r4]
	int dir = (key == KEY_L) ? DIR_L :
10007a1c:	284a      	cmp	r0, #74	; 0x4a
10007a1e:	d020      	beq.n	10007a62 <_Z4Stepc+0x106>
10007a20:	284c      	cmp	r0, #76	; 0x4c
10007a22:	d025      	beq.n	10007a70 <_Z4Stepc+0x114>
10007a24:	3849      	subs	r0, #73	; 0x49
10007a26:	4242      	negs	r2, r0
10007a28:	4150      	adcs	r0, r2
10007a2a:	2201      	movs	r2, #1
10007a2c:	4240      	negs	r0, r0
10007a2e:	4390      	bics	r0, r2
	if (((u32)x >= (u32)MapW) || ((u32)y >= (u32)MapH)) return False;
10007a30:	4662      	mov	r2, ip
10007a32:	6812      	ldr	r2, [r2, #0]
	int dir = (key == KEY_L) ? DIR_L :
10007a34:	3003      	adds	r0, #3
	if (((u32)x >= (u32)MapW) || ((u32)y >= (u32)MapH)) return False;
10007a36:	4293      	cmp	r3, r2
10007a38:	d20b      	bcs.n	10007a52 <_Z4Stepc+0xf6>
10007a3a:	435d      	muls	r5, r3
10007a3c:	46a9      	mov	r9, r5
10007a3e:	4e16      	ldr	r6, [pc, #88]	; (10007a98 <_Z4Stepc+0x13c>)
	u8 tile = *BoardAddr(x,y);
10007a40:	4449      	add	r1, r9
10007a42:	9101      	str	r1, [sp, #4]
	return (tile == FLOOR) || (tile == MARK);
10007a44:	9b01      	ldr	r3, [sp, #4]
10007a46:	5cf3      	ldrb	r3, [r6, r3]
	if (IsFloor(PosX+dx, PosY+dy)) MovePlayer(dir);
10007a48:	3b02      	subs	r3, #2
10007a4a:	2b01      	cmp	r3, #1
10007a4c:	d801      	bhi.n	10007a52 <_Z4Stepc+0xf6>
10007a4e:	f7ff fb7d 	bl	1000714c <_Z10MovePlayerh>
	return True;
10007a52:	2001      	movs	r0, #1
}
10007a54:	b003      	add	sp, #12
10007a56:	bcf0      	pop	{r4, r5, r6, r7}
10007a58:	46bb      	mov	fp, r7
10007a5a:	46b2      	mov	sl, r6
10007a5c:	46a9      	mov	r9, r5
10007a5e:	46a0      	mov	r8, r4
10007a60:	bdf0      	pop	{r4, r5, r6, r7, pc}
	int dir = (key == KEY_L) ? DIR_L :
10007a62:	3848      	subs	r0, #72	; 0x48
10007a64:	e7ee      	b.n	10007a44 <_Z4Stepc+0xe8>
10007a66:	284a      	cmp	r0, #74	; 0x4a
10007a68:	d0f3      	beq.n	10007a52 <_Z4Stepc+0xf6>
10007a6a:	284c      	cmp	r0, #76	; 0x4c
10007a6c:	d1da      	bne.n	10007a24 <_Z4Stepc+0xc8>
10007a6e:	e7f0      	b.n	10007a52 <_Z4Stepc+0xf6>
10007a70:	2000      	movs	r0, #0
10007a72:	e7e5      	b.n	10007a40 <_Z4Stepc+0xe4>
		MarkNum--;
10007a74:	4a09      	ldr	r2, [pc, #36]	; (10007a9c <_Z4Stepc+0x140>)
10007a76:	4690      	mov	r8, r2
10007a78:	4647      	mov	r7, r8
10007a7a:	8812      	ldrh	r2, [r2, #0]
10007a7c:	3a01      	subs	r2, #1
10007a7e:	803a      	strh	r2, [r7, #0]
		*b = FULL;
10007a80:	2205      	movs	r2, #5
10007a82:	5532      	strb	r2, [r6, r4]
10007a84:	e7ca      	b.n	10007a1c <_Z4Stepc+0xc0>
10007a86:	46c0      	nop			; (mov r8, r8)
10007a88:	2001732a 	.word	0x2001732a
10007a8c:	2000e548 	.word	0x2000e548
10007a90:	2001732b 	.word	0x2001732b
10007a94:	2000e544 	.word	0x2000e544
10007a98:	200090d4 	.word	0x200090d4
10007a9c:	20017320 	.word	0x20017320

10007aa0 <_Z9PlaySolvev>:
{
10007aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	LevelInit();
10007aa2:	f7ff fe87 	bl	100077b4 <_Z9LevelInitv>
	const char* s = LevSolve;
10007aa6:	4b75      	ldr	r3, [pc, #468]	; (10007c7c <_Z9PlaySolvev+0x1dc>)
10007aa8:	681e      	ldr	r6, [r3, #0]
	while ((ch = *s++) != 0)
10007aaa:	7832      	ldrb	r2, [r6, #0]
10007aac:	1c74      	adds	r4, r6, #1
10007aae:	2a00      	cmp	r2, #0
10007ab0:	d11c      	bne.n	10007aec <_Z9PlaySolvev+0x4c>
10007ab2:	e0d5      	b.n	10007c60 <_Z9PlaySolvev+0x1c0>
	if ((key >= 'a') && (key <= 'z')) key -= 32;
10007ab4:	0013      	movs	r3, r2
10007ab6:	3b61      	subs	r3, #97	; 0x61
10007ab8:	2b19      	cmp	r3, #25
10007aba:	d801      	bhi.n	10007ac0 <_Z9PlaySolvev+0x20>
10007abc:	3a20      	subs	r2, #32
10007abe:	b2d2      	uxtb	r2, r2
	if (key == 'L')
10007ac0:	2a4c      	cmp	r2, #76	; 0x4c
10007ac2:	d100      	bne.n	10007ac6 <_Z9PlaySolvev+0x26>
10007ac4:	e0b4      	b.n	10007c30 <_Z9PlaySolvev+0x190>
	else if (key == 'R')
10007ac6:	2a52      	cmp	r2, #82	; 0x52
10007ac8:	d100      	bne.n	10007acc <_Z9PlaySolvev+0x2c>
10007aca:	e0b9      	b.n	10007c40 <_Z9PlaySolvev+0x1a0>
	else if (key == 'U')
10007acc:	2a55      	cmp	r2, #85	; 0x55
10007ace:	d100      	bne.n	10007ad2 <_Z9PlaySolvev+0x32>
10007ad0:	e0be      	b.n	10007c50 <_Z9PlaySolvev+0x1b0>
	else if (key == 'D')
10007ad2:	2a44      	cmp	r2, #68	; 0x44
10007ad4:	d100      	bne.n	10007ad8 <_Z9PlaySolvev+0x38>
10007ad6:	e0bf      	b.n	10007c58 <_Z9PlaySolvev+0x1b8>
	return (GetChar() != 0);
10007ad8:	f7ff f93a 	bl	10006d50 <_Z7GetCharv>
		if (StepAnim(ch)) return True;
10007adc:	2800      	cmp	r0, #0
10007ade:	d17e      	bne.n	10007bde <_Z9PlaySolvev+0x13e>
	while ((ch = *s++) != 0)
10007ae0:	0026      	movs	r6, r4
10007ae2:	7822      	ldrb	r2, [r4, #0]
10007ae4:	1c74      	adds	r4, r6, #1
10007ae6:	2a00      	cmp	r2, #0
10007ae8:	d100      	bne.n	10007aec <_Z9PlaySolvev+0x4c>
10007aea:	e0b9      	b.n	10007c60 <_Z9PlaySolvev+0x1c0>
		if ((ch == '(') || (ch == ')')) continue;
10007aec:	0013      	movs	r3, r2
10007aee:	3b28      	subs	r3, #40	; 0x28
10007af0:	2b01      	cmp	r3, #1
10007af2:	d9f5      	bls.n	10007ae0 <_Z9PlaySolvev+0x40>
		if ((ch >= '0') && (ch <= '9'))
10007af4:	0015      	movs	r5, r2
10007af6:	3d30      	subs	r5, #48	; 0x30
10007af8:	b2eb      	uxtb	r3, r5
10007afa:	2b09      	cmp	r3, #9
10007afc:	d8da      	bhi.n	10007ab4 <_Z9PlaySolvev+0x14>
			ch = *s;
10007afe:	7873      	ldrb	r3, [r6, #1]
			if ((ch >= '0') && (ch <= '9'))
10007b00:	3b30      	subs	r3, #48	; 0x30
10007b02:	b2da      	uxtb	r2, r3
10007b04:	2a09      	cmp	r2, #9
10007b06:	d900      	bls.n	10007b0a <_Z9PlaySolvev+0x6a>
10007b08:	e088      	b.n	10007c1c <_Z9PlaySolvev+0x17c>
				i = i*10 + (ch - '0');
10007b0a:	00aa      	lsls	r2, r5, #2
10007b0c:	1955      	adds	r5, r2, r5
10007b0e:	006d      	lsls	r5, r5, #1
10007b10:	195d      	adds	r5, r3, r5
				s++;
10007b12:	3602      	adds	r6, #2
	while ((ch = *s++) != 0)
10007b14:	7832      	ldrb	r2, [r6, #0]
			for (; i > 1; i--)
10007b16:	2d01      	cmp	r5, #1
10007b18:	dde4      	ble.n	10007ae4 <_Z9PlaySolvev+0x44>
				if (*s == '(')
10007b1a:	2a28      	cmp	r2, #40	; 0x28
10007b1c:	d01b      	beq.n	10007b56 <_Z9PlaySolvev+0xb6>
	if ((key >= 'a') && (key <= 'z')) key -= 32;
10007b1e:	0013      	movs	r3, r2
10007b20:	3b61      	subs	r3, #97	; 0x61
10007b22:	2b19      	cmp	r3, #25
10007b24:	d801      	bhi.n	10007b2a <_Z9PlaySolvev+0x8a>
10007b26:	3a20      	subs	r2, #32
10007b28:	b2d2      	uxtb	r2, r2
	if (key == 'L')
10007b2a:	2a4c      	cmp	r2, #76	; 0x4c
10007b2c:	d100      	bne.n	10007b30 <_Z9PlaySolvev+0x90>
10007b2e:	e077      	b.n	10007c20 <_Z9PlaySolvev+0x180>
	else if (key == 'R')
10007b30:	2a52      	cmp	r2, #82	; 0x52
10007b32:	d100      	bne.n	10007b36 <_Z9PlaySolvev+0x96>
10007b34:	e078      	b.n	10007c28 <_Z9PlaySolvev+0x188>
	else if (key == 'U')
10007b36:	2a55      	cmp	r2, #85	; 0x55
10007b38:	d100      	bne.n	10007b3c <_Z9PlaySolvev+0x9c>
10007b3a:	e07d      	b.n	10007c38 <_Z9PlaySolvev+0x198>
	else if (key == 'D')
10007b3c:	2a44      	cmp	r2, #68	; 0x44
10007b3e:	d100      	bne.n	10007b42 <_Z9PlaySolvev+0xa2>
10007b40:	e082      	b.n	10007c48 <_Z9PlaySolvev+0x1a8>
	return (GetChar() != 0);
10007b42:	f7ff f905 	bl	10006d50 <_Z7GetCharv>
					if (StepAnim(*s)) return True;
10007b46:	2800      	cmp	r0, #0
10007b48:	d149      	bne.n	10007bde <_Z9PlaySolvev+0x13e>
			for (; i > 1; i--)
10007b4a:	3d01      	subs	r5, #1
				if (*s == '(')
10007b4c:	7832      	ldrb	r2, [r6, #0]
			for (; i > 1; i--)
10007b4e:	2d01      	cmp	r5, #1
10007b50:	d0c8      	beq.n	10007ae4 <_Z9PlaySolvev+0x44>
				if (*s == '(')
10007b52:	2a28      	cmp	r2, #40	; 0x28
10007b54:	d1e3      	bne.n	10007b1e <_Z9PlaySolvev+0x7e>
10007b56:	7873      	ldrb	r3, [r6, #1]
	while ((ch = *s++) != 0)
10007b58:	2b00      	cmp	r3, #0
10007b5a:	d100      	bne.n	10007b5e <_Z9PlaySolvev+0xbe>
10007b5c:	e088      	b.n	10007c70 <_Z9PlaySolvev+0x1d0>
10007b5e:	1cb7      	adds	r7, r6, #2
10007b60:	e016      	b.n	10007b90 <_Z9PlaySolvev+0xf0>
	if ((key >= 'a') && (key <= 'z')) key -= 32;
10007b62:	001a      	movs	r2, r3
10007b64:	3a61      	subs	r2, #97	; 0x61
10007b66:	2a19      	cmp	r2, #25
10007b68:	d801      	bhi.n	10007b6e <_Z9PlaySolvev+0xce>
10007b6a:	3b20      	subs	r3, #32
10007b6c:	b2db      	uxtb	r3, r3
	if (key == 'L')
10007b6e:	2b4c      	cmp	r3, #76	; 0x4c
10007b70:	d038      	beq.n	10007be4 <_Z9PlaySolvev+0x144>
	else if (key == 'R')
10007b72:	2b52      	cmp	r3, #82	; 0x52
10007b74:	d03e      	beq.n	10007bf4 <_Z9PlaySolvev+0x154>
	else if (key == 'U')
10007b76:	2b55      	cmp	r3, #85	; 0x55
10007b78:	d044      	beq.n	10007c04 <_Z9PlaySolvev+0x164>
	else if (key == 'D')
10007b7a:	2b44      	cmp	r3, #68	; 0x44
10007b7c:	d04a      	beq.n	10007c14 <_Z9PlaySolvev+0x174>
	return (GetChar() != 0);
10007b7e:	f7ff f8e7 	bl	10006d50 <_Z7GetCharv>
		if (StepAnim(ch)) return True;
10007b82:	2800      	cmp	r0, #0
10007b84:	d12b      	bne.n	10007bde <_Z9PlaySolvev+0x13e>
	while ((ch = *s++) != 0)
10007b86:	3701      	adds	r7, #1
10007b88:	1e7b      	subs	r3, r7, #1
10007b8a:	781b      	ldrb	r3, [r3, #0]
10007b8c:	2b00      	cmp	r3, #0
10007b8e:	d0dc      	beq.n	10007b4a <_Z9PlaySolvev+0xaa>
		if (ch == ')') break;
10007b90:	2b29      	cmp	r3, #41	; 0x29
10007b92:	d0da      	beq.n	10007b4a <_Z9PlaySolvev+0xaa>
		if ((ch >= '0') && (ch <= '9'))
10007b94:	001c      	movs	r4, r3
10007b96:	3c30      	subs	r4, #48	; 0x30
10007b98:	b2e2      	uxtb	r2, r4
10007b9a:	2a09      	cmp	r2, #9
10007b9c:	d8e1      	bhi.n	10007b62 <_Z9PlaySolvev+0xc2>
			for (; i > 1; i--) if (StepAnim(*s)) return True;
10007b9e:	2c01      	cmp	r4, #1
10007ba0:	ddf1      	ble.n	10007b86 <_Z9PlaySolvev+0xe6>
10007ba2:	783b      	ldrb	r3, [r7, #0]
	if ((key >= 'a') && (key <= 'z')) key -= 32;
10007ba4:	001a      	movs	r2, r3
10007ba6:	3a61      	subs	r2, #97	; 0x61
10007ba8:	2a19      	cmp	r2, #25
10007baa:	d801      	bhi.n	10007bb0 <_Z9PlaySolvev+0x110>
10007bac:	3b20      	subs	r3, #32
10007bae:	b2db      	uxtb	r3, r3
	if (key == 'L')
10007bb0:	2b4c      	cmp	r3, #76	; 0x4c
10007bb2:	d00d      	beq.n	10007bd0 <_Z9PlaySolvev+0x130>
	else if (key == 'R')
10007bb4:	2b52      	cmp	r3, #82	; 0x52
10007bb6:	d019      	beq.n	10007bec <_Z9PlaySolvev+0x14c>
	else if (key == 'U')
10007bb8:	2b55      	cmp	r3, #85	; 0x55
10007bba:	d01f      	beq.n	10007bfc <_Z9PlaySolvev+0x15c>
	else if (key == 'D')
10007bbc:	2b44      	cmp	r3, #68	; 0x44
10007bbe:	d025      	beq.n	10007c0c <_Z9PlaySolvev+0x16c>
	return (GetChar() != 0);
10007bc0:	f7ff f8c6 	bl	10006d50 <_Z7GetCharv>
			for (; i > 1; i--) if (StepAnim(*s)) return True;
10007bc4:	2800      	cmp	r0, #0
10007bc6:	d10a      	bne.n	10007bde <_Z9PlaySolvev+0x13e>
10007bc8:	3c01      	subs	r4, #1
10007bca:	2c01      	cmp	r4, #1
10007bcc:	d1e9      	bne.n	10007ba2 <_Z9PlaySolvev+0x102>
10007bce:	e7da      	b.n	10007b86 <_Z9PlaySolvev+0xe6>
		Step(KEY_L);
10007bd0:	204a      	movs	r0, #74	; 0x4a
10007bd2:	f7ff fec3 	bl	1000795c <_Z4Stepc>
	return (GetChar() != 0);
10007bd6:	f7ff f8bb 	bl	10006d50 <_Z7GetCharv>
			for (; i > 1; i--) if (StepAnim(*s)) return True;
10007bda:	2800      	cmp	r0, #0
10007bdc:	d0f4      	beq.n	10007bc8 <_Z9PlaySolvev+0x128>
					if (SubAnim(s+1)) return True;
10007bde:	2401      	movs	r4, #1
}
10007be0:	0020      	movs	r0, r4
10007be2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		Step(KEY_L);
10007be4:	204a      	movs	r0, #74	; 0x4a
10007be6:	f7ff feb9 	bl	1000795c <_Z4Stepc>
10007bea:	e7c8      	b.n	10007b7e <_Z9PlaySolvev+0xde>
		Step(KEY_R);
10007bec:	204c      	movs	r0, #76	; 0x4c
10007bee:	f7ff feb5 	bl	1000795c <_Z4Stepc>
10007bf2:	e7e5      	b.n	10007bc0 <_Z9PlaySolvev+0x120>
10007bf4:	204c      	movs	r0, #76	; 0x4c
10007bf6:	f7ff feb1 	bl	1000795c <_Z4Stepc>
10007bfa:	e7c0      	b.n	10007b7e <_Z9PlaySolvev+0xde>
		Step(KEY_U);
10007bfc:	2049      	movs	r0, #73	; 0x49
10007bfe:	f7ff fead 	bl	1000795c <_Z4Stepc>
10007c02:	e7dd      	b.n	10007bc0 <_Z9PlaySolvev+0x120>
10007c04:	2049      	movs	r0, #73	; 0x49
10007c06:	f7ff fea9 	bl	1000795c <_Z4Stepc>
10007c0a:	e7b8      	b.n	10007b7e <_Z9PlaySolvev+0xde>
		Step(KEY_D);
10007c0c:	204b      	movs	r0, #75	; 0x4b
10007c0e:	f7ff fea5 	bl	1000795c <_Z4Stepc>
10007c12:	e7d5      	b.n	10007bc0 <_Z9PlaySolvev+0x120>
10007c14:	204b      	movs	r0, #75	; 0x4b
10007c16:	f7ff fea1 	bl	1000795c <_Z4Stepc>
10007c1a:	e7b0      	b.n	10007b7e <_Z9PlaySolvev+0xde>
10007c1c:	0026      	movs	r6, r4
10007c1e:	e779      	b.n	10007b14 <_Z9PlaySolvev+0x74>
		Step(KEY_L);
10007c20:	204a      	movs	r0, #74	; 0x4a
10007c22:	f7ff fe9b 	bl	1000795c <_Z4Stepc>
10007c26:	e78c      	b.n	10007b42 <_Z9PlaySolvev+0xa2>
		Step(KEY_R);
10007c28:	204c      	movs	r0, #76	; 0x4c
10007c2a:	f7ff fe97 	bl	1000795c <_Z4Stepc>
10007c2e:	e788      	b.n	10007b42 <_Z9PlaySolvev+0xa2>
		Step(KEY_L);
10007c30:	204a      	movs	r0, #74	; 0x4a
10007c32:	f7ff fe93 	bl	1000795c <_Z4Stepc>
10007c36:	e74f      	b.n	10007ad8 <_Z9PlaySolvev+0x38>
		Step(KEY_U);
10007c38:	2049      	movs	r0, #73	; 0x49
10007c3a:	f7ff fe8f 	bl	1000795c <_Z4Stepc>
10007c3e:	e780      	b.n	10007b42 <_Z9PlaySolvev+0xa2>
		Step(KEY_R);
10007c40:	204c      	movs	r0, #76	; 0x4c
10007c42:	f7ff fe8b 	bl	1000795c <_Z4Stepc>
10007c46:	e747      	b.n	10007ad8 <_Z9PlaySolvev+0x38>
		Step(KEY_D);
10007c48:	204b      	movs	r0, #75	; 0x4b
10007c4a:	f7ff fe87 	bl	1000795c <_Z4Stepc>
10007c4e:	e778      	b.n	10007b42 <_Z9PlaySolvev+0xa2>
		Step(KEY_U);
10007c50:	2049      	movs	r0, #73	; 0x49
10007c52:	f7ff fe83 	bl	1000795c <_Z4Stepc>
10007c56:	e73f      	b.n	10007ad8 <_Z9PlaySolvev+0x38>
		Step(KEY_D);
10007c58:	204b      	movs	r0, #75	; 0x4b
10007c5a:	f7ff fe7f 	bl	1000795c <_Z4Stepc>
10007c5e:	e73b      	b.n	10007ad8 <_Z9PlaySolvev+0x38>
	if (MarkNum > 0) return False;
10007c60:	4b07      	ldr	r3, [pc, #28]	; (10007c80 <_Z9PlaySolvev+0x1e0>)
	return False;
10007c62:	2400      	movs	r4, #0
	if (MarkNum > 0) return False;
10007c64:	881b      	ldrh	r3, [r3, #0]
10007c66:	2b00      	cmp	r3, #0
10007c68:	d1ba      	bne.n	10007be0 <_Z9PlaySolvev+0x140>
10007c6a:	f7ff fa07 	bl	1000707c <_Z10SolvedAnimv.part.0>
10007c6e:	e7b7      	b.n	10007be0 <_Z9PlaySolvev+0x140>
			for (; i > 1; i--)
10007c70:	3d01      	subs	r5, #1
10007c72:	2d01      	cmp	r5, #1
10007c74:	d1fc      	bne.n	10007c70 <_Z9PlaySolvev+0x1d0>
	while ((ch = *s++) != 0)
10007c76:	1c74      	adds	r4, r6, #1
10007c78:	e738      	b.n	10007aec <_Z9PlaySolvev+0x4c>
10007c7a:	46c0      	nop			; (mov r8, r8)
10007c7c:	2000cbf0 	.word	0x2000cbf0
10007c80:	20017320 	.word	0x20017320

10007c84 <_Z9LevelInfov>:
	printf("Esc ... leave scene\n");
}

// level info
void LevelInfo()
{
10007c84:	b500      	push	{lr}
10007c86:	b085      	sub	sp, #20
	SetTextMode();
10007c88:	f7fe ff8c 	bl	10006ba4 <_Z11SetTextModev>
	FlushChar();
10007c8c:	f7ff f8d4 	bl	10006e38 <_Z9FlushCharv>
	PrintSetCol(PC_COLOR(PC_BLACK, PC_WHITE));
10007c90:	200f      	movs	r0, #15
10007c92:	f002 f913 	bl	10009ebc <_Z11PrintSetColh>

	PrintSetPos(4,1);
10007c96:	2101      	movs	r1, #1
10007c98:	2004      	movs	r0, #4
10007c9a:	f002 f905 	bl	10009ea8 <_Z11PrintSetPosii>
	PrintText(SelAuthor);
10007c9e:	4812      	ldr	r0, [pc, #72]	; (10007ce8 <_Z9LevelInfov+0x64>)
10007ca0:	f002 fa52 	bl	1000a148 <_Z9PrintTextPKc>
	PrintText(AutName);
10007ca4:	4b11      	ldr	r3, [pc, #68]	; (10007cec <_Z9LevelInfov+0x68>)
10007ca6:	6818      	ldr	r0, [r3, #0]
10007ca8:	f002 fa4e 	bl	1000a148 <_Z9PrintTextPKc>

	PrintSetPos(4,3);
10007cac:	2103      	movs	r1, #3
10007cae:	2004      	movs	r0, #4
10007cb0:	f002 f8fa 	bl	10009ea8 <_Z11PrintSetPosii>
	PrintText(SelColl);
10007cb4:	480e      	ldr	r0, [pc, #56]	; (10007cf0 <_Z9LevelInfov+0x6c>)
10007cb6:	f002 fa47 	bl	1000a148 <_Z9PrintTextPKc>
	PrintText(CollName);	
10007cba:	4b0e      	ldr	r3, [pc, #56]	; (10007cf4 <_Z9LevelInfov+0x70>)
10007cbc:	6818      	ldr	r0, [r3, #0]
10007cbe:	f002 fa43 	bl	1000a148 <_Z9PrintTextPKc>

	PrintSetPos((TEXTW-8)/2, 10);
10007cc2:	210a      	movs	r1, #10
10007cc4:	2024      	movs	r0, #36	; 0x24
10007cc6:	f002 f8ef 	bl	10009ea8 <_Z11PrintSetPosii>
	PrintText("LEVEL ");
10007cca:	480b      	ldr	r0, [pc, #44]	; (10007cf8 <_Z9LevelInfov+0x74>)
10007ccc:	f002 fa3c 	bl	1000a148 <_Z9PrintTextPKc>
	char buf[12];
	DecNum(buf, Level+1);
10007cd0:	4b0a      	ldr	r3, [pc, #40]	; (10007cfc <_Z9LevelInfov+0x78>)
10007cd2:	a801      	add	r0, sp, #4
10007cd4:	6819      	ldr	r1, [r3, #0]
10007cd6:	3101      	adds	r1, #1
10007cd8:	f001 fbd8 	bl	1000948c <_Z6DecNumPcl>
	PrintText(buf);
10007cdc:	a801      	add	r0, sp, #4
10007cde:	f002 fa33 	bl	1000a148 <_Z9PrintTextPKc>
}
10007ce2:	b005      	add	sp, #20
10007ce4:	bd00      	pop	{pc}
10007ce6:	46c0      	nop			; (mov r8, r8)
10007ce8:	1000bb2c 	.word	0x1000bb2c
10007cec:	200090d0 	.word	0x200090d0
10007cf0:	1000bb38 	.word	0x1000bb38
10007cf4:	2000a3b8 	.word	0x2000a3b8
10007cf8:	1000b878 	.word	0x1000b878
10007cfc:	2000cbf4 	.word	0x2000cbf4

10007d00 <_Z8GameLoopv>:

// game loop
void GameLoop()
{
10007d00:	b5f0      	push	{r4, r5, r6, r7, lr}
10007d02:	46c6      	mov	lr, r8
10007d04:	b500      	push	{lr}
	int i;

	// initialize current level
	LevelInit();
10007d06:	f7ff fd55 	bl	100077b4 <_Z9LevelInitv>

	// flush characters from keyboard
	FlushChar();
10007d0a:	f7ff f895 	bl	10006e38 <_Z9FlushCharv>
	printf("right\n");
10007d0e:	4b4e      	ldr	r3, [pc, #312]	; (10007e48 <_Z8GameLoopv+0x148>)
	printf("up\n");
10007d10:	4f4e      	ldr	r7, [pc, #312]	; (10007e4c <_Z8GameLoopv+0x14c>)
	printf("right\n");
10007d12:	4698      	mov	r8, r3
	printf("left\n");
10007d14:	4e4e      	ldr	r6, [pc, #312]	; (10007e50 <_Z8GameLoopv+0x150>)
	printf("down\n");
10007d16:	4d4f      	ldr	r5, [pc, #316]	; (10007e54 <_Z8GameLoopv+0x154>)

	while (True)
	{
		// get key
		i = GetChar();
10007d18:	f7ff f81a 	bl	10006d50 <_Z7GetCharv>
10007d1c:	1e04      	subs	r4, r0, #0
				Level+1, levcur, levnum, CollName, AutName);
			sleep_ms(10); // delay to complete message transmission
			i = KEY_HELP;
		}
#endif
		if (i != 0)
10007d1e:	d0fb      	beq.n	10007d18 <_Z8GameLoopv+0x18>
		{
			// Esc return to selection
			if ((i == KEY_ESC) || (i == KEY_ESC2) || (i == KEY_ESC3)) return;
10007d20:	281b      	cmp	r0, #27
10007d22:	d100      	bne.n	10007d26 <_Z8GameLoopv+0x26>
10007d24:	e08d      	b.n	10007e42 <_Z8GameLoopv+0x142>
10007d26:	2808      	cmp	r0, #8
10007d28:	d100      	bne.n	10007d2c <_Z8GameLoopv+0x2c>
10007d2a:	e08a      	b.n	10007e42 <_Z8GameLoopv+0x142>
10007d2c:	287f      	cmp	r0, #127	; 0x7f
10007d2e:	d100      	bne.n	10007d32 <_Z8GameLoopv+0x32>
10007d30:	e087      	b.n	10007e42 <_Z8GameLoopv+0x142>

			// program info
			if (i == KEY_INFO)
10007d32:	2850      	cmp	r0, #80	; 0x50
10007d34:	d046      	beq.n	10007dc4 <_Z8GameLoopv+0xc4>
			{
				DispInfo();
			}

			// help solution
			else if (i == KEY_HELP)
10007d36:	2848      	cmp	r0, #72	; 0x48
10007d38:	d07e      	beq.n	10007e38 <_Z8GameLoopv+0x138>
				LevelInit();
#endif
			}

			// restart scene
			else if (i == KEY_RESTART)
10007d3a:	2852      	cmp	r0, #82	; 0x52
10007d3c:	d014      	beq.n	10007d68 <_Z8GameLoopv+0x68>
			{
				LevelInit();
			}

			// next scene
			else if (i == KEY_NEXT)
10007d3e:	2857      	cmp	r0, #87	; 0x57
10007d40:	d043      	beq.n	10007dca <_Z8GameLoopv+0xca>
				FlushChar();
				LevelInit();
			}

			// previous scene
			else if (i == KEY_PREV)
10007d42:	2851      	cmp	r0, #81	; 0x51
10007d44:	d14c      	bne.n	10007de0 <_Z8GameLoopv+0xe0>
			{
				Level--;
10007d46:	4a44      	ldr	r2, [pc, #272]	; (10007e58 <_Z8GameLoopv+0x158>)
10007d48:	6813      	ldr	r3, [r2, #0]
10007d4a:	3b01      	subs	r3, #1
10007d4c:	6013      	str	r3, [r2, #0]
				if (Level < 0) Level = LevNum-1;
10007d4e:	2b00      	cmp	r3, #0
10007d50:	da03      	bge.n	10007d5a <_Z8GameLoopv+0x5a>
10007d52:	4b42      	ldr	r3, [pc, #264]	; (10007e5c <_Z8GameLoopv+0x15c>)
10007d54:	681b      	ldr	r3, [r3, #0]
10007d56:	3b01      	subs	r3, #1
10007d58:	6013      	str	r3, [r2, #0]
				LevelInfo();
10007d5a:	f7ff ff93 	bl	10007c84 <_Z9LevelInfov>
				sleep_ms(200);
10007d5e:	20c8      	movs	r0, #200	; 0xc8
10007d60:	f7fc fdde 	bl	10004920 <sleep_ms>
				FlushChar();
10007d64:	f7ff f868 	bl	10006e38 <_Z9FlushCharv>
				LevelInit();
10007d68:	f7ff fd24 	bl	100077b4 <_Z9LevelInitv>
	if (MarkNum > 0) return False;
10007d6c:	4b3c      	ldr	r3, [pc, #240]	; (10007e60 <_Z8GameLoopv+0x160>)
10007d6e:	881c      	ldrh	r4, [r3, #0]
10007d70:	2c00      	cmp	r4, #0
10007d72:	d1d1      	bne.n	10007d18 <_Z8GameLoopv+0x18>
10007d74:	f7ff f982 	bl	1000707c <_Z10SolvedAnimv.part.0>
					DispHelp();
				}
			}

			// solved
			if (SolvedAnim())
10007d78:	2800      	cmp	r0, #0
10007d7a:	d0cd      	beq.n	10007d18 <_Z8GameLoopv+0x18>
			{
				sleep_ms(200);
10007d7c:	20c8      	movs	r0, #200	; 0xc8
10007d7e:	f7fc fdcf 	bl	10004920 <sleep_ms>
	memset(Board, EMPTY, MAPWMAX*MAPHMAX);
10007d82:	2296      	movs	r2, #150	; 0x96
10007d84:	2100      	movs	r1, #0
10007d86:	0152      	lsls	r2, r2, #5
10007d88:	4836      	ldr	r0, [pc, #216]	; (10007e64 <_Z8GameLoopv+0x164>)
10007d8a:	f7f9 f9cd 	bl	10001128 <__wrap_memset>
	lay->on = False;
10007d8e:	2346      	movs	r3, #70	; 0x46
10007d90:	4a35      	ldr	r2, [pc, #212]	; (10007e68 <_Z8GameLoopv+0x168>)
				ClearBoard();
#ifndef AUTOMODE	// automode - autorun all levels to check solutions
				sleep_ms(200);
10007d92:	20c8      	movs	r0, #200	; 0xc8
	lay->on = False;
10007d94:	54d4      	strb	r4, [r2, r3]
				sleep_ms(200);
10007d96:	f7fc fdc3 	bl	10004920 <sleep_ms>
#endif

				// increase scene level
				Level++;
10007d9a:	4a2f      	ldr	r2, [pc, #188]	; (10007e58 <_Z8GameLoopv+0x158>)
				if (Level >= LevNum)
10007d9c:	492f      	ldr	r1, [pc, #188]	; (10007e5c <_Z8GameLoopv+0x15c>)
				Level++;
10007d9e:	6813      	ldr	r3, [r2, #0]
				if (Level >= LevNum)
10007da0:	6809      	ldr	r1, [r1, #0]
				Level++;
10007da2:	3301      	adds	r3, #1
10007da4:	6013      	str	r3, [r2, #0]
				if (Level >= LevNum)
10007da6:	428b      	cmp	r3, r1
10007da8:	db00      	blt.n	10007dac <_Z8GameLoopv+0xac>
				}
				if (GetChar() != 0) return;
				LevelInit();
#else
					// else reset to first level
					Level = 0;
10007daa:	6014      	str	r4, [r2, #0]

				// level info
				LevelInfo();
10007dac:	f7ff ff6a 	bl	10007c84 <_Z9LevelInfov>
				sleep_ms(1500);
10007db0:	482e      	ldr	r0, [pc, #184]	; (10007e6c <_Z8GameLoopv+0x16c>)
10007db2:	f7fc fdb5 	bl	10004920 <sleep_ms>
				FlushChar();
10007db6:	f7ff f83f 	bl	10006e38 <_Z9FlushCharv>
				LevelInit();
10007dba:	f7ff fcfb 	bl	100077b4 <_Z9LevelInitv>
				FlushChar();
10007dbe:	f7ff f83b 	bl	10006e38 <_Z9FlushCharv>
10007dc2:	e7a8      	b.n	10007d16 <_Z8GameLoopv+0x16>
				DispInfo();
10007dc4:	f7ff fc0a 	bl	100075dc <_Z8DispInfov>
10007dc8:	e7d0      	b.n	10007d6c <_Z8GameLoopv+0x6c>
				Level++;
10007dca:	4a23      	ldr	r2, [pc, #140]	; (10007e58 <_Z8GameLoopv+0x158>)
				if (Level >= LevNum) Level = 0;
10007dcc:	4923      	ldr	r1, [pc, #140]	; (10007e5c <_Z8GameLoopv+0x15c>)
				Level++;
10007dce:	6813      	ldr	r3, [r2, #0]
				if (Level >= LevNum) Level = 0;
10007dd0:	6809      	ldr	r1, [r1, #0]
				Level++;
10007dd2:	3301      	adds	r3, #1
10007dd4:	6013      	str	r3, [r2, #0]
				if (Level >= LevNum) Level = 0;
10007dd6:	428b      	cmp	r3, r1
10007dd8:	dbbf      	blt.n	10007d5a <_Z8GameLoopv+0x5a>
10007dda:	2300      	movs	r3, #0
10007ddc:	6013      	str	r3, [r2, #0]
10007dde:	e7bc      	b.n	10007d5a <_Z8GameLoopv+0x5a>
				FlushChar();
10007de0:	f7ff f82a 	bl	10006e38 <_Z9FlushCharv>
				if (!Step(i))
10007de4:	0020      	movs	r0, r4
10007de6:	f7ff fdb9 	bl	1000795c <_Z4Stepc>
10007dea:	2800      	cmp	r0, #0
10007dec:	d1be      	bne.n	10007d6c <_Z8GameLoopv+0x6c>
	printf("\n");
10007dee:	300a      	adds	r0, #10
10007df0:	f7fb ff4c 	bl	10003c8c <__wrap_putchar>
	printf("right\n");
10007df4:	4640      	mov	r0, r8
10007df6:	f7fb ff57 	bl	10003ca8 <__wrap_puts>
	printf("up\n");
10007dfa:	0038      	movs	r0, r7
10007dfc:	f7fb ff54 	bl	10003ca8 <__wrap_puts>
	printf("left\n");
10007e00:	0030      	movs	r0, r6
10007e02:	f7fb ff51 	bl	10003ca8 <__wrap_puts>
	printf("down\n");
10007e06:	0028      	movs	r0, r5
10007e08:	f7fb ff4e 	bl	10003ca8 <__wrap_puts>
	printf("%c ... help solve scene\n", KEY_HELP);
10007e0c:	2148      	movs	r1, #72	; 0x48
10007e0e:	4818      	ldr	r0, [pc, #96]	; (10007e70 <_Z8GameLoopv+0x170>)
10007e10:	f7fb fffa 	bl	10003e08 <__wrap_printf>
	printf("upper right = restart scene\n", KEY_RESTART);
10007e14:	2152      	movs	r1, #82	; 0x52
10007e16:	4817      	ldr	r0, [pc, #92]	; (10007e74 <_Z8GameLoopv+0x174>)
10007e18:	f7fb fff6 	bl	10003e08 <__wrap_printf>
	printf("upper left = previous scene\n");
10007e1c:	4816      	ldr	r0, [pc, #88]	; (10007e78 <_Z8GameLoopv+0x178>)
10007e1e:	f7fb ff43 	bl	10003ca8 <__wrap_puts>
	printf("fire = next scene\n");
10007e22:	4816      	ldr	r0, [pc, #88]	; (10007e7c <_Z8GameLoopv+0x17c>)
10007e24:	f7fb ff40 	bl	10003ca8 <__wrap_puts>
	printf("%c ... program info\n", KEY_INFO);
10007e28:	2150      	movs	r1, #80	; 0x50
10007e2a:	4815      	ldr	r0, [pc, #84]	; (10007e80 <_Z8GameLoopv+0x180>)
10007e2c:	f7fb ffec 	bl	10003e08 <__wrap_printf>
	printf("Esc ... leave scene\n");
10007e30:	4814      	ldr	r0, [pc, #80]	; (10007e84 <_Z8GameLoopv+0x184>)
10007e32:	f7fb ff39 	bl	10003ca8 <__wrap_puts>
}
10007e36:	e799      	b.n	10007d6c <_Z8GameLoopv+0x6c>
				PlaySolve();
10007e38:	f7ff fe32 	bl	10007aa0 <_Z9PlaySolvev>
				LevelInit();
10007e3c:	f7ff fcba 	bl	100077b4 <_Z9LevelInitv>
10007e40:	e794      	b.n	10007d6c <_Z8GameLoopv+0x6c>
#endif
			}
		}
	}
}
10007e42:	bc80      	pop	{r7}
10007e44:	46b8      	mov	r8, r7
10007e46:	bdf0      	pop	{r4, r5, r6, r7, pc}
10007e48:	1000b7c4 	.word	0x1000b7c4
10007e4c:	1000b7cc 	.word	0x1000b7cc
10007e50:	1000b7d0 	.word	0x1000b7d0
10007e54:	1000b7d8 	.word	0x1000b7d8
10007e58:	2000cbf4 	.word	0x2000cbf4
10007e5c:	2000cbe8 	.word	0x2000cbe8
10007e60:	20017320 	.word	0x20017320
10007e64:	200090d4 	.word	0x200090d4
10007e68:	2000cb54 	.word	0x2000cb54
10007e6c:	000005dc 	.word	0x000005dc
10007e70:	1000b7e0 	.word	0x1000b7e0
10007e74:	1000b7fc 	.word	0x1000b7fc
10007e78:	1000b81c 	.word	0x1000b81c
10007e7c:	1000b838 	.word	0x1000b838
10007e80:	1000b84c 	.word	0x1000b84c
10007e84:	1000b864 	.word	0x1000b864

10007e88 <_Z13AuthorSelect1i>:

	// pointer to author
	const sAuthor* aut = &Author[inx];

	// set color
	PrintSetCol((inx == AutInx) ? PC_COLOR(PC_WHITE, PC_BLACK) : PC_COLOR(PC_BLACK, PC_WHITE));
10007e88:	4b2f      	ldr	r3, [pc, #188]	; (10007f48 <_Z13AuthorSelect1i+0xc0>)
{
10007e8a:	b570      	push	{r4, r5, r6, lr}
	PrintSetCol((inx == AutInx) ? PC_COLOR(PC_WHITE, PC_BLACK) : PC_COLOR(PC_BLACK, PC_WHITE));
10007e8c:	681b      	ldr	r3, [r3, #0]
{
10007e8e:	0006      	movs	r6, r0
	PrintSetCol((inx == AutInx) ? PC_COLOR(PC_WHITE, PC_BLACK) : PC_COLOR(PC_BLACK, PC_WHITE));
10007e90:	1a1b      	subs	r3, r3, r0
10007e92:	425a      	negs	r2, r3
10007e94:	4153      	adcs	r3, r2
	int y = inx + 7;
10007e96:	1dc4      	adds	r4, r0, #7
	PrintSetCol((inx == AutInx) ? PC_COLOR(PC_WHITE, PC_BLACK) : PC_COLOR(PC_BLACK, PC_WHITE));
10007e98:	20e1      	movs	r0, #225	; 0xe1
10007e9a:	425b      	negs	r3, r3
10007e9c:	4018      	ands	r0, r3
{
10007e9e:	b084      	sub	sp, #16
	PrintSetCol((inx == AutInx) ? PC_COLOR(PC_WHITE, PC_BLACK) : PC_COLOR(PC_BLACK, PC_WHITE));
10007ea0:	300f      	adds	r0, #15
10007ea2:	f002 f80b 	bl	10009ebc <_Z11PrintSetColh>

	// print author name
	PrintSetPos(1, y);
	PrintSpc();
	PrintText(aut->author);
10007ea6:	0075      	lsls	r5, r6, #1
	PrintSetPos(1, y);
10007ea8:	0021      	movs	r1, r4
10007eaa:	2001      	movs	r0, #1
10007eac:	f001 fffc 	bl	10009ea8 <_Z11PrintSetPosii>
	PrintText(aut->author);
10007eb0:	19ad      	adds	r5, r5, r6
	PrintSpc();
10007eb2:	f002 f85b 	bl	10009f6c <_Z8PrintSpcv>
	PrintText(aut->author);
10007eb6:	4c25      	ldr	r4, [pc, #148]	; (10007f4c <_Z13AuthorSelect1i+0xc4>)
10007eb8:	00ad      	lsls	r5, r5, #2
10007eba:	5928      	ldr	r0, [r5, r4]
10007ebc:	f002 f944 	bl	1000a148 <_Z9PrintTextPKc>

	// print number of collections
	PrintSpcTo(1+AUTNAME_W);
10007ec0:	2033      	movs	r0, #51	; 0x33
10007ec2:	f002 f88f 	bl	10009fe4 <_Z10PrintSpcToi>
	PrintChar(CHAR_VLINE);
	char buf[12];
	int n = DecNum(buf, aut->collnum);
10007ec6:	1964      	adds	r4, r4, r5
	PrintChar(CHAR_VLINE);
10007ec8:	201a      	movs	r0, #26
10007eca:	f001 fffd 	bl	10009ec8 <_Z9PrintCharc>
	int n = DecNum(buf, aut->collnum);
10007ece:	68a1      	ldr	r1, [r4, #8]
10007ed0:	a801      	add	r0, sp, #4
10007ed2:	f001 fadb 	bl	1000948c <_Z6DecNumPcl>
	PrintSpcRep(AUTCOLL_W/2+2-n);
10007ed6:	2308      	movs	r3, #8
10007ed8:	1a18      	subs	r0, r3, r0
10007eda:	f002 f8db 	bl	1000a094 <_Z11PrintSpcRepi>
	CollTotal += aut->collnum;
10007ede:	4a1c      	ldr	r2, [pc, #112]	; (10007f50 <_Z13AuthorSelect1i+0xc8>)
10007ee0:	68a3      	ldr	r3, [r4, #8]
10007ee2:	6811      	ldr	r1, [r2, #0]
	PrintText(buf);
10007ee4:	a801      	add	r0, sp, #4
	CollTotal += aut->collnum;
10007ee6:	468c      	mov	ip, r1
10007ee8:	4463      	add	r3, ip
10007eea:	6013      	str	r3, [r2, #0]
	PrintText(buf);
10007eec:	f002 f92c 	bl	1000a148 <_Z9PrintTextPKc>

	// print number of levels
	PrintSpcTo(1+AUTNAME_W+1+AUTCOLL_W);
10007ef0:	2041      	movs	r0, #65	; 0x41
10007ef2:	f002 f877 	bl	10009fe4 <_Z10PrintSpcToi>
	PrintChar(CHAR_VLINE);
10007ef6:	201a      	movs	r0, #26
10007ef8:	f001 ffe6 	bl	10009ec8 <_Z9PrintCharc>
	int i, j;
	j = 0;
	for (i = 0; i < aut->collnum; i++) j += aut->collect[i].levnum;
10007efc:	68a1      	ldr	r1, [r4, #8]
10007efe:	2900      	cmp	r1, #0
10007f00:	dd1f      	ble.n	10007f42 <_Z13AuthorSelect1i+0xba>
10007f02:	004a      	lsls	r2, r1, #1
10007f04:	1852      	adds	r2, r2, r1
	j = 0;
10007f06:	2100      	movs	r1, #0
	for (i = 0; i < aut->collnum; i++) j += aut->collect[i].levnum;
10007f08:	6863      	ldr	r3, [r4, #4]
10007f0a:	0092      	lsls	r2, r2, #2
10007f0c:	3308      	adds	r3, #8
10007f0e:	18d2      	adds	r2, r2, r3
10007f10:	6818      	ldr	r0, [r3, #0]
10007f12:	330c      	adds	r3, #12
10007f14:	4684      	mov	ip, r0
10007f16:	4461      	add	r1, ip
10007f18:	4293      	cmp	r3, r2
10007f1a:	d1f9      	bne.n	10007f10 <_Z13AuthorSelect1i+0x88>
	LevelTotal += j;
10007f1c:	4a0d      	ldr	r2, [pc, #52]	; (10007f54 <_Z13AuthorSelect1i+0xcc>)
	n = DecNum(buf, j);
10007f1e:	a801      	add	r0, sp, #4
	LevelTotal += j;
10007f20:	6813      	ldr	r3, [r2, #0]
10007f22:	185b      	adds	r3, r3, r1
10007f24:	6013      	str	r3, [r2, #0]
	n = DecNum(buf, j);
10007f26:	f001 fab1 	bl	1000948c <_Z6DecNumPcl>
	PrintSpcRep(AUTLEV_W/2+2-n);
10007f2a:	2308      	movs	r3, #8
10007f2c:	1a18      	subs	r0, r3, r0
10007f2e:	f002 f8b1 	bl	1000a094 <_Z11PrintSpcRepi>
	PrintText(buf);
10007f32:	a801      	add	r0, sp, #4
10007f34:	f002 f908 	bl	1000a148 <_Z9PrintTextPKc>

	// clear rest of row
	PrintSpcTo(TEXTW-1);
10007f38:	204f      	movs	r0, #79	; 0x4f
10007f3a:	f002 f853 	bl	10009fe4 <_Z10PrintSpcToi>
}
10007f3e:	b004      	add	sp, #16
10007f40:	bd70      	pop	{r4, r5, r6, pc}
	j = 0;
10007f42:	2100      	movs	r1, #0
10007f44:	e7ea      	b.n	10007f1c <_Z13AuthorSelect1i+0x94>
10007f46:	46c0      	nop			; (mov r8, r8)
10007f48:	200090cc 	.word	0x200090cc
10007f4c:	2000275c 	.word	0x2000275c
10007f50:	2000a3c0 	.word	0x2000a3c0
10007f54:	2000cbf8 	.word	0x2000cbf8

10007f58 <_Z12AuthorSelectv>:
	printf("Esc ... back\n");
}

// select author (returns True = OK, False = Esc)
Bool AuthorSelect()
{
10007f58:	b5f0      	push	{r4, r5, r6, r7, lr}
10007f5a:	46ce      	mov	lr, r9
10007f5c:	4647      	mov	r7, r8
10007f5e:	b580      	push	{r7, lr}
10007f60:	b085      	sub	sp, #20
	// set text mode
	SetTextMode();
10007f62:	f7fe fe1f 	bl	10006ba4 <_Z11SetTextModev>

	// flush characters from keyboard
	FlushChar();
10007f66:	f7fe ff67 	bl	10006e38 <_Z9FlushCharv>

	// print title frame
	PrintSetCol(PC_COLOR(PC_YELLOW, PC_BLACK));
10007f6a:	20e0      	movs	r0, #224	; 0xe0
10007f6c:	f001 ffa6 	bl	10009ebc <_Z11PrintSetColh>
	int x = (TEXTW - sizeof(SelTitle) + 1 - 4)/2;
	PrintFrame(x, 0, sizeof(SelTitle) - 1 + 4, 3);
10007f70:	2303      	movs	r3, #3
10007f72:	2211      	movs	r2, #17
10007f74:	2100      	movs	r1, #0
10007f76:	201f      	movs	r0, #31
10007f78:	f002 fa0a 	bl	1000a390 <_Z10PrintFrameiiii>

	// print title
	PrintSetPos(x+1, 1);
10007f7c:	2101      	movs	r1, #1
10007f7e:	2020      	movs	r0, #32
10007f80:	f001 ff92 	bl	10009ea8 <_Z11PrintSetPosii>
	PrintSpc();
10007f84:	f001 fff2 	bl	10009f6c <_Z8PrintSpcv>
	PrintText(SelTitle);
10007f88:	487b      	ldr	r0, [pc, #492]	; (10008178 <_Z12AuthorSelectv+0x220>)
10007f8a:	f002 f8dd 	bl	1000a148 <_Z9PrintTextPKc>
	PrintSpc();
10007f8e:	f001 ffed 	bl	10009f6c <_Z8PrintSpcv>

	// print table frame
	PrintSetCol(PC_COLOR(PC_BLACK, PC_WHITE));
10007f92:	200f      	movs	r0, #15
10007f94:	f001 ff92 	bl	10009ebc <_Z11PrintSetColh>
	PrintHLine(0, 4, TEXTW);
10007f98:	2250      	movs	r2, #80	; 0x50
10007f9a:	2104      	movs	r1, #4
10007f9c:	2000      	movs	r0, #0
10007f9e:	f002 f94b 	bl	1000a238 <_Z10PrintHLineiii>
	PrintHLine(0, 6, TEXTW);
10007fa2:	2250      	movs	r2, #80	; 0x50
10007fa4:	2106      	movs	r1, #6
10007fa6:	2000      	movs	r0, #0
10007fa8:	f002 f946 	bl	1000a238 <_Z10PrintHLineiii>
	PrintHLine(0, 6+AutNum+1, TEXTW);
10007fac:	4b73      	ldr	r3, [pc, #460]	; (1000817c <_Z12AuthorSelectv+0x224>)
10007fae:	2250      	movs	r2, #80	; 0x50
10007fb0:	681c      	ldr	r4, [r3, #0]
10007fb2:	2000      	movs	r0, #0
	PrintVLine(0, 4, 3+AutNum+1);
10007fb4:	1d25      	adds	r5, r4, #4
	PrintHLine(0, 6+AutNum+1, TEXTW);
10007fb6:	1de1      	adds	r1, r4, #7
10007fb8:	f002 f93e 	bl	1000a238 <_Z10PrintHLineiii>
	PrintVLine(0, 4, 3+AutNum+1);
10007fbc:	002a      	movs	r2, r5
10007fbe:	2104      	movs	r1, #4
10007fc0:	2000      	movs	r0, #0
10007fc2:	f002 f98b 	bl	1000a2dc <_Z10PrintVLineiii>
	PrintVLine(1+AUTNAME_W, 4, 3+AutNum+1);
10007fc6:	002a      	movs	r2, r5
10007fc8:	2104      	movs	r1, #4
10007fca:	2033      	movs	r0, #51	; 0x33
10007fcc:	f002 f986 	bl	1000a2dc <_Z10PrintVLineiii>
	PrintVLine(1+AUTNAME_W+1+AUTCOLL_W, 4, 3+AutNum+1);
10007fd0:	002a      	movs	r2, r5
10007fd2:	2104      	movs	r1, #4
10007fd4:	2041      	movs	r0, #65	; 0x41
10007fd6:	f002 f981 	bl	1000a2dc <_Z10PrintVLineiii>
	PrintVLine(TEXTW-1, 4, 3+AutNum+1);
10007fda:	002a      	movs	r2, r5
10007fdc:	2104      	movs	r1, #4
10007fde:	204f      	movs	r0, #79	; 0x4f
10007fe0:	f002 f97c 	bl	1000a2dc <_Z10PrintVLineiii>

	// print table head
	int y = 5;
	PrintSetPos(1 + (AUTNAME_W - sizeof(SelTitleName)+1)/2, y);
10007fe4:	2105      	movs	r1, #5
10007fe6:	2014      	movs	r0, #20
10007fe8:	f001 ff5e 	bl	10009ea8 <_Z11PrintSetPosii>
	PrintText(SelTitleName);
10007fec:	4864      	ldr	r0, [pc, #400]	; (10008180 <_Z12AuthorSelectv+0x228>)
10007fee:	f002 f8ab 	bl	1000a148 <_Z9PrintTextPKc>
	PrintSetPos(1 + AUTNAME_W + 1 + (AUTCOLL_W - sizeof(SelTitleColl)+1)/2, y);
10007ff2:	2105      	movs	r1, #5
10007ff4:	2035      	movs	r0, #53	; 0x35
10007ff6:	f001 ff57 	bl	10009ea8 <_Z11PrintSetPosii>
	PrintText(SelTitleColl);
10007ffa:	4862      	ldr	r0, [pc, #392]	; (10008184 <_Z12AuthorSelectv+0x22c>)
10007ffc:	f002 f8a4 	bl	1000a148 <_Z9PrintTextPKc>
	PrintSetPos(1 + AUTNAME_W + 1 + AUTCOLL_W + 1 + (AUTLEV_W - sizeof(SelTitleLev)+1)/2, y);
10008000:	2105      	movs	r1, #5
10008002:	2045      	movs	r0, #69	; 0x45
10008004:	f001 ff50 	bl	10009ea8 <_Z11PrintSetPosii>
	PrintText(SelTitleLev);
10008008:	485f      	ldr	r0, [pc, #380]	; (10008188 <_Z12AuthorSelectv+0x230>)
1000800a:	f002 f89d 	bl	1000a148 <_Z9PrintTextPKc>

	// print list of authors
	CollTotal = 0;
1000800e:	2300      	movs	r3, #0
10008010:	4f5e      	ldr	r7, [pc, #376]	; (1000818c <_Z12AuthorSelectv+0x234>)
	LevelTotal = 0;
10008012:	4e5f      	ldr	r6, [pc, #380]	; (10008190 <_Z12AuthorSelectv+0x238>)
	CollTotal = 0;
10008014:	603b      	str	r3, [r7, #0]
	LevelTotal = 0;
10008016:	6033      	str	r3, [r6, #0]
	int i;
	for (i = 0; i < AutNum; i++)
10008018:	2c00      	cmp	r4, #0
1000801a:	dd06      	ble.n	1000802a <_Z12AuthorSelectv+0xd2>
1000801c:	2500      	movs	r5, #0
	{
		AuthorSelect1(i);
1000801e:	0028      	movs	r0, r5
	for (i = 0; i < AutNum; i++)
10008020:	3501      	adds	r5, #1
		AuthorSelect1(i);
10008022:	f7ff ff31 	bl	10007e88 <_Z13AuthorSelect1i>
	for (i = 0; i < AutNum; i++)
10008026:	42ac      	cmp	r4, r5
10008028:	d1f9      	bne.n	1000801e <_Z12AuthorSelectv+0xc6>
	}

	// print total
	y = AutNum + 7 + 1;
1000802a:	0025      	movs	r5, r4
	PrintSetCol(PC_COLOR(PC_BLACK, PC_WHITE));
1000802c:	200f      	movs	r0, #15
	y = AutNum + 7 + 1;
1000802e:	3508      	adds	r5, #8
	PrintSetCol(PC_COLOR(PC_BLACK, PC_WHITE));
10008030:	f001 ff44 	bl	10009ebc <_Z11PrintSetColh>
	PrintSetPos(2, y);
10008034:	0029      	movs	r1, r5
10008036:	2002      	movs	r0, #2
10008038:	f001 ff36 	bl	10009ea8 <_Z11PrintSetPosii>
	PrintText(SelTitleTotal);
1000803c:	4855      	ldr	r0, [pc, #340]	; (10008194 <_Z12AuthorSelectv+0x23c>)
1000803e:	f002 f883 	bl	1000a148 <_Z9PrintTextPKc>

	char buf[12];
	int n = DecNum(buf, CollTotal);
10008042:	6839      	ldr	r1, [r7, #0]
10008044:	a801      	add	r0, sp, #4
10008046:	f001 fa21 	bl	1000948c <_Z6DecNumPcl>
	PrintSetPos(1+AUTNAME_W+1+AUTCOLL_W/2+2-n,y);
1000804a:	233c      	movs	r3, #60	; 0x3c
1000804c:	0029      	movs	r1, r5
1000804e:	1a18      	subs	r0, r3, r0
10008050:	f001 ff2a 	bl	10009ea8 <_Z11PrintSetPosii>
	PrintText(buf);
10008054:	a801      	add	r0, sp, #4
10008056:	f002 f877 	bl	1000a148 <_Z9PrintTextPKc>

	n = DecNum(buf, LevelTotal);
1000805a:	6831      	ldr	r1, [r6, #0]
1000805c:	a801      	add	r0, sp, #4
1000805e:	f001 fa15 	bl	1000948c <_Z6DecNumPcl>
	PrintSetPos(1+AUTNAME_W+1+AUTCOLL_W+1+AUTLEV_W/2+2-n,y);
10008062:	234a      	movs	r3, #74	; 0x4a
10008064:	0029      	movs	r1, r5
10008066:	1a18      	subs	r0, r3, r0
10008068:	f001 ff1e 	bl	10009ea8 <_Z11PrintSetPosii>
	PrintText(buf);
1000806c:	a801      	add	r0, sp, #4
1000806e:	f002 f86b 	bl	1000a148 <_Z9PrintTextPKc>
	printf("%c ... program info\n", KEY_INFO);
10008072:	4b49      	ldr	r3, [pc, #292]	; (10008198 <_Z12AuthorSelectv+0x240>)
	printf("up\n");
10008074:	4f49      	ldr	r7, [pc, #292]	; (1000819c <_Z12AuthorSelectv+0x244>)
	printf("%c ... program info\n", KEY_INFO);
10008076:	4699      	mov	r9, r3
	printf("down\n");
10008078:	4e49      	ldr	r6, [pc, #292]	; (100081a0 <_Z12AuthorSelectv+0x248>)
	// select
	char c;
	int j;
	for (;;)
	{
		c = WaitChar();
1000807a:	f7fe fed7 	bl	10006e2c <_Z8WaitCharv>

		switch (c)
1000807e:	2850      	cmp	r0, #80	; 0x50
10008080:	d828      	bhi.n	100080d4 <_Z12AuthorSelectv+0x17c>
10008082:	281a      	cmp	r0, #26
10008084:	d90d      	bls.n	100080a2 <_Z12AuthorSelectv+0x14a>
10008086:	381b      	subs	r0, #27
10008088:	b2c0      	uxtb	r0, r0
1000808a:	2835      	cmp	r0, #53	; 0x35
1000808c:	d824      	bhi.n	100080d8 <_Z12AuthorSelectv+0x180>
1000808e:	4b45      	ldr	r3, [pc, #276]	; (100081a4 <_Z12AuthorSelectv+0x24c>)
10008090:	0080      	lsls	r0, r0, #2
10008092:	581b      	ldr	r3, [r3, r0]
10008094:	469f      	mov	pc, r3
10008096:	2000      	movs	r0, #0
			// display select help
			DispSelHelp();
			break;
		}
	}
}
10008098:	b005      	add	sp, #20
1000809a:	bcc0      	pop	{r6, r7}
1000809c:	46b9      	mov	r9, r7
1000809e:	46b0      	mov	r8, r6
100080a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		switch (c)
100080a2:	2808      	cmp	r0, #8
100080a4:	d0f7      	beq.n	10008096 <_Z12AuthorSelectv+0x13e>
100080a6:	280d      	cmp	r0, #13
100080a8:	d116      	bne.n	100080d8 <_Z12AuthorSelectv+0x180>
			CollInx = 0; // selected collection
100080aa:	2200      	movs	r2, #0
100080ac:	4b3e      	ldr	r3, [pc, #248]	; (100081a8 <_Z12AuthorSelectv+0x250>)
100080ae:	601a      	str	r2, [r3, #0]
			AutName = Author[AutInx].author; // author's name
100080b0:	4b3e      	ldr	r3, [pc, #248]	; (100081ac <_Z12AuthorSelectv+0x254>)
100080b2:	4a3f      	ldr	r2, [pc, #252]	; (100081b0 <_Z12AuthorSelectv+0x258>)
100080b4:	6819      	ldr	r1, [r3, #0]
100080b6:	004b      	lsls	r3, r1, #1
100080b8:	185b      	adds	r3, r3, r1
100080ba:	009b      	lsls	r3, r3, #2
100080bc:	5898      	ldr	r0, [r3, r2]
100080be:	493d      	ldr	r1, [pc, #244]	; (100081b4 <_Z12AuthorSelectv+0x25c>)
			Collect = Author[AutInx].collect; // pointer to list of collections
100080c0:	18d3      	adds	r3, r2, r3
			AutName = Author[AutInx].author; // author's name
100080c2:	6008      	str	r0, [r1, #0]
			Collect = Author[AutInx].collect; // pointer to list of collections
100080c4:	4a3c      	ldr	r2, [pc, #240]	; (100081b8 <_Z12AuthorSelectv+0x260>)
100080c6:	6859      	ldr	r1, [r3, #4]
			return True;
100080c8:	2001      	movs	r0, #1
			Collect = Author[AutInx].collect; // pointer to list of collections
100080ca:	6011      	str	r1, [r2, #0]
			CollNum = Author[AutInx].collnum; // number of collections
100080cc:	689a      	ldr	r2, [r3, #8]
100080ce:	4b3b      	ldr	r3, [pc, #236]	; (100081bc <_Z12AuthorSelectv+0x264>)
100080d0:	601a      	str	r2, [r3, #0]
			return True;
100080d2:	e7e1      	b.n	10008098 <_Z12AuthorSelectv+0x140>
		switch (c)
100080d4:	287f      	cmp	r0, #127	; 0x7f
100080d6:	d0de      	beq.n	10008096 <_Z12AuthorSelectv+0x13e>
	printf("\n");
100080d8:	200a      	movs	r0, #10
100080da:	f7fb fdd7 	bl	10003c8c <__wrap_putchar>
	printf("up\n");
100080de:	0038      	movs	r0, r7
100080e0:	f7fb fde2 	bl	10003ca8 <__wrap_puts>
	printf("down\n");
100080e4:	0030      	movs	r0, r6
100080e6:	f7fb fddf 	bl	10003ca8 <__wrap_puts>
	printf("%c ... program info\n", KEY_INFO);
100080ea:	2150      	movs	r1, #80	; 0x50
100080ec:	4648      	mov	r0, r9
100080ee:	f7fb fe8b 	bl	10003e08 <__wrap_printf>
	printf("space ... select\n");
100080f2:	4833      	ldr	r0, [pc, #204]	; (100081c0 <_Z12AuthorSelectv+0x268>)
100080f4:	f7fb fdd8 	bl	10003ca8 <__wrap_puts>
	printf("Esc ... back\n");
100080f8:	4832      	ldr	r0, [pc, #200]	; (100081c4 <_Z12AuthorSelectv+0x26c>)
100080fa:	f7fb fdd5 	bl	10003ca8 <__wrap_puts>
}
100080fe:	e7bc      	b.n	1000807a <_Z12AuthorSelectv+0x122>
			i = AutInx;
10008100:	4d2a      	ldr	r5, [pc, #168]	; (100081ac <_Z12AuthorSelectv+0x254>)
10008102:	682b      	ldr	r3, [r5, #0]
10008104:	4698      	mov	r8, r3
			AutInx = -1;
10008106:	2301      	movs	r3, #1
			AuthorSelect1(i);
10008108:	4640      	mov	r0, r8
			AutInx = -1;
1000810a:	425b      	negs	r3, r3
1000810c:	602b      	str	r3, [r5, #0]
			AuthorSelect1(i);
1000810e:	f7ff febb 	bl	10007e88 <_Z13AuthorSelect1i>
			i++;
10008112:	2301      	movs	r3, #1
10008114:	469c      	mov	ip, r3
10008116:	44e0      	add	r8, ip
			if (i > AutNum-1) i = 0;
10008118:	4544      	cmp	r4, r8
1000811a:	dc01      	bgt.n	10008120 <_Z12AuthorSelectv+0x1c8>
1000811c:	2300      	movs	r3, #0
1000811e:	4698      	mov	r8, r3
			AutInx = i;
10008120:	4643      	mov	r3, r8
			AuthorSelect1(i);
10008122:	4640      	mov	r0, r8
			AutInx = i;
10008124:	602b      	str	r3, [r5, #0]
			AuthorSelect1(i);
10008126:	f7ff feaf 	bl	10007e88 <_Z13AuthorSelect1i>
			CollInx = 0; // selected collection
1000812a:	2200      	movs	r2, #0
1000812c:	4b1e      	ldr	r3, [pc, #120]	; (100081a8 <_Z12AuthorSelectv+0x250>)
			AutName = Author[i].author; // author's name
1000812e:	4921      	ldr	r1, [pc, #132]	; (100081b4 <_Z12AuthorSelectv+0x25c>)
			CollInx = 0; // selected collection
10008130:	601a      	str	r2, [r3, #0]
			AutName = Author[i].author; // author's name
10008132:	4643      	mov	r3, r8
10008134:	005b      	lsls	r3, r3, #1
10008136:	4a1e      	ldr	r2, [pc, #120]	; (100081b0 <_Z12AuthorSelectv+0x258>)
10008138:	4443      	add	r3, r8
1000813a:	009b      	lsls	r3, r3, #2
1000813c:	5898      	ldr	r0, [r3, r2]
			Collect = Author[i].collect; // pointer to list of collections
1000813e:	18d3      	adds	r3, r2, r3
			AutName = Author[i].author; // author's name
10008140:	6008      	str	r0, [r1, #0]
			Collect = Author[i].collect; // pointer to list of collections
10008142:	4a1d      	ldr	r2, [pc, #116]	; (100081b8 <_Z12AuthorSelectv+0x260>)
10008144:	6859      	ldr	r1, [r3, #4]
10008146:	6011      	str	r1, [r2, #0]
			CollNum = Author[i].collnum; // number of collections
10008148:	689a      	ldr	r2, [r3, #8]
1000814a:	4b1c      	ldr	r3, [pc, #112]	; (100081bc <_Z12AuthorSelectv+0x264>)
1000814c:	601a      	str	r2, [r3, #0]
			break;
1000814e:	e794      	b.n	1000807a <_Z12AuthorSelectv+0x122>
			i = AutInx;
10008150:	4d16      	ldr	r5, [pc, #88]	; (100081ac <_Z12AuthorSelectv+0x254>)
10008152:	682b      	ldr	r3, [r5, #0]
10008154:	4698      	mov	r8, r3
			AutInx = -1;
10008156:	2301      	movs	r3, #1
			AuthorSelect1(i);
10008158:	4640      	mov	r0, r8
			AutInx = -1;
1000815a:	425b      	negs	r3, r3
1000815c:	602b      	str	r3, [r5, #0]
			AuthorSelect1(i);
1000815e:	f7ff fe93 	bl	10007e88 <_Z13AuthorSelect1i>
			if (i < 0) i = AutNum-1;
10008162:	4643      	mov	r3, r8
10008164:	3b01      	subs	r3, #1
10008166:	4698      	mov	r8, r3
10008168:	d5da      	bpl.n	10008120 <_Z12AuthorSelectv+0x1c8>
1000816a:	1e63      	subs	r3, r4, #1
1000816c:	4698      	mov	r8, r3
			AutInx = i;
1000816e:	e7d7      	b.n	10008120 <_Z12AuthorSelectv+0x1c8>
			DispInfo();
10008170:	f7ff fa34 	bl	100075dc <_Z8DispInfov>
			break;
10008174:	e781      	b.n	1000807a <_Z12AuthorSelectv+0x122>
10008176:	46c0      	nop			; (mov r8, r8)
10008178:	1000bba4 	.word	0x1000bba4
1000817c:	1000bdc8 	.word	0x1000bdc8
10008180:	1000bb80 	.word	0x1000bb80
10008184:	1000bb74 	.word	0x1000bb74
10008188:	1000bb6c 	.word	0x1000bb6c
1000818c:	2000a3c0 	.word	0x2000a3c0
10008190:	2000cbf8 	.word	0x2000cbf8
10008194:	1000bb8c 	.word	0x1000bb8c
10008198:	1000b84c 	.word	0x1000b84c
1000819c:	1000b7cc 	.word	0x1000b7cc
100081a0:	1000b7d8 	.word	0x1000b7d8
100081a4:	1000b8a4 	.word	0x1000b8a4
100081a8:	2000a3b4 	.word	0x2000a3b4
100081ac:	200090cc 	.word	0x200090cc
100081b0:	2000275c 	.word	0x2000275c
100081b4:	200090d0 	.word	0x200090d0
100081b8:	2000a3c4 	.word	0x2000a3c4
100081bc:	2000a3bc 	.word	0x2000a3bc
100081c0:	1000b880 	.word	0x1000b880
100081c4:	1000b894 	.word	0x1000b894

100081c8 <_Z11CollSelect1i>:
{
	// prepare coordinates on screen
	int y = inx + 8;

	// pointer to author
	const sCollect* coll = &Collect[inx];
100081c8:	4b1b      	ldr	r3, [pc, #108]	; (10008238 <_Z11CollSelect1i+0x70>)
{
100081ca:	b530      	push	{r4, r5, lr}
	const sCollect* coll = &Collect[inx];
100081cc:	0044      	lsls	r4, r0, #1
100081ce:	681b      	ldr	r3, [r3, #0]
100081d0:	1824      	adds	r4, r4, r0
100081d2:	00a4      	lsls	r4, r4, #2
100081d4:	191c      	adds	r4, r3, r4

	// set color
	PrintSetCol((inx == CollInx) ? PC_COLOR(PC_WHITE, PC_BLACK) : PC_COLOR(PC_BLACK, PC_WHITE));
100081d6:	4b19      	ldr	r3, [pc, #100]	; (1000823c <_Z11CollSelect1i+0x74>)
	int y = inx + 8;
100081d8:	0005      	movs	r5, r0
	PrintSetCol((inx == CollInx) ? PC_COLOR(PC_WHITE, PC_BLACK) : PC_COLOR(PC_BLACK, PC_WHITE));
100081da:	681b      	ldr	r3, [r3, #0]
{
100081dc:	b085      	sub	sp, #20
	PrintSetCol((inx == CollInx) ? PC_COLOR(PC_WHITE, PC_BLACK) : PC_COLOR(PC_BLACK, PC_WHITE));
100081de:	1a18      	subs	r0, r3, r0
100081e0:	4243      	negs	r3, r0
100081e2:	4158      	adcs	r0, r3
100081e4:	23e1      	movs	r3, #225	; 0xe1
100081e6:	4240      	negs	r0, r0
100081e8:	4018      	ands	r0, r3
	int y = inx + 8;
100081ea:	3508      	adds	r5, #8
	PrintSetCol((inx == CollInx) ? PC_COLOR(PC_WHITE, PC_BLACK) : PC_COLOR(PC_BLACK, PC_WHITE));
100081ec:	300f      	adds	r0, #15
100081ee:	f001 fe65 	bl	10009ebc <_Z11PrintSetColh>

	// print collection name
	PrintSetPos(1, y);
100081f2:	0029      	movs	r1, r5
100081f4:	2001      	movs	r0, #1
100081f6:	f001 fe57 	bl	10009ea8 <_Z11PrintSetPosii>
	PrintSpc();
100081fa:	f001 feb7 	bl	10009f6c <_Z8PrintSpcv>
	PrintText(coll->name);
100081fe:	6820      	ldr	r0, [r4, #0]
10008200:	f001 ffa2 	bl	1000a148 <_Z9PrintTextPKc>

	// print number of levels
	PrintSpcTo(1+COLNAME_W);
10008204:	2041      	movs	r0, #65	; 0x41
10008206:	f001 feed 	bl	10009fe4 <_Z10PrintSpcToi>
	PrintChar(CHAR_VLINE);
1000820a:	201a      	movs	r0, #26
1000820c:	f001 fe5c 	bl	10009ec8 <_Z9PrintCharc>
	LevelTotal += coll->levnum;
10008210:	4a0b      	ldr	r2, [pc, #44]	; (10008240 <_Z11CollSelect1i+0x78>)
10008212:	68a1      	ldr	r1, [r4, #8]
10008214:	6813      	ldr	r3, [r2, #0]
	char buf[12];
	int n = DecNum(buf, coll->levnum);
10008216:	a801      	add	r0, sp, #4
	LevelTotal += coll->levnum;
10008218:	185b      	adds	r3, r3, r1
1000821a:	6013      	str	r3, [r2, #0]
	int n = DecNum(buf, coll->levnum);
1000821c:	f001 f936 	bl	1000948c <_Z6DecNumPcl>
	PrintSpcRep(AUTLEV_W/2+2-n);
10008220:	2308      	movs	r3, #8
10008222:	1a18      	subs	r0, r3, r0
10008224:	f001 ff36 	bl	1000a094 <_Z11PrintSpcRepi>
	PrintText(buf);
10008228:	a801      	add	r0, sp, #4
1000822a:	f001 ff8d 	bl	1000a148 <_Z9PrintTextPKc>

	// clear rest of row
	PrintSpcTo(TEXTW-1);
1000822e:	204f      	movs	r0, #79	; 0x4f
10008230:	f001 fed8 	bl	10009fe4 <_Z10PrintSpcToi>
}
10008234:	b005      	add	sp, #20
10008236:	bd30      	pop	{r4, r5, pc}
10008238:	2000a3c4 	.word	0x2000a3c4
1000823c:	2000a3b4 	.word	0x2000a3b4
10008240:	2000cbf8 	.word	0x2000cbf8

10008244 <_Z10CollSelectv>:

// select collection (returns True = OK, False = Esc)
Bool CollSelect()
{
10008244:	b5f0      	push	{r4, r5, r6, r7, lr}
10008246:	46ce      	mov	lr, r9
10008248:	4647      	mov	r7, r8
1000824a:	b580      	push	{r7, lr}
1000824c:	b085      	sub	sp, #20
	// set text mode
	SetTextMode();
1000824e:	f7fe fca9 	bl	10006ba4 <_Z11SetTextModev>

	// flush characters from keyboard
	FlushChar();
10008252:	f7fe fdf1 	bl	10006e38 <_Z9FlushCharv>

	// print title frame
	PrintSetCol(PC_COLOR(PC_YELLOW, PC_BLACK));
10008256:	20e0      	movs	r0, #224	; 0xe0
10008258:	f001 fe30 	bl	10009ebc <_Z11PrintSetColh>
	int x = (TEXTW - sizeof(SelCollect) + 1 - 4)/2;
	PrintFrame(x, 0, sizeof(SelCollect) - 1 + 4, 3);
1000825c:	2215      	movs	r2, #21
1000825e:	2303      	movs	r3, #3
10008260:	2100      	movs	r1, #0
10008262:	201d      	movs	r0, #29
10008264:	f002 f894 	bl	1000a390 <_Z10PrintFrameiiii>

	// print title
	PrintSetPos(x+1, 1);
10008268:	2101      	movs	r1, #1
1000826a:	201e      	movs	r0, #30
1000826c:	f001 fe1c 	bl	10009ea8 <_Z11PrintSetPosii>
	PrintSpc();
10008270:	f001 fe7c 	bl	10009f6c <_Z8PrintSpcv>
	PrintText(SelCollect);
10008274:	4880      	ldr	r0, [pc, #512]	; (10008478 <_Z10CollSelectv+0x234>)
10008276:	f001 ff67 	bl	1000a148 <_Z9PrintTextPKc>
	PrintSpc();
1000827a:	f001 fe77 	bl	10009f6c <_Z8PrintSpcv>

	// print author's name
	PrintSetCol(PC_COLOR(PC_BLACK, PC_WHITE));
1000827e:	200f      	movs	r0, #15
10008280:	f001 fe1c 	bl	10009ebc <_Z11PrintSetColh>
	PrintSetPos(0, 4);
10008284:	2104      	movs	r1, #4
10008286:	2000      	movs	r0, #0
10008288:	f001 fe0e 	bl	10009ea8 <_Z11PrintSetPosii>
	PrintText(SelAuthor);
1000828c:	487b      	ldr	r0, [pc, #492]	; (1000847c <_Z10CollSelectv+0x238>)
1000828e:	f001 ff5b 	bl	1000a148 <_Z9PrintTextPKc>
	PrintText(AutName);
10008292:	4b7b      	ldr	r3, [pc, #492]	; (10008480 <_Z10CollSelectv+0x23c>)
10008294:	6818      	ldr	r0, [r3, #0]
10008296:	f001 ff57 	bl	1000a148 <_Z9PrintTextPKc>

	// print table frame
	int y = 5;
	PrintSetCol(PC_COLOR(PC_BLACK, PC_WHITE));
1000829a:	200f      	movs	r0, #15
1000829c:	f001 fe0e 	bl	10009ebc <_Z11PrintSetColh>
	PrintHLine(0, y, TEXTW);
100082a0:	2250      	movs	r2, #80	; 0x50
100082a2:	2105      	movs	r1, #5
100082a4:	2000      	movs	r0, #0
100082a6:	f001 ffc7 	bl	1000a238 <_Z10PrintHLineiii>
	PrintHLine(0, y+2, TEXTW);
100082aa:	2250      	movs	r2, #80	; 0x50
100082ac:	2107      	movs	r1, #7
100082ae:	2000      	movs	r0, #0
100082b0:	f001 ffc2 	bl	1000a238 <_Z10PrintHLineiii>
	PrintHLine(0, y+2+CollNum+1, TEXTW);
100082b4:	4c73      	ldr	r4, [pc, #460]	; (10008484 <_Z10CollSelectv+0x240>)
100082b6:	2250      	movs	r2, #80	; 0x50
100082b8:	6821      	ldr	r1, [r4, #0]
100082ba:	2000      	movs	r0, #0
100082bc:	3108      	adds	r1, #8
100082be:	f001 ffbb 	bl	1000a238 <_Z10PrintHLineiii>
	PrintVLine(0, y, 3+CollNum+1);
100082c2:	6823      	ldr	r3, [r4, #0]
100082c4:	2105      	movs	r1, #5
100082c6:	1d1a      	adds	r2, r3, #4
100082c8:	2000      	movs	r0, #0
100082ca:	f002 f807 	bl	1000a2dc <_Z10PrintVLineiii>
	PrintVLine(1+COLNAME_W, y, 3+CollNum+1);
100082ce:	6823      	ldr	r3, [r4, #0]
100082d0:	2105      	movs	r1, #5
100082d2:	1d1a      	adds	r2, r3, #4
100082d4:	2041      	movs	r0, #65	; 0x41
100082d6:	f002 f801 	bl	1000a2dc <_Z10PrintVLineiii>
	PrintVLine(TEXTW-1, y, 3+CollNum+1);
100082da:	6823      	ldr	r3, [r4, #0]
100082dc:	2105      	movs	r1, #5
100082de:	1d1a      	adds	r2, r3, #4
100082e0:	204f      	movs	r0, #79	; 0x4f
100082e2:	f001 fffb 	bl	1000a2dc <_Z10PrintVLineiii>

	// print table head
	y = 6;
	PrintSetPos(1 + (COLNAME_W - sizeof(SelCollName)+1)/2, y);
100082e6:	2106      	movs	r1, #6
100082e8:	2019      	movs	r0, #25
100082ea:	f001 fddd 	bl	10009ea8 <_Z11PrintSetPosii>
	PrintText(SelCollName);
100082ee:	4866      	ldr	r0, [pc, #408]	; (10008488 <_Z10CollSelectv+0x244>)
100082f0:	f001 ff2a 	bl	1000a148 <_Z9PrintTextPKc>
	PrintSetPos(1 + COLNAME_W + 1 + (AUTLEV_W - sizeof(SelTitleLev)+1)/2, y);
100082f4:	2106      	movs	r1, #6
100082f6:	2045      	movs	r0, #69	; 0x45
100082f8:	f001 fdd6 	bl	10009ea8 <_Z11PrintSetPosii>
	PrintText(SelTitleLev);
100082fc:	4863      	ldr	r0, [pc, #396]	; (1000848c <_Z10CollSelectv+0x248>)
100082fe:	f001 ff23 	bl	1000a148 <_Z9PrintTextPKc>

	// print list of collections
	LevelTotal = 0;
10008302:	2300      	movs	r3, #0
10008304:	4e62      	ldr	r6, [pc, #392]	; (10008490 <_Z10CollSelectv+0x24c>)
	int i;
	for (i = 0; i < CollNum; i++)
10008306:	6821      	ldr	r1, [r4, #0]
	LevelTotal = 0;
10008308:	6033      	str	r3, [r6, #0]
	for (i = 0; i < CollNum; i++)
1000830a:	2900      	cmp	r1, #0
1000830c:	dd07      	ble.n	1000831e <_Z10CollSelectv+0xda>
1000830e:	2500      	movs	r5, #0
	{
		CollSelect1(i);
10008310:	0028      	movs	r0, r5
10008312:	f7ff ff59 	bl	100081c8 <_Z11CollSelect1i>
	for (i = 0; i < CollNum; i++)
10008316:	6821      	ldr	r1, [r4, #0]
10008318:	3501      	adds	r5, #1
1000831a:	42a9      	cmp	r1, r5
1000831c:	dcf8      	bgt.n	10008310 <_Z10CollSelectv+0xcc>
	}

	// print total
	y = CollNum + 8 + 1;
1000831e:	3109      	adds	r1, #9
10008320:	000d      	movs	r5, r1
	PrintSetCol(PC_COLOR(PC_BLACK, PC_WHITE));
10008322:	200f      	movs	r0, #15
10008324:	f001 fdca 	bl	10009ebc <_Z11PrintSetColh>
	PrintSetPos(2, y);
10008328:	0029      	movs	r1, r5
1000832a:	2002      	movs	r0, #2
1000832c:	f001 fdbc 	bl	10009ea8 <_Z11PrintSetPosii>
	PrintText(SelTitleTotal);
10008330:	4858      	ldr	r0, [pc, #352]	; (10008494 <_Z10CollSelectv+0x250>)
10008332:	f001 ff09 	bl	1000a148 <_Z9PrintTextPKc>

	char buf[12];
	int n = DecNum(buf, LevelTotal);
10008336:	6831      	ldr	r1, [r6, #0]
10008338:	a801      	add	r0, sp, #4
1000833a:	f001 f8a7 	bl	1000948c <_Z6DecNumPcl>
	PrintSetPos(1+COLNAME_W+1+AUTLEV_W/2+2-n,y);
1000833e:	234a      	movs	r3, #74	; 0x4a
10008340:	0029      	movs	r1, r5
10008342:	1a18      	subs	r0, r3, r0
10008344:	f001 fdb0 	bl	10009ea8 <_Z11PrintSetPosii>
	PrintText(buf);
10008348:	a801      	add	r0, sp, #4
1000834a:	f001 fefd 	bl	1000a148 <_Z9PrintTextPKc>
	printf("%c ... program info\n", KEY_INFO);
1000834e:	4b52      	ldr	r3, [pc, #328]	; (10008498 <_Z10CollSelectv+0x254>)
	printf("up\n");
10008350:	4f52      	ldr	r7, [pc, #328]	; (1000849c <_Z10CollSelectv+0x258>)
	printf("%c ... program info\n", KEY_INFO);
10008352:	4699      	mov	r9, r3
	printf("down\n");
10008354:	4e52      	ldr	r6, [pc, #328]	; (100084a0 <_Z10CollSelectv+0x25c>)
	// select
	char c;
	int j;
	for (;;)
	{
		c = WaitChar();
10008356:	f7fe fd69 	bl	10006e2c <_Z8WaitCharv>

		switch (c)
1000835a:	2850      	cmp	r0, #80	; 0x50
1000835c:	d829      	bhi.n	100083b2 <_Z10CollSelectv+0x16e>
1000835e:	281a      	cmp	r0, #26
10008360:	d90d      	bls.n	1000837e <_Z10CollSelectv+0x13a>
10008362:	381b      	subs	r0, #27
10008364:	b2c0      	uxtb	r0, r0
10008366:	2835      	cmp	r0, #53	; 0x35
10008368:	d825      	bhi.n	100083b6 <_Z10CollSelectv+0x172>
1000836a:	4b4e      	ldr	r3, [pc, #312]	; (100084a4 <_Z10CollSelectv+0x260>)
1000836c:	0080      	lsls	r0, r0, #2
1000836e:	581b      	ldr	r3, [r3, r0]
10008370:	469f      	mov	pc, r3
10008372:	2000      	movs	r0, #0
			break;
		}
	}

	return False;
}
10008374:	b005      	add	sp, #20
10008376:	bcc0      	pop	{r6, r7}
10008378:	46b9      	mov	r9, r7
1000837a:	46b0      	mov	r8, r6
1000837c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		switch (c)
1000837e:	2808      	cmp	r0, #8
10008380:	d0f7      	beq.n	10008372 <_Z10CollSelectv+0x12e>
10008382:	280d      	cmp	r0, #13
10008384:	d117      	bne.n	100083b6 <_Z10CollSelectv+0x172>
			Level = 0; // selected level
10008386:	2200      	movs	r2, #0
10008388:	4b47      	ldr	r3, [pc, #284]	; (100084a8 <_Z10CollSelectv+0x264>)
			return True;
1000838a:	2001      	movs	r0, #1
			Level = 0; // selected level
1000838c:	601a      	str	r2, [r3, #0]
			CollName = Collect[CollInx].name; // name of collection
1000838e:	4b47      	ldr	r3, [pc, #284]	; (100084ac <_Z10CollSelectv+0x268>)
10008390:	681a      	ldr	r2, [r3, #0]
10008392:	0053      	lsls	r3, r2, #1
10008394:	189a      	adds	r2, r3, r2
10008396:	4b46      	ldr	r3, [pc, #280]	; (100084b0 <_Z10CollSelectv+0x26c>)
10008398:	0092      	lsls	r2, r2, #2
1000839a:	681b      	ldr	r3, [r3, #0]
1000839c:	189b      	adds	r3, r3, r2
1000839e:	6819      	ldr	r1, [r3, #0]
100083a0:	4a44      	ldr	r2, [pc, #272]	; (100084b4 <_Z10CollSelectv+0x270>)
100083a2:	6011      	str	r1, [r2, #0]
			Levels = Collect[CollInx].levels; // pointer to list of levels
100083a4:	4a44      	ldr	r2, [pc, #272]	; (100084b8 <_Z10CollSelectv+0x274>)
100083a6:	6859      	ldr	r1, [r3, #4]
100083a8:	6011      	str	r1, [r2, #0]
			LevNum = Collect[CollInx].levnum; // number of levels
100083aa:	689a      	ldr	r2, [r3, #8]
100083ac:	4b43      	ldr	r3, [pc, #268]	; (100084bc <_Z10CollSelectv+0x278>)
100083ae:	601a      	str	r2, [r3, #0]
			return True;
100083b0:	e7e0      	b.n	10008374 <_Z10CollSelectv+0x130>
		switch (c)
100083b2:	287f      	cmp	r0, #127	; 0x7f
100083b4:	d0dd      	beq.n	10008372 <_Z10CollSelectv+0x12e>
	printf("\n");
100083b6:	200a      	movs	r0, #10
100083b8:	f7fb fc68 	bl	10003c8c <__wrap_putchar>
	printf("up\n");
100083bc:	0038      	movs	r0, r7
100083be:	f7fb fc73 	bl	10003ca8 <__wrap_puts>
	printf("down\n");
100083c2:	0030      	movs	r0, r6
100083c4:	f7fb fc70 	bl	10003ca8 <__wrap_puts>
	printf("%c ... program info\n", KEY_INFO);
100083c8:	2150      	movs	r1, #80	; 0x50
100083ca:	4648      	mov	r0, r9
100083cc:	f7fb fd1c 	bl	10003e08 <__wrap_printf>
	printf("space ... select\n");
100083d0:	483b      	ldr	r0, [pc, #236]	; (100084c0 <_Z10CollSelectv+0x27c>)
100083d2:	f7fb fc69 	bl	10003ca8 <__wrap_puts>
	printf("Esc ... back\n");
100083d6:	483b      	ldr	r0, [pc, #236]	; (100084c4 <_Z10CollSelectv+0x280>)
100083d8:	f7fb fc66 	bl	10003ca8 <__wrap_puts>
}
100083dc:	e7bb      	b.n	10008356 <_Z10CollSelectv+0x112>
			i = CollInx;
100083de:	4d33      	ldr	r5, [pc, #204]	; (100084ac <_Z10CollSelectv+0x268>)
100083e0:	682b      	ldr	r3, [r5, #0]
100083e2:	4698      	mov	r8, r3
			CollInx = -1;
100083e4:	2301      	movs	r3, #1
			CollSelect1(i);
100083e6:	4640      	mov	r0, r8
			CollInx = -1;
100083e8:	425b      	negs	r3, r3
100083ea:	602b      	str	r3, [r5, #0]
			CollSelect1(i);
100083ec:	f7ff feec 	bl	100081c8 <_Z11CollSelect1i>
			i++;
100083f0:	4643      	mov	r3, r8
100083f2:	1c58      	adds	r0, r3, #1
			if (i > CollNum-1) i = 0;
100083f4:	6823      	ldr	r3, [r4, #0]
100083f6:	4283      	cmp	r3, r0
100083f8:	dd39      	ble.n	1000846e <_Z10CollSelectv+0x22a>
			CollName = Collect[i].name; // name of collection
100083fa:	0043      	lsls	r3, r0, #1
100083fc:	181b      	adds	r3, r3, r0
100083fe:	009b      	lsls	r3, r3, #2
10008400:	4698      	mov	r8, r3
			CollInx = i;
10008402:	6028      	str	r0, [r5, #0]
			CollSelect1(i);
10008404:	f7ff fee0 	bl	100081c8 <_Z11CollSelect1i>
			Level = 0; // selected level
10008408:	2200      	movs	r2, #0
1000840a:	4b27      	ldr	r3, [pc, #156]	; (100084a8 <_Z10CollSelectv+0x264>)
1000840c:	601a      	str	r2, [r3, #0]
			CollName = Collect[i].name; // name of collection
1000840e:	4b28      	ldr	r3, [pc, #160]	; (100084b0 <_Z10CollSelectv+0x26c>)
10008410:	681b      	ldr	r3, [r3, #0]
10008412:	4443      	add	r3, r8
10008414:	6819      	ldr	r1, [r3, #0]
10008416:	4a27      	ldr	r2, [pc, #156]	; (100084b4 <_Z10CollSelectv+0x270>)
10008418:	6011      	str	r1, [r2, #0]
			Levels = Collect[i].levels; // pointer to list of levels
1000841a:	4a27      	ldr	r2, [pc, #156]	; (100084b8 <_Z10CollSelectv+0x274>)
1000841c:	6859      	ldr	r1, [r3, #4]
1000841e:	6011      	str	r1, [r2, #0]
			LevNum = Collect[i].levnum; // number of levels
10008420:	689a      	ldr	r2, [r3, #8]
10008422:	4b26      	ldr	r3, [pc, #152]	; (100084bc <_Z10CollSelectv+0x278>)
10008424:	601a      	str	r2, [r3, #0]
			break;
10008426:	e796      	b.n	10008356 <_Z10CollSelectv+0x112>
			i = CollInx;
10008428:	4d20      	ldr	r5, [pc, #128]	; (100084ac <_Z10CollSelectv+0x268>)
1000842a:	682b      	ldr	r3, [r5, #0]
1000842c:	4698      	mov	r8, r3
			CollInx = -1;
1000842e:	2301      	movs	r3, #1
			CollSelect1(i);
10008430:	4640      	mov	r0, r8
			CollInx = -1;
10008432:	425b      	negs	r3, r3
10008434:	602b      	str	r3, [r5, #0]
			CollSelect1(i);
10008436:	f7ff fec7 	bl	100081c8 <_Z11CollSelect1i>
			if (i < 0) i = CollNum-1;
1000843a:	4643      	mov	r3, r8
1000843c:	3b01      	subs	r3, #1
1000843e:	4698      	mov	r8, r3
10008440:	d502      	bpl.n	10008448 <_Z10CollSelectv+0x204>
10008442:	6823      	ldr	r3, [r4, #0]
10008444:	3b01      	subs	r3, #1
10008446:	4698      	mov	r8, r3
			CollInx = i;
10008448:	4643      	mov	r3, r8
			CollSelect1(i);
1000844a:	4640      	mov	r0, r8
			CollInx = i;
1000844c:	602b      	str	r3, [r5, #0]
			CollSelect1(i);
1000844e:	f7ff febb 	bl	100081c8 <_Z11CollSelect1i>
			Level = 0; // selected level
10008452:	2200      	movs	r2, #0
10008454:	4b14      	ldr	r3, [pc, #80]	; (100084a8 <_Z10CollSelectv+0x264>)
10008456:	601a      	str	r2, [r3, #0]
			CollName = Collect[i].name; // name of collection
10008458:	4643      	mov	r3, r8
1000845a:	005b      	lsls	r3, r3, #1
1000845c:	4443      	add	r3, r8
1000845e:	009a      	lsls	r2, r3, #2
10008460:	4b13      	ldr	r3, [pc, #76]	; (100084b0 <_Z10CollSelectv+0x26c>)
10008462:	681b      	ldr	r3, [r3, #0]
10008464:	189b      	adds	r3, r3, r2
10008466:	e7d5      	b.n	10008414 <_Z10CollSelectv+0x1d0>
			DispInfo();
10008468:	f7ff f8b8 	bl	100075dc <_Z8DispInfov>
			break;
1000846c:	e773      	b.n	10008356 <_Z10CollSelectv+0x112>
1000846e:	2300      	movs	r3, #0
			if (i > CollNum-1) i = 0;
10008470:	2000      	movs	r0, #0
10008472:	4698      	mov	r8, r3
10008474:	e7c5      	b.n	10008402 <_Z10CollSelectv+0x1be>
10008476:	46c0      	nop			; (mov r8, r8)
10008478:	1000bb48 	.word	0x1000bb48
1000847c:	1000bb2c 	.word	0x1000bb2c
10008480:	200090d0 	.word	0x200090d0
10008484:	2000a3bc 	.word	0x2000a3bc
10008488:	1000bb5c 	.word	0x1000bb5c
1000848c:	1000bb6c 	.word	0x1000bb6c
10008490:	2000cbf8 	.word	0x2000cbf8
10008494:	1000bb8c 	.word	0x1000bb8c
10008498:	1000b84c 	.word	0x1000b84c
1000849c:	1000b7cc 	.word	0x1000b7cc
100084a0:	1000b7d8 	.word	0x1000b7d8
100084a4:	1000b97c 	.word	0x1000b97c
100084a8:	2000cbf4 	.word	0x2000cbf4
100084ac:	2000a3b4 	.word	0x2000a3b4
100084b0:	2000a3c4 	.word	0x2000a3c4
100084b4:	2000a3b8 	.word	0x2000a3b8
100084b8:	2000cbfc 	.word	0x2000cbfc
100084bc:	2000cbe8 	.word	0x2000cbe8
100084c0:	1000b880 	.word	0x1000b880
100084c4:	1000b894 	.word	0x1000b894

100084c8 <_Z9LevSelectv>:
	PrintSpcRep(x2);
}

// select level (returns True = OK, False = Esc)
Bool LevSelect()
{
100084c8:	b5f0      	push	{r4, r5, r6, r7, lr}
100084ca:	46de      	mov	lr, fp
100084cc:	464e      	mov	r6, r9
100084ce:	4645      	mov	r5, r8
100084d0:	4657      	mov	r7, sl
100084d2:	b5e0      	push	{r5, r6, r7, lr}
100084d4:	b087      	sub	sp, #28
	// set text mode
	SetTextMode();
100084d6:	f7fe fb65 	bl	10006ba4 <_Z11SetTextModev>

	// flush characters from keyboard
	FlushChar();
100084da:	f7fe fcad 	bl	10006e38 <_Z9FlushCharv>

	// print title frame
	PrintSetCol(PC_COLOR(PC_YELLOW, PC_BLACK));
100084de:	20e0      	movs	r0, #224	; 0xe0
100084e0:	f001 fcec 	bl	10009ebc <_Z11PrintSetColh>
	int x = (TEXTW - sizeof(SelLevel) + 1 - 4)/2;
	PrintFrame(x, 0, sizeof(SelLevel) - 1 + 4, 3);
100084e4:	2210      	movs	r2, #16
100084e6:	2303      	movs	r3, #3
100084e8:	2100      	movs	r1, #0
100084ea:	2020      	movs	r0, #32
100084ec:	f001 ff50 	bl	1000a390 <_Z10PrintFrameiiii>

	// print title
	PrintSetPos(x+1, 1);
100084f0:	2101      	movs	r1, #1
100084f2:	2021      	movs	r0, #33	; 0x21
100084f4:	f001 fcd8 	bl	10009ea8 <_Z11PrintSetPosii>
	PrintSpc();
100084f8:	f001 fd38 	bl	10009f6c <_Z8PrintSpcv>
	PrintText(SelLevel);
100084fc:	48b5      	ldr	r0, [pc, #724]	; (100087d4 <_Z9LevSelectv+0x30c>)
100084fe:	f001 fe23 	bl	1000a148 <_Z9PrintTextPKc>
	PrintSpc();
10008502:	f001 fd33 	bl	10009f6c <_Z8PrintSpcv>

	// print author's name
	PrintSetCol(PC_COLOR(PC_BLACK, PC_WHITE));
10008506:	200f      	movs	r0, #15
10008508:	f001 fcd8 	bl	10009ebc <_Z11PrintSetColh>
	PrintSetPos(4, 4);
1000850c:	2104      	movs	r1, #4
1000850e:	2004      	movs	r0, #4
10008510:	f001 fcca 	bl	10009ea8 <_Z11PrintSetPosii>
	PrintText(SelAuthor);
10008514:	48b0      	ldr	r0, [pc, #704]	; (100087d8 <_Z9LevSelectv+0x310>)
10008516:	f001 fe17 	bl	1000a148 <_Z9PrintTextPKc>
	PrintText(AutName);
1000851a:	4bb0      	ldr	r3, [pc, #704]	; (100087dc <_Z9LevSelectv+0x314>)
	PrintSetCol(PC_COLOR(PC_BLACK, PC_WHITE));
	PrintFrame(0, y, TEXTW, LevRows+2);

	// print list of levels
	int i;
	for (i = 0; i < LevNum; i++)
1000851c:	2500      	movs	r5, #0
	PrintText(AutName);
1000851e:	6818      	ldr	r0, [r3, #0]
10008520:	f001 fe12 	bl	1000a148 <_Z9PrintTextPKc>
	PrintSetCol(PC_COLOR(PC_BLACK, PC_WHITE));
10008524:	200f      	movs	r0, #15
10008526:	f001 fcc9 	bl	10009ebc <_Z11PrintSetColh>
	PrintSetPos(0, 5);
1000852a:	2105      	movs	r1, #5
1000852c:	2000      	movs	r0, #0
1000852e:	f001 fcbb 	bl	10009ea8 <_Z11PrintSetPosii>
	PrintText(SelColl);
10008532:	48ab      	ldr	r0, [pc, #684]	; (100087e0 <_Z9LevSelectv+0x318>)
10008534:	f001 fe08 	bl	1000a148 <_Z9PrintTextPKc>
	PrintText(CollName);
10008538:	4baa      	ldr	r3, [pc, #680]	; (100087e4 <_Z9LevSelectv+0x31c>)
1000853a:	6818      	ldr	r0, [r3, #0]
1000853c:	f001 fe04 	bl	1000a148 <_Z9PrintTextPKc>
	LevRows = (LevNum + ROWLEV - 1) / ROWLEV;
10008540:	4ba9      	ldr	r3, [pc, #676]	; (100087e8 <_Z9LevSelectv+0x320>)
10008542:	210a      	movs	r1, #10
10008544:	6818      	ldr	r0, [r3, #0]
10008546:	4699      	mov	r9, r3
10008548:	3009      	adds	r0, #9
1000854a:	f7f7 fee7 	bl	1000031c <__wrap___aeabi_idiv>
1000854e:	4ca7      	ldr	r4, [pc, #668]	; (100087ec <_Z9LevSelectv+0x324>)
10008550:	6020      	str	r0, [r4, #0]
	PrintSetCol(PC_COLOR(PC_BLACK, PC_WHITE));
10008552:	200f      	movs	r0, #15
10008554:	f001 fcb2 	bl	10009ebc <_Z11PrintSetColh>
	PrintFrame(0, y, TEXTW, LevRows+2);
10008558:	6823      	ldr	r3, [r4, #0]
1000855a:	2250      	movs	r2, #80	; 0x50
1000855c:	3302      	adds	r3, #2
1000855e:	2106      	movs	r1, #6
10008560:	2000      	movs	r0, #0
10008562:	f001 ff15 	bl	1000a390 <_Z10PrintFrameiiii>
	for (i = 0; i < LevNum; i++)
10008566:	464b      	mov	r3, r9
10008568:	681b      	ldr	r3, [r3, #0]
1000856a:	2b00      	cmp	r3, #0
1000856c:	dd3c      	ble.n	100085e8 <_Z9LevSelectv+0x120>
1000856e:	ab03      	add	r3, sp, #12
10008570:	4698      	mov	r8, r3
10008572:	4b9f      	ldr	r3, [pc, #636]	; (100087f0 <_Z9LevSelectv+0x328>)
	int x2 = (LEVW - 2 - n)/2;
10008574:	4647      	mov	r7, r8
10008576:	469b      	mov	fp, r3
	PrintSetCol((inx == Level) ? PC_COLOR(PC_WHITE, PC_BLACK) : PC_COLOR(PC_BLACK, PC_WHITE));
10008578:	23e0      	movs	r3, #224	; 0xe0
1000857a:	469a      	mov	sl, r3
	int n = DecNum(buf, inx+1);
1000857c:	002e      	movs	r6, r5
1000857e:	3501      	adds	r5, #1
10008580:	0029      	movs	r1, r5
10008582:	0038      	movs	r0, r7
10008584:	f000 ff82 	bl	1000948c <_Z6DecNumPcl>
	PrintSetCol((inx == Level) ? PC_COLOR(PC_WHITE, PC_BLACK) : PC_COLOR(PC_BLACK, PC_WHITE));
10008588:	465b      	mov	r3, fp
1000858a:	681b      	ldr	r3, [r3, #0]
	int n = DecNum(buf, inx+1);
1000858c:	0004      	movs	r4, r0
	PrintSetCol((inx == Level) ? PC_COLOR(PC_WHITE, PC_BLACK) : PC_COLOR(PC_BLACK, PC_WHITE));
1000858e:	1b98      	subs	r0, r3, r6
10008590:	1e43      	subs	r3, r0, #1
10008592:	4198      	sbcs	r0, r3
10008594:	4653      	mov	r3, sl
10008596:	4240      	negs	r0, r0
10008598:	4398      	bics	r0, r3
1000859a:	30f0      	adds	r0, #240	; 0xf0
1000859c:	f001 fc8e 	bl	10009ebc <_Z11PrintSetColh>
	int row = inx / ROWLEV;
100085a0:	210a      	movs	r1, #10
100085a2:	0030      	movs	r0, r6
100085a4:	f7f7 feba 	bl	1000031c <__wrap___aeabi_idiv>
	int col = inx % ROWLEV;
100085a8:	210a      	movs	r1, #10
	PrintSetPos(col*LEVW+1, row+7);
100085aa:	1dc3      	adds	r3, r0, #7
	int col = inx % ROWLEV;
100085ac:	0030      	movs	r0, r6
	PrintSetPos(col*LEVW+1, row+7);
100085ae:	4698      	mov	r8, r3
	int col = inx % ROWLEV;
100085b0:	f7f7 feb4 	bl	1000031c <__wrap___aeabi_idiv>
	PrintSetPos(col*LEVW+1, row+7);
100085b4:	00c8      	lsls	r0, r1, #3
100085b6:	3001      	adds	r0, #1
100085b8:	4641      	mov	r1, r8
100085ba:	f001 fc75 	bl	10009ea8 <_Z11PrintSetPosii>
	int x1 = (LEVW - 2 - n + 1)/2;
100085be:	2307      	movs	r3, #7
100085c0:	1b1b      	subs	r3, r3, r4
100085c2:	0fd8      	lsrs	r0, r3, #31
100085c4:	18c0      	adds	r0, r0, r3
100085c6:	1040      	asrs	r0, r0, #1
	PrintSpcRep(x1);
100085c8:	f001 fd64 	bl	1000a094 <_Z11PrintSpcRepi>
	PrintText(buf);
100085cc:	0038      	movs	r0, r7
100085ce:	f001 fdbb 	bl	1000a148 <_Z9PrintTextPKc>
	int x2 = (LEVW - 2 - n)/2;
100085d2:	2306      	movs	r3, #6
100085d4:	1b1c      	subs	r4, r3, r4
100085d6:	0fe0      	lsrs	r0, r4, #31
100085d8:	1900      	adds	r0, r0, r4
100085da:	1040      	asrs	r0, r0, #1
	PrintSpcRep(x2);
100085dc:	f001 fd5a 	bl	1000a094 <_Z11PrintSpcRepi>
	for (i = 0; i < LevNum; i++)
100085e0:	464b      	mov	r3, r9
100085e2:	681b      	ldr	r3, [r3, #0]
100085e4:	42ab      	cmp	r3, r5
100085e6:	dcc9      	bgt.n	1000857c <_Z9LevSelectv+0xb4>
	// select
	char c;
	int j;
	for (;;)
	{
		c = WaitChar();
100085e8:	f7fe fc20 	bl	10006e2c <_Z8WaitCharv>

		switch (c)
100085ec:	2850      	cmp	r0, #80	; 0x50
100085ee:	d809      	bhi.n	10008604 <_Z9LevSelectv+0x13c>
100085f0:	281a      	cmp	r0, #26
100085f2:	d92b      	bls.n	1000864c <_Z9LevSelectv+0x184>
100085f4:	381b      	subs	r0, #27
100085f6:	b2c0      	uxtb	r0, r0
100085f8:	2835      	cmp	r0, #53	; 0x35
100085fa:	d805      	bhi.n	10008608 <_Z9LevSelectv+0x140>
100085fc:	4b7d      	ldr	r3, [pc, #500]	; (100087f4 <_Z9LevSelectv+0x32c>)
100085fe:	0080      	lsls	r0, r0, #2
10008600:	581b      	ldr	r3, [r3, r0]
10008602:	469f      	mov	pc, r3
10008604:	287f      	cmp	r0, #127	; 0x7f
10008606:	d019      	beq.n	1000863c <_Z9LevSelectv+0x174>
	printf("\n");
10008608:	200a      	movs	r0, #10
1000860a:	f7fb fb3f 	bl	10003c8c <__wrap_putchar>
	printf("right\n");
1000860e:	487a      	ldr	r0, [pc, #488]	; (100087f8 <_Z9LevSelectv+0x330>)
10008610:	f7fb fb4a 	bl	10003ca8 <__wrap_puts>
	printf("up\n");
10008614:	4879      	ldr	r0, [pc, #484]	; (100087fc <_Z9LevSelectv+0x334>)
10008616:	f7fb fb47 	bl	10003ca8 <__wrap_puts>
	printf("left\n");
1000861a:	4879      	ldr	r0, [pc, #484]	; (10008800 <_Z9LevSelectv+0x338>)
1000861c:	f7fb fb44 	bl	10003ca8 <__wrap_puts>
	printf("down\n");
10008620:	4878      	ldr	r0, [pc, #480]	; (10008804 <_Z9LevSelectv+0x33c>)
10008622:	f7fb fb41 	bl	10003ca8 <__wrap_puts>
	printf("%c ... program info\n", KEY_INFO);
10008626:	2150      	movs	r1, #80	; 0x50
10008628:	4877      	ldr	r0, [pc, #476]	; (10008808 <_Z9LevSelectv+0x340>)
1000862a:	f7fb fbed 	bl	10003e08 <__wrap_printf>
	printf("space ... select\n");
1000862e:	4877      	ldr	r0, [pc, #476]	; (1000880c <_Z9LevSelectv+0x344>)
10008630:	f7fb fb3a 	bl	10003ca8 <__wrap_puts>
	printf("Esc ... back\n");
10008634:	4876      	ldr	r0, [pc, #472]	; (10008810 <_Z9LevSelectv+0x348>)
10008636:	f7fb fb37 	bl	10003ca8 <__wrap_puts>
}
1000863a:	e7d5      	b.n	100085e8 <_Z9LevSelectv+0x120>
		switch (c)
1000863c:	2000      	movs	r0, #0
			break;
		}
	}

	return False;
}
1000863e:	b007      	add	sp, #28
10008640:	bcf0      	pop	{r4, r5, r6, r7}
10008642:	46bb      	mov	fp, r7
10008644:	46b2      	mov	sl, r6
10008646:	46a9      	mov	r9, r5
10008648:	46a0      	mov	r8, r4
1000864a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		switch (c)
1000864c:	2808      	cmp	r0, #8
1000864e:	d0f5      	beq.n	1000863c <_Z9LevSelectv+0x174>
10008650:	280d      	cmp	r0, #13
10008652:	d1d9      	bne.n	10008608 <_Z9LevSelectv+0x140>
			LevDef = Levels[i*2]; // current level definition
10008654:	4b6f      	ldr	r3, [pc, #444]	; (10008814 <_Z9LevSelectv+0x34c>)
10008656:	00ed      	lsls	r5, r5, #3
10008658:	681b      	ldr	r3, [r3, #0]
1000865a:	4a6f      	ldr	r2, [pc, #444]	; (10008818 <_Z9LevSelectv+0x350>)
1000865c:	5959      	ldr	r1, [r3, r5]
			LevSolve = Levels[i*2+1]; // current level solve
1000865e:	195d      	adds	r5, r3, r5
			LevDef = Levels[i*2]; // current level definition
10008660:	6011      	str	r1, [r2, #0]
			LevSolve = Levels[i*2+1]; // current level solve
10008662:	686a      	ldr	r2, [r5, #4]
10008664:	4b6d      	ldr	r3, [pc, #436]	; (1000881c <_Z9LevSelectv+0x354>)
			return True;
10008666:	2001      	movs	r0, #1
			LevSolve = Levels[i*2+1]; // current level solve
10008668:	601a      	str	r2, [r3, #0]
			return True;
1000866a:	e7e8      	b.n	1000863e <_Z9LevSelectv+0x176>
			Level = -1;
1000866c:	2301      	movs	r3, #1
			i = Level;
1000866e:	4c60      	ldr	r4, [pc, #384]	; (100087f0 <_Z9LevSelectv+0x328>)
	int n = DecNum(buf, inx+1);
10008670:	ae03      	add	r6, sp, #12
			i = Level;
10008672:	6827      	ldr	r7, [r4, #0]
			Level = -1;
10008674:	425b      	negs	r3, r3
	int n = DecNum(buf, inx+1);
10008676:	1c79      	adds	r1, r7, #1
10008678:	0030      	movs	r0, r6
			Level = -1;
1000867a:	6023      	str	r3, [r4, #0]
	int n = DecNum(buf, inx+1);
1000867c:	f000 ff06 	bl	1000948c <_Z6DecNumPcl>
	PrintSetCol((inx == Level) ? PC_COLOR(PC_WHITE, PC_BLACK) : PC_COLOR(PC_BLACK, PC_WHITE));
10008680:	6823      	ldr	r3, [r4, #0]
	int n = DecNum(buf, inx+1);
10008682:	0005      	movs	r5, r0
	PrintSetCol((inx == Level) ? PC_COLOR(PC_WHITE, PC_BLACK) : PC_COLOR(PC_BLACK, PC_WHITE));
10008684:	1afb      	subs	r3, r7, r3
10008686:	425a      	negs	r2, r3
10008688:	4153      	adcs	r3, r2
1000868a:	20e1      	movs	r0, #225	; 0xe1
1000868c:	425b      	negs	r3, r3
1000868e:	4018      	ands	r0, r3
10008690:	300f      	adds	r0, #15
10008692:	f001 fc13 	bl	10009ebc <_Z11PrintSetColh>
	int row = inx / ROWLEV;
10008696:	210a      	movs	r1, #10
10008698:	0038      	movs	r0, r7
1000869a:	f7f7 fe3f 	bl	1000031c <__wrap___aeabi_idiv>
	int col = inx % ROWLEV;
1000869e:	210a      	movs	r1, #10
	PrintSetPos(col*LEVW+1, row+7);
100086a0:	1dc3      	adds	r3, r0, #7
	int col = inx % ROWLEV;
100086a2:	0038      	movs	r0, r7
	PrintSetPos(col*LEVW+1, row+7);
100086a4:	4698      	mov	r8, r3
	int col = inx % ROWLEV;
100086a6:	f7f7 fe39 	bl	1000031c <__wrap___aeabi_idiv>
	PrintSetPos(col*LEVW+1, row+7);
100086aa:	00c8      	lsls	r0, r1, #3
100086ac:	3001      	adds	r0, #1
100086ae:	4641      	mov	r1, r8
100086b0:	f001 fbfa 	bl	10009ea8 <_Z11PrintSetPosii>
	int x1 = (LEVW - 2 - n + 1)/2;
100086b4:	2307      	movs	r3, #7
100086b6:	1b5b      	subs	r3, r3, r5
100086b8:	0fd8      	lsrs	r0, r3, #31
100086ba:	18c0      	adds	r0, r0, r3
100086bc:	1040      	asrs	r0, r0, #1
	PrintSpcRep(x1);
100086be:	f001 fce9 	bl	1000a094 <_Z11PrintSpcRepi>
	PrintText(buf);
100086c2:	0030      	movs	r0, r6
100086c4:	f001 fd40 	bl	1000a148 <_Z9PrintTextPKc>
	int x2 = (LEVW - 2 - n)/2;
100086c8:	2006      	movs	r0, #6
100086ca:	1b45      	subs	r5, r0, r5
100086cc:	0fe8      	lsrs	r0, r5, #31
100086ce:	1940      	adds	r0, r0, r5
100086d0:	1040      	asrs	r0, r0, #1
	PrintSpcRep(x2);
100086d2:	f001 fcdf 	bl	1000a094 <_Z11PrintSpcRepi>
			if (i < 0) i = LevNum-1;
100086d6:	1e7d      	subs	r5, r7, #1
100086d8:	d500      	bpl.n	100086dc <_Z9LevSelectv+0x214>
100086da:	e171      	b.n	100089c0 <_Z9LevSelectv+0x4f8>
	int n = DecNum(buf, inx+1);
100086dc:	0039      	movs	r1, r7
			Level = i;
100086de:	6025      	str	r5, [r4, #0]
	int n = DecNum(buf, inx+1);
100086e0:	0030      	movs	r0, r6
100086e2:	f000 fed3 	bl	1000948c <_Z6DecNumPcl>
	PrintSetCol((inx == Level) ? PC_COLOR(PC_WHITE, PC_BLACK) : PC_COLOR(PC_BLACK, PC_WHITE));
100086e6:	6823      	ldr	r3, [r4, #0]
	int n = DecNum(buf, inx+1);
100086e8:	0007      	movs	r7, r0
	PrintSetCol((inx == Level) ? PC_COLOR(PC_WHITE, PC_BLACK) : PC_COLOR(PC_BLACK, PC_WHITE));
100086ea:	1aeb      	subs	r3, r5, r3
100086ec:	425a      	negs	r2, r3
100086ee:	4153      	adcs	r3, r2
100086f0:	20e1      	movs	r0, #225	; 0xe1
100086f2:	425b      	negs	r3, r3
100086f4:	4018      	ands	r0, r3
100086f6:	300f      	adds	r0, #15
100086f8:	f001 fbe0 	bl	10009ebc <_Z11PrintSetColh>
	int row = inx / ROWLEV;
100086fc:	210a      	movs	r1, #10
100086fe:	0028      	movs	r0, r5
10008700:	f7f7 fe0c 	bl	1000031c <__wrap___aeabi_idiv>
	int col = inx % ROWLEV;
10008704:	210a      	movs	r1, #10
	PrintSetPos(col*LEVW+1, row+7);
10008706:	1dc4      	adds	r4, r0, #7
	int col = inx % ROWLEV;
10008708:	0028      	movs	r0, r5
1000870a:	f7f7 fe07 	bl	1000031c <__wrap___aeabi_idiv>
	PrintSetPos(col*LEVW+1, row+7);
1000870e:	00c8      	lsls	r0, r1, #3
10008710:	3001      	adds	r0, #1
10008712:	0021      	movs	r1, r4
10008714:	f001 fbc8 	bl	10009ea8 <_Z11PrintSetPosii>
	int x1 = (LEVW - 2 - n + 1)/2;
10008718:	2307      	movs	r3, #7
1000871a:	1bdb      	subs	r3, r3, r7
1000871c:	0fd8      	lsrs	r0, r3, #31
1000871e:	18c0      	adds	r0, r0, r3
10008720:	1040      	asrs	r0, r0, #1
	PrintSpcRep(x1);
10008722:	f001 fcb7 	bl	1000a094 <_Z11PrintSpcRepi>
	PrintText(buf);
10008726:	0030      	movs	r0, r6
10008728:	f001 fd0e 	bl	1000a148 <_Z9PrintTextPKc>
	int x2 = (LEVW - 2 - n)/2;
1000872c:	2006      	movs	r0, #6
1000872e:	1bc7      	subs	r7, r0, r7
10008730:	0ff8      	lsrs	r0, r7, #31
10008732:	19c0      	adds	r0, r0, r7
10008734:	1040      	asrs	r0, r0, #1
	PrintSpcRep(x2);
10008736:	f001 fcad 	bl	1000a094 <_Z11PrintSpcRepi>
			LevDef = Levels[i*2]; // current level definition
1000873a:	4b36      	ldr	r3, [pc, #216]	; (10008814 <_Z9LevSelectv+0x34c>)
1000873c:	00ea      	lsls	r2, r5, #3
1000873e:	681b      	ldr	r3, [r3, #0]
10008740:	4935      	ldr	r1, [pc, #212]	; (10008818 <_Z9LevSelectv+0x350>)
10008742:	5898      	ldr	r0, [r3, r2]
			LevSolve = Levels[i*2+1]; // current level solve
10008744:	189b      	adds	r3, r3, r2
			LevDef = Levels[i*2]; // current level definition
10008746:	6008      	str	r0, [r1, #0]
			LevSolve = Levels[i*2+1]; // current level solve
10008748:	685a      	ldr	r2, [r3, #4]
1000874a:	4b34      	ldr	r3, [pc, #208]	; (1000881c <_Z9LevSelectv+0x354>)
1000874c:	601a      	str	r2, [r3, #0]
			break;
1000874e:	e74b      	b.n	100085e8 <_Z9LevSelectv+0x120>
			Level = -1;
10008750:	2301      	movs	r3, #1
			i = Level;
10008752:	4c27      	ldr	r4, [pc, #156]	; (100087f0 <_Z9LevSelectv+0x328>)
	int n = DecNum(buf, inx+1);
10008754:	ae03      	add	r6, sp, #12
			i = Level;
10008756:	6827      	ldr	r7, [r4, #0]
			Level = -1;
10008758:	425b      	negs	r3, r3
	int n = DecNum(buf, inx+1);
1000875a:	1c79      	adds	r1, r7, #1
1000875c:	0030      	movs	r0, r6
			Level = -1;
1000875e:	6023      	str	r3, [r4, #0]
	int n = DecNum(buf, inx+1);
10008760:	f000 fe94 	bl	1000948c <_Z6DecNumPcl>
	PrintSetCol((inx == Level) ? PC_COLOR(PC_WHITE, PC_BLACK) : PC_COLOR(PC_BLACK, PC_WHITE));
10008764:	6823      	ldr	r3, [r4, #0]
	int n = DecNum(buf, inx+1);
10008766:	0005      	movs	r5, r0
	PrintSetCol((inx == Level) ? PC_COLOR(PC_WHITE, PC_BLACK) : PC_COLOR(PC_BLACK, PC_WHITE));
10008768:	1afb      	subs	r3, r7, r3
1000876a:	425a      	negs	r2, r3
1000876c:	4153      	adcs	r3, r2
1000876e:	20e1      	movs	r0, #225	; 0xe1
10008770:	425b      	negs	r3, r3
10008772:	4018      	ands	r0, r3
10008774:	300f      	adds	r0, #15
10008776:	f001 fba1 	bl	10009ebc <_Z11PrintSetColh>
	int row = inx / ROWLEV;
1000877a:	210a      	movs	r1, #10
1000877c:	0038      	movs	r0, r7
1000877e:	f7f7 fdcd 	bl	1000031c <__wrap___aeabi_idiv>
	int col = inx % ROWLEV;
10008782:	210a      	movs	r1, #10
	PrintSetPos(col*LEVW+1, row+7);
10008784:	1dc3      	adds	r3, r0, #7
	int col = inx % ROWLEV;
10008786:	0038      	movs	r0, r7
	PrintSetPos(col*LEVW+1, row+7);
10008788:	4698      	mov	r8, r3
	int col = inx % ROWLEV;
1000878a:	f7f7 fdc7 	bl	1000031c <__wrap___aeabi_idiv>
	PrintSetPos(col*LEVW+1, row+7);
1000878e:	00c8      	lsls	r0, r1, #3
10008790:	3001      	adds	r0, #1
10008792:	4641      	mov	r1, r8
10008794:	f001 fb88 	bl	10009ea8 <_Z11PrintSetPosii>
	int x1 = (LEVW - 2 - n + 1)/2;
10008798:	2307      	movs	r3, #7
1000879a:	1b5b      	subs	r3, r3, r5
1000879c:	0fd8      	lsrs	r0, r3, #31
1000879e:	18c0      	adds	r0, r0, r3
100087a0:	1040      	asrs	r0, r0, #1
	PrintSpcRep(x1);
100087a2:	f001 fc77 	bl	1000a094 <_Z11PrintSpcRepi>
	PrintText(buf);
100087a6:	0030      	movs	r0, r6
100087a8:	f001 fcce 	bl	1000a148 <_Z9PrintTextPKc>
	int x2 = (LEVW - 2 - n)/2;
100087ac:	2006      	movs	r0, #6
100087ae:	1b45      	subs	r5, r0, r5
100087b0:	0fe8      	lsrs	r0, r5, #31
100087b2:	1940      	adds	r0, r0, r5
100087b4:	1040      	asrs	r0, r0, #1
	PrintSpcRep(x2);
100087b6:	f001 fc6d 	bl	1000a094 <_Z11PrintSpcRepi>
			if (i < 0) i = LevNum-1;
100087ba:	230a      	movs	r3, #10
100087bc:	425b      	negs	r3, r3
100087be:	18fd      	adds	r5, r7, r3
100087c0:	d500      	bpl.n	100087c4 <_Z9LevSelectv+0x2fc>
100087c2:	e0f8      	b.n	100089b6 <_Z9LevSelectv+0x4ee>
	int n = DecNum(buf, inx+1);
100087c4:	0039      	movs	r1, r7
			Level = i;
100087c6:	6025      	str	r5, [r4, #0]
	int n = DecNum(buf, inx+1);
100087c8:	3909      	subs	r1, #9
100087ca:	e789      	b.n	100086e0 <_Z9LevSelectv+0x218>
			DispInfo();
100087cc:	f7fe ff06 	bl	100075dc <_Z8DispInfov>
			break;
100087d0:	e70a      	b.n	100085e8 <_Z9LevSelectv+0x120>
100087d2:	46c0      	nop			; (mov r8, r8)
100087d4:	1000bb94 	.word	0x1000bb94
100087d8:	1000bb2c 	.word	0x1000bb2c
100087dc:	200090d0 	.word	0x200090d0
100087e0:	1000bb38 	.word	0x1000bb38
100087e4:	2000a3b8 	.word	0x2000a3b8
100087e8:	2000cbe8 	.word	0x2000cbe8
100087ec:	2000cbec 	.word	0x2000cbec
100087f0:	2000cbf4 	.word	0x2000cbf4
100087f4:	1000ba54 	.word	0x1000ba54
100087f8:	1000b7c4 	.word	0x1000b7c4
100087fc:	1000b7cc 	.word	0x1000b7cc
10008800:	1000b7d0 	.word	0x1000b7d0
10008804:	1000b7d8 	.word	0x1000b7d8
10008808:	1000b84c 	.word	0x1000b84c
1000880c:	1000b880 	.word	0x1000b880
10008810:	1000b894 	.word	0x1000b894
10008814:	2000cbfc 	.word	0x2000cbfc
10008818:	2000cbe4 	.word	0x2000cbe4
1000881c:	2000cbf0 	.word	0x2000cbf0
			Level = -1;
10008820:	2301      	movs	r3, #1
			i = Level;
10008822:	4c69      	ldr	r4, [pc, #420]	; (100089c8 <_Z9LevSelectv+0x500>)
	int n = DecNum(buf, inx+1);
10008824:	ae03      	add	r6, sp, #12
			i = Level;
10008826:	6827      	ldr	r7, [r4, #0]
			Level = -1;
10008828:	425b      	negs	r3, r3
	int n = DecNum(buf, inx+1);
1000882a:	1c7d      	adds	r5, r7, #1
1000882c:	0029      	movs	r1, r5
1000882e:	0030      	movs	r0, r6
			Level = -1;
10008830:	6023      	str	r3, [r4, #0]
	int n = DecNum(buf, inx+1);
10008832:	f000 fe2b 	bl	1000948c <_Z6DecNumPcl>
	PrintSetCol((inx == Level) ? PC_COLOR(PC_WHITE, PC_BLACK) : PC_COLOR(PC_BLACK, PC_WHITE));
10008836:	6823      	ldr	r3, [r4, #0]
	int n = DecNum(buf, inx+1);
10008838:	4680      	mov	r8, r0
	PrintSetCol((inx == Level) ? PC_COLOR(PC_WHITE, PC_BLACK) : PC_COLOR(PC_BLACK, PC_WHITE));
1000883a:	1afb      	subs	r3, r7, r3
1000883c:	425a      	negs	r2, r3
1000883e:	4153      	adcs	r3, r2
10008840:	20e1      	movs	r0, #225	; 0xe1
10008842:	425b      	negs	r3, r3
10008844:	4018      	ands	r0, r3
10008846:	300f      	adds	r0, #15
10008848:	f001 fb38 	bl	10009ebc <_Z11PrintSetColh>
	int row = inx / ROWLEV;
1000884c:	210a      	movs	r1, #10
1000884e:	0038      	movs	r0, r7
10008850:	f7f7 fd64 	bl	1000031c <__wrap___aeabi_idiv>
	int col = inx % ROWLEV;
10008854:	210a      	movs	r1, #10
	PrintSetPos(col*LEVW+1, row+7);
10008856:	1dc3      	adds	r3, r0, #7
	int col = inx % ROWLEV;
10008858:	0038      	movs	r0, r7
	PrintSetPos(col*LEVW+1, row+7);
1000885a:	469a      	mov	sl, r3
	int col = inx % ROWLEV;
1000885c:	f7f7 fd5e 	bl	1000031c <__wrap___aeabi_idiv>
	PrintSetPos(col*LEVW+1, row+7);
10008860:	00c8      	lsls	r0, r1, #3
10008862:	3001      	adds	r0, #1
10008864:	4651      	mov	r1, sl
10008866:	f001 fb1f 	bl	10009ea8 <_Z11PrintSetPosii>
	int x1 = (LEVW - 2 - n + 1)/2;
1000886a:	4642      	mov	r2, r8
1000886c:	2307      	movs	r3, #7
1000886e:	1a9b      	subs	r3, r3, r2
10008870:	0fd8      	lsrs	r0, r3, #31
10008872:	18c0      	adds	r0, r0, r3
10008874:	1040      	asrs	r0, r0, #1
	PrintSpcRep(x1);
10008876:	f001 fc0d 	bl	1000a094 <_Z11PrintSpcRepi>
	PrintText(buf);
1000887a:	0030      	movs	r0, r6
1000887c:	f001 fc64 	bl	1000a148 <_Z9PrintTextPKc>
	int x2 = (LEVW - 2 - n)/2;
10008880:	4642      	mov	r2, r8
10008882:	2306      	movs	r3, #6
10008884:	1a9b      	subs	r3, r3, r2
10008886:	0fd8      	lsrs	r0, r3, #31
10008888:	18c0      	adds	r0, r0, r3
1000888a:	1040      	asrs	r0, r0, #1
	PrintSpcRep(x2);
1000888c:	f001 fc02 	bl	1000a094 <_Z11PrintSpcRepi>
			if (i > LevNum-1) i = 0;
10008890:	464b      	mov	r3, r9
10008892:	681b      	ldr	r3, [r3, #0]
10008894:	42ab      	cmp	r3, r5
10008896:	dd00      	ble.n	1000889a <_Z9LevSelectv+0x3d2>
10008898:	e087      	b.n	100089aa <_Z9LevSelectv+0x4e2>
1000889a:	2307      	movs	r3, #7
1000889c:	469a      	mov	sl, r3
1000889e:	3b06      	subs	r3, #6
100088a0:	4698      	mov	r8, r3
100088a2:	3303      	adds	r3, #3
100088a4:	9301      	str	r3, [sp, #4]
100088a6:	2300      	movs	r3, #0
100088a8:	2701      	movs	r7, #1
100088aa:	469b      	mov	fp, r3
100088ac:	2500      	movs	r5, #0
	int n = DecNum(buf, inx+1);
100088ae:	0039      	movs	r1, r7
100088b0:	0030      	movs	r0, r6
			Level = i;
100088b2:	6025      	str	r5, [r4, #0]
	int n = DecNum(buf, inx+1);
100088b4:	f000 fdea 	bl	1000948c <_Z6DecNumPcl>
100088b8:	0007      	movs	r7, r0
	PrintSetCol((inx == Level) ? PC_COLOR(PC_WHITE, PC_BLACK) : PC_COLOR(PC_BLACK, PC_WHITE));
100088ba:	6820      	ldr	r0, [r4, #0]
100088bc:	1a28      	subs	r0, r5, r0
100088be:	4243      	negs	r3, r0
100088c0:	4158      	adcs	r0, r3
100088c2:	23e1      	movs	r3, #225	; 0xe1
100088c4:	4240      	negs	r0, r0
100088c6:	4018      	ands	r0, r3
100088c8:	300f      	adds	r0, #15
100088ca:	f001 faf7 	bl	10009ebc <_Z11PrintSetColh>
	PrintSetPos(col*LEVW+1, row+7);
100088ce:	4651      	mov	r1, sl
100088d0:	4640      	mov	r0, r8
100088d2:	f001 fae9 	bl	10009ea8 <_Z11PrintSetPosii>
	int x1 = (LEVW - 2 - n + 1)/2;
100088d6:	2307      	movs	r3, #7
100088d8:	1bdb      	subs	r3, r3, r7
100088da:	0fd8      	lsrs	r0, r3, #31
100088dc:	18c0      	adds	r0, r0, r3
100088de:	1040      	asrs	r0, r0, #1
	PrintSpcRep(x1);
100088e0:	f001 fbd8 	bl	1000a094 <_Z11PrintSpcRepi>
	PrintText(buf);
100088e4:	0030      	movs	r0, r6
100088e6:	f001 fc2f 	bl	1000a148 <_Z9PrintTextPKc>
	int x2 = (LEVW - 2 - n)/2;
100088ea:	2006      	movs	r0, #6
100088ec:	1bc7      	subs	r7, r0, r7
100088ee:	0ff8      	lsrs	r0, r7, #31
100088f0:	19c0      	adds	r0, r0, r7
100088f2:	1040      	asrs	r0, r0, #1
	PrintSpcRep(x2);
100088f4:	f001 fbce 	bl	1000a094 <_Z11PrintSpcRepi>
			LevDef = Levels[i*2]; // current level definition
100088f8:	465a      	mov	r2, fp
100088fa:	4b34      	ldr	r3, [pc, #208]	; (100089cc <_Z9LevSelectv+0x504>)
100088fc:	681b      	ldr	r3, [r3, #0]
100088fe:	5899      	ldr	r1, [r3, r2]
10008900:	4a33      	ldr	r2, [pc, #204]	; (100089d0 <_Z9LevSelectv+0x508>)
10008902:	6011      	str	r1, [r2, #0]
			LevSolve = Levels[i*2+1]; // current level solve
10008904:	9a01      	ldr	r2, [sp, #4]
10008906:	589a      	ldr	r2, [r3, r2]
10008908:	4b32      	ldr	r3, [pc, #200]	; (100089d4 <_Z9LevSelectv+0x50c>)
1000890a:	601a      	str	r2, [r3, #0]
			break;
1000890c:	e66c      	b.n	100085e8 <_Z9LevSelectv+0x120>
			Level = -1;
1000890e:	2301      	movs	r3, #1
			i = Level;
10008910:	4c2d      	ldr	r4, [pc, #180]	; (100089c8 <_Z9LevSelectv+0x500>)
	int n = DecNum(buf, inx+1);
10008912:	ae03      	add	r6, sp, #12
			i = Level;
10008914:	6827      	ldr	r7, [r4, #0]
			Level = -1;
10008916:	425b      	negs	r3, r3
	int n = DecNum(buf, inx+1);
10008918:	1c79      	adds	r1, r7, #1
1000891a:	0030      	movs	r0, r6
			Level = -1;
1000891c:	6023      	str	r3, [r4, #0]
	int n = DecNum(buf, inx+1);
1000891e:	f000 fdb5 	bl	1000948c <_Z6DecNumPcl>
	PrintSetCol((inx == Level) ? PC_COLOR(PC_WHITE, PC_BLACK) : PC_COLOR(PC_BLACK, PC_WHITE));
10008922:	6823      	ldr	r3, [r4, #0]
	int n = DecNum(buf, inx+1);
10008924:	0005      	movs	r5, r0
	PrintSetCol((inx == Level) ? PC_COLOR(PC_WHITE, PC_BLACK) : PC_COLOR(PC_BLACK, PC_WHITE));
10008926:	1afb      	subs	r3, r7, r3
10008928:	425a      	negs	r2, r3
1000892a:	4153      	adcs	r3, r2
1000892c:	20e1      	movs	r0, #225	; 0xe1
1000892e:	425b      	negs	r3, r3
10008930:	4018      	ands	r0, r3
10008932:	300f      	adds	r0, #15
10008934:	f001 fac2 	bl	10009ebc <_Z11PrintSetColh>
	int row = inx / ROWLEV;
10008938:	210a      	movs	r1, #10
1000893a:	0038      	movs	r0, r7
1000893c:	f7f7 fcee 	bl	1000031c <__wrap___aeabi_idiv>
	int col = inx % ROWLEV;
10008940:	210a      	movs	r1, #10
	PrintSetPos(col*LEVW+1, row+7);
10008942:	1dc3      	adds	r3, r0, #7
	int col = inx % ROWLEV;
10008944:	0038      	movs	r0, r7
	PrintSetPos(col*LEVW+1, row+7);
10008946:	4698      	mov	r8, r3
	int col = inx % ROWLEV;
10008948:	f7f7 fce8 	bl	1000031c <__wrap___aeabi_idiv>
	PrintSetPos(col*LEVW+1, row+7);
1000894c:	00c8      	lsls	r0, r1, #3
1000894e:	3001      	adds	r0, #1
10008950:	4641      	mov	r1, r8
10008952:	f001 faa9 	bl	10009ea8 <_Z11PrintSetPosii>
	int x1 = (LEVW - 2 - n + 1)/2;
10008956:	2307      	movs	r3, #7
10008958:	1b5b      	subs	r3, r3, r5
1000895a:	0fd8      	lsrs	r0, r3, #31
1000895c:	18c0      	adds	r0, r0, r3
1000895e:	1040      	asrs	r0, r0, #1
	PrintSpcRep(x1);
10008960:	f001 fb98 	bl	1000a094 <_Z11PrintSpcRepi>
	PrintText(buf);
10008964:	0030      	movs	r0, r6
10008966:	f001 fbef 	bl	1000a148 <_Z9PrintTextPKc>
	int x2 = (LEVW - 2 - n)/2;
1000896a:	2006      	movs	r0, #6
1000896c:	1b45      	subs	r5, r0, r5
1000896e:	0fe8      	lsrs	r0, r5, #31
10008970:	1940      	adds	r0, r0, r5
10008972:	1040      	asrs	r0, r0, #1
	PrintSpcRep(x2);
10008974:	f001 fb8e 	bl	1000a094 <_Z11PrintSpcRepi>
			if (i > LevNum-1) i = 0;
10008978:	464b      	mov	r3, r9
			i += ROWLEV;
1000897a:	003d      	movs	r5, r7
			if (i > LevNum-1) i = 0;
1000897c:	681b      	ldr	r3, [r3, #0]
			i += ROWLEV;
1000897e:	350a      	adds	r5, #10
			if (i > LevNum-1) i = 0;
10008980:	42ab      	cmp	r3, r5
10008982:	dd8a      	ble.n	1000889a <_Z9LevSelectv+0x3d2>
			LevDef = Levels[i*2]; // current level definition
10008984:	00eb      	lsls	r3, r5, #3
10008986:	469b      	mov	fp, r3
			LevSolve = Levels[i*2+1]; // current level solve
10008988:	3304      	adds	r3, #4
1000898a:	9301      	str	r3, [sp, #4]
	int n = DecNum(buf, inx+1);
1000898c:	370b      	adds	r7, #11
	int col = inx % ROWLEV;
1000898e:	210a      	movs	r1, #10
10008990:	0028      	movs	r0, r5
10008992:	f7f7 fcc3 	bl	1000031c <__wrap___aeabi_idiv>
	PrintSetPos(col*LEVW+1, row+7);
10008996:	00c9      	lsls	r1, r1, #3
10008998:	1c4b      	adds	r3, r1, #1
	int row = inx / ROWLEV;
1000899a:	0028      	movs	r0, r5
1000899c:	210a      	movs	r1, #10
	PrintSetPos(col*LEVW+1, row+7);
1000899e:	4698      	mov	r8, r3
	int row = inx / ROWLEV;
100089a0:	f7f7 fcbc 	bl	1000031c <__wrap___aeabi_idiv>
	PrintSetPos(col*LEVW+1, row+7);
100089a4:	1dc3      	adds	r3, r0, #7
100089a6:	469a      	mov	sl, r3
100089a8:	e781      	b.n	100088ae <_Z9LevSelectv+0x3e6>
			LevDef = Levels[i*2]; // current level definition
100089aa:	00eb      	lsls	r3, r5, #3
100089ac:	469b      	mov	fp, r3
			LevSolve = Levels[i*2+1]; // current level solve
100089ae:	3304      	adds	r3, #4
100089b0:	9301      	str	r3, [sp, #4]
	int n = DecNum(buf, inx+1);
100089b2:	3702      	adds	r7, #2
100089b4:	e7eb      	b.n	1000898e <_Z9LevSelectv+0x4c6>
			if (i < 0) i = LevNum-1;
100089b6:	464b      	mov	r3, r9
100089b8:	6819      	ldr	r1, [r3, #0]
100089ba:	1e4d      	subs	r5, r1, #1
			Level = i;
100089bc:	6025      	str	r5, [r4, #0]
	int n = DecNum(buf, inx+1);
100089be:	e68f      	b.n	100086e0 <_Z9LevSelectv+0x218>
			if (i < 0) i = LevNum-1;
100089c0:	464b      	mov	r3, r9
100089c2:	681f      	ldr	r7, [r3, #0]
100089c4:	1e7d      	subs	r5, r7, #1
100089c6:	e689      	b.n	100086dc <_Z9LevSelectv+0x214>
100089c8:	2000cbf4 	.word	0x2000cbf4
100089cc:	2000cbfc 	.word	0x2000cbfc
100089d0:	2000cbe4 	.word	0x2000cbe4
100089d4:	2000cbf0 	.word	0x2000cbf0

100089d8 <_GLOBAL__sub_I_IntroLevel>:
	{ "Many authors of Loma", LomaCol, LomaColNum },
	{ "Marko Dzekic", DzekicCol, DzekicColNum },
	{ "Rick Sladkey", SladkeyCol, SladkeyColNum },
	{ "Thinking Rabbit", RabbitCol, RabbitColNum },
	{ "Yoshio Murase", MuraseCol, MuraseColNum },
};
100089d8:	4a15      	ldr	r2, [pc, #84]	; (10008a30 <_GLOBAL__sub_I_IntroLevel+0x58>)
100089da:	4b16      	ldr	r3, [pc, #88]	; (10008a34 <_GLOBAL__sub_I_IntroLevel+0x5c>)
100089dc:	6812      	ldr	r2, [r2, #0]
100089de:	609a      	str	r2, [r3, #8]
100089e0:	4a15      	ldr	r2, [pc, #84]	; (10008a38 <_GLOBAL__sub_I_IntroLevel+0x60>)
100089e2:	6812      	ldr	r2, [r2, #0]
100089e4:	615a      	str	r2, [r3, #20]
100089e6:	4a15      	ldr	r2, [pc, #84]	; (10008a3c <_GLOBAL__sub_I_IntroLevel+0x64>)
100089e8:	6812      	ldr	r2, [r2, #0]
100089ea:	621a      	str	r2, [r3, #32]
100089ec:	4a14      	ldr	r2, [pc, #80]	; (10008a40 <_GLOBAL__sub_I_IntroLevel+0x68>)
100089ee:	6812      	ldr	r2, [r2, #0]
100089f0:	62da      	str	r2, [r3, #44]	; 0x2c
100089f2:	4a14      	ldr	r2, [pc, #80]	; (10008a44 <_GLOBAL__sub_I_IntroLevel+0x6c>)
100089f4:	6812      	ldr	r2, [r2, #0]
100089f6:	639a      	str	r2, [r3, #56]	; 0x38
100089f8:	4a13      	ldr	r2, [pc, #76]	; (10008a48 <_GLOBAL__sub_I_IntroLevel+0x70>)
100089fa:	6812      	ldr	r2, [r2, #0]
100089fc:	645a      	str	r2, [r3, #68]	; 0x44
100089fe:	4a13      	ldr	r2, [pc, #76]	; (10008a4c <_GLOBAL__sub_I_IntroLevel+0x74>)
10008a00:	6812      	ldr	r2, [r2, #0]
10008a02:	651a      	str	r2, [r3, #80]	; 0x50
10008a04:	4a12      	ldr	r2, [pc, #72]	; (10008a50 <_GLOBAL__sub_I_IntroLevel+0x78>)
10008a06:	6812      	ldr	r2, [r2, #0]
10008a08:	65da      	str	r2, [r3, #92]	; 0x5c
10008a0a:	4a12      	ldr	r2, [pc, #72]	; (10008a54 <_GLOBAL__sub_I_IntroLevel+0x7c>)
10008a0c:	6812      	ldr	r2, [r2, #0]
10008a0e:	669a      	str	r2, [r3, #104]	; 0x68
10008a10:	4a11      	ldr	r2, [pc, #68]	; (10008a58 <_GLOBAL__sub_I_IntroLevel+0x80>)
10008a12:	6812      	ldr	r2, [r2, #0]
10008a14:	675a      	str	r2, [r3, #116]	; 0x74
10008a16:	4a11      	ldr	r2, [pc, #68]	; (10008a5c <_GLOBAL__sub_I_IntroLevel+0x84>)
10008a18:	6811      	ldr	r1, [r2, #0]
10008a1a:	2280      	movs	r2, #128	; 0x80
10008a1c:	5099      	str	r1, [r3, r2]
10008a1e:	4a10      	ldr	r2, [pc, #64]	; (10008a60 <_GLOBAL__sub_I_IntroLevel+0x88>)
10008a20:	6811      	ldr	r1, [r2, #0]
10008a22:	228c      	movs	r2, #140	; 0x8c
10008a24:	5099      	str	r1, [r3, r2]
10008a26:	4a0f      	ldr	r2, [pc, #60]	; (10008a64 <_GLOBAL__sub_I_IntroLevel+0x8c>)
10008a28:	6811      	ldr	r1, [r2, #0]
10008a2a:	2298      	movs	r2, #152	; 0x98
10008a2c:	5099      	str	r1, [r3, r2]
const sCollect* Collect; // pointer of current list of collections
const char* AutName;	// name of current selected author

// authors
const int AutNum = count_of(Author); // number of authors
int AutInx = 0;	// selected author
10008a2e:	4770      	bx	lr
10008a30:	1003f1cc 	.word	0x1003f1cc
10008a34:	2000275c 	.word	0x2000275c
10008a38:	10154f48 	.word	0x10154f48
10008a3c:	100aec8c 	.word	0x100aec8c
10008a40:	1014f4f8 	.word	0x1014f4f8
10008a44:	1007646c 	.word	0x1007646c
10008a48:	10050ef8 	.word	0x10050ef8
10008a4c:	10169714 	.word	0x10169714
10008a50:	1009a390 	.word	0x1009a390
10008a54:	10157694 	.word	0x10157694
10008a58:	1017169c 	.word	0x1017169c
10008a5c:	10152364 	.word	0x10152364
10008a60:	10034484 	.word	0x10034484
10008a64:	10043d6c 	.word	0x10043d6c

10008a68 <_Z10VgaDmaInitv>:
 * \param read_addr Initial read address of transfer.
 * \param trigger True to start the transfer immediately
 */
static inline void dma_channel_set_read_addr(uint channel, const volatile void *read_addr, bool trigger) {
    if (!trigger) {
        dma_channel_hw_addr(channel)->read_addr = (uintptr_t) read_addr;
10008a68:	23a0      	movs	r3, #160	; 0xa0
// 0x10 (alias 1):  CTRL        READ_ADDR     WRITE_ADDR    TRANS_COUNT_TRIG
// 0x20 (alias 2):  CTRL        TRANS_COUNT   READ_ADDR     WRITE_ADDR_TRIG
// 0x30 (alias 3):  CTRL        WRITE_ADDR    TRANS_COUNT   READ_ADDR_TRIG ... !

void VgaDmaInit()
{
10008a6a:	b570      	push	{r4, r5, r6, lr}
 * \param trans_count The number of transfers (not NOT bytes, see channel_config_set_transfer_data_size)
 * \param trigger True to start the transfer immediately
 */
static inline void dma_channel_set_trans_count(uint channel, uint32_t trans_count, bool trigger) {
    if (!trigger) {
        dma_channel_hw_addr(channel)->transfer_count = trans_count;
10008a6c:	2402      	movs	r4, #2
        dma_channel_hw_addr(channel)->write_addr = (uintptr_t) write_addr;
10008a6e:	4a2a      	ldr	r2, [pc, #168]	; (10008b18 <_Z10VgaDmaInitv+0xb0>)
        dma_channel_hw_addr(channel)->read_addr = (uintptr_t) read_addr;
10008a70:	492a      	ldr	r1, [pc, #168]	; (10008b1c <_Z10VgaDmaInitv+0xb4>)
10008a72:	05db      	lsls	r3, r3, #23
10008a74:	6019      	str	r1, [r3, #0]
        dma_channel_hw_addr(channel)->write_addr = (uintptr_t) write_addr;
10008a76:	605a      	str	r2, [r3, #4]
        dma_channel_hw_addr(channel)->al1_ctrl = channel_config_get_ctrl_value(config);
10008a78:	4a29      	ldr	r2, [pc, #164]	; (10008b20 <_Z10VgaDmaInitv+0xb8>)
        dma_channel_hw_addr(channel)->transfer_count = trans_count;
10008a7a:	609c      	str	r4, [r3, #8]
        dma_channel_hw_addr(channel)->al1_ctrl = channel_config_get_ctrl_value(config);
10008a7c:	611a      	str	r2, [r3, #16]
        dma_channel_hw_addr(channel)->read_addr = (uintptr_t) read_addr;
10008a7e:	2200      	movs	r2, #0
10008a80:	4b28      	ldr	r3, [pc, #160]	; (10008b24 <_Z10VgaDmaInitv+0xbc>)
        dma_channel_hw_addr(channel)->write_addr = (uintptr_t) write_addr;
10008a82:	4829      	ldr	r0, [pc, #164]	; (10008b28 <_Z10VgaDmaInitv+0xc0>)
        dma_channel_hw_addr(channel)->read_addr = (uintptr_t) read_addr;
10008a84:	601a      	str	r2, [r3, #0]
        dma_channel_hw_addr(channel)->write_addr = (uintptr_t) write_addr;
10008a86:	6058      	str	r0, [r3, #4]
        dma_channel_hw_addr(channel)->al1_ctrl = channel_config_get_ctrl_value(config);
10008a88:	4828      	ldr	r0, [pc, #160]	; (10008b2c <_Z10VgaDmaInitv+0xc4>)
        dma_channel_hw_addr(channel)->transfer_count = trans_count;
10008a8a:	609a      	str	r2, [r3, #8]
        dma_channel_hw_addr(channel)->al1_ctrl = channel_config_get_ctrl_value(config);
10008a8c:	6118      	str	r0, [r3, #16]
	dma_channel_config cfg;
	int layer;
	for (layer = 0; layer < LAYERS; layer++)
	{
		// layer is not active
		if ((layer > 0) && (LayerModeInx[layer] == LAYERMODE_BASE)) continue;
10008a8e:	4b28      	ldr	r3, [pc, #160]	; (10008b30 <_Z10VgaDmaInitv+0xc8>)
10008a90:	7858      	ldrb	r0, [r3, #1]
10008a92:	2800      	cmp	r0, #0
10008a94:	d00d      	beq.n	10008ab2 <_Z10VgaDmaInitv+0x4a>
        dma_channel_hw_addr(channel)->read_addr = (uintptr_t) read_addr;
10008a96:	4827      	ldr	r0, [pc, #156]	; (10008b34 <_Z10VgaDmaInitv+0xcc>)
        dma_channel_hw_addr(channel)->write_addr = (uintptr_t) write_addr;
10008a98:	4d27      	ldr	r5, [pc, #156]	; (10008b38 <_Z10VgaDmaInitv+0xd0>)
        dma_channel_hw_addr(channel)->read_addr = (uintptr_t) read_addr;
10008a9a:	6001      	str	r1, [r0, #0]
        dma_channel_hw_addr(channel)->write_addr = (uintptr_t) write_addr;
10008a9c:	6045      	str	r5, [r0, #4]
        dma_channel_hw_addr(channel)->transfer_count = trans_count;
10008a9e:	6084      	str	r4, [r0, #8]
        dma_channel_hw_addr(channel)->al1_ctrl = channel_config_get_ctrl_value(config);
10008aa0:	4c26      	ldr	r4, [pc, #152]	; (10008b3c <_Z10VgaDmaInitv+0xd4>)
10008aa2:	6104      	str	r4, [r0, #16]
        dma_channel_hw_addr(channel)->read_addr = (uintptr_t) read_addr;
10008aa4:	4826      	ldr	r0, [pc, #152]	; (10008b40 <_Z10VgaDmaInitv+0xd8>)
        dma_channel_hw_addr(channel)->write_addr = (uintptr_t) write_addr;
10008aa6:	4c27      	ldr	r4, [pc, #156]	; (10008b44 <_Z10VgaDmaInitv+0xdc>)
        dma_channel_hw_addr(channel)->read_addr = (uintptr_t) read_addr;
10008aa8:	6002      	str	r2, [r0, #0]
        dma_channel_hw_addr(channel)->write_addr = (uintptr_t) write_addr;
10008aaa:	6044      	str	r4, [r0, #4]
        dma_channel_hw_addr(channel)->transfer_count = trans_count;
10008aac:	6082      	str	r2, [r0, #8]
        dma_channel_hw_addr(channel)->al1_ctrl = channel_config_get_ctrl_value(config);
10008aae:	4a26      	ldr	r2, [pc, #152]	; (10008b48 <_Z10VgaDmaInitv+0xe0>)
10008ab0:	6102      	str	r2, [r0, #16]
10008ab2:	789a      	ldrb	r2, [r3, #2]
10008ab4:	2a00      	cmp	r2, #0
10008ab6:	d00f      	beq.n	10008ad8 <_Z10VgaDmaInitv+0x70>
        dma_channel_hw_addr(channel)->read_addr = (uintptr_t) read_addr;
10008ab8:	4a24      	ldr	r2, [pc, #144]	; (10008b4c <_Z10VgaDmaInitv+0xe4>)
        dma_channel_hw_addr(channel)->write_addr = (uintptr_t) write_addr;
10008aba:	4825      	ldr	r0, [pc, #148]	; (10008b50 <_Z10VgaDmaInitv+0xe8>)
        dma_channel_hw_addr(channel)->read_addr = (uintptr_t) read_addr;
10008abc:	6011      	str	r1, [r2, #0]
        dma_channel_hw_addr(channel)->write_addr = (uintptr_t) write_addr;
10008abe:	6050      	str	r0, [r2, #4]
        dma_channel_hw_addr(channel)->transfer_count = trans_count;
10008ac0:	2002      	movs	r0, #2
10008ac2:	6090      	str	r0, [r2, #8]
        dma_channel_hw_addr(channel)->al1_ctrl = channel_config_get_ctrl_value(config);
10008ac4:	4823      	ldr	r0, [pc, #140]	; (10008b54 <_Z10VgaDmaInitv+0xec>)
        dma_channel_hw_addr(channel)->write_addr = (uintptr_t) write_addr;
10008ac6:	4c24      	ldr	r4, [pc, #144]	; (10008b58 <_Z10VgaDmaInitv+0xf0>)
        dma_channel_hw_addr(channel)->al1_ctrl = channel_config_get_ctrl_value(config);
10008ac8:	6110      	str	r0, [r2, #16]
        dma_channel_hw_addr(channel)->read_addr = (uintptr_t) read_addr;
10008aca:	2000      	movs	r0, #0
10008acc:	4a23      	ldr	r2, [pc, #140]	; (10008b5c <_Z10VgaDmaInitv+0xf4>)
10008ace:	6010      	str	r0, [r2, #0]
        dma_channel_hw_addr(channel)->write_addr = (uintptr_t) write_addr;
10008ad0:	6054      	str	r4, [r2, #4]
        dma_channel_hw_addr(channel)->transfer_count = trans_count;
10008ad2:	6090      	str	r0, [r2, #8]
        dma_channel_hw_addr(channel)->al1_ctrl = channel_config_get_ctrl_value(config);
10008ad4:	4822      	ldr	r0, [pc, #136]	; (10008b60 <_Z10VgaDmaInitv+0xf8>)
10008ad6:	6110      	str	r0, [r2, #16]
10008ad8:	78db      	ldrb	r3, [r3, #3]
10008ada:	2b00      	cmp	r3, #0
10008adc:	d00f      	beq.n	10008afe <_Z10VgaDmaInitv+0x96>
        dma_channel_hw_addr(channel)->read_addr = (uintptr_t) read_addr;
10008ade:	4b21      	ldr	r3, [pc, #132]	; (10008b64 <_Z10VgaDmaInitv+0xfc>)
        dma_channel_hw_addr(channel)->write_addr = (uintptr_t) write_addr;
10008ae0:	4a21      	ldr	r2, [pc, #132]	; (10008b68 <_Z10VgaDmaInitv+0x100>)
        dma_channel_hw_addr(channel)->read_addr = (uintptr_t) read_addr;
10008ae2:	6019      	str	r1, [r3, #0]
        dma_channel_hw_addr(channel)->write_addr = (uintptr_t) write_addr;
10008ae4:	605a      	str	r2, [r3, #4]
        dma_channel_hw_addr(channel)->transfer_count = trans_count;
10008ae6:	2202      	movs	r2, #2
10008ae8:	609a      	str	r2, [r3, #8]
        dma_channel_hw_addr(channel)->al1_ctrl = channel_config_get_ctrl_value(config);
10008aea:	4a20      	ldr	r2, [pc, #128]	; (10008b6c <_Z10VgaDmaInitv+0x104>)
        dma_channel_hw_addr(channel)->write_addr = (uintptr_t) write_addr;
10008aec:	4920      	ldr	r1, [pc, #128]	; (10008b70 <_Z10VgaDmaInitv+0x108>)
        dma_channel_hw_addr(channel)->al1_ctrl = channel_config_get_ctrl_value(config);
10008aee:	611a      	str	r2, [r3, #16]
        dma_channel_hw_addr(channel)->read_addr = (uintptr_t) read_addr;
10008af0:	2200      	movs	r2, #0
10008af2:	4b20      	ldr	r3, [pc, #128]	; (10008b74 <_Z10VgaDmaInitv+0x10c>)
10008af4:	601a      	str	r2, [r3, #0]
        dma_channel_hw_addr(channel)->write_addr = (uintptr_t) write_addr;
10008af6:	6059      	str	r1, [r3, #4]
        dma_channel_hw_addr(channel)->transfer_count = trans_count;
10008af8:	609a      	str	r2, [r3, #8]
        dma_channel_hw_addr(channel)->al1_ctrl = channel_config_get_ctrl_value(config);
10008afa:	4a1f      	ldr	r2, [pc, #124]	; (10008b78 <_Z10VgaDmaInitv+0x110>)
10008afc:	611a      	str	r2, [r3, #16]
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10008afe:	2202      	movs	r2, #2
10008b00:	4b1e      	ldr	r3, [pc, #120]	; (10008b7c <_Z10VgaDmaInitv+0x114>)

	// enable DMA channel IRQ0
	dma_channel_set_irq0_enabled(VGA_DMA_PIO0, true);

	// set DMA IRQ handler
	irq_set_exclusive_handler(DMA_IRQ_0, VgaLine);
10008b02:	200b      	movs	r0, #11
10008b04:	601a      	str	r2, [r3, #0]
10008b06:	491e      	ldr	r1, [pc, #120]	; (10008b80 <_Z10VgaDmaInitv+0x118>)
10008b08:	f7f8 ff04 	bl	10001914 <irq_set_exclusive_handler>

	// set highest IRQ priority
	irq_set_priority(DMA_IRQ_0, 0);
10008b0c:	2100      	movs	r1, #0
10008b0e:	200b      	movs	r0, #11
10008b10:	f7f9 f80a 	bl	10001b28 <irq_set_priority>
}
10008b14:	bd70      	pop	{r4, r5, r6, pc}
10008b16:	46c0      	nop			; (mov r8, r8)
10008b18:	50000078 	.word	0x50000078
10008b1c:	2000a3cc 	.word	0x2000a3cc
10008b20:	001f84f9 	.word	0x001f84f9
10008b24:	50000040 	.word	0x50000040
10008b28:	50200010 	.word	0x50200010
10008b2c:	0060001b 	.word	0x0060001b
10008b30:	2000cb50 	.word	0x2000cb50
10008b34:	50000080 	.word	0x50000080
10008b38:	500000f8 	.word	0x500000f8
10008b3c:	001f94f9 	.word	0x001f94f9
10008b40:	500000c0 	.word	0x500000c0
10008b44:	50200014 	.word	0x50200014
10008b48:	0060901b 	.word	0x0060901b
10008b4c:	50000100 	.word	0x50000100
10008b50:	50000178 	.word	0x50000178
10008b54:	001fa4f9 	.word	0x001fa4f9
10008b58:	50200018 	.word	0x50200018
10008b5c:	50000140 	.word	0x50000140
10008b60:	0061201b 	.word	0x0061201b
10008b64:	50000180 	.word	0x50000180
10008b68:	500001f8 	.word	0x500001f8
10008b6c:	001fb4f9 	.word	0x001fb4f9
10008b70:	5020001c 	.word	0x5020001c
10008b74:	500001c0 	.word	0x500001c0
10008b78:	0061b01b 	.word	0x0061b01b
10008b7c:	50002404 	.word	0x50002404
10008b80:	20002531 	.word	0x20002531

10008b84 <_Z10VgaPioInitv>:

// initialize VGA PIO
void VgaPioInit()
{
10008b84:	b5f0      	push	{r4, r5, r6, r7, lr}
10008b86:	46ce      	mov	lr, r9
10008b88:	4647      	mov	r7, r8
10008b8a:	b580      	push	{r7, lr}
10008b8c:	b099      	sub	sp, #100	; 0x64
	int i;

	// clear PIO instruction memory 
	pio_clear_instruction_memory(VGA_PIO);
10008b8e:	485c      	ldr	r0, [pc, #368]	; (10008d00 <_Z10VgaPioInitv+0x17c>)

	// configure main program instructions
	uint16_t ins[32]; // temporary buffer of program instructions
	memcpy(ins, &vga_program_instructions, vga_program.length*sizeof(uint16_t)); // copy program into buffer
10008b90:	ac08      	add	r4, sp, #32
	pio_clear_instruction_memory(VGA_PIO);
10008b92:	f7f9 fb1b 	bl	100021cc <pio_clear_instruction_memory>
	memcpy(ins, &vga_program_instructions, vga_program.length*sizeof(uint16_t)); // copy program into buffer
10008b96:	0022      	movs	r2, r4
10008b98:	4b5a      	ldr	r3, [pc, #360]	; (10008d04 <_Z10VgaPioInitv+0x180>)
10008b9a:	cb23      	ldmia	r3!, {r0, r1, r5}
10008b9c:	c223      	stmia	r2!, {r0, r1, r5}
10008b9e:	cb23      	ldmia	r3!, {r0, r1, r5}
10008ba0:	c223      	stmia	r2!, {r0, r1, r5}
10008ba2:	6819      	ldr	r1, [r3, #0]
	u16 cpp = (u16)CurVmode.cpp; // number of clocks per pixel
10008ba4:	4d58      	ldr	r5, [pc, #352]	; (10008d08 <_Z10VgaPioInitv+0x184>)
	memcpy(ins, &vga_program_instructions, vga_program.length*sizeof(uint16_t)); // copy program into buffer
10008ba6:	6011      	str	r1, [r2, #0]
10008ba8:	889b      	ldrh	r3, [r3, #4]
	// load main program into PIO's instruction memory
	struct pio_program prg;
	prg.instructions = ins;
	prg.length = vga_program.length;
	prg.origin = BASE_OFFSET;
	pio_add_program(VGA_PIO, &prg);
10008baa:	4855      	ldr	r0, [pc, #340]	; (10008d00 <_Z10VgaPioInitv+0x17c>)
	memcpy(ins, &vga_program_instructions, vga_program.length*sizeof(uint16_t)); // copy program into buffer
10008bac:	8093      	strh	r3, [r2, #4]
	ins[vga_offset_extra1] |= (cpp-2) << 8; // update waits
10008bae:	8aee      	ldrh	r6, [r5, #22]
10008bb0:	4b56      	ldr	r3, [pc, #344]	; (10008d0c <_Z10VgaPioInitv+0x188>)
10008bb2:	1eb2      	subs	r2, r6, #2
10008bb4:	0212      	lsls	r2, r2, #8
10008bb6:	4313      	orrs	r3, r2
10008bb8:	b29b      	uxth	r3, r3
	prg.length = vga_program.length;
10008bba:	466a      	mov	r2, sp
	ins[vga_offset_extra1] |= (cpp-2) << 8; // update waits
10008bbc:	8323      	strh	r3, [r4, #24]
	ins[vga_offset_extra2] |= (cpp-2) << 8; // update waits
10008bbe:	83a3      	strh	r3, [r4, #28]
	prg.length = vga_program.length;
10008bc0:	230f      	movs	r3, #15
	pio_add_program(VGA_PIO, &prg);
10008bc2:	a902      	add	r1, sp, #8
	prg.length = vga_program.length;
10008bc4:	7313      	strb	r3, [r2, #12]
	prg.origin = BASE_OFFSET;
10008bc6:	3302      	adds	r3, #2
10008bc8:	7353      	strb	r3, [r2, #13]
	prg.instructions = ins;
10008bca:	9402      	str	r4, [sp, #8]
	pio_add_program(VGA_PIO, &prg);
10008bcc:	f7f9 fa9a 	bl	10002104 <pio_add_program>

	// load layer program
	if (LayerProgInx != LAYERPROG_BASE)
10008bd0:	4b4f      	ldr	r3, [pc, #316]	; (10008d10 <_Z10VgaPioInitv+0x18c>)
10008bd2:	781b      	ldrb	r3, [r3, #0]
10008bd4:	2b00      	cmp	r3, #0
10008bd6:	d161      	bne.n	10008c9c <_Z10VgaPioInitv+0x118>
	{
		// configure layer program instructions
		memcpy(ins, CurLayerProg.ins, CurLayerProg.length*sizeof(uint16_t)); // copy program into buffer
		for (i = 0; i < CurLayerProg.extranum; i++)
10008bd8:	2400      	movs	r4, #0
    gpio_set_function(pin, pio == pio0 ? GPIO_FUNC_PIO0 : GPIO_FUNC_PIO1);
10008bda:	0020      	movs	r0, r4
10008bdc:	2106      	movs	r1, #6
		prg.origin = LAYER_OFFSET;
		pio_add_program(VGA_PIO, &prg);
	}

	// connect PIO to the pad
	for (i = VGA_GPIO_FIRST; i <= VGA_GPIO_LAST; i++) pio_gpio_init(VGA_PIO, i);
10008bde:	3401      	adds	r4, #1
10008be0:	f7f8 fe16 	bl	10001810 <gpio_set_function>
10008be4:	2c09      	cmp	r4, #9
10008be6:	d1f8      	bne.n	10008bda <_Z10VgaPioInitv+0x56>

	// negative HSYNC output
	if (!CurVmode.psync) gpio_set_outover(VGA_GPIO_SYNC, GPIO_OVERRIDE_INVERT);
10008be8:	2357      	movs	r3, #87	; 0x57
10008bea:	5ceb      	ldrb	r3, [r5, r3]
10008bec:	2b00      	cmp	r3, #0
10008bee:	d100      	bne.n	10008bf2 <_Z10VgaPioInitv+0x6e>
10008bf0:	e081      	b.n	10008cf6 <_Z10VgaPioInitv+0x172>

		// get default config
		pio_sm_config cfg = pio_get_default_sm_config();

		// map state machine's OUT and MOV pins	
		sm_config_set_out_pins(&cfg, LayerFirstPin[layer], LayerNumPin[layer]);
10008bf2:	4b48      	ldr	r3, [pc, #288]	; (10008d14 <_Z10VgaPioInitv+0x190>)
		for (i = 0; i < CurLayerProg.extranum; i++)
10008bf4:	2400      	movs	r4, #0
		sm_config_set_out_pins(&cfg, LayerFirstPin[layer], LayerNumPin[layer]);
10008bf6:	4698      	mov	r8, r3
		if ((layer > 0) && (LayerModeInx[layer] == LAYERMODE_BASE)) continue;
10008bf8:	2c00      	cmp	r4, #0
10008bfa:	d003      	beq.n	10008c04 <_Z10VgaPioInitv+0x80>
10008bfc:	4b46      	ldr	r3, [pc, #280]	; (10008d18 <_Z10VgaPioInitv+0x194>)
10008bfe:	5d1b      	ldrb	r3, [r3, r4]
10008c00:	2b00      	cmp	r3, #0
10008c02:	d036      	beq.n	10008c72 <_Z10VgaPioInitv+0xee>
		pio_sm_set_consecutive_pindirs(VGA_PIO, VGA_SM(layer), VGA_GPIO_FIRST, VGA_GPIO_NUM, true);
10008c04:	2301      	movs	r3, #1
10008c06:	2200      	movs	r2, #0
10008c08:	0021      	movs	r1, r4
10008c0a:	483d      	ldr	r0, [pc, #244]	; (10008d00 <_Z10VgaPioInitv+0x17c>)
10008c0c:	9300      	str	r3, [sp, #0]
10008c0e:	3308      	adds	r3, #8
10008c10:	f7f9 faf8 	bl	10002204 <pio_sm_set_consecutive_pindirs>
		sm_config_set_out_pins(&cfg, LayerFirstPin[layer], LayerNumPin[layer]);
10008c14:	4643      	mov	r3, r8
10008c16:	5d1e      	ldrb	r6, [r3, r4]
10008c18:	4b40      	ldr	r3, [pc, #256]	; (10008d1c <_Z10VgaPioInitv+0x198>)
                 (out_count << PIO_SM0_PINCTRL_OUT_COUNT_LSB);
10008c1a:	0536      	lsls	r6, r6, #20
10008c1c:	5d1b      	ldrb	r3, [r3, r4]
                 (out_base << PIO_SM0_PINCTRL_OUT_BASE_LSB) |
10008c1e:	431e      	orrs	r6, r3
    c->pinctrl = (c->pinctrl & ~(PIO_SM0_PINCTRL_OUT_BASE_BITS | PIO_SM0_PINCTRL_OUT_COUNT_BITS)) |
10008c20:	9607      	str	r6, [sp, #28]

		// join FIFO to send only
		sm_config_set_fifo_join(&cfg, PIO_FIFO_JOIN_TX);

		// PIO clock divider
		sm_config_set_clkdiv(&cfg, CurVmode.div);
10008c22:	8aaf      	ldrh	r7, [r5, #20]
10008c24:	0038      	movs	r0, r7
10008c26:	f7f8 f9d3 	bl	10000fd0 <__wrap___aeabi_ui2f>
10008c2a:	4681      	mov	r9, r0
    uint8_t div_frac = (uint8_t) ((div - div_int) * (1u << 8u));
10008c2c:	0038      	movs	r0, r7
10008c2e:	f7f8 f9d5 	bl	10000fdc <__wrap___aeabi_i2f>
10008c32:	1c01      	adds	r1, r0, #0
10008c34:	4648      	mov	r0, r9
10008c36:	f7f8 f9bc 	bl	10000fb2 <__wrap___aeabi_fsub>
10008c3a:	2187      	movs	r1, #135	; 0x87
10008c3c:	05c9      	lsls	r1, r1, #23
10008c3e:	f7f8 f9c1 	bl	10000fc4 <__wrap___aeabi_fmul>
10008c42:	f7f8 fa1f 	bl	10001084 <__wrap___aeabi_f2uiz>
            (div_frac << PIO_SM0_CLKDIV_FRAC_LSB) |
10008c46:	b2c0      	uxtb	r0, r0
            (div_int << PIO_SM0_CLKDIV_INT_LSB);
10008c48:	043b      	lsls	r3, r7, #16
            (div_frac << PIO_SM0_CLKDIV_FRAC_LSB) |
10008c4a:	0200      	lsls	r0, r0, #8
10008c4c:	4318      	orrs	r0, r3
    c->shiftctrl = (c->shiftctrl &
10008c4e:	4b34      	ldr	r3, [pc, #208]	; (10008d20 <_Z10VgaPioInitv+0x19c>)
    c->clkdiv =
10008c50:	9004      	str	r0, [sp, #16]
    c->shiftctrl = (c->shiftctrl &
10008c52:	9306      	str	r3, [sp, #24]

		// shift left, autopull, pull threshold
		sm_config_set_out_shift(&cfg, false, true, 32);
	
		// base layer 0
		if (layer == 0)
10008c54:	2c00      	cmp	r4, #0
10008c56:	d014      	beq.n	10008c82 <_Z10VgaPioInitv+0xfe>
			pio_sm_init(VGA_PIO, VGA_SM0, vga_offset_entry+BASE_OFFSET, &cfg);
		}
		else
		{
			// set wrap
			sm_config_set_wrap(&cfg, CurLayerProg.wrap_target+LAYER_OFFSET, CurLayerProg.wrap+LAYER_OFFSET);
10008c58:	4a32      	ldr	r2, [pc, #200]	; (10008d24 <_Z10VgaPioInitv+0x1a0>)

			// initialize state machine
			pio_sm_init(VGA_PIO, VGA_SM(layer), CurLayerProg.idle+LAYER_OFFSET, &cfg);
10008c5a:	4829      	ldr	r0, [pc, #164]	; (10008d00 <_Z10VgaPioInitv+0x17c>)
			sm_config_set_wrap(&cfg, CurLayerProg.wrap_target+LAYER_OFFSET, CurLayerProg.wrap+LAYER_OFFSET);
10008c5c:	7a53      	ldrb	r3, [r2, #9]
10008c5e:	7a91      	ldrb	r1, [r2, #10]
                  (wrap_target << PIO_SM0_EXECCTRL_WRAP_BOTTOM_LSB) |
10008c60:	01db      	lsls	r3, r3, #7
                  (wrap << PIO_SM0_EXECCTRL_WRAP_TOP_LSB);
10008c62:	0309      	lsls	r1, r1, #12
                  (wrap_target << PIO_SM0_EXECCTRL_WRAP_BOTTOM_LSB) |
10008c64:	430b      	orrs	r3, r1
    c->execctrl = (c->execctrl & ~(PIO_SM0_EXECCTRL_WRAP_TOP_BITS | PIO_SM0_EXECCTRL_WRAP_BOTTOM_BITS)) |
10008c66:	9305      	str	r3, [sp, #20]
			pio_sm_init(VGA_PIO, VGA_SM(layer), CurLayerProg.idle+LAYER_OFFSET, &cfg);
10008c68:	0021      	movs	r1, r4
10008c6a:	7ad2      	ldrb	r2, [r2, #11]
10008c6c:	ab04      	add	r3, sp, #16
10008c6e:	f7f9 fb0b 	bl	10002288 <pio_sm_init>
	for (layer = 0; layer < LAYERS; layer++)
10008c72:	3401      	adds	r4, #1
10008c74:	2c04      	cmp	r4, #4
10008c76:	d1bf      	bne.n	10008bf8 <_Z10VgaPioInitv+0x74>
		}
	}
}
10008c78:	b019      	add	sp, #100	; 0x64
10008c7a:	bcc0      	pop	{r6, r7}
10008c7c:	46b9      	mov	r9, r7
10008c7e:	46b0      	mov	r8, r6
10008c80:	bdf0      	pop	{r4, r5, r6, r7, pc}
10008c82:	4b29      	ldr	r3, [pc, #164]	; (10008d28 <_Z10VgaPioInitv+0x1a4>)
			pio_sm_init(VGA_PIO, VGA_SM0, vga_offset_entry+BASE_OFFSET, &cfg);
10008c84:	2213      	movs	r2, #19
10008c86:	9305      	str	r3, [sp, #20]
    c->pinctrl = (c->pinctrl & ~PIO_SM0_PINCTRL_SIDESET_BASE_BITS) |
10008c88:	4b28      	ldr	r3, [pc, #160]	; (10008d2c <_Z10VgaPioInitv+0x1a8>)
10008c8a:	2100      	movs	r1, #0
10008c8c:	431e      	orrs	r6, r3
10008c8e:	481c      	ldr	r0, [pc, #112]	; (10008d00 <_Z10VgaPioInitv+0x17c>)
10008c90:	ab04      	add	r3, sp, #16
10008c92:	9607      	str	r6, [sp, #28]
	for (layer = 0; layer < LAYERS; layer++)
10008c94:	3401      	adds	r4, #1
			pio_sm_init(VGA_PIO, VGA_SM0, vga_offset_entry+BASE_OFFSET, &cfg);
10008c96:	f7f9 faf7 	bl	10002288 <pio_sm_init>
	for (layer = 0; layer < LAYERS; layer++)
10008c9a:	e7af      	b.n	10008bfc <_Z10VgaPioInitv+0x78>
		memcpy(ins, CurLayerProg.ins, CurLayerProg.length*sizeof(uint16_t)); // copy program into buffer
10008c9c:	4b21      	ldr	r3, [pc, #132]	; (10008d24 <_Z10VgaPioInitv+0x1a0>)
10008c9e:	0020      	movs	r0, r4
10008ca0:	4698      	mov	r8, r3
10008ca2:	7a1b      	ldrb	r3, [r3, #8]
10008ca4:	005a      	lsls	r2, r3, #1
10008ca6:	4699      	mov	r9, r3
10008ca8:	4643      	mov	r3, r8
10008caa:	6819      	ldr	r1, [r3, #0]
10008cac:	f7f8 fa42 	bl	10001134 <__wrap___aeabi_memcpy>
		for (i = 0; i < CurLayerProg.extranum; i++)
10008cb0:	4643      	mov	r3, r8
10008cb2:	7b9b      	ldrb	r3, [r3, #14]
10008cb4:	469c      	mov	ip, r3
10008cb6:	2b00      	cmp	r3, #0
10008cb8:	d011      	beq.n	10008cde <_Z10VgaPioInitv+0x15a>
10008cba:	4641      	mov	r1, r8
10008cbc:	2000      	movs	r0, #0
10008cbe:	310f      	adds	r1, #15
			int extra = (int)cpp - CurLayerProg.extra[i*2+1];
10008cc0:	784b      	ldrb	r3, [r1, #1]
			ins[CurLayerProg.extra[i*2]] |= extra << 8; // update waits
10008cc2:	780a      	ldrb	r2, [r1, #0]
			int extra = (int)cpp - CurLayerProg.extra[i*2+1];
10008cc4:	1af3      	subs	r3, r6, r3
			ins[CurLayerProg.extra[i*2]] |= extra << 8; // update waits
10008cc6:	43df      	mvns	r7, r3
10008cc8:	0052      	lsls	r2, r2, #1
10008cca:	17ff      	asrs	r7, r7, #31
10008ccc:	403b      	ands	r3, r7
10008cce:	5aa7      	ldrh	r7, [r4, r2]
10008cd0:	021b      	lsls	r3, r3, #8
10008cd2:	433b      	orrs	r3, r7
		for (i = 0; i < CurLayerProg.extranum; i++)
10008cd4:	3001      	adds	r0, #1
			ins[CurLayerProg.extra[i*2]] |= extra << 8; // update waits
10008cd6:	52a3      	strh	r3, [r4, r2]
		for (i = 0; i < CurLayerProg.extranum; i++)
10008cd8:	3102      	adds	r1, #2
10008cda:	4560      	cmp	r0, ip
10008cdc:	dbf0      	blt.n	10008cc0 <_Z10VgaPioInitv+0x13c>
		prg.length = CurLayerProg.length;
10008cde:	466b      	mov	r3, sp
10008ce0:	464a      	mov	r2, r9
10008ce2:	731a      	strb	r2, [r3, #12]
		prg.origin = LAYER_OFFSET;
10008ce4:	2300      	movs	r3, #0
10008ce6:	466a      	mov	r2, sp
		pio_add_program(VGA_PIO, &prg);
10008ce8:	a902      	add	r1, sp, #8
10008cea:	4805      	ldr	r0, [pc, #20]	; (10008d00 <_Z10VgaPioInitv+0x17c>)
		prg.instructions = ins;
10008cec:	9402      	str	r4, [sp, #8]
		prg.origin = LAYER_OFFSET;
10008cee:	7353      	strb	r3, [r2, #13]
		pio_add_program(VGA_PIO, &prg);
10008cf0:	f7f9 fa08 	bl	10002104 <pio_add_program>
10008cf4:	e770      	b.n	10008bd8 <_Z10VgaPioInitv+0x54>
	if (!CurVmode.psync) gpio_set_outover(VGA_GPIO_SYNC, GPIO_OVERRIDE_INVERT);
10008cf6:	2101      	movs	r1, #1
10008cf8:	2008      	movs	r0, #8
10008cfa:	f7f8 fdb9 	bl	10001870 <gpio_set_outover>
10008cfe:	e778      	b.n	10008bf2 <_Z10VgaPioInitv+0x6e>
10008d00:	50200000 	.word	0x50200000
10008d04:	101880d4 	.word	0x101880d4
10008d08:	2000badc 	.word	0x2000badc
10008d0c:	00006008 	.word	0x00006008
10008d10:	20017323 	.word	0x20017323
10008d14:	20008620 	.word	0x20008620
10008d18:	2000cb50 	.word	0x2000cb50
10008d1c:	2000cb4c 	.word	0x2000cb4c
10008d20:	40060000 	.word	0x40060000
10008d24:	2000baa8 	.word	0x2000baa8
10008d28:	0001fd80 	.word	0x0001fd80
10008d2c:	20002000 	.word	0x20002000

10008d30 <_Z10VgaBufInitv>:

// initialize scanline buffers
void VgaBufInit()
{
10008d30:	b5f0      	push	{r4, r5, r6, r7, lr}
10008d32:	464e      	mov	r6, r9
10008d34:	4645      	mov	r5, r8
10008d36:	4657      	mov	r7, sl
10008d38:	46de      	mov	lr, fp
	// init HSYNC..back porch buffer
	//  hsync must be min. 3
	//  hback must be min. 13
	LineBufHsBp[0] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,CurVmode.hsync-3)); // HSYNC
10008d3a:	2388      	movs	r3, #136	; 0x88
{
10008d3c:	b5e0      	push	{r5, r6, r7, lr}
	LineBufHsBp[0] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,CurVmode.hsync-3)); // HSYNC
10008d3e:	485f      	ldr	r0, [pc, #380]	; (10008ebc <_Z10VgaBufInitv+0x18c>)
10008d40:	4f5f      	ldr	r7, [pc, #380]	; (10008ec0 <_Z10VgaBufInitv+0x190>)
10008d42:	8c41      	ldrh	r1, [r0, #34]	; 0x22
	LineBufHsBp[1] = BYTESWAP(VGADARK(CurVmode.hback-4-1-9,0)); // back porch - 1 - 9
10008d44:	4e5f      	ldr	r6, [pc, #380]	; (10008ec4 <_Z10VgaBufInitv+0x194>)
	LineBufHsBp[0] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,CurVmode.hsync-3)); // HSYNC
10008d46:	1eca      	subs	r2, r1, #3
10008d48:	ba12      	rev	r2, r2
10008d4a:	431a      	orrs	r2, r3
10008d4c:	603a      	str	r2, [r7, #0]
	LineBufHsBp[1] = BYTESWAP(VGADARK(CurVmode.hback-4-1-9,0)); // back porch - 1 - 9
10008d4e:	8c84      	ldrh	r4, [r0, #36]	; 0x24
	LineBufHsBp[0] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,CurVmode.hsync-3)); // HSYNC
10008d50:	469c      	mov	ip, r3
	LineBufHsBp[1] = BYTESWAP(VGADARK(CurVmode.hback-4-1-9,0)); // back porch - 1 - 9
10008d52:	3c0e      	subs	r4, #14
10008d54:	0423      	lsls	r3, r4, #16
10008d56:	0225      	lsls	r5, r4, #8
10008d58:	0e2d      	lsrs	r5, r5, #24
10008d5a:	4033      	ands	r3, r6
10008d5c:	432b      	orrs	r3, r5
10008d5e:	25ff      	movs	r5, #255	; 0xff
10008d60:	022d      	lsls	r5, r5, #8
10008d62:	402c      	ands	r4, r5
10008d64:	4323      	orrs	r3, r4
10008d66:	24a0      	movs	r4, #160	; 0xa0
10008d68:	4323      	orrs	r3, r4
10008d6a:	607b      	str	r3, [r7, #4]
	LineBufHsBp[2] = BYTESWAP(VGACMD(vga_offset_irqset+BASE_OFFSET,0)); // IRQ command (takes 9 clock cycles)
10008d6c:	23c0      	movs	r3, #192	; 0xc0
10008d6e:	60bb      	str	r3, [r7, #8]
	LineBufHsBp[3] = BYTESWAP(VGACMD(vga_offset_output+BASE_OFFSET, CurVmode.width - 2)); // missing 2 clock cycles after last pixel
10008d70:	8803      	ldrh	r3, [r0, #0]
10008d72:	3440      	adds	r4, #64	; 0x40
10008d74:	3b02      	subs	r3, #2
10008d76:	ba1b      	rev	r3, r3
10008d78:	4323      	orrs	r3, r4
10008d7a:	60fb      	str	r3, [r7, #12]

	// init front porch buffer
	//  hfront must be min. 4
	LineBufFp = BYTESWAP(VGADARK(CurVmode.hfront-4,0)); // front porch
10008d7c:	8c07      	ldrh	r7, [r0, #32]
{
10008d7e:	b083      	sub	sp, #12
	LineBufFp = BYTESWAP(VGADARK(CurVmode.hfront-4,0)); // front porch
10008d80:	3f04      	subs	r7, #4
10008d82:	043b      	lsls	r3, r7, #16
10008d84:	023c      	lsls	r4, r7, #8
10008d86:	0e24      	lsrs	r4, r4, #24
10008d88:	4033      	ands	r3, r6
10008d8a:	4323      	orrs	r3, r4
10008d8c:	24a0      	movs	r4, #160	; 0xa0
10008d8e:	402f      	ands	r7, r5
10008d90:	433b      	orrs	r3, r7
10008d92:	4f4d      	ldr	r7, [pc, #308]	; (10008ec8 <_Z10VgaBufInitv+0x198>)
10008d94:	4323      	orrs	r3, r4
10008d96:	603b      	str	r3, [r7, #0]

	// init dark line
	LineBufDark[0] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,CurVmode.hsync-3)); // HSYNC
10008d98:	4b4c      	ldr	r3, [pc, #304]	; (10008ecc <_Z10VgaBufInitv+0x19c>)
10008d9a:	601a      	str	r2, [r3, #0]
	LineBufDark[1] = BYTESWAP(VGADARK(CurVmode.htot-CurVmode.hsync-4,0)); // dark line
10008d9c:	8bc2      	ldrh	r2, [r0, #30]
	LineBufDark[0] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,CurVmode.hsync-3)); // HSYNC
10008d9e:	4698      	mov	r8, r3
	LineBufDark[1] = BYTESWAP(VGADARK(CurVmode.htot-CurVmode.hsync-4,0)); // dark line
10008da0:	1a57      	subs	r7, r2, r1
10008da2:	1f3b      	subs	r3, r7, #4
10008da4:	4699      	mov	r9, r3
10008da6:	464c      	mov	r4, r9
10008da8:	041b      	lsls	r3, r3, #16
10008daa:	0224      	lsls	r4, r4, #8
10008dac:	0e24      	lsrs	r4, r4, #24
10008dae:	4033      	ands	r3, r6
10008db0:	4323      	orrs	r3, r4
10008db2:	464c      	mov	r4, r9
10008db4:	402c      	ands	r4, r5
10008db6:	4323      	orrs	r3, r4
10008db8:	24a0      	movs	r4, #160	; 0xa0
10008dba:	4323      	orrs	r3, r4
10008dbc:	4644      	mov	r4, r8
10008dbe:	6063      	str	r3, [r4, #4]

	// TV mode
	if (CurVmode.inter)
10008dc0:	2356      	movs	r3, #86	; 0x56
10008dc2:	5cc3      	ldrb	r3, [r0, r3]
10008dc4:	2b00      	cmp	r3, #0
10008dc6:	d060      	beq.n	10008e8a <_Z10VgaBufInitv+0x15a>
	{
		// vertical synchronization
		LineBufSync[0] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,CurVmode.hsync/2-3)); // HSYNC
10008dc8:	4664      	mov	r4, ip
10008dca:	0848      	lsrs	r0, r1, #1
10008dcc:	1ec3      	subs	r3, r0, #3
10008dce:	ba1b      	rev	r3, r3
10008dd0:	431c      	orrs	r4, r3
10008dd2:	4b3f      	ldr	r3, [pc, #252]	; (10008ed0 <_Z10VgaBufInitv+0x1a0>)
10008dd4:	46a0      	mov	r8, r4
10008dd6:	601c      	str	r4, [r3, #0]
		LineBufSync[1] = BYTESWAP(VGADARK(CurVmode.htot/2-CurVmode.hsync/2-4,0)); // dark line
10008dd8:	0854      	lsrs	r4, r2, #1
10008dda:	1a27      	subs	r7, r4, r0
10008ddc:	46a1      	mov	r9, r4
10008dde:	1f3c      	subs	r4, r7, #4
10008de0:	46a2      	mov	sl, r4
10008de2:	0427      	lsls	r7, r4, #16
10008de4:	0224      	lsls	r4, r4, #8
10008de6:	4037      	ands	r7, r6
10008de8:	0e24      	lsrs	r4, r4, #24
10008dea:	4327      	orrs	r7, r4
10008dec:	4654      	mov	r4, sl
10008dee:	402c      	ands	r4, r5
10008df0:	4327      	orrs	r7, r4
10008df2:	24a0      	movs	r4, #160	; 0xa0
10008df4:	433c      	orrs	r4, r7
10008df6:	9401      	str	r4, [sp, #4]
10008df8:	605c      	str	r4, [r3, #4]
		LineBufSync[2] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,CurVmode.hsync/2-3)); // HSYNC
10008dfa:	4644      	mov	r4, r8
		LineBufSync[3] = BYTESWAP(VGADARK((CurVmode.htot+1)/2-CurVmode.hsync/2-4,0)); // dark line
10008dfc:	3201      	adds	r2, #1
10008dfe:	1052      	asrs	r2, r2, #1
10008e00:	1a10      	subs	r0, r2, r0
10008e02:	3804      	subs	r0, #4
		LineBufSync[2] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,CurVmode.hsync/2-3)); // HSYNC
10008e04:	609c      	str	r4, [r3, #8]
		LineBufSync[3] = BYTESWAP(VGADARK((CurVmode.htot+1)/2-CurVmode.hsync/2-4,0)); // dark line
10008e06:	0404      	lsls	r4, r0, #16
10008e08:	4034      	ands	r4, r6
10008e0a:	46a2      	mov	sl, r4
10008e0c:	0204      	lsls	r4, r0, #8
10008e0e:	0e24      	lsrs	r4, r4, #24
10008e10:	46a3      	mov	fp, r4
10008e12:	4654      	mov	r4, sl
10008e14:	465f      	mov	r7, fp
10008e16:	4028      	ands	r0, r5
10008e18:	433c      	orrs	r4, r7
10008e1a:	4320      	orrs	r0, r4
10008e1c:	24a0      	movs	r4, #160	; 0xa0
10008e1e:	4320      	orrs	r0, r4
10008e20:	60d8      	str	r0, [r3, #12]

		LineBufSync[4] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,CurVmode.htot/2-CurVmode.hsync-3)); // invert dark line
10008e22:	4648      	mov	r0, r9
10008e24:	4664      	mov	r4, ip
10008e26:	1a40      	subs	r0, r0, r1
10008e28:	3803      	subs	r0, #3
10008e2a:	ba00      	rev	r0, r0
10008e2c:	4320      	orrs	r0, r4
10008e2e:	6118      	str	r0, [r3, #16]
		LineBufSync[5] = BYTESWAP(VGADARK(CurVmode.hsync-4,0)); // invert HSYNC
10008e30:	1f08      	subs	r0, r1, #4
10008e32:	4681      	mov	r9, r0
10008e34:	0400      	lsls	r0, r0, #16
10008e36:	4006      	ands	r6, r0
10008e38:	4648      	mov	r0, r9
		LineBufSync[6] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,(CurVmode.htot+1)/2-CurVmode.hsync-3)); // invert dark line
10008e3a:	1a52      	subs	r2, r2, r1
10008e3c:	4661      	mov	r1, ip
		LineBufSync[5] = BYTESWAP(VGADARK(CurVmode.hsync-4,0)); // invert HSYNC
10008e3e:	0200      	lsls	r0, r0, #8
10008e40:	0e00      	lsrs	r0, r0, #24
10008e42:	4306      	orrs	r6, r0
10008e44:	4648      	mov	r0, r9
		LineBufSync[6] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,(CurVmode.htot+1)/2-CurVmode.hsync-3)); // invert dark line
10008e46:	3a03      	subs	r2, #3
10008e48:	ba12      	rev	r2, r2
10008e4a:	430a      	orrs	r2, r1
10008e4c:	619a      	str	r2, [r3, #24]
		LineBufSync[7] = BYTESWAP(VGADARK(CurVmode.hsync-4,0)); // invert HSYNC

		LineBufSync[8] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,CurVmode.hsync/2-3)); // HSYNC
10008e4e:	4642      	mov	r2, r8
		LineBufSync[5] = BYTESWAP(VGADARK(CurVmode.hsync-4,0)); // invert HSYNC
10008e50:	4005      	ands	r5, r0
		LineBufSync[9] = BYTESWAP(VGADARK(CurVmode.htot/2-CurVmode.hsync/2-4,0)); // dark line

		// control blocks - initialize to VSYNC
		CtrlBuf1[0] = 4; // send 4x u32
10008e52:	2004      	movs	r0, #4
		LineBufSync[8] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,CurVmode.hsync/2-3)); // HSYNC
10008e54:	621a      	str	r2, [r3, #32]
		LineBufSync[9] = BYTESWAP(VGADARK(CurVmode.htot/2-CurVmode.hsync/2-4,0)); // dark line
10008e56:	9a01      	ldr	r2, [sp, #4]
		LineBufSync[5] = BYTESWAP(VGADARK(CurVmode.hsync-4,0)); // invert HSYNC
10008e58:	4335      	orrs	r5, r6
10008e5a:	3418      	adds	r4, #24
		LineBufSync[9] = BYTESWAP(VGADARK(CurVmode.htot/2-CurVmode.hsync/2-4,0)); // dark line
10008e5c:	625a      	str	r2, [r3, #36]	; 0x24
		CtrlBuf1[0] = 4; // send 4x u32
10008e5e:	491d      	ldr	r1, [pc, #116]	; (10008ed4 <_Z10VgaBufInitv+0x1a4>)
		CtrlBuf1[1] = (u32)&LineBufSync[4]; // VSYNC

		CtrlBuf2[0] = 4; // send 4x u32
10008e60:	4a1d      	ldr	r2, [pc, #116]	; (10008ed8 <_Z10VgaBufInitv+0x1a8>)
		LineBufSync[5] = BYTESWAP(VGADARK(CurVmode.hsync-4,0)); // invert HSYNC
10008e62:	432c      	orrs	r4, r5
10008e64:	615c      	str	r4, [r3, #20]
		LineBufSync[7] = BYTESWAP(VGADARK(CurVmode.hsync-4,0)); // invert HSYNC
10008e66:	61dc      	str	r4, [r3, #28]
		CtrlBuf1[1] = (u32)&LineBufSync[4]; // VSYNC
10008e68:	3310      	adds	r3, #16
		CtrlBuf1[0] = 4; // send 4x u32
10008e6a:	6008      	str	r0, [r1, #0]
		CtrlBuf1[1] = (u32)&LineBufSync[4]; // VSYNC
10008e6c:	604b      	str	r3, [r1, #4]
		CtrlBuf2[0] = 4; // send 4x u32
10008e6e:	6010      	str	r0, [r2, #0]
		CtrlBuf2[1] = (u32)&LineBufSync[4]; // VSYNC
10008e70:	6053      	str	r3, [r2, #4]

		CtrlBuf2[0] = 2; // send 2x u32
		CtrlBuf2[1] = (u32)&LineBufSync[0]; // VSYNC
	}

	CtrlBuf1[2] = 0; // stop mark
10008e72:	2300      	movs	r3, #0
10008e74:	608b      	str	r3, [r1, #8]
	CtrlBuf1[3] = 0; // stop mark
10008e76:	60cb      	str	r3, [r1, #12]

	CtrlBuf2[2] = 0; // stop mark
10008e78:	6093      	str	r3, [r2, #8]
	CtrlBuf2[3] = 0; // stop mark
10008e7a:	60d3      	str	r3, [r2, #12]
}
10008e7c:	b003      	add	sp, #12
10008e7e:	bcf0      	pop	{r4, r5, r6, r7}
10008e80:	46bb      	mov	fp, r7
10008e82:	46b2      	mov	sl, r6
10008e84:	46a9      	mov	r9, r5
10008e86:	46a0      	mov	r8, r4
10008e88:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LineBufSync[0] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,CurVmode.htot-CurVmode.hsync-3)); // invert dark line
10008e8a:	4662      	mov	r2, ip
		LineBufSync[1] = BYTESWAP(VGADARK(CurVmode.hsync-4,0)); // invert HSYNC
10008e8c:	24a0      	movs	r4, #160	; 0xa0
		CtrlBuf1[0] = 2; // send 2x u32
10008e8e:	2002      	movs	r0, #2
		LineBufSync[0] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,CurVmode.htot-CurVmode.hsync-3)); // invert dark line
10008e90:	3f03      	subs	r7, #3
		LineBufSync[1] = BYTESWAP(VGADARK(CurVmode.hsync-4,0)); // invert HSYNC
10008e92:	3904      	subs	r1, #4
10008e94:	ba3f      	rev	r7, r7
		LineBufSync[0] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,CurVmode.htot-CurVmode.hsync-3)); // invert dark line
10008e96:	4317      	orrs	r7, r2
		LineBufSync[1] = BYTESWAP(VGADARK(CurVmode.hsync-4,0)); // invert HSYNC
10008e98:	040a      	lsls	r2, r1, #16
10008e9a:	4016      	ands	r6, r2
10008e9c:	020a      	lsls	r2, r1, #8
10008e9e:	0e12      	lsrs	r2, r2, #24
10008ea0:	4316      	orrs	r6, r2
10008ea2:	4029      	ands	r1, r5
10008ea4:	4331      	orrs	r1, r6
		LineBufSync[0] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,CurVmode.htot-CurVmode.hsync-3)); // invert dark line
10008ea6:	4b0a      	ldr	r3, [pc, #40]	; (10008ed0 <_Z10VgaBufInitv+0x1a0>)
		CtrlBuf2[0] = 2; // send 2x u32
10008ea8:	4a0b      	ldr	r2, [pc, #44]	; (10008ed8 <_Z10VgaBufInitv+0x1a8>)
		LineBufSync[1] = BYTESWAP(VGADARK(CurVmode.hsync-4,0)); // invert HSYNC
10008eaa:	430c      	orrs	r4, r1
		CtrlBuf1[0] = 2; // send 2x u32
10008eac:	4909      	ldr	r1, [pc, #36]	; (10008ed4 <_Z10VgaBufInitv+0x1a4>)
		LineBufSync[0] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,CurVmode.htot-CurVmode.hsync-3)); // invert dark line
10008eae:	601f      	str	r7, [r3, #0]
		LineBufSync[1] = BYTESWAP(VGADARK(CurVmode.hsync-4,0)); // invert HSYNC
10008eb0:	605c      	str	r4, [r3, #4]
		CtrlBuf1[0] = 2; // send 2x u32
10008eb2:	6008      	str	r0, [r1, #0]
		CtrlBuf1[1] = (u32)&LineBufSync[0]; // VSYNC
10008eb4:	604b      	str	r3, [r1, #4]
		CtrlBuf2[0] = 2; // send 2x u32
10008eb6:	6010      	str	r0, [r2, #0]
		CtrlBuf2[1] = (u32)&LineBufSync[0]; // VSYNC
10008eb8:	6053      	str	r3, [r2, #4]
10008eba:	e7da      	b.n	10008e72 <_Z10VgaBufInitv+0x142>
10008ebc:	2000badc 	.word	0x2000badc
10008ec0:	2000e50c 	.word	0x2000e50c
10008ec4:	00ffff00 	.word	0x00ffff00
10008ec8:	2000e508 	.word	0x2000e508
10008ecc:	2000e500 	.word	0x2000e500
10008ed0:	2000e51c 	.word	0x2000e51c
10008ed4:	2000a3cc 	.word	0x2000a3cc
10008ed8:	2000af2c 	.word	0x2000af2c

10008edc <_Z7VgaTermv>:
 *
 * \param channel DMA channel
 */
static inline void dma_channel_abort(uint channel) {
    check_dma_channel_param(channel);
    dma_hw->abort = 1u << channel;
10008edc:	21a0      	movs	r1, #160	; 0xa0
10008ede:	2302      	movs	r3, #2
    // Bit will go 0 once channel has reached safe state
    // (i.e. any in-flight transfers have retired)
    while (dma_hw->abort & (1ul << channel)) tight_loop_contents();
10008ee0:	2002      	movs	r0, #2
    dma_hw->abort = 1u << channel;
10008ee2:	4a27      	ldr	r2, [pc, #156]	; (10008f80 <_Z7VgaTermv+0xa4>)
10008ee4:	05c9      	lsls	r1, r1, #23

// terminate VGA service
void VgaTerm()
{
10008ee6:	b570      	push	{r4, r5, r6, lr}
10008ee8:	508b      	str	r3, [r1, r2]
    while (dma_hw->abort & (1ul << channel)) tight_loop_contents();
10008eea:	588b      	ldr	r3, [r1, r2]
10008eec:	4218      	tst	r0, r3
10008eee:	d1fc      	bne.n	10008eea <_Z7VgaTermv+0xe>
    dma_hw->abort = 1u << channel;
10008ef0:	2301      	movs	r3, #1
    while (dma_hw->abort & (1ul << channel)) tight_loop_contents();
10008ef2:	20a0      	movs	r0, #160	; 0xa0
    dma_hw->abort = 1u << channel;
10008ef4:	508b      	str	r3, [r1, r2]
    while (dma_hw->abort & (1ul << channel)) tight_loop_contents();
10008ef6:	2201      	movs	r2, #1
10008ef8:	4921      	ldr	r1, [pc, #132]	; (10008f80 <_Z7VgaTermv+0xa4>)
10008efa:	05c0      	lsls	r0, r0, #23
10008efc:	5843      	ldr	r3, [r0, r1]
10008efe:	421a      	tst	r2, r3
10008f00:	d1fc      	bne.n	10008efc <_Z7VgaTermv+0x20>
    dma_hw->abort = 1u << channel;
10008f02:	24a0      	movs	r4, #160	; 0xa0
10008f04:	2001      	movs	r0, #1
10008f06:	2601      	movs	r6, #1
10008f08:	4a1d      	ldr	r2, [pc, #116]	; (10008f80 <_Z7VgaTermv+0xa4>)
10008f0a:	05e4      	lsls	r4, r4, #23
10008f0c:	0031      	movs	r1, r6
10008f0e:	4081      	lsls	r1, r0
10008f10:	50a1      	str	r1, [r4, r2]
    while (dma_hw->abort & (1ul << channel)) tight_loop_contents();
10008f12:	58a3      	ldr	r3, [r4, r2]
10008f14:	420b      	tst	r3, r1
10008f16:	d1fc      	bne.n	10008f12 <_Z7VgaTermv+0x36>
    dma_hw->abort = 1u << channel;
10008f18:	0031      	movs	r1, r6
10008f1a:	1e43      	subs	r3, r0, #1
10008f1c:	4099      	lsls	r1, r3
10008f1e:	50a1      	str	r1, [r4, r2]
    while (dma_hw->abort & (1ul << channel)) tight_loop_contents();
10008f20:	58a3      	ldr	r3, [r4, r2]
10008f22:	001d      	movs	r5, r3
10008f24:	400d      	ands	r5, r1
10008f26:	420b      	tst	r3, r1
10008f28:	d1fa      	bne.n	10008f20 <_Z7VgaTermv+0x44>
	int i;

	// abort DMA channels
	dma_channel_abort(VGA_DMA_PIO0); // pre-abort, could be chaining right now
	dma_channel_abort(VGA_DMA_CB0);
	for (i = 0; i < LAYERS; i++)
10008f2a:	3002      	adds	r0, #2
10008f2c:	2809      	cmp	r0, #9
10008f2e:	d1ed      	bne.n	10008f0c <_Z7VgaTermv+0x30>
		dma_channel_abort(VGA_DMA_PIO(i));
		dma_channel_abort(VGA_DMA_CB(i));
	}

	// disable IRQ0 from DMA0
	irq_set_enabled(DMA_IRQ_0, false);
10008f30:	2100      	movs	r1, #0
10008f32:	3002      	adds	r0, #2
10008f34:	f7f8 fccc 	bl	100018d0 <irq_set_enabled>
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10008f38:	2302      	movs	r3, #2
10008f3a:	4a12      	ldr	r2, [pc, #72]	; (10008f84 <_Z7VgaTermv+0xa8>)
    pio->ctrl = (pio->ctrl & ~mask) | (enabled ? mask : 0u);
10008f3c:	4812      	ldr	r0, [pc, #72]	; (10008f88 <_Z7VgaTermv+0xac>)
10008f3e:	6013      	str	r3, [r2, #0]
	dma_channel_set_irq0_enabled(VGA_DMA_PIO0, false);

	// Clear the interrupt request for DMA control channel
	dma_hw->ints0 = (1u << VGA_DMA_PIO0);
10008f40:	4a12      	ldr	r2, [pc, #72]	; (10008f8c <_Z7VgaTermv+0xb0>)
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10008f42:	4913      	ldr	r1, [pc, #76]	; (10008f90 <_Z7VgaTermv+0xb4>)
10008f44:	50a3      	str	r3, [r4, r2]
10008f46:	220f      	movs	r2, #15
10008f48:	6803      	ldr	r3, [r0, #0]
10008f4a:	4393      	bics	r3, r2
10008f4c:	6003      	str	r3, [r0, #0]
    pio->ctrl |= (mask << PIO_CTRL_SM_RESTART_LSB) & PIO_CTRL_SM_RESTART_BITS;
10008f4e:	6803      	ldr	r3, [r0, #0]
10008f50:	32e1      	adds	r2, #225	; 0xe1
10008f52:	4313      	orrs	r3, r2
10008f54:	6003      	str	r3, [r0, #0]
10008f56:	2380      	movs	r3, #128	; 0x80
10008f58:	4a0e      	ldr	r2, [pc, #56]	; (10008f94 <_Z7VgaTermv+0xb8>)
10008f5a:	061b      	lsls	r3, r3, #24
10008f5c:	6013      	str	r3, [r2, #0]
10008f5e:	6013      	str	r3, [r2, #0]

	// clear FIFOs
	for (i = 0; i < LAYERS; i++)
	{
		pio_sm_clear_fifos(VGA_PIO, VGA_SM(i));
		CtrlBufNext[i] = NULL;
10008f60:	4a0d      	ldr	r2, [pc, #52]	; (10008f98 <_Z7VgaTermv+0xbc>)
10008f62:	6015      	str	r5, [r2, #0]
10008f64:	600b      	str	r3, [r1, #0]
10008f66:	600b      	str	r3, [r1, #0]
10008f68:	490c      	ldr	r1, [pc, #48]	; (10008f9c <_Z7VgaTermv+0xc0>)
10008f6a:	6055      	str	r5, [r2, #4]
10008f6c:	600b      	str	r3, [r1, #0]
10008f6e:	600b      	str	r3, [r1, #0]
10008f70:	490b      	ldr	r1, [pc, #44]	; (10008fa0 <_Z7VgaTermv+0xc4>)
10008f72:	6095      	str	r5, [r2, #8]
10008f74:	600b      	str	r3, [r1, #0]
10008f76:	600b      	str	r3, [r1, #0]
10008f78:	60d5      	str	r5, [r2, #12]
	}

	// clear PIO instruction memory 
	pio_clear_instruction_memory(VGA_PIO);
10008f7a:	f7f9 f927 	bl	100021cc <pio_clear_instruction_memory>
}
10008f7e:	bd70      	pop	{r4, r5, r6, pc}
10008f80:	00000444 	.word	0x00000444
10008f84:	50003404 	.word	0x50003404
10008f88:	50200000 	.word	0x50200000
10008f8c:	0000040c 	.word	0x0000040c
10008f90:	502010e8 	.word	0x502010e8
10008f94:	502010d0 	.word	0x502010d0
10008f98:	2000ba8c 	.word	0x2000ba8c
10008f9c:	50201100 	.word	0x50201100
10008fa0:	50201118 	.word	0x50201118

10008fa4 <_Z16ScanlineTypeInitPK6sVmode>:

// initialize scanline type table
void ScanlineTypeInit(const sVmode* v)
{
10008fa4:	b5f0      	push	{r4, r5, r6, r7, lr}
10008fa6:	46c6      	mov	lr, r8
	u8* d = ScanlineType;
	int i, k;

	// line 0 is not used
	*d++ = LINE_DARK;
10008fa8:	2305      	movs	r3, #5
{
10008faa:	b500      	push	{lr}
	*d++ = LINE_DARK;
10008fac:	4c6b      	ldr	r4, [pc, #428]	; (1000915c <_Z16ScanlineTypeInitPK6sVmode+0x1b8>)
{
10008fae:	0005      	movs	r5, r0
	*d++ = LINE_DARK;
10008fb0:	7023      	strb	r3, [r4, #0]

	// progressive mode (VGA 525)
	if (!v->inter)
10008fb2:	3351      	adds	r3, #81	; 0x51
10008fb4:	5cc3      	ldrb	r3, [r0, r3]
10008fb6:	2b00      	cmp	r3, #0
10008fb8:	d125      	bne.n	10009006 <_Z16ScanlineTypeInitPK6sVmode+0x62>
	{
		// vertical sync (VGA 2)
		for (i = v->vsync1; i > 0; i--) *d++ = LINE_VSYNC;
10008fba:	8e86      	ldrh	r6, [r0, #52]	; 0x34
	*d++ = LINE_DARK;
10008fbc:	3401      	adds	r4, #1
		for (i = v->vsync1; i > 0; i--) *d++ = LINE_VSYNC;
10008fbe:	2e00      	cmp	r6, #0
10008fc0:	d005      	beq.n	10008fce <_Z16ScanlineTypeInitPK6sVmode+0x2a>
10008fc2:	0020      	movs	r0, r4
10008fc4:	0032      	movs	r2, r6
10008fc6:	2100      	movs	r1, #0
10008fc8:	f7f8 f8ae 	bl	10001128 <__wrap_memset>
10008fcc:	1934      	adds	r4, r6, r4

		// dark (VGA 33)
		for (i = v->vback1; i > 0; i--) *d++ = LINE_DARK;
10008fce:	8f2e      	ldrh	r6, [r5, #56]	; 0x38
10008fd0:	2e00      	cmp	r6, #0
10008fd2:	d005      	beq.n	10008fe0 <_Z16ScanlineTypeInitPK6sVmode+0x3c>
10008fd4:	0020      	movs	r0, r4
10008fd6:	0032      	movs	r2, r6
10008fd8:	2105      	movs	r1, #5
10008fda:	f7f8 f8a5 	bl	10001128 <__wrap_memset>
10008fde:	19a4      	adds	r4, r4, r6

		// image (VGA 480)
		for (i = v->vact1; i > 0; i--) *d++ = LINE_IMG;
10008fe0:	8f6e      	ldrh	r6, [r5, #58]	; 0x3a
10008fe2:	2e00      	cmp	r6, #0
10008fe4:	d005      	beq.n	10008ff2 <_Z16ScanlineTypeInitPK6sVmode+0x4e>
10008fe6:	0020      	movs	r0, r4
10008fe8:	0032      	movs	r2, r6
10008fea:	2106      	movs	r1, #6
10008fec:	f7f8 f89c 	bl	10001128 <__wrap_memset>
10008ff0:	19a4      	adds	r4, r4, r6

		// dark (VGA 10)
		for (i = v->vfront1; i > 0; i--) *d++ = LINE_DARK;
10008ff2:	8faa      	ldrh	r2, [r5, #60]	; 0x3c
10008ff4:	2a00      	cmp	r2, #0
10008ff6:	d003      	beq.n	10009000 <_Z16ScanlineTypeInitPK6sVmode+0x5c>
10008ff8:	2105      	movs	r1, #5
10008ffa:	0020      	movs	r0, r4
10008ffc:	f7f8 f894 	bl	10001128 <__wrap_memset>
		for (i = v->vfront2; i > 0; i--) *d++ = LINE_DARK;

		// half sync (PAL 3, NTSC 3)
		for (i = v->vpre2/2; i > 0; i--) *d++ = LINE_HHSYNC;
	}
}
10009000:	bc80      	pop	{r7}
10009002:	46b8      	mov	r8, r7
10009004:	bdf0      	pop	{r4, r5, r6, r7, pc}
		for (i = v->vsync1/2; i > 0; i--) *d++ = LINE_VVSYNC;
10009006:	8e83      	ldrh	r3, [r0, #52]	; 0x34
	*d++ = LINE_DARK;
10009008:	3401      	adds	r4, #1
		for (i = v->vsync1/2; i > 0; i--) *d++ = LINE_VVSYNC;
1000900a:	085e      	lsrs	r6, r3, #1
1000900c:	d006      	beq.n	1000901c <_Z16ScanlineTypeInitPK6sVmode+0x78>
1000900e:	0020      	movs	r0, r4
10009010:	0032      	movs	r2, r6
10009012:	2101      	movs	r1, #1
10009014:	f7f8 f888 	bl	10001128 <__wrap_memset>
		if ((v->vsync1 & 1) != 0) *d++ = LINE_VHSYNC;
10009018:	8eab      	ldrh	r3, [r5, #52]	; 0x34
		for (i = v->vsync1/2; i > 0; i--) *d++ = LINE_VVSYNC;
1000901a:	1934      	adds	r4, r6, r4
		if ((v->vsync1 & 1) != 0) *d++ = LINE_VHSYNC;
1000901c:	07db      	lsls	r3, r3, #31
1000901e:	d502      	bpl.n	10009026 <_Z16ScanlineTypeInitPK6sVmode+0x82>
10009020:	2302      	movs	r3, #2
10009022:	7023      	strb	r3, [r4, #0]
10009024:	3401      	adds	r4, #1
		for (i = v->vpost1/2; i > 0; i--) *d++ = LINE_HHSYNC;
10009026:	8eee      	ldrh	r6, [r5, #54]	; 0x36
10009028:	0876      	lsrs	r6, r6, #1
1000902a:	d005      	beq.n	10009038 <_Z16ScanlineTypeInitPK6sVmode+0x94>
1000902c:	0020      	movs	r0, r4
1000902e:	0032      	movs	r2, r6
10009030:	2103      	movs	r1, #3
10009032:	f7f8 f879 	bl	10001128 <__wrap_memset>
10009036:	19a4      	adds	r4, r4, r6
		for (i = v->vback1; i > 0; i--) *d++ = LINE_DARK;
10009038:	8f2e      	ldrh	r6, [r5, #56]	; 0x38
1000903a:	2e00      	cmp	r6, #0
1000903c:	d005      	beq.n	1000904a <_Z16ScanlineTypeInitPK6sVmode+0xa6>
1000903e:	0020      	movs	r0, r4
10009040:	0032      	movs	r2, r6
10009042:	2105      	movs	r1, #5
10009044:	f7f8 f870 	bl	10001128 <__wrap_memset>
10009048:	19a4      	adds	r4, r4, r6
		if (v->odd)
1000904a:	2358      	movs	r3, #88	; 0x58
1000904c:	5ceb      	ldrb	r3, [r5, r3]
			for (i = v->vact1; i > 0; i--) *d++ = LINE_IMGODD1; // odd lines 1, 3, 5, ... (PAL)
1000904e:	8f6e      	ldrh	r6, [r5, #58]	; 0x3a
		if (v->odd)
10009050:	2b00      	cmp	r3, #0
10009052:	d16e      	bne.n	10009132 <_Z16ScanlineTypeInitPK6sVmode+0x18e>
			for (i = v->vact1; i > 0; i--) *d++ = LINE_IMGEVEN1; // even lines 0, 2, 4, ... (NTSC)
10009054:	2e00      	cmp	r6, #0
10009056:	d005      	beq.n	10009064 <_Z16ScanlineTypeInitPK6sVmode+0xc0>
10009058:	0020      	movs	r0, r4
1000905a:	0032      	movs	r2, r6
1000905c:	2107      	movs	r1, #7
1000905e:	f7f8 f863 	bl	10001128 <__wrap_memset>
10009062:	19a4      	adds	r4, r4, r6
		for (i = v->vfront1; i > 0; i--) *d++ = LINE_DARK;
10009064:	8fae      	ldrh	r6, [r5, #60]	; 0x3c
10009066:	2e00      	cmp	r6, #0
10009068:	d005      	beq.n	10009076 <_Z16ScanlineTypeInitPK6sVmode+0xd2>
1000906a:	0020      	movs	r0, r4
1000906c:	0032      	movs	r2, r6
1000906e:	2105      	movs	r1, #5
10009070:	f7f8 f85a 	bl	10001128 <__wrap_memset>
10009074:	19a4      	adds	r4, r4, r6
		for (i = v->vpre1/2; i > 0; i--) *d++ = LINE_HHSYNC;
10009076:	8fef      	ldrh	r7, [r5, #62]	; 0x3e
10009078:	087e      	lsrs	r6, r7, #1
1000907a:	d006      	beq.n	1000908a <_Z16ScanlineTypeInitPK6sVmode+0xe6>
1000907c:	0020      	movs	r0, r4
1000907e:	0032      	movs	r2, r6
10009080:	2103      	movs	r1, #3
10009082:	f7f8 f851 	bl	10001128 <__wrap_memset>
		k = v->vpre1 & 1;
10009086:	8fef      	ldrh	r7, [r5, #62]	; 0x3e
		for (i = v->vpre1/2; i > 0; i--) *d++ = LINE_HHSYNC;
10009088:	19a4      	adds	r4, r4, r6
		k = v->vpre1 & 1;
1000908a:	2301      	movs	r3, #1
1000908c:	001a      	movs	r2, r3
1000908e:	403a      	ands	r2, r7
		if (k != 0) *d++ = LINE_HVSYNC;
10009090:	423b      	tst	r3, r7
10009092:	d002      	beq.n	1000909a <_Z16ScanlineTypeInitPK6sVmode+0xf6>
10009094:	3303      	adds	r3, #3
10009096:	7023      	strb	r3, [r4, #0]
10009098:	3401      	adds	r4, #1
		for (i = (v->vsync2 - k)/2; i > 0; i--) *d++ = LINE_VVSYNC;
1000909a:	2342      	movs	r3, #66	; 0x42
1000909c:	4698      	mov	r8, r3
1000909e:	5aeb      	ldrh	r3, [r5, r3]
100090a0:	1a9a      	subs	r2, r3, r2
100090a2:	0fd6      	lsrs	r6, r2, #31
100090a4:	18b6      	adds	r6, r6, r2
100090a6:	1076      	asrs	r6, r6, #1
100090a8:	d007      	beq.n	100090ba <_Z16ScanlineTypeInitPK6sVmode+0x116>
100090aa:	0020      	movs	r0, r4
100090ac:	0032      	movs	r2, r6
100090ae:	2101      	movs	r1, #1
100090b0:	f7f8 f83a 	bl	10001128 <__wrap_memset>
		if (((v->vsync2 - k) & 1) != 0) *d++ = LINE_VHSYNC;
100090b4:	4643      	mov	r3, r8
100090b6:	5aeb      	ldrh	r3, [r5, r3]
		for (i = (v->vsync2 - k)/2; i > 0; i--) *d++ = LINE_VVSYNC;
100090b8:	19a4      	adds	r4, r4, r6
		if (((v->vsync2 - k) & 1) != 0) *d++ = LINE_VHSYNC;
100090ba:	1bdb      	subs	r3, r3, r7
100090bc:	07db      	lsls	r3, r3, #31
100090be:	d502      	bpl.n	100090c6 <_Z16ScanlineTypeInitPK6sVmode+0x122>
100090c0:	2302      	movs	r3, #2
100090c2:	7023      	strb	r3, [r4, #0]
100090c4:	3401      	adds	r4, #1
		for (i = v->vpost2/2; i > 0; i--) *d++ = LINE_HHSYNC;
100090c6:	2344      	movs	r3, #68	; 0x44
100090c8:	5aee      	ldrh	r6, [r5, r3]
100090ca:	0876      	lsrs	r6, r6, #1
100090cc:	d005      	beq.n	100090da <_Z16ScanlineTypeInitPK6sVmode+0x136>
100090ce:	0020      	movs	r0, r4
100090d0:	0032      	movs	r2, r6
100090d2:	2103      	movs	r1, #3
100090d4:	f7f8 f828 	bl	10001128 <__wrap_memset>
100090d8:	19a4      	adds	r4, r4, r6
		for (i = v->vback2; i > 0; i--) *d++ = LINE_DARK;
100090da:	2346      	movs	r3, #70	; 0x46
100090dc:	5aee      	ldrh	r6, [r5, r3]
100090de:	2e00      	cmp	r6, #0
100090e0:	d005      	beq.n	100090ee <_Z16ScanlineTypeInitPK6sVmode+0x14a>
100090e2:	0020      	movs	r0, r4
100090e4:	0032      	movs	r2, r6
100090e6:	2105      	movs	r1, #5
100090e8:	f7f8 f81e 	bl	10001128 <__wrap_memset>
100090ec:	19a4      	adds	r4, r4, r6
		if (v->odd)
100090ee:	2358      	movs	r3, #88	; 0x58
100090f0:	5ceb      	ldrb	r3, [r5, r3]
100090f2:	2b00      	cmp	r3, #0
100090f4:	d026      	beq.n	10009144 <_Z16ScanlineTypeInitPK6sVmode+0x1a0>
			for (i = v->vact2; i > 0; i--) *d++ = LINE_IMGEVEN2; // even lines 0, 2, 4, ... (PAL)
100090f6:	2348      	movs	r3, #72	; 0x48
100090f8:	5aee      	ldrh	r6, [r5, r3]
100090fa:	2e00      	cmp	r6, #0
100090fc:	d005      	beq.n	1000910a <_Z16ScanlineTypeInitPK6sVmode+0x166>
100090fe:	0020      	movs	r0, r4
10009100:	0032      	movs	r2, r6
10009102:	2108      	movs	r1, #8
10009104:	f7f8 f810 	bl	10001128 <__wrap_memset>
10009108:	19a4      	adds	r4, r4, r6
		for (i = v->vfront2; i > 0; i--) *d++ = LINE_DARK;
1000910a:	234a      	movs	r3, #74	; 0x4a
1000910c:	5aee      	ldrh	r6, [r5, r3]
1000910e:	2e00      	cmp	r6, #0
10009110:	d005      	beq.n	1000911e <_Z16ScanlineTypeInitPK6sVmode+0x17a>
10009112:	0020      	movs	r0, r4
10009114:	0032      	movs	r2, r6
10009116:	2105      	movs	r1, #5
10009118:	f7f8 f806 	bl	10001128 <__wrap_memset>
1000911c:	19a4      	adds	r4, r4, r6
		for (i = v->vpre2/2; i > 0; i--) *d++ = LINE_HHSYNC;
1000911e:	234c      	movs	r3, #76	; 0x4c
10009120:	5aea      	ldrh	r2, [r5, r3]
10009122:	0852      	lsrs	r2, r2, #1
10009124:	d100      	bne.n	10009128 <_Z16ScanlineTypeInitPK6sVmode+0x184>
10009126:	e76b      	b.n	10009000 <_Z16ScanlineTypeInitPK6sVmode+0x5c>
10009128:	2103      	movs	r1, #3
1000912a:	0020      	movs	r0, r4
1000912c:	f7f7 fffc 	bl	10001128 <__wrap_memset>
10009130:	e766      	b.n	10009000 <_Z16ScanlineTypeInitPK6sVmode+0x5c>
			for (i = v->vact1; i > 0; i--) *d++ = LINE_IMGODD1; // odd lines 1, 3, 5, ... (PAL)
10009132:	2e00      	cmp	r6, #0
10009134:	d096      	beq.n	10009064 <_Z16ScanlineTypeInitPK6sVmode+0xc0>
10009136:	0020      	movs	r0, r4
10009138:	0032      	movs	r2, r6
1000913a:	2109      	movs	r1, #9
1000913c:	f7f7 fff4 	bl	10001128 <__wrap_memset>
10009140:	19a4      	adds	r4, r4, r6
10009142:	e78f      	b.n	10009064 <_Z16ScanlineTypeInitPK6sVmode+0xc0>
			for (i = v->vact2; i > 0; i--) *d++ = LINE_IMGODD2; // odd lines 1, 3, 5, ... (NTSC)
10009144:	2348      	movs	r3, #72	; 0x48
10009146:	5aee      	ldrh	r6, [r5, r3]
10009148:	2e00      	cmp	r6, #0
1000914a:	d0de      	beq.n	1000910a <_Z16ScanlineTypeInitPK6sVmode+0x166>
1000914c:	0020      	movs	r0, r4
1000914e:	0032      	movs	r2, r6
10009150:	210a      	movs	r1, #10
10009152:	f7f7 ffe9 	bl	10001128 <__wrap_memset>
10009156:	19a4      	adds	r4, r4, r6
10009158:	e7d7      	b.n	1000910a <_Z16ScanlineTypeInitPK6sVmode+0x166>
1000915a:	46c0      	nop			; (mov r8, r8)
1000915c:	2000ed70 	.word	0x2000ed70

10009160 <_Z7VgaInitPK6sVmode>:
}

// initialize videomode (returns False on bad configuration)
// - All layer modes must use same layer program (LAYERMODE_BASE = overlapped layers are OFF)
void VgaInit(const sVmode* vmode)
{
10009160:	b5f0      	push	{r4, r5, r6, r7, lr}
10009162:	46de      	mov	lr, fp
10009164:	464e      	mov	r6, r9
10009166:	4645      	mov	r5, r8
10009168:	4657      	mov	r7, sl
1000916a:	0004      	movs	r4, r0
1000916c:	b5e0      	push	{r5, r6, r7, lr}
1000916e:	b083      	sub	sp, #12
10009170:	9001      	str	r0, [sp, #4]
	int i;

	// stop old state
	VgaTerm();
10009172:	f7ff feb3 	bl	10008edc <_Z7VgaTermv>

	// initialize scanline type table
	ScanlineTypeInit(vmode);
10009176:	0020      	movs	r0, r4
10009178:	f7ff ff14 	bl	10008fa4 <_Z16ScanlineTypeInitPK6sVmode>
	// prepare render font pixel mask
	for (i = 0; i < 256; i++)
	{
		// higher 4 bits
		u32 m = 0;
		if ((i & B7) != 0) m |= 0xff;
1000917c:	2280      	movs	r2, #128	; 0x80
1000917e:	4691      	mov	r9, r2
		if ((i & B6) != 0) m |= 0xff << 8;
10009180:	3a40      	subs	r2, #64	; 0x40
10009182:	4690      	mov	r8, r2
		if ((i & B5) != 0) m |= 0xff << 16;
		if ((i & B4) != 0) m |= 0xff << 24;
10009184:	22ff      	movs	r2, #255	; 0xff
		if ((i & B5) != 0) m |= 0xff << 16;
10009186:	27ff      	movs	r7, #255	; 0xff
		if ((i & B4) != 0) m |= 0xff << 24;
10009188:	0612      	lsls	r2, r2, #24
	for (i = 0; i < 256; i++)
1000918a:	2300      	movs	r3, #0
		if ((i & B5) != 0) m |= 0xff << 16;
1000918c:	2520      	movs	r5, #32
		if ((i & B4) != 0) m |= 0xff << 24;
1000918e:	2610      	movs	r6, #16
10009190:	4694      	mov	ip, r2
10009192:	4956      	ldr	r1, [pc, #344]	; (100092ec <_Z7VgaInitPK6sVmode+0x18c>)
		if ((i & B5) != 0) m |= 0xff << 16;
10009194:	043f      	lsls	r7, r7, #16
10009196:	e024      	b.n	100091e2 <_Z7VgaInitPK6sVmode+0x82>
		if ((i & B7) != 0) m |= 0xff;
10009198:	20ff      	movs	r0, #255	; 0xff
		u32 m = 0;
1000919a:	2200      	movs	r2, #0
		if ((i & B7) != 0) m |= 0xff;
1000919c:	0200      	lsls	r0, r0, #8
		if ((i & B6) != 0) m |= 0xff << 8;
1000919e:	4644      	mov	r4, r8
100091a0:	421c      	tst	r4, r3
100091a2:	d000      	beq.n	100091a6 <_Z7VgaInitPK6sVmode+0x46>
100091a4:	0002      	movs	r2, r0
		if ((i & B5) != 0) m |= 0xff << 16;
100091a6:	421d      	tst	r5, r3
100091a8:	d000      	beq.n	100091ac <_Z7VgaInitPK6sVmode+0x4c>
100091aa:	433a      	orrs	r2, r7
		if ((i & B4) != 0) m |= 0xff << 24;
100091ac:	421e      	tst	r6, r3
100091ae:	d001      	beq.n	100091b4 <_Z7VgaInitPK6sVmode+0x54>
100091b0:	4660      	mov	r0, ip
100091b2:	4302      	orrs	r2, r0
		RenderTextMask[2*i] = m;
100091b4:	600a      	str	r2, [r1, #0]

		// lower 4 bits
		m = 0;
		if ((i & B3) != 0) m |= 0xff;
100091b6:	071a      	lsls	r2, r3, #28
100091b8:	d419      	bmi.n	100091ee <_Z7VgaInitPK6sVmode+0x8e>
100091ba:	20ff      	movs	r0, #255	; 0xff
		m = 0;
100091bc:	2200      	movs	r2, #0
		if ((i & B3) != 0) m |= 0xff;
100091be:	0200      	lsls	r0, r0, #8
		if ((i & B2) != 0) m |= 0xff << 8;
100091c0:	075c      	lsls	r4, r3, #29
100091c2:	d500      	bpl.n	100091c6 <_Z7VgaInitPK6sVmode+0x66>
100091c4:	0002      	movs	r2, r0
		if ((i & B1) != 0) m |= 0xff << 16;
100091c6:	0798      	lsls	r0, r3, #30
100091c8:	d500      	bpl.n	100091cc <_Z7VgaInitPK6sVmode+0x6c>
100091ca:	433a      	orrs	r2, r7
		if ((i & B0) != 0) m |= 0xff << 24;
100091cc:	07d8      	lsls	r0, r3, #31
100091ce:	d501      	bpl.n	100091d4 <_Z7VgaInitPK6sVmode+0x74>
100091d0:	4660      	mov	r0, ip
100091d2:	4302      	orrs	r2, r0
		RenderTextMask[2*i+1] = m;
100091d4:	604a      	str	r2, [r1, #4]
	for (i = 0; i < 256; i++)
100091d6:	2280      	movs	r2, #128	; 0x80
100091d8:	3301      	adds	r3, #1
100091da:	3108      	adds	r1, #8
100091dc:	0052      	lsls	r2, r2, #1
100091de:	4293      	cmp	r3, r2
100091e0:	d008      	beq.n	100091f4 <_Z7VgaInitPK6sVmode+0x94>
		if ((i & B7) != 0) m |= 0xff;
100091e2:	464a      	mov	r2, r9
100091e4:	421a      	tst	r2, r3
100091e6:	d0d7      	beq.n	10009198 <_Z7VgaInitPK6sVmode+0x38>
100091e8:	22ff      	movs	r2, #255	; 0xff
100091ea:	4841      	ldr	r0, [pc, #260]	; (100092f0 <_Z7VgaInitPK6sVmode+0x190>)
100091ec:	e7d7      	b.n	1000919e <_Z7VgaInitPK6sVmode+0x3e>
		if ((i & B3) != 0) m |= 0xff;
100091ee:	22ff      	movs	r2, #255	; 0xff
100091f0:	483f      	ldr	r0, [pc, #252]	; (100092f0 <_Z7VgaInitPK6sVmode+0x190>)
100091f2:	e7e5      	b.n	100091c0 <_Z7VgaInitPK6sVmode+0x60>

	// save current videomode
	memcpy(&CurVmode, vmode, sizeof(sVmode));

	// initialize parameters
	ScanLine = 1; // currently processed scanline
100091f4:	2401      	movs	r4, #1
	memset(LineBuf0, COL_BLACK, BLACK_MAX);
100091f6:	32c1      	adds	r2, #193	; 0xc1
100091f8:	2100      	movs	r1, #0
100091fa:	32ff      	adds	r2, #255	; 0xff
100091fc:	483d      	ldr	r0, [pc, #244]	; (100092f4 <_Z7VgaInitPK6sVmode+0x194>)
100091fe:	f7f7 ff93 	bl	10001128 <__wrap_memset>
	memcpy(&CurVmode, vmode, sizeof(sVmode));
10009202:	9d01      	ldr	r5, [sp, #4]
10009204:	225c      	movs	r2, #92	; 0x5c
10009206:	0029      	movs	r1, r5
10009208:	483b      	ldr	r0, [pc, #236]	; (100092f8 <_Z7VgaInitPK6sVmode+0x198>)
1000920a:	f7f7 ff93 	bl	10001134 <__wrap___aeabi_memcpy>
	ScanLine = 1; // currently processed scanline
1000920e:	4b3b      	ldr	r3, [pc, #236]	; (100092fc <_Z7VgaInitPK6sVmode+0x19c>)
//	Frame = 0;
	BufInx = 0; // at first, control buffer 1 will be sent out
	CtrlBufNext[0] = CtrlBuf2;

	// initialize base layer
	LayerModeInx[0] = LAYERMODE_BASE;
10009210:	483b      	ldr	r0, [pc, #236]	; (10009300 <_Z7VgaInitPK6sVmode+0x1a0>)
	ScanLine = 1; // currently processed scanline
10009212:	601c      	str	r4, [r3, #0]
	BufInx = 0; // at first, control buffer 1 will be sent out
10009214:	2300      	movs	r3, #0
	LayerModeInx[0] = LAYERMODE_BASE;
10009216:	4681      	mov	r9, r0
	BufInx = 0; // at first, control buffer 1 will be sent out
10009218:	4a3a      	ldr	r2, [pc, #232]	; (10009304 <_Z7VgaInitPK6sVmode+0x1a4>)
	CtrlBufNext[0] = CtrlBuf2;
1000921a:	493b      	ldr	r1, [pc, #236]	; (10009308 <_Z7VgaInitPK6sVmode+0x1a8>)
	BufInx = 0; // at first, control buffer 1 will be sent out
1000921c:	6013      	str	r3, [r2, #0]
	memcpy(&CurLayerMode[0], &LayerMode[LAYERMODE_BASE], sizeof(sLayerMode));
1000921e:	4f3b      	ldr	r7, [pc, #236]	; (1000930c <_Z7VgaInitPK6sVmode+0x1ac>)
	CtrlBufNext[0] = CtrlBuf2;
10009220:	4a3b      	ldr	r2, [pc, #236]	; (10009310 <_Z7VgaInitPK6sVmode+0x1b0>)
	LayerModeInx[0] = LAYERMODE_BASE;
10009222:	7003      	strb	r3, [r0, #0]
	memcpy(&CurLayerMode[0], &LayerMode[LAYERMODE_BASE], sizeof(sLayerMode));
10009224:	4b3b      	ldr	r3, [pc, #236]	; (10009314 <_Z7VgaInitPK6sVmode+0x1b4>)
	CtrlBufNext[0] = CtrlBuf2;
10009226:	6011      	str	r1, [r2, #0]
	memcpy(&CurLayerMode[0], &LayerMode[LAYERMODE_BASE], sizeof(sLayerMode));
10009228:	0038      	movs	r0, r7
1000922a:	0019      	movs	r1, r3
1000922c:	2203      	movs	r2, #3
1000922e:	469a      	mov	sl, r3
10009230:	f7f7 ff80 	bl	10001134 <__wrap___aeabi_memcpy>
	memset(&LayerScreen[0], 0, sizeof(sLayer));
10009234:	2100      	movs	r1, #0
10009236:	2224      	movs	r2, #36	; 0x24
10009238:	4837      	ldr	r0, [pc, #220]	; (10009318 <_Z7VgaInitPK6sVmode+0x1b8>)
1000923a:	f7f7 ff75 	bl	10001128 <__wrap_memset>

	// save layer modes
	LayerModeInx[1] = vmode->mode[1];
1000923e:	4649      	mov	r1, r9
10009240:	7eab      	ldrb	r3, [r5, #26]
	LayerModeInx[2] = vmode->mode[2];
	LayerModeInx[3] = vmode->mode[3];

	LayerMask = B0; // mask of active layers
10009242:	4e36      	ldr	r6, [pc, #216]	; (1000931c <_Z7VgaInitPK6sVmode+0x1bc>)
	LayerModeInx[1] = vmode->mode[1];
10009244:	704b      	strb	r3, [r1, #1]
	LayerModeInx[2] = vmode->mode[2];
10009246:	7eeb      	ldrb	r3, [r5, #27]
10009248:	3703      	adds	r7, #3
1000924a:	708b      	strb	r3, [r1, #2]
	LayerModeInx[3] = vmode->mode[3];
1000924c:	7f2b      	ldrb	r3, [r5, #28]
	LayerMask = B0; // mask of active layers
1000924e:	7034      	strb	r4, [r6, #0]
	LayerModeInx[3] = vmode->mode[3];
10009250:	70cb      	strb	r3, [r1, #3]
	for (i = 1; i < LAYERS; i++)
	{
		memcpy(&CurLayerMode[i], &LayerMode[LayerModeInx[i]], sizeof(sLayerMode));
		if (LayerModeInx[i] != LAYERMODE_BASE) LayerMask |= (1 << i);
10009252:	2301      	movs	r3, #1
10009254:	469b      	mov	fp, r3
		memcpy(&CurLayerMode[i], &LayerMode[LayerModeInx[i]], sizeof(sLayerMode));
10009256:	464b      	mov	r3, r9
10009258:	5d1d      	ldrb	r5, [r3, r4]
1000925a:	2203      	movs	r2, #3
1000925c:	0069      	lsls	r1, r5, #1
1000925e:	1949      	adds	r1, r1, r5
10009260:	0038      	movs	r0, r7
10009262:	4451      	add	r1, sl
10009264:	f7f7 ff66 	bl	10001134 <__wrap___aeabi_memcpy>
		if (LayerModeInx[i] != LAYERMODE_BASE) LayerMask |= (1 << i);
10009268:	2d00      	cmp	r5, #0
1000926a:	d004      	beq.n	10009276 <_Z7VgaInitPK6sVmode+0x116>
1000926c:	465b      	mov	r3, fp
1000926e:	40a3      	lsls	r3, r4
10009270:	7832      	ldrb	r2, [r6, #0]
10009272:	4313      	orrs	r3, r2
10009274:	7033      	strb	r3, [r6, #0]
	for (i = 1; i < LAYERS; i++)
10009276:	3401      	adds	r4, #1
10009278:	3703      	adds	r7, #3
1000927a:	2c04      	cmp	r4, #4
1000927c:	d1eb      	bne.n	10009256 <_Z7VgaInitPK6sVmode+0xf6>
	}

	// get layer program
	LayerProgInx = vmode->prog;
1000927e:	9b01      	ldr	r3, [sp, #4]
	memcpy(&CurLayerProg, &LayerProg[LayerProgInx], sizeof(sLayerProg));
10009280:	4927      	ldr	r1, [pc, #156]	; (10009320 <_Z7VgaInitPK6sVmode+0x1c0>)
	LayerProgInx = vmode->prog;
10009282:	7e1a      	ldrb	r2, [r3, #24]
10009284:	4b27      	ldr	r3, [pc, #156]	; (10009324 <_Z7VgaInitPK6sVmode+0x1c4>)
10009286:	701a      	strb	r2, [r3, #0]
	memcpy(&CurLayerProg, &LayerProg[LayerProgInx], sizeof(sLayerProg));
10009288:	0053      	lsls	r3, r2, #1
1000928a:	189b      	adds	r3, r3, r2
1000928c:	4a26      	ldr	r2, [pc, #152]	; (10009328 <_Z7VgaInitPK6sVmode+0x1c8>)
1000928e:	011b      	lsls	r3, r3, #4
10009290:	189b      	adds	r3, r3, r2
10009292:	000a      	movs	r2, r1
10009294:	cb13      	ldmia	r3!, {r0, r1, r4}
10009296:	c213      	stmia	r2!, {r0, r1, r4}
10009298:	cb13      	ldmia	r3!, {r0, r1, r4}
1000929a:	c213      	stmia	r2!, {r0, r1, r4}
1000929c:	cb13      	ldmia	r3!, {r0, r1, r4}
1000929e:	c213      	stmia	r2!, {r0, r1, r4}
100092a0:	cb13      	ldmia	r3!, {r0, r1, r4}
100092a2:	c213      	stmia	r2!, {r0, r1, r4}

	// initialize VGA PIO
	VgaPioInit();
100092a4:	f7ff fc6e 	bl	10008b84 <_Z10VgaPioInitv>

	// initialize scanline buffers
	VgaBufInit();
100092a8:	f7ff fd42 	bl	10008d30 <_Z10VgaBufInitv>

	// initialize DMA
	VgaDmaInit();
100092ac:	f7ff fbdc 	bl	10008a68 <_Z10VgaDmaInitv>

	// enable DMA IRQ
	irq_set_enabled(DMA_IRQ_0, true);
100092b0:	2101      	movs	r1, #1
100092b2:	200b      	movs	r0, #11
100092b4:	f7f8 fb0c 	bl	100018d0 <irq_set_enabled>
    dma_hw->multi_channel_trigger = chan_mask;
100092b8:	22a0      	movs	r2, #160	; 0xa0
100092ba:	2386      	movs	r3, #134	; 0x86
100092bc:	2101      	movs	r1, #1
100092be:	05d2      	lsls	r2, r2, #23
100092c0:	00db      	lsls	r3, r3, #3
100092c2:	50d1      	str	r1, [r2, r3]
                 ((mask << PIO_CTRL_SM_ENABLE_LSB) & PIO_CTRL_SM_ENABLE_BITS);
100092c4:	230f      	movs	r3, #15
    pio->ctrl |= ((mask << PIO_CTRL_CLKDIV_RESTART_LSB) & PIO_CTRL_CLKDIV_RESTART_BITS) |
100092c6:	4919      	ldr	r1, [pc, #100]	; (1000932c <_Z7VgaInitPK6sVmode+0x1cc>)

	// start DMA with base layer 0
	dma_channel_start(VGA_DMA_CB0);

	// run state machines
	pio_enable_sm_mask_in_sync(VGA_PIO, LayerMask);
100092c8:	7832      	ldrb	r2, [r6, #0]
100092ca:	6808      	ldr	r0, [r1, #0]
                 ((mask << PIO_CTRL_SM_ENABLE_LSB) & PIO_CTRL_SM_ENABLE_BITS);
100092cc:	4013      	ands	r3, r2
    pio->ctrl |= ((mask << PIO_CTRL_CLKDIV_RESTART_LSB) & PIO_CTRL_CLKDIV_RESTART_BITS) |
100092ce:	4303      	orrs	r3, r0
100092d0:	20f0      	movs	r0, #240	; 0xf0
100092d2:	0212      	lsls	r2, r2, #8
100092d4:	0100      	lsls	r0, r0, #4
100092d6:	4002      	ands	r2, r0
100092d8:	4313      	orrs	r3, r2
100092da:	600b      	str	r3, [r1, #0]
}
100092dc:	b003      	add	sp, #12
100092de:	bcf0      	pop	{r4, r5, r6, r7}
100092e0:	46bb      	mov	fp, r7
100092e2:	46b2      	mov	sl, r6
100092e4:	46a9      	mov	r9, r5
100092e6:	46a0      	mov	r8, r4
100092e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
100092ea:	46c0      	nop			; (mov r8, r8)
100092ec:	2000e56c 	.word	0x2000e56c
100092f0:	0000ffff 	.word	0x0000ffff
100092f4:	2000cc00 	.word	0x2000cc00
100092f8:	2000badc 	.word	0x2000badc
100092fc:	2000ed6c 	.word	0x2000ed6c
10009300:	2000cb50 	.word	0x2000cb50
10009304:	2000a394 	.word	0x2000a394
10009308:	2000af2c 	.word	0x2000af2c
1000930c:	2000ba9c 	.word	0x2000ba9c
10009310:	2000ba8c 	.word	0x2000ba8c
10009314:	101880f4 	.word	0x101880f4
10009318:	2000cb54 	.word	0x2000cb54
1000931c:	20017322 	.word	0x20017322
10009320:	2000baa8 	.word	0x2000baa8
10009324:	20017323 	.word	0x20017323
10009328:	10188130 	.word	0x10188130
1000932c:	50200000 	.word	0x50200000

10009330 <_Z7VgaCorev>:

void (* volatile Core1Fnc)() = NULL; // core 1 remote function

// VGA core
void VgaCore()
{
10009330:	b570      	push	{r4, r5, r6, lr}
			if ((u32)v == (u32)1)
				VgaTerm(); // terminate
			else
				VgaInit(v);
			__dmb();
			VgaVmodeReq = NULL;
10009332:	2600      	movs	r6, #0
10009334:	4d0f      	ldr	r5, [pc, #60]	; (10009374 <_Z7VgaCorev+0x44>)
10009336:	4c10      	ldr	r4, [pc, #64]	; (10009378 <_Z7VgaCorev+0x48>)
10009338:	f3bf 8f5f 	dmb	sy
		v = VgaVmodeReq;
1000933c:	6828      	ldr	r0, [r5, #0]
		if (v != NULL)
1000933e:	2800      	cmp	r0, #0
10009340:	d006      	beq.n	10009350 <_Z7VgaCorev+0x20>
			if ((u32)v == (u32)1)
10009342:	2801      	cmp	r0, #1
10009344:	d012      	beq.n	1000936c <_Z7VgaCorev+0x3c>
				VgaInit(v);
10009346:	f7ff ff0b 	bl	10009160 <_Z7VgaInitPK6sVmode>
1000934a:	f3bf 8f5f 	dmb	sy
			VgaVmodeReq = NULL;
1000934e:	602e      	str	r6, [r5, #0]
		}

		// execute remote function
		fnc = Core1Fnc;
10009350:	6823      	ldr	r3, [r4, #0]
		if (fnc != NULL)
10009352:	2b00      	cmp	r3, #0
10009354:	d0f0      	beq.n	10009338 <_Z7VgaCorev+0x8>
		{
			fnc();
10009356:	4798      	blx	r3
10009358:	f3bf 8f5f 	dmb	sy
			__dmb();
			Core1Fnc = NULL;
1000935c:	6026      	str	r6, [r4, #0]
1000935e:	f3bf 8f5f 	dmb	sy
		v = VgaVmodeReq;
10009362:	6828      	ldr	r0, [r5, #0]
		if (v != NULL)
10009364:	2800      	cmp	r0, #0
10009366:	d0f3      	beq.n	10009350 <_Z7VgaCorev+0x20>
			if ((u32)v == (u32)1)
10009368:	2801      	cmp	r0, #1
1000936a:	d1ec      	bne.n	10009346 <_Z7VgaCorev+0x16>
				VgaTerm(); // terminate
1000936c:	f7ff fdb6 	bl	10008edc <_Z7VgaTermv>
10009370:	e7eb      	b.n	1000934a <_Z7VgaCorev+0x1a>
10009372:	46c0      	nop			; (mov r8, r8)
10009374:	2001661c 	.word	0x2001661c
10009378:	2000a3c8 	.word	0x2000a3c8

1000937c <_Z10VgaInitReqPK6sVmode>:
}

// request to initialize VGA videomode, NULL=only stop driver (wait to initialization completes)
void VgaInitReq(const sVmode* vmode)
{
	if (vmode == NULL) vmode = (const sVmode*)1;
1000937c:	2800      	cmp	r0, #0
1000937e:	d00c      	beq.n	1000939a <_Z10VgaInitReqPK6sVmode+0x1e>
10009380:	f3bf 8f5f 	dmb	sy
	__dmb();
	VgaVmodeReq = vmode;
10009384:	4a06      	ldr	r2, [pc, #24]	; (100093a0 <_Z10VgaInitReqPK6sVmode+0x24>)
10009386:	6010      	str	r0, [r2, #0]
	while (VgaVmodeReq != NULL) { __dmb(); }
10009388:	6813      	ldr	r3, [r2, #0]
1000938a:	2b00      	cmp	r3, #0
1000938c:	d004      	beq.n	10009398 <_Z10VgaInitReqPK6sVmode+0x1c>
1000938e:	f3bf 8f5f 	dmb	sy
10009392:	6813      	ldr	r3, [r2, #0]
10009394:	2b00      	cmp	r3, #0
10009396:	d1fa      	bne.n	1000938e <_Z10VgaInitReqPK6sVmode+0x12>
}
10009398:	4770      	bx	lr
	if (vmode == NULL) vmode = (const sVmode*)1;
1000939a:	3001      	adds	r0, #1
1000939c:	e7f0      	b.n	10009380 <_Z10VgaInitReqPK6sVmode+0x4>
1000939e:	46c0      	nop			; (mov r8, r8)
100093a0:	2001661c 	.word	0x2001661c

100093a4 <_Z11ScreenClearP7sScreen>:
100093a4:	f3bf 8f5f 	dmb	sy

// clear screen (set 0 strips, does not modify sprites)
void ScreenClear(sScreen* s)
{
	__dmb();
	s->num = 0;
100093a8:	2300      	movs	r3, #0
100093aa:	8003      	strh	r3, [r0, #0]
100093ac:	f3bf 8f5f 	dmb	sy
	__dmb();
}
100093b0:	4770      	bx	lr
100093b2:	46c0      	nop			; (mov r8, r8)

100093b4 <_Z14ScreenAddStripP7sScreeni>:

// add empty strip to the screen (returns pointer to the strip)
sStrip* ScreenAddStrip(sScreen* s, int height)
{
	int n = s->num;
100093b4:	23e4      	movs	r3, #228	; 0xe4
100093b6:	8802      	ldrh	r2, [r0, #0]
{
100093b8:	b510      	push	{r4, lr}
100093ba:	4353      	muls	r3, r2
	sStrip* t = &s->strip[n];
	t->height = height;
100093bc:	18c4      	adds	r4, r0, r3
100093be:	80a1      	strh	r1, [r4, #4]
	t->num = 0;
100093c0:	2100      	movs	r1, #0
100093c2:	80e1      	strh	r1, [r4, #6]
100093c4:	f3bf 8f5f 	dmb	sy
	__dmb();
	s->num = n + 1;
100093c8:	3201      	adds	r2, #1
100093ca:	8002      	strh	r2, [r0, #0]
100093cc:	f3bf 8f5f 	dmb	sy
	sStrip* t = &s->strip[n];
100093d0:	3304      	adds	r3, #4
100093d2:	18c0      	adds	r0, r0, r3
	__dmb();
	return t;
}
100093d4:	bd10      	pop	{r4, pc}
100093d6:	46c0      	nop			; (mov r8, r8)

100093d8 <_Z13ScreenAddSegmP6sStripi>:

// add empty segment to video strip (returns pointer to the segment and initialises is to defaults)
sSegm* ScreenAddSegm(sStrip* strip, int width)
{
100093d8:	b5f0      	push	{r4, r5, r6, r7, lr}
	int n = strip->num;
	sSegm* g = &strip->seg[n];
	g->width = width;
100093da:	2500      	movs	r5, #0
	int n = strip->num;
100093dc:	8844      	ldrh	r4, [r0, #2]
	g->width = width;
100093de:	040f      	lsls	r7, r1, #16
100093e0:	00e3      	lsls	r3, r4, #3
100093e2:	1b1b      	subs	r3, r3, r4
100093e4:	009b      	lsls	r3, r3, #2
100093e6:	0c3e      	lsrs	r6, r7, #16
100093e8:	18c2      	adds	r2, r0, r3
100093ea:	433e      	orrs	r6, r7
100093ec:	6056      	str	r6, [r2, #4]
	g->wb = width;
	g->offx = 0;
100093ee:	6095      	str	r5, [r2, #8]
	g->offy = 0;
	g->wrapx = width;
100093f0:	8191      	strh	r1, [r2, #12]
	g->wrapy = strip->height;
100093f2:	8801      	ldrh	r1, [r0, #0]
	g->data = NULL;
100093f4:	6115      	str	r5, [r2, #16]
	g->wrapy = strip->height;
100093f6:	81d1      	strh	r1, [r2, #14]
	g->form = GF_COLOR;
100093f8:	8295      	strh	r5, [r2, #20]
	g->dbly = false;
	g->par = 0;
100093fa:	6195      	str	r5, [r2, #24]
	g->par2 = 0;
100093fc:	61d5      	str	r5, [r2, #28]
100093fe:	f3bf 8f5f 	dmb	sy
	__dmb();
	strip->num = n + 1;
10009402:	3401      	adds	r4, #1
10009404:	8044      	strh	r4, [r0, #2]
10009406:	f3bf 8f5f 	dmb	sy
	sSegm* g = &strip->seg[n];
1000940a:	3304      	adds	r3, #4
1000940c:	18c0      	adds	r0, r0, r3
	__dmb();
	return g;
}
1000940e:	bdf0      	pop	{r4, r5, r6, r7, pc}

10009410 <_Z15ScreenSegmATextP5sSegmPKvS2_tS2_i>:
//   font = pointer to 1-bit font of 256 characters of width 8 (total width of image 2048 pixels)
//   fontheight = font height
//   pal = pointer to palette of 16 colors
//   wb = pitch - number of bytes between text lines
void ScreenSegmAText(sSegm* segm, const void* data, const void* font, u16 fontheight, const void* pal, int wb)
{
10009410:	b510      	push	{r4, lr}
	segm->form = GF_COLOR;
10009412:	2400      	movs	r4, #0
10009414:	7404      	strb	r4, [r0, #16]
10009416:	f3bf 8f5f 	dmb	sy
	__dmb();
	segm->data = data;
	segm->par = (u32)font;
1000941a:	6142      	str	r2, [r0, #20]
	segm->par2 = (u32)pal;
	segm->par3 = fontheight;
1000941c:	8243      	strh	r3, [r0, #18]
	segm->par2 = (u32)pal;
1000941e:	9a02      	ldr	r2, [sp, #8]
	segm->wb = wb;
10009420:	9b03      	ldr	r3, [sp, #12]
	segm->data = data;
10009422:	60c1      	str	r1, [r0, #12]
	segm->par2 = (u32)pal;
10009424:	6182      	str	r2, [r0, #24]
	segm->wb = wb;
10009426:	8043      	strh	r3, [r0, #2]
10009428:	f3bf 8f5f 	dmb	sy
	__dmb();
	segm->form = GF_ATEXT;
1000942c:	230b      	movs	r3, #11
1000942e:	7403      	strb	r3, [r0, #16]
10009430:	f3bf 8f5f 	dmb	sy
	__dmb();
}
10009434:	bd10      	pop	{r4, pc}
10009436:	46c0      	nop			; (mov r8, r8)

10009438 <_Z15ScreenSegmTile2P5sSegmPKvS2_iiii>:
//   w = tile width (must be multiple of 4)
//   h = tile height
//   tilewb = tile width bytes (usually tile width * number of tiles)
//   wb = pitch - number of bytes between tile map rows
void ScreenSegmTile2(sSegm* segm, const void* data, const void* tiles, int w, int h, int tilewb, int wb)
{
10009438:	b570      	push	{r4, r5, r6, lr}
1000943a:	0004      	movs	r4, r0
1000943c:	0008      	movs	r0, r1
1000943e:	0019      	movs	r1, r3
	segm->form = GF_COLOR;
10009440:	2300      	movs	r3, #0
{
10009442:	9d04      	ldr	r5, [sp, #16]
	segm->form = GF_COLOR;
10009444:	7423      	strb	r3, [r4, #16]
10009446:	f3bf 8f5f 	dmb	sy
	__dmb();
	segm->data = data;
	segm->par = (u32)tiles;
	segm->par2 = (u32)h + ((u32)(u16)tilewb << 16);
1000944a:	9b05      	ldr	r3, [sp, #20]
	segm->data = data;
1000944c:	60e0      	str	r0, [r4, #12]
	segm->par2 = (u32)h + ((u32)(u16)tilewb << 16);
1000944e:	041b      	lsls	r3, r3, #16
10009450:	195b      	adds	r3, r3, r5
	segm->par3 = (u16)w;
	segm->wb = wb;
	segm->wrapx = (segm->width+w-1)/w*w;
10009452:	8820      	ldrh	r0, [r4, #0]
	segm->par2 = (u32)h + ((u32)(u16)tilewb << 16);
10009454:	61a3      	str	r3, [r4, #24]
	segm->wb = wb;
10009456:	9b06      	ldr	r3, [sp, #24]
	segm->par3 = (u16)w;
10009458:	b28e      	uxth	r6, r1
	segm->wrapx = (segm->width+w-1)/w*w;
1000945a:	1840      	adds	r0, r0, r1
	segm->par = (u32)tiles;
1000945c:	6162      	str	r2, [r4, #20]
	segm->wb = wb;
1000945e:	8063      	strh	r3, [r4, #2]
	segm->par3 = (u16)w;
10009460:	8266      	strh	r6, [r4, #18]
	segm->wrapx = (segm->width+w-1)/w*w;
10009462:	3801      	subs	r0, #1
10009464:	f7f6 ff5a 	bl	1000031c <__wrap___aeabi_idiv>
10009468:	4370      	muls	r0, r6
1000946a:	8120      	strh	r0, [r4, #8]
	segm->wrapy = (segm->wrapy+h-1)/h*h;
1000946c:	8960      	ldrh	r0, [r4, #10]
1000946e:	0029      	movs	r1, r5
10009470:	1940      	adds	r0, r0, r5
10009472:	3801      	subs	r0, #1
10009474:	f7f6 ff52 	bl	1000031c <__wrap___aeabi_idiv>
10009478:	4345      	muls	r5, r0
1000947a:	8165      	strh	r5, [r4, #10]
1000947c:	f3bf 8f5f 	dmb	sy
	__dmb();
	segm->form = GF_TILE2;
10009480:	2303      	movs	r3, #3
10009482:	7423      	strb	r3, [r4, #16]
10009484:	f3bf 8f5f 	dmb	sy
	__dmb();
}
10009488:	bd70      	pop	{r4, r5, r6, pc}
1000948a:	46c0      	nop			; (mov r8, r8)

1000948c <_Z6DecNumPcl>:
	return n;
}

// decode signed number into ASCIIZ text buffer (returns number of digits)
int DecNum(char* buf, s32 num)
{
1000948c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000948e:	46ce      	mov	lr, r9
10009490:	4647      	mov	r7, r8
10009492:	b580      	push	{r7, lr}
10009494:	4681      	mov	r9, r0
10009496:	000c      	movs	r4, r1
10009498:	b085      	sub	sp, #20
	if (num >= 0) return DecUNum(buf, num);
1000949a:	2900      	cmp	r1, #0
1000949c:	db21      	blt.n	100094e2 <_Z6DecNumPcl+0x56>
	*d = 0;
1000949e:	2200      	movs	r2, #0
	char* d = &b[10];
100094a0:	260e      	movs	r6, #14
	int n = 0;
100094a2:	2500      	movs	r5, #0
	*d = 0;
100094a4:	ab01      	add	r3, sp, #4
100094a6:	729a      	strb	r2, [r3, #10]
	char* d = &b[10];
100094a8:	446e      	add	r6, sp
		k = num / 10;
100094aa:	210a      	movs	r1, #10
100094ac:	0020      	movs	r0, r4
100094ae:	f7f6 ff61 	bl	10000374 <__wrap___aeabi_uidiv>
100094b2:	0027      	movs	r7, r4
		*d = (char)(num + '0');
100094b4:	210a      	movs	r1, #10
		k = num / 10;
100094b6:	0004      	movs	r4, r0
		*d = (char)(num + '0');
100094b8:	0038      	movs	r0, r7
100094ba:	f7f6 ff5b 	bl	10000374 <__wrap___aeabi_uidiv>
		d--;
100094be:	3e01      	subs	r6, #1
		*d = (char)(num + '0');
100094c0:	3130      	adds	r1, #48	; 0x30
100094c2:	002a      	movs	r2, r5
100094c4:	7031      	strb	r1, [r6, #0]
		n++;
100094c6:	3501      	adds	r5, #1
	} while (num != 0);
100094c8:	2f09      	cmp	r7, #9
100094ca:	d8ee      	bhi.n	100094aa <_Z6DecNumPcl+0x1e>
	memcpy(buf, d, n+1);
100094cc:	0031      	movs	r1, r6
100094ce:	4648      	mov	r0, r9
100094d0:	3202      	adds	r2, #2
100094d2:	f7f7 fe2f 	bl	10001134 <__wrap___aeabi_memcpy>

	num = -num;
	*buf++ = '-';
	return DecUNum(buf, num)+1;
}
100094d6:	0028      	movs	r0, r5
100094d8:	b005      	add	sp, #20
100094da:	bcc0      	pop	{r6, r7}
100094dc:	46b9      	mov	r9, r7
100094de:	46b0      	mov	r8, r6
100094e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*buf++ = '-';
100094e2:	2301      	movs	r3, #1
100094e4:	444b      	add	r3, r9
100094e6:	4698      	mov	r8, r3
100094e8:	232d      	movs	r3, #45	; 0x2d
	*d = 0;
100094ea:	2200      	movs	r2, #0
	*buf++ = '-';
100094ec:	7003      	strb	r3, [r0, #0]
	*d = 0;
100094ee:	ab01      	add	r3, sp, #4
100094f0:	729a      	strb	r2, [r3, #10]
	char* d = &b[10];
100094f2:	230e      	movs	r3, #14
100094f4:	446b      	add	r3, sp
100094f6:	4699      	mov	r9, r3
100094f8:	001e      	movs	r6, r3
	num = -num;
100094fa:	424c      	negs	r4, r1
	int n = 0;
100094fc:	464b      	mov	r3, r9
		k = num / 10;
100094fe:	210a      	movs	r1, #10
10009500:	0020      	movs	r0, r4
10009502:	1b9d      	subs	r5, r3, r6
10009504:	0027      	movs	r7, r4
10009506:	f7f6 ff35 	bl	10000374 <__wrap___aeabi_uidiv>
		*d = (char)(num + '0');
1000950a:	210a      	movs	r1, #10
		k = num / 10;
1000950c:	0004      	movs	r4, r0
		*d = (char)(num + '0');
1000950e:	0038      	movs	r0, r7
10009510:	f7f6 ff30 	bl	10000374 <__wrap___aeabi_uidiv>
		d--;
10009514:	3e01      	subs	r6, #1
		*d = (char)(num + '0');
10009516:	3130      	adds	r1, #48	; 0x30
10009518:	7031      	strb	r1, [r6, #0]
	} while (num != 0);
1000951a:	2f09      	cmp	r7, #9
1000951c:	d8ee      	bhi.n	100094fc <_Z6DecNumPcl+0x70>
	memcpy(buf, d, n+1);
1000951e:	3502      	adds	r5, #2
10009520:	002a      	movs	r2, r5
10009522:	0031      	movs	r1, r6
10009524:	4640      	mov	r0, r8
10009526:	f7f7 fe05 	bl	10001134 <__wrap___aeabi_memcpy>
	return DecUNum(buf, num)+1;
1000952a:	e7d4      	b.n	100094d6 <_Z6DecNumPcl+0x4a>

1000952c <_Z9VgaCfgDefP7sVgaCfg>:
};

// initialize default VGA configuration
void VgaCfgDef(sVgaCfg* cfg)
{
	cfg->width = 640;		// width in pixels
1000952c:	4b06      	ldr	r3, [pc, #24]	; (10009548 <_Z9VgaCfgDefP7sVgaCfg+0x1c>)
	cfg->height = 480;		// height in lines
	cfg->wfull = 0;			// width of full screen, corresponding to 'hfull' time (0=use 'width' parameter)
	cfg->video = &VideoVGA;		// used video timings
1000952e:	4a07      	ldr	r2, [pc, #28]	; (1000954c <_Z9VgaCfgDefP7sVgaCfg+0x20>)
	cfg->width = 640;		// width in pixels
10009530:	6003      	str	r3, [r0, #0]
	cfg->wfull = 0;			// width of full screen, corresponding to 'hfull' time (0=use 'width' parameter)
10009532:	2300      	movs	r3, #0
	cfg->video = &VideoVGA;		// used video timings
10009534:	6082      	str	r2, [r0, #8]
	cfg->freq = 120000;		// required minimal system frequency in kHz (real frequency can be higher)
10009536:	4a06      	ldr	r2, [pc, #24]	; (10009550 <_Z9VgaCfgDefP7sVgaCfg+0x24>)
	cfg->wfull = 0;			// width of full screen, corresponding to 'hfull' time (0=use 'width' parameter)
10009538:	8083      	strh	r3, [r0, #4]
	cfg->freq = 120000;		// required minimal system frequency in kHz (real frequency can be higher)
1000953a:	60c2      	str	r2, [r0, #12]
1000953c:	4a05      	ldr	r2, [pc, #20]	; (10009554 <_Z9VgaCfgDefP7sVgaCfg+0x28>)
	cfg->fmax = 270000;		// maximal system frequency in kHz (limit resolution if needed)
	cfg->mode[0] = LAYERMODE_BASE;	// modes of overlapped layers 0..3 LAYERMODE_* (LAYERMODE_BASE = layer is off)
1000953e:	6143      	str	r3, [r0, #20]
	cfg->freq = 120000;		// required minimal system frequency in kHz (real frequency can be higher)
10009540:	6102      	str	r2, [r0, #16]
	cfg->mode[1] = LAYERMODE_BASE;	// - mode of layer 0 is ignored (always use LAYERMODE_BASE)
	cfg->mode[2] = LAYERMODE_BASE;	// - all overlapped layers must use same layer program
	cfg->mode[3] = LAYERMODE_BASE;
	cfg->dbly = False;		// double in Y direction
10009542:	8303      	strh	r3, [r0, #24]
	cfg->lockfreq = False;		// lock required frequency, do not change it
}
10009544:	4770      	bx	lr
10009546:	46c0      	nop			; (mov r8, r8)
10009548:	01e00280 	.word	0x01e00280
1000954c:	1018837c 	.word	0x1018837c
10009550:	0001d4c0 	.word	0x0001d4c0
10009554:	00041eb0 	.word	0x00041eb0

10009558 <_Z6VgaCfgPK7sVgaCfgP6sVmode>:

// calculate videomode setup
//   cfg ... required configuration
//   vmode ... destination videomode setup for driver
void VgaCfg(const sVgaCfg* cfg, sVmode* vmode)
{
10009558:	b5f0      	push	{r4, r5, r6, r7, lr}
1000955a:	46de      	mov	lr, fp
1000955c:	4657      	mov	r7, sl
1000955e:	464e      	mov	r6, r9
10009560:	4645      	mov	r5, r8
	int i;

	// prepare layer program, copy layer modes
	u8 prog = LAYERMODE_BASE;
	vmode->mode[0] = prog;
10009562:	2300      	movs	r3, #0
{
10009564:	b5e0      	push	{r5, r6, r7, lr}
	vmode->mode[0] = prog;
10009566:	764b      	strb	r3, [r1, #25]
	for (i = 1; i < LAYERS; i++)
	{
		if (cfg->mode[i] != LAYERMODE_BASE) prog = LayerMode[cfg->mode[i]].prog;
10009568:	7d42      	ldrb	r2, [r0, #21]
{
1000956a:	4682      	mov	sl, r0
1000956c:	468b      	mov	fp, r1
1000956e:	b091      	sub	sp, #68	; 0x44
		if (cfg->mode[i] != LAYERMODE_BASE) prog = LayerMode[cfg->mode[i]].prog;
10009570:	2a00      	cmp	r2, #0
10009572:	d100      	bne.n	10009576 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x1e>
10009574:	e290      	b.n	10009a98 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x540>
10009576:	4bdb      	ldr	r3, [pc, #876]	; (100098e4 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x38c>)
10009578:	0051      	lsls	r1, r2, #1
1000957a:	1889      	adds	r1, r1, r2
1000957c:	5c59      	ldrb	r1, [r3, r1]
		vmode->mode[i] = cfg->mode[i];
1000957e:	4658      	mov	r0, fp
10009580:	7682      	strb	r2, [r0, #26]
		if (cfg->mode[i] != LAYERMODE_BASE) prog = LayerMode[cfg->mode[i]].prog;
10009582:	4652      	mov	r2, sl
10009584:	7d92      	ldrb	r2, [r2, #22]
10009586:	2a00      	cmp	r2, #0
10009588:	d002      	beq.n	10009590 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x38>
1000958a:	0051      	lsls	r1, r2, #1
1000958c:	1889      	adds	r1, r1, r2
1000958e:	5c59      	ldrb	r1, [r3, r1]
		vmode->mode[i] = cfg->mode[i];
10009590:	4658      	mov	r0, fp
10009592:	76c2      	strb	r2, [r0, #27]
		if (cfg->mode[i] != LAYERMODE_BASE) prog = LayerMode[cfg->mode[i]].prog;
10009594:	4652      	mov	r2, sl
10009596:	7dd2      	ldrb	r2, [r2, #23]
10009598:	2a00      	cmp	r2, #0
1000959a:	d002      	beq.n	100095a2 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x4a>
1000959c:	0051      	lsls	r1, r2, #1
1000959e:	1889      	adds	r1, r1, r2
100095a0:	5c59      	ldrb	r1, [r3, r1]
		vmode->mode[i] = cfg->mode[i];
100095a2:	4658      	mov	r0, fp
100095a4:	7702      	strb	r2, [r0, #28]
	}
	vmode->prog = prog;

	// prepare minimal and maximal clocks per pixel
	int mincpp = LayerMode[LAYERMODE_BASE].mincpp;
100095a6:	785a      	ldrb	r2, [r3, #1]
	vmode->prog = prog;
100095a8:	7601      	strb	r1, [r0, #24]
	int mincpp = LayerMode[LAYERMODE_BASE].mincpp;
100095aa:	4694      	mov	ip, r2
	int maxcpp = LayerMode[LAYERMODE_BASE].maxcpp;
	int cpp;
	for (i = 1; i < LAYERS; i++)
	{
		cpp = LayerMode[cfg->mode[i]].mincpp;
100095ac:	4652      	mov	r2, sl
100095ae:	7d54      	ldrb	r4, [r2, #21]
100095b0:	7d96      	ldrb	r6, [r2, #22]
100095b2:	0060      	lsls	r0, r4, #1
100095b4:	0072      	lsls	r2, r6, #1
100095b6:	1991      	adds	r1, r2, r6
100095b8:	1907      	adds	r7, r0, r4
100095ba:	1859      	adds	r1, r3, r1
100095bc:	19df      	adds	r7, r3, r7
100095be:	787f      	ldrb	r7, [r7, #1]
100095c0:	7849      	ldrb	r1, [r1, #1]
	int maxcpp = LayerMode[LAYERMODE_BASE].maxcpp;
100095c2:	789d      	ldrb	r5, [r3, #2]
		if (cpp > mincpp) mincpp = cpp;
100095c4:	42b9      	cmp	r1, r7
100095c6:	da00      	bge.n	100095ca <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x72>
100095c8:	0039      	movs	r1, r7
100095ca:	4561      	cmp	r1, ip
100095cc:	da00      	bge.n	100095d0 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x78>
100095ce:	4661      	mov	r1, ip
		cpp = LayerMode[cfg->mode[i]].maxcpp;
100095d0:	1992      	adds	r2, r2, r6
100095d2:	1900      	adds	r0, r0, r4
100095d4:	189a      	adds	r2, r3, r2
100095d6:	1818      	adds	r0, r3, r0
100095d8:	7880      	ldrb	r0, [r0, #2]
100095da:	7892      	ldrb	r2, [r2, #2]
100095dc:	4282      	cmp	r2, r0
100095de:	dd00      	ble.n	100095e2 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x8a>
100095e0:	0002      	movs	r2, r0
100095e2:	42aa      	cmp	r2, r5
100095e4:	dd00      	ble.n	100095e8 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x90>
100095e6:	002a      	movs	r2, r5
		cpp = LayerMode[cfg->mode[i]].mincpp;
100095e8:	4650      	mov	r0, sl
100095ea:	7dc4      	ldrb	r4, [r0, #23]
100095ec:	0060      	lsls	r0, r4, #1
100095ee:	1905      	adds	r5, r0, r4
100095f0:	195d      	adds	r5, r3, r5
100095f2:	786e      	ldrb	r6, [r5, #1]
100095f4:	428e      	cmp	r6, r1
100095f6:	da00      	bge.n	100095fa <_Z6VgaCfgPK7sVgaCfgP6sVmode+0xa2>
100095f8:	000e      	movs	r6, r1
		cpp = LayerMode[cfg->mode[i]].maxcpp;
100095fa:	1900      	adds	r0, r0, r4
100095fc:	181b      	adds	r3, r3, r0
100095fe:	789c      	ldrb	r4, [r3, #2]
10009600:	4294      	cmp	r4, r2
10009602:	dd00      	ble.n	10009606 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0xae>
10009604:	0014      	movs	r4, r2
		if (cpp < maxcpp) maxcpp = cpp;
	}

	// prepare full width
	int w = cfg->width; // required width
10009606:	4653      	mov	r3, sl
	int wfull = cfg->wfull;	// full width
10009608:	4652      	mov	r2, sl
	int w = cfg->width; // required width
1000960a:	881b      	ldrh	r3, [r3, #0]
1000960c:	9306      	str	r3, [sp, #24]
	int wfull = cfg->wfull;	// full width
1000960e:	8897      	ldrh	r7, [r2, #4]
	if (wfull == 0) wfull = w; // use required width as 100% width
10009610:	2f00      	cmp	r7, #0
10009612:	d100      	bne.n	10009616 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0xbe>
10009614:	001f      	movs	r7, r3

	// prepare maximal active time and maximal pixels
	const sVideo* v = cfg->video;
10009616:	4653      	mov	r3, sl
10009618:	689b      	ldr	r3, [r3, #8]
1000961a:	4699      	mov	r9, r3
	float hmax = v->htot - v->hfront - v->hsync - v->hback;
1000961c:	6859      	ldr	r1, [r3, #4]
1000961e:	6818      	ldr	r0, [r3, #0]
10009620:	f7f7 fcc7 	bl	10000fb2 <__wrap___aeabi_fsub>
10009624:	464b      	mov	r3, r9
10009626:	6899      	ldr	r1, [r3, #8]
10009628:	f7f7 fcc3 	bl	10000fb2 <__wrap___aeabi_fsub>
1000962c:	464b      	mov	r3, r9
1000962e:	68d9      	ldr	r1, [r3, #12]
10009630:	f7f7 fcbf 	bl	10000fb2 <__wrap___aeabi_fsub>
	float hfull = v->hfull;
10009634:	464b      	mov	r3, r9
10009636:	691b      	ldr	r3, [r3, #16]
	float hmax = v->htot - v->hfront - v->hsync - v->hback;
10009638:	9007      	str	r0, [sp, #28]
	int wmax = (int)(wfull*hmax/hfull + 0.001f);
1000963a:	0038      	movs	r0, r7
	float hfull = v->hfull;
1000963c:	4698      	mov	r8, r3
	int wmax = (int)(wfull*hmax/hfull + 0.001f);
1000963e:	f7f7 fccd 	bl	10000fdc <__wrap___aeabi_i2f>

	// calculate cpp from required frequency (rounded down), limit minimal cpp
	u32 freq = cfg->freq;
10009642:	4653      	mov	r3, sl
10009644:	68dd      	ldr	r5, [r3, #12]
	int wmax = (int)(wfull*hmax/hfull + 0.001f);
10009646:	9004      	str	r0, [sp, #16]
	u32 freq = cfg->freq;
10009648:	950e      	str	r5, [sp, #56]	; 0x38
	cpp = (int)(freq*hfull/1000/wfull + 0.1f);
	if (cpp < mincpp) cpp = mincpp;

	// recalculate frequency if not locked
	if (!cfg->lockfreq)
1000964a:	7e5b      	ldrb	r3, [r3, #25]
1000964c:	2b00      	cmp	r3, #0
1000964e:	d130      	bne.n	100096b2 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x15a>
	cpp = (int)(freq*hfull/1000/wfull + 0.1f);
10009650:	0028      	movs	r0, r5
10009652:	f7f7 fcbd 	bl	10000fd0 <__wrap___aeabi_ui2f>
10009656:	4641      	mov	r1, r8
10009658:	f7f7 fcb4 	bl	10000fc4 <__wrap___aeabi_fmul>
1000965c:	49a2      	ldr	r1, [pc, #648]	; (100098e8 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x390>)
1000965e:	f7f7 fcae 	bl	10000fbe <__wrap___aeabi_fdiv>
10009662:	9904      	ldr	r1, [sp, #16]
10009664:	f7f7 fcab 	bl	10000fbe <__wrap___aeabi_fdiv>
10009668:	49a0      	ldr	r1, [pc, #640]	; (100098ec <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x394>)
1000966a:	f7f7 fca5 	bl	10000fb8 <__wrap___aeabi_fadd>
1000966e:	f7f7 fcd7 	bl	10001020 <__wrap___aeabi_f2iz>
	{
		int freq2 = (int)(cpp*wfull*1000/hfull + 0.5f) + 200;
10009672:	4286      	cmp	r6, r0
10009674:	da00      	bge.n	10009678 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x120>
10009676:	e240      	b.n	10009afa <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x5a2>
10009678:	437e      	muls	r6, r7
1000967a:	0170      	lsls	r0, r6, #5
1000967c:	1b80      	subs	r0, r0, r6
1000967e:	0080      	lsls	r0, r0, #2
10009680:	1980      	adds	r0, r0, r6
10009682:	00c0      	lsls	r0, r0, #3
10009684:	f7f7 fcaa 	bl	10000fdc <__wrap___aeabi_i2f>
10009688:	4641      	mov	r1, r8
1000968a:	f7f7 fc98 	bl	10000fbe <__wrap___aeabi_fdiv>
1000968e:	21fc      	movs	r1, #252	; 0xfc
10009690:	0589      	lsls	r1, r1, #22
10009692:	f7f7 fc91 	bl	10000fb8 <__wrap___aeabi_fadd>
10009696:	f7f7 fcc3 	bl	10001020 <__wrap___aeabi_f2iz>
1000969a:	30c8      	adds	r0, #200	; 0xc8
		if (freq2 < freq)
1000969c:	4285      	cmp	r5, r0
1000969e:	d900      	bls.n	100096a2 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x14a>
100096a0:	e215      	b.n	10009ace <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x576>
		{
			cpp++;
			freq2 = (int)(cpp*wfull*1000/hfull + 0.5f) + 200;
		}
		if (freq2 >= freq) freq = freq2;
100096a2:	0005      	movs	r5, r0
100096a4:	900e      	str	r0, [sp, #56]	; 0x38
		if (freq > cfg->fmax) freq = cfg->fmax;
100096a6:	4653      	mov	r3, sl
100096a8:	691b      	ldr	r3, [r3, #16]
100096aa:	42ab      	cmp	r3, r5
100096ac:	d201      	bcs.n	100096b2 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x15a>
100096ae:	001d      	movs	r5, r3
100096b0:	930e      	str	r3, [sp, #56]	; 0x38

	// find sysclock setup (use set_sys_clock_pll to set sysclock)
	u32 vco;
	u16 fbdiv;
	u8 pd1, pd2;
	FindSysClock(freq, &freq, &vco, &fbdiv, &pd1, &pd2);
100096b2:	ab0a      	add	r3, sp, #40	; 0x28
100096b4:	469c      	mov	ip, r3
100096b6:	260e      	movs	r6, #14
100096b8:	230d      	movs	r3, #13
100096ba:	4466      	add	r6, ip
100096bc:	4463      	add	r3, ip
100096be:	af0d      	add	r7, sp, #52	; 0x34
100096c0:	a90e      	add	r1, sp, #56	; 0x38
100096c2:	0028      	movs	r0, r5
100096c4:	9301      	str	r3, [sp, #4]
100096c6:	aa0f      	add	r2, sp, #60	; 0x3c
100096c8:	0033      	movs	r3, r6
100096ca:	9700      	str	r7, [sp, #0]
100096cc:	f000 fa3c 	bl	10009b48 <_Z12FindSysClockmPmS_PtPhS1_>

	vmode->freq = freq;
100096d0:	465b      	mov	r3, fp
100096d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
	vmode->fbdiv = fbdiv;
	vmode->pd1 = pd1;
	vmode->pd2 = pd2;

	// calculate divisor
	cpp = (int)(freq*hfull/1000/wfull + 0.2f);
100096d4:	980e      	ldr	r0, [sp, #56]	; 0x38
	vmode->freq = freq;
100096d6:	609a      	str	r2, [r3, #8]
	vmode->vco = vco;
100096d8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
100096da:	60da      	str	r2, [r3, #12]
	vmode->fbdiv = fbdiv;
100096dc:	465a      	mov	r2, fp
100096de:	8833      	ldrh	r3, [r6, #0]
100096e0:	8213      	strh	r3, [r2, #16]
	vmode->pd1 = pd1;
100096e2:	783b      	ldrb	r3, [r7, #0]
100096e4:	7493      	strb	r3, [r2, #18]
	vmode->pd2 = pd2;
100096e6:	ab0a      	add	r3, sp, #40	; 0x28
100096e8:	7b5b      	ldrb	r3, [r3, #13]
100096ea:	74d3      	strb	r3, [r2, #19]
	cpp = (int)(freq*hfull/1000/wfull + 0.2f);
100096ec:	f7f7 fc70 	bl	10000fd0 <__wrap___aeabi_ui2f>
100096f0:	4641      	mov	r1, r8
100096f2:	9003      	str	r0, [sp, #12]
100096f4:	f7f7 fc66 	bl	10000fc4 <__wrap___aeabi_fmul>
100096f8:	497b      	ldr	r1, [pc, #492]	; (100098e8 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x390>)
100096fa:	f7f7 fc60 	bl	10000fbe <__wrap___aeabi_fdiv>
100096fe:	9904      	ldr	r1, [sp, #16]
10009700:	9005      	str	r0, [sp, #20]
10009702:	f7f7 fc5c 	bl	10000fbe <__wrap___aeabi_fdiv>
10009706:	497a      	ldr	r1, [pc, #488]	; (100098f0 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x398>)
10009708:	4680      	mov	r8, r0
1000970a:	f7f7 fc55 	bl	10000fb8 <__wrap___aeabi_fadd>
1000970e:	f7f7 fc87 	bl	10001020 <__wrap___aeabi_f2iz>
10009712:	0005      	movs	r5, r0
	int div = 1;
	while (cpp > maxcpp)
10009714:	4284      	cmp	r4, r0
10009716:	db00      	blt.n	1000971a <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x1c2>
10009718:	e20c      	b.n	10009b34 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x5dc>
	int div = 1;
1000971a:	2701      	movs	r7, #1
1000971c:	4645      	mov	r5, r8
	{
		div++;
1000971e:	3701      	adds	r7, #1
		cpp = (int)(freq*hfull/1000/wfull/div + 0.2f);
10009720:	0038      	movs	r0, r7
10009722:	f7f7 fc5b 	bl	10000fdc <__wrap___aeabi_i2f>
10009726:	1c01      	adds	r1, r0, #0
10009728:	1c06      	adds	r6, r0, #0
1000972a:	1c28      	adds	r0, r5, #0
1000972c:	f7f7 fc47 	bl	10000fbe <__wrap___aeabi_fdiv>
10009730:	496f      	ldr	r1, [pc, #444]	; (100098f0 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x398>)
10009732:	f7f7 fc41 	bl	10000fb8 <__wrap___aeabi_fadd>
10009736:	f7f7 fc73 	bl	10001020 <__wrap___aeabi_f2iz>
	while (cpp > maxcpp)
1000973a:	4284      	cmp	r4, r0
1000973c:	dbef      	blt.n	1000971e <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x1c6>
	}

	vmode->div = div;
1000973e:	0005      	movs	r5, r0
	vmode->vback2 = v->vback2 - dh/2; // V back porch (after VSYNC, before image) on subframe 2
	vmode->vfront2 = v->vfront2 - ((dh < 0) ? (dh-1)/2 : (dh+1)/2); // V front porch (after image, before VSYNC) on subframe 2
	vmode->vpre2 = v->vpre2; // V sync pre half-pulses on subframe 2

	// frequency
	vmode->hfreq = vmode->freq * 1000.0f / vmode->div / vmode->htot;
10009740:	0438      	lsls	r0, r7, #16
10009742:	0c00      	lsrs	r0, r0, #16
10009744:	f7f7 fc4a 	bl	10000fdc <__wrap___aeabi_i2f>
	vmode->div = div;
10009748:	b2bc      	uxth	r4, r7
	vmode->hfreq = vmode->freq * 1000.0f / vmode->div / vmode->htot;
1000974a:	9008      	str	r0, [sp, #32]
	vmode->div = div;
1000974c:	465b      	mov	r3, fp
	wfull = (int)(freq*hfull/1000/cpp/div + 0.4f);
1000974e:	0028      	movs	r0, r5
	vmode->div = div;
10009750:	829c      	strh	r4, [r3, #20]
	vmode->cpp = cpp;
10009752:	82dd      	strh	r5, [r3, #22]
	wfull = (int)(freq*hfull/1000/cpp/div + 0.4f);
10009754:	f7f7 fc42 	bl	10000fdc <__wrap___aeabi_i2f>
	wmax = (int)(freq*hmax/1000/cpp/div + 0.4f);
10009758:	9907      	ldr	r1, [sp, #28]
	wfull = (int)(freq*hfull/1000/cpp/div + 0.4f);
1000975a:	1c04      	adds	r4, r0, #0
	wmax = (int)(freq*hmax/1000/cpp/div + 0.4f);
1000975c:	9803      	ldr	r0, [sp, #12]
1000975e:	f7f7 fc31 	bl	10000fc4 <__wrap___aeabi_fmul>
10009762:	4961      	ldr	r1, [pc, #388]	; (100098e8 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x390>)
10009764:	f7f7 fc2b 	bl	10000fbe <__wrap___aeabi_fdiv>
10009768:	1c21      	adds	r1, r4, #0
1000976a:	f7f7 fc28 	bl	10000fbe <__wrap___aeabi_fdiv>
1000976e:	1c31      	adds	r1, r6, #0
10009770:	f7f7 fc25 	bl	10000fbe <__wrap___aeabi_fdiv>
10009774:	495f      	ldr	r1, [pc, #380]	; (100098f4 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x39c>)
10009776:	f7f7 fc1f 	bl	10000fb8 <__wrap___aeabi_fadd>
1000977a:	f7f7 fc51 	bl	10001020 <__wrap___aeabi_f2iz>
1000977e:	0007      	movs	r7, r0
	if (w > wmax) w = wmax;
10009780:	9806      	ldr	r0, [sp, #24]
10009782:	42b8      	cmp	r0, r7
10009784:	dd00      	ble.n	10009788 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x230>
10009786:	0038      	movs	r0, r7
	w = ALIGN4(w);
10009788:	2303      	movs	r3, #3
1000978a:	4398      	bics	r0, r3
	vmode->width = w; // active width
1000978c:	465b      	mov	r3, fp
	wfull = (int)(freq*hfull/1000/cpp/div + 0.4f);
1000978e:	1c21      	adds	r1, r4, #0
	vmode->width = w; // active width
10009790:	8018      	strh	r0, [r3, #0]
	w = ALIGN4(w);
10009792:	4680      	mov	r8, r0
	wfull = (int)(freq*hfull/1000/cpp/div + 0.4f);
10009794:	9805      	ldr	r0, [sp, #20]
10009796:	f7f7 fc12 	bl	10000fbe <__wrap___aeabi_fdiv>
1000979a:	1c31      	adds	r1, r6, #0
1000979c:	f7f7 fc0f 	bl	10000fbe <__wrap___aeabi_fdiv>
100097a0:	4954      	ldr	r1, [pc, #336]	; (100098f4 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x39c>)
100097a2:	f7f7 fc09 	bl	10000fb8 <__wrap___aeabi_fadd>
100097a6:	f7f7 fc3b 	bl	10001020 <__wrap___aeabi_f2iz>
	vmode->wfull = wfull; // width of full screen (image should be full visible)
100097aa:	465b      	mov	r3, fp
100097ac:	8098      	strh	r0, [r3, #4]
	vmode->wmax = wmax; // maximal width (can be > wfull)
100097ae:	80df      	strh	r7, [r3, #6]
	int hwidth = w*cpp; // active width in state machine clocks
100097b0:	4643      	mov	r3, r8
100097b2:	435d      	muls	r5, r3
	int htot = (int)(freq*v->htot/1000/div + 0.5f);  // total state machine clocks per line
100097b4:	464b      	mov	r3, r9
100097b6:	9f03      	ldr	r7, [sp, #12]
100097b8:	6819      	ldr	r1, [r3, #0]
100097ba:	1c38      	adds	r0, r7, #0
100097bc:	f7f7 fc02 	bl	10000fc4 <__wrap___aeabi_fmul>
100097c0:	4949      	ldr	r1, [pc, #292]	; (100098e8 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x390>)
100097c2:	f7f7 fbfc 	bl	10000fbe <__wrap___aeabi_fdiv>
100097c6:	1c31      	adds	r1, r6, #0
100097c8:	f7f7 fbf9 	bl	10000fbe <__wrap___aeabi_fdiv>
100097cc:	21fc      	movs	r1, #252	; 0xfc
100097ce:	0589      	lsls	r1, r1, #22
100097d0:	f7f7 fbf2 	bl	10000fb8 <__wrap___aeabi_fadd>
100097d4:	f7f7 fc24 	bl	10001020 <__wrap___aeabi_f2iz>
	int hsync = (int)(freq*v->hsync/1000/div + 0.5f); // H sync pulse in state machine clocks (min. 4)
100097d8:	464b      	mov	r3, r9
	int htot = (int)(freq*v->htot/1000/div + 0.5f);  // total state machine clocks per line
100097da:	0004      	movs	r4, r0
	int hsync = (int)(freq*v->hsync/1000/div + 0.5f); // H sync pulse in state machine clocks (min. 4)
100097dc:	6899      	ldr	r1, [r3, #8]
100097de:	1c38      	adds	r0, r7, #0
100097e0:	f7f7 fbf0 	bl	10000fc4 <__wrap___aeabi_fmul>
100097e4:	4940      	ldr	r1, [pc, #256]	; (100098e8 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x390>)
100097e6:	f7f7 fbea 	bl	10000fbe <__wrap___aeabi_fdiv>
100097ea:	1c31      	adds	r1, r6, #0
100097ec:	f7f7 fbe7 	bl	10000fbe <__wrap___aeabi_fdiv>
100097f0:	21fc      	movs	r1, #252	; 0xfc
100097f2:	0589      	lsls	r1, r1, #22
100097f4:	f7f7 fbe0 	bl	10000fb8 <__wrap___aeabi_fadd>
100097f8:	f7f7 fc12 	bl	10001020 <__wrap___aeabi_f2iz>
100097fc:	0007      	movs	r7, r0
	if (hsync < 4)
100097fe:	2803      	cmp	r0, #3
10009800:	dc00      	bgt.n	10009804 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x2ac>
10009802:	e143      	b.n	10009a8c <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x534>
	vmode->hsync = (u16)hsync; // H sync pulse in state machine clocks (min. 4)
10009804:	b283      	uxth	r3, r0
10009806:	9304      	str	r3, [sp, #16]
	int hfront = (int)(freq*v->hfront/1000/div + 0.5f); // H front porch in state machine clocks (min. 2)
10009808:	464b      	mov	r3, r9
1000980a:	9803      	ldr	r0, [sp, #12]
1000980c:	6859      	ldr	r1, [r3, #4]
1000980e:	f7f7 fbd9 	bl	10000fc4 <__wrap___aeabi_fmul>
10009812:	4935      	ldr	r1, [pc, #212]	; (100098e8 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x390>)
10009814:	f7f7 fbd3 	bl	10000fbe <__wrap___aeabi_fdiv>
10009818:	1c31      	adds	r1, r6, #0
1000981a:	f7f7 fbd0 	bl	10000fbe <__wrap___aeabi_fdiv>
1000981e:	21fc      	movs	r1, #252	; 0xfc
10009820:	0589      	lsls	r1, r1, #22
10009822:	f7f7 fbc9 	bl	10000fb8 <__wrap___aeabi_fadd>
10009826:	f7f7 fbfb 	bl	10001020 <__wrap___aeabi_f2iz>
	int hback = (int)(freq*v->hback/1000/div + 0.5f); // H back porch in state machine clocks (min. 13)
1000982a:	464b      	mov	r3, r9
	int hfront = (int)(freq*v->hfront/1000/div + 0.5f); // H front porch in state machine clocks (min. 2)
1000982c:	4680      	mov	r8, r0
	int hback = (int)(freq*v->hback/1000/div + 0.5f); // H back porch in state machine clocks (min. 13)
1000982e:	68d9      	ldr	r1, [r3, #12]
10009830:	9803      	ldr	r0, [sp, #12]
10009832:	f7f7 fbc7 	bl	10000fc4 <__wrap___aeabi_fmul>
10009836:	492c      	ldr	r1, [pc, #176]	; (100098e8 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x390>)
10009838:	f7f7 fbc1 	bl	10000fbe <__wrap___aeabi_fdiv>
1000983c:	1c31      	adds	r1, r6, #0
1000983e:	f7f7 fbbe 	bl	10000fbe <__wrap___aeabi_fdiv>
10009842:	21fc      	movs	r1, #252	; 0xfc
10009844:	0589      	lsls	r1, r1, #22
10009846:	f7f7 fbb7 	bl	10000fb8 <__wrap___aeabi_fadd>
1000984a:	f7f7 fbe9 	bl	10001020 <__wrap___aeabi_f2iz>
	int d = htot - hfront - hsync - hback - hwidth; // difference
1000984e:	4643      	mov	r3, r8
10009850:	1ae2      	subs	r2, r4, r3
10009852:	1bd2      	subs	r2, r2, r7
10009854:	1a12      	subs	r2, r2, r0
10009856:	1b52      	subs	r2, r2, r5
	hfront += d/2;
10009858:	0fd3      	lsrs	r3, r2, #31
1000985a:	189b      	adds	r3, r3, r2
1000985c:	1059      	asrs	r1, r3, #1
1000985e:	4441      	add	r1, r8
	hback += (d < 0) ? (d-1)/2 : (d+1)/2;
10009860:	2a00      	cmp	r2, #0
10009862:	da00      	bge.n	10009866 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x30e>
10009864:	e161      	b.n	10009b2a <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x5d2>
10009866:	3201      	adds	r2, #1
10009868:	1053      	asrs	r3, r2, #1
1000986a:	181b      	adds	r3, r3, r0
	if (hfront < 4)
1000986c:	2903      	cmp	r1, #3
1000986e:	dc02      	bgt.n	10009876 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x31e>
		hback -= 4 - hfront;
10009870:	18cb      	adds	r3, r1, r3
		hfront = 4;
10009872:	2104      	movs	r1, #4
		hback -= 4 - hfront;
10009874:	3b04      	subs	r3, #4
	if (hback < 13)
10009876:	2b0c      	cmp	r3, #12
10009878:	dc00      	bgt.n	1000987c <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x324>
1000987a:	e100      	b.n	10009a7e <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x526>
	vmode->hback = (u16)hback; // H back porch in state machine clocks (min. 13)
1000987c:	b29a      	uxth	r2, r3
	htot = hfront + hsync + hback + hwidth; // total state machine clocks per line
1000987e:	187f      	adds	r7, r7, r1
10009880:	18fb      	adds	r3, r7, r3
	if (v->inter && ((htot & 1) != 0))
10009882:	4648      	mov	r0, r9
	htot = hfront + hsync + hback + hwidth; // total state machine clocks per line
10009884:	195d      	adds	r5, r3, r5
	if (v->inter && ((htot & 1) != 0))
10009886:	2334      	movs	r3, #52	; 0x34
10009888:	5cc0      	ldrb	r0, [r0, r3]
1000988a:	2800      	cmp	r0, #0
1000988c:	d002      	beq.n	10009894 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x33c>
1000988e:	07eb      	lsls	r3, r5, #31
10009890:	d500      	bpl.n	10009894 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x33c>
10009892:	e119      	b.n	10009ac8 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x570>
	vmode->htot = (u16)htot; // total state machine clocks per line
10009894:	465b      	mov	r3, fp
	vmode->hfront = (u16)hfront; // H front porch in state machine clocks (min. 2)
10009896:	8419      	strh	r1, [r3, #32]
	vmode->hback = (u16)hback; // H back porch in state machine clocks (min. 13)
10009898:	849a      	strh	r2, [r3, #36]	; 0x24
	vmode->hsync = (u16)hsync; // H sync pulse in state machine clocks (min. 4)
1000989a:	9904      	ldr	r1, [sp, #16]
	if (cfg->dbly) h *= 2; // use double lines
1000989c:	4652      	mov	r2, sl
	vmode->htot = (u16)htot; // total state machine clocks per line
1000989e:	83dd      	strh	r5, [r3, #30]
	vmode->hsync = (u16)hsync; // H sync pulse in state machine clocks (min. 4)
100098a0:	8459      	strh	r1, [r3, #34]	; 0x22
	int h = cfg->height; // required height
100098a2:	4653      	mov	r3, sl
	if (cfg->dbly) h *= 2; // use double lines
100098a4:	7e14      	ldrb	r4, [r2, #24]
	int h = cfg->height; // required height
100098a6:	885b      	ldrh	r3, [r3, #2]
	if (cfg->dbly) h *= 2; // use double lines
100098a8:	2c00      	cmp	r4, #0
100098aa:	d025      	beq.n	100098f8 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x3a0>
	vmode->vmax = v->vmax; // maximal height
100098ac:	464a      	mov	r2, r9
100098ae:	8ad1      	ldrh	r1, [r2, #22]
100098b0:	465a      	mov	r2, fp
	if (cfg->dbly) h *= 2; // use double lines
100098b2:	005b      	lsls	r3, r3, #1
	vmode->vmax = v->vmax; // maximal height
100098b4:	85d1      	strh	r1, [r2, #46]	; 0x2e
	if (h > v->vmax) h = v->vmax; // limit height
100098b6:	4299      	cmp	r1, r3
100098b8:	dd00      	ble.n	100098bc <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x364>
100098ba:	e0fe      	b.n	10009aba <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x562>
	if (cfg->dbly) h &= ~1; // must be even number if double lines
100098bc:	2301      	movs	r3, #1
100098be:	4399      	bics	r1, r3
	if (v->inter) // interlaced
100098c0:	2800      	cmp	r0, #0
100098c2:	d100      	bne.n	100098c6 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x36e>
100098c4:	e0f0      	b.n	10009aa8 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x550>
		if (v->odd) // first frame is odd lines
100098c6:	2336      	movs	r3, #54	; 0x36
100098c8:	464a      	mov	r2, r9
100098ca:	5cd3      	ldrb	r3, [r2, r3]
100098cc:	2b00      	cmp	r3, #0
100098ce:	d100      	bne.n	100098d2 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x37a>
100098d0:	e0ee      	b.n	10009ab0 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x558>
			vact1 = h/2;
100098d2:	104a      	asrs	r2, r1, #1
			vact2 = (h+1)/2; // if even lines, even frame will have more lines
100098d4:	0016      	movs	r6, r2
100098d6:	1c4b      	adds	r3, r1, #1
100098d8:	105b      	asrs	r3, r3, #1
	vmode->vact2 = vact2; // active scanlines of 2nd subframe
100098da:	b298      	uxth	r0, r3
	if (cfg->dbly) h /= 2; // return double lines to single lines
100098dc:	2c00      	cmp	r4, #0
100098de:	d016      	beq.n	1000990e <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x3b6>
	vmode->vact2 = vact2; // active scanlines of 2nd subframe
100098e0:	0031      	movs	r1, r6
	if (cfg->dbly) h /= 2; // return double lines to single lines
100098e2:	e014      	b.n	1000990e <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x3b6>
100098e4:	101880f4 	.word	0x101880f4
100098e8:	447a0000 	.word	0x447a0000
100098ec:	3dcccccd 	.word	0x3dcccccd
100098f0:	3e4ccccd 	.word	0x3e4ccccd
100098f4:	3ecccccd 	.word	0x3ecccccd
	vmode->vmax = v->vmax; // maximal height
100098f8:	464a      	mov	r2, r9
100098fa:	8ad1      	ldrh	r1, [r2, #22]
100098fc:	465a      	mov	r2, fp
100098fe:	85d1      	strh	r1, [r2, #46]	; 0x2e
	if (h > v->vmax) h = v->vmax; // limit height
10009900:	4299      	cmp	r1, r3
10009902:	dd00      	ble.n	10009906 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x3ae>
10009904:	e0cb      	b.n	10009a9e <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x546>
	if (v->inter) // interlaced
10009906:	2800      	cmp	r0, #0
10009908:	d1dd      	bne.n	100098c6 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x36e>
1000990a:	000a      	movs	r2, r1
	int vact2 = 0;
1000990c:	2300      	movs	r3, #0
	vmode->height = h;
1000990e:	465c      	mov	r4, fp
10009910:	8061      	strh	r1, [r4, #2]
	vmode->vtot = v->vtot; // total scanlines
10009912:	4649      	mov	r1, r9
10009914:	8a8e      	ldrh	r6, [r1, #20]
	vmode->vact1 = vact1; // active scanlines of 1st subframe
10009916:	b291      	uxth	r1, r2
10009918:	8761      	strh	r1, [r4, #58]	; 0x3a
1000991a:	9105      	str	r1, [sp, #20]
	int dh = vact1 - v->vact1; // difference
1000991c:	4649      	mov	r1, r9
	vmode->vtot = v->vtot; // total scanlines
1000991e:	85a6      	strh	r6, [r4, #44]	; 0x2c
	int dh = vact1 - v->vact1; // difference
10009920:	8bc9      	ldrh	r1, [r1, #30]
10009922:	1a52      	subs	r2, r2, r1
	vmode->vsync1 = v->vsync1; // V sync (half-)pulses on subframe 1
10009924:	4649      	mov	r1, r9
10009926:	8b09      	ldrh	r1, [r1, #24]
10009928:	86a1      	strh	r1, [r4, #52]	; 0x34
1000992a:	9104      	str	r1, [sp, #16]
	vmode->vpost1 = v->vpost1; // V sync post (half-)pulses on subframe 1
1000992c:	4649      	mov	r1, r9
1000992e:	8b49      	ldrh	r1, [r1, #26]
10009930:	86e1      	strh	r1, [r4, #54]	; 0x36
	vmode->vback1 = v->vback1 - dh/2; // V back porch (after VSYNC, before image) on subframe 1
10009932:	464c      	mov	r4, r9
	vmode->vpost1 = v->vpost1; // V sync post (half-)pulses on subframe 1
10009934:	9106      	str	r1, [sp, #24]
	vmode->vback1 = v->vback1 - dh/2; // V back porch (after VSYNC, before image) on subframe 1
10009936:	0fd1      	lsrs	r1, r2, #31
10009938:	8ba4      	ldrh	r4, [r4, #28]
1000993a:	1889      	adds	r1, r1, r2
1000993c:	1049      	asrs	r1, r1, #1
1000993e:	1a61      	subs	r1, r4, r1
10009940:	b28f      	uxth	r7, r1
10009942:	4659      	mov	r1, fp
10009944:	870f      	strh	r7, [r1, #56]	; 0x38
	vmode->vfront1 = v->vfront1 - ((dh < 0) ? (dh-1)/2 : (dh+1)/2); // V front porch (after image, before VSYNC) on subframe 1
10009946:	4649      	mov	r1, r9
10009948:	8c09      	ldrh	r1, [r1, #32]
1000994a:	2a00      	cmp	r2, #0
1000994c:	da00      	bge.n	10009950 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x3f8>
1000994e:	e0e6      	b.n	10009b1e <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x5c6>
10009950:	3201      	adds	r2, #1
10009952:	1052      	asrs	r2, r2, #1
10009954:	b292      	uxth	r2, r2
10009956:	1a8a      	subs	r2, r1, r2
10009958:	4659      	mov	r1, fp
1000995a:	b292      	uxth	r2, r2
1000995c:	878a      	strh	r2, [r1, #60]	; 0x3c
1000995e:	9207      	str	r2, [sp, #28]
	vmode->vpre1 = v->vpre1; // V sync pre (half-)pulses on subframe 1
10009960:	464a      	mov	r2, r9
10009962:	8c52      	ldrh	r2, [r2, #34]	; 0x22
10009964:	87ca      	strh	r2, [r1, #62]	; 0x3e
10009966:	9209      	str	r2, [sp, #36]	; 0x24
	vmode->vact2 = vact2; // active scanlines of 2nd subframe
10009968:	2248      	movs	r2, #72	; 0x48
1000996a:	5288      	strh	r0, [r1, r2]
	dh = vact2 - v->vact2; // difference
1000996c:	464a      	mov	r2, r9
1000996e:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
	vmode->vsync2 = v->vsync2; // V sync half-pulses on subframe 2
10009970:	4658      	mov	r0, fp
	dh = vact2 - v->vact2; // difference
10009972:	1a9b      	subs	r3, r3, r2
	vmode->vsync2 = v->vsync2; // V sync half-pulses on subframe 2
10009974:	464a      	mov	r2, r9
10009976:	8c92      	ldrh	r2, [r2, #36]	; 0x24
10009978:	920a      	str	r2, [sp, #40]	; 0x28
1000997a:	0011      	movs	r1, r2
1000997c:	2242      	movs	r2, #66	; 0x42
1000997e:	5281      	strh	r1, [r0, r2]
	vmode->vpost2 = v->vpost2; // V sync post half-pulses on subframe 2
10009980:	464a      	mov	r2, r9
10009982:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
10009984:	0011      	movs	r1, r2
10009986:	920b      	str	r2, [sp, #44]	; 0x2c
10009988:	2244      	movs	r2, #68	; 0x44
1000998a:	5281      	strh	r1, [r0, r2]
	vmode->vback2 = v->vback2 - dh/2; // V back porch (after VSYNC, before image) on subframe 2
1000998c:	4649      	mov	r1, r9
1000998e:	0fda      	lsrs	r2, r3, #31
10009990:	8d0c      	ldrh	r4, [r1, #40]	; 0x28
10009992:	18d2      	adds	r2, r2, r3
10009994:	1052      	asrs	r2, r2, #1
10009996:	1aa4      	subs	r4, r4, r2
10009998:	2246      	movs	r2, #70	; 0x46
1000999a:	b2a4      	uxth	r4, r4
1000999c:	5284      	strh	r4, [r0, r2]
	vmode->vfront2 = v->vfront2 - ((dh < 0) ? (dh-1)/2 : (dh+1)/2); // V front porch (after image, before VSYNC) on subframe 2
1000999e:	8d8a      	ldrh	r2, [r1, #44]	; 0x2c
100099a0:	2b00      	cmp	r3, #0
100099a2:	da00      	bge.n	100099a6 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x44e>
100099a4:	e0b5      	b.n	10009b12 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x5ba>
100099a6:	3301      	adds	r3, #1
100099a8:	105b      	asrs	r3, r3, #1
100099aa:	b29b      	uxth	r3, r3
100099ac:	4659      	mov	r1, fp
100099ae:	1ad3      	subs	r3, r2, r3
100099b0:	224a      	movs	r2, #74	; 0x4a
100099b2:	528b      	strh	r3, [r1, r2]
	vmode->vpre2 = v->vpre2; // V sync pre half-pulses on subframe 2
100099b4:	464b      	mov	r3, r9
100099b6:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
100099b8:	234c      	movs	r3, #76	; 0x4c
	vmode->hfreq = vmode->freq * 1000.0f / vmode->div / vmode->htot;
100099ba:	9803      	ldr	r0, [sp, #12]
	vmode->vpre2 = v->vpre2; // V sync pre half-pulses on subframe 2
100099bc:	52ca      	strh	r2, [r1, r3]
	vmode->hfreq = vmode->freq * 1000.0f / vmode->div / vmode->htot;
100099be:	4960      	ldr	r1, [pc, #384]	; (10009b40 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x5e8>)
100099c0:	f7f7 fb00 	bl	10000fc4 <__wrap___aeabi_fmul>
100099c4:	9908      	ldr	r1, [sp, #32]
100099c6:	f7f7 fafa 	bl	10000fbe <__wrap___aeabi_fdiv>
100099ca:	042d      	lsls	r5, r5, #16
100099cc:	4680      	mov	r8, r0
100099ce:	0c28      	lsrs	r0, r5, #16
100099d0:	f7f7 fb04 	bl	10000fdc <__wrap___aeabi_i2f>
100099d4:	1c01      	adds	r1, r0, #0
100099d6:	4640      	mov	r0, r8
100099d8:	f7f7 faf1 	bl	10000fbe <__wrap___aeabi_fdiv>
100099dc:	465b      	mov	r3, fp
100099de:	1c05      	adds	r5, r0, #0
100099e0:	6298      	str	r0, [r3, #40]	; 0x28
	vmode->vfreq = vmode->hfreq / vmode->vtot;
100099e2:	0030      	movs	r0, r6
100099e4:	f7f7 fafa 	bl	10000fdc <__wrap___aeabi_i2f>
100099e8:	1c01      	adds	r1, r0, #0
100099ea:	1c28      	adds	r0, r5, #0
100099ec:	f7f7 fae7 	bl	10000fbe <__wrap___aeabi_fdiv>

	// name
	vmode->name = v->name;	// video timing name
100099f0:	464a      	mov	r2, r9
	vmode->vfreq = vmode->hfreq / vmode->vtot;
100099f2:	465b      	mov	r3, fp
	vmode->name = v->name;	// video timing name
100099f4:	6b12      	ldr	r2, [r2, #48]	; 0x30
	vmode->vfreq = vmode->hfreq / vmode->vtot;
100099f6:	6318      	str	r0, [r3, #48]	; 0x30
	vmode->name = v->name;	// video timing name
100099f8:	651a      	str	r2, [r3, #80]	; 0x50

	// flags
	vmode->lockfreq = cfg->lockfreq; // lock current frequency, do not change it
100099fa:	4653      	mov	r3, sl
100099fc:	4659      	mov	r1, fp
100099fe:	7e5a      	ldrb	r2, [r3, #25]
10009a00:	2354      	movs	r3, #84	; 0x54
10009a02:	54ca      	strb	r2, [r1, r3]
	vmode->dbly = cfg->dbly; // double scanlines
10009a04:	4653      	mov	r3, sl
10009a06:	7e1a      	ldrb	r2, [r3, #24]
10009a08:	2355      	movs	r3, #85	; 0x55
10009a0a:	54ca      	strb	r2, [r1, r3]
	vmode->inter = v->inter; // interlaced (use sub-frames)
10009a0c:	464a      	mov	r2, r9
10009a0e:	3b21      	subs	r3, #33	; 0x21
10009a10:	5cd1      	ldrb	r1, [r2, r3]
10009a12:	4658      	mov	r0, fp
10009a14:	2256      	movs	r2, #86	; 0x56
10009a16:	5481      	strb	r1, [r0, r2]
	vmode->psync = v->psync; // positive synchronization
10009a18:	4649      	mov	r1, r9
10009a1a:	3a21      	subs	r2, #33	; 0x21
10009a1c:	5c89      	ldrb	r1, [r1, r2]
10009a1e:	3222      	adds	r2, #34	; 0x22
10009a20:	5481      	strb	r1, [r0, r2]
	vmode->odd = v->odd; // first sub-frame is odd lines 1, 3, 5,... (PAL)
10009a22:	4649      	mov	r1, r9
10009a24:	3a21      	subs	r2, #33	; 0x21
10009a26:	5c89      	ldrb	r1, [r1, r2]
10009a28:	3222      	adds	r2, #34	; 0x22
10009a2a:	5481      	strb	r1, [r0, r2]

	// first active scanline
	if (v->inter)
10009a2c:	464a      	mov	r2, r9
10009a2e:	5cd3      	ldrb	r3, [r2, r3]
10009a30:	2b00      	cmp	r3, #0
10009a32:	d068      	beq.n	10009b06 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x5ae>
	{
		// interlaced
		vmode->vfirst1 = (vmode->vsync1 + vmode->vpost1)/2 + vmode->vback1 + 1; 
10009a34:	9a06      	ldr	r2, [sp, #24]
		vmode->vfirst2 = vmode->vfirst1 + vmode->vact1 + vmode->vfront1 + 
			(vmode->vpre1 + vmode->vsync2 + vmode->vpost2)/2 + vmode->vback2;
10009a36:	990a      	ldr	r1, [sp, #40]	; 0x28
		vmode->vfirst1 = (vmode->vsync1 + vmode->vpost1)/2 + vmode->vback1 + 1; 
10009a38:	4694      	mov	ip, r2
10009a3a:	9b04      	ldr	r3, [sp, #16]
			(vmode->vpre1 + vmode->vsync2 + vmode->vpost2)/2 + vmode->vback2;
10009a3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
		vmode->vfirst1 = (vmode->vsync1 + vmode->vpost1)/2 + vmode->vback1 + 1; 
10009a3e:	4463      	add	r3, ip
			(vmode->vpre1 + vmode->vsync2 + vmode->vpost2)/2 + vmode->vback2;
10009a40:	468c      	mov	ip, r1
10009a42:	990b      	ldr	r1, [sp, #44]	; 0x2c
10009a44:	4462      	add	r2, ip
10009a46:	468c      	mov	ip, r1
10009a48:	9905      	ldr	r1, [sp, #20]
10009a4a:	4462      	add	r2, ip
10009a4c:	468c      	mov	ip, r1
10009a4e:	9907      	ldr	r1, [sp, #28]
10009a50:	1052      	asrs	r2, r2, #1
10009a52:	4462      	add	r2, ip
10009a54:	468c      	mov	ip, r1
		vmode->vfirst1 = (vmode->vsync1 + vmode->vpost1)/2 + vmode->vback1 + 1; 
10009a56:	105b      	asrs	r3, r3, #1
10009a58:	3301      	adds	r3, #1
10009a5a:	18fb      	adds	r3, r7, r3
10009a5c:	b29b      	uxth	r3, r3
			(vmode->vpre1 + vmode->vsync2 + vmode->vpost2)/2 + vmode->vback2;
10009a5e:	18a2      	adds	r2, r4, r2
10009a60:	189a      	adds	r2, r3, r2
10009a62:	4462      	add	r2, ip
10009a64:	b292      	uxth	r2, r2
10009a66:	4658      	mov	r0, fp
10009a68:	214e      	movs	r1, #78	; 0x4e
10009a6a:	5242      	strh	r2, [r0, r1]
10009a6c:	2240      	movs	r2, #64	; 0x40
10009a6e:	5283      	strh	r3, [r0, r2]
	{
		// progressive
		vmode->vfirst1 = vmode->vsync1 + vmode->vback1 + 1;
		vmode->vfirst2 = 0;
	}
}
10009a70:	b011      	add	sp, #68	; 0x44
10009a72:	bcf0      	pop	{r4, r5, r6, r7}
10009a74:	46bb      	mov	fp, r7
10009a76:	46b2      	mov	sl, r6
10009a78:	46a9      	mov	r9, r5
10009a7a:	46a0      	mov	r8, r4
10009a7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		hfront -= 13 - hback;
10009a7e:	18c9      	adds	r1, r1, r3
10009a80:	390d      	subs	r1, #13
10009a82:	2902      	cmp	r1, #2
10009a84:	db3b      	blt.n	10009afe <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x5a6>
10009a86:	220d      	movs	r2, #13
		hback = 13;
10009a88:	230d      	movs	r3, #13
10009a8a:	e6f8      	b.n	1000987e <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x326>
		htot -= 4 - hsync;
10009a8c:	2304      	movs	r3, #4
10009a8e:	1824      	adds	r4, r4, r0
		hsync = 4;
10009a90:	2704      	movs	r7, #4
		htot -= 4 - hsync;
10009a92:	3c04      	subs	r4, #4
		hsync = 4;
10009a94:	9304      	str	r3, [sp, #16]
10009a96:	e6b7      	b.n	10009808 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x2b0>
	u8 prog = LAYERMODE_BASE;
10009a98:	2100      	movs	r1, #0
10009a9a:	4b2a      	ldr	r3, [pc, #168]	; (10009b44 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x5ec>)
10009a9c:	e56f      	b.n	1000957e <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x26>
10009a9e:	0019      	movs	r1, r3
	if (v->inter) // interlaced
10009aa0:	2800      	cmp	r0, #0
10009aa2:	d000      	beq.n	10009aa6 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x54e>
10009aa4:	e70f      	b.n	100098c6 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x36e>
10009aa6:	e730      	b.n	1000990a <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x3b2>
	if (cfg->dbly) h &= ~1; // must be even number if double lines
10009aa8:	000a      	movs	r2, r1
	int vact2 = 0;
10009aaa:	2300      	movs	r3, #0
	if (cfg->dbly) h /= 2; // return double lines to single lines
10009aac:	0849      	lsrs	r1, r1, #1
10009aae:	e72e      	b.n	1000990e <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x3b6>
			vact1 = (h+1)/2; // if even lines, even frame will have more lines
10009ab0:	1c4a      	adds	r2, r1, #1
			vact2 = h/2;
10009ab2:	104b      	asrs	r3, r1, #1
10009ab4:	001e      	movs	r6, r3
			vact1 = (h+1)/2; // if even lines, even frame will have more lines
10009ab6:	1052      	asrs	r2, r2, #1
			vact2 = h/2;
10009ab8:	e70f      	b.n	100098da <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x382>
10009aba:	0019      	movs	r1, r3
	if (cfg->dbly) h &= ~1; // must be even number if double lines
10009abc:	2301      	movs	r3, #1
10009abe:	4399      	bics	r1, r3
	if (v->inter) // interlaced
10009ac0:	2800      	cmp	r0, #0
10009ac2:	d000      	beq.n	10009ac6 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x56e>
10009ac4:	e6ff      	b.n	100098c6 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x36e>
10009ac6:	e7ef      	b.n	10009aa8 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x550>
		htot--;
10009ac8:	3d01      	subs	r5, #1
		hfront++;
10009aca:	3101      	adds	r1, #1
10009acc:	e6e2      	b.n	10009894 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x33c>
			freq2 = (int)(cpp*wfull*1000/hfull + 0.5f) + 200;
10009ace:	19f6      	adds	r6, r6, r7
10009ad0:	0170      	lsls	r0, r6, #5
10009ad2:	1b80      	subs	r0, r0, r6
10009ad4:	0080      	lsls	r0, r0, #2
10009ad6:	1980      	adds	r0, r0, r6
10009ad8:	00c0      	lsls	r0, r0, #3
10009ada:	f7f7 fa7f 	bl	10000fdc <__wrap___aeabi_i2f>
10009ade:	4641      	mov	r1, r8
10009ae0:	f7f7 fa6d 	bl	10000fbe <__wrap___aeabi_fdiv>
10009ae4:	21fc      	movs	r1, #252	; 0xfc
10009ae6:	0589      	lsls	r1, r1, #22
10009ae8:	f7f7 fa66 	bl	10000fb8 <__wrap___aeabi_fadd>
10009aec:	f7f7 fa98 	bl	10001020 <__wrap___aeabi_f2iz>
10009af0:	30c8      	adds	r0, #200	; 0xc8
		if (freq2 >= freq) freq = freq2;
10009af2:	4285      	cmp	r5, r0
10009af4:	d900      	bls.n	10009af8 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x5a0>
10009af6:	e5d6      	b.n	100096a6 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x14e>
10009af8:	e5d3      	b.n	100096a2 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x14a>
		int freq2 = (int)(cpp*wfull*1000/hfull + 0.5f) + 200;
10009afa:	0006      	movs	r6, r0
10009afc:	e5bc      	b.n	10009678 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x120>
10009afe:	2102      	movs	r1, #2
10009b00:	220d      	movs	r2, #13
		hback = 13;
10009b02:	230d      	movs	r3, #13
10009b04:	e6bb      	b.n	1000987e <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x326>
		vmode->vfirst1 = vmode->vsync1 + vmode->vback1 + 1;
10009b06:	9b04      	ldr	r3, [sp, #16]
		vmode->vfirst2 = 0;
10009b08:	2200      	movs	r2, #0
		vmode->vfirst1 = vmode->vsync1 + vmode->vback1 + 1;
10009b0a:	3301      	adds	r3, #1
10009b0c:	18fb      	adds	r3, r7, r3
10009b0e:	b29b      	uxth	r3, r3
		vmode->vfirst2 = 0;
10009b10:	e7a9      	b.n	10009a66 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x50e>
	vmode->vfront2 = v->vfront2 - ((dh < 0) ? (dh-1)/2 : (dh+1)/2); // V front porch (after image, before VSYNC) on subframe 2
10009b12:	1e59      	subs	r1, r3, #1
10009b14:	0fcb      	lsrs	r3, r1, #31
10009b16:	185b      	adds	r3, r3, r1
10009b18:	105b      	asrs	r3, r3, #1
10009b1a:	b29b      	uxth	r3, r3
10009b1c:	e746      	b.n	100099ac <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x454>
	vmode->vfront1 = v->vfront1 - ((dh < 0) ? (dh-1)/2 : (dh+1)/2); // V front porch (after image, before VSYNC) on subframe 1
10009b1e:	1e54      	subs	r4, r2, #1
10009b20:	0fe2      	lsrs	r2, r4, #31
10009b22:	1912      	adds	r2, r2, r4
10009b24:	1052      	asrs	r2, r2, #1
10009b26:	b292      	uxth	r2, r2
10009b28:	e715      	b.n	10009956 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x3fe>
	hback += (d < 0) ? (d-1)/2 : (d+1)/2;
10009b2a:	3a01      	subs	r2, #1
10009b2c:	0fd3      	lsrs	r3, r2, #31
10009b2e:	189b      	adds	r3, r3, r2
10009b30:	105b      	asrs	r3, r3, #1
10009b32:	e69a      	b.n	1000986a <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x312>
	while (cpp > maxcpp)
10009b34:	23fe      	movs	r3, #254	; 0xfe
10009b36:	059b      	lsls	r3, r3, #22
10009b38:	2401      	movs	r4, #1
10009b3a:	9308      	str	r3, [sp, #32]
10009b3c:	1c1e      	adds	r6, r3, #0
10009b3e:	e605      	b.n	1000974c <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x1f4>
10009b40:	447a0000 	.word	0x447a0000
10009b44:	101880f4 	.word	0x101880f4

10009b48 <_Z12FindSysClockmPmS_PtPhS1_>:
//  outfbdiv ... output fbdiv (16..320)
//  outpd1 ... output postdiv1 (1..7)
//  outpd2 ... output postdiv2 (1..7)
// Returns true if precise frequency has been found, or near frequency used otherwise.
bool FindSysClock(u32 reqkhz, u32* outkhz, u32* outvco, u16* outfbdiv, u8* outpd1, u8* outpd2)
{
10009b48:	b5f0      	push	{r4, r5, r6, r7, lr}
10009b4a:	46de      	mov	lr, fp
10009b4c:	464e      	mov	r6, r9
10009b4e:	4657      	mov	r7, sl
10009b50:	4645      	mov	r5, r8
10009b52:	b5e0      	push	{r5, r6, r7, lr}
10009b54:	b087      	sub	sp, #28
10009b56:	9000      	str	r0, [sp, #0]
	// get reference frequency in kHz (should be 12 MHz)
	u32 input = clock_get_hz(clk_ref)/1000;
10009b58:	2004      	movs	r0, #4
{
10009b5a:	468a      	mov	sl, r1
10009b5c:	4691      	mov	r9, r2
10009b5e:	9304      	str	r3, [sp, #16]
	u32 input = clock_get_hz(clk_ref)/1000;
10009b60:	f7f7 fdb2 	bl	100016c8 <clock_get_hz>
10009b64:	21fa      	movs	r1, #250	; 0xfa
10009b66:	0089      	lsls	r1, r1, #2
10009b68:	f7f6 fc04 	bl	10000374 <__wrap___aeabi_uidiv>
	*outkhz = 0;
10009b6c:	2300      	movs	r3, #0
10009b6e:	4651      	mov	r1, sl
10009b70:	4684      	mov	ip, r0
10009b72:	4a8e      	ldr	r2, [pc, #568]	; (10009dac <_Z12FindSysClockmPmS_PtPhS1_+0x264>)
10009b74:	600b      	str	r3, [r1, #0]
10009b76:	0083      	lsls	r3, r0, #2
10009b78:	4463      	add	r3, ip
10009b7a:	4694      	mov	ip, r2
10009b7c:	019b      	lsls	r3, r3, #6
10009b7e:	4463      	add	r3, ip
10009b80:	9302      	str	r3, [sp, #8]
						*outpd2 = pd2;
10009b82:	464b      	mov	r3, r9
	*outkhz = 0;
10009b84:	25a0      	movs	r5, #160	; 0xa0
						*outpd2 = pd2;
10009b86:	46d1      	mov	r9, sl
10009b88:	469a      	mov	sl, r3
	*outkhz = 0;
10009b8a:	4e89      	ldr	r6, [pc, #548]	; (10009db0 <_Z12FindSysClockmPmS_PtPhS1_+0x268>)
	u32 input = clock_get_hz(clk_ref)/1000;
10009b8c:	9005      	str	r0, [sp, #20]
	*outkhz = 0;
10009b8e:	006d      	lsls	r5, r5, #1
		vco = fbdiv * input;
10009b90:	4a88      	ldr	r2, [pc, #544]	; (10009db4 <_Z12FindSysClockmPmS_PtPhS1_+0x26c>)
10009b92:	9b02      	ldr	r3, [sp, #8]
10009b94:	4694      	mov	ip, r2
10009b96:	001c      	movs	r4, r3
		if ((vco >= vcomin) && (vco <= vcomax))
10009b98:	4a87      	ldr	r2, [pc, #540]	; (10009db8 <_Z12FindSysClockmPmS_PtPhS1_+0x270>)
10009b9a:	4464      	add	r4, ip
10009b9c:	4293      	cmp	r3, r2
10009b9e:	d900      	bls.n	10009ba2 <_Z12FindSysClockmPmS_PtPhS1_+0x5a>
10009ba0:	e0dd      	b.n	10009d5e <_Z12FindSysClockmPmS_PtPhS1_+0x216>
10009ba2:	2306      	movs	r3, #6
10009ba4:	9503      	str	r5, [sp, #12]
10009ba6:	4698      	mov	r8, r3
10009ba8:	e0b4      	b.n	10009d14 <_Z12FindSysClockmPmS_PtPhS1_+0x1cc>
					khz = vco / (pd1 * pd2);
10009baa:	4641      	mov	r1, r8
10009bac:	0020      	movs	r0, r4
10009bae:	4369      	muls	r1, r5
10009bb0:	f7f6 fbe0 	bl	10000374 <__wrap___aeabi_uidiv>
					margin = abs((int)(khz - reqkhz));
10009bb4:	9b00      	ldr	r3, [sp, #0]
10009bb6:	1ac3      	subs	r3, r0, r3
10009bb8:	17da      	asrs	r2, r3, #31
10009bba:	189b      	adds	r3, r3, r2
10009bbc:	4053      	eors	r3, r2
					if (margin < margin_best)
10009bbe:	42b3      	cmp	r3, r6
10009bc0:	d20c      	bcs.n	10009bdc <_Z12FindSysClockmPmS_PtPhS1_+0x94>
						*outkhz = khz;
10009bc2:	464a      	mov	r2, r9
10009bc4:	6010      	str	r0, [r2, #0]
						*outvco = vco;
10009bc6:	4652      	mov	r2, sl
						*outpd2 = pd2;
10009bc8:	001e      	movs	r6, r3
						*outvco = vco;
10009bca:	6014      	str	r4, [r2, #0]
						*outfbdiv = fbdiv;
10009bcc:	9903      	ldr	r1, [sp, #12]
10009bce:	9a04      	ldr	r2, [sp, #16]
10009bd0:	8011      	strh	r1, [r2, #0]
						*outpd1 = pd1;
10009bd2:	9a10      	ldr	r2, [sp, #64]	; 0x40
10009bd4:	9901      	ldr	r1, [sp, #4]
10009bd6:	7011      	strb	r1, [r2, #0]
						*outpd2 = pd2;
10009bd8:	9a11      	ldr	r2, [sp, #68]	; 0x44
10009bda:	7017      	strb	r7, [r2, #0]
				for (pd2 = pd1; pd2 >= 1; pd2--)
10009bdc:	1e7b      	subs	r3, r7, #1
10009bde:	b2db      	uxtb	r3, r3
10009be0:	469b      	mov	fp, r3
10009be2:	2b00      	cmp	r3, #0
10009be4:	d100      	bne.n	10009be8 <_Z12FindSysClockmPmS_PtPhS1_+0xa0>
10009be6:	e091      	b.n	10009d0c <_Z12FindSysClockmPmS_PtPhS1_+0x1c4>
					khz = vco / (pd1 * pd2);
10009be8:	0019      	movs	r1, r3
10009bea:	0020      	movs	r0, r4
10009bec:	4369      	muls	r1, r5
10009bee:	f7f6 fbc1 	bl	10000374 <__wrap___aeabi_uidiv>
					margin = abs((int)(khz - reqkhz));
10009bf2:	9b00      	ldr	r3, [sp, #0]
10009bf4:	1ac3      	subs	r3, r0, r3
10009bf6:	17da      	asrs	r2, r3, #31
10009bf8:	189b      	adds	r3, r3, r2
10009bfa:	4053      	eors	r3, r2
					if (margin < margin_best)
10009bfc:	42b3      	cmp	r3, r6
10009bfe:	d20d      	bcs.n	10009c1c <_Z12FindSysClockmPmS_PtPhS1_+0xd4>
						*outkhz = khz;
10009c00:	464a      	mov	r2, r9
10009c02:	6010      	str	r0, [r2, #0]
						*outvco = vco;
10009c04:	4652      	mov	r2, sl
						*outfbdiv = fbdiv;
10009c06:	9903      	ldr	r1, [sp, #12]
						*outvco = vco;
10009c08:	6014      	str	r4, [r2, #0]
						*outfbdiv = fbdiv;
10009c0a:	9a04      	ldr	r2, [sp, #16]
						*outpd2 = pd2;
10009c0c:	001e      	movs	r6, r3
						*outfbdiv = fbdiv;
10009c0e:	8011      	strh	r1, [r2, #0]
						*outpd1 = pd1;
10009c10:	9a10      	ldr	r2, [sp, #64]	; 0x40
10009c12:	9901      	ldr	r1, [sp, #4]
10009c14:	7011      	strb	r1, [r2, #0]
						*outpd2 = pd2;
10009c16:	4659      	mov	r1, fp
10009c18:	9a11      	ldr	r2, [sp, #68]	; 0x44
10009c1a:	7011      	strb	r1, [r2, #0]
				for (pd2 = pd1; pd2 >= 1; pd2--)
10009c1c:	1ebb      	subs	r3, r7, #2
10009c1e:	b2db      	uxtb	r3, r3
10009c20:	469b      	mov	fp, r3
10009c22:	2b00      	cmp	r3, #0
10009c24:	d072      	beq.n	10009d0c <_Z12FindSysClockmPmS_PtPhS1_+0x1c4>
					khz = vco / (pd1 * pd2);
10009c26:	0019      	movs	r1, r3
10009c28:	0020      	movs	r0, r4
10009c2a:	4369      	muls	r1, r5
10009c2c:	f7f6 fba2 	bl	10000374 <__wrap___aeabi_uidiv>
					margin = abs((int)(khz - reqkhz));
10009c30:	9b00      	ldr	r3, [sp, #0]
10009c32:	1ac3      	subs	r3, r0, r3
10009c34:	17da      	asrs	r2, r3, #31
10009c36:	189b      	adds	r3, r3, r2
10009c38:	4053      	eors	r3, r2
					if (margin < margin_best)
10009c3a:	429e      	cmp	r6, r3
10009c3c:	d90d      	bls.n	10009c5a <_Z12FindSysClockmPmS_PtPhS1_+0x112>
						*outkhz = khz;
10009c3e:	464a      	mov	r2, r9
10009c40:	6010      	str	r0, [r2, #0]
						*outvco = vco;
10009c42:	4652      	mov	r2, sl
						*outfbdiv = fbdiv;
10009c44:	9903      	ldr	r1, [sp, #12]
						*outvco = vco;
10009c46:	6014      	str	r4, [r2, #0]
						*outfbdiv = fbdiv;
10009c48:	9a04      	ldr	r2, [sp, #16]
						*outpd2 = pd2;
10009c4a:	001e      	movs	r6, r3
						*outfbdiv = fbdiv;
10009c4c:	8011      	strh	r1, [r2, #0]
						*outpd1 = pd1;
10009c4e:	9a10      	ldr	r2, [sp, #64]	; 0x40
10009c50:	9901      	ldr	r1, [sp, #4]
10009c52:	7011      	strb	r1, [r2, #0]
						*outpd2 = pd2;
10009c54:	4659      	mov	r1, fp
10009c56:	9a11      	ldr	r2, [sp, #68]	; 0x44
10009c58:	7011      	strb	r1, [r2, #0]
				for (pd2 = pd1; pd2 >= 1; pd2--)
10009c5a:	1efb      	subs	r3, r7, #3
10009c5c:	b2db      	uxtb	r3, r3
10009c5e:	469b      	mov	fp, r3
10009c60:	2b00      	cmp	r3, #0
10009c62:	d053      	beq.n	10009d0c <_Z12FindSysClockmPmS_PtPhS1_+0x1c4>
					khz = vco / (pd1 * pd2);
10009c64:	0019      	movs	r1, r3
10009c66:	0020      	movs	r0, r4
10009c68:	4369      	muls	r1, r5
10009c6a:	f7f6 fb83 	bl	10000374 <__wrap___aeabi_uidiv>
					margin = abs((int)(khz - reqkhz));
10009c6e:	9b00      	ldr	r3, [sp, #0]
10009c70:	1ac3      	subs	r3, r0, r3
10009c72:	17da      	asrs	r2, r3, #31
10009c74:	189b      	adds	r3, r3, r2
10009c76:	4053      	eors	r3, r2
					if (margin < margin_best)
10009c78:	429e      	cmp	r6, r3
10009c7a:	d90d      	bls.n	10009c98 <_Z12FindSysClockmPmS_PtPhS1_+0x150>
						*outkhz = khz;
10009c7c:	464a      	mov	r2, r9
10009c7e:	6010      	str	r0, [r2, #0]
						*outvco = vco;
10009c80:	4652      	mov	r2, sl
						*outfbdiv = fbdiv;
10009c82:	9903      	ldr	r1, [sp, #12]
						*outvco = vco;
10009c84:	6014      	str	r4, [r2, #0]
						*outfbdiv = fbdiv;
10009c86:	9a04      	ldr	r2, [sp, #16]
						*outpd2 = pd2;
10009c88:	001e      	movs	r6, r3
						*outfbdiv = fbdiv;
10009c8a:	8011      	strh	r1, [r2, #0]
						*outpd1 = pd1;
10009c8c:	9a10      	ldr	r2, [sp, #64]	; 0x40
10009c8e:	9901      	ldr	r1, [sp, #4]
10009c90:	7011      	strb	r1, [r2, #0]
						*outpd2 = pd2;
10009c92:	4659      	mov	r1, fp
10009c94:	9a11      	ldr	r2, [sp, #68]	; 0x44
10009c96:	7011      	strb	r1, [r2, #0]
				for (pd2 = pd1; pd2 >= 1; pd2--)
10009c98:	1f3b      	subs	r3, r7, #4
10009c9a:	b2db      	uxtb	r3, r3
10009c9c:	469b      	mov	fp, r3
10009c9e:	2b00      	cmp	r3, #0
10009ca0:	d034      	beq.n	10009d0c <_Z12FindSysClockmPmS_PtPhS1_+0x1c4>
					khz = vco / (pd1 * pd2);
10009ca2:	0019      	movs	r1, r3
10009ca4:	0020      	movs	r0, r4
10009ca6:	4369      	muls	r1, r5
10009ca8:	f7f6 fb64 	bl	10000374 <__wrap___aeabi_uidiv>
					margin = abs((int)(khz - reqkhz));
10009cac:	9b00      	ldr	r3, [sp, #0]
10009cae:	1ac3      	subs	r3, r0, r3
10009cb0:	17da      	asrs	r2, r3, #31
10009cb2:	189b      	adds	r3, r3, r2
10009cb4:	4053      	eors	r3, r2
					if (margin < margin_best)
10009cb6:	429e      	cmp	r6, r3
10009cb8:	d90d      	bls.n	10009cd6 <_Z12FindSysClockmPmS_PtPhS1_+0x18e>
						*outkhz = khz;
10009cba:	464a      	mov	r2, r9
10009cbc:	6010      	str	r0, [r2, #0]
						*outvco = vco;
10009cbe:	4652      	mov	r2, sl
						*outfbdiv = fbdiv;
10009cc0:	9903      	ldr	r1, [sp, #12]
						*outvco = vco;
10009cc2:	6014      	str	r4, [r2, #0]
						*outfbdiv = fbdiv;
10009cc4:	9a04      	ldr	r2, [sp, #16]
						*outpd2 = pd2;
10009cc6:	001e      	movs	r6, r3
						*outfbdiv = fbdiv;
10009cc8:	8011      	strh	r1, [r2, #0]
						*outpd1 = pd1;
10009cca:	9a10      	ldr	r2, [sp, #64]	; 0x40
10009ccc:	9901      	ldr	r1, [sp, #4]
10009cce:	7011      	strb	r1, [r2, #0]
						*outpd2 = pd2;
10009cd0:	4659      	mov	r1, fp
10009cd2:	9a11      	ldr	r2, [sp, #68]	; 0x44
10009cd4:	7011      	strb	r1, [r2, #0]
				for (pd2 = pd1; pd2 >= 1; pd2--)
10009cd6:	2f05      	cmp	r7, #5
10009cd8:	d018      	beq.n	10009d0c <_Z12FindSysClockmPmS_PtPhS1_+0x1c4>
					khz = vco / (pd1 * pd2);
10009cda:	0029      	movs	r1, r5
10009cdc:	0020      	movs	r0, r4
10009cde:	f7f6 fb49 	bl	10000374 <__wrap___aeabi_uidiv>
					margin = abs((int)(khz - reqkhz));
10009ce2:	9b00      	ldr	r3, [sp, #0]
10009ce4:	1ac3      	subs	r3, r0, r3
10009ce6:	17da      	asrs	r2, r3, #31
10009ce8:	189b      	adds	r3, r3, r2
10009cea:	4053      	eors	r3, r2
					if (margin < margin_best)
10009cec:	429e      	cmp	r6, r3
10009cee:	d90d      	bls.n	10009d0c <_Z12FindSysClockmPmS_PtPhS1_+0x1c4>
						*outkhz = khz;
10009cf0:	464a      	mov	r2, r9
10009cf2:	6010      	str	r0, [r2, #0]
						*outvco = vco;
10009cf4:	4652      	mov	r2, sl
						*outfbdiv = fbdiv;
10009cf6:	9903      	ldr	r1, [sp, #12]
						*outvco = vco;
10009cf8:	6014      	str	r4, [r2, #0]
						*outfbdiv = fbdiv;
10009cfa:	9a04      	ldr	r2, [sp, #16]
						*outpd2 = pd2;
10009cfc:	001e      	movs	r6, r3
						*outfbdiv = fbdiv;
10009cfe:	8011      	strh	r1, [r2, #0]
						*outpd1 = pd1;
10009d00:	9a10      	ldr	r2, [sp, #64]	; 0x40
10009d02:	9901      	ldr	r1, [sp, #4]
10009d04:	7011      	strb	r1, [r2, #0]
						*outpd2 = pd2;
10009d06:	2101      	movs	r1, #1
10009d08:	9a11      	ldr	r2, [sp, #68]	; 0x44
10009d0a:	7011      	strb	r1, [r2, #0]
			for (pd1 = 7; pd1 >= 1; pd1--)
10009d0c:	2301      	movs	r3, #1
10009d0e:	425b      	negs	r3, r3
10009d10:	469c      	mov	ip, r3
10009d12:	44e0      	add	r8, ip
				for (pd2 = pd1; pd2 >= 1; pd2--)
10009d14:	4643      	mov	r3, r8
10009d16:	b2df      	uxtb	r7, r3
10009d18:	1c7b      	adds	r3, r7, #1
10009d1a:	b2da      	uxtb	r2, r3
10009d1c:	4643      	mov	r3, r8
10009d1e:	1c5d      	adds	r5, r3, #1
					khz = vco / (pd1 * pd2);
10009d20:	0029      	movs	r1, r5
10009d22:	0020      	movs	r0, r4
10009d24:	4369      	muls	r1, r5
10009d26:	9201      	str	r2, [sp, #4]
10009d28:	f7f6 fb24 	bl	10000374 <__wrap___aeabi_uidiv>
					margin = abs((int)(khz - reqkhz));
10009d2c:	9b00      	ldr	r3, [sp, #0]
10009d2e:	1ac3      	subs	r3, r0, r3
10009d30:	17d9      	asrs	r1, r3, #31
10009d32:	185b      	adds	r3, r3, r1
10009d34:	404b      	eors	r3, r1
					if (margin < margin_best)
10009d36:	429e      	cmp	r6, r3
10009d38:	d90c      	bls.n	10009d54 <_Z12FindSysClockmPmS_PtPhS1_+0x20c>
						*outkhz = khz;
10009d3a:	4649      	mov	r1, r9
10009d3c:	6008      	str	r0, [r1, #0]
						*outvco = vco;
10009d3e:	4651      	mov	r1, sl
						*outpd2 = pd2;
10009d40:	001e      	movs	r6, r3
						*outvco = vco;
10009d42:	600c      	str	r4, [r1, #0]
						*outfbdiv = fbdiv;
10009d44:	9803      	ldr	r0, [sp, #12]
10009d46:	9904      	ldr	r1, [sp, #16]
						*outpd1 = pd1;
10009d48:	9a01      	ldr	r2, [sp, #4]
						*outfbdiv = fbdiv;
10009d4a:	8008      	strh	r0, [r1, #0]
						*outpd1 = pd1;
10009d4c:	9910      	ldr	r1, [sp, #64]	; 0x40
10009d4e:	700a      	strb	r2, [r1, #0]
						*outpd2 = pd2;
10009d50:	9911      	ldr	r1, [sp, #68]	; 0x44
10009d52:	700a      	strb	r2, [r1, #0]
				for (pd2 = pd1; pd2 >= 1; pd2--)
10009d54:	4643      	mov	r3, r8
10009d56:	2b00      	cmp	r3, #0
10009d58:	d000      	beq.n	10009d5c <_Z12FindSysClockmPmS_PtPhS1_+0x214>
10009d5a:	e726      	b.n	10009baa <_Z12FindSysClockmPmS_PtPhS1_+0x62>
10009d5c:	9d03      	ldr	r5, [sp, #12]
			if (fbdiv < 16) break;
10009d5e:	9b02      	ldr	r3, [sp, #8]
10009d60:	9a05      	ldr	r2, [sp, #20]
			fbdiv--;
10009d62:	3d01      	subs	r5, #1
			if (fbdiv < 16) break;
10009d64:	1a9b      	subs	r3, r3, r2
			fbdiv--;
10009d66:	b2ad      	uxth	r5, r5
			if (fbdiv < 16) break;
10009d68:	9302      	str	r3, [sp, #8]
10009d6a:	2d0f      	cmp	r5, #15
10009d6c:	d000      	beq.n	10009d70 <_Z12FindSysClockmPmS_PtPhS1_+0x228>
10009d6e:	e70f      	b.n	10009b90 <_Z12FindSysClockmPmS_PtPhS1_+0x48>
	return (*outkhz == reqkhz) && (*outvco == *outkhz * *outpd1 * *outpd2);
10009d70:	4653      	mov	r3, sl
10009d72:	46ca      	mov	sl, r9
10009d74:	4699      	mov	r9, r3
10009d76:	4653      	mov	r3, sl
10009d78:	9a00      	ldr	r2, [sp, #0]
10009d7a:	681b      	ldr	r3, [r3, #0]
10009d7c:	2000      	movs	r0, #0
10009d7e:	429a      	cmp	r2, r3
10009d80:	d10d      	bne.n	10009d9e <_Z12FindSysClockmPmS_PtPhS1_+0x256>
10009d82:	9b10      	ldr	r3, [sp, #64]	; 0x40
10009d84:	9a11      	ldr	r2, [sp, #68]	; 0x44
10009d86:	781b      	ldrb	r3, [r3, #0]
10009d88:	7810      	ldrb	r0, [r2, #0]
10009d8a:	4358      	muls	r0, r3
10009d8c:	9b00      	ldr	r3, [sp, #0]
10009d8e:	4343      	muls	r3, r0
10009d90:	0018      	movs	r0, r3
10009d92:	464b      	mov	r3, r9
10009d94:	681b      	ldr	r3, [r3, #0]
10009d96:	1ac0      	subs	r0, r0, r3
10009d98:	4243      	negs	r3, r0
10009d9a:	4158      	adcs	r0, r3
10009d9c:	b2c0      	uxtb	r0, r0

	// find PLL setup
	return vcocalc(reqkhz, input, 400000, 1600000, false,  outkhz, outvco, outfbdiv, outpd1, outpd2);
}
10009d9e:	b007      	add	sp, #28
10009da0:	bcf0      	pop	{r4, r5, r6, r7}
10009da2:	46bb      	mov	fp, r7
10009da4:	46b2      	mov	sl, r6
10009da6:	46a9      	mov	r9, r5
10009da8:	46a0      	mov	r8, r4
10009daa:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009dac:	fff9e580 	.word	0xfff9e580
10009db0:	000186a0 	.word	0x000186a0
10009db4:	00061a80 	.word	0x00061a80
10009db8:	00124f80 	.word	0x00124f80

10009dbc <_Z10PrintSetupPhiii>:
// use mono mode
Bool PrintMonoMode;

// setup print service (if bufwb < 2*bufw, use mono text)
void PrintSetup(u8* buf, int bufw, int bufh, int bufwb)
{
10009dbc:	b510      	push	{r4, lr}
	PrintBuf = buf;
10009dbe:	4c0c      	ldr	r4, [pc, #48]	; (10009df0 <_Z10PrintSetupPhiii+0x34>)
10009dc0:	6020      	str	r0, [r4, #0]
	PrintBufW = bufw;
10009dc2:	480c      	ldr	r0, [pc, #48]	; (10009df4 <_Z10PrintSetupPhiii+0x38>)
10009dc4:	6001      	str	r1, [r0, #0]
	PrintBufH = bufh;
10009dc6:	480c      	ldr	r0, [pc, #48]	; (10009df8 <_Z10PrintSetupPhiii+0x3c>)
	PrintBufWB = bufwb;
	PrintX = 0;
	PrintY = 0;
	PrintMonoMode = (bufwb < 2*bufw);
10009dc8:	0049      	lsls	r1, r1, #1
	PrintBufH = bufh;
10009dca:	6002      	str	r2, [r0, #0]
	PrintBufWB = bufwb;
10009dcc:	4a0b      	ldr	r2, [pc, #44]	; (10009dfc <_Z10PrintSetupPhiii+0x40>)
	PrintX = 0;
10009dce:	480c      	ldr	r0, [pc, #48]	; (10009e00 <_Z10PrintSetupPhiii+0x44>)
	PrintBufWB = bufwb;
10009dd0:	6013      	str	r3, [r2, #0]
	PrintX = 0;
10009dd2:	2200      	movs	r2, #0
10009dd4:	6002      	str	r2, [r0, #0]
	PrintY = 0;
10009dd6:	480b      	ldr	r0, [pc, #44]	; (10009e04 <_Z10PrintSetupPhiii+0x48>)
10009dd8:	6002      	str	r2, [r0, #0]
	PrintMonoMode = (bufwb < 2*bufw);
10009dda:	2201      	movs	r2, #1
10009ddc:	4299      	cmp	r1, r3
10009dde:	dc00      	bgt.n	10009de2 <_Z10PrintSetupPhiii+0x26>
10009de0:	2200      	movs	r2, #0
10009de2:	4b09      	ldr	r3, [pc, #36]	; (10009e08 <_Z10PrintSetupPhiii+0x4c>)
10009de4:	701a      	strb	r2, [r3, #0]
	PrintCol = PC_COLOR(PC_BLACK, PC_WHITE);
10009de6:	220f      	movs	r2, #15
10009de8:	4b08      	ldr	r3, [pc, #32]	; (10009e0c <_Z10PrintSetupPhiii+0x50>)
10009dea:	701a      	strb	r2, [r3, #0]
}
10009dec:	bd10      	pop	{r4, pc}
10009dee:	46c0      	nop			; (mov r8, r8)
10009df0:	2000e554 	.word	0x2000e554
10009df4:	2000e55c 	.word	0x2000e55c
10009df8:	2000e558 	.word	0x2000e558
10009dfc:	2000e560 	.word	0x2000e560
10009e00:	2000e564 	.word	0x2000e564
10009e04:	2000e568 	.word	0x2000e568
10009e08:	2001732d 	.word	0x2001732d
10009e0c:	2001732c 	.word	0x2001732c

10009e10 <_Z10PrintClearv>:

// clear text screen, using current color
void PrintClear()
{
10009e10:	b5f0      	push	{r4, r5, r6, r7, lr}
10009e12:	464f      	mov	r7, r9
10009e14:	46d6      	mov	lr, sl
10009e16:	4646      	mov	r6, r8
10009e18:	b5c0      	push	{r6, r7, lr}
	int i, y;
	u8* d;
	u8 col = PrintCol;
10009e1a:	4b1b      	ldr	r3, [pc, #108]	; (10009e88 <_Z10PrintClearv+0x78>)
	for (y = 0; y < PrintBufH; y++)
10009e1c:	4f1b      	ldr	r7, [pc, #108]	; (10009e8c <_Z10PrintClearv+0x7c>)
	u8 col = PrintCol;
10009e1e:	781d      	ldrb	r5, [r3, #0]
	for (y = 0; y < PrintBufH; y++)
10009e20:	683b      	ldr	r3, [r7, #0]
10009e22:	2b00      	cmp	r3, #0
10009e24:	dd25      	ble.n	10009e72 <_Z10PrintClearv+0x62>
10009e26:	4b1a      	ldr	r3, [pc, #104]	; (10009e90 <_Z10PrintClearv+0x80>)
10009e28:	2600      	movs	r6, #0
10009e2a:	4699      	mov	r9, r3
10009e2c:	4b19      	ldr	r3, [pc, #100]	; (10009e94 <_Z10PrintClearv+0x84>)
	{
		d = &PrintBuf[y*PrintBufWB];
		for (i = PrintBufW; i > 0; i--)
		{
			*d++ = ' ';
10009e2e:	2020      	movs	r0, #32
10009e30:	4698      	mov	r8, r3
10009e32:	4b19      	ldr	r3, [pc, #100]	; (10009e98 <_Z10PrintClearv+0x88>)
10009e34:	4c19      	ldr	r4, [pc, #100]	; (10009e9c <_Z10PrintClearv+0x8c>)
10009e36:	469c      	mov	ip, r3
		d = &PrintBuf[y*PrintBufWB];
10009e38:	464a      	mov	r2, r9
10009e3a:	4643      	mov	r3, r8
10009e3c:	6812      	ldr	r2, [r2, #0]
10009e3e:	681b      	ldr	r3, [r3, #0]
10009e40:	4692      	mov	sl, r2
		for (i = PrintBufW; i > 0; i--)
10009e42:	4662      	mov	r2, ip
		d = &PrintBuf[y*PrintBufWB];
10009e44:	4373      	muls	r3, r6
		for (i = PrintBufW; i > 0; i--)
10009e46:	6812      	ldr	r2, [r2, #0]
		d = &PrintBuf[y*PrintBufWB];
10009e48:	4453      	add	r3, sl
		for (i = PrintBufW; i > 0; i--)
10009e4a:	2a00      	cmp	r2, #0
10009e4c:	dc04      	bgt.n	10009e58 <_Z10PrintClearv+0x48>
10009e4e:	e010      	b.n	10009e72 <_Z10PrintClearv+0x62>
10009e50:	3a01      	subs	r2, #1
			*d++ = ' ';
10009e52:	3301      	adds	r3, #1
		for (i = PrintBufW; i > 0; i--)
10009e54:	2a00      	cmp	r2, #0
10009e56:	d008      	beq.n	10009e6a <_Z10PrintClearv+0x5a>
			*d++ = ' ';
10009e58:	7018      	strb	r0, [r3, #0]
			if (!PrintMonoMode) *d++ = col;
10009e5a:	7821      	ldrb	r1, [r4, #0]
10009e5c:	2900      	cmp	r1, #0
10009e5e:	d1f7      	bne.n	10009e50 <_Z10PrintClearv+0x40>
		for (i = PrintBufW; i > 0; i--)
10009e60:	3a01      	subs	r2, #1
			if (!PrintMonoMode) *d++ = col;
10009e62:	705d      	strb	r5, [r3, #1]
10009e64:	3302      	adds	r3, #2
		for (i = PrintBufW; i > 0; i--)
10009e66:	2a00      	cmp	r2, #0
10009e68:	d1f6      	bne.n	10009e58 <_Z10PrintClearv+0x48>
	for (y = 0; y < PrintBufH; y++)
10009e6a:	683b      	ldr	r3, [r7, #0]
10009e6c:	3601      	adds	r6, #1
10009e6e:	42b3      	cmp	r3, r6
10009e70:	dce2      	bgt.n	10009e38 <_Z10PrintClearv+0x28>
		}
	}
	PrintX = 0;
10009e72:	2300      	movs	r3, #0
10009e74:	4a0a      	ldr	r2, [pc, #40]	; (10009ea0 <_Z10PrintClearv+0x90>)
10009e76:	6013      	str	r3, [r2, #0]
	PrintY = 0;
10009e78:	4a0a      	ldr	r2, [pc, #40]	; (10009ea4 <_Z10PrintClearv+0x94>)
10009e7a:	6013      	str	r3, [r2, #0]
}
10009e7c:	bce0      	pop	{r5, r6, r7}
10009e7e:	46ba      	mov	sl, r7
10009e80:	46b1      	mov	r9, r6
10009e82:	46a8      	mov	r8, r5
10009e84:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009e86:	46c0      	nop			; (mov r8, r8)
10009e88:	2001732c 	.word	0x2001732c
10009e8c:	2000e558 	.word	0x2000e558
10009e90:	2000e554 	.word	0x2000e554
10009e94:	2000e560 	.word	0x2000e560
10009e98:	2000e55c 	.word	0x2000e55c
10009e9c:	2001732d 	.word	0x2001732d
10009ea0:	2000e564 	.word	0x2000e564
10009ea4:	2000e568 	.word	0x2000e568

10009ea8 <_Z11PrintSetPosii>:
}

// set absolute print position
void PrintSetPos(int x, int y)
{
	PrintX = x;
10009ea8:	4b02      	ldr	r3, [pc, #8]	; (10009eb4 <_Z11PrintSetPosii+0xc>)
10009eaa:	6018      	str	r0, [r3, #0]
	PrintY = y;
10009eac:	4b02      	ldr	r3, [pc, #8]	; (10009eb8 <_Z11PrintSetPosii+0x10>)
10009eae:	6019      	str	r1, [r3, #0]
}
10009eb0:	4770      	bx	lr
10009eb2:	46c0      	nop			; (mov r8, r8)
10009eb4:	2000e564 	.word	0x2000e564
10009eb8:	2000e568 	.word	0x2000e568

10009ebc <_Z11PrintSetColh>:
}

// set print color (2x4 bits of colors, use PC_COLOR macro)
void PrintSetCol(u8 col)
{
	PrintCol = col;
10009ebc:	4b01      	ldr	r3, [pc, #4]	; (10009ec4 <_Z11PrintSetColh+0x8>)
10009ebe:	7018      	strb	r0, [r3, #0]
}
10009ec0:	4770      	bx	lr
10009ec2:	46c0      	nop			; (mov r8, r8)
10009ec4:	2001732c 	.word	0x2001732c

10009ec8 <_Z9PrintCharc>:
	PrintX++;
}

// print character, using control characters CR, LF, TAB
void PrintChar(char ch)
{
10009ec8:	b510      	push	{r4, lr}
	// CR
	if (ch == CHAR_CR)
10009eca:	280d      	cmp	r0, #13
10009ecc:	d012      	beq.n	10009ef4 <_Z9PrintCharc+0x2c>
	{
		PrintX = 0;
	}

	// LF
	else if (ch == CHAR_LF)
10009ece:	280a      	cmp	r0, #10
10009ed0:	d008      	beq.n	10009ee4 <_Z9PrintCharc+0x1c>
	}

	// Tab
	else if (ch == CHAR_TAB)
	{
		PrintX = (PrintX + 7) & ~7;
10009ed2:	4a1e      	ldr	r2, [pc, #120]	; (10009f4c <_Z9PrintCharc+0x84>)
10009ed4:	6813      	ldr	r3, [r2, #0]
	else if (ch == CHAR_TAB)
10009ed6:	2809      	cmp	r0, #9
10009ed8:	d110      	bne.n	10009efc <_Z9PrintCharc+0x34>
		PrintX = (PrintX + 7) & ~7;
10009eda:	2107      	movs	r1, #7
10009edc:	3307      	adds	r3, #7
10009ede:	438b      	bics	r3, r1
10009ee0:	6013      	str	r3, [r2, #0]
	}

	// character
	else
		PrintChar0(ch);
}
10009ee2:	bd10      	pop	{r4, pc}
		PrintX = 0;
10009ee4:	2200      	movs	r2, #0
10009ee6:	4b19      	ldr	r3, [pc, #100]	; (10009f4c <_Z9PrintCharc+0x84>)
10009ee8:	601a      	str	r2, [r3, #0]
		PrintY++;
10009eea:	4a19      	ldr	r2, [pc, #100]	; (10009f50 <_Z9PrintCharc+0x88>)
10009eec:	6813      	ldr	r3, [r2, #0]
10009eee:	3301      	adds	r3, #1
10009ef0:	6013      	str	r3, [r2, #0]
10009ef2:	e7f6      	b.n	10009ee2 <_Z9PrintCharc+0x1a>
		PrintX = 0;
10009ef4:	2200      	movs	r2, #0
10009ef6:	4b15      	ldr	r3, [pc, #84]	; (10009f4c <_Z9PrintCharc+0x84>)
10009ef8:	601a      	str	r2, [r3, #0]
10009efa:	e7f2      	b.n	10009ee2 <_Z9PrintCharc+0x1a>
	if (((u32)PrintX < (u32)PrintBufW) && ((u32)PrintY < (u32)PrintBufH))
10009efc:	4915      	ldr	r1, [pc, #84]	; (10009f54 <_Z9PrintCharc+0x8c>)
10009efe:	6809      	ldr	r1, [r1, #0]
10009f00:	428b      	cmp	r3, r1
10009f02:	d211      	bcs.n	10009f28 <_Z9PrintCharc+0x60>
10009f04:	4912      	ldr	r1, [pc, #72]	; (10009f50 <_Z9PrintCharc+0x88>)
10009f06:	4c14      	ldr	r4, [pc, #80]	; (10009f58 <_Z9PrintCharc+0x90>)
10009f08:	6809      	ldr	r1, [r1, #0]
10009f0a:	6824      	ldr	r4, [r4, #0]
10009f0c:	42a1      	cmp	r1, r4
10009f0e:	d20b      	bcs.n	10009f28 <_Z9PrintCharc+0x60>
		if (PrintMonoMode)
10009f10:	4c12      	ldr	r4, [pc, #72]	; (10009f5c <_Z9PrintCharc+0x94>)
10009f12:	7824      	ldrb	r4, [r4, #0]
10009f14:	2c00      	cmp	r4, #0
10009f16:	d00a      	beq.n	10009f2e <_Z9PrintCharc+0x66>
			u8* d = &PrintBuf[PrintX + PrintY*PrintBufWB];
10009f18:	4c11      	ldr	r4, [pc, #68]	; (10009f60 <_Z9PrintCharc+0x98>)
10009f1a:	6824      	ldr	r4, [r4, #0]
10009f1c:	4361      	muls	r1, r4
			*d = ch;
10009f1e:	4c11      	ldr	r4, [pc, #68]	; (10009f64 <_Z9PrintCharc+0x9c>)
10009f20:	6824      	ldr	r4, [r4, #0]
10009f22:	18e3      	adds	r3, r4, r3
10009f24:	5458      	strb	r0, [r3, r1]
	PrintX++;
10009f26:	6813      	ldr	r3, [r2, #0]
10009f28:	3301      	adds	r3, #1
10009f2a:	6013      	str	r3, [r2, #0]
}
10009f2c:	e7d9      	b.n	10009ee2 <_Z9PrintCharc+0x1a>
			u8* d = &PrintBuf[PrintX*2 + PrintY*PrintBufWB];
10009f2e:	4c0c      	ldr	r4, [pc, #48]	; (10009f60 <_Z9PrintCharc+0x98>)
10009f30:	005b      	lsls	r3, r3, #1
10009f32:	6824      	ldr	r4, [r4, #0]
10009f34:	4361      	muls	r1, r4
10009f36:	18c9      	adds	r1, r1, r3
10009f38:	4b0a      	ldr	r3, [pc, #40]	; (10009f64 <_Z9PrintCharc+0x9c>)
10009f3a:	681b      	ldr	r3, [r3, #0]
10009f3c:	1859      	adds	r1, r3, r1
			*d = PrintCol;
10009f3e:	4b0a      	ldr	r3, [pc, #40]	; (10009f68 <_Z9PrintCharc+0xa0>)
			*d++ = ch;
10009f40:	7008      	strb	r0, [r1, #0]
			*d = PrintCol;
10009f42:	781b      	ldrb	r3, [r3, #0]
10009f44:	704b      	strb	r3, [r1, #1]
	PrintX++;
10009f46:	6813      	ldr	r3, [r2, #0]
10009f48:	e7ee      	b.n	10009f28 <_Z9PrintCharc+0x60>
10009f4a:	46c0      	nop			; (mov r8, r8)
10009f4c:	2000e564 	.word	0x2000e564
10009f50:	2000e568 	.word	0x2000e568
10009f54:	2000e55c 	.word	0x2000e55c
10009f58:	2000e558 	.word	0x2000e558
10009f5c:	2001732d 	.word	0x2001732d
10009f60:	2000e560 	.word	0x2000e560
10009f64:	2000e554 	.word	0x2000e554
10009f68:	2001732c 	.word	0x2001732c

10009f6c <_Z8PrintSpcv>:
	if (((u32)PrintX < (u32)PrintBufW) && ((u32)PrintY < (u32)PrintBufH))
10009f6c:	4a15      	ldr	r2, [pc, #84]	; (10009fc4 <_Z8PrintSpcv+0x58>)
10009f6e:	4916      	ldr	r1, [pc, #88]	; (10009fc8 <_Z8PrintSpcv+0x5c>)
10009f70:	6813      	ldr	r3, [r2, #0]
10009f72:	6809      	ldr	r1, [r1, #0]
10009f74:	428b      	cmp	r3, r1
10009f76:	d212      	bcs.n	10009f9e <_Z8PrintSpcv+0x32>
10009f78:	4914      	ldr	r1, [pc, #80]	; (10009fcc <_Z8PrintSpcv+0x60>)
10009f7a:	4815      	ldr	r0, [pc, #84]	; (10009fd0 <_Z8PrintSpcv+0x64>)
10009f7c:	6809      	ldr	r1, [r1, #0]
10009f7e:	6800      	ldr	r0, [r0, #0]
10009f80:	4281      	cmp	r1, r0
10009f82:	d20c      	bcs.n	10009f9e <_Z8PrintSpcv+0x32>
		if (PrintMonoMode)
10009f84:	4813      	ldr	r0, [pc, #76]	; (10009fd4 <_Z8PrintSpcv+0x68>)
10009f86:	7800      	ldrb	r0, [r0, #0]
10009f88:	2800      	cmp	r0, #0
10009f8a:	d00b      	beq.n	10009fa4 <_Z8PrintSpcv+0x38>
			u8* d = &PrintBuf[PrintX + PrintY*PrintBufWB];
10009f8c:	4812      	ldr	r0, [pc, #72]	; (10009fd8 <_Z8PrintSpcv+0x6c>)
10009f8e:	6800      	ldr	r0, [r0, #0]
10009f90:	4341      	muls	r1, r0
			*d = ch;
10009f92:	4812      	ldr	r0, [pc, #72]	; (10009fdc <_Z8PrintSpcv+0x70>)
10009f94:	6800      	ldr	r0, [r0, #0]
10009f96:	18c3      	adds	r3, r0, r3
10009f98:	2020      	movs	r0, #32
10009f9a:	5458      	strb	r0, [r3, r1]
	PrintX++;
10009f9c:	6813      	ldr	r3, [r2, #0]
10009f9e:	3301      	adds	r3, #1
10009fa0:	6013      	str	r3, [r2, #0]

// print space character
void PrintSpc()
{
	PrintChar0(' ');
}
10009fa2:	4770      	bx	lr
			u8* d = &PrintBuf[PrintX*2 + PrintY*PrintBufWB];
10009fa4:	480c      	ldr	r0, [pc, #48]	; (10009fd8 <_Z8PrintSpcv+0x6c>)
10009fa6:	005b      	lsls	r3, r3, #1
10009fa8:	6800      	ldr	r0, [r0, #0]
10009faa:	4341      	muls	r1, r0
10009fac:	18c9      	adds	r1, r1, r3
10009fae:	4b0b      	ldr	r3, [pc, #44]	; (10009fdc <_Z8PrintSpcv+0x70>)
10009fb0:	681b      	ldr	r3, [r3, #0]
10009fb2:	1859      	adds	r1, r3, r1
			*d++ = ch;
10009fb4:	2320      	movs	r3, #32
10009fb6:	700b      	strb	r3, [r1, #0]
			*d = PrintCol;
10009fb8:	4b09      	ldr	r3, [pc, #36]	; (10009fe0 <_Z8PrintSpcv+0x74>)
10009fba:	781b      	ldrb	r3, [r3, #0]
10009fbc:	704b      	strb	r3, [r1, #1]
	PrintX++;
10009fbe:	6813      	ldr	r3, [r2, #0]
10009fc0:	e7ed      	b.n	10009f9e <_Z8PrintSpcv+0x32>
10009fc2:	46c0      	nop			; (mov r8, r8)
10009fc4:	2000e564 	.word	0x2000e564
10009fc8:	2000e55c 	.word	0x2000e55c
10009fcc:	2000e568 	.word	0x2000e568
10009fd0:	2000e558 	.word	0x2000e558
10009fd4:	2001732d 	.word	0x2001732d
10009fd8:	2000e560 	.word	0x2000e560
10009fdc:	2000e554 	.word	0x2000e554
10009fe0:	2001732c 	.word	0x2001732c

10009fe4 <_Z10PrintSpcToi>:

// print space to position
void PrintSpcTo(int pos)
{
10009fe4:	b5f0      	push	{r4, r5, r6, r7, lr}
10009fe6:	46de      	mov	lr, fp
10009fe8:	4657      	mov	r7, sl
10009fea:	464e      	mov	r6, r9
10009fec:	4645      	mov	r5, r8
	while (PrintX < pos) PrintSpc();
10009fee:	4a21      	ldr	r2, [pc, #132]	; (1000a074 <_Z10PrintSpcToi+0x90>)
{
10009ff0:	b5e0      	push	{r5, r6, r7, lr}
	while (PrintX < pos) PrintSpc();
10009ff2:	6813      	ldr	r3, [r2, #0]
10009ff4:	4298      	cmp	r0, r3
10009ff6:	dd37      	ble.n	1000a068 <_Z10PrintSpcToi+0x84>
		if (PrintMonoMode)
10009ff8:	491f      	ldr	r1, [pc, #124]	; (1000a078 <_Z10PrintSpcToi+0x94>)
10009ffa:	4c20      	ldr	r4, [pc, #128]	; (1000a07c <_Z10PrintSpcToi+0x98>)
10009ffc:	4688      	mov	r8, r1
			u8* d = &PrintBuf[PrintX*2 + PrintY*PrintBufWB];
10009ffe:	4920      	ldr	r1, [pc, #128]	; (1000a080 <_Z10PrintSpcToi+0x9c>)
	if (((u32)PrintX < (u32)PrintBufW) && ((u32)PrintY < (u32)PrintBufH))
1000a000:	4e20      	ldr	r6, [pc, #128]	; (1000a084 <_Z10PrintSpcToi+0xa0>)
			u8* d = &PrintBuf[PrintX*2 + PrintY*PrintBufWB];
1000a002:	468c      	mov	ip, r1
1000a004:	4920      	ldr	r1, [pc, #128]	; (1000a088 <_Z10PrintSpcToi+0xa4>)
	if (((u32)PrintX < (u32)PrintBufW) && ((u32)PrintY < (u32)PrintBufH))
1000a006:	4d21      	ldr	r5, [pc, #132]	; (1000a08c <_Z10PrintSpcToi+0xa8>)
			u8* d = &PrintBuf[PrintX*2 + PrintY*PrintBufWB];
1000a008:	468b      	mov	fp, r1
			*d = PrintCol;
1000a00a:	4921      	ldr	r1, [pc, #132]	; (1000a090 <_Z10PrintSpcToi+0xac>)
1000a00c:	4689      	mov	r9, r1
1000a00e:	e00d      	b.n	1000a02c <_Z10PrintSpcToi+0x48>
			u8* d = &PrintBuf[PrintX + PrintY*PrintBufWB];
1000a010:	465f      	mov	r7, fp
1000a012:	683f      	ldr	r7, [r7, #0]
1000a014:	4379      	muls	r1, r7
			*d = ch;
1000a016:	4667      	mov	r7, ip
1000a018:	683f      	ldr	r7, [r7, #0]
1000a01a:	46ba      	mov	sl, r7
1000a01c:	2720      	movs	r7, #32
1000a01e:	4453      	add	r3, sl
1000a020:	545f      	strb	r7, [r3, r1]
	PrintX++;
1000a022:	6813      	ldr	r3, [r2, #0]
1000a024:	3301      	adds	r3, #1
1000a026:	6013      	str	r3, [r2, #0]
	while (PrintX < pos) PrintSpc();
1000a028:	4298      	cmp	r0, r3
1000a02a:	dd1d      	ble.n	1000a068 <_Z10PrintSpcToi+0x84>
	if (((u32)PrintX < (u32)PrintBufW) && ((u32)PrintY < (u32)PrintBufH))
1000a02c:	6821      	ldr	r1, [r4, #0]
1000a02e:	428b      	cmp	r3, r1
1000a030:	d2f8      	bcs.n	1000a024 <_Z10PrintSpcToi+0x40>
1000a032:	6831      	ldr	r1, [r6, #0]
1000a034:	682f      	ldr	r7, [r5, #0]
1000a036:	42b9      	cmp	r1, r7
1000a038:	d2f4      	bcs.n	1000a024 <_Z10PrintSpcToi+0x40>
		if (PrintMonoMode)
1000a03a:	4647      	mov	r7, r8
1000a03c:	783f      	ldrb	r7, [r7, #0]
1000a03e:	2f00      	cmp	r7, #0
1000a040:	d1e6      	bne.n	1000a010 <_Z10PrintSpcToi+0x2c>
			u8* d = &PrintBuf[PrintX*2 + PrintY*PrintBufWB];
1000a042:	465f      	mov	r7, fp
1000a044:	683f      	ldr	r7, [r7, #0]
1000a046:	005b      	lsls	r3, r3, #1
1000a048:	4379      	muls	r1, r7
1000a04a:	18c9      	adds	r1, r1, r3
1000a04c:	4663      	mov	r3, ip
1000a04e:	681b      	ldr	r3, [r3, #0]
1000a050:	469a      	mov	sl, r3
			*d++ = ch;
1000a052:	2320      	movs	r3, #32
			u8* d = &PrintBuf[PrintX*2 + PrintY*PrintBufWB];
1000a054:	4451      	add	r1, sl
			*d++ = ch;
1000a056:	700b      	strb	r3, [r1, #0]
			*d = PrintCol;
1000a058:	464b      	mov	r3, r9
1000a05a:	781b      	ldrb	r3, [r3, #0]
1000a05c:	704b      	strb	r3, [r1, #1]
	PrintX++;
1000a05e:	6813      	ldr	r3, [r2, #0]
1000a060:	3301      	adds	r3, #1
1000a062:	6013      	str	r3, [r2, #0]
	while (PrintX < pos) PrintSpc();
1000a064:	4298      	cmp	r0, r3
1000a066:	dce1      	bgt.n	1000a02c <_Z10PrintSpcToi+0x48>
}
1000a068:	bcf0      	pop	{r4, r5, r6, r7}
1000a06a:	46bb      	mov	fp, r7
1000a06c:	46b2      	mov	sl, r6
1000a06e:	46a9      	mov	r9, r5
1000a070:	46a0      	mov	r8, r4
1000a072:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a074:	2000e564 	.word	0x2000e564
1000a078:	2001732d 	.word	0x2001732d
1000a07c:	2000e55c 	.word	0x2000e55c
1000a080:	2000e554 	.word	0x2000e554
1000a084:	2000e568 	.word	0x2000e568
1000a088:	2000e560 	.word	0x2000e560
1000a08c:	2000e558 	.word	0x2000e558
1000a090:	2001732c 	.word	0x2001732c

1000a094 <_Z11PrintSpcRepi>:
	for (; num > 0; num--) PrintChar(ch);
}

// print repeated space
void PrintSpcRep(int num)
{
1000a094:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a096:	46de      	mov	lr, fp
1000a098:	4657      	mov	r7, sl
1000a09a:	464e      	mov	r6, r9
1000a09c:	4645      	mov	r5, r8
1000a09e:	b5e0      	push	{r5, r6, r7, lr}
	for (; num > 0; num--) PrintSpc();
1000a0a0:	2800      	cmp	r0, #0
1000a0a2:	dd3b      	ble.n	1000a11c <_Z11PrintSpcRepi+0x88>
		if (PrintMonoMode)
1000a0a4:	4920      	ldr	r1, [pc, #128]	; (1000a128 <_Z11PrintSpcRepi+0x94>)
	if (((u32)PrintX < (u32)PrintBufW) && ((u32)PrintY < (u32)PrintBufH))
1000a0a6:	4a21      	ldr	r2, [pc, #132]	; (1000a12c <_Z11PrintSpcRepi+0x98>)
		if (PrintMonoMode)
1000a0a8:	4688      	mov	r8, r1
			u8* d = &PrintBuf[PrintX*2 + PrintY*PrintBufWB];
1000a0aa:	4921      	ldr	r1, [pc, #132]	; (1000a130 <_Z11PrintSpcRepi+0x9c>)
	if (((u32)PrintX < (u32)PrintBufW) && ((u32)PrintY < (u32)PrintBufH))
1000a0ac:	6813      	ldr	r3, [r2, #0]
			u8* d = &PrintBuf[PrintX*2 + PrintY*PrintBufWB];
1000a0ae:	468c      	mov	ip, r1
1000a0b0:	4920      	ldr	r1, [pc, #128]	; (1000a134 <_Z11PrintSpcRepi+0xa0>)
1000a0b2:	4c21      	ldr	r4, [pc, #132]	; (1000a138 <_Z11PrintSpcRepi+0xa4>)
1000a0b4:	468b      	mov	fp, r1
			*d = PrintCol;
1000a0b6:	4921      	ldr	r1, [pc, #132]	; (1000a13c <_Z11PrintSpcRepi+0xa8>)
	if (((u32)PrintX < (u32)PrintBufW) && ((u32)PrintY < (u32)PrintBufH))
1000a0b8:	4e21      	ldr	r6, [pc, #132]	; (1000a140 <_Z11PrintSpcRepi+0xac>)
			*d = PrintCol;
1000a0ba:	4689      	mov	r9, r1
	if (((u32)PrintX < (u32)PrintBufW) && ((u32)PrintY < (u32)PrintBufH))
1000a0bc:	4d21      	ldr	r5, [pc, #132]	; (1000a144 <_Z11PrintSpcRepi+0xb0>)
1000a0be:	e00e      	b.n	1000a0de <_Z11PrintSpcRepi+0x4a>
			u8* d = &PrintBuf[PrintX + PrintY*PrintBufWB];
1000a0c0:	465f      	mov	r7, fp
1000a0c2:	683f      	ldr	r7, [r7, #0]
1000a0c4:	4379      	muls	r1, r7
			*d = ch;
1000a0c6:	4667      	mov	r7, ip
1000a0c8:	683f      	ldr	r7, [r7, #0]
1000a0ca:	46ba      	mov	sl, r7
1000a0cc:	2720      	movs	r7, #32
1000a0ce:	4453      	add	r3, sl
1000a0d0:	545f      	strb	r7, [r3, r1]
	PrintX++;
1000a0d2:	6813      	ldr	r3, [r2, #0]
1000a0d4:	3301      	adds	r3, #1
	for (; num > 0; num--) PrintSpc();
1000a0d6:	3801      	subs	r0, #1
	PrintX++;
1000a0d8:	6013      	str	r3, [r2, #0]
	for (; num > 0; num--) PrintSpc();
1000a0da:	2800      	cmp	r0, #0
1000a0dc:	d01e      	beq.n	1000a11c <_Z11PrintSpcRepi+0x88>
	if (((u32)PrintX < (u32)PrintBufW) && ((u32)PrintY < (u32)PrintBufH))
1000a0de:	6821      	ldr	r1, [r4, #0]
1000a0e0:	428b      	cmp	r3, r1
1000a0e2:	d2f7      	bcs.n	1000a0d4 <_Z11PrintSpcRepi+0x40>
1000a0e4:	6831      	ldr	r1, [r6, #0]
1000a0e6:	682f      	ldr	r7, [r5, #0]
1000a0e8:	42b9      	cmp	r1, r7
1000a0ea:	d2f3      	bcs.n	1000a0d4 <_Z11PrintSpcRepi+0x40>
		if (PrintMonoMode)
1000a0ec:	4647      	mov	r7, r8
1000a0ee:	783f      	ldrb	r7, [r7, #0]
1000a0f0:	2f00      	cmp	r7, #0
1000a0f2:	d1e5      	bne.n	1000a0c0 <_Z11PrintSpcRepi+0x2c>
			u8* d = &PrintBuf[PrintX*2 + PrintY*PrintBufWB];
1000a0f4:	465f      	mov	r7, fp
1000a0f6:	683f      	ldr	r7, [r7, #0]
1000a0f8:	005b      	lsls	r3, r3, #1
1000a0fa:	4379      	muls	r1, r7
1000a0fc:	18c9      	adds	r1, r1, r3
1000a0fe:	4663      	mov	r3, ip
1000a100:	681b      	ldr	r3, [r3, #0]
	for (; num > 0; num--) PrintSpc();
1000a102:	3801      	subs	r0, #1
			u8* d = &PrintBuf[PrintX*2 + PrintY*PrintBufWB];
1000a104:	469a      	mov	sl, r3
			*d++ = ch;
1000a106:	2320      	movs	r3, #32
			u8* d = &PrintBuf[PrintX*2 + PrintY*PrintBufWB];
1000a108:	4451      	add	r1, sl
			*d++ = ch;
1000a10a:	700b      	strb	r3, [r1, #0]
			*d = PrintCol;
1000a10c:	464b      	mov	r3, r9
1000a10e:	781b      	ldrb	r3, [r3, #0]
1000a110:	704b      	strb	r3, [r1, #1]
	PrintX++;
1000a112:	6813      	ldr	r3, [r2, #0]
1000a114:	3301      	adds	r3, #1
1000a116:	6013      	str	r3, [r2, #0]
	for (; num > 0; num--) PrintSpc();
1000a118:	2800      	cmp	r0, #0
1000a11a:	d1e0      	bne.n	1000a0de <_Z11PrintSpcRepi+0x4a>
}
1000a11c:	bcf0      	pop	{r4, r5, r6, r7}
1000a11e:	46bb      	mov	fp, r7
1000a120:	46b2      	mov	sl, r6
1000a122:	46a9      	mov	r9, r5
1000a124:	46a0      	mov	r8, r4
1000a126:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a128:	2001732d 	.word	0x2001732d
1000a12c:	2000e564 	.word	0x2000e564
1000a130:	2000e554 	.word	0x2000e554
1000a134:	2000e560 	.word	0x2000e560
1000a138:	2000e55c 	.word	0x2000e55c
1000a13c:	2001732c 	.word	0x2001732c
1000a140:	2000e568 	.word	0x2000e568
1000a144:	2000e558 	.word	0x2000e558

1000a148 <_Z9PrintTextPKc>:

// print text
void PrintText(const char* text)
{
1000a148:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a14a:	46de      	mov	lr, fp
1000a14c:	4657      	mov	r7, sl
1000a14e:	464e      	mov	r6, r9
1000a150:	4645      	mov	r5, r8
1000a152:	b5e0      	push	{r5, r6, r7, lr}
	char ch;
	while ((ch = *text++) != 0)
1000a154:	7803      	ldrb	r3, [r0, #0]
1000a156:	1c42      	adds	r2, r0, #1
1000a158:	2b00      	cmp	r3, #0
1000a15a:	d020      	beq.n	1000a19e <_Z9PrintTextPKc+0x56>
		if (PrintMonoMode)
1000a15c:	4e2e      	ldr	r6, [pc, #184]	; (1000a218 <_Z9PrintTextPKc+0xd0>)
1000a15e:	492f      	ldr	r1, [pc, #188]	; (1000a21c <_Z9PrintTextPKc+0xd4>)
1000a160:	46b1      	mov	r9, r6
			u8* d = &PrintBuf[PrintX*2 + PrintY*PrintBufWB];
1000a162:	4e2f      	ldr	r6, [pc, #188]	; (1000a220 <_Z9PrintTextPKc+0xd8>)
	if (((u32)PrintX < (u32)PrintBufW) && ((u32)PrintY < (u32)PrintBufH))
1000a164:	482f      	ldr	r0, [pc, #188]	; (1000a224 <_Z9PrintTextPKc+0xdc>)
			u8* d = &PrintBuf[PrintX*2 + PrintY*PrintBufWB];
1000a166:	46b0      	mov	r8, r6
			*d = PrintCol;
1000a168:	4e2f      	ldr	r6, [pc, #188]	; (1000a228 <_Z9PrintTextPKc+0xe0>)
	if (((u32)PrintX < (u32)PrintBufW) && ((u32)PrintY < (u32)PrintBufH))
1000a16a:	4d30      	ldr	r5, [pc, #192]	; (1000a22c <_Z9PrintTextPKc+0xe4>)
			*d = PrintCol;
1000a16c:	46b4      	mov	ip, r6
1000a16e:	e00d      	b.n	1000a18c <_Z9PrintTextPKc+0x44>
	else if (ch == CHAR_LF)
1000a170:	2b0a      	cmp	r3, #10
1000a172:	d01a      	beq.n	1000a1aa <_Z9PrintTextPKc+0x62>
	else if (ch == CHAR_TAB)
1000a174:	2b09      	cmp	r3, #9
1000a176:	d11f      	bne.n	1000a1b8 <_Z9PrintTextPKc+0x70>
		PrintX = (PrintX + 7) & ~7;
1000a178:	2607      	movs	r6, #7
1000a17a:	680b      	ldr	r3, [r1, #0]
1000a17c:	3307      	adds	r3, #7
1000a17e:	43b3      	bics	r3, r6
1000a180:	600b      	str	r3, [r1, #0]
	while ((ch = *text++) != 0)
1000a182:	3201      	adds	r2, #1
1000a184:	1e53      	subs	r3, r2, #1
1000a186:	781b      	ldrb	r3, [r3, #0]
1000a188:	2b00      	cmp	r3, #0
1000a18a:	d008      	beq.n	1000a19e <_Z9PrintTextPKc+0x56>
	if (ch == CHAR_CR)
1000a18c:	2b0d      	cmp	r3, #13
1000a18e:	d1ef      	bne.n	1000a170 <_Z9PrintTextPKc+0x28>
		PrintX = 0;
1000a190:	2300      	movs	r3, #0
	while ((ch = *text++) != 0)
1000a192:	3201      	adds	r2, #1
		PrintX = 0;
1000a194:	600b      	str	r3, [r1, #0]
	while ((ch = *text++) != 0)
1000a196:	1e53      	subs	r3, r2, #1
1000a198:	781b      	ldrb	r3, [r3, #0]
1000a19a:	2b00      	cmp	r3, #0
1000a19c:	d1f6      	bne.n	1000a18c <_Z9PrintTextPKc+0x44>
	{
		PrintChar(ch);
	}
}
1000a19e:	bcf0      	pop	{r4, r5, r6, r7}
1000a1a0:	46bb      	mov	fp, r7
1000a1a2:	46b2      	mov	sl, r6
1000a1a4:	46a9      	mov	r9, r5
1000a1a6:	46a0      	mov	r8, r4
1000a1a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		PrintX = 0;
1000a1aa:	2300      	movs	r3, #0
		PrintY++;
1000a1ac:	4e1f      	ldr	r6, [pc, #124]	; (1000a22c <_Z9PrintTextPKc+0xe4>)
		PrintX = 0;
1000a1ae:	600b      	str	r3, [r1, #0]
		PrintY++;
1000a1b0:	6833      	ldr	r3, [r6, #0]
1000a1b2:	3301      	adds	r3, #1
1000a1b4:	6033      	str	r3, [r6, #0]
1000a1b6:	e7e4      	b.n	1000a182 <_Z9PrintTextPKc+0x3a>
	if (((u32)PrintX < (u32)PrintBufW) && ((u32)PrintY < (u32)PrintBufH))
1000a1b8:	680e      	ldr	r6, [r1, #0]
1000a1ba:	6807      	ldr	r7, [r0, #0]
1000a1bc:	42be      	cmp	r6, r7
1000a1be:	d215      	bcs.n	1000a1ec <_Z9PrintTextPKc+0xa4>
1000a1c0:	682f      	ldr	r7, [r5, #0]
1000a1c2:	4c1b      	ldr	r4, [pc, #108]	; (1000a230 <_Z9PrintTextPKc+0xe8>)
1000a1c4:	46ba      	mov	sl, r7
1000a1c6:	6827      	ldr	r7, [r4, #0]
1000a1c8:	45ba      	cmp	sl, r7
1000a1ca:	d20f      	bcs.n	1000a1ec <_Z9PrintTextPKc+0xa4>
		if (PrintMonoMode)
1000a1cc:	464f      	mov	r7, r9
1000a1ce:	783f      	ldrb	r7, [r7, #0]
1000a1d0:	2f00      	cmp	r7, #0
1000a1d2:	d00e      	beq.n	1000a1f2 <_Z9PrintTextPKc+0xaa>
			u8* d = &PrintBuf[PrintX + PrintY*PrintBufWB];
1000a1d4:	4f12      	ldr	r7, [pc, #72]	; (1000a220 <_Z9PrintTextPKc+0xd8>)
1000a1d6:	683f      	ldr	r7, [r7, #0]
1000a1d8:	46bb      	mov	fp, r7
1000a1da:	4657      	mov	r7, sl
1000a1dc:	465c      	mov	r4, fp
1000a1de:	4367      	muls	r7, r4
			*d = ch;
1000a1e0:	4c14      	ldr	r4, [pc, #80]	; (1000a234 <_Z9PrintTextPKc+0xec>)
1000a1e2:	6824      	ldr	r4, [r4, #0]
1000a1e4:	46a3      	mov	fp, r4
1000a1e6:	445e      	add	r6, fp
1000a1e8:	55f3      	strb	r3, [r6, r7]
	PrintX++;
1000a1ea:	680e      	ldr	r6, [r1, #0]
1000a1ec:	1c73      	adds	r3, r6, #1
1000a1ee:	600b      	str	r3, [r1, #0]
}
1000a1f0:	e7c7      	b.n	1000a182 <_Z9PrintTextPKc+0x3a>
			u8* d = &PrintBuf[PrintX*2 + PrintY*PrintBufWB];
1000a1f2:	4644      	mov	r4, r8
1000a1f4:	4657      	mov	r7, sl
1000a1f6:	6824      	ldr	r4, [r4, #0]
1000a1f8:	0076      	lsls	r6, r6, #1
1000a1fa:	4367      	muls	r7, r4
1000a1fc:	46ba      	mov	sl, r7
1000a1fe:	4c0d      	ldr	r4, [pc, #52]	; (1000a234 <_Z9PrintTextPKc+0xec>)
1000a200:	4456      	add	r6, sl
1000a202:	6824      	ldr	r4, [r4, #0]
1000a204:	46a2      	mov	sl, r4
1000a206:	4456      	add	r6, sl
			*d++ = ch;
1000a208:	7033      	strb	r3, [r6, #0]
			*d = PrintCol;
1000a20a:	4663      	mov	r3, ip
1000a20c:	781b      	ldrb	r3, [r3, #0]
1000a20e:	7073      	strb	r3, [r6, #1]
	PrintX++;
1000a210:	680e      	ldr	r6, [r1, #0]
1000a212:	1c73      	adds	r3, r6, #1
1000a214:	600b      	str	r3, [r1, #0]
1000a216:	e7b4      	b.n	1000a182 <_Z9PrintTextPKc+0x3a>
1000a218:	2001732d 	.word	0x2001732d
1000a21c:	2000e564 	.word	0x2000e564
1000a220:	2000e560 	.word	0x2000e560
1000a224:	2000e55c 	.word	0x2000e55c
1000a228:	2001732c 	.word	0x2001732c
1000a22c:	2000e568 	.word	0x2000e568
1000a230:	2000e558 	.word	0x2000e558
1000a234:	2000e554 	.word	0x2000e554

1000a238 <_Z10PrintHLineiii>:

// print horizontal line into screen, using current color (must not stretch out of valid range)
void PrintHLine(int x, int y, int w)
{
1000a238:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a23a:	000c      	movs	r4, r1
1000a23c:	0011      	movs	r1, r2
	u8 col = PrintCol;
1000a23e:	4a23      	ldr	r2, [pc, #140]	; (1000a2cc <_Z10PrintHLineiii+0x94>)
	u8* d = &PrintBuf[((PrintMonoMode) ? x : (x*2)) + y*PrintBufWB];
1000a240:	4d23      	ldr	r5, [pc, #140]	; (1000a2d0 <_Z10PrintHLineiii+0x98>)
	u8 col = PrintCol;
1000a242:	7816      	ldrb	r6, [r2, #0]
	u8* d = &PrintBuf[((PrintMonoMode) ? x : (x*2)) + y*PrintBufWB];
1000a244:	4a23      	ldr	r2, [pc, #140]	; (1000a2d4 <_Z10PrintHLineiii+0x9c>)
{
1000a246:	0003      	movs	r3, r0
	u8* d = &PrintBuf[((PrintMonoMode) ? x : (x*2)) + y*PrintBufWB];
1000a248:	6817      	ldr	r7, [r2, #0]
1000a24a:	782a      	ldrb	r2, [r5, #0]
1000a24c:	2a00      	cmp	r2, #0
1000a24e:	d100      	bne.n	1000a252 <_Z10PrintHLineiii+0x1a>
1000a250:	0043      	lsls	r3, r0, #1
1000a252:	4a21      	ldr	r2, [pc, #132]	; (1000a2d8 <_Z10PrintHLineiii+0xa0>)
1000a254:	6810      	ldr	r0, [r2, #0]
1000a256:	4360      	muls	r0, r4
1000a258:	18c0      	adds	r0, r0, r3
1000a25a:	183a      	adds	r2, r7, r0
	u8 ch;

	// start of line
	ch = *d;
1000a25c:	5c38      	ldrb	r0, [r7, r0]
	if ((ch < CHAR_FRAME_FIRST) || (ch > CHAR_FRAME_LAST)) ch = CHAR_FRAME;
1000a25e:	2314      	movs	r3, #20
1000a260:	0004      	movs	r4, r0
1000a262:	3c11      	subs	r4, #17
1000a264:	2c0e      	cmp	r4, #14
1000a266:	d801      	bhi.n	1000a26c <_Z10PrintHLineiii+0x34>
	ch |= FRAME_R;
1000a268:	3b10      	subs	r3, #16
1000a26a:	4303      	orrs	r3, r0
	*d++ = ch;
1000a26c:	7013      	strb	r3, [r2, #0]
	if (!PrintMonoMode) *d++ = col;
1000a26e:	782b      	ldrb	r3, [r5, #0]
1000a270:	2b00      	cmp	r3, #0
1000a272:	d028      	beq.n	1000a2c6 <_Z10PrintHLineiii+0x8e>
	*d++ = ch;
1000a274:	1c53      	adds	r3, r2, #1

	// inside line
	for (w -= 2; w > 0; w--)
1000a276:	3902      	subs	r1, #2
1000a278:	2900      	cmp	r1, #0
1000a27a:	dd16      	ble.n	1000a2aa <_Z10PrintHLineiii+0x72>
	{
		ch = *d;
		if ((ch < CHAR_FRAME_FIRST) || (ch > CHAR_FRAME_LAST)) ch = CHAR_FRAME;
		ch |= FRAME_L | FRAME_R;
1000a27c:	2705      	movs	r7, #5
1000a27e:	e003      	b.n	1000a288 <_Z10PrintHLineiii+0x50>
	for (w -= 2; w > 0; w--)
1000a280:	3901      	subs	r1, #1
		*d++ = ch;
1000a282:	3301      	adds	r3, #1
	for (w -= 2; w > 0; w--)
1000a284:	2900      	cmp	r1, #0
1000a286:	d010      	beq.n	1000a2aa <_Z10PrintHLineiii+0x72>
		ch = *d;
1000a288:	781a      	ldrb	r2, [r3, #0]
		if ((ch < CHAR_FRAME_FIRST) || (ch > CHAR_FRAME_LAST)) ch = CHAR_FRAME;
1000a28a:	2015      	movs	r0, #21
1000a28c:	0014      	movs	r4, r2
1000a28e:	3c11      	subs	r4, #17
1000a290:	2c0e      	cmp	r4, #14
1000a292:	d801      	bhi.n	1000a298 <_Z10PrintHLineiii+0x60>
		ch |= FRAME_L | FRAME_R;
1000a294:	433a      	orrs	r2, r7
1000a296:	b2d0      	uxtb	r0, r2
		*d++ = ch;
1000a298:	7018      	strb	r0, [r3, #0]
		if (!PrintMonoMode) *d++ = col;
1000a29a:	782a      	ldrb	r2, [r5, #0]
1000a29c:	2a00      	cmp	r2, #0
1000a29e:	d1ef      	bne.n	1000a280 <_Z10PrintHLineiii+0x48>
	for (w -= 2; w > 0; w--)
1000a2a0:	3901      	subs	r1, #1
		if (!PrintMonoMode) *d++ = col;
1000a2a2:	705e      	strb	r6, [r3, #1]
1000a2a4:	3302      	adds	r3, #2
	for (w -= 2; w > 0; w--)
1000a2a6:	2900      	cmp	r1, #0
1000a2a8:	d1ee      	bne.n	1000a288 <_Z10PrintHLineiii+0x50>
	}

	// end of line
	ch = *d;
1000a2aa:	7819      	ldrb	r1, [r3, #0]
	if ((ch < CHAR_FRAME_FIRST) || (ch > CHAR_FRAME_LAST)) ch = CHAR_FRAME;
1000a2ac:	2211      	movs	r2, #17
1000a2ae:	0008      	movs	r0, r1
1000a2b0:	3811      	subs	r0, #17
1000a2b2:	280e      	cmp	r0, #14
1000a2b4:	d801      	bhi.n	1000a2ba <_Z10PrintHLineiii+0x82>
	ch |= FRAME_L;
1000a2b6:	3a10      	subs	r2, #16
1000a2b8:	430a      	orrs	r2, r1
	*d++ = ch;
1000a2ba:	701a      	strb	r2, [r3, #0]
	if (!PrintMonoMode) *d = col;
1000a2bc:	782a      	ldrb	r2, [r5, #0]
1000a2be:	2a00      	cmp	r2, #0
1000a2c0:	d100      	bne.n	1000a2c4 <_Z10PrintHLineiii+0x8c>
1000a2c2:	705e      	strb	r6, [r3, #1]
}
1000a2c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!PrintMonoMode) *d++ = col;
1000a2c6:	1c93      	adds	r3, r2, #2
1000a2c8:	7056      	strb	r6, [r2, #1]
1000a2ca:	e7d4      	b.n	1000a276 <_Z10PrintHLineiii+0x3e>
1000a2cc:	2001732c 	.word	0x2001732c
1000a2d0:	2001732d 	.word	0x2001732d
1000a2d4:	2000e554 	.word	0x2000e554
1000a2d8:	2000e560 	.word	0x2000e560

1000a2dc <_Z10PrintVLineiii>:

// print vertical line into screen, using current color (must not stretch out of valid range)
void PrintVLine(int x, int y, int h)
{
1000a2dc:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a2de:	46ce      	mov	lr, r9
1000a2e0:	4647      	mov	r7, r8
1000a2e2:	b580      	push	{r7, lr}
	u8 col = PrintCol;
1000a2e4:	4b26      	ldr	r3, [pc, #152]	; (1000a380 <_Z10PrintVLineiii+0xa4>)
	int wb = PrintBufWB;
	u8* d = &PrintBuf[((PrintMonoMode) ? x : (x*2)) + y*wb];
1000a2e6:	4e27      	ldr	r6, [pc, #156]	; (1000a384 <_Z10PrintVLineiii+0xa8>)
	u8 col = PrintCol;
1000a2e8:	781b      	ldrb	r3, [r3, #0]
	u8* d = &PrintBuf[((PrintMonoMode) ? x : (x*2)) + y*wb];
1000a2ea:	7834      	ldrb	r4, [r6, #0]
	u8 col = PrintCol;
1000a2ec:	469c      	mov	ip, r3
	int wb = PrintBufWB;
1000a2ee:	4b26      	ldr	r3, [pc, #152]	; (1000a388 <_Z10PrintVLineiii+0xac>)
1000a2f0:	681d      	ldr	r5, [r3, #0]
	u8* d = &PrintBuf[((PrintMonoMode) ? x : (x*2)) + y*wb];
1000a2f2:	4b26      	ldr	r3, [pc, #152]	; (1000a38c <_Z10PrintVLineiii+0xb0>)
1000a2f4:	681b      	ldr	r3, [r3, #0]
1000a2f6:	2c00      	cmp	r4, #0
1000a2f8:	d100      	bne.n	1000a2fc <_Z10PrintVLineiii+0x20>
1000a2fa:	0040      	lsls	r0, r0, #1
1000a2fc:	4369      	muls	r1, r5
1000a2fe:	1808      	adds	r0, r1, r0
	u8 ch;

	// start of line
	ch = *d;
1000a300:	5c19      	ldrb	r1, [r3, r0]
	u8* d = &PrintBuf[((PrintMonoMode) ? x : (x*2)) + y*wb];
1000a302:	181f      	adds	r7, r3, r0
	if ((ch < CHAR_FRAME_FIRST) || (ch > CHAR_FRAME_LAST)) ch = CHAR_FRAME;
1000a304:	0008      	movs	r0, r1
1000a306:	3811      	subs	r0, #17
1000a308:	2318      	movs	r3, #24
1000a30a:	280e      	cmp	r0, #14
1000a30c:	d801      	bhi.n	1000a312 <_Z10PrintVLineiii+0x36>
	ch |= FRAME_D;
1000a30e:	3b10      	subs	r3, #16
1000a310:	430b      	orrs	r3, r1
	*d = ch;
1000a312:	703b      	strb	r3, [r7, #0]
	if (!PrintMonoMode) d[1] = col;
1000a314:	7833      	ldrb	r3, [r6, #0]
1000a316:	2b00      	cmp	r3, #0
1000a318:	d101      	bne.n	1000a31e <_Z10PrintVLineiii+0x42>
1000a31a:	4663      	mov	r3, ip
1000a31c:	707b      	strb	r3, [r7, #1]
	d += wb;

	// inside line
	for (h -= 2; h > 0; h--)
1000a31e:	1e93      	subs	r3, r2, #2
1000a320:	4698      	mov	r8, r3
1000a322:	0019      	movs	r1, r3
	d += wb;
1000a324:	197f      	adds	r7, r7, r5
	for (h -= 2; h > 0; h--)
1000a326:	2b00      	cmp	r3, #0
1000a328:	dd18      	ble.n	1000a35c <_Z10PrintVLineiii+0x80>
	{
		ch = *d;
		if ((ch < CHAR_FRAME_FIRST) || (ch > CHAR_FRAME_LAST)) ch = CHAR_FRAME;
		ch |= FRAME_D | FRAME_U;
1000a32a:	220a      	movs	r2, #10
	d += wb;
1000a32c:	003b      	movs	r3, r7
		ch |= FRAME_D | FRAME_U;
1000a32e:	4691      	mov	r9, r2
		ch = *d;
1000a330:	781a      	ldrb	r2, [r3, #0]
		if ((ch < CHAR_FRAME_FIRST) || (ch > CHAR_FRAME_LAST)) ch = CHAR_FRAME;
1000a332:	201a      	movs	r0, #26
1000a334:	0014      	movs	r4, r2
1000a336:	3c11      	subs	r4, #17
1000a338:	2c0e      	cmp	r4, #14
1000a33a:	d802      	bhi.n	1000a342 <_Z10PrintVLineiii+0x66>
		ch |= FRAME_D | FRAME_U;
1000a33c:	4648      	mov	r0, r9
1000a33e:	4302      	orrs	r2, r0
1000a340:	b2d0      	uxtb	r0, r2
		*d = ch;
1000a342:	7018      	strb	r0, [r3, #0]
		if (!PrintMonoMode) d[1] = col;
1000a344:	7832      	ldrb	r2, [r6, #0]
1000a346:	2a00      	cmp	r2, #0
1000a348:	d101      	bne.n	1000a34e <_Z10PrintVLineiii+0x72>
1000a34a:	4662      	mov	r2, ip
1000a34c:	705a      	strb	r2, [r3, #1]
	for (h -= 2; h > 0; h--)
1000a34e:	3901      	subs	r1, #1
		d += wb;
1000a350:	195b      	adds	r3, r3, r5
	for (h -= 2; h > 0; h--)
1000a352:	2900      	cmp	r1, #0
1000a354:	d1ec      	bne.n	1000a330 <_Z10PrintVLineiii+0x54>
		d += wb;
1000a356:	4643      	mov	r3, r8
1000a358:	435d      	muls	r5, r3
1000a35a:	197f      	adds	r7, r7, r5
	}

	// end of line
	ch = *d;
1000a35c:	783a      	ldrb	r2, [r7, #0]
	if ((ch < CHAR_FRAME_FIRST) || (ch > CHAR_FRAME_LAST)) ch = CHAR_FRAME;
1000a35e:	2312      	movs	r3, #18
1000a360:	0011      	movs	r1, r2
1000a362:	3911      	subs	r1, #17
1000a364:	290e      	cmp	r1, #14
1000a366:	d801      	bhi.n	1000a36c <_Z10PrintVLineiii+0x90>
	ch |= FRAME_U;
1000a368:	3b10      	subs	r3, #16
1000a36a:	4313      	orrs	r3, r2
	*d = ch;
1000a36c:	703b      	strb	r3, [r7, #0]
	if (!PrintMonoMode) d[1] = col;
1000a36e:	7833      	ldrb	r3, [r6, #0]
1000a370:	2b00      	cmp	r3, #0
1000a372:	d101      	bne.n	1000a378 <_Z10PrintVLineiii+0x9c>
1000a374:	4663      	mov	r3, ip
1000a376:	707b      	strb	r3, [r7, #1]
}
1000a378:	bcc0      	pop	{r6, r7}
1000a37a:	46b9      	mov	r9, r7
1000a37c:	46b0      	mov	r8, r6
1000a37e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a380:	2001732c 	.word	0x2001732c
1000a384:	2001732d 	.word	0x2001732d
1000a388:	2000e560 	.word	0x2000e560
1000a38c:	2000e554 	.word	0x2000e554

1000a390 <_Z10PrintFrameiiii>:

// print frame, using current color
void PrintFrame(int x, int y, int w, int h)
{
1000a390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000a392:	001f      	movs	r7, r3
1000a394:	0005      	movs	r5, r0
1000a396:	000c      	movs	r4, r1
1000a398:	0016      	movs	r6, r2
	PrintHLine(x, y, w);
1000a39a:	f7ff ff4d 	bl	1000a238 <_Z10PrintHLineiii>
	PrintVLine(x, y, h);
1000a39e:	003a      	movs	r2, r7
1000a3a0:	0028      	movs	r0, r5
1000a3a2:	0021      	movs	r1, r4
1000a3a4:	f7ff ff9a 	bl	1000a2dc <_Z10PrintVLineiii>
	PrintVLine(x + w - 1, y, h);
1000a3a8:	19a8      	adds	r0, r5, r6
1000a3aa:	003a      	movs	r2, r7
1000a3ac:	0021      	movs	r1, r4
1000a3ae:	3801      	subs	r0, #1
1000a3b0:	f7ff ff94 	bl	1000a2dc <_Z10PrintVLineiii>
	PrintHLine(x, y + h - 1, w);
1000a3b4:	19e1      	adds	r1, r4, r7
1000a3b6:	0032      	movs	r2, r6
1000a3b8:	0028      	movs	r0, r5
1000a3ba:	3901      	subs	r1, #1
1000a3bc:	f7ff ff3c 	bl	1000a238 <_Z10PrintHLineiii>
}
1000a3c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000a3c2:	46c0      	nop			; (mov r8, r8)

1000a3c4 <_ZN7cRandom8InitSeedEv>:
// ============================================================================
//                   Set random seed from ROSC counter
// ============================================================================

void cRandom::InitSeed()
{
1000a3c4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a3c6:	46c6      	mov	lr, r8
1000a3c8:	2240      	movs	r2, #64	; 0x40
	int i;
	for (i = 64; i > 0; i--) m_Seed = (m_Seed << 1) | (rosc_hw->randombit & 1);
1000a3ca:	2701      	movs	r7, #1
{
1000a3cc:	b500      	push	{lr}
	for (i = 64; i > 0; i--) m_Seed = (m_Seed << 1) | (rosc_hw->randombit & 1);
1000a3ce:	4e15      	ldr	r6, [pc, #84]	; (1000a424 <_ZN7cRandom8InitSeedEv+0x60>)
{
1000a3d0:	4680      	mov	r8, r0
1000a3d2:	6841      	ldr	r1, [r0, #4]
1000a3d4:	6800      	ldr	r0, [r0, #0]
	for (i = 64; i > 0; i--) m_Seed = (m_Seed << 1) | (rosc_hw->randombit & 1);
1000a3d6:	0004      	movs	r4, r0
1000a3d8:	000d      	movs	r5, r1
1000a3da:	1824      	adds	r4, r4, r0
1000a3dc:	414d      	adcs	r5, r1
1000a3de:	69f3      	ldr	r3, [r6, #28]
1000a3e0:	3a01      	subs	r2, #1
1000a3e2:	403b      	ands	r3, r7
1000a3e4:	4323      	orrs	r3, r4
1000a3e6:	0018      	movs	r0, r3
1000a3e8:	0029      	movs	r1, r5
1000a3ea:	2a00      	cmp	r2, #0
1000a3ec:	d1f3      	bne.n	1000a3d6 <_ZN7cRandom8InitSeedEv+0x12>
public:

	// shift random generator seed
	inline void Shift()
	{
		m_Seed = m_Seed*214013 + 2531011;
1000a3ee:	2300      	movs	r3, #0
1000a3f0:	4a0d      	ldr	r2, [pc, #52]	; (1000a428 <_ZN7cRandom8InitSeedEv+0x64>)
1000a3f2:	f7f6 fea5 	bl	10001140 <__wrap___aeabi_lmul>
1000a3f6:	2500      	movs	r5, #0
1000a3f8:	4c0c      	ldr	r4, [pc, #48]	; (1000a42c <_ZN7cRandom8InitSeedEv+0x68>)
1000a3fa:	1900      	adds	r0, r0, r4
1000a3fc:	4169      	adcs	r1, r5
	i = (this->U8() & 0x1f) + 5;
1000a3fe:	00cf      	lsls	r7, r1, #3
1000a400:	0eff      	lsrs	r7, r7, #27
1000a402:	3705      	adds	r7, #5
1000a404:	2300      	movs	r3, #0
1000a406:	4a08      	ldr	r2, [pc, #32]	; (1000a428 <_ZN7cRandom8InitSeedEv+0x64>)
1000a408:	f7f6 fe9a 	bl	10001140 <__wrap___aeabi_lmul>
	for (; i > 0; i--) this->Shift();
1000a40c:	3f01      	subs	r7, #1
1000a40e:	1900      	adds	r0, r0, r4
1000a410:	4169      	adcs	r1, r5
1000a412:	2f00      	cmp	r7, #0
1000a414:	d1f6      	bne.n	1000a404 <_ZN7cRandom8InitSeedEv+0x40>
}
1000a416:	4643      	mov	r3, r8
1000a418:	6018      	str	r0, [r3, #0]
1000a41a:	6059      	str	r1, [r3, #4]
1000a41c:	bc80      	pop	{r7}
1000a41e:	46b8      	mov	r8, r7
1000a420:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a422:	46c0      	nop			; (mov r8, r8)
1000a424:	40060000 	.word	0x40060000
1000a428:	000343fd 	.word	0x000343fd
1000a42c:	00269ec3 	.word	0x00269ec3

1000a430 <_ZN7cRandom5U8MaxEh>:
// ============================================================================
//         generate BYTE random number in range 0 to MAX (including)
// ============================================================================

u8 cRandom::U8Max(u8 max)
{
1000a430:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a432:	46c6      	mov	lr, r8
1000a434:	000f      	movs	r7, r1
1000a436:	4680      	mov	r8, r0
1000a438:	b500      	push	{lr}
	u8 res;
	u8 mask;

	// zero maximal value
	if (max == 0) return 0;
1000a43a:	2900      	cmp	r1, #0
1000a43c:	d01a      	beq.n	1000a474 <_ZN7cRandom5U8MaxEh+0x44>

	// prepare mask
	res = 0xff;
1000a43e:	23ff      	movs	r3, #255	; 0xff
	do {
		mask = res;
		res >>= 1;
1000a440:	001e      	movs	r6, r3
1000a442:	085b      	lsrs	r3, r3, #1
	} while (res >= max);
1000a444:	429f      	cmp	r7, r3
1000a446:	d9fb      	bls.n	1000a440 <_ZN7cRandom5U8MaxEh+0x10>
1000a448:	4643      	mov	r3, r8
1000a44a:	2500      	movs	r5, #0
1000a44c:	6818      	ldr	r0, [r3, #0]
1000a44e:	6859      	ldr	r1, [r3, #4]
1000a450:	4c09      	ldr	r4, [pc, #36]	; (1000a478 <_ZN7cRandom5U8MaxEh+0x48>)
1000a452:	2300      	movs	r3, #0
1000a454:	4a09      	ldr	r2, [pc, #36]	; (1000a47c <_ZN7cRandom5U8MaxEh+0x4c>)
1000a456:	f7f6 fe73 	bl	10001140 <__wrap___aeabi_lmul>
1000a45a:	1900      	adds	r0, r0, r4
1000a45c:	4169      	adcs	r1, r5
	return (u8)(m_Seed >> (64-8));
1000a45e:	0e0b      	lsrs	r3, r1, #24

	// generate random number
	do {
		res = this->U8() & mask;
1000a460:	4033      	ands	r3, r6
	} while (res > max);
1000a462:	429f      	cmp	r7, r3
1000a464:	d3f5      	bcc.n	1000a452 <_ZN7cRandom5U8MaxEh+0x22>
1000a466:	4642      	mov	r2, r8
1000a468:	6010      	str	r0, [r2, #0]
1000a46a:	6051      	str	r1, [r2, #4]

	return res;
}
1000a46c:	0018      	movs	r0, r3
1000a46e:	bc80      	pop	{r7}
1000a470:	46b8      	mov	r8, r7
1000a472:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (max == 0) return 0;
1000a474:	2300      	movs	r3, #0
1000a476:	e7f9      	b.n	1000a46c <_ZN7cRandom5U8MaxEh+0x3c>
1000a478:	00269ec3 	.word	0x00269ec3
1000a47c:	000343fd 	.word	0x000343fd

1000a480 <_ZN7cRandom6U16MaxEt>:
// ============================================================================
//         generate WORD random number in range 0 to MAX (including)
// ============================================================================

u16 cRandom::U16Max(u16 max)
{
1000a480:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a482:	46c6      	mov	lr, r8
1000a484:	000f      	movs	r7, r1
1000a486:	4680      	mov	r8, r0
1000a488:	b500      	push	{lr}
	u16 res;
	u16 mask;

	// zero maximal value
	if (max == 0) return 0;
1000a48a:	2900      	cmp	r1, #0
1000a48c:	d01a      	beq.n	1000a4c4 <_ZN7cRandom6U16MaxEt+0x44>

	// prepare mask
	res = 0xffff;
1000a48e:	4b0e      	ldr	r3, [pc, #56]	; (1000a4c8 <_ZN7cRandom6U16MaxEt+0x48>)
	do {
		mask = res;
		res >>= 1;
1000a490:	001e      	movs	r6, r3
1000a492:	085b      	lsrs	r3, r3, #1
	} while (res >= max);
1000a494:	429f      	cmp	r7, r3
1000a496:	d9fb      	bls.n	1000a490 <_ZN7cRandom6U16MaxEt+0x10>
1000a498:	4643      	mov	r3, r8
1000a49a:	2500      	movs	r5, #0
1000a49c:	6818      	ldr	r0, [r3, #0]
1000a49e:	6859      	ldr	r1, [r3, #4]
1000a4a0:	4c0a      	ldr	r4, [pc, #40]	; (1000a4cc <_ZN7cRandom6U16MaxEt+0x4c>)
1000a4a2:	2300      	movs	r3, #0
1000a4a4:	4a0a      	ldr	r2, [pc, #40]	; (1000a4d0 <_ZN7cRandom6U16MaxEt+0x50>)
1000a4a6:	f7f6 fe4b 	bl	10001140 <__wrap___aeabi_lmul>
1000a4aa:	1900      	adds	r0, r0, r4
1000a4ac:	4169      	adcs	r1, r5
	return (u16)(m_Seed >> (64-16));
1000a4ae:	0c0b      	lsrs	r3, r1, #16

	// generate random number
	do {
		res = this->U16() & mask;
1000a4b0:	4033      	ands	r3, r6
	} while (res > max);
1000a4b2:	429f      	cmp	r7, r3
1000a4b4:	d3f5      	bcc.n	1000a4a2 <_ZN7cRandom6U16MaxEt+0x22>
1000a4b6:	4642      	mov	r2, r8
1000a4b8:	6010      	str	r0, [r2, #0]
1000a4ba:	6051      	str	r1, [r2, #4]

	return res;
}
1000a4bc:	0018      	movs	r0, r3
1000a4be:	bc80      	pop	{r7}
1000a4c0:	46b8      	mov	r8, r7
1000a4c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (max == 0) return 0;
1000a4c4:	2300      	movs	r3, #0
1000a4c6:	e7f9      	b.n	1000a4bc <_ZN7cRandom6U16MaxEt+0x3c>
1000a4c8:	0000ffff 	.word	0x0000ffff
1000a4cc:	00269ec3 	.word	0x00269ec3
1000a4d0:	000343fd 	.word	0x000343fd

1000a4d4 <_Z9PWMSndIrqv>:
 *  \ingroup hardware_pwm
 *
 * \param slice_num PWM slice number
 */
static inline void pwm_clear_irq(uint slice_num) {
    pwm_hw->intr = 1u << slice_num;
1000a4d4:	2102      	movs	r1, #2
1000a4d6:	23a4      	movs	r3, #164	; 0xa4
1000a4d8:	4a11      	ldr	r2, [pc, #68]	; (1000a520 <_Z9PWMSndIrqv+0x4c>)
const u8* NextSound = NULL; // next sound to play repeated sound
int NextSoundCnt = 0; // counter of next sound (0=no repeated sound)

// PWM sound interrupt service
void PWMSndIrq()
{
1000a4da:	b5f0      	push	{r4, r5, r6, r7, lr}

	// default sample if no sound		
	u8 samp = 128;

	// check if sound is playing
	int cnt = SoundCnt;
1000a4dc:	4c11      	ldr	r4, [pc, #68]	; (1000a524 <_Z9PWMSndIrqv+0x50>)
1000a4de:	50d1      	str	r1, [r2, r3]
1000a4e0:	6822      	ldr	r2, [r4, #0]
	if (cnt > 0)
1000a4e2:	317e      	adds	r1, #126	; 0x7e
1000a4e4:	2a00      	cmp	r2, #0
1000a4e6:	dd12      	ble.n	1000a50e <_Z9PWMSndIrqv+0x3a>
		// get next sample
		const u8* snd = CurSound;
		samp = *snd;

		// increment pointer accumulator
		int acc = SoundAcc + SoundInc;
1000a4e8:	4e0f      	ldr	r6, [pc, #60]	; (1000a528 <_Z9PWMSndIrqv+0x54>)
1000a4ea:	4f10      	ldr	r7, [pc, #64]	; (1000a52c <_Z9PWMSndIrqv+0x58>)
		const u8* snd = CurSound;
1000a4ec:	4d10      	ldr	r5, [pc, #64]	; (1000a530 <_Z9PWMSndIrqv+0x5c>)
		int acc = SoundAcc + SoundInc;
1000a4ee:	683f      	ldr	r7, [r7, #0]
1000a4f0:	6833      	ldr	r3, [r6, #0]
		const u8* snd = CurSound;
1000a4f2:	6828      	ldr	r0, [r5, #0]
		int acc = SoundAcc + SoundInc;
1000a4f4:	19db      	adds	r3, r3, r7
		int i = acc >> SNDFRAC; // whole increment
1000a4f6:	129f      	asrs	r7, r3, #10
		snd += i;
		cnt -= i;
		acc &= (SNDINT-1);
1000a4f8:	059b      	lsls	r3, r3, #22
		samp = *snd;
1000a4fa:	7801      	ldrb	r1, [r0, #0]
		cnt -= i;
1000a4fc:	1bd2      	subs	r2, r2, r7
		acc &= (SNDINT-1);
1000a4fe:	0d9b      	lsrs	r3, r3, #22
		snd += i;
1000a500:	19c0      	adds	r0, r0, r7

		// repeated sample
		if (cnt <= 0)
1000a502:	2a00      	cmp	r2, #0
1000a504:	dd06      	ble.n	1000a514 <_Z9PWMSndIrqv+0x40>
			cnt = NextSoundCnt;
			snd = NextSound;
		}

		// save new pointer
		SoundCnt = cnt;
1000a506:	6022      	str	r2, [r4, #0]
		SoundAcc = acc;
		CurSound = snd;
1000a508:	6028      	str	r0, [r5, #0]
		SoundAcc = acc;
1000a50a:	6033      	str	r3, [r6, #0]
	}

	// write PWM sample
	((u16*)&pwm_hw->slice[PWMSND_SLICE].cc)[PWMSND_CHAN] = samp;
1000a50c:	b289      	uxth	r1, r1
1000a50e:	4a09      	ldr	r2, [pc, #36]	; (1000a534 <_Z9PWMSndIrqv+0x60>)
1000a510:	8011      	strh	r1, [r2, #0]
}
1000a512:	bdf0      	pop	{r4, r5, r6, r7, pc}
			cnt = NextSoundCnt;
1000a514:	4a08      	ldr	r2, [pc, #32]	; (1000a538 <_Z9PWMSndIrqv+0x64>)
			snd = NextSound;
1000a516:	4809      	ldr	r0, [pc, #36]	; (1000a53c <_Z9PWMSndIrqv+0x68>)
			cnt = NextSoundCnt;
1000a518:	6812      	ldr	r2, [r2, #0]
			snd = NextSound;
1000a51a:	6800      	ldr	r0, [r0, #0]
1000a51c:	e7f3      	b.n	1000a506 <_Z9PWMSndIrqv+0x32>
1000a51e:	46c0      	nop			; (mov r8, r8)
1000a520:	40050000 	.word	0x40050000
1000a524:	2000f754 	.word	0x2000f754
1000a528:	2000f750 	.word	0x2000f750
1000a52c:	20008638 	.word	0x20008638
1000a530:	2000bad8 	.word	0x2000bad8
1000a534:	40050022 	.word	0x40050022
1000a538:	2000e550 	.word	0x2000e550
1000a53c:	2000e54c 	.word	0x2000e54c

1000a540 <_Z10PWMSndInitv>:

// initialize PWM sound output
//  GP19 ... MOSI + sound output (PWM1 B)
void PWMSndInit()
{
1000a540:	b570      	push	{r4, r5, r6, lr}
	// set GPIO function to PWM
	gpio_set_function(PWMSND_GPIO, GPIO_FUNC_PWM);

	// set IRQ handler
	SoundCnt = 0;
1000a542:	2500      	movs	r5, #0
	gpio_set_function(PWMSND_GPIO, GPIO_FUNC_PWM);
1000a544:	2104      	movs	r1, #4
1000a546:	2013      	movs	r0, #19
1000a548:	f7f7 f962 	bl	10001810 <gpio_set_function>
	SoundCnt = 0;
1000a54c:	4b14      	ldr	r3, [pc, #80]	; (1000a5a0 <_Z10PWMSndInitv+0x60>)
1000a54e:	22a4      	movs	r2, #164	; 0xa4
1000a550:	601d      	str	r5, [r3, #0]
1000a552:	2302      	movs	r3, #2
1000a554:	4c13      	ldr	r4, [pc, #76]	; (1000a5a4 <_Z10PWMSndInitv+0x64>)
	pwm_clear_irq(PWMSND_SLICE);
	pwm_set_irq_enabled(PWMSND_SLICE, true);
	irq_set_exclusive_handler(PWM_IRQ_WRAP, PWMSndIrq);
1000a556:	2004      	movs	r0, #4
1000a558:	50a3      	str	r3, [r4, r2]
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
1000a55a:	4a13      	ldr	r2, [pc, #76]	; (1000a5a8 <_Z10PWMSndInitv+0x68>)
1000a55c:	4913      	ldr	r1, [pc, #76]	; (1000a5ac <_Z10PWMSndInitv+0x6c>)
1000a55e:	6013      	str	r3, [r2, #0]
1000a560:	f7f7 f9d8 	bl	10001914 <irq_set_exclusive_handler>
	irq_set_enabled(PWM_IRQ_WRAP, true);
1000a564:	2101      	movs	r1, #1
1000a566:	2004      	movs	r0, #4
1000a568:	f7f7 f9b2 	bl	100018d0 <irq_set_enabled>
	pwm_config cfg = pwm_get_default_config();

	// set clock divider (INT = 0..255, FRAC = 1/16..15/16)
	//  125 MHz: 125000000/5644800 = 22.144, INT=22, FRAC=2,
	//     real sample rate = 125000000/(22+2/16)/256 = 22069Hz
	pwm_config_set_clkdiv(&cfg, (float)clock_get_hz(clk_sys)/PWMSND_CLOCK + 0.03f); // 0.03f = rounding 0.5/16
1000a56c:	2005      	movs	r0, #5
1000a56e:	f7f7 f8ab 	bl	100016c8 <clock_get_hz>
1000a572:	f7f6 fd2d 	bl	10000fd0 <__wrap___aeabi_ui2f>
1000a576:	490e      	ldr	r1, [pc, #56]	; (1000a5b0 <_Z10PWMSndInitv+0x70>)
1000a578:	f7f6 fd21 	bl	10000fbe <__wrap___aeabi_fdiv>
1000a57c:	490d      	ldr	r1, [pc, #52]	; (1000a5b4 <_Z10PWMSndInitv+0x74>)
1000a57e:	f7f6 fd1b 	bl	10000fb8 <__wrap___aeabi_fadd>
    c->div = (uint32_t)(div * (float)(1u << PWM_CH1_DIV_INT_LSB));
1000a582:	2183      	movs	r1, #131	; 0x83
1000a584:	05c9      	lsls	r1, r1, #23
1000a586:	f7f6 fd1d 	bl	10000fc4 <__wrap___aeabi_fmul>
1000a58a:	f7f6 fd7b 	bl	10001084 <__wrap___aeabi_f2uiz>
    pwm_hw->slice[slice_num].top = c->top;
1000a58e:	23ff      	movs	r3, #255	; 0xff
    pwm_hw->slice[slice_num].csr = 0;
1000a590:	6165      	str	r5, [r4, #20]
    pwm_hw->slice[slice_num].ctr = PWM_CH0_CTR_RESET;
1000a592:	61e5      	str	r5, [r4, #28]
    pwm_hw->slice[slice_num].cc = PWM_CH0_CC_RESET;
1000a594:	6225      	str	r5, [r4, #32]
    pwm_hw->slice[slice_num].top = c->top;
1000a596:	6263      	str	r3, [r4, #36]	; 0x24
    pwm_hw->slice[slice_num].csr = c->csr | (!!start << PWM_CH0_CSR_EN_LSB);
1000a598:	3bfe      	subs	r3, #254	; 0xfe
    pwm_hw->slice[slice_num].div = c->div;
1000a59a:	61a0      	str	r0, [r4, #24]
    pwm_hw->slice[slice_num].csr = c->csr | (!!start << PWM_CH0_CSR_EN_LSB);
1000a59c:	6163      	str	r3, [r4, #20]
	// set period to 256 cycles
	pwm_config_set_wrap(&cfg, PWMSND_TOP);

	// start PWM
	pwm_init(PWMSND_SLICE, &cfg, True);
}
1000a59e:	bd70      	pop	{r4, r5, r6, pc}
1000a5a0:	2000f754 	.word	0x2000f754
1000a5a4:	40050000 	.word	0x40050000
1000a5a8:	400520a8 	.word	0x400520a8
1000a5ac:	1000a4d5 	.word	0x1000a4d5
1000a5b0:	4aac4400 	.word	0x4aac4400
1000a5b4:	3cf5c28f 	.word	0x3cf5c28f

1000a5b8 <_Z9PlaySoundPKhihf>:
//  snd = pointer to sound
//  len = length of sound in number of samples
//  speed = relative speed (1=normal)
//  rep = True to repeat sample
void PlaySound(const u8* snd, int len, Bool rep /* = False */, float speed /* = 1.0f */)
{
1000a5b8:	b570      	push	{r4, r5, r6, lr}
1000a5ba:	0005      	movs	r5, r0
1000a5bc:	000c      	movs	r4, r1
1000a5be:	1c18      	adds	r0, r3, #0
1000a5c0:	f3bf 8f5f 	dmb	sy
	// stop current sound
	__dmb();
	SoundCnt = 0;
1000a5c4:	2300      	movs	r3, #0
1000a5c6:	4e11      	ldr	r6, [pc, #68]	; (1000a60c <_Z9PlaySoundPKhihf+0x54>)
1000a5c8:	6033      	str	r3, [r6, #0]
1000a5ca:	f3bf 8f5f 	dmb	sy
	__dmb();

	// repeated sound
	NextSoundCnt = 0;
1000a5ce:	4910      	ldr	r1, [pc, #64]	; (1000a610 <_Z9PlaySoundPKhihf+0x58>)
1000a5d0:	600b      	str	r3, [r1, #0]
	if (rep)
1000a5d2:	2a00      	cmp	r2, #0
1000a5d4:	d002      	beq.n	1000a5dc <_Z9PlaySoundPKhihf+0x24>
	{
		NextSound = snd;
1000a5d6:	4b0f      	ldr	r3, [pc, #60]	; (1000a614 <_Z9PlaySoundPKhihf+0x5c>)
		NextSoundCnt = len;
1000a5d8:	600c      	str	r4, [r1, #0]
		NextSound = snd;
1000a5da:	601d      	str	r5, [r3, #0]
	}

	// sound speed
	SoundInc = (int)(SNDINT*speed + 0.5f);
1000a5dc:	2189      	movs	r1, #137	; 0x89
1000a5de:	05c9      	lsls	r1, r1, #23
1000a5e0:	f7f6 fcf0 	bl	10000fc4 <__wrap___aeabi_fmul>
1000a5e4:	21fc      	movs	r1, #252	; 0xfc
1000a5e6:	0589      	lsls	r1, r1, #22
1000a5e8:	f7f6 fce6 	bl	10000fb8 <__wrap___aeabi_fadd>
1000a5ec:	f7f6 fd18 	bl	10001020 <__wrap___aeabi_f2iz>
	SoundAcc = 0;
1000a5f0:	2200      	movs	r2, #0
	SoundInc = (int)(SNDINT*speed + 0.5f);
1000a5f2:	4b09      	ldr	r3, [pc, #36]	; (1000a618 <_Z9PlaySoundPKhihf+0x60>)
1000a5f4:	6018      	str	r0, [r3, #0]
	SoundAcc = 0;
1000a5f6:	4b09      	ldr	r3, [pc, #36]	; (1000a61c <_Z9PlaySoundPKhihf+0x64>)
1000a5f8:	601a      	str	r2, [r3, #0]

	// start current sound
	CurSound = snd;
1000a5fa:	4b09      	ldr	r3, [pc, #36]	; (1000a620 <_Z9PlaySoundPKhihf+0x68>)
1000a5fc:	601d      	str	r5, [r3, #0]
1000a5fe:	f3bf 8f5f 	dmb	sy
	__dmb();
	SoundCnt = len;
1000a602:	6034      	str	r4, [r6, #0]
1000a604:	f3bf 8f5f 	dmb	sy
	__dmb();
}
1000a608:	bd70      	pop	{r4, r5, r6, pc}
1000a60a:	46c0      	nop			; (mov r8, r8)
1000a60c:	2000f754 	.word	0x2000f754
1000a610:	2000e550 	.word	0x2000e550
1000a614:	2000e54c 	.word	0x2000e54c
1000a618:	20008638 	.word	0x20008638
1000a61c:	2000f750 	.word	0x2000f750
1000a620:	2000bad8 	.word	0x2000bad8

1000a624 <calloc>:
1000a624:	0003      	movs	r3, r0
1000a626:	b510      	push	{r4, lr}
1000a628:	000a      	movs	r2, r1
1000a62a:	4903      	ldr	r1, [pc, #12]	; (1000a638 <calloc+0x14>)
1000a62c:	6808      	ldr	r0, [r1, #0]
1000a62e:	0019      	movs	r1, r3
1000a630:	f000 f804 	bl	1000a63c <_calloc_r>
1000a634:	bd10      	pop	{r4, pc}
1000a636:	46c0      	nop			; (mov r8, r8)
1000a638:	2000863c 	.word	0x2000863c

1000a63c <_calloc_r>:
1000a63c:	b570      	push	{r4, r5, r6, lr}
1000a63e:	0c0b      	lsrs	r3, r1, #16
1000a640:	2400      	movs	r4, #0
1000a642:	0c15      	lsrs	r5, r2, #16
1000a644:	2b00      	cmp	r3, #0
1000a646:	d128      	bne.n	1000a69a <_calloc_r+0x5e>
1000a648:	2d00      	cmp	r5, #0
1000a64a:	d137      	bne.n	1000a6bc <_calloc_r+0x80>
1000a64c:	b28b      	uxth	r3, r1
1000a64e:	b291      	uxth	r1, r2
1000a650:	4359      	muls	r1, r3
1000a652:	f000 f851 	bl	1000a6f8 <_malloc_r>
1000a656:	1e05      	subs	r5, r0, #0
1000a658:	d019      	beq.n	1000a68e <_calloc_r+0x52>
1000a65a:	0003      	movs	r3, r0
1000a65c:	3b08      	subs	r3, #8
1000a65e:	685a      	ldr	r2, [r3, #4]
1000a660:	2303      	movs	r3, #3
1000a662:	439a      	bics	r2, r3
1000a664:	3a04      	subs	r2, #4
1000a666:	2a24      	cmp	r2, #36	; 0x24
1000a668:	d813      	bhi.n	1000a692 <_calloc_r+0x56>
1000a66a:	0003      	movs	r3, r0
1000a66c:	2a13      	cmp	r2, #19
1000a66e:	d90a      	bls.n	1000a686 <_calloc_r+0x4a>
1000a670:	6004      	str	r4, [r0, #0]
1000a672:	6044      	str	r4, [r0, #4]
1000a674:	3308      	adds	r3, #8
1000a676:	2a1b      	cmp	r2, #27
1000a678:	d905      	bls.n	1000a686 <_calloc_r+0x4a>
1000a67a:	6084      	str	r4, [r0, #8]
1000a67c:	60c4      	str	r4, [r0, #12]
1000a67e:	2a24      	cmp	r2, #36	; 0x24
1000a680:	d025      	beq.n	1000a6ce <_calloc_r+0x92>
1000a682:	0003      	movs	r3, r0
1000a684:	3310      	adds	r3, #16
1000a686:	2200      	movs	r2, #0
1000a688:	601a      	str	r2, [r3, #0]
1000a68a:	605a      	str	r2, [r3, #4]
1000a68c:	609a      	str	r2, [r3, #8]
1000a68e:	0028      	movs	r0, r5
1000a690:	bd70      	pop	{r4, r5, r6, pc}
1000a692:	2100      	movs	r1, #0
1000a694:	f7f6 fd48 	bl	10001128 <__wrap_memset>
1000a698:	e7f9      	b.n	1000a68e <_calloc_r+0x52>
1000a69a:	2d00      	cmp	r5, #0
1000a69c:	d111      	bne.n	1000a6c2 <_calloc_r+0x86>
1000a69e:	1c15      	adds	r5, r2, #0
1000a6a0:	b289      	uxth	r1, r1
1000a6a2:	b292      	uxth	r2, r2
1000a6a4:	434a      	muls	r2, r1
1000a6a6:	b2ad      	uxth	r5, r5
1000a6a8:	b29b      	uxth	r3, r3
1000a6aa:	436b      	muls	r3, r5
1000a6ac:	0c11      	lsrs	r1, r2, #16
1000a6ae:	185b      	adds	r3, r3, r1
1000a6b0:	0c19      	lsrs	r1, r3, #16
1000a6b2:	d106      	bne.n	1000a6c2 <_calloc_r+0x86>
1000a6b4:	0419      	lsls	r1, r3, #16
1000a6b6:	b292      	uxth	r2, r2
1000a6b8:	4311      	orrs	r1, r2
1000a6ba:	e7ca      	b.n	1000a652 <_calloc_r+0x16>
1000a6bc:	1c2b      	adds	r3, r5, #0
1000a6be:	1c0d      	adds	r5, r1, #0
1000a6c0:	e7ee      	b.n	1000a6a0 <_calloc_r+0x64>
1000a6c2:	f000 f809 	bl	1000a6d8 <__errno>
1000a6c6:	230c      	movs	r3, #12
1000a6c8:	2500      	movs	r5, #0
1000a6ca:	6003      	str	r3, [r0, #0]
1000a6cc:	e7df      	b.n	1000a68e <_calloc_r+0x52>
1000a6ce:	0003      	movs	r3, r0
1000a6d0:	6104      	str	r4, [r0, #16]
1000a6d2:	3318      	adds	r3, #24
1000a6d4:	6144      	str	r4, [r0, #20]
1000a6d6:	e7d6      	b.n	1000a686 <_calloc_r+0x4a>

1000a6d8 <__errno>:
1000a6d8:	4b01      	ldr	r3, [pc, #4]	; (1000a6e0 <__errno+0x8>)
1000a6da:	6818      	ldr	r0, [r3, #0]
1000a6dc:	4770      	bx	lr
1000a6de:	46c0      	nop			; (mov r8, r8)
1000a6e0:	2000863c 	.word	0x2000863c

1000a6e4 <malloc>:
1000a6e4:	b510      	push	{r4, lr}
1000a6e6:	4b03      	ldr	r3, [pc, #12]	; (1000a6f4 <malloc+0x10>)
1000a6e8:	0001      	movs	r1, r0
1000a6ea:	6818      	ldr	r0, [r3, #0]
1000a6ec:	f000 f804 	bl	1000a6f8 <_malloc_r>
1000a6f0:	bd10      	pop	{r4, pc}
1000a6f2:	46c0      	nop			; (mov r8, r8)
1000a6f4:	2000863c 	.word	0x2000863c

1000a6f8 <_malloc_r>:
1000a6f8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a6fa:	464e      	mov	r6, r9
1000a6fc:	4645      	mov	r5, r8
1000a6fe:	46de      	mov	lr, fp
1000a700:	4657      	mov	r7, sl
1000a702:	b5e0      	push	{r5, r6, r7, lr}
1000a704:	000d      	movs	r5, r1
1000a706:	350b      	adds	r5, #11
1000a708:	0006      	movs	r6, r0
1000a70a:	b083      	sub	sp, #12
1000a70c:	2d16      	cmp	r5, #22
1000a70e:	d822      	bhi.n	1000a756 <_malloc_r+0x5e>
1000a710:	2910      	cmp	r1, #16
1000a712:	d900      	bls.n	1000a716 <_malloc_r+0x1e>
1000a714:	e0b2      	b.n	1000a87c <_malloc_r+0x184>
1000a716:	f000 fab1 	bl	1000ac7c <__malloc_lock>
1000a71a:	2510      	movs	r5, #16
1000a71c:	2318      	movs	r3, #24
1000a71e:	2002      	movs	r0, #2
1000a720:	4fcc      	ldr	r7, [pc, #816]	; (1000aa54 <_malloc_r+0x35c>)
1000a722:	18fb      	adds	r3, r7, r3
1000a724:	001a      	movs	r2, r3
1000a726:	685c      	ldr	r4, [r3, #4]
1000a728:	3a08      	subs	r2, #8
1000a72a:	4294      	cmp	r4, r2
1000a72c:	d100      	bne.n	1000a730 <_malloc_r+0x38>
1000a72e:	e0b5      	b.n	1000a89c <_malloc_r+0x1a4>
1000a730:	2303      	movs	r3, #3
1000a732:	6862      	ldr	r2, [r4, #4]
1000a734:	439a      	bics	r2, r3
1000a736:	0013      	movs	r3, r2
1000a738:	68e2      	ldr	r2, [r4, #12]
1000a73a:	68a1      	ldr	r1, [r4, #8]
1000a73c:	60ca      	str	r2, [r1, #12]
1000a73e:	6091      	str	r1, [r2, #8]
1000a740:	2201      	movs	r2, #1
1000a742:	18e3      	adds	r3, r4, r3
1000a744:	6859      	ldr	r1, [r3, #4]
1000a746:	0030      	movs	r0, r6
1000a748:	430a      	orrs	r2, r1
1000a74a:	605a      	str	r2, [r3, #4]
1000a74c:	f000 fa9e 	bl	1000ac8c <__malloc_unlock>
1000a750:	0020      	movs	r0, r4
1000a752:	3008      	adds	r0, #8
1000a754:	e095      	b.n	1000a882 <_malloc_r+0x18a>
1000a756:	2307      	movs	r3, #7
1000a758:	439d      	bics	r5, r3
1000a75a:	d500      	bpl.n	1000a75e <_malloc_r+0x66>
1000a75c:	e08e      	b.n	1000a87c <_malloc_r+0x184>
1000a75e:	42a9      	cmp	r1, r5
1000a760:	d900      	bls.n	1000a764 <_malloc_r+0x6c>
1000a762:	e08b      	b.n	1000a87c <_malloc_r+0x184>
1000a764:	f000 fa8a 	bl	1000ac7c <__malloc_lock>
1000a768:	23fc      	movs	r3, #252	; 0xfc
1000a76a:	005b      	lsls	r3, r3, #1
1000a76c:	429d      	cmp	r5, r3
1000a76e:	d200      	bcs.n	1000a772 <_malloc_r+0x7a>
1000a770:	e1a7      	b.n	1000aac2 <_malloc_r+0x3ca>
1000a772:	0a68      	lsrs	r0, r5, #9
1000a774:	d100      	bne.n	1000a778 <_malloc_r+0x80>
1000a776:	e08b      	b.n	1000a890 <_malloc_r+0x198>
1000a778:	2804      	cmp	r0, #4
1000a77a:	d900      	bls.n	1000a77e <_malloc_r+0x86>
1000a77c:	e17a      	b.n	1000aa74 <_malloc_r+0x37c>
1000a77e:	2338      	movs	r3, #56	; 0x38
1000a780:	4698      	mov	r8, r3
1000a782:	09a8      	lsrs	r0, r5, #6
1000a784:	4480      	add	r8, r0
1000a786:	3039      	adds	r0, #57	; 0x39
1000a788:	00c1      	lsls	r1, r0, #3
1000a78a:	4fb2      	ldr	r7, [pc, #712]	; (1000aa54 <_malloc_r+0x35c>)
1000a78c:	1879      	adds	r1, r7, r1
1000a78e:	684c      	ldr	r4, [r1, #4]
1000a790:	3908      	subs	r1, #8
1000a792:	42a1      	cmp	r1, r4
1000a794:	d00e      	beq.n	1000a7b4 <_malloc_r+0xbc>
1000a796:	2303      	movs	r3, #3
1000a798:	469c      	mov	ip, r3
1000a79a:	e004      	b.n	1000a7a6 <_malloc_r+0xae>
1000a79c:	2a00      	cmp	r2, #0
1000a79e:	dacb      	bge.n	1000a738 <_malloc_r+0x40>
1000a7a0:	68e4      	ldr	r4, [r4, #12]
1000a7a2:	42a1      	cmp	r1, r4
1000a7a4:	d006      	beq.n	1000a7b4 <_malloc_r+0xbc>
1000a7a6:	4662      	mov	r2, ip
1000a7a8:	6863      	ldr	r3, [r4, #4]
1000a7aa:	4393      	bics	r3, r2
1000a7ac:	1b5a      	subs	r2, r3, r5
1000a7ae:	2a0f      	cmp	r2, #15
1000a7b0:	ddf4      	ble.n	1000a79c <_malloc_r+0xa4>
1000a7b2:	4640      	mov	r0, r8
1000a7b4:	003a      	movs	r2, r7
1000a7b6:	693c      	ldr	r4, [r7, #16]
1000a7b8:	3208      	adds	r2, #8
1000a7ba:	4294      	cmp	r4, r2
1000a7bc:	d100      	bne.n	1000a7c0 <_malloc_r+0xc8>
1000a7be:	e078      	b.n	1000a8b2 <_malloc_r+0x1ba>
1000a7c0:	2303      	movs	r3, #3
1000a7c2:	6861      	ldr	r1, [r4, #4]
1000a7c4:	4399      	bics	r1, r3
1000a7c6:	4689      	mov	r9, r1
1000a7c8:	000b      	movs	r3, r1
1000a7ca:	1b49      	subs	r1, r1, r5
1000a7cc:	290f      	cmp	r1, #15
1000a7ce:	dd00      	ble.n	1000a7d2 <_malloc_r+0xda>
1000a7d0:	e17b      	b.n	1000aaca <_malloc_r+0x3d2>
1000a7d2:	617a      	str	r2, [r7, #20]
1000a7d4:	613a      	str	r2, [r7, #16]
1000a7d6:	2900      	cmp	r1, #0
1000a7d8:	dab2      	bge.n	1000a740 <_malloc_r+0x48>
1000a7da:	2280      	movs	r2, #128	; 0x80
1000a7dc:	0092      	lsls	r2, r2, #2
1000a7de:	4591      	cmp	r9, r2
1000a7e0:	d300      	bcc.n	1000a7e4 <_malloc_r+0xec>
1000a7e2:	e10f      	b.n	1000aa04 <_malloc_r+0x30c>
1000a7e4:	0959      	lsrs	r1, r3, #5
1000a7e6:	08da      	lsrs	r2, r3, #3
1000a7e8:	2301      	movs	r3, #1
1000a7ea:	408b      	lsls	r3, r1
1000a7ec:	00d2      	lsls	r2, r2, #3
1000a7ee:	6879      	ldr	r1, [r7, #4]
1000a7f0:	19d2      	adds	r2, r2, r7
1000a7f2:	430b      	orrs	r3, r1
1000a7f4:	6891      	ldr	r1, [r2, #8]
1000a7f6:	607b      	str	r3, [r7, #4]
1000a7f8:	60e2      	str	r2, [r4, #12]
1000a7fa:	60a1      	str	r1, [r4, #8]
1000a7fc:	6094      	str	r4, [r2, #8]
1000a7fe:	60cc      	str	r4, [r1, #12]
1000a800:	2101      	movs	r1, #1
1000a802:	1082      	asrs	r2, r0, #2
1000a804:	4091      	lsls	r1, r2
1000a806:	4299      	cmp	r1, r3
1000a808:	d859      	bhi.n	1000a8be <_malloc_r+0x1c6>
1000a80a:	420b      	tst	r3, r1
1000a80c:	d105      	bne.n	1000a81a <_malloc_r+0x122>
1000a80e:	2203      	movs	r2, #3
1000a810:	4390      	bics	r0, r2
1000a812:	0049      	lsls	r1, r1, #1
1000a814:	3004      	adds	r0, #4
1000a816:	420b      	tst	r3, r1
1000a818:	d0fb      	beq.n	1000a812 <_malloc_r+0x11a>
1000a81a:	2303      	movs	r3, #3
1000a81c:	4698      	mov	r8, r3
1000a81e:	00c3      	lsls	r3, r0, #3
1000a820:	4699      	mov	r9, r3
1000a822:	44b9      	add	r9, r7
1000a824:	46cc      	mov	ip, r9
1000a826:	4682      	mov	sl, r0
1000a828:	4663      	mov	r3, ip
1000a82a:	68dc      	ldr	r4, [r3, #12]
1000a82c:	45a4      	cmp	ip, r4
1000a82e:	d107      	bne.n	1000a840 <_malloc_r+0x148>
1000a830:	e12c      	b.n	1000aa8c <_malloc_r+0x394>
1000a832:	2a00      	cmp	r2, #0
1000a834:	db00      	blt.n	1000a838 <_malloc_r+0x140>
1000a836:	e135      	b.n	1000aaa4 <_malloc_r+0x3ac>
1000a838:	68e4      	ldr	r4, [r4, #12]
1000a83a:	45a4      	cmp	ip, r4
1000a83c:	d100      	bne.n	1000a840 <_malloc_r+0x148>
1000a83e:	e125      	b.n	1000aa8c <_malloc_r+0x394>
1000a840:	4642      	mov	r2, r8
1000a842:	6863      	ldr	r3, [r4, #4]
1000a844:	4393      	bics	r3, r2
1000a846:	1b5a      	subs	r2, r3, r5
1000a848:	2a0f      	cmp	r2, #15
1000a84a:	ddf2      	ble.n	1000a832 <_malloc_r+0x13a>
1000a84c:	2001      	movs	r0, #1
1000a84e:	4680      	mov	r8, r0
1000a850:	1961      	adds	r1, r4, r5
1000a852:	4305      	orrs	r5, r0
1000a854:	6065      	str	r5, [r4, #4]
1000a856:	68a0      	ldr	r0, [r4, #8]
1000a858:	68e5      	ldr	r5, [r4, #12]
1000a85a:	3708      	adds	r7, #8
1000a85c:	60c5      	str	r5, [r0, #12]
1000a85e:	60a8      	str	r0, [r5, #8]
1000a860:	4640      	mov	r0, r8
1000a862:	4310      	orrs	r0, r2
1000a864:	60f9      	str	r1, [r7, #12]
1000a866:	60b9      	str	r1, [r7, #8]
1000a868:	6048      	str	r0, [r1, #4]
1000a86a:	60cf      	str	r7, [r1, #12]
1000a86c:	0030      	movs	r0, r6
1000a86e:	608f      	str	r7, [r1, #8]
1000a870:	50e2      	str	r2, [r4, r3]
1000a872:	f000 fa0b 	bl	1000ac8c <__malloc_unlock>
1000a876:	0020      	movs	r0, r4
1000a878:	3008      	adds	r0, #8
1000a87a:	e002      	b.n	1000a882 <_malloc_r+0x18a>
1000a87c:	230c      	movs	r3, #12
1000a87e:	2000      	movs	r0, #0
1000a880:	6033      	str	r3, [r6, #0]
1000a882:	b003      	add	sp, #12
1000a884:	bcf0      	pop	{r4, r5, r6, r7}
1000a886:	46bb      	mov	fp, r7
1000a888:	46b2      	mov	sl, r6
1000a88a:	46a9      	mov	r9, r5
1000a88c:	46a0      	mov	r8, r4
1000a88e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a890:	2180      	movs	r1, #128	; 0x80
1000a892:	233f      	movs	r3, #63	; 0x3f
1000a894:	2040      	movs	r0, #64	; 0x40
1000a896:	4698      	mov	r8, r3
1000a898:	0089      	lsls	r1, r1, #2
1000a89a:	e776      	b.n	1000a78a <_malloc_r+0x92>
1000a89c:	68dc      	ldr	r4, [r3, #12]
1000a89e:	3002      	adds	r0, #2
1000a8a0:	42a3      	cmp	r3, r4
1000a8a2:	d000      	beq.n	1000a8a6 <_malloc_r+0x1ae>
1000a8a4:	e744      	b.n	1000a730 <_malloc_r+0x38>
1000a8a6:	003a      	movs	r2, r7
1000a8a8:	693c      	ldr	r4, [r7, #16]
1000a8aa:	3208      	adds	r2, #8
1000a8ac:	4294      	cmp	r4, r2
1000a8ae:	d000      	beq.n	1000a8b2 <_malloc_r+0x1ba>
1000a8b0:	e786      	b.n	1000a7c0 <_malloc_r+0xc8>
1000a8b2:	2101      	movs	r1, #1
1000a8b4:	687b      	ldr	r3, [r7, #4]
1000a8b6:	1082      	asrs	r2, r0, #2
1000a8b8:	4091      	lsls	r1, r2
1000a8ba:	4299      	cmp	r1, r3
1000a8bc:	d9a5      	bls.n	1000a80a <_malloc_r+0x112>
1000a8be:	2303      	movs	r3, #3
1000a8c0:	68bc      	ldr	r4, [r7, #8]
1000a8c2:	6862      	ldr	r2, [r4, #4]
1000a8c4:	439a      	bics	r2, r3
1000a8c6:	4691      	mov	r9, r2
1000a8c8:	4295      	cmp	r5, r2
1000a8ca:	d803      	bhi.n	1000a8d4 <_malloc_r+0x1dc>
1000a8cc:	1b53      	subs	r3, r2, r5
1000a8ce:	2b0f      	cmp	r3, #15
1000a8d0:	dd00      	ble.n	1000a8d4 <_malloc_r+0x1dc>
1000a8d2:	e089      	b.n	1000a9e8 <_malloc_r+0x2f0>
1000a8d4:	0023      	movs	r3, r4
1000a8d6:	444b      	add	r3, r9
1000a8d8:	4a5f      	ldr	r2, [pc, #380]	; (1000aa58 <_malloc_r+0x360>)
1000a8da:	9301      	str	r3, [sp, #4]
1000a8dc:	4b5f      	ldr	r3, [pc, #380]	; (1000aa5c <_malloc_r+0x364>)
1000a8de:	4693      	mov	fp, r2
1000a8e0:	681b      	ldr	r3, [r3, #0]
1000a8e2:	6812      	ldr	r2, [r2, #0]
1000a8e4:	18eb      	adds	r3, r5, r3
1000a8e6:	3201      	adds	r2, #1
1000a8e8:	d100      	bne.n	1000a8ec <_malloc_r+0x1f4>
1000a8ea:	e13d      	b.n	1000ab68 <_malloc_r+0x470>
1000a8ec:	4a5c      	ldr	r2, [pc, #368]	; (1000aa60 <_malloc_r+0x368>)
1000a8ee:	4694      	mov	ip, r2
1000a8f0:	4463      	add	r3, ip
1000a8f2:	0b1b      	lsrs	r3, r3, #12
1000a8f4:	031b      	lsls	r3, r3, #12
1000a8f6:	9300      	str	r3, [sp, #0]
1000a8f8:	0030      	movs	r0, r6
1000a8fa:	9900      	ldr	r1, [sp, #0]
1000a8fc:	f000 f9ce 	bl	1000ac9c <_sbrk_r>
1000a900:	0003      	movs	r3, r0
1000a902:	4680      	mov	r8, r0
1000a904:	3301      	adds	r3, #1
1000a906:	d100      	bne.n	1000a90a <_malloc_r+0x212>
1000a908:	e0fa      	b.n	1000ab00 <_malloc_r+0x408>
1000a90a:	9b01      	ldr	r3, [sp, #4]
1000a90c:	4283      	cmp	r3, r0
1000a90e:	d900      	bls.n	1000a912 <_malloc_r+0x21a>
1000a910:	e0f4      	b.n	1000aafc <_malloc_r+0x404>
1000a912:	4b54      	ldr	r3, [pc, #336]	; (1000aa64 <_malloc_r+0x36c>)
1000a914:	9800      	ldr	r0, [sp, #0]
1000a916:	001a      	movs	r2, r3
1000a918:	469a      	mov	sl, r3
1000a91a:	6812      	ldr	r2, [r2, #0]
1000a91c:	0003      	movs	r3, r0
1000a91e:	4694      	mov	ip, r2
1000a920:	4651      	mov	r1, sl
1000a922:	4463      	add	r3, ip
1000a924:	600b      	str	r3, [r1, #0]
1000a926:	9901      	ldr	r1, [sp, #4]
1000a928:	001a      	movs	r2, r3
1000a92a:	4541      	cmp	r1, r8
1000a92c:	d100      	bne.n	1000a930 <_malloc_r+0x238>
1000a92e:	e151      	b.n	1000abd4 <_malloc_r+0x4dc>
1000a930:	465b      	mov	r3, fp
1000a932:	681b      	ldr	r3, [r3, #0]
1000a934:	3301      	adds	r3, #1
1000a936:	d100      	bne.n	1000a93a <_malloc_r+0x242>
1000a938:	e156      	b.n	1000abe8 <_malloc_r+0x4f0>
1000a93a:	4643      	mov	r3, r8
1000a93c:	9901      	ldr	r1, [sp, #4]
1000a93e:	1a5b      	subs	r3, r3, r1
1000a940:	189a      	adds	r2, r3, r2
1000a942:	4653      	mov	r3, sl
1000a944:	601a      	str	r2, [r3, #0]
1000a946:	2307      	movs	r3, #7
1000a948:	4642      	mov	r2, r8
1000a94a:	4641      	mov	r1, r8
1000a94c:	401a      	ands	r2, r3
1000a94e:	9201      	str	r2, [sp, #4]
1000a950:	4219      	tst	r1, r3
1000a952:	d100      	bne.n	1000a956 <_malloc_r+0x25e>
1000a954:	e112      	b.n	1000ab7c <_malloc_r+0x484>
1000a956:	2308      	movs	r3, #8
1000a958:	4698      	mov	r8, r3
1000a95a:	1a88      	subs	r0, r1, r2
1000a95c:	4b42      	ldr	r3, [pc, #264]	; (1000aa68 <_malloc_r+0x370>)
1000a95e:	9900      	ldr	r1, [sp, #0]
1000a960:	4480      	add	r8, r0
1000a962:	4441      	add	r1, r8
1000a964:	1a9b      	subs	r3, r3, r2
1000a966:	1a5b      	subs	r3, r3, r1
1000a968:	051b      	lsls	r3, r3, #20
1000a96a:	0d1b      	lsrs	r3, r3, #20
1000a96c:	9100      	str	r1, [sp, #0]
1000a96e:	0030      	movs	r0, r6
1000a970:	0019      	movs	r1, r3
1000a972:	469b      	mov	fp, r3
1000a974:	f000 f992 	bl	1000ac9c <_sbrk_r>
1000a978:	1c43      	adds	r3, r0, #1
1000a97a:	d100      	bne.n	1000a97e <_malloc_r+0x286>
1000a97c:	e150      	b.n	1000ac20 <_malloc_r+0x528>
1000a97e:	4643      	mov	r3, r8
1000a980:	1ac0      	subs	r0, r0, r3
1000a982:	0003      	movs	r3, r0
1000a984:	445b      	add	r3, fp
1000a986:	9300      	str	r3, [sp, #0]
1000a988:	4653      	mov	r3, sl
1000a98a:	4652      	mov	r2, sl
1000a98c:	681b      	ldr	r3, [r3, #0]
1000a98e:	2101      	movs	r1, #1
1000a990:	445b      	add	r3, fp
1000a992:	6013      	str	r3, [r2, #0]
1000a994:	4642      	mov	r2, r8
1000a996:	4640      	mov	r0, r8
1000a998:	60ba      	str	r2, [r7, #8]
1000a99a:	9a00      	ldr	r2, [sp, #0]
1000a99c:	430a      	orrs	r2, r1
1000a99e:	6042      	str	r2, [r0, #4]
1000a9a0:	42bc      	cmp	r4, r7
1000a9a2:	d100      	bne.n	1000a9a6 <_malloc_r+0x2ae>
1000a9a4:	e124      	b.n	1000abf0 <_malloc_r+0x4f8>
1000a9a6:	464a      	mov	r2, r9
1000a9a8:	2a0f      	cmp	r2, #15
1000a9aa:	d800      	bhi.n	1000a9ae <_malloc_r+0x2b6>
1000a9ac:	e122      	b.n	1000abf4 <_malloc_r+0x4fc>
1000a9ae:	2007      	movs	r0, #7
1000a9b0:	3a0c      	subs	r2, #12
1000a9b2:	4382      	bics	r2, r0
1000a9b4:	6860      	ldr	r0, [r4, #4]
1000a9b6:	4001      	ands	r1, r0
1000a9b8:	2005      	movs	r0, #5
1000a9ba:	4311      	orrs	r1, r2
1000a9bc:	6061      	str	r1, [r4, #4]
1000a9be:	18a1      	adds	r1, r4, r2
1000a9c0:	6048      	str	r0, [r1, #4]
1000a9c2:	6088      	str	r0, [r1, #8]
1000a9c4:	2a0f      	cmp	r2, #15
1000a9c6:	d900      	bls.n	1000a9ca <_malloc_r+0x2d2>
1000a9c8:	e135      	b.n	1000ac36 <_malloc_r+0x53e>
1000a9ca:	4642      	mov	r2, r8
1000a9cc:	4644      	mov	r4, r8
1000a9ce:	6852      	ldr	r2, [r2, #4]
1000a9d0:	4926      	ldr	r1, [pc, #152]	; (1000aa6c <_malloc_r+0x374>)
1000a9d2:	6808      	ldr	r0, [r1, #0]
1000a9d4:	4298      	cmp	r0, r3
1000a9d6:	d200      	bcs.n	1000a9da <_malloc_r+0x2e2>
1000a9d8:	600b      	str	r3, [r1, #0]
1000a9da:	4925      	ldr	r1, [pc, #148]	; (1000aa70 <_malloc_r+0x378>)
1000a9dc:	6808      	ldr	r0, [r1, #0]
1000a9de:	4298      	cmp	r0, r3
1000a9e0:	d300      	bcc.n	1000a9e4 <_malloc_r+0x2ec>
1000a9e2:	e08f      	b.n	1000ab04 <_malloc_r+0x40c>
1000a9e4:	600b      	str	r3, [r1, #0]
1000a9e6:	e08d      	b.n	1000ab04 <_malloc_r+0x40c>
1000a9e8:	2201      	movs	r2, #1
1000a9ea:	0029      	movs	r1, r5
1000a9ec:	4313      	orrs	r3, r2
1000a9ee:	4311      	orrs	r1, r2
1000a9f0:	1965      	adds	r5, r4, r5
1000a9f2:	6061      	str	r1, [r4, #4]
1000a9f4:	0030      	movs	r0, r6
1000a9f6:	60bd      	str	r5, [r7, #8]
1000a9f8:	606b      	str	r3, [r5, #4]
1000a9fa:	f000 f947 	bl	1000ac8c <__malloc_unlock>
1000a9fe:	0020      	movs	r0, r4
1000aa00:	3008      	adds	r0, #8
1000aa02:	e73e      	b.n	1000a882 <_malloc_r+0x18a>
1000aa04:	0a5a      	lsrs	r2, r3, #9
1000aa06:	2a04      	cmp	r2, #4
1000aa08:	d972      	bls.n	1000aaf0 <_malloc_r+0x3f8>
1000aa0a:	2a14      	cmp	r2, #20
1000aa0c:	d900      	bls.n	1000aa10 <_malloc_r+0x318>
1000aa0e:	e0c5      	b.n	1000ab9c <_malloc_r+0x4a4>
1000aa10:	0011      	movs	r1, r2
1000aa12:	325c      	adds	r2, #92	; 0x5c
1000aa14:	315b      	adds	r1, #91	; 0x5b
1000aa16:	00d2      	lsls	r2, r2, #3
1000aa18:	2308      	movs	r3, #8
1000aa1a:	425b      	negs	r3, r3
1000aa1c:	469c      	mov	ip, r3
1000aa1e:	18ba      	adds	r2, r7, r2
1000aa20:	4494      	add	ip, r2
1000aa22:	4663      	mov	r3, ip
1000aa24:	689a      	ldr	r2, [r3, #8]
1000aa26:	2303      	movs	r3, #3
1000aa28:	4698      	mov	r8, r3
1000aa2a:	4594      	cmp	ip, r2
1000aa2c:	d100      	bne.n	1000aa30 <_malloc_r+0x338>
1000aa2e:	e09e      	b.n	1000ab6e <_malloc_r+0x476>
1000aa30:	4643      	mov	r3, r8
1000aa32:	6851      	ldr	r1, [r2, #4]
1000aa34:	4399      	bics	r1, r3
1000aa36:	4549      	cmp	r1, r9
1000aa38:	d902      	bls.n	1000aa40 <_malloc_r+0x348>
1000aa3a:	6892      	ldr	r2, [r2, #8]
1000aa3c:	4594      	cmp	ip, r2
1000aa3e:	d1f7      	bne.n	1000aa30 <_malloc_r+0x338>
1000aa40:	68d3      	ldr	r3, [r2, #12]
1000aa42:	469c      	mov	ip, r3
1000aa44:	687b      	ldr	r3, [r7, #4]
1000aa46:	4661      	mov	r1, ip
1000aa48:	60a2      	str	r2, [r4, #8]
1000aa4a:	60e1      	str	r1, [r4, #12]
1000aa4c:	608c      	str	r4, [r1, #8]
1000aa4e:	60d4      	str	r4, [r2, #12]
1000aa50:	e6d6      	b.n	1000a800 <_malloc_r+0x108>
1000aa52:	46c0      	nop			; (mov r8, r8)
1000aa54:	20008a68 	.word	0x20008a68
1000aa58:	20008e70 	.word	0x20008e70
1000aa5c:	200166b0 	.word	0x200166b0
1000aa60:	0000100f 	.word	0x0000100f
1000aa64:	20016680 	.word	0x20016680
1000aa68:	00001008 	.word	0x00001008
1000aa6c:	200166a8 	.word	0x200166a8
1000aa70:	200166ac 	.word	0x200166ac
1000aa74:	2814      	cmp	r0, #20
1000aa76:	d952      	bls.n	1000ab1e <_malloc_r+0x426>
1000aa78:	2854      	cmp	r0, #84	; 0x54
1000aa7a:	d900      	bls.n	1000aa7e <_malloc_r+0x386>
1000aa7c:	e096      	b.n	1000abac <_malloc_r+0x4b4>
1000aa7e:	236e      	movs	r3, #110	; 0x6e
1000aa80:	4698      	mov	r8, r3
1000aa82:	0b28      	lsrs	r0, r5, #12
1000aa84:	4480      	add	r8, r0
1000aa86:	306f      	adds	r0, #111	; 0x6f
1000aa88:	00c1      	lsls	r1, r0, #3
1000aa8a:	e67e      	b.n	1000a78a <_malloc_r+0x92>
1000aa8c:	2308      	movs	r3, #8
1000aa8e:	469b      	mov	fp, r3
1000aa90:	3b07      	subs	r3, #7
1000aa92:	44dc      	add	ip, fp
1000aa94:	469b      	mov	fp, r3
1000aa96:	44da      	add	sl, fp
1000aa98:	4643      	mov	r3, r8
1000aa9a:	4652      	mov	r2, sl
1000aa9c:	4213      	tst	r3, r2
1000aa9e:	d000      	beq.n	1000aaa2 <_malloc_r+0x3aa>
1000aaa0:	e6c2      	b.n	1000a828 <_malloc_r+0x130>
1000aaa2:	e04c      	b.n	1000ab3e <_malloc_r+0x446>
1000aaa4:	2201      	movs	r2, #1
1000aaa6:	18e3      	adds	r3, r4, r3
1000aaa8:	6859      	ldr	r1, [r3, #4]
1000aaaa:	0030      	movs	r0, r6
1000aaac:	430a      	orrs	r2, r1
1000aaae:	605a      	str	r2, [r3, #4]
1000aab0:	68e3      	ldr	r3, [r4, #12]
1000aab2:	68a2      	ldr	r2, [r4, #8]
1000aab4:	60d3      	str	r3, [r2, #12]
1000aab6:	609a      	str	r2, [r3, #8]
1000aab8:	f000 f8e8 	bl	1000ac8c <__malloc_unlock>
1000aabc:	0020      	movs	r0, r4
1000aabe:	3008      	adds	r0, #8
1000aac0:	e6df      	b.n	1000a882 <_malloc_r+0x18a>
1000aac2:	002b      	movs	r3, r5
1000aac4:	08e8      	lsrs	r0, r5, #3
1000aac6:	3308      	adds	r3, #8
1000aac8:	e62a      	b.n	1000a720 <_malloc_r+0x28>
1000aaca:	2301      	movs	r3, #1
1000aacc:	1960      	adds	r0, r4, r5
1000aace:	431d      	orrs	r5, r3
1000aad0:	6065      	str	r5, [r4, #4]
1000aad2:	6178      	str	r0, [r7, #20]
1000aad4:	6138      	str	r0, [r7, #16]
1000aad6:	60c2      	str	r2, [r0, #12]
1000aad8:	6082      	str	r2, [r0, #8]
1000aada:	001a      	movs	r2, r3
1000aadc:	464b      	mov	r3, r9
1000aade:	430a      	orrs	r2, r1
1000aae0:	6042      	str	r2, [r0, #4]
1000aae2:	0030      	movs	r0, r6
1000aae4:	50e1      	str	r1, [r4, r3]
1000aae6:	f000 f8d1 	bl	1000ac8c <__malloc_unlock>
1000aaea:	0020      	movs	r0, r4
1000aaec:	3008      	adds	r0, #8
1000aaee:	e6c8      	b.n	1000a882 <_malloc_r+0x18a>
1000aaf0:	099a      	lsrs	r2, r3, #6
1000aaf2:	0011      	movs	r1, r2
1000aaf4:	3239      	adds	r2, #57	; 0x39
1000aaf6:	3138      	adds	r1, #56	; 0x38
1000aaf8:	00d2      	lsls	r2, r2, #3
1000aafa:	e78d      	b.n	1000aa18 <_malloc_r+0x320>
1000aafc:	42bc      	cmp	r4, r7
1000aafe:	d060      	beq.n	1000abc2 <_malloc_r+0x4ca>
1000ab00:	68bc      	ldr	r4, [r7, #8]
1000ab02:	6862      	ldr	r2, [r4, #4]
1000ab04:	2303      	movs	r3, #3
1000ab06:	439a      	bics	r2, r3
1000ab08:	1b53      	subs	r3, r2, r5
1000ab0a:	4295      	cmp	r5, r2
1000ab0c:	d802      	bhi.n	1000ab14 <_malloc_r+0x41c>
1000ab0e:	2b0f      	cmp	r3, #15
1000ab10:	dd00      	ble.n	1000ab14 <_malloc_r+0x41c>
1000ab12:	e769      	b.n	1000a9e8 <_malloc_r+0x2f0>
1000ab14:	0030      	movs	r0, r6
1000ab16:	f000 f8b9 	bl	1000ac8c <__malloc_unlock>
1000ab1a:	2000      	movs	r0, #0
1000ab1c:	e6b1      	b.n	1000a882 <_malloc_r+0x18a>
1000ab1e:	235b      	movs	r3, #91	; 0x5b
1000ab20:	4698      	mov	r8, r3
1000ab22:	4480      	add	r8, r0
1000ab24:	305c      	adds	r0, #92	; 0x5c
1000ab26:	00c1      	lsls	r1, r0, #3
1000ab28:	e62f      	b.n	1000a78a <_malloc_r+0x92>
1000ab2a:	2308      	movs	r3, #8
1000ab2c:	425b      	negs	r3, r3
1000ab2e:	469c      	mov	ip, r3
1000ab30:	44e1      	add	r9, ip
1000ab32:	464b      	mov	r3, r9
1000ab34:	689b      	ldr	r3, [r3, #8]
1000ab36:	3801      	subs	r0, #1
1000ab38:	454b      	cmp	r3, r9
1000ab3a:	d000      	beq.n	1000ab3e <_malloc_r+0x446>
1000ab3c:	e098      	b.n	1000ac70 <_malloc_r+0x578>
1000ab3e:	4643      	mov	r3, r8
1000ab40:	4203      	tst	r3, r0
1000ab42:	d1f2      	bne.n	1000ab2a <_malloc_r+0x432>
1000ab44:	687b      	ldr	r3, [r7, #4]
1000ab46:	438b      	bics	r3, r1
1000ab48:	607b      	str	r3, [r7, #4]
1000ab4a:	0049      	lsls	r1, r1, #1
1000ab4c:	4299      	cmp	r1, r3
1000ab4e:	d900      	bls.n	1000ab52 <_malloc_r+0x45a>
1000ab50:	e6b5      	b.n	1000a8be <_malloc_r+0x1c6>
1000ab52:	2900      	cmp	r1, #0
1000ab54:	d104      	bne.n	1000ab60 <_malloc_r+0x468>
1000ab56:	e6b2      	b.n	1000a8be <_malloc_r+0x1c6>
1000ab58:	2204      	movs	r2, #4
1000ab5a:	4694      	mov	ip, r2
1000ab5c:	0049      	lsls	r1, r1, #1
1000ab5e:	44e2      	add	sl, ip
1000ab60:	420b      	tst	r3, r1
1000ab62:	d0f9      	beq.n	1000ab58 <_malloc_r+0x460>
1000ab64:	4650      	mov	r0, sl
1000ab66:	e65a      	b.n	1000a81e <_malloc_r+0x126>
1000ab68:	3310      	adds	r3, #16
1000ab6a:	9300      	str	r3, [sp, #0]
1000ab6c:	e6c4      	b.n	1000a8f8 <_malloc_r+0x200>
1000ab6e:	1089      	asrs	r1, r1, #2
1000ab70:	3b02      	subs	r3, #2
1000ab72:	408b      	lsls	r3, r1
1000ab74:	6879      	ldr	r1, [r7, #4]
1000ab76:	430b      	orrs	r3, r1
1000ab78:	607b      	str	r3, [r7, #4]
1000ab7a:	e764      	b.n	1000aa46 <_malloc_r+0x34e>
1000ab7c:	9b00      	ldr	r3, [sp, #0]
1000ab7e:	0030      	movs	r0, r6
1000ab80:	4443      	add	r3, r8
1000ab82:	425b      	negs	r3, r3
1000ab84:	051b      	lsls	r3, r3, #20
1000ab86:	0d1b      	lsrs	r3, r3, #20
1000ab88:	0019      	movs	r1, r3
1000ab8a:	469b      	mov	fp, r3
1000ab8c:	f000 f886 	bl	1000ac9c <_sbrk_r>
1000ab90:	1c43      	adds	r3, r0, #1
1000ab92:	d000      	beq.n	1000ab96 <_malloc_r+0x49e>
1000ab94:	e6f3      	b.n	1000a97e <_malloc_r+0x286>
1000ab96:	2300      	movs	r3, #0
1000ab98:	469b      	mov	fp, r3
1000ab9a:	e6f5      	b.n	1000a988 <_malloc_r+0x290>
1000ab9c:	2a54      	cmp	r2, #84	; 0x54
1000ab9e:	d82b      	bhi.n	1000abf8 <_malloc_r+0x500>
1000aba0:	0b1a      	lsrs	r2, r3, #12
1000aba2:	0011      	movs	r1, r2
1000aba4:	326f      	adds	r2, #111	; 0x6f
1000aba6:	316e      	adds	r1, #110	; 0x6e
1000aba8:	00d2      	lsls	r2, r2, #3
1000abaa:	e735      	b.n	1000aa18 <_malloc_r+0x320>
1000abac:	23aa      	movs	r3, #170	; 0xaa
1000abae:	005b      	lsls	r3, r3, #1
1000abb0:	4298      	cmp	r0, r3
1000abb2:	d82b      	bhi.n	1000ac0c <_malloc_r+0x514>
1000abb4:	3bdd      	subs	r3, #221	; 0xdd
1000abb6:	4698      	mov	r8, r3
1000abb8:	0be8      	lsrs	r0, r5, #15
1000abba:	4480      	add	r8, r0
1000abbc:	3078      	adds	r0, #120	; 0x78
1000abbe:	00c1      	lsls	r1, r0, #3
1000abc0:	e5e3      	b.n	1000a78a <_malloc_r+0x92>
1000abc2:	4b2c      	ldr	r3, [pc, #176]	; (1000ac74 <_malloc_r+0x57c>)
1000abc4:	9a00      	ldr	r2, [sp, #0]
1000abc6:	469a      	mov	sl, r3
1000abc8:	681b      	ldr	r3, [r3, #0]
1000abca:	469c      	mov	ip, r3
1000abcc:	4653      	mov	r3, sl
1000abce:	4462      	add	r2, ip
1000abd0:	601a      	str	r2, [r3, #0]
1000abd2:	e6ad      	b.n	1000a930 <_malloc_r+0x238>
1000abd4:	0509      	lsls	r1, r1, #20
1000abd6:	d000      	beq.n	1000abda <_malloc_r+0x4e2>
1000abd8:	e6aa      	b.n	1000a930 <_malloc_r+0x238>
1000abda:	0002      	movs	r2, r0
1000abdc:	68bc      	ldr	r4, [r7, #8]
1000abde:	444a      	add	r2, r9
1000abe0:	3101      	adds	r1, #1
1000abe2:	430a      	orrs	r2, r1
1000abe4:	6062      	str	r2, [r4, #4]
1000abe6:	e6f3      	b.n	1000a9d0 <_malloc_r+0x2d8>
1000abe8:	465b      	mov	r3, fp
1000abea:	4642      	mov	r2, r8
1000abec:	601a      	str	r2, [r3, #0]
1000abee:	e6aa      	b.n	1000a946 <_malloc_r+0x24e>
1000abf0:	4644      	mov	r4, r8
1000abf2:	e6ed      	b.n	1000a9d0 <_malloc_r+0x2d8>
1000abf4:	6041      	str	r1, [r0, #4]
1000abf6:	e78d      	b.n	1000ab14 <_malloc_r+0x41c>
1000abf8:	21aa      	movs	r1, #170	; 0xaa
1000abfa:	0049      	lsls	r1, r1, #1
1000abfc:	428a      	cmp	r2, r1
1000abfe:	d824      	bhi.n	1000ac4a <_malloc_r+0x552>
1000ac00:	0bda      	lsrs	r2, r3, #15
1000ac02:	0011      	movs	r1, r2
1000ac04:	3278      	adds	r2, #120	; 0x78
1000ac06:	3177      	adds	r1, #119	; 0x77
1000ac08:	00d2      	lsls	r2, r2, #3
1000ac0a:	e705      	b.n	1000aa18 <_malloc_r+0x320>
1000ac0c:	4b1a      	ldr	r3, [pc, #104]	; (1000ac78 <_malloc_r+0x580>)
1000ac0e:	4298      	cmp	r0, r3
1000ac10:	d824      	bhi.n	1000ac5c <_malloc_r+0x564>
1000ac12:	237c      	movs	r3, #124	; 0x7c
1000ac14:	4698      	mov	r8, r3
1000ac16:	0ca8      	lsrs	r0, r5, #18
1000ac18:	4480      	add	r8, r0
1000ac1a:	307d      	adds	r0, #125	; 0x7d
1000ac1c:	00c1      	lsls	r1, r0, #3
1000ac1e:	e5b4      	b.n	1000a78a <_malloc_r+0x92>
1000ac20:	9a00      	ldr	r2, [sp, #0]
1000ac22:	9b01      	ldr	r3, [sp, #4]
1000ac24:	4694      	mov	ip, r2
1000ac26:	4642      	mov	r2, r8
1000ac28:	3b08      	subs	r3, #8
1000ac2a:	4463      	add	r3, ip
1000ac2c:	1a9b      	subs	r3, r3, r2
1000ac2e:	9300      	str	r3, [sp, #0]
1000ac30:	2300      	movs	r3, #0
1000ac32:	469b      	mov	fp, r3
1000ac34:	e6a8      	b.n	1000a988 <_malloc_r+0x290>
1000ac36:	0021      	movs	r1, r4
1000ac38:	0030      	movs	r0, r6
1000ac3a:	3108      	adds	r1, #8
1000ac3c:	f000 f8bc 	bl	1000adb8 <_free_r>
1000ac40:	4653      	mov	r3, sl
1000ac42:	68bc      	ldr	r4, [r7, #8]
1000ac44:	681b      	ldr	r3, [r3, #0]
1000ac46:	6862      	ldr	r2, [r4, #4]
1000ac48:	e6c2      	b.n	1000a9d0 <_malloc_r+0x2d8>
1000ac4a:	490b      	ldr	r1, [pc, #44]	; (1000ac78 <_malloc_r+0x580>)
1000ac4c:	428a      	cmp	r2, r1
1000ac4e:	d80b      	bhi.n	1000ac68 <_malloc_r+0x570>
1000ac50:	0c9a      	lsrs	r2, r3, #18
1000ac52:	0011      	movs	r1, r2
1000ac54:	327d      	adds	r2, #125	; 0x7d
1000ac56:	317c      	adds	r1, #124	; 0x7c
1000ac58:	00d2      	lsls	r2, r2, #3
1000ac5a:	e6dd      	b.n	1000aa18 <_malloc_r+0x320>
1000ac5c:	21fe      	movs	r1, #254	; 0xfe
1000ac5e:	237e      	movs	r3, #126	; 0x7e
1000ac60:	207f      	movs	r0, #127	; 0x7f
1000ac62:	4698      	mov	r8, r3
1000ac64:	0089      	lsls	r1, r1, #2
1000ac66:	e590      	b.n	1000a78a <_malloc_r+0x92>
1000ac68:	22fe      	movs	r2, #254	; 0xfe
1000ac6a:	217e      	movs	r1, #126	; 0x7e
1000ac6c:	0092      	lsls	r2, r2, #2
1000ac6e:	e6d3      	b.n	1000aa18 <_malloc_r+0x320>
1000ac70:	687b      	ldr	r3, [r7, #4]
1000ac72:	e76a      	b.n	1000ab4a <_malloc_r+0x452>
1000ac74:	20016680 	.word	0x20016680
1000ac78:	00000554 	.word	0x00000554

1000ac7c <__malloc_lock>:
1000ac7c:	b510      	push	{r4, lr}
1000ac7e:	4802      	ldr	r0, [pc, #8]	; (1000ac88 <__malloc_lock+0xc>)
1000ac80:	f000 f97c 	bl	1000af7c <__retarget_lock_acquire_recursive>
1000ac84:	bd10      	pop	{r4, pc}
1000ac86:	46c0      	nop			; (mov r8, r8)
1000ac88:	2001667c 	.word	0x2001667c

1000ac8c <__malloc_unlock>:
1000ac8c:	b510      	push	{r4, lr}
1000ac8e:	4802      	ldr	r0, [pc, #8]	; (1000ac98 <__malloc_unlock+0xc>)
1000ac90:	f000 f976 	bl	1000af80 <__retarget_lock_release_recursive>
1000ac94:	bd10      	pop	{r4, pc}
1000ac96:	46c0      	nop			; (mov r8, r8)
1000ac98:	2001667c 	.word	0x2001667c

1000ac9c <_sbrk_r>:
1000ac9c:	2300      	movs	r3, #0
1000ac9e:	b570      	push	{r4, r5, r6, lr}
1000aca0:	4d06      	ldr	r5, [pc, #24]	; (1000acbc <_sbrk_r+0x20>)
1000aca2:	0004      	movs	r4, r0
1000aca4:	0008      	movs	r0, r1
1000aca6:	602b      	str	r3, [r5, #0]
1000aca8:	f7f8 feae 	bl	10003a08 <_sbrk>
1000acac:	1c43      	adds	r3, r0, #1
1000acae:	d000      	beq.n	1000acb2 <_sbrk_r+0x16>
1000acb0:	bd70      	pop	{r4, r5, r6, pc}
1000acb2:	682b      	ldr	r3, [r5, #0]
1000acb4:	2b00      	cmp	r3, #0
1000acb6:	d0fb      	beq.n	1000acb0 <_sbrk_r+0x14>
1000acb8:	6023      	str	r3, [r4, #0]
1000acba:	e7f9      	b.n	1000acb0 <_sbrk_r+0x14>
1000acbc:	20016c58 	.word	0x20016c58

1000acc0 <strlen>:
1000acc0:	b510      	push	{r4, lr}
1000acc2:	0783      	lsls	r3, r0, #30
1000acc4:	d00a      	beq.n	1000acdc <strlen+0x1c>
1000acc6:	0003      	movs	r3, r0
1000acc8:	2103      	movs	r1, #3
1000acca:	e002      	b.n	1000acd2 <strlen+0x12>
1000accc:	3301      	adds	r3, #1
1000acce:	420b      	tst	r3, r1
1000acd0:	d005      	beq.n	1000acde <strlen+0x1e>
1000acd2:	781a      	ldrb	r2, [r3, #0]
1000acd4:	2a00      	cmp	r2, #0
1000acd6:	d1f9      	bne.n	1000accc <strlen+0xc>
1000acd8:	1a18      	subs	r0, r3, r0
1000acda:	bd10      	pop	{r4, pc}
1000acdc:	0003      	movs	r3, r0
1000acde:	6819      	ldr	r1, [r3, #0]
1000ace0:	4a0c      	ldr	r2, [pc, #48]	; (1000ad14 <strlen+0x54>)
1000ace2:	4c0d      	ldr	r4, [pc, #52]	; (1000ad18 <strlen+0x58>)
1000ace4:	188a      	adds	r2, r1, r2
1000ace6:	438a      	bics	r2, r1
1000ace8:	4222      	tst	r2, r4
1000acea:	d10f      	bne.n	1000ad0c <strlen+0x4c>
1000acec:	6859      	ldr	r1, [r3, #4]
1000acee:	4a09      	ldr	r2, [pc, #36]	; (1000ad14 <strlen+0x54>)
1000acf0:	3304      	adds	r3, #4
1000acf2:	188a      	adds	r2, r1, r2
1000acf4:	438a      	bics	r2, r1
1000acf6:	4222      	tst	r2, r4
1000acf8:	d108      	bne.n	1000ad0c <strlen+0x4c>
1000acfa:	6859      	ldr	r1, [r3, #4]
1000acfc:	4a05      	ldr	r2, [pc, #20]	; (1000ad14 <strlen+0x54>)
1000acfe:	3304      	adds	r3, #4
1000ad00:	188a      	adds	r2, r1, r2
1000ad02:	438a      	bics	r2, r1
1000ad04:	4222      	tst	r2, r4
1000ad06:	d0f1      	beq.n	1000acec <strlen+0x2c>
1000ad08:	e000      	b.n	1000ad0c <strlen+0x4c>
1000ad0a:	3301      	adds	r3, #1
1000ad0c:	781a      	ldrb	r2, [r3, #0]
1000ad0e:	2a00      	cmp	r2, #0
1000ad10:	d1fb      	bne.n	1000ad0a <strlen+0x4a>
1000ad12:	e7e1      	b.n	1000acd8 <strlen+0x18>
1000ad14:	fefefeff 	.word	0xfefefeff
1000ad18:	80808080 	.word	0x80808080

1000ad1c <_malloc_trim_r>:
1000ad1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000ad1e:	000c      	movs	r4, r1
1000ad20:	0005      	movs	r5, r0
1000ad22:	f7ff ffab 	bl	1000ac7c <__malloc_lock>
1000ad26:	4f20      	ldr	r7, [pc, #128]	; (1000ada8 <_malloc_trim_r+0x8c>)
1000ad28:	68bb      	ldr	r3, [r7, #8]
1000ad2a:	685e      	ldr	r6, [r3, #4]
1000ad2c:	2303      	movs	r3, #3
1000ad2e:	439e      	bics	r6, r3
1000ad30:	4b1e      	ldr	r3, [pc, #120]	; (1000adac <_malloc_trim_r+0x90>)
1000ad32:	1b34      	subs	r4, r6, r4
1000ad34:	469c      	mov	ip, r3
1000ad36:	4464      	add	r4, ip
1000ad38:	0b24      	lsrs	r4, r4, #12
1000ad3a:	3c01      	subs	r4, #1
1000ad3c:	3311      	adds	r3, #17
1000ad3e:	0324      	lsls	r4, r4, #12
1000ad40:	429c      	cmp	r4, r3
1000ad42:	db07      	blt.n	1000ad54 <_malloc_trim_r+0x38>
1000ad44:	2100      	movs	r1, #0
1000ad46:	0028      	movs	r0, r5
1000ad48:	f7ff ffa8 	bl	1000ac9c <_sbrk_r>
1000ad4c:	68bb      	ldr	r3, [r7, #8]
1000ad4e:	199b      	adds	r3, r3, r6
1000ad50:	4298      	cmp	r0, r3
1000ad52:	d004      	beq.n	1000ad5e <_malloc_trim_r+0x42>
1000ad54:	0028      	movs	r0, r5
1000ad56:	f7ff ff99 	bl	1000ac8c <__malloc_unlock>
1000ad5a:	2000      	movs	r0, #0
1000ad5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000ad5e:	0028      	movs	r0, r5
1000ad60:	4261      	negs	r1, r4
1000ad62:	f7ff ff9b 	bl	1000ac9c <_sbrk_r>
1000ad66:	1c43      	adds	r3, r0, #1
1000ad68:	d00d      	beq.n	1000ad86 <_malloc_trim_r+0x6a>
1000ad6a:	2201      	movs	r2, #1
1000ad6c:	68bb      	ldr	r3, [r7, #8]
1000ad6e:	1b36      	subs	r6, r6, r4
1000ad70:	4316      	orrs	r6, r2
1000ad72:	605e      	str	r6, [r3, #4]
1000ad74:	4b0e      	ldr	r3, [pc, #56]	; (1000adb0 <_malloc_trim_r+0x94>)
1000ad76:	0028      	movs	r0, r5
1000ad78:	681a      	ldr	r2, [r3, #0]
1000ad7a:	1b14      	subs	r4, r2, r4
1000ad7c:	601c      	str	r4, [r3, #0]
1000ad7e:	f7ff ff85 	bl	1000ac8c <__malloc_unlock>
1000ad82:	2001      	movs	r0, #1
1000ad84:	e7ea      	b.n	1000ad5c <_malloc_trim_r+0x40>
1000ad86:	2100      	movs	r1, #0
1000ad88:	0028      	movs	r0, r5
1000ad8a:	f7ff ff87 	bl	1000ac9c <_sbrk_r>
1000ad8e:	68ba      	ldr	r2, [r7, #8]
1000ad90:	1a83      	subs	r3, r0, r2
1000ad92:	2b0f      	cmp	r3, #15
1000ad94:	ddde      	ble.n	1000ad54 <_malloc_trim_r+0x38>
1000ad96:	4907      	ldr	r1, [pc, #28]	; (1000adb4 <_malloc_trim_r+0x98>)
1000ad98:	6809      	ldr	r1, [r1, #0]
1000ad9a:	1a40      	subs	r0, r0, r1
1000ad9c:	4904      	ldr	r1, [pc, #16]	; (1000adb0 <_malloc_trim_r+0x94>)
1000ad9e:	6008      	str	r0, [r1, #0]
1000ada0:	2101      	movs	r1, #1
1000ada2:	430b      	orrs	r3, r1
1000ada4:	6053      	str	r3, [r2, #4]
1000ada6:	e7d5      	b.n	1000ad54 <_malloc_trim_r+0x38>
1000ada8:	20008a68 	.word	0x20008a68
1000adac:	00000fef 	.word	0x00000fef
1000adb0:	20016680 	.word	0x20016680
1000adb4:	20008e70 	.word	0x20008e70

1000adb8 <_free_r>:
1000adb8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000adba:	46c6      	mov	lr, r8
1000adbc:	0005      	movs	r5, r0
1000adbe:	000c      	movs	r4, r1
1000adc0:	b500      	push	{lr}
1000adc2:	2900      	cmp	r1, #0
1000adc4:	d04f      	beq.n	1000ae66 <_free_r+0xae>
1000adc6:	f7ff ff59 	bl	1000ac7c <__malloc_lock>
1000adca:	0021      	movs	r1, r4
1000adcc:	3908      	subs	r1, #8
1000adce:	684c      	ldr	r4, [r1, #4]
1000add0:	2601      	movs	r6, #1
1000add2:	0022      	movs	r2, r4
1000add4:	2003      	movs	r0, #3
1000add6:	43b2      	bics	r2, r6
1000add8:	188f      	adds	r7, r1, r2
1000adda:	687b      	ldr	r3, [r7, #4]
1000addc:	4383      	bics	r3, r0
1000adde:	4862      	ldr	r0, [pc, #392]	; (1000af68 <_free_r+0x1b0>)
1000ade0:	4698      	mov	r8, r3
1000ade2:	6883      	ldr	r3, [r0, #8]
1000ade4:	42bb      	cmp	r3, r7
1000ade6:	d06a      	beq.n	1000aebe <_free_r+0x106>
1000ade8:	4643      	mov	r3, r8
1000adea:	607b      	str	r3, [r7, #4]
1000adec:	4226      	tst	r6, r4
1000adee:	d11e      	bne.n	1000ae2e <_free_r+0x76>
1000adf0:	2308      	movs	r3, #8
1000adf2:	469c      	mov	ip, r3
1000adf4:	680c      	ldr	r4, [r1, #0]
1000adf6:	4484      	add	ip, r0
1000adf8:	1b09      	subs	r1, r1, r4
1000adfa:	1912      	adds	r2, r2, r4
1000adfc:	688c      	ldr	r4, [r1, #8]
1000adfe:	4564      	cmp	r4, ip
1000ae00:	d04f      	beq.n	1000aea2 <_free_r+0xea>
1000ae02:	68cb      	ldr	r3, [r1, #12]
1000ae04:	60e3      	str	r3, [r4, #12]
1000ae06:	609c      	str	r4, [r3, #8]
1000ae08:	4643      	mov	r3, r8
1000ae0a:	18fc      	adds	r4, r7, r3
1000ae0c:	6864      	ldr	r4, [r4, #4]
1000ae0e:	4234      	tst	r4, r6
1000ae10:	d111      	bne.n	1000ae36 <_free_r+0x7e>
1000ae12:	68bb      	ldr	r3, [r7, #8]
1000ae14:	4c55      	ldr	r4, [pc, #340]	; (1000af6c <_free_r+0x1b4>)
1000ae16:	4442      	add	r2, r8
1000ae18:	42a3      	cmp	r3, r4
1000ae1a:	d100      	bne.n	1000ae1e <_free_r+0x66>
1000ae1c:	e07e      	b.n	1000af1c <_free_r+0x164>
1000ae1e:	68fc      	ldr	r4, [r7, #12]
1000ae20:	60dc      	str	r4, [r3, #12]
1000ae22:	60a3      	str	r3, [r4, #8]
1000ae24:	2301      	movs	r3, #1
1000ae26:	4313      	orrs	r3, r2
1000ae28:	604b      	str	r3, [r1, #4]
1000ae2a:	508a      	str	r2, [r1, r2]
1000ae2c:	e006      	b.n	1000ae3c <_free_r+0x84>
1000ae2e:	18fc      	adds	r4, r7, r3
1000ae30:	6864      	ldr	r4, [r4, #4]
1000ae32:	4234      	tst	r4, r6
1000ae34:	d0ed      	beq.n	1000ae12 <_free_r+0x5a>
1000ae36:	4316      	orrs	r6, r2
1000ae38:	604e      	str	r6, [r1, #4]
1000ae3a:	603a      	str	r2, [r7, #0]
1000ae3c:	2380      	movs	r3, #128	; 0x80
1000ae3e:	009b      	lsls	r3, r3, #2
1000ae40:	429a      	cmp	r2, r3
1000ae42:	d213      	bcs.n	1000ae6c <_free_r+0xb4>
1000ae44:	0954      	lsrs	r4, r2, #5
1000ae46:	08d3      	lsrs	r3, r2, #3
1000ae48:	2201      	movs	r2, #1
1000ae4a:	40a2      	lsls	r2, r4
1000ae4c:	6844      	ldr	r4, [r0, #4]
1000ae4e:	00db      	lsls	r3, r3, #3
1000ae50:	4322      	orrs	r2, r4
1000ae52:	6042      	str	r2, [r0, #4]
1000ae54:	1818      	adds	r0, r3, r0
1000ae56:	6883      	ldr	r3, [r0, #8]
1000ae58:	60c8      	str	r0, [r1, #12]
1000ae5a:	608b      	str	r3, [r1, #8]
1000ae5c:	6081      	str	r1, [r0, #8]
1000ae5e:	60d9      	str	r1, [r3, #12]
1000ae60:	0028      	movs	r0, r5
1000ae62:	f7ff ff13 	bl	1000ac8c <__malloc_unlock>
1000ae66:	bc80      	pop	{r7}
1000ae68:	46b8      	mov	r8, r7
1000ae6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ae6c:	0a53      	lsrs	r3, r2, #9
1000ae6e:	2b04      	cmp	r3, #4
1000ae70:	d83e      	bhi.n	1000aef0 <_free_r+0x138>
1000ae72:	0994      	lsrs	r4, r2, #6
1000ae74:	0026      	movs	r6, r4
1000ae76:	3439      	adds	r4, #57	; 0x39
1000ae78:	3638      	adds	r6, #56	; 0x38
1000ae7a:	00e4      	lsls	r4, r4, #3
1000ae7c:	1904      	adds	r4, r0, r4
1000ae7e:	6823      	ldr	r3, [r4, #0]
1000ae80:	3c08      	subs	r4, #8
1000ae82:	2703      	movs	r7, #3
1000ae84:	429c      	cmp	r4, r3
1000ae86:	d042      	beq.n	1000af0e <_free_r+0x156>
1000ae88:	6858      	ldr	r0, [r3, #4]
1000ae8a:	43b8      	bics	r0, r7
1000ae8c:	4290      	cmp	r0, r2
1000ae8e:	d902      	bls.n	1000ae96 <_free_r+0xde>
1000ae90:	689b      	ldr	r3, [r3, #8]
1000ae92:	429c      	cmp	r4, r3
1000ae94:	d1f8      	bne.n	1000ae88 <_free_r+0xd0>
1000ae96:	68dc      	ldr	r4, [r3, #12]
1000ae98:	60cc      	str	r4, [r1, #12]
1000ae9a:	608b      	str	r3, [r1, #8]
1000ae9c:	60a1      	str	r1, [r4, #8]
1000ae9e:	60d9      	str	r1, [r3, #12]
1000aea0:	e7de      	b.n	1000ae60 <_free_r+0xa8>
1000aea2:	4643      	mov	r3, r8
1000aea4:	18f8      	adds	r0, r7, r3
1000aea6:	6840      	ldr	r0, [r0, #4]
1000aea8:	4230      	tst	r0, r6
1000aeaa:	d157      	bne.n	1000af5c <_free_r+0x1a4>
1000aeac:	68fb      	ldr	r3, [r7, #12]
1000aeae:	68b8      	ldr	r0, [r7, #8]
1000aeb0:	4442      	add	r2, r8
1000aeb2:	4316      	orrs	r6, r2
1000aeb4:	60c3      	str	r3, [r0, #12]
1000aeb6:	6098      	str	r0, [r3, #8]
1000aeb8:	604e      	str	r6, [r1, #4]
1000aeba:	508a      	str	r2, [r1, r2]
1000aebc:	e7d0      	b.n	1000ae60 <_free_r+0xa8>
1000aebe:	0013      	movs	r3, r2
1000aec0:	4443      	add	r3, r8
1000aec2:	4226      	tst	r6, r4
1000aec4:	d106      	bne.n	1000aed4 <_free_r+0x11c>
1000aec6:	680a      	ldr	r2, [r1, #0]
1000aec8:	1a89      	subs	r1, r1, r2
1000aeca:	688c      	ldr	r4, [r1, #8]
1000aecc:	189b      	adds	r3, r3, r2
1000aece:	68ca      	ldr	r2, [r1, #12]
1000aed0:	60e2      	str	r2, [r4, #12]
1000aed2:	6094      	str	r4, [r2, #8]
1000aed4:	2201      	movs	r2, #1
1000aed6:	431a      	orrs	r2, r3
1000aed8:	604a      	str	r2, [r1, #4]
1000aeda:	4a25      	ldr	r2, [pc, #148]	; (1000af70 <_free_r+0x1b8>)
1000aedc:	6081      	str	r1, [r0, #8]
1000aede:	6812      	ldr	r2, [r2, #0]
1000aee0:	429a      	cmp	r2, r3
1000aee2:	d8bd      	bhi.n	1000ae60 <_free_r+0xa8>
1000aee4:	4b23      	ldr	r3, [pc, #140]	; (1000af74 <_free_r+0x1bc>)
1000aee6:	0028      	movs	r0, r5
1000aee8:	6819      	ldr	r1, [r3, #0]
1000aeea:	f7ff ff17 	bl	1000ad1c <_malloc_trim_r>
1000aeee:	e7b7      	b.n	1000ae60 <_free_r+0xa8>
1000aef0:	2b14      	cmp	r3, #20
1000aef2:	d907      	bls.n	1000af04 <_free_r+0x14c>
1000aef4:	2b54      	cmp	r3, #84	; 0x54
1000aef6:	d81a      	bhi.n	1000af2e <_free_r+0x176>
1000aef8:	0b14      	lsrs	r4, r2, #12
1000aefa:	0026      	movs	r6, r4
1000aefc:	346f      	adds	r4, #111	; 0x6f
1000aefe:	366e      	adds	r6, #110	; 0x6e
1000af00:	00e4      	lsls	r4, r4, #3
1000af02:	e7bb      	b.n	1000ae7c <_free_r+0xc4>
1000af04:	001e      	movs	r6, r3
1000af06:	335c      	adds	r3, #92	; 0x5c
1000af08:	365b      	adds	r6, #91	; 0x5b
1000af0a:	00dc      	lsls	r4, r3, #3
1000af0c:	e7b6      	b.n	1000ae7c <_free_r+0xc4>
1000af0e:	2201      	movs	r2, #1
1000af10:	10b6      	asrs	r6, r6, #2
1000af12:	40b2      	lsls	r2, r6
1000af14:	6846      	ldr	r6, [r0, #4]
1000af16:	4332      	orrs	r2, r6
1000af18:	6042      	str	r2, [r0, #4]
1000af1a:	e7bd      	b.n	1000ae98 <_free_r+0xe0>
1000af1c:	60d9      	str	r1, [r3, #12]
1000af1e:	6099      	str	r1, [r3, #8]
1000af20:	60cb      	str	r3, [r1, #12]
1000af22:	608b      	str	r3, [r1, #8]
1000af24:	2301      	movs	r3, #1
1000af26:	4313      	orrs	r3, r2
1000af28:	604b      	str	r3, [r1, #4]
1000af2a:	508a      	str	r2, [r1, r2]
1000af2c:	e798      	b.n	1000ae60 <_free_r+0xa8>
1000af2e:	24aa      	movs	r4, #170	; 0xaa
1000af30:	0064      	lsls	r4, r4, #1
1000af32:	42a3      	cmp	r3, r4
1000af34:	d805      	bhi.n	1000af42 <_free_r+0x18a>
1000af36:	0bd4      	lsrs	r4, r2, #15
1000af38:	0026      	movs	r6, r4
1000af3a:	3478      	adds	r4, #120	; 0x78
1000af3c:	3677      	adds	r6, #119	; 0x77
1000af3e:	00e4      	lsls	r4, r4, #3
1000af40:	e79c      	b.n	1000ae7c <_free_r+0xc4>
1000af42:	4c0d      	ldr	r4, [pc, #52]	; (1000af78 <_free_r+0x1c0>)
1000af44:	42a3      	cmp	r3, r4
1000af46:	d805      	bhi.n	1000af54 <_free_r+0x19c>
1000af48:	0c94      	lsrs	r4, r2, #18
1000af4a:	0026      	movs	r6, r4
1000af4c:	347d      	adds	r4, #125	; 0x7d
1000af4e:	367c      	adds	r6, #124	; 0x7c
1000af50:	00e4      	lsls	r4, r4, #3
1000af52:	e793      	b.n	1000ae7c <_free_r+0xc4>
1000af54:	24fe      	movs	r4, #254	; 0xfe
1000af56:	267e      	movs	r6, #126	; 0x7e
1000af58:	00a4      	lsls	r4, r4, #2
1000af5a:	e78f      	b.n	1000ae7c <_free_r+0xc4>
1000af5c:	0033      	movs	r3, r6
1000af5e:	4313      	orrs	r3, r2
1000af60:	604b      	str	r3, [r1, #4]
1000af62:	603a      	str	r2, [r7, #0]
1000af64:	e77c      	b.n	1000ae60 <_free_r+0xa8>
1000af66:	46c0      	nop			; (mov r8, r8)
1000af68:	20008a68 	.word	0x20008a68
1000af6c:	20008a70 	.word	0x20008a70
1000af70:	20008e74 	.word	0x20008e74
1000af74:	200166b0 	.word	0x200166b0
1000af78:	00000554 	.word	0x00000554

1000af7c <__retarget_lock_acquire_recursive>:
1000af7c:	4770      	bx	lr
1000af7e:	46c0      	nop			; (mov r8, r8)

1000af80 <__retarget_lock_release_recursive>:
1000af80:	4770      	bx	lr
1000af82:	46c0      	nop			; (mov r8, r8)

1000af84 <_fini>:
1000af84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000af86:	46c0      	nop			; (mov r8, r8)

1000af88 <__mutex_exit_veneer>:
1000af88:	b401      	push	{r0}
1000af8a:	4802      	ldr	r0, [pc, #8]	; (1000af94 <__mutex_exit_veneer+0xc>)
1000af8c:	4684      	mov	ip, r0
1000af8e:	bc01      	pop	{r0}
1000af90:	4760      	bx	ip
1000af92:	bf00      	nop
1000af94:	2000204d 	.word	0x2000204d

1000af98 <____aeabi_ldiv0_veneer>:
1000af98:	b401      	push	{r0}
1000af9a:	4802      	ldr	r0, [pc, #8]	; (1000afa4 <____aeabi_ldiv0_veneer+0xc>)
1000af9c:	4684      	mov	ip, r0
1000af9e:	bc01      	pop	{r0}
1000afa0:	4760      	bx	ip
1000afa2:	bf00      	nop
1000afa4:	2000264d 	.word	0x2000264d

1000afa8 <____aeabi_idiv0_veneer>:
1000afa8:	b401      	push	{r0}
1000afaa:	4802      	ldr	r0, [pc, #8]	; (1000afb4 <____aeabi_idiv0_veneer+0xc>)
1000afac:	4684      	mov	ip, r0
1000afae:	bc01      	pop	{r0}
1000afb0:	4760      	bx	ip
1000afb2:	bf00      	nop
1000afb4:	2000264d 	.word	0x2000264d

1000afb8 <__mutex_try_enter_veneer>:
1000afb8:	b401      	push	{r0}
1000afba:	4802      	ldr	r0, [pc, #8]	; (1000afc4 <__mutex_try_enter_veneer+0xc>)
1000afbc:	4684      	mov	ip, r0
1000afbe:	bc01      	pop	{r0}
1000afc0:	4760      	bx	ip
1000afc2:	bf00      	nop
1000afc4:	20001f71 	.word	0x20001f71

1000afc8 <__mutex_enter_timeout_ms_veneer>:
1000afc8:	b401      	push	{r0}
1000afca:	4802      	ldr	r0, [pc, #8]	; (1000afd4 <__mutex_enter_timeout_ms_veneer+0xc>)
1000afcc:	4684      	mov	ip, r0
1000afce:	bc01      	pop	{r0}
1000afd0:	4760      	bx	ip
1000afd2:	bf00      	nop
1000afd4:	20001fb5 	.word	0x20001fb5

1000afd8 <__flash_do_cmd.constprop.0_veneer>:
1000afd8:	b401      	push	{r0}
1000afda:	4802      	ldr	r0, [pc, #8]	; (1000afe4 <__flash_do_cmd.constprop.0_veneer+0xc>)
1000afdc:	4684      	mov	ip, r0
1000afde:	bc01      	pop	{r0}
1000afe0:	4760      	bx	ip
1000afe2:	bf00      	nop
1000afe4:	20001e81 	.word	0x20001e81

1000afe8 <__mutex_enter_blocking_veneer>:
1000afe8:	b401      	push	{r0}
1000afea:	4802      	ldr	r0, [pc, #8]	; (1000aff4 <__mutex_enter_blocking_veneer+0xc>)
1000afec:	4684      	mov	ip, r0
1000afee:	bc01      	pop	{r0}
1000aff0:	4760      	bx	ip
1000aff2:	bf00      	nop
1000aff4:	20001f25 	.word	0x20001f25

Disassembly of section .data:

200000c0 <RenderAText>:
200000c0:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
200000c2:	4644      	mov	r4, r8
200000c4:	b410      	push	{r4}
200000c6:	9c09      	ldr	r4, [sp, #36]	; 0x24
200000c8:	4e49      	ldr	r6, [pc, #292]	; (200001f0 <RenderAText_pSioBase>)
200000ca:	6632      	str	r2, [r6, #96]	; 0x60
200000cc:	8a62      	ldrh	r2, [r4, #18]
200000ce:	6672      	str	r2, [r6, #100]	; 0x64
200000d0:	8925      	ldrh	r5, [r4, #8]
200000d2:	2703      	movs	r7, #3
200000d4:	43bd      	bics	r5, r7
200000d6:	9509      	str	r5, [sp, #36]	; 0x24
200000d8:	43b9      	bics	r1, r7
200000da:	43bb      	bics	r3, r7
200000dc:	9303      	str	r3, [sp, #12]
200000de:	6f75      	ldr	r5, [r6, #116]	; 0x74
200000e0:	6f32      	ldr	r2, [r6, #112]	; 0x70
200000e2:	022d      	lsls	r5, r5, #8
200000e4:	6963      	ldr	r3, [r4, #20]
200000e6:	442b      	add	r3, r5
200000e8:	8865      	ldrh	r5, [r4, #2]
200000ea:	436a      	muls	r2, r5
200000ec:	68e5      	ldr	r5, [r4, #12]
200000ee:	442a      	add	r2, r5
200000f0:	9202      	str	r2, [sp, #8]
200000f2:	08ce      	lsrs	r6, r1, #3
200000f4:	4432      	add	r2, r6
200000f6:	4432      	add	r2, r6
200000f8:	69a5      	ldr	r5, [r4, #24]
200000fa:	46a8      	mov	r8, r5
200000fc:	4d3b      	ldr	r5, [pc, #236]	; (200001ec <RenderAText_Addr>)
200000fe:	46ae      	mov	lr, r5
20000100:	074e      	lsls	r6, r1, #29
20000102:	d521      	bpl.n	20000148 <RenderAText+0x88>
20000104:	7856      	ldrb	r6, [r2, #1]
20000106:	4645      	mov	r5, r8
20000108:	0934      	lsrs	r4, r6, #4
2000010a:	5d2c      	ldrb	r4, [r5, r4]
2000010c:	0736      	lsls	r6, r6, #28
2000010e:	0f36      	lsrs	r6, r6, #28
20000110:	5dae      	ldrb	r6, [r5, r6]
20000112:	0225      	lsls	r5, r4, #8
20000114:	4325      	orrs	r5, r4
20000116:	042c      	lsls	r4, r5, #16
20000118:	432c      	orrs	r4, r5
2000011a:	0235      	lsls	r5, r6, #8
2000011c:	4335      	orrs	r5, r6
2000011e:	042e      	lsls	r6, r5, #16
20000120:	432e      	orrs	r6, r5
20000122:	4066      	eors	r6, r4
20000124:	7815      	ldrb	r5, [r2, #0]
20000126:	5d5d      	ldrb	r5, [r3, r5]
20000128:	3202      	adds	r2, #2
2000012a:	00ed      	lsls	r5, r5, #3
2000012c:	4475      	add	r5, lr
2000012e:	686f      	ldr	r7, [r5, #4]
20000130:	4037      	ands	r7, r6
20000132:	4067      	eors	r7, r4
20000134:	c080      	stmia	r0!, {r7}
20000136:	3104      	adds	r1, #4
20000138:	9f09      	ldr	r7, [sp, #36]	; 0x24
2000013a:	42b9      	cmp	r1, r7
2000013c:	d301      	bcc.n	20000142 <RenderAText+0x82>
2000013e:	2100      	movs	r1, #0
20000140:	9a02      	ldr	r2, [sp, #8]
20000142:	9f03      	ldr	r7, [sp, #12]
20000144:	3f04      	subs	r7, #4
20000146:	9703      	str	r7, [sp, #12]
20000148:	9f09      	ldr	r7, [sp, #36]	; 0x24
2000014a:	1a7f      	subs	r7, r7, r1

2000014c <RenderAText_OutLoop>:
2000014c:	9e03      	ldr	r6, [sp, #12]
2000014e:	42b7      	cmp	r7, r6
20000150:	d900      	bls.n	20000154 <RenderAText_OutLoop+0x8>
20000152:	4637      	mov	r7, r6
20000154:	2f08      	cmp	r7, #8
20000156:	d220      	bcs.n	2000019a <RenderAText_Last+0x3e>
20000158:	2f04      	cmp	r7, #4
2000015a:	d31b      	bcc.n	20000194 <RenderAText_Last+0x38>

2000015c <RenderAText_Last>:
2000015c:	7856      	ldrb	r6, [r2, #1]
2000015e:	4645      	mov	r5, r8
20000160:	0934      	lsrs	r4, r6, #4
20000162:	5d2c      	ldrb	r4, [r5, r4]
20000164:	0736      	lsls	r6, r6, #28
20000166:	0f36      	lsrs	r6, r6, #28
20000168:	5dae      	ldrb	r6, [r5, r6]
2000016a:	0225      	lsls	r5, r4, #8
2000016c:	4325      	orrs	r5, r4
2000016e:	042c      	lsls	r4, r5, #16
20000170:	432c      	orrs	r4, r5
20000172:	0235      	lsls	r5, r6, #8
20000174:	4335      	orrs	r5, r6
20000176:	042e      	lsls	r6, r5, #16
20000178:	432e      	orrs	r6, r5
2000017a:	4066      	eors	r6, r4
2000017c:	7815      	ldrb	r5, [r2, #0]
2000017e:	5d5d      	ldrb	r5, [r3, r5]
20000180:	3202      	adds	r2, #2
20000182:	00ed      	lsls	r5, r5, #3
20000184:	4475      	add	r5, lr
20000186:	6829      	ldr	r1, [r5, #0]
20000188:	4031      	ands	r1, r6
2000018a:	4061      	eors	r1, r4
2000018c:	c002      	stmia	r0!, {r1}
2000018e:	9a02      	ldr	r2, [sp, #8]
20000190:	2f04      	cmp	r7, #4
20000192:	d8db      	bhi.n	2000014c <RenderAText_OutLoop>
20000194:	bc10      	pop	{r4}
20000196:	46a0      	mov	r8, r4
20000198:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
2000019a:	08b9      	lsrs	r1, r7, #2
2000019c:	008d      	lsls	r5, r1, #2
2000019e:	1b76      	subs	r6, r6, r5
200001a0:	9603      	str	r6, [sp, #12]
200001a2:	3901      	subs	r1, #1

200001a4 <RenderAText_InLoop>:
200001a4:	7856      	ldrb	r6, [r2, #1]
200001a6:	4645      	mov	r5, r8
200001a8:	0934      	lsrs	r4, r6, #4
200001aa:	5d2c      	ldrb	r4, [r5, r4]
200001ac:	0736      	lsls	r6, r6, #28
200001ae:	0f36      	lsrs	r6, r6, #28
200001b0:	5dae      	ldrb	r6, [r5, r6]
200001b2:	0225      	lsls	r5, r4, #8
200001b4:	4325      	orrs	r5, r4
200001b6:	042c      	lsls	r4, r5, #16
200001b8:	432c      	orrs	r4, r5
200001ba:	0235      	lsls	r5, r6, #8
200001bc:	4335      	orrs	r5, r6
200001be:	042e      	lsls	r6, r5, #16
200001c0:	432e      	orrs	r6, r5
200001c2:	4066      	eors	r6, r4
200001c4:	7815      	ldrb	r5, [r2, #0]
200001c6:	5d5d      	ldrb	r5, [r3, r5]
200001c8:	3202      	adds	r2, #2
200001ca:	00ed      	lsls	r5, r5, #3
200001cc:	4475      	add	r5, lr
200001ce:	682f      	ldr	r7, [r5, #0]
200001d0:	4037      	ands	r7, r6
200001d2:	4067      	eors	r7, r4
200001d4:	c080      	stmia	r0!, {r7}
200001d6:	686f      	ldr	r7, [r5, #4]
200001d8:	4037      	ands	r7, r6
200001da:	4067      	eors	r7, r4
200001dc:	c080      	stmia	r0!, {r7}
200001de:	3902      	subs	r1, #2
200001e0:	d8e0      	bhi.n	200001a4 <RenderAText_InLoop>
200001e2:	9f09      	ldr	r7, [sp, #36]	; 0x24
200001e4:	d0ba      	beq.n	2000015c <RenderAText_Last>
200001e6:	9a02      	ldr	r2, [sp, #8]
200001e8:	e7b0      	b.n	2000014c <RenderAText_OutLoop>
200001ea:	46c0      	nop			; (mov r8, r8)

200001ec <RenderAText_Addr>:
200001ec:	2000e56c 	.word	0x2000e56c

200001f0 <RenderAText_pSioBase>:
200001f0:	d0000000 	.word	0xd0000000

200001f4 <RenderAttrib8>:
200001f4:	b5fc      	push	{r2, r3, r4, r5, r6, r7, lr}
200001f6:	4644      	mov	r4, r8
200001f8:	b410      	push	{r4}
200001fa:	9c08      	ldr	r4, [sp, #32]
200001fc:	8925      	ldrh	r5, [r4, #8]
200001fe:	2703      	movs	r7, #3
20000200:	43bd      	bics	r5, r7
20000202:	9508      	str	r5, [sp, #32]
20000204:	43b9      	bics	r1, r7
20000206:	43bb      	bics	r3, r7
20000208:	9302      	str	r3, [sp, #8]
2000020a:	08d3      	lsrs	r3, r2, #3
2000020c:	8865      	ldrh	r5, [r4, #2]
2000020e:	436b      	muls	r3, r5
20000210:	6967      	ldr	r7, [r4, #20]
20000212:	443b      	add	r3, r7
20000214:	436a      	muls	r2, r5
20000216:	68e5      	ldr	r5, [r4, #12]
20000218:	442a      	add	r2, r5
2000021a:	9201      	str	r2, [sp, #4]
2000021c:	1a9b      	subs	r3, r3, r2
2000021e:	08ce      	lsrs	r6, r1, #3
20000220:	4432      	add	r2, r6
20000222:	69a5      	ldr	r5, [r4, #24]
20000224:	46a8      	mov	r8, r5
20000226:	4d39      	ldr	r5, [pc, #228]	; (2000030c <RenderAttrib8_Addr>)
20000228:	46ae      	mov	lr, r5
2000022a:	074e      	lsls	r6, r1, #29
2000022c:	d520      	bpl.n	20000270 <RenderAttrib8+0x7c>
2000022e:	5cd6      	ldrb	r6, [r2, r3]
20000230:	4645      	mov	r5, r8
20000232:	0934      	lsrs	r4, r6, #4
20000234:	5d2c      	ldrb	r4, [r5, r4]
20000236:	0736      	lsls	r6, r6, #28
20000238:	0f36      	lsrs	r6, r6, #28
2000023a:	5dae      	ldrb	r6, [r5, r6]
2000023c:	0225      	lsls	r5, r4, #8
2000023e:	4325      	orrs	r5, r4
20000240:	042c      	lsls	r4, r5, #16
20000242:	432c      	orrs	r4, r5
20000244:	0235      	lsls	r5, r6, #8
20000246:	4335      	orrs	r5, r6
20000248:	042e      	lsls	r6, r5, #16
2000024a:	432e      	orrs	r6, r5
2000024c:	4066      	eors	r6, r4
2000024e:	7815      	ldrb	r5, [r2, #0]
20000250:	3201      	adds	r2, #1
20000252:	00ed      	lsls	r5, r5, #3
20000254:	4475      	add	r5, lr
20000256:	686f      	ldr	r7, [r5, #4]
20000258:	4037      	ands	r7, r6
2000025a:	4067      	eors	r7, r4
2000025c:	c080      	stmia	r0!, {r7}
2000025e:	3104      	adds	r1, #4
20000260:	9f08      	ldr	r7, [sp, #32]
20000262:	42b9      	cmp	r1, r7
20000264:	d301      	bcc.n	2000026a <RenderAttrib8+0x76>
20000266:	2100      	movs	r1, #0
20000268:	9a01      	ldr	r2, [sp, #4]
2000026a:	9f02      	ldr	r7, [sp, #8]
2000026c:	3f04      	subs	r7, #4
2000026e:	9702      	str	r7, [sp, #8]
20000270:	9f08      	ldr	r7, [sp, #32]
20000272:	1a7f      	subs	r7, r7, r1

20000274 <RenderAttrib8_OutLoop>:
20000274:	9e02      	ldr	r6, [sp, #8]
20000276:	42b7      	cmp	r7, r6
20000278:	d900      	bls.n	2000027c <RenderAttrib8_OutLoop+0x8>
2000027a:	4637      	mov	r7, r6
2000027c:	2f08      	cmp	r7, #8
2000027e:	d21f      	bcs.n	200002c0 <RenderAttrib8_Last+0x3c>
20000280:	2f04      	cmp	r7, #4
20000282:	d31a      	bcc.n	200002ba <RenderAttrib8_Last+0x36>

20000284 <RenderAttrib8_Last>:
20000284:	5cd6      	ldrb	r6, [r2, r3]
20000286:	4645      	mov	r5, r8
20000288:	0934      	lsrs	r4, r6, #4
2000028a:	5d2c      	ldrb	r4, [r5, r4]
2000028c:	0736      	lsls	r6, r6, #28
2000028e:	0f36      	lsrs	r6, r6, #28
20000290:	5dae      	ldrb	r6, [r5, r6]
20000292:	0225      	lsls	r5, r4, #8
20000294:	4325      	orrs	r5, r4
20000296:	042c      	lsls	r4, r5, #16
20000298:	432c      	orrs	r4, r5
2000029a:	0235      	lsls	r5, r6, #8
2000029c:	4335      	orrs	r5, r6
2000029e:	042e      	lsls	r6, r5, #16
200002a0:	432e      	orrs	r6, r5
200002a2:	4066      	eors	r6, r4
200002a4:	7815      	ldrb	r5, [r2, #0]
200002a6:	3201      	adds	r2, #1
200002a8:	00ed      	lsls	r5, r5, #3
200002aa:	4475      	add	r5, lr
200002ac:	6829      	ldr	r1, [r5, #0]
200002ae:	4031      	ands	r1, r6
200002b0:	4061      	eors	r1, r4
200002b2:	c002      	stmia	r0!, {r1}
200002b4:	9a01      	ldr	r2, [sp, #4]
200002b6:	2f04      	cmp	r7, #4
200002b8:	d8dc      	bhi.n	20000274 <RenderAttrib8_OutLoop>
200002ba:	bc10      	pop	{r4}
200002bc:	46a0      	mov	r8, r4
200002be:	bdfc      	pop	{r2, r3, r4, r5, r6, r7, pc}
200002c0:	08b9      	lsrs	r1, r7, #2
200002c2:	008d      	lsls	r5, r1, #2
200002c4:	1b76      	subs	r6, r6, r5
200002c6:	9602      	str	r6, [sp, #8]
200002c8:	3901      	subs	r1, #1

200002ca <RenderAttrib8_InLoop>:
200002ca:	5cd6      	ldrb	r6, [r2, r3]
200002cc:	4645      	mov	r5, r8
200002ce:	0934      	lsrs	r4, r6, #4
200002d0:	5d2c      	ldrb	r4, [r5, r4]
200002d2:	0736      	lsls	r6, r6, #28
200002d4:	0f36      	lsrs	r6, r6, #28
200002d6:	5dae      	ldrb	r6, [r5, r6]
200002d8:	0225      	lsls	r5, r4, #8
200002da:	4325      	orrs	r5, r4
200002dc:	042c      	lsls	r4, r5, #16
200002de:	432c      	orrs	r4, r5
200002e0:	0235      	lsls	r5, r6, #8
200002e2:	4335      	orrs	r5, r6
200002e4:	042e      	lsls	r6, r5, #16
200002e6:	432e      	orrs	r6, r5
200002e8:	4066      	eors	r6, r4
200002ea:	7817      	ldrb	r7, [r2, #0]
200002ec:	3201      	adds	r2, #1
200002ee:	00ff      	lsls	r7, r7, #3
200002f0:	4477      	add	r7, lr
200002f2:	683d      	ldr	r5, [r7, #0]
200002f4:	4035      	ands	r5, r6
200002f6:	4065      	eors	r5, r4
200002f8:	687f      	ldr	r7, [r7, #4]
200002fa:	4037      	ands	r7, r6
200002fc:	4067      	eors	r7, r4
200002fe:	c0a0      	stmia	r0!, {r5, r7}
20000300:	3902      	subs	r1, #2
20000302:	d8e2      	bhi.n	200002ca <RenderAttrib8_InLoop>
20000304:	9f08      	ldr	r7, [sp, #32]
20000306:	d0bd      	beq.n	20000284 <RenderAttrib8_Last>
20000308:	9a01      	ldr	r2, [sp, #4]
2000030a:	e7b3      	b.n	20000274 <RenderAttrib8_OutLoop>

2000030c <RenderAttrib8_Addr>:
2000030c:	2000e56c 	.word	0x2000e56c

20000310 <MemSet4>:
20000310:	b5f0      	push	{r4, r5, r6, r7, lr}
20000312:	460b      	mov	r3, r1
20000314:	460c      	mov	r4, r1
20000316:	460d      	mov	r5, r1
20000318:	460e      	mov	r6, r1
2000031a:	460f      	mov	r7, r1
2000031c:	e004      	b.n	20000328 <MemSet4+0x18>
2000031e:	c0fa      	stmia	r0!, {r1, r3, r4, r5, r6, r7}
20000320:	c0fa      	stmia	r0!, {r1, r3, r4, r5, r6, r7}
20000322:	c0fa      	stmia	r0!, {r1, r3, r4, r5, r6, r7}
20000324:	c0fa      	stmia	r0!, {r1, r3, r4, r5, r6, r7}
20000326:	c0fa      	stmia	r0!, {r1, r3, r4, r5, r6, r7}
20000328:	3a1e      	subs	r2, #30
2000032a:	daf8      	bge.n	2000031e <MemSet4+0xe>
2000032c:	321e      	adds	r2, #30
2000032e:	e000      	b.n	20000332 <MemSet4+0x22>
20000330:	c0fa      	stmia	r0!, {r1, r3, r4, r5, r6, r7}
20000332:	3a06      	subs	r2, #6
20000334:	dafc      	bge.n	20000330 <MemSet4+0x20>
20000336:	3206      	adds	r2, #6
20000338:	e000      	b.n	2000033c <MemSet4+0x2c>
2000033a:	c002      	stmia	r0!, {r1}
2000033c:	3a01      	subs	r2, #1
2000033e:	dafc      	bge.n	2000033a <MemSet4+0x2a>
20000340:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

20000344 <RenderCText>:
20000344:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
20000346:	9c08      	ldr	r4, [sp, #32]
20000348:	4e40      	ldr	r6, [pc, #256]	; (2000044c <RenderCText_pSioBase>)
2000034a:	6632      	str	r2, [r6, #96]	; 0x60
2000034c:	8a62      	ldrh	r2, [r4, #18]
2000034e:	6672      	str	r2, [r6, #100]	; 0x64
20000350:	8925      	ldrh	r5, [r4, #8]
20000352:	2703      	movs	r7, #3
20000354:	43bd      	bics	r5, r7
20000356:	9508      	str	r5, [sp, #32]
20000358:	43b9      	bics	r1, r7
2000035a:	43bb      	bics	r3, r7
2000035c:	9302      	str	r3, [sp, #8]
2000035e:	6f75      	ldr	r5, [r6, #116]	; 0x74
20000360:	6f32      	ldr	r2, [r6, #112]	; 0x70
20000362:	022d      	lsls	r5, r5, #8
20000364:	6963      	ldr	r3, [r4, #20]
20000366:	442b      	add	r3, r5
20000368:	8865      	ldrh	r5, [r4, #2]
2000036a:	436a      	muls	r2, r5
2000036c:	68e5      	ldr	r5, [r4, #12]
2000036e:	442a      	add	r2, r5
20000370:	9201      	str	r2, [sp, #4]
20000372:	08ce      	lsrs	r6, r1, #3
20000374:	4432      	add	r2, r6
20000376:	4432      	add	r2, r6
20000378:	4432      	add	r2, r6
2000037a:	4d33      	ldr	r5, [pc, #204]	; (20000448 <RenderCText_Addr>)
2000037c:	46ae      	mov	lr, r5
2000037e:	074e      	lsls	r6, r1, #29
20000380:	d51c      	bpl.n	200003bc <RenderCText+0x78>
20000382:	7815      	ldrb	r5, [r2, #0]
20000384:	5d5d      	ldrb	r5, [r3, r5]
20000386:	7854      	ldrb	r4, [r2, #1]
20000388:	0227      	lsls	r7, r4, #8
2000038a:	4327      	orrs	r7, r4
2000038c:	043c      	lsls	r4, r7, #16
2000038e:	433c      	orrs	r4, r7
20000390:	7896      	ldrb	r6, [r2, #2]
20000392:	3203      	adds	r2, #3
20000394:	0237      	lsls	r7, r6, #8
20000396:	4337      	orrs	r7, r6
20000398:	043e      	lsls	r6, r7, #16
2000039a:	433e      	orrs	r6, r7
2000039c:	4066      	eors	r6, r4
2000039e:	00ed      	lsls	r5, r5, #3
200003a0:	4475      	add	r5, lr
200003a2:	686f      	ldr	r7, [r5, #4]
200003a4:	4037      	ands	r7, r6
200003a6:	4067      	eors	r7, r4
200003a8:	c080      	stmia	r0!, {r7}
200003aa:	3104      	adds	r1, #4
200003ac:	9f08      	ldr	r7, [sp, #32]
200003ae:	42b9      	cmp	r1, r7
200003b0:	d301      	bcc.n	200003b6 <RenderCText+0x72>
200003b2:	2100      	movs	r1, #0
200003b4:	9a01      	ldr	r2, [sp, #4]
200003b6:	9f02      	ldr	r7, [sp, #8]
200003b8:	3f04      	subs	r7, #4
200003ba:	9702      	str	r7, [sp, #8]
200003bc:	9f08      	ldr	r7, [sp, #32]
200003be:	1a7f      	subs	r7, r7, r1

200003c0 <RenderCText_OutLoop>:
200003c0:	9e02      	ldr	r6, [sp, #8]
200003c2:	42b7      	cmp	r7, r6
200003c4:	d900      	bls.n	200003c8 <RenderCText_OutLoop+0x8>
200003c6:	4637      	mov	r7, r6
200003c8:	2f08      	cmp	r7, #8
200003ca:	d219      	bcs.n	20000400 <RenderCText_Last+0x30>
200003cc:	2f04      	cmp	r7, #4
200003ce:	d316      	bcc.n	200003fe <RenderCText_Last+0x2e>

200003d0 <RenderCText_Last>:
200003d0:	7815      	ldrb	r5, [r2, #0]
200003d2:	5d5d      	ldrb	r5, [r3, r5]
200003d4:	7854      	ldrb	r4, [r2, #1]
200003d6:	0221      	lsls	r1, r4, #8
200003d8:	4321      	orrs	r1, r4
200003da:	040c      	lsls	r4, r1, #16
200003dc:	430c      	orrs	r4, r1
200003de:	7896      	ldrb	r6, [r2, #2]
200003e0:	3203      	adds	r2, #3
200003e2:	0231      	lsls	r1, r6, #8
200003e4:	4331      	orrs	r1, r6
200003e6:	040e      	lsls	r6, r1, #16
200003e8:	430e      	orrs	r6, r1
200003ea:	4066      	eors	r6, r4
200003ec:	00ed      	lsls	r5, r5, #3
200003ee:	4475      	add	r5, lr
200003f0:	6829      	ldr	r1, [r5, #0]
200003f2:	4031      	ands	r1, r6
200003f4:	4061      	eors	r1, r4
200003f6:	c002      	stmia	r0!, {r1}
200003f8:	9a01      	ldr	r2, [sp, #4]
200003fa:	2f04      	cmp	r7, #4
200003fc:	d8e0      	bhi.n	200003c0 <RenderCText_OutLoop>
200003fe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
20000400:	08b9      	lsrs	r1, r7, #2
20000402:	008d      	lsls	r5, r1, #2
20000404:	1b76      	subs	r6, r6, r5
20000406:	9602      	str	r6, [sp, #8]
20000408:	3901      	subs	r1, #1

2000040a <RenderCText_InLoop>:
2000040a:	7815      	ldrb	r5, [r2, #0]
2000040c:	5d5d      	ldrb	r5, [r3, r5]
2000040e:	7854      	ldrb	r4, [r2, #1]
20000410:	0227      	lsls	r7, r4, #8
20000412:	4327      	orrs	r7, r4
20000414:	043c      	lsls	r4, r7, #16
20000416:	433c      	orrs	r4, r7
20000418:	7896      	ldrb	r6, [r2, #2]
2000041a:	3203      	adds	r2, #3
2000041c:	0237      	lsls	r7, r6, #8
2000041e:	4337      	orrs	r7, r6
20000420:	043e      	lsls	r6, r7, #16
20000422:	433e      	orrs	r6, r7
20000424:	4066      	eors	r6, r4
20000426:	00ed      	lsls	r5, r5, #3
20000428:	4475      	add	r5, lr
2000042a:	682f      	ldr	r7, [r5, #0]
2000042c:	4037      	ands	r7, r6
2000042e:	4067      	eors	r7, r4
20000430:	c080      	stmia	r0!, {r7}
20000432:	686f      	ldr	r7, [r5, #4]
20000434:	4037      	ands	r7, r6
20000436:	4067      	eors	r7, r4
20000438:	c080      	stmia	r0!, {r7}
2000043a:	3902      	subs	r1, #2
2000043c:	d8e5      	bhi.n	2000040a <RenderCText_InLoop>
2000043e:	9f08      	ldr	r7, [sp, #32]
20000440:	d0c6      	beq.n	200003d0 <RenderCText_Last>
20000442:	9a01      	ldr	r2, [sp, #4]
20000444:	e7bc      	b.n	200003c0 <RenderCText_OutLoop>
20000446:	46c0      	nop			; (mov r8, r8)

20000448 <RenderCText_Addr>:
20000448:	2000e56c 	.word	0x2000e56c

2000044c <RenderCText_pSioBase>:
2000044c:	d0000000 	.word	0xd0000000

20000450 <RenderDText>:
20000450:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
20000452:	4644      	mov	r4, r8
20000454:	b410      	push	{r4}
20000456:	9c09      	ldr	r4, [sp, #36]	; 0x24
20000458:	4e68      	ldr	r6, [pc, #416]	; (200005fc <RenderDText_pSioBase>)
2000045a:	6632      	str	r2, [r6, #96]	; 0x60
2000045c:	7ce2      	ldrb	r2, [r4, #19]
2000045e:	6672      	str	r2, [r6, #100]	; 0x64
20000460:	8925      	ldrh	r5, [r4, #8]
20000462:	2703      	movs	r7, #3
20000464:	43bd      	bics	r5, r7
20000466:	9509      	str	r5, [sp, #36]	; 0x24
20000468:	43b9      	bics	r1, r7
2000046a:	43bb      	bics	r3, r7
2000046c:	9303      	str	r3, [sp, #12]
2000046e:	6f75      	ldr	r5, [r6, #116]	; 0x74
20000470:	6f32      	ldr	r2, [r6, #112]	; 0x70
20000472:	022d      	lsls	r5, r5, #8
20000474:	6963      	ldr	r3, [r4, #20]
20000476:	442b      	add	r3, r5
20000478:	4698      	mov	r8, r3
2000047a:	8865      	ldrh	r5, [r4, #2]
2000047c:	436a      	muls	r2, r5
2000047e:	68e5      	ldr	r5, [r4, #12]
20000480:	442a      	add	r2, r5
20000482:	9202      	str	r2, [sp, #8]
20000484:	69a3      	ldr	r3, [r4, #24]
20000486:	9301      	str	r3, [sp, #4]
20000488:	08ce      	lsrs	r6, r1, #3
2000048a:	00b6      	lsls	r6, r6, #2
2000048c:	4433      	add	r3, r6
2000048e:	090e      	lsrs	r6, r1, #4
20000490:	4432      	add	r2, r6
20000492:	7ca4      	ldrb	r4, [r4, #18]
20000494:	0225      	lsls	r5, r4, #8
20000496:	4325      	orrs	r5, r4
20000498:	042c      	lsls	r4, r5, #16
2000049a:	432c      	orrs	r4, r5
2000049c:	4d56      	ldr	r5, [pc, #344]	; (200005f8 <RenderDText_Addr>)
2000049e:	46ae      	mov	lr, r5
200004a0:	070e      	lsls	r6, r1, #28
200004a2:	d037      	beq.n	20000514 <RenderDText+0xc4>
200004a4:	0f35      	lsrs	r5, r6, #28
200004a6:	2610      	movs	r6, #16
200004a8:	1b76      	subs	r6, r6, r5
200004aa:	1989      	adds	r1, r1, r6
200004ac:	9f03      	ldr	r7, [sp, #12]
200004ae:	1bbf      	subs	r7, r7, r6
200004b0:	9703      	str	r7, [sp, #12]
200004b2:	b402      	push	{r1}
200004b4:	7817      	ldrb	r7, [r2, #0]
200004b6:	3201      	adds	r2, #1
200004b8:	4447      	add	r7, r8
200004ba:	783f      	ldrb	r7, [r7, #0]
200004bc:	cb40      	ldmia	r3!, {r6}
200004be:	4066      	eors	r6, r4
200004c0:	00ff      	lsls	r7, r7, #3
200004c2:	4477      	add	r7, lr
200004c4:	6839      	ldr	r1, [r7, #0]
200004c6:	4031      	ands	r1, r6
200004c8:	4061      	eors	r1, r4
200004ca:	2d04      	cmp	r5, #4
200004cc:	d806      	bhi.n	200004dc <RenderDText+0x8c>
200004ce:	0c09      	lsrs	r1, r1, #16
200004d0:	7001      	strb	r1, [r0, #0]
200004d2:	7041      	strb	r1, [r0, #1]
200004d4:	0a09      	lsrs	r1, r1, #8
200004d6:	7081      	strb	r1, [r0, #2]
200004d8:	70c1      	strb	r1, [r0, #3]
200004da:	3004      	adds	r0, #4
200004dc:	cb40      	ldmia	r3!, {r6}
200004de:	4066      	eors	r6, r4
200004e0:	6879      	ldr	r1, [r7, #4]
200004e2:	4031      	ands	r1, r6
200004e4:	4061      	eors	r1, r4
200004e6:	2d08      	cmp	r5, #8
200004e8:	d806      	bhi.n	200004f8 <RenderDText+0xa8>
200004ea:	7001      	strb	r1, [r0, #0]
200004ec:	7041      	strb	r1, [r0, #1]
200004ee:	0a09      	lsrs	r1, r1, #8
200004f0:	7081      	strb	r1, [r0, #2]
200004f2:	70c1      	strb	r1, [r0, #3]
200004f4:	0209      	lsls	r1, r1, #8
200004f6:	3004      	adds	r0, #4
200004f8:	0c09      	lsrs	r1, r1, #16
200004fa:	7001      	strb	r1, [r0, #0]
200004fc:	7041      	strb	r1, [r0, #1]
200004fe:	0a09      	lsrs	r1, r1, #8
20000500:	7081      	strb	r1, [r0, #2]
20000502:	70c1      	strb	r1, [r0, #3]
20000504:	3004      	adds	r0, #4
20000506:	bc02      	pop	{r1}
20000508:	9f09      	ldr	r7, [sp, #36]	; 0x24
2000050a:	42b9      	cmp	r1, r7
2000050c:	d302      	bcc.n	20000514 <RenderDText+0xc4>
2000050e:	2100      	movs	r1, #0
20000510:	9a02      	ldr	r2, [sp, #8]
20000512:	9b01      	ldr	r3, [sp, #4]
20000514:	9f09      	ldr	r7, [sp, #36]	; 0x24
20000516:	1a7f      	subs	r7, r7, r1

20000518 <RenderDText_OutLoop>:
20000518:	9e03      	ldr	r6, [sp, #12]
2000051a:	42b7      	cmp	r7, r6
2000051c:	d900      	bls.n	20000520 <RenderDText_OutLoop+0x8>
2000051e:	4637      	mov	r7, r6
20000520:	2f10      	cmp	r7, #16
20000522:	d232      	bcs.n	2000058a <RenderDText_Last+0x60>
20000524:	2f04      	cmp	r7, #4
20000526:	d32d      	bcc.n	20000584 <RenderDText_Last+0x5a>
20000528:	4639      	mov	r1, r7

2000052a <RenderDText_Last>:
2000052a:	b480      	push	{r7}
2000052c:	7817      	ldrb	r7, [r2, #0]
2000052e:	3201      	adds	r2, #1
20000530:	4447      	add	r7, r8
20000532:	783f      	ldrb	r7, [r7, #0]
20000534:	cb40      	ldmia	r3!, {r6}
20000536:	4066      	eors	r6, r4
20000538:	00ff      	lsls	r7, r7, #3
2000053a:	4477      	add	r7, lr
2000053c:	683d      	ldr	r5, [r7, #0]
2000053e:	4035      	ands	r5, r6
20000540:	4065      	eors	r5, r4
20000542:	7005      	strb	r5, [r0, #0]
20000544:	7045      	strb	r5, [r0, #1]
20000546:	0a2d      	lsrs	r5, r5, #8
20000548:	7085      	strb	r5, [r0, #2]
2000054a:	70c5      	strb	r5, [r0, #3]
2000054c:	3004      	adds	r0, #4
2000054e:	2904      	cmp	r1, #4
20000550:	d913      	bls.n	2000057a <RenderDText_Last+0x50>
20000552:	0a2d      	lsrs	r5, r5, #8
20000554:	7005      	strb	r5, [r0, #0]
20000556:	7045      	strb	r5, [r0, #1]
20000558:	0a2d      	lsrs	r5, r5, #8
2000055a:	7085      	strb	r5, [r0, #2]
2000055c:	70c5      	strb	r5, [r0, #3]
2000055e:	3004      	adds	r0, #4
20000560:	2908      	cmp	r1, #8
20000562:	d90a      	bls.n	2000057a <RenderDText_Last+0x50>
20000564:	cb40      	ldmia	r3!, {r6}
20000566:	4066      	eors	r6, r4
20000568:	687f      	ldr	r7, [r7, #4]
2000056a:	4037      	ands	r7, r6
2000056c:	4067      	eors	r7, r4
2000056e:	7007      	strb	r7, [r0, #0]
20000570:	7047      	strb	r7, [r0, #1]
20000572:	0a3f      	lsrs	r7, r7, #8
20000574:	7087      	strb	r7, [r0, #2]
20000576:	70c7      	strb	r7, [r0, #3]
20000578:	3004      	adds	r0, #4
2000057a:	bc80      	pop	{r7}
2000057c:	9a02      	ldr	r2, [sp, #8]
2000057e:	9b01      	ldr	r3, [sp, #4]
20000580:	2f10      	cmp	r7, #16
20000582:	d2c9      	bcs.n	20000518 <RenderDText_OutLoop>
20000584:	bc10      	pop	{r4}
20000586:	46a0      	mov	r8, r4
20000588:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
2000058a:	08b9      	lsrs	r1, r7, #2
2000058c:	008d      	lsls	r5, r1, #2
2000058e:	1b76      	subs	r6, r6, r5
20000590:	9603      	str	r6, [sp, #12]
20000592:	3903      	subs	r1, #3

20000594 <RenderDText_InLoop>:
20000594:	7817      	ldrb	r7, [r2, #0]
20000596:	3201      	adds	r2, #1
20000598:	4447      	add	r7, r8
2000059a:	783f      	ldrb	r7, [r7, #0]
2000059c:	cb40      	ldmia	r3!, {r6}
2000059e:	4066      	eors	r6, r4
200005a0:	00ff      	lsls	r7, r7, #3
200005a2:	4477      	add	r7, lr
200005a4:	683d      	ldr	r5, [r7, #0]
200005a6:	4035      	ands	r5, r6
200005a8:	4065      	eors	r5, r4
200005aa:	7005      	strb	r5, [r0, #0]
200005ac:	7045      	strb	r5, [r0, #1]
200005ae:	0a2d      	lsrs	r5, r5, #8
200005b0:	7085      	strb	r5, [r0, #2]
200005b2:	70c5      	strb	r5, [r0, #3]
200005b4:	0a2d      	lsrs	r5, r5, #8
200005b6:	7105      	strb	r5, [r0, #4]
200005b8:	7145      	strb	r5, [r0, #5]
200005ba:	0a2d      	lsrs	r5, r5, #8
200005bc:	7185      	strb	r5, [r0, #6]
200005be:	71c5      	strb	r5, [r0, #7]
200005c0:	3008      	adds	r0, #8
200005c2:	cb40      	ldmia	r3!, {r6}
200005c4:	4066      	eors	r6, r4
200005c6:	687f      	ldr	r7, [r7, #4]
200005c8:	4037      	ands	r7, r6
200005ca:	4067      	eors	r7, r4
200005cc:	7007      	strb	r7, [r0, #0]
200005ce:	7047      	strb	r7, [r0, #1]
200005d0:	0a3f      	lsrs	r7, r7, #8
200005d2:	7087      	strb	r7, [r0, #2]
200005d4:	70c7      	strb	r7, [r0, #3]
200005d6:	0a3f      	lsrs	r7, r7, #8
200005d8:	7107      	strb	r7, [r0, #4]
200005da:	7147      	strb	r7, [r0, #5]
200005dc:	0a3f      	lsrs	r7, r7, #8
200005de:	7187      	strb	r7, [r0, #6]
200005e0:	71c7      	strb	r7, [r0, #7]
200005e2:	3008      	adds	r0, #8
200005e4:	3904      	subs	r1, #4
200005e6:	d8d5      	bhi.n	20000594 <RenderDText_InLoop>
200005e8:	9f09      	ldr	r7, [sp, #36]	; 0x24
200005ea:	3103      	adds	r1, #3
200005ec:	0089      	lsls	r1, r1, #2
200005ee:	d19c      	bne.n	2000052a <RenderDText_Last>
200005f0:	9a02      	ldr	r2, [sp, #8]
200005f2:	9b01      	ldr	r3, [sp, #4]
200005f4:	e790      	b.n	20000518 <RenderDText_OutLoop>
200005f6:	46c0      	nop			; (mov r8, r8)

200005f8 <RenderDText_Addr>:
200005f8:	2000e56c 	.word	0x2000e56c

200005fc <RenderDText_pSioBase>:
200005fc:	d0000000 	.word	0xd0000000

20000600 <RenderFastSprite>:
20000600:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
20000602:	6817      	ldr	r7, [r2, #0]
20000604:	46be      	mov	lr, r7
20000606:	8c17      	ldrh	r7, [r2, #32]
20000608:	9701      	str	r7, [sp, #4]
2000060a:	8ad2      	ldrh	r2, [r2, #22]
2000060c:	2100      	movs	r1, #0
2000060e:	9f01      	ldr	r7, [sp, #4]
20000610:	3f01      	subs	r7, #1
20000612:	d332      	bcc.n	2000067a <RenderFastSprite+0x7a>
20000614:	9701      	str	r7, [sp, #4]
20000616:	4677      	mov	r7, lr
20000618:	cf08      	ldmia	r7!, {r3}
2000061a:	46be      	mov	lr, r7
2000061c:	8a5f      	ldrh	r7, [r3, #18]
2000061e:	b23f      	sxth	r7, r7
20000620:	9c00      	ldr	r4, [sp, #0]
20000622:	1be4      	subs	r4, r4, r7
20000624:	d4f3      	bmi.n	2000060e <RenderFastSprite+0xe>
20000626:	8adf      	ldrh	r7, [r3, #22]
20000628:	42bc      	cmp	r4, r7
2000062a:	daf0      	bge.n	2000060e <RenderFastSprite+0xe>
2000062c:	685f      	ldr	r7, [r3, #4]
2000062e:	5d3d      	ldrb	r5, [r7, r4]
20000630:	00ad      	lsls	r5, r5, #2
20000632:	689f      	ldr	r7, [r3, #8]
20000634:	5d3e      	ldrb	r6, [r7, r4]
20000636:	00b6      	lsls	r6, r6, #2
20000638:	8b1f      	ldrh	r7, [r3, #24]
2000063a:	437c      	muls	r4, r7
2000063c:	681f      	ldr	r7, [r3, #0]
2000063e:	443c      	add	r4, r7
20000640:	8a1b      	ldrh	r3, [r3, #16]
20000642:	b21b      	sxth	r3, r3
20000644:	195b      	adds	r3, r3, r5
20000646:	1acf      	subs	r7, r1, r3
20000648:	dd02      	ble.n	20000650 <RenderFastSprite+0x50>
2000064a:	19ed      	adds	r5, r5, r7
2000064c:	1bf6      	subs	r6, r6, r7
2000064e:	460b      	mov	r3, r1
20000650:	1ad7      	subs	r7, r2, r3
20000652:	42be      	cmp	r6, r7
20000654:	dd00      	ble.n	20000658 <RenderFastSprite+0x58>
20000656:	463e      	mov	r6, r7
20000658:	2703      	movs	r7, #3
2000065a:	43bb      	bics	r3, r7
2000065c:	43bd      	bics	r5, r7
2000065e:	43be      	bics	r6, r7
20000660:	ddd5      	ble.n	2000060e <RenderFastSprite+0xe>
20000662:	1a5f      	subs	r7, r3, r1
20000664:	dd04      	ble.n	20000670 <RenderFastSprite+0x70>
20000666:	08bf      	lsrs	r7, r7, #2
20000668:	c080      	stmia	r0!, {r7}
2000066a:	9f02      	ldr	r7, [sp, #8]
2000066c:	c080      	stmia	r0!, {r7}
2000066e:	4619      	mov	r1, r3
20000670:	1967      	adds	r7, r4, r5
20000672:	08b4      	lsrs	r4, r6, #2
20000674:	c090      	stmia	r0!, {r4, r7}
20000676:	1989      	adds	r1, r1, r6
20000678:	e7c9      	b.n	2000060e <RenderFastSprite+0xe>
2000067a:	1a52      	subs	r2, r2, r1
2000067c:	d902      	bls.n	20000684 <RenderFastSprite+0x84>
2000067e:	0892      	lsrs	r2, r2, #2
20000680:	9b02      	ldr	r3, [sp, #8]
20000682:	c00c      	stmia	r0!, {r2, r3}
20000684:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

20000688 <RenderFText>:
20000688:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
2000068a:	9c08      	ldr	r4, [sp, #32]
2000068c:	4e3a      	ldr	r6, [pc, #232]	; (20000778 <RenderFText_pSioBase>)
2000068e:	6632      	str	r2, [r6, #96]	; 0x60
20000690:	8a62      	ldrh	r2, [r4, #18]
20000692:	6672      	str	r2, [r6, #100]	; 0x64
20000694:	8925      	ldrh	r5, [r4, #8]
20000696:	2703      	movs	r7, #3
20000698:	43bd      	bics	r5, r7
2000069a:	9508      	str	r5, [sp, #32]
2000069c:	43b9      	bics	r1, r7
2000069e:	43bb      	bics	r3, r7
200006a0:	9302      	str	r3, [sp, #8]
200006a2:	6f75      	ldr	r5, [r6, #116]	; 0x74
200006a4:	6f32      	ldr	r2, [r6, #112]	; 0x70
200006a6:	022d      	lsls	r5, r5, #8
200006a8:	6963      	ldr	r3, [r4, #20]
200006aa:	442b      	add	r3, r5
200006ac:	8865      	ldrh	r5, [r4, #2]
200006ae:	436a      	muls	r2, r5
200006b0:	68e5      	ldr	r5, [r4, #12]
200006b2:	442a      	add	r2, r5
200006b4:	9201      	str	r2, [sp, #4]
200006b6:	08ce      	lsrs	r6, r1, #3
200006b8:	0076      	lsls	r6, r6, #1
200006ba:	4432      	add	r2, r6
200006bc:	7e24      	ldrb	r4, [r4, #24]
200006be:	0225      	lsls	r5, r4, #8
200006c0:	4325      	orrs	r5, r4
200006c2:	042c      	lsls	r4, r5, #16
200006c4:	432c      	orrs	r4, r5
200006c6:	4d2b      	ldr	r5, [pc, #172]	; (20000774 <RenderFText_Addr>)
200006c8:	46ae      	mov	lr, r5
200006ca:	074e      	lsls	r6, r1, #29
200006cc:	d517      	bpl.n	200006fe <RenderFText+0x76>
200006ce:	7815      	ldrb	r5, [r2, #0]
200006d0:	5d5d      	ldrb	r5, [r3, r5]
200006d2:	7856      	ldrb	r6, [r2, #1]
200006d4:	3202      	adds	r2, #2
200006d6:	0237      	lsls	r7, r6, #8
200006d8:	4337      	orrs	r7, r6
200006da:	043e      	lsls	r6, r7, #16
200006dc:	433e      	orrs	r6, r7
200006de:	4066      	eors	r6, r4
200006e0:	00ed      	lsls	r5, r5, #3
200006e2:	4475      	add	r5, lr
200006e4:	686f      	ldr	r7, [r5, #4]
200006e6:	4037      	ands	r7, r6
200006e8:	4067      	eors	r7, r4
200006ea:	c080      	stmia	r0!, {r7}
200006ec:	3104      	adds	r1, #4
200006ee:	9f08      	ldr	r7, [sp, #32]
200006f0:	42b9      	cmp	r1, r7
200006f2:	d301      	bcc.n	200006f8 <RenderFText+0x70>
200006f4:	2100      	movs	r1, #0
200006f6:	9a01      	ldr	r2, [sp, #4]
200006f8:	9f02      	ldr	r7, [sp, #8]
200006fa:	3f04      	subs	r7, #4
200006fc:	9702      	str	r7, [sp, #8]
200006fe:	9f08      	ldr	r7, [sp, #32]
20000700:	1a7f      	subs	r7, r7, r1

20000702 <RenderFText_OutLoop>:
20000702:	9e02      	ldr	r6, [sp, #8]
20000704:	42b7      	cmp	r7, r6
20000706:	d900      	bls.n	2000070a <RenderFText_OutLoop+0x8>
20000708:	4637      	mov	r7, r6
2000070a:	2f08      	cmp	r7, #8
2000070c:	d214      	bcs.n	20000738 <RenderFText_Last+0x26>
2000070e:	2f04      	cmp	r7, #4
20000710:	d311      	bcc.n	20000736 <RenderFText_Last+0x24>

20000712 <RenderFText_Last>:
20000712:	7815      	ldrb	r5, [r2, #0]
20000714:	5d5d      	ldrb	r5, [r3, r5]
20000716:	7856      	ldrb	r6, [r2, #1]
20000718:	3202      	adds	r2, #2
2000071a:	0231      	lsls	r1, r6, #8
2000071c:	4331      	orrs	r1, r6
2000071e:	040e      	lsls	r6, r1, #16
20000720:	430e      	orrs	r6, r1
20000722:	4066      	eors	r6, r4
20000724:	00ed      	lsls	r5, r5, #3
20000726:	4475      	add	r5, lr
20000728:	6829      	ldr	r1, [r5, #0]
2000072a:	4031      	ands	r1, r6
2000072c:	4061      	eors	r1, r4
2000072e:	c002      	stmia	r0!, {r1}
20000730:	9a01      	ldr	r2, [sp, #4]
20000732:	2f04      	cmp	r7, #4
20000734:	d8e5      	bhi.n	20000702 <RenderFText_OutLoop>
20000736:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
20000738:	08b9      	lsrs	r1, r7, #2
2000073a:	008d      	lsls	r5, r1, #2
2000073c:	1b76      	subs	r6, r6, r5
2000073e:	9602      	str	r6, [sp, #8]
20000740:	3901      	subs	r1, #1

20000742 <RenderFText_InLoop>:
20000742:	7815      	ldrb	r5, [r2, #0]
20000744:	5d5d      	ldrb	r5, [r3, r5]
20000746:	7856      	ldrb	r6, [r2, #1]
20000748:	3202      	adds	r2, #2
2000074a:	0237      	lsls	r7, r6, #8
2000074c:	4337      	orrs	r7, r6
2000074e:	043e      	lsls	r6, r7, #16
20000750:	433e      	orrs	r6, r7
20000752:	4066      	eors	r6, r4
20000754:	00ed      	lsls	r5, r5, #3
20000756:	4475      	add	r5, lr
20000758:	682f      	ldr	r7, [r5, #0]
2000075a:	4037      	ands	r7, r6
2000075c:	4067      	eors	r7, r4
2000075e:	c080      	stmia	r0!, {r7}
20000760:	686f      	ldr	r7, [r5, #4]
20000762:	4037      	ands	r7, r6
20000764:	4067      	eors	r7, r4
20000766:	c080      	stmia	r0!, {r7}
20000768:	3902      	subs	r1, #2
2000076a:	d8ea      	bhi.n	20000742 <RenderFText_InLoop>
2000076c:	9f08      	ldr	r7, [sp, #32]
2000076e:	d0d0      	beq.n	20000712 <RenderFText_Last>
20000770:	9a01      	ldr	r2, [sp, #4]
20000772:	e7c6      	b.n	20000702 <RenderFText_OutLoop>

20000774 <RenderFText_Addr>:
20000774:	2000e56c 	.word	0x2000e56c

20000778 <RenderFText_pSioBase>:
20000778:	d0000000 	.word	0xd0000000

2000077c <RenderGraph1>:
2000077c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2000077e:	9c06      	ldr	r4, [sp, #24]
20000780:	8925      	ldrh	r5, [r4, #8]
20000782:	2703      	movs	r7, #3
20000784:	43bd      	bics	r5, r7
20000786:	9506      	str	r5, [sp, #24]
20000788:	43b9      	bics	r1, r7
2000078a:	43bb      	bics	r3, r7
2000078c:	9300      	str	r3, [sp, #0]
2000078e:	8865      	ldrh	r5, [r4, #2]
20000790:	436a      	muls	r2, r5
20000792:	68e5      	ldr	r5, [r4, #12]
20000794:	442a      	add	r2, r5
20000796:	4696      	mov	lr, r2
20000798:	08ca      	lsrs	r2, r1, #3
2000079a:	4472      	add	r2, lr
2000079c:	7d66      	ldrb	r6, [r4, #21]
2000079e:	0237      	lsls	r7, r6, #8
200007a0:	4337      	orrs	r7, r6
200007a2:	043e      	lsls	r6, r7, #16
200007a4:	433e      	orrs	r6, r7
200007a6:	7d24      	ldrb	r4, [r4, #20]
200007a8:	0225      	lsls	r5, r4, #8
200007aa:	4325      	orrs	r5, r4
200007ac:	042c      	lsls	r4, r5, #16
200007ae:	432c      	orrs	r4, r5
200007b0:	4066      	eors	r6, r4
200007b2:	4b20      	ldr	r3, [pc, #128]	; (20000834 <RenderGraph1_Addr>)
200007b4:	074d      	lsls	r5, r1, #29
200007b6:	d510      	bpl.n	200007da <RenderGraph1+0x5e>
200007b8:	7815      	ldrb	r5, [r2, #0]
200007ba:	3201      	adds	r2, #1
200007bc:	00ed      	lsls	r5, r5, #3
200007be:	441d      	add	r5, r3
200007c0:	686f      	ldr	r7, [r5, #4]
200007c2:	4037      	ands	r7, r6
200007c4:	4067      	eors	r7, r4
200007c6:	c080      	stmia	r0!, {r7}
200007c8:	3104      	adds	r1, #4
200007ca:	9f06      	ldr	r7, [sp, #24]
200007cc:	42b9      	cmp	r1, r7
200007ce:	d301      	bcc.n	200007d4 <RenderGraph1+0x58>
200007d0:	2100      	movs	r1, #0
200007d2:	4672      	mov	r2, lr
200007d4:	9f00      	ldr	r7, [sp, #0]
200007d6:	3f04      	subs	r7, #4
200007d8:	9700      	str	r7, [sp, #0]
200007da:	9f06      	ldr	r7, [sp, #24]
200007dc:	1a7f      	subs	r7, r7, r1

200007de <RenderGraph1_OutLoop>:
200007de:	9d00      	ldr	r5, [sp, #0]
200007e0:	42af      	cmp	r7, r5
200007e2:	d900      	bls.n	200007e6 <RenderGraph1_OutLoop+0x8>
200007e4:	462f      	mov	r7, r5
200007e6:	2f08      	cmp	r7, #8
200007e8:	d20d      	bcs.n	20000806 <RenderGraph1_Last+0x18>
200007ea:	2f04      	cmp	r7, #4
200007ec:	d30a      	bcc.n	20000804 <RenderGraph1_Last+0x16>

200007ee <RenderGraph1_Last>:
200007ee:	7815      	ldrb	r5, [r2, #0]
200007f0:	3201      	adds	r2, #1
200007f2:	00ed      	lsls	r5, r5, #3
200007f4:	441d      	add	r5, r3
200007f6:	6829      	ldr	r1, [r5, #0]
200007f8:	4031      	ands	r1, r6
200007fa:	4061      	eors	r1, r4
200007fc:	c002      	stmia	r0!, {r1}
200007fe:	4672      	mov	r2, lr
20000800:	2f04      	cmp	r7, #4
20000802:	d8ec      	bhi.n	200007de <RenderGraph1_OutLoop>
20000804:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
20000806:	08b9      	lsrs	r1, r7, #2
20000808:	008f      	lsls	r7, r1, #2
2000080a:	1bed      	subs	r5, r5, r7
2000080c:	9500      	str	r5, [sp, #0]
2000080e:	3901      	subs	r1, #1

20000810 <RenderGraph1_InLoop>:
20000810:	7815      	ldrb	r5, [r2, #0]
20000812:	3201      	adds	r2, #1
20000814:	00ed      	lsls	r5, r5, #3
20000816:	441d      	add	r5, r3
20000818:	682f      	ldr	r7, [r5, #0]
2000081a:	4037      	ands	r7, r6
2000081c:	4067      	eors	r7, r4
2000081e:	c080      	stmia	r0!, {r7}
20000820:	686f      	ldr	r7, [r5, #4]
20000822:	4037      	ands	r7, r6
20000824:	4067      	eors	r7, r4
20000826:	c080      	stmia	r0!, {r7}
20000828:	3902      	subs	r1, #2
2000082a:	d8f1      	bhi.n	20000810 <RenderGraph1_InLoop>
2000082c:	9f06      	ldr	r7, [sp, #24]
2000082e:	d0de      	beq.n	200007ee <RenderGraph1_Last>
20000830:	4672      	mov	r2, lr
20000832:	e7d4      	b.n	200007de <RenderGraph1_OutLoop>

20000834 <RenderGraph1_Addr>:
20000834:	2000e56c 	.word	0x2000e56c

20000838 <RenderGraph2>:
20000838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2000083a:	9c06      	ldr	r4, [sp, #24]
2000083c:	8927      	ldrh	r7, [r4, #8]
2000083e:	2603      	movs	r6, #3
20000840:	43b7      	bics	r7, r6
20000842:	43b1      	bics	r1, r6
20000844:	43b3      	bics	r3, r6
20000846:	9300      	str	r3, [sp, #0]
20000848:	8865      	ldrh	r5, [r4, #2]
2000084a:	436a      	muls	r2, r5
2000084c:	68e5      	ldr	r5, [r4, #12]
2000084e:	442a      	add	r2, r5
20000850:	4696      	mov	lr, r2
20000852:	088e      	lsrs	r6, r1, #2
20000854:	4432      	add	r2, r6
20000856:	6963      	ldr	r3, [r4, #20]
20000858:	1a7e      	subs	r6, r7, r1

2000085a <RenderGraph2_OutLoop>:
2000085a:	9c00      	ldr	r4, [sp, #0]
2000085c:	42a6      	cmp	r6, r4
2000085e:	d900      	bls.n	20000862 <RenderGraph2_OutLoop+0x8>
20000860:	4626      	mov	r6, r4
20000862:	2e04      	cmp	r6, #4
20000864:	d200      	bcs.n	20000868 <RenderGraph2_OutLoop+0xe>
20000866:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
20000868:	08b1      	lsrs	r1, r6, #2
2000086a:	008e      	lsls	r6, r1, #2
2000086c:	1ba4      	subs	r4, r4, r6
2000086e:	9400      	str	r4, [sp, #0]
20000870:	0849      	lsrs	r1, r1, #1
20000872:	d306      	bcc.n	20000882 <RenderGraph2_InLoop>
20000874:	7814      	ldrb	r4, [r2, #0]
20000876:	3201      	adds	r2, #1
20000878:	00a4      	lsls	r4, r4, #2
2000087a:	591d      	ldr	r5, [r3, r4]
2000087c:	c020      	stmia	r0!, {r5}
2000087e:	4209      	tst	r1, r1
20000880:	d009      	beq.n	20000896 <RenderGraph2_EndLoop>

20000882 <RenderGraph2_InLoop>:
20000882:	7814      	ldrb	r4, [r2, #0]
20000884:	00a4      	lsls	r4, r4, #2
20000886:	591d      	ldr	r5, [r3, r4]
20000888:	7854      	ldrb	r4, [r2, #1]
2000088a:	3202      	adds	r2, #2
2000088c:	00a4      	lsls	r4, r4, #2
2000088e:	591e      	ldr	r6, [r3, r4]
20000890:	c060      	stmia	r0!, {r5, r6}
20000892:	3901      	subs	r1, #1
20000894:	d1f5      	bne.n	20000882 <RenderGraph2_InLoop>

20000896 <RenderGraph2_EndLoop>:
20000896:	463e      	mov	r6, r7
20000898:	4672      	mov	r2, lr
2000089a:	e7de      	b.n	2000085a <RenderGraph2_OutLoop>

2000089c <RenderGraph4>:
2000089c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2000089e:	9c06      	ldr	r4, [sp, #24]
200008a0:	8927      	ldrh	r7, [r4, #8]
200008a2:	2603      	movs	r6, #3
200008a4:	43b7      	bics	r7, r6
200008a6:	9706      	str	r7, [sp, #24]
200008a8:	43b1      	bics	r1, r6
200008aa:	43b3      	bics	r3, r6
200008ac:	9300      	str	r3, [sp, #0]
200008ae:	8865      	ldrh	r5, [r4, #2]
200008b0:	436a      	muls	r2, r5
200008b2:	68e5      	ldr	r5, [r4, #12]
200008b4:	442a      	add	r2, r5
200008b6:	4696      	mov	lr, r2
200008b8:	084e      	lsrs	r6, r1, #1
200008ba:	4432      	add	r2, r6
200008bc:	6963      	ldr	r3, [r4, #20]
200008be:	9e06      	ldr	r6, [sp, #24]
200008c0:	1a76      	subs	r6, r6, r1

200008c2 <RenderGraph4_OutLoop>:
200008c2:	9c00      	ldr	r4, [sp, #0]
200008c4:	42a6      	cmp	r6, r4
200008c6:	d900      	bls.n	200008ca <RenderGraph4_OutLoop+0x8>
200008c8:	4626      	mov	r6, r4
200008ca:	2e04      	cmp	r6, #4
200008cc:	d200      	bcs.n	200008d0 <RenderGraph4_OutLoop+0xe>
200008ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
200008d0:	08b1      	lsrs	r1, r6, #2
200008d2:	008e      	lsls	r6, r1, #2
200008d4:	1ba4      	subs	r4, r4, r6
200008d6:	9400      	str	r4, [sp, #0]
200008d8:	0849      	lsrs	r1, r1, #1
200008da:	d30b      	bcc.n	200008f4 <RenderGraph4_InLoop>
200008dc:	7814      	ldrb	r4, [r2, #0]
200008de:	0064      	lsls	r4, r4, #1
200008e0:	5b1d      	ldrh	r5, [r3, r4]
200008e2:	7854      	ldrb	r4, [r2, #1]
200008e4:	3202      	adds	r2, #2
200008e6:	0064      	lsls	r4, r4, #1
200008e8:	5b1e      	ldrh	r6, [r3, r4]
200008ea:	0436      	lsls	r6, r6, #16
200008ec:	4335      	orrs	r5, r6
200008ee:	c020      	stmia	r0!, {r5}
200008f0:	4209      	tst	r1, r1
200008f2:	d013      	beq.n	2000091c <RenderGraph4_EndLoop>

200008f4 <RenderGraph4_InLoop>:
200008f4:	7814      	ldrb	r4, [r2, #0]
200008f6:	0064      	lsls	r4, r4, #1
200008f8:	5b1d      	ldrh	r5, [r3, r4]
200008fa:	7854      	ldrb	r4, [r2, #1]
200008fc:	0064      	lsls	r4, r4, #1
200008fe:	5b1e      	ldrh	r6, [r3, r4]
20000900:	0436      	lsls	r6, r6, #16
20000902:	4335      	orrs	r5, r6
20000904:	7894      	ldrb	r4, [r2, #2]
20000906:	0064      	lsls	r4, r4, #1
20000908:	5b1e      	ldrh	r6, [r3, r4]
2000090a:	78d4      	ldrb	r4, [r2, #3]
2000090c:	3204      	adds	r2, #4
2000090e:	0064      	lsls	r4, r4, #1
20000910:	5b1f      	ldrh	r7, [r3, r4]
20000912:	043f      	lsls	r7, r7, #16
20000914:	433e      	orrs	r6, r7
20000916:	c060      	stmia	r0!, {r5, r6}
20000918:	3901      	subs	r1, #1
2000091a:	d1eb      	bne.n	200008f4 <RenderGraph4_InLoop>

2000091c <RenderGraph4_EndLoop>:
2000091c:	9e06      	ldr	r6, [sp, #24]
2000091e:	4672      	mov	r2, lr
20000920:	e7cf      	b.n	200008c2 <RenderGraph4_OutLoop>

20000922 <RenderGrad1>:
20000922:	2200      	movs	r2, #0

20000924 <RenderGrad2>:
20000924:	07d2      	lsls	r2, r2, #31
20000926:	0fd2      	lsrs	r2, r2, #31

20000928 <RenderGraph8>:
20000928:	b5f0      	push	{r4, r5, r6, r7, lr}
2000092a:	9c05      	ldr	r4, [sp, #20]
2000092c:	8927      	ldrh	r7, [r4, #8]
2000092e:	2603      	movs	r6, #3
20000930:	43b7      	bics	r7, r6
20000932:	43b1      	bics	r1, r6
20000934:	43b3      	bics	r3, r6
20000936:	8865      	ldrh	r5, [r4, #2]
20000938:	436a      	muls	r2, r5
2000093a:	68e5      	ldr	r5, [r4, #12]
2000093c:	1954      	adds	r4, r2, r5
2000093e:	1862      	adds	r2, r4, r1
20000940:	1a79      	subs	r1, r7, r1
20000942:	421b      	tst	r3, r3
20000944:	d008      	beq.n	20000958 <RenderGraph8+0x30>
20000946:	4299      	cmp	r1, r3
20000948:	d900      	bls.n	2000094c <RenderGraph8+0x24>
2000094a:	4619      	mov	r1, r3
2000094c:	1a5b      	subs	r3, r3, r1
2000094e:	0889      	lsrs	r1, r1, #2
20000950:	c006      	stmia	r0!, {r1, r2}
20000952:	4639      	mov	r1, r7
20000954:	4622      	mov	r2, r4
20000956:	e7f4      	b.n	20000942 <RenderGraph8+0x1a>
20000958:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

2000095c <RenderGraph8Mat>:
2000095c:	b5f0      	push	{r4, r5, r6, r7, lr}
2000095e:	0859      	lsrs	r1, r3, #1
20000960:	4249      	negs	r1, r1
20000962:	468e      	mov	lr, r1
20000964:	089f      	lsrs	r7, r3, #2
20000966:	9c05      	ldr	r4, [sp, #20]
20000968:	8961      	ldrh	r1, [r4, #10]
2000096a:	0849      	lsrs	r1, r1, #1
2000096c:	4249      	negs	r1, r1
2000096e:	1889      	adds	r1, r1, r2
20000970:	468c      	mov	ip, r1
20000972:	8b21      	ldrh	r1, [r4, #24]
20000974:	8b62      	ldrh	r2, [r4, #26]
20000976:	4b2c      	ldr	r3, [pc, #176]	; (20000a28 <RenderGraph8Mat_Interp>)
20000978:	68e6      	ldr	r6, [r4, #12]
2000097a:	611e      	str	r6, [r3, #16]
2000097c:	4e2b      	ldr	r6, [pc, #172]	; (20000a2c <RenderGraph8Mat_Ctrl>)
2000097e:	1a76      	subs	r6, r6, r1
20000980:	014d      	lsls	r5, r1, #5
20000982:	432e      	orrs	r6, r5
20000984:	3901      	subs	r1, #1
20000986:	188d      	adds	r5, r1, r2
20000988:	02ad      	lsls	r5, r5, #10
2000098a:	432e      	orrs	r6, r5
2000098c:	631e      	str	r6, [r3, #48]	; 0x30
2000098e:	4e27      	ldr	r6, [pc, #156]	; (20000a2c <RenderGraph8Mat_Ctrl>)
20000990:	0289      	lsls	r1, r1, #10
20000992:	430e      	orrs	r6, r1
20000994:	62de      	str	r6, [r3, #44]	; 0x2c
20000996:	6964      	ldr	r4, [r4, #20]
20000998:	6825      	ldr	r5, [r4, #0]
2000099a:	609d      	str	r5, [r3, #8]
2000099c:	68e6      	ldr	r6, [r4, #12]
2000099e:	60de      	str	r6, [r3, #12]
200009a0:	4672      	mov	r2, lr
200009a2:	4355      	muls	r5, r2
200009a4:	4372      	muls	r2, r6
200009a6:	6861      	ldr	r1, [r4, #4]
200009a8:	4666      	mov	r6, ip
200009aa:	4371      	muls	r1, r6
200009ac:	186d      	adds	r5, r5, r1
200009ae:	68a1      	ldr	r1, [r4, #8]
200009b0:	186d      	adds	r5, r5, r1
200009b2:	601d      	str	r5, [r3, #0]
200009b4:	6921      	ldr	r1, [r4, #16]
200009b6:	4371      	muls	r1, r6
200009b8:	1852      	adds	r2, r2, r1
200009ba:	6961      	ldr	r1, [r4, #20]
200009bc:	1852      	adds	r2, r2, r1
200009be:	605a      	str	r2, [r3, #4]
200009c0:	087f      	lsrs	r7, r7, #1
200009c2:	d30e      	bcc.n	200009e2 <RenderGraph8Mat+0x86>
200009c4:	69dc      	ldr	r4, [r3, #28]
200009c6:	7826      	ldrb	r6, [r4, #0]
200009c8:	69dc      	ldr	r4, [r3, #28]
200009ca:	7825      	ldrb	r5, [r4, #0]
200009cc:	022d      	lsls	r5, r5, #8
200009ce:	432e      	orrs	r6, r5
200009d0:	69dc      	ldr	r4, [r3, #28]
200009d2:	7825      	ldrb	r5, [r4, #0]
200009d4:	042d      	lsls	r5, r5, #16
200009d6:	432e      	orrs	r6, r5
200009d8:	69dc      	ldr	r4, [r3, #28]
200009da:	7825      	ldrb	r5, [r4, #0]
200009dc:	062d      	lsls	r5, r5, #24
200009de:	432e      	orrs	r6, r5
200009e0:	c040      	stmia	r0!, {r6}
200009e2:	423f      	tst	r7, r7
200009e4:	d01e      	beq.n	20000a24 <RenderGraph8Mat+0xc8>
200009e6:	69dc      	ldr	r4, [r3, #28]
200009e8:	7821      	ldrb	r1, [r4, #0]
200009ea:	69dc      	ldr	r4, [r3, #28]
200009ec:	7824      	ldrb	r4, [r4, #0]
200009ee:	0224      	lsls	r4, r4, #8
200009f0:	4321      	orrs	r1, r4
200009f2:	69dc      	ldr	r4, [r3, #28]
200009f4:	7824      	ldrb	r4, [r4, #0]
200009f6:	0424      	lsls	r4, r4, #16
200009f8:	4321      	orrs	r1, r4
200009fa:	69dc      	ldr	r4, [r3, #28]
200009fc:	7824      	ldrb	r4, [r4, #0]
200009fe:	0624      	lsls	r4, r4, #24
20000a00:	4321      	orrs	r1, r4
20000a02:	69dc      	ldr	r4, [r3, #28]
20000a04:	7822      	ldrb	r2, [r4, #0]
20000a06:	69dc      	ldr	r4, [r3, #28]
20000a08:	7824      	ldrb	r4, [r4, #0]
20000a0a:	0224      	lsls	r4, r4, #8
20000a0c:	4322      	orrs	r2, r4
20000a0e:	69dc      	ldr	r4, [r3, #28]
20000a10:	7824      	ldrb	r4, [r4, #0]
20000a12:	0424      	lsls	r4, r4, #16
20000a14:	4322      	orrs	r2, r4
20000a16:	69dc      	ldr	r4, [r3, #28]
20000a18:	7824      	ldrb	r4, [r4, #0]
20000a1a:	0624      	lsls	r4, r4, #24
20000a1c:	4322      	orrs	r2, r4
20000a1e:	c006      	stmia	r0!, {r1, r2}
20000a20:	3f01      	subs	r7, #1
20000a22:	d1e0      	bne.n	200009e6 <RenderGraph8Mat+0x8a>
20000a24:	bdf0      	pop	{r4, r5, r6, r7, pc}
20000a26:	46c0      	nop			; (mov r8, r8)

20000a28 <RenderGraph8Mat_Interp>:
20000a28:	d00000c0 	.word	0xd00000c0

20000a2c <RenderGraph8Mat_Ctrl>:
20000a2c:	0004000c 	.word	0x0004000c

20000a30 <RenderGraph8Persp>:
20000a30:	b5f0      	push	{r4, r5, r6, r7, lr}
20000a32:	9c05      	ldr	r4, [sp, #20]
20000a34:	8961      	ldrh	r1, [r4, #10]
20000a36:	1a52      	subs	r2, r2, r1
20000a38:	4694      	mov	ip, r2
20000a3a:	030e      	lsls	r6, r1, #12
20000a3c:	4d38      	ldr	r5, [pc, #224]	; (20000b20 <RenderGraph8Persp_pSioBase>)
20000a3e:	662e      	str	r6, [r5, #96]	; 0x60
20000a40:	8a66      	ldrh	r6, [r4, #18]
20000a42:	1852      	adds	r2, r2, r1
20000a44:	18b6      	adds	r6, r6, r2
20000a46:	3601      	adds	r6, #1
20000a48:	666e      	str	r6, [r5, #100]	; 0x64
20000a4a:	085d      	lsrs	r5, r3, #1
20000a4c:	426d      	negs	r5, r5
20000a4e:	46ae      	mov	lr, r5
20000a50:	089f      	lsrs	r7, r3, #2
20000a52:	8b21      	ldrh	r1, [r4, #24]
20000a54:	8b62      	ldrh	r2, [r4, #26]
20000a56:	4b33      	ldr	r3, [pc, #204]	; (20000b24 <RenderGraph8Persp_Interp>)
20000a58:	68e6      	ldr	r6, [r4, #12]
20000a5a:	611e      	str	r6, [r3, #16]
20000a5c:	4e32      	ldr	r6, [pc, #200]	; (20000b28 <RenderGraph8Persp_Ctrl>)
20000a5e:	1a76      	subs	r6, r6, r1
20000a60:	014d      	lsls	r5, r1, #5
20000a62:	432e      	orrs	r6, r5
20000a64:	3901      	subs	r1, #1
20000a66:	188d      	adds	r5, r1, r2
20000a68:	02ad      	lsls	r5, r5, #10
20000a6a:	432e      	orrs	r6, r5
20000a6c:	631e      	str	r6, [r3, #48]	; 0x30
20000a6e:	4e2e      	ldr	r6, [pc, #184]	; (20000b28 <RenderGraph8Persp_Ctrl>)
20000a70:	0289      	lsls	r1, r1, #10
20000a72:	430e      	orrs	r6, r1
20000a74:	62de      	str	r6, [r3, #44]	; 0x2c
20000a76:	6964      	ldr	r4, [r4, #20]
20000a78:	4929      	ldr	r1, [pc, #164]	; (20000b20 <RenderGraph8Persp_pSioBase>)
20000a7a:	6f09      	ldr	r1, [r1, #112]	; 0x70
20000a7c:	6825      	ldr	r5, [r4, #0]
20000a7e:	434d      	muls	r5, r1
20000a80:	132d      	asrs	r5, r5, #12
20000a82:	609d      	str	r5, [r3, #8]
20000a84:	68e6      	ldr	r6, [r4, #12]
20000a86:	434e      	muls	r6, r1
20000a88:	1336      	asrs	r6, r6, #12
20000a8a:	60de      	str	r6, [r3, #12]
20000a8c:	4672      	mov	r2, lr
20000a8e:	4355      	muls	r5, r2
20000a90:	4372      	muls	r2, r6
20000a92:	468e      	mov	lr, r1
20000a94:	6866      	ldr	r6, [r4, #4]
20000a96:	4371      	muls	r1, r6
20000a98:	1309      	asrs	r1, r1, #12
20000a9a:	4666      	mov	r6, ip
20000a9c:	4371      	muls	r1, r6
20000a9e:	186d      	adds	r5, r5, r1
20000aa0:	68a1      	ldr	r1, [r4, #8]
20000aa2:	186d      	adds	r5, r5, r1
20000aa4:	601d      	str	r5, [r3, #0]
20000aa6:	6921      	ldr	r1, [r4, #16]
20000aa8:	4675      	mov	r5, lr
20000aaa:	4369      	muls	r1, r5
20000aac:	1309      	asrs	r1, r1, #12
20000aae:	4371      	muls	r1, r6
20000ab0:	1852      	adds	r2, r2, r1
20000ab2:	6961      	ldr	r1, [r4, #20]
20000ab4:	1852      	adds	r2, r2, r1
20000ab6:	605a      	str	r2, [r3, #4]
20000ab8:	087f      	lsrs	r7, r7, #1
20000aba:	d30e      	bcc.n	20000ada <RenderGraph8Persp+0xaa>
20000abc:	69dc      	ldr	r4, [r3, #28]
20000abe:	7826      	ldrb	r6, [r4, #0]
20000ac0:	69dc      	ldr	r4, [r3, #28]
20000ac2:	7825      	ldrb	r5, [r4, #0]
20000ac4:	022d      	lsls	r5, r5, #8
20000ac6:	432e      	orrs	r6, r5
20000ac8:	69dc      	ldr	r4, [r3, #28]
20000aca:	7825      	ldrb	r5, [r4, #0]
20000acc:	042d      	lsls	r5, r5, #16
20000ace:	432e      	orrs	r6, r5
20000ad0:	69dc      	ldr	r4, [r3, #28]
20000ad2:	7825      	ldrb	r5, [r4, #0]
20000ad4:	062d      	lsls	r5, r5, #24
20000ad6:	432e      	orrs	r6, r5
20000ad8:	c040      	stmia	r0!, {r6}
20000ada:	423f      	tst	r7, r7
20000adc:	d01e      	beq.n	20000b1c <RenderGraph8Persp+0xec>
20000ade:	69dc      	ldr	r4, [r3, #28]
20000ae0:	7821      	ldrb	r1, [r4, #0]
20000ae2:	69dc      	ldr	r4, [r3, #28]
20000ae4:	7824      	ldrb	r4, [r4, #0]
20000ae6:	0224      	lsls	r4, r4, #8
20000ae8:	4321      	orrs	r1, r4
20000aea:	69dc      	ldr	r4, [r3, #28]
20000aec:	7824      	ldrb	r4, [r4, #0]
20000aee:	0424      	lsls	r4, r4, #16
20000af0:	4321      	orrs	r1, r4
20000af2:	69dc      	ldr	r4, [r3, #28]
20000af4:	7824      	ldrb	r4, [r4, #0]
20000af6:	0624      	lsls	r4, r4, #24
20000af8:	4321      	orrs	r1, r4
20000afa:	69dc      	ldr	r4, [r3, #28]
20000afc:	7822      	ldrb	r2, [r4, #0]
20000afe:	69dc      	ldr	r4, [r3, #28]
20000b00:	7824      	ldrb	r4, [r4, #0]
20000b02:	0224      	lsls	r4, r4, #8
20000b04:	4322      	orrs	r2, r4
20000b06:	69dc      	ldr	r4, [r3, #28]
20000b08:	7824      	ldrb	r4, [r4, #0]
20000b0a:	0424      	lsls	r4, r4, #16
20000b0c:	4322      	orrs	r2, r4
20000b0e:	69dc      	ldr	r4, [r3, #28]
20000b10:	7824      	ldrb	r4, [r4, #0]
20000b12:	0624      	lsls	r4, r4, #24
20000b14:	4322      	orrs	r2, r4
20000b16:	c006      	stmia	r0!, {r1, r2}
20000b18:	3f01      	subs	r7, #1
20000b1a:	d1e0      	bne.n	20000ade <RenderGraph8Persp+0xae>
20000b1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
20000b1e:	46c0      	nop			; (mov r8, r8)

20000b20 <RenderGraph8Persp_pSioBase>:
20000b20:	d0000000 	.word	0xd0000000

20000b24 <RenderGraph8Persp_Interp>:
20000b24:	d00000c0 	.word	0xd00000c0

20000b28 <RenderGraph8Persp_Ctrl>:
20000b28:	0004000c 	.word	0x0004000c

20000b2c <RenderGText>:
20000b2c:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
20000b2e:	4644      	mov	r4, r8
20000b30:	b410      	push	{r4}
20000b32:	9c09      	ldr	r4, [sp, #36]	; 0x24
20000b34:	4e3a      	ldr	r6, [pc, #232]	; (20000c20 <RenderGText_pSioBase>)
20000b36:	6632      	str	r2, [r6, #96]	; 0x60
20000b38:	8a62      	ldrh	r2, [r4, #18]
20000b3a:	6672      	str	r2, [r6, #100]	; 0x64
20000b3c:	8925      	ldrh	r5, [r4, #8]
20000b3e:	2703      	movs	r7, #3
20000b40:	43bd      	bics	r5, r7
20000b42:	9509      	str	r5, [sp, #36]	; 0x24
20000b44:	43b9      	bics	r1, r7
20000b46:	43bb      	bics	r3, r7
20000b48:	9303      	str	r3, [sp, #12]
20000b4a:	6f75      	ldr	r5, [r6, #116]	; 0x74
20000b4c:	6f32      	ldr	r2, [r6, #112]	; 0x70
20000b4e:	022d      	lsls	r5, r5, #8
20000b50:	6963      	ldr	r3, [r4, #20]
20000b52:	442b      	add	r3, r5
20000b54:	4698      	mov	r8, r3
20000b56:	8865      	ldrh	r5, [r4, #2]
20000b58:	436a      	muls	r2, r5
20000b5a:	68e5      	ldr	r5, [r4, #12]
20000b5c:	442a      	add	r2, r5
20000b5e:	9202      	str	r2, [sp, #8]
20000b60:	69a3      	ldr	r3, [r4, #24]
20000b62:	9301      	str	r3, [sp, #4]
20000b64:	440b      	add	r3, r1
20000b66:	08ce      	lsrs	r6, r1, #3
20000b68:	4432      	add	r2, r6
20000b6a:	7ca4      	ldrb	r4, [r4, #18]
20000b6c:	0225      	lsls	r5, r4, #8
20000b6e:	4325      	orrs	r5, r4
20000b70:	042c      	lsls	r4, r5, #16
20000b72:	432c      	orrs	r4, r5
20000b74:	4d29      	ldr	r5, [pc, #164]	; (20000c1c <RenderGText_Addr>)
20000b76:	46ae      	mov	lr, r5
20000b78:	074e      	lsls	r6, r1, #29
20000b7a:	d515      	bpl.n	20000ba8 <RenderGText+0x7c>
20000b7c:	7815      	ldrb	r5, [r2, #0]
20000b7e:	3201      	adds	r2, #1
20000b80:	4445      	add	r5, r8
20000b82:	782d      	ldrb	r5, [r5, #0]
20000b84:	cb40      	ldmia	r3!, {r6}
20000b86:	4066      	eors	r6, r4
20000b88:	00ed      	lsls	r5, r5, #3
20000b8a:	4475      	add	r5, lr
20000b8c:	686f      	ldr	r7, [r5, #4]
20000b8e:	4037      	ands	r7, r6
20000b90:	4067      	eors	r7, r4
20000b92:	c080      	stmia	r0!, {r7}
20000b94:	3104      	adds	r1, #4
20000b96:	9f09      	ldr	r7, [sp, #36]	; 0x24
20000b98:	42b9      	cmp	r1, r7
20000b9a:	d302      	bcc.n	20000ba2 <RenderGText+0x76>
20000b9c:	2100      	movs	r1, #0
20000b9e:	9a02      	ldr	r2, [sp, #8]
20000ba0:	9b01      	ldr	r3, [sp, #4]
20000ba2:	9f03      	ldr	r7, [sp, #12]
20000ba4:	3f04      	subs	r7, #4
20000ba6:	9703      	str	r7, [sp, #12]
20000ba8:	9f09      	ldr	r7, [sp, #36]	; 0x24
20000baa:	1a7f      	subs	r7, r7, r1

20000bac <RenderGText_OutLoop>:
20000bac:	9e03      	ldr	r6, [sp, #12]
20000bae:	42b7      	cmp	r7, r6
20000bb0:	d900      	bls.n	20000bb4 <RenderGText_OutLoop+0x8>
20000bb2:	4637      	mov	r7, r6
20000bb4:	2f08      	cmp	r7, #8
20000bb6:	d214      	bcs.n	20000be2 <RenderGText_Last+0x26>
20000bb8:	2f04      	cmp	r7, #4
20000bba:	d30f      	bcc.n	20000bdc <RenderGText_Last+0x20>

20000bbc <RenderGText_Last>:
20000bbc:	7815      	ldrb	r5, [r2, #0]
20000bbe:	3201      	adds	r2, #1
20000bc0:	4445      	add	r5, r8
20000bc2:	782d      	ldrb	r5, [r5, #0]
20000bc4:	cb40      	ldmia	r3!, {r6}
20000bc6:	4066      	eors	r6, r4
20000bc8:	00ed      	lsls	r5, r5, #3
20000bca:	4475      	add	r5, lr
20000bcc:	6829      	ldr	r1, [r5, #0]
20000bce:	4031      	ands	r1, r6
20000bd0:	4061      	eors	r1, r4
20000bd2:	c002      	stmia	r0!, {r1}
20000bd4:	9a02      	ldr	r2, [sp, #8]
20000bd6:	9b01      	ldr	r3, [sp, #4]
20000bd8:	2f04      	cmp	r7, #4
20000bda:	d8e7      	bhi.n	20000bac <RenderGText_OutLoop>
20000bdc:	bc10      	pop	{r4}
20000bde:	46a0      	mov	r8, r4
20000be0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
20000be2:	08b9      	lsrs	r1, r7, #2
20000be4:	008d      	lsls	r5, r1, #2
20000be6:	1b76      	subs	r6, r6, r5
20000be8:	9603      	str	r6, [sp, #12]
20000bea:	3901      	subs	r1, #1

20000bec <RenderGText_InLoop>:
20000bec:	7817      	ldrb	r7, [r2, #0]
20000bee:	3201      	adds	r2, #1
20000bf0:	4447      	add	r7, r8
20000bf2:	783f      	ldrb	r7, [r7, #0]
20000bf4:	cb40      	ldmia	r3!, {r6}
20000bf6:	4066      	eors	r6, r4
20000bf8:	00ff      	lsls	r7, r7, #3
20000bfa:	4477      	add	r7, lr
20000bfc:	683d      	ldr	r5, [r7, #0]
20000bfe:	4035      	ands	r5, r6
20000c00:	4065      	eors	r5, r4
20000c02:	cb40      	ldmia	r3!, {r6}
20000c04:	4066      	eors	r6, r4
20000c06:	687f      	ldr	r7, [r7, #4]
20000c08:	4037      	ands	r7, r6
20000c0a:	4067      	eors	r7, r4
20000c0c:	c0a0      	stmia	r0!, {r5, r7}
20000c0e:	3902      	subs	r1, #2
20000c10:	d8ec      	bhi.n	20000bec <RenderGText_InLoop>
20000c12:	9f09      	ldr	r7, [sp, #36]	; 0x24
20000c14:	d0d2      	beq.n	20000bbc <RenderGText_Last>
20000c16:	9a02      	ldr	r2, [sp, #8]
20000c18:	9b01      	ldr	r3, [sp, #4]
20000c1a:	e7c7      	b.n	20000bac <RenderGText_OutLoop>

20000c1c <RenderGText_Addr>:
20000c1c:	2000e56c 	.word	0x2000e56c

20000c20 <RenderGText_pSioBase>:
20000c20:	d0000000 	.word	0xd0000000

20000c24 <RenderLevel>:
20000c24:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
20000c26:	9c08      	ldr	r4, [sp, #32]
20000c28:	8925      	ldrh	r5, [r4, #8]
20000c2a:	2703      	movs	r7, #3
20000c2c:	43bd      	bics	r5, r7
20000c2e:	9508      	str	r5, [sp, #32]
20000c30:	43b9      	bics	r1, r7
20000c32:	43bb      	bics	r3, r7
20000c34:	9302      	str	r3, [sp, #8]
20000c36:	8965      	ldrh	r5, [r4, #10]
20000c38:	3d01      	subs	r5, #1
20000c3a:	1aad      	subs	r5, r5, r2
20000c3c:	7e23      	ldrb	r3, [r4, #24]
20000c3e:	9300      	str	r3, [sp, #0]
20000c40:	68e2      	ldr	r2, [r4, #12]
20000c42:	9201      	str	r2, [sp, #4]
20000c44:	440a      	add	r2, r1
20000c46:	7d66      	ldrb	r6, [r4, #21]
20000c48:	0233      	lsls	r3, r6, #8
20000c4a:	4333      	orrs	r3, r6
20000c4c:	041e      	lsls	r6, r3, #16
20000c4e:	431e      	orrs	r6, r3
20000c50:	7d24      	ldrb	r4, [r4, #20]
20000c52:	0223      	lsls	r3, r4, #8
20000c54:	4323      	orrs	r3, r4
20000c56:	041c      	lsls	r4, r3, #16
20000c58:	431c      	orrs	r4, r3
20000c5a:	4066      	eors	r6, r4
20000c5c:	4b4c      	ldr	r3, [pc, #304]	; (20000d90 <RenderLevel_Addr>)
20000c5e:	469e      	mov	lr, r3
20000c60:	9f08      	ldr	r7, [sp, #32]
20000c62:	1a7f      	subs	r7, r7, r1
20000c64:	2f04      	cmp	r7, #4
20000c66:	d801      	bhi.n	20000c6c <RenderLevel_OutLoop>
20000c68:	9f08      	ldr	r7, [sp, #32]
20000c6a:	e007      	b.n	20000c7c <RenderLevel_Last>

20000c6c <RenderLevel_OutLoop>:
20000c6c:	9b02      	ldr	r3, [sp, #8]
20000c6e:	429f      	cmp	r7, r3
20000c70:	d900      	bls.n	20000c74 <RenderLevel_OutLoop+0x8>
20000c72:	461f      	mov	r7, r3
20000c74:	2f08      	cmp	r7, #8
20000c76:	d231      	bcs.n	20000cdc <RenderLevel_Last2+0x30>
20000c78:	2f04      	cmp	r7, #4
20000c7a:	d32e      	bcc.n	20000cda <RenderLevel_Last2+0x2e>

20000c7c <RenderLevel_Last>:
20000c7c:	9b00      	ldr	r3, [sp, #0]
20000c7e:	429d      	cmp	r5, r3
20000c80:	d314      	bcc.n	20000cac <RenderLevel_Last2>
20000c82:	2100      	movs	r1, #0
20000c84:	7813      	ldrb	r3, [r2, #0]
20000c86:	42ab      	cmp	r3, r5
20000c88:	4149      	adcs	r1, r1
20000c8a:	7853      	ldrb	r3, [r2, #1]
20000c8c:	42ab      	cmp	r3, r5
20000c8e:	4149      	adcs	r1, r1
20000c90:	7893      	ldrb	r3, [r2, #2]
20000c92:	42ab      	cmp	r3, r5
20000c94:	4149      	adcs	r1, r1
20000c96:	78d3      	ldrb	r3, [r2, #3]
20000c98:	42ab      	cmp	r3, r5
20000c9a:	4149      	adcs	r1, r1
20000c9c:	3204      	adds	r2, #4
20000c9e:	00c9      	lsls	r1, r1, #3
20000ca0:	4471      	add	r1, lr
20000ca2:	6849      	ldr	r1, [r1, #4]
20000ca4:	4031      	ands	r1, r6
20000ca6:	4061      	eors	r1, r4
20000ca8:	c002      	stmia	r0!, {r1}
20000caa:	e013      	b.n	20000cd4 <RenderLevel_Last2+0x28>

20000cac <RenderLevel_Last2>:
20000cac:	2100      	movs	r1, #0
20000cae:	7813      	ldrb	r3, [r2, #0]
20000cb0:	429d      	cmp	r5, r3
20000cb2:	4149      	adcs	r1, r1
20000cb4:	7853      	ldrb	r3, [r2, #1]
20000cb6:	429d      	cmp	r5, r3
20000cb8:	4149      	adcs	r1, r1
20000cba:	7893      	ldrb	r3, [r2, #2]
20000cbc:	429d      	cmp	r5, r3
20000cbe:	4149      	adcs	r1, r1
20000cc0:	78d3      	ldrb	r3, [r2, #3]
20000cc2:	429d      	cmp	r5, r3
20000cc4:	4149      	adcs	r1, r1
20000cc6:	3204      	adds	r2, #4
20000cc8:	00c9      	lsls	r1, r1, #3
20000cca:	4471      	add	r1, lr
20000ccc:	6849      	ldr	r1, [r1, #4]
20000cce:	4031      	ands	r1, r6
20000cd0:	4061      	eors	r1, r4
20000cd2:	c002      	stmia	r0!, {r1}
20000cd4:	9a01      	ldr	r2, [sp, #4]
20000cd6:	2f04      	cmp	r7, #4
20000cd8:	d8c8      	bhi.n	20000c6c <RenderLevel_OutLoop>
20000cda:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
20000cdc:	08b9      	lsrs	r1, r7, #2
20000cde:	008f      	lsls	r7, r1, #2
20000ce0:	1bdb      	subs	r3, r3, r7
20000ce2:	9302      	str	r3, [sp, #8]
20000ce4:	3901      	subs	r1, #1
20000ce6:	9b00      	ldr	r3, [sp, #0]
20000ce8:	429d      	cmp	r5, r3
20000cea:	d328      	bcc.n	20000d3e <RenderLevel_InLoopBot>

20000cec <RenderLevel_InLoopTop>:
20000cec:	2700      	movs	r7, #0
20000cee:	7813      	ldrb	r3, [r2, #0]
20000cf0:	42ab      	cmp	r3, r5
20000cf2:	417f      	adcs	r7, r7
20000cf4:	7853      	ldrb	r3, [r2, #1]
20000cf6:	42ab      	cmp	r3, r5
20000cf8:	417f      	adcs	r7, r7
20000cfa:	7893      	ldrb	r3, [r2, #2]
20000cfc:	42ab      	cmp	r3, r5
20000cfe:	417f      	adcs	r7, r7
20000d00:	78d3      	ldrb	r3, [r2, #3]
20000d02:	42ab      	cmp	r3, r5
20000d04:	417f      	adcs	r7, r7
20000d06:	7913      	ldrb	r3, [r2, #4]
20000d08:	42ab      	cmp	r3, r5
20000d0a:	417f      	adcs	r7, r7
20000d0c:	7953      	ldrb	r3, [r2, #5]
20000d0e:	42ab      	cmp	r3, r5
20000d10:	417f      	adcs	r7, r7
20000d12:	7993      	ldrb	r3, [r2, #6]
20000d14:	42ab      	cmp	r3, r5
20000d16:	417f      	adcs	r7, r7
20000d18:	79d3      	ldrb	r3, [r2, #7]
20000d1a:	42ab      	cmp	r3, r5
20000d1c:	417f      	adcs	r7, r7
20000d1e:	3208      	adds	r2, #8
20000d20:	00ff      	lsls	r7, r7, #3
20000d22:	4477      	add	r7, lr
20000d24:	683b      	ldr	r3, [r7, #0]
20000d26:	4033      	ands	r3, r6
20000d28:	4063      	eors	r3, r4
20000d2a:	687f      	ldr	r7, [r7, #4]
20000d2c:	4037      	ands	r7, r6
20000d2e:	4067      	eors	r7, r4
20000d30:	c088      	stmia	r0!, {r3, r7}
20000d32:	3902      	subs	r1, #2
20000d34:	d8da      	bhi.n	20000cec <RenderLevel_InLoopTop>
20000d36:	9f08      	ldr	r7, [sp, #32]
20000d38:	d0a0      	beq.n	20000c7c <RenderLevel_Last>
20000d3a:	9a01      	ldr	r2, [sp, #4]
20000d3c:	e796      	b.n	20000c6c <RenderLevel_OutLoop>

20000d3e <RenderLevel_InLoopBot>:
20000d3e:	2700      	movs	r7, #0
20000d40:	7813      	ldrb	r3, [r2, #0]
20000d42:	429d      	cmp	r5, r3
20000d44:	417f      	adcs	r7, r7
20000d46:	7853      	ldrb	r3, [r2, #1]
20000d48:	429d      	cmp	r5, r3
20000d4a:	417f      	adcs	r7, r7
20000d4c:	7893      	ldrb	r3, [r2, #2]
20000d4e:	429d      	cmp	r5, r3
20000d50:	417f      	adcs	r7, r7
20000d52:	78d3      	ldrb	r3, [r2, #3]
20000d54:	429d      	cmp	r5, r3
20000d56:	417f      	adcs	r7, r7
20000d58:	7913      	ldrb	r3, [r2, #4]
20000d5a:	429d      	cmp	r5, r3
20000d5c:	417f      	adcs	r7, r7
20000d5e:	7953      	ldrb	r3, [r2, #5]
20000d60:	429d      	cmp	r5, r3
20000d62:	417f      	adcs	r7, r7
20000d64:	7993      	ldrb	r3, [r2, #6]
20000d66:	429d      	cmp	r5, r3
20000d68:	417f      	adcs	r7, r7
20000d6a:	79d3      	ldrb	r3, [r2, #7]
20000d6c:	429d      	cmp	r5, r3
20000d6e:	417f      	adcs	r7, r7
20000d70:	3208      	adds	r2, #8
20000d72:	00ff      	lsls	r7, r7, #3
20000d74:	4477      	add	r7, lr
20000d76:	683b      	ldr	r3, [r7, #0]
20000d78:	4033      	ands	r3, r6
20000d7a:	4063      	eors	r3, r4
20000d7c:	687f      	ldr	r7, [r7, #4]
20000d7e:	4037      	ands	r7, r6
20000d80:	4067      	eors	r7, r4
20000d82:	c088      	stmia	r0!, {r3, r7}
20000d84:	3902      	subs	r1, #2
20000d86:	d8da      	bhi.n	20000d3e <RenderLevel_InLoopBot>
20000d88:	9f08      	ldr	r7, [sp, #32]
20000d8a:	d0d5      	beq.n	20000d38 <RenderLevel_InLoopTop+0x4c>
20000d8c:	9a01      	ldr	r2, [sp, #4]
20000d8e:	e76d      	b.n	20000c6c <RenderLevel_OutLoop>

20000d90 <RenderLevel_Addr>:
20000d90:	2000e56c 	.word	0x2000e56c

20000d94 <RenderLevelGrad>:
20000d94:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
20000d96:	9c08      	ldr	r4, [sp, #32]
20000d98:	8925      	ldrh	r5, [r4, #8]
20000d9a:	2703      	movs	r7, #3
20000d9c:	43bd      	bics	r5, r7
20000d9e:	9508      	str	r5, [sp, #32]
20000da0:	43b9      	bics	r1, r7
20000da2:	43bb      	bics	r3, r7
20000da4:	9302      	str	r3, [sp, #8]
20000da6:	8965      	ldrh	r5, [r4, #10]
20000da8:	3d01      	subs	r5, #1
20000daa:	1aad      	subs	r5, r5, r2
20000dac:	68e2      	ldr	r2, [r4, #12]
20000dae:	9201      	str	r2, [sp, #4]
20000db0:	440a      	add	r2, r1
20000db2:	6966      	ldr	r6, [r4, #20]
20000db4:	5d76      	ldrb	r6, [r6, r5]
20000db6:	0233      	lsls	r3, r6, #8
20000db8:	4333      	orrs	r3, r6
20000dba:	041e      	lsls	r6, r3, #16
20000dbc:	431e      	orrs	r6, r3
20000dbe:	69a4      	ldr	r4, [r4, #24]
20000dc0:	5d64      	ldrb	r4, [r4, r5]
20000dc2:	0223      	lsls	r3, r4, #8
20000dc4:	4323      	orrs	r3, r4
20000dc6:	041c      	lsls	r4, r3, #16
20000dc8:	431c      	orrs	r4, r3
20000dca:	4066      	eors	r6, r4
20000dcc:	4b2a      	ldr	r3, [pc, #168]	; (20000e78 <RenderLevelGrad_Addr>)
20000dce:	469e      	mov	lr, r3
20000dd0:	9f08      	ldr	r7, [sp, #32]
20000dd2:	1a7f      	subs	r7, r7, r1
20000dd4:	2f04      	cmp	r7, #4
20000dd6:	d801      	bhi.n	20000ddc <RenderLevelGrad_OutLoop>
20000dd8:	9f08      	ldr	r7, [sp, #32]
20000dda:	e007      	b.n	20000dec <RenderLevelGrad_Last>

20000ddc <RenderLevelGrad_OutLoop>:
20000ddc:	9b02      	ldr	r3, [sp, #8]
20000dde:	429f      	cmp	r7, r3
20000de0:	d900      	bls.n	20000de4 <RenderLevelGrad_OutLoop+0x8>
20000de2:	461f      	mov	r7, r3
20000de4:	2f08      	cmp	r7, #8
20000de6:	d219      	bcs.n	20000e1c <RenderLevelGrad_Last+0x30>
20000de8:	2f04      	cmp	r7, #4
20000dea:	d316      	bcc.n	20000e1a <RenderLevelGrad_Last+0x2e>

20000dec <RenderLevelGrad_Last>:
20000dec:	2100      	movs	r1, #0
20000dee:	7813      	ldrb	r3, [r2, #0]
20000df0:	42ab      	cmp	r3, r5
20000df2:	4149      	adcs	r1, r1
20000df4:	7853      	ldrb	r3, [r2, #1]
20000df6:	42ab      	cmp	r3, r5
20000df8:	4149      	adcs	r1, r1
20000dfa:	7893      	ldrb	r3, [r2, #2]
20000dfc:	42ab      	cmp	r3, r5
20000dfe:	4149      	adcs	r1, r1
20000e00:	78d3      	ldrb	r3, [r2, #3]
20000e02:	42ab      	cmp	r3, r5
20000e04:	4149      	adcs	r1, r1
20000e06:	3204      	adds	r2, #4
20000e08:	00c9      	lsls	r1, r1, #3
20000e0a:	4471      	add	r1, lr
20000e0c:	6849      	ldr	r1, [r1, #4]
20000e0e:	4031      	ands	r1, r6
20000e10:	4061      	eors	r1, r4
20000e12:	c002      	stmia	r0!, {r1}
20000e14:	9a01      	ldr	r2, [sp, #4]
20000e16:	2f04      	cmp	r7, #4
20000e18:	d8e0      	bhi.n	20000ddc <RenderLevelGrad_OutLoop>
20000e1a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
20000e1c:	08b9      	lsrs	r1, r7, #2
20000e1e:	008f      	lsls	r7, r1, #2
20000e20:	1bdb      	subs	r3, r3, r7
20000e22:	9302      	str	r3, [sp, #8]
20000e24:	3901      	subs	r1, #1

20000e26 <RenderLevelGrad_InLoopTop>:
20000e26:	2700      	movs	r7, #0
20000e28:	7813      	ldrb	r3, [r2, #0]
20000e2a:	42ab      	cmp	r3, r5
20000e2c:	417f      	adcs	r7, r7
20000e2e:	7853      	ldrb	r3, [r2, #1]
20000e30:	42ab      	cmp	r3, r5
20000e32:	417f      	adcs	r7, r7
20000e34:	7893      	ldrb	r3, [r2, #2]
20000e36:	42ab      	cmp	r3, r5
20000e38:	417f      	adcs	r7, r7
20000e3a:	78d3      	ldrb	r3, [r2, #3]
20000e3c:	42ab      	cmp	r3, r5
20000e3e:	417f      	adcs	r7, r7
20000e40:	7913      	ldrb	r3, [r2, #4]
20000e42:	42ab      	cmp	r3, r5
20000e44:	417f      	adcs	r7, r7
20000e46:	7953      	ldrb	r3, [r2, #5]
20000e48:	42ab      	cmp	r3, r5
20000e4a:	417f      	adcs	r7, r7
20000e4c:	7993      	ldrb	r3, [r2, #6]
20000e4e:	42ab      	cmp	r3, r5
20000e50:	417f      	adcs	r7, r7
20000e52:	79d3      	ldrb	r3, [r2, #7]
20000e54:	42ab      	cmp	r3, r5
20000e56:	417f      	adcs	r7, r7
20000e58:	3208      	adds	r2, #8
20000e5a:	00ff      	lsls	r7, r7, #3
20000e5c:	4477      	add	r7, lr
20000e5e:	683b      	ldr	r3, [r7, #0]
20000e60:	4033      	ands	r3, r6
20000e62:	4063      	eors	r3, r4
20000e64:	687f      	ldr	r7, [r7, #4]
20000e66:	4037      	ands	r7, r6
20000e68:	4067      	eors	r7, r4
20000e6a:	c088      	stmia	r0!, {r3, r7}
20000e6c:	3902      	subs	r1, #2
20000e6e:	d8da      	bhi.n	20000e26 <RenderLevelGrad_InLoopTop>
20000e70:	9f08      	ldr	r7, [sp, #32]
20000e72:	d0bb      	beq.n	20000dec <RenderLevelGrad_Last>
20000e74:	9a01      	ldr	r2, [sp, #4]
20000e76:	e7b1      	b.n	20000ddc <RenderLevelGrad_OutLoop>

20000e78 <RenderLevelGrad_Addr>:
20000e78:	2000e56c 	.word	0x2000e56c

20000e7c <RenderMText>:
20000e7c:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
20000e7e:	9c08      	ldr	r4, [sp, #32]
20000e80:	4e34      	ldr	r6, [pc, #208]	; (20000f54 <RenderMText_pSioBase>)
20000e82:	6632      	str	r2, [r6, #96]	; 0x60
20000e84:	8a62      	ldrh	r2, [r4, #18]
20000e86:	6672      	str	r2, [r6, #100]	; 0x64
20000e88:	8925      	ldrh	r5, [r4, #8]
20000e8a:	2703      	movs	r7, #3
20000e8c:	43bd      	bics	r5, r7
20000e8e:	9508      	str	r5, [sp, #32]
20000e90:	43b9      	bics	r1, r7
20000e92:	43bb      	bics	r3, r7
20000e94:	9302      	str	r3, [sp, #8]
20000e96:	6f75      	ldr	r5, [r6, #116]	; 0x74
20000e98:	6f32      	ldr	r2, [r6, #112]	; 0x70
20000e9a:	022d      	lsls	r5, r5, #8
20000e9c:	6963      	ldr	r3, [r4, #20]
20000e9e:	442b      	add	r3, r5
20000ea0:	8865      	ldrh	r5, [r4, #2]
20000ea2:	436a      	muls	r2, r5
20000ea4:	68e5      	ldr	r5, [r4, #12]
20000ea6:	442a      	add	r2, r5
20000ea8:	9201      	str	r2, [sp, #4]
20000eaa:	08ce      	lsrs	r6, r1, #3
20000eac:	4432      	add	r2, r6
20000eae:	7e66      	ldrb	r6, [r4, #25]
20000eb0:	0237      	lsls	r7, r6, #8
20000eb2:	4337      	orrs	r7, r6
20000eb4:	043e      	lsls	r6, r7, #16
20000eb6:	433e      	orrs	r6, r7
20000eb8:	7e24      	ldrb	r4, [r4, #24]
20000eba:	0225      	lsls	r5, r4, #8
20000ebc:	4325      	orrs	r5, r4
20000ebe:	042c      	lsls	r4, r5, #16
20000ec0:	432c      	orrs	r4, r5
20000ec2:	4066      	eors	r6, r4
20000ec4:	4d22      	ldr	r5, [pc, #136]	; (20000f50 <RenderMText_Addr>)
20000ec6:	46ae      	mov	lr, r5
20000ec8:	074d      	lsls	r5, r1, #29
20000eca:	d511      	bpl.n	20000ef0 <RenderMText+0x74>
20000ecc:	7815      	ldrb	r5, [r2, #0]
20000ece:	5d5d      	ldrb	r5, [r3, r5]
20000ed0:	3201      	adds	r2, #1
20000ed2:	00ed      	lsls	r5, r5, #3
20000ed4:	4475      	add	r5, lr
20000ed6:	686f      	ldr	r7, [r5, #4]
20000ed8:	4037      	ands	r7, r6
20000eda:	4067      	eors	r7, r4
20000edc:	c080      	stmia	r0!, {r7}
20000ede:	3104      	adds	r1, #4
20000ee0:	9f08      	ldr	r7, [sp, #32]
20000ee2:	42b9      	cmp	r1, r7
20000ee4:	d301      	bcc.n	20000eea <RenderMText+0x6e>
20000ee6:	2100      	movs	r1, #0
20000ee8:	9a01      	ldr	r2, [sp, #4]
20000eea:	9f02      	ldr	r7, [sp, #8]
20000eec:	3f04      	subs	r7, #4
20000eee:	9702      	str	r7, [sp, #8]
20000ef0:	9f08      	ldr	r7, [sp, #32]
20000ef2:	1a7f      	subs	r7, r7, r1

20000ef4 <RenderMText_OutLoop>:
20000ef4:	9d02      	ldr	r5, [sp, #8]
20000ef6:	42af      	cmp	r7, r5
20000ef8:	d900      	bls.n	20000efc <RenderMText_OutLoop+0x8>
20000efa:	462f      	mov	r7, r5
20000efc:	2f08      	cmp	r7, #8
20000efe:	d20e      	bcs.n	20000f1e <RenderMText_Last+0x1a>
20000f00:	2f04      	cmp	r7, #4
20000f02:	d30b      	bcc.n	20000f1c <RenderMText_Last+0x18>

20000f04 <RenderMText_Last>:
20000f04:	7815      	ldrb	r5, [r2, #0]
20000f06:	5d5d      	ldrb	r5, [r3, r5]
20000f08:	3201      	adds	r2, #1
20000f0a:	00ed      	lsls	r5, r5, #3
20000f0c:	4475      	add	r5, lr
20000f0e:	6829      	ldr	r1, [r5, #0]
20000f10:	4031      	ands	r1, r6
20000f12:	4061      	eors	r1, r4
20000f14:	c002      	stmia	r0!, {r1}
20000f16:	9a01      	ldr	r2, [sp, #4]
20000f18:	2f04      	cmp	r7, #4
20000f1a:	d8eb      	bhi.n	20000ef4 <RenderMText_OutLoop>
20000f1c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
20000f1e:	08b9      	lsrs	r1, r7, #2
20000f20:	008f      	lsls	r7, r1, #2
20000f22:	1bed      	subs	r5, r5, r7
20000f24:	9502      	str	r5, [sp, #8]
20000f26:	3901      	subs	r1, #1

20000f28 <RenderMText_InLoop>:
20000f28:	7815      	ldrb	r5, [r2, #0]
20000f2a:	5d5d      	ldrb	r5, [r3, r5]
20000f2c:	3201      	adds	r2, #1
20000f2e:	00ed      	lsls	r5, r5, #3
20000f30:	4475      	add	r5, lr
20000f32:	682f      	ldr	r7, [r5, #0]
20000f34:	4037      	ands	r7, r6
20000f36:	4067      	eors	r7, r4
20000f38:	c080      	stmia	r0!, {r7}
20000f3a:	686f      	ldr	r7, [r5, #4]
20000f3c:	4037      	ands	r7, r6
20000f3e:	4067      	eors	r7, r4
20000f40:	c080      	stmia	r0!, {r7}
20000f42:	3902      	subs	r1, #2
20000f44:	d8f0      	bhi.n	20000f28 <RenderMText_InLoop>
20000f46:	9f08      	ldr	r7, [sp, #32]
20000f48:	d0dc      	beq.n	20000f04 <RenderMText_Last>
20000f4a:	9a01      	ldr	r2, [sp, #4]
20000f4c:	e7d2      	b.n	20000ef4 <RenderMText_OutLoop>
20000f4e:	46c0      	nop			; (mov r8, r8)

20000f50 <RenderMText_Addr>:
20000f50:	2000e56c 	.word	0x2000e56c

20000f54 <RenderMText_pSioBase>:
20000f54:	d0000000 	.word	0xd0000000

20000f58 <RenderOscil>:
20000f58:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
20000f5a:	9c08      	ldr	r4, [sp, #32]
20000f5c:	8925      	ldrh	r5, [r4, #8]
20000f5e:	2703      	movs	r7, #3
20000f60:	43bd      	bics	r5, r7
20000f62:	9508      	str	r5, [sp, #32]
20000f64:	43b9      	bics	r1, r7
20000f66:	43bb      	bics	r3, r7
20000f68:	9302      	str	r3, [sp, #8]
20000f6a:	8965      	ldrh	r5, [r4, #10]
20000f6c:	3d01      	subs	r5, #1
20000f6e:	1aad      	subs	r5, r5, r2
20000f70:	7e23      	ldrb	r3, [r4, #24]
20000f72:	469e      	mov	lr, r3
20000f74:	68e2      	ldr	r2, [r4, #12]
20000f76:	9201      	str	r2, [sp, #4]
20000f78:	440a      	add	r2, r1
20000f7a:	7d66      	ldrb	r6, [r4, #21]
20000f7c:	0233      	lsls	r3, r6, #8
20000f7e:	4333      	orrs	r3, r6
20000f80:	041e      	lsls	r6, r3, #16
20000f82:	431e      	orrs	r6, r3
20000f84:	7d24      	ldrb	r4, [r4, #20]
20000f86:	0223      	lsls	r3, r4, #8
20000f88:	4323      	orrs	r3, r4
20000f8a:	041c      	lsls	r4, r3, #16
20000f8c:	431c      	orrs	r4, r3
20000f8e:	4066      	eors	r6, r4
20000f90:	9f08      	ldr	r7, [sp, #32]
20000f92:	1a7f      	subs	r7, r7, r1
20000f94:	2f04      	cmp	r7, #4
20000f96:	d801      	bhi.n	20000f9c <RenderOscil_OutLoop>
20000f98:	9f08      	ldr	r7, [sp, #32]
20000f9a:	e007      	b.n	20000fac <RenderOscil_Last>

20000f9c <RenderOscil_OutLoop>:
20000f9c:	9b02      	ldr	r3, [sp, #8]
20000f9e:	429f      	cmp	r7, r3
20000fa0:	d900      	bls.n	20000fa4 <RenderOscil_OutLoop+0x8>
20000fa2:	461f      	mov	r7, r3
20000fa4:	2f08      	cmp	r7, #8
20000fa6:	d21e      	bcs.n	20000fe6 <RenderOscil_Last+0x3a>
20000fa8:	2f04      	cmp	r7, #4
20000faa:	d31b      	bcc.n	20000fe4 <RenderOscil_Last+0x38>

20000fac <RenderOscil_Last>:
20000fac:	2100      	movs	r1, #0
20000fae:	7813      	ldrb	r3, [r2, #0]
20000fb0:	1b5b      	subs	r3, r3, r5
20000fb2:	459e      	cmp	lr, r3
20000fb4:	4149      	adcs	r1, r1
20000fb6:	7853      	ldrb	r3, [r2, #1]
20000fb8:	1b5b      	subs	r3, r3, r5
20000fba:	459e      	cmp	lr, r3
20000fbc:	4149      	adcs	r1, r1
20000fbe:	7893      	ldrb	r3, [r2, #2]
20000fc0:	1b5b      	subs	r3, r3, r5
20000fc2:	459e      	cmp	lr, r3
20000fc4:	4149      	adcs	r1, r1
20000fc6:	78d3      	ldrb	r3, [r2, #3]
20000fc8:	1b5b      	subs	r3, r3, r5
20000fca:	459e      	cmp	lr, r3
20000fcc:	4149      	adcs	r1, r1
20000fce:	3204      	adds	r2, #4
20000fd0:	00c9      	lsls	r1, r1, #3
20000fd2:	4b20      	ldr	r3, [pc, #128]	; (20001054 <RenderOscil_Addr>)
20000fd4:	4419      	add	r1, r3
20000fd6:	6849      	ldr	r1, [r1, #4]
20000fd8:	4031      	ands	r1, r6
20000fda:	4061      	eors	r1, r4
20000fdc:	c002      	stmia	r0!, {r1}
20000fde:	9a01      	ldr	r2, [sp, #4]
20000fe0:	2f04      	cmp	r7, #4
20000fe2:	d8db      	bhi.n	20000f9c <RenderOscil_OutLoop>
20000fe4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
20000fe6:	08b9      	lsrs	r1, r7, #2
20000fe8:	008f      	lsls	r7, r1, #2
20000fea:	1bdb      	subs	r3, r3, r7
20000fec:	9302      	str	r3, [sp, #8]
20000fee:	3901      	subs	r1, #1

20000ff0 <RenderOscil_InLoop>:
20000ff0:	2700      	movs	r7, #0
20000ff2:	7813      	ldrb	r3, [r2, #0]
20000ff4:	1b5b      	subs	r3, r3, r5
20000ff6:	459e      	cmp	lr, r3
20000ff8:	417f      	adcs	r7, r7
20000ffa:	7853      	ldrb	r3, [r2, #1]
20000ffc:	1b5b      	subs	r3, r3, r5
20000ffe:	459e      	cmp	lr, r3
20001000:	417f      	adcs	r7, r7
20001002:	7893      	ldrb	r3, [r2, #2]
20001004:	1b5b      	subs	r3, r3, r5
20001006:	459e      	cmp	lr, r3
20001008:	417f      	adcs	r7, r7
2000100a:	78d3      	ldrb	r3, [r2, #3]
2000100c:	1b5b      	subs	r3, r3, r5
2000100e:	459e      	cmp	lr, r3
20001010:	417f      	adcs	r7, r7
20001012:	7913      	ldrb	r3, [r2, #4]
20001014:	1b5b      	subs	r3, r3, r5
20001016:	459e      	cmp	lr, r3
20001018:	417f      	adcs	r7, r7
2000101a:	7953      	ldrb	r3, [r2, #5]
2000101c:	1b5b      	subs	r3, r3, r5
2000101e:	459e      	cmp	lr, r3
20001020:	417f      	adcs	r7, r7
20001022:	7993      	ldrb	r3, [r2, #6]
20001024:	1b5b      	subs	r3, r3, r5
20001026:	459e      	cmp	lr, r3
20001028:	417f      	adcs	r7, r7
2000102a:	79d3      	ldrb	r3, [r2, #7]
2000102c:	1b5b      	subs	r3, r3, r5
2000102e:	459e      	cmp	lr, r3
20001030:	417f      	adcs	r7, r7
20001032:	3208      	adds	r2, #8
20001034:	00ff      	lsls	r7, r7, #3
20001036:	4b07      	ldr	r3, [pc, #28]	; (20001054 <RenderOscil_Addr>)
20001038:	441f      	add	r7, r3
2000103a:	683b      	ldr	r3, [r7, #0]
2000103c:	4033      	ands	r3, r6
2000103e:	4063      	eors	r3, r4
20001040:	687f      	ldr	r7, [r7, #4]
20001042:	4037      	ands	r7, r6
20001044:	4067      	eors	r7, r4
20001046:	c088      	stmia	r0!, {r3, r7}
20001048:	3902      	subs	r1, #2
2000104a:	d8d1      	bhi.n	20000ff0 <RenderOscil_InLoop>
2000104c:	9f08      	ldr	r7, [sp, #32]
2000104e:	d0ad      	beq.n	20000fac <RenderOscil_Last>
20001050:	9a01      	ldr	r2, [sp, #4]
20001052:	e7a3      	b.n	20000f9c <RenderOscil_OutLoop>

20001054 <RenderOscil_Addr>:
20001054:	2000e56c 	.word	0x2000e56c

20001058 <RenderOscLine>:
20001058:	b5fc      	push	{r2, r3, r4, r5, r6, r7, lr}
2000105a:	9c07      	ldr	r4, [sp, #28]
2000105c:	8925      	ldrh	r5, [r4, #8]
2000105e:	086d      	lsrs	r5, r5, #1
20001060:	9507      	str	r5, [sp, #28]
20001062:	0849      	lsrs	r1, r1, #1
20001064:	085b      	lsrs	r3, r3, #1
20001066:	9301      	str	r3, [sp, #4]
20001068:	8965      	ldrh	r5, [r4, #10]
2000106a:	3d01      	subs	r5, #1
2000106c:	1aad      	subs	r5, r5, r2
2000106e:	46ae      	mov	lr, r5
20001070:	68e2      	ldr	r2, [r4, #12]
20001072:	9200      	str	r2, [sp, #0]
20001074:	440a      	add	r2, r1
20001076:	7d66      	ldrb	r6, [r4, #21]
20001078:	0237      	lsls	r7, r6, #8
2000107a:	433e      	orrs	r6, r7
2000107c:	7d24      	ldrb	r4, [r4, #20]
2000107e:	0227      	lsls	r7, r4, #8
20001080:	433c      	orrs	r4, r7
20001082:	9f07      	ldr	r7, [sp, #28]
20001084:	1a79      	subs	r1, r7, r1

20001086 <RenderOscLine_OutLoop>:
20001086:	9b01      	ldr	r3, [sp, #4]
20001088:	4299      	cmp	r1, r3
2000108a:	d900      	bls.n	2000108e <RenderOscLine_OutLoop+0x8>
2000108c:	4619      	mov	r1, r3
2000108e:	2900      	cmp	r1, #0
20001090:	d01b      	beq.n	200010ca <RenderOscLine_Stop>
20001092:	1a5b      	subs	r3, r3, r1
20001094:	9301      	str	r3, [sp, #4]
20001096:	7815      	ldrb	r5, [r2, #0]

20001098 <RenderOscLine_InLoop>:
20001098:	7813      	ldrb	r3, [r2, #0]
2000109a:	3201      	adds	r2, #1
2000109c:	4627      	mov	r7, r4
2000109e:	4573      	cmp	r3, lr
200010a0:	d00a      	beq.n	200010b8 <RenderOscLine_InLoop+0x20>
200010a2:	d303      	bcc.n	200010ac <RenderOscLine_InLoop+0x14>
200010a4:	42ab      	cmp	r3, r5
200010a6:	d901      	bls.n	200010ac <RenderOscLine_InLoop+0x14>
200010a8:	45ae      	cmp	lr, r5
200010aa:	d805      	bhi.n	200010b8 <RenderOscLine_InLoop+0x20>
200010ac:	42ab      	cmp	r3, r5
200010ae:	d204      	bcs.n	200010ba <RenderOscLine_InLoop+0x22>
200010b0:	4573      	cmp	r3, lr
200010b2:	d202      	bcs.n	200010ba <RenderOscLine_InLoop+0x22>
200010b4:	45ae      	cmp	lr, r5
200010b6:	d200      	bcs.n	200010ba <RenderOscLine_InLoop+0x22>
200010b8:	4637      	mov	r7, r6
200010ba:	8007      	strh	r7, [r0, #0]
200010bc:	3002      	adds	r0, #2
200010be:	461d      	mov	r5, r3
200010c0:	3901      	subs	r1, #1
200010c2:	d1e9      	bne.n	20001098 <RenderOscLine_InLoop>
200010c4:	9907      	ldr	r1, [sp, #28]
200010c6:	9a00      	ldr	r2, [sp, #0]
200010c8:	e7dd      	b.n	20001086 <RenderOscLine_OutLoop>

200010ca <RenderOscLine_Stop>:
200010ca:	bdfc      	pop	{r2, r3, r4, r5, r6, r7, pc}

200010cc <RenderOscLine_Addr>:
200010cc:	2000e56c 	.word	0x2000e56c

200010d0 <RenderPersp>:
200010d0:	b5f0      	push	{r4, r5, r6, r7, lr}
200010d2:	4e41      	ldr	r6, [pc, #260]	; (200011d8 <RenderPersp_pSioBase>)
200010d4:	8b15      	ldrh	r5, [r2, #24]
200010d6:	7f54      	ldrb	r4, [r2, #29]
200010d8:	b264      	sxtb	r4, r4
200010da:	00a4      	lsls	r4, r4, #2
200010dc:	d107      	bne.n	200010ee <RenderPersp+0x1e>
200010de:	086d      	lsrs	r5, r5, #1
200010e0:	1b49      	subs	r1, r1, r5
200010e2:	468c      	mov	ip, r1
200010e4:	2501      	movs	r5, #1
200010e6:	6675      	str	r5, [r6, #100]	; 0x64
200010e8:	032d      	lsls	r5, r5, #12
200010ea:	6635      	str	r5, [r6, #96]	; 0x60
200010ec:	e009      	b.n	20001102 <RenderPersp+0x32>
200010ee:	d502      	bpl.n	200010f6 <RenderPersp+0x26>
200010f0:	1a69      	subs	r1, r5, r1
200010f2:	3901      	subs	r1, #1
200010f4:	4264      	negs	r4, r4
200010f6:	1b4f      	subs	r7, r1, r5
200010f8:	46bc      	mov	ip, r7
200010fa:	032d      	lsls	r5, r5, #12
200010fc:	6635      	str	r5, [r6, #96]	; 0x60
200010fe:	1909      	adds	r1, r1, r4
20001100:	6671      	str	r1, [r6, #100]	; 0x64
20001102:	8ad3      	ldrh	r3, [r2, #22]
20001104:	085d      	lsrs	r5, r3, #1
20001106:	426d      	negs	r5, r5
20001108:	46ae      	mov	lr, r5
2000110a:	089f      	lsrs	r7, r3, #2
2000110c:	7f91      	ldrb	r1, [r2, #30]
2000110e:	7fd4      	ldrb	r4, [r2, #31]
20001110:	4b32      	ldr	r3, [pc, #200]	; (200011dc <RenderPersp_Interp>)
20001112:	6816      	ldr	r6, [r2, #0]
20001114:	611e      	str	r6, [r3, #16]
20001116:	4e32      	ldr	r6, [pc, #200]	; (200011e0 <RenderPersp_Ctrl>)
20001118:	1a76      	subs	r6, r6, r1
2000111a:	014d      	lsls	r5, r1, #5
2000111c:	432e      	orrs	r6, r5
2000111e:	3901      	subs	r1, #1
20001120:	190d      	adds	r5, r1, r4
20001122:	02ad      	lsls	r5, r5, #10
20001124:	432e      	orrs	r6, r5
20001126:	631e      	str	r6, [r3, #48]	; 0x30
20001128:	4e2d      	ldr	r6, [pc, #180]	; (200011e0 <RenderPersp_Ctrl>)
2000112a:	0289      	lsls	r1, r1, #10
2000112c:	430e      	orrs	r6, r1
2000112e:	62de      	str	r6, [r3, #44]	; 0x2c
20001130:	6854      	ldr	r4, [r2, #4]
20001132:	4929      	ldr	r1, [pc, #164]	; (200011d8 <RenderPersp_pSioBase>)
20001134:	6f09      	ldr	r1, [r1, #112]	; 0x70
20001136:	6825      	ldr	r5, [r4, #0]
20001138:	434d      	muls	r5, r1
2000113a:	132d      	asrs	r5, r5, #12
2000113c:	609d      	str	r5, [r3, #8]
2000113e:	68e6      	ldr	r6, [r4, #12]
20001140:	434e      	muls	r6, r1
20001142:	1336      	asrs	r6, r6, #12
20001144:	60de      	str	r6, [r3, #12]
20001146:	4672      	mov	r2, lr
20001148:	4355      	muls	r5, r2
2000114a:	4372      	muls	r2, r6
2000114c:	468e      	mov	lr, r1
2000114e:	6866      	ldr	r6, [r4, #4]
20001150:	4371      	muls	r1, r6
20001152:	1309      	asrs	r1, r1, #12
20001154:	4666      	mov	r6, ip
20001156:	4371      	muls	r1, r6
20001158:	186d      	adds	r5, r5, r1
2000115a:	68a1      	ldr	r1, [r4, #8]
2000115c:	186d      	adds	r5, r5, r1
2000115e:	601d      	str	r5, [r3, #0]
20001160:	6921      	ldr	r1, [r4, #16]
20001162:	4675      	mov	r5, lr
20001164:	4369      	muls	r1, r5
20001166:	1309      	asrs	r1, r1, #12
20001168:	4371      	muls	r1, r6
2000116a:	1852      	adds	r2, r2, r1
2000116c:	6961      	ldr	r1, [r4, #20]
2000116e:	1852      	adds	r2, r2, r1
20001170:	605a      	str	r2, [r3, #4]
20001172:	087f      	lsrs	r7, r7, #1
20001174:	d30e      	bcc.n	20001194 <RenderPersp+0xc4>
20001176:	69dc      	ldr	r4, [r3, #28]
20001178:	7826      	ldrb	r6, [r4, #0]
2000117a:	69dc      	ldr	r4, [r3, #28]
2000117c:	7825      	ldrb	r5, [r4, #0]
2000117e:	022d      	lsls	r5, r5, #8
20001180:	432e      	orrs	r6, r5
20001182:	69dc      	ldr	r4, [r3, #28]
20001184:	7825      	ldrb	r5, [r4, #0]
20001186:	042d      	lsls	r5, r5, #16
20001188:	432e      	orrs	r6, r5
2000118a:	69dc      	ldr	r4, [r3, #28]
2000118c:	7825      	ldrb	r5, [r4, #0]
2000118e:	062d      	lsls	r5, r5, #24
20001190:	432e      	orrs	r6, r5
20001192:	c040      	stmia	r0!, {r6}
20001194:	423f      	tst	r7, r7
20001196:	d01e      	beq.n	200011d6 <RenderPersp+0x106>
20001198:	69dc      	ldr	r4, [r3, #28]
2000119a:	7821      	ldrb	r1, [r4, #0]
2000119c:	69dc      	ldr	r4, [r3, #28]
2000119e:	7824      	ldrb	r4, [r4, #0]
200011a0:	0224      	lsls	r4, r4, #8
200011a2:	4321      	orrs	r1, r4
200011a4:	69dc      	ldr	r4, [r3, #28]
200011a6:	7824      	ldrb	r4, [r4, #0]
200011a8:	0424      	lsls	r4, r4, #16
200011aa:	4321      	orrs	r1, r4
200011ac:	69dc      	ldr	r4, [r3, #28]
200011ae:	7824      	ldrb	r4, [r4, #0]
200011b0:	0624      	lsls	r4, r4, #24
200011b2:	4321      	orrs	r1, r4
200011b4:	69dc      	ldr	r4, [r3, #28]
200011b6:	7822      	ldrb	r2, [r4, #0]
200011b8:	69dc      	ldr	r4, [r3, #28]
200011ba:	7824      	ldrb	r4, [r4, #0]
200011bc:	0224      	lsls	r4, r4, #8
200011be:	4322      	orrs	r2, r4
200011c0:	69dc      	ldr	r4, [r3, #28]
200011c2:	7824      	ldrb	r4, [r4, #0]
200011c4:	0424      	lsls	r4, r4, #16
200011c6:	4322      	orrs	r2, r4
200011c8:	69dc      	ldr	r4, [r3, #28]
200011ca:	7824      	ldrb	r4, [r4, #0]
200011cc:	0624      	lsls	r4, r4, #24
200011ce:	4322      	orrs	r2, r4
200011d0:	c006      	stmia	r0!, {r1, r2}
200011d2:	3f01      	subs	r7, #1
200011d4:	d1e0      	bne.n	20001198 <RenderPersp+0xc8>
200011d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

200011d8 <RenderPersp_pSioBase>:
200011d8:	d0000000 	.word	0xd0000000

200011dc <RenderPersp_Interp>:
200011dc:	d00000c0 	.word	0xd00000c0

200011e0 <RenderPersp_Ctrl>:
200011e0:	0004000c 	.word	0x0004000c

200011e4 <RenderPersp2>:
200011e4:	b5f0      	push	{r4, r5, r6, r7, lr}
200011e6:	4e3c      	ldr	r6, [pc, #240]	; (200012d8 <RenderPersp_pSioBase>)
200011e8:	8b15      	ldrh	r5, [r2, #24]
200011ea:	7f54      	ldrb	r4, [r2, #29]
200011ec:	b264      	sxtb	r4, r4
200011ee:	00a4      	lsls	r4, r4, #2
200011f0:	d107      	bne.n	20001202 <RenderPersp2+0x1e>
200011f2:	086d      	lsrs	r5, r5, #1
200011f4:	1b49      	subs	r1, r1, r5
200011f6:	468c      	mov	ip, r1
200011f8:	2501      	movs	r5, #1
200011fa:	6675      	str	r5, [r6, #100]	; 0x64
200011fc:	032d      	lsls	r5, r5, #12
200011fe:	6635      	str	r5, [r6, #96]	; 0x60
20001200:	e009      	b.n	20001216 <RenderPersp2+0x32>
20001202:	d502      	bpl.n	2000120a <RenderPersp2+0x26>
20001204:	1a69      	subs	r1, r5, r1
20001206:	3901      	subs	r1, #1
20001208:	4264      	negs	r4, r4
2000120a:	1b4f      	subs	r7, r1, r5
2000120c:	46bc      	mov	ip, r7
2000120e:	032d      	lsls	r5, r5, #12
20001210:	6635      	str	r5, [r6, #96]	; 0x60
20001212:	1909      	adds	r1, r1, r4
20001214:	6671      	str	r1, [r6, #100]	; 0x64
20001216:	8ad3      	ldrh	r3, [r2, #22]
20001218:	085d      	lsrs	r5, r3, #1
2000121a:	426d      	negs	r5, r5
2000121c:	46ae      	mov	lr, r5
2000121e:	089f      	lsrs	r7, r3, #2
20001220:	7f91      	ldrb	r1, [r2, #30]
20001222:	7fd4      	ldrb	r4, [r2, #31]
20001224:	4b2d      	ldr	r3, [pc, #180]	; (200012dc <RenderPersp_Interp>)
20001226:	6816      	ldr	r6, [r2, #0]
20001228:	611e      	str	r6, [r3, #16]
2000122a:	4e2d      	ldr	r6, [pc, #180]	; (200012e0 <RenderPersp_Ctrl>)
2000122c:	1a76      	subs	r6, r6, r1
2000122e:	014d      	lsls	r5, r1, #5
20001230:	432e      	orrs	r6, r5
20001232:	3901      	subs	r1, #1
20001234:	190d      	adds	r5, r1, r4
20001236:	02ad      	lsls	r5, r5, #10
20001238:	432e      	orrs	r6, r5
2000123a:	631e      	str	r6, [r3, #48]	; 0x30
2000123c:	4e28      	ldr	r6, [pc, #160]	; (200012e0 <RenderPersp_Ctrl>)
2000123e:	0289      	lsls	r1, r1, #10
20001240:	430e      	orrs	r6, r1
20001242:	62de      	str	r6, [r3, #44]	; 0x2c
20001244:	6854      	ldr	r4, [r2, #4]
20001246:	4924      	ldr	r1, [pc, #144]	; (200012d8 <RenderPersp_pSioBase>)
20001248:	6f09      	ldr	r1, [r1, #112]	; 0x70
2000124a:	6825      	ldr	r5, [r4, #0]
2000124c:	434d      	muls	r5, r1
2000124e:	12ed      	asrs	r5, r5, #11
20001250:	609d      	str	r5, [r3, #8]
20001252:	106d      	asrs	r5, r5, #1
20001254:	68e6      	ldr	r6, [r4, #12]
20001256:	434e      	muls	r6, r1
20001258:	12f6      	asrs	r6, r6, #11
2000125a:	60de      	str	r6, [r3, #12]
2000125c:	1076      	asrs	r6, r6, #1
2000125e:	4672      	mov	r2, lr
20001260:	4355      	muls	r5, r2
20001262:	4372      	muls	r2, r6
20001264:	468e      	mov	lr, r1
20001266:	6866      	ldr	r6, [r4, #4]
20001268:	4371      	muls	r1, r6
2000126a:	1309      	asrs	r1, r1, #12
2000126c:	4666      	mov	r6, ip
2000126e:	4371      	muls	r1, r6
20001270:	186d      	adds	r5, r5, r1
20001272:	68a1      	ldr	r1, [r4, #8]
20001274:	186d      	adds	r5, r5, r1
20001276:	601d      	str	r5, [r3, #0]
20001278:	6921      	ldr	r1, [r4, #16]
2000127a:	4675      	mov	r5, lr
2000127c:	4369      	muls	r1, r5
2000127e:	1309      	asrs	r1, r1, #12
20001280:	4371      	muls	r1, r6
20001282:	1852      	adds	r2, r2, r1
20001284:	6961      	ldr	r1, [r4, #20]
20001286:	1852      	adds	r2, r2, r1
20001288:	605a      	str	r2, [r3, #4]
2000128a:	087f      	lsrs	r7, r7, #1
2000128c:	d30a      	bcc.n	200012a4 <RenderPersp2+0xc0>
2000128e:	69dc      	ldr	r4, [r3, #28]
20001290:	7821      	ldrb	r1, [r4, #0]
20001292:	020c      	lsls	r4, r1, #8
20001294:	4321      	orrs	r1, r4
20001296:	69dc      	ldr	r4, [r3, #28]
20001298:	7824      	ldrb	r4, [r4, #0]
2000129a:	0424      	lsls	r4, r4, #16
2000129c:	4321      	orrs	r1, r4
2000129e:	0224      	lsls	r4, r4, #8
200012a0:	4321      	orrs	r1, r4
200012a2:	c002      	stmia	r0!, {r1}
200012a4:	423f      	tst	r7, r7
200012a6:	d016      	beq.n	200012d6 <RenderPersp2+0xf2>
200012a8:	69dc      	ldr	r4, [r3, #28]
200012aa:	7821      	ldrb	r1, [r4, #0]
200012ac:	020c      	lsls	r4, r1, #8
200012ae:	4321      	orrs	r1, r4
200012b0:	69dc      	ldr	r4, [r3, #28]
200012b2:	7824      	ldrb	r4, [r4, #0]
200012b4:	0424      	lsls	r4, r4, #16
200012b6:	4321      	orrs	r1, r4
200012b8:	0224      	lsls	r4, r4, #8
200012ba:	4321      	orrs	r1, r4
200012bc:	69dc      	ldr	r4, [r3, #28]
200012be:	7822      	ldrb	r2, [r4, #0]
200012c0:	0214      	lsls	r4, r2, #8
200012c2:	4322      	orrs	r2, r4
200012c4:	69dc      	ldr	r4, [r3, #28]
200012c6:	7824      	ldrb	r4, [r4, #0]
200012c8:	0424      	lsls	r4, r4, #16
200012ca:	4322      	orrs	r2, r4
200012cc:	0224      	lsls	r4, r4, #8
200012ce:	4322      	orrs	r2, r4
200012d0:	c006      	stmia	r0!, {r1, r2}
200012d2:	3f01      	subs	r7, #1
200012d4:	d1e8      	bne.n	200012a8 <RenderPersp2+0xc4>
200012d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

200012d8 <RenderPersp_pSioBase>:
200012d8:	d0000000 	.word	0xd0000000

200012dc <RenderPersp_Interp>:
200012dc:	d00000c0 	.word	0xd00000c0

200012e0 <RenderPersp_Ctrl>:
200012e0:	0004000c 	.word	0x0004000c

200012e4 <RenderPlane2>:
200012e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
200012e6:	9c06      	ldr	r4, [sp, #24]
200012e8:	8927      	ldrh	r7, [r4, #8]
200012ea:	2603      	movs	r6, #3
200012ec:	43b7      	bics	r7, r6
200012ee:	9706      	str	r7, [sp, #24]
200012f0:	43b1      	bics	r1, r6
200012f2:	43b3      	bics	r3, r6
200012f4:	9300      	str	r3, [sp, #0]
200012f6:	8865      	ldrh	r5, [r4, #2]
200012f8:	436a      	muls	r2, r5
200012fa:	68e5      	ldr	r5, [r4, #12]
200012fc:	442a      	add	r2, r5
200012fe:	4696      	mov	lr, r2
20001300:	08ce      	lsrs	r6, r1, #3
20001302:	4432      	add	r2, r6
20001304:	6963      	ldr	r3, [r4, #20]
20001306:	69a7      	ldr	r7, [r4, #24]
20001308:	074d      	lsls	r5, r1, #29
2000130a:	d512      	bpl.n	20001332 <RenderPlane2+0x4e>
2000130c:	7815      	ldrb	r5, [r2, #0]
2000130e:	5cd6      	ldrb	r6, [r2, r3]
20001310:	3201      	adds	r2, #1
20001312:	0736      	lsls	r6, r6, #28
20001314:	0db6      	lsrs	r6, r6, #22
20001316:	072d      	lsls	r5, r5, #28
20001318:	0ead      	lsrs	r5, r5, #26
2000131a:	4335      	orrs	r5, r6
2000131c:	597d      	ldr	r5, [r7, r5]
2000131e:	c020      	stmia	r0!, {r5}
20001320:	3104      	adds	r1, #4
20001322:	9e06      	ldr	r6, [sp, #24]
20001324:	42b1      	cmp	r1, r6
20001326:	d301      	bcc.n	2000132c <RenderPlane2+0x48>
20001328:	2100      	movs	r1, #0
2000132a:	4672      	mov	r2, lr
2000132c:	9e00      	ldr	r6, [sp, #0]
2000132e:	3e04      	subs	r6, #4
20001330:	9600      	str	r6, [sp, #0]
20001332:	9e06      	ldr	r6, [sp, #24]
20001334:	1a76      	subs	r6, r6, r1

20001336 <RenderPlane2_OutLoop>:
20001336:	9c00      	ldr	r4, [sp, #0]
20001338:	42a6      	cmp	r6, r4
2000133a:	d900      	bls.n	2000133e <RenderPlane2_OutLoop+0x8>
2000133c:	4626      	mov	r6, r4
2000133e:	2e08      	cmp	r6, #8
20001340:	d20f      	bcs.n	20001362 <RenderPlane2_Last+0x1c>
20001342:	2e04      	cmp	r6, #4
20001344:	d30c      	bcc.n	20001360 <RenderPlane2_Last+0x1a>

20001346 <RenderPlane2_Last>:
20001346:	7815      	ldrb	r5, [r2, #0]
20001348:	5cd4      	ldrb	r4, [r2, r3]
2000134a:	3201      	adds	r2, #1
2000134c:	0924      	lsrs	r4, r4, #4
2000134e:	0224      	lsls	r4, r4, #8
20001350:	432c      	orrs	r4, r5
20001352:	0924      	lsrs	r4, r4, #4
20001354:	00a4      	lsls	r4, r4, #2
20001356:	593c      	ldr	r4, [r7, r4]
20001358:	c010      	stmia	r0!, {r4}
2000135a:	4672      	mov	r2, lr
2000135c:	2e04      	cmp	r6, #4
2000135e:	d8ea      	bhi.n	20001336 <RenderPlane2_OutLoop>
20001360:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
20001362:	08b1      	lsrs	r1, r6, #2
20001364:	008e      	lsls	r6, r1, #2
20001366:	1ba4      	subs	r4, r4, r6
20001368:	9400      	str	r4, [sp, #0]
2000136a:	3901      	subs	r1, #1

2000136c <RenderPlane2_InLoop>:
2000136c:	7815      	ldrb	r5, [r2, #0]
2000136e:	5cd6      	ldrb	r6, [r2, r3]
20001370:	3201      	adds	r2, #1
20001372:	0934      	lsrs	r4, r6, #4
20001374:	0224      	lsls	r4, r4, #8
20001376:	432c      	orrs	r4, r5
20001378:	0924      	lsrs	r4, r4, #4
2000137a:	00a4      	lsls	r4, r4, #2
2000137c:	593c      	ldr	r4, [r7, r4]
2000137e:	0736      	lsls	r6, r6, #28
20001380:	0db6      	lsrs	r6, r6, #22
20001382:	072d      	lsls	r5, r5, #28
20001384:	0ead      	lsrs	r5, r5, #26
20001386:	4335      	orrs	r5, r6
20001388:	597d      	ldr	r5, [r7, r5]
2000138a:	c030      	stmia	r0!, {r4, r5}
2000138c:	3902      	subs	r1, #2
2000138e:	d8ed      	bhi.n	2000136c <RenderPlane2_InLoop>

20001390 <RenderPlane2_EndLoop>:
20001390:	9e06      	ldr	r6, [sp, #24]
20001392:	d0d8      	beq.n	20001346 <RenderPlane2_Last>
20001394:	4672      	mov	r2, lr
20001396:	e7ce      	b.n	20001336 <RenderPlane2_OutLoop>

20001398 <RenderProgress>:
20001398:	b5f0      	push	{r4, r5, r6, r7, lr}
2000139a:	9c05      	ldr	r4, [sp, #20]
2000139c:	0889      	lsrs	r1, r1, #2
2000139e:	68e5      	ldr	r5, [r4, #12]
200013a0:	5caa      	ldrb	r2, [r5, r2]
200013a2:	089b      	lsrs	r3, r3, #2
200013a4:	8927      	ldrh	r7, [r4, #8]
200013a6:	08bf      	lsrs	r7, r7, #2
200013a8:	46be      	mov	lr, r7
200013aa:	69a5      	ldr	r5, [r4, #24]
200013ac:	6964      	ldr	r4, [r4, #20]
200013ae:	421b      	tst	r3, r3
200013b0:	d017      	beq.n	200013e2 <RenderProgress+0x4a>
200013b2:	4677      	mov	r7, lr
200013b4:	1a7f      	subs	r7, r7, r1
200013b6:	429f      	cmp	r7, r3
200013b8:	d900      	bls.n	200013bc <RenderProgress+0x24>
200013ba:	461f      	mov	r7, r3
200013bc:	1bdb      	subs	r3, r3, r7
200013be:	4291      	cmp	r1, r2
200013c0:	d208      	bcs.n	200013d4 <RenderProgress+0x3c>
200013c2:	1a56      	subs	r6, r2, r1
200013c4:	42be      	cmp	r6, r7
200013c6:	d900      	bls.n	200013ca <RenderProgress+0x32>
200013c8:	463e      	mov	r6, r7
200013ca:	1bbf      	subs	r7, r7, r6
200013cc:	c040      	stmia	r0!, {r6}
200013ce:	1866      	adds	r6, r4, r1
200013d0:	c040      	stmia	r0!, {r6}
200013d2:	4611      	mov	r1, r2
200013d4:	423f      	tst	r7, r7
200013d6:	d002      	beq.n	200013de <RenderProgress+0x46>
200013d8:	c080      	stmia	r0!, {r7}
200013da:	186e      	adds	r6, r5, r1
200013dc:	c040      	stmia	r0!, {r6}
200013de:	2100      	movs	r1, #0
200013e0:	e7e5      	b.n	200013ae <RenderProgress+0x16>
200013e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

200013e4 <RenderSprite>:
200013e4:	b5f0      	push	{r4, r5, r6, r7, lr}
200013e6:	6817      	ldr	r7, [r2, #0]
200013e8:	8ad6      	ldrh	r6, [r2, #22]
200013ea:	8c12      	ldrh	r2, [r2, #32]
200013ec:	3a01      	subs	r2, #1
200013ee:	d324      	bcc.n	2000143a <RenderSprite+0x56>
200013f0:	b407      	push	{r0, r1, r2}
200013f2:	cf08      	ldmia	r7!, {r3}
200013f4:	8a5c      	ldrh	r4, [r3, #18]
200013f6:	b224      	sxth	r4, r4
200013f8:	1b09      	subs	r1, r1, r4
200013fa:	d41c      	bmi.n	20001436 <RenderSprite+0x52>
200013fc:	8adc      	ldrh	r4, [r3, #22]
200013fe:	42a1      	cmp	r1, r4
20001400:	da19      	bge.n	20001436 <RenderSprite+0x52>
20001402:	685c      	ldr	r4, [r3, #4]
20001404:	5c65      	ldrb	r5, [r4, r1]
20001406:	689c      	ldr	r4, [r3, #8]
20001408:	5c62      	ldrb	r2, [r4, r1]
2000140a:	8b1c      	ldrh	r4, [r3, #24]
2000140c:	4361      	muls	r1, r4
2000140e:	681c      	ldr	r4, [r3, #0]
20001410:	4421      	add	r1, r4
20001412:	8a1c      	ldrh	r4, [r3, #16]
20001414:	b224      	sxth	r4, r4
20001416:	7b1b      	ldrb	r3, [r3, #12]
20001418:	1964      	adds	r4, r4, r5
2000141a:	d502      	bpl.n	20001422 <RenderSprite+0x3e>
2000141c:	1b2d      	subs	r5, r5, r4
2000141e:	1912      	adds	r2, r2, r4
20001420:	2400      	movs	r4, #0
20001422:	1949      	adds	r1, r1, r5
20001424:	1b35      	subs	r5, r6, r4
20001426:	42aa      	cmp	r2, r5
20001428:	dd00      	ble.n	2000142c <RenderSprite+0x48>
2000142a:	462a      	mov	r2, r5
2000142c:	4212      	tst	r2, r2
2000142e:	dd02      	ble.n	20001436 <RenderSprite+0x52>
20001430:	1900      	adds	r0, r0, r4
20001432:	f000 fc11 	bl	20001c58 <BlitKey>
20001436:	bc07      	pop	{r0, r1, r2}
20001438:	e7d8      	b.n	200013ec <RenderSprite+0x8>
2000143a:	bdf0      	pop	{r4, r5, r6, r7, pc}

2000143c <RenderTile>:
2000143c:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
2000143e:	9c08      	ldr	r4, [sp, #32]
20001440:	4d2f      	ldr	r5, [pc, #188]	; (20001500 <RenderTile_pSioBase>)
20001442:	662a      	str	r2, [r5, #96]	; 0x60
20001444:	69a2      	ldr	r2, [r4, #24]
20001446:	666a      	str	r2, [r5, #100]	; 0x64
20001448:	8927      	ldrh	r7, [r4, #8]
2000144a:	2603      	movs	r6, #3
2000144c:	43b7      	bics	r7, r6
2000144e:	9700      	str	r7, [sp, #0]
20001450:	43b1      	bics	r1, r6
20001452:	43b3      	bics	r3, r6
20001454:	9301      	str	r3, [sp, #4]
20001456:	8a63      	ldrh	r3, [r4, #18]
20001458:	9302      	str	r3, [sp, #8]
2000145a:	6f6e      	ldr	r6, [r5, #116]	; 0x74
2000145c:	6f2f      	ldr	r7, [r5, #112]	; 0x70
2000145e:	6629      	str	r1, [r5, #96]	; 0x60
20001460:	666b      	str	r3, [r5, #100]	; 0x64
20001462:	435a      	muls	r2, r3
20001464:	8863      	ldrh	r3, [r4, #2]
20001466:	435f      	muls	r7, r3
20001468:	68e3      	ldr	r3, [r4, #12]
2000146a:	18ff      	adds	r7, r7, r3
2000146c:	46be      	mov	lr, r7
2000146e:	9b02      	ldr	r3, [sp, #8]
20001470:	435e      	muls	r6, r3
20001472:	6964      	ldr	r4, [r4, #20]
20001474:	19a4      	adds	r4, r4, r6
20001476:	6f6e      	ldr	r6, [r5, #116]	; 0x74
20001478:	6f2d      	ldr	r5, [r5, #112]	; 0x70
2000147a:	197f      	adds	r7, r7, r5
2000147c:	4236      	tst	r6, r6
2000147e:	d011      	beq.n	200014a4 <RenderTile+0x68>
20001480:	1b9d      	subs	r5, r3, r6
20001482:	1949      	adds	r1, r1, r5
20001484:	9b01      	ldr	r3, [sp, #4]
20001486:	1b5b      	subs	r3, r3, r5
20001488:	9301      	str	r3, [sp, #4]
2000148a:	08ad      	lsrs	r5, r5, #2
2000148c:	c020      	stmia	r0!, {r5}
2000148e:	783b      	ldrb	r3, [r7, #0]
20001490:	3701      	adds	r7, #1
20001492:	4353      	muls	r3, r2
20001494:	4423      	add	r3, r4
20001496:	4433      	add	r3, r6
20001498:	c008      	stmia	r0!, {r3}
2000149a:	9b00      	ldr	r3, [sp, #0]
2000149c:	4299      	cmp	r1, r3
2000149e:	d301      	bcc.n	200014a4 <RenderTile+0x68>
200014a0:	2100      	movs	r1, #0
200014a2:	4677      	mov	r7, lr
200014a4:	9b00      	ldr	r3, [sp, #0]
200014a6:	1a5d      	subs	r5, r3, r1
200014a8:	9b01      	ldr	r3, [sp, #4]

200014aa <RenderTile_OutLoop>:
200014aa:	429d      	cmp	r5, r3
200014ac:	d900      	bls.n	200014b0 <RenderTile_OutLoop+0x6>
200014ae:	461d      	mov	r5, r3
200014b0:	9902      	ldr	r1, [sp, #8]
200014b2:	428d      	cmp	r5, r1
200014b4:	d20e      	bcs.n	200014d4 <RenderTile_Last+0x18>
200014b6:	2d04      	cmp	r5, #4
200014b8:	d30b      	bcc.n	200014d2 <RenderTile_Last+0x16>
200014ba:	4629      	mov	r1, r5

200014bc <RenderTile_Last>:
200014bc:	088e      	lsrs	r6, r1, #2
200014be:	c040      	stmia	r0!, {r6}
200014c0:	783e      	ldrb	r6, [r7, #0]
200014c2:	3701      	adds	r7, #1
200014c4:	4356      	muls	r6, r2
200014c6:	4426      	add	r6, r4
200014c8:	c040      	stmia	r0!, {r6}
200014ca:	4677      	mov	r7, lr
200014cc:	9e02      	ldr	r6, [sp, #8]
200014ce:	42b5      	cmp	r5, r6
200014d0:	d2eb      	bcs.n	200014aa <RenderTile_OutLoop>
200014d2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
200014d4:	08a9      	lsrs	r1, r5, #2
200014d6:	008d      	lsls	r5, r1, #2
200014d8:	1b5b      	subs	r3, r3, r5
200014da:	9d02      	ldr	r5, [sp, #8]
200014dc:	08ad      	lsrs	r5, r5, #2
200014de:	1b49      	subs	r1, r1, r5
200014e0:	3101      	adds	r1, #1

200014e2 <RenderTile_InLoop>:
200014e2:	783e      	ldrb	r6, [r7, #0]
200014e4:	3701      	adds	r7, #1
200014e6:	4356      	muls	r6, r2
200014e8:	4426      	add	r6, r4
200014ea:	c060      	stmia	r0!, {r5, r6}
200014ec:	1b49      	subs	r1, r1, r5
200014ee:	d8f8      	bhi.n	200014e2 <RenderTile_InLoop>
200014f0:	1949      	adds	r1, r1, r5
200014f2:	3901      	subs	r1, #1
200014f4:	9d00      	ldr	r5, [sp, #0]
200014f6:	0089      	lsls	r1, r1, #2
200014f8:	d1e0      	bne.n	200014bc <RenderTile_Last>
200014fa:	4677      	mov	r7, lr
200014fc:	e7d5      	b.n	200014aa <RenderTile_OutLoop>
200014fe:	46c0      	nop			; (mov r8, r8)

20001500 <RenderTile_pSioBase>:
20001500:	d0000000 	.word	0xd0000000

20001504 <RenderTile2>:
20001504:	b5fc      	push	{r2, r3, r4, r5, r6, r7, lr}
20001506:	9c07      	ldr	r4, [sp, #28]
20001508:	4d2c      	ldr	r5, [pc, #176]	; (200015bc <RenderTile_pSioBase>)
2000150a:	662a      	str	r2, [r5, #96]	; 0x60
2000150c:	8b22      	ldrh	r2, [r4, #24]
2000150e:	666a      	str	r2, [r5, #100]	; 0x64
20001510:	8927      	ldrh	r7, [r4, #8]
20001512:	2603      	movs	r6, #3
20001514:	43b7      	bics	r7, r6
20001516:	9700      	str	r7, [sp, #0]
20001518:	43b1      	bics	r1, r6
2000151a:	43b3      	bics	r3, r6
2000151c:	9301      	str	r3, [sp, #4]
2000151e:	8a63      	ldrh	r3, [r4, #18]
20001520:	6f6e      	ldr	r6, [r5, #116]	; 0x74
20001522:	6f2f      	ldr	r7, [r5, #112]	; 0x70
20001524:	6629      	str	r1, [r5, #96]	; 0x60
20001526:	666b      	str	r3, [r5, #100]	; 0x64
20001528:	8862      	ldrh	r2, [r4, #2]
2000152a:	4357      	muls	r7, r2
2000152c:	68e2      	ldr	r2, [r4, #12]
2000152e:	18bf      	adds	r7, r7, r2
20001530:	46be      	mov	lr, r7
20001532:	8b62      	ldrh	r2, [r4, #26]
20001534:	4356      	muls	r6, r2
20001536:	6964      	ldr	r4, [r4, #20]
20001538:	19a4      	adds	r4, r4, r6
2000153a:	6f6e      	ldr	r6, [r5, #116]	; 0x74
2000153c:	6f2d      	ldr	r5, [r5, #112]	; 0x70
2000153e:	197f      	adds	r7, r7, r5
20001540:	4236      	tst	r6, r6
20001542:	d011      	beq.n	20001568 <RenderTile2+0x64>
20001544:	1b9d      	subs	r5, r3, r6
20001546:	1949      	adds	r1, r1, r5
20001548:	9a01      	ldr	r2, [sp, #4]
2000154a:	1b52      	subs	r2, r2, r5
2000154c:	9201      	str	r2, [sp, #4]
2000154e:	08ad      	lsrs	r5, r5, #2
20001550:	c020      	stmia	r0!, {r5}
20001552:	783a      	ldrb	r2, [r7, #0]
20001554:	3701      	adds	r7, #1
20001556:	435a      	muls	r2, r3
20001558:	4422      	add	r2, r4
2000155a:	4432      	add	r2, r6
2000155c:	c004      	stmia	r0!, {r2}
2000155e:	9a00      	ldr	r2, [sp, #0]
20001560:	4291      	cmp	r1, r2
20001562:	d301      	bcc.n	20001568 <RenderTile2+0x64>
20001564:	2100      	movs	r1, #0
20001566:	4677      	mov	r7, lr
20001568:	9a00      	ldr	r2, [sp, #0]
2000156a:	1a55      	subs	r5, r2, r1
2000156c:	9a01      	ldr	r2, [sp, #4]

2000156e <RenderTile_OutLoop>:
2000156e:	4295      	cmp	r5, r2
20001570:	d900      	bls.n	20001574 <RenderTile_OutLoop+0x6>
20001572:	4615      	mov	r5, r2
20001574:	429d      	cmp	r5, r3
20001576:	d20d      	bcs.n	20001594 <RenderTile_Last+0x16>
20001578:	2d04      	cmp	r5, #4
2000157a:	d30a      	bcc.n	20001592 <RenderTile_Last+0x14>
2000157c:	4629      	mov	r1, r5

2000157e <RenderTile_Last>:
2000157e:	088e      	lsrs	r6, r1, #2
20001580:	c040      	stmia	r0!, {r6}
20001582:	783e      	ldrb	r6, [r7, #0]
20001584:	3701      	adds	r7, #1
20001586:	435e      	muls	r6, r3
20001588:	4426      	add	r6, r4
2000158a:	c040      	stmia	r0!, {r6}
2000158c:	4677      	mov	r7, lr
2000158e:	429d      	cmp	r5, r3
20001590:	d2ed      	bcs.n	2000156e <RenderTile_OutLoop>
20001592:	bdfc      	pop	{r2, r3, r4, r5, r6, r7, pc}
20001594:	08a9      	lsrs	r1, r5, #2
20001596:	008d      	lsls	r5, r1, #2
20001598:	1b52      	subs	r2, r2, r5
2000159a:	089d      	lsrs	r5, r3, #2
2000159c:	1b49      	subs	r1, r1, r5
2000159e:	3101      	adds	r1, #1

200015a0 <RenderTile_InLoop>:
200015a0:	783e      	ldrb	r6, [r7, #0]
200015a2:	3701      	adds	r7, #1
200015a4:	435e      	muls	r6, r3
200015a6:	4426      	add	r6, r4
200015a8:	c060      	stmia	r0!, {r5, r6}
200015aa:	1b49      	subs	r1, r1, r5
200015ac:	d8f8      	bhi.n	200015a0 <RenderTile_InLoop>
200015ae:	1949      	adds	r1, r1, r5
200015b0:	3901      	subs	r1, #1
200015b2:	9d00      	ldr	r5, [sp, #0]
200015b4:	0089      	lsls	r1, r1, #2
200015b6:	d1e2      	bne.n	2000157e <RenderTile_Last>
200015b8:	4677      	mov	r7, lr
200015ba:	e7d8      	b.n	2000156e <RenderTile_OutLoop>

200015bc <RenderTile_pSioBase>:
200015bc:	d0000000 	.word	0xd0000000

200015c0 <RenderTilePersp>:
200015c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
200015c2:	9c06      	ldr	r4, [sp, #24]
200015c4:	4e5c      	ldr	r6, [pc, #368]	; (20001738 <RenderTilePersp_pSioBase>)
200015c6:	8965      	ldrh	r5, [r4, #10]
200015c8:	7ce1      	ldrb	r1, [r4, #19]
200015ca:	b249      	sxtb	r1, r1
200015cc:	0089      	lsls	r1, r1, #2
200015ce:	d107      	bne.n	200015e0 <RenderTilePersp+0x20>
200015d0:	086d      	lsrs	r5, r5, #1
200015d2:	1b52      	subs	r2, r2, r5
200015d4:	4694      	mov	ip, r2
200015d6:	2501      	movs	r5, #1
200015d8:	6675      	str	r5, [r6, #100]	; 0x64
200015da:	032d      	lsls	r5, r5, #12
200015dc:	6635      	str	r5, [r6, #96]	; 0x60
200015de:	e009      	b.n	200015f4 <RenderTilePersp+0x34>
200015e0:	d502      	bpl.n	200015e8 <RenderTilePersp+0x28>
200015e2:	1aaa      	subs	r2, r5, r2
200015e4:	3a01      	subs	r2, #1
200015e6:	4249      	negs	r1, r1
200015e8:	1b57      	subs	r7, r2, r5
200015ea:	46bc      	mov	ip, r7
200015ec:	032d      	lsls	r5, r5, #12
200015ee:	6635      	str	r5, [r6, #96]	; 0x60
200015f0:	1852      	adds	r2, r2, r1
200015f2:	6672      	str	r2, [r6, #100]	; 0x64
200015f4:	085d      	lsrs	r5, r3, #1
200015f6:	426d      	negs	r5, r5
200015f8:	46ae      	mov	lr, r5
200015fa:	089f      	lsrs	r7, r3, #2
200015fc:	4b4f      	ldr	r3, [pc, #316]	; (2000173c <RenderTilePersp_Interp>)
200015fe:	68e6      	ldr	r6, [r4, #12]
20001600:	611e      	str	r6, [r3, #16]
20001602:	4e4f      	ldr	r6, [pc, #316]	; (20001740 <RenderTilePersp_Ctrl>)
20001604:	7ca1      	ldrb	r1, [r4, #18]
20001606:	9100      	str	r1, [sp, #0]
20001608:	1876      	adds	r6, r6, r1
2000160a:	78a2      	ldrb	r2, [r4, #2]
2000160c:	1e55      	subs	r5, r2, #1
2000160e:	02ad      	lsls	r5, r5, #10
20001610:	432e      	orrs	r6, r5
20001612:	62de      	str	r6, [r3, #44]	; 0x2c
20001614:	1ab6      	subs	r6, r6, r2
20001616:	0152      	lsls	r2, r2, #5
20001618:	4316      	orrs	r6, r2
2000161a:	78e2      	ldrb	r2, [r4, #3]
2000161c:	0292      	lsls	r2, r2, #10
2000161e:	18b6      	adds	r6, r6, r2
20001620:	631e      	str	r6, [r3, #48]	; 0x30
20001622:	6966      	ldr	r6, [r4, #20]
20001624:	651e      	str	r6, [r3, #80]	; 0x50
20001626:	4e46      	ldr	r6, [pc, #280]	; (20001740 <RenderTilePersp_Ctrl>)
20001628:	1e4d      	subs	r5, r1, #1
2000162a:	02ad      	lsls	r5, r5, #10
2000162c:	432e      	orrs	r6, r5
2000162e:	66de      	str	r6, [r3, #108]	; 0x6c
20001630:	1a76      	subs	r6, r6, r1
20001632:	014d      	lsls	r5, r1, #5
20001634:	432e      	orrs	r6, r5
20001636:	0289      	lsls	r1, r1, #10
20001638:	1876      	adds	r6, r6, r1
2000163a:	671e      	str	r6, [r3, #112]	; 0x70
2000163c:	69a4      	ldr	r4, [r4, #24]
2000163e:	493e      	ldr	r1, [pc, #248]	; (20001738 <RenderTilePersp_pSioBase>)
20001640:	6f09      	ldr	r1, [r1, #112]	; 0x70
20001642:	6825      	ldr	r5, [r4, #0]
20001644:	434d      	muls	r5, r1
20001646:	132d      	asrs	r5, r5, #12
20001648:	609d      	str	r5, [r3, #8]
2000164a:	649d      	str	r5, [r3, #72]	; 0x48
2000164c:	68e6      	ldr	r6, [r4, #12]
2000164e:	434e      	muls	r6, r1
20001650:	1336      	asrs	r6, r6, #12
20001652:	60de      	str	r6, [r3, #12]
20001654:	64de      	str	r6, [r3, #76]	; 0x4c
20001656:	4672      	mov	r2, lr
20001658:	4355      	muls	r5, r2
2000165a:	4372      	muls	r2, r6
2000165c:	468e      	mov	lr, r1
2000165e:	6866      	ldr	r6, [r4, #4]
20001660:	4371      	muls	r1, r6
20001662:	1309      	asrs	r1, r1, #12
20001664:	4666      	mov	r6, ip
20001666:	4371      	muls	r1, r6
20001668:	186d      	adds	r5, r5, r1
2000166a:	68a1      	ldr	r1, [r4, #8]
2000166c:	186d      	adds	r5, r5, r1
2000166e:	601d      	str	r5, [r3, #0]
20001670:	641d      	str	r5, [r3, #64]	; 0x40
20001672:	6921      	ldr	r1, [r4, #16]
20001674:	4675      	mov	r5, lr
20001676:	4369      	muls	r1, r5
20001678:	1309      	asrs	r1, r1, #12
2000167a:	4371      	muls	r1, r6
2000167c:	1852      	adds	r2, r2, r1
2000167e:	6961      	ldr	r1, [r4, #20]
20001680:	1852      	adds	r2, r2, r1
20001682:	605a      	str	r2, [r3, #4]
20001684:	645a      	str	r2, [r3, #68]	; 0x44
20001686:	9e00      	ldr	r6, [sp, #0]
20001688:	0076      	lsls	r6, r6, #1
2000168a:	087f      	lsrs	r7, r7, #1
2000168c:	d31a      	bcc.n	200016c4 <RenderTilePersp+0x104>
2000168e:	69dc      	ldr	r4, [r3, #28]
20001690:	7824      	ldrb	r4, [r4, #0]
20001692:	40b4      	lsls	r4, r6
20001694:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
20001696:	5d29      	ldrb	r1, [r5, r4]
20001698:	69dc      	ldr	r4, [r3, #28]
2000169a:	7824      	ldrb	r4, [r4, #0]
2000169c:	40b4      	lsls	r4, r6
2000169e:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
200016a0:	5d2c      	ldrb	r4, [r5, r4]
200016a2:	0224      	lsls	r4, r4, #8
200016a4:	4321      	orrs	r1, r4
200016a6:	69dc      	ldr	r4, [r3, #28]
200016a8:	7824      	ldrb	r4, [r4, #0]
200016aa:	40b4      	lsls	r4, r6
200016ac:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
200016ae:	5d2c      	ldrb	r4, [r5, r4]
200016b0:	0424      	lsls	r4, r4, #16
200016b2:	4321      	orrs	r1, r4
200016b4:	69dc      	ldr	r4, [r3, #28]
200016b6:	7824      	ldrb	r4, [r4, #0]
200016b8:	40b4      	lsls	r4, r6
200016ba:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
200016bc:	5d2c      	ldrb	r4, [r5, r4]
200016be:	0624      	lsls	r4, r4, #24
200016c0:	4321      	orrs	r1, r4
200016c2:	c002      	stmia	r0!, {r1}
200016c4:	423f      	tst	r7, r7
200016c6:	d036      	beq.n	20001736 <RenderTilePersp+0x176>
200016c8:	69dc      	ldr	r4, [r3, #28]
200016ca:	7824      	ldrb	r4, [r4, #0]
200016cc:	40b4      	lsls	r4, r6
200016ce:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
200016d0:	5d29      	ldrb	r1, [r5, r4]
200016d2:	69dc      	ldr	r4, [r3, #28]
200016d4:	7824      	ldrb	r4, [r4, #0]
200016d6:	40b4      	lsls	r4, r6
200016d8:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
200016da:	5d2c      	ldrb	r4, [r5, r4]
200016dc:	0224      	lsls	r4, r4, #8
200016de:	4321      	orrs	r1, r4
200016e0:	69dc      	ldr	r4, [r3, #28]
200016e2:	7824      	ldrb	r4, [r4, #0]
200016e4:	40b4      	lsls	r4, r6
200016e6:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
200016e8:	5d2c      	ldrb	r4, [r5, r4]
200016ea:	0424      	lsls	r4, r4, #16
200016ec:	4321      	orrs	r1, r4
200016ee:	69dc      	ldr	r4, [r3, #28]
200016f0:	7824      	ldrb	r4, [r4, #0]
200016f2:	40b4      	lsls	r4, r6
200016f4:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
200016f6:	5d2c      	ldrb	r4, [r5, r4]
200016f8:	0624      	lsls	r4, r4, #24
200016fa:	4321      	orrs	r1, r4
200016fc:	69dc      	ldr	r4, [r3, #28]
200016fe:	7824      	ldrb	r4, [r4, #0]
20001700:	40b4      	lsls	r4, r6
20001702:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
20001704:	5d2a      	ldrb	r2, [r5, r4]
20001706:	69dc      	ldr	r4, [r3, #28]
20001708:	7824      	ldrb	r4, [r4, #0]
2000170a:	40b4      	lsls	r4, r6
2000170c:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
2000170e:	5d2c      	ldrb	r4, [r5, r4]
20001710:	0224      	lsls	r4, r4, #8
20001712:	4322      	orrs	r2, r4
20001714:	69dc      	ldr	r4, [r3, #28]
20001716:	7824      	ldrb	r4, [r4, #0]
20001718:	40b4      	lsls	r4, r6
2000171a:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
2000171c:	5d2c      	ldrb	r4, [r5, r4]
2000171e:	0424      	lsls	r4, r4, #16
20001720:	4322      	orrs	r2, r4
20001722:	69dc      	ldr	r4, [r3, #28]
20001724:	7824      	ldrb	r4, [r4, #0]
20001726:	40b4      	lsls	r4, r6
20001728:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
2000172a:	5d2c      	ldrb	r4, [r5, r4]
2000172c:	0624      	lsls	r4, r4, #24
2000172e:	4322      	orrs	r2, r4
20001730:	c006      	stmia	r0!, {r1, r2}
20001732:	3f01      	subs	r7, #1
20001734:	d1c8      	bne.n	200016c8 <RenderTilePersp+0x108>
20001736:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

20001738 <RenderTilePersp_pSioBase>:
20001738:	d0000000 	.word	0xd0000000

2000173c <RenderTilePersp_Interp>:
2000173c:	d0000080 	.word	0xd0000080

20001740 <RenderTilePersp_Ctrl>:
20001740:	0004000c 	.word	0x0004000c

20001744 <RenderTilePersp15>:
20001744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
20001746:	9c06      	ldr	r4, [sp, #24]
20001748:	4e57      	ldr	r6, [pc, #348]	; (200018a8 <RenderTilePersp_pSioBase>)
2000174a:	8965      	ldrh	r5, [r4, #10]
2000174c:	7ce1      	ldrb	r1, [r4, #19]
2000174e:	b249      	sxtb	r1, r1
20001750:	0089      	lsls	r1, r1, #2
20001752:	d107      	bne.n	20001764 <RenderTilePersp15+0x20>
20001754:	086d      	lsrs	r5, r5, #1
20001756:	1b52      	subs	r2, r2, r5
20001758:	4694      	mov	ip, r2
2000175a:	2501      	movs	r5, #1
2000175c:	6675      	str	r5, [r6, #100]	; 0x64
2000175e:	032d      	lsls	r5, r5, #12
20001760:	6635      	str	r5, [r6, #96]	; 0x60
20001762:	e009      	b.n	20001778 <RenderTilePersp15+0x34>
20001764:	d502      	bpl.n	2000176c <RenderTilePersp15+0x28>
20001766:	1aaa      	subs	r2, r5, r2
20001768:	3a01      	subs	r2, #1
2000176a:	4249      	negs	r1, r1
2000176c:	1b57      	subs	r7, r2, r5
2000176e:	46bc      	mov	ip, r7
20001770:	032d      	lsls	r5, r5, #12
20001772:	6635      	str	r5, [r6, #96]	; 0x60
20001774:	1852      	adds	r2, r2, r1
20001776:	6672      	str	r2, [r6, #100]	; 0x64
20001778:	085d      	lsrs	r5, r3, #1
2000177a:	426d      	negs	r5, r5
2000177c:	46ae      	mov	lr, r5
2000177e:	089f      	lsrs	r7, r3, #2
20001780:	4b4a      	ldr	r3, [pc, #296]	; (200018ac <RenderTilePersp_Interp>)
20001782:	68e6      	ldr	r6, [r4, #12]
20001784:	611e      	str	r6, [r3, #16]
20001786:	4e4a      	ldr	r6, [pc, #296]	; (200018b0 <RenderTilePersp_Ctrl>)
20001788:	7ca1      	ldrb	r1, [r4, #18]
2000178a:	9100      	str	r1, [sp, #0]
2000178c:	1876      	adds	r6, r6, r1
2000178e:	78a2      	ldrb	r2, [r4, #2]
20001790:	1e55      	subs	r5, r2, #1
20001792:	02ad      	lsls	r5, r5, #10
20001794:	432e      	orrs	r6, r5
20001796:	62de      	str	r6, [r3, #44]	; 0x2c
20001798:	1ab6      	subs	r6, r6, r2
2000179a:	0152      	lsls	r2, r2, #5
2000179c:	4316      	orrs	r6, r2
2000179e:	78e2      	ldrb	r2, [r4, #3]
200017a0:	0292      	lsls	r2, r2, #10
200017a2:	18b6      	adds	r6, r6, r2
200017a4:	631e      	str	r6, [r3, #48]	; 0x30
200017a6:	6966      	ldr	r6, [r4, #20]
200017a8:	651e      	str	r6, [r3, #80]	; 0x50
200017aa:	4e41      	ldr	r6, [pc, #260]	; (200018b0 <RenderTilePersp_Ctrl>)
200017ac:	1e4d      	subs	r5, r1, #1
200017ae:	02ad      	lsls	r5, r5, #10
200017b0:	432e      	orrs	r6, r5
200017b2:	66de      	str	r6, [r3, #108]	; 0x6c
200017b4:	1a76      	subs	r6, r6, r1
200017b6:	014d      	lsls	r5, r1, #5
200017b8:	432e      	orrs	r6, r5
200017ba:	0289      	lsls	r1, r1, #10
200017bc:	1876      	adds	r6, r6, r1
200017be:	671e      	str	r6, [r3, #112]	; 0x70
200017c0:	69a4      	ldr	r4, [r4, #24]
200017c2:	4939      	ldr	r1, [pc, #228]	; (200018a8 <RenderTilePersp_pSioBase>)
200017c4:	6f09      	ldr	r1, [r1, #112]	; 0x70
200017c6:	6825      	ldr	r5, [r4, #0]
200017c8:	434d      	muls	r5, r1
200017ca:	132d      	asrs	r5, r5, #12
200017cc:	106a      	asrs	r2, r5, #1
200017ce:	1952      	adds	r2, r2, r5
200017d0:	609a      	str	r2, [r3, #8]
200017d2:	649a      	str	r2, [r3, #72]	; 0x48
200017d4:	68e6      	ldr	r6, [r4, #12]
200017d6:	434e      	muls	r6, r1
200017d8:	1336      	asrs	r6, r6, #12
200017da:	1072      	asrs	r2, r6, #1
200017dc:	1992      	adds	r2, r2, r6
200017de:	60da      	str	r2, [r3, #12]
200017e0:	64da      	str	r2, [r3, #76]	; 0x4c
200017e2:	4672      	mov	r2, lr
200017e4:	4355      	muls	r5, r2
200017e6:	4372      	muls	r2, r6
200017e8:	468e      	mov	lr, r1
200017ea:	6866      	ldr	r6, [r4, #4]
200017ec:	4371      	muls	r1, r6
200017ee:	1309      	asrs	r1, r1, #12
200017f0:	4666      	mov	r6, ip
200017f2:	4371      	muls	r1, r6
200017f4:	186d      	adds	r5, r5, r1
200017f6:	68a1      	ldr	r1, [r4, #8]
200017f8:	186d      	adds	r5, r5, r1
200017fa:	601d      	str	r5, [r3, #0]
200017fc:	641d      	str	r5, [r3, #64]	; 0x40
200017fe:	6921      	ldr	r1, [r4, #16]
20001800:	4675      	mov	r5, lr
20001802:	4369      	muls	r1, r5
20001804:	1309      	asrs	r1, r1, #12
20001806:	4371      	muls	r1, r6
20001808:	1852      	adds	r2, r2, r1
2000180a:	6961      	ldr	r1, [r4, #20]
2000180c:	1852      	adds	r2, r2, r1
2000180e:	605a      	str	r2, [r3, #4]
20001810:	645a      	str	r2, [r3, #68]	; 0x44
20001812:	9e00      	ldr	r6, [sp, #0]
20001814:	0076      	lsls	r6, r6, #1
20001816:	087f      	lsrs	r7, r7, #1
20001818:	d315      	bcc.n	20001846 <RenderTilePersp15+0x102>
2000181a:	69dc      	ldr	r4, [r3, #28]
2000181c:	7824      	ldrb	r4, [r4, #0]
2000181e:	40b4      	lsls	r4, r6
20001820:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
20001822:	5d29      	ldrb	r1, [r5, r4]
20001824:	69dc      	ldr	r4, [r3, #28]
20001826:	7824      	ldrb	r4, [r4, #0]
20001828:	40b4      	lsls	r4, r6
2000182a:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
2000182c:	5d2c      	ldrb	r4, [r5, r4]
2000182e:	0224      	lsls	r4, r4, #8
20001830:	4321      	orrs	r1, r4
20001832:	69dc      	ldr	r4, [r3, #28]
20001834:	7824      	ldrb	r4, [r4, #0]
20001836:	40b4      	lsls	r4, r6
20001838:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
2000183a:	5d2c      	ldrb	r4, [r5, r4]
2000183c:	0424      	lsls	r4, r4, #16
2000183e:	4321      	orrs	r1, r4
20001840:	0224      	lsls	r4, r4, #8
20001842:	4321      	orrs	r1, r4
20001844:	c002      	stmia	r0!, {r1}
20001846:	423f      	tst	r7, r7
20001848:	d02c      	beq.n	200018a4 <RenderTilePersp15+0x160>
2000184a:	69dc      	ldr	r4, [r3, #28]
2000184c:	7824      	ldrb	r4, [r4, #0]
2000184e:	40b4      	lsls	r4, r6
20001850:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
20001852:	5d29      	ldrb	r1, [r5, r4]
20001854:	69dc      	ldr	r4, [r3, #28]
20001856:	7824      	ldrb	r4, [r4, #0]
20001858:	40b4      	lsls	r4, r6
2000185a:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
2000185c:	5d2c      	ldrb	r4, [r5, r4]
2000185e:	0224      	lsls	r4, r4, #8
20001860:	4321      	orrs	r1, r4
20001862:	69dc      	ldr	r4, [r3, #28]
20001864:	7824      	ldrb	r4, [r4, #0]
20001866:	40b4      	lsls	r4, r6
20001868:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
2000186a:	5d2c      	ldrb	r4, [r5, r4]
2000186c:	0424      	lsls	r4, r4, #16
2000186e:	4321      	orrs	r1, r4
20001870:	0224      	lsls	r4, r4, #8
20001872:	4321      	orrs	r1, r4
20001874:	69dc      	ldr	r4, [r3, #28]
20001876:	7824      	ldrb	r4, [r4, #0]
20001878:	40b4      	lsls	r4, r6
2000187a:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
2000187c:	5d2a      	ldrb	r2, [r5, r4]
2000187e:	69dc      	ldr	r4, [r3, #28]
20001880:	7824      	ldrb	r4, [r4, #0]
20001882:	40b4      	lsls	r4, r6
20001884:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
20001886:	5d2c      	ldrb	r4, [r5, r4]
20001888:	0224      	lsls	r4, r4, #8
2000188a:	4322      	orrs	r2, r4
2000188c:	69dc      	ldr	r4, [r3, #28]
2000188e:	7824      	ldrb	r4, [r4, #0]
20001890:	40b4      	lsls	r4, r6
20001892:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
20001894:	5d2c      	ldrb	r4, [r5, r4]
20001896:	0424      	lsls	r4, r4, #16
20001898:	4322      	orrs	r2, r4
2000189a:	0224      	lsls	r4, r4, #8
2000189c:	4322      	orrs	r2, r4
2000189e:	c006      	stmia	r0!, {r1, r2}
200018a0:	3f01      	subs	r7, #1
200018a2:	d1d2      	bne.n	2000184a <RenderTilePersp15+0x106>
200018a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
200018a6:	46c0      	nop			; (mov r8, r8)

200018a8 <RenderTilePersp_pSioBase>:
200018a8:	d0000000 	.word	0xd0000000

200018ac <RenderTilePersp_Interp>:
200018ac:	d0000080 	.word	0xd0000080

200018b0 <RenderTilePersp_Ctrl>:
200018b0:	0004000c 	.word	0x0004000c

200018b4 <RenderTilePersp2>:
200018b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
200018b6:	9c06      	ldr	r4, [sp, #24]
200018b8:	4e4e      	ldr	r6, [pc, #312]	; (200019f4 <RenderTilePersp_pSioBase>)
200018ba:	8965      	ldrh	r5, [r4, #10]
200018bc:	7ce1      	ldrb	r1, [r4, #19]
200018be:	b249      	sxtb	r1, r1
200018c0:	0089      	lsls	r1, r1, #2
200018c2:	d107      	bne.n	200018d4 <RenderTilePersp2+0x20>
200018c4:	086d      	lsrs	r5, r5, #1
200018c6:	1b52      	subs	r2, r2, r5
200018c8:	4694      	mov	ip, r2
200018ca:	2501      	movs	r5, #1
200018cc:	6675      	str	r5, [r6, #100]	; 0x64
200018ce:	032d      	lsls	r5, r5, #12
200018d0:	6635      	str	r5, [r6, #96]	; 0x60
200018d2:	e009      	b.n	200018e8 <RenderTilePersp2+0x34>
200018d4:	d502      	bpl.n	200018dc <RenderTilePersp2+0x28>
200018d6:	1aaa      	subs	r2, r5, r2
200018d8:	3a01      	subs	r2, #1
200018da:	4249      	negs	r1, r1
200018dc:	1b57      	subs	r7, r2, r5
200018de:	46bc      	mov	ip, r7
200018e0:	032d      	lsls	r5, r5, #12
200018e2:	6635      	str	r5, [r6, #96]	; 0x60
200018e4:	1852      	adds	r2, r2, r1
200018e6:	6672      	str	r2, [r6, #100]	; 0x64
200018e8:	085d      	lsrs	r5, r3, #1
200018ea:	426d      	negs	r5, r5
200018ec:	46ae      	mov	lr, r5
200018ee:	089f      	lsrs	r7, r3, #2
200018f0:	4b41      	ldr	r3, [pc, #260]	; (200019f8 <RenderTilePersp_Interp>)
200018f2:	68e6      	ldr	r6, [r4, #12]
200018f4:	611e      	str	r6, [r3, #16]
200018f6:	4e41      	ldr	r6, [pc, #260]	; (200019fc <RenderTilePersp_Ctrl>)
200018f8:	7ca1      	ldrb	r1, [r4, #18]
200018fa:	9100      	str	r1, [sp, #0]
200018fc:	1876      	adds	r6, r6, r1
200018fe:	78a2      	ldrb	r2, [r4, #2]
20001900:	1e55      	subs	r5, r2, #1
20001902:	02ad      	lsls	r5, r5, #10
20001904:	432e      	orrs	r6, r5
20001906:	62de      	str	r6, [r3, #44]	; 0x2c
20001908:	1ab6      	subs	r6, r6, r2
2000190a:	0152      	lsls	r2, r2, #5
2000190c:	4316      	orrs	r6, r2
2000190e:	78e2      	ldrb	r2, [r4, #3]
20001910:	0292      	lsls	r2, r2, #10
20001912:	18b6      	adds	r6, r6, r2
20001914:	631e      	str	r6, [r3, #48]	; 0x30
20001916:	6966      	ldr	r6, [r4, #20]
20001918:	651e      	str	r6, [r3, #80]	; 0x50
2000191a:	4e38      	ldr	r6, [pc, #224]	; (200019fc <RenderTilePersp_Ctrl>)
2000191c:	1e4d      	subs	r5, r1, #1
2000191e:	02ad      	lsls	r5, r5, #10
20001920:	432e      	orrs	r6, r5
20001922:	66de      	str	r6, [r3, #108]	; 0x6c
20001924:	1a76      	subs	r6, r6, r1
20001926:	014d      	lsls	r5, r1, #5
20001928:	432e      	orrs	r6, r5
2000192a:	0289      	lsls	r1, r1, #10
2000192c:	1876      	adds	r6, r6, r1
2000192e:	671e      	str	r6, [r3, #112]	; 0x70
20001930:	69a4      	ldr	r4, [r4, #24]
20001932:	4930      	ldr	r1, [pc, #192]	; (200019f4 <RenderTilePersp_pSioBase>)
20001934:	6f09      	ldr	r1, [r1, #112]	; 0x70
20001936:	6825      	ldr	r5, [r4, #0]
20001938:	434d      	muls	r5, r1
2000193a:	12ed      	asrs	r5, r5, #11
2000193c:	609d      	str	r5, [r3, #8]
2000193e:	649d      	str	r5, [r3, #72]	; 0x48
20001940:	106d      	asrs	r5, r5, #1
20001942:	68e6      	ldr	r6, [r4, #12]
20001944:	434e      	muls	r6, r1
20001946:	12f6      	asrs	r6, r6, #11
20001948:	60de      	str	r6, [r3, #12]
2000194a:	64de      	str	r6, [r3, #76]	; 0x4c
2000194c:	1076      	asrs	r6, r6, #1
2000194e:	4672      	mov	r2, lr
20001950:	4355      	muls	r5, r2
20001952:	4372      	muls	r2, r6
20001954:	468e      	mov	lr, r1
20001956:	6866      	ldr	r6, [r4, #4]
20001958:	4371      	muls	r1, r6
2000195a:	1309      	asrs	r1, r1, #12
2000195c:	4666      	mov	r6, ip
2000195e:	4371      	muls	r1, r6
20001960:	186d      	adds	r5, r5, r1
20001962:	68a1      	ldr	r1, [r4, #8]
20001964:	186d      	adds	r5, r5, r1
20001966:	601d      	str	r5, [r3, #0]
20001968:	641d      	str	r5, [r3, #64]	; 0x40
2000196a:	6921      	ldr	r1, [r4, #16]
2000196c:	4675      	mov	r5, lr
2000196e:	4369      	muls	r1, r5
20001970:	1309      	asrs	r1, r1, #12
20001972:	4371      	muls	r1, r6
20001974:	1852      	adds	r2, r2, r1
20001976:	6961      	ldr	r1, [r4, #20]
20001978:	1852      	adds	r2, r2, r1
2000197a:	605a      	str	r2, [r3, #4]
2000197c:	645a      	str	r2, [r3, #68]	; 0x44
2000197e:	9e00      	ldr	r6, [sp, #0]
20001980:	0076      	lsls	r6, r6, #1
20001982:	087f      	lsrs	r7, r7, #1
20001984:	d310      	bcc.n	200019a8 <RenderTilePersp2+0xf4>
20001986:	69dc      	ldr	r4, [r3, #28]
20001988:	7824      	ldrb	r4, [r4, #0]
2000198a:	40b4      	lsls	r4, r6
2000198c:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
2000198e:	5d29      	ldrb	r1, [r5, r4]
20001990:	020c      	lsls	r4, r1, #8
20001992:	4321      	orrs	r1, r4
20001994:	69dc      	ldr	r4, [r3, #28]
20001996:	7824      	ldrb	r4, [r4, #0]
20001998:	40b4      	lsls	r4, r6
2000199a:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
2000199c:	5d2c      	ldrb	r4, [r5, r4]
2000199e:	0424      	lsls	r4, r4, #16
200019a0:	4321      	orrs	r1, r4
200019a2:	0224      	lsls	r4, r4, #8
200019a4:	4321      	orrs	r1, r4
200019a6:	c002      	stmia	r0!, {r1}
200019a8:	423f      	tst	r7, r7
200019aa:	d022      	beq.n	200019f2 <RenderTilePersp2+0x13e>
200019ac:	69dc      	ldr	r4, [r3, #28]
200019ae:	7824      	ldrb	r4, [r4, #0]
200019b0:	40b4      	lsls	r4, r6
200019b2:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
200019b4:	5d29      	ldrb	r1, [r5, r4]
200019b6:	020c      	lsls	r4, r1, #8
200019b8:	4321      	orrs	r1, r4
200019ba:	69dc      	ldr	r4, [r3, #28]
200019bc:	7824      	ldrb	r4, [r4, #0]
200019be:	40b4      	lsls	r4, r6
200019c0:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
200019c2:	5d2c      	ldrb	r4, [r5, r4]
200019c4:	0424      	lsls	r4, r4, #16
200019c6:	4321      	orrs	r1, r4
200019c8:	0224      	lsls	r4, r4, #8
200019ca:	4321      	orrs	r1, r4
200019cc:	69dc      	ldr	r4, [r3, #28]
200019ce:	7824      	ldrb	r4, [r4, #0]
200019d0:	40b4      	lsls	r4, r6
200019d2:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
200019d4:	5d2a      	ldrb	r2, [r5, r4]
200019d6:	0214      	lsls	r4, r2, #8
200019d8:	4322      	orrs	r2, r4
200019da:	69dc      	ldr	r4, [r3, #28]
200019dc:	7824      	ldrb	r4, [r4, #0]
200019de:	40b4      	lsls	r4, r6
200019e0:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
200019e2:	5d2c      	ldrb	r4, [r5, r4]
200019e4:	0424      	lsls	r4, r4, #16
200019e6:	4322      	orrs	r2, r4
200019e8:	0224      	lsls	r4, r4, #8
200019ea:	4322      	orrs	r2, r4
200019ec:	c006      	stmia	r0!, {r1, r2}
200019ee:	3f01      	subs	r7, #1
200019f0:	d1dc      	bne.n	200019ac <RenderTilePersp2+0xf8>
200019f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

200019f4 <RenderTilePersp_pSioBase>:
200019f4:	d0000000 	.word	0xd0000000

200019f8 <RenderTilePersp_Interp>:
200019f8:	d0000080 	.word	0xd0000080

200019fc <RenderTilePersp_Ctrl>:
200019fc:	0004000c 	.word	0x0004000c

20001a00 <RenderTilePersp3>:
20001a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
20001a02:	9c06      	ldr	r4, [sp, #24]
20001a04:	4e48      	ldr	r6, [pc, #288]	; (20001b28 <RenderTilePersp_pSioBase>)
20001a06:	8965      	ldrh	r5, [r4, #10]
20001a08:	7ce1      	ldrb	r1, [r4, #19]
20001a0a:	b249      	sxtb	r1, r1
20001a0c:	0089      	lsls	r1, r1, #2
20001a0e:	d107      	bne.n	20001a20 <RenderTilePersp3+0x20>
20001a10:	086d      	lsrs	r5, r5, #1
20001a12:	1b52      	subs	r2, r2, r5
20001a14:	4694      	mov	ip, r2
20001a16:	2501      	movs	r5, #1
20001a18:	6675      	str	r5, [r6, #100]	; 0x64
20001a1a:	032d      	lsls	r5, r5, #12
20001a1c:	6635      	str	r5, [r6, #96]	; 0x60
20001a1e:	e009      	b.n	20001a34 <RenderTilePersp3+0x34>
20001a20:	d502      	bpl.n	20001a28 <RenderTilePersp3+0x28>
20001a22:	1aaa      	subs	r2, r5, r2
20001a24:	3a01      	subs	r2, #1
20001a26:	4249      	negs	r1, r1
20001a28:	1b57      	subs	r7, r2, r5
20001a2a:	46bc      	mov	ip, r7
20001a2c:	032d      	lsls	r5, r5, #12
20001a2e:	6635      	str	r5, [r6, #96]	; 0x60
20001a30:	1852      	adds	r2, r2, r1
20001a32:	6672      	str	r2, [r6, #100]	; 0x64
20001a34:	085d      	lsrs	r5, r3, #1
20001a36:	426d      	negs	r5, r5
20001a38:	46ae      	mov	lr, r5
20001a3a:	089f      	lsrs	r7, r3, #2
20001a3c:	4b3b      	ldr	r3, [pc, #236]	; (20001b2c <RenderTilePersp_Interp>)
20001a3e:	68e6      	ldr	r6, [r4, #12]
20001a40:	611e      	str	r6, [r3, #16]
20001a42:	4e3b      	ldr	r6, [pc, #236]	; (20001b30 <RenderTilePersp_Ctrl>)
20001a44:	7ca1      	ldrb	r1, [r4, #18]
20001a46:	9100      	str	r1, [sp, #0]
20001a48:	1876      	adds	r6, r6, r1
20001a4a:	78a2      	ldrb	r2, [r4, #2]
20001a4c:	1e55      	subs	r5, r2, #1
20001a4e:	02ad      	lsls	r5, r5, #10
20001a50:	432e      	orrs	r6, r5
20001a52:	62de      	str	r6, [r3, #44]	; 0x2c
20001a54:	1ab6      	subs	r6, r6, r2
20001a56:	0152      	lsls	r2, r2, #5
20001a58:	4316      	orrs	r6, r2
20001a5a:	78e2      	ldrb	r2, [r4, #3]
20001a5c:	0292      	lsls	r2, r2, #10
20001a5e:	18b6      	adds	r6, r6, r2
20001a60:	631e      	str	r6, [r3, #48]	; 0x30
20001a62:	6966      	ldr	r6, [r4, #20]
20001a64:	651e      	str	r6, [r3, #80]	; 0x50
20001a66:	4e32      	ldr	r6, [pc, #200]	; (20001b30 <RenderTilePersp_Ctrl>)
20001a68:	1e4d      	subs	r5, r1, #1
20001a6a:	02ad      	lsls	r5, r5, #10
20001a6c:	432e      	orrs	r6, r5
20001a6e:	66de      	str	r6, [r3, #108]	; 0x6c
20001a70:	1a76      	subs	r6, r6, r1
20001a72:	014d      	lsls	r5, r1, #5
20001a74:	432e      	orrs	r6, r5
20001a76:	0289      	lsls	r1, r1, #10
20001a78:	1876      	adds	r6, r6, r1
20001a7a:	671e      	str	r6, [r3, #112]	; 0x70
20001a7c:	69a4      	ldr	r4, [r4, #24]
20001a7e:	492a      	ldr	r1, [pc, #168]	; (20001b28 <RenderTilePersp_pSioBase>)
20001a80:	6f09      	ldr	r1, [r1, #112]	; 0x70
20001a82:	6825      	ldr	r5, [r4, #0]
20001a84:	434d      	muls	r5, r1
20001a86:	132d      	asrs	r5, r5, #12
20001a88:	006a      	lsls	r2, r5, #1
20001a8a:	1952      	adds	r2, r2, r5
20001a8c:	609a      	str	r2, [r3, #8]
20001a8e:	649a      	str	r2, [r3, #72]	; 0x48
20001a90:	68e6      	ldr	r6, [r4, #12]
20001a92:	434e      	muls	r6, r1
20001a94:	1336      	asrs	r6, r6, #12
20001a96:	0072      	lsls	r2, r6, #1
20001a98:	1992      	adds	r2, r2, r6
20001a9a:	60da      	str	r2, [r3, #12]
20001a9c:	64da      	str	r2, [r3, #76]	; 0x4c
20001a9e:	4672      	mov	r2, lr
20001aa0:	4355      	muls	r5, r2
20001aa2:	4372      	muls	r2, r6
20001aa4:	468e      	mov	lr, r1
20001aa6:	6866      	ldr	r6, [r4, #4]
20001aa8:	4371      	muls	r1, r6
20001aaa:	1309      	asrs	r1, r1, #12
20001aac:	4666      	mov	r6, ip
20001aae:	4371      	muls	r1, r6
20001ab0:	186d      	adds	r5, r5, r1
20001ab2:	68a1      	ldr	r1, [r4, #8]
20001ab4:	186d      	adds	r5, r5, r1
20001ab6:	601d      	str	r5, [r3, #0]
20001ab8:	641d      	str	r5, [r3, #64]	; 0x40
20001aba:	6921      	ldr	r1, [r4, #16]
20001abc:	4675      	mov	r5, lr
20001abe:	4369      	muls	r1, r5
20001ac0:	1309      	asrs	r1, r1, #12
20001ac2:	4371      	muls	r1, r6
20001ac4:	1852      	adds	r2, r2, r1
20001ac6:	6961      	ldr	r1, [r4, #20]
20001ac8:	1852      	adds	r2, r2, r1
20001aca:	605a      	str	r2, [r3, #4]
20001acc:	645a      	str	r2, [r3, #68]	; 0x44
20001ace:	9e00      	ldr	r6, [sp, #0]
20001ad0:	0076      	lsls	r6, r6, #1
20001ad2:	087f      	lsrs	r7, r7, #1
20001ad4:	d309      	bcc.n	20001aea <RenderTilePersp3+0xea>
20001ad6:	69dc      	ldr	r4, [r3, #28]
20001ad8:	7824      	ldrb	r4, [r4, #0]
20001ada:	40b4      	lsls	r4, r6
20001adc:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
20001ade:	5d29      	ldrb	r1, [r5, r4]
20001ae0:	020c      	lsls	r4, r1, #8
20001ae2:	4321      	orrs	r1, r4
20001ae4:	040c      	lsls	r4, r1, #16
20001ae6:	4321      	orrs	r1, r4
20001ae8:	c002      	stmia	r0!, {r1}
20001aea:	423f      	tst	r7, r7
20001aec:	d01b      	beq.n	20001b26 <RenderTilePersp3+0x126>
20001aee:	69dc      	ldr	r4, [r3, #28]
20001af0:	7824      	ldrb	r4, [r4, #0]
20001af2:	40b4      	lsls	r4, r6
20001af4:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
20001af6:	5d29      	ldrb	r1, [r5, r4]
20001af8:	020c      	lsls	r4, r1, #8
20001afa:	4321      	orrs	r1, r4
20001afc:	69dc      	ldr	r4, [r3, #28]
20001afe:	7824      	ldrb	r4, [r4, #0]
20001b00:	40b4      	lsls	r4, r6
20001b02:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
20001b04:	5d2c      	ldrb	r4, [r5, r4]
20001b06:	0424      	lsls	r4, r4, #16
20001b08:	4321      	orrs	r1, r4
20001b0a:	0224      	lsls	r4, r4, #8
20001b0c:	4321      	orrs	r1, r4
20001b0e:	69dc      	ldr	r4, [r3, #28]
20001b10:	7824      	ldrb	r4, [r4, #0]
20001b12:	40b4      	lsls	r4, r6
20001b14:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
20001b16:	5d2a      	ldrb	r2, [r5, r4]
20001b18:	0214      	lsls	r4, r2, #8
20001b1a:	4322      	orrs	r2, r4
20001b1c:	0414      	lsls	r4, r2, #16
20001b1e:	4322      	orrs	r2, r4
20001b20:	c006      	stmia	r0!, {r1, r2}
20001b22:	3f01      	subs	r7, #1
20001b24:	d1e3      	bne.n	20001aee <RenderTilePersp3+0xee>
20001b26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

20001b28 <RenderTilePersp_pSioBase>:
20001b28:	d0000000 	.word	0xd0000000

20001b2c <RenderTilePersp_Interp>:
20001b2c:	d0000080 	.word	0xd0000080

20001b30 <RenderTilePersp_Ctrl>:
20001b30:	0004000c 	.word	0x0004000c

20001b34 <RenderTilePersp4>:
20001b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
20001b36:	9c06      	ldr	r4, [sp, #24]
20001b38:	4e44      	ldr	r6, [pc, #272]	; (20001c4c <RenderTilePersp_pSioBase>)
20001b3a:	8965      	ldrh	r5, [r4, #10]
20001b3c:	7ce1      	ldrb	r1, [r4, #19]
20001b3e:	b249      	sxtb	r1, r1
20001b40:	0089      	lsls	r1, r1, #2
20001b42:	d107      	bne.n	20001b54 <RenderTilePersp4+0x20>
20001b44:	086d      	lsrs	r5, r5, #1
20001b46:	1b52      	subs	r2, r2, r5
20001b48:	4694      	mov	ip, r2
20001b4a:	2501      	movs	r5, #1
20001b4c:	6675      	str	r5, [r6, #100]	; 0x64
20001b4e:	032d      	lsls	r5, r5, #12
20001b50:	6635      	str	r5, [r6, #96]	; 0x60
20001b52:	e009      	b.n	20001b68 <RenderTilePersp4+0x34>
20001b54:	d502      	bpl.n	20001b5c <RenderTilePersp4+0x28>
20001b56:	1aaa      	subs	r2, r5, r2
20001b58:	3a01      	subs	r2, #1
20001b5a:	4249      	negs	r1, r1
20001b5c:	1b57      	subs	r7, r2, r5
20001b5e:	46bc      	mov	ip, r7
20001b60:	032d      	lsls	r5, r5, #12
20001b62:	6635      	str	r5, [r6, #96]	; 0x60
20001b64:	1852      	adds	r2, r2, r1
20001b66:	6672      	str	r2, [r6, #100]	; 0x64
20001b68:	085d      	lsrs	r5, r3, #1
20001b6a:	426d      	negs	r5, r5
20001b6c:	46ae      	mov	lr, r5
20001b6e:	089f      	lsrs	r7, r3, #2
20001b70:	4b37      	ldr	r3, [pc, #220]	; (20001c50 <RenderTilePersp_Interp>)
20001b72:	68e6      	ldr	r6, [r4, #12]
20001b74:	611e      	str	r6, [r3, #16]
20001b76:	4e37      	ldr	r6, [pc, #220]	; (20001c54 <RenderTilePersp_Ctrl>)
20001b78:	7ca1      	ldrb	r1, [r4, #18]
20001b7a:	9100      	str	r1, [sp, #0]
20001b7c:	1876      	adds	r6, r6, r1
20001b7e:	78a2      	ldrb	r2, [r4, #2]
20001b80:	1e55      	subs	r5, r2, #1
20001b82:	02ad      	lsls	r5, r5, #10
20001b84:	432e      	orrs	r6, r5
20001b86:	62de      	str	r6, [r3, #44]	; 0x2c
20001b88:	1ab6      	subs	r6, r6, r2
20001b8a:	0152      	lsls	r2, r2, #5
20001b8c:	4316      	orrs	r6, r2
20001b8e:	78e2      	ldrb	r2, [r4, #3]
20001b90:	0292      	lsls	r2, r2, #10
20001b92:	18b6      	adds	r6, r6, r2
20001b94:	631e      	str	r6, [r3, #48]	; 0x30
20001b96:	6966      	ldr	r6, [r4, #20]
20001b98:	651e      	str	r6, [r3, #80]	; 0x50
20001b9a:	4e2e      	ldr	r6, [pc, #184]	; (20001c54 <RenderTilePersp_Ctrl>)
20001b9c:	1e4d      	subs	r5, r1, #1
20001b9e:	02ad      	lsls	r5, r5, #10
20001ba0:	432e      	orrs	r6, r5
20001ba2:	66de      	str	r6, [r3, #108]	; 0x6c
20001ba4:	1a76      	subs	r6, r6, r1
20001ba6:	014d      	lsls	r5, r1, #5
20001ba8:	432e      	orrs	r6, r5
20001baa:	0289      	lsls	r1, r1, #10
20001bac:	1876      	adds	r6, r6, r1
20001bae:	671e      	str	r6, [r3, #112]	; 0x70
20001bb0:	69a4      	ldr	r4, [r4, #24]
20001bb2:	4926      	ldr	r1, [pc, #152]	; (20001c4c <RenderTilePersp_pSioBase>)
20001bb4:	6f09      	ldr	r1, [r1, #112]	; 0x70
20001bb6:	6825      	ldr	r5, [r4, #0]
20001bb8:	434d      	muls	r5, r1
20001bba:	12ad      	asrs	r5, r5, #10
20001bbc:	609d      	str	r5, [r3, #8]
20001bbe:	649d      	str	r5, [r3, #72]	; 0x48
20001bc0:	10ad      	asrs	r5, r5, #2
20001bc2:	68e6      	ldr	r6, [r4, #12]
20001bc4:	434e      	muls	r6, r1
20001bc6:	12b6      	asrs	r6, r6, #10
20001bc8:	60de      	str	r6, [r3, #12]
20001bca:	64de      	str	r6, [r3, #76]	; 0x4c
20001bcc:	10b6      	asrs	r6, r6, #2
20001bce:	4672      	mov	r2, lr
20001bd0:	4355      	muls	r5, r2
20001bd2:	4372      	muls	r2, r6
20001bd4:	468e      	mov	lr, r1
20001bd6:	6866      	ldr	r6, [r4, #4]
20001bd8:	4371      	muls	r1, r6
20001bda:	1309      	asrs	r1, r1, #12
20001bdc:	4666      	mov	r6, ip
20001bde:	4371      	muls	r1, r6
20001be0:	186d      	adds	r5, r5, r1
20001be2:	68a1      	ldr	r1, [r4, #8]
20001be4:	186d      	adds	r5, r5, r1
20001be6:	601d      	str	r5, [r3, #0]
20001be8:	641d      	str	r5, [r3, #64]	; 0x40
20001bea:	6921      	ldr	r1, [r4, #16]
20001bec:	4675      	mov	r5, lr
20001bee:	4369      	muls	r1, r5
20001bf0:	1309      	asrs	r1, r1, #12
20001bf2:	4371      	muls	r1, r6
20001bf4:	1852      	adds	r2, r2, r1
20001bf6:	6961      	ldr	r1, [r4, #20]
20001bf8:	1852      	adds	r2, r2, r1
20001bfa:	605a      	str	r2, [r3, #4]
20001bfc:	645a      	str	r2, [r3, #68]	; 0x44
20001bfe:	9e00      	ldr	r6, [sp, #0]
20001c00:	0076      	lsls	r6, r6, #1
20001c02:	087f      	lsrs	r7, r7, #1
20001c04:	d309      	bcc.n	20001c1a <RenderTilePersp4+0xe6>
20001c06:	69dc      	ldr	r4, [r3, #28]
20001c08:	7824      	ldrb	r4, [r4, #0]
20001c0a:	40b4      	lsls	r4, r6
20001c0c:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
20001c0e:	5d29      	ldrb	r1, [r5, r4]
20001c10:	020c      	lsls	r4, r1, #8
20001c12:	4321      	orrs	r1, r4
20001c14:	040c      	lsls	r4, r1, #16
20001c16:	4321      	orrs	r1, r4
20001c18:	c002      	stmia	r0!, {r1}
20001c1a:	423f      	tst	r7, r7
20001c1c:	d014      	beq.n	20001c48 <RenderTilePersp4+0x114>
20001c1e:	69dc      	ldr	r4, [r3, #28]
20001c20:	7824      	ldrb	r4, [r4, #0]
20001c22:	40b4      	lsls	r4, r6
20001c24:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
20001c26:	5d29      	ldrb	r1, [r5, r4]
20001c28:	020c      	lsls	r4, r1, #8
20001c2a:	4321      	orrs	r1, r4
20001c2c:	040c      	lsls	r4, r1, #16
20001c2e:	4321      	orrs	r1, r4
20001c30:	69dc      	ldr	r4, [r3, #28]
20001c32:	7824      	ldrb	r4, [r4, #0]
20001c34:	40b4      	lsls	r4, r6
20001c36:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
20001c38:	5d2a      	ldrb	r2, [r5, r4]
20001c3a:	0214      	lsls	r4, r2, #8
20001c3c:	4322      	orrs	r2, r4
20001c3e:	0414      	lsls	r4, r2, #16
20001c40:	4322      	orrs	r2, r4
20001c42:	c006      	stmia	r0!, {r1, r2}
20001c44:	3f01      	subs	r7, #1
20001c46:	d1ea      	bne.n	20001c1e <RenderTilePersp4+0xea>
20001c48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
20001c4a:	46c0      	nop			; (mov r8, r8)

20001c4c <RenderTilePersp_pSioBase>:
20001c4c:	d0000000 	.word	0xd0000000

20001c50 <RenderTilePersp_Interp>:
20001c50:	d0000080 	.word	0xd0000080

20001c54 <RenderTilePersp_Ctrl>:
20001c54:	0004000c 	.word	0x0004000c

20001c58 <BlitKey>:
20001c58:	b510      	push	{r4, lr}
20001c5a:	4686      	mov	lr, r0
20001c5c:	08d4      	lsrs	r4, r2, #3
20001c5e:	00e4      	lsls	r4, r4, #3
20001c60:	4062      	eors	r2, r4
20001c62:	4420      	add	r0, r4
20001c64:	4421      	add	r1, r4
20001c66:	a413      	add	r4, pc, #76	; (adr r4, 20001cb4 <BlitKey+0x5c>)
20001c68:	00d2      	lsls	r2, r2, #3
20001c6a:	1aa4      	subs	r4, r4, r2
20001c6c:	3401      	adds	r4, #1
20001c6e:	4720      	bx	r4
20001c70:	3808      	subs	r0, #8
20001c72:	3908      	subs	r1, #8
20001c74:	79cc      	ldrb	r4, [r1, #7]
20001c76:	429c      	cmp	r4, r3
20001c78:	d000      	beq.n	20001c7c <BlitKey+0x24>
20001c7a:	71c4      	strb	r4, [r0, #7]
20001c7c:	798c      	ldrb	r4, [r1, #6]
20001c7e:	429c      	cmp	r4, r3
20001c80:	d000      	beq.n	20001c84 <BlitKey+0x2c>
20001c82:	7184      	strb	r4, [r0, #6]
20001c84:	794c      	ldrb	r4, [r1, #5]
20001c86:	429c      	cmp	r4, r3
20001c88:	d000      	beq.n	20001c8c <BlitKey+0x34>
20001c8a:	7144      	strb	r4, [r0, #5]
20001c8c:	790c      	ldrb	r4, [r1, #4]
20001c8e:	429c      	cmp	r4, r3
20001c90:	d000      	beq.n	20001c94 <BlitKey+0x3c>
20001c92:	7104      	strb	r4, [r0, #4]
20001c94:	78cc      	ldrb	r4, [r1, #3]
20001c96:	429c      	cmp	r4, r3
20001c98:	d000      	beq.n	20001c9c <BlitKey+0x44>
20001c9a:	70c4      	strb	r4, [r0, #3]
20001c9c:	788c      	ldrb	r4, [r1, #2]
20001c9e:	429c      	cmp	r4, r3
20001ca0:	d000      	beq.n	20001ca4 <BlitKey+0x4c>
20001ca2:	7084      	strb	r4, [r0, #2]
20001ca4:	784c      	ldrb	r4, [r1, #1]
20001ca6:	429c      	cmp	r4, r3
20001ca8:	d000      	beq.n	20001cac <BlitKey+0x54>
20001caa:	7044      	strb	r4, [r0, #1]
20001cac:	780c      	ldrb	r4, [r1, #0]
20001cae:	429c      	cmp	r4, r3
20001cb0:	d000      	beq.n	20001cb4 <BlitKey+0x5c>
20001cb2:	7004      	strb	r4, [r0, #0]
20001cb4:	4570      	cmp	r0, lr
20001cb6:	d8db      	bhi.n	20001c70 <BlitKey+0x18>
20001cb8:	bd10      	pop	{r4, pc}
20001cba:	46c0      	nop			; (mov r8, r8)

20001cbc <Render>:
20001cbc:	b5f0      	push	{r4, r5, r6, r7, lr}
20001cbe:	b085      	sub	sp, #20
20001cc0:	9001      	str	r0, [sp, #4]
20001cc2:	9102      	str	r1, [sp, #8]
20001cc4:	9304      	str	r3, [sp, #16]
20001cc6:	4c31      	ldr	r4, [pc, #196]	; (20001d8c <Render_pScreenAddr>)
20001cc8:	6824      	ldr	r4, [r4, #0]
20001cca:	2c00      	cmp	r4, #0
20001ccc:	d055      	beq.n	20001d7a <Render_Clear>
20001cce:	8825      	ldrh	r5, [r4, #0]
20001cd0:	422d      	tst	r5, r5
20001cd2:	d052      	beq.n	20001d7a <Render_Clear>
20001cd4:	3404      	adds	r4, #4

20001cd6 <Render_StripLoop>:
20001cd6:	8823      	ldrh	r3, [r4, #0]
20001cd8:	429a      	cmp	r2, r3
20001cda:	d304      	bcc.n	20001ce6 <Render_StripOK>
20001cdc:	1ad2      	subs	r2, r2, r3
20001cde:	34e4      	adds	r4, #228	; 0xe4
20001ce0:	3d01      	subs	r5, #1
20001ce2:	d1f8      	bne.n	20001cd6 <Render_StripLoop>
20001ce4:	e049      	b.n	20001d7a <Render_Clear>

20001ce6 <Render_StripOK>:
20001ce6:	9203      	str	r2, [sp, #12]
20001ce8:	8865      	ldrh	r5, [r4, #2]
20001cea:	422d      	tst	r5, r5
20001cec:	d045      	beq.n	20001d7a <Render_Clear>
20001cee:	3404      	adds	r4, #4

20001cf0 <Render_SegmLoop>:
20001cf0:	9a04      	ldr	r2, [sp, #16]
20001cf2:	4212      	tst	r2, r2
20001cf4:	d041      	beq.n	20001d7a <Render_Clear>
20001cf6:	8823      	ldrh	r3, [r4, #0]
20001cf8:	4293      	cmp	r3, r2
20001cfa:	d300      	bcc.n	20001cfe <Render_SegmLoop+0xe>
20001cfc:	4613      	mov	r3, r2
20001cfe:	421b      	tst	r3, r3
20001d00:	d038      	beq.n	20001d74 <Render_SegmNext>
20001d02:	1ad2      	subs	r2, r2, r3
20001d04:	9204      	str	r2, [sp, #16]
20001d06:	88e2      	ldrh	r2, [r4, #6]
20001d08:	b212      	sxth	r2, r2
20001d0a:	9903      	ldr	r1, [sp, #12]
20001d0c:	440a      	add	r2, r1
20001d0e:	7c61      	ldrb	r1, [r4, #17]
20001d10:	4209      	tst	r1, r1
20001d12:	d000      	beq.n	20001d16 <Render_SegmLoop+0x26>
20001d14:	1052      	asrs	r2, r2, #1
20001d16:	8961      	ldrh	r1, [r4, #10]
20001d18:	1a52      	subs	r2, r2, r1
20001d1a:	d5fd      	bpl.n	20001d18 <Render_SegmLoop+0x28>
20001d1c:	1852      	adds	r2, r2, r1
20001d1e:	d4fd      	bmi.n	20001d1c <Render_SegmLoop+0x2c>
20001d20:	88a1      	ldrh	r1, [r4, #4]
20001d22:	b209      	sxth	r1, r1
20001d24:	8920      	ldrh	r0, [r4, #8]
20001d26:	1a09      	subs	r1, r1, r0
20001d28:	d5fd      	bpl.n	20001d26 <Render_SegmLoop+0x36>
20001d2a:	1809      	adds	r1, r1, r0
20001d2c:	d4fd      	bmi.n	20001d2a <Render_SegmLoop+0x3a>
20001d2e:	7c20      	ldrb	r0, [r4, #16]
20001d30:	4200      	tst	r0, r0
20001d32:	d10d      	bne.n	20001d50 <Render_SegmLoop+0x60>
20001d34:	0852      	lsrs	r2, r2, #1
20001d36:	6961      	ldr	r1, [r4, #20]
20001d38:	d300      	bcc.n	20001d3c <Render_SegmLoop+0x4c>
20001d3a:	69a1      	ldr	r1, [r4, #24]
20001d3c:	089a      	lsrs	r2, r3, #2
20001d3e:	9e01      	ldr	r6, [sp, #4]
20001d40:	c604      	stmia	r6!, {r2}
20001d42:	9802      	ldr	r0, [sp, #8]
20001d44:	c601      	stmia	r6!, {r0}
20001d46:	9601      	str	r6, [sp, #4]
20001d48:	f7fe fae2 	bl	20000310 <MemSet4>
20001d4c:	9002      	str	r0, [sp, #8]
20001d4e:	e011      	b.n	20001d74 <Render_SegmNext>
20001d50:	9400      	str	r4, [sp, #0]
20001d52:	a710      	add	r7, pc, #64	; (adr r7, 20001d94 <Render_FncAddr>)
20001d54:	0086      	lsls	r6, r0, #2
20001d56:	59bf      	ldr	r7, [r7, r6]
20001d58:	2806      	cmp	r0, #6
20001d5a:	d803      	bhi.n	20001d64 <Render_SegmLoop+0x74>
20001d5c:	9801      	ldr	r0, [sp, #4]
20001d5e:	47b8      	blx	r7
20001d60:	9001      	str	r0, [sp, #4]
20001d62:	e007      	b.n	20001d74 <Render_SegmNext>
20001d64:	0898      	lsrs	r0, r3, #2
20001d66:	9e01      	ldr	r6, [sp, #4]
20001d68:	c601      	stmia	r6!, {r0}
20001d6a:	9802      	ldr	r0, [sp, #8]
20001d6c:	c601      	stmia	r6!, {r0}
20001d6e:	9601      	str	r6, [sp, #4]
20001d70:	47b8      	blx	r7
20001d72:	9002      	str	r0, [sp, #8]

20001d74 <Render_SegmNext>:
20001d74:	341c      	adds	r4, #28
20001d76:	3d01      	subs	r5, #1
20001d78:	d1ba      	bne.n	20001cf0 <Render_SegmLoop>

20001d7a <Render_Clear>:
20001d7a:	9801      	ldr	r0, [sp, #4]
20001d7c:	9904      	ldr	r1, [sp, #16]
20001d7e:	0889      	lsrs	r1, r1, #2
20001d80:	d001      	beq.n	20001d86 <Render_Clear+0xc>
20001d82:	4a03      	ldr	r2, [pc, #12]	; (20001d90 <Render_LineBuf0Addr>)
20001d84:	c006      	stmia	r0!, {r1, r2}
20001d86:	b005      	add	sp, #20
20001d88:	bdf0      	pop	{r4, r5, r6, r7, pc}
20001d8a:	46c0      	nop			; (mov r8, r8)

20001d8c <Render_pScreenAddr>:
20001d8c:	20008634 	.word	0x20008634

20001d90 <Render_LineBuf0Addr>:
20001d90:	2000cc00 	.word	0x2000cc00

20001d94 <Render_FncAddr>:
20001d94:	20000311 	.word	0x20000311
20001d98:	20000929 	.word	0x20000929
20001d9c:	2000143d 	.word	0x2000143d
20001da0:	20001505 	.word	0x20001505
20001da4:	20001399 	.word	0x20001399
20001da8:	20000923 	.word	0x20000923
20001dac:	20000925 	.word	0x20000925
20001db0:	2000089d 	.word	0x2000089d
20001db4:	20000839 	.word	0x20000839
20001db8:	2000077d 	.word	0x2000077d
20001dbc:	20000e7d 	.word	0x20000e7d
20001dc0:	200000c1 	.word	0x200000c1
20001dc4:	20000689 	.word	0x20000689
20001dc8:	20000345 	.word	0x20000345
20001dcc:	20000b2d 	.word	0x20000b2d
20001dd0:	20000451 	.word	0x20000451
20001dd4:	20000c25 	.word	0x20000c25
20001dd8:	20000d95 	.word	0x20000d95
20001ddc:	20000f59 	.word	0x20000f59
20001de0:	20001059 	.word	0x20001059
20001de4:	200012e5 	.word	0x200012e5
20001de8:	200001f5 	.word	0x200001f5
20001dec:	2000095d 	.word	0x2000095d
20001df0:	20000a31 	.word	0x20000a31
20001df4:	200015c1 	.word	0x200015c1
20001df8:	20001745 	.word	0x20001745
20001dfc:	200018b5 	.word	0x200018b5
20001e00:	20001a01 	.word	0x20001a01
20001e04:	20001b35 	.word	0x20001b35

20001e08 <flash_init_boot2_copyout>:
    if (boot2_copyout_valid)
20001e08:	4808      	ldr	r0, [pc, #32]	; (20001e2c <flash_init_boot2_copyout+0x24>)
static void __no_inline_not_in_flash_func(flash_init_boot2_copyout)() {
20001e0a:	b510      	push	{r4, lr}
    if (boot2_copyout_valid)
20001e0c:	7803      	ldrb	r3, [r0, #0]
20001e0e:	2b00      	cmp	r3, #0
20001e10:	d10a      	bne.n	20001e28 <flash_init_boot2_copyout+0x20>
20001e12:	2380      	movs	r3, #128	; 0x80
20001e14:	4906      	ldr	r1, [pc, #24]	; (20001e30 <flash_init_boot2_copyout+0x28>)
    for (int i = 0; i < BOOT2_SIZE_WORDS; ++i)
20001e16:	4a07      	ldr	r2, [pc, #28]	; (20001e34 <flash_init_boot2_copyout+0x2c>)
20001e18:	055b      	lsls	r3, r3, #21
        boot2_copyout[i] = ((uint32_t *)XIP_BASE)[i];
20001e1a:	681c      	ldr	r4, [r3, #0]
20001e1c:	50cc      	str	r4, [r1, r3]
    for (int i = 0; i < BOOT2_SIZE_WORDS; ++i)
20001e1e:	3304      	adds	r3, #4
20001e20:	4293      	cmp	r3, r2
20001e22:	d1fa      	bne.n	20001e1a <flash_init_boot2_copyout+0x12>
    boot2_copyout_valid = true;
20001e24:	2301      	movs	r3, #1
20001e26:	7003      	strb	r3, [r0, #0]
}
20001e28:	bd10      	pop	{r4, pc}
20001e2a:	46c0      	nop			; (mov r8, r8)
20001e2c:	20017332 	.word	0x20017332
20001e30:	10016afc 	.word	0x10016afc
20001e34:	10000100 	.word	0x10000100

20001e38 <flash_enable_xip_via_boot2>:
static void __no_inline_not_in_flash_func(flash_enable_xip_via_boot2)() {
20001e38:	b510      	push	{r4, lr}
    ((void (*)(void))boot2_copyout+1)();
20001e3a:	4b02      	ldr	r3, [pc, #8]	; (20001e44 <flash_enable_xip_via_boot2+0xc>)
20001e3c:	3301      	adds	r3, #1
20001e3e:	4798      	blx	r3
}
20001e40:	bd10      	pop	{r4, pc}
20001e42:	46c0      	nop			; (mov r8, r8)
20001e44:	20016afc 	.word	0x20016afc

20001e48 <flash_cs_force.constprop.0>:
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
20001e48:	4b03      	ldr	r3, [pc, #12]	; (20001e58 <flash_cs_force.constprop.0+0x10>)
20001e4a:	681a      	ldr	r2, [r3, #0]
20001e4c:	23c0      	movs	r3, #192	; 0xc0
20001e4e:	009b      	lsls	r3, r3, #2
20001e50:	4393      	bics	r3, r2
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
20001e52:	4a02      	ldr	r2, [pc, #8]	; (20001e5c <flash_cs_force.constprop.0+0x14>)
20001e54:	6013      	str	r3, [r2, #0]
}
20001e56:	4770      	bx	lr
20001e58:	4001800c 	.word	0x4001800c
20001e5c:	4001900c 	.word	0x4001900c

20001e60 <flash_cs_force.constprop.1>:
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
20001e60:	4b05      	ldr	r3, [pc, #20]	; (20001e78 <flash_cs_force.constprop.1+0x18>)
20001e62:	681a      	ldr	r2, [r3, #0]
20001e64:	2380      	movs	r3, #128	; 0x80
20001e66:	009b      	lsls	r3, r3, #2
20001e68:	4053      	eors	r3, r2
20001e6a:	22c0      	movs	r2, #192	; 0xc0
20001e6c:	0092      	lsls	r2, r2, #2
20001e6e:	4013      	ands	r3, r2
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
20001e70:	4a02      	ldr	r2, [pc, #8]	; (20001e7c <flash_cs_force.constprop.1+0x1c>)
20001e72:	6013      	str	r3, [r2, #0]
20001e74:	4770      	bx	lr
20001e76:	46c0      	nop			; (mov r8, r8)
20001e78:	4001800c 	.word	0x4001800c
20001e7c:	4001900c 	.word	0x4001900c

20001e80 <flash_do_cmd.constprop.0>:
static void __no_inline_not_in_flash_func(flash_do_cmd)(const uint8_t *txbuf, uint8_t *rxbuf, size_t count) {
20001e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
20001e82:	46ce      	mov	lr, r9
20001e84:	4647      	mov	r7, r8
20001e86:	4681      	mov	r9, r0
20001e88:	b580      	push	{r7, lr}
    void (*connect_internal_flash)(void) = (void(*)(void))rom_func_lookup(rom_table_code('I', 'F'));
20001e8a:	4823      	ldr	r0, [pc, #140]	; (20001f18 <flash_do_cmd.constprop.0+0x98>)
static void __no_inline_not_in_flash_func(flash_do_cmd)(const uint8_t *txbuf, uint8_t *rxbuf, size_t count) {
20001e8c:	000e      	movs	r6, r1
    void (*connect_internal_flash)(void) = (void(*)(void))rom_func_lookup(rom_table_code('I', 'F'));
20001e8e:	f000 fbff 	bl	20002690 <__rom_func_lookup_veneer>
20001e92:	0005      	movs	r5, r0
    void (*flash_exit_xip)(void) = (void(*)(void))rom_func_lookup(rom_table_code('E', 'X'));
20001e94:	4821      	ldr	r0, [pc, #132]	; (20001f1c <flash_do_cmd.constprop.0+0x9c>)
20001e96:	f000 fbfb 	bl	20002690 <__rom_func_lookup_veneer>
20001e9a:	0004      	movs	r4, r0
    void (*flash_flush_cache)(void) = (void(*)(void))rom_func_lookup(rom_table_code('F', 'C'));
20001e9c:	4820      	ldr	r0, [pc, #128]	; (20001f20 <flash_do_cmd.constprop.0+0xa0>)
20001e9e:	f000 fbf7 	bl	20002690 <__rom_func_lookup_veneer>
20001ea2:	4680      	mov	r8, r0
    flash_init_boot2_copyout();
20001ea4:	f7ff ffb0 	bl	20001e08 <flash_init_boot2_copyout>
    connect_internal_flash();
20001ea8:	47a8      	blx	r5
    flash_exit_xip();
20001eaa:	47a0      	blx	r4
    flash_cs_force(0);
20001eac:	f7ff ffd8 	bl	20001e60 <flash_cs_force.constprop.1>
        uint32_t flags = ssi_hw->sr;
20001eb0:	21c0      	movs	r1, #192	; 0xc0
    size_t rx_remaining = count;
20001eb2:	240d      	movs	r4, #13
    size_t tx_remaining = count;
20001eb4:	220d      	movs	r2, #13
        bool can_get = !!(flags & SSI_SR_RFNE_BITS);
20001eb6:	2708      	movs	r7, #8
        bool can_put = !!(flags & SSI_SR_TFNF_BITS);
20001eb8:	2002      	movs	r0, #2
        uint32_t flags = ssi_hw->sr;
20001eba:	0549      	lsls	r1, r1, #21
        bool can_get = !!(flags & SSI_SR_RFNE_BITS);
20001ebc:	003d      	movs	r5, r7
        uint32_t flags = ssi_hw->sr;
20001ebe:	6a8b      	ldr	r3, [r1, #40]	; 0x28
        bool can_get = !!(flags & SSI_SR_RFNE_BITS);
20001ec0:	401d      	ands	r5, r3
        if (can_put && tx_remaining && rx_remaining - tx_remaining < max_in_flight) {
20001ec2:	4218      	tst	r0, r3
20001ec4:	d00b      	beq.n	20001ede <flash_do_cmd.constprop.0+0x5e>
20001ec6:	2a00      	cmp	r2, #0
20001ec8:	d009      	beq.n	20001ede <flash_do_cmd.constprop.0+0x5e>
20001eca:	1aa3      	subs	r3, r4, r2
20001ecc:	2b0d      	cmp	r3, #13
20001ece:	d81e      	bhi.n	20001f0e <flash_do_cmd.constprop.0+0x8e>
            ssi_hw->dr0 = *txbuf++;
20001ed0:	464b      	mov	r3, r9
20001ed2:	781b      	ldrb	r3, [r3, #0]
            --tx_remaining;
20001ed4:	3a01      	subs	r2, #1
            ssi_hw->dr0 = *txbuf++;
20001ed6:	660b      	str	r3, [r1, #96]	; 0x60
20001ed8:	2301      	movs	r3, #1
20001eda:	469c      	mov	ip, r3
20001edc:	44e1      	add	r9, ip
        if (can_get && rx_remaining) {
20001ede:	0013      	movs	r3, r2
20001ee0:	2d00      	cmp	r5, #0
20001ee2:	d10b      	bne.n	20001efc <flash_do_cmd.constprop.0+0x7c>
    while (tx_remaining || rx_remaining) {
20001ee4:	4323      	orrs	r3, r4
20001ee6:	2b00      	cmp	r3, #0
20001ee8:	d1e8      	bne.n	20001ebc <flash_do_cmd.constprop.0+0x3c>
    flash_cs_force(1);
20001eea:	f7ff ffad 	bl	20001e48 <flash_cs_force.constprop.0>
    flash_flush_cache();
20001eee:	47c0      	blx	r8
    flash_enable_xip_via_boot2();
20001ef0:	f7ff ffa2 	bl	20001e38 <flash_enable_xip_via_boot2>
}
20001ef4:	bcc0      	pop	{r6, r7}
20001ef6:	46b9      	mov	r9, r7
20001ef8:	46b0      	mov	r8, r6
20001efa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (can_get && rx_remaining) {
20001efc:	2c00      	cmp	r4, #0
20001efe:	d0f2      	beq.n	20001ee6 <flash_do_cmd.constprop.0+0x66>
            *rxbuf++ = ssi_hw->dr0;
20001f00:	6e0b      	ldr	r3, [r1, #96]	; 0x60
            --rx_remaining;
20001f02:	3c01      	subs	r4, #1
            *rxbuf++ = ssi_hw->dr0;
20001f04:	7033      	strb	r3, [r6, #0]
    while (tx_remaining || rx_remaining) {
20001f06:	0023      	movs	r3, r4
            *rxbuf++ = ssi_hw->dr0;
20001f08:	3601      	adds	r6, #1
    while (tx_remaining || rx_remaining) {
20001f0a:	4313      	orrs	r3, r2
20001f0c:	e7eb      	b.n	20001ee6 <flash_do_cmd.constprop.0+0x66>
        if (can_get && rx_remaining) {
20001f0e:	2d00      	cmp	r5, #0
20001f10:	d0d4      	beq.n	20001ebc <flash_do_cmd.constprop.0+0x3c>
20001f12:	2c00      	cmp	r4, #0
20001f14:	d0d2      	beq.n	20001ebc <flash_do_cmd.constprop.0+0x3c>
20001f16:	e7f3      	b.n	20001f00 <flash_do_cmd.constprop.0+0x80>
20001f18:	00004649 	.word	0x00004649
20001f1c:	00005845 	.word	0x00005845
20001f20:	00004346 	.word	0x00004346

20001f24 <mutex_enter_blocking>:

void __time_critical_func(mutex_enter_blocking)(mutex_t *mtx) {
20001f24:	b510      	push	{r4, lr}
    assert(mtx->core.spin_lock);
    bool block = true;
    do {
        uint32_t save = spin_lock_blocking(mtx->core.spin_lock);
20001f26:	6802      	ldr	r2, [r0, #0]
    *lock = 0;
20001f28:	2400      	movs	r4, #0
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
20001f2a:	f3ef 8110 	mrs	r1, PRIMASK
    __asm volatile ("cpsid i");
20001f2e:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
20001f30:	6813      	ldr	r3, [r2, #0]
20001f32:	2b00      	cmp	r3, #0
20001f34:	d0fc      	beq.n	20001f30 <mutex_enter_blocking+0xc>
    __asm volatile ("dmb");
20001f36:	f3bf 8f5f 	dmb	sy
        if (mtx->owner < 0) {
20001f3a:	7903      	ldrb	r3, [r0, #4]
20001f3c:	2b7f      	cmp	r3, #127	; 0x7f
20001f3e:	d80b      	bhi.n	20001f58 <mutex_enter_blocking+0x34>
            mtx->owner = get_core_num();
            block = false;
        }
        spin_unlock(mtx->core.spin_lock, save);
20001f40:	6803      	ldr	r3, [r0, #0]
20001f42:	f3bf 8f5f 	dmb	sy
    *lock = 0;
20001f46:	601c      	str	r4, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
20001f48:	f381 8810 	msr	PRIMASK, r1
    __asm volatile ("wfe");
20001f4c:	bf20      	wfe
        uint32_t save = spin_lock_blocking(mtx->core.spin_lock);
20001f4e:	6802      	ldr	r2, [r0, #0]
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
20001f50:	f3ef 8110 	mrs	r1, PRIMASK
    __asm volatile ("cpsid i");
20001f54:	b672      	cpsid	i
inline static void spin_lock_unsafe_blocking(spin_lock_t *lock) {
20001f56:	e7eb      	b.n	20001f30 <mutex_enter_blocking+0xc>
    return (*(uint32_t *) (SIO_BASE + SIO_CPUID_OFFSET));
20001f58:	23d0      	movs	r3, #208	; 0xd0
20001f5a:	061b      	lsls	r3, r3, #24
            mtx->owner = get_core_num();
20001f5c:	681b      	ldr	r3, [r3, #0]
20001f5e:	7103      	strb	r3, [r0, #4]
        spin_unlock(mtx->core.spin_lock, save);
20001f60:	6803      	ldr	r3, [r0, #0]
    __asm volatile ("dmb");
20001f62:	f3bf 8f5f 	dmb	sy
    *lock = 0;
20001f66:	2200      	movs	r2, #0
20001f68:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
20001f6a:	f381 8810 	msr	PRIMASK, r1
        if (block) {
            __wfe();
        }
    } while (block);
}
20001f6e:	bd10      	pop	{r4, pc}

20001f70 <mutex_try_enter>:

bool __time_critical_func(mutex_try_enter)(mutex_t *mtx, uint32_t *owner_out) {
20001f70:	0003      	movs	r3, r0
    bool entered;
    uint32_t save = spin_lock_blocking(mtx->core.spin_lock);
20001f72:	6800      	ldr	r0, [r0, #0]
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
20001f74:	f3ef 8c10 	mrs	ip, PRIMASK
    __asm volatile ("cpsid i");
20001f78:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
20001f7a:	6802      	ldr	r2, [r0, #0]
20001f7c:	2a00      	cmp	r2, #0
20001f7e:	d0fc      	beq.n	20001f7a <mutex_try_enter+0xa>
    __asm volatile ("dmb");
20001f80:	f3bf 8f5f 	dmb	sy
    if (mtx->owner < 0) {
20001f84:	2204      	movs	r2, #4
20001f86:	569a      	ldrsb	r2, [r3, r2]
20001f88:	2a00      	cmp	r2, #0
20001f8a:	db0b      	blt.n	20001fa4 <mutex_try_enter+0x34>
        mtx->owner = get_core_num();
        entered = true;
    } else {
        if (owner_out) *owner_out = mtx->owner;
20001f8c:	2900      	cmp	r1, #0
20001f8e:	d00f      	beq.n	20001fb0 <mutex_try_enter+0x40>
        entered = false;
20001f90:	2000      	movs	r0, #0
        if (owner_out) *owner_out = mtx->owner;
20001f92:	600a      	str	r2, [r1, #0]
    }
    spin_unlock(mtx->core.spin_lock, save);
20001f94:	681b      	ldr	r3, [r3, #0]
20001f96:	f3bf 8f5f 	dmb	sy
    *lock = 0;
20001f9a:	2200      	movs	r2, #0
20001f9c:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
20001f9e:	f38c 8810 	msr	PRIMASK, ip
    return entered;
}
20001fa2:	4770      	bx	lr
    return (*(uint32_t *) (SIO_BASE + SIO_CPUID_OFFSET));
20001fa4:	22d0      	movs	r2, #208	; 0xd0
20001fa6:	0612      	lsls	r2, r2, #24
        mtx->owner = get_core_num();
20001fa8:	6812      	ldr	r2, [r2, #0]
        entered = true;
20001faa:	2001      	movs	r0, #1
        mtx->owner = get_core_num();
20001fac:	711a      	strb	r2, [r3, #4]
        entered = true;
20001fae:	e7f1      	b.n	20001f94 <mutex_try_enter+0x24>
        entered = false;
20001fb0:	2000      	movs	r0, #0
20001fb2:	e7ef      	b.n	20001f94 <mutex_try_enter+0x24>

20001fb4 <mutex_enter_timeout_ms>:

bool __time_critical_func(mutex_enter_timeout_ms)(mutex_t *mtx, uint32_t timeout_ms) {
20001fb4:	b5f0      	push	{r4, r5, r6, r7, lr}
20001fb6:	46c6      	mov	lr, r8
20001fb8:	b500      	push	{lr}
20001fba:	000c      	movs	r4, r1
20001fbc:	4680      	mov	r8, r0
    update_us_since_boot(&t, time_us_64());
20001fbe:	f000 fb5f 	bl	20002680 <__time_us_64_veneer>
    uint64_t delayed = base + ms * 1000ull;
20001fc2:	22fa      	movs	r2, #250	; 0xfa
    update_us_since_boot(&t, time_us_64());
20001fc4:	0006      	movs	r6, r0
20001fc6:	000f      	movs	r7, r1
    uint64_t delayed = base + ms * 1000ull;
20001fc8:	0020      	movs	r0, r4
20001fca:	2300      	movs	r3, #0
20001fcc:	2100      	movs	r1, #0
20001fce:	0092      	lsls	r2, r2, #2
20001fd0:	f000 fb4e 	bl	20002670 <____wrap___aeabi_lmul_veneer>
20001fd4:	1980      	adds	r0, r0, r6
20001fd6:	4179      	adcs	r1, r7
20001fd8:	0004      	movs	r4, r0
20001fda:	000d      	movs	r5, r1
    if (delayed < base) {
20001fdc:	428f      	cmp	r7, r1
20001fde:	d830      	bhi.n	20002042 <mutex_enter_timeout_ms+0x8e>
20001fe0:	d02d      	beq.n	2000203e <mutex_enter_timeout_ms+0x8a>
    *lock = 0;
20001fe2:	2600      	movs	r6, #0

bool __time_critical_func(mutex_enter_block_until)(mutex_t *mtx, absolute_time_t until) {
    assert(mtx->core.spin_lock);
    bool block = true;
    do {
        uint32_t save = spin_lock_blocking(mtx->core.spin_lock);
20001fe4:	4643      	mov	r3, r8
20001fe6:	681a      	ldr	r2, [r3, #0]
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
20001fe8:	f3ef 8110 	mrs	r1, PRIMASK
    __asm volatile ("cpsid i");
20001fec:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
20001fee:	6813      	ldr	r3, [r2, #0]
20001ff0:	2b00      	cmp	r3, #0
20001ff2:	d0fc      	beq.n	20001fee <mutex_enter_timeout_ms+0x3a>
    __asm volatile ("dmb");
20001ff4:	f3bf 8f5f 	dmb	sy
        if (mtx->owner < 0) {
20001ff8:	4643      	mov	r3, r8
20001ffa:	791b      	ldrb	r3, [r3, #4]
20001ffc:	2b7f      	cmp	r3, #127	; 0x7f
20001ffe:	d80e      	bhi.n	2000201e <mutex_enter_timeout_ms+0x6a>
            mtx->owner = get_core_num();
            block = false;
        }
        spin_unlock(mtx->core.spin_lock, save);
20002000:	4643      	mov	r3, r8
20002002:	681b      	ldr	r3, [r3, #0]
20002004:	f3bf 8f5f 	dmb	sy
    *lock = 0;
20002008:	601e      	str	r6, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
2000200a:	f381 8810 	msr	PRIMASK, r1
        if (block) {
            if (best_effort_wfe_or_timeout(until)) {
2000200e:	0020      	movs	r0, r4
20002010:	0029      	movs	r1, r5
20002012:	f000 fb25 	bl	20002660 <__best_effort_wfe_or_timeout_veneer>
20002016:	2800      	cmp	r0, #0
20002018:	d0e4      	beq.n	20001fe4 <mutex_enter_timeout_ms+0x30>
                return false;
2000201a:	2000      	movs	r0, #0
2000201c:	e00c      	b.n	20002038 <mutex_enter_timeout_ms+0x84>
    return (*(uint32_t *) (SIO_BASE + SIO_CPUID_OFFSET));
2000201e:	23d0      	movs	r3, #208	; 0xd0
            mtx->owner = get_core_num();
20002020:	4642      	mov	r2, r8
20002022:	061b      	lsls	r3, r3, #24
20002024:	681b      	ldr	r3, [r3, #0]
20002026:	7113      	strb	r3, [r2, #4]
        spin_unlock(mtx->core.spin_lock, save);
20002028:	6813      	ldr	r3, [r2, #0]
    __asm volatile ("dmb");
2000202a:	f3bf 8f5f 	dmb	sy
    *lock = 0;
2000202e:	2200      	movs	r2, #0
20002030:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
20002032:	f381 8810 	msr	PRIMASK, r1
            }
        }
    } while (block);
    return true;
20002036:	2001      	movs	r0, #1
}
20002038:	bc80      	pop	{r7}
2000203a:	46b8      	mov	r8, r7
2000203c:	bdf0      	pop	{r4, r5, r6, r7, pc}
2000203e:	4286      	cmp	r6, r0
20002040:	d9cf      	bls.n	20001fe2 <mutex_enter_timeout_ms+0x2e>
        delayed = (uint64_t)-1;
20002042:	2401      	movs	r4, #1
20002044:	4264      	negs	r4, r4
20002046:	17e5      	asrs	r5, r4, #31
20002048:	e7cb      	b.n	20001fe2 <mutex_enter_timeout_ms+0x2e>
2000204a:	46c0      	nop			; (mov r8, r8)

2000204c <mutex_exit>:
}

void __time_critical_func(mutex_exit)(mutex_t *mtx) {
    uint32_t save = spin_lock_blocking(mtx->core.spin_lock);
2000204c:	6802      	ldr	r2, [r0, #0]
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
2000204e:	f3ef 8110 	mrs	r1, PRIMASK
    __asm volatile ("cpsid i");
20002052:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
20002054:	6813      	ldr	r3, [r2, #0]
20002056:	2b00      	cmp	r3, #0
20002058:	d0fc      	beq.n	20002054 <mutex_exit+0x8>
    __asm volatile ("dmb");
2000205a:	f3bf 8f5f 	dmb	sy
    assert(mtx->owner >= 0);
    mtx->owner = -1;
2000205e:	23ff      	movs	r3, #255	; 0xff
20002060:	7103      	strb	r3, [r0, #4]
    __asm volatile ("sev");
20002062:	bf40      	sev
    __sev();
    spin_unlock(mtx->core.spin_lock, save);
20002064:	6803      	ldr	r3, [r0, #0]
    __asm volatile ("dmb");
20002066:	f3bf 8f5f 	dmb	sy
    *lock = 0;
2000206a:	2200      	movs	r2, #0
2000206c:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
2000206e:	f381 8810 	msr	PRIMASK, r1
}
20002072:	4770      	bx	lr

20002074 <_Z13VgaBufProcessv>:
	dma_hw->ints0 = (1u << VGA_DMA_PIO0);
20002074:	22a0      	movs	r2, #160	; 0xa0
{
20002076:	b5f0      	push	{r4, r5, r6, r7, lr}
	dma_hw->ints0 = (1u << VGA_DMA_PIO0);
20002078:	2102      	movs	r1, #2
{
2000207a:	46de      	mov	lr, fp
2000207c:	4657      	mov	r7, sl
2000207e:	464e      	mov	r6, r9
20002080:	4645      	mov	r5, r8
	dma_hw->ints0 = (1u << VGA_DMA_PIO0);
20002082:	4b7d      	ldr	r3, [pc, #500]	; (20002278 <_Z13VgaBufProcessv+0x204>)
20002084:	05d2      	lsls	r2, r2, #23
{
20002086:	b5e0      	push	{r5, r6, r7, lr}
	dma_hw->ints0 = (1u << VGA_DMA_PIO0);
20002088:	50d1      	str	r1, [r2, r3]
	BufInx = bufinx ^ 1;
2000208a:	2301      	movs	r3, #1
	int bufinx = BufInx;
2000208c:	497b      	ldr	r1, [pc, #492]	; (2000227c <_Z13VgaBufProcessv+0x208>)
	hw_divider_save_state(&DividerState);
2000208e:	487c      	ldr	r0, [pc, #496]	; (20002280 <_Z13VgaBufProcessv+0x20c>)
	int bufinx = BufInx;
20002090:	680f      	ldr	r7, [r1, #0]
{
20002092:	b083      	sub	sp, #12
	BufInx = bufinx ^ 1;
20002094:	407b      	eors	r3, r7
20002096:	600b      	str	r3, [r1, #0]
        dma_channel_hw_addr(channel)->al3_read_addr_trig = (uintptr_t) read_addr;
20002098:	4b7a      	ldr	r3, [pc, #488]	; (20002284 <_Z13VgaBufProcessv+0x210>)
2000209a:	681b      	ldr	r3, [r3, #0]
2000209c:	63d3      	str	r3, [r2, #60]	; 0x3c
	hw_divider_save_state(&DividerState);
2000209e:	f000 faff 	bl	200026a0 <__hw_divider_save_state_veneer>
	int line = ScanLine;	// current scanline
200020a2:	4b79      	ldr	r3, [pc, #484]	; (20002288 <_Z13VgaBufProcessv+0x214>)
	if (line > CurVmode.vtot) // last scanline?
200020a4:	4979      	ldr	r1, [pc, #484]	; (2000228c <_Z13VgaBufProcessv+0x218>)
	int line = ScanLine;	// current scanline
200020a6:	681a      	ldr	r2, [r3, #0]
	if (line > CurVmode.vtot) // last scanline?
200020a8:	8d88      	ldrh	r0, [r1, #44]	; 0x2c
	line++; 		// new current scanline
200020aa:	3201      	adds	r2, #1
	if (line > CurVmode.vtot) // last scanline?
200020ac:	4290      	cmp	r0, r2
200020ae:	da04      	bge.n	200020ba <_Z13VgaBufProcessv+0x46>
		Frame++;	// increment frame counter
200020b0:	4877      	ldr	r0, [pc, #476]	; (20002290 <_Z13VgaBufProcessv+0x21c>)
200020b2:	6802      	ldr	r2, [r0, #0]
200020b4:	3201      	adds	r2, #1
200020b6:	6002      	str	r2, [r0, #0]
		line = 1; 	// restart scanline
200020b8:	2201      	movs	r2, #1
	ScanLine = line;	// store new scanline
200020ba:	601a      	str	r2, [r3, #0]
	u8 linetype = ScanlineType[line];
200020bc:	4b75      	ldr	r3, [pc, #468]	; (20002294 <_Z13VgaBufProcessv+0x220>)
	switch (linetype)
200020be:	5c9b      	ldrb	r3, [r3, r2]
200020c0:	3b06      	subs	r3, #6
200020c2:	b2db      	uxtb	r3, r3
200020c4:	2b04      	cmp	r3, #4
200020c6:	d862      	bhi.n	2000218e <_Z13VgaBufProcessv+0x11a>
200020c8:	4873      	ldr	r0, [pc, #460]	; (20002298 <_Z13VgaBufProcessv+0x224>)
200020ca:	009b      	lsls	r3, r3, #2
200020cc:	58c3      	ldr	r3, [r0, r3]
200020ce:	469f      	mov	pc, r3
		y0 = line - CurVmode.vfirst1;
200020d0:	2340      	movs	r3, #64	; 0x40
		y0 = line - CurVmode.vfirst2;
200020d2:	5acb      	ldrh	r3, [r1, r3]
200020d4:	1ad2      	subs	r2, r2, r3
		if (CurVmode.dbly) y0 >>= 1;
200020d6:	2355      	movs	r3, #85	; 0x55
200020d8:	5ccb      	ldrb	r3, [r1, r3]
200020da:	2b00      	cmp	r3, #0
200020dc:	d000      	beq.n	200020e0 <_Z13VgaBufProcessv+0x6c>
200020de:	1052      	asrs	r2, r2, #1
		y0 = (y0 << 1) + 1;
200020e0:	0052      	lsls	r2, r2, #1
200020e2:	1c53      	adds	r3, r2, #1
		VSync = False;	// not vsync
200020e4:	2200      	movs	r2, #0
		y0 = (y0 << 1) + 1;
200020e6:	9300      	str	r3, [sp, #0]
		VSync = False;	// not vsync
200020e8:	4b6c      	ldr	r3, [pc, #432]	; (2000229c <_Z13VgaBufProcessv+0x228>)
200020ea:	701a      	strb	r2, [r3, #0]
	if (y0 >= 0)
200020ec:	9b00      	ldr	r3, [sp, #0]
200020ee:	2b00      	cmp	r3, #0
200020f0:	db25      	blt.n	2000213e <_Z13VgaBufProcessv+0xca>
    pio->ctrl = (pio->ctrl & ~(1u << sm)) | (!!enabled << sm);
200020f2:	4c6b      	ldr	r4, [pc, #428]	; (200022a0 <_Z13VgaBufProcessv+0x22c>)
    dma_hw->abort = 1u << channel;
200020f4:	21a0      	movs	r1, #160	; 0xa0
		for (layer = 1; layer < LAYERS; layer++)
200020f6:	2301      	movs	r3, #1
200020f8:	46a4      	mov	ip, r4
200020fa:	46bb      	mov	fp, r7
    return timer_hw->timerawl;
200020fc:	4a69      	ldr	r2, [pc, #420]	; (200022a4 <_Z13VgaBufProcessv+0x230>)
200020fe:	486a      	ldr	r0, [pc, #424]	; (200022a8 <_Z13VgaBufProcessv+0x234>)
20002100:	4690      	mov	r8, r2
	if (y0 >= 0)
20002102:	4d6a      	ldr	r5, [pc, #424]	; (200022ac <_Z13VgaBufProcessv+0x238>)
20002104:	4a6a      	ldr	r2, [pc, #424]	; (200022b0 <_Z13VgaBufProcessv+0x23c>)
20002106:	05c9      	lsls	r1, r1, #23
			if (CtrlBufNext[layer] == NULL) continue;
20002108:	4e5e      	ldr	r6, [pc, #376]	; (20002284 <_Z13VgaBufProcessv+0x210>)
2000210a:	009c      	lsls	r4, r3, #2
2000210c:	5934      	ldr	r4, [r6, r4]
2000210e:	9401      	str	r4, [sp, #4]
20002110:	2c00      	cmp	r4, #0
20002112:	d00e      	beq.n	20002132 <_Z13VgaBufProcessv+0xbe>
			if (!s->on || (s->w <= 0) || (y0 < s->y) || (y0 >= s->y + s->h)) continue;
20002114:	7b84      	ldrb	r4, [r0, #14]
20002116:	2c00      	cmp	r4, #0
20002118:	d00b      	beq.n	20002132 <_Z13VgaBufProcessv+0xbe>
2000211a:	8844      	ldrh	r4, [r0, #2]
2000211c:	2c00      	cmp	r4, #0
2000211e:	d008      	beq.n	20002132 <_Z13VgaBufProcessv+0xbe>
20002120:	2400      	movs	r4, #0
20002122:	5f07      	ldrsh	r7, [r0, r4]
20002124:	9e00      	ldr	r6, [sp, #0]
20002126:	42b7      	cmp	r7, r6
20002128:	dc03      	bgt.n	20002132 <_Z13VgaBufProcessv+0xbe>
2000212a:	8884      	ldrh	r4, [r0, #4]
2000212c:	19e4      	adds	r4, r4, r7
2000212e:	42b4      	cmp	r4, r6
20002130:	dc31      	bgt.n	20002196 <_Z13VgaBufProcessv+0x122>
		for (layer = 1; layer < LAYERS; layer++)
20002132:	3301      	adds	r3, #1
20002134:	3518      	adds	r5, #24
20002136:	3024      	adds	r0, #36	; 0x24
20002138:	2b04      	cmp	r3, #4
2000213a:	d1e5      	bne.n	20002108 <_Z13VgaBufProcessv+0x94>
2000213c:	465f      	mov	r7, fp
}
2000213e:	0038      	movs	r0, r7
20002140:	b003      	add	sp, #12
20002142:	bcf0      	pop	{r4, r5, r6, r7}
20002144:	46bb      	mov	fp, r7
20002146:	46b2      	mov	sl, r6
20002148:	46a9      	mov	r9, r5
2000214a:	46a0      	mov	r8, r4
2000214c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		y0 = line - CurVmode.vfirst2;
2000214e:	234e      	movs	r3, #78	; 0x4e
20002150:	e7bf      	b.n	200020d2 <_Z13VgaBufProcessv+0x5e>
		y0 = line - CurVmode.vfirst1;
20002152:	2340      	movs	r3, #64	; 0x40
20002154:	5acb      	ldrh	r3, [r1, r3]
20002156:	1ad2      	subs	r2, r2, r3
		if (CurVmode.dbly) y0 >>= 1;
20002158:	2355      	movs	r3, #85	; 0x55
		y0 = line - CurVmode.vfirst1;
2000215a:	9200      	str	r2, [sp, #0]
		if (CurVmode.dbly) y0 >>= 1;
2000215c:	5ccb      	ldrb	r3, [r1, r3]
2000215e:	2b00      	cmp	r3, #0
20002160:	d001      	beq.n	20002166 <_Z13VgaBufProcessv+0xf2>
20002162:	1053      	asrs	r3, r2, #1
20002164:	9300      	str	r3, [sp, #0]
		VSync = False;	// not vsync
20002166:	2200      	movs	r2, #0
20002168:	4b4c      	ldr	r3, [pc, #304]	; (2000229c <_Z13VgaBufProcessv+0x228>)
2000216a:	701a      	strb	r2, [r3, #0]
		break;
2000216c:	e7be      	b.n	200020ec <_Z13VgaBufProcessv+0x78>
		y0 = line - CurVmode.vfirst1;
2000216e:	2340      	movs	r3, #64	; 0x40
		y0 = line - CurVmode.vfirst2;
20002170:	5acb      	ldrh	r3, [r1, r3]
20002172:	1ad2      	subs	r2, r2, r3
		if (CurVmode.dbly) y0 >>= 1;
20002174:	2355      	movs	r3, #85	; 0x55
20002176:	5ccb      	ldrb	r3, [r1, r3]
20002178:	2b00      	cmp	r3, #0
2000217a:	d000      	beq.n	2000217e <_Z13VgaBufProcessv+0x10a>
2000217c:	1052      	asrs	r2, r2, #1
		y0 <<= 1;
2000217e:	0053      	lsls	r3, r2, #1
		VSync = False;	// not vsync
20002180:	2200      	movs	r2, #0
		y0 <<= 1;
20002182:	9300      	str	r3, [sp, #0]
		VSync = False;	// not vsync
20002184:	4b45      	ldr	r3, [pc, #276]	; (2000229c <_Z13VgaBufProcessv+0x228>)
20002186:	701a      	strb	r2, [r3, #0]
		break;
20002188:	e7b0      	b.n	200020ec <_Z13VgaBufProcessv+0x78>
		y0 = line - CurVmode.vfirst2;
2000218a:	234e      	movs	r3, #78	; 0x4e
2000218c:	e7f0      	b.n	20002170 <_Z13VgaBufProcessv+0xfc>
		VSync = True;	// vsync
2000218e:	2201      	movs	r2, #1
20002190:	4b42      	ldr	r3, [pc, #264]	; (2000229c <_Z13VgaBufProcessv+0x228>)
20002192:	701a      	strb	r2, [r3, #0]
	if (y0 >= 0)
20002194:	e7d3      	b.n	2000213e <_Z13VgaBufProcessv+0xca>
20002196:	4644      	mov	r4, r8
20002198:	6aa4      	ldr	r4, [r4, #40]	; 0x28
2000219a:	46a2      	mov	sl, r4
2000219c:	1d2c      	adds	r4, r5, #4
2000219e:	46a1      	mov	r9, r4
				if (a <= CurLayerProg.maxidle+LAYER_OFFSET) break;
200021a0:	4c44      	ldr	r4, [pc, #272]	; (200022b4 <_Z13VgaBufProcessv+0x240>)
200021a2:	7b67      	ldrb	r7, [r4, #13]
200021a4:	464c      	mov	r4, r9
200021a6:	4699      	mov	r9, r3
200021a8:	0003      	movs	r3, r0
200021aa:	4650      	mov	r0, sl
200021ac:	469a      	mov	sl, r3
200021ae:	0023      	movs	r3, r4
200021b0:	e004      	b.n	200021bc <_Z13VgaBufProcessv+0x148>
200021b2:	4644      	mov	r4, r8
200021b4:	6aa4      	ldr	r4, [r4, #40]	; 0x28
			} while ((u32)(time_us_32() - t1) < (u32)10); // wait max. 10 us, low resolution can take long time
200021b6:	1a24      	subs	r4, r4, r0
200021b8:	2c09      	cmp	r4, #9
200021ba:	d804      	bhi.n	200021c6 <_Z13VgaBufProcessv+0x152>
				if (a <= CurLayerProg.maxidle+LAYER_OFFSET) break;
200021bc:	261f      	movs	r6, #31
				u8 a = *(volatile u8*)&VGA_PIO->sm[sm].addr & 0x1f;
200021be:	781c      	ldrb	r4, [r3, #0]
				if (a <= CurLayerProg.maxidle+LAYER_OFFSET) break;
200021c0:	4034      	ands	r4, r6
200021c2:	42a7      	cmp	r7, r4
200021c4:	d3f5      	bcc.n	200021b2 <_Z13VgaBufProcessv+0x13e>
200021c6:	464b      	mov	r3, r9
200021c8:	2701      	movs	r7, #1
200021ca:	005c      	lsls	r4, r3, #1
200021cc:	4650      	mov	r0, sl
			dma_channel_abort(VGA_DMA_PIO(layer));
200021ce:	46a2      	mov	sl, r4
200021d0:	3401      	adds	r4, #1
200021d2:	40a7      	lsls	r7, r4
200021d4:	508f      	str	r7, [r1, r2]
    while (dma_hw->abort & (1ul << channel)) tight_loop_contents();
200021d6:	588c      	ldr	r4, [r1, r2]
200021d8:	423c      	tst	r4, r7
200021da:	d1fc      	bne.n	200021d6 <_Z13VgaBufProcessv+0x162>
    dma_hw->abort = 1u << channel;
200021dc:	2401      	movs	r4, #1
200021de:	4656      	mov	r6, sl
200021e0:	40b4      	lsls	r4, r6
200021e2:	4699      	mov	r9, r3
200021e4:	508c      	str	r4, [r1, r2]
    while (dma_hw->abort & (1ul << channel)) tight_loop_contents();
200021e6:	588b      	ldr	r3, [r1, r2]
200021e8:	4223      	tst	r3, r4
200021ea:	d1fc      	bne.n	200021e6 <_Z13VgaBufProcessv+0x172>
    dma_hw->abort = 1u << channel;
200021ec:	003b      	movs	r3, r7
200021ee:	508f      	str	r7, [r1, r2]
    while (dma_hw->abort & (1ul << channel)) tight_loop_contents();
200021f0:	588f      	ldr	r7, [r1, r2]
200021f2:	423b      	tst	r3, r7
200021f4:	d1fc      	bne.n	200021f0 <_Z13VgaBufProcessv+0x17c>
    dma_hw->abort = 1u << channel;
200021f6:	464b      	mov	r3, r9
200021f8:	508c      	str	r4, [r1, r2]
    while (dma_hw->abort & (1ul << channel)) tight_loop_contents();
200021fa:	588f      	ldr	r7, [r1, r2]
200021fc:	423c      	tst	r4, r7
200021fe:	d1fc      	bne.n	200021fa <_Z13VgaBufProcessv+0x186>
20002200:	2701      	movs	r7, #1
20002202:	4664      	mov	r4, ip
20002204:	409f      	lsls	r7, r3
20002206:	4666      	mov	r6, ip
20002208:	6824      	ldr	r4, [r4, #0]
    pio->sm[sm].instr = instr;
2000220a:	449a      	add	sl, r3
    pio->ctrl = (pio->ctrl & ~(1u << sm)) | (!!enabled << sm);
2000220c:	43bc      	bics	r4, r7
2000220e:	6034      	str	r4, [r6, #0]
20002210:	2480      	movs	r4, #128	; 0x80
20002212:	2680      	movs	r6, #128	; 0x80
20002214:	0164      	lsls	r4, r4, #5
20002216:	432c      	orrs	r4, r5
20002218:	0636      	lsls	r6, r6, #24
2000221a:	6026      	str	r6, [r4, #0]
2000221c:	6026      	str	r6, [r4, #0]
    pio->ctrl |= 1u << (PIO_CTRL_SM_RESTART_LSB + sm);
2000221e:	4664      	mov	r4, ip
20002220:	2601      	movs	r6, #1
20002222:	6824      	ldr	r4, [r4, #0]
20002224:	46a1      	mov	r9, r4
20002226:	1d1c      	adds	r4, r3, #4
20002228:	40a6      	lsls	r6, r4
2000222a:	0034      	movs	r4, r6
2000222c:	464e      	mov	r6, r9
2000222e:	4334      	orrs	r4, r6
20002230:	4666      	mov	r6, ip
20002232:	6034      	str	r4, [r6, #0]
20002234:	261f      	movs	r6, #31
20002236:	4c1f      	ldr	r4, [pc, #124]	; (200022b4 <_Z13VgaBufProcessv+0x240>)
20002238:	7ae4      	ldrb	r4, [r4, #11]
2000223a:	4034      	ands	r4, r6
2000223c:	0026      	movs	r6, r4
    pio->sm[sm].instr = instr;
2000223e:	4654      	mov	r4, sl
20002240:	00e4      	lsls	r4, r4, #3
20002242:	46a2      	mov	sl, r4
20002244:	4c1c      	ldr	r4, [pc, #112]	; (200022b8 <_Z13VgaBufProcessv+0x244>)
20002246:	46a1      	mov	r9, r4
20002248:	44ca      	add	sl, r9
2000224a:	4654      	mov	r4, sl
2000224c:	6026      	str	r6, [r4, #0]
    pio->ctrl = (pio->ctrl & ~(1u << sm)) | (!!enabled << sm);
2000224e:	4664      	mov	r4, ip
20002250:	6824      	ldr	r4, [r4, #0]
20002252:	261f      	movs	r6, #31
20002254:	43bc      	bics	r4, r7
20002256:	4327      	orrs	r7, r4
20002258:	4664      	mov	r4, ip
2000225a:	6027      	str	r7, [r4, #0]
2000225c:	4c15      	ldr	r4, [pc, #84]	; (200022b4 <_Z13VgaBufProcessv+0x240>)
2000225e:	7b24      	ldrb	r4, [r4, #12]
20002260:	4034      	ands	r4, r6
    pio->sm[sm].instr = instr;
20002262:	4656      	mov	r6, sl
20002264:	6034      	str	r4, [r6, #0]
    return &dma_hw->ch[channel];
20002266:	26a0      	movs	r6, #160	; 0xa0
20002268:	05f6      	lsls	r6, r6, #23
2000226a:	46b1      	mov	r9, r6
2000226c:	01dc      	lsls	r4, r3, #7
        dma_channel_hw_addr(channel)->al3_read_addr_trig = (uintptr_t) read_addr;
2000226e:	9e01      	ldr	r6, [sp, #4]
20002270:	444c      	add	r4, r9
20002272:	63e6      	str	r6, [r4, #60]	; 0x3c
20002274:	e75d      	b.n	20002132 <_Z13VgaBufProcessv+0xbe>
20002276:	46c0      	nop			; (mov r8, r8)
20002278:	0000040c 	.word	0x0000040c
2000227c:	2000a394 	.word	0x2000a394
20002280:	2000bb38 	.word	0x2000bb38
20002284:	2000ba8c 	.word	0x2000ba8c
20002288:	2000ed6c 	.word	0x2000ed6c
2000228c:	2000badc 	.word	0x2000badc
20002290:	2000cb48 	.word	0x2000cb48
20002294:	2000ed70 	.word	0x2000ed70
20002298:	10188060 	.word	0x10188060
2000229c:	2001732e 	.word	0x2001732e
200022a0:	50200000 	.word	0x50200000
200022a4:	40054000 	.word	0x40054000
200022a8:	2000cb8c 	.word	0x2000cb8c
200022ac:	502000e8 	.word	0x502000e8
200022b0:	00000444 	.word	0x00000444
200022b4:	2000baa8 	.word	0x2000baa8
200022b8:	502000d8 	.word	0x502000d8

200022bc <_Z12VgaBufRenderPmS_Phi>:
{
200022bc:	b5f0      	push	{r4, r5, r6, r7, lr}
200022be:	46de      	mov	lr, fp
200022c0:	4657      	mov	r7, sl
200022c2:	464e      	mov	r6, r9
200022c4:	4645      	mov	r5, r8
200022c6:	4699      	mov	r9, r3
	*cbuf++ = 4; // send 4x u32
200022c8:	2304      	movs	r3, #4
{
200022ca:	0004      	movs	r4, r0
200022cc:	4693      	mov	fp, r2
200022ce:	b5e0      	push	{r5, r6, r7, lr}
	*cbuf++ = 4; // send 4x u32
200022d0:	6003      	str	r3, [r0, #0]
	*cbuf++ = (u32)LineBufHsBp; // HSYNC + back porch
200022d2:	4b8b      	ldr	r3, [pc, #556]	; (20002500 <_Z12VgaBufRenderPmS_Phi+0x244>)
{
200022d4:	000e      	movs	r6, r1
	*cbuf++ = (u32)LineBufHsBp; // HSYNC + back porch
200022d6:	6063      	str	r3, [r4, #4]
	cbuf = Render(cbuf, dbuf, y0, CurVmode.width);
200022d8:	4b8a      	ldr	r3, [pc, #552]	; (20002504 <_Z12VgaBufRenderPmS_Phi+0x248>)
200022da:	464a      	mov	r2, r9
200022dc:	881b      	ldrh	r3, [r3, #0]
{
200022de:	b085      	sub	sp, #20
	cbuf = Render(cbuf, dbuf, y0, CurVmode.width);
200022e0:	4659      	mov	r1, fp
	*cbuf++ = (u32)LineBufHsBp; // HSYNC + back porch
200022e2:	3008      	adds	r0, #8
	cbuf = Render(cbuf, dbuf, y0, CurVmode.width);
200022e4:	f7ff fcea 	bl	20001cbc <Render>
	*cbuf++ = 1; // send 1x u32
200022e8:	2301      	movs	r3, #1
200022ea:	6003      	str	r3, [r0, #0]
	*cbuf++ = (u32)&LineBufFp; // front porch
200022ec:	3307      	adds	r3, #7
200022ee:	469c      	mov	ip, r3
200022f0:	4484      	add	ip, r0
200022f2:	4663      	mov	r3, ip
200022f4:	9300      	str	r3, [sp, #0]
200022f6:	4b84      	ldr	r3, [pc, #528]	; (20002508 <_Z12VgaBufRenderPmS_Phi+0x24c>)
200022f8:	4c84      	ldr	r4, [pc, #528]	; (2000250c <_Z12VgaBufRenderPmS_Phi+0x250>)
200022fa:	6043      	str	r3, [r0, #4]
	for (layer = 1; layer < LAYERS; layer++)
200022fc:	4b84      	ldr	r3, [pc, #528]	; (20002510 <_Z12VgaBufRenderPmS_Phi+0x254>)
200022fe:	4f85      	ldr	r7, [pc, #532]	; (20002514 <_Z12VgaBufRenderPmS_Phi+0x258>)
20002300:	4698      	mov	r8, r3
20002302:	4b85      	ldr	r3, [pc, #532]	; (20002518 <_Z12VgaBufRenderPmS_Phi+0x25c>)
20002304:	4d85      	ldr	r5, [pc, #532]	; (2000251c <_Z12VgaBufRenderPmS_Phi+0x260>)
20002306:	469a      	mov	sl, r3
		switch(mode)
20002308:	464b      	mov	r3, r9
2000230a:	46b1      	mov	r9, r6
2000230c:	4656      	mov	r6, sl
2000230e:	469a      	mov	sl, r3
		cbuf0 += CtrlBufSize[layer-1];
20002310:	6823      	ldr	r3, [r4, #0]
20002312:	009b      	lsls	r3, r3, #2
20002314:	4499      	add	r9, r3
		dbuf += LineBufSize[layer-1];
20002316:	4643      	mov	r3, r8
20002318:	681b      	ldr	r3, [r3, #0]
2000231a:	469c      	mov	ip, r3
		CtrlBufNext[layer] = NULL;
2000231c:	2300      	movs	r3, #0
2000231e:	607b      	str	r3, [r7, #4]
		int mode = LayerModeInx[layer];
20002320:	7873      	ldrb	r3, [r6, #1]
		dbuf += LineBufSize[layer-1];
20002322:	44e3      	add	fp, ip
		if (mode == LAYERMODE_BASE) continue;
20002324:	2b00      	cmp	r3, #0
20002326:	d038      	beq.n	2000239a <_Z12VgaBufRenderPmS_Phi+0xde>
		if (!s->on || (s->w <= 0) || (y0 < s->y) || (y0 >= s->y + s->h)) continue;
20002328:	2222      	movs	r2, #34	; 0x22
2000232a:	5caa      	ldrb	r2, [r5, r2]
2000232c:	2a00      	cmp	r2, #0
2000232e:	d034      	beq.n	2000239a <_Z12VgaBufRenderPmS_Phi+0xde>
20002330:	8aea      	ldrh	r2, [r5, #22]
20002332:	2a00      	cmp	r2, #0
20002334:	d031      	beq.n	2000239a <_Z12VgaBufRenderPmS_Phi+0xde>
20002336:	2114      	movs	r1, #20
20002338:	5e6a      	ldrsh	r2, [r5, r1]
2000233a:	4552      	cmp	r2, sl
2000233c:	dc2d      	bgt.n	2000239a <_Z12VgaBufRenderPmS_Phi+0xde>
2000233e:	8b29      	ldrh	r1, [r5, #24]
20002340:	1889      	adds	r1, r1, r2
20002342:	4551      	cmp	r1, sl
20002344:	dd29      	ble.n	2000239a <_Z12VgaBufRenderPmS_Phi+0xde>
		int y = y0 - s->y;
20002346:	4651      	mov	r1, sl
20002348:	1a8a      	subs	r2, r1, r2
2000234a:	9203      	str	r2, [sp, #12]
		CtrlBufNext[layer] = cbuf2;
2000234c:	464a      	mov	r2, r9
		*cbuf2++ = 1;
2000234e:	4649      	mov	r1, r9
		CtrlBufNext[layer] = cbuf2;
20002350:	607a      	str	r2, [r7, #4]
		*cbuf2++ = 1;
20002352:	2201      	movs	r2, #1
20002354:	600a      	str	r2, [r1, #0]
		*cbuf2++ = (u32)dbuf2;
20002356:	4659      	mov	r1, fp
20002358:	464a      	mov	r2, r9
2000235a:	6051      	str	r1, [r2, #4]
		*(u32*)dbuf2 = BYTESWAP(s->init);
2000235c:	68aa      	ldr	r2, [r5, #8]
		switch(mode)
2000235e:	3b06      	subs	r3, #6
20002360:	ba12      	rev	r2, r2
		*(u32*)dbuf2 = BYTESWAP(s->init);
20002362:	c104      	stmia	r1!, {r2}
		switch(mode)
20002364:	b2db      	uxtb	r3, r3
		*(u32*)dbuf2 = BYTESWAP(s->init);
20002366:	9101      	str	r1, [sp, #4]
		switch(mode)
20002368:	2b0c      	cmp	r3, #12
2000236a:	d900      	bls.n	2000236e <_Z12VgaBufRenderPmS_Phi+0xb2>
2000236c:	e094      	b.n	20002498 <_Z12VgaBufRenderPmS_Phi+0x1dc>
2000236e:	4a6c      	ldr	r2, [pc, #432]	; (20002520 <_Z12VgaBufRenderPmS_Phi+0x264>)
20002370:	009b      	lsls	r3, r3, #2
20002372:	58d3      	ldr	r3, [r2, r3]
20002374:	469f      	mov	pc, r3
				MemSet4((u32*)dbuf2, s->keycol, s->w/4);
20002376:	8aea      	ldrh	r2, [r5, #22]
20002378:	68e9      	ldr	r1, [r5, #12]
2000237a:	0892      	lsrs	r2, r2, #2
2000237c:	9801      	ldr	r0, [sp, #4]
2000237e:	f7fd ffc7 	bl	20000310 <MemSet4>
				cbuf2 = RenderFastSprite(cbuf2, y, s, dbuf2);
20002382:	4648      	mov	r0, r9
20002384:	002a      	movs	r2, r5
20002386:	9b01      	ldr	r3, [sp, #4]
20002388:	9903      	ldr	r1, [sp, #12]
2000238a:	3008      	adds	r0, #8
2000238c:	f7fe f938 	bl	20000600 <RenderFastSprite>
20002390:	9002      	str	r0, [sp, #8]
		*cbuf2++ = 0; // end mark
20002392:	2200      	movs	r2, #0
20002394:	9b02      	ldr	r3, [sp, #8]
20002396:	601a      	str	r2, [r3, #0]
		*cbuf2++ = 0; // end mark
20002398:	605a      	str	r2, [r3, #4]
	for (layer = 1; layer < LAYERS; layer++)
2000239a:	2304      	movs	r3, #4
2000239c:	469c      	mov	ip, r3
2000239e:	4b61      	ldr	r3, [pc, #388]	; (20002524 <_Z12VgaBufRenderPmS_Phi+0x268>)
200023a0:	3404      	adds	r4, #4
200023a2:	44e0      	add	r8, ip
200023a4:	3704      	adds	r7, #4
200023a6:	3601      	adds	r6, #1
200023a8:	3524      	adds	r5, #36	; 0x24
200023aa:	42a3      	cmp	r3, r4
200023ac:	d1b0      	bne.n	20002310 <_Z12VgaBufRenderPmS_Phi+0x54>
}
200023ae:	9800      	ldr	r0, [sp, #0]
200023b0:	b005      	add	sp, #20
200023b2:	bcf0      	pop	{r4, r5, r6, r7}
200023b4:	46bb      	mov	fp, r7
200023b6:	46b2      	mov	sl, r6
200023b8:	46a9      	mov	r9, r5
200023ba:	46a0      	mov	r8, r4
200023bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
				int x = s->x; // destination coordinate X
200023be:	2112      	movs	r1, #18
200023c0:	5e6b      	ldrsh	r3, [r5, r1]
				int w = s->w; // destination width
200023c2:	8aea      	ldrh	r2, [r5, #22]
				if (x < 0)
200023c4:	2b00      	cmp	r3, #0
200023c6:	da00      	bge.n	200023ca <_Z12VgaBufRenderPmS_Phi+0x10e>
200023c8:	e07d      	b.n	200024c6 <_Z12VgaBufRenderPmS_Phi+0x20a>
					if (x + w > CurVmode.width)
200023ca:	494e      	ldr	r1, [pc, #312]	; (20002504 <_Z12VgaBufRenderPmS_Phi+0x248>)
200023cc:	18d0      	adds	r0, r2, r3
200023ce:	8809      	ldrh	r1, [r1, #0]
200023d0:	468c      	mov	ip, r1
					x = 0;
200023d2:	2100      	movs	r1, #0
					if (x + w > CurVmode.width)
200023d4:	4560      	cmp	r0, ip
200023d6:	dd01      	ble.n	200023dc <_Z12VgaBufRenderPmS_Phi+0x120>
						w = CurVmode.width - x; // limit W
200023d8:	4662      	mov	r2, ip
200023da:	1ad2      	subs	r2, r2, r3
				w = ALIGN4(w);
200023dc:	2303      	movs	r3, #3
200023de:	0010      	movs	r0, r2
200023e0:	4398      	bics	r0, r3
				if (w <= 0)
200023e2:	2800      	cmp	r0, #0
200023e4:	dd36      	ble.n	20002454 <_Z12VgaBufRenderPmS_Phi+0x198>
					*cbuf2++ = w/4;
200023e6:	464b      	mov	r3, r9
200023e8:	1092      	asrs	r2, r2, #2
200023ea:	609a      	str	r2, [r3, #8]
					*cbuf2++ = (u32)&dbuf2[x];
200023ec:	2310      	movs	r3, #16
200023ee:	9801      	ldr	r0, [sp, #4]
200023f0:	444b      	add	r3, r9
200023f2:	4684      	mov	ip, r0
200023f4:	9302      	str	r3, [sp, #8]
200023f6:	464b      	mov	r3, r9
200023f8:	4461      	add	r1, ip
200023fa:	60d9      	str	r1, [r3, #12]
					RenderPersp(dbuf2, y, s);
200023fc:	002a      	movs	r2, r5
200023fe:	9903      	ldr	r1, [sp, #12]
20002400:	f7fe fe66 	bl	200010d0 <RenderPersp>
20002404:	e7c5      	b.n	20002392 <_Z12VgaBufRenderPmS_Phi+0xd6>
				*cbuf2++ = s->trans;
20002406:	464a      	mov	r2, r9
20002408:	8a2b      	ldrh	r3, [r5, #16]
2000240a:	6093      	str	r3, [r2, #8]
				*cbuf2++ = (u32)dbuf2;
2000240c:	2310      	movs	r3, #16
2000240e:	444b      	add	r3, r9
20002410:	9302      	str	r3, [sp, #8]
20002412:	9b01      	ldr	r3, [sp, #4]
20002414:	60d3      	str	r3, [r2, #12]
				MemSet4((u32*)dbuf2, s->keycol, s->w/4);
20002416:	8aea      	ldrh	r2, [r5, #22]
20002418:	68e9      	ldr	r1, [r5, #12]
2000241a:	0018      	movs	r0, r3
2000241c:	0892      	lsrs	r2, r2, #2
2000241e:	f7fd ff77 	bl	20000310 <MemSet4>
				RenderSprite(dbuf2, y, s);
20002422:	002a      	movs	r2, r5
20002424:	9903      	ldr	r1, [sp, #12]
20002426:	9801      	ldr	r0, [sp, #4]
20002428:	f7fe ffdc 	bl	200013e4 <RenderSprite>
			break;
2000242c:	e7b1      	b.n	20002392 <_Z12VgaBufRenderPmS_Phi+0xd6>
				int x = s->x; // destination coordinate X
2000242e:	2112      	movs	r1, #18
20002430:	5e6b      	ldrsh	r3, [r5, r1]
				int w = s->w; // destination width
20002432:	8aea      	ldrh	r2, [r5, #22]
				if (x < 0)
20002434:	2b00      	cmp	r3, #0
20002436:	db3a      	blt.n	200024ae <_Z12VgaBufRenderPmS_Phi+0x1f2>
					if (x + w > CurVmode.width)
20002438:	4932      	ldr	r1, [pc, #200]	; (20002504 <_Z12VgaBufRenderPmS_Phi+0x248>)
2000243a:	18d0      	adds	r0, r2, r3
2000243c:	8809      	ldrh	r1, [r1, #0]
2000243e:	468c      	mov	ip, r1
					x = 0;
20002440:	2100      	movs	r1, #0
					if (x + w > CurVmode.width)
20002442:	4560      	cmp	r0, ip
20002444:	dd01      	ble.n	2000244a <_Z12VgaBufRenderPmS_Phi+0x18e>
						w = CurVmode.width - x; // limit W
20002446:	4662      	mov	r2, ip
20002448:	1ad2      	subs	r2, r2, r3
				w = ALIGN4(w);
2000244a:	2303      	movs	r3, #3
2000244c:	0010      	movs	r0, r2
2000244e:	4398      	bics	r0, r3
				if (w <= 0)
20002450:	2800      	cmp	r0, #0
20002452:	dc44      	bgt.n	200024de <_Z12VgaBufRenderPmS_Phi+0x222>
					*cbuf2++ = 1;
20002454:	2301      	movs	r3, #1
20002456:	464a      	mov	r2, r9
20002458:	6093      	str	r3, [r2, #8]
					*cbuf2++ = (u32)dbuf2;
2000245a:	330f      	adds	r3, #15
2000245c:	444b      	add	r3, r9
2000245e:	9302      	str	r3, [sp, #8]
20002460:	464b      	mov	r3, r9
20002462:	9a01      	ldr	r2, [sp, #4]
20002464:	60da      	str	r2, [r3, #12]
					*(u32*)dbuf2 = s->keycol;
20002466:	465b      	mov	r3, fp
20002468:	68ea      	ldr	r2, [r5, #12]
2000246a:	605a      	str	r2, [r3, #4]
2000246c:	e791      	b.n	20002392 <_Z12VgaBufRenderPmS_Phi+0xd6>
				int n = row[y+1] - row[y];
2000246e:	9a03      	ldr	r2, [sp, #12]
				u16* row = (u16*)s->par;
20002470:	6869      	ldr	r1, [r5, #4]
				int n = row[y+1] - row[y];
20002472:	3201      	adds	r2, #1
20002474:	0052      	lsls	r2, r2, #1
20002476:	188b      	adds	r3, r1, r2
20002478:	5a8a      	ldrh	r2, [r1, r2]
				*cbuf2++ = n;
2000247a:	4649      	mov	r1, r9
				int n = row[y+1] - row[y];
2000247c:	3b02      	subs	r3, #2
2000247e:	881b      	ldrh	r3, [r3, #0]
20002480:	1ad2      	subs	r2, r2, r3
				*cbuf2++ = n;
20002482:	608a      	str	r2, [r1, #8]
				*cbuf2++ = (u32)&s->img[row[y]*4];
20002484:	2210      	movs	r2, #16
20002486:	444a      	add	r2, r9
20002488:	9202      	str	r2, [sp, #8]
2000248a:	009b      	lsls	r3, r3, #2
				*cbuf2++ = (u32)&s->img[y*s->wb];
2000248c:	682a      	ldr	r2, [r5, #0]
2000248e:	4694      	mov	ip, r2
20002490:	464a      	mov	r2, r9
20002492:	4463      	add	r3, ip
20002494:	60d3      	str	r3, [r2, #12]
			break;
20002496:	e77c      	b.n	20002392 <_Z12VgaBufRenderPmS_Phi+0xd6>
				*cbuf2++ = s->trans;
20002498:	464a      	mov	r2, r9
2000249a:	8a2b      	ldrh	r3, [r5, #16]
2000249c:	6093      	str	r3, [r2, #8]
				*cbuf2++ = (u32)&s->img[y*s->wb];
2000249e:	2310      	movs	r3, #16
200024a0:	444b      	add	r3, r9
200024a2:	9a03      	ldr	r2, [sp, #12]
200024a4:	9302      	str	r3, [sp, #8]
200024a6:	8b6b      	ldrh	r3, [r5, #26]
200024a8:	435a      	muls	r2, r3
200024aa:	0013      	movs	r3, r2
200024ac:	e7ee      	b.n	2000248c <_Z12VgaBufRenderPmS_Phi+0x1d0>
					x = ALIGN4(x+4098) - 4096; // round X to 4-pixels
200024ae:	491e      	ldr	r1, [pc, #120]	; (20002528 <_Z12VgaBufRenderPmS_Phi+0x26c>)
200024b0:	468c      	mov	ip, r1
200024b2:	2103      	movs	r1, #3
200024b4:	4463      	add	r3, ip
200024b6:	438b      	bics	r3, r1
200024b8:	491c      	ldr	r1, [pc, #112]	; (2000252c <_Z12VgaBufRenderPmS_Phi+0x270>)
200024ba:	1859      	adds	r1, r3, r1
					w += x;	// decrease W
200024bc:	1852      	adds	r2, r2, r1
					x = -x; // start offset of X
200024be:	2180      	movs	r1, #128	; 0x80
200024c0:	0149      	lsls	r1, r1, #5
200024c2:	1ac9      	subs	r1, r1, r3
200024c4:	e7c1      	b.n	2000244a <_Z12VgaBufRenderPmS_Phi+0x18e>
					x = ALIGN4(x+4098) - 4096; // round X to 4-pixels
200024c6:	4918      	ldr	r1, [pc, #96]	; (20002528 <_Z12VgaBufRenderPmS_Phi+0x26c>)
200024c8:	468c      	mov	ip, r1
200024ca:	2103      	movs	r1, #3
200024cc:	4463      	add	r3, ip
200024ce:	438b      	bics	r3, r1
200024d0:	4916      	ldr	r1, [pc, #88]	; (2000252c <_Z12VgaBufRenderPmS_Phi+0x270>)
200024d2:	1859      	adds	r1, r3, r1
					w += x;	// decrease W
200024d4:	1852      	adds	r2, r2, r1
					x = -x; // start offset of X
200024d6:	2180      	movs	r1, #128	; 0x80
200024d8:	0149      	lsls	r1, r1, #5
200024da:	1ac9      	subs	r1, r1, r3
200024dc:	e77e      	b.n	200023dc <_Z12VgaBufRenderPmS_Phi+0x120>
					*cbuf2++ = w/4;
200024de:	464b      	mov	r3, r9
200024e0:	1092      	asrs	r2, r2, #2
200024e2:	609a      	str	r2, [r3, #8]
					*cbuf2++ = (u32)&dbuf2[x];
200024e4:	2310      	movs	r3, #16
200024e6:	9801      	ldr	r0, [sp, #4]
200024e8:	444b      	add	r3, r9
200024ea:	4684      	mov	ip, r0
200024ec:	9302      	str	r3, [sp, #8]
200024ee:	464b      	mov	r3, r9
200024f0:	4461      	add	r1, ip
200024f2:	60d9      	str	r1, [r3, #12]
					RenderPersp2(dbuf2, y, s);
200024f4:	002a      	movs	r2, r5
200024f6:	9903      	ldr	r1, [sp, #12]
200024f8:	f7fe fe74 	bl	200011e4 <RenderPersp2>
200024fc:	e749      	b.n	20002392 <_Z12VgaBufRenderPmS_Phi+0xd6>
200024fe:	46c0      	nop			; (mov r8, r8)
20002500:	2000e50c 	.word	0x2000e50c
20002504:	2000badc 	.word	0x2000badc
20002508:	2000e508 	.word	0x2000e508
2000250c:	20008600 	.word	0x20008600
20002510:	20008610 	.word	0x20008610
20002514:	2000ba8c 	.word	0x2000ba8c
20002518:	2000cb50 	.word	0x2000cb50
2000251c:	2000cb78 	.word	0x2000cb78
20002520:	10188074 	.word	0x10188074
20002524:	2000860c 	.word	0x2000860c
20002528:	00001002 	.word	0x00001002
2000252c:	fffff000 	.word	0xfffff000

20002530 <VgaLine>:
{
20002530:	b570      	push	{r4, r5, r6, lr}
	int bufinx = VgaBufProcess();
20002532:	f7ff fd9f 	bl	20002074 <_Z13VgaBufProcessv>
	if (bufinx == 0)
20002536:	2800      	cmp	r0, #0
20002538:	d013      	beq.n	20002562 <VgaLine+0x32>
		cbuf = CtrlBuf2;
2000253a:	4838      	ldr	r0, [pc, #224]	; (2000261c <VgaLine+0xec>)
		dbuf = LineBuf2;
2000253c:	4a38      	ldr	r2, [pc, #224]	; (20002620 <VgaLine+0xf0>)
	CtrlBufNext[0] = cbuf;
2000253e:	4b39      	ldr	r3, [pc, #228]	; (20002624 <VgaLine+0xf4>)
	if (line > CurVmode.vtot) line = 1;
20002540:	4d39      	ldr	r5, [pc, #228]	; (20002628 <VgaLine+0xf8>)
	CtrlBufNext[0] = cbuf;
20002542:	6018      	str	r0, [r3, #0]
	int line = ScanLine;	// current scanline
20002544:	4b39      	ldr	r3, [pc, #228]	; (2000262c <VgaLine+0xfc>)
	if (line > CurVmode.vtot) line = 1;
20002546:	8da9      	ldrh	r1, [r5, #44]	; 0x2c
	int line = ScanLine;	// current scanline
20002548:	681b      	ldr	r3, [r3, #0]
	line++; // next line to render
2000254a:	3301      	adds	r3, #1
	if (line > CurVmode.vtot) line = 1;
2000254c:	4299      	cmp	r1, r3
2000254e:	da00      	bge.n	20002552 <VgaLine+0x22>
20002550:	2301      	movs	r3, #1
	u8 linetype = ScanlineType[line];
20002552:	4937      	ldr	r1, [pc, #220]	; (20002630 <VgaLine+0x100>)
	switch (linetype)
20002554:	5ccc      	ldrb	r4, [r1, r3]
20002556:	2c0a      	cmp	r4, #10
20002558:	d85e      	bhi.n	20002618 <VgaLine+0xe8>
2000255a:	4936      	ldr	r1, [pc, #216]	; (20002634 <VgaLine+0x104>)
2000255c:	00a4      	lsls	r4, r4, #2
2000255e:	5909      	ldr	r1, [r1, r4]
20002560:	468f      	mov	pc, r1
		cbuf = CtrlBuf1;
20002562:	4835      	ldr	r0, [pc, #212]	; (20002638 <VgaLine+0x108>)
		dbuf = LineBuf1;
20002564:	4a35      	ldr	r2, [pc, #212]	; (2000263c <VgaLine+0x10c>)
20002566:	e7ea      	b.n	2000253e <VgaLine+0xe>
		y0 = line - CurVmode.vfirst1;
20002568:	2140      	movs	r1, #64	; 0x40
		y0 = line - CurVmode.vfirst2;
2000256a:	5a69      	ldrh	r1, [r5, r1]
2000256c:	1a5b      	subs	r3, r3, r1
		if (CurVmode.dbly) y0 >>= 1;
2000256e:	2155      	movs	r1, #85	; 0x55
20002570:	5c69      	ldrb	r1, [r5, r1]
20002572:	2900      	cmp	r1, #0
20002574:	d000      	beq.n	20002578 <VgaLine+0x48>
20002576:	105b      	asrs	r3, r3, #1
		y0 = (y0 << 1) + 1;
20002578:	005b      	lsls	r3, r3, #1
2000257a:	3301      	adds	r3, #1
		cbuf = VgaBufRender(cbuf, cbuf0, dbuf, y0);
2000257c:	0001      	movs	r1, r0
2000257e:	f7ff fe9d 	bl	200022bc <_Z12VgaBufRenderPmS_Phi>
20002582:	0003      	movs	r3, r0
	*cbuf++ = 0; // end mark
20002584:	2200      	movs	r2, #0
	hw_divider_restore_state(&DividerState);
20002586:	482e      	ldr	r0, [pc, #184]	; (20002640 <VgaLine+0x110>)
	*cbuf++ = 0; // end mark
20002588:	601a      	str	r2, [r3, #0]
	*cbuf++ = 0; // end mark
2000258a:	605a      	str	r2, [r3, #4]
	hw_divider_restore_state(&DividerState);
2000258c:	f000 f860 	bl	20002650 <__hw_divider_restore_state_veneer>
}
20002590:	bd70      	pop	{r4, r5, r6, pc}
		y0 = line - CurVmode.vfirst2;
20002592:	214e      	movs	r1, #78	; 0x4e
20002594:	e7e9      	b.n	2000256a <VgaLine+0x3a>
		*cbuf++ = 2; // send 2x u32
20002596:	2302      	movs	r3, #2
		*cbuf++ = 4;	// send 4x u32
20002598:	6003      	str	r3, [r0, #0]
		*cbuf++ = (u32)&LineBufSync[0]; // half + half
2000259a:	0003      	movs	r3, r0
2000259c:	4a29      	ldr	r2, [pc, #164]	; (20002644 <VgaLine+0x114>)
2000259e:	3308      	adds	r3, #8
200025a0:	6042      	str	r2, [r0, #4]
		break;
200025a2:	e7ef      	b.n	20002584 <VgaLine+0x54>
		*cbuf++ = 4;	// send 4x u32
200025a4:	2304      	movs	r3, #4
200025a6:	6003      	str	r3, [r0, #0]
		*cbuf++ = (u32)&LineBufSync[4]; // VSYNC
200025a8:	0003      	movs	r3, r0
200025aa:	4a26      	ldr	r2, [pc, #152]	; (20002644 <VgaLine+0x114>)
200025ac:	3308      	adds	r3, #8
200025ae:	3210      	adds	r2, #16
200025b0:	6042      	str	r2, [r0, #4]
		break;
200025b2:	e7e7      	b.n	20002584 <VgaLine+0x54>
		*cbuf++ = 4;	// send 4x u32
200025b4:	2304      	movs	r3, #4
200025b6:	6003      	str	r3, [r0, #0]
		*cbuf++ = (u32)&LineBufSync[6]; // VSYNC + half
200025b8:	0003      	movs	r3, r0
200025ba:	4a22      	ldr	r2, [pc, #136]	; (20002644 <VgaLine+0x114>)
200025bc:	3308      	adds	r3, #8
200025be:	3218      	adds	r2, #24
200025c0:	6042      	str	r2, [r0, #4]
		break;
200025c2:	e7df      	b.n	20002584 <VgaLine+0x54>
		*cbuf++ = 4;	// send 4x u32
200025c4:	2304      	movs	r3, #4
200025c6:	e7e7      	b.n	20002598 <VgaLine+0x68>
		*cbuf++ = 4;	// send 4x u32
200025c8:	2304      	movs	r3, #4
200025ca:	6003      	str	r3, [r0, #0]
		*cbuf++ = (u32)&LineBufSync[2]; // half + VSYNC
200025cc:	0003      	movs	r3, r0
200025ce:	4a1d      	ldr	r2, [pc, #116]	; (20002644 <VgaLine+0x114>)
200025d0:	3308      	adds	r3, #8
200025d2:	3208      	adds	r2, #8
200025d4:	6042      	str	r2, [r0, #4]
		break;
200025d6:	e7d5      	b.n	20002584 <VgaLine+0x54>
		*cbuf++ = 2; // send 2x u32
200025d8:	2302      	movs	r3, #2
200025da:	6003      	str	r3, [r0, #0]
		*cbuf++ = (u32)LineBufDark; // dark
200025dc:	0003      	movs	r3, r0
200025de:	4a1a      	ldr	r2, [pc, #104]	; (20002648 <VgaLine+0x118>)
200025e0:	3308      	adds	r3, #8
200025e2:	6042      	str	r2, [r0, #4]
		break;
200025e4:	e7ce      	b.n	20002584 <VgaLine+0x54>
		y0 = line - CurVmode.vfirst1;
200025e6:	2140      	movs	r1, #64	; 0x40
200025e8:	5a69      	ldrh	r1, [r5, r1]
200025ea:	1a5b      	subs	r3, r3, r1
		if (CurVmode.dbly) y0 >>= 1;
200025ec:	2155      	movs	r1, #85	; 0x55
200025ee:	5c69      	ldrb	r1, [r5, r1]
200025f0:	2900      	cmp	r1, #0
200025f2:	d0c3      	beq.n	2000257c <VgaLine+0x4c>
200025f4:	105b      	asrs	r3, r3, #1
		cbuf = VgaBufRender(cbuf, cbuf0, dbuf, y0);
200025f6:	e7c1      	b.n	2000257c <VgaLine+0x4c>
		y0 = line - CurVmode.vfirst1;
200025f8:	2140      	movs	r1, #64	; 0x40
		y0 = line - CurVmode.vfirst2;
200025fa:	5a69      	ldrh	r1, [r5, r1]
200025fc:	1a5b      	subs	r3, r3, r1
		if (CurVmode.dbly) y0 >>= 1;
200025fe:	2155      	movs	r1, #85	; 0x55
20002600:	5c69      	ldrb	r1, [r5, r1]
20002602:	2900      	cmp	r1, #0
20002604:	d000      	beq.n	20002608 <VgaLine+0xd8>
20002606:	105b      	asrs	r3, r3, #1
		y0 <<= 1;
20002608:	005b      	lsls	r3, r3, #1
		cbuf = VgaBufRender(cbuf, cbuf0, dbuf, y0);
2000260a:	0001      	movs	r1, r0
2000260c:	f7ff fe56 	bl	200022bc <_Z12VgaBufRenderPmS_Phi>
20002610:	0003      	movs	r3, r0
		break;
20002612:	e7b7      	b.n	20002584 <VgaLine+0x54>
		y0 = line - CurVmode.vfirst2;
20002614:	214e      	movs	r1, #78	; 0x4e
20002616:	e7f0      	b.n	200025fa <VgaLine+0xca>
	switch (linetype)
20002618:	0003      	movs	r3, r0
2000261a:	e7b3      	b.n	20002584 <VgaLine+0x54>
2000261c:	2000af2c 	.word	0x2000af2c
20002620:	2000d9e0 	.word	0x2000d9e0
20002624:	2000ba8c 	.word	0x2000ba8c
20002628:	2000badc 	.word	0x2000badc
2000262c:	2000ed6c 	.word	0x2000ed6c
20002630:	2000ed70 	.word	0x2000ed70
20002634:	101880a8 	.word	0x101880a8
20002638:	2000a3cc 	.word	0x2000a3cc
2000263c:	2000cec0 	.word	0x2000cec0
20002640:	2000bb38 	.word	0x2000bb38
20002644:	2000e51c 	.word	0x2000e51c
20002648:	2000e500 	.word	0x2000e500

2000264c <__aeabi_idiv0>:
2000264c:	4770      	bx	lr
2000264e:	46c0      	nop			; (mov r8, r8)

20002650 <__hw_divider_restore_state_veneer>:
20002650:	b401      	push	{r0}
20002652:	4802      	ldr	r0, [pc, #8]	; (2000265c <__hw_divider_restore_state_veneer+0xc>)
20002654:	4684      	mov	ip, r0
20002656:	bc01      	pop	{r0}
20002658:	4760      	bx	ip
2000265a:	bf00      	nop
2000265c:	10000815 	.word	0x10000815

20002660 <__best_effort_wfe_or_timeout_veneer>:
20002660:	b401      	push	{r0}
20002662:	4802      	ldr	r0, [pc, #8]	; (2000266c <__best_effort_wfe_or_timeout_veneer+0xc>)
20002664:	4684      	mov	ip, r0
20002666:	bc01      	pop	{r0}
20002668:	4760      	bx	ip
2000266a:	bf00      	nop
2000266c:	100049d9 	.word	0x100049d9

20002670 <____wrap___aeabi_lmul_veneer>:
20002670:	b401      	push	{r0}
20002672:	4802      	ldr	r0, [pc, #8]	; (2000267c <____wrap___aeabi_lmul_veneer+0xc>)
20002674:	4684      	mov	ip, r0
20002676:	bc01      	pop	{r0}
20002678:	4760      	bx	ip
2000267a:	bf00      	nop
2000267c:	10001141 	.word	0x10001141

20002680 <__time_us_64_veneer>:
20002680:	b401      	push	{r0}
20002682:	4802      	ldr	r0, [pc, #8]	; (2000268c <__time_us_64_veneer+0xc>)
20002684:	4684      	mov	ip, r0
20002686:	bc01      	pop	{r0}
20002688:	4760      	bx	ip
2000268a:	bf00      	nop
2000268c:	10004aed 	.word	0x10004aed

20002690 <__rom_func_lookup_veneer>:
20002690:	b401      	push	{r0}
20002692:	4802      	ldr	r0, [pc, #8]	; (2000269c <__rom_func_lookup_veneer+0xc>)
20002694:	4684      	mov	ip, r0
20002696:	bc01      	pop	{r0}
20002698:	4760      	bx	ip
2000269a:	bf00      	nop
2000269c:	10001175 	.word	0x10001175

200026a0 <__hw_divider_save_state_veneer>:
200026a0:	b401      	push	{r0}
200026a2:	4802      	ldr	r0, [pc, #8]	; (200026ac <__hw_divider_save_state_veneer+0xc>)
200026a4:	4684      	mov	ip, r0
200026a6:	bc01      	pop	{r0}
200026a8:	4760      	bx	ip
200026aa:	bf00      	nop
200026ac:	100007f9 	.word	0x100007f9

200026b0 <aeabi_bits_funcs>:
200026b0:	00003350 	.word	0x00003350
200026b4:	0000334c 	.word	0x0000334c
200026b8:	00003354 	.word	0x00003354
200026bc:	00003352 	.word	0x00003352

200026c0 <aeabi_bits_funcs_end>:
200026c0:	00000000 	.word	0x00000000
200026c4:	00010000 	.word	0x00010000
	...
200026d0:	00020000 	.word	0x00020000
	...
200026dc:	00030000 	.word	0x00030000
	...
200026e8:	00ff0000 	.word	0x00ff0000
200026ec:	00000000 	.word	0x00000000

200026f0 <irq_handler_chain_first_slot>:
200026f0:	b500      	push	{lr}
200026f2:	6848      	ldr	r0, [r1, #4]
200026f4:	3101      	adds	r1, #1
200026f6:	468e      	mov	lr, r1
200026f8:	4700      	bx	r0

200026fa <irq_handler_chain_remove_tail>:
200026fa:	4670      	mov	r0, lr
200026fc:	3809      	subs	r0, #9
200026fe:	4901      	ldr	r1, [pc, #4]	; (20002704 <irq_handler_chain_remove_tail+0xa>)
20002700:	4788      	blx	r1
20002702:	bd00      	pop	{pc}
20002704:	10001b51 	.word	0x10001b51

20002708 <aeabi_mem_funcs>:
20002708:	0000534d 	.word	0x0000534d
2000270c:	0000434d 	.word	0x0000434d
20002710:	00003453 	.word	0x00003453
20002714:	00003443 	.word	0x00003443

20002718 <stdio_usb>:
20002718:	10003f59 00000000 10003ef1 00000000     Y?.......>......
20002728:	00000100                                ....

2000272c <striped_spin_lock_num>:
2000272c:	00000010                                ....

20002730 <_usbd_qdef>:
20002730:	20016a24 000c0010 00000000 00000000     $j. ............
	...

20002750 <ep_dir_string>:
20002750:	1000b54c 1000b550                       L...P...

20002758 <CurTileSize>:
20002758:	ffffffff                                ....

2000275c <Author>:
2000275c:	1000bbb4 1003f178 00000000 1000bbc8     ....x...........
2000276c:	10154f3c 00000000 1000bbd8 100aec2c     <O..........,...
2000277c:	00000000 1000bbe8 1014f438 00000000     ........8.......
2000278c:	1000bbfc 10076418 00000000 1000bc10     .....d..........
2000279c:	10050eec 00000000 1000bc24 101696e4     ........$.......
200027ac:	00000000 1000bc34 1009a36c 00000000     ....4...l.......
200027bc:	1000bc44 10157688 00000000 1000bc5c     D....v......\...
200027cc:	10171690 00000000 1000bc6c 10152358     ........l...X#..
200027dc:	00000000 1000bc7c 10034460 00000000     ....|...`D......
200027ec:	1000bc8c 10043d54 00000000              ....T=......

200027f8 <IntroLevel>:
200027f8:	1000bc9c 1000bda4                       ........

20002800 <RabbitCol1>:
20002800:	1002389c 1002397c 10023a00 10023a98     .8..|9...:...:..
20002810:	10023c00 10023cb8 10023d74 10023e90     .<...<..t=...>..
20002820:	10024080 1002416c 10024250 100242e0     .@..lA..PB...B..
20002830:	100243a4 10024450 100244e8 100245fc     .C..PD...D...E..
20002840:	10024758 10024858 1002498c 10024ad0     XG..XH...I...J..
20002850:	10024d84 10024eb4 1002511c 10025208     .M...N...Q...R..
20002860:	100253a0 100254a8 10025668 1002579c     .S...T..hV...W..
20002870:	10025a18 10025b3c 10025cd4 10025db8     .Z..<[...\...]..
20002880:	10025f90 10026080 100261dc 100262e4     ._...`...a...b..
20002890:	10026478 100265bc 10026748 1002688c     xd...e..Hg...h..
200028a0:	10026d0c 10026e00 10026f40 10027084     .m...n..@o...p..
200028b0:	10027300 1002741c 1002773c 10027880     .s...t..<w...x..
200028c0:	10027b70 10027cb4 10027ff4 100280b8     p{...|..........
200028d0:	10028244 1002834c 100286e0 100287f0     D...L...........
200028e0:	10028a10 10028b18 10028cb0 10028dcc     ................
200028f0:	100290f0 10029224 10029404 100294d8     ....$...........
20002900:	100295d8 1002969c 1002983c 10029920     ........<... ...
20002910:	10029a78 10029bbc 10029e48 10029f8c     x.......H.......
20002920:	1002a320 1002a450 1002a644 1002a6cc      ...P...D.......
20002930:	1002a778 1002a8bc 1002acc4 1002ade8     x...............
20002940:	1002b144 1002b274 1002b39c 1002b494     D...t...........
20002950:	1002b654 1002b734 1002b8b8 1002b9e8     T...4...........
20002960:	1002bb28 1002bc18 1002be60 1002bf54     (.......`...T...
20002970:	1002c138 1002c20c 1002c384 1002c468     8...........h...
20002980:	1002c58c 1002c68c 1002c7bc 1002c900     ................
20002990:	1002cb8c 1002cc44 1002cd2c 1002ce84     ....D...,.......
200029a0:	1002d248 1002d348 1002d4b4 1002d5b4     H...H...........
200029b0:	1002d714 1002d814 1002d90c 1002da0c     ................
200029c0:	1002db84 1002dc84 1002ddd4 1002ded4     ................
200029d0:	1002e034 1002e134 1002e2f0 1002e3f0     4...4...........
200029e0:	1002e4e8 1002e5e8 1002e808 1002e908     ................
200029f0:	1002ea6c 1002eb6c 1002ee88 1002ef88     l...l...........
20002a00:	1002f208 1002f308 1002f4a0 1002f5a0     ................
20002a10:	1002f850 1002f950 1002fb98 1002fc98     P...P...........
20002a20:	1002ffb4 100300b4 100303f0 100304f0     ................
20002a30:	10030744 10030844 10030aa8 10030ba8     D...D...........
20002a40:	10030d6c 10030e6c 1003115c 1003125c     l...l...\...\...
20002a50:	10031424 10031524 1003179c 1003189c     $...$...........
20002a60:	10031a4c 10031b88 10031fcc 100320c0     L............ ..
20002a70:	1003217c 10032270 10032374 1003247c     |!..p"..t#..|$..
20002a80:	100325b0 100326b8 100327b8 100328a4     .%...&...'...(..
20002a90:	10032980 10032a6c 10032b60 10032c30     .)..l*..`+..0,..
20002aa0:	10032d04 10032e58 10033138 100331f0     .-..X...81...1..
20002ab0:	100332f4 100333e4 100335ec 10033710     .2...3...5...7..
20002ac0:	10033940 10033aa8 10033d74 10033ec8     @9...:..t=...>..
20002ad0:	10034248 1003430c                       HB...C..

20002ad8 <RabbitCol2>:
20002ad8:	100161a4 10016200 1001624c 100162b0     .a...b..Lb...b..
20002ae8:	100162e0 1001631c 10016338 10016384     .b...c..8c...c..
20002af8:	100163b4 10016404 1001645c 100164fc     .c...d..\d...d..
20002b08:	1001656c 100165c8 10016614 10016664     le...e...f..df..
20002b18:	10016688 100166f8 1001678c 100167cc     .f...f...g...g..
20002b28:	100167f0 10016840 10016870 10016958     .g..@h..ph..Xi..
20002b38:	100169dc 10016a1c 10016a3c 10016afc     .i...j..<j...j..
20002b48:	10016bac 10016bf8 10016c30 10016d44     .k...k..0l..Dm..
20002b58:	10016f5c 10016fc0 10017018 1001707c     \o...o...p..|p..
20002b68:	100170d0 10017118 10017158 10017198     .p...q..Xq...q..
20002b78:	100171d0 1001722c 100172ac 1001738c     .q..,r...r...s..
20002b88:	100174a4 100174e8 10017520 100175f0     .t...t.. u...u..
20002b98:	100176a4 10017708 10017784 10017870     .v...w...w..px..
20002ba8:	10017994 100179f0 10017a24 10017a80     .y...y..$z...z..
20002bb8:	10017ac8 10017b50 10017c00 10017d30     .z..P{...|..0}..
20002bc8:	10017f40 10017fd8 10018140 10018204     @.......@.......
20002bd8:	1001835c 10018414 100184d4 10018568     \...........h...
20002be8:	10018630 100186c0 1001877c 1001885c     0.......|...\...
20002bf8:	100189fc 10018aec 10018c90 10018d54     ............T...
20002c08:	10018ef4 1001903c 10019190 10019228     ....<.......(...
20002c18:	10019298 1001937c 100194d4 100195b8     ....|...........
20002c28:	100197e0 100198e8 10019c38 10019d0c     ........8.......
20002c38:	10019e0c 10019f54 1001a138 1001a214     ....T...8.......
20002c48:	1001a328 1001a414 1001a578 1001a6ac     (.......x.......
20002c58:	1001a88c 1001a908 1001a978 1001aa3c     ........x...<...
20002c68:	1001abc8 1001acb4 1001ae74 1001af9c     ........t.......
20002c78:	1001b140 1001b1bc 1001b228 1001b31c     @.......(.......
20002c88:	1001b464 1001b5b8 1001b794 1001b910     d...............
20002c98:	1001bc80 1001bda0 1001bed0 1001bfdc     ................
20002ca8:	1001c1d0 1001c2d0 1001c438 1001c51c     ........8.......
20002cb8:	1001c664 1001c798 1001c998 1001ca60     d...........`...
20002cc8:	1001cc6c 1001cd80 1001d048 1001d138     l.......H...8...
20002cd8:	1001d294 1001d3c4 1001d62c 1001d72c     ........,...,...
20002ce8:	1001d85c 1001d8f8 1001da38 1001db24     \.......8...$...
20002cf8:	1001dc5c 1001dd98 1001ded0 1001df94     \...............
20002d08:	1001e090 1001e17c 1001e320 1001e454     ....|... ...T...
20002d18:	1001e6d0 1001e7e4 1001eb18 1001eb94     ................
20002d28:	1001ec0c 1001ed50 1001eee8 1001f040     ....P.......@...
20002d38:	1001f070 1001f0d4 1001f144 1001f228     p.......D...(...
20002d48:	1001f400 1001f4f0 1001f738 1001f86c     ........8...l...
20002d58:	1001fa54 1001fb54 1001fd0c 1001fd94     T...T...........
20002d68:	1001fe40 1001ff54 10020148 100201c4     @...T...H.......
20002d78:	1002024c 10020380 100204c8 10020568     L...........h...
20002d88:	10020628 10020758 10020898 10020928     (...X.......(...
20002d98:	100209d8 10020b00 10020c9c 10020d0c     ................
20002da8:	10020da0 10020e64 10020f98 10021058     ....d.......X...
20002db8:	1002113c 100211b8 10021240 10021338     <.......@...8...
20002dc8:	10021460 100214dc 10021568 1002162c     `.......h...,...
20002dd8:	10021750 100218a4 10021b14 10021c08     P...............
20002de8:	10021dec 10021f10 1002226c 10022340     ........l"..@#..
20002df8:	100224bc 10022568 10022654 1002277c     .$..h%..T&..|'..
20002e08:	10022af8 10022c3c 10022f60 10023068     .*..<,..`/..h0..
20002e18:	10023200 100232ac 10023378 100233e8     .2...2..x3...3..
20002e28:	100234c8 100235bc 1002380c 10023850     .4...5...8..P8..

20002e38 <RabbitCol3>:
20002e38:	1000be00 1000be54 1000be90 1000bee4     ....T...........
20002e48:	1000bf1c 1000bf58 1000bf78 1000bfd4     ....X...x.......
20002e58:	1000c004 1000c058 1000c098 1000c0fc     ....X...........
20002e68:	1000c154 1000c1a0 1000c1d8 1000c230     T...........0...
20002e78:	1000c270 1000c2f8 1000c3a0 1000c464     p...........d...
20002e88:	1000c598 1000c5ec 1000c630 1000c694     ........0.......
20002e98:	1000c6dc 1000c7f0 1000c994 1000ca74     ............t...
20002ea8:	1000cc94 1000cd58 1000ceec 1000cfec     ....X...........
20002eb8:	1000d160 1000d218 1000d338 1000d40c     `.......8.......
20002ec8:	1000d530 1000d614 1000d70c 1000d7f0     0...............
20002ed8:	1000d970 1000da2c 1000db0c 1000dbec     p...,...........
20002ee8:	1000dcf4 1000dd48 1000dd9c 1000de3c     ....H.......<...
20002ef8:	1000df70 1000dfc4 1000dff0 1000e044     p...........D...
20002f08:	1000e078 1000e0bc 1000e114 1000e160     x...........`...
20002f18:	1000e190 1000e1d8 1000e228 1000e280     ........(.......
20002f28:	1000e2bc 1000e2f0 1000e314 1000e3cc     ................
20002f38:	1000e488 1000e568 1000e68c 1000e750     ....h.......P...
20002f48:	1000e860 1000e930 1000ea38 1000eafc     `...0...8.......
20002f58:	1000ed2c 1000edf0 1000efcc 1000f084     ,...............
20002f68:	1000f1d4 1000f2a8 1000f3b8 1000f488     ................
20002f78:	1000f57c 1000f640 1000f6e0 1000f7e4     |...@...........
20002f88:	1000f918 1000f9ec 1000fb74 1000fc2c     ........t...,...
20002f98:	1000fd0c 1000fdd0 1000fef0 1000ffd4     ................
20002fa8:	100100c0 1001013c 10010190 10010264     ....<.......d...
20002fb8:	100102fc 100103f0 100104e0 10010528     ............(...
20002fc8:	10010578 1001065c 10010838 100108f0     x...\...8.......
20002fd8:	100109ac 100109e8 10010a0c 10010ae0     ................
20002fe8:	10010e40 10010e94 10010ee0 10010f3c     @...........<...
20002ff8:	10010f74 10010fc0 10010ff4 1001104c     t...........L...
20003008:	100110a0 10011110 10011184 10011200     ................
20003018:	10011248 100112f4 10011364 10011438     H.......d...8...
20003028:	10011528 10011584 100115c0 1001160c     (...............
20003038:	10011630 10011684 100116b4 10011748     0...........H...
20003048:	10011784 100117d0 10011800 1001187c     ............|...
20003058:	100118e8 10011934 10011970 100119cc     ....4...p.......
20003068:	10011a20 10011a94 10011ae8 10011bdc      ...............
20003078:	10011c54 10011ca0 10011cd4 10011d30     T...........0...
20003088:	10011d78 10011dc4 10011dfc 10011ed0     x...............
20003098:	10011f70 10011fcc 10012004 10012050     p........ ..P ..
200030a8:	1001208c 100120f0 1001216c 100121f4     . ... ..l!...!..
200030b8:	100122a0 10012390 1001268c 10012760     ."...#...&..`'..
200030c8:	100128b8 10012948 10012a24 10012af8     .(..H)..$*...*..
200030d8:	10012be8 10012cc8 10012e04 10012e60     .+...,......`...
200030e8:	10012ecc 10012f4c 10012fa4 10013050     ....L/.../..P0..
200030f8:	100130f8 100131bc 100132a4 10013378     .0...1...2..x3..
20003108:	10013590 100135d4 10013614 100136e4     .5...5...6...6..
20003118:	10013898 10013908 1001395c 10013a08     .8...9..\9...:..
20003128:	10013ad0 10013b6c 10013c80 10013d38     .:..l;...<..8=..
20003138:	10013e3c 10013f30 100140cc 10014170     <>..0?...@..pA..
20003148:	100141bc 100142ac 10014320 1001439c     .A...B.. C...C..
20003158:	1001446c 10014510 10014650 10014714     lD...E..PF...G..
20003168:	10014834 100148f8 10014af8 10014bec     4H...H...J...K..
20003178:	10014e68 10014f48 10015094 10015130     hN..HO...P..0Q..
20003188:	100151d4 10015288 1001530c 100153a8     .Q...R...S...S..
20003198:	100153f4 1001543c 10015470 100154e0     .S..<T..pT...T..
200031a8:	1001552c 100155bc 1001567c 1001575c     ,U...U..|V..\W..
200031b8:	10015a2c 10015ab4 10015b2c 10015bb4     ,Z...Z..,[...[..
200031c8:	10015c38 10015c84 10015cc0 10015d0c     8\...\...\...]..
200031d8:	10015d44 10015da0 10015dec 10015e68     D]...]...]..h^..
200031e8:	10015ee8 10015f64 10015fdc 10016094     .^..d_..._...`..

200031f8 <PelouxCol1>:
200031f8:	1003d784 1003d7cc 1003d7f4 1003d83c     ............<...
20003208:	1003d878 1003d8c0 1003d904 1003d958     x...........X...
20003218:	1003d994 1003d9e8 1003da44 1003da98     ........D.......
20003228:	1003daf4 1003db48 1003db84 1003dbd8     ....H...........
20003238:	1003dc30 1003dc78 1003dcc4 1003dd0c     0...x...........
20003248:	1003dd68 1003ddb8 1003de00 1003de50     h...........P...
20003258:	1003deb4 1003df10 1003df58 1003dfb4     ........X.......
20003268:	1003e018 1003e060 1003e0a8 1003e0f0     ....`...........
20003278:	1003e154 1003e1b8 1003e1f8 1003e25c     T...........\...
20003288:	1003e2c4 1003e318 1003e35c 1003e3b0     ........\.......
20003298:	1003e418 1003e460 1003e4a4 1003e4ec     ....`...........
200032a8:	1003e548 1003e5b4 1003e604 1003e670     H...........p...
200032b8:	1003e6fc 1003e758 1003e7a0 1003e7fc     ....X...........
200032c8:	1003e874 1003e8c8 1003e924 1003e978     t.......$...x...
200032d8:	1003ea1c 1003ea70 1003eaa8 1003eafc     ....p...........
200032e8:	1003eba0 1003ebe0 1003ec20 1003ec60     ........ ...`...
200032f8:	1003ecb4 1003ecfc 1003ed54 1003ed9c     ........T.......
20003308:	1003edfc 1003ee3c 1003ee8c 1003eed4     ....<...........
20003318:	1003ef1c 1003ef64 1003efc0 1003f008     ....d...........
20003328:	1003f038 1003f08c 1003f0e4 1003f124     8...........$...

20003338 <PelouxCol2>:
20003338:	1003b748 1003b78c 1003b7bc 1003b82c     H...........,...
20003348:	1003b8d0 1003b920 1003b98c 1003b9cc     .... ...........
20003358:	1003ba2c 1003ba88 1003baf8 1003bb3c     ,...........<...
20003368:	1003bb78 1003bbbc 1003bc24 1003bc6c     x.......$...l...
20003378:	1003bcc0 1003bd14 1003bdc0 1003be18     ................
20003388:	1003be8c 1003bed8 1003bf5c 1003bfa0     ........\.......
20003398:	1003bfe4 1003c02c 1003c0b8 1003c110     ....,...........
200033a8:	1003c1a8 1003c200 1003c27c 1003c2d0     ........|.......
200033b8:	1003c344 1003c3a4 1003c44c 1003c49c     D.......L.......
200033c8:	1003c520 1003c570 1003c5e4 1003c640      ...p.......@...
200033d8:	1003c6c8 1003c71c 1003c7cc 1003c834     ............4...
200033e8:	1003c8cc 1003c90c 1003c964 1003c9c4     ........d.......
200033f8:	1003ca60 1003cab4 1003cb38 1003cba0     `.......8.......
20003408:	1003cc3c 1003cc8c 1003cd7c 1003cdc0     <.......|.......
20003418:	1003ce08 1003ce48 1003ce9c 1003cefc     ....H...........
20003428:	1003cf8c 1003cfdc 1003d044 1003d094     ........D.......
20003438:	1003d0e4 1003d134 1003d1f4 1003d238     ....4.......8...
20003448:	1003d298 1003d2d8 1003d320 1003d364     ........ ...d...
20003458:	1003d3c4 1003d418 1003d4c4 1003d51c     ................
20003468:	1003d5c4 1003d60c 1003d6a0 1003d6ec     ................

20003478 <PelouxCol3>:
20003478:	10039424 10039460 100394a8 10039508     $...`...........
20003488:	10039594 100395e0 10039664 100396c4     ........d.......
20003498:	1003976c 100397c4 10039824 10039870     l.......$...p...
200034a8:	100398f0 10039948 100399f8 10039a40     ....H.......@...
200034b8:	10039ae0 10039b38 10039bb8 10039c14     ....8...........
200034c8:	10039cc8 10039d28 10039dd8 10039e2c     ....(.......,...
200034d8:	10039e9c 10039efc 10039fb0 10039ff4     ................
200034e8:	1003a058 1003a09c 1003a0f8 1003a13c     X...........<...
200034f8:	1003a1a0 1003a1e8 1003a260 1003a2b4     ........`.......
20003508:	1003a344 1003a39c 1003a404 1003a454     D...........T...
20003518:	1003a4e0 1003a538 1003a5ac 1003a5f4     ....8...........
20003528:	1003a694 1003a6e8 1003a75c 1003a7a8     ........\.......
20003538:	1003a81c 1003a86c 1003a8f4 1003a94c     ....l.......L...
20003548:	1003aa28 1003aa88 1003abe0 1003ac38     (...........8...
20003558:	1003acc8 1003ad0c 1003ad90 1003add4     ................
20003568:	1003ae40 1003ae8c 1003af1c 1003af78     @...........x...
20003578:	1003b064 1003b0ac 1003b11c 1003b16c     d...........l...
20003588:	1003b204 1003b250 1003b308 1003b358     ....P.......X...
20003598:	1003b3dc 1003b430 1003b4e8 1003b534     ....0.......4...
200035a8:	1003b578 1003b5c8 1003b654 1003b6a0     x.......T.......

200035b8 <PelouxCol4>:
200035b8:	10037c3c 10037ca0 10037d60 10037dd0     <|...|..`}...}..
200035c8:	10037e50 10037eac 10037f60 10037fb4     P~...~..`.......
200035d8:	10038078 100380cc 1003815c 100381a8     x.......\.......
200035e8:	10038274 100382c0 10038394 100383f4     t...............
200035f8:	100384a4 100384fc 10038600 1003865c     ............\...
20003608:	1003874c 100387a8 10038850 100388a4     L.......P.......
20003618:	100389c4 10038a30 10038adc 10038b3c     ....0.......<...
20003628:	10038c48 10038c9c 10038d60 10038dac     H.......`.......
20003638:	10038e68 10038ebc 1003908c 100390dc     h...............
20003648:	10039198 100391e8 10039300 10039354     ............T...

20003658 <PelouxCol5>:
20003658:	100366f4 10036740 100367d4 10036824     .f..@g...g..$h..
20003668:	100368e0 10036944 100369c8 10036a0c     .h..Di...i...j..
20003678:	10036a70 10036ac0 10036b50 10036b94     pj...j..Pk...k..
20003688:	10036bf8 10036c44 10036cd0 10036d38     .k..Dl...l..8m..
20003698:	10036d94 10036df8 10036f28 10036f78     .m...m..(o..xo..
200036a8:	10036ffc 10037054 10037160 100371a4     .o..Tp..`q...q..
200036b8:	1003721c 10037264 100372f8 1003734c     .r..dr...r..Ls..
200036c8:	100373d8 10037430 1003751c 1003756c     .s..0t...u..lu..
200036d8:	100375bc 10037600 10037664 100376b8     .u...v..dv...v..
200036e8:	10037760 100377bc 10037874 100378c8     `w...w..tx...x..
200036f8:	100379b4 10037a08 10037acc 10037b20     .y...z...z.. {..

20003708 <PelouxCol6>:
20003708:	10035168 100351b8 10035240 100352b4     hQ...Q..@R...R..
20003718:	10035398 10035404 10035488 100354ec     .S...T...T...T..
20003728:	100355a4 10035608 100356f8 10035764     .U...V...V..dW..
20003738:	10035858 100358b4 10035954 100359b0     XX...X..TY...Y..
20003748:	10035a7c 10035ae0 10035b84 10035bf8     |Z...Z...[...[..
20003758:	10035d18 10035d64 10035e10 10035e70     .]..d]...^..p^..
20003768:	10035f5c 10035fb4 10036034 10036078     \_..._..4`..x`..
20003778:	100360e0 1003611c 10036174 100361d0     .`...a..ta...a..
20003788:	10036288 100362d8 10036368 100363b8     .b...b..hc...c..
20003798:	10036484 100364e0 100365e0 10036638     .d...d...e..8f..

200037a8 <PelouxCol7>:
200037a8:	100344dc 10034524 100345a0 100345ec     .D..$E...E...E..
200037b8:	10034648 10034690 1003470c 10034784     HF...F...G...G..
200037c8:	10034884 10034900 100349e4 10034a34     .H...I...I..4J..
200037d8:	10034aac 10034af8 10034bac 10034bf0     .J...J...K...K..
200037e8:	10034c94 10034ce4 10034d84 10034dcc     .L...L...M...M..
200037f8:	10034e48 10034ef8 10034fc8 10035028     HN...N...O..(P..
20003808:	100350b0 100350f8                       .P...P..

20003810 <MuraseCol1>:
20003810:	10040e98 10040f14 10040f74 10040fb8     ........t.......
20003820:	1004100c 1004104c 100410b0 100410f8     ....L...........
20003830:	10041138 10041180 100411c0 1004121c     8...............
20003840:	10041260 100412bc 100412ec 1004137c     `...........|...
20003850:	10041484 100414e0 1004154c 100415a8     ........L.......
20003860:	100415d0 1004161c 10041668 100416bc     ........h.......
20003870:	100416f4 1004179c 1004193c 100419b0     ........<.......
20003880:	10041a60 10041aa4 10041ad4 10041b14     `...............
20003890:	10041b50 10041bac 10041bf0 10041c5c     P...........\...
200038a0:	10041ce8 10041d34 10041da8 10041e04     ....4...........
200038b0:	10041ea0 10041f10 10041fa4 10042000     ............. ..
200038c0:	1004208c 100420d4 10042128 1004217c     . ... ..(!..|!..
200038d0:	100421e8 10042244 100422c0 10042308     .!..D"..."...#..
200038e0:	10042378 100423dc 10042474 100424c8     x#...#..t$...$..
200038f0:	10042520 1004259c 100426f0 1004274c      %...%...&..L'..
20003900:	10042798 10042814 100428f0 1004296c     .'...(...(..l)..
20003910:	100429e0 10042a64 10042af0 10042b78     .)..d*...*..x+..
20003920:	10042c18 10042c88 10042d88 10042de4     .,...,...-...-..
20003930:	10042e80 10042ee8 10042f3c 10042fa0     ........</.../..
20003940:	10043004 10043058 100430cc 1004310c     .0..X0...0...1..
20003950:	10043148 100431dc 10043248 100432b8     H1...1..H2...2..
20003960:	10043314 10043390 1004343c 10043488     .3...3..<4...4..
20003970:	100434f4 10043550 1004364c 100436d4     .4..P5..L6...6..
20003980:	100437b0 10043804 10043870 100438cc     .7...8..p8...8..
20003990:	10043930 10043970 100439d4 10043a30     09..p9...9..0:..
200039a0:	10043aa8 10043b0c 10043b94 10043bd8     .:...;...;...;..
200039b0:	10043c24 10043c70 10043ca4 10043d00     $<..p<...<...=..

200039c0 <MuraseCol2>:
200039c0:	1003f1ec 1003f238 1003f290 1003f2dc     ....8...........
200039d0:	1003f348 1003f394 1003f3c4 1003f410     H...............
200039e0:	1003f438 1003f484 1003f4cc 1003f518     8...............
200039f0:	1003f554 1003f5a0 1003f5d8 1003f624     T...........$...
20003a00:	1003f664 1003f6b0 1003f6e8 1003f734     d...........4...
20003a10:	1003f764 1003f7b0 1003f81c 1003f868     d...........h...
20003a20:	1003f89c 1003f8e8 1003f918 1003f964     ............d...
20003a30:	1003f9b0 1003f9fc 1003fa38 1003fa84     ........8.......
20003a40:	1003fad0 1003fb1c 1003fb48 1003fb94     ........H.......
20003a50:	1003fbd4 1003fc20 1003fc54 1003fca0     .... ...T.......
20003a60:	1003fce0 1003fd2c 1003fd80 1003fdcc     ....,...........
20003a70:	1003fe10 1003fe5c 1003fe8c 1003fed8     ....\...........
20003a80:	1003ff20 1003ff6c 1003ffa0 1003ffec      ...l...........
20003a90:	1004001c 10040068 1004009c 100400e8     ....h...........
20003aa0:	10040150 1004019c 100401c8 10040214     P...............
20003ab0:	10040280 100402cc 100402fc 10040348     ............H...
20003ac0:	10040394 100403e0 10040424 10040470     ........$...p...
20003ad0:	100404b4 10040500 10040544 10040590     ........D.......
20003ae0:	100405c8 10040614 1004062c 10040678     ........,...x...
20003af0:	100406c0 1004070c 10040764 100407b0     ........d.......
20003b00:	100407d8 10040824 10040868 100408b4     ....$...h.......
20003b10:	100408f0 1004093c 10040984 100409d0     ....<...........
20003b20:	10040a14 10040a60 10040a98 10040ae4     ....`...........
20003b30:	10040b2c 10040b78 10040bac 10040bf8     ,...x...........
20003b40:	10040c5c 10040ca8 10040ce0 10040d2c     \...........,...
20003b50:	10040d64 10040db0 10040e04 10040e50     d...........P...

20003b60 <MartelCol1>:
20003b60:	10043d7c 10043e38 10043f60 1004401c     |=..8>..`?...@..
20003b70:	10044168 1004421c 10044328 100443dc     hA...B..(C...C..
20003b80:	1004452c 10044640 1004480c 100448dc     ,E..@F...H...H..
20003b90:	10044a58 10044b28 10044e0c 10044eac     XJ..(K...N...N..
20003ba0:	10045070 10045148 10045280 10045358     pP..HQ...R..XS..
20003bb0:	10045570 10045628 100456e0 10045798     pU..(V...V...W..
20003bc0:	1004588c 10045960 10045b48 10045c24     .X..`Y..H[..$\..
20003bd0:	10045f6c 10046060 1004612c 10046220     l_..``..,a.. b..
20003be0:	100463c0 10046540 10046b98 10046cec     .c..@e...k...l..
20003bf0:	10047104 10047214 100474b8 100475a0     .q...r...t...u..
20003c00:	10047744 1004782c 10047ad8 10047b88     Dw..,x...z...{..
20003c10:	10047cf0 10047da0 10047ff4 1004814c     .|...}......L...
20003c20:	1004852c 100485e0 10048710 100487c4     ,...............
20003c30:	10048970 10048a8c 10048e98 10048f7c     p...........|...
20003c40:	10049208 100492ec 10049674 1004979c     ........t.......
20003c50:	10049a54 10049b7c 10049f34 1004a0b4     T...|...4.......
20003c60:	1004a34c 1004a4cc 1004a890 1004a9c8     L...............
20003c70:	1004ad64 1004ae78 1004b140 1004b274     d...x...@...t...
20003c80:	1004b5c8 1004b6fc 1004bb74 1004bcc8     ........t.......
20003c90:	1004bfcc 1004c130 1004c794 1004c8f8     ....0...........
20003ca0:	1004ce64 1004cfc8 1004d8cc 1004da18     d...............
20003cb0:	1004de90 1004dfdc 1004e6dc 1004e7bc     ................
20003cc0:	1004ea20 1004eb54 1004ef80 1004f0f0      ...T...........
20003cd0:	1004f5cc 1004f6cc 1004f94c 1004fa4c     ........L...L...
20003ce0:	1004fde4 1004ffb4 10050464 100505dc     ........d.......

20003cf0 <GrigorCol1>:
20003cf0:	1006d3d8 1006d51c 1006d7b0 1006d898     ................
20003d00:	1006dbf4 1006dcd0 1006df20 1006df88     ........ .......
20003d10:	1006e028 1006e080 1006e0bc 1006e12c     (...........,...
20003d20:	1006e208 1006e270 1006e330 1006e37c     ....p...0...|...
20003d30:	1006e418 1006e4bc 1006e668 1006e6dc     ........h.......
20003d40:	1006e758 1006e7f8 1006e864 1006e8e0     X.......d.......
20003d50:	1006e988 1006ea04 1006ea94 1006eb08     ................
20003d60:	1006ec24 1006ecb8 1006ef20 1006ef78     $....... ...x...
20003d70:	1006efb4 1006f010 1006f0a4 1006f110     ................
20003d80:	1006f178 1006f214 1006f2e8 1006f350     x...........P...
20003d90:	1006f474 1006f4e0 1006f56c 1006f5bc     t.......l.......
20003da0:	1006f650 1006f6bc 1006f7c0 1006f81c     P...............
20003db0:	1006f900 1006f94c 1006f9cc 1006fa24     ....L.......$...
20003dc0:	1006fa9c 1006faec 1006fbc8 1006fc2c     ............,...
20003dd0:	1006fccc 1006fd30 1006fde0 1006fe48     ....0.......H...
20003de0:	1006ff54 1006ffa8 10070010 10070070     T...........p...
20003df0:	1007011c 10070188 100702b4 1007031c     ................
20003e00:	1007044c 100704a4 10070538 10070598     L.......8.......
20003e10:	10070678 100706d0 10070778 100707d4     x.......x.......
20003e20:	10070870 100708f4 10070a6c 10070b80     p.......l.......
20003e30:	10070f40 10070fc8 100710d0 10071140     @...........@...
20003e40:	100711f4 10071254 10071350 1007139c     ....T...P.......
20003e50:	10071478 100714e8 10071560 100715b4     x.......`.......
20003e60:	1007165c 100716b8 10071740 100717c4     \.......@.......
20003e70:	100718e8 10071948 10071a24 10071a90     ....H...$.......
20003e80:	10071b7c 10071be4 10071ca8 10071d0c     |...............
20003e90:	10071dac 10071e34 10071f14 10071f90     ....4...........
20003ea0:	100720dc 10072128 100721c4 1007220c     . ..(!...!..."..
20003eb0:	10072248 10072298 100722dc 10072338     H"..."..."..8#..
20003ec0:	100723ac 1007240c 1007248c 100724f8     .#...$...$...$..
20003ed0:	100725f4 1007266c 100728cc 10072928     .%..l&...(..()..
20003ee0:	100729b0 10072a04 10072a4c 10072ab8     .)...*..L*...*..
20003ef0:	10072bd0 10072c2c 10072cec 10072d78     .+..,,...,..x-..
20003f00:	10072f18 10072f80 10073040 100730a0     ./.../..@0...0..
20003f10:	1007318c 100731f4 100732a0 10073308     .1...1...2...3..
20003f20:	1007341c 10073490 10073594 100735d8     .4...4...5...5..
20003f30:	10073650 100736c4 10073804 1007386c     P6...6...8..l8..
20003f40:	100738e8 10073950 10073a28 10073a80     .8..P9..(:...:..
20003f50:	10073bc4 10073c08 10073c54 10073dfc     .;...<..T<...=..
20003f60:	10074674 100746cc 10074784 100747ec     tF...F...G...G..
20003f70:	1007489c 10074918 10074b54 10074bc4     .H...I..TK...K..
20003f80:	10074c8c 10074cd8 10074db0 10074ea4     .L...L...M...N..
20003f90:	100751d4 10075238 10075310 10075374     .Q..8R...S..tS..
20003fa0:	10075450 100754f4 10075634 10075680     PT...T..4V...V..
20003fb0:	100756f8 10075750 100757f8 10075864     .V..PW...W..dX..
20003fc0:	100758f4 1007595c 10075a04 10075a50     .X..\Y...Z..PZ..
20003fd0:	10075ae4 10075b48 10075c0c 10075c60     .Z..H[...\..`\..
20003fe0:	10075d28 10075d7c 10075e40 10075eb8     (]..|]..@^...^..
20003ff0:	10075f60 10075fa4 10076020 10076088     `_..._.. `...`..
20004000:	10076134 10076178 100761ec 1007627c     4a..xa...a..|b..

20004010 <GrigorCol2>:
20004010:	100678c0 10067950 10067b3c 10067bac     .x..Py..<{...{..
20004020:	10067db0 10067e0c 10067f54 10067fac     .}...~..T.......
20004030:	100680b8 1006812c 100682ec 10068364     ....,.......d...
20004040:	10068474 100684f0 10068734 100687b0     t.......4.......
20004050:	100688ec 10068964 10068b2c 10068be4     ....d...,.......
20004060:	10068f4c 10068fb4 100690f0 10069168     L...........h...
20004070:	10069348 100693ac 10069538 100695b0     H.......8.......
20004080:	100697d0 10069844 100699e8 10069a70     ....D.......p...
20004090:	10069bc8 10069c4c 10069dbc 10069e30     ....L.......0...
200040a0:	10069fe4 1006a064 1006a1fc 1006a284     ....d...........
200040b0:	1006a470 1006a508 1006a74c 1006a7b8     p.......L.......
200040c0:	1006a8cc 1006a954 1006ab98 1006ac1c     ....T...........
200040d0:	1006ad90 1006ae0c 1006afe4 1006b060     ............`...
200040e0:	1006b1c4 1006b27c 1006b680 1006b700     ....|...........
200040f0:	1006b954 1006b9d0 1006bab0 1006bb1c     T...............
20004100:	1006bc78 1006bd58 1006bfbc 1006c038     x...X.......8...
20004110:	1006c204 1006c294 1006c44c 1006c4b8     ........L.......
20004120:	1006c6a0 1006c708 1006c870 1006c8e0     ........p.......
20004130:	1006ca6c 1006cae8 1006ccac 1006cd14     l...............
20004140:	1006ceac 1006cf28 1006d148 1006d1dc     ....(...H.......

20004150 <GrigorCol3>:
20004150:	10064dec 10064e3c 10064f70 10064fbc     .M..<N..pO...O..
20004160:	100650a8 100650f0 100651d0 10065220     .P...P...Q.. R..
20004170:	100653a0 100653f4 1006550c 1006555c     .S...S...U..\U..
20004180:	10065634 10065680 1006579c 100657ec     4V...V...W...W..
20004190:	100658ec 10065938 10065a14 10065a60     .X..8Y...Z..`Z..
200041a0:	10065b1c 10065b6c 10065c50 10065ca0     .[..l[..P\...\..
200041b0:	10065dac 10065df4 10065f14 10065f60     .]...]..._..`_..
200041c0:	1006605c 100660ac 10066188 100661d4     \`...`...a...a..
200041d0:	10066320 10066374 1006646c 100664b8      c..tc..ld...d..
200041e0:	100665e8 10066628 10066700 10066758     .e..(f...g..Xg..
200041f0:	10066930 1006697c 10066a34 10066a7c     0i..|i..4j..|j..
20004200:	10066c04 10066c4c 10066d7c 10066dd0     .l..Ll..|m...m..
20004210:	10066ec4 10066f0c 10066fd4 10067024     .n...o...o..$p..
20004220:	100671ac 10067200 10067324 10067380     .q...r..$s...s..
20004230:	100674f0 1006754c 10067714 1006776c     .t..Lu...w..lw..

20004240 <GrigorCol4>:
20004240:	10060cf4 10060d4c 10060ed8 10060f28     ....L.......(...
20004250:	10061068 100610b4 100611c8 10061234     h...........4...
20004260:	10061564 100615bc 100616fc 10061768     d...........h...
20004270:	10061ab4 10061b1c 10061dd8 10061e38     ............8...
20004280:	10062004 10062064 10062248 100622a8     . ..d ..H"..."..
20004290:	10062490 10062508 100626f4 10062764     .$...%...&..d'..
200042a0:	10062980 100629e8 10062b50 10062bb4     .)...)..P+...+..
200042b0:	10062d58 10062db8 10062fa0 10063004     X-...-.../...0..
200042c0:	10063190 100631f8 10063438 1006349c     .1...1..84...4..
200042d0:	1006365c 100636b4 100638b8 10063918     \6...6...8...9..
200042e0:	10063aa8 10063b04 10063cec 10063d44     .:...;...<..D=..
200042f0:	10063ec4 10063f30 1006407c 100640e4     .>..0?..|@...@..
20004300:	10064254 100642b8 100644e8 10064540     TB...B...D..@E..
20004310:	1006468c 100646f0 1006483c 10064894     .F...F..<H...H..
20004320:	100649fc 10064a50 10064bdc 10064c38     .I..PJ...K..8L..

20004330 <GrigorCol5>:
20004330:	1005f578 1005f5e8 1005f7bc 1005f828     x...........(...
20004340:	1005faa0 1005fb04 1005fcd8 1005fd38     ............8...
20004350:	1005ffa4 10060020 100601c4 10060238     .... .......8...
20004360:	100604d0 1006052c 10060710 1006076c     ....,.......l...
20004370:	10060950 100609b8 10060afc 10060b58     P...........X...

20004380 <GrigorCol6>:
20004380:	1005b15c 1005b1e8 1005b398 1005b408     \...............
20004390:	10036d94 1005b63c 10036ffc 1005b7c0     .m..<....o......
200043a0:	1005b8e0 1005b948 1005ba88 1005bb04     ....H...........
200043b0:	1005bd54 1005bdcc 1005bed0 1005bf3c     T...........<...
200043c0:	10037acc 1005c068 1005c188 1005c1f0     .z..h...........
200043d0:	1005c39c 1005c3f4 1005c4a0 1005c4f0     ................
200043e0:	1005c6d4 1005c748 1005c8b8 1005c924     ....H.......$...
200043f0:	1005ca8c 1005cb18 1005cc8c 1005cd08     ................
20004400:	1005cea0 1005ceec 1005d034 1005d088     ........4.......
20004410:	1005d1e8 1005d244 1005d41c 1005d478     ....D.......x...
20004420:	1005d5a0 1005d5f4 1005d6cc 1005d724     ............$...
20004430:	1005d844 1005d89c 1005d974 1005d9dc     D.......t.......
20004440:	1005db78 1005dbe4 1005dd2c 1005ddb4     x.......,.......
20004450:	1005e128 1005e184 1005e238 1005e29c     (.......8.......
20004460:	1005e42c 1005e474 1005e584 1005e5d8     ,...t...........
20004470:	1005e74c 1005e79c 1005e8ac 1005e8f8     L...............
20004480:	1005ea04 1005ea4c 1005eb88 1005ebd8     ....L...........
20004490:	1005ed04 1005ed4c 1005ee5c 1005eea4     ....L...\.......
200044a0:	1005efd4 1005f02c 1005f1c0 1005f20c     ....,...........
200044b0:	1005f318 1005f36c 1005f46c 1005f4b8     ....l...l.......

200044c0 <GrigorCol7>:
200044c0:	10050f58 10051194 10051a5c 10051c44     X.......\...D...
200044d0:	100523b0 100525a0 10053280 1005334c     .#...%...2..L3..
200044e0:	1005353c 1005370c 100540b0 10054280     <5...7...@...B..
200044f0:	100554e8 100557cc 100572b0 10057590     .T...W...r...u..
20004500:	10059410 100596f0                       ........

20004508 <HaywoodCol1>:
20004508:	1009557c 100955b8 100955cc 10095608     |U...U...U...V..
20004518:	10095620 1009565c 10095678 100956b4      V..\V..xV...V..
20004528:	100956d4 10095710 10095734 10095780     .V...W..4W...W..
20004538:	100957bc 10095808 10095830 1009587c     .W...X..0X..|X..
20004548:	100958a4 100958f0 1009591c 10095958     .X...X...Y..XY..
20004558:	1009598c 100959d8 10095a08 10095a44     .Y...Y...Z..DZ..
20004568:	10095a78 10095ab4 10095ae0 10095b2c     xZ...Z...Z..,[..
20004578:	10095b64 10095ba0 10095bcc 10095c08     d[...[...[...\..
20004588:	10095c34 10095c70 10095ca4 10095cf0     4\..p\...\...\..
20004598:	10095d28 10095d74 10095dc0 10095dfc     (]..t]...]...]..
200045a8:	10095e2c 10095e68 10095ea0 10095edc     ,^..h^...^...^..
200045b8:	10095f10 10095f4c 10095f80 10095fcc     ._..L_..._..._..
200045c8:	10096008 10096054 100960a0 100960ec     .`..T`...`...`..
200045d8:	10096134 10096170 100961a8 100961f4     4a..pa...a...a..
200045e8:	1009623c 10096278 100962bc 10096308     <b..xb...b...c..
200045f8:	10096350 1009639c 100963f8 10096444     Pc...c...c..Dd..
20004608:	1009648c 100964c8 10096504 10096550     .d...d...e..Pe..
20004618:	10096598 100965d4 10096614 10096660     .e...e...f..`f..
20004628:	100966c4 10096700 10096758 10096794     .f...g..Xg...g..
20004638:	100967d8 10096824 1009688c 100968d8     .g..$h...h...h..
20004648:	10096928 10096974 100969c4 10096a10     (i..ti...i...j..
20004658:	10096a70 10096abc 10096b0c 10096b58     pj...j...k..Xk..
20004668:	10096bc8 10096c04 10096c48 10096c94     .k...l..Hl...l..
20004678:	10096ce8 10096d34 10096d88 10096dd4     .l..4m...m...m..
20004688:	10096e30 10096e7c 10096edc 10096f18     0n..|n...n...o..
20004698:	10096f68 10096fa4 10097000 1009704c     ho...o...p..Lp..
200046a8:	100970b0 100970fc 10097160 100971ac     .p...p..`q...q..
200046b8:	10097214 10097260 100972d8 10097324     .r..`r...r..$s..
200046c8:	10097390 100973dc 10097448 10097494     .s...s..Ht...t..
200046d8:	10097514 10097560 100975ec 10097638     .u..`u...u..8v..
200046e8:	100976ac 100976e8 1009774c 10097788     .v...v..Lw...w..
200046f8:	100977ec 10097828 10097890 100978dc     .w..(x...x...x..
20004708:	1009796c 100979b8 10097a38 10097a94     ly...y..8z...z..
20004718:	10097b38 10097b84 10097c18 10097c64     8{...{...|..d|..
20004728:	10097d00 10097d4c 10097dd0 10097e0c     .}..L}...}...~..
20004738:	10097e78 10097ec4 10097f4c 10097f98     x~...~..L.......
20004748:	10098028 10098068 100980ec 10098128     (...h.......(...
20004758:	10098198 100981e4 10098270 100982bc     ........p.......
20004768:	10098348 10098394 10098420 1009846c     H....... ...l...
20004778:	1009850c 10098558 100985e8 10098634     ....X.......4...
20004788:	100986cc 10098720 100987dc 10098828     .... .......(...
20004798:	100988e8 10098934 100989d0 10098a1c     ....4...........
200047a8:	10098abc 10098b08 10098bc0 10098c0c     ................
200047b8:	10098cb0 10098d0c 10098dc8 10098e14     ................
200047c8:	10098ec0 10098f0c 10098fc8 10099014     ................
200047d8:	100990c0 1009910c 100991b8 10099204     ................
200047e8:	100992b4 10099300 100993bc 100993fc     ................
200047f8:	100994a0 100994ec 100995ac 100995f8     ................
20004808:	100996b4 10099700 100997bc 10099808     ................
20004818:	100998cc 10099920 100999fc 10099a48     .... .......H...
20004828:	10099b14 10099b60 10099c34 10099c80     ....`...4.......
20004838:	10099d54 10099da4 10099e88 10099ec4     T...............
20004848:	10099f7c 10099fc8 1009a0b0 1009a0fc     |...............
20004858:	1009a1f0 1009a244                       ....D...

20004860 <HaywoodCol2>:
20004860:	1007d388 1007d3d4 1007d474 1007d4c0     ........t.......
20004870:	1007d5f0 1007d63c 1007d774 1007d7c0     ....<...t.......
20004880:	1007d874 1007d8c8 1007d9e0 1007da3c     t...........<...
20004890:	1007db3c 1007dbac 1007dca0 1007dcec     <...............
200048a0:	1007ddcc 1007de28 1007dfac 1007e008     ....(...........
200048b0:	1007e194 1007e21c 1007e428 1007e4b0     ........(.......
200048c0:	1007e614 1007e684 1007e87c 1007e8d8     ........|.......
200048d0:	1007ea54 1007eab0 1007ebd4 1007ec30     T...........0...
200048e0:	1007eda4 1007ee14 1007effc 1007f060     ............`...
200048f0:	1007f1f8 1007f25c 1007f34c 1007f398     ....\...L.......
20004900:	1007f4b4 1007f530 1007f700 1007f74c     ....0.......L...
20004910:	1007f858 1007f8e0 1007fad4 1007fb38     X...........8...
20004920:	1007fc68 1007fcc4 1007fe38 1007fec0     h.......8.......
20004930:	1008003c 100800a8 100802c4 10080334     <...........4...
20004940:	100803f4 1008046c 1008062c 10080678     ....l...,...x...
20004950:	10080748 10080794 10080854 100808a4     H.......T.......
20004960:	1008094c 100809bc 10080ab4 10080b0c     L...............
20004970:	10080c50 10080cbc 10080ed4 10080f30     P...........0...
20004980:	100810cc 10081128 10081230 1008128c     ....(...0.......
20004990:	10081350 100813ac 100814b8 10081514     P...............
200049a0:	10081690 10081700 10081844 100818a0     ........D.......
200049b0:	100819b4 10081a18 10081b3c 10081b98     ........<.......
200049c0:	10081ccc 10081d28 10081e58 10081ebc     ....(...X.......
200049d0:	10081fc0 10082024 100821e4 10082248     ....$ ...!..H"..
200049e0:	100823ac 10082418 1008256c 100825c8     .#...$..l%...%..
200049f0:	10082708 10082774 10082888 100828f4     .'..t'...(...(..
20004a00:	10082af4 10082b58 10082c68 10082cd8     .*..X+..h,...,..
20004a10:	10082e0c 10082e70 10082f94 10082ff8     ....p..../.../..
20004a20:	100831d8 10083248 10083398 100833fc     .1..H2...3...3..
20004a30:	10083518 1008357c 100836fc 10083758     .5..|5...6..X7..
20004a40:	10083910 10083980 10083ae0 10083b50     .9...9...:..P;..
20004a50:	10083ca4 10083d0c 10083f54 10083fd0     .<...=..T?...?..
20004a60:	10084194 10084204 10084320 10084390     .A...B.. C...C..
20004a70:	100844d4 10084550 1008473c 100847c4     .D..PE..<G...G..
20004a80:	10084a10 10084a80 10084bf8 10084c74     .J...J...K..tL..
20004a90:	10084e54 10084ed0 10085088 100850f8     TN...N...P...P..
20004aa0:	100852bc 10085344 100854b0 10085520     .R..DS...T.. U..
20004ab0:	100857b4 1008583c 10085a54 10085adc     .W..<X..TZ...Z..
20004ac0:	10085c30 10085cac 10085eb0 10085f2c     0\...\...^..,_..
20004ad0:	10086118 100861a0 100863bc 10086444     .a...a...c..Dd..
20004ae0:	100865a8 10086618 10086904 10086980     .e...f...i...i..
20004af0:	10086b50 10086bd4 10086e00 10086e5c     Pk...k...n..\n..
20004b00:	10087048 100870bc 1008737c 10087404     Hp...p..|s...t..
20004b10:	10087580 100875dc 100877ec 1008787c     .u...u...w..|x..
20004b20:	10087aa0 10087b14 10087c94 10087cf0     .z...{...|...|..
20004b30:	10087f10 10087f80 10088138 1008819c     ........8.......
20004b40:	100883b4 10088410 100885e0 10088650     ............P...
20004b50:	100887e4 10088840 100889f4 10088a7c     ....@.......|...
20004b60:	10088cb8 10088d1c 10088f24 10088f98     ........$.......
20004b70:	10089114 10089178 1008933c 100893cc     ....x...<.......
20004b80:	1008958c 100895e8 100897e4 1008986c     ............l...
20004b90:	10089b4c 10089bd4 10089e14 10089e94     L...............
20004ba0:	1008a044 1008a0d8 1008a2bc 1008a344     D...........D...
20004bb0:	1008a510 1008a5b4 1008a740 1008a7f8     ........@.......
20004bc0:	1008a9b4 1008aa34 1008abc4 1008ac50     ....4.......P...
20004bd0:	1008ae14 1008ae84 1008b208 1008b284     ................
20004be0:	1008b3f8 1008b494 1008b74c 1008b80c     ........L.......
20004bf0:	1008ba44 1008bb18 1008bc68 1008bd0c     D.......h.......
20004c00:	1008bef8 1008bfc0 1008c1d4 1008c264     ............d...
20004c10:	1008c3d8 1008c46c 1008c688 1008c6e4     ....l...........
20004c20:	1008c948 1008ca1c 1008cbfc 1008cca8     H...............
20004c30:	1008cf38 1008d008 1008d28c 1008d304     8...............
20004c40:	1008d464 1008d510 1008d79c 1008d848     d...........H...
20004c50:	1008da44 1008dad4 1008dd54 1008de18     D.......T.......
20004c60:	1008dfc8 1008e038 1008e158 1008e1d0     ....8...X.......
20004c70:	1008e458 1008e510 1008e70c 1008e7ec     X...............
20004c80:	1008e9a8 1008ea7c 1008ec68 1008ed04     ....|...h.......
20004c90:	1008ef74 1008f030 1008f29c 1008f30c     t...0...........
20004ca0:	1008f534 1008f5e8 1008f890 1008f918     4...............
20004cb0:	1008fb4c 1008fc00 1008fdd4 1008fe48     L...........H...
20004cc0:	10090050 100900d8 10090450 100904e0     P.......P.......
20004cd0:	10090714 100907a4 10090ab4 10090b6c     ............l...
20004ce0:	10090dc8 10090e64 1009107c 100910fc     ....d...|.......
20004cf0:	1009134c 10091470 100916b0 10091744     L...p.......D...
20004d00:	10091994 10091a1c 10091c0c 10091cb0     ................
20004d10:	10091e28 10091eb8 10092108 100921c0     (........!...!..
20004d20:	100923fc 100924a8 10092820 100928b4     .#...$.. (...(..
20004d30:	10092b58 10092c04 10092e58 10092f04     X+...,..X..../..
20004d40:	10093204 1009328c 10093480 10093568     .2...2...4..h5..
20004d50:	10093738 100937c0 10093a14 10093ad4     87...7...:...:..
20004d60:	10093da0 10093e1c 10093fd8 1009406c     .=...>...?..l@..
20004d70:	10094370 100943e0 1009452c 100945f4     pC...C..,E...E..
20004d80:	10094850 1009490c 10094b78 10094c30     PH...I..xK..0L..
20004d90:	10094e60 10094ef8 100950ac 10095128     `N...N...P..(Q..
20004da0:	10095324 10095388                       $S...S..

20004da8 <HaywoodCol3>:
20004da8:	1007648c 10010574 100764a4 10012e00     .d..t....d......
20004db8:	100764b8 100764d8 100764e4 1007651c     .d...d...d...e..
20004dc8:	10076530 10076570 1007658c 100765cc     0e..pe...e...e..
20004dd8:	100765f0 1007661c 1007662c 10076658     .e...f..,f..Xf..
20004de8:	10076664 100766a4 100766c0 1007670c     df...f...f...g..
20004df8:	10076728 10076774 10076790 100767dc     (g..tg...g...g..
20004e08:	100767fc 10076838 10076858 10076898     .g..8h..Xh...h..
20004e18:	100768b4 100768f8 10076928 10076968     .h...h..(i..hi..
20004e28:	1007697c 100769b8 100769d4 10076a10     |i...i...i...j..
20004e38:	10076a2c 10076a6c 10076a8c 10076ac8     ,j..lj...j...j..
20004e48:	10076ae4 10076b20 10076b38 10076b78     .j.. k..8k..xk..
20004e58:	10076b9c 10076be0 10076c00 10076c48     .k...k...l..Hl..
20004e68:	10076c68 10076cb4 10076cd8 10076d18     hl...l...l...m..
20004e78:	10076d40 10076d9c 10076dd4 10076e28     @m...m...m..(n..
20004e88:	10076e60 10076ea4 10076ee0 10076f34     `n...n...n..4o..
20004e98:	10076f68 10076fb0 10076fdc 10077018     ho...o...o...p..
20004ea8:	10077044 100770a0 100770dc 10077130     Dp...p...p..0q..
20004eb8:	10077174 100771bc 100771f0 1007723c     tq...q...q..<r..
20004ec8:	10077288 100772d8 1007730c 1007737c     .r...r...s..|s..
20004ed8:	100773d8 1007742c 1007746c 100774c0     .s..,t..lt...t..
20004ee8:	100774fc 1007756c 100775a8 100775e8     .t..lu...u...u..
20004ef8:	10077624 10077678 100776b8 10077704     $v..xv...v...w..
20004f08:	10077738 1007778c 100777e8 1007783c     8w...w...w..<x..
20004f18:	10077898 100778fc 10077958 100779b4     .x...x..Xy...y..
20004f28:	10077a20 10077a7c 10077ac0 10077b0c      z..|z...z...{..
20004f38:	10077b68 10077bb0 10077bf4 10077c48     h{...{...{..H|..
20004f48:	10077c94 10077ce8 10077d34 10077d88     .|...|..4}...}..
20004f58:	10077dd8 10077e3c 10077ea4 10077f08     .}..<~...~......
20004f68:	10077f74 10077fc8 10078018 1007806c     t...........l...
20004f78:	100780b4 10078124 100781a0 10078204     ....$...........
20004f88:	10078260 100782bc 10078318 10078364     `...........d...
20004f98:	100783b0 100783f4 10078468 100784c4     ........h.......
20004fa8:	10078538 10078594 100785e4 10078634     8...........4...
20004fb8:	10078694 100786f8 1007875c 100787c0     ........\.......
20004fc8:	10078854 100788b0 1007890c 10078968     T...........h...
20004fd8:	100789f8 10078a3c 10078ac0 10078b14     ....<...........
20004fe8:	10078b9c 10078bf4 10078c6c 10078cd0     ........l.......
20004ff8:	10078d6c 10078dd8 10078e40 10078eac     l.......@.......
20005008:	10078f38 10078f9c 10079028 100790a0     8.......(.......
20005018:	10079148 100791a4 10079218 10079274     H...........t...
20005028:	100792f0 1007935c 100793d0 10079424     ....\.......$...
20005038:	100794a4 1007951c 100795c8 10079640     ............@...
20005048:	100796c8 1007973c 100797bc 10079818     ....<...........
20005058:	100798ac 100798f8 10079988 100799ec     ................
20005068:	10079a84 10079ae0 10079b84 10079be8     ................
20005078:	10079c9c 10079d00 10079d70 10079dd4     ........p.......
20005088:	10079e44 10079ec4 10079f68 10079fcc     D.......h.......
20005098:	1007a048 1007a0ac 1007a168 1007a1cc     H.......h.......
200050a8:	1007a258 1007a2c8 1007a348 1007a3a4     X.......H.......
200050b8:	1007a468 1007a4d4 1007a564 1007a5b0     h.......d.......
200050c8:	1007a654 1007a6c4 1007a744 1007a7a8     T.......D.......
200050d8:	1007a844 1007a89c 1007a920 1007a97c     D....... ...|...
200050e8:	1007aa34 1007aaac 1007ab64 1007abc8     4.......d.......
200050f8:	1007ac9c 1007ad00 1007ad88 1007adec     ................
20005108:	1007ae88 1007af00 1007af7c 1007afec     ........|.......
20005118:	1007b098 1007b110 1007b1d0 1007b250     ............P...
20005128:	1007b308 1007b378 1007b418 1007b474     ....x.......t...
20005138:	1007b578 1007b5dc 1007b680 1007b6e4     x...............
20005148:	1007b7e4 1007b854 1007b924 1007b994     ....T...$.......
20005158:	1007baa4 1007bb18 1007bbd0 1007bc3c     ............<...
20005168:	1007bcf4 1007bd64 1007be28 1007be9c     ....d...(.......
20005178:	1007bf50 1007bfc8 1007c0b8 1007c11c     P...............
20005188:	1007c1dc 1007c250 1007c2e8 1007c358     ....P.......X...
20005198:	1007c428 1007c4a0 1007c55c 1007c5c0     (.......\.......
200051a8:	1007c6a4 1007c71c 1007c7e0 1007c83c     ............<...
200051b8:	1007c90c 1007c98c 1007ca80 1007caf8     ................
200051c8:	1007cbb4 1007cc18 1007ccdc 1007cd5c     ............\...
200051d8:	1007ce6c 1007ced0 1007cfbc 1007d02c     l...........,...
200051e8:	1007d120 1007d184 1007d254 1007d2b8      .......T.......

200051f8 <HollandCol1>:
200051f8:	100ad5b8 100ad608 100ad6d0 100ad7bc     ................
20005208:	100adb2c 100adb9c 100adc5c 100add70     ,.......\...p...
20005218:	100ae018 100ae0fc 100ae484 100ae560     ............`...
20005228:	100ae6d0 100ae760 100ae894 100ae920     ....`....... ...
20005238:	100aea50 100aeaa4 100aeb80 100aebdc     P...............

20005248 <HollandCol2>:
20005248:	100abaa0 100abb6c 100abcf8 100abe48     ....l.......H...
20005258:	100ac5d8 100ac70c 100ac908 100ac9bc     ................
20005268:	100acb6c 100acbf8 100acc88 100acd98     l...............
20005278:	100acf10 100acfac 100ad090 100ad114     ................
20005288:	100ad174 100ad224 100ad388 100ad4ac     t...$...........

20005298 <HollandCol3>:
20005298:	100a9930 100a9a54 100a9b7c 100a9c30     0...T...|...0...
200052a8:	100a9cf0 100a9de0 100aa158 100aa1c4     ........X.......
200052b8:	100aa2c8 100aa390 100aa508 100aa5ac     ................
200052c8:	100aa740 100aa7f8 100aa968 100aa9bc     @.......h.......
200052d8:	100aaa24 100aaae4 100aac6c 100aacbc     $.......l.......
200052e8:	100aad24 100aaddc 100aaf38 100aaf94     $.......8.......
200052f8:	100ab02c 100ab078 100ab0c4 100ab148     ,...x.......H...
20005308:	100ab1d8 100ab280 100ab2f4 100ab364     ............d...
20005318:	100ab414 100ab48c 100ab554 100ab5c4     ........T.......
20005328:	100ab660 100ab6e0 100ab7ec 100ab8bc     `...............

20005338 <HollandCol4>:
20005338:	100a5ce4 100a5d54 100a5e58 100a5f6c     .\..T]..X^..l_..
20005348:	100a609c 100a6144 100a62a0 100a63a8     .`..Da...b...c..
20005358:	100a668c 100a673c 100a69fc 100a6a6c     .f..<g...i..lj..
20005368:	100a6b54 100a6c5c 100a6e18 100a6eb8     Tk..\l...n...n..
20005378:	100a7010 100a706c 100a7160 100a7240     .p..lp..`q..@r..
20005388:	100a74f4 100a7548 100a7598 100a7780     .t..Hu...u...w..
20005398:	100a803c 100a808c 100a8124 100a8250     <.......$...P...
200053a8:	100a855c 100a8698 100a8a8c 100a8b0c     \...............
200053b8:	100a8bac 100a8cac 100a8de8 100a8e48     ............H...
200053c8:	100a8f0c 100a900c 100a9414 100a94ec     ................
200053d8:	100a97ec 100a9848                       ....H...

200053e0 <HollandCol5>:
200053e0:	100a4720 100a4780 100a4840 100a48b4      G...G..@H...H..
200053f0:	100a49a8 100a4a04 100a4ac0 100a4b24     .I...J...J..$K..
20005400:	100a4c10 100a4c70 100a4d6c 100a4de0     .L..pL..lM...M..
20005410:	100a4ec8 100a4f20 100a4fa0 100a5008     .N.. O...O...P..
20005420:	100a5118 100a5178 100a526c 100a52c4     .Q..xQ..lR...R..
20005430:	100a535c 100a53c4 100a54b8 100a5504     \S...S...T...U..
20005440:	100a5588 100a55d4 100a5660 100a56bc     .U...U..`V...V..
20005450:	100a574c 100a57b0 100a5854 100a58b0     LW...W..TX...X..
20005460:	100a596c 100a59c4 100a5a4c 100a5aa0     lY...Y..LZ...Z..
20005470:	100a5b20 100a5b70 100a5bf0 100a5c48      [..p[...[..H\..

20005480 <HollandCol6>:
20005480:	100a1b2c 100a1c58 100a22f4 100a2368     ,...X...."..h#..
20005490:	100a2408 100a24a8 100a2588 100a25f0     .$...$...%...%..
200054a0:	100a26e8 100a2810 100a2d50 100a2dbc     .&...(..P-...-..
200054b0:	100a2e74 100a2f20 100a3044 100a31c8     t... /..D0...1..
200054c0:	100a36b0 100a3744 100a389c 100a3974     .6..D7...8..t9..
200054d0:	100a3b2c 100a3ca0 100a45e0 100a4650     ,;...<...E..PF..

200054e0 <HollandCol7>:
200054e0:	100a08a4 100a0920 100a0a38 100a0a8c     .... ...8.......
200054f0:	100a0b38 100a0bb4 100a0ce4 100a0d58     8...........X...
20005500:	100a0e54 100a0ebc 100a0f0c 100a0f7c     T...........|...
20005510:	100a1044 100a10a4 100a1184 100a11d8     D...............
20005520:	100a12ec 100a1370 100a14ec 100a156c     ....p.......l...
20005530:	100a1740 100a17b4 100a18b4 100a190c     @...............
20005540:	100a197c 100a19f0                       |.......

20005548 <HollandCol8>:
20005548:	1009a3e4 1009a514 1009aa2c 1009aaf0     ........,.......
20005558:	1009ae84 1009af54 1009b274 1009b3a0     ....T...t.......
20005568:	1009b54c 1009b5e4 1009b720 1009b868     L....... ...h...
20005578:	1009bdac 1009be94 1009c16c 1009c244     ........l...D...
20005588:	1009c438 1009c500 1009c6f0 1009c8c0     8...............
20005598:	1009cc24 1009ccec 1009cf6c 1009d050     $.......l...P...
200055a8:	1009d44c 1009d574 1009da34 1009db0c     L...t...4.......
200055b8:	1009ddc0 1009df54 1009e4f8 1009e574     ....T.......t...
200055c8:	1009e608 1009e7c8 1009ee18 1009efbc     ................
200055d8:	1009f868 1009fa0c 100a0254 100a039c     h.......T.......

200055e8 <SkinnerCol1>:
200055e8:	10142b24 10142ba0 10142c4c 10142ca4     $+...+..L,...,..
200055f8:	10142cec 10142db8 10142f88 1014300c     .,...-.../...0..
20005608:	10143124 10143210 101433b8 10143458     $1...2...3..X4..
20005618:	101434e8 1014358c 1014366c 10143704     .4...5..l6...7..
20005628:	101437a0 101437f4 10143890 1014399c     .7...7...8...9..
20005638:	10143b48 10143bac 10143c58 10143d80     H;...;..X<...=..
20005648:	10143f20 10143fd0 101440b0 10144108      ?...?...@...A..
20005658:	1014415c 101441c4 10144290 1014437c     \A...A...B..|C..
20005668:	10144454 10144564 101448c0 10144944     TD..dE...H..DI..
20005678:	10144a0c 10144b34 10144e28 10144e78     .J..4K..(N..xN..
20005688:	10144ed4 10144f34 10144fa0 10145074     .N..4O...O..tP..
20005698:	10145118 101451b4 101453d0 1014548c     .Q...Q...S...T..
200056a8:	101455e0 101456c0 101459c0 10145a78     .U...V...Y..xZ..
200056b8:	10145d48 10145eb8 10146758 10146848     H]...^..Xg..Hh..
200056c8:	10146a9c 10146bc4 10146f90 101470b4     .j...k...o...p..
200056d8:	101474fc 101475c0 101476c4 10147808     .t...u...v...x..
200056e8:	10147d18 10147e54 101480c4 10148278     .}..T~......x...
200056f8:	10148aac 10148c14 101491d4 10149340     ............@...
20005708:	10149b00 10149cd0 10149ff0 1014a1a4     ................
20005718:	1014a620 1014a754 1014a99c 1014aad0      ...T...........
20005728:	1014af70 1014b090 1014b0d4 1014b1f8     p...............
20005738:	1014b9f0 1014bbb0 1014c298 1014c41c     ................
20005748:	1014cc90 1014ce28 1014d320 1014d54c     ....(... ...L...
20005758:	1014d74c 1014d87c 1014e140 1014e2b0     L...|...@.......
20005768:	1014eda4 1014eef8 1014f0e8 1014f284     ................

20005778 <SkinnerCol10>:
20005778:	100e6f9c 100e6ff0 100e705c 100e70a0     .o...o..\p...p..
20005788:	100e70f8 100e7140 100e717c 100e71c4     .p..@q..|q...q..
20005798:	100e7210 100e7264 100e72ac 100e7314     .r..dr...r...s..
200057a8:	100e7390 100e7404 100e745c 100e74c0     .s...t..\t...t..
200057b8:	100e755c 100e75e4 100e7668 100e76c8     \u...u..hv...v..
200057c8:	100e772c 100e780c 100e7a88 100e7b08     ,w...x...z...{..
200057d8:	100e7bc8 100e7c54 100e7d54 100e7dd0     .{..T|..T}...}..
200057e8:	100e7e24 100e7ea0 100e7eec 100e7f64     $~...~...~..d...
200057f8:	100e8024 100e80c8 100e8194 100e8218     $...............
20005808:	100e827c 100e8314 100e8368 100e8400     |.......h.......
20005818:	100e84b8 100e8550 100e85b8 100e8668     ....P.......h...
20005828:	100e877c 100e882c 100e8944 100e8a18     |...,...D.......
20005838:	100e8b0c 100e8bd4 100e8ce8 100e8e4c     ............L...
20005848:	100e8ed4 100e9038 100e91a0 100e9304     ....8...........
20005858:	100e9480 100e9600 100e9830 100e98f4     ........0.......
20005868:	100e9a5c 100e9b68 100e9c44 100e9d3c     \...h...D...<...
20005878:	100e9ddc 100e9ed4 100e9fbc 100ea068     ............h...
20005888:	100ea138 100ea28c 100ea42c 100ea4fc     8.......,.......
20005898:	100ea5c0 100ea7b4 100eaa8c 100eab58     ............X...
200058a8:	100eaed8 100eb044 100eb7d8 100eb89c     ....D...........
200058b8:	100eb97c 100ebac4 100ebff4 100ec144     |...........D...
200058c8:	100ec2cc 100ec438 100ec928 100eca54     ....8...(...T...
200058d8:	100ecdfc 100ecfcc 100ed6bc 100ed8dc     ................
200058e8:	100edb04 100eddf8 100ee4d4 100ee75c     ............\...
200058f8:	100ee974 100eed50 100ef6ac 100efb74     t...P.......t...

20005908 <SkinnerCol11>:
20005908:	100db4ac 100db568 100db660 100db758     ....h...`...X...
20005918:	100dbc50 100dbd08 100dbdf0 100dbefc     P...............
20005928:	100dc254 100dc340 100dc3ec 100dc488     T...@...........
20005938:	100dc654 100dc6b0 100dc710 100dc774     T...........t...
20005948:	100dc7e4 100dc84c 100dc8b4 100dc9cc     ....L...........
20005958:	100dcf14 100dcf94 100dd13c 100dd1dc     ........<.......
20005968:	100dd280 100dd348 100dd488 100dd590     ....H...........
20005978:	100dd9b8 100ddacc 100ddc2c 100ddcc8     ........,.......
20005988:	100dddb8 100dde54 100ddeb4 100ddf70     ....T.......p...
20005998:	100ddfe8 100de0f0 100de5c0 100de708     ................
200059a8:	100def84 100df020 100df0bc 100df180     .... ...........
200059b8:	100df234 100df300 100df474 100df500     4.......t.......
200059c8:	100df580 100df658 100df770 100df7c4     ....X...p.......
200059d8:	100df800 100df890 100df908 100df9f0     ................
200059e8:	100dfa9c 100dfbfc 100dfdf4 100dff34     ............4...
200059f8:	100e001c 100e0108 100e0354 100e0438     ........T...8...
20005a08:	100e060c 100e07a4 100e09b4 100e0af8     ................
20005a18:	100e0f20 100e102c 100e113c 100e122c      ...,...<...,...
20005a28:	100e13dc 100e1510 100e177c 100e18ac     ........|.......
20005a38:	100e1b40 100e1c98 100e1f14 100e20b0     @............ ..
20005a48:	100e248c 100e25e0 100e2870 100e28cc     .$...%..p(...(..
20005a58:	100e29a8 100e2a40 100e2b90 100e2d54     .)..@*...+..T-..
20005a68:	100e3268 100e3468 100e3950 100e3b68     h2..h4..P9..h;..
20005a78:	100e3f1c 100e420c 100e4b10 100e4f74     .?...B...K..tO..
20005a88:	100e6088 100e6380 100e6730 100e6b10     .`...c..0g...k..

20005a98 <SkinnerCol12>:
20005a98:	100d54d0 100d5538 100d55dc 100d5678     .T..8U...U..xV..
20005aa8:	100d5768 100d57e8 100d5860 100d5930     hW...W..`X..0Y..
20005ab8:	100d5a78 100d5b40 100d5cd0 100d5d48     xZ..@[...\..H]..
20005ac8:	100d5e7c 100d5ee4 100d5fe4 100d604c     |^...^..._..L`..
20005ad8:	100d6094 100d60e8 100d6158 100d61c4     .`...`..Xa...a..
20005ae8:	100d6284 100d6320 100d6424 100d6498     .b.. c..$d...d..
20005af8:	100d6514 100d655c 100d65c0 100d6618     .e..\e...e...f..
20005b08:	100d66d4 100d672c 100d6780 100d67c4     .f..,g...g...g..
20005b18:	100d6808 100d6854 100d6890 100d68e0     .h..Th...h...h..
20005b28:	100d692c 100d6984 100d69d0 100d6a24     ,i...i...i..$j..
20005b38:	100d6a44 100d6aa4 100d6b68 100d6ca0     Dj...j..hk...l..
20005b48:	100d6f44 100d6f98 100d6ff8 100d7064     Do...o...o..dp..
20005b58:	100d70a4 100d7134 100d717c 100d71d4     .p..4q..|q...q..
20005b68:	100d7218 100d7288 100d72e4 100d7364     .r...r...r..ds..
20005b78:	100d73fc 100d747c 100d7508 100d7590     .s..|t...u...u..
20005b88:	100d7694 100d7718 100d77a4 100d7814     .v...w...w...x..
20005b98:	100d7888 100d7900 100d7960 100d7a00     .x...y..`y...z..
20005ba8:	100d7a90 100d7b48 100d7c1c 100d7cec     .z..H{...|...|..
20005bb8:	100d7de4 100d7eb8 100d8050 100d813c     .}...~..P...<...
20005bc8:	100d83d0 100d849c 100d8750 100d8884     ........P.......
20005bd8:	100d8d14 100d8e20 100d8fe0 100d9048     .... .......H...
20005be8:	100d90b8 100d9140 100d91f8 100d9250     ....@.......P...
20005bf8:	100d92c4 100d9330 100d93d4 100d9450     ....0.......P...
20005c08:	100d94e4 100d9618 100d989c 100d99d0     ................
20005c18:	100d9b98 100d9e20 100da3b8 100da7d0     .... ...........

20005c28 <SkinnerCol13>:
20005c28:	100cd4c8 100cd4f4 100cd518 100cd54c     ............L...
20005c38:	100cd560 100cd59c 100cd5c8 100cd600     `...............
20005c48:	100cd618 100cd658 100cd674 100cd6bc     ....X...t.......
20005c58:	100cd728 100cd76c 100cd788 100cd7ec     (...l...........
20005c68:	100cd850 100cd884 100cd8a4 100cd904     P...............
20005c78:	100cd960 100cd9ac 100cd9fc 100cda44     `...........D...
20005c88:	100cda78 100cdab8 100cdaf0 100cdb20     x........... ...
20005c98:	100cdb54 100cdb9c 100cdbc8 100cdc18     T...............
20005ca8:	100cdc80 100cdcb0 100cdccc 100cdd10     ................
20005cb8:	100cdd58 100cdda0 100cddcc 100cde18     X...............
20005cc8:	100cde4c 100cde7c 100cde90 100cded8     L...|...........
20005cd8:	100cdf08 100cdf40 100cdf7c 100cdfb8     ....@...|.......
20005ce8:	100cdfdc 100ce014 100ce034 100ce070     ........4...p...
20005cf8:	100ce09c 100ce0d4 100ce108 100ce13c     ............<...
20005d08:	100ce160 100ce1cc 100ce238 100ce268     `.......8...h...
20005d18:	100ce280 100ce2b8 100ce2cc 100ce300     ................
20005d28:	100ce324 100ce360 100ce38c 100ce3c8     $...`...........
20005d38:	100ce3f0 100ce434 100ce484 100ce4cc     ....4...........
20005d48:	100ce56c 100ce5c0 100ce608 100ce658     l...........X...
20005d58:	100ce680 100ce6d4 100ce72c 100ce75c     ........,...\...
20005d68:	100ce774 100ce7a8 100ce7e4 100ce824     t...........$...
20005d78:	100ce860 100ce8b8 100ce8f8 101658ec     `............X..
20005d88:	100ce90c 100ce940 100ce970 100ce9b0     ....@...p.......
20005d98:	100ce9e0 100cea30 100cea84 100ceac8     ....0...........
20005da8:	100ceb0c 100ceb60 100cebb4 100cec00     ....`...........
20005db8:	100cec54 100cec90 100cecb4 100cecf0     T...............
20005dc8:	100ced0c 100ced44 100ced6c 100cedd0     ....D...l.......
20005dd8:	100cee24 100cee74 100ceeb8 100ceee8     $...t...........
20005de8:	100cef00 100cef4c 100cef8c 100cefc4     ....L...........
20005df8:	100ceff4 100cf074 100cf12c 100cf19c     ....t...,.......
20005e08:	100cf248 100cf2a8 100cf310 100cf360     H...........`...
20005e18:	100cf3a4 100cf410 100cf478 100cf4d0     ........x.......
20005e28:	100cf530 100cf588 100cf618 100cf698     0...............
20005e38:	100cf6f0 100cf730 100cf758 100cf79c     ....0...X.......
20005e48:	100cf800 100cf860 100cf8e0 100cf934     ....`.......4...
20005e58:	100cf984 100cfa04 100cfa80 100cfae4     ................
20005e68:	100cfb50 100cfba8 100cfc10 100cfc64     P...........d...
20005e78:	100cfcdc 100cfd28 100cfd88 100cfdf4     ....(...........
20005e88:	100cfeac 100cfefc 100cffbc 100d0014     ................
20005e98:	100d00a0 100d00e4 100d0118 100d0188     ................
20005ea8:	100d020c 100d024c 100d027c 100d02c0     ....L...|.......
20005eb8:	100d02f8 100d0350 100d03f8 100d0468     ....P.......h...
20005ec8:	100d0534 100d05ac 100d0648 100d0694     4.......H.......
20005ed8:	100d0700 100d0760 100d07f8 100d087c     ....`.......|...
20005ee8:	100d0944 100d09a4 100d0a38 100d0a84     D.......8.......
20005ef8:	100d0ac8 100d0b08 100d0b38 100d0bd0     ........8.......
20005f08:	100d0c50 100d0cd4 100d0d30 100d0d84     P.......0.......
20005f18:	100d0dd8 100d0e24 100d0e40 100d0eb4     ....$...@.......
20005f28:	100d0f14 100d0f7c 100d1024 100d10b4     ....|...$.......
20005f38:	100d11c4 100d129c 100d13fc 100d1444     ............D...
20005f48:	100d14e0 100d1580 100d15d0 100d1634     ............4...
20005f58:	100d16cc 100d1710 100d1734 100d1790     ........4.......
20005f68:	100d17e4 100d1868 100d18b4 100d1914     ....h...........
20005f78:	100d19e4 100d1a30 100d1a58 100d1ad0     ....0...X.......
20005f88:	100d1bc8 100d1c4c 100d1d00 100d1d50     ....L.......P...
20005f98:	100d1d84 100d1dfc 100d1ea4 100d1f28     ............(...
20005fa8:	100d2038 100d20dc 100d2180 100d21dc     8 ... ...!...!..
20005fb8:	100d22c8 100d2328 100d23a0 100d23ec     ."..(#...#...#..
20005fc8:	100d242c 100d24a0 100d2580 100d25e4     ,$...$...%...%..
20005fd8:	100d2694 100d26f8 100d278c 100d27fc     .&...&...'...'..
20005fe8:	100d28b4 100d2928 100d29b0 100d2a24     .(..()...)..$*..
20005ff8:	100d2b1c 100d2bb4 100d2ce0 100d2d68     .+...+...,..h-..
20006008:	100d2e60 100d2ed0 100d2f50 100d2fa4     `.......P/.../..
20006018:	100d2ffc 100d3054 100d30c0 100d3118     ./..T0...0...1..
20006028:	100d3174 100d31cc 100d3234 100d3290     t1...1..42...2..
20006038:	100d32fc 100d334c 100d339c 100d33e8     .2..L3...3...3..
20006048:	100d3484 100d34dc 100d357c 100d35fc     .4...4..|5...5..
20006058:	100d36f4 100d3748 100d37d0 100d381c     .6..H7...7...8..
20006068:	100d38a4 100d3924 100d39dc 100d3a58     .8..$9...9..X:..
20006078:	100d3b20 100d3bbc 100d3d1c 100d3d90      ;...;...=...=..
20006088:	100d3ec0 100d3f24 100d3fac 100d3ffc     .>..$?...?...?..
20006098:	100d404c 100d40cc 100d41a4 100d4234     L@...@...A..4B..
200060a8:	100d42b4 100d432c 100d435c 100d43b8     .B..,C..\C...C..
200060b8:	100d43ec 100d4460 100d44f4 100d455c     .C..`D...D..\E..
200060c8:	100d4624 100d468c 100d46ec 100d475c     $F...F...F..\G..
200060d8:	100d47e4 100d4850 100d48d4 100d495c     .G..PH...H..\I..
200060e8:	100d4a48 100d4ad0 100d4df4 100d4ff4     HJ...J...M...O..
200060f8:	100d51a4 100d53b4                       .Q...S..

20006100 <SkinnerCol14>:
20006100:	100c2d34 100c2d68 100c2d98 100c2dd0     4-..h-...-...-..
20006110:	100c2dec 100c2e2c 100c2e5c 100c2eac     .-..,...\.......
20006120:	100c2eec 100c2f28 100c2f68 100c2fb4     ....(/..h/.../..
20006130:	100c2fec 100c3028 100c3058 100c3098     ./..(0..X0...0..
20006140:	100c30c4 100c30f8 100c311c 100c314c     .0...0...1..L1..
20006150:	100c3164 100c3190 100c31b8 100c3204     d1...1...1...2..
20006160:	100c3260 100c32a0 100c32ec 100c3320     `2...2...2.. 3..
20006170:	100c3340 100c3378 100c33a4 100c33ec     @3..x3...3...3..
20006180:	100c3440 100c347c 100c34a8 100c34e8     @4..|4...4...4..
20006190:	100c3530 100c3574 100c35c0 100c35fc     05..t5...5...5..
200061a0:	100c362c 100c3684 100c36f0 100c3754     ,6...6...6..T7..
200061b0:	100c37b4 100c3818 100c3894 100c3928     .7...8...8..(9..
200061c0:	100c39b4 100c39f4 100c3a18 100c3a64     .9...9...:..d:..
200061d0:	100c3ac8 100c3b1c 100c3b68 100c3bb4     .:...;..h;...;..
200061e0:	100c3be0 100c3c24 100c3c58 100c3ce0     .;..$<..X<...<..
200061f0:	100c3da4 100c3e08 100c3e9c 100c3ef8     .=...>...>...>..
20006200:	100c3f7c 100c3fd4 100c4038 100c4098     |?...?..8@...@..
20006210:	100c410c 100c4188 100c4250 100c42b0     .A...A..PB...B..
20006220:	100c430c 100c4364 100c43e0 100c442c     .C..dC...C..,D..
20006230:	100c447c 100c44cc 100c451c 100c455c     |D...D...E..\E..
20006240:	100c4590 100c45d0 100c4620 100c4674     .E...E.. F..tF..
20006250:	100c46e4 100c4740 100c4794 100c4804     .F..@G...G...H..
20006260:	100c48b0 100c4910 100c4974 100c49e0     .H...I..tI...I..
20006270:	100c4a88 100c4aec 100c4b98 100c4be4     .J...J...K...K..
20006280:	100c4c3c 100c4c84 100c4ca4 100c4cec     <L...L...L...L..
20006290:	100c4d28 100c4d68 100c4d94 100c4de4     (M..hM...M...M..
200062a0:	100c4e14 100c4e50 100c4e94 100c4f14     .N..PN...N...O..
200062b0:	100c4fd8 100c5054 100c5154 100c519c     .O..TP..TQ...Q..
200062c0:	100c51f8 100c5240 100c5274 100c52c8     .Q..@R..tR...R..
200062d0:	100c5350 100c53a4 100c5410 100c548c     PS...S...T...T..
200062e0:	100c55a4 100c55e0 100c5640 100c568c     .U...U..@V...V..
200062f0:	100c56d4 100c5740 100c57c8 100c5814     .V..@W...W...X..
20006300:	100c5858 100c58b0 100c58e8 100c5994     XX...X...X...Y..
20006310:	100c59f0 100c5a54 100c5a7c 100c5ae4     .Y..TZ..|Z...Z..
20006320:	100c5b1c 100c5b58 100c5b6c 100c5bb8     .[..X[..l[...[..
20006330:	100c5c24 100c5c70 100c5c9c 100c5cf8     $\..p\...\...\..
20006340:	100c5d28 100c5d84 100c5db4 100c5e10     (]...]...]...^..
20006350:	100c5e48 100c5ea4 100c5ee4 100c5f3c     H^...^...^..<_..
20006360:	100c5f80 100c5ffc 100c6044 100c60a0     ._..._..D`...`..
20006370:	100c60fc 100c6150 100c6198 100c61f8     .`..Pa...a...a..
20006380:	100c624c 100c62d0 100c6364 100c63c4     Lb...b..dc...c..
20006390:	100c6460 100c64dc 100c6590 100c65fc     `d...d...e...e..
200063a0:	100c6690 100c6734 100c684c 100c68cc     .f..4g..Lh...h..
200063b0:	100c6998 100c6a20 100c6ac0 100c6afc     .i.. j...j...j..
200063c0:	100c6b50 100c6b9c 100c6be0 100c6c2c     Pk...k...k..,l..
200063d0:	100c6c5c 100c6cd4 100c6d5c 100c6ddc     \l...l..\m...m..
200063e0:	100c6e88 100c6efc 100c6f4c 100c7000     .n...n..Lo...p..
200063f0:	100c711c 100c7184 100c7250 100c72c8     .q...q..Pr...r..
20006400:	100c73f0 100c7488 100c768c 100c76e8     .s...t...v...v..
20006410:	100c7734 100c77b0 100c7890 100c7928     4w...w...x..(y..
20006420:	100c7a3c 100c7a8c 100c7ad8 100c7b74     <z...z...z..t{..
20006430:	100c7cc0 100c7d68 100c7ea8 100c7f44     .|..h}...~..D...
20006440:	100c8078 100c80bc 100c8108 100c8154     x...........T...
20006450:	100c81b4 100c821c 100c8314 100c8388     ................
20006460:	100c83cc 100c8434 100c84e8 100c8590     ....4...........
20006470:	100c8734 100c87bc 100c88e4 100c892c     4...........,...
20006480:	100c8964 100c89bc 100c89f4 100c8ac4     d...............
20006490:	100c8b78 100c8c08 100c8c50 100c8cec     x.......P.......
200064a0:	100c8e78 100c8eec 100c8fa8 100c9044     x...........D...
200064b0:	100c91d8 100c9268 100c9358 100c9410     ....h...X.......
200064c0:	100c9598 100c9628 100c978c 100c97cc     ....(...........
200064d0:	100c9818 100c989c 100c9970 100c99e0     ........p.......
200064e0:	100c9a50 100c9b10 100c9d34 100c9de4     P.......4.......
200064f0:	100c9fc8 100ca00c 100ca044 100ca0b0     ........D.......
20006500:	100ca150 100ca1cc 100ca2cc 100ca3c0     P...............
20006510:	100ca43c 100ca53c 100ca5b8 100ca848     <...<.......H...
20006520:	100caa30 100caeb8 100cb124 100cb608     0.......$.......
20006530:	100cc9b8 100cd070                       ....p...

20006538 <SkinnerCol15>:
20006538:	100bccac 100bcce8 100bcd30 100bcd60     ........0...`...
20006548:	100bcd94 100bcdd8 100bce10 100bce50     ............P...
20006558:	100bce74 100bceb0 100bcefc 100bcf3c     t...........<...
20006568:	100bcf88 100bcfdc 100bd078 100bd104     ........x.......
20006578:	100bd15c 100bd1cc 100bd254 100bd298     \.......T.......
20006588:	100bd2ec 100bd354 100bd404 100bd448     ....T.......H...
20006598:	100bd4c8 100bd508 100bd57c 100bd5c4     ........|.......
200065a8:	100bd654 100bd694 100bd6d8 100bd72c     T...........,...
200065b8:	100bd798 100bd7e4 100bd874 100bd8bc     ........t.......
200065c8:	100bd8f8 100bd944 100bd994 100bd9fc     ....D...........
200065d8:	100bda38 100bda98 100bdb30 100bdbc8     8.......0.......
200065e8:	100bdcac 100bdd74 100bddf8 100bdec0     ....t...........
200065f8:	100bdf90 100bdff8 100be038 100be0b4     ........8.......
20006608:	100be160 100be1d8 100be2b0 100be2fc     `...............
20006618:	100be340 100be3a4 100be428 100be484     @.......(.......
20006628:	100be4bc 100be548 100be64c 100be6fc     ....H...L.......
20006638:	100be83c 100be914 100beadc 100beb20     <........... ...
20006648:	100beb70 100bebb4 100bebd8 100bec60     p...........`...
20006658:	100bed14 100bed58 100bedc0 100bee0c     ....X...........
20006668:	100bee78 100beef0 100bef40 100befe8     x.......@.......
20006678:	100bf10c 100bf180 100bf250 100bf2c0     ........P.......
20006688:	100bf33c 100bf3ac 100bf42c 100bf47c     <.......,...|...
20006698:	100bf4ac 100bf538 100bf5fc 100bf6cc     ....8...........
200066a8:	100bf7b0 100bf878 100bfb5c 100bfba4     ....x...\.......
200066b8:	100bfbf4 100bfc3c 100bfc60 100bfcac     ....<...`.......
200066c8:	100bfce0 100bfd34 100bfdac 100bfe08     ....4...........
200066d8:	100bfe5c 100bfebc 100bff1c 100bffc8     \...............
200066e8:	100c0110 100c0194 100c01f0 100c0268     ............h...
200066f8:	100c02f4 100c03a4 100c0424 100c0518     ........$.......
20006708:	100c0600 100c06c8 100c077c 100c07d4     ........|.......
20006718:	100c0874 100c08b0 100c08e4 100c0920     t........... ...
20006728:	100c0948 100c0988 100c09dc 100c0a38     H...........8...
20006738:	100c0a94 100c0ad8 100c0b10 100c0b60     ............`...
20006748:	100c0ba0 100c0bdc 100c0c04 100c0c48     ............H...
20006758:	100c0c6c 100c0cac 100c0cf0 100c0d3c     l...........<...
20006768:	100c0d74 100c0dac 100c0de8 100c0e30     t...........0...
20006778:	100c0e8c 100c0edc 100c0f28 100c0f70     ........(...p...
20006788:	100c0fc0 100c0ffc 100c1034 100c1084     ........4.......
20006798:	100c10cc 100c1118 100c115c 100c119c     ........\.......
200067a8:	100c11d8 100c1218 100c1248 100c1290     ........H.......
200067b8:	100c12d8 100c1318 100c134c 100c1384     ........L.......
200067c8:	100c13bc 100c1410 100c145c 100c14a4     ........\.......
200067d8:	100c14e0 100c1524 100c1568 100c15ac     ....$...h.......
200067e8:	100c15f0 100c164c 100c16a8 100c1710     ....L...........
200067f8:	100c1764 100c17a4 100c17d0 100c1808     d...............
20006808:	100c182c 100c1868 100c1888 100c18d8     ,...h...........
20006818:	100c18f8 100c1938 100c1960 100c19a0     ....8...`.......
20006828:	100c19cc 100c1a10 100c1a34 100c1a80     ........4.......
20006838:	100c1ac0 100c1af8 100c1b2c 100c1b6c     ........,...l...
20006848:	100c1bbc 100c1bf4 100c1c30 100c1c64     ........0...d...
20006858:	100c1c90 100c2438                       ....8$..

20006860 <SkinnerCol16>:
20006860:	100aed78 100aedac 100aedcc 100aee18     x...............
20006870:	100aee68 100aeea8 100aeed4 100aef14     h...............
20006880:	100aef58 100aefbc 100af014 100af094     X...............
20006890:	100af12c 100af18c 100af214 100af260     ,...........`...
200068a0:	100af280 100af2f4 100af394 100af420     ............ ...
200068b0:	100af4e8 100af52c 100af548 100af594     ....,...H.......
200068c0:	100af5c8 100af610 100af658 100af6a4     ........X.......
200068d0:	100af704 100af758 100af790 100af7d4     ....X...........
200068e0:	100af820 100af860 100af8bc 100af918      ...`...........
200068f0:	100af948 100af990 100af9dc 100afa18     H...............
20006900:	100afa50 100afaa0 100afafc 100afb40     P...........@...
20006910:	100afb64 100afbc4 100afc08 100afc78     d...........x...
20006920:	100afcec 100afd70 100afea0 100afef0     ....p...........
20006930:	100aff28 100aff80 100affd8 100b003c     (...........<...
20006940:	100b0078 100b00ec 100b0144 100b0208     x.......D.......
20006950:	100b0330 100b0374 100b03dc 100b0448     0...t.......H...
20006960:	100b04fc 100b0558 100b05c8 100b0618     ....X...........
20006970:	100b064c 100b06a8 100b0724 100b07c4     L.......$.......
20006980:	100b0818 100b0870 100b08c4 100b0920     ....p....... ...
20006990:	100b094c 100b0a30 100b0b54 100b0c18     L...0...T.......
200069a0:	100b0d60 100b0e08 100b0ee8 100b1010     `...............
200069b0:	100b1238 100b1294 100b1338 100b13a4     8.......8.......
200069c0:	100b1468 100b14d0 100b1560 100b160c     h.......`.......
200069d0:	100b172c 100b1788 100b1884 100b18dc     ,...............
200069e0:	100b19dc 100b1a34 100b1b4c 100b1c30     ....4...L...0...
200069f0:	100b1dbc 100b1e08 100b1e44 100b1e90     ........D.......
20006a00:	100b1ecc 100b1f18 100b1f50 100b1f9c     ........P.......
20006a10:	100b1fd8 100b2044 100b20a0 100b2140     ....D ... ..@!..
20006a20:	100b2344 100b23c8 100b2450 100b2508     D#...#..P$...%..
20006a30:	100b2580 100b261c 100b26a4 100b2744     .%...&...&..D'..
20006a40:	100b27b0 100b2820 100b284c 100b28d8     .'.. (..L(...(..
20006a50:	100b2934 100b29a0 100b2a14 100b2a80     4)...)...*...*..
20006a60:	100b2ac4 100b2b1c 100b2b60 100b2bb8     .*...+..`+...+..
20006a70:	100b2bf8 100b2c5c 100b2cfc 100b2d64     .+..\,...,..d-..
20006a80:	100b2e14 100b2e90 100b2f84 100b3010     ........./...0..
20006a90:	100b309c 100b3104 100b31dc 100b3258     .0...1...1..X2..
20006aa0:	100b3308 100b336c 100b33c4 100b3424     .3..l3...3..$4..
20006ab0:	100b34b8 100b3590 100b37fc 100b3894     .4...5...7...8..
20006ac0:	100b399c 100b3a04 100b3a4c 100b3ae0     .9...:..L:...:..
20006ad0:	100b3b5c 100b3bc8 100b3c20 100b3cb8     \;...;.. <...<..
20006ae0:	100b3d7c 100b3dec 100b3e80 100b3ef4     |=...=...>...>..
20006af0:	100b3f44 100b3fb0 100b401c 100b4080     D?...?...@...@..
20006b00:	100b40e4 100b41bc 100b445c 100b44c8     .@...A..\D...D..
20006b10:	100b4544 100b4594 100b45f4 100b468c     DE...E...E...F..
20006b20:	100b4778 100b47f8 100b4850 100b48d0     xG...G..PH...H..
20006b30:	100b4930 100b49b4 100b4a04 100b4a88     0I...I...J...J..
20006b40:	100b4ad8 100b4b5c 100b4bd8 100b4c60     .J..\K...K..`L..
20006b50:	100b4cc0 100b4d4c 100b4de8 100b4e74     .L..LM...M..tN..
20006b60:	100b4f30 100b4fd4 100b5040 100b50e4     0O...O..@P...P..
20006b70:	100b5144 100b51e8 100b527c 100b5324     DQ...Q..|R..$S..
20006b80:	100b539c 100b5a60 100bbfbc 100bc770     .S..`Z......p...

20006b90 <SkinnerCol2>:
20006b90:	10134fb4 10135024 101350e0 10135154     .O..$P...P..TQ..
20006ba0:	10135264 10135324 10135494 1013555c     dR..$S...T..\U..
20006bb0:	10135754 101357e8 1013594c 10135a5c     TW...W..LY..\Z..
20006bc0:	10135db0 10135e7c 101361ec 101362b8     .]..|^...a...b..
20006bd0:	10136600 101367d8 101375ec 1013773c     .f...g...u..<w..
20006be0:	10137950 10137a50 10137c7c 10137cf4     Py..Pz..||...|..
20006bf0:	10137d4c 10137e58 10138030 101380e8     L}..X~..0.......
20006c00:	101381d8 1013838c 10138618 101386d0     ................
20006c10:	101387d0 101389d0 10138ee4 10139094     ................
20006c20:	10139724 10139840 10139a90 10139ba4     $...@...........
20006c30:	1013a178 1013a290 1013a4c0 1013a630     x...........0...
20006c40:	1013abb8 1013ada4 1013b368 1013b4dc     ........h.......
20006c50:	1013b89c 1013ba2c 1013bdc8 1013beac     ....,...........
20006c60:	1013c0f8 1013c20c 1013c3a8 1013c560     ............`...
20006c70:	1013cc18 1013cdc8 1013cff8 1013d0c8     ................
20006c80:	1013d3ec 1013d4e4 1013d6e8 1013d78c     ................
20006c90:	1013d7f4 1013d91c 1013dbe4 1013dc48     ............H...
20006ca0:	1013dc90 1013dd70 1013dfe8 1013e118     ....p...........
20006cb0:	1013e1f8 1013e3c8 1013e880 1013ea20     ............ ...
20006cc0:	1013f174 1013f228 1013f370 1013f580     t...(...p.......
20006cd0:	1013f9b0 1013fa4c 1013faf4 1013fc50     ....L.......P...
20006ce0:	101404e4 10140658 10140bb8 10140ca4     ....X...........
20006cf0:	10140ddc 10140ee0 101411d0 101413b8     ................
20006d00:	10141a84 10141b90 10141d4c 10141e3c     ........L...<...
20006d10:	10141f14 10142090 10142530 10142730     ..... ..0%..0'..

20006d20 <SkinnerCol3>:
20006d20:	101297f4 10129860 10129954 101299d4     ....`...T.......
20006d30:	10129acc 10129b7c 10129d58 10129e6c     ....|...X...l...
20006d40:	1012a280 1012a318 1012a458 1012a570     ........X...p...
20006d50:	1012a6b0 1012a754 1012a818 1012a8a4     ....T...........
20006d60:	1012a960 1012aa08 1012ab2c 1012abd8     `.......,.......
20006d70:	1012ac30 1012ad24 1012add4 1012ae74     0...$.......t...
20006d80:	1012af8c 1012b038 1012b284 1012b30c     ....8...........
20006d90:	1012b3fc 1012b4c4 1012b5c8 1012b64c     ............L...
20006da0:	1012b69c 1012b7a4 1012b8b4 1012b9a4     ................
20006db0:	1012bbb0 1012bca0 1012be78 1012bf2c     ........x...,...
20006dc0:	1012c030 1012c110 1012c1c4 1012c2ec     0...............
20006dd0:	1012c630 1012c720 1012c894 1012c99c     0... ...........
20006de0:	1012caf8 1012cc24 1012cd8c 1012cec0     ....$...........
20006df0:	1012d158 1012d288 1012d570 1012d688     X.......p.......
20006e00:	1012d890 1012da60 1012dd18 1012def0     ....`...........
20006e10:	1012e368 1012e4b0 1012e6c0 1012e814     h...............
20006e20:	1012ecdc 1012edf4 1012f244 1012f3ac     ........D.......
20006e30:	1012f954 1012fa34 1012fe2c 1012ffbc     T...4...,.......
20006e40:	101300a8 1013020c 10130458 10130544     ........X...D...
20006e50:	101306b8 10130804 10130b74 10130d48     ........t...H...
20006e60:	1013116c 10131354 10131c94 10131e50     l...T.......P...
20006e70:	10132280 10132394 101327dc 101328e0     ."...#...'...(..
20006e80:	10132a04 10132b08 10132bd8 10132d60     .*...+...+..`-..
20006e90:	10132fd0 10133158 101332ec 101334ac     ./..X1...2...4..
20006ea0:	1013389c 10133a94 10133ecc 101340d0     .8...:...>...@..

20006eb0 <SkinnerCol4>:
20006eb0:	10120b1c 10120b7c 10120c18 10120c74     ....|.......t...
20006ec0:	10120cdc 10120d34 10120dc8 10120e2c     ....4.......,...
20006ed0:	10120ec0 10120f10 10120f3c 10120fc8     ........<.......
20006ee0:	10121194 10121230 10121368 1012143c     ....0...h...<...
20006ef0:	10121684 101216f8 101217d8 1012183c     ............<...
20006f00:	10121890 10121900 10121a14 10121aa0     ................
20006f10:	10121be8 10121c78 10121d70 10121df0     ....x...p.......
20006f20:	10121e4c 10121ed4 10121f74 1012202c     L.......t..., ..
20006f30:	10122124 10122218 10122340 10122474     $!..."..@#..t$..
20006f40:	10122824 10122898 10122914 10122994     $(...(...)...)..
20006f50:	10122a08 10122a80 10122b3c 10122bd4     .*...*..<+...+..
20006f60:	10122d4c 10122dd0 10122ef0 10122fb0     L-...-......./..
20006f70:	10123234 1012330c 101235b4 1012364c     42...3...5..L6..
20006f80:	1012375c 1012380c 10123a34 10123b0c     \7...8..4:...;..
20006f90:	10123ca4 10123d4c 10123e64 10123fbc     .<..L=..d>...?..
20006fa0:	101244ac 10124568 101246bc 101247e8     .D..hE...F...G..
20006fb0:	10124a44 10124b70 10124db4 10124e78     DJ..pK...M..xN..
20006fc0:	10124f18 10125018 101250e0 101251ec     .O...P...P...Q..
20006fd0:	10125318 10125394 101253e8 10125490     .S...S...S...T..
20006fe0:	10125558 10125680 10125800 1012599c     XU...V...X...Y..
20006ff0:	10126244 10126338 101264bc 101265d4     Db..8c...d...e..
20007000:	10126a14 10126b94 10127230 10127434     .j...k..0r..4t..
20007010:	10127980 10127ae8 10127d24 10127eec     .y...z..$}...~..
20007020:	1012820c 101283ec 101285f4 101287f4     ................
20007030:	10128c68 10128e7c 101292dc 1012950c     h...|...........

20007040 <SkinnerCol5>:
20007040:	10116508 10116554 101165e4 10116628     .e..Te...e..(f..
20007050:	10116694 101166f4 101167d0 10116830     .f...f...g..0h..
20007060:	1011691c 10116990 10116a3c 10116ab0     .i...i..<j...j..
20007070:	10116bb4 10116c2c 10116ca4 10116d34     .k..,l...l..4m..
20007080:	10116e24 10116ee8 10117034 101170a0     $n...n..4p...p..
20007090:	10117154 101171dc 10117254 101172a8     Tq...q..Tr...r..
200070a0:	10117334 1011738c 1011741c 101174b4     4s...s...t...t..
200070b0:	10117570 101175d8 1011769c 1011770c     pu...u...v...w..
200070c0:	1011785c 10117950 101179e4 10117a58     \x..Py...y..Xz..
200070d0:	10117b0c 10117c04 10117e48 10117f0c     .{...|..H~......
200070e0:	10118180 10118234 10118434 101184e0     ....4...4.......
200070f0:	10118724 101187c0 101189ec 10118a6c     $...........l...
20007100:	10118dac 10118ec0 10119108 10119228     ............(...
20007110:	10119700 10119904 1011ae80 1011af80     ................
20007120:	1011b1a8 1011b2f4 1011b3d4 1011b4a8     ................
20007130:	1011b744 1011b84c 1011bb40 1011bbc4     D...L...@.......
20007140:	1011bc24 1011bcc4 1011bd78 1011be2c     $.......x...,...
20007150:	1011beb0 1011bf68 1011c084 1011c13c     ....h.......<...
20007160:	1011c1f0 1011c2fc 1011c408 1011c554     ............T...
20007170:	1011c868 1011c984 1011cc08 1011cd34     h...........4...
20007180:	1011ceac 1011d00c 1011d220 1011d3d4     ........ .......
20007190:	1011d640 1011d7fc 1011dae8 1011dc94     @...............
200071a0:	1011deb4 1011e044 1011e21c 1011e3d8     ....D...........
200071b0:	1011e9a0 1011eba4 1011f118 1011f344     ............D...
200071c0:	1011f654 1011f8a8 1011fcf0 1011ffe4     T...............

200071d0 <SkinnerCol6>:
200071d0:	1010cc64 1010ccdc 1010cdc4 1010ce10     d...............
200071e0:	1010ce78 1010cecc 1010cf48 1010cf94     x.......H.......
200071f0:	1010cfd0 1010d044 1010d0d8 1010d134     ....D.......4...
20007200:	1010d1d0 1010d27c 1010d3ec 1010d458     ....|.......X...
20007210:	1010d514 1010d58c 1010d660 1010d6e0     ........`.......
20007220:	1010d898 1010d91c 1010da30 1010da98     ........0.......
20007230:	1010db04 1010dba0 1010dc60 1010dd3c     ........`...<...
20007240:	1010dfb0 1010e098 1010e170 1010e240     ........p...@...
20007250:	1010e320 1010e464 1010e758 1010e844      ...d...X...D...
20007260:	1010e940 1010ea4c 1010eba0 1010ec24     @...L.......$...
20007270:	1010eccc 1010ed3c 1010eda0 1010ee10     ....<...........
20007280:	1010eea4 1010ef14 1010ef84 1010eff4     ................
20007290:	1010f07c 1010f0ec 1010f14c 1010f1bc     |.......L.......
200072a0:	1010f214 1010f284 1010f2e0 1010f350     ............P...
200072b0:	1010f3c0 1010f440 1010f4a0 1010f520     ....@....... ...
200072c0:	1010f5b4 1010f66c 1010f720 1010f7d8     ....l... .......
200072d0:	1010f860 1010f918 1010f9d8 1010facc     `...............
200072e0:	1010fc38 1010fd1c 1010fe68 1010ff44     8.......h...D...
200072f0:	1010ffd8 101100bc 1011021c 10110340     ............@...
20007300:	1011049c 101105b8 10110750 101108dc     ........P.......
20007310:	10111170 101112d4 1011143c 101115e4     p.......<.......
20007320:	10111888 10111a3c 10111e9c 10112060     ....<.......` ..
20007330:	1011231c 10112548 101128e0 10112b94     .#..H%...(...+..
20007340:	10113258 10113548 10113dc4 10114140     X2..H5...=..@A..
20007350:	10114820 10114c08 10115690 10115b44      H...L...V..D[..

20007360 <SkinnerCol7>:
20007360:	10103aa4 10103b20 10103ba8 10103c10     .:.. ;...;...<..
20007370:	10103c70 10103cf8 10103de0 10103e38     p<...<...=..8>..
20007380:	10103e84 10103eec 10103f58 10103fb4     .>...>..X?...?..
20007390:	10104060 101040ac 10104110 10104158     `@...@...A..XA..
200073a0:	10104184 101041d8 10104244 101042a4     .A...A..DB...B..
200073b0:	1010431c 1010435c 101043ec 1010443c     .C..\C...C..<D..
200073c0:	101044c0 1010453c 101045a8 1010460c     .D..<E...E...F..
200073d0:	10104704 10104774 101047e8 10104880     .G..tG...G...H..
200073e0:	101049b4 10104a28 10104ac8 10104b3c     .I..(J...J..<K..
200073f0:	10104bac 10104c18 10104c60 10104cd8     .K...L..`L...L..
20007400:	10104d2c 10104db8 10104e94 10104f50     ,M...M...N..PO..
20007410:	10105050 101050f8 1010524c 10105300     PP...P..LR...S..
20007420:	101053e0 10105480 10105528 10105620     .S...T..(U.. V..
20007430:	10105788 10105848 10105b0c 10105be8     .W..HX...[...[..
20007440:	10105d8c 10105e60 10106104 10106244     .]..`^...a..Db..
20007450:	10106434 101064d0 10106540 101065ec     4d...d..@e...e..
20007460:	10106670 10106720 101067c8 10106880     pf.. g...g...h..
20007470:	10106a10 10106af8 10106c4c 10106d2c     .j...j..Ll..,m..
20007480:	10106e78 10106f64 10107060 10107154     xn..do..`p..Tq..
20007490:	101072c4 101073f4 10107544 101076c4     .r...s..Du...v..
200074a0:	10107a08 10107ba8 101080fc 10108380     .z...{..........
200074b0:	10108838 10108a40 10108b8c 10108d8c     8...@...........
200074c0:	10108f68 10109188 101098e0 10109c58     h...........X...
200074d0:	1010aa58 1010ad4c 1010b538 1010b6e0     X...L...8.......
200074e0:	1010b89c 1010bbf0 1010c014 1010c5ac     ................

200074f0 <SkinnerCol8>:
200074f0:	100f6db4 100f6e18 100f6e80 100f6ee8     .m...n...n...n..
20007500:	100f6f48 100f6f90 100f6fd4 100f703c     Ho...o...o..<p..
20007510:	100f70c4 100f712c 100f71b0 100f7228     .p..,q...q..(r..
20007520:	100f72e0 100f7398 100f758c 100f764c     .r...s...u..Lv..
20007530:	100f77f0 100f789c 100f7900 100f7990     .w...x...y...y..
20007540:	100f7a08 100f7a98 100f7b14 100f7b64     .z...z...{..d{..
20007550:	100f7c30 100f7c8c 100f7ce8 100f7d58     0|...|...|..X}..
20007560:	100f7dc0 100f7e48 100f7ec4 100f7f78     .}..H~...~..x...
20007570:	100f7fdc 100f80bc 100f8488 100f8598     ................
20007580:	100f8670 100f8700 100f87cc 100f8868     p...........h...
20007590:	100f8984 100f8a08 100f8ba0 100f8ca4     ................
200075a0:	100f8dec 100f8e68 100f8ecc 100f8f50     ....h.......P...
200075b0:	100f8fb8 100f9034 100f90b0 100f9158     ....4.......X...
200075c0:	100f91d4 100f9258 100f932c 100f94a8     ....X...,.......
200075d0:	100f9784 100f986c 100f992c 100f9a24     ....l...,...$...
200075e0:	100f9bd0 100f9cec 100f9f30 100f9fb8     ........0.......
200075f0:	100fa0b0 100fa1f8 100fa534 100fa6a4     ........4.......
20007600:	100fa7fc 100fa91c 100faa54 100fac54     ........T...T...
20007610:	100fae94 100fafc4 100fb258 100fb440     ........X...@...
20007620:	100fc570 100fc674 100fc834 100fc99c     p...t...4.......
20007630:	100fcc04 100fcd34 100fceec 100fd1b4     ....4...........
20007640:	100fd788 100fda5c 100fdef4 100fe034     ....\.......4...
20007650:	100fe158 100fe318 100fe5a0 100fe6cc     X...............
20007660:	100fe8e4 100fec44 100ffcd0 1010012c     ....D.......,...
20007670:	10100f10 10101490 10102f60 1010358c     ........`/...5..

20007680 <SkinnerCol9>:
20007680:	100f014c 100f01cc 100f0308 100f038c     L...............
20007690:	100f03d8 100f043c 100f046c 100f04c0     ....<...l.......
200076a0:	100f0548 100f0590 100f05d0 100f0634     H...........4...
200076b0:	100f06bc 100f0724 100f078c 100f0838     ....$.......8...
200076c0:	100f093c 100f09f0 100f0b80 100f0c18     <...............
200076d0:	100f0dc4 100f0e74 100f0fd4 100f103c     ....t.......<...
200076e0:	100f1098 100f1154 100f1360 100f13fc     ....T...`.......
200076f0:	100f1524 100f15ec 100f16fc 100f1784     $...............
20007700:	100f1898 100f18fc 100f1a1c 100f1a94     ................
20007710:	100f1b0c 100f1b8c 100f1c04 100f1cac     ................
20007720:	100f1d44 100f1e08 100f1ec0 100f1f44     D...........D...
20007730:	100f2000 100f20b0 100f2168 100f21fc     . ... ..h!...!..
20007740:	100f22dc 100f2338 100f23b4 100f2410     ."..8#...#...$..
20007750:	100f2470 100f24cc 100f2540 100f25bc     p$...$..@%...%..
20007760:	100f2654 100f26cc 100f273c 100f27c0     T&...&..<'...'..
20007770:	100f2818 100f29b0 100f2b54 100f2bf4     .(...)..T+...+..
20007780:	100f2c94 100f2d34 100f2dc8 100f2e90     .,..4-...-......
20007790:	100f2fa8 100f3058 100f317c 100f32b0     ./..X0..|1...2..
200077a0:	100f3454 100f3540 100f3624 100f3710     T4..@5..$6...7..
200077b0:	100f37b0 100f389c 100f39ac 100f3a98     .7...8...9...:..
200077c0:	100f3c14 100f3d00 100f3f14 100f4000     .<...=...?...@..
200077d0:	100f4114 100f4200 100f427c 100f4398     .A...B..|B...C..
200077e0:	100f45dc 100f4794 100f4e14 100f4ef0     .E...G...N...N..
200077f0:	100f4fa4 100f5134 100f538c 100f55c8     .O..4Q...S...U..
20007800:	100f5a44 100f5cb8 100f5fe4 100f65d8     DZ...\..._...e..

20007810 <SladkeyCol1>:
20007810:	1014f528 1014f574 1014f5e8 1014f630     (...t.......0...
20007820:	1014f6c0 1014f700 1014f764 1014f7b4     ........d.......
20007830:	1014f834 1014f884 1014f8fc 1014f960     4...........`...
20007840:	1014f9dc 1014fa20 1014fa6c 1014fabc     .... ...l.......
20007850:	1014fb58 1014fbac 1014fc24 1014fc7c     X.......$...|...
20007860:	1014fd04 1014fd54 1014fde4 1014fe2c     ....T.......,...
20007870:	1014feb0 1014ff0c 1014ffb4 1015000c     ................
20007880:	101500a4 10150104 101501ec 10150240     ............@...
20007890:	101503a8 101503f0 1015046c 101504b4     ........l.......
200078a0:	10150520 10150578 101505e0 10150634      ...x.......4...
200078b0:	101506bc 10150710 101507e8 1015083c     ............<...
200078c0:	101508a8 101508fc 10150970 101509bc     ........p.......
200078d0:	10150a4c 10150aa0 10150b30 10150b84     L.......0.......
200078e0:	10150c08 10150c48 10150ca4 10150ce0     ....H...........
200078f0:	10150d38 10150d7c 10150e0c 10150e60     8...|.......`...
20007900:	10150ed8 10150f28 10150f98 10150fd8     ....(...........
20007910:	1015106c 101510c0 1015115c 101511ac     l.......\.......
20007920:	10151228 1015127c 1015131c 10151368     (...|.......h...
20007930:	10151420 10151478 10151548 1015158c      ...x...H.......
20007940:	10151610 1015166c 101516f4 10151754     ....l.......T...
20007950:	10151824 10151874 101518f8 1015194c     $...t.......L...
20007960:	101519b0 10151a04 10151a74 10151ac0     ........t.......
20007970:	10151b80 10151be8 10151c94 10151cf8     ................
20007980:	10151d98 10151df0 10151e78 10151ed0     ........x.......
20007990:	10151f6c 10151fcc 101520ac 10152130     l........ ..0!..

200079a0 <DamgaardCol1>:
200079a0:	10152380 101523c8 101524b0 10152504     .#...#...$...%..
200079b0:	10152648 1015269c 10152790 101527e4     H&...&...'...'..
200079c0:	10152908 1015295c 10152ac0 10152b14     .)..\)...*...+..
200079d0:	10152c54 10152ca4 10152e44 10152e94     T,...,..D.......
200079e0:	10153018 10153064 10153140 1015319c     .0..d0..@1...1..
200079f0:	10153374 101533b0 10153444 10153480     t3...3..D4...4..
20007a00:	101534f8 10153534 101535ac 101535e8     .4..45...5...5..
20007a10:	10153660 101536a8 101537ac 101537f8     `6...6...7...7..
20007a20:	10153930 10153978 10153a94 10153ae0     09..x9...:...:..
20007a30:	10153bfc 10153c4c 10153da4 10153df0     .;..L<...=...=..
20007a40:	10153f18 10153f64 101540b8 10154104     .?..d?...@...A..
20007a50:	10154288 101542d4 10154480 101544cc     .B...B...D...D..
20007a60:	10154668 101546b4 1015487c 101548c8     hF...F..|H...H..
20007a70:	10154a94 10154ae0 10154c98 10154cec     .J...J...L...L..

20007a80 <LomaCol1>:
20007a80:	10154f4c 10154fa0 10155020 1015506c     LO...O.. P..lP..
20007a90:	101550c0 1015511c 101551bc 1015523c     .P...Q...Q..<R..
20007aa0:	10155280 101552e8 10155348 101553c4     .R...R..HS...S..
20007ab0:	10155444 10155498 10155500 10155544     DT...T...U..DU..
20007ac0:	1015559c 10155620 1015566c 101556c8     .U.. V..lV...V..
20007ad0:	1015571c 10155760 1015577c 101557c8     .W..`W..|W...W..
20007ae0:	10155800 10155844 101558a4 101558e4     .X..DX...X...X..
20007af0:	10155938 101559a4 101559e4 10155a30     8Y...Y...Y..0Z..
20007b00:	10155a70 10155ab0 10155ad0 10155b1c     pZ...Z...Z...[..
20007b10:	10155b60 10155bbc 10155c60 10155cb4     `[...[..`\...\..
20007b20:	10155d00 10155d54 10155dd4 10155e3c     .]..T]...]..<^..
20007b30:	10155e8c 10155ecc 10155f08 10155f48     .^...^..._..H_..
20007b40:	10155f58 10155fb4 10155ff8 1015604c     X_..._..._..L`..
20007b50:	101560b0 10156114 10156184 10156208     .`...a...a...b..
20007b60:	10156248 101562a4 101562e0 1015635c     Hb...b...b..\c..
20007b70:	1015639c 101563e0 1015642c 10156494     .c...c..,d...d..
20007b80:	10156504 1015654c 101565a4 101565f8     .e..Le...e...e..
20007b90:	10156630 10156694 101566c4 10156708     0f...f...f...g..
20007ba0:	1015673c 10156788 101567f0 10156858     <g...g...g..Xh..
20007bb0:	101568f0 10156960 101569d4 10156a2c     .h..`i...i..,j..
20007bc0:	10156a6c 10156ab0 10156ac4 10156b10     lj...j...j...k..
20007bd0:	10156b54 10156ba8 10156bec 10156c48     Tk...k...k..Hl..
20007be0:	10156ca4 10156d20 10156d78 10156dfc     .l.. m..xm...m..
20007bf0:	10156e58 10156eb4 10156ed8 10156f1c     Xn...n...n...o..
20007c00:	10156f48 10156f94 10156fd8 10157048     Ho...o...o..Hp..
20007c10:	101570cc 10157120 1015717c 101571d0     .p.. q..|q...q..
20007c20:	10157228 1015727c 101572b0 101572fc     (r..|r...r...r..
20007c30:	100c1ac0 10157324 10157358 1015739c     ....$s..Xs...s..
20007c40:	101573e0 1015743c 101574b0 1015750c     .s..<t...t...u..
20007c50:	10157544 10157590 101575dc 10157634     Du...u...u..4v..

20007c60 <DomenechCol1>:
20007c60:	1015f474 1015f524 1015f60c 1015f6bc     t...$...........
20007c70:	1015f8c8 1015f970 1015fa64 1015fb54     ....p...d...T...
20007c80:	1015fdc4 1015feb4 10160010 101600a0     ................
20007c90:	10160180 1016023c 1016032c 10160410     ....<...,.......
20007ca0:	1016060c 1016071c 101608c4 10160a08     ................
20007cb0:	10160d90 10160e88 101611a8 10161294     ................
20007cc0:	1016144c 10161540 101616b8 101617f8     L...@...........
20007cd0:	10161afc 10161bf4 10161db4 10161ea0     ................
20007ce0:	10162118 10162210 1016232c 1016242c     .!..."..,#..,$..
20007cf0:	101625f4 1016274c 10162940 10162a78     .%..L'..@)..x*..
20007d00:	10162ef0 10162fdc 1016314c 101632b4     ...../..L1...2..
20007d10:	10163510 10163610 101637d4 10163908     .5...6...7...9..
20007d20:	10163c10 10163d64 101640e8 101641b4     .<..d=...@...A..
20007d30:	10164344 1016452c 10164844 10164950     DC..,E..DH..PI..
20007d40:	10164b1c 10164c4c 10164ea0 1016500c     .K..LL...N...P..
20007d50:	1016550c 10165648 101658f0 101659b8     .U..HV...X...Y..
20007d60:	10165ac8 10165bb4 10165d24 10165e10     .Z...[..$]...^..
20007d70:	10165f48 10166074 101663b4 101664d8     H_..t`...c...d..
20007d80:	10166798 101668c0 10166adc 10166bec     .g...h...j...k..
20007d90:	10166e0c 10166f2c 101672a4 101673f8     .n..,o...r...s..
20007da0:	10167854 101679a0 10167c54 10167d64     Tx...y..T|..d}..
20007db0:	10167fb4 101680cc 10168388 10168470     ............p...
20007dc0:	10168648 1016870c 10168948 10168a28     H.......H...(...
20007dd0:	10168b78 10168c30 10168d4c 10168e3c     x...0...L...<...
20007de0:	10168fd0 101690dc 10169288 101693bc     ................

20007df0 <DomenechCol2>:
20007df0:	1015a948 1015a96c 1015a978 1015a99c     H...l...x.......
20007e00:	1015a9a8 1015a9d0 1015a9e4 1015aa10     ................
20007e10:	1015aa24 1015aa4c 1015aa60 1015aa8c     $...L...`.......
20007e20:	1015aaa4 1015aad0 1015aae8 1015ab14     ................
20007e30:	1015ab2c 1015ab58 1015ab70 1015ab9c     ,...X...p.......
20007e40:	1015abb8 1015abe4 1015ac00 1015ac2c     ............,...
20007e50:	1015ac48 1015ac70 1015ac8c 1015acb8     H...p...........
20007e60:	1015acd4 1015ad00 1015ad1c 1015ad48     ............H...
20007e70:	1015ad64 1015ad90 1015adac 1015add8     d...............
20007e80:	1015adf4 1015ae20 1015ae40 1015ae6c     .... ...@...l...
20007e90:	1015ae8c 1015aeb8 1015aed8 1015af08     ................
20007ea0:	1015af28 1015af54 1015af74 1015af9c     (...T...t.......
20007eb0:	1015afbc 1015afe8 1015b008 1015b034     ............4...
20007ec0:	1015b058 1015b084 1015b0a8 1015b0d4     X...............
20007ed0:	1015b0f8 1015b124 1015b148 1015b174     ....$...H...t...
20007ee0:	1015b198 1015b1c8 1015b1ec 1015b218     ................
20007ef0:	1015b240 1015b270 1015b298 1015b2c4     @...p...........
20007f00:	1015b2ec 1015b320 1015b348 1015b378     .... ...H...x...
20007f10:	1015b3a0 1015b3cc 1015b3f4 1015b428     ............(...
20007f20:	1015b450 1015b484 1015b4ac 1015b4e0     P...............
20007f30:	1015b508 1015b534 1015b55c 1015b588     ....4...\.......
20007f40:	1015b5b0 1015b5e4 1015b610 1015b640     ............@...
20007f50:	1015b66c 1015b69c 1015b6c8 1015b6fc     l...............
20007f60:	1015b728 1015b758 1015b784 1015b7b0     (...X...........
20007f70:	1015b7dc 1015b80c 1015b838 1015b868     ........8...h...
20007f80:	1015b894 1015b8c4 1015b8f0 1015b920     ............ ...
20007f90:	1015b950 1015b984 1015b9b4 1015b9e4     P...............
20007fa0:	1015ba14 1015ba48 1015ba78 1015baac     ....H...x.......
20007fb0:	1015badc 1015bb0c 1015bb3c 1015bb6c     ........<...l...
20007fc0:	1015bb9c 1015bbd0 1015bc00 1015bc34     ............4...
20007fd0:	1015bc64 1015bc94 1015bcc4 1015bcf4     d...............
20007fe0:	1015bd24 1015bd5c 1015bd8c 1015bdbc     $...\...........
20007ff0:	1015bdec 1015be20 1015be50 1015be84     .... ...P.......
20008000:	1015beb8 1015bee8 1015bf1c 1015bf50     ............P...
20008010:	1015bf84 1015bfb8 1015bfec 1015c01c     ................
20008020:	1015c050 1015c084 1015c0b8 1015c0ec     P...............
20008030:	1015c120 1015c158 1015c18c 1015c1bc      ...X...........
20008040:	1015c1f0 1015c224 1015c258 1015c288     ....$...X.......
20008050:	1015c2bc 1015c2f4 1015c32c 1015c360     ........,...`...
20008060:	1015c398 1015c3c8 1015c400 1015c434     ............4...
20008070:	1015c46c 1015c4a4 1015c4dc 1015c514     l...............
20008080:	1015c54c 1015c580 1015c5b8 1015c5ec     L...............
20008090:	1015c624 1015c658 1015c694 1015c6c8     $...X...........
200080a0:	1015c704 1015c73c 1015c778 1015c7ac     ....<...x.......
200080b0:	1015c7e8 1015c820 1015c85c 1015c894     .... ...\.......
200080c0:	1015c8d0 1015c908 1015c948 1015c980     ........H.......
200080d0:	1015c9c0 1015c9f0 1015ca30 1015ca68     ........0...h...
200080e0:	1015caa8 1015cadc 1015cb1c 1015cb50     ............P...
200080f0:	1015cb90 1015cbc4 1015cc04 1015cc3c     ............<...
20008100:	1015cc80 1015ccb8 1015ccfc 1015cd34     ............4...
20008110:	1015cd78 1015cdb0 1015cdf4 1015ce28     x...........(...
20008120:	1015ce6c 1015cea0 1015cee4 1015cf18     l...............
20008130:	1015cf5c 1015cf94 1015cfd8 1015d010     \...............
20008140:	1015d054 1015d08c 1015d0d0 1015d108     T...............
20008150:	1015d14c 1015d184 1015d1c8 1015d200     L...............
20008160:	1015d248 1015d27c 1015d2c4 1015d2f8     H...|...........
20008170:	1015d340 1015d374 1015d3bc 1015d3f4     @...t...........
20008180:	1015d43c 1015d470 1015d4b8 1015d4ec     <...p...........
20008190:	1015d534 1015d568 1015d5b0 1015d5e8     4...h...........
200081a0:	1015d630 1015d660 1015d6ac 1015d6e0     0...`...........
200081b0:	1015d72c 1015d760 1015d7ac 1015d7e4     ,...`...........
200081c0:	1015d830 1015d868 1015d8b4 1015d8ec     0...h...........
200081d0:	1015d93c 1015d974 1015d9c4 1015d9f8     <...t...........
200081e0:	1015da48 1015da80 1015dad0 1015db08     H...............
200081f0:	1015db58 1015db90 1015dbe0 1015dc18     X...............
20008200:	1015dc68 1015dca0 1015dcf0 1015dd28     h...........(...
20008210:	1015dd78 1015ddb0 1015de00 1015de38     x...........8...
20008220:	1015de88 1015dec0 1015df10 1015df44     ............D...
20008230:	1015df94 1015dfcc 1015e01c 1015e050     ............P...
20008240:	1015e0a4 1015e0dc 1015e130 1015e168     ........0...h...
20008250:	1015e1bc 1015e1f4 1015e248 1015e280     ........H.......
20008260:	1015e2d4 1015e30c 1015e360 1015e398     ........`.......
20008270:	1015e3f4 1015e42c 1015e488 1015e4c0     ....,...........
20008280:	1015e51c 1015e550 1015e5ac 1015e5e4     ....P...........
20008290:	1015e644 1015e67c 1015e6dc 1015e714     D...|...........
200082a0:	1015e774 1015e7ac 1015e80c 1015e844     t...........D...
200082b0:	1015e8a8 1015e8e0 1015e944 1015e978     ........D...x...
200082c0:	1015e9e0 1015ea18 1015ea80 1015eab8     ................
200082d0:	1015eb20 1015eb58 1015ebc0 1015ebf8      ...X...........
200082e0:	1015ec60 1015ec98 1015ed00 1015ed38     `...........8...
200082f0:	1015eda0 1015edd8 1015ee40 1015ee78     ........@...x...
20008300:	1015eee0 1015ef18 1015ef80 1015efb8     ................
20008310:	1015f024 1015f05c 1015f0d0 1015f108     $...\...........
20008320:	1015f17c 1015f1b4 1015f22c 1015f260     |.......,...`...
20008330:	1015f2d8 1015f310 1015f388 1015f3c0     ................

20008340 <DomenechCol3>:
20008340:	101595e4 10159634 1015969c 10159700     ....4...........
20008350:	10159750 101597b4 10159818 10159878     P...........x...
20008360:	101598e0 10159944 101599a0 101599fc     ....D...........
20008370:	10159a6c 10159acc 10159b3c 10159b98     l.......<.......
20008380:	10159c0c 10159c70 10159cec 10159d58     ....p.......X...
20008390:	10159de8 10159e50 10159f08 10159f6c     ....P.......l...
200083a0:	1015a030 1015a094 1015a170 1015a1d4     0.......p.......
200083b0:	1015a2a8 1015a318 1015a3c0 1015a420     ............ ...
200083c0:	1015a560 1015a600 1015a730 1015a7c4     `.......0.......

200083d0 <DomenechCol4>:
200083d0:	101576d8 10157728 10157770 101577b4     .v..(w..pw...w..
200083e0:	10157800 1015783c 10157864 101578ac     .x..<x..dx...x..
200083f0:	101578f8 10157940 10157980 101579bc     .x..@y...y...y..
20008400:	101579ec 10157a2c 10157a6c 10157ab0     .y..,z..lz...z..
20008410:	10157b28 10157b6c 10157ba4 10157bf8     ({..l{...{...{..
20008420:	10157c68 10157cc0 10157cf4 10157d40     h|...|...|..@}..
20008430:	10157d94 10157dec 10157ec8 10157f38     .}...}...~..8...
20008440:	10158020 10158074 101580c8 1015811c      ...t...........
20008450:	1015817c 101581d0 1015821c 10158270     |...........p...
20008460:	101582b4 10158310 101583d0 10158428     ............(...
20008470:	10158468 101584c4 10158504 1015855c     h...........\...
20008480:	101585a0 101585e8 10158660 101586b8     ........`.......
20008490:	1015871c 10158774 1015882c 101588a0     ....t...,.......
200084a0:	1015895c 101589a8 10158a54 10158a9c     \.......T.......
200084b0:	10158ae8 10158b30 10158b5c 10158bcc     ....0...\.......
200084c0:	10158c80 10158cdc 10158db4 10158df8     ................
200084d0:	10158e88 10158ef4 10158fc4 1015903c     ............<...
200084e0:	10159138 1015917c 101591c8 10159210     8...|...........
200084f0:	10159260 101592bc 10159378 101593e4     `.......x.......
20008500:	10159478 101594d4 10159504 10159568     x...........h...

20008510 <DzekicCol1>:
20008510:	10169724 101698a4 10169ae8 10169b78     $...........x...
20008520:	10169c7c 10169da0 10169ff0 1016a1bc     |...............
20008530:	1016a564 1016a7ec 1016aa6c 1016abec     d.......l.......
20008540:	1016ac98 1016ae40 1016b130 1016b35c     ....@...0...\...
20008550:	1016b4c0 1016b6d8 1016baa0 1016bc9c     ................
20008560:	1016be20 1016c198 1016c494 1016c6c0      ...............
20008570:	1016c91c 1016cb78 1016cd28 1016cf34     ....x...(...4...
20008580:	1016d298 1016d4dc 1016d740 1016d904     ........@.......
20008590:	1016da50 1016dc28 1016defc 1016e0ec     P...(...........
200085a0:	1016e280 1016e50c 1016e7d4 1016e844     ............D...
200085b0:	1016e878 1016e96c 1016ea08 1016ecac     x...l...........
200085c0:	1016f670 1016f8e4 1016fa04 1016fac0     p...............
200085d0:	1016fb2c 1016fc3c 1016fd74 1016fef8     ,...<...t.......
200085e0:	10170090 10170248 101704b8 1017060c     ....H...........
200085f0:	10170868 10170bb4 10171434 1017158c     h.......4.......

20008600 <CtrlBufSize>:
20008600:	000000b6 000000b6 000000b6 000000b6     ................

20008610 <LineBufSize>:
20008610:	000002c8 000002c8 000002c8 000002c8     ................

20008620 <LayerNumPin>:
20008620:	08080808                                ....

20008624 <DefPal16>:
20008624:	16140200 b6a8a2a0 5f5d4b49 fffdebe9     ........IK]_....

20008634 <pScreen>:
20008634:	2000f02c                                ,.. 

20008638 <SoundInc>:
20008638:	00000400                                ....

2000863c <_impure_ptr>:
2000863c:	20008640                                @.. 

20008640 <impure_data>:
20008640:	00000000 2000892c 20008994 200089fc     ....,.. ... ... 
	...
200086e8:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
200086f8:	0005deec 0000000b 00000000 00000000     ................
	...

20008a68 <__malloc_av_>:
	...
20008a70:	20008a68 20008a68 20008a70 20008a70     h.. h.. p.. p.. 
20008a80:	20008a78 20008a78 20008a80 20008a80     x.. x.. ... ... 
20008a90:	20008a88 20008a88 20008a90 20008a90     ... ... ... ... 
20008aa0:	20008a98 20008a98 20008aa0 20008aa0     ... ... ... ... 
20008ab0:	20008aa8 20008aa8 20008ab0 20008ab0     ... ... ... ... 
20008ac0:	20008ab8 20008ab8 20008ac0 20008ac0     ... ... ... ... 
20008ad0:	20008ac8 20008ac8 20008ad0 20008ad0     ... ... ... ... 
20008ae0:	20008ad8 20008ad8 20008ae0 20008ae0     ... ... ... ... 
20008af0:	20008ae8 20008ae8 20008af0 20008af0     ... ... ... ... 
20008b00:	20008af8 20008af8 20008b00 20008b00     ... ... ... ... 
20008b10:	20008b08 20008b08 20008b10 20008b10     ... ... ... ... 
20008b20:	20008b18 20008b18 20008b20 20008b20     ... ...  ..  .. 
20008b30:	20008b28 20008b28 20008b30 20008b30     (.. (.. 0.. 0.. 
20008b40:	20008b38 20008b38 20008b40 20008b40     8.. 8.. @.. @.. 
20008b50:	20008b48 20008b48 20008b50 20008b50     H.. H.. P.. P.. 
20008b60:	20008b58 20008b58 20008b60 20008b60     X.. X.. `.. `.. 
20008b70:	20008b68 20008b68 20008b70 20008b70     h.. h.. p.. p.. 
20008b80:	20008b78 20008b78 20008b80 20008b80     x.. x.. ... ... 
20008b90:	20008b88 20008b88 20008b90 20008b90     ... ... ... ... 
20008ba0:	20008b98 20008b98 20008ba0 20008ba0     ... ... ... ... 
20008bb0:	20008ba8 20008ba8 20008bb0 20008bb0     ... ... ... ... 
20008bc0:	20008bb8 20008bb8 20008bc0 20008bc0     ... ... ... ... 
20008bd0:	20008bc8 20008bc8 20008bd0 20008bd0     ... ... ... ... 
20008be0:	20008bd8 20008bd8 20008be0 20008be0     ... ... ... ... 
20008bf0:	20008be8 20008be8 20008bf0 20008bf0     ... ... ... ... 
20008c00:	20008bf8 20008bf8 20008c00 20008c00     ... ... ... ... 
20008c10:	20008c08 20008c08 20008c10 20008c10     ... ... ... ... 
20008c20:	20008c18 20008c18 20008c20 20008c20     ... ...  ..  .. 
20008c30:	20008c28 20008c28 20008c30 20008c30     (.. (.. 0.. 0.. 
20008c40:	20008c38 20008c38 20008c40 20008c40     8.. 8.. @.. @.. 
20008c50:	20008c48 20008c48 20008c50 20008c50     H.. H.. P.. P.. 
20008c60:	20008c58 20008c58 20008c60 20008c60     X.. X.. `.. `.. 
20008c70:	20008c68 20008c68 20008c70 20008c70     h.. h.. p.. p.. 
20008c80:	20008c78 20008c78 20008c80 20008c80     x.. x.. ... ... 
20008c90:	20008c88 20008c88 20008c90 20008c90     ... ... ... ... 
20008ca0:	20008c98 20008c98 20008ca0 20008ca0     ... ... ... ... 
20008cb0:	20008ca8 20008ca8 20008cb0 20008cb0     ... ... ... ... 
20008cc0:	20008cb8 20008cb8 20008cc0 20008cc0     ... ... ... ... 
20008cd0:	20008cc8 20008cc8 20008cd0 20008cd0     ... ... ... ... 
20008ce0:	20008cd8 20008cd8 20008ce0 20008ce0     ... ... ... ... 
20008cf0:	20008ce8 20008ce8 20008cf0 20008cf0     ... ... ... ... 
20008d00:	20008cf8 20008cf8 20008d00 20008d00     ... ... ... ... 
20008d10:	20008d08 20008d08 20008d10 20008d10     ... ... ... ... 
20008d20:	20008d18 20008d18 20008d20 20008d20     ... ...  ..  .. 
20008d30:	20008d28 20008d28 20008d30 20008d30     (.. (.. 0.. 0.. 
20008d40:	20008d38 20008d38 20008d40 20008d40     8.. 8.. @.. @.. 
20008d50:	20008d48 20008d48 20008d50 20008d50     H.. H.. P.. P.. 
20008d60:	20008d58 20008d58 20008d60 20008d60     X.. X.. `.. `.. 
20008d70:	20008d68 20008d68 20008d70 20008d70     h.. h.. p.. p.. 
20008d80:	20008d78 20008d78 20008d80 20008d80     x.. x.. ... ... 
20008d90:	20008d88 20008d88 20008d90 20008d90     ... ... ... ... 
20008da0:	20008d98 20008d98 20008da0 20008da0     ... ... ... ... 
20008db0:	20008da8 20008da8 20008db0 20008db0     ... ... ... ... 
20008dc0:	20008db8 20008db8 20008dc0 20008dc0     ... ... ... ... 
20008dd0:	20008dc8 20008dc8 20008dd0 20008dd0     ... ... ... ... 
20008de0:	20008dd8 20008dd8 20008de0 20008de0     ... ... ... ... 
20008df0:	20008de8 20008de8 20008df0 20008df0     ... ... ... ... 
20008e00:	20008df8 20008df8 20008e00 20008e00     ... ... ... ... 
20008e10:	20008e08 20008e08 20008e10 20008e10     ... ... ... ... 
20008e20:	20008e18 20008e18 20008e20 20008e20     ... ...  ..  .. 
20008e30:	20008e28 20008e28 20008e30 20008e30     (.. (.. 0.. 0.. 
20008e40:	20008e38 20008e38 20008e40 20008e40     8.. 8.. @.. @.. 
20008e50:	20008e48 20008e48 20008e50 20008e50     H.. H.. P.. P.. 
20008e60:	20008e58 20008e58 20008e60 20008e60     X.. X.. `.. `.. 

20008e70 <__malloc_sbrk_base>:
20008e70:	ffffffff                                ....

20008e74 <__malloc_trim_threshold>:
20008e74:	00020000                                ....

20008e78 <print_mutex>:
	...

20008e80 <__mutex_array_end>:
20008e80:	10001119 	.word	0x10001119
20008e84:	1000030d 	.word	0x1000030d
20008e88:	100016ed 	.word	0x100016ed
20008e8c:	100017ad 	.word	0x100017ad

20008e90 <__frame_dummy_init_array_entry>:
20008e90:	100002ed 10004cad 100089d9              .....L......
