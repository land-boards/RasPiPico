
build/program.elf:     file format elf32-littlearm


Disassembly of section .boot2:

10000000 <__boot2_start__>:
10000000:	4b32b500 	.word	0x4b32b500
10000004:	60582021 	.word	0x60582021
10000008:	21026898 	.word	0x21026898
1000000c:	60984388 	.word	0x60984388
10000010:	611860d8 	.word	0x611860d8
10000014:	4b2e6158 	.word	0x4b2e6158
10000018:	60992100 	.word	0x60992100
1000001c:	61592102 	.word	0x61592102
10000020:	22f02101 	.word	0x22f02101
10000024:	492b5099 	.word	0x492b5099
10000028:	21016019 	.word	0x21016019
1000002c:	20356099 	.word	0x20356099
10000030:	f844f000 	.word	0xf844f000
10000034:	42902202 	.word	0x42902202
10000038:	2106d014 	.word	0x2106d014
1000003c:	f0006619 	.word	0xf0006619
10000040:	6e19f834 	.word	0x6e19f834
10000044:	66192101 	.word	0x66192101
10000048:	66182000 	.word	0x66182000
1000004c:	f000661a 	.word	0xf000661a
10000050:	6e19f82c 	.word	0x6e19f82c
10000054:	6e196e19 	.word	0x6e196e19
10000058:	f0002005 	.word	0xf0002005
1000005c:	2101f82f 	.word	0x2101f82f
10000060:	d1f94208 	.word	0xd1f94208
10000064:	60992100 	.word	0x60992100
10000068:	6019491b 	.word	0x6019491b
1000006c:	60592100 	.word	0x60592100
10000070:	481b491a 	.word	0x481b491a
10000074:	21016001 	.word	0x21016001
10000078:	21eb6099 	.word	0x21eb6099
1000007c:	21a06619 	.word	0x21a06619
10000080:	f0006619 	.word	0xf0006619
10000084:	2100f812 	.word	0x2100f812
10000088:	49166099 	.word	0x49166099
1000008c:	60014814 	.word	0x60014814
10000090:	60992101 	.word	0x60992101
10000094:	2800bc01 	.word	0x2800bc01
10000098:	4700d000 	.word	0x4700d000
1000009c:	49134812 	.word	0x49134812
100000a0:	c8036008 	.word	0xc8036008
100000a4:	8808f380 	.word	0x8808f380
100000a8:	b5034708 	.word	0xb5034708
100000ac:	20046a99 	.word	0x20046a99
100000b0:	d0fb4201 	.word	0xd0fb4201
100000b4:	42012001 	.word	0x42012001
100000b8:	bd03d1f8 	.word	0xbd03d1f8
100000bc:	6618b502 	.word	0x6618b502
100000c0:	f7ff6618 	.word	0xf7ff6618
100000c4:	6e18fff2 	.word	0x6e18fff2
100000c8:	bd026e18 	.word	0xbd026e18
100000cc:	40020000 	.word	0x40020000
100000d0:	18000000 	.word	0x18000000
100000d4:	00070000 	.word	0x00070000
100000d8:	005f0300 	.word	0x005f0300
100000dc:	00002221 	.word	0x00002221
100000e0:	180000f4 	.word	0x180000f4
100000e4:	a0002022 	.word	0xa0002022
100000e8:	10000100 	.word	0x10000100
100000ec:	e000ed08 	.word	0xe000ed08
	...
100000fc:	7a4eb274 	.word	0x7a4eb274

Disassembly of section .text:

10000100 <__logical_binary_start>:
10000100:	20042000 	.word	0x20042000
10000104:	100001f7 	.word	0x100001f7
10000108:	100001c3 	.word	0x100001c3
1000010c:	100001c5 	.word	0x100001c5
10000110:	100001c1 	.word	0x100001c1
10000114:	100001c1 	.word	0x100001c1
10000118:	100001c1 	.word	0x100001c1
1000011c:	100001c1 	.word	0x100001c1
10000120:	100001c1 	.word	0x100001c1
10000124:	100001c1 	.word	0x100001c1
10000128:	100001c1 	.word	0x100001c1
1000012c:	100001c7 	.word	0x100001c7
10000130:	100001c1 	.word	0x100001c1
10000134:	100001c1 	.word	0x100001c1
10000138:	100001c9 	.word	0x100001c9
1000013c:	100001cb 	.word	0x100001cb
10000140:	100001cd 	.word	0x100001cd
10000144:	100001cd 	.word	0x100001cd
10000148:	100001cd 	.word	0x100001cd
1000014c:	100001cd 	.word	0x100001cd
10000150:	100001cd 	.word	0x100001cd
10000154:	100001cd 	.word	0x100001cd
10000158:	100001cd 	.word	0x100001cd
1000015c:	100001cd 	.word	0x100001cd
10000160:	100001cd 	.word	0x100001cd
10000164:	100001cd 	.word	0x100001cd
10000168:	100001cd 	.word	0x100001cd
1000016c:	100001cd 	.word	0x100001cd
10000170:	100001cd 	.word	0x100001cd
10000174:	100001cd 	.word	0x100001cd
10000178:	100001cd 	.word	0x100001cd
1000017c:	100001cd 	.word	0x100001cd
10000180:	100001cd 	.word	0x100001cd
10000184:	100001cd 	.word	0x100001cd
10000188:	100001cd 	.word	0x100001cd
1000018c:	100001cd 	.word	0x100001cd
10000190:	100001cd 	.word	0x100001cd
10000194:	100001cd 	.word	0x100001cd
10000198:	100001cd 	.word	0x100001cd
1000019c:	100001cd 	.word	0x100001cd
100001a0:	100001cd 	.word	0x100001cd
100001a4:	100001cd 	.word	0x100001cd
100001a8:	100001cd 	.word	0x100001cd
100001ac:	100001cd 	.word	0x100001cd
100001b0:	100001cd 	.word	0x100001cd
100001b4:	100001cd 	.word	0x100001cd
100001b8:	100001cd 	.word	0x100001cd
100001bc:	100001cd 	.word	0x100001cd

100001c0 <isr_invalid>:
100001c0:	be00      	bkpt	0x0000

100001c2 <isr_nmi>:
100001c2:	be00      	bkpt	0x0000

100001c4 <isr_hardfault>:
100001c4:	be00      	bkpt	0x0000

100001c6 <isr_svcall>:
100001c6:	be00      	bkpt	0x0000

100001c8 <isr_pendsv>:
100001c8:	be00      	bkpt	0x0000

100001ca <isr_systick>:
100001ca:	be00      	bkpt	0x0000

100001cc <__unhandled_user_irq>:
100001cc:	f000 f84b 	bl	10000266 <__get_current_exception>
100001d0:	3810      	subs	r0, #16

100001d2 <unhandled_user_irq_num_in_r0>:
100001d2:	be00      	bkpt	0x0000

100001d4 <binary_info_header>:
100001d4:	7188ebf2 	.word	0x7188ebf2
100001d8:	1000a398 	.word	0x1000a398
100001dc:	1000a3b8 	.word	0x1000a3b8
100001e0:	10000234 	.word	0x10000234
100001e4:	e71aa390 	.word	0xe71aa390

100001e8 <_entry_point>:
100001e8:	2000      	movs	r0, #0
100001ea:	4921      	ldr	r1, [pc, #132]	; (10000270 <__get_current_exception+0xa>)
100001ec:	6008      	str	r0, [r1, #0]
100001ee:	c806      	ldmia	r0!, {r1, r2}
100001f0:	f381 8808 	msr	MSP, r1
100001f4:	4710      	bx	r2

100001f6 <_reset_handler>:
100001f6:	481f      	ldr	r0, [pc, #124]	; (10000274 <__get_current_exception+0xe>)
100001f8:	6800      	ldr	r0, [r0, #0]
100001fa:	2800      	cmp	r0, #0
100001fc:	d12f      	bne.n	1000025e <hold_non_core0_in_bootrom>
100001fe:	a40d      	add	r4, pc, #52	; (adr r4, 10000234 <data_cpy_table>)
10000200:	cc0e      	ldmia	r4!, {r1, r2, r3}
10000202:	2900      	cmp	r1, #0
10000204:	d002      	beq.n	1000020c <_reset_handler+0x16>
10000206:	f000 f812 	bl	1000022e <data_cpy>
1000020a:	e7f9      	b.n	10000200 <_reset_handler+0xa>
1000020c:	491a      	ldr	r1, [pc, #104]	; (10000278 <__get_current_exception+0x12>)
1000020e:	4a1b      	ldr	r2, [pc, #108]	; (1000027c <__get_current_exception+0x16>)
10000210:	2000      	movs	r0, #0
10000212:	e000      	b.n	10000216 <bss_fill_test>

10000214 <bss_fill_loop>:
10000214:	c101      	stmia	r1!, {r0}

10000216 <bss_fill_test>:
10000216:	4291      	cmp	r1, r2
10000218:	d1fc      	bne.n	10000214 <bss_fill_loop>

1000021a <platform_entry>:
1000021a:	4919      	ldr	r1, [pc, #100]	; (10000280 <__get_current_exception+0x1a>)
1000021c:	4788      	blx	r1
1000021e:	4919      	ldr	r1, [pc, #100]	; (10000284 <__get_current_exception+0x1e>)
10000220:	4788      	blx	r1
10000222:	4919      	ldr	r1, [pc, #100]	; (10000288 <__get_current_exception+0x22>)
10000224:	4788      	blx	r1
10000226:	be00      	bkpt	0x0000
10000228:	e7fd      	b.n	10000226 <platform_entry+0xc>

1000022a <data_cpy_loop>:
1000022a:	c901      	ldmia	r1!, {r0}
1000022c:	c201      	stmia	r2!, {r0}

1000022e <data_cpy>:
1000022e:	429a      	cmp	r2, r3
10000230:	d3fb      	bcc.n	1000022a <data_cpy_loop>
10000232:	4770      	bx	lr

10000234 <data_cpy_table>:
10000234:	1000a3b8 	.word	0x1000a3b8
10000238:	200000c0 	.word	0x200000c0
1000023c:	20002a50 	.word	0x20002a50
10000240:	1000cd48 	.word	0x1000cd48
10000244:	20040000 	.word	0x20040000
10000248:	20040000 	.word	0x20040000
1000024c:	1000cd48 	.word	0x1000cd48
10000250:	20041000 	.word	0x20041000
10000254:	20041000 	.word	0x20041000
10000258:	00000000 	.word	0x00000000
1000025c:	4770      	bx	lr

1000025e <hold_non_core0_in_bootrom>:
1000025e:	480b      	ldr	r0, [pc, #44]	; (1000028c <__get_current_exception+0x26>)
10000260:	f001 f842 	bl	100012e8 <rom_func_lookup>
10000264:	4700      	bx	r0

10000266 <__get_current_exception>:
10000266:	f3ef 8005 	mrs	r0, IPSR
1000026a:	b2c0      	uxtb	r0, r0
1000026c:	4770      	bx	lr
1000026e:	0000      	.short	0x0000
10000270:	e000ed08 	.word	0xe000ed08
10000274:	d0000000 	.word	0xd0000000
10000278:	20002a50 	.word	0x20002a50
1000027c:	20039bc0 	.word	0x20039bc0
10000280:	10003a91 	.word	0x10003a91
10000284:	1000749d 	.word	0x1000749d
10000288:	10003bb1 	.word	0x10003bb1
1000028c:	00005657 	.word	0x00005657

10000290 <__bi_46>:
10000290:	50520006 5360b3ab 100097a8              ..RP..`S....

1000029c <__bi_34>:
1000029c:	50520006 02031c86 100097b0              ..RP........

100002a8 <__bi_26>:
100002a8:	50520006 9da22254 100097b8              ..RPT"......

100002b4 <__bi_18>:
100002b4:	50520005 68f465de 1000cd48              ..RP.e.hH...

100002c0 <_init>:
100002c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100002c2:	46c0      	nop			; (mov r8, r8)

100002c4 <__do_global_dtors_aux>:
100002c4:	b510      	push	{r4, lr}
100002c6:	4c06      	ldr	r4, [pc, #24]	; (100002e0 <__do_global_dtors_aux+0x1c>)
100002c8:	7823      	ldrb	r3, [r4, #0]
100002ca:	2b00      	cmp	r3, #0
100002cc:	d107      	bne.n	100002de <__do_global_dtors_aux+0x1a>
100002ce:	4b05      	ldr	r3, [pc, #20]	; (100002e4 <__do_global_dtors_aux+0x20>)
100002d0:	2b00      	cmp	r3, #0
100002d2:	d002      	beq.n	100002da <__do_global_dtors_aux+0x16>
100002d4:	4804      	ldr	r0, [pc, #16]	; (100002e8 <__do_global_dtors_aux+0x24>)
100002d6:	e000      	b.n	100002da <__do_global_dtors_aux+0x16>
100002d8:	bf00      	nop
100002da:	2301      	movs	r3, #1
100002dc:	7023      	strb	r3, [r4, #0]
100002de:	bd10      	pop	{r4, pc}
100002e0:	20002ca0 	.word	0x20002ca0
100002e4:	00000000 	.word	0x00000000
100002e8:	10009770 	.word	0x10009770

100002ec <frame_dummy>:
100002ec:	4b04      	ldr	r3, [pc, #16]	; (10000300 <frame_dummy+0x14>)
100002ee:	b510      	push	{r4, lr}
100002f0:	2b00      	cmp	r3, #0
100002f2:	d003      	beq.n	100002fc <frame_dummy+0x10>
100002f4:	4903      	ldr	r1, [pc, #12]	; (10000304 <frame_dummy+0x18>)
100002f6:	4804      	ldr	r0, [pc, #16]	; (10000308 <frame_dummy+0x1c>)
100002f8:	e000      	b.n	100002fc <frame_dummy+0x10>
100002fa:	bf00      	nop
100002fc:	bd10      	pop	{r4, pc}
100002fe:	46c0      	nop			; (mov r8, r8)
10000300:	00000000 	.word	0x00000000
10000304:	20002ca4 	.word	0x20002ca4
10000308:	10009770 	.word	0x10009770

1000030c <__aeabi_bits_init>:
1000030c:	4801      	ldr	r0, [pc, #4]	; (10000314 <__aeabi_bits_init+0x8>)
1000030e:	2104      	movs	r1, #4
10000310:	4b01      	ldr	r3, [pc, #4]	; (10000318 <__aeabi_bits_init+0xc>)
10000312:	4718      	bx	r3
10000314:	20002120 	.word	0x20002120
10000318:	10001309 	.word	0x10001309

1000031c <__wrap___aeabi_idiv>:
1000031c:	4a14      	ldr	r2, [pc, #80]	; (10000370 <divmod_s32s32_savestate+0x20>)
1000031e:	6f93      	ldr	r3, [r2, #120]	; 0x78
10000320:	089b      	lsrs	r3, r3, #2
10000322:	d215      	bcs.n	10000350 <divmod_s32s32_savestate>

10000324 <divmod_s32s32_unsafe>:
10000324:	6690      	str	r0, [r2, #104]	; 0x68
10000326:	66d1      	str	r1, [r2, #108]	; 0x6c
10000328:	2900      	cmp	r1, #0
1000032a:	d005      	beq.n	10000338 <divmod_s32s32_unsafe+0x14>
1000032c:	e7ff      	b.n	1000032e <divmod_s32s32_unsafe+0xa>
1000032e:	e7ff      	b.n	10000330 <divmod_s32s32_unsafe+0xc>
10000330:	e7ff      	b.n	10000332 <divmod_s32s32_unsafe+0xe>
10000332:	6f51      	ldr	r1, [r2, #116]	; 0x74
10000334:	6f10      	ldr	r0, [r2, #112]	; 0x70
10000336:	4770      	bx	lr
10000338:	b504      	push	{r2, lr}
1000033a:	2180      	movs	r1, #128	; 0x80
1000033c:	0609      	lsls	r1, r1, #24
1000033e:	17c2      	asrs	r2, r0, #31
10000340:	4051      	eors	r1, r2
10000342:	2800      	cmp	r0, #0
10000344:	d000      	beq.n	10000348 <divmod_s32s32_unsafe+0x24>
10000346:	43c8      	mvns	r0, r1
10000348:	f009 f9ea 	bl	10009720 <____aeabi_idiv0_veneer>
1000034c:	2100      	movs	r1, #0
1000034e:	bd04      	pop	{r2, pc}

10000350 <divmod_s32s32_savestate>:
10000350:	6f93      	ldr	r3, [r2, #120]	; 0x78
10000352:	085b      	lsrs	r3, r3, #1
10000354:	d3fd      	bcc.n	10000352 <divmod_s32s32_savestate+0x2>
10000356:	b5f0      	push	{r4, r5, r6, r7, lr}
10000358:	6e94      	ldr	r4, [r2, #104]	; 0x68
1000035a:	6ed5      	ldr	r5, [r2, #108]	; 0x6c
1000035c:	6f57      	ldr	r7, [r2, #116]	; 0x74
1000035e:	6f16      	ldr	r6, [r2, #112]	; 0x70
10000360:	f7ff ffe0 	bl	10000324 <divmod_s32s32_unsafe>
10000364:	6694      	str	r4, [r2, #104]	; 0x68
10000366:	66d5      	str	r5, [r2, #108]	; 0x6c
10000368:	6757      	str	r7, [r2, #116]	; 0x74
1000036a:	6716      	str	r6, [r2, #112]	; 0x70
1000036c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000036e:	0000      	.short	0x0000
10000370:	d0000000 	.word	0xd0000000

10000374 <__wrap___aeabi_uidiv>:
10000374:	4a13      	ldr	r2, [pc, #76]	; (100003c4 <divmod_u32u32_savestate+0x20>)
10000376:	6f93      	ldr	r3, [r2, #120]	; 0x78
10000378:	089b      	lsrs	r3, r3, #2
1000037a:	d213      	bcs.n	100003a4 <divmod_u32u32_savestate>

1000037c <divmod_u32u32_unsafe>:
1000037c:	6610      	str	r0, [r2, #96]	; 0x60
1000037e:	6651      	str	r1, [r2, #100]	; 0x64
10000380:	2900      	cmp	r1, #0
10000382:	d005      	beq.n	10000390 <divmod_u32u32_unsafe+0x14>
10000384:	e7ff      	b.n	10000386 <divmod_u32u32_unsafe+0xa>
10000386:	e7ff      	b.n	10000388 <divmod_u32u32_unsafe+0xc>
10000388:	e7ff      	b.n	1000038a <divmod_u32u32_unsafe+0xe>
1000038a:	6f51      	ldr	r1, [r2, #116]	; 0x74
1000038c:	6f10      	ldr	r0, [r2, #112]	; 0x70
1000038e:	4770      	bx	lr
10000390:	b504      	push	{r2, lr}
10000392:	2800      	cmp	r0, #0
10000394:	d001      	beq.n	1000039a <divmod_u32u32_unsafe+0x1e>
10000396:	2000      	movs	r0, #0
10000398:	43c0      	mvns	r0, r0
1000039a:	f009 f9c1 	bl	10009720 <____aeabi_idiv0_veneer>
1000039e:	2100      	movs	r1, #0
100003a0:	bd04      	pop	{r2, pc}
100003a2:	46c0      	nop			; (mov r8, r8)

100003a4 <divmod_u32u32_savestate>:
100003a4:	6f93      	ldr	r3, [r2, #120]	; 0x78
100003a6:	085b      	lsrs	r3, r3, #1
100003a8:	d3fd      	bcc.n	100003a6 <divmod_u32u32_savestate+0x2>
100003aa:	b5f0      	push	{r4, r5, r6, r7, lr}
100003ac:	6e94      	ldr	r4, [r2, #104]	; 0x68
100003ae:	6ed5      	ldr	r5, [r2, #108]	; 0x6c
100003b0:	6f57      	ldr	r7, [r2, #116]	; 0x74
100003b2:	6f16      	ldr	r6, [r2, #112]	; 0x70
100003b4:	f7ff ffe2 	bl	1000037c <divmod_u32u32_unsafe>
100003b8:	6694      	str	r4, [r2, #104]	; 0x68
100003ba:	66d5      	str	r5, [r2, #108]	; 0x6c
100003bc:	6757      	str	r7, [r2, #116]	; 0x74
100003be:	6716      	str	r6, [r2, #112]	; 0x70
100003c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
100003c2:	0000      	.short	0x0000
100003c4:	d0000000 	.word	0xd0000000

100003c8 <__wrap___aeabi_ldivmod>:
100003c8:	4694      	mov	ip, r2
100003ca:	4a4e      	ldr	r2, [pc, #312]	; (10000504 <udiv0+0x1a>)
100003cc:	6f92      	ldr	r2, [r2, #120]	; 0x78
100003ce:	0892      	lsrs	r2, r2, #2
100003d0:	4662      	mov	r2, ip
100003d2:	d201      	bcs.n	100003d8 <divmod_s64s64_savestate>
100003d4:	e030      	b.n	10000438 <divmod_s64s64_unsafe>
100003d6:	46c0      	nop			; (mov r8, r8)

100003d8 <divmod_s64s64_savestate>:
100003d8:	b5f0      	push	{r4, r5, r6, r7, lr}
100003da:	4e4a      	ldr	r6, [pc, #296]	; (10000504 <udiv0+0x1a>)
100003dc:	6fb5      	ldr	r5, [r6, #120]	; 0x78
100003de:	086d      	lsrs	r5, r5, #1
100003e0:	d3fc      	bcc.n	100003dc <divmod_s64s64_savestate+0x4>
100003e2:	6e34      	ldr	r4, [r6, #96]	; 0x60
100003e4:	6e75      	ldr	r5, [r6, #100]	; 0x64
100003e6:	6f77      	ldr	r7, [r6, #116]	; 0x74
100003e8:	6f36      	ldr	r6, [r6, #112]	; 0x70
100003ea:	f000 f825 	bl	10000438 <divmod_s64s64_unsafe>
100003ee:	4694      	mov	ip, r2
100003f0:	4a44      	ldr	r2, [pc, #272]	; (10000504 <udiv0+0x1a>)
100003f2:	6614      	str	r4, [r2, #96]	; 0x60
100003f4:	6655      	str	r5, [r2, #100]	; 0x64
100003f6:	6757      	str	r7, [r2, #116]	; 0x74
100003f8:	6716      	str	r6, [r2, #112]	; 0x70
100003fa:	4662      	mov	r2, ip
100003fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
100003fe:	46c0      	nop			; (mov r8, r8)

10000400 <__wrap___aeabi_uldivmod>:
10000400:	4694      	mov	ip, r2
10000402:	4a40      	ldr	r2, [pc, #256]	; (10000504 <udiv0+0x1a>)
10000404:	6f92      	ldr	r2, [r2, #120]	; 0x78
10000406:	0892      	lsrs	r2, r2, #2
10000408:	4662      	mov	r2, ip
1000040a:	d201      	bcs.n	10000410 <divmod_u64u64_savestate>
1000040c:	e058      	b.n	100004c0 <divmod_u64u64_unsafe>
1000040e:	46c0      	nop			; (mov r8, r8)

10000410 <divmod_u64u64_savestate>:
10000410:	b5f0      	push	{r4, r5, r6, r7, lr}
10000412:	4e3c      	ldr	r6, [pc, #240]	; (10000504 <udiv0+0x1a>)
10000414:	6fb5      	ldr	r5, [r6, #120]	; 0x78
10000416:	086d      	lsrs	r5, r5, #1
10000418:	d3fc      	bcc.n	10000414 <divmod_u64u64_savestate+0x4>
1000041a:	6e34      	ldr	r4, [r6, #96]	; 0x60
1000041c:	6e75      	ldr	r5, [r6, #100]	; 0x64
1000041e:	6f77      	ldr	r7, [r6, #116]	; 0x74
10000420:	6f36      	ldr	r6, [r6, #112]	; 0x70
10000422:	f000 f84d 	bl	100004c0 <divmod_u64u64_unsafe>
10000426:	4694      	mov	ip, r2
10000428:	4a36      	ldr	r2, [pc, #216]	; (10000504 <udiv0+0x1a>)
1000042a:	6614      	str	r4, [r2, #96]	; 0x60
1000042c:	6655      	str	r5, [r2, #100]	; 0x64
1000042e:	6757      	str	r7, [r2, #116]	; 0x74
10000430:	6716      	str	r6, [r2, #112]	; 0x70
10000432:	4662      	mov	r2, ip
10000434:	bdf0      	pop	{r4, r5, r6, r7, pc}
10000436:	46c0      	nop			; (mov r8, r8)

10000438 <divmod_s64s64_unsafe>:
10000438:	2b00      	cmp	r3, #0
1000043a:	db24      	blt.n	10000486 <l41_1+0x26>
1000043c:	d011      	beq.n	10000462 <l41_1+0x2>
1000043e:	2900      	cmp	r1, #0
10000440:	da3e      	bge.n	100004c0 <divmod_u64u64_unsafe>
10000442:	b500      	push	{lr}
10000444:	43c9      	mvns	r1, r1
10000446:	4240      	negs	r0, r0
10000448:	d100      	bne.n	1000044c <l39_1>
1000044a:	3101      	adds	r1, #1

1000044c <l39_1>:
1000044c:	f000 f838 	bl	100004c0 <divmod_u64u64_unsafe>
10000450:	43c9      	mvns	r1, r1
10000452:	4240      	negs	r0, r0
10000454:	d100      	bne.n	10000458 <l40_1>
10000456:	3101      	adds	r1, #1

10000458 <l40_1>:
10000458:	43db      	mvns	r3, r3
1000045a:	4252      	negs	r2, r2
1000045c:	d100      	bne.n	10000460 <l41_1>
1000045e:	3301      	adds	r3, #1

10000460 <l41_1>:
10000460:	bd00      	pop	{pc}
10000462:	2a00      	cmp	r2, #0
10000464:	d1eb      	bne.n	1000043e <divmod_s64s64_unsafe+0x6>
10000466:	2800      	cmp	r0, #0
10000468:	d101      	bne.n	1000046e <l41_1+0xe>
1000046a:	2900      	cmp	r1, #0
1000046c:	d005      	beq.n	1000047a <l41_1+0x1a>
1000046e:	2000      	movs	r0, #0
10000470:	0fc9      	lsrs	r1, r1, #31
10000472:	07c9      	lsls	r1, r1, #31
10000474:	d101      	bne.n	1000047a <l41_1+0x1a>
10000476:	43c0      	mvns	r0, r0
10000478:	0841      	lsrs	r1, r0, #1
1000047a:	b500      	push	{lr}
1000047c:	f009 f948 	bl	10009710 <____aeabi_ldiv0_veneer>
10000480:	2200      	movs	r2, #0
10000482:	2300      	movs	r3, #0
10000484:	bd00      	pop	{pc}
10000486:	b500      	push	{lr}
10000488:	2900      	cmp	r1, #0
1000048a:	db0a      	blt.n	100004a2 <l43_1+0x2>
1000048c:	43db      	mvns	r3, r3
1000048e:	4252      	negs	r2, r2
10000490:	d100      	bne.n	10000494 <l42_1>
10000492:	3301      	adds	r3, #1

10000494 <l42_1>:
10000494:	f000 f814 	bl	100004c0 <divmod_u64u64_unsafe>
10000498:	43c9      	mvns	r1, r1
1000049a:	4240      	negs	r0, r0
1000049c:	d100      	bne.n	100004a0 <l43_1>
1000049e:	3101      	adds	r1, #1

100004a0 <l43_1>:
100004a0:	bd00      	pop	{pc}
100004a2:	43c9      	mvns	r1, r1
100004a4:	4240      	negs	r0, r0
100004a6:	d100      	bne.n	100004aa <l44_1>
100004a8:	3101      	adds	r1, #1

100004aa <l44_1>:
100004aa:	43db      	mvns	r3, r3
100004ac:	4252      	negs	r2, r2
100004ae:	d100      	bne.n	100004b2 <l45_1>
100004b0:	3301      	adds	r3, #1

100004b2 <l45_1>:
100004b2:	f000 f805 	bl	100004c0 <divmod_u64u64_unsafe>
100004b6:	43db      	mvns	r3, r3
100004b8:	4252      	negs	r2, r2
100004ba:	d100      	bne.n	100004be <l46_1>
100004bc:	3301      	adds	r3, #1

100004be <l46_1>:
100004be:	bd00      	pop	{pc}

100004c0 <divmod_u64u64_unsafe>:
100004c0:	2900      	cmp	r1, #0
100004c2:	d123      	bne.n	1000050c <y64>
100004c4:	2b00      	cmp	r3, #0
100004c6:	d118      	bne.n	100004fa <udiv0+0x10>
100004c8:	2a00      	cmp	r2, #0
100004ca:	d00c      	beq.n	100004e6 <divmod_u64u64_unsafe+0x26>
100004cc:	46bc      	mov	ip, r7
100004ce:	4f0d      	ldr	r7, [pc, #52]	; (10000504 <udiv0+0x1a>)
100004d0:	6638      	str	r0, [r7, #96]	; 0x60
100004d2:	667a      	str	r2, [r7, #100]	; 0x64
100004d4:	2100      	movs	r1, #0
100004d6:	2300      	movs	r3, #0
100004d8:	e7ff      	b.n	100004da <divmod_u64u64_unsafe+0x1a>
100004da:	e7ff      	b.n	100004dc <divmod_u64u64_unsafe+0x1c>
100004dc:	e7ff      	b.n	100004de <divmod_u64u64_unsafe+0x1e>
100004de:	6f7a      	ldr	r2, [r7, #116]	; 0x74
100004e0:	6f38      	ldr	r0, [r7, #112]	; 0x70
100004e2:	4667      	mov	r7, ip
100004e4:	4770      	bx	lr
100004e6:	2800      	cmp	r0, #0
100004e8:	d001      	beq.n	100004ee <udiv0+0x4>

100004ea <udiv0>:
100004ea:	4807      	ldr	r0, [pc, #28]	; (10000508 <udiv0+0x1e>)
100004ec:	0001      	movs	r1, r0
100004ee:	b500      	push	{lr}
100004f0:	f009 f90e 	bl	10009710 <____aeabi_ldiv0_veneer>
100004f4:	2200      	movs	r2, #0
100004f6:	2300      	movs	r3, #0
100004f8:	bd00      	pop	{pc}
100004fa:	0002      	movs	r2, r0
100004fc:	000b      	movs	r3, r1
100004fe:	2000      	movs	r0, #0
10000500:	2100      	movs	r1, #0
10000502:	4770      	bx	lr
10000504:	d0000000 	.word	0xd0000000
10000508:	ffffffff 	.word	0xffffffff

1000050c <y64>:
1000050c:	2b00      	cmp	r3, #0
1000050e:	d000      	beq.n	10000512 <y64+0x6>
10000510:	e0bd      	b.n	1000068e <y64_x48>
10000512:	0c13      	lsrs	r3, r2, #16
10000514:	d126      	bne.n	10000564 <y64_x32>
10000516:	2a00      	cmp	r2, #0
10000518:	d0e7      	beq.n	100004ea <udiv0>
1000051a:	b480      	push	{r7}
1000051c:	4f10      	ldr	r7, [pc, #64]	; (10000560 <y64+0x54>)
1000051e:	6639      	str	r1, [r7, #96]	; 0x60
10000520:	667a      	str	r2, [r7, #100]	; 0x64
10000522:	e7ff      	b.n	10000524 <y64+0x18>
10000524:	e7ff      	b.n	10000526 <y64+0x1a>
10000526:	b430      	push	{r4, r5}
10000528:	0c04      	lsrs	r4, r0, #16
1000052a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
1000052c:	6f39      	ldr	r1, [r7, #112]	; 0x70
1000052e:	041b      	lsls	r3, r3, #16
10000530:	4323      	orrs	r3, r4
10000532:	663b      	str	r3, [r7, #96]	; 0x60
10000534:	e7ff      	b.n	10000536 <y64+0x2a>
10000536:	e7ff      	b.n	10000538 <y64+0x2c>
10000538:	e7ff      	b.n	1000053a <y64+0x2e>
1000053a:	46c0      	nop			; (mov r8, r8)
1000053c:	b284      	uxth	r4, r0
1000053e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
10000540:	6f3d      	ldr	r5, [r7, #112]	; 0x70
10000542:	041b      	lsls	r3, r3, #16
10000544:	4323      	orrs	r3, r4
10000546:	663b      	str	r3, [r7, #96]	; 0x60
10000548:	e7ff      	b.n	1000054a <y64+0x3e>
1000054a:	e7ff      	b.n	1000054c <y64+0x40>
1000054c:	46c0      	nop			; (mov r8, r8)
1000054e:	2300      	movs	r3, #0
10000550:	042c      	lsls	r4, r5, #16
10000552:	0c2d      	lsrs	r5, r5, #16
10000554:	6f7a      	ldr	r2, [r7, #116]	; 0x74
10000556:	6f38      	ldr	r0, [r7, #112]	; 0x70
10000558:	1900      	adds	r0, r0, r4
1000055a:	4169      	adcs	r1, r5
1000055c:	bcb0      	pop	{r4, r5, r7}
1000055e:	4770      	bx	lr
10000560:	d0000000 	.word	0xd0000000

10000564 <y64_x32>:
10000564:	b5f0      	push	{r4, r5, r6, r7, lr}
10000566:	4694      	mov	ip, r2
10000568:	2500      	movs	r5, #0
1000056a:	0e14      	lsrs	r4, r2, #24
1000056c:	d101      	bne.n	10000572 <y64_x32+0xe>
1000056e:	0212      	lsls	r2, r2, #8
10000570:	3508      	adds	r5, #8
10000572:	0f14      	lsrs	r4, r2, #28
10000574:	d101      	bne.n	1000057a <y64_x32+0x16>
10000576:	0112      	lsls	r2, r2, #4
10000578:	3504      	adds	r5, #4
1000057a:	0f94      	lsrs	r4, r2, #30
1000057c:	d101      	bne.n	10000582 <y64_x32+0x1e>
1000057e:	0092      	lsls	r2, r2, #2
10000580:	3502      	adds	r5, #2
10000582:	0fd4      	lsrs	r4, r2, #31
10000584:	d101      	bne.n	1000058a <y64_x32+0x26>
10000586:	0052      	lsls	r2, r2, #1
10000588:	3501      	adds	r5, #1
1000058a:	0bd4      	lsrs	r4, r2, #15
1000058c:	3401      	adds	r4, #1
1000058e:	4f25      	ldr	r7, [pc, #148]	; (10000624 <y64_x32+0xc0>)
10000590:	667c      	str	r4, [r7, #100]	; 0x64
10000592:	4c25      	ldr	r4, [pc, #148]	; (10000628 <y64_x32+0xc4>)
10000594:	663c      	str	r4, [r7, #96]	; 0x60
10000596:	0c0e      	lsrs	r6, r1, #16
10000598:	b293      	uxth	r3, r2
1000059a:	e7ff      	b.n	1000059c <y64_x32+0x38>
1000059c:	e7ff      	b.n	1000059e <y64_x32+0x3a>
1000059e:	e7ff      	b.n	100005a0 <y64_x32+0x3c>
100005a0:	6f3c      	ldr	r4, [r7, #112]	; 0x70
100005a2:	4366      	muls	r6, r4
100005a4:	0c36      	lsrs	r6, r6, #16
100005a6:	0377      	lsls	r7, r6, #13
100005a8:	46be      	mov	lr, r7
100005aa:	4373      	muls	r3, r6
100005ac:	0bdf      	lsrs	r7, r3, #15
100005ae:	045b      	lsls	r3, r3, #17
100005b0:	1ac0      	subs	r0, r0, r3
100005b2:	41b9      	sbcs	r1, r7
100005b4:	0c13      	lsrs	r3, r2, #16
100005b6:	4373      	muls	r3, r6
100005b8:	18db      	adds	r3, r3, r3
100005ba:	1ac9      	subs	r1, r1, r3
100005bc:	08ce      	lsrs	r6, r1, #3
100005be:	4366      	muls	r6, r4
100005c0:	0c36      	lsrs	r6, r6, #16
100005c2:	44b6      	add	lr, r6
100005c4:	b293      	uxth	r3, r2
100005c6:	4373      	muls	r3, r6
100005c8:	0f1f      	lsrs	r7, r3, #28
100005ca:	011b      	lsls	r3, r3, #4
100005cc:	1ac0      	subs	r0, r0, r3
100005ce:	41b9      	sbcs	r1, r7
100005d0:	0c13      	lsrs	r3, r2, #16
100005d2:	4373      	muls	r3, r6
100005d4:	0b1f      	lsrs	r7, r3, #12
100005d6:	051b      	lsls	r3, r3, #20
100005d8:	1ac0      	subs	r0, r0, r3
100005da:	41b9      	sbcs	r1, r7
100005dc:	0d86      	lsrs	r6, r0, #22
100005de:	028f      	lsls	r7, r1, #10
100005e0:	433e      	orrs	r6, r7
100005e2:	4366      	muls	r6, r4
100005e4:	0c36      	lsrs	r6, r6, #16
100005e6:	2d09      	cmp	r5, #9
100005e8:	db24      	blt.n	10000634 <last0>
100005ea:	0a52      	lsrs	r2, r2, #9
100005ec:	4372      	muls	r2, r6
100005ee:	1a80      	subs	r0, r0, r2
100005f0:	0377      	lsls	r7, r6, #13
100005f2:	0a46      	lsrs	r6, r0, #9
100005f4:	4366      	muls	r6, r4
100005f6:	0c36      	lsrs	r6, r6, #16
100005f8:	2316      	movs	r3, #22
100005fa:	1b5b      	subs	r3, r3, r5
100005fc:	40de      	lsrs	r6, r3
100005fe:	40df      	lsrs	r7, r3
10000600:	19bf      	adds	r7, r7, r6
10000602:	4664      	mov	r4, ip
10000604:	4366      	muls	r6, r4
10000606:	1b82      	subs	r2, r0, r6
10000608:	4670      	mov	r0, lr
1000060a:	3504      	adds	r5, #4
1000060c:	3306      	adds	r3, #6
1000060e:	0001      	movs	r1, r0
10000610:	40d9      	lsrs	r1, r3
10000612:	40a8      	lsls	r0, r5
10000614:	19c0      	adds	r0, r0, r7
10000616:	d300      	bcc.n	1000061a <y64_x32+0xb6>
10000618:	3101      	adds	r1, #1
1000061a:	42a2      	cmp	r2, r4
1000061c:	d206      	bcs.n	1000062c <y64_x32+0xc8>
1000061e:	2300      	movs	r3, #0
10000620:	bdf0      	pop	{r4, r5, r6, r7, pc}
10000622:	0000      	.short	0x0000
10000624:	d0000000 	.word	0xd0000000
10000628:	ffffffff 	.word	0xffffffff
1000062c:	1b12      	subs	r2, r2, r4
1000062e:	3001      	adds	r0, #1
10000630:	d3f3      	bcc.n	1000061a <y64_x32+0xb6>
10000632:	e7f1      	b.n	10000618 <y64_x32+0xb4>

10000634 <last0>:
10000634:	2709      	movs	r7, #9
10000636:	1b7f      	subs	r7, r7, r5
10000638:	40fe      	lsrs	r6, r7
1000063a:	4664      	mov	r4, ip
1000063c:	b2a2      	uxth	r2, r4
1000063e:	4372      	muls	r2, r6
10000640:	1a80      	subs	r0, r0, r2
10000642:	d200      	bcs.n	10000646 <last0+0x12>
10000644:	3901      	subs	r1, #1
10000646:	0c22      	lsrs	r2, r4, #16
10000648:	4372      	muls	r2, r6
1000064a:	0c13      	lsrs	r3, r2, #16
1000064c:	0412      	lsls	r2, r2, #16
1000064e:	1a82      	subs	r2, r0, r2
10000650:	4199      	sbcs	r1, r3
10000652:	000b      	movs	r3, r1
10000654:	4670      	mov	r0, lr
10000656:	3504      	adds	r5, #4
10000658:	3713      	adds	r7, #19
1000065a:	0001      	movs	r1, r0
1000065c:	40f9      	lsrs	r1, r7
1000065e:	40a8      	lsls	r0, r5
10000660:	1980      	adds	r0, r0, r6
10000662:	d300      	bcc.n	10000666 <last0+0x32>
10000664:	3101      	adds	r1, #1
10000666:	2b00      	cmp	r3, #0
10000668:	d102      	bne.n	10000670 <last0+0x3c>
1000066a:	42a2      	cmp	r2, r4
1000066c:	d20a      	bcs.n	10000684 <last0+0x50>
1000066e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10000670:	3001      	adds	r0, #1
10000672:	d300      	bcc.n	10000676 <last0+0x42>
10000674:	3101      	adds	r1, #1
10000676:	1b12      	subs	r2, r2, r4
10000678:	d2fa      	bcs.n	10000670 <last0+0x3c>
1000067a:	3b01      	subs	r3, #1
1000067c:	d1f8      	bne.n	10000670 <last0+0x3c>
1000067e:	42a2      	cmp	r2, r4
10000680:	d200      	bcs.n	10000684 <last0+0x50>
10000682:	bdf0      	pop	{r4, r5, r6, r7, pc}
10000684:	3001      	adds	r0, #1
10000686:	d300      	bcc.n	1000068a <last0+0x56>
10000688:	3101      	adds	r1, #1
1000068a:	1b12      	subs	r2, r2, r4
1000068c:	e7f7      	b.n	1000067e <last0+0x4a>

1000068e <y64_x48>:
1000068e:	b5f0      	push	{r4, r5, r6, r7, lr}
10000690:	0c1c      	lsrs	r4, r3, #16
10000692:	d000      	beq.n	10000696 <y64_x48+0x8>
10000694:	e080      	b.n	10000798 <y64_x64>
10000696:	b40c      	push	{r2, r3}
10000698:	2500      	movs	r5, #0
1000069a:	0a1c      	lsrs	r4, r3, #8
1000069c:	d104      	bne.n	100006a8 <y64_x48+0x1a>
1000069e:	021b      	lsls	r3, r3, #8
100006a0:	0e16      	lsrs	r6, r2, #24
100006a2:	4333      	orrs	r3, r6
100006a4:	0212      	lsls	r2, r2, #8
100006a6:	3508      	adds	r5, #8
100006a8:	0b1c      	lsrs	r4, r3, #12
100006aa:	d104      	bne.n	100006b6 <y64_x48+0x28>
100006ac:	011b      	lsls	r3, r3, #4
100006ae:	0f16      	lsrs	r6, r2, #28
100006b0:	4333      	orrs	r3, r6
100006b2:	0112      	lsls	r2, r2, #4
100006b4:	3504      	adds	r5, #4
100006b6:	0b9c      	lsrs	r4, r3, #14
100006b8:	d104      	bne.n	100006c4 <y64_x48+0x36>
100006ba:	009b      	lsls	r3, r3, #2
100006bc:	0f96      	lsrs	r6, r2, #30
100006be:	4333      	orrs	r3, r6
100006c0:	0092      	lsls	r2, r2, #2
100006c2:	3502      	adds	r5, #2
100006c4:	0bdc      	lsrs	r4, r3, #15
100006c6:	d102      	bne.n	100006ce <y64_x48+0x40>
100006c8:	1892      	adds	r2, r2, r2
100006ca:	415b      	adcs	r3, r3
100006cc:	3501      	adds	r5, #1
100006ce:	001c      	movs	r4, r3
100006d0:	1897      	adds	r7, r2, r2
100006d2:	4164      	adcs	r4, r4
100006d4:	3401      	adds	r4, #1
100006d6:	4f46      	ldr	r7, [pc, #280]	; (100007f0 <y64_x64+0x58>)
100006d8:	667c      	str	r4, [r7, #100]	; 0x64
100006da:	4c46      	ldr	r4, [pc, #280]	; (100007f4 <y64_x64+0x5c>)
100006dc:	663c      	str	r4, [r7, #96]	; 0x60
100006de:	0c0e      	lsrs	r6, r1, #16
100006e0:	e7ff      	b.n	100006e2 <y64_x48+0x54>
100006e2:	e7ff      	b.n	100006e4 <y64_x48+0x56>
100006e4:	e7ff      	b.n	100006e6 <y64_x48+0x58>
100006e6:	46c0      	nop			; (mov r8, r8)
100006e8:	6f3c      	ldr	r4, [r7, #112]	; 0x70
100006ea:	4366      	muls	r6, r4
100006ec:	0c36      	lsrs	r6, r6, #16
100006ee:	0377      	lsls	r7, r6, #13
100006f0:	46be      	mov	lr, r7
100006f2:	b297      	uxth	r7, r2
100006f4:	4377      	muls	r7, r6
100006f6:	1bc0      	subs	r0, r0, r7
100006f8:	d200      	bcs.n	100006fc <y64_x48+0x6e>
100006fa:	3901      	subs	r1, #1
100006fc:	1bc0      	subs	r0, r0, r7
100006fe:	d200      	bcs.n	10000702 <y64_x48+0x74>
10000700:	3901      	subs	r1, #1
10000702:	b29f      	uxth	r7, r3
10000704:	4377      	muls	r7, r6
10000706:	1bc9      	subs	r1, r1, r7
10000708:	1bc9      	subs	r1, r1, r7
1000070a:	0c17      	lsrs	r7, r2, #16
1000070c:	4377      	muls	r7, r6
1000070e:	047e      	lsls	r6, r7, #17
10000710:	0bff      	lsrs	r7, r7, #15
10000712:	1b80      	subs	r0, r0, r6
10000714:	41b9      	sbcs	r1, r7
10000716:	08ce      	lsrs	r6, r1, #3
10000718:	4366      	muls	r6, r4
1000071a:	0c36      	lsrs	r6, r6, #16
1000071c:	2d0c      	cmp	r5, #12
1000071e:	db33      	blt.n	10000788 <last1>
10000720:	44b6      	add	lr, r6
10000722:	0b12      	lsrs	r2, r2, #12
10000724:	051f      	lsls	r7, r3, #20
10000726:	433a      	orrs	r2, r7
10000728:	0b1b      	lsrs	r3, r3, #12
1000072a:	b297      	uxth	r7, r2
1000072c:	4377      	muls	r7, r6
1000072e:	1bc0      	subs	r0, r0, r7
10000730:	d200      	bcs.n	10000734 <y64_x48+0xa6>
10000732:	3901      	subs	r1, #1
10000734:	b29f      	uxth	r7, r3
10000736:	4377      	muls	r7, r6
10000738:	1bc9      	subs	r1, r1, r7
1000073a:	0c17      	lsrs	r7, r2, #16
1000073c:	4377      	muls	r7, r6
1000073e:	043e      	lsls	r6, r7, #16
10000740:	0c3f      	lsrs	r7, r7, #16
10000742:	1b80      	subs	r0, r0, r6
10000744:	41b9      	sbcs	r1, r7
10000746:	0d86      	lsrs	r6, r0, #22
10000748:	028f      	lsls	r7, r1, #10
1000074a:	433e      	orrs	r6, r7
1000074c:	4366      	muls	r6, r4
1000074e:	2729      	movs	r7, #41	; 0x29
10000750:	1b7f      	subs	r7, r7, r5
10000752:	40fe      	lsrs	r6, r7
10000754:	3d0c      	subs	r5, #12
10000756:	4677      	mov	r7, lr
10000758:	40af      	lsls	r7, r5
1000075a:	19bf      	adds	r7, r7, r6
1000075c:	bc30      	pop	{r4, r5}
1000075e:	b2a2      	uxth	r2, r4
10000760:	b2ab      	uxth	r3, r5
10000762:	4372      	muls	r2, r6
10000764:	4373      	muls	r3, r6
10000766:	1a80      	subs	r0, r0, r2
10000768:	4199      	sbcs	r1, r3
1000076a:	0c22      	lsrs	r2, r4, #16
1000076c:	4372      	muls	r2, r6
1000076e:	0c13      	lsrs	r3, r2, #16
10000770:	0412      	lsls	r2, r2, #16
10000772:	1a80      	subs	r0, r0, r2
10000774:	4199      	sbcs	r1, r3
10000776:	0002      	movs	r2, r0
10000778:	000b      	movs	r3, r1
1000077a:	3701      	adds	r7, #1
1000077c:	1b00      	subs	r0, r0, r4
1000077e:	41a9      	sbcs	r1, r5
10000780:	d2f9      	bcs.n	10000776 <y64_x48+0xe8>
10000782:	1e78      	subs	r0, r7, #1
10000784:	2100      	movs	r1, #0
10000786:	bdf0      	pop	{r4, r5, r6, r7, pc}

10000788 <last1>:
10000788:	270c      	movs	r7, #12
1000078a:	1b7f      	subs	r7, r7, r5
1000078c:	40fe      	lsrs	r6, r7
1000078e:	4677      	mov	r7, lr
10000790:	0b7f      	lsrs	r7, r7, #13
10000792:	40af      	lsls	r7, r5
10000794:	19ff      	adds	r7, r7, r7
10000796:	e7e0      	b.n	1000075a <y64_x48+0xcc>

10000798 <y64_x64>:
10000798:	2400      	movs	r4, #0
1000079a:	1c5d      	adds	r5, r3, #1
1000079c:	d007      	beq.n	100007ae <y64_x64+0x16>
1000079e:	4f14      	ldr	r7, [pc, #80]	; (100007f0 <y64_x64+0x58>)
100007a0:	667d      	str	r5, [r7, #100]	; 0x64
100007a2:	6639      	str	r1, [r7, #96]	; 0x60
100007a4:	e7ff      	b.n	100007a6 <y64_x64+0xe>
100007a6:	e7ff      	b.n	100007a8 <y64_x64+0x10>
100007a8:	e7ff      	b.n	100007aa <y64_x64+0x12>
100007aa:	e7ff      	b.n	100007ac <y64_x64+0x14>
100007ac:	6f3c      	ldr	r4, [r7, #112]	; 0x70
100007ae:	b295      	uxth	r5, r2
100007b0:	b29e      	uxth	r6, r3
100007b2:	4365      	muls	r5, r4
100007b4:	4366      	muls	r6, r4
100007b6:	1b40      	subs	r0, r0, r5
100007b8:	41b1      	sbcs	r1, r6
100007ba:	0c15      	lsrs	r5, r2, #16
100007bc:	0c1e      	lsrs	r6, r3, #16
100007be:	4365      	muls	r5, r4
100007c0:	4366      	muls	r6, r4
100007c2:	0436      	lsls	r6, r6, #16
100007c4:	0c2f      	lsrs	r7, r5, #16
100007c6:	433e      	orrs	r6, r7
100007c8:	042d      	lsls	r5, r5, #16
100007ca:	1b40      	subs	r0, r0, r5
100007cc:	41b1      	sbcs	r1, r6
100007ce:	4299      	cmp	r1, r3
100007d0:	d204      	bcs.n	100007dc <y64_x64+0x44>
100007d2:	0002      	movs	r2, r0
100007d4:	000b      	movs	r3, r1
100007d6:	0020      	movs	r0, r4
100007d8:	2100      	movs	r1, #0
100007da:	bdf0      	pop	{r4, r5, r6, r7, pc}
100007dc:	d101      	bne.n	100007e2 <y64_x64+0x4a>
100007de:	4290      	cmp	r0, r2
100007e0:	d3f7      	bcc.n	100007d2 <y64_x64+0x3a>
100007e2:	1a80      	subs	r0, r0, r2
100007e4:	4199      	sbcs	r1, r3
100007e6:	3401      	adds	r4, #1
100007e8:	4299      	cmp	r1, r3
100007ea:	d3f2      	bcc.n	100007d2 <y64_x64+0x3a>
100007ec:	e7f6      	b.n	100007dc <y64_x64+0x44>
100007ee:	0000      	.short	0x0000
100007f0:	d0000000 	.word	0xd0000000
100007f4:	ffffffff 	.word	0xffffffff

100007f8 <hw_divider_save_state>:
100007f8:	b530      	push	{r4, r5, lr}
100007fa:	4d05      	ldr	r5, [pc, #20]	; (10000810 <hw_divider_save_state+0x18>)
100007fc:	6fac      	ldr	r4, [r5, #120]	; 0x78
100007fe:	0864      	lsrs	r4, r4, #1
10000800:	d3fd      	bcc.n	100007fe <hw_divider_save_state+0x6>
10000802:	6e29      	ldr	r1, [r5, #96]	; 0x60
10000804:	6e6a      	ldr	r2, [r5, #100]	; 0x64
10000806:	6f6b      	ldr	r3, [r5, #116]	; 0x74
10000808:	6f2c      	ldr	r4, [r5, #112]	; 0x70
1000080a:	c01e      	stmia	r0!, {r1, r2, r3, r4}
1000080c:	bd30      	pop	{r4, r5, pc}
1000080e:	0000      	.short	0x0000
10000810:	d0000000 	.word	0xd0000000

10000814 <hw_divider_restore_state>:
10000814:	b530      	push	{r4, r5, lr}
10000816:	4d03      	ldr	r5, [pc, #12]	; (10000824 <hw_divider_restore_state+0x10>)
10000818:	c81e      	ldmia	r0!, {r1, r2, r3, r4}
1000081a:	6629      	str	r1, [r5, #96]	; 0x60
1000081c:	666a      	str	r2, [r5, #100]	; 0x64
1000081e:	676b      	str	r3, [r5, #116]	; 0x74
10000820:	672c      	str	r4, [r5, #112]	; 0x70
10000822:	bd30      	pop	{r4, r5, pc}
10000824:	d0000000 	.word	0xd0000000

10000828 <__wrap___aeabi_drsub>:
10000828:	4048      	eors	r0, r1
1000082a:	4041      	eors	r1, r0
1000082c:	4048      	eors	r0, r1

1000082e <__wrap___aeabi_dsub>:
1000082e:	b418      	push	{r3, r4}
10000830:	4b11      	ldr	r3, [pc, #68]	; (10000878 <__wrap___aeabi_dmul+0x14>)
10000832:	685b      	ldr	r3, [r3, #4]
10000834:	46fc      	mov	ip, pc
10000836:	9301      	str	r3, [sp, #4]
10000838:	bd08      	pop	{r3, pc}
1000083a:	df04      	.short	0xdf04
1000083c:	10000a37 	.word	0x10000a37

10000840 <__wrap___aeabi_dadd>:
10000840:	b418      	push	{r3, r4}
10000842:	4b0d      	ldr	r3, [pc, #52]	; (10000878 <__wrap___aeabi_dmul+0x14>)
10000844:	681b      	ldr	r3, [r3, #0]
10000846:	46fc      	mov	ip, pc
10000848:	9301      	str	r3, [sp, #4]
1000084a:	bd08      	pop	{r3, pc}
1000084c:	0a41df00 	.word	0x0a41df00
10000850:	1000      	.short	0x1000

10000852 <__wrap___aeabi_ddiv>:
10000852:	b418      	push	{r3, r4}
10000854:	4b08      	ldr	r3, [pc, #32]	; (10000878 <__wrap___aeabi_dmul+0x14>)
10000856:	68db      	ldr	r3, [r3, #12]
10000858:	46fc      	mov	ip, pc
1000085a:	9301      	str	r3, [sp, #4]
1000085c:	bd08      	pop	{r3, pc}
1000085e:	df0c      	.short	0xdf0c
10000860:	10000cf9 	.word	0x10000cf9

10000864 <__wrap___aeabi_dmul>:
10000864:	b418      	push	{r3, r4}
10000866:	4b04      	ldr	r3, [pc, #16]	; (10000878 <__wrap___aeabi_dmul+0x14>)
10000868:	689b      	ldr	r3, [r3, #8]
1000086a:	46fc      	mov	ip, pc
1000086c:	9301      	str	r3, [sp, #4]
1000086e:	bd08      	pop	{r3, pc}
10000870:	0b9ddf08 	.word	0x0b9ddf08
10000874:	00001000 	.word	0x00001000
10000878:	20002aa0 	.word	0x20002aa0

1000087c <__wrap___aeabi_cdrcmple>:
1000087c:	b5ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7, lr}
1000087e:	4050      	eors	r0, r2
10000880:	4042      	eors	r2, r0
10000882:	4050      	eors	r0, r2
10000884:	4059      	eors	r1, r3
10000886:	404b      	eors	r3, r1
10000888:	4059      	eors	r1, r3
1000088a:	e000      	b.n	1000088e <__aeabi_dfcmple_guts>

1000088c <__wrap___aeabi_cdcmpeq>:
1000088c:	b5ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7, lr}

1000088e <__aeabi_dfcmple_guts>:
1000088e:	4f15      	ldr	r7, [pc, #84]	; (100008e4 <__aeabi_dfcmple_guts+0x56>)
10000890:	004c      	lsls	r4, r1, #1
10000892:	0d64      	lsrs	r4, r4, #21
10000894:	d003      	beq.n	1000089e <__aeabi_dfcmple_guts+0x10>
10000896:	42bc      	cmp	r4, r7
10000898:	d104      	bne.n	100008a4 <__aeabi_dfcmple_guts+0x16>
1000089a:	030c      	lsls	r4, r1, #12
1000089c:	d814      	bhi.n	100008c8 <__aeabi_dfcmple_guts+0x3a>
1000089e:	2000      	movs	r0, #0
100008a0:	0d09      	lsrs	r1, r1, #20
100008a2:	0509      	lsls	r1, r1, #20
100008a4:	005c      	lsls	r4, r3, #1
100008a6:	0d64      	lsrs	r4, r4, #21
100008a8:	d003      	beq.n	100008b2 <__aeabi_dfcmple_guts+0x24>
100008aa:	42bc      	cmp	r4, r7
100008ac:	d104      	bne.n	100008b8 <__aeabi_dfcmple_guts+0x2a>
100008ae:	031c      	lsls	r4, r3, #12
100008b0:	d80a      	bhi.n	100008c8 <__aeabi_dfcmple_guts+0x3a>
100008b2:	2200      	movs	r2, #0
100008b4:	0d1b      	lsrs	r3, r3, #20
100008b6:	051b      	lsls	r3, r3, #20
100008b8:	2601      	movs	r6, #1
100008ba:	404b      	eors	r3, r1
100008bc:	d409      	bmi.n	100008d2 <__aeabi_dfcmple_guts+0x44>
100008be:	404b      	eors	r3, r1
100008c0:	d503      	bpl.n	100008ca <__aeabi_dfcmple_guts+0x3c>
100008c2:	428b      	cmp	r3, r1
100008c4:	d100      	bne.n	100008c8 <__aeabi_dfcmple_guts+0x3a>
100008c6:	4282      	cmp	r2, r0
100008c8:	bdff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7, pc}
100008ca:	4299      	cmp	r1, r3
100008cc:	d1fc      	bne.n	100008c8 <__aeabi_dfcmple_guts+0x3a>
100008ce:	4290      	cmp	r0, r2
100008d0:	bdff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7, pc}
100008d2:	430b      	orrs	r3, r1
100008d4:	18db      	adds	r3, r3, r3
100008d6:	4303      	orrs	r3, r0
100008d8:	4313      	orrs	r3, r2
100008da:	d0f5      	beq.n	100008c8 <__aeabi_dfcmple_guts+0x3a>
100008dc:	43c9      	mvns	r1, r1
100008de:	1849      	adds	r1, r1, r1
100008e0:	bdff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7, pc}
100008e2:	0000      	.short	0x0000
100008e4:	000007ff 	.word	0x000007ff

100008e8 <__wrap___aeabi_dcmplt>:
100008e8:	b500      	push	{lr}
100008ea:	f7ff ffcf 	bl	1000088c <__wrap___aeabi_cdcmpeq>
100008ee:	4180      	sbcs	r0, r0
100008f0:	bd00      	pop	{pc}
100008f2:	46c0      	nop			; (mov r8, r8)

100008f4 <__wrap___aeabi_dcmple>:
100008f4:	b500      	push	{lr}
100008f6:	f7ff ffc9 	bl	1000088c <__wrap___aeabi_cdcmpeq>
100008fa:	d901      	bls.n	10000900 <__wrap___aeabi_dcmple+0xc>
100008fc:	2000      	movs	r0, #0
100008fe:	bd00      	pop	{pc}
10000900:	2001      	movs	r0, #1
10000902:	bd00      	pop	{pc}

10000904 <__wrap___aeabi_dcmpge>:
10000904:	b500      	push	{lr}
10000906:	f7ff ffb9 	bl	1000087c <__wrap___aeabi_cdrcmple>
1000090a:	d901      	bls.n	10000910 <__wrap___aeabi_dcmpge+0xc>
1000090c:	2000      	movs	r0, #0
1000090e:	bd00      	pop	{pc}
10000910:	2001      	movs	r0, #1
10000912:	bd00      	pop	{pc}

10000914 <__wrap___aeabi_dcmpgt>:
10000914:	b500      	push	{lr}
10000916:	f7ff ffb1 	bl	1000087c <__wrap___aeabi_cdrcmple>
1000091a:	4180      	sbcs	r0, r0
1000091c:	bd00      	pop	{pc}

1000091e <__wrap___aeabi_dcmpun>:
1000091e:	2001      	movs	r0, #1
10000920:	0540      	lsls	r0, r0, #21
10000922:	004a      	lsls	r2, r1, #1
10000924:	1812      	adds	r2, r2, r0
10000926:	d804      	bhi.n	10000932 <__wrap___aeabi_dcmpun+0x14>
10000928:	005a      	lsls	r2, r3, #1
1000092a:	1812      	adds	r2, r2, r0
1000092c:	d801      	bhi.n	10000932 <__wrap___aeabi_dcmpun+0x14>
1000092e:	2000      	movs	r0, #0
10000930:	4770      	bx	lr
10000932:	2001      	movs	r0, #1
10000934:	4770      	bx	lr
10000936:	2000      	movs	r0, #0
10000938:	4770      	bx	lr
	...

1000093c <__wrap___aeabi_ui2d>:
1000093c:	2100      	movs	r1, #0
1000093e:	2800      	cmp	r0, #0
10000940:	d105      	bne.n	1000094e <__wrap___aeabi_i2d+0xa>
10000942:	4770      	bx	lr

10000944 <__wrap___aeabi_i2d>:
10000944:	17c1      	asrs	r1, r0, #31
10000946:	4048      	eors	r0, r1
10000948:	1a40      	subs	r0, r0, r1
1000094a:	d0fa      	beq.n	10000942 <__wrap___aeabi_ui2d+0x6>
1000094c:	07c9      	lsls	r1, r1, #31
1000094e:	b513      	push	{r0, r1, r4, lr}
10000950:	4b06      	ldr	r3, [pc, #24]	; (1000096c <__wrap___aeabi_i2d+0x28>)
10000952:	681b      	ldr	r3, [r3, #0]
10000954:	4798      	blx	r3
10000956:	bc0c      	pop	{r2, r3}
10000958:	1c44      	adds	r4, r0, #1
1000095a:	40a2      	lsls	r2, r4
1000095c:	0510      	lsls	r0, r2, #20
1000095e:	0b12      	lsrs	r2, r2, #12
10000960:	4903      	ldr	r1, [pc, #12]	; (10000970 <__wrap___aeabi_i2d+0x2c>)
10000962:	1b09      	subs	r1, r1, r4
10000964:	0509      	lsls	r1, r1, #20
10000966:	4319      	orrs	r1, r3
10000968:	4311      	orrs	r1, r2
1000096a:	bd10      	pop	{r4, pc}
1000096c:	20039b98 	.word	0x20039b98
10000970:	0000041f 	.word	0x0000041f

10000974 <__wrap___aeabi_d2iz>:
10000974:	b510      	push	{r4, lr}
10000976:	004c      	lsls	r4, r1, #1
10000978:	0d62      	lsrs	r2, r4, #21
1000097a:	2380      	movs	r3, #128	; 0x80
1000097c:	18d2      	adds	r2, r2, r3
1000097e:	00db      	lsls	r3, r3, #3
10000980:	1ad2      	subs	r2, r2, r3
10000982:	055b      	lsls	r3, r3, #21
10000984:	2a7e      	cmp	r2, #126	; 0x7e
10000986:	dd10      	ble.n	100009aa <__wrap___aeabi_d2iz+0x36>
10000988:	3a9e      	subs	r2, #158	; 0x9e
1000098a:	da13      	bge.n	100009b4 <__wrap___aeabi_d2iz+0x40>
1000098c:	17cc      	asrs	r4, r1, #31
1000098e:	0309      	lsls	r1, r1, #12
10000990:	0849      	lsrs	r1, r1, #1
10000992:	4319      	orrs	r1, r3
10000994:	4252      	negs	r2, r2
10000996:	40d1      	lsrs	r1, r2
10000998:	0064      	lsls	r4, r4, #1
1000099a:	3401      	adds	r4, #1
1000099c:	3215      	adds	r2, #21
1000099e:	2a20      	cmp	r2, #32
100009a0:	da05      	bge.n	100009ae <__wrap___aeabi_d2iz+0x3a>
100009a2:	40d0      	lsrs	r0, r2
100009a4:	4308      	orrs	r0, r1
100009a6:	4360      	muls	r0, r4
100009a8:	bd10      	pop	{r4, pc}
100009aa:	2000      	movs	r0, #0
100009ac:	bd10      	pop	{r4, pc}
100009ae:	4608      	mov	r0, r1
100009b0:	4360      	muls	r0, r4
100009b2:	bd10      	pop	{r4, pc}
100009b4:	0fc8      	lsrs	r0, r1, #31
100009b6:	18c0      	adds	r0, r0, r3
100009b8:	3801      	subs	r0, #1
100009ba:	bd10      	pop	{r4, pc}

100009bc <__wrap___aeabi_d2uiz>:
100009bc:	b418      	push	{r3, r4}
100009be:	4b04      	ldr	r3, [pc, #16]	; (100009d0 <__wrap___aeabi_d2uiz+0x14>)
100009c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100009c2:	46fc      	mov	ip, pc
100009c4:	9301      	str	r3, [sp, #4]
100009c6:	bd08      	pop	{r3, pc}
100009c8:	0f25df24 	.word	0x0f25df24
100009cc:	00001000 	.word	0x00001000
100009d0:	20002aa0 	.word	0x20002aa0

100009d4 <__wrap___aeabi_ul2d>:
100009d4:	b418      	push	{r3, r4}
100009d6:	4b04      	ldr	r3, [pc, #16]	; (100009e8 <__wrap___aeabi_ul2d+0x14>)
100009d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
100009da:	46fc      	mov	ip, pc
100009dc:	9301      	str	r3, [sp, #4]
100009de:	bd08      	pop	{r3, pc}
100009e0:	100ddf64 	.word	0x100ddf64
100009e4:	00001000 	.word	0x00001000
100009e8:	20002aa0 	.word	0x20002aa0

100009ec <__wrap___aeabi_d2f>:
100009ec:	b418      	push	{r3, r4}
100009ee:	4b04      	ldr	r3, [pc, #16]	; (10000a00 <__wrap___aeabi_d2f+0x14>)
100009f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
100009f2:	46fc      	mov	ip, pc
100009f4:	9301      	str	r3, [sp, #4]
100009f6:	bd08      	pop	{r3, pc}
100009f8:	0fa1df7c 	.word	0x0fa1df7c
100009fc:	00001000 	.word	0x00001000
10000a00:	20002aa0 	.word	0x20002aa0

10000a04 <double_table_shim_on_use_helper>:
10000a04:	b507      	push	{r0, r1, r2, lr}
10000a06:	4660      	mov	r0, ip
10000a08:	8801      	ldrh	r1, [r0, #0]
10000a0a:	0a0a      	lsrs	r2, r1, #8
10000a0c:	3002      	adds	r0, #2
10000a0e:	2adf      	cmp	r2, #223	; 0xdf
10000a10:	d1fa      	bne.n	10000a08 <double_table_shim_on_use_helper+0x4>
10000a12:	b2c9      	uxtb	r1, r1
10000a14:	0882      	lsrs	r2, r0, #2
10000a16:	d304      	bcc.n	10000a22 <double_table_shim_on_use_helper+0x1e>
10000a18:	8802      	ldrh	r2, [r0, #0]
10000a1a:	8840      	ldrh	r0, [r0, #2]
10000a1c:	0400      	lsls	r0, r0, #16
10000a1e:	4310      	orrs	r0, r2
10000a20:	e000      	b.n	10000a24 <double_table_shim_on_use_helper+0x20>
10000a22:	6800      	ldr	r0, [r0, #0]
10000a24:	4a01      	ldr	r2, [pc, #4]	; (10000a2c <double_table_shim_on_use_helper+0x28>)
10000a26:	5050      	str	r0, [r2, r1]
10000a28:	9003      	str	r0, [sp, #12]
10000a2a:	bd07      	pop	{r0, r1, r2, pc}
10000a2c:	20002aa0 	.word	0x20002aa0

10000a30 <drsub_shim>:
10000a30:	b40f      	push	{r0, r1, r2, r3}
10000a32:	bc03      	pop	{r0, r1}
10000a34:	bc0c      	pop	{r2, r3}

10000a36 <dsub_shim>:
10000a36:	b5f0      	push	{r4, r5, r6, r7, lr}
10000a38:	2401      	movs	r4, #1
10000a3a:	07e4      	lsls	r4, r4, #31
10000a3c:	4063      	eors	r3, r4
10000a3e:	e000      	b.n	10000a42 <da_entry>

10000a40 <dadd_shim>:
10000a40:	b5f0      	push	{r4, r5, r6, r7, lr}

10000a42 <da_entry>:
10000a42:	0d0c      	lsrs	r4, r1, #20
10000a44:	0fcf      	lsrs	r7, r1, #31
10000a46:	1e66      	subs	r6, r4, #1
10000a48:	0536      	lsls	r6, r6, #20
10000a4a:	1b89      	subs	r1, r1, r6
10000a4c:	0564      	lsls	r4, r4, #21
10000a4e:	d303      	bcc.n	10000a58 <l7_1>
10000a50:	43c9      	mvns	r1, r1
10000a52:	4240      	negs	r0, r0
10000a54:	d300      	bcc.n	10000a58 <l7_1>
10000a56:	3101      	adds	r1, #1

10000a58 <l7_1>:
10000a58:	0d64      	lsrs	r4, r4, #21
10000a5a:	d003      	beq.n	10000a64 <l7_2>
10000a5c:	1c66      	adds	r6, r4, #1
10000a5e:	0af6      	lsrs	r6, r6, #11
10000a60:	d007      	beq.n	10000a72 <l7_3>
10000a62:	1be4      	subs	r4, r4, r7

10000a64 <l7_2>:
10000a64:	2000      	movs	r0, #0
10000a66:	007f      	lsls	r7, r7, #1
10000a68:	1c79      	adds	r1, r7, #1
10000a6a:	0789      	lsls	r1, r1, #30
10000a6c:	1289      	asrs	r1, r1, #10
10000a6e:	3c80      	subs	r4, #128	; 0x80
10000a70:	0324      	lsls	r4, r4, #12

10000a72 <l7_3>:
10000a72:	0d1d      	lsrs	r5, r3, #20
10000a74:	0fdf      	lsrs	r7, r3, #31
10000a76:	1e6e      	subs	r6, r5, #1
10000a78:	0536      	lsls	r6, r6, #20
10000a7a:	1b9b      	subs	r3, r3, r6
10000a7c:	056d      	lsls	r5, r5, #21
10000a7e:	d303      	bcc.n	10000a88 <l8_1>
10000a80:	43db      	mvns	r3, r3
10000a82:	4252      	negs	r2, r2
10000a84:	d300      	bcc.n	10000a88 <l8_1>
10000a86:	3301      	adds	r3, #1

10000a88 <l8_1>:
10000a88:	0d6d      	lsrs	r5, r5, #21
10000a8a:	d003      	beq.n	10000a94 <l8_2>
10000a8c:	1c6e      	adds	r6, r5, #1
10000a8e:	0af6      	lsrs	r6, r6, #11
10000a90:	d007      	beq.n	10000aa2 <l8_3>
10000a92:	1bed      	subs	r5, r5, r7

10000a94 <l8_2>:
10000a94:	2200      	movs	r2, #0
10000a96:	007f      	lsls	r7, r7, #1
10000a98:	1c7b      	adds	r3, r7, #1
10000a9a:	079b      	lsls	r3, r3, #30
10000a9c:	129b      	asrs	r3, r3, #10
10000a9e:	3d80      	subs	r5, #128	; 0x80
10000aa0:	032d      	lsls	r5, r5, #12

10000aa2 <l8_3>:
10000aa2:	1b2f      	subs	r7, r5, r4
10000aa4:	1b66      	subs	r6, r4, r5
10000aa6:	d458      	bmi.n	10000b5a <da_ygtx>
10000aa8:	46a4      	mov	ip, r4
10000aaa:	2e20      	cmp	r6, #32
10000aac:	da46      	bge.n	10000b3c <da_xrgty>
10000aae:	3720      	adds	r7, #32
10000ab0:	0014      	movs	r4, r2
10000ab2:	40bc      	lsls	r4, r7

10000ab4 <da_xgty0>:
10000ab4:	001d      	movs	r5, r3
10000ab6:	40bd      	lsls	r5, r7
10000ab8:	40f2      	lsrs	r2, r6
10000aba:	4133      	asrs	r3, r6
10000abc:	432a      	orrs	r2, r5

10000abe <da_add>:
10000abe:	1880      	adds	r0, r0, r2
10000ac0:	4159      	adcs	r1, r3

10000ac2 <da_pack>:
10000ac2:	0fcb      	lsrs	r3, r1, #31
10000ac4:	d005      	beq.n	10000ad2 <da_pack+0x10>
10000ac6:	43c9      	mvns	r1, r1
10000ac8:	43c0      	mvns	r0, r0
10000aca:	2200      	movs	r2, #0
10000acc:	4264      	negs	r4, r4
10000ace:	4150      	adcs	r0, r2
10000ad0:	4151      	adcs	r1, r2
10000ad2:	4662      	mov	r2, ip
10000ad4:	0d4d      	lsrs	r5, r1, #21
10000ad6:	d128      	bne.n	10000b2a <da_0>
10000ad8:	0d0d      	lsrs	r5, r1, #20
10000ada:	d107      	bne.n	10000aec <da_1>
10000adc:	2800      	cmp	r0, #0
10000ade:	d01f      	beq.n	10000b20 <da_5>

10000ae0 <da_2>:
10000ae0:	1924      	adds	r4, r4, r4
10000ae2:	4140      	adcs	r0, r0
10000ae4:	4149      	adcs	r1, r1
10000ae6:	3a01      	subs	r2, #1
10000ae8:	0d0d      	lsrs	r5, r1, #20
10000aea:	d0f9      	beq.n	10000ae0 <da_2>

10000aec <da_1>:
10000aec:	0064      	lsls	r4, r4, #1
10000aee:	d306      	bcc.n	10000afe <da_3>

10000af0 <da_4>:
10000af0:	3001      	adds	r0, #1
10000af2:	d300      	bcc.n	10000af6 <da_4+0x6>
10000af4:	3101      	adds	r1, #1
10000af6:	2c00      	cmp	r4, #0
10000af8:	d101      	bne.n	10000afe <da_3>
10000afa:	0840      	lsrs	r0, r0, #1
10000afc:	0040      	lsls	r0, r0, #1

10000afe <da_3>:
10000afe:	3a01      	subs	r2, #1
10000b00:	d40b      	bmi.n	10000b1a <da_6>
10000b02:	1c94      	adds	r4, r2, #2
10000b04:	0ae4      	lsrs	r4, r4, #11
10000b06:	d104      	bne.n	10000b12 <da_7>
10000b08:	0512      	lsls	r2, r2, #20
10000b0a:	4411      	add	r1, r2
10000b0c:	07db      	lsls	r3, r3, #31
10000b0e:	4419      	add	r1, r3
10000b10:	bdf0      	pop	{r4, r5, r6, r7, pc}

10000b12 <da_7>:
10000b12:	07d9      	lsls	r1, r3, #31
10000b14:	4b20      	ldr	r3, [pc, #128]	; (10000b98 <da_xmgty+0x4>)
10000b16:	4319      	orrs	r1, r3
10000b18:	e000      	b.n	10000b1c <da_6+0x2>

10000b1a <da_6>:
10000b1a:	07d9      	lsls	r1, r3, #31
10000b1c:	2000      	movs	r0, #0
10000b1e:	bdf0      	pop	{r4, r5, r6, r7, pc}

10000b20 <da_5>:
10000b20:	2900      	cmp	r1, #0
10000b22:	d1dd      	bne.n	10000ae0 <da_2>
10000b24:	2c00      	cmp	r4, #0
10000b26:	d1db      	bne.n	10000ae0 <da_2>
10000b28:	bdf0      	pop	{r4, r5, r6, r7, pc}

10000b2a <da_0>:
10000b2a:	3201      	adds	r2, #1
10000b2c:	07c6      	lsls	r6, r0, #31
10000b2e:	0840      	lsrs	r0, r0, #1
10000b30:	07cd      	lsls	r5, r1, #31
10000b32:	4328      	orrs	r0, r5
10000b34:	0849      	lsrs	r1, r1, #1
10000b36:	2e00      	cmp	r6, #0
10000b38:	d0e1      	beq.n	10000afe <da_3>
10000b3a:	e7d9      	b.n	10000af0 <da_4>

10000b3c <da_xrgty>:
10000b3c:	2e3c      	cmp	r6, #60	; 0x3c
10000b3e:	da29      	bge.n	10000b94 <da_xmgty>
10000b40:	3e20      	subs	r6, #32
10000b42:	3740      	adds	r7, #64	; 0x40
10000b44:	0014      	movs	r4, r2
10000b46:	40bc      	lsls	r4, r7
10000b48:	d000      	beq.n	10000b4c <da_xrgty+0x10>
10000b4a:	2401      	movs	r4, #1
10000b4c:	40f2      	lsrs	r2, r6
10000b4e:	4314      	orrs	r4, r2
10000b50:	001a      	movs	r2, r3
10000b52:	40bb      	lsls	r3, r7
10000b54:	431c      	orrs	r4, r3
10000b56:	17d3      	asrs	r3, r2, #31
10000b58:	e7ac      	b.n	10000ab4 <da_xgty0>

10000b5a <da_ygtx>:
10000b5a:	46ac      	mov	ip, r5
10000b5c:	2f20      	cmp	r7, #32
10000b5e:	da08      	bge.n	10000b72 <da_yrgtx>
10000b60:	3620      	adds	r6, #32
10000b62:	0004      	movs	r4, r0
10000b64:	40b4      	lsls	r4, r6

10000b66 <da_ygtx0>:
10000b66:	000d      	movs	r5, r1
10000b68:	40b5      	lsls	r5, r6
10000b6a:	40f8      	lsrs	r0, r7
10000b6c:	4139      	asrs	r1, r7
10000b6e:	4328      	orrs	r0, r5
10000b70:	e7a5      	b.n	10000abe <da_add>

10000b72 <da_yrgtx>:
10000b72:	2f3c      	cmp	r7, #60	; 0x3c
10000b74:	da0c      	bge.n	10000b90 <da_ymgtx>
10000b76:	3f20      	subs	r7, #32
10000b78:	3640      	adds	r6, #64	; 0x40
10000b7a:	0004      	movs	r4, r0
10000b7c:	40b4      	lsls	r4, r6
10000b7e:	d000      	beq.n	10000b82 <da_yrgtx+0x10>
10000b80:	2401      	movs	r4, #1
10000b82:	40f8      	lsrs	r0, r7
10000b84:	4304      	orrs	r4, r0
10000b86:	0008      	movs	r0, r1
10000b88:	40b1      	lsls	r1, r6
10000b8a:	430c      	orrs	r4, r1
10000b8c:	17c1      	asrs	r1, r0, #31
10000b8e:	e7ea      	b.n	10000b66 <da_ygtx0>

10000b90 <da_ymgtx>:
10000b90:	0010      	movs	r0, r2
10000b92:	0019      	movs	r1, r3

10000b94 <da_xmgty>:
10000b94:	2400      	movs	r4, #0
10000b96:	e794      	b.n	10000ac2 <da_pack>
10000b98:	7ff00000 	.word	0x7ff00000

10000b9c <dmul_shim>:
10000b9c:	b5f0      	push	{r4, r5, r6, r7, lr}
10000b9e:	0d0c      	lsrs	r4, r1, #20
10000ba0:	1e66      	subs	r6, r4, #1
10000ba2:	0536      	lsls	r6, r6, #20
10000ba4:	1b89      	subs	r1, r1, r6
10000ba6:	0ae6      	lsrs	r6, r4, #11
10000ba8:	0564      	lsls	r4, r4, #21
10000baa:	0d64      	lsrs	r4, r4, #21
10000bac:	d002      	beq.n	10000bb4 <l11_1>
10000bae:	1c65      	adds	r5, r4, #1
10000bb0:	0aed      	lsrs	r5, r5, #11
10000bb2:	d004      	beq.n	10000bbe <l11_2>

10000bb4 <l11_1>:
10000bb4:	2000      	movs	r0, #0
10000bb6:	2101      	movs	r1, #1
10000bb8:	0509      	lsls	r1, r1, #20
10000bba:	3c80      	subs	r4, #128	; 0x80
10000bbc:	0324      	lsls	r4, r4, #12

10000bbe <l11_2>:
10000bbe:	46a4      	mov	ip, r4
10000bc0:	0d1c      	lsrs	r4, r3, #20
10000bc2:	1e67      	subs	r7, r4, #1
10000bc4:	053f      	lsls	r7, r7, #20
10000bc6:	1bdb      	subs	r3, r3, r7
10000bc8:	0ae7      	lsrs	r7, r4, #11
10000bca:	0564      	lsls	r4, r4, #21
10000bcc:	0d64      	lsrs	r4, r4, #21
10000bce:	d002      	beq.n	10000bd6 <l12_1>
10000bd0:	1c65      	adds	r5, r4, #1
10000bd2:	0aed      	lsrs	r5, r5, #11
10000bd4:	d004      	beq.n	10000be0 <l12_2>

10000bd6 <l12_1>:
10000bd6:	2200      	movs	r2, #0
10000bd8:	2301      	movs	r3, #1
10000bda:	051b      	lsls	r3, r3, #20
10000bdc:	3c80      	subs	r4, #128	; 0x80
10000bde:	0324      	lsls	r4, r4, #12

10000be0 <l12_2>:
10000be0:	4077      	eors	r7, r6
10000be2:	4464      	add	r4, ip
10000be4:	b497      	push	{r0, r1, r2, r4, r7}
10000be6:	b284      	uxth	r4, r0
10000be8:	b296      	uxth	r6, r2
10000bea:	4374      	muls	r4, r6
10000bec:	0c07      	lsrs	r7, r0, #16
10000bee:	437e      	muls	r6, r7
10000bf0:	0c15      	lsrs	r5, r2, #16
10000bf2:	436f      	muls	r7, r5
10000bf4:	b280      	uxth	r0, r0
10000bf6:	4368      	muls	r0, r5
10000bf8:	1836      	adds	r6, r6, r0
10000bfa:	d302      	bcc.n	10000c02 <l13_1>
10000bfc:	2001      	movs	r0, #1
10000bfe:	0400      	lsls	r0, r0, #16
10000c00:	183f      	adds	r7, r7, r0

10000c02 <l13_1>:
10000c02:	0430      	lsls	r0, r6, #16
10000c04:	0c35      	lsrs	r5, r6, #16
10000c06:	1900      	adds	r0, r0, r4
10000c08:	417d      	adcs	r5, r7
10000c0a:	4684      	mov	ip, r0
10000c0c:	b288      	uxth	r0, r1
10000c0e:	b29a      	uxth	r2, r3
10000c10:	4350      	muls	r0, r2
10000c12:	0c0c      	lsrs	r4, r1, #16
10000c14:	4362      	muls	r2, r4
10000c16:	0c1f      	lsrs	r7, r3, #16
10000c18:	437c      	muls	r4, r7
10000c1a:	b28e      	uxth	r6, r1
10000c1c:	437e      	muls	r6, r7
10000c1e:	1992      	adds	r2, r2, r6
10000c20:	d302      	bcc.n	10000c28 <l14_1>
10000c22:	2601      	movs	r6, #1
10000c24:	0436      	lsls	r6, r6, #16
10000c26:	19a4      	adds	r4, r4, r6

10000c28 <l14_1>:
10000c28:	0416      	lsls	r6, r2, #16
10000c2a:	0c17      	lsrs	r7, r2, #16
10000c2c:	1836      	adds	r6, r6, r0
10000c2e:	4167      	adcs	r7, r4
10000c30:	bc01      	pop	{r0}
10000c32:	b281      	uxth	r1, r0
10000c34:	b29a      	uxth	r2, r3
10000c36:	4351      	muls	r1, r2
10000c38:	0c04      	lsrs	r4, r0, #16
10000c3a:	4362      	muls	r2, r4
10000c3c:	0c1b      	lsrs	r3, r3, #16
10000c3e:	435c      	muls	r4, r3
10000c40:	b280      	uxth	r0, r0
10000c42:	4358      	muls	r0, r3
10000c44:	1812      	adds	r2, r2, r0
10000c46:	d302      	bcc.n	10000c4e <l15_1>
10000c48:	2001      	movs	r0, #1
10000c4a:	0400      	lsls	r0, r0, #16
10000c4c:	1824      	adds	r4, r4, r0

10000c4e <l15_1>:
10000c4e:	0410      	lsls	r0, r2, #16
10000c50:	0c13      	lsrs	r3, r2, #16
10000c52:	1840      	adds	r0, r0, r1
10000c54:	4163      	adcs	r3, r4
10000c56:	182d      	adds	r5, r5, r0
10000c58:	415e      	adcs	r6, r3
10000c5a:	2000      	movs	r0, #0
10000c5c:	4147      	adcs	r7, r0
10000c5e:	bc06      	pop	{r1, r2}
10000c60:	b288      	uxth	r0, r1
10000c62:	b293      	uxth	r3, r2
10000c64:	4358      	muls	r0, r3
10000c66:	0c0c      	lsrs	r4, r1, #16
10000c68:	4363      	muls	r3, r4
10000c6a:	0c12      	lsrs	r2, r2, #16
10000c6c:	4354      	muls	r4, r2
10000c6e:	b289      	uxth	r1, r1
10000c70:	4351      	muls	r1, r2
10000c72:	185b      	adds	r3, r3, r1
10000c74:	d302      	bcc.n	10000c7c <l16_1>
10000c76:	2101      	movs	r1, #1
10000c78:	0409      	lsls	r1, r1, #16
10000c7a:	1864      	adds	r4, r4, r1

10000c7c <l16_1>:
10000c7c:	0419      	lsls	r1, r3, #16
10000c7e:	0c1a      	lsrs	r2, r3, #16
10000c80:	1809      	adds	r1, r1, r0
10000c82:	4162      	adcs	r2, r4
10000c84:	186d      	adds	r5, r5, r1
10000c86:	4156      	adcs	r6, r2
10000c88:	2000      	movs	r0, #0
10000c8a:	4147      	adcs	r7, r0
10000c8c:	bc18      	pop	{r3, r4}
10000c8e:	02f9      	lsls	r1, r7, #11
10000c90:	0d72      	lsrs	r2, r6, #21
10000c92:	4311      	orrs	r1, r2
10000c94:	02f0      	lsls	r0, r6, #11
10000c96:	0d6a      	lsrs	r2, r5, #21
10000c98:	4310      	orrs	r0, r2
10000c9a:	02ed      	lsls	r5, r5, #11
10000c9c:	0d0a      	lsrs	r2, r1, #20
10000c9e:	d103      	bne.n	10000ca8 <l16_1+0x2c>
10000ca0:	196d      	adds	r5, r5, r5
10000ca2:	4140      	adcs	r0, r0
10000ca4:	4149      	adcs	r1, r1
10000ca6:	3b01      	subs	r3, #1
10000ca8:	4e12      	ldr	r6, [pc, #72]	; (10000cf4 <dm_1+0xa>)
10000caa:	1b9b      	subs	r3, r3, r6
10000cac:	0076      	lsls	r6, r6, #1
10000cae:	42b3      	cmp	r3, r6
10000cb0:	d20e      	bcs.n	10000cd0 <dm_0>
10000cb2:	006d      	lsls	r5, r5, #1
10000cb4:	d307      	bcc.n	10000cc6 <l16_1+0x4a>
10000cb6:	3001      	adds	r0, #1
10000cb8:	2600      	movs	r6, #0
10000cba:	4171      	adcs	r1, r6
10000cbc:	4666      	mov	r6, ip
10000cbe:	4335      	orrs	r5, r6
10000cc0:	d101      	bne.n	10000cc6 <l16_1+0x4a>
10000cc2:	0840      	lsrs	r0, r0, #1
10000cc4:	0040      	lsls	r0, r0, #1
10000cc6:	051b      	lsls	r3, r3, #20
10000cc8:	18c9      	adds	r1, r1, r3

10000cca <dm_2>:
10000cca:	07e4      	lsls	r4, r4, #31
10000ccc:	4421      	add	r1, r4
10000cce:	bdf0      	pop	{r4, r5, r6, r7, pc}

10000cd0 <dm_0>:
10000cd0:	da0b      	bge.n	10000cea <dm_1>
10000cd2:	3301      	adds	r3, #1
10000cd4:	d106      	bne.n	10000ce4 <dm_0+0x14>
10000cd6:	3001      	adds	r0, #1
10000cd8:	d104      	bne.n	10000ce4 <dm_0+0x14>
10000cda:	3101      	adds	r1, #1
10000cdc:	0d4f      	lsrs	r7, r1, #21
10000cde:	d001      	beq.n	10000ce4 <dm_0+0x14>
10000ce0:	0849      	lsrs	r1, r1, #1
10000ce2:	e7f2      	b.n	10000cca <dm_2>
10000ce4:	07e1      	lsls	r1, r4, #31
10000ce6:	2000      	movs	r0, #0
10000ce8:	bdf0      	pop	{r4, r5, r6, r7, pc}

10000cea <dm_1>:
10000cea:	3601      	adds	r6, #1
10000cec:	0531      	lsls	r1, r6, #20
10000cee:	2000      	movs	r0, #0
10000cf0:	e7eb      	b.n	10000cca <dm_2>
10000cf2:	0000      	.short	0x0000
10000cf4:	000003ff 	.word	0x000003ff

10000cf8 <ddiv_shim>:
10000cf8:	b5f0      	push	{r4, r5, r6, r7, lr}

10000cfa <ddiv0>:
10000cfa:	0d1c      	lsrs	r4, r3, #20
10000cfc:	1e67      	subs	r7, r4, #1
10000cfe:	053f      	lsls	r7, r7, #20
10000d00:	1bdb      	subs	r3, r3, r7
10000d02:	0ae7      	lsrs	r7, r4, #11
10000d04:	0564      	lsls	r4, r4, #21
10000d06:	0d64      	lsrs	r4, r4, #21
10000d08:	d002      	beq.n	10000d10 <l19_1>
10000d0a:	1c66      	adds	r6, r4, #1
10000d0c:	0af6      	lsrs	r6, r6, #11
10000d0e:	d004      	beq.n	10000d1a <l19_2>

10000d10 <l19_1>:
10000d10:	2200      	movs	r2, #0
10000d12:	2301      	movs	r3, #1
10000d14:	051b      	lsls	r3, r3, #20
10000d16:	3c80      	subs	r4, #128	; 0x80
10000d18:	0324      	lsls	r4, r4, #12

10000d1a <l19_2>:
10000d1a:	25d0      	movs	r5, #208	; 0xd0
10000d1c:	062d      	lsls	r5, r5, #24
10000d1e:	2600      	movs	r6, #0
10000d20:	43f6      	mvns	r6, r6
10000d22:	662e      	str	r6, [r5, #96]	; 0x60
10000d24:	091e      	lsrs	r6, r3, #4
10000d26:	666e      	str	r6, [r5, #100]	; 0x64
10000d28:	0fce      	lsrs	r6, r1, #31
10000d2a:	19f6      	adds	r6, r6, r7
10000d2c:	46b4      	mov	ip, r6
10000d2e:	0049      	lsls	r1, r1, #1
10000d30:	0d4f      	lsrs	r7, r1, #21
10000d32:	d002      	beq.n	10000d3a <l19_2+0x20>
10000d34:	1c7e      	adds	r6, r7, #1
10000d36:	0af6      	lsrs	r6, r6, #11
10000d38:	d003      	beq.n	10000d42 <l19_2+0x28>
10000d3a:	2000      	movs	r0, #0
10000d3c:	2100      	movs	r1, #0
10000d3e:	3f40      	subs	r7, #64	; 0x40
10000d40:	033f      	lsls	r7, r7, #12
10000d42:	1b3e      	subs	r6, r7, r4
10000d44:	00b6      	lsls	r6, r6, #2
10000d46:	44b4      	add	ip, r6
10000d48:	3f01      	subs	r7, #1
10000d4a:	057f      	lsls	r7, r7, #21
10000d4c:	1bc9      	subs	r1, r1, r7
10000d4e:	0849      	lsrs	r1, r1, #1
10000d50:	6f2e      	ldr	r6, [r5, #112]	; 0x70
10000d52:	3601      	adds	r6, #1
10000d54:	0876      	lsrs	r6, r6, #1
10000d56:	029c      	lsls	r4, r3, #10
10000d58:	0d95      	lsrs	r5, r2, #22
10000d5a:	4325      	orrs	r5, r4
10000d5c:	4375      	muls	r5, r6
10000d5e:	13ed      	asrs	r5, r5, #15
10000d60:	4375      	muls	r5, r6
10000d62:	13ad      	asrs	r5, r5, #14
10000d64:	3501      	adds	r5, #1
10000d66:	106d      	asrs	r5, r5, #1
10000d68:	03f6      	lsls	r6, r6, #15
10000d6a:	1b76      	subs	r6, r6, r5
10000d6c:	b40c      	push	{r2, r3}
10000d6e:	02cc      	lsls	r4, r1, #11
10000d70:	0d45      	lsrs	r5, r0, #21
10000d72:	432c      	orrs	r4, r5
10000d74:	b2a2      	uxth	r2, r4
10000d76:	b2b3      	uxth	r3, r6
10000d78:	435a      	muls	r2, r3
10000d7a:	0c27      	lsrs	r7, r4, #16
10000d7c:	437b      	muls	r3, r7
10000d7e:	0c35      	lsrs	r5, r6, #16
10000d80:	436f      	muls	r7, r5
10000d82:	b2a4      	uxth	r4, r4
10000d84:	436c      	muls	r4, r5
10000d86:	191b      	adds	r3, r3, r4
10000d88:	d302      	bcc.n	10000d90 <l20_1>
10000d8a:	2401      	movs	r4, #1
10000d8c:	0424      	lsls	r4, r4, #16
10000d8e:	193f      	adds	r7, r7, r4

10000d90 <l20_1>:
10000d90:	041c      	lsls	r4, r3, #16
10000d92:	0c1d      	lsrs	r5, r3, #16
10000d94:	18a4      	adds	r4, r4, r2
10000d96:	417d      	adcs	r5, r7
10000d98:	1924      	adds	r4, r4, r4
10000d9a:	416d      	adcs	r5, r5
10000d9c:	9a00      	ldr	r2, [sp, #0]
10000d9e:	b291      	uxth	r1, r2
10000da0:	b2ac      	uxth	r4, r5
10000da2:	4361      	muls	r1, r4
10000da4:	0c17      	lsrs	r7, r2, #16
10000da6:	437c      	muls	r4, r7
10000da8:	0c2b      	lsrs	r3, r5, #16
10000daa:	435f      	muls	r7, r3
10000dac:	b292      	uxth	r2, r2
10000dae:	435a      	muls	r2, r3
10000db0:	18a4      	adds	r4, r4, r2
10000db2:	d302      	bcc.n	10000dba <l21_1>
10000db4:	2201      	movs	r2, #1
10000db6:	0412      	lsls	r2, r2, #16
10000db8:	18bf      	adds	r7, r7, r2

10000dba <l21_1>:
10000dba:	0422      	lsls	r2, r4, #16
10000dbc:	0c23      	lsrs	r3, r4, #16
10000dbe:	1852      	adds	r2, r2, r1
10000dc0:	417b      	adcs	r3, r7
10000dc2:	9c01      	ldr	r4, [sp, #4]
10000dc4:	436c      	muls	r4, r5
10000dc6:	191b      	adds	r3, r3, r4
10000dc8:	0e52      	lsrs	r2, r2, #25
10000dca:	01d9      	lsls	r1, r3, #7
10000dcc:	430a      	orrs	r2, r1
10000dce:	0144      	lsls	r4, r0, #5
10000dd0:	1aa0      	subs	r0, r4, r2
10000dd2:	b281      	uxth	r1, r0
10000dd4:	b2b2      	uxth	r2, r6
10000dd6:	4351      	muls	r1, r2
10000dd8:	1403      	asrs	r3, r0, #16
10000dda:	435a      	muls	r2, r3
10000ddc:	0c36      	lsrs	r6, r6, #16
10000dde:	4373      	muls	r3, r6
10000de0:	b287      	uxth	r7, r0
10000de2:	4377      	muls	r7, r6
10000de4:	17d6      	asrs	r6, r2, #31
10000de6:	19d2      	adds	r2, r2, r7
10000de8:	2700      	movs	r7, #0
10000dea:	417e      	adcs	r6, r7
10000dec:	0436      	lsls	r6, r6, #16
10000dee:	199b      	adds	r3, r3, r6
10000df0:	0417      	lsls	r7, r2, #16
10000df2:	0c16      	lsrs	r6, r2, #16
10000df4:	187f      	adds	r7, r7, r1
10000df6:	415e      	adcs	r6, r3
10000df8:	1673      	asrs	r3, r6, #25
10000dfa:	18ed      	adds	r5, r5, r3
10000dfc:	01f3      	lsls	r3, r6, #7
10000dfe:	2600      	movs	r6, #0
10000e00:	3380      	adds	r3, #128	; 0x80
10000e02:	4175      	adcs	r5, r6
10000e04:	0fa9      	lsrs	r1, r5, #30
10000e06:	d106      	bne.n	10000e16 <dd_0>
10000e08:	0064      	lsls	r4, r4, #1
10000e0a:	0a69      	lsrs	r1, r5, #9
10000e0c:	05e8      	lsls	r0, r5, #23
10000e0e:	0a5b      	lsrs	r3, r3, #9
10000e10:	4318      	orrs	r0, r3
10000e12:	d209      	bcs.n	10000e28 <dd_1>
10000e14:	e02f      	b.n	10000e76 <dd_2>

10000e16 <dd_0>:
10000e16:	2204      	movs	r2, #4
10000e18:	4494      	add	ip, r2
10000e1a:	3380      	adds	r3, #128	; 0x80
10000e1c:	4175      	adcs	r5, r6
10000e1e:	0aa9      	lsrs	r1, r5, #10
10000e20:	05a8      	lsls	r0, r5, #22
10000e22:	0a9b      	lsrs	r3, r3, #10
10000e24:	4318      	orrs	r0, r3
10000e26:	d326      	bcc.n	10000e76 <dd_2>

10000e28 <dd_1>:
10000e28:	4140      	adcs	r0, r0
10000e2a:	4149      	adcs	r1, r1
10000e2c:	0424      	lsls	r4, r4, #16
10000e2e:	9a00      	ldr	r2, [sp, #0]
10000e30:	9b01      	ldr	r3, [sp, #4]
10000e32:	000d      	movs	r5, r1
10000e34:	4355      	muls	r5, r2
10000e36:	1b64      	subs	r4, r4, r5
10000e38:	4343      	muls	r3, r0
10000e3a:	1ae4      	subs	r4, r4, r3
10000e3c:	b295      	uxth	r5, r2
10000e3e:	b286      	uxth	r6, r0
10000e40:	4375      	muls	r5, r6
10000e42:	0c17      	lsrs	r7, r2, #16
10000e44:	437e      	muls	r6, r7
10000e46:	0c03      	lsrs	r3, r0, #16
10000e48:	435f      	muls	r7, r3
10000e4a:	b292      	uxth	r2, r2
10000e4c:	435a      	muls	r2, r3
10000e4e:	18b6      	adds	r6, r6, r2
10000e50:	d302      	bcc.n	10000e58 <l23_1>
10000e52:	2201      	movs	r2, #1
10000e54:	0412      	lsls	r2, r2, #16
10000e56:	18bf      	adds	r7, r7, r2

10000e58 <l23_1>:
10000e58:	0432      	lsls	r2, r6, #16
10000e5a:	0c33      	lsrs	r3, r6, #16
10000e5c:	1952      	adds	r2, r2, r5
10000e5e:	417b      	adcs	r3, r7
10000e60:	4252      	negs	r2, r2
10000e62:	419c      	sbcs	r4, r3
10000e64:	2c00      	cmp	r4, #0
10000e66:	d402      	bmi.n	10000e6e <l23_1+0x16>
10000e68:	2200      	movs	r2, #0
10000e6a:	3001      	adds	r0, #1
10000e6c:	4151      	adcs	r1, r2
10000e6e:	0840      	lsrs	r0, r0, #1
10000e70:	07ca      	lsls	r2, r1, #31
10000e72:	4310      	orrs	r0, r2
10000e74:	0849      	lsrs	r1, r1, #1

10000e76 <dd_2>:
10000e76:	b002      	add	sp, #8
10000e78:	4662      	mov	r2, ip
10000e7a:	07d7      	lsls	r7, r2, #31
10000e7c:	1092      	asrs	r2, r2, #2
10000e7e:	4b08      	ldr	r3, [pc, #32]	; (10000ea0 <dd_4+0x6>)
10000e80:	18d2      	adds	r2, r2, r3
10000e82:	4b08      	ldr	r3, [pc, #32]	; (10000ea4 <dd_4+0xa>)
10000e84:	429a      	cmp	r2, r3
10000e86:	d203      	bcs.n	10000e90 <dd_3>
10000e88:	0512      	lsls	r2, r2, #20
10000e8a:	1889      	adds	r1, r1, r2

10000e8c <dd_5>:
10000e8c:	19c9      	adds	r1, r1, r7
10000e8e:	bdf0      	pop	{r4, r5, r6, r7, pc}

10000e90 <dd_3>:
10000e90:	2000      	movs	r0, #0
10000e92:	2a00      	cmp	r2, #0
10000e94:	dc01      	bgt.n	10000e9a <dd_4>
10000e96:	0039      	movs	r1, r7
10000e98:	bdf0      	pop	{r4, r5, r6, r7, pc}

10000e9a <dd_4>:
10000e9a:	3301      	adds	r3, #1
10000e9c:	0519      	lsls	r1, r3, #20
10000e9e:	e7f5      	b.n	10000e8c <dd_5>
10000ea0:	000003fd 	.word	0x000003fd
10000ea4:	000007fe 	.word	0x000007fe

10000ea8 <dcordic_rot_step>:
10000ea8:	4662      	mov	r2, ip
10000eaa:	ca18      	ldmia	r2!, {r3, r4}
10000eac:	4694      	mov	ip, r2
10000eae:	2900      	cmp	r1, #0
10000eb0:	da1a      	bge.n	10000ee8 <dcordic_rot_step+0x40>
10000eb2:	18c0      	adds	r0, r0, r3
10000eb4:	4161      	adcs	r1, r4
10000eb6:	465b      	mov	r3, fp
10000eb8:	413b      	asrs	r3, r7
10000eba:	465c      	mov	r4, fp
10000ebc:	40b4      	lsls	r4, r6
10000ebe:	4652      	mov	r2, sl
10000ec0:	40fa      	lsrs	r2, r7
10000ec2:	4322      	orrs	r2, r4
10000ec4:	4644      	mov	r4, r8
10000ec6:	464d      	mov	r5, r9
10000ec8:	4162      	adcs	r2, r4
10000eca:	416b      	adcs	r3, r5
10000ecc:	4690      	mov	r8, r2
10000ece:	4699      	mov	r9, r3
10000ed0:	462b      	mov	r3, r5
10000ed2:	40b3      	lsls	r3, r6
10000ed4:	413d      	asrs	r5, r7
10000ed6:	40fc      	lsrs	r4, r7
10000ed8:	431c      	orrs	r4, r3
10000eda:	4652      	mov	r2, sl
10000edc:	465b      	mov	r3, fp
10000ede:	41a2      	sbcs	r2, r4
10000ee0:	41ab      	sbcs	r3, r5
10000ee2:	4692      	mov	sl, r2
10000ee4:	469b      	mov	fp, r3
10000ee6:	4770      	bx	lr
10000ee8:	1ac0      	subs	r0, r0, r3
10000eea:	41a1      	sbcs	r1, r4
10000eec:	464b      	mov	r3, r9
10000eee:	413b      	asrs	r3, r7
10000ef0:	464c      	mov	r4, r9
10000ef2:	40b4      	lsls	r4, r6
10000ef4:	4642      	mov	r2, r8
10000ef6:	40fa      	lsrs	r2, r7
10000ef8:	4322      	orrs	r2, r4
10000efa:	4654      	mov	r4, sl
10000efc:	465d      	mov	r5, fp
10000efe:	4162      	adcs	r2, r4
10000f00:	416b      	adcs	r3, r5
10000f02:	4692      	mov	sl, r2
10000f04:	469b      	mov	fp, r3
10000f06:	462b      	mov	r3, r5
10000f08:	40b3      	lsls	r3, r6
10000f0a:	413d      	asrs	r5, r7
10000f0c:	40fc      	lsrs	r4, r7
10000f0e:	431c      	orrs	r4, r3
10000f10:	4642      	mov	r2, r8
10000f12:	464b      	mov	r3, r9
10000f14:	41a2      	sbcs	r2, r4
10000f16:	41ab      	sbcs	r3, r5
10000f18:	4690      	mov	r8, r2
10000f1a:	4699      	mov	r9, r3
10000f1c:	4770      	bx	lr

10000f1e <ret_dzero>:
10000f1e:	2000      	movs	r0, #0
10000f20:	2100      	movs	r1, #0
10000f22:	4770      	bx	lr

10000f24 <double2uint_shim>:
10000f24:	2200      	movs	r2, #0

10000f26 <double2ufix_shim>:
10000f26:	b500      	push	{lr}
10000f28:	3220      	adds	r2, #32
10000f2a:	f000 f804 	bl	10000f36 <double2ufix64_shim>
10000f2e:	0008      	movs	r0, r1
10000f30:	bd00      	pop	{pc}
	...

10000f34 <double2uint64_shim>:
10000f34:	2200      	movs	r2, #0

10000f36 <double2ufix64_shim>:
10000f36:	150b      	asrs	r3, r1, #20
10000f38:	d4f1      	bmi.n	10000f1e <ret_dzero>

10000f3a <d2fix>:
10000f3a:	b510      	push	{r4, lr}
10000f3c:	4694      	mov	ip, r2
10000f3e:	f000 f8a5 	bl	1000108c <dunpacks>
10000f42:	1414      	asrs	r4, r2, #16
10000f44:	3401      	adds	r4, #1
10000f46:	da00      	bge.n	10000f4a <d2fix+0x10>
10000f48:	2100      	movs	r1, #0
10000f4a:	17cb      	asrs	r3, r1, #31
10000f4c:	4c13      	ldr	r4, [pc, #76]	; (10000f9c <d2fix_a+0x4c>)
10000f4e:	4720      	bx	r4

10000f50 <d2fix_a>:
10000f50:	4462      	add	r2, ip
10000f52:	3a34      	subs	r2, #52	; 0x34
10000f54:	d40c      	bmi.n	10000f70 <d2fix_a+0x20>
10000f56:	2a0c      	cmp	r2, #12
10000f58:	da07      	bge.n	10000f6a <d2fix_a+0x1a>
10000f5a:	0004      	movs	r4, r0
10000f5c:	4091      	lsls	r1, r2
10000f5e:	4090      	lsls	r0, r2
10000f60:	4252      	negs	r2, r2
10000f62:	3220      	adds	r2, #32
10000f64:	40d4      	lsrs	r4, r2
10000f66:	4321      	orrs	r1, r4
10000f68:	bd10      	pop	{r4, pc}
10000f6a:	43d8      	mvns	r0, r3
10000f6c:	43d9      	mvns	r1, r3
10000f6e:	bd10      	pop	{r4, pc}
10000f70:	3220      	adds	r2, #32
10000f72:	d407      	bmi.n	10000f84 <d2fix_a+0x34>
10000f74:	460c      	mov	r4, r1
10000f76:	4094      	lsls	r4, r2
10000f78:	4252      	negs	r2, r2
10000f7a:	3220      	adds	r2, #32
10000f7c:	4111      	asrs	r1, r2
10000f7e:	40d0      	lsrs	r0, r2
10000f80:	4320      	orrs	r0, r4
10000f82:	bd10      	pop	{r4, pc}
10000f84:	0008      	movs	r0, r1
10000f86:	17c9      	asrs	r1, r1, #31
10000f88:	3220      	adds	r2, #32
10000f8a:	d403      	bmi.n	10000f94 <d2fix_a+0x44>
10000f8c:	4252      	negs	r2, r2
10000f8e:	3220      	adds	r2, #32
10000f90:	4110      	asrs	r0, r2
10000f92:	bd10      	pop	{r4, pc}
10000f94:	0018      	movs	r0, r3
10000f96:	0019      	movs	r1, r3
10000f98:	bd10      	pop	{r4, pc}
10000f9a:	0000      	.short	0x0000
10000f9c:	10000f51 	.word	0x10000f51

10000fa0 <double2float_shim>:
10000fa0:	004a      	lsls	r2, r1, #1
10000fa2:	0d52      	lsrs	r2, r2, #21
10000fa4:	4b14      	ldr	r3, [pc, #80]	; (10000ff8 <double2float_shim+0x58>)
10000fa6:	1ad2      	subs	r2, r2, r3
10000fa8:	dd13      	ble.n	10000fd2 <double2float_shim+0x32>
10000faa:	2aff      	cmp	r2, #255	; 0xff
10000fac:	da1e      	bge.n	10000fec <double2float_shim+0x4c>
10000fae:	05d2      	lsls	r2, r2, #23
10000fb0:	0fcb      	lsrs	r3, r1, #31
10000fb2:	07db      	lsls	r3, r3, #31
10000fb4:	431a      	orrs	r2, r3
10000fb6:	00c3      	lsls	r3, r0, #3
10000fb8:	0f40      	lsrs	r0, r0, #29
10000fba:	0309      	lsls	r1, r1, #12
10000fbc:	0a49      	lsrs	r1, r1, #9
10000fbe:	4308      	orrs	r0, r1
10000fc0:	4310      	orrs	r0, r2
10000fc2:	005b      	lsls	r3, r3, #1
10000fc4:	d301      	bcc.n	10000fca <double2float_shim+0x2a>
10000fc6:	d001      	beq.n	10000fcc <double2float_shim+0x2c>
10000fc8:	3001      	adds	r0, #1
10000fca:	4770      	bx	lr
10000fcc:	0843      	lsrs	r3, r0, #1
10000fce:	d2fb      	bcs.n	10000fc8 <double2float_shim+0x28>
10000fd0:	4770      	bx	lr
10000fd2:	d002      	beq.n	10000fda <double2float_shim+0x3a>
10000fd4:	0fc8      	lsrs	r0, r1, #31
10000fd6:	07c0      	lsls	r0, r0, #31
10000fd8:	4770      	bx	lr
10000fda:	030a      	lsls	r2, r1, #12
10000fdc:	1312      	asrs	r2, r2, #12
10000fde:	3201      	adds	r2, #1
10000fe0:	d1f8      	bne.n	10000fd4 <double2float_shim+0x34>
10000fe2:	0f42      	lsrs	r2, r0, #29
10000fe4:	2a07      	cmp	r2, #7
10000fe6:	d1f5      	bne.n	10000fd4 <double2float_shim+0x34>
10000fe8:	2201      	movs	r2, #1
10000fea:	e000      	b.n	10000fee <double2float_shim+0x4e>
10000fec:	22ff      	movs	r2, #255	; 0xff
10000fee:	0fc8      	lsrs	r0, r1, #31
10000ff0:	0200      	lsls	r0, r0, #8
10000ff2:	1880      	adds	r0, r0, r2
10000ff4:	05c0      	lsls	r0, r0, #23
10000ff6:	4770      	bx	lr
10000ff8:	00000380 	.word	0x00000380

10000ffc <uint2double_shim>:
10000ffc:	2100      	movs	r1, #0

10000ffe <ufix2double_shim>:
10000ffe:	000a      	movs	r2, r1
10001000:	2100      	movs	r1, #0
10001002:	e004      	b.n	1000100e <ufix642double_shim>

10001004 <int2double_shim>:
10001004:	2100      	movs	r1, #0

10001006 <fix2double_shim>:
10001006:	000a      	movs	r2, r1
10001008:	17c1      	asrs	r1, r0, #31
1000100a:	e004      	b.n	10001016 <fix642double_shim>

1000100c <uint642double_shim>:
1000100c:	2200      	movs	r2, #0

1000100e <ufix642double_shim>:
1000100e:	2300      	movs	r3, #0
10001010:	e006      	b.n	10001020 <uf2d>
10001012:	46c0      	nop			; (mov r8, r8)

10001014 <int642double_shim>:
10001014:	2200      	movs	r2, #0

10001016 <fix642double_shim>:
10001016:	17cb      	asrs	r3, r1, #31
10001018:	4058      	eors	r0, r3
1000101a:	4059      	eors	r1, r3
1000101c:	1ac0      	subs	r0, r0, r3
1000101e:	4199      	sbcs	r1, r3

10001020 <uf2d>:
10001020:	b530      	push	{r4, r5, lr}
10001022:	4c18      	ldr	r4, [pc, #96]	; (10001084 <uf2d+0x64>)
10001024:	1aa2      	subs	r2, r4, r2
10001026:	2900      	cmp	r1, #0
10001028:	d103      	bne.n	10001032 <uf2d+0x12>
1000102a:	0001      	movs	r1, r0
1000102c:	d010      	beq.n	10001050 <uf2d+0x30>
1000102e:	2000      	movs	r0, #0
10001030:	3a20      	subs	r2, #32
10001032:	154c      	asrs	r4, r1, #21
10001034:	d112      	bne.n	1000105c <uf2d+0x3c>
10001036:	d204      	bcs.n	10001042 <uf2d+0x22>
10001038:	3a01      	subs	r2, #1
1000103a:	1800      	adds	r0, r0, r0
1000103c:	4149      	adcs	r1, r1
1000103e:	0d4c      	lsrs	r4, r1, #21
10001040:	d3fa      	bcc.n	10001038 <uf2d+0x18>
10001042:	4c11      	ldr	r4, [pc, #68]	; (10001088 <uf2d+0x68>)
10001044:	42a2      	cmp	r2, r4
10001046:	d204      	bcs.n	10001052 <uf2d+0x32>
10001048:	0512      	lsls	r2, r2, #20
1000104a:	1889      	adds	r1, r1, r2
1000104c:	07db      	lsls	r3, r3, #31
1000104e:	18c9      	adds	r1, r1, r3
10001050:	bd30      	pop	{r4, r5, pc}
10001052:	43d2      	mvns	r2, r2
10001054:	0d52      	lsrs	r2, r2, #21
10001056:	2000      	movs	r0, #0
10001058:	2100      	movs	r1, #0
1000105a:	e7f5      	b.n	10001048 <uf2d+0x28>
1000105c:	d403      	bmi.n	10001066 <uf2d+0x46>
1000105e:	3a01      	subs	r2, #1
10001060:	1800      	adds	r0, r0, r0
10001062:	4149      	adcs	r1, r1
10001064:	d5fb      	bpl.n	1000105e <uf2d+0x3e>
10001066:	320b      	adds	r2, #11
10001068:	0544      	lsls	r4, r0, #21
1000106a:	0ac0      	lsrs	r0, r0, #11
1000106c:	054d      	lsls	r5, r1, #21
1000106e:	4328      	orrs	r0, r5
10001070:	0ac9      	lsrs	r1, r1, #11
10001072:	0064      	lsls	r4, r4, #1
10001074:	d003      	beq.n	1000107e <uf2d+0x5e>
10001076:	2400      	movs	r4, #0
10001078:	4160      	adcs	r0, r4
1000107a:	4161      	adcs	r1, r4
1000107c:	e7e1      	b.n	10001042 <uf2d+0x22>
1000107e:	d3e0      	bcc.n	10001042 <uf2d+0x22>
10001080:	0844      	lsrs	r4, r0, #1
10001082:	e7f8      	b.n	10001076 <uf2d+0x56>
10001084:	00000432 	.word	0x00000432
10001088:	000007fe 	.word	0x000007fe

1000108c <dunpacks>:
1000108c:	0d0a      	lsrs	r2, r1, #20
1000108e:	0fcc      	lsrs	r4, r1, #31
10001090:	1e53      	subs	r3, r2, #1
10001092:	051b      	lsls	r3, r3, #20
10001094:	1ac9      	subs	r1, r1, r3
10001096:	0552      	lsls	r2, r2, #21
10001098:	d303      	bcc.n	100010a2 <l60_1>
1000109a:	43c9      	mvns	r1, r1
1000109c:	4240      	negs	r0, r0
1000109e:	d300      	bcc.n	100010a2 <l60_1>
100010a0:	3101      	adds	r1, #1

100010a2 <l60_1>:
100010a2:	0d52      	lsrs	r2, r2, #21
100010a4:	d003      	beq.n	100010ae <l60_2>
100010a6:	1c53      	adds	r3, r2, #1
100010a8:	0adb      	lsrs	r3, r3, #11
100010aa:	d007      	beq.n	100010bc <l60_3>
100010ac:	1b12      	subs	r2, r2, r4

100010ae <l60_2>:
100010ae:	2000      	movs	r0, #0
100010b0:	0064      	lsls	r4, r4, #1
100010b2:	1c61      	adds	r1, r4, #1
100010b4:	0789      	lsls	r1, r1, #30
100010b6:	1289      	asrs	r1, r1, #10
100010b8:	3a80      	subs	r2, #128	; 0x80
100010ba:	0312      	lsls	r2, r2, #12

100010bc <l60_3>:
100010bc:	4b01      	ldr	r3, [pc, #4]	; (100010c4 <l60_3+0x8>)
100010be:	1ad2      	subs	r2, r2, r3
100010c0:	4770      	bx	lr
100010c2:	0000      	.short	0x0000
100010c4:	000003ff 	.word	0x000003ff

100010c8 <__wrap___aeabi_frsub>:
100010c8:	4048      	eors	r0, r1
100010ca:	4041      	eors	r1, r0
100010cc:	4048      	eors	r0, r1

100010ce <__wrap___aeabi_fsub>:
100010ce:	4b06      	ldr	r3, [pc, #24]	; (100010e8 <__wrap___aeabi_fmul+0x8>)
100010d0:	685b      	ldr	r3, [r3, #4]
100010d2:	4718      	bx	r3

100010d4 <__wrap___aeabi_fadd>:
100010d4:	4b04      	ldr	r3, [pc, #16]	; (100010e8 <__wrap___aeabi_fmul+0x8>)
100010d6:	681b      	ldr	r3, [r3, #0]
100010d8:	4718      	bx	r3

100010da <__wrap___aeabi_fdiv>:
100010da:	4b03      	ldr	r3, [pc, #12]	; (100010e8 <__wrap___aeabi_fmul+0x8>)
100010dc:	68db      	ldr	r3, [r3, #12]
100010de:	4718      	bx	r3

100010e0 <__wrap___aeabi_fmul>:
100010e0:	4b01      	ldr	r3, [pc, #4]	; (100010e8 <__wrap___aeabi_fmul+0x8>)
100010e2:	689b      	ldr	r3, [r3, #8]
100010e4:	4718      	bx	r3
100010e6:	0000      	.short	0x0000
100010e8:	20002ba0 	.word	0x20002ba0

100010ec <__wrap___aeabi_cfrcmple>:
100010ec:	b507      	push	{r0, r1, r2, lr}
100010ee:	4048      	eors	r0, r1
100010f0:	4041      	eors	r1, r0
100010f2:	4048      	eors	r0, r1
100010f4:	e001      	b.n	100010fa <__aeabi_cfcmple_guts>
100010f6:	46c0      	nop			; (mov r8, r8)

100010f8 <__wrap___aeabi_cfcmpeq>:
100010f8:	b507      	push	{r0, r1, r2, lr}

100010fa <__aeabi_cfcmple_guts>:
100010fa:	0042      	lsls	r2, r0, #1
100010fc:	0e12      	lsrs	r2, r2, #24
100010fe:	d003      	beq.n	10001108 <__aeabi_cfcmple_guts+0xe>
10001100:	2aff      	cmp	r2, #255	; 0xff
10001102:	d103      	bne.n	1000110c <__aeabi_cfcmple_guts+0x12>
10001104:	0242      	lsls	r2, r0, #9
10001106:	d818      	bhi.n	1000113a <__aeabi_cfcmple_guts+0x40>
10001108:	0dc0      	lsrs	r0, r0, #23
1000110a:	05c0      	lsls	r0, r0, #23
1000110c:	004a      	lsls	r2, r1, #1
1000110e:	0e12      	lsrs	r2, r2, #24
10001110:	d003      	beq.n	1000111a <__aeabi_cfcmple_guts+0x20>
10001112:	2aff      	cmp	r2, #255	; 0xff
10001114:	d103      	bne.n	1000111e <__aeabi_cfcmple_guts+0x24>
10001116:	024a      	lsls	r2, r1, #9
10001118:	d80f      	bhi.n	1000113a <__aeabi_cfcmple_guts+0x40>
1000111a:	0dc9      	lsrs	r1, r1, #23
1000111c:	05c9      	lsls	r1, r1, #23
1000111e:	2201      	movs	r2, #1
10001120:	4041      	eors	r1, r0
10001122:	d405      	bmi.n	10001130 <__aeabi_cfcmple_guts+0x36>
10001124:	4041      	eors	r1, r0
10001126:	d501      	bpl.n	1000112c <__aeabi_cfcmple_guts+0x32>
10001128:	4281      	cmp	r1, r0
1000112a:	bd07      	pop	{r0, r1, r2, pc}
1000112c:	4288      	cmp	r0, r1
1000112e:	bd07      	pop	{r0, r1, r2, pc}
10001130:	4301      	orrs	r1, r0
10001132:	1849      	adds	r1, r1, r1
10001134:	d001      	beq.n	1000113a <__aeabi_cfcmple_guts+0x40>
10001136:	43c0      	mvns	r0, r0
10001138:	1800      	adds	r0, r0, r0
1000113a:	bd07      	pop	{r0, r1, r2, pc}

1000113c <__wrap___aeabi_fcmpgt>:
1000113c:	b500      	push	{lr}
1000113e:	f7ff ffd5 	bl	100010ec <__wrap___aeabi_cfrcmple>
10001142:	4180      	sbcs	r0, r0
10001144:	bd00      	pop	{pc}

10001146 <__wrap___aeabi_ui2f>:
10001146:	1a49      	subs	r1, r1, r1
10001148:	2800      	cmp	r0, #0
1000114a:	d107      	bne.n	1000115c <__aeabi_i2f_main>
1000114c:	4608      	mov	r0, r1
1000114e:	4770      	bx	lr

10001150 <__wrap___aeabi_i2f>:
10001150:	0fc1      	lsrs	r1, r0, #31
10001152:	07c9      	lsls	r1, r1, #31
10001154:	d500      	bpl.n	10001158 <__wrap___aeabi_i2f+0x8>
10001156:	4240      	negs	r0, r0
10001158:	2800      	cmp	r0, #0
1000115a:	d017      	beq.n	1000118c <__aeabi_i2f_main+0x30>

1000115c <__aeabi_i2f_main>:
1000115c:	46f4      	mov	ip, lr
1000115e:	b403      	push	{r0, r1}
10001160:	4b0b      	ldr	r3, [pc, #44]	; (10001190 <__aeabi_i2f_main+0x34>)
10001162:	681b      	ldr	r3, [r3, #0]
10001164:	4798      	blx	r3
10001166:	bc06      	pop	{r1, r2}
10001168:	4081      	lsls	r1, r0
1000116a:	389e      	subs	r0, #158	; 0x9e
1000116c:	4240      	negs	r0, r0
1000116e:	3180      	adds	r1, #128	; 0x80
10001170:	d207      	bcs.n	10001182 <__aeabi_i2f_main+0x26>
10001172:	060b      	lsls	r3, r1, #24
10001174:	d007      	beq.n	10001186 <__aeabi_i2f_main+0x2a>
10001176:	0049      	lsls	r1, r1, #1
10001178:	0a49      	lsrs	r1, r1, #9
1000117a:	05c0      	lsls	r0, r0, #23
1000117c:	4310      	orrs	r0, r2
1000117e:	4308      	orrs	r0, r1
10001180:	4760      	bx	ip
10001182:	3001      	adds	r0, #1
10001184:	e7f8      	b.n	10001178 <__aeabi_i2f_main+0x1c>
10001186:	0a49      	lsrs	r1, r1, #9
10001188:	0289      	lsls	r1, r1, #10
1000118a:	e7f5      	b.n	10001178 <__aeabi_i2f_main+0x1c>
1000118c:	4770      	bx	lr
1000118e:	0000      	.short	0x0000
10001190:	20039b98 	.word	0x20039b98

10001194 <__wrap___aeabi_f2iz>:
10001194:	0041      	lsls	r1, r0, #1
10001196:	0e0a      	lsrs	r2, r1, #24
10001198:	2380      	movs	r3, #128	; 0x80
1000119a:	061b      	lsls	r3, r3, #24
1000119c:	2a7e      	cmp	r2, #126	; 0x7e
1000119e:	dd0b      	ble.n	100011b8 <__wrap___aeabi_f2iz+0x24>
100011a0:	3a9e      	subs	r2, #158	; 0x9e
100011a2:	da0b      	bge.n	100011bc <__wrap___aeabi_f2iz+0x28>
100011a4:	17c1      	asrs	r1, r0, #31
100011a6:	0240      	lsls	r0, r0, #9
100011a8:	0840      	lsrs	r0, r0, #1
100011aa:	4318      	orrs	r0, r3
100011ac:	4252      	negs	r2, r2
100011ae:	40d0      	lsrs	r0, r2
100011b0:	0049      	lsls	r1, r1, #1
100011b2:	3101      	adds	r1, #1
100011b4:	4348      	muls	r0, r1
100011b6:	4770      	bx	lr
100011b8:	2000      	movs	r0, #0
100011ba:	4770      	bx	lr
100011bc:	0fc0      	lsrs	r0, r0, #31
100011be:	18c0      	adds	r0, r0, r3
100011c0:	3801      	subs	r0, #1
100011c2:	4770      	bx	lr
100011c4:	42c0      	cmn	r0, r0
100011c6:	d30d      	bcc.n	100011e4 <float2int>
100011c8:	b500      	push	{lr}
100011ca:	0040      	lsls	r0, r0, #1
100011cc:	0840      	lsrs	r0, r0, #1
100011ce:	2100      	movs	r1, #0
100011d0:	f000 f812 	bl	100011f8 <__wrap___aeabi_f2uiz>
100011d4:	2800      	cmp	r0, #0
100011d6:	d401      	bmi.n	100011dc <__wrap___aeabi_f2iz+0x48>
100011d8:	4240      	negs	r0, r0
100011da:	bd00      	pop	{pc}
100011dc:	2080      	movs	r0, #128	; 0x80
100011de:	0600      	lsls	r0, r0, #24
100011e0:	bd00      	pop	{pc}
	...

100011e4 <float2int>:
100011e4:	4b03      	ldr	r3, [pc, #12]	; (100011f4 <float2int+0x10>)
100011e6:	69db      	ldr	r3, [r3, #28]
100011e8:	46fc      	mov	ip, pc
100011ea:	4718      	bx	r3
100011ec:	1245df1c 	.word	0x1245df1c
100011f0:	00001000 	.word	0x00001000
100011f4:	20002ba0 	.word	0x20002ba0

100011f8 <__wrap___aeabi_f2uiz>:
100011f8:	4b01      	ldr	r3, [pc, #4]	; (10001200 <__wrap___aeabi_f2uiz+0x8>)
100011fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100011fc:	4718      	bx	r3
100011fe:	0000      	.short	0x0000
10001200:	20002ba0 	.word	0x20002ba0

10001204 <__wrap___aeabi_f2d>:
10001204:	4b03      	ldr	r3, [pc, #12]	; (10001214 <__wrap___aeabi_f2d+0x10>)
10001206:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
10001208:	46fc      	mov	ip, pc
1000120a:	4718      	bx	r3
1000120c:	125ddf7c 	.word	0x125ddf7c
10001210:	00001000 	.word	0x00001000
10001214:	20002ba0 	.word	0x20002ba0

10001218 <float_table_shim_on_use_helper>:
10001218:	b507      	push	{r0, r1, r2, lr}
1000121a:	4660      	mov	r0, ip
1000121c:	8801      	ldrh	r1, [r0, #0]
1000121e:	0a0a      	lsrs	r2, r1, #8
10001220:	3002      	adds	r0, #2
10001222:	2adf      	cmp	r2, #223	; 0xdf
10001224:	d1fa      	bne.n	1000121c <float_table_shim_on_use_helper+0x4>
10001226:	b2c9      	uxtb	r1, r1
10001228:	0882      	lsrs	r2, r0, #2
1000122a:	d304      	bcc.n	10001236 <float_table_shim_on_use_helper+0x1e>
1000122c:	8802      	ldrh	r2, [r0, #0]
1000122e:	8840      	ldrh	r0, [r0, #2]
10001230:	0400      	lsls	r0, r0, #16
10001232:	4310      	orrs	r0, r2
10001234:	e000      	b.n	10001238 <float_table_shim_on_use_helper+0x20>
10001236:	6800      	ldr	r0, [r0, #0]
10001238:	4a01      	ldr	r2, [pc, #4]	; (10001240 <float_table_shim_on_use_helper+0x28>)
1000123a:	5050      	str	r0, [r2, r1]
1000123c:	9003      	str	r0, [sp, #12]
1000123e:	bd07      	pop	{r0, r1, r2, pc}
10001240:	20002ba0 	.word	0x20002ba0

10001244 <float2int_shim>:
10001244:	2100      	movs	r1, #0

10001246 <float2fix_shim>:
10001246:	15c2      	asrs	r2, r0, #23
10001248:	3280      	adds	r2, #128	; 0x80
1000124a:	3280      	adds	r2, #128	; 0x80
1000124c:	d001      	beq.n	10001252 <float2fix_shim+0xc>
1000124e:	4a02      	ldr	r2, [pc, #8]	; (10001258 <float2fix_shim+0x12>)
10001250:	4710      	bx	r2
10001252:	2000      	movs	r0, #0
10001254:	4770      	bx	lr
10001256:	0000      	.short	0x0000
10001258:	00002acd 	.word	0x00002acd

1000125c <float2double_shim>:
1000125c:	0fc3      	lsrs	r3, r0, #31
1000125e:	07db      	lsls	r3, r3, #31
10001260:	0041      	lsls	r1, r0, #1
10001262:	0e0a      	lsrs	r2, r1, #24
10001264:	d007      	beq.n	10001276 <float2double_shim+0x1a>
10001266:	2aff      	cmp	r2, #255	; 0xff
10001268:	d008      	beq.n	1000127c <float2double_shim+0x20>
1000126a:	0909      	lsrs	r1, r1, #4
1000126c:	4a05      	ldr	r2, [pc, #20]	; (10001284 <float2double_shim+0x28>)
1000126e:	1889      	adds	r1, r1, r2
10001270:	4319      	orrs	r1, r3
10001272:	0740      	lsls	r0, r0, #29
10001274:	4770      	bx	lr
10001276:	0019      	movs	r1, r3
10001278:	2000      	movs	r0, #0
1000127a:	4770      	bx	lr
1000127c:	4902      	ldr	r1, [pc, #8]	; (10001288 <float2double_shim+0x2c>)
1000127e:	18c9      	adds	r1, r1, r3
10001280:	e7fa      	b.n	10001278 <float2double_shim+0x1c>
10001282:	0000      	.short	0x0000
10001284:	38000000 	.word	0x38000000
10001288:	7ff00000 	.word	0x7ff00000

1000128c <__aeabi_mem_init>:
1000128c:	4801      	ldr	r0, [pc, #4]	; (10001294 <__aeabi_mem_init+0x8>)
1000128e:	2104      	movs	r1, #4
10001290:	4b01      	ldr	r3, [pc, #4]	; (10001298 <__aeabi_mem_init+0xc>)
10001292:	4718      	bx	r3
10001294:	20002178 	.word	0x20002178
10001298:	10001309 	.word	0x10001309

1000129c <__wrap_memset>:
1000129c:	4b01      	ldr	r3, [pc, #4]	; (100012a4 <__wrap_memset+0x8>)
1000129e:	681b      	ldr	r3, [r3, #0]
100012a0:	4718      	bx	r3
100012a2:	0000      	.short	0x0000
100012a4:	20002178 	.word	0x20002178

100012a8 <__wrap___aeabi_memcpy>:
100012a8:	4b01      	ldr	r3, [pc, #4]	; (100012b0 <__wrap___aeabi_memcpy+0x8>)
100012aa:	685b      	ldr	r3, [r3, #4]
100012ac:	4718      	bx	r3
100012ae:	0000      	.short	0x0000
100012b0:	20002178 	.word	0x20002178

100012b4 <__wrap___aeabi_lmul>:
100012b4:	4351      	muls	r1, r2
100012b6:	4343      	muls	r3, r0
100012b8:	18c9      	adds	r1, r1, r3
100012ba:	468c      	mov	ip, r1
100012bc:	0c11      	lsrs	r1, r2, #16
100012be:	b283      	uxth	r3, r0
100012c0:	434b      	muls	r3, r1
100012c2:	b410      	push	{r4}
100012c4:	0c04      	lsrs	r4, r0, #16
100012c6:	4361      	muls	r1, r4
100012c8:	b292      	uxth	r2, r2
100012ca:	b280      	uxth	r0, r0
100012cc:	4350      	muls	r0, r2
100012ce:	4362      	muls	r2, r4
100012d0:	041c      	lsls	r4, r3, #16
100012d2:	0c1b      	lsrs	r3, r3, #16
100012d4:	1900      	adds	r0, r0, r4
100012d6:	bc10      	pop	{r4}
100012d8:	4159      	adcs	r1, r3
100012da:	0413      	lsls	r3, r2, #16
100012dc:	0c12      	lsrs	r2, r2, #16
100012de:	18c0      	adds	r0, r0, r3
100012e0:	4151      	adcs	r1, r2
100012e2:	4461      	add	r1, ip
100012e4:	4770      	bx	lr
	...

100012e8 <rom_func_lookup>:
// Convert a 16 bit pointer stored at the given rom address into a 32 bit pointer
#define rom_hword_as_ptr(rom_address) (void *)(uintptr_t)(*(uint16_t *)rom_address)

void *rom_func_lookup(uint32_t code) {
    rom_table_lookup_fn rom_table_lookup = (rom_table_lookup_fn) rom_hword_as_ptr(0x18);
    uint16_t *func_table = (uint16_t *) rom_hword_as_ptr(0x14);
100012e8:	2314      	movs	r3, #20
void *rom_func_lookup(uint32_t code) {
100012ea:	b510      	push	{r4, lr}
100012ec:	0001      	movs	r1, r0
    uint16_t *func_table = (uint16_t *) rom_hword_as_ptr(0x14);
100012ee:	8818      	ldrh	r0, [r3, #0]
    rom_table_lookup_fn rom_table_lookup = (rom_table_lookup_fn) rom_hword_as_ptr(0x18);
100012f0:	3304      	adds	r3, #4
100012f2:	881b      	ldrh	r3, [r3, #0]
    return rom_table_lookup(func_table, code);
100012f4:	4798      	blx	r3
}
100012f6:	bd10      	pop	{r4, pc}

100012f8 <rom_data_lookup>:

void *rom_data_lookup(uint32_t code) {
    rom_table_lookup_fn rom_table_lookup = (rom_table_lookup_fn) rom_hword_as_ptr(0x18);
    uint16_t *data_table = (uint16_t *) rom_hword_as_ptr(0x16);
100012f8:	2316      	movs	r3, #22
void *rom_data_lookup(uint32_t code) {
100012fa:	b510      	push	{r4, lr}
100012fc:	0001      	movs	r1, r0
    uint16_t *data_table = (uint16_t *) rom_hword_as_ptr(0x16);
100012fe:	8818      	ldrh	r0, [r3, #0]
    rom_table_lookup_fn rom_table_lookup = (rom_table_lookup_fn) rom_hword_as_ptr(0x18);
10001300:	3302      	adds	r3, #2
10001302:	881b      	ldrh	r3, [r3, #0]
    return rom_table_lookup(data_table, code);
10001304:	4798      	blx	r3
}
10001306:	bd10      	pop	{r4, pc}

10001308 <rom_funcs_lookup>:
/// \end::table_lookup[]

bool rom_funcs_lookup(uint32_t *table, unsigned int count) {
10001308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000130a:	4647      	mov	r7, r8
1000130c:	46ce      	mov	lr, r9
1000130e:	b580      	push	{r7, lr}
10001310:	1e0f      	subs	r7, r1, #0
    bool ok = true;
    for (unsigned int i = 0; i < count; i++) {
10001312:	d019      	beq.n	10001348 <rom_funcs_lookup+0x40>
    uint16_t *func_table = (uint16_t *) rom_hword_as_ptr(0x14);
10001314:	2314      	movs	r3, #20
10001316:	4699      	mov	r9, r3
    rom_table_lookup_fn rom_table_lookup = (rom_table_lookup_fn) rom_hword_as_ptr(0x18);
10001318:	3304      	adds	r3, #4
1000131a:	0004      	movs	r4, r0
    for (unsigned int i = 0; i < count; i++) {
1000131c:	2500      	movs	r5, #0
    bool ok = true;
1000131e:	2601      	movs	r6, #1
    rom_table_lookup_fn rom_table_lookup = (rom_table_lookup_fn) rom_hword_as_ptr(0x18);
10001320:	4698      	mov	r8, r3
    uint16_t *func_table = (uint16_t *) rom_hword_as_ptr(0x14);
10001322:	464b      	mov	r3, r9
10001324:	8818      	ldrh	r0, [r3, #0]
    rom_table_lookup_fn rom_table_lookup = (rom_table_lookup_fn) rom_hword_as_ptr(0x18);
10001326:	4643      	mov	r3, r8
    return rom_table_lookup(func_table, code);
10001328:	6821      	ldr	r1, [r4, #0]
    rom_table_lookup_fn rom_table_lookup = (rom_table_lookup_fn) rom_hword_as_ptr(0x18);
1000132a:	881b      	ldrh	r3, [r3, #0]
    return rom_table_lookup(func_table, code);
1000132c:	4798      	blx	r3
        table[i] = (uintptr_t) rom_func_lookup(table[i]);
1000132e:	c401      	stmia	r4!, {r0}
        if (!table[i]) ok = false;
10001330:	1e43      	subs	r3, r0, #1
10001332:	4198      	sbcs	r0, r3
    for (unsigned int i = 0; i < count; i++) {
10001334:	3501      	adds	r5, #1
        if (!table[i]) ok = false;
10001336:	4240      	negs	r0, r0
10001338:	4006      	ands	r6, r0
    for (unsigned int i = 0; i < count; i++) {
1000133a:	42af      	cmp	r7, r5
1000133c:	d1f1      	bne.n	10001322 <rom_funcs_lookup+0x1a>
    }
    return ok;
}
1000133e:	0030      	movs	r0, r6
10001340:	bcc0      	pop	{r6, r7}
10001342:	46b9      	mov	r9, r7
10001344:	46b0      	mov	r8, r6
10001346:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bool ok = true;
10001348:	2601      	movs	r6, #1
1000134a:	e7f8      	b.n	1000133e <rom_funcs_lookup+0x36>

1000134c <hw_claim_lock>:
 *
 * \return The prior interrupt enable status for restoration later via restore_interrupts()
 */
inline static uint32_t save_and_disable_interrupts() {
    uint32_t status;
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
1000134c:	f3ef 8010 	mrs	r0, PRIMASK
    __asm volatile ("cpsid i");
10001350:	b672      	cpsid	i
 */
inline static void spin_lock_unsafe_blocking(spin_lock_t *lock) {
    // Note we don't do a wfe or anything, because by convention these spin_locks are VERY SHORT LIVED and NEVER BLOCK and run
    // with INTERRUPTS disabled (to ensure that)... therefore nothing on our core could be blocking us, so we just need to wait on another core
    // anyway which should be finished soon
    while (__builtin_expect(!*lock, 0));
10001352:	4a03      	ldr	r2, [pc, #12]	; (10001360 <hw_claim_lock+0x14>)
10001354:	6813      	ldr	r3, [r2, #0]
10001356:	2b00      	cmp	r3, #0
10001358:	d0fc      	beq.n	10001354 <hw_claim_lock+0x8>
    __asm volatile ("dmb");
1000135a:	f3bf 8f5f 	dmb	sy

#include "hardware/claim.h"

uint32_t hw_claim_lock() {
    return spin_lock_blocking(spin_lock_instance(PICO_SPINLOCK_ID_HARDWARE_CLAIM));
}
1000135e:	4770      	bx	lr
10001360:	d000012c 	.word	0xd000012c

10001364 <hw_claim_unlock>:
10001364:	f3bf 8f5f 	dmb	sy
 *
 * \param lock Spinlock instance
 */
inline static void spin_unlock_unsafe(spin_lock_t *lock) {
    __mem_fence_release();
    *lock = 0;
10001368:	2200      	movs	r2, #0
1000136a:	4b02      	ldr	r3, [pc, #8]	; (10001374 <hw_claim_unlock+0x10>)
1000136c:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
1000136e:	f380 8810 	msr	PRIMASK, r0

void hw_claim_unlock(uint32_t save) {
    spin_unlock(spin_lock_instance(PICO_SPINLOCK_ID_HARDWARE_CLAIM), save);
}
10001372:	4770      	bx	lr
10001374:	d000012c 	.word	0xd000012c

10001378 <hw_claim_or_assert>:
    }
    hw_claim_unlock(save);
    return rc;
}

void hw_claim_or_assert(uint8_t *bits, uint bit_index, const char *message) {
10001378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000137a:	46ce      	mov	lr, r9
1000137c:	4647      	mov	r7, r8
1000137e:	4691      	mov	r9, r2
10001380:	b580      	push	{r7, lr}
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
10001382:	f3ef 8c10 	mrs	ip, PRIMASK
    __asm volatile ("cpsid i");
10001386:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
10001388:	4d10      	ldr	r5, [pc, #64]	; (100013cc <hw_claim_or_assert+0x54>)
1000138a:	682b      	ldr	r3, [r5, #0]
1000138c:	2b00      	cmp	r3, #0
1000138e:	d0fc      	beq.n	1000138a <hw_claim_or_assert+0x12>
    __asm volatile ("dmb");
10001390:	f3bf 8f5f 	dmb	sy
    uint32_t save = hw_claim_lock();
    if (bits[bit_index >> 3u] & (1u << (bit_index & 7u))) {
10001394:	08cb      	lsrs	r3, r1, #3
10001396:	5cc4      	ldrb	r4, [r0, r3]
10001398:	18c7      	adds	r7, r0, r3
1000139a:	2007      	movs	r0, #7
1000139c:	0026      	movs	r6, r4
1000139e:	2301      	movs	r3, #1
100013a0:	4008      	ands	r0, r1
100013a2:	40c6      	lsrs	r6, r0
100013a4:	001a      	movs	r2, r3
100013a6:	4032      	ands	r2, r6
100013a8:	4233      	tst	r3, r6
100013aa:	d10b      	bne.n	100013c4 <hw_claim_or_assert+0x4c>
        panic(message, bit_index);
    } else {
        bits[bit_index >> 3u] |= (1u << (bit_index & 7u));
100013ac:	4083      	lsls	r3, r0
100013ae:	4323      	orrs	r3, r4
100013b0:	703b      	strb	r3, [r7, #0]
100013b2:	f3bf 8f5f 	dmb	sy
    *lock = 0;
100013b6:	602a      	str	r2, [r5, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
100013b8:	f38c 8810 	msr	PRIMASK, ip
    }
    hw_claim_unlock(save);
}
100013bc:	bcc0      	pop	{r6, r7}
100013be:	46b9      	mov	r9, r7
100013c0:	46b0      	mov	r8, r6
100013c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        panic(message, bit_index);
100013c4:	4648      	mov	r0, r9
100013c6:	f002 fbf5 	bl	10003bb4 <panic>
100013ca:	46c0      	nop			; (mov r8, r8)
100013cc:	d000012c 	.word	0xd000012c

100013d0 <hw_claim_unused_from_range>:

int hw_claim_unused_from_range(uint8_t *bits, bool required, uint bit_lsb, uint bit_msb, const char *message) {
100013d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100013d2:	4647      	mov	r7, r8
100013d4:	46ce      	mov	lr, r9
100013d6:	4688      	mov	r8, r1
100013d8:	b580      	push	{r7, lr}
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
100013da:	f3ef 8c10 	mrs	ip, PRIMASK
    __asm volatile ("cpsid i");
100013de:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
100013e0:	4d21      	ldr	r5, [pc, #132]	; (10001468 <hw_claim_unused_from_range+0x98>)
100013e2:	682c      	ldr	r4, [r5, #0]
100013e4:	2c00      	cmp	r4, #0
100013e6:	d0fc      	beq.n	100013e2 <hw_claim_unused_from_range+0x12>
    __asm volatile ("dmb");
100013e8:	f3bf 8f5f 	dmb	sy
    // don't bother check lsb / msb order as if wrong, then it'll fail anyway
    uint32_t save = hw_claim_lock();
    int found_bit = -1;
    for(uint bit=bit_lsb; bit <= bit_msb; bit++) {
100013ec:	429a      	cmp	r2, r3
100013ee:	d82d      	bhi.n	1000144c <hw_claim_unused_from_range+0x7c>
        if (!(bits[bit >> 3u] & (1u << (bit & 7u)))) {
100013f0:	08d4      	lsrs	r4, r2, #3
100013f2:	5d05      	ldrb	r5, [r0, r4]
100013f4:	1907      	adds	r7, r0, r4
100013f6:	2407      	movs	r4, #7
100013f8:	002e      	movs	r6, r5
100013fa:	4014      	ands	r4, r2
100013fc:	40e6      	lsrs	r6, r4
100013fe:	07f1      	lsls	r1, r6, #31
10001400:	d51e      	bpl.n	10001440 <hw_claim_unused_from_range+0x70>
10001402:	2107      	movs	r1, #7
10001404:	4689      	mov	r9, r1
10001406:	3906      	subs	r1, #6
10001408:	e008      	b.n	1000141c <hw_claim_unused_from_range+0x4c>
1000140a:	08d4      	lsrs	r4, r2, #3
1000140c:	5d05      	ldrb	r5, [r0, r4]
1000140e:	1907      	adds	r7, r0, r4
10001410:	464c      	mov	r4, r9
10001412:	002e      	movs	r6, r5
10001414:	4014      	ands	r4, r2
10001416:	40e6      	lsrs	r6, r4
10001418:	4231      	tst	r1, r6
1000141a:	d011      	beq.n	10001440 <hw_claim_unused_from_range+0x70>
    for(uint bit=bit_lsb; bit <= bit_msb; bit++) {
1000141c:	3201      	adds	r2, #1
1000141e:	4293      	cmp	r3, r2
10001420:	d2f3      	bcs.n	1000140a <hw_claim_unused_from_range+0x3a>
    int found_bit = -1;
10001422:	2001      	movs	r0, #1
10001424:	4240      	negs	r0, r0
10001426:	f3bf 8f5f 	dmb	sy
    *lock = 0;
1000142a:	2200      	movs	r2, #0
1000142c:	4b0e      	ldr	r3, [pc, #56]	; (10001468 <hw_claim_unused_from_range+0x98>)
1000142e:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10001430:	f38c 8810 	msr	PRIMASK, ip
            found_bit = bit;
            break;
        }
    }
    hw_claim_unlock(save);
    if (found_bit < 0 && required) {
10001434:	2800      	cmp	r0, #0
10001436:	db11      	blt.n	1000145c <hw_claim_unused_from_range+0x8c>
        panic(message);
    }
    return found_bit;
}
10001438:	bcc0      	pop	{r6, r7}
1000143a:	46b9      	mov	r9, r7
1000143c:	46b0      	mov	r8, r6
1000143e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            bits[bit >> 3u] |= (1u << (bit & 7u));
10001440:	2301      	movs	r3, #1
10001442:	40a3      	lsls	r3, r4
10001444:	431d      	orrs	r5, r3
            found_bit = bit;
10001446:	0010      	movs	r0, r2
            bits[bit >> 3u] |= (1u << (bit & 7u));
10001448:	703d      	strb	r5, [r7, #0]
            break;
1000144a:	e7ec      	b.n	10001426 <hw_claim_unused_from_range+0x56>
    __asm volatile ("dmb");
1000144c:	f3bf 8f5f 	dmb	sy
    *lock = 0;
10001450:	2300      	movs	r3, #0
10001452:	602b      	str	r3, [r5, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10001454:	f38c 8810 	msr	PRIMASK, ip
    int found_bit = -1;
10001458:	2001      	movs	r0, #1
1000145a:	4240      	negs	r0, r0
    if (found_bit < 0 && required) {
1000145c:	4643      	mov	r3, r8
1000145e:	2b00      	cmp	r3, #0
10001460:	d0ea      	beq.n	10001438 <hw_claim_unused_from_range+0x68>
        panic(message);
10001462:	9808      	ldr	r0, [sp, #32]
10001464:	f002 fba6 	bl	10003bb4 <panic>
10001468:	d000012c 	.word	0xd000012c

1000146c <clock_configure>:
    hw_clear_bits(&clock->ctrl, CLOCKS_CLK_USB_CTRL_ENABLE_BITS);
    configured_freq[clk_index] = 0;
}

/// \tag::clock_configure[]
bool clock_configure(enum clock_index clk_index, uint32_t src, uint32_t auxsrc, uint32_t src_freq, uint32_t freq) {
1000146c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000146e:	464f      	mov	r7, r9
10001470:	4646      	mov	r6, r8
10001472:	46d6      	mov	lr, sl
10001474:	b5c0      	push	{r6, r7, lr}
10001476:	0017      	movs	r7, r2
    uint32_t div;

    assert(src_freq >= freq);

    if (freq > src_freq)
10001478:	9a08      	ldr	r2, [sp, #32]
bool clock_configure(enum clock_index clk_index, uint32_t src, uint32_t auxsrc, uint32_t src_freq, uint32_t freq) {
1000147a:	0005      	movs	r5, r0
1000147c:	4688      	mov	r8, r1
    if (freq > src_freq)
1000147e:	429a      	cmp	r2, r3
10001480:	d865      	bhi.n	1000154e <clock_configure+0xe2>
        return false;

    // Div register is 24.8 int.frac divider so multiply by 2^8 (left shift by 8)
    div = (uint32_t) (((uint64_t) src_freq << 8) / freq);
10001482:	0e19      	lsrs	r1, r3, #24
10001484:	0218      	lsls	r0, r3, #8
10001486:	2300      	movs	r3, #0
10001488:	f7fe ffba 	bl	10000400 <__wrap___aeabi_uldivmod>

    clock_hw_t *clock = &clocks_hw->clk[clk_index];
1000148c:	4b31      	ldr	r3, [pc, #196]	; (10001554 <clock_configure+0xe8>)
1000148e:	006c      	lsls	r4, r5, #1
10001490:	469c      	mov	ip, r3
10001492:	1964      	adds	r4, r4, r5
10001494:	00a4      	lsls	r4, r4, #2
10001496:	4464      	add	r4, ip

    // If increasing divisor, set divisor before source. Otherwise set source
    // before divisor. This avoids a momentary overspeed when e.g. switching
    // to a faster source and increasing divisor to compensate.
    if (div > clock->div)
10001498:	6863      	ldr	r3, [r4, #4]
    div = (uint32_t) (((uint64_t) src_freq << 8) / freq);
1000149a:	4681      	mov	r9, r0
    if (div > clock->div)
1000149c:	4298      	cmp	r0, r3
1000149e:	d900      	bls.n	100014a2 <clock_configure+0x36>
        clock->div = div;
100014a0:	6060      	str	r0, [r4, #4]
    return clk_index == clk_sys || clk_index == clk_ref;
100014a2:	1f2b      	subs	r3, r5, #4
100014a4:	b2db      	uxtb	r3, r3
100014a6:	469a      	mov	sl, r3

    // If switching a glitchless slice (ref or sys) to an aux source, switch
    // away from aux *first* to avoid passing glitches when changing aux mux.
    // Assume (!!!) glitchless source 0 is no faster than the aux source.
    if (has_glitchless_mux(clk_index) && src == CLOCKS_CLK_SYS_CTRL_SRC_VALUE_CLKSRC_CLK_SYS_AUX) {
100014a8:	2b01      	cmp	r3, #1
100014aa:	d92c      	bls.n	10001506 <clock_configure+0x9a>
 *
 * \param addr Address of writable register
 * \param mask Bit-mask specifying bits to clear
 */
inline static void hw_clear_bits(io_rw_32 *addr, uint32_t mask) {
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
100014ac:	23c0      	movs	r3, #192	; 0xc0
100014ae:	2280      	movs	r2, #128	; 0x80
    // If no glitchless mux, cleanly stop the clock to avoid glitches
    // propagating when changing aux mux. Note it would be a really bad idea
    // to do this on one of the glitchless clocks (clk_sys, clk_ref).
    else {
        hw_clear_bits(&clock->ctrl, CLOCKS_CLK_GPOUT0_CTRL_ENABLE_BITS);
        if (configured_freq[clk_index] > 0) {
100014b0:	4e29      	ldr	r6, [pc, #164]	; (10001558 <clock_configure+0xec>)
100014b2:	00ad      	lsls	r5, r5, #2
100014b4:	019b      	lsls	r3, r3, #6
100014b6:	5971      	ldr	r1, [r6, r5]
100014b8:	4323      	orrs	r3, r4
100014ba:	0112      	lsls	r2, r2, #4
100014bc:	601a      	str	r2, [r3, #0]
100014be:	2900      	cmp	r1, #0
100014c0:	d005      	beq.n	100014ce <clock_configure+0x62>
            // Delay for 3 cycles of the target clock, for ENABLE propagation.
            // Note XOSC_COUNT is not helpful here because XOSC is not
            // necessarily running, nor is timer... so, 3 cycles per loop:
            uint delay_cyc = configured_freq[clk_sys] / configured_freq[clk_index] + 1;
100014c2:	6970      	ldr	r0, [r6, #20]
100014c4:	f7fe ff56 	bl	10000374 <__wrap___aeabi_uidiv>
100014c8:	3001      	adds	r0, #1
            asm volatile (
100014ca:	3801      	subs	r0, #1
100014cc:	d1fd      	bne.n	100014ca <clock_configure+0x5e>
 * \param addr Address of writable register
 * \param values Bits values
 * \param write_mask Mask of bits to change
 */
inline static void hw_write_masked(io_rw_32 *addr, uint32_t values, uint32_t write_mask) {
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
100014ce:	6822      	ldr	r2, [r4, #0]
            );
        }
    }

    // Set aux mux first, and then glitchless mux if this clock has one
    hw_write_masked(&clock->ctrl,
100014d0:	017f      	lsls	r7, r7, #5
100014d2:	407a      	eors	r2, r7
100014d4:	27e0      	movs	r7, #224	; 0xe0
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
100014d6:	2380      	movs	r3, #128	; 0x80
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
100014d8:	4017      	ands	r7, r2
        (auxsrc << CLOCKS_CLK_SYS_CTRL_AUXSRC_LSB),
        CLOCKS_CLK_SYS_CTRL_AUXSRC_BITS
    );

    if (has_glitchless_mux(clk_index)) {
100014da:	4652      	mov	r2, sl
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
100014dc:	015b      	lsls	r3, r3, #5
100014de:	4323      	orrs	r3, r4
100014e0:	601f      	str	r7, [r3, #0]
100014e2:	2a01      	cmp	r2, #1
100014e4:	d926      	bls.n	10001534 <clock_configure+0xc8>
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
100014e6:	2380      	movs	r3, #128	; 0x80
100014e8:	2280      	movs	r2, #128	; 0x80
100014ea:	019b      	lsls	r3, r3, #6
100014ec:	4323      	orrs	r3, r4
100014ee:	0112      	lsls	r2, r2, #4
100014f0:	601a      	str	r2, [r3, #0]

    hw_set_bits(&clock->ctrl, CLOCKS_CLK_GPOUT0_CTRL_ENABLE_BITS);

    // Now that the source is configured, we can trust that the user-supplied
    // divisor is a safe value.
    clock->div = div;
100014f2:	464b      	mov	r3, r9

    // Store the configured frequency
    configured_freq[clk_index] = freq;
100014f4:	2001      	movs	r0, #1
    clock->div = div;
100014f6:	6063      	str	r3, [r4, #4]
    configured_freq[clk_index] = freq;
100014f8:	9b08      	ldr	r3, [sp, #32]
100014fa:	5173      	str	r3, [r6, r5]

    return true;
}
100014fc:	bce0      	pop	{r5, r6, r7}
100014fe:	46ba      	mov	sl, r7
10001500:	46b1      	mov	r9, r6
10001502:	46a8      	mov	r8, r5
10001504:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (has_glitchless_mux(clk_index) && src == CLOCKS_CLK_SYS_CTRL_SRC_VALUE_CLKSRC_CLK_SYS_AUX) {
10001506:	4643      	mov	r3, r8
10001508:	2b01      	cmp	r3, #1
1000150a:	d1cf      	bne.n	100014ac <clock_configure+0x40>
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
1000150c:	23c0      	movs	r3, #192	; 0xc0
1000150e:	2203      	movs	r2, #3
10001510:	019b      	lsls	r3, r3, #6
10001512:	4323      	orrs	r3, r4
10001514:	601a      	str	r2, [r3, #0]
        while (!(clock->selected & 1u))
10001516:	3a02      	subs	r2, #2
10001518:	68a3      	ldr	r3, [r4, #8]
1000151a:	421a      	tst	r2, r3
1000151c:	d0fc      	beq.n	10001518 <clock_configure+0xac>
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
1000151e:	23e0      	movs	r3, #224	; 0xe0
10001520:	6822      	ldr	r2, [r4, #0]
    hw_write_masked(&clock->ctrl,
10001522:	017f      	lsls	r7, r7, #5
10001524:	4057      	eors	r7, r2
10001526:	401f      	ands	r7, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10001528:	2380      	movs	r3, #128	; 0x80
1000152a:	015b      	lsls	r3, r3, #5
1000152c:	4323      	orrs	r3, r4
1000152e:	4e0a      	ldr	r6, [pc, #40]	; (10001558 <clock_configure+0xec>)
10001530:	601f      	str	r7, [r3, #0]
    return clk_index == clk_sys || clk_index == clk_ref;
10001532:	00ad      	lsls	r5, r5, #2
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10001534:	4642      	mov	r2, r8
10001536:	6821      	ldr	r1, [r4, #0]
10001538:	4051      	eors	r1, r2
1000153a:	2203      	movs	r2, #3
1000153c:	400a      	ands	r2, r1
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
1000153e:	601a      	str	r2, [r3, #0]
        while (!(clock->selected & (1u << src)))
10001540:	2201      	movs	r2, #1
10001542:	4643      	mov	r3, r8
10001544:	409a      	lsls	r2, r3
10001546:	68a3      	ldr	r3, [r4, #8]
10001548:	421a      	tst	r2, r3
1000154a:	d0fc      	beq.n	10001546 <clock_configure+0xda>
1000154c:	e7cb      	b.n	100014e6 <clock_configure+0x7a>
        return false;
1000154e:	2000      	movs	r0, #0
10001550:	e7d4      	b.n	100014fc <clock_configure+0x90>
10001552:	46c0      	nop			; (mov r8, r8)
10001554:	40008000 	.word	0x40008000
10001558:	20039494 	.word	0x20039494

1000155c <clocks_init>:
/// \end::clock_configure[]

void clocks_init(void) {
1000155c:	b530      	push	{r4, r5, lr}
    // Start tick in watchdog
    watchdog_start_tick(XOSC_MHZ);
1000155e:	200c      	movs	r0, #12
void clocks_init(void) {
10001560:	b083      	sub	sp, #12
    watchdog_start_tick(XOSC_MHZ);
10001562:	f003 fc65 	bl	10004e30 <watchdog_start_tick>

    // Everything is 48MHz on FPGA apart from RTC. Otherwise set to 0 and will be set in clock configure
    if (running_on_fpga()) {
10001566:	f000 ff91 	bl	1000248c <running_on_fpga>
1000156a:	2800      	cmp	r0, #0
1000156c:	d00e      	beq.n	1000158c <clocks_init+0x30>
        for (uint i = 0; i < CLK_COUNT; i++) {
            configured_freq[i] = 48 * MHZ;
1000156e:	4b9a      	ldr	r3, [pc, #616]	; (100017d8 <clocks_init+0x27c>)
10001570:	4a9a      	ldr	r2, [pc, #616]	; (100017dc <clocks_init+0x280>)
10001572:	601a      	str	r2, [r3, #0]
10001574:	605a      	str	r2, [r3, #4]
10001576:	609a      	str	r2, [r3, #8]
10001578:	60da      	str	r2, [r3, #12]
1000157a:	611a      	str	r2, [r3, #16]
1000157c:	615a      	str	r2, [r3, #20]
1000157e:	619a      	str	r2, [r3, #24]
10001580:	61da      	str	r2, [r3, #28]
10001582:	621a      	str	r2, [r3, #32]
        }
        configured_freq[clk_rtc] = 46875;
10001584:	4a96      	ldr	r2, [pc, #600]	; (100017e0 <clocks_init+0x284>)
10001586:	625a      	str	r2, [r3, #36]	; 0x24
    clock_configure(clk_peri,
                    0,
                    CLOCKS_CLK_PERI_CTRL_AUXSRC_VALUE_CLK_SYS,
                    125 * MHZ,
                    125 * MHZ);
}
10001588:	b003      	add	sp, #12
1000158a:	bd30      	pop	{r4, r5, pc}
    clocks_hw->resus.ctrl = 0;
1000158c:	4c95      	ldr	r4, [pc, #596]	; (100017e4 <clocks_init+0x288>)
1000158e:	67a0      	str	r0, [r4, #120]	; 0x78
    xosc_init();
10001590:	f003 fc56 	bl	10004e40 <xosc_init>
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10001594:	2201      	movs	r2, #1
10001596:	4b94      	ldr	r3, [pc, #592]	; (100017e8 <clocks_init+0x28c>)
10001598:	601a      	str	r2, [r3, #0]
    while (clocks_hw->clk[clk_sys].selected != 0x1)
1000159a:	6c63      	ldr	r3, [r4, #68]	; 0x44
1000159c:	2b01      	cmp	r3, #1
1000159e:	d1fc      	bne.n	1000159a <clocks_init+0x3e>
100015a0:	2203      	movs	r2, #3
100015a2:	4b92      	ldr	r3, [pc, #584]	; (100017ec <clocks_init+0x290>)
100015a4:	601a      	str	r2, [r3, #0]
    while (clocks_hw->clk[clk_ref].selected != 0x1)
100015a6:	4a8f      	ldr	r2, [pc, #572]	; (100017e4 <clocks_init+0x288>)
100015a8:	6b93      	ldr	r3, [r2, #56]	; 0x38
100015aa:	2b01      	cmp	r3, #1
100015ac:	d1fc      	bne.n	100015a8 <clocks_init+0x4c>
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
100015ae:	22c0      	movs	r2, #192	; 0xc0
100015b0:	4b8f      	ldr	r3, [pc, #572]	; (100017f0 <clocks_init+0x294>)
100015b2:	0192      	lsls	r2, r2, #6
100015b4:	601a      	str	r2, [r3, #0]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
100015b6:	4b8f      	ldr	r3, [pc, #572]	; (100017f4 <clocks_init+0x298>)
 *
 * \param bits Bit pattern indicating blocks to unreset. See \ref reset_bitmask
 */
static inline void unreset_block_wait(uint32_t bits) {
    hw_clear_bits(&resets_hw->reset, bits);
    while (~resets_hw->reset_done & bits)
100015b8:	498f      	ldr	r1, [pc, #572]	; (100017f8 <clocks_init+0x29c>)
100015ba:	601a      	str	r2, [r3, #0]
100015bc:	0010      	movs	r0, r2
100015be:	688b      	ldr	r3, [r1, #8]
100015c0:	4398      	bics	r0, r3
100015c2:	1e03      	subs	r3, r0, #0
100015c4:	d1fa      	bne.n	100015bc <clocks_init+0x60>
    pll_init(pll_sys, 1, 1500 * MHZ, 6, 2);
100015c6:	2402      	movs	r4, #2
100015c8:	2101      	movs	r1, #1
100015ca:	4a8c      	ldr	r2, [pc, #560]	; (100017fc <clocks_init+0x2a0>)
100015cc:	488c      	ldr	r0, [pc, #560]	; (10001800 <clocks_init+0x2a4>)
100015ce:	3306      	adds	r3, #6
100015d0:	9400      	str	r4, [sp, #0]
100015d2:	f000 ff63 	bl	1000249c <pll_init>
    pll_init(pll_usb, 1, 480 * MHZ, 5, 2);
100015d6:	2305      	movs	r3, #5
100015d8:	4a8a      	ldr	r2, [pc, #552]	; (10001804 <clocks_init+0x2a8>)
100015da:	2101      	movs	r1, #1
100015dc:	488a      	ldr	r0, [pc, #552]	; (10001808 <clocks_init+0x2ac>)
100015de:	9400      	str	r4, [sp, #0]
100015e0:	f000 ff5c 	bl	1000249c <pll_init>
    if (div > clock->div)
100015e4:	4b89      	ldr	r3, [pc, #548]	; (1000180c <clocks_init+0x2b0>)
100015e6:	685a      	ldr	r2, [r3, #4]
100015e8:	2aff      	cmp	r2, #255	; 0xff
100015ea:	d802      	bhi.n	100015f2 <clocks_init+0x96>
        clock->div = div;
100015ec:	2280      	movs	r2, #128	; 0x80
100015ee:	0052      	lsls	r2, r2, #1
100015f0:	605a      	str	r2, [r3, #4]
100015f2:	2280      	movs	r2, #128	; 0x80
        if (configured_freq[clk_index] > 0) {
100015f4:	4c78      	ldr	r4, [pc, #480]	; (100017d8 <clocks_init+0x27c>)
100015f6:	4b7d      	ldr	r3, [pc, #500]	; (100017ec <clocks_init+0x290>)
100015f8:	6921      	ldr	r1, [r4, #16]
100015fa:	0112      	lsls	r2, r2, #4
100015fc:	4d83      	ldr	r5, [pc, #524]	; (1000180c <clocks_init+0x2b0>)
100015fe:	601a      	str	r2, [r3, #0]
10001600:	2900      	cmp	r1, #0
10001602:	d005      	beq.n	10001610 <clocks_init+0xb4>
            uint delay_cyc = configured_freq[clk_sys] / configured_freq[clk_index] + 1;
10001604:	6960      	ldr	r0, [r4, #20]
10001606:	f7fe feb5 	bl	10000374 <__wrap___aeabi_uidiv>
1000160a:	3001      	adds	r0, #1
            asm volatile (
1000160c:	3801      	subs	r0, #1
1000160e:	d1fd      	bne.n	1000160c <clocks_init+0xb0>
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10001610:	21e0      	movs	r1, #224	; 0xe0
10001612:	4b7e      	ldr	r3, [pc, #504]	; (1000180c <clocks_init+0x2b0>)
10001614:	2002      	movs	r0, #2
10001616:	681a      	ldr	r2, [r3, #0]
10001618:	4011      	ands	r1, r2
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
1000161a:	2280      	movs	r2, #128	; 0x80
1000161c:	0152      	lsls	r2, r2, #5
1000161e:	432a      	orrs	r2, r5
10001620:	6011      	str	r1, [r2, #0]
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10001622:	6819      	ldr	r1, [r3, #0]
10001624:	4048      	eors	r0, r1
10001626:	2103      	movs	r1, #3
10001628:	4001      	ands	r1, r0
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
1000162a:	6011      	str	r1, [r2, #0]
        while (!(clock->selected & (1u << src)))
1000162c:	2104      	movs	r1, #4
1000162e:	689a      	ldr	r2, [r3, #8]
10001630:	4211      	tst	r1, r2
10001632:	d0fc      	beq.n	1000162e <clocks_init+0xd2>
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10001634:	2280      	movs	r2, #128	; 0x80
10001636:	2180      	movs	r1, #128	; 0x80
10001638:	0192      	lsls	r2, r2, #6
1000163a:	432a      	orrs	r2, r5
1000163c:	0109      	lsls	r1, r1, #4
1000163e:	6011      	str	r1, [r2, #0]
    clock->div = div;
10001640:	2280      	movs	r2, #128	; 0x80
10001642:	0052      	lsls	r2, r2, #1
10001644:	605a      	str	r2, [r3, #4]
    configured_freq[clk_index] = freq;
10001646:	4b72      	ldr	r3, [pc, #456]	; (10001810 <clocks_init+0x2b4>)
10001648:	6123      	str	r3, [r4, #16]
    if (div > clock->div)
1000164a:	4b72      	ldr	r3, [pc, #456]	; (10001814 <clocks_init+0x2b8>)
1000164c:	6859      	ldr	r1, [r3, #4]
1000164e:	29ff      	cmp	r1, #255	; 0xff
10001650:	d800      	bhi.n	10001654 <clocks_init+0xf8>
        clock->div = div;
10001652:	605a      	str	r2, [r3, #4]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10001654:	2103      	movs	r1, #3
10001656:	4a64      	ldr	r2, [pc, #400]	; (100017e8 <clocks_init+0x28c>)
10001658:	4b6e      	ldr	r3, [pc, #440]	; (10001814 <clocks_init+0x2b8>)
1000165a:	6011      	str	r1, [r2, #0]
        while (!(clock->selected & 1u))
1000165c:	3902      	subs	r1, #2
1000165e:	689a      	ldr	r2, [r3, #8]
10001660:	4211      	tst	r1, r2
10001662:	d0fc      	beq.n	1000165e <clocks_init+0x102>
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10001664:	20e0      	movs	r0, #224	; 0xe0
10001666:	681a      	ldr	r2, [r3, #0]
10001668:	4010      	ands	r0, r2
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
1000166a:	2280      	movs	r2, #128	; 0x80
1000166c:	0152      	lsls	r2, r2, #5
1000166e:	431a      	orrs	r2, r3
10001670:	6010      	str	r0, [r2, #0]
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10001672:	6818      	ldr	r0, [r3, #0]
10001674:	4048      	eors	r0, r1
10001676:	2103      	movs	r1, #3
10001678:	4001      	ands	r1, r0
        while (!(clock->selected & (1u << src)))
1000167a:	2002      	movs	r0, #2
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
1000167c:	6011      	str	r1, [r2, #0]
1000167e:	4965      	ldr	r1, [pc, #404]	; (10001814 <clocks_init+0x2b8>)
10001680:	688a      	ldr	r2, [r1, #8]
10001682:	4210      	tst	r0, r2
10001684:	d0fc      	beq.n	10001680 <clocks_init+0x124>
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10001686:	2280      	movs	r2, #128	; 0x80
10001688:	0192      	lsls	r2, r2, #6
1000168a:	4313      	orrs	r3, r2
1000168c:	2280      	movs	r2, #128	; 0x80
1000168e:	0112      	lsls	r2, r2, #4
10001690:	601a      	str	r2, [r3, #0]
    clock->div = div;
10001692:	2280      	movs	r2, #128	; 0x80
    configured_freq[clk_index] = freq;
10001694:	4b60      	ldr	r3, [pc, #384]	; (10001818 <clocks_init+0x2bc>)
    clock->div = div;
10001696:	0052      	lsls	r2, r2, #1
10001698:	604a      	str	r2, [r1, #4]
    configured_freq[clk_index] = freq;
1000169a:	6163      	str	r3, [r4, #20]
    if (div > clock->div)
1000169c:	4b5f      	ldr	r3, [pc, #380]	; (1000181c <clocks_init+0x2c0>)
1000169e:	6859      	ldr	r1, [r3, #4]
100016a0:	29ff      	cmp	r1, #255	; 0xff
100016a2:	d800      	bhi.n	100016a6 <clocks_init+0x14a>
        clock->div = div;
100016a4:	605a      	str	r2, [r3, #4]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
100016a6:	2280      	movs	r2, #128	; 0x80
100016a8:	4b5d      	ldr	r3, [pc, #372]	; (10001820 <clocks_init+0x2c4>)
        if (configured_freq[clk_index] > 0) {
100016aa:	69e1      	ldr	r1, [r4, #28]
100016ac:	0112      	lsls	r2, r2, #4
100016ae:	4d5b      	ldr	r5, [pc, #364]	; (1000181c <clocks_init+0x2c0>)
100016b0:	601a      	str	r2, [r3, #0]
100016b2:	2900      	cmp	r1, #0
100016b4:	d005      	beq.n	100016c2 <clocks_init+0x166>
            uint delay_cyc = configured_freq[clk_sys] / configured_freq[clk_index] + 1;
100016b6:	6960      	ldr	r0, [r4, #20]
100016b8:	f7fe fe5c 	bl	10000374 <__wrap___aeabi_uidiv>
100016bc:	3001      	adds	r0, #1
            asm volatile (
100016be:	3801      	subs	r0, #1
100016c0:	d1fd      	bne.n	100016be <clocks_init+0x162>
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
100016c2:	22e0      	movs	r2, #224	; 0xe0
100016c4:	4955      	ldr	r1, [pc, #340]	; (1000181c <clocks_init+0x2c0>)
100016c6:	680b      	ldr	r3, [r1, #0]
100016c8:	401a      	ands	r2, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
100016ca:	2380      	movs	r3, #128	; 0x80
100016cc:	015b      	lsls	r3, r3, #5
100016ce:	432b      	orrs	r3, r5
100016d0:	601a      	str	r2, [r3, #0]
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
100016d2:	2380      	movs	r3, #128	; 0x80
100016d4:	2280      	movs	r2, #128	; 0x80
100016d6:	019b      	lsls	r3, r3, #6
100016d8:	432b      	orrs	r3, r5
100016da:	0112      	lsls	r2, r2, #4
100016dc:	601a      	str	r2, [r3, #0]
    clock->div = div;
100016de:	2280      	movs	r2, #128	; 0x80
    configured_freq[clk_index] = freq;
100016e0:	4b3e      	ldr	r3, [pc, #248]	; (100017dc <clocks_init+0x280>)
    clock->div = div;
100016e2:	0052      	lsls	r2, r2, #1
100016e4:	604a      	str	r2, [r1, #4]
    configured_freq[clk_index] = freq;
100016e6:	61e3      	str	r3, [r4, #28]
    if (div > clock->div)
100016e8:	4b4e      	ldr	r3, [pc, #312]	; (10001824 <clocks_init+0x2c8>)
100016ea:	6859      	ldr	r1, [r3, #4]
100016ec:	29ff      	cmp	r1, #255	; 0xff
100016ee:	d800      	bhi.n	100016f2 <clocks_init+0x196>
        clock->div = div;
100016f0:	605a      	str	r2, [r3, #4]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
100016f2:	2280      	movs	r2, #128	; 0x80
100016f4:	4b4c      	ldr	r3, [pc, #304]	; (10001828 <clocks_init+0x2cc>)
        if (configured_freq[clk_index] > 0) {
100016f6:	6a21      	ldr	r1, [r4, #32]
100016f8:	0112      	lsls	r2, r2, #4
100016fa:	4d4a      	ldr	r5, [pc, #296]	; (10001824 <clocks_init+0x2c8>)
100016fc:	601a      	str	r2, [r3, #0]
100016fe:	2900      	cmp	r1, #0
10001700:	d005      	beq.n	1000170e <clocks_init+0x1b2>
            uint delay_cyc = configured_freq[clk_sys] / configured_freq[clk_index] + 1;
10001702:	6960      	ldr	r0, [r4, #20]
10001704:	f7fe fe36 	bl	10000374 <__wrap___aeabi_uidiv>
10001708:	3001      	adds	r0, #1
            asm volatile (
1000170a:	3801      	subs	r0, #1
1000170c:	d1fd      	bne.n	1000170a <clocks_init+0x1ae>
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
1000170e:	22e0      	movs	r2, #224	; 0xe0
10001710:	4944      	ldr	r1, [pc, #272]	; (10001824 <clocks_init+0x2c8>)
10001712:	680b      	ldr	r3, [r1, #0]
10001714:	401a      	ands	r2, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10001716:	2380      	movs	r3, #128	; 0x80
10001718:	015b      	lsls	r3, r3, #5
1000171a:	432b      	orrs	r3, r5
1000171c:	601a      	str	r2, [r3, #0]
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
1000171e:	2380      	movs	r3, #128	; 0x80
10001720:	2280      	movs	r2, #128	; 0x80
10001722:	019b      	lsls	r3, r3, #6
10001724:	432b      	orrs	r3, r5
10001726:	0112      	lsls	r2, r2, #4
10001728:	601a      	str	r2, [r3, #0]
    clock->div = div;
1000172a:	2380      	movs	r3, #128	; 0x80
    if (div > clock->div)
1000172c:	2280      	movs	r2, #128	; 0x80
    clock->div = div;
1000172e:	005b      	lsls	r3, r3, #1
10001730:	604b      	str	r3, [r1, #4]
    configured_freq[clk_index] = freq;
10001732:	4b2a      	ldr	r3, [pc, #168]	; (100017dc <clocks_init+0x280>)
    if (div > clock->div)
10001734:	02d2      	lsls	r2, r2, #11
    configured_freq[clk_index] = freq;
10001736:	6223      	str	r3, [r4, #32]
    if (div > clock->div)
10001738:	4b3c      	ldr	r3, [pc, #240]	; (1000182c <clocks_init+0x2d0>)
1000173a:	6859      	ldr	r1, [r3, #4]
1000173c:	4291      	cmp	r1, r2
1000173e:	d200      	bcs.n	10001742 <clocks_init+0x1e6>
        clock->div = div;
10001740:	605a      	str	r2, [r3, #4]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10001742:	2280      	movs	r2, #128	; 0x80
10001744:	4b3a      	ldr	r3, [pc, #232]	; (10001830 <clocks_init+0x2d4>)
        if (configured_freq[clk_index] > 0) {
10001746:	6a61      	ldr	r1, [r4, #36]	; 0x24
10001748:	0112      	lsls	r2, r2, #4
1000174a:	4d38      	ldr	r5, [pc, #224]	; (1000182c <clocks_init+0x2d0>)
1000174c:	601a      	str	r2, [r3, #0]
1000174e:	2900      	cmp	r1, #0
10001750:	d005      	beq.n	1000175e <clocks_init+0x202>
            uint delay_cyc = configured_freq[clk_sys] / configured_freq[clk_index] + 1;
10001752:	6960      	ldr	r0, [r4, #20]
10001754:	f7fe fe0e 	bl	10000374 <__wrap___aeabi_uidiv>
10001758:	3001      	adds	r0, #1
            asm volatile (
1000175a:	3801      	subs	r0, #1
1000175c:	d1fd      	bne.n	1000175a <clocks_init+0x1fe>
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
1000175e:	22e0      	movs	r2, #224	; 0xe0
10001760:	4932      	ldr	r1, [pc, #200]	; (1000182c <clocks_init+0x2d0>)
10001762:	680b      	ldr	r3, [r1, #0]
10001764:	401a      	ands	r2, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10001766:	2380      	movs	r3, #128	; 0x80
10001768:	015b      	lsls	r3, r3, #5
1000176a:	432b      	orrs	r3, r5
1000176c:	601a      	str	r2, [r3, #0]
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
1000176e:	2380      	movs	r3, #128	; 0x80
10001770:	2280      	movs	r2, #128	; 0x80
10001772:	019b      	lsls	r3, r3, #6
10001774:	432b      	orrs	r3, r5
10001776:	0112      	lsls	r2, r2, #4
10001778:	601a      	str	r2, [r3, #0]
    clock->div = div;
1000177a:	2380      	movs	r3, #128	; 0x80
1000177c:	02db      	lsls	r3, r3, #11
1000177e:	604b      	str	r3, [r1, #4]
    configured_freq[clk_index] = freq;
10001780:	4b17      	ldr	r3, [pc, #92]	; (100017e0 <clocks_init+0x284>)
10001782:	6263      	str	r3, [r4, #36]	; 0x24
    if (div > clock->div)
10001784:	4b2b      	ldr	r3, [pc, #172]	; (10001834 <clocks_init+0x2d8>)
10001786:	685a      	ldr	r2, [r3, #4]
10001788:	2aff      	cmp	r2, #255	; 0xff
1000178a:	d802      	bhi.n	10001792 <clocks_init+0x236>
        clock->div = div;
1000178c:	2280      	movs	r2, #128	; 0x80
1000178e:	0052      	lsls	r2, r2, #1
10001790:	605a      	str	r2, [r3, #4]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10001792:	2280      	movs	r2, #128	; 0x80
10001794:	4b28      	ldr	r3, [pc, #160]	; (10001838 <clocks_init+0x2dc>)
        if (configured_freq[clk_index] > 0) {
10001796:	69a1      	ldr	r1, [r4, #24]
10001798:	0112      	lsls	r2, r2, #4
1000179a:	4d26      	ldr	r5, [pc, #152]	; (10001834 <clocks_init+0x2d8>)
1000179c:	601a      	str	r2, [r3, #0]
1000179e:	2900      	cmp	r1, #0
100017a0:	d005      	beq.n	100017ae <clocks_init+0x252>
            uint delay_cyc = configured_freq[clk_sys] / configured_freq[clk_index] + 1;
100017a2:	6960      	ldr	r0, [r4, #20]
100017a4:	f7fe fde6 	bl	10000374 <__wrap___aeabi_uidiv>
100017a8:	3001      	adds	r0, #1
            asm volatile (
100017aa:	3801      	subs	r0, #1
100017ac:	d1fd      	bne.n	100017aa <clocks_init+0x24e>
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
100017ae:	22e0      	movs	r2, #224	; 0xe0
100017b0:	4920      	ldr	r1, [pc, #128]	; (10001834 <clocks_init+0x2d8>)
100017b2:	680b      	ldr	r3, [r1, #0]
100017b4:	401a      	ands	r2, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
100017b6:	2380      	movs	r3, #128	; 0x80
100017b8:	015b      	lsls	r3, r3, #5
100017ba:	432b      	orrs	r3, r5
100017bc:	601a      	str	r2, [r3, #0]
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
100017be:	2380      	movs	r3, #128	; 0x80
100017c0:	2280      	movs	r2, #128	; 0x80
100017c2:	019b      	lsls	r3, r3, #6
100017c4:	432b      	orrs	r3, r5
100017c6:	0112      	lsls	r2, r2, #4
100017c8:	601a      	str	r2, [r3, #0]
    clock->div = div;
100017ca:	2380      	movs	r3, #128	; 0x80
100017cc:	005b      	lsls	r3, r3, #1
100017ce:	604b      	str	r3, [r1, #4]
    configured_freq[clk_index] = freq;
100017d0:	4b11      	ldr	r3, [pc, #68]	; (10001818 <clocks_init+0x2bc>)
100017d2:	61a3      	str	r3, [r4, #24]
    return true;
100017d4:	e6d8      	b.n	10001588 <clocks_init+0x2c>
100017d6:	46c0      	nop			; (mov r8, r8)
100017d8:	20039494 	.word	0x20039494
100017dc:	02dc6c00 	.word	0x02dc6c00
100017e0:	0000b71b 	.word	0x0000b71b
100017e4:	40008000 	.word	0x40008000
100017e8:	4000b03c 	.word	0x4000b03c
100017ec:	4000b030 	.word	0x4000b030
100017f0:	4000e000 	.word	0x4000e000
100017f4:	4000f000 	.word	0x4000f000
100017f8:	4000c000 	.word	0x4000c000
100017fc:	59682f00 	.word	0x59682f00
10001800:	40028000 	.word	0x40028000
10001804:	1c9c3800 	.word	0x1c9c3800
10001808:	4002c000 	.word	0x4002c000
1000180c:	40008030 	.word	0x40008030
10001810:	00b71b00 	.word	0x00b71b00
10001814:	4000803c 	.word	0x4000803c
10001818:	07735940 	.word	0x07735940
1000181c:	40008054 	.word	0x40008054
10001820:	4000b054 	.word	0x4000b054
10001824:	40008060 	.word	0x40008060
10001828:	4000b060 	.word	0x4000b060
1000182c:	4000806c 	.word	0x4000806c
10001830:	4000b06c 	.word	0x4000b06c
10001834:	40008048 	.word	0x40008048
10001838:	4000b048 	.word	0x4000b048

1000183c <clock_get_hz>:

/// \tag::clock_get_hz[]
uint32_t clock_get_hz(enum clock_index clk_index) {
    return configured_freq[clk_index];
1000183c:	4b01      	ldr	r3, [pc, #4]	; (10001844 <clock_get_hz+0x8>)
1000183e:	0080      	lsls	r0, r0, #2
10001840:	58c0      	ldr	r0, [r0, r3]
}
10001842:	4770      	bx	lr
10001844:	20039494 	.word	0x20039494

10001848 <critical_section_init>:

#if !PICO_NO_HARDWARE
static_assert(sizeof(critical_section_t) == 8, "");
#endif

void critical_section_init(critical_section_t *critsec) {
10001848:	b510      	push	{r4, lr}
1000184a:	0004      	movs	r4, r0
    critical_section_init_with_lock_num(critsec, spin_lock_claim_unused(true));
1000184c:	2001      	movs	r0, #1
1000184e:	f002 fd9f 	bl	10004390 <spin_lock_claim_unused>
10001852:	0001      	movs	r1, r0
}

void critical_section_init_with_lock_num(critical_section_t *critsec, uint lock_num) {
    lock_init(&critsec->core, lock_num);
10001854:	0020      	movs	r0, r4
10001856:	f000 faaf 	bl	10001db8 <lock_init>
    __asm volatile ("dmb");
1000185a:	f3bf 8f5f 	dmb	sy
}
1000185e:	bd10      	pop	{r4, pc}

10001860 <__aeabi_double_init>:

bool running_on_fpga();
uint8_t rp2040_chip_version();

static inline uint8_t rp2040_rom_version() {
    return *(uint8_t*)0x13;
10001860:	2313      	movs	r3, #19
    panic("missing double function");
}
#endif
extern void double_table_shim_on_use_helper();

void __aeabi_double_init() {
10001862:	b570      	push	{r4, r5, r6, lr}
    int rom_version = rp2040_rom_version();
10001864:	781d      	ldrb	r5, [r3, #0]
#if PICO_DOUBLE_SUPPORT_ROM_V1
    if (rom_version == 1) {
10001866:	2d01      	cmp	r5, #1
10001868:	d010      	beq.n	1000188c <__aeabi_double_init+0x2c>
        for(uint i=0;i<SF_TABLE_V2_SIZE/4;i++) {
            sd_table[i] = (uintptr_t)missing_double_func_shim;
        }
    }
#endif
    if (rom_version >= 2) {
1000186a:	dd0b      	ble.n	10001884 <__aeabi_double_init+0x24>
        void *rom_table = rom_data_lookup(rom_table_code('S', 'D'));
1000186c:	4819      	ldr	r0, [pc, #100]	; (100018d4 <__aeabi_double_init+0x74>)
1000186e:	f7ff fd43 	bl	100012f8 <rom_data_lookup>
        assert(*((uint8_t *)(((void *)rom_data_lookup(rom_table_code('S', 'F')))-2)) * 4 >= SF_TABLE_V2_SIZE);
        memcpy(&sd_table, rom_table, SF_TABLE_V2_SIZE);
10001872:	4c19      	ldr	r4, [pc, #100]	; (100018d8 <__aeabi_double_init+0x78>)
        void *rom_table = rom_data_lookup(rom_table_code('S', 'D'));
10001874:	0001      	movs	r1, r0
        memcpy(&sd_table, rom_table, SF_TABLE_V2_SIZE);
10001876:	2280      	movs	r2, #128	; 0x80
10001878:	0020      	movs	r0, r4
1000187a:	f7ff fd15 	bl	100012a8 <__wrap___aeabi_memcpy>
                panic(NULL);
            }
#endif
        }
    }
    if (rom_version < 3) {
1000187e:	2d02      	cmp	r5, #2
10001880:	d001      	beq.n	10001886 <__aeabi_double_init+0x26>
        // we use the unused entry for SINCOS
        sd_table[SF_TABLE_V3_FSINCOS / 4] = (uintptr_t) double_table_shim_on_use_helper;
    }
}
10001882:	bd70      	pop	{r4, r5, r6, pc}
10001884:	4c14      	ldr	r4, [pc, #80]	; (100018d8 <__aeabi_double_init+0x78>)
        sd_table[SF_TABLE_V3_FSINCOS / 4] = (uintptr_t) double_table_shim_on_use_helper;
10001886:	4b15      	ldr	r3, [pc, #84]	; (100018dc <__aeabi_double_init+0x7c>)
10001888:	64a3      	str	r3, [r4, #72]	; 0x48
}
1000188a:	e7fa      	b.n	10001882 <__aeabi_double_init+0x22>
        sd_table[SF_TABLE_V3_FSINCOS / 4] = (uintptr_t) double_table_shim_on_use_helper;
1000188c:	4b13      	ldr	r3, [pc, #76]	; (100018dc <__aeabi_double_init+0x7c>)
            sd_table[i] = (uintptr_t)double_table_shim_on_use_helper;
1000188e:	4c12      	ldr	r4, [pc, #72]	; (100018d8 <__aeabi_double_init+0x78>)
10001890:	6023      	str	r3, [r4, #0]
10001892:	6063      	str	r3, [r4, #4]
10001894:	60a3      	str	r3, [r4, #8]
10001896:	60e3      	str	r3, [r4, #12]
10001898:	6123      	str	r3, [r4, #16]
1000189a:	6163      	str	r3, [r4, #20]
1000189c:	61a3      	str	r3, [r4, #24]
1000189e:	61e3      	str	r3, [r4, #28]
100018a0:	6223      	str	r3, [r4, #32]
100018a2:	6263      	str	r3, [r4, #36]	; 0x24
100018a4:	62a3      	str	r3, [r4, #40]	; 0x28
100018a6:	62e3      	str	r3, [r4, #44]	; 0x2c
100018a8:	6323      	str	r3, [r4, #48]	; 0x30
100018aa:	6363      	str	r3, [r4, #52]	; 0x34
100018ac:	63a3      	str	r3, [r4, #56]	; 0x38
100018ae:	63e3      	str	r3, [r4, #60]	; 0x3c
100018b0:	6423      	str	r3, [r4, #64]	; 0x40
100018b2:	6463      	str	r3, [r4, #68]	; 0x44
100018b4:	64a3      	str	r3, [r4, #72]	; 0x48
100018b6:	64e3      	str	r3, [r4, #76]	; 0x4c
100018b8:	6523      	str	r3, [r4, #80]	; 0x50
100018ba:	6563      	str	r3, [r4, #84]	; 0x54
100018bc:	65a3      	str	r3, [r4, #88]	; 0x58
100018be:	65e3      	str	r3, [r4, #92]	; 0x5c
100018c0:	6623      	str	r3, [r4, #96]	; 0x60
100018c2:	6663      	str	r3, [r4, #100]	; 0x64
100018c4:	66a3      	str	r3, [r4, #104]	; 0x68
100018c6:	66e3      	str	r3, [r4, #108]	; 0x6c
100018c8:	6723      	str	r3, [r4, #112]	; 0x70
100018ca:	6763      	str	r3, [r4, #116]	; 0x74
100018cc:	67a3      	str	r3, [r4, #120]	; 0x78
100018ce:	67e3      	str	r3, [r4, #124]	; 0x7c
        sd_table[SF_TABLE_V3_FSINCOS / 4] = (uintptr_t) double_table_shim_on_use_helper;
100018d0:	64a3      	str	r3, [r4, #72]	; 0x48
100018d2:	e7d6      	b.n	10001882 <__aeabi_double_init+0x22>
100018d4:	00004453 	.word	0x00004453
100018d8:	20002aa0 	.word	0x20002aa0
100018dc:	10000a05 	.word	0x10000a05

100018e0 <flash_get_unique_id>:
// Use standard RUID command to get a unique identifier for the flash (and
// hence the board)

static_assert(FLASH_UNIQUE_ID_SIZE_BYTES == FLASH_RUID_DATA_BYTES, "");

void flash_get_unique_id(uint8_t *id_out) {
100018e0:	b530      	push	{r4, r5, lr}
#if PICO_NO_FLASH
    panic_unsupported();
#else
    uint8_t txbuf[FLASH_RUID_TOTAL_BYTES] = {0};
100018e2:	2500      	movs	r5, #0
void flash_get_unique_id(uint8_t *id_out) {
100018e4:	b089      	sub	sp, #36	; 0x24
100018e6:	0004      	movs	r4, r0
    uint8_t txbuf[FLASH_RUID_TOTAL_BYTES] = {0};
100018e8:	2209      	movs	r2, #9
100018ea:	2100      	movs	r1, #0
100018ec:	a801      	add	r0, sp, #4
100018ee:	9500      	str	r5, [sp, #0]
100018f0:	f7ff fcd4 	bl	1000129c <__wrap_memset>
    uint8_t rxbuf[FLASH_RUID_TOTAL_BYTES] = {0};
100018f4:	2209      	movs	r2, #9
100018f6:	2100      	movs	r1, #0
100018f8:	a805      	add	r0, sp, #20
100018fa:	9504      	str	r5, [sp, #16]
100018fc:	f7ff fcce 	bl	1000129c <__wrap_memset>
    txbuf[0] = FLASH_RUID_CMD;
10001900:	234b      	movs	r3, #75	; 0x4b
10001902:	466a      	mov	r2, sp
    flash_do_cmd(txbuf, rxbuf, FLASH_RUID_TOTAL_BYTES);
10001904:	4668      	mov	r0, sp
    txbuf[0] = FLASH_RUID_CMD;
10001906:	7013      	strb	r3, [r2, #0]
    flash_do_cmd(txbuf, rxbuf, FLASH_RUID_TOTAL_BYTES);
10001908:	a904      	add	r1, sp, #16
1000190a:	f007 ff21 	bl	10009750 <__flash_do_cmd.constprop.0_veneer>
    for (int i = 0; i < FLASH_RUID_DATA_BYTES; i++)
        id_out[i] = rxbuf[i + 1 + FLASH_RUID_DUMMY_BYTES];
1000190e:	2115      	movs	r1, #21
10001910:	2208      	movs	r2, #8
10001912:	0020      	movs	r0, r4
10001914:	4469      	add	r1, sp
10001916:	f7ff fcc7 	bl	100012a8 <__wrap___aeabi_memcpy>
#endif
}
1000191a:	b009      	add	sp, #36	; 0x24
1000191c:	bd30      	pop	{r4, r5, pc}
1000191e:	46c0      	nop			; (mov r8, r8)

10001920 <__aeabi_float_init>:
10001920:	2313      	movs	r3, #19
static __attribute__((noreturn)) void missing_float_func_shim() {
    panic("");
}
#endif

void __aeabi_float_init() {
10001922:	b510      	push	{r4, lr}
    int rom_version = rp2040_rom_version();
    void *rom_table = rom_data_lookup(rom_table_code('S', 'F'));
10001924:	4812      	ldr	r0, [pc, #72]	; (10001970 <__aeabi_float_init+0x50>)
    int rom_version = rp2040_rom_version();
10001926:	781c      	ldrb	r4, [r3, #0]
    void *rom_table = rom_data_lookup(rom_table_code('S', 'F'));
10001928:	f7ff fce6 	bl	100012f8 <rom_data_lookup>
1000192c:	0001      	movs	r1, r0
#if PICO_FLOAT_SUPPORT_ROM_V1
    if (rom_version == 1) {
1000192e:	2c01      	cmp	r4, #1
10001930:	d00a      	beq.n	10001948 <__aeabi_float_init+0x28>
        for(uint i=0;i<SF_TABLE_V2_SIZE/4;i++) {
            if (!sf_table[i]) sf_table[i] = (uintptr_t)missing_float_func_shim;
        }
    }
#endif
    if (rom_version >= 2) {
10001932:	dd03      	ble.n	1000193c <__aeabi_float_init+0x1c>
        assert(*((uint8_t *)(rom_table-2)) * 4 >= SF_TABLE_V2_SIZE);
        memcpy(&sf_table, rom_table, SF_TABLE_V2_SIZE);
10001934:	2280      	movs	r2, #128	; 0x80
10001936:	480f      	ldr	r0, [pc, #60]	; (10001974 <__aeabi_float_init+0x54>)
10001938:	f7ff fcb6 	bl	100012a8 <__wrap___aeabi_memcpy>
    }
    sf_clz_func = rom_func_lookup(rom_table_code('L', '3'));
1000193c:	480e      	ldr	r0, [pc, #56]	; (10001978 <__aeabi_float_init+0x58>)
1000193e:	f7ff fcd3 	bl	100012e8 <rom_func_lookup>
10001942:	4b0e      	ldr	r3, [pc, #56]	; (1000197c <__aeabi_float_init+0x5c>)
10001944:	6018      	str	r0, [r3, #0]
}
10001946:	bd10      	pop	{r4, pc}
        memcpy(&sf_table, rom_table, SF_TABLE_V1_SIZE);
10001948:	4c0a      	ldr	r4, [pc, #40]	; (10001974 <__aeabi_float_init+0x54>)
1000194a:	2254      	movs	r2, #84	; 0x54
1000194c:	0020      	movs	r0, r4
1000194e:	f7ff fcab 	bl	100012a8 <__wrap___aeabi_memcpy>
            sf_table[i] = (uintptr_t)float_table_shim_on_use_helper;
10001952:	4b0b      	ldr	r3, [pc, #44]	; (10001980 <__aeabi_float_init+0x60>)
10001954:	6563      	str	r3, [r4, #84]	; 0x54
10001956:	65a3      	str	r3, [r4, #88]	; 0x58
10001958:	65e3      	str	r3, [r4, #92]	; 0x5c
1000195a:	6623      	str	r3, [r4, #96]	; 0x60
1000195c:	6663      	str	r3, [r4, #100]	; 0x64
1000195e:	66a3      	str	r3, [r4, #104]	; 0x68
10001960:	66e3      	str	r3, [r4, #108]	; 0x6c
10001962:	6723      	str	r3, [r4, #112]	; 0x70
10001964:	6763      	str	r3, [r4, #116]	; 0x74
10001966:	67a3      	str	r3, [r4, #120]	; 0x78
10001968:	67e3      	str	r3, [r4, #124]	; 0x7c
        sf_table[SF_TABLE_FLOAT2INT/4] = sf_table[SF_TABLE_FLOAT2FIX/4] = (uintptr_t)float_table_shim_on_use_helper;
1000196a:	6223      	str	r3, [r4, #32]
1000196c:	61e3      	str	r3, [r4, #28]
    if (rom_version >= 2) {
1000196e:	e7e5      	b.n	1000193c <__aeabi_float_init+0x1c>
10001970:	00004653 	.word	0x00004653
10001974:	20002ba0 	.word	0x20002ba0
10001978:	0000334c 	.word	0x0000334c
1000197c:	20039b98 	.word	0x20039b98
10001980:	10001219 	.word	0x10001219

10001984 <gpio_set_function>:
// This also clears the input/output/irq override bits.
void gpio_set_function(uint gpio, enum gpio_function fn) {
    invalid_params_if(GPIO, gpio >= NUM_BANK0_GPIOS);
    invalid_params_if(GPIO, fn << IO_BANK0_GPIO0_CTRL_FUNCSEL_LSB & ~IO_BANK0_GPIO0_CTRL_FUNCSEL_BITS);
    // Set input enable on, output disable off
    hw_write_masked(&padsbank0_hw->io[gpio],
10001984:	4a09      	ldr	r2, [pc, #36]	; (100019ac <gpio_set_function+0x28>)
10001986:	0083      	lsls	r3, r0, #2
10001988:	4694      	mov	ip, r2
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
1000198a:	2240      	movs	r2, #64	; 0x40
1000198c:	4463      	add	r3, ip
void gpio_set_function(uint gpio, enum gpio_function fn) {
1000198e:	b510      	push	{r4, lr}
10001990:	681c      	ldr	r4, [r3, #0]
                   PADS_BANK0_GPIO0_IE_BITS,
                   PADS_BANK0_GPIO0_IE_BITS | PADS_BANK0_GPIO0_OD_BITS
    );
    // Zero all fields apart from fsel; we want this IO to do what the peripheral tells it.
    // This doesn't affect e.g. pullup/pulldown, as these are in pad controls.
    iobank0_hw->io[gpio].ctrl = fn << IO_BANK0_GPIO0_CTRL_FUNCSEL_LSB;
10001992:	00c0      	lsls	r0, r0, #3
10001994:	4062      	eors	r2, r4
10001996:	24c0      	movs	r4, #192	; 0xc0
10001998:	4014      	ands	r4, r2
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
1000199a:	2280      	movs	r2, #128	; 0x80
1000199c:	0152      	lsls	r2, r2, #5
1000199e:	4313      	orrs	r3, r2
100019a0:	601c      	str	r4, [r3, #0]
100019a2:	4b03      	ldr	r3, [pc, #12]	; (100019b0 <gpio_set_function+0x2c>)
100019a4:	469c      	mov	ip, r3
100019a6:	4460      	add	r0, ip
100019a8:	6041      	str	r1, [r0, #4]
}
100019aa:	bd10      	pop	{r4, pc}
100019ac:	4001c004 	.word	0x4001c004
100019b0:	40014000 	.word	0x40014000

100019b4 <gpio_set_pulls>:

// Note that, on RP2040, setting both pulls enables a "bus keep" function,
// i.e. weak pull to whatever is current high/low state of GPIO.
void gpio_set_pulls(uint gpio, bool up, bool down) {
    invalid_params_if(GPIO, gpio >= NUM_BANK0_GPIOS);
    hw_write_masked(
100019b4:	4b0a      	ldr	r3, [pc, #40]	; (100019e0 <gpio_set_pulls+0x2c>)
100019b6:	0080      	lsls	r0, r0, #2
100019b8:	469c      	mov	ip, r3
            &padsbank0_hw->io[gpio],
            (!!up << PADS_BANK0_GPIO0_PUE_LSB) | (!!down << PADS_BANK0_GPIO0_PDE_LSB),
100019ba:	2304      	movs	r3, #4
    hw_write_masked(
100019bc:	4460      	add	r0, ip
            (!!up << PADS_BANK0_GPIO0_PUE_LSB) | (!!down << PADS_BANK0_GPIO0_PDE_LSB),
100019be:	2900      	cmp	r1, #0
100019c0:	d001      	beq.n	100019c6 <gpio_set_pulls+0x12>
100019c2:	2108      	movs	r1, #8
100019c4:	230c      	movs	r3, #12
100019c6:	2a00      	cmp	r2, #0
100019c8:	d100      	bne.n	100019cc <gpio_set_pulls+0x18>
100019ca:	000b      	movs	r3, r1
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
100019cc:	6802      	ldr	r2, [r0, #0]
100019ce:	4053      	eors	r3, r2
100019d0:	220c      	movs	r2, #12
100019d2:	401a      	ands	r2, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
100019d4:	2380      	movs	r3, #128	; 0x80
100019d6:	015b      	lsls	r3, r3, #5
100019d8:	4318      	orrs	r0, r3
100019da:	6002      	str	r2, [r0, #0]
            PADS_BANK0_GPIO0_PUE_BITS | PADS_BANK0_GPIO0_PDE_BITS
    );
}
100019dc:	4770      	bx	lr
100019de:	46c0      	nop			; (mov r8, r8)
100019e0:	4001c004 	.word	0x4001c004

100019e4 <gpio_set_outover>:
    );
}

void gpio_set_outover(uint gpio, uint value) {
    invalid_params_if(GPIO, gpio >= NUM_BANK0_GPIOS);
    hw_write_masked(&iobank0_hw->io[gpio].ctrl,
100019e4:	4b07      	ldr	r3, [pc, #28]	; (10001a04 <gpio_set_outover+0x20>)
100019e6:	00c0      	lsls	r0, r0, #3
100019e8:	469c      	mov	ip, r3
100019ea:	4460      	add	r0, ip
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
100019ec:	6803      	ldr	r3, [r0, #0]
                   value << IO_BANK0_GPIO0_CTRL_OUTOVER_LSB,
100019ee:	0209      	lsls	r1, r1, #8
100019f0:	4059      	eors	r1, r3
100019f2:	23c0      	movs	r3, #192	; 0xc0
100019f4:	009b      	lsls	r3, r3, #2
100019f6:	4019      	ands	r1, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
100019f8:	2380      	movs	r3, #128	; 0x80
100019fa:	015b      	lsls	r3, r3, #5
100019fc:	4318      	orrs	r0, r3
100019fe:	6001      	str	r1, [r0, #0]
                   IO_BANK0_GPIO0_CTRL_OUTOVER_BITS
    );
}
10001a00:	4770      	bx	lr
10001a02:	46c0      	nop			; (mov r8, r8)
10001a04:	40014004 	.word	0x40014004

10001a08 <gpio_init>:
    else
        hw_clear_bits(&padsbank0_hw->io[gpio], PADS_BANK0_GPIO0_IE_BITS);
}

void gpio_init(uint gpio) {
    sio_hw->gpio_oe_clr = 1ul << gpio;
10001a08:	2301      	movs	r3, #1
10001a0a:	22d0      	movs	r2, #208	; 0xd0
10001a0c:	4083      	lsls	r3, r0
10001a0e:	0612      	lsls	r2, r2, #24
10001a10:	6293      	str	r3, [r2, #40]	; 0x28
    sio_hw->gpio_clr = 1ul << gpio;
10001a12:	6193      	str	r3, [r2, #24]
    hw_write_masked(&padsbank0_hw->io[gpio],
10001a14:	4a09      	ldr	r2, [pc, #36]	; (10001a3c <gpio_init+0x34>)
10001a16:	0083      	lsls	r3, r0, #2
10001a18:	4694      	mov	ip, r2
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10001a1a:	2240      	movs	r2, #64	; 0x40
10001a1c:	4463      	add	r3, ip
10001a1e:	6819      	ldr	r1, [r3, #0]
    iobank0_hw->io[gpio].ctrl = fn << IO_BANK0_GPIO0_CTRL_FUNCSEL_LSB;
10001a20:	00c0      	lsls	r0, r0, #3
10001a22:	404a      	eors	r2, r1
10001a24:	21c0      	movs	r1, #192	; 0xc0
10001a26:	4011      	ands	r1, r2
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10001a28:	2280      	movs	r2, #128	; 0x80
10001a2a:	0152      	lsls	r2, r2, #5
10001a2c:	4313      	orrs	r3, r2
10001a2e:	6019      	str	r1, [r3, #0]
10001a30:	4b03      	ldr	r3, [pc, #12]	; (10001a40 <gpio_init+0x38>)
10001a32:	469c      	mov	ip, r3
10001a34:	2305      	movs	r3, #5
10001a36:	4460      	add	r0, ip
10001a38:	6043      	str	r3, [r0, #4]
    gpio_set_function(gpio, GPIO_FUNC_SIO);
}
10001a3a:	4770      	bx	lr
10001a3c:	4001c004 	.word	0x4001c004
10001a40:	40014000 	.word	0x40014000

10001a44 <irq_set_enabled>:
    invalid_params_if(IRQ, num >= NUM_IRQS);
}

void irq_set_enabled(uint num, bool enabled) {
    check_irq_param(num);
    irq_set_mask_enabled(1u << num, enabled);
10001a44:	2301      	movs	r3, #1
10001a46:	4083      	lsls	r3, r0
    check_irq_param(num);
    return 0 != ((1u << num) & *((io_rw_32 *) (PPB_BASE + M0PLUS_NVIC_ISER_OFFSET)));
}

void irq_set_mask_enabled(uint32_t mask, bool enabled) {
    if (enabled) {
10001a48:	2900      	cmp	r1, #0
10001a4a:	d004      	beq.n	10001a56 <irq_set_enabled+0x12>
        // Clear pending before enable
        // (if IRQ is actually asserted, it will immediately re-pend)
        *((io_rw_32 *) (PPB_BASE + M0PLUS_NVIC_ICPR_OFFSET)) = mask;
10001a4c:	4a03      	ldr	r2, [pc, #12]	; (10001a5c <irq_set_enabled+0x18>)
10001a4e:	6013      	str	r3, [r2, #0]
        *((io_rw_32 *) (PPB_BASE + M0PLUS_NVIC_ISER_OFFSET)) = mask;
10001a50:	4a03      	ldr	r2, [pc, #12]	; (10001a60 <irq_set_enabled+0x1c>)
10001a52:	6013      	str	r3, [r2, #0]
}
10001a54:	4770      	bx	lr
    } else {
        *((io_rw_32 *) (PPB_BASE + M0PLUS_NVIC_ICER_OFFSET)) = mask;
10001a56:	4a03      	ldr	r2, [pc, #12]	; (10001a64 <irq_set_enabled+0x20>)
10001a58:	6013      	str	r3, [r2, #0]
}
10001a5a:	e7fb      	b.n	10001a54 <irq_set_enabled+0x10>
10001a5c:	e000e280 	.word	0xe000e280
10001a60:	e000e100 	.word	0xe000e100
10001a64:	e000e180 	.word	0xe000e180

10001a68 <irq_set_pending>:
    }
}

void irq_set_pending(uint num) {
    check_irq_param(num);
    *((io_rw_32 *) (PPB_BASE + M0PLUS_NVIC_ISPR_OFFSET)) = 1u << num;
10001a68:	2301      	movs	r3, #1
10001a6a:	4083      	lsls	r3, r0
10001a6c:	4a01      	ldr	r2, [pc, #4]	; (10001a74 <irq_set_pending+0xc>)
10001a6e:	6013      	str	r3, [r2, #0]
}
10001a70:	4770      	bx	lr
10001a72:	46c0      	nop			; (mov r8, r8)
10001a74:	e000e200 	.word	0xe000e200

10001a78 <irq_get_vtable_handler>:
    return (irq_handler_t *) scb_hw->vtor;
10001a78:	4b02      	ldr	r3, [pc, #8]	; (10001a84 <irq_get_vtable_handler+0xc>)
    return (uintptr_t)raw_handler - (uintptr_t)irq_handler_chain_slots < sizeof(irq_handler_chain_slots);
}

irq_handler_t irq_get_vtable_handler(uint num) {
    check_irq_param(num);
    return get_vtable()[16 + num];
10001a7a:	3010      	adds	r0, #16
    return (irq_handler_t *) scb_hw->vtor;
10001a7c:	689b      	ldr	r3, [r3, #8]
    return get_vtable()[16 + num];
10001a7e:	0080      	lsls	r0, r0, #2
10001a80:	58c0      	ldr	r0, [r0, r3]
}
10001a82:	4770      	bx	lr
10001a84:	e000ed00 	.word	0xe000ed00

10001a88 <irq_set_exclusive_handler>:

void irq_set_exclusive_handler(uint num, irq_handler_t handler) {
10001a88:	b570      	push	{r4, r5, r6, lr}
10001a8a:	000d      	movs	r5, r1
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
10001a8c:	f3ef 8610 	mrs	r6, PRIMASK
    __asm volatile ("cpsid i");
10001a90:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
10001a92:	4a0f      	ldr	r2, [pc, #60]	; (10001ad0 <irq_set_exclusive_handler+0x48>)
10001a94:	6813      	ldr	r3, [r2, #0]
10001a96:	2b00      	cmp	r3, #0
10001a98:	d0fc      	beq.n	10001a94 <irq_set_exclusive_handler+0xc>
    __asm volatile ("dmb");
10001a9a:	f3bf 8f5f 	dmb	sy
    return (irq_handler_t *) scb_hw->vtor;
10001a9e:	4b0d      	ldr	r3, [pc, #52]	; (10001ad4 <irq_set_exclusive_handler+0x4c>)
    return get_vtable()[16 + num];
10001aa0:	3010      	adds	r0, #16
    return (irq_handler_t *) scb_hw->vtor;
10001aa2:	689b      	ldr	r3, [r3, #8]
    return get_vtable()[16 + num];
10001aa4:	0084      	lsls	r4, r0, #2
10001aa6:	591b      	ldr	r3, [r3, r4]
    check_irq_param(num);
#if !PICO_NO_RAM_VECTOR_TABLE
    spin_lock_t *lock = spin_lock_instance(PICO_SPINLOCK_ID_IRQ);
    uint32_t save = spin_lock_blocking(lock);
    __unused irq_handler_t current = irq_get_vtable_handler(num);
    hard_assert(current == __unhandled_user_irq || current == handler);
10001aa8:	4a0b      	ldr	r2, [pc, #44]	; (10001ad8 <irq_set_exclusive_handler+0x50>)
10001aaa:	4293      	cmp	r3, r2
10001aac:	d003      	beq.n	10001ab6 <irq_set_exclusive_handler+0x2e>
10001aae:	429d      	cmp	r5, r3
10001ab0:	d001      	beq.n	10001ab6 <irq_set_exclusive_handler+0x2e>

#ifdef NDEBUG
extern void hard_assertion_failure();
static inline void hard_assert(bool condition, ...) {
    if (!condition)
        hard_assertion_failure();
10001ab2:	f002 f897 	bl	10003be4 <hard_assertion_failure>
    return (irq_handler_t *) scb_hw->vtor;
10001ab6:	4b07      	ldr	r3, [pc, #28]	; (10001ad4 <irq_set_exclusive_handler+0x4c>)
10001ab8:	689b      	ldr	r3, [r3, #8]
    get_vtable()[16 + num] = handler;
10001aba:	511d      	str	r5, [r3, r4]
10001abc:	f3bf 8f5f 	dmb	sy
10001ac0:	f3bf 8f5f 	dmb	sy
    *lock = 0;
10001ac4:	2200      	movs	r2, #0
10001ac6:	4b02      	ldr	r3, [pc, #8]	; (10001ad0 <irq_set_exclusive_handler+0x48>)
10001ac8:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10001aca:	f386 8810 	msr	PRIMASK, r6
    set_raw_irq_handler_and_unlock(num, handler, save);
#else
    panic_unsupported();
#endif
}
10001ace:	bd70      	pop	{r4, r5, r6, pc}
10001ad0:	d0000124 	.word	0xd0000124
10001ad4:	e000ed00 	.word	0xe000ed00
10001ad8:	100001cd 	.word	0x100001cd

10001adc <irq_remove_handler>:
    }
    set_raw_irq_handler_and_unlock(num, vtable_handler, save);
#endif
}

void irq_remove_handler(uint num, irq_handler_t handler) {
10001adc:	b5f0      	push	{r4, r5, r6, r7, lr}
10001ade:	46de      	mov	lr, fp
10001ae0:	4657      	mov	r7, sl
10001ae2:	464e      	mov	r6, r9
10001ae4:	4645      	mov	r5, r8
10001ae6:	b5e0      	push	{r5, r6, r7, lr}
10001ae8:	000c      	movs	r4, r1
10001aea:	b083      	sub	sp, #12
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
10001aec:	f3ef 8a10 	mrs	sl, PRIMASK
    __asm volatile ("cpsid i");
10001af0:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
10001af2:	4a5e      	ldr	r2, [pc, #376]	; (10001c6c <irq_remove_handler+0x190>)
10001af4:	6813      	ldr	r3, [r2, #0]
10001af6:	2b00      	cmp	r3, #0
10001af8:	d0fc      	beq.n	10001af4 <irq_remove_handler+0x18>
    __asm volatile ("dmb");
10001afa:	f3bf 8f5f 	dmb	sy
#if !PICO_NO_RAM_VECTOR_TABLE
    spin_lock_t *lock = spin_lock_instance(PICO_SPINLOCK_ID_IRQ);
    uint32_t save = spin_lock_blocking(lock);
    irq_handler_t vtable_handler = get_vtable()[16 + num];
10001afe:	2210      	movs	r2, #16
10001b00:	4691      	mov	r9, r2
10001b02:	4481      	add	r9, r0
10001b04:	464a      	mov	r2, r9
    return (irq_handler_t *) scb_hw->vtor;
10001b06:	4b5a      	ldr	r3, [pc, #360]	; (10001c70 <irq_remove_handler+0x194>)
    irq_handler_t vtable_handler = get_vtable()[16 + num];
10001b08:	0096      	lsls	r6, r2, #2
    return (irq_handler_t *) scb_hw->vtor;
10001b0a:	689b      	ldr	r3, [r3, #8]
    irq_handler_t vtable_handler = get_vtable()[16 + num];
10001b0c:	599d      	ldr	r5, [r3, r6]
    if (vtable_handler != __unhandled_user_irq && vtable_handler != handler) {
10001b0e:	4b59      	ldr	r3, [pc, #356]	; (10001c74 <irq_remove_handler+0x198>)
10001b10:	4698      	mov	r8, r3
10001b12:	429d      	cmp	r5, r3
10001b14:	d005      	beq.n	10001b22 <irq_remove_handler+0x46>
10001b16:	42a5      	cmp	r5, r4
10001b18:	d016      	beq.n	10001b48 <irq_remove_handler+0x6c>
    return (uintptr_t)raw_handler - (uintptr_t)irq_handler_chain_slots < sizeof(irq_handler_chain_slots);
10001b1a:	4f57      	ldr	r7, [pc, #348]	; (10001c78 <irq_remove_handler+0x19c>)
10001b1c:	1beb      	subs	r3, r5, r7
#if !PICO_DISABLE_SHARED_IRQ_HANDLERS && PICO_MAX_SHARED_IRQ_HANDLERS
        if (is_shared_irq_raw_handler(vtable_handler)) {
10001b1e:	2b2f      	cmp	r3, #47	; 0x2f
10001b20:	d914      	bls.n	10001b4c <irq_remove_handler+0x70>
    return (irq_handler_t *) scb_hw->vtor;
10001b22:	4b53      	ldr	r3, [pc, #332]	; (10001c70 <irq_remove_handler+0x194>)
10001b24:	689b      	ldr	r3, [r3, #8]
    get_vtable()[16 + num] = handler;
10001b26:	519d      	str	r5, [r3, r6]
10001b28:	f3bf 8f5f 	dmb	sy
10001b2c:	f3bf 8f5f 	dmb	sy
    *lock = 0;
10001b30:	2200      	movs	r2, #0
10001b32:	4b4e      	ldr	r3, [pc, #312]	; (10001c6c <irq_remove_handler+0x190>)
10001b34:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10001b36:	f38a 8810 	msr	PRIMASK, sl
    }
    set_raw_irq_handler_and_unlock(num, vtable_handler, save);
#else
    panic_unsupported();
#endif
}
10001b3a:	b003      	add	sp, #12
10001b3c:	bcf0      	pop	{r4, r5, r6, r7}
10001b3e:	46bb      	mov	fp, r7
10001b40:	46b2      	mov	sl, r6
10001b42:	46a9      	mov	r9, r5
10001b44:	46a0      	mov	r8, r4
10001b46:	bdf0      	pop	{r4, r5, r6, r7, pc}
        vtable_handler = __unhandled_user_irq;
10001b48:	001d      	movs	r5, r3
10001b4a:	e7ea      	b.n	10001b22 <irq_remove_handler+0x46>
    return 0 != ((1u << num) & *((io_rw_32 *) (PPB_BASE + M0PLUS_NVIC_ISER_OFFSET)));
10001b4c:	2301      	movs	r3, #1
10001b4e:	4083      	lsls	r3, r0
10001b50:	469b      	mov	fp, r3
10001b52:	465a      	mov	r2, fp
10001b54:	4b49      	ldr	r3, [pc, #292]	; (10001c7c <irq_remove_handler+0x1a0>)
10001b56:	681b      	ldr	r3, [r3, #0]
10001b58:	401a      	ands	r2, r3
10001b5a:	9200      	str	r2, [sp, #0]
        *((io_rw_32 *) (PPB_BASE + M0PLUS_NVIC_ICER_OFFSET)) = mask;
10001b5c:	465a      	mov	r2, fp
10001b5e:	4b48      	ldr	r3, [pc, #288]	; (10001c80 <irq_remove_handler+0x1a4>)
10001b60:	601a      	str	r2, [r3, #0]
    __asm volatile ("dmb");
10001b62:	f3bf 8f5f 	dmb	sy
            uint exception = __get_current_exception();
10001b66:	f7fe fb7e 	bl	10000266 <__get_current_exception>
10001b6a:	9001      	str	r0, [sp, #4]
            hard_assert(!exception || exception == num + 16);
10001b6c:	2800      	cmp	r0, #0
10001b6e:	d003      	beq.n	10001b78 <irq_remove_handler+0x9c>
10001b70:	4581      	cmp	r9, r0
10001b72:	d001      	beq.n	10001b78 <irq_remove_handler+0x9c>
10001b74:	f002 f836 	bl	10003be4 <hard_assertion_failure>
    return (void *) (((uintptr_t) addr) & ~0x1);
10001b78:	2301      	movs	r3, #1
10001b7a:	0029      	movs	r1, r5
10001b7c:	4399      	bics	r1, r3
            while (to_free_slot->handler != handler) {
10001b7e:	688b      	ldr	r3, [r1, #8]
10001b80:	42a3      	cmp	r3, r4
10001b82:	d068      	beq.n	10001c56 <irq_remove_handler+0x17a>
10001b84:	000a      	movs	r2, r1
10001b86:	e007      	b.n	10001b98 <irq_remove_handler+0xbc>
                to_free_slot = &irq_handler_chain_slots[to_free_slot->link];
10001b88:	0043      	lsls	r3, r0, #1
10001b8a:	181b      	adds	r3, r3, r0
10001b8c:	009b      	lsls	r3, r3, #2
10001b8e:	18fb      	adds	r3, r7, r3
            while (to_free_slot->handler != handler) {
10001b90:	6898      	ldr	r0, [r3, #8]
10001b92:	42a0      	cmp	r0, r4
10001b94:	d011      	beq.n	10001bba <irq_remove_handler+0xde>
                to_free_slot = &irq_handler_chain_slots[to_free_slot->link];
10001b96:	001a      	movs	r2, r3
                if (to_free_slot->link < 0) break;
10001b98:	2006      	movs	r0, #6
10001b9a:	5610      	ldrsb	r0, [r2, r0]
10001b9c:	2800      	cmp	r0, #0
10001b9e:	daf3      	bge.n	10001b88 <irq_remove_handler+0xac>
    if (enabled) {
10001ba0:	9b00      	ldr	r3, [sp, #0]
10001ba2:	2b00      	cmp	r3, #0
10001ba4:	d005      	beq.n	10001bb2 <irq_remove_handler+0xd6>
        *((io_rw_32 *) (PPB_BASE + M0PLUS_NVIC_ICPR_OFFSET)) = mask;
10001ba6:	465a      	mov	r2, fp
10001ba8:	4b36      	ldr	r3, [pc, #216]	; (10001c84 <irq_remove_handler+0x1a8>)
10001baa:	601a      	str	r2, [r3, #0]
        *((io_rw_32 *) (PPB_BASE + M0PLUS_NVIC_ISER_OFFSET)) = mask;
10001bac:	4b33      	ldr	r3, [pc, #204]	; (10001c7c <irq_remove_handler+0x1a0>)
10001bae:	601a      	str	r2, [r3, #0]
10001bb0:	e7b7      	b.n	10001b22 <irq_remove_handler+0x46>
        *((io_rw_32 *) (PPB_BASE + M0PLUS_NVIC_ICER_OFFSET)) = mask;
10001bb2:	465a      	mov	r2, fp
10001bb4:	4b32      	ldr	r3, [pc, #200]	; (10001c80 <irq_remove_handler+0x1a4>)
10001bb6:	601a      	str	r2, [r3, #0]
10001bb8:	e7b3      	b.n	10001b22 <irq_remove_handler+0x46>
                int next_slot_index = to_free_slot->link;
10001bba:	2006      	movs	r0, #6
10001bbc:	5618      	ldrsb	r0, [r3, r0]
                if (next_slot_index >= 0) {
10001bbe:	2800      	cmp	r0, #0
10001bc0:	db21      	blt.n	10001c06 <irq_remove_handler+0x12a>
                    to_free_slot->handler = next_slot->handler;
10001bc2:	0042      	lsls	r2, r0, #1
10001bc4:	1811      	adds	r1, r2, r0
10001bc6:	0089      	lsls	r1, r1, #2
10001bc8:	187c      	adds	r4, r7, r1
10001bca:	4688      	mov	r8, r1
10001bcc:	68a1      	ldr	r1, [r4, #8]
10001bce:	6099      	str	r1, [r3, #8]
                    to_free_slot->priority = next_slot->priority;
10001bd0:	79e1      	ldrb	r1, [r4, #7]
10001bd2:	71d9      	strb	r1, [r3, #7]
                    to_free_slot->link = next_slot->link;
10001bd4:	2106      	movs	r1, #6
10001bd6:	5661      	ldrsb	r1, [r4, r1]
10001bd8:	7199      	strb	r1, [r3, #6]
                    to_free_slot->inst3 = next_slot->link >= 0 ?
10001bda:	2900      	cmp	r1, #0
10001bdc:	db2b      	blt.n	10001c36 <irq_remove_handler+0x15a>
    int32_t i_addr = (*inst) << 21u;
10001bde:	88a4      	ldrh	r4, [r4, #4]
    uint32_t delta = (ui_to - ui_from - 4) / 2;
10001be0:	1af9      	subs	r1, r7, r3
    int32_t i_addr = (*inst) << 21u;
10001be2:	0564      	lsls	r4, r4, #21
    return inst + 2 + i_addr;
10001be4:	1524      	asrs	r4, r4, #20
10001be6:	4444      	add	r4, r8
    uint32_t delta = (ui_to - ui_from - 4) / 2;
10001be8:	1909      	adds	r1, r1, r4
    return 0xe000 | (delta & 0x7ff);
10001bea:	24e0      	movs	r4, #224	; 0xe0
10001bec:	0509      	lsls	r1, r1, #20
10001bee:	0d49      	lsrs	r1, r1, #21
10001bf0:	0224      	lsls	r4, r4, #8
10001bf2:	4321      	orrs	r1, r4
                    to_free_slot->inst3 = next_slot->link >= 0 ?
10001bf4:	8099      	strh	r1, [r3, #4]
                    next_slot->link = irq_hander_chain_free_slot_head;
10001bf6:	1812      	adds	r2, r2, r0
10001bf8:	4b23      	ldr	r3, [pc, #140]	; (10001c88 <irq_remove_handler+0x1ac>)
10001bfa:	0092      	lsls	r2, r2, #2
10001bfc:	18bf      	adds	r7, r7, r2
10001bfe:	781a      	ldrb	r2, [r3, #0]
                    irq_hander_chain_free_slot_head = next_slot_index;
10001c00:	7018      	strb	r0, [r3, #0]
                    next_slot->link = irq_hander_chain_free_slot_head;
10001c02:	71ba      	strb	r2, [r7, #6]
                    irq_hander_chain_free_slot_head = next_slot_index;
10001c04:	e7cc      	b.n	10001ba0 <irq_remove_handler+0xc4>
                    if (!exception) {
10001c06:	9801      	ldr	r0, [sp, #4]
10001c08:	2800      	cmp	r0, #0
10001c0a:	d117      	bne.n	10001c3c <irq_remove_handler+0x160>
                            prev_slot->link = -1;
10001c0c:	30ff      	adds	r0, #255	; 0xff
10001c0e:	7190      	strb	r0, [r2, #6]
                            prev_slot->inst3 = 0xbd00; // pop {pc}
10001c10:	481e      	ldr	r0, [pc, #120]	; (10001c8c <irq_remove_handler+0x1b0>)
10001c12:	8090      	strh	r0, [r2, #4]
                        to_free_slot->link = irq_hander_chain_free_slot_head;
10001c14:	4a1c      	ldr	r2, [pc, #112]	; (10001c88 <irq_remove_handler+0x1ac>)
            int to_free_slot_index = to_free_slot - irq_handler_chain_slots;
10001c16:	1bc9      	subs	r1, r1, r7
                        to_free_slot->link = irq_hander_chain_free_slot_head;
10001c18:	7810      	ldrb	r0, [r2, #0]
            int to_free_slot_index = to_free_slot - irq_handler_chain_slots;
10001c1a:	1089      	asrs	r1, r1, #2
                        to_free_slot->link = irq_hander_chain_free_slot_head;
10001c1c:	7198      	strb	r0, [r3, #6]
            int to_free_slot_index = to_free_slot - irq_handler_chain_slots;
10001c1e:	008b      	lsls	r3, r1, #2
10001c20:	185b      	adds	r3, r3, r1
10001c22:	0118      	lsls	r0, r3, #4
10001c24:	181b      	adds	r3, r3, r0
10001c26:	0218      	lsls	r0, r3, #8
10001c28:	181b      	adds	r3, r3, r0
10001c2a:	0418      	lsls	r0, r3, #16
10001c2c:	181b      	adds	r3, r3, r0
10001c2e:	005b      	lsls	r3, r3, #1
10001c30:	185b      	adds	r3, r3, r1
                        irq_hander_chain_free_slot_head = to_free_slot_index;
10001c32:	7013      	strb	r3, [r2, #0]
10001c34:	e7b4      	b.n	10001ba0 <irq_remove_handler+0xc4>
                    to_free_slot->inst3 = next_slot->link >= 0 ?
10001c36:	21bd      	movs	r1, #189	; 0xbd
10001c38:	0209      	lsls	r1, r1, #8
10001c3a:	e7db      	b.n	10001bf4 <irq_remove_handler+0x118>
                        insert_branch_and_link(&to_free_slot->inst3, irq_handler_chain_remove_tail);
10001c3c:	4a14      	ldr	r2, [pc, #80]	; (10001c90 <irq_remove_handler+0x1b4>)
    from[0] = 0xf000 | ((delta >> 11u) & 0x7ffu);
10001c3e:	4915      	ldr	r1, [pc, #84]	; (10001c94 <irq_remove_handler+0x1b8>)
                        insert_branch_and_link(&to_free_slot->inst3, irq_handler_chain_remove_tail);
10001c40:	1ad2      	subs	r2, r2, r3
    uint32_t delta = (ui_to - ui_from - 4) / 2;
10001c42:	3a08      	subs	r2, #8
    from[0] = 0xf000 | ((delta >> 11u) & 0x7ffu);
10001c44:	0250      	lsls	r0, r2, #9
10001c46:	0d40      	lsrs	r0, r0, #21
10001c48:	4301      	orrs	r1, r0
10001c4a:	8099      	strh	r1, [r3, #4]
    from[1] = 0xf800 | (delta & 0x7ffu);
10001c4c:	4912      	ldr	r1, [pc, #72]	; (10001c98 <irq_remove_handler+0x1bc>)
    uint32_t delta = (ui_to - ui_from - 4) / 2;
10001c4e:	0852      	lsrs	r2, r2, #1
    from[1] = 0xf800 | (delta & 0x7ffu);
10001c50:	430a      	orrs	r2, r1
10001c52:	80da      	strh	r2, [r3, #6]
}
10001c54:	e7a4      	b.n	10001ba0 <irq_remove_handler+0xc4>
                int next_slot_index = to_free_slot->link;
10001c56:	2006      	movs	r0, #6
10001c58:	5608      	ldrsb	r0, [r1, r0]
                if (next_slot_index >= 0) {
10001c5a:	000b      	movs	r3, r1
10001c5c:	2800      	cmp	r0, #0
10001c5e:	dab0      	bge.n	10001bc2 <irq_remove_handler+0xe6>
                    if (!exception) {
10001c60:	9a01      	ldr	r2, [sp, #4]
10001c62:	2a00      	cmp	r2, #0
10001c64:	d1ea      	bne.n	10001c3c <irq_remove_handler+0x160>
                            vtable_handler = __unhandled_user_irq;
10001c66:	4645      	mov	r5, r8
10001c68:	e7d4      	b.n	10001c14 <irq_remove_handler+0x138>
10001c6a:	46c0      	nop			; (mov r8, r8)
10001c6c:	d0000124 	.word	0xd0000124
10001c70:	e000ed00 	.word	0xe000ed00
10001c74:	100001cd 	.word	0x100001cd
10001c78:	20002130 	.word	0x20002130
10001c7c:	e000e100 	.word	0xe000e100
10001c80:	e000e180 	.word	0xe000e180
10001c84:	e000e280 	.word	0xe000e280
10001c88:	20039bbc 	.word	0x20039bbc
10001c8c:	ffffbd00 	.word	0xffffbd00
10001c90:	2000216a 	.word	0x2000216a
10001c94:	fffff000 	.word	0xfffff000
10001c98:	fffff800 	.word	0xfffff800

10001c9c <irq_set_priority>:

void irq_set_priority(uint num, uint8_t hardware_priority) {
    check_irq_param(num);

    // note that only 32 bit writes are supported
    io_rw_32 *p = (io_rw_32 *)((PPB_BASE + M0PLUS_NVIC_IPR0_OFFSET) + (num & ~3u));
10001c9c:	2303      	movs	r3, #3
void irq_set_priority(uint num, uint8_t hardware_priority) {
10001c9e:	b510      	push	{r4, lr}
    io_rw_32 *p = (io_rw_32 *)((PPB_BASE + M0PLUS_NVIC_IPR0_OFFSET) + (num & ~3u));
10001ca0:	0004      	movs	r4, r0
10001ca2:	4a07      	ldr	r2, [pc, #28]	; (10001cc0 <irq_set_priority+0x24>)
    *p = (*p & ~(0xffu << (8 * (num & 3u)))) | (((uint32_t) hardware_priority) << (8 * (num & 3u)));
10001ca4:	4018      	ands	r0, r3
    io_rw_32 *p = (io_rw_32 *)((PPB_BASE + M0PLUS_NVIC_IPR0_OFFSET) + (num & ~3u));
10001ca6:	4694      	mov	ip, r2
    *p = (*p & ~(0xffu << (8 * (num & 3u)))) | (((uint32_t) hardware_priority) << (8 * (num & 3u)));
10001ca8:	00c0      	lsls	r0, r0, #3
    io_rw_32 *p = (io_rw_32 *)((PPB_BASE + M0PLUS_NVIC_IPR0_OFFSET) + (num & ~3u));
10001caa:	439c      	bics	r4, r3
    *p = (*p & ~(0xffu << (8 * (num & 3u)))) | (((uint32_t) hardware_priority) << (8 * (num & 3u)));
10001cac:	33fc      	adds	r3, #252	; 0xfc
10001cae:	4083      	lsls	r3, r0
    io_rw_32 *p = (io_rw_32 *)((PPB_BASE + M0PLUS_NVIC_IPR0_OFFSET) + (num & ~3u));
10001cb0:	4464      	add	r4, ip
    *p = (*p & ~(0xffu << (8 * (num & 3u)))) | (((uint32_t) hardware_priority) << (8 * (num & 3u)));
10001cb2:	6822      	ldr	r2, [r4, #0]
10001cb4:	4081      	lsls	r1, r0
10001cb6:	439a      	bics	r2, r3
10001cb8:	0013      	movs	r3, r2
10001cba:	430b      	orrs	r3, r1
10001cbc:	6023      	str	r3, [r4, #0]
}
10001cbe:	bd10      	pop	{r4, pc}
10001cc0:	e000e400 	.word	0xe000e400

10001cc4 <irq_add_tail_to_free_list>:

#if !PICO_DISABLE_SHARED_IRQ_HANDLERS && PICO_MAX_SHARED_IRQ_HANDLERS
// used by irq_handler_chain.S to remove the last link in a handler chain after it executes
// note this must be called only with the last slot in a chain (and during the exception)
void irq_add_tail_to_free_list(struct irq_handler_chain_slot *slot) {
10001cc4:	b570      	push	{r4, r5, r6, lr}
    return (void *) (((uintptr_t) addr) | 0x1);
10001cc6:	2501      	movs	r5, #1
void irq_add_tail_to_free_list(struct irq_handler_chain_slot *slot) {
10001cc8:	0004      	movs	r4, r0
    return (void *) (((uintptr_t) addr) | 0x1);
10001cca:	4305      	orrs	r5, r0
    irq_handler_t slot_handler = (irq_handler_t) add_thumb_bit(slot);
    assert(is_shared_irq_raw_handler(slot_handler));

    int exception = __get_current_exception();
10001ccc:	f7fe facb 	bl	10000266 <__get_current_exception>
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
10001cd0:	f3ef 8c10 	mrs	ip, PRIMASK
    __asm volatile ("cpsid i");
10001cd4:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
10001cd6:	4a24      	ldr	r2, [pc, #144]	; (10001d68 <irq_add_tail_to_free_list+0xa4>)
10001cd8:	6813      	ldr	r3, [r2, #0]
10001cda:	2b00      	cmp	r3, #0
10001cdc:	d0fc      	beq.n	10001cd8 <irq_add_tail_to_free_list+0x14>
    __asm volatile ("dmb");
10001cde:	f3bf 8f5f 	dmb	sy
    assert(exception);
    spin_lock_t *lock = spin_lock_instance(PICO_SPINLOCK_ID_IRQ);
    uint32_t save = spin_lock_blocking(lock);
    int slot_index = slot - irq_handler_chain_slots;
10001ce2:	4e22      	ldr	r6, [pc, #136]	; (10001d6c <irq_add_tail_to_free_list+0xa8>)
    if (slot_handler == get_vtable()[exception]) {
10001ce4:	0080      	lsls	r0, r0, #2
    int slot_index = slot - irq_handler_chain_slots;
10001ce6:	1ba1      	subs	r1, r4, r6
10001ce8:	1089      	asrs	r1, r1, #2
10001cea:	008a      	lsls	r2, r1, #2
10001cec:	1852      	adds	r2, r2, r1
10001cee:	0113      	lsls	r3, r2, #4
10001cf0:	18d2      	adds	r2, r2, r3
10001cf2:	0213      	lsls	r3, r2, #8
10001cf4:	18d2      	adds	r2, r2, r3
10001cf6:	0413      	lsls	r3, r2, #16
10001cf8:	18d3      	adds	r3, r2, r3
    return (irq_handler_t *) scb_hw->vtor;
10001cfa:	4a1d      	ldr	r2, [pc, #116]	; (10001d70 <irq_add_tail_to_free_list+0xac>)
    int slot_index = slot - irq_handler_chain_slots;
10001cfc:	005b      	lsls	r3, r3, #1
10001cfe:	185b      	adds	r3, r3, r1
    return (irq_handler_t *) scb_hw->vtor;
10001d00:	6891      	ldr	r1, [r2, #8]
    if (slot_handler == get_vtable()[exception]) {
10001d02:	5809      	ldr	r1, [r1, r0]
10001d04:	42a9      	cmp	r1, r5
10001d06:	d01c      	beq.n	10001d42 <irq_add_tail_to_free_list+0x7e>
        get_vtable()[exception] = __unhandled_user_irq;
    } else {
        bool __unused found = false;
        // need to find who points at the slot and update it
        for(uint i=0;i<count_of(irq_handler_chain_slots);i++) {
            if (irq_handler_chain_slots[i].link == slot_index) {
10001d08:	2206      	movs	r2, #6
10001d0a:	56b2      	ldrsb	r2, [r6, r2]
10001d0c:	429a      	cmp	r2, r3
10001d0e:	d01c      	beq.n	10001d4a <irq_add_tail_to_free_list+0x86>
10001d10:	2212      	movs	r2, #18
10001d12:	56b2      	ldrsb	r2, [r6, r2]
10001d14:	4293      	cmp	r3, r2
10001d16:	d022      	beq.n	10001d5e <irq_add_tail_to_free_list+0x9a>
10001d18:	221e      	movs	r2, #30
10001d1a:	56b2      	ldrsb	r2, [r6, r2]
10001d1c:	4293      	cmp	r3, r2
10001d1e:	d020      	beq.n	10001d62 <irq_add_tail_to_free_list+0x9e>
10001d20:	222a      	movs	r2, #42	; 0x2a
10001d22:	56b2      	ldrsb	r2, [r6, r2]
        for(uint i=0;i<count_of(irq_handler_chain_slots);i++) {
10001d24:	2103      	movs	r1, #3
            if (irq_handler_chain_slots[i].link == slot_index) {
10001d26:	429a      	cmp	r2, r3
10001d28:	d010      	beq.n	10001d4c <irq_add_tail_to_free_list+0x88>
            }
        }
        assert(found);
    }
    // add slot to free list
    slot->link = irq_hander_chain_free_slot_head;
10001d2a:	4a12      	ldr	r2, [pc, #72]	; (10001d74 <irq_add_tail_to_free_list+0xb0>)
10001d2c:	7811      	ldrb	r1, [r2, #0]
    irq_hander_chain_free_slot_head = slot_index;
10001d2e:	7013      	strb	r3, [r2, #0]
    slot->link = irq_hander_chain_free_slot_head;
10001d30:	71a1      	strb	r1, [r4, #6]
10001d32:	f3bf 8f5f 	dmb	sy
    *lock = 0;
10001d36:	2200      	movs	r2, #0
10001d38:	4b0b      	ldr	r3, [pc, #44]	; (10001d68 <irq_add_tail_to_free_list+0xa4>)
10001d3a:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10001d3c:	f38c 8810 	msr	PRIMASK, ip
    spin_unlock(lock, save);
}
10001d40:	bd70      	pop	{r4, r5, r6, pc}
    return (irq_handler_t *) scb_hw->vtor;
10001d42:	6892      	ldr	r2, [r2, #8]
        get_vtable()[exception] = __unhandled_user_irq;
10001d44:	490c      	ldr	r1, [pc, #48]	; (10001d78 <irq_add_tail_to_free_list+0xb4>)
10001d46:	5011      	str	r1, [r2, r0]
10001d48:	e7ef      	b.n	10001d2a <irq_add_tail_to_free_list+0x66>
        for(uint i=0;i<count_of(irq_handler_chain_slots);i++) {
10001d4a:	2100      	movs	r1, #0
                irq_handler_chain_slots[i].link = -1;
10001d4c:	004a      	lsls	r2, r1, #1
10001d4e:	1852      	adds	r2, r2, r1
10001d50:	21ff      	movs	r1, #255	; 0xff
10001d52:	0092      	lsls	r2, r2, #2
10001d54:	18b2      	adds	r2, r6, r2
10001d56:	7191      	strb	r1, [r2, #6]
                irq_handler_chain_slots[i].inst3 = 0xbd00; // pop {pc}
10001d58:	4908      	ldr	r1, [pc, #32]	; (10001d7c <irq_add_tail_to_free_list+0xb8>)
10001d5a:	8091      	strh	r1, [r2, #4]
                break;
10001d5c:	e7e5      	b.n	10001d2a <irq_add_tail_to_free_list+0x66>
        for(uint i=0;i<count_of(irq_handler_chain_slots);i++) {
10001d5e:	2101      	movs	r1, #1
10001d60:	e7f4      	b.n	10001d4c <irq_add_tail_to_free_list+0x88>
10001d62:	2102      	movs	r1, #2
10001d64:	e7f2      	b.n	10001d4c <irq_add_tail_to_free_list+0x88>
10001d66:	46c0      	nop			; (mov r8, r8)
10001d68:	d0000124 	.word	0xd0000124
10001d6c:	20002130 	.word	0x20002130
10001d70:	e000ed00 	.word	0xe000ed00
10001d74:	20039bbc 	.word	0x20039bbc
10001d78:	100001cd 	.word	0x100001cd
10001d7c:	ffffbd00 	.word	0xffffbd00

10001d80 <irq_init_priorities>:
#endif

void irq_init_priorities() {
10001d80:	b5f0      	push	{r4, r5, r6, r7, lr}
#if PICO_DEFAULT_IRQ_PRIORITY != 0
    for (uint irq = 0; irq < NUM_IRQS; irq++) {
10001d82:	2200      	movs	r2, #0
    io_rw_32 *p = (io_rw_32 *)((PPB_BASE + M0PLUS_NVIC_IPR0_OFFSET) + (num & ~3u));
10001d84:	2403      	movs	r4, #3
    *p = (*p & ~(0xffu << (8 * (num & 3u)))) | (((uint32_t) hardware_priority) << (8 * (num & 3u)));
10001d86:	27ff      	movs	r7, #255	; 0xff
10001d88:	2680      	movs	r6, #128	; 0x80
10001d8a:	0020      	movs	r0, r4
10001d8c:	003d      	movs	r5, r7
    io_rw_32 *p = (io_rw_32 *)((PPB_BASE + M0PLUS_NVIC_IPR0_OFFSET) + (num & ~3u));
10001d8e:	4b09      	ldr	r3, [pc, #36]	; (10001db4 <irq_init_priorities+0x34>)
10001d90:	0011      	movs	r1, r2
10001d92:	469c      	mov	ip, r3
    *p = (*p & ~(0xffu << (8 * (num & 3u)))) | (((uint32_t) hardware_priority) << (8 * (num & 3u)));
10001d94:	4010      	ands	r0, r2
10001d96:	00c0      	lsls	r0, r0, #3
10001d98:	4085      	lsls	r5, r0
    io_rw_32 *p = (io_rw_32 *)((PPB_BASE + M0PLUS_NVIC_IPR0_OFFSET) + (num & ~3u));
10001d9a:	43a1      	bics	r1, r4
10001d9c:	4461      	add	r1, ip
    *p = (*p & ~(0xffu << (8 * (num & 3u)))) | (((uint32_t) hardware_priority) << (8 * (num & 3u)));
10001d9e:	680b      	ldr	r3, [r1, #0]
    for (uint irq = 0; irq < NUM_IRQS; irq++) {
10001da0:	3201      	adds	r2, #1
    *p = (*p & ~(0xffu << (8 * (num & 3u)))) | (((uint32_t) hardware_priority) << (8 * (num & 3u)));
10001da2:	43ab      	bics	r3, r5
10001da4:	0035      	movs	r5, r6
10001da6:	4085      	lsls	r5, r0
10001da8:	432b      	orrs	r3, r5
10001daa:	600b      	str	r3, [r1, #0]
    for (uint irq = 0; irq < NUM_IRQS; irq++) {
10001dac:	2a20      	cmp	r2, #32
10001dae:	d1ec      	bne.n	10001d8a <irq_init_priorities+0xa>
        irq_set_priority(irq, PICO_DEFAULT_IRQ_PRIORITY);
    }
#endif
}
10001db0:	bdf0      	pop	{r4, r5, r6, r7, pc}
10001db2:	46c0      	nop			; (mov r8, r8)
10001db4:	e000e400 	.word	0xe000e400

10001db8 <lock_init>:
    return (spin_lock_t *) (SIO_BASE + SIO_SPINLOCK0_OFFSET + lock_num * 4);
10001db8:	4b02      	ldr	r3, [pc, #8]	; (10001dc4 <lock_init+0xc>)
10001dba:	469c      	mov	ip, r3
10001dbc:	4461      	add	r1, ip
10001dbe:	0089      	lsls	r1, r1, #2

#include "pico/lock_core.h"

void lock_init(lock_core_t *core, uint lock_num) {
    assert(lock_num >= 0 && lock_num < NUM_SPIN_LOCKS);
    core->spin_lock = spin_lock_instance(lock_num);
10001dc0:	6001      	str	r1, [r0, #0]
}
10001dc2:	4770      	bx	lr
10001dc4:	34000040 	.word	0x34000040

10001dc8 <core1_trampoline>:

// Default stack for core1 ... if multicore_launch_core1 is not included then .stack1 section will be garbage collected
static uint32_t __attribute__((section(".stack1"))) core1_stack[PICO_CORE1_STACK_SIZE / sizeof(uint32_t)];

static void __attribute__ ((naked)) core1_trampoline() {
    __asm("pop {r0, r1, pc}");
10001dc8:	bd03      	pop	{r0, r1, pc}
10001dca:	46c0      	nop			; (mov r8, r8)

10001dcc <core1_wrapper>:
}

int core1_wrapper(int (*entry)(void), void *stack_base) {
10001dcc:	b510      	push	{r4, lr}
10001dce:	0004      	movs	r4, r0
#if PICO_USE_STACK_GUARDS
    // install core1 stack guard
    runtime_install_stack_guard(stack_base);
#endif
    irq_init_priorities();
10001dd0:	f7ff ffd6 	bl	10001d80 <irq_init_priorities>
    return (*entry)();
10001dd4:	47a0      	blx	r4
}
10001dd6:	bd10      	pop	{r4, pc}

10001dd8 <multicore_launch_core1>:
    stack_ptr[1] = (uintptr_t) stack_bottom;
    stack_ptr[2] = (uintptr_t) core1_wrapper;
    multicore_launch_core1_raw(core1_trampoline, stack_ptr, scb_hw->vtor);
}

void multicore_launch_core1(void (*entry)(void)) {
10001dd8:	b530      	push	{r4, r5, lr}
    extern char __StackOneBottom;
    uint32_t *stack_limit = (uint32_t *) &__StackOneBottom;
    // hack to reference core1_stack although that pointer is wrong.... core1_stack should always be <= stack_limit, if not boom!
    uint32_t *stack = core1_stack <= stack_limit ? stack_limit : (uint32_t *) -1;
10001dda:	4a22      	ldr	r2, [pc, #136]	; (10001e64 <multicore_launch_core1+0x8c>)
10001ddc:	4b22      	ldr	r3, [pc, #136]	; (10001e68 <multicore_launch_core1+0x90>)
void multicore_launch_core1(void (*entry)(void)) {
10001dde:	b087      	sub	sp, #28
    uint32_t *stack = core1_stack <= stack_limit ? stack_limit : (uint32_t *) -1;
10001de0:	429a      	cmp	r2, r3
10001de2:	d201      	bcs.n	10001de8 <multicore_launch_core1+0x10>
10001de4:	2201      	movs	r2, #1
10001de6:	4252      	negs	r2, r2
10001de8:	0013      	movs	r3, r2
    stack_ptr[0] = (uintptr_t) entry;
10001dea:	4920      	ldr	r1, [pc, #128]	; (10001e6c <multicore_launch_core1+0x94>)
    multicore_launch_core1_with_stack(entry, stack, sizeof(core1_stack));
}

void multicore_launch_core1_raw(void (*entry)(void), uint32_t *sp, uint32_t vector_table) {
    uint32_t cmd_sequence[] = {0, 0, 1, (uintptr_t) vector_table, (uintptr_t) sp, (uintptr_t) entry};
10001dec:	2400      	movs	r4, #0
    stack_ptr[0] = (uintptr_t) entry;
10001dee:	5050      	str	r0, [r2, r1]
    stack_ptr[1] = (uintptr_t) stack_bottom;
10001df0:	3104      	adds	r1, #4
10001df2:	5052      	str	r2, [r2, r1]
    stack_ptr[2] = (uintptr_t) core1_wrapper;
10001df4:	4a1e      	ldr	r2, [pc, #120]	; (10001e70 <multicore_launch_core1+0x98>)
10001df6:	491f      	ldr	r1, [pc, #124]	; (10001e74 <multicore_launch_core1+0x9c>)
    uint32_t cmd_sequence[] = {0, 0, 1, (uintptr_t) vector_table, (uintptr_t) sp, (uintptr_t) entry};
10001df8:	2000      	movs	r0, #0
    stack_ptr[2] = (uintptr_t) core1_wrapper;
10001dfa:	5099      	str	r1, [r3, r2]
    multicore_launch_core1_raw(core1_trampoline, stack_ptr, scb_hw->vtor);
10001dfc:	4a1e      	ldr	r2, [pc, #120]	; (10001e78 <multicore_launch_core1+0xa0>)
    uint32_t cmd_sequence[] = {0, 0, 1, (uintptr_t) vector_table, (uintptr_t) sp, (uintptr_t) entry};
10001dfe:	2100      	movs	r1, #0
    multicore_launch_core1_raw(core1_trampoline, stack_ptr, scb_hw->vtor);
10001e00:	6892      	ldr	r2, [r2, #8]
    uint32_t cmd_sequence[] = {0, 0, 1, (uintptr_t) vector_table, (uintptr_t) sp, (uintptr_t) entry};
10001e02:	9000      	str	r0, [sp, #0]
10001e04:	9101      	str	r1, [sp, #4]
10001e06:	9203      	str	r2, [sp, #12]
    stack_ptr -= 3;
10001e08:	4a18      	ldr	r2, [pc, #96]	; (10001e6c <multicore_launch_core1+0x94>)
    uint32_t cmd_sequence[] = {0, 0, 1, (uintptr_t) vector_table, (uintptr_t) sp, (uintptr_t) entry};
10001e0a:	2101      	movs	r1, #1
    stack_ptr -= 3;
10001e0c:	4694      	mov	ip, r2
10001e0e:	4463      	add	r3, ip
    uint32_t cmd_sequence[] = {0, 0, 1, (uintptr_t) vector_table, (uintptr_t) sp, (uintptr_t) entry};
10001e10:	9304      	str	r3, [sp, #16]
10001e12:	4b1a      	ldr	r3, [pc, #104]	; (10001e7c <multicore_launch_core1+0xa4>)

    uint seq = 0;
10001e14:	2500      	movs	r5, #0
    uint32_t cmd_sequence[] = {0, 0, 1, (uintptr_t) vector_table, (uintptr_t) sp, (uintptr_t) entry};
10001e16:	9305      	str	r3, [sp, #20]
 *  \ingroup multicore_fifo
 *
 * \return true if the FIFO has data in it, false otherwise
 */
static inline bool multicore_fifo_rvalid() {
    return !!(sio_hw->fifo_st & SIO_FIFO_ST_VLD_BITS);
10001e18:	23d0      	movs	r3, #208	; 0xd0
10001e1a:	9102      	str	r1, [sp, #8]
10001e1c:	061b      	lsls	r3, r3, #24
 *  \ingroup multicore_fifo
 *
 *  @return true if the FIFO is full, false otherwise
 */
static inline bool multicore_fifo_wready() {
    return !!(sio_hw->fifo_st & SIO_FIFO_ST_RDY_BITS);
10001e1e:	3002      	adds	r0, #2
    do {
        uint cmd = cmd_sequence[seq];
        // we drain before sending a 0
        if (!cmd) {
10001e20:	2c00      	cmp	r4, #0
10001e22:	d014      	beq.n	10001e4e <multicore_launch_core1+0x76>
10001e24:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    while (!multicore_fifo_wready())
10001e26:	4210      	tst	r0, r2
10001e28:	d0fc      	beq.n	10001e24 <multicore_launch_core1+0x4c>
    sio_hw->fifo_wr = data;
10001e2a:	655c      	str	r4, [r3, #84]	; 0x54
    __asm volatile ("sev");
10001e2c:	bf40      	sev
    return !!(sio_hw->fifo_st & SIO_FIFO_ST_VLD_BITS);
10001e2e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    while (!multicore_fifo_rvalid())
10001e30:	4211      	tst	r1, r2
10001e32:	d103      	bne.n	10001e3c <multicore_launch_core1+0x64>
    __asm volatile ("wfe");
10001e34:	bf20      	wfe
10001e36:	6d1a      	ldr	r2, [r3, #80]	; 0x50
10001e38:	4211      	tst	r1, r2
10001e3a:	d0fb      	beq.n	10001e34 <multicore_launch_core1+0x5c>
    return sio_hw->fifo_rd;
10001e3c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
            __sev(); // core 1 may be waiting for fifo space
        }
        multicore_fifo_push_blocking(cmd);
        uint32_t response = multicore_fifo_pop_blocking();
        // move to next state on correct response otherwise start over
        seq = cmd == response ? seq + 1 : 0;
10001e3e:	42a2      	cmp	r2, r4
10001e40:	d00a      	beq.n	10001e58 <multicore_launch_core1+0x80>
10001e42:	2500      	movs	r5, #0
        uint cmd = cmd_sequence[seq];
10001e44:	466c      	mov	r4, sp
10001e46:	00aa      	lsls	r2, r5, #2
10001e48:	58a4      	ldr	r4, [r4, r2]
10001e4a:	e7e9      	b.n	10001e20 <multicore_launch_core1+0x48>
 *  \ingroup multicore_fifo
 *
 */
static inline void multicore_fifo_drain() {
    while (multicore_fifo_rvalid())
        (void) sio_hw->fifo_rd;
10001e4c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    return !!(sio_hw->fifo_st & SIO_FIFO_ST_VLD_BITS);
10001e4e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    while (multicore_fifo_rvalid())
10001e50:	4211      	tst	r1, r2
10001e52:	d1fb      	bne.n	10001e4c <multicore_launch_core1+0x74>
    __asm volatile ("sev");
10001e54:	bf40      	sev
    while (!multicore_fifo_wready())
10001e56:	e7e5      	b.n	10001e24 <multicore_launch_core1+0x4c>
        seq = cmd == response ? seq + 1 : 0;
10001e58:	3501      	adds	r5, #1
    } while (seq < count_of(cmd_sequence));
10001e5a:	2d05      	cmp	r5, #5
10001e5c:	d9f2      	bls.n	10001e44 <multicore_launch_core1+0x6c>
}
10001e5e:	b007      	add	sp, #28
10001e60:	bd30      	pop	{r4, r5, pc}
10001e62:	46c0      	nop			; (mov r8, r8)
10001e64:	20040800 	.word	0x20040800
10001e68:	20040000 	.word	0x20040000
10001e6c:	000007f4 	.word	0x000007f4
10001e70:	000007fc 	.word	0x000007fc
10001e74:	10001dcd 	.word	0x10001dcd
10001e78:	e000ed00 	.word	0xe000ed00
10001e7c:	10001dc9 	.word	0x10001dc9

10001e80 <mutex_init>:

#if !PICO_NO_HARDWARE
static_assert(sizeof(mutex_t) == 8, "");
#endif

void mutex_init(mutex_t *mtx) {
10001e80:	b510      	push	{r4, lr}
10001e82:	0004      	movs	r4, r0
    lock_init(&mtx->core, next_striped_spin_lock_num());
10001e84:	f002 fa78 	bl	10004378 <next_striped_spin_lock_num>
10001e88:	0001      	movs	r1, r0
10001e8a:	0020      	movs	r0, r4
10001e8c:	f7ff ff94 	bl	10001db8 <lock_init>
    mtx->owner = -1;
10001e90:	23ff      	movs	r3, #255	; 0xff
10001e92:	7123      	strb	r3, [r4, #4]
    __asm volatile ("dmb");
10001e94:	f3bf 8f5f 	dmb	sy
    __mem_fence_release();
}
10001e98:	bd10      	pop	{r4, pc}
10001e9a:	46c0      	nop			; (mov r8, r8)

10001e9c <ph_merge_nodes>:
        c->sibling = n->child;
        n->child = child_id;
    }
}

static pheap_node_id_t ph_merge_nodes(pheap_t *heap, pheap_node_id_t a, pheap_node_id_t b) {
10001e9c:	b570      	push	{r4, r5, r6, lr}
10001e9e:	0005      	movs	r5, r0
10001ea0:	0014      	movs	r4, r2
10001ea2:	0016      	movs	r6, r2
    if (!a) return b;
10001ea4:	2900      	cmp	r1, #0
10001ea6:	d015      	beq.n	10001ed4 <ph_merge_nodes+0x38>
    if (!b) return a;
10001ea8:	000c      	movs	r4, r1
10001eaa:	2a00      	cmp	r2, #0
10001eac:	d012      	beq.n	10001ed4 <ph_merge_nodes+0x38>
    if (heap->comparator(heap->user_data, a, b)) {
10001eae:	6880      	ldr	r0, [r0, #8]
10001eb0:	686b      	ldr	r3, [r5, #4]
10001eb2:	4798      	blx	r3
10001eb4:	6829      	ldr	r1, [r5, #0]
10001eb6:	2800      	cmp	r0, #0
10001eb8:	d00e      	beq.n	10001ed8 <ph_merge_nodes+0x3c>
    return heap->nodes + id - 1;
10001eba:	0073      	lsls	r3, r6, #1
10001ebc:	199b      	adds	r3, r3, r6
10001ebe:	0062      	lsls	r2, r4, #1
10001ec0:	3b03      	subs	r3, #3
10001ec2:	1912      	adds	r2, r2, r4
10001ec4:	18cb      	adds	r3, r1, r3
10001ec6:	3a03      	subs	r2, #3
    c->parent = parent_id;
10001ec8:	709c      	strb	r4, [r3, #2]
    return heap->nodes + id - 1;
10001eca:	1888      	adds	r0, r1, r2
    if (!n->child) {
10001ecc:	5c8a      	ldrb	r2, [r1, r2]
10001ece:	2a00      	cmp	r2, #0
10001ed0:	d115      	bne.n	10001efe <ph_merge_nodes+0x62>
        n->child = child_id;
10001ed2:	7006      	strb	r6, [r0, #0]
        return a;
    } else {
        ph_add_child_node(heap, b, a);
        return b;
    }
}
10001ed4:	0020      	movs	r0, r4
10001ed6:	bd70      	pop	{r4, r5, r6, pc}
    return heap->nodes + id - 1;
10001ed8:	0063      	lsls	r3, r4, #1
10001eda:	191b      	adds	r3, r3, r4
10001edc:	0072      	lsls	r2, r6, #1
10001ede:	3b03      	subs	r3, #3
10001ee0:	1992      	adds	r2, r2, r6
10001ee2:	18cb      	adds	r3, r1, r3
10001ee4:	3a03      	subs	r2, #3
    c->parent = parent_id;
10001ee6:	709e      	strb	r6, [r3, #2]
    return heap->nodes + id - 1;
10001ee8:	1888      	adds	r0, r1, r2
    if (!n->child) {
10001eea:	5c8a      	ldrb	r2, [r1, r2]
10001eec:	2a00      	cmp	r2, #0
10001eee:	d102      	bne.n	10001ef6 <ph_merge_nodes+0x5a>
        n->child = child_id;
10001ef0:	7004      	strb	r4, [r0, #0]
10001ef2:	0034      	movs	r4, r6
10001ef4:	e7ee      	b.n	10001ed4 <ph_merge_nodes+0x38>
        c->sibling = n->child;
10001ef6:	705a      	strb	r2, [r3, #1]
        n->child = child_id;
10001ef8:	7004      	strb	r4, [r0, #0]
10001efa:	0034      	movs	r4, r6
10001efc:	e7ea      	b.n	10001ed4 <ph_merge_nodes+0x38>
        c->sibling = n->child;
10001efe:	705a      	strb	r2, [r3, #1]
        n->child = child_id;
10001f00:	7006      	strb	r6, [r0, #0]
10001f02:	e7e7      	b.n	10001ed4 <ph_merge_nodes+0x38>

10001f04 <ph_create>:

#include <stdio.h>
#include <stdlib.h>
#include "pico/util/pheap.h"

pheap_t *ph_create(uint max_nodes, pheap_comparator comparator, void *user_data) {
10001f04:	b5f0      	push	{r4, r5, r6, r7, lr}
10001f06:	46c6      	mov	lr, r8
10001f08:	0005      	movs	r5, r0
10001f0a:	000f      	movs	r7, r1
10001f0c:	b500      	push	{lr}
    invalid_params_if(PHEAP, !max_nodes || max_nodes >= (1u << sizeof(pheap_node_id_t)));
    pheap_t *heap = calloc(1, sizeof(pheap_t));
10001f0e:	2110      	movs	r1, #16
10001f10:	2001      	movs	r0, #1
pheap_t *ph_create(uint max_nodes, pheap_comparator comparator, void *user_data) {
10001f12:	0016      	movs	r6, r2
    pheap_t *heap = calloc(1, sizeof(pheap_t));
10001f14:	f000 f9ac 	bl	10002270 <__wrap_calloc>
    heap->max_nodes = max_nodes;
10001f18:	b2eb      	uxtb	r3, r5
    pheap_t *heap = calloc(1, sizeof(pheap_t));
10001f1a:	0004      	movs	r4, r0
    heap->max_nodes = max_nodes;
10001f1c:	7303      	strb	r3, [r0, #12]
    heap->comparator = comparator;
    heap->nodes = calloc(max_nodes, sizeof(pheap_node_t));
10001f1e:	2103      	movs	r1, #3
    heap->comparator = comparator;
10001f20:	6047      	str	r7, [r0, #4]
    heap->nodes = calloc(max_nodes, sizeof(pheap_node_t));
10001f22:	0028      	movs	r0, r5
    heap->max_nodes = max_nodes;
10001f24:	4698      	mov	r8, r3
    heap->nodes = calloc(max_nodes, sizeof(pheap_node_t));
10001f26:	f000 f9a3 	bl	10002270 <__wrap_calloc>
    ph_clear(heap);
    return heap;
}

void ph_clear(pheap_t *heap) {
    heap->root_id = 0;
10001f2a:	2300      	movs	r3, #0
10001f2c:	7363      	strb	r3, [r4, #13]
    heap->free_head_id = 1;
10001f2e:	3301      	adds	r3, #1
10001f30:	73a3      	strb	r3, [r4, #14]
    heap->free_tail_id = heap->max_nodes;
10001f32:	4643      	mov	r3, r8
10001f34:	21ff      	movs	r1, #255	; 0xff
10001f36:	73e3      	strb	r3, [r4, #15]
    for(uint i = 1; i < heap->max_nodes; i++) {
10001f38:	23fe      	movs	r3, #254	; 0xfe
    heap->nodes = calloc(max_nodes, sizeof(pheap_node_t));
10001f3a:	6020      	str	r0, [r4, #0]
    heap->user_data = user_data;
10001f3c:	60a6      	str	r6, [r4, #8]
    for(uint i = 1; i < heap->max_nodes; i++) {
10001f3e:	4029      	ands	r1, r5
10001f40:	422b      	tst	r3, r5
10001f42:	d006      	beq.n	10001f52 <ph_create+0x4e>
10001f44:	1c42      	adds	r2, r0, #1
10001f46:	3bfd      	subs	r3, #253	; 0xfd
        ph_get_node(heap, i)->sibling = i + 1;
10001f48:	3301      	adds	r3, #1
10001f4a:	7013      	strb	r3, [r2, #0]
    for(uint i = 1; i < heap->max_nodes; i++) {
10001f4c:	3203      	adds	r2, #3
10001f4e:	428b      	cmp	r3, r1
10001f50:	d3fa      	bcc.n	10001f48 <ph_create+0x44>
    }
    ph_get_node(heap, heap->max_nodes)->sibling = 0;
10001f52:	004b      	lsls	r3, r1, #1
10001f54:	1859      	adds	r1, r3, r1
10001f56:	2300      	movs	r3, #0
10001f58:	1840      	adds	r0, r0, r1
10001f5a:	3803      	subs	r0, #3
10001f5c:	7043      	strb	r3, [r0, #1]
}
10001f5e:	0020      	movs	r0, r4
10001f60:	bc80      	pop	{r7}
10001f62:	46b8      	mov	r8, r7
10001f64:	bdf0      	pop	{r4, r5, r6, r7, pc}
10001f66:	46c0      	nop			; (mov r8, r8)

10001f68 <ph_merge_two_pass>:
void ph_destroy(pheap_t *heap) {
    free(heap->nodes);
    free(heap);
}

pheap_node_id_t ph_merge_two_pass(pheap_t *heap, pheap_node_id_t id) {
10001f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10001f6a:	46ce      	mov	lr, r9
10001f6c:	4647      	mov	r7, r8
10001f6e:	0006      	movs	r6, r0
10001f70:	000c      	movs	r4, r1
10001f72:	b580      	push	{r7, lr}
    if (!id || !ph_get_node(heap, id)->sibling) {
10001f74:	2900      	cmp	r1, #0
10001f76:	d007      	beq.n	10001f88 <ph_merge_two_pass+0x20>
    return heap->nodes + id - 1;
10001f78:	004d      	lsls	r5, r1, #1
10001f7a:	6803      	ldr	r3, [r0, #0]
10001f7c:	186d      	adds	r5, r5, r1
10001f7e:	3d03      	subs	r5, #3
10001f80:	195a      	adds	r2, r3, r5
10001f82:	7857      	ldrb	r7, [r2, #1]
10001f84:	2f00      	cmp	r7, #0
10001f86:	d104      	bne.n	10001f92 <ph_merge_two_pass+0x2a>
        b = ph_get_node(heap, id)->sibling;
        new_node = ph_get_node(heap, b)->sibling;
        ph_get_node(heap, a)->sibling = ph_get_node(heap, b)->sibling = 0;
        return ph_merge_nodes(heap, ph_merge_nodes(heap, a, b), ph_merge_two_pass(heap, new_node));
    }
}
10001f88:	0020      	movs	r0, r4
10001f8a:	bcc0      	pop	{r6, r7}
10001f8c:	46b9      	mov	r9, r7
10001f8e:	46b0      	mov	r8, r6
10001f90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10001f92:	0079      	lsls	r1, r7, #1
10001f94:	19c9      	adds	r1, r1, r7
10001f96:	3903      	subs	r1, #3
10001f98:	4688      	mov	r8, r1
10001f9a:	4443      	add	r3, r8
        new_node = ph_get_node(heap, b)->sibling;
10001f9c:	7859      	ldrb	r1, [r3, #1]
10001f9e:	4689      	mov	r9, r1
        ph_get_node(heap, a)->sibling = ph_get_node(heap, b)->sibling = 0;
10001fa0:	2100      	movs	r1, #0
10001fa2:	7059      	strb	r1, [r3, #1]
10001fa4:	7051      	strb	r1, [r2, #1]
    if (heap->comparator(heap->user_data, a, b)) {
10001fa6:	6873      	ldr	r3, [r6, #4]
10001fa8:	003a      	movs	r2, r7
10001faa:	0021      	movs	r1, r4
10001fac:	6880      	ldr	r0, [r0, #8]
10001fae:	4798      	blx	r3
10001fb0:	6833      	ldr	r3, [r6, #0]
10001fb2:	2800      	cmp	r0, #0
10001fb4:	d014      	beq.n	10001fe0 <ph_merge_two_pass+0x78>
    return heap->nodes + id - 1;
10001fb6:	4642      	mov	r2, r8
10001fb8:	189a      	adds	r2, r3, r2
    c->parent = parent_id;
10001fba:	7094      	strb	r4, [r2, #2]
    return heap->nodes + id - 1;
10001fbc:	1959      	adds	r1, r3, r5
    if (!n->child) {
10001fbe:	5d5b      	ldrb	r3, [r3, r5]
10001fc0:	2b00      	cmp	r3, #0
10001fc2:	d000      	beq.n	10001fc6 <ph_merge_two_pass+0x5e>
        c->sibling = n->child;
10001fc4:	7053      	strb	r3, [r2, #1]
        n->child = child_id;
10001fc6:	700f      	strb	r7, [r1, #0]
10001fc8:	0027      	movs	r7, r4
        return ph_merge_nodes(heap, ph_merge_nodes(heap, a, b), ph_merge_two_pass(heap, new_node));
10001fca:	4649      	mov	r1, r9
10001fcc:	0030      	movs	r0, r6
10001fce:	f7ff ffcb 	bl	10001f68 <ph_merge_two_pass>
10001fd2:	0039      	movs	r1, r7
10001fd4:	0002      	movs	r2, r0
10001fd6:	0030      	movs	r0, r6
10001fd8:	f7ff ff60 	bl	10001e9c <ph_merge_nodes>
10001fdc:	0004      	movs	r4, r0
10001fde:	e7d3      	b.n	10001f88 <ph_merge_two_pass+0x20>
    return heap->nodes + id - 1;
10001fe0:	4642      	mov	r2, r8
    if (!n->child) {
10001fe2:	4641      	mov	r1, r8
    return heap->nodes + id - 1;
10001fe4:	195d      	adds	r5, r3, r5
    c->parent = parent_id;
10001fe6:	70af      	strb	r7, [r5, #2]
    return heap->nodes + id - 1;
10001fe8:	189a      	adds	r2, r3, r2
    if (!n->child) {
10001fea:	5c5b      	ldrb	r3, [r3, r1]
10001fec:	2b00      	cmp	r3, #0
10001fee:	d000      	beq.n	10001ff2 <ph_merge_two_pass+0x8a>
        c->sibling = n->child;
10001ff0:	706b      	strb	r3, [r5, #1]
        n->child = child_id;
10001ff2:	7014      	strb	r4, [r2, #0]
10001ff4:	e7e9      	b.n	10001fca <ph_merge_two_pass+0x62>
10001ff6:	46c0      	nop			; (mov r8, r8)

10001ff8 <ph_remove_any_head>:

static pheap_node_id_t ph_remove_any_head(pheap_t *heap, pheap_node_id_t root_id, bool reserve) {
10001ff8:	b5f0      	push	{r4, r5, r6, r7, lr}
10001ffa:	4657      	mov	r7, sl
10001ffc:	4645      	mov	r5, r8
10001ffe:	46de      	mov	lr, fp
10002000:	464e      	mov	r6, r9
10002002:	b5e0      	push	{r5, r6, r7, lr}
10002004:	000d      	movs	r5, r1
    return heap->nodes + id - 1;
10002006:	006b      	lsls	r3, r5, #1
10002008:	6801      	ldr	r1, [r0, #0]
1000200a:	195b      	adds	r3, r3, r5
1000200c:	1edf      	subs	r7, r3, #3
1000200e:	0004      	movs	r4, r0
    assert(root_id);
//    printf("Removing head %d (parent %d sibling %d)\n", root_id, ph_get_node(heap, root_id)->parent, ph_get_node(heap, root_id)->sibling);
    assert(!ph_get_node(heap, root_id)->sibling);
    assert(!ph_get_node(heap, root_id)->parent);
    pheap_node_id_t new_root_id = ph_merge_two_pass(heap, ph_get_node(heap, root_id)->child);
10002010:	5dc8      	ldrb	r0, [r1, r7]
static pheap_node_id_t ph_remove_any_head(pheap_t *heap, pheap_node_id_t root_id, bool reserve) {
10002012:	b083      	sub	sp, #12
10002014:	9201      	str	r2, [sp, #4]
10002016:	19ca      	adds	r2, r1, r7
    if (!id || !ph_get_node(heap, id)->sibling) {
10002018:	2800      	cmp	r0, #0
1000201a:	d04c      	beq.n	100020b6 <ph_remove_any_head+0xbe>
1000201c:	0043      	lsls	r3, r0, #1
1000201e:	181b      	adds	r3, r3, r0
10002020:	3b03      	subs	r3, #3
10002022:	18cb      	adds	r3, r1, r3
10002024:	785e      	ldrb	r6, [r3, #1]
10002026:	46b4      	mov	ip, r6
10002028:	2e00      	cmp	r6, #0
1000202a:	d116      	bne.n	1000205a <ph_remove_any_head+0x62>
    if (!reserve) {
1000202c:	9e01      	ldr	r6, [sp, #4]
1000202e:	2e00      	cmp	r6, #0
10002030:	d13e      	bne.n	100020b0 <ph_remove_any_head+0xb8>
        if (heap->free_tail_id) {
10002032:	7be6      	ldrb	r6, [r4, #15]
10002034:	2e00      	cmp	r6, #0
10002036:	d004      	beq.n	10002042 <ph_remove_any_head+0x4a>
            ph_get_node(heap, heap->free_tail_id)->sibling = root_id;
10002038:	0073      	lsls	r3, r6, #1
1000203a:	199b      	adds	r3, r3, r6
1000203c:	18cb      	adds	r3, r1, r3
1000203e:	3b03      	subs	r3, #3
10002040:	705d      	strb	r5, [r3, #1]
        }
        heap->free_tail_id = root_id;
10002042:	73e5      	strb	r5, [r4, #15]
    }
    if (new_root_id) ph_get_node(heap, new_root_id)->parent = 0;
10002044:	2800      	cmp	r0, #0
10002046:	d12f      	bne.n	100020a8 <ph_remove_any_head+0xb0>
    ph_get_node(heap, root_id)->sibling = 0;
10002048:	2300      	movs	r3, #0
1000204a:	7053      	strb	r3, [r2, #1]
    return new_root_id;
}
1000204c:	b003      	add	sp, #12
1000204e:	bcf0      	pop	{r4, r5, r6, r7}
10002050:	46bb      	mov	fp, r7
10002052:	46b2      	mov	sl, r6
10002054:	46a9      	mov	r9, r5
10002056:	46a0      	mov	r8, r4
10002058:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000205a:	0072      	lsls	r2, r6, #1
1000205c:	4462      	add	r2, ip
1000205e:	3a03      	subs	r2, #3
10002060:	1889      	adds	r1, r1, r2
        new_node = ph_get_node(heap, b)->sibling;
10002062:	784a      	ldrb	r2, [r1, #1]
10002064:	4690      	mov	r8, r2
        ph_get_node(heap, a)->sibling = ph_get_node(heap, b)->sibling = 0;
10002066:	2200      	movs	r2, #0
10002068:	704a      	strb	r2, [r1, #1]
1000206a:	4691      	mov	r9, r2
1000206c:	705a      	strb	r2, [r3, #1]
        return ph_merge_nodes(heap, ph_merge_nodes(heap, a, b), ph_merge_two_pass(heap, new_node));
1000206e:	0001      	movs	r1, r0
10002070:	0032      	movs	r2, r6
10002072:	0020      	movs	r0, r4
10002074:	f7ff ff12 	bl	10001e9c <ph_merge_nodes>
    if (!id || !ph_get_node(heap, id)->sibling) {
10002078:	4643      	mov	r3, r8
        return ph_merge_nodes(heap, ph_merge_nodes(heap, a, b), ph_merge_two_pass(heap, new_node));
1000207a:	4682      	mov	sl, r0
    if (!id || !ph_get_node(heap, id)->sibling) {
1000207c:	2b00      	cmp	r3, #0
1000207e:	d007      	beq.n	10002090 <ph_remove_any_head+0x98>
10002080:	005b      	lsls	r3, r3, #1
10002082:	6821      	ldr	r1, [r4, #0]
10002084:	4443      	add	r3, r8
10002086:	3b03      	subs	r3, #3
10002088:	18cb      	adds	r3, r1, r3
1000208a:	785a      	ldrb	r2, [r3, #1]
1000208c:	2a00      	cmp	r2, #0
1000208e:	d116      	bne.n	100020be <ph_remove_any_head+0xc6>
        return ph_merge_nodes(heap, ph_merge_nodes(heap, a, b), ph_merge_two_pass(heap, new_node));
10002090:	4642      	mov	r2, r8
10002092:	4651      	mov	r1, sl
10002094:	0020      	movs	r0, r4
10002096:	f7ff ff01 	bl	10001e9c <ph_merge_nodes>
1000209a:	6821      	ldr	r1, [r4, #0]
    if (!reserve) {
1000209c:	9b01      	ldr	r3, [sp, #4]
1000209e:	19ca      	adds	r2, r1, r7
100020a0:	2b00      	cmp	r3, #0
100020a2:	d0c6      	beq.n	10002032 <ph_remove_any_head+0x3a>
    if (new_root_id) ph_get_node(heap, new_root_id)->parent = 0;
100020a4:	2800      	cmp	r0, #0
100020a6:	d0cf      	beq.n	10002048 <ph_remove_any_head+0x50>
100020a8:	0043      	lsls	r3, r0, #1
100020aa:	181b      	adds	r3, r3, r0
100020ac:	3b03      	subs	r3, #3
100020ae:	18cb      	adds	r3, r1, r3
100020b0:	2100      	movs	r1, #0
100020b2:	7099      	strb	r1, [r3, #2]
100020b4:	e7c8      	b.n	10002048 <ph_remove_any_head+0x50>
    if (!reserve) {
100020b6:	9b01      	ldr	r3, [sp, #4]
100020b8:	2b00      	cmp	r3, #0
100020ba:	d1c5      	bne.n	10002048 <ph_remove_any_head+0x50>
100020bc:	e7b9      	b.n	10002032 <ph_remove_any_head+0x3a>
100020be:	0050      	lsls	r0, r2, #1
100020c0:	1880      	adds	r0, r0, r2
100020c2:	3803      	subs	r0, #3
100020c4:	1809      	adds	r1, r1, r0
        new_node = ph_get_node(heap, b)->sibling;
100020c6:	7848      	ldrb	r0, [r1, #1]
100020c8:	4683      	mov	fp, r0
        ph_get_node(heap, a)->sibling = ph_get_node(heap, b)->sibling = 0;
100020ca:	4648      	mov	r0, r9
100020cc:	7048      	strb	r0, [r1, #1]
100020ce:	7058      	strb	r0, [r3, #1]
        return ph_merge_nodes(heap, ph_merge_nodes(heap, a, b), ph_merge_two_pass(heap, new_node));
100020d0:	4641      	mov	r1, r8
100020d2:	0020      	movs	r0, r4
100020d4:	f7ff fee2 	bl	10001e9c <ph_merge_nodes>
100020d8:	4659      	mov	r1, fp
100020da:	4680      	mov	r8, r0
100020dc:	0020      	movs	r0, r4
100020de:	f7ff ff43 	bl	10001f68 <ph_merge_two_pass>
100020e2:	4641      	mov	r1, r8
100020e4:	0002      	movs	r2, r0
100020e6:	0020      	movs	r0, r4
100020e8:	f7ff fed8 	bl	10001e9c <ph_merge_nodes>
100020ec:	4680      	mov	r8, r0
100020ee:	e7cf      	b.n	10002090 <ph_remove_any_head+0x98>

100020f0 <ph_remove_head_reserve>:

pheap_node_id_t ph_remove_head_reserve(pheap_t *heap, bool reserve) {
100020f0:	b5f0      	push	{r4, r5, r6, r7, lr}
100020f2:	4657      	mov	r7, sl
100020f4:	4645      	mov	r5, r8
100020f6:	46de      	mov	lr, fp
100020f8:	464e      	mov	r6, r9
100020fa:	b5e0      	push	{r5, r6, r7, lr}
100020fc:	b083      	sub	sp, #12
100020fe:	9101      	str	r1, [sp, #4]
    heap->root_id = ph_merge_nodes(heap, heap->root_id, id);
    return heap->root_id;
}

static inline pheap_node_id_t ph_peek_head(pheap_t *heap) {
    return heap->root_id;
10002100:	7b45      	ldrb	r5, [r0, #13]
10002102:	0004      	movs	r4, r0
    return heap->nodes + id - 1;
10002104:	006b      	lsls	r3, r5, #1
10002106:	6800      	ldr	r0, [r0, #0]
10002108:	195b      	adds	r3, r3, r5
1000210a:	1edf      	subs	r7, r3, #3
    pheap_node_id_t new_root_id = ph_merge_two_pass(heap, ph_get_node(heap, root_id)->child);
1000210c:	5dc1      	ldrb	r1, [r0, r7]
1000210e:	19c2      	adds	r2, r0, r7
    if (!id || !ph_get_node(heap, id)->sibling) {
10002110:	2900      	cmp	r1, #0
10002112:	d04e      	beq.n	100021b2 <ph_remove_head_reserve+0xc2>
10002114:	004b      	lsls	r3, r1, #1
10002116:	185b      	adds	r3, r3, r1
10002118:	3b03      	subs	r3, #3
1000211a:	18c3      	adds	r3, r0, r3
1000211c:	785e      	ldrb	r6, [r3, #1]
1000211e:	46b4      	mov	ip, r6
10002120:	2e00      	cmp	r6, #0
10002122:	d118      	bne.n	10002156 <ph_remove_head_reserve+0x66>
    if (!reserve) {
10002124:	9e01      	ldr	r6, [sp, #4]
10002126:	2e00      	cmp	r6, #0
10002128:	d140      	bne.n	100021ac <ph_remove_head_reserve+0xbc>
        if (heap->free_tail_id) {
1000212a:	7be6      	ldrb	r6, [r4, #15]
1000212c:	2e00      	cmp	r6, #0
1000212e:	d004      	beq.n	1000213a <ph_remove_head_reserve+0x4a>
            ph_get_node(heap, heap->free_tail_id)->sibling = root_id;
10002130:	0073      	lsls	r3, r6, #1
10002132:	199b      	adds	r3, r3, r6
10002134:	18c3      	adds	r3, r0, r3
10002136:	3b03      	subs	r3, #3
10002138:	705d      	strb	r5, [r3, #1]
        heap->free_tail_id = root_id;
1000213a:	73e5      	strb	r5, [r4, #15]
    if (new_root_id) ph_get_node(heap, new_root_id)->parent = 0;
1000213c:	2900      	cmp	r1, #0
1000213e:	d131      	bne.n	100021a4 <ph_remove_head_reserve+0xb4>
    ph_get_node(heap, root_id)->sibling = 0;
10002140:	2300      	movs	r3, #0
    pheap_node_id_t old_root_id = ph_peek_head(heap);
    heap->root_id = ph_remove_any_head(heap, old_root_id, reserve);
    return old_root_id;
}
10002142:	0028      	movs	r0, r5
    ph_get_node(heap, root_id)->sibling = 0;
10002144:	7053      	strb	r3, [r2, #1]
    heap->root_id = ph_remove_any_head(heap, old_root_id, reserve);
10002146:	7361      	strb	r1, [r4, #13]
}
10002148:	b003      	add	sp, #12
1000214a:	bcf0      	pop	{r4, r5, r6, r7}
1000214c:	46bb      	mov	fp, r7
1000214e:	46b2      	mov	sl, r6
10002150:	46a9      	mov	r9, r5
10002152:	46a0      	mov	r8, r4
10002154:	bdf0      	pop	{r4, r5, r6, r7, pc}
10002156:	0072      	lsls	r2, r6, #1
10002158:	4462      	add	r2, ip
1000215a:	3a03      	subs	r2, #3
1000215c:	1880      	adds	r0, r0, r2
        new_node = ph_get_node(heap, b)->sibling;
1000215e:	7842      	ldrb	r2, [r0, #1]
10002160:	4690      	mov	r8, r2
        ph_get_node(heap, a)->sibling = ph_get_node(heap, b)->sibling = 0;
10002162:	2200      	movs	r2, #0
10002164:	7042      	strb	r2, [r0, #1]
10002166:	4691      	mov	r9, r2
10002168:	705a      	strb	r2, [r3, #1]
        return ph_merge_nodes(heap, ph_merge_nodes(heap, a, b), ph_merge_two_pass(heap, new_node));
1000216a:	0020      	movs	r0, r4
1000216c:	0032      	movs	r2, r6
1000216e:	f7ff fe95 	bl	10001e9c <ph_merge_nodes>
    if (!id || !ph_get_node(heap, id)->sibling) {
10002172:	4643      	mov	r3, r8
        return ph_merge_nodes(heap, ph_merge_nodes(heap, a, b), ph_merge_two_pass(heap, new_node));
10002174:	4682      	mov	sl, r0
    if (!id || !ph_get_node(heap, id)->sibling) {
10002176:	2b00      	cmp	r3, #0
10002178:	d007      	beq.n	1000218a <ph_remove_head_reserve+0x9a>
1000217a:	005b      	lsls	r3, r3, #1
1000217c:	6821      	ldr	r1, [r4, #0]
1000217e:	4443      	add	r3, r8
10002180:	3b03      	subs	r3, #3
10002182:	18cb      	adds	r3, r1, r3
10002184:	785a      	ldrb	r2, [r3, #1]
10002186:	2a00      	cmp	r2, #0
10002188:	d117      	bne.n	100021ba <ph_remove_head_reserve+0xca>
        return ph_merge_nodes(heap, ph_merge_nodes(heap, a, b), ph_merge_two_pass(heap, new_node));
1000218a:	4642      	mov	r2, r8
1000218c:	4651      	mov	r1, sl
1000218e:	0020      	movs	r0, r4
10002190:	f7ff fe84 	bl	10001e9c <ph_merge_nodes>
    if (!reserve) {
10002194:	9b01      	ldr	r3, [sp, #4]
        return ph_merge_nodes(heap, ph_merge_nodes(heap, a, b), ph_merge_two_pass(heap, new_node));
10002196:	0001      	movs	r1, r0
10002198:	6820      	ldr	r0, [r4, #0]
1000219a:	19c2      	adds	r2, r0, r7
    if (!reserve) {
1000219c:	2b00      	cmp	r3, #0
1000219e:	d0c4      	beq.n	1000212a <ph_remove_head_reserve+0x3a>
    if (new_root_id) ph_get_node(heap, new_root_id)->parent = 0;
100021a0:	2900      	cmp	r1, #0
100021a2:	d0cd      	beq.n	10002140 <ph_remove_head_reserve+0x50>
100021a4:	004b      	lsls	r3, r1, #1
100021a6:	185b      	adds	r3, r3, r1
100021a8:	3b03      	subs	r3, #3
100021aa:	18c3      	adds	r3, r0, r3
100021ac:	2000      	movs	r0, #0
100021ae:	7098      	strb	r0, [r3, #2]
100021b0:	e7c6      	b.n	10002140 <ph_remove_head_reserve+0x50>
    if (!reserve) {
100021b2:	9b01      	ldr	r3, [sp, #4]
100021b4:	2b00      	cmp	r3, #0
100021b6:	d1c3      	bne.n	10002140 <ph_remove_head_reserve+0x50>
100021b8:	e7b7      	b.n	1000212a <ph_remove_head_reserve+0x3a>
100021ba:	0050      	lsls	r0, r2, #1
100021bc:	1880      	adds	r0, r0, r2
100021be:	3803      	subs	r0, #3
100021c0:	1809      	adds	r1, r1, r0
        new_node = ph_get_node(heap, b)->sibling;
100021c2:	7848      	ldrb	r0, [r1, #1]
100021c4:	4683      	mov	fp, r0
        ph_get_node(heap, a)->sibling = ph_get_node(heap, b)->sibling = 0;
100021c6:	4648      	mov	r0, r9
100021c8:	7048      	strb	r0, [r1, #1]
100021ca:	7058      	strb	r0, [r3, #1]
        return ph_merge_nodes(heap, ph_merge_nodes(heap, a, b), ph_merge_two_pass(heap, new_node));
100021cc:	4641      	mov	r1, r8
100021ce:	0020      	movs	r0, r4
100021d0:	f7ff fe64 	bl	10001e9c <ph_merge_nodes>
100021d4:	4659      	mov	r1, fp
100021d6:	4680      	mov	r8, r0
100021d8:	0020      	movs	r0, r4
100021da:	f7ff fec5 	bl	10001f68 <ph_merge_two_pass>
100021de:	4641      	mov	r1, r8
100021e0:	0002      	movs	r2, r0
100021e2:	0020      	movs	r0, r4
100021e4:	f7ff fe5a 	bl	10001e9c <ph_merge_nodes>
100021e8:	4680      	mov	r8, r0
100021ea:	e7ce      	b.n	1000218a <ph_remove_head_reserve+0x9a>

100021ec <ph_delete>:

#include <stdio.h>
bool ph_delete(pheap_t *heap, pheap_node_id_t id) {
100021ec:	b570      	push	{r4, r5, r6, lr}
100021ee:	0004      	movs	r4, r0
    // 1) trivial cases
    if (!id) return false;
100021f0:	2900      	cmp	r1, #0
100021f2:	d02c      	beq.n	1000224e <ph_delete+0x62>
    if (id == heap->root_id) {
100021f4:	7b43      	ldrb	r3, [r0, #13]
100021f6:	428b      	cmp	r3, r1
100021f8:	d02e      	beq.n	10002258 <ph_delete+0x6c>
100021fa:	6805      	ldr	r5, [r0, #0]
100021fc:	0048      	lsls	r0, r1, #1
100021fe:	1840      	adds	r0, r0, r1
10002200:	3803      	subs	r0, #3
10002202:	1828      	adds	r0, r5, r0
        ph_remove_head(heap);
        return true;
    }
    // 2) unlink the node from the tree
    pheap_node_t *node = ph_get_node(heap, id);
    if (!node->parent) return false; // not in tree
10002204:	7882      	ldrb	r2, [r0, #2]
10002206:	2a00      	cmp	r2, #0
10002208:	d021      	beq.n	1000224e <ph_delete+0x62>
1000220a:	0053      	lsls	r3, r2, #1
1000220c:	189b      	adds	r3, r3, r2
1000220e:	3b03      	subs	r3, #3
    pheap_node_t *parent = ph_get_node(heap, node->parent);
    if (parent->child == id) {
10002210:	5cea      	ldrb	r2, [r5, r3]
10002212:	18ee      	adds	r6, r5, r3
10002214:	428a      	cmp	r2, r1
10002216:	d102      	bne.n	1000221e <ph_delete+0x32>
10002218:	e01b      	b.n	10002252 <ph_delete+0x66>
                prev_sibling->sibling = node->sibling;
                found = true;
                break;
            }
            prev_sibling_id = prev_sibling->sibling;
        } while (prev_sibling_id);
1000221a:	2a00      	cmp	r2, #0
1000221c:	d008      	beq.n	10002230 <ph_delete+0x44>
1000221e:	0053      	lsls	r3, r2, #1
10002220:	189b      	adds	r3, r3, r2
10002222:	3b03      	subs	r3, #3
10002224:	18eb      	adds	r3, r5, r3
            if (prev_sibling->sibling == id) {
10002226:	785a      	ldrb	r2, [r3, #1]
10002228:	428a      	cmp	r2, r1
1000222a:	d1f6      	bne.n	1000221a <ph_delete+0x2e>
                prev_sibling->sibling = node->sibling;
1000222c:	7842      	ldrb	r2, [r0, #1]
1000222e:	705a      	strb	r2, [r3, #1]
        assert(found);
    }
    node->sibling = node->parent = 0;
10002230:	2300      	movs	r3, #0
//    ph_dump(heap, NULL, NULL);
    // 3) remove it from the head of its own subtree
    pheap_node_id_t new_sub_tree = ph_remove_any_head(heap, id, false);
10002232:	2200      	movs	r2, #0
    node->sibling = node->parent = 0;
10002234:	7083      	strb	r3, [r0, #2]
10002236:	7043      	strb	r3, [r0, #1]
    pheap_node_id_t new_sub_tree = ph_remove_any_head(heap, id, false);
10002238:	0020      	movs	r0, r4
1000223a:	f7ff fedd 	bl	10001ff8 <ph_remove_any_head>
    assert(new_sub_tree != heap->root_id);
    heap->root_id = ph_merge_nodes(heap, heap->root_id, new_sub_tree);
1000223e:	7b61      	ldrb	r1, [r4, #13]
    pheap_node_id_t new_sub_tree = ph_remove_any_head(heap, id, false);
10002240:	0002      	movs	r2, r0
    heap->root_id = ph_merge_nodes(heap, heap->root_id, new_sub_tree);
10002242:	0020      	movs	r0, r4
10002244:	f7ff fe2a 	bl	10001e9c <ph_merge_nodes>
10002248:	7360      	strb	r0, [r4, #13]
    return true;
1000224a:	2001      	movs	r0, #1
1000224c:	e000      	b.n	10002250 <ph_delete+0x64>
    if (!id) return false;
1000224e:	2000      	movs	r0, #0
}
10002250:	bd70      	pop	{r4, r5, r6, pc}
        parent->child = node->sibling;
10002252:	7843      	ldrb	r3, [r0, #1]
10002254:	7033      	strb	r3, [r6, #0]
10002256:	e7eb      	b.n	10002230 <ph_delete+0x44>
    heap->root_id = ph_remove_any_head(heap, old_root_id, reserve);
10002258:	2200      	movs	r2, #0
1000225a:	0019      	movs	r1, r3
1000225c:	f7ff fecc 	bl	10001ff8 <ph_remove_any_head>
10002260:	7360      	strb	r0, [r4, #13]
        return true;
10002262:	2001      	movs	r0, #1
10002264:	e7f4      	b.n	10002250 <ph_delete+0x64>
10002266:	46c0      	nop			; (mov r8, r8)

10002268 <__wrap_malloc>:
        panic("Out of memory");
    }
#endif
}

void *__wrap_malloc(size_t size) {
10002268:	b510      	push	{r4, lr}
#if PICO_USE_MALLOC_MUTEX
    mutex_enter_blocking(&malloc_mutex);
#endif
    void *rc = __real_malloc(size);
1000226a:	f006 fdef 	bl	10008e4c <malloc>
        printf("malloc %d %p->%p\n", (uint) size, rc, ((uint8_t *) rc) + size);
    }
#endif
    check_alloc(rc, size);
    return rc;
}
1000226e:	bd10      	pop	{r4, pc}

10002270 <__wrap_calloc>:

void *__wrap_calloc(size_t count, size_t size) {
10002270:	b510      	push	{r4, lr}
#if PICO_USE_MALLOC_MUTEX
    mutex_enter_blocking(&malloc_mutex);
#endif
    void *rc = __real_calloc(count, size);
10002272:	f006 fd8b 	bl	10008d8c <calloc>
        printf("calloc %d %p->%p\n", (uint) (count * size), rc, ((uint8_t *) rc) + size);
    }
#endif
    check_alloc(rc, size);
    return rc;
}
10002276:	bd10      	pop	{r4, pc}

10002278 <pio_add_program>:
    uint32_t program_mask = (1u << program->length) - 1;
    _used_instruction_space[pio_get_index(pio)] |= program_mask << offset;
}

// these assert if unable
uint pio_add_program(PIO pio, const pio_program_t *program) {
10002278:	b5f0      	push	{r4, r5, r6, r7, lr}
1000227a:	46d6      	mov	lr, sl
1000227c:	464f      	mov	r7, r9
1000227e:	4646      	mov	r6, r8
10002280:	4688      	mov	r8, r1
10002282:	b5c0      	push	{r6, r7, lr}
10002284:	2405      	movs	r4, #5
10002286:	0006      	movs	r6, r0
    uint32_t save = hw_claim_lock();
10002288:	f7ff f860 	bl	1000134c <hw_claim_lock>
1000228c:	4643      	mov	r3, r8
1000228e:	791f      	ldrb	r7, [r3, #4]
10002290:	571c      	ldrsb	r4, [r3, r4]
 * \param pio The PIO instance; either \ref pio0 or \ref pio1
 * \return the PIO instance number (either 0 or 1)
 */
static inline uint pio_get_index(PIO pio) {
    assert(pio == pio0 || pio == pio1);
    return pio == pio1 ? 1 : 0;
10002292:	4b28      	ldr	r3, [pc, #160]	; (10002334 <pio_add_program+0xbc>)
10002294:	4681      	mov	r9, r0
10002296:	18f0      	adds	r0, r6, r3
10002298:	4243      	negs	r3, r0
1000229a:	4158      	adcs	r0, r3
    uint32_t used_mask = _used_instruction_space[pio_get_index(pio)];
1000229c:	4b26      	ldr	r3, [pc, #152]	; (10002338 <pio_add_program+0xc0>)
1000229e:	469a      	mov	sl, r3
100022a0:	0083      	lsls	r3, r0, #2
100022a2:	469c      	mov	ip, r3
100022a4:	4653      	mov	r3, sl
100022a6:	4662      	mov	r2, ip
100022a8:	5898      	ldr	r0, [r3, r2]
    uint32_t program_mask = (1u << program->length) - 1;
100022aa:	2201      	movs	r2, #1
        if (program->origin > 32 - program->length) return -1;
100022ac:	2320      	movs	r3, #32
    uint32_t program_mask = (1u << program->length) - 1;
100022ae:	40ba      	lsls	r2, r7
        if (program->origin > 32 - program->length) return -1;
100022b0:	1bdb      	subs	r3, r3, r7
    uint32_t program_mask = (1u << program->length) - 1;
100022b2:	3a01      	subs	r2, #1
    if (program->origin >= 0) {
100022b4:	2c00      	cmp	r4, #0
100022b6:	db32      	blt.n	1000231e <pio_add_program+0xa6>
        if (program->origin > 32 - program->length) return -1;
100022b8:	429c      	cmp	r4, r3
100022ba:	dc2d      	bgt.n	10002318 <pio_add_program+0xa0>
        return used_mask & (program_mask << program->origin) ? -1 : program->origin;
100022bc:	40a2      	lsls	r2, r4
100022be:	0015      	movs	r5, r2
100022c0:	4210      	tst	r0, r2
100022c2:	d129      	bne.n	10002318 <pio_add_program+0xa0>
    for (uint i = 0; i < program->length; ++i) {
100022c4:	2f00      	cmp	r7, #0
100022c6:	d01a      	beq.n	100022fe <pio_add_program+0x86>
        uint16_t instr = program->instructions[i];
100022c8:	4643      	mov	r3, r8
100022ca:	785a      	ldrb	r2, [r3, #1]
100022cc:	7819      	ldrb	r1, [r3, #0]
100022ce:	0212      	lsls	r2, r2, #8
100022d0:	4311      	orrs	r1, r2
100022d2:	4642      	mov	r2, r8
100022d4:	789b      	ldrb	r3, [r3, #2]
100022d6:	78d2      	ldrb	r2, [r2, #3]
100022d8:	041b      	lsls	r3, r3, #16
100022da:	430b      	orrs	r3, r1
100022dc:	0612      	lsls	r2, r2, #24
100022de:	431a      	orrs	r2, r3
100022e0:	4690      	mov	r8, r2
    for (uint i = 0; i < program->length; ++i) {
100022e2:	2200      	movs	r2, #0
        uint16_t instr = program->instructions[i];
100022e4:	4641      	mov	r1, r8
100022e6:	0053      	lsls	r3, r2, #1
100022e8:	5ac9      	ldrh	r1, [r1, r3]
        pio->instr_mem[offset + i] = pio_instr_bits_jmp != _pio_major_instr_bits(instr) ? instr : instr + offset;
100022ea:	0b4b      	lsrs	r3, r1, #13
100022ec:	d100      	bne.n	100022f0 <pio_add_program+0x78>
100022ee:	1909      	adds	r1, r1, r4
100022f0:	1913      	adds	r3, r2, r4
100022f2:	3312      	adds	r3, #18
100022f4:	009b      	lsls	r3, r3, #2
    for (uint i = 0; i < program->length; ++i) {
100022f6:	3201      	adds	r2, #1
        pio->instr_mem[offset + i] = pio_instr_bits_jmp != _pio_major_instr_bits(instr) ? instr : instr + offset;
100022f8:	5199      	str	r1, [r3, r6]
    for (uint i = 0; i < program->length; ++i) {
100022fa:	4297      	cmp	r7, r2
100022fc:	d8f2      	bhi.n	100022e4 <pio_add_program+0x6c>
    _used_instruction_space[pio_get_index(pio)] |= program_mask << offset;
100022fe:	4653      	mov	r3, sl
10002300:	4662      	mov	r2, ip
10002302:	4305      	orrs	r5, r0
10002304:	509d      	str	r5, [r3, r2]
    int offset = _pio_find_offset_for_program(pio, program);
    if (offset < 0) {
        panic("No program space");
    }
    _pio_add_program_at_offset(pio, program, offset);
    hw_claim_unlock(save);
10002306:	4648      	mov	r0, r9
10002308:	f7ff f82c 	bl	10001364 <hw_claim_unlock>
    return offset;
}
1000230c:	0020      	movs	r0, r4
1000230e:	bce0      	pop	{r5, r6, r7}
10002310:	46ba      	mov	sl, r7
10002312:	46b1      	mov	r9, r6
10002314:	46a8      	mov	r8, r5
10002316:	bdf0      	pop	{r4, r5, r6, r7, pc}
        panic("No program space");
10002318:	4808      	ldr	r0, [pc, #32]	; (1000233c <pio_add_program+0xc4>)
1000231a:	f001 fc4b 	bl	10003bb4 <panic>
        for (int i = 32 - program->length; i >= 0; i--) {
1000231e:	2b00      	cmp	r3, #0
10002320:	da02      	bge.n	10002328 <pio_add_program+0xb0>
10002322:	e7f9      	b.n	10002318 <pio_add_program+0xa0>
10002324:	3b01      	subs	r3, #1
10002326:	d3f7      	bcc.n	10002318 <pio_add_program+0xa0>
            if (!(used_mask & (program_mask << (uint) i))) {
10002328:	0015      	movs	r5, r2
1000232a:	409d      	lsls	r5, r3
1000232c:	001c      	movs	r4, r3
1000232e:	4205      	tst	r5, r0
10002330:	d1f8      	bne.n	10002324 <pio_add_program+0xac>
10002332:	e7c7      	b.n	100022c4 <pio_add_program+0x4c>
10002334:	afd00000 	.word	0xafd00000
10002338:	20039378 	.word	0x20039378
1000233c:	100097e8 	.word	0x100097e8

10002340 <pio_clear_instruction_memory>:
    assert(program_mask == (_used_instruction_space[pio_get_index(pio)] & program_mask));
    _used_instruction_space[pio_get_index(pio)] &= ~program_mask;
    hw_claim_unlock(save);
}

void pio_clear_instruction_memory(PIO pio) {
10002340:	b510      	push	{r4, lr}
10002342:	0004      	movs	r4, r0
    uint32_t save = hw_claim_lock();
10002344:	f7ff f802 	bl	1000134c <hw_claim_lock>
10002348:	4b09      	ldr	r3, [pc, #36]	; (10002370 <pio_clear_instruction_memory+0x30>)
    _used_instruction_space[pio_get_index(pio)] = 0;
1000234a:	2100      	movs	r1, #0
1000234c:	18e3      	adds	r3, r4, r3
1000234e:	425a      	negs	r2, r3
10002350:	4153      	adcs	r3, r2
10002352:	4a08      	ldr	r2, [pc, #32]	; (10002374 <pio_clear_instruction_memory+0x34>)
10002354:	009b      	lsls	r3, r3, #2
10002356:	5099      	str	r1, [r3, r2]
    for(uint i=0;i<PIO_INSTRUCTION_COUNT;i++) {
10002358:	2300      	movs	r3, #0
        pio->instr_mem[i] = pio_encode_jmp(i);
1000235a:	001a      	movs	r2, r3
1000235c:	3212      	adds	r2, #18
1000235e:	0092      	lsls	r2, r2, #2
10002360:	5113      	str	r3, [r2, r4]
    for(uint i=0;i<PIO_INSTRUCTION_COUNT;i++) {
10002362:	3301      	adds	r3, #1
10002364:	2b20      	cmp	r3, #32
10002366:	d1f8      	bne.n	1000235a <pio_clear_instruction_memory+0x1a>
    }
    hw_claim_unlock(save);
10002368:	f7fe fffc 	bl	10001364 <hw_claim_unlock>
}
1000236c:	bd10      	pop	{r4, pc}
1000236e:	46c0      	nop			; (mov r8, r8)
10002370:	afd00000 	.word	0xafd00000
10002374:	20039378 	.word	0x20039378

10002378 <pio_sm_set_consecutive_pindirs>:
        pin_mask &= pin_mask - 1;
    }
    pio->sm[sm].pinctrl = pinctrl_saved;
}

void pio_sm_set_consecutive_pindirs(PIO pio, uint sm, uint pin, uint count, bool is_out) {
10002378:	b5f0      	push	{r4, r5, r6, r7, lr}
1000237a:	464e      	mov	r6, r9
1000237c:	4645      	mov	r5, r8
1000237e:	46de      	mov	lr, fp
10002380:	4657      	mov	r7, sl
10002382:	468a      	mov	sl, r1
    assert(pin < 32u);
    uint32_t pinctrl_saved = pio->sm[sm].pinctrl;
10002384:	0049      	lsls	r1, r1, #1
void pio_sm_set_consecutive_pindirs(PIO pio, uint sm, uint pin, uint count, bool is_out) {
10002386:	b5e0      	push	{r5, r6, r7, lr}
    uint32_t pinctrl_saved = pio->sm[sm].pinctrl;
10002388:	000d      	movs	r5, r1
void pio_sm_set_consecutive_pindirs(PIO pio, uint sm, uint pin, uint count, bool is_out) {
1000238a:	4680      	mov	r8, r0
    uint32_t pinctrl_saved = pio->sm[sm].pinctrl;
1000238c:	4455      	add	r5, sl
1000238e:	00ed      	lsls	r5, r5, #3
10002390:	4445      	add	r5, r8
10002392:	4689      	mov	r9, r1
10002394:	0029      	movs	r1, r5
void pio_sm_set_consecutive_pindirs(PIO pio, uint sm, uint pin, uint count, bool is_out) {
10002396:	ac09      	add	r4, sp, #36	; 0x24
10002398:	7826      	ldrb	r6, [r4, #0]
    uint32_t pinctrl_saved = pio->sm[sm].pinctrl;
1000239a:	31dc      	adds	r1, #220	; 0xdc
    uint pindir_val = is_out ? 0x1f : 0;
1000239c:	1e74      	subs	r4, r6, #1
1000239e:	41a6      	sbcs	r6, r4
    uint32_t pinctrl_saved = pio->sm[sm].pinctrl;
100023a0:	6808      	ldr	r0, [r1, #0]
    uint pindir_val = is_out ? 0x1f : 0;
100023a2:	4274      	negs	r4, r6
    uint32_t pinctrl_saved = pio->sm[sm].pinctrl;
100023a4:	4684      	mov	ip, r0
    uint pindir_val = is_out ? 0x1f : 0;
100023a6:	4814      	ldr	r0, [pc, #80]	; (100023f8 <pio_sm_set_consecutive_pindirs+0x80>)
100023a8:	261f      	movs	r6, #31
100023aa:	4683      	mov	fp, r0
100023ac:	4026      	ands	r6, r4
100023ae:	445e      	add	r6, fp
    while (count > 5) {
100023b0:	2b05      	cmp	r3, #5
100023b2:	d90c      	bls.n	100023ce <pio_sm_set_consecutive_pindirs+0x56>
        pio->sm[sm].pinctrl = (5u << PIO_SM0_PINCTRL_SET_COUNT_LSB) | (pin << PIO_SM0_PINCTRL_SET_BASE_LSB);
100023b4:	20a0      	movs	r0, #160	; 0xa0
        pio_sm_exec(pio, sm, pio_encode_set(pio_pindirs, pindir_val));
        count -= 5;
        pin = (pin + 5) & 0x1f;
100023b6:	271f      	movs	r7, #31
        pio->sm[sm].pinctrl = (5u << PIO_SM0_PINCTRL_SET_COUNT_LSB) | (pin << PIO_SM0_PINCTRL_SET_BASE_LSB);
100023b8:	0540      	lsls	r0, r0, #21
 * \param sm State machine index (0..3)
 * \param instr the encoded PIO instruction
 */
inline static void pio_sm_exec(PIO pio, uint sm, uint instr) {
    check_sm_param(sm);
    pio->sm[sm].instr = instr;
100023ba:	35d8      	adds	r5, #216	; 0xd8
100023bc:	0154      	lsls	r4, r2, #5
100023be:	4304      	orrs	r4, r0
        pin = (pin + 5) & 0x1f;
100023c0:	3205      	adds	r2, #5
        count -= 5;
100023c2:	3b05      	subs	r3, #5
        pio->sm[sm].pinctrl = (5u << PIO_SM0_PINCTRL_SET_COUNT_LSB) | (pin << PIO_SM0_PINCTRL_SET_BASE_LSB);
100023c4:	600c      	str	r4, [r1, #0]
        pin = (pin + 5) & 0x1f;
100023c6:	403a      	ands	r2, r7
100023c8:	602e      	str	r6, [r5, #0]
    while (count > 5) {
100023ca:	2b05      	cmp	r3, #5
100023cc:	d8f6      	bhi.n	100023bc <pio_sm_set_consecutive_pindirs+0x44>
    }
    pio->sm[sm].pinctrl = (count << PIO_SM0_PINCTRL_SET_COUNT_LSB) | (pin << PIO_SM0_PINCTRL_SET_BASE_LSB);
100023ce:	4649      	mov	r1, r9
100023d0:	4451      	add	r1, sl
100023d2:	00c9      	lsls	r1, r1, #3
100023d4:	4441      	add	r1, r8
100023d6:	0152      	lsls	r2, r2, #5
100023d8:	069b      	lsls	r3, r3, #26
100023da:	4313      	orrs	r3, r2
100023dc:	000a      	movs	r2, r1
100023de:	0008      	movs	r0, r1
100023e0:	32dc      	adds	r2, #220	; 0xdc
100023e2:	6013      	str	r3, [r2, #0]
    pio_sm_exec(pio, sm, pio_encode_set(pio_pindirs, pindir_val));
    pio->sm[sm].pinctrl = pinctrl_saved;
100023e4:	4663      	mov	r3, ip
100023e6:	30d8      	adds	r0, #216	; 0xd8
100023e8:	6006      	str	r6, [r0, #0]
100023ea:	6013      	str	r3, [r2, #0]
}
100023ec:	bcf0      	pop	{r4, r5, r6, r7}
100023ee:	46bb      	mov	fp, r7
100023f0:	46b2      	mov	sl, r6
100023f2:	46a9      	mov	r9, r5
100023f4:	46a0      	mov	r8, r4
100023f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
100023f8:	0000e080 	.word	0x0000e080

100023fc <pio_sm_init>:

void pio_sm_init(PIO pio, uint sm, uint initial_pc, const pio_sm_config *config) {
100023fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    pio->ctrl = (pio->ctrl & ~(1u << sm)) | (!!enabled << sm);
100023fe:	2501      	movs	r5, #1
10002400:	408d      	lsls	r5, r1
10002402:	6804      	ldr	r4, [r0, #0]
10002404:	43ac      	bics	r4, r5
    pio->sm[sm].clkdiv = config->clkdiv;
10002406:	004d      	lsls	r5, r1, #1
    pio->ctrl = (pio->ctrl & ~(1u << sm)) | (!!enabled << sm);
10002408:	6004      	str	r4, [r0, #0]
    pio->sm[sm].clkdiv = config->clkdiv;
1000240a:	186c      	adds	r4, r5, r1
1000240c:	00e4      	lsls	r4, r4, #3
1000240e:	1904      	adds	r4, r0, r4
10002410:	0026      	movs	r6, r4
10002412:	36c8      	adds	r6, #200	; 0xc8
    // Halt the machine, set some sensible defaults
    pio_sm_set_enabled(pio, sm, false);

    if (config) {
10002414:	2b00      	cmp	r3, #0
10002416:	d02a      	beq.n	1000246e <pio_sm_init+0x72>
10002418:	681f      	ldr	r7, [r3, #0]
    pio->sm[sm].pinctrl = config->pinctrl;
1000241a:	34dc      	adds	r4, #220	; 0xdc
    pio->sm[sm].clkdiv = config->clkdiv;
1000241c:	6037      	str	r7, [r6, #0]
    pio->sm[sm].execctrl = config->execctrl;
1000241e:	685f      	ldr	r7, [r3, #4]
10002420:	6077      	str	r7, [r6, #4]
    pio->sm[sm].shiftctrl = config->shiftctrl;
10002422:	689f      	ldr	r7, [r3, #8]
    pio->sm[sm].pinctrl = config->pinctrl;
10002424:	68db      	ldr	r3, [r3, #12]
    pio->sm[sm].shiftctrl = config->shiftctrl;
10002426:	60b7      	str	r7, [r6, #8]
    pio->sm[sm].pinctrl = config->pinctrl;
10002428:	6023      	str	r3, [r4, #0]
 * \param sm State machine index (0..3)
 */
static inline void pio_sm_clear_fifos(PIO pio, uint sm) {
    // changing the FIFO join state clears the fifo
    check_sm_param(sm);
    hw_xor_bits(&pio->sm[sm].shiftctrl, PIO_SM0_SHIFTCTRL_FJOIN_RX_BITS);
1000242a:	186d      	adds	r5, r5, r1
1000242c:	00eb      	lsls	r3, r5, #3
1000242e:	001d      	movs	r5, r3
10002430:	2480      	movs	r4, #128	; 0x80
10002432:	35d0      	adds	r5, #208	; 0xd0
10002434:	1945      	adds	r5, r0, r5
10002436:	0164      	lsls	r4, r4, #5
10002438:	432c      	orrs	r4, r5
1000243a:	2580      	movs	r5, #128	; 0x80
1000243c:	062d      	lsls	r5, r5, #24
1000243e:	6025      	str	r5, [r4, #0]
10002440:	6025      	str	r5, [r4, #0]
    const uint32_t fdebug_sm_mask =
            (1u << PIO_FDEBUG_TXOVER_LSB) |
            (1u << PIO_FDEBUG_RXUNDER_LSB) |
            (1u << PIO_FDEBUG_TXSTALL_LSB) |
            (1u << PIO_FDEBUG_RXSTALL_LSB);
    pio->fdebug = fdebug_sm_mask << sm;
10002442:	4c11      	ldr	r4, [pc, #68]	; (10002488 <pio_sm_init+0x8c>)
    pio->ctrl |= 1u << (PIO_CTRL_SM_RESTART_LSB + sm);
10002444:	1d0d      	adds	r5, r1, #4
10002446:	408c      	lsls	r4, r1
10002448:	6084      	str	r4, [r0, #8]
1000244a:	2401      	movs	r4, #1
1000244c:	0027      	movs	r7, r4
1000244e:	40af      	lsls	r7, r5
10002450:	003d      	movs	r5, r7
    pio->ctrl |= 1u << (PIO_CTRL_CLKDIV_RESTART_LSB + sm);
10002452:	3108      	adds	r1, #8
10002454:	408c      	lsls	r4, r1
        assert(arg2 && arg2 <= 32);
    } else {
        assert(arg2 <= 31);
    }
#endif
    return instr_bits | (arg1 << 5u) | (arg2 & 0x1fu);
10002456:	211f      	movs	r1, #31
    pio->ctrl |= 1u << (PIO_CTRL_SM_RESTART_LSB + sm);
10002458:	6806      	ldr	r6, [r0, #0]
1000245a:	400a      	ands	r2, r1
1000245c:	4335      	orrs	r5, r6
1000245e:	6005      	str	r5, [r0, #0]
    pio->ctrl |= 1u << (PIO_CTRL_CLKDIV_RESTART_LSB + sm);
10002460:	6805      	ldr	r5, [r0, #0]
10002462:	432c      	orrs	r4, r5
10002464:	6004      	str	r4, [r0, #0]
    pio->sm[sm].instr = instr;
10002466:	18c0      	adds	r0, r0, r3
10002468:	30d8      	adds	r0, #216	; 0xd8
1000246a:	6002      	str	r2, [r0, #0]

    // Finally, clear some internal SM state
    pio_sm_restart(pio, sm);
    pio_sm_clkdiv_restart(pio, sm);
    pio_sm_exec(pio, sm, pio_encode_jmp(initial_pc));
}
1000246c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    pio->sm[sm].clkdiv = config->clkdiv;
1000246e:	2780      	movs	r7, #128	; 0x80
10002470:	027f      	lsls	r7, r7, #9
10002472:	6037      	str	r7, [r6, #0]
    pio->sm[sm].execctrl = config->execctrl;
10002474:	27f8      	movs	r7, #248	; 0xf8
10002476:	027f      	lsls	r7, r7, #9
10002478:	6077      	str	r7, [r6, #4]
    pio->sm[sm].shiftctrl = config->shiftctrl;
1000247a:	27c0      	movs	r7, #192	; 0xc0
    pio->sm[sm].pinctrl = config->pinctrl;
1000247c:	34dc      	adds	r4, #220	; 0xdc
    pio->sm[sm].shiftctrl = config->shiftctrl;
1000247e:	033f      	lsls	r7, r7, #12
10002480:	60b7      	str	r7, [r6, #8]
    pio->sm[sm].pinctrl = config->pinctrl;
10002482:	6023      	str	r3, [r4, #0]
10002484:	e7d1      	b.n	1000242a <pio_sm_init+0x2e>
10002486:	46c0      	nop			; (mov r8, r8)
10002488:	01010101 	.word	0x01010101

1000248c <running_on_fpga>:
#include "hardware/address_mapped.h"
#include "hardware/regs/tbman.h"
#include "hardware/regs/sysinfo.h"

bool running_on_fpga() {
    return !!((*(io_ro_32 *)TBMAN_BASE) & TBMAN_PLATFORM_FPGA_BITS);
1000248c:	4b02      	ldr	r3, [pc, #8]	; (10002498 <running_on_fpga+0xc>)
1000248e:	6818      	ldr	r0, [r3, #0]
10002490:	0780      	lsls	r0, r0, #30
10002492:	0fc0      	lsrs	r0, r0, #31
}
10002494:	4770      	bx	lr
10002496:	46c0      	nop			; (mov r8, r8)
10002498:	4006c000 	.word	0x4006c000

1000249c <pll_init>:
// For MHZ definitions etc
#include "hardware/clocks.h"
#include "hardware/pll.h"

/// \tag::pll_init_calculations[]
void pll_init(PLL pll, uint32_t refdiv, uint32_t vco_freq, uint32_t post_div1, uint8_t post_div2) {
1000249c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000249e:	46c6      	mov	lr, r8
100024a0:	b500      	push	{lr}
100024a2:	001e      	movs	r6, r3
100024a4:	ab06      	add	r3, sp, #24
100024a6:	781f      	ldrb	r7, [r3, #0]
    // Turn off PLL in case it is already running
    pll->pwr = 0xffffffff;
100024a8:	2301      	movs	r3, #1
100024aa:	425b      	negs	r3, r3
100024ac:	6043      	str	r3, [r0, #4]
    pll->fbdiv_int = 0;
100024ae:	2300      	movs	r3, #0
void pll_init(PLL pll, uint32_t refdiv, uint32_t vco_freq, uint32_t post_div1, uint8_t post_div2) {
100024b0:	0004      	movs	r4, r0
    pll->fbdiv_int = 0;
100024b2:	6083      	str	r3, [r0, #8]

    uint32_t ref_mhz = XOSC_MHZ / refdiv;
    pll->cs = refdiv;
100024b4:	6001      	str	r1, [r0, #0]
    uint32_t ref_mhz = XOSC_MHZ / refdiv;
100024b6:	200c      	movs	r0, #12
void pll_init(PLL pll, uint32_t refdiv, uint32_t vco_freq, uint32_t post_div1, uint8_t post_div2) {
100024b8:	4690      	mov	r8, r2
    uint32_t ref_mhz = XOSC_MHZ / refdiv;
100024ba:	f7fd ff5b 	bl	10000374 <__wrap___aeabi_uidiv>

    // What are we multiplying the reference clock by to get the vco freq
    // (The regs are called div, because you divide the vco output and compare it to the refclk)
    uint32_t fbdiv = vco_freq / (ref_mhz * MHZ);
100024be:	0141      	lsls	r1, r0, #5
100024c0:	1a09      	subs	r1, r1, r0
100024c2:	018d      	lsls	r5, r1, #6
100024c4:	1a69      	subs	r1, r5, r1
100024c6:	00c9      	lsls	r1, r1, #3
100024c8:	1809      	adds	r1, r1, r0
100024ca:	0189      	lsls	r1, r1, #6
100024cc:	4640      	mov	r0, r8
100024ce:	f7fd ff51 	bl	10000374 <__wrap___aeabi_uidiv>
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
100024d2:	21c0      	movs	r1, #192	; 0xc0

    // Turn on PLL
    uint32_t power = PLL_PWR_PD_BITS | // Main power
                     PLL_PWR_VCOPD_BITS; // VCO Power

    hw_clear_bits(&pll->pwr, power);
100024d4:	1d23      	adds	r3, r4, #4
100024d6:	0189      	lsls	r1, r1, #6
100024d8:	4319      	orrs	r1, r3
100024da:	2321      	movs	r3, #33	; 0x21
    pll->fbdiv_int = fbdiv;
100024dc:	60a0      	str	r0, [r4, #8]
100024de:	600b      	str	r3, [r1, #0]

    // Wait for PLL to lock
    while (!(pll->cs & PLL_CS_LOCK_BITS)) tight_loop_contents();
100024e0:	6822      	ldr	r2, [r4, #0]
100024e2:	2a00      	cmp	r2, #0
100024e4:	dafc      	bge.n	100024e0 <pll_init+0x44>
100024e6:	2308      	movs	r3, #8

    // Set up post dividers - div1 feeds into div2 so if div1 is 5 and div2 is 2 then you get a divide by 10
    uint32_t pdiv = (post_div1 << PLL_PRIM_POSTDIV1_LSB) |
                    (post_div2 << PLL_PRIM_POSTDIV2_LSB);
100024e8:	033f      	lsls	r7, r7, #12
    uint32_t pdiv = (post_div1 << PLL_PRIM_POSTDIV1_LSB) |
100024ea:	0436      	lsls	r6, r6, #16
100024ec:	433e      	orrs	r6, r7
    pll->prim = pdiv;
100024ee:	60e6      	str	r6, [r4, #12]
100024f0:	600b      	str	r3, [r1, #0]

    // Turn on post divider
    hw_clear_bits(&pll->pwr, PLL_PWR_POSTDIVPD_BITS);
/// \end::pll_init_finish[]
}
100024f2:	bc80      	pop	{r7}
100024f4:	46b8      	mov	r8, r7
100024f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

100024f8 <_out_null>:
static inline void _out_null(char character, void *buffer, size_t idx, size_t maxlen) {
    (void) character;
    (void) buffer;
    (void) idx;
    (void) maxlen;
}
100024f8:	4770      	bx	lr
100024fa:	46c0      	nop			; (mov r8, r8)

100024fc <_out_rev>:
}


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char *buffer, size_t idx, size_t maxlen, const char *buf, size_t len,
                       unsigned int width, unsigned int flags) {
100024fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100024fe:	4657      	mov	r7, sl
10002500:	464e      	mov	r6, r9
10002502:	4645      	mov	r5, r8
10002504:	46de      	mov	lr, fp
10002506:	b5e0      	push	{r5, r6, r7, lr}
10002508:	4699      	mov	r9, r3
1000250a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1000250c:	0007      	movs	r7, r0
1000250e:	469a      	mov	sl, r3
    const size_t start_idx = idx;

    // pad spaces up to given width
    if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
10002510:	9b0d      	ldr	r3, [sp, #52]	; 0x34
                       unsigned int width, unsigned int flags) {
10002512:	4688      	mov	r8, r1
10002514:	4693      	mov	fp, r2
10002516:	0015      	movs	r5, r2
10002518:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
1000251a:	079b      	lsls	r3, r3, #30
1000251c:	d110      	bne.n	10002540 <_out_rev+0x44>
        for (size_t i = len; i < width; i++) {
1000251e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
10002520:	429e      	cmp	r6, r3
10002522:	d20d      	bcs.n	10002540 <_out_rev+0x44>
10002524:	1b9d      	subs	r5, r3, r6
10002526:	0014      	movs	r4, r2
10002528:	000e      	movs	r6, r1
1000252a:	445d      	add	r5, fp
            out(' ', buffer, idx++, maxlen);
1000252c:	0022      	movs	r2, r4
1000252e:	464b      	mov	r3, r9
10002530:	3401      	adds	r4, #1
10002532:	0031      	movs	r1, r6
10002534:	2020      	movs	r0, #32
10002536:	47b8      	blx	r7
        for (size_t i = len; i < width; i++) {
10002538:	42a5      	cmp	r5, r4
1000253a:	d1f7      	bne.n	1000252c <_out_rev+0x30>
1000253c:	46b0      	mov	r8, r6
1000253e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
        }
    }

    // reverse string
    while (len) {
10002540:	2e00      	cmp	r6, #0
10002542:	d027      	beq.n	10002594 <_out_rev+0x98>
10002544:	4644      	mov	r4, r8
10002546:	1975      	adds	r5, r6, r5
        out(buf[--len], buffer, idx++, maxlen);
10002548:	4653      	mov	r3, sl
1000254a:	1baa      	subs	r2, r5, r6
1000254c:	3e01      	subs	r6, #1
1000254e:	5d98      	ldrb	r0, [r3, r6]
10002550:	0021      	movs	r1, r4
10002552:	464b      	mov	r3, r9
10002554:	47b8      	blx	r7
    while (len) {
10002556:	2e00      	cmp	r6, #0
10002558:	d1f6      	bne.n	10002548 <_out_rev+0x4c>
1000255a:	0023      	movs	r3, r4
1000255c:	002c      	movs	r4, r5
1000255e:	4698      	mov	r8, r3
    }

    // append pad spaces up to given width
    if (flags & FLAGS_LEFT) {
10002560:	9b0d      	ldr	r3, [sp, #52]	; 0x34
10002562:	079b      	lsls	r3, r3, #30
10002564:	d50f      	bpl.n	10002586 <_out_rev+0x8a>
        while (idx - start_idx < width) {
10002566:	465b      	mov	r3, fp
10002568:	1ae5      	subs	r5, r4, r3
1000256a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1000256c:	42ab      	cmp	r3, r5
1000256e:	d90a      	bls.n	10002586 <_out_rev+0x8a>
10002570:	4646      	mov	r6, r8
10002572:	4698      	mov	r8, r3
            out(' ', buffer, idx++, maxlen);
10002574:	0022      	movs	r2, r4
10002576:	464b      	mov	r3, r9
10002578:	0031      	movs	r1, r6
1000257a:	2020      	movs	r0, #32
        while (idx - start_idx < width) {
1000257c:	3501      	adds	r5, #1
            out(' ', buffer, idx++, maxlen);
1000257e:	47b8      	blx	r7
10002580:	3401      	adds	r4, #1
        while (idx - start_idx < width) {
10002582:	45a8      	cmp	r8, r5
10002584:	d8f6      	bhi.n	10002574 <_out_rev+0x78>
        }
    }

    return idx;
}
10002586:	0020      	movs	r0, r4
10002588:	bcf0      	pop	{r4, r5, r6, r7}
1000258a:	46bb      	mov	fp, r7
1000258c:	46b2      	mov	sl, r6
1000258e:	46a9      	mov	r9, r5
10002590:	46a0      	mov	r8, r4
10002592:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    while (len) {
10002594:	002c      	movs	r4, r5
10002596:	e7e3      	b.n	10002560 <_out_rev+0x64>

10002598 <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char *buffer, size_t idx, size_t maxlen, char *buf, size_t len,
                           bool negative, unsigned int base, unsigned int prec, unsigned int width,
                           unsigned int flags) {
10002598:	b5f0      	push	{r4, r5, r6, r7, lr}
1000259a:	464f      	mov	r7, r9
1000259c:	4646      	mov	r6, r8
1000259e:	46d6      	mov	lr, sl
100025a0:	b5c0      	push	{r6, r7, lr}
100025a2:	b084      	sub	sp, #16
100025a4:	4698      	mov	r8, r3
100025a6:	ab0e      	add	r3, sp, #56	; 0x38
100025a8:	781b      	ldrb	r3, [r3, #0]
100025aa:	9f12      	ldr	r7, [sp, #72]	; 0x48
100025ac:	4699      	mov	r9, r3
100025ae:	4694      	mov	ip, r2
100025b0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
100025b2:	9b10      	ldr	r3, [sp, #64]	; 0x40
100025b4:	9e11      	ldr	r6, [sp, #68]	; 0x44
    // pad leading zeros
    if (!(flags & FLAGS_LEFT)) {
100025b6:	07ba      	lsls	r2, r7, #30
100025b8:	d425      	bmi.n	10002606 <_ntoa_format+0x6e>
        if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
100025ba:	2e00      	cmp	r6, #0
100025bc:	d14b      	bne.n	10002656 <_ntoa_format+0xbe>
            width--;
        }
        while ((len < prec) && (len < PICO_PRINTF_NTOA_BUFFER_SIZE)) {
100025be:	429c      	cmp	r4, r3
100025c0:	d300      	bcc.n	100025c4 <_ntoa_format+0x2c>
100025c2:	e0bf      	b.n	10002744 <_ntoa_format+0x1ac>
        if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
100025c4:	2201      	movs	r2, #1
100025c6:	403a      	ands	r2, r7
100025c8:	4692      	mov	sl, r2
        while ((len < prec) && (len < PICO_PRINTF_NTOA_BUFFER_SIZE)) {
100025ca:	2c1f      	cmp	r4, #31
100025cc:	d900      	bls.n	100025d0 <_ntoa_format+0x38>
100025ce:	e0b8      	b.n	10002742 <_ntoa_format+0x1aa>
100025d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
100025d2:	1e55      	subs	r5, r2, #1
            buf[len++] = '0';
100025d4:	2230      	movs	r2, #48	; 0x30
100025d6:	e001      	b.n	100025dc <_ntoa_format+0x44>
        while ((len < prec) && (len < PICO_PRINTF_NTOA_BUFFER_SIZE)) {
100025d8:	2c20      	cmp	r4, #32
100025da:	d003      	beq.n	100025e4 <_ntoa_format+0x4c>
            buf[len++] = '0';
100025dc:	3401      	adds	r4, #1
100025de:	552a      	strb	r2, [r5, r4]
        while ((len < prec) && (len < PICO_PRINTF_NTOA_BUFFER_SIZE)) {
100025e0:	42a3      	cmp	r3, r4
100025e2:	d8f9      	bhi.n	100025d8 <_ntoa_format+0x40>
        }
        while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PICO_PRINTF_NTOA_BUFFER_SIZE)) {
100025e4:	4652      	mov	r2, sl
100025e6:	2a00      	cmp	r2, #0
100025e8:	d00d      	beq.n	10002606 <_ntoa_format+0x6e>
100025ea:	42a6      	cmp	r6, r4
100025ec:	d90b      	bls.n	10002606 <_ntoa_format+0x6e>
100025ee:	2c20      	cmp	r4, #32
100025f0:	d044      	beq.n	1000267c <_ntoa_format+0xe4>
100025f2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
100025f4:	1e55      	subs	r5, r2, #1
            buf[len++] = '0';
100025f6:	2230      	movs	r2, #48	; 0x30
100025f8:	e001      	b.n	100025fe <_ntoa_format+0x66>
        while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PICO_PRINTF_NTOA_BUFFER_SIZE)) {
100025fa:	2c20      	cmp	r4, #32
100025fc:	d03e      	beq.n	1000267c <_ntoa_format+0xe4>
            buf[len++] = '0';
100025fe:	3401      	adds	r4, #1
10002600:	552a      	strb	r2, [r5, r4]
        while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PICO_PRINTF_NTOA_BUFFER_SIZE)) {
10002602:	42b4      	cmp	r4, r6
10002604:	d1f9      	bne.n	100025fa <_ntoa_format+0x62>
        }
    }

    // handle hash
    if (flags & FLAGS_HASH) {
10002606:	06fa      	lsls	r2, r7, #27
10002608:	d54d      	bpl.n	100026a6 <_ntoa_format+0x10e>
        if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
1000260a:	057a      	lsls	r2, r7, #21
1000260c:	d43f      	bmi.n	1000268e <_ntoa_format+0xf6>
1000260e:	2c00      	cmp	r4, #0
10002610:	d139      	bne.n	10002686 <_ntoa_format+0xee>
            len--;
            if (len && (base == 16U)) {
                len--;
            }
        }
        if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PICO_PRINTF_NTOA_BUFFER_SIZE)) {
10002612:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
10002614:	2b10      	cmp	r3, #16
10002616:	d100      	bne.n	1000261a <_ntoa_format+0x82>
10002618:	e079      	b.n	1000270e <_ntoa_format+0x176>
            buf[len++] = 'x';
        } else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PICO_PRINTF_NTOA_BUFFER_SIZE)) {
            buf[len++] = 'X';
        } else if ((base == 2U) && (len < PICO_PRINTF_NTOA_BUFFER_SIZE)) {
1000261a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1000261c:	2b02      	cmp	r3, #2
1000261e:	d100      	bne.n	10002622 <_ntoa_format+0x8a>
10002620:	e08a      	b.n	10002738 <_ntoa_format+0x1a0>
            buf[len++] = 'b';
        }
        if (len < PICO_PRINTF_NTOA_BUFFER_SIZE) {
            buf[len++] = '0';
10002622:	2330      	movs	r3, #48	; 0x30
10002624:	9a0c      	ldr	r2, [sp, #48]	; 0x30
10002626:	2401      	movs	r4, #1
10002628:	7013      	strb	r3, [r2, #0]
        }
    }

    if (len < PICO_PRINTF_NTOA_BUFFER_SIZE) {
        if (negative) {
1000262a:	464b      	mov	r3, r9
1000262c:	2b00      	cmp	r3, #0
1000262e:	d03f      	beq.n	100026b0 <_ntoa_format+0x118>
            buf[len++] = '-';
10002630:	232d      	movs	r3, #45	; 0x2d
10002632:	9a0c      	ldr	r2, [sp, #48]	; 0x30
10002634:	5513      	strb	r3, [r2, r4]
10002636:	3401      	adds	r4, #1
        } else if (flags & FLAGS_SPACE) {
            buf[len++] = ' ';
        }
    }

    return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
10002638:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1000263a:	4662      	mov	r2, ip
1000263c:	9300      	str	r3, [sp, #0]
1000263e:	9703      	str	r7, [sp, #12]
10002640:	4643      	mov	r3, r8
10002642:	9602      	str	r6, [sp, #8]
10002644:	9401      	str	r4, [sp, #4]
10002646:	f7ff ff59 	bl	100024fc <_out_rev>
}
1000264a:	b004      	add	sp, #16
1000264c:	bce0      	pop	{r5, r6, r7}
1000264e:	46ba      	mov	sl, r7
10002650:	46b1      	mov	r9, r6
10002652:	46a8      	mov	r8, r5
10002654:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
10002656:	2201      	movs	r2, #1
10002658:	0015      	movs	r5, r2
1000265a:	403d      	ands	r5, r7
1000265c:	46aa      	mov	sl, r5
1000265e:	423a      	tst	r2, r7
10002660:	d02f      	beq.n	100026c2 <_ntoa_format+0x12a>
10002662:	464a      	mov	r2, r9
10002664:	2a00      	cmp	r2, #0
10002666:	d102      	bne.n	1000266e <_ntoa_format+0xd6>
10002668:	320c      	adds	r2, #12
1000266a:	423a      	tst	r2, r7
1000266c:	d000      	beq.n	10002670 <_ntoa_format+0xd8>
            width--;
1000266e:	3e01      	subs	r6, #1
        while ((len < prec) && (len < PICO_PRINTF_NTOA_BUFFER_SIZE)) {
10002670:	429c      	cmp	r4, r3
10002672:	d2ba      	bcs.n	100025ea <_ntoa_format+0x52>
10002674:	2c1f      	cmp	r4, #31
10002676:	d9ab      	bls.n	100025d0 <_ntoa_format+0x38>
        while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PICO_PRINTF_NTOA_BUFFER_SIZE)) {
10002678:	2e20      	cmp	r6, #32
1000267a:	d927      	bls.n	100026cc <_ntoa_format+0x134>
        if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
1000267c:	2420      	movs	r4, #32
    if (flags & FLAGS_HASH) {
1000267e:	06fa      	lsls	r2, r7, #27
10002680:	d5da      	bpl.n	10002638 <_ntoa_format+0xa0>
        if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
10002682:	057a      	lsls	r2, r7, #21
10002684:	d403      	bmi.n	1000268e <_ntoa_format+0xf6>
10002686:	42a3      	cmp	r3, r4
10002688:	d02d      	beq.n	100026e6 <_ntoa_format+0x14e>
1000268a:	42a6      	cmp	r6, r4
1000268c:	d02b      	beq.n	100026e6 <_ntoa_format+0x14e>
        if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PICO_PRINTF_NTOA_BUFFER_SIZE)) {
1000268e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
10002690:	2b10      	cmp	r3, #16
10002692:	d032      	beq.n	100026fa <_ntoa_format+0x162>
        } else if ((base == 2U) && (len < PICO_PRINTF_NTOA_BUFFER_SIZE)) {
10002694:	2b02      	cmp	r3, #2
10002696:	d020      	beq.n	100026da <_ntoa_format+0x142>
        if (len < PICO_PRINTF_NTOA_BUFFER_SIZE) {
10002698:	2c20      	cmp	r4, #32
1000269a:	d0cd      	beq.n	10002638 <_ntoa_format+0xa0>
            buf[len++] = '0';
1000269c:	2230      	movs	r2, #48	; 0x30
1000269e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
100026a0:	191b      	adds	r3, r3, r4
100026a2:	701a      	strb	r2, [r3, #0]
100026a4:	3401      	adds	r4, #1
    if (len < PICO_PRINTF_NTOA_BUFFER_SIZE) {
100026a6:	2c20      	cmp	r4, #32
100026a8:	d0c6      	beq.n	10002638 <_ntoa_format+0xa0>
        if (negative) {
100026aa:	464b      	mov	r3, r9
100026ac:	2b00      	cmp	r3, #0
100026ae:	d1bf      	bne.n	10002630 <_ntoa_format+0x98>
        } else if (flags & FLAGS_PLUS) {
100026b0:	077b      	lsls	r3, r7, #29
100026b2:	d40d      	bmi.n	100026d0 <_ntoa_format+0x138>
        } else if (flags & FLAGS_SPACE) {
100026b4:	073b      	lsls	r3, r7, #28
100026b6:	d5bf      	bpl.n	10002638 <_ntoa_format+0xa0>
            buf[len++] = ' ';
100026b8:	2320      	movs	r3, #32
100026ba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
100026bc:	5513      	strb	r3, [r2, r4]
100026be:	3401      	adds	r4, #1
100026c0:	e7ba      	b.n	10002638 <_ntoa_format+0xa0>
        while ((len < prec) && (len < PICO_PRINTF_NTOA_BUFFER_SIZE)) {
100026c2:	429c      	cmp	r4, r3
100026c4:	d29f      	bcs.n	10002606 <_ntoa_format+0x6e>
100026c6:	2c1f      	cmp	r4, #31
100026c8:	d800      	bhi.n	100026cc <_ntoa_format+0x134>
100026ca:	e781      	b.n	100025d0 <_ntoa_format+0x38>
100026cc:	2420      	movs	r4, #32
100026ce:	e79a      	b.n	10002606 <_ntoa_format+0x6e>
            buf[len++] = '+';  // ignore the space if the '+' exists
100026d0:	232b      	movs	r3, #43	; 0x2b
100026d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
100026d4:	5513      	strb	r3, [r2, r4]
100026d6:	3401      	adds	r4, #1
100026d8:	e7ae      	b.n	10002638 <_ntoa_format+0xa0>
        } else if ((base == 2U) && (len < PICO_PRINTF_NTOA_BUFFER_SIZE)) {
100026da:	2c20      	cmp	r4, #32
100026dc:	d0ac      	beq.n	10002638 <_ntoa_format+0xa0>
            buf[len++] = 'b';
100026de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
100026e0:	191b      	adds	r3, r3, r4
100026e2:	3401      	adds	r4, #1
100026e4:	e03a      	b.n	1000275c <_ntoa_format+0x1c4>
            len--;
100026e6:	1e63      	subs	r3, r4, #1
            if (len && (base == 16U)) {
100026e8:	2c01      	cmp	r4, #1
100026ea:	d092      	beq.n	10002612 <_ntoa_format+0x7a>
100026ec:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
100026ee:	2a10      	cmp	r2, #16
100026f0:	d02a      	beq.n	10002748 <_ntoa_format+0x1b0>
        } else if ((base == 2U) && (len < PICO_PRINTF_NTOA_BUFFER_SIZE)) {
100026f2:	2a02      	cmp	r2, #2
100026f4:	d02f      	beq.n	10002756 <_ntoa_format+0x1be>
100026f6:	001c      	movs	r4, r3
100026f8:	e7d0      	b.n	1000269c <_ntoa_format+0x104>
        if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PICO_PRINTF_NTOA_BUFFER_SIZE)) {
100026fa:	06bb      	lsls	r3, r7, #26
100026fc:	d40e      	bmi.n	1000271c <_ntoa_format+0x184>
100026fe:	2c20      	cmp	r4, #32
10002700:	d09a      	beq.n	10002638 <_ntoa_format+0xa0>
            buf[len++] = 'x';
10002702:	9b0c      	ldr	r3, [sp, #48]	; 0x30
10002704:	191a      	adds	r2, r3, r4
10002706:	3401      	adds	r4, #1
10002708:	2378      	movs	r3, #120	; 0x78
1000270a:	7013      	strb	r3, [r2, #0]
1000270c:	e7c4      	b.n	10002698 <_ntoa_format+0x100>
        if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PICO_PRINTF_NTOA_BUFFER_SIZE)) {
1000270e:	06bb      	lsls	r3, r7, #26
10002710:	d40d      	bmi.n	1000272e <_ntoa_format+0x196>
            buf[len++] = 'x';
10002712:	2378      	movs	r3, #120	; 0x78
10002714:	9a0c      	ldr	r2, [sp, #48]	; 0x30
10002716:	2401      	movs	r4, #1
10002718:	7013      	strb	r3, [r2, #0]
        if (len < PICO_PRINTF_NTOA_BUFFER_SIZE) {
1000271a:	e7bf      	b.n	1000269c <_ntoa_format+0x104>
        } else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PICO_PRINTF_NTOA_BUFFER_SIZE)) {
1000271c:	2c20      	cmp	r4, #32
1000271e:	d100      	bne.n	10002722 <_ntoa_format+0x18a>
10002720:	e78a      	b.n	10002638 <_ntoa_format+0xa0>
            buf[len++] = 'X';
10002722:	2258      	movs	r2, #88	; 0x58
10002724:	9b0c      	ldr	r3, [sp, #48]	; 0x30
10002726:	191b      	adds	r3, r3, r4
10002728:	701a      	strb	r2, [r3, #0]
1000272a:	3401      	adds	r4, #1
1000272c:	e7b4      	b.n	10002698 <_ntoa_format+0x100>
1000272e:	2358      	movs	r3, #88	; 0x58
10002730:	9a0c      	ldr	r2, [sp, #48]	; 0x30
10002732:	2401      	movs	r4, #1
10002734:	7013      	strb	r3, [r2, #0]
        if (len < PICO_PRINTF_NTOA_BUFFER_SIZE) {
10002736:	e7b1      	b.n	1000269c <_ntoa_format+0x104>
            buf[len++] = 'b';
10002738:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1000273a:	3360      	adds	r3, #96	; 0x60
1000273c:	2401      	movs	r4, #1
1000273e:	7013      	strb	r3, [r2, #0]
        if (len < PICO_PRINTF_NTOA_BUFFER_SIZE) {
10002740:	e7ac      	b.n	1000269c <_ntoa_format+0x104>
        while ((len < prec) && (len < PICO_PRINTF_NTOA_BUFFER_SIZE)) {
10002742:	2420      	movs	r4, #32
        while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PICO_PRINTF_NTOA_BUFFER_SIZE)) {
10002744:	2600      	movs	r6, #0
10002746:	e75e      	b.n	10002606 <_ntoa_format+0x6e>
                len--;
10002748:	3c02      	subs	r4, #2
        if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PICO_PRINTF_NTOA_BUFFER_SIZE)) {
1000274a:	06ba      	lsls	r2, r7, #26
1000274c:	d4e9      	bmi.n	10002722 <_ntoa_format+0x18a>
            buf[len++] = 'x';
1000274e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
10002750:	1912      	adds	r2, r2, r4
10002752:	001c      	movs	r4, r3
10002754:	e7d8      	b.n	10002708 <_ntoa_format+0x170>
            buf[len++] = 'b';
10002756:	9a0c      	ldr	r2, [sp, #48]	; 0x30
10002758:	4692      	mov	sl, r2
1000275a:	4453      	add	r3, sl
1000275c:	2262      	movs	r2, #98	; 0x62
1000275e:	701a      	strb	r2, [r3, #0]
10002760:	e79a      	b.n	10002698 <_ntoa_format+0x100>
10002762:	46c0      	nop			; (mov r8, r8)

10002764 <_out_char>:
static inline void _out_char(char character, void *buffer, size_t idx, size_t maxlen) {
10002764:	b510      	push	{r4, lr}
    if (character) {
10002766:	2800      	cmp	r0, #0
10002768:	d100      	bne.n	1000276c <_out_char+0x8>
}
1000276a:	bd10      	pop	{r4, pc}
    putchar(character);
1000276c:	f001 fb48 	bl	10003e00 <__wrap_putchar>
}
10002770:	e7fb      	b.n	1000276a <_out_char+0x6>
10002772:	46c0      	nop			; (mov r8, r8)

10002774 <_out_fct>:
static inline void _out_fct(char character, void *buffer, size_t idx, size_t maxlen) {
10002774:	000b      	movs	r3, r1
10002776:	b510      	push	{r4, lr}
    if (character) {
10002778:	2800      	cmp	r0, #0
1000277a:	d002      	beq.n	10002782 <_out_fct+0xe>
        ((out_fct_wrap_type *) buffer)->fct(character, ((out_fct_wrap_type *) buffer)->arg);
1000277c:	6849      	ldr	r1, [r1, #4]
1000277e:	681b      	ldr	r3, [r3, #0]
10002780:	4798      	blx	r3
}
10002782:	bd10      	pop	{r4, pc}

10002784 <_etoa>:

#if PICO_PRINTF_SUPPORT_EXPONENTIAL

// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char *buffer, size_t idx, size_t maxlen, double value, unsigned int prec,
                    unsigned int width, unsigned int flags) {
10002784:	b5f0      	push	{r4, r5, r6, r7, lr}
10002786:	46de      	mov	lr, fp
10002788:	4657      	mov	r7, sl
1000278a:	464e      	mov	r6, r9
1000278c:	4645      	mov	r5, r8
1000278e:	b5e0      	push	{r5, r6, r7, lr}
10002790:	b09b      	sub	sp, #108	; 0x6c
10002792:	469a      	mov	sl, r3
10002794:	9b24      	ldr	r3, [sp, #144]	; 0x90
10002796:	468b      	mov	fp, r1
10002798:	4699      	mov	r9, r3
1000279a:	9b25      	ldr	r3, [sp, #148]	; 0x94
1000279c:	900b      	str	r0, [sp, #44]	; 0x2c
1000279e:	4698      	mov	r8, r3
100027a0:	920c      	str	r2, [sp, #48]	; 0x30
    // check for NaN and special values
    if (is_nan(value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
100027a2:	4643      	mov	r3, r8
100027a4:	464a      	mov	r2, r9
100027a6:	4648      	mov	r0, r9
100027a8:	4641      	mov	r1, r8
100027aa:	f7fe f8b8 	bl	1000091e <__wrap___aeabi_dcmpun>
100027ae:	2800      	cmp	r0, #0
100027b0:	d000      	beq.n	100027b4 <_etoa+0x30>
100027b2:	e194      	b.n	10002ade <_etoa+0x35a>
100027b4:	2201      	movs	r2, #1
100027b6:	4648      	mov	r0, r9
100027b8:	4641      	mov	r1, r8
100027ba:	4be0      	ldr	r3, [pc, #896]	; (10002b3c <_etoa+0x3b8>)
100027bc:	4252      	negs	r2, r2
100027be:	f7fe f8a9 	bl	10000914 <__wrap___aeabi_dcmpgt>
100027c2:	2800      	cmp	r0, #0
100027c4:	d000      	beq.n	100027c8 <_etoa+0x44>
100027c6:	e18a      	b.n	10002ade <_etoa+0x35a>
100027c8:	2201      	movs	r2, #1
100027ca:	4648      	mov	r0, r9
100027cc:	4641      	mov	r1, r8
100027ce:	4bdc      	ldr	r3, [pc, #880]	; (10002b40 <_etoa+0x3bc>)
100027d0:	4252      	negs	r2, r2
100027d2:	f7fe f889 	bl	100008e8 <__wrap___aeabi_dcmplt>
100027d6:	2800      	cmp	r0, #0
100027d8:	d000      	beq.n	100027dc <_etoa+0x58>
100027da:	e180      	b.n	10002ade <_etoa+0x35a>
        return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
    }

    // determine the sign
    const bool negative = value < 0;
    if (negative) {
100027dc:	2200      	movs	r2, #0
100027de:	2300      	movs	r3, #0
100027e0:	4648      	mov	r0, r9
100027e2:	4641      	mov	r1, r8
100027e4:	f7fe f880 	bl	100008e8 <__wrap___aeabi_dcmplt>
100027e8:	2800      	cmp	r0, #0
100027ea:	d000      	beq.n	100027ee <_etoa+0x6a>
100027ec:	e19b      	b.n	10002b26 <_etoa+0x3a2>
100027ee:	464a      	mov	r2, r9
100027f0:	4643      	mov	r3, r8
100027f2:	920a      	str	r2, [sp, #40]	; 0x28
100027f4:	9309      	str	r3, [sp, #36]	; 0x24
        value = -value;
    }

    // default precision
    if (!(flags & FLAGS_PRECISION)) {
100027f6:	2380      	movs	r3, #128	; 0x80
100027f8:	9a28      	ldr	r2, [sp, #160]	; 0xa0
100027fa:	00db      	lsls	r3, r3, #3
100027fc:	401a      	ands	r2, r3
100027fe:	9211      	str	r2, [sp, #68]	; 0x44
10002800:	9a28      	ldr	r2, [sp, #160]	; 0xa0
10002802:	421a      	tst	r2, r3
10002804:	d101      	bne.n	1000280a <_etoa+0x86>
        prec = PICO_PRINTF_DEFAULT_FLOAT_PRECISION;
10002806:	2306      	movs	r3, #6
10002808:	9326      	str	r3, [sp, #152]	; 0x98
        uint64_t U;
        double F;
    } conv;

    conv.F = value;
    int exp2 = (int) ((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
1000280a:	4bce      	ldr	r3, [pc, #824]	; (10002b44 <_etoa+0x3c0>)
1000280c:	9f09      	ldr	r7, [sp, #36]	; 0x24
1000280e:	469c      	mov	ip, r3
10002810:	0078      	lsls	r0, r7, #1
10002812:	0d40      	lsrs	r0, r0, #21
10002814:	4460      	add	r0, ip
    conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
    // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
    int expval = (int) (0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
10002816:	f7fe f895 	bl	10000944 <__wrap___aeabi_i2d>
1000281a:	4acb      	ldr	r2, [pc, #812]	; (10002b48 <_etoa+0x3c4>)
1000281c:	4bcb      	ldr	r3, [pc, #812]	; (10002b4c <_etoa+0x3c8>)
1000281e:	f7fe f821 	bl	10000864 <__wrap___aeabi_dmul>
10002822:	4acb      	ldr	r2, [pc, #812]	; (10002b50 <_etoa+0x3cc>)
10002824:	4bcb      	ldr	r3, [pc, #812]	; (10002b54 <_etoa+0x3d0>)
10002826:	f7fe f80b 	bl	10000840 <__wrap___aeabi_dadd>
    conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
1000282a:	033b      	lsls	r3, r7, #12
1000282c:	4aca      	ldr	r2, [pc, #808]	; (10002b58 <_etoa+0x3d4>)
    conv.F = value;
1000282e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
10002830:	0b1b      	lsrs	r3, r3, #12
10002832:	431a      	orrs	r2, r3
    int expval = (int) (0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
10002834:	0004      	movs	r4, r0
10002836:	000d      	movs	r5, r1
    conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
10002838:	0030      	movs	r0, r6
1000283a:	0011      	movs	r1, r2
    int expval = (int) (0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
1000283c:	4bc7      	ldr	r3, [pc, #796]	; (10002b5c <_etoa+0x3d8>)
1000283e:	2200      	movs	r2, #0
10002840:	f7fd fff5 	bl	1000082e <__wrap___aeabi_dsub>
10002844:	4ac6      	ldr	r2, [pc, #792]	; (10002b60 <_etoa+0x3dc>)
10002846:	4bc7      	ldr	r3, [pc, #796]	; (10002b64 <_etoa+0x3e0>)
10002848:	f7fe f80c 	bl	10000864 <__wrap___aeabi_dmul>
1000284c:	0002      	movs	r2, r0
1000284e:	000b      	movs	r3, r1
10002850:	0020      	movs	r0, r4
10002852:	0029      	movs	r1, r5
10002854:	f7fd fff4 	bl	10000840 <__wrap___aeabi_dadd>
10002858:	f7fe f88c 	bl	10000974 <__wrap___aeabi_d2iz>
    // now we want to compute 10^expval but we want to be sure it won't overflow
    exp2 = (int) (expval * 3.321928094887362 + 0.5);
1000285c:	900d      	str	r0, [sp, #52]	; 0x34
1000285e:	f7fe f871 	bl	10000944 <__wrap___aeabi_i2d>
10002862:	4ac1      	ldr	r2, [pc, #772]	; (10002b68 <_etoa+0x3e4>)
10002864:	4bc1      	ldr	r3, [pc, #772]	; (10002b6c <_etoa+0x3e8>)
10002866:	0004      	movs	r4, r0
10002868:	000d      	movs	r5, r1
1000286a:	f7fd fffb 	bl	10000864 <__wrap___aeabi_dmul>
1000286e:	2200      	movs	r2, #0
10002870:	4bbf      	ldr	r3, [pc, #764]	; (10002b70 <_etoa+0x3ec>)
10002872:	f7fd ffe5 	bl	10000840 <__wrap___aeabi_dadd>
10002876:	f7fe f87d 	bl	10000974 <__wrap___aeabi_d2iz>
    const double z = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
1000287a:	4abe      	ldr	r2, [pc, #760]	; (10002b74 <_etoa+0x3f0>)
    exp2 = (int) (expval * 3.321928094887362 + 0.5);
1000287c:	0006      	movs	r6, r0
    const double z = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
1000287e:	4bbe      	ldr	r3, [pc, #760]	; (10002b78 <_etoa+0x3f4>)
10002880:	0020      	movs	r0, r4
10002882:	0029      	movs	r1, r5
10002884:	f7fd ffee 	bl	10000864 <__wrap___aeabi_dmul>
10002888:	0004      	movs	r4, r0
1000288a:	0030      	movs	r0, r6
1000288c:	000d      	movs	r5, r1
1000288e:	9610      	str	r6, [sp, #64]	; 0x40
10002890:	f7fe f858 	bl	10000944 <__wrap___aeabi_i2d>
10002894:	4ab9      	ldr	r2, [pc, #740]	; (10002b7c <_etoa+0x3f8>)
10002896:	4bba      	ldr	r3, [pc, #744]	; (10002b80 <_etoa+0x3fc>)
10002898:	f7fd ffe4 	bl	10000864 <__wrap___aeabi_dmul>
1000289c:	0002      	movs	r2, r0
1000289e:	000b      	movs	r3, r1
100028a0:	0020      	movs	r0, r4
100028a2:	0029      	movs	r1, r5
100028a4:	f7fd ffc3 	bl	1000082e <__wrap___aeabi_dsub>
    const double z2 = z * z;
100028a8:	0002      	movs	r2, r0
100028aa:	000b      	movs	r3, r1
    const double z = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
100028ac:	0006      	movs	r6, r0
100028ae:	000f      	movs	r7, r1
    const double z2 = z * z;
100028b0:	f7fd ffd8 	bl	10000864 <__wrap___aeabi_dmul>
    conv.U = (uint64_t) (exp2 + 1023) << 52U;
    // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
    conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
100028b4:	0032      	movs	r2, r6
    const double z2 = z * z;
100028b6:	0004      	movs	r4, r0
100028b8:	000d      	movs	r5, r1
    conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
100028ba:	003b      	movs	r3, r7
100028bc:	0030      	movs	r0, r6
100028be:	0039      	movs	r1, r7
100028c0:	f7fd ffbe 	bl	10000840 <__wrap___aeabi_dadd>
100028c4:	2200      	movs	r2, #0
100028c6:	900e      	str	r0, [sp, #56]	; 0x38
100028c8:	910f      	str	r1, [sp, #60]	; 0x3c
100028ca:	4bae      	ldr	r3, [pc, #696]	; (10002b84 <_etoa+0x400>)
100028cc:	0020      	movs	r0, r4
100028ce:	0029      	movs	r1, r5
100028d0:	f7fd ffbf 	bl	10000852 <__wrap___aeabi_ddiv>
100028d4:	2200      	movs	r2, #0
100028d6:	4bac      	ldr	r3, [pc, #688]	; (10002b88 <_etoa+0x404>)
100028d8:	f7fd ffb2 	bl	10000840 <__wrap___aeabi_dadd>
100028dc:	0002      	movs	r2, r0
100028de:	000b      	movs	r3, r1
100028e0:	0020      	movs	r0, r4
100028e2:	0029      	movs	r1, r5
100028e4:	f7fd ffb5 	bl	10000852 <__wrap___aeabi_ddiv>
100028e8:	2200      	movs	r2, #0
100028ea:	4ba8      	ldr	r3, [pc, #672]	; (10002b8c <_etoa+0x408>)
100028ec:	f7fd ffa8 	bl	10000840 <__wrap___aeabi_dadd>
100028f0:	0002      	movs	r2, r0
100028f2:	000b      	movs	r3, r1
100028f4:	0020      	movs	r0, r4
100028f6:	0029      	movs	r1, r5
100028f8:	f7fd ffab 	bl	10000852 <__wrap___aeabi_ddiv>
100028fc:	000d      	movs	r5, r1
100028fe:	2180      	movs	r1, #128	; 0x80
10002900:	0004      	movs	r4, r0
10002902:	0032      	movs	r2, r6
10002904:	003b      	movs	r3, r7
10002906:	2000      	movs	r0, #0
10002908:	05c9      	lsls	r1, r1, #23
1000290a:	f7fd ff90 	bl	1000082e <__wrap___aeabi_dsub>
1000290e:	0002      	movs	r2, r0
10002910:	000b      	movs	r3, r1
10002912:	0020      	movs	r0, r4
10002914:	0029      	movs	r1, r5
10002916:	f7fd ff93 	bl	10000840 <__wrap___aeabi_dadd>
1000291a:	0002      	movs	r2, r0
1000291c:	000b      	movs	r3, r1
1000291e:	980e      	ldr	r0, [sp, #56]	; 0x38
10002920:	990f      	ldr	r1, [sp, #60]	; 0x3c
10002922:	f7fd ff96 	bl	10000852 <__wrap___aeabi_ddiv>
10002926:	2200      	movs	r2, #0
10002928:	4b8b      	ldr	r3, [pc, #556]	; (10002b58 <_etoa+0x3d4>)
1000292a:	f7fd ff89 	bl	10000840 <__wrap___aeabi_dadd>
    conv.U = (uint64_t) (exp2 + 1023) << 52U;
1000292e:	4b98      	ldr	r3, [pc, #608]	; (10002b90 <_etoa+0x40c>)
10002930:	9c10      	ldr	r4, [sp, #64]	; 0x40
10002932:	469c      	mov	ip, r3
10002934:	4464      	add	r4, ip
10002936:	2200      	movs	r2, #0
10002938:	0523      	lsls	r3, r4, #20
    conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
1000293a:	f7fd ff93 	bl	10000864 <__wrap___aeabi_dmul>
1000293e:	0006      	movs	r6, r0
10002940:	000f      	movs	r7, r1
    // correct for rounding errors
    if (value < conv.F) {
10002942:	0002      	movs	r2, r0
10002944:	000b      	movs	r3, r1
10002946:	980a      	ldr	r0, [sp, #40]	; 0x28
10002948:	9909      	ldr	r1, [sp, #36]	; 0x24
1000294a:	f7fd ffcd 	bl	100008e8 <__wrap___aeabi_dcmplt>
1000294e:	2800      	cmp	r0, #0
10002950:	d00a      	beq.n	10002968 <_etoa+0x1e4>
        expval--;
10002952:	9b0d      	ldr	r3, [sp, #52]	; 0x34
        conv.F /= 10;
10002954:	0030      	movs	r0, r6
        expval--;
10002956:	3b01      	subs	r3, #1
        conv.F /= 10;
10002958:	0039      	movs	r1, r7
        expval--;
1000295a:	930d      	str	r3, [sp, #52]	; 0x34
        conv.F /= 10;
1000295c:	2200      	movs	r2, #0
1000295e:	4b8a      	ldr	r3, [pc, #552]	; (10002b88 <_etoa+0x404>)
10002960:	f7fd ff77 	bl	10000852 <__wrap___aeabi_ddiv>
10002964:	0006      	movs	r6, r0
10002966:	000f      	movs	r7, r1
    }

    // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
    unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
10002968:	9d0d      	ldr	r5, [sp, #52]	; 0x34
1000296a:	24c6      	movs	r4, #198	; 0xc6
1000296c:	002b      	movs	r3, r5
1000296e:	3363      	adds	r3, #99	; 0x63
10002970:	429c      	cmp	r4, r3
10002972:	41a4      	sbcs	r4, r4

    // in "%g" mode, "prec" is the number of *significant figures* not decimals
    if (flags & FLAGS_ADAPT_EXP) {
10002974:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
10002976:	4264      	negs	r4, r4
10002978:	3404      	adds	r4, #4
    if (flags & FLAGS_ADAPT_EXP) {
1000297a:	051b      	lsls	r3, r3, #20
1000297c:	d51f      	bpl.n	100029be <_etoa+0x23a>
        // do we want to fall-back to "%f" mode?
        if ((value >= 1e-4) && (value < 1e6)) {
1000297e:	4a85      	ldr	r2, [pc, #532]	; (10002b94 <_etoa+0x410>)
10002980:	4b85      	ldr	r3, [pc, #532]	; (10002b98 <_etoa+0x414>)
10002982:	980a      	ldr	r0, [sp, #40]	; 0x28
10002984:	9909      	ldr	r1, [sp, #36]	; 0x24
10002986:	f7fd ffbd 	bl	10000904 <__wrap___aeabi_dcmpge>
1000298a:	2800      	cmp	r0, #0
1000298c:	d100      	bne.n	10002990 <_etoa+0x20c>
1000298e:	e0bf      	b.n	10002b10 <_etoa+0x38c>
10002990:	2200      	movs	r2, #0
10002992:	4b82      	ldr	r3, [pc, #520]	; (10002b9c <_etoa+0x418>)
10002994:	980a      	ldr	r0, [sp, #40]	; 0x28
10002996:	9909      	ldr	r1, [sp, #36]	; 0x24
10002998:	f7fd ffa6 	bl	100008e8 <__wrap___aeabi_dcmplt>
1000299c:	2800      	cmp	r0, #0
1000299e:	d100      	bne.n	100029a2 <_etoa+0x21e>
100029a0:	e0b6      	b.n	10002b10 <_etoa+0x38c>
            if ((int) prec > expval) {
100029a2:	9b26      	ldr	r3, [sp, #152]	; 0x98
100029a4:	429d      	cmp	r5, r3
100029a6:	da00      	bge.n	100029aa <_etoa+0x226>
100029a8:	e0c4      	b.n	10002b34 <_etoa+0x3b0>
                prec = (unsigned) ((int) prec - expval - 1);
            } else {
                prec = 0;
100029aa:	2300      	movs	r3, #0
100029ac:	9326      	str	r3, [sp, #152]	; 0x98
            }
            flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
100029ae:	2380      	movs	r3, #128	; 0x80
100029b0:	9a28      	ldr	r2, [sp, #160]	; 0xa0
100029b2:	00db      	lsls	r3, r3, #3
100029b4:	431a      	orrs	r2, r3
            // no characters in exponent
            minwidth = 0U;
            expval = 0;
100029b6:	2300      	movs	r3, #0
            minwidth = 0U;
100029b8:	2400      	movs	r4, #0
            flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
100029ba:	9228      	str	r2, [sp, #160]	; 0xa0
            expval = 0;
100029bc:	930d      	str	r3, [sp, #52]	; 0x34
        }
    }

    // will everything fit?
    unsigned int fwidth = width;
    if (width > minwidth) {
100029be:	9b27      	ldr	r3, [sp, #156]	; 0x9c
        // we didn't fall-back so subtract the characters required for the exponent
        fwidth -= minwidth;
    } else {
        // not enough characters, so go back to default sizing
        fwidth = 0U;
100029c0:	2500      	movs	r5, #0
    if (width > minwidth) {
100029c2:	42a3      	cmp	r3, r4
100029c4:	d900      	bls.n	100029c8 <_etoa+0x244>
        fwidth -= minwidth;
100029c6:	1b1d      	subs	r5, r3, r4
    }
    if ((flags & FLAGS_LEFT) && minwidth) {
100029c8:	2302      	movs	r3, #2
100029ca:	9a28      	ldr	r2, [sp, #160]	; 0xa0
100029cc:	401a      	ands	r2, r3
100029ce:	9210      	str	r2, [sp, #64]	; 0x40
100029d0:	9a28      	ldr	r2, [sp, #160]	; 0xa0
100029d2:	4213      	tst	r3, r2
100029d4:	d003      	beq.n	100029de <_etoa+0x25a>
        // if we're padding on the right, DON'T pad the floating part
        fwidth = 0U;
100029d6:	4263      	negs	r3, r4
100029d8:	4163      	adcs	r3, r4
100029da:	425b      	negs	r3, r3
100029dc:	401d      	ands	r5, r3
    }

    // rescale the float value
    if (expval) {
100029de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
100029e0:	2b00      	cmp	r3, #0
100029e2:	d007      	beq.n	100029f4 <_etoa+0x270>
        value /= conv.F;
100029e4:	980a      	ldr	r0, [sp, #40]	; 0x28
100029e6:	9909      	ldr	r1, [sp, #36]	; 0x24
100029e8:	0032      	movs	r2, r6
100029ea:	003b      	movs	r3, r7
100029ec:	f7fd ff31 	bl	10000852 <__wrap___aeabi_ddiv>
100029f0:	900a      	str	r0, [sp, #40]	; 0x28
100029f2:	9109      	str	r1, [sp, #36]	; 0x24
    }

    // output the floating part
    const size_t start_idx = idx;
    idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
100029f4:	2200      	movs	r2, #0
100029f6:	2300      	movs	r3, #0
100029f8:	4648      	mov	r0, r9
100029fa:	4641      	mov	r1, r8
100029fc:	f7fd ff74 	bl	100008e8 <__wrap___aeabi_dcmplt>
10002a00:	2800      	cmp	r0, #0
10002a02:	d005      	beq.n	10002a10 <_etoa+0x28c>
10002a04:	2080      	movs	r0, #128	; 0x80
10002a06:	0600      	lsls	r0, r0, #24
10002a08:	4684      	mov	ip, r0
10002a0a:	9909      	ldr	r1, [sp, #36]	; 0x24
10002a0c:	4461      	add	r1, ip
10002a0e:	9109      	str	r1, [sp, #36]	; 0x24
10002a10:	9a28      	ldr	r2, [sp, #160]	; 0xa0
10002a12:	4b63      	ldr	r3, [pc, #396]	; (10002ba0 <_etoa+0x41c>)
10002a14:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
10002a16:	4013      	ands	r3, r2
10002a18:	9304      	str	r3, [sp, #16]
10002a1a:	9b26      	ldr	r3, [sp, #152]	; 0x98
10002a1c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
10002a1e:	9302      	str	r3, [sp, #8]
10002a20:	9b09      	ldr	r3, [sp, #36]	; 0x24
10002a22:	9503      	str	r5, [sp, #12]
10002a24:	9200      	str	r2, [sp, #0]
10002a26:	9301      	str	r3, [sp, #4]
10002a28:	4659      	mov	r1, fp
10002a2a:	4653      	mov	r3, sl
10002a2c:	0030      	movs	r0, r6
10002a2e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
10002a30:	f000 f8b8 	bl	10002ba4 <_ftoa>
10002a34:	0005      	movs	r5, r0

    // output the exponent part
    if (minwidth) {
10002a36:	2c00      	cmp	r4, #0
10002a38:	d062      	beq.n	10002b00 <_etoa+0x37c>
        // output the exponential symbol
        out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
10002a3a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
10002a3c:	002a      	movs	r2, r5
10002a3e:	0698      	lsls	r0, r3, #26
10002a40:	231f      	movs	r3, #31
10002a42:	17c0      	asrs	r0, r0, #31
10002a44:	4398      	bics	r0, r3
10002a46:	1c6b      	adds	r3, r5, #1
10002a48:	4698      	mov	r8, r3
10002a4a:	4659      	mov	r1, fp
10002a4c:	4653      	mov	r3, sl
10002a4e:	3065      	adds	r0, #101	; 0x65
10002a50:	47b0      	blx	r6
        // output the exponent value
        idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth - 1,
10002a52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
10002a54:	2600      	movs	r6, #0
10002a56:	17da      	asrs	r2, r3, #31
10002a58:	189d      	adds	r5, r3, r2
10002a5a:	0fdb      	lsrs	r3, r3, #31
10002a5c:	4699      	mov	r9, r3
10002a5e:	4055      	eors	r5, r2
10002a60:	3c01      	subs	r4, #1
    if (!(flags & FLAGS_PRECISION) || value) {
10002a62:	e001      	b.n	10002a68 <_etoa+0x2e4>
        } while (value && (len < PICO_PRINTF_NTOA_BUFFER_SIZE));
10002a64:	2e20      	cmp	r6, #32
10002a66:	d013      	beq.n	10002a90 <_etoa+0x30c>
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
10002a68:	aa0a      	add	r2, sp, #40	; 0x28
10002a6a:	4694      	mov	ip, r2
10002a6c:	231f      	movs	r3, #31
            const char digit = (char) (value % base);
10002a6e:	0028      	movs	r0, r5
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
10002a70:	4463      	add	r3, ip
            const char digit = (char) (value % base);
10002a72:	210a      	movs	r1, #10
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
10002a74:	3601      	adds	r6, #1
10002a76:	199f      	adds	r7, r3, r6
            const char digit = (char) (value % base);
10002a78:	f7fd fc7c 	bl	10000374 <__wrap___aeabi_uidiv>
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
10002a7c:	3130      	adds	r1, #48	; 0x30
10002a7e:	7039      	strb	r1, [r7, #0]
            value /= base;
10002a80:	0028      	movs	r0, r5
10002a82:	210a      	movs	r1, #10
10002a84:	f7fd fc76 	bl	10000374 <__wrap___aeabi_uidiv>
10002a88:	002f      	movs	r7, r5
10002a8a:	0005      	movs	r5, r0
        } while (value && (len < PICO_PRINTF_NTOA_BUFFER_SIZE));
10002a8c:	2f09      	cmp	r7, #9
10002a8e:	d8e9      	bhi.n	10002a64 <_etoa+0x2e0>
    return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int) base, prec, width, flags);
10002a90:	2305      	movs	r3, #5
10002a92:	9306      	str	r3, [sp, #24]
10002a94:	2300      	movs	r3, #0
10002a96:	9304      	str	r3, [sp, #16]
10002a98:	330a      	adds	r3, #10
10002a9a:	9303      	str	r3, [sp, #12]
10002a9c:	464b      	mov	r3, r9
10002a9e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
10002aa0:	9302      	str	r3, [sp, #8]
10002aa2:	ab12      	add	r3, sp, #72	; 0x48
10002aa4:	9300      	str	r3, [sp, #0]
10002aa6:	4642      	mov	r2, r8
10002aa8:	4653      	mov	r3, sl
10002aaa:	4659      	mov	r1, fp
10002aac:	0038      	movs	r0, r7
10002aae:	9405      	str	r4, [sp, #20]
10002ab0:	9601      	str	r6, [sp, #4]
10002ab2:	f7ff fd71 	bl	10002598 <_ntoa_format>
                         FLAGS_ZEROPAD | FLAGS_PLUS);
        // might need to right-pad spaces
        if (flags & FLAGS_LEFT) {
10002ab6:	9b10      	ldr	r3, [sp, #64]	; 0x40
    return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int) base, prec, width, flags);
10002ab8:	0005      	movs	r5, r0
        if (flags & FLAGS_LEFT) {
10002aba:	2b00      	cmp	r3, #0
10002abc:	d020      	beq.n	10002b00 <_etoa+0x37c>
            while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
10002abe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
10002ac0:	1ac4      	subs	r4, r0, r3
10002ac2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
10002ac4:	42a3      	cmp	r3, r4
10002ac6:	d91b      	bls.n	10002b00 <_etoa+0x37c>
10002ac8:	001e      	movs	r6, r3
10002aca:	002a      	movs	r2, r5
10002acc:	4653      	mov	r3, sl
10002ace:	4659      	mov	r1, fp
10002ad0:	2020      	movs	r0, #32
10002ad2:	3401      	adds	r4, #1
10002ad4:	47b8      	blx	r7
10002ad6:	3501      	adds	r5, #1
10002ad8:	42a6      	cmp	r6, r4
10002ada:	d8f6      	bhi.n	10002aca <_etoa+0x346>
10002adc:	e010      	b.n	10002b00 <_etoa+0x37c>
        return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
10002ade:	9b28      	ldr	r3, [sp, #160]	; 0xa0
10002ae0:	464a      	mov	r2, r9
10002ae2:	9304      	str	r3, [sp, #16]
10002ae4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
10002ae6:	4659      	mov	r1, fp
10002ae8:	9303      	str	r3, [sp, #12]
10002aea:	9b26      	ldr	r3, [sp, #152]	; 0x98
10002aec:	980b      	ldr	r0, [sp, #44]	; 0x2c
10002aee:	9302      	str	r3, [sp, #8]
10002af0:	4643      	mov	r3, r8
10002af2:	9200      	str	r2, [sp, #0]
10002af4:	9301      	str	r3, [sp, #4]
10002af6:	4653      	mov	r3, sl
10002af8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
10002afa:	f000 f853 	bl	10002ba4 <_ftoa>
10002afe:	0005      	movs	r5, r0
        }
    }
    return idx;
}
10002b00:	0028      	movs	r0, r5
10002b02:	b01b      	add	sp, #108	; 0x6c
10002b04:	bcf0      	pop	{r4, r5, r6, r7}
10002b06:	46bb      	mov	fp, r7
10002b08:	46b2      	mov	sl, r6
10002b0a:	46a9      	mov	r9, r5
10002b0c:	46a0      	mov	r8, r4
10002b0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if ((prec > 0) && (flags & FLAGS_PRECISION)) {
10002b10:	9b26      	ldr	r3, [sp, #152]	; 0x98
10002b12:	2b00      	cmp	r3, #0
10002b14:	d100      	bne.n	10002b18 <_etoa+0x394>
10002b16:	e752      	b.n	100029be <_etoa+0x23a>
                --prec;
10002b18:	9b11      	ldr	r3, [sp, #68]	; 0x44
10002b1a:	1e5a      	subs	r2, r3, #1
10002b1c:	4193      	sbcs	r3, r2
10002b1e:	9a26      	ldr	r2, [sp, #152]	; 0x98
10002b20:	1ad3      	subs	r3, r2, r3
10002b22:	9326      	str	r3, [sp, #152]	; 0x98
10002b24:	e74b      	b.n	100029be <_etoa+0x23a>
        value = -value;
10002b26:	464b      	mov	r3, r9
10002b28:	930a      	str	r3, [sp, #40]	; 0x28
10002b2a:	2380      	movs	r3, #128	; 0x80
10002b2c:	061b      	lsls	r3, r3, #24
10002b2e:	4443      	add	r3, r8
10002b30:	9309      	str	r3, [sp, #36]	; 0x24
10002b32:	e660      	b.n	100027f6 <_etoa+0x72>
                prec = (unsigned) ((int) prec - expval - 1);
10002b34:	1b58      	subs	r0, r3, r5
10002b36:	1e43      	subs	r3, r0, #1
10002b38:	9326      	str	r3, [sp, #152]	; 0x98
10002b3a:	e738      	b.n	100029ae <_etoa+0x22a>
10002b3c:	7fefffff 	.word	0x7fefffff
10002b40:	ffefffff 	.word	0xffefffff
10002b44:	fffffc01 	.word	0xfffffc01
10002b48:	509f79fb 	.word	0x509f79fb
10002b4c:	3fd34413 	.word	0x3fd34413
10002b50:	8b60c8b3 	.word	0x8b60c8b3
10002b54:	3fc68a28 	.word	0x3fc68a28
10002b58:	3ff00000 	.word	0x3ff00000
10002b5c:	3ff80000 	.word	0x3ff80000
10002b60:	636f4361 	.word	0x636f4361
10002b64:	3fd287a7 	.word	0x3fd287a7
10002b68:	0979a371 	.word	0x0979a371
10002b6c:	400a934f 	.word	0x400a934f
10002b70:	3fe00000 	.word	0x3fe00000
10002b74:	bbb55516 	.word	0xbbb55516
10002b78:	40026bb1 	.word	0x40026bb1
10002b7c:	fefa39ef 	.word	0xfefa39ef
10002b80:	3fe62e42 	.word	0x3fe62e42
10002b84:	402c0000 	.word	0x402c0000
10002b88:	40240000 	.word	0x40240000
10002b8c:	40180000 	.word	0x40180000
10002b90:	000003ff 	.word	0x000003ff
10002b94:	eb1c432d 	.word	0xeb1c432d
10002b98:	3f1a36e2 	.word	0x3f1a36e2
10002b9c:	412e8480 	.word	0x412e8480
10002ba0:	fffff7ff 	.word	0xfffff7ff

10002ba4 <_ftoa>:
                    unsigned int width, unsigned int flags) {
10002ba4:	b5f0      	push	{r4, r5, r6, r7, lr}
10002ba6:	464e      	mov	r6, r9
10002ba8:	46de      	mov	lr, fp
10002baa:	4657      	mov	r7, sl
10002bac:	4645      	mov	r5, r8
10002bae:	b5e0      	push	{r5, r6, r7, lr}
10002bb0:	b097      	sub	sp, #92	; 0x5c
10002bb2:	4699      	mov	r9, r3
10002bb4:	9e20      	ldr	r6, [sp, #128]	; 0x80
10002bb6:	9f21      	ldr	r7, [sp, #132]	; 0x84
10002bb8:	9b22      	ldr	r3, [sp, #136]	; 0x88
10002bba:	4683      	mov	fp, r0
10002bbc:	4698      	mov	r8, r3
10002bbe:	9107      	str	r1, [sp, #28]
10002bc0:	920c      	str	r2, [sp, #48]	; 0x30
    if (is_nan(value))
10002bc2:	003b      	movs	r3, r7
10002bc4:	0032      	movs	r2, r6
10002bc6:	0030      	movs	r0, r6
10002bc8:	0039      	movs	r1, r7
10002bca:	f7fd fea8 	bl	1000091e <__wrap___aeabi_dcmpun>
10002bce:	2800      	cmp	r0, #0
10002bd0:	d000      	beq.n	10002bd4 <_ftoa+0x30>
10002bd2:	e1a9      	b.n	10002f28 <_ftoa+0x384>
    if (value < -DBL_MAX)
10002bd4:	2201      	movs	r2, #1
10002bd6:	0030      	movs	r0, r6
10002bd8:	0039      	movs	r1, r7
10002bda:	4bca      	ldr	r3, [pc, #808]	; (10002f04 <_ftoa+0x360>)
10002bdc:	4252      	negs	r2, r2
10002bde:	f7fd fe83 	bl	100008e8 <__wrap___aeabi_dcmplt>
10002be2:	2800      	cmp	r0, #0
10002be4:	d000      	beq.n	10002be8 <_ftoa+0x44>
10002be6:	e0e1      	b.n	10002dac <_ftoa+0x208>
    if (value > DBL_MAX)
10002be8:	2201      	movs	r2, #1
10002bea:	0030      	movs	r0, r6
10002bec:	0039      	movs	r1, r7
10002bee:	4bc6      	ldr	r3, [pc, #792]	; (10002f08 <_ftoa+0x364>)
10002bf0:	4252      	negs	r2, r2
10002bf2:	f7fd fe8f 	bl	10000914 <__wrap___aeabi_dcmpgt>
10002bf6:	2800      	cmp	r0, #0
10002bf8:	d000      	beq.n	10002bfc <_ftoa+0x58>
10002bfa:	e0b7      	b.n	10002d6c <_ftoa+0x1c8>
    if ((value > PICO_PRINTF_MAX_FLOAT) || (value < -PICO_PRINTF_MAX_FLOAT)) {
10002bfc:	2200      	movs	r2, #0
10002bfe:	0030      	movs	r0, r6
10002c00:	0039      	movs	r1, r7
10002c02:	4bc2      	ldr	r3, [pc, #776]	; (10002f0c <_ftoa+0x368>)
10002c04:	f7fd fe86 	bl	10000914 <__wrap___aeabi_dcmpgt>
10002c08:	2800      	cmp	r0, #0
10002c0a:	d000      	beq.n	10002c0e <_ftoa+0x6a>
10002c0c:	e099      	b.n	10002d42 <_ftoa+0x19e>
10002c0e:	2200      	movs	r2, #0
10002c10:	0030      	movs	r0, r6
10002c12:	0039      	movs	r1, r7
10002c14:	4bbe      	ldr	r3, [pc, #760]	; (10002f10 <_ftoa+0x36c>)
10002c16:	f7fd fe67 	bl	100008e8 <__wrap___aeabi_dcmplt>
10002c1a:	2800      	cmp	r0, #0
10002c1c:	d000      	beq.n	10002c20 <_ftoa+0x7c>
10002c1e:	e090      	b.n	10002d42 <_ftoa+0x19e>
    if (value < 0) {
10002c20:	2200      	movs	r2, #0
10002c22:	2300      	movs	r3, #0
10002c24:	0030      	movs	r0, r6
10002c26:	0039      	movs	r1, r7
10002c28:	f7fd fe5e 	bl	100008e8 <__wrap___aeabi_dcmplt>
10002c2c:	2800      	cmp	r0, #0
10002c2e:	d000      	beq.n	10002c32 <_ftoa+0x8e>
10002c30:	e0b1      	b.n	10002d96 <_ftoa+0x1f2>
    bool negative = false;
10002c32:	2300      	movs	r3, #0
10002c34:	930d      	str	r3, [sp, #52]	; 0x34
    if (!(flags & FLAGS_PRECISION)) {
10002c36:	9b24      	ldr	r3, [sp, #144]	; 0x90
10002c38:	055b      	lsls	r3, r3, #21
10002c3a:	d401      	bmi.n	10002c40 <_ftoa+0x9c>
        prec = PICO_PRINTF_DEFAULT_FLOAT_PRECISION;
10002c3c:	2306      	movs	r3, #6
10002c3e:	4698      	mov	r8, r3
        buf[len++] = '0';
10002c40:	ab08      	add	r3, sp, #32
10002c42:	469c      	mov	ip, r3
10002c44:	2217      	movs	r2, #23
        prec = PICO_PRINTF_DEFAULT_FLOAT_PRECISION;
10002c46:	2400      	movs	r4, #0
        buf[len++] = '0';
10002c48:	2330      	movs	r3, #48	; 0x30
10002c4a:	4641      	mov	r1, r8
10002c4c:	4462      	add	r2, ip
10002c4e:	e004      	b.n	10002c5a <_ftoa+0xb6>
10002c50:	3401      	adds	r4, #1
10002c52:	5513      	strb	r3, [r2, r4]
        prec--;
10002c54:	3901      	subs	r1, #1
    while ((len < PICO_PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
10002c56:	2c20      	cmp	r4, #32
10002c58:	d001      	beq.n	10002c5e <_ftoa+0xba>
10002c5a:	2909      	cmp	r1, #9
10002c5c:	d8f8      	bhi.n	10002c50 <_ftoa+0xac>
10002c5e:	4688      	mov	r8, r1
    int whole = (int) value;
10002c60:	0030      	movs	r0, r6
10002c62:	0039      	movs	r1, r7
10002c64:	f7fd fe86 	bl	10000974 <__wrap___aeabi_d2iz>
    double tmp = (value - whole) * pow10[prec];
10002c68:	4643      	mov	r3, r8
10002c6a:	00da      	lsls	r2, r3, #3
10002c6c:	4ba9      	ldr	r3, [pc, #676]	; (10002f14 <_ftoa+0x370>)
    int whole = (int) value;
10002c6e:	0005      	movs	r5, r0
    double tmp = (value - whole) * pow10[prec];
10002c70:	189b      	adds	r3, r3, r2
10002c72:	681a      	ldr	r2, [r3, #0]
10002c74:	685b      	ldr	r3, [r3, #4]
10002c76:	9208      	str	r2, [sp, #32]
10002c78:	9309      	str	r3, [sp, #36]	; 0x24
10002c7a:	f7fd fe63 	bl	10000944 <__wrap___aeabi_i2d>
10002c7e:	0002      	movs	r2, r0
10002c80:	000b      	movs	r3, r1
10002c82:	0030      	movs	r0, r6
10002c84:	0039      	movs	r1, r7
10002c86:	f7fd fdd2 	bl	1000082e <__wrap___aeabi_dsub>
10002c8a:	9a08      	ldr	r2, [sp, #32]
10002c8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
10002c8e:	f7fd fde9 	bl	10000864 <__wrap___aeabi_dmul>
    unsigned long frac = (unsigned long) tmp;
10002c92:	900a      	str	r0, [sp, #40]	; 0x28
10002c94:	910b      	str	r1, [sp, #44]	; 0x2c
10002c96:	f7fd fe91 	bl	100009bc <__wrap___aeabi_d2uiz>
10002c9a:	4682      	mov	sl, r0
    diff = tmp - frac;
10002c9c:	f7fd fe4e 	bl	1000093c <__wrap___aeabi_ui2d>
10002ca0:	0002      	movs	r2, r0
10002ca2:	000b      	movs	r3, r1
10002ca4:	980a      	ldr	r0, [sp, #40]	; 0x28
10002ca6:	990b      	ldr	r1, [sp, #44]	; 0x2c
10002ca8:	f7fd fdc1 	bl	1000082e <__wrap___aeabi_dsub>
    if (diff > 0.5) {
10002cac:	2200      	movs	r2, #0
10002cae:	4b9a      	ldr	r3, [pc, #616]	; (10002f18 <_ftoa+0x374>)
    diff = tmp - frac;
10002cb0:	900a      	str	r0, [sp, #40]	; 0x28
10002cb2:	910b      	str	r1, [sp, #44]	; 0x2c
    if (diff > 0.5) {
10002cb4:	f7fd fe2e 	bl	10000914 <__wrap___aeabi_dcmpgt>
10002cb8:	2800      	cmp	r0, #0
10002cba:	d100      	bne.n	10002cbe <_ftoa+0x11a>
10002cbc:	e0c0      	b.n	10002e40 <_ftoa+0x29c>
        ++frac;
10002cbe:	2301      	movs	r3, #1
10002cc0:	469c      	mov	ip, r3
10002cc2:	44e2      	add	sl, ip
        if (frac >= pow10[prec]) {
10002cc4:	4650      	mov	r0, sl
10002cc6:	f7fd fe39 	bl	1000093c <__wrap___aeabi_ui2d>
10002cca:	0002      	movs	r2, r0
10002ccc:	000b      	movs	r3, r1
10002cce:	9808      	ldr	r0, [sp, #32]
10002cd0:	9909      	ldr	r1, [sp, #36]	; 0x24
10002cd2:	f7fd fe0f 	bl	100008f4 <__wrap___aeabi_dcmple>
10002cd6:	2800      	cmp	r0, #0
10002cd8:	d002      	beq.n	10002ce0 <_ftoa+0x13c>
            frac = 0;
10002cda:	2300      	movs	r3, #0
10002cdc:	469a      	mov	sl, r3
            ++whole;
10002cde:	3501      	adds	r5, #1
    if (prec == 0U) {
10002ce0:	4643      	mov	r3, r8
10002ce2:	2b00      	cmp	r3, #0
10002ce4:	d06a      	beq.n	10002dbc <_ftoa+0x218>
            buf[len++] = (char) (48U + (frac % 10U));
10002ce6:	ab08      	add	r3, sp, #32
10002ce8:	2617      	movs	r6, #23
10002cea:	469c      	mov	ip, r3
10002cec:	9508      	str	r5, [sp, #32]
10002cee:	4466      	add	r6, ip
10002cf0:	4655      	mov	r5, sl
10002cf2:	e014      	b.n	10002d1e <_ftoa+0x17a>
            --count;
10002cf4:	2301      	movs	r3, #1
10002cf6:	425b      	negs	r3, r3
10002cf8:	4443      	add	r3, r8
            buf[len++] = (char) (48U + (frac % 10U));
10002cfa:	210a      	movs	r1, #10
10002cfc:	0028      	movs	r0, r5
            --count;
10002cfe:	469a      	mov	sl, r3
            buf[len++] = (char) (48U + (frac % 10U));
10002d00:	f7fd fb38 	bl	10000374 <__wrap___aeabi_uidiv>
10002d04:	3401      	adds	r4, #1
10002d06:	3130      	adds	r1, #48	; 0x30
10002d08:	1937      	adds	r7, r6, r4
10002d0a:	7039      	strb	r1, [r7, #0]
            if (!(frac /= 10U)) {
10002d0c:	0028      	movs	r0, r5
10002d0e:	210a      	movs	r1, #10
10002d10:	f7fd fb30 	bl	10000374 <__wrap___aeabi_uidiv>
10002d14:	2d09      	cmp	r5, #9
10002d16:	d800      	bhi.n	10002d1a <_ftoa+0x176>
10002d18:	e0d0      	b.n	10002ebc <_ftoa+0x318>
            --count;
10002d1a:	46d0      	mov	r8, sl
            if (!(frac /= 10U)) {
10002d1c:	0005      	movs	r5, r0
        while (len < PICO_PRINTF_FTOA_BUFFER_SIZE) {
10002d1e:	2c20      	cmp	r4, #32
10002d20:	d1e8      	bne.n	10002cf4 <_ftoa+0x150>
10002d22:	ab0e      	add	r3, sp, #56	; 0x38
10002d24:	4698      	mov	r8, r3
    if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
10002d26:	2303      	movs	r3, #3
10002d28:	9a24      	ldr	r2, [sp, #144]	; 0x90
10002d2a:	4013      	ands	r3, r2
10002d2c:	2b01      	cmp	r3, #1
10002d2e:	d100      	bne.n	10002d32 <_ftoa+0x18e>
10002d30:	e096      	b.n	10002e60 <_ftoa+0x2bc>
10002d32:	2320      	movs	r3, #32
    return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
10002d34:	9a24      	ldr	r2, [sp, #144]	; 0x90
10002d36:	9301      	str	r3, [sp, #4]
10002d38:	9203      	str	r2, [sp, #12]
10002d3a:	9a23      	ldr	r2, [sp, #140]	; 0x8c
10002d3c:	4643      	mov	r3, r8
10002d3e:	9202      	str	r2, [sp, #8]
10002d40:	e01e      	b.n	10002d80 <_ftoa+0x1dc>
        return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
10002d42:	9b24      	ldr	r3, [sp, #144]	; 0x90
10002d44:	4658      	mov	r0, fp
10002d46:	9304      	str	r3, [sp, #16]
10002d48:	9b23      	ldr	r3, [sp, #140]	; 0x8c
10002d4a:	9600      	str	r6, [sp, #0]
10002d4c:	9701      	str	r7, [sp, #4]
10002d4e:	9303      	str	r3, [sp, #12]
10002d50:	4643      	mov	r3, r8
10002d52:	9a0c      	ldr	r2, [sp, #48]	; 0x30
10002d54:	9302      	str	r3, [sp, #8]
10002d56:	9907      	ldr	r1, [sp, #28]
10002d58:	464b      	mov	r3, r9
10002d5a:	f7ff fd13 	bl	10002784 <_etoa>
}
10002d5e:	b017      	add	sp, #92	; 0x5c
10002d60:	bcf0      	pop	{r4, r5, r6, r7}
10002d62:	46bb      	mov	fp, r7
10002d64:	46b2      	mov	sl, r6
10002d66:	46a9      	mov	r9, r5
10002d68:	46a0      	mov	r8, r4
10002d6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U,
10002d6c:	9b24      	ldr	r3, [sp, #144]	; 0x90
10002d6e:	075b      	lsls	r3, r3, #29
10002d70:	d40e      	bmi.n	10002d90 <_ftoa+0x1ec>
10002d72:	2203      	movs	r2, #3
10002d74:	4b69      	ldr	r3, [pc, #420]	; (10002f1c <_ftoa+0x378>)
10002d76:	9924      	ldr	r1, [sp, #144]	; 0x90
10002d78:	9201      	str	r2, [sp, #4]
10002d7a:	9103      	str	r1, [sp, #12]
10002d7c:	9923      	ldr	r1, [sp, #140]	; 0x8c
10002d7e:	9102      	str	r1, [sp, #8]
    return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
10002d80:	9300      	str	r3, [sp, #0]
10002d82:	4658      	mov	r0, fp
10002d84:	464b      	mov	r3, r9
10002d86:	9a0c      	ldr	r2, [sp, #48]	; 0x30
10002d88:	9907      	ldr	r1, [sp, #28]
10002d8a:	f7ff fbb7 	bl	100024fc <_out_rev>
10002d8e:	e7e6      	b.n	10002d5e <_ftoa+0x1ba>
        return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U,
10002d90:	2204      	movs	r2, #4
10002d92:	4b63      	ldr	r3, [pc, #396]	; (10002f20 <_ftoa+0x37c>)
10002d94:	e7ef      	b.n	10002d76 <_ftoa+0x1d2>
        value = 0 - value;
10002d96:	003b      	movs	r3, r7
10002d98:	0032      	movs	r2, r6
10002d9a:	2000      	movs	r0, #0
10002d9c:	2100      	movs	r1, #0
10002d9e:	f7fd fd46 	bl	1000082e <__wrap___aeabi_dsub>
        negative = true;
10002da2:	2301      	movs	r3, #1
        value = 0 - value;
10002da4:	0006      	movs	r6, r0
10002da6:	000f      	movs	r7, r1
        negative = true;
10002da8:	930d      	str	r3, [sp, #52]	; 0x34
10002daa:	e744      	b.n	10002c36 <_ftoa+0x92>
        return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
10002dac:	9b24      	ldr	r3, [sp, #144]	; 0x90
10002dae:	9303      	str	r3, [sp, #12]
10002db0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
10002db2:	9302      	str	r3, [sp, #8]
10002db4:	2304      	movs	r3, #4
10002db6:	9301      	str	r3, [sp, #4]
10002db8:	4b5a      	ldr	r3, [pc, #360]	; (10002f24 <_ftoa+0x380>)
10002dba:	e7e1      	b.n	10002d80 <_ftoa+0x1dc>
        diff = value - (double) whole;
10002dbc:	0028      	movs	r0, r5
10002dbe:	f7fd fdc1 	bl	10000944 <__wrap___aeabi_i2d>
10002dc2:	0002      	movs	r2, r0
10002dc4:	000b      	movs	r3, r1
10002dc6:	0030      	movs	r0, r6
10002dc8:	0039      	movs	r1, r7
10002dca:	f7fd fd30 	bl	1000082e <__wrap___aeabi_dsub>
        if (!((diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
10002dce:	4b52      	ldr	r3, [pc, #328]	; (10002f18 <_ftoa+0x374>)
10002dd0:	2200      	movs	r2, #0
        diff = value - (double) whole;
10002dd2:	0006      	movs	r6, r0
10002dd4:	000f      	movs	r7, r1
        if (!((diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
10002dd6:	f7fd fd87 	bl	100008e8 <__wrap___aeabi_dcmplt>
10002dda:	ab0e      	add	r3, sp, #56	; 0x38
10002ddc:	4698      	mov	r8, r3
10002dde:	2800      	cmp	r0, #0
10002de0:	d10a      	bne.n	10002df8 <_ftoa+0x254>
10002de2:	2200      	movs	r2, #0
10002de4:	0030      	movs	r0, r6
10002de6:	0039      	movs	r1, r7
10002de8:	4b4b      	ldr	r3, [pc, #300]	; (10002f18 <_ftoa+0x374>)
10002dea:	f7fd fd93 	bl	10000914 <__wrap___aeabi_dcmpgt>
10002dee:	2800      	cmp	r0, #0
10002df0:	d102      	bne.n	10002df8 <_ftoa+0x254>
10002df2:	07eb      	lsls	r3, r5, #31
10002df4:	d500      	bpl.n	10002df8 <_ftoa+0x254>
            ++whole;
10002df6:	3501      	adds	r5, #1
    while (len < PICO_PRINTF_FTOA_BUFFER_SIZE) {
10002df8:	2c20      	cmp	r4, #32
10002dfa:	d094      	beq.n	10002d26 <_ftoa+0x182>
        buf[len++] = (char) (48 + (whole % 10));
10002dfc:	aa08      	add	r2, sp, #32
10002dfe:	4694      	mov	ip, r2
10002e00:	2317      	movs	r3, #23
10002e02:	0028      	movs	r0, r5
10002e04:	4463      	add	r3, ip
10002e06:	210a      	movs	r1, #10
10002e08:	3401      	adds	r4, #1
10002e0a:	191e      	adds	r6, r3, r4
10002e0c:	f7fd fa86 	bl	1000031c <__wrap___aeabi_idiv>
10002e10:	3130      	adds	r1, #48	; 0x30
        if (!(whole /= 10)) {
10002e12:	0028      	movs	r0, r5
        buf[len++] = (char) (48 + (whole % 10));
10002e14:	7031      	strb	r1, [r6, #0]
        if (!(whole /= 10)) {
10002e16:	210a      	movs	r1, #10
10002e18:	f7fd fa80 	bl	1000031c <__wrap___aeabi_idiv>
10002e1c:	1e05      	subs	r5, r0, #0
10002e1e:	d1eb      	bne.n	10002df8 <_ftoa+0x254>
    if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
10002e20:	2303      	movs	r3, #3
10002e22:	9a24      	ldr	r2, [sp, #144]	; 0x90
10002e24:	4013      	ands	r3, r2
10002e26:	2b01      	cmp	r3, #1
10002e28:	d01b      	beq.n	10002e62 <_ftoa+0x2be>
    if (len < PICO_PRINTF_FTOA_BUFFER_SIZE) {
10002e2a:	2c20      	cmp	r4, #32
10002e2c:	d100      	bne.n	10002e30 <_ftoa+0x28c>
10002e2e:	e780      	b.n	10002d32 <_ftoa+0x18e>
        if (negative) {
10002e30:	9b0d      	ldr	r3, [sp, #52]	; 0x34
10002e32:	2b00      	cmp	r3, #0
10002e34:	d035      	beq.n	10002ea2 <_ftoa+0x2fe>
            buf[len++] = '-';
10002e36:	222d      	movs	r2, #45	; 0x2d
10002e38:	4641      	mov	r1, r8
10002e3a:	1c63      	adds	r3, r4, #1
10002e3c:	550a      	strb	r2, [r1, r4]
10002e3e:	e779      	b.n	10002d34 <_ftoa+0x190>
    } else if (diff < 0.5) {
10002e40:	2200      	movs	r2, #0
10002e42:	980a      	ldr	r0, [sp, #40]	; 0x28
10002e44:	990b      	ldr	r1, [sp, #44]	; 0x2c
10002e46:	4b34      	ldr	r3, [pc, #208]	; (10002f18 <_ftoa+0x374>)
10002e48:	f7fd fd4e 	bl	100008e8 <__wrap___aeabi_dcmplt>
10002e4c:	2800      	cmp	r0, #0
10002e4e:	d000      	beq.n	10002e52 <_ftoa+0x2ae>
10002e50:	e746      	b.n	10002ce0 <_ftoa+0x13c>
    } else if ((frac == 0U) || (frac & 1U)) {
10002e52:	4653      	mov	r3, sl
10002e54:	2b00      	cmp	r3, #0
10002e56:	d151      	bne.n	10002efc <_ftoa+0x358>
        ++frac;
10002e58:	2301      	movs	r3, #1
10002e5a:	469c      	mov	ip, r3
10002e5c:	44e2      	add	sl, ip
10002e5e:	e73f      	b.n	10002ce0 <_ftoa+0x13c>
    if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
10002e60:	2420      	movs	r4, #32
        if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
10002e62:	9b23      	ldr	r3, [sp, #140]	; 0x8c
10002e64:	2b00      	cmp	r3, #0
10002e66:	d0e0      	beq.n	10002e2a <_ftoa+0x286>
10002e68:	9b0d      	ldr	r3, [sp, #52]	; 0x34
10002e6a:	2b00      	cmp	r3, #0
10002e6c:	d103      	bne.n	10002e76 <_ftoa+0x2d2>
10002e6e:	9a24      	ldr	r2, [sp, #144]	; 0x90
10002e70:	330c      	adds	r3, #12
10002e72:	4213      	tst	r3, r2
10002e74:	d002      	beq.n	10002e7c <_ftoa+0x2d8>
            width--;
10002e76:	9b23      	ldr	r3, [sp, #140]	; 0x8c
10002e78:	3b01      	subs	r3, #1
10002e7a:	9323      	str	r3, [sp, #140]	; 0x8c
        while ((len < width) && (len < PICO_PRINTF_FTOA_BUFFER_SIZE)) {
10002e7c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
10002e7e:	42a3      	cmp	r3, r4
10002e80:	d9d3      	bls.n	10002e2a <_ftoa+0x286>
10002e82:	ab08      	add	r3, sp, #32
10002e84:	469c      	mov	ip, r3
10002e86:	2217      	movs	r2, #23
            buf[len++] = '0';
10002e88:	2330      	movs	r3, #48	; 0x30
10002e8a:	4462      	add	r2, ip
        while ((len < width) && (len < PICO_PRINTF_FTOA_BUFFER_SIZE)) {
10002e8c:	2c20      	cmp	r4, #32
10002e8e:	d100      	bne.n	10002e92 <_ftoa+0x2ee>
10002e90:	e74f      	b.n	10002d32 <_ftoa+0x18e>
10002e92:	9923      	ldr	r1, [sp, #140]	; 0x8c
            buf[len++] = '0';
10002e94:	3401      	adds	r4, #1
10002e96:	5513      	strb	r3, [r2, r4]
        while ((len < width) && (len < PICO_PRINTF_FTOA_BUFFER_SIZE)) {
10002e98:	428c      	cmp	r4, r1
10002e9a:	d0c6      	beq.n	10002e2a <_ftoa+0x286>
10002e9c:	2c20      	cmp	r4, #32
10002e9e:	d1f8      	bne.n	10002e92 <_ftoa+0x2ee>
10002ea0:	e747      	b.n	10002d32 <_ftoa+0x18e>
        } else if (flags & FLAGS_PLUS) {
10002ea2:	9b24      	ldr	r3, [sp, #144]	; 0x90
10002ea4:	075b      	lsls	r3, r3, #29
10002ea6:	d424      	bmi.n	10002ef2 <_ftoa+0x34e>
        } else if (flags & FLAGS_SPACE) {
10002ea8:	9a24      	ldr	r2, [sp, #144]	; 0x90
10002eaa:	0023      	movs	r3, r4
10002eac:	0712      	lsls	r2, r2, #28
10002eae:	d400      	bmi.n	10002eb2 <_ftoa+0x30e>
10002eb0:	e740      	b.n	10002d34 <_ftoa+0x190>
            buf[len++] = ' ';
10002eb2:	2220      	movs	r2, #32
10002eb4:	4641      	mov	r1, r8
10002eb6:	3301      	adds	r3, #1
10002eb8:	550a      	strb	r2, [r1, r4]
10002eba:	e73b      	b.n	10002d34 <_ftoa+0x190>
        while ((len < PICO_PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
10002ebc:	4657      	mov	r7, sl
10002ebe:	9d08      	ldr	r5, [sp, #32]
10002ec0:	2c20      	cmp	r4, #32
10002ec2:	d100      	bne.n	10002ec6 <_ftoa+0x322>
10002ec4:	e72d      	b.n	10002d22 <_ftoa+0x17e>
10002ec6:	0022      	movs	r2, r4
            buf[len++] = '0';
10002ec8:	2130      	movs	r1, #48	; 0x30
10002eca:	4640      	mov	r0, r8
        while ((len < PICO_PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
10002ecc:	2f00      	cmp	r7, #0
10002ece:	d009      	beq.n	10002ee4 <_ftoa+0x340>
            buf[len++] = '0';
10002ed0:	3201      	adds	r2, #1
10002ed2:	54b1      	strb	r1, [r6, r2]
        while ((len < PICO_PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
10002ed4:	2a20      	cmp	r2, #32
10002ed6:	d100      	bne.n	10002eda <_ftoa+0x336>
10002ed8:	e723      	b.n	10002d22 <_ftoa+0x17e>
10002eda:	43d3      	mvns	r3, r2
10002edc:	191b      	adds	r3, r3, r4
10002ede:	181b      	adds	r3, r3, r0
10002ee0:	2b00      	cmp	r3, #0
10002ee2:	d1f5      	bne.n	10002ed0 <_ftoa+0x32c>
            buf[len++] = '.';
10002ee4:	ab0e      	add	r3, sp, #56	; 0x38
10002ee6:	4698      	mov	r8, r3
10002ee8:	232e      	movs	r3, #46	; 0x2e
10002eea:	4641      	mov	r1, r8
10002eec:	1c54      	adds	r4, r2, #1
10002eee:	548b      	strb	r3, [r1, r2]
10002ef0:	e782      	b.n	10002df8 <_ftoa+0x254>
            buf[len++] = '+';  // ignore the space if the '+' exists
10002ef2:	222b      	movs	r2, #43	; 0x2b
10002ef4:	4641      	mov	r1, r8
10002ef6:	1c63      	adds	r3, r4, #1
10002ef8:	550a      	strb	r2, [r1, r4]
10002efa:	e71b      	b.n	10002d34 <_ftoa+0x190>
    } else if ((frac == 0U) || (frac & 1U)) {
10002efc:	07db      	lsls	r3, r3, #31
10002efe:	d400      	bmi.n	10002f02 <_ftoa+0x35e>
10002f00:	e6ee      	b.n	10002ce0 <_ftoa+0x13c>
10002f02:	e7a9      	b.n	10002e58 <_ftoa+0x2b4>
10002f04:	ffefffff 	.word	0xffefffff
10002f08:	7fefffff 	.word	0x7fefffff
10002f0c:	41cdcd65 	.word	0x41cdcd65
10002f10:	c1cdcd65 	.word	0xc1cdcd65
10002f14:	100099f8 	.word	0x100099f8
10002f18:	3fe00000 	.word	0x3fe00000
10002f1c:	100097fc 	.word	0x100097fc
10002f20:	10009800 	.word	0x10009800
10002f24:	1000980c 	.word	0x1000980c
        return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
10002f28:	9b24      	ldr	r3, [sp, #144]	; 0x90
10002f2a:	9303      	str	r3, [sp, #12]
10002f2c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
10002f2e:	9302      	str	r3, [sp, #8]
10002f30:	2303      	movs	r3, #3
10002f32:	9301      	str	r3, [sp, #4]
10002f34:	4b00      	ldr	r3, [pc, #0]	; (10002f38 <_ftoa+0x394>)
10002f36:	e723      	b.n	10002d80 <_ftoa+0x1dc>
10002f38:	10009808 	.word	0x10009808

10002f3c <_vsnprintf>:

#endif  // PICO_PRINTF_SUPPORT_EXPONENTIAL
#endif  // PICO_PRINTF_SUPPORT_FLOAT

// internal vsnprintf
static int _vsnprintf(out_fct_type out, char *buffer, const size_t maxlen, const char *format, va_list va) {
10002f3c:	b5f0      	push	{r4, r5, r6, r7, lr}
10002f3e:	46de      	mov	lr, fp
10002f40:	464e      	mov	r6, r9
10002f42:	4657      	mov	r7, sl
10002f44:	4645      	mov	r5, r8
10002f46:	b5e0      	push	{r5, r6, r7, lr}
10002f48:	b09f      	sub	sp, #124	; 0x7c
10002f4a:	001c      	movs	r4, r3
10002f4c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
10002f4e:	4691      	mov	r9, r2
10002f50:	9309      	str	r3, [sp, #36]	; 0x24
#if !PICO_PRINTF_ALWAYS_INCLUDED
    lazy_vsnprintf = _vsnprintf;
10002f52:	4ac9      	ldr	r2, [pc, #804]	; (10003278 <_vsnprintf+0x33c>)
10002f54:	4bc9      	ldr	r3, [pc, #804]	; (1000327c <_vsnprintf+0x340>)
static int _vsnprintf(out_fct_type out, char *buffer, const size_t maxlen, const char *format, va_list va) {
10002f56:	468b      	mov	fp, r1
10002f58:	9008      	str	r0, [sp, #32]
    lazy_vsnprintf = _vsnprintf;
10002f5a:	601a      	str	r2, [r3, #0]
#endif
    unsigned int flags, width, precision, n;
    size_t idx = 0U;

    if (!buffer) {
10002f5c:	2900      	cmp	r1, #0
10002f5e:	d100      	bne.n	10002f62 <_vsnprintf+0x26>
10002f60:	e218      	b.n	10003394 <_vsnprintf+0x458>
        // use null output function
        out = _out_null;
    }

    while (*format) {
10002f62:	2300      	movs	r3, #0
10002f64:	7820      	ldrb	r0, [r4, #0]
10002f66:	469a      	mov	sl, r3
10002f68:	2800      	cmp	r0, #0
10002f6a:	d100      	bne.n	10002f6e <_vsnprintf+0x32>
10002f6c:	e21a      	b.n	100033a4 <_vsnprintf+0x468>
10002f6e:	0026      	movs	r6, r4
10002f70:	001d      	movs	r5, r3
10002f72:	465c      	mov	r4, fp
10002f74:	e00a      	b.n	10002f8c <_vsnprintf+0x50>
                out('%', buffer, idx++, maxlen);
                format++;
                break;

            default :
                out(*format, buffer, idx++, maxlen);
10002f76:	002a      	movs	r2, r5
10002f78:	1c6f      	adds	r7, r5, #1
10002f7a:	464b      	mov	r3, r9
10002f7c:	9d08      	ldr	r5, [sp, #32]
10002f7e:	0021      	movs	r1, r4
10002f80:	47a8      	blx	r5
10002f82:	003d      	movs	r5, r7
                format++;
10002f84:	3601      	adds	r6, #1
    while (*format) {
10002f86:	7830      	ldrb	r0, [r6, #0]
10002f88:	2800      	cmp	r0, #0
10002f8a:	d070      	beq.n	1000306e <_vsnprintf+0x132>
        if (*format != '%') {
10002f8c:	2825      	cmp	r0, #37	; 0x25
10002f8e:	d1f2      	bne.n	10002f76 <_vsnprintf+0x3a>
                    flags |= FLAGS_HASH;
10002f90:	2310      	movs	r3, #16
10002f92:	469b      	mov	fp, r3
                    flags |= FLAGS_SPACE;
10002f94:	3b08      	subs	r3, #8
10002f96:	469a      	mov	sl, r3
                    flags |= FLAGS_PLUS;
10002f98:	3b04      	subs	r3, #4
10002f9a:	4698      	mov	r8, r3
                    flags |= FLAGS_LEFT;
10002f9c:	3b02      	subs	r3, #2
        flags = 0U;
10002f9e:	2100      	movs	r1, #0
                    flags |= FLAGS_LEFT;
10002fa0:	469c      	mov	ip, r3
            format++;
10002fa2:	1c72      	adds	r2, r6, #1
            switch (*format) {
10002fa4:	7810      	ldrb	r0, [r2, #0]
10002fa6:	0016      	movs	r6, r2
10002fa8:	0003      	movs	r3, r0
10002faa:	3b20      	subs	r3, #32
10002fac:	b2db      	uxtb	r3, r3
10002fae:	2b10      	cmp	r3, #16
10002fb0:	d803      	bhi.n	10002fba <_vsnprintf+0x7e>
10002fb2:	4fb3      	ldr	r7, [pc, #716]	; (10003280 <_vsnprintf+0x344>)
10002fb4:	009b      	lsls	r3, r3, #2
10002fb6:	58fb      	ldr	r3, [r7, r3]
10002fb8:	469f      	mov	pc, r3
        if (_is_digit(*format)) {
10002fba:	0003      	movs	r3, r0
10002fbc:	3b30      	subs	r3, #48	; 0x30
10002fbe:	2b09      	cmp	r3, #9
10002fc0:	d932      	bls.n	10003028 <_vsnprintf+0xec>
        width = 0U;
10002fc2:	2300      	movs	r3, #0
10002fc4:	930a      	str	r3, [sp, #40]	; 0x28
        } else if (*format == '*') {
10002fc6:	282a      	cmp	r0, #42	; 0x2a
10002fc8:	d068      	beq.n	1000309c <_vsnprintf+0x160>
        precision = 0U;
10002fca:	2300      	movs	r3, #0
10002fcc:	4698      	mov	r8, r3
        if (*format == '.') {
10002fce:	282e      	cmp	r0, #46	; 0x2e
10002fd0:	d03e      	beq.n	10003050 <_vsnprintf+0x114>
        switch (*format) {
10002fd2:	0003      	movs	r3, r0
10002fd4:	3b68      	subs	r3, #104	; 0x68
10002fd6:	b2db      	uxtb	r3, r3
10002fd8:	2b12      	cmp	r3, #18
10002fda:	d81c      	bhi.n	10003016 <_vsnprintf+0xda>
10002fdc:	4aa9      	ldr	r2, [pc, #676]	; (10003284 <_vsnprintf+0x348>)
10002fde:	009b      	lsls	r3, r3, #2
10002fe0:	58d3      	ldr	r3, [r2, r3]
10002fe2:	469f      	mov	pc, r3
                    flags |= FLAGS_ZEROPAD;
10002fe4:	2301      	movs	r3, #1
10002fe6:	3201      	adds	r2, #1
10002fe8:	4319      	orrs	r1, r3
        } while (n);
10002fea:	e7db      	b.n	10002fa4 <_vsnprintf+0x68>
                    flags |= FLAGS_LEFT;
10002fec:	4663      	mov	r3, ip
10002fee:	3201      	adds	r2, #1
10002ff0:	4319      	orrs	r1, r3
        } while (n);
10002ff2:	e7d7      	b.n	10002fa4 <_vsnprintf+0x68>
                    flags |= FLAGS_PLUS;
10002ff4:	4643      	mov	r3, r8
10002ff6:	3201      	adds	r2, #1
10002ff8:	4319      	orrs	r1, r3
        } while (n);
10002ffa:	e7d3      	b.n	10002fa4 <_vsnprintf+0x68>
                    flags |= FLAGS_HASH;
10002ffc:	465b      	mov	r3, fp
10002ffe:	3201      	adds	r2, #1
10003000:	4319      	orrs	r1, r3
        } while (n);
10003002:	e7cf      	b.n	10002fa4 <_vsnprintf+0x68>
                    flags |= FLAGS_SPACE;
10003004:	4653      	mov	r3, sl
10003006:	3201      	adds	r2, #1
10003008:	4319      	orrs	r1, r3
        } while (n);
1000300a:	e7cb      	b.n	10002fa4 <_vsnprintf+0x68>
                flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
1000300c:	2380      	movs	r3, #128	; 0x80
1000300e:	005b      	lsls	r3, r3, #1
        switch (*format) {
10003010:	7870      	ldrb	r0, [r6, #1]
                flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
10003012:	4319      	orrs	r1, r3
                format++;
10003014:	3601      	adds	r6, #1
        switch (*format) {
10003016:	0003      	movs	r3, r0
10003018:	3b25      	subs	r3, #37	; 0x25
1000301a:	b2db      	uxtb	r3, r3
1000301c:	2b53      	cmp	r3, #83	; 0x53
1000301e:	d8aa      	bhi.n	10002f76 <_vsnprintf+0x3a>
10003020:	4a99      	ldr	r2, [pc, #612]	; (10003288 <_vsnprintf+0x34c>)
10003022:	009b      	lsls	r3, r3, #2
10003024:	58d3      	ldr	r3, [r2, r3]
10003026:	469f      	mov	pc, r3
    unsigned int i = 0U;
10003028:	2700      	movs	r7, #0
1000302a:	0003      	movs	r3, r0
        i = i * 10U + (unsigned int) (*((*str)++) - '0');
1000302c:	00b8      	lsls	r0, r7, #2
1000302e:	19c0      	adds	r0, r0, r7
10003030:	3601      	adds	r6, #1
10003032:	0040      	lsls	r0, r0, #1
10003034:	18c0      	adds	r0, r0, r3
    while (_is_digit(**str)) {
10003036:	7833      	ldrb	r3, [r6, #0]
        i = i * 10U + (unsigned int) (*((*str)++) - '0');
10003038:	3830      	subs	r0, #48	; 0x30
    while (_is_digit(**str)) {
1000303a:	001a      	movs	r2, r3
1000303c:	3a30      	subs	r2, #48	; 0x30
        i = i * 10U + (unsigned int) (*((*str)++) - '0');
1000303e:	0007      	movs	r7, r0
    while (_is_digit(**str)) {
10003040:	2a09      	cmp	r2, #9
10003042:	d9f3      	bls.n	1000302c <_vsnprintf+0xf0>
10003044:	900a      	str	r0, [sp, #40]	; 0x28
10003046:	0018      	movs	r0, r3
        precision = 0U;
10003048:	2300      	movs	r3, #0
1000304a:	4698      	mov	r8, r3
        if (*format == '.') {
1000304c:	282e      	cmp	r0, #46	; 0x2e
1000304e:	d1c0      	bne.n	10002fd2 <_vsnprintf+0x96>
            flags |= FLAGS_PRECISION;
10003050:	2380      	movs	r3, #128	; 0x80
            if (_is_digit(*format)) {
10003052:	7870      	ldrb	r0, [r6, #1]
            flags |= FLAGS_PRECISION;
10003054:	00db      	lsls	r3, r3, #3
10003056:	4319      	orrs	r1, r3
            if (_is_digit(*format)) {
10003058:	0003      	movs	r3, r0
1000305a:	3b30      	subs	r3, #48	; 0x30
            format++;
1000305c:	1c72      	adds	r2, r6, #1
            if (_is_digit(*format)) {
1000305e:	2b09      	cmp	r3, #9
10003060:	d800      	bhi.n	10003064 <_vsnprintf+0x128>
10003062:	e1a1      	b.n	100033a8 <_vsnprintf+0x46c>
            } else if (*format == '*') {
10003064:	282a      	cmp	r0, #42	; 0x2a
10003066:	d100      	bne.n	1000306a <_vsnprintf+0x12e>
10003068:	e1b2      	b.n	100033d0 <_vsnprintf+0x494>
            format++;
1000306a:	0016      	movs	r6, r2
1000306c:	e7b1      	b.n	10002fd2 <_vsnprintf+0x96>

    // termination
    out((char) 0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);

    // return written chars without terminating \0
    return (int) idx;
1000306e:	46a3      	mov	fp, r4
10003070:	46aa      	mov	sl, r5
10003072:	002c      	movs	r4, r5
    out((char) 0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
10003074:	45d1      	cmp	r9, sl
10003076:	d803      	bhi.n	10003080 <_vsnprintf+0x144>
10003078:	2301      	movs	r3, #1
1000307a:	425b      	negs	r3, r3
1000307c:	444b      	add	r3, r9
1000307e:	469a      	mov	sl, r3
10003080:	464b      	mov	r3, r9
10003082:	4652      	mov	r2, sl
10003084:	4659      	mov	r1, fp
10003086:	2000      	movs	r0, #0
10003088:	9d08      	ldr	r5, [sp, #32]
1000308a:	47a8      	blx	r5
}
1000308c:	0020      	movs	r0, r4
1000308e:	b01f      	add	sp, #124	; 0x7c
10003090:	bcf0      	pop	{r4, r5, r6, r7}
10003092:	46bb      	mov	fp, r7
10003094:	46b2      	mov	sl, r6
10003096:	46a9      	mov	r9, r5
10003098:	46a0      	mov	r8, r4
1000309a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            const int w = va_arg(va, int);
1000309c:	9b09      	ldr	r3, [sp, #36]	; 0x24
1000309e:	cb40      	ldmia	r3!, {r6}
100030a0:	960a      	str	r6, [sp, #40]	; 0x28
            if (w < 0) {
100030a2:	2e00      	cmp	r6, #0
100030a4:	db03      	blt.n	100030ae <_vsnprintf+0x172>
        if (*format == '.') {
100030a6:	7850      	ldrb	r0, [r2, #1]
            const int w = va_arg(va, int);
100030a8:	9309      	str	r3, [sp, #36]	; 0x24
            format++;
100030aa:	1c56      	adds	r6, r2, #1
100030ac:	e78d      	b.n	10002fca <_vsnprintf+0x8e>
                flags |= FLAGS_LEFT;    // reverse padding
100030ae:	3828      	subs	r0, #40	; 0x28
100030b0:	4301      	orrs	r1, r0
                width = (unsigned int) -w;
100030b2:	4270      	negs	r0, r6
100030b4:	900a      	str	r0, [sp, #40]	; 0x28
            const int w = va_arg(va, int);
100030b6:	9309      	str	r3, [sp, #36]	; 0x24
        if (*format == '.') {
100030b8:	7850      	ldrb	r0, [r2, #1]
            format++;
100030ba:	1c56      	adds	r6, r2, #1
100030bc:	e785      	b.n	10002fca <_vsnprintf+0x8e>
                if (*format == 'x' || *format == 'X') {
100030be:	2878      	cmp	r0, #120	; 0x78
100030c0:	d100      	bne.n	100030c4 <_vsnprintf+0x188>
100030c2:	e1df      	b.n	10003484 <_vsnprintf+0x548>
100030c4:	2858      	cmp	r0, #88	; 0x58
100030c6:	d100      	bne.n	100030ca <_vsnprintf+0x18e>
100030c8:	e24c      	b.n	10003564 <_vsnprintf+0x628>
                } else if (*format == 'o') {
100030ca:	286f      	cmp	r0, #111	; 0x6f
100030cc:	d100      	bne.n	100030d0 <_vsnprintf+0x194>
100030ce:	e34f      	b.n	10003770 <_vsnprintf+0x834>
                } else if (*format == 'b') {
100030d0:	2862      	cmp	r0, #98	; 0x62
100030d2:	d101      	bne.n	100030d8 <_vsnprintf+0x19c>
100030d4:	f000 fc30 	bl	10003938 <_vsnprintf+0x9fc>
                    flags &= ~FLAGS_HASH;   // no hash for dec format
100030d8:	2310      	movs	r3, #16
100030da:	000a      	movs	r2, r1
100030dc:	439a      	bics	r2, r3
100030de:	920b      	str	r2, [sp, #44]	; 0x2c
                if ((*format != 'i') && (*format != 'd')) {
100030e0:	2869      	cmp	r0, #105	; 0x69
100030e2:	d001      	beq.n	100030e8 <_vsnprintf+0x1ac>
100030e4:	f000 fca9 	bl	10003a3a <_vsnprintf+0xafe>
                    base = 10U;
100030e8:	230a      	movs	r3, #10
100030ea:	930c      	str	r3, [sp, #48]	; 0x30
                if (flags & FLAGS_PRECISION) {
100030ec:	054b      	lsls	r3, r1, #21
100030ee:	d500      	bpl.n	100030f2 <_vsnprintf+0x1b6>
100030f0:	e1d0      	b.n	10003494 <_vsnprintf+0x558>
                    if (flags & FLAGS_LONG_LONG) {
100030f2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
100030f4:	2380      	movs	r3, #128	; 0x80
100030f6:	0011      	movs	r1, r2
100030f8:	009b      	lsls	r3, r3, #2
100030fa:	4019      	ands	r1, r3
100030fc:	468b      	mov	fp, r1
100030fe:	421a      	tst	r2, r3
10003100:	d000      	beq.n	10003104 <_vsnprintf+0x1c8>
10003102:	e2a1      	b.n	10003648 <_vsnprintf+0x70c>
                    } else if (flags & FLAGS_LONG) {
10003104:	2380      	movs	r3, #128	; 0x80
10003106:	0011      	movs	r1, r2
10003108:	005b      	lsls	r3, r3, #1
1000310a:	4019      	ands	r1, r3
1000310c:	468a      	mov	sl, r1
1000310e:	421a      	tst	r2, r3
10003110:	d000      	beq.n	10003114 <_vsnprintf+0x1d8>
10003112:	e3b6      	b.n	10003882 <_vsnprintf+0x946>
10003114:	0013      	movs	r3, r2
                        const int value = (flags & FLAGS_CHAR) ? (char) va_arg(va, int) : (flags & FLAGS_SHORT)
10003116:	065b      	lsls	r3, r3, #25
10003118:	d500      	bpl.n	1000311c <_vsnprintf+0x1e0>
1000311a:	e2ed      	b.n	100036f8 <_vsnprintf+0x7bc>
1000311c:	0013      	movs	r3, r2
                                                                                          ? (short int) va_arg(va, int)
1000311e:	9909      	ldr	r1, [sp, #36]	; 0x24
                                                                                          : va_arg(va, int);
10003120:	061b      	lsls	r3, r3, #24
10003122:	d401      	bmi.n	10003128 <_vsnprintf+0x1ec>
10003124:	f000 fc76 	bl	10003a14 <_vsnprintf+0xad8>
                                                                                          ? (short int) va_arg(va, int)
10003128:	c908      	ldmia	r1!, {r3}
                                                                                          : va_arg(va, int);
1000312a:	b21b      	sxth	r3, r3
                        idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int) (value > 0 ? value : 0 - value),
1000312c:	17d8      	asrs	r0, r3, #31
1000312e:	181a      	adds	r2, r3, r0
10003130:	4042      	eors	r2, r0
10003132:	b292      	uxth	r2, r2
                                                                                          ? (short int) va_arg(va, int)
10003134:	9109      	str	r1, [sp, #36]	; 0x24
                        idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int) (value > 0 ? value : 0 - value),
10003136:	4693      	mov	fp, r2
10003138:	0fda      	lsrs	r2, r3, #31
1000313a:	9212      	str	r2, [sp, #72]	; 0x48
    if (!value) {
1000313c:	2b00      	cmp	r3, #0
1000313e:	d109      	bne.n	10003154 <_vsnprintf+0x218>
    if (!(flags & FLAGS_PRECISION) || value) {
10003140:	2380      	movs	r3, #128	; 0x80
        flags &= ~FLAGS_HASH;
10003142:	2210      	movs	r2, #16
    if (!(flags & FLAGS_PRECISION) || value) {
10003144:	990b      	ldr	r1, [sp, #44]	; 0x2c
10003146:	00db      	lsls	r3, r3, #3
10003148:	400b      	ands	r3, r1
        flags &= ~FLAGS_HASH;
1000314a:	4391      	bics	r1, r2
1000314c:	910b      	str	r1, [sp, #44]	; 0x2c
    if (!(flags & FLAGS_PRECISION) || value) {
1000314e:	2b00      	cmp	r3, #0
10003150:	d000      	beq.n	10003154 <_vsnprintf+0x218>
10003152:	e2e4      	b.n	1000371e <_vsnprintf+0x7e2>
10003154:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
10003156:	2361      	movs	r3, #97	; 0x61
10003158:	0692      	lsls	r2, r2, #26
1000315a:	d500      	bpl.n	1000315e <_vsnprintf+0x222>
1000315c:	2341      	movs	r3, #65	; 0x41
1000315e:	a90e      	add	r1, sp, #56	; 0x38
10003160:	221f      	movs	r2, #31
10003162:	468c      	mov	ip, r1
10003164:	b2db      	uxtb	r3, r3
10003166:	4462      	add	r2, ip
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
10003168:	3b0a      	subs	r3, #10
1000316a:	465f      	mov	r7, fp
1000316c:	9513      	str	r5, [sp, #76]	; 0x4c
1000316e:	46a3      	mov	fp, r4
10003170:	4655      	mov	r5, sl
10003172:	9c0c      	ldr	r4, [sp, #48]	; 0x30
10003174:	46b2      	mov	sl, r6
10003176:	930d      	str	r3, [sp, #52]	; 0x34
10003178:	0016      	movs	r6, r2
1000317a:	e00a      	b.n	10003192 <_vsnprintf+0x256>
1000317c:	3330      	adds	r3, #48	; 0x30
1000317e:	b2db      	uxtb	r3, r3
10003180:	3501      	adds	r5, #1
10003182:	5573      	strb	r3, [r6, r5]
        } while (value && (len < PICO_PRINTF_NTOA_BUFFER_SIZE));
10003184:	42a7      	cmp	r7, r4
10003186:	d200      	bcs.n	1000318a <_vsnprintf+0x24e>
10003188:	e2ed      	b.n	10003766 <_vsnprintf+0x82a>
1000318a:	2d20      	cmp	r5, #32
1000318c:	d100      	bne.n	10003190 <_vsnprintf+0x254>
1000318e:	e2ea      	b.n	10003766 <_vsnprintf+0x82a>
            value /= base;
10003190:	0007      	movs	r7, r0
            const char digit = (char) (value % base);
10003192:	0021      	movs	r1, r4
10003194:	0038      	movs	r0, r7
10003196:	f7fd f8ed 	bl	10000374 <__wrap___aeabi_uidiv>
1000319a:	b2cb      	uxtb	r3, r1
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
1000319c:	2909      	cmp	r1, #9
1000319e:	d9ed      	bls.n	1000317c <_vsnprintf+0x240>
100031a0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
100031a2:	4694      	mov	ip, r2
100031a4:	4463      	add	r3, ip
100031a6:	b2db      	uxtb	r3, r3
100031a8:	e7ea      	b.n	10003180 <_vsnprintf+0x244>
                flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
100031aa:	2380      	movs	r3, #128	; 0x80
100031ac:	009b      	lsls	r3, r3, #2
        switch (*format) {
100031ae:	7870      	ldrb	r0, [r6, #1]
                flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
100031b0:	4319      	orrs	r1, r3
                format++;
100031b2:	3601      	adds	r6, #1
                break;
100031b4:	e72f      	b.n	10003016 <_vsnprintf+0xda>
                if (*format == 'h') {
100031b6:	7870      	ldrb	r0, [r6, #1]
100031b8:	2868      	cmp	r0, #104	; 0x68
100031ba:	d100      	bne.n	100031be <_vsnprintf+0x282>
100031bc:	e1cd      	b.n	1000355a <_vsnprintf+0x61e>
                flags |= FLAGS_SHORT;
100031be:	2380      	movs	r3, #128	; 0x80
                format++;
100031c0:	3601      	adds	r6, #1
                flags |= FLAGS_SHORT;
100031c2:	4319      	orrs	r1, r3
100031c4:	e727      	b.n	10003016 <_vsnprintf+0xda>
                if (*format == 'l') {
100031c6:	7870      	ldrb	r0, [r6, #1]
100031c8:	286c      	cmp	r0, #108	; 0x6c
100031ca:	d100      	bne.n	100031ce <_vsnprintf+0x292>
100031cc:	e1bf      	b.n	1000354e <_vsnprintf+0x612>
                flags |= FLAGS_LONG;
100031ce:	2380      	movs	r3, #128	; 0x80
100031d0:	005b      	lsls	r3, r3, #1
100031d2:	4319      	orrs	r1, r3
                format++;
100031d4:	3601      	adds	r6, #1
100031d6:	e71e      	b.n	10003016 <_vsnprintf+0xda>
                if (*format == 'F') flags |= FLAGS_UPPERCASE;
100031d8:	2846      	cmp	r0, #70	; 0x46
100031da:	d100      	bne.n	100031de <_vsnprintf+0x2a2>
100031dc:	e19b      	b.n	10003516 <_vsnprintf+0x5da>
                idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
100031de:	2207      	movs	r2, #7
100031e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
100031e2:	9104      	str	r1, [sp, #16]
100031e4:	3307      	adds	r3, #7
100031e6:	4393      	bics	r3, r2
100031e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
100031ea:	0019      	movs	r1, r3
100031ec:	9203      	str	r2, [sp, #12]
100031ee:	4642      	mov	r2, r8
100031f0:	9202      	str	r2, [sp, #8]
100031f2:	c90c      	ldmia	r1!, {r2, r3}
100031f4:	9808      	ldr	r0, [sp, #32]
100031f6:	9200      	str	r2, [sp, #0]
100031f8:	9301      	str	r3, [sp, #4]
100031fa:	9109      	str	r1, [sp, #36]	; 0x24
100031fc:	002a      	movs	r2, r5
100031fe:	464b      	mov	r3, r9
10003200:	0021      	movs	r1, r4
10003202:	f7ff fccf 	bl	10002ba4 <_ftoa>
                format++;
10003206:	3601      	adds	r6, #1
                idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
10003208:	0005      	movs	r5, r0
                break;
1000320a:	e6bc      	b.n	10002f86 <_vsnprintf+0x4a>
                out('%', buffer, idx++, maxlen);
1000320c:	002a      	movs	r2, r5
1000320e:	1c6f      	adds	r7, r5, #1
10003210:	464b      	mov	r3, r9
10003212:	9d08      	ldr	r5, [sp, #32]
10003214:	0021      	movs	r1, r4
10003216:	2025      	movs	r0, #37	; 0x25
10003218:	47a8      	blx	r5
                format++;
1000321a:	3601      	adds	r6, #1
                out('%', buffer, idx++, maxlen);
1000321c:	003d      	movs	r5, r7
                break;
1000321e:	e6b2      	b.n	10002f86 <_vsnprintf+0x4a>
                if (!(flags & FLAGS_LEFT)) {
10003220:	078b      	lsls	r3, r1, #30
10003222:	d400      	bmi.n	10003226 <_vsnprintf+0x2ea>
10003224:	e1ad      	b.n	10003582 <_vsnprintf+0x646>
                out((char) va_arg(va, int), buffer, idx++, maxlen);
10003226:	9b09      	ldr	r3, [sp, #36]	; 0x24
10003228:	002a      	movs	r2, r5
1000322a:	469a      	mov	sl, r3
1000322c:	1c6b      	adds	r3, r5, #1
1000322e:	4698      	mov	r8, r3
10003230:	4653      	mov	r3, sl
10003232:	cb01      	ldmia	r3!, {r0}
10003234:	0021      	movs	r1, r4
10003236:	469a      	mov	sl, r3
10003238:	9f08      	ldr	r7, [sp, #32]
1000323a:	464b      	mov	r3, r9
1000323c:	b2c0      	uxtb	r0, r0
1000323e:	47b8      	blx	r7
                    while (l++ < width) {
10003240:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10003242:	469c      	mov	ip, r3
10003244:	4465      	add	r5, ip
10003246:	2b01      	cmp	r3, #1
10003248:	d800      	bhi.n	1000324c <_vsnprintf+0x310>
1000324a:	e286      	b.n	1000375a <_vsnprintf+0x81e>
1000324c:	9b08      	ldr	r3, [sp, #32]
1000324e:	4647      	mov	r7, r8
10003250:	46b0      	mov	r8, r6
10003252:	0026      	movs	r6, r4
10003254:	464c      	mov	r4, r9
10003256:	4699      	mov	r9, r3
                        out(' ', buffer, idx++, maxlen);
10003258:	003a      	movs	r2, r7
1000325a:	0023      	movs	r3, r4
1000325c:	3701      	adds	r7, #1
1000325e:	0031      	movs	r1, r6
10003260:	2020      	movs	r0, #32
10003262:	47c8      	blx	r9
                    while (l++ < width) {
10003264:	42af      	cmp	r7, r5
10003266:	d1f7      	bne.n	10003258 <_vsnprintf+0x31c>
                out((char) va_arg(va, int), buffer, idx++, maxlen);
10003268:	46a1      	mov	r9, r4
1000326a:	4653      	mov	r3, sl
1000326c:	0034      	movs	r4, r6
1000326e:	4646      	mov	r6, r8
10003270:	9309      	str	r3, [sp, #36]	; 0x24
                format++;
10003272:	3601      	adds	r6, #1
                break;
10003274:	e687      	b.n	10002f86 <_vsnprintf+0x4a>
10003276:	46c0      	nop			; (mov r8, r8)
10003278:	10002f3d 	.word	0x10002f3d
1000327c:	20039b78 	.word	0x20039b78
10003280:	10009814 	.word	0x10009814
10003284:	10009858 	.word	0x10009858
10003288:	100098a4 	.word	0x100098a4
                const char *p = va_arg(va, char*);
1000328c:	9b09      	ldr	r3, [sp, #36]	; 0x24
1000328e:	cb04      	ldmia	r3!, {r2}
10003290:	469b      	mov	fp, r3
                unsigned int l = _strnlen_s(p, precision ? precision : (size_t) -1);
10003292:	4643      	mov	r3, r8
                const char *p = va_arg(va, char*);
10003294:	9209      	str	r2, [sp, #36]	; 0x24
                unsigned int l = _strnlen_s(p, precision ? precision : (size_t) -1);
10003296:	2b00      	cmp	r3, #0
10003298:	d100      	bne.n	1000329c <_vsnprintf+0x360>
1000329a:	e0c6      	b.n	1000342a <_vsnprintf+0x4ee>
    for (s = str; *s && maxsize--; ++s);
1000329c:	7813      	ldrb	r3, [r2, #0]
1000329e:	469c      	mov	ip, r3
100032a0:	2b00      	cmp	r3, #0
100032a2:	d100      	bne.n	100032a6 <_vsnprintf+0x36a>
100032a4:	e3bd      	b.n	10003a22 <_vsnprintf+0xae6>
100032a6:	4643      	mov	r3, r8
100032a8:	3b01      	subs	r3, #1
100032aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
100032ac:	3301      	adds	r3, #1
100032ae:	18d0      	adds	r0, r2, r3
                const char *p = va_arg(va, char*);
100032b0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
100032b2:	0013      	movs	r3, r2
100032b4:	e001      	b.n	100032ba <_vsnprintf+0x37e>
    for (s = str; *s && maxsize--; ++s);
100032b6:	4283      	cmp	r3, r0
100032b8:	d003      	beq.n	100032c2 <_vsnprintf+0x386>
100032ba:	785a      	ldrb	r2, [r3, #1]
100032bc:	3301      	adds	r3, #1
100032be:	2a00      	cmp	r2, #0
100032c0:	d1f9      	bne.n	100032b6 <_vsnprintf+0x37a>
    return (unsigned int) (s - str);
100032c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
100032c4:	970a      	str	r7, [sp, #40]	; 0x28
100032c6:	1a9b      	subs	r3, r3, r2
100032c8:	930b      	str	r3, [sp, #44]	; 0x2c
                if (flags & FLAGS_PRECISION) {
100032ca:	2380      	movs	r3, #128	; 0x80
100032cc:	000a      	movs	r2, r1
100032ce:	00db      	lsls	r3, r3, #3
100032d0:	401a      	ands	r2, r3
100032d2:	920c      	str	r2, [sp, #48]	; 0x30
100032d4:	4219      	tst	r1, r3
100032d6:	d004      	beq.n	100032e2 <_vsnprintf+0x3a6>
                    l = (l < precision ? l : precision);
100032d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
100032da:	4543      	cmp	r3, r8
100032dc:	d901      	bls.n	100032e2 <_vsnprintf+0x3a6>
100032de:	4643      	mov	r3, r8
100032e0:	930b      	str	r3, [sp, #44]	; 0x2c
                if (!(flags & FLAGS_LEFT)) {
100032e2:	2302      	movs	r3, #2
100032e4:	001a      	movs	r2, r3
100032e6:	400a      	ands	r2, r1
100032e8:	920d      	str	r2, [sp, #52]	; 0x34
100032ea:	420b      	tst	r3, r1
100032ec:	d100      	bne.n	100032f0 <_vsnprintf+0x3b4>
100032ee:	e187      	b.n	10003600 <_vsnprintf+0x6c4>
                while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
100032f0:	4660      	mov	r0, ip
100032f2:	2800      	cmp	r0, #0
100032f4:	d100      	bne.n	100032f8 <_vsnprintf+0x3bc>
100032f6:	e168      	b.n	100035ca <_vsnprintf+0x68e>
100032f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
100032fa:	2b00      	cmp	r3, #0
100032fc:	d100      	bne.n	10003300 <_vsnprintf+0x3c4>
100032fe:	e10d      	b.n	1000351c <_vsnprintf+0x5e0>
10003300:	44a8      	add	r8, r5
10003302:	46c2      	mov	sl, r8
10003304:	9b09      	ldr	r3, [sp, #36]	; 0x24
10003306:	4657      	mov	r7, sl
10003308:	1b5b      	subs	r3, r3, r5
1000330a:	4698      	mov	r8, r3
1000330c:	9b08      	ldr	r3, [sp, #32]
1000330e:	46b2      	mov	sl, r6
    for (s = str; *s && maxsize--; ++s);
10003310:	002a      	movs	r2, r5
10003312:	0026      	movs	r6, r4
10003314:	464c      	mov	r4, r9
10003316:	4699      	mov	r9, r3
10003318:	e009      	b.n	1000332e <_vsnprintf+0x3f2>
                    out(*(p++), buffer, idx++, maxlen);
1000331a:	0023      	movs	r3, r4
1000331c:	0031      	movs	r1, r6
1000331e:	1c55      	adds	r5, r2, #1
10003320:	47c8      	blx	r9
                while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
10003322:	4643      	mov	r3, r8
10003324:	5d58      	ldrb	r0, [r3, r5]
10003326:	2800      	cmp	r0, #0
10003328:	d100      	bne.n	1000332c <_vsnprintf+0x3f0>
1000332a:	e126      	b.n	1000357a <_vsnprintf+0x63e>
                    out(*(p++), buffer, idx++, maxlen);
1000332c:	002a      	movs	r2, r5
                while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
1000332e:	4297      	cmp	r7, r2
10003330:	d1f3      	bne.n	1000331a <_vsnprintf+0x3de>
10003332:	46a1      	mov	r9, r4
10003334:	003d      	movs	r5, r7
10003336:	0034      	movs	r4, r6
10003338:	4656      	mov	r6, sl
                if (flags & FLAGS_LEFT) {
1000333a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1000333c:	2b00      	cmp	r3, #0
1000333e:	d000      	beq.n	10003342 <_vsnprintf+0x406>
10003340:	e143      	b.n	100035ca <_vsnprintf+0x68e>
                const char *p = va_arg(va, char*);
10003342:	465b      	mov	r3, fp
                format++;
10003344:	3601      	adds	r6, #1
                const char *p = va_arg(va, char*);
10003346:	9309      	str	r3, [sp, #36]	; 0x24
                break;
10003348:	e61d      	b.n	10002f86 <_vsnprintf+0x4a>
                    idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long) ((uintptr_t) va_arg(va, void*)), false,
1000334a:	9b09      	ldr	r3, [sp, #36]	; 0x24
1000334c:	001a      	movs	r2, r3
1000334e:	ca08      	ldmia	r2!, {r3}
10003350:	4692      	mov	sl, r2
    if (!value) {
10003352:	2b00      	cmp	r3, #0
10003354:	d048      	beq.n	100033e8 <_vsnprintf+0x4ac>
                flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
10003356:	2221      	movs	r2, #33	; 0x21
10003358:	4311      	orrs	r1, r2
1000335a:	468b      	mov	fp, r1
1000335c:	a80e      	add	r0, sp, #56	; 0x38
1000335e:	4684      	mov	ip, r0
10003360:	211f      	movs	r1, #31
10003362:	4461      	add	r1, ip
10003364:	9509      	str	r5, [sp, #36]	; 0x24
                    while (l++ < width) {
10003366:	2200      	movs	r2, #0
            const char digit = (char) (value % base);
10003368:	270f      	movs	r7, #15
1000336a:	46a4      	mov	ip, r4
1000336c:	000d      	movs	r5, r1
1000336e:	e002      	b.n	10003376 <_vsnprintf+0x43a>
        } while (value && (len < PICO_PRINTF_NTOA_BUFFER_SIZE));
10003370:	2a20      	cmp	r2, #32
10003372:	d00c      	beq.n	1000338e <_vsnprintf+0x452>
            value /= base;
10003374:	000b      	movs	r3, r1
            const char digit = (char) (value % base);
10003376:	003c      	movs	r4, r7
10003378:	401c      	ands	r4, r3
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
1000337a:	0020      	movs	r0, r4
1000337c:	3037      	adds	r0, #55	; 0x37
1000337e:	2c09      	cmp	r4, #9
10003380:	d800      	bhi.n	10003384 <_vsnprintf+0x448>
10003382:	3807      	subs	r0, #7
10003384:	3201      	adds	r2, #1
10003386:	54a8      	strb	r0, [r5, r2]
            value /= base;
10003388:	0919      	lsrs	r1, r3, #4
        } while (value && (len < PICO_PRINTF_NTOA_BUFFER_SIZE));
1000338a:	2b0f      	cmp	r3, #15
1000338c:	d8f0      	bhi.n	10003370 <_vsnprintf+0x434>
1000338e:	4664      	mov	r4, ip
10003390:	9d09      	ldr	r5, [sp, #36]	; 0x24
10003392:	e032      	b.n	100033fa <_vsnprintf+0x4be>
        out = _out_null;
10003394:	4bdc      	ldr	r3, [pc, #880]	; (10003708 <_vsnprintf+0x7cc>)
    while (*format) {
10003396:	7820      	ldrb	r0, [r4, #0]
        out = _out_null;
10003398:	9308      	str	r3, [sp, #32]
    while (*format) {
1000339a:	2300      	movs	r3, #0
1000339c:	469a      	mov	sl, r3
1000339e:	2800      	cmp	r0, #0
100033a0:	d000      	beq.n	100033a4 <_vsnprintf+0x468>
100033a2:	e5e4      	b.n	10002f6e <_vsnprintf+0x32>
100033a4:	2400      	movs	r4, #0
100033a6:	e665      	b.n	10003074 <_vsnprintf+0x138>
100033a8:	4643      	mov	r3, r8
100033aa:	0006      	movs	r6, r0
100033ac:	9f0a      	ldr	r7, [sp, #40]	; 0x28
        i = i * 10U + (unsigned int) (*((*str)++) - '0');
100033ae:	0098      	lsls	r0, r3, #2
100033b0:	18c0      	adds	r0, r0, r3
100033b2:	3201      	adds	r2, #1
100033b4:	0040      	lsls	r0, r0, #1
100033b6:	1980      	adds	r0, r0, r6
    while (_is_digit(**str)) {
100033b8:	7816      	ldrb	r6, [r2, #0]
        i = i * 10U + (unsigned int) (*((*str)++) - '0');
100033ba:	0003      	movs	r3, r0
    while (_is_digit(**str)) {
100033bc:	0030      	movs	r0, r6
100033be:	3830      	subs	r0, #48	; 0x30
        i = i * 10U + (unsigned int) (*((*str)++) - '0');
100033c0:	3b30      	subs	r3, #48	; 0x30
    while (_is_digit(**str)) {
100033c2:	2809      	cmp	r0, #9
100033c4:	d9f3      	bls.n	100033ae <_vsnprintf+0x472>
100033c6:	0030      	movs	r0, r6
100033c8:	4698      	mov	r8, r3
100033ca:	0016      	movs	r6, r2
100033cc:	970a      	str	r7, [sp, #40]	; 0x28
100033ce:	e600      	b.n	10002fd2 <_vsnprintf+0x96>
                const int prec = (int) va_arg(va, int);
100033d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
                format++;
100033d2:	3602      	adds	r6, #2
                precision = prec > 0 ? (unsigned int) prec : 0U;
100033d4:	cb04      	ldmia	r3!, {r2}
100033d6:	4690      	mov	r8, r2
100033d8:	43d2      	mvns	r2, r2
100033da:	4640      	mov	r0, r8
100033dc:	17d2      	asrs	r2, r2, #31
100033de:	4010      	ands	r0, r2
100033e0:	4680      	mov	r8, r0
                const int prec = (int) va_arg(va, int);
100033e2:	9309      	str	r3, [sp, #36]	; 0x24
        switch (*format) {
100033e4:	7830      	ldrb	r0, [r6, #0]
100033e6:	e5f4      	b.n	10002fd2 <_vsnprintf+0x96>
        flags &= ~FLAGS_HASH;
100033e8:	2210      	movs	r2, #16
100033ea:	0008      	movs	r0, r1
100033ec:	4390      	bics	r0, r2
100033ee:	3211      	adds	r2, #17
100033f0:	4310      	orrs	r0, r2
100033f2:	4683      	mov	fp, r0
    size_t len = 0U;
100033f4:	2200      	movs	r2, #0
    if (!(flags & FLAGS_PRECISION) || value) {
100033f6:	0549      	lsls	r1, r1, #21
100033f8:	d5b0      	bpl.n	1000335c <_vsnprintf+0x420>
    return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int) base, prec, width, flags);
100033fa:	465b      	mov	r3, fp
100033fc:	9306      	str	r3, [sp, #24]
100033fe:	2308      	movs	r3, #8
10003400:	9305      	str	r3, [sp, #20]
10003402:	4643      	mov	r3, r8
10003404:	9304      	str	r3, [sp, #16]
10003406:	2310      	movs	r3, #16
10003408:	9303      	str	r3, [sp, #12]
1000340a:	2300      	movs	r3, #0
1000340c:	9302      	str	r3, [sp, #8]
1000340e:	ab16      	add	r3, sp, #88	; 0x58
10003410:	9201      	str	r2, [sp, #4]
10003412:	9300      	str	r3, [sp, #0]
10003414:	002a      	movs	r2, r5
10003416:	464b      	mov	r3, r9
10003418:	0021      	movs	r1, r4
1000341a:	9808      	ldr	r0, [sp, #32]
1000341c:	f7ff f8bc 	bl	10002598 <_ntoa_format>
                    idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long) ((uintptr_t) va_arg(va, void*)), false,
10003420:	4653      	mov	r3, sl
    return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int) base, prec, width, flags);
10003422:	0005      	movs	r5, r0
                format++;
10003424:	3601      	adds	r6, #1
                    idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long) ((uintptr_t) va_arg(va, void*)), false,
10003426:	9309      	str	r3, [sp, #36]	; 0x24
                break;
10003428:	e5ad      	b.n	10002f86 <_vsnprintf+0x4a>
    for (s = str; *s && maxsize--; ++s);
1000342a:	7813      	ldrb	r3, [r2, #0]
1000342c:	469c      	mov	ip, r3
1000342e:	2b00      	cmp	r3, #0
10003430:	d100      	bne.n	10003434 <_vsnprintf+0x4f8>
10003432:	e2f7      	b.n	10003a24 <_vsnprintf+0xae8>
10003434:	2302      	movs	r3, #2
10003436:	425b      	negs	r3, r3
10003438:	e737      	b.n	100032aa <_vsnprintf+0x36e>
                if ((*format == 'g') || (*format == 'G')) flags |= FLAGS_ADAPT_EXP;
1000343a:	2320      	movs	r3, #32
1000343c:	0002      	movs	r2, r0
1000343e:	439a      	bics	r2, r3
10003440:	2a47      	cmp	r2, #71	; 0x47
10003442:	d104      	bne.n	1000344e <_vsnprintf+0x512>
10003444:	2380      	movs	r3, #128	; 0x80
10003446:	011b      	lsls	r3, r3, #4
10003448:	4319      	orrs	r1, r3
                if ((*format == 'E') || (*format == 'G')) flags |= FLAGS_UPPERCASE;
1000344a:	2302      	movs	r3, #2
1000344c:	4398      	bics	r0, r3
1000344e:	2845      	cmp	r0, #69	; 0x45
10003450:	d101      	bne.n	10003456 <_vsnprintf+0x51a>
10003452:	2320      	movs	r3, #32
10003454:	4319      	orrs	r1, r3
                idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
10003456:	2207      	movs	r2, #7
10003458:	9b09      	ldr	r3, [sp, #36]	; 0x24
1000345a:	9104      	str	r1, [sp, #16]
1000345c:	3307      	adds	r3, #7
1000345e:	4393      	bics	r3, r2
10003460:	9a0a      	ldr	r2, [sp, #40]	; 0x28
10003462:	0019      	movs	r1, r3
10003464:	9203      	str	r2, [sp, #12]
10003466:	4642      	mov	r2, r8
10003468:	9202      	str	r2, [sp, #8]
1000346a:	c90c      	ldmia	r1!, {r2, r3}
1000346c:	9808      	ldr	r0, [sp, #32]
1000346e:	9200      	str	r2, [sp, #0]
10003470:	9301      	str	r3, [sp, #4]
10003472:	9109      	str	r1, [sp, #36]	; 0x24
10003474:	002a      	movs	r2, r5
10003476:	464b      	mov	r3, r9
10003478:	0021      	movs	r1, r4
1000347a:	f7ff f983 	bl	10002784 <_etoa>
                format++;
1000347e:	3601      	adds	r6, #1
                idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
10003480:	0005      	movs	r5, r0
                break;
10003482:	e580      	b.n	10002f86 <_vsnprintf+0x4a>
                    base = 16U;
10003484:	2310      	movs	r3, #16
10003486:	930c      	str	r3, [sp, #48]	; 0x30
                    flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
10003488:	230c      	movs	r3, #12
1000348a:	000a      	movs	r2, r1
1000348c:	439a      	bics	r2, r3
1000348e:	920b      	str	r2, [sp, #44]	; 0x2c
                if (flags & FLAGS_PRECISION) {
10003490:	054b      	lsls	r3, r1, #21
10003492:	d503      	bpl.n	1000349c <_vsnprintf+0x560>
                    flags &= ~FLAGS_ZEROPAD;
10003494:	2301      	movs	r3, #1
10003496:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
10003498:	439a      	bics	r2, r3
1000349a:	920b      	str	r2, [sp, #44]	; 0x2c
                if ((*format == 'i') || (*format == 'd')) {
1000349c:	2869      	cmp	r0, #105	; 0x69
1000349e:	d100      	bne.n	100034a2 <_vsnprintf+0x566>
100034a0:	e627      	b.n	100030f2 <_vsnprintf+0x1b6>
100034a2:	2864      	cmp	r0, #100	; 0x64
100034a4:	d100      	bne.n	100034a8 <_vsnprintf+0x56c>
100034a6:	e624      	b.n	100030f2 <_vsnprintf+0x1b6>
                    if (flags & FLAGS_LONG_LONG) {
100034a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
100034aa:	2380      	movs	r3, #128	; 0x80
100034ac:	0011      	movs	r1, r2
100034ae:	009b      	lsls	r3, r3, #2
100034b0:	4019      	ands	r1, r3
100034b2:	468b      	mov	fp, r1
100034b4:	421a      	tst	r2, r3
100034b6:	d000      	beq.n	100034ba <_vsnprintf+0x57e>
100034b8:	e166      	b.n	10003788 <_vsnprintf+0x84c>
                    } else if (flags & FLAGS_LONG) {
100034ba:	2380      	movs	r3, #128	; 0x80
100034bc:	0011      	movs	r1, r2
100034be:	005b      	lsls	r3, r3, #1
100034c0:	4019      	ands	r1, r3
100034c2:	468a      	mov	sl, r1
100034c4:	421a      	tst	r2, r3
100034c6:	d000      	beq.n	100034ca <_vsnprintf+0x58e>
100034c8:	e239      	b.n	1000393e <_vsnprintf+0xa02>
100034ca:	0013      	movs	r3, r2
                                                                        : (flags & FLAGS_SHORT)
100034cc:	065b      	lsls	r3, r3, #25
100034ce:	d500      	bpl.n	100034d2 <_vsnprintf+0x596>
100034d0:	e13c      	b.n	1000374c <_vsnprintf+0x810>
100034d2:	0013      	movs	r3, r2
                                                                          : va_arg(va, unsigned int);
100034d4:	061b      	lsls	r3, r3, #24
100034d6:	d400      	bmi.n	100034da <_vsnprintf+0x59e>
100034d8:	e2a6      	b.n	10003a28 <_vsnprintf+0xaec>
                                                                          ? (unsigned short int) va_arg(va,
100034da:	9b09      	ldr	r3, [sp, #36]	; 0x24
100034dc:	cb04      	ldmia	r3!, {r2}
100034de:	0412      	lsls	r2, r2, #16
100034e0:	0c12      	lsrs	r2, r2, #16
100034e2:	4693      	mov	fp, r2
100034e4:	9309      	str	r3, [sp, #36]	; 0x24
    if (!value) {
100034e6:	465b      	mov	r3, fp
100034e8:	2b00      	cmp	r3, #0
100034ea:	d000      	beq.n	100034ee <_vsnprintf+0x5b2>
100034ec:	e19a      	b.n	10003824 <_vsnprintf+0x8e8>
        flags &= ~FLAGS_HASH;
100034ee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
100034f0:	3310      	adds	r3, #16
100034f2:	0011      	movs	r1, r2
100034f4:	4399      	bics	r1, r3
100034f6:	910b      	str	r1, [sp, #44]	; 0x2c
    if (!(flags & FLAGS_PRECISION) || value) {
100034f8:	0552      	lsls	r2, r2, #21
100034fa:	d400      	bmi.n	100034fe <_vsnprintf+0x5c2>
100034fc:	e192      	b.n	10003824 <_vsnprintf+0x8e8>
    size_t len = 0U;
100034fe:	2300      	movs	r3, #0
10003500:	469a      	mov	sl, r3
    return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int) base, prec, width, flags);
10003502:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
10003504:	9306      	str	r3, [sp, #24]
10003506:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10003508:	9305      	str	r3, [sp, #20]
1000350a:	4643      	mov	r3, r8
1000350c:	9304      	str	r3, [sp, #16]
1000350e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
10003510:	9303      	str	r3, [sp, #12]
10003512:	2300      	movs	r3, #0
10003514:	e10c      	b.n	10003730 <_vsnprintf+0x7f4>
                if (*format == 'F') flags |= FLAGS_UPPERCASE;
10003516:	2320      	movs	r3, #32
10003518:	4319      	orrs	r1, r3
1000351a:	e660      	b.n	100031de <_vsnprintf+0x2a2>
1000351c:	9b09      	ldr	r3, [sp, #36]	; 0x24
1000351e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
10003520:	1b5b      	subs	r3, r3, r5
10003522:	4698      	mov	r8, r3
10003524:	464b      	mov	r3, r9
10003526:	4691      	mov	r9, r2
10003528:	001f      	movs	r7, r3
1000352a:	46b2      	mov	sl, r6
1000352c:	0026      	movs	r6, r4
1000352e:	9c08      	ldr	r4, [sp, #32]
                    out(*(p++), buffer, idx++, maxlen);
10003530:	002a      	movs	r2, r5
10003532:	003b      	movs	r3, r7
10003534:	0031      	movs	r1, r6
10003536:	47a0      	blx	r4
                while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
10003538:	4643      	mov	r3, r8
                    out(*(p++), buffer, idx++, maxlen);
1000353a:	3501      	adds	r5, #1
                while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
1000353c:	5d58      	ldrb	r0, [r3, r5]
1000353e:	2800      	cmp	r0, #0
10003540:	d1f6      	bne.n	10003530 <_vsnprintf+0x5f4>
                    out(*(p++), buffer, idx++, maxlen);
10003542:	464a      	mov	r2, r9
10003544:	0034      	movs	r4, r6
10003546:	46b9      	mov	r9, r7
10003548:	4656      	mov	r6, sl
1000354a:	920a      	str	r2, [sp, #40]	; 0x28
1000354c:	e6f5      	b.n	1000333a <_vsnprintf+0x3fe>
                    flags |= FLAGS_LONG_LONG;
1000354e:	23c0      	movs	r3, #192	; 0xc0
10003550:	009b      	lsls	r3, r3, #2
        switch (*format) {
10003552:	78b0      	ldrb	r0, [r6, #2]
                    flags |= FLAGS_LONG_LONG;
10003554:	4319      	orrs	r1, r3
                    format++;
10003556:	3602      	adds	r6, #2
10003558:	e55d      	b.n	10003016 <_vsnprintf+0xda>
                    flags |= FLAGS_CHAR;
1000355a:	23c0      	movs	r3, #192	; 0xc0
        switch (*format) {
1000355c:	78b0      	ldrb	r0, [r6, #2]
                    flags |= FLAGS_CHAR;
1000355e:	4319      	orrs	r1, r3
                    format++;
10003560:	3602      	adds	r6, #2
10003562:	e558      	b.n	10003016 <_vsnprintf+0xda>
                    flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
10003564:	230c      	movs	r3, #12
10003566:	000a      	movs	r2, r1
10003568:	439a      	bics	r2, r3
1000356a:	3314      	adds	r3, #20
1000356c:	431a      	orrs	r2, r3
                    base = 16U;
1000356e:	3b10      	subs	r3, #16
                    flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
10003570:	920b      	str	r2, [sp, #44]	; 0x2c
                    base = 16U;
10003572:	930c      	str	r3, [sp, #48]	; 0x30
                if (flags & FLAGS_PRECISION) {
10003574:	054b      	lsls	r3, r1, #21
10003576:	d48d      	bmi.n	10003494 <_vsnprintf+0x558>
10003578:	e796      	b.n	100034a8 <_vsnprintf+0x56c>
                    out(*(p++), buffer, idx++, maxlen);
1000357a:	46a1      	mov	r9, r4
1000357c:	0034      	movs	r4, r6
1000357e:	4656      	mov	r6, sl
10003580:	e6db      	b.n	1000333a <_vsnprintf+0x3fe>
                    while (l++ < width) {
10003582:	9a0a      	ldr	r2, [sp, #40]	; 0x28
10003584:	2a01      	cmp	r2, #1
10003586:	d800      	bhi.n	1000358a <_vsnprintf+0x64e>
10003588:	e253      	b.n	10003a32 <_vsnprintf+0xaf6>
1000358a:	1e6b      	subs	r3, r5, #1
1000358c:	189f      	adds	r7, r3, r2
1000358e:	9b08      	ldr	r3, [sp, #32]
10003590:	46b0      	mov	r8, r6
10003592:	0026      	movs	r6, r4
10003594:	464c      	mov	r4, r9
10003596:	4699      	mov	r9, r3
                        out(' ', buffer, idx++, maxlen);
10003598:	002a      	movs	r2, r5
1000359a:	0023      	movs	r3, r4
1000359c:	3501      	adds	r5, #1
1000359e:	0031      	movs	r1, r6
100035a0:	2020      	movs	r0, #32
100035a2:	47c8      	blx	r9
                    while (l++ < width) {
100035a4:	42bd      	cmp	r5, r7
100035a6:	d1f7      	bne.n	10003598 <_vsnprintf+0x65c>
100035a8:	46a1      	mov	r9, r4
100035aa:	0034      	movs	r4, r6
100035ac:	4646      	mov	r6, r8
                out((char) va_arg(va, int), buffer, idx++, maxlen);
100035ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
100035b0:	003a      	movs	r2, r7
100035b2:	cb01      	ldmia	r3!, {r0}
100035b4:	0021      	movs	r1, r4
100035b6:	4698      	mov	r8, r3
100035b8:	1c7d      	adds	r5, r7, #1
100035ba:	464b      	mov	r3, r9
100035bc:	9f08      	ldr	r7, [sp, #32]
100035be:	b2c0      	uxtb	r0, r0
100035c0:	47b8      	blx	r7
100035c2:	4643      	mov	r3, r8
                format++;
100035c4:	3601      	adds	r6, #1
                out((char) va_arg(va, int), buffer, idx++, maxlen);
100035c6:	9309      	str	r3, [sp, #36]	; 0x24
                break;
100035c8:	e4dd      	b.n	10002f86 <_vsnprintf+0x4a>
                    while (l++ < width) {
100035ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
100035cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
100035ce:	46a8      	mov	r8, r5
100035d0:	429a      	cmp	r2, r3
100035d2:	d800      	bhi.n	100035d6 <_vsnprintf+0x69a>
100035d4:	e6b5      	b.n	10003342 <_vsnprintf+0x406>
100035d6:	4694      	mov	ip, r2
100035d8:	4465      	add	r5, ip
100035da:	1aed      	subs	r5, r5, r3
100035dc:	9b08      	ldr	r3, [sp, #32]
100035de:	4647      	mov	r7, r8
100035e0:	46b0      	mov	r8, r6
100035e2:	0026      	movs	r6, r4
100035e4:	464c      	mov	r4, r9
100035e6:	4699      	mov	r9, r3
                        out(' ', buffer, idx++, maxlen);
100035e8:	003a      	movs	r2, r7
100035ea:	0023      	movs	r3, r4
100035ec:	3701      	adds	r7, #1
100035ee:	0031      	movs	r1, r6
100035f0:	2020      	movs	r0, #32
100035f2:	47c8      	blx	r9
                    while (l++ < width) {
100035f4:	42af      	cmp	r7, r5
100035f6:	d1f7      	bne.n	100035e8 <_vsnprintf+0x6ac>
100035f8:	46a1      	mov	r9, r4
100035fa:	0034      	movs	r4, r6
100035fc:	4646      	mov	r6, r8
100035fe:	e6a0      	b.n	10003342 <_vsnprintf+0x406>
                    while (l++ < width) {
10003600:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
10003602:	990a      	ldr	r1, [sp, #40]	; 0x28
10003604:	1c53      	adds	r3, r2, #1
10003606:	4291      	cmp	r1, r2
10003608:	d800      	bhi.n	1000360c <_vsnprintf+0x6d0>
1000360a:	e214      	b.n	10003a36 <_vsnprintf+0xafa>
1000360c:	194b      	adds	r3, r1, r5
1000360e:	1a9b      	subs	r3, r3, r2
10003610:	001f      	movs	r7, r3
10003612:	9b08      	ldr	r3, [sp, #32]
10003614:	46b2      	mov	sl, r6
10003616:	0026      	movs	r6, r4
10003618:	464c      	mov	r4, r9
1000361a:	4699      	mov	r9, r3
                        out(' ', buffer, idx++, maxlen);
1000361c:	002a      	movs	r2, r5
1000361e:	0023      	movs	r3, r4
10003620:	3501      	adds	r5, #1
10003622:	0031      	movs	r1, r6
10003624:	2020      	movs	r0, #32
10003626:	47c8      	blx	r9
                    while (l++ < width) {
10003628:	42bd      	cmp	r5, r7
1000362a:	d1f7      	bne.n	1000361c <_vsnprintf+0x6e0>
1000362c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1000362e:	46a1      	mov	r9, r4
10003630:	3301      	adds	r3, #1
10003632:	930b      	str	r3, [sp, #44]	; 0x2c
10003634:	9b09      	ldr	r3, [sp, #36]	; 0x24
10003636:	0034      	movs	r4, r6
10003638:	781b      	ldrb	r3, [r3, #0]
1000363a:	4656      	mov	r6, sl
1000363c:	469c      	mov	ip, r3
                while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
1000363e:	4660      	mov	r0, ip
10003640:	2800      	cmp	r0, #0
10003642:	d000      	beq.n	10003646 <_vsnprintf+0x70a>
10003644:	e658      	b.n	100032f8 <_vsnprintf+0x3bc>
10003646:	e67c      	b.n	10003342 <_vsnprintf+0x406>
                        const long long value = va_arg(va, long long);
10003648:	2207      	movs	r2, #7
1000364a:	9b09      	ldr	r3, [sp, #36]	; 0x24
1000364c:	3307      	adds	r3, #7
1000364e:	4393      	bics	r3, r2
10003650:	3201      	adds	r2, #1
10003652:	4694      	mov	ip, r2
10003654:	449c      	add	ip, r3
10003656:	4662      	mov	r2, ip
10003658:	685f      	ldr	r7, [r3, #4]
1000365a:	9209      	str	r2, [sp, #36]	; 0x24
1000365c:	681a      	ldr	r2, [r3, #0]
                                              (unsigned long long) (value > 0 ? value : 0 - value), value < 0, base,
1000365e:	17fb      	asrs	r3, r7, #31
10003660:	9310      	str	r3, [sp, #64]	; 0x40
10003662:	9311      	str	r3, [sp, #68]	; 0x44
10003664:	9810      	ldr	r0, [sp, #64]	; 0x40
10003666:	9911      	ldr	r1, [sp, #68]	; 0x44
10003668:	0003      	movs	r3, r0
1000366a:	4053      	eors	r3, r2
1000366c:	930e      	str	r3, [sp, #56]	; 0x38
1000366e:	000b      	movs	r3, r1
10003670:	407b      	eors	r3, r7
10003672:	930f      	str	r3, [sp, #60]	; 0x3c
                        const long long value = va_arg(va, long long);
10003674:	4694      	mov	ip, r2
                                              (unsigned long long) (value > 0 ? value : 0 - value), value < 0, base,
10003676:	9a0e      	ldr	r2, [sp, #56]	; 0x38
10003678:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1000367a:	1a12      	subs	r2, r2, r0
1000367c:	418b      	sbcs	r3, r1
1000367e:	920e      	str	r2, [sp, #56]	; 0x38
10003680:	930f      	str	r3, [sp, #60]	; 0x3c
                        idx = _ntoa_long_long(out, buffer, idx, maxlen,
10003682:	0ffb      	lsrs	r3, r7, #31
    if (!value) {
10003684:	4662      	mov	r2, ip
                        idx = _ntoa_long_long(out, buffer, idx, maxlen,
10003686:	9312      	str	r3, [sp, #72]	; 0x48
10003688:	2300      	movs	r3, #0
    if (!value) {
1000368a:	433a      	orrs	r2, r7
                        idx = _ntoa_long_long(out, buffer, idx, maxlen,
1000368c:	469b      	mov	fp, r3
    if (!value) {
1000368e:	d03d      	beq.n	1000370c <_vsnprintf+0x7d0>
10003690:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
10003692:	2361      	movs	r3, #97	; 0x61
10003694:	0692      	lsls	r2, r2, #26
10003696:	d500      	bpl.n	1000369a <_vsnprintf+0x75e>
10003698:	2341      	movs	r3, #65	; 0x41
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
1000369a:	2200      	movs	r2, #0
1000369c:	b2db      	uxtb	r3, r3
1000369e:	a90e      	add	r1, sp, #56	; 0x38
100036a0:	3b0a      	subs	r3, #10
100036a2:	468c      	mov	ip, r1
100036a4:	4692      	mov	sl, r2
100036a6:	930d      	str	r3, [sp, #52]	; 0x34
100036a8:	4643      	mov	r3, r8
100036aa:	321f      	adds	r2, #31
100036ac:	4462      	add	r2, ip
100036ae:	9513      	str	r5, [sp, #76]	; 0x4c
100036b0:	9615      	str	r6, [sp, #84]	; 0x54
100036b2:	4655      	mov	r5, sl
100036b4:	9e0e      	ldr	r6, [sp, #56]	; 0x38
100036b6:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
100036b8:	46a2      	mov	sl, r4
100036ba:	4690      	mov	r8, r2
100036bc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
100036be:	9314      	str	r3, [sp, #80]	; 0x50
100036c0:	e00c      	b.n	100036dc <_vsnprintf+0x7a0>
100036c2:	3230      	adds	r2, #48	; 0x30
100036c4:	b2d2      	uxtb	r2, r2
100036c6:	4643      	mov	r3, r8
100036c8:	3501      	adds	r5, #1
100036ca:	555a      	strb	r2, [r3, r5]
        } while (value && (len < PICO_PRINTF_NTOA_BUFFER_SIZE));
100036cc:	45bb      	cmp	fp, r7
100036ce:	d100      	bne.n	100036d2 <_vsnprintf+0x796>
100036d0:	e18a      	b.n	100039e8 <_vsnprintf+0xaac>
100036d2:	2d20      	cmp	r5, #32
100036d4:	d100      	bne.n	100036d8 <_vsnprintf+0x79c>
100036d6:	e18a      	b.n	100039ee <_vsnprintf+0xab2>
            value /= base;
100036d8:	0006      	movs	r6, r0
100036da:	000f      	movs	r7, r1
            const char digit = (char) (value % base);
100036dc:	0022      	movs	r2, r4
100036de:	2300      	movs	r3, #0
100036e0:	0030      	movs	r0, r6
100036e2:	0039      	movs	r1, r7
100036e4:	f7fc fe8c 	bl	10000400 <__wrap___aeabi_uldivmod>
100036e8:	b2d2      	uxtb	r2, r2
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
100036ea:	2a09      	cmp	r2, #9
100036ec:	d9e9      	bls.n	100036c2 <_vsnprintf+0x786>
100036ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
100036f0:	469c      	mov	ip, r3
100036f2:	4462      	add	r2, ip
100036f4:	b2d2      	uxtb	r2, r2
100036f6:	e7e6      	b.n	100036c6 <_vsnprintf+0x78a>
100036f8:	23ff      	movs	r3, #255	; 0xff
                        const int value = (flags & FLAGS_CHAR) ? (char) va_arg(va, int) : (flags & FLAGS_SHORT)
100036fa:	9909      	ldr	r1, [sp, #36]	; 0x24
100036fc:	c904      	ldmia	r1!, {r2}
100036fe:	4013      	ands	r3, r2
10003700:	001a      	movs	r2, r3
10003702:	9109      	str	r1, [sp, #36]	; 0x24
10003704:	e517      	b.n	10003136 <_vsnprintf+0x1fa>
10003706:	46c0      	nop			; (mov r8, r8)
10003708:	100024f9 	.word	0x100024f9
        flags &= ~FLAGS_HASH;
1000370c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
1000370e:	3310      	adds	r3, #16
10003710:	0011      	movs	r1, r2
10003712:	4399      	bics	r1, r3
10003714:	910b      	str	r1, [sp, #44]	; 0x2c
    if (!(flags & FLAGS_PRECISION) || value) {
10003716:	0552      	lsls	r2, r2, #21
10003718:	d5ba      	bpl.n	10003690 <_vsnprintf+0x754>
    size_t len = 0U;
1000371a:	2300      	movs	r3, #0
1000371c:	469a      	mov	sl, r3
    return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int) base, prec, width, flags);
1000371e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
10003720:	9306      	str	r3, [sp, #24]
10003722:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10003724:	9305      	str	r3, [sp, #20]
10003726:	4643      	mov	r3, r8
10003728:	9304      	str	r3, [sp, #16]
1000372a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1000372c:	9303      	str	r3, [sp, #12]
1000372e:	9b12      	ldr	r3, [sp, #72]	; 0x48
10003730:	9302      	str	r3, [sp, #8]
10003732:	4653      	mov	r3, sl
10003734:	9301      	str	r3, [sp, #4]
10003736:	ab16      	add	r3, sp, #88	; 0x58
10003738:	002a      	movs	r2, r5
1000373a:	9300      	str	r3, [sp, #0]
1000373c:	0021      	movs	r1, r4
1000373e:	464b      	mov	r3, r9
10003740:	9808      	ldr	r0, [sp, #32]
10003742:	f7fe ff29 	bl	10002598 <_ntoa_format>
                format++;
10003746:	3601      	adds	r6, #1
    return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int) base, prec, width, flags);
10003748:	0005      	movs	r5, r0
                break;
1000374a:	e41c      	b.n	10002f86 <_vsnprintf+0x4a>
1000374c:	22ff      	movs	r2, #255	; 0xff
                        const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char) va_arg(va, unsigned int)
1000374e:	9b09      	ldr	r3, [sp, #36]	; 0x24
10003750:	cb02      	ldmia	r3!, {r1}
10003752:	4011      	ands	r1, r2
10003754:	468b      	mov	fp, r1
10003756:	9309      	str	r3, [sp, #36]	; 0x24
10003758:	e6c5      	b.n	100034e6 <_vsnprintf+0x5aa>
                out((char) va_arg(va, int), buffer, idx++, maxlen);
1000375a:	4653      	mov	r3, sl
                    while (l++ < width) {
1000375c:	4645      	mov	r5, r8
                out((char) va_arg(va, int), buffer, idx++, maxlen);
1000375e:	9309      	str	r3, [sp, #36]	; 0x24
                format++;
10003760:	3601      	adds	r6, #1
                break;
10003762:	f7ff fc10 	bl	10002f86 <_vsnprintf+0x4a>
10003766:	4656      	mov	r6, sl
10003768:	465c      	mov	r4, fp
1000376a:	46aa      	mov	sl, r5
1000376c:	9d13      	ldr	r5, [sp, #76]	; 0x4c
1000376e:	e7d6      	b.n	1000371e <_vsnprintf+0x7e2>
                    base = 8U;
10003770:	2308      	movs	r3, #8
10003772:	930c      	str	r3, [sp, #48]	; 0x30
                format++;
10003774:	910b      	str	r1, [sp, #44]	; 0x2c
10003776:	990b      	ldr	r1, [sp, #44]	; 0x2c
                if ((*format != 'i') && (*format != 'd')) {
10003778:	2864      	cmp	r0, #100	; 0x64
1000377a:	d000      	beq.n	1000377e <_vsnprintf+0x842>
1000377c:	e684      	b.n	10003488 <_vsnprintf+0x54c>
                if (flags & FLAGS_PRECISION) {
1000377e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
10003780:	055b      	lsls	r3, r3, #21
10003782:	d500      	bpl.n	10003786 <_vsnprintf+0x84a>
10003784:	e686      	b.n	10003494 <_vsnprintf+0x558>
10003786:	e4b4      	b.n	100030f2 <_vsnprintf+0x1b6>
                        idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base,
10003788:	2207      	movs	r2, #7
1000378a:	9b09      	ldr	r3, [sp, #36]	; 0x24
1000378c:	3307      	adds	r3, #7
1000378e:	4393      	bics	r3, r2
10003790:	3201      	adds	r2, #1
10003792:	4694      	mov	ip, r2
10003794:	449c      	add	ip, r3
10003796:	4662      	mov	r2, ip
10003798:	9209      	str	r2, [sp, #36]	; 0x24
1000379a:	681a      	ldr	r2, [r3, #0]
1000379c:	685b      	ldr	r3, [r3, #4]
1000379e:	0010      	movs	r0, r2
100037a0:	469b      	mov	fp, r3
    if (!value) {
100037a2:	0013      	movs	r3, r2
100037a4:	465a      	mov	r2, fp
100037a6:	4313      	orrs	r3, r2
100037a8:	d107      	bne.n	100037ba <_vsnprintf+0x87e>
        flags &= ~FLAGS_HASH;
100037aa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
100037ac:	3310      	adds	r3, #16
100037ae:	0011      	movs	r1, r2
100037b0:	4399      	bics	r1, r3
100037b2:	910b      	str	r1, [sp, #44]	; 0x2c
    if (!(flags & FLAGS_PRECISION) || value) {
100037b4:	0552      	lsls	r2, r2, #21
100037b6:	d500      	bpl.n	100037ba <_vsnprintf+0x87e>
100037b8:	e6a1      	b.n	100034fe <_vsnprintf+0x5c2>
100037ba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
100037bc:	2361      	movs	r3, #97	; 0x61
100037be:	0692      	lsls	r2, r2, #26
100037c0:	d500      	bpl.n	100037c4 <_vsnprintf+0x888>
100037c2:	2341      	movs	r3, #65	; 0x41
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
100037c4:	2200      	movs	r2, #0
100037c6:	b2db      	uxtb	r3, r3
100037c8:	a90e      	add	r1, sp, #56	; 0x38
100037ca:	3b0a      	subs	r3, #10
100037cc:	468c      	mov	ip, r1
100037ce:	4692      	mov	sl, r2
100037d0:	930d      	str	r3, [sp, #52]	; 0x34
100037d2:	4643      	mov	r3, r8
100037d4:	321f      	adds	r2, #31
100037d6:	4462      	add	r2, ip
100037d8:	465f      	mov	r7, fp
100037da:	9512      	str	r5, [sp, #72]	; 0x48
100037dc:	46a3      	mov	fp, r4
100037de:	4655      	mov	r5, sl
100037e0:	0004      	movs	r4, r0
100037e2:	46b2      	mov	sl, r6
100037e4:	4690      	mov	r8, r2
100037e6:	9e0c      	ldr	r6, [sp, #48]	; 0x30
100037e8:	9313      	str	r3, [sp, #76]	; 0x4c
100037ea:	e00d      	b.n	10003808 <_vsnprintf+0x8cc>
100037ec:	3230      	adds	r2, #48	; 0x30
100037ee:	b2d2      	uxtb	r2, r2
100037f0:	4643      	mov	r3, r8
100037f2:	3501      	adds	r5, #1
100037f4:	555a      	strb	r2, [r3, r5]
        } while (value && (len < PICO_PRINTF_NTOA_BUFFER_SIZE));
100037f6:	2300      	movs	r3, #0
100037f8:	42bb      	cmp	r3, r7
100037fa:	d100      	bne.n	100037fe <_vsnprintf+0x8c2>
100037fc:	e100      	b.n	10003a00 <_vsnprintf+0xac4>
100037fe:	2d20      	cmp	r5, #32
10003800:	d100      	bne.n	10003804 <_vsnprintf+0x8c8>
10003802:	e100      	b.n	10003a06 <_vsnprintf+0xaca>
            value /= base;
10003804:	0004      	movs	r4, r0
10003806:	000f      	movs	r7, r1
            const char digit = (char) (value % base);
10003808:	0032      	movs	r2, r6
1000380a:	2300      	movs	r3, #0
1000380c:	0020      	movs	r0, r4
1000380e:	0039      	movs	r1, r7
10003810:	f7fc fdf6 	bl	10000400 <__wrap___aeabi_uldivmod>
10003814:	b2d2      	uxtb	r2, r2
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
10003816:	2a09      	cmp	r2, #9
10003818:	d9e8      	bls.n	100037ec <_vsnprintf+0x8b0>
1000381a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1000381c:	469c      	mov	ip, r3
1000381e:	4462      	add	r2, ip
10003820:	b2d2      	uxtb	r2, r2
10003822:	e7e5      	b.n	100037f0 <_vsnprintf+0x8b4>
10003824:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
10003826:	2361      	movs	r3, #97	; 0x61
10003828:	0692      	lsls	r2, r2, #26
1000382a:	d500      	bpl.n	1000382e <_vsnprintf+0x8f2>
1000382c:	2341      	movs	r3, #65	; 0x41
1000382e:	b2db      	uxtb	r3, r3
10003830:	a90e      	add	r1, sp, #56	; 0x38
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
10003832:	3b0a      	subs	r3, #10
10003834:	221f      	movs	r2, #31
10003836:	468c      	mov	ip, r1
10003838:	930d      	str	r3, [sp, #52]	; 0x34
1000383a:	0023      	movs	r3, r4
1000383c:	4462      	add	r2, ip
1000383e:	465c      	mov	r4, fp
10003840:	9512      	str	r5, [sp, #72]	; 0x48
10003842:	0017      	movs	r7, r2
10003844:	4655      	mov	r5, sl
10003846:	469b      	mov	fp, r3
10003848:	46b2      	mov	sl, r6
1000384a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
1000384c:	e008      	b.n	10003860 <_vsnprintf+0x924>
1000384e:	3330      	adds	r3, #48	; 0x30
10003850:	b2db      	uxtb	r3, r3
10003852:	3501      	adds	r5, #1
10003854:	557b      	strb	r3, [r7, r5]
        } while (value && (len < PICO_PRINTF_NTOA_BUFFER_SIZE));
10003856:	42b4      	cmp	r4, r6
10003858:	d30e      	bcc.n	10003878 <_vsnprintf+0x93c>
1000385a:	2d20      	cmp	r5, #32
1000385c:	d00c      	beq.n	10003878 <_vsnprintf+0x93c>
            value /= base;
1000385e:	0004      	movs	r4, r0
            const char digit = (char) (value % base);
10003860:	0031      	movs	r1, r6
10003862:	0020      	movs	r0, r4
10003864:	f7fc fd86 	bl	10000374 <__wrap___aeabi_uidiv>
10003868:	b2cb      	uxtb	r3, r1
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
1000386a:	2909      	cmp	r1, #9
1000386c:	d9ef      	bls.n	1000384e <_vsnprintf+0x912>
1000386e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
10003870:	4694      	mov	ip, r2
10003872:	4463      	add	r3, ip
10003874:	b2db      	uxtb	r3, r3
10003876:	e7ec      	b.n	10003852 <_vsnprintf+0x916>
10003878:	4656      	mov	r6, sl
1000387a:	465c      	mov	r4, fp
1000387c:	46aa      	mov	sl, r5
1000387e:	9d12      	ldr	r5, [sp, #72]	; 0x48
10003880:	e63f      	b.n	10003502 <_vsnprintf+0x5c6>
                        const long value = va_arg(va, long);
10003882:	9b09      	ldr	r3, [sp, #36]	; 0x24
10003884:	001a      	movs	r2, r3
10003886:	ca08      	ldmia	r2!, {r3}
                        idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long) (value > 0 ? value : 0 - value),
10003888:	17d9      	asrs	r1, r3, #31
                        const long value = va_arg(va, long);
1000388a:	9213      	str	r2, [sp, #76]	; 0x4c
                        idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long) (value > 0 ? value : 0 - value),
1000388c:	185a      	adds	r2, r3, r1
1000388e:	404a      	eors	r2, r1
10003890:	4692      	mov	sl, r2
10003892:	0fda      	lsrs	r2, r3, #31
10003894:	9212      	str	r2, [sp, #72]	; 0x48
    if (!value) {
10003896:	2b00      	cmp	r3, #0
10003898:	d108      	bne.n	100038ac <_vsnprintf+0x970>
    if (!(flags & FLAGS_PRECISION) || value) {
1000389a:	2380      	movs	r3, #128	; 0x80
        flags &= ~FLAGS_HASH;
1000389c:	2210      	movs	r2, #16
    if (!(flags & FLAGS_PRECISION) || value) {
1000389e:	990b      	ldr	r1, [sp, #44]	; 0x2c
100038a0:	00db      	lsls	r3, r3, #3
100038a2:	400b      	ands	r3, r1
        flags &= ~FLAGS_HASH;
100038a4:	4391      	bics	r1, r2
100038a6:	910b      	str	r1, [sp, #44]	; 0x2c
    if (!(flags & FLAGS_PRECISION) || value) {
100038a8:	2b00      	cmp	r3, #0
100038aa:	d12b      	bne.n	10003904 <_vsnprintf+0x9c8>
100038ac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
100038ae:	2361      	movs	r3, #97	; 0x61
100038b0:	0692      	lsls	r2, r2, #26
100038b2:	d500      	bpl.n	100038b6 <_vsnprintf+0x97a>
100038b4:	2341      	movs	r3, #65	; 0x41
100038b6:	aa0e      	add	r2, sp, #56	; 0x38
100038b8:	271f      	movs	r7, #31
100038ba:	4694      	mov	ip, r2
100038bc:	b2db      	uxtb	r3, r3
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
100038be:	3b0a      	subs	r3, #10
100038c0:	950d      	str	r5, [sp, #52]	; 0x34
100038c2:	4467      	add	r7, ip
100038c4:	465d      	mov	r5, fp
100038c6:	9309      	str	r3, [sp, #36]	; 0x24
100038c8:	46a3      	mov	fp, r4
100038ca:	4654      	mov	r4, sl
100038cc:	46b2      	mov	sl, r6
100038ce:	9e0c      	ldr	r6, [sp, #48]	; 0x30
100038d0:	e008      	b.n	100038e4 <_vsnprintf+0x9a8>
100038d2:	3330      	adds	r3, #48	; 0x30
100038d4:	b2db      	uxtb	r3, r3
100038d6:	3501      	adds	r5, #1
100038d8:	557b      	strb	r3, [r7, r5]
        } while (value && (len < PICO_PRINTF_NTOA_BUFFER_SIZE));
100038da:	42b4      	cmp	r4, r6
100038dc:	d30e      	bcc.n	100038fc <_vsnprintf+0x9c0>
100038de:	2d20      	cmp	r5, #32
100038e0:	d00c      	beq.n	100038fc <_vsnprintf+0x9c0>
            value /= base;
100038e2:	0004      	movs	r4, r0
            const char digit = (char) (value % base);
100038e4:	0031      	movs	r1, r6
100038e6:	0020      	movs	r0, r4
100038e8:	f7fc fd44 	bl	10000374 <__wrap___aeabi_uidiv>
100038ec:	b2cb      	uxtb	r3, r1
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
100038ee:	2909      	cmp	r1, #9
100038f0:	d9ef      	bls.n	100038d2 <_vsnprintf+0x996>
100038f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
100038f4:	4694      	mov	ip, r2
100038f6:	4463      	add	r3, ip
100038f8:	b2db      	uxtb	r3, r3
100038fa:	e7ec      	b.n	100038d6 <_vsnprintf+0x99a>
100038fc:	4656      	mov	r6, sl
100038fe:	465c      	mov	r4, fp
10003900:	46ab      	mov	fp, r5
10003902:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int) base, prec, width, flags);
10003904:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
10003906:	002a      	movs	r2, r5
10003908:	9306      	str	r3, [sp, #24]
1000390a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1000390c:	0021      	movs	r1, r4
1000390e:	9305      	str	r3, [sp, #20]
10003910:	4643      	mov	r3, r8
10003912:	9304      	str	r3, [sp, #16]
10003914:	9b0c      	ldr	r3, [sp, #48]	; 0x30
10003916:	9808      	ldr	r0, [sp, #32]
10003918:	9303      	str	r3, [sp, #12]
1000391a:	9b12      	ldr	r3, [sp, #72]	; 0x48
                format++;
1000391c:	3601      	adds	r6, #1
    return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int) base, prec, width, flags);
1000391e:	9302      	str	r3, [sp, #8]
10003920:	465b      	mov	r3, fp
10003922:	9301      	str	r3, [sp, #4]
10003924:	ab16      	add	r3, sp, #88	; 0x58
10003926:	9300      	str	r3, [sp, #0]
10003928:	464b      	mov	r3, r9
1000392a:	f7fe fe35 	bl	10002598 <_ntoa_format>
                        const long value = va_arg(va, long);
1000392e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int) base, prec, width, flags);
10003930:	0005      	movs	r5, r0
                        const long value = va_arg(va, long);
10003932:	9309      	str	r3, [sp, #36]	; 0x24
                break;
10003934:	f7ff fb27 	bl	10002f86 <_vsnprintf+0x4a>
                    base = 2U;
10003938:	2302      	movs	r3, #2
1000393a:	930c      	str	r3, [sp, #48]	; 0x30
1000393c:	e71a      	b.n	10003774 <_vsnprintf+0x838>
                        idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision,
1000393e:	9b09      	ldr	r3, [sp, #36]	; 0x24
10003940:	cb04      	ldmia	r3!, {r2}
10003942:	4692      	mov	sl, r2
10003944:	9312      	str	r3, [sp, #72]	; 0x48
    if (!value) {
10003946:	2a00      	cmp	r2, #0
10003948:	d108      	bne.n	1000395c <_vsnprintf+0xa20>
    if (!(flags & FLAGS_PRECISION) || value) {
1000394a:	2380      	movs	r3, #128	; 0x80
        flags &= ~FLAGS_HASH;
1000394c:	2210      	movs	r2, #16
    if (!(flags & FLAGS_PRECISION) || value) {
1000394e:	990b      	ldr	r1, [sp, #44]	; 0x2c
10003950:	00db      	lsls	r3, r3, #3
10003952:	400b      	ands	r3, r1
        flags &= ~FLAGS_HASH;
10003954:	4391      	bics	r1, r2
10003956:	910b      	str	r1, [sp, #44]	; 0x2c
    if (!(flags & FLAGS_PRECISION) || value) {
10003958:	2b00      	cmp	r3, #0
1000395a:	d12b      	bne.n	100039b4 <_vsnprintf+0xa78>
1000395c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
1000395e:	2361      	movs	r3, #97	; 0x61
10003960:	0692      	lsls	r2, r2, #26
10003962:	d500      	bpl.n	10003966 <_vsnprintf+0xa2a>
10003964:	2341      	movs	r3, #65	; 0x41
10003966:	aa0e      	add	r2, sp, #56	; 0x38
10003968:	271f      	movs	r7, #31
1000396a:	4694      	mov	ip, r2
1000396c:	b2db      	uxtb	r3, r3
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
1000396e:	3b0a      	subs	r3, #10
10003970:	950d      	str	r5, [sp, #52]	; 0x34
10003972:	4467      	add	r7, ip
10003974:	465d      	mov	r5, fp
10003976:	9309      	str	r3, [sp, #36]	; 0x24
10003978:	46a3      	mov	fp, r4
1000397a:	4654      	mov	r4, sl
1000397c:	46b2      	mov	sl, r6
1000397e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
10003980:	e008      	b.n	10003994 <_vsnprintf+0xa58>
10003982:	3330      	adds	r3, #48	; 0x30
10003984:	b2db      	uxtb	r3, r3
10003986:	3501      	adds	r5, #1
10003988:	557b      	strb	r3, [r7, r5]
        } while (value && (len < PICO_PRINTF_NTOA_BUFFER_SIZE));
1000398a:	42b4      	cmp	r4, r6
1000398c:	d30e      	bcc.n	100039ac <_vsnprintf+0xa70>
1000398e:	2d20      	cmp	r5, #32
10003990:	d00c      	beq.n	100039ac <_vsnprintf+0xa70>
            value /= base;
10003992:	0004      	movs	r4, r0
            const char digit = (char) (value % base);
10003994:	0031      	movs	r1, r6
10003996:	0020      	movs	r0, r4
10003998:	f7fc fcec 	bl	10000374 <__wrap___aeabi_uidiv>
1000399c:	b2cb      	uxtb	r3, r1
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
1000399e:	2909      	cmp	r1, #9
100039a0:	d9ef      	bls.n	10003982 <_vsnprintf+0xa46>
100039a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
100039a4:	4694      	mov	ip, r2
100039a6:	4463      	add	r3, ip
100039a8:	b2db      	uxtb	r3, r3
100039aa:	e7ec      	b.n	10003986 <_vsnprintf+0xa4a>
100039ac:	4656      	mov	r6, sl
100039ae:	465c      	mov	r4, fp
100039b0:	46ab      	mov	fp, r5
100039b2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int) base, prec, width, flags);
100039b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
100039b6:	002a      	movs	r2, r5
100039b8:	9306      	str	r3, [sp, #24]
100039ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
100039bc:	0021      	movs	r1, r4
100039be:	9305      	str	r3, [sp, #20]
100039c0:	4643      	mov	r3, r8
100039c2:	9304      	str	r3, [sp, #16]
100039c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
100039c6:	9808      	ldr	r0, [sp, #32]
100039c8:	9303      	str	r3, [sp, #12]
100039ca:	2300      	movs	r3, #0
100039cc:	9302      	str	r3, [sp, #8]
100039ce:	465b      	mov	r3, fp
100039d0:	9301      	str	r3, [sp, #4]
100039d2:	ab16      	add	r3, sp, #88	; 0x58
100039d4:	9300      	str	r3, [sp, #0]
100039d6:	464b      	mov	r3, r9
100039d8:	f7fe fdde 	bl	10002598 <_ntoa_format>
                        idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision,
100039dc:	9b12      	ldr	r3, [sp, #72]	; 0x48
    return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int) base, prec, width, flags);
100039de:	0005      	movs	r5, r0
                        idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision,
100039e0:	9309      	str	r3, [sp, #36]	; 0x24
                format++;
100039e2:	3601      	adds	r6, #1
                break;
100039e4:	f7ff facf 	bl	10002f86 <_vsnprintf+0x4a>
        } while (value && (len < PICO_PRINTF_NTOA_BUFFER_SIZE));
100039e8:	42b4      	cmp	r4, r6
100039ea:	d800      	bhi.n	100039ee <_vsnprintf+0xab2>
100039ec:	e671      	b.n	100036d2 <_vsnprintf+0x796>
100039ee:	9b14      	ldr	r3, [sp, #80]	; 0x50
100039f0:	4654      	mov	r4, sl
100039f2:	960e      	str	r6, [sp, #56]	; 0x38
100039f4:	970f      	str	r7, [sp, #60]	; 0x3c
100039f6:	46aa      	mov	sl, r5
100039f8:	4698      	mov	r8, r3
100039fa:	9e15      	ldr	r6, [sp, #84]	; 0x54
100039fc:	9d13      	ldr	r5, [sp, #76]	; 0x4c
    return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int) base, prec, width, flags);
100039fe:	e68e      	b.n	1000371e <_vsnprintf+0x7e2>
        } while (value && (len < PICO_PRINTF_NTOA_BUFFER_SIZE));
10003a00:	42a6      	cmp	r6, r4
10003a02:	d800      	bhi.n	10003a06 <_vsnprintf+0xaca>
10003a04:	e6fb      	b.n	100037fe <_vsnprintf+0x8c2>
10003a06:	9b13      	ldr	r3, [sp, #76]	; 0x4c
10003a08:	4656      	mov	r6, sl
10003a0a:	4698      	mov	r8, r3
10003a0c:	46aa      	mov	sl, r5
10003a0e:	465c      	mov	r4, fp
    return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int) base, prec, width, flags);
10003a10:	9d12      	ldr	r5, [sp, #72]	; 0x48
10003a12:	e576      	b.n	10003502 <_vsnprintf+0x5c6>
                                                                                          : va_arg(va, int);
10003a14:	c908      	ldmia	r1!, {r3}
                        idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int) (value > 0 ? value : 0 - value),
10003a16:	17d8      	asrs	r0, r3, #31
10003a18:	181a      	adds	r2, r3, r0
10003a1a:	4042      	eors	r2, r0
                                                                                          : va_arg(va, int);
10003a1c:	9109      	str	r1, [sp, #36]	; 0x24
10003a1e:	f7ff fb8a 	bl	10003136 <_vsnprintf+0x1fa>
    for (s = str; *s && maxsize--; ++s);
10003a22:	2300      	movs	r3, #0
10003a24:	930b      	str	r3, [sp, #44]	; 0x2c
10003a26:	e450      	b.n	100032ca <_vsnprintf+0x38e>
                                                                          : va_arg(va, unsigned int);
10003a28:	9b09      	ldr	r3, [sp, #36]	; 0x24
10003a2a:	cb04      	ldmia	r3!, {r2}
10003a2c:	4693      	mov	fp, r2
10003a2e:	9309      	str	r3, [sp, #36]	; 0x24
10003a30:	e559      	b.n	100034e6 <_vsnprintf+0x5aa>
                    while (l++ < width) {
10003a32:	002f      	movs	r7, r5
10003a34:	e5bb      	b.n	100035ae <_vsnprintf+0x672>
                    while (l++ < width) {
10003a36:	930b      	str	r3, [sp, #44]	; 0x2c
10003a38:	e601      	b.n	1000363e <_vsnprintf+0x702>
                    base = 10U;
10003a3a:	3b06      	subs	r3, #6
10003a3c:	930c      	str	r3, [sp, #48]	; 0x30
10003a3e:	e69a      	b.n	10003776 <_vsnprintf+0x83a>

10003a40 <vfctprintf>:

int WRAPPER_FUNC(vsnprintf)(char *buffer, size_t count, const char *format, va_list va) {
    return _vsnprintf(_out_buffer, buffer, count, format, va);
}

int vfctprintf(void (*out)(char character, void *arg), void *arg, const char *format, va_list va) {
10003a40:	b500      	push	{lr}
10003a42:	b085      	sub	sp, #20
    const out_fct_wrap_type out_fct_wrap = {out, arg};
10003a44:	9103      	str	r1, [sp, #12]
    return _vsnprintf(_out_fct, (char *) (uintptr_t) &out_fct_wrap, (size_t) -1, format, va);
10003a46:	2101      	movs	r1, #1
    const out_fct_wrap_type out_fct_wrap = {out, arg};
10003a48:	9002      	str	r0, [sp, #8]
    return _vsnprintf(_out_fct, (char *) (uintptr_t) &out_fct_wrap, (size_t) -1, format, va);
10003a4a:	9300      	str	r3, [sp, #0]
10003a4c:	4803      	ldr	r0, [pc, #12]	; (10003a5c <vfctprintf+0x1c>)
10003a4e:	0013      	movs	r3, r2
10003a50:	424a      	negs	r2, r1
10003a52:	a902      	add	r1, sp, #8
10003a54:	f7ff fa72 	bl	10002f3c <_vsnprintf>
}
10003a58:	b005      	add	sp, #20
10003a5a:	bd00      	pop	{pc}
10003a5c:	10002775 	.word	0x10002775

10003a60 <weak_raw_vprintf>:
    bool rc = weak_raw_vprintf(fmt, va);
    va_end(va);
    return rc;
}

bool weak_raw_vprintf(const char *fmt, va_list args) {
10003a60:	b510      	push	{r4, lr}
    if (lazy_vsnprintf) {
10003a62:	4a09      	ldr	r2, [pc, #36]	; (10003a88 <weak_raw_vprintf+0x28>)
bool weak_raw_vprintf(const char *fmt, va_list args) {
10003a64:	0003      	movs	r3, r0
    if (lazy_vsnprintf) {
10003a66:	6814      	ldr	r4, [r2, #0]
bool weak_raw_vprintf(const char *fmt, va_list args) {
10003a68:	b084      	sub	sp, #16
    if (lazy_vsnprintf) {
10003a6a:	2c00      	cmp	r4, #0
10003a6c:	d008      	beq.n	10003a80 <weak_raw_vprintf+0x20>
        char buffer[1];
        lazy_vsnprintf(_out_char, buffer, (size_t) -1, fmt, args);
10003a6e:	2201      	movs	r2, #1
10003a70:	9100      	str	r1, [sp, #0]
10003a72:	4806      	ldr	r0, [pc, #24]	; (10003a8c <weak_raw_vprintf+0x2c>)
10003a74:	4252      	negs	r2, r2
10003a76:	a903      	add	r1, sp, #12
10003a78:	47a0      	blx	r4
        return true;
10003a7a:	2001      	movs	r0, #1
    } else {
        puts(fmt);
        return false;
    }
}
10003a7c:	b004      	add	sp, #16
10003a7e:	bd10      	pop	{r4, pc}
        puts(fmt);
10003a80:	f000 f9cc 	bl	10003e1c <__wrap_puts>
        return false;
10003a84:	2000      	movs	r0, #0
10003a86:	e7f9      	b.n	10003a7c <weak_raw_vprintf+0x1c>
10003a88:	20039b78 	.word	0x20039b78
10003a8c:	10002765 	.word	0x10002765

10003a90 <runtime_init>:
                   | (0x7 << 1) // size 2^(7 + 1) = 256
                   | (subregion_select << 8)
                   | 0x10000000; // XN = disable instruction fetch; no other bits means no permissions
}

void runtime_init(void) {
10003a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10003a92:	4a2b      	ldr	r2, [pc, #172]	; (10003b40 <runtime_init+0xb0>)
10003a94:	4b2b      	ldr	r3, [pc, #172]	; (10003b44 <runtime_init+0xb4>)
10003a96:	492c      	ldr	r1, [pc, #176]	; (10003b48 <runtime_init+0xb8>)
10003a98:	601a      	str	r2, [r3, #0]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10003a9a:	4a2c      	ldr	r2, [pc, #176]	; (10003b4c <runtime_init+0xbc>)
10003a9c:	4b2c      	ldr	r3, [pc, #176]	; (10003b50 <runtime_init+0xc0>)
10003a9e:	601a      	str	r2, [r3, #0]
10003aa0:	0014      	movs	r4, r2
10003aa2:	688b      	ldr	r3, [r1, #8]
10003aa4:	439c      	bics	r4, r3
10003aa6:	d1fb      	bne.n	10003aa0 <runtime_init+0x10>
    extern void (*__preinit_array_end)();

    // Call each function in the list.
    // We have to take the address of the symbols, as __preinit_array_start *is*
    // the first function pointer, not the address of it.
    for (void (**p)() = &__preinit_array_start; p < &__preinit_array_end; ++p) {
10003aa8:	4d2a      	ldr	r5, [pc, #168]	; (10003b54 <runtime_init+0xc4>)
10003aaa:	4e2b      	ldr	r6, [pc, #172]	; (10003b58 <runtime_init+0xc8>)
10003aac:	42b5      	cmp	r5, r6
10003aae:	d208      	bcs.n	10003ac2 <runtime_init+0x32>
10003ab0:	3e01      	subs	r6, #1
10003ab2:	1b76      	subs	r6, r6, r5
10003ab4:	08b6      	lsrs	r6, r6, #2
        (*p)();
10003ab6:	cd08      	ldmia	r5!, {r3}
10003ab8:	4798      	blx	r3
    for (void (**p)() = &__preinit_array_start; p < &__preinit_array_end; ++p) {
10003aba:	0023      	movs	r3, r4
10003abc:	3401      	adds	r4, #1
10003abe:	42b3      	cmp	r3, r6
10003ac0:	d1f9      	bne.n	10003ab6 <runtime_init+0x26>
    }

    // After calling preinit we have enough runtime to do the exciting maths
    // in clocks_init
    clocks_init();
10003ac2:	f7fd fd4b 	bl	1000155c <clocks_init>
10003ac6:	4a25      	ldr	r2, [pc, #148]	; (10003b5c <runtime_init+0xcc>)
10003ac8:	4b21      	ldr	r3, [pc, #132]	; (10003b50 <runtime_init+0xc0>)
10003aca:	601a      	str	r2, [r3, #0]
10003acc:	4a1e      	ldr	r2, [pc, #120]	; (10003b48 <runtime_init+0xb8>)
10003ace:	6893      	ldr	r3, [r2, #8]
10003ad0:	43db      	mvns	r3, r3
10003ad2:	01db      	lsls	r3, r3, #7
10003ad4:	09dc      	lsrs	r4, r3, #7
10003ad6:	2b00      	cmp	r3, #0
10003ad8:	d1f9      	bne.n	10003ace <runtime_init+0x3e>
    unreset_block_wait(RESETS_RESET_BITS);

#if !PICO_IE_26_29_UNCHANGED_ON_RESET
    // after resetting BANK0 we should disable IE on 26-29
    hw_clear_alias(padsbank0_hw)->io[26] = hw_clear_alias(padsbank0_hw)->io[27] =
            hw_clear_alias(padsbank0_hw)->io[28] = hw_clear_alias(padsbank0_hw)->io[29] = PADS_BANK0_GPIO0_IE_BITS;
10003ada:	2240      	movs	r2, #64	; 0x40
10003adc:	4b20      	ldr	r3, [pc, #128]	; (10003b60 <runtime_init+0xd0>)

    extern mutex_t __mutex_array_start;
    extern mutex_t __mutex_array_end;

    // the first function pointer, not the address of it.
    for (mutex_t *m = &__mutex_array_start; m < &__mutex_array_end; m++) {
10003ade:	4d21      	ldr	r5, [pc, #132]	; (10003b64 <runtime_init+0xd4>)
10003ae0:	4f21      	ldr	r7, [pc, #132]	; (10003b68 <runtime_init+0xd8>)
            hw_clear_alias(padsbank0_hw)->io[28] = hw_clear_alias(padsbank0_hw)->io[29] = PADS_BANK0_GPIO0_IE_BITS;
10003ae2:	679a      	str	r2, [r3, #120]	; 0x78
10003ae4:	675a      	str	r2, [r3, #116]	; 0x74
    hw_clear_alias(padsbank0_hw)->io[26] = hw_clear_alias(padsbank0_hw)->io[27] =
10003ae6:	671a      	str	r2, [r3, #112]	; 0x70
10003ae8:	66da      	str	r2, [r3, #108]	; 0x6c
    for (mutex_t *m = &__mutex_array_start; m < &__mutex_array_end; m++) {
10003aea:	42bd      	cmp	r5, r7
10003aec:	d20b      	bcs.n	10003b06 <runtime_init+0x76>
10003aee:	2600      	movs	r6, #0
10003af0:	3f01      	subs	r7, #1
10003af2:	1b7f      	subs	r7, r7, r5
10003af4:	08ff      	lsrs	r7, r7, #3
        mutex_init(m);
10003af6:	0028      	movs	r0, r5
10003af8:	f7fe f9c2 	bl	10001e80 <mutex_init>
    for (mutex_t *m = &__mutex_array_start; m < &__mutex_array_end; m++) {
10003afc:	3508      	adds	r5, #8
10003afe:	0033      	movs	r3, r6
10003b00:	3601      	adds	r6, #1
10003b02:	42bb      	cmp	r3, r7
10003b04:	d1f7      	bne.n	10003af6 <runtime_init+0x66>
    }

#if !(PICO_NO_RAM_VECTOR_TABLE || PICO_NO_FLASH)
    __builtin_memcpy(ram_vector_table, (uint32_t *) scb_hw->vtor, sizeof(ram_vector_table));
10003b06:	4e19      	ldr	r6, [pc, #100]	; (10003b6c <runtime_init+0xdc>)
10003b08:	4d19      	ldr	r5, [pc, #100]	; (10003b70 <runtime_init+0xe0>)
10003b0a:	22c0      	movs	r2, #192	; 0xc0
10003b0c:	68a9      	ldr	r1, [r5, #8]
10003b0e:	0030      	movs	r0, r6
10003b10:	f7fd fbca 	bl	100012a8 <__wrap___aeabi_memcpy>
    scb_hw->vtor = (intptr_t) ram_vector_table;
10003b14:	60ae      	str	r6, [r5, #8]
    // install core0 stack guard
    extern char __StackBottom;
    runtime_install_stack_guard(&__StackBottom);
#endif

    spin_locks_reset();
10003b16:	f000 fc21 	bl	1000435c <spin_locks_reset>
    irq_init_priorities();
10003b1a:	f7fe f931 	bl	10001d80 <irq_init_priorities>
    alarm_pool_init_default();
10003b1e:	f000 fe67 	bl	100047f0 <alarm_pool_init_default>
    extern void (*__init_array_end)();

    // Call each function in the list.
    // We have to take the address of the symbols, as __init_array_start *is*
    // the first function pointer, not the address of it.
    for (void (**p)() = &__init_array_start; p < &__init_array_end; ++p) {
10003b22:	4d14      	ldr	r5, [pc, #80]	; (10003b74 <runtime_init+0xe4>)
10003b24:	4e14      	ldr	r6, [pc, #80]	; (10003b78 <runtime_init+0xe8>)
10003b26:	42b5      	cmp	r5, r6
10003b28:	d208      	bcs.n	10003b3c <runtime_init+0xac>
10003b2a:	3e01      	subs	r6, #1
10003b2c:	1b76      	subs	r6, r6, r5
10003b2e:	08b6      	lsrs	r6, r6, #2
        (*p)();
10003b30:	cd08      	ldmia	r5!, {r3}
10003b32:	4798      	blx	r3
    for (void (**p)() = &__init_array_start; p < &__init_array_end; ++p) {
10003b34:	0023      	movs	r3, r4
10003b36:	3401      	adds	r4, #1
10003b38:	429e      	cmp	r6, r3
10003b3a:	d1f9      	bne.n	10003b30 <runtime_init+0xa0>
    }

}
10003b3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10003b3e:	46c0      	nop			; (mov r8, r8)
10003b40:	ffffcdbf 	.word	0xffffcdbf
10003b44:	4000e000 	.word	0x4000e000
10003b48:	4000c000 	.word	0x4000c000
10003b4c:	003c7ffe 	.word	0x003c7ffe
10003b50:	4000f000 	.word	0x4000f000
10003b54:	20002a38 	.word	0x20002a38
10003b58:	20002a48 	.word	0x20002a48
10003b5c:	01ffffff 	.word	0x01ffffff
10003b60:	4001f000 	.word	0x4001f000
10003b64:	20002a30 	.word	0x20002a30
10003b68:	20002a38 	.word	0x20002a38
10003b6c:	20000000 	.word	0x20000000
10003b70:	e000ed00 	.word	0xe000ed00
10003b74:	20002a48 	.word	0x20002a48
10003b78:	20002a50 	.word	0x20002a50

10003b7c <_sbrk>:
void *_sbrk(int incr) {
    extern char end; /* Set by linker.  */
    static char *heap_end;
    char *prev_heap_end;

    if (heap_end == 0)
10003b7c:	4a09      	ldr	r2, [pc, #36]	; (10003ba4 <_sbrk+0x28>)
void *_sbrk(int incr) {
10003b7e:	0003      	movs	r3, r0
    if (heap_end == 0)
10003b80:	6810      	ldr	r0, [r2, #0]
10003b82:	2800      	cmp	r0, #0
10003b84:	d005      	beq.n	10003b92 <_sbrk+0x16>
        heap_end = &end;

    prev_heap_end = heap_end;
    char *next_heap_end = heap_end + incr;

    if (__builtin_expect(next_heap_end >= (&__StackLimit), false)) {
10003b86:	4908      	ldr	r1, [pc, #32]	; (10003ba8 <_sbrk+0x2c>)
    char *next_heap_end = heap_end + incr;
10003b88:	18c3      	adds	r3, r0, r3
    if (__builtin_expect(next_heap_end >= (&__StackLimit), false)) {
10003b8a:	428b      	cmp	r3, r1
10003b8c:	d207      	bcs.n	10003b9e <_sbrk+0x22>
#else
        return (char *) -1;
#endif
    }

    heap_end = next_heap_end;
10003b8e:	6013      	str	r3, [r2, #0]
    return (void *) prev_heap_end;
}
10003b90:	4770      	bx	lr
        heap_end = &end;
10003b92:	4806      	ldr	r0, [pc, #24]	; (10003bac <_sbrk+0x30>)
    if (__builtin_expect(next_heap_end >= (&__StackLimit), false)) {
10003b94:	4904      	ldr	r1, [pc, #16]	; (10003ba8 <_sbrk+0x2c>)
    char *next_heap_end = heap_end + incr;
10003b96:	18c3      	adds	r3, r0, r3
        heap_end = &end;
10003b98:	6010      	str	r0, [r2, #0]
    if (__builtin_expect(next_heap_end >= (&__StackLimit), false)) {
10003b9a:	428b      	cmp	r3, r1
10003b9c:	d3f7      	bcc.n	10003b8e <_sbrk+0x12>
        return (char *) -1;
10003b9e:	2001      	movs	r0, #1
10003ba0:	4240      	negs	r0, r0
10003ba2:	e7f5      	b.n	10003b90 <_sbrk+0x14>
10003ba4:	200394f4 	.word	0x200394f4
10003ba8:	20040000 	.word	0x20040000
10003bac:	20039bc0 	.word	0x20039bc0

10003bb0 <exit>:
    __asm__("bkpt #0");
10003bb0:	be00      	bkpt	0x0000
10003bb2:	e7fd      	b.n	10003bb0 <exit>

10003bb4 <panic>:
//  right now, print mutex may be uninitialised (in which case it deadlocks - although after printing "PANIC")
//  more importantly there may be no stdout/UART initialized yet
// todo we may want to think about where we print panic messages to; writing to USB appears to work
//  though it doesn't seem like we can expect it to... fine for now
//
void __attribute__((noreturn)) __printflike(1, 0) panic(const char *fmt, ...) {
10003bb4:	b40f      	push	{r0, r1, r2, r3}
10003bb6:	b500      	push	{lr}
    puts("\n*** PANIC ***\n");
10003bb8:	4808      	ldr	r0, [pc, #32]	; (10003bdc <panic+0x28>)
void __attribute__((noreturn)) __printflike(1, 0) panic(const char *fmt, ...) {
10003bba:	b083      	sub	sp, #12
    puts("\n*** PANIC ***\n");
10003bbc:	f000 f92e 	bl	10003e1c <__wrap_puts>
    if (fmt) {
10003bc0:	9b04      	ldr	r3, [sp, #16]
10003bc2:	2b00      	cmp	r3, #0
10003bc4:	d007      	beq.n	10003bd6 <panic+0x22>
#if PICO_PRINTF_NONE
        puts(fmt);
#else
        va_list args;
        va_start(args, fmt);
10003bc6:	a905      	add	r1, sp, #20
#if PICO_PRINTF_ALWAYS_INCLUDED
        vprintf(fmt, args);
#else
        weak_raw_vprintf(fmt, args);
10003bc8:	0018      	movs	r0, r3
        va_start(args, fmt);
10003bca:	9101      	str	r1, [sp, #4]
        weak_raw_vprintf(fmt, args);
10003bcc:	f7ff ff48 	bl	10003a60 <weak_raw_vprintf>
#endif
        va_end(args);
        puts("\n");
10003bd0:	4803      	ldr	r0, [pc, #12]	; (10003be0 <panic+0x2c>)
10003bd2:	f000 f923 	bl	10003e1c <__wrap_puts>
10003bd6:	be00      	bkpt	0x0000
10003bd8:	e7fd      	b.n	10003bd6 <panic+0x22>
10003bda:	46c0      	nop			; (mov r8, r8)
10003bdc:	10009a48 	.word	0x10009a48
10003be0:	10009a58 	.word	0x10009a58

10003be4 <hard_assertion_failure>:
    }

    _exit(1);
}

void hard_assertion_failure(void) {
10003be4:	b510      	push	{r4, lr}
    panic("Hard assert");
10003be6:	4801      	ldr	r0, [pc, #4]	; (10003bec <hard_assertion_failure+0x8>)
10003be8:	f7ff ffe4 	bl	10003bb4 <panic>
10003bec:	10009a5c 	.word	0x10009a5c

10003bf0 <stdio_out_chars_crlf.part.0>:
}
static void print_serialize_end() {
}
#endif

static void stdio_out_chars_crlf(stdio_driver_t *driver, const char *s, int len) {
10003bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
10003bf2:	4646      	mov	r6, r8
10003bf4:	464f      	mov	r7, r9
10003bf6:	46d6      	mov	lr, sl
10003bf8:	4680      	mov	r8, r0
10003bfa:	b5c0      	push	{r6, r7, lr}
10003bfc:	000e      	movs	r6, r1
10003bfe:	1e17      	subs	r7, r2, #0
        driver->out_chars(s, len);
        return;
    }
    int first_of_chunk = 0;
    static const char crlf_str[] = {'\r', '\n'};
    for (int i = 0; i < len; i++) {
10003c00:	dd3f      	ble.n	10003c82 <stdio_out_chars_crlf.part.0+0x92>
        bool prev_char_was_cr = i > 0 ? s[i - 1] == '\r' : driver->last_ended_with_cr;
10003c02:	1e4b      	subs	r3, r1, #1
10003c04:	4699      	mov	r9, r3
        if (s[i] == '\n' && !prev_char_was_cr) {
            if (i > first_of_chunk) {
                driver->out_chars(&s[first_of_chunk], i - first_of_chunk);
            }
            driver->out_chars(crlf_str, 2);
10003c06:	4b21      	ldr	r3, [pc, #132]	; (10003c8c <stdio_out_chars_crlf.part.0+0x9c>)
    for (int i = 0; i < len; i++) {
10003c08:	2501      	movs	r5, #1
10003c0a:	2400      	movs	r4, #0
    int first_of_chunk = 0;
10003c0c:	2000      	movs	r0, #0
            driver->out_chars(crlf_str, 2);
10003c0e:	469a      	mov	sl, r3
10003c10:	e00d      	b.n	10003c2e <stdio_out_chars_crlf.part.0+0x3e>
        bool prev_char_was_cr = i > 0 ? s[i - 1] == '\r' : driver->last_ended_with_cr;
10003c12:	464b      	mov	r3, r9
10003c14:	5d1b      	ldrb	r3, [r3, r4]
10003c16:	3b0d      	subs	r3, #13
10003c18:	425a      	negs	r2, r3
10003c1a:	4153      	adcs	r3, r2
        if (s[i] == '\n' && !prev_char_was_cr) {
10003c1c:	5d32      	ldrb	r2, [r6, r4]
        bool prev_char_was_cr = i > 0 ? s[i - 1] == '\r' : driver->last_ended_with_cr;
10003c1e:	b2db      	uxtb	r3, r3
        if (s[i] == '\n' && !prev_char_was_cr) {
10003c20:	2a0a      	cmp	r2, #10
10003c22:	d00b      	beq.n	10003c3c <stdio_out_chars_crlf.part.0+0x4c>
            first_of_chunk = i + 1;
10003c24:	002b      	movs	r3, r5
    for (int i = 0; i < len; i++) {
10003c26:	3401      	adds	r4, #1
10003c28:	3501      	adds	r5, #1
10003c2a:	429f      	cmp	r7, r3
10003c2c:	dd1a      	ble.n	10003c64 <stdio_out_chars_crlf.part.0+0x74>
        bool prev_char_was_cr = i > 0 ? s[i - 1] == '\r' : driver->last_ended_with_cr;
10003c2e:	2c00      	cmp	r4, #0
10003c30:	d1ef      	bne.n	10003c12 <stdio_out_chars_crlf.part.0+0x22>
10003c32:	4643      	mov	r3, r8
        if (s[i] == '\n' && !prev_char_was_cr) {
10003c34:	5d32      	ldrb	r2, [r6, r4]
        bool prev_char_was_cr = i > 0 ? s[i - 1] == '\r' : driver->last_ended_with_cr;
10003c36:	7c1b      	ldrb	r3, [r3, #16]
        if (s[i] == '\n' && !prev_char_was_cr) {
10003c38:	2a0a      	cmp	r2, #10
10003c3a:	d1f3      	bne.n	10003c24 <stdio_out_chars_crlf.part.0+0x34>
10003c3c:	2b00      	cmp	r3, #0
10003c3e:	d1f1      	bne.n	10003c24 <stdio_out_chars_crlf.part.0+0x34>
            if (i > first_of_chunk) {
10003c40:	42a0      	cmp	r0, r4
10003c42:	da04      	bge.n	10003c4e <stdio_out_chars_crlf.part.0+0x5e>
                driver->out_chars(&s[first_of_chunk], i - first_of_chunk);
10003c44:	4643      	mov	r3, r8
10003c46:	1a21      	subs	r1, r4, r0
10003c48:	681b      	ldr	r3, [r3, #0]
10003c4a:	1830      	adds	r0, r6, r0
10003c4c:	4798      	blx	r3
            driver->out_chars(crlf_str, 2);
10003c4e:	4643      	mov	r3, r8
10003c50:	4650      	mov	r0, sl
10003c52:	681b      	ldr	r3, [r3, #0]
10003c54:	2102      	movs	r1, #2
10003c56:	4798      	blx	r3
    for (int i = 0; i < len; i++) {
10003c58:	3401      	adds	r4, #1
            first_of_chunk = i + 1;
10003c5a:	0028      	movs	r0, r5
10003c5c:	002b      	movs	r3, r5
    for (int i = 0; i < len; i++) {
10003c5e:	3501      	adds	r5, #1
10003c60:	429f      	cmp	r7, r3
10003c62:	dce4      	bgt.n	10003c2e <stdio_out_chars_crlf.part.0+0x3e>
        }
    }
    if (first_of_chunk < len) {
10003c64:	4287      	cmp	r7, r0
10003c66:	dd04      	ble.n	10003c72 <stdio_out_chars_crlf.part.0+0x82>
        driver->out_chars(&s[first_of_chunk], len - first_of_chunk);
10003c68:	4643      	mov	r3, r8
10003c6a:	1a39      	subs	r1, r7, r0
10003c6c:	681b      	ldr	r3, [r3, #0]
10003c6e:	1830      	adds	r0, r6, r0
10003c70:	4798      	blx	r3
    }
    if (len > 0) {
        driver->last_ended_with_cr = s[len - 1] == '\r';
10003c72:	19f6      	adds	r6, r6, r7
10003c74:	3e01      	subs	r6, #1
10003c76:	7833      	ldrb	r3, [r6, #0]
10003c78:	3b0d      	subs	r3, #13
10003c7a:	425a      	negs	r2, r3
10003c7c:	4153      	adcs	r3, r2
10003c7e:	4642      	mov	r2, r8
10003c80:	7413      	strb	r3, [r2, #16]
    }
#else
    driver->out_chars(s, len);
#endif
}
10003c82:	bce0      	pop	{r5, r6, r7}
10003c84:	46ba      	mov	sl, r7
10003c86:	46b1      	mov	r9, r6
10003c88:	46a8      	mov	r8, r5
10003c8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
10003c8c:	10009a68 	.word	0x10009a68

10003c90 <stdio_buffered_printer>:
        }
        buffer->used = 0;
    }
}

static void stdio_buffered_printer(char c, void *arg) {
10003c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10003c92:	46ce      	mov	lr, r9
10003c94:	4647      	mov	r7, r8
10003c96:	000d      	movs	r5, r1
    stdio_stack_buffer_t *buffer = (stdio_stack_buffer_t *)arg;
    if (buffer->used == PICO_STDIO_STACK_BUFFER_SIZE) {
10003c98:	6809      	ldr	r1, [r1, #0]
static void stdio_buffered_printer(char c, void *arg) {
10003c9a:	0006      	movs	r6, r0
10003c9c:	b580      	push	{r7, lr}
    if (buffer->used == PICO_STDIO_STACK_BUFFER_SIZE) {
10003c9e:	2980      	cmp	r1, #128	; 0x80
10003ca0:	d007      	beq.n	10003cb2 <stdio_buffered_printer+0x22>
        stdio_stack_buffer_flush(buffer);
    }
    buffer->buf[buffer->used++] = c;
10003ca2:	1c4b      	adds	r3, r1, #1
10003ca4:	602b      	str	r3, [r5, #0]
10003ca6:	186d      	adds	r5, r5, r1
10003ca8:	712e      	strb	r6, [r5, #4]
}
10003caa:	bcc0      	pop	{r6, r7}
10003cac:	46b9      	mov	r9, r7
10003cae:	46b0      	mov	r8, r6
10003cb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (stdio_driver_t *d = drivers; d; d = d->next) {
10003cb2:	4b13      	ldr	r3, [pc, #76]	; (10003d00 <stdio_buffered_printer+0x70>)
10003cb4:	681c      	ldr	r4, [r3, #0]
10003cb6:	2c00      	cmp	r4, #0
10003cb8:	d01b      	beq.n	10003cf2 <stdio_buffered_printer+0x62>
            if (filter && filter != d) continue;
10003cba:	4b12      	ldr	r3, [pc, #72]	; (10003d04 <stdio_buffered_printer+0x74>)
10003cbc:	4698      	mov	r8, r3
            stdio_out_chars_crlf(d, buffer->buf, buffer->used);
10003cbe:	1d2b      	adds	r3, r5, #4
10003cc0:	4699      	mov	r9, r3
10003cc2:	e002      	b.n	10003cca <stdio_buffered_printer+0x3a>
        for (stdio_driver_t *d = drivers; d; d = d->next) {
10003cc4:	68e4      	ldr	r4, [r4, #12]
10003cc6:	2c00      	cmp	r4, #0
10003cc8:	d013      	beq.n	10003cf2 <stdio_buffered_printer+0x62>
            if (!d->out_chars) continue;
10003cca:	6827      	ldr	r7, [r4, #0]
10003ccc:	2f00      	cmp	r7, #0
10003cce:	d0f9      	beq.n	10003cc4 <stdio_buffered_printer+0x34>
            if (filter && filter != d) continue;
10003cd0:	4643      	mov	r3, r8
10003cd2:	681b      	ldr	r3, [r3, #0]
10003cd4:	2b00      	cmp	r3, #0
10003cd6:	d001      	beq.n	10003cdc <stdio_buffered_printer+0x4c>
10003cd8:	429c      	cmp	r4, r3
10003cda:	d1f3      	bne.n	10003cc4 <stdio_buffered_printer+0x34>
    if (!driver->crlf_enabled) {
10003cdc:	7c63      	ldrb	r3, [r4, #17]
            stdio_out_chars_crlf(d, buffer->buf, buffer->used);
10003cde:	682a      	ldr	r2, [r5, #0]
    if (!driver->crlf_enabled) {
10003ce0:	2b00      	cmp	r3, #0
10003ce2:	d009      	beq.n	10003cf8 <stdio_buffered_printer+0x68>
10003ce4:	0020      	movs	r0, r4
10003ce6:	4649      	mov	r1, r9
10003ce8:	f7ff ff82 	bl	10003bf0 <stdio_out_chars_crlf.part.0>
        for (stdio_driver_t *d = drivers; d; d = d->next) {
10003cec:	68e4      	ldr	r4, [r4, #12]
10003cee:	2c00      	cmp	r4, #0
10003cf0:	d1eb      	bne.n	10003cca <stdio_buffered_printer+0x3a>
}
10003cf2:	2301      	movs	r3, #1
10003cf4:	2100      	movs	r1, #0
10003cf6:	e7d5      	b.n	10003ca4 <stdio_buffered_printer+0x14>
        driver->out_chars(s, len);
10003cf8:	0011      	movs	r1, r2
10003cfa:	4648      	mov	r0, r9
10003cfc:	47b8      	blx	r7
        return;
10003cfe:	e7e1      	b.n	10003cc4 <stdio_buffered_printer+0x34>
10003d00:	200394e8 	.word	0x200394e8
10003d04:	200394f0 	.word	0x200394f0

10003d08 <stdio_put_string.isra.0>:
static bool stdio_put_string(const char *s, int len, bool newline) {
10003d08:	b5f0      	push	{r4, r5, r6, r7, lr}
10003d0a:	4657      	mov	r7, sl
10003d0c:	4645      	mov	r5, r8
10003d0e:	46de      	mov	lr, fp
10003d10:	464e      	mov	r6, r9
 *  \ingroup hardware_sync
 *
 * \return The core number the call was made from
 */
static inline uint get_core_num() {
    return (*(uint32_t *) (SIO_BASE + SIO_CPUID_OFFSET));
10003d12:	23d0      	movs	r3, #208	; 0xd0
10003d14:	b5e0      	push	{r5, r6, r7, lr}
10003d16:	061b      	lsls	r3, r3, #24
10003d18:	681c      	ldr	r4, [r3, #0]
    if (!mutex_try_enter(&print_mutex, &owner)) {
10003d1a:	4b35      	ldr	r3, [pc, #212]	; (10003df0 <stdio_put_string.isra.0+0xe8>)
static bool stdio_put_string(const char *s, int len, bool newline) {
10003d1c:	b083      	sub	sp, #12
10003d1e:	0007      	movs	r7, r0
10003d20:	000d      	movs	r5, r1
    if (!mutex_try_enter(&print_mutex, &owner)) {
10003d22:	0018      	movs	r0, r3
10003d24:	a901      	add	r1, sp, #4
static bool stdio_put_string(const char *s, int len, bool newline) {
10003d26:	4690      	mov	r8, r2
    if (!mutex_try_enter(&print_mutex, &owner)) {
10003d28:	469a      	mov	sl, r3
10003d2a:	f005 fd01 	bl	10009730 <__mutex_try_enter_veneer>
10003d2e:	4681      	mov	r9, r0
10003d30:	2800      	cmp	r0, #0
10003d32:	d107      	bne.n	10003d44 <stdio_put_string.isra.0+0x3c>
        if (owner == core_num) {
10003d34:	9b01      	ldr	r3, [sp, #4]
10003d36:	429c      	cmp	r4, r3
10003d38:	d004      	beq.n	10003d44 <stdio_put_string.isra.0+0x3c>
        mutex_enter_blocking(&print_mutex);
10003d3a:	4650      	mov	r0, sl
10003d3c:	f005 fd10 	bl	10009760 <__mutex_enter_blocking_veneer>
    return true;
10003d40:	2301      	movs	r3, #1
10003d42:	4699      	mov	r9, r3
    if (len == -1) len = strlen(s);
10003d44:	1c6b      	adds	r3, r5, #1
10003d46:	d103      	bne.n	10003d50 <stdio_put_string.isra.0+0x48>
10003d48:	0038      	movs	r0, r7
10003d4a:	f005 fb6d 	bl	10009428 <strlen>
10003d4e:	0005      	movs	r5, r0
    for (stdio_driver_t *driver = drivers; driver; driver = driver->next) {
10003d50:	4b28      	ldr	r3, [pc, #160]	; (10003df4 <stdio_put_string.isra.0+0xec>)
10003d52:	681c      	ldr	r4, [r3, #0]
10003d54:	2c00      	cmp	r4, #0
10003d56:	d02f      	beq.n	10003db8 <stdio_put_string.isra.0+0xb0>
            const char c = '\n';
10003d58:	230a      	movs	r3, #10
        if (filter && filter != driver) continue;
10003d5a:	4e27      	ldr	r6, [pc, #156]	; (10003df8 <stdio_put_string.isra.0+0xf0>)
            const char c = '\n';
10003d5c:	469b      	mov	fp, r3
10003d5e:	e002      	b.n	10003d66 <stdio_put_string.isra.0+0x5e>
    for (stdio_driver_t *driver = drivers; driver; driver = driver->next) {
10003d60:	68e4      	ldr	r4, [r4, #12]
10003d62:	2c00      	cmp	r4, #0
10003d64:	d028      	beq.n	10003db8 <stdio_put_string.isra.0+0xb0>
        if (!driver->out_chars) continue;
10003d66:	6822      	ldr	r2, [r4, #0]
10003d68:	2a00      	cmp	r2, #0
10003d6a:	d0f9      	beq.n	10003d60 <stdio_put_string.isra.0+0x58>
        if (filter && filter != driver) continue;
10003d6c:	6833      	ldr	r3, [r6, #0]
10003d6e:	2b00      	cmp	r3, #0
10003d70:	d001      	beq.n	10003d76 <stdio_put_string.isra.0+0x6e>
10003d72:	42a3      	cmp	r3, r4
10003d74:	d1f4      	bne.n	10003d60 <stdio_put_string.isra.0+0x58>
    if (!driver->crlf_enabled) {
10003d76:	7c63      	ldrb	r3, [r4, #17]
10003d78:	2b00      	cmp	r3, #0
10003d7a:	d027      	beq.n	10003dcc <stdio_put_string.isra.0+0xc4>
10003d7c:	002a      	movs	r2, r5
10003d7e:	0039      	movs	r1, r7
10003d80:	0020      	movs	r0, r4
10003d82:	f7ff ff35 	bl	10003bf0 <stdio_out_chars_crlf.part.0>
        if (newline) {
10003d86:	4643      	mov	r3, r8
10003d88:	2b00      	cmp	r3, #0
10003d8a:	d0e9      	beq.n	10003d60 <stdio_put_string.isra.0+0x58>
            const char c = '\n';
10003d8c:	466b      	mov	r3, sp
10003d8e:	465a      	mov	r2, fp
10003d90:	711a      	strb	r2, [r3, #4]
    if (!driver->crlf_enabled) {
10003d92:	7c63      	ldrb	r3, [r4, #17]
10003d94:	2b00      	cmp	r3, #0
10003d96:	d01d      	beq.n	10003dd4 <stdio_put_string.isra.0+0xcc>
        if (s[i] == '\n' && !prev_char_was_cr) {
10003d98:	7c23      	ldrb	r3, [r4, #16]
10003d9a:	2b00      	cmp	r3, #0
10003d9c:	d023      	beq.n	10003de6 <stdio_put_string.isra.0+0xde>
        driver->out_chars(&s[first_of_chunk], len - first_of_chunk);
10003d9e:	2101      	movs	r1, #1
10003da0:	6823      	ldr	r3, [r4, #0]
10003da2:	a801      	add	r0, sp, #4
10003da4:	4798      	blx	r3
        driver->last_ended_with_cr = s[len - 1] == '\r';
10003da6:	466b      	mov	r3, sp
10003da8:	791b      	ldrb	r3, [r3, #4]
10003daa:	3b0d      	subs	r3, #13
10003dac:	425a      	negs	r2, r3
10003dae:	4153      	adcs	r3, r2
10003db0:	7423      	strb	r3, [r4, #16]
    for (stdio_driver_t *driver = drivers; driver; driver = driver->next) {
10003db2:	68e4      	ldr	r4, [r4, #12]
10003db4:	2c00      	cmp	r4, #0
10003db6:	d1d6      	bne.n	10003d66 <stdio_put_string.isra.0+0x5e>
    if (serialzed) {
10003db8:	464b      	mov	r3, r9
10003dba:	2b00      	cmp	r3, #0
10003dbc:	d10f      	bne.n	10003dde <stdio_put_string.isra.0+0xd6>
}
10003dbe:	b003      	add	sp, #12
10003dc0:	bcf0      	pop	{r4, r5, r6, r7}
10003dc2:	46bb      	mov	fp, r7
10003dc4:	46b2      	mov	sl, r6
10003dc6:	46a9      	mov	r9, r5
10003dc8:	46a0      	mov	r8, r4
10003dca:	bdf0      	pop	{r4, r5, r6, r7, pc}
        driver->out_chars(s, len);
10003dcc:	0029      	movs	r1, r5
10003dce:	0038      	movs	r0, r7
10003dd0:	4790      	blx	r2
        return;
10003dd2:	e7d8      	b.n	10003d86 <stdio_put_string.isra.0+0x7e>
        driver->out_chars(s, len);
10003dd4:	2101      	movs	r1, #1
10003dd6:	6823      	ldr	r3, [r4, #0]
10003dd8:	a801      	add	r0, sp, #4
10003dda:	4798      	blx	r3
        return;
10003ddc:	e7c0      	b.n	10003d60 <stdio_put_string.isra.0+0x58>
    mutex_exit(&print_mutex);
10003dde:	4650      	mov	r0, sl
10003de0:	f005 fc8e 	bl	10009700 <__mutex_exit_veneer>
    return len;
10003de4:	e7eb      	b.n	10003dbe <stdio_put_string.isra.0+0xb6>
            driver->out_chars(crlf_str, 2);
10003de6:	2102      	movs	r1, #2
10003de8:	4804      	ldr	r0, [pc, #16]	; (10003dfc <stdio_put_string.isra.0+0xf4>)
10003dea:	6823      	ldr	r3, [r4, #0]
10003dec:	4798      	blx	r3
    if (first_of_chunk < len) {
10003dee:	e7da      	b.n	10003da6 <stdio_put_string.isra.0+0x9e>
10003df0:	20002a30 	.word	0x20002a30
10003df4:	200394e8 	.word	0x200394e8
10003df8:	200394f0 	.word	0x200394f0
10003dfc:	10009a68 	.word	0x10009a68

10003e00 <__wrap_putchar>:
int WRAPPER_FUNC(putchar)(int c) {
10003e00:	b510      	push	{r4, lr}
10003e02:	b082      	sub	sp, #8
    char cc = c;
10003e04:	466b      	mov	r3, sp
int WRAPPER_FUNC(putchar)(int c) {
10003e06:	0004      	movs	r4, r0
    stdio_put_string(&cc, 1, false);
10003e08:	2200      	movs	r2, #0
    char cc = c;
10003e0a:	1dd8      	adds	r0, r3, #7
    stdio_put_string(&cc, 1, false);
10003e0c:	2101      	movs	r1, #1
    char cc = c;
10003e0e:	7004      	strb	r4, [r0, #0]
    stdio_put_string(&cc, 1, false);
10003e10:	f7ff ff7a 	bl	10003d08 <stdio_put_string.isra.0>
}
10003e14:	0020      	movs	r0, r4
10003e16:	b002      	add	sp, #8
10003e18:	bd10      	pop	{r4, pc}
10003e1a:	46c0      	nop			; (mov r8, r8)

10003e1c <__wrap_puts>:
int WRAPPER_FUNC(puts)(const char *s) {
10003e1c:	b570      	push	{r4, r5, r6, lr}
10003e1e:	0004      	movs	r4, r0
    int len = strlen(s);
10003e20:	f005 fb02 	bl	10009428 <strlen>
    stdio_put_string(s, len, true);
10003e24:	2201      	movs	r2, #1
10003e26:	0001      	movs	r1, r0
    int len = strlen(s);
10003e28:	0005      	movs	r5, r0
    stdio_put_string(s, len, true);
10003e2a:	0020      	movs	r0, r4
10003e2c:	f7ff ff6c 	bl	10003d08 <stdio_put_string.isra.0>
    for (stdio_driver_t *d = drivers; d; d = d->next) {
10003e30:	4b08      	ldr	r3, [pc, #32]	; (10003e54 <__wrap_puts+0x38>)
10003e32:	681c      	ldr	r4, [r3, #0]
10003e34:	2c00      	cmp	r4, #0
10003e36:	d006      	beq.n	10003e46 <__wrap_puts+0x2a>
        if (d->out_flush) d->out_flush();
10003e38:	6863      	ldr	r3, [r4, #4]
10003e3a:	2b00      	cmp	r3, #0
10003e3c:	d005      	beq.n	10003e4a <__wrap_puts+0x2e>
10003e3e:	4798      	blx	r3
    for (stdio_driver_t *d = drivers; d; d = d->next) {
10003e40:	68e4      	ldr	r4, [r4, #12]
10003e42:	2c00      	cmp	r4, #0
10003e44:	d1f8      	bne.n	10003e38 <__wrap_puts+0x1c>
}
10003e46:	0028      	movs	r0, r5
10003e48:	bd70      	pop	{r4, r5, r6, pc}
    for (stdio_driver_t *d = drivers; d; d = d->next) {
10003e4a:	68e4      	ldr	r4, [r4, #12]
10003e4c:	2c00      	cmp	r4, #0
10003e4e:	d1f3      	bne.n	10003e38 <__wrap_puts+0x1c>
10003e50:	e7f9      	b.n	10003e46 <__wrap_puts+0x2a>
10003e52:	46c0      	nop			; (mov r8, r8)
10003e54:	200394e8 	.word	0x200394e8

10003e58 <stdio_set_driver_enabled>:
    stdio_driver_t *prev = drivers;
10003e58:	4a0d      	ldr	r2, [pc, #52]	; (10003e90 <stdio_set_driver_enabled+0x38>)
10003e5a:	6813      	ldr	r3, [r2, #0]
    for (stdio_driver_t *d = drivers; d; d = d->next) {
10003e5c:	2b00      	cmp	r3, #0
10003e5e:	d013      	beq.n	10003e88 <stdio_set_driver_enabled+0x30>
        if (d == driver) {
10003e60:	4283      	cmp	r3, r0
10003e62:	d102      	bne.n	10003e6a <stdio_set_driver_enabled+0x12>
10003e64:	e009      	b.n	10003e7a <stdio_set_driver_enabled+0x22>
10003e66:	4298      	cmp	r0, r3
10003e68:	d008      	beq.n	10003e7c <stdio_set_driver_enabled+0x24>
    for (stdio_driver_t *d = drivers; d; d = d->next) {
10003e6a:	001a      	movs	r2, r3
10003e6c:	68db      	ldr	r3, [r3, #12]
10003e6e:	2b00      	cmp	r3, #0
10003e70:	d1f9      	bne.n	10003e66 <stdio_set_driver_enabled+0xe>
    if (enable) {
10003e72:	2900      	cmp	r1, #0
10003e74:	d000      	beq.n	10003e78 <stdio_set_driver_enabled+0x20>
        if (prev) prev->next = driver;
10003e76:	60d0      	str	r0, [r2, #12]
}
10003e78:	4770      	bx	lr
        if (d == driver) {
10003e7a:	001a      	movs	r2, r3
            if (!enable) {
10003e7c:	2900      	cmp	r1, #0
10003e7e:	d1fb      	bne.n	10003e78 <stdio_set_driver_enabled+0x20>
                prev->next = d->next;
10003e80:	68db      	ldr	r3, [r3, #12]
10003e82:	60d3      	str	r3, [r2, #12]
                driver->next = NULL;
10003e84:	60c1      	str	r1, [r0, #12]
10003e86:	e7f7      	b.n	10003e78 <stdio_set_driver_enabled+0x20>
    if (enable) {
10003e88:	2900      	cmp	r1, #0
10003e8a:	d0f5      	beq.n	10003e78 <stdio_set_driver_enabled+0x20>
        else drivers = driver;
10003e8c:	6010      	str	r0, [r2, #0]
10003e8e:	e7f3      	b.n	10003e78 <stdio_set_driver_enabled+0x20>
10003e90:	200394e8 	.word	0x200394e8

10003e94 <__wrap_vprintf>:

int WRAPPER_FUNC(vprintf)(const char *format, va_list va) {
10003e94:	b5f0      	push	{r4, r5, r6, r7, lr}
10003e96:	4646      	mov	r6, r8
10003e98:	46d6      	mov	lr, sl
10003e9a:	464f      	mov	r7, r9
10003e9c:	23d0      	movs	r3, #208	; 0xd0
10003e9e:	b5c0      	push	{r6, r7, lr}
10003ea0:	061b      	lsls	r3, r3, #24
10003ea2:	681f      	ldr	r7, [r3, #0]
    if (!mutex_try_enter(&print_mutex, &owner)) {
10003ea4:	4b31      	ldr	r3, [pc, #196]	; (10003f6c <__wrap_vprintf+0xd8>)
int WRAPPER_FUNC(vprintf)(const char *format, va_list va) {
10003ea6:	b0a2      	sub	sp, #136	; 0x88
10003ea8:	0004      	movs	r4, r0
10003eaa:	000d      	movs	r5, r1
    if (!mutex_try_enter(&print_mutex, &owner)) {
10003eac:	0018      	movs	r0, r3
10003eae:	a901      	add	r1, sp, #4
10003eb0:	4698      	mov	r8, r3
10003eb2:	f005 fc3d 	bl	10009730 <__mutex_try_enter_veneer>
10003eb6:	1e06      	subs	r6, r0, #0
10003eb8:	d106      	bne.n	10003ec8 <__wrap_vprintf+0x34>
        if (owner == core_num) {
10003eba:	9b01      	ldr	r3, [sp, #4]
10003ebc:	429f      	cmp	r7, r3
10003ebe:	d003      	beq.n	10003ec8 <__wrap_vprintf+0x34>
        mutex_enter_blocking(&print_mutex);
10003ec0:	4640      	mov	r0, r8
10003ec2:	f005 fc4d 	bl	10009760 <__mutex_enter_blocking_veneer>
    return true;
10003ec6:	3601      	adds	r6, #1
        return 0;
#endif
    }
    int ret;
#if PICO_PRINTF_PICO
    struct stdio_stack_buffer buffer = {.used = 0};
10003ec8:	2284      	movs	r2, #132	; 0x84
10003eca:	2100      	movs	r1, #0
10003ecc:	a801      	add	r0, sp, #4
10003ece:	f7fd f9e5 	bl	1000129c <__wrap_memset>
    ret = vfctprintf(stdio_buffered_printer, &buffer, format, va);
10003ed2:	002b      	movs	r3, r5
10003ed4:	0022      	movs	r2, r4
10003ed6:	4826      	ldr	r0, [pc, #152]	; (10003f70 <__wrap_vprintf+0xdc>)
10003ed8:	a901      	add	r1, sp, #4
10003eda:	f7ff fdb1 	bl	10003a40 <vfctprintf>
    if (buffer->used) {
10003ede:	9b01      	ldr	r3, [sp, #4]
    ret = vfctprintf(stdio_buffered_printer, &buffer, format, va);
10003ee0:	0007      	movs	r7, r0
    if (buffer->used) {
10003ee2:	2b00      	cmp	r3, #0
10003ee4:	d115      	bne.n	10003f12 <__wrap_vprintf+0x7e>
    for (stdio_driver_t *d = drivers; d; d = d->next) {
10003ee6:	4b23      	ldr	r3, [pc, #140]	; (10003f74 <__wrap_vprintf+0xe0>)
10003ee8:	681c      	ldr	r4, [r3, #0]
10003eea:	2c00      	cmp	r4, #0
10003eec:	d006      	beq.n	10003efc <__wrap_vprintf+0x68>
        if (d->out_flush) d->out_flush();
10003eee:	6863      	ldr	r3, [r4, #4]
10003ef0:	2b00      	cmp	r3, #0
10003ef2:	d00c      	beq.n	10003f0e <__wrap_vprintf+0x7a>
10003ef4:	4798      	blx	r3
    for (stdio_driver_t *d = drivers; d; d = d->next) {
10003ef6:	68e4      	ldr	r4, [r4, #12]
10003ef8:	2c00      	cmp	r4, #0
10003efa:	d1f8      	bne.n	10003eee <__wrap_vprintf+0x5a>
    printf_none_assert();
#else
    extern int REAL_FUNC(vprintf)(const char *format, va_list va);
    ret = REAL_FUNC(vprintf)(format, va);
#endif
    if (serialzed) {
10003efc:	2e00      	cmp	r6, #0
10003efe:	d12f      	bne.n	10003f60 <__wrap_vprintf+0xcc>
        stdout_serialize_end();
    }
    return ret;
}
10003f00:	0038      	movs	r0, r7
10003f02:	b022      	add	sp, #136	; 0x88
10003f04:	bce0      	pop	{r5, r6, r7}
10003f06:	46ba      	mov	sl, r7
10003f08:	46b1      	mov	r9, r6
10003f0a:	46a8      	mov	r8, r5
10003f0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for (stdio_driver_t *d = drivers; d; d = d->next) {
10003f0e:	68e4      	ldr	r4, [r4, #12]
10003f10:	e7eb      	b.n	10003eea <__wrap_vprintf+0x56>
        for (stdio_driver_t *d = drivers; d; d = d->next) {
10003f12:	4b18      	ldr	r3, [pc, #96]	; (10003f74 <__wrap_vprintf+0xe0>)
10003f14:	681d      	ldr	r5, [r3, #0]
10003f16:	469a      	mov	sl, r3
10003f18:	2d00      	cmp	r5, #0
10003f1a:	d025      	beq.n	10003f68 <__wrap_vprintf+0xd4>
            if (filter && filter != d) continue;
10003f1c:	4b16      	ldr	r3, [pc, #88]	; (10003f78 <__wrap_vprintf+0xe4>)
10003f1e:	4699      	mov	r9, r3
10003f20:	e002      	b.n	10003f28 <__wrap_vprintf+0x94>
        for (stdio_driver_t *d = drivers; d; d = d->next) {
10003f22:	68ed      	ldr	r5, [r5, #12]
10003f24:	2d00      	cmp	r5, #0
10003f26:	d013      	beq.n	10003f50 <__wrap_vprintf+0xbc>
            if (!d->out_chars) continue;
10003f28:	682c      	ldr	r4, [r5, #0]
10003f2a:	2c00      	cmp	r4, #0
10003f2c:	d0f9      	beq.n	10003f22 <__wrap_vprintf+0x8e>
            if (filter && filter != d) continue;
10003f2e:	464b      	mov	r3, r9
10003f30:	681b      	ldr	r3, [r3, #0]
10003f32:	2b00      	cmp	r3, #0
10003f34:	d001      	beq.n	10003f3a <__wrap_vprintf+0xa6>
10003f36:	429d      	cmp	r5, r3
10003f38:	d1f3      	bne.n	10003f22 <__wrap_vprintf+0x8e>
    if (!driver->crlf_enabled) {
10003f3a:	7c6b      	ldrb	r3, [r5, #17]
            stdio_out_chars_crlf(d, buffer->buf, buffer->used);
10003f3c:	9a01      	ldr	r2, [sp, #4]
    if (!driver->crlf_enabled) {
10003f3e:	2b00      	cmp	r3, #0
10003f40:	d00a      	beq.n	10003f58 <__wrap_vprintf+0xc4>
10003f42:	0028      	movs	r0, r5
10003f44:	a902      	add	r1, sp, #8
10003f46:	f7ff fe53 	bl	10003bf0 <stdio_out_chars_crlf.part.0>
        for (stdio_driver_t *d = drivers; d; d = d->next) {
10003f4a:	68ed      	ldr	r5, [r5, #12]
10003f4c:	2d00      	cmp	r5, #0
10003f4e:	d1eb      	bne.n	10003f28 <__wrap_vprintf+0x94>
    for (stdio_driver_t *d = drivers; d; d = d->next) {
10003f50:	4653      	mov	r3, sl
        buffer->used = 0;
10003f52:	9501      	str	r5, [sp, #4]
    for (stdio_driver_t *d = drivers; d; d = d->next) {
10003f54:	681c      	ldr	r4, [r3, #0]
}
10003f56:	e7c8      	b.n	10003eea <__wrap_vprintf+0x56>
        driver->out_chars(s, len);
10003f58:	0011      	movs	r1, r2
10003f5a:	a802      	add	r0, sp, #8
10003f5c:	47a0      	blx	r4
        return;
10003f5e:	e7e0      	b.n	10003f22 <__wrap_vprintf+0x8e>
    mutex_exit(&print_mutex);
10003f60:	4640      	mov	r0, r8
10003f62:	f005 fbcd 	bl	10009700 <__mutex_exit_veneer>
    return ret;
10003f66:	e7cb      	b.n	10003f00 <__wrap_vprintf+0x6c>
        buffer->used = 0;
10003f68:	9501      	str	r5, [sp, #4]
    for (stdio_driver_t *d = drivers; d; d = d->next) {
10003f6a:	e7c7      	b.n	10003efc <__wrap_vprintf+0x68>
10003f6c:	20002a30 	.word	0x20002a30
10003f70:	10003c91 	.word	0x10003c91
10003f74:	200394e8 	.word	0x200394e8
10003f78:	200394f0 	.word	0x200394f0

10003f7c <__wrap_printf>:

int __printflike(1, 0) WRAPPER_FUNC(printf)(const char* format, ...)
{
10003f7c:	b40f      	push	{r0, r1, r2, r3}
10003f7e:	b500      	push	{lr}
10003f80:	b083      	sub	sp, #12
10003f82:	a904      	add	r1, sp, #16
10003f84:	c901      	ldmia	r1!, {r0}
    va_list va;
    va_start(va, format);
10003f86:	9101      	str	r1, [sp, #4]
    int ret = vprintf(format, va);
10003f88:	f7ff ff84 	bl	10003e94 <__wrap_vprintf>
    va_end(va);
    return ret;
}
10003f8c:	b003      	add	sp, #12
10003f8e:	bc08      	pop	{r3}
10003f90:	b004      	add	sp, #16
10003f92:	4718      	bx	r3

10003f94 <stdio_init_all>:

void stdio_init_all() {
10003f94:	b510      	push	{r4, lr}
#if PICO_STDIO_SEMIHOSTING
    stdio_semihosting_init();
#endif

#if PICO_STDIO_USB
    stdio_usb_init();
10003f96:	f000 f925 	bl	100041e4 <stdio_usb_init>
#endif
}
10003f9a:	bd10      	pop	{r4, pc}

10003f9c <getchar_timeout_us>:
        return PICO_ERROR_TIMEOUT;
    }
    return (uint8_t)buf[0];
}

int getchar_timeout_us(uint32_t timeout_us) {
10003f9c:	b5f0      	push	{r4, r5, r6, r7, lr}
10003f9e:	46d6      	mov	lr, sl
10003fa0:	464f      	mov	r7, r9
10003fa2:	4646      	mov	r6, r8
10003fa4:	b5c0      	push	{r6, r7, lr}
10003fa6:	b082      	sub	sp, #8
10003fa8:	0004      	movs	r4, r0
 * \sa sleep_until()
 * \sa time_us_64()
 */
static inline absolute_time_t get_absolute_time() {
    absolute_time_t t;
    update_us_since_boot(&t, time_us_64());
10003faa:	f000 fe59 	bl	10004c60 <time_us_64>
    char buf[1];
    int rc = stdio_get_until(buf, sizeof(buf), make_timeout_time_us(timeout_us));
10003fae:	0026      	movs	r6, r4
10003fb0:	0002      	movs	r2, r0
10003fb2:	000b      	movs	r3, r1
10003fb4:	2700      	movs	r7, #0
 * \return the timestamp representing the resulting time
 */
static inline absolute_time_t delayed_by_us(const absolute_time_t t, uint64_t us) {
    absolute_time_t t2;
    uint64_t base = to_us_since_boot(t);
    uint64_t delayed = base + us;
10003fb6:	18b6      	adds	r6, r6, r2
10003fb8:	415f      	adcs	r7, r3
    if (delayed < base) {
10003fba:	42b9      	cmp	r1, r7
10003fbc:	d831      	bhi.n	10004022 <getchar_timeout_us+0x86>
10003fbe:	d02e      	beq.n	1000401e <getchar_timeout_us+0x82>
 * \param t Absolute time to compare against current time
 * \return true if it is now after the specified timestamp
 */
static inline bool time_reached(absolute_time_t t) {
    uint64_t target = to_us_since_boot(t);
    uint32_t hi_target = target >> 32u;
10003fc0:	46b9      	mov	r9, r7
static int stdio_get_until(char *buf, int len, absolute_time_t until) {
10003fc2:	4b25      	ldr	r3, [pc, #148]	; (10004058 <getchar_timeout_us+0xbc>)
10003fc4:	4d25      	ldr	r5, [pc, #148]	; (1000405c <getchar_timeout_us+0xc0>)
10003fc6:	469a      	mov	sl, r3
        for (stdio_driver_t *driver = drivers; driver; driver = driver->next) {
10003fc8:	4653      	mov	r3, sl
10003fca:	681b      	ldr	r3, [r3, #0]
10003fcc:	4698      	mov	r8, r3
10003fce:	1e1c      	subs	r4, r3, #0
10003fd0:	d103      	bne.n	10003fda <getchar_timeout_us+0x3e>
10003fd2:	e03c      	b.n	1000404e <getchar_timeout_us+0xb2>
10003fd4:	68e4      	ldr	r4, [r4, #12]
10003fd6:	2c00      	cmp	r4, #0
10003fd8:	d014      	beq.n	10004004 <getchar_timeout_us+0x68>
            if (filter && filter != driver) continue;
10003fda:	682b      	ldr	r3, [r5, #0]
10003fdc:	2b00      	cmp	r3, #0
10003fde:	d001      	beq.n	10003fe4 <getchar_timeout_us+0x48>
10003fe0:	42a3      	cmp	r3, r4
10003fe2:	d1f7      	bne.n	10003fd4 <getchar_timeout_us+0x38>
            if (driver->in_chars) {
10003fe4:	68a3      	ldr	r3, [r4, #8]
10003fe6:	2b00      	cmp	r3, #0
10003fe8:	d0f4      	beq.n	10003fd4 <getchar_timeout_us+0x38>
                int read = driver->in_chars(buf, len);
10003fea:	2101      	movs	r1, #1
10003fec:	a801      	add	r0, sp, #4
10003fee:	4798      	blx	r3
                if (read > 0) {
10003ff0:	2800      	cmp	r0, #0
10003ff2:	ddef      	ble.n	10003fd4 <getchar_timeout_us+0x38>
    if (rc < 0) return rc;
    assert(rc);
    return (uint8_t)buf[0];
10003ff4:	466b      	mov	r3, sp
10003ff6:	7918      	ldrb	r0, [r3, #4]
}
10003ff8:	b002      	add	sp, #8
10003ffa:	bce0      	pop	{r5, r6, r7}
10003ffc:	46ba      	mov	sl, r7
10003ffe:	46b1      	mov	r9, r6
10004000:	46a8      	mov	r8, r5
10004002:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint32_t hi = timer_hw->timerawh;
10004004:	4b16      	ldr	r3, [pc, #88]	; (10004060 <getchar_timeout_us+0xc4>)
10004006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    return (hi >= hi_target && (timer_hw->timerawl >= (uint32_t) target || hi != hi_target));
10004008:	4599      	cmp	r9, r3
1000400a:	d8dd      	bhi.n	10003fc8 <getchar_timeout_us+0x2c>
1000400c:	4a14      	ldr	r2, [pc, #80]	; (10004060 <getchar_timeout_us+0xc4>)
1000400e:	6a92      	ldr	r2, [r2, #40]	; 0x28
10004010:	42b2      	cmp	r2, r6
10004012:	d201      	bcs.n	10004018 <getchar_timeout_us+0x7c>
10004014:	4599      	cmp	r9, r3
10004016:	d00b      	beq.n	10004030 <getchar_timeout_us+0x94>
10004018:	2001      	movs	r0, #1
1000401a:	4240      	negs	r0, r0
1000401c:	e7ec      	b.n	10003ff8 <getchar_timeout_us+0x5c>
1000401e:	42b0      	cmp	r0, r6
10004020:	d9ce      	bls.n	10003fc0 <getchar_timeout_us+0x24>
10004022:	2301      	movs	r3, #1
10004024:	425b      	negs	r3, r3
10004026:	4699      	mov	r9, r3
        delayed = (uint64_t)-1;
10004028:	2601      	movs	r6, #1
1000402a:	4276      	negs	r6, r6
1000402c:	17f7      	asrs	r7, r6, #31
1000402e:	e7c8      	b.n	10003fc2 <getchar_timeout_us+0x26>
10004030:	4643      	mov	r3, r8
10004032:	2b00      	cmp	r3, #0
10004034:	d1c8      	bne.n	10003fc8 <getchar_timeout_us+0x2c>
    uint32_t hi = timer_hw->timerawh;
10004036:	4a0a      	ldr	r2, [pc, #40]	; (10004060 <getchar_timeout_us+0xc4>)
10004038:	6a53      	ldr	r3, [r2, #36]	; 0x24
    return (hi >= hi_target && (timer_hw->timerawl >= (uint32_t) target || hi != hi_target));
1000403a:	4599      	cmp	r9, r3
1000403c:	d8fc      	bhi.n	10004038 <getchar_timeout_us+0x9c>
1000403e:	6a91      	ldr	r1, [r2, #40]	; 0x28
10004040:	42b1      	cmp	r1, r6
10004042:	d2e9      	bcs.n	10004018 <getchar_timeout_us+0x7c>
10004044:	4599      	cmp	r9, r3
10004046:	d0f7      	beq.n	10004038 <getchar_timeout_us+0x9c>
10004048:	2001      	movs	r0, #1
1000404a:	4240      	negs	r0, r0
1000404c:	e7d4      	b.n	10003ff8 <getchar_timeout_us+0x5c>
    uint32_t hi = timer_hw->timerawh;
1000404e:	4b04      	ldr	r3, [pc, #16]	; (10004060 <getchar_timeout_us+0xc4>)
10004050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    return (hi >= hi_target && (timer_hw->timerawl >= (uint32_t) target || hi != hi_target));
10004052:	454b      	cmp	r3, r9
10004054:	d2da      	bcs.n	1000400c <getchar_timeout_us+0x70>
10004056:	e7ee      	b.n	10004036 <getchar_timeout_us+0x9a>
10004058:	200394e8 	.word	0x200394e8
1000405c:	200394f0 	.word	0x200394f0
10004060:	40054000 	.word	0x40054000

10004064 <stdio_usb_in_chars>:
        last_avail_time = 0;
    }
    mutex_exit(&stdio_usb_mutex);
}

int stdio_usb_in_chars(char *buf, int length) {
10004064:	b570      	push	{r4, r5, r6, lr}
    uint32_t owner;
    if (!mutex_try_enter(&stdio_usb_mutex, &owner)) {
10004066:	4c18      	ldr	r4, [pc, #96]	; (100040c8 <stdio_usb_in_chars+0x64>)
int stdio_usb_in_chars(char *buf, int length) {
10004068:	b082      	sub	sp, #8
1000406a:	0006      	movs	r6, r0
1000406c:	000d      	movs	r5, r1
    if (!mutex_try_enter(&stdio_usb_mutex, &owner)) {
1000406e:	0020      	movs	r0, r4
10004070:	a901      	add	r1, sp, #4
10004072:	f005 fb5d 	bl	10009730 <__mutex_try_enter_veneer>
10004076:	2800      	cmp	r0, #0
10004078:	d108      	bne.n	1000408c <stdio_usb_in_chars+0x28>
        if (owner == get_core_num()) return PICO_ERROR_NO_DATA; // would deadlock otherwise
1000407a:	23d0      	movs	r3, #208	; 0xd0
1000407c:	061b      	lsls	r3, r3, #24
1000407e:	681b      	ldr	r3, [r3, #0]
10004080:	9a01      	ldr	r2, [sp, #4]
10004082:	429a      	cmp	r2, r3
10004084:	d01c      	beq.n	100040c0 <stdio_usb_in_chars+0x5c>
        mutex_enter_blocking(&stdio_usb_mutex);
10004086:	0020      	movs	r0, r4
10004088:	f005 fb6a 	bl	10009760 <__mutex_enter_blocking_veneer>
  return tud_cdc_n_write(itf, str, strlen(str));
}

static inline bool tud_cdc_connected (void)
{
  return tud_cdc_n_connected(0);
1000408c:	2000      	movs	r0, #0
1000408e:	f000 feeb 	bl	10004e68 <tud_cdc_n_connected>
    }
    int rc = PICO_ERROR_NO_DATA;
    if (tud_cdc_connected() && tud_cdc_available()) {
10004092:	2800      	cmp	r0, #0
10004094:	d107      	bne.n	100040a6 <stdio_usb_in_chars+0x42>
    int rc = PICO_ERROR_NO_DATA;
10004096:	2503      	movs	r5, #3
10004098:	426d      	negs	r5, r5
        int count = tud_cdc_read(buf, length);
        rc =  count ? count : PICO_ERROR_NO_DATA;
    }
    mutex_exit(&stdio_usb_mutex);
1000409a:	0020      	movs	r0, r4
1000409c:	f005 fb30 	bl	10009700 <__mutex_exit_veneer>
    return rc;
}
100040a0:	0028      	movs	r0, r5
100040a2:	b002      	add	sp, #8
100040a4:	bd70      	pop	{r4, r5, r6, pc}
  tud_cdc_n_set_wanted_char(0, wanted);
}

static inline uint32_t tud_cdc_available (void)
{
  return tud_cdc_n_available(0);
100040a6:	2000      	movs	r0, #0
100040a8:	f000 fef8 	bl	10004e9c <tud_cdc_n_available>
    if (tud_cdc_connected() && tud_cdc_available()) {
100040ac:	2800      	cmp	r0, #0
100040ae:	d0f2      	beq.n	10004096 <stdio_usb_in_chars+0x32>
  return tud_cdc_n_read_char(0);
}

static inline uint32_t tud_cdc_read (void* buffer, uint32_t bufsize)
{
  return tud_cdc_n_read(0, buffer, bufsize);
100040b0:	002a      	movs	r2, r5
100040b2:	0031      	movs	r1, r6
100040b4:	2000      	movs	r0, #0
100040b6:	f000 feff 	bl	10004eb8 <tud_cdc_n_read>
100040ba:	1e05      	subs	r5, r0, #0
        rc =  count ? count : PICO_ERROR_NO_DATA;
100040bc:	d0eb      	beq.n	10004096 <stdio_usb_in_chars+0x32>
100040be:	e7ec      	b.n	1000409a <stdio_usb_in_chars+0x36>
        if (owner == get_core_num()) return PICO_ERROR_NO_DATA; // would deadlock otherwise
100040c0:	2503      	movs	r5, #3
100040c2:	426d      	negs	r5, r5
100040c4:	e7ec      	b.n	100040a0 <stdio_usb_in_chars+0x3c>
100040c6:	46c0      	nop			; (mov r8, r8)
100040c8:	20039b9c 	.word	0x20039b9c

100040cc <stdio_usb_out_chars>:
static void stdio_usb_out_chars(const char *buf, int length) {
100040cc:	b5f0      	push	{r4, r5, r6, r7, lr}
100040ce:	46de      	mov	lr, fp
100040d0:	464f      	mov	r7, r9
100040d2:	4646      	mov	r6, r8
100040d4:	b5c0      	push	{r6, r7, lr}
    if (!mutex_try_enter(&stdio_usb_mutex, &owner)) {
100040d6:	4b33      	ldr	r3, [pc, #204]	; (100041a4 <stdio_usb_out_chars+0xd8>)
static void stdio_usb_out_chars(const char *buf, int length) {
100040d8:	b082      	sub	sp, #8
100040da:	4681      	mov	r9, r0
100040dc:	000d      	movs	r5, r1
    if (!mutex_try_enter(&stdio_usb_mutex, &owner)) {
100040de:	0018      	movs	r0, r3
100040e0:	a901      	add	r1, sp, #4
100040e2:	469b      	mov	fp, r3
100040e4:	f005 fb24 	bl	10009730 <__mutex_try_enter_veneer>
100040e8:	2800      	cmp	r0, #0
100040ea:	d108      	bne.n	100040fe <stdio_usb_out_chars+0x32>
        if (owner == get_core_num()) return; // would deadlock otherwise
100040ec:	23d0      	movs	r3, #208	; 0xd0
100040ee:	061b      	lsls	r3, r3, #24
100040f0:	681b      	ldr	r3, [r3, #0]
100040f2:	9a01      	ldr	r2, [sp, #4]
100040f4:	429a      	cmp	r2, r3
100040f6:	d04f      	beq.n	10004198 <stdio_usb_out_chars+0xcc>
        mutex_enter_blocking(&stdio_usb_mutex);
100040f8:	4658      	mov	r0, fp
100040fa:	f005 fb31 	bl	10009760 <__mutex_enter_blocking_veneer>
  return tud_cdc_n_connected(0);
100040fe:	2000      	movs	r0, #0
10004100:	f000 feb2 	bl	10004e68 <tud_cdc_n_connected>
    if (tud_cdc_connected()) {
10004104:	2800      	cmp	r0, #0
10004106:	d03f      	beq.n	10004188 <stdio_usb_out_chars+0xbc>
        for (int i = 0; i < length;) {
10004108:	2400      	movs	r4, #0
1000410a:	2d00      	cmp	r5, #0
1000410c:	dd41      	ble.n	10004192 <stdio_usb_out_chars+0xc6>
                    (!tud_cdc_write_available() && time_us_64() > last_avail_time + PICO_STDIO_USB_STDOUT_TIMEOUT_US)) {
1000410e:	4e26      	ldr	r6, [pc, #152]	; (100041a8 <stdio_usb_out_chars+0xdc>)
10004110:	e011      	b.n	10004136 <stdio_usb_out_chars+0x6a>
                int n2 = tud_cdc_write(buf + i, n);
10004112:	464b      	mov	r3, r9
  return tud_cdc_n_write_char(0, ch);
}

static inline uint32_t tud_cdc_write (void const* buffer, uint32_t bufsize)
{
  return tud_cdc_n_write(0, buffer, bufsize);
10004114:	2000      	movs	r0, #0
10004116:	1919      	adds	r1, r3, r4
10004118:	f000 ff5a 	bl	10004fd0 <tud_cdc_n_write>
1000411c:	4680      	mov	r8, r0
                tud_task();
1000411e:	f001 fbab 	bl	10005878 <tud_task>
  return tud_cdc_n_write_str(0, str);
}

static inline uint32_t tud_cdc_write_flush (void)
{
  return tud_cdc_n_write_flush(0);
10004122:	2000      	movs	r0, #0
10004124:	f000 ff02 	bl	10004f2c <tud_cdc_n_write_flush>
                last_avail_time = time_us_64();
10004128:	f000 fd9a 	bl	10004c60 <time_us_64>
1000412c:	6030      	str	r0, [r6, #0]
1000412e:	6071      	str	r1, [r6, #4]
                i += n2;
10004130:	4444      	add	r4, r8
        for (int i = 0; i < length;) {
10004132:	42ac      	cmp	r4, r5
10004134:	da2d      	bge.n	10004192 <stdio_usb_out_chars+0xc6>
}

static inline uint32_t tud_cdc_write_available(void)
{
  return tud_cdc_n_write_available(0);
10004136:	2000      	movs	r0, #0
10004138:	f000 ff66 	bl	10005008 <tud_cdc_n_write_available>
            int n = length - i;
1000413c:	1b2f      	subs	r7, r5, r4
1000413e:	0002      	movs	r2, r0
            if (n > avail) n = avail;
10004140:	42b8      	cmp	r0, r7
10004142:	dd00      	ble.n	10004146 <stdio_usb_out_chars+0x7a>
10004144:	003a      	movs	r2, r7
            if (n) {
10004146:	2a00      	cmp	r2, #0
10004148:	d1e3      	bne.n	10004112 <stdio_usb_out_chars+0x46>
                tud_task();
1000414a:	f001 fb95 	bl	10005878 <tud_task>
  return tud_cdc_n_write_flush(0);
1000414e:	2000      	movs	r0, #0
10004150:	f000 feec 	bl	10004f2c <tud_cdc_n_write_flush>
  return tud_cdc_n_connected(0);
10004154:	2000      	movs	r0, #0
10004156:	f000 fe87 	bl	10004e68 <tud_cdc_n_connected>
                if (!tud_cdc_connected() ||
1000415a:	2800      	cmp	r0, #0
1000415c:	d019      	beq.n	10004192 <stdio_usb_out_chars+0xc6>
  return tud_cdc_n_write_available(0);
1000415e:	2000      	movs	r0, #0
10004160:	f000 ff52 	bl	10005008 <tud_cdc_n_write_available>
10004164:	2800      	cmp	r0, #0
10004166:	d1e4      	bne.n	10004132 <stdio_usb_out_chars+0x66>
                    (!tud_cdc_write_available() && time_us_64() > last_avail_time + PICO_STDIO_USB_STDOUT_TIMEOUT_US)) {
10004168:	f000 fd7a 	bl	10004c60 <time_us_64>
1000416c:	6832      	ldr	r2, [r6, #0]
1000416e:	6873      	ldr	r3, [r6, #4]
10004170:	000f      	movs	r7, r1
10004172:	2100      	movs	r1, #0
10004174:	4684      	mov	ip, r0
10004176:	480d      	ldr	r0, [pc, #52]	; (100041ac <stdio_usb_out_chars+0xe0>)
10004178:	1812      	adds	r2, r2, r0
1000417a:	414b      	adcs	r3, r1
1000417c:	429f      	cmp	r7, r3
1000417e:	d808      	bhi.n	10004192 <stdio_usb_out_chars+0xc6>
10004180:	d1d7      	bne.n	10004132 <stdio_usb_out_chars+0x66>
10004182:	4594      	cmp	ip, r2
10004184:	d9d5      	bls.n	10004132 <stdio_usb_out_chars+0x66>
10004186:	e004      	b.n	10004192 <stdio_usb_out_chars+0xc6>
        last_avail_time = 0;
10004188:	2000      	movs	r0, #0
1000418a:	2100      	movs	r1, #0
1000418c:	4b06      	ldr	r3, [pc, #24]	; (100041a8 <stdio_usb_out_chars+0xdc>)
1000418e:	6018      	str	r0, [r3, #0]
10004190:	6059      	str	r1, [r3, #4]
    mutex_exit(&stdio_usb_mutex);
10004192:	4658      	mov	r0, fp
10004194:	f005 fab4 	bl	10009700 <__mutex_exit_veneer>
}
10004198:	b002      	add	sp, #8
1000419a:	bce0      	pop	{r5, r6, r7}
1000419c:	46bb      	mov	fp, r7
1000419e:	46b1      	mov	r9, r6
100041a0:	46a8      	mov	r8, r5
100041a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
100041a4:	20039b9c 	.word	0x20039b9c
100041a8:	20002a98 	.word	0x20002a98
100041ac:	0007a120 	.word	0x0007a120

100041b0 <timer_task>:
    irq_set_pending(PICO_STDIO_USB_LOW_PRIORITY_IRQ);
100041b0:	201f      	movs	r0, #31
static int64_t timer_task(__unused alarm_id_t id, __unused void *user_data) {
100041b2:	b510      	push	{r4, lr}
    irq_set_pending(PICO_STDIO_USB_LOW_PRIORITY_IRQ);
100041b4:	f7fd fc58 	bl	10001a68 <irq_set_pending>
}
100041b8:	20fa      	movs	r0, #250	; 0xfa
100041ba:	2100      	movs	r1, #0
100041bc:	0080      	lsls	r0, r0, #2
100041be:	bd10      	pop	{r4, pc}

100041c0 <low_priority_worker_irq>:
static void low_priority_worker_irq() {
100041c0:	b510      	push	{r4, lr}
    if (mutex_try_enter(&stdio_usb_mutex, NULL)) {
100041c2:	4c07      	ldr	r4, [pc, #28]	; (100041e0 <low_priority_worker_irq+0x20>)
100041c4:	2100      	movs	r1, #0
100041c6:	0020      	movs	r0, r4
100041c8:	f005 fab2 	bl	10009730 <__mutex_try_enter_veneer>
100041cc:	2800      	cmp	r0, #0
100041ce:	d100      	bne.n	100041d2 <low_priority_worker_irq+0x12>
}
100041d0:	bd10      	pop	{r4, pc}
        tud_task();
100041d2:	f001 fb51 	bl	10005878 <tud_task>
        mutex_exit(&stdio_usb_mutex);
100041d6:	0020      	movs	r0, r4
100041d8:	f005 fa92 	bl	10009700 <__mutex_exit_veneer>
}
100041dc:	e7f8      	b.n	100041d0 <low_priority_worker_irq+0x10>
100041de:	46c0      	nop			; (mov r8, r8)
100041e0:	20039b9c 	.word	0x20039b9c

100041e4 <stdio_usb_init>:
#if PICO_STDIO_ENABLE_CRLF_SUPPORT
    .crlf_enabled = PICO_STDIO_USB_DEFAULT_CRLF
#endif
};

bool stdio_usb_init(void) {
100041e4:	b570      	push	{r4, r5, r6, lr}
#if !PICO_NO_BI_STDIO_USB
    bi_decl_if_func_used(bi_program_feature("USB stdin / stdout"));
100041e6:	4b1e      	ldr	r3, [pc, #120]	; (10004260 <stdio_usb_init+0x7c>)
bool stdio_usb_init(void) {
100041e8:	b084      	sub	sp, #16
    bi_decl_if_func_used(bi_program_feature("USB stdin / stdout"));
100041ea:	781b      	ldrb	r3, [r3, #0]
#endif

    // initialize TinyUSB
    tusb_init();
100041ec:	f002 fd42 	bl	10006c74 <tusb_init>

    irq_set_exclusive_handler(PICO_STDIO_USB_LOW_PRIORITY_IRQ, low_priority_worker_irq);
100041f0:	201f      	movs	r0, #31
100041f2:	491c      	ldr	r1, [pc, #112]	; (10004264 <stdio_usb_init+0x80>)
100041f4:	f7fd fc48 	bl	10001a88 <irq_set_exclusive_handler>
    irq_set_enabled(PICO_STDIO_USB_LOW_PRIORITY_IRQ, true);
100041f8:	2101      	movs	r1, #1
100041fa:	201f      	movs	r0, #31
100041fc:	f7fd fc22 	bl	10001a44 <irq_set_enabled>

    mutex_init(&stdio_usb_mutex);
10004200:	4819      	ldr	r0, [pc, #100]	; (10004268 <stdio_usb_init+0x84>)
10004202:	f7fd fe3d 	bl	10001e80 <mutex_init>
 * @return >0 the alarm id
 * @return 0 the target timestamp was during or before this method call (whether the callback was called depends on fire_if_past)
 * @return -1 if there were no alarm slots available
 */
static inline alarm_id_t add_alarm_in_us(uint64_t us, alarm_callback_t callback, void *user_data, bool fire_if_past) {
    return alarm_pool_add_alarm_in_us(alarm_pool_get_default(), us, callback, user_data, fire_if_past);
10004206:	f000 fb2f 	bl	10004868 <alarm_pool_get_default>
1000420a:	0006      	movs	r6, r0
    update_us_since_boot(&t, time_us_64());
1000420c:	f000 fd28 	bl	10004c60 <time_us_64>
    uint64_t delayed = base + us;
10004210:	22fa      	movs	r2, #250	; 0xfa
    update_us_since_boot(&t, time_us_64());
10004212:	0004      	movs	r4, r0
10004214:	000d      	movs	r5, r1
    uint64_t delayed = base + us;
10004216:	2300      	movs	r3, #0
10004218:	0092      	lsls	r2, r2, #2
1000421a:	1912      	adds	r2, r2, r4
1000421c:	416b      	adcs	r3, r5
    if (delayed < base) {
1000421e:	4299      	cmp	r1, r3
10004220:	d814      	bhi.n	1000424c <stdio_usb_init+0x68>
10004222:	d011      	beq.n	10004248 <stdio_usb_init+0x64>
    return alarm_pool_add_alarm_at(pool, delayed_by_us(get_absolute_time(), us), callback, user_data, fire_if_past);
10004224:	2101      	movs	r1, #1
10004226:	9102      	str	r1, [sp, #8]
10004228:	2100      	movs	r1, #0
1000422a:	9101      	str	r1, [sp, #4]
1000422c:	490f      	ldr	r1, [pc, #60]	; (1000426c <stdio_usb_init+0x88>)
1000422e:	0030      	movs	r0, r6
10004230:	9100      	str	r1, [sp, #0]
10004232:	f000 fb1f 	bl	10004874 <alarm_pool_add_alarm_at>
    bool rc = add_alarm_in_us(PICO_STDIO_USB_TASK_INTERVAL_US, timer_task, NULL, true);
10004236:	0004      	movs	r4, r0
10004238:	1e63      	subs	r3, r4, #1
1000423a:	419c      	sbcs	r4, r3
1000423c:	b2e4      	uxtb	r4, r4
    if (rc) {
1000423e:	2800      	cmp	r0, #0
10004240:	d108      	bne.n	10004254 <stdio_usb_init+0x70>
        stdio_set_driver_enabled(&stdio_usb, true);
    }
    return rc;
}
10004242:	0020      	movs	r0, r4
10004244:	b004      	add	sp, #16
10004246:	bd70      	pop	{r4, r5, r6, pc}
    if (delayed < base) {
10004248:	4290      	cmp	r0, r2
1000424a:	d9eb      	bls.n	10004224 <stdio_usb_init+0x40>
        delayed = (uint64_t)-1;
1000424c:	2201      	movs	r2, #1
1000424e:	4252      	negs	r2, r2
10004250:	17d3      	asrs	r3, r2, #31
10004252:	e7e7      	b.n	10004224 <stdio_usb_init+0x40>
        stdio_set_driver_enabled(&stdio_usb, true);
10004254:	2101      	movs	r1, #1
10004256:	4806      	ldr	r0, [pc, #24]	; (10004270 <stdio_usb_init+0x8c>)
10004258:	f7ff fdfe 	bl	10003e58 <stdio_set_driver_enabled>
1000425c:	e7f1      	b.n	10004242 <stdio_usb_init+0x5e>
1000425e:	46c0      	nop			; (mov r8, r8)
10004260:	1000a3b4 	.word	0x1000a3b4
10004264:	100041c1 	.word	0x100041c1
10004268:	20039b9c 	.word	0x20039b9c
1000426c:	100041b1 	.word	0x100041b1
10004270:	20002188 	.word	0x20002188

10004274 <tud_descriptor_device_cb>:
    [USBD_STR_CDC] = "Board CDC",
};

const uint8_t *tud_descriptor_device_cb(void) {
    return (const uint8_t *)&usbd_desc_device;
}
10004274:	4800      	ldr	r0, [pc, #0]	; (10004278 <tud_descriptor_device_cb+0x4>)
10004276:	4770      	bx	lr
10004278:	10009b0c 	.word	0x10009b0c

1000427c <tud_descriptor_configuration_cb>:

const uint8_t *tud_descriptor_configuration_cb(uint8_t index) {
    (void)index;
    return usbd_desc_cfg;
}
1000427c:	4800      	ldr	r0, [pc, #0]	; (10004280 <tud_descriptor_configuration_cb+0x4>)
1000427e:	4770      	bx	lr
10004280:	10009ac0 	.word	0x10009ac0

10004284 <tud_descriptor_string_cb>:

const uint16_t *tud_descriptor_string_cb(uint8_t index, uint16_t langid) {
10004284:	b530      	push	{r4, r5, lr}
    #define DESC_STR_MAX (20)
    static uint16_t desc_str[DESC_STR_MAX];

    uint8_t len;
    if (index == 0) {
10004286:	2800      	cmp	r0, #0
10004288:	d106      	bne.n	10004298 <tud_descriptor_string_cb+0x14>
        desc_str[1] = 0x0409; // supported language is English
1000428a:	24c1      	movs	r4, #193	; 0xc1
1000428c:	4811      	ldr	r0, [pc, #68]	; (100042d4 <tud_descriptor_string_cb+0x50>)
1000428e:	4b12      	ldr	r3, [pc, #72]	; (100042d8 <tud_descriptor_string_cb+0x54>)
10004290:	00a4      	lsls	r4, r4, #2
10004292:	8043      	strh	r3, [r0, #2]
            desc_str[1 + len] = str[len];
        }
    }

    // first byte is length (including header), second byte is string type
    desc_str[0] = (TUSB_DESC_STRING << 8) | (2 * len + 2);
10004294:	8004      	strh	r4, [r0, #0]

    return desc_str;
}
10004296:	bd30      	pop	{r4, r5, pc}
        if (index >= sizeof(usbd_desc_str) / sizeof(usbd_desc_str[0])) {
10004298:	2804      	cmp	r0, #4
1000429a:	d819      	bhi.n	100042d0 <tud_descriptor_string_cb+0x4c>
        const char *str = usbd_desc_str[index];
1000429c:	4b0f      	ldr	r3, [pc, #60]	; (100042dc <tud_descriptor_string_cb+0x58>)
1000429e:	0080      	lsls	r0, r0, #2
100042a0:	58c5      	ldr	r5, [r0, r3]
        for (len = 0; len < DESC_STR_MAX - 1 && str[len]; ++len) {
100042a2:	480c      	ldr	r0, [pc, #48]	; (100042d4 <tud_descriptor_string_cb+0x50>)
        const char *str = usbd_desc_str[index];
100042a4:	2300      	movs	r3, #0
100042a6:	1c81      	adds	r1, r0, #2
100042a8:	e004      	b.n	100042b4 <tud_descriptor_string_cb+0x30>
        for (len = 0; len < DESC_STR_MAX - 1 && str[len]; ++len) {
100042aa:	3301      	adds	r3, #1
            desc_str[1 + len] = str[len];
100042ac:	800a      	strh	r2, [r1, #0]
        for (len = 0; len < DESC_STR_MAX - 1 && str[len]; ++len) {
100042ae:	3102      	adds	r1, #2
100042b0:	2b13      	cmp	r3, #19
100042b2:	d00a      	beq.n	100042ca <tud_descriptor_string_cb+0x46>
100042b4:	5cea      	ldrb	r2, [r5, r3]
100042b6:	b2dc      	uxtb	r4, r3
100042b8:	2a00      	cmp	r2, #0
100042ba:	d1f6      	bne.n	100042aa <tud_descriptor_string_cb+0x26>
    desc_str[0] = (TUSB_DESC_STRING << 8) | (2 * len + 2);
100042bc:	23c0      	movs	r3, #192	; 0xc0
100042be:	3401      	adds	r4, #1
100042c0:	b2e4      	uxtb	r4, r4
100042c2:	0064      	lsls	r4, r4, #1
100042c4:	009b      	lsls	r3, r3, #2
100042c6:	431c      	orrs	r4, r3
100042c8:	e7e4      	b.n	10004294 <tud_descriptor_string_cb+0x10>
100042ca:	24ca      	movs	r4, #202	; 0xca
100042cc:	00a4      	lsls	r4, r4, #2
100042ce:	e7e1      	b.n	10004294 <tud_descriptor_string_cb+0x10>
            return NULL;
100042d0:	2000      	movs	r0, #0
100042d2:	e7e0      	b.n	10004296 <tud_descriptor_string_cb+0x12>
100042d4:	200394c0 	.word	0x200394c0
100042d8:	00000409 	.word	0x00000409
100042dc:	10009b20 	.word	0x10009b20

100042e0 <set_sys_clock_pll>:
                        48 * MHZ,
                        48 * MHZ);
    }
}

void set_sys_clock_pll(uint32_t vco_freq, uint post_div1, uint post_div2) {
100042e0:	b5f0      	push	{r4, r5, r6, r7, lr}
100042e2:	b083      	sub	sp, #12
100042e4:	0006      	movs	r6, r0
100042e6:	000c      	movs	r4, r1
100042e8:	0015      	movs	r5, r2
    if (!running_on_fpga()) {
100042ea:	f7fe f8cf 	bl	1000248c <running_on_fpga>
100042ee:	2800      	cmp	r0, #0
100042f0:	d001      	beq.n	100042f6 <set_sys_clock_pll+0x16>
                        0, // Only AUX mux on ADC
                        CLOCKS_CLK_PERI_CTRL_AUXSRC_VALUE_CLKSRC_PLL_USB,
                        48 * MHZ,
                        48 * MHZ);
    }
}
100042f2:	b003      	add	sp, #12
100042f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        clock_configure(clk_sys,
100042f6:	4f16      	ldr	r7, [pc, #88]	; (10004350 <set_sys_clock_pll+0x70>)
100042f8:	2201      	movs	r2, #1
100042fa:	003b      	movs	r3, r7
100042fc:	2101      	movs	r1, #1
100042fe:	9700      	str	r7, [sp, #0]
10004300:	3005      	adds	r0, #5
10004302:	f7fd f8b3 	bl	1000146c <clock_configure>
        pll_init(pll_sys, 1, vco_freq, post_div1, post_div2);
10004306:	b2eb      	uxtb	r3, r5
10004308:	0032      	movs	r2, r6
1000430a:	9300      	str	r3, [sp, #0]
1000430c:	2101      	movs	r1, #1
1000430e:	0023      	movs	r3, r4
10004310:	4810      	ldr	r0, [pc, #64]	; (10004354 <set_sys_clock_pll+0x74>)
10004312:	f7fe f8c3 	bl	1000249c <pll_init>
        uint32_t freq = vco_freq / (post_div1 * post_div2);
10004316:	0021      	movs	r1, r4
10004318:	0030      	movs	r0, r6
1000431a:	4369      	muls	r1, r5
1000431c:	f7fc f82a 	bl	10000374 <__wrap___aeabi_uidiv>
10004320:	0004      	movs	r4, r0
        clock_configure(clk_ref,
10004322:	4b0d      	ldr	r3, [pc, #52]	; (10004358 <set_sys_clock_pll+0x78>)
10004324:	2200      	movs	r2, #0
10004326:	9300      	str	r3, [sp, #0]
10004328:	2102      	movs	r1, #2
1000432a:	2004      	movs	r0, #4
1000432c:	f7fd f89e 	bl	1000146c <clock_configure>
        clock_configure(clk_sys,
10004330:	0023      	movs	r3, r4
10004332:	2200      	movs	r2, #0
10004334:	2101      	movs	r1, #1
10004336:	9400      	str	r4, [sp, #0]
10004338:	2005      	movs	r0, #5
1000433a:	f7fd f897 	bl	1000146c <clock_configure>
        clock_configure(clk_peri,
1000433e:	003b      	movs	r3, r7
10004340:	2202      	movs	r2, #2
10004342:	2100      	movs	r1, #0
10004344:	9700      	str	r7, [sp, #0]
10004346:	2006      	movs	r0, #6
10004348:	f7fd f890 	bl	1000146c <clock_configure>
}
1000434c:	e7d1      	b.n	100042f2 <set_sys_clock_pll+0x12>
1000434e:	46c0      	nop			; (mov r8, r8)
10004350:	02dc6c00 	.word	0x02dc6c00
10004354:	40028000 	.word	0x40028000
10004358:	00b71b00 	.word	0x00b71b00

1000435c <spin_locks_reset>:
    *lock = 0;
1000435c:	2100      	movs	r1, #0

static void check_lock_num(uint __unused lock_num) {
    invalid_params_if(SYNC, lock_num >= 32);
}

void spin_locks_reset(void) {
1000435e:	4b04      	ldr	r3, [pc, #16]	; (10004370 <spin_locks_reset+0x14>)
    for (uint i = 0; i < NUM_SPIN_LOCKS; i++) {
10004360:	4a04      	ldr	r2, [pc, #16]	; (10004374 <spin_locks_reset+0x18>)
    __asm volatile ("dmb");
10004362:	f3bf 8f5f 	dmb	sy
    *lock = 0;
10004366:	c302      	stmia	r3!, {r1}
10004368:	4293      	cmp	r3, r2
1000436a:	d1fa      	bne.n	10004362 <spin_locks_reset+0x6>
        spin_unlock_unsafe(spin_lock_instance(i));
    }
}
1000436c:	4770      	bx	lr
1000436e:	46c0      	nop			; (mov r8, r8)
10004370:	d0000100 	.word	0xd0000100
10004374:	d0000180 	.word	0xd0000180

10004378 <next_striped_spin_lock_num>:
    spin_unlock_unsafe(lock);
    return lock;
}

uint next_striped_spin_lock_num() {
    uint rc = striped_spin_lock_num++;
10004378:	4a04      	ldr	r2, [pc, #16]	; (1000438c <next_striped_spin_lock_num+0x14>)
1000437a:	7810      	ldrb	r0, [r2, #0]
1000437c:	1c43      	adds	r3, r0, #1
1000437e:	b2db      	uxtb	r3, r3
    if (striped_spin_lock_num > PICO_SPINLOCK_ID_STRIPED_LAST) {
10004380:	2b17      	cmp	r3, #23
10004382:	d900      	bls.n	10004386 <next_striped_spin_lock_num+0xe>
        striped_spin_lock_num = PICO_SPINLOCK_ID_STRIPED_FIRST;
10004384:	2310      	movs	r3, #16
10004386:	7013      	strb	r3, [r2, #0]
    }
    return rc;
}
10004388:	4770      	bx	lr
1000438a:	46c0      	nop			; (mov r8, r8)
1000438c:	2000219c 	.word	0x2000219c

10004390 <spin_lock_claim_unused>:
void spin_lock_unclaim(uint lock_num) {
    check_lock_num(lock_num);
    hw_claim_clear((uint8_t *) &claimed, lock_num);
}

int spin_lock_claim_unused(bool required) {
10004390:	b500      	push	{lr}
    return hw_claim_unused_from_range((uint8_t*)&claimed, required, PICO_SPINLOCK_ID_CLAIM_FREE_FIRST, PICO_SPINLOCK_ID_CLAIM_FREE_END, "No spinlocks are available");
10004392:	4b05      	ldr	r3, [pc, #20]	; (100043a8 <spin_lock_claim_unused+0x18>)
int spin_lock_claim_unused(bool required) {
10004394:	b083      	sub	sp, #12
10004396:	0001      	movs	r1, r0
    return hw_claim_unused_from_range((uint8_t*)&claimed, required, PICO_SPINLOCK_ID_CLAIM_FREE_FIRST, PICO_SPINLOCK_ID_CLAIM_FREE_END, "No spinlocks are available");
10004398:	9300      	str	r3, [sp, #0]
1000439a:	2218      	movs	r2, #24
1000439c:	231f      	movs	r3, #31
1000439e:	4803      	ldr	r0, [pc, #12]	; (100043ac <spin_lock_claim_unused+0x1c>)
100043a0:	f7fd f816 	bl	100013d0 <hw_claim_unused_from_range>
}
100043a4:	b003      	add	sp, #12
100043a6:	bd00      	pop	{pc}
100043a8:	10009b34 	.word	0x10009b34
100043ac:	20039490 	.word	0x20039490

100043b0 <timer_pool_entry_comparator>:
}
#endif

static inline alarm_pool_entry_t *get_entry(alarm_pool_t *pool, pheap_node_id_t id) {
    assert(id && id <= pool->heap->max_nodes);
    return pool->entries + id - 1;
100043b0:	6883      	ldr	r3, [r0, #8]
100043b2:	480b      	ldr	r0, [pc, #44]	; (100043e0 <timer_pool_entry_comparator+0x30>)
static inline uint8_t *get_entry_id_high(alarm_pool_t *pool, pheap_node_id_t id) {
    assert(id && id <= pool->heap->max_nodes);
    return pool->entry_ids_high + id - 1;
}

bool timer_pool_entry_comparator(void *user_data, pheap_node_id_t a, pheap_node_id_t b) {
100043b4:	b510      	push	{r4, lr}
    return pool->entries + id - 1;
100043b6:	4684      	mov	ip, r0
100043b8:	4461      	add	r1, ip
100043ba:	4462      	add	r2, ip
    alarm_pool_t *pool = (alarm_pool_t *)user_data;
    return to_us_since_boot(get_entry(pool, a)->target) < to_us_since_boot(get_entry(pool, b)->target);
100043bc:	0109      	lsls	r1, r1, #4
100043be:	0112      	lsls	r2, r2, #4
100043c0:	189a      	adds	r2, r3, r2
100043c2:	1859      	adds	r1, r3, r1
100043c4:	6854      	ldr	r4, [r2, #4]
100043c6:	684b      	ldr	r3, [r1, #4]
100043c8:	2001      	movs	r0, #1
100043ca:	429c      	cmp	r4, r3
100043cc:	d801      	bhi.n	100043d2 <timer_pool_entry_comparator+0x22>
100043ce:	d002      	beq.n	100043d6 <timer_pool_entry_comparator+0x26>
100043d0:	2000      	movs	r0, #0
100043d2:	b2c0      	uxtb	r0, r0
}
100043d4:	bd10      	pop	{r4, pc}
    return to_us_since_boot(get_entry(pool, a)->target) < to_us_since_boot(get_entry(pool, b)->target);
100043d6:	6812      	ldr	r2, [r2, #0]
100043d8:	680b      	ldr	r3, [r1, #0]
100043da:	429a      	cmp	r2, r3
100043dc:	d8f9      	bhi.n	100043d2 <timer_pool_entry_comparator+0x22>
100043de:	e7f7      	b.n	100043d0 <timer_pool_entry_comparator+0x20>
100043e0:	0fffffff 	.word	0x0fffffff

100043e4 <sev_callback>:
    __asm volatile ("sev");
100043e4:	bf40      	sev

#if !PICO_TIME_DEFAULT_ALARM_POOL_DISABLED
static int64_t sev_callback(alarm_id_t id, void *user_data) {
    __sev();
    return 0;
}
100043e6:	2000      	movs	r0, #0
100043e8:	2100      	movs	r1, #0
100043ea:	4770      	bx	lr

100043ec <add_alarm_under_lock.isra.0>:
static alarm_id_t add_alarm_under_lock(alarm_pool_t *pool, absolute_time_t time, alarm_callback_t callback,
100043ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100043ee:	46de      	mov	lr, fp
100043f0:	4657      	mov	r7, sl
100043f2:	464e      	mov	r6, r9
100043f4:	4645      	mov	r5, r8
100043f6:	b5e0      	push	{r5, r6, r7, lr}
100043f8:	001f      	movs	r7, r3
100043fa:	ab0d      	add	r3, sp, #52	; 0x34
100043fc:	781b      	ldrb	r3, [r3, #0]
100043fe:	0005      	movs	r5, r0
10004400:	469b      	mov	fp, r3
    if (reuse_id) {
10004402:	9b0c      	ldr	r3, [sp, #48]	; 0x30
static alarm_id_t add_alarm_under_lock(alarm_pool_t *pool, absolute_time_t time, alarm_callback_t callback,
10004404:	0016      	movs	r6, r2
    if (reuse_id) {
10004406:	2b00      	cmp	r3, #0
10004408:	d045      	beq.n	10004496 <add_alarm_under_lock.isra.0+0xaa>
    return pool->entries + id - 1;
1000440a:	4a3f      	ldr	r2, [pc, #252]	; (10004508 <add_alarm_under_lock.isra.0+0x11c>)
        alarm_pool_entry_t *entry = get_entry(pool, id);
1000440c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    return pool->entries + id - 1;
1000440e:	4694      	mov	ip, r2
        alarm_pool_entry_t *entry = get_entry(pool, id);
10004410:	b2db      	uxtb	r3, r3
    return pool->entries + id - 1;
10004412:	68aa      	ldr	r2, [r5, #8]
        alarm_pool_entry_t *entry = get_entry(pool, id);
10004414:	469a      	mov	sl, r3
    return pool->entries + id - 1;
10004416:	9b0c      	ldr	r3, [sp, #48]	; 0x30
        if (id == ph_insert(pool->heap, id)) {
10004418:	682c      	ldr	r4, [r5, #0]
    return pool->entries + id - 1;
1000441a:	4463      	add	r3, ip
1000441c:	4694      	mov	ip, r2
1000441e:	011b      	lsls	r3, r3, #4
        entry->callback = callback;
10004420:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    return pool->entries + id - 1;
10004422:	4463      	add	r3, ip
        entry->callback = callback;
10004424:	609a      	str	r2, [r3, #8]
        entry->user_data = user_data;
10004426:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
        entry->target = time;
10004428:	601e      	str	r6, [r3, #0]
        entry->user_data = user_data;
1000442a:	60da      	str	r2, [r3, #12]
1000442c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
        entry->target = time;
1000442e:	605f      	str	r7, [r3, #4]
10004430:	4694      	mov	ip, r2
10004432:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    hn->child = hn->sibling = hn->parent = 0;
10004434:	2200      	movs	r2, #0
    return heap->nodes + id - 1;
10004436:	005b      	lsls	r3, r3, #1
10004438:	4463      	add	r3, ip
1000443a:	3b03      	subs	r3, #3
1000443c:	4698      	mov	r8, r3
1000443e:	6823      	ldr	r3, [r4, #0]
10004440:	4443      	add	r3, r8
    hn->child = hn->sibling = hn->parent = 0;
10004442:	709a      	strb	r2, [r3, #2]
10004444:	705a      	strb	r2, [r3, #1]
10004446:	701a      	strb	r2, [r3, #0]
    heap->root_id = ph_merge_nodes(heap, heap->root_id, id);
10004448:	7b63      	ldrb	r3, [r4, #13]
1000444a:	4699      	mov	r9, r3
    if (!a) return b;
1000444c:	2b00      	cmp	r3, #0
1000444e:	d042      	beq.n	100044d6 <add_alarm_under_lock.isra.0+0xea>
    if (heap->comparator(heap->user_data, a, b)) {
10004450:	4652      	mov	r2, sl
10004452:	0019      	movs	r1, r3
10004454:	68a0      	ldr	r0, [r4, #8]
10004456:	6863      	ldr	r3, [r4, #4]
10004458:	4798      	blx	r3
    return heap->nodes + id - 1;
1000445a:	6822      	ldr	r2, [r4, #0]
    if (heap->comparator(heap->user_data, a, b)) {
1000445c:	2800      	cmp	r0, #0
1000445e:	d02b      	beq.n	100044b8 <add_alarm_under_lock.isra.0+0xcc>
    return heap->nodes + id - 1;
10004460:	464b      	mov	r3, r9
10004462:	005b      	lsls	r3, r3, #1
10004464:	444b      	add	r3, r9
10004466:	3b03      	subs	r3, #3
10004468:	18d1      	adds	r1, r2, r3
1000446a:	468c      	mov	ip, r1
1000446c:	4641      	mov	r1, r8
    c->parent = parent_id;
1000446e:	4648      	mov	r0, r9
    return heap->nodes + id - 1;
10004470:	1851      	adds	r1, r2, r1
    c->parent = parent_id;
10004472:	7088      	strb	r0, [r1, #2]
    if (!n->child) {
10004474:	5cd3      	ldrb	r3, [r2, r3]
10004476:	2b00      	cmp	r3, #0
10004478:	d142      	bne.n	10004500 <add_alarm_under_lock.isra.0+0x114>
        n->child = child_id;
1000447a:	4653      	mov	r3, sl
1000447c:	4662      	mov	r2, ip
1000447e:	7013      	strb	r3, [r2, #0]
    heap->root_id = ph_merge_nodes(heap, heap->root_id, id);
10004480:	464b      	mov	r3, r9
10004482:	7363      	strb	r3, [r4, #13]
        if (id == ph_insert(pool->heap, id)) {
10004484:	9b0c      	ldr	r3, [sp, #48]	; 0x30
10004486:	4599      	cmp	r9, r3
10004488:	d027      	beq.n	100044da <add_alarm_under_lock.isra.0+0xee>
}
1000448a:	bcf0      	pop	{r4, r5, r6, r7}
1000448c:	46bb      	mov	fp, r7
1000448e:	46b2      	mov	sl, r6
10004490:	46a9      	mov	r9, r5
10004492:	46a0      	mov	r8, r4
10004494:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        id = ph_new_node(pool->heap);
10004496:	6802      	ldr	r2, [r0, #0]
    if (!heap->free_head_id) return 0;
10004498:	7b94      	ldrb	r4, [r2, #14]
1000449a:	2c00      	cmp	r4, #0
1000449c:	d0f5      	beq.n	1000448a <add_alarm_under_lock.isra.0+0x9e>
    heap->free_head_id = ph_get_node(heap, id)->sibling;
1000449e:	6811      	ldr	r1, [r2, #0]
100044a0:	0063      	lsls	r3, r4, #1
100044a2:	468c      	mov	ip, r1
100044a4:	191b      	adds	r3, r3, r4
100044a6:	4463      	add	r3, ip
100044a8:	3b03      	subs	r3, #3
100044aa:	785b      	ldrb	r3, [r3, #1]
100044ac:	7393      	strb	r3, [r2, #14]
    if (!heap->free_head_id) heap->free_tail_id = 0;
100044ae:	2b00      	cmp	r3, #0
100044b0:	d100      	bne.n	100044b4 <add_alarm_under_lock.isra.0+0xc8>
100044b2:	73d3      	strb	r3, [r2, #15]
100044b4:	940c      	str	r4, [sp, #48]	; 0x30
    if (id) {
100044b6:	e7a8      	b.n	1000440a <add_alarm_under_lock.isra.0+0x1e>
    return heap->nodes + id - 1;
100044b8:	4643      	mov	r3, r8
100044ba:	18d1      	adds	r1, r2, r3
100044bc:	464b      	mov	r3, r9
    c->parent = parent_id;
100044be:	4650      	mov	r0, sl
    return heap->nodes + id - 1;
100044c0:	005b      	lsls	r3, r3, #1
100044c2:	444b      	add	r3, r9
100044c4:	3b03      	subs	r3, #3
100044c6:	18d3      	adds	r3, r2, r3
    c->parent = parent_id;
100044c8:	7098      	strb	r0, [r3, #2]
    if (!n->child) {
100044ca:	4640      	mov	r0, r8
100044cc:	5c12      	ldrb	r2, [r2, r0]
100044ce:	2a00      	cmp	r2, #0
100044d0:	d118      	bne.n	10004504 <add_alarm_under_lock.isra.0+0x118>
        n->child = child_id;
100044d2:	464b      	mov	r3, r9
100044d4:	700b      	strb	r3, [r1, #0]
    heap->root_id = ph_merge_nodes(heap, heap->root_id, id);
100044d6:	4653      	mov	r3, sl
100044d8:	7363      	strb	r3, [r4, #13]
            bool is_missed = hardware_alarm_set_target(pool->hardware_alarm_num, time);
100044da:	0032      	movs	r2, r6
100044dc:	003b      	movs	r3, r7
100044de:	7d28      	ldrb	r0, [r5, #20]
100044e0:	f000 fc1e 	bl	10004d20 <hardware_alarm_set_target>
100044e4:	1e04      	subs	r4, r0, #0
            if (is_missed && !create_if_past) {
100044e6:	d006      	beq.n	100044f6 <add_alarm_under_lock.isra.0+0x10a>
100044e8:	465b      	mov	r3, fp
100044ea:	2b00      	cmp	r3, #0
100044ec:	d103      	bne.n	100044f6 <add_alarm_under_lock.isra.0+0x10a>
                ph_delete(pool->heap, id);
100044ee:	4651      	mov	r1, sl
100044f0:	6828      	ldr	r0, [r5, #0]
100044f2:	f7fd fe7b 	bl	100021ec <ph_delete>
            if (missed) *missed = is_missed;
100044f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
100044f8:	2b00      	cmp	r3, #0
100044fa:	d0c6      	beq.n	1000448a <add_alarm_under_lock.isra.0+0x9e>
100044fc:	701c      	strb	r4, [r3, #0]
    return id;
100044fe:	e7c4      	b.n	1000448a <add_alarm_under_lock.isra.0+0x9e>
        c->sibling = n->child;
10004500:	704b      	strb	r3, [r1, #1]
10004502:	e7ba      	b.n	1000447a <add_alarm_under_lock.isra.0+0x8e>
10004504:	705a      	strb	r2, [r3, #1]
10004506:	e7e4      	b.n	100044d2 <add_alarm_under_lock.isra.0+0xe6>
10004508:	0fffffff 	.word	0x0fffffff

1000450c <alarm_pool_alarm_callback>:
static void alarm_pool_alarm_callback(uint alarm_num) {
1000450c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000450e:	46de      	mov	lr, fp
10004510:	464e      	mov	r6, r9
10004512:	4657      	mov	r7, sl
10004514:	4645      	mov	r5, r8
10004516:	2300      	movs	r3, #0
10004518:	b5e0      	push	{r5, r6, r7, lr}
1000451a:	b08d      	sub	sp, #52	; 0x34
1000451c:	930a      	str	r3, [sp, #40]	; 0x28
    alarm_pool_t *pool = pools[alarm_num];
1000451e:	4b6b      	ldr	r3, [pc, #428]	; (100046cc <alarm_pool_alarm_callback+0x1c0>)
10004520:	0082      	lsls	r2, r0, #2
10004522:	58d3      	ldr	r3, [r2, r3]
static void alarm_pool_alarm_callback(uint alarm_num) {
10004524:	900b      	str	r0, [sp, #44]	; 0x2c
    alarm_pool_t *pool = pools[alarm_num];
10004526:	4699      	mov	r9, r3
        void *user_data = NULL;
10004528:	2300      	movs	r3, #0
1000452a:	469b      	mov	fp, r3
1000452c:	464b      	mov	r3, r9
1000452e:	9307      	str	r3, [sp, #28]
    update_us_since_boot(&t, time_us_64());
10004530:	f000 fb96 	bl	10004c60 <time_us_64>
        uint32_t save = spin_lock_blocking(pool->lock);
10004534:	9c07      	ldr	r4, [sp, #28]
10004536:	0006      	movs	r6, r0
10004538:	000f      	movs	r7, r1
1000453a:	6862      	ldr	r2, [r4, #4]
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
1000453c:	f3ef 8510 	mrs	r5, PRIMASK
    __asm volatile ("cpsid i");
10004540:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
10004542:	6813      	ldr	r3, [r2, #0]
10004544:	2b00      	cmp	r3, #0
10004546:	d0fc      	beq.n	10004542 <alarm_pool_alarm_callback+0x36>
    __asm volatile ("dmb");
10004548:	0022      	movs	r2, r4
1000454a:	9407      	str	r4, [sp, #28]
1000454c:	f3bf 8f5f 	dmb	sy
        pheap_node_id_t next_id = ph_peek_head(pool->heap);
10004550:	6824      	ldr	r4, [r4, #0]
    return heap->root_id;
10004552:	7b63      	ldrb	r3, [r4, #13]
10004554:	4699      	mov	r9, r3
        if (next_id) {
10004556:	2b00      	cmp	r3, #0
10004558:	d067      	beq.n	1000462a <alarm_pool_alarm_callback+0x11e>
    return pool->entries + id - 1;
1000455a:	6892      	ldr	r2, [r2, #8]
1000455c:	4b5c      	ldr	r3, [pc, #368]	; (100046d0 <alarm_pool_alarm_callback+0x1c4>)
1000455e:	4690      	mov	r8, r2
10004560:	444b      	add	r3, r9
10004562:	011b      	lsls	r3, r3, #4
10004564:	4498      	add	r8, r3
            if (absolute_time_diff_us(now, entry->target) <= 0) {
10004566:	4643      	mov	r3, r8
10004568:	681a      	ldr	r2, [r3, #0]
1000456a:	685b      	ldr	r3, [r3, #4]
    return to_us_since_boot(to) - to_us_since_boot(from);
1000456c:	0010      	movs	r0, r2
1000456e:	0019      	movs	r1, r3
10004570:	1b80      	subs	r0, r0, r6
10004572:	41b9      	sbcs	r1, r7
10004574:	2900      	cmp	r1, #0
10004576:	dd5f      	ble.n	10004638 <alarm_pool_alarm_callback+0x12c>
                if (hardware_alarm_set_target(alarm_num, entry->target)) {
10004578:	980b      	ldr	r0, [sp, #44]	; 0x2c
1000457a:	f000 fbd1 	bl	10004d20 <hardware_alarm_set_target>
        void *user_data = NULL;
1000457e:	2300      	movs	r3, #0
        absolute_time_t target = nil_time;
10004580:	2600      	movs	r6, #0
        void *user_data = NULL;
10004582:	4698      	mov	r8, r3
        absolute_time_t target = nil_time;
10004584:	2700      	movs	r7, #0
        alarm_callback_t callback = NULL;
10004586:	469a      	mov	sl, r3
        spin_unlock(pool->lock, save);
10004588:	9c07      	ldr	r4, [sp, #28]
1000458a:	6863      	ldr	r3, [r4, #4]
1000458c:	f3bf 8f5f 	dmb	sy
    *lock = 0;
10004590:	465a      	mov	r2, fp
10004592:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10004594:	f385 8810 	msr	PRIMASK, r5
        if (callback) {
10004598:	4653      	mov	r3, sl
1000459a:	2b00      	cmp	r3, #0
1000459c:	d108      	bne.n	100045b0 <alarm_pool_alarm_callback+0xa4>
    } while (again);
1000459e:	2800      	cmp	r0, #0
100045a0:	d1c6      	bne.n	10004530 <alarm_pool_alarm_callback+0x24>
}
100045a2:	b00d      	add	sp, #52	; 0x34
100045a4:	bcf0      	pop	{r4, r5, r6, r7}
100045a6:	46bb      	mov	fp, r7
100045a8:	46b2      	mov	sl, r6
100045aa:	46a9      	mov	r9, r5
100045ac:	46a0      	mov	r8, r4
100045ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return ((uint)id_high << 8u * sizeof(id)) | id;
100045b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
            int64_t repeat = callback(make_public_id(id_high, next_id), user_data);
100045b2:	4641      	mov	r1, r8
    return ((uint)id_high << 8u * sizeof(id)) | id;
100045b4:	0218      	lsls	r0, r3, #8
100045b6:	464b      	mov	r3, r9
100045b8:	4318      	orrs	r0, r3
            int64_t repeat = callback(make_public_id(id_high, next_id), user_data);
100045ba:	47d0      	blx	sl
100045bc:	9008      	str	r0, [sp, #32]
100045be:	9109      	str	r1, [sp, #36]	; 0x24
            save = spin_lock_blocking(pool->lock);
100045c0:	6862      	ldr	r2, [r4, #4]
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
100045c2:	f3ef 8510 	mrs	r5, PRIMASK
    __asm volatile ("cpsid i");
100045c6:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
100045c8:	6813      	ldr	r3, [r2, #0]
100045ca:	2b00      	cmp	r3, #0
100045cc:	d0fc      	beq.n	100045c8 <alarm_pool_alarm_callback+0xbc>
    __asm volatile ("dmb");
100045ce:	9407      	str	r4, [sp, #28]
100045d0:	f3bf 8f5f 	dmb	sy
            if (repeat < 0 && pool->alarm_in_progress) {
100045d4:	9908      	ldr	r1, [sp, #32]
100045d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
100045d8:	2a00      	cmp	r2, #0
100045da:	db48      	blt.n	1000466e <alarm_pool_alarm_callback+0x162>
            } else if (repeat > 0 && pool->alarm_in_progress) {
100045dc:	4311      	orrs	r1, r2
100045de:	d003      	beq.n	100045e8 <alarm_pool_alarm_callback+0xdc>
100045e0:	9b07      	ldr	r3, [sp, #28]
100045e2:	691b      	ldr	r3, [r3, #16]
100045e4:	2b00      	cmp	r3, #0
100045e6:	d15d      	bne.n	100046a4 <alarm_pool_alarm_callback+0x198>
                ph_add_to_free_list(pool->heap, next_id);
100045e8:	9b07      	ldr	r3, [sp, #28]
100045ea:	681b      	ldr	r3, [r3, #0]

bool ph_delete(pheap_t *heap, pheap_node_id_t id);

static inline void ph_add_to_free_list(pheap_t *heap, pheap_node_id_t id) {
    assert(id && !ph_contains(heap, id));
    if (heap->free_tail_id) {
100045ec:	7bd9      	ldrb	r1, [r3, #15]
100045ee:	2900      	cmp	r1, #0
100045f0:	d007      	beq.n	10004602 <alarm_pool_alarm_callback+0xf6>
        ph_get_node(heap, heap->free_tail_id)->sibling = id;
100045f2:	004a      	lsls	r2, r1, #1
100045f4:	1852      	adds	r2, r2, r1
100045f6:	6819      	ldr	r1, [r3, #0]
100045f8:	468c      	mov	ip, r1
100045fa:	4649      	mov	r1, r9
100045fc:	4462      	add	r2, ip
100045fe:	3a03      	subs	r2, #3
10004600:	7051      	strb	r1, [r2, #1]
    }
    heap->free_tail_id = id;
10004602:	464a      	mov	r2, r9
10004604:	73da      	strb	r2, [r3, #15]
    return pool->entry_ids_high + id - 1;
10004606:	464b      	mov	r3, r9
10004608:	9a07      	ldr	r2, [sp, #28]
1000460a:	3b01      	subs	r3, #1
1000460c:	68d1      	ldr	r1, [r2, #12]
                (*get_entry_id_high(pool, next_id))++; // we bump it for next use of id
1000460e:	5cca      	ldrb	r2, [r1, r3]
10004610:	3201      	adds	r2, #1
10004612:	54ca      	strb	r2, [r1, r3]
            pool->alarm_in_progress = 0;
10004614:	465b      	mov	r3, fp
10004616:	9a07      	ldr	r2, [sp, #28]
10004618:	6113      	str	r3, [r2, #16]
            spin_unlock(pool->lock, save);
1000461a:	6853      	ldr	r3, [r2, #4]
1000461c:	f3bf 8f5f 	dmb	sy
    *lock = 0;
10004620:	465a      	mov	r2, fp
10004622:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10004624:	f385 8810 	msr	PRIMASK, r5
    } while (again);
10004628:	e782      	b.n	10004530 <alarm_pool_alarm_callback+0x24>
        void *user_data = NULL;
1000462a:	2300      	movs	r3, #0
        absolute_time_t target = nil_time;
1000462c:	2600      	movs	r6, #0
        void *user_data = NULL;
1000462e:	4698      	mov	r8, r3
        absolute_time_t target = nil_time;
10004630:	2700      	movs	r7, #0
        alarm_callback_t callback = NULL;
10004632:	469a      	mov	sl, r3
        again = false;
10004634:	2000      	movs	r0, #0
10004636:	e7a7      	b.n	10004588 <alarm_pool_alarm_callback+0x7c>
            if (absolute_time_diff_us(now, entry->target) <= 0) {
10004638:	2900      	cmp	r1, #0
1000463a:	d101      	bne.n	10004640 <alarm_pool_alarm_callback+0x134>
1000463c:	2800      	cmp	r0, #0
1000463e:	d19b      	bne.n	10004578 <alarm_pool_alarm_callback+0x6c>
                pheap_node_id_t __unused removed_id = ph_remove_head_reserve(pool->heap, true);
10004640:	2101      	movs	r1, #1
10004642:	0020      	movs	r0, r4
10004644:	f7fd fd54 	bl	100020f0 <ph_remove_head_reserve>
                target = entry->target;
10004648:	4643      	mov	r3, r8
1000464a:	681e      	ldr	r6, [r3, #0]
1000464c:	685f      	ldr	r7, [r3, #4]
                callback = entry->callback;
1000464e:	689b      	ldr	r3, [r3, #8]
                id_high = *get_entry_id_high(pool, next_id);
10004650:	9a07      	ldr	r2, [sp, #28]
                callback = entry->callback;
10004652:	469a      	mov	sl, r3
                user_data = entry->user_data;
10004654:	4643      	mov	r3, r8
10004656:	68db      	ldr	r3, [r3, #12]
10004658:	4698      	mov	r8, r3
                id_high = *get_entry_id_high(pool, next_id);
1000465a:	68d3      	ldr	r3, [r2, #12]
1000465c:	444b      	add	r3, r9
1000465e:	3b01      	subs	r3, #1
10004660:	781b      	ldrb	r3, [r3, #0]
10004662:	930a      	str	r3, [sp, #40]	; 0x28
    return ((uint)id_high << 8u * sizeof(id)) | id;
10004664:	021b      	lsls	r3, r3, #8
10004666:	4303      	orrs	r3, r0
                pool->alarm_in_progress = make_public_id(id_high, removed_id);
10004668:	6113      	str	r3, [r2, #16]
        again = false;
1000466a:	2000      	movs	r0, #0
1000466c:	e78c      	b.n	10004588 <alarm_pool_alarm_callback+0x7c>
            if (repeat < 0 && pool->alarm_in_progress) {
1000466e:	6923      	ldr	r3, [r4, #16]
10004670:	2b00      	cmp	r3, #0
10004672:	d0b9      	beq.n	100045e8 <alarm_pool_alarm_callback+0xdc>
    uint64_t delayed = base + us;
10004674:	0033      	movs	r3, r6
10004676:	003c      	movs	r4, r7
10004678:	1a5b      	subs	r3, r3, r1
1000467a:	4194      	sbcs	r4, r2
1000467c:	001a      	movs	r2, r3
1000467e:	0023      	movs	r3, r4
    if (delayed < base) {
10004680:	42a7      	cmp	r7, r4
10004682:	d819      	bhi.n	100046b8 <alarm_pool_alarm_callback+0x1ac>
10004684:	429f      	cmp	r7, r3
10004686:	d01b      	beq.n	100046c0 <alarm_pool_alarm_callback+0x1b4>
                add_alarm_under_lock(pool, delayed_by_us(get_absolute_time(), repeat), callback, user_data, next_id,
10004688:	4659      	mov	r1, fp
1000468a:	9104      	str	r1, [sp, #16]
1000468c:	2101      	movs	r1, #1
1000468e:	9103      	str	r1, [sp, #12]
10004690:	4649      	mov	r1, r9
10004692:	9102      	str	r1, [sp, #8]
10004694:	4641      	mov	r1, r8
10004696:	9101      	str	r1, [sp, #4]
10004698:	4651      	mov	r1, sl
1000469a:	9807      	ldr	r0, [sp, #28]
1000469c:	9100      	str	r1, [sp, #0]
1000469e:	f7ff fea5 	bl	100043ec <add_alarm_under_lock.isra.0>
100046a2:	e7b7      	b.n	10004614 <alarm_pool_alarm_callback+0x108>
    update_us_since_boot(&t, time_us_64());
100046a4:	f000 fadc 	bl	10004c60 <time_us_64>
    uint64_t delayed = base + us;
100046a8:	9a08      	ldr	r2, [sp, #32]
100046aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
    update_us_since_boot(&t, time_us_64());
100046ac:	0006      	movs	r6, r0
100046ae:	000f      	movs	r7, r1
    uint64_t delayed = base + us;
100046b0:	1992      	adds	r2, r2, r6
100046b2:	417b      	adcs	r3, r7
    if (delayed < base) {
100046b4:	4299      	cmp	r1, r3
100046b6:	d9e5      	bls.n	10004684 <alarm_pool_alarm_callback+0x178>
        delayed = (uint64_t)-1;
100046b8:	2201      	movs	r2, #1
100046ba:	4252      	negs	r2, r2
100046bc:	17d3      	asrs	r3, r2, #31
100046be:	e7e3      	b.n	10004688 <alarm_pool_alarm_callback+0x17c>
    if (delayed < base) {
100046c0:	4296      	cmp	r6, r2
100046c2:	d9e1      	bls.n	10004688 <alarm_pool_alarm_callback+0x17c>
        delayed = (uint64_t)-1;
100046c4:	2201      	movs	r2, #1
100046c6:	4252      	negs	r2, r2
100046c8:	17d3      	asrs	r3, r2, #31
100046ca:	e7dd      	b.n	10004688 <alarm_pool_alarm_callback+0x17c>
100046cc:	20039b80 	.word	0x20039b80
100046d0:	0fffffff 	.word	0x0fffffff

100046d4 <alarm_pool_add_alarm_at.constprop.0>:
alarm_id_t alarm_pool_add_alarm_at(alarm_pool_t *pool, absolute_time_t time, alarm_callback_t callback,
100046d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100046d6:	4657      	mov	r7, sl
100046d8:	464e      	mov	r6, r9
100046da:	46de      	mov	lr, fp
100046dc:	4645      	mov	r5, r8
100046de:	4691      	mov	r9, r2
100046e0:	b5e0      	push	{r5, r6, r7, lr}
100046e2:	0004      	movs	r4, r0
100046e4:	469a      	mov	sl, r3
        uint32_t save = spin_lock_blocking(pool->lock);
100046e6:	6842      	ldr	r2, [r0, #4]
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
100046e8:	f3ef 8810 	mrs	r8, PRIMASK
    __asm volatile ("cpsid i");
100046ec:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
100046ee:	6813      	ldr	r3, [r2, #0]
100046f0:	2b00      	cmp	r3, #0
100046f2:	d0fc      	beq.n	100046ee <alarm_pool_add_alarm_at.constprop.0+0x1a>
    __asm volatile ("dmb");
100046f4:	f3bf 8f5f 	dmb	sy
        id = ph_new_node(pool->heap);
100046f8:	6826      	ldr	r6, [r4, #0]
    if (!heap->free_head_id) return 0;
100046fa:	7bb5      	ldrb	r5, [r6, #14]
100046fc:	2d00      	cmp	r5, #0
100046fe:	d048      	beq.n	10004792 <alarm_pool_add_alarm_at.constprop.0+0xbe>
    return heap->nodes + id - 1;
10004700:	006f      	lsls	r7, r5, #1
10004702:	6833      	ldr	r3, [r6, #0]
10004704:	197f      	adds	r7, r7, r5
10004706:	3f03      	subs	r7, #3
10004708:	19d9      	adds	r1, r3, r7
    heap->free_head_id = ph_get_node(heap, id)->sibling;
1000470a:	784b      	ldrb	r3, [r1, #1]
1000470c:	73b3      	strb	r3, [r6, #14]
    if (!heap->free_head_id) heap->free_tail_id = 0;
1000470e:	2b00      	cmp	r3, #0
10004710:	d100      	bne.n	10004714 <alarm_pool_add_alarm_at.constprop.0+0x40>
10004712:	73f3      	strb	r3, [r6, #15]
    return pool->entries + id - 1;
10004714:	68a2      	ldr	r2, [r4, #8]
10004716:	4b34      	ldr	r3, [pc, #208]	; (100047e8 <alarm_pool_add_alarm_at.constprop.0+0x114>)
10004718:	4694      	mov	ip, r2
        entry->target = time;
1000471a:	464a      	mov	r2, r9
    return pool->entries + id - 1;
1000471c:	18eb      	adds	r3, r5, r3
1000471e:	011b      	lsls	r3, r3, #4
10004720:	4463      	add	r3, ip
        entry->target = time;
10004722:	601a      	str	r2, [r3, #0]
10004724:	4652      	mov	r2, sl
10004726:	605a      	str	r2, [r3, #4]
        entry->callback = callback;
10004728:	4a30      	ldr	r2, [pc, #192]	; (100047ec <alarm_pool_add_alarm_at.constprop.0+0x118>)
1000472a:	609a      	str	r2, [r3, #8]
        entry->user_data = user_data;
1000472c:	2200      	movs	r2, #0
1000472e:	60da      	str	r2, [r3, #12]
    hn->child = hn->sibling = hn->parent = 0;
10004730:	708a      	strb	r2, [r1, #2]
10004732:	704a      	strb	r2, [r1, #1]
10004734:	700a      	strb	r2, [r1, #0]
    heap->root_id = ph_merge_nodes(heap, heap->root_id, id);
10004736:	7b73      	ldrb	r3, [r6, #13]
10004738:	469b      	mov	fp, r3
    if (!a) return b;
1000473a:	2b00      	cmp	r3, #0
1000473c:	d043      	beq.n	100047c6 <alarm_pool_add_alarm_at.constprop.0+0xf2>
    if (heap->comparator(heap->user_data, a, b)) {
1000473e:	002a      	movs	r2, r5
10004740:	0019      	movs	r1, r3
10004742:	68b0      	ldr	r0, [r6, #8]
10004744:	6873      	ldr	r3, [r6, #4]
10004746:	4798      	blx	r3
    return heap->nodes + id - 1;
10004748:	6832      	ldr	r2, [r6, #0]
    if (heap->comparator(heap->user_data, a, b)) {
1000474a:	2800      	cmp	r0, #0
1000474c:	d02f      	beq.n	100047ae <alarm_pool_add_alarm_at.constprop.0+0xda>
    return heap->nodes + id - 1;
1000474e:	465b      	mov	r3, fp
    c->parent = parent_id;
10004750:	4658      	mov	r0, fp
    return heap->nodes + id - 1;
10004752:	005b      	lsls	r3, r3, #1
10004754:	445b      	add	r3, fp
10004756:	19d7      	adds	r7, r2, r7
10004758:	3b03      	subs	r3, #3
    c->parent = parent_id;
1000475a:	70b8      	strb	r0, [r7, #2]
    return heap->nodes + id - 1;
1000475c:	18d1      	adds	r1, r2, r3
    if (!n->child) {
1000475e:	5cd3      	ldrb	r3, [r2, r3]
10004760:	2b00      	cmp	r3, #0
10004762:	d13f      	bne.n	100047e4 <alarm_pool_add_alarm_at.constprop.0+0x110>
    heap->root_id = ph_merge_nodes(heap, heap->root_id, id);
10004764:	465b      	mov	r3, fp
        n->child = child_id;
10004766:	700d      	strb	r5, [r1, #0]
    heap->root_id = ph_merge_nodes(heap, heap->root_id, id);
10004768:	7373      	strb	r3, [r6, #13]
        if (id == ph_insert(pool->heap, id)) {
1000476a:	455d      	cmp	r5, fp
1000476c:	d02c      	beq.n	100047c8 <alarm_pool_add_alarm_at.constprop.0+0xf4>
    bool missed = false;
1000476e:	2600      	movs	r6, #0
        if (id) id_high = *get_entry_id_high(pool, id);
10004770:	68e3      	ldr	r3, [r4, #12]
10004772:	195b      	adds	r3, r3, r5
10004774:	3b01      	subs	r3, #1
10004776:	7819      	ldrb	r1, [r3, #0]
        spin_unlock(pool->lock, save);
10004778:	6863      	ldr	r3, [r4, #4]
1000477a:	f3bf 8f5f 	dmb	sy
    *lock = 0;
1000477e:	2200      	movs	r2, #0
10004780:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10004782:	f388 8810 	msr	PRIMASK, r8
        public_id = missed ? 0 : make_public_id(id_high, id);
10004786:	2000      	movs	r0, #0
10004788:	2e00      	cmp	r6, #0
1000478a:	d10a      	bne.n	100047a2 <alarm_pool_add_alarm_at.constprop.0+0xce>
    return ((uint)id_high << 8u * sizeof(id)) | id;
1000478c:	0208      	lsls	r0, r1, #8
1000478e:	4328      	orrs	r0, r5
10004790:	e007      	b.n	100047a2 <alarm_pool_add_alarm_at.constprop.0+0xce>
        spin_unlock(pool->lock, save);
10004792:	6863      	ldr	r3, [r4, #4]
    __asm volatile ("dmb");
10004794:	f3bf 8f5f 	dmb	sy
    *lock = 0;
10004798:	601d      	str	r5, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
1000479a:	f388 8810 	msr	PRIMASK, r8
            return -1;
1000479e:	2001      	movs	r0, #1
100047a0:	4240      	negs	r0, r0
}
100047a2:	bcf0      	pop	{r4, r5, r6, r7}
100047a4:	46bb      	mov	fp, r7
100047a6:	46b2      	mov	sl, r6
100047a8:	46a9      	mov	r9, r5
100047aa:	46a0      	mov	r8, r4
100047ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return heap->nodes + id - 1;
100047ae:	465b      	mov	r3, fp
100047b0:	005b      	lsls	r3, r3, #1
100047b2:	445b      	add	r3, fp
100047b4:	3b03      	subs	r3, #3
100047b6:	18d3      	adds	r3, r2, r3
    c->parent = parent_id;
100047b8:	709d      	strb	r5, [r3, #2]
    return heap->nodes + id - 1;
100047ba:	19d1      	adds	r1, r2, r7
    if (!n->child) {
100047bc:	5dd2      	ldrb	r2, [r2, r7]
100047be:	2a00      	cmp	r2, #0
100047c0:	d10e      	bne.n	100047e0 <alarm_pool_add_alarm_at.constprop.0+0x10c>
        n->child = child_id;
100047c2:	465b      	mov	r3, fp
100047c4:	700b      	strb	r3, [r1, #0]
    heap->root_id = ph_merge_nodes(heap, heap->root_id, id);
100047c6:	7375      	strb	r5, [r6, #13]
            bool is_missed = hardware_alarm_set_target(pool->hardware_alarm_num, time);
100047c8:	464a      	mov	r2, r9
100047ca:	4653      	mov	r3, sl
100047cc:	7d20      	ldrb	r0, [r4, #20]
100047ce:	f000 faa7 	bl	10004d20 <hardware_alarm_set_target>
100047d2:	1e06      	subs	r6, r0, #0
            if (is_missed && !create_if_past) {
100047d4:	d0cb      	beq.n	1000476e <alarm_pool_add_alarm_at.constprop.0+0x9a>
                ph_delete(pool->heap, id);
100047d6:	0029      	movs	r1, r5
100047d8:	6820      	ldr	r0, [r4, #0]
100047da:	f7fd fd07 	bl	100021ec <ph_delete>
100047de:	e7c7      	b.n	10004770 <alarm_pool_add_alarm_at.constprop.0+0x9c>
        c->sibling = n->child;
100047e0:	705a      	strb	r2, [r3, #1]
100047e2:	e7ee      	b.n	100047c2 <alarm_pool_add_alarm_at.constprop.0+0xee>
100047e4:	707b      	strb	r3, [r7, #1]
100047e6:	e7bd      	b.n	10004764 <alarm_pool_add_alarm_at.constprop.0+0x90>
100047e8:	0fffffff 	.word	0x0fffffff
100047ec:	100043e5 	.word	0x100043e5

100047f0 <alarm_pool_init_default>:
void alarm_pool_init_default() {
100047f0:	b570      	push	{r4, r5, r6, lr}
    if (!default_alarm_pool) {
100047f2:	4c18      	ldr	r4, [pc, #96]	; (10004854 <alarm_pool_init_default+0x64>)
100047f4:	6823      	ldr	r3, [r4, #0]
100047f6:	2b00      	cmp	r3, #0
100047f8:	d000      	beq.n	100047fc <alarm_pool_init_default+0xc>
}
100047fa:	bd70      	pop	{r4, r5, r6, pc}
    hardware_alarm_claim(hardware_alarm_num);
100047fc:	2003      	movs	r0, #3
100047fe:	f000 fa23 	bl	10004c48 <hardware_alarm_claim>
    hardware_alarm_cancel(hardware_alarm_num);
10004802:	2003      	movs	r0, #3
10004804:	f000 faee 	bl	10004de4 <hardware_alarm_cancel>
    hardware_alarm_set_callback(hardware_alarm_num, alarm_pool_alarm_callback);
10004808:	4913      	ldr	r1, [pc, #76]	; (10004858 <alarm_pool_init_default+0x68>)
1000480a:	2003      	movs	r0, #3
1000480c:	f000 fa42 	bl	10004c94 <hardware_alarm_set_callback>
    alarm_pool_t *pool = (alarm_pool_t *)malloc(sizeof(alarm_pool_t));
10004810:	2018      	movs	r0, #24
10004812:	f7fd fd29 	bl	10002268 <__wrap_malloc>
10004816:	0005      	movs	r5, r0
    pool->lock = spin_lock_instance(next_striped_spin_lock_num());
10004818:	f7ff fdae 	bl	10004378 <next_striped_spin_lock_num>
    return (spin_lock_t *) (SIO_BASE + SIO_SPINLOCK0_OFFSET + lock_num * 4);
1000481c:	4b0f      	ldr	r3, [pc, #60]	; (1000485c <alarm_pool_init_default+0x6c>)
    pool->heap = ph_create(max_timers, timer_pool_entry_comparator, pool);
1000481e:	002a      	movs	r2, r5
10004820:	469c      	mov	ip, r3
10004822:	4460      	add	r0, ip
10004824:	0080      	lsls	r0, r0, #2
10004826:	490e      	ldr	r1, [pc, #56]	; (10004860 <alarm_pool_init_default+0x70>)
    pool->lock = spin_lock_instance(next_striped_spin_lock_num());
10004828:	6068      	str	r0, [r5, #4]
    pool->heap = ph_create(max_timers, timer_pool_entry_comparator, pool);
1000482a:	2010      	movs	r0, #16
1000482c:	f7fd fb6a 	bl	10001f04 <ph_create>
    pool->entries = (alarm_pool_entry_t *)calloc(max_timers, sizeof(alarm_pool_entry_t));
10004830:	2110      	movs	r1, #16
    pool->heap = ph_create(max_timers, timer_pool_entry_comparator, pool);
10004832:	6028      	str	r0, [r5, #0]
    pool->entries = (alarm_pool_entry_t *)calloc(max_timers, sizeof(alarm_pool_entry_t));
10004834:	2010      	movs	r0, #16
10004836:	f7fd fd1b 	bl	10002270 <__wrap_calloc>
    pool->entry_ids_high = (uint8_t *)calloc(max_timers, sizeof(uint8_t));
1000483a:	2101      	movs	r1, #1
    pool->entries = (alarm_pool_entry_t *)calloc(max_timers, sizeof(alarm_pool_entry_t));
1000483c:	60a8      	str	r0, [r5, #8]
    pool->entry_ids_high = (uint8_t *)calloc(max_timers, sizeof(uint8_t));
1000483e:	2010      	movs	r0, #16
10004840:	f7fd fd16 	bl	10002270 <__wrap_calloc>
    pool->hardware_alarm_num = hardware_alarm_num;
10004844:	2303      	movs	r3, #3
10004846:	752b      	strb	r3, [r5, #20]
    pools[hardware_alarm_num] = pool;
10004848:	4b06      	ldr	r3, [pc, #24]	; (10004864 <alarm_pool_init_default+0x74>)
    pool->entry_ids_high = (uint8_t *)calloc(max_timers, sizeof(uint8_t));
1000484a:	60e8      	str	r0, [r5, #12]
    pools[hardware_alarm_num] = pool;
1000484c:	60dd      	str	r5, [r3, #12]
        default_alarm_pool = alarm_pool_create(PICO_TIME_DEFAULT_ALARM_POOL_HARDWARE_ALARM_NUM,
1000484e:	6025      	str	r5, [r4, #0]
}
10004850:	e7d3      	b.n	100047fa <alarm_pool_init_default+0xa>
10004852:	46c0      	nop			; (mov r8, r8)
10004854:	200394bc 	.word	0x200394bc
10004858:	1000450d 	.word	0x1000450d
1000485c:	34000040 	.word	0x34000040
10004860:	100043b1 	.word	0x100043b1
10004864:	20039b80 	.word	0x20039b80

10004868 <alarm_pool_get_default>:
    return default_alarm_pool;
10004868:	4b01      	ldr	r3, [pc, #4]	; (10004870 <alarm_pool_get_default+0x8>)
1000486a:	6818      	ldr	r0, [r3, #0]
}
1000486c:	4770      	bx	lr
1000486e:	46c0      	nop			; (mov r8, r8)
10004870:	200394bc 	.word	0x200394bc

10004874 <alarm_pool_add_alarm_at>:
                                   void *user_data, bool fire_if_past) {
10004874:	b5f0      	push	{r4, r5, r6, r7, lr}
10004876:	46de      	mov	lr, fp
10004878:	464e      	mov	r6, r9
1000487a:	4645      	mov	r5, r8
1000487c:	4657      	mov	r7, sl
1000487e:	b5e0      	push	{r5, r6, r7, lr}
10004880:	b085      	sub	sp, #20
10004882:	9301      	str	r3, [sp, #4]
10004884:	ab10      	add	r3, sp, #64	; 0x40
10004886:	781b      	ldrb	r3, [r3, #0]
10004888:	0006      	movs	r6, r0
1000488a:	9303      	str	r3, [sp, #12]
    bool missed = false;
1000488c:	2300      	movs	r3, #0
1000488e:	469b      	mov	fp, r3
    hn->child = hn->sibling = hn->parent = 0;
10004890:	4698      	mov	r8, r3
                                   void *user_data, bool fire_if_past) {
10004892:	9200      	str	r2, [sp, #0]
        uint32_t save = spin_lock_blocking(pool->lock);
10004894:	6872      	ldr	r2, [r6, #4]
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
10004896:	f3ef 8a10 	mrs	sl, PRIMASK
    __asm volatile ("cpsid i");
1000489a:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
1000489c:	6813      	ldr	r3, [r2, #0]
1000489e:	2b00      	cmp	r3, #0
100048a0:	d0fc      	beq.n	1000489c <alarm_pool_add_alarm_at+0x28>
    __asm volatile ("dmb");
100048a2:	f3bf 8f5f 	dmb	sy
        id = ph_new_node(pool->heap);
100048a6:	6835      	ldr	r5, [r6, #0]
    if (!heap->free_head_id) return 0;
100048a8:	7bac      	ldrb	r4, [r5, #14]
100048aa:	2c00      	cmp	r4, #0
100048ac:	d100      	bne.n	100048b0 <alarm_pool_add_alarm_at+0x3c>
100048ae:	e080      	b.n	100049b2 <alarm_pool_add_alarm_at+0x13e>
    return heap->nodes + id - 1;
100048b0:	0067      	lsls	r7, r4, #1
100048b2:	682b      	ldr	r3, [r5, #0]
100048b4:	193f      	adds	r7, r7, r4
100048b6:	3f03      	subs	r7, #3
100048b8:	19db      	adds	r3, r3, r7
    heap->free_head_id = ph_get_node(heap, id)->sibling;
100048ba:	785a      	ldrb	r2, [r3, #1]
100048bc:	73aa      	strb	r2, [r5, #14]
    if (!heap->free_head_id) heap->free_tail_id = 0;
100048be:	2a00      	cmp	r2, #0
100048c0:	d100      	bne.n	100048c4 <alarm_pool_add_alarm_at+0x50>
100048c2:	73ea      	strb	r2, [r5, #15]
    return pool->entries + id - 1;
100048c4:	68b1      	ldr	r1, [r6, #8]
100048c6:	4a55      	ldr	r2, [pc, #340]	; (10004a1c <alarm_pool_add_alarm_at+0x1a8>)
100048c8:	468c      	mov	ip, r1
        entry->target = time;
100048ca:	9800      	ldr	r0, [sp, #0]
100048cc:	9901      	ldr	r1, [sp, #4]
    return pool->entries + id - 1;
100048ce:	18a2      	adds	r2, r4, r2
100048d0:	0112      	lsls	r2, r2, #4
100048d2:	4462      	add	r2, ip
        entry->target = time;
100048d4:	6010      	str	r0, [r2, #0]
100048d6:	6051      	str	r1, [r2, #4]
        entry->callback = callback;
100048d8:	990e      	ldr	r1, [sp, #56]	; 0x38
100048da:	6091      	str	r1, [r2, #8]
        entry->user_data = user_data;
100048dc:	990f      	ldr	r1, [sp, #60]	; 0x3c
100048de:	60d1      	str	r1, [r2, #12]
    hn->child = hn->sibling = hn->parent = 0;
100048e0:	4642      	mov	r2, r8
100048e2:	709a      	strb	r2, [r3, #2]
100048e4:	705a      	strb	r2, [r3, #1]
100048e6:	701a      	strb	r2, [r3, #0]
    heap->root_id = ph_merge_nodes(heap, heap->root_id, id);
100048e8:	7b6b      	ldrb	r3, [r5, #13]
100048ea:	4699      	mov	r9, r3
    if (!a) return b;
100048ec:	2b00      	cmp	r3, #0
100048ee:	d100      	bne.n	100048f2 <alarm_pool_add_alarm_at+0x7e>
100048f0:	e07d      	b.n	100049ee <alarm_pool_add_alarm_at+0x17a>
    if (heap->comparator(heap->user_data, a, b)) {
100048f2:	0022      	movs	r2, r4
100048f4:	0019      	movs	r1, r3
100048f6:	68a8      	ldr	r0, [r5, #8]
100048f8:	686b      	ldr	r3, [r5, #4]
100048fa:	4798      	blx	r3
    return heap->nodes + id - 1;
100048fc:	682a      	ldr	r2, [r5, #0]
    if (heap->comparator(heap->user_data, a, b)) {
100048fe:	2800      	cmp	r0, #0
10004900:	d069      	beq.n	100049d6 <alarm_pool_add_alarm_at+0x162>
    return heap->nodes + id - 1;
10004902:	464b      	mov	r3, r9
    c->parent = parent_id;
10004904:	4648      	mov	r0, r9
    return heap->nodes + id - 1;
10004906:	005b      	lsls	r3, r3, #1
10004908:	444b      	add	r3, r9
1000490a:	19d7      	adds	r7, r2, r7
1000490c:	3b03      	subs	r3, #3
    c->parent = parent_id;
1000490e:	70b8      	strb	r0, [r7, #2]
    return heap->nodes + id - 1;
10004910:	18d1      	adds	r1, r2, r3
    if (!n->child) {
10004912:	5cd3      	ldrb	r3, [r2, r3]
10004914:	2b00      	cmp	r3, #0
10004916:	d000      	beq.n	1000491a <alarm_pool_add_alarm_at+0xa6>
10004918:	e07c      	b.n	10004a14 <alarm_pool_add_alarm_at+0x1a0>
    heap->root_id = ph_merge_nodes(heap, heap->root_id, id);
1000491a:	464b      	mov	r3, r9
        n->child = child_id;
1000491c:	700c      	strb	r4, [r1, #0]
    heap->root_id = ph_merge_nodes(heap, heap->root_id, id);
1000491e:	736b      	strb	r3, [r5, #13]
        if (id == ph_insert(pool->heap, id)) {
10004920:	454c      	cmp	r4, r9
10004922:	d065      	beq.n	100049f0 <alarm_pool_add_alarm_at+0x17c>
        if (id) id_high = *get_entry_id_high(pool, id);
10004924:	68f3      	ldr	r3, [r6, #12]
10004926:	191b      	adds	r3, r3, r4
10004928:	3b01      	subs	r3, #1
1000492a:	7818      	ldrb	r0, [r3, #0]
        spin_unlock(pool->lock, save);
1000492c:	6873      	ldr	r3, [r6, #4]
1000492e:	f3bf 8f5f 	dmb	sy
    *lock = 0;
10004932:	4642      	mov	r2, r8
10004934:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10004936:	f38a 8810 	msr	PRIMASK, sl
        public_id = missed ? 0 : make_public_id(id_high, id);
1000493a:	465b      	mov	r3, fp
1000493c:	2b00      	cmp	r3, #0
1000493e:	d108      	bne.n	10004952 <alarm_pool_add_alarm_at+0xde>
    return ((uint)id_high << 8u * sizeof(id)) | id;
10004940:	0200      	lsls	r0, r0, #8
10004942:	4320      	orrs	r0, r4
}
10004944:	b005      	add	sp, #20
10004946:	bcf0      	pop	{r4, r5, r6, r7}
10004948:	46bb      	mov	fp, r7
1000494a:	46b2      	mov	sl, r6
1000494c:	46a9      	mov	r9, r5
1000494e:	46a0      	mov	r8, r4
10004950:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (missed && fire_if_past) {
10004952:	9b03      	ldr	r3, [sp, #12]
10004954:	2b00      	cmp	r3, #0
10004956:	d05f      	beq.n	10004a18 <alarm_pool_add_alarm_at+0x1a4>
            int64_t repeat = callback(public_id, user_data);
10004958:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1000495a:	2000      	movs	r0, #0
1000495c:	990f      	ldr	r1, [sp, #60]	; 0x3c
1000495e:	4798      	blx	r3
            if (!repeat) {
10004960:	0003      	movs	r3, r0
            int64_t repeat = callback(public_id, user_data);
10004962:	0004      	movs	r4, r0
10004964:	000d      	movs	r5, r1
            if (!repeat) {
10004966:	430b      	orrs	r3, r1
10004968:	d056      	beq.n	10004a18 <alarm_pool_add_alarm_at+0x1a4>
            } else if (repeat < 0) {
1000496a:	2900      	cmp	r1, #0
1000496c:	da0d      	bge.n	1000498a <alarm_pool_add_alarm_at+0x116>
    uint64_t delayed = base + us;
1000496e:	9800      	ldr	r0, [sp, #0]
10004970:	9901      	ldr	r1, [sp, #4]
10004972:	0002      	movs	r2, r0
10004974:	000b      	movs	r3, r1
10004976:	1b12      	subs	r2, r2, r4
10004978:	41ab      	sbcs	r3, r5
    if (delayed < base) {
1000497a:	4299      	cmp	r1, r3
1000497c:	d813      	bhi.n	100049a6 <alarm_pool_add_alarm_at+0x132>
1000497e:	d021      	beq.n	100049c4 <alarm_pool_add_alarm_at+0x150>
10004980:	9200      	str	r2, [sp, #0]
10004982:	9301      	str	r3, [sp, #4]
        delayed = (uint64_t)-1;
10004984:	9b03      	ldr	r3, [sp, #12]
10004986:	469b      	mov	fp, r3
10004988:	e784      	b.n	10004894 <alarm_pool_add_alarm_at+0x20>
    update_us_since_boot(&t, time_us_64());
1000498a:	f000 f969 	bl	10004c60 <time_us_64>
1000498e:	0002      	movs	r2, r0
10004990:	000b      	movs	r3, r1
    uint64_t delayed = base + us;
10004992:	18a4      	adds	r4, r4, r2
10004994:	415d      	adcs	r5, r3
10004996:	9400      	str	r4, [sp, #0]
10004998:	9501      	str	r5, [sp, #4]
    if (delayed < base) {
1000499a:	42a9      	cmp	r1, r5
1000499c:	d803      	bhi.n	100049a6 <alarm_pool_add_alarm_at+0x132>
1000499e:	d1f1      	bne.n	10004984 <alarm_pool_add_alarm_at+0x110>
100049a0:	9900      	ldr	r1, [sp, #0]
100049a2:	428a      	cmp	r2, r1
100049a4:	d9ee      	bls.n	10004984 <alarm_pool_add_alarm_at+0x110>
        delayed = (uint64_t)-1;
100049a6:	2301      	movs	r3, #1
100049a8:	425b      	negs	r3, r3
100049aa:	17dc      	asrs	r4, r3, #31
100049ac:	9300      	str	r3, [sp, #0]
100049ae:	9401      	str	r4, [sp, #4]
100049b0:	e7e8      	b.n	10004984 <alarm_pool_add_alarm_at+0x110>
        spin_unlock(pool->lock, save);
100049b2:	6873      	ldr	r3, [r6, #4]
    __asm volatile ("dmb");
100049b4:	f3bf 8f5f 	dmb	sy
    *lock = 0;
100049b8:	601c      	str	r4, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
100049ba:	f38a 8810 	msr	PRIMASK, sl
            return -1;
100049be:	2001      	movs	r0, #1
100049c0:	4240      	negs	r0, r0
100049c2:	e7bf      	b.n	10004944 <alarm_pool_add_alarm_at+0xd0>
    if (delayed < base) {
100049c4:	9900      	ldr	r1, [sp, #0]
100049c6:	4291      	cmp	r1, r2
100049c8:	d9da      	bls.n	10004980 <alarm_pool_add_alarm_at+0x10c>
        delayed = (uint64_t)-1;
100049ca:	2301      	movs	r3, #1
100049cc:	425b      	negs	r3, r3
100049ce:	17dc      	asrs	r4, r3, #31
100049d0:	9300      	str	r3, [sp, #0]
100049d2:	9401      	str	r4, [sp, #4]
100049d4:	e7d6      	b.n	10004984 <alarm_pool_add_alarm_at+0x110>
    return heap->nodes + id - 1;
100049d6:	464b      	mov	r3, r9
100049d8:	005b      	lsls	r3, r3, #1
100049da:	444b      	add	r3, r9
100049dc:	3b03      	subs	r3, #3
100049de:	18d3      	adds	r3, r2, r3
    c->parent = parent_id;
100049e0:	709c      	strb	r4, [r3, #2]
    return heap->nodes + id - 1;
100049e2:	19d1      	adds	r1, r2, r7
    if (!n->child) {
100049e4:	5dd2      	ldrb	r2, [r2, r7]
100049e6:	2a00      	cmp	r2, #0
100049e8:	d110      	bne.n	10004a0c <alarm_pool_add_alarm_at+0x198>
        n->child = child_id;
100049ea:	464b      	mov	r3, r9
100049ec:	700b      	strb	r3, [r1, #0]
    heap->root_id = ph_merge_nodes(heap, heap->root_id, id);
100049ee:	736c      	strb	r4, [r5, #13]
            bool is_missed = hardware_alarm_set_target(pool->hardware_alarm_num, time);
100049f0:	7d30      	ldrb	r0, [r6, #20]
100049f2:	9a00      	ldr	r2, [sp, #0]
100049f4:	9b01      	ldr	r3, [sp, #4]
100049f6:	f000 f993 	bl	10004d20 <hardware_alarm_set_target>
100049fa:	4683      	mov	fp, r0
            if (is_missed && !create_if_past) {
100049fc:	2800      	cmp	r0, #0
100049fe:	d100      	bne.n	10004a02 <alarm_pool_add_alarm_at+0x18e>
10004a00:	e790      	b.n	10004924 <alarm_pool_add_alarm_at+0xb0>
                ph_delete(pool->heap, id);
10004a02:	0021      	movs	r1, r4
10004a04:	6830      	ldr	r0, [r6, #0]
10004a06:	f7fd fbf1 	bl	100021ec <ph_delete>
10004a0a:	e78b      	b.n	10004924 <alarm_pool_add_alarm_at+0xb0>
        c->sibling = n->child;
10004a0c:	705a      	strb	r2, [r3, #1]
        n->child = child_id;
10004a0e:	464b      	mov	r3, r9
10004a10:	700b      	strb	r3, [r1, #0]
10004a12:	e7ec      	b.n	100049ee <alarm_pool_add_alarm_at+0x17a>
        c->sibling = n->child;
10004a14:	707b      	strb	r3, [r7, #1]
10004a16:	e780      	b.n	1000491a <alarm_pool_add_alarm_at+0xa6>
    bool missed = false;
10004a18:	2000      	movs	r0, #0
    return public_id;
10004a1a:	e793      	b.n	10004944 <alarm_pool_add_alarm_at+0xd0>
10004a1c:	0fffffff 	.word	0x0fffffff

10004a20 <alarm_pool_cancel_alarm>:
bool alarm_pool_cancel_alarm(alarm_pool_t *pool, alarm_id_t alarm_id) {
10004a20:	b570      	push	{r4, r5, r6, lr}
    uint32_t save = spin_lock_blocking(pool->lock);
10004a22:	6842      	ldr	r2, [r0, #4]
bool alarm_pool_cancel_alarm(alarm_pool_t *pool, alarm_id_t alarm_id) {
10004a24:	0004      	movs	r4, r0
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
10004a26:	f3ef 8510 	mrs	r5, PRIMASK
    __asm volatile ("cpsid i");
10004a2a:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
10004a2c:	6813      	ldr	r3, [r2, #0]
10004a2e:	2b00      	cmp	r3, #0
10004a30:	d0fc      	beq.n	10004a2c <alarm_pool_cancel_alarm+0xc>
    __asm volatile ("dmb");
10004a32:	f3bf 8f5f 	dmb	sy
    if (ph_contains(pool->heap, id)) {
10004a36:	6820      	ldr	r0, [r4, #0]
    pheap_node_id_t id = (pheap_node_id_t) alarm_id;
10004a38:	b2ce      	uxtb	r6, r1
    return id == heap->root_id || ph_get_node(heap, id)->parent;
10004a3a:	7b43      	ldrb	r3, [r0, #13]
10004a3c:	42b3      	cmp	r3, r6
10004a3e:	d00a      	beq.n	10004a56 <alarm_pool_cancel_alarm+0x36>
    return heap->nodes + id - 1;
10004a40:	23ff      	movs	r3, #255	; 0xff
10004a42:	400b      	ands	r3, r1
    return id == heap->root_id || ph_get_node(heap, id)->parent;
10004a44:	005a      	lsls	r2, r3, #1
10004a46:	18d3      	adds	r3, r2, r3
10004a48:	6802      	ldr	r2, [r0, #0]
10004a4a:	4694      	mov	ip, r2
10004a4c:	4463      	add	r3, ip
10004a4e:	3b03      	subs	r3, #3
10004a50:	789b      	ldrb	r3, [r3, #2]
10004a52:	2b00      	cmp	r3, #0
10004a54:	d013      	beq.n	10004a7e <alarm_pool_cancel_alarm+0x5e>
        if (id_high == *get_entry_id_high(pool, id)) {
10004a56:	68e2      	ldr	r2, [r4, #12]
    return heap->nodes + id - 1;
10004a58:	23ff      	movs	r3, #255	; 0xff
10004a5a:	4694      	mov	ip, r2
10004a5c:	400b      	ands	r3, r1
10004a5e:	4463      	add	r3, ip
10004a60:	3b01      	subs	r3, #1
        uint8_t id_high = (uint8_t)((uint)alarm_id >> 8u * sizeof(pheap_node_id_t));
10004a62:	0a0a      	lsrs	r2, r1, #8
        if (id_high == *get_entry_id_high(pool, id)) {
10004a64:	7819      	ldrb	r1, [r3, #0]
10004a66:	b2d2      	uxtb	r2, r2
10004a68:	4291      	cmp	r1, r2
10004a6a:	d00e      	beq.n	10004a8a <alarm_pool_cancel_alarm+0x6a>
    bool rc = false;
10004a6c:	2000      	movs	r0, #0
    spin_unlock(pool->lock, save);
10004a6e:	6863      	ldr	r3, [r4, #4]
10004a70:	f3bf 8f5f 	dmb	sy
    *lock = 0;
10004a74:	2200      	movs	r2, #0
10004a76:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10004a78:	f385 8810 	msr	PRIMASK, r5
}
10004a7c:	bd70      	pop	{r4, r5, r6, pc}
        if (alarm_id == pool->alarm_in_progress) {
10004a7e:	6922      	ldr	r2, [r4, #16]
10004a80:	428a      	cmp	r2, r1
10004a82:	d1f3      	bne.n	10004a6c <alarm_pool_cancel_alarm+0x4c>
    bool rc = false;
10004a84:	2000      	movs	r0, #0
            pool->alarm_in_progress = 0;
10004a86:	6123      	str	r3, [r4, #16]
10004a88:	e7f1      	b.n	10004a6e <alarm_pool_cancel_alarm+0x4e>
            rc = ph_delete(pool->heap, id);
10004a8a:	0031      	movs	r1, r6
10004a8c:	f7fd fbae 	bl	100021ec <ph_delete>
10004a90:	e7ed      	b.n	10004a6e <alarm_pool_cancel_alarm+0x4e>
10004a92:	46c0      	nop			; (mov r8, r8)

10004a94 <sleep_ms>:
    }
#endif

}

void sleep_ms(uint32_t ms) {
10004a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10004a96:	0004      	movs	r4, r0
    update_us_since_boot(&t, time_us_64());
10004a98:	f000 f8e2 	bl	10004c60 <time_us_64>
    sleep_us(ms * 1000ull);
10004a9c:	22fa      	movs	r2, #250	; 0xfa
10004a9e:	0006      	movs	r6, r0
10004aa0:	000f      	movs	r7, r1
10004aa2:	0020      	movs	r0, r4
10004aa4:	2300      	movs	r3, #0
10004aa6:	2100      	movs	r1, #0
10004aa8:	0092      	lsls	r2, r2, #2
10004aaa:	f7fc fc03 	bl	100012b4 <__wrap___aeabi_lmul>
    uint64_t delayed = base + us;
10004aae:	1980      	adds	r0, r0, r6
10004ab0:	4179      	adcs	r1, r7
10004ab2:	0004      	movs	r4, r0
10004ab4:	000d      	movs	r5, r1
    if (delayed < base) {
10004ab6:	428f      	cmp	r7, r1
10004ab8:	d81a      	bhi.n	10004af0 <sleep_ms+0x5c>
10004aba:	d017      	beq.n	10004aec <sleep_ms+0x58>
    uint64_t t_before_us = t_us - PICO_TIME_SLEEP_OVERHEAD_ADJUST_US;
10004abc:	2606      	movs	r6, #6
10004abe:	4276      	negs	r6, r6
10004ac0:	17f7      	asrs	r7, r6, #31
10004ac2:	1936      	adds	r6, r6, r4
10004ac4:	416f      	adcs	r7, r5
    if (t_before_us > t_us) t_before_us = 0;
10004ac6:	42af      	cmp	r7, r5
10004ac8:	d937      	bls.n	10004b3a <sleep_ms+0xa6>
10004aca:	2600      	movs	r6, #0
10004acc:	2700      	movs	r7, #0
    update_us_since_boot(&t, time_us_64());
10004ace:	f000 f8c7 	bl	10004c60 <time_us_64>
    return to_us_since_boot(to) - to_us_since_boot(from);
10004ad2:	0032      	movs	r2, r6
10004ad4:	003b      	movs	r3, r7
10004ad6:	1a12      	subs	r2, r2, r0
10004ad8:	418b      	sbcs	r3, r1
    if (absolute_time_diff_us(get_absolute_time(), t_before) > 0) {
10004ada:	2b00      	cmp	r3, #0
10004adc:	dc16      	bgt.n	10004b0c <sleep_ms+0x78>
10004ade:	2b00      	cmp	r3, #0
10004ae0:	d028      	beq.n	10004b34 <sleep_ms+0xa0>
    busy_wait_until(t);
10004ae2:	0029      	movs	r1, r5
10004ae4:	0020      	movs	r0, r4
10004ae6:	f000 f8c5 	bl	10004c74 <busy_wait_until>
}
10004aea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (delayed < base) {
10004aec:	4286      	cmp	r6, r0
10004aee:	d9e5      	bls.n	10004abc <sleep_ms+0x28>
    uint64_t t_before_us = t_us - PICO_TIME_SLEEP_OVERHEAD_ADJUST_US;
10004af0:	2607      	movs	r6, #7
10004af2:	4276      	negs	r6, r6
10004af4:	17f7      	asrs	r7, r6, #31
    update_us_since_boot(&t, time_us_64());
10004af6:	f000 f8b3 	bl	10004c60 <time_us_64>
    return to_us_since_boot(to) - to_us_since_boot(from);
10004afa:	0032      	movs	r2, r6
10004afc:	003b      	movs	r3, r7
10004afe:	1a12      	subs	r2, r2, r0
10004b00:	418b      	sbcs	r3, r1
        delayed = (uint64_t)-1;
10004b02:	2401      	movs	r4, #1
10004b04:	4264      	negs	r4, r4
10004b06:	17e5      	asrs	r5, r4, #31
    if (absolute_time_diff_us(get_absolute_time(), t_before) > 0) {
10004b08:	2b00      	cmp	r3, #0
10004b0a:	dde8      	ble.n	10004ade <sleep_ms+0x4a>
    return default_alarm_pool;
10004b0c:	4b0d      	ldr	r3, [pc, #52]	; (10004b44 <sleep_ms+0xb0>)
    return alarm_pool_add_alarm_at(alarm_pool_get_default(), time, callback, user_data, fire_if_past);
10004b0e:	0032      	movs	r2, r6
10004b10:	6818      	ldr	r0, [r3, #0]
10004b12:	003b      	movs	r3, r7
10004b14:	f7ff fdde 	bl	100046d4 <alarm_pool_add_alarm_at.constprop.0>
        if (add_alarm_at(t_before, sev_callback, NULL, false) >= 0) {
10004b18:	2800      	cmp	r0, #0
10004b1a:	dbe2      	blt.n	10004ae2 <sleep_ms+0x4e>
    uint32_t hi_target = target >> 32u;
10004b1c:	0039      	movs	r1, r7
    uint32_t hi = timer_hw->timerawh;
10004b1e:	4a0a      	ldr	r2, [pc, #40]	; (10004b48 <sleep_ms+0xb4>)
10004b20:	6a53      	ldr	r3, [r2, #36]	; 0x24
    return (hi >= hi_target && (timer_hw->timerawl >= (uint32_t) target || hi != hi_target));
10004b22:	4299      	cmp	r1, r3
10004b24:	d804      	bhi.n	10004b30 <sleep_ms+0x9c>
10004b26:	6a90      	ldr	r0, [r2, #40]	; 0x28
10004b28:	4286      	cmp	r6, r0
10004b2a:	d9da      	bls.n	10004ae2 <sleep_ms+0x4e>
10004b2c:	4299      	cmp	r1, r3
10004b2e:	d1d8      	bne.n	10004ae2 <sleep_ms+0x4e>
    __asm volatile ("wfe");
10004b30:	bf20      	wfe
}
10004b32:	e7f5      	b.n	10004b20 <sleep_ms+0x8c>
    if (absolute_time_diff_us(get_absolute_time(), t_before) > 0) {
10004b34:	2a00      	cmp	r2, #0
10004b36:	d0d4      	beq.n	10004ae2 <sleep_ms+0x4e>
10004b38:	e7e8      	b.n	10004b0c <sleep_ms+0x78>
    if (t_before_us > t_us) t_before_us = 0;
10004b3a:	42af      	cmp	r7, r5
10004b3c:	d1c7      	bne.n	10004ace <sleep_ms+0x3a>
10004b3e:	42a6      	cmp	r6, r4
10004b40:	d8c3      	bhi.n	10004aca <sleep_ms+0x36>
10004b42:	e7c4      	b.n	10004ace <sleep_ms+0x3a>
10004b44:	200394bc 	.word	0x200394bc
10004b48:	40054000 	.word	0x40054000

10004b4c <best_effort_wfe_or_timeout>:

bool best_effort_wfe_or_timeout(absolute_time_t timeout_timestamp) {
10004b4c:	b570      	push	{r4, r5, r6, lr}
    return default_alarm_pool;
10004b4e:	4d0e      	ldr	r5, [pc, #56]	; (10004b88 <best_effort_wfe_or_timeout+0x3c>)
10004b50:	0002      	movs	r2, r0
10004b52:	000b      	movs	r3, r1
bool best_effort_wfe_or_timeout(absolute_time_t timeout_timestamp) {
10004b54:	0006      	movs	r6, r0
10004b56:	6828      	ldr	r0, [r5, #0]
10004b58:	000c      	movs	r4, r1
10004b5a:	f7ff fdbb 	bl	100046d4 <alarm_pool_add_alarm_at.constprop.0>
10004b5e:	1e01      	subs	r1, r0, #0
#if !PICO_TIME_DEFAULT_ALARM_POOL_DISABLED
    alarm_id_t id;
    id = add_alarm_at(timeout_timestamp, sev_callback, NULL, false);
    if (id <= 0) {
10004b60:	dd03      	ble.n	10004b6a <best_effort_wfe_or_timeout+0x1e>
    __asm volatile ("wfe");
10004b62:	bf20      	wfe
 * \param alarm_id the alarm
 * \return true if the alarm was cancelled, false if it didn't exist
 * \sa alarm_id_t for a note on reuse of IDs
 */
static inline bool cancel_alarm(alarm_id_t alarm_id) {
    return alarm_pool_cancel_alarm(alarm_pool_get_default(), alarm_id);
10004b64:	6828      	ldr	r0, [r5, #0]
10004b66:	f7ff ff5b 	bl	10004a20 <alarm_pool_cancel_alarm>
    uint32_t hi = timer_hw->timerawh;
10004b6a:	4b08      	ldr	r3, [pc, #32]	; (10004b8c <best_effort_wfe_or_timeout+0x40>)
10004b6c:	2000      	movs	r0, #0
10004b6e:	6a59      	ldr	r1, [r3, #36]	; 0x24
    return (hi >= hi_target && (timer_hw->timerawl >= (uint32_t) target || hi != hi_target));
10004b70:	428c      	cmp	r4, r1
10004b72:	d803      	bhi.n	10004b7c <best_effort_wfe_or_timeout+0x30>
10004b74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10004b76:	3001      	adds	r0, #1
10004b78:	42b3      	cmp	r3, r6
10004b7a:	d300      	bcc.n	10004b7e <best_effort_wfe_or_timeout+0x32>
    }
#else
    tight_loop_contents();
    return time_reached(timeout_timestamp);
#endif
}
10004b7c:	bd70      	pop	{r4, r5, r6, pc}
10004b7e:	1a64      	subs	r4, r4, r1
10004b80:	1e63      	subs	r3, r4, #1
10004b82:	419c      	sbcs	r4, r3
10004b84:	b2e0      	uxtb	r0, r4
10004b86:	e7f9      	b.n	10004b7c <best_effort_wfe_or_timeout+0x30>
10004b88:	200394bc 	.word	0x200394bc
10004b8c:	40054000 	.word	0x40054000

10004b90 <hardware_alarm_irq_handler>:

static inline uint harware_alarm_irq_number(uint alarm_num) {
    return TIMER_IRQ_0 + alarm_num;
}

static void hardware_alarm_irq_handler() {
10004b90:	b5f0      	push	{r4, r5, r6, r7, lr}
10004b92:	46d6      	mov	lr, sl
10004b94:	464f      	mov	r7, r9
10004b96:	4646      	mov	r6, r8
10004b98:	b5c0      	push	{r6, r7, lr}
    // Determine which timer this IRQ is for
    uint32_t ipsr;
    __asm volatile ("mrs %0, ipsr" : "=r" (ipsr)::);
10004b9a:	f3ef 8305 	mrs	r3, IPSR
    uint alarm_num = (ipsr & 0x3fu) - 16 - TIMER_IRQ_0;
10004b9e:	223f      	movs	r2, #63	; 0x3f
10004ba0:	4013      	ands	r3, r2
10004ba2:	0018      	movs	r0, r3
10004ba4:	3810      	subs	r0, #16
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
10004ba6:	f3ef 8c10 	mrs	ip, PRIMASK
    __asm volatile ("cpsid i");
10004baa:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
10004bac:	4d20      	ldr	r5, [pc, #128]	; (10004c30 <hardware_alarm_irq_handler+0xa0>)
10004bae:	682a      	ldr	r2, [r5, #0]
10004bb0:	2a00      	cmp	r2, #0
10004bb2:	d0fc      	beq.n	10004bae <hardware_alarm_irq_handler+0x1e>
    __asm volatile ("dmb");
10004bb4:	f3bf 8f5f 	dmb	sy
    hardware_alarm_callback_t callback = NULL;

    spin_lock_t *lock = spin_lock_instance(PICO_SPINLOCK_ID_TIMER);
    uint32_t save = spin_lock_blocking(lock);
    // Clear the timer IRQ (inside lock, because we check whether we have handled the IRQ yet in alarm_set by looking at the interrupt status
    timer_hw->intr = 1u << alarm_num;
10004bb8:	2201      	movs	r2, #1
10004bba:	0011      	movs	r1, r2
10004bbc:	4081      	lsls	r1, r0
10004bbe:	4c1d      	ldr	r4, [pc, #116]	; (10004c34 <hardware_alarm_irq_handler+0xa4>)
10004bc0:	4688      	mov	r8, r1
10004bc2:	6361      	str	r1, [r4, #52]	; 0x34

    // make sure the IRQ is still valid
    if (timer_callbacks_pending & (1u << alarm_num)) {
10004bc4:	491c      	ldr	r1, [pc, #112]	; (10004c38 <hardware_alarm_irq_handler+0xa8>)
10004bc6:	0017      	movs	r7, r2
10004bc8:	780e      	ldrb	r6, [r1, #0]
10004bca:	468a      	mov	sl, r1
10004bcc:	0031      	movs	r1, r6
10004bce:	40c1      	lsrs	r1, r0
10004bd0:	400f      	ands	r7, r1
10004bd2:	420a      	tst	r2, r1
10004bd4:	d109      	bne.n	10004bea <hardware_alarm_irq_handler+0x5a>
10004bd6:	f3bf 8f5f 	dmb	sy
    *lock = 0;
10004bda:	602f      	str	r7, [r5, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10004bdc:	f38c 8810 	msr	PRIMASK, ip
    spin_unlock(lock, save);

    if (callback) {
        callback(alarm_num);
    }
}
10004be0:	bce0      	pop	{r5, r6, r7}
10004be2:	46ba      	mov	sl, r7
10004be4:	46b1      	mov	r9, r6
10004be6:	46a8      	mov	r8, r5
10004be8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (timer_hw->timerawh >= target_hi[alarm_num]) {
10004bea:	4914      	ldr	r1, [pc, #80]	; (10004c3c <hardware_alarm_irq_handler+0xac>)
10004bec:	0082      	lsls	r2, r0, #2
10004bee:	6a64      	ldr	r4, [r4, #36]	; 0x24
10004bf0:	5851      	ldr	r1, [r2, r1]
10004bf2:	428c      	cmp	r4, r1
10004bf4:	d30f      	bcc.n	10004c16 <hardware_alarm_irq_handler+0x86>
            callback = alarm_callbacks[alarm_num];
10004bf6:	4b12      	ldr	r3, [pc, #72]	; (10004c40 <hardware_alarm_irq_handler+0xb0>)
10004bf8:	58d2      	ldr	r2, [r2, r3]
            timer_callbacks_pending &= ~(1u << alarm_num);
10004bfa:	4643      	mov	r3, r8
10004bfc:	439e      	bics	r6, r3
10004bfe:	4653      	mov	r3, sl
10004c00:	701e      	strb	r6, [r3, #0]
    __asm volatile ("dmb");
10004c02:	f3bf 8f5f 	dmb	sy
    *lock = 0;
10004c06:	2300      	movs	r3, #0
10004c08:	602b      	str	r3, [r5, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10004c0a:	f38c 8810 	msr	PRIMASK, ip
    if (callback) {
10004c0e:	2a00      	cmp	r2, #0
10004c10:	d0e6      	beq.n	10004be0 <hardware_alarm_irq_handler+0x50>
        callback(alarm_num);
10004c12:	4790      	blx	r2
}
10004c14:	e7e4      	b.n	10004be0 <hardware_alarm_irq_handler+0x50>
            timer_hw->alarm[alarm_num] = timer_hw->alarm[alarm_num]; // re-arm the timer
10004c16:	4a0b      	ldr	r2, [pc, #44]	; (10004c44 <hardware_alarm_irq_handler+0xb4>)
10004c18:	009b      	lsls	r3, r3, #2
10004c1a:	4690      	mov	r8, r2
10004c1c:	4443      	add	r3, r8
10004c1e:	681a      	ldr	r2, [r3, #0]
10004c20:	601a      	str	r2, [r3, #0]
    __asm volatile ("dmb");
10004c22:	f3bf 8f5f 	dmb	sy
    *lock = 0;
10004c26:	2300      	movs	r3, #0
10004c28:	602b      	str	r3, [r5, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10004c2a:	f38c 8810 	msr	PRIMASK, ip
    if (callback) {
10004c2e:	e7d7      	b.n	10004be0 <hardware_alarm_irq_handler+0x50>
10004c30:	d0000128 	.word	0xd0000128
10004c34:	40054000 	.word	0x40054000
10004c38:	20039bbd 	.word	0x20039bbd
10004c3c:	20039ba4 	.word	0x20039ba4
10004c40:	20039380 	.word	0x20039380
10004c44:	40053fd0 	.word	0x40053fd0

10004c48 <hardware_alarm_claim>:
void hardware_alarm_claim(uint alarm_num) {
10004c48:	b510      	push	{r4, lr}
10004c4a:	0001      	movs	r1, r0
    hw_claim_or_assert(&claimed, alarm_num, "Hardware alarm %d already claimed");
10004c4c:	4a02      	ldr	r2, [pc, #8]	; (10004c58 <hardware_alarm_claim+0x10>)
10004c4e:	4803      	ldr	r0, [pc, #12]	; (10004c5c <hardware_alarm_claim+0x14>)
10004c50:	f7fc fb92 	bl	10001378 <hw_claim_or_assert>
}
10004c54:	bd10      	pop	{r4, pc}
10004c56:	46c0      	nop			; (mov r8, r8)
10004c58:	10009b50 	.word	0x10009b50
10004c5c:	20039bbb 	.word	0x20039bbb

10004c60 <time_us_64>:
    uint32_t hi = timer_hw->timerawh;
10004c60:	4b03      	ldr	r3, [pc, #12]	; (10004c70 <time_us_64+0x10>)
10004c62:	6a59      	ldr	r1, [r3, #36]	; 0x24
        lo = timer_hw->timerawl;
10004c64:	000a      	movs	r2, r1
10004c66:	6a98      	ldr	r0, [r3, #40]	; 0x28
        uint32_t next_hi = timer_hw->timerawh;
10004c68:	6a59      	ldr	r1, [r3, #36]	; 0x24
        if (hi == next_hi) break;
10004c6a:	428a      	cmp	r2, r1
10004c6c:	d1fa      	bne.n	10004c64 <time_us_64+0x4>
}
10004c6e:	4770      	bx	lr
10004c70:	40054000 	.word	0x40054000

10004c74 <busy_wait_until>:
    uint32_t hi = timer_hw->timerawh;
10004c74:	4a06      	ldr	r2, [pc, #24]	; (10004c90 <busy_wait_until+0x1c>)
10004c76:	6a53      	ldr	r3, [r2, #36]	; 0x24
    while (hi < hi_target) {
10004c78:	4299      	cmp	r1, r3
10004c7a:	d8fc      	bhi.n	10004c76 <busy_wait_until+0x2>
    while (hi == hi_target && timer_hw->timerawl < (uint32_t) target) {
10004c7c:	d107      	bne.n	10004c8e <busy_wait_until+0x1a>
10004c7e:	4b04      	ldr	r3, [pc, #16]	; (10004c90 <busy_wait_until+0x1c>)
10004c80:	e002      	b.n	10004c88 <busy_wait_until+0x14>
        hi = timer_hw->timerawh;
10004c82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    while (hi == hi_target && timer_hw->timerawl < (uint32_t) target) {
10004c84:	4291      	cmp	r1, r2
10004c86:	d102      	bne.n	10004c8e <busy_wait_until+0x1a>
10004c88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
10004c8a:	4282      	cmp	r2, r0
10004c8c:	d3f9      	bcc.n	10004c82 <busy_wait_until+0xe>
}
10004c8e:	4770      	bx	lr
10004c90:	40054000 	.word	0x40054000

10004c94 <hardware_alarm_set_callback>:

void hardware_alarm_set_callback(uint alarm_num, hardware_alarm_callback_t callback) {
10004c94:	b570      	push	{r4, r5, r6, lr}
10004c96:	0004      	movs	r4, r0
10004c98:	000d      	movs	r5, r1
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
10004c9a:	f3ef 8610 	mrs	r6, PRIMASK
    __asm volatile ("cpsid i");
10004c9e:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
10004ca0:	4a1a      	ldr	r2, [pc, #104]	; (10004d0c <hardware_alarm_set_callback+0x78>)
10004ca2:	6813      	ldr	r3, [r2, #0]
10004ca4:	2b00      	cmp	r3, #0
10004ca6:	d0fc      	beq.n	10004ca2 <hardware_alarm_set_callback+0xe>
    __asm volatile ("dmb");
10004ca8:	f3bf 8f5f 	dmb	sy
    //  should disallow IRQ handlers on both cores
    check_hardware_alarm_num_param(alarm_num);
    uint irq_num = harware_alarm_irq_number(alarm_num);
    spin_lock_t *lock = spin_lock_instance(PICO_SPINLOCK_ID_TIMER);
    uint32_t save = spin_lock_blocking(lock);
    if (callback) {
10004cac:	2d00      	cmp	r5, #0
10004cae:	d01b      	beq.n	10004ce8 <hardware_alarm_set_callback+0x54>
        if (hardware_alarm_irq_handler != irq_get_vtable_handler(irq_num)) {
10004cb0:	0020      	movs	r0, r4
10004cb2:	f7fc fee1 	bl	10001a78 <irq_get_vtable_handler>
10004cb6:	4916      	ldr	r1, [pc, #88]	; (10004d10 <hardware_alarm_set_callback+0x7c>)
10004cb8:	4281      	cmp	r1, r0
10004cba:	d00a      	beq.n	10004cd2 <hardware_alarm_set_callback+0x3e>
            // note that set_exclusive will silently allow you to set the handler to the same thing
            // since it is idempotent, which means we don't need to worry about locking ourselves
            irq_set_exclusive_handler(irq_num, hardware_alarm_irq_handler);
10004cbc:	0020      	movs	r0, r4
10004cbe:	f7fc fee3 	bl	10001a88 <irq_set_exclusive_handler>
            irq_set_enabled(irq_num, true);
10004cc2:	2101      	movs	r1, #1
10004cc4:	0020      	movs	r0, r4
10004cc6:	f7fc febd 	bl	10001a44 <irq_set_enabled>
            // Enable interrupt in block and at processor
            hw_set_bits(&timer_hw->inte, 1u << alarm_num);
10004cca:	2301      	movs	r3, #1
10004ccc:	40a3      	lsls	r3, r4
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10004cce:	4a11      	ldr	r2, [pc, #68]	; (10004d14 <hardware_alarm_set_callback+0x80>)
10004cd0:	6013      	str	r3, [r2, #0]
        }
        alarm_callbacks[alarm_num] = callback;
10004cd2:	4b11      	ldr	r3, [pc, #68]	; (10004d18 <hardware_alarm_set_callback+0x84>)
10004cd4:	00a4      	lsls	r4, r4, #2
10004cd6:	50e5      	str	r5, [r4, r3]
10004cd8:	f3bf 8f5f 	dmb	sy
    *lock = 0;
10004cdc:	2200      	movs	r2, #0
10004cde:	4b0b      	ldr	r3, [pc, #44]	; (10004d0c <hardware_alarm_set_callback+0x78>)
10004ce0:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10004ce2:	f386 8810 	msr	PRIMASK, r6
        timer_callbacks_pending &= ~(1u << alarm_num);
        irq_remove_handler(irq_num, hardware_alarm_irq_handler);
        irq_set_enabled(irq_num, false);
    }
    spin_unlock(lock, save);
}
10004ce6:	bd70      	pop	{r4, r5, r6, pc}
        alarm_callbacks[alarm_num] = NULL;
10004ce8:	4b0b      	ldr	r3, [pc, #44]	; (10004d18 <hardware_alarm_set_callback+0x84>)
10004cea:	00a2      	lsls	r2, r4, #2
10004cec:	50d5      	str	r5, [r2, r3]
        timer_callbacks_pending &= ~(1u << alarm_num);
10004cee:	2201      	movs	r2, #1
10004cf0:	40a2      	lsls	r2, r4
10004cf2:	490a      	ldr	r1, [pc, #40]	; (10004d1c <hardware_alarm_set_callback+0x88>)
        irq_remove_handler(irq_num, hardware_alarm_irq_handler);
10004cf4:	0020      	movs	r0, r4
        timer_callbacks_pending &= ~(1u << alarm_num);
10004cf6:	780b      	ldrb	r3, [r1, #0]
10004cf8:	4393      	bics	r3, r2
10004cfa:	700b      	strb	r3, [r1, #0]
        irq_remove_handler(irq_num, hardware_alarm_irq_handler);
10004cfc:	4904      	ldr	r1, [pc, #16]	; (10004d10 <hardware_alarm_set_callback+0x7c>)
10004cfe:	f7fc feed 	bl	10001adc <irq_remove_handler>
        irq_set_enabled(irq_num, false);
10004d02:	2100      	movs	r1, #0
10004d04:	0020      	movs	r0, r4
10004d06:	f7fc fe9d 	bl	10001a44 <irq_set_enabled>
10004d0a:	e7e5      	b.n	10004cd8 <hardware_alarm_set_callback+0x44>
10004d0c:	d0000128 	.word	0xd0000128
10004d10:	10004b91 	.word	0x10004b91
10004d14:	40056038 	.word	0x40056038
10004d18:	20039380 	.word	0x20039380
10004d1c:	20039bbd 	.word	0x20039bbd

10004d20 <hardware_alarm_set_target>:

bool hardware_alarm_set_target(uint alarm_num, absolute_time_t target) {
10004d20:	b5f0      	push	{r4, r5, r6, r7, lr}
10004d22:	46ce      	mov	lr, r9
10004d24:	4647      	mov	r7, r8
10004d26:	b580      	push	{r7, lr}
    uint32_t hi = timer_hw->timerawh;
10004d28:	4c2a      	ldr	r4, [pc, #168]	; (10004dd4 <hardware_alarm_set_target+0xb4>)
10004d2a:	6a61      	ldr	r1, [r4, #36]	; 0x24
        lo = timer_hw->timerawl;
10004d2c:	000d      	movs	r5, r1
10004d2e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
        uint32_t next_hi = timer_hw->timerawh;
10004d30:	6a61      	ldr	r1, [r4, #36]	; 0x24
        if (hi == next_hi) break;
10004d32:	42a9      	cmp	r1, r5
10004d34:	d1fa      	bne.n	10004d2c <hardware_alarm_set_target+0xc>
    bool missed;
    uint64_t now = time_us_64();
    uint64_t t = to_us_since_boot(target);
    if (now >= t) {
10004d36:	428b      	cmp	r3, r1
10004d38:	d807      	bhi.n	10004d4a <hardware_alarm_set_target+0x2a>
10004d3a:	d004      	beq.n	10004d46 <hardware_alarm_set_target+0x26>
        missed = true;
10004d3c:	2001      	movs	r0, #1
            }
        }
        spin_unlock(lock, save);
    }
    return missed;
}
10004d3e:	bcc0      	pop	{r6, r7}
10004d40:	46b9      	mov	r9, r7
10004d42:	46b0      	mov	r8, r6
10004d44:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (now >= t) {
10004d46:	42b2      	cmp	r2, r6
10004d48:	d9f8      	bls.n	10004d3c <hardware_alarm_set_target+0x1c>
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
10004d4a:	f3ef 8910 	mrs	r9, PRIMASK
    __asm volatile ("cpsid i");
10004d4e:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
10004d50:	4c21      	ldr	r4, [pc, #132]	; (10004dd8 <hardware_alarm_set_target+0xb8>)
10004d52:	6821      	ldr	r1, [r4, #0]
10004d54:	2900      	cmp	r1, #0
10004d56:	d0fc      	beq.n	10004d52 <hardware_alarm_set_target+0x32>
    __asm volatile ("dmb");
10004d58:	f3bf 8f5f 	dmb	sy
        timer_hw->intr = 1u << alarm_num;
10004d5c:	2501      	movs	r5, #1
10004d5e:	4085      	lsls	r5, r0
10004d60:	4c1c      	ldr	r4, [pc, #112]	; (10004dd4 <hardware_alarm_set_target+0xb4>)
        timer_callbacks_pending |= 1u << alarm_num;
10004d62:	4f1e      	ldr	r7, [pc, #120]	; (10004ddc <hardware_alarm_set_target+0xbc>)
        timer_hw->intr = 1u << alarm_num;
10004d64:	6365      	str	r5, [r4, #52]	; 0x34
        timer_callbacks_pending |= 1u << alarm_num;
10004d66:	b2e9      	uxtb	r1, r5
10004d68:	4688      	mov	r8, r1
10004d6a:	7839      	ldrb	r1, [r7, #0]
10004d6c:	468c      	mov	ip, r1
10004d6e:	4641      	mov	r1, r8
10004d70:	4666      	mov	r6, ip
10004d72:	4331      	orrs	r1, r6
10004d74:	7039      	strb	r1, [r7, #0]
        timer_hw->alarm[alarm_num] = (uint32_t) t;
10004d76:	1d01      	adds	r1, r0, #4
10004d78:	0089      	lsls	r1, r1, #2
10004d7a:	510a      	str	r2, [r1, r4]
        target_hi[alarm_num] = t >> 32u;
10004d7c:	4918      	ldr	r1, [pc, #96]	; (10004de0 <hardware_alarm_set_target+0xc0>)
10004d7e:	0080      	lsls	r0, r0, #2
10004d80:	5043      	str	r3, [r0, r1]
        if (!(timer_hw->armed & 1u << alarm_num)) {
10004d82:	6a21      	ldr	r1, [r4, #32]
        missed = false;
10004d84:	2000      	movs	r0, #0
        if (!(timer_hw->armed & 1u << alarm_num)) {
10004d86:	4229      	tst	r1, r5
10004d88:	d00b      	beq.n	10004da2 <hardware_alarm_set_target+0x82>
    uint32_t hi = timer_hw->timerawh;
10004d8a:	6a61      	ldr	r1, [r4, #36]	; 0x24
        lo = timer_hw->timerawl;
10004d8c:	0008      	movs	r0, r1
10004d8e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
        uint32_t next_hi = timer_hw->timerawh;
10004d90:	6a61      	ldr	r1, [r4, #36]	; 0x24
        if (hi == next_hi) break;
10004d92:	4281      	cmp	r1, r0
10004d94:	d1fa      	bne.n	10004d8c <hardware_alarm_set_target+0x6c>
            if (time_us_64() >= t) {
10004d96:	428b      	cmp	r3, r1
10004d98:	d802      	bhi.n	10004da0 <hardware_alarm_set_target+0x80>
10004d9a:	d10a      	bne.n	10004db2 <hardware_alarm_set_target+0x92>
10004d9c:	42b2      	cmp	r2, r6
10004d9e:	d908      	bls.n	10004db2 <hardware_alarm_set_target+0x92>
        missed = false;
10004da0:	2000      	movs	r0, #0
10004da2:	f3bf 8f5f 	dmb	sy
    *lock = 0;
10004da6:	2200      	movs	r2, #0
10004da8:	4b0b      	ldr	r3, [pc, #44]	; (10004dd8 <hardware_alarm_set_target+0xb8>)
10004daa:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10004dac:	f389 8810 	msr	PRIMASK, r9
}
10004db0:	e7c5      	b.n	10004d3e <hardware_alarm_set_target+0x1e>
                timer_hw->armed = 1u << alarm_num;
10004db2:	4b08      	ldr	r3, [pc, #32]	; (10004dd4 <hardware_alarm_set_target+0xb4>)
                timer_callbacks_pending &= ~(1u << alarm_num);
10004db4:	4642      	mov	r2, r8
                timer_hw->armed = 1u << alarm_num;
10004db6:	621d      	str	r5, [r3, #32]
                timer_hw->intr = 1u << alarm_num; // clear the IRQ too
10004db8:	635d      	str	r5, [r3, #52]	; 0x34
                timer_callbacks_pending &= ~(1u << alarm_num);
10004dba:	4663      	mov	r3, ip
10004dbc:	4393      	bics	r3, r2
                missed = true;
10004dbe:	2001      	movs	r0, #1
                timer_callbacks_pending &= ~(1u << alarm_num);
10004dc0:	703b      	strb	r3, [r7, #0]
    __asm volatile ("dmb");
10004dc2:	f3bf 8f5f 	dmb	sy
    *lock = 0;
10004dc6:	2200      	movs	r2, #0
10004dc8:	4b03      	ldr	r3, [pc, #12]	; (10004dd8 <hardware_alarm_set_target+0xb8>)
10004dca:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10004dcc:	f389 8810 	msr	PRIMASK, r9
10004dd0:	e7b5      	b.n	10004d3e <hardware_alarm_set_target+0x1e>
10004dd2:	46c0      	nop			; (mov r8, r8)
10004dd4:	40054000 	.word	0x40054000
10004dd8:	d0000128 	.word	0xd0000128
10004ddc:	20039bbd 	.word	0x20039bbd
10004de0:	20039ba4 	.word	0x20039ba4

10004de4 <hardware_alarm_cancel>:
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
10004de4:	f3ef 8c10 	mrs	ip, PRIMASK
    __asm volatile ("cpsid i");
10004de8:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
10004dea:	490a      	ldr	r1, [pc, #40]	; (10004e14 <hardware_alarm_cancel+0x30>)
10004dec:	680b      	ldr	r3, [r1, #0]
10004dee:	2b00      	cmp	r3, #0
10004df0:	d0fc      	beq.n	10004dec <hardware_alarm_cancel+0x8>
    __asm volatile ("dmb");
10004df2:	f3bf 8f5f 	dmb	sy
void hardware_alarm_cancel(uint alarm_num) {
    check_hardware_alarm_num_param(alarm_num);

    spin_lock_t *lock = spin_lock_instance(PICO_SPINLOCK_ID_TIMER);
    uint32_t save = spin_lock_blocking(lock);
    timer_hw->armed = 1u << alarm_num;
10004df6:	2301      	movs	r3, #1
10004df8:	4083      	lsls	r3, r0
10004dfa:	4a07      	ldr	r2, [pc, #28]	; (10004e18 <hardware_alarm_cancel+0x34>)
    timer_callbacks_pending &= ~(1u << alarm_num);
10004dfc:	4807      	ldr	r0, [pc, #28]	; (10004e1c <hardware_alarm_cancel+0x38>)
    timer_hw->armed = 1u << alarm_num;
10004dfe:	6213      	str	r3, [r2, #32]
    timer_callbacks_pending &= ~(1u << alarm_num);
10004e00:	7802      	ldrb	r2, [r0, #0]
10004e02:	439a      	bics	r2, r3
10004e04:	7002      	strb	r2, [r0, #0]
10004e06:	f3bf 8f5f 	dmb	sy
    *lock = 0;
10004e0a:	2300      	movs	r3, #0
10004e0c:	600b      	str	r3, [r1, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10004e0e:	f38c 8810 	msr	PRIMASK, ip
    spin_unlock(lock, save);
}
10004e12:	4770      	bx	lr
10004e14:	d0000128 	.word	0xd0000128
10004e18:	40054000 	.word	0x40054000
10004e1c:	20039bbd 	.word	0x20039bbd

10004e20 <_retrieve_unique_id_on_boot>:

static_assert(PICO_UNIQUE_BOARD_ID_SIZE_BYTES == FLASH_UNIQUE_ID_SIZE_BYTES, "Board ID size must match flash ID size");

static pico_unique_board_id_t retrieved_id;

static void __attribute__((constructor)) _retrieve_unique_id_on_boot() {
10004e20:	b510      	push	{r4, lr}
    // build. Since this constructor is pre-main it would be annoying to
    // debug, so just produce something well-defined and obviously wrong.
    for (int i = 0; i < PICO_UNIQUE_BOARD_ID_SIZE_BYTES; i++)
        retrieved_id.id[i] = 0xee;
#else
    flash_get_unique_id(retrieved_id.id);
10004e22:	4802      	ldr	r0, [pc, #8]	; (10004e2c <_retrieve_unique_id_on_boot+0xc>)
10004e24:	f7fc fd5c 	bl	100018e0 <flash_get_unique_id>
#endif
}
10004e28:	bd10      	pop	{r4, pc}
10004e2a:	46c0      	nop			; (mov r8, r8)
10004e2c:	20039b90 	.word	0x20039b90

10004e30 <watchdog_start_tick>:
#include "hardware/structs/psm.h"

/// \tag::watchdog_start_tick[]
void watchdog_start_tick(uint cycles) {
    // Important: This function also provides a tick reference to the timer
    watchdog_hw->tick = cycles | WATCHDOG_TICK_ENABLE_BITS;
10004e30:	2380      	movs	r3, #128	; 0x80
10004e32:	4a02      	ldr	r2, [pc, #8]	; (10004e3c <watchdog_start_tick+0xc>)
10004e34:	009b      	lsls	r3, r3, #2
10004e36:	4303      	orrs	r3, r0
10004e38:	62d3      	str	r3, [r2, #44]	; 0x2c
}
10004e3a:	4770      	bx	lr
10004e3c:	40058000 	.word	0x40058000

10004e40 <xosc_init>:
#include "hardware/structs/xosc.h"

void xosc_init(void) {
    // Assumes 1-15 MHz input
    assert(XOSC_MHZ <= 15);
    xosc_hw->ctrl = XOSC_CTRL_FREQ_RANGE_VALUE_1_15MHZ;
10004e40:	23aa      	movs	r3, #170	; 0xaa
10004e42:	4a06      	ldr	r2, [pc, #24]	; (10004e5c <xosc_init+0x1c>)
10004e44:	011b      	lsls	r3, r3, #4
10004e46:	6013      	str	r3, [r2, #0]

    // Set xosc startup delay
    uint32_t startup_delay = (((12 * MHZ) / 1000) + 128) / 256;
    xosc_hw->startup = startup_delay;
10004e48:	232f      	movs	r3, #47	; 0x2f
10004e4a:	4905      	ldr	r1, [pc, #20]	; (10004e60 <xosc_init+0x20>)
10004e4c:	60d3      	str	r3, [r2, #12]
10004e4e:	4b05      	ldr	r3, [pc, #20]	; (10004e64 <xosc_init+0x24>)
10004e50:	6019      	str	r1, [r3, #0]

    // Set the enable bit now that we have set freq range and startup delay
    hw_set_bits(&xosc_hw->ctrl, XOSC_CTRL_ENABLE_VALUE_ENABLE << XOSC_CTRL_ENABLE_LSB);

    // Wait for XOSC to be stable
    while(!(xosc_hw->status & XOSC_STATUS_STABLE_BITS));
10004e52:	6853      	ldr	r3, [r2, #4]
10004e54:	2b00      	cmp	r3, #0
10004e56:	dafc      	bge.n	10004e52 <xosc_init+0x12>
}
10004e58:	4770      	bx	lr
10004e5a:	46c0      	nop			; (mov r8, r8)
10004e5c:	40024000 	.word	0x40024000
10004e60:	00fab000 	.word	0x00fab000
10004e64:	40026000 	.word	0x40026000

10004e68 <tud_cdc_n_connected>:

//--------------------------------------------------------------------+
// APPLICATION API
//--------------------------------------------------------------------+
bool tud_cdc_n_connected(uint8_t itf)
{
10004e68:	b510      	push	{r4, lr}
10004e6a:	0004      	movs	r4, r0
bool tud_suspended(void);

// Check if device is ready to transfer
static inline bool tud_ready(void)
{
  return tud_mounted() && !tud_suspended();
10004e6c:	f000 fc9c 	bl	100057a8 <tud_mounted>
10004e70:	2800      	cmp	r0, #0
10004e72:	d101      	bne.n	10004e78 <tud_cdc_n_connected+0x10>
10004e74:	2000      	movs	r0, #0
  // DTR (bit 0) active  is considered as connected
  return tud_ready() && tu_bit_test(_cdcd_itf[itf].line_state, 0);
}
10004e76:	bd10      	pop	{r4, pc}
10004e78:	f000 fc9e 	bl	100057b8 <tud_suspended>
10004e7c:	2800      	cmp	r0, #0
10004e7e:	d1f9      	bne.n	10004e74 <tud_cdc_n_connected+0xc>
  return tud_ready() && tu_bit_test(_cdcd_itf[itf].line_state, 0);
10004e80:	0060      	lsls	r0, r4, #1
10004e82:	1904      	adds	r4, r0, r4
10004e84:	0123      	lsls	r3, r4, #4
10004e86:	4804      	ldr	r0, [pc, #16]	; (10004e98 <tud_cdc_n_connected+0x30>)
10004e88:	1b1c      	subs	r4, r3, r4
10004e8a:	0124      	lsls	r4, r4, #4
10004e8c:	1904      	adds	r4, r0, r4
10004e8e:	2001      	movs	r0, #1
10004e90:	7923      	ldrb	r3, [r4, #4]
10004e92:	4018      	ands	r0, r3
10004e94:	e7ef      	b.n	10004e76 <tud_cdc_n_connected+0xe>
10004e96:	46c0      	nop			; (mov r8, r8)
10004e98:	20038f4c 	.word	0x20038f4c

10004e9c <tud_cdc_n_available>:
//--------------------------------------------------------------------+
// READ API
//--------------------------------------------------------------------+
uint32_t tud_cdc_n_available(uint8_t itf)
{
  return tu_fifo_count(&_cdcd_itf[itf].rx_ff);
10004e9c:	0043      	lsls	r3, r0, #1
10004e9e:	181b      	adds	r3, r3, r0
{
10004ea0:	b510      	push	{r4, lr}
  return tu_fifo_count(&_cdcd_itf[itf].rx_ff);
10004ea2:	0118      	lsls	r0, r3, #4
10004ea4:	1ac0      	subs	r0, r0, r3
10004ea6:	0100      	lsls	r0, r0, #4
10004ea8:	4b02      	ldr	r3, [pc, #8]	; (10004eb4 <tud_cdc_n_available+0x18>)
10004eaa:	3010      	adds	r0, #16
10004eac:	18c0      	adds	r0, r0, r3
10004eae:	f000 fab9 	bl	10005424 <tu_fifo_count>
}
10004eb2:	bd10      	pop	{r4, pc}
10004eb4:	20038f4c 	.word	0x20038f4c

10004eb8 <tud_cdc_n_read>:

uint32_t tud_cdc_n_read(uint8_t itf, void* buffer, uint32_t bufsize)
{
10004eb8:	b5f0      	push	{r4, r5, r6, r7, lr}
10004eba:	0044      	lsls	r4, r0, #1
10004ebc:	1820      	adds	r0, r4, r0
10004ebe:	0104      	lsls	r4, r0, #4
10004ec0:	1a24      	subs	r4, r4, r0
10004ec2:	0124      	lsls	r4, r4, #4
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
  uint32_t num_read = tu_fifo_read_n(&p_cdc->rx_ff, buffer, bufsize);
10004ec4:	0026      	movs	r6, r4
{
10004ec6:	46c6      	mov	lr, r8
  uint32_t num_read = tu_fifo_read_n(&p_cdc->rx_ff, buffer, bufsize);
10004ec8:	4f17      	ldr	r7, [pc, #92]	; (10004f28 <tud_cdc_n_read+0x70>)
10004eca:	3610      	adds	r6, #16
10004ecc:	19f6      	adds	r6, r6, r7
{
10004ece:	b500      	push	{lr}
  uint32_t num_read = tu_fifo_read_n(&p_cdc->rx_ff, buffer, bufsize);
10004ed0:	0030      	movs	r0, r6
10004ed2:	b292      	uxth	r2, r2
10004ed4:	f000 fb14 	bl	10005500 <tu_fifo_read_n>
10004ed8:	0005      	movs	r5, r0
  uint16_t available = tu_fifo_remaining(&p_cdc->rx_ff);
10004eda:	0030      	movs	r0, r6
10004edc:	f000 faae 	bl	1000543c <tu_fifo_remaining>
  TU_VERIFY(available >= sizeof(p_cdc->epout_buf), );
10004ee0:	283f      	cmp	r0, #63	; 0x3f
10004ee2:	d803      	bhi.n	10004eec <tud_cdc_n_read+0x34>
  _prep_out_transaction(p_cdc);
  return num_read;
}
10004ee4:	0028      	movs	r0, r5
10004ee6:	bc80      	pop	{r7}
10004ee8:	46b8      	mov	r8, r7
10004eea:	bdf0      	pop	{r4, r5, r6, r7, pc}
  TU_VERIFY(usbd_edpt_claim(rhport, p_cdc->ep_out), );
10004eec:	193b      	adds	r3, r7, r4
10004eee:	2000      	movs	r0, #0
10004ef0:	78d9      	ldrb	r1, [r3, #3]
10004ef2:	4698      	mov	r8, r3
10004ef4:	f001 f9c6 	bl	10006284 <usbd_edpt_claim>
10004ef8:	2800      	cmp	r0, #0
10004efa:	d0f3      	beq.n	10004ee4 <tud_cdc_n_read+0x2c>
  available = tu_fifo_remaining(&p_cdc->rx_ff);
10004efc:	0030      	movs	r0, r6
10004efe:	f000 fa9d 	bl	1000543c <tu_fifo_remaining>
  if ( available >= sizeof(p_cdc->epout_buf) )  {
10004f02:	283f      	cmp	r0, #63	; 0x3f
10004f04:	d90a      	bls.n	10004f1c <tud_cdc_n_read+0x64>
    usbd_edpt_xfer(rhport, p_cdc->ep_out, p_cdc->epout_buf, sizeof(p_cdc->epout_buf));
10004f06:	2394      	movs	r3, #148	; 0x94
10004f08:	009b      	lsls	r3, r3, #2
10004f0a:	18e2      	adds	r2, r4, r3
10004f0c:	4643      	mov	r3, r8
10004f0e:	19d2      	adds	r2, r2, r7
10004f10:	78d9      	ldrb	r1, [r3, #3]
10004f12:	2000      	movs	r0, #0
10004f14:	2340      	movs	r3, #64	; 0x40
10004f16:	f001 fa0d 	bl	10006334 <usbd_edpt_xfer>
10004f1a:	e7e3      	b.n	10004ee4 <tud_cdc_n_read+0x2c>
    usbd_edpt_release(rhport, p_cdc->ep_out);
10004f1c:	4643      	mov	r3, r8
10004f1e:	2000      	movs	r0, #0
10004f20:	78d9      	ldrb	r1, [r3, #3]
10004f22:	f001 f9e1 	bl	100062e8 <usbd_edpt_release>
  return num_read;
10004f26:	e7dd      	b.n	10004ee4 <tud_cdc_n_read+0x2c>
10004f28:	20038f4c 	.word	0x20038f4c

10004f2c <tud_cdc_n_write_flush>:

  return ret;
}

uint32_t tud_cdc_n_write_flush (uint8_t itf)
{
10004f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10004f2e:	4647      	mov	r7, r8
10004f30:	46ce      	mov	lr, r9
10004f32:	b580      	push	{r7, lr}
10004f34:	0047      	lsls	r7, r0, #1
10004f36:	183b      	adds	r3, r7, r0
10004f38:	011c      	lsls	r4, r3, #4
10004f3a:	1ae4      	subs	r4, r4, r3
10004f3c:	0124      	lsls	r4, r4, #4
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];

  // No data to send
  if ( !tu_fifo_count(&p_cdc->tx_ff) ) return 0;
10004f3e:	4b23      	ldr	r3, [pc, #140]	; (10004fcc <tud_cdc_n_write_flush+0xa0>)
10004f40:	0026      	movs	r6, r4
10004f42:	4698      	mov	r8, r3
10004f44:	3628      	adds	r6, #40	; 0x28
10004f46:	4446      	add	r6, r8
{
10004f48:	0005      	movs	r5, r0
  if ( !tu_fifo_count(&p_cdc->tx_ff) ) return 0;
10004f4a:	0030      	movs	r0, r6
10004f4c:	f000 fa6a 	bl	10005424 <tu_fifo_count>
10004f50:	2800      	cmp	r0, #0
10004f52:	d104      	bne.n	10004f5e <tud_cdc_n_write_flush+0x32>
  }else
  {
    // Release endpoint since we don't make any transfer
    // Note: data is dropped if terminal is not connected
    usbd_edpt_release(rhport, p_cdc->ep_in);
    return 0;
10004f54:	2000      	movs	r0, #0
  }
}
10004f56:	bcc0      	pop	{r6, r7}
10004f58:	46b9      	mov	r9, r7
10004f5a:	46b0      	mov	r8, r6
10004f5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  TU_VERIFY( usbd_edpt_claim(rhport, p_cdc->ep_in), 0 );
10004f5e:	46a1      	mov	r9, r4
10004f60:	44c1      	add	r9, r8
10004f62:	464b      	mov	r3, r9
10004f64:	2000      	movs	r0, #0
10004f66:	7899      	ldrb	r1, [r3, #2]
10004f68:	f001 f98c 	bl	10006284 <usbd_edpt_claim>
10004f6c:	2800      	cmp	r0, #0
10004f6e:	d0f1      	beq.n	10004f54 <tud_cdc_n_write_flush+0x28>
  uint16_t const count = tu_fifo_read_n(&p_cdc->tx_ff, p_cdc->epin_buf, sizeof(p_cdc->epin_buf));
10004f70:	23a4      	movs	r3, #164	; 0xa4
10004f72:	009b      	lsls	r3, r3, #2
10004f74:	469c      	mov	ip, r3
10004f76:	4464      	add	r4, ip
10004f78:	4444      	add	r4, r8
10004f7a:	0030      	movs	r0, r6
10004f7c:	2240      	movs	r2, #64	; 0x40
10004f7e:	0021      	movs	r1, r4
10004f80:	f000 fabe 	bl	10005500 <tu_fifo_read_n>
10004f84:	1e06      	subs	r6, r0, #0
  if ( count && tud_cdc_n_connected(itf) )
10004f86:	d016      	beq.n	10004fb6 <tud_cdc_n_write_flush+0x8a>
10004f88:	f000 fc0e 	bl	100057a8 <tud_mounted>
10004f8c:	2800      	cmp	r0, #0
10004f8e:	d012      	beq.n	10004fb6 <tud_cdc_n_write_flush+0x8a>
10004f90:	f000 fc12 	bl	100057b8 <tud_suspended>
10004f94:	2800      	cmp	r0, #0
10004f96:	d10e      	bne.n	10004fb6 <tud_cdc_n_write_flush+0x8a>
10004f98:	464b      	mov	r3, r9
10004f9a:	791b      	ldrb	r3, [r3, #4]
10004f9c:	07db      	lsls	r3, r3, #31
10004f9e:	d50a      	bpl.n	10004fb6 <tud_cdc_n_write_flush+0x8a>
    TU_ASSERT( usbd_edpt_xfer(rhport, p_cdc->ep_in, p_cdc->epin_buf, count), 0 );
10004fa0:	464b      	mov	r3, r9
10004fa2:	0022      	movs	r2, r4
10004fa4:	7899      	ldrb	r1, [r3, #2]
10004fa6:	2000      	movs	r0, #0
10004fa8:	0033      	movs	r3, r6
10004faa:	f001 f9c3 	bl	10006334 <usbd_edpt_xfer>
10004fae:	2800      	cmp	r0, #0
10004fb0:	d0d0      	beq.n	10004f54 <tud_cdc_n_write_flush+0x28>
    return count;
10004fb2:	0030      	movs	r0, r6
10004fb4:	e7cf      	b.n	10004f56 <tud_cdc_n_write_flush+0x2a>
    usbd_edpt_release(rhport, p_cdc->ep_in);
10004fb6:	197d      	adds	r5, r7, r5
10004fb8:	012b      	lsls	r3, r5, #4
10004fba:	1b5d      	subs	r5, r3, r5
10004fbc:	012d      	lsls	r5, r5, #4
10004fbe:	4445      	add	r5, r8
10004fc0:	78a9      	ldrb	r1, [r5, #2]
10004fc2:	2000      	movs	r0, #0
10004fc4:	f001 f990 	bl	100062e8 <usbd_edpt_release>
10004fc8:	e7c4      	b.n	10004f54 <tud_cdc_n_write_flush+0x28>
10004fca:	46c0      	nop			; (mov r8, r8)
10004fcc:	20038f4c 	.word	0x20038f4c

10004fd0 <tud_cdc_n_write>:
  uint16_t ret = tu_fifo_write_n(&p_cdc->tx_ff, buffer, bufsize);
10004fd0:	0043      	lsls	r3, r0, #1
10004fd2:	181b      	adds	r3, r3, r0
{
10004fd4:	b570      	push	{r4, r5, r6, lr}
  uint16_t ret = tu_fifo_write_n(&p_cdc->tx_ff, buffer, bufsize);
10004fd6:	011c      	lsls	r4, r3, #4
10004fd8:	1ae4      	subs	r4, r4, r3
10004fda:	0124      	lsls	r4, r4, #4
10004fdc:	4b09      	ldr	r3, [pc, #36]	; (10005004 <tud_cdc_n_write+0x34>)
10004fde:	3428      	adds	r4, #40	; 0x28
10004fe0:	18e4      	adds	r4, r4, r3
{
10004fe2:	0005      	movs	r5, r0
  uint16_t ret = tu_fifo_write_n(&p_cdc->tx_ff, buffer, bufsize);
10004fe4:	b292      	uxth	r2, r2
10004fe6:	0020      	movs	r0, r4
10004fe8:	f000 fb4a 	bl	10005680 <tu_fifo_write_n>
10004fec:	0006      	movs	r6, r0
  if ( tu_fifo_count(&p_cdc->tx_ff) >= BULK_PACKET_SIZE )
10004fee:	0020      	movs	r0, r4
10004ff0:	f000 fa18 	bl	10005424 <tu_fifo_count>
10004ff4:	283f      	cmp	r0, #63	; 0x3f
10004ff6:	d801      	bhi.n	10004ffc <tud_cdc_n_write+0x2c>
}
10004ff8:	0030      	movs	r0, r6
10004ffa:	bd70      	pop	{r4, r5, r6, pc}
    tud_cdc_n_write_flush(itf);
10004ffc:	0028      	movs	r0, r5
10004ffe:	f7ff ff95 	bl	10004f2c <tud_cdc_n_write_flush>
10005002:	e7f9      	b.n	10004ff8 <tud_cdc_n_write+0x28>
10005004:	20038f4c 	.word	0x20038f4c

10005008 <tud_cdc_n_write_available>:

uint32_t tud_cdc_n_write_available (uint8_t itf)
{
  return tu_fifo_remaining(&_cdcd_itf[itf].tx_ff);
10005008:	0043      	lsls	r3, r0, #1
1000500a:	181b      	adds	r3, r3, r0
{
1000500c:	b510      	push	{r4, lr}
  return tu_fifo_remaining(&_cdcd_itf[itf].tx_ff);
1000500e:	0118      	lsls	r0, r3, #4
10005010:	1ac0      	subs	r0, r0, r3
10005012:	0100      	lsls	r0, r0, #4
10005014:	4b02      	ldr	r3, [pc, #8]	; (10005020 <tud_cdc_n_write_available+0x18>)
10005016:	3028      	adds	r0, #40	; 0x28
10005018:	18c0      	adds	r0, r0, r3
1000501a:	f000 fa0f 	bl	1000543c <tu_fifo_remaining>
}
1000501e:	bd10      	pop	{r4, pc}
10005020:	20038f4c 	.word	0x20038f4c

10005024 <cdcd_init>:
//--------------------------------------------------------------------+
// USBD Driver API
//--------------------------------------------------------------------+
void cdcd_init(void)
{
  tu_memclr(_cdcd_itf, sizeof(_cdcd_itf));
10005024:	22b4      	movs	r2, #180	; 0xb4
{
10005026:	b570      	push	{r4, r5, r6, lr}
  tu_memclr(_cdcd_itf, sizeof(_cdcd_itf));
10005028:	4c1a      	ldr	r4, [pc, #104]	; (10005094 <cdcd_init+0x70>)
{
1000502a:	b082      	sub	sp, #8
  tu_memclr(_cdcd_itf, sizeof(_cdcd_itf));
1000502c:	2100      	movs	r1, #0
1000502e:	0020      	movs	r0, r4
10005030:	0092      	lsls	r2, r2, #2
10005032:	f7fc f933 	bl	1000129c <__wrap_memset>

  for(uint8_t i=0; i<CFG_TUD_CDC; i++)
  {
    cdcd_interface_t* p_cdc = &_cdcd_itf[i];

    p_cdc->wanted_char = -1;
10005036:	23ff      	movs	r3, #255	; 0xff
10005038:	7163      	strb	r3, [r4, #5]

    // default line coding is : stop bit = 1, parity = none, data bits = 8
    p_cdc->line_coding.bit_rate  = 115200;
1000503a:	4b17      	ldr	r3, [pc, #92]	; (10005098 <cdcd_init+0x74>)
    p_cdc->line_coding.stop_bits = 0;
    p_cdc->line_coding.parity    = 0;
    p_cdc->line_coding.data_bits = 8;

    // config fifo
    tu_fifo_config(&p_cdc->rx_ff, p_cdc->rx_ff_buf, TU_ARRAY_SIZE(p_cdc->rx_ff_buf), 1, false);
1000503c:	2580      	movs	r5, #128	; 0x80
    p_cdc->line_coding.bit_rate  = 115200;
1000503e:	80e3      	strh	r3, [r4, #6]
10005040:	2301      	movs	r3, #1
10005042:	2600      	movs	r6, #0
    tu_fifo_config(&p_cdc->rx_ff, p_cdc->rx_ff_buf, TU_ARRAY_SIZE(p_cdc->rx_ff_buf), 1, false);
10005044:	0021      	movs	r1, r4
10005046:	0020      	movs	r0, r4
    p_cdc->line_coding.bit_rate  = 115200;
10005048:	8123      	strh	r3, [r4, #8]
    tu_fifo_config(&p_cdc->rx_ff, p_cdc->rx_ff_buf, TU_ARRAY_SIZE(p_cdc->rx_ff_buf), 1, false);
1000504a:	006d      	lsls	r5, r5, #1
    p_cdc->line_coding.data_bits = 8;
1000504c:	3307      	adds	r3, #7
1000504e:	7323      	strb	r3, [r4, #12]
    tu_fifo_config(&p_cdc->rx_ff, p_cdc->rx_ff_buf, TU_ARRAY_SIZE(p_cdc->rx_ff_buf), 1, false);
10005050:	002a      	movs	r2, r5
10005052:	3140      	adds	r1, #64	; 0x40
10005054:	9600      	str	r6, [sp, #0]
10005056:	3b07      	subs	r3, #7
10005058:	3010      	adds	r0, #16
1000505a:	f000 f9a7 	bl	100053ac <tu_fifo_config>
    tu_fifo_config(&p_cdc->tx_ff, p_cdc->tx_ff_buf, TU_ARRAY_SIZE(p_cdc->tx_ff_buf), 1, false);
1000505e:	0021      	movs	r1, r4
10005060:	0020      	movs	r0, r4
10005062:	3141      	adds	r1, #65	; 0x41
10005064:	002a      	movs	r2, r5
10005066:	31ff      	adds	r1, #255	; 0xff
10005068:	2301      	movs	r3, #1
1000506a:	9600      	str	r6, [sp, #0]
1000506c:	3028      	adds	r0, #40	; 0x28
1000506e:	f000 f99d 	bl	100053ac <tu_fifo_config>
//--------------------------------------------------------------------+
typedef struct mutex osal_mutex_def_t, *osal_mutex_t;

static inline osal_mutex_t osal_mutex_create(osal_mutex_def_t* mdef)
{
    mutex_init(mdef);
10005072:	2390      	movs	r3, #144	; 0x90
10005074:	009b      	lsls	r3, r3, #2
10005076:	18e5      	adds	r5, r4, r3
10005078:	0028      	movs	r0, r5
1000507a:	f7fc ff01 	bl	10001e80 <mutex_init>
1000507e:	2392      	movs	r3, #146	; 0x92
10005080:	009b      	lsls	r3, r3, #2
bool tu_fifo_config(tu_fifo_t *f, void* buffer, uint16_t depth, uint16_t item_size, bool overwritable);

#if CFG_FIFO_MUTEX
static inline void tu_fifo_config_mutex(tu_fifo_t *f, tu_fifo_mutex_t mutex_hdl)
{
  f->mutex = mutex_hdl;
10005082:	6265      	str	r5, [r4, #36]	; 0x24
10005084:	18e5      	adds	r5, r4, r3
10005086:	0028      	movs	r0, r5
10005088:	f7fc fefa 	bl	10001e80 <mutex_init>
1000508c:	63e5      	str	r5, [r4, #60]	; 0x3c
#if CFG_FIFO_MUTEX
    tu_fifo_config_mutex(&p_cdc->rx_ff, osal_mutex_create(&p_cdc->rx_ff_mutex));
    tu_fifo_config_mutex(&p_cdc->tx_ff, osal_mutex_create(&p_cdc->tx_ff_mutex));
#endif
  }
}
1000508e:	b002      	add	sp, #8
10005090:	bd70      	pop	{r4, r5, r6, pc}
10005092:	46c0      	nop			; (mov r8, r8)
10005094:	20038f4c 	.word	0x20038f4c
10005098:	ffffc200 	.word	0xffffc200

1000509c <cdcd_reset>:

void cdcd_reset(uint8_t rhport)
{
1000509c:	b510      	push	{r4, lr}
  (void) rhport;

  for(uint8_t i=0; i<CFG_TUD_CDC; i++)
  {
    tu_memclr(&_cdcd_itf[i], ITF_MEM_RESET_SIZE);
1000509e:	4c07      	ldr	r4, [pc, #28]	; (100050bc <cdcd_reset+0x20>)
100050a0:	2205      	movs	r2, #5
100050a2:	2100      	movs	r1, #0
100050a4:	0020      	movs	r0, r4
100050a6:	f7fc f8f9 	bl	1000129c <__wrap_memset>
    tu_fifo_clear(&_cdcd_itf[i].rx_ff);
100050aa:	0020      	movs	r0, r4
100050ac:	3010      	adds	r0, #16
100050ae:	f000 fb65 	bl	1000577c <tu_fifo_clear>
    tu_fifo_clear(&_cdcd_itf[i].tx_ff);
100050b2:	0020      	movs	r0, r4
100050b4:	3028      	adds	r0, #40	; 0x28
100050b6:	f000 fb61 	bl	1000577c <tu_fifo_clear>
  }
}
100050ba:	bd10      	pop	{r4, pc}
100050bc:	20038f4c 	.word	0x20038f4c

100050c0 <cdcd_open>:

uint16_t cdcd_open(uint8_t rhport, tusb_desc_interface_t const * itf_desc, uint16_t max_len)
{
100050c0:	b5f0      	push	{r4, r5, r6, r7, lr}
  // Only support ACM subclass
  TU_VERIFY( TUSB_CLASS_CDC                           == itf_desc->bInterfaceClass &&
100050c2:	794b      	ldrb	r3, [r1, #5]
{
100050c4:	0006      	movs	r6, r0
100050c6:	b083      	sub	sp, #12
  TU_VERIFY( TUSB_CLASS_CDC                           == itf_desc->bInterfaceClass &&
100050c8:	2b02      	cmp	r3, #2
100050ca:	d102      	bne.n	100050d2 <cdcd_open+0x12>
100050cc:	798b      	ldrb	r3, [r1, #6]
100050ce:	2b02      	cmp	r3, #2
100050d0:	d003      	beq.n	100050da <cdcd_open+0x1a>
100050d2:	2500      	movs	r5, #0

  // Prepare for incoming data
  _prep_out_transaction(p_cdc);

  return drv_len;
}
100050d4:	0028      	movs	r0, r5
100050d6:	b003      	add	sp, #12
100050d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
static inline uint32_t tu_abs(int32_t value) { return (uint32_t)((value < 0) ? (-value) : value); }

/// inclusive range checking
static inline bool tu_within(uint32_t lower, uint32_t value, uint32_t upper)
{
  return (lower <= value) && (value <= upper);
100050da:	79cb      	ldrb	r3, [r1, #7]
100050dc:	2b06      	cmp	r3, #6
100050de:	d8f8      	bhi.n	100050d2 <cdcd_open+0x12>
    if ( _cdcd_itf[cdc_id].ep_in == 0 )
100050e0:	4f2f      	ldr	r7, [pc, #188]	; (100051a0 <cdcd_open+0xe0>)
100050e2:	78bb      	ldrb	r3, [r7, #2]
100050e4:	2b00      	cmp	r3, #0
100050e6:	d1f4      	bne.n	100050d2 <cdcd_open+0x12>
  p_cdc->itf_num = itf_desc->bInterfaceNumber;
100050e8:	788b      	ldrb	r3, [r1, #2]
  uint16_t drv_len = sizeof(tusb_desc_interface_t);
100050ea:	2509      	movs	r5, #9
  p_cdc->itf_num = itf_desc->bInterfaceNumber;
100050ec:	703b      	strb	r3, [r7, #0]
// Descriptor helper
//--------------------------------------------------------------------+
static inline uint8_t const * tu_desc_next(void const* desc)
{
  uint8_t const* desc8 = (uint8_t const*) desc;
  return desc8 + desc8[DESC_OFFSET_LEN];
100050ee:	780c      	ldrb	r4, [r1, #0]
100050f0:	190c      	adds	r4, r1, r4
}

static inline uint8_t tu_desc_type(void const* desc)
{
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
100050f2:	7863      	ldrb	r3, [r4, #1]
  while ( TUSB_DESC_CS_INTERFACE == tu_desc_type(p_desc) && drv_len <= max_len )
100050f4:	2b24      	cmp	r3, #36	; 0x24
100050f6:	d10b      	bne.n	10005110 <cdcd_open+0x50>
100050f8:	2a08      	cmp	r2, #8
100050fa:	d802      	bhi.n	10005102 <cdcd_open+0x42>
100050fc:	e00f      	b.n	1000511e <cdcd_open+0x5e>
100050fe:	42aa      	cmp	r2, r5
10005100:	d30d      	bcc.n	1000511e <cdcd_open+0x5e>
}

static inline uint8_t tu_desc_len(void const* desc)
{
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
10005102:	7823      	ldrb	r3, [r4, #0]
  return desc8 + desc8[DESC_OFFSET_LEN];
10005104:	18e4      	adds	r4, r4, r3
    drv_len += tu_desc_len(p_desc);
10005106:	18ed      	adds	r5, r5, r3
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
10005108:	7863      	ldrb	r3, [r4, #1]
1000510a:	b2ad      	uxth	r5, r5
  while ( TUSB_DESC_CS_INTERFACE == tu_desc_type(p_desc) && drv_len <= max_len )
1000510c:	2b24      	cmp	r3, #36	; 0x24
1000510e:	d0f6      	beq.n	100050fe <cdcd_open+0x3e>
  if ( TUSB_DESC_ENDPOINT == tu_desc_type(p_desc) )
10005110:	2b05      	cmp	r3, #5
10005112:	d020      	beq.n	10005156 <cdcd_open+0x96>
  if ( (TUSB_DESC_INTERFACE == tu_desc_type(p_desc)) &&
10005114:	2b04      	cmp	r3, #4
10005116:	d102      	bne.n	1000511e <cdcd_open+0x5e>
10005118:	7963      	ldrb	r3, [r4, #5]
1000511a:	2b0a      	cmp	r3, #10
1000511c:	d02e      	beq.n	1000517c <cdcd_open+0xbc>
  uint16_t available = tu_fifo_remaining(&p_cdc->rx_ff);
1000511e:	4c21      	ldr	r4, [pc, #132]	; (100051a4 <cdcd_open+0xe4>)
10005120:	0020      	movs	r0, r4
10005122:	f000 f98b 	bl	1000543c <tu_fifo_remaining>
  TU_VERIFY(available >= sizeof(p_cdc->epout_buf), );
10005126:	283f      	cmp	r0, #63	; 0x3f
10005128:	d9d4      	bls.n	100050d4 <cdcd_open+0x14>
  TU_VERIFY(usbd_edpt_claim(rhport, p_cdc->ep_out), );
1000512a:	0026      	movs	r6, r4
1000512c:	3e10      	subs	r6, #16
1000512e:	2000      	movs	r0, #0
10005130:	78f1      	ldrb	r1, [r6, #3]
10005132:	f001 f8a7 	bl	10006284 <usbd_edpt_claim>
10005136:	2800      	cmp	r0, #0
10005138:	d0cc      	beq.n	100050d4 <cdcd_open+0x14>
  available = tu_fifo_remaining(&p_cdc->rx_ff);
1000513a:	0020      	movs	r0, r4
1000513c:	f000 f97e 	bl	1000543c <tu_fifo_remaining>
  if ( available >= sizeof(p_cdc->epout_buf) )  {
10005140:	283f      	cmp	r0, #63	; 0x3f
10005142:	d916      	bls.n	10005172 <cdcd_open+0xb2>
    usbd_edpt_xfer(rhport, p_cdc->ep_out, p_cdc->epout_buf, sizeof(p_cdc->epout_buf));
10005144:	2390      	movs	r3, #144	; 0x90
10005146:	009b      	lsls	r3, r3, #2
10005148:	18e2      	adds	r2, r4, r3
1000514a:	78f1      	ldrb	r1, [r6, #3]
1000514c:	2340      	movs	r3, #64	; 0x40
1000514e:	2000      	movs	r0, #0
10005150:	f001 f8f0 	bl	10006334 <usbd_edpt_xfer>
10005154:	e7be      	b.n	100050d4 <cdcd_open+0x14>
    TU_ASSERT( usbd_edpt_open(rhport, (tusb_desc_endpoint_t const *) p_desc), 0 );
10005156:	0021      	movs	r1, r4
10005158:	0030      	movs	r0, r6
1000515a:	f001 f88f 	bl	1000627c <usbd_edpt_open>
1000515e:	2800      	cmp	r0, #0
10005160:	d0b7      	beq.n	100050d2 <cdcd_open+0x12>
    p_cdc->ep_notif = ((tusb_desc_endpoint_t const *) p_desc)->bEndpointAddress;
10005162:	78a3      	ldrb	r3, [r4, #2]
10005164:	707b      	strb	r3, [r7, #1]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
10005166:	7823      	ldrb	r3, [r4, #0]
    drv_len += tu_desc_len(p_desc);
10005168:	18ed      	adds	r5, r5, r3
  return desc8 + desc8[DESC_OFFSET_LEN];
1000516a:	18e4      	adds	r4, r4, r3
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
1000516c:	7863      	ldrb	r3, [r4, #1]
1000516e:	b2ad      	uxth	r5, r5
  return desc8 + desc8[DESC_OFFSET_LEN];
10005170:	e7d0      	b.n	10005114 <cdcd_open+0x54>
    usbd_edpt_release(rhport, p_cdc->ep_out);
10005172:	78f1      	ldrb	r1, [r6, #3]
10005174:	2000      	movs	r0, #0
10005176:	f001 f8b7 	bl	100062e8 <usbd_edpt_release>
1000517a:	e7ab      	b.n	100050d4 <cdcd_open+0x14>
    TU_ASSERT( usbd_open_edpt_pair(rhport, p_desc, 2, TUSB_XFER_BULK, &p_cdc->ep_out, &p_cdc->ep_in), 0 );
1000517c:	4b0a      	ldr	r3, [pc, #40]	; (100051a8 <cdcd_open+0xe8>)
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
1000517e:	7827      	ldrb	r7, [r4, #0]
10005180:	9301      	str	r3, [sp, #4]
10005182:	3301      	adds	r3, #1
10005184:	9300      	str	r3, [sp, #0]
10005186:	2202      	movs	r2, #2
10005188:	2302      	movs	r3, #2
1000518a:	0030      	movs	r0, r6
  return desc8 + desc8[DESC_OFFSET_LEN];
1000518c:	19e1      	adds	r1, r4, r7
1000518e:	f001 f841 	bl	10006214 <usbd_open_edpt_pair>
10005192:	2800      	cmp	r0, #0
10005194:	d09d      	beq.n	100050d2 <cdcd_open+0x12>
    drv_len += 2*sizeof(tusb_desc_endpoint_t);
10005196:	350e      	adds	r5, #14
10005198:	19ed      	adds	r5, r5, r7
1000519a:	b2ad      	uxth	r5, r5
1000519c:	e7bf      	b.n	1000511e <cdcd_open+0x5e>
1000519e:	46c0      	nop			; (mov r8, r8)
100051a0:	20038f4c 	.word	0x20038f4c
100051a4:	20038f5c 	.word	0x20038f5c
100051a8:	20038f4e 	.word	0x20038f4e

100051ac <cdcd_control_complete>:
bool cdcd_control_complete(uint8_t rhport, tusb_control_request_t const * request)
{
  (void) rhport;

  //------------- Class Specific Request -------------//
  TU_VERIFY (request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS);
100051ac:	2360      	movs	r3, #96	; 0x60
100051ae:	780a      	ldrb	r2, [r1, #0]
{
100051b0:	b570      	push	{r4, r5, r6, lr}
  TU_VERIFY (request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS);
100051b2:	4013      	ands	r3, r2
100051b4:	2400      	movs	r4, #0
100051b6:	2b20      	cmp	r3, #32
100051b8:	d10b      	bne.n	100051d2 <cdcd_control_complete+0x26>
  // Identify which interface to use
  for ( ; ; itf++, p_cdc++)
  {
    if (itf >= TU_ARRAY_SIZE(_cdcd_itf)) return false;

    if ( p_cdc->itf_num == request->wIndex ) break;
100051ba:	4a0b      	ldr	r2, [pc, #44]	; (100051e8 <cdcd_control_complete+0x3c>)
100051bc:	794b      	ldrb	r3, [r1, #5]
100051be:	790d      	ldrb	r5, [r1, #4]
100051c0:	7810      	ldrb	r0, [r2, #0]
100051c2:	021b      	lsls	r3, r3, #8
100051c4:	432b      	orrs	r3, r5
100051c6:	4298      	cmp	r0, r3
100051c8:	d103      	bne.n	100051d2 <cdcd_control_complete+0x26>
  }

  // Invoke callback
  if ( CDC_REQUEST_SET_LINE_CODING == request->bRequest )
100051ca:	784b      	ldrb	r3, [r1, #1]
  {
    if ( tud_cdc_line_coding_cb ) tud_cdc_line_coding_cb(itf, &p_cdc->line_coding);
  }

  return true;
100051cc:	3401      	adds	r4, #1
  if ( CDC_REQUEST_SET_LINE_CODING == request->bRequest )
100051ce:	2b20      	cmp	r3, #32
100051d0:	d001      	beq.n	100051d6 <cdcd_control_complete+0x2a>
}
100051d2:	0020      	movs	r0, r4
100051d4:	bd70      	pop	{r4, r5, r6, pc}
    if ( tud_cdc_line_coding_cb ) tud_cdc_line_coding_cb(itf, &p_cdc->line_coding);
100051d6:	4b05      	ldr	r3, [pc, #20]	; (100051ec <cdcd_control_complete+0x40>)
100051d8:	2b00      	cmp	r3, #0
100051da:	d0fa      	beq.n	100051d2 <cdcd_control_complete+0x26>
100051dc:	2000      	movs	r0, #0
100051de:	1d91      	adds	r1, r2, #6
100051e0:	e000      	b.n	100051e4 <cdcd_control_complete+0x38>
100051e2:	bf00      	nop
100051e4:	e7f5      	b.n	100051d2 <cdcd_control_complete+0x26>
100051e6:	46c0      	nop			; (mov r8, r8)
100051e8:	20038f4c 	.word	0x20038f4c
100051ec:	00000000 	.word	0x00000000

100051f0 <cdcd_control_request>:
// Handle class control request
// return false to stall control endpoint (e.g unsupported request)
bool cdcd_control_request(uint8_t rhport, tusb_control_request_t const * request)
{
  // Handle class request only
  TU_VERIFY(request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS);
100051f0:	2360      	movs	r3, #96	; 0x60
100051f2:	780a      	ldrb	r2, [r1, #0]
{
100051f4:	b570      	push	{r4, r5, r6, lr}
  TU_VERIFY(request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS);
100051f6:	4013      	ands	r3, r2
100051f8:	2400      	movs	r4, #0
100051fa:	2b20      	cmp	r3, #32
100051fc:	d111      	bne.n	10005222 <cdcd_control_request+0x32>
  // Identify which interface to use
  for ( ; ; itf++, p_cdc++)
  {
    if (itf >= TU_ARRAY_SIZE(_cdcd_itf)) return false;

    if ( p_cdc->itf_num == request->wIndex ) break;
100051fe:	4a14      	ldr	r2, [pc, #80]	; (10005250 <cdcd_control_request+0x60>)
10005200:	794b      	ldrb	r3, [r1, #5]
10005202:	790e      	ldrb	r6, [r1, #4]
10005204:	7815      	ldrb	r5, [r2, #0]
10005206:	021b      	lsls	r3, r3, #8
10005208:	4333      	orrs	r3, r6
1000520a:	429d      	cmp	r5, r3
1000520c:	d109      	bne.n	10005222 <cdcd_control_request+0x32>
  }

  switch ( request->bRequest )
1000520e:	784b      	ldrb	r3, [r1, #1]
10005210:	2b21      	cmp	r3, #33	; 0x21
10005212:	d808      	bhi.n	10005226 <cdcd_control_request+0x36>
10005214:	2b1f      	cmp	r3, #31
10005216:	d904      	bls.n	10005222 <cdcd_control_request+0x32>
  {
    case CDC_REQUEST_SET_LINE_CODING:
      TU_LOG2("  Set Line Coding\r\n");
      tud_control_xfer(rhport, request, &p_cdc->line_coding, sizeof(cdc_line_coding_t));
10005218:	2307      	movs	r3, #7
1000521a:	3206      	adds	r2, #6
1000521c:	f001 f8c6 	bl	100063ac <tud_control_xfer>
    break;

    default: return false; // stall unsupported request
  }

  return true;
10005220:	2401      	movs	r4, #1
}
10005222:	0020      	movs	r0, r4
10005224:	bd70      	pop	{r4, r5, r6, pc}
  switch ( request->bRequest )
10005226:	2b22      	cmp	r3, #34	; 0x22
10005228:	d1fb      	bne.n	10005222 <cdcd_control_request+0x32>
      bool const dtr = tu_bit_test(request->wValue, 0);
1000522a:	78cd      	ldrb	r5, [r1, #3]
1000522c:	788b      	ldrb	r3, [r1, #2]
1000522e:	022d      	lsls	r5, r5, #8
10005230:	431d      	orrs	r5, r3
      p_cdc->line_state = (uint8_t) request->wValue;
10005232:	7115      	strb	r5, [r2, #4]
      tud_control_status(rhport, request);
10005234:	f001 f8a2 	bl	1000637c <tud_control_status>
      if ( tud_cdc_line_state_cb ) tud_cdc_line_state_cb(itf, dtr, rts);
10005238:	4b06      	ldr	r3, [pc, #24]	; (10005254 <cdcd_control_request+0x64>)
  return true;
1000523a:	2401      	movs	r4, #1
      if ( tud_cdc_line_state_cb ) tud_cdc_line_state_cb(itf, dtr, rts);
1000523c:	2b00      	cmp	r3, #0
1000523e:	d0f0      	beq.n	10005222 <cdcd_control_request+0x32>
10005240:	0029      	movs	r1, r5
}

// Bit
static inline uint32_t tu_bit_set  (uint32_t value, uint8_t pos) { return value | TU_BIT(pos);                  }
static inline uint32_t tu_bit_clear(uint32_t value, uint8_t pos) { return value & (~TU_BIT(pos));               }
static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
10005242:	086a      	lsrs	r2, r5, #1
10005244:	2000      	movs	r0, #0
10005246:	4022      	ands	r2, r4
10005248:	4021      	ands	r1, r4
1000524a:	e000      	b.n	1000524e <cdcd_control_request+0x5e>
1000524c:	bf00      	nop
1000524e:	e7e8      	b.n	10005222 <cdcd_control_request+0x32>
10005250:	20038f4c 	.word	0x20038f4c
10005254:	00000000 	.word	0x00000000

10005258 <cdcd_xfer_cb>:

bool cdcd_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes)
{
10005258:	b5f0      	push	{r4, r5, r6, r7, lr}
1000525a:	4646      	mov	r6, r8
1000525c:	464f      	mov	r7, r9
1000525e:	46d6      	mov	lr, sl
10005260:	b5c0      	push	{r6, r7, lr}

  // Identify which interface to use
  for (itf = 0; itf < CFG_TUD_CDC; itf++)
  {
    p_cdc = &_cdcd_itf[itf];
    if ( ( ep_addr == p_cdc->ep_out ) || ( ep_addr == p_cdc->ep_in ) ) break;
10005262:	4e4d      	ldr	r6, [pc, #308]	; (10005398 <cdcd_xfer_cb+0x140>)
{
10005264:	4699      	mov	r9, r3
    if ( ( ep_addr == p_cdc->ep_out ) || ( ep_addr == p_cdc->ep_in ) ) break;
10005266:	78f3      	ldrb	r3, [r6, #3]
{
10005268:	4680      	mov	r8, r0
1000526a:	000d      	movs	r5, r1
    if ( ( ep_addr == p_cdc->ep_out ) || ( ep_addr == p_cdc->ep_in ) ) break;
1000526c:	428b      	cmp	r3, r1
1000526e:	d157      	bne.n	10005320 <cdcd_xfer_cb+0xc8>

  // Received new data
  if ( ep_addr == p_cdc->ep_out )
  {
    // TODO search for wanted char first for better performance
    for(uint32_t i=0; i<xferred_bytes; i++)
10005270:	464b      	mov	r3, r9
10005272:	2b00      	cmp	r3, #0
10005274:	d100      	bne.n	10005278 <cdcd_xfer_cb+0x20>
10005276:	e088      	b.n	1000538a <cdcd_xfer_cb+0x132>
10005278:	4b48      	ldr	r3, [pc, #288]	; (1000539c <cdcd_xfer_cb+0x144>)
1000527a:	2b00      	cmp	r3, #0
1000527c:	d100      	bne.n	10005280 <cdcd_xfer_cb+0x28>
1000527e:	e075      	b.n	1000536c <cdcd_xfer_cb+0x114>
10005280:	2394      	movs	r3, #148	; 0x94
10005282:	009b      	lsls	r3, r3, #2
10005284:	18f4      	adds	r4, r6, r3
10005286:	46a2      	mov	sl, r4
10005288:	0037      	movs	r7, r6
1000528a:	44ca      	add	sl, r9
1000528c:	3710      	adds	r7, #16
    {
      tu_fifo_write(&p_cdc->rx_ff, &p_cdc->epout_buf[i]);
1000528e:	0021      	movs	r1, r4
10005290:	0038      	movs	r0, r7
10005292:	f000 f9b3 	bl	100055fc <tu_fifo_write>

      // Check for wanted char and invoke callback if needed
      if ( tud_cdc_rx_wanted_cb && ( ((signed char) p_cdc->wanted_char) != -1 ) && ( p_cdc->wanted_char == p_cdc->epout_buf[i] ) )
10005296:	7973      	ldrb	r3, [r6, #5]
10005298:	2bff      	cmp	r3, #255	; 0xff
1000529a:	d002      	beq.n	100052a2 <cdcd_xfer_cb+0x4a>
1000529c:	7821      	ldrb	r1, [r4, #0]
1000529e:	4299      	cmp	r1, r3
100052a0:	d043      	beq.n	1000532a <cdcd_xfer_cb+0xd2>
    for(uint32_t i=0; i<xferred_bytes; i++)
100052a2:	3401      	adds	r4, #1
100052a4:	4554      	cmp	r4, sl
100052a6:	d1f2      	bne.n	1000528e <cdcd_xfer_cb+0x36>
        tud_cdc_rx_wanted_cb(itf, p_cdc->wanted_char);
      }
    }

    // invoke receive callback (if there is still data)
    if (tud_cdc_rx_cb && tu_fifo_count(&p_cdc->rx_ff) ) tud_cdc_rx_cb(itf);
100052a8:	4b3d      	ldr	r3, [pc, #244]	; (100053a0 <cdcd_xfer_cb+0x148>)
100052aa:	2b00      	cmp	r3, #0
100052ac:	d004      	beq.n	100052b8 <cdcd_xfer_cb+0x60>
100052ae:	0038      	movs	r0, r7
100052b0:	f000 f8b8 	bl	10005424 <tu_fifo_count>
100052b4:	2800      	cmp	r0, #0
100052b6:	d16b      	bne.n	10005390 <cdcd_xfer_cb+0x138>
  uint16_t available = tu_fifo_remaining(&p_cdc->rx_ff);
100052b8:	0038      	movs	r0, r7
100052ba:	f000 f8bf 	bl	1000543c <tu_fifo_remaining>
  TU_VERIFY(available >= sizeof(p_cdc->epout_buf), );
100052be:	283f      	cmp	r0, #63	; 0x3f
100052c0:	d837      	bhi.n	10005332 <cdcd_xfer_cb+0xda>
  }

  // Data sent to host, we continue to fetch from tx fifo to send.
  // Note: This will cause incorrect baudrate set in line coding.
  //       Though maybe the baudrate is not really important !!!
  if ( ep_addr == p_cdc->ep_in )
100052c2:	3f10      	subs	r7, #16
100052c4:	78bb      	ldrb	r3, [r7, #2]
100052c6:	429d      	cmp	r5, r3
100052c8:	d006      	beq.n	100052d8 <cdcd_xfer_cb+0x80>
    }
  }

  // nothing to do with notif endpoint for now

  return true;
100052ca:	2401      	movs	r4, #1
}
100052cc:	0020      	movs	r0, r4
100052ce:	bce0      	pop	{r5, r6, r7}
100052d0:	46ba      	mov	sl, r7
100052d2:	46b1      	mov	r9, r6
100052d4:	46a8      	mov	r8, r5
100052d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ( tud_cdc_tx_complete_cb ) tud_cdc_tx_complete_cb(itf);
100052d8:	4b32      	ldr	r3, [pc, #200]	; (100053a4 <cdcd_xfer_cb+0x14c>)
100052da:	2b00      	cmp	r3, #0
100052dc:	d002      	beq.n	100052e4 <cdcd_xfer_cb+0x8c>
100052de:	2000      	movs	r0, #0
100052e0:	e000      	b.n	100052e4 <cdcd_xfer_cb+0x8c>
100052e2:	bf00      	nop
    if ( 0 == tud_cdc_n_write_flush(itf) )
100052e4:	2000      	movs	r0, #0
100052e6:	f7ff fe21 	bl	10004f2c <tud_cdc_n_write_flush>
100052ea:	2800      	cmp	r0, #0
100052ec:	d1ed      	bne.n	100052ca <cdcd_xfer_cb+0x72>
      if ( !tu_fifo_count(&p_cdc->tx_ff) && xferred_bytes && (0 == (xferred_bytes & (BULK_PACKET_SIZE-1))) )
100052ee:	4d2e      	ldr	r5, [pc, #184]	; (100053a8 <cdcd_xfer_cb+0x150>)
100052f0:	0028      	movs	r0, r5
100052f2:	f000 f897 	bl	10005424 <tu_fifo_count>
100052f6:	2800      	cmp	r0, #0
100052f8:	d1e7      	bne.n	100052ca <cdcd_xfer_cb+0x72>
100052fa:	464b      	mov	r3, r9
100052fc:	2b00      	cmp	r3, #0
100052fe:	d0e4      	beq.n	100052ca <cdcd_xfer_cb+0x72>
10005300:	069b      	lsls	r3, r3, #26
10005302:	d1e2      	bne.n	100052ca <cdcd_xfer_cb+0x72>
        if ( usbd_edpt_claim(rhport, p_cdc->ep_in) )
10005304:	3d28      	subs	r5, #40	; 0x28
10005306:	4640      	mov	r0, r8
10005308:	78a9      	ldrb	r1, [r5, #2]
1000530a:	f000 ffbb 	bl	10006284 <usbd_edpt_claim>
1000530e:	1e04      	subs	r4, r0, #0
10005310:	d0db      	beq.n	100052ca <cdcd_xfer_cb+0x72>
          usbd_edpt_xfer(rhport, p_cdc->ep_in, NULL, 0);
10005312:	2300      	movs	r3, #0
10005314:	2200      	movs	r2, #0
10005316:	4640      	mov	r0, r8
10005318:	78a9      	ldrb	r1, [r5, #2]
1000531a:	f001 f80b 	bl	10006334 <usbd_edpt_xfer>
1000531e:	e7d5      	b.n	100052cc <cdcd_xfer_cb+0x74>
    if ( ( ep_addr == p_cdc->ep_out ) || ( ep_addr == p_cdc->ep_in ) ) break;
10005320:	78b3      	ldrb	r3, [r6, #2]
10005322:	428b      	cmp	r3, r1
10005324:	d0d8      	beq.n	100052d8 <cdcd_xfer_cb+0x80>
  TU_ASSERT(itf < CFG_TUD_CDC);
10005326:	2400      	movs	r4, #0
10005328:	e7d0      	b.n	100052cc <cdcd_xfer_cb+0x74>
        tud_cdc_rx_wanted_cb(itf, p_cdc->wanted_char);
1000532a:	2000      	movs	r0, #0
1000532c:	e000      	b.n	10005330 <cdcd_xfer_cb+0xd8>
1000532e:	bf00      	nop
10005330:	e7b7      	b.n	100052a2 <cdcd_xfer_cb+0x4a>
  TU_VERIFY(usbd_edpt_claim(rhport, p_cdc->ep_out), );
10005332:	003c      	movs	r4, r7
10005334:	3c10      	subs	r4, #16
10005336:	2000      	movs	r0, #0
10005338:	78e1      	ldrb	r1, [r4, #3]
1000533a:	f000 ffa3 	bl	10006284 <usbd_edpt_claim>
1000533e:	2800      	cmp	r0, #0
10005340:	d012      	beq.n	10005368 <cdcd_xfer_cb+0x110>
  available = tu_fifo_remaining(&p_cdc->rx_ff);
10005342:	0038      	movs	r0, r7
10005344:	f000 f87a 	bl	1000543c <tu_fifo_remaining>
  if ( available >= sizeof(p_cdc->epout_buf) )  {
10005348:	283f      	cmp	r0, #63	; 0x3f
1000534a:	d909      	bls.n	10005360 <cdcd_xfer_cb+0x108>
    usbd_edpt_xfer(rhport, p_cdc->ep_out, p_cdc->epout_buf, sizeof(p_cdc->epout_buf));
1000534c:	2390      	movs	r3, #144	; 0x90
1000534e:	009b      	lsls	r3, r3, #2
10005350:	18fa      	adds	r2, r7, r3
10005352:	2000      	movs	r0, #0
10005354:	2340      	movs	r3, #64	; 0x40
10005356:	78e1      	ldrb	r1, [r4, #3]
10005358:	f000 ffec 	bl	10006334 <usbd_edpt_xfer>
  if ( ep_addr == p_cdc->ep_in )
1000535c:	78a3      	ldrb	r3, [r4, #2]
1000535e:	e7b2      	b.n	100052c6 <cdcd_xfer_cb+0x6e>
    usbd_edpt_release(rhport, p_cdc->ep_out);
10005360:	2000      	movs	r0, #0
10005362:	78e1      	ldrb	r1, [r4, #3]
10005364:	f000 ffc0 	bl	100062e8 <usbd_edpt_release>
  if ( ep_addr == p_cdc->ep_in )
10005368:	78a3      	ldrb	r3, [r4, #2]
1000536a:	e7ac      	b.n	100052c6 <cdcd_xfer_cb+0x6e>
1000536c:	2394      	movs	r3, #148	; 0x94
1000536e:	009b      	lsls	r3, r3, #2
10005370:	18f4      	adds	r4, r6, r3
10005372:	46a2      	mov	sl, r4
10005374:	3610      	adds	r6, #16
10005376:	0037      	movs	r7, r6
10005378:	44ca      	add	sl, r9
      tu_fifo_write(&p_cdc->rx_ff, &p_cdc->epout_buf[i]);
1000537a:	0021      	movs	r1, r4
1000537c:	0038      	movs	r0, r7
    for(uint32_t i=0; i<xferred_bytes; i++)
1000537e:	3401      	adds	r4, #1
      tu_fifo_write(&p_cdc->rx_ff, &p_cdc->epout_buf[i]);
10005380:	f000 f93c 	bl	100055fc <tu_fifo_write>
    for(uint32_t i=0; i<xferred_bytes; i++)
10005384:	4554      	cmp	r4, sl
10005386:	d1f8      	bne.n	1000537a <cdcd_xfer_cb+0x122>
10005388:	e78e      	b.n	100052a8 <cdcd_xfer_cb+0x50>
1000538a:	3610      	adds	r6, #16
1000538c:	0037      	movs	r7, r6
1000538e:	e78b      	b.n	100052a8 <cdcd_xfer_cb+0x50>
    if (tud_cdc_rx_cb && tu_fifo_count(&p_cdc->rx_ff) ) tud_cdc_rx_cb(itf);
10005390:	2000      	movs	r0, #0
10005392:	e000      	b.n	10005396 <cdcd_xfer_cb+0x13e>
10005394:	bf00      	nop
10005396:	e78f      	b.n	100052b8 <cdcd_xfer_cb+0x60>
10005398:	20038f4c 	.word	0x20038f4c
	...
100053a8:	20038f74 	.word	0x20038f74

100053ac <tu_fifo_config>:
#define tu_fifo_unlock(_ff)

#endif

bool tu_fifo_config(tu_fifo_t *f, void* buffer, uint16_t depth, uint16_t item_size, bool overwritable)
{
100053ac:	b5f0      	push	{r4, r5, r6, r7, lr}
100053ae:	46c6      	mov	lr, r8
100053b0:	b500      	push	{lr}
100053b2:	0014      	movs	r4, r2
100053b4:	aa06      	add	r2, sp, #24
100053b6:	001e      	movs	r6, r3
100053b8:	7813      	ldrb	r3, [r2, #0]
  if (depth > 0x8000) return false;               // Maximum depth is 2^15 items
100053ba:	2280      	movs	r2, #128	; 0x80
{
100053bc:	0005      	movs	r5, r0
100053be:	000f      	movs	r7, r1
100053c0:	4698      	mov	r8, r3
  if (depth > 0x8000) return false;               // Maximum depth is 2^15 items
100053c2:	0212      	lsls	r2, r2, #8
100053c4:	4294      	cmp	r4, r2
100053c6:	d82b      	bhi.n	10005420 <tu_fifo_config+0x74>
  if (f->mutex)
100053c8:	6940      	ldr	r0, [r0, #20]
100053ca:	2800      	cmp	r0, #0
100053cc:	d01a      	beq.n	10005404 <tu_fifo_config+0x58>
    return mdef;
}

static inline bool osal_mutex_lock (osal_mutex_t mutex_hdl, uint32_t msec)
{
    return mutex_enter_timeout_ms(mutex_hdl, msec);
100053ce:	2101      	movs	r1, #1
100053d0:	4249      	negs	r1, r1
100053d2:	f004 f9b5 	bl	10009740 <__mutex_enter_timeout_ms_veneer>
  tu_fifo_lock(f);

  f->buffer = (uint8_t*) buffer;
  f->depth  = depth;
  f->item_size = item_size;
  f->overwritable = overwritable;
100053d6:	4643      	mov	r3, r8
  f->depth  = depth;
100053d8:	80ac      	strh	r4, [r5, #4]

  f->max_pointer_idx = 2*depth - 1;               // Limit index space to 2*depth - this allows for a fast "modulo" calculation but limits the maximum depth to 2^16/2 = 2^15 and buffer overflows are detectable only if overflow happens once (important for unsupervised DMA applications)
100053da:	0064      	lsls	r4, r4, #1
100053dc:	b2a4      	uxth	r4, r4
  f->overwritable = overwritable;
100053de:	722b      	strb	r3, [r5, #8]
  f->max_pointer_idx = 2*depth - 1;               // Limit index space to 2*depth - this allows for a fast "modulo" calculation but limits the maximum depth to 2^16/2 = 2^15 and buffer overflows are detectable only if overflow happens once (important for unsupervised DMA applications)
100053e0:	1e63      	subs	r3, r4, #1
100053e2:	81ab      	strh	r3, [r5, #12]
  f->non_used_index_space = 0xFFFF - f->max_pointer_idx;

  f->rd_idx = f->wr_idx = 0;
100053e4:	2300      	movs	r3, #0
  if (f->mutex)
100053e6:	6968      	ldr	r0, [r5, #20]
  f->non_used_index_space = 0xFFFF - f->max_pointer_idx;
100053e8:	4264      	negs	r4, r4
  f->rd_idx = f->wr_idx = 0;
100053ea:	81eb      	strh	r3, [r5, #14]
  f->buffer = (uint8_t*) buffer;
100053ec:	602f      	str	r7, [r5, #0]
  f->item_size = item_size;
100053ee:	80ee      	strh	r6, [r5, #6]
  f->non_used_index_space = 0xFFFF - f->max_pointer_idx;
100053f0:	816c      	strh	r4, [r5, #10]
  f->rd_idx = f->wr_idx = 0;
100053f2:	822b      	strh	r3, [r5, #16]
  if (f->mutex)
100053f4:	2800      	cmp	r0, #0
100053f6:	d011      	beq.n	1000541c <tu_fifo_config+0x70>
}

static inline bool osal_mutex_unlock(osal_mutex_t mutex_hdl)
{
    mutex_exit(mutex_hdl);
100053f8:	f004 f982 	bl	10009700 <__mutex_exit_veneer>

  tu_fifo_unlock(f);

  return true;
100053fc:	2001      	movs	r0, #1
}
100053fe:	bc80      	pop	{r7}
10005400:	46b8      	mov	r8, r7
10005402:	bdf0      	pop	{r4, r5, r6, r7, pc}
  f->depth  = depth;
10005404:	80ac      	strh	r4, [r5, #4]
  f->max_pointer_idx = 2*depth - 1;               // Limit index space to 2*depth - this allows for a fast "modulo" calculation but limits the maximum depth to 2^16/2 = 2^15 and buffer overflows are detectable only if overflow happens once (important for unsupervised DMA applications)
10005406:	0064      	lsls	r4, r4, #1
10005408:	b2a4      	uxth	r4, r4
  f->overwritable = overwritable;
1000540a:	722b      	strb	r3, [r5, #8]
  f->max_pointer_idx = 2*depth - 1;               // Limit index space to 2*depth - this allows for a fast "modulo" calculation but limits the maximum depth to 2^16/2 = 2^15 and buffer overflows are detectable only if overflow happens once (important for unsupervised DMA applications)
1000540c:	1e63      	subs	r3, r4, #1
  f->non_used_index_space = 0xFFFF - f->max_pointer_idx;
1000540e:	4264      	negs	r4, r4
  f->rd_idx = f->wr_idx = 0;
10005410:	81e8      	strh	r0, [r5, #14]
  f->buffer = (uint8_t*) buffer;
10005412:	6029      	str	r1, [r5, #0]
  f->item_size = item_size;
10005414:	80ee      	strh	r6, [r5, #6]
  f->max_pointer_idx = 2*depth - 1;               // Limit index space to 2*depth - this allows for a fast "modulo" calculation but limits the maximum depth to 2^16/2 = 2^15 and buffer overflows are detectable only if overflow happens once (important for unsupervised DMA applications)
10005416:	81ab      	strh	r3, [r5, #12]
  f->non_used_index_space = 0xFFFF - f->max_pointer_idx;
10005418:	816c      	strh	r4, [r5, #10]
  f->rd_idx = f->wr_idx = 0;
1000541a:	8228      	strh	r0, [r5, #16]
  return true;
1000541c:	2001      	movs	r0, #1
1000541e:	e7ee      	b.n	100053fe <tu_fifo_config+0x52>
  if (depth > 0x8000) return false;               // Maximum depth is 2^15 items
10005420:	2000      	movs	r0, #0
10005422:	e7ec      	b.n	100053fe <tu_fifo_config+0x52>

10005424 <tu_fifo_count>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_count(tu_fifo_t* f)
{
10005424:	b510      	push	{r4, lr}
  return _tu_fifo_count(f, f->wr_idx, f->rd_idx);
10005426:	89c4      	ldrh	r4, [r0, #14]
10005428:	8a01      	ldrh	r1, [r0, #16]
{
1000542a:	0002      	movs	r2, r0
  uint16_t cnt = wAbs-rAbs;
1000542c:	1a60      	subs	r0, r4, r1
1000542e:	b280      	uxth	r0, r0
  if (rAbs > wAbs) cnt -= f->non_used_index_space;
10005430:	428c      	cmp	r4, r1
10005432:	d202      	bcs.n	1000543a <tu_fifo_count+0x16>
10005434:	8953      	ldrh	r3, [r2, #10]
10005436:	1ac0      	subs	r0, r0, r3
10005438:	b280      	uxth	r0, r0
}
1000543a:	bd10      	pop	{r4, pc}

1000543c <tu_fifo_remaining>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_remaining(tu_fifo_t* f)
{
1000543c:	b510      	push	{r4, lr}
  return _tu_fifo_remaining(f, f->wr_idx, f->rd_idx);
1000543e:	89c4      	ldrh	r4, [r0, #14]
10005440:	8a01      	ldrh	r1, [r0, #16]
  return f->depth - _tu_fifo_count(f, wAbs, rAbs);
10005442:	8883      	ldrh	r3, [r0, #4]
  uint16_t cnt = wAbs-rAbs;
10005444:	1a62      	subs	r2, r4, r1
10005446:	b292      	uxth	r2, r2
  if (rAbs > wAbs) cnt -= f->non_used_index_space;
10005448:	428c      	cmp	r4, r1
1000544a:	d202      	bcs.n	10005452 <tu_fifo_remaining+0x16>
1000544c:	8940      	ldrh	r0, [r0, #10]
1000544e:	1a12      	subs	r2, r2, r0
10005450:	b292      	uxth	r2, r2
  return f->depth - _tu_fifo_count(f, wAbs, rAbs);
10005452:	1a98      	subs	r0, r3, r2
  return _tu_fifo_remaining(f, f->wr_idx, f->rd_idx);
10005454:	b280      	uxth	r0, r0
}
10005456:	bd10      	pop	{r4, pc}

10005458 <tu_fifo_read>:

    @returns TRUE if the queue is not empty
 */
/******************************************************************************/
bool tu_fifo_read(tu_fifo_t* f, void * buffer)
{
10005458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000545a:	0004      	movs	r4, r0
  if (f->mutex)
1000545c:	6940      	ldr	r0, [r0, #20]
{
1000545e:	000e      	movs	r6, r1
  if (f->mutex)
10005460:	2800      	cmp	r0, #0
10005462:	d003      	beq.n	1000546c <tu_fifo_read+0x14>
    return mutex_enter_timeout_ms(mutex_hdl, msec);
10005464:	2101      	movs	r1, #1
10005466:	4249      	negs	r1, r1
10005468:	f004 f96a 	bl	10009740 <__mutex_enter_timeout_ms_veneer>
  tu_fifo_lock(f);                                          // TODO: Here we may distinguish for read and write pointer mutexes!

  // Peek the data
  bool ret = _tu_fifo_peek_at(f, 0, buffer, f->wr_idx, f->rd_idx);    // f->rd_idx might get modified in case of an overflow so we can not use a local variable
1000546c:	89e1      	ldrh	r1, [r4, #14]
1000546e:	8a22      	ldrh	r2, [r4, #16]
10005470:	b28f      	uxth	r7, r1
  uint16_t cnt = wAbs-rAbs;
10005472:	1a8d      	subs	r5, r1, r2
  bool ret = _tu_fifo_peek_at(f, 0, buffer, f->wr_idx, f->rd_idx);    // f->rd_idx might get modified in case of an overflow so we can not use a local variable
10005474:	b293      	uxth	r3, r2
  uint16_t cnt = wAbs-rAbs;
10005476:	b2ad      	uxth	r5, r5
  if (rAbs > wAbs) cnt -= f->non_used_index_space;
10005478:	4291      	cmp	r1, r2
1000547a:	d202      	bcs.n	10005482 <tu_fifo_read+0x2a>
1000547c:	8962      	ldrh	r2, [r4, #10]
1000547e:	1aad      	subs	r5, r5, r2
10005480:	b2ad      	uxth	r5, r5
  if (cnt > f->depth)
10005482:	88a2      	ldrh	r2, [r4, #4]
  if ((p < p - offset) || (p - offset > f->max_pointer_idx))
10005484:	89a1      	ldrh	r1, [r4, #12]
  if (cnt > f->depth)
10005486:	42aa      	cmp	r2, r5
10005488:	d205      	bcs.n	10005496 <tu_fifo_read+0x3e>
  if ((p < p - offset) || (p - offset > f->max_pointer_idx))
1000548a:	1ab8      	subs	r0, r7, r2
1000548c:	4288      	cmp	r0, r1
1000548e:	dc2b      	bgt.n	100054e8 <tu_fifo_read+0x90>
    p -= offset;
10005490:	b280      	uxth	r0, r0
  f->rd_idx = backward_pointer(f, wAbs, f->depth);
10005492:	0015      	movs	r5, r2
10005494:	8220      	strh	r0, [r4, #16]
  if (cnt == 0 || offset >= cnt) return false;
10005496:	2d00      	cmp	r5, #0
10005498:	d02e      	beq.n	100054f8 <tu_fifo_read+0xa0>
  if ((p > p + offset) || (p + offset > f->max_pointer_idx))
1000549a:	428b      	cmp	r3, r1
1000549c:	d906      	bls.n	100054ac <tu_fifo_read+0x54>
    p = (p + offset) + f->non_used_index_space;
1000549e:	8961      	ldrh	r1, [r4, #10]
100054a0:	185b      	adds	r3, r3, r1
100054a2:	b29b      	uxth	r3, r3
  while ( idx >= depth) idx -= depth;
100054a4:	429a      	cmp	r2, r3
100054a6:	d803      	bhi.n	100054b0 <tu_fifo_read+0x58>
100054a8:	1a9b      	subs	r3, r3, r2
100054aa:	b29b      	uxth	r3, r3
100054ac:	429a      	cmp	r2, r3
100054ae:	d9fb      	bls.n	100054a8 <tu_fifo_read+0x50>
  memcpy(p_buffer, f->buffer + (rRel * f->item_size), f->item_size);
100054b0:	88e2      	ldrh	r2, [r4, #6]
100054b2:	6821      	ldr	r1, [r4, #0]
100054b4:	4353      	muls	r3, r2
100054b6:	0030      	movs	r0, r6
100054b8:	18c9      	adds	r1, r1, r3
100054ba:	f7fb fef5 	bl	100012a8 <__wrap___aeabi_memcpy>
  return true;
100054be:	2501      	movs	r5, #1
100054c0:	2001      	movs	r0, #1
100054c2:	2601      	movs	r6, #1
  if ((p > p + offset) || (p + offset > f->max_pointer_idx))
100054c4:	89a1      	ldrh	r1, [r4, #12]

  // Advance pointer
  f->rd_idx = advance_pointer(f, f->rd_idx, ret);
100054c6:	8a22      	ldrh	r2, [r4, #16]
100054c8:	b293      	uxth	r3, r2
  if ((p > p + offset) || (p + offset > f->max_pointer_idx))
100054ca:	1812      	adds	r2, r2, r0
100054cc:	428a      	cmp	r2, r1
100054ce:	dd10      	ble.n	100054f2 <tu_fifo_read+0x9a>
    p = (p + offset) + f->non_used_index_space;
100054d0:	8962      	ldrh	r2, [r4, #10]
100054d2:	189b      	adds	r3, r3, r2
100054d4:	18ed      	adds	r5, r5, r3
100054d6:	b2ad      	uxth	r5, r5
  if (f->mutex)
100054d8:	6960      	ldr	r0, [r4, #20]
  f->rd_idx = advance_pointer(f, f->rd_idx, ret);
100054da:	8225      	strh	r5, [r4, #16]
  if (f->mutex)
100054dc:	2800      	cmp	r0, #0
100054de:	d001      	beq.n	100054e4 <tu_fifo_read+0x8c>
    mutex_exit(mutex_hdl);
100054e0:	f004 f90e 	bl	10009700 <__mutex_exit_veneer>

  tu_fifo_unlock(f);
  return ret;
}
100054e4:	0030      	movs	r0, r6
100054e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    p = (p - offset) - f->non_used_index_space;
100054e8:	8960      	ldrh	r0, [r4, #10]
100054ea:	1810      	adds	r0, r2, r0
100054ec:	1a38      	subs	r0, r7, r0
100054ee:	b280      	uxth	r0, r0
100054f0:	e7cf      	b.n	10005492 <tu_fifo_read+0x3a>
    p += offset;
100054f2:	195d      	adds	r5, r3, r5
100054f4:	b2ad      	uxth	r5, r5
100054f6:	e7ef      	b.n	100054d8 <tu_fifo_read+0x80>
100054f8:	2000      	movs	r0, #0
  if (cnt == 0 || offset >= cnt) return false;
100054fa:	2600      	movs	r6, #0
100054fc:	e7e3      	b.n	100054c6 <tu_fifo_read+0x6e>
100054fe:	46c0      	nop			; (mov r8, r8)

10005500 <tu_fifo_read_n>:

    @returns number of items read from the FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_read_n(tu_fifo_t* f, void * buffer, uint16_t count)
{
10005500:	b5f0      	push	{r4, r5, r6, r7, lr}
10005502:	46c6      	mov	lr, r8
10005504:	0004      	movs	r4, r0
  if (f->mutex)
10005506:	6940      	ldr	r0, [r0, #20]
{
10005508:	4688      	mov	r8, r1
1000550a:	0017      	movs	r7, r2
1000550c:	b500      	push	{lr}
  if (f->mutex)
1000550e:	2800      	cmp	r0, #0
10005510:	d003      	beq.n	1000551a <tu_fifo_read_n+0x1a>
    return mutex_enter_timeout_ms(mutex_hdl, msec);
10005512:	2101      	movs	r1, #1
10005514:	4249      	negs	r1, r1
10005516:	f004 f913 	bl	10009740 <__mutex_enter_timeout_ms_veneer>
  tu_fifo_lock(f);                                          // TODO: Here we may distinguish for read and write pointer mutexes!

  // Peek the data
  count = _tu_fifo_peek_at_n(f, 0, buffer, count, f->wr_idx, f->rd_idx);        // f->rd_idx might get modified in case of an overflow so we can not use a local variable
1000551a:	89e0      	ldrh	r0, [r4, #14]
1000551c:	8a21      	ldrh	r1, [r4, #16]
1000551e:	b282      	uxth	r2, r0
  uint16_t cnt = wAbs-rAbs;
10005520:	1a46      	subs	r6, r0, r1
  count = _tu_fifo_peek_at_n(f, 0, buffer, count, f->wr_idx, f->rd_idx);        // f->rd_idx might get modified in case of an overflow so we can not use a local variable
10005522:	b28b      	uxth	r3, r1
  uint16_t cnt = wAbs-rAbs;
10005524:	b2b6      	uxth	r6, r6
  if (rAbs > wAbs) cnt -= f->non_used_index_space;
10005526:	4288      	cmp	r0, r1
10005528:	d202      	bcs.n	10005530 <tu_fifo_read_n+0x30>
1000552a:	8961      	ldrh	r1, [r4, #10]
1000552c:	1a76      	subs	r6, r6, r1
1000552e:	b2b6      	uxth	r6, r6
  if (cnt > f->depth)
10005530:	88a5      	ldrh	r5, [r4, #4]
  if ((p < p - offset) || (p - offset > f->max_pointer_idx))
10005532:	89a0      	ldrh	r0, [r4, #12]
  if (cnt > f->depth)
10005534:	42b5      	cmp	r5, r6
10005536:	d207      	bcs.n	10005548 <tu_fifo_read_n+0x48>
  if ((p < p - offset) || (p - offset > f->max_pointer_idx))
10005538:	1b53      	subs	r3, r2, r5
1000553a:	4283      	cmp	r3, r0
1000553c:	dc2c      	bgt.n	10005598 <tu_fifo_read_n+0x98>
    p -= offset;
1000553e:	b29b      	uxth	r3, r3
    rAbs = f->rd_idx;
10005540:	002e      	movs	r6, r5
  f->rd_idx = backward_pointer(f, wAbs, f->depth);
10005542:	8223      	strh	r3, [r4, #16]
    rAbs = f->rd_idx;
10005544:	8a23      	ldrh	r3, [r4, #16]
10005546:	b29b      	uxth	r3, r3
  if (cnt == 0 || offset >= cnt) return 0;
10005548:	2e00      	cmp	r6, #0
1000554a:	d02c      	beq.n	100055a6 <tu_fifo_read_n+0xa6>
  if (cnt < n) {
1000554c:	1c3a      	adds	r2, r7, #0
1000554e:	42b7      	cmp	r7, r6
10005550:	d827      	bhi.n	100055a2 <tu_fifo_read_n+0xa2>
10005552:	b296      	uxth	r6, r2
  if ((p > p + offset) || (p + offset > f->max_pointer_idx))
10005554:	4283      	cmp	r3, r0
10005556:	d902      	bls.n	1000555e <tu_fifo_read_n+0x5e>
    p = (p + offset) + f->non_used_index_space;
10005558:	8961      	ldrh	r1, [r4, #10]
1000555a:	185b      	adds	r3, r3, r1
1000555c:	b29b      	uxth	r3, r3
  while ( idx >= depth) idx -= depth;
1000555e:	429d      	cmp	r5, r3
10005560:	d803      	bhi.n	1000556a <tu_fifo_read_n+0x6a>
10005562:	1b5b      	subs	r3, r3, r5
10005564:	b29b      	uxth	r3, r3
10005566:	429d      	cmp	r5, r3
10005568:	d9fb      	bls.n	10005562 <tu_fifo_read_n+0x62>
  if(rRel + n <= f->depth)       // Linear mode only
1000556a:	199a      	adds	r2, r3, r6
1000556c:	0037      	movs	r7, r6
    memcpy(p_buffer, f->buffer + (rRel * f->item_size), n*f->item_size);
1000556e:	88e1      	ldrh	r1, [r4, #6]
  if(rRel + n <= f->depth)       // Linear mode only
10005570:	42aa      	cmp	r2, r5
10005572:	dc2c      	bgt.n	100055ce <tu_fifo_read_n+0xce>
    memcpy(p_buffer, f->buffer + (rRel * f->item_size), n*f->item_size);
10005574:	000a      	movs	r2, r1
10005576:	4359      	muls	r1, r3
10005578:	6823      	ldr	r3, [r4, #0]
1000557a:	4372      	muls	r2, r6
1000557c:	469c      	mov	ip, r3
1000557e:	4640      	mov	r0, r8
10005580:	4461      	add	r1, ip
10005582:	f7fb fe91 	bl	100012a8 <__wrap___aeabi_memcpy>

  // Advance read pointer
  f->rd_idx = advance_pointer(f, f->rd_idx, count);
10005586:	8a22      	ldrh	r2, [r4, #16]
  if ((p > p + offset) || (p + offset > f->max_pointer_idx))
10005588:	89a0      	ldrh	r0, [r4, #12]
  f->rd_idx = advance_pointer(f, f->rd_idx, count);
1000558a:	b293      	uxth	r3, r2
  if ((p > p + offset) || (p + offset > f->max_pointer_idx))
1000558c:	19d2      	adds	r2, r2, r7
1000558e:	4282      	cmp	r2, r0
10005590:	dc0f      	bgt.n	100055b2 <tu_fifo_read_n+0xb2>
    p += offset;
10005592:	199b      	adds	r3, r3, r6
10005594:	b29b      	uxth	r3, r3
10005596:	e010      	b.n	100055ba <tu_fifo_read_n+0xba>
    p = (p - offset) - f->non_used_index_space;
10005598:	8963      	ldrh	r3, [r4, #10]
1000559a:	18eb      	adds	r3, r5, r3
1000559c:	1ad3      	subs	r3, r2, r3
1000559e:	b29b      	uxth	r3, r3
100055a0:	e7ce      	b.n	10005540 <tu_fifo_read_n+0x40>
100055a2:	1c32      	adds	r2, r6, #0
100055a4:	e7d5      	b.n	10005552 <tu_fifo_read_n+0x52>
100055a6:	2700      	movs	r7, #0
  f->rd_idx = advance_pointer(f, f->rd_idx, count);
100055a8:	8a22      	ldrh	r2, [r4, #16]
100055aa:	b293      	uxth	r3, r2
  if ((p > p + offset) || (p + offset > f->max_pointer_idx))
100055ac:	19d2      	adds	r2, r2, r7
100055ae:	4282      	cmp	r2, r0
100055b0:	ddef      	ble.n	10005592 <tu_fifo_read_n+0x92>
    p = (p + offset) + f->non_used_index_space;
100055b2:	8962      	ldrh	r2, [r4, #10]
100055b4:	189b      	adds	r3, r3, r2
100055b6:	18f3      	adds	r3, r6, r3
100055b8:	b29b      	uxth	r3, r3
  if (f->mutex)
100055ba:	6960      	ldr	r0, [r4, #20]
  f->rd_idx = advance_pointer(f, f->rd_idx, count);
100055bc:	8223      	strh	r3, [r4, #16]
  if (f->mutex)
100055be:	2800      	cmp	r0, #0
100055c0:	d001      	beq.n	100055c6 <tu_fifo_read_n+0xc6>
    mutex_exit(mutex_hdl);
100055c2:	f004 f89d 	bl	10009700 <__mutex_exit_veneer>

  tu_fifo_unlock(f);
  return count;
}
100055c6:	0030      	movs	r0, r6
100055c8:	bc80      	pop	{r7}
100055ca:	46b8      	mov	r8, r7
100055cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint16_t nLin = f->depth - rRel;
100055ce:	1aed      	subs	r5, r5, r3
    memcpy(p_buffer, f->buffer + (rRel * f->item_size), nLin*f->item_size);
100055d0:	b2ad      	uxth	r5, r5
100055d2:	002a      	movs	r2, r5
100055d4:	434a      	muls	r2, r1
100055d6:	4359      	muls	r1, r3
100055d8:	6823      	ldr	r3, [r4, #0]
100055da:	4640      	mov	r0, r8
100055dc:	469c      	mov	ip, r3
100055de:	4461      	add	r1, ip
100055e0:	f7fb fe62 	bl	100012a8 <__wrap___aeabi_memcpy>
    memcpy(p_buffer + nLin*f->item_size, f->buffer, (n - nLin) * f->item_size);
100055e4:	88e3      	ldrh	r3, [r4, #6]
100055e6:	1b72      	subs	r2, r6, r5
100055e8:	0018      	movs	r0, r3
100055ea:	4368      	muls	r0, r5
100055ec:	435a      	muls	r2, r3
100055ee:	6821      	ldr	r1, [r4, #0]
100055f0:	4440      	add	r0, r8
100055f2:	f7fb fe59 	bl	100012a8 <__wrap___aeabi_memcpy>
  if ((p > p + offset) || (p + offset > f->max_pointer_idx))
100055f6:	89a0      	ldrh	r0, [r4, #12]
100055f8:	e7d6      	b.n	100055a8 <tu_fifo_read_n+0xa8>
100055fa:	46c0      	nop			; (mov r8, r8)

100055fc <tu_fifo_write>:
    @returns TRUE if the data was written to the FIFO (overwrittable
             FIFO will always return TRUE)
 */
/******************************************************************************/
bool tu_fifo_write(tu_fifo_t* f, const void * data)
{
100055fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100055fe:	0004      	movs	r4, r0
  if (f->mutex)
10005600:	6940      	ldr	r0, [r0, #20]
{
10005602:	000e      	movs	r6, r1
  if (f->mutex)
10005604:	2800      	cmp	r0, #0
10005606:	d003      	beq.n	10005610 <tu_fifo_write+0x14>
    return mutex_enter_timeout_ms(mutex_hdl, msec);
10005608:	2101      	movs	r1, #1
1000560a:	4249      	negs	r1, r1
1000560c:	f004 f898 	bl	10009740 <__mutex_enter_timeout_ms_veneer>
  tu_fifo_lock(f);

  uint16_t w = f->wr_idx;
10005610:	89e2      	ldrh	r2, [r4, #14]

  if ( _tu_fifo_full(f, w, f->rd_idx) && !f->overwritable ) return false;
10005612:	8a21      	ldrh	r1, [r4, #16]
  uint16_t w = f->wr_idx;
10005614:	b295      	uxth	r5, r2
  uint16_t cnt = wAbs-rAbs;
10005616:	1a53      	subs	r3, r2, r1
10005618:	b29b      	uxth	r3, r3
  if (rAbs > wAbs) cnt -= f->non_used_index_space;
1000561a:	4291      	cmp	r1, r2
1000561c:	d902      	bls.n	10005624 <tu_fifo_write+0x28>
1000561e:	8962      	ldrh	r2, [r4, #10]
10005620:	1a9b      	subs	r3, r3, r2
10005622:	b29b      	uxth	r3, r3
  return (_tu_fifo_count(f, wAbs, rAbs) == f->depth);
10005624:	88a2      	ldrh	r2, [r4, #4]
  if ( _tu_fifo_full(f, w, f->rd_idx) && !f->overwritable ) return false;
10005626:	429a      	cmp	r2, r3
10005628:	d026      	beq.n	10005678 <tu_fifo_write+0x7c>
  if ((p > p + offset) || (p + offset > f->max_pointer_idx))
1000562a:	89a1      	ldrh	r1, [r4, #12]
1000562c:	002b      	movs	r3, r5
1000562e:	42a9      	cmp	r1, r5
10005630:	d206      	bcs.n	10005640 <tu_fifo_write+0x44>
    p = (p + offset) + f->non_used_index_space;
10005632:	8963      	ldrh	r3, [r4, #10]
10005634:	18eb      	adds	r3, r5, r3
10005636:	b29b      	uxth	r3, r3
  while ( idx >= depth) idx -= depth;
10005638:	429a      	cmp	r2, r3
1000563a:	d803      	bhi.n	10005644 <tu_fifo_write+0x48>
1000563c:	1a9b      	subs	r3, r3, r2
1000563e:	b29b      	uxth	r3, r3
10005640:	429a      	cmp	r2, r3
10005642:	d9fb      	bls.n	1000563c <tu_fifo_write+0x40>
  memcpy(f->buffer + (wRel * f->item_size), data, f->item_size);
10005644:	88e2      	ldrh	r2, [r4, #6]
10005646:	6821      	ldr	r1, [r4, #0]
10005648:	4353      	muls	r3, r2
1000564a:	18c8      	adds	r0, r1, r3
1000564c:	0031      	movs	r1, r6
1000564e:	f7fb fe2b 	bl	100012a8 <__wrap___aeabi_memcpy>
  if ((p > p + offset) || (p + offset > f->max_pointer_idx))
10005652:	89a3      	ldrh	r3, [r4, #12]
10005654:	42ab      	cmp	r3, r5
10005656:	d90a      	bls.n	1000566e <tu_fifo_write+0x72>
    p += offset;
10005658:	3501      	adds	r5, #1
1000565a:	b2ad      	uxth	r5, r5
  if (f->mutex)
1000565c:	6960      	ldr	r0, [r4, #20]
  // Advance pointer
  f->wr_idx = advance_pointer(f, w, 1);

  tu_fifo_unlock(f);

  return true;
1000565e:	2701      	movs	r7, #1
  f->wr_idx = advance_pointer(f, w, 1);
10005660:	81e5      	strh	r5, [r4, #14]
  if (f->mutex)
10005662:	2800      	cmp	r0, #0
10005664:	d001      	beq.n	1000566a <tu_fifo_write+0x6e>
    mutex_exit(mutex_hdl);
10005666:	f004 f84b 	bl	10009700 <__mutex_exit_veneer>
}
1000566a:	0038      	movs	r0, r7
1000566c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    p = (p + offset) + f->non_used_index_space;
1000566e:	8963      	ldrh	r3, [r4, #10]
10005670:	18ed      	adds	r5, r5, r3
10005672:	3501      	adds	r5, #1
10005674:	b2ad      	uxth	r5, r5
10005676:	e7f1      	b.n	1000565c <tu_fifo_write+0x60>
  if ( _tu_fifo_full(f, w, f->rd_idx) && !f->overwritable ) return false;
10005678:	7a27      	ldrb	r7, [r4, #8]
1000567a:	2f00      	cmp	r7, #0
1000567c:	d1d5      	bne.n	1000562a <tu_fifo_write+0x2e>
1000567e:	e7f4      	b.n	1000566a <tu_fifo_write+0x6e>

10005680 <tu_fifo_write_n>:
                Number of element
    @return Number of written elements
 */
/******************************************************************************/
uint16_t tu_fifo_write_n(tu_fifo_t* f, const void * data, uint16_t count)
{
10005680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10005682:	4647      	mov	r7, r8
10005684:	46ce      	mov	lr, r9
10005686:	0004      	movs	r4, r0
10005688:	b580      	push	{r7, lr}
1000568a:	0015      	movs	r5, r2
1000568c:	000f      	movs	r7, r1
  if ( count == 0 ) return 0;
1000568e:	2a00      	cmp	r2, #0
10005690:	d052      	beq.n	10005738 <tu_fifo_write_n+0xb8>
  if (f->mutex)
10005692:	6940      	ldr	r0, [r0, #20]
10005694:	2800      	cmp	r0, #0
10005696:	d003      	beq.n	100056a0 <tu_fifo_write_n+0x20>
    return mutex_enter_timeout_ms(mutex_hdl, msec);
10005698:	2101      	movs	r1, #1
1000569a:	4249      	negs	r1, r1
1000569c:	f004 f850 	bl	10009740 <__mutex_enter_timeout_ms_veneer>

  tu_fifo_lock(f);

  uint16_t w = f->wr_idx, r = f->rd_idx;
100056a0:	89e6      	ldrh	r6, [r4, #14]
  uint8_t const* buf8 = (uint8_t const*) data;

  if (!f->overwritable)
100056a2:	7a23      	ldrb	r3, [r4, #8]
  uint16_t w = f->wr_idx, r = f->rd_idx;
100056a4:	8a20      	ldrh	r0, [r4, #16]
  return f->depth - _tu_fifo_count(f, wAbs, rAbs);
100056a6:	88a1      	ldrh	r1, [r4, #4]
  uint16_t w = f->wr_idx, r = f->rd_idx;
100056a8:	b2b6      	uxth	r6, r6
100056aa:	b280      	uxth	r0, r0
  if (!f->overwritable)
100056ac:	2b00      	cmp	r3, #0
100056ae:	d138      	bne.n	10005722 <tu_fifo_write_n+0xa2>
  uint16_t cnt = wAbs-rAbs;
100056b0:	1a33      	subs	r3, r6, r0
100056b2:	b29b      	uxth	r3, r3
  if (rAbs > wAbs) cnt -= f->non_used_index_space;
100056b4:	4286      	cmp	r6, r0
100056b6:	d202      	bcs.n	100056be <tu_fifo_write_n+0x3e>
100056b8:	8962      	ldrh	r2, [r4, #10]
100056ba:	1a9b      	subs	r3, r3, r2
100056bc:	b29b      	uxth	r3, r3
  return f->depth - _tu_fifo_count(f, wAbs, rAbs);
100056be:	1acb      	subs	r3, r1, r3
static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
100056c0:	1c1a      	adds	r2, r3, #0
100056c2:	b29b      	uxth	r3, r3
100056c4:	42ab      	cmp	r3, r5
100056c6:	d852      	bhi.n	1000576e <tu_fifo_write_n+0xee>
100056c8:	b293      	uxth	r3, r2
100056ca:	4698      	mov	r8, r3
  if(wRel + n <= f->depth)  // Linear mode only
100056cc:	001d      	movs	r5, r3
    count = tu_min16(count, _tu_fifo_remaining(f, w, r));
  }
  else if (count > f->depth)
  {
    // Only copy last part
    buf8 = buf8 + (count - f->depth) * f->item_size;
100056ce:	88e2      	ldrh	r2, [r4, #6]
  if ((p > p + offset) || (p + offset > f->max_pointer_idx))
100056d0:	89a0      	ldrh	r0, [r4, #12]
  uint16_t w = f->wr_idx, r = f->rd_idx;
100056d2:	0033      	movs	r3, r6
  if ((p > p + offset) || (p + offset > f->max_pointer_idx))
100056d4:	4286      	cmp	r6, r0
100056d6:	dd05      	ble.n	100056e4 <tu_fifo_write_n+0x64>
    p = (p + offset) + f->non_used_index_space;
100056d8:	8963      	ldrh	r3, [r4, #10]
100056da:	18f3      	adds	r3, r6, r3
100056dc:	b29b      	uxth	r3, r3
  while ( idx >= depth) idx -= depth;
100056de:	e001      	b.n	100056e4 <tu_fifo_write_n+0x64>
100056e0:	1a5b      	subs	r3, r3, r1
100056e2:	b29b      	uxth	r3, r3
100056e4:	428b      	cmp	r3, r1
100056e6:	d2fb      	bcs.n	100056e0 <tu_fifo_write_n+0x60>
  if(wRel + n <= f->depth)  // Linear mode only
100056e8:	1958      	adds	r0, r3, r5
100056ea:	4288      	cmp	r0, r1
100056ec:	dc2a      	bgt.n	10005744 <tu_fifo_write_n+0xc4>
    memcpy(f->buffer + (wRel * f->item_size), data, n*f->item_size);
100056ee:	4353      	muls	r3, r2
100056f0:	6821      	ldr	r1, [r4, #0]
100056f2:	436a      	muls	r2, r5
100056f4:	18c8      	adds	r0, r1, r3
100056f6:	0039      	movs	r1, r7
100056f8:	f7fb fdd6 	bl	100012a8 <__wrap___aeabi_memcpy>
  if ((p > p + offset) || (p + offset > f->max_pointer_idx))
100056fc:	89a3      	ldrh	r3, [r4, #12]
100056fe:	1975      	adds	r5, r6, r5
10005700:	429d      	cmp	r5, r3
10005702:	dd1c      	ble.n	1000573e <tu_fifo_write_n+0xbe>
    p = (p + offset) + f->non_used_index_space;
10005704:	8963      	ldrh	r3, [r4, #10]
10005706:	18f6      	adds	r6, r6, r3
10005708:	4446      	add	r6, r8
1000570a:	b2b6      	uxth	r6, r6
  if (f->mutex)
1000570c:	6960      	ldr	r0, [r4, #20]

  // Write data
  _ff_push_n(f, buf8, count, wRel);

  // Advance pointer
  f->wr_idx = advance_pointer(f, w, count);
1000570e:	81e6      	strh	r6, [r4, #14]
  if (f->mutex)
10005710:	2800      	cmp	r0, #0
10005712:	d001      	beq.n	10005718 <tu_fifo_write_n+0x98>
    mutex_exit(mutex_hdl);
10005714:	f003 fff4 	bl	10009700 <__mutex_exit_veneer>

  tu_fifo_unlock(f);

  return count;
}
10005718:	4640      	mov	r0, r8
1000571a:	bcc0      	pop	{r6, r7}
1000571c:	46b9      	mov	r9, r7
1000571e:	46b0      	mov	r8, r6
10005720:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if(wRel + n <= f->depth)  // Linear mode only
10005722:	46a8      	mov	r8, r5
    buf8 = buf8 + (count - f->depth) * f->item_size;
10005724:	88e2      	ldrh	r2, [r4, #6]
  else if (count > f->depth)
10005726:	42a9      	cmp	r1, r5
10005728:	d2d2      	bcs.n	100056d0 <tu_fifo_write_n+0x50>
    buf8 = buf8 + (count - f->depth) * f->item_size;
1000572a:	1a6d      	subs	r5, r5, r1
1000572c:	4355      	muls	r5, r2
    f->wr_idx = r;
1000572e:	4688      	mov	r8, r1
    buf8 = buf8 + (count - f->depth) * f->item_size;
10005730:	197f      	adds	r7, r7, r5
    f->wr_idx = r;
10005732:	81e0      	strh	r0, [r4, #14]
10005734:	000d      	movs	r5, r1
10005736:	e7cb      	b.n	100056d0 <tu_fifo_write_n+0x50>
  if ( count == 0 ) return 0;
10005738:	2300      	movs	r3, #0
1000573a:	4698      	mov	r8, r3
1000573c:	e7ec      	b.n	10005718 <tu_fifo_write_n+0x98>
    p += offset;
1000573e:	4446      	add	r6, r8
10005740:	b2b6      	uxth	r6, r6
10005742:	e7e3      	b.n	1000570c <tu_fifo_write_n+0x8c>
    uint16_t nLin = f->depth - wRel;
10005744:	1ac9      	subs	r1, r1, r3
    memcpy(f->buffer + (wRel * f->item_size), data, nLin*f->item_size);
10005746:	b289      	uxth	r1, r1
10005748:	4689      	mov	r9, r1
1000574a:	4353      	muls	r3, r2
1000574c:	6821      	ldr	r1, [r4, #0]
1000574e:	18c8      	adds	r0, r1, r3
10005750:	464b      	mov	r3, r9
10005752:	0039      	movs	r1, r7
10005754:	435a      	muls	r2, r3
10005756:	f7fb fda7 	bl	100012a8 <__wrap___aeabi_memcpy>
    memcpy(f->buffer, data + nLin*f->item_size, (n - nLin) * f->item_size);
1000575a:	464b      	mov	r3, r9
1000575c:	88e1      	ldrh	r1, [r4, #6]
1000575e:	1aea      	subs	r2, r5, r3
10005760:	434a      	muls	r2, r1
10005762:	4359      	muls	r1, r3
10005764:	6820      	ldr	r0, [r4, #0]
10005766:	1879      	adds	r1, r7, r1
10005768:	f7fb fd9e 	bl	100012a8 <__wrap___aeabi_memcpy>
1000576c:	e7c6      	b.n	100056fc <tu_fifo_write_n+0x7c>
1000576e:	1c2a      	adds	r2, r5, #0
10005770:	b293      	uxth	r3, r2
10005772:	4698      	mov	r8, r3
  if(wRel + n <= f->depth)  // Linear mode only
10005774:	001d      	movs	r5, r3
    buf8 = buf8 + (count - f->depth) * f->item_size;
10005776:	88e2      	ldrh	r2, [r4, #6]
10005778:	e7aa      	b.n	100056d0 <tu_fifo_write_n+0x50>
1000577a:	46c0      	nop			; (mov r8, r8)

1000577c <tu_fifo_clear>:
    @param[in]  f
                Pointer to the FIFO buffer to manipulate
 */
/******************************************************************************/
bool tu_fifo_clear(tu_fifo_t *f)
{
1000577c:	b510      	push	{r4, lr}
1000577e:	0004      	movs	r4, r0
  if (f->mutex)
10005780:	6940      	ldr	r0, [r0, #20]
10005782:	2800      	cmp	r0, #0
10005784:	d00d      	beq.n	100057a2 <tu_fifo_clear+0x26>
    return mutex_enter_timeout_ms(mutex_hdl, msec);
10005786:	2101      	movs	r1, #1
10005788:	4249      	negs	r1, r1
1000578a:	f003 ffd9 	bl	10009740 <__mutex_enter_timeout_ms_veneer>
  tu_fifo_lock(f);
  f->rd_idx = f->wr_idx = 0;
1000578e:	2300      	movs	r3, #0
  if (f->mutex)
10005790:	6960      	ldr	r0, [r4, #20]
  f->rd_idx = f->wr_idx = 0;
10005792:	81e3      	strh	r3, [r4, #14]
10005794:	8223      	strh	r3, [r4, #16]
  if (f->mutex)
10005796:	2800      	cmp	r0, #0
10005798:	d001      	beq.n	1000579e <tu_fifo_clear+0x22>
    mutex_exit(mutex_hdl);
1000579a:	f003 ffb1 	bl	10009700 <__mutex_exit_veneer>
  tu_fifo_unlock(f);

  return true;
}
1000579e:	2001      	movs	r0, #1
100057a0:	bd10      	pop	{r4, pc}
  f->rd_idx = f->wr_idx = 0;
100057a2:	81e0      	strh	r0, [r4, #14]
100057a4:	8220      	strh	r0, [r4, #16]
  return true;
100057a6:	e7fa      	b.n	1000579e <tu_fifo_clear+0x22>

100057a8 <tud_mounted>:
  return (tusb_speed_t) _usbd_dev.speed;
}

bool tud_mounted(void)
{
  return _usbd_dev.cfg_num ? 1 : 0;
100057a8:	4b02      	ldr	r3, [pc, #8]	; (100057b4 <tud_mounted+0xc>)
100057aa:	7858      	ldrb	r0, [r3, #1]
100057ac:	1e43      	subs	r3, r0, #1
100057ae:	4198      	sbcs	r0, r3
100057b0:	b2c0      	uxtb	r0, r0
}
100057b2:	4770      	bx	lr
100057b4:	20039278 	.word	0x20039278

100057b8 <tud_suspended>:

bool tud_suspended(void)
{
  return _usbd_dev.suspended;
100057b8:	4b02      	ldr	r3, [pc, #8]	; (100057c4 <tud_suspended+0xc>)
100057ba:	7818      	ldrb	r0, [r3, #0]
100057bc:	0740      	lsls	r0, r0, #29
100057be:	0fc0      	lsrs	r0, r0, #31
}
100057c0:	4770      	bx	lr
100057c2:	46c0      	nop			; (mov r8, r8)
100057c4:	20039278 	.word	0x20039278

100057c8 <tud_init>:

//--------------------------------------------------------------------+
// USBD Task
//--------------------------------------------------------------------+
bool tud_init (void)
{
100057c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  TU_LOG2("USBD init\r\n");

  tu_varclr(&_usbd_dev);
100057ca:	2237      	movs	r2, #55	; 0x37
100057cc:	2100      	movs	r1, #0
100057ce:	4821      	ldr	r0, [pc, #132]	; (10005854 <tud_init+0x8c>)
100057d0:	f7fb fd64 	bl	1000129c <__wrap_memset>
    mutex_init(mdef);
100057d4:	4c20      	ldr	r4, [pc, #128]	; (10005858 <tud_init+0x90>)
100057d6:	0020      	movs	r0, r4
100057d8:	f7fc fb52 	bl	10001e80 <mutex_init>

#if CFG_TUSB_OS != OPT_OS_NONE
  // Init device mutex
  _usbd_mutex = osal_mutex_create(&_ubsd_mutexdef);
100057dc:	4b1f      	ldr	r3, [pc, #124]	; (1000585c <tud_init+0x94>)
100057de:	601c      	str	r4, [r3, #0]
    critical_section_exit(&qhdl->critsec);
}

static inline osal_queue_t osal_queue_create(osal_queue_def_t* qdef)
{
  critical_section_init(&qdef->critsec);
100057e0:	4c1f      	ldr	r4, [pc, #124]	; (10005860 <tud_init+0x98>)
100057e2:	0020      	movs	r0, r4
100057e4:	3018      	adds	r0, #24
100057e6:	f7fc f82f 	bl	10001848 <critical_section_init>
  tu_fifo_clear(&qdef->ff);
100057ea:	0020      	movs	r0, r4
100057ec:	f7ff ffc6 	bl	1000577c <tu_fifo_clear>
  TU_ASSERT(_usbd_mutex);
#endif

  // Init device queue & task
  _usbd_q = osal_queue_create(&_usbd_qdef);
100057f0:	4b1c      	ldr	r3, [pc, #112]	; (10005864 <tud_init+0x9c>)
  TU_ASSERT(_usbd_q);

  // Get application driver if available
  if ( usbd_app_driver_get_cb )
100057f2:	4e1d      	ldr	r6, [pc, #116]	; (10005868 <tud_init+0xa0>)
  {
    _app_driver = usbd_app_driver_get_cb(&_app_driver_count);
100057f4:	4d1d      	ldr	r5, [pc, #116]	; (1000586c <tud_init+0xa4>)
  _usbd_q = osal_queue_create(&_usbd_qdef);
100057f6:	601c      	str	r4, [r3, #0]
  if ( usbd_app_driver_get_cb )
100057f8:	2e00      	cmp	r6, #0
100057fa:	d004      	beq.n	10005806 <tud_init+0x3e>
    _app_driver = usbd_app_driver_get_cb(&_app_driver_count);
100057fc:	0028      	movs	r0, r5
100057fe:	e000      	b.n	10005802 <tud_init+0x3a>
10005800:	bf00      	nop
10005802:	4b1b      	ldr	r3, [pc, #108]	; (10005870 <tud_init+0xa8>)
10005804:	6018      	str	r0, [r3, #0]
  }

  // Init class drivers
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
10005806:	2400      	movs	r4, #0
10005808:	782b      	ldrb	r3, [r5, #0]
1000580a:	2e00      	cmp	r6, #0
1000580c:	d019      	beq.n	10005842 <tud_init+0x7a>
1000580e:	4e19      	ldr	r6, [pc, #100]	; (10005874 <tud_init+0xac>)
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
10005810:	4f17      	ldr	r7, [pc, #92]	; (10005870 <tud_init+0xa8>)
10005812:	429c      	cmp	r4, r3
10005814:	d30f      	bcc.n	10005836 <tud_init+0x6e>
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
10005816:	d119      	bne.n	1000584c <tud_init+0x84>
10005818:	0033      	movs	r3, r6
  {
    usbd_class_driver_t const * driver = get_driver(i);
    TU_LOG2("%s init\r\n", driver->name);
    driver->init();
1000581a:	4798      	blx	r3
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
1000581c:	3401      	adds	r4, #1
1000581e:	782b      	ldrb	r3, [r5, #0]
10005820:	b2e4      	uxtb	r4, r4
10005822:	42a3      	cmp	r3, r4
10005824:	d2f5      	bcs.n	10005812 <tud_init+0x4a>
  }

  // Init device controller driver
  dcd_init(TUD_OPT_RHPORT);
10005826:	2000      	movs	r0, #0
10005828:	f000 ff72 	bl	10006710 <dcd_init>
  dcd_int_enable(TUD_OPT_RHPORT);
1000582c:	2000      	movs	r0, #0
1000582e:	f000 ff49 	bl	100066c4 <dcd_int_enable>

  return true;
}
10005832:	2001      	movs	r0, #1
10005834:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    driver->init();
10005836:	00e3      	lsls	r3, r4, #3
10005838:	683a      	ldr	r2, [r7, #0]
1000583a:	1b1b      	subs	r3, r3, r4
1000583c:	009b      	lsls	r3, r3, #2
1000583e:	589b      	ldr	r3, [r3, r2]
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
10005840:	e7eb      	b.n	1000581a <tud_init+0x52>
    driver->init();
10005842:	f7ff fbef 	bl	10005024 <cdcd_init>
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
10005846:	782b      	ldrb	r3, [r5, #0]
10005848:	2b00      	cmp	r3, #0
1000584a:	d0ec      	beq.n	10005826 <tud_init+0x5e>
    driver->init();
1000584c:	2300      	movs	r3, #0
1000584e:	681b      	ldr	r3, [r3, #0]
10005850:	deff      	udf	#255	; 0xff
10005852:	46c0      	nop			; (mov r8, r8)
10005854:	20039278 	.word	0x20039278
10005858:	20039230 	.word	0x20039230
1000585c:	200392b0 	.word	0x200392b0
10005860:	200021a0 	.word	0x200021a0
10005864:	200392b4 	.word	0x200392b4
10005868:	00000000 	.word	0x00000000
1000586c:	20039bb7 	.word	0x20039bb7
10005870:	20038f48 	.word	0x20038f48
10005874:	10005025 	.word	0x10005025

10005878 <tud_task>:
      }
    }
    @endcode
 */
void tud_task (void)
{
10005878:	b5f0      	push	{r4, r5, r6, r7, lr}
1000587a:	46de      	mov	lr, fp
1000587c:	4657      	mov	r7, sl
1000587e:	464e      	mov	r6, r9
10005880:	4645      	mov	r5, r8
10005882:	b5e0      	push	{r5, r6, r7, lr}
10005884:	b08b      	sub	sp, #44	; 0x2c
  // Skip if stack is not initialized
  if ( !tusb_inited() ) return;
10005886:	f001 fa05 	bl	10006c94 <tusb_inited>
1000588a:	2800      	cmp	r0, #0
1000588c:	d100      	bne.n	10005890 <tud_task+0x18>
1000588e:	e123      	b.n	10005ad8 <tud_task+0x260>
10005890:	4bb3      	ldr	r3, [pc, #716]	; (10005b60 <tud_task+0x2e8>)
10005892:	af07      	add	r7, sp, #28
10005894:	469a      	mov	sl, r3
#if CFG_TUSB_DEBUG >= 2
    if (event.event_id == DCD_EVENT_SETUP_RECEIVED) TU_LOG2("\r\n"); // extra line for setup
    TU_LOG2("USBD %s ", event.event_id < DCD_EVENT_COUNT ? _usbd_event_str[event.event_id] : "CORRUPTED");
#endif

    switch ( event.event_id )
10005896:	4bb3      	ldr	r3, [pc, #716]	; (10005b64 <tud_task+0x2ec>)
10005898:	469b      	mov	fp, r3
    if ( !osal_queue_receive(_usbd_q, &event) ) return;
1000589a:	4653      	mov	r3, sl
1000589c:	681d      	ldr	r5, [r3, #0]
 * method will block until it is released.
 *
 * \param critsec Pointer to critical_section structure
 */
static inline void critical_section_enter_blocking(critical_section_t *critsec) {
    critsec->save = spin_lock_blocking(critsec->core.spin_lock);
1000589e:	69aa      	ldr	r2, [r5, #24]
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
100058a0:	f3ef 8110 	mrs	r1, PRIMASK
    __asm volatile ("cpsid i");
100058a4:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
100058a6:	6813      	ldr	r3, [r2, #0]
100058a8:	2b00      	cmp	r3, #0
100058aa:	d0fc      	beq.n	100058a6 <tud_task+0x2e>
    __asm volatile ("dmb");
100058ac:	f3bf 8f5f 	dmb	sy
100058b0:	61e9      	str	r1, [r5, #28]
  //  however osal_queue_recieve may be. therefore my assumption is that
  //  the fifo mutex is not populated for queues used from an IRQ context
  assert(!qhdl->ff.mutex);

  _osal_q_lock(qhdl);
  bool success = tu_fifo_read(&qhdl->ff, data);
100058b2:	0028      	movs	r0, r5
100058b4:	0039      	movs	r1, r7
100058b6:	f7ff fdcf 	bl	10005458 <tu_fifo_read>
 *  \ingroup critical_section
 *
 * \param critsec Pointer to critical_section structure
 */
static inline void critical_section_exit(critical_section_t *critsec) {
    spin_unlock(critsec->core.spin_lock, critsec->save);
100058ba:	69aa      	ldr	r2, [r5, #24]
100058bc:	0004      	movs	r4, r0
100058be:	69eb      	ldr	r3, [r5, #28]
100058c0:	f3bf 8f5f 	dmb	sy
    *lock = 0;
100058c4:	2100      	movs	r1, #0
100058c6:	6011      	str	r1, [r2, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
100058c8:	f383 8810 	msr	PRIMASK, r3
100058cc:	2800      	cmp	r0, #0
100058ce:	d100      	bne.n	100058d2 <tud_task+0x5a>
100058d0:	e102      	b.n	10005ad8 <tud_task+0x260>
    switch ( event.event_id )
100058d2:	787b      	ldrb	r3, [r7, #1]
100058d4:	2b08      	cmp	r3, #8
100058d6:	d8e0      	bhi.n	1000589a <tud_task+0x22>
100058d8:	465a      	mov	r2, fp
100058da:	009b      	lsls	r3, r3, #2
100058dc:	58d3      	ldr	r3, [r2, r3]
100058de:	469f      	mov	pc, r3
        }
      break;

      case USBD_EVENT_FUNC_CALL:
        TU_LOG2("\r\n");
        if ( event.func_call.func ) event.func_call.func(event.func_call.param);
100058e0:	687b      	ldr	r3, [r7, #4]
100058e2:	2b00      	cmp	r3, #0
100058e4:	d0d9      	beq.n	1000589a <tud_task+0x22>
100058e6:	68b8      	ldr	r0, [r7, #8]
100058e8:	4798      	blx	r3
  {
100058ea:	e7d6      	b.n	1000589a <tud_task+0x22>
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
100058ec:	227f      	movs	r2, #127	; 0x7f
        uint8_t const ep_addr = event.xfer_complete.ep_addr;
100058ee:	7939      	ldrb	r1, [r7, #4]
        _usbd_dev.ep_status[epnum][ep_dir].busy = false;
100058f0:	4b9d      	ldr	r3, [pc, #628]	; (10005b68 <tud_task+0x2f0>)
100058f2:	400a      	ands	r2, r1
100058f4:	0054      	lsls	r4, r2, #1
100058f6:	09c8      	lsrs	r0, r1, #7
100058f8:	191b      	adds	r3, r3, r4
100058fa:	181b      	adds	r3, r3, r0
100058fc:	0018      	movs	r0, r3
100058fe:	2501      	movs	r5, #1
10005900:	3020      	adds	r0, #32
10005902:	7944      	ldrb	r4, [r0, #5]
10005904:	43ac      	bics	r4, r5
10005906:	7144      	strb	r4, [r0, #5]
        _usbd_dev.ep_status[epnum][ep_dir].claimed = 0;
10005908:	7944      	ldrb	r4, [r0, #5]
1000590a:	3503      	adds	r5, #3
1000590c:	43ac      	bics	r4, r5
1000590e:	7144      	strb	r4, [r0, #5]
        if ( 0 == epnum )
10005910:	2a00      	cmp	r2, #0
10005912:	d100      	bne.n	10005916 <tud_task+0x9e>
10005914:	e0e7      	b.n	10005ae6 <tud_task+0x26e>
  if ( usbd_app_driver_get_cb )
10005916:	4a95      	ldr	r2, [pc, #596]	; (10005b6c <tud_task+0x2f4>)
          usbd_class_driver_t const * driver = get_driver( _usbd_dev.ep2drv[epnum][ep_dir] );
10005918:	7cdb      	ldrb	r3, [r3, #19]
  if ( usbd_app_driver_get_cb )
1000591a:	2a00      	cmp	r2, #0
1000591c:	d006      	beq.n	1000592c <tud_task+0xb4>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
1000591e:	4a94      	ldr	r2, [pc, #592]	; (10005b70 <tud_task+0x2f8>)
10005920:	7812      	ldrb	r2, [r2, #0]
10005922:	4293      	cmp	r3, r2
10005924:	d200      	bcs.n	10005928 <tud_task+0xb0>
10005926:	e16f      	b.n	10005c08 <tud_task+0x390>
    drvid -= _app_driver_count;
10005928:	1a9b      	subs	r3, r3, r2
1000592a:	b2db      	uxtb	r3, r3
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
1000592c:	2b00      	cmp	r3, #0
1000592e:	d000      	beq.n	10005932 <tud_task+0xba>
10005930:	e0d2      	b.n	10005ad8 <tud_task+0x260>
10005932:	4c90      	ldr	r4, [pc, #576]	; (10005b74 <tud_task+0x2fc>)
          driver->xfer_cb(event.rhport, ep_addr, event.xfer_complete.result, event.xfer_complete.len);
10005934:	797a      	ldrb	r2, [r7, #5]
10005936:	7838      	ldrb	r0, [r7, #0]
10005938:	68bb      	ldr	r3, [r7, #8]
1000593a:	47a0      	blx	r4
1000593c:	e7ad      	b.n	1000589a <tud_task+0x22>
        _usbd_dev.connected = 1;
1000593e:	4b8a      	ldr	r3, [pc, #552]	; (10005b68 <tud_task+0x2f0>)
10005940:	2601      	movs	r6, #1
10005942:	4698      	mov	r8, r3
10005944:	4642      	mov	r2, r8
10005946:	781b      	ldrb	r3, [r3, #0]

// This handles the actual request and its response.
// return false will cause its caller to stall control endpoint
static bool process_control_request(uint8_t rhport, tusb_control_request_t const * p_request)
{
  usbd_control_set_complete_callback(NULL);
10005948:	2000      	movs	r0, #0
        _usbd_dev.connected = 1;
1000594a:	4333      	orrs	r3, r6
1000594c:	7013      	strb	r3, [r2, #0]
        if ( !process_control_request(event.rhport, &event.setup_received) )
1000594e:	783b      	ldrb	r3, [r7, #0]
10005950:	4699      	mov	r9, r3
  usbd_control_set_complete_callback(NULL);
10005952:	f000 fd93 	bl	1000647c <usbd_control_set_complete_callback>

  TU_ASSERT(p_request->bmRequestType_bit.type < TUSB_REQ_TYPE_INVALID);
10005956:	2360      	movs	r3, #96	; 0x60
10005958:	793d      	ldrb	r5, [r7, #4]
1000595a:	402b      	ands	r3, r5
1000595c:	2b60      	cmp	r3, #96	; 0x60
1000595e:	d00d      	beq.n	1000597c <tud_task+0x104>

  // Vendor request
  if ( p_request->bmRequestType_bit.type == TUSB_REQ_TYPE_VENDOR )
10005960:	2b40      	cmp	r3, #64	; 0x40
10005962:	d100      	bne.n	10005966 <tud_task+0xee>
10005964:	e0db      	b.n	10005b1e <tud_task+0x2a6>
    TU_LOG2("  %s", _tusb_std_request_str[p_request->bRequest]);
    if (TUSB_REQ_GET_DESCRIPTOR != p_request->bRequest) TU_LOG2("\r\n");
  }
#endif

  switch ( p_request->bmRequestType_bit.recipient )
10005966:	06ed      	lsls	r5, r5, #27
10005968:	0eed      	lsrs	r5, r5, #27
1000596a:	2d01      	cmp	r5, #1
1000596c:	d100      	bne.n	10005970 <tud_task+0xf8>
1000596e:	e156      	b.n	10005c1e <tud_task+0x3a6>
10005970:	2d02      	cmp	r5, #2
10005972:	d100      	bne.n	10005976 <tud_task+0xfe>
10005974:	e112      	b.n	10005b9c <tud_task+0x324>
10005976:	2d00      	cmp	r5, #0
10005978:	d100      	bne.n	1000597c <tud_task+0x104>
1000597a:	e0e2      	b.n	10005b42 <tud_task+0x2ca>
          dcd_edpt_stall(event.rhport, 0);
1000597c:	7838      	ldrb	r0, [r7, #0]
1000597e:	2100      	movs	r1, #0
10005980:	f000 fff0 	bl	10006964 <dcd_edpt_stall>
          dcd_edpt_stall(event.rhport, 0 | TUSB_DIR_IN_MASK);
10005984:	2180      	movs	r1, #128	; 0x80
10005986:	7838      	ldrb	r0, [r7, #0]
10005988:	f000 ffec 	bl	10006964 <dcd_edpt_stall>
1000598c:	e785      	b.n	1000589a <tud_task+0x22>
        if (tud_resume_cb) tud_resume_cb();
1000598e:	4b7a      	ldr	r3, [pc, #488]	; (10005b78 <tud_task+0x300>)
10005990:	2b00      	cmp	r3, #0
10005992:	d082      	beq.n	1000589a <tud_task+0x22>
10005994:	e000      	b.n	10005998 <tud_task+0x120>
10005996:	bf00      	nop
10005998:	e77f      	b.n	1000589a <tud_task+0x22>
        if (tud_suspend_cb) tud_suspend_cb(_usbd_dev.remote_wakeup_en);
1000599a:	4b78      	ldr	r3, [pc, #480]	; (10005b7c <tud_task+0x304>)
1000599c:	2b00      	cmp	r3, #0
1000599e:	d100      	bne.n	100059a2 <tud_task+0x12a>
100059a0:	e77b      	b.n	1000589a <tud_task+0x22>
100059a2:	4b71      	ldr	r3, [pc, #452]	; (10005b68 <tud_task+0x2f0>)
100059a4:	7818      	ldrb	r0, [r3, #0]
100059a6:	0700      	lsls	r0, r0, #28
100059a8:	0fc0      	lsrs	r0, r0, #31
100059aa:	e000      	b.n	100059ae <tud_task+0x136>
100059ac:	bf00      	nop
100059ae:	e774      	b.n	1000589a <tud_task+0x22>
        for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
100059b0:	4d6f      	ldr	r5, [pc, #444]	; (10005b70 <tud_task+0x2f8>)
100059b2:	4a6e      	ldr	r2, [pc, #440]	; (10005b6c <tud_task+0x2f4>)
100059b4:	2400      	movs	r4, #0
100059b6:	782b      	ldrb	r3, [r5, #0]
100059b8:	2a00      	cmp	r2, #0
100059ba:	d100      	bne.n	100059be <tud_task+0x146>
100059bc:	e099      	b.n	10005af2 <tud_task+0x27a>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
100059be:	4e70      	ldr	r6, [pc, #448]	; (10005b80 <tud_task+0x308>)
100059c0:	42a3      	cmp	r3, r4
100059c2:	d809      	bhi.n	100059d8 <tud_task+0x160>
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
100059c4:	42a3      	cmp	r3, r4
100059c6:	d000      	beq.n	100059ca <tud_task+0x152>
100059c8:	e096      	b.n	10005af8 <tud_task+0x280>
        for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
100059ca:	3401      	adds	r4, #1
100059cc:	b2e4      	uxtb	r4, r4
100059ce:	429c      	cmp	r4, r3
100059d0:	d900      	bls.n	100059d4 <tud_task+0x15c>
100059d2:	e762      	b.n	1000589a <tud_task+0x22>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
100059d4:	42a3      	cmp	r3, r4
100059d6:	d9f5      	bls.n	100059c4 <tud_task+0x14c>
          if ( driver->sof ) driver->sof(event.rhport);
100059d8:	6831      	ldr	r1, [r6, #0]
100059da:	00e2      	lsls	r2, r4, #3
100059dc:	468c      	mov	ip, r1
100059de:	1b12      	subs	r2, r2, r4
100059e0:	0092      	lsls	r2, r2, #2
100059e2:	4462      	add	r2, ip
100059e4:	6992      	ldr	r2, [r2, #24]
100059e6:	2a00      	cmp	r2, #0
100059e8:	d0ef      	beq.n	100059ca <tud_task+0x152>
100059ea:	7838      	ldrb	r0, [r7, #0]
100059ec:	4790      	blx	r2
        for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
100059ee:	3401      	adds	r4, #1
100059f0:	782b      	ldrb	r3, [r5, #0]
100059f2:	b2e4      	uxtb	r4, r4
100059f4:	429c      	cmp	r4, r3
100059f6:	d9e3      	bls.n	100059c0 <tud_task+0x148>
100059f8:	e74f      	b.n	1000589a <tud_task+0x22>
  tu_varclr(&_usbd_dev);
100059fa:	2237      	movs	r2, #55	; 0x37
100059fc:	2100      	movs	r1, #0
100059fe:	485a      	ldr	r0, [pc, #360]	; (10005b68 <tud_task+0x2f0>)
        usbd_reset(event.rhport);
10005a00:	783e      	ldrb	r6, [r7, #0]
  tu_varclr(&_usbd_dev);
10005a02:	f7fb fc4b 	bl	1000129c <__wrap_memset>
  memset(_usbd_dev.itf2drv, DRVID_INVALID, sizeof(_usbd_dev.itf2drv)); // invalid mapping
10005a06:	2210      	movs	r2, #16
10005a08:	21ff      	movs	r1, #255	; 0xff
10005a0a:	485e      	ldr	r0, [pc, #376]	; (10005b84 <tud_task+0x30c>)
10005a0c:	f7fb fc46 	bl	1000129c <__wrap_memset>
  memset(_usbd_dev.ep2drv , DRVID_INVALID, sizeof(_usbd_dev.ep2drv )); // invalid mapping
10005a10:	4855      	ldr	r0, [pc, #340]	; (10005b68 <tud_task+0x2f0>)
10005a12:	2212      	movs	r2, #18
10005a14:	21ff      	movs	r1, #255	; 0xff
10005a16:	3013      	adds	r0, #19
10005a18:	f7fb fc40 	bl	1000129c <__wrap_memset>
  usbd_control_reset();
10005a1c:	f000 fd24 	bl	10006468 <usbd_control_reset>
  for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
10005a20:	4d53      	ldr	r5, [pc, #332]	; (10005b70 <tud_task+0x2f8>)
10005a22:	4a52      	ldr	r2, [pc, #328]	; (10005b6c <tud_task+0x2f4>)
10005a24:	2400      	movs	r4, #0
10005a26:	782b      	ldrb	r3, [r5, #0]
10005a28:	2a00      	cmp	r2, #0
10005a2a:	d100      	bne.n	10005a2e <tud_task+0x1b6>
10005a2c:	e070      	b.n	10005b10 <tud_task+0x298>
10005a2e:	4a56      	ldr	r2, [pc, #344]	; (10005b88 <tud_task+0x310>)
10005a30:	4690      	mov	r8, r2
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
10005a32:	4a53      	ldr	r2, [pc, #332]	; (10005b80 <tud_task+0x308>)
10005a34:	4691      	mov	r9, r2
10005a36:	42a3      	cmp	r3, r4
10005a38:	d845      	bhi.n	10005ac6 <tud_task+0x24e>
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
10005a3a:	d166      	bne.n	10005b0a <tud_task+0x292>
10005a3c:	4643      	mov	r3, r8
    get_driver(i)->reset(rhport);
10005a3e:	0030      	movs	r0, r6
10005a40:	4798      	blx	r3
  for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
10005a42:	3401      	adds	r4, #1
10005a44:	782b      	ldrb	r3, [r5, #0]
10005a46:	b2e4      	uxtb	r4, r4
10005a48:	42a3      	cmp	r3, r4
10005a4a:	d2f4      	bcs.n	10005a36 <tud_task+0x1be>
        if (tud_umount_cb) tud_umount_cb();
10005a4c:	4b4f      	ldr	r3, [pc, #316]	; (10005b8c <tud_task+0x314>)
10005a4e:	2b00      	cmp	r3, #0
10005a50:	d100      	bne.n	10005a54 <tud_task+0x1dc>
10005a52:	e722      	b.n	1000589a <tud_task+0x22>
10005a54:	e000      	b.n	10005a58 <tud_task+0x1e0>
10005a56:	bf00      	nop
10005a58:	e71f      	b.n	1000589a <tud_task+0x22>
  tu_varclr(&_usbd_dev);
10005a5a:	4b43      	ldr	r3, [pc, #268]	; (10005b68 <tud_task+0x2f0>)
10005a5c:	2237      	movs	r2, #55	; 0x37
10005a5e:	4698      	mov	r8, r3
10005a60:	2100      	movs	r1, #0
10005a62:	0018      	movs	r0, r3
        usbd_reset(event.rhport);
10005a64:	783e      	ldrb	r6, [r7, #0]
  tu_varclr(&_usbd_dev);
10005a66:	f7fb fc19 	bl	1000129c <__wrap_memset>
  memset(_usbd_dev.itf2drv, DRVID_INVALID, sizeof(_usbd_dev.itf2drv)); // invalid mapping
10005a6a:	4643      	mov	r3, r8
10005a6c:	2210      	movs	r2, #16
10005a6e:	1cd8      	adds	r0, r3, #3
10005a70:	21ff      	movs	r1, #255	; 0xff
10005a72:	f7fb fc13 	bl	1000129c <__wrap_memset>
  memset(_usbd_dev.ep2drv , DRVID_INVALID, sizeof(_usbd_dev.ep2drv )); // invalid mapping
10005a76:	4640      	mov	r0, r8
10005a78:	2212      	movs	r2, #18
10005a7a:	21ff      	movs	r1, #255	; 0xff
10005a7c:	3013      	adds	r0, #19
10005a7e:	f7fb fc0d 	bl	1000129c <__wrap_memset>
  usbd_control_reset();
10005a82:	f000 fcf1 	bl	10006468 <usbd_control_reset>
  for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
10005a86:	4d3a      	ldr	r5, [pc, #232]	; (10005b70 <tud_task+0x2f8>)
10005a88:	4a38      	ldr	r2, [pc, #224]	; (10005b6c <tud_task+0x2f4>)
10005a8a:	2400      	movs	r4, #0
10005a8c:	782b      	ldrb	r3, [r5, #0]
10005a8e:	2a00      	cmp	r2, #0
10005a90:	d035      	beq.n	10005afe <tud_task+0x286>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
10005a92:	4a3b      	ldr	r2, [pc, #236]	; (10005b80 <tud_task+0x308>)
10005a94:	4691      	mov	r9, r2
10005a96:	429c      	cmp	r4, r3
10005a98:	d30c      	bcc.n	10005ab4 <tud_task+0x23c>
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
10005a9a:	d136      	bne.n	10005b0a <tud_task+0x292>
10005a9c:	4b3a      	ldr	r3, [pc, #232]	; (10005b88 <tud_task+0x310>)
    get_driver(i)->reset(rhport);
10005a9e:	0030      	movs	r0, r6
10005aa0:	4798      	blx	r3
  for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
10005aa2:	3401      	adds	r4, #1
10005aa4:	782b      	ldrb	r3, [r5, #0]
10005aa6:	b2e4      	uxtb	r4, r4
10005aa8:	42a3      	cmp	r3, r4
10005aaa:	d2f4      	bcs.n	10005a96 <tud_task+0x21e>
        _usbd_dev.speed = event.bus_reset.speed;
10005aac:	4642      	mov	r2, r8
10005aae:	793b      	ldrb	r3, [r7, #4]
10005ab0:	7093      	strb	r3, [r2, #2]
      break;
10005ab2:	e6f2      	b.n	1000589a <tud_task+0x22>
    get_driver(i)->reset(rhport);
10005ab4:	464a      	mov	r2, r9
10005ab6:	6812      	ldr	r2, [r2, #0]
10005ab8:	00e3      	lsls	r3, r4, #3
10005aba:	4694      	mov	ip, r2
10005abc:	1b1b      	subs	r3, r3, r4
10005abe:	009b      	lsls	r3, r3, #2
10005ac0:	4463      	add	r3, ip
10005ac2:	685b      	ldr	r3, [r3, #4]
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
10005ac4:	e7eb      	b.n	10005a9e <tud_task+0x226>
    get_driver(i)->reset(rhport);
10005ac6:	464a      	mov	r2, r9
10005ac8:	6812      	ldr	r2, [r2, #0]
10005aca:	00e3      	lsls	r3, r4, #3
10005acc:	4694      	mov	ip, r2
10005ace:	1b1b      	subs	r3, r3, r4
10005ad0:	009b      	lsls	r3, r3, #2
10005ad2:	4463      	add	r3, ip
10005ad4:	685b      	ldr	r3, [r3, #4]
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
10005ad6:	e7b2      	b.n	10005a3e <tud_task+0x1c6>
}
10005ad8:	b00b      	add	sp, #44	; 0x2c
10005ada:	bcf0      	pop	{r4, r5, r6, r7}
10005adc:	46bb      	mov	fp, r7
10005ade:	46b2      	mov	sl, r6
10005ae0:	46a9      	mov	r9, r5
10005ae2:	46a0      	mov	r8, r4
10005ae4:	bdf0      	pop	{r4, r5, r6, r7, pc}
          usbd_control_xfer_cb(event.rhport, ep_addr, (xfer_result_t)event.xfer_complete.result, event.xfer_complete.len);
10005ae6:	797a      	ldrb	r2, [r7, #5]
10005ae8:	7838      	ldrb	r0, [r7, #0]
10005aea:	68bb      	ldr	r3, [r7, #8]
10005aec:	f000 fcda 	bl	100064a4 <usbd_control_xfer_cb>
10005af0:	e6d3      	b.n	1000589a <tud_task+0x22>
        for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
10005af2:	2b00      	cmp	r3, #0
10005af4:	d100      	bne.n	10005af8 <tud_task+0x280>
10005af6:	e6d0      	b.n	1000589a <tud_task+0x22>
          if ( driver->sof ) driver->sof(event.rhport);
10005af8:	2300      	movs	r3, #0
10005afa:	699b      	ldr	r3, [r3, #24]
10005afc:	deff      	udf	#255	; 0xff
    get_driver(i)->reset(rhport);
10005afe:	0030      	movs	r0, r6
10005b00:	f7ff facc 	bl	1000509c <cdcd_reset>
  for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
10005b04:	782b      	ldrb	r3, [r5, #0]
10005b06:	2b00      	cmp	r3, #0
10005b08:	d0d0      	beq.n	10005aac <tud_task+0x234>
    get_driver(i)->reset(rhport);
10005b0a:	2300      	movs	r3, #0
10005b0c:	685b      	ldr	r3, [r3, #4]
10005b0e:	deff      	udf	#255	; 0xff
10005b10:	0030      	movs	r0, r6
10005b12:	f7ff fac3 	bl	1000509c <cdcd_reset>
  for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
10005b16:	782b      	ldrb	r3, [r5, #0]
10005b18:	2b00      	cmp	r3, #0
10005b1a:	d097      	beq.n	10005a4c <tud_task+0x1d4>
10005b1c:	e7f5      	b.n	10005b0a <tud_task+0x292>
    TU_VERIFY(tud_vendor_control_request_cb);
10005b1e:	4b1c      	ldr	r3, [pc, #112]	; (10005b90 <tud_task+0x318>)
10005b20:	2b00      	cmp	r3, #0
10005b22:	d100      	bne.n	10005b26 <tud_task+0x2ae>
10005b24:	e72a      	b.n	1000597c <tud_task+0x104>
    if (tud_vendor_control_complete_cb) usbd_control_set_complete_callback(tud_vendor_control_complete_cb);
10005b26:	481b      	ldr	r0, [pc, #108]	; (10005b94 <tud_task+0x31c>)
10005b28:	2800      	cmp	r0, #0
10005b2a:	d001      	beq.n	10005b30 <tud_task+0x2b8>
10005b2c:	f000 fca6 	bl	1000647c <usbd_control_set_complete_callback>
    return tud_vendor_control_request_cb(rhport, p_request);
10005b30:	4648      	mov	r0, r9
10005b32:	a908      	add	r1, sp, #32
10005b34:	e000      	b.n	10005b38 <tud_task+0x2c0>
10005b36:	bf00      	nop
10005b38:	0004      	movs	r4, r0
        if ( !process_control_request(event.rhport, &event.setup_received) )
10005b3a:	2c00      	cmp	r4, #0
10005b3c:	d000      	beq.n	10005b40 <tud_task+0x2c8>
10005b3e:	e6ac      	b.n	1000589a <tud_task+0x22>
10005b40:	e71c      	b.n	1000597c <tud_task+0x104>
  {
    //------------- Device Requests e.g in enumeration -------------//
    case TUSB_REQ_RCPT_DEVICE:
      if ( TUSB_REQ_TYPE_CLASS == p_request->bmRequestType_bit.type )
10005b42:	2b20      	cmp	r3, #32
10005b44:	d100      	bne.n	10005b48 <tud_task+0x2d0>
10005b46:	e09b      	b.n	10005c80 <tud_task+0x408>
        TU_VERIFY(driver);

        // forward to class driver: "non-STD request to Interface"
        return invoke_class_control(rhport, driver, p_request);
      }
      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type )
10005b48:	2b00      	cmp	r3, #0
10005b4a:	d000      	beq.n	10005b4e <tud_task+0x2d6>
10005b4c:	e716      	b.n	1000597c <tud_task+0x104>
        // Non standard request is not supported
        TU_BREAKPOINT();
        return false;
      }

      switch ( p_request->bRequest )
10005b4e:	797b      	ldrb	r3, [r7, #5]
10005b50:	2b09      	cmp	r3, #9
10005b52:	d900      	bls.n	10005b56 <tud_task+0x2de>
10005b54:	e712      	b.n	1000597c <tud_task+0x104>
10005b56:	4a10      	ldr	r2, [pc, #64]	; (10005b98 <tud_task+0x320>)
10005b58:	009b      	lsls	r3, r3, #2
10005b5a:	58d3      	ldr	r3, [r2, r3]
10005b5c:	469f      	mov	pc, r3
10005b5e:	46c0      	nop			; (mov r8, r8)
10005b60:	200392b4 	.word	0x200392b4
10005b64:	10009b74 	.word	0x10009b74
10005b68:	20039278 	.word	0x20039278
10005b6c:	00000000 	.word	0x00000000
10005b70:	20039bb7 	.word	0x20039bb7
10005b74:	10005259 	.word	0x10005259
	...
10005b80:	20038f48 	.word	0x20038f48
10005b84:	2003927b 	.word	0x2003927b
10005b88:	1000509d 	.word	0x1000509d
	...
10005b98:	10009b98 	.word	0x10009b98
10005b9c:	227f      	movs	r2, #127	; 0x7f
static inline uint8_t tu_u16_low (uint16_t u16) { return (uint8_t) (u16 & 0x00ff); }
10005b9e:	7a39      	ldrb	r1, [r7, #8]
10005ba0:	400a      	ands	r2, r1
10005ba2:	9202      	str	r2, [sp, #8]
    {
      uint8_t const ep_addr = tu_u16_low(p_request->wIndex);
      uint8_t const ep_num  = tu_edpt_number(ep_addr);
      uint8_t const ep_dir  = tu_edpt_dir(ep_addr);

      TU_ASSERT(ep_num < TU_ARRAY_SIZE(_usbd_dev.ep2drv) );
10005ba4:	2a08      	cmp	r2, #8
10005ba6:	d900      	bls.n	10005baa <tud_task+0x332>
10005ba8:	e6e8      	b.n	1000597c <tud_task+0x104>
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
10005baa:	09c8      	lsrs	r0, r1, #7
10005bac:	9001      	str	r0, [sp, #4]

      bool ret = false;

      // Handle STD request to endpoint
      if ( TUSB_REQ_TYPE_STANDARD == p_request->bmRequestType_bit.type )
10005bae:	2b00      	cmp	r3, #0
10005bb0:	d100      	bne.n	10005bb4 <tud_task+0x33c>
10005bb2:	e082      	b.n	10005cba <tud_task+0x442>
      bool ret = false;
10005bb4:	2400      	movs	r4, #0
10005bb6:	0053      	lsls	r3, r2, #1
10005bb8:	9302      	str	r3, [sp, #8]
          // Unknown/Unsupported request
          default: TU_BREAKPOINT(); return false;
        }
      }

      usbd_class_driver_t const * driver = get_driver(_usbd_dev.ep2drv[ep_num][ep_dir]);
10005bba:	9a01      	ldr	r2, [sp, #4]
10005bbc:	9b02      	ldr	r3, [sp, #8]
10005bbe:	4694      	mov	ip, r2
10005bc0:	4443      	add	r3, r8
  if ( usbd_app_driver_get_cb )
10005bc2:	4ac9      	ldr	r2, [pc, #804]	; (10005ee8 <tud_task+0x670>)
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.ep2drv[ep_num][ep_dir]);
10005bc4:	4463      	add	r3, ip
10005bc6:	7cdb      	ldrb	r3, [r3, #19]
  if ( usbd_app_driver_get_cb )
10005bc8:	2a00      	cmp	r2, #0
10005bca:	d006      	beq.n	10005bda <tud_task+0x362>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
10005bcc:	4ac7      	ldr	r2, [pc, #796]	; (10005eec <tud_task+0x674>)
10005bce:	7812      	ldrb	r2, [r2, #0]
10005bd0:	4293      	cmp	r3, r2
10005bd2:	d200      	bcs.n	10005bd6 <tud_task+0x35e>
10005bd4:	e100      	b.n	10005dd8 <tud_task+0x560>
    drvid -= _app_driver_count;
10005bd6:	1a9b      	subs	r3, r3, r2
10005bd8:	b2db      	uxtb	r3, r3
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
10005bda:	2b00      	cmp	r3, #0
10005bdc:	d000      	beq.n	10005be0 <tud_task+0x368>
10005bde:	e0f2      	b.n	10005dc6 <tud_task+0x54e>
10005be0:	48c3      	ldr	r0, [pc, #780]	; (10005ef0 <tud_task+0x678>)
10005be2:	4dc4      	ldr	r5, [pc, #784]	; (10005ef4 <tud_task+0x67c>)
  usbd_control_set_complete_callback(driver->control_complete);
10005be4:	f000 fc4a 	bl	1000647c <usbd_control_set_complete_callback>
  return driver->control_request(rhport, request);
10005be8:	4648      	mov	r0, r9
10005bea:	68eb      	ldr	r3, [r5, #12]
10005bec:	a908      	add	r1, sp, #32
10005bee:	4798      	blx	r3
        // We will forward all request targeted endpoint to class drivers after
        // - For class-type requests: driver is fully responsible to reply to host
        // - For std-type requests  : driver init/re-init internal variable/buffer only, and
        //                            must not call tud_control_status(), driver's return value will have no effect.
        //                            EP state has already affected (stalled/cleared)
        if ( invoke_class_control(rhport, driver, p_request) ) ret = true;
10005bf0:	2800      	cmp	r0, #0
10005bf2:	d100      	bne.n	10005bf6 <tud_task+0x37e>
10005bf4:	e0e7      	b.n	10005dc6 <tud_task+0x54e>
      }

      if ( TUSB_REQ_TYPE_STANDARD == p_request->bmRequestType_bit.type )
10005bf6:	2260      	movs	r2, #96	; 0x60
10005bf8:	793b      	ldrb	r3, [r7, #4]
10005bfa:	421a      	tst	r2, r3
10005bfc:	d000      	beq.n	10005c00 <tud_task+0x388>
10005bfe:	e64c      	b.n	1000589a <tud_task+0x22>
      {
        // Set complete callback = NULL since it can also stall the request.
        usbd_control_set_complete_callback(NULL);
10005c00:	2000      	movs	r0, #0
10005c02:	f000 fc3b 	bl	1000647c <usbd_control_set_complete_callback>
10005c06:	e648      	b.n	1000589a <tud_task+0x22>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
10005c08:	00da      	lsls	r2, r3, #3
10005c0a:	1ad3      	subs	r3, r2, r3
10005c0c:	4aba      	ldr	r2, [pc, #744]	; (10005ef8 <tud_task+0x680>)
10005c0e:	009b      	lsls	r3, r3, #2
10005c10:	6812      	ldr	r2, [r2, #0]
10005c12:	18d3      	adds	r3, r2, r3
          TU_ASSERT(driver, );
10005c14:	2b00      	cmp	r3, #0
10005c16:	d100      	bne.n	10005c1a <tud_task+0x3a2>
10005c18:	e75e      	b.n	10005ad8 <tud_task+0x260>
          driver->xfer_cb(event.rhport, ep_addr, event.xfer_complete.result, event.xfer_complete.len);
10005c1a:	695c      	ldr	r4, [r3, #20]
10005c1c:	e68a      	b.n	10005934 <tud_task+0xbc>
10005c1e:	7a3b      	ldrb	r3, [r7, #8]
      TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
10005c20:	2b0f      	cmp	r3, #15
10005c22:	d900      	bls.n	10005c26 <tud_task+0x3ae>
10005c24:	e6aa      	b.n	1000597c <tud_task+0x104>
  if ( usbd_app_driver_get_cb )
10005c26:	4ab0      	ldr	r2, [pc, #704]	; (10005ee8 <tud_task+0x670>)
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
10005c28:	4443      	add	r3, r8
10005c2a:	78db      	ldrb	r3, [r3, #3]
  if ( usbd_app_driver_get_cb )
10005c2c:	2a00      	cmp	r2, #0
10005c2e:	d005      	beq.n	10005c3c <tud_task+0x3c4>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
10005c30:	4aae      	ldr	r2, [pc, #696]	; (10005eec <tud_task+0x674>)
10005c32:	7812      	ldrb	r2, [r2, #0]
10005c34:	4293      	cmp	r3, r2
10005c36:	d35e      	bcc.n	10005cf6 <tud_task+0x47e>
    drvid -= _app_driver_count;
10005c38:	1a9b      	subs	r3, r3, r2
10005c3a:	b2db      	uxtb	r3, r3
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
10005c3c:	2b00      	cmp	r3, #0
10005c3e:	d000      	beq.n	10005c42 <tud_task+0x3ca>
10005c40:	e69c      	b.n	1000597c <tud_task+0x104>
10005c42:	48ab      	ldr	r0, [pc, #684]	; (10005ef0 <tud_task+0x678>)
10005c44:	4cab      	ldr	r4, [pc, #684]	; (10005ef4 <tud_task+0x67c>)
  usbd_control_set_complete_callback(driver->control_complete);
10005c46:	f000 fc19 	bl	1000647c <usbd_control_set_complete_callback>
  return driver->control_request(rhport, request);
10005c4a:	4648      	mov	r0, r9
10005c4c:	68e3      	ldr	r3, [r4, #12]
10005c4e:	a908      	add	r1, sp, #32
10005c50:	4798      	blx	r3
      if ( !invoke_class_control(rhport, driver, p_request) )
10005c52:	2800      	cmp	r0, #0
10005c54:	d000      	beq.n	10005c58 <tud_task+0x3e0>
10005c56:	e620      	b.n	1000589a <tud_task+0x22>
        TU_VERIFY( TUSB_REQ_TYPE_STANDARD == p_request->bmRequestType_bit.type &&
10005c58:	2260      	movs	r2, #96	; 0x60
10005c5a:	0011      	movs	r1, r2
10005c5c:	793b      	ldrb	r3, [r7, #4]
10005c5e:	4019      	ands	r1, r3
10005c60:	421a      	tst	r2, r3
10005c62:	d000      	beq.n	10005c66 <tud_task+0x3ee>
10005c64:	e68a      	b.n	1000597c <tud_task+0x104>
10005c66:	797b      	ldrb	r3, [r7, #5]
10005c68:	2b0a      	cmp	r3, #10
10005c6a:	d000      	beq.n	10005c6e <tud_task+0x3f6>
10005c6c:	e686      	b.n	1000597c <tud_task+0x104>
        uint8_t alternate = 0;
10005c6e:	ab06      	add	r3, sp, #24
10005c70:	1c9a      	adds	r2, r3, #2
10005c72:	7011      	strb	r1, [r2, #0]
        tud_control_xfer(rhport, p_request, &alternate, 1);
10005c74:	2301      	movs	r3, #1
10005c76:	4648      	mov	r0, r9
10005c78:	a908      	add	r1, sp, #32
10005c7a:	f000 fb97 	bl	100063ac <tud_control_xfer>
10005c7e:	e60c      	b.n	1000589a <tud_task+0x22>
10005c80:	7a3b      	ldrb	r3, [r7, #8]
        TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
10005c82:	2b0f      	cmp	r3, #15
10005c84:	d900      	bls.n	10005c88 <tud_task+0x410>
10005c86:	e679      	b.n	1000597c <tud_task+0x104>
  if ( usbd_app_driver_get_cb )
10005c88:	4a97      	ldr	r2, [pc, #604]	; (10005ee8 <tud_task+0x670>)
        usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
10005c8a:	4443      	add	r3, r8
10005c8c:	78db      	ldrb	r3, [r3, #3]
  if ( usbd_app_driver_get_cb )
10005c8e:	2a00      	cmp	r2, #0
10005c90:	d006      	beq.n	10005ca0 <tud_task+0x428>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
10005c92:	4a96      	ldr	r2, [pc, #600]	; (10005eec <tud_task+0x674>)
10005c94:	7812      	ldrb	r2, [r2, #0]
10005c96:	4293      	cmp	r3, r2
10005c98:	d200      	bcs.n	10005c9c <tud_task+0x424>
10005c9a:	e0c7      	b.n	10005e2c <tud_task+0x5b4>
    drvid -= _app_driver_count;
10005c9c:	1a9b      	subs	r3, r3, r2
10005c9e:	b2db      	uxtb	r3, r3
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
10005ca0:	2b00      	cmp	r3, #0
10005ca2:	d000      	beq.n	10005ca6 <tud_task+0x42e>
10005ca4:	e66a      	b.n	1000597c <tud_task+0x104>
10005ca6:	4892      	ldr	r0, [pc, #584]	; (10005ef0 <tud_task+0x678>)
10005ca8:	4c92      	ldr	r4, [pc, #584]	; (10005ef4 <tud_task+0x67c>)
  usbd_control_set_complete_callback(driver->control_complete);
10005caa:	f000 fbe7 	bl	1000647c <usbd_control_set_complete_callback>
  return driver->control_request(rhport, request);
10005cae:	68e3      	ldr	r3, [r4, #12]
10005cb0:	4648      	mov	r0, r9
10005cb2:	a908      	add	r1, sp, #32
10005cb4:	4798      	blx	r3
10005cb6:	0004      	movs	r4, r0
        return invoke_class_control(rhport, driver, p_request);
10005cb8:	e73f      	b.n	10005b3a <tud_task+0x2c2>
        switch ( p_request->bRequest )
10005cba:	797b      	ldrb	r3, [r7, #5]
10005cbc:	9303      	str	r3, [sp, #12]
10005cbe:	2b01      	cmp	r3, #1
10005cc0:	d100      	bne.n	10005cc4 <tud_task+0x44c>
10005cc2:	e09d      	b.n	10005e00 <tud_task+0x588>
10005cc4:	2b03      	cmp	r3, #3
10005cc6:	d100      	bne.n	10005cca <tud_task+0x452>
10005cc8:	e090      	b.n	10005dec <tud_task+0x574>
10005cca:	2b00      	cmp	r3, #0
10005ccc:	d000      	beq.n	10005cd0 <tud_task+0x458>
10005cce:	e655      	b.n	1000597c <tud_task+0x104>
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
  uint8_t const dir   = tu_edpt_dir(ep_addr);

  return _usbd_dev.ep_status[epnum][dir].stalled;
10005cd0:	0053      	lsls	r3, r2, #1
10005cd2:	9a01      	ldr	r2, [sp, #4]
10005cd4:	9302      	str	r3, [sp, #8]
10005cd6:	4694      	mov	ip, r2
10005cd8:	4443      	add	r3, r8
10005cda:	4463      	add	r3, ip
10005cdc:	3320      	adds	r3, #32
10005cde:	795b      	ldrb	r3, [r3, #5]
            uint16_t status = usbd_edpt_stalled(rhport, ep_addr) ? 0x0001 : 0x0000;
10005ce0:	aa06      	add	r2, sp, #24
  return _usbd_dev.ep_status[epnum][dir].stalled;
10005ce2:	079b      	lsls	r3, r3, #30
10005ce4:	0fdb      	lsrs	r3, r3, #31
            uint16_t status = usbd_edpt_stalled(rhport, ep_addr) ? 0x0001 : 0x0000;
10005ce6:	3202      	adds	r2, #2
10005ce8:	8013      	strh	r3, [r2, #0]
            tud_control_xfer(rhport, p_request, &status, 2);
10005cea:	4648      	mov	r0, r9
10005cec:	2302      	movs	r3, #2
10005cee:	a908      	add	r1, sp, #32
10005cf0:	f000 fb5c 	bl	100063ac <tud_control_xfer>
          break;
10005cf4:	e761      	b.n	10005bba <tud_task+0x342>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
10005cf6:	4a80      	ldr	r2, [pc, #512]	; (10005ef8 <tud_task+0x680>)
10005cf8:	00dc      	lsls	r4, r3, #3
10005cfa:	1ae3      	subs	r3, r4, r3
10005cfc:	6814      	ldr	r4, [r2, #0]
10005cfe:	009b      	lsls	r3, r3, #2
10005d00:	18e4      	adds	r4, r4, r3
      TU_VERIFY(driver);
10005d02:	2c00      	cmp	r4, #0
10005d04:	d100      	bne.n	10005d08 <tud_task+0x490>
10005d06:	e639      	b.n	1000597c <tud_task+0x104>
  usbd_control_set_complete_callback(driver->control_complete);
10005d08:	6920      	ldr	r0, [r4, #16]
10005d0a:	e79c      	b.n	10005c46 <tud_task+0x3ce>
          TU_VERIFY(TUSB_REQ_FEATURE_REMOTE_WAKEUP == p_request->wValue);
10005d0c:	88fb      	ldrh	r3, [r7, #6]
10005d0e:	2b01      	cmp	r3, #1
10005d10:	d000      	beq.n	10005d14 <tud_task+0x49c>
10005d12:	e633      	b.n	1000597c <tud_task+0x104>
          _usbd_dev.remote_wakeup_en = false;
10005d14:	4643      	mov	r3, r8
10005d16:	2208      	movs	r2, #8
10005d18:	781b      	ldrb	r3, [r3, #0]
10005d1a:	4393      	bics	r3, r2
10005d1c:	4642      	mov	r2, r8
          tud_control_status(rhport, p_request);
10005d1e:	4648      	mov	r0, r9
10005d20:	a908      	add	r1, sp, #32
          _usbd_dev.remote_wakeup_en = false;
10005d22:	7013      	strb	r3, [r2, #0]
          tud_control_status(rhport, p_request);
10005d24:	f000 fb2a 	bl	1000637c <tud_control_status>
        break;
10005d28:	e5b7      	b.n	1000589a <tud_task+0x22>
          uint16_t status = (_usbd_dev.self_powered ? 1 : 0) | (_usbd_dev.remote_wakeup_en ? 2 : 0);
10005d2a:	4643      	mov	r3, r8
10005d2c:	2002      	movs	r0, #2
10005d2e:	7819      	ldrb	r1, [r3, #0]
10005d30:	ab06      	add	r3, sp, #24
10005d32:	1c9a      	adds	r2, r3, #2
10005d34:	068b      	lsls	r3, r1, #26
10005d36:	0889      	lsrs	r1, r1, #2
10005d38:	4001      	ands	r1, r0
10005d3a:	0fdb      	lsrs	r3, r3, #31
10005d3c:	430b      	orrs	r3, r1
10005d3e:	8013      	strh	r3, [r2, #0]
          tud_control_xfer(rhport, p_request, &status, 2);
10005d40:	4648      	mov	r0, r9
10005d42:	2302      	movs	r3, #2
10005d44:	a908      	add	r1, sp, #32
10005d46:	f000 fb31 	bl	100063ac <tud_control_xfer>
        break;
10005d4a:	e5a6      	b.n	1000589a <tud_task+0x22>
          if ( !_usbd_dev.cfg_num && cfg_num ) TU_ASSERT( process_set_config(rhport, cfg_num) );
10005d4c:	4643      	mov	r3, r8
          uint8_t const cfg_num = (uint8_t) p_request->wValue;
10005d4e:	79ba      	ldrb	r2, [r7, #6]
10005d50:	9203      	str	r2, [sp, #12]
          if ( !_usbd_dev.cfg_num && cfg_num ) TU_ASSERT( process_set_config(rhport, cfg_num) );
10005d52:	785b      	ldrb	r3, [r3, #1]
10005d54:	2b00      	cmp	r3, #0
10005d56:	d102      	bne.n	10005d5e <tud_task+0x4e6>
10005d58:	2a00      	cmp	r2, #0
10005d5a:	d000      	beq.n	10005d5e <tud_task+0x4e6>
10005d5c:	e084      	b.n	10005e68 <tud_task+0x5f0>
          _usbd_dev.cfg_num = cfg_num;
10005d5e:	4643      	mov	r3, r8
10005d60:	9a03      	ldr	r2, [sp, #12]
          tud_control_status(rhport, p_request);
10005d62:	4648      	mov	r0, r9
10005d64:	a908      	add	r1, sp, #32
          _usbd_dev.cfg_num = cfg_num;
10005d66:	705a      	strb	r2, [r3, #1]
          tud_control_status(rhport, p_request);
10005d68:	f000 fb08 	bl	1000637c <tud_control_status>
        break;
10005d6c:	e595      	b.n	1000589a <tud_task+0x22>
          uint8_t cfg_num = _usbd_dev.cfg_num;
10005d6e:	4643      	mov	r3, r8
10005d70:	aa06      	add	r2, sp, #24
10005d72:	785b      	ldrb	r3, [r3, #1]
10005d74:	3202      	adds	r2, #2
10005d76:	7013      	strb	r3, [r2, #0]
          tud_control_xfer(rhport, p_request, &cfg_num, 1);
10005d78:	4648      	mov	r0, r9
10005d7a:	2301      	movs	r3, #1
10005d7c:	a908      	add	r1, sp, #32
10005d7e:	f000 fb15 	bl	100063ac <tud_control_xfer>
        break;
10005d82:	e58a      	b.n	1000589a <tud_task+0x22>
  tusb_desc_type_t const desc_type = (tusb_desc_type_t) tu_u16_high(p_request->wValue);
10005d84:	88fb      	ldrh	r3, [r7, #6]
10005d86:	79b8      	ldrb	r0, [r7, #6]
  switch(desc_type)
10005d88:	0a1b      	lsrs	r3, r3, #8
10005d8a:	2b0f      	cmp	r3, #15
10005d8c:	d900      	bls.n	10005d90 <tud_task+0x518>
10005d8e:	e5f5      	b.n	1000597c <tud_task+0x104>
10005d90:	4a5a      	ldr	r2, [pc, #360]	; (10005efc <tud_task+0x684>)
10005d92:	009b      	lsls	r3, r3, #2
10005d94:	58d3      	ldr	r3, [r2, r3]
10005d96:	469f      	mov	pc, r3
          usbd_control_set_request(p_request); // set request since DCD has no access to tud_control_status() API
10005d98:	a808      	add	r0, sp, #32
10005d9a:	f000 fb75 	bl	10006488 <usbd_control_set_request>
          dcd_set_address(rhport, (uint8_t) p_request->wValue);
10005d9e:	4648      	mov	r0, r9
10005da0:	79b9      	ldrb	r1, [r7, #6]
10005da2:	f000 fc95 	bl	100066d0 <dcd_set_address>
          _usbd_dev.addressed = 1;
10005da6:	4643      	mov	r3, r8
10005da8:	2202      	movs	r2, #2
10005daa:	781b      	ldrb	r3, [r3, #0]
10005dac:	4313      	orrs	r3, r2
10005dae:	4642      	mov	r2, r8
10005db0:	7013      	strb	r3, [r2, #0]
        break;
10005db2:	e572      	b.n	1000589a <tud_task+0x22>
          TU_VERIFY(TUSB_REQ_FEATURE_REMOTE_WAKEUP == p_request->wValue);
10005db4:	88fb      	ldrh	r3, [r7, #6]
10005db6:	2b01      	cmp	r3, #1
10005db8:	d000      	beq.n	10005dbc <tud_task+0x544>
10005dba:	e5df      	b.n	1000597c <tud_task+0x104>
          _usbd_dev.remote_wakeup_en = true;
10005dbc:	4643      	mov	r3, r8
10005dbe:	2208      	movs	r2, #8
10005dc0:	781b      	ldrb	r3, [r3, #0]
10005dc2:	4313      	orrs	r3, r2
10005dc4:	e7aa      	b.n	10005d1c <tud_task+0x4a4>
      if ( TUSB_REQ_TYPE_STANDARD == p_request->bmRequestType_bit.type )
10005dc6:	2260      	movs	r2, #96	; 0x60
10005dc8:	793b      	ldrb	r3, [r7, #4]
10005dca:	421a      	tst	r2, r3
10005dcc:	d000      	beq.n	10005dd0 <tud_task+0x558>
10005dce:	e6b4      	b.n	10005b3a <tud_task+0x2c2>
        usbd_control_set_complete_callback(NULL);
10005dd0:	2000      	movs	r0, #0
10005dd2:	f000 fb53 	bl	1000647c <usbd_control_set_complete_callback>
10005dd6:	e6b0      	b.n	10005b3a <tud_task+0x2c2>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
10005dd8:	4a47      	ldr	r2, [pc, #284]	; (10005ef8 <tud_task+0x680>)
10005dda:	00dd      	lsls	r5, r3, #3
10005ddc:	1aeb      	subs	r3, r5, r3
10005dde:	6815      	ldr	r5, [r2, #0]
10005de0:	009b      	lsls	r3, r3, #2
10005de2:	18ed      	adds	r5, r5, r3
      if (driver)
10005de4:	2d00      	cmp	r5, #0
10005de6:	d0ee      	beq.n	10005dc6 <tud_task+0x54e>
  usbd_control_set_complete_callback(driver->control_complete);
10005de8:	6928      	ldr	r0, [r5, #16]
10005dea:	e6fb      	b.n	10005be4 <tud_task+0x36c>
            if ( TUSB_REQ_FEATURE_EDPT_HALT == p_request->wValue ) usbd_edpt_stall(rhport, ep_addr);
10005dec:	88fb      	ldrh	r3, [r7, #6]
10005dee:	2b00      	cmp	r3, #0
10005df0:	d027      	beq.n	10005e42 <tud_task+0x5ca>
10005df2:	0053      	lsls	r3, r2, #1
10005df4:	9302      	str	r3, [sp, #8]
            tud_control_status(rhport, p_request);
10005df6:	4648      	mov	r0, r9
10005df8:	a908      	add	r1, sp, #32
10005dfa:	f000 fabf 	bl	1000637c <tud_control_status>
          break;
10005dfe:	e6dc      	b.n	10005bba <tud_task+0x342>
            if ( TUSB_REQ_FEATURE_EDPT_HALT == p_request->wValue ) usbd_edpt_clear_stall(rhport, ep_addr);
10005e00:	88fb      	ldrh	r3, [r7, #6]
10005e02:	2b00      	cmp	r3, #0
10005e04:	d1f5      	bne.n	10005df2 <tud_task+0x57a>
  dcd_edpt_clear_stall(rhport, ep_addr);
10005e06:	4648      	mov	r0, r9
10005e08:	f000 fdd4 	bl	100069b4 <dcd_edpt_clear_stall>
  _usbd_dev.ep_status[epnum][dir].stalled = false;
10005e0c:	9a01      	ldr	r2, [sp, #4]
10005e0e:	9b02      	ldr	r3, [sp, #8]
10005e10:	4694      	mov	ip, r2
10005e12:	005b      	lsls	r3, r3, #1
10005e14:	9302      	str	r3, [sp, #8]
10005e16:	4443      	add	r3, r8
10005e18:	4463      	add	r3, ip
10005e1a:	3320      	adds	r3, #32
10005e1c:	795a      	ldrb	r2, [r3, #5]
  _usbd_dev.ep_status[epnum][dir].busy = false;
10005e1e:	9903      	ldr	r1, [sp, #12]
  _usbd_dev.ep_status[epnum][dir].stalled = false;
10005e20:	43aa      	bics	r2, r5
10005e22:	715a      	strb	r2, [r3, #5]
  _usbd_dev.ep_status[epnum][dir].busy = false;
10005e24:	795a      	ldrb	r2, [r3, #5]
10005e26:	438a      	bics	r2, r1
10005e28:	715a      	strb	r2, [r3, #5]
}
10005e2a:	e7e4      	b.n	10005df6 <tud_task+0x57e>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
10005e2c:	4a32      	ldr	r2, [pc, #200]	; (10005ef8 <tud_task+0x680>)
10005e2e:	00dc      	lsls	r4, r3, #3
10005e30:	1ae3      	subs	r3, r4, r3
10005e32:	6814      	ldr	r4, [r2, #0]
10005e34:	009b      	lsls	r3, r3, #2
10005e36:	18e4      	adds	r4, r4, r3
        TU_VERIFY(driver);
10005e38:	2c00      	cmp	r4, #0
10005e3a:	d100      	bne.n	10005e3e <tud_task+0x5c6>
10005e3c:	e59e      	b.n	1000597c <tud_task+0x104>
  usbd_control_set_complete_callback(driver->control_complete);
10005e3e:	6920      	ldr	r0, [r4, #16]
10005e40:	e733      	b.n	10005caa <tud_task+0x432>
  dcd_edpt_stall(rhport, ep_addr);
10005e42:	4648      	mov	r0, r9
10005e44:	f000 fd8e 	bl	10006964 <dcd_edpt_stall>
  _usbd_dev.ep_status[epnum][dir].stalled = true;
10005e48:	9a01      	ldr	r2, [sp, #4]
10005e4a:	2102      	movs	r1, #2
10005e4c:	4694      	mov	ip, r2
10005e4e:	9b02      	ldr	r3, [sp, #8]
10005e50:	005b      	lsls	r3, r3, #1
10005e52:	9302      	str	r3, [sp, #8]
10005e54:	4443      	add	r3, r8
10005e56:	4463      	add	r3, ip
10005e58:	3320      	adds	r3, #32
10005e5a:	795a      	ldrb	r2, [r3, #5]
10005e5c:	430a      	orrs	r2, r1
10005e5e:	715a      	strb	r2, [r3, #5]
  _usbd_dev.ep_status[epnum][dir].busy = true;
10005e60:	795a      	ldrb	r2, [r3, #5]
10005e62:	4316      	orrs	r6, r2
10005e64:	715e      	strb	r6, [r3, #5]
}
10005e66:	e7c6      	b.n	10005df6 <tud_task+0x57e>
  tusb_desc_configuration_t const * desc_cfg = (tusb_desc_configuration_t const *) tud_descriptor_configuration_cb(cfg_num-1); // index is cfg_num-1
10005e68:	1e50      	subs	r0, r2, #1
10005e6a:	b2c0      	uxtb	r0, r0
10005e6c:	f7fe fa06 	bl	1000427c <tud_descriptor_configuration_cb>
  TU_ASSERT(desc_cfg != NULL && desc_cfg->bDescriptorType == TUSB_DESC_CONFIGURATION);
10005e70:	2800      	cmp	r0, #0
10005e72:	d100      	bne.n	10005e76 <tud_task+0x5fe>
10005e74:	e582      	b.n	1000597c <tud_task+0x104>
10005e76:	7843      	ldrb	r3, [r0, #1]
10005e78:	2b02      	cmp	r3, #2
10005e7a:	d000      	beq.n	10005e7e <tud_task+0x606>
10005e7c:	e57e      	b.n	1000597c <tud_task+0x104>
  _usbd_dev.remote_wakeup_support = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_REMOTE_WAKEUP) ? 1 : 0;
10005e7e:	2101      	movs	r1, #1
10005e80:	79c2      	ldrb	r2, [r0, #7]
  uint8_t const * p_desc   = ((uint8_t const*) desc_cfg) + sizeof(tusb_desc_configuration_t);
10005e82:	0005      	movs	r5, r0
  _usbd_dev.self_powered = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_SELF_POWERED) ? 1 : 0;
10005e84:	1193      	asrs	r3, r2, #6
  _usbd_dev.remote_wakeup_support = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_REMOTE_WAKEUP) ? 1 : 0;
10005e86:	1152      	asrs	r2, r2, #5
10005e88:	400b      	ands	r3, r1
10005e8a:	400a      	ands	r2, r1
10005e8c:	0112      	lsls	r2, r2, #4
10005e8e:	015b      	lsls	r3, r3, #5
10005e90:	4313      	orrs	r3, r2
10005e92:	4642      	mov	r2, r8
10005e94:	7812      	ldrb	r2, [r2, #0]
10005e96:	312f      	adds	r1, #47	; 0x2f
10005e98:	438a      	bics	r2, r1
10005e9a:	4313      	orrs	r3, r2
10005e9c:	4642      	mov	r2, r8
10005e9e:	7013      	strb	r3, [r2, #0]
  uint8_t const * desc_end = ((uint8_t const*) desc_cfg) + desc_cfg->wTotalLength;
10005ea0:	78c3      	ldrb	r3, [r0, #3]
10005ea2:	7882      	ldrb	r2, [r0, #2]
10005ea4:	021b      	lsls	r3, r3, #8
10005ea6:	4313      	orrs	r3, r2
10005ea8:	18c3      	adds	r3, r0, r3
  uint8_t const * p_desc   = ((uint8_t const*) desc_cfg) + sizeof(tusb_desc_configuration_t);
10005eaa:	3509      	adds	r5, #9
  uint8_t const * desc_end = ((uint8_t const*) desc_cfg) + desc_cfg->wTotalLength;
10005eac:	9304      	str	r3, [sp, #16]
  while( p_desc < desc_end )
10005eae:	9b04      	ldr	r3, [sp, #16]
10005eb0:	42ab      	cmp	r3, r5
10005eb2:	d800      	bhi.n	10005eb6 <tud_task+0x63e>
10005eb4:	e0cf      	b.n	10006056 <tud_task+0x7de>
    tusb_desc_interface_assoc_t const * desc_itf_assoc = NULL;
10005eb6:	2300      	movs	r3, #0
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
10005eb8:	786a      	ldrb	r2, [r5, #1]
10005eba:	9302      	str	r3, [sp, #8]
    if ( TUSB_DESC_INTERFACE_ASSOCIATION == tu_desc_type(p_desc) )
10005ebc:	2a0b      	cmp	r2, #11
10005ebe:	d104      	bne.n	10005eca <tud_task+0x652>
  return desc8 + desc8[DESC_OFFSET_LEN];
10005ec0:	782b      	ldrb	r3, [r5, #0]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
10005ec2:	9502      	str	r5, [sp, #8]
  return desc8 + desc8[DESC_OFFSET_LEN];
10005ec4:	18eb      	adds	r3, r5, r3
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
10005ec6:	001d      	movs	r5, r3
10005ec8:	785a      	ldrb	r2, [r3, #1]
    TU_ASSERT( TUSB_DESC_INTERFACE == tu_desc_type(p_desc) );
10005eca:	2a04      	cmp	r2, #4
10005ecc:	d000      	beq.n	10005ed0 <tud_task+0x658>
10005ece:	e555      	b.n	1000597c <tud_task+0x104>
    uint16_t const remaining_len = desc_end-p_desc;
10005ed0:	9b04      	ldr	r3, [sp, #16]
10005ed2:	4a05      	ldr	r2, [pc, #20]	; (10005ee8 <tud_task+0x670>)
10005ed4:	1b5b      	subs	r3, r3, r5
10005ed6:	b29b      	uxth	r3, r3
10005ed8:	9301      	str	r3, [sp, #4]
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
10005eda:	4b04      	ldr	r3, [pc, #16]	; (10005eec <tud_task+0x674>)
10005edc:	2400      	movs	r4, #0
10005ede:	781b      	ldrb	r3, [r3, #0]
10005ee0:	2a00      	cmp	r2, #0
10005ee2:	d11d      	bne.n	10005f20 <tud_task+0x6a8>
10005ee4:	e029      	b.n	10005f3a <tud_task+0x6c2>
10005ee6:	46c0      	nop			; (mov r8, r8)
10005ee8:	00000000 	.word	0x00000000
10005eec:	20039bb7 	.word	0x20039bb7
10005ef0:	100051ad 	.word	0x100051ad
10005ef4:	10009c00 	.word	0x10009c00
10005ef8:	20038f48 	.word	0x20038f48
10005efc:	10009bc0 	.word	0x10009bc0
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
10005f00:	429c      	cmp	r4, r3
10005f02:	d126      	bne.n	10005f52 <tud_task+0x6da>
10005f04:	4b57      	ldr	r3, [pc, #348]	; (10006064 <tud_task+0x7ec>)
      uint16_t const drv_len = driver->open(rhport, desc_itf, remaining_len);
10005f06:	0029      	movs	r1, r5
10005f08:	4648      	mov	r0, r9
10005f0a:	9a01      	ldr	r2, [sp, #4]
10005f0c:	4798      	blx	r3
      if ( drv_len > 0 )
10005f0e:	2800      	cmp	r0, #0
10005f10:	d122      	bne.n	10005f58 <tud_task+0x6e0>
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
10005f12:	4b55      	ldr	r3, [pc, #340]	; (10006068 <tud_task+0x7f0>)
10005f14:	3401      	adds	r4, #1
10005f16:	781b      	ldrb	r3, [r3, #0]
10005f18:	b2e4      	uxtb	r4, r4
10005f1a:	42a3      	cmp	r3, r4
10005f1c:	d200      	bcs.n	10005f20 <tud_task+0x6a8>
10005f1e:	e52d      	b.n	1000597c <tud_task+0x104>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
10005f20:	429c      	cmp	r4, r3
10005f22:	d2ed      	bcs.n	10005f00 <tud_task+0x688>
      uint16_t const drv_len = driver->open(rhport, desc_itf, remaining_len);
10005f24:	4b51      	ldr	r3, [pc, #324]	; (1000606c <tud_task+0x7f4>)
10005f26:	681b      	ldr	r3, [r3, #0]
10005f28:	9305      	str	r3, [sp, #20]
10005f2a:	9a05      	ldr	r2, [sp, #20]
10005f2c:	00e3      	lsls	r3, r4, #3
10005f2e:	4694      	mov	ip, r2
10005f30:	1b1b      	subs	r3, r3, r4
10005f32:	009b      	lsls	r3, r3, #2
10005f34:	4463      	add	r3, ip
10005f36:	689b      	ldr	r3, [r3, #8]
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
10005f38:	e7e5      	b.n	10005f06 <tud_task+0x68e>
      uint16_t const drv_len = driver->open(rhport, desc_itf, remaining_len);
10005f3a:	0029      	movs	r1, r5
10005f3c:	4648      	mov	r0, r9
10005f3e:	9a01      	ldr	r2, [sp, #4]
10005f40:	f7ff f8be 	bl	100050c0 <cdcd_open>
10005f44:	1e06      	subs	r6, r0, #0
      if ( drv_len > 0 )
10005f46:	d108      	bne.n	10005f5a <tud_task+0x6e2>
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
10005f48:	4b47      	ldr	r3, [pc, #284]	; (10006068 <tud_task+0x7f0>)
10005f4a:	781b      	ldrb	r3, [r3, #0]
10005f4c:	2b00      	cmp	r3, #0
10005f4e:	d100      	bne.n	10005f52 <tud_task+0x6da>
10005f50:	e514      	b.n	1000597c <tud_task+0x104>
      uint16_t const drv_len = driver->open(rhport, desc_itf, remaining_len);
10005f52:	2300      	movs	r3, #0
10005f54:	689b      	ldr	r3, [r3, #8]
10005f56:	deff      	udf	#255	; 0xff
10005f58:	0006      	movs	r6, r0
        TU_ASSERT( sizeof(tusb_desc_interface_t) <= drv_len && drv_len <= remaining_len);
10005f5a:	2e08      	cmp	r6, #8
10005f5c:	d800      	bhi.n	10005f60 <tud_task+0x6e8>
10005f5e:	e50d      	b.n	1000597c <tud_task+0x104>
10005f60:	9b01      	ldr	r3, [sp, #4]
10005f62:	42b3      	cmp	r3, r6
10005f64:	d200      	bcs.n	10005f68 <tud_task+0x6f0>
10005f66:	e509      	b.n	1000597c <tud_task+0x104>
        TU_ASSERT(DRVID_INVALID == _usbd_dev.itf2drv[desc_itf->bInterfaceNumber]);
10005f68:	4643      	mov	r3, r8
10005f6a:	78aa      	ldrb	r2, [r5, #2]
10005f6c:	189b      	adds	r3, r3, r2
10005f6e:	78d9      	ldrb	r1, [r3, #3]
10005f70:	29ff      	cmp	r1, #255	; 0xff
10005f72:	d000      	beq.n	10005f76 <tud_task+0x6fe>
10005f74:	e502      	b.n	1000597c <tud_task+0x104>
        _usbd_dev.itf2drv[desc_itf->bInterfaceNumber] = drv_id;
10005f76:	70dc      	strb	r4, [r3, #3]
        if (desc_itf_assoc)
10005f78:	9b02      	ldr	r3, [sp, #8]
10005f7a:	2b00      	cmp	r3, #0
10005f7c:	d014      	beq.n	10005fa8 <tud_task+0x730>
10005f7e:	0018      	movs	r0, r3
          TU_ASSERT(desc_itf_assoc->bFirstInterface == desc_itf->bInterfaceNumber &&
10005f80:	789b      	ldrb	r3, [r3, #2]
10005f82:	4293      	cmp	r3, r2
10005f84:	d000      	beq.n	10005f88 <tud_task+0x710>
10005f86:	e4f9      	b.n	1000597c <tud_task+0x104>
10005f88:	7901      	ldrb	r1, [r0, #4]
10005f8a:	796a      	ldrb	r2, [r5, #5]
10005f8c:	4291      	cmp	r1, r2
10005f8e:	d000      	beq.n	10005f92 <tud_task+0x71a>
10005f90:	e4f4      	b.n	1000597c <tud_task+0x104>
          for(uint8_t i=1; i<desc_itf_assoc->bInterfaceCount; i++)
10005f92:	78c2      	ldrb	r2, [r0, #3]
10005f94:	2a01      	cmp	r2, #1
10005f96:	d907      	bls.n	10005fa8 <tud_task+0x730>
            _usbd_dev.itf2drv[desc_itf->bInterfaceNumber+i] = drv_id;
10005f98:	3304      	adds	r3, #4
10005f9a:	3a01      	subs	r2, #1
10005f9c:	4443      	add	r3, r8
10005f9e:	0018      	movs	r0, r3
10005fa0:	0021      	movs	r1, r4
10005fa2:	b2d2      	uxtb	r2, r2
10005fa4:	f7fb f97a 	bl	1000129c <__wrap_memset>
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
10005fa8:	217f      	movs	r1, #127	; 0x7f
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
10005faa:	002a      	movs	r2, r5
10005fac:	2300      	movs	r3, #0
10005fae:	468c      	mov	ip, r1
    if ( TUSB_DESC_ENDPOINT == tu_desc_type(p_desc) )
10005fb0:	7851      	ldrb	r1, [r2, #1]
10005fb2:	2905      	cmp	r1, #5
10005fb4:	d107      	bne.n	10005fc6 <tud_task+0x74e>
      ep2drv[tu_edpt_number(ep_addr)][tu_edpt_dir(ep_addr)] = driver_id;
10005fb6:	4661      	mov	r1, ip
      uint8_t const ep_addr = ((tusb_desc_endpoint_t const*) p_desc)->bEndpointAddress;
10005fb8:	7890      	ldrb	r0, [r2, #2]
      ep2drv[tu_edpt_number(ep_addr)][tu_edpt_dir(ep_addr)] = driver_id;
10005fba:	4001      	ands	r1, r0
10005fbc:	0049      	lsls	r1, r1, #1
10005fbe:	4441      	add	r1, r8
10005fc0:	3113      	adds	r1, #19
10005fc2:	09c0      	lsrs	r0, r0, #7
10005fc4:	540c      	strb	r4, [r1, r0]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
10005fc6:	7811      	ldrb	r1, [r2, #0]
    len   = (uint16_t)(len + tu_desc_len(p_desc));
10005fc8:	185b      	adds	r3, r3, r1
10005fca:	b29b      	uxth	r3, r3
  return desc8 + desc8[DESC_OFFSET_LEN];
10005fcc:	1852      	adds	r2, r2, r1
  while( len < desc_len )
10005fce:	42b3      	cmp	r3, r6
10005fd0:	d3ee      	bcc.n	10005fb0 <tud_task+0x738>
    TU_ASSERT(drv_id < TOTAL_DRIVER_COUNT);
10005fd2:	4b25      	ldr	r3, [pc, #148]	; (10006068 <tud_task+0x7f0>)
        p_desc += drv_len; // next interface
10005fd4:	19ad      	adds	r5, r5, r6
    TU_ASSERT(drv_id < TOTAL_DRIVER_COUNT);
10005fd6:	781b      	ldrb	r3, [r3, #0]
10005fd8:	42a3      	cmp	r3, r4
10005fda:	d300      	bcc.n	10005fde <tud_task+0x766>
10005fdc:	e767      	b.n	10005eae <tud_task+0x636>
10005fde:	e4cd      	b.n	1000597c <tud_task+0x104>
      if (!tud_descriptor_bos_cb) return false;
10005fe0:	4b23      	ldr	r3, [pc, #140]	; (10006070 <tud_task+0x7f8>)
10005fe2:	2b00      	cmp	r3, #0
10005fe4:	d100      	bne.n	10005fe8 <tud_task+0x770>
10005fe6:	e4c9      	b.n	1000597c <tud_task+0x104>
      tusb_desc_bos_t const* desc_bos = (tusb_desc_bos_t const*) tud_descriptor_bos_cb();
10005fe8:	e000      	b.n	10005fec <tud_task+0x774>
10005fea:	bf00      	nop
10005fec:	0004      	movs	r4, r0
      memcpy(&total_len, (uint8_t*) desc_config + offsetof(tusb_desc_configuration_t, wTotalLength), 2);
10005fee:	ab06      	add	r3, sp, #24
10005ff0:	1c9d      	adds	r5, r3, #2
10005ff2:	2202      	movs	r2, #2
10005ff4:	1ca1      	adds	r1, r4, #2
10005ff6:	0028      	movs	r0, r5
10005ff8:	f7fb f956 	bl	100012a8 <__wrap___aeabi_memcpy>
      return tud_control_xfer(rhport, p_request, (void*) desc_config, total_len);
10005ffc:	0022      	movs	r2, r4
10005ffe:	4648      	mov	r0, r9
10006000:	882b      	ldrh	r3, [r5, #0]
10006002:	a908      	add	r1, sp, #32
10006004:	f000 f9d2 	bl	100063ac <tud_control_xfer>
          TU_VERIFY( process_get_descriptor(rhport, p_request) );
10006008:	2800      	cmp	r0, #0
1000600a:	d000      	beq.n	1000600e <tud_task+0x796>
1000600c:	e445      	b.n	1000589a <tud_task+0x22>
1000600e:	e4b5      	b.n	1000597c <tud_task+0x104>
      if ( tud_descriptor_device_qualifier_cb )
10006010:	4b18      	ldr	r3, [pc, #96]	; (10006074 <tud_task+0x7fc>)
10006012:	2b00      	cmp	r3, #0
10006014:	d100      	bne.n	10006018 <tud_task+0x7a0>
10006016:	e4b1      	b.n	1000597c <tud_task+0x104>
        uint8_t const* desc_qualifier = tud_descriptor_device_qualifier_cb();
10006018:	e000      	b.n	1000601c <tud_task+0x7a4>
1000601a:	bf00      	nop
1000601c:	1e02      	subs	r2, r0, #0
        TU_ASSERT(desc_qualifier);
1000601e:	d100      	bne.n	10006022 <tud_task+0x7aa>
10006020:	e4ac      	b.n	1000597c <tud_task+0x104>
        return tud_control_xfer(rhport, p_request, (void*) desc_qualifier, desc_qualifier[0]);
10006022:	4648      	mov	r0, r9
10006024:	7813      	ldrb	r3, [r2, #0]
10006026:	a908      	add	r1, sp, #32
10006028:	f000 f9c0 	bl	100063ac <tud_control_xfer>
1000602c:	e7ec      	b.n	10006008 <tud_task+0x790>
      uint8_t const* desc_str = (uint8_t const*) tud_descriptor_string_cb(desc_index, p_request->wIndex);
1000602e:	8939      	ldrh	r1, [r7, #8]
10006030:	f7fe f928 	bl	10004284 <tud_descriptor_string_cb>
10006034:	1e02      	subs	r2, r0, #0
      TU_VERIFY(desc_str);
10006036:	d1f4      	bne.n	10006022 <tud_task+0x7aa>
10006038:	e4a0      	b.n	1000597c <tud_task+0x104>
      tusb_desc_configuration_t const* desc_config = (tusb_desc_configuration_t const*) tud_descriptor_configuration_cb(desc_index);
1000603a:	f7fe f91f 	bl	1000427c <tud_descriptor_configuration_cb>
1000603e:	1e04      	subs	r4, r0, #0
      TU_ASSERT(desc_config);
10006040:	d1d5      	bne.n	10005fee <tud_task+0x776>
10006042:	e49b      	b.n	1000597c <tud_task+0x104>
      return tud_control_xfer(rhport, p_request, (void*) tud_descriptor_device_cb(), len);
10006044:	f7fe f916 	bl	10004274 <tud_descriptor_device_cb>
10006048:	2312      	movs	r3, #18
1000604a:	0002      	movs	r2, r0
1000604c:	a908      	add	r1, sp, #32
1000604e:	4648      	mov	r0, r9
10006050:	f000 f9ac 	bl	100063ac <tud_control_xfer>
10006054:	e7d8      	b.n	10006008 <tud_task+0x790>
  if (tud_mount_cb) tud_mount_cb();
10006056:	4b08      	ldr	r3, [pc, #32]	; (10006078 <tud_task+0x800>)
10006058:	2b00      	cmp	r3, #0
1000605a:	d100      	bne.n	1000605e <tud_task+0x7e6>
1000605c:	e67f      	b.n	10005d5e <tud_task+0x4e6>
1000605e:	e000      	b.n	10006062 <tud_task+0x7ea>
10006060:	bf00      	nop
10006062:	e67c      	b.n	10005d5e <tud_task+0x4e6>
10006064:	100050c1 	.word	0x100050c1
10006068:	20039bb7 	.word	0x20039bb7
1000606c:	20038f48 	.word	0x20038f48
	...

1000607c <dcd_event_bus_signal>:
{
1000607c:	b530      	push	{r4, r5, lr}
1000607e:	b085      	sub	sp, #20
10006080:	0005      	movs	r5, r0
10006082:	000c      	movs	r4, r1
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
10006084:	220c      	movs	r2, #12
10006086:	2100      	movs	r1, #0
10006088:	a801      	add	r0, sp, #4
1000608a:	f7fb f907 	bl	1000129c <__wrap_memset>
1000608e:	466b      	mov	r3, sp
10006090:	711d      	strb	r5, [r3, #4]
10006092:	715c      	strb	r4, [r3, #5]
  switch (event->event_id)
10006094:	2c04      	cmp	r4, #4
10006096:	d04b      	beq.n	10006130 <dcd_event_bus_signal+0xb4>
10006098:	d805      	bhi.n	100060a6 <dcd_event_bus_signal+0x2a>
1000609a:	2c02      	cmp	r4, #2
1000609c:	d030      	beq.n	10006100 <dcd_event_bus_signal+0x84>
1000609e:	2c03      	cmp	r4, #3
100060a0:	d115      	bne.n	100060ce <dcd_event_bus_signal+0x52>
}
100060a2:	b005      	add	sp, #20
100060a4:	bd30      	pop	{r4, r5, pc}
  switch (event->event_id)
100060a6:	2c05      	cmp	r4, #5
100060a8:	d111      	bne.n	100060ce <dcd_event_bus_signal+0x52>
      if ( _usbd_dev.connected )
100060aa:	4b2a      	ldr	r3, [pc, #168]	; (10006154 <dcd_event_bus_signal+0xd8>)
100060ac:	781a      	ldrb	r2, [r3, #0]
100060ae:	07d2      	lsls	r2, r2, #31
100060b0:	d5f7      	bpl.n	100060a2 <dcd_event_bus_signal+0x26>
        _usbd_dev.suspended = 0;
100060b2:	2104      	movs	r1, #4
100060b4:	781a      	ldrb	r2, [r3, #0]
100060b6:	438a      	bics	r2, r1
100060b8:	701a      	strb	r2, [r3, #0]
        osal_queue_send(_usbd_q, event, in_isr);
100060ba:	4b27      	ldr	r3, [pc, #156]	; (10006158 <dcd_event_bus_signal+0xdc>)
100060bc:	681c      	ldr	r4, [r3, #0]
    critsec->save = spin_lock_blocking(critsec->core.spin_lock);
100060be:	69a2      	ldr	r2, [r4, #24]
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
100060c0:	f3ef 8110 	mrs	r1, PRIMASK
    __asm volatile ("cpsid i");
100060c4:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
100060c6:	6813      	ldr	r3, [r2, #0]
100060c8:	2b00      	cmp	r3, #0
100060ca:	d109      	bne.n	100060e0 <dcd_event_bus_signal+0x64>
100060cc:	e7fb      	b.n	100060c6 <dcd_event_bus_signal+0x4a>
      osal_queue_send(_usbd_q, event, in_isr);
100060ce:	4b22      	ldr	r3, [pc, #136]	; (10006158 <dcd_event_bus_signal+0xdc>)
100060d0:	681c      	ldr	r4, [r3, #0]
100060d2:	69a2      	ldr	r2, [r4, #24]
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
100060d4:	f3ef 8110 	mrs	r1, PRIMASK
    __asm volatile ("cpsid i");
100060d8:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
100060da:	6813      	ldr	r3, [r2, #0]
100060dc:	2b00      	cmp	r3, #0
100060de:	d0fc      	beq.n	100060da <dcd_event_bus_signal+0x5e>
    __asm volatile ("dmb");
100060e0:	f3bf 8f5f 	dmb	sy
100060e4:	61e1      	str	r1, [r4, #28]
  //  however osal_queue_recieve may be. therefore my assumption is that
  //  the fifo mutex is not populated for queues used from an IRQ context
  assert(!qhdl->ff.mutex);

  _osal_q_lock(qhdl);
  bool success = tu_fifo_write(&qhdl->ff, data);
100060e6:	0020      	movs	r0, r4
100060e8:	a901      	add	r1, sp, #4
100060ea:	f7ff fa87 	bl	100055fc <tu_fifo_write>
    spin_unlock(critsec->core.spin_lock, critsec->save);
100060ee:	69a2      	ldr	r2, [r4, #24]
100060f0:	69e3      	ldr	r3, [r4, #28]
100060f2:	f3bf 8f5f 	dmb	sy
    *lock = 0;
100060f6:	2100      	movs	r1, #0
100060f8:	6011      	str	r1, [r2, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
100060fa:	f383 8810 	msr	PRIMASK, r3
}
100060fe:	e7d0      	b.n	100060a2 <dcd_event_bus_signal+0x26>
      _usbd_dev.connected  = 0;
10006100:	2101      	movs	r1, #1
10006102:	4b14      	ldr	r3, [pc, #80]	; (10006154 <dcd_event_bus_signal+0xd8>)
10006104:	781a      	ldrb	r2, [r3, #0]
10006106:	438a      	bics	r2, r1
10006108:	701a      	strb	r2, [r3, #0]
      _usbd_dev.addressed  = 0;
1000610a:	781a      	ldrb	r2, [r3, #0]
      _usbd_dev.suspended  = 0;
1000610c:	3103      	adds	r1, #3
      _usbd_dev.addressed  = 0;
1000610e:	43a2      	bics	r2, r4
10006110:	701a      	strb	r2, [r3, #0]
      _usbd_dev.cfg_num    = 0;
10006112:	2200      	movs	r2, #0
10006114:	705a      	strb	r2, [r3, #1]
      _usbd_dev.suspended  = 0;
10006116:	781a      	ldrb	r2, [r3, #0]
10006118:	438a      	bics	r2, r1
1000611a:	701a      	strb	r2, [r3, #0]
      osal_queue_send(_usbd_q, event, in_isr);
1000611c:	4b0e      	ldr	r3, [pc, #56]	; (10006158 <dcd_event_bus_signal+0xdc>)
1000611e:	681c      	ldr	r4, [r3, #0]
    critsec->save = spin_lock_blocking(critsec->core.spin_lock);
10006120:	69a2      	ldr	r2, [r4, #24]
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
10006122:	f3ef 8110 	mrs	r1, PRIMASK
    __asm volatile ("cpsid i");
10006126:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
10006128:	6813      	ldr	r3, [r2, #0]
1000612a:	2b00      	cmp	r3, #0
1000612c:	d1d8      	bne.n	100060e0 <dcd_event_bus_signal+0x64>
1000612e:	e7fb      	b.n	10006128 <dcd_event_bus_signal+0xac>
      if ( _usbd_dev.connected )
10006130:	4b08      	ldr	r3, [pc, #32]	; (10006154 <dcd_event_bus_signal+0xd8>)
10006132:	781a      	ldrb	r2, [r3, #0]
10006134:	07d2      	lsls	r2, r2, #31
10006136:	d5b4      	bpl.n	100060a2 <dcd_event_bus_signal+0x26>
        _usbd_dev.suspended = 1;
10006138:	2104      	movs	r1, #4
1000613a:	781a      	ldrb	r2, [r3, #0]
1000613c:	430a      	orrs	r2, r1
1000613e:	701a      	strb	r2, [r3, #0]
        osal_queue_send(_usbd_q, event, in_isr);
10006140:	4b05      	ldr	r3, [pc, #20]	; (10006158 <dcd_event_bus_signal+0xdc>)
10006142:	681c      	ldr	r4, [r3, #0]
10006144:	69a2      	ldr	r2, [r4, #24]
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
10006146:	f3ef 8110 	mrs	r1, PRIMASK
    __asm volatile ("cpsid i");
1000614a:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
1000614c:	6813      	ldr	r3, [r2, #0]
1000614e:	2b00      	cmp	r3, #0
10006150:	d1c6      	bne.n	100060e0 <dcd_event_bus_signal+0x64>
10006152:	e7fb      	b.n	1000614c <dcd_event_bus_signal+0xd0>
10006154:	20039278 	.word	0x20039278
10006158:	200392b4 	.word	0x200392b4

1000615c <dcd_event_setup_received>:
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_SETUP_RECEIVED };
1000615c:	2300      	movs	r3, #0
{
1000615e:	b530      	push	{r4, r5, lr}
10006160:	b085      	sub	sp, #20
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_SETUP_RECEIVED };
10006162:	ad01      	add	r5, sp, #4
10006164:	806b      	strh	r3, [r5, #2]
10006166:	7028      	strb	r0, [r5, #0]
10006168:	3306      	adds	r3, #6
  memcpy(&event.setup_received, setup, 8);
1000616a:	2208      	movs	r2, #8
1000616c:	a802      	add	r0, sp, #8
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_SETUP_RECEIVED };
1000616e:	706b      	strb	r3, [r5, #1]
  memcpy(&event.setup_received, setup, 8);
10006170:	f7fb f89a 	bl	100012a8 <__wrap___aeabi_memcpy>
      osal_queue_send(_usbd_q, event, in_isr);
10006174:	4b0c      	ldr	r3, [pc, #48]	; (100061a8 <dcd_event_setup_received+0x4c>)
10006176:	681c      	ldr	r4, [r3, #0]
10006178:	69a2      	ldr	r2, [r4, #24]
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
1000617a:	f3ef 8310 	mrs	r3, PRIMASK
    __asm volatile ("cpsid i");
1000617e:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
10006180:	6811      	ldr	r1, [r2, #0]
10006182:	2900      	cmp	r1, #0
10006184:	d0fc      	beq.n	10006180 <dcd_event_setup_received+0x24>
    __asm volatile ("dmb");
10006186:	f3bf 8f5f 	dmb	sy
1000618a:	61e3      	str	r3, [r4, #28]
1000618c:	0029      	movs	r1, r5
1000618e:	0020      	movs	r0, r4
10006190:	f7ff fa34 	bl	100055fc <tu_fifo_write>
    spin_unlock(critsec->core.spin_lock, critsec->save);
10006194:	69a2      	ldr	r2, [r4, #24]
10006196:	69e3      	ldr	r3, [r4, #28]
10006198:	f3bf 8f5f 	dmb	sy
    *lock = 0;
1000619c:	2100      	movs	r1, #0
1000619e:	6011      	str	r1, [r2, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
100061a0:	f383 8810 	msr	PRIMASK, r3
}
100061a4:	b005      	add	sp, #20
100061a6:	bd30      	pop	{r4, r5, pc}
100061a8:	200392b4 	.word	0x200392b4

100061ac <dcd_event_xfer_complete>:
{
100061ac:	b5f0      	push	{r4, r5, r6, r7, lr}
100061ae:	46c6      	mov	lr, r8
100061b0:	4680      	mov	r8, r0
100061b2:	b500      	push	{lr}
100061b4:	b084      	sub	sp, #16
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
100061b6:	ac01      	add	r4, sp, #4
{
100061b8:	000f      	movs	r7, r1
100061ba:	0016      	movs	r6, r2
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
100061bc:	2100      	movs	r1, #0
100061be:	2208      	movs	r2, #8
100061c0:	0020      	movs	r0, r4
{
100061c2:	001d      	movs	r5, r3
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
100061c4:	f7fb f86a 	bl	1000129c <__wrap_memset>
100061c8:	4643      	mov	r3, r8
100061ca:	7023      	strb	r3, [r4, #0]
100061cc:	2307      	movs	r3, #7
100061ce:	7063      	strb	r3, [r4, #1]
      osal_queue_send(_usbd_q, event, in_isr);
100061d0:	4b0f      	ldr	r3, [pc, #60]	; (10006210 <dcd_event_xfer_complete+0x64>)
  event.xfer_complete.result  = result;
100061d2:	7165      	strb	r5, [r4, #5]
      osal_queue_send(_usbd_q, event, in_isr);
100061d4:	681d      	ldr	r5, [r3, #0]
  event.xfer_complete.ep_addr = ep_addr;
100061d6:	7127      	strb	r7, [r4, #4]
  event.xfer_complete.len     = xferred_bytes;
100061d8:	60a6      	str	r6, [r4, #8]
    critsec->save = spin_lock_blocking(critsec->core.spin_lock);
100061da:	69aa      	ldr	r2, [r5, #24]
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
100061dc:	f3ef 8310 	mrs	r3, PRIMASK
    __asm volatile ("cpsid i");
100061e0:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
100061e2:	6811      	ldr	r1, [r2, #0]
100061e4:	2900      	cmp	r1, #0
100061e6:	d0fc      	beq.n	100061e2 <dcd_event_xfer_complete+0x36>
    __asm volatile ("dmb");
100061e8:	f3bf 8f5f 	dmb	sy
100061ec:	61eb      	str	r3, [r5, #28]
100061ee:	0021      	movs	r1, r4
100061f0:	0028      	movs	r0, r5
100061f2:	f7ff fa03 	bl	100055fc <tu_fifo_write>
    spin_unlock(critsec->core.spin_lock, critsec->save);
100061f6:	69aa      	ldr	r2, [r5, #24]
100061f8:	69eb      	ldr	r3, [r5, #28]
100061fa:	f3bf 8f5f 	dmb	sy
    *lock = 0;
100061fe:	2100      	movs	r1, #0
10006200:	6011      	str	r1, [r2, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
10006202:	f383 8810 	msr	PRIMASK, r3
}
10006206:	b004      	add	sp, #16
10006208:	bc80      	pop	{r7}
1000620a:	46b8      	mov	r8, r7
1000620c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000620e:	46c0      	nop			; (mov r8, r8)
10006210:	200392b4 	.word	0x200392b4

10006214 <usbd_open_edpt_pair>:
{
10006214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10006216:	4647      	mov	r7, r8
10006218:	46d6      	mov	lr, sl
1000621a:	b580      	push	{r7, lr}
1000621c:	4698      	mov	r8, r3
1000621e:	9b08      	ldr	r3, [sp, #32]
10006220:	0006      	movs	r6, r0
10006222:	000c      	movs	r4, r1
10006224:	1e17      	subs	r7, r2, #0
10006226:	469a      	mov	sl, r3
  for(int i=0; i<ep_count; i++)
10006228:	d021      	beq.n	1000626e <usbd_open_edpt_pair+0x5a>
1000622a:	2500      	movs	r5, #0
1000622c:	e006      	b.n	1000623c <usbd_open_edpt_pair+0x28>
      (*ep_out) = desc_ep->bEndpointAddress;
1000622e:	4652      	mov	r2, sl
10006230:	7013      	strb	r3, [r2, #0]
10006232:	7823      	ldrb	r3, [r4, #0]
  for(int i=0; i<ep_count; i++)
10006234:	3501      	adds	r5, #1
10006236:	18e4      	adds	r4, r4, r3
10006238:	42bd      	cmp	r5, r7
1000623a:	da18      	bge.n	1000626e <usbd_open_edpt_pair+0x5a>
    TU_ASSERT(TUSB_DESC_ENDPOINT == desc_ep->bDescriptorType && xfer_type == desc_ep->bmAttributes.xfer);
1000623c:	7863      	ldrb	r3, [r4, #1]
1000623e:	2b05      	cmp	r3, #5
10006240:	d117      	bne.n	10006272 <usbd_open_edpt_pair+0x5e>
10006242:	78e1      	ldrb	r1, [r4, #3]
10006244:	0789      	lsls	r1, r1, #30
10006246:	0f89      	lsrs	r1, r1, #30
10006248:	4541      	cmp	r1, r8
1000624a:	d112      	bne.n	10006272 <usbd_open_edpt_pair+0x5e>
  return dcd_edpt_open(rhport, desc_ep);
1000624c:	0021      	movs	r1, r4
1000624e:	0030      	movs	r0, r6
10006250:	f000 facc 	bl	100067ec <dcd_edpt_open>
    TU_ASSERT(usbd_edpt_open(rhport, desc_ep));
10006254:	2800      	cmp	r0, #0
10006256:	d00c      	beq.n	10006272 <usbd_open_edpt_pair+0x5e>
    if ( tu_edpt_dir(desc_ep->bEndpointAddress) == TUSB_DIR_IN )
10006258:	78a3      	ldrb	r3, [r4, #2]
1000625a:	09da      	lsrs	r2, r3, #7
1000625c:	2a01      	cmp	r2, #1
1000625e:	d1e6      	bne.n	1000622e <usbd_open_edpt_pair+0x1a>
      (*ep_in) = desc_ep->bEndpointAddress;
10006260:	9a09      	ldr	r2, [sp, #36]	; 0x24
  for(int i=0; i<ep_count; i++)
10006262:	3501      	adds	r5, #1
      (*ep_out) = desc_ep->bEndpointAddress;
10006264:	7013      	strb	r3, [r2, #0]
10006266:	7823      	ldrb	r3, [r4, #0]
10006268:	18e4      	adds	r4, r4, r3
  for(int i=0; i<ep_count; i++)
1000626a:	42bd      	cmp	r5, r7
1000626c:	dbe6      	blt.n	1000623c <usbd_open_edpt_pair+0x28>
  return true;
1000626e:	2001      	movs	r0, #1
10006270:	e000      	b.n	10006274 <usbd_open_edpt_pair+0x60>
    TU_ASSERT(TUSB_DESC_ENDPOINT == desc_ep->bDescriptorType && xfer_type == desc_ep->bmAttributes.xfer);
10006272:	2000      	movs	r0, #0
}
10006274:	bcc0      	pop	{r6, r7}
10006276:	46ba      	mov	sl, r7
10006278:	46b0      	mov	r8, r6
1000627a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1000627c <usbd_edpt_open>:
{
1000627c:	b510      	push	{r4, lr}
  return dcd_edpt_open(rhport, desc_ep);
1000627e:	f000 fab5 	bl	100067ec <dcd_edpt_open>
}
10006282:	bd10      	pop	{r4, pc}

10006284 <usbd_edpt_claim>:
{
10006284:	b570      	push	{r4, r5, r6, lr}
  TU_VERIFY((_usbd_dev.ep_status[epnum][dir].busy == 0) && (_usbd_dev.ep_status[epnum][dir].claimed == 0));
10006286:	247f      	movs	r4, #127	; 0x7f
10006288:	400c      	ands	r4, r1
1000628a:	0063      	lsls	r3, r4, #1
1000628c:	4c14      	ldr	r4, [pc, #80]	; (100062e0 <usbd_edpt_claim+0x5c>)
1000628e:	09c9      	lsrs	r1, r1, #7
10006290:	18e4      	adds	r4, r4, r3
10006292:	1864      	adds	r4, r4, r1
10006294:	3420      	adds	r4, #32
10006296:	7963      	ldrb	r3, [r4, #5]
10006298:	07db      	lsls	r3, r3, #31
1000629a:	0fdd      	lsrs	r5, r3, #31
1000629c:	2b00      	cmp	r3, #0
1000629e:	d118      	bne.n	100062d2 <usbd_edpt_claim+0x4e>
100062a0:	7963      	ldrb	r3, [r4, #5]
100062a2:	075b      	lsls	r3, r3, #29
100062a4:	d501      	bpl.n	100062aa <usbd_edpt_claim+0x26>
}
100062a6:	0028      	movs	r0, r5
100062a8:	bd70      	pop	{r4, r5, r6, pc}
    return mutex_enter_timeout_ms(mutex_hdl, msec);
100062aa:	2101      	movs	r1, #1
  osal_mutex_lock(_usbd_mutex, OSAL_TIMEOUT_WAIT_FOREVER);
100062ac:	4e0d      	ldr	r6, [pc, #52]	; (100062e4 <usbd_edpt_claim+0x60>)
100062ae:	4249      	negs	r1, r1
100062b0:	6830      	ldr	r0, [r6, #0]
100062b2:	f003 fa45 	bl	10009740 <__mutex_enter_timeout_ms_veneer>
  bool const ret = (_usbd_dev.ep_status[epnum][dir].busy == 0) && (_usbd_dev.ep_status[epnum][dir].claimed == 0);
100062b6:	7963      	ldrb	r3, [r4, #5]
100062b8:	07db      	lsls	r3, r3, #31
100062ba:	0fdd      	lsrs	r5, r3, #31
100062bc:	2b00      	cmp	r3, #0
100062be:	d10a      	bne.n	100062d6 <usbd_edpt_claim+0x52>
100062c0:	7963      	ldrb	r3, [r4, #5]
100062c2:	075b      	lsls	r3, r3, #29
100062c4:	d408      	bmi.n	100062d8 <usbd_edpt_claim+0x54>
    _usbd_dev.ep_status[epnum][dir].claimed = 1;
100062c6:	2204      	movs	r2, #4
100062c8:	7963      	ldrb	r3, [r4, #5]
  bool const ret = (_usbd_dev.ep_status[epnum][dir].busy == 0) && (_usbd_dev.ep_status[epnum][dir].claimed == 0);
100062ca:	2501      	movs	r5, #1
    _usbd_dev.ep_status[epnum][dir].claimed = 1;
100062cc:	4313      	orrs	r3, r2
100062ce:	7163      	strb	r3, [r4, #5]
100062d0:	e002      	b.n	100062d8 <usbd_edpt_claim+0x54>
  TU_VERIFY((_usbd_dev.ep_status[epnum][dir].busy == 0) && (_usbd_dev.ep_status[epnum][dir].claimed == 0));
100062d2:	2500      	movs	r5, #0
100062d4:	e7e7      	b.n	100062a6 <usbd_edpt_claim+0x22>
  bool const ret = (_usbd_dev.ep_status[epnum][dir].busy == 0) && (_usbd_dev.ep_status[epnum][dir].claimed == 0);
100062d6:	2500      	movs	r5, #0
    mutex_exit(mutex_hdl);
100062d8:	6830      	ldr	r0, [r6, #0]
100062da:	f003 fa11 	bl	10009700 <__mutex_exit_veneer>
  return ret;
100062de:	e7e2      	b.n	100062a6 <usbd_edpt_claim+0x22>
100062e0:	20039278 	.word	0x20039278
100062e4:	200392b0 	.word	0x200392b0

100062e8 <usbd_edpt_release>:
{
100062e8:	b570      	push	{r4, r5, r6, lr}
100062ea:	000c      	movs	r4, r1
    return mutex_enter_timeout_ms(mutex_hdl, msec);
100062ec:	2101      	movs	r1, #1
  osal_mutex_lock(_usbd_mutex, OSAL_TIMEOUT_WAIT_FOREVER);
100062ee:	4d0f      	ldr	r5, [pc, #60]	; (1000632c <usbd_edpt_release+0x44>)
100062f0:	4249      	negs	r1, r1
100062f2:	6828      	ldr	r0, [r5, #0]
100062f4:	f003 fa24 	bl	10009740 <__mutex_enter_timeout_ms_veneer>
  bool const ret = (_usbd_dev.ep_status[epnum][dir].busy == 0) && (_usbd_dev.ep_status[epnum][dir].claimed == 1);
100062f8:	217f      	movs	r1, #127	; 0x7f
100062fa:	4021      	ands	r1, r4
100062fc:	004b      	lsls	r3, r1, #1
100062fe:	490c      	ldr	r1, [pc, #48]	; (10006330 <usbd_edpt_release+0x48>)
10006300:	09e4      	lsrs	r4, r4, #7
10006302:	18c9      	adds	r1, r1, r3
10006304:	1909      	adds	r1, r1, r4
10006306:	3120      	adds	r1, #32
10006308:	794b      	ldrb	r3, [r1, #5]
1000630a:	2400      	movs	r4, #0
1000630c:	07db      	lsls	r3, r3, #31
1000630e:	d408      	bmi.n	10006322 <usbd_edpt_release+0x3a>
10006310:	794b      	ldrb	r3, [r1, #5]
10006312:	075b      	lsls	r3, r3, #29
10006314:	0fdc      	lsrs	r4, r3, #31
10006316:	2b00      	cmp	r3, #0
10006318:	da03      	bge.n	10006322 <usbd_edpt_release+0x3a>
    _usbd_dev.ep_status[epnum][dir].claimed = 0;
1000631a:	2204      	movs	r2, #4
1000631c:	794b      	ldrb	r3, [r1, #5]
1000631e:	4393      	bics	r3, r2
10006320:	714b      	strb	r3, [r1, #5]
    mutex_exit(mutex_hdl);
10006322:	6828      	ldr	r0, [r5, #0]
10006324:	f003 f9ec 	bl	10009700 <__mutex_exit_veneer>
}
10006328:	0020      	movs	r0, r4
1000632a:	bd70      	pop	{r4, r5, r6, pc}
1000632c:	200392b0 	.word	0x200392b0
10006330:	20039278 	.word	0x20039278

10006334 <usbd_edpt_xfer>:
{
10006334:	b570      	push	{r4, r5, r6, lr}
  TU_ASSERT(_usbd_dev.ep_status[epnum][dir].busy == 0);
10006336:	257f      	movs	r5, #127	; 0x7f
10006338:	4c0f      	ldr	r4, [pc, #60]	; (10006378 <usbd_edpt_xfer+0x44>)
1000633a:	400d      	ands	r5, r1
1000633c:	006d      	lsls	r5, r5, #1
1000633e:	1964      	adds	r4, r4, r5
{
10006340:	0006      	movs	r6, r0
  TU_ASSERT(_usbd_dev.ep_status[epnum][dir].busy == 0);
10006342:	09c8      	lsrs	r0, r1, #7
10006344:	1824      	adds	r4, r4, r0
10006346:	3420      	adds	r4, #32
10006348:	7965      	ldrb	r5, [r4, #5]
1000634a:	2000      	movs	r0, #0
1000634c:	07ed      	lsls	r5, r5, #31
1000634e:	d500      	bpl.n	10006352 <usbd_edpt_xfer+0x1e>
}
10006350:	bd70      	pop	{r4, r5, r6, pc}
  _usbd_dev.ep_status[epnum][dir].busy = true;
10006352:	2501      	movs	r5, #1
10006354:	7960      	ldrb	r0, [r4, #5]
10006356:	4328      	orrs	r0, r5
10006358:	7160      	strb	r0, [r4, #5]
  if ( dcd_edpt_xfer(rhport, ep_addr, buffer, total_bytes) )
1000635a:	0030      	movs	r0, r6
1000635c:	f000 faec 	bl	10006938 <dcd_edpt_xfer>
10006360:	2800      	cmp	r0, #0
10006362:	d1f5      	bne.n	10006350 <usbd_edpt_xfer+0x1c>
    _usbd_dev.ep_status[epnum][dir].busy = false;
10006364:	2201      	movs	r2, #1
10006366:	7963      	ldrb	r3, [r4, #5]
10006368:	4393      	bics	r3, r2
1000636a:	7163      	strb	r3, [r4, #5]
    _usbd_dev.ep_status[epnum][dir].claimed = 0;
1000636c:	7963      	ldrb	r3, [r4, #5]
1000636e:	3203      	adds	r2, #3
10006370:	4393      	bics	r3, r2
10006372:	7163      	strb	r3, [r4, #5]
    return false;
10006374:	e7ec      	b.n	10006350 <usbd_edpt_xfer+0x1c>
10006376:	46c0      	nop			; (mov r8, r8)
10006378:	20039278 	.word	0x20039278

1000637c <tud_control_status>:
  return dcd_edpt_xfer(rhport, ep_addr, NULL, 0);
}

// Status phase
bool tud_control_status(uint8_t rhport, tusb_control_request_t const * request)
{
1000637c:	b570      	push	{r4, r5, r6, lr}
  _ctrl_xfer.request       = (*request);
1000637e:	4e0a      	ldr	r6, [pc, #40]	; (100063a8 <tud_control_status+0x2c>)
{
10006380:	0005      	movs	r5, r0
  _ctrl_xfer.request       = (*request);
10006382:	0030      	movs	r0, r6
10006384:	2208      	movs	r2, #8
{
10006386:	000c      	movs	r4, r1
  _ctrl_xfer.request       = (*request);
10006388:	f7fa ff8e 	bl	100012a8 <__wrap___aeabi_memcpy>
  _ctrl_xfer.buffer        = NULL;
1000638c:	2300      	movs	r3, #0
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
1000638e:	217f      	movs	r1, #127	; 0x7f
  _ctrl_xfer.total_xferred = 0;
  _ctrl_xfer.data_len      = 0;
10006390:	60f3      	str	r3, [r6, #12]
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
10006392:	7822      	ldrb	r2, [r4, #0]
  _ctrl_xfer.buffer        = NULL;
10006394:	60b3      	str	r3, [r6, #8]
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
10006396:	4291      	cmp	r1, r2
10006398:	415b      	adcs	r3, r3
  return dcd_edpt_xfer(rhport, ep_addr, NULL, 0);
1000639a:	0028      	movs	r0, r5
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
1000639c:	01d9      	lsls	r1, r3, #7
  return dcd_edpt_xfer(rhport, ep_addr, NULL, 0);
1000639e:	2200      	movs	r2, #0
100063a0:	2300      	movs	r3, #0
100063a2:	f000 fac9 	bl	10006938 <dcd_edpt_xfer>

  return _status_stage_xact(rhport, request);
}
100063a6:	bd70      	pop	{r4, r5, r6, pc}
100063a8:	2003921c 	.word	0x2003921c

100063ac <tud_control_xfer>:
}

// Transmit data to/from the control endpoint.
// If the request's wLength is zero, a status packet is sent instead.
bool tud_control_xfer(uint8_t rhport, tusb_control_request_t const * request, void* buffer, uint16_t len)
{
100063ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100063ae:	46ce      	mov	lr, r9
100063b0:	4647      	mov	r7, r8
100063b2:	4691      	mov	r9, r2
  _ctrl_xfer.request       = (*request);
100063b4:	4e2a      	ldr	r6, [pc, #168]	; (10006460 <tud_control_xfer+0xb4>)
{
100063b6:	b580      	push	{r7, lr}
  _ctrl_xfer.request       = (*request);
100063b8:	2208      	movs	r2, #8
{
100063ba:	0007      	movs	r7, r0
  _ctrl_xfer.request       = (*request);
100063bc:	0030      	movs	r0, r6
{
100063be:	000d      	movs	r5, r1
100063c0:	4698      	mov	r8, r3
  _ctrl_xfer.request       = (*request);
100063c2:	f7fa ff71 	bl	100012a8 <__wrap___aeabi_memcpy>
  _ctrl_xfer.buffer        = (uint8_t*) buffer;
100063c6:	464b      	mov	r3, r9
100063c8:	60b3      	str	r3, [r6, #8]
  _ctrl_xfer.total_xferred = 0U;
100063ca:	2300      	movs	r3, #0
100063cc:	81f3      	strh	r3, [r6, #14]
  _ctrl_xfer.data_len      = tu_min16(len, request->wLength);
100063ce:	79ec      	ldrb	r4, [r5, #7]
100063d0:	79a9      	ldrb	r1, [r5, #6]
100063d2:	0224      	lsls	r4, r4, #8
100063d4:	430c      	orrs	r4, r1
static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
100063d6:	1c23      	adds	r3, r4, #0
100063d8:	4544      	cmp	r4, r8
100063da:	d900      	bls.n	100063de <tud_control_xfer+0x32>
100063dc:	4643      	mov	r3, r8
100063de:	b29a      	uxth	r2, r3
100063e0:	4690      	mov	r8, r2
100063e2:	81b3      	strh	r3, [r6, #12]
  
  if (request->wLength > 0U)
100063e4:	2c00      	cmp	r4, #0
100063e6:	d013      	beq.n	10006410 <tud_control_xfer+0x64>
  {
    if(_ctrl_xfer.data_len > 0U)
100063e8:	2a00      	cmp	r2, #0
100063ea:	d01f      	beq.n	1000642c <tud_control_xfer+0x80>
    {
      TU_ASSERT(buffer);
100063ec:	464b      	mov	r3, r9
100063ee:	2b00      	cmp	r3, #0
100063f0:	d034      	beq.n	1000645c <tud_control_xfer+0xb0>
100063f2:	1c13      	adds	r3, r2, #0
100063f4:	2a40      	cmp	r2, #64	; 0x40
100063f6:	d81f      	bhi.n	10006438 <tud_control_xfer+0x8c>
100063f8:	b29b      	uxth	r3, r3
100063fa:	4698      	mov	r8, r3
  if ( _ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_IN )
100063fc:	7833      	ldrb	r3, [r6, #0]
100063fe:	2b7f      	cmp	r3, #127	; 0x7f
10006400:	d820      	bhi.n	10006444 <tud_control_xfer+0x98>
10006402:	2100      	movs	r1, #0
  return dcd_edpt_xfer(rhport, ep_addr, xact_len ? _usbd_ctrl_buf : NULL, xact_len);
10006404:	4a17      	ldr	r2, [pc, #92]	; (10006464 <tud_control_xfer+0xb8>)
10006406:	4643      	mov	r3, r8
10006408:	0038      	movs	r0, r7
1000640a:	f000 fa95 	bl	10006938 <dcd_edpt_xfer>
1000640e:	e009      	b.n	10006424 <tud_control_xfer+0x78>
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
10006410:	227f      	movs	r2, #127	; 0x7f
10006412:	782b      	ldrb	r3, [r5, #0]
  return dcd_edpt_xfer(rhport, ep_addr, NULL, 0);
10006414:	0038      	movs	r0, r7
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
10006416:	429a      	cmp	r2, r3
10006418:	4164      	adcs	r4, r4
  return dcd_edpt_xfer(rhport, ep_addr, NULL, 0);
1000641a:	2300      	movs	r3, #0
1000641c:	2200      	movs	r2, #0
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
1000641e:	01e1      	lsls	r1, r4, #7
  return dcd_edpt_xfer(rhport, ep_addr, NULL, 0);
10006420:	f000 fa8a 	bl	10006938 <dcd_edpt_xfer>
    // Status stage
    TU_ASSERT( _status_stage_xact(rhport, request) );
  }

  return true;
}
10006424:	bcc0      	pop	{r6, r7}
10006426:	46b9      	mov	r9, r7
10006428:	46b0      	mov	r8, r6
1000642a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ( _ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_IN )
1000642c:	7833      	ldrb	r3, [r6, #0]
1000642e:	2b7f      	cmp	r3, #127	; 0x7f
10006430:	d911      	bls.n	10006456 <tud_control_xfer+0xaa>
    ep_addr = EDPT_CTRL_IN;
10006432:	2180      	movs	r1, #128	; 0x80
  return dcd_edpt_xfer(rhport, ep_addr, xact_len ? _usbd_ctrl_buf : NULL, xact_len);
10006434:	2200      	movs	r2, #0
10006436:	e7e6      	b.n	10006406 <tud_control_xfer+0x5a>
10006438:	2340      	movs	r3, #64	; 0x40
1000643a:	b29b      	uxth	r3, r3
1000643c:	4698      	mov	r8, r3
  if ( _ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_IN )
1000643e:	7833      	ldrb	r3, [r6, #0]
10006440:	2b7f      	cmp	r3, #127	; 0x7f
10006442:	d9de      	bls.n	10006402 <tud_control_xfer+0x56>
    if ( xact_len ) memcpy(_usbd_ctrl_buf, _ctrl_xfer.buffer, xact_len);
10006444:	4c07      	ldr	r4, [pc, #28]	; (10006464 <tud_control_xfer+0xb8>)
10006446:	4642      	mov	r2, r8
10006448:	4649      	mov	r1, r9
1000644a:	0020      	movs	r0, r4
1000644c:	f7fa ff2c 	bl	100012a8 <__wrap___aeabi_memcpy>
    ep_addr = EDPT_CTRL_IN;
10006450:	2180      	movs	r1, #128	; 0x80
  return dcd_edpt_xfer(rhport, ep_addr, xact_len ? _usbd_ctrl_buf : NULL, xact_len);
10006452:	0022      	movs	r2, r4
10006454:	e7d7      	b.n	10006406 <tud_control_xfer+0x5a>
  if ( _ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_IN )
10006456:	2100      	movs	r1, #0
  return dcd_edpt_xfer(rhport, ep_addr, xact_len ? _usbd_ctrl_buf : NULL, xact_len);
10006458:	2200      	movs	r2, #0
1000645a:	e7d4      	b.n	10006406 <tud_control_xfer+0x5a>
      TU_ASSERT(buffer);
1000645c:	2000      	movs	r0, #0
1000645e:	e7e1      	b.n	10006424 <tud_control_xfer+0x78>
10006460:	2003921c 	.word	0x2003921c
10006464:	20039238 	.word	0x20039238

10006468 <usbd_control_reset>:
//--------------------------------------------------------------------+
// USBD API
//--------------------------------------------------------------------+

void usbd_control_reset(void)
{
10006468:	b510      	push	{r4, lr}
  tu_varclr(&_ctrl_xfer);
1000646a:	2214      	movs	r2, #20
1000646c:	2100      	movs	r1, #0
1000646e:	4802      	ldr	r0, [pc, #8]	; (10006478 <usbd_control_reset+0x10>)
10006470:	f7fa ff14 	bl	1000129c <__wrap_memset>
}
10006474:	bd10      	pop	{r4, pc}
10006476:	46c0      	nop			; (mov r8, r8)
10006478:	2003921c 	.word	0x2003921c

1000647c <usbd_control_set_complete_callback>:

// TODO may find a better way
void usbd_control_set_complete_callback( bool (*fp) (uint8_t, tusb_control_request_t const * ) )
{
  _ctrl_xfer.complete_cb = fp;
1000647c:	4b01      	ldr	r3, [pc, #4]	; (10006484 <usbd_control_set_complete_callback+0x8>)
1000647e:	6118      	str	r0, [r3, #16]
}
10006480:	4770      	bx	lr
10006482:	46c0      	nop			; (mov r8, r8)
10006484:	2003921c 	.word	0x2003921c

10006488 <usbd_control_set_request>:

// useful for dcd_set_address where DCD is responsible for status response
void usbd_control_set_request(tusb_control_request_t const *request)
{
10006488:	b510      	push	{r4, lr}
  _ctrl_xfer.request       = (*request);
1000648a:	4c05      	ldr	r4, [pc, #20]	; (100064a0 <usbd_control_set_request+0x18>)
{
1000648c:	0001      	movs	r1, r0
  _ctrl_xfer.request       = (*request);
1000648e:	2208      	movs	r2, #8
10006490:	0020      	movs	r0, r4
10006492:	f7fa ff09 	bl	100012a8 <__wrap___aeabi_memcpy>
  _ctrl_xfer.buffer        = NULL;
10006496:	2300      	movs	r3, #0
10006498:	60a3      	str	r3, [r4, #8]
  _ctrl_xfer.total_xferred = 0;
  _ctrl_xfer.data_len      = 0;
1000649a:	60e3      	str	r3, [r4, #12]
}
1000649c:	bd10      	pop	{r4, pc}
1000649e:	46c0      	nop			; (mov r8, r8)
100064a0:	2003921c 	.word	0x2003921c

100064a4 <usbd_control_xfer_cb>:

// callback when a transaction complete on
// - DATA stage of control endpoint or
// - Status stage
bool usbd_control_xfer_cb (uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes)
{
100064a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  (void) result;

  // Endpoint Address is opposite to direction bit, this is Status Stage complete event
  if ( tu_edpt_dir(ep_addr) != _ctrl_xfer.request.bmRequestType_bit.direction )
100064a6:	4d37      	ldr	r5, [pc, #220]	; (10006584 <usbd_control_xfer_cb+0xe0>)
{
100064a8:	001c      	movs	r4, r3
  if ( tu_edpt_dir(ep_addr) != _ctrl_xfer.request.bmRequestType_bit.direction )
100064aa:	782b      	ldrb	r3, [r5, #0]
{
100064ac:	0006      	movs	r6, r0
  if ( tu_edpt_dir(ep_addr) != _ctrl_xfer.request.bmRequestType_bit.direction )
100064ae:	09da      	lsrs	r2, r3, #7
100064b0:	09c9      	lsrs	r1, r1, #7
100064b2:	428a      	cmp	r2, r1
100064b4:	d00c      	beq.n	100064d0 <usbd_control_xfer_cb+0x2c>
  {
    TU_ASSERT(0 == xferred_bytes);
100064b6:	2700      	movs	r7, #0
100064b8:	2c00      	cmp	r4, #0
100064ba:	d001      	beq.n	100064c0 <usbd_control_xfer_cb+0x1c>
    // More data to transfer
    TU_ASSERT( _data_stage_xact(rhport) );
  }

  return true;
}
100064bc:	0038      	movs	r0, r7
100064be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (dcd_edpt0_status_complete) dcd_edpt0_status_complete(rhport, &_ctrl_xfer.request);
100064c0:	4b31      	ldr	r3, [pc, #196]	; (10006588 <usbd_control_xfer_cb+0xe4>)
    return true;
100064c2:	3701      	adds	r7, #1
    if (dcd_edpt0_status_complete) dcd_edpt0_status_complete(rhport, &_ctrl_xfer.request);
100064c4:	2b00      	cmp	r3, #0
100064c6:	d0f9      	beq.n	100064bc <usbd_control_xfer_cb+0x18>
100064c8:	0029      	movs	r1, r5
100064ca:	f000 f973 	bl	100067b4 <dcd_edpt0_status_complete>
100064ce:	e7f5      	b.n	100064bc <usbd_control_xfer_cb+0x18>
  if ( _ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_OUT )
100064d0:	2b7f      	cmp	r3, #127	; 0x7f
100064d2:	d806      	bhi.n	100064e2 <usbd_control_xfer_cb+0x3e>
    TU_VERIFY(_ctrl_xfer.buffer);
100064d4:	68a8      	ldr	r0, [r5, #8]
100064d6:	2800      	cmp	r0, #0
100064d8:	d038      	beq.n	1000654c <usbd_control_xfer_cb+0xa8>
    memcpy(_ctrl_xfer.buffer, _usbd_ctrl_buf, xferred_bytes);
100064da:	0022      	movs	r2, r4
100064dc:	492b      	ldr	r1, [pc, #172]	; (1000658c <usbd_control_xfer_cb+0xe8>)
100064de:	f7fa fee3 	bl	100012a8 <__wrap___aeabi_memcpy>
  _ctrl_xfer.buffer += xferred_bytes;
100064e2:	68ab      	ldr	r3, [r5, #8]
  _ctrl_xfer.total_xferred += xferred_bytes;
100064e4:	89ea      	ldrh	r2, [r5, #14]
  _ctrl_xfer.buffer += xferred_bytes;
100064e6:	1919      	adds	r1, r3, r4
  _ctrl_xfer.total_xferred += xferred_bytes;
100064e8:	1912      	adds	r2, r2, r4
  if ( (_ctrl_xfer.request.wLength == _ctrl_xfer.total_xferred) || (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE) )
100064ea:	88eb      	ldrh	r3, [r5, #6]
  _ctrl_xfer.total_xferred += xferred_bytes;
100064ec:	b292      	uxth	r2, r2
100064ee:	81ea      	strh	r2, [r5, #14]
  _ctrl_xfer.buffer += xferred_bytes;
100064f0:	60a9      	str	r1, [r5, #8]
  if ( (_ctrl_xfer.request.wLength == _ctrl_xfer.total_xferred) || (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE) )
100064f2:	4293      	cmp	r3, r2
100064f4:	d015      	beq.n	10006522 <usbd_control_xfer_cb+0x7e>
100064f6:	2c3f      	cmp	r4, #63	; 0x3f
100064f8:	d913      	bls.n	10006522 <usbd_control_xfer_cb+0x7e>
  uint16_t const xact_len = tu_min16(_ctrl_xfer.data_len - _ctrl_xfer.total_xferred, CFG_TUD_ENDPOINT0_SIZE);
100064fa:	89ac      	ldrh	r4, [r5, #12]
100064fc:	1aa0      	subs	r0, r4, r2
100064fe:	1c07      	adds	r7, r0, #0
10006500:	b280      	uxth	r0, r0
10006502:	2840      	cmp	r0, #64	; 0x40
10006504:	d82e      	bhi.n	10006564 <usbd_control_xfer_cb+0xc0>
  if ( _ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_IN )
10006506:	782b      	ldrb	r3, [r5, #0]
10006508:	b2bf      	uxth	r7, r7
1000650a:	2b7f      	cmp	r3, #127	; 0x7f
1000650c:	d82c      	bhi.n	10006568 <usbd_control_xfer_cb+0xc4>
  uint8_t ep_addr = EDPT_CTRL_OUT;
1000650e:	2100      	movs	r1, #0
  return dcd_edpt_xfer(rhport, ep_addr, xact_len ? _usbd_ctrl_buf : NULL, xact_len);
10006510:	42a2      	cmp	r2, r4
10006512:	d034      	beq.n	1000657e <usbd_control_xfer_cb+0xda>
10006514:	4a1d      	ldr	r2, [pc, #116]	; (1000658c <usbd_control_xfer_cb+0xe8>)
10006516:	003b      	movs	r3, r7
10006518:	0030      	movs	r0, r6
1000651a:	f000 fa0d 	bl	10006938 <dcd_edpt_xfer>
1000651e:	0007      	movs	r7, r0
10006520:	e7cc      	b.n	100064bc <usbd_control_xfer_cb+0x18>
    if ( _ctrl_xfer.complete_cb )
10006522:	692b      	ldr	r3, [r5, #16]
10006524:	2b00      	cmp	r3, #0
10006526:	d004      	beq.n	10006532 <usbd_control_xfer_cb+0x8e>
      is_ok = _ctrl_xfer.complete_cb(rhport, &_ctrl_xfer.request);
10006528:	0029      	movs	r1, r5
1000652a:	0030      	movs	r0, r6
1000652c:	4798      	blx	r3
    if ( is_ok )
1000652e:	2800      	cmp	r0, #0
10006530:	d00e      	beq.n	10006550 <usbd_control_xfer_cb+0xac>
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
10006532:	227f      	movs	r2, #127	; 0x7f
10006534:	2100      	movs	r1, #0
10006536:	782b      	ldrb	r3, [r5, #0]
  return dcd_edpt_xfer(rhport, ep_addr, NULL, 0);
10006538:	0030      	movs	r0, r6
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
1000653a:	429a      	cmp	r2, r3
1000653c:	4149      	adcs	r1, r1
  return dcd_edpt_xfer(rhport, ep_addr, NULL, 0);
1000653e:	2300      	movs	r3, #0
10006540:	2200      	movs	r2, #0
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
10006542:	01c9      	lsls	r1, r1, #7
  return dcd_edpt_xfer(rhport, ep_addr, NULL, 0);
10006544:	f000 f9f8 	bl	10006938 <dcd_edpt_xfer>
10006548:	0007      	movs	r7, r0
1000654a:	e7b7      	b.n	100064bc <usbd_control_xfer_cb+0x18>
    TU_ASSERT(0 == xferred_bytes);
1000654c:	2700      	movs	r7, #0
1000654e:	e7b5      	b.n	100064bc <usbd_control_xfer_cb+0x18>
      dcd_edpt_stall(rhport, EDPT_CTRL_OUT);
10006550:	2100      	movs	r1, #0
10006552:	0030      	movs	r0, r6
10006554:	f000 fa06 	bl	10006964 <dcd_edpt_stall>
      dcd_edpt_stall(rhport, EDPT_CTRL_IN);
10006558:	2180      	movs	r1, #128	; 0x80
1000655a:	0030      	movs	r0, r6
1000655c:	f000 fa02 	bl	10006964 <dcd_edpt_stall>
  return true;
10006560:	2701      	movs	r7, #1
10006562:	e7ab      	b.n	100064bc <usbd_control_xfer_cb+0x18>
10006564:	2740      	movs	r7, #64	; 0x40
10006566:	e7ce      	b.n	10006506 <usbd_control_xfer_cb+0x62>
    if ( xact_len ) memcpy(_usbd_ctrl_buf, _ctrl_xfer.buffer, xact_len);
10006568:	42a2      	cmp	r2, r4
1000656a:	d007      	beq.n	1000657c <usbd_control_xfer_cb+0xd8>
1000656c:	4c07      	ldr	r4, [pc, #28]	; (1000658c <usbd_control_xfer_cb+0xe8>)
1000656e:	003a      	movs	r2, r7
10006570:	0020      	movs	r0, r4
10006572:	f7fa fe99 	bl	100012a8 <__wrap___aeabi_memcpy>
    ep_addr = EDPT_CTRL_IN;
10006576:	2180      	movs	r1, #128	; 0x80
  return dcd_edpt_xfer(rhport, ep_addr, xact_len ? _usbd_ctrl_buf : NULL, xact_len);
10006578:	0022      	movs	r2, r4
1000657a:	e7cc      	b.n	10006516 <usbd_control_xfer_cb+0x72>
    ep_addr = EDPT_CTRL_IN;
1000657c:	2180      	movs	r1, #128	; 0x80
  return dcd_edpt_xfer(rhport, ep_addr, xact_len ? _usbd_ctrl_buf : NULL, xact_len);
1000657e:	2200      	movs	r2, #0
10006580:	e7c9      	b.n	10006516 <usbd_control_xfer_cb+0x72>
10006582:	46c0      	nop			; (mov r8, r8)
10006584:	2003921c 	.word	0x2003921c
10006588:	100067b5 	.word	0x100067b5
1000658c:	20039238 	.word	0x20039238

10006590 <dcd_rp2040_irq>:
    _hw_endpoint_clear_stall(ep);
}

static void dcd_rp2040_irq(void)
{
    uint32_t status = usb_hw->ints;
10006590:	2398      	movs	r3, #152	; 0x98
{
10006592:	b5f0      	push	{r4, r5, r6, r7, lr}
10006594:	4645      	mov	r5, r8
10006596:	46de      	mov	lr, fp
10006598:	4657      	mov	r7, sl
1000659a:	464e      	mov	r6, r9
    uint32_t status = usb_hw->ints;
1000659c:	4a42      	ldr	r2, [pc, #264]	; (100066a8 <dcd_rp2040_irq+0x118>)
{
1000659e:	b5e0      	push	{r5, r6, r7, lr}
    uint32_t status = usb_hw->ints;
100065a0:	58d3      	ldr	r3, [r2, r3]
    uint32_t handled = 0;

    if (status & USB_INTS_SETUP_REQ_BITS)
100065a2:	2480      	movs	r4, #128	; 0x80
    uint32_t status = usb_hw->ints;
100065a4:	4698      	mov	r8, r3
    if (status & USB_INTS_SETUP_REQ_BITS)
100065a6:	001d      	movs	r5, r3
100065a8:	2310      	movs	r3, #16
{
100065aa:	b085      	sub	sp, #20
100065ac:	9303      	str	r3, [sp, #12]
    if (status & USB_INTS_SETUP_REQ_BITS)
100065ae:	4643      	mov	r3, r8
100065b0:	0264      	lsls	r4, r4, #9
100065b2:	4025      	ands	r5, r4
100065b4:	4223      	tst	r3, r4
100065b6:	d014      	beq.n	100065e2 <dcd_rp2040_irq+0x52>
        ep->next_pid = 1u;
100065b8:	2101      	movs	r1, #1
100065ba:	2039      	movs	r0, #57	; 0x39
        ep->stalled  = 0;
100065bc:	2200      	movs	r2, #0
        ep->next_pid = 1u;
100065be:	4b3b      	ldr	r3, [pc, #236]	; (100066ac <dcd_rp2040_irq+0x11c>)
    {
        handled |= USB_INTS_SETUP_REQ_BITS;
100065c0:	0025      	movs	r5, r4
        ep->next_pid = 1u;
100065c2:	5419      	strb	r1, [r3, r0]
100065c4:	7159      	strb	r1, [r3, #5]
        ep->stalled  = 0;
100065c6:	3147      	adds	r1, #71	; 0x47
100065c8:	545a      	strb	r2, [r3, r1]
100065ca:	751a      	strb	r2, [r3, #20]
        uint8_t const *setup = (uint8_t const *)&usb_dpram->setup_packet;
        // Clear stall bits and reset pid
        reset_ep0();
        // Pass setup packet to tiny usb
        dcd_event_setup_received(0, setup, true);
100065cc:	2000      	movs	r0, #0
100065ce:	3201      	adds	r2, #1
100065d0:	4937      	ldr	r1, [pc, #220]	; (100066b0 <dcd_rp2040_irq+0x120>)
100065d2:	f7ff fdc3 	bl	1000615c <dcd_event_setup_received>
        usb_hw_clear->sie_status = USB_SIE_STATUS_SETUP_REC_BITS;
100065d6:	2280      	movs	r2, #128	; 0x80
100065d8:	4b36      	ldr	r3, [pc, #216]	; (100066b4 <dcd_rp2040_irq+0x124>)
100065da:	0292      	lsls	r2, r2, #10
100065dc:	651a      	str	r2, [r3, #80]	; 0x50
100065de:	4b36      	ldr	r3, [pc, #216]	; (100066b8 <dcd_rp2040_irq+0x128>)
100065e0:	9303      	str	r3, [sp, #12]
    }

    if (status & USB_INTS_BUFF_STATUS_BITS)
100065e2:	4643      	mov	r3, r8
100065e4:	06db      	lsls	r3, r3, #27
100065e6:	d40d      	bmi.n	10006604 <dcd_rp2040_irq+0x74>
    {
        handled |= USB_INTS_BUFF_STATUS_BITS;
        hw_handle_buff_status();
    }

    if (status & USB_INTS_BUS_RESET_BITS)
100065e8:	2380      	movs	r3, #128	; 0x80
100065ea:	4642      	mov	r2, r8
100065ec:	015b      	lsls	r3, r3, #5
100065ee:	421a      	tst	r2, r3
100065f0:	d138      	bne.n	10006664 <dcd_rp2040_irq+0xd4>
#if TUD_OPT_RP2040_USB_DEVICE_ENUMERATION_FIX
        rp2040_usb_device_enumeration_fix();
#endif
    }

    if (status ^ handled)
100065f2:	4545      	cmp	r5, r8
100065f4:	d152      	bne.n	1000669c <dcd_rp2040_irq+0x10c>
    {
        panic("Unhandled IRQ 0x%x\n", (uint) (status ^ handled));
    }
}
100065f6:	b005      	add	sp, #20
100065f8:	bcf0      	pop	{r4, r5, r6, r7}
100065fa:	46bb      	mov	fp, r7
100065fc:	46b2      	mov	sl, r6
100065fe:	46a9      	mov	r9, r5
10006600:	46a0      	mov	r8, r4
10006602:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint32_t remaining_buffers = usb_hw->buf_status;
10006604:	4b28      	ldr	r3, [pc, #160]	; (100066a8 <dcd_rp2040_irq+0x118>)
10006606:	6d9f      	ldr	r7, [r3, #88]	; 0x58
10006608:	469a      	mov	sl, r3
    for (uint i = 0; remaining_buffers && i < USB_MAX_ENDPOINTS * 2; i++)
1000660a:	2f00      	cmp	r7, #0
1000660c:	d024      	beq.n	10006658 <dcd_rp2040_irq+0xc8>
            usb_hw_clear->buf_status = bit;
1000660e:	4b29      	ldr	r3, [pc, #164]	; (100066b4 <dcd_rp2040_irq+0x124>)
    for (uint i = 0; remaining_buffers && i < USB_MAX_ENDPOINTS * 2; i++)
10006610:	2500      	movs	r5, #0
    uint bit = 1u;
10006612:	2401      	movs	r4, #1
            usb_hw_clear->buf_status = bit;
10006614:	469b      	mov	fp, r3
10006616:	e003      	b.n	10006620 <dcd_rp2040_irq+0x90>
        bit <<= 1u;
10006618:	0064      	lsls	r4, r4, #1
    for (uint i = 0; remaining_buffers && i < USB_MAX_ENDPOINTS * 2; i++)
1000661a:	3501      	adds	r5, #1
1000661c:	2d20      	cmp	r5, #32
1000661e:	d01b      	beq.n	10006658 <dcd_rp2040_irq+0xc8>
        if (remaining_buffers & bit)
10006620:	4227      	tst	r7, r4
10006622:	d0f9      	beq.n	10006618 <dcd_rp2040_irq+0x88>
            uint __unused which = (usb_hw->buf_cpu_should_handle & bit) ? 1 : 0;
10006624:	4653      	mov	r3, sl
10006626:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
            usb_hw_clear->buf_status = bit;
10006628:	465b      	mov	r3, fp
    return &hw_endpoints[num][in];
1000662a:	2668      	movs	r6, #104	; 0x68
1000662c:	2201      	movs	r2, #1
            usb_hw_clear->buf_status = bit;
1000662e:	659c      	str	r4, [r3, #88]	; 0x58
            struct hw_endpoint *ep = hw_endpoint_get_by_num(i >> 1u, !(i & 1u));
10006630:	086b      	lsrs	r3, r5, #1
    return &hw_endpoints[num][in];
10006632:	435e      	muls	r6, r3
10006634:	2334      	movs	r3, #52	; 0x34
10006636:	4691      	mov	r9, r2
10006638:	43aa      	bics	r2, r5
1000663a:	4353      	muls	r3, r2
1000663c:	18f6      	adds	r6, r6, r3
1000663e:	4b1b      	ldr	r3, [pc, #108]	; (100066ac <dcd_rp2040_irq+0x11c>)
10006640:	469c      	mov	ip, r3
10006642:	4466      	add	r6, ip
            bool done = _hw_endpoint_xfer_continue(ep);
10006644:	0030      	movs	r0, r6
10006646:	f000 fa3d 	bl	10006ac4 <_hw_endpoint_xfer_continue>
            if (done)
1000664a:	2800      	cmp	r0, #0
1000664c:	d11a      	bne.n	10006684 <dcd_rp2040_irq+0xf4>
            remaining_buffers &= ~bit;
1000664e:	43a7      	bics	r7, r4
    for (uint i = 0; remaining_buffers && i < USB_MAX_ENDPOINTS * 2; i++)
10006650:	3501      	adds	r5, #1
        bit <<= 1u;
10006652:	0064      	lsls	r4, r4, #1
    for (uint i = 0; remaining_buffers && i < USB_MAX_ENDPOINTS * 2; i++)
10006654:	2f00      	cmp	r7, #0
10006656:	d1e1      	bne.n	1000661c <dcd_rp2040_irq+0x8c>
    if (status & USB_INTS_BUS_RESET_BITS)
10006658:	2380      	movs	r3, #128	; 0x80
1000665a:	4642      	mov	r2, r8
1000665c:	015b      	lsls	r3, r3, #5
        handled |= USB_INTS_BUFF_STATUS_BITS;
1000665e:	9d03      	ldr	r5, [sp, #12]
    if (status & USB_INTS_BUS_RESET_BITS)
10006660:	421a      	tst	r2, r3
10006662:	d0c6      	beq.n	100065f2 <dcd_rp2040_irq+0x62>
        assigned_address = 0;
10006664:	2200      	movs	r2, #0
10006666:	4915      	ldr	r1, [pc, #84]	; (100066bc <dcd_rp2040_irq+0x12c>)
        dcd_event_bus_signal(0, DCD_EVENT_BUS_RESET, true);
10006668:	2000      	movs	r0, #0
        assigned_address = 0;
1000666a:	700a      	strb	r2, [r1, #0]
        usb_hw->dev_addr_ctrl = assigned_address;
1000666c:	490e      	ldr	r1, [pc, #56]	; (100066a8 <dcd_rp2040_irq+0x118>)
        handled |= USB_INTS_BUS_RESET_BITS;
1000666e:	431d      	orrs	r5, r3
        usb_hw->dev_addr_ctrl = assigned_address;
10006670:	600a      	str	r2, [r1, #0]
        dcd_event_bus_signal(0, DCD_EVENT_BUS_RESET, true);
10006672:	3201      	adds	r2, #1
10006674:	2101      	movs	r1, #1
10006676:	f7ff fd01 	bl	1000607c <dcd_event_bus_signal>
        usb_hw_clear->sie_status = USB_SIE_STATUS_BUS_RESET_BITS;
1000667a:	2280      	movs	r2, #128	; 0x80
1000667c:	4b0d      	ldr	r3, [pc, #52]	; (100066b4 <dcd_rp2040_irq+0x124>)
1000667e:	0312      	lsls	r2, r2, #12
10006680:	651a      	str	r2, [r3, #80]	; 0x50
10006682:	e7b6      	b.n	100065f2 <dcd_rp2040_irq+0x62>
                dcd_event_xfer_complete(0, ep->ep_addr, ep->len, XFER_RESULT_SUCCESS, true);
10006684:	464b      	mov	r3, r9
10006686:	69f2      	ldr	r2, [r6, #28]
10006688:	7931      	ldrb	r1, [r6, #4]
1000668a:	2000      	movs	r0, #0
1000668c:	9300      	str	r3, [sp, #0]
1000668e:	2300      	movs	r3, #0
10006690:	f7ff fd8c 	bl	100061ac <dcd_event_xfer_complete>
                hw_endpoint_reset_transfer(ep);
10006694:	0030      	movs	r0, r6
10006696:	f000 f9e9 	bl	10006a6c <hw_endpoint_reset_transfer>
1000669a:	e7d8      	b.n	1000664e <dcd_rp2040_irq+0xbe>
        panic("Unhandled IRQ 0x%x\n", (uint) (status ^ handled));
1000669c:	4641      	mov	r1, r8
1000669e:	4808      	ldr	r0, [pc, #32]	; (100066c0 <dcd_rp2040_irq+0x130>)
100066a0:	4069      	eors	r1, r5
100066a2:	f7fd fa87 	bl	10003bb4 <panic>
100066a6:	46c0      	nop			; (mov r8, r8)
100066a8:	50110000 	.word	0x50110000
100066ac:	200394f8 	.word	0x200394f8
100066b0:	50100000 	.word	0x50100000
100066b4:	50113000 	.word	0x50113000
100066b8:	00010010 	.word	0x00010010
100066bc:	20039bb9 	.word	0x20039bb9
100066c0:	10009c1c 	.word	0x10009c1c

100066c4 <dcd_int_enable>:

    dcd_connect(rhport);
}

void dcd_int_enable(uint8_t rhport)
{
100066c4:	b510      	push	{r4, lr}
    assert(rhport == 0);
    irq_set_enabled(USBCTRL_IRQ, true);
100066c6:	2101      	movs	r1, #1
100066c8:	2005      	movs	r0, #5
100066ca:	f7fb f9bb 	bl	10001a44 <irq_set_enabled>
}
100066ce:	bd10      	pop	{r4, pc}

100066d0 <dcd_set_address>:
{
    pico_trace("dcd_set_address %d %d\n", rhport, dev_addr);
    assert(rhport == 0);

    // Can't set device address in hardware until status xfer has complete
    assigned_address = dev_addr;
100066d0:	4b09      	ldr	r3, [pc, #36]	; (100066f8 <dcd_set_address+0x28>)
{
100066d2:	b510      	push	{r4, lr}
        ep->next_pid = 1u;
100066d4:	2201      	movs	r2, #1
    assigned_address = dev_addr;
100066d6:	7019      	strb	r1, [r3, #0]
        ep->next_pid = 1u;
100066d8:	2139      	movs	r1, #57	; 0x39
        ep->stalled  = 0;
100066da:	2300      	movs	r3, #0
        ep->next_pid = 1u;
100066dc:	4807      	ldr	r0, [pc, #28]	; (100066fc <dcd_set_address+0x2c>)
100066de:	5442      	strb	r2, [r0, r1]
100066e0:	7142      	strb	r2, [r0, #5]
        ep->stalled  = 0;
100066e2:	3247      	adds	r2, #71	; 0x47
100066e4:	5483      	strb	r3, [r0, r2]
100066e6:	7503      	strb	r3, [r0, #20]
    _hw_endpoint_xfer(ep, buffer, total_bytes, start);
100066e8:	2200      	movs	r2, #0
100066ea:	2100      	movs	r1, #0
100066ec:	3034      	adds	r0, #52	; 0x34
100066ee:	3301      	adds	r3, #1
100066f0:	f000 fa68 	bl	10006bc4 <_hw_endpoint_xfer>

    ep0_0len_status();
}
100066f4:	bd10      	pop	{r4, pc}
100066f6:	46c0      	nop			; (mov r8, r8)
100066f8:	20039bb9 	.word	0x20039bb9
100066fc:	200394f8 	.word	0x200394f8

10006700 <dcd_connect>:
// connect by enabling internal pull-up resistor on D+/D-
void dcd_connect(uint8_t rhport)
{
    pico_info("dcd_connect %d\n", rhport);
    assert(rhport == 0);
    usb_hw_set->sie_ctrl = USB_SIE_CTRL_PULLUP_EN_BITS;
10006700:	2280      	movs	r2, #128	; 0x80
10006702:	4b02      	ldr	r3, [pc, #8]	; (1000670c <dcd_connect+0xc>)
10006704:	0252      	lsls	r2, r2, #9
10006706:	64da      	str	r2, [r3, #76]	; 0x4c
}
10006708:	4770      	bx	lr
1000670a:	46c0      	nop			; (mov r8, r8)
1000670c:	50112000 	.word	0x50112000

10006710 <dcd_init>:
{
10006710:	b570      	push	{r4, r5, r6, lr}
10006712:	0005      	movs	r5, r0
    rp2040_usb_init();
10006714:	f000 f982 	bl	10006a1c <rp2040_usb_init>
    irq_set_exclusive_handler(USBCTRL_IRQ, dcd_rp2040_irq);
10006718:	2005      	movs	r0, #5
1000671a:	491c      	ldr	r1, [pc, #112]	; (1000678c <dcd_init+0x7c>)
1000671c:	f7fb f9b4 	bl	10001a88 <irq_set_exclusive_handler>
    memset(hw_endpoints, 0, sizeof(hw_endpoints));
10006720:	22d0      	movs	r2, #208	; 0xd0
10006722:	4c1b      	ldr	r4, [pc, #108]	; (10006790 <dcd_init+0x80>)
10006724:	2100      	movs	r1, #0
10006726:	0020      	movs	r0, r4
10006728:	00d2      	lsls	r2, r2, #3
1000672a:	f7fa fdb7 	bl	1000129c <__wrap_memset>
    assigned_address = 0;
1000672e:	2200      	movs	r2, #0
10006730:	4b18      	ldr	r3, [pc, #96]	; (10006794 <dcd_init+0x84>)
    next_buffer_ptr = &usb_dpram->epx_data[0];
10006732:	4919      	ldr	r1, [pc, #100]	; (10006798 <dcd_init+0x88>)
    assigned_address = 0;
10006734:	701a      	strb	r2, [r3, #0]
    next_buffer_ptr = &usb_dpram->epx_data[0];
10006736:	4b19      	ldr	r3, [pc, #100]	; (1000679c <dcd_init+0x8c>)
    ep->wMaxPacketSize = wMaxPacketSize;
10006738:	2040      	movs	r0, #64	; 0x40
    next_buffer_ptr = &usb_dpram->epx_data[0];
1000673a:	6019      	str	r1, [r3, #0]
    ep->in = in;
1000673c:	2635      	movs	r6, #53	; 0x35
    ep->rx = in == false;
1000673e:	2301      	movs	r3, #1
        ep->buffer_control = &usb_dpram->ep_buf_ctrl[num].out;
10006740:	4917      	ldr	r1, [pc, #92]	; (100067a0 <dcd_init+0x90>)
    ep->rx = in == false;
10006742:	70e3      	strb	r3, [r4, #3]
    ep->next_pid = num == 0 ? 1u : 0u;
10006744:	7163      	strb	r3, [r4, #5]
    ep->wMaxPacketSize = wMaxPacketSize;
10006746:	62e0      	str	r0, [r4, #44]	; 0x2c
        ep->buffer_control = &usb_dpram->ep_buf_ctrl[num].out;
10006748:	60e1      	str	r1, [r4, #12]
    *ep->buffer_control = 0;
1000674a:	600a      	str	r2, [r1, #0]
    ep->in = in;
1000674c:	55a3      	strb	r3, [r4, r6]
    ep->ep_addr = ep_addr;
1000674e:	364c      	adds	r6, #76	; 0x4c
10006750:	36ff      	adds	r6, #255	; 0xff
10006752:	8726      	strh	r6, [r4, #56]	; 0x38
    ep->transfer_type = transfer_type;
10006754:	2600      	movs	r6, #0
    ep->wMaxPacketSize = wMaxPacketSize;
10006756:	6620      	str	r0, [r4, #96]	; 0x60
    ep->transfer_type = transfer_type;
10006758:	3024      	adds	r0, #36	; 0x24
1000675a:	5426      	strb	r6, [r4, r0]
        ep->hw_data_buf = (uint8_t*)&usb_dpram->ep0_buf_a[0];
1000675c:	4911      	ldr	r1, [pc, #68]	; (100067a4 <dcd_init+0x94>)
        ep->buffer_control = &usb_dpram->ep_buf_ctrl[num].in;
1000675e:	4812      	ldr	r0, [pc, #72]	; (100067a8 <dcd_init+0x98>)
        ep->endpoint_control = NULL;
10006760:	60a2      	str	r2, [r4, #8]
        ep->hw_data_buf = (uint8_t*)&usb_dpram->ep0_buf_a[0];
10006762:	6121      	str	r1, [r4, #16]
    ep->configured = true;
10006764:	7023      	strb	r3, [r4, #0]
    ep->num = num;
10006766:	86e2      	strh	r2, [r4, #54]	; 0x36
        ep->buffer_control = &usb_dpram->ep_buf_ctrl[num].in;
10006768:	6420      	str	r0, [r4, #64]	; 0x40
    *ep->buffer_control = 0;
1000676a:	6002      	str	r2, [r0, #0]
        ep->endpoint_control = NULL;
1000676c:	63e2      	str	r2, [r4, #60]	; 0x3c
    ep->configured = true;
1000676e:	3234      	adds	r2, #52	; 0x34
10006770:	54a3      	strb	r3, [r4, r2]
    usb_hw->main_ctrl = USB_MAIN_CTRL_CONTROLLER_EN_BITS;
10006772:	4a0e      	ldr	r2, [pc, #56]	; (100067ac <dcd_init+0x9c>)
        ep->hw_data_buf = (uint8_t*)&usb_dpram->ep0_buf_a[0];
10006774:	6461      	str	r1, [r4, #68]	; 0x44
    usb_hw->main_ctrl = USB_MAIN_CTRL_CONTROLLER_EN_BITS;
10006776:	6413      	str	r3, [r2, #64]	; 0x40
    usb_hw->sie_ctrl = USB_SIE_CTRL_EP0_INT_1BUF_BITS; 
10006778:	2380      	movs	r3, #128	; 0x80
1000677a:	059b      	lsls	r3, r3, #22
1000677c:	64d3      	str	r3, [r2, #76]	; 0x4c
    usb_hw->inte     = USB_INTS_BUFF_STATUS_BITS | USB_INTS_BUS_RESET_BITS | USB_INTS_SETUP_REQ_BITS;
1000677e:	2390      	movs	r3, #144	; 0x90
10006780:	490b      	ldr	r1, [pc, #44]	; (100067b0 <dcd_init+0xa0>)
    dcd_connect(rhport);
10006782:	0028      	movs	r0, r5
    usb_hw->inte     = USB_INTS_BUFF_STATUS_BITS | USB_INTS_BUS_RESET_BITS | USB_INTS_SETUP_REQ_BITS;
10006784:	50d1      	str	r1, [r2, r3]
    dcd_connect(rhport);
10006786:	f7ff ffbb 	bl	10006700 <dcd_connect>
}
1000678a:	bd70      	pop	{r4, r5, r6, pc}
1000678c:	10006591 	.word	0x10006591
10006790:	200394f8 	.word	0x200394f8
10006794:	20039bb9 	.word	0x20039bb9
10006798:	50100180 	.word	0x50100180
1000679c:	20039b7c 	.word	0x20039b7c
100067a0:	50100084 	.word	0x50100084
100067a4:	50100100 	.word	0x50100100
100067a8:	50100080 	.word	0x50100080
100067ac:	50110000 	.word	0x50110000
100067b0:	00011010 	.word	0x00011010

100067b4 <dcd_edpt0_status_complete>:
void dcd_edpt0_status_complete(uint8_t rhport, tusb_control_request_t const * request)
{
    pico_trace("dcd_edpt0_status_complete %d\n", rhport);
    assert(rhport == 0);

    if (request->bmRequestType_bit.recipient == TUSB_REQ_RCPT_DEVICE &&
100067b4:	780b      	ldrb	r3, [r1, #0]
100067b6:	065b      	lsls	r3, r3, #25
100067b8:	d102      	bne.n	100067c0 <dcd_edpt0_status_complete+0xc>
        request->bmRequestType_bit.type == TUSB_REQ_TYPE_STANDARD &&
100067ba:	784b      	ldrb	r3, [r1, #1]
100067bc:	2b05      	cmp	r3, #5
100067be:	d009      	beq.n	100067d4 <dcd_edpt0_status_complete+0x20>
        ep->next_pid = 1u;
100067c0:	2101      	movs	r1, #1
100067c2:	2039      	movs	r0, #57	; 0x39
        ep->stalled  = 0;
100067c4:	2200      	movs	r2, #0
        ep->next_pid = 1u;
100067c6:	4b06      	ldr	r3, [pc, #24]	; (100067e0 <dcd_edpt0_status_complete+0x2c>)
100067c8:	7159      	strb	r1, [r3, #5]
100067ca:	5419      	strb	r1, [r3, r0]
        ep->stalled  = 0;
100067cc:	3147      	adds	r1, #71	; 0x47
100067ce:	751a      	strb	r2, [r3, #20]
100067d0:	545a      	strb	r2, [r3, r1]
        pico_trace("Set HW address %d\n", assigned_address);
        usb_hw->dev_addr_ctrl = assigned_address;
    }

    reset_ep0();
}
100067d2:	4770      	bx	lr
        usb_hw->dev_addr_ctrl = assigned_address;
100067d4:	4b03      	ldr	r3, [pc, #12]	; (100067e4 <dcd_edpt0_status_complete+0x30>)
100067d6:	781a      	ldrb	r2, [r3, #0]
100067d8:	4b03      	ldr	r3, [pc, #12]	; (100067e8 <dcd_edpt0_status_complete+0x34>)
100067da:	601a      	str	r2, [r3, #0]
100067dc:	e7f0      	b.n	100067c0 <dcd_edpt0_status_complete+0xc>
100067de:	46c0      	nop			; (mov r8, r8)
100067e0:	200394f8 	.word	0x200394f8
100067e4:	20039bb9 	.word	0x20039bb9
100067e8:	50110000 	.word	0x50110000

100067ec <dcd_edpt_open>:

bool dcd_edpt_open (uint8_t rhport, tusb_desc_endpoint_t const * desc_edpt)
{
100067ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100067ee:	4647      	mov	r7, r8
100067f0:	46ce      	mov	lr, r9
    pico_info("dcd_edpt_open %d %02x\n", rhport, desc_edpt->bEndpointAddress);
    assert(rhport == 0);
    hw_endpoint_init(desc_edpt->bEndpointAddress, desc_edpt->wMaxPacketSize.size, desc_edpt->bmAttributes.xfer);
100067f2:	2307      	movs	r3, #7
{
100067f4:	b580      	push	{r7, lr}
    hw_endpoint_init(desc_edpt->bEndpointAddress, desc_edpt->wMaxPacketSize.size, desc_edpt->bmAttributes.xfer);
100067f6:	7948      	ldrb	r0, [r1, #5]
100067f8:	78cc      	ldrb	r4, [r1, #3]
100067fa:	790a      	ldrb	r2, [r1, #4]
100067fc:	4003      	ands	r3, r0
100067fe:	788f      	ldrb	r7, [r1, #2]
10006800:	07a4      	lsls	r4, r4, #30
10006802:	021b      	lsls	r3, r3, #8
10006804:	4313      	orrs	r3, r2
10006806:	0fa2      	lsrs	r2, r4, #30
10006808:	4694      	mov	ip, r2
1000680a:	0014      	movs	r4, r2
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
1000680c:	207f      	movs	r0, #127	; 0x7f
1000680e:	b27a      	sxtb	r2, r7
10006810:	4691      	mov	r9, r2
    ep->ep_addr = ep_addr;
10006812:	2168      	movs	r1, #104	; 0x68
10006814:	2234      	movs	r2, #52	; 0x34
10006816:	4038      	ands	r0, r7
    return &hw_endpoints[num][in];
10006818:	09fe      	lsrs	r6, r7, #7
    ep->ep_addr = ep_addr;
1000681a:	4341      	muls	r1, r0
1000681c:	4372      	muls	r2, r6
1000681e:	1852      	adds	r2, r2, r1
    ep->rx = in == false;
10006820:	4649      	mov	r1, r9
10006822:	43c9      	mvns	r1, r1
    ep->ep_addr = ep_addr;
10006824:	4d3c      	ldr	r5, [pc, #240]	; (10006918 <dcd_edpt_open+0x12c>)
    ep->rx = in == false;
10006826:	0fc9      	lsrs	r1, r1, #31
    ep->ep_addr = ep_addr;
10006828:	18aa      	adds	r2, r5, r2
    ep->rx = in == false;
1000682a:	70d1      	strb	r1, [r2, #3]
    ep->next_pid = num == 0 ? 1u : 0u;
1000682c:	4241      	negs	r1, r0
1000682e:	4141      	adcs	r1, r0
    ep->ep_addr = ep_addr;
10006830:	7117      	strb	r7, [r2, #4]
    ep->in = in;
10006832:	7056      	strb	r6, [r2, #1]
    ep->num = num;
10006834:	7090      	strb	r0, [r2, #2]
    ep->next_pid = num == 0 ? 1u : 0u;
10006836:	7151      	strb	r1, [r2, #5]
    if (transfer_type == TUSB_XFER_ISOCHRONOUS)
10006838:	2c01      	cmp	r4, #1
1000683a:	d05f      	beq.n	100068fc <dcd_edpt_open+0x110>
        if (wMaxPacketSize > USB_MAX_PACKET_SIZE)
1000683c:	2b40      	cmp	r3, #64	; 0x40
1000683e:	d861      	bhi.n	10006904 <dcd_edpt_open+0x118>
    ep->wMaxPacketSize = wMaxPacketSize;
10006840:	2234      	movs	r2, #52	; 0x34
10006842:	2168      	movs	r1, #104	; 0x68
10006844:	4372      	muls	r2, r6
10006846:	4341      	muls	r1, r0
10006848:	1852      	adds	r2, r2, r1
1000684a:	18aa      	adds	r2, r5, r2
    ep->transfer_type = transfer_type;
1000684c:	0011      	movs	r1, r2
1000684e:	4667      	mov	r7, ip
10006850:	3130      	adds	r1, #48	; 0x30
10006852:	700f      	strb	r7, [r1, #0]
    if (ep->in)
10006854:	4649      	mov	r1, r9
    ep->wMaxPacketSize = wMaxPacketSize;
10006856:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ep->in)
10006858:	2900      	cmp	r1, #0
1000685a:	db3e      	blt.n	100068da <dcd_edpt_open+0xee>
        ep->buffer_control = &usb_dpram->ep_buf_ctrl[num].out;
1000685c:	4f2f      	ldr	r7, [pc, #188]	; (1000691c <dcd_edpt_open+0x130>)
1000685e:	00c1      	lsls	r1, r0, #3
10006860:	46bc      	mov	ip, r7
    *ep->buffer_control = 0;
10006862:	2700      	movs	r7, #0
        ep->buffer_control = &usb_dpram->ep_buf_ctrl[num].out;
10006864:	4461      	add	r1, ip
10006866:	60d1      	str	r1, [r2, #12]
    *ep->buffer_control = 0;
10006868:	600f      	str	r7, [r1, #0]
    if (ep->num == 0)
1000686a:	2800      	cmp	r0, #0
1000686c:	d03e      	beq.n	100068ec <dcd_edpt_open+0x100>
            ep->endpoint_control = &usb_dpram->ep_ctrl[num-1].out;
1000686e:	4f2c      	ldr	r7, [pc, #176]	; (10006920 <dcd_edpt_open+0x134>)
10006870:	00c1      	lsls	r1, r0, #3
10006872:	46bc      	mov	ip, r7
10006874:	4461      	add	r1, ip
10006876:	6091      	str	r1, [r2, #8]
    ep->hw_data_buf = next_buffer_ptr;
10006878:	2768      	movs	r7, #104	; 0x68
1000687a:	4a2a      	ldr	r2, [pc, #168]	; (10006924 <dcd_edpt_open+0x138>)
1000687c:	4347      	muls	r7, r0
1000687e:	6811      	ldr	r1, [r2, #0]
10006880:	4690      	mov	r8, r2
10006882:	2234      	movs	r2, #52	; 0x34
10006884:	46bc      	mov	ip, r7
10006886:	4372      	muls	r2, r6
10006888:	4462      	add	r2, ip
1000688a:	18aa      	adds	r2, r5, r2
1000688c:	6111      	str	r1, [r2, #16]
    next_buffer_ptr += size;
1000688e:	2b40      	cmp	r3, #64	; 0x40
10006890:	d200      	bcs.n	10006894 <dcd_edpt_open+0xa8>
10006892:	2340      	movs	r3, #64	; 0x40
    if ((uintptr_t)next_buffer_ptr & 0b111111u)
10006894:	223f      	movs	r2, #63	; 0x3f
    next_buffer_ptr += size;
10006896:	18cb      	adds	r3, r1, r3
    if ((uintptr_t)next_buffer_ptr & 0b111111u)
10006898:	4213      	tst	r3, r2
1000689a:	d001      	beq.n	100068a0 <dcd_edpt_open+0xb4>
        fixptr &= ~0b111111u;
1000689c:	4393      	bics	r3, r2
        fixptr += 64;
1000689e:	3340      	adds	r3, #64	; 0x40
        next_buffer_ptr = (uint8_t*)fixptr;
100068a0:	4642      	mov	r2, r8
100068a2:	6013      	str	r3, [r2, #0]
}

static inline uintptr_t hw_data_offset(uint8_t *buf)
{
    // Remove usb base from buffer pointer
    return (uintptr_t)buf ^ (uintptr_t)usb_dpram;
100068a4:	4b20      	ldr	r3, [pc, #128]	; (10006928 <dcd_edpt_open+0x13c>)
    *ep->endpoint_control = reg;
100068a6:	2268      	movs	r2, #104	; 0x68
100068a8:	4059      	eors	r1, r3
100068aa:	2334      	movs	r3, #52	; 0x34
                  | (ep->transfer_type << EP_CTRL_BUFFER_TYPE_LSB)
100068ac:	06a4      	lsls	r4, r4, #26
                  | dpram_offset;
100068ae:	430c      	orrs	r4, r1
    uint32_t reg =  EP_CTRL_ENABLE_BITS
100068b0:	21a0      	movs	r1, #160	; 0xa0
    *ep->endpoint_control = reg;
100068b2:	4373      	muls	r3, r6
100068b4:	4342      	muls	r2, r0
100068b6:	189b      	adds	r3, r3, r2
100068b8:	18eb      	adds	r3, r5, r3
100068ba:	689b      	ldr	r3, [r3, #8]
    uint32_t reg =  EP_CTRL_ENABLE_BITS
100068bc:	0609      	lsls	r1, r1, #24
100068be:	430c      	orrs	r4, r1
    *ep->endpoint_control = reg;
100068c0:	601c      	str	r4, [r3, #0]
    ep->configured = true;
100068c2:	2334      	movs	r3, #52	; 0x34
100068c4:	435e      	muls	r6, r3
100068c6:	3334      	adds	r3, #52	; 0x34
100068c8:	4358      	muls	r0, r3
100068ca:	3b67      	subs	r3, #103	; 0x67
100068cc:	1836      	adds	r6, r6, r0
100068ce:	55ab      	strb	r3, [r5, r6]
    return true;
}
100068d0:	2001      	movs	r0, #1
100068d2:	bcc0      	pop	{r6, r7}
100068d4:	46b9      	mov	r9, r7
100068d6:	46b0      	mov	r8, r6
100068d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ep->buffer_control = &usb_dpram->ep_buf_ctrl[num].in;
100068da:	4f14      	ldr	r7, [pc, #80]	; (1000692c <dcd_edpt_open+0x140>)
100068dc:	00c1      	lsls	r1, r0, #3
100068de:	46bc      	mov	ip, r7
    *ep->buffer_control = 0;
100068e0:	2700      	movs	r7, #0
        ep->buffer_control = &usb_dpram->ep_buf_ctrl[num].in;
100068e2:	4461      	add	r1, ip
100068e4:	60d1      	str	r1, [r2, #12]
    *ep->buffer_control = 0;
100068e6:	600f      	str	r7, [r1, #0]
    if (ep->num == 0)
100068e8:	2800      	cmp	r0, #0
100068ea:	d10f      	bne.n	1000690c <dcd_edpt_open+0x120>
        ep->endpoint_control = NULL;
100068ec:	2334      	movs	r3, #52	; 0x34
100068ee:	2200      	movs	r2, #0
100068f0:	4373      	muls	r3, r6
100068f2:	18eb      	adds	r3, r5, r3
100068f4:	609a      	str	r2, [r3, #8]
        ep->hw_data_buf = (uint8_t*)&usb_dpram->ep0_buf_a[0];
100068f6:	4a0e      	ldr	r2, [pc, #56]	; (10006930 <dcd_edpt_open+0x144>)
100068f8:	611a      	str	r2, [r3, #16]
100068fa:	e7e2      	b.n	100068c2 <dcd_edpt_open+0xd6>
        if (wMaxPacketSize > USB_MAX_ISO_PACKET_SIZE)
100068fc:	2280      	movs	r2, #128	; 0x80
100068fe:	00d2      	lsls	r2, r2, #3
10006900:	4293      	cmp	r3, r2
10006902:	d39d      	bcc.n	10006840 <dcd_edpt_open+0x54>
            panic("Isochronous wMaxPacketSize %d too large", wMaxPacketSize);
10006904:	0019      	movs	r1, r3
10006906:	480b      	ldr	r0, [pc, #44]	; (10006934 <dcd_edpt_open+0x148>)
10006908:	f7fd f954 	bl	10003bb4 <panic>
            ep->endpoint_control = &usb_dpram->ep_ctrl[num-1].in;
1000690c:	4f06      	ldr	r7, [pc, #24]	; (10006928 <dcd_edpt_open+0x13c>)
1000690e:	00c1      	lsls	r1, r0, #3
10006910:	46bc      	mov	ip, r7
10006912:	4461      	add	r1, ip
10006914:	6091      	str	r1, [r2, #8]
10006916:	e7af      	b.n	10006878 <dcd_edpt_open+0x8c>
10006918:	200394f8 	.word	0x200394f8
1000691c:	50100084 	.word	0x50100084
10006920:	50100004 	.word	0x50100004
10006924:	20039b7c 	.word	0x20039b7c
10006928:	50100000 	.word	0x50100000
1000692c:	50100080 	.word	0x50100080
10006930:	50100100 	.word	0x50100100
10006934:	10009c30 	.word	0x10009c30

10006938 <dcd_edpt_xfer>:

bool dcd_edpt_xfer(uint8_t rhport, uint8_t ep_addr, uint8_t * buffer, uint16_t total_bytes)
{
10006938:	b510      	push	{r4, lr}
1000693a:	000c      	movs	r4, r1
    return &hw_endpoints[num][in];
1000693c:	2034      	movs	r0, #52	; 0x34
{
1000693e:	0011      	movs	r1, r2
10006940:	001a      	movs	r2, r3
    return &hw_endpoints[num][in];
10006942:	09e3      	lsrs	r3, r4, #7
10006944:	4358      	muls	r0, r3
10006946:	237f      	movs	r3, #127	; 0x7f
10006948:	4023      	ands	r3, r4
1000694a:	2468      	movs	r4, #104	; 0x68
1000694c:	435c      	muls	r4, r3
1000694e:	4b04      	ldr	r3, [pc, #16]	; (10006960 <dcd_edpt_xfer+0x28>)
10006950:	1900      	adds	r0, r0, r4
10006952:	18c0      	adds	r0, r0, r3
    _hw_endpoint_xfer(ep, buffer, total_bytes, start);
10006954:	2301      	movs	r3, #1
10006956:	f000 f935 	bl	10006bc4 <_hw_endpoint_xfer>
    assert(rhport == 0);
    // True means start new xfer
    hw_endpoint_xfer(ep_addr, buffer, total_bytes, true);
    return true;
}
1000695a:	2001      	movs	r0, #1
1000695c:	bd10      	pop	{r4, pc}
1000695e:	46c0      	nop			; (mov r8, r8)
10006960:	200394f8 	.word	0x200394f8

10006964 <dcd_edpt_stall>:

void dcd_edpt_stall (uint8_t rhport, uint8_t ep_addr)
{
10006964:	b570      	push	{r4, r5, r6, lr}
10006966:	257f      	movs	r5, #127	; 0x7f
    return &hw_endpoints[num][in];
10006968:	2034      	movs	r0, #52	; 0x34
1000696a:	2368      	movs	r3, #104	; 0x68
1000696c:	400d      	ands	r5, r1
    uint8_t in = (ep_addr & TUSB_DIR_IN_MASK) ? 1 : 0;
1000696e:	09cc      	lsrs	r4, r1, #7
    return &hw_endpoints[num][in];
10006970:	436b      	muls	r3, r5
10006972:	4360      	muls	r0, r4
10006974:	4e0c      	ldr	r6, [pc, #48]	; (100069a8 <dcd_edpt_stall+0x44>)
10006976:	18c0      	adds	r0, r0, r3
10006978:	1830      	adds	r0, r6, r0
    if (ep->num == 0)
1000697a:	7883      	ldrb	r3, [r0, #2]
1000697c:	2b00      	cmp	r3, #0
1000697e:	d105      	bne.n	1000698c <dcd_edpt_stall+0x28>
        usb_hw_set->ep_stall_arm = ep->in ? USB_EP_STALL_ARM_EP0_IN_BITS : USB_EP_STALL_ARM_EP0_OUT_BITS;
10006980:	7843      	ldrb	r3, [r0, #1]
10006982:	425a      	negs	r2, r3
10006984:	4153      	adcs	r3, r2
10006986:	4a09      	ldr	r2, [pc, #36]	; (100069ac <dcd_edpt_stall+0x48>)
10006988:	3301      	adds	r3, #1
1000698a:	6693      	str	r3, [r2, #104]	; 0x68
    return _hw_endpoint_buffer_control_update32(ep, ~value, value);
1000698c:	2280      	movs	r2, #128	; 0x80
1000698e:	4908      	ldr	r1, [pc, #32]	; (100069b0 <dcd_edpt_stall+0x4c>)
10006990:	0112      	lsls	r2, r2, #4
10006992:	f000 f875 	bl	10006a80 <_hw_endpoint_buffer_control_update32>
    ep->stalled = true;
10006996:	2134      	movs	r1, #52	; 0x34
10006998:	2301      	movs	r3, #1
1000699a:	434c      	muls	r4, r1
1000699c:	3134      	adds	r1, #52	; 0x34
1000699e:	434d      	muls	r5, r1
100069a0:	1964      	adds	r4, r4, r5
100069a2:	1934      	adds	r4, r6, r4
100069a4:	7523      	strb	r3, [r4, #20]
    pico_trace("dcd_edpt_stall %d %02x\n", rhport, ep_addr);
    assert(rhport == 0);
    hw_endpoint_stall(ep_addr);
}
100069a6:	bd70      	pop	{r4, r5, r6, pc}
100069a8:	200394f8 	.word	0x200394f8
100069ac:	50112000 	.word	0x50112000
100069b0:	fffff7ff 	.word	0xfffff7ff

100069b4 <dcd_edpt_clear_stall>:

void dcd_edpt_clear_stall (uint8_t rhport, uint8_t ep_addr)
{
100069b4:	b570      	push	{r4, r5, r6, lr}
100069b6:	257f      	movs	r5, #127	; 0x7f
    return &hw_endpoints[num][in];
100069b8:	2034      	movs	r0, #52	; 0x34
100069ba:	2368      	movs	r3, #104	; 0x68
100069bc:	400d      	ands	r5, r1
    uint8_t in = (ep_addr & TUSB_DIR_IN_MASK) ? 1 : 0;
100069be:	09cc      	lsrs	r4, r1, #7
    return &hw_endpoints[num][in];
100069c0:	436b      	muls	r3, r5
100069c2:	4360      	muls	r0, r4
100069c4:	4e0c      	ldr	r6, [pc, #48]	; (100069f8 <dcd_edpt_clear_stall+0x44>)
100069c6:	18c0      	adds	r0, r0, r3
100069c8:	1830      	adds	r0, r6, r0
    if (ep->num == 0)
100069ca:	7883      	ldrb	r3, [r0, #2]
100069cc:	2b00      	cmp	r3, #0
100069ce:	d105      	bne.n	100069dc <dcd_edpt_clear_stall+0x28>
        usb_hw_clear->ep_stall_arm = ep->in ? USB_EP_STALL_ARM_EP0_IN_BITS : USB_EP_STALL_ARM_EP0_OUT_BITS;
100069d0:	7843      	ldrb	r3, [r0, #1]
100069d2:	425a      	negs	r2, r3
100069d4:	4153      	adcs	r3, r2
100069d6:	4a09      	ldr	r2, [pc, #36]	; (100069fc <dcd_edpt_clear_stall+0x48>)
100069d8:	3301      	adds	r3, #1
100069da:	6693      	str	r3, [r2, #104]	; 0x68
    return _hw_endpoint_buffer_control_update32(ep, ~value, 0);
100069dc:	2200      	movs	r2, #0
100069de:	4908      	ldr	r1, [pc, #32]	; (10006a00 <dcd_edpt_clear_stall+0x4c>)
100069e0:	f000 f84e 	bl	10006a80 <_hw_endpoint_buffer_control_update32>
    ep->stalled = false;
100069e4:	2134      	movs	r1, #52	; 0x34
100069e6:	2300      	movs	r3, #0
100069e8:	434c      	muls	r4, r1
100069ea:	3134      	adds	r1, #52	; 0x34
100069ec:	434d      	muls	r5, r1
100069ee:	1964      	adds	r4, r4, r5
100069f0:	1934      	adds	r4, r6, r4
100069f2:	7523      	strb	r3, [r4, #20]
    pico_trace("dcd_edpt_clear_stall %d %02x\n", rhport, ep_addr);
    assert(rhport == 0);
    hw_endpoint_clear_stall(ep_addr);
}
100069f4:	bd70      	pop	{r4, r5, r6, pc}
100069f6:	46c0      	nop			; (mov r8, r8)
100069f8:	200394f8 	.word	0x200394f8
100069fc:	50113000 	.word	0x50113000
10006a00:	fffff7ff 	.word	0xfffff7ff

10006a04 <_hw_endpoint_buffer_control_update32.part.0.isra.0>:
    }
    if (or_mask) {
        value |= or_mask;
        if (or_mask & USB_BUF_CTRL_AVAIL) {
            if (*ep->buffer_control & USB_BUF_CTRL_AVAIL) {
                panic("ep %d %s was already available", ep->num, ep_dir_string[ep->in]);
10006a04:	4b03      	ldr	r3, [pc, #12]	; (10006a14 <_hw_endpoint_buffer_control_update32.part.0.isra.0+0x10>)
10006a06:	0080      	lsls	r0, r0, #2
10006a08:	58c2      	ldr	r2, [r0, r3]
void _hw_endpoint_buffer_control_update32(struct hw_endpoint *ep, uint32_t and_mask, uint32_t or_mask) {
10006a0a:	b510      	push	{r4, lr}
                panic("ep %d %s was already available", ep->num, ep_dir_string[ep->in]);
10006a0c:	4802      	ldr	r0, [pc, #8]	; (10006a18 <_hw_endpoint_buffer_control_update32.part.0.isra.0+0x14>)
10006a0e:	f7fd f8d1 	bl	10003bb4 <panic>
10006a12:	46c0      	nop			; (mov r8, r8)
10006a14:	200021c0 	.word	0x200021c0
10006a18:	10009c58 	.word	0x10009c58

10006a1c <rp2040_usb_init>:
10006a1c:	2280      	movs	r2, #128	; 0x80
10006a1e:	4b0e      	ldr	r3, [pc, #56]	; (10006a58 <rp2040_usb_init+0x3c>)
10006a20:	0452      	lsls	r2, r2, #17
{
10006a22:	b510      	push	{r4, lr}
10006a24:	601a      	str	r2, [r3, #0]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10006a26:	4b0d      	ldr	r3, [pc, #52]	; (10006a5c <rp2040_usb_init+0x40>)
10006a28:	490d      	ldr	r1, [pc, #52]	; (10006a60 <rp2040_usb_init+0x44>)
10006a2a:	601a      	str	r2, [r3, #0]
10006a2c:	0010      	movs	r0, r2
10006a2e:	688b      	ldr	r3, [r1, #8]
10006a30:	4398      	bics	r0, r3
10006a32:	d1fb      	bne.n	10006a2c <rp2040_usb_init+0x10>
    memset(usb_hw, 0, sizeof(*usb_hw));
10006a34:	4c0b      	ldr	r4, [pc, #44]	; (10006a64 <rp2040_usb_init+0x48>)
10006a36:	229c      	movs	r2, #156	; 0x9c
10006a38:	2100      	movs	r1, #0
10006a3a:	0020      	movs	r0, r4
10006a3c:	f7fa fc2e 	bl	1000129c <__wrap_memset>
    memset(usb_dpram, 0, sizeof(*usb_dpram));
10006a40:	2280      	movs	r2, #128	; 0x80
10006a42:	2100      	movs	r1, #0
10006a44:	0152      	lsls	r2, r2, #5
10006a46:	4808      	ldr	r0, [pc, #32]	; (10006a68 <rp2040_usb_init+0x4c>)
10006a48:	f7fa fc28 	bl	1000129c <__wrap_memset>
    usb_hw->muxing    = USB_USB_MUXING_TO_PHY_BITS    | USB_USB_MUXING_SOFTCON_BITS;
10006a4c:	2309      	movs	r3, #9
10006a4e:	6763      	str	r3, [r4, #116]	; 0x74
    usb_hw->pwr       = USB_USB_PWR_VBUS_DETECT_BITS  | USB_USB_PWR_VBUS_DETECT_OVERRIDE_EN_BITS;
10006a50:	3303      	adds	r3, #3
10006a52:	67a3      	str	r3, [r4, #120]	; 0x78
}
10006a54:	bd10      	pop	{r4, pc}
10006a56:	46c0      	nop			; (mov r8, r8)
10006a58:	4000e000 	.word	0x4000e000
10006a5c:	4000f000 	.word	0x4000f000
10006a60:	4000c000 	.word	0x4000c000
10006a64:	50110000 	.word	0x50110000
10006a68:	50100000 	.word	0x50100000

10006a6c <hw_endpoint_reset_transfer>:
    ep->stalled = false;
10006a6c:	2300      	movs	r3, #0
    ep->sent_setup = false;
10006a6e:	2100      	movs	r1, #0
10006a70:	2232      	movs	r2, #50	; 0x32
    ep->stalled = false;
10006a72:	8283      	strh	r3, [r0, #20]
    ep->sent_setup = false;
10006a74:	5481      	strb	r1, [r0, r2]
    ep->total_len = 0;
10006a76:	6183      	str	r3, [r0, #24]
    ep->len = 0;
10006a78:	61c3      	str	r3, [r0, #28]
    ep->transfer_size = 0;
10006a7a:	6203      	str	r3, [r0, #32]
    ep->user_buf = 0;
10006a7c:	6283      	str	r3, [r0, #40]	; 0x28
}
10006a7e:	4770      	bx	lr

10006a80 <_hw_endpoint_buffer_control_update32>:
void _hw_endpoint_buffer_control_update32(struct hw_endpoint *ep, uint32_t and_mask, uint32_t or_mask) {
10006a80:	b510      	push	{r4, lr}
        value = *ep->buffer_control & and_mask;
10006a82:	68c3      	ldr	r3, [r0, #12]
    if (and_mask) {
10006a84:	2900      	cmp	r1, #0
10006a86:	d001      	beq.n	10006a8c <_hw_endpoint_buffer_control_update32+0xc>
        value = *ep->buffer_control & and_mask;
10006a88:	681c      	ldr	r4, [r3, #0]
10006a8a:	4021      	ands	r1, r4
    if (or_mask) {
10006a8c:	2a00      	cmp	r2, #0
10006a8e:	d011      	beq.n	10006ab4 <_hw_endpoint_buffer_control_update32+0x34>
        if (or_mask & USB_BUF_CTRL_AVAIL) {
10006a90:	2480      	movs	r4, #128	; 0x80
10006a92:	00e4      	lsls	r4, r4, #3
        value |= or_mask;
10006a94:	4311      	orrs	r1, r2
        if (or_mask & USB_BUF_CTRL_AVAIL) {
10006a96:	4222      	tst	r2, r4
10006a98:	d00c      	beq.n	10006ab4 <_hw_endpoint_buffer_control_update32+0x34>
            if (*ep->buffer_control & USB_BUF_CTRL_AVAIL) {
10006a9a:	681a      	ldr	r2, [r3, #0]
10006a9c:	4222      	tst	r2, r4
10006a9e:	d10b      	bne.n	10006ab8 <_hw_endpoint_buffer_control_update32+0x38>
            }
            *ep->buffer_control = value & ~USB_BUF_CTRL_AVAIL;
10006aa0:	4a07      	ldr	r2, [pc, #28]	; (10006ac0 <_hw_endpoint_buffer_control_update32+0x40>)
10006aa2:	400a      	ands	r2, r1
10006aa4:	601a      	str	r2, [r3, #0]
            // 12 cycle delay.. (should be good for 48*12Mhz = 576Mhz)
            // Don't need delay in host mode as host is in charge
#ifndef RP2040_USB_HOST_MODE
            __asm volatile (
10006aa6:	e7ff      	b.n	10006aa8 <_hw_endpoint_buffer_control_update32+0x28>
10006aa8:	e7ff      	b.n	10006aaa <_hw_endpoint_buffer_control_update32+0x2a>
10006aaa:	e7ff      	b.n	10006aac <_hw_endpoint_buffer_control_update32+0x2c>
10006aac:	e7ff      	b.n	10006aae <_hw_endpoint_buffer_control_update32+0x2e>
10006aae:	e7ff      	b.n	10006ab0 <_hw_endpoint_buffer_control_update32+0x30>
10006ab0:	e7ff      	b.n	10006ab2 <_hw_endpoint_buffer_control_update32+0x32>
                    "1:\n"
                    : : : "memory");
#endif
        }
    }
    *ep->buffer_control = value;
10006ab2:	68c3      	ldr	r3, [r0, #12]
10006ab4:	6019      	str	r1, [r3, #0]
}
10006ab6:	bd10      	pop	{r4, pc}
10006ab8:	7881      	ldrb	r1, [r0, #2]
10006aba:	7840      	ldrb	r0, [r0, #1]
10006abc:	f7ff ffa2 	bl	10006a04 <_hw_endpoint_buffer_control_update32.part.0.isra.0>
10006ac0:	fffffbff 	.word	0xfffffbff

10006ac4 <_hw_endpoint_xfer_continue>:
    }
}

// Returns true if transfer is complete
bool _hw_endpoint_xfer_continue(struct hw_endpoint *ep)
{
10006ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _hw_endpoint_lock_update(ep, 1);
    // Part way through a transfer
    if (!ep->active)
10006ac6:	7d46      	ldrb	r6, [r0, #21]
{
10006ac8:	0004      	movs	r4, r0
    if (!ep->active)
10006aca:	2e00      	cmp	r6, #0
10006acc:	d100      	bne.n	10006ad0 <_hw_endpoint_xfer_continue+0xc>
10006ace:	e067      	b.n	10006ba0 <_hw_endpoint_xfer_continue+0xdc>
    return *ep->buffer_control;
10006ad0:	68c3      	ldr	r3, [r0, #12]
    if (!ep->rx)
10006ad2:	78c0      	ldrb	r0, [r0, #3]
10006ad4:	681d      	ldr	r5, [r3, #0]
    uint transferred_bytes = buf_ctrl & USB_BUF_CTRL_LEN_MASK;
10006ad6:	05ad      	lsls	r5, r5, #22
10006ad8:	0dad      	lsrs	r5, r5, #22
    if (!ep->rx)
10006ada:	2800      	cmp	r0, #0
10006adc:	d143      	bne.n	10006b66 <_hw_endpoint_xfer_continue+0xa2>
        ep->len += transferred_bytes;
10006ade:	69e3      	ldr	r3, [r4, #28]
10006ae0:	18e9      	adds	r1, r5, r3
10006ae2:	61e1      	str	r1, [r4, #28]

    // Update EP struct from hardware state
    _hw_endpoint_xfer_sync(ep);

    // Now we have synced our state with the hardware. Is there more data to transfer?
    uint remaining_bytes = ep->total_len - ep->len;
10006ae4:	69a2      	ldr	r2, [r4, #24]
10006ae6:	1a55      	subs	r5, r2, r1
    ep->transfer_size = remaining_bytes > 64 ? 64 : remaining_bytes;
10006ae8:	2d40      	cmp	r5, #64	; 0x40
10006aea:	d82e      	bhi.n	10006b4a <_hw_endpoint_xfer_continue+0x86>
    ep->last_buf = ep->len + ep->transfer_size == ep->total_len;
10006aec:	186b      	adds	r3, r5, r1
10006aee:	1a9b      	subs	r3, r3, r2
10006af0:	425f      	negs	r7, r3
10006af2:	417b      	adcs	r3, r7
10006af4:	2724      	movs	r7, #36	; 0x24
10006af6:	b2db      	uxtb	r3, r3
    ep->transfer_size = remaining_bytes > 64 ? 64 : remaining_bytes;
10006af8:	6225      	str	r5, [r4, #32]
    ep->last_buf = ep->len + ep->transfer_size == ep->total_len;
10006afa:	55e3      	strb	r3, [r4, r7]
    _hw_endpoint_update_last_buf(ep);

    // Can happen because of programmer error so check for it
    if (ep->len > ep->total_len)
10006afc:	428a      	cmp	r2, r1
10006afe:	d34c      	bcc.n	10006b9a <_hw_endpoint_xfer_continue+0xd6>
    {
        panic("Transferred more data than expected");
    }

    // If we are done then notify tinyusb
    if (ep->len == ep->total_len)
10006b00:	d049      	beq.n	10006b96 <_hw_endpoint_xfer_continue+0xd2>
    if (!ep->rx)
10006b02:	2800      	cmp	r0, #0
10006b04:	d023      	beq.n	10006b4e <_hw_endpoint_xfer_continue+0x8a>
    uint32_t val = ep->transfer_size | USB_BUF_CTRL_AVAIL;
10006b06:	2280      	movs	r2, #128	; 0x80
10006b08:	00d2      	lsls	r2, r2, #3
10006b0a:	432a      	orrs	r2, r5
    val |= ep->next_pid ? USB_BUF_CTRL_DATA1_PID : USB_BUF_CTRL_DATA0_PID;
10006b0c:	7961      	ldrb	r1, [r4, #5]
10006b0e:	2900      	cmp	r1, #0
10006b10:	d002      	beq.n	10006b18 <_hw_endpoint_xfer_continue+0x54>
10006b12:	2080      	movs	r0, #128	; 0x80
10006b14:	0180      	lsls	r0, r0, #6
10006b16:	4302      	orrs	r2, r0
    ep->next_pid ^= 1u;
10006b18:	2001      	movs	r0, #1
10006b1a:	4041      	eors	r1, r0
10006b1c:	7161      	strb	r1, [r4, #5]
    if (ep->last_buf)
10006b1e:	2b00      	cmp	r3, #0
10006b20:	d002      	beq.n	10006b28 <_hw_endpoint_xfer_continue+0x64>
        val |= USB_BUF_CTRL_LAST;
10006b22:	2380      	movs	r3, #128	; 0x80
10006b24:	01db      	lsls	r3, r3, #7
10006b26:	431a      	orrs	r2, r3
            if (*ep->buffer_control & USB_BUF_CTRL_AVAIL) {
10006b28:	68e1      	ldr	r1, [r4, #12]
10006b2a:	680b      	ldr	r3, [r1, #0]
10006b2c:	055b      	lsls	r3, r3, #21
10006b2e:	d43c      	bmi.n	10006baa <_hw_endpoint_xfer_continue+0xe6>
            *ep->buffer_control = value & ~USB_BUF_CTRL_AVAIL;
10006b30:	4b20      	ldr	r3, [pc, #128]	; (10006bb4 <_hw_endpoint_xfer_continue+0xf0>)
10006b32:	4013      	ands	r3, r2
10006b34:	600b      	str	r3, [r1, #0]
            __asm volatile (
10006b36:	e7ff      	b.n	10006b38 <_hw_endpoint_xfer_continue+0x74>
10006b38:	e7ff      	b.n	10006b3a <_hw_endpoint_xfer_continue+0x76>
10006b3a:	e7ff      	b.n	10006b3c <_hw_endpoint_xfer_continue+0x78>
10006b3c:	e7ff      	b.n	10006b3e <_hw_endpoint_xfer_continue+0x7a>
10006b3e:	e7ff      	b.n	10006b40 <_hw_endpoint_xfer_continue+0x7c>
10006b40:	e7ff      	b.n	10006b42 <_hw_endpoint_xfer_continue+0x7e>
        _hw_endpoint_start_next_buffer(ep);
    }

    _hw_endpoint_lock_update(ep, -1);
    // More work to do
    return false;
10006b42:	2000      	movs	r0, #0
    *ep->buffer_control = value;
10006b44:	68e3      	ldr	r3, [r4, #12]
10006b46:	601a      	str	r2, [r3, #0]
}
10006b48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ep->transfer_size = remaining_bytes > 64 ? 64 : remaining_bytes;
10006b4a:	2540      	movs	r5, #64	; 0x40
10006b4c:	e7ce      	b.n	10006aec <_hw_endpoint_xfer_continue+0x28>
        memcpy(ep->hw_data_buf, &ep->user_buf[ep->len], ep->transfer_size);
10006b4e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
10006b50:	002a      	movs	r2, r5
10006b52:	469c      	mov	ip, r3
10006b54:	6920      	ldr	r0, [r4, #16]
10006b56:	4461      	add	r1, ip
10006b58:	f7fa fba6 	bl	100012a8 <__wrap___aeabi_memcpy>
        val |= USB_BUF_CTRL_FULL;
10006b5c:	2284      	movs	r2, #132	; 0x84
10006b5e:	0212      	lsls	r2, r2, #8
    if (ep->last_buf)
10006b60:	5de3      	ldrb	r3, [r4, r7]
        val |= USB_BUF_CTRL_FULL;
10006b62:	432a      	orrs	r2, r5
10006b64:	e7d2      	b.n	10006b0c <_hw_endpoint_xfer_continue+0x48>
        memcpy(&ep->user_buf[ep->len], ep->hw_data_buf, transferred_bytes);
10006b66:	69e3      	ldr	r3, [r4, #28]
10006b68:	6aa0      	ldr	r0, [r4, #40]	; 0x28
10006b6a:	469c      	mov	ip, r3
10006b6c:	6921      	ldr	r1, [r4, #16]
10006b6e:	002a      	movs	r2, r5
10006b70:	4460      	add	r0, ip
10006b72:	f7fa fb99 	bl	100012a8 <__wrap___aeabi_memcpy>
        ep->len += transferred_bytes;
10006b76:	69e3      	ldr	r3, [r4, #28]
    if ((ep->rx) && (transferred_bytes < ep->transfer_size))
10006b78:	78e0      	ldrb	r0, [r4, #3]
        ep->len += transferred_bytes;
10006b7a:	18e9      	adds	r1, r5, r3
10006b7c:	61e1      	str	r1, [r4, #28]
    if ((ep->rx) && (transferred_bytes < ep->transfer_size))
10006b7e:	2800      	cmp	r0, #0
10006b80:	d0b0      	beq.n	10006ae4 <_hw_endpoint_xfer_continue+0x20>
10006b82:	6a23      	ldr	r3, [r4, #32]
10006b84:	429d      	cmp	r5, r3
10006b86:	d2ad      	bcs.n	10006ae4 <_hw_endpoint_xfer_continue+0x20>
    ep->transfer_size = remaining_bytes > 64 ? 64 : remaining_bytes;
10006b88:	2300      	movs	r3, #0
    ep->last_buf = ep->len + ep->transfer_size == ep->total_len;
10006b8a:	2201      	movs	r2, #1
    ep->transfer_size = remaining_bytes > 64 ? 64 : remaining_bytes;
10006b8c:	6223      	str	r3, [r4, #32]
    ep->last_buf = ep->len + ep->transfer_size == ep->total_len;
10006b8e:	3324      	adds	r3, #36	; 0x24
        ep->total_len = ep->len;
10006b90:	61a1      	str	r1, [r4, #24]
    ep->last_buf = ep->len + ep->transfer_size == ep->total_len;
10006b92:	54e2      	strb	r2, [r4, r3]
    if (ep->len > ep->total_len)
10006b94:	e7d8      	b.n	10006b48 <_hw_endpoint_xfer_continue+0x84>
        return true;
10006b96:	0030      	movs	r0, r6
10006b98:	e7d6      	b.n	10006b48 <_hw_endpoint_xfer_continue+0x84>
        panic("Transferred more data than expected");
10006b9a:	4807      	ldr	r0, [pc, #28]	; (10006bb8 <_hw_endpoint_xfer_continue+0xf4>)
10006b9c:	f7fd f80a 	bl	10003bb4 <panic>
        panic("Can't continue xfer on inactive ep %d %s", ep->num, ep_dir_string);
10006ba0:	7881      	ldrb	r1, [r0, #2]
10006ba2:	4a06      	ldr	r2, [pc, #24]	; (10006bbc <_hw_endpoint_xfer_continue+0xf8>)
10006ba4:	4806      	ldr	r0, [pc, #24]	; (10006bc0 <_hw_endpoint_xfer_continue+0xfc>)
10006ba6:	f7fd f805 	bl	10003bb4 <panic>
10006baa:	78a1      	ldrb	r1, [r4, #2]
10006bac:	7860      	ldrb	r0, [r4, #1]
10006bae:	f7ff ff29 	bl	10006a04 <_hw_endpoint_buffer_control_update32.part.0.isra.0>
10006bb2:	46c0      	nop			; (mov r8, r8)
10006bb4:	fffffbff 	.word	0xfffffbff
10006bb8:	10009ca4 	.word	0x10009ca4
10006bbc:	200021c0 	.word	0x200021c0
10006bc0:	10009c78 	.word	0x10009c78

10006bc4 <_hw_endpoint_xfer>:

void _hw_endpoint_xfer(struct hw_endpoint *ep, uint8_t *buffer, uint16_t total_len, bool start)
{
10006bc4:	b570      	push	{r4, r5, r6, lr}
10006bc6:	0004      	movs	r4, r0
    pico_trace(" total_len %d, start=%d\n", total_len, start);

    assert(ep->configured);


    if (start)
10006bc8:	2b00      	cmp	r3, #0
10006bca:	d049      	beq.n	10006c60 <_hw_endpoint_xfer+0x9c>
    if (ep->active)
10006bcc:	7d43      	ldrb	r3, [r0, #21]
10006bce:	2b00      	cmp	r3, #0
10006bd0:	d003      	beq.n	10006bda <_hw_endpoint_xfer+0x16>
    ep->stalled = false;
10006bd2:	2300      	movs	r3, #0
10006bd4:	7503      	strb	r3, [r0, #20]
    ep->sent_setup = false;
10006bd6:	2032      	movs	r0, #50	; 0x32
10006bd8:	5423      	strb	r3, [r4, r0]
    ep->len = 0;
10006bda:	2300      	movs	r3, #0
    ep->total_len = total_len;
10006bdc:	61a2      	str	r2, [r4, #24]
    ep->len = 0;
10006bde:	61e3      	str	r3, [r4, #28]
    ep->transfer_size = total_len > 64 ? 64 : total_len;
10006be0:	1c15      	adds	r5, r2, #0
10006be2:	2a40      	cmp	r2, #64	; 0x40
10006be4:	d831      	bhi.n	10006c4a <_hw_endpoint_xfer+0x86>
    ep->active = true;
10006be6:	2301      	movs	r3, #1
    ep->transfer_size = total_len > 64 ? 64 : total_len;
10006be8:	b2ad      	uxth	r5, r5
    ep->last_buf = ep->len + ep->transfer_size == ep->total_len;
10006bea:	1b52      	subs	r2, r2, r5
    ep->active = true;
10006bec:	7563      	strb	r3, [r4, #21]
    ep->last_buf = ep->len + ep->transfer_size == ep->total_len;
10006bee:	4253      	negs	r3, r2
10006bf0:	415a      	adcs	r2, r3
10006bf2:	2624      	movs	r6, #36	; 0x24
    ep->buf_sel = 0;
10006bf4:	2325      	movs	r3, #37	; 0x25
10006bf6:	2000      	movs	r0, #0
    ep->last_buf = ep->len + ep->transfer_size == ep->total_len;
10006bf8:	b2d2      	uxtb	r2, r2
    ep->transfer_size = total_len > 64 ? 64 : total_len;
10006bfa:	6225      	str	r5, [r4, #32]
    ep->user_buf = buffer;
10006bfc:	62a1      	str	r1, [r4, #40]	; 0x28
    ep->last_buf = ep->len + ep->transfer_size == ep->total_len;
10006bfe:	55a2      	strb	r2, [r4, r6]
    ep->buf_sel = 0;
10006c00:	54e0      	strb	r0, [r4, r3]
    if (!ep->rx)
10006c02:	78e3      	ldrb	r3, [r4, #3]
10006c04:	2b00      	cmp	r3, #0
10006c06:	d022      	beq.n	10006c4e <_hw_endpoint_xfer+0x8a>
    uint32_t val = ep->transfer_size | USB_BUF_CTRL_AVAIL;
10006c08:	2380      	movs	r3, #128	; 0x80
10006c0a:	00db      	lsls	r3, r3, #3
10006c0c:	432b      	orrs	r3, r5
    val |= ep->next_pid ? USB_BUF_CTRL_DATA1_PID : USB_BUF_CTRL_DATA0_PID;
10006c0e:	7961      	ldrb	r1, [r4, #5]
10006c10:	2900      	cmp	r1, #0
10006c12:	d002      	beq.n	10006c1a <_hw_endpoint_xfer+0x56>
10006c14:	2080      	movs	r0, #128	; 0x80
10006c16:	0180      	lsls	r0, r0, #6
10006c18:	4303      	orrs	r3, r0
    ep->next_pid ^= 1u;
10006c1a:	2001      	movs	r0, #1
10006c1c:	4041      	eors	r1, r0
10006c1e:	7161      	strb	r1, [r4, #5]
    if (ep->last_buf)
10006c20:	2a00      	cmp	r2, #0
10006c22:	d002      	beq.n	10006c2a <_hw_endpoint_xfer+0x66>
        val |= USB_BUF_CTRL_LAST;
10006c24:	2280      	movs	r2, #128	; 0x80
10006c26:	01d2      	lsls	r2, r2, #7
10006c28:	4313      	orrs	r3, r2
            if (*ep->buffer_control & USB_BUF_CTRL_AVAIL) {
10006c2a:	68e1      	ldr	r1, [r4, #12]
10006c2c:	680a      	ldr	r2, [r1, #0]
10006c2e:	0552      	lsls	r2, r2, #21
10006c30:	d419      	bmi.n	10006c66 <_hw_endpoint_xfer+0xa2>
            *ep->buffer_control = value & ~USB_BUF_CTRL_AVAIL;
10006c32:	4a0f      	ldr	r2, [pc, #60]	; (10006c70 <_hw_endpoint_xfer+0xac>)
10006c34:	401a      	ands	r2, r3
10006c36:	600a      	str	r2, [r1, #0]
            __asm volatile (
10006c38:	e7ff      	b.n	10006c3a <_hw_endpoint_xfer+0x76>
10006c3a:	e7ff      	b.n	10006c3c <_hw_endpoint_xfer+0x78>
10006c3c:	e7ff      	b.n	10006c3e <_hw_endpoint_xfer+0x7a>
10006c3e:	e7ff      	b.n	10006c40 <_hw_endpoint_xfer+0x7c>
10006c40:	e7ff      	b.n	10006c42 <_hw_endpoint_xfer+0x7e>
10006c42:	e7ff      	b.n	10006c44 <_hw_endpoint_xfer+0x80>
    *ep->buffer_control = value;
10006c44:	68e2      	ldr	r2, [r4, #12]
10006c46:	6013      	str	r3, [r2, #0]
    }
    else
    {
        _hw_endpoint_xfer_continue(ep);
    }
}
10006c48:	bd70      	pop	{r4, r5, r6, pc}
    ep->transfer_size = total_len > 64 ? 64 : total_len;
10006c4a:	2540      	movs	r5, #64	; 0x40
10006c4c:	e7cb      	b.n	10006be6 <_hw_endpoint_xfer+0x22>
        memcpy(ep->hw_data_buf, &ep->user_buf[ep->len], ep->transfer_size);
10006c4e:	002a      	movs	r2, r5
10006c50:	6920      	ldr	r0, [r4, #16]
10006c52:	f7fa fb29 	bl	100012a8 <__wrap___aeabi_memcpy>
        val |= USB_BUF_CTRL_FULL;
10006c56:	2384      	movs	r3, #132	; 0x84
10006c58:	021b      	lsls	r3, r3, #8
    if (ep->last_buf)
10006c5a:	5da2      	ldrb	r2, [r4, r6]
        val |= USB_BUF_CTRL_FULL;
10006c5c:	432b      	orrs	r3, r5
10006c5e:	e7d6      	b.n	10006c0e <_hw_endpoint_xfer+0x4a>
        _hw_endpoint_xfer_continue(ep);
10006c60:	f7ff ff30 	bl	10006ac4 <_hw_endpoint_xfer_continue>
}
10006c64:	e7f0      	b.n	10006c48 <_hw_endpoint_xfer+0x84>
10006c66:	78a1      	ldrb	r1, [r4, #2]
10006c68:	7860      	ldrb	r0, [r4, #1]
10006c6a:	f7ff fecb 	bl	10006a04 <_hw_endpoint_buffer_control_update32.part.0.isra.0>
10006c6e:	46c0      	nop			; (mov r8, r8)
10006c70:	fffffbff 	.word	0xfffffbff

10006c74 <tusb_init>:
#if TUSB_OPT_DEVICE_ENABLED
#include "device/usbd_pvt.h"
#endif

bool tusb_init(void)
{
10006c74:	b570      	push	{r4, r5, r6, lr}
  // skip if already initialized
  if (_initialized) return true;
10006c76:	4d06      	ldr	r5, [pc, #24]	; (10006c90 <tusb_init+0x1c>)
10006c78:	782c      	ldrb	r4, [r5, #0]
10006c7a:	2c00      	cmp	r4, #0
10006c7c:	d001      	beq.n	10006c82 <tusb_init+0xe>
#endif

  _initialized = true;

  return TUSB_ERROR_NONE;
}
10006c7e:	0020      	movs	r0, r4
10006c80:	bd70      	pop	{r4, r5, r6, pc}
  TU_ASSERT ( tud_init() ); // init device stack
10006c82:	f7fe fda1 	bl	100057c8 <tud_init>
10006c86:	2800      	cmp	r0, #0
10006c88:	d0f9      	beq.n	10006c7e <tusb_init+0xa>
  _initialized = true;
10006c8a:	2301      	movs	r3, #1
10006c8c:	702b      	strb	r3, [r5, #0]
  return TUSB_ERROR_NONE;
10006c8e:	e7f6      	b.n	10006c7e <tusb_init+0xa>
10006c90:	20039bb8 	.word	0x20039bb8

10006c94 <tusb_inited>:

bool tusb_inited(void)
{
  return _initialized;
10006c94:	4b01      	ldr	r3, [pc, #4]	; (10006c9c <tusb_inited+0x8>)
10006c96:	7818      	ldrb	r0, [r3, #0]
}
10006c98:	4770      	bx	lr
10006c9a:	46c0      	nop			; (mov r8, r8)
10006c9c:	20039bb8 	.word	0x20039bb8

10006ca0 <_Z11MandelCore1v>:
}
*/

// render using Core1
void MandelCore1()
{
10006ca0:	b5f0      	push	{r4, r5, r6, r7, lr}
10006ca2:	46de      	mov	lr, fp
10006ca4:	4657      	mov	r7, sl
10006ca6:	464e      	mov	r6, r9
10006ca8:	4645      	mov	r5, r8
10006caa:	b5e0      	push	{r5, r6, r7, lr}
	if (Arithm == USE_INT)
10006cac:	4b8c      	ldr	r3, [pc, #560]	; (10006ee0 <_Z11MandelCore1v+0x240>)
{
10006cae:	b08d      	sub	sp, #52	; 0x34
	if (Arithm == USE_INT)
10006cb0:	681b      	ldr	r3, [r3, #0]
10006cb2:	2b00      	cmp	r3, #0
10006cb4:	d100      	bne.n	10006cb8 <_Z11MandelCore1v+0x18>
10006cb6:	e0fc      	b.n	10006eb2 <_Z11MandelCore1v+0x212>
		MandelFixed(Core1Dst, DlbToFixed(Core1Cid));
	else if (Arithm == USE_FLT)
10006cb8:	2b01      	cmp	r3, #1
10006cba:	d100      	bne.n	10006cbe <_Z11MandelCore1v+0x1e>
10006cbc:	e087      	b.n	10006dce <_Z11MandelCore1v+0x12e>
		MandelFloat(Core1Dst, (float)Core1Cid);
	else
		MandelDouble(Core1Dst, Core1Cid);
10006cbe:	4b89      	ldr	r3, [pc, #548]	; (10006ee4 <_Z11MandelCore1v+0x244>)
10006cc0:	681b      	ldr	r3, [r3, #0]
10006cc2:	4699      	mov	r9, r3
10006cc4:	4b88      	ldr	r3, [pc, #544]	; (10006ee8 <_Z11MandelCore1v+0x248>)
10006cc6:	685c      	ldr	r4, [r3, #4]
10006cc8:	681b      	ldr	r3, [r3, #0]
10006cca:	9306      	str	r3, [sp, #24]
10006ccc:	9407      	str	r4, [sp, #28]
	int steps = Steps;
10006cce:	4b87      	ldr	r3, [pc, #540]	; (10006eec <_Z11MandelCore1v+0x24c>)
10006cd0:	681b      	ldr	r3, [r3, #0]
10006cd2:	469a      	mov	sl, r3
	int w = Width;
10006cd4:	4b86      	ldr	r3, [pc, #536]	; (10006ef0 <_Z11MandelCore1v+0x250>)
10006cd6:	681c      	ldr	r4, [r3, #0]
	int s = Shift;
10006cd8:	4b86      	ldr	r3, [pc, #536]	; (10006ef4 <_Z11MandelCore1v+0x254>)
10006cda:	681b      	ldr	r3, [r3, #0]
10006cdc:	930b      	str	r3, [sp, #44]	; 0x2c
	sx = SXd;
10006cde:	4b86      	ldr	r3, [pc, #536]	; (10006ef8 <_Z11MandelCore1v+0x258>)
10006ce0:	681a      	ldr	r2, [r3, #0]
10006ce2:	685b      	ldr	r3, [r3, #4]
10006ce4:	9208      	str	r2, [sp, #32]
10006ce6:	9309      	str	r3, [sp, #36]	; 0x24
	cr = X0f;
10006ce8:	4b84      	ldr	r3, [pc, #528]	; (10006efc <_Z11MandelCore1v+0x25c>)
10006cea:	6818      	ldr	r0, [r3, #0]
10006cec:	f7fa fa8a 	bl	10001204 <__wrap___aeabi_f2d>
10006cf0:	9004      	str	r0, [sp, #16]
10006cf2:	9105      	str	r1, [sp, #20]
	for (x = 0; x < w; x++)
10006cf4:	2c00      	cmp	r4, #0
10006cf6:	dd63      	ble.n	10006dc0 <_Z11MandelCore1v+0x120>
10006cf8:	444c      	add	r4, r9
10006cfa:	46a3      	mov	fp, r4
		for (i = steps; i > 0; i--)
10006cfc:	4653      	mov	r3, sl
10006cfe:	2b00      	cmp	r3, #0
10006d00:	dc00      	bgt.n	10006d04 <_Z11MandelCore1v+0x64>
10006d02:	e0e6      	b.n	10006ed2 <_Z11MandelCore1v+0x232>
		zi = ci;
10006d04:	9e06      	ldr	r6, [sp, #24]
10006d06:	9f07      	ldr	r7, [sp, #28]
		for (i = steps; i > 0; i--)
10006d08:	9c04      	ldr	r4, [sp, #16]
10006d0a:	9d05      	ldr	r5, [sp, #20]
10006d0c:	46d0      	mov	r8, sl
10006d0e:	e025      	b.n	10006d5c <_Z11MandelCore1v+0xbc>
			zi = 2*zr*zi + ci;
10006d10:	0022      	movs	r2, r4
10006d12:	002b      	movs	r3, r5
10006d14:	0020      	movs	r0, r4
10006d16:	0029      	movs	r1, r5
10006d18:	f7f9 fd92 	bl	10000840 <__wrap___aeabi_dadd>
10006d1c:	0032      	movs	r2, r6
10006d1e:	003b      	movs	r3, r7
10006d20:	f7f9 fda0 	bl	10000864 <__wrap___aeabi_dmul>
10006d24:	0002      	movs	r2, r0
10006d26:	000b      	movs	r3, r1
10006d28:	9806      	ldr	r0, [sp, #24]
10006d2a:	9907      	ldr	r1, [sp, #28]
10006d2c:	f7f9 fd88 	bl	10000840 <__wrap___aeabi_dadd>
			zr = zr2 - zi2 + cr;
10006d30:	9a02      	ldr	r2, [sp, #8]
10006d32:	9b03      	ldr	r3, [sp, #12]
			zi = 2*zr*zi + ci;
10006d34:	0006      	movs	r6, r0
10006d36:	000f      	movs	r7, r1
			zr = zr2 - zi2 + cr;
10006d38:	9800      	ldr	r0, [sp, #0]
10006d3a:	9901      	ldr	r1, [sp, #4]
10006d3c:	f7f9 fd77 	bl	1000082e <__wrap___aeabi_dsub>
10006d40:	9a04      	ldr	r2, [sp, #16]
10006d42:	9b05      	ldr	r3, [sp, #20]
10006d44:	f7f9 fd7c 	bl	10000840 <__wrap___aeabi_dadd>
		for (i = steps; i > 0; i--)
10006d48:	2301      	movs	r3, #1
10006d4a:	425b      	negs	r3, r3
10006d4c:	469c      	mov	ip, r3
10006d4e:	44e0      	add	r8, ip
10006d50:	4643      	mov	r3, r8
			zr = zr2 - zi2 + cr;
10006d52:	0004      	movs	r4, r0
10006d54:	000d      	movs	r5, r1
		for (i = steps; i > 0; i--)
10006d56:	2b00      	cmp	r3, #0
10006d58:	d100      	bne.n	10006d5c <_Z11MandelCore1v+0xbc>
10006d5a:	e0a6      	b.n	10006eaa <_Z11MandelCore1v+0x20a>
			zr2 = zr*zr;
10006d5c:	0022      	movs	r2, r4
10006d5e:	002b      	movs	r3, r5
10006d60:	0020      	movs	r0, r4
10006d62:	0029      	movs	r1, r5
10006d64:	f7f9 fd7e 	bl	10000864 <__wrap___aeabi_dmul>
			zi2 = zi*zi;
10006d68:	0032      	movs	r2, r6
			zr2 = zr*zr;
10006d6a:	9000      	str	r0, [sp, #0]
10006d6c:	9101      	str	r1, [sp, #4]
			zi2 = zi*zi;
10006d6e:	003b      	movs	r3, r7
10006d70:	0030      	movs	r0, r6
10006d72:	0039      	movs	r1, r7
10006d74:	f7f9 fd76 	bl	10000864 <__wrap___aeabi_dmul>
10006d78:	0002      	movs	r2, r0
10006d7a:	000b      	movs	r3, r1
			if (zr2 + zi2 > 4.0) break;
10006d7c:	9800      	ldr	r0, [sp, #0]
10006d7e:	9901      	ldr	r1, [sp, #4]
10006d80:	9202      	str	r2, [sp, #8]
10006d82:	9303      	str	r3, [sp, #12]
10006d84:	f7f9 fd5c 	bl	10000840 <__wrap___aeabi_dadd>
10006d88:	2200      	movs	r2, #0
10006d8a:	4b5d      	ldr	r3, [pc, #372]	; (10006f00 <_Z11MandelCore1v+0x260>)
10006d8c:	f7f9 fdc2 	bl	10000914 <__wrap___aeabi_dcmpgt>
10006d90:	2800      	cmp	r0, #0
10006d92:	d0bd      	beq.n	10006d10 <_Z11MandelCore1v+0x70>
			*dst = g[(steps - i) >> s];
10006d94:	4642      	mov	r2, r8
10006d96:	4653      	mov	r3, sl
10006d98:	1a9b      	subs	r3, r3, r2
10006d9a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
10006d9c:	4113      	asrs	r3, r2
10006d9e:	4a59      	ldr	r2, [pc, #356]	; (10006f04 <_Z11MandelCore1v+0x264>)
10006da0:	5cd3      	ldrb	r3, [r2, r3]
10006da2:	464a      	mov	r2, r9
		cr += sx;
10006da4:	9804      	ldr	r0, [sp, #16]
10006da6:	9905      	ldr	r1, [sp, #20]
10006da8:	7013      	strb	r3, [r2, #0]
		dst++;
10006daa:	2301      	movs	r3, #1
10006dac:	469c      	mov	ip, r3
		cr += sx;
10006dae:	9a08      	ldr	r2, [sp, #32]
10006db0:	9b09      	ldr	r3, [sp, #36]	; 0x24
		dst++;
10006db2:	44e1      	add	r9, ip
		cr += sx;
10006db4:	f7f9 fd44 	bl	10000840 <__wrap___aeabi_dadd>
10006db8:	9004      	str	r0, [sp, #16]
10006dba:	9105      	str	r1, [sp, #20]
	for (x = 0; x < w; x++)
10006dbc:	45d9      	cmp	r9, fp
10006dbe:	d19d      	bne.n	10006cfc <_Z11MandelCore1v+0x5c>
}
10006dc0:	b00d      	add	sp, #52	; 0x34
10006dc2:	bcf0      	pop	{r4, r5, r6, r7}
10006dc4:	46bb      	mov	fp, r7
10006dc6:	46b2      	mov	sl, r6
10006dc8:	46a9      	mov	r9, r5
10006dca:	46a0      	mov	r8, r4
10006dcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		MandelFloat(Core1Dst, (float)Core1Cid);
10006dce:	4b45      	ldr	r3, [pc, #276]	; (10006ee4 <_Z11MandelCore1v+0x244>)
10006dd0:	681b      	ldr	r3, [r3, #0]
10006dd2:	469b      	mov	fp, r3
10006dd4:	4b44      	ldr	r3, [pc, #272]	; (10006ee8 <_Z11MandelCore1v+0x248>)
10006dd6:	6818      	ldr	r0, [r3, #0]
10006dd8:	6859      	ldr	r1, [r3, #4]
10006dda:	f7f9 fe07 	bl	100009ec <__wrap___aeabi_d2f>
	int s = Shift;
10006dde:	4a45      	ldr	r2, [pc, #276]	; (10006ef4 <_Z11MandelCore1v+0x254>)
	int steps = Steps;
10006de0:	4b42      	ldr	r3, [pc, #264]	; (10006eec <_Z11MandelCore1v+0x24c>)
	int s = Shift;
10006de2:	6812      	ldr	r2, [r2, #0]
	int steps = Steps;
10006de4:	681b      	ldr	r3, [r3, #0]
	int s = Shift;
10006de6:	9206      	str	r2, [sp, #24]
	sx = SXf;
10006de8:	4a47      	ldr	r2, [pc, #284]	; (10006f08 <_Z11MandelCore1v+0x268>)
	int steps = Steps;
10006dea:	9300      	str	r3, [sp, #0]
	sx = SXf;
10006dec:	6812      	ldr	r2, [r2, #0]
	int w = Width;
10006dee:	4b40      	ldr	r3, [pc, #256]	; (10006ef0 <_Z11MandelCore1v+0x250>)
	sx = SXf;
10006df0:	9202      	str	r2, [sp, #8]
	cr = X0f;
10006df2:	4a42      	ldr	r2, [pc, #264]	; (10006efc <_Z11MandelCore1v+0x25c>)
	int w = Width;
10006df4:	681b      	ldr	r3, [r3, #0]
	cr = X0f;
10006df6:	6812      	ldr	r2, [r2, #0]
		MandelFloat(Core1Dst, (float)Core1Cid);
10006df8:	4682      	mov	sl, r0
	cr = X0f;
10006dfa:	4691      	mov	r9, r2
	for (x = 0; x < w; x++)
10006dfc:	2b00      	cmp	r3, #0
10006dfe:	dddf      	ble.n	10006dc0 <_Z11MandelCore1v+0x120>
		for (i = steps; i > 0; i--)
10006e00:	445b      	add	r3, fp
10006e02:	9304      	str	r3, [sp, #16]
10006e04:	9b00      	ldr	r3, [sp, #0]
10006e06:	2b00      	cmp	r3, #0
10006e08:	dd49      	ble.n	10006e9e <_Z11MandelCore1v+0x1fe>
		zi = ci;
10006e0a:	4655      	mov	r5, sl
		for (i = steps; i > 0; i--)
10006e0c:	464c      	mov	r4, r9
10006e0e:	4698      	mov	r8, r3
10006e10:	e01a      	b.n	10006e48 <_Z11MandelCore1v+0x1a8>
			zi = 2*zr*zi + ci;
10006e12:	1c21      	adds	r1, r4, #0
10006e14:	1c20      	adds	r0, r4, #0
10006e16:	f7fa f95d 	bl	100010d4 <__wrap___aeabi_fadd>
10006e1a:	1c29      	adds	r1, r5, #0
10006e1c:	f7fa f960 	bl	100010e0 <__wrap___aeabi_fmul>
10006e20:	1c01      	adds	r1, r0, #0
10006e22:	4650      	mov	r0, sl
10006e24:	f7fa f956 	bl	100010d4 <__wrap___aeabi_fadd>
			zr = zr2 - zi2 + cr;
10006e28:	1c39      	adds	r1, r7, #0
			zi = 2*zr*zi + ci;
10006e2a:	1c05      	adds	r5, r0, #0
			zr = zr2 - zi2 + cr;
10006e2c:	1c30      	adds	r0, r6, #0
10006e2e:	f7fa f94e 	bl	100010ce <__wrap___aeabi_fsub>
10006e32:	4649      	mov	r1, r9
10006e34:	f7fa f94e 	bl	100010d4 <__wrap___aeabi_fadd>
		for (i = steps; i > 0; i--)
10006e38:	2301      	movs	r3, #1
10006e3a:	425b      	negs	r3, r3
10006e3c:	469c      	mov	ip, r3
10006e3e:	44e0      	add	r8, ip
10006e40:	4643      	mov	r3, r8
			zr = zr2 - zi2 + cr;
10006e42:	1c04      	adds	r4, r0, #0
		for (i = steps; i > 0; i--)
10006e44:	2b00      	cmp	r3, #0
10006e46:	d032      	beq.n	10006eae <_Z11MandelCore1v+0x20e>
			zr2 = zr*zr;
10006e48:	1c21      	adds	r1, r4, #0
10006e4a:	1c20      	adds	r0, r4, #0
10006e4c:	f7fa f948 	bl	100010e0 <__wrap___aeabi_fmul>
			zi2 = zi*zi;
10006e50:	1c29      	adds	r1, r5, #0
			zr2 = zr*zr;
10006e52:	1c06      	adds	r6, r0, #0
			zi2 = zi*zi;
10006e54:	1c28      	adds	r0, r5, #0
10006e56:	f7fa f943 	bl	100010e0 <__wrap___aeabi_fmul>
			if (zr2 + zi2 > 4.0f) break;
10006e5a:	1c01      	adds	r1, r0, #0
			zi2 = zi*zi;
10006e5c:	1c07      	adds	r7, r0, #0
			if (zr2 + zi2 > 4.0f) break;
10006e5e:	1c30      	adds	r0, r6, #0
10006e60:	f7fa f938 	bl	100010d4 <__wrap___aeabi_fadd>
10006e64:	2181      	movs	r1, #129	; 0x81
10006e66:	05c9      	lsls	r1, r1, #23
10006e68:	f7fa f968 	bl	1000113c <__wrap___aeabi_fcmpgt>
10006e6c:	2800      	cmp	r0, #0
10006e6e:	d0d0      	beq.n	10006e12 <_Z11MandelCore1v+0x172>
			*dst = g[(steps - i) >> s];
10006e70:	4642      	mov	r2, r8
10006e72:	9b00      	ldr	r3, [sp, #0]
10006e74:	1a9b      	subs	r3, r3, r2
10006e76:	9a06      	ldr	r2, [sp, #24]
10006e78:	4113      	asrs	r3, r2
10006e7a:	4a22      	ldr	r2, [pc, #136]	; (10006f04 <_Z11MandelCore1v+0x264>)
10006e7c:	5cd3      	ldrb	r3, [r2, r3]
10006e7e:	465a      	mov	r2, fp
10006e80:	7013      	strb	r3, [r2, #0]
		dst++;
10006e82:	2301      	movs	r3, #1
10006e84:	469c      	mov	ip, r3
		cr += sx;
10006e86:	4648      	mov	r0, r9
10006e88:	9902      	ldr	r1, [sp, #8]
		dst++;
10006e8a:	44e3      	add	fp, ip
		cr += sx;
10006e8c:	f7fa f922 	bl	100010d4 <__wrap___aeabi_fadd>
	for (x = 0; x < w; x++)
10006e90:	9b04      	ldr	r3, [sp, #16]
		cr += sx;
10006e92:	4681      	mov	r9, r0
	for (x = 0; x < w; x++)
10006e94:	459b      	cmp	fp, r3
10006e96:	d093      	beq.n	10006dc0 <_Z11MandelCore1v+0x120>
		for (i = steps; i > 0; i--)
10006e98:	9b00      	ldr	r3, [sp, #0]
10006e9a:	2b00      	cmp	r3, #0
10006e9c:	dcb5      	bgt.n	10006e0a <_Z11MandelCore1v+0x16a>
10006e9e:	001a      	movs	r2, r3
			*dst = 0;
10006ea0:	2300      	movs	r3, #0
		if (i == 0)
10006ea2:	2a00      	cmp	r2, #0
10006ea4:	d0eb      	beq.n	10006e7e <_Z11MandelCore1v+0x1de>
10006ea6:	4690      	mov	r8, r2
10006ea8:	e7e2      	b.n	10006e70 <_Z11MandelCore1v+0x1d0>
			*dst = 0;
10006eaa:	2300      	movs	r3, #0
10006eac:	e779      	b.n	10006da2 <_Z11MandelCore1v+0x102>
			*dst = 0;
10006eae:	2300      	movs	r3, #0
10006eb0:	e7e5      	b.n	10006e7e <_Z11MandelCore1v+0x1de>
typedef s32 fixed;

// convert double number to fixed-point number
INLINE fixed DlbToFixed(double num)
{
	return (fixed)(num * (1 << 25));
10006eb2:	2383      	movs	r3, #131	; 0x83
10006eb4:	490c      	ldr	r1, [pc, #48]	; (10006ee8 <_Z11MandelCore1v+0x248>)
10006eb6:	2200      	movs	r2, #0
10006eb8:	6808      	ldr	r0, [r1, #0]
10006eba:	6849      	ldr	r1, [r1, #4]
10006ebc:	05db      	lsls	r3, r3, #23
10006ebe:	f7f9 fcd1 	bl	10000864 <__wrap___aeabi_dmul>
10006ec2:	f7f9 fd57 	bl	10000974 <__wrap___aeabi_d2iz>
		MandelFixed(Core1Dst, DlbToFixed(Core1Cid));
10006ec6:	4b07      	ldr	r3, [pc, #28]	; (10006ee4 <_Z11MandelCore1v+0x244>)
10006ec8:	0001      	movs	r1, r0
10006eca:	6818      	ldr	r0, [r3, #0]
10006ecc:	f002 fc10 	bl	100096f0 <__MandelFixed_veneer>
10006ed0:	e776      	b.n	10006dc0 <_Z11MandelCore1v+0x120>
		if (i == 0)
10006ed2:	4652      	mov	r2, sl
			*dst = 0;
10006ed4:	2300      	movs	r3, #0
		if (i == 0)
10006ed6:	2a00      	cmp	r2, #0
10006ed8:	d100      	bne.n	10006edc <_Z11MandelCore1v+0x23c>
10006eda:	e762      	b.n	10006da2 <_Z11MandelCore1v+0x102>
10006edc:	46d0      	mov	r8, sl
10006ede:	e759      	b.n	10006d94 <_Z11MandelCore1v+0xf4>
10006ee0:	20002cbc 	.word	0x20002cbc
10006ee4:	200365e0 	.word	0x200365e0
10006ee8:	20002a58 	.word	0x20002a58
10006eec:	200021e0 	.word	0x200021e0
10006ef0:	200021e8 	.word	0x200021e8
10006ef4:	20038e9c 	.word	0x20038e9c
10006ef8:	20002a70 	.word	0x20002a70
10006efc:	20038f00 	.word	0x20038f00
10006f00:	40100000 	.word	0x40100000
10006f04:	1000a000 	.word	0x1000a000
10006f08:	200389e4 	.word	0x200389e4

10006f0c <_Z4Initv>:
{
10006f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10006f0e:	46ce      	mov	lr, r9
10006f10:	4647      	mov	r7, r8
10006f12:	b580      	push	{r7, lr}
	Core1Wait();
10006f14:	f001 faf8 	bl	10008508 <_Z9Core1Waitv>
	VgaInitReq(NULL);
10006f18:	2000      	movs	r0, #0
10006f1a:	f001 facd 	bl	100084b8 <_Z10VgaInitReqPK6sVmode>
	if (HighRes == RES_MED)
10006f1e:	4e32      	ldr	r6, [pc, #200]	; (10006fe8 <_Z4Initv+0xdc>)
10006f20:	6833      	ldr	r3, [r6, #0]
10006f22:	2b01      	cmp	r3, #1
10006f24:	d048      	beq.n	10006fb8 <_Z4Initv+0xac>
	else if (HighRes == RES_LOW)
10006f26:	2b00      	cmp	r3, #0
10006f28:	d152      	bne.n	10006fd0 <_Z4Initv+0xc4>
	Width = w;
10006f2a:	2284      	movs	r2, #132	; 0x84
10006f2c:	4b2f      	ldr	r3, [pc, #188]	; (10006fec <_Z4Initv+0xe0>)
10006f2e:	2584      	movs	r5, #132	; 0x84
10006f30:	601a      	str	r2, [r3, #0]
	Height = h;
10006f32:	4b2f      	ldr	r3, [pc, #188]	; (10006ff0 <_Z4Initv+0xe4>)
10006f34:	3a20      	subs	r2, #32
10006f36:	601a      	str	r2, [r3, #0]
	if (HighRes == RES_LOW) h *= 2;
10006f38:	23c8      	movs	r3, #200	; 0xc8
		w = WIDTH/4;
10006f3a:	2784      	movs	r7, #132	; 0x84
10006f3c:	4699      	mov	r9, r3
	if (HighRes == RES_LOW) h *= 2;
10006f3e:	4698      	mov	r8, r3
	VgaCfgDef(&Cfg); // get default configuration
10006f40:	4c2c      	ldr	r4, [pc, #176]	; (10006ff4 <_Z4Initv+0xe8>)
10006f42:	0020      	movs	r0, r4
10006f44:	f001 fb2c 	bl	100085a0 <_Z9VgaCfgDefP7sVgaCfg>
	Cfg.video = &DRV; // video timings
10006f48:	4b2b      	ldr	r3, [pc, #172]	; (10006ff8 <_Z4Initv+0xec>)
	Cfg.width = w; // screen width
10006f4a:	8025      	strh	r5, [r4, #0]
	Cfg.video = &DRV; // video timings
10006f4c:	60a3      	str	r3, [r4, #8]
	Cfg.height = h; // screen height
10006f4e:	464b      	mov	r3, r9
10006f50:	8063      	strh	r3, [r4, #2]
	Cfg.dbly = (HighRes != RES_HIGH); // double y
10006f52:	6833      	ldr	r3, [r6, #0]
	Cfg.wfull = wfull; // max. width
10006f54:	80a5      	strh	r5, [r4, #4]
	Cfg.dbly = (HighRes != RES_HIGH); // double y
10006f56:	3b02      	subs	r3, #2
10006f58:	1e5a      	subs	r2, r3, #1
10006f5a:	4193      	sbcs	r3, r2
10006f5c:	7623      	strb	r3, [r4, #24]
	Cfg.freq = SysClk; // system clock
10006f5e:	4b27      	ldr	r3, [pc, #156]	; (10006ffc <_Z4Initv+0xf0>)
	VgaCfg(&Cfg, &Vmode); // calculate videomode setup
10006f60:	4d27      	ldr	r5, [pc, #156]	; (10007000 <_Z4Initv+0xf4>)
	Cfg.freq = SysClk; // system clock
10006f62:	681b      	ldr	r3, [r3, #0]
	VgaCfg(&Cfg, &Vmode); // calculate videomode setup
10006f64:	0029      	movs	r1, r5
10006f66:	0020      	movs	r0, r4
	Cfg.freq = SysClk; // system clock
10006f68:	60e3      	str	r3, [r4, #12]
	VgaCfg(&Cfg, &Vmode); // calculate videomode setup
10006f6a:	f001 fb2f 	bl	100085cc <_Z6VgaCfgPK7sVgaCfgP6sVmode>
	ScreenClear(pScreen);
10006f6e:	4c25      	ldr	r4, [pc, #148]	; (10007004 <_Z4Initv+0xf8>)
10006f70:	6820      	ldr	r0, [r4, #0]
10006f72:	f001 fad3 	bl	1000851c <_Z11ScreenClearP7sScreen>
	sStrip* t = ScreenAddStrip(pScreen, h);
10006f76:	4641      	mov	r1, r8
10006f78:	6820      	ldr	r0, [r4, #0]
10006f7a:	f001 fad7 	bl	1000852c <_Z14ScreenAddStripP7sScreeni>
	sSegm* g = ScreenAddSegm(t, w);
10006f7e:	0039      	movs	r1, r7
10006f80:	f001 fae4 	bl	1000854c <_Z13ScreenAddSegmP6sStripi>
	ScreenSegmGraph8(g, Buf, w);
10006f84:	003a      	movs	r2, r7
10006f86:	4920      	ldr	r1, [pc, #128]	; (10007008 <_Z4Initv+0xfc>)
	sSegm* g = ScreenAddSegm(t, w);
10006f88:	0004      	movs	r4, r0
	ScreenSegmGraph8(g, Buf, w);
10006f8a:	f001 fafb 	bl	10008584 <_Z16ScreenSegmGraph8P5sSegmPKvi>
	g->dbly = (HighRes == RES_LOW);
10006f8e:	6833      	ldr	r3, [r6, #0]
10006f90:	425a      	negs	r2, r3
10006f92:	4153      	adcs	r3, r2
10006f94:	7463      	strb	r3, [r4, #17]
	set_sys_clock_pll(Vmode.vco*1000, Vmode.pd1, Vmode.pd2);
10006f96:	68eb      	ldr	r3, [r5, #12]
10006f98:	7cea      	ldrb	r2, [r5, #19]
10006f9a:	0158      	lsls	r0, r3, #5
10006f9c:	1ac0      	subs	r0, r0, r3
10006f9e:	0080      	lsls	r0, r0, #2
10006fa0:	18c0      	adds	r0, r0, r3
10006fa2:	7ca9      	ldrb	r1, [r5, #18]
10006fa4:	00c0      	lsls	r0, r0, #3
10006fa6:	f7fd f99b 	bl	100042e0 <set_sys_clock_pll>
	VgaInitReq(&Vmode);
10006faa:	0028      	movs	r0, r5
10006fac:	f001 fa84 	bl	100084b8 <_Z10VgaInitReqPK6sVmode>
}
10006fb0:	bcc0      	pop	{r6, r7}
10006fb2:	46b9      	mov	r9, r7
10006fb4:	46b0      	mov	r8, r6
10006fb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	Width = w;
10006fb8:	2584      	movs	r5, #132	; 0x84
	Height = h;
10006fba:	22c8      	movs	r2, #200	; 0xc8
	Width = w;
10006fbc:	4b0b      	ldr	r3, [pc, #44]	; (10006fec <_Z4Initv+0xe0>)
10006fbe:	006d      	lsls	r5, r5, #1
10006fc0:	601d      	str	r5, [r3, #0]
	Height = h;
10006fc2:	4b0b      	ldr	r3, [pc, #44]	; (10006ff0 <_Z4Initv+0xe4>)
		w = WIDTH/2;
10006fc4:	002f      	movs	r7, r5
	Height = h;
10006fc6:	601a      	str	r2, [r3, #0]
10006fc8:	23c8      	movs	r3, #200	; 0xc8
10006fca:	4699      	mov	r9, r3
		h = HEIGHT/2;
10006fcc:	4698      	mov	r8, r3
10006fce:	e7b7      	b.n	10006f40 <_Z4Initv+0x34>
	Width = w;
10006fd0:	2584      	movs	r5, #132	; 0x84
10006fd2:	4b06      	ldr	r3, [pc, #24]	; (10006fec <_Z4Initv+0xe0>)
10006fd4:	00ad      	lsls	r5, r5, #2
10006fd6:	601d      	str	r5, [r3, #0]
	Height = h;
10006fd8:	23c8      	movs	r3, #200	; 0xc8
10006fda:	4a05      	ldr	r2, [pc, #20]	; (10006ff0 <_Z4Initv+0xe4>)
10006fdc:	005b      	lsls	r3, r3, #1
10006fde:	4699      	mov	r9, r3
	w = WIDTH;
10006fe0:	002f      	movs	r7, r5
	h = HEIGHT;
10006fe2:	4698      	mov	r8, r3
	Height = h;
10006fe4:	6013      	str	r3, [r2, #0]
	if (HighRes == RES_LOW) h *= 2;
10006fe6:	e7ab      	b.n	10006f40 <_Z4Initv+0x34>
10006fe8:	200021d0 	.word	0x200021d0
10006fec:	200021e8 	.word	0x200021e8
10006ff0:	200021cc 	.word	0x200021cc
10006ff4:	200365c4 	.word	0x200365c4
10006ff8:	1000a328 	.word	0x1000a328
10006ffc:	200021e4 	.word	0x200021e4
10007000:	20038ea4 	.word	0x20038ea4
10007004:	200021f0 	.word	0x200021f0
10007008:	20002cc0 	.word	0x20002cc0

1000700c <_Z5Statev>:
{
1000700c:	b530      	push	{r4, r5, lr}
	printf("x=%g y=%g scale=%g steps=%u sysclk=%uMHz cpp=%u ",
1000700e:	4b1e      	ldr	r3, [pc, #120]	; (10007088 <_Z5Statev+0x7c>)
{
10007010:	b089      	sub	sp, #36	; 0x24
	printf("x=%g y=%g scale=%g steps=%u sysclk=%uMHz cpp=%u ",
10007012:	681c      	ldr	r4, [r3, #0]
10007014:	685d      	ldr	r5, [r3, #4]
		OffX, OffY, Size, Steps, (Vmode.freq+500)/1000, Vmode.cpp*Vmode.div);
10007016:	4b1d      	ldr	r3, [pc, #116]	; (1000708c <_Z5Statev+0x80>)
10007018:	8ad9      	ldrh	r1, [r3, #22]
1000701a:	8a9a      	ldrh	r2, [r3, #20]
	printf("x=%g y=%g scale=%g steps=%u sysclk=%uMHz cpp=%u ",
1000701c:	434a      	muls	r2, r1
1000701e:	21fa      	movs	r1, #250	; 0xfa
10007020:	9206      	str	r2, [sp, #24]
		OffX, OffY, Size, Steps, (Vmode.freq+500)/1000, Vmode.cpp*Vmode.div);
10007022:	6898      	ldr	r0, [r3, #8]
	printf("x=%g y=%g scale=%g steps=%u sysclk=%uMHz cpp=%u ",
10007024:	0089      	lsls	r1, r1, #2
		OffX, OffY, Size, Steps, (Vmode.freq+500)/1000, Vmode.cpp*Vmode.div);
10007026:	30f5      	adds	r0, #245	; 0xf5
10007028:	30ff      	adds	r0, #255	; 0xff
	printf("x=%g y=%g scale=%g steps=%u sysclk=%uMHz cpp=%u ",
1000702a:	f7f9 f9a3 	bl	10000374 <__wrap___aeabi_uidiv>
1000702e:	4b18      	ldr	r3, [pc, #96]	; (10007090 <_Z5Statev+0x84>)
10007030:	9005      	str	r0, [sp, #20]
10007032:	681b      	ldr	r3, [r3, #0]
10007034:	4817      	ldr	r0, [pc, #92]	; (10007094 <_Z5Statev+0x88>)
10007036:	9304      	str	r3, [sp, #16]
10007038:	4b17      	ldr	r3, [pc, #92]	; (10007098 <_Z5Statev+0x8c>)
1000703a:	681a      	ldr	r2, [r3, #0]
1000703c:	685b      	ldr	r3, [r3, #4]
1000703e:	9202      	str	r2, [sp, #8]
10007040:	9303      	str	r3, [sp, #12]
10007042:	4b16      	ldr	r3, [pc, #88]	; (1000709c <_Z5Statev+0x90>)
10007044:	681a      	ldr	r2, [r3, #0]
10007046:	685b      	ldr	r3, [r3, #4]
10007048:	9200      	str	r2, [sp, #0]
1000704a:	9301      	str	r3, [sp, #4]
1000704c:	0022      	movs	r2, r4
1000704e:	002b      	movs	r3, r5
10007050:	f7fc ff94 	bl	10003f7c <__wrap_printf>
	printf("res=%dx%d ", Width, Height);
10007054:	4b12      	ldr	r3, [pc, #72]	; (100070a0 <_Z5Statev+0x94>)
10007056:	4813      	ldr	r0, [pc, #76]	; (100070a4 <_Z5Statev+0x98>)
10007058:	681a      	ldr	r2, [r3, #0]
1000705a:	4b13      	ldr	r3, [pc, #76]	; (100070a8 <_Z5Statev+0x9c>)
1000705c:	6819      	ldr	r1, [r3, #0]
1000705e:	f7fc ff8d 	bl	10003f7c <__wrap_printf>
	if (Arithm == USE_INT)
10007062:	4b12      	ldr	r3, [pc, #72]	; (100070ac <_Z5Statev+0xa0>)
10007064:	681b      	ldr	r3, [r3, #0]
10007066:	2b00      	cmp	r3, #0
10007068:	d00a      	beq.n	10007080 <_Z5Statev+0x74>
	else if (Arithm == USE_FLT)
1000706a:	2b01      	cmp	r3, #1
1000706c:	d004      	beq.n	10007078 <_Z5Statev+0x6c>
		printf("double\n");
1000706e:	4810      	ldr	r0, [pc, #64]	; (100070b0 <_Z5Statev+0xa4>)
10007070:	f7fc fed4 	bl	10003e1c <__wrap_puts>
}
10007074:	b009      	add	sp, #36	; 0x24
10007076:	bd30      	pop	{r4, r5, pc}
		printf("float\n");
10007078:	480e      	ldr	r0, [pc, #56]	; (100070b4 <_Z5Statev+0xa8>)
1000707a:	f7fc fecf 	bl	10003e1c <__wrap_puts>
1000707e:	e7f9      	b.n	10007074 <_Z5Statev+0x68>
		printf("integer\n");
10007080:	480d      	ldr	r0, [pc, #52]	; (100070b8 <_Z5Statev+0xac>)
10007082:	f7fc fecb 	bl	10003e1c <__wrap_puts>
10007086:	e7f5      	b.n	10007074 <_Z5Statev+0x68>
10007088:	20002a60 	.word	0x20002a60
1000708c:	20038ea4 	.word	0x20038ea4
10007090:	200021e0 	.word	0x200021e0
10007094:	10009cd0 	.word	0x10009cd0
10007098:	200021d8 	.word	0x200021d8
1000709c:	20002a68 	.word	0x20002a68
100070a0:	200021cc 	.word	0x200021cc
100070a4:	10009d04 	.word	0x10009d04
100070a8:	200021e8 	.word	0x200021e8
100070ac:	20002cbc 	.word	0x20002cbc
100070b0:	10009d20 	.word	0x10009d20
100070b4:	10009d18 	.word	0x10009d18
100070b8:	10009d10 	.word	0x10009d10

100070bc <_Z11MandelStartv>:
{
100070bc:	b5f0      	push	{r4, r5, r6, r7, lr}
100070be:	46de      	mov	lr, fp
100070c0:	4657      	mov	r7, sl
100070c2:	4645      	mov	r5, r8
100070c4:	464e      	mov	r6, r9
100070c6:	b5e0      	push	{r5, r6, r7, lr}
100070c8:	b087      	sub	sp, #28
	Core1Wait();
100070ca:	f001 fa1d 	bl	10008508 <_Z9Core1Waitv>
	IncY = 1;
100070ce:	2301      	movs	r3, #1
100070d0:	4d78      	ldr	r5, [pc, #480]	; (100072b4 <_Z11MandelStartv+0x1f8>)
100070d2:	602b      	str	r3, [r5, #0]
	while (IncY*2 < Height) IncY *= 2;
100070d4:	4b78      	ldr	r3, [pc, #480]	; (100072b8 <_Z11MandelStartv+0x1fc>)
100070d6:	681c      	ldr	r4, [r3, #0]
100070d8:	469a      	mov	sl, r3
100070da:	2c02      	cmp	r4, #2
100070dc:	dd05      	ble.n	100070ea <_Z11MandelStartv+0x2e>
100070de:	2302      	movs	r3, #2
100070e0:	001a      	movs	r2, r3
100070e2:	005b      	lsls	r3, r3, #1
100070e4:	42a3      	cmp	r3, r4
100070e6:	dbfb      	blt.n	100070e0 <_Z11MandelStartv+0x24>
100070e8:	602a      	str	r2, [r5, #0]
	Shift = 0;
100070ea:	2300      	movs	r3, #0
100070ec:	4e73      	ldr	r6, [pc, #460]	; (100072bc <_Z11MandelStartv+0x200>)
100070ee:	6033      	str	r3, [r6, #0]
	while ((Steps >> Shift) > 64) Shift++;
100070f0:	4b73      	ldr	r3, [pc, #460]	; (100072c0 <_Z11MandelStartv+0x204>)
100070f2:	6818      	ldr	r0, [r3, #0]
100070f4:	2840      	cmp	r0, #64	; 0x40
100070f6:	dd07      	ble.n	10007108 <_Z11MandelStartv+0x4c>
100070f8:	2301      	movs	r3, #1
100070fa:	001a      	movs	r2, r3
100070fc:	0001      	movs	r1, r0
100070fe:	3301      	adds	r3, #1
10007100:	4111      	asrs	r1, r2
10007102:	2940      	cmp	r1, #64	; 0x40
10007104:	dcf9      	bgt.n	100070fa <_Z11MandelStartv+0x3e>
10007106:	6032      	str	r2, [r6, #0]
	SXd = 4*Size/Width;
10007108:	4b6e      	ldr	r3, [pc, #440]	; (100072c4 <_Z11MandelStartv+0x208>)
1000710a:	6818      	ldr	r0, [r3, #0]
1000710c:	6859      	ldr	r1, [r3, #4]
1000710e:	4699      	mov	r9, r3
10007110:	4b6d      	ldr	r3, [pc, #436]	; (100072c8 <_Z11MandelStartv+0x20c>)
10007112:	9000      	str	r0, [sp, #0]
10007114:	9101      	str	r1, [sp, #4]
10007116:	681a      	ldr	r2, [r3, #0]
10007118:	469b      	mov	fp, r3
1000711a:	9203      	str	r2, [sp, #12]
1000711c:	4b6b      	ldr	r3, [pc, #428]	; (100072cc <_Z11MandelStartv+0x210>)
1000711e:	2200      	movs	r2, #0
10007120:	f7f9 fba0 	bl	10000864 <__wrap___aeabi_dmul>
10007124:	0006      	movs	r6, r0
10007126:	9803      	ldr	r0, [sp, #12]
10007128:	000f      	movs	r7, r1
1000712a:	f7f9 fc0b 	bl	10000944 <__wrap___aeabi_i2d>
1000712e:	0002      	movs	r2, r0
10007130:	000b      	movs	r3, r1
10007132:	0030      	movs	r0, r6
10007134:	0039      	movs	r1, r7
10007136:	f7f9 fb8c 	bl	10000852 <__wrap___aeabi_ddiv>
	X0d = OffX - 2*Size;
1000713a:	9e00      	ldr	r6, [sp, #0]
1000713c:	9f01      	ldr	r7, [sp, #4]
	SXd = 4*Size/Width;
1000713e:	000a      	movs	r2, r1
10007140:	0001      	movs	r1, r0
10007142:	4b63      	ldr	r3, [pc, #396]	; (100072d0 <_Z11MandelStartv+0x214>)
10007144:	9104      	str	r1, [sp, #16]
10007146:	9205      	str	r2, [sp, #20]
10007148:	6019      	str	r1, [r3, #0]
1000714a:	605a      	str	r2, [r3, #4]
	X0d = OffX - 2*Size;
1000714c:	0030      	movs	r0, r6
1000714e:	0032      	movs	r2, r6
10007150:	003b      	movs	r3, r7
10007152:	0039      	movs	r1, r7
10007154:	f7f9 fb74 	bl	10000840 <__wrap___aeabi_dadd>
10007158:	000b      	movs	r3, r1
1000715a:	495e      	ldr	r1, [pc, #376]	; (100072d4 <_Z11MandelStartv+0x218>)
1000715c:	0002      	movs	r2, r0
1000715e:	6808      	ldr	r0, [r1, #0]
10007160:	6849      	ldr	r1, [r1, #4]
10007162:	f7f9 fb64 	bl	1000082e <__wrap___aeabi_dsub>
10007166:	0006      	movs	r6, r0
10007168:	000f      	movs	r7, r1
	SXf = (float)SXd;
1000716a:	9804      	ldr	r0, [sp, #16]
1000716c:	9905      	ldr	r1, [sp, #20]
	X0d = OffX - 2*Size;
1000716e:	4b5a      	ldr	r3, [pc, #360]	; (100072d8 <_Z11MandelStartv+0x21c>)
10007170:	601e      	str	r6, [r3, #0]
10007172:	605f      	str	r7, [r3, #4]
	SXf = (float)SXd;
10007174:	f7f9 fc3a 	bl	100009ec <__wrap___aeabi_d2f>
10007178:	4b58      	ldr	r3, [pc, #352]	; (100072dc <_Z11MandelStartv+0x220>)
	X0f = (float)X0d;
1000717a:	0039      	movs	r1, r7
	SXf = (float)SXd;
1000717c:	6018      	str	r0, [r3, #0]
	X0f = (float)X0d;
1000717e:	0030      	movs	r0, r6
10007180:	f7f9 fc34 	bl	100009ec <__wrap___aeabi_d2f>
10007184:	4b56      	ldr	r3, [pc, #344]	; (100072e0 <_Z11MandelStartv+0x224>)
10007186:	2200      	movs	r2, #0
10007188:	6018      	str	r0, [r3, #0]
1000718a:	2383      	movs	r3, #131	; 0x83
1000718c:	9804      	ldr	r0, [sp, #16]
1000718e:	9905      	ldr	r1, [sp, #20]
10007190:	05db      	lsls	r3, r3, #23
10007192:	f7f9 fb67 	bl	10000864 <__wrap___aeabi_dmul>
10007196:	f7f9 fbed 	bl	10000974 <__wrap___aeabi_d2iz>
1000719a:	4b52      	ldr	r3, [pc, #328]	; (100072e4 <_Z11MandelStartv+0x228>)
1000719c:	2200      	movs	r2, #0
1000719e:	6018      	str	r0, [r3, #0]
100071a0:	2383      	movs	r3, #131	; 0x83
100071a2:	0030      	movs	r0, r6
100071a4:	05db      	lsls	r3, r3, #23
100071a6:	0039      	movs	r1, r7
100071a8:	f7f9 fb5c 	bl	10000864 <__wrap___aeabi_dmul>
100071ac:	f7f9 fbe2 	bl	10000974 <__wrap___aeabi_d2iz>
100071b0:	4b4d      	ldr	r3, [pc, #308]	; (100072e8 <_Z11MandelStartv+0x22c>)
	Y0d = OffY + 1.5f*Size;
100071b2:	2200      	movs	r2, #0
100071b4:	6018      	str	r0, [r3, #0]
100071b6:	9800      	ldr	r0, [sp, #0]
100071b8:	9901      	ldr	r1, [sp, #4]
100071ba:	4b4c      	ldr	r3, [pc, #304]	; (100072ec <_Z11MandelStartv+0x230>)
100071bc:	f7f9 fb52 	bl	10000864 <__wrap___aeabi_dmul>
100071c0:	4b4b      	ldr	r3, [pc, #300]	; (100072f0 <_Z11MandelStartv+0x234>)
100071c2:	681a      	ldr	r2, [r3, #0]
100071c4:	685b      	ldr	r3, [r3, #4]
100071c6:	f7f9 fb3b 	bl	10000840 <__wrap___aeabi_dadd>
100071ca:	0006      	movs	r6, r0
100071cc:	000f      	movs	r7, r1
100071ce:	4b49      	ldr	r3, [pc, #292]	; (100072f4 <_Z11MandelStartv+0x238>)
100071d0:	601e      	str	r6, [r3, #0]
100071d2:	605f      	str	r7, [r3, #4]
100071d4:	4698      	mov	r8, r3
	Y0f = (float)Y0d;
100071d6:	f7f9 fc09 	bl	100009ec <__wrap___aeabi_d2f>
100071da:	4b47      	ldr	r3, [pc, #284]	; (100072f8 <_Z11MandelStartv+0x23c>)
100071dc:	2200      	movs	r2, #0
100071de:	6018      	str	r0, [r3, #0]
100071e0:	2383      	movs	r3, #131	; 0x83
100071e2:	0030      	movs	r0, r6
100071e4:	05db      	lsls	r3, r3, #23
100071e6:	0039      	movs	r1, r7
100071e8:	f7f9 fb3c 	bl	10000864 <__wrap___aeabi_dmul>
100071ec:	f7f9 fbc2 	bl	10000974 <__wrap___aeabi_d2iz>
100071f0:	4b42      	ldr	r3, [pc, #264]	; (100072fc <_Z11MandelStartv+0x240>)
	memset(Buf, 0, Width*Height);
100071f2:	4e43      	ldr	r6, [pc, #268]	; (10007300 <_Z11MandelStartv+0x244>)
100071f4:	9a03      	ldr	r2, [sp, #12]
100071f6:	6018      	str	r0, [r3, #0]
100071f8:	4362      	muls	r2, r4
100071fa:	2100      	movs	r1, #0
100071fc:	0030      	movs	r0, r6
100071fe:	f7fa f84d 	bl	1000129c <__wrap_memset>
	memset(Ok, False, Height*sizeof(Bool));
10007202:	0022      	movs	r2, r4
10007204:	2100      	movs	r1, #0
10007206:	483f      	ldr	r0, [pc, #252]	; (10007304 <_Z11MandelStartv+0x248>)
10007208:	f7fa f848 	bl	1000129c <__wrap_memset>
	Core1Wait();
1000720c:	f001 f97c 	bl	10008508 <_Z9Core1Waitv>
	CurY = 0;
10007210:	2200      	movs	r2, #0
	SYd = -3*Size/Height * IncY;
10007212:	4649      	mov	r1, r9
	CurY = 0;
10007214:	4b3c      	ldr	r3, [pc, #240]	; (10007308 <_Z11MandelStartv+0x24c>)
	SYd = -3*Size/Height * IncY;
10007216:	6808      	ldr	r0, [r1, #0]
10007218:	6849      	ldr	r1, [r1, #4]
	CurY = 0;
1000721a:	601a      	str	r2, [r3, #0]
	SYd = -3*Size/Height * IncY;
1000721c:	2200      	movs	r2, #0
1000721e:	4b3b      	ldr	r3, [pc, #236]	; (1000730c <_Z11MandelStartv+0x250>)
10007220:	f7f9 fb20 	bl	10000864 <__wrap___aeabi_dmul>
10007224:	4653      	mov	r3, sl
10007226:	0004      	movs	r4, r0
10007228:	6818      	ldr	r0, [r3, #0]
1000722a:	682f      	ldr	r7, [r5, #0]
1000722c:	000d      	movs	r5, r1
1000722e:	f7f9 fb89 	bl	10000944 <__wrap___aeabi_i2d>
10007232:	0002      	movs	r2, r0
10007234:	000b      	movs	r3, r1
10007236:	0020      	movs	r0, r4
10007238:	0029      	movs	r1, r5
1000723a:	f7f9 fb0a 	bl	10000852 <__wrap___aeabi_ddiv>
1000723e:	0004      	movs	r4, r0
10007240:	0038      	movs	r0, r7
10007242:	000d      	movs	r5, r1
10007244:	f7f9 fb7e 	bl	10000944 <__wrap___aeabi_i2d>
10007248:	0002      	movs	r2, r0
1000724a:	000b      	movs	r3, r1
1000724c:	0020      	movs	r0, r4
1000724e:	0029      	movs	r1, r5
10007250:	f7f9 fb08 	bl	10000864 <__wrap___aeabi_dmul>
10007254:	0004      	movs	r4, r0
10007256:	000d      	movs	r5, r1
10007258:	4b2d      	ldr	r3, [pc, #180]	; (10007310 <_Z11MandelStartv+0x254>)
1000725a:	601c      	str	r4, [r3, #0]
1000725c:	605d      	str	r5, [r3, #4]
	SYf = (float)SYd;
1000725e:	f7f9 fbc5 	bl	100009ec <__wrap___aeabi_d2f>
10007262:	4b2c      	ldr	r3, [pc, #176]	; (10007314 <_Z11MandelStartv+0x258>)
10007264:	2200      	movs	r2, #0
10007266:	6018      	str	r0, [r3, #0]
10007268:	2383      	movs	r3, #131	; 0x83
1000726a:	0020      	movs	r0, r4
1000726c:	05db      	lsls	r3, r3, #23
1000726e:	0029      	movs	r1, r5
10007270:	f7f9 faf8 	bl	10000864 <__wrap___aeabi_dmul>
10007274:	f7f9 fb7e 	bl	10000974 <__wrap___aeabi_d2iz>
10007278:	4b27      	ldr	r3, [pc, #156]	; (10007318 <_Z11MandelStartv+0x25c>)
	Cid = Y0d;
1000727a:	4928      	ldr	r1, [pc, #160]	; (1000731c <_Z11MandelStartv+0x260>)
1000727c:	6018      	str	r0, [r3, #0]
1000727e:	4643      	mov	r3, r8
10007280:	681a      	ldr	r2, [r3, #0]
10007282:	685b      	ldr	r3, [r3, #4]
10007284:	600a      	str	r2, [r1, #0]
10007286:	604b      	str	r3, [r1, #4]
	Dst = Buf;
10007288:	4b25      	ldr	r3, [pc, #148]	; (10007320 <_Z11MandelStartv+0x264>)
1000728a:	601e      	str	r6, [r3, #0]
	DstInc = IncY * Width;
1000728c:	465b      	mov	r3, fp
1000728e:	681b      	ldr	r3, [r3, #0]
10007290:	435f      	muls	r7, r3
10007292:	4b24      	ldr	r3, [pc, #144]	; (10007324 <_Z11MandelStartv+0x268>)
10007294:	601f      	str	r7, [r3, #0]
	State();
10007296:	f7ff feb9 	bl	1000700c <_Z5Statev>
	StartTime = time_us_64();
1000729a:	f7fd fce1 	bl	10004c60 <time_us_64>
1000729e:	4b22      	ldr	r3, [pc, #136]	; (10007328 <_Z11MandelStartv+0x26c>)
100072a0:	6018      	str	r0, [r3, #0]
100072a2:	6059      	str	r1, [r3, #4]
}
100072a4:	b007      	add	sp, #28
100072a6:	bcf0      	pop	{r4, r5, r6, r7}
100072a8:	46bb      	mov	fp, r7
100072aa:	46b2      	mov	sl, r6
100072ac:	46a9      	mov	r9, r5
100072ae:	46a0      	mov	r8, r4
100072b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
100072b2:	46c0      	nop			; (mov r8, r8)
100072b4:	200021d4 	.word	0x200021d4
100072b8:	200021cc 	.word	0x200021cc
100072bc:	20038e9c 	.word	0x20038e9c
100072c0:	200021e0 	.word	0x200021e0
100072c4:	200021d8 	.word	0x200021d8
100072c8:	200021e8 	.word	0x200021e8
100072cc:	40100000 	.word	0x40100000
100072d0:	20002a70 	.word	0x20002a70
100072d4:	20002a60 	.word	0x20002a60
100072d8:	20002a88 	.word	0x20002a88
100072dc:	200389e4 	.word	0x200389e4
100072e0:	20038f00 	.word	0x20038f00
100072e4:	200389e8 	.word	0x200389e8
100072e8:	20038f04 	.word	0x20038f04
100072ec:	3ff80000 	.word	0x3ff80000
100072f0:	20002a68 	.word	0x20002a68
100072f4:	20002a90 	.word	0x20002a90
100072f8:	20038f08 	.word	0x20038f08
100072fc:	20038f0c 	.word	0x20038f0c
10007300:	20002cc0 	.word	0x20002cc0
10007304:	20038054 	.word	0x20038054
10007308:	200021c8 	.word	0x200021c8
1000730c:	c0080000 	.word	0xc0080000
10007310:	20002a78 	.word	0x20002a78
10007314:	200389ec 	.word	0x200389ec
10007318:	200389f0 	.word	0x200389f0
1000731c:	20002a50 	.word	0x20002a50
10007320:	200370c8 	.word	0x200370c8
10007324:	200370cc 	.word	0x200370cc
10007328:	20002a80 	.word	0x20002a80

1000732c <_Z4Helpv>:

// print help
void Help()
{
1000732c:	b510      	push	{r4, lr}
	printf("\nHelp:\n");
1000732e:	481b      	ldr	r0, [pc, #108]	; (1000739c <_Z4Helpv+0x70>)
10007330:	f7fc fd74 	bl	10003e1c <__wrap_puts>
	printf("E ... move up\n");
10007334:	481a      	ldr	r0, [pc, #104]	; (100073a0 <_Z4Helpv+0x74>)
10007336:	f7fc fd71 	bl	10003e1c <__wrap_puts>
	printf("S ... move left\n");
1000733a:	481a      	ldr	r0, [pc, #104]	; (100073a4 <_Z4Helpv+0x78>)
1000733c:	f7fc fd6e 	bl	10003e1c <__wrap_puts>
	printf("D ... move right\n");
10007340:	4819      	ldr	r0, [pc, #100]	; (100073a8 <_Z4Helpv+0x7c>)
10007342:	f7fc fd6b 	bl	10003e1c <__wrap_puts>
	printf("X ... move down\n");
10007346:	4819      	ldr	r0, [pc, #100]	; (100073ac <_Z4Helpv+0x80>)
10007348:	f7fc fd68 	bl	10003e1c <__wrap_puts>
	printf("Q ... zoom in\n");
1000734c:	4818      	ldr	r0, [pc, #96]	; (100073b0 <_Z4Helpv+0x84>)
1000734e:	f7fc fd65 	bl	10003e1c <__wrap_puts>
	printf("A ... zoom out\n");
10007352:	4818      	ldr	r0, [pc, #96]	; (100073b4 <_Z4Helpv+0x88>)
10007354:	f7fc fd62 	bl	10003e1c <__wrap_puts>
	printf("L ... use low resolution 132x100\n");
10007358:	4817      	ldr	r0, [pc, #92]	; (100073b8 <_Z4Helpv+0x8c>)
1000735a:	f7fc fd5f 	bl	10003e1c <__wrap_puts>
	printf("M ... use medium resolution 264x200\n");
1000735e:	4817      	ldr	r0, [pc, #92]	; (100073bc <_Z4Helpv+0x90>)
10007360:	f7fc fd5c 	bl	10003e1c <__wrap_puts>
	printf("H ... use high resolution 528x400\n");
10007364:	4816      	ldr	r0, [pc, #88]	; (100073c0 <_Z4Helpv+0x94>)
10007366:	f7fc fd59 	bl	10003e1c <__wrap_puts>
	printf("I ... use integer arithmetics\n");
1000736a:	4816      	ldr	r0, [pc, #88]	; (100073c4 <_Z4Helpv+0x98>)
1000736c:	f7fc fd56 	bl	10003e1c <__wrap_puts>
	printf("F ... use float arithmetics\n");
10007370:	4815      	ldr	r0, [pc, #84]	; (100073c8 <_Z4Helpv+0x9c>)
10007372:	f7fc fd53 	bl	10003e1c <__wrap_puts>
	printf("B ... use double arithmetics\n");
10007376:	4815      	ldr	r0, [pc, #84]	; (100073cc <_Z4Helpv+0xa0>)
10007378:	f7fc fd50 	bl	10003e1c <__wrap_puts>
	printf("O ... decrease number of steps\n");
1000737c:	4814      	ldr	r0, [pc, #80]	; (100073d0 <_Z4Helpv+0xa4>)
1000737e:	f7fc fd4d 	bl	10003e1c <__wrap_puts>
	printf("P ... increase number of steps\n");
10007382:	4814      	ldr	r0, [pc, #80]	; (100073d4 <_Z4Helpv+0xa8>)
10007384:	f7fc fd4a 	bl	10003e1c <__wrap_puts>
	printf("U ... increase system clock\n");
10007388:	4813      	ldr	r0, [pc, #76]	; (100073d8 <_Z4Helpv+0xac>)
1000738a:	f7fc fd47 	bl	10003e1c <__wrap_puts>
	printf("T ... decrease system clock\n");
1000738e:	4813      	ldr	r0, [pc, #76]	; (100073dc <_Z4Helpv+0xb0>)
10007390:	f7fc fd44 	bl	10003e1c <__wrap_puts>
	printf("space ... redraw\n");
10007394:	4812      	ldr	r0, [pc, #72]	; (100073e0 <_Z4Helpv+0xb4>)
10007396:	f7fc fd41 	bl	10003e1c <__wrap_puts>
}
1000739a:	bd10      	pop	{r4, pc}
1000739c:	10009d28 	.word	0x10009d28
100073a0:	10009d30 	.word	0x10009d30
100073a4:	10009d40 	.word	0x10009d40
100073a8:	10009d50 	.word	0x10009d50
100073ac:	10009d64 	.word	0x10009d64
100073b0:	10009d74 	.word	0x10009d74
100073b4:	10009d84 	.word	0x10009d84
100073b8:	10009d94 	.word	0x10009d94
100073bc:	10009db8 	.word	0x10009db8
100073c0:	10009ddc 	.word	0x10009ddc
100073c4:	10009e00 	.word	0x10009e00
100073c8:	10009e20 	.word	0x10009e20
100073cc:	10009e3c 	.word	0x10009e3c
100073d0:	10009e5c 	.word	0x10009e5c
100073d4:	10009e7c 	.word	0x10009e7c
100073d8:	10009e9c 	.word	0x10009e9c
100073dc:	10009eb8 	.word	0x10009eb8
100073e0:	10009ed4 	.word	0x10009ed4

100073e4 <_Z10initJoyPadv>:
// #define PB_CF 21		// Center Fire
// #define PB_DN 22		// Down direction
// #define PB_UR 26		// Upper right
// #define PB_UP 27		// Up direction
void initJoyPad()
{
100073e4:	b510      	push	{r4, lr}
	gpio_init(PB_UL);
100073e6:	2010      	movs	r0, #16
100073e8:	f7fa fb0e 	bl	10001a08 <gpio_init>
 *  \ingroup hardware_gpio
 *
 * \param mask Bitmask of GPIO to set to input, as bits 0-29
 */
static inline void gpio_set_dir_in_masked(uint32_t mask) {
    sio_hw->gpio_oe_clr = mask;
100073ec:	24d0      	movs	r4, #208	; 0xd0
100073ee:	2380      	movs	r3, #128	; 0x80
100073f0:	0624      	lsls	r4, r4, #24
100073f2:	025b      	lsls	r3, r3, #9
100073f4:	62a3      	str	r3, [r4, #40]	; 0x28
    gpio_set_pulls(gpio, true, false);
100073f6:	2200      	movs	r2, #0
100073f8:	2101      	movs	r1, #1
100073fa:	2010      	movs	r0, #16
100073fc:	f7fa fada 	bl	100019b4 <gpio_set_pulls>
	gpio_set_dir(PB_UL, GPIO_IN);
	gpio_pull_up(PB_UL);
	
	gpio_init(PB_FR);
10007400:	2012      	movs	r0, #18
10007402:	f7fa fb01 	bl	10001a08 <gpio_init>
    sio_hw->gpio_oe_clr = mask;
10007406:	2380      	movs	r3, #128	; 0x80
10007408:	02db      	lsls	r3, r3, #11
1000740a:	62a3      	str	r3, [r4, #40]	; 0x28
    gpio_set_pulls(gpio, true, false);
1000740c:	2200      	movs	r2, #0
1000740e:	2101      	movs	r1, #1
10007410:	2012      	movs	r0, #18
10007412:	f7fa facf 	bl	100019b4 <gpio_set_pulls>
	gpio_set_dir(PB_FR, GPIO_IN);
	gpio_pull_up(PB_FR);
	
	gpio_init(PB_UP);
10007416:	201b      	movs	r0, #27
10007418:	f7fa faf6 	bl	10001a08 <gpio_init>
    sio_hw->gpio_oe_clr = mask;
1000741c:	2380      	movs	r3, #128	; 0x80
1000741e:	051b      	lsls	r3, r3, #20
10007420:	62a3      	str	r3, [r4, #40]	; 0x28
    gpio_set_pulls(gpio, true, false);
10007422:	2200      	movs	r2, #0
10007424:	2101      	movs	r1, #1
10007426:	201b      	movs	r0, #27
10007428:	f7fa fac4 	bl	100019b4 <gpio_set_pulls>
	gpio_set_dir(PB_UP, GPIO_IN);
	gpio_pull_up(PB_UP);
	
	gpio_init(PB_UR);
1000742c:	201a      	movs	r0, #26
1000742e:	f7fa faeb 	bl	10001a08 <gpio_init>
    sio_hw->gpio_oe_clr = mask;
10007432:	2380      	movs	r3, #128	; 0x80
10007434:	04db      	lsls	r3, r3, #19
10007436:	62a3      	str	r3, [r4, #40]	; 0x28
    gpio_set_pulls(gpio, true, false);
10007438:	2200      	movs	r2, #0
1000743a:	2101      	movs	r1, #1
1000743c:	201a      	movs	r0, #26
1000743e:	f7fa fab9 	bl	100019b4 <gpio_set_pulls>
	gpio_set_dir(PB_UR, GPIO_IN);
	gpio_pull_up(PB_UR);
	
	gpio_init(PB_DN);
10007442:	2016      	movs	r0, #22
10007444:	f7fa fae0 	bl	10001a08 <gpio_init>
    sio_hw->gpio_oe_clr = mask;
10007448:	2380      	movs	r3, #128	; 0x80
1000744a:	03db      	lsls	r3, r3, #15
1000744c:	62a3      	str	r3, [r4, #40]	; 0x28
    gpio_set_pulls(gpio, true, false);
1000744e:	2200      	movs	r2, #0
10007450:	2101      	movs	r1, #1
10007452:	2016      	movs	r0, #22
10007454:	f7fa faae 	bl	100019b4 <gpio_set_pulls>
	gpio_set_dir(PB_DN, GPIO_IN);
	gpio_pull_up(PB_DN);
	
	gpio_init(PB_LT);
10007458:	2014      	movs	r0, #20
1000745a:	f7fa fad5 	bl	10001a08 <gpio_init>
    sio_hw->gpio_oe_clr = mask;
1000745e:	2380      	movs	r3, #128	; 0x80
10007460:	035b      	lsls	r3, r3, #13
10007462:	62a3      	str	r3, [r4, #40]	; 0x28
    gpio_set_pulls(gpio, true, false);
10007464:	2200      	movs	r2, #0
10007466:	2101      	movs	r1, #1
10007468:	2014      	movs	r0, #20
1000746a:	f7fa faa3 	bl	100019b4 <gpio_set_pulls>
	gpio_set_dir(PB_LT, GPIO_IN);
	gpio_pull_up(PB_LT);
	
	gpio_init(PB_RT);
1000746e:	2011      	movs	r0, #17
10007470:	f7fa faca 	bl	10001a08 <gpio_init>
    sio_hw->gpio_oe_clr = mask;
10007474:	2380      	movs	r3, #128	; 0x80
10007476:	029b      	lsls	r3, r3, #10
10007478:	62a3      	str	r3, [r4, #40]	; 0x28
    gpio_set_pulls(gpio, true, false);
1000747a:	2200      	movs	r2, #0
1000747c:	2101      	movs	r1, #1
1000747e:	2011      	movs	r0, #17
10007480:	f7fa fa98 	bl	100019b4 <gpio_set_pulls>
	gpio_set_dir(PB_RT, GPIO_IN);
	gpio_pull_up(PB_RT);
	
	gpio_init(PB_CF);
10007484:	2015      	movs	r0, #21
10007486:	f7fa fabf 	bl	10001a08 <gpio_init>
    sio_hw->gpio_oe_clr = mask;
1000748a:	2380      	movs	r3, #128	; 0x80
1000748c:	039b      	lsls	r3, r3, #14
    gpio_set_pulls(gpio, true, false);
1000748e:	2200      	movs	r2, #0
10007490:	2101      	movs	r1, #1
10007492:	2015      	movs	r0, #21
    sio_hw->gpio_oe_clr = mask;
10007494:	62a3      	str	r3, [r4, #40]	; 0x28
    gpio_set_pulls(gpio, true, false);
10007496:	f7fa fa8d 	bl	100019b4 <gpio_set_pulls>
	gpio_set_dir(PB_CF, GPIO_IN);
	gpio_pull_up(PB_CF);

}
1000749a:	bd10      	pop	{r4, pc}

1000749c <main>:

int main()
{
1000749c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000749e:	46de      	mov	lr, fp
100074a0:	4645      	mov	r5, r8
100074a2:	4657      	mov	r7, sl
100074a4:	464e      	mov	r6, r9
100074a6:	b5e0      	push	{r5, r6, r7, lr}
	int c;

	// run VGA core
	multicore_launch_core1(VgaCore);
100074a8:	48d0      	ldr	r0, [pc, #832]	; (100077ec <main+0x350>)
{
100074aa:	b08d      	sub	sp, #52	; 0x34
	multicore_launch_core1(VgaCore);
100074ac:	f7fa fc94 	bl	10001dd8 <multicore_launch_core1>

	// setup videomode
	Init();
100074b0:	f7ff fd2c 	bl	10006f0c <_Z4Initv>

	// initialize stdio
	stdio_init_all();
100074b4:	f7fc fd6e 	bl	10003f94 <stdio_init_all>

	// initialize debug LED
	gpio_init(LED_PIN);
100074b8:	2019      	movs	r0, #25
100074ba:	f7fa faa5 	bl	10001a08 <gpio_init>
    sio_hw->gpio_oe_set = mask;
100074be:	23d0      	movs	r3, #208	; 0xd0
100074c0:	2280      	movs	r2, #128	; 0x80
100074c2:	061b      	lsls	r3, r3, #24
100074c4:	0492      	lsls	r2, r2, #18
100074c6:	625a      	str	r2, [r3, #36]	; 0x24
	gpio_set_dir(LED_PIN, GPIO_OUT);
	
	initJoyPad();
100074c8:	f7ff ff8c 	bl	100073e4 <_Z10initJoyPadv>

	// start new image
	MandelStart();
100074cc:	f7ff fdf6 	bl	100070bc <_Z11MandelStartv>

	// print help
	Help();
100074d0:	f7ff ff2c 	bl	1000732c <_Z4Helpv>
100074d4:	4bc6      	ldr	r3, [pc, #792]	; (100077f0 <main+0x354>)
100074d6:	4698      	mov	r8, r3

	while (true)
	{
		// keys
		c = getchar_timeout_us(0);
100074d8:	2000      	movs	r0, #0
100074da:	f7fc fd5f 	bl	10003f9c <getchar_timeout_us>
		if (c == -1)
100074de:	1c43      	adds	r3, r0, #1
100074e0:	2b01      	cmp	r3, #1
100074e2:	d800      	bhi.n	100074e6 <main+0x4a>
100074e4:	e099      	b.n	1000761a <main+0x17e>
			else
				c = 0;
		}
		if (c != 0)
		{
			if ((c >= 'a') && (c <= 'z')) c -= 32;
100074e6:	0003      	movs	r3, r0
100074e8:	3b61      	subs	r3, #97	; 0x61
100074ea:	2b19      	cmp	r3, #25
100074ec:	d800      	bhi.n	100074f0 <main+0x54>
100074ee:	3820      	subs	r0, #32

			switch (c)
100074f0:	0003      	movs	r3, r0
100074f2:	3b20      	subs	r3, #32
100074f4:	2b38      	cmp	r3, #56	; 0x38
100074f6:	d803      	bhi.n	10007500 <main+0x64>
100074f8:	4abe      	ldr	r2, [pc, #760]	; (100077f4 <main+0x358>)
100074fa:	009b      	lsls	r3, r3, #2
100074fc:	58d3      	ldr	r3, [r2, r3]
100074fe:	469f      	mov	pc, r3
			case ' ': // redraw
				MandelStart();
				break;

			default:
				printf("\nInvalid key command %d\n",c);
10007500:	0001      	movs	r1, r0
10007502:	48bd      	ldr	r0, [pc, #756]	; (100077f8 <main+0x35c>)
10007504:	f7fc fd3a 	bl	10003f7c <__wrap_printf>
				Help();
10007508:	f7ff ff10 	bl	1000732c <_Z4Helpv>
				State();
1000750c:	f7ff fd7e 	bl	1000700c <_Z5Statev>
			}
		}

		// render line
		if (CurY < Height)
10007510:	4643      	mov	r3, r8
10007512:	681c      	ldr	r4, [r3, #0]
10007514:	4bb9      	ldr	r3, [pc, #740]	; (100077fc <main+0x360>)
10007516:	681d      	ldr	r5, [r3, #0]
10007518:	42ac      	cmp	r4, r5
1000751a:	db00      	blt.n	1000751e <main+0x82>
1000751c:	e0ba      	b.n	10007694 <main+0x1f8>
		{
			if (!Ok[CurY])
1000751e:	4bb8      	ldr	r3, [pc, #736]	; (10007800 <main+0x364>)
10007520:	5d1b      	ldrb	r3, [r3, r4]
10007522:	2b00      	cmp	r3, #0
10007524:	d100      	bne.n	10007528 <main+0x8c>
10007526:	e1fc      	b.n	10007922 <main+0x486>
					MandelDouble(Dst, Cid);
			}

			// next line
			CurY += IncY;
			Cid += SYd;
10007528:	4bb6      	ldr	r3, [pc, #728]	; (10007804 <main+0x368>)
1000752a:	681a      	ldr	r2, [r3, #0]
1000752c:	685b      	ldr	r3, [r3, #4]
1000752e:	9204      	str	r2, [sp, #16]
10007530:	9305      	str	r3, [sp, #20]
			Dst += DstInc;
10007532:	4bb5      	ldr	r3, [pc, #724]	; (10007808 <main+0x36c>)
10007534:	681b      	ldr	r3, [r3, #0]
10007536:	9300      	str	r3, [sp, #0]
			CurY += IncY;
10007538:	4bb4      	ldr	r3, [pc, #720]	; (1000780c <main+0x370>)
			Cid += SYd;
1000753a:	49b5      	ldr	r1, [pc, #724]	; (10007810 <main+0x374>)
			CurY += IncY;
1000753c:	681e      	ldr	r6, [r3, #0]
1000753e:	4643      	mov	r3, r8
			Cid += SYd;
10007540:	6808      	ldr	r0, [r1, #0]
10007542:	6849      	ldr	r1, [r1, #4]
			CurY += IncY;
10007544:	1934      	adds	r4, r6, r4
10007546:	601c      	str	r4, [r3, #0]
			Cid += SYd;
10007548:	9a04      	ldr	r2, [sp, #16]
1000754a:	9b05      	ldr	r3, [sp, #20]
1000754c:	f7f9 f978 	bl	10000840 <__wrap___aeabi_dadd>
10007550:	4bac      	ldr	r3, [pc, #688]	; (10007804 <main+0x368>)
10007552:	6018      	str	r0, [r3, #0]
10007554:	6059      	str	r1, [r3, #4]
			Dst += DstInc;
10007556:	4baf      	ldr	r3, [pc, #700]	; (10007814 <main+0x378>)
10007558:	681b      	ldr	r3, [r3, #0]
1000755a:	9302      	str	r3, [sp, #8]
1000755c:	9a02      	ldr	r2, [sp, #8]
1000755e:	9b00      	ldr	r3, [sp, #0]
10007560:	4694      	mov	ip, r2
10007562:	4aa9      	ldr	r2, [pc, #676]	; (10007808 <main+0x36c>)
10007564:	4463      	add	r3, ip
10007566:	6013      	str	r3, [r2, #0]

			if (CurY >= Height)
10007568:	42ac      	cmp	r4, r5
1000756a:	dbb5      	blt.n	100074d8 <main+0x3c>
			{
				if (IncY > 1)
1000756c:	2e01      	cmp	r6, #1
1000756e:	dc00      	bgt.n	10007572 <main+0xd6>
10007570:	e29a      	b.n	10007aa8 <main+0x60c>
				{
					IncY /= 2;
10007572:	4ba6      	ldr	r3, [pc, #664]	; (1000780c <main+0x370>)
10007574:	1076      	asrs	r6, r6, #1
10007576:	601e      	str	r6, [r3, #0]
	Core1Wait();
10007578:	f000 ffc6 	bl	10008508 <_Z9Core1Waitv>
	CurY = 0;
1000757c:	2300      	movs	r3, #0
1000757e:	4642      	mov	r2, r8
	SYd = -3*Size/Height * IncY;
10007580:	49a5      	ldr	r1, [pc, #660]	; (10007818 <main+0x37c>)
	CurY = 0;
10007582:	6013      	str	r3, [r2, #0]
	SYd = -3*Size/Height * IncY;
10007584:	4ba1      	ldr	r3, [pc, #644]	; (1000780c <main+0x370>)
10007586:	2200      	movs	r2, #0
10007588:	6808      	ldr	r0, [r1, #0]
1000758a:	6849      	ldr	r1, [r1, #4]
1000758c:	681e      	ldr	r6, [r3, #0]
1000758e:	4ba3      	ldr	r3, [pc, #652]	; (1000781c <main+0x380>)
10007590:	f7f9 f968 	bl	10000864 <__wrap___aeabi_dmul>
10007594:	4b99      	ldr	r3, [pc, #612]	; (100077fc <main+0x360>)
10007596:	0004      	movs	r4, r0
10007598:	6818      	ldr	r0, [r3, #0]
1000759a:	000d      	movs	r5, r1
1000759c:	f7f9 f9d2 	bl	10000944 <__wrap___aeabi_i2d>
100075a0:	0002      	movs	r2, r0
100075a2:	000b      	movs	r3, r1
100075a4:	0020      	movs	r0, r4
100075a6:	0029      	movs	r1, r5
100075a8:	f7f9 f953 	bl	10000852 <__wrap___aeabi_ddiv>
100075ac:	0004      	movs	r4, r0
100075ae:	0030      	movs	r0, r6
100075b0:	000d      	movs	r5, r1
100075b2:	f7f9 f9c7 	bl	10000944 <__wrap___aeabi_i2d>
100075b6:	0002      	movs	r2, r0
100075b8:	000b      	movs	r3, r1
100075ba:	0020      	movs	r0, r4
100075bc:	0029      	movs	r1, r5
100075be:	f7f9 f951 	bl	10000864 <__wrap___aeabi_dmul>
100075c2:	0004      	movs	r4, r0
100075c4:	000d      	movs	r5, r1
100075c6:	4b92      	ldr	r3, [pc, #584]	; (10007810 <main+0x374>)
100075c8:	601c      	str	r4, [r3, #0]
100075ca:	605d      	str	r5, [r3, #4]
	SYf = (float)SYd;
100075cc:	f7f9 fa0e 	bl	100009ec <__wrap___aeabi_d2f>
100075d0:	4b93      	ldr	r3, [pc, #588]	; (10007820 <main+0x384>)
100075d2:	2200      	movs	r2, #0
100075d4:	6018      	str	r0, [r3, #0]
100075d6:	2383      	movs	r3, #131	; 0x83
100075d8:	0020      	movs	r0, r4
100075da:	05db      	lsls	r3, r3, #23
100075dc:	0029      	movs	r1, r5
100075de:	f7f9 f941 	bl	10000864 <__wrap___aeabi_dmul>
100075e2:	f7f9 f9c7 	bl	10000974 <__wrap___aeabi_d2iz>
100075e6:	4b8f      	ldr	r3, [pc, #572]	; (10007824 <main+0x388>)
	Cid = Y0d;
100075e8:	4a86      	ldr	r2, [pc, #536]	; (10007804 <main+0x368>)
100075ea:	6018      	str	r0, [r3, #0]
100075ec:	4b8e      	ldr	r3, [pc, #568]	; (10007828 <main+0x38c>)
		c = getchar_timeout_us(0);
100075ee:	2000      	movs	r0, #0
	Cid = Y0d;
100075f0:	685c      	ldr	r4, [r3, #4]
100075f2:	681b      	ldr	r3, [r3, #0]
100075f4:	9300      	str	r3, [sp, #0]
100075f6:	9401      	str	r4, [sp, #4]
100075f8:	6013      	str	r3, [r2, #0]
100075fa:	6054      	str	r4, [r2, #4]
	Dst = Buf;
100075fc:	4b82      	ldr	r3, [pc, #520]	; (10007808 <main+0x36c>)
100075fe:	4a8b      	ldr	r2, [pc, #556]	; (1000782c <main+0x390>)
10007600:	601a      	str	r2, [r3, #0]
	DstInc = IncY * Width;
10007602:	4b8b      	ldr	r3, [pc, #556]	; (10007830 <main+0x394>)
10007604:	681b      	ldr	r3, [r3, #0]
10007606:	435e      	muls	r6, r3
10007608:	9300      	str	r3, [sp, #0]
1000760a:	4b82      	ldr	r3, [pc, #520]	; (10007814 <main+0x378>)
1000760c:	601e      	str	r6, [r3, #0]
		c = getchar_timeout_us(0);
1000760e:	f7fc fcc5 	bl	10003f9c <getchar_timeout_us>
		if (c == -1)
10007612:	1c43      	adds	r3, r0, #1
10007614:	2b01      	cmp	r3, #1
10007616:	d900      	bls.n	1000761a <main+0x17e>
10007618:	e765      	b.n	100074e6 <main+0x4a>
    return !!((1ul << gpio) & sio_hw->gpio_in);
1000761a:	24d0      	movs	r4, #208	; 0xd0
1000761c:	0624      	lsls	r4, r4, #24
1000761e:	6862      	ldr	r2, [r4, #4]
10007620:	2301      	movs	r3, #1
			if (!gpio_get(PB_LT))	// Left
10007622:	02d2      	lsls	r2, r2, #11
10007624:	d400      	bmi.n	10007628 <main+0x18c>
10007626:	e117      	b.n	10007858 <main+0x3bc>
10007628:	6862      	ldr	r2, [r4, #4]
1000762a:	0ed2      	lsrs	r2, r2, #27
			else if (!gpio_get(PB_UP))	// Up
1000762c:	4213      	tst	r3, r2
1000762e:	d100      	bne.n	10007632 <main+0x196>
10007630:	e21c      	b.n	10007a6c <main+0x5d0>
10007632:	6862      	ldr	r2, [r4, #4]
10007634:	0c52      	lsrs	r2, r2, #17
			else if (!gpio_get(PB_RT))	// Right
10007636:	4213      	tst	r3, r2
10007638:	d05f      	beq.n	100076fa <main+0x25e>
1000763a:	6862      	ldr	r2, [r4, #4]
1000763c:	0d92      	lsrs	r2, r2, #22
			else if (!gpio_get(PB_DN))	// Down
1000763e:	4213      	tst	r3, r2
10007640:	d03b      	beq.n	100076ba <main+0x21e>
10007642:	6862      	ldr	r2, [r4, #4]
10007644:	0c12      	lsrs	r2, r2, #16
			else if (!gpio_get(PB_UL))	// Zoom Out
10007646:	4213      	tst	r3, r2
10007648:	d100      	bne.n	1000764c <main+0x1b0>
1000764a:	e254      	b.n	10007af6 <main+0x65a>
1000764c:	6862      	ldr	r2, [r4, #4]
1000764e:	0c92      	lsrs	r2, r2, #18
			else if (!gpio_get(PB_FR))	//Zoom In
10007650:	4213      	tst	r3, r2
10007652:	d000      	beq.n	10007656 <main+0x1ba>
10007654:	e75c      	b.n	10007510 <main+0x74>
10007656:	6862      	ldr	r2, [r4, #4]
10007658:	0c92      	lsrs	r2, r2, #18
				while (!gpio_get(PB_FR))
1000765a:	4213      	tst	r3, r2
1000765c:	d107      	bne.n	1000766e <main+0x1d2>
1000765e:	2501      	movs	r5, #1
					sleep_ms(20);
10007660:	2014      	movs	r0, #20
10007662:	f7fd fa17 	bl	10004a94 <sleep_ms>
10007666:	6863      	ldr	r3, [r4, #4]
10007668:	0c9b      	lsrs	r3, r3, #18
				while (!gpio_get(PB_FR))
1000766a:	421d      	tst	r5, r3
1000766c:	d0f8      	beq.n	10007660 <main+0x1c4>
				Size /= 2;
1000766e:	496a      	ldr	r1, [pc, #424]	; (10007818 <main+0x37c>)
10007670:	2200      	movs	r2, #0
10007672:	6808      	ldr	r0, [r1, #0]
10007674:	6849      	ldr	r1, [r1, #4]
10007676:	4b6f      	ldr	r3, [pc, #444]	; (10007834 <main+0x398>)
10007678:	f7f9 f8f4 	bl	10000864 <__wrap___aeabi_dmul>
1000767c:	4b66      	ldr	r3, [pc, #408]	; (10007818 <main+0x37c>)
1000767e:	6018      	str	r0, [r3, #0]
10007680:	6059      	str	r1, [r3, #4]
				MandelStart();
10007682:	f7ff fd1b 	bl	100070bc <_Z11MandelStartv>
		if (CurY < Height)
10007686:	4643      	mov	r3, r8
10007688:	681c      	ldr	r4, [r3, #0]
1000768a:	4b5c      	ldr	r3, [pc, #368]	; (100077fc <main+0x360>)
1000768c:	681d      	ldr	r5, [r3, #0]
1000768e:	42ac      	cmp	r4, r5
10007690:	da00      	bge.n	10007694 <main+0x1f8>
10007692:	e744      	b.n	1000751e <main+0x82>
    sio_hw->gpio_set = mask;
10007694:	24d0      	movs	r4, #208	; 0xd0
10007696:	2580      	movs	r5, #128	; 0x80
10007698:	0624      	lsls	r4, r4, #24
1000769a:	04ad      	lsls	r5, r5, #18
		}
		else
		{
			// indicate work done
			gpio_put(LED_PIN, 1);
			sleep_ms(125);
1000769c:	207d      	movs	r0, #125	; 0x7d
1000769e:	6165      	str	r5, [r4, #20]
100076a0:	f7fd f9f8 	bl	10004a94 <sleep_ms>
			gpio_put(LED_PIN, 0);
			sleep_ms(125);
100076a4:	207d      	movs	r0, #125	; 0x7d
    sio_hw->gpio_clr = mask;
100076a6:	61a5      	str	r5, [r4, #24]
100076a8:	f7fd f9f4 	bl	10004a94 <sleep_ms>
100076ac:	e714      	b.n	100074d8 <main+0x3c>
				Arithm = USE_DBL;
100076ae:	2302      	movs	r3, #2
100076b0:	4a61      	ldr	r2, [pc, #388]	; (10007838 <main+0x39c>)
100076b2:	6013      	str	r3, [r2, #0]
				MandelStart();
100076b4:	f7ff fd02 	bl	100070bc <_Z11MandelStartv>
				break;
100076b8:	e72a      	b.n	10007510 <main+0x74>
    return !!((1ul << gpio) & sio_hw->gpio_in);
100076ba:	6862      	ldr	r2, [r4, #4]
100076bc:	0d92      	lsrs	r2, r2, #22
				while (!gpio_get(PB_DN))
100076be:	4213      	tst	r3, r2
100076c0:	d107      	bne.n	100076d2 <main+0x236>
100076c2:	2501      	movs	r5, #1
					sleep_ms(20);
100076c4:	2014      	movs	r0, #20
100076c6:	f7fd f9e5 	bl	10004a94 <sleep_ms>
100076ca:	6863      	ldr	r3, [r4, #4]
100076cc:	0d9b      	lsrs	r3, r3, #22
				while (!gpio_get(PB_DN))
100076ce:	421d      	tst	r5, r3
100076d0:	d0f8      	beq.n	100076c4 <main+0x228>
				OffY -= Size/5;
100076d2:	4951      	ldr	r1, [pc, #324]	; (10007818 <main+0x37c>)
100076d4:	2200      	movs	r2, #0
100076d6:	6808      	ldr	r0, [r1, #0]
100076d8:	6849      	ldr	r1, [r1, #4]
100076da:	4b58      	ldr	r3, [pc, #352]	; (1000783c <main+0x3a0>)
100076dc:	f7f9 f8b9 	bl	10000852 <__wrap___aeabi_ddiv>
100076e0:	000b      	movs	r3, r1
100076e2:	4957      	ldr	r1, [pc, #348]	; (10007840 <main+0x3a4>)
100076e4:	0002      	movs	r2, r0
100076e6:	6808      	ldr	r0, [r1, #0]
100076e8:	6849      	ldr	r1, [r1, #4]
100076ea:	f7f9 f8a0 	bl	1000082e <__wrap___aeabi_dsub>
100076ee:	4b54      	ldr	r3, [pc, #336]	; (10007840 <main+0x3a4>)
100076f0:	6018      	str	r0, [r3, #0]
100076f2:	6059      	str	r1, [r3, #4]
				MandelStart();
100076f4:	f7ff fce2 	bl	100070bc <_Z11MandelStartv>
				break;
100076f8:	e70a      	b.n	10007510 <main+0x74>
100076fa:	6862      	ldr	r2, [r4, #4]
100076fc:	0c52      	lsrs	r2, r2, #17
				while (!gpio_get(PB_RT))
100076fe:	4213      	tst	r3, r2
10007700:	d107      	bne.n	10007712 <main+0x276>
10007702:	2501      	movs	r5, #1
					sleep_ms(20);
10007704:	2014      	movs	r0, #20
10007706:	f7fd f9c5 	bl	10004a94 <sleep_ms>
1000770a:	6863      	ldr	r3, [r4, #4]
1000770c:	0c5b      	lsrs	r3, r3, #17
				while (!gpio_get(PB_RT))
1000770e:	421d      	tst	r5, r3
10007710:	d0f8      	beq.n	10007704 <main+0x268>
				OffX += Size/5;
10007712:	4941      	ldr	r1, [pc, #260]	; (10007818 <main+0x37c>)
10007714:	2200      	movs	r2, #0
10007716:	6808      	ldr	r0, [r1, #0]
10007718:	6849      	ldr	r1, [r1, #4]
1000771a:	4b48      	ldr	r3, [pc, #288]	; (1000783c <main+0x3a0>)
1000771c:	f7f9 f899 	bl	10000852 <__wrap___aeabi_ddiv>
10007720:	4b48      	ldr	r3, [pc, #288]	; (10007844 <main+0x3a8>)
10007722:	681a      	ldr	r2, [r3, #0]
10007724:	685b      	ldr	r3, [r3, #4]
10007726:	f7f9 f88b 	bl	10000840 <__wrap___aeabi_dadd>
1000772a:	4b46      	ldr	r3, [pc, #280]	; (10007844 <main+0x3a8>)
1000772c:	6018      	str	r0, [r3, #0]
1000772e:	6059      	str	r1, [r3, #4]
				MandelStart();
10007730:	f7ff fcc4 	bl	100070bc <_Z11MandelStartv>
				break;
10007734:	e6ec      	b.n	10007510 <main+0x74>
				SysClk = (int)((double)Vmode.freq*(Vmode.cpp*Vmode.div+1)/(Vmode.cpp*Vmode.div)-2000);
10007736:	4a44      	ldr	r2, [pc, #272]	; (10007848 <main+0x3ac>)
10007738:	4b43      	ldr	r3, [pc, #268]	; (10007848 <main+0x3ac>)
1000773a:	8a94      	ldrh	r4, [r2, #20]
1000773c:	8adb      	ldrh	r3, [r3, #22]
1000773e:	6890      	ldr	r0, [r2, #8]
10007740:	435c      	muls	r4, r3
10007742:	f7f9 f8fb 	bl	1000093c <__wrap___aeabi_ui2d>
10007746:	0006      	movs	r6, r0
10007748:	1c60      	adds	r0, r4, #1
1000774a:	000f      	movs	r7, r1
1000774c:	f7f9 f8fa 	bl	10000944 <__wrap___aeabi_i2d>
10007750:	0002      	movs	r2, r0
10007752:	000b      	movs	r3, r1
10007754:	0030      	movs	r0, r6
10007756:	0039      	movs	r1, r7
10007758:	f7f9 f884 	bl	10000864 <__wrap___aeabi_dmul>
1000775c:	0006      	movs	r6, r0
1000775e:	0020      	movs	r0, r4
10007760:	000f      	movs	r7, r1
10007762:	f7f9 f8ef 	bl	10000944 <__wrap___aeabi_i2d>
10007766:	0002      	movs	r2, r0
10007768:	000b      	movs	r3, r1
1000776a:	0030      	movs	r0, r6
1000776c:	0039      	movs	r1, r7
1000776e:	f7f9 f870 	bl	10000852 <__wrap___aeabi_ddiv>
10007772:	2200      	movs	r2, #0
10007774:	4b35      	ldr	r3, [pc, #212]	; (1000784c <main+0x3b0>)
10007776:	f7f9 f85a 	bl	1000082e <__wrap___aeabi_dsub>
1000777a:	f7f9 f8fb 	bl	10000974 <__wrap___aeabi_d2iz>
1000777e:	4b34      	ldr	r3, [pc, #208]	; (10007850 <main+0x3b4>)
10007780:	6018      	str	r0, [r3, #0]
				Init();
10007782:	f7ff fbc3 	bl	10006f0c <_Z4Initv>
				State();
10007786:	f7ff fc41 	bl	1000700c <_Z5Statev>
				break;
1000778a:	e6c1      	b.n	10007510 <main+0x74>
				SysClk = (int)((double)Vmode.freq*(Vmode.cpp*Vmode.div-1)/(Vmode.cpp*Vmode.div)-2000);
1000778c:	4a2e      	ldr	r2, [pc, #184]	; (10007848 <main+0x3ac>)
1000778e:	4b2e      	ldr	r3, [pc, #184]	; (10007848 <main+0x3ac>)
10007790:	8a94      	ldrh	r4, [r2, #20]
10007792:	8adb      	ldrh	r3, [r3, #22]
10007794:	6890      	ldr	r0, [r2, #8]
10007796:	435c      	muls	r4, r3
10007798:	f7f9 f8d0 	bl	1000093c <__wrap___aeabi_ui2d>
1000779c:	0006      	movs	r6, r0
1000779e:	1e60      	subs	r0, r4, #1
100077a0:	000f      	movs	r7, r1
100077a2:	f7f9 f8cf 	bl	10000944 <__wrap___aeabi_i2d>
100077a6:	0002      	movs	r2, r0
100077a8:	000b      	movs	r3, r1
100077aa:	0030      	movs	r0, r6
100077ac:	0039      	movs	r1, r7
100077ae:	f7f9 f859 	bl	10000864 <__wrap___aeabi_dmul>
100077b2:	0006      	movs	r6, r0
100077b4:	0020      	movs	r0, r4
100077b6:	000f      	movs	r7, r1
100077b8:	f7f9 f8c4 	bl	10000944 <__wrap___aeabi_i2d>
100077bc:	0002      	movs	r2, r0
100077be:	000b      	movs	r3, r1
100077c0:	0030      	movs	r0, r6
100077c2:	0039      	movs	r1, r7
100077c4:	f7f9 f845 	bl	10000852 <__wrap___aeabi_ddiv>
100077c8:	4b20      	ldr	r3, [pc, #128]	; (1000784c <main+0x3b0>)
100077ca:	2200      	movs	r2, #0
100077cc:	f7f9 f82f 	bl	1000082e <__wrap___aeabi_dsub>
100077d0:	f7f9 f8d0 	bl	10000974 <__wrap___aeabi_d2iz>
				if (SysClk < 10000) SysClk = 10000;
100077d4:	4b1f      	ldr	r3, [pc, #124]	; (10007854 <main+0x3b8>)
100077d6:	4298      	cmp	r0, r3
100077d8:	dc00      	bgt.n	100077dc <main+0x340>
100077da:	e27b      	b.n	10007cd4 <main+0x838>
				SysClk = (int)((double)Vmode.freq*(Vmode.cpp*Vmode.div-1)/(Vmode.cpp*Vmode.div)-2000);
100077dc:	4b1c      	ldr	r3, [pc, #112]	; (10007850 <main+0x3b4>)
100077de:	6018      	str	r0, [r3, #0]
				Init();
100077e0:	f7ff fb94 	bl	10006f0c <_Z4Initv>
				State();
100077e4:	f7ff fc12 	bl	1000700c <_Z5Statev>
				break;
100077e8:	e692      	b.n	10007510 <main+0x74>
100077ea:	46c0      	nop			; (mov r8, r8)
100077ec:	1000846d 	.word	0x1000846d
100077f0:	200021c8 	.word	0x200021c8
100077f4:	10009f1c 	.word	0x10009f1c
100077f8:	10009ee8 	.word	0x10009ee8
100077fc:	200021cc 	.word	0x200021cc
10007800:	20038054 	.word	0x20038054
10007804:	20002a50 	.word	0x20002a50
10007808:	200370c8 	.word	0x200370c8
1000780c:	200021d4 	.word	0x200021d4
10007810:	20002a78 	.word	0x20002a78
10007814:	200370cc 	.word	0x200370cc
10007818:	200021d8 	.word	0x200021d8
1000781c:	c0080000 	.word	0xc0080000
10007820:	200389ec 	.word	0x200389ec
10007824:	200389f0 	.word	0x200389f0
10007828:	20002a90 	.word	0x20002a90
1000782c:	20002cc0 	.word	0x20002cc0
10007830:	200021e8 	.word	0x200021e8
10007834:	3fe00000 	.word	0x3fe00000
10007838:	20002cbc 	.word	0x20002cbc
1000783c:	40140000 	.word	0x40140000
10007840:	20002a68 	.word	0x20002a68
10007844:	20002a60 	.word	0x20002a60
10007848:	20038ea4 	.word	0x20038ea4
1000784c:	409f4000 	.word	0x409f4000
10007850:	200021e4 	.word	0x200021e4
10007854:	0000270f 	.word	0x0000270f
10007858:	6862      	ldr	r2, [r4, #4]
1000785a:	0d12      	lsrs	r2, r2, #20
				while (!gpio_get(PB_LT))
1000785c:	4213      	tst	r3, r2
1000785e:	d107      	bne.n	10007870 <main+0x3d4>
10007860:	2501      	movs	r5, #1
					sleep_ms(20);
10007862:	2014      	movs	r0, #20
10007864:	f7fd f916 	bl	10004a94 <sleep_ms>
10007868:	6863      	ldr	r3, [r4, #4]
1000786a:	0d1b      	lsrs	r3, r3, #20
				while (!gpio_get(PB_LT))
1000786c:	421d      	tst	r5, r3
1000786e:	d0f8      	beq.n	10007862 <main+0x3c6>
				OffX -= Size/5;
10007870:	49d3      	ldr	r1, [pc, #844]	; (10007bc0 <main+0x724>)
10007872:	2200      	movs	r2, #0
10007874:	6808      	ldr	r0, [r1, #0]
10007876:	6849      	ldr	r1, [r1, #4]
10007878:	4bd2      	ldr	r3, [pc, #840]	; (10007bc4 <main+0x728>)
1000787a:	f7f8 ffea 	bl	10000852 <__wrap___aeabi_ddiv>
1000787e:	000b      	movs	r3, r1
10007880:	49d1      	ldr	r1, [pc, #836]	; (10007bc8 <main+0x72c>)
10007882:	0002      	movs	r2, r0
10007884:	6808      	ldr	r0, [r1, #0]
10007886:	6849      	ldr	r1, [r1, #4]
10007888:	f7f8 ffd1 	bl	1000082e <__wrap___aeabi_dsub>
1000788c:	4bce      	ldr	r3, [pc, #824]	; (10007bc8 <main+0x72c>)
1000788e:	6018      	str	r0, [r3, #0]
10007890:	6059      	str	r1, [r3, #4]
				MandelStart();
10007892:	f7ff fc13 	bl	100070bc <_Z11MandelStartv>
				break;
10007896:	e63b      	b.n	10007510 <main+0x74>
				Steps *= 2;
10007898:	4bcc      	ldr	r3, [pc, #816]	; (10007bcc <main+0x730>)
1000789a:	681b      	ldr	r3, [r3, #0]
1000789c:	005a      	lsls	r2, r3, #1
				if (Steps < 0) Steps = 0x40000000;
1000789e:	005b      	lsls	r3, r3, #1
100078a0:	d500      	bpl.n	100078a4 <main+0x408>
100078a2:	e220      	b.n	10007ce6 <main+0x84a>
				Steps *= 2;
100078a4:	4bc9      	ldr	r3, [pc, #804]	; (10007bcc <main+0x730>)
100078a6:	601a      	str	r2, [r3, #0]
				MandelStart();
100078a8:	f7ff fc08 	bl	100070bc <_Z11MandelStartv>
				break;
100078ac:	e630      	b.n	10007510 <main+0x74>
				Steps /= 2;
100078ae:	4bc7      	ldr	r3, [pc, #796]	; (10007bcc <main+0x730>)
100078b0:	49c6      	ldr	r1, [pc, #792]	; (10007bcc <main+0x730>)
100078b2:	681a      	ldr	r2, [r3, #0]
100078b4:	0fd3      	lsrs	r3, r2, #31
100078b6:	189b      	adds	r3, r3, r2
100078b8:	105b      	asrs	r3, r3, #1
100078ba:	600b      	str	r3, [r1, #0]
				Shift--;
100078bc:	4bc4      	ldr	r3, [pc, #784]	; (10007bd0 <main+0x734>)
100078be:	49c4      	ldr	r1, [pc, #784]	; (10007bd0 <main+0x734>)
100078c0:	681b      	ldr	r3, [r3, #0]
100078c2:	9300      	str	r3, [sp, #0]
100078c4:	3b01      	subs	r3, #1
100078c6:	600b      	str	r3, [r1, #0]
				if (Steps < 1) Steps = 1;
100078c8:	2a01      	cmp	r2, #1
100078ca:	dd00      	ble.n	100078ce <main+0x432>
100078cc:	e6f2      	b.n	100076b4 <main+0x218>
100078ce:	2301      	movs	r3, #1
100078d0:	4abe      	ldr	r2, [pc, #760]	; (10007bcc <main+0x730>)
100078d2:	6013      	str	r3, [r2, #0]
				MandelStart();
100078d4:	f7ff fbf2 	bl	100070bc <_Z11MandelStartv>
				break;
100078d8:	e61a      	b.n	10007510 <main+0x74>
				HighRes = RES_MED;
100078da:	2301      	movs	r3, #1
100078dc:	4abd      	ldr	r2, [pc, #756]	; (10007bd4 <main+0x738>)
100078de:	6013      	str	r3, [r2, #0]
				Init();
100078e0:	f7ff fb14 	bl	10006f0c <_Z4Initv>
				MandelStart();
100078e4:	f7ff fbea 	bl	100070bc <_Z11MandelStartv>
				break;
100078e8:	e612      	b.n	10007510 <main+0x74>
				HighRes = RES_LOW;
100078ea:	2300      	movs	r3, #0
100078ec:	4ab9      	ldr	r2, [pc, #740]	; (10007bd4 <main+0x738>)
100078ee:	6013      	str	r3, [r2, #0]
				Init();
100078f0:	f7ff fb0c 	bl	10006f0c <_Z4Initv>
				MandelStart();
100078f4:	f7ff fbe2 	bl	100070bc <_Z11MandelStartv>
				break;
100078f8:	e60a      	b.n	10007510 <main+0x74>
				Arithm = USE_INT;
100078fa:	2300      	movs	r3, #0
100078fc:	4ab6      	ldr	r2, [pc, #728]	; (10007bd8 <main+0x73c>)
100078fe:	6013      	str	r3, [r2, #0]
				MandelStart();
10007900:	f7ff fbdc 	bl	100070bc <_Z11MandelStartv>
				break;
10007904:	e604      	b.n	10007510 <main+0x74>
				HighRes = RES_HIGH;
10007906:	2302      	movs	r3, #2
10007908:	4ab2      	ldr	r2, [pc, #712]	; (10007bd4 <main+0x738>)
1000790a:	6013      	str	r3, [r2, #0]
				Init();
1000790c:	f7ff fafe 	bl	10006f0c <_Z4Initv>
				MandelStart();
10007910:	f7ff fbd4 	bl	100070bc <_Z11MandelStartv>
				break;
10007914:	e5fc      	b.n	10007510 <main+0x74>
				Arithm = USE_FLT;
10007916:	2301      	movs	r3, #1
10007918:	4aaf      	ldr	r2, [pc, #700]	; (10007bd8 <main+0x73c>)
1000791a:	6013      	str	r3, [r2, #0]
				MandelStart();
1000791c:	f7ff fbce 	bl	100070bc <_Z11MandelStartv>
				break;
10007920:	e5f6      	b.n	10007510 <main+0x74>
				Ok[CurY] = True;
10007922:	4aae      	ldr	r2, [pc, #696]	; (10007bdc <main+0x740>)
10007924:	3301      	adds	r3, #1
10007926:	5513      	strb	r3, [r2, r4]
				if (!Core1Busy())
10007928:	f000 fde4 	bl	100084f4 <_Z9Core1Busyv>
1000792c:	2800      	cmp	r0, #0
1000792e:	d100      	bne.n	10007932 <main+0x496>
10007930:	e0cf      	b.n	10007ad2 <main+0x636>
				else if (Arithm == USE_INT)
10007932:	4ba9      	ldr	r3, [pc, #676]	; (10007bd8 <main+0x73c>)
10007934:	681b      	ldr	r3, [r3, #0]
10007936:	2b00      	cmp	r3, #0
10007938:	d100      	bne.n	1000793c <main+0x4a0>
1000793a:	e104      	b.n	10007b46 <main+0x6aa>
				else if (Arithm == USE_FLT)
1000793c:	2b01      	cmp	r3, #1
1000793e:	d100      	bne.n	10007942 <main+0x4a6>
10007940:	e113      	b.n	10007b6a <main+0x6ce>
					MandelDouble(Dst, Cid);
10007942:	4ba7      	ldr	r3, [pc, #668]	; (10007be0 <main+0x744>)
10007944:	681d      	ldr	r5, [r3, #0]
10007946:	4ba7      	ldr	r3, [pc, #668]	; (10007be4 <main+0x748>)
10007948:	46ab      	mov	fp, r5
1000794a:	685c      	ldr	r4, [r3, #4]
1000794c:	681b      	ldr	r3, [r3, #0]
1000794e:	9304      	str	r3, [sp, #16]
10007950:	9405      	str	r4, [sp, #20]
	int steps = Steps;
10007952:	4b9e      	ldr	r3, [pc, #632]	; (10007bcc <main+0x730>)
					MandelDouble(Dst, Cid);
10007954:	9500      	str	r5, [sp, #0]
	int steps = Steps;
10007956:	681b      	ldr	r3, [r3, #0]
10007958:	469a      	mov	sl, r3
	int w = Width;
1000795a:	4ba3      	ldr	r3, [pc, #652]	; (10007be8 <main+0x74c>)
1000795c:	681c      	ldr	r4, [r3, #0]
	int s = Shift;
1000795e:	4b9c      	ldr	r3, [pc, #624]	; (10007bd0 <main+0x734>)
10007960:	44a3      	add	fp, r4
10007962:	681b      	ldr	r3, [r3, #0]
10007964:	930b      	str	r3, [sp, #44]	; 0x2c
	sx = SXd;
10007966:	4ba1      	ldr	r3, [pc, #644]	; (10007bec <main+0x750>)
10007968:	681a      	ldr	r2, [r3, #0]
1000796a:	685b      	ldr	r3, [r3, #4]
1000796c:	9208      	str	r2, [sp, #32]
1000796e:	9309      	str	r3, [sp, #36]	; 0x24
	cr = X0f;
10007970:	4b9f      	ldr	r3, [pc, #636]	; (10007bf0 <main+0x754>)
10007972:	6818      	ldr	r0, [r3, #0]
10007974:	f7f9 fc46 	bl	10001204 <__wrap___aeabi_f2d>
10007978:	9006      	str	r0, [sp, #24]
1000797a:	9107      	str	r1, [sp, #28]
	for (x = 0; x < w; x++)
1000797c:	2c00      	cmp	r4, #0
1000797e:	dc00      	bgt.n	10007982 <main+0x4e6>
10007980:	e1ac      	b.n	10007cdc <main+0x840>
10007982:	465b      	mov	r3, fp
10007984:	930a      	str	r3, [sp, #40]	; 0x28
10007986:	9b00      	ldr	r3, [sp, #0]
10007988:	469b      	mov	fp, r3
		for (i = steps; i > 0; i--)
1000798a:	4653      	mov	r3, sl
1000798c:	2b00      	cmp	r3, #0
1000798e:	dc00      	bgt.n	10007992 <main+0x4f6>
10007990:	e199      	b.n	10007cc6 <main+0x82a>
		zi = ci;
10007992:	9e04      	ldr	r6, [sp, #16]
10007994:	9f05      	ldr	r7, [sp, #20]
		for (i = steps; i > 0; i--)
10007996:	9c06      	ldr	r4, [sp, #24]
10007998:	9d07      	ldr	r5, [sp, #28]
1000799a:	46d1      	mov	r9, sl
1000799c:	e024      	b.n	100079e8 <main+0x54c>
			zi = 2*zr*zi + ci;
1000799e:	0022      	movs	r2, r4
100079a0:	002b      	movs	r3, r5
100079a2:	0020      	movs	r0, r4
100079a4:	0029      	movs	r1, r5
100079a6:	f7f8 ff4b 	bl	10000840 <__wrap___aeabi_dadd>
100079aa:	0032      	movs	r2, r6
100079ac:	003b      	movs	r3, r7
100079ae:	f7f8 ff59 	bl	10000864 <__wrap___aeabi_dmul>
100079b2:	0002      	movs	r2, r0
100079b4:	000b      	movs	r3, r1
100079b6:	9804      	ldr	r0, [sp, #16]
100079b8:	9905      	ldr	r1, [sp, #20]
100079ba:	f7f8 ff41 	bl	10000840 <__wrap___aeabi_dadd>
			zr = zr2 - zi2 + cr;
100079be:	9a02      	ldr	r2, [sp, #8]
100079c0:	9b03      	ldr	r3, [sp, #12]
			zi = 2*zr*zi + ci;
100079c2:	0006      	movs	r6, r0
100079c4:	000f      	movs	r7, r1
			zr = zr2 - zi2 + cr;
100079c6:	9800      	ldr	r0, [sp, #0]
100079c8:	9901      	ldr	r1, [sp, #4]
100079ca:	f7f8 ff30 	bl	1000082e <__wrap___aeabi_dsub>
100079ce:	9a06      	ldr	r2, [sp, #24]
100079d0:	9b07      	ldr	r3, [sp, #28]
100079d2:	f7f8 ff35 	bl	10000840 <__wrap___aeabi_dadd>
		for (i = steps; i > 0; i--)
100079d6:	2301      	movs	r3, #1
100079d8:	425b      	negs	r3, r3
100079da:	469c      	mov	ip, r3
100079dc:	44e1      	add	r9, ip
100079de:	464b      	mov	r3, r9
			zr = zr2 - zi2 + cr;
100079e0:	0004      	movs	r4, r0
100079e2:	000d      	movs	r5, r1
		for (i = steps; i > 0; i--)
100079e4:	2b00      	cmp	r3, #0
100079e6:	d03f      	beq.n	10007a68 <main+0x5cc>
			zr2 = zr*zr;
100079e8:	0022      	movs	r2, r4
100079ea:	002b      	movs	r3, r5
100079ec:	0020      	movs	r0, r4
100079ee:	0029      	movs	r1, r5
100079f0:	f7f8 ff38 	bl	10000864 <__wrap___aeabi_dmul>
			zi2 = zi*zi;
100079f4:	0032      	movs	r2, r6
			zr2 = zr*zr;
100079f6:	9000      	str	r0, [sp, #0]
100079f8:	9101      	str	r1, [sp, #4]
			zi2 = zi*zi;
100079fa:	003b      	movs	r3, r7
100079fc:	0030      	movs	r0, r6
100079fe:	0039      	movs	r1, r7
10007a00:	f7f8 ff30 	bl	10000864 <__wrap___aeabi_dmul>
10007a04:	0002      	movs	r2, r0
10007a06:	000b      	movs	r3, r1
			if (zr2 + zi2 > 4.0) break;
10007a08:	9800      	ldr	r0, [sp, #0]
10007a0a:	9901      	ldr	r1, [sp, #4]
10007a0c:	9202      	str	r2, [sp, #8]
10007a0e:	9303      	str	r3, [sp, #12]
10007a10:	f7f8 ff16 	bl	10000840 <__wrap___aeabi_dadd>
10007a14:	2200      	movs	r2, #0
10007a16:	4b77      	ldr	r3, [pc, #476]	; (10007bf4 <main+0x758>)
10007a18:	f7f8 ff7c 	bl	10000914 <__wrap___aeabi_dcmpgt>
10007a1c:	2800      	cmp	r0, #0
10007a1e:	d0be      	beq.n	1000799e <main+0x502>
			*dst = g[(steps - i) >> s];
10007a20:	464a      	mov	r2, r9
10007a22:	4653      	mov	r3, sl
10007a24:	1a9b      	subs	r3, r3, r2
10007a26:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
10007a28:	4113      	asrs	r3, r2
10007a2a:	4a73      	ldr	r2, [pc, #460]	; (10007bf8 <main+0x75c>)
10007a2c:	5cd3      	ldrb	r3, [r2, r3]
10007a2e:	465a      	mov	r2, fp
		cr += sx;
10007a30:	9806      	ldr	r0, [sp, #24]
10007a32:	9907      	ldr	r1, [sp, #28]
10007a34:	7013      	strb	r3, [r2, #0]
		dst++;
10007a36:	2301      	movs	r3, #1
10007a38:	469c      	mov	ip, r3
		cr += sx;
10007a3a:	9a08      	ldr	r2, [sp, #32]
10007a3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
		dst++;
10007a3e:	44e3      	add	fp, ip
		cr += sx;
10007a40:	f7f8 fefe 	bl	10000840 <__wrap___aeabi_dadd>
	for (x = 0; x < w; x++)
10007a44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
		cr += sx;
10007a46:	9006      	str	r0, [sp, #24]
10007a48:	9107      	str	r1, [sp, #28]
	for (x = 0; x < w; x++)
10007a4a:	459b      	cmp	fp, r3
10007a4c:	d19d      	bne.n	1000798a <main+0x4ee>
			CurY += IncY;
10007a4e:	4643      	mov	r3, r8
10007a50:	681c      	ldr	r4, [r3, #0]
			Cid += SYd;
10007a52:	4b64      	ldr	r3, [pc, #400]	; (10007be4 <main+0x748>)
10007a54:	681a      	ldr	r2, [r3, #0]
10007a56:	685b      	ldr	r3, [r3, #4]
10007a58:	9204      	str	r2, [sp, #16]
10007a5a:	9305      	str	r3, [sp, #20]
			Dst += DstInc;
10007a5c:	4b60      	ldr	r3, [pc, #384]	; (10007be0 <main+0x744>)
10007a5e:	681b      	ldr	r3, [r3, #0]
10007a60:	9300      	str	r3, [sp, #0]
			if (CurY >= Height)
10007a62:	4b66      	ldr	r3, [pc, #408]	; (10007bfc <main+0x760>)
10007a64:	681d      	ldr	r5, [r3, #0]
10007a66:	e567      	b.n	10007538 <main+0x9c>
			*dst = 0;
10007a68:	2300      	movs	r3, #0
10007a6a:	e7e0      	b.n	10007a2e <main+0x592>
10007a6c:	6862      	ldr	r2, [r4, #4]
10007a6e:	0ed2      	lsrs	r2, r2, #27
				while (!gpio_get(PB_UP))
10007a70:	4213      	tst	r3, r2
10007a72:	d107      	bne.n	10007a84 <main+0x5e8>
10007a74:	2501      	movs	r5, #1
					sleep_ms(20);
10007a76:	2014      	movs	r0, #20
10007a78:	f7fd f80c 	bl	10004a94 <sleep_ms>
10007a7c:	6863      	ldr	r3, [r4, #4]
10007a7e:	0edb      	lsrs	r3, r3, #27
				while (!gpio_get(PB_UP))
10007a80:	421d      	tst	r5, r3
10007a82:	d0f8      	beq.n	10007a76 <main+0x5da>
				OffY += Size/5;
10007a84:	494e      	ldr	r1, [pc, #312]	; (10007bc0 <main+0x724>)
10007a86:	2200      	movs	r2, #0
10007a88:	6808      	ldr	r0, [r1, #0]
10007a8a:	6849      	ldr	r1, [r1, #4]
10007a8c:	4b4d      	ldr	r3, [pc, #308]	; (10007bc4 <main+0x728>)
10007a8e:	f7f8 fee0 	bl	10000852 <__wrap___aeabi_ddiv>
10007a92:	4b5b      	ldr	r3, [pc, #364]	; (10007c00 <main+0x764>)
10007a94:	681a      	ldr	r2, [r3, #0]
10007a96:	685b      	ldr	r3, [r3, #4]
10007a98:	f7f8 fed2 	bl	10000840 <__wrap___aeabi_dadd>
10007a9c:	4b58      	ldr	r3, [pc, #352]	; (10007c00 <main+0x764>)
10007a9e:	6018      	str	r0, [r3, #0]
10007aa0:	6059      	str	r1, [r3, #4]
				MandelStart();
10007aa2:	f7ff fb0b 	bl	100070bc <_Z11MandelStartv>
				break;
10007aa6:	e533      	b.n	10007510 <main+0x74>
					printf("Rendered on %g seconds\n", (time_us_64() - StartTime)*1e-6);
10007aa8:	f7fd f8da 	bl	10004c60 <time_us_64>
10007aac:	4b55      	ldr	r3, [pc, #340]	; (10007c04 <main+0x768>)
10007aae:	685c      	ldr	r4, [r3, #4]
10007ab0:	681b      	ldr	r3, [r3, #0]
10007ab2:	1ac0      	subs	r0, r0, r3
10007ab4:	41a1      	sbcs	r1, r4
10007ab6:	9300      	str	r3, [sp, #0]
10007ab8:	9401      	str	r4, [sp, #4]
10007aba:	f7f8 ff8b 	bl	100009d4 <__wrap___aeabi_ul2d>
10007abe:	4a52      	ldr	r2, [pc, #328]	; (10007c08 <main+0x76c>)
10007ac0:	4b52      	ldr	r3, [pc, #328]	; (10007c0c <main+0x770>)
10007ac2:	f7f8 fecf 	bl	10000864 <__wrap___aeabi_dmul>
10007ac6:	0002      	movs	r2, r0
10007ac8:	000b      	movs	r3, r1
10007aca:	4851      	ldr	r0, [pc, #324]	; (10007c10 <main+0x774>)
10007acc:	f7fc fa56 	bl	10003f7c <__wrap_printf>
10007ad0:	e502      	b.n	100074d8 <main+0x3c>
					Core1Dst = Dst;
10007ad2:	4b43      	ldr	r3, [pc, #268]	; (10007be0 <main+0x744>)
					Core1Exec(MandelCore1);
10007ad4:	484f      	ldr	r0, [pc, #316]	; (10007c14 <main+0x778>)
					Core1Dst = Dst;
10007ad6:	681b      	ldr	r3, [r3, #0]
10007ad8:	9300      	str	r3, [sp, #0]
10007ada:	9a00      	ldr	r2, [sp, #0]
10007adc:	4b4e      	ldr	r3, [pc, #312]	; (10007c18 <main+0x77c>)
10007ade:	601a      	str	r2, [r3, #0]
					Core1Cid = Cid;
10007ae0:	4a4e      	ldr	r2, [pc, #312]	; (10007c1c <main+0x780>)
10007ae2:	4b40      	ldr	r3, [pc, #256]	; (10007be4 <main+0x748>)
10007ae4:	685c      	ldr	r4, [r3, #4]
10007ae6:	681b      	ldr	r3, [r3, #0]
10007ae8:	9300      	str	r3, [sp, #0]
10007aea:	9401      	str	r4, [sp, #4]
10007aec:	6013      	str	r3, [r2, #0]
10007aee:	6054      	str	r4, [r2, #4]
					Core1Exec(MandelCore1);
10007af0:	f000 fcf6 	bl	100084e0 <_Z9Core1ExecPFvvE>
10007af4:	e7ab      	b.n	10007a4e <main+0x5b2>
10007af6:	6862      	ldr	r2, [r4, #4]
10007af8:	0c12      	lsrs	r2, r2, #16
				while (!gpio_get(PB_UL))
10007afa:	4213      	tst	r3, r2
10007afc:	d107      	bne.n	10007b0e <main+0x672>
10007afe:	2501      	movs	r5, #1
					sleep_ms(20);
10007b00:	2014      	movs	r0, #20
10007b02:	f7fc ffc7 	bl	10004a94 <sleep_ms>
10007b06:	6863      	ldr	r3, [r4, #4]
10007b08:	0c1b      	lsrs	r3, r3, #16
				while (!gpio_get(PB_UL))
10007b0a:	421d      	tst	r5, r3
10007b0c:	d0f8      	beq.n	10007b00 <main+0x664>
				Size *= 2;
10007b0e:	4b2c      	ldr	r3, [pc, #176]	; (10007bc0 <main+0x724>)
				if (Size >= 1) Size = 1;
10007b10:	4d43      	ldr	r5, [pc, #268]	; (10007c20 <main+0x784>)
				Size *= 2;
10007b12:	685c      	ldr	r4, [r3, #4]
10007b14:	681b      	ldr	r3, [r3, #0]
10007b16:	001a      	movs	r2, r3
10007b18:	9300      	str	r3, [sp, #0]
10007b1a:	9401      	str	r4, [sp, #4]
10007b1c:	0010      	movs	r0, r2
10007b1e:	0023      	movs	r3, r4
10007b20:	0021      	movs	r1, r4
				if (Size >= 1) Size = 1;
10007b22:	2400      	movs	r4, #0
				Size *= 2;
10007b24:	f7f8 fe8c 	bl	10000840 <__wrap___aeabi_dadd>
				if (Size >= 1) Size = 1;
10007b28:	002b      	movs	r3, r5
10007b2a:	0022      	movs	r2, r4
				Size *= 2;
10007b2c:	0006      	movs	r6, r0
10007b2e:	000f      	movs	r7, r1
				if (Size >= 1) Size = 1;
10007b30:	f7f8 fee8 	bl	10000904 <__wrap___aeabi_dcmpge>
10007b34:	4b22      	ldr	r3, [pc, #136]	; (10007bc0 <main+0x724>)
10007b36:	2800      	cmp	r0, #0
10007b38:	d100      	bne.n	10007b3c <main+0x6a0>
10007b3a:	e0dc      	b.n	10007cf6 <main+0x85a>
10007b3c:	601c      	str	r4, [r3, #0]
10007b3e:	605d      	str	r5, [r3, #4]
				MandelStart();
10007b40:	f7ff fabc 	bl	100070bc <_Z11MandelStartv>
				break;
10007b44:	e4e4      	b.n	10007510 <main+0x74>
10007b46:	2383      	movs	r3, #131	; 0x83
10007b48:	4926      	ldr	r1, [pc, #152]	; (10007be4 <main+0x748>)
10007b4a:	2200      	movs	r2, #0
10007b4c:	6808      	ldr	r0, [r1, #0]
10007b4e:	6849      	ldr	r1, [r1, #4]
10007b50:	05db      	lsls	r3, r3, #23
10007b52:	f7f8 fe87 	bl	10000864 <__wrap___aeabi_dmul>
10007b56:	f7f8 ff0d 	bl	10000974 <__wrap___aeabi_d2iz>
					MandelFixed(Dst, DlbToFixed(Cid));
10007b5a:	4b21      	ldr	r3, [pc, #132]	; (10007be0 <main+0x744>)
10007b5c:	0001      	movs	r1, r0
10007b5e:	681b      	ldr	r3, [r3, #0]
10007b60:	0018      	movs	r0, r3
10007b62:	9300      	str	r3, [sp, #0]
10007b64:	f001 fdc4 	bl	100096f0 <__MandelFixed_veneer>
10007b68:	e771      	b.n	10007a4e <main+0x5b2>
					MandelFloat(Dst, (float)Cid);
10007b6a:	4b1d      	ldr	r3, [pc, #116]	; (10007be0 <main+0x744>)
10007b6c:	681d      	ldr	r5, [r3, #0]
10007b6e:	4b1d      	ldr	r3, [pc, #116]	; (10007be4 <main+0x748>)
10007b70:	9500      	str	r5, [sp, #0]
10007b72:	685c      	ldr	r4, [r3, #4]
10007b74:	681b      	ldr	r3, [r3, #0]
10007b76:	0018      	movs	r0, r3
10007b78:	0021      	movs	r1, r4
10007b7a:	9304      	str	r3, [sp, #16]
10007b7c:	9405      	str	r4, [sp, #20]
10007b7e:	f7f8 ff35 	bl	100009ec <__wrap___aeabi_d2f>
10007b82:	46ac      	mov	ip, r5
	int s = Shift;
10007b84:	4a12      	ldr	r2, [pc, #72]	; (10007bd0 <main+0x734>)
	int steps = Steps;
10007b86:	4b11      	ldr	r3, [pc, #68]	; (10007bcc <main+0x730>)
	int s = Shift;
10007b88:	6812      	ldr	r2, [r2, #0]
	int steps = Steps;
10007b8a:	681b      	ldr	r3, [r3, #0]
	int s = Shift;
10007b8c:	920a      	str	r2, [sp, #40]	; 0x28
	sx = SXf;
10007b8e:	4a25      	ldr	r2, [pc, #148]	; (10007c24 <main+0x788>)
	int steps = Steps;
10007b90:	9302      	str	r3, [sp, #8]
	int w = Width;
10007b92:	4b15      	ldr	r3, [pc, #84]	; (10007be8 <main+0x74c>)
	sx = SXf;
10007b94:	6812      	ldr	r2, [r2, #0]
	int w = Width;
10007b96:	681b      	ldr	r3, [r3, #0]
	sx = SXf;
10007b98:	9206      	str	r2, [sp, #24]
	cr = X0f;
10007b9a:	4a15      	ldr	r2, [pc, #84]	; (10007bf0 <main+0x754>)
10007b9c:	449c      	add	ip, r3
10007b9e:	6817      	ldr	r7, [r2, #0]
10007ba0:	4662      	mov	r2, ip
					MandelFloat(Dst, (float)Cid);
10007ba2:	4681      	mov	r9, r0
	for (x = 0; x < w; x++)
10007ba4:	46bb      	mov	fp, r7
10007ba6:	9208      	str	r2, [sp, #32]
10007ba8:	2b00      	cmp	r3, #0
10007baa:	dc00      	bgt.n	10007bae <main+0x712>
10007bac:	e096      	b.n	10007cdc <main+0x840>
		for (i = steps; i > 0; i--)
10007bae:	9b02      	ldr	r3, [sp, #8]
10007bb0:	2b00      	cmp	r3, #0
10007bb2:	dc00      	bgt.n	10007bb6 <main+0x71a>
10007bb4:	e07f      	b.n	10007cb6 <main+0x81a>
		zi = ci;
10007bb6:	464d      	mov	r5, r9
		for (i = steps; i > 0; i--)
10007bb8:	465c      	mov	r4, fp
10007bba:	469a      	mov	sl, r3
10007bbc:	e04f      	b.n	10007c5e <main+0x7c2>
10007bbe:	46c0      	nop			; (mov r8, r8)
10007bc0:	200021d8 	.word	0x200021d8
10007bc4:	40140000 	.word	0x40140000
10007bc8:	20002a60 	.word	0x20002a60
10007bcc:	200021e0 	.word	0x200021e0
10007bd0:	20038e9c 	.word	0x20038e9c
10007bd4:	200021d0 	.word	0x200021d0
10007bd8:	20002cbc 	.word	0x20002cbc
10007bdc:	20038054 	.word	0x20038054
10007be0:	200370c8 	.word	0x200370c8
10007be4:	20002a50 	.word	0x20002a50
10007be8:	200021e8 	.word	0x200021e8
10007bec:	20002a70 	.word	0x20002a70
10007bf0:	20038f00 	.word	0x20038f00
10007bf4:	40100000 	.word	0x40100000
10007bf8:	1000a000 	.word	0x1000a000
10007bfc:	200021cc 	.word	0x200021cc
10007c00:	20002a68 	.word	0x20002a68
10007c04:	20002a80 	.word	0x20002a80
10007c08:	a0b5ed8d 	.word	0xa0b5ed8d
10007c0c:	3eb0c6f7 	.word	0x3eb0c6f7
10007c10:	10009f04 	.word	0x10009f04
10007c14:	10006ca1 	.word	0x10006ca1
10007c18:	200365e0 	.word	0x200365e0
10007c1c:	20002a58 	.word	0x20002a58
10007c20:	3ff00000 	.word	0x3ff00000
10007c24:	200389e4 	.word	0x200389e4
			zi = 2*zr*zi + ci;
10007c28:	1c21      	adds	r1, r4, #0
10007c2a:	1c20      	adds	r0, r4, #0
10007c2c:	f7f9 fa52 	bl	100010d4 <__wrap___aeabi_fadd>
10007c30:	1c29      	adds	r1, r5, #0
10007c32:	f7f9 fa55 	bl	100010e0 <__wrap___aeabi_fmul>
10007c36:	1c01      	adds	r1, r0, #0
10007c38:	4648      	mov	r0, r9
10007c3a:	f7f9 fa4b 	bl	100010d4 <__wrap___aeabi_fadd>
			zr = zr2 - zi2 + cr;
10007c3e:	1c39      	adds	r1, r7, #0
			zi = 2*zr*zi + ci;
10007c40:	1c05      	adds	r5, r0, #0
			zr = zr2 - zi2 + cr;
10007c42:	1c30      	adds	r0, r6, #0
10007c44:	f7f9 fa43 	bl	100010ce <__wrap___aeabi_fsub>
10007c48:	4659      	mov	r1, fp
10007c4a:	f7f9 fa43 	bl	100010d4 <__wrap___aeabi_fadd>
		for (i = steps; i > 0; i--)
10007c4e:	2301      	movs	r3, #1
10007c50:	425b      	negs	r3, r3
10007c52:	469c      	mov	ip, r3
10007c54:	44e2      	add	sl, ip
10007c56:	4653      	mov	r3, sl
			zr = zr2 - zi2 + cr;
10007c58:	1c04      	adds	r4, r0, #0
		for (i = steps; i > 0; i--)
10007c5a:	2b00      	cmp	r3, #0
10007c5c:	d031      	beq.n	10007cc2 <main+0x826>
			zr2 = zr*zr;
10007c5e:	1c21      	adds	r1, r4, #0
10007c60:	1c20      	adds	r0, r4, #0
10007c62:	f7f9 fa3d 	bl	100010e0 <__wrap___aeabi_fmul>
			zi2 = zi*zi;
10007c66:	1c29      	adds	r1, r5, #0
			zr2 = zr*zr;
10007c68:	1c06      	adds	r6, r0, #0
			zi2 = zi*zi;
10007c6a:	1c28      	adds	r0, r5, #0
10007c6c:	f7f9 fa38 	bl	100010e0 <__wrap___aeabi_fmul>
			if (zr2 + zi2 > 4.0f) break;
10007c70:	1c01      	adds	r1, r0, #0
			zi2 = zi*zi;
10007c72:	1c07      	adds	r7, r0, #0
			if (zr2 + zi2 > 4.0f) break;
10007c74:	1c30      	adds	r0, r6, #0
10007c76:	f7f9 fa2d 	bl	100010d4 <__wrap___aeabi_fadd>
10007c7a:	2181      	movs	r1, #129	; 0x81
10007c7c:	05c9      	lsls	r1, r1, #23
10007c7e:	f7f9 fa5d 	bl	1000113c <__wrap___aeabi_fcmpgt>
10007c82:	2800      	cmp	r0, #0
10007c84:	d0d0      	beq.n	10007c28 <main+0x78c>
			*dst = g[(steps - i) >> s];
10007c86:	4652      	mov	r2, sl
10007c88:	9b02      	ldr	r3, [sp, #8]
10007c8a:	1a9b      	subs	r3, r3, r2
10007c8c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
10007c8e:	4113      	asrs	r3, r2
10007c90:	4a1c      	ldr	r2, [pc, #112]	; (10007d04 <main+0x868>)
10007c92:	5cd3      	ldrb	r3, [r2, r3]
10007c94:	9a00      	ldr	r2, [sp, #0]
		cr += sx;
10007c96:	4658      	mov	r0, fp
10007c98:	7013      	strb	r3, [r2, #0]
		dst++;
10007c9a:	1c54      	adds	r4, r2, #1
		cr += sx;
10007c9c:	9906      	ldr	r1, [sp, #24]
		dst++;
10007c9e:	9400      	str	r4, [sp, #0]
		cr += sx;
10007ca0:	f7f9 fa18 	bl	100010d4 <__wrap___aeabi_fadd>
	for (x = 0; x < w; x++)
10007ca4:	9b08      	ldr	r3, [sp, #32]
		cr += sx;
10007ca6:	4683      	mov	fp, r0
	for (x = 0; x < w; x++)
10007ca8:	429c      	cmp	r4, r3
10007caa:	d100      	bne.n	10007cae <main+0x812>
10007cac:	e6cf      	b.n	10007a4e <main+0x5b2>
		for (i = steps; i > 0; i--)
10007cae:	9b02      	ldr	r3, [sp, #8]
10007cb0:	2b00      	cmp	r3, #0
10007cb2:	dd00      	ble.n	10007cb6 <main+0x81a>
10007cb4:	e77f      	b.n	10007bb6 <main+0x71a>
10007cb6:	001a      	movs	r2, r3
			*dst = 0;
10007cb8:	2300      	movs	r3, #0
		if (i == 0)
10007cba:	2a00      	cmp	r2, #0
10007cbc:	d0ea      	beq.n	10007c94 <main+0x7f8>
10007cbe:	4692      	mov	sl, r2
10007cc0:	e7e1      	b.n	10007c86 <main+0x7ea>
			*dst = 0;
10007cc2:	2300      	movs	r3, #0
10007cc4:	e7e6      	b.n	10007c94 <main+0x7f8>
		if (i == 0)
10007cc6:	4652      	mov	r2, sl
			*dst = 0;
10007cc8:	2300      	movs	r3, #0
		if (i == 0)
10007cca:	2a00      	cmp	r2, #0
10007ccc:	d100      	bne.n	10007cd0 <main+0x834>
10007cce:	e6ae      	b.n	10007a2e <main+0x592>
10007cd0:	46d1      	mov	r9, sl
10007cd2:	e6a5      	b.n	10007a20 <main+0x584>
				if (SysClk < 10000) SysClk = 10000;
10007cd4:	4b0c      	ldr	r3, [pc, #48]	; (10007d08 <main+0x86c>)
10007cd6:	4a0d      	ldr	r2, [pc, #52]	; (10007d0c <main+0x870>)
10007cd8:	6013      	str	r3, [r2, #0]
10007cda:	e581      	b.n	100077e0 <main+0x344>
			CurY += IncY;
10007cdc:	4643      	mov	r3, r8
10007cde:	681c      	ldr	r4, [r3, #0]
			if (CurY >= Height)
10007ce0:	4b0b      	ldr	r3, [pc, #44]	; (10007d10 <main+0x874>)
10007ce2:	681d      	ldr	r5, [r3, #0]
10007ce4:	e428      	b.n	10007538 <main+0x9c>
				if (Steps < 0) Steps = 0x40000000;
10007ce6:	2380      	movs	r3, #128	; 0x80
10007ce8:	4a0a      	ldr	r2, [pc, #40]	; (10007d14 <main+0x878>)
10007cea:	05db      	lsls	r3, r3, #23
10007cec:	6013      	str	r3, [r2, #0]
				MandelStart();
10007cee:	f7ff f9e5 	bl	100070bc <_Z11MandelStartv>
				break;
10007cf2:	f7ff fc0d 	bl	10007510 <main+0x74>
				Size *= 2;
10007cf6:	601e      	str	r6, [r3, #0]
10007cf8:	605f      	str	r7, [r3, #4]
				MandelStart();
10007cfa:	f7ff f9df 	bl	100070bc <_Z11MandelStartv>
				break;
10007cfe:	f7ff fc07 	bl	10007510 <main+0x74>
10007d02:	46c0      	nop			; (mov r8, r8)
10007d04:	1000a000 	.word	0x1000a000
10007d08:	00002710 	.word	0x00002710
10007d0c:	200021e4 	.word	0x200021e4
10007d10:	200021cc 	.word	0x200021cc
10007d14:	200021e0 	.word	0x200021e0

10007d18 <_Z10VgaPioInitv>:
	irq_set_priority(DMA_IRQ_0, 0);
}

// initialize VGA PIO
void VgaPioInit()
{
10007d18:	b5f0      	push	{r4, r5, r6, r7, lr}
10007d1a:	46d6      	mov	lr, sl
10007d1c:	464f      	mov	r7, r9
10007d1e:	4646      	mov	r6, r8
10007d20:	b5c0      	push	{r6, r7, lr}
10007d22:	b098      	sub	sp, #96	; 0x60
	int i;

	// clear PIO instruction memory 
	pio_clear_instruction_memory(VGA_PIO);
10007d24:	484e      	ldr	r0, [pc, #312]	; (10007e60 <_Z10VgaPioInitv+0x148>)

	// configure main program instructions
	uint16_t ins[32]; // temporary buffer of program instructions
	memcpy(ins, &vga_program_instructions, vga_program.length*sizeof(uint16_t)); // copy program into buffer
10007d26:	ac08      	add	r4, sp, #32
	pio_clear_instruction_memory(VGA_PIO);
10007d28:	f7fa fb0a 	bl	10002340 <pio_clear_instruction_memory>
	memcpy(ins, &vga_program_instructions, vga_program.length*sizeof(uint16_t)); // copy program into buffer
10007d2c:	0022      	movs	r2, r4
10007d2e:	4b4d      	ldr	r3, [pc, #308]	; (10007e64 <_Z10VgaPioInitv+0x14c>)
10007d30:	cb23      	ldmia	r3!, {r0, r1, r5}
10007d32:	c223      	stmia	r2!, {r0, r1, r5}
10007d34:	cb23      	ldmia	r3!, {r0, r1, r5}
10007d36:	c223      	stmia	r2!, {r0, r1, r5}
10007d38:	6819      	ldr	r1, [r3, #0]
	// load main program into PIO's instruction memory
	struct pio_program prg;
	prg.instructions = ins;
	prg.length = vga_program.length;
	prg.origin = BASE_OFFSET;
	pio_add_program(VGA_PIO, &prg);
10007d3a:	4849      	ldr	r0, [pc, #292]	; (10007e60 <_Z10VgaPioInitv+0x148>)
	memcpy(ins, &vga_program_instructions, vga_program.length*sizeof(uint16_t)); // copy program into buffer
10007d3c:	6011      	str	r1, [r2, #0]
10007d3e:	889b      	ldrh	r3, [r3, #4]
	pio_add_program(VGA_PIO, &prg);
10007d40:	a902      	add	r1, sp, #8
	memcpy(ins, &vga_program_instructions, vga_program.length*sizeof(uint16_t)); // copy program into buffer
10007d42:	8093      	strh	r3, [r2, #4]
	u16 cpp = (u16)CurVmode.cpp; // number of clocks per pixel
10007d44:	4b48      	ldr	r3, [pc, #288]	; (10007e68 <_Z10VgaPioInitv+0x150>)
	ins[vga_offset_extra1] |= (cpp-2) << 8; // update waits
10007d46:	8add      	ldrh	r5, [r3, #22]
	u16 cpp = (u16)CurVmode.cpp; // number of clocks per pixel
10007d48:	469a      	mov	sl, r3
	ins[vga_offset_extra1] |= (cpp-2) << 8; // update waits
10007d4a:	1eaa      	subs	r2, r5, #2
10007d4c:	4b47      	ldr	r3, [pc, #284]	; (10007e6c <_Z10VgaPioInitv+0x154>)
10007d4e:	0212      	lsls	r2, r2, #8
10007d50:	4313      	orrs	r3, r2
10007d52:	b29b      	uxth	r3, r3
	prg.length = vga_program.length;
10007d54:	466a      	mov	r2, sp
	ins[vga_offset_extra1] |= (cpp-2) << 8; // update waits
10007d56:	8323      	strh	r3, [r4, #24]
	ins[vga_offset_extra2] |= (cpp-2) << 8; // update waits
10007d58:	83a3      	strh	r3, [r4, #28]
	prg.length = vga_program.length;
10007d5a:	230f      	movs	r3, #15
10007d5c:	7313      	strb	r3, [r2, #12]
	prg.origin = BASE_OFFSET;
10007d5e:	3302      	adds	r3, #2
10007d60:	7353      	strb	r3, [r2, #13]
	prg.instructions = ins;
10007d62:	9402      	str	r4, [sp, #8]
	pio_add_program(VGA_PIO, &prg);
10007d64:	f7fa fa88 	bl	10002278 <pio_add_program>

	// load layer program
	if (LayerProgInx != LAYERPROG_BASE)
10007d68:	4b41      	ldr	r3, [pc, #260]	; (10007e70 <_Z10VgaPioInitv+0x158>)
10007d6a:	781b      	ldrb	r3, [r3, #0]
10007d6c:	2b00      	cmp	r3, #0
10007d6e:	d145      	bne.n	10007dfc <_Z10VgaPioInitv+0xe4>
	{
		// configure layer program instructions
		memcpy(ins, CurLayerProg.ins, CurLayerProg.length*sizeof(uint16_t)); // copy program into buffer
		for (i = 0; i < CurLayerProg.extranum; i++)
10007d70:	2400      	movs	r4, #0
    gpio_set_function(pin, pio == pio0 ? GPIO_FUNC_PIO0 : GPIO_FUNC_PIO1);
10007d72:	0020      	movs	r0, r4
10007d74:	2106      	movs	r1, #6
		prg.origin = LAYER_OFFSET;
		pio_add_program(VGA_PIO, &prg);
	}

	// connect PIO to the pad
	for (i = VGA_GPIO_FIRST; i <= VGA_GPIO_LAST; i++) pio_gpio_init(VGA_PIO, i);
10007d76:	3401      	adds	r4, #1
10007d78:	f7f9 fe04 	bl	10001984 <gpio_set_function>
10007d7c:	2c09      	cmp	r4, #9
10007d7e:	d1f8      	bne.n	10007d72 <_Z10VgaPioInitv+0x5a>

	// negative HSYNC output
	if (!CurVmode.psync) gpio_set_outover(VGA_GPIO_SYNC, GPIO_OVERRIDE_INVERT);
10007d80:	2357      	movs	r3, #87	; 0x57
10007d82:	4652      	mov	r2, sl
10007d84:	5cd3      	ldrb	r3, [r2, r3]
10007d86:	2b00      	cmp	r3, #0
10007d88:	d064      	beq.n	10007e54 <_Z10VgaPioInitv+0x13c>
	{
		// layer is not active
		if ((layer > 0) && (LayerModeInx[layer] == LAYERMODE_BASE)) continue;

		// set pin direction to output
		pio_sm_set_consecutive_pindirs(VGA_PIO, VGA_SM(layer), VGA_GPIO_FIRST, VGA_GPIO_NUM, true);
10007d8a:	2301      	movs	r3, #1
10007d8c:	2200      	movs	r2, #0
10007d8e:	2100      	movs	r1, #0
10007d90:	9300      	str	r3, [sp, #0]
10007d92:	4833      	ldr	r0, [pc, #204]	; (10007e60 <_Z10VgaPioInitv+0x148>)
10007d94:	3308      	adds	r3, #8
10007d96:	f7fa faef 	bl	10002378 <pio_sm_set_consecutive_pindirs>

		// get default config
		pio_sm_config cfg = pio_get_default_sm_config();

		// map state machine's OUT and MOV pins	
		sm_config_set_out_pins(&cfg, LayerFirstPin[layer], LayerNumPin[layer]);
10007d9a:	4b36      	ldr	r3, [pc, #216]	; (10007e74 <_Z10VgaPioInitv+0x15c>)
10007d9c:	781c      	ldrb	r4, [r3, #0]
10007d9e:	4b36      	ldr	r3, [pc, #216]	; (10007e78 <_Z10VgaPioInitv+0x160>)
                 (out_count << PIO_SM0_PINCTRL_OUT_COUNT_LSB);
10007da0:	0524      	lsls	r4, r4, #20
10007da2:	781b      	ldrb	r3, [r3, #0]
                 (out_base << PIO_SM0_PINCTRL_OUT_BASE_LSB) |
10007da4:	431c      	orrs	r4, r3

		// join FIFO to send only
		sm_config_set_fifo_join(&cfg, PIO_FIFO_JOIN_TX);

		// PIO clock divider
		sm_config_set_clkdiv(&cfg, CurVmode.div);
10007da6:	4653      	mov	r3, sl
10007da8:	8a9d      	ldrh	r5, [r3, #20]
10007daa:	0028      	movs	r0, r5
10007dac:	f7f9 f9cb 	bl	10001146 <__wrap___aeabi_ui2f>
10007db0:	1c06      	adds	r6, r0, #0
    uint8_t div_frac = (uint8_t) ((div - div_int) * (1u << 8u));
10007db2:	0028      	movs	r0, r5
10007db4:	f7f9 f9cc 	bl	10001150 <__wrap___aeabi_i2f>
10007db8:	1c01      	adds	r1, r0, #0
10007dba:	1c30      	adds	r0, r6, #0
10007dbc:	f7f9 f987 	bl	100010ce <__wrap___aeabi_fsub>
10007dc0:	2187      	movs	r1, #135	; 0x87
10007dc2:	05c9      	lsls	r1, r1, #23
10007dc4:	f7f9 f98c 	bl	100010e0 <__wrap___aeabi_fmul>
10007dc8:	f7f9 fa16 	bl	100011f8 <__wrap___aeabi_f2uiz>
    c->shiftctrl = (c->shiftctrl &
10007dcc:	4b2b      	ldr	r3, [pc, #172]	; (10007e7c <_Z10VgaPioInitv+0x164>)
            (div_frac << PIO_SM0_CLKDIV_FRAC_LSB) |
10007dce:	b2c0      	uxtb	r0, r0
    c->shiftctrl = (c->shiftctrl &
10007dd0:	9306      	str	r3, [sp, #24]
    c->execctrl = (c->execctrl & ~(PIO_SM0_EXECCTRL_WRAP_TOP_BITS | PIO_SM0_EXECCTRL_WRAP_BOTTOM_BITS)) |
10007dd2:	4b2b      	ldr	r3, [pc, #172]	; (10007e80 <_Z10VgaPioInitv+0x168>)
            (div_int << PIO_SM0_CLKDIV_INT_LSB);
10007dd4:	042d      	lsls	r5, r5, #16
    c->execctrl = (c->execctrl & ~(PIO_SM0_EXECCTRL_WRAP_TOP_BITS | PIO_SM0_EXECCTRL_WRAP_BOTTOM_BITS)) |
10007dd6:	9305      	str	r3, [sp, #20]
            (div_frac << PIO_SM0_CLKDIV_FRAC_LSB) |
10007dd8:	0200      	lsls	r0, r0, #8
    c->pinctrl = (c->pinctrl & ~PIO_SM0_PINCTRL_SIDESET_BASE_BITS) |
10007dda:	4b2a      	ldr	r3, [pc, #168]	; (10007e84 <_Z10VgaPioInitv+0x16c>)
            (div_frac << PIO_SM0_CLKDIV_FRAC_LSB) |
10007ddc:	4328      	orrs	r0, r5
    c->clkdiv =
10007dde:	9004      	str	r0, [sp, #16]
    c->pinctrl = (c->pinctrl & ~PIO_SM0_PINCTRL_SIDESET_BASE_BITS) |
10007de0:	431c      	orrs	r4, r3
			// set sideset pins of base layer
			sm_config_set_sideset(&cfg, 1, false, false);
			sm_config_set_sideset_pins(&cfg, VGA_GPIO_SYNC);

			// initialize state machine
			pio_sm_init(VGA_PIO, VGA_SM0, vga_offset_entry+BASE_OFFSET, &cfg);
10007de2:	2213      	movs	r2, #19
10007de4:	2100      	movs	r1, #0
10007de6:	481e      	ldr	r0, [pc, #120]	; (10007e60 <_Z10VgaPioInitv+0x148>)
10007de8:	ab04      	add	r3, sp, #16
10007dea:	9407      	str	r4, [sp, #28]
10007dec:	f7fa fb06 	bl	100023fc <pio_sm_init>

			// initialize state machine
			pio_sm_init(VGA_PIO, VGA_SM(layer), CurLayerProg.idle+LAYER_OFFSET, &cfg);
		}
	}
}
10007df0:	b018      	add	sp, #96	; 0x60
10007df2:	bce0      	pop	{r5, r6, r7}
10007df4:	46ba      	mov	sl, r7
10007df6:	46b1      	mov	r9, r6
10007df8:	46a8      	mov	r8, r5
10007dfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(ins, CurLayerProg.ins, CurLayerProg.length*sizeof(uint16_t)); // copy program into buffer
10007dfc:	4b22      	ldr	r3, [pc, #136]	; (10007e88 <_Z10VgaPioInitv+0x170>)
10007dfe:	0020      	movs	r0, r4
10007e00:	4698      	mov	r8, r3
10007e02:	7a1b      	ldrb	r3, [r3, #8]
10007e04:	005a      	lsls	r2, r3, #1
10007e06:	4699      	mov	r9, r3
10007e08:	4643      	mov	r3, r8
10007e0a:	6819      	ldr	r1, [r3, #0]
10007e0c:	f7f9 fa4c 	bl	100012a8 <__wrap___aeabi_memcpy>
		for (i = 0; i < CurLayerProg.extranum; i++)
10007e10:	4643      	mov	r3, r8
10007e12:	7b9f      	ldrb	r7, [r3, #14]
10007e14:	2f00      	cmp	r7, #0
10007e16:	d011      	beq.n	10007e3c <_Z10VgaPioInitv+0x124>
10007e18:	4641      	mov	r1, r8
10007e1a:	2000      	movs	r0, #0
10007e1c:	310f      	adds	r1, #15
			int extra = (int)cpp - CurLayerProg.extra[i*2+1];
10007e1e:	784b      	ldrb	r3, [r1, #1]
			ins[CurLayerProg.extra[i*2]] |= extra << 8; // update waits
10007e20:	780a      	ldrb	r2, [r1, #0]
			int extra = (int)cpp - CurLayerProg.extra[i*2+1];
10007e22:	1aeb      	subs	r3, r5, r3
			ins[CurLayerProg.extra[i*2]] |= extra << 8; // update waits
10007e24:	43de      	mvns	r6, r3
10007e26:	0052      	lsls	r2, r2, #1
10007e28:	17f6      	asrs	r6, r6, #31
10007e2a:	4033      	ands	r3, r6
10007e2c:	5aa6      	ldrh	r6, [r4, r2]
10007e2e:	021b      	lsls	r3, r3, #8
10007e30:	4333      	orrs	r3, r6
		for (i = 0; i < CurLayerProg.extranum; i++)
10007e32:	3001      	adds	r0, #1
			ins[CurLayerProg.extra[i*2]] |= extra << 8; // update waits
10007e34:	52a3      	strh	r3, [r4, r2]
		for (i = 0; i < CurLayerProg.extranum; i++)
10007e36:	3102      	adds	r1, #2
10007e38:	42b8      	cmp	r0, r7
10007e3a:	dbf0      	blt.n	10007e1e <_Z10VgaPioInitv+0x106>
		prg.length = CurLayerProg.length;
10007e3c:	466b      	mov	r3, sp
10007e3e:	464a      	mov	r2, r9
10007e40:	731a      	strb	r2, [r3, #12]
		prg.origin = LAYER_OFFSET;
10007e42:	2300      	movs	r3, #0
10007e44:	466a      	mov	r2, sp
		pio_add_program(VGA_PIO, &prg);
10007e46:	a902      	add	r1, sp, #8
10007e48:	4805      	ldr	r0, [pc, #20]	; (10007e60 <_Z10VgaPioInitv+0x148>)
		prg.instructions = ins;
10007e4a:	9402      	str	r4, [sp, #8]
		prg.origin = LAYER_OFFSET;
10007e4c:	7353      	strb	r3, [r2, #13]
		pio_add_program(VGA_PIO, &prg);
10007e4e:	f7fa fa13 	bl	10002278 <pio_add_program>
10007e52:	e78d      	b.n	10007d70 <_Z10VgaPioInitv+0x58>
	if (!CurVmode.psync) gpio_set_outover(VGA_GPIO_SYNC, GPIO_OVERRIDE_INVERT);
10007e54:	2101      	movs	r1, #1
10007e56:	2008      	movs	r0, #8
10007e58:	f7f9 fdc4 	bl	100019e4 <gpio_set_outover>
10007e5c:	e795      	b.n	10007d8a <_Z10VgaPioInitv+0x72>
10007e5e:	46c0      	nop			; (mov r8, r8)
10007e60:	50200000 	.word	0x50200000
10007e64:	1000a080 	.word	0x1000a080
10007e68:	2003705c 	.word	0x2003705c
10007e6c:	00006008 	.word	0x00006008
10007e70:	20039bb5 	.word	0x20039bb5
10007e74:	200021ec 	.word	0x200021ec
10007e78:	200370d4 	.word	0x200370d4
10007e7c:	40060000 	.word	0x40060000
10007e80:	0001fd80 	.word	0x0001fd80
10007e84:	20002000 	.word	0x20002000
10007e88:	2003702c 	.word	0x2003702c

10007e8c <_Z10VgaBufInitv>:

// initialize scanline buffers
void VgaBufInit()
{
10007e8c:	b5f0      	push	{r4, r5, r6, r7, lr}
10007e8e:	464e      	mov	r6, r9
10007e90:	4645      	mov	r5, r8
10007e92:	4657      	mov	r7, sl
10007e94:	46de      	mov	lr, fp
	// init HSYNC..back porch buffer
	//  hsync must be min. 3
	//  hback must be min. 13
	LineBufHsBp[0] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,CurVmode.hsync-3)); // HSYNC
10007e96:	2388      	movs	r3, #136	; 0x88
{
10007e98:	b5e0      	push	{r5, r6, r7, lr}
	LineBufHsBp[0] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,CurVmode.hsync-3)); // HSYNC
10007e9a:	485f      	ldr	r0, [pc, #380]	; (10008018 <_Z10VgaBufInitv+0x18c>)
10007e9c:	4f5f      	ldr	r7, [pc, #380]	; (1000801c <_Z10VgaBufInitv+0x190>)
10007e9e:	8c41      	ldrh	r1, [r0, #34]	; 0x22
	LineBufHsBp[1] = BYTESWAP(VGADARK(CurVmode.hback-4-1-9,0)); // back porch - 1 - 9
10007ea0:	4e5f      	ldr	r6, [pc, #380]	; (10008020 <_Z10VgaBufInitv+0x194>)
	LineBufHsBp[0] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,CurVmode.hsync-3)); // HSYNC
10007ea2:	1eca      	subs	r2, r1, #3
10007ea4:	ba12      	rev	r2, r2
10007ea6:	431a      	orrs	r2, r3
10007ea8:	603a      	str	r2, [r7, #0]
	LineBufHsBp[1] = BYTESWAP(VGADARK(CurVmode.hback-4-1-9,0)); // back porch - 1 - 9
10007eaa:	8c84      	ldrh	r4, [r0, #36]	; 0x24
	LineBufHsBp[0] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,CurVmode.hsync-3)); // HSYNC
10007eac:	469c      	mov	ip, r3
	LineBufHsBp[1] = BYTESWAP(VGADARK(CurVmode.hback-4-1-9,0)); // back porch - 1 - 9
10007eae:	3c0e      	subs	r4, #14
10007eb0:	0423      	lsls	r3, r4, #16
10007eb2:	0225      	lsls	r5, r4, #8
10007eb4:	0e2d      	lsrs	r5, r5, #24
10007eb6:	4033      	ands	r3, r6
10007eb8:	432b      	orrs	r3, r5
10007eba:	25ff      	movs	r5, #255	; 0xff
10007ebc:	022d      	lsls	r5, r5, #8
10007ebe:	402c      	ands	r4, r5
10007ec0:	4323      	orrs	r3, r4
10007ec2:	24a0      	movs	r4, #160	; 0xa0
10007ec4:	4323      	orrs	r3, r4
10007ec6:	607b      	str	r3, [r7, #4]
	LineBufHsBp[2] = BYTESWAP(VGACMD(vga_offset_irqset+BASE_OFFSET,0)); // IRQ command (takes 9 clock cycles)
10007ec8:	23c0      	movs	r3, #192	; 0xc0
10007eca:	60bb      	str	r3, [r7, #8]
	LineBufHsBp[3] = BYTESWAP(VGACMD(vga_offset_output+BASE_OFFSET, CurVmode.width - 2)); // missing 2 clock cycles after last pixel
10007ecc:	8803      	ldrh	r3, [r0, #0]
10007ece:	3440      	adds	r4, #64	; 0x40
10007ed0:	3b02      	subs	r3, #2
10007ed2:	ba1b      	rev	r3, r3
10007ed4:	4323      	orrs	r3, r4
10007ed6:	60fb      	str	r3, [r7, #12]

	// init front porch buffer
	//  hfront must be min. 4
	LineBufFp = BYTESWAP(VGADARK(CurVmode.hfront-4,0)); // front porch
10007ed8:	8c07      	ldrh	r7, [r0, #32]
{
10007eda:	b083      	sub	sp, #12
	LineBufFp = BYTESWAP(VGADARK(CurVmode.hfront-4,0)); // front porch
10007edc:	3f04      	subs	r7, #4
10007ede:	043b      	lsls	r3, r7, #16
10007ee0:	023c      	lsls	r4, r7, #8
10007ee2:	0e24      	lsrs	r4, r4, #24
10007ee4:	4033      	ands	r3, r6
10007ee6:	4323      	orrs	r3, r4
10007ee8:	24a0      	movs	r4, #160	; 0xa0
10007eea:	402f      	ands	r7, r5
10007eec:	433b      	orrs	r3, r7
10007eee:	4f4d      	ldr	r7, [pc, #308]	; (10008024 <_Z10VgaBufInitv+0x198>)
10007ef0:	4323      	orrs	r3, r4
10007ef2:	603b      	str	r3, [r7, #0]

	// init dark line
	LineBufDark[0] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,CurVmode.hsync-3)); // HSYNC
10007ef4:	4b4c      	ldr	r3, [pc, #304]	; (10008028 <_Z10VgaBufInitv+0x19c>)
10007ef6:	601a      	str	r2, [r3, #0]
	LineBufDark[1] = BYTESWAP(VGADARK(CurVmode.htot-CurVmode.hsync-4,0)); // dark line
10007ef8:	8bc2      	ldrh	r2, [r0, #30]
	LineBufDark[0] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,CurVmode.hsync-3)); // HSYNC
10007efa:	4698      	mov	r8, r3
	LineBufDark[1] = BYTESWAP(VGADARK(CurVmode.htot-CurVmode.hsync-4,0)); // dark line
10007efc:	1a57      	subs	r7, r2, r1
10007efe:	1f3b      	subs	r3, r7, #4
10007f00:	4699      	mov	r9, r3
10007f02:	464c      	mov	r4, r9
10007f04:	041b      	lsls	r3, r3, #16
10007f06:	0224      	lsls	r4, r4, #8
10007f08:	0e24      	lsrs	r4, r4, #24
10007f0a:	4033      	ands	r3, r6
10007f0c:	4323      	orrs	r3, r4
10007f0e:	464c      	mov	r4, r9
10007f10:	402c      	ands	r4, r5
10007f12:	4323      	orrs	r3, r4
10007f14:	24a0      	movs	r4, #160	; 0xa0
10007f16:	4323      	orrs	r3, r4
10007f18:	4644      	mov	r4, r8
10007f1a:	6063      	str	r3, [r4, #4]

	// TV mode
	if (CurVmode.inter)
10007f1c:	2356      	movs	r3, #86	; 0x56
10007f1e:	5cc3      	ldrb	r3, [r0, r3]
10007f20:	2b00      	cmp	r3, #0
10007f22:	d060      	beq.n	10007fe6 <_Z10VgaBufInitv+0x15a>
	{
		// vertical synchronization
		LineBufSync[0] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,CurVmode.hsync/2-3)); // HSYNC
10007f24:	4664      	mov	r4, ip
10007f26:	0848      	lsrs	r0, r1, #1
10007f28:	1ec3      	subs	r3, r0, #3
10007f2a:	ba1b      	rev	r3, r3
10007f2c:	431c      	orrs	r4, r3
10007f2e:	4b3f      	ldr	r3, [pc, #252]	; (1000802c <_Z10VgaBufInitv+0x1a0>)
10007f30:	46a0      	mov	r8, r4
10007f32:	601c      	str	r4, [r3, #0]
		LineBufSync[1] = BYTESWAP(VGADARK(CurVmode.htot/2-CurVmode.hsync/2-4,0)); // dark line
10007f34:	0854      	lsrs	r4, r2, #1
10007f36:	1a27      	subs	r7, r4, r0
10007f38:	46a1      	mov	r9, r4
10007f3a:	1f3c      	subs	r4, r7, #4
10007f3c:	46a2      	mov	sl, r4
10007f3e:	0427      	lsls	r7, r4, #16
10007f40:	0224      	lsls	r4, r4, #8
10007f42:	4037      	ands	r7, r6
10007f44:	0e24      	lsrs	r4, r4, #24
10007f46:	4327      	orrs	r7, r4
10007f48:	4654      	mov	r4, sl
10007f4a:	402c      	ands	r4, r5
10007f4c:	4327      	orrs	r7, r4
10007f4e:	24a0      	movs	r4, #160	; 0xa0
10007f50:	433c      	orrs	r4, r7
10007f52:	9401      	str	r4, [sp, #4]
10007f54:	605c      	str	r4, [r3, #4]
		LineBufSync[2] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,CurVmode.hsync/2-3)); // HSYNC
10007f56:	4644      	mov	r4, r8
		LineBufSync[3] = BYTESWAP(VGADARK((CurVmode.htot+1)/2-CurVmode.hsync/2-4,0)); // dark line
10007f58:	3201      	adds	r2, #1
10007f5a:	1052      	asrs	r2, r2, #1
10007f5c:	1a10      	subs	r0, r2, r0
10007f5e:	3804      	subs	r0, #4
		LineBufSync[2] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,CurVmode.hsync/2-3)); // HSYNC
10007f60:	609c      	str	r4, [r3, #8]
		LineBufSync[3] = BYTESWAP(VGADARK((CurVmode.htot+1)/2-CurVmode.hsync/2-4,0)); // dark line
10007f62:	0404      	lsls	r4, r0, #16
10007f64:	4034      	ands	r4, r6
10007f66:	46a2      	mov	sl, r4
10007f68:	0204      	lsls	r4, r0, #8
10007f6a:	0e24      	lsrs	r4, r4, #24
10007f6c:	46a3      	mov	fp, r4
10007f6e:	4654      	mov	r4, sl
10007f70:	465f      	mov	r7, fp
10007f72:	4028      	ands	r0, r5
10007f74:	433c      	orrs	r4, r7
10007f76:	4320      	orrs	r0, r4
10007f78:	24a0      	movs	r4, #160	; 0xa0
10007f7a:	4320      	orrs	r0, r4
10007f7c:	60d8      	str	r0, [r3, #12]

		LineBufSync[4] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,CurVmode.htot/2-CurVmode.hsync-3)); // invert dark line
10007f7e:	4648      	mov	r0, r9
10007f80:	4664      	mov	r4, ip
10007f82:	1a40      	subs	r0, r0, r1
10007f84:	3803      	subs	r0, #3
10007f86:	ba00      	rev	r0, r0
10007f88:	4320      	orrs	r0, r4
10007f8a:	6118      	str	r0, [r3, #16]
		LineBufSync[5] = BYTESWAP(VGADARK(CurVmode.hsync-4,0)); // invert HSYNC
10007f8c:	1f08      	subs	r0, r1, #4
10007f8e:	4681      	mov	r9, r0
10007f90:	0400      	lsls	r0, r0, #16
10007f92:	4006      	ands	r6, r0
10007f94:	4648      	mov	r0, r9
		LineBufSync[6] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,(CurVmode.htot+1)/2-CurVmode.hsync-3)); // invert dark line
10007f96:	1a52      	subs	r2, r2, r1
10007f98:	4661      	mov	r1, ip
		LineBufSync[5] = BYTESWAP(VGADARK(CurVmode.hsync-4,0)); // invert HSYNC
10007f9a:	0200      	lsls	r0, r0, #8
10007f9c:	0e00      	lsrs	r0, r0, #24
10007f9e:	4306      	orrs	r6, r0
10007fa0:	4648      	mov	r0, r9
		LineBufSync[6] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,(CurVmode.htot+1)/2-CurVmode.hsync-3)); // invert dark line
10007fa2:	3a03      	subs	r2, #3
10007fa4:	ba12      	rev	r2, r2
10007fa6:	430a      	orrs	r2, r1
10007fa8:	619a      	str	r2, [r3, #24]
		LineBufSync[7] = BYTESWAP(VGADARK(CurVmode.hsync-4,0)); // invert HSYNC

		LineBufSync[8] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,CurVmode.hsync/2-3)); // HSYNC
10007faa:	4642      	mov	r2, r8
		LineBufSync[5] = BYTESWAP(VGADARK(CurVmode.hsync-4,0)); // invert HSYNC
10007fac:	4005      	ands	r5, r0
		LineBufSync[9] = BYTESWAP(VGADARK(CurVmode.htot/2-CurVmode.hsync/2-4,0)); // dark line

		// control blocks - initialize to VSYNC
		CtrlBuf1[0] = 4; // send 4x u32
10007fae:	2004      	movs	r0, #4
		LineBufSync[8] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,CurVmode.hsync/2-3)); // HSYNC
10007fb0:	621a      	str	r2, [r3, #32]
		LineBufSync[9] = BYTESWAP(VGADARK(CurVmode.htot/2-CurVmode.hsync/2-4,0)); // dark line
10007fb2:	9a01      	ldr	r2, [sp, #4]
		LineBufSync[5] = BYTESWAP(VGADARK(CurVmode.hsync-4,0)); // invert HSYNC
10007fb4:	4335      	orrs	r5, r6
10007fb6:	3418      	adds	r4, #24
		LineBufSync[9] = BYTESWAP(VGADARK(CurVmode.htot/2-CurVmode.hsync/2-4,0)); // dark line
10007fb8:	625a      	str	r2, [r3, #36]	; 0x24
		CtrlBuf1[0] = 4; // send 4x u32
10007fba:	491d      	ldr	r1, [pc, #116]	; (10008030 <_Z10VgaBufInitv+0x1a4>)
		CtrlBuf1[1] = (u32)&LineBufSync[4]; // VSYNC

		CtrlBuf2[0] = 4; // send 4x u32
10007fbc:	4a1d      	ldr	r2, [pc, #116]	; (10008034 <_Z10VgaBufInitv+0x1a8>)
		LineBufSync[5] = BYTESWAP(VGADARK(CurVmode.hsync-4,0)); // invert HSYNC
10007fbe:	432c      	orrs	r4, r5
10007fc0:	615c      	str	r4, [r3, #20]
		LineBufSync[7] = BYTESWAP(VGADARK(CurVmode.hsync-4,0)); // invert HSYNC
10007fc2:	61dc      	str	r4, [r3, #28]
		CtrlBuf1[1] = (u32)&LineBufSync[4]; // VSYNC
10007fc4:	3310      	adds	r3, #16
		CtrlBuf1[0] = 4; // send 4x u32
10007fc6:	6008      	str	r0, [r1, #0]
		CtrlBuf1[1] = (u32)&LineBufSync[4]; // VSYNC
10007fc8:	604b      	str	r3, [r1, #4]
		CtrlBuf2[0] = 4; // send 4x u32
10007fca:	6010      	str	r0, [r2, #0]
		CtrlBuf2[1] = (u32)&LineBufSync[4]; // VSYNC
10007fcc:	6053      	str	r3, [r2, #4]

		CtrlBuf2[0] = 2; // send 2x u32
		CtrlBuf2[1] = (u32)&LineBufSync[0]; // VSYNC
	}

	CtrlBuf1[2] = 0; // stop mark
10007fce:	2300      	movs	r3, #0
10007fd0:	608b      	str	r3, [r1, #8]
	CtrlBuf1[3] = 0; // stop mark
10007fd2:	60cb      	str	r3, [r1, #12]

	CtrlBuf2[2] = 0; // stop mark
10007fd4:	6093      	str	r3, [r2, #8]
	CtrlBuf2[3] = 0; // stop mark
10007fd6:	60d3      	str	r3, [r2, #12]
}
10007fd8:	b003      	add	sp, #12
10007fda:	bcf0      	pop	{r4, r5, r6, r7}
10007fdc:	46bb      	mov	fp, r7
10007fde:	46b2      	mov	sl, r6
10007fe0:	46a9      	mov	r9, r5
10007fe2:	46a0      	mov	r8, r4
10007fe4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LineBufSync[0] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,CurVmode.htot-CurVmode.hsync-3)); // invert dark line
10007fe6:	4662      	mov	r2, ip
		LineBufSync[1] = BYTESWAP(VGADARK(CurVmode.hsync-4,0)); // invert HSYNC
10007fe8:	24a0      	movs	r4, #160	; 0xa0
		CtrlBuf1[0] = 2; // send 2x u32
10007fea:	2002      	movs	r0, #2
		LineBufSync[0] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,CurVmode.htot-CurVmode.hsync-3)); // invert dark line
10007fec:	3f03      	subs	r7, #3
		LineBufSync[1] = BYTESWAP(VGADARK(CurVmode.hsync-4,0)); // invert HSYNC
10007fee:	3904      	subs	r1, #4
10007ff0:	ba3f      	rev	r7, r7
		LineBufSync[0] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,CurVmode.htot-CurVmode.hsync-3)); // invert dark line
10007ff2:	4317      	orrs	r7, r2
		LineBufSync[1] = BYTESWAP(VGADARK(CurVmode.hsync-4,0)); // invert HSYNC
10007ff4:	040a      	lsls	r2, r1, #16
10007ff6:	4016      	ands	r6, r2
10007ff8:	020a      	lsls	r2, r1, #8
10007ffa:	0e12      	lsrs	r2, r2, #24
10007ffc:	4316      	orrs	r6, r2
10007ffe:	4029      	ands	r1, r5
10008000:	4331      	orrs	r1, r6
		LineBufSync[0] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,CurVmode.htot-CurVmode.hsync-3)); // invert dark line
10008002:	4b0a      	ldr	r3, [pc, #40]	; (1000802c <_Z10VgaBufInitv+0x1a0>)
		CtrlBuf2[0] = 2; // send 2x u32
10008004:	4a0b      	ldr	r2, [pc, #44]	; (10008034 <_Z10VgaBufInitv+0x1a8>)
		LineBufSync[1] = BYTESWAP(VGADARK(CurVmode.hsync-4,0)); // invert HSYNC
10008006:	430c      	orrs	r4, r1
		CtrlBuf1[0] = 2; // send 2x u32
10008008:	4909      	ldr	r1, [pc, #36]	; (10008030 <_Z10VgaBufInitv+0x1a4>)
		LineBufSync[0] = BYTESWAP(VGACMD(vga_offset_sync+BASE_OFFSET,CurVmode.htot-CurVmode.hsync-3)); // invert dark line
1000800a:	601f      	str	r7, [r3, #0]
		LineBufSync[1] = BYTESWAP(VGADARK(CurVmode.hsync-4,0)); // invert HSYNC
1000800c:	605c      	str	r4, [r3, #4]
		CtrlBuf1[0] = 2; // send 2x u32
1000800e:	6008      	str	r0, [r1, #0]
		CtrlBuf1[1] = (u32)&LineBufSync[0]; // VSYNC
10008010:	604b      	str	r3, [r1, #4]
		CtrlBuf2[0] = 2; // send 2x u32
10008012:	6010      	str	r0, [r2, #0]
		CtrlBuf2[1] = (u32)&LineBufSync[0]; // VSYNC
10008014:	6053      	str	r3, [r2, #4]
10008016:	e7da      	b.n	10007fce <_Z10VgaBufInitv+0x142>
10008018:	2003705c 	.word	0x2003705c
1000801c:	2003801c 	.word	0x2003801c
10008020:	00ffff00 	.word	0x00ffff00
10008024:	20038018 	.word	0x20038018
10008028:	20038010 	.word	0x20038010
1000802c:	2003802c 	.word	0x2003802c
10008030:	200365e8 	.word	0x200365e8
10008034:	20036b00 	.word	0x20036b00

10008038 <_Z7VgaTermv>:
 *
 * \param channel DMA channel
 */
static inline void dma_channel_abort(uint channel) {
    check_dma_channel_param(channel);
    dma_hw->abort = 1u << channel;
10008038:	21a0      	movs	r1, #160	; 0xa0
1000803a:	2302      	movs	r3, #2
    // Bit will go 0 once channel has reached safe state
    // (i.e. any in-flight transfers have retired)
    while (dma_hw->abort & (1ul << channel)) tight_loop_contents();
1000803c:	2002      	movs	r0, #2
    dma_hw->abort = 1u << channel;
1000803e:	4a1f      	ldr	r2, [pc, #124]	; (100080bc <_Z7VgaTermv+0x84>)
10008040:	05c9      	lsls	r1, r1, #23

// terminate VGA service
void VgaTerm()
{
10008042:	b570      	push	{r4, r5, r6, lr}
10008044:	508b      	str	r3, [r1, r2]
    while (dma_hw->abort & (1ul << channel)) tight_loop_contents();
10008046:	588b      	ldr	r3, [r1, r2]
10008048:	4218      	tst	r0, r3
1000804a:	d1fc      	bne.n	10008046 <_Z7VgaTermv+0xe>
    dma_hw->abort = 1u << channel;
1000804c:	2301      	movs	r3, #1
1000804e:	508b      	str	r3, [r1, r2]
    while (dma_hw->abort & (1ul << channel)) tight_loop_contents();
10008050:	21a0      	movs	r1, #160	; 0xa0
10008052:	2001      	movs	r0, #1
10008054:	4a19      	ldr	r2, [pc, #100]	; (100080bc <_Z7VgaTermv+0x84>)
10008056:	05c9      	lsls	r1, r1, #23
10008058:	588b      	ldr	r3, [r1, r2]
1000805a:	4218      	tst	r0, r3
1000805c:	d1fc      	bne.n	10008058 <_Z7VgaTermv+0x20>
    dma_hw->abort = 1u << channel;
1000805e:	2302      	movs	r3, #2
10008060:	508b      	str	r3, [r1, r2]
    while (dma_hw->abort & (1ul << channel)) tight_loop_contents();
10008062:	21a0      	movs	r1, #160	; 0xa0
10008064:	2002      	movs	r0, #2
10008066:	4a15      	ldr	r2, [pc, #84]	; (100080bc <_Z7VgaTermv+0x84>)
10008068:	05c9      	lsls	r1, r1, #23
1000806a:	588b      	ldr	r3, [r1, r2]
1000806c:	4218      	tst	r0, r3
1000806e:	d1fc      	bne.n	1000806a <_Z7VgaTermv+0x32>
    dma_hw->abort = 1u << channel;
10008070:	2301      	movs	r3, #1
    while (dma_hw->abort & (1ul << channel)) tight_loop_contents();
10008072:	25a0      	movs	r5, #160	; 0xa0
10008074:	2401      	movs	r4, #1
    dma_hw->abort = 1u << channel;
10008076:	508b      	str	r3, [r1, r2]
    while (dma_hw->abort & (1ul << channel)) tight_loop_contents();
10008078:	4a10      	ldr	r2, [pc, #64]	; (100080bc <_Z7VgaTermv+0x84>)
1000807a:	05ed      	lsls	r5, r5, #23
1000807c:	0026      	movs	r6, r4
1000807e:	58ab      	ldr	r3, [r5, r2]
10008080:	401e      	ands	r6, r3
10008082:	421c      	tst	r4, r3
10008084:	d1fa      	bne.n	1000807c <_Z7VgaTermv+0x44>
		dma_channel_abort(VGA_DMA_PIO(i));
		dma_channel_abort(VGA_DMA_CB(i));
	}

	// disable IRQ0 from DMA0
	irq_set_enabled(DMA_IRQ_0, false);
10008086:	2100      	movs	r1, #0
10008088:	200b      	movs	r0, #11
1000808a:	f7f9 fcdb 	bl	10001a44 <irq_set_enabled>
1000808e:	2302      	movs	r3, #2
10008090:	4a0b      	ldr	r2, [pc, #44]	; (100080c0 <_Z7VgaTermv+0x88>)
    pio->ctrl = (pio->ctrl & ~mask) | (enabled ? mask : 0u);
10008092:	480c      	ldr	r0, [pc, #48]	; (100080c4 <_Z7VgaTermv+0x8c>)
10008094:	6013      	str	r3, [r2, #0]
	dma_channel_set_irq0_enabled(VGA_DMA_PIO0, false);

	// Clear the interrupt request for DMA control channel
	dma_hw->ints0 = (1u << VGA_DMA_PIO0);
10008096:	4a0c      	ldr	r2, [pc, #48]	; (100080c8 <_Z7VgaTermv+0x90>)
10008098:	50ab      	str	r3, [r5, r2]
    pio->ctrl |= (mask << PIO_CTRL_SM_RESTART_LSB) & PIO_CTRL_SM_RESTART_BITS;
1000809a:	2210      	movs	r2, #16
    pio->ctrl = (pio->ctrl & ~mask) | (enabled ? mask : 0u);
1000809c:	6803      	ldr	r3, [r0, #0]
1000809e:	43a3      	bics	r3, r4
100080a0:	6003      	str	r3, [r0, #0]
    pio->ctrl |= (mask << PIO_CTRL_SM_RESTART_LSB) & PIO_CTRL_SM_RESTART_BITS;
100080a2:	6803      	ldr	r3, [r0, #0]
100080a4:	4313      	orrs	r3, r2
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
100080a6:	2280      	movs	r2, #128	; 0x80
100080a8:	6003      	str	r3, [r0, #0]
100080aa:	4b08      	ldr	r3, [pc, #32]	; (100080cc <_Z7VgaTermv+0x94>)
100080ac:	0612      	lsls	r2, r2, #24
100080ae:	601a      	str	r2, [r3, #0]
100080b0:	601a      	str	r2, [r3, #0]

	// clear FIFOs
	for (i = 0; i < LAYERS; i++)
	{
		pio_sm_clear_fifos(VGA_PIO, VGA_SM(i));
		CtrlBufNext[i] = NULL;
100080b2:	4b07      	ldr	r3, [pc, #28]	; (100080d0 <_Z7VgaTermv+0x98>)
100080b4:	601e      	str	r6, [r3, #0]
	}

	// clear PIO instruction memory 
	pio_clear_instruction_memory(VGA_PIO);
100080b6:	f7fa f943 	bl	10002340 <pio_clear_instruction_memory>
}
100080ba:	bd70      	pop	{r4, r5, r6, pc}
100080bc:	00000444 	.word	0x00000444
100080c0:	50003404 	.word	0x50003404
100080c4:	50200000 	.word	0x50200000
100080c8:	0000040c 	.word	0x0000040c
100080cc:	502010d0 	.word	0x502010d0
100080d0:	20037018 	.word	0x20037018

100080d4 <_Z16ScanlineTypeInitPK6sVmode>:

// initialize scanline type table
void ScanlineTypeInit(const sVmode* v)
{
100080d4:	b5f0      	push	{r4, r5, r6, r7, lr}
100080d6:	46c6      	mov	lr, r8
	u8* d = ScanlineType;
	int i, k;

	// line 0 is not used
	*d++ = LINE_DARK;
100080d8:	2305      	movs	r3, #5
{
100080da:	b500      	push	{lr}
	*d++ = LINE_DARK;
100080dc:	4c6b      	ldr	r4, [pc, #428]	; (1000828c <_Z16ScanlineTypeInitPK6sVmode+0x1b8>)
{
100080de:	0005      	movs	r5, r0
	*d++ = LINE_DARK;
100080e0:	7023      	strb	r3, [r4, #0]

	// progressive mode (VGA 525)
	if (!v->inter)
100080e2:	3351      	adds	r3, #81	; 0x51
100080e4:	5cc3      	ldrb	r3, [r0, r3]
100080e6:	2b00      	cmp	r3, #0
100080e8:	d125      	bne.n	10008136 <_Z16ScanlineTypeInitPK6sVmode+0x62>
	{
		// vertical sync (VGA 2)
		for (i = v->vsync1; i > 0; i--) *d++ = LINE_VSYNC;
100080ea:	8e86      	ldrh	r6, [r0, #52]	; 0x34
	*d++ = LINE_DARK;
100080ec:	3401      	adds	r4, #1
		for (i = v->vsync1; i > 0; i--) *d++ = LINE_VSYNC;
100080ee:	2e00      	cmp	r6, #0
100080f0:	d005      	beq.n	100080fe <_Z16ScanlineTypeInitPK6sVmode+0x2a>
100080f2:	0020      	movs	r0, r4
100080f4:	0032      	movs	r2, r6
100080f6:	2100      	movs	r1, #0
100080f8:	f7f9 f8d0 	bl	1000129c <__wrap_memset>
100080fc:	1934      	adds	r4, r6, r4

		// dark (VGA 33)
		for (i = v->vback1; i > 0; i--) *d++ = LINE_DARK;
100080fe:	8f2e      	ldrh	r6, [r5, #56]	; 0x38
10008100:	2e00      	cmp	r6, #0
10008102:	d005      	beq.n	10008110 <_Z16ScanlineTypeInitPK6sVmode+0x3c>
10008104:	0020      	movs	r0, r4
10008106:	0032      	movs	r2, r6
10008108:	2105      	movs	r1, #5
1000810a:	f7f9 f8c7 	bl	1000129c <__wrap_memset>
1000810e:	19a4      	adds	r4, r4, r6

		// image (VGA 480)
		for (i = v->vact1; i > 0; i--) *d++ = LINE_IMG;
10008110:	8f6e      	ldrh	r6, [r5, #58]	; 0x3a
10008112:	2e00      	cmp	r6, #0
10008114:	d005      	beq.n	10008122 <_Z16ScanlineTypeInitPK6sVmode+0x4e>
10008116:	0020      	movs	r0, r4
10008118:	0032      	movs	r2, r6
1000811a:	2106      	movs	r1, #6
1000811c:	f7f9 f8be 	bl	1000129c <__wrap_memset>
10008120:	19a4      	adds	r4, r4, r6

		// dark (VGA 10)
		for (i = v->vfront1; i > 0; i--) *d++ = LINE_DARK;
10008122:	8faa      	ldrh	r2, [r5, #60]	; 0x3c
10008124:	2a00      	cmp	r2, #0
10008126:	d003      	beq.n	10008130 <_Z16ScanlineTypeInitPK6sVmode+0x5c>
10008128:	2105      	movs	r1, #5
1000812a:	0020      	movs	r0, r4
1000812c:	f7f9 f8b6 	bl	1000129c <__wrap_memset>
		for (i = v->vfront2; i > 0; i--) *d++ = LINE_DARK;

		// half sync (PAL 3, NTSC 3)
		for (i = v->vpre2/2; i > 0; i--) *d++ = LINE_HHSYNC;
	}
}
10008130:	bc80      	pop	{r7}
10008132:	46b8      	mov	r8, r7
10008134:	bdf0      	pop	{r4, r5, r6, r7, pc}
		for (i = v->vsync1/2; i > 0; i--) *d++ = LINE_VVSYNC;
10008136:	8e83      	ldrh	r3, [r0, #52]	; 0x34
	*d++ = LINE_DARK;
10008138:	3401      	adds	r4, #1
		for (i = v->vsync1/2; i > 0; i--) *d++ = LINE_VVSYNC;
1000813a:	085e      	lsrs	r6, r3, #1
1000813c:	d006      	beq.n	1000814c <_Z16ScanlineTypeInitPK6sVmode+0x78>
1000813e:	0020      	movs	r0, r4
10008140:	0032      	movs	r2, r6
10008142:	2101      	movs	r1, #1
10008144:	f7f9 f8aa 	bl	1000129c <__wrap_memset>
		if ((v->vsync1 & 1) != 0) *d++ = LINE_VHSYNC;
10008148:	8eab      	ldrh	r3, [r5, #52]	; 0x34
		for (i = v->vsync1/2; i > 0; i--) *d++ = LINE_VVSYNC;
1000814a:	1934      	adds	r4, r6, r4
		if ((v->vsync1 & 1) != 0) *d++ = LINE_VHSYNC;
1000814c:	07db      	lsls	r3, r3, #31
1000814e:	d502      	bpl.n	10008156 <_Z16ScanlineTypeInitPK6sVmode+0x82>
10008150:	2302      	movs	r3, #2
10008152:	7023      	strb	r3, [r4, #0]
10008154:	3401      	adds	r4, #1
		for (i = v->vpost1/2; i > 0; i--) *d++ = LINE_HHSYNC;
10008156:	8eee      	ldrh	r6, [r5, #54]	; 0x36
10008158:	0876      	lsrs	r6, r6, #1
1000815a:	d005      	beq.n	10008168 <_Z16ScanlineTypeInitPK6sVmode+0x94>
1000815c:	0020      	movs	r0, r4
1000815e:	0032      	movs	r2, r6
10008160:	2103      	movs	r1, #3
10008162:	f7f9 f89b 	bl	1000129c <__wrap_memset>
10008166:	19a4      	adds	r4, r4, r6
		for (i = v->vback1; i > 0; i--) *d++ = LINE_DARK;
10008168:	8f2e      	ldrh	r6, [r5, #56]	; 0x38
1000816a:	2e00      	cmp	r6, #0
1000816c:	d005      	beq.n	1000817a <_Z16ScanlineTypeInitPK6sVmode+0xa6>
1000816e:	0020      	movs	r0, r4
10008170:	0032      	movs	r2, r6
10008172:	2105      	movs	r1, #5
10008174:	f7f9 f892 	bl	1000129c <__wrap_memset>
10008178:	19a4      	adds	r4, r4, r6
		if (v->odd)
1000817a:	2358      	movs	r3, #88	; 0x58
1000817c:	5ceb      	ldrb	r3, [r5, r3]
			for (i = v->vact1; i > 0; i--) *d++ = LINE_IMGODD1; // odd lines 1, 3, 5, ... (PAL)
1000817e:	8f6e      	ldrh	r6, [r5, #58]	; 0x3a
		if (v->odd)
10008180:	2b00      	cmp	r3, #0
10008182:	d16e      	bne.n	10008262 <_Z16ScanlineTypeInitPK6sVmode+0x18e>
			for (i = v->vact1; i > 0; i--) *d++ = LINE_IMGEVEN1; // even lines 0, 2, 4, ... (NTSC)
10008184:	2e00      	cmp	r6, #0
10008186:	d005      	beq.n	10008194 <_Z16ScanlineTypeInitPK6sVmode+0xc0>
10008188:	0020      	movs	r0, r4
1000818a:	0032      	movs	r2, r6
1000818c:	2107      	movs	r1, #7
1000818e:	f7f9 f885 	bl	1000129c <__wrap_memset>
10008192:	19a4      	adds	r4, r4, r6
		for (i = v->vfront1; i > 0; i--) *d++ = LINE_DARK;
10008194:	8fae      	ldrh	r6, [r5, #60]	; 0x3c
10008196:	2e00      	cmp	r6, #0
10008198:	d005      	beq.n	100081a6 <_Z16ScanlineTypeInitPK6sVmode+0xd2>
1000819a:	0020      	movs	r0, r4
1000819c:	0032      	movs	r2, r6
1000819e:	2105      	movs	r1, #5
100081a0:	f7f9 f87c 	bl	1000129c <__wrap_memset>
100081a4:	19a4      	adds	r4, r4, r6
		for (i = v->vpre1/2; i > 0; i--) *d++ = LINE_HHSYNC;
100081a6:	8fef      	ldrh	r7, [r5, #62]	; 0x3e
100081a8:	087e      	lsrs	r6, r7, #1
100081aa:	d006      	beq.n	100081ba <_Z16ScanlineTypeInitPK6sVmode+0xe6>
100081ac:	0020      	movs	r0, r4
100081ae:	0032      	movs	r2, r6
100081b0:	2103      	movs	r1, #3
100081b2:	f7f9 f873 	bl	1000129c <__wrap_memset>
		k = v->vpre1 & 1;
100081b6:	8fef      	ldrh	r7, [r5, #62]	; 0x3e
		for (i = v->vpre1/2; i > 0; i--) *d++ = LINE_HHSYNC;
100081b8:	19a4      	adds	r4, r4, r6
		k = v->vpre1 & 1;
100081ba:	2301      	movs	r3, #1
100081bc:	001a      	movs	r2, r3
100081be:	403a      	ands	r2, r7
		if (k != 0) *d++ = LINE_HVSYNC;
100081c0:	423b      	tst	r3, r7
100081c2:	d002      	beq.n	100081ca <_Z16ScanlineTypeInitPK6sVmode+0xf6>
100081c4:	3303      	adds	r3, #3
100081c6:	7023      	strb	r3, [r4, #0]
100081c8:	3401      	adds	r4, #1
		for (i = (v->vsync2 - k)/2; i > 0; i--) *d++ = LINE_VVSYNC;
100081ca:	2342      	movs	r3, #66	; 0x42
100081cc:	4698      	mov	r8, r3
100081ce:	5aeb      	ldrh	r3, [r5, r3]
100081d0:	1a9a      	subs	r2, r3, r2
100081d2:	0fd6      	lsrs	r6, r2, #31
100081d4:	18b6      	adds	r6, r6, r2
100081d6:	1076      	asrs	r6, r6, #1
100081d8:	d007      	beq.n	100081ea <_Z16ScanlineTypeInitPK6sVmode+0x116>
100081da:	0020      	movs	r0, r4
100081dc:	0032      	movs	r2, r6
100081de:	2101      	movs	r1, #1
100081e0:	f7f9 f85c 	bl	1000129c <__wrap_memset>
		if (((v->vsync2 - k) & 1) != 0) *d++ = LINE_VHSYNC;
100081e4:	4643      	mov	r3, r8
100081e6:	5aeb      	ldrh	r3, [r5, r3]
		for (i = (v->vsync2 - k)/2; i > 0; i--) *d++ = LINE_VVSYNC;
100081e8:	19a4      	adds	r4, r4, r6
		if (((v->vsync2 - k) & 1) != 0) *d++ = LINE_VHSYNC;
100081ea:	1bdb      	subs	r3, r3, r7
100081ec:	07db      	lsls	r3, r3, #31
100081ee:	d502      	bpl.n	100081f6 <_Z16ScanlineTypeInitPK6sVmode+0x122>
100081f0:	2302      	movs	r3, #2
100081f2:	7023      	strb	r3, [r4, #0]
100081f4:	3401      	adds	r4, #1
		for (i = v->vpost2/2; i > 0; i--) *d++ = LINE_HHSYNC;
100081f6:	2344      	movs	r3, #68	; 0x44
100081f8:	5aee      	ldrh	r6, [r5, r3]
100081fa:	0876      	lsrs	r6, r6, #1
100081fc:	d005      	beq.n	1000820a <_Z16ScanlineTypeInitPK6sVmode+0x136>
100081fe:	0020      	movs	r0, r4
10008200:	0032      	movs	r2, r6
10008202:	2103      	movs	r1, #3
10008204:	f7f9 f84a 	bl	1000129c <__wrap_memset>
10008208:	19a4      	adds	r4, r4, r6
		for (i = v->vback2; i > 0; i--) *d++ = LINE_DARK;
1000820a:	2346      	movs	r3, #70	; 0x46
1000820c:	5aee      	ldrh	r6, [r5, r3]
1000820e:	2e00      	cmp	r6, #0
10008210:	d005      	beq.n	1000821e <_Z16ScanlineTypeInitPK6sVmode+0x14a>
10008212:	0020      	movs	r0, r4
10008214:	0032      	movs	r2, r6
10008216:	2105      	movs	r1, #5
10008218:	f7f9 f840 	bl	1000129c <__wrap_memset>
1000821c:	19a4      	adds	r4, r4, r6
		if (v->odd)
1000821e:	2358      	movs	r3, #88	; 0x58
10008220:	5ceb      	ldrb	r3, [r5, r3]
10008222:	2b00      	cmp	r3, #0
10008224:	d026      	beq.n	10008274 <_Z16ScanlineTypeInitPK6sVmode+0x1a0>
			for (i = v->vact2; i > 0; i--) *d++ = LINE_IMGEVEN2; // even lines 0, 2, 4, ... (PAL)
10008226:	2348      	movs	r3, #72	; 0x48
10008228:	5aee      	ldrh	r6, [r5, r3]
1000822a:	2e00      	cmp	r6, #0
1000822c:	d005      	beq.n	1000823a <_Z16ScanlineTypeInitPK6sVmode+0x166>
1000822e:	0020      	movs	r0, r4
10008230:	0032      	movs	r2, r6
10008232:	2108      	movs	r1, #8
10008234:	f7f9 f832 	bl	1000129c <__wrap_memset>
10008238:	19a4      	adds	r4, r4, r6
		for (i = v->vfront2; i > 0; i--) *d++ = LINE_DARK;
1000823a:	234a      	movs	r3, #74	; 0x4a
1000823c:	5aee      	ldrh	r6, [r5, r3]
1000823e:	2e00      	cmp	r6, #0
10008240:	d005      	beq.n	1000824e <_Z16ScanlineTypeInitPK6sVmode+0x17a>
10008242:	0020      	movs	r0, r4
10008244:	0032      	movs	r2, r6
10008246:	2105      	movs	r1, #5
10008248:	f7f9 f828 	bl	1000129c <__wrap_memset>
1000824c:	19a4      	adds	r4, r4, r6
		for (i = v->vpre2/2; i > 0; i--) *d++ = LINE_HHSYNC;
1000824e:	234c      	movs	r3, #76	; 0x4c
10008250:	5aea      	ldrh	r2, [r5, r3]
10008252:	0852      	lsrs	r2, r2, #1
10008254:	d100      	bne.n	10008258 <_Z16ScanlineTypeInitPK6sVmode+0x184>
10008256:	e76b      	b.n	10008130 <_Z16ScanlineTypeInitPK6sVmode+0x5c>
10008258:	2103      	movs	r1, #3
1000825a:	0020      	movs	r0, r4
1000825c:	f7f9 f81e 	bl	1000129c <__wrap_memset>
10008260:	e766      	b.n	10008130 <_Z16ScanlineTypeInitPK6sVmode+0x5c>
			for (i = v->vact1; i > 0; i--) *d++ = LINE_IMGODD1; // odd lines 1, 3, 5, ... (PAL)
10008262:	2e00      	cmp	r6, #0
10008264:	d096      	beq.n	10008194 <_Z16ScanlineTypeInitPK6sVmode+0xc0>
10008266:	0020      	movs	r0, r4
10008268:	0032      	movs	r2, r6
1000826a:	2109      	movs	r1, #9
1000826c:	f7f9 f816 	bl	1000129c <__wrap_memset>
10008270:	19a4      	adds	r4, r4, r6
10008272:	e78f      	b.n	10008194 <_Z16ScanlineTypeInitPK6sVmode+0xc0>
			for (i = v->vact2; i > 0; i--) *d++ = LINE_IMGODD2; // odd lines 1, 3, 5, ... (NTSC)
10008274:	2348      	movs	r3, #72	; 0x48
10008276:	5aee      	ldrh	r6, [r5, r3]
10008278:	2e00      	cmp	r6, #0
1000827a:	d0de      	beq.n	1000823a <_Z16ScanlineTypeInitPK6sVmode+0x166>
1000827c:	0020      	movs	r0, r4
1000827e:	0032      	movs	r2, r6
10008280:	210a      	movs	r1, #10
10008282:	f7f9 f80b 	bl	1000129c <__wrap_memset>
10008286:	19a4      	adds	r4, r4, r6
10008288:	e7d7      	b.n	1000823a <_Z16ScanlineTypeInitPK6sVmode+0x166>
1000828a:	46c0      	nop			; (mov r8, r8)
1000828c:	200389f8 	.word	0x200389f8

10008290 <_Z7VgaInitPK6sVmode>:
}

// initialize videomode (returns False on bad configuration)
// - All layer modes must use same layer program (LAYERMODE_BASE = overlapped layers are OFF)
void VgaInit(const sVmode* vmode)
{
10008290:	b5f0      	push	{r4, r5, r6, r7, lr}
10008292:	46d6      	mov	lr, sl
10008294:	464f      	mov	r7, r9
10008296:	4646      	mov	r6, r8
10008298:	4682      	mov	sl, r0
1000829a:	b5c0      	push	{r6, r7, lr}
	int i;

	// stop old state
	VgaTerm();
1000829c:	f7ff fecc 	bl	10008038 <_Z7VgaTermv>

	// initialize scanline type table
	ScanlineTypeInit(vmode);
100082a0:	4650      	mov	r0, sl
100082a2:	f7ff ff17 	bl	100080d4 <_Z16ScanlineTypeInitPK6sVmode>
	// prepare render font pixel mask
	for (i = 0; i < 256; i++)
	{
		// higher 4 bits
		u32 m = 0;
		if ((i & B7) != 0) m |= 0xff;
100082a6:	2280      	movs	r2, #128	; 0x80
100082a8:	4691      	mov	r9, r2
		if ((i & B6) != 0) m |= 0xff << 8;
100082aa:	3a40      	subs	r2, #64	; 0x40
100082ac:	4690      	mov	r8, r2
		if ((i & B5) != 0) m |= 0xff << 16;
		if ((i & B4) != 0) m |= 0xff << 24;
100082ae:	22ff      	movs	r2, #255	; 0xff
		if ((i & B5) != 0) m |= 0xff << 16;
100082b0:	27ff      	movs	r7, #255	; 0xff
		if ((i & B4) != 0) m |= 0xff << 24;
100082b2:	0612      	lsls	r2, r2, #24
	for (i = 0; i < 256; i++)
100082b4:	2300      	movs	r3, #0
		if ((i & B5) != 0) m |= 0xff << 16;
100082b6:	2520      	movs	r5, #32
		if ((i & B4) != 0) m |= 0xff << 24;
100082b8:	2610      	movs	r6, #16
100082ba:	4694      	mov	ip, r2
100082bc:	4952      	ldr	r1, [pc, #328]	; (10008408 <_Z7VgaInitPK6sVmode+0x178>)
		if ((i & B5) != 0) m |= 0xff << 16;
100082be:	043f      	lsls	r7, r7, #16
100082c0:	e024      	b.n	1000830c <_Z7VgaInitPK6sVmode+0x7c>
		if ((i & B7) != 0) m |= 0xff;
100082c2:	20ff      	movs	r0, #255	; 0xff
		u32 m = 0;
100082c4:	2200      	movs	r2, #0
		if ((i & B7) != 0) m |= 0xff;
100082c6:	0200      	lsls	r0, r0, #8
		if ((i & B6) != 0) m |= 0xff << 8;
100082c8:	4644      	mov	r4, r8
100082ca:	421c      	tst	r4, r3
100082cc:	d000      	beq.n	100082d0 <_Z7VgaInitPK6sVmode+0x40>
100082ce:	0002      	movs	r2, r0
		if ((i & B5) != 0) m |= 0xff << 16;
100082d0:	421d      	tst	r5, r3
100082d2:	d000      	beq.n	100082d6 <_Z7VgaInitPK6sVmode+0x46>
100082d4:	433a      	orrs	r2, r7
		if ((i & B4) != 0) m |= 0xff << 24;
100082d6:	421e      	tst	r6, r3
100082d8:	d001      	beq.n	100082de <_Z7VgaInitPK6sVmode+0x4e>
100082da:	4660      	mov	r0, ip
100082dc:	4302      	orrs	r2, r0
		RenderTextMask[2*i] = m;
100082de:	600a      	str	r2, [r1, #0]

		// lower 4 bits
		m = 0;
		if ((i & B3) != 0) m |= 0xff;
100082e0:	071a      	lsls	r2, r3, #28
100082e2:	d419      	bmi.n	10008318 <_Z7VgaInitPK6sVmode+0x88>
100082e4:	20ff      	movs	r0, #255	; 0xff
		m = 0;
100082e6:	2200      	movs	r2, #0
		if ((i & B3) != 0) m |= 0xff;
100082e8:	0200      	lsls	r0, r0, #8
		if ((i & B2) != 0) m |= 0xff << 8;
100082ea:	075c      	lsls	r4, r3, #29
100082ec:	d500      	bpl.n	100082f0 <_Z7VgaInitPK6sVmode+0x60>
100082ee:	0002      	movs	r2, r0
		if ((i & B1) != 0) m |= 0xff << 16;
100082f0:	0798      	lsls	r0, r3, #30
100082f2:	d500      	bpl.n	100082f6 <_Z7VgaInitPK6sVmode+0x66>
100082f4:	433a      	orrs	r2, r7
		if ((i & B0) != 0) m |= 0xff << 24;
100082f6:	07d8      	lsls	r0, r3, #31
100082f8:	d501      	bpl.n	100082fe <_Z7VgaInitPK6sVmode+0x6e>
100082fa:	4660      	mov	r0, ip
100082fc:	4302      	orrs	r2, r0
		RenderTextMask[2*i+1] = m;
100082fe:	604a      	str	r2, [r1, #4]
	for (i = 0; i < 256; i++)
10008300:	2280      	movs	r2, #128	; 0x80
10008302:	3301      	adds	r3, #1
10008304:	3108      	adds	r1, #8
10008306:	0052      	lsls	r2, r2, #1
10008308:	4293      	cmp	r3, r2
1000830a:	d008      	beq.n	1000831e <_Z7VgaInitPK6sVmode+0x8e>
		if ((i & B7) != 0) m |= 0xff;
1000830c:	464a      	mov	r2, r9
1000830e:	421a      	tst	r2, r3
10008310:	d0d7      	beq.n	100082c2 <_Z7VgaInitPK6sVmode+0x32>
10008312:	22ff      	movs	r2, #255	; 0xff
10008314:	483d      	ldr	r0, [pc, #244]	; (1000840c <_Z7VgaInitPK6sVmode+0x17c>)
10008316:	e7d7      	b.n	100082c8 <_Z7VgaInitPK6sVmode+0x38>
		if ((i & B3) != 0) m |= 0xff;
10008318:	22ff      	movs	r2, #255	; 0xff
1000831a:	483c      	ldr	r0, [pc, #240]	; (1000840c <_Z7VgaInitPK6sVmode+0x17c>)
1000831c:	e7e5      	b.n	100082ea <_Z7VgaInitPK6sVmode+0x5a>
	{
		while (1) {}
	}

	// clear buffer with black color
	memset(LineBuf0, COL_BLACK, BLACK_MAX);
1000831e:	22a0      	movs	r2, #160	; 0xa0

	// save current videomode
	memcpy(&CurVmode, vmode, sizeof(sVmode));

	// initialize parameters
	ScanLine = 1; // currently processed scanline
10008320:	2601      	movs	r6, #1
//	Frame = 0;
	BufInx = 0; // at first, control buffer 1 will be sent out
10008322:	2400      	movs	r4, #0
	memset(LineBuf0, COL_BLACK, BLACK_MAX);
10008324:	2100      	movs	r1, #0
10008326:	00d2      	lsls	r2, r2, #3
10008328:	4839      	ldr	r0, [pc, #228]	; (10008410 <_Z7VgaInitPK6sVmode+0x180>)
1000832a:	f7f8 ffb7 	bl	1000129c <__wrap_memset>
	memcpy(&CurVmode, vmode, sizeof(sVmode));
1000832e:	4651      	mov	r1, sl
10008330:	225c      	movs	r2, #92	; 0x5c
10008332:	4838      	ldr	r0, [pc, #224]	; (10008414 <_Z7VgaInitPK6sVmode+0x184>)
10008334:	f7f8 ffb8 	bl	100012a8 <__wrap___aeabi_memcpy>
	ScanLine = 1; // currently processed scanline
10008338:	4b37      	ldr	r3, [pc, #220]	; (10008418 <_Z7VgaInitPK6sVmode+0x188>)
	CtrlBufNext[0] = CtrlBuf2;

	// initialize base layer
	LayerModeInx[0] = LAYERMODE_BASE;
1000833a:	4f38      	ldr	r7, [pc, #224]	; (1000841c <_Z7VgaInitPK6sVmode+0x18c>)
	ScanLine = 1; // currently processed scanline
1000833c:	601e      	str	r6, [r3, #0]
	BufInx = 0; // at first, control buffer 1 will be sent out
1000833e:	4b38      	ldr	r3, [pc, #224]	; (10008420 <_Z7VgaInitPK6sVmode+0x190>)
	CtrlBufNext[0] = CtrlBuf2;
10008340:	4a38      	ldr	r2, [pc, #224]	; (10008424 <_Z7VgaInitPK6sVmode+0x194>)
	BufInx = 0; // at first, control buffer 1 will be sent out
10008342:	601c      	str	r4, [r3, #0]
	CtrlBufNext[0] = CtrlBuf2;
10008344:	4b38      	ldr	r3, [pc, #224]	; (10008428 <_Z7VgaInitPK6sVmode+0x198>)
	LayerModeInx[0] = LAYERMODE_BASE;
10008346:	703c      	strb	r4, [r7, #0]
	CtrlBufNext[0] = CtrlBuf2;
10008348:	601a      	str	r2, [r3, #0]
	memcpy(&CurLayerMode[0], &LayerMode[LAYERMODE_BASE], sizeof(sLayerMode));
1000834a:	4938      	ldr	r1, [pc, #224]	; (1000842c <_Z7VgaInitPK6sVmode+0x19c>)
1000834c:	2203      	movs	r2, #3
1000834e:	4838      	ldr	r0, [pc, #224]	; (10008430 <_Z7VgaInitPK6sVmode+0x1a0>)
10008350:	f7f8 ffaa 	bl	100012a8 <__wrap___aeabi_memcpy>
	memset(&LayerScreen[0], 0, sizeof(sLayer));
10008354:	2224      	movs	r2, #36	; 0x24
10008356:	2100      	movs	r1, #0
10008358:	4836      	ldr	r0, [pc, #216]	; (10008434 <_Z7VgaInitPK6sVmode+0x1a4>)
1000835a:	f7f8 ff9f 	bl	1000129c <__wrap_memset>

	// save layer modes
	LayerModeInx[1] = vmode->mode[1];
1000835e:	4653      	mov	r3, sl
10008360:	7e9b      	ldrb	r3, [r3, #26]
		if (LayerModeInx[i] != LAYERMODE_BASE) LayerMask |= (1 << i);
	}

	// get layer program
	LayerProgInx = vmode->prog;
	memcpy(&CurLayerProg, &LayerProg[LayerProgInx], sizeof(sLayerProg));
10008362:	4935      	ldr	r1, [pc, #212]	; (10008438 <_Z7VgaInitPK6sVmode+0x1a8>)
	LayerModeInx[1] = vmode->mode[1];
10008364:	707b      	strb	r3, [r7, #1]
	LayerModeInx[2] = vmode->mode[2];
10008366:	4653      	mov	r3, sl
10008368:	7edb      	ldrb	r3, [r3, #27]
1000836a:	70bb      	strb	r3, [r7, #2]
	LayerModeInx[3] = vmode->mode[3];
1000836c:	4653      	mov	r3, sl
1000836e:	7f1b      	ldrb	r3, [r3, #28]
10008370:	70fb      	strb	r3, [r7, #3]
	LayerProgInx = vmode->prog;
10008372:	4653      	mov	r3, sl
	LayerMask = B0; // mask of active layers
10008374:	4f31      	ldr	r7, [pc, #196]	; (1000843c <_Z7VgaInitPK6sVmode+0x1ac>)
10008376:	703e      	strb	r6, [r7, #0]
	LayerProgInx = vmode->prog;
10008378:	7e1a      	ldrb	r2, [r3, #24]
1000837a:	4b31      	ldr	r3, [pc, #196]	; (10008440 <_Z7VgaInitPK6sVmode+0x1b0>)
1000837c:	701a      	strb	r2, [r3, #0]
	memcpy(&CurLayerProg, &LayerProg[LayerProgInx], sizeof(sLayerProg));
1000837e:	0053      	lsls	r3, r2, #1
10008380:	189b      	adds	r3, r3, r2
10008382:	4a30      	ldr	r2, [pc, #192]	; (10008444 <_Z7VgaInitPK6sVmode+0x1b4>)
10008384:	011b      	lsls	r3, r3, #4
10008386:	189b      	adds	r3, r3, r2
10008388:	000a      	movs	r2, r1
1000838a:	cb23      	ldmia	r3!, {r0, r1, r5}
1000838c:	c223      	stmia	r2!, {r0, r1, r5}
1000838e:	cb23      	ldmia	r3!, {r0, r1, r5}
10008390:	c223      	stmia	r2!, {r0, r1, r5}
10008392:	cb23      	ldmia	r3!, {r0, r1, r5}
10008394:	c223      	stmia	r2!, {r0, r1, r5}
10008396:	cb23      	ldmia	r3!, {r0, r1, r5}
10008398:	c223      	stmia	r2!, {r0, r1, r5}
        dma_channel_hw_addr(channel)->read_addr = (uintptr_t) read_addr;
1000839a:	25a0      	movs	r5, #160	; 0xa0

	// initialize VGA PIO
	VgaPioInit();
1000839c:	f7ff fcbc 	bl	10007d18 <_Z10VgaPioInitv>

	// initialize scanline buffers
	VgaBufInit();
100083a0:	f7ff fd74 	bl	10007e8c <_Z10VgaBufInitv>
        dma_channel_hw_addr(channel)->transfer_count = trans_count;
100083a4:	2202      	movs	r2, #2
        dma_channel_hw_addr(channel)->read_addr = (uintptr_t) read_addr;
100083a6:	4b28      	ldr	r3, [pc, #160]	; (10008448 <_Z7VgaInitPK6sVmode+0x1b8>)
100083a8:	05ed      	lsls	r5, r5, #23
100083aa:	602b      	str	r3, [r5, #0]
        dma_channel_hw_addr(channel)->write_addr = (uintptr_t) write_addr;
100083ac:	4b27      	ldr	r3, [pc, #156]	; (1000844c <_Z7VgaInitPK6sVmode+0x1bc>)
100083ae:	4928      	ldr	r1, [pc, #160]	; (10008450 <_Z7VgaInitPK6sVmode+0x1c0>)
100083b0:	606b      	str	r3, [r5, #4]
        dma_channel_hw_addr(channel)->al1_ctrl = channel_config_get_ctrl_value(config);
100083b2:	4b28      	ldr	r3, [pc, #160]	; (10008454 <_Z7VgaInitPK6sVmode+0x1c4>)
        dma_channel_hw_addr(channel)->transfer_count = trans_count;
100083b4:	60aa      	str	r2, [r5, #8]
        dma_channel_hw_addr(channel)->al1_ctrl = channel_config_get_ctrl_value(config);
100083b6:	612b      	str	r3, [r5, #16]
        dma_channel_hw_addr(channel)->read_addr = (uintptr_t) read_addr;
100083b8:	4b27      	ldr	r3, [pc, #156]	; (10008458 <_Z7VgaInitPK6sVmode+0x1c8>)
	irq_set_exclusive_handler(DMA_IRQ_0, VgaLine);
100083ba:	200b      	movs	r0, #11
100083bc:	601c      	str	r4, [r3, #0]
        dma_channel_hw_addr(channel)->write_addr = (uintptr_t) write_addr;
100083be:	6059      	str	r1, [r3, #4]
        dma_channel_hw_addr(channel)->al1_ctrl = channel_config_get_ctrl_value(config);
100083c0:	4926      	ldr	r1, [pc, #152]	; (1000845c <_Z7VgaInitPK6sVmode+0x1cc>)
        dma_channel_hw_addr(channel)->transfer_count = trans_count;
100083c2:	609c      	str	r4, [r3, #8]
        dma_channel_hw_addr(channel)->al1_ctrl = channel_config_get_ctrl_value(config);
100083c4:	6119      	str	r1, [r3, #16]
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
100083c6:	4b26      	ldr	r3, [pc, #152]	; (10008460 <_Z7VgaInitPK6sVmode+0x1d0>)
100083c8:	4926      	ldr	r1, [pc, #152]	; (10008464 <_Z7VgaInitPK6sVmode+0x1d4>)
100083ca:	601a      	str	r2, [r3, #0]
100083cc:	f7f9 fb5c 	bl	10001a88 <irq_set_exclusive_handler>
	irq_set_priority(DMA_IRQ_0, 0);
100083d0:	2100      	movs	r1, #0
100083d2:	200b      	movs	r0, #11
100083d4:	f7f9 fc62 	bl	10001c9c <irq_set_priority>

	// initialize DMA
	VgaDmaInit();

	// enable DMA IRQ
	irq_set_enabled(DMA_IRQ_0, true);
100083d8:	2101      	movs	r1, #1
100083da:	200b      	movs	r0, #11
100083dc:	f7f9 fb32 	bl	10001a44 <irq_set_enabled>
    dma_hw->multi_channel_trigger = chan_mask;
100083e0:	2386      	movs	r3, #134	; 0x86
100083e2:	00db      	lsls	r3, r3, #3
100083e4:	50ee      	str	r6, [r5, r3]
                 ((mask << PIO_CTRL_SM_ENABLE_LSB) & PIO_CTRL_SM_ENABLE_BITS);
100083e6:	230f      	movs	r3, #15
    pio->ctrl |= ((mask << PIO_CTRL_CLKDIV_RESTART_LSB) & PIO_CTRL_CLKDIV_RESTART_BITS) |
100083e8:	491f      	ldr	r1, [pc, #124]	; (10008468 <_Z7VgaInitPK6sVmode+0x1d8>)

	// start DMA with base layer 0
	dma_channel_start(VGA_DMA_CB0);

	// run state machines
	pio_enable_sm_mask_in_sync(VGA_PIO, LayerMask);
100083ea:	783a      	ldrb	r2, [r7, #0]
100083ec:	6808      	ldr	r0, [r1, #0]
                 ((mask << PIO_CTRL_SM_ENABLE_LSB) & PIO_CTRL_SM_ENABLE_BITS);
100083ee:	4013      	ands	r3, r2
    pio->ctrl |= ((mask << PIO_CTRL_CLKDIV_RESTART_LSB) & PIO_CTRL_CLKDIV_RESTART_BITS) |
100083f0:	4303      	orrs	r3, r0
100083f2:	20f0      	movs	r0, #240	; 0xf0
100083f4:	0212      	lsls	r2, r2, #8
100083f6:	0100      	lsls	r0, r0, #4
100083f8:	4002      	ands	r2, r0
100083fa:	4313      	orrs	r3, r2
100083fc:	600b      	str	r3, [r1, #0]
}
100083fe:	bce0      	pop	{r5, r6, r7}
10008400:	46ba      	mov	sl, r7
10008402:	46b1      	mov	r9, r6
10008404:	46a8      	mov	r8, r5
10008406:	bdf0      	pop	{r4, r5, r6, r7, pc}
10008408:	200381e4 	.word	0x200381e4
1000840c:	0000ffff 	.word	0x0000ffff
10008410:	20037100 	.word	0x20037100
10008414:	2003705c 	.word	0x2003705c
10008418:	200389f4 	.word	0x200389f4
1000841c:	200370d8 	.word	0x200370d8
10008420:	200365c0 	.word	0x200365c0
10008424:	20036b00 	.word	0x20036b00
10008428:	20037018 	.word	0x20037018
1000842c:	1000a0a0 	.word	0x1000a0a0
10008430:	20037028 	.word	0x20037028
10008434:	200370dc 	.word	0x200370dc
10008438:	2003702c 	.word	0x2003702c
1000843c:	20039bb4 	.word	0x20039bb4
10008440:	20039bb5 	.word	0x20039bb5
10008444:	1000a0dc 	.word	0x1000a0dc
10008448:	200365e8 	.word	0x200365e8
1000844c:	50000078 	.word	0x50000078
10008450:	50200010 	.word	0x50200010
10008454:	001f84f9 	.word	0x001f84f9
10008458:	50000040 	.word	0x50000040
1000845c:	0060001b 	.word	0x0060001b
10008460:	50002404 	.word	0x50002404
10008464:	20001f61 	.word	0x20001f61
10008468:	50200000 	.word	0x50200000

1000846c <_Z7VgaCorev>:

void (* volatile Core1Fnc)() = NULL; // core 1 remote function

// VGA core
void VgaCore()
{
1000846c:	b570      	push	{r4, r5, r6, lr}
			if ((u32)v == (u32)1)
				VgaTerm(); // terminate
			else
				VgaInit(v);
			__dmb();
			VgaVmodeReq = NULL;
1000846e:	2600      	movs	r6, #0
10008470:	4d0f      	ldr	r5, [pc, #60]	; (100084b0 <_Z7VgaCorev+0x44>)
10008472:	4c10      	ldr	r4, [pc, #64]	; (100084b4 <_Z7VgaCorev+0x48>)
    __asm volatile ("dmb");
10008474:	f3bf 8f5f 	dmb	sy
		v = VgaVmodeReq;
10008478:	6828      	ldr	r0, [r5, #0]
		if (v != NULL)
1000847a:	2800      	cmp	r0, #0
1000847c:	d006      	beq.n	1000848c <_Z7VgaCorev+0x20>
			if ((u32)v == (u32)1)
1000847e:	2801      	cmp	r0, #1
10008480:	d012      	beq.n	100084a8 <_Z7VgaCorev+0x3c>
				VgaInit(v);
10008482:	f7ff ff05 	bl	10008290 <_Z7VgaInitPK6sVmode>
10008486:	f3bf 8f5f 	dmb	sy
			VgaVmodeReq = NULL;
1000848a:	602e      	str	r6, [r5, #0]
		}

		// execute remote function
		fnc = Core1Fnc;
1000848c:	6823      	ldr	r3, [r4, #0]
		if (fnc != NULL)
1000848e:	2b00      	cmp	r3, #0
10008490:	d0f0      	beq.n	10008474 <_Z7VgaCorev+0x8>
		{
			fnc();
10008492:	4798      	blx	r3
10008494:	f3bf 8f5f 	dmb	sy
			__dmb();
			Core1Fnc = NULL;
10008498:	6026      	str	r6, [r4, #0]
1000849a:	f3bf 8f5f 	dmb	sy
		v = VgaVmodeReq;
1000849e:	6828      	ldr	r0, [r5, #0]
		if (v != NULL)
100084a0:	2800      	cmp	r0, #0
100084a2:	d0f3      	beq.n	1000848c <_Z7VgaCorev+0x20>
			if ((u32)v == (u32)1)
100084a4:	2801      	cmp	r0, #1
100084a6:	d1ec      	bne.n	10008482 <_Z7VgaCorev+0x16>
				VgaTerm(); // terminate
100084a8:	f7ff fdc6 	bl	10008038 <_Z7VgaTermv>
100084ac:	e7eb      	b.n	10008486 <_Z7VgaCorev+0x1a>
100084ae:	46c0      	nop			; (mov r8, r8)
100084b0:	20038ea0 	.word	0x20038ea0
100084b4:	200365e4 	.word	0x200365e4

100084b8 <_Z10VgaInitReqPK6sVmode>:
}

// request to initialize VGA videomode, NULL=only stop driver (wait to initialization completes)
void VgaInitReq(const sVmode* vmode)
{
	if (vmode == NULL) vmode = (const sVmode*)1;
100084b8:	2800      	cmp	r0, #0
100084ba:	d00c      	beq.n	100084d6 <_Z10VgaInitReqPK6sVmode+0x1e>
100084bc:	f3bf 8f5f 	dmb	sy
	__dmb();
	VgaVmodeReq = vmode;
100084c0:	4a06      	ldr	r2, [pc, #24]	; (100084dc <_Z10VgaInitReqPK6sVmode+0x24>)
100084c2:	6010      	str	r0, [r2, #0]
	while (VgaVmodeReq != NULL) { __dmb(); }
100084c4:	6813      	ldr	r3, [r2, #0]
100084c6:	2b00      	cmp	r3, #0
100084c8:	d004      	beq.n	100084d4 <_Z10VgaInitReqPK6sVmode+0x1c>
100084ca:	f3bf 8f5f 	dmb	sy
100084ce:	6813      	ldr	r3, [r2, #0]
100084d0:	2b00      	cmp	r3, #0
100084d2:	d1fa      	bne.n	100084ca <_Z10VgaInitReqPK6sVmode+0x12>
}
100084d4:	4770      	bx	lr
	if (vmode == NULL) vmode = (const sVmode*)1;
100084d6:	3001      	adds	r0, #1
100084d8:	e7f0      	b.n	100084bc <_Z10VgaInitReqPK6sVmode+0x4>
100084da:	46c0      	nop			; (mov r8, r8)
100084dc:	20038ea0 	.word	0x20038ea0

100084e0 <_Z9Core1ExecPFvvE>:
100084e0:	f3bf 8f5f 	dmb	sy

// execute core 1 remote function
void Core1Exec(void (*fnc)())
{
	__dmb();
	Core1Fnc = fnc;
100084e4:	4b02      	ldr	r3, [pc, #8]	; (100084f0 <_Z9Core1ExecPFvvE+0x10>)
100084e6:	6018      	str	r0, [r3, #0]
100084e8:	f3bf 8f5f 	dmb	sy
	__dmb();
}
100084ec:	4770      	bx	lr
100084ee:	46c0      	nop			; (mov r8, r8)
100084f0:	200365e4 	.word	0x200365e4

100084f4 <_Z9Core1Busyv>:
100084f4:	f3bf 8f5f 	dmb	sy

// check if core 1 is busy (executing remote function)
Bool Core1Busy()
{
	__dmb();
	return Core1Fnc != NULL;
100084f8:	4b02      	ldr	r3, [pc, #8]	; (10008504 <_Z9Core1Busyv+0x10>)
100084fa:	6818      	ldr	r0, [r3, #0]
100084fc:	1e43      	subs	r3, r0, #1
100084fe:	4198      	sbcs	r0, r3
10008500:	b2c0      	uxtb	r0, r0
}
10008502:	4770      	bx	lr
10008504:	200365e4 	.word	0x200365e4

10008508 <_Z9Core1Waitv>:

// wait if core 1 is busy (executing remote function)
void Core1Wait()
{
10008508:	4a03      	ldr	r2, [pc, #12]	; (10008518 <_Z9Core1Waitv+0x10>)
1000850a:	f3bf 8f5f 	dmb	sy
	return Core1Fnc != NULL;
1000850e:	6813      	ldr	r3, [r2, #0]
	while (Core1Busy()) {}
10008510:	2b00      	cmp	r3, #0
10008512:	d1fa      	bne.n	1000850a <_Z9Core1Waitv+0x2>
}
10008514:	4770      	bx	lr
10008516:	46c0      	nop			; (mov r8, r8)
10008518:	200365e4 	.word	0x200365e4

1000851c <_Z11ScreenClearP7sScreen>:
1000851c:	f3bf 8f5f 	dmb	sy

// clear screen (set 0 strips, does not modify sprites)
void ScreenClear(sScreen* s)
{
	__dmb();
	s->num = 0;
10008520:	2300      	movs	r3, #0
10008522:	8003      	strh	r3, [r0, #0]
10008524:	f3bf 8f5f 	dmb	sy
	__dmb();
}
10008528:	4770      	bx	lr
1000852a:	46c0      	nop			; (mov r8, r8)

1000852c <_Z14ScreenAddStripP7sScreeni>:

// add empty strip to the screen (returns pointer to the strip)
sStrip* ScreenAddStrip(sScreen* s, int height)
{
	int n = s->num;
1000852c:	8802      	ldrh	r2, [r0, #0]
{
1000852e:	b510      	push	{r4, lr}
10008530:	0153      	lsls	r3, r2, #5
	sStrip* t = &s->strip[n];
	t->height = height;
10008532:	18c4      	adds	r4, r0, r3
10008534:	80a1      	strh	r1, [r4, #4]
	t->num = 0;
10008536:	2100      	movs	r1, #0
10008538:	80e1      	strh	r1, [r4, #6]
1000853a:	f3bf 8f5f 	dmb	sy
	__dmb();
	s->num = n + 1;
1000853e:	3201      	adds	r2, #1
10008540:	8002      	strh	r2, [r0, #0]
10008542:	f3bf 8f5f 	dmb	sy
	sStrip* t = &s->strip[n];
10008546:	3304      	adds	r3, #4
10008548:	18c0      	adds	r0, r0, r3
	__dmb();
	return t;
}
1000854a:	bd10      	pop	{r4, pc}

1000854c <_Z13ScreenAddSegmP6sStripi>:

// add empty segment to video strip (returns pointer to the segment and initialises is to defaults)
sSegm* ScreenAddSegm(sStrip* strip, int width)
{
1000854c:	b5f0      	push	{r4, r5, r6, r7, lr}
	int n = strip->num;
	sSegm* g = &strip->seg[n];
	g->width = width;
1000854e:	2500      	movs	r5, #0
	int n = strip->num;
10008550:	8844      	ldrh	r4, [r0, #2]
	g->width = width;
10008552:	040f      	lsls	r7, r1, #16
10008554:	00e3      	lsls	r3, r4, #3
10008556:	1b1b      	subs	r3, r3, r4
10008558:	009b      	lsls	r3, r3, #2
1000855a:	0c3e      	lsrs	r6, r7, #16
1000855c:	18c2      	adds	r2, r0, r3
1000855e:	433e      	orrs	r6, r7
10008560:	6056      	str	r6, [r2, #4]
	g->wb = width;
	g->offx = 0;
10008562:	6095      	str	r5, [r2, #8]
	g->offy = 0;
	g->wrapx = width;
10008564:	8191      	strh	r1, [r2, #12]
	g->wrapy = strip->height;
10008566:	8801      	ldrh	r1, [r0, #0]
	g->data = NULL;
10008568:	6115      	str	r5, [r2, #16]
	g->wrapy = strip->height;
1000856a:	81d1      	strh	r1, [r2, #14]
	g->form = GF_COLOR;
1000856c:	8295      	strh	r5, [r2, #20]
	g->dbly = false;
	g->par = 0;
1000856e:	6195      	str	r5, [r2, #24]
	g->par2 = 0;
10008570:	61d5      	str	r5, [r2, #28]
10008572:	f3bf 8f5f 	dmb	sy
	__dmb();
	strip->num = n + 1;
10008576:	3401      	adds	r4, #1
10008578:	8044      	strh	r4, [r0, #2]
1000857a:	f3bf 8f5f 	dmb	sy
	sSegm* g = &strip->seg[n];
1000857e:	3304      	adds	r3, #4
10008580:	18c0      	adds	r0, r0, r3
	__dmb();
	return g;
}
10008582:	bdf0      	pop	{r4, r5, r6, r7, pc}

10008584 <_Z16ScreenSegmGraph8P5sSegmPKvi>:
//   data = pointer to data buffer
//   wb = pitch - number of bytes between lines
// To scroll image, set virtual dimension wrapx and wrapy, then shift offx and offy.
void ScreenSegmGraph8(sSegm* segm, const void* data, int wb)
{
	segm->form = GF_COLOR;
10008584:	2300      	movs	r3, #0
10008586:	7403      	strb	r3, [r0, #16]
10008588:	f3bf 8f5f 	dmb	sy
	__dmb();
	segm->data = data;
1000858c:	60c1      	str	r1, [r0, #12]
	segm->wb = wb;
1000858e:	8042      	strh	r2, [r0, #2]
10008590:	f3bf 8f5f 	dmb	sy
	__dmb();
	segm->form = GF_GRAPH8;
10008594:	3301      	adds	r3, #1
10008596:	7403      	strb	r3, [r0, #16]
10008598:	f3bf 8f5f 	dmb	sy
	__dmb();
}
1000859c:	4770      	bx	lr
1000859e:	46c0      	nop			; (mov r8, r8)

100085a0 <_Z9VgaCfgDefP7sVgaCfg>:
};

// initialize default VGA configuration
void VgaCfgDef(sVgaCfg* cfg)
{
	cfg->width = 640;		// width in pixels
100085a0:	4b06      	ldr	r3, [pc, #24]	; (100085bc <_Z9VgaCfgDefP7sVgaCfg+0x1c>)
	cfg->height = 480;		// height in lines
	cfg->wfull = 0;			// width of full screen, corresponding to 'hfull' time (0=use 'width' parameter)
	cfg->video = &VideoVGA;		// used video timings
100085a2:	4a07      	ldr	r2, [pc, #28]	; (100085c0 <_Z9VgaCfgDefP7sVgaCfg+0x20>)
	cfg->width = 640;		// width in pixels
100085a4:	6003      	str	r3, [r0, #0]
	cfg->wfull = 0;			// width of full screen, corresponding to 'hfull' time (0=use 'width' parameter)
100085a6:	2300      	movs	r3, #0
	cfg->video = &VideoVGA;		// used video timings
100085a8:	6082      	str	r2, [r0, #8]
	cfg->freq = 120000;		// required minimal system frequency in kHz (real frequency can be higher)
100085aa:	4a06      	ldr	r2, [pc, #24]	; (100085c4 <_Z9VgaCfgDefP7sVgaCfg+0x24>)
	cfg->wfull = 0;			// width of full screen, corresponding to 'hfull' time (0=use 'width' parameter)
100085ac:	8083      	strh	r3, [r0, #4]
	cfg->freq = 120000;		// required minimal system frequency in kHz (real frequency can be higher)
100085ae:	60c2      	str	r2, [r0, #12]
100085b0:	4a05      	ldr	r2, [pc, #20]	; (100085c8 <_Z9VgaCfgDefP7sVgaCfg+0x28>)
	cfg->fmax = 270000;		// maximal system frequency in kHz (limit resolution if needed)
	cfg->mode[0] = LAYERMODE_BASE;	// modes of overlapped layers 0..3 LAYERMODE_* (LAYERMODE_BASE = layer is off)
100085b2:	6143      	str	r3, [r0, #20]
	cfg->freq = 120000;		// required minimal system frequency in kHz (real frequency can be higher)
100085b4:	6102      	str	r2, [r0, #16]
	cfg->mode[1] = LAYERMODE_BASE;	// - mode of layer 0 is ignored (always use LAYERMODE_BASE)
	cfg->mode[2] = LAYERMODE_BASE;	// - all overlapped layers must use same layer program
	cfg->mode[3] = LAYERMODE_BASE;
	cfg->dbly = False;		// double in Y direction
100085b6:	8303      	strh	r3, [r0, #24]
	cfg->lockfreq = False;		// lock required frequency, do not change it
}
100085b8:	4770      	bx	lr
100085ba:	46c0      	nop			; (mov r8, r8)
100085bc:	01e00280 	.word	0x01e00280
100085c0:	1000a360 	.word	0x1000a360
100085c4:	0001d4c0 	.word	0x0001d4c0
100085c8:	00041eb0 	.word	0x00041eb0

100085cc <_Z6VgaCfgPK7sVgaCfgP6sVmode>:

// calculate videomode setup
//   cfg ... required configuration
//   vmode ... destination videomode setup for driver
void VgaCfg(const sVgaCfg* cfg, sVmode* vmode)
{
100085cc:	b5f0      	push	{r4, r5, r6, r7, lr}
100085ce:	4657      	mov	r7, sl
100085d0:	464e      	mov	r6, r9
100085d2:	46de      	mov	lr, fp
100085d4:	4645      	mov	r5, r8
	for (i = 1; i < LAYERS; i++)
	{
		if (cfg->mode[i] != LAYERMODE_BASE) prog = LayerMode[cfg->mode[i]].prog;
		vmode->mode[i] = cfg->mode[i];
	}
	vmode->prog = prog;
100085d6:	2300      	movs	r3, #0
{
100085d8:	b5e0      	push	{r5, r6, r7, lr}
	vmode->prog = prog;
100085da:	830b      	strh	r3, [r1, #24]
		cpp = LayerMode[cfg->mode[i]].maxcpp;
		if (cpp < maxcpp) maxcpp = cpp;
	}

	// prepare full width
	int w = cfg->width; // required width
100085dc:	8802      	ldrh	r2, [r0, #0]
{
100085de:	b091      	sub	sp, #68	; 0x44
100085e0:	9003      	str	r0, [sp, #12]
	int w = cfg->width; // required width
100085e2:	9206      	str	r2, [sp, #24]
	int mincpp = LayerMode[LAYERMODE_BASE].mincpp;
100085e4:	4bb6      	ldr	r3, [pc, #728]	; (100088c0 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x2f4>)
	int wfull = cfg->wfull;	// full width
100085e6:	8887      	ldrh	r7, [r0, #4]
{
100085e8:	468a      	mov	sl, r1
	int mincpp = LayerMode[LAYERMODE_BASE].mincpp;
100085ea:	785e      	ldrb	r6, [r3, #1]
	int maxcpp = LayerMode[LAYERMODE_BASE].maxcpp;
100085ec:	789c      	ldrb	r4, [r3, #2]
	if (wfull == 0) wfull = w; // use required width as 100% width
100085ee:	2f00      	cmp	r7, #0
100085f0:	d100      	bne.n	100085f4 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x28>
100085f2:	0017      	movs	r7, r2

	// prepare maximal active time and maximal pixels
	const sVideo* v = cfg->video;
100085f4:	9d03      	ldr	r5, [sp, #12]
100085f6:	68ab      	ldr	r3, [r5, #8]
100085f8:	4699      	mov	r9, r3
	float hmax = v->htot - v->hfront - v->hsync - v->hback;
100085fa:	6859      	ldr	r1, [r3, #4]
100085fc:	6818      	ldr	r0, [r3, #0]
100085fe:	f7f8 fd66 	bl	100010ce <__wrap___aeabi_fsub>
10008602:	464b      	mov	r3, r9
10008604:	6899      	ldr	r1, [r3, #8]
10008606:	f7f8 fd62 	bl	100010ce <__wrap___aeabi_fsub>
1000860a:	464b      	mov	r3, r9
1000860c:	68d9      	ldr	r1, [r3, #12]
1000860e:	f7f8 fd5e 	bl	100010ce <__wrap___aeabi_fsub>
	float hfull = v->hfull;
10008612:	464b      	mov	r3, r9
10008614:	691b      	ldr	r3, [r3, #16]
	float hmax = v->htot - v->hfront - v->hsync - v->hback;
10008616:	9007      	str	r0, [sp, #28]
	int wmax = (int)(wfull*hmax/hfull + 0.001f);
10008618:	0038      	movs	r0, r7
	float hfull = v->hfull;
1000861a:	4698      	mov	r8, r3
	int wmax = (int)(wfull*hmax/hfull + 0.001f);
1000861c:	f7f8 fd98 	bl	10001150 <__wrap___aeabi_i2f>

	// calculate cpp from required frequency (rounded down), limit minimal cpp
	u32 freq = cfg->freq;
10008620:	002b      	movs	r3, r5
10008622:	68ed      	ldr	r5, [r5, #12]
	int wmax = (int)(wfull*hmax/hfull + 0.001f);
10008624:	9004      	str	r0, [sp, #16]
	u32 freq = cfg->freq;
10008626:	950e      	str	r5, [sp, #56]	; 0x38
	cpp = (int)(freq*hfull/1000/wfull + 0.1f);
	if (cpp < mincpp) cpp = mincpp;

	// recalculate frequency if not locked
	if (!cfg->lockfreq)
10008628:	7e5b      	ldrb	r3, [r3, #25]
	int wmax = (int)(wfull*hmax/hfull + 0.001f);
1000862a:	4683      	mov	fp, r0
	if (!cfg->lockfreq)
1000862c:	2b00      	cmp	r3, #0
1000862e:	d130      	bne.n	10008692 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0xc6>
	cpp = (int)(freq*hfull/1000/wfull + 0.1f);
10008630:	0028      	movs	r0, r5
10008632:	f7f8 fd88 	bl	10001146 <__wrap___aeabi_ui2f>
10008636:	4641      	mov	r1, r8
10008638:	f7f8 fd52 	bl	100010e0 <__wrap___aeabi_fmul>
1000863c:	49a1      	ldr	r1, [pc, #644]	; (100088c4 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x2f8>)
1000863e:	f7f8 fd4c 	bl	100010da <__wrap___aeabi_fdiv>
10008642:	4659      	mov	r1, fp
10008644:	f7f8 fd49 	bl	100010da <__wrap___aeabi_fdiv>
10008648:	499f      	ldr	r1, [pc, #636]	; (100088c8 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x2fc>)
1000864a:	f7f8 fd43 	bl	100010d4 <__wrap___aeabi_fadd>
1000864e:	f7f8 fda1 	bl	10001194 <__wrap___aeabi_f2iz>
	{
		int freq2 = (int)(cpp*wfull*1000/hfull + 0.5f) + 200;
10008652:	4286      	cmp	r6, r0
10008654:	da00      	bge.n	10008658 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x8c>
10008656:	e239      	b.n	10008acc <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x500>
10008658:	437e      	muls	r6, r7
1000865a:	0170      	lsls	r0, r6, #5
1000865c:	1b80      	subs	r0, r0, r6
1000865e:	0080      	lsls	r0, r0, #2
10008660:	1980      	adds	r0, r0, r6
10008662:	00c0      	lsls	r0, r0, #3
10008664:	f7f8 fd74 	bl	10001150 <__wrap___aeabi_i2f>
10008668:	4641      	mov	r1, r8
1000866a:	f7f8 fd36 	bl	100010da <__wrap___aeabi_fdiv>
1000866e:	21fc      	movs	r1, #252	; 0xfc
10008670:	0589      	lsls	r1, r1, #22
10008672:	f7f8 fd2f 	bl	100010d4 <__wrap___aeabi_fadd>
10008676:	f7f8 fd8d 	bl	10001194 <__wrap___aeabi_f2iz>
1000867a:	30c8      	adds	r0, #200	; 0xc8
		if (freq2 < freq)
1000867c:	4285      	cmp	r5, r0
1000867e:	d900      	bls.n	10008682 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0xb6>
10008680:	e20e      	b.n	10008aa0 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x4d4>
		{
			cpp++;
			freq2 = (int)(cpp*wfull*1000/hfull + 0.5f) + 200;
		}
		if (freq2 >= freq) freq = freq2;
10008682:	0005      	movs	r5, r0
10008684:	900e      	str	r0, [sp, #56]	; 0x38
		if (freq > cfg->fmax) freq = cfg->fmax;
10008686:	9b03      	ldr	r3, [sp, #12]
10008688:	691b      	ldr	r3, [r3, #16]
1000868a:	42ab      	cmp	r3, r5
1000868c:	d201      	bcs.n	10008692 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0xc6>
1000868e:	001d      	movs	r5, r3
10008690:	930e      	str	r3, [sp, #56]	; 0x38

	// find sysclock setup (use set_sys_clock_pll to set sysclock)
	u32 vco;
	u16 fbdiv;
	u8 pd1, pd2;
	FindSysClock(freq, &freq, &vco, &fbdiv, &pd1, &pd2);
10008692:	aa0a      	add	r2, sp, #40	; 0x28
10008694:	4694      	mov	ip, r2
10008696:	260d      	movs	r6, #13
10008698:	230e      	movs	r3, #14
1000869a:	4466      	add	r6, ip
1000869c:	af0d      	add	r7, sp, #52	; 0x34
1000869e:	4463      	add	r3, ip
100086a0:	a90e      	add	r1, sp, #56	; 0x38
100086a2:	0028      	movs	r0, r5
100086a4:	aa0f      	add	r2, sp, #60	; 0x3c
100086a6:	9601      	str	r6, [sp, #4]
100086a8:	9700      	str	r7, [sp, #0]
100086aa:	469b      	mov	fp, r3
100086ac:	f000 fa34 	bl	10008b18 <_Z12FindSysClockmPmS_PtPhS1_>

	vmode->freq = freq;
100086b0:	4653      	mov	r3, sl
100086b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
	vmode->fbdiv = fbdiv;
	vmode->pd1 = pd1;
	vmode->pd2 = pd2;

	// calculate divisor
	cpp = (int)(freq*hfull/1000/wfull + 0.2f);
100086b4:	980e      	ldr	r0, [sp, #56]	; 0x38
	vmode->freq = freq;
100086b6:	609a      	str	r2, [r3, #8]
	vmode->vco = vco;
100086b8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
100086ba:	60da      	str	r2, [r3, #12]
	vmode->fbdiv = fbdiv;
100086bc:	465b      	mov	r3, fp
100086be:	4652      	mov	r2, sl
100086c0:	881b      	ldrh	r3, [r3, #0]
100086c2:	8213      	strh	r3, [r2, #16]
	vmode->pd1 = pd1;
100086c4:	783b      	ldrb	r3, [r7, #0]
100086c6:	7493      	strb	r3, [r2, #18]
	vmode->pd2 = pd2;
100086c8:	7833      	ldrb	r3, [r6, #0]
100086ca:	74d3      	strb	r3, [r2, #19]
	cpp = (int)(freq*hfull/1000/wfull + 0.2f);
100086cc:	f7f8 fd3b 	bl	10001146 <__wrap___aeabi_ui2f>
100086d0:	4641      	mov	r1, r8
100086d2:	4683      	mov	fp, r0
100086d4:	f7f8 fd04 	bl	100010e0 <__wrap___aeabi_fmul>
100086d8:	497a      	ldr	r1, [pc, #488]	; (100088c4 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x2f8>)
100086da:	f7f8 fcfe 	bl	100010da <__wrap___aeabi_fdiv>
100086de:	9904      	ldr	r1, [sp, #16]
100086e0:	9005      	str	r0, [sp, #20]
100086e2:	f7f8 fcfa 	bl	100010da <__wrap___aeabi_fdiv>
100086e6:	4979      	ldr	r1, [pc, #484]	; (100088cc <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x300>)
100086e8:	4680      	mov	r8, r0
100086ea:	f7f8 fcf3 	bl	100010d4 <__wrap___aeabi_fadd>
100086ee:	f7f8 fd51 	bl	10001194 <__wrap___aeabi_f2iz>
100086f2:	0005      	movs	r5, r0
	int div = 1;
	while (cpp > maxcpp)
100086f4:	4284      	cmp	r4, r0
100086f6:	db00      	blt.n	100086fa <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x12e>
100086f8:	e205      	b.n	10008b06 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x53a>
	int div = 1;
100086fa:	2701      	movs	r7, #1
100086fc:	4645      	mov	r5, r8
	{
		div++;
100086fe:	3701      	adds	r7, #1
		cpp = (int)(freq*hfull/1000/wfull/div + 0.2f);
10008700:	0038      	movs	r0, r7
10008702:	f7f8 fd25 	bl	10001150 <__wrap___aeabi_i2f>
10008706:	1c01      	adds	r1, r0, #0
10008708:	1c06      	adds	r6, r0, #0
1000870a:	1c28      	adds	r0, r5, #0
1000870c:	f7f8 fce5 	bl	100010da <__wrap___aeabi_fdiv>
10008710:	496e      	ldr	r1, [pc, #440]	; (100088cc <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x300>)
10008712:	f7f8 fcdf 	bl	100010d4 <__wrap___aeabi_fadd>
10008716:	f7f8 fd3d 	bl	10001194 <__wrap___aeabi_f2iz>
	while (cpp > maxcpp)
1000871a:	4284      	cmp	r4, r0
1000871c:	dbef      	blt.n	100086fe <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x132>
	}

	vmode->div = div;
1000871e:	0005      	movs	r5, r0
	vmode->vback2 = v->vback2 - dh/2; // V back porch (after VSYNC, before image) on subframe 2
	vmode->vfront2 = v->vfront2 - ((dh < 0) ? (dh-1)/2 : (dh+1)/2); // V front porch (after image, before VSYNC) on subframe 2
	vmode->vpre2 = v->vpre2; // V sync pre half-pulses on subframe 2

	// frequency
	vmode->hfreq = vmode->freq * 1000.0f / vmode->div / vmode->htot;
10008720:	0438      	lsls	r0, r7, #16
10008722:	0c00      	lsrs	r0, r0, #16
10008724:	f7f8 fd14 	bl	10001150 <__wrap___aeabi_i2f>
	vmode->div = div;
10008728:	b2bc      	uxth	r4, r7
	vmode->hfreq = vmode->freq * 1000.0f / vmode->div / vmode->htot;
1000872a:	9008      	str	r0, [sp, #32]
	vmode->div = div;
1000872c:	4653      	mov	r3, sl
	wfull = (int)(freq*hfull/1000/cpp/div + 0.4f);
1000872e:	0028      	movs	r0, r5
	vmode->div = div;
10008730:	829c      	strh	r4, [r3, #20]
	vmode->cpp = cpp;
10008732:	82dd      	strh	r5, [r3, #22]
	wfull = (int)(freq*hfull/1000/cpp/div + 0.4f);
10008734:	f7f8 fd0c 	bl	10001150 <__wrap___aeabi_i2f>
	wmax = (int)(freq*hmax/1000/cpp/div + 0.4f);
10008738:	9907      	ldr	r1, [sp, #28]
	wfull = (int)(freq*hfull/1000/cpp/div + 0.4f);
1000873a:	1c04      	adds	r4, r0, #0
	wmax = (int)(freq*hmax/1000/cpp/div + 0.4f);
1000873c:	4658      	mov	r0, fp
1000873e:	f7f8 fccf 	bl	100010e0 <__wrap___aeabi_fmul>
10008742:	4960      	ldr	r1, [pc, #384]	; (100088c4 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x2f8>)
10008744:	f7f8 fcc9 	bl	100010da <__wrap___aeabi_fdiv>
10008748:	1c21      	adds	r1, r4, #0
1000874a:	f7f8 fcc6 	bl	100010da <__wrap___aeabi_fdiv>
1000874e:	1c31      	adds	r1, r6, #0
10008750:	f7f8 fcc3 	bl	100010da <__wrap___aeabi_fdiv>
10008754:	495e      	ldr	r1, [pc, #376]	; (100088d0 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x304>)
10008756:	f7f8 fcbd 	bl	100010d4 <__wrap___aeabi_fadd>
1000875a:	f7f8 fd1b 	bl	10001194 <__wrap___aeabi_f2iz>
1000875e:	0007      	movs	r7, r0
	if (w > wmax) w = wmax;
10008760:	9806      	ldr	r0, [sp, #24]
10008762:	42b8      	cmp	r0, r7
10008764:	dd00      	ble.n	10008768 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x19c>
10008766:	0038      	movs	r0, r7
	w = ALIGN4(w);
10008768:	2303      	movs	r3, #3
1000876a:	4398      	bics	r0, r3
	vmode->width = w; // active width
1000876c:	4653      	mov	r3, sl
	wfull = (int)(freq*hfull/1000/cpp/div + 0.4f);
1000876e:	1c21      	adds	r1, r4, #0
	vmode->width = w; // active width
10008770:	8018      	strh	r0, [r3, #0]
	w = ALIGN4(w);
10008772:	4680      	mov	r8, r0
	wfull = (int)(freq*hfull/1000/cpp/div + 0.4f);
10008774:	9805      	ldr	r0, [sp, #20]
10008776:	f7f8 fcb0 	bl	100010da <__wrap___aeabi_fdiv>
1000877a:	1c31      	adds	r1, r6, #0
1000877c:	f7f8 fcad 	bl	100010da <__wrap___aeabi_fdiv>
10008780:	4953      	ldr	r1, [pc, #332]	; (100088d0 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x304>)
10008782:	f7f8 fca7 	bl	100010d4 <__wrap___aeabi_fadd>
10008786:	f7f8 fd05 	bl	10001194 <__wrap___aeabi_f2iz>
	vmode->wfull = wfull; // width of full screen (image should be full visible)
1000878a:	4653      	mov	r3, sl
1000878c:	8098      	strh	r0, [r3, #4]
	vmode->wmax = wmax; // maximal width (can be > wfull)
1000878e:	80df      	strh	r7, [r3, #6]
	int hwidth = w*cpp; // active width in state machine clocks
10008790:	4643      	mov	r3, r8
10008792:	435d      	muls	r5, r3
	int htot = (int)(freq*v->htot/1000/div + 0.5f);  // total state machine clocks per line
10008794:	464b      	mov	r3, r9
10008796:	4658      	mov	r0, fp
10008798:	6819      	ldr	r1, [r3, #0]
1000879a:	f7f8 fca1 	bl	100010e0 <__wrap___aeabi_fmul>
1000879e:	4949      	ldr	r1, [pc, #292]	; (100088c4 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x2f8>)
100087a0:	f7f8 fc9b 	bl	100010da <__wrap___aeabi_fdiv>
100087a4:	1c31      	adds	r1, r6, #0
100087a6:	f7f8 fc98 	bl	100010da <__wrap___aeabi_fdiv>
100087aa:	21fc      	movs	r1, #252	; 0xfc
100087ac:	0589      	lsls	r1, r1, #22
100087ae:	f7f8 fc91 	bl	100010d4 <__wrap___aeabi_fadd>
100087b2:	f7f8 fcef 	bl	10001194 <__wrap___aeabi_f2iz>
	int hsync = (int)(freq*v->hsync/1000/div + 0.5f); // H sync pulse in state machine clocks (min. 4)
100087b6:	464b      	mov	r3, r9
	int htot = (int)(freq*v->htot/1000/div + 0.5f);  // total state machine clocks per line
100087b8:	0004      	movs	r4, r0
	int hsync = (int)(freq*v->hsync/1000/div + 0.5f); // H sync pulse in state machine clocks (min. 4)
100087ba:	6899      	ldr	r1, [r3, #8]
100087bc:	4658      	mov	r0, fp
100087be:	f7f8 fc8f 	bl	100010e0 <__wrap___aeabi_fmul>
100087c2:	4940      	ldr	r1, [pc, #256]	; (100088c4 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x2f8>)
100087c4:	f7f8 fc89 	bl	100010da <__wrap___aeabi_fdiv>
100087c8:	1c31      	adds	r1, r6, #0
100087ca:	f7f8 fc86 	bl	100010da <__wrap___aeabi_fdiv>
100087ce:	21fc      	movs	r1, #252	; 0xfc
100087d0:	0589      	lsls	r1, r1, #22
100087d2:	f7f8 fc7f 	bl	100010d4 <__wrap___aeabi_fadd>
100087d6:	f7f8 fcdd 	bl	10001194 <__wrap___aeabi_f2iz>
100087da:	0007      	movs	r7, r0
	if (hsync < 4)
100087dc:	2803      	cmp	r0, #3
100087de:	dc00      	bgt.n	100087e2 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x216>
100087e0:	e140      	b.n	10008a64 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x498>
	vmode->hsync = (u16)hsync; // H sync pulse in state machine clocks (min. 4)
100087e2:	b283      	uxth	r3, r0
100087e4:	9304      	str	r3, [sp, #16]
	int hfront = (int)(freq*v->hfront/1000/div + 0.5f); // H front porch in state machine clocks (min. 2)
100087e6:	464b      	mov	r3, r9
100087e8:	4658      	mov	r0, fp
100087ea:	6859      	ldr	r1, [r3, #4]
100087ec:	f7f8 fc78 	bl	100010e0 <__wrap___aeabi_fmul>
100087f0:	4934      	ldr	r1, [pc, #208]	; (100088c4 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x2f8>)
100087f2:	f7f8 fc72 	bl	100010da <__wrap___aeabi_fdiv>
100087f6:	1c31      	adds	r1, r6, #0
100087f8:	f7f8 fc6f 	bl	100010da <__wrap___aeabi_fdiv>
100087fc:	21fc      	movs	r1, #252	; 0xfc
100087fe:	0589      	lsls	r1, r1, #22
10008800:	f7f8 fc68 	bl	100010d4 <__wrap___aeabi_fadd>
10008804:	f7f8 fcc6 	bl	10001194 <__wrap___aeabi_f2iz>
	int hback = (int)(freq*v->hback/1000/div + 0.5f); // H back porch in state machine clocks (min. 13)
10008808:	464b      	mov	r3, r9
	int hfront = (int)(freq*v->hfront/1000/div + 0.5f); // H front porch in state machine clocks (min. 2)
1000880a:	4680      	mov	r8, r0
	int hback = (int)(freq*v->hback/1000/div + 0.5f); // H back porch in state machine clocks (min. 13)
1000880c:	68d9      	ldr	r1, [r3, #12]
1000880e:	4658      	mov	r0, fp
10008810:	f7f8 fc66 	bl	100010e0 <__wrap___aeabi_fmul>
10008814:	492b      	ldr	r1, [pc, #172]	; (100088c4 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x2f8>)
10008816:	f7f8 fc60 	bl	100010da <__wrap___aeabi_fdiv>
1000881a:	1c31      	adds	r1, r6, #0
1000881c:	f7f8 fc5d 	bl	100010da <__wrap___aeabi_fdiv>
10008820:	21fc      	movs	r1, #252	; 0xfc
10008822:	0589      	lsls	r1, r1, #22
10008824:	f7f8 fc56 	bl	100010d4 <__wrap___aeabi_fadd>
10008828:	f7f8 fcb4 	bl	10001194 <__wrap___aeabi_f2iz>
	int d = htot - hfront - hsync - hback - hwidth; // difference
1000882c:	4643      	mov	r3, r8
1000882e:	1ae2      	subs	r2, r4, r3
10008830:	1bd2      	subs	r2, r2, r7
10008832:	1a12      	subs	r2, r2, r0
10008834:	1b52      	subs	r2, r2, r5
	hfront += d/2;
10008836:	0fd3      	lsrs	r3, r2, #31
10008838:	189b      	adds	r3, r3, r2
1000883a:	1059      	asrs	r1, r3, #1
1000883c:	4441      	add	r1, r8
	hback += (d < 0) ? (d-1)/2 : (d+1)/2;
1000883e:	2a00      	cmp	r2, #0
10008840:	da00      	bge.n	10008844 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x278>
10008842:	e15b      	b.n	10008afc <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x530>
10008844:	3201      	adds	r2, #1
10008846:	1053      	asrs	r3, r2, #1
10008848:	181b      	adds	r3, r3, r0
	if (hfront < 4)
1000884a:	2903      	cmp	r1, #3
1000884c:	dc02      	bgt.n	10008854 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x288>
		hback -= 4 - hfront;
1000884e:	18cb      	adds	r3, r1, r3
		hfront = 4;
10008850:	2104      	movs	r1, #4
		hback -= 4 - hfront;
10008852:	3b04      	subs	r3, #4
	if (hback < 13)
10008854:	2b0c      	cmp	r3, #12
10008856:	dc00      	bgt.n	1000885a <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x28e>
10008858:	e0fd      	b.n	10008a56 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x48a>
	vmode->hback = (u16)hback; // H back porch in state machine clocks (min. 13)
1000885a:	b29a      	uxth	r2, r3
	htot = hfront + hsync + hback + hwidth; // total state machine clocks per line
1000885c:	187f      	adds	r7, r7, r1
1000885e:	18fb      	adds	r3, r7, r3
	if (v->inter && ((htot & 1) != 0))
10008860:	4648      	mov	r0, r9
	htot = hfront + hsync + hback + hwidth; // total state machine clocks per line
10008862:	195d      	adds	r5, r3, r5
	if (v->inter && ((htot & 1) != 0))
10008864:	2334      	movs	r3, #52	; 0x34
10008866:	5cc0      	ldrb	r0, [r0, r3]
10008868:	2800      	cmp	r0, #0
1000886a:	d002      	beq.n	10008872 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x2a6>
1000886c:	07eb      	lsls	r3, r5, #31
1000886e:	d500      	bpl.n	10008872 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x2a6>
10008870:	e113      	b.n	10008a9a <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x4ce>
	vmode->htot = (u16)htot; // total state machine clocks per line
10008872:	4653      	mov	r3, sl
	vmode->hfront = (u16)hfront; // H front porch in state machine clocks (min. 2)
10008874:	8419      	strh	r1, [r3, #32]
	vmode->hsync = (u16)hsync; // H sync pulse in state machine clocks (min. 4)
10008876:	9904      	ldr	r1, [sp, #16]
	vmode->hback = (u16)hback; // H back porch in state machine clocks (min. 13)
10008878:	849a      	strh	r2, [r3, #36]	; 0x24
	int h = cfg->height; // required height
1000887a:	9a03      	ldr	r2, [sp, #12]
	vmode->htot = (u16)htot; // total state machine clocks per line
1000887c:	83dd      	strh	r5, [r3, #30]
	vmode->hsync = (u16)hsync; // H sync pulse in state machine clocks (min. 4)
1000887e:	8459      	strh	r1, [r3, #34]	; 0x22
	if (cfg->dbly) h *= 2; // use double lines
10008880:	7e14      	ldrb	r4, [r2, #24]
	int h = cfg->height; // required height
10008882:	8853      	ldrh	r3, [r2, #2]
	if (cfg->dbly) h *= 2; // use double lines
10008884:	2c00      	cmp	r4, #0
10008886:	d025      	beq.n	100088d4 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x308>
	vmode->vmax = v->vmax; // maximal height
10008888:	464a      	mov	r2, r9
1000888a:	8ad1      	ldrh	r1, [r2, #22]
1000888c:	4652      	mov	r2, sl
	if (cfg->dbly) h *= 2; // use double lines
1000888e:	005b      	lsls	r3, r3, #1
	vmode->vmax = v->vmax; // maximal height
10008890:	85d1      	strh	r1, [r2, #46]	; 0x2e
	if (h > v->vmax) h = v->vmax; // limit height
10008892:	4299      	cmp	r1, r3
10008894:	dd00      	ble.n	10008898 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x2cc>
10008896:	e0f9      	b.n	10008a8c <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x4c0>
	if (cfg->dbly) h &= ~1; // must be even number if double lines
10008898:	2301      	movs	r3, #1
1000889a:	4399      	bics	r1, r3
	if (v->inter) // interlaced
1000889c:	2800      	cmp	r0, #0
1000889e:	d100      	bne.n	100088a2 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x2d6>
100088a0:	e0eb      	b.n	10008a7a <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x4ae>
		if (v->odd) // first frame is odd lines
100088a2:	2336      	movs	r3, #54	; 0x36
100088a4:	464a      	mov	r2, r9
100088a6:	5cd3      	ldrb	r3, [r2, r3]
100088a8:	2b00      	cmp	r3, #0
100088aa:	d100      	bne.n	100088ae <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x2e2>
100088ac:	e0e9      	b.n	10008a82 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x4b6>
			vact1 = h/2;
100088ae:	104a      	asrs	r2, r1, #1
			vact2 = (h+1)/2; // if even lines, even frame will have more lines
100088b0:	0016      	movs	r6, r2
100088b2:	1c4b      	adds	r3, r1, #1
100088b4:	105b      	asrs	r3, r3, #1
	vmode->vact2 = vact2; // active scanlines of 2nd subframe
100088b6:	b298      	uxth	r0, r3
	if (cfg->dbly) h /= 2; // return double lines to single lines
100088b8:	2c00      	cmp	r4, #0
100088ba:	d016      	beq.n	100088ea <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x31e>
	vmode->vact2 = vact2; // active scanlines of 2nd subframe
100088bc:	0031      	movs	r1, r6
	if (cfg->dbly) h /= 2; // return double lines to single lines
100088be:	e014      	b.n	100088ea <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x31e>
100088c0:	1000a0a0 	.word	0x1000a0a0
100088c4:	447a0000 	.word	0x447a0000
100088c8:	3dcccccd 	.word	0x3dcccccd
100088cc:	3e4ccccd 	.word	0x3e4ccccd
100088d0:	3ecccccd 	.word	0x3ecccccd
	vmode->vmax = v->vmax; // maximal height
100088d4:	464a      	mov	r2, r9
100088d6:	8ad1      	ldrh	r1, [r2, #22]
100088d8:	4652      	mov	r2, sl
100088da:	85d1      	strh	r1, [r2, #46]	; 0x2e
	if (h > v->vmax) h = v->vmax; // limit height
100088dc:	4299      	cmp	r1, r3
100088de:	dd00      	ble.n	100088e2 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x316>
100088e0:	e0c6      	b.n	10008a70 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x4a4>
	if (v->inter) // interlaced
100088e2:	2800      	cmp	r0, #0
100088e4:	d1dd      	bne.n	100088a2 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x2d6>
100088e6:	000a      	movs	r2, r1
	int vact2 = 0;
100088e8:	2300      	movs	r3, #0
	vmode->height = h;
100088ea:	4654      	mov	r4, sl
100088ec:	8061      	strh	r1, [r4, #2]
	vmode->vtot = v->vtot; // total scanlines
100088ee:	4649      	mov	r1, r9
100088f0:	8a8e      	ldrh	r6, [r1, #20]
	vmode->vact1 = vact1; // active scanlines of 1st subframe
100088f2:	b291      	uxth	r1, r2
100088f4:	8761      	strh	r1, [r4, #58]	; 0x3a
100088f6:	9105      	str	r1, [sp, #20]
	int dh = vact1 - v->vact1; // difference
100088f8:	4649      	mov	r1, r9
	vmode->vtot = v->vtot; // total scanlines
100088fa:	85a6      	strh	r6, [r4, #44]	; 0x2c
	int dh = vact1 - v->vact1; // difference
100088fc:	8bc9      	ldrh	r1, [r1, #30]
100088fe:	1a52      	subs	r2, r2, r1
	vmode->vsync1 = v->vsync1; // V sync (half-)pulses on subframe 1
10008900:	4649      	mov	r1, r9
10008902:	8b09      	ldrh	r1, [r1, #24]
10008904:	86a1      	strh	r1, [r4, #52]	; 0x34
10008906:	9104      	str	r1, [sp, #16]
	vmode->vpost1 = v->vpost1; // V sync post (half-)pulses on subframe 1
10008908:	4649      	mov	r1, r9
1000890a:	8b49      	ldrh	r1, [r1, #26]
1000890c:	86e1      	strh	r1, [r4, #54]	; 0x36
	vmode->vback1 = v->vback1 - dh/2; // V back porch (after VSYNC, before image) on subframe 1
1000890e:	464c      	mov	r4, r9
	vmode->vpost1 = v->vpost1; // V sync post (half-)pulses on subframe 1
10008910:	9106      	str	r1, [sp, #24]
	vmode->vback1 = v->vback1 - dh/2; // V back porch (after VSYNC, before image) on subframe 1
10008912:	0fd1      	lsrs	r1, r2, #31
10008914:	8ba4      	ldrh	r4, [r4, #28]
10008916:	1889      	adds	r1, r1, r2
10008918:	1049      	asrs	r1, r1, #1
1000891a:	1a61      	subs	r1, r4, r1
1000891c:	b28f      	uxth	r7, r1
1000891e:	4651      	mov	r1, sl
10008920:	870f      	strh	r7, [r1, #56]	; 0x38
	vmode->vfront1 = v->vfront1 - ((dh < 0) ? (dh-1)/2 : (dh+1)/2); // V front porch (after image, before VSYNC) on subframe 1
10008922:	4649      	mov	r1, r9
10008924:	8c09      	ldrh	r1, [r1, #32]
10008926:	2a00      	cmp	r2, #0
10008928:	da00      	bge.n	1000892c <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x360>
1000892a:	e0e1      	b.n	10008af0 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x524>
1000892c:	3201      	adds	r2, #1
1000892e:	1052      	asrs	r2, r2, #1
10008930:	b292      	uxth	r2, r2
10008932:	1a8a      	subs	r2, r1, r2
10008934:	4651      	mov	r1, sl
10008936:	b292      	uxth	r2, r2
10008938:	878a      	strh	r2, [r1, #60]	; 0x3c
1000893a:	9207      	str	r2, [sp, #28]
	vmode->vpre1 = v->vpre1; // V sync pre (half-)pulses on subframe 1
1000893c:	464a      	mov	r2, r9
1000893e:	8c52      	ldrh	r2, [r2, #34]	; 0x22
10008940:	87ca      	strh	r2, [r1, #62]	; 0x3e
10008942:	9209      	str	r2, [sp, #36]	; 0x24
	vmode->vact2 = vact2; // active scanlines of 2nd subframe
10008944:	2248      	movs	r2, #72	; 0x48
10008946:	5288      	strh	r0, [r1, r2]
	dh = vact2 - v->vact2; // difference
10008948:	464a      	mov	r2, r9
1000894a:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
	vmode->vsync2 = v->vsync2; // V sync half-pulses on subframe 2
1000894c:	4650      	mov	r0, sl
	dh = vact2 - v->vact2; // difference
1000894e:	1a9b      	subs	r3, r3, r2
	vmode->vsync2 = v->vsync2; // V sync half-pulses on subframe 2
10008950:	464a      	mov	r2, r9
10008952:	8c92      	ldrh	r2, [r2, #36]	; 0x24
10008954:	920a      	str	r2, [sp, #40]	; 0x28
10008956:	0011      	movs	r1, r2
10008958:	2242      	movs	r2, #66	; 0x42
1000895a:	5281      	strh	r1, [r0, r2]
	vmode->vpost2 = v->vpost2; // V sync post half-pulses on subframe 2
1000895c:	464a      	mov	r2, r9
1000895e:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
10008960:	0011      	movs	r1, r2
10008962:	920b      	str	r2, [sp, #44]	; 0x2c
10008964:	2244      	movs	r2, #68	; 0x44
10008966:	5281      	strh	r1, [r0, r2]
	vmode->vback2 = v->vback2 - dh/2; // V back porch (after VSYNC, before image) on subframe 2
10008968:	4649      	mov	r1, r9
1000896a:	0fda      	lsrs	r2, r3, #31
1000896c:	8d0c      	ldrh	r4, [r1, #40]	; 0x28
1000896e:	18d2      	adds	r2, r2, r3
10008970:	1052      	asrs	r2, r2, #1
10008972:	1aa4      	subs	r4, r4, r2
10008974:	2246      	movs	r2, #70	; 0x46
10008976:	b2a4      	uxth	r4, r4
10008978:	5284      	strh	r4, [r0, r2]
	vmode->vfront2 = v->vfront2 - ((dh < 0) ? (dh-1)/2 : (dh+1)/2); // V front porch (after image, before VSYNC) on subframe 2
1000897a:	8d8a      	ldrh	r2, [r1, #44]	; 0x2c
1000897c:	2b00      	cmp	r3, #0
1000897e:	da00      	bge.n	10008982 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x3b6>
10008980:	e0b0      	b.n	10008ae4 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x518>
10008982:	3301      	adds	r3, #1
10008984:	105b      	asrs	r3, r3, #1
10008986:	b29b      	uxth	r3, r3
10008988:	4651      	mov	r1, sl
1000898a:	1ad3      	subs	r3, r2, r3
1000898c:	224a      	movs	r2, #74	; 0x4a
1000898e:	528b      	strh	r3, [r1, r2]
	vmode->vpre2 = v->vpre2; // V sync pre half-pulses on subframe 2
10008990:	464b      	mov	r3, r9
10008992:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
10008994:	234c      	movs	r3, #76	; 0x4c
	vmode->hfreq = vmode->freq * 1000.0f / vmode->div / vmode->htot;
10008996:	4658      	mov	r0, fp
	vmode->vpre2 = v->vpre2; // V sync pre half-pulses on subframe 2
10008998:	52ca      	strh	r2, [r1, r3]
	vmode->hfreq = vmode->freq * 1000.0f / vmode->div / vmode->htot;
1000899a:	495e      	ldr	r1, [pc, #376]	; (10008b14 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x548>)
1000899c:	f7f8 fba0 	bl	100010e0 <__wrap___aeabi_fmul>
100089a0:	9908      	ldr	r1, [sp, #32]
100089a2:	f7f8 fb9a 	bl	100010da <__wrap___aeabi_fdiv>
100089a6:	042d      	lsls	r5, r5, #16
100089a8:	4680      	mov	r8, r0
100089aa:	0c28      	lsrs	r0, r5, #16
100089ac:	f7f8 fbd0 	bl	10001150 <__wrap___aeabi_i2f>
100089b0:	1c01      	adds	r1, r0, #0
100089b2:	4640      	mov	r0, r8
100089b4:	f7f8 fb91 	bl	100010da <__wrap___aeabi_fdiv>
100089b8:	4653      	mov	r3, sl
100089ba:	1c05      	adds	r5, r0, #0
100089bc:	6298      	str	r0, [r3, #40]	; 0x28
	vmode->vfreq = vmode->hfreq / vmode->vtot;
100089be:	0030      	movs	r0, r6
100089c0:	f7f8 fbc6 	bl	10001150 <__wrap___aeabi_i2f>
100089c4:	1c01      	adds	r1, r0, #0
100089c6:	1c28      	adds	r0, r5, #0
100089c8:	f7f8 fb87 	bl	100010da <__wrap___aeabi_fdiv>

	// name
	vmode->name = v->name;	// video timing name
100089cc:	464a      	mov	r2, r9
	vmode->vfreq = vmode->hfreq / vmode->vtot;
100089ce:	4653      	mov	r3, sl
	vmode->name = v->name;	// video timing name
100089d0:	6b12      	ldr	r2, [r2, #48]	; 0x30
	vmode->vfreq = vmode->hfreq / vmode->vtot;
100089d2:	6318      	str	r0, [r3, #48]	; 0x30
	vmode->name = v->name;	// video timing name
100089d4:	651a      	str	r2, [r3, #80]	; 0x50

	// flags
	vmode->lockfreq = cfg->lockfreq; // lock current frequency, do not change it
100089d6:	4650      	mov	r0, sl
100089d8:	2354      	movs	r3, #84	; 0x54
100089da:	9903      	ldr	r1, [sp, #12]
100089dc:	7e4a      	ldrb	r2, [r1, #25]
100089de:	54c2      	strb	r2, [r0, r3]
	vmode->dbly = cfg->dbly; // double scanlines
100089e0:	7e0a      	ldrb	r2, [r1, #24]
100089e2:	3301      	adds	r3, #1
100089e4:	54c2      	strb	r2, [r0, r3]
	vmode->inter = v->inter; // interlaced (use sub-frames)
100089e6:	464a      	mov	r2, r9
100089e8:	3b21      	subs	r3, #33	; 0x21
100089ea:	5cd1      	ldrb	r1, [r2, r3]
100089ec:	2256      	movs	r2, #86	; 0x56
100089ee:	5481      	strb	r1, [r0, r2]
	vmode->psync = v->psync; // positive synchronization
100089f0:	4649      	mov	r1, r9
100089f2:	3a21      	subs	r2, #33	; 0x21
100089f4:	5c89      	ldrb	r1, [r1, r2]
100089f6:	3222      	adds	r2, #34	; 0x22
100089f8:	5481      	strb	r1, [r0, r2]
	vmode->odd = v->odd; // first sub-frame is odd lines 1, 3, 5,... (PAL)
100089fa:	4649      	mov	r1, r9
100089fc:	3a21      	subs	r2, #33	; 0x21
100089fe:	5c89      	ldrb	r1, [r1, r2]
10008a00:	3222      	adds	r2, #34	; 0x22
10008a02:	5481      	strb	r1, [r0, r2]

	// first active scanline
	if (v->inter)
10008a04:	464a      	mov	r2, r9
10008a06:	5cd3      	ldrb	r3, [r2, r3]
10008a08:	2b00      	cmp	r3, #0
10008a0a:	d065      	beq.n	10008ad8 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x50c>
	{
		// interlaced
		vmode->vfirst1 = (vmode->vsync1 + vmode->vpost1)/2 + vmode->vback1 + 1; 
10008a0c:	9a06      	ldr	r2, [sp, #24]
		vmode->vfirst2 = vmode->vfirst1 + vmode->vact1 + vmode->vfront1 + 
			(vmode->vpre1 + vmode->vsync2 + vmode->vpost2)/2 + vmode->vback2;
10008a0e:	990a      	ldr	r1, [sp, #40]	; 0x28
		vmode->vfirst1 = (vmode->vsync1 + vmode->vpost1)/2 + vmode->vback1 + 1; 
10008a10:	4694      	mov	ip, r2
10008a12:	9b04      	ldr	r3, [sp, #16]
			(vmode->vpre1 + vmode->vsync2 + vmode->vpost2)/2 + vmode->vback2;
10008a14:	9a09      	ldr	r2, [sp, #36]	; 0x24
		vmode->vfirst1 = (vmode->vsync1 + vmode->vpost1)/2 + vmode->vback1 + 1; 
10008a16:	4463      	add	r3, ip
			(vmode->vpre1 + vmode->vsync2 + vmode->vpost2)/2 + vmode->vback2;
10008a18:	468c      	mov	ip, r1
10008a1a:	990b      	ldr	r1, [sp, #44]	; 0x2c
10008a1c:	4462      	add	r2, ip
10008a1e:	468c      	mov	ip, r1
10008a20:	9905      	ldr	r1, [sp, #20]
10008a22:	4462      	add	r2, ip
10008a24:	468c      	mov	ip, r1
10008a26:	9907      	ldr	r1, [sp, #28]
10008a28:	1052      	asrs	r2, r2, #1
10008a2a:	4462      	add	r2, ip
10008a2c:	468c      	mov	ip, r1
		vmode->vfirst1 = (vmode->vsync1 + vmode->vpost1)/2 + vmode->vback1 + 1; 
10008a2e:	105b      	asrs	r3, r3, #1
10008a30:	3301      	adds	r3, #1
10008a32:	18fb      	adds	r3, r7, r3
10008a34:	b29b      	uxth	r3, r3
			(vmode->vpre1 + vmode->vsync2 + vmode->vpost2)/2 + vmode->vback2;
10008a36:	18a2      	adds	r2, r4, r2
10008a38:	189a      	adds	r2, r3, r2
10008a3a:	4462      	add	r2, ip
10008a3c:	b292      	uxth	r2, r2
10008a3e:	4650      	mov	r0, sl
10008a40:	214e      	movs	r1, #78	; 0x4e
10008a42:	5242      	strh	r2, [r0, r1]
10008a44:	2240      	movs	r2, #64	; 0x40
10008a46:	5283      	strh	r3, [r0, r2]
	{
		// progressive
		vmode->vfirst1 = vmode->vsync1 + vmode->vback1 + 1;
		vmode->vfirst2 = 0;
	}
}
10008a48:	b011      	add	sp, #68	; 0x44
10008a4a:	bcf0      	pop	{r4, r5, r6, r7}
10008a4c:	46bb      	mov	fp, r7
10008a4e:	46b2      	mov	sl, r6
10008a50:	46a9      	mov	r9, r5
10008a52:	46a0      	mov	r8, r4
10008a54:	bdf0      	pop	{r4, r5, r6, r7, pc}
		hfront -= 13 - hback;
10008a56:	18c9      	adds	r1, r1, r3
10008a58:	390d      	subs	r1, #13
10008a5a:	2902      	cmp	r1, #2
10008a5c:	db38      	blt.n	10008ad0 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x504>
10008a5e:	220d      	movs	r2, #13
		hback = 13;
10008a60:	230d      	movs	r3, #13
10008a62:	e6fb      	b.n	1000885c <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x290>
		htot -= 4 - hsync;
10008a64:	2304      	movs	r3, #4
10008a66:	1824      	adds	r4, r4, r0
		hsync = 4;
10008a68:	2704      	movs	r7, #4
		htot -= 4 - hsync;
10008a6a:	3c04      	subs	r4, #4
		hsync = 4;
10008a6c:	9304      	str	r3, [sp, #16]
10008a6e:	e6ba      	b.n	100087e6 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x21a>
10008a70:	0019      	movs	r1, r3
	if (v->inter) // interlaced
10008a72:	2800      	cmp	r0, #0
10008a74:	d000      	beq.n	10008a78 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x4ac>
10008a76:	e714      	b.n	100088a2 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x2d6>
10008a78:	e735      	b.n	100088e6 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x31a>
	if (cfg->dbly) h &= ~1; // must be even number if double lines
10008a7a:	000a      	movs	r2, r1
	int vact2 = 0;
10008a7c:	2300      	movs	r3, #0
	if (cfg->dbly) h /= 2; // return double lines to single lines
10008a7e:	0849      	lsrs	r1, r1, #1
10008a80:	e733      	b.n	100088ea <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x31e>
			vact1 = (h+1)/2; // if even lines, even frame will have more lines
10008a82:	1c4a      	adds	r2, r1, #1
			vact2 = h/2;
10008a84:	104b      	asrs	r3, r1, #1
10008a86:	001e      	movs	r6, r3
			vact1 = (h+1)/2; // if even lines, even frame will have more lines
10008a88:	1052      	asrs	r2, r2, #1
			vact2 = h/2;
10008a8a:	e714      	b.n	100088b6 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x2ea>
10008a8c:	0019      	movs	r1, r3
	if (cfg->dbly) h &= ~1; // must be even number if double lines
10008a8e:	2301      	movs	r3, #1
10008a90:	4399      	bics	r1, r3
	if (v->inter) // interlaced
10008a92:	2800      	cmp	r0, #0
10008a94:	d000      	beq.n	10008a98 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x4cc>
10008a96:	e704      	b.n	100088a2 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x2d6>
10008a98:	e7ef      	b.n	10008a7a <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x4ae>
		htot--;
10008a9a:	3d01      	subs	r5, #1
		hfront++;
10008a9c:	3101      	adds	r1, #1
10008a9e:	e6e8      	b.n	10008872 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x2a6>
			freq2 = (int)(cpp*wfull*1000/hfull + 0.5f) + 200;
10008aa0:	19f6      	adds	r6, r6, r7
10008aa2:	0170      	lsls	r0, r6, #5
10008aa4:	1b80      	subs	r0, r0, r6
10008aa6:	0080      	lsls	r0, r0, #2
10008aa8:	1980      	adds	r0, r0, r6
10008aaa:	00c0      	lsls	r0, r0, #3
10008aac:	f7f8 fb50 	bl	10001150 <__wrap___aeabi_i2f>
10008ab0:	4641      	mov	r1, r8
10008ab2:	f7f8 fb12 	bl	100010da <__wrap___aeabi_fdiv>
10008ab6:	21fc      	movs	r1, #252	; 0xfc
10008ab8:	0589      	lsls	r1, r1, #22
10008aba:	f7f8 fb0b 	bl	100010d4 <__wrap___aeabi_fadd>
10008abe:	f7f8 fb69 	bl	10001194 <__wrap___aeabi_f2iz>
10008ac2:	30c8      	adds	r0, #200	; 0xc8
		if (freq2 >= freq) freq = freq2;
10008ac4:	4285      	cmp	r5, r0
10008ac6:	d900      	bls.n	10008aca <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x4fe>
10008ac8:	e5dd      	b.n	10008686 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0xba>
10008aca:	e5da      	b.n	10008682 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0xb6>
		int freq2 = (int)(cpp*wfull*1000/hfull + 0.5f) + 200;
10008acc:	0006      	movs	r6, r0
10008ace:	e5c3      	b.n	10008658 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x8c>
10008ad0:	2102      	movs	r1, #2
10008ad2:	220d      	movs	r2, #13
		hback = 13;
10008ad4:	230d      	movs	r3, #13
10008ad6:	e6c1      	b.n	1000885c <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x290>
		vmode->vfirst1 = vmode->vsync1 + vmode->vback1 + 1;
10008ad8:	9b04      	ldr	r3, [sp, #16]
		vmode->vfirst2 = 0;
10008ada:	2200      	movs	r2, #0
		vmode->vfirst1 = vmode->vsync1 + vmode->vback1 + 1;
10008adc:	3301      	adds	r3, #1
10008ade:	18fb      	adds	r3, r7, r3
10008ae0:	b29b      	uxth	r3, r3
		vmode->vfirst2 = 0;
10008ae2:	e7ac      	b.n	10008a3e <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x472>
	vmode->vfront2 = v->vfront2 - ((dh < 0) ? (dh-1)/2 : (dh+1)/2); // V front porch (after image, before VSYNC) on subframe 2
10008ae4:	1e59      	subs	r1, r3, #1
10008ae6:	0fcb      	lsrs	r3, r1, #31
10008ae8:	185b      	adds	r3, r3, r1
10008aea:	105b      	asrs	r3, r3, #1
10008aec:	b29b      	uxth	r3, r3
10008aee:	e74b      	b.n	10008988 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x3bc>
	vmode->vfront1 = v->vfront1 - ((dh < 0) ? (dh-1)/2 : (dh+1)/2); // V front porch (after image, before VSYNC) on subframe 1
10008af0:	1e54      	subs	r4, r2, #1
10008af2:	0fe2      	lsrs	r2, r4, #31
10008af4:	1912      	adds	r2, r2, r4
10008af6:	1052      	asrs	r2, r2, #1
10008af8:	b292      	uxth	r2, r2
10008afa:	e71a      	b.n	10008932 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x366>
	hback += (d < 0) ? (d-1)/2 : (d+1)/2;
10008afc:	3a01      	subs	r2, #1
10008afe:	0fd3      	lsrs	r3, r2, #31
10008b00:	189b      	adds	r3, r3, r2
10008b02:	105b      	asrs	r3, r3, #1
10008b04:	e6a0      	b.n	10008848 <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x27c>
	while (cpp > maxcpp)
10008b06:	23fe      	movs	r3, #254	; 0xfe
10008b08:	059b      	lsls	r3, r3, #22
10008b0a:	2401      	movs	r4, #1
10008b0c:	9308      	str	r3, [sp, #32]
10008b0e:	1c1e      	adds	r6, r3, #0
10008b10:	e60c      	b.n	1000872c <_Z6VgaCfgPK7sVgaCfgP6sVmode+0x160>
10008b12:	46c0      	nop			; (mov r8, r8)
10008b14:	447a0000 	.word	0x447a0000

10008b18 <_Z12FindSysClockmPmS_PtPhS1_>:
//  outfbdiv ... output fbdiv (16..320)
//  outpd1 ... output postdiv1 (1..7)
//  outpd2 ... output postdiv2 (1..7)
// Returns true if precise frequency has been found, or near frequency used otherwise.
bool FindSysClock(u32 reqkhz, u32* outkhz, u32* outvco, u16* outfbdiv, u8* outpd1, u8* outpd2)
{
10008b18:	b5f0      	push	{r4, r5, r6, r7, lr}
10008b1a:	46de      	mov	lr, fp
10008b1c:	464e      	mov	r6, r9
10008b1e:	4657      	mov	r7, sl
10008b20:	4645      	mov	r5, r8
10008b22:	b5e0      	push	{r5, r6, r7, lr}
10008b24:	b087      	sub	sp, #28
10008b26:	9000      	str	r0, [sp, #0]
	// get reference frequency in kHz (should be 12 MHz)
	u32 input = clock_get_hz(clk_ref)/1000;
10008b28:	2004      	movs	r0, #4
{
10008b2a:	468a      	mov	sl, r1
10008b2c:	4691      	mov	r9, r2
10008b2e:	9304      	str	r3, [sp, #16]
	u32 input = clock_get_hz(clk_ref)/1000;
10008b30:	f7f8 fe84 	bl	1000183c <clock_get_hz>
10008b34:	21fa      	movs	r1, #250	; 0xfa
10008b36:	0089      	lsls	r1, r1, #2
10008b38:	f7f7 fc1c 	bl	10000374 <__wrap___aeabi_uidiv>
	*outkhz = 0;
10008b3c:	2300      	movs	r3, #0
10008b3e:	4651      	mov	r1, sl
10008b40:	4684      	mov	ip, r0
10008b42:	4a8e      	ldr	r2, [pc, #568]	; (10008d7c <_Z12FindSysClockmPmS_PtPhS1_+0x264>)
10008b44:	600b      	str	r3, [r1, #0]
10008b46:	0083      	lsls	r3, r0, #2
10008b48:	4463      	add	r3, ip
10008b4a:	4694      	mov	ip, r2
10008b4c:	019b      	lsls	r3, r3, #6
10008b4e:	4463      	add	r3, ip
10008b50:	9302      	str	r3, [sp, #8]
						*outpd2 = pd2;
10008b52:	464b      	mov	r3, r9
	*outkhz = 0;
10008b54:	25a0      	movs	r5, #160	; 0xa0
						*outpd2 = pd2;
10008b56:	46d1      	mov	r9, sl
10008b58:	469a      	mov	sl, r3
	*outkhz = 0;
10008b5a:	4e89      	ldr	r6, [pc, #548]	; (10008d80 <_Z12FindSysClockmPmS_PtPhS1_+0x268>)
	u32 input = clock_get_hz(clk_ref)/1000;
10008b5c:	9005      	str	r0, [sp, #20]
	*outkhz = 0;
10008b5e:	006d      	lsls	r5, r5, #1
		vco = fbdiv * input;
10008b60:	4a88      	ldr	r2, [pc, #544]	; (10008d84 <_Z12FindSysClockmPmS_PtPhS1_+0x26c>)
10008b62:	9b02      	ldr	r3, [sp, #8]
10008b64:	4694      	mov	ip, r2
10008b66:	001c      	movs	r4, r3
		if ((vco >= vcomin) && (vco <= vcomax))
10008b68:	4a87      	ldr	r2, [pc, #540]	; (10008d88 <_Z12FindSysClockmPmS_PtPhS1_+0x270>)
10008b6a:	4464      	add	r4, ip
10008b6c:	4293      	cmp	r3, r2
10008b6e:	d900      	bls.n	10008b72 <_Z12FindSysClockmPmS_PtPhS1_+0x5a>
10008b70:	e0dd      	b.n	10008d2e <_Z12FindSysClockmPmS_PtPhS1_+0x216>
10008b72:	2306      	movs	r3, #6
10008b74:	9503      	str	r5, [sp, #12]
10008b76:	4698      	mov	r8, r3
10008b78:	e0b4      	b.n	10008ce4 <_Z12FindSysClockmPmS_PtPhS1_+0x1cc>
					khz = vco / (pd1 * pd2);
10008b7a:	4641      	mov	r1, r8
10008b7c:	0020      	movs	r0, r4
10008b7e:	4369      	muls	r1, r5
10008b80:	f7f7 fbf8 	bl	10000374 <__wrap___aeabi_uidiv>
					margin = abs((int)(khz - reqkhz));
10008b84:	9b00      	ldr	r3, [sp, #0]
10008b86:	1ac3      	subs	r3, r0, r3
10008b88:	17da      	asrs	r2, r3, #31
10008b8a:	189b      	adds	r3, r3, r2
10008b8c:	4053      	eors	r3, r2
					if (margin < margin_best)
10008b8e:	42b3      	cmp	r3, r6
10008b90:	d20c      	bcs.n	10008bac <_Z12FindSysClockmPmS_PtPhS1_+0x94>
						*outkhz = khz;
10008b92:	464a      	mov	r2, r9
10008b94:	6010      	str	r0, [r2, #0]
						*outvco = vco;
10008b96:	4652      	mov	r2, sl
						*outpd2 = pd2;
10008b98:	001e      	movs	r6, r3
						*outvco = vco;
10008b9a:	6014      	str	r4, [r2, #0]
						*outfbdiv = fbdiv;
10008b9c:	9903      	ldr	r1, [sp, #12]
10008b9e:	9a04      	ldr	r2, [sp, #16]
10008ba0:	8011      	strh	r1, [r2, #0]
						*outpd1 = pd1;
10008ba2:	9a10      	ldr	r2, [sp, #64]	; 0x40
10008ba4:	9901      	ldr	r1, [sp, #4]
10008ba6:	7011      	strb	r1, [r2, #0]
						*outpd2 = pd2;
10008ba8:	9a11      	ldr	r2, [sp, #68]	; 0x44
10008baa:	7017      	strb	r7, [r2, #0]
				for (pd2 = pd1; pd2 >= 1; pd2--)
10008bac:	1e7b      	subs	r3, r7, #1
10008bae:	b2db      	uxtb	r3, r3
10008bb0:	469b      	mov	fp, r3
10008bb2:	2b00      	cmp	r3, #0
10008bb4:	d100      	bne.n	10008bb8 <_Z12FindSysClockmPmS_PtPhS1_+0xa0>
10008bb6:	e091      	b.n	10008cdc <_Z12FindSysClockmPmS_PtPhS1_+0x1c4>
					khz = vco / (pd1 * pd2);
10008bb8:	0019      	movs	r1, r3
10008bba:	0020      	movs	r0, r4
10008bbc:	4369      	muls	r1, r5
10008bbe:	f7f7 fbd9 	bl	10000374 <__wrap___aeabi_uidiv>
					margin = abs((int)(khz - reqkhz));
10008bc2:	9b00      	ldr	r3, [sp, #0]
10008bc4:	1ac3      	subs	r3, r0, r3
10008bc6:	17da      	asrs	r2, r3, #31
10008bc8:	189b      	adds	r3, r3, r2
10008bca:	4053      	eors	r3, r2
					if (margin < margin_best)
10008bcc:	42b3      	cmp	r3, r6
10008bce:	d20d      	bcs.n	10008bec <_Z12FindSysClockmPmS_PtPhS1_+0xd4>
						*outkhz = khz;
10008bd0:	464a      	mov	r2, r9
10008bd2:	6010      	str	r0, [r2, #0]
						*outvco = vco;
10008bd4:	4652      	mov	r2, sl
						*outfbdiv = fbdiv;
10008bd6:	9903      	ldr	r1, [sp, #12]
						*outvco = vco;
10008bd8:	6014      	str	r4, [r2, #0]
						*outfbdiv = fbdiv;
10008bda:	9a04      	ldr	r2, [sp, #16]
						*outpd2 = pd2;
10008bdc:	001e      	movs	r6, r3
						*outfbdiv = fbdiv;
10008bde:	8011      	strh	r1, [r2, #0]
						*outpd1 = pd1;
10008be0:	9a10      	ldr	r2, [sp, #64]	; 0x40
10008be2:	9901      	ldr	r1, [sp, #4]
10008be4:	7011      	strb	r1, [r2, #0]
						*outpd2 = pd2;
10008be6:	4659      	mov	r1, fp
10008be8:	9a11      	ldr	r2, [sp, #68]	; 0x44
10008bea:	7011      	strb	r1, [r2, #0]
				for (pd2 = pd1; pd2 >= 1; pd2--)
10008bec:	1ebb      	subs	r3, r7, #2
10008bee:	b2db      	uxtb	r3, r3
10008bf0:	469b      	mov	fp, r3
10008bf2:	2b00      	cmp	r3, #0
10008bf4:	d072      	beq.n	10008cdc <_Z12FindSysClockmPmS_PtPhS1_+0x1c4>
					khz = vco / (pd1 * pd2);
10008bf6:	0019      	movs	r1, r3
10008bf8:	0020      	movs	r0, r4
10008bfa:	4369      	muls	r1, r5
10008bfc:	f7f7 fbba 	bl	10000374 <__wrap___aeabi_uidiv>
					margin = abs((int)(khz - reqkhz));
10008c00:	9b00      	ldr	r3, [sp, #0]
10008c02:	1ac3      	subs	r3, r0, r3
10008c04:	17da      	asrs	r2, r3, #31
10008c06:	189b      	adds	r3, r3, r2
10008c08:	4053      	eors	r3, r2
					if (margin < margin_best)
10008c0a:	429e      	cmp	r6, r3
10008c0c:	d90d      	bls.n	10008c2a <_Z12FindSysClockmPmS_PtPhS1_+0x112>
						*outkhz = khz;
10008c0e:	464a      	mov	r2, r9
10008c10:	6010      	str	r0, [r2, #0]
						*outvco = vco;
10008c12:	4652      	mov	r2, sl
						*outfbdiv = fbdiv;
10008c14:	9903      	ldr	r1, [sp, #12]
						*outvco = vco;
10008c16:	6014      	str	r4, [r2, #0]
						*outfbdiv = fbdiv;
10008c18:	9a04      	ldr	r2, [sp, #16]
						*outpd2 = pd2;
10008c1a:	001e      	movs	r6, r3
						*outfbdiv = fbdiv;
10008c1c:	8011      	strh	r1, [r2, #0]
						*outpd1 = pd1;
10008c1e:	9a10      	ldr	r2, [sp, #64]	; 0x40
10008c20:	9901      	ldr	r1, [sp, #4]
10008c22:	7011      	strb	r1, [r2, #0]
						*outpd2 = pd2;
10008c24:	4659      	mov	r1, fp
10008c26:	9a11      	ldr	r2, [sp, #68]	; 0x44
10008c28:	7011      	strb	r1, [r2, #0]
				for (pd2 = pd1; pd2 >= 1; pd2--)
10008c2a:	1efb      	subs	r3, r7, #3
10008c2c:	b2db      	uxtb	r3, r3
10008c2e:	469b      	mov	fp, r3
10008c30:	2b00      	cmp	r3, #0
10008c32:	d053      	beq.n	10008cdc <_Z12FindSysClockmPmS_PtPhS1_+0x1c4>
					khz = vco / (pd1 * pd2);
10008c34:	0019      	movs	r1, r3
10008c36:	0020      	movs	r0, r4
10008c38:	4369      	muls	r1, r5
10008c3a:	f7f7 fb9b 	bl	10000374 <__wrap___aeabi_uidiv>
					margin = abs((int)(khz - reqkhz));
10008c3e:	9b00      	ldr	r3, [sp, #0]
10008c40:	1ac3      	subs	r3, r0, r3
10008c42:	17da      	asrs	r2, r3, #31
10008c44:	189b      	adds	r3, r3, r2
10008c46:	4053      	eors	r3, r2
					if (margin < margin_best)
10008c48:	429e      	cmp	r6, r3
10008c4a:	d90d      	bls.n	10008c68 <_Z12FindSysClockmPmS_PtPhS1_+0x150>
						*outkhz = khz;
10008c4c:	464a      	mov	r2, r9
10008c4e:	6010      	str	r0, [r2, #0]
						*outvco = vco;
10008c50:	4652      	mov	r2, sl
						*outfbdiv = fbdiv;
10008c52:	9903      	ldr	r1, [sp, #12]
						*outvco = vco;
10008c54:	6014      	str	r4, [r2, #0]
						*outfbdiv = fbdiv;
10008c56:	9a04      	ldr	r2, [sp, #16]
						*outpd2 = pd2;
10008c58:	001e      	movs	r6, r3
						*outfbdiv = fbdiv;
10008c5a:	8011      	strh	r1, [r2, #0]
						*outpd1 = pd1;
10008c5c:	9a10      	ldr	r2, [sp, #64]	; 0x40
10008c5e:	9901      	ldr	r1, [sp, #4]
10008c60:	7011      	strb	r1, [r2, #0]
						*outpd2 = pd2;
10008c62:	4659      	mov	r1, fp
10008c64:	9a11      	ldr	r2, [sp, #68]	; 0x44
10008c66:	7011      	strb	r1, [r2, #0]
				for (pd2 = pd1; pd2 >= 1; pd2--)
10008c68:	1f3b      	subs	r3, r7, #4
10008c6a:	b2db      	uxtb	r3, r3
10008c6c:	469b      	mov	fp, r3
10008c6e:	2b00      	cmp	r3, #0
10008c70:	d034      	beq.n	10008cdc <_Z12FindSysClockmPmS_PtPhS1_+0x1c4>
					khz = vco / (pd1 * pd2);
10008c72:	0019      	movs	r1, r3
10008c74:	0020      	movs	r0, r4
10008c76:	4369      	muls	r1, r5
10008c78:	f7f7 fb7c 	bl	10000374 <__wrap___aeabi_uidiv>
					margin = abs((int)(khz - reqkhz));
10008c7c:	9b00      	ldr	r3, [sp, #0]
10008c7e:	1ac3      	subs	r3, r0, r3
10008c80:	17da      	asrs	r2, r3, #31
10008c82:	189b      	adds	r3, r3, r2
10008c84:	4053      	eors	r3, r2
					if (margin < margin_best)
10008c86:	429e      	cmp	r6, r3
10008c88:	d90d      	bls.n	10008ca6 <_Z12FindSysClockmPmS_PtPhS1_+0x18e>
						*outkhz = khz;
10008c8a:	464a      	mov	r2, r9
10008c8c:	6010      	str	r0, [r2, #0]
						*outvco = vco;
10008c8e:	4652      	mov	r2, sl
						*outfbdiv = fbdiv;
10008c90:	9903      	ldr	r1, [sp, #12]
						*outvco = vco;
10008c92:	6014      	str	r4, [r2, #0]
						*outfbdiv = fbdiv;
10008c94:	9a04      	ldr	r2, [sp, #16]
						*outpd2 = pd2;
10008c96:	001e      	movs	r6, r3
						*outfbdiv = fbdiv;
10008c98:	8011      	strh	r1, [r2, #0]
						*outpd1 = pd1;
10008c9a:	9a10      	ldr	r2, [sp, #64]	; 0x40
10008c9c:	9901      	ldr	r1, [sp, #4]
10008c9e:	7011      	strb	r1, [r2, #0]
						*outpd2 = pd2;
10008ca0:	4659      	mov	r1, fp
10008ca2:	9a11      	ldr	r2, [sp, #68]	; 0x44
10008ca4:	7011      	strb	r1, [r2, #0]
				for (pd2 = pd1; pd2 >= 1; pd2--)
10008ca6:	2f05      	cmp	r7, #5
10008ca8:	d018      	beq.n	10008cdc <_Z12FindSysClockmPmS_PtPhS1_+0x1c4>
					khz = vco / (pd1 * pd2);
10008caa:	0029      	movs	r1, r5
10008cac:	0020      	movs	r0, r4
10008cae:	f7f7 fb61 	bl	10000374 <__wrap___aeabi_uidiv>
					margin = abs((int)(khz - reqkhz));
10008cb2:	9b00      	ldr	r3, [sp, #0]
10008cb4:	1ac3      	subs	r3, r0, r3
10008cb6:	17da      	asrs	r2, r3, #31
10008cb8:	189b      	adds	r3, r3, r2
10008cba:	4053      	eors	r3, r2
					if (margin < margin_best)
10008cbc:	429e      	cmp	r6, r3
10008cbe:	d90d      	bls.n	10008cdc <_Z12FindSysClockmPmS_PtPhS1_+0x1c4>
						*outkhz = khz;
10008cc0:	464a      	mov	r2, r9
10008cc2:	6010      	str	r0, [r2, #0]
						*outvco = vco;
10008cc4:	4652      	mov	r2, sl
						*outfbdiv = fbdiv;
10008cc6:	9903      	ldr	r1, [sp, #12]
						*outvco = vco;
10008cc8:	6014      	str	r4, [r2, #0]
						*outfbdiv = fbdiv;
10008cca:	9a04      	ldr	r2, [sp, #16]
						*outpd2 = pd2;
10008ccc:	001e      	movs	r6, r3
						*outfbdiv = fbdiv;
10008cce:	8011      	strh	r1, [r2, #0]
						*outpd1 = pd1;
10008cd0:	9a10      	ldr	r2, [sp, #64]	; 0x40
10008cd2:	9901      	ldr	r1, [sp, #4]
10008cd4:	7011      	strb	r1, [r2, #0]
						*outpd2 = pd2;
10008cd6:	2101      	movs	r1, #1
10008cd8:	9a11      	ldr	r2, [sp, #68]	; 0x44
10008cda:	7011      	strb	r1, [r2, #0]
			for (pd1 = 7; pd1 >= 1; pd1--)
10008cdc:	2301      	movs	r3, #1
10008cde:	425b      	negs	r3, r3
10008ce0:	469c      	mov	ip, r3
10008ce2:	44e0      	add	r8, ip
				for (pd2 = pd1; pd2 >= 1; pd2--)
10008ce4:	4643      	mov	r3, r8
10008ce6:	b2df      	uxtb	r7, r3
10008ce8:	1c7b      	adds	r3, r7, #1
10008cea:	b2da      	uxtb	r2, r3
10008cec:	4643      	mov	r3, r8
10008cee:	1c5d      	adds	r5, r3, #1
					khz = vco / (pd1 * pd2);
10008cf0:	0029      	movs	r1, r5
10008cf2:	0020      	movs	r0, r4
10008cf4:	4369      	muls	r1, r5
10008cf6:	9201      	str	r2, [sp, #4]
10008cf8:	f7f7 fb3c 	bl	10000374 <__wrap___aeabi_uidiv>
					margin = abs((int)(khz - reqkhz));
10008cfc:	9b00      	ldr	r3, [sp, #0]
10008cfe:	1ac3      	subs	r3, r0, r3
10008d00:	17d9      	asrs	r1, r3, #31
10008d02:	185b      	adds	r3, r3, r1
10008d04:	404b      	eors	r3, r1
					if (margin < margin_best)
10008d06:	429e      	cmp	r6, r3
10008d08:	d90c      	bls.n	10008d24 <_Z12FindSysClockmPmS_PtPhS1_+0x20c>
						*outkhz = khz;
10008d0a:	4649      	mov	r1, r9
10008d0c:	6008      	str	r0, [r1, #0]
						*outvco = vco;
10008d0e:	4651      	mov	r1, sl
						*outpd2 = pd2;
10008d10:	001e      	movs	r6, r3
						*outvco = vco;
10008d12:	600c      	str	r4, [r1, #0]
						*outfbdiv = fbdiv;
10008d14:	9803      	ldr	r0, [sp, #12]
10008d16:	9904      	ldr	r1, [sp, #16]
						*outpd1 = pd1;
10008d18:	9a01      	ldr	r2, [sp, #4]
						*outfbdiv = fbdiv;
10008d1a:	8008      	strh	r0, [r1, #0]
						*outpd1 = pd1;
10008d1c:	9910      	ldr	r1, [sp, #64]	; 0x40
10008d1e:	700a      	strb	r2, [r1, #0]
						*outpd2 = pd2;
10008d20:	9911      	ldr	r1, [sp, #68]	; 0x44
10008d22:	700a      	strb	r2, [r1, #0]
				for (pd2 = pd1; pd2 >= 1; pd2--)
10008d24:	4643      	mov	r3, r8
10008d26:	2b00      	cmp	r3, #0
10008d28:	d000      	beq.n	10008d2c <_Z12FindSysClockmPmS_PtPhS1_+0x214>
10008d2a:	e726      	b.n	10008b7a <_Z12FindSysClockmPmS_PtPhS1_+0x62>
10008d2c:	9d03      	ldr	r5, [sp, #12]
			if (fbdiv < 16) break;
10008d2e:	9b02      	ldr	r3, [sp, #8]
10008d30:	9a05      	ldr	r2, [sp, #20]
			fbdiv--;
10008d32:	3d01      	subs	r5, #1
			if (fbdiv < 16) break;
10008d34:	1a9b      	subs	r3, r3, r2
			fbdiv--;
10008d36:	b2ad      	uxth	r5, r5
			if (fbdiv < 16) break;
10008d38:	9302      	str	r3, [sp, #8]
10008d3a:	2d0f      	cmp	r5, #15
10008d3c:	d000      	beq.n	10008d40 <_Z12FindSysClockmPmS_PtPhS1_+0x228>
10008d3e:	e70f      	b.n	10008b60 <_Z12FindSysClockmPmS_PtPhS1_+0x48>
	return (*outkhz == reqkhz) && (*outvco == *outkhz * *outpd1 * *outpd2);
10008d40:	4653      	mov	r3, sl
10008d42:	46ca      	mov	sl, r9
10008d44:	4699      	mov	r9, r3
10008d46:	4653      	mov	r3, sl
10008d48:	9a00      	ldr	r2, [sp, #0]
10008d4a:	681b      	ldr	r3, [r3, #0]
10008d4c:	2000      	movs	r0, #0
10008d4e:	429a      	cmp	r2, r3
10008d50:	d10d      	bne.n	10008d6e <_Z12FindSysClockmPmS_PtPhS1_+0x256>
10008d52:	9b10      	ldr	r3, [sp, #64]	; 0x40
10008d54:	9a11      	ldr	r2, [sp, #68]	; 0x44
10008d56:	781b      	ldrb	r3, [r3, #0]
10008d58:	7810      	ldrb	r0, [r2, #0]
10008d5a:	4358      	muls	r0, r3
10008d5c:	9b00      	ldr	r3, [sp, #0]
10008d5e:	4343      	muls	r3, r0
10008d60:	0018      	movs	r0, r3
10008d62:	464b      	mov	r3, r9
10008d64:	681b      	ldr	r3, [r3, #0]
10008d66:	1ac0      	subs	r0, r0, r3
10008d68:	4243      	negs	r3, r0
10008d6a:	4158      	adcs	r0, r3
10008d6c:	b2c0      	uxtb	r0, r0

	// find PLL setup
	return vcocalc(reqkhz, input, 400000, 1600000, false,  outkhz, outvco, outfbdiv, outpd1, outpd2);
}
10008d6e:	b007      	add	sp, #28
10008d70:	bcf0      	pop	{r4, r5, r6, r7}
10008d72:	46bb      	mov	fp, r7
10008d74:	46b2      	mov	sl, r6
10008d76:	46a9      	mov	r9, r5
10008d78:	46a0      	mov	r8, r4
10008d7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
10008d7c:	fff9e580 	.word	0xfff9e580
10008d80:	000186a0 	.word	0x000186a0
10008d84:	00061a80 	.word	0x00061a80
10008d88:	00124f80 	.word	0x00124f80

10008d8c <calloc>:
10008d8c:	0003      	movs	r3, r0
10008d8e:	b510      	push	{r4, lr}
10008d90:	000a      	movs	r2, r1
10008d92:	4903      	ldr	r1, [pc, #12]	; (10008da0 <calloc+0x14>)
10008d94:	6808      	ldr	r0, [r1, #0]
10008d96:	0019      	movs	r1, r3
10008d98:	f000 f804 	bl	10008da4 <_calloc_r>
10008d9c:	bd10      	pop	{r4, pc}
10008d9e:	46c0      	nop			; (mov r8, r8)
10008da0:	200021f4 	.word	0x200021f4

10008da4 <_calloc_r>:
10008da4:	b570      	push	{r4, r5, r6, lr}
10008da6:	0c0b      	lsrs	r3, r1, #16
10008da8:	2400      	movs	r4, #0
10008daa:	0c15      	lsrs	r5, r2, #16
10008dac:	2b00      	cmp	r3, #0
10008dae:	d128      	bne.n	10008e02 <_calloc_r+0x5e>
10008db0:	2d00      	cmp	r5, #0
10008db2:	d137      	bne.n	10008e24 <_calloc_r+0x80>
10008db4:	b28b      	uxth	r3, r1
10008db6:	b291      	uxth	r1, r2
10008db8:	4359      	muls	r1, r3
10008dba:	f000 f851 	bl	10008e60 <_malloc_r>
10008dbe:	1e05      	subs	r5, r0, #0
10008dc0:	d019      	beq.n	10008df6 <_calloc_r+0x52>
10008dc2:	0003      	movs	r3, r0
10008dc4:	3b08      	subs	r3, #8
10008dc6:	685a      	ldr	r2, [r3, #4]
10008dc8:	2303      	movs	r3, #3
10008dca:	439a      	bics	r2, r3
10008dcc:	3a04      	subs	r2, #4
10008dce:	2a24      	cmp	r2, #36	; 0x24
10008dd0:	d813      	bhi.n	10008dfa <_calloc_r+0x56>
10008dd2:	0003      	movs	r3, r0
10008dd4:	2a13      	cmp	r2, #19
10008dd6:	d90a      	bls.n	10008dee <_calloc_r+0x4a>
10008dd8:	6004      	str	r4, [r0, #0]
10008dda:	6044      	str	r4, [r0, #4]
10008ddc:	3308      	adds	r3, #8
10008dde:	2a1b      	cmp	r2, #27
10008de0:	d905      	bls.n	10008dee <_calloc_r+0x4a>
10008de2:	6084      	str	r4, [r0, #8]
10008de4:	60c4      	str	r4, [r0, #12]
10008de6:	2a24      	cmp	r2, #36	; 0x24
10008de8:	d025      	beq.n	10008e36 <_calloc_r+0x92>
10008dea:	0003      	movs	r3, r0
10008dec:	3310      	adds	r3, #16
10008dee:	2200      	movs	r2, #0
10008df0:	601a      	str	r2, [r3, #0]
10008df2:	605a      	str	r2, [r3, #4]
10008df4:	609a      	str	r2, [r3, #8]
10008df6:	0028      	movs	r0, r5
10008df8:	bd70      	pop	{r4, r5, r6, pc}
10008dfa:	2100      	movs	r1, #0
10008dfc:	f7f8 fa4e 	bl	1000129c <__wrap_memset>
10008e00:	e7f9      	b.n	10008df6 <_calloc_r+0x52>
10008e02:	2d00      	cmp	r5, #0
10008e04:	d111      	bne.n	10008e2a <_calloc_r+0x86>
10008e06:	1c15      	adds	r5, r2, #0
10008e08:	b289      	uxth	r1, r1
10008e0a:	b292      	uxth	r2, r2
10008e0c:	434a      	muls	r2, r1
10008e0e:	b2ad      	uxth	r5, r5
10008e10:	b29b      	uxth	r3, r3
10008e12:	436b      	muls	r3, r5
10008e14:	0c11      	lsrs	r1, r2, #16
10008e16:	185b      	adds	r3, r3, r1
10008e18:	0c19      	lsrs	r1, r3, #16
10008e1a:	d106      	bne.n	10008e2a <_calloc_r+0x86>
10008e1c:	0419      	lsls	r1, r3, #16
10008e1e:	b292      	uxth	r2, r2
10008e20:	4311      	orrs	r1, r2
10008e22:	e7ca      	b.n	10008dba <_calloc_r+0x16>
10008e24:	1c2b      	adds	r3, r5, #0
10008e26:	1c0d      	adds	r5, r1, #0
10008e28:	e7ee      	b.n	10008e08 <_calloc_r+0x64>
10008e2a:	f000 f809 	bl	10008e40 <__errno>
10008e2e:	230c      	movs	r3, #12
10008e30:	2500      	movs	r5, #0
10008e32:	6003      	str	r3, [r0, #0]
10008e34:	e7df      	b.n	10008df6 <_calloc_r+0x52>
10008e36:	0003      	movs	r3, r0
10008e38:	6104      	str	r4, [r0, #16]
10008e3a:	3318      	adds	r3, #24
10008e3c:	6144      	str	r4, [r0, #20]
10008e3e:	e7d6      	b.n	10008dee <_calloc_r+0x4a>

10008e40 <__errno>:
10008e40:	4b01      	ldr	r3, [pc, #4]	; (10008e48 <__errno+0x8>)
10008e42:	6818      	ldr	r0, [r3, #0]
10008e44:	4770      	bx	lr
10008e46:	46c0      	nop			; (mov r8, r8)
10008e48:	200021f4 	.word	0x200021f4

10008e4c <malloc>:
10008e4c:	b510      	push	{r4, lr}
10008e4e:	4b03      	ldr	r3, [pc, #12]	; (10008e5c <malloc+0x10>)
10008e50:	0001      	movs	r1, r0
10008e52:	6818      	ldr	r0, [r3, #0]
10008e54:	f000 f804 	bl	10008e60 <_malloc_r>
10008e58:	bd10      	pop	{r4, pc}
10008e5a:	46c0      	nop			; (mov r8, r8)
10008e5c:	200021f4 	.word	0x200021f4

10008e60 <_malloc_r>:
10008e60:	b5f0      	push	{r4, r5, r6, r7, lr}
10008e62:	464e      	mov	r6, r9
10008e64:	4645      	mov	r5, r8
10008e66:	46de      	mov	lr, fp
10008e68:	4657      	mov	r7, sl
10008e6a:	b5e0      	push	{r5, r6, r7, lr}
10008e6c:	000d      	movs	r5, r1
10008e6e:	350b      	adds	r5, #11
10008e70:	0006      	movs	r6, r0
10008e72:	b083      	sub	sp, #12
10008e74:	2d16      	cmp	r5, #22
10008e76:	d822      	bhi.n	10008ebe <_malloc_r+0x5e>
10008e78:	2910      	cmp	r1, #16
10008e7a:	d900      	bls.n	10008e7e <_malloc_r+0x1e>
10008e7c:	e0b2      	b.n	10008fe4 <_malloc_r+0x184>
10008e7e:	f000 fab1 	bl	100093e4 <__malloc_lock>
10008e82:	2510      	movs	r5, #16
10008e84:	2318      	movs	r3, #24
10008e86:	2002      	movs	r0, #2
10008e88:	4fcc      	ldr	r7, [pc, #816]	; (100091bc <_malloc_r+0x35c>)
10008e8a:	18fb      	adds	r3, r7, r3
10008e8c:	001a      	movs	r2, r3
10008e8e:	685c      	ldr	r4, [r3, #4]
10008e90:	3a08      	subs	r2, #8
10008e92:	4294      	cmp	r4, r2
10008e94:	d100      	bne.n	10008e98 <_malloc_r+0x38>
10008e96:	e0b5      	b.n	10009004 <_malloc_r+0x1a4>
10008e98:	2303      	movs	r3, #3
10008e9a:	6862      	ldr	r2, [r4, #4]
10008e9c:	439a      	bics	r2, r3
10008e9e:	0013      	movs	r3, r2
10008ea0:	68e2      	ldr	r2, [r4, #12]
10008ea2:	68a1      	ldr	r1, [r4, #8]
10008ea4:	60ca      	str	r2, [r1, #12]
10008ea6:	6091      	str	r1, [r2, #8]
10008ea8:	2201      	movs	r2, #1
10008eaa:	18e3      	adds	r3, r4, r3
10008eac:	6859      	ldr	r1, [r3, #4]
10008eae:	0030      	movs	r0, r6
10008eb0:	430a      	orrs	r2, r1
10008eb2:	605a      	str	r2, [r3, #4]
10008eb4:	f000 fa9e 	bl	100093f4 <__malloc_unlock>
10008eb8:	0020      	movs	r0, r4
10008eba:	3008      	adds	r0, #8
10008ebc:	e095      	b.n	10008fea <_malloc_r+0x18a>
10008ebe:	2307      	movs	r3, #7
10008ec0:	439d      	bics	r5, r3
10008ec2:	d500      	bpl.n	10008ec6 <_malloc_r+0x66>
10008ec4:	e08e      	b.n	10008fe4 <_malloc_r+0x184>
10008ec6:	42a9      	cmp	r1, r5
10008ec8:	d900      	bls.n	10008ecc <_malloc_r+0x6c>
10008eca:	e08b      	b.n	10008fe4 <_malloc_r+0x184>
10008ecc:	f000 fa8a 	bl	100093e4 <__malloc_lock>
10008ed0:	23fc      	movs	r3, #252	; 0xfc
10008ed2:	005b      	lsls	r3, r3, #1
10008ed4:	429d      	cmp	r5, r3
10008ed6:	d200      	bcs.n	10008eda <_malloc_r+0x7a>
10008ed8:	e1a7      	b.n	1000922a <_malloc_r+0x3ca>
10008eda:	0a68      	lsrs	r0, r5, #9
10008edc:	d100      	bne.n	10008ee0 <_malloc_r+0x80>
10008ede:	e08b      	b.n	10008ff8 <_malloc_r+0x198>
10008ee0:	2804      	cmp	r0, #4
10008ee2:	d900      	bls.n	10008ee6 <_malloc_r+0x86>
10008ee4:	e17a      	b.n	100091dc <_malloc_r+0x37c>
10008ee6:	2338      	movs	r3, #56	; 0x38
10008ee8:	4698      	mov	r8, r3
10008eea:	09a8      	lsrs	r0, r5, #6
10008eec:	4480      	add	r8, r0
10008eee:	3039      	adds	r0, #57	; 0x39
10008ef0:	00c1      	lsls	r1, r0, #3
10008ef2:	4fb2      	ldr	r7, [pc, #712]	; (100091bc <_malloc_r+0x35c>)
10008ef4:	1879      	adds	r1, r7, r1
10008ef6:	684c      	ldr	r4, [r1, #4]
10008ef8:	3908      	subs	r1, #8
10008efa:	42a1      	cmp	r1, r4
10008efc:	d00e      	beq.n	10008f1c <_malloc_r+0xbc>
10008efe:	2303      	movs	r3, #3
10008f00:	469c      	mov	ip, r3
10008f02:	e004      	b.n	10008f0e <_malloc_r+0xae>
10008f04:	2a00      	cmp	r2, #0
10008f06:	dacb      	bge.n	10008ea0 <_malloc_r+0x40>
10008f08:	68e4      	ldr	r4, [r4, #12]
10008f0a:	42a1      	cmp	r1, r4
10008f0c:	d006      	beq.n	10008f1c <_malloc_r+0xbc>
10008f0e:	4662      	mov	r2, ip
10008f10:	6863      	ldr	r3, [r4, #4]
10008f12:	4393      	bics	r3, r2
10008f14:	1b5a      	subs	r2, r3, r5
10008f16:	2a0f      	cmp	r2, #15
10008f18:	ddf4      	ble.n	10008f04 <_malloc_r+0xa4>
10008f1a:	4640      	mov	r0, r8
10008f1c:	003a      	movs	r2, r7
10008f1e:	693c      	ldr	r4, [r7, #16]
10008f20:	3208      	adds	r2, #8
10008f22:	4294      	cmp	r4, r2
10008f24:	d100      	bne.n	10008f28 <_malloc_r+0xc8>
10008f26:	e078      	b.n	1000901a <_malloc_r+0x1ba>
10008f28:	2303      	movs	r3, #3
10008f2a:	6861      	ldr	r1, [r4, #4]
10008f2c:	4399      	bics	r1, r3
10008f2e:	4689      	mov	r9, r1
10008f30:	000b      	movs	r3, r1
10008f32:	1b49      	subs	r1, r1, r5
10008f34:	290f      	cmp	r1, #15
10008f36:	dd00      	ble.n	10008f3a <_malloc_r+0xda>
10008f38:	e17b      	b.n	10009232 <_malloc_r+0x3d2>
10008f3a:	617a      	str	r2, [r7, #20]
10008f3c:	613a      	str	r2, [r7, #16]
10008f3e:	2900      	cmp	r1, #0
10008f40:	dab2      	bge.n	10008ea8 <_malloc_r+0x48>
10008f42:	2280      	movs	r2, #128	; 0x80
10008f44:	0092      	lsls	r2, r2, #2
10008f46:	4591      	cmp	r9, r2
10008f48:	d300      	bcc.n	10008f4c <_malloc_r+0xec>
10008f4a:	e10f      	b.n	1000916c <_malloc_r+0x30c>
10008f4c:	0959      	lsrs	r1, r3, #5
10008f4e:	08da      	lsrs	r2, r3, #3
10008f50:	2301      	movs	r3, #1
10008f52:	408b      	lsls	r3, r1
10008f54:	00d2      	lsls	r2, r2, #3
10008f56:	6879      	ldr	r1, [r7, #4]
10008f58:	19d2      	adds	r2, r2, r7
10008f5a:	430b      	orrs	r3, r1
10008f5c:	6891      	ldr	r1, [r2, #8]
10008f5e:	607b      	str	r3, [r7, #4]
10008f60:	60e2      	str	r2, [r4, #12]
10008f62:	60a1      	str	r1, [r4, #8]
10008f64:	6094      	str	r4, [r2, #8]
10008f66:	60cc      	str	r4, [r1, #12]
10008f68:	2101      	movs	r1, #1
10008f6a:	1082      	asrs	r2, r0, #2
10008f6c:	4091      	lsls	r1, r2
10008f6e:	4299      	cmp	r1, r3
10008f70:	d859      	bhi.n	10009026 <_malloc_r+0x1c6>
10008f72:	420b      	tst	r3, r1
10008f74:	d105      	bne.n	10008f82 <_malloc_r+0x122>
10008f76:	2203      	movs	r2, #3
10008f78:	4390      	bics	r0, r2
10008f7a:	0049      	lsls	r1, r1, #1
10008f7c:	3004      	adds	r0, #4
10008f7e:	420b      	tst	r3, r1
10008f80:	d0fb      	beq.n	10008f7a <_malloc_r+0x11a>
10008f82:	2303      	movs	r3, #3
10008f84:	4698      	mov	r8, r3
10008f86:	00c3      	lsls	r3, r0, #3
10008f88:	4699      	mov	r9, r3
10008f8a:	44b9      	add	r9, r7
10008f8c:	46cc      	mov	ip, r9
10008f8e:	4682      	mov	sl, r0
10008f90:	4663      	mov	r3, ip
10008f92:	68dc      	ldr	r4, [r3, #12]
10008f94:	45a4      	cmp	ip, r4
10008f96:	d107      	bne.n	10008fa8 <_malloc_r+0x148>
10008f98:	e12c      	b.n	100091f4 <_malloc_r+0x394>
10008f9a:	2a00      	cmp	r2, #0
10008f9c:	db00      	blt.n	10008fa0 <_malloc_r+0x140>
10008f9e:	e135      	b.n	1000920c <_malloc_r+0x3ac>
10008fa0:	68e4      	ldr	r4, [r4, #12]
10008fa2:	45a4      	cmp	ip, r4
10008fa4:	d100      	bne.n	10008fa8 <_malloc_r+0x148>
10008fa6:	e125      	b.n	100091f4 <_malloc_r+0x394>
10008fa8:	4642      	mov	r2, r8
10008faa:	6863      	ldr	r3, [r4, #4]
10008fac:	4393      	bics	r3, r2
10008fae:	1b5a      	subs	r2, r3, r5
10008fb0:	2a0f      	cmp	r2, #15
10008fb2:	ddf2      	ble.n	10008f9a <_malloc_r+0x13a>
10008fb4:	2001      	movs	r0, #1
10008fb6:	4680      	mov	r8, r0
10008fb8:	1961      	adds	r1, r4, r5
10008fba:	4305      	orrs	r5, r0
10008fbc:	6065      	str	r5, [r4, #4]
10008fbe:	68a0      	ldr	r0, [r4, #8]
10008fc0:	68e5      	ldr	r5, [r4, #12]
10008fc2:	3708      	adds	r7, #8
10008fc4:	60c5      	str	r5, [r0, #12]
10008fc6:	60a8      	str	r0, [r5, #8]
10008fc8:	4640      	mov	r0, r8
10008fca:	4310      	orrs	r0, r2
10008fcc:	60f9      	str	r1, [r7, #12]
10008fce:	60b9      	str	r1, [r7, #8]
10008fd0:	6048      	str	r0, [r1, #4]
10008fd2:	60cf      	str	r7, [r1, #12]
10008fd4:	0030      	movs	r0, r6
10008fd6:	608f      	str	r7, [r1, #8]
10008fd8:	50e2      	str	r2, [r4, r3]
10008fda:	f000 fa0b 	bl	100093f4 <__malloc_unlock>
10008fde:	0020      	movs	r0, r4
10008fe0:	3008      	adds	r0, #8
10008fe2:	e002      	b.n	10008fea <_malloc_r+0x18a>
10008fe4:	230c      	movs	r3, #12
10008fe6:	2000      	movs	r0, #0
10008fe8:	6033      	str	r3, [r6, #0]
10008fea:	b003      	add	sp, #12
10008fec:	bcf0      	pop	{r4, r5, r6, r7}
10008fee:	46bb      	mov	fp, r7
10008ff0:	46b2      	mov	sl, r6
10008ff2:	46a9      	mov	r9, r5
10008ff4:	46a0      	mov	r8, r4
10008ff6:	bdf0      	pop	{r4, r5, r6, r7, pc}
10008ff8:	2180      	movs	r1, #128	; 0x80
10008ffa:	233f      	movs	r3, #63	; 0x3f
10008ffc:	2040      	movs	r0, #64	; 0x40
10008ffe:	4698      	mov	r8, r3
10009000:	0089      	lsls	r1, r1, #2
10009002:	e776      	b.n	10008ef2 <_malloc_r+0x92>
10009004:	68dc      	ldr	r4, [r3, #12]
10009006:	3002      	adds	r0, #2
10009008:	42a3      	cmp	r3, r4
1000900a:	d000      	beq.n	1000900e <_malloc_r+0x1ae>
1000900c:	e744      	b.n	10008e98 <_malloc_r+0x38>
1000900e:	003a      	movs	r2, r7
10009010:	693c      	ldr	r4, [r7, #16]
10009012:	3208      	adds	r2, #8
10009014:	4294      	cmp	r4, r2
10009016:	d000      	beq.n	1000901a <_malloc_r+0x1ba>
10009018:	e786      	b.n	10008f28 <_malloc_r+0xc8>
1000901a:	2101      	movs	r1, #1
1000901c:	687b      	ldr	r3, [r7, #4]
1000901e:	1082      	asrs	r2, r0, #2
10009020:	4091      	lsls	r1, r2
10009022:	4299      	cmp	r1, r3
10009024:	d9a5      	bls.n	10008f72 <_malloc_r+0x112>
10009026:	2303      	movs	r3, #3
10009028:	68bc      	ldr	r4, [r7, #8]
1000902a:	6862      	ldr	r2, [r4, #4]
1000902c:	439a      	bics	r2, r3
1000902e:	4691      	mov	r9, r2
10009030:	4295      	cmp	r5, r2
10009032:	d803      	bhi.n	1000903c <_malloc_r+0x1dc>
10009034:	1b53      	subs	r3, r2, r5
10009036:	2b0f      	cmp	r3, #15
10009038:	dd00      	ble.n	1000903c <_malloc_r+0x1dc>
1000903a:	e089      	b.n	10009150 <_malloc_r+0x2f0>
1000903c:	0023      	movs	r3, r4
1000903e:	444b      	add	r3, r9
10009040:	4a5f      	ldr	r2, [pc, #380]	; (100091c0 <_malloc_r+0x360>)
10009042:	9301      	str	r3, [sp, #4]
10009044:	4b5f      	ldr	r3, [pc, #380]	; (100091c4 <_malloc_r+0x364>)
10009046:	4693      	mov	fp, r2
10009048:	681b      	ldr	r3, [r3, #0]
1000904a:	6812      	ldr	r2, [r2, #0]
1000904c:	18eb      	adds	r3, r5, r3
1000904e:	3201      	adds	r2, #1
10009050:	d100      	bne.n	10009054 <_malloc_r+0x1f4>
10009052:	e13d      	b.n	100092d0 <_malloc_r+0x470>
10009054:	4a5c      	ldr	r2, [pc, #368]	; (100091c8 <_malloc_r+0x368>)
10009056:	4694      	mov	ip, r2
10009058:	4463      	add	r3, ip
1000905a:	0b1b      	lsrs	r3, r3, #12
1000905c:	031b      	lsls	r3, r3, #12
1000905e:	9300      	str	r3, [sp, #0]
10009060:	0030      	movs	r0, r6
10009062:	9900      	ldr	r1, [sp, #0]
10009064:	f000 f9ce 	bl	10009404 <_sbrk_r>
10009068:	0003      	movs	r3, r0
1000906a:	4680      	mov	r8, r0
1000906c:	3301      	adds	r3, #1
1000906e:	d100      	bne.n	10009072 <_malloc_r+0x212>
10009070:	e0fa      	b.n	10009268 <_malloc_r+0x408>
10009072:	9b01      	ldr	r3, [sp, #4]
10009074:	4283      	cmp	r3, r0
10009076:	d900      	bls.n	1000907a <_malloc_r+0x21a>
10009078:	e0f4      	b.n	10009264 <_malloc_r+0x404>
1000907a:	4b54      	ldr	r3, [pc, #336]	; (100091cc <_malloc_r+0x36c>)
1000907c:	9800      	ldr	r0, [sp, #0]
1000907e:	001a      	movs	r2, r3
10009080:	469a      	mov	sl, r3
10009082:	6812      	ldr	r2, [r2, #0]
10009084:	0003      	movs	r3, r0
10009086:	4694      	mov	ip, r2
10009088:	4651      	mov	r1, sl
1000908a:	4463      	add	r3, ip
1000908c:	600b      	str	r3, [r1, #0]
1000908e:	9901      	ldr	r1, [sp, #4]
10009090:	001a      	movs	r2, r3
10009092:	4541      	cmp	r1, r8
10009094:	d100      	bne.n	10009098 <_malloc_r+0x238>
10009096:	e151      	b.n	1000933c <_malloc_r+0x4dc>
10009098:	465b      	mov	r3, fp
1000909a:	681b      	ldr	r3, [r3, #0]
1000909c:	3301      	adds	r3, #1
1000909e:	d100      	bne.n	100090a2 <_malloc_r+0x242>
100090a0:	e156      	b.n	10009350 <_malloc_r+0x4f0>
100090a2:	4643      	mov	r3, r8
100090a4:	9901      	ldr	r1, [sp, #4]
100090a6:	1a5b      	subs	r3, r3, r1
100090a8:	189a      	adds	r2, r3, r2
100090aa:	4653      	mov	r3, sl
100090ac:	601a      	str	r2, [r3, #0]
100090ae:	2307      	movs	r3, #7
100090b0:	4642      	mov	r2, r8
100090b2:	4641      	mov	r1, r8
100090b4:	401a      	ands	r2, r3
100090b6:	9201      	str	r2, [sp, #4]
100090b8:	4219      	tst	r1, r3
100090ba:	d100      	bne.n	100090be <_malloc_r+0x25e>
100090bc:	e112      	b.n	100092e4 <_malloc_r+0x484>
100090be:	2308      	movs	r3, #8
100090c0:	4698      	mov	r8, r3
100090c2:	1a88      	subs	r0, r1, r2
100090c4:	4b42      	ldr	r3, [pc, #264]	; (100091d0 <_malloc_r+0x370>)
100090c6:	9900      	ldr	r1, [sp, #0]
100090c8:	4480      	add	r8, r0
100090ca:	4441      	add	r1, r8
100090cc:	1a9b      	subs	r3, r3, r2
100090ce:	1a5b      	subs	r3, r3, r1
100090d0:	051b      	lsls	r3, r3, #20
100090d2:	0d1b      	lsrs	r3, r3, #20
100090d4:	9100      	str	r1, [sp, #0]
100090d6:	0030      	movs	r0, r6
100090d8:	0019      	movs	r1, r3
100090da:	469b      	mov	fp, r3
100090dc:	f000 f992 	bl	10009404 <_sbrk_r>
100090e0:	1c43      	adds	r3, r0, #1
100090e2:	d100      	bne.n	100090e6 <_malloc_r+0x286>
100090e4:	e150      	b.n	10009388 <_malloc_r+0x528>
100090e6:	4643      	mov	r3, r8
100090e8:	1ac0      	subs	r0, r0, r3
100090ea:	0003      	movs	r3, r0
100090ec:	445b      	add	r3, fp
100090ee:	9300      	str	r3, [sp, #0]
100090f0:	4653      	mov	r3, sl
100090f2:	4652      	mov	r2, sl
100090f4:	681b      	ldr	r3, [r3, #0]
100090f6:	2101      	movs	r1, #1
100090f8:	445b      	add	r3, fp
100090fa:	6013      	str	r3, [r2, #0]
100090fc:	4642      	mov	r2, r8
100090fe:	4640      	mov	r0, r8
10009100:	60ba      	str	r2, [r7, #8]
10009102:	9a00      	ldr	r2, [sp, #0]
10009104:	430a      	orrs	r2, r1
10009106:	6042      	str	r2, [r0, #4]
10009108:	42bc      	cmp	r4, r7
1000910a:	d100      	bne.n	1000910e <_malloc_r+0x2ae>
1000910c:	e124      	b.n	10009358 <_malloc_r+0x4f8>
1000910e:	464a      	mov	r2, r9
10009110:	2a0f      	cmp	r2, #15
10009112:	d800      	bhi.n	10009116 <_malloc_r+0x2b6>
10009114:	e122      	b.n	1000935c <_malloc_r+0x4fc>
10009116:	2007      	movs	r0, #7
10009118:	3a0c      	subs	r2, #12
1000911a:	4382      	bics	r2, r0
1000911c:	6860      	ldr	r0, [r4, #4]
1000911e:	4001      	ands	r1, r0
10009120:	2005      	movs	r0, #5
10009122:	4311      	orrs	r1, r2
10009124:	6061      	str	r1, [r4, #4]
10009126:	18a1      	adds	r1, r4, r2
10009128:	6048      	str	r0, [r1, #4]
1000912a:	6088      	str	r0, [r1, #8]
1000912c:	2a0f      	cmp	r2, #15
1000912e:	d900      	bls.n	10009132 <_malloc_r+0x2d2>
10009130:	e135      	b.n	1000939e <_malloc_r+0x53e>
10009132:	4642      	mov	r2, r8
10009134:	4644      	mov	r4, r8
10009136:	6852      	ldr	r2, [r2, #4]
10009138:	4926      	ldr	r1, [pc, #152]	; (100091d4 <_malloc_r+0x374>)
1000913a:	6808      	ldr	r0, [r1, #0]
1000913c:	4298      	cmp	r0, r3
1000913e:	d200      	bcs.n	10009142 <_malloc_r+0x2e2>
10009140:	600b      	str	r3, [r1, #0]
10009142:	4925      	ldr	r1, [pc, #148]	; (100091d8 <_malloc_r+0x378>)
10009144:	6808      	ldr	r0, [r1, #0]
10009146:	4298      	cmp	r0, r3
10009148:	d300      	bcc.n	1000914c <_malloc_r+0x2ec>
1000914a:	e08f      	b.n	1000926c <_malloc_r+0x40c>
1000914c:	600b      	str	r3, [r1, #0]
1000914e:	e08d      	b.n	1000926c <_malloc_r+0x40c>
10009150:	2201      	movs	r2, #1
10009152:	0029      	movs	r1, r5
10009154:	4313      	orrs	r3, r2
10009156:	4311      	orrs	r1, r2
10009158:	1965      	adds	r5, r4, r5
1000915a:	6061      	str	r1, [r4, #4]
1000915c:	0030      	movs	r0, r6
1000915e:	60bd      	str	r5, [r7, #8]
10009160:	606b      	str	r3, [r5, #4]
10009162:	f000 f947 	bl	100093f4 <__malloc_unlock>
10009166:	0020      	movs	r0, r4
10009168:	3008      	adds	r0, #8
1000916a:	e73e      	b.n	10008fea <_malloc_r+0x18a>
1000916c:	0a5a      	lsrs	r2, r3, #9
1000916e:	2a04      	cmp	r2, #4
10009170:	d972      	bls.n	10009258 <_malloc_r+0x3f8>
10009172:	2a14      	cmp	r2, #20
10009174:	d900      	bls.n	10009178 <_malloc_r+0x318>
10009176:	e0c5      	b.n	10009304 <_malloc_r+0x4a4>
10009178:	0011      	movs	r1, r2
1000917a:	325c      	adds	r2, #92	; 0x5c
1000917c:	315b      	adds	r1, #91	; 0x5b
1000917e:	00d2      	lsls	r2, r2, #3
10009180:	2308      	movs	r3, #8
10009182:	425b      	negs	r3, r3
10009184:	469c      	mov	ip, r3
10009186:	18ba      	adds	r2, r7, r2
10009188:	4494      	add	ip, r2
1000918a:	4663      	mov	r3, ip
1000918c:	689a      	ldr	r2, [r3, #8]
1000918e:	2303      	movs	r3, #3
10009190:	4698      	mov	r8, r3
10009192:	4594      	cmp	ip, r2
10009194:	d100      	bne.n	10009198 <_malloc_r+0x338>
10009196:	e09e      	b.n	100092d6 <_malloc_r+0x476>
10009198:	4643      	mov	r3, r8
1000919a:	6851      	ldr	r1, [r2, #4]
1000919c:	4399      	bics	r1, r3
1000919e:	4549      	cmp	r1, r9
100091a0:	d902      	bls.n	100091a8 <_malloc_r+0x348>
100091a2:	6892      	ldr	r2, [r2, #8]
100091a4:	4594      	cmp	ip, r2
100091a6:	d1f7      	bne.n	10009198 <_malloc_r+0x338>
100091a8:	68d3      	ldr	r3, [r2, #12]
100091aa:	469c      	mov	ip, r3
100091ac:	687b      	ldr	r3, [r7, #4]
100091ae:	4661      	mov	r1, ip
100091b0:	60a2      	str	r2, [r4, #8]
100091b2:	60e1      	str	r1, [r4, #12]
100091b4:	608c      	str	r4, [r1, #8]
100091b6:	60d4      	str	r4, [r2, #12]
100091b8:	e6d6      	b.n	10008f68 <_malloc_r+0x108>
100091ba:	46c0      	nop			; (mov r8, r8)
100091bc:	20002620 	.word	0x20002620
100091c0:	20002a28 	.word	0x20002a28
100091c4:	20038f44 	.word	0x20038f44
100091c8:	0000100f 	.word	0x0000100f
100091cc:	20038f14 	.word	0x20038f14
100091d0:	00001008 	.word	0x00001008
100091d4:	20038f3c 	.word	0x20038f3c
100091d8:	20038f40 	.word	0x20038f40
100091dc:	2814      	cmp	r0, #20
100091de:	d952      	bls.n	10009286 <_malloc_r+0x426>
100091e0:	2854      	cmp	r0, #84	; 0x54
100091e2:	d900      	bls.n	100091e6 <_malloc_r+0x386>
100091e4:	e096      	b.n	10009314 <_malloc_r+0x4b4>
100091e6:	236e      	movs	r3, #110	; 0x6e
100091e8:	4698      	mov	r8, r3
100091ea:	0b28      	lsrs	r0, r5, #12
100091ec:	4480      	add	r8, r0
100091ee:	306f      	adds	r0, #111	; 0x6f
100091f0:	00c1      	lsls	r1, r0, #3
100091f2:	e67e      	b.n	10008ef2 <_malloc_r+0x92>
100091f4:	2308      	movs	r3, #8
100091f6:	469b      	mov	fp, r3
100091f8:	3b07      	subs	r3, #7
100091fa:	44dc      	add	ip, fp
100091fc:	469b      	mov	fp, r3
100091fe:	44da      	add	sl, fp
10009200:	4643      	mov	r3, r8
10009202:	4652      	mov	r2, sl
10009204:	4213      	tst	r3, r2
10009206:	d000      	beq.n	1000920a <_malloc_r+0x3aa>
10009208:	e6c2      	b.n	10008f90 <_malloc_r+0x130>
1000920a:	e04c      	b.n	100092a6 <_malloc_r+0x446>
1000920c:	2201      	movs	r2, #1
1000920e:	18e3      	adds	r3, r4, r3
10009210:	6859      	ldr	r1, [r3, #4]
10009212:	0030      	movs	r0, r6
10009214:	430a      	orrs	r2, r1
10009216:	605a      	str	r2, [r3, #4]
10009218:	68e3      	ldr	r3, [r4, #12]
1000921a:	68a2      	ldr	r2, [r4, #8]
1000921c:	60d3      	str	r3, [r2, #12]
1000921e:	609a      	str	r2, [r3, #8]
10009220:	f000 f8e8 	bl	100093f4 <__malloc_unlock>
10009224:	0020      	movs	r0, r4
10009226:	3008      	adds	r0, #8
10009228:	e6df      	b.n	10008fea <_malloc_r+0x18a>
1000922a:	002b      	movs	r3, r5
1000922c:	08e8      	lsrs	r0, r5, #3
1000922e:	3308      	adds	r3, #8
10009230:	e62a      	b.n	10008e88 <_malloc_r+0x28>
10009232:	2301      	movs	r3, #1
10009234:	1960      	adds	r0, r4, r5
10009236:	431d      	orrs	r5, r3
10009238:	6065      	str	r5, [r4, #4]
1000923a:	6178      	str	r0, [r7, #20]
1000923c:	6138      	str	r0, [r7, #16]
1000923e:	60c2      	str	r2, [r0, #12]
10009240:	6082      	str	r2, [r0, #8]
10009242:	001a      	movs	r2, r3
10009244:	464b      	mov	r3, r9
10009246:	430a      	orrs	r2, r1
10009248:	6042      	str	r2, [r0, #4]
1000924a:	0030      	movs	r0, r6
1000924c:	50e1      	str	r1, [r4, r3]
1000924e:	f000 f8d1 	bl	100093f4 <__malloc_unlock>
10009252:	0020      	movs	r0, r4
10009254:	3008      	adds	r0, #8
10009256:	e6c8      	b.n	10008fea <_malloc_r+0x18a>
10009258:	099a      	lsrs	r2, r3, #6
1000925a:	0011      	movs	r1, r2
1000925c:	3239      	adds	r2, #57	; 0x39
1000925e:	3138      	adds	r1, #56	; 0x38
10009260:	00d2      	lsls	r2, r2, #3
10009262:	e78d      	b.n	10009180 <_malloc_r+0x320>
10009264:	42bc      	cmp	r4, r7
10009266:	d060      	beq.n	1000932a <_malloc_r+0x4ca>
10009268:	68bc      	ldr	r4, [r7, #8]
1000926a:	6862      	ldr	r2, [r4, #4]
1000926c:	2303      	movs	r3, #3
1000926e:	439a      	bics	r2, r3
10009270:	1b53      	subs	r3, r2, r5
10009272:	4295      	cmp	r5, r2
10009274:	d802      	bhi.n	1000927c <_malloc_r+0x41c>
10009276:	2b0f      	cmp	r3, #15
10009278:	dd00      	ble.n	1000927c <_malloc_r+0x41c>
1000927a:	e769      	b.n	10009150 <_malloc_r+0x2f0>
1000927c:	0030      	movs	r0, r6
1000927e:	f000 f8b9 	bl	100093f4 <__malloc_unlock>
10009282:	2000      	movs	r0, #0
10009284:	e6b1      	b.n	10008fea <_malloc_r+0x18a>
10009286:	235b      	movs	r3, #91	; 0x5b
10009288:	4698      	mov	r8, r3
1000928a:	4480      	add	r8, r0
1000928c:	305c      	adds	r0, #92	; 0x5c
1000928e:	00c1      	lsls	r1, r0, #3
10009290:	e62f      	b.n	10008ef2 <_malloc_r+0x92>
10009292:	2308      	movs	r3, #8
10009294:	425b      	negs	r3, r3
10009296:	469c      	mov	ip, r3
10009298:	44e1      	add	r9, ip
1000929a:	464b      	mov	r3, r9
1000929c:	689b      	ldr	r3, [r3, #8]
1000929e:	3801      	subs	r0, #1
100092a0:	454b      	cmp	r3, r9
100092a2:	d000      	beq.n	100092a6 <_malloc_r+0x446>
100092a4:	e098      	b.n	100093d8 <_malloc_r+0x578>
100092a6:	4643      	mov	r3, r8
100092a8:	4203      	tst	r3, r0
100092aa:	d1f2      	bne.n	10009292 <_malloc_r+0x432>
100092ac:	687b      	ldr	r3, [r7, #4]
100092ae:	438b      	bics	r3, r1
100092b0:	607b      	str	r3, [r7, #4]
100092b2:	0049      	lsls	r1, r1, #1
100092b4:	4299      	cmp	r1, r3
100092b6:	d900      	bls.n	100092ba <_malloc_r+0x45a>
100092b8:	e6b5      	b.n	10009026 <_malloc_r+0x1c6>
100092ba:	2900      	cmp	r1, #0
100092bc:	d104      	bne.n	100092c8 <_malloc_r+0x468>
100092be:	e6b2      	b.n	10009026 <_malloc_r+0x1c6>
100092c0:	2204      	movs	r2, #4
100092c2:	4694      	mov	ip, r2
100092c4:	0049      	lsls	r1, r1, #1
100092c6:	44e2      	add	sl, ip
100092c8:	420b      	tst	r3, r1
100092ca:	d0f9      	beq.n	100092c0 <_malloc_r+0x460>
100092cc:	4650      	mov	r0, sl
100092ce:	e65a      	b.n	10008f86 <_malloc_r+0x126>
100092d0:	3310      	adds	r3, #16
100092d2:	9300      	str	r3, [sp, #0]
100092d4:	e6c4      	b.n	10009060 <_malloc_r+0x200>
100092d6:	1089      	asrs	r1, r1, #2
100092d8:	3b02      	subs	r3, #2
100092da:	408b      	lsls	r3, r1
100092dc:	6879      	ldr	r1, [r7, #4]
100092de:	430b      	orrs	r3, r1
100092e0:	607b      	str	r3, [r7, #4]
100092e2:	e764      	b.n	100091ae <_malloc_r+0x34e>
100092e4:	9b00      	ldr	r3, [sp, #0]
100092e6:	0030      	movs	r0, r6
100092e8:	4443      	add	r3, r8
100092ea:	425b      	negs	r3, r3
100092ec:	051b      	lsls	r3, r3, #20
100092ee:	0d1b      	lsrs	r3, r3, #20
100092f0:	0019      	movs	r1, r3
100092f2:	469b      	mov	fp, r3
100092f4:	f000 f886 	bl	10009404 <_sbrk_r>
100092f8:	1c43      	adds	r3, r0, #1
100092fa:	d000      	beq.n	100092fe <_malloc_r+0x49e>
100092fc:	e6f3      	b.n	100090e6 <_malloc_r+0x286>
100092fe:	2300      	movs	r3, #0
10009300:	469b      	mov	fp, r3
10009302:	e6f5      	b.n	100090f0 <_malloc_r+0x290>
10009304:	2a54      	cmp	r2, #84	; 0x54
10009306:	d82b      	bhi.n	10009360 <_malloc_r+0x500>
10009308:	0b1a      	lsrs	r2, r3, #12
1000930a:	0011      	movs	r1, r2
1000930c:	326f      	adds	r2, #111	; 0x6f
1000930e:	316e      	adds	r1, #110	; 0x6e
10009310:	00d2      	lsls	r2, r2, #3
10009312:	e735      	b.n	10009180 <_malloc_r+0x320>
10009314:	23aa      	movs	r3, #170	; 0xaa
10009316:	005b      	lsls	r3, r3, #1
10009318:	4298      	cmp	r0, r3
1000931a:	d82b      	bhi.n	10009374 <_malloc_r+0x514>
1000931c:	3bdd      	subs	r3, #221	; 0xdd
1000931e:	4698      	mov	r8, r3
10009320:	0be8      	lsrs	r0, r5, #15
10009322:	4480      	add	r8, r0
10009324:	3078      	adds	r0, #120	; 0x78
10009326:	00c1      	lsls	r1, r0, #3
10009328:	e5e3      	b.n	10008ef2 <_malloc_r+0x92>
1000932a:	4b2c      	ldr	r3, [pc, #176]	; (100093dc <_malloc_r+0x57c>)
1000932c:	9a00      	ldr	r2, [sp, #0]
1000932e:	469a      	mov	sl, r3
10009330:	681b      	ldr	r3, [r3, #0]
10009332:	469c      	mov	ip, r3
10009334:	4653      	mov	r3, sl
10009336:	4462      	add	r2, ip
10009338:	601a      	str	r2, [r3, #0]
1000933a:	e6ad      	b.n	10009098 <_malloc_r+0x238>
1000933c:	0509      	lsls	r1, r1, #20
1000933e:	d000      	beq.n	10009342 <_malloc_r+0x4e2>
10009340:	e6aa      	b.n	10009098 <_malloc_r+0x238>
10009342:	0002      	movs	r2, r0
10009344:	68bc      	ldr	r4, [r7, #8]
10009346:	444a      	add	r2, r9
10009348:	3101      	adds	r1, #1
1000934a:	430a      	orrs	r2, r1
1000934c:	6062      	str	r2, [r4, #4]
1000934e:	e6f3      	b.n	10009138 <_malloc_r+0x2d8>
10009350:	465b      	mov	r3, fp
10009352:	4642      	mov	r2, r8
10009354:	601a      	str	r2, [r3, #0]
10009356:	e6aa      	b.n	100090ae <_malloc_r+0x24e>
10009358:	4644      	mov	r4, r8
1000935a:	e6ed      	b.n	10009138 <_malloc_r+0x2d8>
1000935c:	6041      	str	r1, [r0, #4]
1000935e:	e78d      	b.n	1000927c <_malloc_r+0x41c>
10009360:	21aa      	movs	r1, #170	; 0xaa
10009362:	0049      	lsls	r1, r1, #1
10009364:	428a      	cmp	r2, r1
10009366:	d824      	bhi.n	100093b2 <_malloc_r+0x552>
10009368:	0bda      	lsrs	r2, r3, #15
1000936a:	0011      	movs	r1, r2
1000936c:	3278      	adds	r2, #120	; 0x78
1000936e:	3177      	adds	r1, #119	; 0x77
10009370:	00d2      	lsls	r2, r2, #3
10009372:	e705      	b.n	10009180 <_malloc_r+0x320>
10009374:	4b1a      	ldr	r3, [pc, #104]	; (100093e0 <_malloc_r+0x580>)
10009376:	4298      	cmp	r0, r3
10009378:	d824      	bhi.n	100093c4 <_malloc_r+0x564>
1000937a:	237c      	movs	r3, #124	; 0x7c
1000937c:	4698      	mov	r8, r3
1000937e:	0ca8      	lsrs	r0, r5, #18
10009380:	4480      	add	r8, r0
10009382:	307d      	adds	r0, #125	; 0x7d
10009384:	00c1      	lsls	r1, r0, #3
10009386:	e5b4      	b.n	10008ef2 <_malloc_r+0x92>
10009388:	9a00      	ldr	r2, [sp, #0]
1000938a:	9b01      	ldr	r3, [sp, #4]
1000938c:	4694      	mov	ip, r2
1000938e:	4642      	mov	r2, r8
10009390:	3b08      	subs	r3, #8
10009392:	4463      	add	r3, ip
10009394:	1a9b      	subs	r3, r3, r2
10009396:	9300      	str	r3, [sp, #0]
10009398:	2300      	movs	r3, #0
1000939a:	469b      	mov	fp, r3
1000939c:	e6a8      	b.n	100090f0 <_malloc_r+0x290>
1000939e:	0021      	movs	r1, r4
100093a0:	0030      	movs	r0, r6
100093a2:	3108      	adds	r1, #8
100093a4:	f000 f8bc 	bl	10009520 <_free_r>
100093a8:	4653      	mov	r3, sl
100093aa:	68bc      	ldr	r4, [r7, #8]
100093ac:	681b      	ldr	r3, [r3, #0]
100093ae:	6862      	ldr	r2, [r4, #4]
100093b0:	e6c2      	b.n	10009138 <_malloc_r+0x2d8>
100093b2:	490b      	ldr	r1, [pc, #44]	; (100093e0 <_malloc_r+0x580>)
100093b4:	428a      	cmp	r2, r1
100093b6:	d80b      	bhi.n	100093d0 <_malloc_r+0x570>
100093b8:	0c9a      	lsrs	r2, r3, #18
100093ba:	0011      	movs	r1, r2
100093bc:	327d      	adds	r2, #125	; 0x7d
100093be:	317c      	adds	r1, #124	; 0x7c
100093c0:	00d2      	lsls	r2, r2, #3
100093c2:	e6dd      	b.n	10009180 <_malloc_r+0x320>
100093c4:	21fe      	movs	r1, #254	; 0xfe
100093c6:	237e      	movs	r3, #126	; 0x7e
100093c8:	207f      	movs	r0, #127	; 0x7f
100093ca:	4698      	mov	r8, r3
100093cc:	0089      	lsls	r1, r1, #2
100093ce:	e590      	b.n	10008ef2 <_malloc_r+0x92>
100093d0:	22fe      	movs	r2, #254	; 0xfe
100093d2:	217e      	movs	r1, #126	; 0x7e
100093d4:	0092      	lsls	r2, r2, #2
100093d6:	e6d3      	b.n	10009180 <_malloc_r+0x320>
100093d8:	687b      	ldr	r3, [r7, #4]
100093da:	e76a      	b.n	100092b2 <_malloc_r+0x452>
100093dc:	20038f14 	.word	0x20038f14
100093e0:	00000554 	.word	0x00000554

100093e4 <__malloc_lock>:
100093e4:	b510      	push	{r4, lr}
100093e6:	4802      	ldr	r0, [pc, #8]	; (100093f0 <__malloc_lock+0xc>)
100093e8:	f000 f97c 	bl	100096e4 <__retarget_lock_acquire_recursive>
100093ec:	bd10      	pop	{r4, pc}
100093ee:	46c0      	nop			; (mov r8, r8)
100093f0:	20038f10 	.word	0x20038f10

100093f4 <__malloc_unlock>:
100093f4:	b510      	push	{r4, lr}
100093f6:	4802      	ldr	r0, [pc, #8]	; (10009400 <__malloc_unlock+0xc>)
100093f8:	f000 f976 	bl	100096e8 <__retarget_lock_release_recursive>
100093fc:	bd10      	pop	{r4, pc}
100093fe:	46c0      	nop			; (mov r8, r8)
10009400:	20038f10 	.word	0x20038f10

10009404 <_sbrk_r>:
10009404:	2300      	movs	r3, #0
10009406:	b570      	push	{r4, r5, r6, lr}
10009408:	4d06      	ldr	r5, [pc, #24]	; (10009424 <_sbrk_r+0x20>)
1000940a:	0004      	movs	r4, r0
1000940c:	0008      	movs	r0, r1
1000940e:	602b      	str	r3, [r5, #0]
10009410:	f7fa fbb4 	bl	10003b7c <_sbrk>
10009414:	1c43      	adds	r3, r0, #1
10009416:	d000      	beq.n	1000941a <_sbrk_r+0x16>
10009418:	bd70      	pop	{r4, r5, r6, pc}
1000941a:	682b      	ldr	r3, [r5, #0]
1000941c:	2b00      	cmp	r3, #0
1000941e:	d0fb      	beq.n	10009418 <_sbrk_r+0x14>
10009420:	6023      	str	r3, [r4, #0]
10009422:	e7f9      	b.n	10009418 <_sbrk_r+0x14>
10009424:	200394ec 	.word	0x200394ec

10009428 <strlen>:
10009428:	b510      	push	{r4, lr}
1000942a:	0783      	lsls	r3, r0, #30
1000942c:	d00a      	beq.n	10009444 <strlen+0x1c>
1000942e:	0003      	movs	r3, r0
10009430:	2103      	movs	r1, #3
10009432:	e002      	b.n	1000943a <strlen+0x12>
10009434:	3301      	adds	r3, #1
10009436:	420b      	tst	r3, r1
10009438:	d005      	beq.n	10009446 <strlen+0x1e>
1000943a:	781a      	ldrb	r2, [r3, #0]
1000943c:	2a00      	cmp	r2, #0
1000943e:	d1f9      	bne.n	10009434 <strlen+0xc>
10009440:	1a18      	subs	r0, r3, r0
10009442:	bd10      	pop	{r4, pc}
10009444:	0003      	movs	r3, r0
10009446:	6819      	ldr	r1, [r3, #0]
10009448:	4a0c      	ldr	r2, [pc, #48]	; (1000947c <strlen+0x54>)
1000944a:	4c0d      	ldr	r4, [pc, #52]	; (10009480 <strlen+0x58>)
1000944c:	188a      	adds	r2, r1, r2
1000944e:	438a      	bics	r2, r1
10009450:	4222      	tst	r2, r4
10009452:	d10f      	bne.n	10009474 <strlen+0x4c>
10009454:	6859      	ldr	r1, [r3, #4]
10009456:	4a09      	ldr	r2, [pc, #36]	; (1000947c <strlen+0x54>)
10009458:	3304      	adds	r3, #4
1000945a:	188a      	adds	r2, r1, r2
1000945c:	438a      	bics	r2, r1
1000945e:	4222      	tst	r2, r4
10009460:	d108      	bne.n	10009474 <strlen+0x4c>
10009462:	6859      	ldr	r1, [r3, #4]
10009464:	4a05      	ldr	r2, [pc, #20]	; (1000947c <strlen+0x54>)
10009466:	3304      	adds	r3, #4
10009468:	188a      	adds	r2, r1, r2
1000946a:	438a      	bics	r2, r1
1000946c:	4222      	tst	r2, r4
1000946e:	d0f1      	beq.n	10009454 <strlen+0x2c>
10009470:	e000      	b.n	10009474 <strlen+0x4c>
10009472:	3301      	adds	r3, #1
10009474:	781a      	ldrb	r2, [r3, #0]
10009476:	2a00      	cmp	r2, #0
10009478:	d1fb      	bne.n	10009472 <strlen+0x4a>
1000947a:	e7e1      	b.n	10009440 <strlen+0x18>
1000947c:	fefefeff 	.word	0xfefefeff
10009480:	80808080 	.word	0x80808080

10009484 <_malloc_trim_r>:
10009484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10009486:	000c      	movs	r4, r1
10009488:	0005      	movs	r5, r0
1000948a:	f7ff ffab 	bl	100093e4 <__malloc_lock>
1000948e:	4f20      	ldr	r7, [pc, #128]	; (10009510 <_malloc_trim_r+0x8c>)
10009490:	68bb      	ldr	r3, [r7, #8]
10009492:	685e      	ldr	r6, [r3, #4]
10009494:	2303      	movs	r3, #3
10009496:	439e      	bics	r6, r3
10009498:	4b1e      	ldr	r3, [pc, #120]	; (10009514 <_malloc_trim_r+0x90>)
1000949a:	1b34      	subs	r4, r6, r4
1000949c:	469c      	mov	ip, r3
1000949e:	4464      	add	r4, ip
100094a0:	0b24      	lsrs	r4, r4, #12
100094a2:	3c01      	subs	r4, #1
100094a4:	3311      	adds	r3, #17
100094a6:	0324      	lsls	r4, r4, #12
100094a8:	429c      	cmp	r4, r3
100094aa:	db07      	blt.n	100094bc <_malloc_trim_r+0x38>
100094ac:	2100      	movs	r1, #0
100094ae:	0028      	movs	r0, r5
100094b0:	f7ff ffa8 	bl	10009404 <_sbrk_r>
100094b4:	68bb      	ldr	r3, [r7, #8]
100094b6:	199b      	adds	r3, r3, r6
100094b8:	4298      	cmp	r0, r3
100094ba:	d004      	beq.n	100094c6 <_malloc_trim_r+0x42>
100094bc:	0028      	movs	r0, r5
100094be:	f7ff ff99 	bl	100093f4 <__malloc_unlock>
100094c2:	2000      	movs	r0, #0
100094c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100094c6:	0028      	movs	r0, r5
100094c8:	4261      	negs	r1, r4
100094ca:	f7ff ff9b 	bl	10009404 <_sbrk_r>
100094ce:	1c43      	adds	r3, r0, #1
100094d0:	d00d      	beq.n	100094ee <_malloc_trim_r+0x6a>
100094d2:	2201      	movs	r2, #1
100094d4:	68bb      	ldr	r3, [r7, #8]
100094d6:	1b36      	subs	r6, r6, r4
100094d8:	4316      	orrs	r6, r2
100094da:	605e      	str	r6, [r3, #4]
100094dc:	4b0e      	ldr	r3, [pc, #56]	; (10009518 <_malloc_trim_r+0x94>)
100094de:	0028      	movs	r0, r5
100094e0:	681a      	ldr	r2, [r3, #0]
100094e2:	1b14      	subs	r4, r2, r4
100094e4:	601c      	str	r4, [r3, #0]
100094e6:	f7ff ff85 	bl	100093f4 <__malloc_unlock>
100094ea:	2001      	movs	r0, #1
100094ec:	e7ea      	b.n	100094c4 <_malloc_trim_r+0x40>
100094ee:	2100      	movs	r1, #0
100094f0:	0028      	movs	r0, r5
100094f2:	f7ff ff87 	bl	10009404 <_sbrk_r>
100094f6:	68ba      	ldr	r2, [r7, #8]
100094f8:	1a83      	subs	r3, r0, r2
100094fa:	2b0f      	cmp	r3, #15
100094fc:	ddde      	ble.n	100094bc <_malloc_trim_r+0x38>
100094fe:	4907      	ldr	r1, [pc, #28]	; (1000951c <_malloc_trim_r+0x98>)
10009500:	6809      	ldr	r1, [r1, #0]
10009502:	1a40      	subs	r0, r0, r1
10009504:	4904      	ldr	r1, [pc, #16]	; (10009518 <_malloc_trim_r+0x94>)
10009506:	6008      	str	r0, [r1, #0]
10009508:	2101      	movs	r1, #1
1000950a:	430b      	orrs	r3, r1
1000950c:	6053      	str	r3, [r2, #4]
1000950e:	e7d5      	b.n	100094bc <_malloc_trim_r+0x38>
10009510:	20002620 	.word	0x20002620
10009514:	00000fef 	.word	0x00000fef
10009518:	20038f14 	.word	0x20038f14
1000951c:	20002a28 	.word	0x20002a28

10009520 <_free_r>:
10009520:	b5f0      	push	{r4, r5, r6, r7, lr}
10009522:	46c6      	mov	lr, r8
10009524:	0005      	movs	r5, r0
10009526:	000c      	movs	r4, r1
10009528:	b500      	push	{lr}
1000952a:	2900      	cmp	r1, #0
1000952c:	d04f      	beq.n	100095ce <_free_r+0xae>
1000952e:	f7ff ff59 	bl	100093e4 <__malloc_lock>
10009532:	0021      	movs	r1, r4
10009534:	3908      	subs	r1, #8
10009536:	684c      	ldr	r4, [r1, #4]
10009538:	2601      	movs	r6, #1
1000953a:	0022      	movs	r2, r4
1000953c:	2003      	movs	r0, #3
1000953e:	43b2      	bics	r2, r6
10009540:	188f      	adds	r7, r1, r2
10009542:	687b      	ldr	r3, [r7, #4]
10009544:	4383      	bics	r3, r0
10009546:	4862      	ldr	r0, [pc, #392]	; (100096d0 <_free_r+0x1b0>)
10009548:	4698      	mov	r8, r3
1000954a:	6883      	ldr	r3, [r0, #8]
1000954c:	42bb      	cmp	r3, r7
1000954e:	d06a      	beq.n	10009626 <_free_r+0x106>
10009550:	4643      	mov	r3, r8
10009552:	607b      	str	r3, [r7, #4]
10009554:	4226      	tst	r6, r4
10009556:	d11e      	bne.n	10009596 <_free_r+0x76>
10009558:	2308      	movs	r3, #8
1000955a:	469c      	mov	ip, r3
1000955c:	680c      	ldr	r4, [r1, #0]
1000955e:	4484      	add	ip, r0
10009560:	1b09      	subs	r1, r1, r4
10009562:	1912      	adds	r2, r2, r4
10009564:	688c      	ldr	r4, [r1, #8]
10009566:	4564      	cmp	r4, ip
10009568:	d04f      	beq.n	1000960a <_free_r+0xea>
1000956a:	68cb      	ldr	r3, [r1, #12]
1000956c:	60e3      	str	r3, [r4, #12]
1000956e:	609c      	str	r4, [r3, #8]
10009570:	4643      	mov	r3, r8
10009572:	18fc      	adds	r4, r7, r3
10009574:	6864      	ldr	r4, [r4, #4]
10009576:	4234      	tst	r4, r6
10009578:	d111      	bne.n	1000959e <_free_r+0x7e>
1000957a:	68bb      	ldr	r3, [r7, #8]
1000957c:	4c55      	ldr	r4, [pc, #340]	; (100096d4 <_free_r+0x1b4>)
1000957e:	4442      	add	r2, r8
10009580:	42a3      	cmp	r3, r4
10009582:	d100      	bne.n	10009586 <_free_r+0x66>
10009584:	e07e      	b.n	10009684 <_free_r+0x164>
10009586:	68fc      	ldr	r4, [r7, #12]
10009588:	60dc      	str	r4, [r3, #12]
1000958a:	60a3      	str	r3, [r4, #8]
1000958c:	2301      	movs	r3, #1
1000958e:	4313      	orrs	r3, r2
10009590:	604b      	str	r3, [r1, #4]
10009592:	508a      	str	r2, [r1, r2]
10009594:	e006      	b.n	100095a4 <_free_r+0x84>
10009596:	18fc      	adds	r4, r7, r3
10009598:	6864      	ldr	r4, [r4, #4]
1000959a:	4234      	tst	r4, r6
1000959c:	d0ed      	beq.n	1000957a <_free_r+0x5a>
1000959e:	4316      	orrs	r6, r2
100095a0:	604e      	str	r6, [r1, #4]
100095a2:	603a      	str	r2, [r7, #0]
100095a4:	2380      	movs	r3, #128	; 0x80
100095a6:	009b      	lsls	r3, r3, #2
100095a8:	429a      	cmp	r2, r3
100095aa:	d213      	bcs.n	100095d4 <_free_r+0xb4>
100095ac:	0954      	lsrs	r4, r2, #5
100095ae:	08d3      	lsrs	r3, r2, #3
100095b0:	2201      	movs	r2, #1
100095b2:	40a2      	lsls	r2, r4
100095b4:	6844      	ldr	r4, [r0, #4]
100095b6:	00db      	lsls	r3, r3, #3
100095b8:	4322      	orrs	r2, r4
100095ba:	6042      	str	r2, [r0, #4]
100095bc:	1818      	adds	r0, r3, r0
100095be:	6883      	ldr	r3, [r0, #8]
100095c0:	60c8      	str	r0, [r1, #12]
100095c2:	608b      	str	r3, [r1, #8]
100095c4:	6081      	str	r1, [r0, #8]
100095c6:	60d9      	str	r1, [r3, #12]
100095c8:	0028      	movs	r0, r5
100095ca:	f7ff ff13 	bl	100093f4 <__malloc_unlock>
100095ce:	bc80      	pop	{r7}
100095d0:	46b8      	mov	r8, r7
100095d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
100095d4:	0a53      	lsrs	r3, r2, #9
100095d6:	2b04      	cmp	r3, #4
100095d8:	d83e      	bhi.n	10009658 <_free_r+0x138>
100095da:	0994      	lsrs	r4, r2, #6
100095dc:	0026      	movs	r6, r4
100095de:	3439      	adds	r4, #57	; 0x39
100095e0:	3638      	adds	r6, #56	; 0x38
100095e2:	00e4      	lsls	r4, r4, #3
100095e4:	1904      	adds	r4, r0, r4
100095e6:	6823      	ldr	r3, [r4, #0]
100095e8:	3c08      	subs	r4, #8
100095ea:	2703      	movs	r7, #3
100095ec:	429c      	cmp	r4, r3
100095ee:	d042      	beq.n	10009676 <_free_r+0x156>
100095f0:	6858      	ldr	r0, [r3, #4]
100095f2:	43b8      	bics	r0, r7
100095f4:	4290      	cmp	r0, r2
100095f6:	d902      	bls.n	100095fe <_free_r+0xde>
100095f8:	689b      	ldr	r3, [r3, #8]
100095fa:	429c      	cmp	r4, r3
100095fc:	d1f8      	bne.n	100095f0 <_free_r+0xd0>
100095fe:	68dc      	ldr	r4, [r3, #12]
10009600:	60cc      	str	r4, [r1, #12]
10009602:	608b      	str	r3, [r1, #8]
10009604:	60a1      	str	r1, [r4, #8]
10009606:	60d9      	str	r1, [r3, #12]
10009608:	e7de      	b.n	100095c8 <_free_r+0xa8>
1000960a:	4643      	mov	r3, r8
1000960c:	18f8      	adds	r0, r7, r3
1000960e:	6840      	ldr	r0, [r0, #4]
10009610:	4230      	tst	r0, r6
10009612:	d157      	bne.n	100096c4 <_free_r+0x1a4>
10009614:	68fb      	ldr	r3, [r7, #12]
10009616:	68b8      	ldr	r0, [r7, #8]
10009618:	4442      	add	r2, r8
1000961a:	4316      	orrs	r6, r2
1000961c:	60c3      	str	r3, [r0, #12]
1000961e:	6098      	str	r0, [r3, #8]
10009620:	604e      	str	r6, [r1, #4]
10009622:	508a      	str	r2, [r1, r2]
10009624:	e7d0      	b.n	100095c8 <_free_r+0xa8>
10009626:	0013      	movs	r3, r2
10009628:	4443      	add	r3, r8
1000962a:	4226      	tst	r6, r4
1000962c:	d106      	bne.n	1000963c <_free_r+0x11c>
1000962e:	680a      	ldr	r2, [r1, #0]
10009630:	1a89      	subs	r1, r1, r2
10009632:	688c      	ldr	r4, [r1, #8]
10009634:	189b      	adds	r3, r3, r2
10009636:	68ca      	ldr	r2, [r1, #12]
10009638:	60e2      	str	r2, [r4, #12]
1000963a:	6094      	str	r4, [r2, #8]
1000963c:	2201      	movs	r2, #1
1000963e:	431a      	orrs	r2, r3
10009640:	604a      	str	r2, [r1, #4]
10009642:	4a25      	ldr	r2, [pc, #148]	; (100096d8 <_free_r+0x1b8>)
10009644:	6081      	str	r1, [r0, #8]
10009646:	6812      	ldr	r2, [r2, #0]
10009648:	429a      	cmp	r2, r3
1000964a:	d8bd      	bhi.n	100095c8 <_free_r+0xa8>
1000964c:	4b23      	ldr	r3, [pc, #140]	; (100096dc <_free_r+0x1bc>)
1000964e:	0028      	movs	r0, r5
10009650:	6819      	ldr	r1, [r3, #0]
10009652:	f7ff ff17 	bl	10009484 <_malloc_trim_r>
10009656:	e7b7      	b.n	100095c8 <_free_r+0xa8>
10009658:	2b14      	cmp	r3, #20
1000965a:	d907      	bls.n	1000966c <_free_r+0x14c>
1000965c:	2b54      	cmp	r3, #84	; 0x54
1000965e:	d81a      	bhi.n	10009696 <_free_r+0x176>
10009660:	0b14      	lsrs	r4, r2, #12
10009662:	0026      	movs	r6, r4
10009664:	346f      	adds	r4, #111	; 0x6f
10009666:	366e      	adds	r6, #110	; 0x6e
10009668:	00e4      	lsls	r4, r4, #3
1000966a:	e7bb      	b.n	100095e4 <_free_r+0xc4>
1000966c:	001e      	movs	r6, r3
1000966e:	335c      	adds	r3, #92	; 0x5c
10009670:	365b      	adds	r6, #91	; 0x5b
10009672:	00dc      	lsls	r4, r3, #3
10009674:	e7b6      	b.n	100095e4 <_free_r+0xc4>
10009676:	2201      	movs	r2, #1
10009678:	10b6      	asrs	r6, r6, #2
1000967a:	40b2      	lsls	r2, r6
1000967c:	6846      	ldr	r6, [r0, #4]
1000967e:	4332      	orrs	r2, r6
10009680:	6042      	str	r2, [r0, #4]
10009682:	e7bd      	b.n	10009600 <_free_r+0xe0>
10009684:	60d9      	str	r1, [r3, #12]
10009686:	6099      	str	r1, [r3, #8]
10009688:	60cb      	str	r3, [r1, #12]
1000968a:	608b      	str	r3, [r1, #8]
1000968c:	2301      	movs	r3, #1
1000968e:	4313      	orrs	r3, r2
10009690:	604b      	str	r3, [r1, #4]
10009692:	508a      	str	r2, [r1, r2]
10009694:	e798      	b.n	100095c8 <_free_r+0xa8>
10009696:	24aa      	movs	r4, #170	; 0xaa
10009698:	0064      	lsls	r4, r4, #1
1000969a:	42a3      	cmp	r3, r4
1000969c:	d805      	bhi.n	100096aa <_free_r+0x18a>
1000969e:	0bd4      	lsrs	r4, r2, #15
100096a0:	0026      	movs	r6, r4
100096a2:	3478      	adds	r4, #120	; 0x78
100096a4:	3677      	adds	r6, #119	; 0x77
100096a6:	00e4      	lsls	r4, r4, #3
100096a8:	e79c      	b.n	100095e4 <_free_r+0xc4>
100096aa:	4c0d      	ldr	r4, [pc, #52]	; (100096e0 <_free_r+0x1c0>)
100096ac:	42a3      	cmp	r3, r4
100096ae:	d805      	bhi.n	100096bc <_free_r+0x19c>
100096b0:	0c94      	lsrs	r4, r2, #18
100096b2:	0026      	movs	r6, r4
100096b4:	347d      	adds	r4, #125	; 0x7d
100096b6:	367c      	adds	r6, #124	; 0x7c
100096b8:	00e4      	lsls	r4, r4, #3
100096ba:	e793      	b.n	100095e4 <_free_r+0xc4>
100096bc:	24fe      	movs	r4, #254	; 0xfe
100096be:	267e      	movs	r6, #126	; 0x7e
100096c0:	00a4      	lsls	r4, r4, #2
100096c2:	e78f      	b.n	100095e4 <_free_r+0xc4>
100096c4:	0033      	movs	r3, r6
100096c6:	4313      	orrs	r3, r2
100096c8:	604b      	str	r3, [r1, #4]
100096ca:	603a      	str	r2, [r7, #0]
100096cc:	e77c      	b.n	100095c8 <_free_r+0xa8>
100096ce:	46c0      	nop			; (mov r8, r8)
100096d0:	20002620 	.word	0x20002620
100096d4:	20002628 	.word	0x20002628
100096d8:	20002a2c 	.word	0x20002a2c
100096dc:	20038f44 	.word	0x20038f44
100096e0:	00000554 	.word	0x00000554

100096e4 <__retarget_lock_acquire_recursive>:
100096e4:	4770      	bx	lr
100096e6:	46c0      	nop			; (mov r8, r8)

100096e8 <__retarget_lock_release_recursive>:
100096e8:	4770      	bx	lr
100096ea:	46c0      	nop			; (mov r8, r8)

100096ec <_fini>:
100096ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100096ee:	46c0      	nop			; (mov r8, r8)

100096f0 <__MandelFixed_veneer>:
100096f0:	b401      	push	{r0}
100096f2:	4802      	ldr	r0, [pc, #8]	; (100096fc <__MandelFixed_veneer+0xc>)
100096f4:	4684      	mov	ip, r0
100096f6:	bc01      	pop	{r0}
100096f8:	4760      	bx	ip
100096fa:	bf00      	nop
100096fc:	200001d1 	.word	0x200001d1

10009700 <__mutex_exit_veneer>:
10009700:	b401      	push	{r0}
10009702:	4802      	ldr	r0, [pc, #8]	; (1000970c <__mutex_exit_veneer+0xc>)
10009704:	4684      	mov	ip, r0
10009706:	bc01      	pop	{r0}
10009708:	4760      	bx	ip
1000970a:	bf00      	nop
1000970c:	20001ead 	.word	0x20001ead

10009710 <____aeabi_ldiv0_veneer>:
10009710:	b401      	push	{r0}
10009712:	4802      	ldr	r0, [pc, #8]	; (1000971c <____aeabi_ldiv0_veneer+0xc>)
10009714:	4684      	mov	ip, r0
10009716:	bc01      	pop	{r0}
10009718:	4760      	bx	ip
1000971a:	bf00      	nop
1000971c:	200020b1 	.word	0x200020b1

10009720 <____aeabi_idiv0_veneer>:
10009720:	b401      	push	{r0}
10009722:	4802      	ldr	r0, [pc, #8]	; (1000972c <____aeabi_idiv0_veneer+0xc>)
10009724:	4684      	mov	ip, r0
10009726:	bc01      	pop	{r0}
10009728:	4760      	bx	ip
1000972a:	bf00      	nop
1000972c:	200020b1 	.word	0x200020b1

10009730 <__mutex_try_enter_veneer>:
10009730:	b401      	push	{r0}
10009732:	4802      	ldr	r0, [pc, #8]	; (1000973c <__mutex_try_enter_veneer+0xc>)
10009734:	4684      	mov	ip, r0
10009736:	bc01      	pop	{r0}
10009738:	4760      	bx	ip
1000973a:	bf00      	nop
1000973c:	20001dd1 	.word	0x20001dd1

10009740 <__mutex_enter_timeout_ms_veneer>:
10009740:	b401      	push	{r0}
10009742:	4802      	ldr	r0, [pc, #8]	; (1000974c <__mutex_enter_timeout_ms_veneer+0xc>)
10009744:	4684      	mov	ip, r0
10009746:	bc01      	pop	{r0}
10009748:	4760      	bx	ip
1000974a:	bf00      	nop
1000974c:	20001e15 	.word	0x20001e15

10009750 <__flash_do_cmd.constprop.0_veneer>:
10009750:	b401      	push	{r0}
10009752:	4802      	ldr	r0, [pc, #8]	; (1000975c <__flash_do_cmd.constprop.0_veneer+0xc>)
10009754:	4684      	mov	ip, r0
10009756:	bc01      	pop	{r0}
10009758:	4760      	bx	ip
1000975a:	bf00      	nop
1000975c:	20001ce1 	.word	0x20001ce1

10009760 <__mutex_enter_blocking_veneer>:
10009760:	b401      	push	{r0}
10009762:	4802      	ldr	r0, [pc, #8]	; (1000976c <__mutex_enter_blocking_veneer+0xc>)
10009764:	4684      	mov	ip, r0
10009766:	bc01      	pop	{r0}
10009768:	4760      	bx	ip
1000976a:	bf00      	nop
1000976c:	20001d85 	.word	0x20001d85

Disassembly of section .data:

200000c0 <Mul64>:
200000c0:	4351      	muls	r1, r2
200000c2:	4343      	muls	r3, r0
200000c4:	18c9      	adds	r1, r1, r3
200000c6:	468c      	mov	ip, r1
200000c8:	0c11      	lsrs	r1, r2, #16
200000ca:	b283      	uxth	r3, r0
200000cc:	434b      	muls	r3, r1
200000ce:	b410      	push	{r4}
200000d0:	0c04      	lsrs	r4, r0, #16
200000d2:	4361      	muls	r1, r4
200000d4:	b292      	uxth	r2, r2
200000d6:	b280      	uxth	r0, r0
200000d8:	4350      	muls	r0, r2
200000da:	4362      	muls	r2, r4
200000dc:	041c      	lsls	r4, r3, #16
200000de:	0c1b      	lsrs	r3, r3, #16
200000e0:	1900      	adds	r0, r0, r4
200000e2:	4159      	adcs	r1, r3
200000e4:	bc10      	pop	{r4}
200000e6:	0413      	lsls	r3, r2, #16
200000e8:	0c12      	lsrs	r2, r2, #16
200000ea:	18c0      	adds	r0, r0, r3
200000ec:	4151      	adcs	r1, r2
200000ee:	4461      	add	r1, ip
200000f0:	4770      	bx	lr

200000f2 <MulU32>:
200000f2:	46a4      	mov	ip, r4
200000f4:	0c03      	lsrs	r3, r0, #16
200000f6:	b28a      	uxth	r2, r1
200000f8:	435a      	muls	r2, r3
200000fa:	0c0c      	lsrs	r4, r1, #16
200000fc:	4363      	muls	r3, r4
200000fe:	b280      	uxth	r0, r0
20000100:	4344      	muls	r4, r0
20000102:	b289      	uxth	r1, r1
20000104:	4348      	muls	r0, r1
20000106:	0c21      	lsrs	r1, r4, #16
20000108:	0424      	lsls	r4, r4, #16
2000010a:	1900      	adds	r0, r0, r4
2000010c:	4159      	adcs	r1, r3
2000010e:	0413      	lsls	r3, r2, #16
20000110:	0c12      	lsrs	r2, r2, #16
20000112:	18c0      	adds	r0, r0, r3
20000114:	4151      	adcs	r1, r2
20000116:	4664      	mov	r4, ip
20000118:	4770      	bx	lr

2000011a <MulS32>:
2000011a:	4200      	tst	r0, r0
2000011c:	d504      	bpl.n	20000128 <MulS32+0xe>
2000011e:	4240      	negs	r0, r0
20000120:	4209      	tst	r1, r1
20000122:	d504      	bpl.n	2000012e <MulS32+0x14>
20000124:	4249      	negs	r1, r1
20000126:	e7e4      	b.n	200000f2 <MulU32>
20000128:	4209      	tst	r1, r1
2000012a:	d5e2      	bpl.n	200000f2 <MulU32>
2000012c:	4249      	negs	r1, r1
2000012e:	b500      	push	{lr}
20000130:	f7ff ffdf 	bl	200000f2 <MulU32>
20000134:	43c9      	mvns	r1, r1
20000136:	4240      	negs	r0, r0
20000138:	d100      	bne.n	2000013c <MulS32+0x22>
2000013a:	3101      	adds	r1, #1
2000013c:	bd00      	pop	{pc}

2000013e <FixedUMul>:
2000013e:	46a4      	mov	ip, r4
20000140:	0c03      	lsrs	r3, r0, #16
20000142:	b28a      	uxth	r2, r1
20000144:	435a      	muls	r2, r3
20000146:	0c0c      	lsrs	r4, r1, #16
20000148:	4363      	muls	r3, r4
2000014a:	b280      	uxth	r0, r0
2000014c:	4344      	muls	r4, r0
2000014e:	b289      	uxth	r1, r1
20000150:	4348      	muls	r0, r1
20000152:	0c21      	lsrs	r1, r4, #16
20000154:	0424      	lsls	r4, r4, #16
20000156:	1900      	adds	r0, r0, r4
20000158:	4159      	adcs	r1, r3
2000015a:	0413      	lsls	r3, r2, #16
2000015c:	0c12      	lsrs	r2, r2, #16
2000015e:	18c0      	adds	r0, r0, r3
20000160:	4151      	adcs	r1, r2
20000162:	4664      	mov	r4, ip
20000164:	01c9      	lsls	r1, r1, #7
20000166:	0e40      	lsrs	r0, r0, #25
20000168:	4308      	orrs	r0, r1
2000016a:	4770      	bx	lr

2000016c <FixedMul>:
2000016c:	4200      	tst	r0, r0
2000016e:	d504      	bpl.n	2000017a <FixedMul+0xe>
20000170:	4240      	negs	r0, r0
20000172:	4209      	tst	r1, r1
20000174:	d504      	bpl.n	20000180 <FixedMul+0x14>
20000176:	4249      	negs	r1, r1
20000178:	e7e1      	b.n	2000013e <FixedUMul>
2000017a:	4209      	tst	r1, r1
2000017c:	d5df      	bpl.n	2000013e <FixedUMul>
2000017e:	4249      	negs	r1, r1
20000180:	b500      	push	{lr}
20000182:	f7ff ffdc 	bl	2000013e <FixedUMul>
20000186:	4240      	negs	r0, r0
20000188:	bd00      	pop	{pc}

2000018a <SqrS32>:
2000018a:	4200      	tst	r0, r0
2000018c:	d500      	bpl.n	20000190 <SqrU32>
2000018e:	4240      	negs	r0, r0

20000190 <SqrU32>:
20000190:	0c01      	lsrs	r1, r0, #16
20000192:	b282      	uxth	r2, r0
20000194:	434a      	muls	r2, r1
20000196:	4349      	muls	r1, r1
20000198:	b280      	uxth	r0, r0
2000019a:	4340      	muls	r0, r0
2000019c:	0c13      	lsrs	r3, r2, #16
2000019e:	0412      	lsls	r2, r2, #16
200001a0:	1880      	adds	r0, r0, r2
200001a2:	4159      	adcs	r1, r3
200001a4:	1880      	adds	r0, r0, r2
200001a6:	4159      	adcs	r1, r3
200001a8:	4770      	bx	lr

200001aa <FixedSqr>:
200001aa:	4200      	tst	r0, r0
200001ac:	d500      	bpl.n	200001b0 <FixedUSqr>
200001ae:	4240      	negs	r0, r0

200001b0 <FixedUSqr>:
200001b0:	0c01      	lsrs	r1, r0, #16
200001b2:	b282      	uxth	r2, r0
200001b4:	434a      	muls	r2, r1
200001b6:	4349      	muls	r1, r1
200001b8:	b280      	uxth	r0, r0
200001ba:	4340      	muls	r0, r0
200001bc:	0c13      	lsrs	r3, r2, #16
200001be:	0412      	lsls	r2, r2, #16
200001c0:	1880      	adds	r0, r0, r2
200001c2:	4159      	adcs	r1, r3
200001c4:	1880      	adds	r0, r0, r2
200001c6:	4159      	adcs	r1, r3
200001c8:	01c9      	lsls	r1, r1, #7
200001ca:	0e40      	lsrs	r0, r0, #25
200001cc:	4308      	orrs	r0, r1
200001ce:	4770      	bx	lr

200001d0 <MandelFixed>:
200001d0:	b5ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7, lr}
200001d2:	4644      	mov	r4, r8
200001d4:	464d      	mov	r5, r9
200001d6:	4656      	mov	r6, sl
200001d8:	465f      	mov	r7, fp
200001da:	b4f0      	push	{r4, r5, r6, r7}
200001dc:	4683      	mov	fp, r0
200001de:	4689      	mov	r9, r1
200001e0:	481f      	ldr	r0, [pc, #124]	; (20000260 <Steps_Addr>)
200001e2:	6800      	ldr	r0, [r0, #0]
200001e4:	9006      	str	r0, [sp, #24]
200001e6:	481f      	ldr	r0, [pc, #124]	; (20000264 <Width_Addr>)
200001e8:	6800      	ldr	r0, [r0, #0]
200001ea:	9007      	str	r0, [sp, #28]
200001ec:	481e      	ldr	r0, [pc, #120]	; (20000268 <Grad_Addr>)
200001ee:	9004      	str	r0, [sp, #16]
200001f0:	481e      	ldr	r0, [pc, #120]	; (2000026c <Shift_Addr>)
200001f2:	6800      	ldr	r0, [r0, #0]
200001f4:	9005      	str	r0, [sp, #20]
200001f6:	481e      	ldr	r0, [pc, #120]	; (20000270 <SXi_Addr>)
200001f8:	6800      	ldr	r0, [r0, #0]
200001fa:	4682      	mov	sl, r0
200001fc:	481d      	ldr	r0, [pc, #116]	; (20000274 <X0i_Addr>)
200001fe:	6800      	ldr	r0, [r0, #0]
20000200:	4680      	mov	r8, r0
20000202:	4645      	mov	r5, r8
20000204:	464e      	mov	r6, r9
20000206:	9f06      	ldr	r7, [sp, #24]
20000208:	4628      	mov	r0, r5
2000020a:	f7ff ffce 	bl	200001aa <FixedSqr>
2000020e:	4604      	mov	r4, r0
20000210:	4630      	mov	r0, r6
20000212:	f7ff ffca 	bl	200001aa <FixedSqr>
20000216:	1901      	adds	r1, r0, r4
20000218:	0ec9      	lsrs	r1, r1, #27
2000021a:	d10c      	bne.n	20000236 <MandelFixed+0x66>
2000021c:	1a24      	subs	r4, r4, r0
2000021e:	4444      	add	r4, r8
20000220:	4628      	mov	r0, r5
20000222:	4631      	mov	r1, r6
20000224:	f7ff ffa2 	bl	2000016c <FixedMul>
20000228:	0046      	lsls	r6, r0, #1
2000022a:	444e      	add	r6, r9
2000022c:	4625      	mov	r5, r4
2000022e:	3f01      	subs	r7, #1
20000230:	d1ea      	bne.n	20000208 <MandelFixed+0x38>
20000232:	2000      	movs	r0, #0
20000234:	e005      	b.n	20000242 <MandelFixed+0x72>
20000236:	9806      	ldr	r0, [sp, #24]
20000238:	1bc0      	subs	r0, r0, r7
2000023a:	9905      	ldr	r1, [sp, #20]
2000023c:	40c8      	lsrs	r0, r1
2000023e:	9a04      	ldr	r2, [sp, #16]
20000240:	5c10      	ldrb	r0, [r2, r0]
20000242:	4659      	mov	r1, fp
20000244:	7008      	strb	r0, [r1, #0]
20000246:	2001      	movs	r0, #1
20000248:	4483      	add	fp, r0
2000024a:	44d0      	add	r8, sl
2000024c:	9907      	ldr	r1, [sp, #28]
2000024e:	3901      	subs	r1, #1
20000250:	9107      	str	r1, [sp, #28]
20000252:	d1d6      	bne.n	20000202 <MandelFixed+0x32>
20000254:	bcf0      	pop	{r4, r5, r6, r7}
20000256:	46a0      	mov	r8, r4
20000258:	46a9      	mov	r9, r5
2000025a:	46b2      	mov	sl, r6
2000025c:	46bb      	mov	fp, r7
2000025e:	bdff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7, pc}

20000260 <Steps_Addr>:
20000260:	200021e0 	.word	0x200021e0

20000264 <Width_Addr>:
20000264:	200021e8 	.word	0x200021e8

20000268 <Grad_Addr>:
20000268:	1000a000 	.word	0x1000a000

2000026c <Shift_Addr>:
2000026c:	20038e9c 	.word	0x20038e9c

20000270 <SXi_Addr>:
20000270:	200389e8 	.word	0x200389e8

20000274 <X0i_Addr>:
20000274:	20038f04 	.word	0x20038f04

20000278 <RenderAText>:
20000278:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
2000027a:	4644      	mov	r4, r8
2000027c:	b410      	push	{r4}
2000027e:	9c09      	ldr	r4, [sp, #36]	; 0x24
20000280:	4e49      	ldr	r6, [pc, #292]	; (200003a8 <RenderAText_pSioBase>)
20000282:	6632      	str	r2, [r6, #96]	; 0x60
20000284:	8a62      	ldrh	r2, [r4, #18]
20000286:	6672      	str	r2, [r6, #100]	; 0x64
20000288:	8925      	ldrh	r5, [r4, #8]
2000028a:	2703      	movs	r7, #3
2000028c:	43bd      	bics	r5, r7
2000028e:	9509      	str	r5, [sp, #36]	; 0x24
20000290:	43b9      	bics	r1, r7
20000292:	43bb      	bics	r3, r7
20000294:	9303      	str	r3, [sp, #12]
20000296:	6f75      	ldr	r5, [r6, #116]	; 0x74
20000298:	6f32      	ldr	r2, [r6, #112]	; 0x70
2000029a:	022d      	lsls	r5, r5, #8
2000029c:	6963      	ldr	r3, [r4, #20]
2000029e:	442b      	add	r3, r5
200002a0:	8865      	ldrh	r5, [r4, #2]
200002a2:	436a      	muls	r2, r5
200002a4:	68e5      	ldr	r5, [r4, #12]
200002a6:	442a      	add	r2, r5
200002a8:	9202      	str	r2, [sp, #8]
200002aa:	08ce      	lsrs	r6, r1, #3
200002ac:	4432      	add	r2, r6
200002ae:	4432      	add	r2, r6
200002b0:	69a5      	ldr	r5, [r4, #24]
200002b2:	46a8      	mov	r8, r5
200002b4:	4d3b      	ldr	r5, [pc, #236]	; (200003a4 <RenderAText_Addr>)
200002b6:	46ae      	mov	lr, r5
200002b8:	074e      	lsls	r6, r1, #29
200002ba:	d521      	bpl.n	20000300 <RenderAText+0x88>
200002bc:	7856      	ldrb	r6, [r2, #1]
200002be:	4645      	mov	r5, r8
200002c0:	0934      	lsrs	r4, r6, #4
200002c2:	5d2c      	ldrb	r4, [r5, r4]
200002c4:	0736      	lsls	r6, r6, #28
200002c6:	0f36      	lsrs	r6, r6, #28
200002c8:	5dae      	ldrb	r6, [r5, r6]
200002ca:	0225      	lsls	r5, r4, #8
200002cc:	4325      	orrs	r5, r4
200002ce:	042c      	lsls	r4, r5, #16
200002d0:	432c      	orrs	r4, r5
200002d2:	0235      	lsls	r5, r6, #8
200002d4:	4335      	orrs	r5, r6
200002d6:	042e      	lsls	r6, r5, #16
200002d8:	432e      	orrs	r6, r5
200002da:	4066      	eors	r6, r4
200002dc:	7815      	ldrb	r5, [r2, #0]
200002de:	5d5d      	ldrb	r5, [r3, r5]
200002e0:	3202      	adds	r2, #2
200002e2:	00ed      	lsls	r5, r5, #3
200002e4:	4475      	add	r5, lr
200002e6:	686f      	ldr	r7, [r5, #4]
200002e8:	4037      	ands	r7, r6
200002ea:	4067      	eors	r7, r4
200002ec:	c080      	stmia	r0!, {r7}
200002ee:	3104      	adds	r1, #4
200002f0:	9f09      	ldr	r7, [sp, #36]	; 0x24
200002f2:	42b9      	cmp	r1, r7
200002f4:	d301      	bcc.n	200002fa <RenderAText+0x82>
200002f6:	2100      	movs	r1, #0
200002f8:	9a02      	ldr	r2, [sp, #8]
200002fa:	9f03      	ldr	r7, [sp, #12]
200002fc:	3f04      	subs	r7, #4
200002fe:	9703      	str	r7, [sp, #12]
20000300:	9f09      	ldr	r7, [sp, #36]	; 0x24
20000302:	1a7f      	subs	r7, r7, r1

20000304 <RenderAText_OutLoop>:
20000304:	9e03      	ldr	r6, [sp, #12]
20000306:	42b7      	cmp	r7, r6
20000308:	d900      	bls.n	2000030c <RenderAText_OutLoop+0x8>
2000030a:	4637      	mov	r7, r6
2000030c:	2f08      	cmp	r7, #8
2000030e:	d220      	bcs.n	20000352 <RenderAText_Last+0x3e>
20000310:	2f04      	cmp	r7, #4
20000312:	d31b      	bcc.n	2000034c <RenderAText_Last+0x38>

20000314 <RenderAText_Last>:
20000314:	7856      	ldrb	r6, [r2, #1]
20000316:	4645      	mov	r5, r8
20000318:	0934      	lsrs	r4, r6, #4
2000031a:	5d2c      	ldrb	r4, [r5, r4]
2000031c:	0736      	lsls	r6, r6, #28
2000031e:	0f36      	lsrs	r6, r6, #28
20000320:	5dae      	ldrb	r6, [r5, r6]
20000322:	0225      	lsls	r5, r4, #8
20000324:	4325      	orrs	r5, r4
20000326:	042c      	lsls	r4, r5, #16
20000328:	432c      	orrs	r4, r5
2000032a:	0235      	lsls	r5, r6, #8
2000032c:	4335      	orrs	r5, r6
2000032e:	042e      	lsls	r6, r5, #16
20000330:	432e      	orrs	r6, r5
20000332:	4066      	eors	r6, r4
20000334:	7815      	ldrb	r5, [r2, #0]
20000336:	5d5d      	ldrb	r5, [r3, r5]
20000338:	3202      	adds	r2, #2
2000033a:	00ed      	lsls	r5, r5, #3
2000033c:	4475      	add	r5, lr
2000033e:	6829      	ldr	r1, [r5, #0]
20000340:	4031      	ands	r1, r6
20000342:	4061      	eors	r1, r4
20000344:	c002      	stmia	r0!, {r1}
20000346:	9a02      	ldr	r2, [sp, #8]
20000348:	2f04      	cmp	r7, #4
2000034a:	d8db      	bhi.n	20000304 <RenderAText_OutLoop>
2000034c:	bc10      	pop	{r4}
2000034e:	46a0      	mov	r8, r4
20000350:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
20000352:	08b9      	lsrs	r1, r7, #2
20000354:	008d      	lsls	r5, r1, #2
20000356:	1b76      	subs	r6, r6, r5
20000358:	9603      	str	r6, [sp, #12]
2000035a:	3901      	subs	r1, #1

2000035c <RenderAText_InLoop>:
2000035c:	7856      	ldrb	r6, [r2, #1]
2000035e:	4645      	mov	r5, r8
20000360:	0934      	lsrs	r4, r6, #4
20000362:	5d2c      	ldrb	r4, [r5, r4]
20000364:	0736      	lsls	r6, r6, #28
20000366:	0f36      	lsrs	r6, r6, #28
20000368:	5dae      	ldrb	r6, [r5, r6]
2000036a:	0225      	lsls	r5, r4, #8
2000036c:	4325      	orrs	r5, r4
2000036e:	042c      	lsls	r4, r5, #16
20000370:	432c      	orrs	r4, r5
20000372:	0235      	lsls	r5, r6, #8
20000374:	4335      	orrs	r5, r6
20000376:	042e      	lsls	r6, r5, #16
20000378:	432e      	orrs	r6, r5
2000037a:	4066      	eors	r6, r4
2000037c:	7815      	ldrb	r5, [r2, #0]
2000037e:	5d5d      	ldrb	r5, [r3, r5]
20000380:	3202      	adds	r2, #2
20000382:	00ed      	lsls	r5, r5, #3
20000384:	4475      	add	r5, lr
20000386:	682f      	ldr	r7, [r5, #0]
20000388:	4037      	ands	r7, r6
2000038a:	4067      	eors	r7, r4
2000038c:	c080      	stmia	r0!, {r7}
2000038e:	686f      	ldr	r7, [r5, #4]
20000390:	4037      	ands	r7, r6
20000392:	4067      	eors	r7, r4
20000394:	c080      	stmia	r0!, {r7}
20000396:	3902      	subs	r1, #2
20000398:	d8e0      	bhi.n	2000035c <RenderAText_InLoop>
2000039a:	9f09      	ldr	r7, [sp, #36]	; 0x24
2000039c:	d0ba      	beq.n	20000314 <RenderAText_Last>
2000039e:	9a02      	ldr	r2, [sp, #8]
200003a0:	e7b0      	b.n	20000304 <RenderAText_OutLoop>
200003a2:	46c0      	nop			; (mov r8, r8)

200003a4 <RenderAText_Addr>:
200003a4:	200381e4 	.word	0x200381e4

200003a8 <RenderAText_pSioBase>:
200003a8:	d0000000 	.word	0xd0000000

200003ac <RenderAttrib8>:
200003ac:	b5fc      	push	{r2, r3, r4, r5, r6, r7, lr}
200003ae:	4644      	mov	r4, r8
200003b0:	b410      	push	{r4}
200003b2:	9c08      	ldr	r4, [sp, #32]
200003b4:	8925      	ldrh	r5, [r4, #8]
200003b6:	2703      	movs	r7, #3
200003b8:	43bd      	bics	r5, r7
200003ba:	9508      	str	r5, [sp, #32]
200003bc:	43b9      	bics	r1, r7
200003be:	43bb      	bics	r3, r7
200003c0:	9302      	str	r3, [sp, #8]
200003c2:	08d3      	lsrs	r3, r2, #3
200003c4:	8865      	ldrh	r5, [r4, #2]
200003c6:	436b      	muls	r3, r5
200003c8:	6967      	ldr	r7, [r4, #20]
200003ca:	443b      	add	r3, r7
200003cc:	436a      	muls	r2, r5
200003ce:	68e5      	ldr	r5, [r4, #12]
200003d0:	442a      	add	r2, r5
200003d2:	9201      	str	r2, [sp, #4]
200003d4:	1a9b      	subs	r3, r3, r2
200003d6:	08ce      	lsrs	r6, r1, #3
200003d8:	4432      	add	r2, r6
200003da:	69a5      	ldr	r5, [r4, #24]
200003dc:	46a8      	mov	r8, r5
200003de:	4d39      	ldr	r5, [pc, #228]	; (200004c4 <RenderAttrib8_Addr>)
200003e0:	46ae      	mov	lr, r5
200003e2:	074e      	lsls	r6, r1, #29
200003e4:	d520      	bpl.n	20000428 <RenderAttrib8+0x7c>
200003e6:	5cd6      	ldrb	r6, [r2, r3]
200003e8:	4645      	mov	r5, r8
200003ea:	0934      	lsrs	r4, r6, #4
200003ec:	5d2c      	ldrb	r4, [r5, r4]
200003ee:	0736      	lsls	r6, r6, #28
200003f0:	0f36      	lsrs	r6, r6, #28
200003f2:	5dae      	ldrb	r6, [r5, r6]
200003f4:	0225      	lsls	r5, r4, #8
200003f6:	4325      	orrs	r5, r4
200003f8:	042c      	lsls	r4, r5, #16
200003fa:	432c      	orrs	r4, r5
200003fc:	0235      	lsls	r5, r6, #8
200003fe:	4335      	orrs	r5, r6
20000400:	042e      	lsls	r6, r5, #16
20000402:	432e      	orrs	r6, r5
20000404:	4066      	eors	r6, r4
20000406:	7815      	ldrb	r5, [r2, #0]
20000408:	3201      	adds	r2, #1
2000040a:	00ed      	lsls	r5, r5, #3
2000040c:	4475      	add	r5, lr
2000040e:	686f      	ldr	r7, [r5, #4]
20000410:	4037      	ands	r7, r6
20000412:	4067      	eors	r7, r4
20000414:	c080      	stmia	r0!, {r7}
20000416:	3104      	adds	r1, #4
20000418:	9f08      	ldr	r7, [sp, #32]
2000041a:	42b9      	cmp	r1, r7
2000041c:	d301      	bcc.n	20000422 <RenderAttrib8+0x76>
2000041e:	2100      	movs	r1, #0
20000420:	9a01      	ldr	r2, [sp, #4]
20000422:	9f02      	ldr	r7, [sp, #8]
20000424:	3f04      	subs	r7, #4
20000426:	9702      	str	r7, [sp, #8]
20000428:	9f08      	ldr	r7, [sp, #32]
2000042a:	1a7f      	subs	r7, r7, r1

2000042c <RenderAttrib8_OutLoop>:
2000042c:	9e02      	ldr	r6, [sp, #8]
2000042e:	42b7      	cmp	r7, r6
20000430:	d900      	bls.n	20000434 <RenderAttrib8_OutLoop+0x8>
20000432:	4637      	mov	r7, r6
20000434:	2f08      	cmp	r7, #8
20000436:	d21f      	bcs.n	20000478 <RenderAttrib8_Last+0x3c>
20000438:	2f04      	cmp	r7, #4
2000043a:	d31a      	bcc.n	20000472 <RenderAttrib8_Last+0x36>

2000043c <RenderAttrib8_Last>:
2000043c:	5cd6      	ldrb	r6, [r2, r3]
2000043e:	4645      	mov	r5, r8
20000440:	0934      	lsrs	r4, r6, #4
20000442:	5d2c      	ldrb	r4, [r5, r4]
20000444:	0736      	lsls	r6, r6, #28
20000446:	0f36      	lsrs	r6, r6, #28
20000448:	5dae      	ldrb	r6, [r5, r6]
2000044a:	0225      	lsls	r5, r4, #8
2000044c:	4325      	orrs	r5, r4
2000044e:	042c      	lsls	r4, r5, #16
20000450:	432c      	orrs	r4, r5
20000452:	0235      	lsls	r5, r6, #8
20000454:	4335      	orrs	r5, r6
20000456:	042e      	lsls	r6, r5, #16
20000458:	432e      	orrs	r6, r5
2000045a:	4066      	eors	r6, r4
2000045c:	7815      	ldrb	r5, [r2, #0]
2000045e:	3201      	adds	r2, #1
20000460:	00ed      	lsls	r5, r5, #3
20000462:	4475      	add	r5, lr
20000464:	6829      	ldr	r1, [r5, #0]
20000466:	4031      	ands	r1, r6
20000468:	4061      	eors	r1, r4
2000046a:	c002      	stmia	r0!, {r1}
2000046c:	9a01      	ldr	r2, [sp, #4]
2000046e:	2f04      	cmp	r7, #4
20000470:	d8dc      	bhi.n	2000042c <RenderAttrib8_OutLoop>
20000472:	bc10      	pop	{r4}
20000474:	46a0      	mov	r8, r4
20000476:	bdfc      	pop	{r2, r3, r4, r5, r6, r7, pc}
20000478:	08b9      	lsrs	r1, r7, #2
2000047a:	008d      	lsls	r5, r1, #2
2000047c:	1b76      	subs	r6, r6, r5
2000047e:	9602      	str	r6, [sp, #8]
20000480:	3901      	subs	r1, #1

20000482 <RenderAttrib8_InLoop>:
20000482:	5cd6      	ldrb	r6, [r2, r3]
20000484:	4645      	mov	r5, r8
20000486:	0934      	lsrs	r4, r6, #4
20000488:	5d2c      	ldrb	r4, [r5, r4]
2000048a:	0736      	lsls	r6, r6, #28
2000048c:	0f36      	lsrs	r6, r6, #28
2000048e:	5dae      	ldrb	r6, [r5, r6]
20000490:	0225      	lsls	r5, r4, #8
20000492:	4325      	orrs	r5, r4
20000494:	042c      	lsls	r4, r5, #16
20000496:	432c      	orrs	r4, r5
20000498:	0235      	lsls	r5, r6, #8
2000049a:	4335      	orrs	r5, r6
2000049c:	042e      	lsls	r6, r5, #16
2000049e:	432e      	orrs	r6, r5
200004a0:	4066      	eors	r6, r4
200004a2:	7817      	ldrb	r7, [r2, #0]
200004a4:	3201      	adds	r2, #1
200004a6:	00ff      	lsls	r7, r7, #3
200004a8:	4477      	add	r7, lr
200004aa:	683d      	ldr	r5, [r7, #0]
200004ac:	4035      	ands	r5, r6
200004ae:	4065      	eors	r5, r4
200004b0:	687f      	ldr	r7, [r7, #4]
200004b2:	4037      	ands	r7, r6
200004b4:	4067      	eors	r7, r4
200004b6:	c0a0      	stmia	r0!, {r5, r7}
200004b8:	3902      	subs	r1, #2
200004ba:	d8e2      	bhi.n	20000482 <RenderAttrib8_InLoop>
200004bc:	9f08      	ldr	r7, [sp, #32]
200004be:	d0bd      	beq.n	2000043c <RenderAttrib8_Last>
200004c0:	9a01      	ldr	r2, [sp, #4]
200004c2:	e7b3      	b.n	2000042c <RenderAttrib8_OutLoop>

200004c4 <RenderAttrib8_Addr>:
200004c4:	200381e4 	.word	0x200381e4

200004c8 <MemSet4>:
200004c8:	b5f0      	push	{r4, r5, r6, r7, lr}
200004ca:	460b      	mov	r3, r1
200004cc:	460c      	mov	r4, r1
200004ce:	460d      	mov	r5, r1
200004d0:	460e      	mov	r6, r1
200004d2:	460f      	mov	r7, r1
200004d4:	e004      	b.n	200004e0 <MemSet4+0x18>
200004d6:	c0fa      	stmia	r0!, {r1, r3, r4, r5, r6, r7}
200004d8:	c0fa      	stmia	r0!, {r1, r3, r4, r5, r6, r7}
200004da:	c0fa      	stmia	r0!, {r1, r3, r4, r5, r6, r7}
200004dc:	c0fa      	stmia	r0!, {r1, r3, r4, r5, r6, r7}
200004de:	c0fa      	stmia	r0!, {r1, r3, r4, r5, r6, r7}
200004e0:	3a1e      	subs	r2, #30
200004e2:	daf8      	bge.n	200004d6 <MemSet4+0xe>
200004e4:	321e      	adds	r2, #30
200004e6:	e000      	b.n	200004ea <MemSet4+0x22>
200004e8:	c0fa      	stmia	r0!, {r1, r3, r4, r5, r6, r7}
200004ea:	3a06      	subs	r2, #6
200004ec:	dafc      	bge.n	200004e8 <MemSet4+0x20>
200004ee:	3206      	adds	r2, #6
200004f0:	e000      	b.n	200004f4 <MemSet4+0x2c>
200004f2:	c002      	stmia	r0!, {r1}
200004f4:	3a01      	subs	r2, #1
200004f6:	dafc      	bge.n	200004f2 <MemSet4+0x2a>
200004f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

200004fc <RenderCText>:
200004fc:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
200004fe:	9c08      	ldr	r4, [sp, #32]
20000500:	4e40      	ldr	r6, [pc, #256]	; (20000604 <RenderCText_pSioBase>)
20000502:	6632      	str	r2, [r6, #96]	; 0x60
20000504:	8a62      	ldrh	r2, [r4, #18]
20000506:	6672      	str	r2, [r6, #100]	; 0x64
20000508:	8925      	ldrh	r5, [r4, #8]
2000050a:	2703      	movs	r7, #3
2000050c:	43bd      	bics	r5, r7
2000050e:	9508      	str	r5, [sp, #32]
20000510:	43b9      	bics	r1, r7
20000512:	43bb      	bics	r3, r7
20000514:	9302      	str	r3, [sp, #8]
20000516:	6f75      	ldr	r5, [r6, #116]	; 0x74
20000518:	6f32      	ldr	r2, [r6, #112]	; 0x70
2000051a:	022d      	lsls	r5, r5, #8
2000051c:	6963      	ldr	r3, [r4, #20]
2000051e:	442b      	add	r3, r5
20000520:	8865      	ldrh	r5, [r4, #2]
20000522:	436a      	muls	r2, r5
20000524:	68e5      	ldr	r5, [r4, #12]
20000526:	442a      	add	r2, r5
20000528:	9201      	str	r2, [sp, #4]
2000052a:	08ce      	lsrs	r6, r1, #3
2000052c:	4432      	add	r2, r6
2000052e:	4432      	add	r2, r6
20000530:	4432      	add	r2, r6
20000532:	4d33      	ldr	r5, [pc, #204]	; (20000600 <RenderCText_Addr>)
20000534:	46ae      	mov	lr, r5
20000536:	074e      	lsls	r6, r1, #29
20000538:	d51c      	bpl.n	20000574 <RenderCText+0x78>
2000053a:	7815      	ldrb	r5, [r2, #0]
2000053c:	5d5d      	ldrb	r5, [r3, r5]
2000053e:	7854      	ldrb	r4, [r2, #1]
20000540:	0227      	lsls	r7, r4, #8
20000542:	4327      	orrs	r7, r4
20000544:	043c      	lsls	r4, r7, #16
20000546:	433c      	orrs	r4, r7
20000548:	7896      	ldrb	r6, [r2, #2]
2000054a:	3203      	adds	r2, #3
2000054c:	0237      	lsls	r7, r6, #8
2000054e:	4337      	orrs	r7, r6
20000550:	043e      	lsls	r6, r7, #16
20000552:	433e      	orrs	r6, r7
20000554:	4066      	eors	r6, r4
20000556:	00ed      	lsls	r5, r5, #3
20000558:	4475      	add	r5, lr
2000055a:	686f      	ldr	r7, [r5, #4]
2000055c:	4037      	ands	r7, r6
2000055e:	4067      	eors	r7, r4
20000560:	c080      	stmia	r0!, {r7}
20000562:	3104      	adds	r1, #4
20000564:	9f08      	ldr	r7, [sp, #32]
20000566:	42b9      	cmp	r1, r7
20000568:	d301      	bcc.n	2000056e <RenderCText+0x72>
2000056a:	2100      	movs	r1, #0
2000056c:	9a01      	ldr	r2, [sp, #4]
2000056e:	9f02      	ldr	r7, [sp, #8]
20000570:	3f04      	subs	r7, #4
20000572:	9702      	str	r7, [sp, #8]
20000574:	9f08      	ldr	r7, [sp, #32]
20000576:	1a7f      	subs	r7, r7, r1

20000578 <RenderCText_OutLoop>:
20000578:	9e02      	ldr	r6, [sp, #8]
2000057a:	42b7      	cmp	r7, r6
2000057c:	d900      	bls.n	20000580 <RenderCText_OutLoop+0x8>
2000057e:	4637      	mov	r7, r6
20000580:	2f08      	cmp	r7, #8
20000582:	d219      	bcs.n	200005b8 <RenderCText_Last+0x30>
20000584:	2f04      	cmp	r7, #4
20000586:	d316      	bcc.n	200005b6 <RenderCText_Last+0x2e>

20000588 <RenderCText_Last>:
20000588:	7815      	ldrb	r5, [r2, #0]
2000058a:	5d5d      	ldrb	r5, [r3, r5]
2000058c:	7854      	ldrb	r4, [r2, #1]
2000058e:	0221      	lsls	r1, r4, #8
20000590:	4321      	orrs	r1, r4
20000592:	040c      	lsls	r4, r1, #16
20000594:	430c      	orrs	r4, r1
20000596:	7896      	ldrb	r6, [r2, #2]
20000598:	3203      	adds	r2, #3
2000059a:	0231      	lsls	r1, r6, #8
2000059c:	4331      	orrs	r1, r6
2000059e:	040e      	lsls	r6, r1, #16
200005a0:	430e      	orrs	r6, r1
200005a2:	4066      	eors	r6, r4
200005a4:	00ed      	lsls	r5, r5, #3
200005a6:	4475      	add	r5, lr
200005a8:	6829      	ldr	r1, [r5, #0]
200005aa:	4031      	ands	r1, r6
200005ac:	4061      	eors	r1, r4
200005ae:	c002      	stmia	r0!, {r1}
200005b0:	9a01      	ldr	r2, [sp, #4]
200005b2:	2f04      	cmp	r7, #4
200005b4:	d8e0      	bhi.n	20000578 <RenderCText_OutLoop>
200005b6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
200005b8:	08b9      	lsrs	r1, r7, #2
200005ba:	008d      	lsls	r5, r1, #2
200005bc:	1b76      	subs	r6, r6, r5
200005be:	9602      	str	r6, [sp, #8]
200005c0:	3901      	subs	r1, #1

200005c2 <RenderCText_InLoop>:
200005c2:	7815      	ldrb	r5, [r2, #0]
200005c4:	5d5d      	ldrb	r5, [r3, r5]
200005c6:	7854      	ldrb	r4, [r2, #1]
200005c8:	0227      	lsls	r7, r4, #8
200005ca:	4327      	orrs	r7, r4
200005cc:	043c      	lsls	r4, r7, #16
200005ce:	433c      	orrs	r4, r7
200005d0:	7896      	ldrb	r6, [r2, #2]
200005d2:	3203      	adds	r2, #3
200005d4:	0237      	lsls	r7, r6, #8
200005d6:	4337      	orrs	r7, r6
200005d8:	043e      	lsls	r6, r7, #16
200005da:	433e      	orrs	r6, r7
200005dc:	4066      	eors	r6, r4
200005de:	00ed      	lsls	r5, r5, #3
200005e0:	4475      	add	r5, lr
200005e2:	682f      	ldr	r7, [r5, #0]
200005e4:	4037      	ands	r7, r6
200005e6:	4067      	eors	r7, r4
200005e8:	c080      	stmia	r0!, {r7}
200005ea:	686f      	ldr	r7, [r5, #4]
200005ec:	4037      	ands	r7, r6
200005ee:	4067      	eors	r7, r4
200005f0:	c080      	stmia	r0!, {r7}
200005f2:	3902      	subs	r1, #2
200005f4:	d8e5      	bhi.n	200005c2 <RenderCText_InLoop>
200005f6:	9f08      	ldr	r7, [sp, #32]
200005f8:	d0c6      	beq.n	20000588 <RenderCText_Last>
200005fa:	9a01      	ldr	r2, [sp, #4]
200005fc:	e7bc      	b.n	20000578 <RenderCText_OutLoop>
200005fe:	46c0      	nop			; (mov r8, r8)

20000600 <RenderCText_Addr>:
20000600:	200381e4 	.word	0x200381e4

20000604 <RenderCText_pSioBase>:
20000604:	d0000000 	.word	0xd0000000

20000608 <RenderDText>:
20000608:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
2000060a:	4644      	mov	r4, r8
2000060c:	b410      	push	{r4}
2000060e:	9c09      	ldr	r4, [sp, #36]	; 0x24
20000610:	4e68      	ldr	r6, [pc, #416]	; (200007b4 <RenderDText_pSioBase>)
20000612:	6632      	str	r2, [r6, #96]	; 0x60
20000614:	7ce2      	ldrb	r2, [r4, #19]
20000616:	6672      	str	r2, [r6, #100]	; 0x64
20000618:	8925      	ldrh	r5, [r4, #8]
2000061a:	2703      	movs	r7, #3
2000061c:	43bd      	bics	r5, r7
2000061e:	9509      	str	r5, [sp, #36]	; 0x24
20000620:	43b9      	bics	r1, r7
20000622:	43bb      	bics	r3, r7
20000624:	9303      	str	r3, [sp, #12]
20000626:	6f75      	ldr	r5, [r6, #116]	; 0x74
20000628:	6f32      	ldr	r2, [r6, #112]	; 0x70
2000062a:	022d      	lsls	r5, r5, #8
2000062c:	6963      	ldr	r3, [r4, #20]
2000062e:	442b      	add	r3, r5
20000630:	4698      	mov	r8, r3
20000632:	8865      	ldrh	r5, [r4, #2]
20000634:	436a      	muls	r2, r5
20000636:	68e5      	ldr	r5, [r4, #12]
20000638:	442a      	add	r2, r5
2000063a:	9202      	str	r2, [sp, #8]
2000063c:	69a3      	ldr	r3, [r4, #24]
2000063e:	9301      	str	r3, [sp, #4]
20000640:	08ce      	lsrs	r6, r1, #3
20000642:	00b6      	lsls	r6, r6, #2
20000644:	4433      	add	r3, r6
20000646:	090e      	lsrs	r6, r1, #4
20000648:	4432      	add	r2, r6
2000064a:	7ca4      	ldrb	r4, [r4, #18]
2000064c:	0225      	lsls	r5, r4, #8
2000064e:	4325      	orrs	r5, r4
20000650:	042c      	lsls	r4, r5, #16
20000652:	432c      	orrs	r4, r5
20000654:	4d56      	ldr	r5, [pc, #344]	; (200007b0 <RenderDText_Addr>)
20000656:	46ae      	mov	lr, r5
20000658:	070e      	lsls	r6, r1, #28
2000065a:	d037      	beq.n	200006cc <RenderDText+0xc4>
2000065c:	0f35      	lsrs	r5, r6, #28
2000065e:	2610      	movs	r6, #16
20000660:	1b76      	subs	r6, r6, r5
20000662:	1989      	adds	r1, r1, r6
20000664:	9f03      	ldr	r7, [sp, #12]
20000666:	1bbf      	subs	r7, r7, r6
20000668:	9703      	str	r7, [sp, #12]
2000066a:	b402      	push	{r1}
2000066c:	7817      	ldrb	r7, [r2, #0]
2000066e:	3201      	adds	r2, #1
20000670:	4447      	add	r7, r8
20000672:	783f      	ldrb	r7, [r7, #0]
20000674:	cb40      	ldmia	r3!, {r6}
20000676:	4066      	eors	r6, r4
20000678:	00ff      	lsls	r7, r7, #3
2000067a:	4477      	add	r7, lr
2000067c:	6839      	ldr	r1, [r7, #0]
2000067e:	4031      	ands	r1, r6
20000680:	4061      	eors	r1, r4
20000682:	2d04      	cmp	r5, #4
20000684:	d806      	bhi.n	20000694 <RenderDText+0x8c>
20000686:	0c09      	lsrs	r1, r1, #16
20000688:	7001      	strb	r1, [r0, #0]
2000068a:	7041      	strb	r1, [r0, #1]
2000068c:	0a09      	lsrs	r1, r1, #8
2000068e:	7081      	strb	r1, [r0, #2]
20000690:	70c1      	strb	r1, [r0, #3]
20000692:	3004      	adds	r0, #4
20000694:	cb40      	ldmia	r3!, {r6}
20000696:	4066      	eors	r6, r4
20000698:	6879      	ldr	r1, [r7, #4]
2000069a:	4031      	ands	r1, r6
2000069c:	4061      	eors	r1, r4
2000069e:	2d08      	cmp	r5, #8
200006a0:	d806      	bhi.n	200006b0 <RenderDText+0xa8>
200006a2:	7001      	strb	r1, [r0, #0]
200006a4:	7041      	strb	r1, [r0, #1]
200006a6:	0a09      	lsrs	r1, r1, #8
200006a8:	7081      	strb	r1, [r0, #2]
200006aa:	70c1      	strb	r1, [r0, #3]
200006ac:	0209      	lsls	r1, r1, #8
200006ae:	3004      	adds	r0, #4
200006b0:	0c09      	lsrs	r1, r1, #16
200006b2:	7001      	strb	r1, [r0, #0]
200006b4:	7041      	strb	r1, [r0, #1]
200006b6:	0a09      	lsrs	r1, r1, #8
200006b8:	7081      	strb	r1, [r0, #2]
200006ba:	70c1      	strb	r1, [r0, #3]
200006bc:	3004      	adds	r0, #4
200006be:	bc02      	pop	{r1}
200006c0:	9f09      	ldr	r7, [sp, #36]	; 0x24
200006c2:	42b9      	cmp	r1, r7
200006c4:	d302      	bcc.n	200006cc <RenderDText+0xc4>
200006c6:	2100      	movs	r1, #0
200006c8:	9a02      	ldr	r2, [sp, #8]
200006ca:	9b01      	ldr	r3, [sp, #4]
200006cc:	9f09      	ldr	r7, [sp, #36]	; 0x24
200006ce:	1a7f      	subs	r7, r7, r1

200006d0 <RenderDText_OutLoop>:
200006d0:	9e03      	ldr	r6, [sp, #12]
200006d2:	42b7      	cmp	r7, r6
200006d4:	d900      	bls.n	200006d8 <RenderDText_OutLoop+0x8>
200006d6:	4637      	mov	r7, r6
200006d8:	2f10      	cmp	r7, #16
200006da:	d232      	bcs.n	20000742 <RenderDText_Last+0x60>
200006dc:	2f04      	cmp	r7, #4
200006de:	d32d      	bcc.n	2000073c <RenderDText_Last+0x5a>
200006e0:	4639      	mov	r1, r7

200006e2 <RenderDText_Last>:
200006e2:	b480      	push	{r7}
200006e4:	7817      	ldrb	r7, [r2, #0]
200006e6:	3201      	adds	r2, #1
200006e8:	4447      	add	r7, r8
200006ea:	783f      	ldrb	r7, [r7, #0]
200006ec:	cb40      	ldmia	r3!, {r6}
200006ee:	4066      	eors	r6, r4
200006f0:	00ff      	lsls	r7, r7, #3
200006f2:	4477      	add	r7, lr
200006f4:	683d      	ldr	r5, [r7, #0]
200006f6:	4035      	ands	r5, r6
200006f8:	4065      	eors	r5, r4
200006fa:	7005      	strb	r5, [r0, #0]
200006fc:	7045      	strb	r5, [r0, #1]
200006fe:	0a2d      	lsrs	r5, r5, #8
20000700:	7085      	strb	r5, [r0, #2]
20000702:	70c5      	strb	r5, [r0, #3]
20000704:	3004      	adds	r0, #4
20000706:	2904      	cmp	r1, #4
20000708:	d913      	bls.n	20000732 <RenderDText_Last+0x50>
2000070a:	0a2d      	lsrs	r5, r5, #8
2000070c:	7005      	strb	r5, [r0, #0]
2000070e:	7045      	strb	r5, [r0, #1]
20000710:	0a2d      	lsrs	r5, r5, #8
20000712:	7085      	strb	r5, [r0, #2]
20000714:	70c5      	strb	r5, [r0, #3]
20000716:	3004      	adds	r0, #4
20000718:	2908      	cmp	r1, #8
2000071a:	d90a      	bls.n	20000732 <RenderDText_Last+0x50>
2000071c:	cb40      	ldmia	r3!, {r6}
2000071e:	4066      	eors	r6, r4
20000720:	687f      	ldr	r7, [r7, #4]
20000722:	4037      	ands	r7, r6
20000724:	4067      	eors	r7, r4
20000726:	7007      	strb	r7, [r0, #0]
20000728:	7047      	strb	r7, [r0, #1]
2000072a:	0a3f      	lsrs	r7, r7, #8
2000072c:	7087      	strb	r7, [r0, #2]
2000072e:	70c7      	strb	r7, [r0, #3]
20000730:	3004      	adds	r0, #4
20000732:	bc80      	pop	{r7}
20000734:	9a02      	ldr	r2, [sp, #8]
20000736:	9b01      	ldr	r3, [sp, #4]
20000738:	2f10      	cmp	r7, #16
2000073a:	d2c9      	bcs.n	200006d0 <RenderDText_OutLoop>
2000073c:	bc10      	pop	{r4}
2000073e:	46a0      	mov	r8, r4
20000740:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
20000742:	08b9      	lsrs	r1, r7, #2
20000744:	008d      	lsls	r5, r1, #2
20000746:	1b76      	subs	r6, r6, r5
20000748:	9603      	str	r6, [sp, #12]
2000074a:	3903      	subs	r1, #3

2000074c <RenderDText_InLoop>:
2000074c:	7817      	ldrb	r7, [r2, #0]
2000074e:	3201      	adds	r2, #1
20000750:	4447      	add	r7, r8
20000752:	783f      	ldrb	r7, [r7, #0]
20000754:	cb40      	ldmia	r3!, {r6}
20000756:	4066      	eors	r6, r4
20000758:	00ff      	lsls	r7, r7, #3
2000075a:	4477      	add	r7, lr
2000075c:	683d      	ldr	r5, [r7, #0]
2000075e:	4035      	ands	r5, r6
20000760:	4065      	eors	r5, r4
20000762:	7005      	strb	r5, [r0, #0]
20000764:	7045      	strb	r5, [r0, #1]
20000766:	0a2d      	lsrs	r5, r5, #8
20000768:	7085      	strb	r5, [r0, #2]
2000076a:	70c5      	strb	r5, [r0, #3]
2000076c:	0a2d      	lsrs	r5, r5, #8
2000076e:	7105      	strb	r5, [r0, #4]
20000770:	7145      	strb	r5, [r0, #5]
20000772:	0a2d      	lsrs	r5, r5, #8
20000774:	7185      	strb	r5, [r0, #6]
20000776:	71c5      	strb	r5, [r0, #7]
20000778:	3008      	adds	r0, #8
2000077a:	cb40      	ldmia	r3!, {r6}
2000077c:	4066      	eors	r6, r4
2000077e:	687f      	ldr	r7, [r7, #4]
20000780:	4037      	ands	r7, r6
20000782:	4067      	eors	r7, r4
20000784:	7007      	strb	r7, [r0, #0]
20000786:	7047      	strb	r7, [r0, #1]
20000788:	0a3f      	lsrs	r7, r7, #8
2000078a:	7087      	strb	r7, [r0, #2]
2000078c:	70c7      	strb	r7, [r0, #3]
2000078e:	0a3f      	lsrs	r7, r7, #8
20000790:	7107      	strb	r7, [r0, #4]
20000792:	7147      	strb	r7, [r0, #5]
20000794:	0a3f      	lsrs	r7, r7, #8
20000796:	7187      	strb	r7, [r0, #6]
20000798:	71c7      	strb	r7, [r0, #7]
2000079a:	3008      	adds	r0, #8
2000079c:	3904      	subs	r1, #4
2000079e:	d8d5      	bhi.n	2000074c <RenderDText_InLoop>
200007a0:	9f09      	ldr	r7, [sp, #36]	; 0x24
200007a2:	3103      	adds	r1, #3
200007a4:	0089      	lsls	r1, r1, #2
200007a6:	d19c      	bne.n	200006e2 <RenderDText_Last>
200007a8:	9a02      	ldr	r2, [sp, #8]
200007aa:	9b01      	ldr	r3, [sp, #4]
200007ac:	e790      	b.n	200006d0 <RenderDText_OutLoop>
200007ae:	46c0      	nop			; (mov r8, r8)

200007b0 <RenderDText_Addr>:
200007b0:	200381e4 	.word	0x200381e4

200007b4 <RenderDText_pSioBase>:
200007b4:	d0000000 	.word	0xd0000000

200007b8 <RenderFText>:
200007b8:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
200007ba:	9c08      	ldr	r4, [sp, #32]
200007bc:	4e3a      	ldr	r6, [pc, #232]	; (200008a8 <RenderFText_pSioBase>)
200007be:	6632      	str	r2, [r6, #96]	; 0x60
200007c0:	8a62      	ldrh	r2, [r4, #18]
200007c2:	6672      	str	r2, [r6, #100]	; 0x64
200007c4:	8925      	ldrh	r5, [r4, #8]
200007c6:	2703      	movs	r7, #3
200007c8:	43bd      	bics	r5, r7
200007ca:	9508      	str	r5, [sp, #32]
200007cc:	43b9      	bics	r1, r7
200007ce:	43bb      	bics	r3, r7
200007d0:	9302      	str	r3, [sp, #8]
200007d2:	6f75      	ldr	r5, [r6, #116]	; 0x74
200007d4:	6f32      	ldr	r2, [r6, #112]	; 0x70
200007d6:	022d      	lsls	r5, r5, #8
200007d8:	6963      	ldr	r3, [r4, #20]
200007da:	442b      	add	r3, r5
200007dc:	8865      	ldrh	r5, [r4, #2]
200007de:	436a      	muls	r2, r5
200007e0:	68e5      	ldr	r5, [r4, #12]
200007e2:	442a      	add	r2, r5
200007e4:	9201      	str	r2, [sp, #4]
200007e6:	08ce      	lsrs	r6, r1, #3
200007e8:	0076      	lsls	r6, r6, #1
200007ea:	4432      	add	r2, r6
200007ec:	7e24      	ldrb	r4, [r4, #24]
200007ee:	0225      	lsls	r5, r4, #8
200007f0:	4325      	orrs	r5, r4
200007f2:	042c      	lsls	r4, r5, #16
200007f4:	432c      	orrs	r4, r5
200007f6:	4d2b      	ldr	r5, [pc, #172]	; (200008a4 <RenderFText_Addr>)
200007f8:	46ae      	mov	lr, r5
200007fa:	074e      	lsls	r6, r1, #29
200007fc:	d517      	bpl.n	2000082e <RenderFText+0x76>
200007fe:	7815      	ldrb	r5, [r2, #0]
20000800:	5d5d      	ldrb	r5, [r3, r5]
20000802:	7856      	ldrb	r6, [r2, #1]
20000804:	3202      	adds	r2, #2
20000806:	0237      	lsls	r7, r6, #8
20000808:	4337      	orrs	r7, r6
2000080a:	043e      	lsls	r6, r7, #16
2000080c:	433e      	orrs	r6, r7
2000080e:	4066      	eors	r6, r4
20000810:	00ed      	lsls	r5, r5, #3
20000812:	4475      	add	r5, lr
20000814:	686f      	ldr	r7, [r5, #4]
20000816:	4037      	ands	r7, r6
20000818:	4067      	eors	r7, r4
2000081a:	c080      	stmia	r0!, {r7}
2000081c:	3104      	adds	r1, #4
2000081e:	9f08      	ldr	r7, [sp, #32]
20000820:	42b9      	cmp	r1, r7
20000822:	d301      	bcc.n	20000828 <RenderFText+0x70>
20000824:	2100      	movs	r1, #0
20000826:	9a01      	ldr	r2, [sp, #4]
20000828:	9f02      	ldr	r7, [sp, #8]
2000082a:	3f04      	subs	r7, #4
2000082c:	9702      	str	r7, [sp, #8]
2000082e:	9f08      	ldr	r7, [sp, #32]
20000830:	1a7f      	subs	r7, r7, r1

20000832 <RenderFText_OutLoop>:
20000832:	9e02      	ldr	r6, [sp, #8]
20000834:	42b7      	cmp	r7, r6
20000836:	d900      	bls.n	2000083a <RenderFText_OutLoop+0x8>
20000838:	4637      	mov	r7, r6
2000083a:	2f08      	cmp	r7, #8
2000083c:	d214      	bcs.n	20000868 <RenderFText_Last+0x26>
2000083e:	2f04      	cmp	r7, #4
20000840:	d311      	bcc.n	20000866 <RenderFText_Last+0x24>

20000842 <RenderFText_Last>:
20000842:	7815      	ldrb	r5, [r2, #0]
20000844:	5d5d      	ldrb	r5, [r3, r5]
20000846:	7856      	ldrb	r6, [r2, #1]
20000848:	3202      	adds	r2, #2
2000084a:	0231      	lsls	r1, r6, #8
2000084c:	4331      	orrs	r1, r6
2000084e:	040e      	lsls	r6, r1, #16
20000850:	430e      	orrs	r6, r1
20000852:	4066      	eors	r6, r4
20000854:	00ed      	lsls	r5, r5, #3
20000856:	4475      	add	r5, lr
20000858:	6829      	ldr	r1, [r5, #0]
2000085a:	4031      	ands	r1, r6
2000085c:	4061      	eors	r1, r4
2000085e:	c002      	stmia	r0!, {r1}
20000860:	9a01      	ldr	r2, [sp, #4]
20000862:	2f04      	cmp	r7, #4
20000864:	d8e5      	bhi.n	20000832 <RenderFText_OutLoop>
20000866:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
20000868:	08b9      	lsrs	r1, r7, #2
2000086a:	008d      	lsls	r5, r1, #2
2000086c:	1b76      	subs	r6, r6, r5
2000086e:	9602      	str	r6, [sp, #8]
20000870:	3901      	subs	r1, #1

20000872 <RenderFText_InLoop>:
20000872:	7815      	ldrb	r5, [r2, #0]
20000874:	5d5d      	ldrb	r5, [r3, r5]
20000876:	7856      	ldrb	r6, [r2, #1]
20000878:	3202      	adds	r2, #2
2000087a:	0237      	lsls	r7, r6, #8
2000087c:	4337      	orrs	r7, r6
2000087e:	043e      	lsls	r6, r7, #16
20000880:	433e      	orrs	r6, r7
20000882:	4066      	eors	r6, r4
20000884:	00ed      	lsls	r5, r5, #3
20000886:	4475      	add	r5, lr
20000888:	682f      	ldr	r7, [r5, #0]
2000088a:	4037      	ands	r7, r6
2000088c:	4067      	eors	r7, r4
2000088e:	c080      	stmia	r0!, {r7}
20000890:	686f      	ldr	r7, [r5, #4]
20000892:	4037      	ands	r7, r6
20000894:	4067      	eors	r7, r4
20000896:	c080      	stmia	r0!, {r7}
20000898:	3902      	subs	r1, #2
2000089a:	d8ea      	bhi.n	20000872 <RenderFText_InLoop>
2000089c:	9f08      	ldr	r7, [sp, #32]
2000089e:	d0d0      	beq.n	20000842 <RenderFText_Last>
200008a0:	9a01      	ldr	r2, [sp, #4]
200008a2:	e7c6      	b.n	20000832 <RenderFText_OutLoop>

200008a4 <RenderFText_Addr>:
200008a4:	200381e4 	.word	0x200381e4

200008a8 <RenderFText_pSioBase>:
200008a8:	d0000000 	.word	0xd0000000

200008ac <RenderGraph1>:
200008ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
200008ae:	9c06      	ldr	r4, [sp, #24]
200008b0:	8925      	ldrh	r5, [r4, #8]
200008b2:	2703      	movs	r7, #3
200008b4:	43bd      	bics	r5, r7
200008b6:	9506      	str	r5, [sp, #24]
200008b8:	43b9      	bics	r1, r7
200008ba:	43bb      	bics	r3, r7
200008bc:	9300      	str	r3, [sp, #0]
200008be:	8865      	ldrh	r5, [r4, #2]
200008c0:	436a      	muls	r2, r5
200008c2:	68e5      	ldr	r5, [r4, #12]
200008c4:	442a      	add	r2, r5
200008c6:	4696      	mov	lr, r2
200008c8:	08ca      	lsrs	r2, r1, #3
200008ca:	4472      	add	r2, lr
200008cc:	7d66      	ldrb	r6, [r4, #21]
200008ce:	0237      	lsls	r7, r6, #8
200008d0:	4337      	orrs	r7, r6
200008d2:	043e      	lsls	r6, r7, #16
200008d4:	433e      	orrs	r6, r7
200008d6:	7d24      	ldrb	r4, [r4, #20]
200008d8:	0225      	lsls	r5, r4, #8
200008da:	4325      	orrs	r5, r4
200008dc:	042c      	lsls	r4, r5, #16
200008de:	432c      	orrs	r4, r5
200008e0:	4066      	eors	r6, r4
200008e2:	4b20      	ldr	r3, [pc, #128]	; (20000964 <RenderGraph1_Addr>)
200008e4:	074d      	lsls	r5, r1, #29
200008e6:	d510      	bpl.n	2000090a <RenderGraph1+0x5e>
200008e8:	7815      	ldrb	r5, [r2, #0]
200008ea:	3201      	adds	r2, #1
200008ec:	00ed      	lsls	r5, r5, #3
200008ee:	441d      	add	r5, r3
200008f0:	686f      	ldr	r7, [r5, #4]
200008f2:	4037      	ands	r7, r6
200008f4:	4067      	eors	r7, r4
200008f6:	c080      	stmia	r0!, {r7}
200008f8:	3104      	adds	r1, #4
200008fa:	9f06      	ldr	r7, [sp, #24]
200008fc:	42b9      	cmp	r1, r7
200008fe:	d301      	bcc.n	20000904 <RenderGraph1+0x58>
20000900:	2100      	movs	r1, #0
20000902:	4672      	mov	r2, lr
20000904:	9f00      	ldr	r7, [sp, #0]
20000906:	3f04      	subs	r7, #4
20000908:	9700      	str	r7, [sp, #0]
2000090a:	9f06      	ldr	r7, [sp, #24]
2000090c:	1a7f      	subs	r7, r7, r1

2000090e <RenderGraph1_OutLoop>:
2000090e:	9d00      	ldr	r5, [sp, #0]
20000910:	42af      	cmp	r7, r5
20000912:	d900      	bls.n	20000916 <RenderGraph1_OutLoop+0x8>
20000914:	462f      	mov	r7, r5
20000916:	2f08      	cmp	r7, #8
20000918:	d20d      	bcs.n	20000936 <RenderGraph1_Last+0x18>
2000091a:	2f04      	cmp	r7, #4
2000091c:	d30a      	bcc.n	20000934 <RenderGraph1_Last+0x16>

2000091e <RenderGraph1_Last>:
2000091e:	7815      	ldrb	r5, [r2, #0]
20000920:	3201      	adds	r2, #1
20000922:	00ed      	lsls	r5, r5, #3
20000924:	441d      	add	r5, r3
20000926:	6829      	ldr	r1, [r5, #0]
20000928:	4031      	ands	r1, r6
2000092a:	4061      	eors	r1, r4
2000092c:	c002      	stmia	r0!, {r1}
2000092e:	4672      	mov	r2, lr
20000930:	2f04      	cmp	r7, #4
20000932:	d8ec      	bhi.n	2000090e <RenderGraph1_OutLoop>
20000934:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
20000936:	08b9      	lsrs	r1, r7, #2
20000938:	008f      	lsls	r7, r1, #2
2000093a:	1bed      	subs	r5, r5, r7
2000093c:	9500      	str	r5, [sp, #0]
2000093e:	3901      	subs	r1, #1

20000940 <RenderGraph1_InLoop>:
20000940:	7815      	ldrb	r5, [r2, #0]
20000942:	3201      	adds	r2, #1
20000944:	00ed      	lsls	r5, r5, #3
20000946:	441d      	add	r5, r3
20000948:	682f      	ldr	r7, [r5, #0]
2000094a:	4037      	ands	r7, r6
2000094c:	4067      	eors	r7, r4
2000094e:	c080      	stmia	r0!, {r7}
20000950:	686f      	ldr	r7, [r5, #4]
20000952:	4037      	ands	r7, r6
20000954:	4067      	eors	r7, r4
20000956:	c080      	stmia	r0!, {r7}
20000958:	3902      	subs	r1, #2
2000095a:	d8f1      	bhi.n	20000940 <RenderGraph1_InLoop>
2000095c:	9f06      	ldr	r7, [sp, #24]
2000095e:	d0de      	beq.n	2000091e <RenderGraph1_Last>
20000960:	4672      	mov	r2, lr
20000962:	e7d4      	b.n	2000090e <RenderGraph1_OutLoop>

20000964 <RenderGraph1_Addr>:
20000964:	200381e4 	.word	0x200381e4

20000968 <RenderGraph2>:
20000968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2000096a:	9c06      	ldr	r4, [sp, #24]
2000096c:	8927      	ldrh	r7, [r4, #8]
2000096e:	2603      	movs	r6, #3
20000970:	43b7      	bics	r7, r6
20000972:	43b1      	bics	r1, r6
20000974:	43b3      	bics	r3, r6
20000976:	9300      	str	r3, [sp, #0]
20000978:	8865      	ldrh	r5, [r4, #2]
2000097a:	436a      	muls	r2, r5
2000097c:	68e5      	ldr	r5, [r4, #12]
2000097e:	442a      	add	r2, r5
20000980:	4696      	mov	lr, r2
20000982:	088e      	lsrs	r6, r1, #2
20000984:	4432      	add	r2, r6
20000986:	6963      	ldr	r3, [r4, #20]
20000988:	1a7e      	subs	r6, r7, r1

2000098a <RenderGraph2_OutLoop>:
2000098a:	9c00      	ldr	r4, [sp, #0]
2000098c:	42a6      	cmp	r6, r4
2000098e:	d900      	bls.n	20000992 <RenderGraph2_OutLoop+0x8>
20000990:	4626      	mov	r6, r4
20000992:	2e04      	cmp	r6, #4
20000994:	d200      	bcs.n	20000998 <RenderGraph2_OutLoop+0xe>
20000996:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
20000998:	08b1      	lsrs	r1, r6, #2
2000099a:	008e      	lsls	r6, r1, #2
2000099c:	1ba4      	subs	r4, r4, r6
2000099e:	9400      	str	r4, [sp, #0]
200009a0:	0849      	lsrs	r1, r1, #1
200009a2:	d306      	bcc.n	200009b2 <RenderGraph2_InLoop>
200009a4:	7814      	ldrb	r4, [r2, #0]
200009a6:	3201      	adds	r2, #1
200009a8:	00a4      	lsls	r4, r4, #2
200009aa:	591d      	ldr	r5, [r3, r4]
200009ac:	c020      	stmia	r0!, {r5}
200009ae:	4209      	tst	r1, r1
200009b0:	d009      	beq.n	200009c6 <RenderGraph2_EndLoop>

200009b2 <RenderGraph2_InLoop>:
200009b2:	7814      	ldrb	r4, [r2, #0]
200009b4:	00a4      	lsls	r4, r4, #2
200009b6:	591d      	ldr	r5, [r3, r4]
200009b8:	7854      	ldrb	r4, [r2, #1]
200009ba:	3202      	adds	r2, #2
200009bc:	00a4      	lsls	r4, r4, #2
200009be:	591e      	ldr	r6, [r3, r4]
200009c0:	c060      	stmia	r0!, {r5, r6}
200009c2:	3901      	subs	r1, #1
200009c4:	d1f5      	bne.n	200009b2 <RenderGraph2_InLoop>

200009c6 <RenderGraph2_EndLoop>:
200009c6:	463e      	mov	r6, r7
200009c8:	4672      	mov	r2, lr
200009ca:	e7de      	b.n	2000098a <RenderGraph2_OutLoop>

200009cc <RenderGraph4>:
200009cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
200009ce:	9c06      	ldr	r4, [sp, #24]
200009d0:	8927      	ldrh	r7, [r4, #8]
200009d2:	2603      	movs	r6, #3
200009d4:	43b7      	bics	r7, r6
200009d6:	9706      	str	r7, [sp, #24]
200009d8:	43b1      	bics	r1, r6
200009da:	43b3      	bics	r3, r6
200009dc:	9300      	str	r3, [sp, #0]
200009de:	8865      	ldrh	r5, [r4, #2]
200009e0:	436a      	muls	r2, r5
200009e2:	68e5      	ldr	r5, [r4, #12]
200009e4:	442a      	add	r2, r5
200009e6:	4696      	mov	lr, r2
200009e8:	084e      	lsrs	r6, r1, #1
200009ea:	4432      	add	r2, r6
200009ec:	6963      	ldr	r3, [r4, #20]
200009ee:	9e06      	ldr	r6, [sp, #24]
200009f0:	1a76      	subs	r6, r6, r1

200009f2 <RenderGraph4_OutLoop>:
200009f2:	9c00      	ldr	r4, [sp, #0]
200009f4:	42a6      	cmp	r6, r4
200009f6:	d900      	bls.n	200009fa <RenderGraph4_OutLoop+0x8>
200009f8:	4626      	mov	r6, r4
200009fa:	2e04      	cmp	r6, #4
200009fc:	d200      	bcs.n	20000a00 <RenderGraph4_OutLoop+0xe>
200009fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
20000a00:	08b1      	lsrs	r1, r6, #2
20000a02:	008e      	lsls	r6, r1, #2
20000a04:	1ba4      	subs	r4, r4, r6
20000a06:	9400      	str	r4, [sp, #0]
20000a08:	0849      	lsrs	r1, r1, #1
20000a0a:	d30b      	bcc.n	20000a24 <RenderGraph4_InLoop>
20000a0c:	7814      	ldrb	r4, [r2, #0]
20000a0e:	0064      	lsls	r4, r4, #1
20000a10:	5b1d      	ldrh	r5, [r3, r4]
20000a12:	7854      	ldrb	r4, [r2, #1]
20000a14:	3202      	adds	r2, #2
20000a16:	0064      	lsls	r4, r4, #1
20000a18:	5b1e      	ldrh	r6, [r3, r4]
20000a1a:	0436      	lsls	r6, r6, #16
20000a1c:	4335      	orrs	r5, r6
20000a1e:	c020      	stmia	r0!, {r5}
20000a20:	4209      	tst	r1, r1
20000a22:	d013      	beq.n	20000a4c <RenderGraph4_EndLoop>

20000a24 <RenderGraph4_InLoop>:
20000a24:	7814      	ldrb	r4, [r2, #0]
20000a26:	0064      	lsls	r4, r4, #1
20000a28:	5b1d      	ldrh	r5, [r3, r4]
20000a2a:	7854      	ldrb	r4, [r2, #1]
20000a2c:	0064      	lsls	r4, r4, #1
20000a2e:	5b1e      	ldrh	r6, [r3, r4]
20000a30:	0436      	lsls	r6, r6, #16
20000a32:	4335      	orrs	r5, r6
20000a34:	7894      	ldrb	r4, [r2, #2]
20000a36:	0064      	lsls	r4, r4, #1
20000a38:	5b1e      	ldrh	r6, [r3, r4]
20000a3a:	78d4      	ldrb	r4, [r2, #3]
20000a3c:	3204      	adds	r2, #4
20000a3e:	0064      	lsls	r4, r4, #1
20000a40:	5b1f      	ldrh	r7, [r3, r4]
20000a42:	043f      	lsls	r7, r7, #16
20000a44:	433e      	orrs	r6, r7
20000a46:	c060      	stmia	r0!, {r5, r6}
20000a48:	3901      	subs	r1, #1
20000a4a:	d1eb      	bne.n	20000a24 <RenderGraph4_InLoop>

20000a4c <RenderGraph4_EndLoop>:
20000a4c:	9e06      	ldr	r6, [sp, #24]
20000a4e:	4672      	mov	r2, lr
20000a50:	e7cf      	b.n	200009f2 <RenderGraph4_OutLoop>

20000a52 <RenderGrad1>:
20000a52:	2200      	movs	r2, #0

20000a54 <RenderGrad2>:
20000a54:	07d2      	lsls	r2, r2, #31
20000a56:	0fd2      	lsrs	r2, r2, #31

20000a58 <RenderGraph8>:
20000a58:	b5f0      	push	{r4, r5, r6, r7, lr}
20000a5a:	9c05      	ldr	r4, [sp, #20]
20000a5c:	8927      	ldrh	r7, [r4, #8]
20000a5e:	2603      	movs	r6, #3
20000a60:	43b7      	bics	r7, r6
20000a62:	43b1      	bics	r1, r6
20000a64:	43b3      	bics	r3, r6
20000a66:	8865      	ldrh	r5, [r4, #2]
20000a68:	436a      	muls	r2, r5
20000a6a:	68e5      	ldr	r5, [r4, #12]
20000a6c:	1954      	adds	r4, r2, r5
20000a6e:	1862      	adds	r2, r4, r1
20000a70:	1a79      	subs	r1, r7, r1
20000a72:	421b      	tst	r3, r3
20000a74:	d008      	beq.n	20000a88 <RenderGraph8+0x30>
20000a76:	4299      	cmp	r1, r3
20000a78:	d900      	bls.n	20000a7c <RenderGraph8+0x24>
20000a7a:	4619      	mov	r1, r3
20000a7c:	1a5b      	subs	r3, r3, r1
20000a7e:	0889      	lsrs	r1, r1, #2
20000a80:	c006      	stmia	r0!, {r1, r2}
20000a82:	4639      	mov	r1, r7
20000a84:	4622      	mov	r2, r4
20000a86:	e7f4      	b.n	20000a72 <RenderGraph8+0x1a>
20000a88:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

20000a8c <RenderGraph8Mat>:
20000a8c:	b5f0      	push	{r4, r5, r6, r7, lr}
20000a8e:	0859      	lsrs	r1, r3, #1
20000a90:	4249      	negs	r1, r1
20000a92:	468e      	mov	lr, r1
20000a94:	089f      	lsrs	r7, r3, #2
20000a96:	9c05      	ldr	r4, [sp, #20]
20000a98:	8961      	ldrh	r1, [r4, #10]
20000a9a:	0849      	lsrs	r1, r1, #1
20000a9c:	4249      	negs	r1, r1
20000a9e:	1889      	adds	r1, r1, r2
20000aa0:	468c      	mov	ip, r1
20000aa2:	8b21      	ldrh	r1, [r4, #24]
20000aa4:	8b62      	ldrh	r2, [r4, #26]
20000aa6:	4b2c      	ldr	r3, [pc, #176]	; (20000b58 <RenderGraph8Mat_Interp>)
20000aa8:	68e6      	ldr	r6, [r4, #12]
20000aaa:	611e      	str	r6, [r3, #16]
20000aac:	4e2b      	ldr	r6, [pc, #172]	; (20000b5c <RenderGraph8Mat_Ctrl>)
20000aae:	1a76      	subs	r6, r6, r1
20000ab0:	014d      	lsls	r5, r1, #5
20000ab2:	432e      	orrs	r6, r5
20000ab4:	3901      	subs	r1, #1
20000ab6:	188d      	adds	r5, r1, r2
20000ab8:	02ad      	lsls	r5, r5, #10
20000aba:	432e      	orrs	r6, r5
20000abc:	631e      	str	r6, [r3, #48]	; 0x30
20000abe:	4e27      	ldr	r6, [pc, #156]	; (20000b5c <RenderGraph8Mat_Ctrl>)
20000ac0:	0289      	lsls	r1, r1, #10
20000ac2:	430e      	orrs	r6, r1
20000ac4:	62de      	str	r6, [r3, #44]	; 0x2c
20000ac6:	6964      	ldr	r4, [r4, #20]
20000ac8:	6825      	ldr	r5, [r4, #0]
20000aca:	609d      	str	r5, [r3, #8]
20000acc:	68e6      	ldr	r6, [r4, #12]
20000ace:	60de      	str	r6, [r3, #12]
20000ad0:	4672      	mov	r2, lr
20000ad2:	4355      	muls	r5, r2
20000ad4:	4372      	muls	r2, r6
20000ad6:	6861      	ldr	r1, [r4, #4]
20000ad8:	4666      	mov	r6, ip
20000ada:	4371      	muls	r1, r6
20000adc:	186d      	adds	r5, r5, r1
20000ade:	68a1      	ldr	r1, [r4, #8]
20000ae0:	186d      	adds	r5, r5, r1
20000ae2:	601d      	str	r5, [r3, #0]
20000ae4:	6921      	ldr	r1, [r4, #16]
20000ae6:	4371      	muls	r1, r6
20000ae8:	1852      	adds	r2, r2, r1
20000aea:	6961      	ldr	r1, [r4, #20]
20000aec:	1852      	adds	r2, r2, r1
20000aee:	605a      	str	r2, [r3, #4]
20000af0:	087f      	lsrs	r7, r7, #1
20000af2:	d30e      	bcc.n	20000b12 <RenderGraph8Mat+0x86>
20000af4:	69dc      	ldr	r4, [r3, #28]
20000af6:	7826      	ldrb	r6, [r4, #0]
20000af8:	69dc      	ldr	r4, [r3, #28]
20000afa:	7825      	ldrb	r5, [r4, #0]
20000afc:	022d      	lsls	r5, r5, #8
20000afe:	432e      	orrs	r6, r5
20000b00:	69dc      	ldr	r4, [r3, #28]
20000b02:	7825      	ldrb	r5, [r4, #0]
20000b04:	042d      	lsls	r5, r5, #16
20000b06:	432e      	orrs	r6, r5
20000b08:	69dc      	ldr	r4, [r3, #28]
20000b0a:	7825      	ldrb	r5, [r4, #0]
20000b0c:	062d      	lsls	r5, r5, #24
20000b0e:	432e      	orrs	r6, r5
20000b10:	c040      	stmia	r0!, {r6}
20000b12:	423f      	tst	r7, r7
20000b14:	d01e      	beq.n	20000b54 <RenderGraph8Mat+0xc8>
20000b16:	69dc      	ldr	r4, [r3, #28]
20000b18:	7821      	ldrb	r1, [r4, #0]
20000b1a:	69dc      	ldr	r4, [r3, #28]
20000b1c:	7824      	ldrb	r4, [r4, #0]
20000b1e:	0224      	lsls	r4, r4, #8
20000b20:	4321      	orrs	r1, r4
20000b22:	69dc      	ldr	r4, [r3, #28]
20000b24:	7824      	ldrb	r4, [r4, #0]
20000b26:	0424      	lsls	r4, r4, #16
20000b28:	4321      	orrs	r1, r4
20000b2a:	69dc      	ldr	r4, [r3, #28]
20000b2c:	7824      	ldrb	r4, [r4, #0]
20000b2e:	0624      	lsls	r4, r4, #24
20000b30:	4321      	orrs	r1, r4
20000b32:	69dc      	ldr	r4, [r3, #28]
20000b34:	7822      	ldrb	r2, [r4, #0]
20000b36:	69dc      	ldr	r4, [r3, #28]
20000b38:	7824      	ldrb	r4, [r4, #0]
20000b3a:	0224      	lsls	r4, r4, #8
20000b3c:	4322      	orrs	r2, r4
20000b3e:	69dc      	ldr	r4, [r3, #28]
20000b40:	7824      	ldrb	r4, [r4, #0]
20000b42:	0424      	lsls	r4, r4, #16
20000b44:	4322      	orrs	r2, r4
20000b46:	69dc      	ldr	r4, [r3, #28]
20000b48:	7824      	ldrb	r4, [r4, #0]
20000b4a:	0624      	lsls	r4, r4, #24
20000b4c:	4322      	orrs	r2, r4
20000b4e:	c006      	stmia	r0!, {r1, r2}
20000b50:	3f01      	subs	r7, #1
20000b52:	d1e0      	bne.n	20000b16 <RenderGraph8Mat+0x8a>
20000b54:	bdf0      	pop	{r4, r5, r6, r7, pc}
20000b56:	46c0      	nop			; (mov r8, r8)

20000b58 <RenderGraph8Mat_Interp>:
20000b58:	d00000c0 	.word	0xd00000c0

20000b5c <RenderGraph8Mat_Ctrl>:
20000b5c:	0004000c 	.word	0x0004000c

20000b60 <RenderGraph8Persp>:
20000b60:	b5f0      	push	{r4, r5, r6, r7, lr}
20000b62:	9c05      	ldr	r4, [sp, #20]
20000b64:	8961      	ldrh	r1, [r4, #10]
20000b66:	1a52      	subs	r2, r2, r1
20000b68:	4694      	mov	ip, r2
20000b6a:	030e      	lsls	r6, r1, #12
20000b6c:	4d38      	ldr	r5, [pc, #224]	; (20000c50 <RenderGraph8Persp_pSioBase>)
20000b6e:	662e      	str	r6, [r5, #96]	; 0x60
20000b70:	8a66      	ldrh	r6, [r4, #18]
20000b72:	1852      	adds	r2, r2, r1
20000b74:	18b6      	adds	r6, r6, r2
20000b76:	3601      	adds	r6, #1
20000b78:	666e      	str	r6, [r5, #100]	; 0x64
20000b7a:	085d      	lsrs	r5, r3, #1
20000b7c:	426d      	negs	r5, r5
20000b7e:	46ae      	mov	lr, r5
20000b80:	089f      	lsrs	r7, r3, #2
20000b82:	8b21      	ldrh	r1, [r4, #24]
20000b84:	8b62      	ldrh	r2, [r4, #26]
20000b86:	4b33      	ldr	r3, [pc, #204]	; (20000c54 <RenderGraph8Persp_Interp>)
20000b88:	68e6      	ldr	r6, [r4, #12]
20000b8a:	611e      	str	r6, [r3, #16]
20000b8c:	4e32      	ldr	r6, [pc, #200]	; (20000c58 <RenderGraph8Persp_Ctrl>)
20000b8e:	1a76      	subs	r6, r6, r1
20000b90:	014d      	lsls	r5, r1, #5
20000b92:	432e      	orrs	r6, r5
20000b94:	3901      	subs	r1, #1
20000b96:	188d      	adds	r5, r1, r2
20000b98:	02ad      	lsls	r5, r5, #10
20000b9a:	432e      	orrs	r6, r5
20000b9c:	631e      	str	r6, [r3, #48]	; 0x30
20000b9e:	4e2e      	ldr	r6, [pc, #184]	; (20000c58 <RenderGraph8Persp_Ctrl>)
20000ba0:	0289      	lsls	r1, r1, #10
20000ba2:	430e      	orrs	r6, r1
20000ba4:	62de      	str	r6, [r3, #44]	; 0x2c
20000ba6:	6964      	ldr	r4, [r4, #20]
20000ba8:	4929      	ldr	r1, [pc, #164]	; (20000c50 <RenderGraph8Persp_pSioBase>)
20000baa:	6f09      	ldr	r1, [r1, #112]	; 0x70
20000bac:	6825      	ldr	r5, [r4, #0]
20000bae:	434d      	muls	r5, r1
20000bb0:	132d      	asrs	r5, r5, #12
20000bb2:	609d      	str	r5, [r3, #8]
20000bb4:	68e6      	ldr	r6, [r4, #12]
20000bb6:	434e      	muls	r6, r1
20000bb8:	1336      	asrs	r6, r6, #12
20000bba:	60de      	str	r6, [r3, #12]
20000bbc:	4672      	mov	r2, lr
20000bbe:	4355      	muls	r5, r2
20000bc0:	4372      	muls	r2, r6
20000bc2:	468e      	mov	lr, r1
20000bc4:	6866      	ldr	r6, [r4, #4]
20000bc6:	4371      	muls	r1, r6
20000bc8:	1309      	asrs	r1, r1, #12
20000bca:	4666      	mov	r6, ip
20000bcc:	4371      	muls	r1, r6
20000bce:	186d      	adds	r5, r5, r1
20000bd0:	68a1      	ldr	r1, [r4, #8]
20000bd2:	186d      	adds	r5, r5, r1
20000bd4:	601d      	str	r5, [r3, #0]
20000bd6:	6921      	ldr	r1, [r4, #16]
20000bd8:	4675      	mov	r5, lr
20000bda:	4369      	muls	r1, r5
20000bdc:	1309      	asrs	r1, r1, #12
20000bde:	4371      	muls	r1, r6
20000be0:	1852      	adds	r2, r2, r1
20000be2:	6961      	ldr	r1, [r4, #20]
20000be4:	1852      	adds	r2, r2, r1
20000be6:	605a      	str	r2, [r3, #4]
20000be8:	087f      	lsrs	r7, r7, #1
20000bea:	d30e      	bcc.n	20000c0a <RenderGraph8Persp+0xaa>
20000bec:	69dc      	ldr	r4, [r3, #28]
20000bee:	7826      	ldrb	r6, [r4, #0]
20000bf0:	69dc      	ldr	r4, [r3, #28]
20000bf2:	7825      	ldrb	r5, [r4, #0]
20000bf4:	022d      	lsls	r5, r5, #8
20000bf6:	432e      	orrs	r6, r5
20000bf8:	69dc      	ldr	r4, [r3, #28]
20000bfa:	7825      	ldrb	r5, [r4, #0]
20000bfc:	042d      	lsls	r5, r5, #16
20000bfe:	432e      	orrs	r6, r5
20000c00:	69dc      	ldr	r4, [r3, #28]
20000c02:	7825      	ldrb	r5, [r4, #0]
20000c04:	062d      	lsls	r5, r5, #24
20000c06:	432e      	orrs	r6, r5
20000c08:	c040      	stmia	r0!, {r6}
20000c0a:	423f      	tst	r7, r7
20000c0c:	d01e      	beq.n	20000c4c <RenderGraph8Persp+0xec>
20000c0e:	69dc      	ldr	r4, [r3, #28]
20000c10:	7821      	ldrb	r1, [r4, #0]
20000c12:	69dc      	ldr	r4, [r3, #28]
20000c14:	7824      	ldrb	r4, [r4, #0]
20000c16:	0224      	lsls	r4, r4, #8
20000c18:	4321      	orrs	r1, r4
20000c1a:	69dc      	ldr	r4, [r3, #28]
20000c1c:	7824      	ldrb	r4, [r4, #0]
20000c1e:	0424      	lsls	r4, r4, #16
20000c20:	4321      	orrs	r1, r4
20000c22:	69dc      	ldr	r4, [r3, #28]
20000c24:	7824      	ldrb	r4, [r4, #0]
20000c26:	0624      	lsls	r4, r4, #24
20000c28:	4321      	orrs	r1, r4
20000c2a:	69dc      	ldr	r4, [r3, #28]
20000c2c:	7822      	ldrb	r2, [r4, #0]
20000c2e:	69dc      	ldr	r4, [r3, #28]
20000c30:	7824      	ldrb	r4, [r4, #0]
20000c32:	0224      	lsls	r4, r4, #8
20000c34:	4322      	orrs	r2, r4
20000c36:	69dc      	ldr	r4, [r3, #28]
20000c38:	7824      	ldrb	r4, [r4, #0]
20000c3a:	0424      	lsls	r4, r4, #16
20000c3c:	4322      	orrs	r2, r4
20000c3e:	69dc      	ldr	r4, [r3, #28]
20000c40:	7824      	ldrb	r4, [r4, #0]
20000c42:	0624      	lsls	r4, r4, #24
20000c44:	4322      	orrs	r2, r4
20000c46:	c006      	stmia	r0!, {r1, r2}
20000c48:	3f01      	subs	r7, #1
20000c4a:	d1e0      	bne.n	20000c0e <RenderGraph8Persp+0xae>
20000c4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
20000c4e:	46c0      	nop			; (mov r8, r8)

20000c50 <RenderGraph8Persp_pSioBase>:
20000c50:	d0000000 	.word	0xd0000000

20000c54 <RenderGraph8Persp_Interp>:
20000c54:	d00000c0 	.word	0xd00000c0

20000c58 <RenderGraph8Persp_Ctrl>:
20000c58:	0004000c 	.word	0x0004000c

20000c5c <RenderGText>:
20000c5c:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
20000c5e:	4644      	mov	r4, r8
20000c60:	b410      	push	{r4}
20000c62:	9c09      	ldr	r4, [sp, #36]	; 0x24
20000c64:	4e3a      	ldr	r6, [pc, #232]	; (20000d50 <RenderGText_pSioBase>)
20000c66:	6632      	str	r2, [r6, #96]	; 0x60
20000c68:	8a62      	ldrh	r2, [r4, #18]
20000c6a:	6672      	str	r2, [r6, #100]	; 0x64
20000c6c:	8925      	ldrh	r5, [r4, #8]
20000c6e:	2703      	movs	r7, #3
20000c70:	43bd      	bics	r5, r7
20000c72:	9509      	str	r5, [sp, #36]	; 0x24
20000c74:	43b9      	bics	r1, r7
20000c76:	43bb      	bics	r3, r7
20000c78:	9303      	str	r3, [sp, #12]
20000c7a:	6f75      	ldr	r5, [r6, #116]	; 0x74
20000c7c:	6f32      	ldr	r2, [r6, #112]	; 0x70
20000c7e:	022d      	lsls	r5, r5, #8
20000c80:	6963      	ldr	r3, [r4, #20]
20000c82:	442b      	add	r3, r5
20000c84:	4698      	mov	r8, r3
20000c86:	8865      	ldrh	r5, [r4, #2]
20000c88:	436a      	muls	r2, r5
20000c8a:	68e5      	ldr	r5, [r4, #12]
20000c8c:	442a      	add	r2, r5
20000c8e:	9202      	str	r2, [sp, #8]
20000c90:	69a3      	ldr	r3, [r4, #24]
20000c92:	9301      	str	r3, [sp, #4]
20000c94:	440b      	add	r3, r1
20000c96:	08ce      	lsrs	r6, r1, #3
20000c98:	4432      	add	r2, r6
20000c9a:	7ca4      	ldrb	r4, [r4, #18]
20000c9c:	0225      	lsls	r5, r4, #8
20000c9e:	4325      	orrs	r5, r4
20000ca0:	042c      	lsls	r4, r5, #16
20000ca2:	432c      	orrs	r4, r5
20000ca4:	4d29      	ldr	r5, [pc, #164]	; (20000d4c <RenderGText_Addr>)
20000ca6:	46ae      	mov	lr, r5
20000ca8:	074e      	lsls	r6, r1, #29
20000caa:	d515      	bpl.n	20000cd8 <RenderGText+0x7c>
20000cac:	7815      	ldrb	r5, [r2, #0]
20000cae:	3201      	adds	r2, #1
20000cb0:	4445      	add	r5, r8
20000cb2:	782d      	ldrb	r5, [r5, #0]
20000cb4:	cb40      	ldmia	r3!, {r6}
20000cb6:	4066      	eors	r6, r4
20000cb8:	00ed      	lsls	r5, r5, #3
20000cba:	4475      	add	r5, lr
20000cbc:	686f      	ldr	r7, [r5, #4]
20000cbe:	4037      	ands	r7, r6
20000cc0:	4067      	eors	r7, r4
20000cc2:	c080      	stmia	r0!, {r7}
20000cc4:	3104      	adds	r1, #4
20000cc6:	9f09      	ldr	r7, [sp, #36]	; 0x24
20000cc8:	42b9      	cmp	r1, r7
20000cca:	d302      	bcc.n	20000cd2 <RenderGText+0x76>
20000ccc:	2100      	movs	r1, #0
20000cce:	9a02      	ldr	r2, [sp, #8]
20000cd0:	9b01      	ldr	r3, [sp, #4]
20000cd2:	9f03      	ldr	r7, [sp, #12]
20000cd4:	3f04      	subs	r7, #4
20000cd6:	9703      	str	r7, [sp, #12]
20000cd8:	9f09      	ldr	r7, [sp, #36]	; 0x24
20000cda:	1a7f      	subs	r7, r7, r1

20000cdc <RenderGText_OutLoop>:
20000cdc:	9e03      	ldr	r6, [sp, #12]
20000cde:	42b7      	cmp	r7, r6
20000ce0:	d900      	bls.n	20000ce4 <RenderGText_OutLoop+0x8>
20000ce2:	4637      	mov	r7, r6
20000ce4:	2f08      	cmp	r7, #8
20000ce6:	d214      	bcs.n	20000d12 <RenderGText_Last+0x26>
20000ce8:	2f04      	cmp	r7, #4
20000cea:	d30f      	bcc.n	20000d0c <RenderGText_Last+0x20>

20000cec <RenderGText_Last>:
20000cec:	7815      	ldrb	r5, [r2, #0]
20000cee:	3201      	adds	r2, #1
20000cf0:	4445      	add	r5, r8
20000cf2:	782d      	ldrb	r5, [r5, #0]
20000cf4:	cb40      	ldmia	r3!, {r6}
20000cf6:	4066      	eors	r6, r4
20000cf8:	00ed      	lsls	r5, r5, #3
20000cfa:	4475      	add	r5, lr
20000cfc:	6829      	ldr	r1, [r5, #0]
20000cfe:	4031      	ands	r1, r6
20000d00:	4061      	eors	r1, r4
20000d02:	c002      	stmia	r0!, {r1}
20000d04:	9a02      	ldr	r2, [sp, #8]
20000d06:	9b01      	ldr	r3, [sp, #4]
20000d08:	2f04      	cmp	r7, #4
20000d0a:	d8e7      	bhi.n	20000cdc <RenderGText_OutLoop>
20000d0c:	bc10      	pop	{r4}
20000d0e:	46a0      	mov	r8, r4
20000d10:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
20000d12:	08b9      	lsrs	r1, r7, #2
20000d14:	008d      	lsls	r5, r1, #2
20000d16:	1b76      	subs	r6, r6, r5
20000d18:	9603      	str	r6, [sp, #12]
20000d1a:	3901      	subs	r1, #1

20000d1c <RenderGText_InLoop>:
20000d1c:	7817      	ldrb	r7, [r2, #0]
20000d1e:	3201      	adds	r2, #1
20000d20:	4447      	add	r7, r8
20000d22:	783f      	ldrb	r7, [r7, #0]
20000d24:	cb40      	ldmia	r3!, {r6}
20000d26:	4066      	eors	r6, r4
20000d28:	00ff      	lsls	r7, r7, #3
20000d2a:	4477      	add	r7, lr
20000d2c:	683d      	ldr	r5, [r7, #0]
20000d2e:	4035      	ands	r5, r6
20000d30:	4065      	eors	r5, r4
20000d32:	cb40      	ldmia	r3!, {r6}
20000d34:	4066      	eors	r6, r4
20000d36:	687f      	ldr	r7, [r7, #4]
20000d38:	4037      	ands	r7, r6
20000d3a:	4067      	eors	r7, r4
20000d3c:	c0a0      	stmia	r0!, {r5, r7}
20000d3e:	3902      	subs	r1, #2
20000d40:	d8ec      	bhi.n	20000d1c <RenderGText_InLoop>
20000d42:	9f09      	ldr	r7, [sp, #36]	; 0x24
20000d44:	d0d2      	beq.n	20000cec <RenderGText_Last>
20000d46:	9a02      	ldr	r2, [sp, #8]
20000d48:	9b01      	ldr	r3, [sp, #4]
20000d4a:	e7c7      	b.n	20000cdc <RenderGText_OutLoop>

20000d4c <RenderGText_Addr>:
20000d4c:	200381e4 	.word	0x200381e4

20000d50 <RenderGText_pSioBase>:
20000d50:	d0000000 	.word	0xd0000000

20000d54 <RenderLevel>:
20000d54:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
20000d56:	9c08      	ldr	r4, [sp, #32]
20000d58:	8925      	ldrh	r5, [r4, #8]
20000d5a:	2703      	movs	r7, #3
20000d5c:	43bd      	bics	r5, r7
20000d5e:	9508      	str	r5, [sp, #32]
20000d60:	43b9      	bics	r1, r7
20000d62:	43bb      	bics	r3, r7
20000d64:	9302      	str	r3, [sp, #8]
20000d66:	8965      	ldrh	r5, [r4, #10]
20000d68:	3d01      	subs	r5, #1
20000d6a:	1aad      	subs	r5, r5, r2
20000d6c:	7e23      	ldrb	r3, [r4, #24]
20000d6e:	9300      	str	r3, [sp, #0]
20000d70:	68e2      	ldr	r2, [r4, #12]
20000d72:	9201      	str	r2, [sp, #4]
20000d74:	440a      	add	r2, r1
20000d76:	7d66      	ldrb	r6, [r4, #21]
20000d78:	0233      	lsls	r3, r6, #8
20000d7a:	4333      	orrs	r3, r6
20000d7c:	041e      	lsls	r6, r3, #16
20000d7e:	431e      	orrs	r6, r3
20000d80:	7d24      	ldrb	r4, [r4, #20]
20000d82:	0223      	lsls	r3, r4, #8
20000d84:	4323      	orrs	r3, r4
20000d86:	041c      	lsls	r4, r3, #16
20000d88:	431c      	orrs	r4, r3
20000d8a:	4066      	eors	r6, r4
20000d8c:	4b4c      	ldr	r3, [pc, #304]	; (20000ec0 <RenderLevel_Addr>)
20000d8e:	469e      	mov	lr, r3
20000d90:	9f08      	ldr	r7, [sp, #32]
20000d92:	1a7f      	subs	r7, r7, r1
20000d94:	2f04      	cmp	r7, #4
20000d96:	d801      	bhi.n	20000d9c <RenderLevel_OutLoop>
20000d98:	9f08      	ldr	r7, [sp, #32]
20000d9a:	e007      	b.n	20000dac <RenderLevel_Last>

20000d9c <RenderLevel_OutLoop>:
20000d9c:	9b02      	ldr	r3, [sp, #8]
20000d9e:	429f      	cmp	r7, r3
20000da0:	d900      	bls.n	20000da4 <RenderLevel_OutLoop+0x8>
20000da2:	461f      	mov	r7, r3
20000da4:	2f08      	cmp	r7, #8
20000da6:	d231      	bcs.n	20000e0c <RenderLevel_Last2+0x30>
20000da8:	2f04      	cmp	r7, #4
20000daa:	d32e      	bcc.n	20000e0a <RenderLevel_Last2+0x2e>

20000dac <RenderLevel_Last>:
20000dac:	9b00      	ldr	r3, [sp, #0]
20000dae:	429d      	cmp	r5, r3
20000db0:	d314      	bcc.n	20000ddc <RenderLevel_Last2>
20000db2:	2100      	movs	r1, #0
20000db4:	7813      	ldrb	r3, [r2, #0]
20000db6:	42ab      	cmp	r3, r5
20000db8:	4149      	adcs	r1, r1
20000dba:	7853      	ldrb	r3, [r2, #1]
20000dbc:	42ab      	cmp	r3, r5
20000dbe:	4149      	adcs	r1, r1
20000dc0:	7893      	ldrb	r3, [r2, #2]
20000dc2:	42ab      	cmp	r3, r5
20000dc4:	4149      	adcs	r1, r1
20000dc6:	78d3      	ldrb	r3, [r2, #3]
20000dc8:	42ab      	cmp	r3, r5
20000dca:	4149      	adcs	r1, r1
20000dcc:	3204      	adds	r2, #4
20000dce:	00c9      	lsls	r1, r1, #3
20000dd0:	4471      	add	r1, lr
20000dd2:	6849      	ldr	r1, [r1, #4]
20000dd4:	4031      	ands	r1, r6
20000dd6:	4061      	eors	r1, r4
20000dd8:	c002      	stmia	r0!, {r1}
20000dda:	e013      	b.n	20000e04 <RenderLevel_Last2+0x28>

20000ddc <RenderLevel_Last2>:
20000ddc:	2100      	movs	r1, #0
20000dde:	7813      	ldrb	r3, [r2, #0]
20000de0:	429d      	cmp	r5, r3
20000de2:	4149      	adcs	r1, r1
20000de4:	7853      	ldrb	r3, [r2, #1]
20000de6:	429d      	cmp	r5, r3
20000de8:	4149      	adcs	r1, r1
20000dea:	7893      	ldrb	r3, [r2, #2]
20000dec:	429d      	cmp	r5, r3
20000dee:	4149      	adcs	r1, r1
20000df0:	78d3      	ldrb	r3, [r2, #3]
20000df2:	429d      	cmp	r5, r3
20000df4:	4149      	adcs	r1, r1
20000df6:	3204      	adds	r2, #4
20000df8:	00c9      	lsls	r1, r1, #3
20000dfa:	4471      	add	r1, lr
20000dfc:	6849      	ldr	r1, [r1, #4]
20000dfe:	4031      	ands	r1, r6
20000e00:	4061      	eors	r1, r4
20000e02:	c002      	stmia	r0!, {r1}
20000e04:	9a01      	ldr	r2, [sp, #4]
20000e06:	2f04      	cmp	r7, #4
20000e08:	d8c8      	bhi.n	20000d9c <RenderLevel_OutLoop>
20000e0a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
20000e0c:	08b9      	lsrs	r1, r7, #2
20000e0e:	008f      	lsls	r7, r1, #2
20000e10:	1bdb      	subs	r3, r3, r7
20000e12:	9302      	str	r3, [sp, #8]
20000e14:	3901      	subs	r1, #1
20000e16:	9b00      	ldr	r3, [sp, #0]
20000e18:	429d      	cmp	r5, r3
20000e1a:	d328      	bcc.n	20000e6e <RenderLevel_InLoopBot>

20000e1c <RenderLevel_InLoopTop>:
20000e1c:	2700      	movs	r7, #0
20000e1e:	7813      	ldrb	r3, [r2, #0]
20000e20:	42ab      	cmp	r3, r5
20000e22:	417f      	adcs	r7, r7
20000e24:	7853      	ldrb	r3, [r2, #1]
20000e26:	42ab      	cmp	r3, r5
20000e28:	417f      	adcs	r7, r7
20000e2a:	7893      	ldrb	r3, [r2, #2]
20000e2c:	42ab      	cmp	r3, r5
20000e2e:	417f      	adcs	r7, r7
20000e30:	78d3      	ldrb	r3, [r2, #3]
20000e32:	42ab      	cmp	r3, r5
20000e34:	417f      	adcs	r7, r7
20000e36:	7913      	ldrb	r3, [r2, #4]
20000e38:	42ab      	cmp	r3, r5
20000e3a:	417f      	adcs	r7, r7
20000e3c:	7953      	ldrb	r3, [r2, #5]
20000e3e:	42ab      	cmp	r3, r5
20000e40:	417f      	adcs	r7, r7
20000e42:	7993      	ldrb	r3, [r2, #6]
20000e44:	42ab      	cmp	r3, r5
20000e46:	417f      	adcs	r7, r7
20000e48:	79d3      	ldrb	r3, [r2, #7]
20000e4a:	42ab      	cmp	r3, r5
20000e4c:	417f      	adcs	r7, r7
20000e4e:	3208      	adds	r2, #8
20000e50:	00ff      	lsls	r7, r7, #3
20000e52:	4477      	add	r7, lr
20000e54:	683b      	ldr	r3, [r7, #0]
20000e56:	4033      	ands	r3, r6
20000e58:	4063      	eors	r3, r4
20000e5a:	687f      	ldr	r7, [r7, #4]
20000e5c:	4037      	ands	r7, r6
20000e5e:	4067      	eors	r7, r4
20000e60:	c088      	stmia	r0!, {r3, r7}
20000e62:	3902      	subs	r1, #2
20000e64:	d8da      	bhi.n	20000e1c <RenderLevel_InLoopTop>
20000e66:	9f08      	ldr	r7, [sp, #32]
20000e68:	d0a0      	beq.n	20000dac <RenderLevel_Last>
20000e6a:	9a01      	ldr	r2, [sp, #4]
20000e6c:	e796      	b.n	20000d9c <RenderLevel_OutLoop>

20000e6e <RenderLevel_InLoopBot>:
20000e6e:	2700      	movs	r7, #0
20000e70:	7813      	ldrb	r3, [r2, #0]
20000e72:	429d      	cmp	r5, r3
20000e74:	417f      	adcs	r7, r7
20000e76:	7853      	ldrb	r3, [r2, #1]
20000e78:	429d      	cmp	r5, r3
20000e7a:	417f      	adcs	r7, r7
20000e7c:	7893      	ldrb	r3, [r2, #2]
20000e7e:	429d      	cmp	r5, r3
20000e80:	417f      	adcs	r7, r7
20000e82:	78d3      	ldrb	r3, [r2, #3]
20000e84:	429d      	cmp	r5, r3
20000e86:	417f      	adcs	r7, r7
20000e88:	7913      	ldrb	r3, [r2, #4]
20000e8a:	429d      	cmp	r5, r3
20000e8c:	417f      	adcs	r7, r7
20000e8e:	7953      	ldrb	r3, [r2, #5]
20000e90:	429d      	cmp	r5, r3
20000e92:	417f      	adcs	r7, r7
20000e94:	7993      	ldrb	r3, [r2, #6]
20000e96:	429d      	cmp	r5, r3
20000e98:	417f      	adcs	r7, r7
20000e9a:	79d3      	ldrb	r3, [r2, #7]
20000e9c:	429d      	cmp	r5, r3
20000e9e:	417f      	adcs	r7, r7
20000ea0:	3208      	adds	r2, #8
20000ea2:	00ff      	lsls	r7, r7, #3
20000ea4:	4477      	add	r7, lr
20000ea6:	683b      	ldr	r3, [r7, #0]
20000ea8:	4033      	ands	r3, r6
20000eaa:	4063      	eors	r3, r4
20000eac:	687f      	ldr	r7, [r7, #4]
20000eae:	4037      	ands	r7, r6
20000eb0:	4067      	eors	r7, r4
20000eb2:	c088      	stmia	r0!, {r3, r7}
20000eb4:	3902      	subs	r1, #2
20000eb6:	d8da      	bhi.n	20000e6e <RenderLevel_InLoopBot>
20000eb8:	9f08      	ldr	r7, [sp, #32]
20000eba:	d0d5      	beq.n	20000e68 <RenderLevel_InLoopTop+0x4c>
20000ebc:	9a01      	ldr	r2, [sp, #4]
20000ebe:	e76d      	b.n	20000d9c <RenderLevel_OutLoop>

20000ec0 <RenderLevel_Addr>:
20000ec0:	200381e4 	.word	0x200381e4

20000ec4 <RenderLevelGrad>:
20000ec4:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
20000ec6:	9c08      	ldr	r4, [sp, #32]
20000ec8:	8925      	ldrh	r5, [r4, #8]
20000eca:	2703      	movs	r7, #3
20000ecc:	43bd      	bics	r5, r7
20000ece:	9508      	str	r5, [sp, #32]
20000ed0:	43b9      	bics	r1, r7
20000ed2:	43bb      	bics	r3, r7
20000ed4:	9302      	str	r3, [sp, #8]
20000ed6:	8965      	ldrh	r5, [r4, #10]
20000ed8:	3d01      	subs	r5, #1
20000eda:	1aad      	subs	r5, r5, r2
20000edc:	68e2      	ldr	r2, [r4, #12]
20000ede:	9201      	str	r2, [sp, #4]
20000ee0:	440a      	add	r2, r1
20000ee2:	6966      	ldr	r6, [r4, #20]
20000ee4:	5d76      	ldrb	r6, [r6, r5]
20000ee6:	0233      	lsls	r3, r6, #8
20000ee8:	4333      	orrs	r3, r6
20000eea:	041e      	lsls	r6, r3, #16
20000eec:	431e      	orrs	r6, r3
20000eee:	69a4      	ldr	r4, [r4, #24]
20000ef0:	5d64      	ldrb	r4, [r4, r5]
20000ef2:	0223      	lsls	r3, r4, #8
20000ef4:	4323      	orrs	r3, r4
20000ef6:	041c      	lsls	r4, r3, #16
20000ef8:	431c      	orrs	r4, r3
20000efa:	4066      	eors	r6, r4
20000efc:	4b2a      	ldr	r3, [pc, #168]	; (20000fa8 <RenderLevelGrad_Addr>)
20000efe:	469e      	mov	lr, r3
20000f00:	9f08      	ldr	r7, [sp, #32]
20000f02:	1a7f      	subs	r7, r7, r1
20000f04:	2f04      	cmp	r7, #4
20000f06:	d801      	bhi.n	20000f0c <RenderLevelGrad_OutLoop>
20000f08:	9f08      	ldr	r7, [sp, #32]
20000f0a:	e007      	b.n	20000f1c <RenderLevelGrad_Last>

20000f0c <RenderLevelGrad_OutLoop>:
20000f0c:	9b02      	ldr	r3, [sp, #8]
20000f0e:	429f      	cmp	r7, r3
20000f10:	d900      	bls.n	20000f14 <RenderLevelGrad_OutLoop+0x8>
20000f12:	461f      	mov	r7, r3
20000f14:	2f08      	cmp	r7, #8
20000f16:	d219      	bcs.n	20000f4c <RenderLevelGrad_Last+0x30>
20000f18:	2f04      	cmp	r7, #4
20000f1a:	d316      	bcc.n	20000f4a <RenderLevelGrad_Last+0x2e>

20000f1c <RenderLevelGrad_Last>:
20000f1c:	2100      	movs	r1, #0
20000f1e:	7813      	ldrb	r3, [r2, #0]
20000f20:	42ab      	cmp	r3, r5
20000f22:	4149      	adcs	r1, r1
20000f24:	7853      	ldrb	r3, [r2, #1]
20000f26:	42ab      	cmp	r3, r5
20000f28:	4149      	adcs	r1, r1
20000f2a:	7893      	ldrb	r3, [r2, #2]
20000f2c:	42ab      	cmp	r3, r5
20000f2e:	4149      	adcs	r1, r1
20000f30:	78d3      	ldrb	r3, [r2, #3]
20000f32:	42ab      	cmp	r3, r5
20000f34:	4149      	adcs	r1, r1
20000f36:	3204      	adds	r2, #4
20000f38:	00c9      	lsls	r1, r1, #3
20000f3a:	4471      	add	r1, lr
20000f3c:	6849      	ldr	r1, [r1, #4]
20000f3e:	4031      	ands	r1, r6
20000f40:	4061      	eors	r1, r4
20000f42:	c002      	stmia	r0!, {r1}
20000f44:	9a01      	ldr	r2, [sp, #4]
20000f46:	2f04      	cmp	r7, #4
20000f48:	d8e0      	bhi.n	20000f0c <RenderLevelGrad_OutLoop>
20000f4a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
20000f4c:	08b9      	lsrs	r1, r7, #2
20000f4e:	008f      	lsls	r7, r1, #2
20000f50:	1bdb      	subs	r3, r3, r7
20000f52:	9302      	str	r3, [sp, #8]
20000f54:	3901      	subs	r1, #1

20000f56 <RenderLevelGrad_InLoopTop>:
20000f56:	2700      	movs	r7, #0
20000f58:	7813      	ldrb	r3, [r2, #0]
20000f5a:	42ab      	cmp	r3, r5
20000f5c:	417f      	adcs	r7, r7
20000f5e:	7853      	ldrb	r3, [r2, #1]
20000f60:	42ab      	cmp	r3, r5
20000f62:	417f      	adcs	r7, r7
20000f64:	7893      	ldrb	r3, [r2, #2]
20000f66:	42ab      	cmp	r3, r5
20000f68:	417f      	adcs	r7, r7
20000f6a:	78d3      	ldrb	r3, [r2, #3]
20000f6c:	42ab      	cmp	r3, r5
20000f6e:	417f      	adcs	r7, r7
20000f70:	7913      	ldrb	r3, [r2, #4]
20000f72:	42ab      	cmp	r3, r5
20000f74:	417f      	adcs	r7, r7
20000f76:	7953      	ldrb	r3, [r2, #5]
20000f78:	42ab      	cmp	r3, r5
20000f7a:	417f      	adcs	r7, r7
20000f7c:	7993      	ldrb	r3, [r2, #6]
20000f7e:	42ab      	cmp	r3, r5
20000f80:	417f      	adcs	r7, r7
20000f82:	79d3      	ldrb	r3, [r2, #7]
20000f84:	42ab      	cmp	r3, r5
20000f86:	417f      	adcs	r7, r7
20000f88:	3208      	adds	r2, #8
20000f8a:	00ff      	lsls	r7, r7, #3
20000f8c:	4477      	add	r7, lr
20000f8e:	683b      	ldr	r3, [r7, #0]
20000f90:	4033      	ands	r3, r6
20000f92:	4063      	eors	r3, r4
20000f94:	687f      	ldr	r7, [r7, #4]
20000f96:	4037      	ands	r7, r6
20000f98:	4067      	eors	r7, r4
20000f9a:	c088      	stmia	r0!, {r3, r7}
20000f9c:	3902      	subs	r1, #2
20000f9e:	d8da      	bhi.n	20000f56 <RenderLevelGrad_InLoopTop>
20000fa0:	9f08      	ldr	r7, [sp, #32]
20000fa2:	d0bb      	beq.n	20000f1c <RenderLevelGrad_Last>
20000fa4:	9a01      	ldr	r2, [sp, #4]
20000fa6:	e7b1      	b.n	20000f0c <RenderLevelGrad_OutLoop>

20000fa8 <RenderLevelGrad_Addr>:
20000fa8:	200381e4 	.word	0x200381e4

20000fac <RenderMText>:
20000fac:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
20000fae:	9c08      	ldr	r4, [sp, #32]
20000fb0:	4e34      	ldr	r6, [pc, #208]	; (20001084 <RenderMText_pSioBase>)
20000fb2:	6632      	str	r2, [r6, #96]	; 0x60
20000fb4:	8a62      	ldrh	r2, [r4, #18]
20000fb6:	6672      	str	r2, [r6, #100]	; 0x64
20000fb8:	8925      	ldrh	r5, [r4, #8]
20000fba:	2703      	movs	r7, #3
20000fbc:	43bd      	bics	r5, r7
20000fbe:	9508      	str	r5, [sp, #32]
20000fc0:	43b9      	bics	r1, r7
20000fc2:	43bb      	bics	r3, r7
20000fc4:	9302      	str	r3, [sp, #8]
20000fc6:	6f75      	ldr	r5, [r6, #116]	; 0x74
20000fc8:	6f32      	ldr	r2, [r6, #112]	; 0x70
20000fca:	022d      	lsls	r5, r5, #8
20000fcc:	6963      	ldr	r3, [r4, #20]
20000fce:	442b      	add	r3, r5
20000fd0:	8865      	ldrh	r5, [r4, #2]
20000fd2:	436a      	muls	r2, r5
20000fd4:	68e5      	ldr	r5, [r4, #12]
20000fd6:	442a      	add	r2, r5
20000fd8:	9201      	str	r2, [sp, #4]
20000fda:	08ce      	lsrs	r6, r1, #3
20000fdc:	4432      	add	r2, r6
20000fde:	7e66      	ldrb	r6, [r4, #25]
20000fe0:	0237      	lsls	r7, r6, #8
20000fe2:	4337      	orrs	r7, r6
20000fe4:	043e      	lsls	r6, r7, #16
20000fe6:	433e      	orrs	r6, r7
20000fe8:	7e24      	ldrb	r4, [r4, #24]
20000fea:	0225      	lsls	r5, r4, #8
20000fec:	4325      	orrs	r5, r4
20000fee:	042c      	lsls	r4, r5, #16
20000ff0:	432c      	orrs	r4, r5
20000ff2:	4066      	eors	r6, r4
20000ff4:	4d22      	ldr	r5, [pc, #136]	; (20001080 <RenderMText_Addr>)
20000ff6:	46ae      	mov	lr, r5
20000ff8:	074d      	lsls	r5, r1, #29
20000ffa:	d511      	bpl.n	20001020 <RenderMText+0x74>
20000ffc:	7815      	ldrb	r5, [r2, #0]
20000ffe:	5d5d      	ldrb	r5, [r3, r5]
20001000:	3201      	adds	r2, #1
20001002:	00ed      	lsls	r5, r5, #3
20001004:	4475      	add	r5, lr
20001006:	686f      	ldr	r7, [r5, #4]
20001008:	4037      	ands	r7, r6
2000100a:	4067      	eors	r7, r4
2000100c:	c080      	stmia	r0!, {r7}
2000100e:	3104      	adds	r1, #4
20001010:	9f08      	ldr	r7, [sp, #32]
20001012:	42b9      	cmp	r1, r7
20001014:	d301      	bcc.n	2000101a <RenderMText+0x6e>
20001016:	2100      	movs	r1, #0
20001018:	9a01      	ldr	r2, [sp, #4]
2000101a:	9f02      	ldr	r7, [sp, #8]
2000101c:	3f04      	subs	r7, #4
2000101e:	9702      	str	r7, [sp, #8]
20001020:	9f08      	ldr	r7, [sp, #32]
20001022:	1a7f      	subs	r7, r7, r1

20001024 <RenderMText_OutLoop>:
20001024:	9d02      	ldr	r5, [sp, #8]
20001026:	42af      	cmp	r7, r5
20001028:	d900      	bls.n	2000102c <RenderMText_OutLoop+0x8>
2000102a:	462f      	mov	r7, r5
2000102c:	2f08      	cmp	r7, #8
2000102e:	d20e      	bcs.n	2000104e <RenderMText_Last+0x1a>
20001030:	2f04      	cmp	r7, #4
20001032:	d30b      	bcc.n	2000104c <RenderMText_Last+0x18>

20001034 <RenderMText_Last>:
20001034:	7815      	ldrb	r5, [r2, #0]
20001036:	5d5d      	ldrb	r5, [r3, r5]
20001038:	3201      	adds	r2, #1
2000103a:	00ed      	lsls	r5, r5, #3
2000103c:	4475      	add	r5, lr
2000103e:	6829      	ldr	r1, [r5, #0]
20001040:	4031      	ands	r1, r6
20001042:	4061      	eors	r1, r4
20001044:	c002      	stmia	r0!, {r1}
20001046:	9a01      	ldr	r2, [sp, #4]
20001048:	2f04      	cmp	r7, #4
2000104a:	d8eb      	bhi.n	20001024 <RenderMText_OutLoop>
2000104c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
2000104e:	08b9      	lsrs	r1, r7, #2
20001050:	008f      	lsls	r7, r1, #2
20001052:	1bed      	subs	r5, r5, r7
20001054:	9502      	str	r5, [sp, #8]
20001056:	3901      	subs	r1, #1

20001058 <RenderMText_InLoop>:
20001058:	7815      	ldrb	r5, [r2, #0]
2000105a:	5d5d      	ldrb	r5, [r3, r5]
2000105c:	3201      	adds	r2, #1
2000105e:	00ed      	lsls	r5, r5, #3
20001060:	4475      	add	r5, lr
20001062:	682f      	ldr	r7, [r5, #0]
20001064:	4037      	ands	r7, r6
20001066:	4067      	eors	r7, r4
20001068:	c080      	stmia	r0!, {r7}
2000106a:	686f      	ldr	r7, [r5, #4]
2000106c:	4037      	ands	r7, r6
2000106e:	4067      	eors	r7, r4
20001070:	c080      	stmia	r0!, {r7}
20001072:	3902      	subs	r1, #2
20001074:	d8f0      	bhi.n	20001058 <RenderMText_InLoop>
20001076:	9f08      	ldr	r7, [sp, #32]
20001078:	d0dc      	beq.n	20001034 <RenderMText_Last>
2000107a:	9a01      	ldr	r2, [sp, #4]
2000107c:	e7d2      	b.n	20001024 <RenderMText_OutLoop>
2000107e:	46c0      	nop			; (mov r8, r8)

20001080 <RenderMText_Addr>:
20001080:	200381e4 	.word	0x200381e4

20001084 <RenderMText_pSioBase>:
20001084:	d0000000 	.word	0xd0000000

20001088 <RenderOscil>:
20001088:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
2000108a:	9c08      	ldr	r4, [sp, #32]
2000108c:	8925      	ldrh	r5, [r4, #8]
2000108e:	2703      	movs	r7, #3
20001090:	43bd      	bics	r5, r7
20001092:	9508      	str	r5, [sp, #32]
20001094:	43b9      	bics	r1, r7
20001096:	43bb      	bics	r3, r7
20001098:	9302      	str	r3, [sp, #8]
2000109a:	8965      	ldrh	r5, [r4, #10]
2000109c:	3d01      	subs	r5, #1
2000109e:	1aad      	subs	r5, r5, r2
200010a0:	7e23      	ldrb	r3, [r4, #24]
200010a2:	469e      	mov	lr, r3
200010a4:	68e2      	ldr	r2, [r4, #12]
200010a6:	9201      	str	r2, [sp, #4]
200010a8:	440a      	add	r2, r1
200010aa:	7d66      	ldrb	r6, [r4, #21]
200010ac:	0233      	lsls	r3, r6, #8
200010ae:	4333      	orrs	r3, r6
200010b0:	041e      	lsls	r6, r3, #16
200010b2:	431e      	orrs	r6, r3
200010b4:	7d24      	ldrb	r4, [r4, #20]
200010b6:	0223      	lsls	r3, r4, #8
200010b8:	4323      	orrs	r3, r4
200010ba:	041c      	lsls	r4, r3, #16
200010bc:	431c      	orrs	r4, r3
200010be:	4066      	eors	r6, r4
200010c0:	9f08      	ldr	r7, [sp, #32]
200010c2:	1a7f      	subs	r7, r7, r1
200010c4:	2f04      	cmp	r7, #4
200010c6:	d801      	bhi.n	200010cc <RenderOscil_OutLoop>
200010c8:	9f08      	ldr	r7, [sp, #32]
200010ca:	e007      	b.n	200010dc <RenderOscil_Last>

200010cc <RenderOscil_OutLoop>:
200010cc:	9b02      	ldr	r3, [sp, #8]
200010ce:	429f      	cmp	r7, r3
200010d0:	d900      	bls.n	200010d4 <RenderOscil_OutLoop+0x8>
200010d2:	461f      	mov	r7, r3
200010d4:	2f08      	cmp	r7, #8
200010d6:	d21e      	bcs.n	20001116 <RenderOscil_Last+0x3a>
200010d8:	2f04      	cmp	r7, #4
200010da:	d31b      	bcc.n	20001114 <RenderOscil_Last+0x38>

200010dc <RenderOscil_Last>:
200010dc:	2100      	movs	r1, #0
200010de:	7813      	ldrb	r3, [r2, #0]
200010e0:	1b5b      	subs	r3, r3, r5
200010e2:	459e      	cmp	lr, r3
200010e4:	4149      	adcs	r1, r1
200010e6:	7853      	ldrb	r3, [r2, #1]
200010e8:	1b5b      	subs	r3, r3, r5
200010ea:	459e      	cmp	lr, r3
200010ec:	4149      	adcs	r1, r1
200010ee:	7893      	ldrb	r3, [r2, #2]
200010f0:	1b5b      	subs	r3, r3, r5
200010f2:	459e      	cmp	lr, r3
200010f4:	4149      	adcs	r1, r1
200010f6:	78d3      	ldrb	r3, [r2, #3]
200010f8:	1b5b      	subs	r3, r3, r5
200010fa:	459e      	cmp	lr, r3
200010fc:	4149      	adcs	r1, r1
200010fe:	3204      	adds	r2, #4
20001100:	00c9      	lsls	r1, r1, #3
20001102:	4b20      	ldr	r3, [pc, #128]	; (20001184 <RenderOscil_Addr>)
20001104:	4419      	add	r1, r3
20001106:	6849      	ldr	r1, [r1, #4]
20001108:	4031      	ands	r1, r6
2000110a:	4061      	eors	r1, r4
2000110c:	c002      	stmia	r0!, {r1}
2000110e:	9a01      	ldr	r2, [sp, #4]
20001110:	2f04      	cmp	r7, #4
20001112:	d8db      	bhi.n	200010cc <RenderOscil_OutLoop>
20001114:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
20001116:	08b9      	lsrs	r1, r7, #2
20001118:	008f      	lsls	r7, r1, #2
2000111a:	1bdb      	subs	r3, r3, r7
2000111c:	9302      	str	r3, [sp, #8]
2000111e:	3901      	subs	r1, #1

20001120 <RenderOscil_InLoop>:
20001120:	2700      	movs	r7, #0
20001122:	7813      	ldrb	r3, [r2, #0]
20001124:	1b5b      	subs	r3, r3, r5
20001126:	459e      	cmp	lr, r3
20001128:	417f      	adcs	r7, r7
2000112a:	7853      	ldrb	r3, [r2, #1]
2000112c:	1b5b      	subs	r3, r3, r5
2000112e:	459e      	cmp	lr, r3
20001130:	417f      	adcs	r7, r7
20001132:	7893      	ldrb	r3, [r2, #2]
20001134:	1b5b      	subs	r3, r3, r5
20001136:	459e      	cmp	lr, r3
20001138:	417f      	adcs	r7, r7
2000113a:	78d3      	ldrb	r3, [r2, #3]
2000113c:	1b5b      	subs	r3, r3, r5
2000113e:	459e      	cmp	lr, r3
20001140:	417f      	adcs	r7, r7
20001142:	7913      	ldrb	r3, [r2, #4]
20001144:	1b5b      	subs	r3, r3, r5
20001146:	459e      	cmp	lr, r3
20001148:	417f      	adcs	r7, r7
2000114a:	7953      	ldrb	r3, [r2, #5]
2000114c:	1b5b      	subs	r3, r3, r5
2000114e:	459e      	cmp	lr, r3
20001150:	417f      	adcs	r7, r7
20001152:	7993      	ldrb	r3, [r2, #6]
20001154:	1b5b      	subs	r3, r3, r5
20001156:	459e      	cmp	lr, r3
20001158:	417f      	adcs	r7, r7
2000115a:	79d3      	ldrb	r3, [r2, #7]
2000115c:	1b5b      	subs	r3, r3, r5
2000115e:	459e      	cmp	lr, r3
20001160:	417f      	adcs	r7, r7
20001162:	3208      	adds	r2, #8
20001164:	00ff      	lsls	r7, r7, #3
20001166:	4b07      	ldr	r3, [pc, #28]	; (20001184 <RenderOscil_Addr>)
20001168:	441f      	add	r7, r3
2000116a:	683b      	ldr	r3, [r7, #0]
2000116c:	4033      	ands	r3, r6
2000116e:	4063      	eors	r3, r4
20001170:	687f      	ldr	r7, [r7, #4]
20001172:	4037      	ands	r7, r6
20001174:	4067      	eors	r7, r4
20001176:	c088      	stmia	r0!, {r3, r7}
20001178:	3902      	subs	r1, #2
2000117a:	d8d1      	bhi.n	20001120 <RenderOscil_InLoop>
2000117c:	9f08      	ldr	r7, [sp, #32]
2000117e:	d0ad      	beq.n	200010dc <RenderOscil_Last>
20001180:	9a01      	ldr	r2, [sp, #4]
20001182:	e7a3      	b.n	200010cc <RenderOscil_OutLoop>

20001184 <RenderOscil_Addr>:
20001184:	200381e4 	.word	0x200381e4

20001188 <RenderOscLine>:
20001188:	b5fc      	push	{r2, r3, r4, r5, r6, r7, lr}
2000118a:	9c07      	ldr	r4, [sp, #28]
2000118c:	8925      	ldrh	r5, [r4, #8]
2000118e:	086d      	lsrs	r5, r5, #1
20001190:	9507      	str	r5, [sp, #28]
20001192:	0849      	lsrs	r1, r1, #1
20001194:	085b      	lsrs	r3, r3, #1
20001196:	9301      	str	r3, [sp, #4]
20001198:	8965      	ldrh	r5, [r4, #10]
2000119a:	3d01      	subs	r5, #1
2000119c:	1aad      	subs	r5, r5, r2
2000119e:	46ae      	mov	lr, r5
200011a0:	68e2      	ldr	r2, [r4, #12]
200011a2:	9200      	str	r2, [sp, #0]
200011a4:	440a      	add	r2, r1
200011a6:	7d66      	ldrb	r6, [r4, #21]
200011a8:	0237      	lsls	r7, r6, #8
200011aa:	433e      	orrs	r6, r7
200011ac:	7d24      	ldrb	r4, [r4, #20]
200011ae:	0227      	lsls	r7, r4, #8
200011b0:	433c      	orrs	r4, r7
200011b2:	9f07      	ldr	r7, [sp, #28]
200011b4:	1a79      	subs	r1, r7, r1

200011b6 <RenderOscLine_OutLoop>:
200011b6:	9b01      	ldr	r3, [sp, #4]
200011b8:	4299      	cmp	r1, r3
200011ba:	d900      	bls.n	200011be <RenderOscLine_OutLoop+0x8>
200011bc:	4619      	mov	r1, r3
200011be:	2900      	cmp	r1, #0
200011c0:	d01b      	beq.n	200011fa <RenderOscLine_Stop>
200011c2:	1a5b      	subs	r3, r3, r1
200011c4:	9301      	str	r3, [sp, #4]
200011c6:	7815      	ldrb	r5, [r2, #0]

200011c8 <RenderOscLine_InLoop>:
200011c8:	7813      	ldrb	r3, [r2, #0]
200011ca:	3201      	adds	r2, #1
200011cc:	4627      	mov	r7, r4
200011ce:	4573      	cmp	r3, lr
200011d0:	d00a      	beq.n	200011e8 <RenderOscLine_InLoop+0x20>
200011d2:	d303      	bcc.n	200011dc <RenderOscLine_InLoop+0x14>
200011d4:	42ab      	cmp	r3, r5
200011d6:	d901      	bls.n	200011dc <RenderOscLine_InLoop+0x14>
200011d8:	45ae      	cmp	lr, r5
200011da:	d805      	bhi.n	200011e8 <RenderOscLine_InLoop+0x20>
200011dc:	42ab      	cmp	r3, r5
200011de:	d204      	bcs.n	200011ea <RenderOscLine_InLoop+0x22>
200011e0:	4573      	cmp	r3, lr
200011e2:	d202      	bcs.n	200011ea <RenderOscLine_InLoop+0x22>
200011e4:	45ae      	cmp	lr, r5
200011e6:	d200      	bcs.n	200011ea <RenderOscLine_InLoop+0x22>
200011e8:	4637      	mov	r7, r6
200011ea:	8007      	strh	r7, [r0, #0]
200011ec:	3002      	adds	r0, #2
200011ee:	461d      	mov	r5, r3
200011f0:	3901      	subs	r1, #1
200011f2:	d1e9      	bne.n	200011c8 <RenderOscLine_InLoop>
200011f4:	9907      	ldr	r1, [sp, #28]
200011f6:	9a00      	ldr	r2, [sp, #0]
200011f8:	e7dd      	b.n	200011b6 <RenderOscLine_OutLoop>

200011fa <RenderOscLine_Stop>:
200011fa:	bdfc      	pop	{r2, r3, r4, r5, r6, r7, pc}

200011fc <RenderOscLine_Addr>:
200011fc:	200381e4 	.word	0x200381e4

20001200 <RenderPlane2>:
20001200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
20001202:	9c06      	ldr	r4, [sp, #24]
20001204:	8927      	ldrh	r7, [r4, #8]
20001206:	2603      	movs	r6, #3
20001208:	43b7      	bics	r7, r6
2000120a:	9706      	str	r7, [sp, #24]
2000120c:	43b1      	bics	r1, r6
2000120e:	43b3      	bics	r3, r6
20001210:	9300      	str	r3, [sp, #0]
20001212:	8865      	ldrh	r5, [r4, #2]
20001214:	436a      	muls	r2, r5
20001216:	68e5      	ldr	r5, [r4, #12]
20001218:	442a      	add	r2, r5
2000121a:	4696      	mov	lr, r2
2000121c:	08ce      	lsrs	r6, r1, #3
2000121e:	4432      	add	r2, r6
20001220:	6963      	ldr	r3, [r4, #20]
20001222:	69a7      	ldr	r7, [r4, #24]
20001224:	074d      	lsls	r5, r1, #29
20001226:	d512      	bpl.n	2000124e <RenderPlane2+0x4e>
20001228:	7815      	ldrb	r5, [r2, #0]
2000122a:	5cd6      	ldrb	r6, [r2, r3]
2000122c:	3201      	adds	r2, #1
2000122e:	0736      	lsls	r6, r6, #28
20001230:	0db6      	lsrs	r6, r6, #22
20001232:	072d      	lsls	r5, r5, #28
20001234:	0ead      	lsrs	r5, r5, #26
20001236:	4335      	orrs	r5, r6
20001238:	597d      	ldr	r5, [r7, r5]
2000123a:	c020      	stmia	r0!, {r5}
2000123c:	3104      	adds	r1, #4
2000123e:	9e06      	ldr	r6, [sp, #24]
20001240:	42b1      	cmp	r1, r6
20001242:	d301      	bcc.n	20001248 <RenderPlane2+0x48>
20001244:	2100      	movs	r1, #0
20001246:	4672      	mov	r2, lr
20001248:	9e00      	ldr	r6, [sp, #0]
2000124a:	3e04      	subs	r6, #4
2000124c:	9600      	str	r6, [sp, #0]
2000124e:	9e06      	ldr	r6, [sp, #24]
20001250:	1a76      	subs	r6, r6, r1

20001252 <RenderPlane2_OutLoop>:
20001252:	9c00      	ldr	r4, [sp, #0]
20001254:	42a6      	cmp	r6, r4
20001256:	d900      	bls.n	2000125a <RenderPlane2_OutLoop+0x8>
20001258:	4626      	mov	r6, r4
2000125a:	2e08      	cmp	r6, #8
2000125c:	d20f      	bcs.n	2000127e <RenderPlane2_Last+0x1c>
2000125e:	2e04      	cmp	r6, #4
20001260:	d30c      	bcc.n	2000127c <RenderPlane2_Last+0x1a>

20001262 <RenderPlane2_Last>:
20001262:	7815      	ldrb	r5, [r2, #0]
20001264:	5cd4      	ldrb	r4, [r2, r3]
20001266:	3201      	adds	r2, #1
20001268:	0924      	lsrs	r4, r4, #4
2000126a:	0224      	lsls	r4, r4, #8
2000126c:	432c      	orrs	r4, r5
2000126e:	0924      	lsrs	r4, r4, #4
20001270:	00a4      	lsls	r4, r4, #2
20001272:	593c      	ldr	r4, [r7, r4]
20001274:	c010      	stmia	r0!, {r4}
20001276:	4672      	mov	r2, lr
20001278:	2e04      	cmp	r6, #4
2000127a:	d8ea      	bhi.n	20001252 <RenderPlane2_OutLoop>
2000127c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
2000127e:	08b1      	lsrs	r1, r6, #2
20001280:	008e      	lsls	r6, r1, #2
20001282:	1ba4      	subs	r4, r4, r6
20001284:	9400      	str	r4, [sp, #0]
20001286:	3901      	subs	r1, #1

20001288 <RenderPlane2_InLoop>:
20001288:	7815      	ldrb	r5, [r2, #0]
2000128a:	5cd6      	ldrb	r6, [r2, r3]
2000128c:	3201      	adds	r2, #1
2000128e:	0934      	lsrs	r4, r6, #4
20001290:	0224      	lsls	r4, r4, #8
20001292:	432c      	orrs	r4, r5
20001294:	0924      	lsrs	r4, r4, #4
20001296:	00a4      	lsls	r4, r4, #2
20001298:	593c      	ldr	r4, [r7, r4]
2000129a:	0736      	lsls	r6, r6, #28
2000129c:	0db6      	lsrs	r6, r6, #22
2000129e:	072d      	lsls	r5, r5, #28
200012a0:	0ead      	lsrs	r5, r5, #26
200012a2:	4335      	orrs	r5, r6
200012a4:	597d      	ldr	r5, [r7, r5]
200012a6:	c030      	stmia	r0!, {r4, r5}
200012a8:	3902      	subs	r1, #2
200012aa:	d8ed      	bhi.n	20001288 <RenderPlane2_InLoop>

200012ac <RenderPlane2_EndLoop>:
200012ac:	9e06      	ldr	r6, [sp, #24]
200012ae:	d0d8      	beq.n	20001262 <RenderPlane2_Last>
200012b0:	4672      	mov	r2, lr
200012b2:	e7ce      	b.n	20001252 <RenderPlane2_OutLoop>

200012b4 <RenderProgress>:
200012b4:	b5f0      	push	{r4, r5, r6, r7, lr}
200012b6:	9c05      	ldr	r4, [sp, #20]
200012b8:	0889      	lsrs	r1, r1, #2
200012ba:	68e5      	ldr	r5, [r4, #12]
200012bc:	5caa      	ldrb	r2, [r5, r2]
200012be:	089b      	lsrs	r3, r3, #2
200012c0:	8927      	ldrh	r7, [r4, #8]
200012c2:	08bf      	lsrs	r7, r7, #2
200012c4:	46be      	mov	lr, r7
200012c6:	69a5      	ldr	r5, [r4, #24]
200012c8:	6964      	ldr	r4, [r4, #20]
200012ca:	421b      	tst	r3, r3
200012cc:	d017      	beq.n	200012fe <RenderProgress+0x4a>
200012ce:	4677      	mov	r7, lr
200012d0:	1a7f      	subs	r7, r7, r1
200012d2:	429f      	cmp	r7, r3
200012d4:	d900      	bls.n	200012d8 <RenderProgress+0x24>
200012d6:	461f      	mov	r7, r3
200012d8:	1bdb      	subs	r3, r3, r7
200012da:	4291      	cmp	r1, r2
200012dc:	d208      	bcs.n	200012f0 <RenderProgress+0x3c>
200012de:	1a56      	subs	r6, r2, r1
200012e0:	42be      	cmp	r6, r7
200012e2:	d900      	bls.n	200012e6 <RenderProgress+0x32>
200012e4:	463e      	mov	r6, r7
200012e6:	1bbf      	subs	r7, r7, r6
200012e8:	c040      	stmia	r0!, {r6}
200012ea:	1866      	adds	r6, r4, r1
200012ec:	c040      	stmia	r0!, {r6}
200012ee:	4611      	mov	r1, r2
200012f0:	423f      	tst	r7, r7
200012f2:	d002      	beq.n	200012fa <RenderProgress+0x46>
200012f4:	c080      	stmia	r0!, {r7}
200012f6:	186e      	adds	r6, r5, r1
200012f8:	c040      	stmia	r0!, {r6}
200012fa:	2100      	movs	r1, #0
200012fc:	e7e5      	b.n	200012ca <RenderProgress+0x16>
200012fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

20001300 <RenderTile>:
20001300:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
20001302:	9c08      	ldr	r4, [sp, #32]
20001304:	4d2f      	ldr	r5, [pc, #188]	; (200013c4 <RenderTile_pSioBase>)
20001306:	662a      	str	r2, [r5, #96]	; 0x60
20001308:	69a2      	ldr	r2, [r4, #24]
2000130a:	666a      	str	r2, [r5, #100]	; 0x64
2000130c:	8927      	ldrh	r7, [r4, #8]
2000130e:	2603      	movs	r6, #3
20001310:	43b7      	bics	r7, r6
20001312:	9700      	str	r7, [sp, #0]
20001314:	43b1      	bics	r1, r6
20001316:	43b3      	bics	r3, r6
20001318:	9301      	str	r3, [sp, #4]
2000131a:	8a63      	ldrh	r3, [r4, #18]
2000131c:	9302      	str	r3, [sp, #8]
2000131e:	6f6e      	ldr	r6, [r5, #116]	; 0x74
20001320:	6f2f      	ldr	r7, [r5, #112]	; 0x70
20001322:	6629      	str	r1, [r5, #96]	; 0x60
20001324:	666b      	str	r3, [r5, #100]	; 0x64
20001326:	435a      	muls	r2, r3
20001328:	8863      	ldrh	r3, [r4, #2]
2000132a:	435f      	muls	r7, r3
2000132c:	68e3      	ldr	r3, [r4, #12]
2000132e:	18ff      	adds	r7, r7, r3
20001330:	46be      	mov	lr, r7
20001332:	9b02      	ldr	r3, [sp, #8]
20001334:	435e      	muls	r6, r3
20001336:	6964      	ldr	r4, [r4, #20]
20001338:	19a4      	adds	r4, r4, r6
2000133a:	6f6e      	ldr	r6, [r5, #116]	; 0x74
2000133c:	6f2d      	ldr	r5, [r5, #112]	; 0x70
2000133e:	197f      	adds	r7, r7, r5
20001340:	4236      	tst	r6, r6
20001342:	d011      	beq.n	20001368 <RenderTile+0x68>
20001344:	1b9d      	subs	r5, r3, r6
20001346:	1949      	adds	r1, r1, r5
20001348:	9b01      	ldr	r3, [sp, #4]
2000134a:	1b5b      	subs	r3, r3, r5
2000134c:	9301      	str	r3, [sp, #4]
2000134e:	08ad      	lsrs	r5, r5, #2
20001350:	c020      	stmia	r0!, {r5}
20001352:	783b      	ldrb	r3, [r7, #0]
20001354:	3701      	adds	r7, #1
20001356:	4353      	muls	r3, r2
20001358:	4423      	add	r3, r4
2000135a:	4433      	add	r3, r6
2000135c:	c008      	stmia	r0!, {r3}
2000135e:	9b00      	ldr	r3, [sp, #0]
20001360:	4299      	cmp	r1, r3
20001362:	d301      	bcc.n	20001368 <RenderTile+0x68>
20001364:	2100      	movs	r1, #0
20001366:	4677      	mov	r7, lr
20001368:	9b00      	ldr	r3, [sp, #0]
2000136a:	1a5d      	subs	r5, r3, r1
2000136c:	9b01      	ldr	r3, [sp, #4]

2000136e <RenderTile_OutLoop>:
2000136e:	429d      	cmp	r5, r3
20001370:	d900      	bls.n	20001374 <RenderTile_OutLoop+0x6>
20001372:	461d      	mov	r5, r3
20001374:	9902      	ldr	r1, [sp, #8]
20001376:	428d      	cmp	r5, r1
20001378:	d20e      	bcs.n	20001398 <RenderTile_Last+0x18>
2000137a:	2d04      	cmp	r5, #4
2000137c:	d30b      	bcc.n	20001396 <RenderTile_Last+0x16>
2000137e:	4629      	mov	r1, r5

20001380 <RenderTile_Last>:
20001380:	088e      	lsrs	r6, r1, #2
20001382:	c040      	stmia	r0!, {r6}
20001384:	783e      	ldrb	r6, [r7, #0]
20001386:	3701      	adds	r7, #1
20001388:	4356      	muls	r6, r2
2000138a:	4426      	add	r6, r4
2000138c:	c040      	stmia	r0!, {r6}
2000138e:	4677      	mov	r7, lr
20001390:	9e02      	ldr	r6, [sp, #8]
20001392:	42b5      	cmp	r5, r6
20001394:	d2eb      	bcs.n	2000136e <RenderTile_OutLoop>
20001396:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
20001398:	08a9      	lsrs	r1, r5, #2
2000139a:	008d      	lsls	r5, r1, #2
2000139c:	1b5b      	subs	r3, r3, r5
2000139e:	9d02      	ldr	r5, [sp, #8]
200013a0:	08ad      	lsrs	r5, r5, #2
200013a2:	1b49      	subs	r1, r1, r5
200013a4:	3101      	adds	r1, #1

200013a6 <RenderTile_InLoop>:
200013a6:	783e      	ldrb	r6, [r7, #0]
200013a8:	3701      	adds	r7, #1
200013aa:	4356      	muls	r6, r2
200013ac:	4426      	add	r6, r4
200013ae:	c060      	stmia	r0!, {r5, r6}
200013b0:	1b49      	subs	r1, r1, r5
200013b2:	d8f8      	bhi.n	200013a6 <RenderTile_InLoop>
200013b4:	1949      	adds	r1, r1, r5
200013b6:	3901      	subs	r1, #1
200013b8:	9d00      	ldr	r5, [sp, #0]
200013ba:	0089      	lsls	r1, r1, #2
200013bc:	d1e0      	bne.n	20001380 <RenderTile_Last>
200013be:	4677      	mov	r7, lr
200013c0:	e7d5      	b.n	2000136e <RenderTile_OutLoop>
200013c2:	46c0      	nop			; (mov r8, r8)

200013c4 <RenderTile_pSioBase>:
200013c4:	d0000000 	.word	0xd0000000

200013c8 <RenderTile2>:
200013c8:	b5fc      	push	{r2, r3, r4, r5, r6, r7, lr}
200013ca:	9c07      	ldr	r4, [sp, #28]
200013cc:	4d2c      	ldr	r5, [pc, #176]	; (20001480 <RenderTile_pSioBase>)
200013ce:	662a      	str	r2, [r5, #96]	; 0x60
200013d0:	8b22      	ldrh	r2, [r4, #24]
200013d2:	666a      	str	r2, [r5, #100]	; 0x64
200013d4:	8927      	ldrh	r7, [r4, #8]
200013d6:	2603      	movs	r6, #3
200013d8:	43b7      	bics	r7, r6
200013da:	9700      	str	r7, [sp, #0]
200013dc:	43b1      	bics	r1, r6
200013de:	43b3      	bics	r3, r6
200013e0:	9301      	str	r3, [sp, #4]
200013e2:	8a63      	ldrh	r3, [r4, #18]
200013e4:	6f6e      	ldr	r6, [r5, #116]	; 0x74
200013e6:	6f2f      	ldr	r7, [r5, #112]	; 0x70
200013e8:	6629      	str	r1, [r5, #96]	; 0x60
200013ea:	666b      	str	r3, [r5, #100]	; 0x64
200013ec:	8862      	ldrh	r2, [r4, #2]
200013ee:	4357      	muls	r7, r2
200013f0:	68e2      	ldr	r2, [r4, #12]
200013f2:	18bf      	adds	r7, r7, r2
200013f4:	46be      	mov	lr, r7
200013f6:	8b62      	ldrh	r2, [r4, #26]
200013f8:	4356      	muls	r6, r2
200013fa:	6964      	ldr	r4, [r4, #20]
200013fc:	19a4      	adds	r4, r4, r6
200013fe:	6f6e      	ldr	r6, [r5, #116]	; 0x74
20001400:	6f2d      	ldr	r5, [r5, #112]	; 0x70
20001402:	197f      	adds	r7, r7, r5
20001404:	4236      	tst	r6, r6
20001406:	d011      	beq.n	2000142c <RenderTile2+0x64>
20001408:	1b9d      	subs	r5, r3, r6
2000140a:	1949      	adds	r1, r1, r5
2000140c:	9a01      	ldr	r2, [sp, #4]
2000140e:	1b52      	subs	r2, r2, r5
20001410:	9201      	str	r2, [sp, #4]
20001412:	08ad      	lsrs	r5, r5, #2
20001414:	c020      	stmia	r0!, {r5}
20001416:	783a      	ldrb	r2, [r7, #0]
20001418:	3701      	adds	r7, #1
2000141a:	435a      	muls	r2, r3
2000141c:	4422      	add	r2, r4
2000141e:	4432      	add	r2, r6
20001420:	c004      	stmia	r0!, {r2}
20001422:	9a00      	ldr	r2, [sp, #0]
20001424:	4291      	cmp	r1, r2
20001426:	d301      	bcc.n	2000142c <RenderTile2+0x64>
20001428:	2100      	movs	r1, #0
2000142a:	4677      	mov	r7, lr
2000142c:	9a00      	ldr	r2, [sp, #0]
2000142e:	1a55      	subs	r5, r2, r1
20001430:	9a01      	ldr	r2, [sp, #4]

20001432 <RenderTile_OutLoop>:
20001432:	4295      	cmp	r5, r2
20001434:	d900      	bls.n	20001438 <RenderTile_OutLoop+0x6>
20001436:	4615      	mov	r5, r2
20001438:	429d      	cmp	r5, r3
2000143a:	d20d      	bcs.n	20001458 <RenderTile_Last+0x16>
2000143c:	2d04      	cmp	r5, #4
2000143e:	d30a      	bcc.n	20001456 <RenderTile_Last+0x14>
20001440:	4629      	mov	r1, r5

20001442 <RenderTile_Last>:
20001442:	088e      	lsrs	r6, r1, #2
20001444:	c040      	stmia	r0!, {r6}
20001446:	783e      	ldrb	r6, [r7, #0]
20001448:	3701      	adds	r7, #1
2000144a:	435e      	muls	r6, r3
2000144c:	4426      	add	r6, r4
2000144e:	c040      	stmia	r0!, {r6}
20001450:	4677      	mov	r7, lr
20001452:	429d      	cmp	r5, r3
20001454:	d2ed      	bcs.n	20001432 <RenderTile_OutLoop>
20001456:	bdfc      	pop	{r2, r3, r4, r5, r6, r7, pc}
20001458:	08a9      	lsrs	r1, r5, #2
2000145a:	008d      	lsls	r5, r1, #2
2000145c:	1b52      	subs	r2, r2, r5
2000145e:	089d      	lsrs	r5, r3, #2
20001460:	1b49      	subs	r1, r1, r5
20001462:	3101      	adds	r1, #1

20001464 <RenderTile_InLoop>:
20001464:	783e      	ldrb	r6, [r7, #0]
20001466:	3701      	adds	r7, #1
20001468:	435e      	muls	r6, r3
2000146a:	4426      	add	r6, r4
2000146c:	c060      	stmia	r0!, {r5, r6}
2000146e:	1b49      	subs	r1, r1, r5
20001470:	d8f8      	bhi.n	20001464 <RenderTile_InLoop>
20001472:	1949      	adds	r1, r1, r5
20001474:	3901      	subs	r1, #1
20001476:	9d00      	ldr	r5, [sp, #0]
20001478:	0089      	lsls	r1, r1, #2
2000147a:	d1e2      	bne.n	20001442 <RenderTile_Last>
2000147c:	4677      	mov	r7, lr
2000147e:	e7d8      	b.n	20001432 <RenderTile_OutLoop>

20001480 <RenderTile_pSioBase>:
20001480:	d0000000 	.word	0xd0000000

20001484 <RenderTilePersp>:
20001484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
20001486:	9c06      	ldr	r4, [sp, #24]
20001488:	4e5c      	ldr	r6, [pc, #368]	; (200015fc <RenderTilePersp_pSioBase>)
2000148a:	8965      	ldrh	r5, [r4, #10]
2000148c:	7ce1      	ldrb	r1, [r4, #19]
2000148e:	b249      	sxtb	r1, r1
20001490:	0089      	lsls	r1, r1, #2
20001492:	d107      	bne.n	200014a4 <RenderTilePersp+0x20>
20001494:	086d      	lsrs	r5, r5, #1
20001496:	1b52      	subs	r2, r2, r5
20001498:	4694      	mov	ip, r2
2000149a:	2501      	movs	r5, #1
2000149c:	6675      	str	r5, [r6, #100]	; 0x64
2000149e:	032d      	lsls	r5, r5, #12
200014a0:	6635      	str	r5, [r6, #96]	; 0x60
200014a2:	e009      	b.n	200014b8 <RenderTilePersp+0x34>
200014a4:	d502      	bpl.n	200014ac <RenderTilePersp+0x28>
200014a6:	1aaa      	subs	r2, r5, r2
200014a8:	3a01      	subs	r2, #1
200014aa:	4249      	negs	r1, r1
200014ac:	1b57      	subs	r7, r2, r5
200014ae:	46bc      	mov	ip, r7
200014b0:	032d      	lsls	r5, r5, #12
200014b2:	6635      	str	r5, [r6, #96]	; 0x60
200014b4:	1852      	adds	r2, r2, r1
200014b6:	6672      	str	r2, [r6, #100]	; 0x64
200014b8:	085d      	lsrs	r5, r3, #1
200014ba:	426d      	negs	r5, r5
200014bc:	46ae      	mov	lr, r5
200014be:	089f      	lsrs	r7, r3, #2
200014c0:	4b4f      	ldr	r3, [pc, #316]	; (20001600 <RenderTilePersp_Interp>)
200014c2:	68e6      	ldr	r6, [r4, #12]
200014c4:	611e      	str	r6, [r3, #16]
200014c6:	4e4f      	ldr	r6, [pc, #316]	; (20001604 <RenderTilePersp_Ctrl>)
200014c8:	7ca1      	ldrb	r1, [r4, #18]
200014ca:	9100      	str	r1, [sp, #0]
200014cc:	1876      	adds	r6, r6, r1
200014ce:	78a2      	ldrb	r2, [r4, #2]
200014d0:	1e55      	subs	r5, r2, #1
200014d2:	02ad      	lsls	r5, r5, #10
200014d4:	432e      	orrs	r6, r5
200014d6:	62de      	str	r6, [r3, #44]	; 0x2c
200014d8:	1ab6      	subs	r6, r6, r2
200014da:	0152      	lsls	r2, r2, #5
200014dc:	4316      	orrs	r6, r2
200014de:	78e2      	ldrb	r2, [r4, #3]
200014e0:	0292      	lsls	r2, r2, #10
200014e2:	18b6      	adds	r6, r6, r2
200014e4:	631e      	str	r6, [r3, #48]	; 0x30
200014e6:	6966      	ldr	r6, [r4, #20]
200014e8:	651e      	str	r6, [r3, #80]	; 0x50
200014ea:	4e46      	ldr	r6, [pc, #280]	; (20001604 <RenderTilePersp_Ctrl>)
200014ec:	1e4d      	subs	r5, r1, #1
200014ee:	02ad      	lsls	r5, r5, #10
200014f0:	432e      	orrs	r6, r5
200014f2:	66de      	str	r6, [r3, #108]	; 0x6c
200014f4:	1a76      	subs	r6, r6, r1
200014f6:	014d      	lsls	r5, r1, #5
200014f8:	432e      	orrs	r6, r5
200014fa:	0289      	lsls	r1, r1, #10
200014fc:	1876      	adds	r6, r6, r1
200014fe:	671e      	str	r6, [r3, #112]	; 0x70
20001500:	69a4      	ldr	r4, [r4, #24]
20001502:	493e      	ldr	r1, [pc, #248]	; (200015fc <RenderTilePersp_pSioBase>)
20001504:	6f09      	ldr	r1, [r1, #112]	; 0x70
20001506:	6825      	ldr	r5, [r4, #0]
20001508:	434d      	muls	r5, r1
2000150a:	132d      	asrs	r5, r5, #12
2000150c:	609d      	str	r5, [r3, #8]
2000150e:	649d      	str	r5, [r3, #72]	; 0x48
20001510:	68e6      	ldr	r6, [r4, #12]
20001512:	434e      	muls	r6, r1
20001514:	1336      	asrs	r6, r6, #12
20001516:	60de      	str	r6, [r3, #12]
20001518:	64de      	str	r6, [r3, #76]	; 0x4c
2000151a:	4672      	mov	r2, lr
2000151c:	4355      	muls	r5, r2
2000151e:	4372      	muls	r2, r6
20001520:	468e      	mov	lr, r1
20001522:	6866      	ldr	r6, [r4, #4]
20001524:	4371      	muls	r1, r6
20001526:	1309      	asrs	r1, r1, #12
20001528:	4666      	mov	r6, ip
2000152a:	4371      	muls	r1, r6
2000152c:	186d      	adds	r5, r5, r1
2000152e:	68a1      	ldr	r1, [r4, #8]
20001530:	186d      	adds	r5, r5, r1
20001532:	601d      	str	r5, [r3, #0]
20001534:	641d      	str	r5, [r3, #64]	; 0x40
20001536:	6921      	ldr	r1, [r4, #16]
20001538:	4675      	mov	r5, lr
2000153a:	4369      	muls	r1, r5
2000153c:	1309      	asrs	r1, r1, #12
2000153e:	4371      	muls	r1, r6
20001540:	1852      	adds	r2, r2, r1
20001542:	6961      	ldr	r1, [r4, #20]
20001544:	1852      	adds	r2, r2, r1
20001546:	605a      	str	r2, [r3, #4]
20001548:	645a      	str	r2, [r3, #68]	; 0x44
2000154a:	9e00      	ldr	r6, [sp, #0]
2000154c:	0076      	lsls	r6, r6, #1
2000154e:	087f      	lsrs	r7, r7, #1
20001550:	d31a      	bcc.n	20001588 <RenderTilePersp+0x104>
20001552:	69dc      	ldr	r4, [r3, #28]
20001554:	7824      	ldrb	r4, [r4, #0]
20001556:	40b4      	lsls	r4, r6
20001558:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
2000155a:	5d29      	ldrb	r1, [r5, r4]
2000155c:	69dc      	ldr	r4, [r3, #28]
2000155e:	7824      	ldrb	r4, [r4, #0]
20001560:	40b4      	lsls	r4, r6
20001562:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
20001564:	5d2c      	ldrb	r4, [r5, r4]
20001566:	0224      	lsls	r4, r4, #8
20001568:	4321      	orrs	r1, r4
2000156a:	69dc      	ldr	r4, [r3, #28]
2000156c:	7824      	ldrb	r4, [r4, #0]
2000156e:	40b4      	lsls	r4, r6
20001570:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
20001572:	5d2c      	ldrb	r4, [r5, r4]
20001574:	0424      	lsls	r4, r4, #16
20001576:	4321      	orrs	r1, r4
20001578:	69dc      	ldr	r4, [r3, #28]
2000157a:	7824      	ldrb	r4, [r4, #0]
2000157c:	40b4      	lsls	r4, r6
2000157e:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
20001580:	5d2c      	ldrb	r4, [r5, r4]
20001582:	0624      	lsls	r4, r4, #24
20001584:	4321      	orrs	r1, r4
20001586:	c002      	stmia	r0!, {r1}
20001588:	423f      	tst	r7, r7
2000158a:	d036      	beq.n	200015fa <RenderTilePersp+0x176>
2000158c:	69dc      	ldr	r4, [r3, #28]
2000158e:	7824      	ldrb	r4, [r4, #0]
20001590:	40b4      	lsls	r4, r6
20001592:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
20001594:	5d29      	ldrb	r1, [r5, r4]
20001596:	69dc      	ldr	r4, [r3, #28]
20001598:	7824      	ldrb	r4, [r4, #0]
2000159a:	40b4      	lsls	r4, r6
2000159c:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
2000159e:	5d2c      	ldrb	r4, [r5, r4]
200015a0:	0224      	lsls	r4, r4, #8
200015a2:	4321      	orrs	r1, r4
200015a4:	69dc      	ldr	r4, [r3, #28]
200015a6:	7824      	ldrb	r4, [r4, #0]
200015a8:	40b4      	lsls	r4, r6
200015aa:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
200015ac:	5d2c      	ldrb	r4, [r5, r4]
200015ae:	0424      	lsls	r4, r4, #16
200015b0:	4321      	orrs	r1, r4
200015b2:	69dc      	ldr	r4, [r3, #28]
200015b4:	7824      	ldrb	r4, [r4, #0]
200015b6:	40b4      	lsls	r4, r6
200015b8:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
200015ba:	5d2c      	ldrb	r4, [r5, r4]
200015bc:	0624      	lsls	r4, r4, #24
200015be:	4321      	orrs	r1, r4
200015c0:	69dc      	ldr	r4, [r3, #28]
200015c2:	7824      	ldrb	r4, [r4, #0]
200015c4:	40b4      	lsls	r4, r6
200015c6:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
200015c8:	5d2a      	ldrb	r2, [r5, r4]
200015ca:	69dc      	ldr	r4, [r3, #28]
200015cc:	7824      	ldrb	r4, [r4, #0]
200015ce:	40b4      	lsls	r4, r6
200015d0:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
200015d2:	5d2c      	ldrb	r4, [r5, r4]
200015d4:	0224      	lsls	r4, r4, #8
200015d6:	4322      	orrs	r2, r4
200015d8:	69dc      	ldr	r4, [r3, #28]
200015da:	7824      	ldrb	r4, [r4, #0]
200015dc:	40b4      	lsls	r4, r6
200015de:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
200015e0:	5d2c      	ldrb	r4, [r5, r4]
200015e2:	0424      	lsls	r4, r4, #16
200015e4:	4322      	orrs	r2, r4
200015e6:	69dc      	ldr	r4, [r3, #28]
200015e8:	7824      	ldrb	r4, [r4, #0]
200015ea:	40b4      	lsls	r4, r6
200015ec:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
200015ee:	5d2c      	ldrb	r4, [r5, r4]
200015f0:	0624      	lsls	r4, r4, #24
200015f2:	4322      	orrs	r2, r4
200015f4:	c006      	stmia	r0!, {r1, r2}
200015f6:	3f01      	subs	r7, #1
200015f8:	d1c8      	bne.n	2000158c <RenderTilePersp+0x108>
200015fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

200015fc <RenderTilePersp_pSioBase>:
200015fc:	d0000000 	.word	0xd0000000

20001600 <RenderTilePersp_Interp>:
20001600:	d0000080 	.word	0xd0000080

20001604 <RenderTilePersp_Ctrl>:
20001604:	0004000c 	.word	0x0004000c

20001608 <RenderTilePersp15>:
20001608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2000160a:	9c06      	ldr	r4, [sp, #24]
2000160c:	4e57      	ldr	r6, [pc, #348]	; (2000176c <RenderTilePersp_pSioBase>)
2000160e:	8965      	ldrh	r5, [r4, #10]
20001610:	7ce1      	ldrb	r1, [r4, #19]
20001612:	b249      	sxtb	r1, r1
20001614:	0089      	lsls	r1, r1, #2
20001616:	d107      	bne.n	20001628 <RenderTilePersp15+0x20>
20001618:	086d      	lsrs	r5, r5, #1
2000161a:	1b52      	subs	r2, r2, r5
2000161c:	4694      	mov	ip, r2
2000161e:	2501      	movs	r5, #1
20001620:	6675      	str	r5, [r6, #100]	; 0x64
20001622:	032d      	lsls	r5, r5, #12
20001624:	6635      	str	r5, [r6, #96]	; 0x60
20001626:	e009      	b.n	2000163c <RenderTilePersp15+0x34>
20001628:	d502      	bpl.n	20001630 <RenderTilePersp15+0x28>
2000162a:	1aaa      	subs	r2, r5, r2
2000162c:	3a01      	subs	r2, #1
2000162e:	4249      	negs	r1, r1
20001630:	1b57      	subs	r7, r2, r5
20001632:	46bc      	mov	ip, r7
20001634:	032d      	lsls	r5, r5, #12
20001636:	6635      	str	r5, [r6, #96]	; 0x60
20001638:	1852      	adds	r2, r2, r1
2000163a:	6672      	str	r2, [r6, #100]	; 0x64
2000163c:	085d      	lsrs	r5, r3, #1
2000163e:	426d      	negs	r5, r5
20001640:	46ae      	mov	lr, r5
20001642:	089f      	lsrs	r7, r3, #2
20001644:	4b4a      	ldr	r3, [pc, #296]	; (20001770 <RenderTilePersp_Interp>)
20001646:	68e6      	ldr	r6, [r4, #12]
20001648:	611e      	str	r6, [r3, #16]
2000164a:	4e4a      	ldr	r6, [pc, #296]	; (20001774 <RenderTilePersp_Ctrl>)
2000164c:	7ca1      	ldrb	r1, [r4, #18]
2000164e:	9100      	str	r1, [sp, #0]
20001650:	1876      	adds	r6, r6, r1
20001652:	78a2      	ldrb	r2, [r4, #2]
20001654:	1e55      	subs	r5, r2, #1
20001656:	02ad      	lsls	r5, r5, #10
20001658:	432e      	orrs	r6, r5
2000165a:	62de      	str	r6, [r3, #44]	; 0x2c
2000165c:	1ab6      	subs	r6, r6, r2
2000165e:	0152      	lsls	r2, r2, #5
20001660:	4316      	orrs	r6, r2
20001662:	78e2      	ldrb	r2, [r4, #3]
20001664:	0292      	lsls	r2, r2, #10
20001666:	18b6      	adds	r6, r6, r2
20001668:	631e      	str	r6, [r3, #48]	; 0x30
2000166a:	6966      	ldr	r6, [r4, #20]
2000166c:	651e      	str	r6, [r3, #80]	; 0x50
2000166e:	4e41      	ldr	r6, [pc, #260]	; (20001774 <RenderTilePersp_Ctrl>)
20001670:	1e4d      	subs	r5, r1, #1
20001672:	02ad      	lsls	r5, r5, #10
20001674:	432e      	orrs	r6, r5
20001676:	66de      	str	r6, [r3, #108]	; 0x6c
20001678:	1a76      	subs	r6, r6, r1
2000167a:	014d      	lsls	r5, r1, #5
2000167c:	432e      	orrs	r6, r5
2000167e:	0289      	lsls	r1, r1, #10
20001680:	1876      	adds	r6, r6, r1
20001682:	671e      	str	r6, [r3, #112]	; 0x70
20001684:	69a4      	ldr	r4, [r4, #24]
20001686:	4939      	ldr	r1, [pc, #228]	; (2000176c <RenderTilePersp_pSioBase>)
20001688:	6f09      	ldr	r1, [r1, #112]	; 0x70
2000168a:	6825      	ldr	r5, [r4, #0]
2000168c:	434d      	muls	r5, r1
2000168e:	132d      	asrs	r5, r5, #12
20001690:	106a      	asrs	r2, r5, #1
20001692:	1952      	adds	r2, r2, r5
20001694:	609a      	str	r2, [r3, #8]
20001696:	649a      	str	r2, [r3, #72]	; 0x48
20001698:	68e6      	ldr	r6, [r4, #12]
2000169a:	434e      	muls	r6, r1
2000169c:	1336      	asrs	r6, r6, #12
2000169e:	1072      	asrs	r2, r6, #1
200016a0:	1992      	adds	r2, r2, r6
200016a2:	60da      	str	r2, [r3, #12]
200016a4:	64da      	str	r2, [r3, #76]	; 0x4c
200016a6:	4672      	mov	r2, lr
200016a8:	4355      	muls	r5, r2
200016aa:	4372      	muls	r2, r6
200016ac:	468e      	mov	lr, r1
200016ae:	6866      	ldr	r6, [r4, #4]
200016b0:	4371      	muls	r1, r6
200016b2:	1309      	asrs	r1, r1, #12
200016b4:	4666      	mov	r6, ip
200016b6:	4371      	muls	r1, r6
200016b8:	186d      	adds	r5, r5, r1
200016ba:	68a1      	ldr	r1, [r4, #8]
200016bc:	186d      	adds	r5, r5, r1
200016be:	601d      	str	r5, [r3, #0]
200016c0:	641d      	str	r5, [r3, #64]	; 0x40
200016c2:	6921      	ldr	r1, [r4, #16]
200016c4:	4675      	mov	r5, lr
200016c6:	4369      	muls	r1, r5
200016c8:	1309      	asrs	r1, r1, #12
200016ca:	4371      	muls	r1, r6
200016cc:	1852      	adds	r2, r2, r1
200016ce:	6961      	ldr	r1, [r4, #20]
200016d0:	1852      	adds	r2, r2, r1
200016d2:	605a      	str	r2, [r3, #4]
200016d4:	645a      	str	r2, [r3, #68]	; 0x44
200016d6:	9e00      	ldr	r6, [sp, #0]
200016d8:	0076      	lsls	r6, r6, #1
200016da:	087f      	lsrs	r7, r7, #1
200016dc:	d315      	bcc.n	2000170a <RenderTilePersp15+0x102>
200016de:	69dc      	ldr	r4, [r3, #28]
200016e0:	7824      	ldrb	r4, [r4, #0]
200016e2:	40b4      	lsls	r4, r6
200016e4:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
200016e6:	5d29      	ldrb	r1, [r5, r4]
200016e8:	69dc      	ldr	r4, [r3, #28]
200016ea:	7824      	ldrb	r4, [r4, #0]
200016ec:	40b4      	lsls	r4, r6
200016ee:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
200016f0:	5d2c      	ldrb	r4, [r5, r4]
200016f2:	0224      	lsls	r4, r4, #8
200016f4:	4321      	orrs	r1, r4
200016f6:	69dc      	ldr	r4, [r3, #28]
200016f8:	7824      	ldrb	r4, [r4, #0]
200016fa:	40b4      	lsls	r4, r6
200016fc:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
200016fe:	5d2c      	ldrb	r4, [r5, r4]
20001700:	0424      	lsls	r4, r4, #16
20001702:	4321      	orrs	r1, r4
20001704:	0224      	lsls	r4, r4, #8
20001706:	4321      	orrs	r1, r4
20001708:	c002      	stmia	r0!, {r1}
2000170a:	423f      	tst	r7, r7
2000170c:	d02c      	beq.n	20001768 <RenderTilePersp15+0x160>
2000170e:	69dc      	ldr	r4, [r3, #28]
20001710:	7824      	ldrb	r4, [r4, #0]
20001712:	40b4      	lsls	r4, r6
20001714:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
20001716:	5d29      	ldrb	r1, [r5, r4]
20001718:	69dc      	ldr	r4, [r3, #28]
2000171a:	7824      	ldrb	r4, [r4, #0]
2000171c:	40b4      	lsls	r4, r6
2000171e:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
20001720:	5d2c      	ldrb	r4, [r5, r4]
20001722:	0224      	lsls	r4, r4, #8
20001724:	4321      	orrs	r1, r4
20001726:	69dc      	ldr	r4, [r3, #28]
20001728:	7824      	ldrb	r4, [r4, #0]
2000172a:	40b4      	lsls	r4, r6
2000172c:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
2000172e:	5d2c      	ldrb	r4, [r5, r4]
20001730:	0424      	lsls	r4, r4, #16
20001732:	4321      	orrs	r1, r4
20001734:	0224      	lsls	r4, r4, #8
20001736:	4321      	orrs	r1, r4
20001738:	69dc      	ldr	r4, [r3, #28]
2000173a:	7824      	ldrb	r4, [r4, #0]
2000173c:	40b4      	lsls	r4, r6
2000173e:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
20001740:	5d2a      	ldrb	r2, [r5, r4]
20001742:	69dc      	ldr	r4, [r3, #28]
20001744:	7824      	ldrb	r4, [r4, #0]
20001746:	40b4      	lsls	r4, r6
20001748:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
2000174a:	5d2c      	ldrb	r4, [r5, r4]
2000174c:	0224      	lsls	r4, r4, #8
2000174e:	4322      	orrs	r2, r4
20001750:	69dc      	ldr	r4, [r3, #28]
20001752:	7824      	ldrb	r4, [r4, #0]
20001754:	40b4      	lsls	r4, r6
20001756:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
20001758:	5d2c      	ldrb	r4, [r5, r4]
2000175a:	0424      	lsls	r4, r4, #16
2000175c:	4322      	orrs	r2, r4
2000175e:	0224      	lsls	r4, r4, #8
20001760:	4322      	orrs	r2, r4
20001762:	c006      	stmia	r0!, {r1, r2}
20001764:	3f01      	subs	r7, #1
20001766:	d1d2      	bne.n	2000170e <RenderTilePersp15+0x106>
20001768:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
2000176a:	46c0      	nop			; (mov r8, r8)

2000176c <RenderTilePersp_pSioBase>:
2000176c:	d0000000 	.word	0xd0000000

20001770 <RenderTilePersp_Interp>:
20001770:	d0000080 	.word	0xd0000080

20001774 <RenderTilePersp_Ctrl>:
20001774:	0004000c 	.word	0x0004000c

20001778 <RenderTilePersp2>:
20001778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2000177a:	9c06      	ldr	r4, [sp, #24]
2000177c:	4e4e      	ldr	r6, [pc, #312]	; (200018b8 <RenderTilePersp_pSioBase>)
2000177e:	8965      	ldrh	r5, [r4, #10]
20001780:	7ce1      	ldrb	r1, [r4, #19]
20001782:	b249      	sxtb	r1, r1
20001784:	0089      	lsls	r1, r1, #2
20001786:	d107      	bne.n	20001798 <RenderTilePersp2+0x20>
20001788:	086d      	lsrs	r5, r5, #1
2000178a:	1b52      	subs	r2, r2, r5
2000178c:	4694      	mov	ip, r2
2000178e:	2501      	movs	r5, #1
20001790:	6675      	str	r5, [r6, #100]	; 0x64
20001792:	032d      	lsls	r5, r5, #12
20001794:	6635      	str	r5, [r6, #96]	; 0x60
20001796:	e009      	b.n	200017ac <RenderTilePersp2+0x34>
20001798:	d502      	bpl.n	200017a0 <RenderTilePersp2+0x28>
2000179a:	1aaa      	subs	r2, r5, r2
2000179c:	3a01      	subs	r2, #1
2000179e:	4249      	negs	r1, r1
200017a0:	1b57      	subs	r7, r2, r5
200017a2:	46bc      	mov	ip, r7
200017a4:	032d      	lsls	r5, r5, #12
200017a6:	6635      	str	r5, [r6, #96]	; 0x60
200017a8:	1852      	adds	r2, r2, r1
200017aa:	6672      	str	r2, [r6, #100]	; 0x64
200017ac:	085d      	lsrs	r5, r3, #1
200017ae:	426d      	negs	r5, r5
200017b0:	46ae      	mov	lr, r5
200017b2:	089f      	lsrs	r7, r3, #2
200017b4:	4b41      	ldr	r3, [pc, #260]	; (200018bc <RenderTilePersp_Interp>)
200017b6:	68e6      	ldr	r6, [r4, #12]
200017b8:	611e      	str	r6, [r3, #16]
200017ba:	4e41      	ldr	r6, [pc, #260]	; (200018c0 <RenderTilePersp_Ctrl>)
200017bc:	7ca1      	ldrb	r1, [r4, #18]
200017be:	9100      	str	r1, [sp, #0]
200017c0:	1876      	adds	r6, r6, r1
200017c2:	78a2      	ldrb	r2, [r4, #2]
200017c4:	1e55      	subs	r5, r2, #1
200017c6:	02ad      	lsls	r5, r5, #10
200017c8:	432e      	orrs	r6, r5
200017ca:	62de      	str	r6, [r3, #44]	; 0x2c
200017cc:	1ab6      	subs	r6, r6, r2
200017ce:	0152      	lsls	r2, r2, #5
200017d0:	4316      	orrs	r6, r2
200017d2:	78e2      	ldrb	r2, [r4, #3]
200017d4:	0292      	lsls	r2, r2, #10
200017d6:	18b6      	adds	r6, r6, r2
200017d8:	631e      	str	r6, [r3, #48]	; 0x30
200017da:	6966      	ldr	r6, [r4, #20]
200017dc:	651e      	str	r6, [r3, #80]	; 0x50
200017de:	4e38      	ldr	r6, [pc, #224]	; (200018c0 <RenderTilePersp_Ctrl>)
200017e0:	1e4d      	subs	r5, r1, #1
200017e2:	02ad      	lsls	r5, r5, #10
200017e4:	432e      	orrs	r6, r5
200017e6:	66de      	str	r6, [r3, #108]	; 0x6c
200017e8:	1a76      	subs	r6, r6, r1
200017ea:	014d      	lsls	r5, r1, #5
200017ec:	432e      	orrs	r6, r5
200017ee:	0289      	lsls	r1, r1, #10
200017f0:	1876      	adds	r6, r6, r1
200017f2:	671e      	str	r6, [r3, #112]	; 0x70
200017f4:	69a4      	ldr	r4, [r4, #24]
200017f6:	4930      	ldr	r1, [pc, #192]	; (200018b8 <RenderTilePersp_pSioBase>)
200017f8:	6f09      	ldr	r1, [r1, #112]	; 0x70
200017fa:	6825      	ldr	r5, [r4, #0]
200017fc:	434d      	muls	r5, r1
200017fe:	12ed      	asrs	r5, r5, #11
20001800:	609d      	str	r5, [r3, #8]
20001802:	649d      	str	r5, [r3, #72]	; 0x48
20001804:	106d      	asrs	r5, r5, #1
20001806:	68e6      	ldr	r6, [r4, #12]
20001808:	434e      	muls	r6, r1
2000180a:	12f6      	asrs	r6, r6, #11
2000180c:	60de      	str	r6, [r3, #12]
2000180e:	64de      	str	r6, [r3, #76]	; 0x4c
20001810:	1076      	asrs	r6, r6, #1
20001812:	4672      	mov	r2, lr
20001814:	4355      	muls	r5, r2
20001816:	4372      	muls	r2, r6
20001818:	468e      	mov	lr, r1
2000181a:	6866      	ldr	r6, [r4, #4]
2000181c:	4371      	muls	r1, r6
2000181e:	1309      	asrs	r1, r1, #12
20001820:	4666      	mov	r6, ip
20001822:	4371      	muls	r1, r6
20001824:	186d      	adds	r5, r5, r1
20001826:	68a1      	ldr	r1, [r4, #8]
20001828:	186d      	adds	r5, r5, r1
2000182a:	601d      	str	r5, [r3, #0]
2000182c:	641d      	str	r5, [r3, #64]	; 0x40
2000182e:	6921      	ldr	r1, [r4, #16]
20001830:	4675      	mov	r5, lr
20001832:	4369      	muls	r1, r5
20001834:	1309      	asrs	r1, r1, #12
20001836:	4371      	muls	r1, r6
20001838:	1852      	adds	r2, r2, r1
2000183a:	6961      	ldr	r1, [r4, #20]
2000183c:	1852      	adds	r2, r2, r1
2000183e:	605a      	str	r2, [r3, #4]
20001840:	645a      	str	r2, [r3, #68]	; 0x44
20001842:	9e00      	ldr	r6, [sp, #0]
20001844:	0076      	lsls	r6, r6, #1
20001846:	087f      	lsrs	r7, r7, #1
20001848:	d310      	bcc.n	2000186c <RenderTilePersp2+0xf4>
2000184a:	69dc      	ldr	r4, [r3, #28]
2000184c:	7824      	ldrb	r4, [r4, #0]
2000184e:	40b4      	lsls	r4, r6
20001850:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
20001852:	5d29      	ldrb	r1, [r5, r4]
20001854:	020c      	lsls	r4, r1, #8
20001856:	4321      	orrs	r1, r4
20001858:	69dc      	ldr	r4, [r3, #28]
2000185a:	7824      	ldrb	r4, [r4, #0]
2000185c:	40b4      	lsls	r4, r6
2000185e:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
20001860:	5d2c      	ldrb	r4, [r5, r4]
20001862:	0424      	lsls	r4, r4, #16
20001864:	4321      	orrs	r1, r4
20001866:	0224      	lsls	r4, r4, #8
20001868:	4321      	orrs	r1, r4
2000186a:	c002      	stmia	r0!, {r1}
2000186c:	423f      	tst	r7, r7
2000186e:	d022      	beq.n	200018b6 <RenderTilePersp2+0x13e>
20001870:	69dc      	ldr	r4, [r3, #28]
20001872:	7824      	ldrb	r4, [r4, #0]
20001874:	40b4      	lsls	r4, r6
20001876:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
20001878:	5d29      	ldrb	r1, [r5, r4]
2000187a:	020c      	lsls	r4, r1, #8
2000187c:	4321      	orrs	r1, r4
2000187e:	69dc      	ldr	r4, [r3, #28]
20001880:	7824      	ldrb	r4, [r4, #0]
20001882:	40b4      	lsls	r4, r6
20001884:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
20001886:	5d2c      	ldrb	r4, [r5, r4]
20001888:	0424      	lsls	r4, r4, #16
2000188a:	4321      	orrs	r1, r4
2000188c:	0224      	lsls	r4, r4, #8
2000188e:	4321      	orrs	r1, r4
20001890:	69dc      	ldr	r4, [r3, #28]
20001892:	7824      	ldrb	r4, [r4, #0]
20001894:	40b4      	lsls	r4, r6
20001896:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
20001898:	5d2a      	ldrb	r2, [r5, r4]
2000189a:	0214      	lsls	r4, r2, #8
2000189c:	4322      	orrs	r2, r4
2000189e:	69dc      	ldr	r4, [r3, #28]
200018a0:	7824      	ldrb	r4, [r4, #0]
200018a2:	40b4      	lsls	r4, r6
200018a4:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
200018a6:	5d2c      	ldrb	r4, [r5, r4]
200018a8:	0424      	lsls	r4, r4, #16
200018aa:	4322      	orrs	r2, r4
200018ac:	0224      	lsls	r4, r4, #8
200018ae:	4322      	orrs	r2, r4
200018b0:	c006      	stmia	r0!, {r1, r2}
200018b2:	3f01      	subs	r7, #1
200018b4:	d1dc      	bne.n	20001870 <RenderTilePersp2+0xf8>
200018b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

200018b8 <RenderTilePersp_pSioBase>:
200018b8:	d0000000 	.word	0xd0000000

200018bc <RenderTilePersp_Interp>:
200018bc:	d0000080 	.word	0xd0000080

200018c0 <RenderTilePersp_Ctrl>:
200018c0:	0004000c 	.word	0x0004000c

200018c4 <RenderTilePersp3>:
200018c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
200018c6:	9c06      	ldr	r4, [sp, #24]
200018c8:	4e48      	ldr	r6, [pc, #288]	; (200019ec <RenderTilePersp_pSioBase>)
200018ca:	8965      	ldrh	r5, [r4, #10]
200018cc:	7ce1      	ldrb	r1, [r4, #19]
200018ce:	b249      	sxtb	r1, r1
200018d0:	0089      	lsls	r1, r1, #2
200018d2:	d107      	bne.n	200018e4 <RenderTilePersp3+0x20>
200018d4:	086d      	lsrs	r5, r5, #1
200018d6:	1b52      	subs	r2, r2, r5
200018d8:	4694      	mov	ip, r2
200018da:	2501      	movs	r5, #1
200018dc:	6675      	str	r5, [r6, #100]	; 0x64
200018de:	032d      	lsls	r5, r5, #12
200018e0:	6635      	str	r5, [r6, #96]	; 0x60
200018e2:	e009      	b.n	200018f8 <RenderTilePersp3+0x34>
200018e4:	d502      	bpl.n	200018ec <RenderTilePersp3+0x28>
200018e6:	1aaa      	subs	r2, r5, r2
200018e8:	3a01      	subs	r2, #1
200018ea:	4249      	negs	r1, r1
200018ec:	1b57      	subs	r7, r2, r5
200018ee:	46bc      	mov	ip, r7
200018f0:	032d      	lsls	r5, r5, #12
200018f2:	6635      	str	r5, [r6, #96]	; 0x60
200018f4:	1852      	adds	r2, r2, r1
200018f6:	6672      	str	r2, [r6, #100]	; 0x64
200018f8:	085d      	lsrs	r5, r3, #1
200018fa:	426d      	negs	r5, r5
200018fc:	46ae      	mov	lr, r5
200018fe:	089f      	lsrs	r7, r3, #2
20001900:	4b3b      	ldr	r3, [pc, #236]	; (200019f0 <RenderTilePersp_Interp>)
20001902:	68e6      	ldr	r6, [r4, #12]
20001904:	611e      	str	r6, [r3, #16]
20001906:	4e3b      	ldr	r6, [pc, #236]	; (200019f4 <RenderTilePersp_Ctrl>)
20001908:	7ca1      	ldrb	r1, [r4, #18]
2000190a:	9100      	str	r1, [sp, #0]
2000190c:	1876      	adds	r6, r6, r1
2000190e:	78a2      	ldrb	r2, [r4, #2]
20001910:	1e55      	subs	r5, r2, #1
20001912:	02ad      	lsls	r5, r5, #10
20001914:	432e      	orrs	r6, r5
20001916:	62de      	str	r6, [r3, #44]	; 0x2c
20001918:	1ab6      	subs	r6, r6, r2
2000191a:	0152      	lsls	r2, r2, #5
2000191c:	4316      	orrs	r6, r2
2000191e:	78e2      	ldrb	r2, [r4, #3]
20001920:	0292      	lsls	r2, r2, #10
20001922:	18b6      	adds	r6, r6, r2
20001924:	631e      	str	r6, [r3, #48]	; 0x30
20001926:	6966      	ldr	r6, [r4, #20]
20001928:	651e      	str	r6, [r3, #80]	; 0x50
2000192a:	4e32      	ldr	r6, [pc, #200]	; (200019f4 <RenderTilePersp_Ctrl>)
2000192c:	1e4d      	subs	r5, r1, #1
2000192e:	02ad      	lsls	r5, r5, #10
20001930:	432e      	orrs	r6, r5
20001932:	66de      	str	r6, [r3, #108]	; 0x6c
20001934:	1a76      	subs	r6, r6, r1
20001936:	014d      	lsls	r5, r1, #5
20001938:	432e      	orrs	r6, r5
2000193a:	0289      	lsls	r1, r1, #10
2000193c:	1876      	adds	r6, r6, r1
2000193e:	671e      	str	r6, [r3, #112]	; 0x70
20001940:	69a4      	ldr	r4, [r4, #24]
20001942:	492a      	ldr	r1, [pc, #168]	; (200019ec <RenderTilePersp_pSioBase>)
20001944:	6f09      	ldr	r1, [r1, #112]	; 0x70
20001946:	6825      	ldr	r5, [r4, #0]
20001948:	434d      	muls	r5, r1
2000194a:	132d      	asrs	r5, r5, #12
2000194c:	006a      	lsls	r2, r5, #1
2000194e:	1952      	adds	r2, r2, r5
20001950:	609a      	str	r2, [r3, #8]
20001952:	649a      	str	r2, [r3, #72]	; 0x48
20001954:	68e6      	ldr	r6, [r4, #12]
20001956:	434e      	muls	r6, r1
20001958:	1336      	asrs	r6, r6, #12
2000195a:	0072      	lsls	r2, r6, #1
2000195c:	1992      	adds	r2, r2, r6
2000195e:	60da      	str	r2, [r3, #12]
20001960:	64da      	str	r2, [r3, #76]	; 0x4c
20001962:	4672      	mov	r2, lr
20001964:	4355      	muls	r5, r2
20001966:	4372      	muls	r2, r6
20001968:	468e      	mov	lr, r1
2000196a:	6866      	ldr	r6, [r4, #4]
2000196c:	4371      	muls	r1, r6
2000196e:	1309      	asrs	r1, r1, #12
20001970:	4666      	mov	r6, ip
20001972:	4371      	muls	r1, r6
20001974:	186d      	adds	r5, r5, r1
20001976:	68a1      	ldr	r1, [r4, #8]
20001978:	186d      	adds	r5, r5, r1
2000197a:	601d      	str	r5, [r3, #0]
2000197c:	641d      	str	r5, [r3, #64]	; 0x40
2000197e:	6921      	ldr	r1, [r4, #16]
20001980:	4675      	mov	r5, lr
20001982:	4369      	muls	r1, r5
20001984:	1309      	asrs	r1, r1, #12
20001986:	4371      	muls	r1, r6
20001988:	1852      	adds	r2, r2, r1
2000198a:	6961      	ldr	r1, [r4, #20]
2000198c:	1852      	adds	r2, r2, r1
2000198e:	605a      	str	r2, [r3, #4]
20001990:	645a      	str	r2, [r3, #68]	; 0x44
20001992:	9e00      	ldr	r6, [sp, #0]
20001994:	0076      	lsls	r6, r6, #1
20001996:	087f      	lsrs	r7, r7, #1
20001998:	d309      	bcc.n	200019ae <RenderTilePersp3+0xea>
2000199a:	69dc      	ldr	r4, [r3, #28]
2000199c:	7824      	ldrb	r4, [r4, #0]
2000199e:	40b4      	lsls	r4, r6
200019a0:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
200019a2:	5d29      	ldrb	r1, [r5, r4]
200019a4:	020c      	lsls	r4, r1, #8
200019a6:	4321      	orrs	r1, r4
200019a8:	040c      	lsls	r4, r1, #16
200019aa:	4321      	orrs	r1, r4
200019ac:	c002      	stmia	r0!, {r1}
200019ae:	423f      	tst	r7, r7
200019b0:	d01b      	beq.n	200019ea <RenderTilePersp3+0x126>
200019b2:	69dc      	ldr	r4, [r3, #28]
200019b4:	7824      	ldrb	r4, [r4, #0]
200019b6:	40b4      	lsls	r4, r6
200019b8:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
200019ba:	5d29      	ldrb	r1, [r5, r4]
200019bc:	020c      	lsls	r4, r1, #8
200019be:	4321      	orrs	r1, r4
200019c0:	69dc      	ldr	r4, [r3, #28]
200019c2:	7824      	ldrb	r4, [r4, #0]
200019c4:	40b4      	lsls	r4, r6
200019c6:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
200019c8:	5d2c      	ldrb	r4, [r5, r4]
200019ca:	0424      	lsls	r4, r4, #16
200019cc:	4321      	orrs	r1, r4
200019ce:	0224      	lsls	r4, r4, #8
200019d0:	4321      	orrs	r1, r4
200019d2:	69dc      	ldr	r4, [r3, #28]
200019d4:	7824      	ldrb	r4, [r4, #0]
200019d6:	40b4      	lsls	r4, r6
200019d8:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
200019da:	5d2a      	ldrb	r2, [r5, r4]
200019dc:	0214      	lsls	r4, r2, #8
200019de:	4322      	orrs	r2, r4
200019e0:	0414      	lsls	r4, r2, #16
200019e2:	4322      	orrs	r2, r4
200019e4:	c006      	stmia	r0!, {r1, r2}
200019e6:	3f01      	subs	r7, #1
200019e8:	d1e3      	bne.n	200019b2 <RenderTilePersp3+0xee>
200019ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

200019ec <RenderTilePersp_pSioBase>:
200019ec:	d0000000 	.word	0xd0000000

200019f0 <RenderTilePersp_Interp>:
200019f0:	d0000080 	.word	0xd0000080

200019f4 <RenderTilePersp_Ctrl>:
200019f4:	0004000c 	.word	0x0004000c

200019f8 <RenderTilePersp4>:
200019f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
200019fa:	9c06      	ldr	r4, [sp, #24]
200019fc:	4e44      	ldr	r6, [pc, #272]	; (20001b10 <RenderTilePersp_pSioBase>)
200019fe:	8965      	ldrh	r5, [r4, #10]
20001a00:	7ce1      	ldrb	r1, [r4, #19]
20001a02:	b249      	sxtb	r1, r1
20001a04:	0089      	lsls	r1, r1, #2
20001a06:	d107      	bne.n	20001a18 <RenderTilePersp4+0x20>
20001a08:	086d      	lsrs	r5, r5, #1
20001a0a:	1b52      	subs	r2, r2, r5
20001a0c:	4694      	mov	ip, r2
20001a0e:	2501      	movs	r5, #1
20001a10:	6675      	str	r5, [r6, #100]	; 0x64
20001a12:	032d      	lsls	r5, r5, #12
20001a14:	6635      	str	r5, [r6, #96]	; 0x60
20001a16:	e009      	b.n	20001a2c <RenderTilePersp4+0x34>
20001a18:	d502      	bpl.n	20001a20 <RenderTilePersp4+0x28>
20001a1a:	1aaa      	subs	r2, r5, r2
20001a1c:	3a01      	subs	r2, #1
20001a1e:	4249      	negs	r1, r1
20001a20:	1b57      	subs	r7, r2, r5
20001a22:	46bc      	mov	ip, r7
20001a24:	032d      	lsls	r5, r5, #12
20001a26:	6635      	str	r5, [r6, #96]	; 0x60
20001a28:	1852      	adds	r2, r2, r1
20001a2a:	6672      	str	r2, [r6, #100]	; 0x64
20001a2c:	085d      	lsrs	r5, r3, #1
20001a2e:	426d      	negs	r5, r5
20001a30:	46ae      	mov	lr, r5
20001a32:	089f      	lsrs	r7, r3, #2
20001a34:	4b37      	ldr	r3, [pc, #220]	; (20001b14 <RenderTilePersp_Interp>)
20001a36:	68e6      	ldr	r6, [r4, #12]
20001a38:	611e      	str	r6, [r3, #16]
20001a3a:	4e37      	ldr	r6, [pc, #220]	; (20001b18 <RenderTilePersp_Ctrl>)
20001a3c:	7ca1      	ldrb	r1, [r4, #18]
20001a3e:	9100      	str	r1, [sp, #0]
20001a40:	1876      	adds	r6, r6, r1
20001a42:	78a2      	ldrb	r2, [r4, #2]
20001a44:	1e55      	subs	r5, r2, #1
20001a46:	02ad      	lsls	r5, r5, #10
20001a48:	432e      	orrs	r6, r5
20001a4a:	62de      	str	r6, [r3, #44]	; 0x2c
20001a4c:	1ab6      	subs	r6, r6, r2
20001a4e:	0152      	lsls	r2, r2, #5
20001a50:	4316      	orrs	r6, r2
20001a52:	78e2      	ldrb	r2, [r4, #3]
20001a54:	0292      	lsls	r2, r2, #10
20001a56:	18b6      	adds	r6, r6, r2
20001a58:	631e      	str	r6, [r3, #48]	; 0x30
20001a5a:	6966      	ldr	r6, [r4, #20]
20001a5c:	651e      	str	r6, [r3, #80]	; 0x50
20001a5e:	4e2e      	ldr	r6, [pc, #184]	; (20001b18 <RenderTilePersp_Ctrl>)
20001a60:	1e4d      	subs	r5, r1, #1
20001a62:	02ad      	lsls	r5, r5, #10
20001a64:	432e      	orrs	r6, r5
20001a66:	66de      	str	r6, [r3, #108]	; 0x6c
20001a68:	1a76      	subs	r6, r6, r1
20001a6a:	014d      	lsls	r5, r1, #5
20001a6c:	432e      	orrs	r6, r5
20001a6e:	0289      	lsls	r1, r1, #10
20001a70:	1876      	adds	r6, r6, r1
20001a72:	671e      	str	r6, [r3, #112]	; 0x70
20001a74:	69a4      	ldr	r4, [r4, #24]
20001a76:	4926      	ldr	r1, [pc, #152]	; (20001b10 <RenderTilePersp_pSioBase>)
20001a78:	6f09      	ldr	r1, [r1, #112]	; 0x70
20001a7a:	6825      	ldr	r5, [r4, #0]
20001a7c:	434d      	muls	r5, r1
20001a7e:	12ad      	asrs	r5, r5, #10
20001a80:	609d      	str	r5, [r3, #8]
20001a82:	649d      	str	r5, [r3, #72]	; 0x48
20001a84:	10ad      	asrs	r5, r5, #2
20001a86:	68e6      	ldr	r6, [r4, #12]
20001a88:	434e      	muls	r6, r1
20001a8a:	12b6      	asrs	r6, r6, #10
20001a8c:	60de      	str	r6, [r3, #12]
20001a8e:	64de      	str	r6, [r3, #76]	; 0x4c
20001a90:	10b6      	asrs	r6, r6, #2
20001a92:	4672      	mov	r2, lr
20001a94:	4355      	muls	r5, r2
20001a96:	4372      	muls	r2, r6
20001a98:	468e      	mov	lr, r1
20001a9a:	6866      	ldr	r6, [r4, #4]
20001a9c:	4371      	muls	r1, r6
20001a9e:	1309      	asrs	r1, r1, #12
20001aa0:	4666      	mov	r6, ip
20001aa2:	4371      	muls	r1, r6
20001aa4:	186d      	adds	r5, r5, r1
20001aa6:	68a1      	ldr	r1, [r4, #8]
20001aa8:	186d      	adds	r5, r5, r1
20001aaa:	601d      	str	r5, [r3, #0]
20001aac:	641d      	str	r5, [r3, #64]	; 0x40
20001aae:	6921      	ldr	r1, [r4, #16]
20001ab0:	4675      	mov	r5, lr
20001ab2:	4369      	muls	r1, r5
20001ab4:	1309      	asrs	r1, r1, #12
20001ab6:	4371      	muls	r1, r6
20001ab8:	1852      	adds	r2, r2, r1
20001aba:	6961      	ldr	r1, [r4, #20]
20001abc:	1852      	adds	r2, r2, r1
20001abe:	605a      	str	r2, [r3, #4]
20001ac0:	645a      	str	r2, [r3, #68]	; 0x44
20001ac2:	9e00      	ldr	r6, [sp, #0]
20001ac4:	0076      	lsls	r6, r6, #1
20001ac6:	087f      	lsrs	r7, r7, #1
20001ac8:	d309      	bcc.n	20001ade <RenderTilePersp4+0xe6>
20001aca:	69dc      	ldr	r4, [r3, #28]
20001acc:	7824      	ldrb	r4, [r4, #0]
20001ace:	40b4      	lsls	r4, r6
20001ad0:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
20001ad2:	5d29      	ldrb	r1, [r5, r4]
20001ad4:	020c      	lsls	r4, r1, #8
20001ad6:	4321      	orrs	r1, r4
20001ad8:	040c      	lsls	r4, r1, #16
20001ada:	4321      	orrs	r1, r4
20001adc:	c002      	stmia	r0!, {r1}
20001ade:	423f      	tst	r7, r7
20001ae0:	d014      	beq.n	20001b0c <RenderTilePersp4+0x114>
20001ae2:	69dc      	ldr	r4, [r3, #28]
20001ae4:	7824      	ldrb	r4, [r4, #0]
20001ae6:	40b4      	lsls	r4, r6
20001ae8:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
20001aea:	5d29      	ldrb	r1, [r5, r4]
20001aec:	020c      	lsls	r4, r1, #8
20001aee:	4321      	orrs	r1, r4
20001af0:	040c      	lsls	r4, r1, #16
20001af2:	4321      	orrs	r1, r4
20001af4:	69dc      	ldr	r4, [r3, #28]
20001af6:	7824      	ldrb	r4, [r4, #0]
20001af8:	40b4      	lsls	r4, r6
20001afa:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
20001afc:	5d2a      	ldrb	r2, [r5, r4]
20001afe:	0214      	lsls	r4, r2, #8
20001b00:	4322      	orrs	r2, r4
20001b02:	0414      	lsls	r4, r2, #16
20001b04:	4322      	orrs	r2, r4
20001b06:	c006      	stmia	r0!, {r1, r2}
20001b08:	3f01      	subs	r7, #1
20001b0a:	d1ea      	bne.n	20001ae2 <RenderTilePersp4+0xea>
20001b0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
20001b0e:	46c0      	nop			; (mov r8, r8)

20001b10 <RenderTilePersp_pSioBase>:
20001b10:	d0000000 	.word	0xd0000000

20001b14 <RenderTilePersp_Interp>:
20001b14:	d0000080 	.word	0xd0000080

20001b18 <RenderTilePersp_Ctrl>:
20001b18:	0004000c 	.word	0x0004000c

20001b1c <Render>:
20001b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
20001b1e:	b085      	sub	sp, #20
20001b20:	9001      	str	r0, [sp, #4]
20001b22:	9102      	str	r1, [sp, #8]
20001b24:	9304      	str	r3, [sp, #16]
20001b26:	4c31      	ldr	r4, [pc, #196]	; (20001bec <Render_pScreenAddr>)
20001b28:	6824      	ldr	r4, [r4, #0]
20001b2a:	2c00      	cmp	r4, #0
20001b2c:	d055      	beq.n	20001bda <Render_Clear>
20001b2e:	8825      	ldrh	r5, [r4, #0]
20001b30:	422d      	tst	r5, r5
20001b32:	d052      	beq.n	20001bda <Render_Clear>
20001b34:	3404      	adds	r4, #4

20001b36 <Render_StripLoop>:
20001b36:	8823      	ldrh	r3, [r4, #0]
20001b38:	429a      	cmp	r2, r3
20001b3a:	d304      	bcc.n	20001b46 <Render_StripOK>
20001b3c:	1ad2      	subs	r2, r2, r3
20001b3e:	3420      	adds	r4, #32
20001b40:	3d01      	subs	r5, #1
20001b42:	d1f8      	bne.n	20001b36 <Render_StripLoop>
20001b44:	e049      	b.n	20001bda <Render_Clear>

20001b46 <Render_StripOK>:
20001b46:	9203      	str	r2, [sp, #12]
20001b48:	8865      	ldrh	r5, [r4, #2]
20001b4a:	422d      	tst	r5, r5
20001b4c:	d045      	beq.n	20001bda <Render_Clear>
20001b4e:	3404      	adds	r4, #4

20001b50 <Render_SegmLoop>:
20001b50:	9a04      	ldr	r2, [sp, #16]
20001b52:	4212      	tst	r2, r2
20001b54:	d041      	beq.n	20001bda <Render_Clear>
20001b56:	8823      	ldrh	r3, [r4, #0]
20001b58:	4293      	cmp	r3, r2
20001b5a:	d300      	bcc.n	20001b5e <Render_SegmLoop+0xe>
20001b5c:	4613      	mov	r3, r2
20001b5e:	421b      	tst	r3, r3
20001b60:	d038      	beq.n	20001bd4 <Render_SegmNext>
20001b62:	1ad2      	subs	r2, r2, r3
20001b64:	9204      	str	r2, [sp, #16]
20001b66:	88e2      	ldrh	r2, [r4, #6]
20001b68:	b212      	sxth	r2, r2
20001b6a:	9903      	ldr	r1, [sp, #12]
20001b6c:	440a      	add	r2, r1
20001b6e:	7c61      	ldrb	r1, [r4, #17]
20001b70:	4209      	tst	r1, r1
20001b72:	d000      	beq.n	20001b76 <Render_SegmLoop+0x26>
20001b74:	1052      	asrs	r2, r2, #1
20001b76:	8961      	ldrh	r1, [r4, #10]
20001b78:	1a52      	subs	r2, r2, r1
20001b7a:	d5fd      	bpl.n	20001b78 <Render_SegmLoop+0x28>
20001b7c:	1852      	adds	r2, r2, r1
20001b7e:	d4fd      	bmi.n	20001b7c <Render_SegmLoop+0x2c>
20001b80:	88a1      	ldrh	r1, [r4, #4]
20001b82:	b209      	sxth	r1, r1
20001b84:	8920      	ldrh	r0, [r4, #8]
20001b86:	1a09      	subs	r1, r1, r0
20001b88:	d5fd      	bpl.n	20001b86 <Render_SegmLoop+0x36>
20001b8a:	1809      	adds	r1, r1, r0
20001b8c:	d4fd      	bmi.n	20001b8a <Render_SegmLoop+0x3a>
20001b8e:	7c20      	ldrb	r0, [r4, #16]
20001b90:	4200      	tst	r0, r0
20001b92:	d10d      	bne.n	20001bb0 <Render_SegmLoop+0x60>
20001b94:	0852      	lsrs	r2, r2, #1
20001b96:	6961      	ldr	r1, [r4, #20]
20001b98:	d300      	bcc.n	20001b9c <Render_SegmLoop+0x4c>
20001b9a:	69a1      	ldr	r1, [r4, #24]
20001b9c:	089a      	lsrs	r2, r3, #2
20001b9e:	9e01      	ldr	r6, [sp, #4]
20001ba0:	c604      	stmia	r6!, {r2}
20001ba2:	9802      	ldr	r0, [sp, #8]
20001ba4:	c601      	stmia	r6!, {r0}
20001ba6:	9601      	str	r6, [sp, #4]
20001ba8:	f7fe fc8e 	bl	200004c8 <MemSet4>
20001bac:	9002      	str	r0, [sp, #8]
20001bae:	e011      	b.n	20001bd4 <Render_SegmNext>
20001bb0:	9400      	str	r4, [sp, #0]
20001bb2:	a710      	add	r7, pc, #64	; (adr r7, 20001bf4 <Render_FncAddr>)
20001bb4:	0086      	lsls	r6, r0, #2
20001bb6:	59bf      	ldr	r7, [r7, r6]
20001bb8:	2806      	cmp	r0, #6
20001bba:	d803      	bhi.n	20001bc4 <Render_SegmLoop+0x74>
20001bbc:	9801      	ldr	r0, [sp, #4]
20001bbe:	47b8      	blx	r7
20001bc0:	9001      	str	r0, [sp, #4]
20001bc2:	e007      	b.n	20001bd4 <Render_SegmNext>
20001bc4:	0898      	lsrs	r0, r3, #2
20001bc6:	9e01      	ldr	r6, [sp, #4]
20001bc8:	c601      	stmia	r6!, {r0}
20001bca:	9802      	ldr	r0, [sp, #8]
20001bcc:	c601      	stmia	r6!, {r0}
20001bce:	9601      	str	r6, [sp, #4]
20001bd0:	47b8      	blx	r7
20001bd2:	9002      	str	r0, [sp, #8]

20001bd4 <Render_SegmNext>:
20001bd4:	341c      	adds	r4, #28
20001bd6:	3d01      	subs	r5, #1
20001bd8:	d1ba      	bne.n	20001b50 <Render_SegmLoop>

20001bda <Render_Clear>:
20001bda:	9801      	ldr	r0, [sp, #4]
20001bdc:	9904      	ldr	r1, [sp, #16]
20001bde:	0889      	lsrs	r1, r1, #2
20001be0:	d001      	beq.n	20001be6 <Render_Clear+0xc>
20001be2:	4a03      	ldr	r2, [pc, #12]	; (20001bf0 <Render_LineBuf0Addr>)
20001be4:	c006      	stmia	r0!, {r1, r2}
20001be6:	b005      	add	sp, #20
20001be8:	bdf0      	pop	{r4, r5, r6, r7, pc}
20001bea:	46c0      	nop			; (mov r8, r8)

20001bec <Render_pScreenAddr>:
20001bec:	200021f0 	.word	0x200021f0

20001bf0 <Render_LineBuf0Addr>:
20001bf0:	20037100 	.word	0x20037100

20001bf4 <Render_FncAddr>:
20001bf4:	200004c9 	.word	0x200004c9
20001bf8:	20000a59 	.word	0x20000a59
20001bfc:	20001301 	.word	0x20001301
20001c00:	200013c9 	.word	0x200013c9
20001c04:	200012b5 	.word	0x200012b5
20001c08:	20000a53 	.word	0x20000a53
20001c0c:	20000a55 	.word	0x20000a55
20001c10:	200009cd 	.word	0x200009cd
20001c14:	20000969 	.word	0x20000969
20001c18:	200008ad 	.word	0x200008ad
20001c1c:	20000fad 	.word	0x20000fad
20001c20:	20000279 	.word	0x20000279
20001c24:	200007b9 	.word	0x200007b9
20001c28:	200004fd 	.word	0x200004fd
20001c2c:	20000c5d 	.word	0x20000c5d
20001c30:	20000609 	.word	0x20000609
20001c34:	20000d55 	.word	0x20000d55
20001c38:	20000ec5 	.word	0x20000ec5
20001c3c:	20001089 	.word	0x20001089
20001c40:	20001189 	.word	0x20001189
20001c44:	20001201 	.word	0x20001201
20001c48:	200003ad 	.word	0x200003ad
20001c4c:	20000a8d 	.word	0x20000a8d
20001c50:	20000b61 	.word	0x20000b61
20001c54:	20001485 	.word	0x20001485
20001c58:	20001609 	.word	0x20001609
20001c5c:	20001779 	.word	0x20001779
20001c60:	200018c5 	.word	0x200018c5
20001c64:	200019f9 	.word	0x200019f9

20001c68 <flash_init_boot2_copyout>:
    if (boot2_copyout_valid)
20001c68:	4808      	ldr	r0, [pc, #32]	; (20001c8c <flash_init_boot2_copyout+0x24>)
static void __no_inline_not_in_flash_func(flash_init_boot2_copyout)() {
20001c6a:	b510      	push	{r4, lr}
    if (boot2_copyout_valid)
20001c6c:	7803      	ldrb	r3, [r0, #0]
20001c6e:	2b00      	cmp	r3, #0
20001c70:	d10a      	bne.n	20001c88 <flash_init_boot2_copyout+0x20>
20001c72:	2380      	movs	r3, #128	; 0x80
20001c74:	4906      	ldr	r1, [pc, #24]	; (20001c90 <flash_init_boot2_copyout+0x28>)
    for (int i = 0; i < BOOT2_SIZE_WORDS; ++i)
20001c76:	4a07      	ldr	r2, [pc, #28]	; (20001c94 <flash_init_boot2_copyout+0x2c>)
20001c78:	055b      	lsls	r3, r3, #21
        boot2_copyout[i] = ((uint32_t *)XIP_BASE)[i];
20001c7a:	681c      	ldr	r4, [r3, #0]
20001c7c:	50cc      	str	r4, [r1, r3]
    for (int i = 0; i < BOOT2_SIZE_WORDS; ++i)
20001c7e:	3304      	adds	r3, #4
20001c80:	4293      	cmp	r3, r2
20001c82:	d1fa      	bne.n	20001c7a <flash_init_boot2_copyout+0x12>
    boot2_copyout_valid = true;
20001c84:	2301      	movs	r3, #1
20001c86:	7003      	strb	r3, [r0, #0]
}
20001c88:	bd10      	pop	{r4, pc}
20001c8a:	46c0      	nop			; (mov r8, r8)
20001c8c:	20039bba 	.word	0x20039bba
20001c90:	10039390 	.word	0x10039390
20001c94:	10000100 	.word	0x10000100

20001c98 <flash_enable_xip_via_boot2>:
static void __no_inline_not_in_flash_func(flash_enable_xip_via_boot2)() {
20001c98:	b510      	push	{r4, lr}
    ((void (*)(void))boot2_copyout+1)();
20001c9a:	4b02      	ldr	r3, [pc, #8]	; (20001ca4 <flash_enable_xip_via_boot2+0xc>)
20001c9c:	3301      	adds	r3, #1
20001c9e:	4798      	blx	r3
}
20001ca0:	bd10      	pop	{r4, pc}
20001ca2:	46c0      	nop			; (mov r8, r8)
20001ca4:	20039390 	.word	0x20039390

20001ca8 <flash_cs_force.constprop.0>:
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
20001ca8:	4b03      	ldr	r3, [pc, #12]	; (20001cb8 <flash_cs_force.constprop.0+0x10>)
20001caa:	681a      	ldr	r2, [r3, #0]
20001cac:	23c0      	movs	r3, #192	; 0xc0
20001cae:	009b      	lsls	r3, r3, #2
20001cb0:	4393      	bics	r3, r2
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
20001cb2:	4a02      	ldr	r2, [pc, #8]	; (20001cbc <flash_cs_force.constprop.0+0x14>)
20001cb4:	6013      	str	r3, [r2, #0]
}
20001cb6:	4770      	bx	lr
20001cb8:	4001800c 	.word	0x4001800c
20001cbc:	4001900c 	.word	0x4001900c

20001cc0 <flash_cs_force.constprop.1>:
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
20001cc0:	4b05      	ldr	r3, [pc, #20]	; (20001cd8 <flash_cs_force.constprop.1+0x18>)
20001cc2:	681a      	ldr	r2, [r3, #0]
20001cc4:	2380      	movs	r3, #128	; 0x80
20001cc6:	009b      	lsls	r3, r3, #2
20001cc8:	4053      	eors	r3, r2
20001cca:	22c0      	movs	r2, #192	; 0xc0
20001ccc:	0092      	lsls	r2, r2, #2
20001cce:	4013      	ands	r3, r2
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
20001cd0:	4a02      	ldr	r2, [pc, #8]	; (20001cdc <flash_cs_force.constprop.1+0x1c>)
20001cd2:	6013      	str	r3, [r2, #0]
20001cd4:	4770      	bx	lr
20001cd6:	46c0      	nop			; (mov r8, r8)
20001cd8:	4001800c 	.word	0x4001800c
20001cdc:	4001900c 	.word	0x4001900c

20001ce0 <flash_do_cmd.constprop.0>:
static void __no_inline_not_in_flash_func(flash_do_cmd)(const uint8_t *txbuf, uint8_t *rxbuf, size_t count) {
20001ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
20001ce2:	46ce      	mov	lr, r9
20001ce4:	4647      	mov	r7, r8
20001ce6:	4681      	mov	r9, r0
20001ce8:	b580      	push	{r7, lr}
    void (*connect_internal_flash)(void) = (void(*)(void))rom_func_lookup(rom_table_code('I', 'F'));
20001cea:	4823      	ldr	r0, [pc, #140]	; (20001d78 <flash_do_cmd.constprop.0+0x98>)
static void __no_inline_not_in_flash_func(flash_do_cmd)(const uint8_t *txbuf, uint8_t *rxbuf, size_t count) {
20001cec:	000e      	movs	r6, r1
    void (*connect_internal_flash)(void) = (void(*)(void))rom_func_lookup(rom_table_code('I', 'F'));
20001cee:	f000 fa03 	bl	200020f8 <__rom_func_lookup_veneer>
20001cf2:	0005      	movs	r5, r0
    void (*flash_exit_xip)(void) = (void(*)(void))rom_func_lookup(rom_table_code('E', 'X'));
20001cf4:	4821      	ldr	r0, [pc, #132]	; (20001d7c <flash_do_cmd.constprop.0+0x9c>)
20001cf6:	f000 f9ff 	bl	200020f8 <__rom_func_lookup_veneer>
20001cfa:	0004      	movs	r4, r0
    void (*flash_flush_cache)(void) = (void(*)(void))rom_func_lookup(rom_table_code('F', 'C'));
20001cfc:	4820      	ldr	r0, [pc, #128]	; (20001d80 <flash_do_cmd.constprop.0+0xa0>)
20001cfe:	f000 f9fb 	bl	200020f8 <__rom_func_lookup_veneer>
20001d02:	4680      	mov	r8, r0
    flash_init_boot2_copyout();
20001d04:	f7ff ffb0 	bl	20001c68 <flash_init_boot2_copyout>
    connect_internal_flash();
20001d08:	47a8      	blx	r5
    flash_exit_xip();
20001d0a:	47a0      	blx	r4
    flash_cs_force(0);
20001d0c:	f7ff ffd8 	bl	20001cc0 <flash_cs_force.constprop.1>
        uint32_t flags = ssi_hw->sr;
20001d10:	21c0      	movs	r1, #192	; 0xc0
    size_t rx_remaining = count;
20001d12:	240d      	movs	r4, #13
    size_t tx_remaining = count;
20001d14:	220d      	movs	r2, #13
        bool can_get = !!(flags & SSI_SR_RFNE_BITS);
20001d16:	2708      	movs	r7, #8
        bool can_put = !!(flags & SSI_SR_TFNF_BITS);
20001d18:	2002      	movs	r0, #2
        uint32_t flags = ssi_hw->sr;
20001d1a:	0549      	lsls	r1, r1, #21
        bool can_get = !!(flags & SSI_SR_RFNE_BITS);
20001d1c:	003d      	movs	r5, r7
        uint32_t flags = ssi_hw->sr;
20001d1e:	6a8b      	ldr	r3, [r1, #40]	; 0x28
        bool can_get = !!(flags & SSI_SR_RFNE_BITS);
20001d20:	401d      	ands	r5, r3
        if (can_put && tx_remaining && rx_remaining - tx_remaining < max_in_flight) {
20001d22:	4218      	tst	r0, r3
20001d24:	d00b      	beq.n	20001d3e <flash_do_cmd.constprop.0+0x5e>
20001d26:	2a00      	cmp	r2, #0
20001d28:	d009      	beq.n	20001d3e <flash_do_cmd.constprop.0+0x5e>
20001d2a:	1aa3      	subs	r3, r4, r2
20001d2c:	2b0d      	cmp	r3, #13
20001d2e:	d81e      	bhi.n	20001d6e <flash_do_cmd.constprop.0+0x8e>
            ssi_hw->dr0 = *txbuf++;
20001d30:	464b      	mov	r3, r9
20001d32:	781b      	ldrb	r3, [r3, #0]
            --tx_remaining;
20001d34:	3a01      	subs	r2, #1
            ssi_hw->dr0 = *txbuf++;
20001d36:	660b      	str	r3, [r1, #96]	; 0x60
20001d38:	2301      	movs	r3, #1
20001d3a:	469c      	mov	ip, r3
20001d3c:	44e1      	add	r9, ip
        if (can_get && rx_remaining) {
20001d3e:	0013      	movs	r3, r2
20001d40:	2d00      	cmp	r5, #0
20001d42:	d10b      	bne.n	20001d5c <flash_do_cmd.constprop.0+0x7c>
    while (tx_remaining || rx_remaining) {
20001d44:	4323      	orrs	r3, r4
20001d46:	2b00      	cmp	r3, #0
20001d48:	d1e8      	bne.n	20001d1c <flash_do_cmd.constprop.0+0x3c>
    flash_cs_force(1);
20001d4a:	f7ff ffad 	bl	20001ca8 <flash_cs_force.constprop.0>
    flash_flush_cache();
20001d4e:	47c0      	blx	r8
    flash_enable_xip_via_boot2();
20001d50:	f7ff ffa2 	bl	20001c98 <flash_enable_xip_via_boot2>
}
20001d54:	bcc0      	pop	{r6, r7}
20001d56:	46b9      	mov	r9, r7
20001d58:	46b0      	mov	r8, r6
20001d5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (can_get && rx_remaining) {
20001d5c:	2c00      	cmp	r4, #0
20001d5e:	d0f2      	beq.n	20001d46 <flash_do_cmd.constprop.0+0x66>
            *rxbuf++ = ssi_hw->dr0;
20001d60:	6e0b      	ldr	r3, [r1, #96]	; 0x60
            --rx_remaining;
20001d62:	3c01      	subs	r4, #1
            *rxbuf++ = ssi_hw->dr0;
20001d64:	7033      	strb	r3, [r6, #0]
    while (tx_remaining || rx_remaining) {
20001d66:	0023      	movs	r3, r4
            *rxbuf++ = ssi_hw->dr0;
20001d68:	3601      	adds	r6, #1
    while (tx_remaining || rx_remaining) {
20001d6a:	4313      	orrs	r3, r2
20001d6c:	e7eb      	b.n	20001d46 <flash_do_cmd.constprop.0+0x66>
        if (can_get && rx_remaining) {
20001d6e:	2d00      	cmp	r5, #0
20001d70:	d0d4      	beq.n	20001d1c <flash_do_cmd.constprop.0+0x3c>
20001d72:	2c00      	cmp	r4, #0
20001d74:	d0d2      	beq.n	20001d1c <flash_do_cmd.constprop.0+0x3c>
20001d76:	e7f3      	b.n	20001d60 <flash_do_cmd.constprop.0+0x80>
20001d78:	00004649 	.word	0x00004649
20001d7c:	00005845 	.word	0x00005845
20001d80:	00004346 	.word	0x00004346

20001d84 <mutex_enter_blocking>:

void __time_critical_func(mutex_enter_blocking)(mutex_t *mtx) {
20001d84:	b510      	push	{r4, lr}
    assert(mtx->core.spin_lock);
    bool block = true;
    do {
        uint32_t save = spin_lock_blocking(mtx->core.spin_lock);
20001d86:	6802      	ldr	r2, [r0, #0]
    *lock = 0;
20001d88:	2400      	movs	r4, #0
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
20001d8a:	f3ef 8110 	mrs	r1, PRIMASK
    __asm volatile ("cpsid i");
20001d8e:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
20001d90:	6813      	ldr	r3, [r2, #0]
20001d92:	2b00      	cmp	r3, #0
20001d94:	d0fc      	beq.n	20001d90 <mutex_enter_blocking+0xc>
    __asm volatile ("dmb");
20001d96:	f3bf 8f5f 	dmb	sy
        if (mtx->owner < 0) {
20001d9a:	7903      	ldrb	r3, [r0, #4]
20001d9c:	2b7f      	cmp	r3, #127	; 0x7f
20001d9e:	d80b      	bhi.n	20001db8 <mutex_enter_blocking+0x34>
            mtx->owner = get_core_num();
            block = false;
        }
        spin_unlock(mtx->core.spin_lock, save);
20001da0:	6803      	ldr	r3, [r0, #0]
20001da2:	f3bf 8f5f 	dmb	sy
    *lock = 0;
20001da6:	601c      	str	r4, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
20001da8:	f381 8810 	msr	PRIMASK, r1
    __asm volatile ("wfe");
20001dac:	bf20      	wfe
        uint32_t save = spin_lock_blocking(mtx->core.spin_lock);
20001dae:	6802      	ldr	r2, [r0, #0]
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
20001db0:	f3ef 8110 	mrs	r1, PRIMASK
    __asm volatile ("cpsid i");
20001db4:	b672      	cpsid	i
inline static void spin_lock_unsafe_blocking(spin_lock_t *lock) {
20001db6:	e7eb      	b.n	20001d90 <mutex_enter_blocking+0xc>
    return (*(uint32_t *) (SIO_BASE + SIO_CPUID_OFFSET));
20001db8:	23d0      	movs	r3, #208	; 0xd0
20001dba:	061b      	lsls	r3, r3, #24
            mtx->owner = get_core_num();
20001dbc:	681b      	ldr	r3, [r3, #0]
20001dbe:	7103      	strb	r3, [r0, #4]
        spin_unlock(mtx->core.spin_lock, save);
20001dc0:	6803      	ldr	r3, [r0, #0]
    __asm volatile ("dmb");
20001dc2:	f3bf 8f5f 	dmb	sy
    *lock = 0;
20001dc6:	2200      	movs	r2, #0
20001dc8:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
20001dca:	f381 8810 	msr	PRIMASK, r1
        if (block) {
            __wfe();
        }
    } while (block);
}
20001dce:	bd10      	pop	{r4, pc}

20001dd0 <mutex_try_enter>:

bool __time_critical_func(mutex_try_enter)(mutex_t *mtx, uint32_t *owner_out) {
20001dd0:	0003      	movs	r3, r0
    bool entered;
    uint32_t save = spin_lock_blocking(mtx->core.spin_lock);
20001dd2:	6800      	ldr	r0, [r0, #0]
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
20001dd4:	f3ef 8c10 	mrs	ip, PRIMASK
    __asm volatile ("cpsid i");
20001dd8:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
20001dda:	6802      	ldr	r2, [r0, #0]
20001ddc:	2a00      	cmp	r2, #0
20001dde:	d0fc      	beq.n	20001dda <mutex_try_enter+0xa>
    __asm volatile ("dmb");
20001de0:	f3bf 8f5f 	dmb	sy
    if (mtx->owner < 0) {
20001de4:	2204      	movs	r2, #4
20001de6:	569a      	ldrsb	r2, [r3, r2]
20001de8:	2a00      	cmp	r2, #0
20001dea:	db0b      	blt.n	20001e04 <mutex_try_enter+0x34>
        mtx->owner = get_core_num();
        entered = true;
    } else {
        if (owner_out) *owner_out = mtx->owner;
20001dec:	2900      	cmp	r1, #0
20001dee:	d00f      	beq.n	20001e10 <mutex_try_enter+0x40>
        entered = false;
20001df0:	2000      	movs	r0, #0
        if (owner_out) *owner_out = mtx->owner;
20001df2:	600a      	str	r2, [r1, #0]
    }
    spin_unlock(mtx->core.spin_lock, save);
20001df4:	681b      	ldr	r3, [r3, #0]
20001df6:	f3bf 8f5f 	dmb	sy
    *lock = 0;
20001dfa:	2200      	movs	r2, #0
20001dfc:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
20001dfe:	f38c 8810 	msr	PRIMASK, ip
    return entered;
}
20001e02:	4770      	bx	lr
    return (*(uint32_t *) (SIO_BASE + SIO_CPUID_OFFSET));
20001e04:	22d0      	movs	r2, #208	; 0xd0
20001e06:	0612      	lsls	r2, r2, #24
        mtx->owner = get_core_num();
20001e08:	6812      	ldr	r2, [r2, #0]
        entered = true;
20001e0a:	2001      	movs	r0, #1
        mtx->owner = get_core_num();
20001e0c:	711a      	strb	r2, [r3, #4]
        entered = true;
20001e0e:	e7f1      	b.n	20001df4 <mutex_try_enter+0x24>
        entered = false;
20001e10:	2000      	movs	r0, #0
20001e12:	e7ef      	b.n	20001df4 <mutex_try_enter+0x24>

20001e14 <mutex_enter_timeout_ms>:

bool __time_critical_func(mutex_enter_timeout_ms)(mutex_t *mtx, uint32_t timeout_ms) {
20001e14:	b5f0      	push	{r4, r5, r6, r7, lr}
20001e16:	46c6      	mov	lr, r8
20001e18:	b500      	push	{lr}
20001e1a:	000c      	movs	r4, r1
20001e1c:	4680      	mov	r8, r0
    update_us_since_boot(&t, time_us_64());
20001e1e:	f000 f94b 	bl	200020b8 <__time_us_64_veneer>
    uint64_t delayed = base + ms * 1000ull;
20001e22:	22fa      	movs	r2, #250	; 0xfa
    update_us_since_boot(&t, time_us_64());
20001e24:	0006      	movs	r6, r0
20001e26:	000f      	movs	r7, r1
    uint64_t delayed = base + ms * 1000ull;
20001e28:	0020      	movs	r0, r4
20001e2a:	2300      	movs	r3, #0
20001e2c:	2100      	movs	r1, #0
20001e2e:	0092      	lsls	r2, r2, #2
20001e30:	f000 f95a 	bl	200020e8 <____wrap___aeabi_lmul_veneer>
20001e34:	1980      	adds	r0, r0, r6
20001e36:	4179      	adcs	r1, r7
20001e38:	0004      	movs	r4, r0
20001e3a:	000d      	movs	r5, r1
    if (delayed < base) {
20001e3c:	428f      	cmp	r7, r1
20001e3e:	d830      	bhi.n	20001ea2 <mutex_enter_timeout_ms+0x8e>
20001e40:	d02d      	beq.n	20001e9e <mutex_enter_timeout_ms+0x8a>
    *lock = 0;
20001e42:	2600      	movs	r6, #0

bool __time_critical_func(mutex_enter_block_until)(mutex_t *mtx, absolute_time_t until) {
    assert(mtx->core.spin_lock);
    bool block = true;
    do {
        uint32_t save = spin_lock_blocking(mtx->core.spin_lock);
20001e44:	4643      	mov	r3, r8
20001e46:	681a      	ldr	r2, [r3, #0]
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
20001e48:	f3ef 8110 	mrs	r1, PRIMASK
    __asm volatile ("cpsid i");
20001e4c:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
20001e4e:	6813      	ldr	r3, [r2, #0]
20001e50:	2b00      	cmp	r3, #0
20001e52:	d0fc      	beq.n	20001e4e <mutex_enter_timeout_ms+0x3a>
    __asm volatile ("dmb");
20001e54:	f3bf 8f5f 	dmb	sy
        if (mtx->owner < 0) {
20001e58:	4643      	mov	r3, r8
20001e5a:	791b      	ldrb	r3, [r3, #4]
20001e5c:	2b7f      	cmp	r3, #127	; 0x7f
20001e5e:	d80e      	bhi.n	20001e7e <mutex_enter_timeout_ms+0x6a>
            mtx->owner = get_core_num();
            block = false;
        }
        spin_unlock(mtx->core.spin_lock, save);
20001e60:	4643      	mov	r3, r8
20001e62:	681b      	ldr	r3, [r3, #0]
20001e64:	f3bf 8f5f 	dmb	sy
    *lock = 0;
20001e68:	601e      	str	r6, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
20001e6a:	f381 8810 	msr	PRIMASK, r1
        if (block) {
            if (best_effort_wfe_or_timeout(until)) {
20001e6e:	0020      	movs	r0, r4
20001e70:	0029      	movs	r1, r5
20001e72:	f000 f929 	bl	200020c8 <__best_effort_wfe_or_timeout_veneer>
20001e76:	2800      	cmp	r0, #0
20001e78:	d0e4      	beq.n	20001e44 <mutex_enter_timeout_ms+0x30>
                return false;
20001e7a:	2000      	movs	r0, #0
20001e7c:	e00c      	b.n	20001e98 <mutex_enter_timeout_ms+0x84>
    return (*(uint32_t *) (SIO_BASE + SIO_CPUID_OFFSET));
20001e7e:	23d0      	movs	r3, #208	; 0xd0
            mtx->owner = get_core_num();
20001e80:	4642      	mov	r2, r8
20001e82:	061b      	lsls	r3, r3, #24
20001e84:	681b      	ldr	r3, [r3, #0]
20001e86:	7113      	strb	r3, [r2, #4]
        spin_unlock(mtx->core.spin_lock, save);
20001e88:	6813      	ldr	r3, [r2, #0]
    __asm volatile ("dmb");
20001e8a:	f3bf 8f5f 	dmb	sy
    *lock = 0;
20001e8e:	2200      	movs	r2, #0
20001e90:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
20001e92:	f381 8810 	msr	PRIMASK, r1
            }
        }
    } while (block);
    return true;
20001e96:	2001      	movs	r0, #1
}
20001e98:	bc80      	pop	{r7}
20001e9a:	46b8      	mov	r8, r7
20001e9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
20001e9e:	4286      	cmp	r6, r0
20001ea0:	d9cf      	bls.n	20001e42 <mutex_enter_timeout_ms+0x2e>
        delayed = (uint64_t)-1;
20001ea2:	2401      	movs	r4, #1
20001ea4:	4264      	negs	r4, r4
20001ea6:	17e5      	asrs	r5, r4, #31
20001ea8:	e7cb      	b.n	20001e42 <mutex_enter_timeout_ms+0x2e>
20001eaa:	46c0      	nop			; (mov r8, r8)

20001eac <mutex_exit>:
}

void __time_critical_func(mutex_exit)(mutex_t *mtx) {
    uint32_t save = spin_lock_blocking(mtx->core.spin_lock);
20001eac:	6802      	ldr	r2, [r0, #0]
    __asm volatile ("mrs %0, PRIMASK" : "=r" (status)::);
20001eae:	f3ef 8110 	mrs	r1, PRIMASK
    __asm volatile ("cpsid i");
20001eb2:	b672      	cpsid	i
    while (__builtin_expect(!*lock, 0));
20001eb4:	6813      	ldr	r3, [r2, #0]
20001eb6:	2b00      	cmp	r3, #0
20001eb8:	d0fc      	beq.n	20001eb4 <mutex_exit+0x8>
    __asm volatile ("dmb");
20001eba:	f3bf 8f5f 	dmb	sy
    assert(mtx->owner >= 0);
    mtx->owner = -1;
20001ebe:	23ff      	movs	r3, #255	; 0xff
20001ec0:	7103      	strb	r3, [r0, #4]
    __asm volatile ("sev");
20001ec2:	bf40      	sev
    __sev();
    spin_unlock(mtx->core.spin_lock, save);
20001ec4:	6803      	ldr	r3, [r0, #0]
    __asm volatile ("dmb");
20001ec6:	f3bf 8f5f 	dmb	sy
    *lock = 0;
20001eca:	2200      	movs	r2, #0
20001ecc:	601a      	str	r2, [r3, #0]
    __asm volatile ("msr PRIMASK,%0"::"r" (status) : );
20001ece:	f381 8810 	msr	PRIMASK, r1
}
20001ed2:	4770      	bx	lr

20001ed4 <_Z13VgaBufProcessv>:
	dma_hw->ints0 = (1u << VGA_DMA_PIO0);
20001ed4:	22a0      	movs	r2, #160	; 0xa0
20001ed6:	2102      	movs	r1, #2
20001ed8:	4b17      	ldr	r3, [pc, #92]	; (20001f38 <_Z13VgaBufProcessv+0x64>)
20001eda:	05d2      	lsls	r2, r2, #23
{
20001edc:	b510      	push	{r4, lr}
	dma_hw->ints0 = (1u << VGA_DMA_PIO0);
20001ede:	50d1      	str	r1, [r2, r3]
	BufInx = bufinx ^ 1;
20001ee0:	2301      	movs	r3, #1
	int bufinx = BufInx;
20001ee2:	4916      	ldr	r1, [pc, #88]	; (20001f3c <_Z13VgaBufProcessv+0x68>)
	hw_divider_save_state(&DividerState);
20001ee4:	4816      	ldr	r0, [pc, #88]	; (20001f40 <_Z13VgaBufProcessv+0x6c>)
	int bufinx = BufInx;
20001ee6:	680c      	ldr	r4, [r1, #0]
	BufInx = bufinx ^ 1;
20001ee8:	4063      	eors	r3, r4
20001eea:	600b      	str	r3, [r1, #0]
	dma_channel_set_read_addr(VGA_DMA_CB0, CtrlBufNext[0], true);
20001eec:	4b15      	ldr	r3, [pc, #84]	; (20001f44 <_Z13VgaBufProcessv+0x70>)
        dma_channel_hw_addr(channel)->al3_read_addr_trig = (uintptr_t) read_addr;
20001eee:	681b      	ldr	r3, [r3, #0]
20001ef0:	63d3      	str	r3, [r2, #60]	; 0x3c
	hw_divider_save_state(&DividerState);
20001ef2:	f000 f8f1 	bl	200020d8 <__hw_divider_save_state_veneer>
	int line = ScanLine;	// current scanline
20001ef6:	4a14      	ldr	r2, [pc, #80]	; (20001f48 <_Z13VgaBufProcessv+0x74>)
	if (line > CurVmode.vtot) // last scanline?
20001ef8:	4914      	ldr	r1, [pc, #80]	; (20001f4c <_Z13VgaBufProcessv+0x78>)
	int line = ScanLine;	// current scanline
20001efa:	6813      	ldr	r3, [r2, #0]
	if (line > CurVmode.vtot) // last scanline?
20001efc:	8d89      	ldrh	r1, [r1, #44]	; 0x2c
	line++; 		// new current scanline
20001efe:	3301      	adds	r3, #1
	if (line > CurVmode.vtot) // last scanline?
20001f00:	4299      	cmp	r1, r3
20001f02:	da04      	bge.n	20001f0e <_Z13VgaBufProcessv+0x3a>
		Frame++;	// increment frame counter
20001f04:	4912      	ldr	r1, [pc, #72]	; (20001f50 <_Z13VgaBufProcessv+0x7c>)
20001f06:	680b      	ldr	r3, [r1, #0]
20001f08:	3301      	adds	r3, #1
20001f0a:	600b      	str	r3, [r1, #0]
		line = 1; 	// restart scanline
20001f0c:	2301      	movs	r3, #1
	ScanLine = line;	// store new scanline
20001f0e:	6013      	str	r3, [r2, #0]
	u8 linetype = ScanlineType[line];
20001f10:	4a10      	ldr	r2, [pc, #64]	; (20001f54 <_Z13VgaBufProcessv+0x80>)
	switch (linetype)
20001f12:	5cd3      	ldrb	r3, [r2, r3]
20001f14:	3b06      	subs	r3, #6
20001f16:	b2db      	uxtb	r3, r3
20001f18:	2b04      	cmp	r3, #4
20001f1a:	d808      	bhi.n	20001f2e <_Z13VgaBufProcessv+0x5a>
20001f1c:	4a0e      	ldr	r2, [pc, #56]	; (20001f58 <_Z13VgaBufProcessv+0x84>)
20001f1e:	009b      	lsls	r3, r3, #2
20001f20:	58d3      	ldr	r3, [r2, r3]
20001f22:	469f      	mov	pc, r3
		VSync = False;	// not vsync
20001f24:	2200      	movs	r2, #0
20001f26:	4b0d      	ldr	r3, [pc, #52]	; (20001f5c <_Z13VgaBufProcessv+0x88>)
20001f28:	701a      	strb	r2, [r3, #0]
}
20001f2a:	0020      	movs	r0, r4
20001f2c:	bd10      	pop	{r4, pc}
		VSync = True;	// vsync
20001f2e:	2201      	movs	r2, #1
20001f30:	4b0a      	ldr	r3, [pc, #40]	; (20001f5c <_Z13VgaBufProcessv+0x88>)
20001f32:	701a      	strb	r2, [r3, #0]
	return bufinx;
20001f34:	e7f9      	b.n	20001f2a <_Z13VgaBufProcessv+0x56>
20001f36:	46c0      	nop			; (mov r8, r8)
20001f38:	0000040c 	.word	0x0000040c
20001f3c:	200365c0 	.word	0x200365c0
20001f40:	200370b8 	.word	0x200370b8
20001f44:	20037018 	.word	0x20037018
20001f48:	200389f4 	.word	0x200389f4
20001f4c:	2003705c 	.word	0x2003705c
20001f50:	200370d0 	.word	0x200370d0
20001f54:	200389f8 	.word	0x200389f8
20001f58:	1000a040 	.word	0x1000a040
20001f5c:	20039bb6 	.word	0x20039bb6

20001f60 <VgaLine>:
{
20001f60:	b570      	push	{r4, r5, r6, lr}
	int bufinx = VgaBufProcess();
20001f62:	f7ff ffb7 	bl	20001ed4 <_Z13VgaBufProcessv>
	if (bufinx == 0)
20001f66:	2800      	cmp	r0, #0
20001f68:	d014      	beq.n	20001f94 <VgaLine+0x34>
		cbuf = CtrlBuf2;
20001f6a:	4c43      	ldr	r4, [pc, #268]	; (20002078 <VgaLine+0x118>)
		dbuf = LineBuf2;
20001f6c:	4943      	ldr	r1, [pc, #268]	; (2000207c <VgaLine+0x11c>)
	CtrlBufNext[0] = cbuf;
20001f6e:	4b44      	ldr	r3, [pc, #272]	; (20002080 <VgaLine+0x120>)
	if (line > CurVmode.vtot) line = 1;
20001f70:	4d44      	ldr	r5, [pc, #272]	; (20002084 <VgaLine+0x124>)
	CtrlBufNext[0] = cbuf;
20001f72:	601c      	str	r4, [r3, #0]
	int line = ScanLine;	// current scanline
20001f74:	4b44      	ldr	r3, [pc, #272]	; (20002088 <VgaLine+0x128>)
20001f76:	681a      	ldr	r2, [r3, #0]
	if (line > CurVmode.vtot) line = 1;
20001f78:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
	line++; // next line to render
20001f7a:	3201      	adds	r2, #1
	if (line > CurVmode.vtot) line = 1;
20001f7c:	4293      	cmp	r3, r2
20001f7e:	da00      	bge.n	20001f82 <VgaLine+0x22>
20001f80:	2201      	movs	r2, #1
	u8 linetype = ScanlineType[line];
20001f82:	4b42      	ldr	r3, [pc, #264]	; (2000208c <VgaLine+0x12c>)
	switch (linetype)
20001f84:	5c9b      	ldrb	r3, [r3, r2]
20001f86:	2b0a      	cmp	r3, #10
20001f88:	d900      	bls.n	20001f8c <VgaLine+0x2c>
20001f8a:	e073      	b.n	20002074 <VgaLine+0x114>
20001f8c:	4840      	ldr	r0, [pc, #256]	; (20002090 <VgaLine+0x130>)
20001f8e:	009b      	lsls	r3, r3, #2
20001f90:	58c3      	ldr	r3, [r0, r3]
20001f92:	469f      	mov	pc, r3
		cbuf = CtrlBuf1;
20001f94:	4c3f      	ldr	r4, [pc, #252]	; (20002094 <VgaLine+0x134>)
		dbuf = LineBuf1;
20001f96:	4940      	ldr	r1, [pc, #256]	; (20002098 <VgaLine+0x138>)
20001f98:	e7e9      	b.n	20001f6e <VgaLine+0xe>
		y0 = line - CurVmode.vfirst1;
20001f9a:	2340      	movs	r3, #64	; 0x40
		y0 = line - CurVmode.vfirst2;
20001f9c:	5aeb      	ldrh	r3, [r5, r3]
20001f9e:	1ad2      	subs	r2, r2, r3
		if (CurVmode.dbly) y0 >>= 1;
20001fa0:	2355      	movs	r3, #85	; 0x55
20001fa2:	5ceb      	ldrb	r3, [r5, r3]
20001fa4:	2b00      	cmp	r3, #0
20001fa6:	d000      	beq.n	20001faa <VgaLine+0x4a>
20001fa8:	1052      	asrs	r2, r2, #1
	*cbuf++ = 4; // send 4x u32
20001faa:	2304      	movs	r3, #4
	*cbuf++ = (u32)LineBufHsBp; // HSYNC + back porch
20001fac:	0020      	movs	r0, r4
	*cbuf++ = 4; // send 4x u32
20001fae:	6023      	str	r3, [r4, #0]
	*cbuf++ = (u32)LineBufHsBp; // HSYNC + back porch
20001fb0:	4b3a      	ldr	r3, [pc, #232]	; (2000209c <VgaLine+0x13c>)
		y0 = (y0 << 1) + 1;
20001fb2:	0052      	lsls	r2, r2, #1
	*cbuf++ = (u32)LineBufHsBp; // HSYNC + back porch
20001fb4:	6063      	str	r3, [r4, #4]
	cbuf = Render(cbuf, dbuf, y0, CurVmode.width);
20001fb6:	882b      	ldrh	r3, [r5, #0]
	*cbuf++ = (u32)LineBufHsBp; // HSYNC + back porch
20001fb8:	3008      	adds	r0, #8
		y0 = (y0 << 1) + 1;
20001fba:	3201      	adds	r2, #1
	cbuf = Render(cbuf, dbuf, y0, CurVmode.width);
20001fbc:	f7ff fdae 	bl	20001b1c <Render>
	*cbuf++ = 1; // send 1x u32
20001fc0:	2301      	movs	r3, #1
	*cbuf++ = (u32)&LineBufFp; // front porch
20001fc2:	0002      	movs	r2, r0
	*cbuf++ = 1; // send 1x u32
20001fc4:	6003      	str	r3, [r0, #0]
	*cbuf++ = (u32)&LineBufFp; // front porch
20001fc6:	4b36      	ldr	r3, [pc, #216]	; (200020a0 <VgaLine+0x140>)
20001fc8:	3208      	adds	r2, #8
20001fca:	6043      	str	r3, [r0, #4]
	*cbuf++ = 0; // end mark
20001fcc:	2300      	movs	r3, #0
	hw_divider_restore_state(&DividerState);
20001fce:	4835      	ldr	r0, [pc, #212]	; (200020a4 <VgaLine+0x144>)
	*cbuf++ = 0; // end mark
20001fd0:	6013      	str	r3, [r2, #0]
	*cbuf++ = 0; // end mark
20001fd2:	6053      	str	r3, [r2, #4]
	hw_divider_restore_state(&DividerState);
20001fd4:	f000 f898 	bl	20002108 <__hw_divider_restore_state_veneer>
}
20001fd8:	bd70      	pop	{r4, r5, r6, pc}
		y0 = line - CurVmode.vfirst2;
20001fda:	234e      	movs	r3, #78	; 0x4e
20001fdc:	e7de      	b.n	20001f9c <VgaLine+0x3c>
		*cbuf++ = 2; // send 2x u32
20001fde:	2302      	movs	r3, #2
		*cbuf++ = (u32)&LineBufSync[0]; // half + half
20001fe0:	0022      	movs	r2, r4
		*cbuf++ = 4;	// send 4x u32
20001fe2:	6023      	str	r3, [r4, #0]
		*cbuf++ = (u32)&LineBufSync[0]; // half + half
20001fe4:	4b30      	ldr	r3, [pc, #192]	; (200020a8 <VgaLine+0x148>)
20001fe6:	3208      	adds	r2, #8
20001fe8:	6063      	str	r3, [r4, #4]
		break;
20001fea:	e7ef      	b.n	20001fcc <VgaLine+0x6c>
		*cbuf++ = 4;	// send 4x u32
20001fec:	2304      	movs	r3, #4
		*cbuf++ = (u32)&LineBufSync[4]; // VSYNC
20001fee:	0022      	movs	r2, r4
		*cbuf++ = 4;	// send 4x u32
20001ff0:	6023      	str	r3, [r4, #0]
		*cbuf++ = (u32)&LineBufSync[4]; // VSYNC
20001ff2:	4b2d      	ldr	r3, [pc, #180]	; (200020a8 <VgaLine+0x148>)
20001ff4:	3208      	adds	r2, #8
20001ff6:	3310      	adds	r3, #16
20001ff8:	6063      	str	r3, [r4, #4]
		break;
20001ffa:	e7e7      	b.n	20001fcc <VgaLine+0x6c>
		*cbuf++ = 4;	// send 4x u32
20001ffc:	2304      	movs	r3, #4
		*cbuf++ = (u32)&LineBufSync[6]; // VSYNC + half
20001ffe:	0022      	movs	r2, r4
		*cbuf++ = 4;	// send 4x u32
20002000:	6023      	str	r3, [r4, #0]
		*cbuf++ = (u32)&LineBufSync[6]; // VSYNC + half
20002002:	4b29      	ldr	r3, [pc, #164]	; (200020a8 <VgaLine+0x148>)
20002004:	3208      	adds	r2, #8
20002006:	3318      	adds	r3, #24
20002008:	6063      	str	r3, [r4, #4]
		break;
2000200a:	e7df      	b.n	20001fcc <VgaLine+0x6c>
		*cbuf++ = 4;	// send 4x u32
2000200c:	2304      	movs	r3, #4
2000200e:	e7e7      	b.n	20001fe0 <VgaLine+0x80>
		*cbuf++ = 4;	// send 4x u32
20002010:	2304      	movs	r3, #4
		*cbuf++ = (u32)&LineBufSync[2]; // half + VSYNC
20002012:	0022      	movs	r2, r4
		*cbuf++ = 4;	// send 4x u32
20002014:	6023      	str	r3, [r4, #0]
		*cbuf++ = (u32)&LineBufSync[2]; // half + VSYNC
20002016:	4b24      	ldr	r3, [pc, #144]	; (200020a8 <VgaLine+0x148>)
20002018:	3208      	adds	r2, #8
2000201a:	3308      	adds	r3, #8
2000201c:	6063      	str	r3, [r4, #4]
		break;
2000201e:	e7d5      	b.n	20001fcc <VgaLine+0x6c>
		*cbuf++ = 2; // send 2x u32
20002020:	2302      	movs	r3, #2
		*cbuf++ = (u32)LineBufDark; // dark
20002022:	0022      	movs	r2, r4
		*cbuf++ = 2; // send 2x u32
20002024:	6023      	str	r3, [r4, #0]
		*cbuf++ = (u32)LineBufDark; // dark
20002026:	4b21      	ldr	r3, [pc, #132]	; (200020ac <VgaLine+0x14c>)
20002028:	3208      	adds	r2, #8
2000202a:	6063      	str	r3, [r4, #4]
		break;
2000202c:	e7ce      	b.n	20001fcc <VgaLine+0x6c>
		y0 = line - CurVmode.vfirst1;
2000202e:	2340      	movs	r3, #64	; 0x40
20002030:	5aeb      	ldrh	r3, [r5, r3]
20002032:	1ad2      	subs	r2, r2, r3
		if (CurVmode.dbly) y0 >>= 1;
20002034:	2355      	movs	r3, #85	; 0x55
20002036:	5ceb      	ldrb	r3, [r5, r3]
20002038:	2b00      	cmp	r3, #0
2000203a:	d000      	beq.n	2000203e <VgaLine+0xde>
2000203c:	1052      	asrs	r2, r2, #1
	*cbuf++ = 4; // send 4x u32
2000203e:	2304      	movs	r3, #4
	*cbuf++ = (u32)LineBufHsBp; // HSYNC + back porch
20002040:	0020      	movs	r0, r4
	*cbuf++ = 4; // send 4x u32
20002042:	6023      	str	r3, [r4, #0]
	*cbuf++ = (u32)LineBufHsBp; // HSYNC + back porch
20002044:	4b15      	ldr	r3, [pc, #84]	; (2000209c <VgaLine+0x13c>)
20002046:	3008      	adds	r0, #8
20002048:	6063      	str	r3, [r4, #4]
	cbuf = Render(cbuf, dbuf, y0, CurVmode.width);
2000204a:	882b      	ldrh	r3, [r5, #0]
2000204c:	e7b6      	b.n	20001fbc <VgaLine+0x5c>
		y0 = line - CurVmode.vfirst1;
2000204e:	2340      	movs	r3, #64	; 0x40
		y0 = line - CurVmode.vfirst2;
20002050:	5aeb      	ldrh	r3, [r5, r3]
20002052:	1ad2      	subs	r2, r2, r3
		if (CurVmode.dbly) y0 >>= 1;
20002054:	2355      	movs	r3, #85	; 0x55
20002056:	5ceb      	ldrb	r3, [r5, r3]
20002058:	2b00      	cmp	r3, #0
2000205a:	d000      	beq.n	2000205e <VgaLine+0xfe>
2000205c:	1052      	asrs	r2, r2, #1
	*cbuf++ = 4; // send 4x u32
2000205e:	2304      	movs	r3, #4
	*cbuf++ = (u32)LineBufHsBp; // HSYNC + back porch
20002060:	0020      	movs	r0, r4
	*cbuf++ = 4; // send 4x u32
20002062:	6023      	str	r3, [r4, #0]
	*cbuf++ = (u32)LineBufHsBp; // HSYNC + back porch
20002064:	4b0d      	ldr	r3, [pc, #52]	; (2000209c <VgaLine+0x13c>)
20002066:	3008      	adds	r0, #8
20002068:	6063      	str	r3, [r4, #4]
		y0 <<= 1;
2000206a:	0052      	lsls	r2, r2, #1
	cbuf = Render(cbuf, dbuf, y0, CurVmode.width);
2000206c:	882b      	ldrh	r3, [r5, #0]
2000206e:	e7a5      	b.n	20001fbc <VgaLine+0x5c>
		y0 = line - CurVmode.vfirst2;
20002070:	234e      	movs	r3, #78	; 0x4e
20002072:	e7ed      	b.n	20002050 <VgaLine+0xf0>
	switch (linetype)
20002074:	0022      	movs	r2, r4
20002076:	e7a9      	b.n	20001fcc <VgaLine+0x6c>
20002078:	20036b00 	.word	0x20036b00
2000207c:	20037b08 	.word	0x20037b08
20002080:	20037018 	.word	0x20037018
20002084:	2003705c 	.word	0x2003705c
20002088:	200389f4 	.word	0x200389f4
2000208c:	200389f8 	.word	0x200389f8
20002090:	1000a054 	.word	0x1000a054
20002094:	200365e8 	.word	0x200365e8
20002098:	20037600 	.word	0x20037600
2000209c:	2003801c 	.word	0x2003801c
200020a0:	20038018 	.word	0x20038018
200020a4:	200370b8 	.word	0x200370b8
200020a8:	2003802c 	.word	0x2003802c
200020ac:	20038010 	.word	0x20038010

200020b0 <__aeabi_idiv0>:
200020b0:	4770      	bx	lr
200020b2:	46c0      	nop			; (mov r8, r8)
200020b4:	0000      	movs	r0, r0
	...

200020b8 <__time_us_64_veneer>:
200020b8:	b401      	push	{r0}
200020ba:	4802      	ldr	r0, [pc, #8]	; (200020c4 <__time_us_64_veneer+0xc>)
200020bc:	4684      	mov	ip, r0
200020be:	bc01      	pop	{r0}
200020c0:	4760      	bx	ip
200020c2:	bf00      	nop
200020c4:	10004c61 	.word	0x10004c61

200020c8 <__best_effort_wfe_or_timeout_veneer>:
200020c8:	b401      	push	{r0}
200020ca:	4802      	ldr	r0, [pc, #8]	; (200020d4 <__best_effort_wfe_or_timeout_veneer+0xc>)
200020cc:	4684      	mov	ip, r0
200020ce:	bc01      	pop	{r0}
200020d0:	4760      	bx	ip
200020d2:	bf00      	nop
200020d4:	10004b4d 	.word	0x10004b4d

200020d8 <__hw_divider_save_state_veneer>:
200020d8:	b401      	push	{r0}
200020da:	4802      	ldr	r0, [pc, #8]	; (200020e4 <__hw_divider_save_state_veneer+0xc>)
200020dc:	4684      	mov	ip, r0
200020de:	bc01      	pop	{r0}
200020e0:	4760      	bx	ip
200020e2:	bf00      	nop
200020e4:	100007f9 	.word	0x100007f9

200020e8 <____wrap___aeabi_lmul_veneer>:
200020e8:	b401      	push	{r0}
200020ea:	4802      	ldr	r0, [pc, #8]	; (200020f4 <____wrap___aeabi_lmul_veneer+0xc>)
200020ec:	4684      	mov	ip, r0
200020ee:	bc01      	pop	{r0}
200020f0:	4760      	bx	ip
200020f2:	bf00      	nop
200020f4:	100012b5 	.word	0x100012b5

200020f8 <__rom_func_lookup_veneer>:
200020f8:	b401      	push	{r0}
200020fa:	4802      	ldr	r0, [pc, #8]	; (20002104 <__rom_func_lookup_veneer+0xc>)
200020fc:	4684      	mov	ip, r0
200020fe:	bc01      	pop	{r0}
20002100:	4760      	bx	ip
20002102:	bf00      	nop
20002104:	100012e9 	.word	0x100012e9

20002108 <__hw_divider_restore_state_veneer>:
20002108:	b401      	push	{r0}
2000210a:	4802      	ldr	r0, [pc, #8]	; (20002114 <__hw_divider_restore_state_veneer+0xc>)
2000210c:	4684      	mov	ip, r0
2000210e:	bc01      	pop	{r0}
20002110:	4760      	bx	ip
20002112:	bf00      	nop
20002114:	10000815 	.word	0x10000815
	...

20002120 <aeabi_bits_funcs>:
20002120:	00003350 	.word	0x00003350
20002124:	0000334c 	.word	0x0000334c
20002128:	00003354 	.word	0x00003354
2000212c:	00003352 	.word	0x00003352

20002130 <aeabi_bits_funcs_end>:
20002130:	00000000 	.word	0x00000000
20002134:	00010000 	.word	0x00010000
	...
20002140:	00020000 	.word	0x00020000
	...
2000214c:	00030000 	.word	0x00030000
	...
20002158:	00ff0000 	.word	0x00ff0000
2000215c:	00000000 	.word	0x00000000

20002160 <irq_handler_chain_first_slot>:
20002160:	b500      	push	{lr}
20002162:	6848      	ldr	r0, [r1, #4]
20002164:	3101      	adds	r1, #1
20002166:	468e      	mov	lr, r1
20002168:	4700      	bx	r0

2000216a <irq_handler_chain_remove_tail>:
2000216a:	4670      	mov	r0, lr
2000216c:	3809      	subs	r0, #9
2000216e:	4901      	ldr	r1, [pc, #4]	; (20002174 <irq_handler_chain_remove_tail+0xa>)
20002170:	4788      	blx	r1
20002172:	bd00      	pop	{pc}
20002174:	10001cc5 	.word	0x10001cc5

20002178 <aeabi_mem_funcs>:
20002178:	0000534d 	.word	0x0000534d
2000217c:	0000434d 	.word	0x0000434d
20002180:	00003453 	.word	0x00003453
20002184:	00003443 	.word	0x00003443

20002188 <stdio_usb>:
20002188:	100040cd 00000000 10004065 00000000     .@......e@......
20002198:	00000100                                ....

2000219c <striped_spin_lock_num>:
2000219c:	00000010                                ....

200021a0 <_usbd_qdef>:
200021a0:	200392b8 000c0010 00000000 00000000     ... ............
	...

200021c0 <ep_dir_string>:
200021c0:	10009cc8 10009ccc                       ........

200021c8 <CurY>:
200021c8:	00000190                                ....

200021cc <Height>:
200021cc:	000000c8                                ....

200021d0 <HighRes>:
200021d0:	00000001                                ....

200021d4 <IncY>:
200021d4:	00000001                                ....

200021d8 <Size>:
200021d8:	00000000 3ff00000                       .......?

200021e0 <Steps>:
200021e0:	00000040                                @...

200021e4 <SysClk>:
200021e4:	0001d4c0                                ....

200021e8 <Width>:
200021e8:	00000108                                ....

200021ec <LayerNumPin>:
200021ec:	08080808                                ....

200021f0 <pScreen>:
200021f0:	20038e78                                x.. 

200021f4 <_impure_ptr>:
200021f4:	200021f8                                .!. 

200021f8 <impure_data>:
200021f8:	00000000 200024e4 2000254c 200025b4     .....$. L%. .%. 
	...
200022a0:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
200022b0:	0005deec 0000000b 00000000 00000000     ................
	...

20002620 <__malloc_av_>:
	...
20002628:	20002620 20002620 20002628 20002628      &.  &. (&. (&. 
20002638:	20002630 20002630 20002638 20002638     0&. 0&. 8&. 8&. 
20002648:	20002640 20002640 20002648 20002648     @&. @&. H&. H&. 
20002658:	20002650 20002650 20002658 20002658     P&. P&. X&. X&. 
20002668:	20002660 20002660 20002668 20002668     `&. `&. h&. h&. 
20002678:	20002670 20002670 20002678 20002678     p&. p&. x&. x&. 
20002688:	20002680 20002680 20002688 20002688     .&. .&. .&. .&. 
20002698:	20002690 20002690 20002698 20002698     .&. .&. .&. .&. 
200026a8:	200026a0 200026a0 200026a8 200026a8     .&. .&. .&. .&. 
200026b8:	200026b0 200026b0 200026b8 200026b8     .&. .&. .&. .&. 
200026c8:	200026c0 200026c0 200026c8 200026c8     .&. .&. .&. .&. 
200026d8:	200026d0 200026d0 200026d8 200026d8     .&. .&. .&. .&. 
200026e8:	200026e0 200026e0 200026e8 200026e8     .&. .&. .&. .&. 
200026f8:	200026f0 200026f0 200026f8 200026f8     .&. .&. .&. .&. 
20002708:	20002700 20002700 20002708 20002708     .'. .'. .'. .'. 
20002718:	20002710 20002710 20002718 20002718     .'. .'. .'. .'. 
20002728:	20002720 20002720 20002728 20002728      '.  '. ('. ('. 
20002738:	20002730 20002730 20002738 20002738     0'. 0'. 8'. 8'. 
20002748:	20002740 20002740 20002748 20002748     @'. @'. H'. H'. 
20002758:	20002750 20002750 20002758 20002758     P'. P'. X'. X'. 
20002768:	20002760 20002760 20002768 20002768     `'. `'. h'. h'. 
20002778:	20002770 20002770 20002778 20002778     p'. p'. x'. x'. 
20002788:	20002780 20002780 20002788 20002788     .'. .'. .'. .'. 
20002798:	20002790 20002790 20002798 20002798     .'. .'. .'. .'. 
200027a8:	200027a0 200027a0 200027a8 200027a8     .'. .'. .'. .'. 
200027b8:	200027b0 200027b0 200027b8 200027b8     .'. .'. .'. .'. 
200027c8:	200027c0 200027c0 200027c8 200027c8     .'. .'. .'. .'. 
200027d8:	200027d0 200027d0 200027d8 200027d8     .'. .'. .'. .'. 
200027e8:	200027e0 200027e0 200027e8 200027e8     .'. .'. .'. .'. 
200027f8:	200027f0 200027f0 200027f8 200027f8     .'. .'. .'. .'. 
20002808:	20002800 20002800 20002808 20002808     .(. .(. .(. .(. 
20002818:	20002810 20002810 20002818 20002818     .(. .(. .(. .(. 
20002828:	20002820 20002820 20002828 20002828      (.  (. ((. ((. 
20002838:	20002830 20002830 20002838 20002838     0(. 0(. 8(. 8(. 
20002848:	20002840 20002840 20002848 20002848     @(. @(. H(. H(. 
20002858:	20002850 20002850 20002858 20002858     P(. P(. X(. X(. 
20002868:	20002860 20002860 20002868 20002868     `(. `(. h(. h(. 
20002878:	20002870 20002870 20002878 20002878     p(. p(. x(. x(. 
20002888:	20002880 20002880 20002888 20002888     .(. .(. .(. .(. 
20002898:	20002890 20002890 20002898 20002898     .(. .(. .(. .(. 
200028a8:	200028a0 200028a0 200028a8 200028a8     .(. .(. .(. .(. 
200028b8:	200028b0 200028b0 200028b8 200028b8     .(. .(. .(. .(. 
200028c8:	200028c0 200028c0 200028c8 200028c8     .(. .(. .(. .(. 
200028d8:	200028d0 200028d0 200028d8 200028d8     .(. .(. .(. .(. 
200028e8:	200028e0 200028e0 200028e8 200028e8     .(. .(. .(. .(. 
200028f8:	200028f0 200028f0 200028f8 200028f8     .(. .(. .(. .(. 
20002908:	20002900 20002900 20002908 20002908     .). .). .). .). 
20002918:	20002910 20002910 20002918 20002918     .). .). .). .). 
20002928:	20002920 20002920 20002928 20002928      ).  ). (). (). 
20002938:	20002930 20002930 20002938 20002938     0). 0). 8). 8). 
20002948:	20002940 20002940 20002948 20002948     @). @). H). H). 
20002958:	20002950 20002950 20002958 20002958     P). P). X). X). 
20002968:	20002960 20002960 20002968 20002968     `). `). h). h). 
20002978:	20002970 20002970 20002978 20002978     p). p). x). x). 
20002988:	20002980 20002980 20002988 20002988     .). .). .). .). 
20002998:	20002990 20002990 20002998 20002998     .). .). .). .). 
200029a8:	200029a0 200029a0 200029a8 200029a8     .). .). .). .). 
200029b8:	200029b0 200029b0 200029b8 200029b8     .). .). .). .). 
200029c8:	200029c0 200029c0 200029c8 200029c8     .). .). .). .). 
200029d8:	200029d0 200029d0 200029d8 200029d8     .). .). .). .). 
200029e8:	200029e0 200029e0 200029e8 200029e8     .). .). .). .). 
200029f8:	200029f0 200029f0 200029f8 200029f8     .). .). .). .). 
20002a08:	20002a00 20002a00 20002a08 20002a08     .*. .*. .*. .*. 
20002a18:	20002a10 20002a10 20002a18 20002a18     .*. .*. .*. .*. 

20002a28 <__malloc_sbrk_base>:
20002a28:	ffffffff                                ....

20002a2c <__malloc_trim_threshold>:
20002a2c:	00020000                                ....

20002a30 <print_mutex>:
	...

20002a38 <__mutex_array_end>:
20002a38:	1000128d 	.word	0x1000128d
20002a3c:	1000030d 	.word	0x1000030d
20002a40:	10001861 	.word	0x10001861
20002a44:	10001921 	.word	0x10001921

20002a48 <__frame_dummy_init_array_entry>:
20002a48:	100002ed 10004e21                       ....!N..
